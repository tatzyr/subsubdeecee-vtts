[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=0"
  },
  {
    "text": "Harry: Hi, I'm Harry, an engineer on the SwiftUI team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=10"
  },
  {
    "text": "Welcome to Beyond Scroll Views where I'll talk about ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=14"
  },
  {
    "text": "some new improvements to scroll views in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=17"
  },
  {
    "text": "The things our devices want to do can rarely be contained ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=21"
  },
  {
    "text": "within their fixed screen sizes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=24"
  },
  {
    "text": "One way they handle this complexity is by introducing scrolling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=27"
  },
  {
    "text": "This allows them to show us everything that won't fit on screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=31"
  },
  {
    "text": "SwiftUI offers a few different components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=34"
  },
  {
    "text": "that let you integrate scrolling into your own apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=37"
  },
  {
    "text": "Today, I'll be talking about one of those components. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=40"
  },
  {
    "text": "ScrollView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=43"
  },
  {
    "text": "A ScrollView is a building block that lets your content scroll. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=44"
  },
  {
    "text": "Scroll views have axes that defines the directions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=49"
  },
  {
    "text": "in which they're scrollable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=52"
  },
  {
    "text": "Scroll views have content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=54"
  },
  {
    "text": "When that content exceeds the size of the ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=56"
  },
  {
    "text": "some of that content will be clipped, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=59"
  },
  {
    "text": "and people will need to scroll to reveal it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=62"
  },
  {
    "text": "Scroll views ensure that the content is placed within the safe area ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=65"
  },
  {
    "text": "by resolving the safe area into margins outsetting its content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=69"
  },
  {
    "text": "A ScrollView evaluates its content eagerly by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=74"
  },
  {
    "text": "You can change this behavior by using a lazy stack.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=78"
  },
  {
    "text": "The exact position of where the ScrollView is scrolled ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=83"
  },
  {
    "text": "within the content is called the content offset. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=86"
  },
  {
    "text": "SwiftUI has offered the ScrollViewReader API ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=89"
  },
  {
    "text": "as a way to control the content offset. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=92"
  },
  {
    "text": "This year, SwiftUI is introducing more ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=94"
  },
  {
    "text": "to both influence and react to the content offset managed by a ScrollView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=97"
  },
  {
    "text": "In this talk, I'll start by discussing ways to influence a ScrollView's margins ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=102"
  },
  {
    "text": "and how they relate to safe areas. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=106"
  },
  {
    "text": "I'll then talk about managing a ScrollView's content offset ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=108"
  },
  {
    "text": "through scroll targets and scroll positions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=111"
  },
  {
    "text": "Finally, I'll show off how you can add some real flair to your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=114"
  },
  {
    "text": "with scroll transitions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=118"
  },
  {
    "text": "Ever since I started making my Colors app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=120"
  },
  {
    "text": "my users have really liked showing me some of their favorite color combinations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=122"
  },
  {
    "text": "I'd like to feature some of these combinations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=127"
  },
  {
    "text": "so that other people can enjoy them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=129"
  },
  {
    "text": "To do this, I've been working on adding a gallery feature to my Colors app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=132"
  },
  {
    "text": "I've already made some progress implementing my gallery. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=136"
  },
  {
    "text": "Throughout this talk I'll be polishing both the header ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=139"
  },
  {
    "text": "and content of the featured section of my gallery.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=142"
  },
  {
    "text": "In my gallery, I have a horizontal ScrollView wrapping a lazy stack. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=147"
  },
  {
    "text": "I'll first make this view look a bit nicer with some margins. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=151"
  },
  {
    "text": "Your first instinct might be to add some padding to a ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=155"
  },
  {
    "text": "and this will inset a ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=159"
  },
  {
    "text": "but notice that now its content is clipped when scrolling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=161"
  },
  {
    "text": "Instead of insetting the ScrollView itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=166"
  },
  {
    "text": "I'd like to extend the content margins of the ScrollView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=169"
  },
  {
    "text": "I can do that with the new safe area padding modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=173"
  },
  {
    "text": "This behaves like the normal padding modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=176"
  },
  {
    "text": "but instead of padding the content, it adds the padding to the safe area. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=179"
  },
  {
    "text": "Now my ScrollView expands the whole width, which lets the next item peek out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=183"
  },
  {
    "text": "Before I go further, I'd talk a little about safe areas ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=188"
  },
  {
    "text": "in relation to ScrollView’s. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=192"
  },
  {
    "text": "Safe areas most commonly come from the device your app is running on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=195"
  },
  {
    "text": "The can also come from APIs like the safe area padding ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=199"
  },
  {
    "text": "or safe area inset modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=202"
  },
  {
    "text": "A ScrollView resolves the safe area into the margins it applies to its content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=204"
  },
  {
    "text": "This includes content you are responsible for, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=210"
  },
  {
    "text": "but also additional content that the ScrollView is responsible for ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=213"
  },
  {
    "text": "like scroll indicators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=217"
  },
  {
    "text": "This means it's not possible to configure different insets ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=219"
  },
  {
    "text": "for different kinds of content by modifying the safe area.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=222"
  },
  {
    "text": "If you want to apply different insets, you can use the new contentMargins API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=228"
  },
  {
    "text": "This API allows you to inset the content of the ScrollView separately ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=233"
  },
  {
    "text": "from the scroll indicators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=237"
  },
  {
    "text": "Or inset the indicators separately from the content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=239"
  },
  {
    "text": "Going back to my gallery, I'll update my safe area padding modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=243"
  },
  {
    "text": "to use the content margin API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=247"
  },
  {
    "text": "Now that my views have a bit of margins applied, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=250"
  },
  {
    "text": "one of the things I'd like to do is control what content offset ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=252"
  },
  {
    "text": "the ScrollView will scroll to once someone lifts their finger.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=256"
  },
  {
    "text": "By default, a ScrollView uses a standard deceleration rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=260"
  },
  {
    "text": "along with the velocity of the scroll ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=264"
  },
  {
    "text": "to calculate the target content offset the scroll should end at. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=267"
  },
  {
    "text": "It does not take into account things like the size of the ScrollView ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=271"
  },
  {
    "text": "or its content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=274"
  },
  {
    "text": "But sometimes those things matter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=276"
  },
  {
    "text": "New in SwiftUI, you can change how a ScrollView calculates ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=278"
  },
  {
    "text": "this target content offset with the scrollTargetBehavior modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=281"
  },
  {
    "text": "This modifier takes a type conforming to the scrollTargetBehavior protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=286"
  },
  {
    "text": "Here I've specified the paging behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=292"
  },
  {
    "text": "Now my ScrollView swipes one page at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=296"
  },
  {
    "text": "The paging behavior is special. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=299"
  },
  {
    "text": "It has a custom deceleration rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=301"
  },
  {
    "text": "and chooses where to scroll ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=303"
  },
  {
    "text": "based on the containing size of the ScrollView itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=305"
  },
  {
    "text": "This works well for iOS, but becomes a little bit much ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=308"
  },
  {
    "text": "on the larger screens of iPadOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=312"
  },
  {
    "text": "Instead of aligning to the containing size of the ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=314"
  },
  {
    "text": "I'd like to align to individual views.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=317"
  },
  {
    "text": "The view aligned behavior aligns the ScrollView to views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=321"
  },
  {
    "text": "so the ScrollView needs to know which views it should consider for alignment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=325"
  },
  {
    "text": "These views are called scroll targets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=329"
  },
  {
    "text": "and there's a new family of modifiers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=332"
  },
  {
    "text": "that let me specify which views are scroll targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=334"
  },
  {
    "text": "Here I'll use the scroll target layout modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=338"
  },
  {
    "text": "to have each hero view in the lazy stack be considered a scroll target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=341"
  },
  {
    "text": "You can also mark individual views as targets ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=346"
  },
  {
    "text": "using the scroll target modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=349"
  },
  {
    "text": "But when using lazy stacks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=352"
  },
  {
    "text": "it's important to use the scroll target layout modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=353"
  },
  {
    "text": "Views outside the visible region have not yet been created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=357"
  },
  {
    "text": "The layout knows about which views it will create, though, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=361"
  },
  {
    "text": "so it can make sure the ScrollView scrolls to the right place.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=365"
  },
  {
    "text": "Now my ScrollView is looking a lot better on iPad. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=370"
  },
  {
    "text": "The paging and view aligned behaviors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=374"
  },
  {
    "text": "are built off of the new ScrollTargetBehavior protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=376"
  },
  {
    "text": "While SwiftUI provides these common behaviors for you, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=379"
  },
  {
    "text": "it also allows you to conform your own types to this protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=382"
  },
  {
    "text": "and implement your own custom behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=385"
  },
  {
    "text": "much like you would adopt the previously introduced layout protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=387"
  },
  {
    "text": "Conform your own types to the ScrollTargetBehavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=392"
  },
  {
    "text": "by implementing the one required method: updateTarget. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=395"
  },
  {
    "text": "SwiftUI calls this method when calculating where a scroll should end, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=399"
  },
  {
    "text": "but also in other contexts like when the ScrollView changes size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=403"
  },
  {
    "text": "Customizing the behavior is easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=408"
  },
  {
    "text": "Here if the target is close to the top of the ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=410"
  },
  {
    "text": "and the scroll was flicked up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=414"
  },
  {
    "text": "I'll prefer to scroll to the exact top of the ScrollView ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=416"
  },
  {
    "text": "by modifying the provided target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=419"
  },
  {
    "text": "This will result in the ScrollView choosing a different content offset ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=422"
  },
  {
    "text": "to be the end point of the scroll. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=426"
  },
  {
    "text": "And that's all it takes to insert my own custom code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=428"
  },
  {
    "text": "for influencing where a ScrollView chooses to scroll.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=430"
  },
  {
    "text": "Let's go back to my gallery view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=435"
  },
  {
    "text": "I'd like to talk about layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=436"
  },
  {
    "text": "Notice that my hero view is sized ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=438"
  },
  {
    "text": "in relation to the overall width of the device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=441"
  },
  {
    "text": "And if we look at iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=444"
  },
  {
    "text": "two views fit evenly within the device's width. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=445"
  },
  {
    "text": "Previously you would've had to use a GeometryReader to accomplish this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=449"
  },
  {
    "text": "but this year SwiftUI makes this much easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=453"
  },
  {
    "text": "with a new API called the containerRelativeFrame modifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=456"
  },
  {
    "text": "I'll show you how my hero view uses this API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=460"
  },
  {
    "text": "I'll start with a stack of color views, along with a frame modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=464"
  },
  {
    "text": "specifying a fixed height. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=468"
  },
  {
    "text": "I'll add the containerRelativeFrame modifier to my view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=471"
  },
  {
    "text": "Here I specify the horizontal axis, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=474"
  },
  {
    "text": "which lets the view just take on the width of its container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=477"
  },
  {
    "text": "In my case the container will be the surrounding ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=481"
  },
  {
    "text": "but it might also be the nearest column of a navigation split view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=484"
  },
  {
    "text": "or the window of your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=487"
  },
  {
    "text": "When the width of my container changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=490"
  },
  {
    "text": "the size of my views automatically update. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=492"
  },
  {
    "text": "I can create a grid-like layout of these views by providing a count ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=495"
  },
  {
    "text": "and spacing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=498"
  },
  {
    "text": "I can conditionalize the count based on the horizontal sizeClass ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=501"
  },
  {
    "text": "to have two columns on iPad and one column on phone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=505"
  },
  {
    "text": "What's even better is that I can remove the OS conditionals ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=508"
  },
  {
    "text": "as the horizontal sizeClass environment property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=512"
  },
  {
    "text": "is now available on all platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=515"
  },
  {
    "text": "Finally, I'll use the aspectRatio modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=518"
  },
  {
    "text": "to have a height relative to the width, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=521"
  },
  {
    "text": "instead of hardcoding a fixed height. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=524"
  },
  {
    "text": "So I've gotten the layout and scroll behavior of my gallery done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=528"
  },
  {
    "text": "There's some more changes I'd like to make. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=531"
  },
  {
    "text": "One thing you'll notice are the scroll indicators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=534"
  },
  {
    "text": "I'd like to remove those.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=537"
  },
  {
    "text": "I can use the existing scrollIndicators API to accomplish this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=540"
  },
  {
    "text": "This looks great when swiping my finger on an iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=545"
  },
  {
    "text": "but I often use my gallery on a Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=548"
  },
  {
    "text": "And on a Mac, I might not be able to easily perform a horizontal swipe gesture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=550"
  },
  {
    "text": "like when using a mouse or other input devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=555"
  },
  {
    "text": "And when I connect a mouse, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=559"
  },
  {
    "text": "the indicators are visible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=560"
  },
  {
    "text": "even though I've requested they be hidden. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=562"
  },
  {
    "text": "Using a mouse can make scrolling difficult or impossible without scroll indicators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=565"
  },
  {
    "text": "For this reason, the default behavior of the scrollIndicators modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=569"
  },
  {
    "text": "is to hide the indicators when using more flexible input devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=574"
  },
  {
    "text": "like trackpads, but to allow the indicators to show ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=577"
  },
  {
    "text": "when a mouse is connected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=581"
  },
  {
    "text": "You can provide a value of never to the scrollIndicators modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=583"
  },
  {
    "text": "to always hide the indicators regardless of input device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=587"
  },
  {
    "text": "But my app still needs to support people who use a mouse. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=590"
  },
  {
    "text": "So I'll need to provide an alternative means to scroll my gallery for them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=594"
  },
  {
    "text": "Instead of scroll indicators, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=598"
  },
  {
    "text": "I'll render some views that allow users to scroll ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=600"
  },
  {
    "text": "to the previous or next views with a click. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=603"
  },
  {
    "text": "To start building that, let's clean my ScrollView up a bit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=607"
  },
  {
    "text": "I'll move my ScrollView into a VStack with my header view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=611"
  },
  {
    "text": "Now I'll focus on the header view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=615"
  },
  {
    "text": "I'll add some custom paddle views into the header view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=619"
  },
  {
    "text": "In past versions of SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=622"
  },
  {
    "text": "I would have reached for a ScrollViewReader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=624"
  },
  {
    "text": "to pass to my paddles and scroll to the appropriate view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=626"
  },
  {
    "text": "New in SwiftUI, though, is the scrollPosition modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=630"
  },
  {
    "text": "This modifier associates a binding to a state wrapping an identifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=634"
  },
  {
    "text": "I'll pass that to my scrollPosition modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=638"
  },
  {
    "text": "which the ScrollView will read from and to my header view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=641"
  },
  {
    "text": "In the paddles of my header view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=645"
  },
  {
    "text": "I can write to the binding like any other piece of state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=647"
  },
  {
    "text": "When the binding is written to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=651"
  },
  {
    "text": "the ScrollView will scroll to the view with that ID. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=652"
  },
  {
    "text": "Just like the view aligned ScrollTargetBehavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=656"
  },
  {
    "text": "the scroll position modifier uses the scroll target layout modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=659"
  },
  {
    "text": "to know which views to consider for querying their identity values.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=664"
  },
  {
    "text": "The scroll position modifier also allows me to know the identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=669"
  },
  {
    "text": "of the view currently scrolled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=673"
  },
  {
    "text": "So I can add to my header view some text that shows the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=675"
  },
  {
    "text": "of the hero image currently scrolled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=678"
  },
  {
    "text": "When the most leading view in my ScrollView changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=682"
  },
  {
    "text": "the binding automatically updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=685"
  },
  {
    "text": "Now my mouse users can scroll through my gallery. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=687"
  },
  {
    "text": "There's one last bit of polish I'd like to add to this view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=690"
  },
  {
    "text": "Just like its useful to know which view is currently scrolled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=693"
  },
  {
    "text": "sometimes I want to visually alter a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=697"
  },
  {
    "text": "based on where it is within the ScrollView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=699"
  },
  {
    "text": "There's new API called ScrollTransitions in SwiftUI that make this really easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=703"
  },
  {
    "text": "A ScrollTransition is a lot like a normal transition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=708"
  },
  {
    "text": "A transition describes the changes a view should undergo ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=712"
  },
  {
    "text": "when its appearing or disappearing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=715"
  },
  {
    "text": "When a view has appeared, it's in its identity phase ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=718"
  },
  {
    "text": "where no customizations should be applied. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=721"
  },
  {
    "text": "A ScrollTransition describes a similar set of changes as a transition ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=724"
  },
  {
    "text": "but instead applies those as a view enters the visible region of a ScrollView ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=729"
  },
  {
    "text": "and then leaves the visible region.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=733"
  },
  {
    "text": "By default, when the view is in the center of the visible region, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=737"
  },
  {
    "text": "it's in the identity phase of the ScrollTransition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=741"
  },
  {
    "text": "Let's look at this in the context of my hero view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=744"
  },
  {
    "text": "I'll clean this up a bit to focus on ScrollTransitions.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=747"
  },
  {
    "text": "As a view gets near the edges of the ScrollView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=753"
  },
  {
    "text": "I'd like it to scale down a bit in size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=755"
  },
  {
    "text": "I'll start by adding the scrollTransition modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=758"
  },
  {
    "text": "This API takes content and a phase ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=762"
  },
  {
    "text": "and allows you to specify visual changes to the content based on the phase. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=765"
  },
  {
    "text": "Here I'll specify a decrease in scale ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=770"
  },
  {
    "text": "when the view is not in its identity phase.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=773"
  },
  {
    "text": "That looks great! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=777"
  },
  {
    "text": "ScrollTransitions work with a new protocol called VisualEffect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=779"
  },
  {
    "text": "This protocol provides a set of customizations for view content ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=784"
  },
  {
    "text": "that are safe to use as functions of layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=787"
  },
  {
    "text": "like the content offset of a ScrollView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=790"
  },
  {
    "text": "Many of them might look familiar to you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=792"
  },
  {
    "text": "You already know about the scaleEffect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=795"
  },
  {
    "text": "You can also customize the rotation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=798"
  },
  {
    "text": "or the offset much like you would with view modifiers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=800"
  },
  {
    "text": "However, not all view modifiers can be safely used inside of a scrollTransition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=804"
  },
  {
    "text": "For example, customizing the font is not supported and will not build. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=810"
  },
  {
    "text": "Anything that will change the overall content size of the ScrollView ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=815"
  },
  {
    "text": "cannot be used within a scrollTransition modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=818"
  },
  {
    "text": "Wow, we've covered a lot so let's do a quick review.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=822"
  },
  {
    "text": "We talked about the differences between safe areas and contentMargins ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=827"
  },
  {
    "text": "and their relationship to ScrollViews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=831"
  },
  {
    "text": "I showed you how you can use the paging and view aligned scrollTargetBehaviors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=833"
  },
  {
    "text": "to influence how a ScrollView behaves ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=838"
  },
  {
    "text": "and how you can write your own conformances ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=840"
  },
  {
    "text": "to the scrollTargetBehavior protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=842"
  },
  {
    "text": "You learned about how much easier it is to create layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=845"
  },
  {
    "text": "relative to their container using the containerRelativeFrame modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=849"
  },
  {
    "text": "I hooked into the state of a ScrollView using the scrollPosition modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=854"
  },
  {
    "text": "allowing me to both programmatically scroll ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=857"
  },
  {
    "text": "and be informed of which view is currently scrolled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=860"
  },
  {
    "text": "And finally, I created visual effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=864"
  },
  {
    "text": "based on the content offset of my ScrollView ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=866"
  },
  {
    "text": "with the scrollTransition API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=868"
  },
  {
    "text": "I hope you've enjoyed learning about these improvements to ScrollViews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=871"
  },
  {
    "text": "Thanks, and have a great WWDC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=874"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10159/?time=877"
  }
]