[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=0"
  },
  {
    "text": "Philippe: Hi, my name is Philippe. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=10"
  },
  {
    "text": "I am really pleased to present a magical new feature in Swift: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=12"
  },
  {
    "text": "Observation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=17"
  },
  {
    "text": "This feature lets you define your models using standard Swift syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=18"
  },
  {
    "text": "and use those types to have UI respond to changes to that model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=23"
  },
  {
    "text": "This makes developing with SwiftUI seamless and intuitive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=28"
  },
  {
    "text": "Today we will be covering a few topics: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=33"
  },
  {
    "text": "An overview of what Observation is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=36"
  },
  {
    "text": "a set of handy rules on when to use the property wrappers from SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=39"
  },
  {
    "text": "then we'll cover a few of the more advanced usages of observable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=45"
  },
  {
    "text": "And we'll wrap up with some examples on how to update code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=51"
  },
  {
    "text": "from using ObservableObject to the new @Observable macro.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=55"
  },
  {
    "text": "Observation is a new Swift feature for tracking changes to properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=62"
  },
  {
    "text": "It works with normal Swift types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=67"
  },
  {
    "text": "and transforms them with magic of macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=69"
  },
  {
    "text": "We often write data model types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=73"
  },
  {
    "text": "and they have a number of properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=75"
  },
  {
    "text": "that eventually, we'll want to use in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=77"
  },
  {
    "text": "What if I told you adding @Observable is all you need ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=81"
  },
  {
    "text": "to make UI respond to changes in your data models? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=86"
  },
  {
    "text": "New in Swift 5.9 you can make models simpler than ever. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=91"
  },
  {
    "text": "This uses the new macro system in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=97"
  },
  {
    "text": "The \"@Observable\" tells the Swift compiler to transform your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=100"
  },
  {
    "text": "from what you wrote to an expanded form that makes the type able to be observed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=105"
  },
  {
    "text": "You can use observable types to power your SwiftUI views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=111"
  },
  {
    "text": "And the amazing part is that they don't need any sort of property wrapper to work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=116"
  },
  {
    "text": "I have some tasty samples from our donut food truck app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=121"
  },
  {
    "text": "so let's dive right in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=125"
  },
  {
    "text": "Here we have a simple view showing donuts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=127"
  },
  {
    "text": "SwiftUI knows that the model accesses specific properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=131"
  },
  {
    "text": "when executing the body call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=136"
  },
  {
    "text": "In this case it can detect that the property 'donuts' ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=138"
  },
  {
    "text": "is accessed when executing the body of the donut menu view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=141"
  },
  {
    "text": "When body is executed, SwiftUI tracks all access ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=146"
  },
  {
    "text": "to properties used from 'Observable' types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=150"
  },
  {
    "text": "It then takes that tracking information and uses it to determine ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=153"
  },
  {
    "text": "when the next change to any of those properties on those specific instances ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=158"
  },
  {
    "text": "will change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=162"
  },
  {
    "text": "Here, if we change the donuts array by clicking the add donut button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=164"
  },
  {
    "text": "it will invalidate the donut menu view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=169"
  },
  {
    "text": "and the UI is updated accordingly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=172"
  },
  {
    "text": "What's neat, is that if, say an order is added, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=176"
  },
  {
    "text": "the view won't be invalidated ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=179"
  },
  {
    "text": "because that property isn't part of the tracked properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=181"
  },
  {
    "text": "it determined when executing the body of the view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=184"
  },
  {
    "text": "Let's next cover what happens when you use a computed property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=188"
  },
  {
    "text": "Adding in a computed property follows those same rules as before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=192"
  },
  {
    "text": "When a property that is used changes, the UI updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=196"
  },
  {
    "text": "In the newly added content, the model's orderCount is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=202"
  },
  {
    "text": "which that accesses the orders property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=206"
  },
  {
    "text": "So that means, in this example if the orders change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=209"
  },
  {
    "text": "that text will be updated ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=214"
  },
  {
    "text": "because the orderCount accesses the order's property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=215"
  },
  {
    "text": "Using the \"@Observable\" macro expands your types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=221"
  },
  {
    "text": "so they can support Observation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=225"
  },
  {
    "text": "This lets SwiftUI track access to those properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=227"
  },
  {
    "text": "and observe when the next property will change out of that Observation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=231"
  },
  {
    "text": "Tracking things like that let your UI only recalculate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=236"
  },
  {
    "text": "the body of views when those specific properties change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=241"
  },
  {
    "text": "which we've seen some really fantastic performance improvements from that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=245"
  },
  {
    "text": "If you wanna dive deep into macros, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=250"
  },
  {
    "text": "make sure to check out the \"Write Swift macros\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=253"
  },
  {
    "text": "and \"Expand on Swift macros\" sessions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=256"
  },
  {
    "text": "With Observable, the property wrappers for SwiftUI are even easier than ever. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=259"
  },
  {
    "text": "State, environment, and bindable are the three primary property wrappers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=265"
  },
  {
    "text": "for working with SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=270"
  },
  {
    "text": "We've already covered the case where you don't need any property wrappers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=272"
  },
  {
    "text": "to interface with observable types with SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=275"
  },
  {
    "text": "but let's dive into the cases where you do. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=278"
  },
  {
    "text": "Starting off with @State. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=282"
  },
  {
    "text": "When the view needs to have its own state stored in a model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=284"
  },
  {
    "text": "use the @State property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=288"
  },
  {
    "text": "Here we have the observable model object Donut being used in a sheet presentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=291"
  },
  {
    "text": "When the sheet is presented, the donutToAdd state variable ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=298"
  },
  {
    "text": "is used to bind values to the editable fields. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=302"
  },
  {
    "text": "The \"donutToAdd\" property is managed by the lifetime of the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=305"
  },
  {
    "text": "it's contained in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=310"
  },
  {
    "text": "Next up, @Environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=311"
  },
  {
    "text": "Environment lets values be propagated as globally accessible values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=314"
  },
  {
    "text": "This lets things be shared in many places. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=320"
  },
  {
    "text": "Observable types work fantastically here ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=324"
  },
  {
    "text": "since the updates created by them are based upon access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=327"
  },
  {
    "text": "When invoking the body of the food truck menu view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=333"
  },
  {
    "text": "the property userName of the account object is accessed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=336"
  },
  {
    "text": "So when the userName will change, the menu view updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=341"
  },
  {
    "text": "The newest of the family of property wrappers is '@Bindable'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=345"
  },
  {
    "text": "The bindable property wrapper is really lightweight. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=350"
  },
  {
    "text": "All it does is allow bindings to be created from that type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=353"
  },
  {
    "text": "Getting binding out of a bindable wrapped property is really easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=358"
  },
  {
    "text": "Just use the $ syntax to get the binding to that property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=364"
  },
  {
    "text": "Most often, this will be bindings to observable types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=369"
  },
  {
    "text": "For the donut view, we have the name being displayed with Text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=373"
  },
  {
    "text": "But in reality, we want to be able to edit that name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=378"
  },
  {
    "text": "So instead of a Text, we can use a TextField. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=382"
  },
  {
    "text": "That TextField takes a binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=386"
  },
  {
    "text": "It reads from the binding to populate the value of the TextField, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=389"
  },
  {
    "text": "but it also writes back to the binding when the user changes the value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=394"
  },
  {
    "text": "To make bindings to the donut, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=399"
  },
  {
    "text": "all we need to do is use the '@Bindable' property wrapper ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=401"
  },
  {
    "text": "on the donut property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=405"
  },
  {
    "text": "The property wrapper annotation allows us to use the '$donut.name' syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=407"
  },
  {
    "text": "and creates a binding when used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=412"
  },
  {
    "text": "To wrap up the wrappers, there are only three questions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=415"
  },
  {
    "text": "you need to answer for using observable models in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=419"
  },
  {
    "text": "Does this model need to be state of the view itself? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=423"
  },
  {
    "text": "If so, use '@State'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=427"
  },
  {
    "text": "Does this model need to be part of the global environment of the application? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=430"
  },
  {
    "text": "If so, use '@Environment'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=435"
  },
  {
    "text": "Does this model just need bindings? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=439"
  },
  {
    "text": "If so, use the new '@Bindable'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=442"
  },
  {
    "text": "And if none of these questions have the answer as yes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=446"
  },
  {
    "text": "just use the model as a property of your view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=449"
  },
  {
    "text": "So far, we've covered properties that start off in your model as stored. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=452"
  },
  {
    "text": "Observable can do a lot more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=457"
  },
  {
    "text": "Because SwiftUI tracks access to fields per instance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=460"
  },
  {
    "text": "it means that you can use arrays, optionals, or for that matter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=464"
  },
  {
    "text": "any type that contains your observable models. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=469"
  },
  {
    "text": "The donut list view has an array of donut models. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=473"
  },
  {
    "text": "Each model itself is '@Observable'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=477"
  },
  {
    "text": "When any of the names of those donuts change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=481"
  },
  {
    "text": "SwiftUI detects the access to that property on that specific instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=485"
  },
  {
    "text": "and tracks it to know when to invalidate the view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=490"
  },
  {
    "text": "So here, when the donut name is changed via the randomize button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=494"
  },
  {
    "text": "the view updates accordingly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=500"
  },
  {
    "text": "This lets you build your models how you want. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=503"
  },
  {
    "text": "You can have arrays of models being observed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=507"
  },
  {
    "text": "or even model types that contain other observable model types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=510"
  },
  {
    "text": "The general rule is for Observable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=515"
  },
  {
    "text": "if a property that is used changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=518"
  },
  {
    "text": "the view will update. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=522"
  },
  {
    "text": "There is a case where that rule does not fully apply. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=524"
  },
  {
    "text": "If a computed property does not have any stored property it is comprised with, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=528"
  },
  {
    "text": "then two extra steps need to be taken to make it work with Observation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=534"
  },
  {
    "text": "This only needs to be done when the property that would be observed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=540"
  },
  {
    "text": "is not changed via some sort of composition ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=544"
  },
  {
    "text": "of stored properties in the observable type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=546"
  },
  {
    "text": "In this case, all that needs to be done is tell Observation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=549"
  },
  {
    "text": "when the property is accessed and when the property changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=554"
  },
  {
    "text": "This is how Observation synthesizes access to properties normally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=558"
  },
  {
    "text": "except here we've rewritten those custom access points manually ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=563"
  },
  {
    "text": "so that the non-observable location can be read and store the name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=567"
  },
  {
    "text": "Most of the time, these type of manual cases are not needed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=573"
  },
  {
    "text": "because most of the time, properties of the models in question ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=577"
  },
  {
    "text": "are composed from other stored properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=581"
  },
  {
    "text": "But in the rare cases where you need that advanced capability, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=584"
  },
  {
    "text": "Observation is flexible enough but easy enough to do on your own. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=590"
  },
  {
    "text": "SwiftUI can identify changes in composition ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=595"
  },
  {
    "text": "since it tracks observable types by access to those properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=599"
  },
  {
    "text": "This means that if a computed property is composed from other stored properties, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=604"
  },
  {
    "text": "then the Observation will just work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=610"
  },
  {
    "text": "However, in the few cases where that's not true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=613"
  },
  {
    "text": "you can use Observation directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=617"
  },
  {
    "text": "to manually add those calls to flag access and mutation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=619"
  },
  {
    "text": "Previously in the Food Truck app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=625"
  },
  {
    "text": "we used ObservableObject to achieve some of the same things ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=628"
  },
  {
    "text": "we did with the new @Observable macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=632"
  },
  {
    "text": "If you have an app that uses SwiftUI today, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=635"
  },
  {
    "text": "you might be in a very similar situation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=638"
  },
  {
    "text": "The Observable macro can simplify your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=642"
  },
  {
    "text": "and chances are, you might see a decent performance boost too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=645"
  },
  {
    "text": "Before the change, the FoodTruckModel type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=650"
  },
  {
    "text": "had an ObservableObject conformance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=653"
  },
  {
    "text": "and it had a number of properties that were marked ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=655"
  },
  {
    "text": "with the @Published property wrapper. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=658"
  },
  {
    "text": "Changing over to the @Observable macro was pretty easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=661"
  },
  {
    "text": "All we needed to do is remove the conformance to ObservableObject, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=666"
  },
  {
    "text": "remove the '@Published', ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=671"
  },
  {
    "text": "and mark it with the '@Observable' macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=672"
  },
  {
    "text": "When it comes to the views, there were a number of '@ObservedObject' ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=676"
  },
  {
    "text": "and '@EnvironmentObject' property wrappers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=680"
  },
  {
    "text": "In all cases of the '@ObservedObject' wrappers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=683"
  },
  {
    "text": "either disappeared or needed just the bindings ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=687"
  },
  {
    "text": "and changed to the new '@Bindable'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=691"
  },
  {
    "text": "The '@EnvironmentObject' wrappers got transformed into just '@Environment'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=694"
  },
  {
    "text": "Changing from ObservableObject to the new '@Observable' macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=700"
  },
  {
    "text": "was mostly just deleting annotations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=705"
  },
  {
    "text": "Or simplifying them down to the three primary property wrappers; ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=708"
  },
  {
    "text": "@State, @Environment, and @Bindable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=712"
  },
  {
    "text": "Which makes writing new features easier to reason about ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=717"
  },
  {
    "text": "since there are fewer options that need to be considered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=720"
  },
  {
    "text": "Observation has just the right level of magic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=724"
  },
  {
    "text": "It lets you get started easily ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=729"
  },
  {
    "text": "and lets you work with your data models directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=731"
  },
  {
    "text": "by using the @Observable macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=734"
  },
  {
    "text": "When you need, it lets you write the manual versions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=737"
  },
  {
    "text": "for advanced use cases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=741"
  },
  {
    "text": "For new development, using Observable is the easiest way to get started. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=744"
  },
  {
    "text": "And for existing applications, using Observable can simplify your models ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=750"
  },
  {
    "text": "and improve performance when adding new features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=755"
  },
  {
    "text": "I encourage you to try it out ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=758"
  },
  {
    "text": "and harness that magic yourself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=761"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10149/?time=764"
  }
]