[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=0"
  },
  {
    "text": "Hi everyone, I am Gauri Jog, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=10"
  },
  {
    "text": "and I work on the Metal Ecosystem team here at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=13"
  },
  {
    "text": "I'm excited to talk to you about optimizing GPU renderers using Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=16"
  },
  {
    "text": "Modern digital content creation applications and game-engines ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=21"
  },
  {
    "text": "empower content creators to interactively create and modify materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=25"
  },
  {
    "text": "for their 3D assets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=29"
  },
  {
    "text": "There are several common techniques for handling ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=31"
  },
  {
    "text": "these complex and dynamic materials at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=33"
  },
  {
    "text": "Some applications compile materials into individual shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=37"
  },
  {
    "text": "and others use data-driven solutions such as uber shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=40"
  },
  {
    "text": "or shader virtual machines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=44"
  },
  {
    "text": "These material-centric workflows have two main performance goals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=47"
  },
  {
    "text": "Authoring of materials should be responsive for fast iteration ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=51"
  },
  {
    "text": "and the best experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=55"
  },
  {
    "text": "Rendering performance should be as good as possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=57"
  },
  {
    "text": "for real-time interactivity and efficient final-frame rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=60"
  },
  {
    "text": "In this demonstration of Blender 3D, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=65"
  },
  {
    "text": "material editing is responsive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=68"
  },
  {
    "text": "When you modify a material slider in the user interface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=71"
  },
  {
    "text": "the results are shown instantly in the viewport ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=74"
  },
  {
    "text": "without any stutters due to shader re-compilation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=77"
  },
  {
    "text": "Once the material is modified, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=81"
  },
  {
    "text": "the resulting rendering performance is fast and interactive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=83"
  },
  {
    "text": "giving content creators the ability ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=86"
  },
  {
    "text": "to efficiently view the results of their work.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=88"
  },
  {
    "text": "To achieve a responsive and performant workflow in your application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=94"
  },
  {
    "text": "you can leverage key Metal features and implement Metal best practices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=98"
  },
  {
    "text": "Metal can help you maximize complex shaders' performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=103"
  },
  {
    "text": "leverage asynchronous compilation to keep the application responsive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=107"
  },
  {
    "text": "compile faster with dynamic linking ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=111"
  },
  {
    "text": "and tune your compute shaders with new Metal compiler options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=114"
  },
  {
    "text": "Optimizing your shaders is the key to performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=119"
  },
  {
    "text": "An uber shader is an example of a long and complex shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=125"
  },
  {
    "text": "that can be used to render any possible material. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=128"
  },
  {
    "text": "These types of shaders have lots of branches for any possible combination. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=131"
  },
  {
    "text": "When artists create material, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=137"
  },
  {
    "text": "the material parameters are stored in a Metal buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=140"
  },
  {
    "text": "used by the material shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=143"
  },
  {
    "text": "This buffer gets updated when you change the parameters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=145"
  },
  {
    "text": "but there is no recompilation required.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=148"
  },
  {
    "text": "This approach provides a great responsive authoring experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=155"
  },
  {
    "text": "However, uber shaders are not optimal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=159"
  },
  {
    "text": "since they have to account for all the possible options.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=163"
  },
  {
    "text": "To make the most optimal shader variant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=168"
  },
  {
    "text": "you should use Metal specialization with function constants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=171"
  },
  {
    "text": "Simply declare function constants in your Metal shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=175"
  },
  {
    "text": "and set their values at runtime when they are changed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=178"
  },
  {
    "text": "The material buffer contents simply become constants ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=182"
  },
  {
    "text": "in your shader pipeline states, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=184"
  },
  {
    "text": "dynamic branching is eliminated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=186"
  },
  {
    "text": "Specialized materials give you the most performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=189"
  },
  {
    "text": "This is a comparison of real-time performance data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=193"
  },
  {
    "text": "from two common test assets in Blender 3D, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=196"
  },
  {
    "text": "Wanderer and Tree Creature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=199"
  },
  {
    "text": "First is the baseline performance in frames per second ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=201"
  },
  {
    "text": "of the scenes using an uber shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=205"
  },
  {
    "text": "Second is the specialized shader approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=208"
  },
  {
    "text": "with function constants that performs much faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=211"
  },
  {
    "text": "In order to make the fastest specialized shader variant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=214"
  },
  {
    "text": "use function constants to disable unused features and eliminate branching.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=218"
  },
  {
    "text": "An uber shader would query material parameters from a buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=225"
  },
  {
    "text": "doing conditional branches at runtime to enable and disable features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=229"
  },
  {
    "text": "With function constants you declare one constant per material feature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=234"
  },
  {
    "text": "Now the dynamic branch for the feature codepath ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=239"
  },
  {
    "text": "is replaced with the function constant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=244"
  },
  {
    "text": "eliminating all unused code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=246"
  },
  {
    "text": "Here is the same uber shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=249"
  },
  {
    "text": "now using function constants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=251"
  },
  {
    "text": "The Metal compiler can fold these as constant booleans ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=254"
  },
  {
    "text": "and remove unused code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=257"
  },
  {
    "text": "Branch expressions that resolve to false will be optimized out, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=260"
  },
  {
    "text": "leaving only the true branches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=265"
  },
  {
    "text": "All the unused control flow is optimized out.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=269"
  },
  {
    "text": "Specialized shader now does not need to query material data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=274"
  },
  {
    "text": "having a much simpler control flow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=278"
  },
  {
    "text": "Memory loads and branches have been removed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=280"
  },
  {
    "text": "resulting in faster runtime performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=283"
  },
  {
    "text": "Function specialization also helps with constants folding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=288"
  },
  {
    "text": "Material parameters that don't change are replaced with constants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=292"
  },
  {
    "text": "This example material uses a collection of input parameters from a Metal buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=298"
  },
  {
    "text": "The parameters could be color, weight, sheen color, and many more.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=303"
  },
  {
    "text": "At material creation time, these static parameters can be replaced ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=309"
  },
  {
    "text": "with function constants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=314"
  },
  {
    "text": "Function constants produce the most optimal code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=316"
  },
  {
    "text": "with no buffer reads required. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=319"
  },
  {
    "text": "On the host side, function constant values are provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=323"
  },
  {
    "text": "when creating a specialized pipeline state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=327"
  },
  {
    "text": "MaterialParameter structure can be used to represent all parameters ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=330"
  },
  {
    "text": "that are constant for a material. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=334"
  },
  {
    "text": "IsGlossy is an example of a boolean material feature flag ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=337"
  },
  {
    "text": "controlling glossiness. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=341"
  },
  {
    "text": "MaterialColor is an example of a vector parameter used to describe color.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=344"
  },
  {
    "text": "To create a specialized Pipeline State Object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=350"
  },
  {
    "text": "iterate over a MetalFunctionConstantValues set ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=353"
  },
  {
    "text": "and insert the values using setConstantValue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=357"
  },
  {
    "text": "Then just create a Render Pipeline as usual. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=362"
  },
  {
    "text": "The only difference is when creating the fragment function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=365"
  },
  {
    "text": "you'd use the variant of newFunctionWithName with constantValues.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=369"
  },
  {
    "text": "Finally, create your Pipeline State Object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=376"
  },
  {
    "text": "The resulting shader is the most optimal performing variant of this material.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=379"
  },
  {
    "text": "Always use Xcode's GPU Debugger Performance section ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=386"
  },
  {
    "text": "to confirm the impact of using function constants.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=390"
  },
  {
    "text": "The original uber shader shows a high number of ALU instructions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=395"
  },
  {
    "text": "and a large amount of spill. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=399"
  },
  {
    "text": "The number of memory waits is also large.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=402"
  },
  {
    "text": "Specialized approach gives immediate relief on the ALU and spill. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=406"
  },
  {
    "text": "This is due to dead code elimination and constants folding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=411"
  },
  {
    "text": "Also, the number of memory waits is significantly smaller.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=415"
  },
  {
    "text": "Observing the original uber shader in runtime shader execution costs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=421"
  },
  {
    "text": "the GPU is spending significant time on memory waits.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=426"
  },
  {
    "text": "Specialized approach, in contrast, spends far less time on memory waits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=431"
  },
  {
    "text": "enabling more productive ALU utilization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=436"
  },
  {
    "text": "along with other efficiency benefits.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=439"
  },
  {
    "text": "In the GPU Debugger timeline view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=443"
  },
  {
    "text": "it takes 58 milliseconds ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=446"
  },
  {
    "text": "to render the material pass using the uber shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=448"
  },
  {
    "text": "And only 12.5 milliseconds to render with specialized versions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=451"
  },
  {
    "text": "It's a pretty dramatic improvement.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=456"
  },
  {
    "text": "Material specialization requires runtime shader compilation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=460"
  },
  {
    "text": "and this will often result in hitching if you block and wait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=465"
  },
  {
    "text": "for these specialized materials to be created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=468"
  },
  {
    "text": "The Metal asynchronous compilation APIs allow you to use generic uber shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=472"
  },
  {
    "text": "and keep user experience interactive and responsive ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=477"
  },
  {
    "text": "while generating specialized versions in the background.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=481"
  },
  {
    "text": "To opt in to the asynchronous pipeline state creation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=486"
  },
  {
    "text": "provide a completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=489"
  },
  {
    "text": "These calls will return immediately ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=491"
  },
  {
    "text": "allowing you to keep the user experience interactive and responsive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=494"
  },
  {
    "text": "Completion handler will be called when specialized pipeline state is ready, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=498"
  },
  {
    "text": "and you can switch to the optimal shader right away.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=502"
  },
  {
    "text": "This is a diagram of an asynchronous material workflow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=508"
  },
  {
    "text": "By default, when the material has not yet been specialized, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=511"
  },
  {
    "text": "you use your uber shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=516"
  },
  {
    "text": "At the same time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=518"
  },
  {
    "text": "Metal compiles the specialized shader in the background.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=520"
  },
  {
    "text": "Once this is done, you can switch out the uber shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=524"
  },
  {
    "text": "for the fast specialized material.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=527"
  },
  {
    "text": "Runtime Metal shaders compilation is designed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=531"
  },
  {
    "text": "to provide a balanced level of parallelism. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=534"
  },
  {
    "text": "However, modern content creation applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=538"
  },
  {
    "text": "need to provide multi-material editing workflows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=541"
  },
  {
    "text": "resulting in many shader re-compilations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=544"
  },
  {
    "text": "To help such heavy authoring needs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=548"
  },
  {
    "text": "you may want to ask Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=550"
  },
  {
    "text": "to maximize shader compilation parallelism. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=552"
  },
  {
    "text": "Metal device has a new property in macOS13.3 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=556"
  },
  {
    "text": "called should-Maximize-Concurrent-Compilation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=560"
  },
  {
    "text": "When you set it to Yes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=564"
  },
  {
    "text": "Metal compiler will make the best use of your CPU cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=565"
  },
  {
    "text": "Maximizing concurrent compilation is really great ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=570"
  },
  {
    "text": "for multi-material authoring workflows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=573"
  },
  {
    "text": "With additional compiler jobs available, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=577"
  },
  {
    "text": "specialized material variants are available much sooner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=580"
  },
  {
    "text": "Here is how it all works in practice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=584"
  },
  {
    "text": "When material parameters are changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=586"
  },
  {
    "text": "the current specialized variants of the material are invalidated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=589"
  },
  {
    "text": "there is a switch back to using the uber shader to keep authoring fluid. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=593"
  },
  {
    "text": "A new async job is queued and once it completes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=598"
  },
  {
    "text": "you can observe a substantial performance improvement ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=601"
  },
  {
    "text": "once the specialized material is engaged. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=604"
  },
  {
    "text": "Most modern apps have extremely complex materials, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=607"
  },
  {
    "text": "so it can take a significant amount of time ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=611"
  },
  {
    "text": "for a specialized variant to be ready. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=613"
  },
  {
    "text": "Dynamic libraries in Metal can be used to pre-compile the utility functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=616"
  },
  {
    "text": "and reduce overall material compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=621"
  },
  {
    "text": "You do this by splitting up groups of functionality ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=625"
  },
  {
    "text": "into separate dynamic libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=628"
  },
  {
    "text": "For even faster runtime compilation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=631"
  },
  {
    "text": "utility libraries could be precompiled offline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=633"
  },
  {
    "text": "And you end up compiling much less code at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=637"
  },
  {
    "text": "If I were to take the previous uber shader and split it into dylibs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=643"
  },
  {
    "text": "one approach is to split it by common groups of functionality. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=647"
  },
  {
    "text": "In this case, one math utility library ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=651"
  },
  {
    "text": "and another for lighting functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=655"
  },
  {
    "text": "To make function symbols visible for linking, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=658"
  },
  {
    "text": "you assign \"default” visibility. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=661"
  },
  {
    "text": "Symbols can also be hidden from external programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=664"
  },
  {
    "text": "by assigning visibility to \"hidden\".",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=667"
  },
  {
    "text": "There are two properties to check ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=672"
  },
  {
    "text": "if your Metal device supports dynamic libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=674"
  },
  {
    "text": "For render pipelines you should use the supportsRenderDynamicLibraries property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=677"
  },
  {
    "text": "of the Metal device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=682"
  },
  {
    "text": "This is currently available on devices with Apple6 and above GPU families.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=684"
  },
  {
    "text": "For compute pipelines you should query the supportsDynamicLibraries property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=690"
  },
  {
    "text": "This is available on Apple6 and above ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=696"
  },
  {
    "text": "and for most of the Mac2 GPU families.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=698"
  },
  {
    "text": "To create a dynamic library from an existing Metal library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=703"
  },
  {
    "text": "simply call newDynamicLibrary ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=707"
  },
  {
    "text": "and pass it a Metal library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=710"
  },
  {
    "text": "To create from the URL, call the newDynamicLibraryWithURL method ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=713"
  },
  {
    "text": "and provide the path to the stored dynamic library.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=718"
  },
  {
    "text": "You can precompile dynamic libraries offline ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=723"
  },
  {
    "text": "using the metal compiler tool chain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=725"
  },
  {
    "text": "When loading precompiled dynamic libraries at runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=728"
  },
  {
    "text": "compilation is completely avoided. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=731"
  },
  {
    "text": "To specify dylibs in the linking phase: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=735"
  },
  {
    "text": "pass an array of Metal Dynamic Library Objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=738"
  },
  {
    "text": "into the preloadedLibraries parameters on the pipeline descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=741"
  },
  {
    "text": "There is also the option to provide this array of dynamic libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=746"
  },
  {
    "text": "via Metal Compile Options when compiling other shader libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=750"
  },
  {
    "text": "Moving large parts of utility code into dynamic libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=755"
  },
  {
    "text": "greatly shortens runtime compilation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=759"
  },
  {
    "text": "And finally, compiler options tuning is really important for compute cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=762"
  },
  {
    "text": "like path tracing in the final production quality renders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=768"
  },
  {
    "text": "and there is one additional Metal feature to get the most performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=772"
  },
  {
    "text": "out of your final rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=776"
  },
  {
    "text": "Metal compiler options and occupancy hints, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=778"
  },
  {
    "text": "enable you to tune the performance of any of these compute kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=781"
  },
  {
    "text": "specifically when working with dynamic linking.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=786"
  },
  {
    "text": "Every GPU workload has a performance sweet spot ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=790"
  },
  {
    "text": "that needs analysis and evaluation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=793"
  },
  {
    "text": "There is a Metal API to target desired GPU occupancy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=797"
  },
  {
    "text": "that is also available for dynamic libraries now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=801"
  },
  {
    "text": "This can unlock performance for an existing workload ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=806"
  },
  {
    "text": "without changing original code or algorithm. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=809"
  },
  {
    "text": "It's worth noting that any tuning needs to be performed per-device ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=813"
  },
  {
    "text": "as performance characteristics can vary depending on the GPU architecture.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=819"
  },
  {
    "text": "The Metal compute pipeline descriptor property allows you ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=825"
  },
  {
    "text": "to express the desired occupancy level ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=828"
  },
  {
    "text": "by specifying the Max-Total-Threads-Per-Threadgroup value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=831"
  },
  {
    "text": "The higher the value, the higher occupancy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=836"
  },
  {
    "text": "you hint the compiler to aim for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=838"
  },
  {
    "text": "Now, using this new Metal-Compile-Options property for dynamic libraries, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=842"
  },
  {
    "text": "you can match the pipeline state object desired occupancy level. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=847"
  },
  {
    "text": "Max-Total-Threads-Per-Threadgroup is available for MetalCompileOptions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=853"
  },
  {
    "text": "in iOS 16.4 and macOS 13.3.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=857"
  },
  {
    "text": "Now you can simply match the Pipeline State Object desired occupancy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=864"
  },
  {
    "text": "while tuning Metal dynamic libraries for the optimal performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=868"
  },
  {
    "text": "This graph of the Blender Cycles shading ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=873"
  },
  {
    "text": "and intersection compute kernels performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=875"
  },
  {
    "text": "shows the impact of changing Max-Total-Threads-Per-Threadgroup. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=878"
  },
  {
    "text": "That was the only variable changed for the pipeline state object and the dylibs.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=882"
  },
  {
    "text": "In this case, there is a sweet spot where kernels perform at their best. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=888"
  },
  {
    "text": "Each workload and device is unique ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=893"
  },
  {
    "text": "and the optimal value of Max-Total-Threads-Per-Threadgroup differs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=896"
  },
  {
    "text": "depending on the nature of the kernel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=900"
  },
  {
    "text": "The optimal value is not always necessarily the maximum number of threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=903"
  },
  {
    "text": "per threadgroup a GPU supports. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=907"
  },
  {
    "text": "Experiment with your kernels to find the optimal value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=910"
  },
  {
    "text": "you want to use and bake in the code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=913"
  },
  {
    "text": "Here is a Blender Cycles shading kernel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=916"
  },
  {
    "text": "The compiler statistics demonstrate that the kernel is very complex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=919"
  },
  {
    "text": "There are several parameters that affect the actual runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=924"
  },
  {
    "text": "The amount of spill, the number of registers used, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=928"
  },
  {
    "text": "and other operations like memory loads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=931"
  },
  {
    "text": "By tuning the Max-Total-Threads-Per-Threadgroup, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=934"
  },
  {
    "text": "you can change target occupancy and find that performance sweet spot.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=938"
  },
  {
    "text": "After finding the sweet spot, the spill increases a little, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=944"
  },
  {
    "text": "but increased overall occupancy has led to significantly better kernel performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=948"
  },
  {
    "text": "The Cycles path tracer within Blender 3D 3.5 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=955"
  },
  {
    "text": "is now well-optimized for Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=959"
  },
  {
    "text": "and it uses all the best practices I covered today.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=964"
  },
  {
    "text": "Remember to maximize shader performance of large and complex shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=970"
  },
  {
    "text": "using function specialization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=975"
  },
  {
    "text": "use asynchronous compilation to keep the application responsive ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=978"
  },
  {
    "text": "while generating optimized shaders in the background, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=982"
  },
  {
    "text": "enable dynamic linking for faster compilation at runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=986"
  },
  {
    "text": "and tune your compute kernels with new Metal compiler options ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=990"
  },
  {
    "text": "to get the optimal performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=994"
  },
  {
    "text": "Be sure to check out previous sessions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=998"
  },
  {
    "text": "where you can learn how to scale compute workloads for Apple GPUs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=1000"
  },
  {
    "text": "and discover more compilation workflows in Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=1004"
  },
  {
    "text": "Thank you for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=1008"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10127/?time=1010"
  }
]