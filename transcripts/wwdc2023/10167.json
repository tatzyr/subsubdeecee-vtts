[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=0"
  },
  {
    "text": "Becca: Hi, I'm Becca from the Swift team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=10"
  },
  {
    "text": "Today we'll be talking about Swift macros, an exciting new feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=13"
  },
  {
    "text": "that lets you customize the Swift language for your needs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=16"
  },
  {
    "text": "We'll start by talking about what macros are for.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=20"
  },
  {
    "text": "Then, we'll talk about some of the principles we kept in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=24"
  },
  {
    "text": "when we designed Swift macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=26"
  },
  {
    "text": "And then we'll cover how Swift macros work ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=29"
  },
  {
    "text": "and the specific ways they can interact with the other code in your project.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=32"
  },
  {
    "text": "After that, we'll talk about how to implement macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=37"
  },
  {
    "text": "and finish by discussing how to make sure your macros work correctly.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=41"
  },
  {
    "text": "So let's get started by talking about why Swift supports macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=46"
  },
  {
    "text": "Swift loves to let users write expressive code and APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=50"
  },
  {
    "text": "That's why it provides features like ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=54"
  },
  {
    "text": "derived conformances and result builders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=55"
  },
  {
    "text": "which help users to avoid ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=58"
  },
  {
    "text": "writing repetitive boilerplate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=60"
  },
  {
    "text": "These features all work ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=62"
  },
  {
    "text": "basically the same way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=64"
  },
  {
    "text": "For example, when you conform to Codable ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=66"
  },
  {
    "text": "without providing implementations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=68"
  },
  {
    "text": "for its members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=69"
  },
  {
    "text": "Swift automatically expands the conformance into a set of members ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=71"
  },
  {
    "text": "that it inserts into the program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=74"
  },
  {
    "text": "I've shown the expansion for the conformance in the gray box. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=77"
  },
  {
    "text": "Creating this code for you lets you use Codable without having to know ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=80"
  },
  {
    "text": "exactly how it works and makes it so you don't have to decide ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=84"
  },
  {
    "text": "if adding Codable support is worth writing a screenful of code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=88"
  },
  {
    "text": "Swift has many features that work in this way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=92"
  },
  {
    "text": "You write some simple syntax, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=94"
  },
  {
    "text": "and the compiler expands it into a more complicated piece of code automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=96"
  },
  {
    "text": "But what if the existing features can't do what you want? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=101"
  },
  {
    "text": "Well, you could add a feature to the Swift compiler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=104"
  },
  {
    "text": "since it's open source. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=107"
  },
  {
    "text": "But that literally involves me, personally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=109"
  },
  {
    "text": "getting on a video conference and discussing your feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=111"
  },
  {
    "text": "with other Swift project leaders, so it's not exactly a process that scales. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=114"
  },
  {
    "text": "That's why we're introducing macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=119"
  },
  {
    "text": "They let you add your own language features to Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=122"
  },
  {
    "text": "eliminating tedium and boilerplate, in a way you can distribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=124"
  },
  {
    "text": "in a Swift package without modifying the compiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=128"
  },
  {
    "text": "Some of you haven't used macros in other languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=131"
  },
  {
    "text": "But if you have, you may have mixed feelings about them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=134"
  },
  {
    "text": "That's partly because a lot of Swift developers are familiar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=137"
  },
  {
    "text": "with Objective-C or other languages that use the C preprocessor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=139"
  },
  {
    "text": "and they know about the limitations and pitfalls of C macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=143"
  },
  {
    "text": "But Swift macros are very different in ways that avoid many of those issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=147"
  },
  {
    "text": "We designed them with four goals in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=152"
  },
  {
    "text": "The first goal is that it should be pretty obvious when you're using a macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=154"
  },
  {
    "text": "There are two kinds of macros: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=158"
  },
  {
    "text": "Freestanding macros stand in place of something else in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=160"
  },
  {
    "text": "They always start with a pound (#) sign. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=164"
  },
  {
    "text": "And attached macros are used as attributes on declarations in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=167"
  },
  {
    "text": "They always start with an at (@) sign. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=171"
  },
  {
    "text": "Swift already uses the pound (#) and at (@) signs to indicate special compiler behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=174"
  },
  {
    "text": "Macros just make that extensible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=178"
  },
  {
    "text": "And if you don't see #’s or @’s, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=181"
  },
  {
    "text": "you can be confident that there aren't any macros involved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=183"
  },
  {
    "text": "The second goal is that both the code passed into a macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=186"
  },
  {
    "text": "and the code sent back out of it should be complete and checked for mistakes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=190"
  },
  {
    "text": "You can't pass \"1 +” to a macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=194"
  },
  {
    "text": "because arguments have to be complete expressions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=197"
  },
  {
    "text": "Nor can you pass an argument with the wrong type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=200"
  },
  {
    "text": "because macro arguments and results are type-checked, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=203"
  },
  {
    "text": "just like function arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=205"
  },
  {
    "text": "And a macro's implementation can validate its inputs and emit ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=208"
  },
  {
    "text": "compiler warnings or errors if something's wrong, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=211"
  },
  {
    "text": "so it's easier to be certain that you're using a macro correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=213"
  },
  {
    "text": "The third goal is that macro expansions should be incorporated ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=217"
  },
  {
    "text": "into the program in predictable, additive ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=220"
  },
  {
    "text": "A macro can only add to the visible code in your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=224"
  },
  {
    "text": "It can't remove it or change it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=227"
  },
  {
    "text": "So even if you have no idea what \"someUnknownMacro\" does, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=229"
  },
  {
    "text": "you can still be sure that it doesn't delete the call ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=232"
  },
  {
    "text": "to \"finishDoingThingy\" or move it into a new function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=235"
  },
  {
    "text": "That makes it a lot easier to read code that uses macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=238"
  },
  {
    "text": "And the final goal is that macros should not be impenetrable magic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=241"
  },
  {
    "text": "Macros just add more code to your program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=246"
  },
  {
    "text": "and that's something you can see right in Xcode.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=248"
  },
  {
    "text": "You can right-click on a macro's use site and ask to see what it expands into. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=252"
  },
  {
    "text": "You can set breakpoints in the expansion or step into it with the debugger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=256"
  },
  {
    "text": "When the code inside a macro expansion doesn't compile, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=260"
  },
  {
    "text": "you'll see both where the error is in the expansion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=263"
  },
  {
    "text": "and where that expansion goes in your source code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=265"
  },
  {
    "text": "And all of these tools work even if the macro is provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=268"
  },
  {
    "text": "by a closed-source library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=270"
  },
  {
    "text": "Macro authors can even write unit tests for their macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=272"
  },
  {
    "text": "to make sure they work as expected; something we highly encourage they do.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=275"
  },
  {
    "text": "We think these goals make Swift macros easy for developers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=280"
  },
  {
    "text": "to understand and maintain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=283"
  },
  {
    "text": "So now that we understand what Swift macros are trying to achieve, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=285"
  },
  {
    "text": "let's talk about how they do it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=288"
  },
  {
    "text": "Before we get lost in the details, let's just get the basic concept down. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=291"
  },
  {
    "text": "When Swift sees you call a macro in your code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=295"
  },
  {
    "text": "like the \"stringify\" macro from the Xcode macro package template, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=297"
  },
  {
    "text": "it extracts that use from the code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=300"
  },
  {
    "text": "and sends it to a special compiler plug-in ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=303"
  },
  {
    "text": "that contains the implementation for that macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=306"
  },
  {
    "text": "The plug-in runs as a separate process in a secure sandbox, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=308"
  },
  {
    "text": "and it contains custom Swift code written by the macro's author. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=312"
  },
  {
    "text": "It processes the macro use and returns an \"expansion,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=316"
  },
  {
    "text": "a new fragment of code created by the macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=319"
  },
  {
    "text": "The Swift compiler then adds that expansion to your program ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=323"
  },
  {
    "text": "and compiles your code and the expansion together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=326"
  },
  {
    "text": "So when you run the program, it works just as though you wrote ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=329"
  },
  {
    "text": "the expansion yourself instead of calling the macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=332"
  },
  {
    "text": "Now, there's an important point I glossed over here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=336"
  },
  {
    "text": "How did Swift know that the \"stringify\" macro exists? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=339"
  },
  {
    "text": "And the answer is, it comes from a macro declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=343"
  },
  {
    "text": "A macro declaration provides the API for a macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=347"
  },
  {
    "text": "You can write the declaration right in your own module, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=350"
  },
  {
    "text": "or you can import it from a library or framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=353"
  },
  {
    "text": "It specifies the macro's name and signature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=356"
  },
  {
    "text": "the number of parameters it takes, their labels and types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=359"
  },
  {
    "text": "and the type of the result if the macro has one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=362"
  },
  {
    "text": "just like a function declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=365"
  },
  {
    "text": "And it also has one or more attributes that specify the macro's roles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=367"
  },
  {
    "text": "It's impossible to write a macro without thinking about what its roles are. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=371"
  },
  {
    "text": "So let's talk about what a role is and how you can use different roles ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=376"
  },
  {
    "text": "to write different kinds of macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=380"
  },
  {
    "text": "A role is a set of rules for a macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=383"
  },
  {
    "text": "It governs where and how you apply the macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=385"
  },
  {
    "text": "what kind of code it expands into, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=388"
  },
  {
    "text": "and where that expansion is inserted into your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=391"
  },
  {
    "text": "Ultimately, it's macro roles that are responsible ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=394"
  },
  {
    "text": "for achieving our goal of inserting expansions in predictable, additive ways.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=397"
  },
  {
    "text": "There are two roles that create freestanding macros: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=403"
  },
  {
    "text": "Expression and declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=406"
  },
  {
    "text": "And there are five roles that create attached macros: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=408"
  },
  {
    "text": "Peer, accessor, member attribute, member, and conformance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=411"
  },
  {
    "text": "Let's take a look at these roles and when you might use them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=416"
  },
  {
    "text": "We'll start with the \"freestanding expression\" role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=419"
  },
  {
    "text": "If the term \"expression\" doesn't ring a bell, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=422"
  },
  {
    "text": "an expression is what we call a unit of code that executes and produces a result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=425"
  },
  {
    "text": "In this \"let\" statement, the arithmetic after the equal sign is an expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=430"
  },
  {
    "text": "But expressions have a recursive structure-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=435"
  },
  {
    "text": "they're often made up of smaller expressions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=437"
  },
  {
    "text": "So \"x + width\" alone is also an expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=440"
  },
  {
    "text": "And so is just the word \"width.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=443"
  },
  {
    "text": "A \"freestanding expression\" macro then is a macro that expands into an expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=446"
  },
  {
    "text": "How would you use one? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=452"
  },
  {
    "text": "Imagine you need to force-unwrap an optional. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=454"
  },
  {
    "text": "Swift provides a force-unwrap operator, but some teams feel ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=456"
  },
  {
    "text": "that it's a little too easy to throw in a force-unwrap ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=460"
  },
  {
    "text": "without thinking about its safety, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=462"
  },
  {
    "text": "so their style guides tell developers to write something more complex ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=464"
  },
  {
    "text": "that indicates why the value should never be nil. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=468"
  },
  {
    "text": "But most of these alternatives, such as using a \"guard let\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=470"
  },
  {
    "text": "and then calling \"preconditionFailure\" in the \"else\" branch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=473"
  },
  {
    "text": "are a little too much ceremony. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=476"
  },
  {
    "text": "Let's design a macro that strikes a better balance between these extremes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=478"
  },
  {
    "text": "We want this macro to compute and return a value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=483"
  },
  {
    "text": "so we make it a \"freestanding(expression)” macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=485"
  },
  {
    "text": "We give it the name \"unwrap\" and a generic type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=488"
  },
  {
    "text": "where the value passed in is optional, but the value returned is non-optional. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=491"
  },
  {
    "text": "And we also pass in a string that's part of the message printed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=495"
  },
  {
    "text": "if the unwrap fails. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=498"
  },
  {
    "text": "So we end up with a macro that we call just like a function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=500"
  },
  {
    "text": "but it expands into an expression that contains a \"guard let\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=503"
  },
  {
    "text": "wrapped in a closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=506"
  },
  {
    "text": "The error message even includes the variable name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=508"
  },
  {
    "text": "something that would be impossible with a normal function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=510"
  },
  {
    "text": "Now that we've seen the freestanding expression role, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=514"
  },
  {
    "text": "let's look at the freestanding declaration role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=516"
  },
  {
    "text": "It expands into one or more declarations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=519"
  },
  {
    "text": "like functions, variables, or types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=522"
  },
  {
    "text": "What could you use it for? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=524"
  },
  {
    "text": "Imagine you're writing some kind of statistical analysis ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=526"
  },
  {
    "text": "that needs a 2D array type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=529"
  },
  {
    "text": "You want all of the rows in the array to have the same number of columns, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=531"
  },
  {
    "text": "so you don't want an array-of-arrays.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=535"
  },
  {
    "text": "Instead, you want to store the elements in a flat, one-dimensional array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=538"
  },
  {
    "text": "and then compute a one-dimensional index ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=542"
  },
  {
    "text": "from the two-dimensional indices passed in by the developer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=545"
  },
  {
    "text": "To do that, you might write a type like this one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=549"
  },
  {
    "text": "The \"makeIndex\" function takes the two integers needed for a 2D index, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=552"
  },
  {
    "text": "and then does a little arithmetic to turn them into a 1D index. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=556"
  },
  {
    "text": "But then you find that, in another part of the program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=560"
  },
  {
    "text": "you need a three-dimensional array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=563"
  },
  {
    "text": "It's almost exactly the same as the 2D array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=565"
  },
  {
    "text": "There's just a few more indices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=568"
  },
  {
    "text": "and the calculation is a little more complex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=569"
  },
  {
    "text": "And then you need a 4D array and then a 5D array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=572"
  },
  {
    "text": "and soon you're swimming in array types that are almost identical, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=575"
  },
  {
    "text": "but not quite close enough to use generics, or protocol extensions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=579"
  },
  {
    "text": "or subclasses, or any of the other features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=582"
  },
  {
    "text": "Swift offers for this kind of thing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=584"
  },
  {
    "text": "Fortunately, each of these structs is a declaration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=587"
  },
  {
    "text": "so we can use a declaration macro to create them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=590"
  },
  {
    "text": "So let's declare a freestanding declaration macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=593"
  },
  {
    "text": "with the name \"makeArrayND,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=596"
  },
  {
    "text": "since it's going to create an N-dimensional array type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=598"
  },
  {
    "text": "We'll pass the number of dimensions as an Int parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=602"
  },
  {
    "text": "and we won't declare a result type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=606"
  },
  {
    "text": "because this macro will add a declaration to our program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=607"
  },
  {
    "text": "not compute a result that's used by other code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=611"
  },
  {
    "text": "Now we can call the macro four times with two, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=614"
  },
  {
    "text": "three, four, and five dimensions, and each of those calls will expand ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=616"
  },
  {
    "text": "into an entire multi-dimensional array type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=621"
  },
  {
    "text": "with the right number of arguments and the right calculation for that size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=624"
  },
  {
    "text": "So far, we've only looked at freestanding macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=628"
  },
  {
    "text": "Now let's move on to roles for attached macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=631"
  },
  {
    "text": "Attached macros are, as the name suggests, attached to a specific declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=634"
  },
  {
    "text": "That means they have more information to work from. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=640"
  },
  {
    "text": "Freestanding macros are only given the arguments they're passed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=643"
  },
  {
    "text": "but attached macros can also access the declaration they're attached to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=646"
  },
  {
    "text": "They often inspect that declaration and pull out names, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=650"
  },
  {
    "text": "types, and other information from inside them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=653"
  },
  {
    "text": "We'll start with the attached peer role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=656"
  },
  {
    "text": "A peer macro can be attached to any declaration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=658"
  },
  {
    "text": "not only variables, and functions, and types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=661"
  },
  {
    "text": "but even things like import and operator declarations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=664"
  },
  {
    "text": "and can insert new declarations alongside it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=667"
  },
  {
    "text": "So if you use it on a method or property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=670"
  },
  {
    "text": "you'll end up creating members of the type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=672"
  },
  {
    "text": "but if you use it on a top-level function or type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=674"
  },
  {
    "text": "you'll end up creating new top-level declarations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=677"
  },
  {
    "text": "That makes them incredibly flexible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=680"
  },
  {
    "text": "Here's one way you might use them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=682"
  },
  {
    "text": "Suppose you're writing a library that uses Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=684"
  },
  {
    "text": "but you know that some of your clients are still using older concurrency techniques, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=687"
  },
  {
    "text": "so you want to give them versions of your APIs that use completion handlers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=691"
  },
  {
    "text": "It's not difficult to write these methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=695"
  },
  {
    "text": "You just remove the \"async\" keyword, add a completion handler parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=697"
  },
  {
    "text": "move the result type into the parameter list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=701"
  },
  {
    "text": "and call the async version in a detached task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=703"
  },
  {
    "text": "But you're doing this a lot, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=706"
  },
  {
    "text": "and you don't want to have to write it by hand. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=708"
  },
  {
    "text": "That's a great job for an attached peer macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=710"
  },
  {
    "text": "We'll declare one called \"AddCompletionHandler\" and give it ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=713"
  },
  {
    "text": "a parameter for the completion handler's argument label, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=716"
  },
  {
    "text": "and then attach that macro to the async version of the method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=719"
  },
  {
    "text": "The macro will create a completion handler-based signature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=723"
  },
  {
    "text": "equivalent to the original, write the method body, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=726"
  },
  {
    "text": "and even attach a documentation comment ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=729"
  },
  {
    "text": "with extra text for the completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=731"
  },
  {
    "text": "Pretty cool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=733"
  },
  {
    "text": "Next, let's look at the attached accessor role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=735"
  },
  {
    "text": "These can be attached to variables and subscripts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=738"
  },
  {
    "text": "and they can install accessors into them, like \"get,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=740"
  },
  {
    "text": "\"set,\" \"willSet,\" or \"didSet\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=743"
  },
  {
    "text": "So how might that be useful? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=746"
  },
  {
    "text": "Suppose you have a bunch of types that basically wrap around dictionaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=748"
  },
  {
    "text": "and let you access their contents with properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=752"
  },
  {
    "text": "So for instance, this \"Person\" struct lets you access ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=754"
  },
  {
    "text": "the \"name,\" \"height,\" and \"birth_date\" fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=757"
  },
  {
    "text": "but if there's other information in the dictionary besides those three fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=760"
  },
  {
    "text": "it'll just be preserved and ignored by your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=764"
  },
  {
    "text": "These three properties need computed getters and setters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=767"
  },
  {
    "text": "but writing them by hand is tedious, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=770"
  },
  {
    "text": "and we can't use property wrappers because property wrappers can't access ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=773"
  },
  {
    "text": "other stored properties on the type they're used with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=776"
  },
  {
    "text": "So let's write an attached accessor macro that can help with this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=779"
  },
  {
    "text": "We'll call it \"DictionaryStorage.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=783"
  },
  {
    "text": "We'll give it a \"key\" parameter because the dictionary spells \"birth_date\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=785"
  },
  {
    "text": "with an underscore, but you can also just leave the key out, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=788"
  },
  {
    "text": "and it'll default to nil, which will make the macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=791"
  },
  {
    "text": "use the property's name as the key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=794"
  },
  {
    "text": "So now, instead of writing that big accessor block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=796"
  },
  {
    "text": "you can just put “@DictionaryStorage\" before each property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=799"
  },
  {
    "text": "and the macro will generate the accessors for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=802"
  },
  {
    "text": "That's a nice improvement, but there's still some boilerplate here: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=806"
  },
  {
    "text": "The identical \"DictionaryStorage\" attributes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=809"
  },
  {
    "text": "They're less boilerplate, but they're still boilerplate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=812"
  },
  {
    "text": "Some built-in attributes let you deal with this kind of situation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=815"
  },
  {
    "text": "by applying them to the entire type or extension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=818"
  },
  {
    "text": "The \"attached member attribute\" role can make your macros behave like that too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=822"
  },
  {
    "text": "The macro gets attached to a type or extension, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=826"
  },
  {
    "text": "and it can add attributes to the members of whatever it's attached to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=829"
  },
  {
    "text": "Let's see how it's done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=833"
  },
  {
    "text": "We're going to do something a little different here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=835"
  },
  {
    "text": "Rather than declaring a new macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=838"
  },
  {
    "text": "we'll add another role attribute to the \"DictionaryStorage\" macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=840"
  },
  {
    "text": "alongside the \"attached accessor\" role it already has. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=843"
  },
  {
    "text": "This is a really useful technique for creating macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=847"
  },
  {
    "text": "You're allowed to compose any combination of roles except the two freestanding roles ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=850"
  },
  {
    "text": "because there are places where Swift wouldn't know which one to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=854"
  },
  {
    "text": "Swift will expand all of the roles that make sense wherever you applied them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=859"
  },
  {
    "text": "but at least one of the roles has to work there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=863"
  },
  {
    "text": "So if you attach \"DictionaryStorage\" to a type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=867"
  },
  {
    "text": "Swift will expand the \"member attribute\" role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=869"
  },
  {
    "text": "If you attach it to a property, Swift will expand the \"accessor\" role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=872"
  },
  {
    "text": "But if you attach it to a function, you'll get a compilation error ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=876"
  },
  {
    "text": "because \"DictionaryStorage\" doesn't have any roles ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=879"
  },
  {
    "text": "that could attach to a function.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=881"
  },
  {
    "text": "With this second role added to \"DictionaryStorage,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=884"
  },
  {
    "text": "instead of attaching it separately to every property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=887"
  },
  {
    "text": "you can just attach it to the whole type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=889"
  },
  {
    "text": "The macro will have logic to skip certain members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=891"
  },
  {
    "text": "like the initializer, the \"dictionary\" property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=894"
  },
  {
    "text": "and properties like \"birth_date\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=896"
  },
  {
    "text": "that already have a \"DictionaryStorage\" attribute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=898"
  },
  {
    "text": "But it'll add a \"DictionaryStorage\" attribute to any other stored property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=901"
  },
  {
    "text": "and then those attributes will expand into the accessors we already saw. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=905"
  },
  {
    "text": "That's a nice improvement, but there's still more boilerplate we could eliminate: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=910"
  },
  {
    "text": "The initializer and stored property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=914"
  },
  {
    "text": "These are required by the \"DictionaryRepresentable\" protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=916"
  },
  {
    "text": "and the property is used by the accessors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=919"
  },
  {
    "text": "but they're exactly the same in any type that uses DictionaryStorage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=922"
  },
  {
    "text": "Let's make the DictionaryStorage macro add them automatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=926"
  },
  {
    "text": "so we don't have to write them by hand. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=929"
  },
  {
    "text": "We can do that using the \"attached member\" role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=930"
  },
  {
    "text": "Like member attribute macros, you can apply these macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=933"
  },
  {
    "text": "to types and extensions, but instead of adding attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=936"
  },
  {
    "text": "to existing members, they add totally new members. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=939"
  },
  {
    "text": "So you can add methods, properties, initializers, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=942"
  },
  {
    "text": "You can even add stored properties to classes and structs, or cases to enums. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=946"
  },
  {
    "text": "Once again, we'll add a new \"attached member\" role ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=951"
  },
  {
    "text": "to the DictionaryStorage macro, composing it with the other two. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=954"
  },
  {
    "text": "This new role will add an initializer and a property called \"dictionary.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=957"
  },
  {
    "text": "You might be wondering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=963"
  },
  {
    "text": "when two different macros get applied to the same code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=964"
  },
  {
    "text": "which one gets expanded first? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=967"
  },
  {
    "text": "Then answer is, it doesn't really matter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=970"
  },
  {
    "text": "Each one will see the original version of the declaration ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=973"
  },
  {
    "text": "without expansions provided by the others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=976"
  },
  {
    "text": "So you don't need to worry about ordering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=978"
  },
  {
    "text": "You'll see the same thing no matter when the compiler expands your macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=981"
  },
  {
    "text": "With the attached member role added, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=985"
  },
  {
    "text": "we don't even have to write those two members anymore. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=987"
  },
  {
    "text": "Simply using DictionaryStorage on the type will automatically add them for us. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=990"
  },
  {
    "text": "And then the other role will add the DictionaryStorage attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=995"
  },
  {
    "text": "on the properties, and those attributes will expand into accessors, and so on.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=998"
  },
  {
    "text": "But there's still one last bit of boilerplate to eliminate: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1004"
  },
  {
    "text": "The conformance to the DictionaryRepresentable protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1007"
  },
  {
    "text": "The \"attached conformance\" role is perfect for this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1011"
  },
  {
    "text": "It can add a conformance to a type or extension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1015"
  },
  {
    "text": "We'll add one last \"attached conformance\" role ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1019"
  },
  {
    "text": "to the \"DictionaryStorage\" macro, composing it with the other three. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1021"
  },
  {
    "text": "This new role will add a conformance to \"DictionaryRepresentation.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1025"
  },
  {
    "text": "So now we don't have to write the conformance manually. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1028"
  },
  {
    "text": "The DictionaryStorage attribute we already added for the accessors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1032"
  },
  {
    "text": "and generated members will now automatically add the conformance too, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1035"
  },
  {
    "text": "along with all the other stuff it was already doing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1039"
  },
  {
    "text": "It's been a long time since we saw our starting point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1042"
  },
  {
    "text": "so just to remind you, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1044"
  },
  {
    "text": "we took a big, unruly type full of repetitive code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1046"
  },
  {
    "text": "and moved most of that code into several roles ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1050"
  },
  {
    "text": "of a super-powerful macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1052"
  },
  {
    "text": "so that what's left concisely specifies only what's special ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1054"
  },
  {
    "text": "about this particular type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1058"
  },
  {
    "text": "Imagine if you had 10 or 20 types that could use DictionaryStorage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1060"
  },
  {
    "text": "How much easier would it be to work with all of them? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1064"
  },
  {
    "text": "We've spent a bunch of time now talking about declarations and roles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1067"
  },
  {
    "text": "but so far, the code they expand into has just seemed to magically appear. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1071"
  },
  {
    "text": "Let's fill in that gap now and talk about how you implement your macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1076"
  },
  {
    "text": "When I've showed you macro declarations so far, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1080"
  },
  {
    "text": "I've left out something very important: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1083"
  },
  {
    "text": "the implementation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1085"
  },
  {
    "text": "It's after an equal sign, and it's always another macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1087"
  },
  {
    "text": "Sometimes it's another macro you've written, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1091"
  },
  {
    "text": "just with the parameters rearranged ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1093"
  },
  {
    "text": "or with extra parameters specified as literals.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1095"
  },
  {
    "text": "But usually, you'll use an external macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1099"
  },
  {
    "text": "An external macro is one that's implemented by a compiler plug-in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1102"
  },
  {
    "text": "You might remember that I talked about compiler plug-ins earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1106"
  },
  {
    "text": "I said that when the compiler sees a macro being used, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1109"
  },
  {
    "text": "it starts a plug-in in a separate process and asks it to expand the macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1112"
  },
  {
    "text": "\"#externalMacro\" is what defines that relationship. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1117"
  },
  {
    "text": "It specifies the plug-in the compiler should launch ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1121"
  },
  {
    "text": "and the name of a type inside that plug-in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1124"
  },
  {
    "text": "So when Swift expands this macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1127"
  },
  {
    "text": "it will launch a plug-in called \"MyLibMacros\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1129"
  },
  {
    "text": "and ask a type called \"StringifyMacro\" to expand it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1131"
  },
  {
    "text": "So the macro declaration goes in your normal library alongside your other APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1135"
  },
  {
    "text": "but the macro implementation goes in a separate compiler plug-in module. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1140"
  },
  {
    "text": "And \"#externalMacro\" creates the link between the declaration ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1144"
  },
  {
    "text": "and the type implementing it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1148"
  },
  {
    "text": "What does a macro implementation look like? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1150"
  },
  {
    "text": "Well, let's take a look at how DictionaryStorage might be implemented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1153"
  },
  {
    "text": "If you recall, our \"DictionaryStorage\" macro had an \"attached member\" role ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1157"
  },
  {
    "text": "that added a stored property and an initializer to the type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1161"
  },
  {
    "text": "Here's a simple implementation of that role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1165"
  },
  {
    "text": "We'll walk through it one step at a time and learn how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1167"
  },
  {
    "text": "Right at the top, we start by importing a library called SwiftSyntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1172"
  },
  {
    "text": "SwiftSyntax is a package maintained by the Swift project that helps you parse, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1177"
  },
  {
    "text": "inspect, manipulate, and generate Swift source code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1181"
  },
  {
    "text": "Swift contributors keep SwiftSyntax up to date as the language evolves, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1185"
  },
  {
    "text": "so it supports every feature the Swift compiler does. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1189"
  },
  {
    "text": "SwiftSyntax represents source code as a special tree structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1192"
  },
  {
    "text": "For example, the \"Person\" struct in this code sample ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1196"
  },
  {
    "text": "is represented as an instance of a type called \"StructDeclSyntax.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1199"
  },
  {
    "text": "But that instance has properties, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1203"
  },
  {
    "text": "and each of those properties represents some portion ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1206"
  },
  {
    "text": "of the struct declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1208"
  },
  {
    "text": "The list of attributes is in the \"attributes\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1211"
  },
  {
    "text": "The actual keyword \"struct\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1214"
  },
  {
    "text": "is in the \"structKeyword\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1215"
  },
  {
    "text": "The struct's name is in the \"identifier\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1217"
  },
  {
    "text": "And the body with the curly braces and the struct's members ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1220"
  },
  {
    "text": "is in the \"memberBlock\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1223"
  },
  {
    "text": "There are also properties like \"modifiers\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1226"
  },
  {
    "text": "that represent things that some struct declarations have. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1228"
  },
  {
    "text": "But this one doesn't. These are nil.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1230"
  },
  {
    "text": "Some of the syntax nodes in these properties are called \"tokens.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1233"
  },
  {
    "text": "These represent a specific piece of text in the source file, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1237"
  },
  {
    "text": "like a name, or a keyword, or a bit of punctuation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1240"
  },
  {
    "text": "and they just contain that text ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1244"
  },
  {
    "text": "and any surrounding trivia, like spaces and comments.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1245"
  },
  {
    "text": "If you drill deep enough into the syntax tree, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1250"
  },
  {
    "text": "you'll find a token node that covers every byte of the source file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1252"
  },
  {
    "text": "But some of those nodes, like the \"AttributeListSyntax\" node ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1256"
  },
  {
    "text": "in the \"attributes\" property and the \"MemberDeclBlockSyntax\" node ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1259"
  },
  {
    "text": "in the \"memberBlock\" property, are not tokens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1262"
  },
  {
    "text": "These have child nodes in their own properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1266"
  },
  {
    "text": "For example, if we look inside the \"memberBlock\" property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1269"
  },
  {
    "text": "we'll find a token for the opening curly brace, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1272"
  },
  {
    "text": "a \"MemberDeclListSyntax\" node for the list of members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1275"
  },
  {
    "text": "and a token for the closing curly brace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1278"
  },
  {
    "text": "And if you keep exploring the contents of that \"MemberDeclListSyntax\" node, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1280"
  },
  {
    "text": "you'll eventually find a node for each of the properties, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1284"
  },
  {
    "text": "Working with SwiftSyntax is a huge topic all its own, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1288"
  },
  {
    "text": "so rather than make this video twice as long, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1291"
  },
  {
    "text": "I'm going to refer you to two other resources. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1294"
  },
  {
    "text": "One is the companion \"Write Swift Macros\" session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1296"
  },
  {
    "text": "which includes practical tips for figuring out how a particular piece ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1300"
  },
  {
    "text": "of source code is represented as a syntax tree. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1303"
  },
  {
    "text": "The other is the SwiftSyntax package's documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1306"
  },
  {
    "text": "You can find it online, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1310"
  },
  {
    "text": "or if you use Xcode's Build Documentation command ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1312"
  },
  {
    "text": "in your macro package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1314"
  },
  {
    "text": "SwiftSyntax docs will appear in the Developer Documentation window. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1315"
  },
  {
    "text": "In addition to the main SwiftSyntax library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1319"
  },
  {
    "text": "we also import two other modules. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1322"
  },
  {
    "text": "One is \"SwiftSyntaxMacros\", which provides protocols and types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1324"
  },
  {
    "text": "necessary for writing macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1328"
  },
  {
    "text": "The other is called \"SwiftSyntaxBuilder\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1330"
  },
  {
    "text": "This library provides convenience APIs for constructing syntax trees ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1333"
  },
  {
    "text": "to represent newly-generated code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1337"
  },
  {
    "text": "You can write a macro without using it, but it's incredibly handy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1339"
  },
  {
    "text": "and we highly recommend you take advantage of it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1343"
  },
  {
    "text": "Now that we've imported these libraries, we'll start actually writing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1345"
  },
  {
    "text": "the \"DictionaryStorageMacro\" type that our plug-in is supposed to provide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1348"
  },
  {
    "text": "Notice that it conforms to a protocol called \"MemberMacro.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1352"
  },
  {
    "text": "Each role has a corresponding protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1356"
  },
  {
    "text": "and the implementation has to conform to the protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1359"
  },
  {
    "text": "for each role the macro provides. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1362"
  },
  {
    "text": "The \"DictionaryStorage\" macro has four of these roles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1364"
  },
  {
    "text": "so the \"DictionaryStorageMacro\" type will need to conform ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1367"
  },
  {
    "text": "to the four corresponding protocols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1370"
  },
  {
    "text": "But to keep things simple, we're just worrying ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1372"
  },
  {
    "text": "about the \"MemberMacro\" conformance for now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1375"
  },
  {
    "text": "Moving on to the body of this type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1377"
  },
  {
    "text": "we see a method called \"expansion of, providingMembersOf, in.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1379"
  },
  {
    "text": "This method is required by the MemberMacro protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1384"
  },
  {
    "text": "and it's what the Swift compiler calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1387"
  },
  {
    "text": "to expand the member role when the macro is used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1389"
  },
  {
    "text": "We're not using the arguments yet, but we'll talk about them later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1392"
  },
  {
    "text": "For now, notice that it's a static method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1396"
  },
  {
    "text": "All of the expansion methods are static, so Swift doesn't actually create ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1399"
  },
  {
    "text": "an instance of the DictionaryStorageMacro type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1402"
  },
  {
    "text": "It just uses it as a container for the methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1405"
  },
  {
    "text": "Each of the expansion methods returns SwiftSyntax nodes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1408"
  },
  {
    "text": "that are inserted into the source code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1411"
  },
  {
    "text": "A member macro expands into a list of declarations to add ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1413"
  },
  {
    "text": "as members to the type, so the expansion method ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1416"
  },
  {
    "text": "for a member macro returns an array of \"DeclSyntax\" nodes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1419"
  },
  {
    "text": "If we look inside the body, we see that array being created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1423"
  },
  {
    "text": "It has the initializer and the stored property we want this macro to add. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1427"
  },
  {
    "text": "Now, the \"var dictionary\" bit here looks like it's an ordinary string, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1431"
  },
  {
    "text": "but it's actually not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1435"
  },
  {
    "text": "This string literal is being written where a DeclSyntax is expected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1437"
  },
  {
    "text": "so Swift actually treats it as a fragment of source code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1440"
  },
  {
    "text": "and asks the Swift parser to turn it into a DeclSyntax node. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1443"
  },
  {
    "text": "This is one of those conveniences ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1447"
  },
  {
    "text": "that the SwiftSyntaxBuilder library provides. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1449"
  },
  {
    "text": "It's a good thing we imported it earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1451"
  },
  {
    "text": "So with that and with conformances to the protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1454"
  },
  {
    "text": "for the other three roles, we'll have a working implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1457"
  },
  {
    "text": "of our DictionaryStorage macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1460"
  },
  {
    "text": "But although this macro will now work when you use it correctly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1462"
  },
  {
    "text": "what happens if you use it wrong? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1466"
  },
  {
    "text": "For instance, what if you try to apply it to an enum instead of to a struct? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1468"
  },
  {
    "text": "Well, the \"attached member\" role will try to add a stored \"dictionary\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1473"
  },
  {
    "text": "But an enum can't have stored properties, so Swift will produce an error: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1478"
  },
  {
    "text": "\"Enums must not contain stored properties.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1483"
  },
  {
    "text": "It's great that Swift will stop this code from compiling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1485"
  },
  {
    "text": "but the error message is a little confusing, isn't it? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1488"
  },
  {
    "text": "It's not really clear why the DictionaryStorage macro tried ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1491"
  },
  {
    "text": "to create a stored property or what you should have done differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1493"
  },
  {
    "text": "I said earlier that one of Swift's goals was to allow macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1497"
  },
  {
    "text": "to detect mistakes in their inputs and emit custom errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1501"
  },
  {
    "text": "So let's modify our macro's implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1504"
  },
  {
    "text": "to produce a much clearer error message for this: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1506"
  },
  {
    "text": "“@DictionaryStorage can only be applied to a struct.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1509"
  },
  {
    "text": "That will give developers a better idea of what they did wrong. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1513"
  },
  {
    "text": "The key to doing this will be the parameters ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1516"
  },
  {
    "text": "to the expansion method, which we've ignored so far. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1519"
  },
  {
    "text": "The exact arguments are slightly different for different roles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1522"
  },
  {
    "text": "but for a member macro, there are three. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1525"
  },
  {
    "text": "The first is called \"attribute\", and its type is AttributeSyntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1528"
  },
  {
    "text": "This is the actual DictionaryStorage attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1532"
  },
  {
    "text": "the developer wrote to use the macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1534"
  },
  {
    "text": "The second argument is called \"declaration\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1537"
  },
  {
    "text": "and is a type that conforms to \"DeclGroupSyntax.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1539"
  },
  {
    "text": "DeclGroupSyntax is a protocol that the nodes for structs, enums, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1542"
  },
  {
    "text": "classes, actors, protocols, and extensions all conform to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1547"
  },
  {
    "text": "So this parameter gives us the declaration that the developer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1551"
  },
  {
    "text": "attached the attribute to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1554"
  },
  {
    "text": "And the final parameter is called \"context\" and is of a type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1556"
  },
  {
    "text": "that conforms to \"MacroExpansionContext\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1559"
  },
  {
    "text": "The context object is used when the macro implementation wants ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1562"
  },
  {
    "text": "to communicate with the compiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1565"
  },
  {
    "text": "It can do a few different things, including emitting errors and warnings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1567"
  },
  {
    "text": "We'll use all three of these parameters to emit our error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1572"
  },
  {
    "text": "Let's see how it's done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1575"
  },
  {
    "text": "First, we need to detect the problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1577"
  },
  {
    "text": "We'll do that by checking the type of the \"declaration\" parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1579"
  },
  {
    "text": "Each kind of declaration has a different type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1583"
  },
  {
    "text": "so if it's a struct, its type will be \"StructDeclSyntax\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1586"
  },
  {
    "text": "if it's an enum, it'll be \"EnumDeclSyntax\", and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1590"
  },
  {
    "text": "So we'll write a guard-else that calls the \"declaration\" parameter's \"is\" method ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1594"
  },
  {
    "text": "and passes \"StructDeclSyntax\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1599"
  },
  {
    "text": "If the declaration isn't a struct, we'll end up in the \"else\" block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1601"
  },
  {
    "text": "For now, we'll return an empty array, so the macro doesn't add any code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1605"
  },
  {
    "text": "to the project, but what we really want to do is emit an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1609"
  },
  {
    "text": "Now, the easy way to do it is to just throw an ordinary Swift error, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1614"
  },
  {
    "text": "but that doesn't give you very much control over the output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1618"
  },
  {
    "text": "So instead, I'll show you the more complicated way ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1621"
  },
  {
    "text": "that lets you create more sophisticated errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1623"
  },
  {
    "text": "The first step is to create an instance of a type called \"Diagnostic\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1626"
  },
  {
    "text": "This is a bit of compiler jargon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1631"
  },
  {
    "text": "Just as a doctor looking at an X-ray of your broken leg diagnoses a fracture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1633"
  },
  {
    "text": "a compiler or macro looking at a syntax tree ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1638"
  },
  {
    "text": "of your broken code diagnoses an error or warning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1641"
  },
  {
    "text": "So we call the instance representing the error a “Diagnostic.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1644"
  },
  {
    "text": "A diagnostic contains at least two pieces of information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1648"
  },
  {
    "text": "The first is the syntax node that the error occurred at, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1652"
  },
  {
    "text": "so the compiler knows which line to mark as incorrect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1655"
  },
  {
    "text": "Here, we want to point to the DictionaryStorage attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1658"
  },
  {
    "text": "the user wrote, which, happily, is provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1661"
  },
  {
    "text": "by the \"attribute\" parameter the method was passed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1664"
  },
  {
    "text": "The second is the actual message you want the compiler to produce. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1667"
  },
  {
    "text": "You provide this by creating a custom type and then passing an instance of it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1671"
  },
  {
    "text": "Let's take a quick look at it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1675"
  },
  {
    "text": "The \"MyLibDiagnostic\" type defines all of the diagnostics this module can produce. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1678"
  },
  {
    "text": "We've chosen to use an enum and provide a case for each diagnostic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1684"
  },
  {
    "text": "but you could use another kind of type if you wanted. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1688"
  },
  {
    "text": "This type works sort of like a throwable Swift error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1691"
  },
  {
    "text": "It conforms to the \"DiagnosticMessage\" protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1694"
  },
  {
    "text": "and it has a bunch of properties that provide information about the diagnostic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1696"
  },
  {
    "text": "One of the most important is the \"severity\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1701"
  },
  {
    "text": "It specifies whether the diagnostic is an error or a warning.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1704"
  },
  {
    "text": "Then there's the \"message\" property, which produces the actual error message, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1710"
  },
  {
    "text": "and the \"diagnosticID\" property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1714"
  },
  {
    "text": "You should use the plug-in's module name for the domain ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1717"
  },
  {
    "text": "and some kind of unique string for the ID. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1720"
  },
  {
    "text": "I've chosen to use string raw values for this enum, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1722"
  },
  {
    "text": "but that's just a convenience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1725"
  },
  {
    "text": "So with the message in hand, you can create the diagnostic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1726"
  },
  {
    "text": "Then you tell the context to diagnose it, and you're done.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1731"
  },
  {
    "text": "That's a pretty basic diagnostic, but if you want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1736"
  },
  {
    "text": "you can get a lot fancier with them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1738"
  },
  {
    "text": "For example, you can add Fix-Its to a diagnostic ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1740"
  },
  {
    "text": "that are automatically applied by the Xcode Fix button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1743"
  },
  {
    "text": "You can also add highlights and attach notes pointing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1746"
  },
  {
    "text": "to other locations in the code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1748"
  },
  {
    "text": "So you can really provide a first-class error experience for your developers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1750"
  },
  {
    "text": "But once you've made sure your macro is being applied correctly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1754"
  },
  {
    "text": "you still need to actually create the expansion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1757"
  },
  {
    "text": "SwiftSyntax gives you several different tools to do that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1760"
  },
  {
    "text": "Syntax nodes are immutable, but they have lots of APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1764"
  },
  {
    "text": "that either create new nodes or return modified versions of existing nodes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1767"
  },
  {
    "text": "The SwiftSyntaxBuilder library adds SwiftUI-style syntax builders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1772"
  },
  {
    "text": "where some of the child nodes are specified by a trailing closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1776"
  },
  {
    "text": "For example, the multidimensional array macro can use a syntax builder ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1779"
  },
  {
    "text": "to generate whatever number of parameters is appropriate for the type it's creating. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1783"
  },
  {
    "text": "And the string literal feature we used to make the DictionaryStorage property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1788"
  },
  {
    "text": "and initializer also supports interpolations.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1791"
  },
  {
    "text": "All of these features are useful in different situations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1796"
  },
  {
    "text": "and you'll probably find yourself combining several ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1799"
  },
  {
    "text": "in particularly complicated macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1801"
  },
  {
    "text": "But the string literal feature is especially good ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1804"
  },
  {
    "text": "at producing syntax trees for large amounts of code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1806"
  },
  {
    "text": "and there's a bit to learn about its interpolation features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1809"
  },
  {
    "text": "So let's look at how you might use those to generate some code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1812"
  },
  {
    "text": "Earlier, we talked about the \"unwrap\" macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1816"
  },
  {
    "text": "It takes an optional value and a message string ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1819"
  },
  {
    "text": "and expands into a \"guard let\" wrapped in a closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1821"
  },
  {
    "text": "The general shape of this code is always going to be the same, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1825"
  },
  {
    "text": "but a lot of the contents are customized for the specific use site. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1828"
  },
  {
    "text": "Let's focus in on the \"guard let\" statement and see how ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1832"
  },
  {
    "text": "we could write a function to generate just that statement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1835"
  },
  {
    "text": "To start, we'll just take that exact code sample we just saw ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1838"
  },
  {
    "text": "and put it in a helper method called \"makeGuardStatement\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1842"
  },
  {
    "text": "that returns a Statement Syntax node. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1844"
  },
  {
    "text": "Then we'll slowly add interpolations to replace all the stuff ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1847"
  },
  {
    "text": "that needs to be different depending on where it's used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1850"
  },
  {
    "text": "The first thing we'll do is add the right message string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1853"
  },
  {
    "text": "The message string is an arbitrary expression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1857"
  },
  {
    "text": "so we'll pass it in as an ExprSyntax node and then interpolate it in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1860"
  },
  {
    "text": "An ordinary interpolation like this can add a syntax node to the code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1864"
  },
  {
    "text": "but it can't add a plain String. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1868"
  },
  {
    "text": "That's a safety feature to keep you from inserting invalid code by accident. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1870"
  },
  {
    "text": "The guard-let condition is similar, except that it's just a variable name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1875"
  },
  {
    "text": "so it's a token, not an expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1879"
  },
  {
    "text": "No matter, we add a TokenSyntax parameter and interpolate it in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1881"
  },
  {
    "text": "just as we interpolated the expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1886"
  },
  {
    "text": "There's a trickier case when you add the expression being unwrapped ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1888"
  },
  {
    "text": "to the error message. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1891"
  },
  {
    "text": "One of the features of our macro is that when it fails, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1893"
  },
  {
    "text": "it prints out the code you were trying to unwrap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1895"
  },
  {
    "text": "That means we need to create a string literal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1898"
  },
  {
    "text": "that contains a stringified version of a syntax node.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1900"
  },
  {
    "text": "Let's start by pulling the prefix out of the Statement Syntax literal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1904"
  },
  {
    "text": "and into a variable that's just a plain string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1908"
  },
  {
    "text": "We'll interpolate that string in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1910"
  },
  {
    "text": "but we'll use a special interpolation that starts with \"literal:\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1912"
  },
  {
    "text": "When you do this, SwiftSyntax will add the contents ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1916"
  },
  {
    "text": "of the string as a string literal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1919"
  },
  {
    "text": "This also works for making literals from other kinds of information ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1921"
  },
  {
    "text": "computed by the macro, numbers, Booleans, arrays, dictionaries, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1924"
  },
  {
    "text": "and even optionals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1928"
  },
  {
    "text": "Now that we're building up the string in a variable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1930"
  },
  {
    "text": "we can change it to have the right code in the message. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1932"
  },
  {
    "text": "Just add a parameter for the original expression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1935"
  },
  {
    "text": "and interpolate its \"description\" property into the string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1938"
  },
  {
    "text": "You don't need to do anything special to escape it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1942"
  },
  {
    "text": "The \"literal:\" interpolation will automatically detect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1944"
  },
  {
    "text": "if the string contains special characters and add escapes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1947"
  },
  {
    "text": "or switch to a raw literal to make sure the code is valid. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1950"
  },
  {
    "text": "So the \"literal:\" interpolation makes it super easy to do the right thing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1953"
  },
  {
    "text": "The last thing to deal with are the file and line numbers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1958"
  },
  {
    "text": "These are a little tricky because the compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1961"
  },
  {
    "text": "doesn't tell the macro the source location it's expanding into. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1964"
  },
  {
    "text": "However, the macro expansion context has an API you can use ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1967"
  },
  {
    "text": "to generate special syntax nodes that the compiler will turn ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1971"
  },
  {
    "text": "into literals with source location info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1974"
  },
  {
    "text": "So let's see how that's done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1976"
  },
  {
    "text": "We'll add another argument for the macro expansion context, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1978"
  },
  {
    "text": "and then we'll use its \"location of\" method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1981"
  },
  {
    "text": "This returns an object that can produce syntax nodes for the location ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1984"
  },
  {
    "text": "of whatever node you provide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1987"
  },
  {
    "text": "It will return nil if the node is one that your macro created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1989"
  },
  {
    "text": "rather than one that the compiler passed in to you, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1993"
  },
  {
    "text": "but we know that \"originalWrapped\" is one of the arguments that the user wrote, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=1996"
  },
  {
    "text": "so its location will never be nil, and we can safely force-unwrap the result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2000"
  },
  {
    "text": "Now all you have to do is interpolate the syntax nodes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2004"
  },
  {
    "text": "for the file and line number, and you're done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2007"
  },
  {
    "text": "We're now generating the right \"guard\" statement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2011"
  },
  {
    "text": "So far, we've discussed how to make macros work at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2014"
  },
  {
    "text": "But let's move on and talk about how to make them work well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2018"
  },
  {
    "text": "And we'll start by talking about name collisions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2021"
  },
  {
    "text": "When we looked at the \"unwrap\" macro before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2025"
  },
  {
    "text": "we looked at an example where we unwrapped a simple variable name.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2027"
  },
  {
    "text": "But if we try to unwrap a more complicated expression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2032"
  },
  {
    "text": "the macro has to expand differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2034"
  },
  {
    "text": "It generates code which captures the expression's result ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2037"
  },
  {
    "text": "into a variable called \"wrappedValue,\" and then unwraps that.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2040"
  },
  {
    "text": "But what happens if you try to use a variable called \"wrappedValue\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2045"
  },
  {
    "text": "in the message? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2048"
  },
  {
    "text": "When the compiler goes looking for \"wrappedValue\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2051"
  },
  {
    "text": "it'll end up finding the closer one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2053"
  },
  {
    "text": "so it'll use that instead of the one you actually meant.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2056"
  },
  {
    "text": "You could try to fix this by picking a name that you think your users ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2060"
  },
  {
    "text": "probably won't use by accident, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2064"
  },
  {
    "text": "but wouldn't it be better to make this impossible? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2066"
  },
  {
    "text": "That's what the \"makeUniqueName\" method on the Macro Expansion Context does. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2070"
  },
  {
    "text": "It returns a variable name that's guaranteed to not be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2075"
  },
  {
    "text": "in user code or in any other macro expansion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2078"
  },
  {
    "text": "so you can be sure that the message string won't accidentally refer to it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2082"
  },
  {
    "text": "Some of you might be wondering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2086"
  },
  {
    "text": "why doesn't Swift automatically stop that from happening? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2088"
  },
  {
    "text": "Some languages have so-called \"hygienic\" macro systems, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2091"
  },
  {
    "text": "where the names inside a macro are distinct from the names outside, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2095"
  },
  {
    "text": "so they can't conflict with each other.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2098"
  },
  {
    "text": "Swift isn't like that because we've found that a lot of macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2102"
  },
  {
    "text": "need to use names from outside themselves. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2105"
  },
  {
    "text": "Think of the DictionaryStorage macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2108"
  },
  {
    "text": "which uses a \"dictionary\" property on the type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2110"
  },
  {
    "text": "If \"dictionary\" inside a macro meant something different ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2113"
  },
  {
    "text": "from \"dictionary\" outside, it'd be pretty hard to make that work.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2116"
  },
  {
    "text": "And sometimes, you even want ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2121"
  },
  {
    "text": "to introduce a whole new name ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2123"
  },
  {
    "text": "that non-macro code can access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2124"
  },
  {
    "text": "Peer macros, member macros, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2127"
  },
  {
    "text": "and declaration macros basically exist ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2129"
  },
  {
    "text": "entirely to do this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2131"
  },
  {
    "text": "But when they do, they need to declare the names ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2134"
  },
  {
    "text": "they're adding, so the compiler knows about them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2136"
  },
  {
    "text": "And they do that inside their role attribute.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2139"
  },
  {
    "text": "You might not have noticed it before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2143"
  },
  {
    "text": "but we've actually seen these declarations all along. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2145"
  },
  {
    "text": "The \"member\" role on the DictionaryStorage macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2148"
  },
  {
    "text": "had a \"names:\" parameter that specified ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2151"
  },
  {
    "text": "the names \"dictionary\" and \"init\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2153"
  },
  {
    "text": "And in fact, most of the macros we've looked at ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2156"
  },
  {
    "text": "in this session have at least one role with a \"names\" argument.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2158"
  },
  {
    "text": "There are five name specifiers you can use: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2162"
  },
  {
    "text": "\"Overloaded\" means that the macro adds declarations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2165"
  },
  {
    "text": "with the exact same base name as whatever the macro is attached to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2168"
  },
  {
    "text": "\"Prefixed\" means that the macro adds declarations with the same base name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2173"
  },
  {
    "text": "except with the specified prefix added. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2177"
  },
  {
    "text": "\"Suffixed\" is the same thing, except with a suffix instead of a prefix. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2179"
  },
  {
    "text": "\"Named\" means that the macro adds declarations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2184"
  },
  {
    "text": "with a specific, fixed base name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2187"
  },
  {
    "text": "And \"arbitrary\" means that the macro adds declarations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2190"
  },
  {
    "text": "with some other name that can't be described using any of these rules. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2193"
  },
  {
    "text": "It's really common to use \"arbitrary.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2197"
  },
  {
    "text": "For example, our multidimensional array macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2199"
  },
  {
    "text": "declares a type with a name that's computed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2202"
  },
  {
    "text": "from one of its parameters, so it needs to specify \"arbitrary.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2203"
  },
  {
    "text": "But when you can use one of the other specifiers, please do so. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2207"
  },
  {
    "text": "It'll make both the compiler and other tools like code completion faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2211"
  },
  {
    "text": "Now, at this point in the session, I'm guessing you're all raring ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2216"
  },
  {
    "text": "to write your first macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2219"
  },
  {
    "text": "And you might have a great idea of a way to start: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2221"
  },
  {
    "text": "Just write a macro that inserts the date and time when it was expanded. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2223"
  },
  {
    "text": "Great idea, right? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2227"
  },
  {
    "text": "Wrong. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2229"
  },
  {
    "text": "It turns out, you must not write this macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2231"
  },
  {
    "text": "Let me explain why. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2234"
  },
  {
    "text": "Macros need to use only the information the compiler provides to them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2236"
  },
  {
    "text": "The compiler assumes that macro implementations are pure functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2241"
  },
  {
    "text": "and that, if the data it provided hasn't changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2245"
  },
  {
    "text": "then the expansion can't change either.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2247"
  },
  {
    "text": "If you circumvent that, you might see inconsistent behavior.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2251"
  },
  {
    "text": "Now, the macro system is designed to prevent some kinds ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2255"
  },
  {
    "text": "of behavior that could violate this rule. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2258"
  },
  {
    "text": "Compiler plug-ins run in a sandbox that stops macro implementations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2261"
  },
  {
    "text": "from reading files on disk or accessing the network.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2265"
  },
  {
    "text": "But the sandbox doesn't block every bad action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2269"
  },
  {
    "text": "You could use APIs to get information like the date or random numbers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2272"
  },
  {
    "text": "or you could save information from one expansion ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2277"
  },
  {
    "text": "in a global variable and use it in another expansion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2279"
  },
  {
    "text": "But if you do these things, your macro might misbehave. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2282"
  },
  {
    "text": "So don't. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2286"
  },
  {
    "text": "Last, but absolutely not least, let's talk about testing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2288"
  },
  {
    "text": "Your macro plug-in is just an ordinary Swift module, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2293"
  },
  {
    "text": "which means that you can, and definitely should, write normal unit tests for it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2296"
  },
  {
    "text": "Test-driven development is an incredibly effective approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2302"
  },
  {
    "text": "to developing Swift macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2305"
  },
  {
    "text": "The \"assertMacroExpansion\" helper from SwiftSyntaxMacrosTestSupport ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2307"
  },
  {
    "text": "will check that a macro produces the right expansion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2312"
  },
  {
    "text": "Just give it an example of the macro and the code it should expand into, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2315"
  },
  {
    "text": "and it'll make sure they match. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2318"
  },
  {
    "text": "So we've learned a lot about Swift macros today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2320"
  },
  {
    "text": "Macros let you reduce boilerplate by designing new language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2324"
  },
  {
    "text": "that \"expand\" a small use site into a more complicated piece of code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2327"
  },
  {
    "text": "You declare a macro alongside other APIs, typically in a library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2332"
  },
  {
    "text": "but you actually implement it in a separate plug-in ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2335"
  },
  {
    "text": "that runs Swift code in a secure sandbox. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2338"
  },
  {
    "text": "A macro's roles express where you can use it and how its expansion ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2341"
  },
  {
    "text": "is integrated into the rest of the program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2345"
  },
  {
    "text": "And you can, and definitely should, write unit tests for your macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2347"
  },
  {
    "text": "to make sure they work as expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2352"
  },
  {
    "text": "If you haven't watched it already, the \"Write Swift Macros\" session ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2354"
  },
  {
    "text": "should be your next stop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2357"
  },
  {
    "text": "It will show you how to work with Xcode's macro development tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2359"
  },
  {
    "text": "and macro package template, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2362"
  },
  {
    "text": "how to inspect SwiftSyntax trees and pull information out of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2364"
  },
  {
    "text": "and how to build a macro development workflow around your unit tests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2367"
  },
  {
    "text": "So thanks for watching, and happy coding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2371"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10167/?time=2375"
  }
]