[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=0"
  },
  {
    "text": "Kyle: Hi, I'm Kyle a member of the SwiftUI team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=10"
  },
  {
    "text": "Animation is a key component of modern app design. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=14"
  },
  {
    "text": "When tastefully applied, it can bring both clarity and life to your UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=18"
  },
  {
    "text": "Making it simple to add animation to your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=24"
  },
  {
    "text": "was one of our core motivations when we began developing SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=27"
  },
  {
    "text": "It's a big reason why SwiftUI is shaped the way that it is. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=31"
  },
  {
    "text": "This session is an overview of SwiftUI's powerful animation capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=35"
  },
  {
    "text": "and how they work together to produce impressive visual effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=40"
  },
  {
    "text": "I'll cover how SwiftUI refreshes the rendering of a view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=45"
  },
  {
    "text": "determines what to animate using Animatable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=50"
  },
  {
    "text": "interpolates values over time using Animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=54"
  },
  {
    "text": "and propagates context for the current update using Transaction.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=57"
  },
  {
    "text": "In recent years, there's been debate among my colleagues ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=63"
  },
  {
    "text": "about who makes the best furry-- or not so furry--companion.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=66"
  },
  {
    "text": "We were curious if we could come to a consensus, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=72"
  },
  {
    "text": "so we made an app to take a poll.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=75"
  },
  {
    "text": "There's a button to cast a vote for each pet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=78"
  },
  {
    "text": "When you tap, the vote count changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=81"
  },
  {
    "text": "and the avatars slide around to reflect the current standings.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=83"
  },
  {
    "text": "In the last poll, as is proper, cats came in first place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=88"
  },
  {
    "text": "but only narrowly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=92"
  },
  {
    "text": "The stakes are too high to leave this next poll purely to chance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=94"
  },
  {
    "text": "so I'm adding a new feature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=99"
  },
  {
    "text": "On tap, the avatar of my choice will scale up ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=101"
  },
  {
    "text": "in order to nudge people towards voting for the proper pet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=105"
  },
  {
    "text": "And I can tap again to scale it back down. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=109"
  },
  {
    "text": "This is already working pretty well, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=112"
  },
  {
    "text": "but it would be way better with an animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=114"
  },
  {
    "text": "Before adding that, I'm gonna trace through how SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=118"
  },
  {
    "text": "refreshes the rendering of a view to give you a better understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=121"
  },
  {
    "text": "of the anatomy of a view update. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=125"
  },
  {
    "text": "For this exercise, I'm gonna focus on the pet avatar view in isolation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=128"
  },
  {
    "text": "SwiftUI tracks a view's dependencies, like this selected state variable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=134"
  },
  {
    "text": "When an event, like a tap, comes in, an update transaction is opened.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=140"
  },
  {
    "text": "If any of its dependencies change, the view is invalidated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=146"
  },
  {
    "text": "and at the close of the transaction, the framework calls body ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=150"
  },
  {
    "text": "to produce a new value in order to refresh the rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=154"
  },
  {
    "text": "This view's body is composed of a tap gesture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=160"
  },
  {
    "text": "a scale effect, and an image.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=164"
  },
  {
    "text": "Behind the scenes, SwiftUI maintains a long-lived dependency graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=169"
  },
  {
    "text": "that manages the lifetime of views and their data.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=173"
  },
  {
    "text": "Each node in this graph, called an attribute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=178"
  },
  {
    "text": "maps to a fine-grained piece of the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=181"
  },
  {
    "text": "When the selected state changed to true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=184"
  },
  {
    "text": "the value of each of these downstream attributes became stale. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=187"
  },
  {
    "text": "They're refreshed by unwrapping the new view value one layer at a time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=191"
  },
  {
    "text": "Once the corresponding graph attributes have been updated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=202"
  },
  {
    "text": "the view's body value is discarded.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=205"
  },
  {
    "text": "Finally, the graph emits drawing commands on your behalf to update the rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=210"
  },
  {
    "text": "I'll zoom in on just the graph in order to visualize the lifetime of an attribute.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=216"
  },
  {
    "text": "An attribute is born with an initial value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=223"
  },
  {
    "text": "An event comes in, and an update transaction opens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=226"
  },
  {
    "text": "An upstream dependency changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=230"
  },
  {
    "text": "The framework calls body. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=233"
  },
  {
    "text": "The attribute's value is updated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=235"
  },
  {
    "text": "The transaction closes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=238"
  },
  {
    "text": "And in this way, the current value of each attribute in the graph evolves over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=240"
  },
  {
    "text": "So that's the anatomy of a view update. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=248"
  },
  {
    "text": "Now I'll add an animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=250"
  },
  {
    "text": "If I wrap withAnimation around my state change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=253"
  },
  {
    "text": "when the tap gesture closure fires, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=257"
  },
  {
    "text": "the animation is set for the transaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=260"
  },
  {
    "text": "Then selected is toggled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=263"
  },
  {
    "text": "and the downstream attributes are invalidated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=265"
  },
  {
    "text": "As before, body is called ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=269"
  },
  {
    "text": "to provide new attribute values.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=271"
  },
  {
    "text": "And here's where it gets interesting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=276"
  },
  {
    "text": "scaleEffect is a special attribute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=277"
  },
  {
    "text": "an \"animatable attribute.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=280"
  },
  {
    "text": "When the value of an animatable attribute changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=283"
  },
  {
    "text": "it checks if an animation is set for the transaction.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=286"
  },
  {
    "text": "If so, it makes a copy and uses the animation to interpolate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=291"
  },
  {
    "text": "from the old value to the new value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=295"
  },
  {
    "text": "as time passes.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=298"
  },
  {
    "text": "I'll zoom in on the scaleEffect animatable attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=300"
  },
  {
    "text": "to examine how this plays out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=303"
  },
  {
    "text": "The first thing to notice is that animatable attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=306"
  },
  {
    "text": "conceptually have both model and presentation values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=310"
  },
  {
    "text": "Right now they're the same. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=313"
  },
  {
    "text": "Then an event comes in, and a transaction is opened, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=316"
  },
  {
    "text": "this time with an animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=320"
  },
  {
    "text": "State is changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=322"
  },
  {
    "text": "and body is called to refresh the stale attribute values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=324"
  },
  {
    "text": "Because the value has changed, the attribute makes a local copy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=328"
  },
  {
    "text": "of the animation to calculate the current presentation value.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=332"
  },
  {
    "text": "SwiftUI knows when the attribute graph contains running animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=337"
  },
  {
    "text": "and will call into the appropriate animatable attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=341"
  },
  {
    "text": "to produce the next frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=345"
  },
  {
    "text": "For built-in animatable attributes like scaleEffect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=347"
  },
  {
    "text": "SwiftUI is very efficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=351"
  },
  {
    "text": "It's able to do this work off the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=352"
  },
  {
    "text": "and without calling into any of your view code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=355"
  },
  {
    "text": "Here's the animation in action.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=359"
  },
  {
    "text": "Nice.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=362"
  },
  {
    "text": "When someone uses the word \"animation,\" they're probably referring ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=365"
  },
  {
    "text": "to the overall visual experience of the way a view changes over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=369"
  },
  {
    "text": "What I've covered so far is that, in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=374"
  },
  {
    "text": "there are two orthogonal aspects ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=377"
  },
  {
    "text": "contributing to the overall visual experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=379"
  },
  {
    "text": "Animatable attributes, like scaleEffect, determine the data being animated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=382"
  },
  {
    "text": "while the Animation determines how that data changes over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=387"
  },
  {
    "text": "I'll dive deeper into each of these in turn, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=393"
  },
  {
    "text": "starting with Animatable, which determines what to animate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=395"
  },
  {
    "text": "SwiftUI builds an animatable attribute for any view conforming ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=400"
  },
  {
    "text": "to the Animatable protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=404"
  },
  {
    "text": "The only requirement is that the view define a readwrite vector ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=406"
  },
  {
    "text": "of the data it wants to animate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=410"
  },
  {
    "text": "The data must conform to VectorArithmetic.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=413"
  },
  {
    "text": "VectorArithmetic matches the textbook definition ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=417"
  },
  {
    "text": "of a vector from your math class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=420"
  },
  {
    "text": "It supports vector addition ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=423"
  },
  {
    "text": "and scalar multiplication.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=425"
  },
  {
    "text": "If you're rusty or not familiar with vectors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=428"
  },
  {
    "text": "don't be discouraged. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=431"
  },
  {
    "text": "A vector is basically just a fixed-length list of numbers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=432"
  },
  {
    "text": "and for SwiftUI animation, the purpose of dealing in vectors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=435"
  },
  {
    "text": "is mostly just to abstract over the length of that list.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=439"
  },
  {
    "text": "For example, CGFloat and Double are one-dimensional vectors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=443"
  },
  {
    "text": "while CGPoint and CGSize define two-dimensional vectors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=448"
  },
  {
    "text": "and CGRect defines a four-dimensional vector.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=452"
  },
  {
    "text": "By dealing in vectors, SwiftUI is able to animate all ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=456"
  },
  {
    "text": "of these types and more with a single generic implementation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=460"
  },
  {
    "text": "So far, for the sake of simplicity, I've represented scaleEffect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=465"
  },
  {
    "text": "as if it were a one-dimensional scale factor.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=469"
  },
  {
    "text": "The Animatable conformance for a one-dimensional scaleEffect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=473"
  },
  {
    "text": "would be straightforward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=477"
  },
  {
    "text": "Its animatableData would just be a CGFloat.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=478"
  },
  {
    "text": "In reality, scaleEffect allows you to independently configure ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=482"
  },
  {
    "text": "the width, height, and relative anchor point ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=486"
  },
  {
    "text": "of the transformation--all animatable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=489"
  },
  {
    "text": "So scaleEffect actually defines a four-dimensional vector ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=493"
  },
  {
    "text": "for its animatable data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=496"
  },
  {
    "text": "a CGSize for the width and height scale, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=498"
  },
  {
    "text": "paired with a UnitPoint for the relative anchor.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=502"
  },
  {
    "text": "AnimatablePair fuses the two vectors together into a single, larger vector. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=506"
  },
  {
    "text": "It's a public type, and you can use it too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=511"
  },
  {
    "text": "It might come in handy if you're conforming one ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=514"
  },
  {
    "text": "of your own views to Animatable.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=516"
  },
  {
    "text": "scaleEffect is just one of the many animatable visual effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=520"
  },
  {
    "text": "that come built into SwiftUI, so the vast majority of the time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=524"
  },
  {
    "text": "Animatable is not an API you'll need to use directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=528"
  },
  {
    "text": "In rare circumstances, though, an advanced use case may call ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=532"
  },
  {
    "text": "for conforming one of your own views to Animatable.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=537"
  },
  {
    "text": "Consider the pet Podium view, which distributes its subviews ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=540"
  },
  {
    "text": "along the arc of a circle using a custom RadialLayout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=544"
  },
  {
    "text": "By default, changing the offset angle within an animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=548"
  },
  {
    "text": "animates the pet avatars to their new positions along a straight line. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=553"
  },
  {
    "text": "Notice how the pets are taking a shortcut ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=557"
  },
  {
    "text": "and trespassing on the interior of the circle? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=560"
  },
  {
    "text": "That's not what I want.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=564"
  },
  {
    "text": "Instead, I want my avatars to animate along the perimeter of the circle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=567"
  },
  {
    "text": "I can get this effect by conforming Podium to animatable ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=572"
  },
  {
    "text": "and using the offset angle as its animatable data.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=576"
  },
  {
    "text": "Why does this result in such a different effect? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=582"
  },
  {
    "text": "To explain, I'll step through an animated update ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=586"
  },
  {
    "text": "for each version of the Podium view, starting with the default behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=589"
  },
  {
    "text": "which animates the avatars along a straight line.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=594"
  },
  {
    "text": "Podium's body is composed of a RadialLayout and three avatars. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=598"
  },
  {
    "text": "When a transaction opens, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=604"
  },
  {
    "text": "if the offset angle has changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=606"
  },
  {
    "text": "body is called to refresh the stale downstream attribute values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=609"
  },
  {
    "text": "Then layout is run, updating the position of each subview.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=614"
  },
  {
    "text": "So this is what an animated update is like ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=619"
  },
  {
    "text": "in the default version. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=622"
  },
  {
    "text": "The active animatable data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=624"
  },
  {
    "text": "is the view position CGPoint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=626"
  },
  {
    "text": "which interpolates in a cartesian coordinate space, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=628"
  },
  {
    "text": "meaning each avatar moves along a straight line. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=631"
  },
  {
    "text": "In the custom version, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=635"
  },
  {
    "text": "when I conform Podium to Animatable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=637"
  },
  {
    "text": "what changes is that body ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=639"
  },
  {
    "text": "becomes the active animatable attribute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=641"
  },
  {
    "text": "with the offset angle ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=644"
  },
  {
    "text": "as its animatable data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=645"
  },
  {
    "text": "How does this result in each avatar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=648"
  },
  {
    "text": "moving along an arc? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=650"
  },
  {
    "text": "In this custom version, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=652"
  },
  {
    "text": "for every frame of the animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=654"
  },
  {
    "text": "body is going to be called ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=656"
  },
  {
    "text": "by SwiftUI with a new offset angle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=658"
  },
  {
    "text": "and the layout will be rerun.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=661"
  },
  {
    "text": "This is super powerful, and sometimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=664"
  },
  {
    "text": "like when you're animating custom layout or drawing code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=667"
  },
  {
    "text": "it might be the only way to achieve the effect you're going for.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=671"
  },
  {
    "text": "Just keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=675"
  },
  {
    "text": "that a custom Animatable conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=676"
  },
  {
    "text": "can be much more expensive to animate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=679"
  },
  {
    "text": "than a built-in effect because it'll ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=681"
  },
  {
    "text": "run body for every frame of the animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=683"
  },
  {
    "text": "So only use this tool if you can't ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=686"
  },
  {
    "text": "achieve the effect you're going for ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=689"
  },
  {
    "text": "using the built-in effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=690"
  },
  {
    "text": "Next, I'll cover Animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=694"
  },
  {
    "text": "the generic algorithms that interpolate animatable data over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=696"
  },
  {
    "text": "Earlier, I added an animation to the pet avatar view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=701"
  },
  {
    "text": "by wrapping the state change in withAnimation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=705"
  },
  {
    "text": "You can customize this by passing an explicit animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=709"
  },
  {
    "text": "like a bouncy spring.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=713"
  },
  {
    "text": "SwiftUI comes with a ton of powerful animations built in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=718"
  },
  {
    "text": "They can roughly be categorized into three buckets: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=722"
  },
  {
    "text": "Timing curve animations, Spring animations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=726"
  },
  {
    "text": "and Higher order animations, which modify a base animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=730"
  },
  {
    "text": "Timing curve animations are likely the category ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=736"
  },
  {
    "text": "of animation you're most familiar with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=739"
  },
  {
    "text": "For example, easeInOut is a timing curve animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=742"
  },
  {
    "text": "All timing curve animations take a curve, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=747"
  },
  {
    "text": "which defines the speed of the animation, and a duration.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=749"
  },
  {
    "text": "A timing curve can be created using bezier control points. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=754"
  },
  {
    "text": "By adjusting the start and end control points, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=759"
  },
  {
    "text": "you change the initial and final velocity of the animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=762"
  },
  {
    "text": "The UnitCurve type can be used standalone ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=767"
  },
  {
    "text": "to calculate the value and the velocity ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=771"
  },
  {
    "text": "at a relative point between 0 and 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=774"
  },
  {
    "text": "SwiftUI comes with a number of built-in timing curve presets: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=778"
  },
  {
    "text": "Linear, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=784"
  },
  {
    "text": "easeIn, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=786"
  },
  {
    "text": "easeOut, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=789"
  },
  {
    "text": "and easeInOut.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=791"
  },
  {
    "text": "All timing curve animations can also specify a custom duration.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=795"
  },
  {
    "text": "The next category of animation, Springs, determine the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=802"
  },
  {
    "text": "at a given point in time by running a spring simulation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=806"
  },
  {
    "text": "You may be familiar with traditional ways of specifying a spring, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=811"
  },
  {
    "text": "for example, mass, stiffness, and damping. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=815"
  },
  {
    "text": "But we've never found these ways to be particularly intuitive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=819"
  },
  {
    "text": "so we invented a new way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=823"
  },
  {
    "text": "You just specify the perceived duration of the animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=825"
  },
  {
    "text": "and how bouncy you want the spring to be. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=829"
  },
  {
    "text": "It's much more approachable.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=832"
  },
  {
    "text": "Similar to UnitCurve, the Spring type can be used standalone ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=836"
  },
  {
    "text": "to calculate the value and the velocity of a spring at a given time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=840"
  },
  {
    "text": "SwiftUI comes with three built-in spring presets: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=847"
  },
  {
    "text": "Smooth, which has no bounce, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=852"
  },
  {
    "text": "snappy, which has a small amount of bounce, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=855"
  },
  {
    "text": "and bouncy, which has a larger amount of bounce.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=859"
  },
  {
    "text": "If you're uncomfortable parameterizing a spring animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=863"
  },
  {
    "text": "these presets are a reliable way to get something that feels good.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=867"
  },
  {
    "text": "Each preset can be also tuned to adjust the duration or tweak the bounciness.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=873"
  },
  {
    "text": "We highly recommend using spring animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=880"
  },
  {
    "text": "because they give your UI an organic feel ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=883"
  },
  {
    "text": "by preserving velocity and naturally coming to rest. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=885"
  },
  {
    "text": "In fact, we feel so strongly about the benefits of spring animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=890"
  },
  {
    "text": "that we made a smooth spring the new default when you use ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=894"
  },
  {
    "text": "a bare withAnimation in iOS 17 and aligned releases.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=898"
  },
  {
    "text": "The last category of animations, Higher order, modify a base animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=904"
  },
  {
    "text": "They can slow it down or speed it up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=909"
  },
  {
    "text": "They can add a delay before the base animation starts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=913"
  },
  {
    "text": "And they can repeat a base animation any number of times, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=917"
  },
  {
    "text": "optionally toggling between playing forwards and playing in reverse.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=921"
  },
  {
    "text": "And now we're introducing an entirely new category of animation: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=927"
  },
  {
    "text": "Custom animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=931"
  },
  {
    "text": "The CustomAnimation protocol gives you access ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=934"
  },
  {
    "text": "to the same low-level generic entry points we use to implement all the animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=936"
  },
  {
    "text": "that come built into SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=941"
  },
  {
    "text": "The CustomAnimation protocol has three requirements: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=944"
  },
  {
    "text": "animate, shouldMerge, and velocity.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=948"
  },
  {
    "text": "I'll start by focusing on animate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=953"
  },
  {
    "text": "shouldMerge and velocity are optional requirements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=955"
  },
  {
    "text": "I'll get back to them later.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=959"
  },
  {
    "text": "Animate is passed the vector to animate towards, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=962"
  },
  {
    "text": "the amount of time that has elapsed since the animation began, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=966"
  },
  {
    "text": "and the context, which includes additional animation state.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=971"
  },
  {
    "text": "Animate returns the current value of the animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=976"
  },
  {
    "text": "or nil if the animation has finished.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=979"
  },
  {
    "text": "Where does this value vector come from? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=982"
  },
  {
    "text": "It comes from a view's animatable data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=985"
  },
  {
    "text": "In the pet avatar view, that's the scale effect.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=988"
  },
  {
    "text": "Recall that scaleEffect's animatable data is a four-dimensional vector, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=992"
  },
  {
    "text": "including a two-dimensional width and height scale. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=997"
  },
  {
    "text": "When the avatar is selected, it's animated to a scale factor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1001"
  },
  {
    "text": "of 1.5 by 1.5 from a scale factor of 1 by 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1005"
  },
  {
    "text": "Vector addition and scalar multiplication operations allow SwiftUI to subtract ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1011"
  },
  {
    "text": "these two vectors from one another to calculate the delta between them.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1016"
  },
  {
    "text": "This delta is actually what's being animated.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1022"
  },
  {
    "text": "This means, in practice, the animation running ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1026"
  },
  {
    "text": "in the scaleEffect animatable attribute isn't interpolating from 1 to 1.5, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1029"
  },
  {
    "text": "but from 0 to 0.5. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1035"
  },
  {
    "text": "Among other things, this makes it more convenient ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1038"
  },
  {
    "text": "to implement the animate method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1040"
  },
  {
    "text": "Let me show you.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1042"
  },
  {
    "text": "I'm going to implement a linear timing curve animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1045"
  },
  {
    "text": "configured by a duration to interpolate over.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1049"
  },
  {
    "text": "Recall that animate is passed the delta vector to animate towards. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1053"
  },
  {
    "text": "I can use scalar multiplication to scale the vector by the proportion ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1058"
  },
  {
    "text": "of the duration that has elapsed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1062"
  },
  {
    "text": "And once the full duration has elapsed, I'll return nil to indicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1065"
  },
  {
    "text": "that the animation has finished and can be removed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1069"
  },
  {
    "text": "That's it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1072"
  },
  {
    "text": "And because this implementation is generic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1074"
  },
  {
    "text": "it works with animatable data of any number of dimensions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1077"
  },
  {
    "text": "So that's how Animatable and Animation work together ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1081"
  },
  {
    "text": "to produce the impressive visual effects that appear in your UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1085"
  },
  {
    "text": "Next, I'll return to CustomAnimation's two optional requirements: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1091"
  },
  {
    "text": "shouldMerge and velocity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1095"
  },
  {
    "text": "What are they for? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1098"
  },
  {
    "text": "Imagine for a moment that you're the scaleEffect animatable attribute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1100"
  },
  {
    "text": "The user taps down, a transaction opens, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1105"
  },
  {
    "text": "your value changes, you make a local copy of the animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1109"
  },
  {
    "text": "and you start happily animating your delta vector. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1114"
  },
  {
    "text": "Everything is going great. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1117"
  },
  {
    "text": "That is, until the pesky user taps again before the animation has finished. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1120"
  },
  {
    "text": "What do you do? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1125"
  },
  {
    "text": "You set up a new animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1128"
  },
  {
    "text": "and you call shouldMerge on it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1129"
  },
  {
    "text": "The default implementation returns false-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1132"
  },
  {
    "text": "this is what timing curve animations do-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1134"
  },
  {
    "text": "in which case both animations will be run together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1137"
  },
  {
    "text": "and their results will be combined by the system.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1140"
  },
  {
    "text": "This is another reason why SwiftUI animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1144"
  },
  {
    "text": "deal in terms of delta vectors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1147"
  },
  {
    "text": "It makes it easy to calculate the correct combined presentation value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1149"
  },
  {
    "text": "when multiple animations are running. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1153"
  },
  {
    "text": "But what if I'd chosen a spring animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1156"
  },
  {
    "text": "not a timing curve animation? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1158"
  },
  {
    "text": "Spring animations override shouldMerge to return true ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1161"
  },
  {
    "text": "and incorporate the state of the previous animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1165"
  },
  {
    "text": "This allows them to preserve velocity and retarget to the new value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1168"
  },
  {
    "text": "which can feel more natural than combining additively, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1173"
  },
  {
    "text": "like timing curve animations.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1176"
  },
  {
    "text": "And that's what this final velocity requirement is for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1179"
  },
  {
    "text": "Implementing it allows velocity to be preserved when a running animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1182"
  },
  {
    "text": "is merged with a new one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1187"
  },
  {
    "text": "So I'll finish off my linear timing curve animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1189"
  },
  {
    "text": "by adding an implementation for velocity.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1192"
  },
  {
    "text": "I've used the term \"transaction\" throughout this talk to refer to the set ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1197"
  },
  {
    "text": "of work that's performed for a given update to the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1201"
  },
  {
    "text": "In SwiftUI code, Transaction also refers to a related, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1205"
  },
  {
    "text": "powerful data-flow construct and family of APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1209"
  },
  {
    "text": "You may already be familiar with Environment and Preferences, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1213"
  },
  {
    "text": "dictionaries SwiftUI implicitly passes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1217"
  },
  {
    "text": "down and up the view hierarchy, respectively. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1220"
  },
  {
    "text": "Transaction is similar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1223"
  },
  {
    "text": "It's a dictionary SwiftUI uses to implicitly propagate all the context ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1224"
  },
  {
    "text": "for the current update, most notably the animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1229"
  },
  {
    "text": "My explanation earlier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1234"
  },
  {
    "text": "of how an animatable attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1235"
  },
  {
    "text": "reads the current animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1237"
  },
  {
    "text": "was a little vague. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1239"
  },
  {
    "text": "So I'm gonna trace through another animated update of the avatar view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1241"
  },
  {
    "text": "This time, I'll be more specific. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1245"
  },
  {
    "text": "When the tap gesture closure fires, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1248"
  },
  {
    "text": "withAnimation sets an animation in the root transaction dictionary.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1251"
  },
  {
    "text": "Body is called to update the attribute values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1257"
  },
  {
    "text": "The transaction dictionary is propagated across the attribute graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1261"
  },
  {
    "text": "When it reaches an animatable attribute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1265"
  },
  {
    "text": "the attribute checks if an animation is set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1268"
  },
  {
    "text": "And if so, it makes a copy to drive its presentation value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1271"
  },
  {
    "text": "The Transaction is only relevant for a specific update, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1276"
  },
  {
    "text": "so once the stale attributes have been refreshed, it's discarded.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1279"
  },
  {
    "text": "Flowing the animation down the view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1284"
  },
  {
    "text": "within the transaction dictionary makes possible a number of powerful APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1287"
  },
  {
    "text": "for controlling when and how animations apply to your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1292"
  },
  {
    "text": "Right now, the pet avatar view can only be selected via tap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1298"
  },
  {
    "text": "I'll change the selected State variable to a Binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1304"
  },
  {
    "text": "That way, it can be also be selected programmatically.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1307"
  },
  {
    "text": "But how do I animate a programmatic change to a view property? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1311"
  },
  {
    "text": "I can use the transaction modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1316"
  },
  {
    "text": "to access the animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1318"
  },
  {
    "text": "as it flows down the view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1320"
  },
  {
    "text": "inside the transaction dictionary.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1322"
  },
  {
    "text": "If I set an animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1326"
  },
  {
    "text": "from within this modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1328"
  },
  {
    "text": "then whenever body is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1329"
  },
  {
    "text": "even if there is no animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1331"
  },
  {
    "text": "or a different animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1333"
  },
  {
    "text": "in the transaction, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1335"
  },
  {
    "text": "the attribute will override the animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1337"
  },
  {
    "text": "And when it reaches the scale effect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1340"
  },
  {
    "text": "this animation will be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1342"
  },
  {
    "text": "to interpolate the scale factor.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1344"
  },
  {
    "text": "Pretty cool.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1347"
  },
  {
    "text": "But there's a problem with this pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1350"
  },
  {
    "text": "Indiscriminately overriding the animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1352"
  },
  {
    "text": "for all descendants ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1355"
  },
  {
    "text": "whenever SwiftUI refreshes a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1357"
  },
  {
    "text": "can lead to accidental animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1359"
  },
  {
    "text": "Instead, for uses cases like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1362"
  },
  {
    "text": "SwiftUI provides an animation view modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1365"
  },
  {
    "text": "It takes an additional value argument, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1369"
  },
  {
    "text": "which allows you to scope the effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1371"
  },
  {
    "text": "much more precisely. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1373"
  },
  {
    "text": "It will only write the animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1375"
  },
  {
    "text": "into the transaction ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1377"
  },
  {
    "text": "if the value has changed.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1378"
  },
  {
    "text": "Now that that's hooked up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1381"
  },
  {
    "text": "this withAnimation isn't accomplishing anything, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1383"
  },
  {
    "text": "so we can remove it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1386"
  },
  {
    "text": "The animation view modifier is also a powerful tool for situations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1390"
  },
  {
    "text": "where you want to apply different animations to different parts of a view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1394"
  },
  {
    "text": "For example, the pet avatar has a shadow, which I've omitted thus far ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1399"
  },
  {
    "text": "from the example for the sake of simplicity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1404"
  },
  {
    "text": "The shadow radius increases when the avatar is selected ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1407"
  },
  {
    "text": "to accentuate the illusion that it's elevated above the background.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1411"
  },
  {
    "text": "After playing with it, I've decided I want the shadow's animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1416"
  },
  {
    "text": "to be more subdued than the scale effect's. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1420"
  },
  {
    "text": "To accomplish this, I can insert another animation view modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1423"
  },
  {
    "text": "between the scaleEffect and the shadow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1427"
  },
  {
    "text": "Now the transaction picks up the bouncy spring ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1430"
  },
  {
    "text": "for animating the scale effect.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1434"
  },
  {
    "text": "And it picks up the more subtle smooth spring ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1438"
  },
  {
    "text": "for animating the shadow radius.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1441"
  },
  {
    "text": "Because animation modifiers are only active ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1445"
  },
  {
    "text": "when their value has changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1448"
  },
  {
    "text": "the odds of an accidental animation are greatly reduced. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1450"
  },
  {
    "text": "But if the avatar's image had just happened to change ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1454"
  },
  {
    "text": "in the same transaction as selected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1457"
  },
  {
    "text": "it would have inherited the shadow's smooth spring animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1459"
  },
  {
    "text": "for its content transition.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1463"
  },
  {
    "text": "This is a point worth lingering on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1466"
  },
  {
    "text": "This animation view modifier works well for leaf components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1468"
  },
  {
    "text": "where the entire sub-hierarchy is under your control. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1472"
  },
  {
    "text": "But for non-leaf components, which contain arbitrary child content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1475"
  },
  {
    "text": "it's much more likely for an accidental animation to occur.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1479"
  },
  {
    "text": "For example, if I want to reuse my avatar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1484"
  },
  {
    "text": "in another app that has nothing to do with pets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1487"
  },
  {
    "text": "I could make it more generic by accepting arbitrary child content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1490"
  },
  {
    "text": "In this scenario, I have less of a guarantee ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1495"
  },
  {
    "text": "that when selected changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1498"
  },
  {
    "text": "the child content won't also have changed.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1499"
  },
  {
    "text": "This could result in an accidental animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1504"
  },
  {
    "text": "Whoops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1507"
  },
  {
    "text": "Good news. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1509"
  },
  {
    "text": "We have a new version of the animation view modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1510"
  },
  {
    "text": "specifically designed for use cases like this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1513"
  },
  {
    "text": "It narrowly scopes the animation to the animatable attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1516"
  },
  {
    "text": "specified in its body closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1521"
  },
  {
    "text": "Here's how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1524"
  },
  {
    "text": "Imagine there's no animation in the transaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1525"
  },
  {
    "text": "When the transaction reaches the animation view modifier's attribute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1530"
  },
  {
    "text": "a copy is made that's populated with the specified animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1534"
  },
  {
    "text": "The copy is propagated downstream, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1539"
  },
  {
    "text": "but only to the scoped animatable attributes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1541"
  },
  {
    "text": "Once it's done its job, the copy is discarded, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1545"
  },
  {
    "text": "and the original transaction picks up where it left off.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1549"
  },
  {
    "text": "So when the transaction reaches the child content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1554"
  },
  {
    "text": "because the original transaction is unaffected by any ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1558"
  },
  {
    "text": "of the intermediate animation view modifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1562"
  },
  {
    "text": "there's no risk of accidental animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1565"
  },
  {
    "text": "A limited set of transaction APIs have been available ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1569"
  },
  {
    "text": "since the first version of SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1572"
  },
  {
    "text": "Now we're introducing the capability to define custom transaction keys, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1574"
  },
  {
    "text": "so you can leverage the transaction dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1579"
  },
  {
    "text": "to implicitly propagate your own update-specific data.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1581"
  },
  {
    "text": "If you've ever declared a custom environment key, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1587"
  },
  {
    "text": "declaring a custom transaction key will be familiar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1590"
  },
  {
    "text": "The pattern is to create a unique type that conforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1594"
  },
  {
    "text": "to the TransactionKey protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1597"
  },
  {
    "text": "The only requirement is to provide a defaultValue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1600"
  },
  {
    "text": "Then declare a computed property as an extension on Transaction ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1603"
  },
  {
    "text": "that reads and writes from the transaction dictionary using your key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1608"
  },
  {
    "text": "Here, I've defined a boolean key to track whether, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1613"
  },
  {
    "text": "for the given update, the avatar was tapped or not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1616"
  },
  {
    "text": "I'll decide which animation to use based on its value.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1620"
  },
  {
    "text": "If the avatar was selected interactively, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1624"
  },
  {
    "text": "I'll scale it up or down using a more lively spring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1627"
  },
  {
    "text": "But if the avatar was selected programmatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1631"
  },
  {
    "text": "I'll scale it using a more subdued spring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1634"
  },
  {
    "text": "I can set a value in the transaction dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1637"
  },
  {
    "text": "for the given update by wrapping withTransaction around my state change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1640"
  },
  {
    "text": "This should seem familiar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1645"
  },
  {
    "text": "withAnimation is just a thin wrapper around withTransaction.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1646"
  },
  {
    "text": "The arguments passed to withTransaction are a keypath ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1652"
  },
  {
    "text": "to a computed property on the Transaction and the value to set.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1655"
  },
  {
    "text": "Transaction is unique among SwiftUI's implicit data-flow constructs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1660"
  },
  {
    "text": "because it's discarded at the end of every update. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1664"
  },
  {
    "text": "This means, unless explicitly set for the current update, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1668"
  },
  {
    "text": "every value in the transaction dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1671"
  },
  {
    "text": "reverts to just being the default value for its key.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1674"
  },
  {
    "text": "In the avatar view, when the tap gesture closure fires, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1678"
  },
  {
    "text": "avatarTapped is set to true for the current update.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1682"
  },
  {
    "text": "The transaction also contains the default value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1687"
  },
  {
    "text": "for the animation key, which is nil.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1691"
  },
  {
    "text": "The transaction propagates across the view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1696"
  },
  {
    "text": "until it reaches the transaction modifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1699"
  },
  {
    "text": "Here, the avatar view reads avatarTapped, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1703"
  },
  {
    "text": "and based on its value, sets the appropriate animation...",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1706"
  },
  {
    "text": "Which propagates down the view hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1712"
  },
  {
    "text": "This works pretty well, but just like earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1719"
  },
  {
    "text": "it can result in accidental animations.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1722"
  },
  {
    "text": "To give you finer-grained control over modifying the transaction, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1726"
  },
  {
    "text": "we're introducing two new variants of the transaction modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1730"
  },
  {
    "text": "One lets you scope using a value argument. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1734"
  },
  {
    "text": "And the other lets you scope to a sub-hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1738"
  },
  {
    "text": "defined in a body closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1740"
  },
  {
    "text": "These variants mirror ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1743"
  },
  {
    "text": "the scoped animation view modifiers covered earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1744"
  },
  {
    "text": "In this session, I explained SwiftUI's powerful animation primitives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1749"
  },
  {
    "text": "Animatable, Animation, and Transaction.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1753"
  },
  {
    "text": "As a next step, I recommend checking out two related sessions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1759"
  },
  {
    "text": "\"Animate with springs\" provides more guidance on why and how ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1763"
  },
  {
    "text": "to effectively use spring animations in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1768"
  },
  {
    "text": "And \"Wind your way through advanced animations in SwiftUI\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1771"
  },
  {
    "text": "introduces powerful new tools for constructing multi-step animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1775"
  },
  {
    "text": "I hope this content gives you a better understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1781"
  },
  {
    "text": "of how SwiftUI animation works and empowers you ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1784"
  },
  {
    "text": "to more skillfully leverage animation in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1787"
  },
  {
    "text": "Thanks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1790"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10156/?time=1792"
  }
]