[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1"
  },
  {
    "text": "Georgi: Hello and welcome! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=10"
  },
  {
    "text": "I’m Georgi Rakidov, Software Engineer in GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=13"
  },
  {
    "text": "Graphics, and Display Software. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=16"
  },
  {
    "text": "This session is the third of a three-part series ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=19"
  },
  {
    "text": "that helps you bring your game to Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=22"
  },
  {
    "text": "The first session covers how you can use the new Game Porting Toolkit ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=24"
  },
  {
    "text": "to run your umodified Windows game on the Mac ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=28"
  },
  {
    "text": "to evaluate your graphics, audio, and display features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=31"
  },
  {
    "text": "the second session shows how much development time you can save ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=35"
  },
  {
    "text": "by compiling your existing HLSL shaders to Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=39"
  },
  {
    "text": "using the new Metal Shader Converter tool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=43"
  },
  {
    "text": "This session completes the process of bringing your game to Mac ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=47"
  },
  {
    "text": "by giving you detailed insights about how to port your renderer to Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=51"
  },
  {
    "text": "and get great performance out of Apple Silicon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=55"
  },
  {
    "text": "As you port your renderer to Metal, you’ll notice your engine requires mapping ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=59"
  },
  {
    "text": "the concepts from other platform graphics APIs to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=64"
  },
  {
    "text": "To help you with that, this session covers four topics, with Metal best practices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=68"
  },
  {
    "text": "so you can leverage the powerful architecture of Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=74"
  },
  {
    "text": "Each game is responsible for making GPU resources, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=78"
  },
  {
    "text": "including textures and data buffers, available to the GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=82"
  },
  {
    "text": "and configuring how your shaders can access them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=86"
  },
  {
    "text": "Your game can leverage the powerful graphics architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=90"
  },
  {
    "text": "of Apple processors by optimizing how it submits commands to the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=94"
  },
  {
    "text": "Games typically implement modern rendering techniques by using indirect rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=100"
  },
  {
    "text": "MetalFX helps games save time for each frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=106"
  },
  {
    "text": "by rendering to a lower resolution and then upscaling with MetalFX ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=110"
  },
  {
    "text": "to the final resolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=115"
  },
  {
    "text": "When it comes to managing resources, each engine has to decide ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=117"
  },
  {
    "text": "how the GPU accesses each texture, data buffer, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=121"
  },
  {
    "text": "On Metal, it's important to think about ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=127"
  },
  {
    "text": "providing shaders access to resources with bindings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=129"
  },
  {
    "text": "and Making resources resident into GPU-accessible memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=133"
  },
  {
    "text": "and keeping access to them synchronized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=138"
  },
  {
    "text": "Resource bindings and shaders go together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=141"
  },
  {
    "text": "Start by translating your existing shaders with the Metal Shader Converter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=144"
  },
  {
    "text": "which is a new tool this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=150"
  },
  {
    "text": "that can save you a lot of time porting your shaders to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=151"
  },
  {
    "text": "You can learn more from the \"Compile your Shaders\" session ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=156"
  },
  {
    "text": "in this series. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=159"
  },
  {
    "text": "Metal Shader Converter gives you two binding models to choose from. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=160"
  },
  {
    "text": "With \"Automatic layout,\" the converter generates ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=165"
  },
  {
    "text": "the binding information automatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=168"
  },
  {
    "text": "or you can pass binding information to Metal Shader Converter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=171"
  },
  {
    "text": "with \"Explicit Layout.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=175"
  },
  {
    "text": "Explicit layout is very flexible and can be helpful ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=177"
  },
  {
    "text": "when you need to implement binding models from other platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=181"
  },
  {
    "text": "For example, some API designs use a shader root signature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=186"
  },
  {
    "text": "and here is a typical one with four entries: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=191"
  },
  {
    "text": "a descriptor table that points to a series of textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=194"
  },
  {
    "text": "a buffer root parameter, a 32-bit constant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=199"
  },
  {
    "text": "and another descriptor table that points to a series of samplers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=204"
  },
  {
    "text": "Each descriptor table is a resource array ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=210"
  },
  {
    "text": "that contains elements of the same type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=214"
  },
  {
    "text": "such as all textures, all samplers, or all buffers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=216"
  },
  {
    "text": "Metal's argument buffers are more flexible in that elements can be of multiple types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=222"
  },
  {
    "text": "But if your engine expects a homogenous array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=227"
  },
  {
    "text": "you can easily encode them with an argument buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=230"
  },
  {
    "text": "This example encodes the equivalent of a texture descriptor table. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=234"
  },
  {
    "text": "It starts by allocating a Metal buffer that serves as a texture descriptor table ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=239"
  },
  {
    "text": "by storing the Metal resource ID for each texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=245"
  },
  {
    "text": "As it creates each texture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=250"
  },
  {
    "text": "the code stores its resourceID directly into the table. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=252"
  },
  {
    "text": "The nice part is you can run code like this up front ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=259"
  },
  {
    "text": "and outside of your rendering loop! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=263"
  },
  {
    "text": "The process for encoding a sampler descriptor table is almost the same. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=265"
  },
  {
    "text": "Just like with textures, the code starts by creating a Metal buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=272"
  },
  {
    "text": "that serves as the sampler descriptor table. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=277"
  },
  {
    "text": "As the code configures each sampler's descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=281"
  },
  {
    "text": "it sets the supportArgumentBuffers property to yes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=284"
  },
  {
    "text": "After the code creates the sampler with the descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=289"
  },
  {
    "text": "it saves the sampler's resourceID in the table. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=293"
  },
  {
    "text": "You can also use an argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=297"
  },
  {
    "text": "to represent the top-level root signature itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=300"
  },
  {
    "text": "This example defines a structure for the root signature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=304"
  },
  {
    "text": "and creates a Metal buffer that can store one instance of it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=309"
  },
  {
    "text": "The code assigns each field of the structure's fields ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=315"
  },
  {
    "text": "with appropriate values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=319"
  },
  {
    "text": "including GPU addresses for the texture and sampler tables. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=321"
  },
  {
    "text": "That’s all it takes to convert a root signature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=326"
  },
  {
    "text": "Argument buffers are super-efficient in Metal 3! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=329"
  },
  {
    "text": "Now you can just bind the top-level argument buffer to a shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=333"
  },
  {
    "text": "This part is done in the render loop, but you can create the descriptor tables ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=338"
  },
  {
    "text": "and root structure beforehand outside the render loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=343"
  },
  {
    "text": "Metal 3 argument buffers provide a flexible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=348"
  },
  {
    "text": "performant way to translate other binding models, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=352"
  },
  {
    "text": "including root signatures and descriptor tables. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=355"
  },
  {
    "text": "Resources need to be resident during the execution of a given pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=360"
  },
  {
    "text": "or render stage in order for shaders to access them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=364"
  },
  {
    "text": "And if a resource is shared between passes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=368"
  },
  {
    "text": "the order of execution of those passes has to be synchronized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=371"
  },
  {
    "text": "The usage of bindless resources with Metal argument buffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=376"
  },
  {
    "text": "requires explicit residency management on all GPU architectures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=380"
  },
  {
    "text": "and Metal provides efficient ways to control residency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=385"
  },
  {
    "text": "The recommendation is to group all read-only resources in big heaps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=390"
  },
  {
    "text": "That way, you can just call useHeap once per encoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=395"
  },
  {
    "text": "and all your read-only resources will be made resident ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=399"
  },
  {
    "text": "for the duration of that pass or render stage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=402"
  },
  {
    "text": "ready to be accessed by the shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=406"
  },
  {
    "text": "This is how you can do it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=410"
  },
  {
    "text": "Create a heap with the necessary size to allocate all your read-only resources, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=412"
  },
  {
    "text": "then allocate each resource out of this heap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=417"
  },
  {
    "text": "And at render time, just call useHeap to make all these resources resident. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=422"
  },
  {
    "text": "For writable resources, the story is a bit different. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=429"
  },
  {
    "text": "Consider allocating writable resources individually and calling useResource ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=433"
  },
  {
    "text": "with the right usage flags. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=439"
  },
  {
    "text": "In this case, Metal will handle synchronization for you ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=441"
  },
  {
    "text": "and optimize for performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=445"
  },
  {
    "text": "This will help you avoid the burden ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=447"
  },
  {
    "text": "to manually synchronize resources across Metal encoders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=450"
  },
  {
    "text": "Similar to before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=455"
  },
  {
    "text": "you start by allocating the resources, this time not backed by a heap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=456"
  },
  {
    "text": "Then, only for the encoders that are going to access these resources, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=462"
  },
  {
    "text": "call useResource with the right usage flags. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=467"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=471"
  },
  {
    "text": "the encoder is writing to the texture and reading from the buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=472"
  },
  {
    "text": "Here is a table with this recommendation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=479"
  },
  {
    "text": "Both, read-only and writable resources, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=482"
  },
  {
    "text": "are accessed from a top-level argument buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=486"
  },
  {
    "text": "In the ideal case, set just once per encoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=489"
  },
  {
    "text": "Read-only resources, grouped in heaps, hazard tracking mode set to Untracked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=494"
  },
  {
    "text": "To make all resources in the heap resident, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=501"
  },
  {
    "text": "call useHeap once per encoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=504"
  },
  {
    "text": "Writable resources, allocated individually, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=508"
  },
  {
    "text": "leave hazard tracking and synchronization to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=512"
  },
  {
    "text": "And for each resource call, useResource once per encoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=515"
  },
  {
    "text": "This is an efficient approach! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=521"
  },
  {
    "text": "It implements a bindless model with low CPU overhead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=523"
  },
  {
    "text": "and the Application doesn't have to worry about hazard tracking and synchronization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=527"
  },
  {
    "text": "complicated tasks that require serious effort, and development time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=532"
  },
  {
    "text": "For more details in bindless, residency, and synchronization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=537"
  },
  {
    "text": "refer to the session “Go bindless with Metal 3.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=542"
  },
  {
    "text": "Once you have resource bindings, residency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=547"
  },
  {
    "text": "and synchronization implemented in the code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=550"
  },
  {
    "text": "to render anything on screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=553"
  },
  {
    "text": "the engine will have to send commands to the renderer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=555"
  },
  {
    "text": "The Apple Processor has many features to optimize command execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=558"
  },
  {
    "text": "The GPU is a Tile-Based Deferred Renderer, or TBDR, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=564"
  },
  {
    "text": "with a unified memory architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=568"
  },
  {
    "text": "where the CPU and the GPU are sharing system memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=571"
  },
  {
    "text": "Also, the GPU has a fast, on-chip memory called Tile Memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=574"
  },
  {
    "text": "To leverage this architecture, Metal has a notion of passes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=580"
  },
  {
    "text": "and your goal is to group rendering commands into passes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=585"
  },
  {
    "text": "and properly configure those passes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=588"
  },
  {
    "text": "For a deeper dive into TBDR architecture, please refer to the related presentations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=591"
  },
  {
    "text": "“Bring your Metal app to Apple Silicon Macs” ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=598"
  },
  {
    "text": "and \"Harness AppleGPUs with Metal.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=601"
  },
  {
    "text": "Other APIs can have a continuous stream mixing GPU commands of different types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=605"
  },
  {
    "text": "and your engine might assume this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=611"
  },
  {
    "text": "Translating commands to Metal, you first create a command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=616"
  },
  {
    "text": "Then, depending on the type of commands, Graphics, Compute, or Blit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=621"
  },
  {
    "text": "you group them into passes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=626"
  },
  {
    "text": "You write the commands for each pass into the command buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=628"
  },
  {
    "text": "using a command encoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=632"
  },
  {
    "text": "At the end, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=635"
  },
  {
    "text": "when all the commands are encoded, submit the command buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=636"
  },
  {
    "text": "to the command queue for execution by the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=641"
  },
  {
    "text": "Your engine can consider four best practices ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=646"
  },
  {
    "text": "to efficiently translate rendering commands to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=649"
  },
  {
    "text": "Start by batching copies up front before rendering starts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=653"
  },
  {
    "text": "group commands of the same type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=657"
  },
  {
    "text": "and avoid having empty encoders to clear render targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=660"
  },
  {
    "text": "And finally, optimize your Metal Load and Store actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=664"
  },
  {
    "text": "to minimize memory bandwidth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=668"
  },
  {
    "text": "These best practices are easy to explain by using an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=671"
  },
  {
    "text": "Say you have the following sequence: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=676"
  },
  {
    "text": "a render target clear, a draw, a copy, a dispatch, and another draw. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=678"
  },
  {
    "text": "In particular, look at all the memory traffic ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=685"
  },
  {
    "text": "between system and tile memory generated in this sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=688"
  },
  {
    "text": "This is not ideal! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=692"
  },
  {
    "text": "The copy in the middle of the stream copies uniform data for subsequent draws, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=694"
  },
  {
    "text": "in this case, Draw 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=700"
  },
  {
    "text": "The recommendation is, if possible, to move and batch these copies ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=702"
  },
  {
    "text": "before rendering to avoid interrupting the rendering pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=707"
  },
  {
    "text": "After the change, the copy is now first, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=713"
  },
  {
    "text": "then the clear, draw 0, dispatch, and draw 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=716"
  },
  {
    "text": "If there is no dependency between the two draw calls and the dispatch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=721"
  },
  {
    "text": "you should reorder them ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=726"
  },
  {
    "text": "so you can batch draws and dispatches together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=728"
  },
  {
    "text": "In this example, after switching the order of the draw and the dispatch calls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=733"
  },
  {
    "text": "you now have two render passes after each other. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=739"
  },
  {
    "text": "This scenario is perfect for merging them into a single render pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=743"
  },
  {
    "text": "if they share the same render targets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=748"
  },
  {
    "text": "saving significant memory bandwidth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=751"
  },
  {
    "text": "That way, you remove some unnecessary memory traffic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=755"
  },
  {
    "text": "as data doesn't need to go from tile memory to system memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=760"
  },
  {
    "text": "and back between the two draws. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=764"
  },
  {
    "text": "This is already better, but could be optimized further. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=768"
  },
  {
    "text": "The clear is an empty encoder, with only one purpose: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=772"
  },
  {
    "text": "to clear the render targets used by the next draws. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=777"
  },
  {
    "text": "In Metal, there is a very efficient way to do this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=781"
  },
  {
    "text": "Just use LoadActionClear ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=784"
  },
  {
    "text": "for the first render pass that uses the render targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=787"
  },
  {
    "text": "This is much better, but there is one more recommendation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=792"
  },
  {
    "text": "You can optimize load and store actions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=797"
  },
  {
    "text": "You only have to store in the system memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=801"
  },
  {
    "text": "the content of the render targets that will be used in the next passes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=803"
  },
  {
    "text": "From this example, assume after draw 1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=809"
  },
  {
    "text": "only the first render target will be used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=813"
  },
  {
    "text": "All other render targets are intermediate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=816"
  },
  {
    "text": "and the content doesn’t need to be preserved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=819"
  },
  {
    "text": "Metal allows control of the store action for each render target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=823"
  },
  {
    "text": "In this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=829"
  },
  {
    "text": "you can use StoreActionStore for the first render target ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=830"
  },
  {
    "text": "and StoreActionDontCare for the other ones. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=834"
  },
  {
    "text": "And that's it! This is the initial commands sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=838"
  },
  {
    "text": "There are five round trips between tile memory and system memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=842"
  },
  {
    "text": "And this is how the commands sequence looks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=848"
  },
  {
    "text": "after a few easy optimizations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=850"
  },
  {
    "text": "Only one final flush from tile memory to system memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=853"
  },
  {
    "text": "The memory bandwidth is greatly reduced! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=857"
  },
  {
    "text": "And that has been achieved by moving copies before rendering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=861"
  },
  {
    "text": "grouping commands of the same type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=865"
  },
  {
    "text": "avoid clearing render targets with empty encoders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=868"
  },
  {
    "text": "and optimizing load and store actions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=872"
  },
  {
    "text": "The GPU tools can help you identify these issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=876"
  },
  {
    "text": "Metal Debugger in Xcode automatically finds optimization opportunities, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=879"
  },
  {
    "text": "so you can get the best performance in your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=885"
  },
  {
    "text": "It allows you to inspect and understand the dependencies of your Metal passes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=888"
  },
  {
    "text": "and comes with a full-featured suite of debugging and profiling tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=894"
  },
  {
    "text": "It's easy to use Metal Debugger to identify the issues that were mentioned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=900"
  },
  {
    "text": "When I capture a Metal workload, Metal Debugger shows the Summary viewer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=906"
  },
  {
    "text": "The Insights section at the bottom shows me optimization opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=913"
  },
  {
    "text": "that come grouped into four categories: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=917"
  },
  {
    "text": "Memory, Bandwidth, Performance, and API Usage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=920"
  },
  {
    "text": "There are two bandwidth insights I’d like to highlight in this workload. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=927"
  },
  {
    "text": "The first one is for unused resources. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=933"
  },
  {
    "text": "When I select an Insight, I can find a summary ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=936"
  },
  {
    "text": "and some actionable advice to address it in the right panel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=940"
  },
  {
    "text": "The GBuffer pass is storing more attachments than it needs to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=945"
  },
  {
    "text": "In this case, the GBuffer pass loads the albedo/alpha texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=951"
  },
  {
    "text": "and stores it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=956"
  },
  {
    "text": "However, since the albedo texture isn’t used later in this frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=958"
  },
  {
    "text": "the store is redundant, so we can fix this by setting the store action to DontCare. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=964"
  },
  {
    "text": "Let’s check the next Insight. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=971"
  },
  {
    "text": "Combining render passes can help with reducing bandwidth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=974"
  },
  {
    "text": "and here, the insight suggests that I can combine GBuffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=978"
  },
  {
    "text": "and Forward passes into a single pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=982"
  },
  {
    "text": "I can also learn more about what these passes are reading and writing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=987"
  },
  {
    "text": "by clicking the Reveal in Dependencies button on the right ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=992"
  },
  {
    "text": "to find this render pass in the Dependencies viewer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=995"
  },
  {
    "text": "The Dependencies viewer is a great tool to inspect dependencies between passes! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1000"
  },
  {
    "text": "Here, I can see at a glance the load and store actions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1005"
  },
  {
    "text": "shown above and below the render attachments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1010"
  },
  {
    "text": "All the attachments in this pass have store action store, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1014"
  },
  {
    "text": "but only the color 0 and the depth attachment are used in the future pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1017"
  },
  {
    "text": "The previous insight revealed this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1023"
  },
  {
    "text": "Zoom out a little, and the data edges are shown ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1027"
  },
  {
    "text": "flowing from the GBuffer pass to the Forward pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1030"
  },
  {
    "text": "As the insight indicated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1036"
  },
  {
    "text": "the GBuffer and Forward passes can be merged to save bandwidth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1038"
  },
  {
    "text": "as they’re storing and loading from the same attachments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1043"
  },
  {
    "text": "Merging these two passes will save bandwidth and improve performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1047"
  },
  {
    "text": "That was just one example of how you can use Metal Debugger ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1053"
  },
  {
    "text": "to find optimization opportunities in your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1057"
  },
  {
    "text": "To learn more about Metal Debugger, please check out the related sessions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1061"
  },
  {
    "text": "“Gain insights into your Metal app with Xcode 12” ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1066"
  },
  {
    "text": "and \"Discover Metal debugging, profiling, and asset creation tools.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1069"
  },
  {
    "text": "Indirect rendering is an important functionality ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1075"
  },
  {
    "text": "that high-end games use to implement advanced rendering techniques. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1079"
  },
  {
    "text": "This topic will review how ExecuteIndirect works ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1083"
  },
  {
    "text": "and how to translate this particular command to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1087"
  },
  {
    "text": "With indirect rendering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1090"
  },
  {
    "text": "instead of encoding multiple draw commands, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1092"
  },
  {
    "text": "their arguments are stored in a regular buffer in memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1095"
  },
  {
    "text": "and only one ExecuteIndirect command is encoded referencing the buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1100"
  },
  {
    "text": "and specifying how many draw calls the GPU has to execute ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1104"
  },
  {
    "text": "by fetching arguments for each one of them from the buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1108"
  },
  {
    "text": "The main idea of this approach is to be able to populate content ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1113"
  },
  {
    "text": "of the indirect buffer by a compute shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1117"
  },
  {
    "text": "scheduled for execution before the ExecuteIndirect command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1120"
  },
  {
    "text": "This way, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1127"
  },
  {
    "text": "the GPU prepares work for itself and decides what to render. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1128"
  },
  {
    "text": "Execution of commands with indirect arguments is ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1133"
  },
  {
    "text": "a key feature to implement advanced techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1137"
  },
  {
    "text": "such as a GPU-driven rendering loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1140"
  },
  {
    "text": "There are two ways to translate this command to Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1143"
  },
  {
    "text": "by using Draw Indirect and Metal Indirect Command Buffers, or ICBs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1147"
  },
  {
    "text": "In Metal, the renderer has to translate each ExecuteIndirect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1154"
  },
  {
    "text": "to a series of API calls to DrawIndirect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1158"
  },
  {
    "text": "Each one references the buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1163"
  },
  {
    "text": "and provides an offset for the draw arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1165"
  },
  {
    "text": "Here is the code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1170"
  },
  {
    "text": "Look through the maximum number of draw calls this ExecuteIndirect might have. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1172"
  },
  {
    "text": "For each one, encode a separate draw ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1177"
  },
  {
    "text": "specifying the indirect arguments buffer and offset in that buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1181"
  },
  {
    "text": "At the end of iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1186"
  },
  {
    "text": "move the offset to point to the next set of indirect arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1188"
  },
  {
    "text": "This approach is very easy to implement and will work in almost all situations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1193"
  },
  {
    "text": "However, if you have scenes with thousands of draw calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1199"
  },
  {
    "text": "and performance in your game is limited by the CPU encoding time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1202"
  },
  {
    "text": "you should consider Indirect Command Buffers in Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1207"
  },
  {
    "text": "ICBs are a superset of buffers with indirect draw arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1211"
  },
  {
    "text": "In addition to draw arguments, you can also set buffer bindings ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1217"
  },
  {
    "text": "and render Pipeline State Objects from the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1221"
  },
  {
    "text": "To schedule commands from an ICB for execution on the GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1226"
  },
  {
    "text": "you have to encode executeCommandsInBuffer command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1231"
  },
  {
    "text": "Usually with ExecuteIndirect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1237"
  },
  {
    "text": "all draw calls share the same Pipeline State Object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1240"
  },
  {
    "text": "And each time the PSO changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1244"
  },
  {
    "text": "you have to encode a new ExecuteIndirect command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1247"
  },
  {
    "text": "If you are using ICBs, it is not required to split the indirect execution commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1252"
  },
  {
    "text": "by state changes that often. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1258"
  },
  {
    "text": "All PSOs and buffer bindings could be set from the ICB, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1260"
  },
  {
    "text": "so you don’t have to encode them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1266"
  },
  {
    "text": "Depending on the structure of the scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1269"
  },
  {
    "text": "this might significantly reduce the encoding time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1271"
  },
  {
    "text": "To leverage ICBs, it’s not necessary to modify existing shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1275"
  },
  {
    "text": "that populate indirect arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1279"
  },
  {
    "text": "You can share the same shaders with other platforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1284"
  },
  {
    "text": "and compile them with the Metal Shader Converter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1287"
  },
  {
    "text": "then translate draw arguments to ICBs by adding a small compute kernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1291"
  },
  {
    "text": "after indirect argument generation and before the indirect rendering pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1296"
  },
  {
    "text": "To encode the ICB in your compute kernel, write it in the Metal Shading Language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1302"
  },
  {
    "text": "As input to the shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1308"
  },
  {
    "text": "there is a pointer to the indirect arguments you want to translate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1310"
  },
  {
    "text": "Next, check if the arguments are valid, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1315"
  },
  {
    "text": "and only then will you encode the command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1319"
  },
  {
    "text": "In the encodeCommand function, set the render pipeline state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1322"
  },
  {
    "text": "buffer bindings, and the draw call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1327"
  },
  {
    "text": "This translates the draw arguments to a render command ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1331"
  },
  {
    "text": "in the indirect command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1335"
  },
  {
    "text": "And that’s how to translate Indirect rendering to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1338"
  },
  {
    "text": "You can use a series of draw indirect commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1342"
  },
  {
    "text": "or Metal Indirect command buffers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1345"
  },
  {
    "text": "If you want to learn how to use indirect rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1348"
  },
  {
    "text": "to implement advanced rendering techniques, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1352"
  },
  {
    "text": "check out the “Modern Rendering with Metal” Sample Code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1355"
  },
  {
    "text": "Once your game is producing correct images by binding resources to its pipelines ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1359"
  },
  {
    "text": "and properly encoding commands into command buffers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1365"
  },
  {
    "text": "you can leverage upscaling to get more performance out of your players' devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1368"
  },
  {
    "text": "Upscaling via MetalFX helps games save time for each frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1374"
  },
  {
    "text": "by reducing the amount of GPU work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1379"
  },
  {
    "text": "MetalFX is a turnkey solution to implement your upscaling pipeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1382"
  },
  {
    "text": "It works by scaling a lower resolution image ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1386"
  },
  {
    "text": "up to the target output resolution in less time than it takes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1392"
  },
  {
    "text": "to render at the output resolution directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1397"
  },
  {
    "text": "MetalFX was introduced last year for the Mac, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1402"
  },
  {
    "text": "and it offers high performance upscaling! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1406"
  },
  {
    "text": "MetalFX supports two upscaling algorithms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1410"
  },
  {
    "text": "\"Spatial\" for the best performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1414"
  },
  {
    "text": "and \"Temporal\" for quality approaching native rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1417"
  },
  {
    "text": "on the output resolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1421"
  },
  {
    "text": "Integrating MetalFX in the engine will improve the player's experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1424"
  },
  {
    "text": "by rendering in higher resolutions with better performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1430"
  },
  {
    "text": "New features this year include support for iOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1435"
  },
  {
    "text": "up to 3X upscaling, and support in Metal-cpp.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1439"
  },
  {
    "text": "If your engine already supports an existing upscaling solution ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1447"
  },
  {
    "text": "on other platforms, MetalFX integration won’t require much coding ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1451"
  },
  {
    "text": "and modification on the engine side. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1457"
  },
  {
    "text": "To support MetalFX, you need upscaling support in the engine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1461"
  },
  {
    "text": "Another requirement is the renderer to manually control the level of detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1467"
  },
  {
    "text": "for texture sampling in materials shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1472"
  },
  {
    "text": "Temporal upscaling requires jitter sequence and motion vectors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1477"
  },
  {
    "text": "You probably already have those ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1482"
  },
  {
    "text": "if your engine supports temporal anti-aliasing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1484"
  },
  {
    "text": "MetalFX’s temporal upscaling can take rendering’s exposure into account, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1488"
  },
  {
    "text": "and you have two options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1494"
  },
  {
    "text": "If your renderer supports a 1 by 1 exposure texture, then use that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1496"
  },
  {
    "text": "Otherwise, you can enable the autoexposure feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1502"
  },
  {
    "text": "and see if it improves the quality. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1506"
  },
  {
    "text": "Don’t forget to reset the history on camera cuts ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1509"
  },
  {
    "text": "and extreme camera movements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1512"
  },
  {
    "text": "For more details on how to integrate MetalFX in your applications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1517"
  },
  {
    "text": "refer to the Documentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1522"
  },
  {
    "text": "and “Boost performance with MetalFX upscaling” from last year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1524"
  },
  {
    "text": "Metal gives some powerful options ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1529"
  },
  {
    "text": "to make the most of your app's rendering time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1532"
  },
  {
    "text": "You can manage resources and bind them as efficiently as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1536"
  },
  {
    "text": "Based on how your shaders access them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1541"
  },
  {
    "text": "ensure the passes that share resources run in the right order, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1544"
  },
  {
    "text": "and make resources resident and available for the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1548"
  },
  {
    "text": "Your app can leverage the full potential of Apple’s powerful graphics architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1553"
  },
  {
    "text": "by locating and applying optimization opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1559"
  },
  {
    "text": "with Metal Debugger in Xcode and optimizing your command submission. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1563"
  },
  {
    "text": "Let the GPU decide for itself what work to do by implementing indirect rendering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1569"
  },
  {
    "text": "which can be the key for many modern rendering techniques. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1575"
  },
  {
    "text": "Up your rendering game by upscaling your renderings with MetalFX, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1580"
  },
  {
    "text": "which can save your app valuable time in the render loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1584"
  },
  {
    "text": "For more rendering tips and guidelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1588"
  },
  {
    "text": "check out \"Optimize Metal Performance for Apple silicon Macs.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1591"
  },
  {
    "text": "Thank you for watching! ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1595"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10125/?time=1598"
  }
]