[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=0"
  },
  {
    "text": "Ben: Hi, and welcome to \"What's New in Swift 5.9.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=10"
  },
  {
    "text": "I'm Ben, and together with my colleague Doug, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=14"
  },
  {
    "text": "we'll take you through some of the improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=16"
  },
  {
    "text": "to the Swift language this year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=17"
  },
  {
    "text": "We'll talk about some ways it's easier to express what you mean ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=19"
  },
  {
    "text": "using Swift's clean syntax, some powerful new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=23"
  },
  {
    "text": "that help framework authors make their new APIs more natural to use, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=27"
  },
  {
    "text": "and we'll look at some new ways to get more control over performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=32"
  },
  {
    "text": "and safety in low-level code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=36"
  },
  {
    "text": "But let's start by talking about the Swift open source project. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=40"
  },
  {
    "text": "This is a great update for Swift, and it couldn't have happened ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=44"
  },
  {
    "text": "without the Swift community, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=47"
  },
  {
    "text": "the contributors and users of the language ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=49"
  },
  {
    "text": "who gather at swift.org, working together to evolve the language ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=52"
  },
  {
    "text": "and support new initiatives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=56"
  },
  {
    "text": "Swift follows an open process for language evolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=59"
  },
  {
    "text": "New features or significant behavior changes are proposed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=62"
  },
  {
    "text": "and reviewed in the open on the Swift forums. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=66"
  },
  {
    "text": "If you want to follow along, you can find a dashboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=69"
  },
  {
    "text": "of all the language proposals on the Swift website.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=72"
  },
  {
    "text": "A year ago, we saw a significant restructuring ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=76"
  },
  {
    "text": "of the Swift Project governance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=78"
  },
  {
    "text": "The core team announced the formation of the Language Steering Group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=80"
  },
  {
    "text": "which took on primary responsibility for oversight of the Swift language ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=84"
  },
  {
    "text": "and standard library evolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=88"
  },
  {
    "text": "Since then, the language group has overseen ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=90"
  },
  {
    "text": "40 new language proposals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=92"
  },
  {
    "text": "and we're going to talk about several of them today.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=94"
  },
  {
    "text": "But sometimes, individual language proposals ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=98"
  },
  {
    "text": "come together as part of a wider theme, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=101"
  },
  {
    "text": "like the addition of Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=103"
  },
  {
    "text": "which was introduced through ten separate proposals.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=106"
  },
  {
    "text": "For cases like this, the language steering group ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=110"
  },
  {
    "text": "has introduced a new way of tying together these proposals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=112"
  },
  {
    "text": "through vision documents. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=115"
  },
  {
    "text": "These documents lay out a proposal for larger changes to the language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=117"
  },
  {
    "text": "The first one to be accepted by the language steering group ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=122"
  },
  {
    "text": "was a vision of Swift macros, a new feature in Swift 5.9 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=125"
  },
  {
    "text": "that we'll be covering later in this talk.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=129"
  },
  {
    "text": "Of course, evolution of the language is only part ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=133"
  },
  {
    "text": "of the work of the Swift community. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=135"
  },
  {
    "text": "A successful language needs much more than this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=137"
  },
  {
    "text": "It needs great tooling, robust support for multiple platforms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=140"
  },
  {
    "text": "and rich documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=144"
  },
  {
    "text": "To oversee progress in this area, the core team is creating ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=147"
  },
  {
    "text": "an ecosystem steering group parallel to the language steering group. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=150"
  },
  {
    "text": "This new structure was recently laid out in a blog post on Swift.org, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=155"
  },
  {
    "text": "a look out for further announcements ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=159"
  },
  {
    "text": "about the formation of this new group soon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=161"
  },
  {
    "text": "Now let's talk about changes to the Swift language this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=164"
  },
  {
    "text": "starting with better ways to express yourself in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=168"
  },
  {
    "text": "Swift 5.9 includes what ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=172"
  },
  {
    "text": "is probably our most commonly requested language enhancement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=174"
  },
  {
    "text": "allowing if/else and switch statements to be used as expressions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=178"
  },
  {
    "text": "providing a nice way to clean up your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=182"
  },
  {
    "text": "For example, if you wanted to initialize a let variable ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=187"
  },
  {
    "text": "based on some complex condition, you had to resort to tricks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=191"
  },
  {
    "text": "like this hard-to-read compound ternary expression.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=194"
  },
  {
    "text": "If expressions let you instead use a much more familiar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=199"
  },
  {
    "text": "and readable chain of if statements.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=203"
  },
  {
    "text": "Another place where this helps ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=207"
  },
  {
    "text": "is if you're initializing a global variable or a stored property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=208"
  },
  {
    "text": "Single expressions work fine here, but if you wanted a condition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=213"
  },
  {
    "text": "you had to use the trick of wrapping it in a closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=217"
  },
  {
    "text": "that you then immediately executed.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=220"
  },
  {
    "text": "Now that an if statement can be an expression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=223"
  },
  {
    "text": "you can just drop that clutter, leaving you with neater code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=226"
  },
  {
    "text": "Result builders, the declarative syntax that drives features like SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=231"
  },
  {
    "text": "have seen significant improvements this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=236"
  },
  {
    "text": "including optimized type checking performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=239"
  },
  {
    "text": "code completion, and improved error messages.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=242"
  },
  {
    "text": "This improvement was particularly focused on invalid code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=246"
  },
  {
    "text": "Previously, result builder code with errors would take a long time to fail, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=251"
  },
  {
    "text": "as the type checker explored the many possible invalid paths.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=256"
  },
  {
    "text": "As of Swift 5.8, invalid code type checks much faster, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=261"
  },
  {
    "text": "and error messages on invalid code are now more precise. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=266"
  },
  {
    "text": "For example, previously, some invalid code could lead ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=271"
  },
  {
    "text": "to misleading errors in a completely different part of the result builder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=274"
  },
  {
    "text": "In Swift 5.7, you'd receive an error like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=279"
  },
  {
    "text": "when the mistake actually lies up here.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=282"
  },
  {
    "text": "In the latest release, you now receive ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=286"
  },
  {
    "text": "a more accurate compiler diagnostic identifying the real issue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=288"
  },
  {
    "text": "Next, let's talk about how an addition to the generics system ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=293"
  },
  {
    "text": "will allow for some great improvements to frameworks you use every day.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=297"
  },
  {
    "text": "Almost all the Swift you write is using generics in some way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=302"
  },
  {
    "text": "Type inference enables using these types without needing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=306"
  },
  {
    "text": "to understand the advanced capabilities they're built with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=310"
  },
  {
    "text": "For example, the standard library Array type uses generics ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=313"
  },
  {
    "text": "to provide an array that works with any type of data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=317"
  },
  {
    "text": "that you might want to store. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=320"
  },
  {
    "text": "When you use an array, all you need to do is provide the elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=322"
  },
  {
    "text": "There's no need to specify an explicit argument for the element type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=327"
  },
  {
    "text": "because it can be inferred from the element values.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=331"
  },
  {
    "text": "Swift's generics system enables natural APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=336"
  },
  {
    "text": "that preserve type information ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=339"
  },
  {
    "text": "so that your code operates seamlessly on the concrete types that you provide.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=341"
  },
  {
    "text": "Here's an example inspired by the Swift compiler's own codebase: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=347"
  },
  {
    "text": "An API that takes a request type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=351"
  },
  {
    "text": "and evaluates it to produce a strongly typed value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=353"
  },
  {
    "text": "So you can make a request for a Boolean value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=357"
  },
  {
    "text": "and get back a Boolean result.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=359"
  },
  {
    "text": "Now, some APIs want to abstract not only over concrete types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=363"
  },
  {
    "text": "but also the number of arguments that you pass in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=368"
  },
  {
    "text": "So a function might take one request and return one result ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=372"
  },
  {
    "text": "or two requests and return two results, or three and return three results.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=377"
  },
  {
    "text": "To support this, the generics system has to be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=382"
  },
  {
    "text": "together with a mechanism to handle multiple argument lengths ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=385"
  },
  {
    "text": "so that all of the types that you pass in are linked to the types that you get out.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=389"
  },
  {
    "text": "Before Swift 5.9, the only way to accomplish this pattern ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=394"
  },
  {
    "text": "was by adding an overload for each specific argument length ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=398"
  },
  {
    "text": "the API supported. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=402"
  },
  {
    "text": "But this approach has limitations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=404"
  },
  {
    "text": "It forces an artificial upper bound ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=407"
  },
  {
    "text": "on the number of arguments you can pass, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=409"
  },
  {
    "text": "resulting in compiler errors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=411"
  },
  {
    "text": "if you pass too many.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=413"
  },
  {
    "text": "In this case, there isn't an overload that can handle ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=416"
  },
  {
    "text": "more than six arguments, but we've passed seven.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=418"
  },
  {
    "text": "This overloading pattern and its limitations are pervasive ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=422"
  },
  {
    "text": "across APIs that conceptually handle arbitrary argument length.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=426"
  },
  {
    "text": "In Swift 5.9, the generics system is gaining first-class support ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=432"
  },
  {
    "text": "for this API pattern by enabling generic abstraction over argument length. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=437"
  },
  {
    "text": "This is done with a new language concept ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=443"
  },
  {
    "text": "that can represent multiple individual type parameters ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=445"
  },
  {
    "text": "that are \"packed\" together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=448"
  },
  {
    "text": "This new concept is called a type parameter pack.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=450"
  },
  {
    "text": "Using parameter packs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=455"
  },
  {
    "text": "APIs that currently have individual overloads ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=457"
  },
  {
    "text": "for each fixed argument length ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=460"
  },
  {
    "text": "can be collapsed down into a single function.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=462"
  },
  {
    "text": "Instead of accepting a single type parameter, Result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=469"
  },
  {
    "text": "representing the result type of a single request, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=473"
  },
  {
    "text": "the evaluate function now accepts a separate request over each Result type.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=476"
  },
  {
    "text": "The function returns each result instance in parenthesis, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=483"
  },
  {
    "text": "which will either be a single value or a tuple containing each value.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=486"
  },
  {
    "text": "The evaluate function now handles all argument lengths with no artificial limit.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=493"
  },
  {
    "text": "Type inference makes APIs using parameter packs natural to use ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=501"
  },
  {
    "text": "without needing to know that the API is using them.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=505"
  },
  {
    "text": "Calling our new evaluate function ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=511"
  },
  {
    "text": "that can now handle any number of arguments, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=513"
  },
  {
    "text": "looks just like calling the fixed-length overloads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=515"
  },
  {
    "text": "Swift infers the type of each argument along with the total number ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=519"
  },
  {
    "text": "based on how you're calling the function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=524"
  },
  {
    "text": "To learn about how to write generic library APIs like these, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=527"
  },
  {
    "text": "check out Generalize APIs using parameter packs.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=530"
  },
  {
    "text": "Calling generic APIs in a natural way demonstrates one ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=535"
  },
  {
    "text": "of Swift's fundamental design goals, clear expression through concise code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=539"
  },
  {
    "text": "Swift's advanced language features enable beautiful APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=546"
  },
  {
    "text": "that make it easier to say what you mean.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=550"
  },
  {
    "text": "You benefit from these advanced language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=554"
  },
  {
    "text": "from the very first lines of Swift that you ever write, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=556"
  },
  {
    "text": "whether it's using generics through arrays or dictionaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=559"
  },
  {
    "text": "or designing a UI in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=563"
  },
  {
    "text": "Swift's embrace of progressive disclosure means that you can learn ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=566"
  },
  {
    "text": "about the more advanced features when you're ready to.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=570"
  },
  {
    "text": "Swift 5.9 takes this design approach to the next level ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=575"
  },
  {
    "text": "by providing library authors with a new toolbox ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=579"
  },
  {
    "text": "for expressive API design using a new macro system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=583"
  },
  {
    "text": "Here's Doug to tell you more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=587"
  },
  {
    "text": "Doug: With macros, you can extend the capabilities of the language itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=590"
  },
  {
    "text": "eliminating boilerplate and unlocking more of Swift's expressive power. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=594"
  },
  {
    "text": "Let's consider the ever-present assert function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=599"
  },
  {
    "text": "which checks whether a condition is true. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=602"
  },
  {
    "text": "Assert will stop the program if the condition is false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=605"
  },
  {
    "text": "but when that happens, you get very little information ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=607"
  },
  {
    "text": "about what went wrong, just the file and line number. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=610"
  },
  {
    "text": "You'll need to add some logging or trap the program in the debugger to learn more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=614"
  },
  {
    "text": "There have been attempts to improve on this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=618"
  },
  {
    "text": "XCTest provides an assert-equal operation that takes the two values separately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=621"
  },
  {
    "text": "so when things fail, you can at least see the two values that aren't equal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=626"
  },
  {
    "text": "But we still don't know which value is wrong here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=629"
  },
  {
    "text": "Was it a, b, or the result of max? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=632"
  },
  {
    "text": "And this approach really doesn't scale for all of the kinds of checks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=635"
  },
  {
    "text": "we perform in asserts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=638"
  },
  {
    "text": "If we go back to the original assertion, there is so much information here ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=640"
  },
  {
    "text": "in the source code that we'd like to see in the log when our assertion fails. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=644"
  },
  {
    "text": "What was the code? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=648"
  },
  {
    "text": "What are the values of a, and b, and c? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=650"
  },
  {
    "text": "What did max produce? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=653"
  },
  {
    "text": "We couldn't improve this in Swift before without some custom feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=655"
  },
  {
    "text": "but macros make it possible.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=659"
  },
  {
    "text": "In this example, the \"hash-assert\" syntax is expanding the macro called \"assert.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=662"
  },
  {
    "text": "The hash syntax might look familiar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=668"
  },
  {
    "text": "because Swift already has a few things with this same spelling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=670"
  },
  {
    "text": "like hash-file, hash-selector, and hash-warning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=673"
  },
  {
    "text": "The assert macro looks and feels like the function version, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=677"
  },
  {
    "text": "but because it's a macro, it can provide a richer experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=681"
  },
  {
    "text": "when the assertion fails.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=684"
  },
  {
    "text": "Now the program is showing the code for the failing assertion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=687"
  },
  {
    "text": "along with each of the values that contributed to the result.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=690"
  },
  {
    "text": "In Swift, macros are APIs, just like types or functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=695"
  },
  {
    "text": "so you access them by importing the module that defines them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=700"
  },
  {
    "text": "Like many other APIs, macros are distributed as packages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=704"
  },
  {
    "text": "The assert macro here comes from the power asserts library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=709"
  },
  {
    "text": "an open-source Swift package available on GitHub.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=713"
  },
  {
    "text": "If you were to look into the macro package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=718"
  },
  {
    "text": "you would find a macro declaration for assert. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=721"
  },
  {
    "text": "It is introduced with the \"macro\" keyword, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=724"
  },
  {
    "text": "but otherwise, it looks a lot like a function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=727"
  },
  {
    "text": "There's a single unlabeled Bool parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=730"
  },
  {
    "text": "for the condition to be checked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=733"
  },
  {
    "text": "If this macro produced a value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=734"
  },
  {
    "text": "that result type would be written ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=736"
  },
  {
    "text": "with the usual arrow syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=738"
  },
  {
    "text": "Uses of the macro will be type checked ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=741"
  },
  {
    "text": "against the parameters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=744"
  },
  {
    "text": "That means, if you were to make a mistake ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=745"
  },
  {
    "text": "in using the macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=747"
  },
  {
    "text": "such as forgetting to compare ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=749"
  },
  {
    "text": "the maximum value against something, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=751"
  },
  {
    "text": "you'll get a useful error message ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=753"
  },
  {
    "text": "immediately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=755"
  },
  {
    "text": "before the macro is ever expanded. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=756"
  },
  {
    "text": "This allows Swift to provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=759"
  },
  {
    "text": "a great development experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=761"
  },
  {
    "text": "when using macros because macros operate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=762"
  },
  {
    "text": "on well-typed inputs and produce code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=765"
  },
  {
    "text": "that augments your program ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=767"
  },
  {
    "text": "in predictable ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=769"
  },
  {
    "text": "Most macros are defined ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=771"
  },
  {
    "text": "as \"external macros,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=773"
  },
  {
    "text": "specifying the module and type for a macro implementation via strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=775"
  },
  {
    "text": "The external macro types are defined in separate programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=781"
  },
  {
    "text": "that act as compiler plugins. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=784"
  },
  {
    "text": "The Swift compiler passes the source code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=788"
  },
  {
    "text": "for the use of the macro to the plugin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=790"
  },
  {
    "text": "The plugin produces new source code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=793"
  },
  {
    "text": "which is then integrated back into the Swift program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=795"
  },
  {
    "text": "Here, the macro is expanding the assertion into code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=799"
  },
  {
    "text": "that captures the individual values ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=802"
  },
  {
    "text": "and where they should be displayed in the source code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=804"
  },
  {
    "text": "You wouldn't want to write the boilerplate yourself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=807"
  },
  {
    "text": "but the macro does it for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=810"
  },
  {
    "text": "Macro declarations have one additional piece of information, their role. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=812"
  },
  {
    "text": "The assert macro here is a freestanding expression macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=817"
  },
  {
    "text": "It is called freestanding because it uses the \"hash\" syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=821"
  },
  {
    "text": "and operates directly on that syntax to produce new code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=825"
  },
  {
    "text": "It is an expression macro because it can be used anywhere ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=828"
  },
  {
    "text": "that one can produce a value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=831"
  },
  {
    "text": "The new Foundation Predicate APIs provide a great example of an expression macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=833"
  },
  {
    "text": "The predicate macro allows one to write predicates ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=839"
  },
  {
    "text": "in a type-safe manner using closures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=841"
  },
  {
    "text": "The resulting predicate values can then be used with a number of other APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=844"
  },
  {
    "text": "including the Swift collection operations SwiftUI and SwiftData.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=848"
  },
  {
    "text": "The macro itself is generic ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=854"
  },
  {
    "text": "over the set of input types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=856"
  },
  {
    "text": "It accepts a closure argument ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=859"
  },
  {
    "text": "that's a function operating on values ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=861"
  },
  {
    "text": "of those input types and produces ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=862"
  },
  {
    "text": "a Boolean result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=864"
  },
  {
    "text": "does the set of inputs match or not? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=866"
  },
  {
    "text": "And the macro returns an instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=869"
  },
  {
    "text": "of the new Predicate type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=871"
  },
  {
    "text": "which can be used elsewhere ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=873"
  },
  {
    "text": "in the program.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=874"
  },
  {
    "text": "But there is more to macros because a lot of the boilerplate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=876"
  },
  {
    "text": "we end up writing is because we need to augment code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=879"
  },
  {
    "text": "we have written with something else derived from it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=882"
  },
  {
    "text": "Let's take an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=886"
  },
  {
    "text": "I find that I use enums a lot in my own code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=887"
  },
  {
    "text": "like this Path enum that captures either relative or absolute paths. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=890"
  },
  {
    "text": "But I'll often find myself needing to check for a specific case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=895"
  },
  {
    "text": "say, by filtering all absolute paths from a collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=898"
  },
  {
    "text": "I can write this isAbsolute check as a computed property, of course. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=902"
  },
  {
    "text": "But sooner or later, I'm going to have to write another one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=906"
  },
  {
    "text": "This is getting a bit tedious.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=910"
  },
  {
    "text": "Macros can help here by generating the boilerplate for us.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=914"
  },
  {
    "text": "Case detection is an attached macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=919"
  },
  {
    "text": "written using the same custom-attribute syntax as property wrappers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=922"
  },
  {
    "text": "Attached macros take as input the syntax of the declaration they apply to-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=926"
  },
  {
    "text": "here it's the enum declaration itself-- and will generate new code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=931"
  },
  {
    "text": "This macro-expanded code is normal Swift code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=938"
  },
  {
    "text": "which the compiler integrates into your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=941"
  },
  {
    "text": "You can inspect the macro-generated code in your editor, debug into it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=944"
  },
  {
    "text": "copy it out if you want to customize it further, and so on.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=948"
  },
  {
    "text": "Attached macros are classified into five different roles ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=953"
  },
  {
    "text": "based on how they augment the declaration they are attached to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=957"
  },
  {
    "text": "The case detection macro we just discussed is a \"member\" attached macro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=961"
  },
  {
    "text": "meaning that it creates new members in a type or extension.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=966"
  },
  {
    "text": "Peer macros add new declarations alongside the declaration they're attached to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=971"
  },
  {
    "text": "for example, to create a completion-handler version ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=976"
  },
  {
    "text": "of an async method or vice-versa.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=979"
  },
  {
    "text": "Accessor macros can turn a stored property into a computed property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=983"
  },
  {
    "text": "which can be used to perform specific actions on property access ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=988"
  },
  {
    "text": "or abstract the actual storage in a manner similar to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=992"
  },
  {
    "text": "but more flexible than property wrappers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=995"
  },
  {
    "text": "And attached macros can introduce attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=998"
  },
  {
    "text": "onto specific members of a type, as well as add new protocol conformances.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1001"
  },
  {
    "text": "Several attached macro roles can be composed together ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1007"
  },
  {
    "text": "to achieve useful effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1010"
  },
  {
    "text": "One important example of this is with observation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1012"
  },
  {
    "text": "Observation has always been a part of SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1017"
  },
  {
    "text": "To be able to observe changes to the properties of a class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1020"
  },
  {
    "text": "one need only make the type conform to ObservableObject, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1023"
  },
  {
    "text": "and mark every property at-Published, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1028"
  },
  {
    "text": "and use the ObservedObject property wrapper in your view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1032"
  },
  {
    "text": "That's a bunch of steps, and missing a step can mean ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1036"
  },
  {
    "text": "that the UI doesn't update as expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1039"
  },
  {
    "text": "We can do better with macro-based observation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1042"
  },
  {
    "text": "Attaching the Observable macro to a class provides observation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1047"
  },
  {
    "text": "for all of its stored properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1051"
  },
  {
    "text": "There is no need to annotate each stored property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1053"
  },
  {
    "text": "or worry about what happens if you don't ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1056"
  },
  {
    "text": "because the Observable macro handles it all.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1058"
  },
  {
    "text": "The Observable macro works through composition of three macro roles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1062"
  },
  {
    "text": "Let's dive into how these roles work together.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1068"
  },
  {
    "text": "Each macro role corresponds to a specific way ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1072"
  },
  {
    "text": "in which the Person class is augmented by the Observable macro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1075"
  },
  {
    "text": "The member role introduces new properties and methods.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1080"
  },
  {
    "text": "The member attribute role will add the @ObservationTracked macro ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1085"
  },
  {
    "text": "to the stored properties of the observed class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1090"
  },
  {
    "text": "which in turn expands to getters and setters to trigger observation events. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1093"
  },
  {
    "text": "Finally, the conformance role introduces the conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1098"
  },
  {
    "text": "to the Observable protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1102"
  },
  {
    "text": "This may look like a lot of code, but it's all just normal Swift code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1105"
  },
  {
    "text": "and it's neatly folded away behind the Observable macro.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1109"
  },
  {
    "text": "Whenever you need to see how any macro expands ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1114"
  },
  {
    "text": "to better understand its effect on your program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1117"
  },
  {
    "text": "it's right there at your fingertips in Xcode.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1121"
  },
  {
    "text": "Use the \"Expand Macro\" action ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1125"
  },
  {
    "text": "to see the macro-expanded source code in your editor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1127"
  },
  {
    "text": "Any error messages within macro-generated code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1131"
  },
  {
    "text": "will automatically show the expanded code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1133"
  },
  {
    "text": "and you can step into and out of it with your debugger.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1136"
  },
  {
    "text": "Swift macros provide a new tool for enabling more expressive APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1140"
  },
  {
    "text": "and eliminating boilerplate from your Swift code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1145"
  },
  {
    "text": "helping unlock Swift's expressive power. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1148"
  },
  {
    "text": "Macros type-check their inputs, produce normal Swift code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1151"
  },
  {
    "text": "and integrate at defined points in your program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1155"
  },
  {
    "text": "so their effects are easy to reason about. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1158"
  },
  {
    "text": "And any time you need to understand what a macro did, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1160"
  },
  {
    "text": "its expanded source code is right there in your editor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1164"
  },
  {
    "text": "We've just scratched the surface of macros. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1167"
  },
  {
    "text": "\"Expand on Swift macros\" will go deep into the design of Swift macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1170"
  },
  {
    "text": "to answer all of those questions you must have. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1174"
  },
  {
    "text": "And you can get hands-on implementing your own macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1177"
  },
  {
    "text": "with \"Write Swift macros.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1180"
  },
  {
    "text": "I can't wait to see what new macros the Swift community will build.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1182"
  },
  {
    "text": "Ben: From the start, Swift was designed to be a scalable language.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1186"
  },
  {
    "text": "Swift's design emphasizes expressivity with clear and concise code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1192"
  },
  {
    "text": "that is low on ceremony and easy to read and write. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1197"
  },
  {
    "text": "By leveraging Swift's powerful features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1202"
  },
  {
    "text": "like generics and native concurrency support, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1204"
  },
  {
    "text": "frameworks like SwiftUI or SwiftData ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1207"
  },
  {
    "text": "let you quickly achieve the results you want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1210"
  },
  {
    "text": "leaving you more time to focus on what matters.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1213"
  },
  {
    "text": "Despite these high-level capabilities though, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1217"
  },
  {
    "text": "Swift is also efficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1220"
  },
  {
    "text": "It compiles natively, and its use of value types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1223"
  },
  {
    "text": "and of reference counting instead of garbage collection means ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1227"
  },
  {
    "text": "it's able to achieve a low memory footprint.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1229"
  },
  {
    "text": "This scalability means we're able to push Swift to more places ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1234"
  },
  {
    "text": "than was previously possible with Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1238"
  },
  {
    "text": "to low-level systems, where previously you might expect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1241"
  },
  {
    "text": "to have to use C or C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1245"
  },
  {
    "text": "This means bringing Swift's clearer code and critical safety guarantees ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1249"
  },
  {
    "text": "to more places. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1254"
  },
  {
    "text": "We recently open sourced the start of a rewrite ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1256"
  },
  {
    "text": "of the Foundation framework in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1259"
  },
  {
    "text": "This initiative will lead to a single shared implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1262"
  },
  {
    "text": "of Foundation on both Apple and non-Apple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1265"
  },
  {
    "text": "But it also meant rewriting large amounts of Objective-C and C code in Swift.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1270"
  },
  {
    "text": "As of MacOS Sonoma and iOS 17, there are new Swift-backed implementations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1276"
  },
  {
    "text": "of essential types like Date and Calendar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1282"
  },
  {
    "text": "of formatting and internationalization essentials ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1285"
  },
  {
    "text": "like Locale and AttributedString, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1287"
  },
  {
    "text": "and a new Swift implementation of JSON encoding and decoding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1290"
  },
  {
    "text": "And the performance wins have been significant.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1295"
  },
  {
    "text": "Calendar's ability to calculate important dates can take better advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1299"
  },
  {
    "text": "of Swift's value semantics to avoid intermediate allocations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1304"
  },
  {
    "text": "resulting in over a 20% improvement in some benchmarks.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1308"
  },
  {
    "text": "Date formatting using FormatStyle also gained ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1313"
  },
  {
    "text": "some major performance upgrades, showing a massive 150% improvement ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1316"
  },
  {
    "text": "in a benchmark of formatting with a standard date and time template.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1320"
  },
  {
    "text": "Even more exciting are the improvements to JSON decoding in the new package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1325"
  },
  {
    "text": "Foundation has a brand-new Swift implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1331"
  },
  {
    "text": "for JSONDecoder and JSONEncoder, eliminating costly roundtrips ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1333"
  },
  {
    "text": "to and from the Objective-C collection types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1338"
  },
  {
    "text": "The tight integration of parsing JSON in Swift for initializing Codable types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1341"
  },
  {
    "text": "improves performance too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1346"
  },
  {
    "text": "In benchmarks parsing test data, the new implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1349"
  },
  {
    "text": "is between two and five times faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1353"
  },
  {
    "text": "These improvements came from both reducing the bridging cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1356"
  },
  {
    "text": "from the old Objective-C implementation to Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1360"
  },
  {
    "text": "but also by the new Swift-based implementations being faster.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1363"
  },
  {
    "text": "Let's look at one benchmark as an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1368"
  },
  {
    "text": "In Ventura, calling enumerateDates from Objective-C was slightly faster ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1371"
  },
  {
    "text": "than calling it from Swift because of bridging costs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1375"
  },
  {
    "text": "In MacOS Sonoma, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1379"
  },
  {
    "text": "calling that same functionality from Swift is 20% faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1381"
  },
  {
    "text": "Some of that speed up comes from eliminating bridging costs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1385"
  },
  {
    "text": "but the new function implementation itself is also faster, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1388"
  },
  {
    "text": "as seen when calling it from Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1393"
  },
  {
    "text": "This particular date calculation is not overly complex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1396"
  },
  {
    "text": "so this is a great way of seeing the reduction ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1399"
  },
  {
    "text": "in overhead between the two languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1401"
  },
  {
    "text": "Now, sometimes, when you're operating at lower levels ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1405"
  },
  {
    "text": "of the system, you need more fine-grained control ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1408"
  },
  {
    "text": "to achieve a necessary level of performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1411"
  },
  {
    "text": "Swift 5.9 introduces some new opt-in capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1415"
  },
  {
    "text": "that help you achieve this level of control. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1419"
  },
  {
    "text": "These capabilities focus on the concept of ownership, that is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1423"
  },
  {
    "text": "what part of the code \"owns\" a value as it passes around your application.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1427"
  },
  {
    "text": "To see when you might want to use these features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1433"
  },
  {
    "text": "let's first look at some example code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1436"
  },
  {
    "text": "Here we have a very simple wrapper for a file descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1439"
  },
  {
    "text": "that would allow us to give low-level system calls a nicer Swift interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1443"
  },
  {
    "text": "But there’s still some easy ways to make mistakes with this API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1448"
  },
  {
    "text": "For example, you might try to write to the file after you’ve called close. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1452"
  },
  {
    "text": "And you have to be careful to always close it manually ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1457"
  },
  {
    "text": "by calling the close method before the type goes out of scope. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1460"
  },
  {
    "text": "Otherwise, you would get a resource leak.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1464"
  },
  {
    "text": "One solution would be to make it a class ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1467"
  },
  {
    "text": "with a deinit that closes it automatically when the type goes out of scope.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1469"
  },
  {
    "text": "But that has different downsides, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1475"
  },
  {
    "text": "like making an additional memory allocation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1477"
  },
  {
    "text": "which is usually not a big problem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1480"
  },
  {
    "text": "except in some very constrained systems contexts.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1483"
  },
  {
    "text": "Classes also have reference semantics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1488"
  },
  {
    "text": "You might unintentionally end up sharing a file descriptor type across threads, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1491"
  },
  {
    "text": "leading to race conditions, or store it unintentionally.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1495"
  },
  {
    "text": "But let's go back and look at the struct version.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1500"
  },
  {
    "text": "Really, this struct also behaves like a reference type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1504"
  },
  {
    "text": "It holds an integer that references the true value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1509"
  },
  {
    "text": "which is an open file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1512"
  },
  {
    "text": "Making a copy of this type could also lead to unintentional sharing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1515"
  },
  {
    "text": "of mutable state across your app in ways that could lead to bugs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1518"
  },
  {
    "text": "What you want is to suppress the ability to make a copy of this struct.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1522"
  },
  {
    "text": "Swift types, whether structs or classes, are copyable by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1529"
  },
  {
    "text": "This is the right choice most of the time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1534"
  },
  {
    "text": "While excessive unnecessary copies can sometimes be a bottleneck in your code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1537"
  },
  {
    "text": "it's better to spend the time finding those bottlenecks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1542"
  },
  {
    "text": "in instruments occasionally than to be constantly bothered ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1544"
  },
  {
    "text": "by the compiler requiring you to be explicit about those copies.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1547"
  },
  {
    "text": "But sometimes that implicit copy isn't what you want--in particular, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1551"
  },
  {
    "text": "when making copies of a value might lead to correctness issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1556"
  },
  {
    "text": "like with our file descriptor wrapper. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1560"
  },
  {
    "text": "In Swift 5.9, you can do that with this new syntax that can be applied ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1563"
  },
  {
    "text": "to struct and enum declarations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1569"
  },
  {
    "text": "and that suppresses the implicit ability to copy a type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1571"
  },
  {
    "text": "Once a type is non-copyable, you can give it a deinit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1575"
  },
  {
    "text": "like you can a class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1579"
  },
  {
    "text": "that will run when a value of the type goes out of scope.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1581"
  },
  {
    "text": "Non-copyable types can also be used to solve the problem of calling close, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1586"
  },
  {
    "text": "and then using other methods.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1591"
  },
  {
    "text": "The close operation can be marked as consuming. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1595"
  },
  {
    "text": "Calling a consuming method or argument gives up ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1599"
  },
  {
    "text": "of a value to the method you called. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1603"
  },
  {
    "text": "Since our type is not copyable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1606"
  },
  {
    "text": "giving up ownership means you can no longer use the value.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1608"
  },
  {
    "text": "By default, methods in Swift borrow their arguments, including self. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1613"
  },
  {
    "text": "So you can call the write method, which borrows the file descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1619"
  },
  {
    "text": "uses it to write out to the buffer, and after that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1623"
  },
  {
    "text": "ownership of the value returns to the caller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1626"
  },
  {
    "text": "and you can call another method, like close.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1628"
  },
  {
    "text": "But since close has been marked as consuming, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1632"
  },
  {
    "text": "not the default of borrowing, it must be its final use.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1635"
  },
  {
    "text": "This means, if you close the file first and then attempt to call another method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1641"
  },
  {
    "text": "like write, you'll get an error message at compile time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1646"
  },
  {
    "text": "rather than a runtime failure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1650"
  },
  {
    "text": "The compiler will also indicate where the consuming use occurred.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1652"
  },
  {
    "text": "Non-copyable types are a powerful new feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1657"
  },
  {
    "text": "for systems level programming in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1660"
  },
  {
    "text": "They're still at an early point in their evolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1663"
  },
  {
    "text": "Later versions of Swift will expand on non-copyable types in generic code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1666"
  },
  {
    "text": "If you're interested in following along with this work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1672"
  },
  {
    "text": "it's being actively discussed on the Swift forums. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1674"
  },
  {
    "text": "Doug: A key to Swift's success has been its interoperability with Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1678"
  },
  {
    "text": "From the start, developers have been able ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1683"
  },
  {
    "text": "to take incremental steps towards Swift adoption in their existing code bases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1685"
  },
  {
    "text": "mixing in Swift a single file or module at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1690"
  },
  {
    "text": "But we know a lot of you don't just have code written in Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1694"
  },
  {
    "text": "Many apps also have core business logic implemented in C++, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1698"
  },
  {
    "text": "and interfacing to that has not been so easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1701"
  },
  {
    "text": "Often it meant adding an extra manual bridging layer, going from Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1705"
  },
  {
    "text": "through Objective-C, and then into C++, and all the way back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1709"
  },
  {
    "text": "Swift 5.9 introduces the ability to interact with C++ types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1714"
  },
  {
    "text": "and functions directly from Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1718"
  },
  {
    "text": "C++ interoperability works just like Objective-C interoperability always has, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1720"
  },
  {
    "text": "mapping C++ APIs into their Swift equivalents ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1726"
  },
  {
    "text": "that you can use directly from Swift code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1729"
  },
  {
    "text": "C++ is a large language with its own notions of ideas ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1733"
  },
  {
    "text": "like classes, methods, containers, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1737"
  },
  {
    "text": "The Swift compiler understands common C++ idioms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1741"
  },
  {
    "text": "so many types can be used directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1744"
  },
  {
    "text": "For example, this Person type defines the five special member functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1747"
  },
  {
    "text": "expected of a C++ value type: Copy and move constructors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1752"
  },
  {
    "text": "assignment operators, and a destructor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1756"
  },
  {
    "text": "The Swift compiler treats this as a value type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1759"
  },
  {
    "text": "and will automatically call the right special member function at the right time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1762"
  },
  {
    "text": "Additionally, C++ containers like vectors and maps ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1766"
  },
  {
    "text": "are accessible as Swift collections.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1771"
  },
  {
    "text": "The result of all of this is that we can write straightforward Swift code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1774"
  },
  {
    "text": "that makes direct use of C++ functions and types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1778"
  },
  {
    "text": "We can filter over the vector of Person instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1782"
  },
  {
    "text": "calling C++ member functions and accessing data members directly.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1785"
  },
  {
    "text": "In the other direction, using Swift code from C++ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1791"
  },
  {
    "text": "is based on the same mechanism as with Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1795"
  },
  {
    "text": "The Swift compiler will produce a \"generated header\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1799"
  },
  {
    "text": "that contains a C++ view on the Swift APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1802"
  },
  {
    "text": "However, unlike with Objective-C, you don't need to restrict yourself ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1806"
  },
  {
    "text": "to only using Swift classes annotated with the objc attribute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1811"
  },
  {
    "text": "C++ can directly use most Swift types and their full APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1815"
  },
  {
    "text": "including properties, methods, and initializers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1820"
  },
  {
    "text": "without any bridging overhead.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1823"
  },
  {
    "text": "Here we can see how C++ can make use of our Point struct. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1826"
  },
  {
    "text": "After including the generated header, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1830"
  },
  {
    "text": "C++ can call Swift initializers to create Point instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1832"
  },
  {
    "text": "invoke mutating methods, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1836"
  },
  {
    "text": "and access both stored and computed properties, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1838"
  },
  {
    "text": "all without any change to the Swift code itself.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1841"
  },
  {
    "text": "Swift's C++ interoperability makes it easier than ever ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1845"
  },
  {
    "text": "to integrate Swift with existing C++ code bases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1849"
  },
  {
    "text": "Many C++ idioms can be directly expressed in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1853"
  },
  {
    "text": "often automatically, but occasionally requiring some annotations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1857"
  },
  {
    "text": "to indicate the desired semantics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1861"
  },
  {
    "text": "And Swift APIs can be directly accessed from C++, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1863"
  },
  {
    "text": "no annotation or code changes required, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1867"
  },
  {
    "text": "making it possible to incrementally adopt Swift throughout a code base ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1870"
  },
  {
    "text": "using any mix of C, C++, and Objective-C.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1873"
  },
  {
    "text": "C++ interoperability is an evolving story, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1879"
  },
  {
    "text": "guided by the C++ interoperability workgroup. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1883"
  },
  {
    "text": "For more information, please see the \"Mix Swift and C++\" talk, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1886"
  },
  {
    "text": "or join us in the discussion on the Swift forums.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1890"
  },
  {
    "text": "Interoperability at the language level is really important, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1894"
  },
  {
    "text": "but you also have to be able to build your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1898"
  },
  {
    "text": "And having to replace your existing build system with Xcode ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1901"
  },
  {
    "text": "or the Swift Package Manager to even get started with Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1905"
  },
  {
    "text": "can be just as big a barrier as rewriting a large amount of code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1908"
  },
  {
    "text": "That's why we worked with the CMake community ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1913"
  },
  {
    "text": "to improve Swift support in CMake. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1915"
  },
  {
    "text": "You can integrate Swift code into your CMake build by declaring Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1917"
  },
  {
    "text": "as one of the languages for the project and putting Swift files into a target.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1921"
  },
  {
    "text": "More importantly, you can mix C++ and Swift within a single target, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1926"
  },
  {
    "text": "and CMake will be sure to compile each separately ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1932"
  },
  {
    "text": "and link all of the appropriate supporting libraries and runtimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1934"
  },
  {
    "text": "for both languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1937"
  },
  {
    "text": "This means you can start adopting Swift in your cross-platform C++ projects today, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1939"
  },
  {
    "text": "file by file or target by target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1944"
  },
  {
    "text": "We're also providing a sample repository ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1947"
  },
  {
    "text": "with CMake projects containing Swift and mixed C++/Swift targets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1950"
  },
  {
    "text": "including using the bridging and generated headers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1954"
  },
  {
    "text": "to help you get started.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1957"
  },
  {
    "text": "A few years ago, we introduced a new concurrency model ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1960"
  },
  {
    "text": "into Swift based on the building blocks of async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1963"
  },
  {
    "text": "structured concurrency, and actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1967"
  },
  {
    "text": "Swift's concurrency model is an abstract model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1970"
  },
  {
    "text": "which can be adapted to different environments and libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1973"
  },
  {
    "text": "The abstract model has two main pieces: Tasks and actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1977"
  },
  {
    "text": "Tasks represent a sequential unit of work that can conceptually run anywhere. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1983"
  },
  {
    "text": "Tasks can be suspended whenever there's an \"await\" in the program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1989"
  },
  {
    "text": "and then resume once the task can continue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1992"
  },
  {
    "text": "Actors are a synchronization mechanism ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1996"
  },
  {
    "text": "that provide mutually-exclusive access to isolated state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=1999"
  },
  {
    "text": "Entering an actor from the outside requires an \"await\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2003"
  },
  {
    "text": "because it may suspend the task.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2006"
  },
  {
    "text": "Tasks and actors are integrated into the abstract language model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2009"
  },
  {
    "text": "but within that model, they can be implemented in different ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2014"
  },
  {
    "text": "to fit different environments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2017"
  },
  {
    "text": "Tasks are executed on the global concurrent pool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2019"
  },
  {
    "text": "How that global concurrent pool decides to schedule work is up to the environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2023"
  },
  {
    "text": "For Apple's platforms, the Dispatch library provides ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2028"
  },
  {
    "text": "optimized scheduling for the whole operating system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2032"
  },
  {
    "text": "and has been extensively tuned for each platform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2035"
  },
  {
    "text": "In more restrictive environments, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2038"
  },
  {
    "text": "the overhead of a multithreaded scheduler may not be acceptable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2040"
  },
  {
    "text": "There Swift's concurrency model is implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2044"
  },
  {
    "text": "with a single-threaded cooperative queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2047"
  },
  {
    "text": "The same Swift code works in both environments ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2050"
  },
  {
    "text": "because the abstract model is flexible enough to map ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2053"
  },
  {
    "text": "to diverse runtime environments.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2056"
  },
  {
    "text": "Additionally, interoperability with callback-based libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2059"
  },
  {
    "text": "was built into Swift's async/await support from the beginning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2063"
  },
  {
    "text": "The withCheckedContinuation operations allow one to suspend a task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2068"
  },
  {
    "text": "and then resume it later in response to a callback. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2071"
  },
  {
    "text": "This enables integration with existing libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2075"
  },
  {
    "text": "that manage tasks themselves.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2077"
  },
  {
    "text": "The standard implementation of actors in the Swift concurrency runtime ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2081"
  },
  {
    "text": "is a lock-free queue of tasks to execute on the actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2085"
  },
  {
    "text": "but it's not the only possible implementation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2088"
  },
  {
    "text": "In a more restricted environment, one might not have atomics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2091"
  },
  {
    "text": "and instead could use another concurrency primitive such as spinlocks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2095"
  },
  {
    "text": "If that environment were single-threaded, no synchronization is needed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2100"
  },
  {
    "text": "but the actor model maintains the abstract concurrency model ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2104"
  },
  {
    "text": "for the program regardless. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2107"
  },
  {
    "text": "You could still take that same code to another environment ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2109"
  },
  {
    "text": "that is multi-threaded. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2112"
  },
  {
    "text": "With Swift 5.9, custom actor executors allow ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2115"
  },
  {
    "text": "a particular actor to implement its own synchronization mechanism. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2118"
  },
  {
    "text": "This makes actors more flexible and adaptable to existing environments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2122"
  },
  {
    "text": "Let's take an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2127"
  },
  {
    "text": "Here we consider an actor that manages a database connection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2130"
  },
  {
    "text": "Swift ensures mutually-exclusive access to the storage of this actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2134"
  },
  {
    "text": "so there won't be any concurrent access to the database. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2138"
  },
  {
    "text": "However, what if you need more control over the specific way ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2142"
  },
  {
    "text": "in which synchronization is done? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2145"
  },
  {
    "text": "For example, what if you want to use a specific dispatch queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2148"
  },
  {
    "text": "for your database connection, perhaps because that queue is shared ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2151"
  },
  {
    "text": "with other code that hasn't adopted actors? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2154"
  },
  {
    "text": "With custom actor executors, you can.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2157"
  },
  {
    "text": "Here we've added a serial dispatch queue to our actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2161"
  },
  {
    "text": "and an implementation of the unowned executor property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2165"
  },
  {
    "text": "that produces the executor corresponding to that dispatch queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2168"
  },
  {
    "text": "With this change, all of the synchronization ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2173"
  },
  {
    "text": "for our actor instances will happen through that queue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2175"
  },
  {
    "text": "When you \"await\" on the call to pruneOldEntries from outside the actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2180"
  },
  {
    "text": "this will now perform a dispatch-async on the corresponding queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2185"
  },
  {
    "text": "This gives you more control over how individual actors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2189"
  },
  {
    "text": "provide synchronization, and even lets you synchronize an actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2192"
  },
  {
    "text": "with other code that isn't using actors yet, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2195"
  },
  {
    "text": "perhaps because it's written in Objective-C or C++.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2197"
  },
  {
    "text": "The synchronization of actors via dispatch queues is made possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2203"
  },
  {
    "text": "because dispatch queue conforms to the new SerialExecutor protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2206"
  },
  {
    "text": "You can provide your own synchronization mechanism to use with actors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2211"
  },
  {
    "text": "by defining a new type that conforms to this protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2216"
  },
  {
    "text": "which has only few core operations: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2219"
  },
  {
    "text": "Checking whether the code is already executing in the context of the executor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2222"
  },
  {
    "text": "For example, are we running on the main thread? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2227"
  },
  {
    "text": "Extracting an unowned reference to the executor to allow access to it ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2231"
  },
  {
    "text": "without excess reference-counting traffic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2235"
  },
  {
    "text": "And the most core operation, enqueue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2238"
  },
  {
    "text": "which takes ownership of an executor \"job.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2241"
  },
  {
    "text": "A job is part of an asynchronous task that needs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2244"
  },
  {
    "text": "to run synchronously on the executor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2246"
  },
  {
    "text": "At the point where enqueue is called, it's the responsibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2249"
  },
  {
    "text": "of the executor to run that job at some point ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2252"
  },
  {
    "text": "when there's no other code running on the serial executor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2255"
  },
  {
    "text": "For example, enqueue for a dispatch queue would call dispatch async on that queue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2258"
  },
  {
    "text": "Swift Concurrency has been in use for a few years now, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2265"
  },
  {
    "text": "and its abstract model consisting of tasks and actors ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2268"
  },
  {
    "text": "covers a large range of concurrent programming tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2272"
  },
  {
    "text": "The abstract model itself is quite flexible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2275"
  },
  {
    "text": "making it adaptable to different execution environments, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2278"
  },
  {
    "text": "from iPhones to Apple Watches, to servers and beyond. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2282"
  },
  {
    "text": "It also allowed customization at key points to enable it to interoperate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2285"
  },
  {
    "text": "with code that hasn't fully adopted Swift Concurrency yet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2289"
  },
  {
    "text": "For more information, please see our \"Behind the Scenes\" talk, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2293"
  },
  {
    "text": "as well as \"Beyond the basics of Structured Concurrency.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2297"
  },
  {
    "text": "I want to wrap up with a bit of a case study of Swift operating ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2300"
  },
  {
    "text": "in an environment very different from the iOS or MacOS apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2304"
  },
  {
    "text": "where we are used to seeing it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2308"
  },
  {
    "text": "FoundationDB is a distributed database, providing a scalable solution ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2309"
  },
  {
    "text": "for very large key-value stores running on commodity hardware ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2315"
  },
  {
    "text": "and supporting a variety of platforms, including MacOS, Linux, and Windows.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2319"
  },
  {
    "text": "FoundationDB is an open-source project with a large code base written in C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2324"
  },
  {
    "text": "The code is heavily asynchronous, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2330"
  },
  {
    "text": "with its own form of distributed actors and runtime ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2332"
  },
  {
    "text": "that provides a critically important deterministic simulation environment ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2335"
  },
  {
    "text": "for testing purposes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2339"
  },
  {
    "text": "FoundationDB was looking to modernize their code base ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2341"
  },
  {
    "text": "and found Swift to be a good match for its performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2344"
  },
  {
    "text": "safety, and code clarity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2348"
  },
  {
    "text": "A complete rewrite would be a big, risky endeavor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2351"
  },
  {
    "text": "Instead, we leveraged Swift's interoperability ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2354"
  },
  {
    "text": "to integrate into the existing code base. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2358"
  },
  {
    "text": "For example, here's a part of the C++ implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2361"
  },
  {
    "text": "of FoundationDB's \"master data\" actor.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2364"
  },
  {
    "text": "There's a lot going on here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2369"
  },
  {
    "text": "and you don't need to understand all of this C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2370"
  },
  {
    "text": "However, I'd like to point out a few key aspects of the code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2373"
  },
  {
    "text": "First, C++ doesn't have async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2378"
  },
  {
    "text": "so FoundationDB has their own preprocessor-like approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2381"
  },
  {
    "text": "to emulate it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2385"
  },
  {
    "text": "Like many C++ code bases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2388"
  },
  {
    "text": "they've implemented their own C++ Future type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2390"
  },
  {
    "text": "to manage asynchronous tasks.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2393"
  },
  {
    "text": "These pair with explicit messaging ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2396"
  },
  {
    "text": "to send responses to the requests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2399"
  },
  {
    "text": "Note the careful pairing of sending ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2401"
  },
  {
    "text": "a reply with returning from the function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2403"
  },
  {
    "text": "Finally, FoundationDB has ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2407"
  },
  {
    "text": "its own reference-counted smart pointers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2409"
  },
  {
    "text": "to help manage memory automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2411"
  },
  {
    "text": "We can implement this whole thing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2413"
  },
  {
    "text": "much more cleanly in Swift.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2415"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2420"
  },
  {
    "text": "That's better. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2422"
  },
  {
    "text": "This function can be directly implemented as an async function in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2424"
  },
  {
    "text": "We have a normal return type and normal return statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2428"
  },
  {
    "text": "to provide the response to this request, so you can't ever be out of sync. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2432"
  },
  {
    "text": "We have an \"await\" to indicate the suspension point ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2436"
  },
  {
    "text": "in the same manner as all other Swift async code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2439"
  },
  {
    "text": "And this Swift code ties in with the C++ Future type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2443"
  },
  {
    "text": "adapted using continuations.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2447"
  },
  {
    "text": "We're using a number of C++ types here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2451"
  },
  {
    "text": "The MasterData type in C++ was using a reference-counted smart pointer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2454"
  },
  {
    "text": "By annotating the type in C++, the Swift compiler can use ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2459"
  },
  {
    "text": "this type like any other class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2462"
  },
  {
    "text": "automatically managing reference counts for us.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2464"
  },
  {
    "text": "Other types, such as the request and reply types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2469"
  },
  {
    "text": "are C++ value types being used directly in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2472"
  },
  {
    "text": "And the interoperability goes both ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2476"
  },
  {
    "text": "This asynchronous function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2479"
  },
  {
    "text": "and indeed, all the work introduced by the Swift concurrency model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2480"
  },
  {
    "text": "run on FoundationDB's existing deterministic runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2484"
  },
  {
    "text": "So we can get the benefits of Swift where we want it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2488"
  },
  {
    "text": "interfacing with the existing C++ to enable gradual adoption throughout.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2491"
  },
  {
    "text": "In this session, we've covered a lot of ground. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2498"
  },
  {
    "text": "We described features like parameter packs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2501"
  },
  {
    "text": "and macros that enable more expressive APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2504"
  },
  {
    "text": "and can help you write better code faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2507"
  },
  {
    "text": "We talked about the use of Swift in performance-sensitive code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2511"
  },
  {
    "text": "and the introduction of non-copyable types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2514"
  },
  {
    "text": "to provide resource management without reference-counting overhead.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2517"
  },
  {
    "text": "Then we dove into C++ interoperability, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2521"
  },
  {
    "text": "which provides support for using C++ APIs in Swift and vice-versa, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2524"
  },
  {
    "text": "making it easier to bring the benefits of Swift to more of your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2530"
  },
  {
    "text": "Finally, we talked about how Swift's flexible concurrency model ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2535"
  },
  {
    "text": "can adapt to myriad environments ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2539"
  },
  {
    "text": "across devices and languages to make concurrency easier and safer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2541"
  },
  {
    "text": "Parameter packs, macros, non-copyable types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2546"
  },
  {
    "text": "and all of the other language enhancements in Swift 5.9 were designed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2549"
  },
  {
    "text": "and developed openly through the Swift Evolution process, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2554"
  },
  {
    "text": "and community feedback was crucial in shaping these features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2557"
  },
  {
    "text": "Swift 5.9 is the culmination of countless contributions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2561"
  },
  {
    "text": "from members across the Swift community, including active design discussions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2565"
  },
  {
    "text": "bug reports, pull requests, educational content, and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2569"
  },
  {
    "text": "Thank you for making Swift 5.9 the great release it is. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2574"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10164/?time=2579"
  }
]