[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=0"
  },
  {
    "text": "Denis: Hi, my name is Denis Vieriu, and I'm a software engineer in the GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=10"
  },
  {
    "text": "Graphics, and Display Software group at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=15"
  },
  {
    "text": "Today I will present to you all the new features and enhancements ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=18"
  },
  {
    "text": "introduced to machine learning this year in Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=21"
  },
  {
    "text": "I'll first recap the existing machine learning backends. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=25"
  },
  {
    "text": "The Metal machine learning APIs are exposed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=28"
  },
  {
    "text": "through Metal Performance Shaders framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=31"
  },
  {
    "text": "MPS is a collection of high-performance GPU primitives for various fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=34"
  },
  {
    "text": "like image processing, linear algebra, and machine learning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=38"
  },
  {
    "text": "MPSGraph is a general purpose compute graph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=43"
  },
  {
    "text": "which sits on top of the MPS framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=46"
  },
  {
    "text": "and extends support to multi-dimensional tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=49"
  },
  {
    "text": "machine learning inference frameworks, like CoreML, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=53"
  },
  {
    "text": "build on top of the MPSGraph backend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=56"
  },
  {
    "text": "MPSGraph also supports training frameworks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=59"
  },
  {
    "text": "like TensorFlow and PyTorch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=62"
  },
  {
    "text": "To learn more about MPSGraph ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=65"
  },
  {
    "text": "and ML Frameworks, please refer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=67"
  },
  {
    "text": "to the previous Metal WWDC talks listed here.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=69"
  },
  {
    "text": "This session focuses on the updates and enhancements added to PyTorch ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=74"
  },
  {
    "text": "and TensorFlow Metal backends, the new GPU acceleration for JAX, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=78"
  },
  {
    "text": "and the features added this year to MPSGraph for ML Inference.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=83"
  },
  {
    "text": "PyTorch and TensorFlow Metal acceleration enable you to use ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=89"
  },
  {
    "text": "the highly efficient kernels from MPS to get the best performance on your Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=92"
  },
  {
    "text": "PyTorch Metal acceleration has been available since version 1.12 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=96"
  },
  {
    "text": "through the MPS backend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=101"
  },
  {
    "text": "This was introduced last year into the PyTorch ecosystem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=102"
  },
  {
    "text": "and since then, multiple improvements have been made ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=106"
  },
  {
    "text": "for optimizing memory usage and view tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=109"
  },
  {
    "text": "This year, PyTorch 2.0 MPS Backend made a great leap forward ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=112"
  },
  {
    "text": "and has been qualified for the Beta Stage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=117"
  },
  {
    "text": "But these were not all the improvements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=120"
  },
  {
    "text": "Latest PyTorch builds contain lots of new updates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=123"
  },
  {
    "text": "such as MPS operation profiling, custom kernel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=126"
  },
  {
    "text": "and Automatic Mixed precision support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=130"
  },
  {
    "text": "Before covering all the nightly build features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=132"
  },
  {
    "text": "I'll start with what is new in PyTorch 2.0.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=135"
  },
  {
    "text": "There is support for the top 60 most used Torch operators, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=140"
  },
  {
    "text": "including ops such as grid sampler, triangular solve, topk, and many more.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=144"
  },
  {
    "text": "The testing coverage has greatly improved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=152"
  },
  {
    "text": "This includes tests for most of the Torch operators, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=155"
  },
  {
    "text": "gradient testing, and ModuleInfo based testing.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=158"
  },
  {
    "text": "Since release, the network coverage has expanded ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=163"
  },
  {
    "text": "as multiple popular models adopted MPS as their official backend on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=166"
  },
  {
    "text": "This includes foundation models, such as WhisperAI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=171"
  },
  {
    "text": "object detection models such as YOLO, stable diffusion models, and many more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=175"
  },
  {
    "text": "Let's check one of these models in action using latest PyTorch 2.0. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=181"
  },
  {
    "text": "For this example, I am using YoloV5, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=186"
  },
  {
    "text": "an object detection network running on an M2 Max. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=189"
  },
  {
    "text": "On the left side, I have the network running ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=193"
  },
  {
    "text": "and generating live images using the PyTorch MPS backend, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=196"
  },
  {
    "text": "while on the right, I have the exact same model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=199"
  },
  {
    "text": "but running on the CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=202"
  },
  {
    "text": "The left side, using the MPS backend, is running at noticeably higher framerate.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=204"
  },
  {
    "text": "And furthermore, the developers not only adopted ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=211"
  },
  {
    "text": "the PyTorch MPS backend in their external networks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=214"
  },
  {
    "text": "but also have contributed code for multiple new operators, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=217"
  },
  {
    "text": "including histogram, group_norm, signbit, and more.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=220"
  },
  {
    "text": "Next, I'll cover the new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=227"
  },
  {
    "text": "available in the latest PyTorch builds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=229"
  },
  {
    "text": "starting with profiling support ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=231"
  },
  {
    "text": "for MPS operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=233"
  },
  {
    "text": "PyTorch nightly builds have profiling support ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=235"
  },
  {
    "text": "that uses OS signposts to show the exact running time ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=238"
  },
  {
    "text": "for operation executions, copies between CPU and GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=241"
  },
  {
    "text": "and fallbacks to the CPU caused by unsupported operators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=245"
  },
  {
    "text": "You will be able to visualize the profiling data in a very familiar tool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=249"
  },
  {
    "text": "Metal System Trace, which is part of Instruments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=253"
  },
  {
    "text": "To learn more about profiling ML applications using Metal System Trace, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=257"
  },
  {
    "text": "I recommend you watch the session from last year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=261"
  },
  {
    "text": "\"Accelerate machine learning with Metal.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=264"
  },
  {
    "text": "Using the profiler is a very simple process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=267"
  },
  {
    "text": "Call the start method on the MPS profiler package to enable tracing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=271"
  },
  {
    "text": "and, at the end of your script, use the stop method to end profiling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=275"
  },
  {
    "text": "Now I will walk through the profiler to debug an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=280"
  },
  {
    "text": "This sample network uses a Sequential model composed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=285"
  },
  {
    "text": "of linear transformations and Softshrink activation functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=288"
  },
  {
    "text": "with a total of seven layers in the model.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=292"
  },
  {
    "text": "The current performance of this model is not satisfying. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=296"
  },
  {
    "text": "In this case, the profiler can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=300"
  },
  {
    "text": "to find the bottleneck.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=302"
  },
  {
    "text": "In the Metal System Trace, first, make sure to enable the os_signpost. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=305"
  },
  {
    "text": "This will allow you to capture the PyTorch operator information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=310"
  },
  {
    "text": "Next, check that the device and the right executable are set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=314"
  },
  {
    "text": "in this case, the Python binary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=319"
  },
  {
    "text": "Then click on the record button.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=321"
  },
  {
    "text": "Instruments is now recording the PyTorch execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=324"
  },
  {
    "text": "I'll let it run for couple of seconds to make sure I capture enough data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=328"
  },
  {
    "text": "Then I click Stop.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=332"
  },
  {
    "text": "In the os_signpost tab, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=336"
  },
  {
    "text": "disclose the PyTorch Intervals timeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=338"
  },
  {
    "text": "This timeline displays the execution time of an operator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=342"
  },
  {
    "text": "alongside PyTorch Metadata, such as string identifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=345"
  },
  {
    "text": "data types, and copy lengths.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=349"
  },
  {
    "text": "Zooming into the timeline reveals PyTorch operators used by this example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=353"
  },
  {
    "text": "The pattern from this trace can be easily identified ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=358"
  },
  {
    "text": "to the custom Sequential model made of seven layers.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=361"
  },
  {
    "text": "From the trace, it's clear that the bottleneck ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=365"
  },
  {
    "text": "is in the Softshrink fallback to the CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=368"
  },
  {
    "text": "This process is very inefficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=371"
  },
  {
    "text": "The model incurs the overhead from the CPU execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=373"
  },
  {
    "text": "of the Softshrink operator and the additional copies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=377"
  },
  {
    "text": "while the GPU is starved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=380"
  },
  {
    "text": "Most of the gaps in the GPU timeline are coming ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=382"
  },
  {
    "text": "from the Softshrink activation function falling back to CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=385"
  },
  {
    "text": "In order to fix this, I'll write a custom kernel to improve the performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=389"
  },
  {
    "text": "There are four steps to write a custom operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=394"
  },
  {
    "text": "First, implement the operation in Objective-C and Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=397"
  },
  {
    "text": "Next, create the Python bindings for your Objective-C code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=402"
  },
  {
    "text": "and compile your extension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=406"
  },
  {
    "text": "Finally, once your extension is built, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=408"
  },
  {
    "text": "import the operation into your training script and begin using it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=411"
  },
  {
    "text": "I'll start with the operation implementation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=415"
  },
  {
    "text": "Start by importing the Torch extension header. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=420"
  },
  {
    "text": "This includes all the necessary PyTorch bits to write C++ extensions.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=423"
  },
  {
    "text": "Then define the compute function ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=429"
  },
  {
    "text": "and use the get_command_buffer MPS backend API to get a reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=433"
  },
  {
    "text": "to the MPSStream Command Buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=437"
  },
  {
    "text": "Similarly, use the get_dispatch_queue API to get a reference to the serial queue.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=440"
  },
  {
    "text": "Next, create an encoder using the command buffer and define the custom GPU kernel.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=446"
  },
  {
    "text": "You encode the kernel inside the dispatch queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=453"
  },
  {
    "text": "to ensure that submissions from multiple threads are serialized.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=456"
  },
  {
    "text": "After all the work is encoded, use the synchronize API to wait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=461"
  },
  {
    "text": "until the current command buffer is done running, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=465"
  },
  {
    "text": "so you can observe serialized submissions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=467"
  },
  {
    "text": "Or if you don't need serialization, use the commit API.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=470"
  },
  {
    "text": "Next, bind your custom functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=475"
  },
  {
    "text": "You can use PYBIND11 to bind the Objective-C functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=478"
  },
  {
    "text": "into Python in a very simple manner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=482"
  },
  {
    "text": "For this extension, the necessary binding code spans only two lines.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=484"
  },
  {
    "text": "After binding, compile your extension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=490"
  },
  {
    "text": "First import torch.utils.cpp_extension.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=494"
  },
  {
    "text": "This provides a load function which you can use to compile your extension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=498"
  },
  {
    "text": "Next, pass the name of your extension to build, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=503"
  },
  {
    "text": "then a list of relative or absolute paths to the source code files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=506"
  },
  {
    "text": "Optionally, you can list additional compiler flags to forward to the build. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=511"
  },
  {
    "text": "The load function will compile the source files into a shared library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=517"
  },
  {
    "text": "which will be subsequently loaded into the current Python process as a module.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=521"
  },
  {
    "text": "Finally, import the operator into your script to begin using it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=526"
  },
  {
    "text": "Start by importing the compiled library and change the previous Sequential model ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=532"
  },
  {
    "text": "to use the custom Softshrink kernel.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=536"
  },
  {
    "text": "Let's run the same model again and check the result.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=541"
  },
  {
    "text": "With the newly added custom operator, the model runs much more efficiently.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=546"
  },
  {
    "text": "All the copies and intermediate tensors created by the fallback ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=552"
  },
  {
    "text": "to the CPU are gone, and the Sequential model runs much faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=555"
  },
  {
    "text": "Now let's explore more ways your network can be further improved.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=560"
  },
  {
    "text": "PyTorch MPS backend now supports automatic mixed precision, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=566"
  },
  {
    "text": "which allows you to train faster using less memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=570"
  },
  {
    "text": "and without loss in quality. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=573"
  },
  {
    "text": "To understand mixed precision, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=575"
  },
  {
    "text": "I will first review the supported data types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=577"
  },
  {
    "text": "Mixed precision training is a mode that allows training ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=580"
  },
  {
    "text": "deep learning models with a mix of single precision floating point ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=583"
  },
  {
    "text": "and half precision floating point. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=587"
  },
  {
    "text": "Starting with macOS Sonoma, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=590"
  },
  {
    "text": "MPSGraph adds support for a new data type, bfloat16.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=592"
  },
  {
    "text": "bfloat16 is a 16-bit floating point format for deep learning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=597"
  },
  {
    "text": "It is comprised of 1 sign bit, 8 exponent bits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=602"
  },
  {
    "text": "and 7 mantissa bits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=606"
  },
  {
    "text": "This is different from the standard IEEE 16-bit floating point format, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=608"
  },
  {
    "text": "which was not designed with deep learning applications in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=613"
  },
  {
    "text": "Automatic Mixed Precision will be enabled for both float16 and bfloat16.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=616"
  },
  {
    "text": "Automatic mixed precision chooses the right precision per layer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=623"
  },
  {
    "text": "by measuring the performance of the network in default precision, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=627"
  },
  {
    "text": "then it runs again, with mixed precision settings ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=631"
  },
  {
    "text": "to optimize the performance without impacting the accuracy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=634"
  },
  {
    "text": "Some layers of the neural networks can be executed at lower precision, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=638"
  },
  {
    "text": "such as convolutional or linear layers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=642"
  },
  {
    "text": "Other layers such as reductions will often require a higher precision level.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=645"
  },
  {
    "text": "Adding Automatic Mixed Precision support to your network is a very easy process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=652"
  },
  {
    "text": "First, add autocast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=657"
  },
  {
    "text": "Both float16 and bfloat16 are supported. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=659"
  },
  {
    "text": "Autocast serves as a context manager that allows a region of the script ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=664"
  },
  {
    "text": "to run in mixed precision.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=669"
  },
  {
    "text": "In this region, MPS ops run in a data type chosen by autocast ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=672"
  },
  {
    "text": "to improve performance while maintaining accuracy.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=676"
  },
  {
    "text": "The MPS backend has also been significantly optimized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=681"
  },
  {
    "text": "With PyTorch 2.0 and macOS Sonoma, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=684"
  },
  {
    "text": "the MPS backend is up to five times faster ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=687"
  },
  {
    "text": "compared to our previous release. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=689"
  },
  {
    "text": "That's it for PyTorch. Now let's move on to TensorFlow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=692"
  },
  {
    "text": "The TensorFlow Metal backend has matured to a stable 1.0 release version. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=696"
  },
  {
    "text": "In this release, a grappler remapping optimizer pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=701"
  },
  {
    "text": "has been added to the plugin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=704"
  },
  {
    "text": "The Metal plugin also gets mixed precision support, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=707"
  },
  {
    "text": "and the installation process is now simpler than before.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=710"
  },
  {
    "text": "The performance of the TensorFlow Metal backend has been improved ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=715"
  },
  {
    "text": "through addition of automatic fusion of recognized computation patterns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=719"
  },
  {
    "text": "These computations include fused convolutions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=724"
  },
  {
    "text": "and matrix multiplications, optimizer operations, and RNN cells. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=726"
  },
  {
    "text": "This optimization happens automatically through the grappler pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=732"
  },
  {
    "text": "when the computation graph is created.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=736"
  },
  {
    "text": "Here I have an example of a common computation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=740"
  },
  {
    "text": "of a two-dimensional convolution operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=742"
  },
  {
    "text": "The convolution is often followed by an addition function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=745"
  },
  {
    "text": "a common pattern in convolutional neural networks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=749"
  },
  {
    "text": "By identifying this pattern, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=752"
  },
  {
    "text": "the grappler pass can remap the computation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=754"
  },
  {
    "text": "This allows you to use a more optimized kernel to achieve the same output, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=759"
  },
  {
    "text": "leading to better performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=763"
  },
  {
    "text": "Like in PyTorch, TensorFlow also gets mixed precision support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=765"
  },
  {
    "text": "TensorFlow allows setting mixed precision globally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=770"
  },
  {
    "text": "This enables all network layers to be automatically created ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=773"
  },
  {
    "text": "with the requested data type policy, so enabling this change ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=777"
  },
  {
    "text": "in your standard workflow requires minimal changes to existing code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=780"
  },
  {
    "text": "Global policy can be set to use either Float16 or BFloat16.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=786"
  },
  {
    "text": "In addition to improvements in performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=794"
  },
  {
    "text": "the user experience in enabling the Metal acceleration has been streamlined. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=797"
  },
  {
    "text": "From now on, simply following the usual path ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=801"
  },
  {
    "text": "of installing the TensorFlow wheel and the TensorFlow-Metal plugin ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=804"
  },
  {
    "text": "through a package manager will enable the Metal acceleration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=808"
  },
  {
    "text": "For those who want to stay on the bleeding edge of TensorFlow development, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=812"
  },
  {
    "text": "the Metal acceleration support is now also available ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=816"
  },
  {
    "text": "on the nightly releases of TensorFlow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=819"
  },
  {
    "text": "Now let's talk about the new GPU acceleration for JAX. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=821"
  },
  {
    "text": "This year, JAX GPU acceleration will be supported ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=826"
  },
  {
    "text": "through the Metal backend, similar to PyTorch and TensorFlow.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=829"
  },
  {
    "text": "JAX is a Python library for high-performance numerical computing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=833"
  },
  {
    "text": "and machine learning research. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=838"
  },
  {
    "text": "It is based on the popular NumPy framework for working with large arrays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=840"
  },
  {
    "text": "with three key extensions for machine learning research.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=844"
  },
  {
    "text": "First, it supports automatic differentiation using the grad function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=849"
  },
  {
    "text": "It can differentiate through a large subset of Python's features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=854"
  },
  {
    "text": "and it can even take high order derivatives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=857"
  },
  {
    "text": "JAX also supports fast and efficient vectorization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=861"
  },
  {
    "text": "Given a function apply_matrix, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=865"
  },
  {
    "text": "you could loop over a batch dimension in Python, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=867"
  },
  {
    "text": "but it may run at sub-optimal performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=869"
  },
  {
    "text": "In this case, vmap can be used to add batching support automatically.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=873"
  },
  {
    "text": "And further, JAX lets you just-in-time compile ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=878"
  },
  {
    "text": "your function into optimized kernels using an API called jit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=881"
  },
  {
    "text": "In the same case, jit is used to transform the function ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=885"
  },
  {
    "text": "on top of vmap to make it run faster.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=889"
  },
  {
    "text": "On a MacBook Pro with M2 Max, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=893"
  },
  {
    "text": "JAX Metal acceleration provides amazing speedups, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=895"
  },
  {
    "text": "with an average of ten times faster than the CPU across these networks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=899"
  },
  {
    "text": "For more details on environment setup and installation of JAX, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=903"
  },
  {
    "text": "please refer to the Metal Developer Resources web page.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=907"
  },
  {
    "text": "Let's switch gears and move to ML inference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=912"
  },
  {
    "text": "I will start by introducing a new serialization format ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=915"
  },
  {
    "text": "for MPSGraph that you use to optimize your load times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=918"
  },
  {
    "text": "This new serialization format can be generated ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=922"
  },
  {
    "text": "from your existing serialized networks from other frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=925"
  },
  {
    "text": "Finally, I will show you how to optimize the memory footprint ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=928"
  },
  {
    "text": "of your network by leveraging 8-bit integer quantization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=932"
  },
  {
    "text": "Let's begin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=936"
  },
  {
    "text": "An MPSGraph can be created using the high level APIs with full flexibility, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=938"
  },
  {
    "text": "layer by layer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=942"
  },
  {
    "text": "Please refer to the video on building customized ML models ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=944"
  },
  {
    "text": "with Metal Performance Shaders Graph for details. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=947"
  },
  {
    "text": "After defining and compiling your custom graph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=951"
  },
  {
    "text": "it will then execute through the MPSGraphExecutable to get results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=954"
  },
  {
    "text": "Normally, this process works great. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=959"
  },
  {
    "text": "However, in complex graphs with many layers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=962"
  },
  {
    "text": "this initial compilation can lead to high application launch times.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=965"
  },
  {
    "text": "MPSGraph has a new serialization format called MPSGraphPackage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=970"
  },
  {
    "text": "to address exactly this problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=974"
  },
  {
    "text": "This new serialization format allows you to create ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=977"
  },
  {
    "text": "the MPSGraphExecutable ahead of time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=980"
  },
  {
    "text": "Once created, the optimized MPSGraphExecutable ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=983"
  },
  {
    "text": "can be loaded directly from a MPSGraphPackage file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=986"
  },
  {
    "text": "Creating a MPSGraphPackage is very simple.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=990"
  },
  {
    "text": "All you need to do is to create a serialization descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=994"
  },
  {
    "text": "and pass it to the serialize function ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=997"
  },
  {
    "text": "of the MPSGraphExecutable you want to serialize. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=999"
  },
  {
    "text": "You'll also need to pass a path to store it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1002"
  },
  {
    "text": "After creating the package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1006"
  },
  {
    "text": "this is how you load the graph into your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1007"
  },
  {
    "text": "You need a compilation descriptor and the path to your stored package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1011"
  },
  {
    "text": "Then use them to initialize the MPSGraphExecutable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1015"
  },
  {
    "text": "If you've been already using MPSGraph, you can easily adopt ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1019"
  },
  {
    "text": "the new serialization format using the APIs we have presented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1023"
  },
  {
    "text": "But if you're coming from other frameworks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1027"
  },
  {
    "text": "you can now easily migrate to MPSGraphPackage ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1029"
  },
  {
    "text": "using the new MPSGraphTool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1031"
  },
  {
    "text": "For users of CoreML, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1034"
  },
  {
    "text": "you can pass your ML Programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1036"
  },
  {
    "text": "tp the MPSGraphTool, which will create ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1038"
  },
  {
    "text": "a MPSGraphPackage for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1040"
  },
  {
    "text": "The same goes for ONNX, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1042"
  },
  {
    "text": "where you can use your ONNX file ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1043"
  },
  {
    "text": "as the input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1045"
  },
  {
    "text": "This new tool lets you quickly include your existing models ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1046"
  },
  {
    "text": "to your MPSGraph application without the need ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1050"
  },
  {
    "text": "to encode the inference model manually.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1052"
  },
  {
    "text": "Here's how you use the command line tool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1055"
  },
  {
    "text": "You give the MPSGraphTool a flag to declare the input model type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1058"
  },
  {
    "text": "in this case, CoreML Package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1062"
  },
  {
    "text": "You also provide it with the path to your output destination ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1064"
  },
  {
    "text": "and the name of your output model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1067"
  },
  {
    "text": "Additionally, you define the target platform ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1070"
  },
  {
    "text": "and minimum OS version. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1072"
  },
  {
    "text": "After conversion, the produced MPSGraphPackages ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1075"
  },
  {
    "text": "can be loaded to your app and executed directly.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1078"
  },
  {
    "text": "Next, lets discuss how you can improve the efficiency ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1082"
  },
  {
    "text": "of your computations using the 8-bit integer quantizations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1085"
  },
  {
    "text": "It's common to use floating point formats to do training and inference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1090"
  },
  {
    "text": "such as 16-bit floating point format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1094"
  },
  {
    "text": "However, at inference, these models may take a longer time to predict results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1096"
  },
  {
    "text": "Instead, it's better in many cases to use reduced precision ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1103"
  },
  {
    "text": "or 8-bit integer numbers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1107"
  },
  {
    "text": "This will help you in saving memory bandwith ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1109"
  },
  {
    "text": "and reduce the memory footprint of your model.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1112"
  },
  {
    "text": "For 8-bit integer formats, there are two types of quantization: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1116"
  },
  {
    "text": "symmetric and asymmetric. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1120"
  },
  {
    "text": "MPSGraph now supports APIs for both of them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1122"
  },
  {
    "text": "Compared to the symmetric quantization, the asymmetric one lets you specify ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1126"
  },
  {
    "text": "a quantization bias, denoted by zeroPoint here.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1130"
  },
  {
    "text": "Now let's delve into using quantized computations through an example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1135"
  },
  {
    "text": "starting with activation and weights in an Int8 format as the inputs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1140"
  },
  {
    "text": "These inputs are dequantized to floating point format ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1145"
  },
  {
    "text": "using the dequantizeTensor op in MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1148"
  },
  {
    "text": "Now the floating point inputs can be fed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1152"
  },
  {
    "text": "into a convolution operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1155"
  },
  {
    "text": "The resulting floating point tensor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1157"
  },
  {
    "text": "can then be quantized back to Int8 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1159"
  },
  {
    "text": "using the quantizeTensor op. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1161"
  },
  {
    "text": "MPSGraph will automatically fuse all of these kernels into a single operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1163"
  },
  {
    "text": "therefore saving memory bandwidth and potentially improving performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1168"
  },
  {
    "text": "And this is how you can use the quantization support in MPSGraph.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1173"
  },
  {
    "text": "In addition to the previous new features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1179"
  },
  {
    "text": "MPSGraph supports even more machine learning operators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1181"
  },
  {
    "text": "Starting this year, complex types are supported for most graph operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1185"
  },
  {
    "text": "You can use complex numbers either with single precision ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1190"
  },
  {
    "text": "or half precision floating point formats.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1193"
  },
  {
    "text": "Building on the complex data type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1196"
  },
  {
    "text": "MPSGraph adds operators for computing Fast Fourier Transformations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1198"
  },
  {
    "text": "You can apply complex to complex, complex to real, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1202"
  },
  {
    "text": "and real to complex transformations up to four dimensions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1205"
  },
  {
    "text": "These are very common in audio, video, and image processing applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1209"
  },
  {
    "text": "Furthermore, using MPSGraph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1215"
  },
  {
    "text": "you can now perform three-dimensional convolutions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1218"
  },
  {
    "text": "grid sampling, Sort and ArgSort, and cumulative operations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1221"
  },
  {
    "text": "including sums, products, minima, and maxima. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1225"
  },
  {
    "text": "And this concludes the discussion about the new features in MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1230"
  },
  {
    "text": "Let's review what was presented today in this session.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1235"
  },
  {
    "text": "I went over the improvements in accelerating popular ML frameworks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1238"
  },
  {
    "text": "like PyTorch and TensorFlow through Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1242"
  },
  {
    "text": "Now you can also take advantage of the new Metal accelerated JAX framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1245"
  },
  {
    "text": "We also discussed how to seamlessly integrate your existing models ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1251"
  },
  {
    "text": "from other frameworks to MPSGraph using the new serialization tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1254"
  },
  {
    "text": "And this concludes our talk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1259"
  },
  {
    "text": "We can't wait to see the amazing content that you will create ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1261"
  },
  {
    "text": "using all of these features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1264"
  },
  {
    "text": "Thanks for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1265"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10050/?time=1267"
  }
]