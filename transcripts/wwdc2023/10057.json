[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=0"
  },
  {
    "text": "Tyler: Welcome to \"Unleash the UIKit Trait System.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=10"
  },
  {
    "text": "I’m Tyler Fox, a UI frameworks engineer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=13"
  },
  {
    "text": "and I’m excited to tell you about some incredible new UIKit features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=16"
  },
  {
    "text": "that you can take advantage of in iOS 17. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=20"
  },
  {
    "text": "To start, I’ll review fundamentals about the trait system in UIKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=23"
  },
  {
    "text": "Then I’ll guide you through the new features and capabilities, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=28"
  },
  {
    "text": "which include the ability to define custom traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=31"
  },
  {
    "text": "to add your own data to UITraitCollection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=35"
  },
  {
    "text": "easier ways to apply trait overrides in your app’s hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=38"
  },
  {
    "text": "and more flexible ways to handle when traits change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=42"
  },
  {
    "text": "Finally, I’ll explain how you can bridge UIKit traits with SwiftUI environment keys ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=46"
  },
  {
    "text": "to seamlessly pass data between UIKit and SwiftUI components in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=51"
  },
  {
    "text": "It's time to review some fundamentals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=57"
  },
  {
    "text": "Traits are independent pieces of data that the system automatically propagates ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=60"
  },
  {
    "text": "to every view controller and view in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=65"
  },
  {
    "text": "UIKit provides many built-in system traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=68"
  },
  {
    "text": "such as user interface style, horizontal size class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=71"
  },
  {
    "text": "and preferred content size category. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=75"
  },
  {
    "text": "In iOS 17, you can define your own custom traits as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=78"
  },
  {
    "text": "This unlocks a powerful new way for you to provide data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=83"
  },
  {
    "text": "to your app's view controllers and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=86"
  },
  {
    "text": "I'll tell you all about custom traits a little bit later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=90"
  },
  {
    "text": "The main way that you work with traits in UIKit is using trait collections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=94"
  },
  {
    "text": "A trait collection contains traits and their associated values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=99"
  },
  {
    "text": "There are some new APIs in iOS 17 ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=104"
  },
  {
    "text": "that make it easier to work with trait collections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=107"
  },
  {
    "text": "First, there is a new initializer that takes a closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=110"
  },
  {
    "text": "Inside that closure, you receive a mutable traits container ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=114"
  },
  {
    "text": "that you can set values to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=119"
  },
  {
    "text": "This mutable container conforms to a new protocol named UIMutableTraits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=121"
  },
  {
    "text": "Inside the closure, I set the user interface idiom to phone ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=128"
  },
  {
    "text": "and the horizontal size class to regular. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=132"
  },
  {
    "text": "When the closure finishes executing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=135"
  },
  {
    "text": "the initializer returns an immutable UITraitCollection instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=137"
  },
  {
    "text": "that contains all of the trait values I set inside the closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=142"
  },
  {
    "text": "There’s also a new modifyingTraits method that allows you to create a new instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=146"
  },
  {
    "text": "by modifying values from the original trait collection inside the closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=152"
  },
  {
    "text": "Here I’ve changed the horizontal size class to compact, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=157"
  },
  {
    "text": "and I've populated a dark value for the user interface style. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=161"
  },
  {
    "text": "Since I haven't changed the user interface idiom, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=166"
  },
  {
    "text": "it remains equal to phone from my original trait collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=169"
  },
  {
    "text": "While you can create your own trait collections like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=175"
  },
  {
    "text": "most of the time you obtain trait collections from trait environments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=178"
  },
  {
    "text": "Trait environments in your app are window scenes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=183"
  },
  {
    "text": "windows, presentation controllers, view controllers, and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=186"
  },
  {
    "text": "Every one of these trait environments has its own trait collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=191"
  },
  {
    "text": "and each trait collection may contain different values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=195"
  },
  {
    "text": "Trait environments are connected in the trait hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=200"
  },
  {
    "text": "which is how traits flow through your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=204"
  },
  {
    "text": "Here's an example of the trait hierarchy’s tree structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=207"
  },
  {
    "text": "from each window scene all the way down ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=210"
  },
  {
    "text": "to the individual view controllers and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=212"
  },
  {
    "text": "Each trait environment inherits trait values from its parent environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=216"
  },
  {
    "text": "Always use the trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=221"
  },
  {
    "text": "of the most specific trait environment possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=223"
  },
  {
    "text": "I'll dive deeper into the way that traits flow through view controllers and views.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=227"
  },
  {
    "text": "Here is an example of a parent view controller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=235"
  },
  {
    "text": "which contains a child view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=237"
  },
  {
    "text": "The dashed line represents the view controller hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=240"
  },
  {
    "text": "The parent controller owns a view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=244"
  },
  {
    "text": "and the solid line connecting them represents their relationship. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=247"
  },
  {
    "text": "The parent view has one subview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=251"
  },
  {
    "text": "and the dashed line through the views represents the view hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=254"
  },
  {
    "text": "Finally, the view of the child controller is a subview of that middle view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=259"
  },
  {
    "text": "First I’ll explain how traits flowed through view controllers and views ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=265"
  },
  {
    "text": "prior to iOS 17. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=269"
  },
  {
    "text": "View controllers inherited traits directly from their parent view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=273"
  },
  {
    "text": "And views owned by a view controller inherited their traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=278"
  },
  {
    "text": "directly from their view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=282"
  },
  {
    "text": "Finally, views without a view controller inherited traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=285"
  },
  {
    "text": "directly from their superview. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=289"
  },
  {
    "text": "This behavior meant that the flow of traits in the view hierarchy stopped ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=292"
  },
  {
    "text": "at each view owned by a view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=296"
  },
  {
    "text": "For example, a trait value from the view of the parent controller ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=299"
  },
  {
    "text": "would only be inherited by its direct subview. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=303"
  },
  {
    "text": "The view of the child controller wouldn’t receive that value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=307"
  },
  {
    "text": "even though it is a subview in the view hierarchy below those views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=310"
  },
  {
    "text": "This behavior could be surprising. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=315"
  },
  {
    "text": "In iOS 17, we’ve eliminated this issue ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=318"
  },
  {
    "text": "by unifying the trait hierarchy for view controllers and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=321"
  },
  {
    "text": "View controllers now inherit their trait collection from their view’s superview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=327"
  },
  {
    "text": "instead of directly from their parent view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=332"
  },
  {
    "text": "This creates a simple linear flow of traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=335"
  },
  {
    "text": "through view controllers and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=339"
  },
  {
    "text": "Note how view controllers still inherit traits from their parent view controller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=342"
  },
  {
    "text": "it just happens indirectly via the views in between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=346"
  },
  {
    "text": "Because view controllers now inherit their traits from the view hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=350"
  },
  {
    "text": "a view controller’s view must be in the hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=355"
  },
  {
    "text": "for the view controller to receive updated traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=358"
  },
  {
    "text": "As a result, if you access a view controller’s trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=362"
  },
  {
    "text": "before its view has been added to the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=365"
  },
  {
    "text": "the view controller won’t have up-to-date values for its traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=368"
  },
  {
    "text": "The most common place you might find code that is affected is inside viewWillAppear, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=372"
  },
  {
    "text": "as that is always called before the view has been added to the hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=378"
  },
  {
    "text": "There's a new callback named viewIsAppearing that you can use instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=383"
  },
  {
    "text": "viewIsAppearing is called after viewWillAppear ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=389"
  },
  {
    "text": "once the view has been added to the hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=392"
  },
  {
    "text": "and both the view controller and view have up-to-date trait collections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=395"
  },
  {
    "text": "viewIsAppearing is a drop-in replacement ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=400"
  },
  {
    "text": "for nearly all cases where you’re using viewWillAppear today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=403"
  },
  {
    "text": "And the best part is that this new method back-deploys all the way to iOS 13. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=407"
  },
  {
    "text": "Watch \"What’s New In UIKit\" to learn more about this new callback ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=414"
  },
  {
    "text": "and how it fits into the view controller life cycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=418"
  },
  {
    "text": "iOS 17 also improves the consistency and performance for view trait updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=423"
  },
  {
    "text": "Views only update their trait collection when they are in the hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=429"
  },
  {
    "text": "And once in the hierarchy, each view only updates its trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=433"
  },
  {
    "text": "immediately before it performs layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=437"
  },
  {
    "text": "The best practice is to use traits during layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=440"
  },
  {
    "text": "For views, that means using the traitCollection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=444"
  },
  {
    "text": "from inside the layoutSubviews method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=447"
  },
  {
    "text": "Remember that layoutSubviews runs again ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=451"
  },
  {
    "text": "any time setNeedsLayout is called on the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=454"
  },
  {
    "text": "so your implementation should avoid duplicating work if called multiple times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=457"
  },
  {
    "text": "Custom traits are a powerful new feature in iOS 17. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=463"
  },
  {
    "text": "They open up an entirely new way for you to provide data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=468"
  },
  {
    "text": "to your view controllers and views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=471"
  },
  {
    "text": "As you work with data in your app, consider the following things ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=474"
  },
  {
    "text": "to help you decide when to define a new custom trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=477"
  },
  {
    "text": "Traits are a great choice when you need to propagate data to many children, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=482"
  },
  {
    "text": "such as from a parent view controller to multiple child view controllers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=486"
  },
  {
    "text": "or from a superview to all of its subviews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=490"
  },
  {
    "text": "You can also use traits to pass data to other components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=493"
  },
  {
    "text": "that may be nested many layers deep, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=496"
  },
  {
    "text": "where you don’t have a direct connection to them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=499"
  },
  {
    "text": "Because traits are inherited through the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=502"
  },
  {
    "text": "they can provide context to your views and view controllers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=505"
  },
  {
    "text": "about their environment, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=508"
  },
  {
    "text": "such as providing information about a containing view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=510"
  },
  {
    "text": "While the trait system is powerful, using it to propagate data is not free. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=515"
  },
  {
    "text": "For best performance, use traits when they add value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=520"
  },
  {
    "text": "but avoid using traits when you can easily pass data directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=523"
  },
  {
    "text": "Now you're ready to define your first custom trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=528"
  },
  {
    "text": "Imagine that I have a Settings screen in my app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=532"
  },
  {
    "text": "and I want to implement a trait that indicates whether a view is contained ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=535"
  },
  {
    "text": "inside my Settings view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=539"
  },
  {
    "text": "I can define a custom trait with just a few lines of code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=542"
  },
  {
    "text": "To start, I declare a new struct ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=546"
  },
  {
    "text": "and conform to the UITraitDefinition protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=548"
  },
  {
    "text": "I implement the one required static property, defaultValue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=552"
  },
  {
    "text": "This is the default value for the trait when no value has been set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=557"
  },
  {
    "text": "Each trait definition has an associated value type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=561"
  },
  {
    "text": "which is inferred from the defaultValue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=565"
  },
  {
    "text": "In this case, since I am assigning a defaultValue of false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=568"
  },
  {
    "text": "the type of this trait's values is inferred to be Bool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=572"
  },
  {
    "text": "If you’ve ever defined a custom environment key in SwiftUI before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=577"
  },
  {
    "text": "this should feel very familiar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=581"
  },
  {
    "text": "Once you’ve defined a trait, you can immediately use it with new APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=585"
  },
  {
    "text": "on UITraitCollection and UIMutableTraits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=589"
  },
  {
    "text": "You can think of the trait as a key that you use to get and set values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=592"
  },
  {
    "text": "Inside the new UITraitCollection initializer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=598"
  },
  {
    "text": "I can set a value for my trait by using the subscript operator on UIMutableTraits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=601"
  },
  {
    "text": "And then I can read back the value for the trait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=608"
  },
  {
    "text": "by using the subscript operator on UITraitCollection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=610"
  },
  {
    "text": "Adding two simple extensions will let me access this trait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=615"
  },
  {
    "text": "using standard property syntax, just like all of the system traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=619"
  },
  {
    "text": "Here I’ve declared a read-only property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=624"
  },
  {
    "text": "in an extension of the immutable UITraitCollection class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=626"
  },
  {
    "text": "And then I’ve declared a read-write property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=631"
  },
  {
    "text": "in an extension of the UIMutableTraits protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=633"
  },
  {
    "text": "Now that I’ve added these very simple extensions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=638"
  },
  {
    "text": "I can use standard property syntax to access my trait everywhere. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=640"
  },
  {
    "text": "Always write these extensions when you define your own custom traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=646"
  },
  {
    "text": "I have an idea for another custom trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=652"
  },
  {
    "text": "Imagine I'm building support for custom color themes in my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=655"
  },
  {
    "text": "I have an enum named MyAppTheme ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=659"
  },
  {
    "text": "that represents the four different color themes my app supports. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=663"
  },
  {
    "text": "The first thing I’ll do is declare a new struct ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=668"
  },
  {
    "text": "which conforms to the UITraitDefinition protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=671"
  },
  {
    "text": "I’ll use the standard theme as the default value for this trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=675"
  },
  {
    "text": "Since I plan to use this new theme trait in my app’s custom dynamic colors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=680"
  },
  {
    "text": "I indicate that this trait affects color appearance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=685"
  },
  {
    "text": "and the system will automatically redraw views when this trait changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=688"
  },
  {
    "text": "Traits that affect color appearance are much more expensive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=694"
  },
  {
    "text": "so use this sparingly and only for traits that change infrequently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=697"
  },
  {
    "text": "Traits also have a name, which is used for things ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=703"
  },
  {
    "text": "like printing the trait in the debugger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=705"
  },
  {
    "text": "By default, it will use the name of the trait type itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=708"
  },
  {
    "text": "but I can give it a shorter name, like “Theme.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=712"
  },
  {
    "text": "And finally, I can provide an identifier string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=715"
  },
  {
    "text": "The identifier makes the trait eligible for additional features such as encoding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=719"
  },
  {
    "text": "Use reverse-DNS format ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=724"
  },
  {
    "text": "to ensure each trait's identifier is globally unique in your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=726"
  },
  {
    "text": "I want to be able to use regular property syntax to set and get this trait, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=732"
  },
  {
    "text": "so I’ll extend UITraitCollection and UIMutableTraits to declare a property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=737"
  },
  {
    "text": "just as I did before in the previous example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=742"
  },
  {
    "text": "And that’s all I need to do to implement a custom theme trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=745"
  },
  {
    "text": "Now I can start using this new trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=749"
  },
  {
    "text": "For example, here is how to define a custom dynamic color ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=752"
  },
  {
    "text": "that changes its appearance based on the theme. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=756"
  },
  {
    "text": "I create a new UIColor using the dynamic provider initializer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=760"
  },
  {
    "text": "Inside the closure, I use the theme of the trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=765"
  },
  {
    "text": "that gets passed in to determine which color to return. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=768"
  },
  {
    "text": "Now I can set this custom background color to a view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=774"
  },
  {
    "text": "Because I indicated that this trait affects color appearance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=778"
  },
  {
    "text": "when I defined it, any views using this custom background color ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=781"
  },
  {
    "text": "will automatically update when the theme changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=785"
  },
  {
    "text": "When defining a trait, the most important thing to consider ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=788"
  },
  {
    "text": "is the associated data type of the trait’s values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=792"
  },
  {
    "text": "The best traits are built around value types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=796"
  },
  {
    "text": "including simple structs and enums. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=798"
  },
  {
    "text": "Avoid traits that are based around classes in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=801"
  },
  {
    "text": "The most efficient data types for traits are Bool, Int, and Double, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=806"
  },
  {
    "text": "or an enum that uses an Int raw value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=811"
  },
  {
    "text": "Enums are one of the most useful data types for traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=815"
  },
  {
    "text": "Just make sure to explicitly specify Int as the enum's raw data type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=818"
  },
  {
    "text": "for maximum efficiency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=823"
  },
  {
    "text": "Any custom struct data types that you use as trait values should have ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=827"
  },
  {
    "text": "an efficient implementation of the Equatable protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=830"
  },
  {
    "text": "The system will compare trait values frequently ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=834"
  },
  {
    "text": "to determine when traits have changed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=837"
  },
  {
    "text": "so your equal-to function should be as fast as possible.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=839"
  },
  {
    "text": "For those of you with apps that use Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=845"
  },
  {
    "text": "the new trait system functionality is available there as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=848"
  },
  {
    "text": "The API for custom traits is different in Swift and Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=852"
  },
  {
    "text": "However, you can define one custom trait in Swift and one in Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=857"
  },
  {
    "text": "and have both point to the same underlying data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=862"
  },
  {
    "text": "Refer to the documentation for more details and special considerations.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=866"
  },
  {
    "text": "Once you’ve defined a custom trait, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=872"
  },
  {
    "text": "the next step is to populate some data for it in your app's trait hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=874"
  },
  {
    "text": "Trait overrides are the mechanism you use to modify data within the trait hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=879"
  },
  {
    "text": "In iOS 17, it’s easier than ever to apply trait overrides. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=885"
  },
  {
    "text": "There’s a new traitOverrides property on each of the trait environment classes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=890"
  },
  {
    "text": "including window scenes, windows, views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=895"
  },
  {
    "text": "view controllers, and presentation controllers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=898"
  },
  {
    "text": "Going back to the illustration of the trait hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=901"
  },
  {
    "text": "trait overrides change the value for traits at any location in this tree. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=905"
  },
  {
    "text": "When you apply a trait override to one of the trait environments in this hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=910"
  },
  {
    "text": "it modifies the value for that trait in the trait collection of that object ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=914"
  },
  {
    "text": "and all of its descendants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=919"
  },
  {
    "text": "Taking a parent and child trait environment from the trait hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=921"
  },
  {
    "text": "here’s how trait overrides affect both. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=926"
  },
  {
    "text": "Trait overrides applied to the parent affect the parent’s own trait collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=929"
  },
  {
    "text": "And then the values from the parent’s trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=934"
  },
  {
    "text": "are inherited to the child. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=937"
  },
  {
    "text": "Finally, the child's trait overrides are applied to the values it inherited ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=940"
  },
  {
    "text": "to produce its own trait collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=945"
  },
  {
    "text": "Think of trait overrides as optional inputs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=948"
  },
  {
    "text": "and the trait collection as the output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=952"
  },
  {
    "text": "Any traits without overrides will inherit from the parent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=954"
  },
  {
    "text": "I’ll go through an example of using trait overrides ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=958"
  },
  {
    "text": "to change the color theme for specific parts of my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=961"
  },
  {
    "text": "On the right, I have an illustration of my app’s trait hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=964"
  },
  {
    "text": "Initially, I haven’t applied any overrides to populate the value for my theme trait, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=969"
  },
  {
    "text": "so all of these trait collections have the default value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=974"
  },
  {
    "text": "which is the standard theme. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=978"
  },
  {
    "text": "I’ll start by applying a trait override to the root of this hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=980"
  },
  {
    "text": "on the window scene. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=983"
  },
  {
    "text": "The traitOverrides property leverages the UIMutableTraits protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=987"
  },
  {
    "text": "to allow you to easily set trait values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=991"
  },
  {
    "text": "Therefore, you can set override values for custom traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=994"
  },
  {
    "text": "with standard property syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=998"
  },
  {
    "text": "using the extension to UIMutableTraits I explained earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1000"
  },
  {
    "text": "By setting the theme to pastel on the trait overrides of the window scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1004"
  },
  {
    "text": "all of the windows, view controllers, and views inside of that window scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1009"
  },
  {
    "text": "now inherit the pastel value in their trait collections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1013"
  },
  {
    "text": "So by setting the theme in one place at the root of the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1017"
  },
  {
    "text": "I’ve changed the base value that gets propagated ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1021"
  },
  {
    "text": "to everything in that hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1023"
  },
  {
    "text": "For example, I can read the theme from the trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1026"
  },
  {
    "text": "of any view controller inside that window scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1029"
  },
  {
    "text": "and get back pastel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1032"
  },
  {
    "text": "Then I can use the traitOverrides property on a view deeper in the hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1035"
  },
  {
    "text": "to modify the theme for that view and anything below it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1041"
  },
  {
    "text": "Here I’m setting a monochrome theme trait override for this view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1045"
  },
  {
    "text": "So this monochrome value is what is inherited by its subview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1050"
  },
  {
    "text": "overriding the pastel value from higher up in the hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1054"
  },
  {
    "text": "You may not see changes to trait overrides reflected immediately ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1058"
  },
  {
    "text": "in the trait collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1062"
  },
  {
    "text": "For example, because views update their trait collection right before layout, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1063"
  },
  {
    "text": "modifications to a view’s trait overrides aren't reflected in its trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1068"
  },
  {
    "text": "until just before it runs layoutSubviews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1073"
  },
  {
    "text": "The traitOverrides property also allows you to check ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1077"
  },
  {
    "text": "whether overrides are applied and remove overrides altogether. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1080"
  },
  {
    "text": "Here is an example of toggling an override ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1084"
  },
  {
    "text": "by using the contains method to check if an override exists, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1087"
  },
  {
    "text": "and the remove method to remove the override entirely. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1091"
  },
  {
    "text": "Each time this method is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1095"
  },
  {
    "text": "it will either remove the existing override ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1097"
  },
  {
    "text": "or apply a new theme override when there wasn't one already. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1100"
  },
  {
    "text": "Trait overrides are an input mechanism to set values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1105"
  },
  {
    "text": "To read trait values, always use the traitCollection property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1109"
  },
  {
    "text": "Reading from traitOverrides when no override has been set ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1114"
  },
  {
    "text": "will raise an exception.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1117"
  },
  {
    "text": "Here are some performance considerations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1121"
  },
  {
    "text": "to keep in mind as you use trait overrides. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1123"
  },
  {
    "text": "First, each trait override has a small cost, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1125"
  },
  {
    "text": "so only set trait overrides on the places you need them ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1129"
  },
  {
    "text": "and avoid setting trait overrides that aren’t used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1132"
  },
  {
    "text": "And every time you change a trait override, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1135"
  },
  {
    "text": "the system needs to update the trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1138"
  },
  {
    "text": "of any descendants in the hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1140"
  },
  {
    "text": "Therefore, minimize the number of times that you change trait overrides. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1143"
  },
  {
    "text": "Finally, trait overrides applied near the root of the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1148"
  },
  {
    "text": "such as on the window scene or window, affect everything beneath them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1152"
  },
  {
    "text": "This is very useful, and there are many great use cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1157"
  },
  {
    "text": "for applying trait overrides to the window scene or window. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1160"
  },
  {
    "text": "However, when a trait only affects a few views deep in the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1164"
  },
  {
    "text": "then apply the trait override to the nearest common ancestor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1169"
  },
  {
    "text": "of those views instead, such as a common superview or a view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1172"
  },
  {
    "text": "That way, you aren’t paying the cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1177"
  },
  {
    "text": "of propagating the trait to your entire hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1179"
  },
  {
    "text": "when only a small portion of the hierarchy uses that data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1182"
  },
  {
    "text": "Now that you know how to define traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1187"
  },
  {
    "text": "and populate data for them in the hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1189"
  },
  {
    "text": "you need to handle when they change value.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1191"
  },
  {
    "text": "traitCollectionDidChange is deprecated in iOS 17. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1196"
  },
  {
    "text": "When you implement traitCollectionDidChange, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1200"
  },
  {
    "text": "the system doesn’t know which traits you actually care about, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1202"
  },
  {
    "text": "so it has to call that method every time that any trait changes value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1206"
  },
  {
    "text": "However, most classes only use a handful of traits ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1211"
  },
  {
    "text": "and don’t care about changes to any others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1215"
  },
  {
    "text": "This is why traitCollectionDidChange doesn’t scale ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1218"
  },
  {
    "text": "as you add more and more custom traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1221"
  },
  {
    "text": "In its place, there are new trait registration APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1225"
  },
  {
    "text": "that are more flexible and improve performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1229"
  },
  {
    "text": "By registering for changes to specific traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1233"
  },
  {
    "text": "the system knows exactly which traits you depend on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1235"
  },
  {
    "text": "The new APIs allow you to receive callbacks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1240"
  },
  {
    "text": "using the target-action pattern or a closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1242"
  },
  {
    "text": "And because you no longer need to override a method in your subclass, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1246"
  },
  {
    "text": "it’s now easy to observe trait changes from anywhere. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1250"
  },
  {
    "text": "I'll start by explaining how to update ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1254"
  },
  {
    "text": "an existing implementation of traitCollectionDidChange. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1256"
  },
  {
    "text": "Here’s my existing implementation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1260"
  },
  {
    "text": "Note how I check whether the horizontalSizeClass trait changed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1262"
  },
  {
    "text": "before calling updateViews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1266"
  },
  {
    "text": "as that method only relies on this one trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1268"
  },
  {
    "text": "If you need to keep using traitCollectionDidChange ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1272"
  },
  {
    "text": "because you are deploying your app to older iOS versions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1275"
  },
  {
    "text": "make sure that your implementation checks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1278"
  },
  {
    "text": "whether the specific traits that you care about have changed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1280"
  },
  {
    "text": "Now I'll replace this implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1284"
  },
  {
    "text": "with the new trait registration methods in iOS 17. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1286"
  },
  {
    "text": "I'll start with the closure-based method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1291"
  },
  {
    "text": "I call registerForTraitChanges and pass an array of traits to register for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1293"
  },
  {
    "text": "There are new UITrait symbols for all of the system traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1299"
  },
  {
    "text": "such as this one for horizontal size class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1303"
  },
  {
    "text": "Then I pass a closure that is called when those specific traits change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1306"
  },
  {
    "text": "The closure is not called for changes to any other traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1312"
  },
  {
    "text": "so there's no need to compare old and new trait values here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1315"
  },
  {
    "text": "The object whose traits have changed is passed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1320"
  },
  {
    "text": "as the first parameter to the closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1322"
  },
  {
    "text": "Use this parameter so you don’t have to capture ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1325"
  },
  {
    "text": "a weak reference to that object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1328"
  },
  {
    "text": "When you're registering for trait changes on self, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1331"
  },
  {
    "text": "always write \"self: Self\" here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1334"
  },
  {
    "text": "You can also observe trait changes for a different trait environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1339"
  },
  {
    "text": "Here I'm registering for changes to two traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1344"
  },
  {
    "text": "the horizontal size class ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1347"
  },
  {
    "text": "and the ContainedInSettings custom trait I defined earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1348"
  },
  {
    "text": "The closure executes when either of these traits change on this other view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1353"
  },
  {
    "text": "I write the type of the view I'm registering on ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1359"
  },
  {
    "text": "as the first parameter of the closure.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1362"
  },
  {
    "text": "Here's an example of the new target-action-based method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1367"
  },
  {
    "text": "Call registerForTraitChanges and pass an array of traits to register for ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1371"
  },
  {
    "text": "as well as the target and action method to call on changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1375"
  },
  {
    "text": "The target parameter is optional. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1380"
  },
  {
    "text": "If you omit it, the target will be the same object ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1382"
  },
  {
    "text": "that registerForTraitChanges is called on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1385"
  },
  {
    "text": "In this case, that's self. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1388"
  },
  {
    "text": "As with the closure method, you can also register for changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1391"
  },
  {
    "text": "on other trait environments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1395"
  },
  {
    "text": "Here I’m registering for trait changes on another view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1397"
  },
  {
    "text": "but setting up a call to a method on self named handleTraitChange. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1401"
  },
  {
    "text": "When registering for trait changes using a target-action, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1406"
  },
  {
    "text": "your action method can have zero, one, or two parameters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1410"
  },
  {
    "text": "The first parameter is always the object whose traits are changing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1416"
  },
  {
    "text": "Use this parameter to get the new traitCollection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1420"
  },
  {
    "text": "The second parameter will always be the previous trait collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1424"
  },
  {
    "text": "for that object before the change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1428"
  },
  {
    "text": "In addition to registering for individual traits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1432"
  },
  {
    "text": "you can also register using new semantic sets of system traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1435"
  },
  {
    "text": "For example, there is systemTraitsAffectingColorAppearance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1440"
  },
  {
    "text": "which returns any system traits that may affect ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1444"
  },
  {
    "text": "the way system dynamic colors resolve. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1446"
  },
  {
    "text": "There’s also systemTraitsAffectingImageLookup, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1450"
  },
  {
    "text": "which returns the subset of system traits that are considered ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1453"
  },
  {
    "text": "when you load an image using UIImage(named:). ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1456"
  },
  {
    "text": "Pass either of these sets directly to registerForTraitChanges ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1460"
  },
  {
    "text": "to perform custom invalidation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1464"
  },
  {
    "text": "Registrations are cleaned up automatically ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1468"
  },
  {
    "text": "when you use the new methods to register for trait changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1470"
  },
  {
    "text": "If you have an advanced use case, you can manually unregister ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1474"
  },
  {
    "text": "using a token that is returned by each of the registration methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1478"
  },
  {
    "text": "But these cases are very rare, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1483"
  },
  {
    "text": "so generally you should just ignore the return value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1484"
  },
  {
    "text": "when you call registerForTraitChanges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1487"
  },
  {
    "text": "As you adopt the new trait registration APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1491"
  },
  {
    "text": "there are two best practices to keep in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1494"
  },
  {
    "text": "First, register only for the traits that you actually depend on ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1496"
  },
  {
    "text": "so you don't perform work when unrelated traits change value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1500"
  },
  {
    "text": "Finally, try to invalidate in response to trait changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1504"
  },
  {
    "text": "without updating immediately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1508"
  },
  {
    "text": "For example, if you use traits inside of the layoutSubviews method ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1510"
  },
  {
    "text": "of a view subclass, call setNeedsLayout to invalidate for a trait change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1514"
  },
  {
    "text": "This schedules the view to receive layoutSubviews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1519"
  },
  {
    "text": "but doesn’t perform the update immediately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1522"
  },
  {
    "text": "Now that you can propagate your own data using the trait system in UIKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1525"
  },
  {
    "text": "it unlocks an entirely new way for you to seamlessly pass data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1529"
  },
  {
    "text": "between UIKit and SwiftUI components in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1533"
  },
  {
    "text": "Custom traits in UIKit are very similar to custom environment keys in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1537"
  },
  {
    "text": "You can bridge them to access the same data from both UIKit and SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1543"
  },
  {
    "text": "Whether you’re embedding SwiftUI components inside of UIKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1548"
  },
  {
    "text": "or UIKit components inside of SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1552"
  },
  {
    "text": "bridged data passes seamlessly between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1555"
  },
  {
    "text": "You can read and write to the same underlying data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1559"
  },
  {
    "text": "using the trait APIs in your UIKit code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1562"
  },
  {
    "text": "and the environment APIs in your SwiftUI code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1564"
  },
  {
    "text": "It’s incredibly easy to take the new color theme trait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1568"
  },
  {
    "text": "I defined for my app’s UIKit code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1572"
  },
  {
    "text": "and bridge it to a corresponding environment key in SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1575"
  },
  {
    "text": "Assuming I have a custom trait in UIKit and a custom environment key in SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1579"
  },
  {
    "text": "that represent the same data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1584"
  },
  {
    "text": "all I need to do to bridge them is add a conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1586"
  },
  {
    "text": "to the UITraitBridgedEnvironmentKey protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1589"
  },
  {
    "text": "To do this, I implement one method ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1593"
  },
  {
    "text": "to read the trait from UIKit and return the value to SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1595"
  },
  {
    "text": "and one method to write the SwiftUI environment value to the UIKit trait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1600"
  },
  {
    "text": "And now both the UIKit trait and SwiftUI environment key access unified storage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1606"
  },
  {
    "text": "so I can read or write to the same data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1612"
  },
  {
    "text": "from components written using either framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1615"
  },
  {
    "text": "Here is an example of how I can use the bridged trait and environment key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1619"
  },
  {
    "text": "At the root of my app, I apply a trait override for the theme trait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1624"
  },
  {
    "text": "onto the UIKit window scene. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1629"
  },
  {
    "text": "This propagates the monochrome theme value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1632"
  },
  {
    "text": "to everything contained inside that window scene. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1634"
  },
  {
    "text": "Then, deeper down inside of a window in that window scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1638"
  },
  {
    "text": "I have a UIKit collection view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1642"
  },
  {
    "text": "This collection view contains cells, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1644"
  },
  {
    "text": "which are configured using UIHostingConfiguration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1646"
  },
  {
    "text": "to display a SwiftUI view in each cell. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1650"
  },
  {
    "text": "Inside the SwiftUI CellView, I have a property named \"theme,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1654"
  },
  {
    "text": "which uses the Environment property wrapper ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1658"
  },
  {
    "text": "to read the value from the SwiftUI environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1660"
  },
  {
    "text": "The value in the environment corresponds to the same value ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1664"
  },
  {
    "text": "for the bridged trait in UIKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1668"
  },
  {
    "text": "And finally, I use the theme property to control the color of text ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1671"
  },
  {
    "text": "inside this SwiftUI view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1675"
  },
  {
    "text": "Because SwiftUI automatically tracks data dependencies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1678"
  },
  {
    "text": "if the theme trait override all the way up on the UIKit window scene changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1681"
  },
  {
    "text": "to a different value, my SwiftUI cell view will automatically update ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1686"
  },
  {
    "text": "to reflect the new theme. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1691"
  },
  {
    "text": "The bridging also works in the other direction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1694"
  },
  {
    "text": "Here I have a SwiftUI view that displays my app’s settings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1697"
  },
  {
    "text": "I use the environment modifier to set the standard theme, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1702"
  },
  {
    "text": "which will apply to everything in the settings controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1706"
  },
  {
    "text": "This is conceptually equivalent to applying a trait override in UIKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1710"
  },
  {
    "text": "Then, in the UIKit-based Settings view controller ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1715"
  },
  {
    "text": "contained inside the UIViewControllerRepresentable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1718"
  },
  {
    "text": "I read the theme value from the bridged trait ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1722"
  },
  {
    "text": "and use it to update the title displayed for this view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1725"
  },
  {
    "text": "This is how easy it is to seamlessly access data ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1730"
  },
  {
    "text": "using bridged UIKit traits and SwiftUI environment keys. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1733"
  },
  {
    "text": "Now that you've learned about these powerful new features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1738"
  },
  {
    "text": "go and find places in your app where you can leverage the trait system ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1741"
  },
  {
    "text": "to automatically propagate data by defining your own custom traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1744"
  },
  {
    "text": "Next, adopt the new traitOverrides property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1750"
  },
  {
    "text": "to easily modify data in the trait hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1754"
  },
  {
    "text": "And then use the more flexible trait registration APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1757"
  },
  {
    "text": "to create precise dependencies on the exact traits you use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1761"
  },
  {
    "text": "Finally, bridge your custom UIKit traits with custom SwiftUI environment keys ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1765"
  },
  {
    "text": "so that your data flows seamlessly between UIKit and SwiftUI components in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1770"
  },
  {
    "text": "Now it’s up to you to unleash the power of traits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1776"
  },
  {
    "text": "Thanks for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1781"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10057/?time=1783"
  }
]