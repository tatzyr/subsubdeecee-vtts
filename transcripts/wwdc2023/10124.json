[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=0"
  },
  {
    "text": "Hello, and welcome. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=10"
  },
  {
    "text": "I'm Varun Subramanian, an Engineer in GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=11"
  },
  {
    "text": "Graphics, and Display Software group at Apple.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=15"
  },
  {
    "text": "This session is the second part of a 3-part series ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=18"
  },
  {
    "text": "on bringing your high-end games to Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=22"
  },
  {
    "text": "The first session, covers how you can evaluate your game and \"make a game plan\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=24"
  },
  {
    "text": "This session focuses on your shaders and how to improve their flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=29"
  },
  {
    "text": "and speed with some of the new Metal compiler tools, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=34"
  },
  {
    "text": "including new ways to convert your shaders to Metal intermediate representation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=36"
  },
  {
    "text": "and how to avoid on-device compilation by finalizing GPU binaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=41"
  },
  {
    "text": "during your games' build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=46"
  },
  {
    "text": "The Metal compiler toolchain helps you compile the shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=48"
  },
  {
    "text": "that power your game and Metal now makes that easier than ever.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=51"
  },
  {
    "text": "Creating the Metal IR on device is suboptimal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=56"
  },
  {
    "text": "because it adds compilation overhead ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=59"
  },
  {
    "text": "before the GPU can do the work you need it to do. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=61"
  },
  {
    "text": "Metal provides you with tools necessary to generate Metal IR ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=64"
  },
  {
    "text": "from your Metal Shading Language ahead of time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=68"
  },
  {
    "text": "That Metal IR is stored as a part of a Metal library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=71"
  },
  {
    "text": "You should always aim to generate your Metal libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=75"
  },
  {
    "text": "using the Metal compiler toolchain ahead of time.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=77"
  },
  {
    "text": "However, when coming from another API and shading language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=82"
  },
  {
    "text": "you need a way to get them to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=85"
  },
  {
    "text": "If you are a new comer to the Mac, you now have Metal Shader Converter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=87"
  },
  {
    "text": "This simplifies your shader pipelines ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=92"
  },
  {
    "text": "and allows you to package the generated Metal libraries directly in your bundle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=94"
  },
  {
    "text": "avoiding on-device generation of Metal IR. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=99"
  },
  {
    "text": "The Metal libraries generated are the same as those generated from the Metal compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=103"
  },
  {
    "text": "allowing your converted shaders to natively integrate with the Metal API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=107"
  },
  {
    "text": "Use the new tool to convert your existing shaders to Metal libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=112"
  },
  {
    "text": "that you then ship with your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=116"
  },
  {
    "text": "Metal Shader Converter provides a robust feature set ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=118"
  },
  {
    "text": "to improve the experience of converting your shaders to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=121"
  },
  {
    "text": "It consumes DXIL to produce Metal IR. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=125"
  },
  {
    "text": "You use it alongside the open source DXC compiler tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=129"
  },
  {
    "text": "to build an end-to-end shader pipeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=132"
  },
  {
    "text": "Converting from DXIL to Metal IR is very fast ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=134"
  },
  {
    "text": "because Metal shader converter performs the conversion at the binary level. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=138"
  },
  {
    "text": "As a result you will have reduced shader asset build times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=142"
  },
  {
    "text": "It also enables you to leverage advanced features of Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=146"
  },
  {
    "text": "You can do this because of the rich feature set of Metal shader converter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=151"
  },
  {
    "text": "which supports all the traditional and modern shader stages ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=155"
  },
  {
    "text": "of your existing DXIL shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=158"
  },
  {
    "text": "Using Metal shader converter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=161"
  },
  {
    "text": "you can convert your shaders for the traditional graphics pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=163"
  },
  {
    "text": "including tessellation and geometry shaders to Metal libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=166"
  },
  {
    "text": "It also supports compute shaders, as well as more recently introduced ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=171"
  },
  {
    "text": "ray tracing stages and shaders and amplification and mesh shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=175"
  },
  {
    "text": "Now, I'll walk you through how to use the Metal shader converter.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=180"
  },
  {
    "text": "There are two scenarios where you may want to convert your shaders via command line. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=186"
  },
  {
    "text": "Using the command line tool via terminal is a good mechanism ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=190"
  },
  {
    "text": "to convert one shader at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=194"
  },
  {
    "text": "If you have multiple shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=196"
  },
  {
    "text": "you can create a shell script that calls Metal shader converter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=198"
  },
  {
    "text": "to transform multiple shaders for you automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=201"
  },
  {
    "text": "Converting your shader using the command line tool is very easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=205"
  },
  {
    "text": "After you set up DXC and shader converter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=209"
  },
  {
    "text": "start by compiling your HLSL shader to DXIL. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=212"
  },
  {
    "text": "DXC requires you to specify the entry point to compile, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=216"
  },
  {
    "text": "the type of shader, and the output file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=219"
  },
  {
    "text": "Next, call shader converter on the DXIL file just created ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=222"
  },
  {
    "text": "and specify the output Metal library to create. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=226"
  },
  {
    "text": "By default, shader converter generates a Metal library ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=229"
  },
  {
    "text": "for the latest version of macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=233"
  },
  {
    "text": "as well as JSON file with useful reflection data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=235"
  },
  {
    "text": "At runtime, you pass this Metal library to the Metal device ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=238"
  },
  {
    "text": "to load it and build pipeline state objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=242"
  },
  {
    "text": "There are two other scenarios where the command line interface ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=245"
  },
  {
    "text": "may not be the best choice for your workflow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=248"
  },
  {
    "text": "Some game engines have custom asset build programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=251"
  },
  {
    "text": "that compile and package shaders into game-specific formats. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=254"
  },
  {
    "text": "Also, in some situations, as you bootstrap your game for Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=258"
  },
  {
    "text": "you may also want to see how well your shaders are working on the platform ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=262"
  },
  {
    "text": "before you fully turn them into Metal libraries ahead of time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=266"
  },
  {
    "text": "For these last two cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=270"
  },
  {
    "text": "you need a way to better integrate Metal shader converter into your workflow.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=271"
  },
  {
    "text": "To accomplish this, use the Metal shader converter dynamic library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=276"
  },
  {
    "text": "It exposes all the same functionality as the CLI tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=281"
  },
  {
    "text": "to help you generate Metal libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=284"
  },
  {
    "text": "The library offers a pure C interface and just like the CLI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=287"
  },
  {
    "text": "it is available on both macOS and Windows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=290"
  },
  {
    "text": "so it's easy to integrate into your existing workflows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=293"
  },
  {
    "text": "After you've converted your shaders to Metal IR, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=297"
  },
  {
    "text": "to integrate them into your game ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=300"
  },
  {
    "text": "you create pipeline states and bind resources to them.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=302"
  },
  {
    "text": "In your shaders, you typically define resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=306"
  },
  {
    "text": "as global variables and assign \"register\" declarations to them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=309"
  },
  {
    "text": "From the API side, your game either binds resources directly to these slots, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=313"
  },
  {
    "text": "or defines an explicit memory layout via \"root signatures\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=318"
  },
  {
    "text": "Shader converter can help you bring this model over, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=322"
  },
  {
    "text": "because Metal has a very flexible binding model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=325"
  },
  {
    "text": "The tool lays out these resources into Argument buffers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=328"
  },
  {
    "text": "In this model, you bind one argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=332"
  },
  {
    "text": "directly to your pipeline and reference your resources through it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=335"
  },
  {
    "text": "There are two layout modes for this \"top level\" Argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=339"
  },
  {
    "text": "that you can choose from, to best suit your game.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=342"
  },
  {
    "text": "The simplest layout you can create is an automatic one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=346"
  },
  {
    "text": "where shader converter places your resources one after the other. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=349"
  },
  {
    "text": "Once you create a pipeline state containing your shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=353"
  },
  {
    "text": "you bind a single argument buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=356"
  },
  {
    "text": "and through it you reference all your resources. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=358"
  },
  {
    "text": "Alternatively, shader converter supports explicitly defining a layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=362"
  },
  {
    "text": "that matches your root signature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=366"
  },
  {
    "text": "Use this mode when your game needs to specify separate textures and samplers ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=368"
  },
  {
    "text": "into their own resource tables or if your game uses bindless resources. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=373"
  },
  {
    "text": "You may also embed raw buffers and 32-bit constants ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=378"
  },
  {
    "text": "directly into the top-level argument buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=381"
  },
  {
    "text": "shown as 0's and 1's in this diagram.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=383"
  },
  {
    "text": "Now, the top-level Argument Buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=387"
  },
  {
    "text": "is a resource shared between the CPU and the GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=389"
  },
  {
    "text": "so as you write into it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=392"
  },
  {
    "text": "you need to coordinate access to its memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=394"
  },
  {
    "text": "to avoid a race condition that may cause visual corruption. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=396"
  },
  {
    "text": "You don't need to serialize CPU and GPU work to avoid this race condition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=400"
  },
  {
    "text": "One way to avoid this is to use a bump allocator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=404"
  },
  {
    "text": "This can be a large Metal buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=408"
  },
  {
    "text": "from which you sub-allocate different resources each frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=409"
  },
  {
    "text": "You then shadow the backing buffer for each frame in flight ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=413"
  },
  {
    "text": "that your game handles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=416"
  },
  {
    "text": "For more details on bump allocator implementation, check out our sample code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=418"
  },
  {
    "text": "For best Argument buffer management practices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=423"
  },
  {
    "text": "check out the bindless session from last year and Metal documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=425"
  },
  {
    "text": "The binding model is not the only place where Metal shader converter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=429"
  },
  {
    "text": "can help you bring your shaders to the Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=433"
  },
  {
    "text": "Mapping certain shader stages can be challenging ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=436"
  },
  {
    "text": "due to differences in graphics APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=439"
  },
  {
    "text": "For example, you may have pipelines ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=441"
  },
  {
    "text": "that leverage traditional geometry and tessellation stages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=443"
  },
  {
    "text": "Metal is a modern API, and it offers features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=447"
  },
  {
    "text": "such as viewport ID and amplification ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=450"
  },
  {
    "text": "that makes older, less efficient stages from other graphics APIs unnecessary.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=453"
  },
  {
    "text": "However, when your game relies on these pipelines for traditional effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=459"
  },
  {
    "text": "that enhance some surfaces, like the grass rendered in this image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=463"
  },
  {
    "text": "converting them by hand is costly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=467"
  },
  {
    "text": "Metal shader converter helps you bring these pipelines to Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=469"
  },
  {
    "text": "by mapping them to Mesh Shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=473"
  },
  {
    "text": "a modern and more efficient graphics API construct.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=475"
  },
  {
    "text": "The tool does the heavy lifting to bring these complex pipelines ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=478"
  },
  {
    "text": "over to Metal easily, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=481"
  },
  {
    "text": "by mapping each stage to a Metal IR representation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=483"
  },
  {
    "text": "This includes the tessellator, which is traditionally a fixed function operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=487"
  },
  {
    "text": "To support this workflow, this year Metal adds the capability ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=492"
  },
  {
    "text": "of linking visible functions to the \"object and mesh\" stages of Mesh shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=496"
  },
  {
    "text": "After you've compiled your shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=501"
  },
  {
    "text": "you use them to build a \"Metal Mesh RenderPipeline Descriptor\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=504"
  },
  {
    "text": "and compile it into a \"Metal Render Pipeline state\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=507"
  },
  {
    "text": "When Metal receives the request to build this pipeline state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=511"
  },
  {
    "text": "it compiles and links all the Metal IR, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=514"
  },
  {
    "text": "baking all functions into a single pipeline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=516"
  },
  {
    "text": "completely avoiding function call overhead ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=519"
  },
  {
    "text": "and maximizing performance during runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=521"
  },
  {
    "text": "Notice the power and flexibility of Metal visible functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=524"
  },
  {
    "text": "that allows you to build this elaborate render pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=527"
  },
  {
    "text": "containing these shading stages with their supplemental functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=530"
  },
  {
    "text": "While building these mesh pipelines is straightforward, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=534"
  },
  {
    "text": "every pipeline has to follow a series of steps in precise order.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=536"
  },
  {
    "text": "The shader converter runtime helps you build these complex pipelines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=541"
  },
  {
    "text": "It even emulates draw calls by dispatching mesh shading work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=545"
  },
  {
    "text": "For more information, please consult the Metal Shader Converter documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=549"
  },
  {
    "text": "Now that your shaders are on Metal and you are running your pipeline states, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=554"
  },
  {
    "text": "here are some tips to help you get great performance and visual correctness.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=557"
  },
  {
    "text": "Shaders compiled with shader converter reference Metal resources indirectly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=563"
  },
  {
    "text": "To flag resource residency to Metal, you would call \"useResource\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=567"
  },
  {
    "text": "However, useResource is an expensive call when used in excess. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=572"
  },
  {
    "text": "Use the plural useResources to provide several resources at once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=577"
  },
  {
    "text": "or consider using Metal heaps via useHeap to flag residency ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=581"
  },
  {
    "text": "of several resources in a single call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=585"
  },
  {
    "text": "The pipeline objects are cached when Metal compiles them for the first time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=588"
  },
  {
    "text": "automatically reducing compilation-based hitching on subsequent runs of your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=592"
  },
  {
    "text": "Binary archives can also help you here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=597"
  },
  {
    "text": "To get more out of the GPU and customize the Metal IR ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=600"
  },
  {
    "text": "for higher performance, shader converter provides you options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=603"
  },
  {
    "text": "There are customizations on compatibility, GPU family, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=607"
  },
  {
    "text": "vertex fetch behavior, entry point naming, reflection, and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=612"
  },
  {
    "text": "Here's one additional optimization opportunity.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=617"
  },
  {
    "text": "I mentioned earlier that shader converter joins the Metal compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=621"
  },
  {
    "text": "as another mechanism to produce \"Metal Libraries\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=624"
  },
  {
    "text": "from your existing shader IR. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=627"
  },
  {
    "text": "Metal uses these to feed various graphics pipeline stages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=629"
  },
  {
    "text": "Since everything is Metal IR, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=634"
  },
  {
    "text": "you can mix and match \"Metal Libraries\" coming from Metal shader converter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=636"
  },
  {
    "text": "and from the Metal Compiler in a single app and even in a single pipeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=640"
  },
  {
    "text": "Metal shading language also enables you to access unique features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=644"
  },
  {
    "text": "like programmable blending. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=648"
  },
  {
    "text": "Use this approach to make the most out of Apple's GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=650"
  },
  {
    "text": "You can even take advantage of unique shading functionality ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=654"
  },
  {
    "text": "such as tile shading. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=657"
  },
  {
    "text": "This grants you tremendous flexibility in how you bring your game to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=659"
  },
  {
    "text": "Performance is important but visual correctness of your game is paramount. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=663"
  },
  {
    "text": "HLSL allows seamlessly treating textures as arrays of one element.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=668"
  },
  {
    "text": "To bring over shaders that rely on this behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=673"
  },
  {
    "text": "create your textures as texture arrays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=676"
  },
  {
    "text": "or create \"texture array views\" on your textures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=679"
  },
  {
    "text": "If you are using \"MetalKit Texture Loader\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=682"
  },
  {
    "text": "it can also help you load files as texture arrays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=684"
  },
  {
    "text": "To set up your sampler objects and read from these textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=688"
  },
  {
    "text": "make sure to let Metal know in advance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=691"
  },
  {
    "text": "that you intend to reference samplers in argument buffers by using the property ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=693"
  },
  {
    "text": "supportsArgumentBuffers in the MTL Sampler Descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=698"
  },
  {
    "text": "Now that you are familiar with Integrating shader converter in your workflows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=702"
  },
  {
    "text": "here's how to get it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=705"
  },
  {
    "text": "You can download Metal shader converter from developer.apple.com. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=708"
  },
  {
    "text": "If you are working on your Mac, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=712"
  },
  {
    "text": "get the Metal shader converter for Mac package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=714"
  },
  {
    "text": "If you are working on Windows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=717"
  },
  {
    "text": "it is part of the Metal Developer Tools for Windows package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=718"
  },
  {
    "text": "The beta version of the tool is available now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=722"
  },
  {
    "text": "Both packages contain Metal shader converter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=724"
  },
  {
    "text": "in standalone and library form, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=727"
  },
  {
    "text": "as well as the runtime companion header. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=729"
  },
  {
    "text": "Full documentation as well as a Metal C++ code sample are available now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=732"
  },
  {
    "text": "Use the sample code to explore geometry and tessellation emulation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=737"
  },
  {
    "text": "instanced drawing, and compute shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=741"
  },
  {
    "text": "Converting your shaders to Metal libraries that you ship with your game ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=745"
  },
  {
    "text": "helps you avoid generating those libraries at game run-time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=749"
  },
  {
    "text": "There is one additional optimization you may be able to perform, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=752"
  },
  {
    "text": "which is to compile your GPU binaries ahead of time as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=756"
  },
  {
    "text": "When you build your game, you compile your shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=760"
  },
  {
    "text": "into Metal libraries which still need to be finalized into GPU binaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=763"
  },
  {
    "text": "Usually your game does this at launch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=767"
  },
  {
    "text": "resulting in longer loading screens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=770"
  },
  {
    "text": "If you defer finalizing GPU binaries at runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=773"
  },
  {
    "text": "it may result in frame drops as the game compiles new pipelines on demand. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=776"
  },
  {
    "text": "The Metal GPU Binary compiler can help you solve this ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=781"
  },
  {
    "text": "by allowing you to generate your shader binaries at game build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=785"
  },
  {
    "text": "By removing the need to generate shader binaries during gameplay, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=790"
  },
  {
    "text": "your players benefit from reduced app load time ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=793"
  },
  {
    "text": "without incurring in additional GPU hitches.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=796"
  },
  {
    "text": "To take advantage of this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=800"
  },
  {
    "text": "you can add another step to your workflow to finalize your Metal libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=802"
  },
  {
    "text": "into Metal binary archives at build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=806"
  },
  {
    "text": "On device GPU Binary compilation happens when you create a pipeline state ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=809"
  },
  {
    "text": "from a descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=813"
  },
  {
    "text": "This descriptor not only references functions from a Metal library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=815"
  },
  {
    "text": "but it also provides other critical information to Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=819"
  },
  {
    "text": "such as the color format of its render attachments ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=822"
  },
  {
    "text": "and the vertex layout descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=825"
  },
  {
    "text": "The GPU binaries are generated just-in-time as part of the PSO creation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=827"
  },
  {
    "text": "Binary archives allow you to take control of when that compilation occurs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=834"
  },
  {
    "text": "In order to produce GPU binaries ahead of time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=838"
  },
  {
    "text": "you provide both your existing Metal Library ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=842"
  },
  {
    "text": "as well as a pipeline configuration script referencing those libraries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=844"
  },
  {
    "text": "You then provide both of them to metal-tt, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=848"
  },
  {
    "text": "producing a binary archive with GPU binaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=851"
  },
  {
    "text": "To develop the pipeline script, you produce a JSON script ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=855"
  },
  {
    "text": "with pipeline configurations similar to the Metal API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=858"
  },
  {
    "text": "This Metal code generates a render pipeline descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=862"
  },
  {
    "text": "and alongside is its JSON equivalent representation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=866"
  },
  {
    "text": "For your pipeline script, add the Metal library path ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=869"
  },
  {
    "text": "as well as its fragment and vertex function names. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=873"
  },
  {
    "text": "You also specify any other pipeline state configuration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=876"
  },
  {
    "text": "That's it, you now have a Metal script that you can use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=879"
  },
  {
    "text": "You can find additional info about the JSON schema ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=883"
  },
  {
    "text": "in Metal's developer documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=886"
  },
  {
    "text": "Your ahead-of-time shader compilation workflow ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=888"
  },
  {
    "text": "may not be geared to generate pipeline script files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=891"
  },
  {
    "text": "For these cases, there's an alternative way to produce them.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=893"
  },
  {
    "text": "You can record Metal binary archives while running your game on device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=898"
  },
  {
    "text": "These archives include the corresponding pipeline scripts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=902"
  },
  {
    "text": "If you harvest these archives from device, you can then use \"metal-source\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=906"
  },
  {
    "text": "to extract their embedded pipeline scripts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=910"
  },
  {
    "text": "You then update the paths to your Metal libraries in the extracted scripts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=913"
  },
  {
    "text": "For more information, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=917"
  },
  {
    "text": "please refer to our talks on how you can \"Build GPU binaries\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=918"
  },
  {
    "text": "as well as \"Discover compilation workflows\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=922"
  },
  {
    "text": "Because GPU binaries are tailored to each GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=926"
  },
  {
    "text": "\"metal-tt\" produces different versions of the binaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=929"
  },
  {
    "text": "for you to distribute to your players, based on their device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=932"
  },
  {
    "text": "Metal-tt helps you manage this complexity ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=936"
  },
  {
    "text": "by encapsulating all the different GPU binaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=939"
  },
  {
    "text": "neatly into Metal binary archives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=942"
  },
  {
    "text": "This way, when your app loads that binary archive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=944"
  },
  {
    "text": "Metal automatically picks the appropriate binary for your players. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=947"
  },
  {
    "text": "You can also encapsulate multiple sets of binaries into a single binary archive.",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=952"
  },
  {
    "text": "Now that you are able to produce binary archives ahead of time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=958"
  },
  {
    "text": "here are some best practices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=961"
  },
  {
    "text": "When your players run a Metal app with pre-compiled GPU Binaries, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=964"
  },
  {
    "text": "Metal searches the packaged binary archive for the necessary GPU binary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=968"
  },
  {
    "text": "If Metal finds no match in the archive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=972"
  },
  {
    "text": "it automatically falls back to on-device compilation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=974"
  },
  {
    "text": "Your app will still look correct, but this may delay your submissions to the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=978"
  },
  {
    "text": "You can test if your binary archives contain the pipelines you expect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=982"
  },
  {
    "text": "using the option \"FailOnBinaryArchiveMiss\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=986"
  },
  {
    "text": "You can easily specify the FailOnBinaryArchiveMiss option ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=990"
  },
  {
    "text": "when creating a Metal pipeline state object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=994"
  },
  {
    "text": "In case of a binary archive miss, when you have this option set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=996"
  },
  {
    "text": "Metal skips the on-device compilation and returns a nil pipeline state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1000"
  },
  {
    "text": "Once your binary archives are ready with support for all target devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1005"
  },
  {
    "text": "you're ready for deployment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1008"
  },
  {
    "text": "Not all of your players may be on the latest OS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1011"
  },
  {
    "text": "To ensure all users benefit from binary archives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1014"
  },
  {
    "text": "generate an archive for each major OS version and store it into your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1017"
  },
  {
    "text": "To accomplish this, check the OS version of your player's device ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1023"
  },
  {
    "text": "and select the appropriate binary archive ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1027"
  },
  {
    "text": "to associate with your Pipeline Descriptors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1030"
  },
  {
    "text": "When your players update their OS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1033"
  },
  {
    "text": "their binary archives may require recompilation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1036"
  },
  {
    "text": "for forward compatibility, but Metal has you covered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1038"
  },
  {
    "text": "Metal identifies the unpackaged binary archives ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1042"
  },
  {
    "text": "in app bundle on your player's device ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1045"
  },
  {
    "text": "and upgrades them automatically in the background ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1048"
  },
  {
    "text": "after an OS update or game install. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1050"
  },
  {
    "text": "In summary, \"metal\" compiler and \"metal-shaderconverter\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1053"
  },
  {
    "text": "are your go-to tools, to produce Metal libraries ahead of time ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1057"
  },
  {
    "text": "that you can then ship with your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1060"
  },
  {
    "text": "Use the \"metal compiler\" when compiling MSL source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1062"
  },
  {
    "text": "and \"metal-shaderconverter\" when your shaders are in HLSL. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1066"
  },
  {
    "text": "metal-tt enables you to finalize Metal libraries into GPU binaries, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1070"
  },
  {
    "text": "tailored to the various GPUs in the Metal ecosystem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1074"
  },
  {
    "text": "Finally, metal-source helps you harvest pipeline scripts ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1078"
  },
  {
    "text": "from your existing MacOS games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1082"
  },
  {
    "text": "The vast majority of these tools, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1085"
  },
  {
    "text": "as well as the rest of the GPU binary compiler toolchain, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1087"
  },
  {
    "text": "now support Windows, in addition to macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1090"
  },
  {
    "text": "making it easier than ever to integrate them into your existing workflows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1093"
  },
  {
    "text": "To wrap up: Metal Shader Converter is a new tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1098"
  },
  {
    "text": "to help you bring your shaders that were developed in another shading language ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1101"
  },
  {
    "text": "to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1105"
  },
  {
    "text": "The GPU binary compiler and its toolchain, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1106"
  },
  {
    "text": "which is now available on Windows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1109"
  },
  {
    "text": "can finalize your Metal libraries into GPU binaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1111"
  },
  {
    "text": "With these tools, you now have everything you need ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1115"
  },
  {
    "text": "to bring your shaders to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1118"
  },
  {
    "text": "There's still more to share with you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1120"
  },
  {
    "text": "Part 3 of the series focuses on optimizing a high-end Metal application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1122"
  },
  {
    "text": "Be sure to check it out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1127"
  },
  {
    "text": "Thanks for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1128"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023-10124/?time=1130"
  }
]