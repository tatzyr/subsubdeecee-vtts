[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=0"
  },
  {
    "text": "Si: Hi, I'm Si from the Swift on Server team at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=10"
  },
  {
    "text": "In this video, I'll show you how Swift OpenAPI Generator ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=14"
  },
  {
    "text": "can help you work with server APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=17"
  },
  {
    "text": "Whether extending an iOS app or writing a back-end server in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=20"
  },
  {
    "text": "this new Swift package plug-in can streamline your workflow ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=23"
  },
  {
    "text": "and simplify your codebase. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=26"
  },
  {
    "text": "This year, we've seen how it's easier than ever to work with data on the device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=29"
  },
  {
    "text": "But sometimes the feature you want to implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=34"
  },
  {
    "text": "will require dynamic content that's provided by a server component. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=36"
  },
  {
    "text": "This means making network requests to a remote service, calling its API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=39"
  },
  {
    "text": "But in order to make the right network request, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=44"
  },
  {
    "text": "there's a lot to consider. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=47"
  },
  {
    "text": "What's the base URL of the server? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=49"
  },
  {
    "text": "What path components make up the API endpoint? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=52"
  },
  {
    "text": "What HTTP method should you use? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=55"
  },
  {
    "text": "And how should you provide parameters? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=58"
  },
  {
    "text": "These are just some of the questions to consider when calling a server API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=61"
  },
  {
    "text": "For more involved APIs, you'll need to consider much more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=65"
  },
  {
    "text": "So how do you answer these questions? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=69"
  },
  {
    "text": "Most services have some form of API documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=73"
  },
  {
    "text": "But handwritten documentation can often be inaccurate or outdated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=76"
  },
  {
    "text": "especially if the service is rapidly evolving. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=80"
  },
  {
    "text": "If you have access to the source code, you could look at the implementation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=84"
  },
  {
    "text": "or you could manually experiment with the API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=87"
  },
  {
    "text": "But this can lead to an incomplete understanding of the service behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=90"
  },
  {
    "text": "You can search support forums or rely on other institutional knowledge. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=95"
  },
  {
    "text": "But even the most well-meaning individuals may be under-informed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=99"
  },
  {
    "text": "or provide inconsistent answers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=102"
  },
  {
    "text": "leaving you with more questions than you started with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=104"
  },
  {
    "text": "While these resources offer some help, it's not a complete picture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=108"
  },
  {
    "text": "Using a more formal and structured description of APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=112"
  },
  {
    "text": "can help eliminate ambiguity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=115"
  },
  {
    "text": "Meet OpenAPI, an open specification for defining HTTP services.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=118"
  },
  {
    "text": "OpenAPI is an industry standard, and its widespread adoption ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=124"
  },
  {
    "text": "and maturity means there are established conventions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=128"
  },
  {
    "text": "and best practices to help you work with APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=131"
  },
  {
    "text": "With OpenAPI, you document the service behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=134"
  },
  {
    "text": "in either YAML or JSON, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=137"
  },
  {
    "text": "and these machine-readable formats allow you to benefit ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=140"
  },
  {
    "text": "from a rich ecosystem of tooling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=142"
  },
  {
    "text": "There's tools for test generation, runtime validation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=145"
  },
  {
    "text": "interoperability, and much more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=148"
  },
  {
    "text": "One thing that OpenAPI is particularly known for ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=152"
  },
  {
    "text": "is tooling to generate interactive documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=154"
  },
  {
    "text": "But the core motivation of OpenAPI is code generation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=158"
  },
  {
    "text": "which allows adopters to use spec-driven development. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=161"
  },
  {
    "text": "Remember our example API endpoint? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=166"
  },
  {
    "text": "Well, upon receiving this request, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=168"
  },
  {
    "text": "the server returns a personalized greeting in an JSON object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=171"
  },
  {
    "text": "Let's take a look at the code we'd need to write to call this API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=175"
  },
  {
    "text": "without using code generation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=178"
  },
  {
    "text": "First, we need to know the base URL of the server ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=182"
  },
  {
    "text": "to convert into its components. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=184"
  },
  {
    "text": "Then, we append the path component to construct the API endpoint ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=187"
  },
  {
    "text": "and specify the parameter as a query item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=190"
  },
  {
    "text": "Then we construct a URLRequest ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=194"
  },
  {
    "text": "and use URLSession to make the HTTP request.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=196"
  },
  {
    "text": "Then we must validate the responses of the expected type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=201"
  },
  {
    "text": "has the expected status code and content type.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=204"
  },
  {
    "text": "Then we must decode the bytes from the response, which we do by defining ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=209"
  },
  {
    "text": "a Swift type that conforms to Decodable and using JSONDecoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=212"
  },
  {
    "text": "Finally, we return the message property from the response.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=217"
  },
  {
    "text": "Writing this code is fine, but this was just a single request ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=222"
  },
  {
    "text": "for a trivial API operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=225"
  },
  {
    "text": "Many real-world APIs have hundreds of operations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=227"
  },
  {
    "text": "with rich request and response types, header fields, parameters, and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=230"
  },
  {
    "text": "Writing this code for every operation becomes repetitive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=234"
  },
  {
    "text": "verbose, and error-prone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=238"
  },
  {
    "text": "And all of this ceremony in your codebase detracts from the core logic of your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=240"
  },
  {
    "text": "With OpenAPI, you can use tooling to generate most of this code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=245"
  },
  {
    "text": "so you can focus on the code your users interact with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=248"
  },
  {
    "text": "We'll use our example API to explore an OpenAPI document. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=252"
  },
  {
    "text": "Every OpenAPI document declares the version ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=257"
  },
  {
    "text": "of the OpenAPI specification it's using. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=259"
  },
  {
    "text": "It provides metadata about the API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=262"
  },
  {
    "text": "including its name and version and a list of server URLs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=264"
  },
  {
    "text": "It then lists the paths and HTTP methods that make up the API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=269"
  },
  {
    "text": "This API has just one operation, named getGreeting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=274"
  },
  {
    "text": "which defines the behavior for the GET method on the greet path. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=277"
  },
  {
    "text": "In this example, the server always responds with 200, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=281"
  },
  {
    "text": "which is the HTTP status code for OK, and returns a JSON object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=284"
  },
  {
    "text": "which is defined using JSON Schema.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=289"
  },
  {
    "text": "For this illustration, we've kept it simple, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=293"
  },
  {
    "text": "but operations can have multiple responses, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=295"
  },
  {
    "text": "with different status codes and content types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=297"
  },
  {
    "text": "which allows you to document all scenarios, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=300"
  },
  {
    "text": "including what happens when there's an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=302"
  },
  {
    "text": "And if the operation accepts parameters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=305"
  },
  {
    "text": "these can also be included in the OpenAPI document.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=307"
  },
  {
    "text": "This operation supports one optional query parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=311"
  },
  {
    "text": "called \"name\", a string value that's used to personalize the greeting.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=315"
  },
  {
    "text": "With the help of Swift OpenAPI Generator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=321"
  },
  {
    "text": "we can make the same API call with much less code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=324"
  },
  {
    "text": "We can use type-safe inputs ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=328"
  },
  {
    "text": "and the output values are rich enum types ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=330"
  },
  {
    "text": "so the compiler can help us ensure we handle every documented response ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=332"
  },
  {
    "text": "and content type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=336"
  },
  {
    "text": "And the associated value in the response body is a value type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=338"
  },
  {
    "text": "with type-safe properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=341"
  },
  {
    "text": "All the ceremony associated with encoding the input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=344"
  },
  {
    "text": "making the request, parsing the response, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=347"
  },
  {
    "text": "and decoding the output is all handled by generated code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=350"
  },
  {
    "text": "Swift OpenAPI Generator is a Swift Package plug-in ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=357"
  },
  {
    "text": "which runs at build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=360"
  },
  {
    "text": "This means the generated code is always in sync with the OpenAPI document ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=362"
  },
  {
    "text": "and doesn't need to be committed to your source repository. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=366"
  },
  {
    "text": "To learn more about Swift package plug-ins, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=369"
  },
  {
    "text": "check out the session named \"Meet Swift package plugins.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=371"
  },
  {
    "text": "Let's take a look at how we can use Swift OpenAPI Generator ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=376"
  },
  {
    "text": "in a simple iOS app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=379"
  },
  {
    "text": "For this, we'll need an API that we can call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=381"
  },
  {
    "text": "In this demo, we'll call a simple API ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=385"
  },
  {
    "text": "that returns one of the ten cat face emojis at random. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=388"
  },
  {
    "text": "We'll start with the template SwiftUI app ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=392"
  },
  {
    "text": "and replace the sample content with a big emoji ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=394"
  },
  {
    "text": "and a button which fetches a new one from the server on each tap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=397"
  },
  {
    "text": "We already have a server running, listening on localhost, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=401"
  },
  {
    "text": "which we can query from the Terminal using curl.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=404"
  },
  {
    "text": "There's no denying that this is a great API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=414"
  },
  {
    "text": "But what makes it even better is that it's defined using OpenAPI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=416"
  },
  {
    "text": "Let's use a very different kind of cat to show the OpenAPI document ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=420"
  },
  {
    "text": "for this service.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=424"
  },
  {
    "text": "This API has a single operation named getEmoji ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=428"
  },
  {
    "text": "which we'll call from our app to update the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=432"
  },
  {
    "text": "To get started, we'll switch over to Xcode.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=436"
  },
  {
    "text": "This sample iOS app has a basic UI, defined using SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=440"
  },
  {
    "text": "which we can see in the Xcode preview. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=444"
  },
  {
    "text": "In the next few minutes, we'll replace the UI components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=447"
  },
  {
    "text": "with dynamic content, which we'll fetch from the server. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=450"
  },
  {
    "text": "And we'll use Swift OpenAPI Generator to simplify the code ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=453"
  },
  {
    "text": "we have to write by hand to make the API calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=457"
  },
  {
    "text": "We'll start by adding the required package dependencies to our project. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=461"
  },
  {
    "text": "Then we'll configure our target to use the plugin for code generation ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=465"
  },
  {
    "text": "and add the OpenAPI document and plug-in config file ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=468"
  },
  {
    "text": "to our target source directory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=471"
  },
  {
    "text": "Once the project is configured, we'll replace the UI components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=474"
  },
  {
    "text": "and use the generated Client type to make the API calls to the server. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=477"
  },
  {
    "text": "To configure your app to use Swift OpenAPI Generator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=482"
  },
  {
    "text": "navigate to the Project Editor, select the Package Dependencies tab, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=485"
  },
  {
    "text": "and click to add a new dependency.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=489"
  },
  {
    "text": "For this demo, we're using a local package collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=493"
  },
  {
    "text": "but you can find the package URLs in the session notes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=496"
  },
  {
    "text": "First, we'll add a dependency on swift-openapi-generator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=500"
  },
  {
    "text": "which provides the package plug-in.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=504"
  },
  {
    "text": "Then we'll add a dependency on swift-openapi-runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=511"
  },
  {
    "text": "which provides the common types and abstractions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=514"
  },
  {
    "text": "used by the generated code.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=516"
  },
  {
    "text": "And because the generated code isn't tied to any specific HTTP client library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=527"
  },
  {
    "text": "we need to choose an integration package for the library we'd like to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=531"
  },
  {
    "text": "We're building an iOS app, so we'll use the URLSession package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=535"
  },
  {
    "text": "but check out the documentation for other examples ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=539"
  },
  {
    "text": "and how to write your own. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=542"
  },
  {
    "text": "With the dependencies in place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=545"
  },
  {
    "text": "we can configure the target to use the OpenAPI Generator plugin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=546"
  },
  {
    "text": "In Target Settings, select Build Phases ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=550"
  },
  {
    "text": "and expand the section named \"Run Build Tool Plug-ins\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=553"
  },
  {
    "text": "Click to add a new plug-in and select OpenAPIGenerator from the list.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=557"
  },
  {
    "text": "The plug-in expects two input files in your target source directory: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=565"
  },
  {
    "text": "the OpenAPI document and a plug-in config file, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=569"
  },
  {
    "text": "which I'll add to the project now.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=572"
  },
  {
    "text": "The plug-in configuration is written using a simple YAML schema ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=583"
  },
  {
    "text": "which specifies what code the plug-in should generate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=587"
  },
  {
    "text": "In this case, we'll generate \"types\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=590"
  },
  {
    "text": "which are the reusable types derived from the OpenAPI document. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=592"
  },
  {
    "text": "And we'll also generate the client code, which can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=595"
  },
  {
    "text": "to make API calls with any HTTP client. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=598"
  },
  {
    "text": "We'll switch back to ContentView.swift, which will recompile our project ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=601"
  },
  {
    "text": "so the generated code is ready to use in our app.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=605"
  },
  {
    "text": "As a security measure, you'll be asked to trust the plug-in ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=611"
  },
  {
    "text": "the first time you use it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=614"
  },
  {
    "text": "Now we've recompiled the project, we can replace the UI components ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=618"
  },
  {
    "text": "and use the generated Client type to make API calls to the server ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=621"
  },
  {
    "text": "and update the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=624"
  },
  {
    "text": "We'll start by adding a new state property to the view for our emoji ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=628"
  },
  {
    "text": "and initialize it with a placeholder value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=631"
  },
  {
    "text": "Then, we'll replace the globe image with a Text view containing the emoji, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=634"
  },
  {
    "text": "replace the \"Hello, world\" message with a button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=638"
  },
  {
    "text": "and set the button style for our view.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=641"
  },
  {
    "text": "The generated code provides a type, named Client, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=651"
  },
  {
    "text": "that you can use to make API calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=654"
  },
  {
    "text": "But first, we need to import the OpenAPI runtime and transport modules.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=656"
  },
  {
    "text": "Now we can add a client property to our view and an initializer ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=662"
  },
  {
    "text": "which configures it to use the localhost server URL, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=665"
  },
  {
    "text": "defined in the OpenAPI document.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=668"
  },
  {
    "text": "Now we'll add a function that makes an API call to the server ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=674"
  },
  {
    "text": "using this client.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=677"
  },
  {
    "text": "That's all the code we need to write by hand to make the API request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=688"
  },
  {
    "text": "Everything else is handled by the generated code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=692"
  },
  {
    "text": "The response is an enum value of a type that models all the documented responses ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=695"
  },
  {
    "text": "and content types which encourages us ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=700"
  },
  {
    "text": "to handle all scenarios. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=702"
  },
  {
    "text": "So we need to extract the emoji from the response body ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=704"
  },
  {
    "text": "using a switch statement.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=706"
  },
  {
    "text": "Something's missing here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=710"
  },
  {
    "text": "The compiler has told us we haven't handled every scenario. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=711"
  },
  {
    "text": "We'll let Xcode fill in the missing switch case.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=715"
  },
  {
    "text": "In the event the server responds with something ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=721"
  },
  {
    "text": "that isn't specified in its OpenAPI document, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=723"
  },
  {
    "text": "you still have a chance to handle that gracefully. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=726"
  },
  {
    "text": "For this demo, we'll print a warning to the console ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=729"
  },
  {
    "text": "and update our emoji to something other than a cat.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=732"
  },
  {
    "text": "Now we can call this function when our button is tapped.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=740"
  },
  {
    "text": "And we can use our button to fetch a new cat emoji and update our UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=746"
  },
  {
    "text": "As new features are added to the server, its API will evolve. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=753"
  },
  {
    "text": "And if the server is documented using OpenAPI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=757"
  },
  {
    "text": "then Swift OpenAPI Generator makes it simple ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=760"
  },
  {
    "text": "to use these new features from your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=762"
  },
  {
    "text": "Let's walk through an example of how to update the app ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=765"
  },
  {
    "text": "as the OpenAPI document evolves.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=768"
  },
  {
    "text": "When it comes to emojis, more is more, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=772"
  },
  {
    "text": "so we've extended the service API to take a new optional query parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=774"
  },
  {
    "text": "count, which can be used to fetch multiple emojis.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=777"
  },
  {
    "text": "We'll extend our app with another button that fetches three cats instead of one.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=782"
  },
  {
    "text": "First, we'll add a parameter to the OpenAPI document. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=790"
  },
  {
    "text": "And once we recompile the project, the parameter will be available ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=794"
  },
  {
    "text": "to use in the app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=797"
  },
  {
    "text": "Then we'll create a new button that makes an API call using this parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=799"
  },
  {
    "text": "We'll start by adding the new parameter to the OpenAPI document.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=804"
  },
  {
    "text": "This parameter is named \"count\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=812"
  },
  {
    "text": "It's an optional parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=815"
  },
  {
    "text": "It's provided as part of the URL query and is an integer value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=816"
  },
  {
    "text": "Let's head back to ContentView.swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=821"
  },
  {
    "text": "and extend the updateEmoji function to also take a parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=822"
  },
  {
    "text": "And let's use this parameter when making the API call.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=830"
  },
  {
    "text": "We'll duplicate the button and change the label to \"More cats\".",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=841"
  },
  {
    "text": "When this button is tapped, we'll call the same function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=849"
  },
  {
    "text": "but this time with a count of three.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=852"
  },
  {
    "text": "Now in the preview, we can tap “Get cat\" to get one cat ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=858"
  },
  {
    "text": "or “More cats\" to get three. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=862"
  },
  {
    "text": "All this time, we've been making requests to a real server, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=865"
  },
  {
    "text": "which isn't always practical or desirable, especially during development. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=868"
  },
  {
    "text": "Because the generated Client type conforms to a Swift protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=873"
  },
  {
    "text": "it's easy for us to write a mock that requires no network connection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=876"
  },
  {
    "text": "or transport library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=879"
  },
  {
    "text": "The generated protocol is named APIProtocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=881"
  },
  {
    "text": "so we'll start by defining a new MockClient type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=884"
  },
  {
    "text": "that adopts this protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=887"
  },
  {
    "text": "Then we'll update our view to be generic over any type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=889"
  },
  {
    "text": "that conforms to APIProtocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=892"
  },
  {
    "text": "and update the initializers to support dependency injection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=894"
  },
  {
    "text": "Then we'll use the MockClient when previewing the UI in Xcode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=898"
  },
  {
    "text": "We'll start by declaring our MockClient type.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=902"
  },
  {
    "text": "Because we declared that this type adopts APIProtocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=907"
  },
  {
    "text": "the compiler will ensure it satisfies the protocol requirements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=910"
  },
  {
    "text": "We'll let Xcode add the missing handler for the API operation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=914"
  },
  {
    "text": "And we'll add the business logic, which returns robot emojis, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=920"
  },
  {
    "text": "to distinguish it from the real service.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=923"
  },
  {
    "text": "Now we can make our view generic over types that conform to this protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=928"
  },
  {
    "text": "and update the client property to use the generic type parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=933"
  },
  {
    "text": "We'll add an initializer, which takes a client as a parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=939"
  },
  {
    "text": "and we'll update the existing initializer with a generic where clause, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=943"
  },
  {
    "text": "so if no client is provided, we'll use the same one as before.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=946"
  },
  {
    "text": "When our app is launched, it will continue to use the real server, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=953"
  },
  {
    "text": "but now we can inject the MockClient when previewing the UI in Xcode.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=957"
  },
  {
    "text": "Now when we tap our buttons in the UI preview, we'll get robots ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=962"
  },
  {
    "text": "instead of cats and won't require a network connection or a running server.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=966"
  },
  {
    "text": "Until we added the mock client, our iOS app was making requests ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=973"
  },
  {
    "text": "to a real server running on my local machine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=976"
  },
  {
    "text": "This server was also written in Swift with the help of Swift OpenAPI Generator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=980"
  },
  {
    "text": "The server is a simple Swift package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=985"
  },
  {
    "text": "which uses the Swift OpenAPI Generator package plug-in for code generation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=987"
  },
  {
    "text": "To use the generated server code, we defined a type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=993"
  },
  {
    "text": "conforming to the generated protocol named APIProtocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=995"
  },
  {
    "text": "and implemented just the business logic for our API operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=999"
  },
  {
    "text": "And to configure the server, we used a generated function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1003"
  },
  {
    "text": "registerHandlers, which connects the incoming HTTP requests ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1006"
  },
  {
    "text": "for the API operations to our handlers that provide the business logic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1010"
  },
  {
    "text": "Let's take a look.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1014"
  },
  {
    "text": "If we expand the console, we can see the actual requests from our demo iOS app.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1018"
  },
  {
    "text": "And this is all the Swift code we needed to write by hand to implement the server. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1024"
  },
  {
    "text": "Instead of using OpenAPI to just document this service, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1029"
  },
  {
    "text": "we started with the OpenAPI document and used Swift OpenAPI Generator ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1033"
  },
  {
    "text": "to simplify writing a server that implements the API specification.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1037"
  },
  {
    "text": "We have defined a type that conforms to the generated APIProtocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1042"
  },
  {
    "text": "and provides just the business logic for our API operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1045"
  },
  {
    "text": "And we used a generated function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1050"
  },
  {
    "text": "to register its methods with the HTTP server ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1051"
  },
  {
    "text": "for the API endpoints. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1054"
  },
  {
    "text": "In this demo, we're using Vapor, an open source web framework for Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1056"
  },
  {
    "text": "But the generated code can be used with any web framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1060"
  },
  {
    "text": "that provides an integration package for Swift OpenAPI Generator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1063"
  },
  {
    "text": "Check out the documentation for other options ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1067"
  },
  {
    "text": "and how you can write your own.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1069"
  },
  {
    "text": "In our main function, we create a new Vapor application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1073"
  },
  {
    "text": "which we use to create an OpenAPI transport. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1077"
  },
  {
    "text": "Then we create an instance of our handler type ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1080"
  },
  {
    "text": "and use the generated registerHandlers function ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1082"
  },
  {
    "text": "to set up the routing within the HTTP server ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1084"
  },
  {
    "text": "for each of our API operations, which we'd otherwise have to do manually. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1087"
  },
  {
    "text": "Finally, we run the Vapor app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1092"
  },
  {
    "text": "in the same way as if we had manually configured it.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1094"
  },
  {
    "text": "Swift is a great language for server development, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1098"
  },
  {
    "text": "and if you'd like to learn more about writing back-end services in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1101"
  },
  {
    "text": "check out the session named \"Use Xcode for server-side development.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1104"
  },
  {
    "text": "Let's take a look at how the package is configured to use Swift OpenAPI Generator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1110"
  },
  {
    "text": "The server is implemented as a Swift package ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1115"
  },
  {
    "text": "and is defined using a Package.swift file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1118"
  },
  {
    "text": "This package has a single executable target, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1121"
  },
  {
    "text": "called CatService, which makes use of the Swift OpenAPI Generator plugin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1124"
  },
  {
    "text": "The generated server code depends on common types and abstractions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1128"
  },
  {
    "text": "from the runtime library and can be used with any web framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1132"
  },
  {
    "text": "that provides an integration package, so this target has dependencies ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1135"
  },
  {
    "text": "on swift-openapi-runtime, swift-openapi-vapor, and vapor itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1138"
  },
  {
    "text": "In the target source directory, we added the OpenAPI document, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1144"
  },
  {
    "text": "which is the same one we used in our demo iOS app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1147"
  },
  {
    "text": "and the plug-in config file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1150"
  },
  {
    "text": "For this target, we're generating the types and the server stubs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1153"
  },
  {
    "text": "Let's see how spec-driven development can make it simpler ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1157"
  },
  {
    "text": "to add new features to this service.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1160"
  },
  {
    "text": "Cat emojis are a great, but lots of evidence suggests ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1164"
  },
  {
    "text": "that the internet was primarily built for the exchange of cat videos, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1168"
  },
  {
    "text": "so we'll add that feature to our server.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1171"
  },
  {
    "text": "With spec-driven development, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1175"
  },
  {
    "text": "adding a new API operation requires just two steps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1176"
  },
  {
    "text": "First, we add the new operation to the OpenAPI document. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1180"
  },
  {
    "text": "Then, because the generated protocol now has a new function requirement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1184"
  },
  {
    "text": "the compiler will insist we define a method on our handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1188"
  },
  {
    "text": "and implement the business logic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1190"
  },
  {
    "text": "Before we start, we'll need a cat video, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1193"
  },
  {
    "text": "which I've added to the Resources folder for our target.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1195"
  },
  {
    "text": "We'll head over to the OpenAPI document and add the new operation.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1206"
  },
  {
    "text": "This operation is called getClip and has a binary response ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1212"
  },
  {
    "text": "with a content type indicating the response body contains video data.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1216"
  },
  {
    "text": "When we try to recompile our package, it will fail.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1222"
  },
  {
    "text": "That's because our handler no longer conforms to the generated protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1227"
  },
  {
    "text": "because it doesn't provide a function for the new operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1230"
  },
  {
    "text": "We'll let Xcode fill in a protocol stub for us ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1234"
  },
  {
    "text": "and we'll provide the business logic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1237"
  },
  {
    "text": "which reads the bytes from the video resource file ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1239"
  },
  {
    "text": "and returns an OK response, with a binary body. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1241"
  },
  {
    "text": "Note the type-safe generated code only allows returning ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1244"
  },
  {
    "text": "a binary response body from this function, because that's what's specified ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1247"
  },
  {
    "text": "in the OpenAPI document for this operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1251"
  },
  {
    "text": "When we recompile our package, it'll succeed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1255"
  },
  {
    "text": "and we can relaunch our server. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1257"
  },
  {
    "text": "And if we switch over to Safari, we can test our new API endpoint.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1260"
  },
  {
    "text": "So we've seen how documenting services using OpenAPI ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1273"
  },
  {
    "text": "can help eliminate ambiguity and enable spec-driven development. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1276"
  },
  {
    "text": "We've shown how Swift OpenAPI Generator can simplify ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1280"
  },
  {
    "text": "working with server APIs in your iOS app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1283"
  },
  {
    "text": "Finally, we've seen how Swift's language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1287"
  },
  {
    "text": "and the growing Swift-on-server ecosystem ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1289"
  },
  {
    "text": "make it a great choice for implementing back-end services. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1292"
  },
  {
    "text": "And that's why Swift OpenAPI Generator is open source ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1295"
  },
  {
    "text": "and available on GitHub, where you can learn more ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1298"
  },
  {
    "text": "and even contribute to the project as it continues to grow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1300"
  },
  {
    "text": "Thanks for watching this session. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1304"
  },
  {
    "text": "That's all for meow!",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10171/?time=1305"
  }
]