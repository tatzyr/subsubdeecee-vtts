[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=0"
  },
  {
    "text": "Spencer: Hello, everyone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=10"
  },
  {
    "text": "My name is Spencer Lewson. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=11"
  },
  {
    "text": "Today I'd like to tell you about how the keyboard has changed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=13"
  },
  {
    "text": "over the last few years ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=16"
  },
  {
    "text": "and how you can design your app to \"keep up with the keyboard.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=17"
  },
  {
    "text": "As you all know, the iPhone's keyboard was originally introduced ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=21"
  },
  {
    "text": "back in 2007, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=25"
  },
  {
    "text": "and it's evolved substantially since then. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=27"
  },
  {
    "text": "It now supports many different languages, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=29"
  },
  {
    "text": "each of which may have a different size for their layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=31"
  },
  {
    "text": "And of course, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=35"
  },
  {
    "text": "the keyboard comes on many different devices as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=36"
  },
  {
    "text": "But just as how the keyboard has evolved, so has the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=39"
  },
  {
    "text": "which has added exciting features like multitasking and the floating keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=43"
  },
  {
    "text": "allowing the keyboard to transcend the bounds of the app.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=46"
  },
  {
    "text": "Last year, we introduced Stage Manager, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=50"
  },
  {
    "text": "which unlocks a whole new level of productivity on iPad. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=53"
  },
  {
    "text": "Now with multiple scenes running on multiple displays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=56"
  },
  {
    "text": "the use of a hardware keyboard and mouse is now more appealing than ever. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=59"
  },
  {
    "text": "So that's why today we'd like to tell you ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=63"
  },
  {
    "text": "about how we're making this wide variety of keyboard scenarios possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=66"
  },
  {
    "text": "with a rearchitecture of the keyboard and how that may affect your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=70"
  },
  {
    "text": "We'd also like to share some tips and tricks for designing your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=74"
  },
  {
    "text": "to work as seamlessly with the keyboard as possible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=77"
  },
  {
    "text": "with as little effort as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=80"
  },
  {
    "text": "And finally, we'd like to introduce some exciting new capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=83"
  },
  {
    "text": "in the world of text entry. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=86"
  },
  {
    "text": "So let's talk about the new out of process keyboard.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=89"
  },
  {
    "text": "Taking the keyboard out of your app process allows us to improve security ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=92"
  },
  {
    "text": "and ensure the privacy of what users type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=96"
  },
  {
    "text": "It also frees up memory in your apps and throughout the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=99"
  },
  {
    "text": "as there's now only one keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=102"
  },
  {
    "text": "instead of multiple instances running in multiple apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=104"
  },
  {
    "text": "And this new architecture allows us to design for the future ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=108"
  },
  {
    "text": "and implement exciting new functionality. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=111"
  },
  {
    "text": "So let's talk a bit about how that works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=114"
  },
  {
    "text": "Prior to iOS 17, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=117"
  },
  {
    "text": "the keyboard's views and logic were executing within your apps process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=119"
  },
  {
    "text": "But new on iPhone on iOS 17, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=123"
  },
  {
    "text": "the keyboard has been moved to its own process, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=125"
  },
  {
    "text": "running almost completely outside your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=128"
  },
  {
    "text": "I'm excited to show you how all of this works, but first ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=130"
  },
  {
    "text": "let's talk about how it works in process so we can see the differences.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=134"
  },
  {
    "text": "With in process, your app would first request the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=138"
  },
  {
    "text": "such as by invoking becomeFirstResponder in response to a touch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=142"
  },
  {
    "text": "and this would kick off a series of synchronous pieces of work ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=145"
  },
  {
    "text": "to initialize all the views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=148"
  },
  {
    "text": "Once that was completed, the system would perform the animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=151"
  },
  {
    "text": "to bring up the keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=155"
  },
  {
    "text": "Your app would then sit idle or perform any app side work ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=157"
  },
  {
    "text": "until a touch event comes in ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=161"
  },
  {
    "text": "and a text insertion is generated.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=164"
  },
  {
    "text": "With out of process, this now works a bit differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=168"
  },
  {
    "text": "When your app requests the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=172"
  },
  {
    "text": "again, such as by invoking becomeFirstResponder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=174"
  },
  {
    "text": "your app will perform some initial computations ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=177"
  },
  {
    "text": "and then keyboard process will asynchronously initialize its UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=179"
  },
  {
    "text": "While that happens, the app will sit idle ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=184"
  },
  {
    "text": "or perform app side work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=186"
  },
  {
    "text": "Once it's ready, it will bring up the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=188"
  },
  {
    "text": "and coordinate the animations between the two processes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=191"
  },
  {
    "text": "Now that the keyboard UI is up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=194"
  },
  {
    "text": "it will await any touch events that occur within the bounds of the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=196"
  },
  {
    "text": "and convert them into text insertions for your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=200"
  },
  {
    "text": "For the majority of apps, these changes are completely transparent ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=203"
  },
  {
    "text": "and require no adoption from you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=207"
  },
  {
    "text": "Though, aspects of this new asynchronous approach now exist ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=209"
  },
  {
    "text": "throughout the entire keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=212"
  },
  {
    "text": "and can introduce some slight differences in timing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=213"
  },
  {
    "text": "So if your app is especially sensitive to the timing of text entry, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=216"
  },
  {
    "text": "selection changes, or any other text related operations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=219"
  },
  {
    "text": "you should keep this new architecture in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=223"
  },
  {
    "text": "So now that we've talked a bit about the diversity of the typing on iOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=226"
  },
  {
    "text": "let's talk about some of the relatively new scenarios to account for ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=230"
  },
  {
    "text": "when designing your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=233"
  },
  {
    "text": "Of course, we're all familiar with the most common use case: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=236"
  },
  {
    "text": "a full screen app with a keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=239"
  },
  {
    "text": "This is a relatively straightforward use case ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=242"
  },
  {
    "text": "where your app and the keyboard are both full screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=244"
  },
  {
    "text": "making adjusting for the keyboard as simple as moving up your views ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=248"
  },
  {
    "text": "by a value that happens to be the height of the keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=251"
  },
  {
    "text": "However, with Stage Manager, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=255"
  },
  {
    "text": "the system is moving away from that model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=257"
  },
  {
    "text": "With advanced multitasking, apps aren't necessarily full screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=260"
  },
  {
    "text": "That means when the keyboard comes up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=264"
  },
  {
    "text": "some special care needs to be taken to adjust the app's views correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=266"
  },
  {
    "text": "That's because the keyboard's scene and the app's scene no longer line up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=270"
  },
  {
    "text": "And some extra transformations need to take place ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=274"
  },
  {
    "text": "to adjust the app appropriately for its context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=277"
  },
  {
    "text": "For instance, in this scenario, the app's adjustment isn't actually Y, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=280"
  },
  {
    "text": "the height of the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=284"
  },
  {
    "text": "it needs to adjust by the intersection of the keyboard and your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=286"
  },
  {
    "text": "shown as Y'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=289"
  },
  {
    "text": "And now there may not even be a single adjustment to calculate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=291"
  },
  {
    "text": "as you may have multiple scenes on screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=294"
  },
  {
    "text": "each with different calculations and adjustments necessary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=297"
  },
  {
    "text": "There's also some recently introduced scenarios with the hardware keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=301"
  },
  {
    "text": "When the hardware keyboard is attached, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=305"
  },
  {
    "text": "the system will present an assistant toolbar in the center of the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=307"
  },
  {
    "text": "When this full sized toolbar is present, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=310"
  },
  {
    "text": "it acts as part of the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=312"
  },
  {
    "text": "so your views should be adjusted out of its way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=314"
  },
  {
    "text": "Using a flick gesture, this toolbar can also be minimized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=317"
  },
  {
    "text": "When outside of Stage Manager, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=320"
  },
  {
    "text": "we're preserving existing behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=322"
  },
  {
    "text": "where this mini toolbar does not act as part of the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=324"
  },
  {
    "text": "and will overlap your views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=326"
  },
  {
    "text": "Users can access the content underneath by dragging the toolbar ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=329"
  },
  {
    "text": "to the other side of the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=332"
  },
  {
    "text": "However, when in Stage Manager, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=334"
  },
  {
    "text": "the mini toolbar does act as part of the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=337"
  },
  {
    "text": "and depending on your use case, you can choose to update scroll offsets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=340"
  },
  {
    "text": "and push up input accessory views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=343"
  },
  {
    "text": "and make any other layout adjustments as you'd like. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=345"
  },
  {
    "text": "Now, we know that there's a lot of scenarios and nuance to account for here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=349"
  },
  {
    "text": "but the good news is that with the right APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=352"
  },
  {
    "text": "the system does most of the work for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=354"
  },
  {
    "text": "So let's talk about the keyboard layout guide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=357"
  },
  {
    "text": "You may be familiar with the keyboard layout guide ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=360"
  },
  {
    "text": "which was introduced in iOS 15. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=362"
  },
  {
    "text": "It provides an easy auto layout guide ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=365"
  },
  {
    "text": "that automatically adjusts for the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=367"
  },
  {
    "text": "and we've been adding to it over the last year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=369"
  },
  {
    "text": "In fact, it's now used by some complex Apple apps, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=371"
  },
  {
    "text": "such as Spotlight and Messages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=375"
  },
  {
    "text": "It's the recommend approach because adopting can be as simple as one line ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=377"
  },
  {
    "text": "to add a constraint between your views and the guide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=382"
  },
  {
    "text": "Now let's talk about exactly what this gets you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=385"
  },
  {
    "text": "The existing default behavior is as follows: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=388"
  },
  {
    "text": "the keyboard layout guide follows the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=391"
  },
  {
    "text": "when it's onscreen and docked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=393"
  },
  {
    "text": "That is to say, when the keyboard is touching the bottom of the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=395"
  },
  {
    "text": "If the keyboard is not docked, such as when it's floating on iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=399"
  },
  {
    "text": "the guide's height will match the view's bottom safe area. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=402"
  },
  {
    "text": "Finally, the guide will track any keyboard dismiss gestures ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=406"
  },
  {
    "text": "once the touch point intersects with the guide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=409"
  },
  {
    "text": "I'm excited to tell you that we've expanded the customization options ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=413"
  },
  {
    "text": "in iOS 17 to allow you to change these ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=416"
  },
  {
    "text": "to get the exact behavior that you want. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=418"
  },
  {
    "text": "There are now three properties on UIKeyboardLayoutGuide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=421"
  },
  {
    "text": "First, followsUndockedKeyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=425"
  },
  {
    "text": "By default, the guide will treat the floating keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=427"
  },
  {
    "text": "or mini toolbar the same as an offscreen keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=429"
  },
  {
    "text": "However, when set to true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=433"
  },
  {
    "text": "the guide will continue to follow the keyboard even when it's floating, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=435"
  },
  {
    "text": "as long as it's over your app's window. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=438"
  },
  {
    "text": "Next is usesBottomSafe area. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=441"
  },
  {
    "text": "By default, the keyboard layout guide will track the height of the safe area ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=444"
  },
  {
    "text": "when the keyboard is dismissed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=447"
  },
  {
    "text": "But when set to false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=449"
  },
  {
    "text": "the usesBottomSafeArea will instead track the bottom of the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=451"
  },
  {
    "text": "which in this case is the bottom of the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=454"
  },
  {
    "text": "When might this be useful? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=457"
  },
  {
    "text": "Well, this will allow you to extend your background ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=459"
  },
  {
    "text": "to cover the bottom of the screen when the keyboard is dismissed ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=461"
  },
  {
    "text": "and also adjust for when the keyboard is brought up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=464"
  },
  {
    "text": "behaving similar to an InputAccessoryView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=467"
  },
  {
    "text": "And actually, that's a really interesting use case for this property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=470"
  },
  {
    "text": "so let's talk about how that could work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=473"
  },
  {
    "text": "Here's the code to get that simple input accessory-like view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=476"
  },
  {
    "text": "with a text field that stays above the bottom safe area ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=479"
  },
  {
    "text": "and a backdrop that extends all the way to the bottom of the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=482"
  },
  {
    "text": "only when the keyboard is dismissed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=485"
  },
  {
    "text": "Note, we'll only be dealing with the vertical constraints here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=487"
  },
  {
    "text": "because they're the interesting ones in this case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=490"
  },
  {
    "text": "First, let's set usesBottomSafeArea to false. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=493"
  },
  {
    "text": "Then, let's tie the top of the text field to the top of the backdrop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=497"
  },
  {
    "text": "using system spacing between the two, just to give it a little padding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=500"
  },
  {
    "text": "Next, make sure the text field is always above the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=505"
  },
  {
    "text": "by constraining the top of the guide to the bottom of the text field, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=508"
  },
  {
    "text": "with at least system spacing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=511"
  },
  {
    "text": "The greater than is important here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=513"
  },
  {
    "text": "When the keyboard is offscreen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=515"
  },
  {
    "text": "the text field is going to need enough flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=516"
  },
  {
    "text": "to stay above the bottom safe area insets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=519"
  },
  {
    "text": "Let's also tie the guide's top anchor to the bottom of the backdrop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=522"
  },
  {
    "text": "This will ensure the backdrop goes all the way to the bottom ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=526"
  },
  {
    "text": "when the guide is offscreen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=528"
  },
  {
    "text": "but only because we've set usesBottomSafeArea to false. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=530"
  },
  {
    "text": "Finally, constrain the bottom safe area to the bottom of the text field, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=534"
  },
  {
    "text": "plus system spacing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=537"
  },
  {
    "text": "And again, we're using greater than constraints here ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=539"
  },
  {
    "text": "to make sure it's flexible enough to follow the keyboard when it comes up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=541"
  },
  {
    "text": "And with that, you have an adaptive view ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=545"
  },
  {
    "text": "that has a backdrop that extends all the way to the bottom of the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=548"
  },
  {
    "text": "but adjusts to keep the text field system spacing above the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=551"
  },
  {
    "text": "and the backdrop at the top of the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=555"
  },
  {
    "text": "just like an input accessory view might.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=557"
  },
  {
    "text": "Third, we have keyboardDismissPadding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=560"
  },
  {
    "text": "This adjusts the parameters of the scroll to dismiss gesture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=563"
  },
  {
    "text": "If you've tried to create an InputAccessory-like view in the past ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=567"
  },
  {
    "text": "using the Keyboard Layout Guide, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=570"
  },
  {
    "text": "you may have noticed that the keyboard dismiss gesture doesn't begin ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=571"
  },
  {
    "text": "until the touch intersects the keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=574"
  },
  {
    "text": "Let's use this new property to fix that.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=577"
  },
  {
    "text": "The keyboardDismissPadding property allows you to specify padding ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=580"
  },
  {
    "text": "above the keyboard that should respond to the keyboard dismiss gesture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=583"
  },
  {
    "text": "This is relatively straightforward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=587"
  },
  {
    "text": "Simply grab the height of your view however you wish ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=589"
  },
  {
    "text": "and set the property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=592"
  },
  {
    "text": "Done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=593"
  },
  {
    "text": "Now the keyboard dismiss gesture begins when the touch intersects with your view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=595"
  },
  {
    "text": "Of course, UIKit isn't the only framework that apps are built with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=600"
  },
  {
    "text": "There's also SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=603"
  },
  {
    "text": "And fortunately, SwiftUI automatically handles the common cases for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=605"
  },
  {
    "text": "With SwiftUI, the keyboard is included as part of the safe area, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=609"
  },
  {
    "text": "which when the keyboard is dismissed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=613"
  },
  {
    "text": "will track the small home affordance at the bottom of the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=615"
  },
  {
    "text": "When the keyboard is brought up, the system will animate ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=618"
  },
  {
    "text": "and adjust the safe area for you, resizing your views automatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=621"
  },
  {
    "text": "so there's not really any keyboard code to write at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=624"
  },
  {
    "text": "Though, you may need to do some work on your layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=627"
  },
  {
    "text": "to make sure that your views are resizing or repositioning in the way you want. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=629"
  },
  {
    "text": "There's a lot of great resources about SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=633"
  },
  {
    "text": "more than I could ever list– ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=635"
  },
  {
    "text": "so to learn more about this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=637"
  },
  {
    "text": "take a look at the documentation linked below. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=638"
  },
  {
    "text": "Now, let's talk about a more manual way of integrating the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=641"
  },
  {
    "text": "the keyboard notifications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=644"
  },
  {
    "text": "Before SwiftUI and keyboard layout guide, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=646"
  },
  {
    "text": "the only way to integrate your keyboard into your application ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=648"
  },
  {
    "text": "was to listen for a set of keyboard notifications– ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=651"
  },
  {
    "text": "willShow, didShow, willHide, didHide– ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=654"
  },
  {
    "text": "and then manually adjust your layout based on the frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=657"
  },
  {
    "text": "and animation information in the notification. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=659"
  },
  {
    "text": "These are still around, but they require more careful handling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=662"
  },
  {
    "text": "since the system isn't doing the work for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=665"
  },
  {
    "text": "And with the introduction of Stage Manager, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=668"
  },
  {
    "text": "we've noticed an increase of a commonly used pattern for that handling ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=669"
  },
  {
    "text": "no longer works 100% of the time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=673"
  },
  {
    "text": "This pattern usually focuses on receiving a keyboard notification ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=676"
  },
  {
    "text": "and using the raw value from the height of the keyboard directly.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=680"
  },
  {
    "text": "Now remember earlier when we were discussing the nuance ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=685"
  },
  {
    "text": "of how the height of the keyboard and your app's position on screen interact? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=687"
  },
  {
    "text": "Let's discuss how this works with notifications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=691"
  },
  {
    "text": "Each notification specifies the expected frame of the keyboard ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=694"
  },
  {
    "text": "relative to the screen coordinates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=697"
  },
  {
    "text": "If the screen's coordinate space and your app's coordinate space match, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=700"
  },
  {
    "text": "such as when the app is full screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=703"
  },
  {
    "text": "the raw height value included in the notification ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=705"
  },
  {
    "text": "will coincidentally result in your views adjusting as expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=707"
  },
  {
    "text": "However, when the screen's coordinate space ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=711"
  },
  {
    "text": "and your app's coordinate space differ, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=713"
  },
  {
    "text": "this raw height value will no longer be the correct value to adjust your views by. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=715"
  },
  {
    "text": "This can result in your views being pushed too high and appear in the wrong place. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=719"
  },
  {
    "text": "Fortunately, there's a few changes that can be made to your notification handling ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=724"
  },
  {
    "text": "to make things work smoothly again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=728"
  },
  {
    "text": "In iOS 16.1, the keyboard notifications began including ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=731"
  },
  {
    "text": "the corresponding UIScreen as the notification's object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=734"
  },
  {
    "text": "First, let's use it to check that the keyboard is appearing ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=738"
  },
  {
    "text": "on the same screen as our app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=741"
  },
  {
    "text": "otherwise no adjustments will be necessary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=742"
  },
  {
    "text": "Next, let's compute a rect to represent the keyboard's placement ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=746"
  },
  {
    "text": "relative to your view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=749"
  },
  {
    "text": "We can do this by retrieving the keyboard's expected end frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=751"
  },
  {
    "text": "the coordinate spaces provided by the notification and your view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=754"
  },
  {
    "text": "and then using them to convert the keyboardFrameEnd ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=758"
  },
  {
    "text": "into your coordinate space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=761"
  },
  {
    "text": "With this new rect, we can determine the necessary offset for your views ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=763"
  },
  {
    "text": "by calculating the intersection of your views and the convertedKeyboardFrameEnd. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=768"
  },
  {
    "text": "If your views and the keyboard are overlapping, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=773"
  },
  {
    "text": "the necessary offset will now be the height of the intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=776"
  },
  {
    "text": "between your views and the keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=779"
  },
  {
    "text": "And with that, you can adjust your constraints or layouts however you like. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=782"
  },
  {
    "text": "Now, with the new out of process architecture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=786"
  },
  {
    "text": "there may be some small changes in behavior with notifications ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=789"
  },
  {
    "text": "you should know about. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=791"
  },
  {
    "text": "So let's take a moment to talk about that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=793"
  },
  {
    "text": "Remember this diagram outlining the lifecycle of the keyboard process? ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=795"
  },
  {
    "text": "Let's zoom in on the animation phase here called \"bring up animation.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=799"
  },
  {
    "text": "In the In-process architecture when your app requests the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=804"
  },
  {
    "text": "the system would synchronously initialize the keyboard UI ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=807"
  },
  {
    "text": "and then post the notifications and perform the animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=810"
  },
  {
    "text": "However, in the new out of process architecture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=814"
  },
  {
    "text": "when your app requests the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=817"
  },
  {
    "text": "the system will asynchronously initialize the keyboard UI ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=819"
  },
  {
    "text": "and then asynchronously post the notifications ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=822"
  },
  {
    "text": "and perform the animations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=824"
  },
  {
    "text": "This introduces some slight differences in timing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=826"
  },
  {
    "text": "so if your app is relying on the timing of the notifications ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=829"
  },
  {
    "text": "as some sort of \"callback\" from invoking becomeFirstResponder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=832"
  },
  {
    "text": "or perhaps performing significant work on the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=835"
  },
  {
    "text": "which could cause the handling of the notifications to be delayed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=838"
  },
  {
    "text": "you should keep this new model in mind, as it may have an effect on your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=841"
  },
  {
    "text": "Now that we've reviewed all these tips and tricks ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=846"
  },
  {
    "text": "to let your users type into your apps as easy as possible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=849"
  },
  {
    "text": "we're excited to introduce a new feature and API ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=852"
  },
  {
    "text": "that makes text entry even faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=855"
  },
  {
    "text": "And that's Inline predictions.",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=857"
  },
  {
    "text": "In iOS 17, the English language keyboard will now provide predictions ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=861"
  },
  {
    "text": "for your next few words right inline with the text field. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=865"
  },
  {
    "text": "These predictions are securely generated on device ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=868"
  },
  {
    "text": "and only use the contextual information provided in the focused text field. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=871"
  },
  {
    "text": "Adopting these predictions is also really easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=875"
  },
  {
    "text": "Here we have the UITextInputTraits protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=878"
  },
  {
    "text": "and as you can see, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=881"
  },
  {
    "text": "a new inlinePredictionType property has been added, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=883"
  },
  {
    "text": "and it comes with a few options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=886"
  },
  {
    "text": "By default, inline prediction will be active in most text input fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=888"
  },
  {
    "text": "but will automatically be disabled ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=892"
  },
  {
    "text": "in fields where predictions aren't appropriate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=894"
  },
  {
    "text": "such as search fields or password fields. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=896"
  },
  {
    "text": "And of course, you can also customize the behavior in your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=898"
  },
  {
    "text": "by explicitly setting the property to yes or no. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=902"
  },
  {
    "text": "And with that, let's recap some key takeaways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=905"
  },
  {
    "text": "Please remember to: ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=909"
  },
  {
    "text": "Design your app to work seamlessly with the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=910"
  },
  {
    "text": "no matter how it appears. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=913"
  },
  {
    "text": "Keep the new out of process keyboard model in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=916"
  },
  {
    "text": "when writing time-sensitive code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=918"
  },
  {
    "text": "And improve your app's experience by adopting APIs that accelerate text entry. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=921"
  },
  {
    "text": "Thanks for keeping up with the keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=926"
  },
  {
    "text": "♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2023/10281/?time=929"
  }
]