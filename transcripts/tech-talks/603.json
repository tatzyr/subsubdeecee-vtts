[
  {
    "text": "In this presentation we will focus on imageblocks, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=1"
  },
  {
    "text": "which allow you to describe image data in tile memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=3"
  },
  {
    "text": "that the GPU can manipulate efficiently. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=6"
  },
  {
    "text": "Imageblocks provide optimized access to image data ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=9"
  },
  {
    "text": "residing in tile memory. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=12"
  },
  {
    "text": "And with the A11 GPU, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=14"
  },
  {
    "text": "we're giving you direct control of it. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=15"
  },
  {
    "text": "You will be able to lay out pixels ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=17"
  },
  {
    "text": "in the way that makes sense to your application, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=19"
  },
  {
    "text": "as well as move data explicitly to and from it. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=22"
  },
  {
    "text": "Imageblocks are deeply integrated ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=26"
  },
  {
    "text": "with fragment processing and the new tile shading stage. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=27"
  },
  {
    "text": "They are also available to traditional compute. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=31"
  },
  {
    "text": "No matter which stage you're in, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=33"
  },
  {
    "text": "imageblocks are recommended for representing your images ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=35"
  },
  {
    "text": "because they optimize access to grids of 2D data. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=37"
  },
  {
    "text": "Imageblocks are a key building block ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=41"
  },
  {
    "text": "for several of the other features we'll discuss ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=42"
  },
  {
    "text": "in this presentation series. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=44"
  },
  {
    "text": "Let's start by defining imageblocks more precisely. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=47"
  },
  {
    "text": "An Imageblock is a 2D data structure in tile memory. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=50"
  },
  {
    "text": "It has width, height, and a pixel depth. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=54"
  },
  {
    "text": "Fragment functions can only access a single pixel ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=57"
  },
  {
    "text": "that corresponds to its location. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=59"
  },
  {
    "text": "Compute kernels, on the other hand, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=62"
  },
  {
    "text": "have access to the entire imageblock. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=64"
  },
  {
    "text": "Each pixel can be quite complex, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=67"
  },
  {
    "text": "consisting of multiple components, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=69"
  },
  {
    "text": "and each component can be addressed ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=71"
  },
  {
    "text": "as its own image plane. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=72"
  },
  {
    "text": "This allows adjacent components to be efficiently stored ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=75"
  },
  {
    "text": "to one or more textures in device memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=78"
  },
  {
    "text": "as bulk operations. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=80"
  },
  {
    "text": "Imageblocks also provide bulk access ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=82"
  },
  {
    "text": "to the GPU's format conversion hardware. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=84"
  },
  {
    "text": "Floating point pixels will be converted to ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=87"
  },
  {
    "text": "the destination texture format when stored to device memory. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=88"
  },
  {
    "text": "Let's now take a closer look at ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=93"
  },
  {
    "text": "one of the benefits of using imageblocks, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=94"
  },
  {
    "text": "accelerating image data movement out of tile memory. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=97"
  },
  {
    "text": "Prior to imageblocks, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=102"
  },
  {
    "text": "you probably moved portions of your textures ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=103"
  },
  {
    "text": "into threadgroup memory before operating on them, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=105"
  },
  {
    "text": "one pixel at a time. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=107"
  },
  {
    "text": "But the GPU didn't understand that you were ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=110"
  },
  {
    "text": "operating on image data, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=111"
  },
  {
    "text": "so you also had to store those pixels back out to ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=113"
  },
  {
    "text": "device memory textures, one pixel at a time. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=115"
  },
  {
    "text": "With imageblocks, you can instead store the image data ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=119"
  },
  {
    "text": "using a single operation, which is much more efficient. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=121"
  },
  {
    "text": "Now let's turn to how you describe ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=126"
  },
  {
    "text": "imageblock properties to Metal. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=127"
  },
  {
    "text": "In a compute pass, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=130"
  },
  {
    "text": "you describe the imageblock's width and height ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=131"
  },
  {
    "text": "using the API shown here. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=133"
  },
  {
    "text": "The dimensions can be different for each dispatch. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=135"
  },
  {
    "text": "The imageblock's pixel depth ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=138"
  },
  {
    "text": "is described in the shading language as a structure. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=139"
  },
  {
    "text": "The entire imageblock is made available as an argument ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=142"
  },
  {
    "text": "whose type is templated by that struct. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=145"
  },
  {
    "text": "Let's take a closer look at the shading language syntax. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=148"
  },
  {
    "text": "In this example, we are describing a pixel ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=152"
  },
  {
    "text": "consisting of three elements, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=154"
  },
  {
    "text": "each with a varying number of components. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=155"
  },
  {
    "text": "The imageblock is made available to the kernel as an argument. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=158"
  },
  {
    "text": "Kernels access any location within the imageblock ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=162"
  },
  {
    "text": "by reference using the data method, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=165"
  },
  {
    "text": "which takes the location as its argument ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=167"
  },
  {
    "text": "and returns a pointer to a new address space ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=169"
  },
  {
    "text": "called threadgroup_imageblock. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=172"
  },
  {
    "text": "With a reference to a particular location, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=174"
  },
  {
    "text": "we can read and write to elements at that location. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=176"
  },
  {
    "text": "I mentioned earlier that imageblocks are laid out ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=181"
  },
  {
    "text": "in planes that can be stored efficiently ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=182"
  },
  {
    "text": "to device memory textures. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=184"
  },
  {
    "text": "In the shading language, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=186"
  },
  {
    "text": "we call adjacent planes that can be stored together a slice. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=188"
  },
  {
    "text": "Let's take a look at an example kernel. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=191"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=194"
  },
  {
    "text": "we've loaded a source texture into an imageblock, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=195"
  },
  {
    "text": "performed some image processing on that block, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=198"
  },
  {
    "text": "and are ready to store the color elements ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=200"
  },
  {
    "text": "out to a destination texture. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=202"
  },
  {
    "text": "We only need one thread of our threadgroup ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=204"
  },
  {
    "text": "to perform the write, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=205"
  },
  {
    "text": "so we must first barrier to ensure all threads ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=207"
  },
  {
    "text": "have finished processing the imageblock. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=209"
  },
  {
    "text": "Notice that Metal adds a new memory target for the barrier, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=212"
  },
  {
    "text": "declaring that we only need to wait for writes ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=215"
  },
  {
    "text": "on the imageblock to complete. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=217"
  },
  {
    "text": "We then acquire our desired slice from the imageblock ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=220"
  },
  {
    "text": "using the slice method. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=222"
  },
  {
    "text": "The slice method takes a reference ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=225"
  },
  {
    "text": "to any pixel element that's part of the slice. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=226"
  },
  {
    "text": "Finally, we write the slice to the destination texture.",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=229"
  },
  {
    "text": "Each imageblock probably represents ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=235"
  },
  {
    "text": "only a region of your texture, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=236"
  },
  {
    "text": "so we specify the texture offset ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=238"
  },
  {
    "text": "at which to write the imageblock. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=239"
  },
  {
    "text": "Let's now turn to ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=242"
  },
  {
    "text": "how imageblocks in fragment functions are specified. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=243"
  },
  {
    "text": "Unlike imageblocks in compute passes, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=247"
  },
  {
    "text": "imageblock dimensions in a render pass ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=249"
  },
  {
    "text": "are constant for the entire pass ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=251"
  },
  {
    "text": "and set using the properties shown here. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=253"
  },
  {
    "text": "Imageblock pixel depth can be declared ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=256"
  },
  {
    "text": "in the shading language as a struct, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=258"
  },
  {
    "text": "just as I've already shown for kernels. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=259"
  },
  {
    "text": "Fragment functions, however, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=262"
  },
  {
    "text": "also support declaring the pixel depth ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=263"
  },
  {
    "text": "using render pass attachments. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=265"
  },
  {
    "text": "Let's take a look at the syntax. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=268"
  },
  {
    "text": "In this example, we've declared the pixel structure ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=271"
  },
  {
    "text": "explicitly in the shading language. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=273"
  },
  {
    "text": "Since fragment functions only have access ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=275"
  },
  {
    "text": "to their implied location within the imageblock, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=277"
  },
  {
    "text": "the argument type is the struct itself, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=280"
  },
  {
    "text": "but tagged with the imageblock_data attribute. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=283"
  },
  {
    "text": "We also need to tag the return value ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=286"
  },
  {
    "text": "with the same attribute. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=288"
  },
  {
    "text": "Doing so allows Metal ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=290"
  },
  {
    "text": "to generate the correct access instructions. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=292"
  },
  {
    "text": "Now let's see what this same example looks like ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=295"
  },
  {
    "text": "when we declare the pixel structure ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=297"
  },
  {
    "text": "using traditional render pass attachments. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=298"
  },
  {
    "text": "This form is identical to the syntax you already know. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=303"
  },
  {
    "text": "In fact, you've always used imageblocks in render passes ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=306"
  },
  {
    "text": "because tile memory has always been ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=308"
  },
  {
    "text": "a key aspect of A-series GPUs. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=310"
  },
  {
    "text": "What's new is that Metal 2 ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=313"
  },
  {
    "text": "now makes tile memory generally accessible. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=315"
  },
  {
    "text": "This form abstracts the underlying ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=318"
  },
  {
    "text": "imageblock storage format, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=320"
  },
  {
    "text": "which is derived from the textures ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=322"
  },
  {
    "text": "attached to the render pass. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=323"
  },
  {
    "text": "Regardless of texture storage type, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=325"
  },
  {
    "text": "the data is presented as floating point or integer ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=327"
  },
  {
    "text": "in the fragment function.",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=330"
  },
  {
    "text": "Another difference between A11 and earlier architectures ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=334"
  },
  {
    "text": "is where those implicit imageblock format conversions ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=337"
  },
  {
    "text": "occur. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=339"
  },
  {
    "text": "On A7 through A10 GPUs, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=340"
  },
  {
    "text": "the storage formats were expanded to floating point ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=342"
  },
  {
    "text": "in tile memory. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=345"
  },
  {
    "text": "This is why Metal documents two sizes for every pixel format: ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=347"
  },
  {
    "text": "one when stored in device memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=350"
  },
  {
    "text": "and one when stored in tile memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=352"
  },
  {
    "text": "as render pass attachments. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=354"
  },
  {
    "text": "On A11, format conversion occurs on each load and store ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=356"
  },
  {
    "text": "from tile memory to temporary registers ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=360"
  },
  {
    "text": "in the shader core. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=362"
  },
  {
    "text": "Doing so allows you to squeeze even more use ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=363"
  },
  {
    "text": "out of tile memory.",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=365"
  },
  {
    "text": "You now have a choice in how to declare your pixel structure, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=369"
  },
  {
    "text": "so let's review best practices that can help you decide. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=371"
  },
  {
    "text": "Implicit imageblocks are great when your fragment function ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=375"
  },
  {
    "text": "must support multiple render pass attachment layouts ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=377"
  },
  {
    "text": "because they abstract the underlying storage formats. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=380"
  },
  {
    "text": "Implicit imageblocks are also compatible ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=383"
  },
  {
    "text": "with load and store actions ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=385"
  },
  {
    "text": "because the structure is known by the API. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=387"
  },
  {
    "text": "Explicit imageblocks on the other hand ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=390"
  },
  {
    "text": "allow you to express more complex pixel structure. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=392"
  },
  {
    "text": "Explicit imageblocks also don't require main memory backing, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=395"
  },
  {
    "text": "so they're a great fit for temporary data ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=399"
  },
  {
    "text": "produced and consumed ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=401"
  },
  {
    "text": "entirely within the scope of a render pass. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=402"
  },
  {
    "text": "Now let's take a closer look at what we mean by ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=405"
  },
  {
    "text": "complex pixel structure. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=407"
  },
  {
    "text": "In this example, we're going to store ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=410"
  },
  {
    "text": "multiple translucent colors and their depths per pixel ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=412"
  },
  {
    "text": "so that we can later sort and composite ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=415"
  },
  {
    "text": "for more accurate transparency effects. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=417"
  },
  {
    "text": "We start with a single fragment declaration, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=419"
  },
  {
    "text": "declare an array of them, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=422"
  },
  {
    "text": "and then nest it in a top-level struct ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=424"
  },
  {
    "text": "that we can pass to and from our shader. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=427"
  },
  {
    "text": "Expressing this structure using render pass attachments ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=430"
  },
  {
    "text": "would be awkward and would obscure the author's intent. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=433"
  },
  {
    "text": "Of course, you don't have to choose between ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=437"
  },
  {
    "text": "implicit and explicit forms ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=438"
  },
  {
    "text": "because Metal allows you to pick the right tool for the job. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=440"
  },
  {
    "text": "Mixing also allows you to incrementally ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=443"
  },
  {
    "text": "adopt imageblocks into your code base ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=445"
  },
  {
    "text": "and easily integrate new features ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=447"
  },
  {
    "text": "into existing shaders that benefit from the explicit form. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=448"
  },
  {
    "text": "Using both forms together is easy, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=453"
  },
  {
    "text": "just provide two imageblock arguments. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=455"
  },
  {
    "text": "Let's take a look at an example. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=457"
  },
  {
    "text": "As you can see, we can supply two imageblocks ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=460"
  },
  {
    "text": "as both inputs and outputs. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=462"
  },
  {
    "text": "The color and imageblock_data attributes ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=465"
  },
  {
    "text": "make it clear to Metal ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=467"
  },
  {
    "text": "which slices derive from render pass attachments ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=468"
  },
  {
    "text": "and which do not. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=471"
  },
  {
    "text": "Up to two imageblocks per input and output ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=472"
  },
  {
    "text": "can be declared for each function.",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=475"
  },
  {
    "text": "Explicit imageblocks allow you to control pixel layout exactly ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=478"
  },
  {
    "text": "using packed types. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=481"
  },
  {
    "text": "The Metal shading language already provides ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=483"
  },
  {
    "text": "packed floating point vector types, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=485"
  },
  {
    "text": "which have traditionally described vertex ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=487"
  },
  {
    "text": "and constant data layouts. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=488"
  },
  {
    "text": "But now we need packed types ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=491"
  },
  {
    "text": "that match what could have previously been described ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=492"
  },
  {
    "text": "using implicit imageblocks and texture pixel formats. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=495"
  },
  {
    "text": "Metal 2 adds such types to the shading language. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=499"
  },
  {
    "text": "These formats are converted to and from floating point ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=502"
  },
  {
    "text": "using the load/store hardware we discussed earlier. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=504"
  },
  {
    "text": "What's more is that these new packed formats ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=508"
  },
  {
    "text": "can be used to describe vertex and constant data layouts, too. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=510"
  },
  {
    "text": "Let's take a look at how you declare these new types ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=514"
  },
  {
    "text": "in the shading language. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=516"
  },
  {
    "text": "In this example we see a few of the new packed types ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=518"
  },
  {
    "text": "used to describe both imageblocks and vertex data. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=521"
  },
  {
    "text": "These types require that you declare ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=524"
  },
  {
    "text": "both the storage format and unpack format ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=526"
  },
  {
    "text": "used within the shader core. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=530"
  },
  {
    "text": "Now let's glance at all the new packed data types ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=534"
  },
  {
    "text": "that have been added. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=536"
  },
  {
    "text": "As you can see, the Metal shading language adds ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=538"
  },
  {
    "text": "one, two, and four component normalized types, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=540"
  },
  {
    "text": "each supporting eight or 16-bit components. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=544"
  },
  {
    "text": "We've also added both signed and unsigned variants ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=547"
  },
  {
    "text": "as well as support for more specialized 32-bit formats ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=550"
  },
  {
    "text": "such as 10a2, mini floats, shared exponent, and sRGB. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=553"
  },
  {
    "text": "Finally, the GPU debugger in Xcode directly supports ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=560"
  },
  {
    "text": "the visualization and inspection of imageblocks. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=563"
  },
  {
    "text": "Each slice can be inspected as if it were a texture. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=567"
  },
  {
    "text": "Here we see on the top an example G-Buffer layout ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=571"
  },
  {
    "text": "from our sample code. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=573"
  },
  {
    "text": "And on the bottom we have the same imageblock ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=575"
  },
  {
    "text": "show in Xcode's GPU Debugger. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=578"
  },
  {
    "text": "The tile section of the bound resources view ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=581"
  },
  {
    "text": "shows the imageblock slices as a set of textures. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=583"
  },
  {
    "text": "From here you can inspect each of the slices ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=586"
  },
  {
    "text": "just like any other texture. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=588"
  },
  {
    "text": "In this presentation, we saw how imageblocks ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=591"
  },
  {
    "text": "enable you to efficiently move multiple pixels ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=593"
  },
  {
    "text": "from tile memory to device memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=596"
  },
  {
    "text": "and control the layout of image data in tile memory ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=598"
  },
  {
    "text": "precisely to improve storage density. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=601"
  },
  {
    "text": "We also saw how we could also leverage ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=604"
  },
  {
    "text": "the A11 GPU's new pack/unpack hardware ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=605"
  },
  {
    "text": "in both imageblocks and other address spaces. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=609"
  },
  {
    "text": "For more information about Metal 2 ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=613"
  },
  {
    "text": "and links to the sample code, ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=615"
  },
  {
    "text": "please visit the Developer website ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=616"
  },
  {
    "text": "at developer.apple.com/metal. ",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=618"
  },
  {
    "text": "Thank you for watching!",
    "link": "https://developer.apple.com/videos/play/tech-talks-603/?time=621"
  }
]