[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=0"
  },
  {
    "text": "August Joki: Hello, I'm August Joki, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=9"
  },
  {
    "text": "a software engineer on watchOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=11"
  },
  {
    "text": "and I'm here to show you how to go further with WidgetKit complications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=13"
  },
  {
    "text": "I hope you've seen the wonderful Complications and Widgets: Reloaded talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=18"
  },
  {
    "text": "first, covering the basics of complications in WidgetKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=22"
  },
  {
    "text": "This talk expands on the concepts covered there ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=26"
  },
  {
    "text": "as they relate to complications on the watch faces. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=29"
  },
  {
    "text": "And my WWDC 2020 talk: Build complications in SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=33"
  },
  {
    "text": "covers more specifics about tinting and SwiftUI drawing in complications.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=38"
  },
  {
    "text": "In this talk, I'll be discussing the WidgetKit features ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=44"
  },
  {
    "text": "unique to watchOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=46"
  },
  {
    "text": "as well as how to migrate your, and your users', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=48"
  },
  {
    "text": "existing ClockKit complications to WidgetKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=51"
  },
  {
    "text": "I've taken inspiration from the Coffee Tracker sample app ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=54"
  },
  {
    "text": "to use as an example throughout this talk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=57"
  },
  {
    "text": "The app records the number of coffees, teas, and sodas ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=59"
  },
  {
    "text": "you drink throughout the day ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=62"
  },
  {
    "text": "and tracks the amount of caffeine in your body over time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=64"
  },
  {
    "text": "Let's start with what's unique to watchOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=68"
  },
  {
    "text": "In iOS 16 we brought complication style widgets ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=72"
  },
  {
    "text": "to the phone's lock screen ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=75"
  },
  {
    "text": "and in watchOS 9 we brought WidgetKit to the watch's complications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=76"
  },
  {
    "text": "On the watch faces we have a unique complication presentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=81"
  },
  {
    "text": "for the corners of the watch screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=85"
  },
  {
    "text": "And it requires a unique WidgetKit family ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=87"
  },
  {
    "text": "called accessoryCorner, to describe it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=89"
  },
  {
    "text": "Part of that unique presentation is auxiliary content ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=93"
  },
  {
    "text": "specified by your SwiftUI view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=96"
  },
  {
    "text": "but not rendered as part of your content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=98"
  },
  {
    "text": "Instead, it is rendered by the watch face.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=100"
  },
  {
    "text": "The circular part of the corner is standard SwiftUI rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=104"
  },
  {
    "text": "and the auxiliary content is the curved part in the corners.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=107"
  },
  {
    "text": "Or in the dial on the Infograph face.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=113"
  },
  {
    "text": "The accessoryInline family has a unique behavior on watch faces. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=118"
  },
  {
    "text": "It has multiple ways of being rendered depending on the face. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=122"
  },
  {
    "text": "Sometimes flat, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=127"
  },
  {
    "text": "sometimes curved to match the dial.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=130"
  },
  {
    "text": "Let's talk about how to support these unique features ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=134"
  },
  {
    "text": "by looking at how the coffee tracker app might be updated to use WidgetKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=137"
  },
  {
    "text": "In addition to the three new complication-styled widget families ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=143"
  },
  {
    "text": "on iOS 16: AccessoryRectangular, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=146"
  },
  {
    "text": "accessoryCircular, and accessoryInline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=150"
  },
  {
    "text": "we have a fourth family on watchOS 9 called accessoryCorner.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=154"
  },
  {
    "text": "accessoryCorner can either be shown as a large circular content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=159"
  },
  {
    "text": "like the maps and heart rate complications shown in the lower corners, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=163"
  },
  {
    "text": "or as smaller circular content with a curved label or gauge ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=167"
  },
  {
    "text": "like the coffee tracker and moonphase complications shown in the upper corners.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=171"
  },
  {
    "text": "To control whether the inner auxiliary content is shown, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=177"
  },
  {
    "text": "watchOS 9 has added a new view modifier you can use, which I'll show you now.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=181"
  },
  {
    "text": "Let's look at building a corner complication for my coffee tracker app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=188"
  },
  {
    "text": "Starting with the larger circular content style, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=193"
  },
  {
    "text": "I have a ZStack with an SF Symbol and a background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=196"
  },
  {
    "text": "The SwiftUI content is automatically clipped to a circle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=199"
  },
  {
    "text": "to keep in line with the design of the other corner complications.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=202"
  },
  {
    "text": "To add the inner curved content, we use the new to watchOS 9 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=208"
  },
  {
    "text": "widgetLabel view modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=212"
  },
  {
    "text": "The watch face extracts the contents of the modifier to draw the control ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=214"
  },
  {
    "text": "appropriate for the family and the style of the watch face. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=218"
  },
  {
    "text": "And the circular content automatically scales down to make room. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=222"
  },
  {
    "text": "For accessoryCorner you can specify a SwiftUI text, gauge, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=227"
  },
  {
    "text": "or progressView in your widget's label.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=231"
  },
  {
    "text": "AccessoryCorner isn't the only family that supports widgetLabel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=235"
  },
  {
    "text": "Let's look at how it is used on the accessoryCircular family.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=239"
  },
  {
    "text": "On the Infograph watch face, in addition to the corner complications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=244"
  },
  {
    "text": "there are four circular complications inside the dial. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=248"
  },
  {
    "text": "My coffee tracker circular complication, in the middle top, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=252"
  },
  {
    "text": "looks very similar to the corner complication we just saw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=256"
  },
  {
    "text": "but with text in the dial. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=259"
  },
  {
    "text": "I'll show you how to add that text now.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=261"
  },
  {
    "text": "For my circular complication design, I thought it more appropriate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=264"
  },
  {
    "text": "to move the gauge that was in the widgetLabel ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=268"
  },
  {
    "text": "in my corner complication, to be front and center. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=270"
  },
  {
    "text": "To take advantage of the top middle position on Infograph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=274"
  },
  {
    "text": "I add a widgetLabel to the gauge in order to display additional text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=277"
  },
  {
    "text": "in the longer bezel area that wouldn't otherwise fit in the circular content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=281"
  },
  {
    "text": "But now I have redundant information between the main view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=286"
  },
  {
    "text": "and the text above it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=289"
  },
  {
    "text": "I can clean that up by switching the circular content ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=291"
  },
  {
    "text": "to that good looking coffee cup SF Symbol from my corner complication ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=294"
  },
  {
    "text": "But when I switch to a face showing my circular complication ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=299"
  },
  {
    "text": "that does not have the bezel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=302"
  },
  {
    "text": "then I've lost all of my caffeine info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=304"
  },
  {
    "text": "Luckily, there's a piece of API I can add to make my complication work ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=306"
  },
  {
    "text": "in both cases.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=310"
  },
  {
    "text": "I update my complication to add the Environment property ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=313"
  },
  {
    "text": "called showsWidgetLabel to my view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=316"
  },
  {
    "text": "This will be true whenever the complication is in a position ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=319"
  },
  {
    "text": "on the watch face that shows the content in the widget's label.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=322"
  },
  {
    "text": "And then I can change the content to depend on the value of showsWidgetLabel ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=328"
  },
  {
    "text": "so I am able to have the appropriate level of information in each complication spot. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=333"
  },
  {
    "text": "I just demonstrated two different ways that the accessoryCircular family ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=339"
  },
  {
    "text": "can show up on watch faces, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=342"
  },
  {
    "text": "and there is one more way you need to be aware of. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=344"
  },
  {
    "text": "The Extra Large watch face has long been a great way for people to see the time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=347"
  },
  {
    "text": "in an extra large format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=351"
  },
  {
    "text": "And it supports a single, large circular complication. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=354"
  },
  {
    "text": "The Extra Large face uses the accessoryCircular family ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=358"
  },
  {
    "text": "and automatically scales up the content to match the style of the face. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=361"
  },
  {
    "text": "Please note: as this face is designed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=366"
  },
  {
    "text": "to have a single, large complication, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=368"
  },
  {
    "text": "do not use the increased canvas size ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=370"
  },
  {
    "text": "as an opportunity to densely pack your complication. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=373"
  },
  {
    "text": "The content should be identical to the normal circular family, only larger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=376"
  },
  {
    "text": "As I mentioned earlier, there are two more widget families used ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=382"
  },
  {
    "text": "on watch faces: accessoryRectangular and accessoryInline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=385"
  },
  {
    "text": "There are no faces with rectangular complications that show the widgetLabel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=389"
  },
  {
    "text": "And the accessoryInline family acts, already, as a widgetLabel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=393"
  },
  {
    "text": "The watch face extracts Images and Texts from your inline content ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=397"
  },
  {
    "text": "and renders them itself to match the look of the face. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=402"
  },
  {
    "text": "Next up is Migration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=405"
  },
  {
    "text": "There are two parts to migration: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=408"
  },
  {
    "text": "rewriting your existing ClockKit complication code in WidgetKit; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=409"
  },
  {
    "text": "and providing a mapping to let the system know how to upgrade ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=413"
  },
  {
    "text": "your complications people have set on their watch faces. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=416"
  },
  {
    "text": "When you adopt WidgetKit the system will stop asking your ClockKit data source ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=420"
  },
  {
    "text": "for new content and show only your new complications in the face editing picker.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=424"
  },
  {
    "text": "As well as bringing WidgetKit to the watch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=431"
  },
  {
    "text": "watchOS 9 has updated every face to support rich complications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=433"
  },
  {
    "text": "which allowed us to dramatically reduce the number of complication families ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=438"
  },
  {
    "text": "from 12 to only 4. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=441"
  },
  {
    "text": "Rectangular and Corner map directly across ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=445"
  },
  {
    "text": "to accessoryRectangular and accessoryCorner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=448"
  },
  {
    "text": "All three graphic Circular styled ClockKit families ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=452"
  },
  {
    "text": "are now a single accessoryCircular WidgetKit family. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=455"
  },
  {
    "text": "And the accessoryInline family is used where the old utilitarianSmallFlat ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=459"
  },
  {
    "text": "or utilitarianLarge used to be.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=464"
  },
  {
    "text": "And many places that used to be utilitarianSmall ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=468"
  },
  {
    "text": "have been updated to use the accessoryCorner family.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=472"
  },
  {
    "text": "With WidgetKit, SwiftUI views and their state driven layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=477"
  },
  {
    "text": "have replaced ClockKit's templates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=480"
  },
  {
    "text": "WidgetKit still has familiar timelines and entries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=483"
  },
  {
    "text": "In fact, they were originally inspired by ClockKit itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=486"
  },
  {
    "text": "which means that your complication data source will nicely migrate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=489"
  },
  {
    "text": "to one of either a static or intent based WidgetKit configuration.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=492"
  },
  {
    "text": "Please see the original WidgetKit talk for more details ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=497"
  },
  {
    "text": "about the types of configurations WidgetKit supports ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=501"
  },
  {
    "text": "as well as general family support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=503"
  },
  {
    "text": "We've added one last API to ClockKit to allow a person's complications ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=505"
  },
  {
    "text": "to be migrated by the system automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=510"
  },
  {
    "text": "This allows for your existing complications that are already ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=513"
  },
  {
    "text": "on watch faces to automatically be upgraded to your new WidgetKit based ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=516"
  },
  {
    "text": "complications without any user interaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=520"
  },
  {
    "text": "When your app gets updated on a watch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=524"
  },
  {
    "text": "the Watch Faces will check for the presence of widgets ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=526"
  },
  {
    "text": "in your app's bundle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=529"
  },
  {
    "text": "If it finds any, it will then launch your ClockKit complication data source ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=531"
  },
  {
    "text": "to generate the migrations for the existing complications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=535"
  },
  {
    "text": "From this point forward, your CLKComplicationDataSource ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=540"
  },
  {
    "text": "will only be run to ask for migrations when a person receives a shared face ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=543"
  },
  {
    "text": "with your ClockKit complications on it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=547"
  },
  {
    "text": "The system will ask for your migrations every time a new face is shared, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=550"
  },
  {
    "text": "so for a consistent experience you should keep your migrations consistent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=554"
  },
  {
    "text": "Once you've finished creating your beautiful WidgetKit complications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=558"
  },
  {
    "text": "you can add the new property, widgetMigrator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=562"
  },
  {
    "text": "to provide the object that conforms to the new Migrator protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=565"
  },
  {
    "text": "Be that your complication data source itself or some other type you provide.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=569"
  },
  {
    "text": "The CLKComplication WidgetMigrator protocol has a single function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=575"
  },
  {
    "text": "to provide to the watch faces widget migration configurations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=579"
  },
  {
    "text": "from existing CLKComplicationDescriptors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=583"
  },
  {
    "text": "The most straightforward way to adopt the new API ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=587"
  },
  {
    "text": "is to have your data source conform to the new Migrator protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=590"
  },
  {
    "text": "If your WidgetKit complication uses the static configuration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=595"
  },
  {
    "text": "you provide a static migration configuration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=598"
  },
  {
    "text": "And there's an equivalent migration configuration ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=602"
  },
  {
    "text": "if you use intents in your widget complication. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=604"
  },
  {
    "text": "Note that if you provide intent based migration configurations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=608"
  },
  {
    "text": "you will need to also include your intent definitions in your watch app ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=612"
  },
  {
    "text": "as well as your widget extensions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=615"
  },
  {
    "text": "so you can create your intent objects in both places.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=617"
  },
  {
    "text": "WidgetKit enables new and creative ways to make complications for the watch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=621"
  },
  {
    "text": "while dramatically simplifying the experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=625"
  },
  {
    "text": "Thanks for watching.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10051/?time=628"
  }
]