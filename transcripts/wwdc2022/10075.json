[
  {
    "text": "♪ instrumental hip hop music ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=0"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=3"
  },
  {
    "text": "Welcome to \"Use SwiftUI with AppKit.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=9"
  },
  {
    "text": "I'm Ian, an engineer working on Shortcuts.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=12"
  },
  {
    "text": "In macOS Monterey, Shortcuts came to macOS.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=16"
  },
  {
    "text": "Shortcuts uses a lot of SwiftUI on the Mac.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=20"
  },
  {
    "text": "SwiftUI helps customize the experience for the platform, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=23"
  },
  {
    "text": "while sharing common views with the apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=26"
  },
  {
    "text": "on iOS and watchOS.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=28"
  },
  {
    "text": "In this video, I'm going to show ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=31"
  },
  {
    "text": "how you can start adopting SwiftUI in your Mac app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=33"
  },
  {
    "text": "by looking at some examples from Shortcuts.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=36"
  },
  {
    "text": "First, I'll show you an example ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=40"
  },
  {
    "text": "of how to host SwiftUI views in your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=42"
  },
  {
    "text": "and then talk about how to pass data ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=45"
  },
  {
    "text": "between AppKit and SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=47"
  },
  {
    "text": "I'll also cover hosting SwiftUI views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=50"
  },
  {
    "text": "in the cells of a collection or table view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=53"
  },
  {
    "text": "how to handle layout and sizing of SwiftUI views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=55"
  },
  {
    "text": "when they are embedded in AppKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=58"
  },
  {
    "text": "how to make your SwiftUI views participate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=61"
  },
  {
    "text": "in the responder chain and be focusable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=63"
  },
  {
    "text": "and, finally, how to host an AppKit view in SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=67"
  },
  {
    "text": "Alright, I'll start with how to host SwiftUI in AppKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=72"
  },
  {
    "text": "In Shortcuts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=76"
  },
  {
    "text": "the main window contains an AppKit split view controller ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=78"
  },
  {
    "text": "and the sidebar on the left is written using SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=83"
  },
  {
    "text": "The sidebar view is implemented as a SwiftUI List, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=88"
  },
  {
    "text": "and the list shows sections with rows for all of the places ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=92"
  },
  {
    "text": "you can navigate to in the app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=95"
  },
  {
    "text": "The view keeps track of which item is selected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=98"
  },
  {
    "text": "through the selected item binding.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=102"
  },
  {
    "text": "The possible items that can be selected ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=105"
  },
  {
    "text": "are represented as cases in the SidebarItem type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=107"
  },
  {
    "text": "In this case, since there's a split view controller already.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=113"
  },
  {
    "text": "To host this sidebar view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=116"
  },
  {
    "text": "we use a class from SwiftUI called NSHostingController.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=118"
  },
  {
    "text": "The SwiftUI sidebar view is passed in ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=123"
  },
  {
    "text": "as the root view of that hosting controller.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=126"
  },
  {
    "text": "Since a hosting controller can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=130"
  },
  {
    "text": "like any other view controller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=132"
  },
  {
    "text": "here, we configure it as a splitViewItem ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=134"
  },
  {
    "text": "and add that to the splitViewController.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=139"
  },
  {
    "text": "Now the sidebar is hosted in the split view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=143"
  },
  {
    "text": "but for it to work when the selection changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=146"
  },
  {
    "text": "the right side of the split view needs to show a different page.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=149"
  },
  {
    "text": "Currently, the selected item state ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=155"
  },
  {
    "text": "only exists within SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=157"
  },
  {
    "text": "What we need to do is move that to a place that can be shared ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=160"
  },
  {
    "text": "between the split view and the sidebar.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=163"
  },
  {
    "text": "A good way to do this is to create a model object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=167"
  },
  {
    "text": "that can be stored outside of SwiftUI and contain the state ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=170"
  },
  {
    "text": "that needs to be shared.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=174"
  },
  {
    "text": "I'll call this object the SelectionModel.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=176"
  },
  {
    "text": "Now, the sidebar can still read and write the state ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=179"
  },
  {
    "text": "in the SelectionModel.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=182"
  },
  {
    "text": "In code, the SelectionModel is a class that conforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=185"
  },
  {
    "text": "to ObservableObject.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=188"
  },
  {
    "text": "Being an observable object lets SwiftUI reload the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=191"
  },
  {
    "text": "when the state stored in the model changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=195"
  },
  {
    "text": "It stores which sidebar item is currently selected.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=198"
  },
  {
    "text": "This property is published so that the SwiftUI sidebar view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=203"
  },
  {
    "text": "can update when the selected item changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=207"
  },
  {
    "text": "Whenever someone changes the selection in the sidebar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=211"
  },
  {
    "text": "the model can show a new page in the detail view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=214"
  },
  {
    "text": "Now that I've covered how to host SwiftUI in AppKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=219"
  },
  {
    "text": "let's move on to collection and table cells.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=222"
  },
  {
    "text": "When bringing Shortcuts from other platforms to macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=226"
  },
  {
    "text": "there was already an iconic SwiftUI view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=230"
  },
  {
    "text": "built to display a shortcut in a collection view cell ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=233"
  },
  {
    "text": "or a Home Screen widget.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=237"
  },
  {
    "text": "On macOS, these same views are displayed in the cells ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=240"
  },
  {
    "text": "of an NSCollectionView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=243"
  },
  {
    "text": "In a collection or table view with lots of items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=246"
  },
  {
    "text": "each cell view is recycled as you scroll, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=250"
  },
  {
    "text": "showing different content over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=253"
  },
  {
    "text": "To make sure the cell reuse is performant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=257"
  },
  {
    "text": "you need to avoid adding and removing subviews ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=260"
  },
  {
    "text": "from the cells as the user scrolls.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=262"
  },
  {
    "text": "When displaying a SwiftUI view in each cell, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=266"
  },
  {
    "text": "use a single hosting view and update it ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=269"
  },
  {
    "text": "with a different root view when the cell's content ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=272"
  },
  {
    "text": "needs to change.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=275"
  },
  {
    "text": "Here's all you need to build a collection view cell ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=277"
  },
  {
    "text": "to host SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=280"
  },
  {
    "text": "In the example here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=282"
  },
  {
    "text": "I'm building the cell that displays a shortcut view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=283"
  },
  {
    "text": "Each cell contains an NSHostingView to host SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=287"
  },
  {
    "text": "Since cells are created ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=292"
  },
  {
    "text": "before they are configured with any content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=294"
  },
  {
    "text": "this will start off as nil, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=296"
  },
  {
    "text": "and will be set the first time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=298"
  },
  {
    "text": "a shortcut is ready to be displayed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=300"
  },
  {
    "text": "The displayShortcut method is called by the data source ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=303"
  },
  {
    "text": "when configuring the cell to display a shortcut.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=306"
  },
  {
    "text": "This method creates a SwiftUI ShortcutView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=310"
  },
  {
    "text": "Then, if there's already a hostingView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=314"
  },
  {
    "text": "the rootView of that hostingView is set to the new view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=317"
  },
  {
    "text": "Otherwise, if it's the first time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=321"
  },
  {
    "text": "a newHostingView is created and added ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=324"
  },
  {
    "text": "as a subview of the cell.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=326"
  },
  {
    "text": "Here's the lifecycle of the cell that's hosting SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=330"
  },
  {
    "text": "First, the cell is initialized and it starts with no subviews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=334"
  },
  {
    "text": "since there is not a shortcut to display yet.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=338"
  },
  {
    "text": "The first time displayShortcut is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=341"
  },
  {
    "text": "the hostingView is created with the shortcutView to display.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=344"
  },
  {
    "text": "This creates a SwiftUI view hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=349"
  },
  {
    "text": "containing a VStack, an image, a spacer, and two text views.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=352"
  },
  {
    "text": "If this cell is then scrolled off screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=359"
  },
  {
    "text": "it will be potentially dequeued by the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=362"
  },
  {
    "text": "and need to show a different shortcut.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=365"
  },
  {
    "text": "When this happens, a new ShortcutView is created ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=368"
  },
  {
    "text": "and given to the HostingView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=372"
  },
  {
    "text": "Since the HostingView was already displaying ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=375"
  },
  {
    "text": "a different shortcut view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=377"
  },
  {
    "text": "it will reuse the overall structure of the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=379"
  },
  {
    "text": "including the VStack and the spacer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=382"
  },
  {
    "text": "and only update the image, text, and background that changed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=385"
  },
  {
    "text": "Alright, next, let's talk about layout and sizing.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=390"
  },
  {
    "text": "Hosting controllers and hosting views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=395"
  },
  {
    "text": "have intrinsic sizes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=397"
  },
  {
    "text": "based on the SwiftUI view's ideal width and height.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=399"
  },
  {
    "text": "SwiftUI automatically creates and updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=403"
  },
  {
    "text": "Auto Layout constraints, which the AppKit layout system ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=406"
  },
  {
    "text": "uses to size the view appropriately.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=409"
  },
  {
    "text": "Views are also flexible, meaning they support ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=413"
  },
  {
    "text": "a variety of sizes, between a minimum and a maximum.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=416"
  },
  {
    "text": "SwiftUI creates constraints for these as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=420"
  },
  {
    "text": "When embedding SwiftUI hosting views in your hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=425"
  },
  {
    "text": "you should apply your own Auto Layout constraints ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=428"
  },
  {
    "text": "to the superview or to other adjacent views.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=431"
  },
  {
    "text": "Using the frame modifier or other SwiftUI layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=435"
  },
  {
    "text": "will result in an update to the constraints that are created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=439"
  },
  {
    "text": "such as overriding the width to be a fixed size.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=443"
  },
  {
    "text": "Since windows can be resized by the user, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=448"
  },
  {
    "text": "they have a minimum and a maximum size.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=451"
  },
  {
    "text": "When HostingViews are set ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=455"
  },
  {
    "text": "as the top-level contentView of a window, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=456"
  },
  {
    "text": "SwiftUI will automatically update that window's minimum ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=459"
  },
  {
    "text": "and maximum size based on the content being displayed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=463"
  },
  {
    "text": "And this lets windows be resizable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=467"
  },
  {
    "text": "either vertically, horizontally, or both, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=469"
  },
  {
    "text": "depending on the content.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=472"
  },
  {
    "text": "SwiftUI views, placed in hosting controllers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=475"
  },
  {
    "text": "also are sized based on the content when presented modally.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=478"
  },
  {
    "text": "For example, you can easily place SwiftUI views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=482"
  },
  {
    "text": "into an AppKit popover, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=485"
  },
  {
    "text": "by presenting a hosting controller ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=487"
  },
  {
    "text": "using the popover presentation API on NSViewController, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=489"
  },
  {
    "text": "as shown here.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=493"
  },
  {
    "text": "You can also present SwiftUI views as sheets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=495"
  },
  {
    "text": "using the presentAsSheet method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=498"
  },
  {
    "text": "And finally, for a modal window, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=500"
  },
  {
    "text": "you can use the presentAsModalWindow method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=503"
  },
  {
    "text": "to present a window that blocks interaction until closed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=506"
  },
  {
    "text": "The window is sized to fit the content.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=510"
  },
  {
    "text": "In macOS Ventura, there are new APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=514"
  },
  {
    "text": "on NSHostingView and NSHostingController ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=517"
  },
  {
    "text": "that allow you to customize the constraints ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=520"
  },
  {
    "text": "that are automatically added.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=522"
  },
  {
    "text": "By default, hosting controllers and views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=525"
  },
  {
    "text": "create constraints for the minimum size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=527"
  },
  {
    "text": "intrinsic size, and maximum size.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=530"
  },
  {
    "text": "You may want to disable some of these for performance reasons ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=533"
  },
  {
    "text": "if you want the view to always be flexibly sized, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=536"
  },
  {
    "text": "or the constraints are already added ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=540"
  },
  {
    "text": "to surrounding views in AppKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=542"
  },
  {
    "text": "For hosting controllers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=545"
  },
  {
    "text": "to let the ideal size of the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=546"
  },
  {
    "text": "determine the preferred content size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=548"
  },
  {
    "text": "you can enable the preferredContentSize option.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=551"
  },
  {
    "text": "When you start adding SwiftUI views to your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=555"
  },
  {
    "text": "it's important that they take part in the responder chain ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=558"
  },
  {
    "text": "and focus system just like other views in your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=561"
  },
  {
    "text": "In Shortcuts, our editor is implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=566"
  },
  {
    "text": "as a SwiftUI View.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=569"
  },
  {
    "text": "But the editor needs to handle menu bar commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=572"
  },
  {
    "text": "defined in the main menu, which is implemented in AppKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=575"
  },
  {
    "text": "These commands include cut, copy, paste, and others.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=580"
  },
  {
    "text": "We implemented a few of our own custom menu items as well, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=585"
  },
  {
    "text": "for moving actions up and down.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=589"
  },
  {
    "text": "In AppKit, your view hierarchy makes up a chain of views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=592"
  },
  {
    "text": "called \"the responder chain.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=596"
  },
  {
    "text": "The focused responder is called the first responder.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=598"
  },
  {
    "text": "When a menu item is selected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=602"
  },
  {
    "text": "the selector for that item is sent to the first responder.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=604"
  },
  {
    "text": "But if the first responder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=608"
  },
  {
    "text": "doesn't respond to that selector, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=610"
  },
  {
    "text": "then the selector is sent to each next responder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=612"
  },
  {
    "text": "until something handles the selector, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=615"
  },
  {
    "text": "or it reaches the app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=617"
  },
  {
    "text": "The equivalent to the first responder in SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=620"
  },
  {
    "text": "is the focused view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=623"
  },
  {
    "text": "Focusable SwiftUI views can respond to keyboard input ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=626"
  },
  {
    "text": "and handle selectors sent to the responder chain.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=631"
  },
  {
    "text": "Some views like text fields are already focusable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=635"
  },
  {
    "text": "but you can use the focusable modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=640"
  },
  {
    "text": "to make other views focusable too.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=642"
  },
  {
    "text": "SwiftUI has a few modifiers to handle common commands, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=646"
  },
  {
    "text": "such as copy, cut, and paste.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=650"
  },
  {
    "text": "These pass values in and out of the pasteboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=652"
  },
  {
    "text": "and it's an easy way to let people transfer data ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=655"
  },
  {
    "text": "in and out of your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=658"
  },
  {
    "text": "The shortcuts editor uses the onMoveCommand ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=660"
  },
  {
    "text": "and onExit command modifiers to handle the arrow keys ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=663"
  },
  {
    "text": "and escape keys.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=667"
  },
  {
    "text": "The onCommand modifier can be used to handle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=669"
  },
  {
    "text": "any of the common selectors from AppKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=672"
  },
  {
    "text": "or your own custom selectors defined in your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=674"
  },
  {
    "text": "Here, we handle the selectAll command from AppKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=677"
  },
  {
    "text": "and the moveActionUp and moveActionDown commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=681"
  },
  {
    "text": "defined in the Shortcuts app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=685"
  },
  {
    "text": "When testing focus and keyboard navigability in your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=688"
  },
  {
    "text": "make sure to open Keyboard System Settings ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=692"
  },
  {
    "text": "and test with Full Keyboard Navigation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=694"
  },
  {
    "text": "turned both on and off, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=696"
  },
  {
    "text": "since many controls are only focusable when that's enabled.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=699"
  },
  {
    "text": "There's a lot more you can do ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=704"
  },
  {
    "text": "to make your app work great with the keyboard.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=706"
  },
  {
    "text": "For example, there are APIs such as FocusState ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=708"
  },
  {
    "text": "and the focused modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=712"
  },
  {
    "text": "that let you programmatically change which view is focused.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=714"
  },
  {
    "text": "To learn more about focus and the keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=718"
  },
  {
    "text": "you should go watch ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=721"
  },
  {
    "text": "the \"Direct and reflect focus in SwiftUI\" video.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=722"
  },
  {
    "text": "Finally, let's talk about hosting AppKit views in SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=726"
  },
  {
    "text": "There are some instances ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=731"
  },
  {
    "text": "where Shortcuts is hosting AppKit views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=733"
  },
  {
    "text": "inside of a SwiftUI layout, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=735"
  },
  {
    "text": "and you may need to host AppKit views, too, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=737"
  },
  {
    "text": "as you adopt SwiftUI in your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=740"
  },
  {
    "text": "One example is inside of the SwiftUI shortcuts editor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=744"
  },
  {
    "text": "where there's an embedded AppleScript editor view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=749"
  },
  {
    "text": "which is an AppKit control ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=752"
  },
  {
    "text": "shared with a few other system apps on macOS.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=753"
  },
  {
    "text": "SwiftUI provides two representable protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=757"
  },
  {
    "text": "that allow AppKit views and view controllers ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=760"
  },
  {
    "text": "to be embedded within a SwiftUI view hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=763"
  },
  {
    "text": "Like SwiftUI views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=768"
  },
  {
    "text": "representables are descriptions for how to create and update ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=770"
  },
  {
    "text": "AppKit views.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=774"
  },
  {
    "text": "Since many classes in AppKit have delegates, observers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=777"
  },
  {
    "text": "or rely on KVO or notifications to be observed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=781"
  },
  {
    "text": "the protocols also include an optional coordinator object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=786"
  },
  {
    "text": "that you can implement to accompany your view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=789"
  },
  {
    "text": "or view controller.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=792"
  },
  {
    "text": "Here's the lifecycle of the hosted object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=795"
  },
  {
    "text": "and its coordinator.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=798"
  },
  {
    "text": "We start with the hosted view being initialized.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=800"
  },
  {
    "text": "This happens when the view is about to be displayed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=803"
  },
  {
    "text": "for the first time.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=806"
  },
  {
    "text": "The first thing SwiftUI does during initialization ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=808"
  },
  {
    "text": "is make the coordinator.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=811"
  },
  {
    "text": "This is optional, but you can define your own type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=813"
  },
  {
    "text": "and return it from makeCoordinator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=815"
  },
  {
    "text": "if you need it for delegation or state management.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=817"
  },
  {
    "text": "A single instance of the coordinator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=821"
  },
  {
    "text": "will stay around for the lifetime of the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=823"
  },
  {
    "text": "Second, either the makeNSView ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=827"
  },
  {
    "text": "or makeNSViewController method is called.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=830"
  },
  {
    "text": "This is where you describe to SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=833"
  },
  {
    "text": "how to create a new instance of your view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=836"
  },
  {
    "text": "The context contains the coordinator that was just made, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=840"
  },
  {
    "text": "if any, so here's a good place to assign the coordinator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=843"
  },
  {
    "text": "as the view's delegate or other type of observer.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=847"
  },
  {
    "text": "Once the view has been created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=853"
  },
  {
    "text": "the update view method will be called ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=855"
  },
  {
    "text": "whenever the SwiftUI state or environment changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=857"
  },
  {
    "text": "Here, it's your responsibility to update any properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=862"
  },
  {
    "text": "or state stored in the AppKit view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=865"
  },
  {
    "text": "to keep it in sync with the surrounding SwiftUI state ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=868"
  },
  {
    "text": "and environment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=871"
  },
  {
    "text": "The update method can be called often, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=873"
  },
  {
    "text": "so the changes you make to the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=875"
  },
  {
    "text": "should be as minimal as possible.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=878"
  },
  {
    "text": "You should check for what has changed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=880"
  },
  {
    "text": "and only reload the affected part of the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=882"
  },
  {
    "text": "when changes are made.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=885"
  },
  {
    "text": "When SwiftUI is done displaying the hosted view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=887"
  },
  {
    "text": "it will be dismantled.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=890"
  },
  {
    "text": "The hosted view and coordinator will both be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=893"
  },
  {
    "text": "Before these are deallocated, the representable protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=897"
  },
  {
    "text": "give you an optional method to implement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=900"
  },
  {
    "text": "where you can clean up state if needed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=902"
  },
  {
    "text": "Alright, now that you know the lifecycle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=906"
  },
  {
    "text": "and are familiar with the representable protocols, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=908"
  },
  {
    "text": "I'm going to show you how Shortcuts hosts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=912"
  },
  {
    "text": "the custom script editor view in the app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=914"
  },
  {
    "text": "The script editor is an NSView called ScriptEditorView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=918"
  },
  {
    "text": "The code that's written in the editor can be accessed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=922"
  },
  {
    "text": "and modified through the sourceCode property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=925"
  },
  {
    "text": "and the view can be disabled ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=928"
  },
  {
    "text": "to prevent changes from being made.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=930"
  },
  {
    "text": "The script editor also has a delegate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=932"
  },
  {
    "text": "which is notified any time someone modifies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=935"
  },
  {
    "text": "the source code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=938"
  },
  {
    "text": "When hosting an AppKit view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=940"
  },
  {
    "text": "first think about where the view will be placed in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=942"
  },
  {
    "text": "and what data needs to be passed in and out.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=946"
  },
  {
    "text": "In Shortcuts, this view is placed into a container view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=950"
  },
  {
    "text": "next to the compile button.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=954"
  },
  {
    "text": "The compile button's handler needs to access the source code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=957"
  },
  {
    "text": "that's entered into the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=960"
  },
  {
    "text": "The source code is stored in SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=963"
  },
  {
    "text": "using the State property wrapper.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=965"
  },
  {
    "text": "The representable will need to both read ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=968"
  },
  {
    "text": "and write to this state.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=970"
  },
  {
    "text": "To build the representable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=973"
  },
  {
    "text": "start by creating a type that conforms to NSViewRepresentable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=975"
  },
  {
    "text": "since it will host an NSView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=979"
  },
  {
    "text": "Add properties for each thing that needs to be configurable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=982"
  },
  {
    "text": "from SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=986"
  },
  {
    "text": "For the source code a binding is used, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=988"
  },
  {
    "text": "which will read and write the state stored in SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=991"
  },
  {
    "text": "The first method you need to implement is makeNSView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=996"
  },
  {
    "text": "Here is where you describe ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1000"
  },
  {
    "text": "how to create a new instance of the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1001"
  },
  {
    "text": "and where you should do any one-time setup that's required.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1004"
  },
  {
    "text": "Here, the delegate is set to the coordinator.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1007"
  },
  {
    "text": "I'll talk about the coordinator more in a bit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1011"
  },
  {
    "text": "Next, implement updateNSView.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1015"
  },
  {
    "text": "This will be called when either the sourceCode changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1018"
  },
  {
    "text": "or when the SwiftUI environment changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1021"
  },
  {
    "text": "Since the script editor does a bunch of work ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1025"
  },
  {
    "text": "when the sourceCode property is set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1027"
  },
  {
    "text": "we compare the value already in the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1029"
  },
  {
    "text": "and only set the property if it changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1032"
  },
  {
    "text": "to avoid unnecessary work.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1035"
  },
  {
    "text": "The context passed to updateNSView ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1037"
  },
  {
    "text": "contains the SwiftUI environment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1040"
  },
  {
    "text": "The isEnabled environment key ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1043"
  },
  {
    "text": "is passed to the isEditable property on the script editor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1045"
  },
  {
    "text": "so editing is disabled ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1050"
  },
  {
    "text": "if the rest of the SwiftUI view hierarchy is.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1051"
  },
  {
    "text": "Whenever someone modifies the source code in the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1055"
  },
  {
    "text": "the source code binding needs to capture the new value.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1059"
  },
  {
    "text": "To do this, we'll build a coordinator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1062"
  },
  {
    "text": "that conforms to the ScriptEditorViewDelegate.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1064"
  },
  {
    "text": "The coordinator will store the representable value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1069"
  },
  {
    "text": "which contains the source code binding that it needs to update.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1072"
  },
  {
    "text": "And in the sourceCodeDidChange method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1076"
  },
  {
    "text": "the binding is set to the new string value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1079"
  },
  {
    "text": "from the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1081"
  },
  {
    "text": "Finally, we need to tell the SwiftUI representable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1084"
  },
  {
    "text": "how to make and update the coordinator.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1087"
  },
  {
    "text": "First, you need to implement the makeCoordinator method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1090"
  },
  {
    "text": "to create a new coordinator.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1094"
  },
  {
    "text": "Coordinators have the same lifetime as the hosted view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1097"
  },
  {
    "text": "and like hosted views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1101"
  },
  {
    "text": "properties you add to the coordinator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1103"
  },
  {
    "text": "need to remain up to date as the representable changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1105"
  },
  {
    "text": "Since updateNSView is called ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1109"
  },
  {
    "text": "when the values stored in the representable change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1111"
  },
  {
    "text": "here, the representable property on the coordinator is updated.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1114"
  },
  {
    "text": "Now that you know how to add AppKit into SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1120"
  },
  {
    "text": "and also add SwiftUI into AppKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1123"
  },
  {
    "text": "you should start integrating SwiftUI into your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1126"
  },
  {
    "text": "A great place to start is in your sidebar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1130"
  },
  {
    "text": "or table and collection view cells.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1132"
  },
  {
    "text": "Make sure your views are sizing themselves correctly ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1135"
  },
  {
    "text": "and handling common commands and focus.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1138"
  },
  {
    "text": "Thanks for your time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1141"
  },
  {
    "text": "and I can't wait to see what you build ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1142"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10075/?time=1145"
  }
]