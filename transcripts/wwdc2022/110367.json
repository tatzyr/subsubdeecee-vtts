[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=0"
  },
  {
    "text": "Alex: Hello, my name is Alex, and I work on Developer Tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=9"
  },
  {
    "text": "Today I want to talk to you about the new C++ 20 features supported in Xcode 14. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=13"
  },
  {
    "text": "I will specifically focus on how C++ 20 concepts simplify ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=20"
  },
  {
    "text": "and improve the type safety of generic C++ code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=26"
  },
  {
    "text": "I will demonstrate how to use concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=30"
  },
  {
    "text": "and will explain how to create your own concepts as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=33"
  },
  {
    "text": "I will end the talk by listing several other new C++20 features supported ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=37"
  },
  {
    "text": "in Xcode, and will touch on how some of them can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=43"
  },
  {
    "text": "to improve the performance of your C++ projects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=47"
  },
  {
    "text": "through the power of compile time code evaluation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=51"
  },
  {
    "text": "Before diving into C++ concepts, let's first go over a quick overview ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=55"
  },
  {
    "text": "of how to write generic code in C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=60"
  },
  {
    "text": "Let's say I want to write a function that checks if a number is odd. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=63"
  },
  {
    "text": "I can write a function that takes in an 'int' parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=68"
  },
  {
    "text": "and it would work with any value that can be represented by the 'int' type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=71"
  },
  {
    "text": "What would happen if I pass in a 64 bit unsigned integer value to it? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=76"
  },
  {
    "text": "A concrete function like this one does not behave correctly with 64 bit values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=82"
  },
  {
    "text": "as they get truncated to fit into the 'int' type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=87"
  },
  {
    "text": "To fix this, I can make 'isOdd' a function template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=91"
  },
  {
    "text": "Now that I have a function template, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=96"
  },
  {
    "text": "I can pass in the 64 bit unsigned integer value to it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=98"
  },
  {
    "text": "The compiler will now automatically generate a specialization of 'isOdd' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=102"
  },
  {
    "text": "that works correctly with the 'uint64_t' type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=107"
  },
  {
    "text": "This is really useful as it means I don't have to write two versions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=113"
  },
  {
    "text": "of 'isOdd' that operate on two different types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=116"
  },
  {
    "text": "You can use C++ templates to write generic functions like 'isOdd', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=120"
  },
  {
    "text": "and generic container classes as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=125"
  },
  {
    "text": "Let's take a look at how 'isOdd' can be used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=128"
  },
  {
    "text": "This function is tested with several test cases that I added in my test file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=132"
  },
  {
    "text": "Unfortunately, I have made a mistake in one of my tests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=138"
  },
  {
    "text": "The compiler caught the mistake, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=141"
  },
  {
    "text": "but instead of pointing to where I made the mistake, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=144"
  },
  {
    "text": "the compiler shows an error inside the 'isOdd' template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=147"
  },
  {
    "text": "It looks like I made a typo and wrote out '1.1' in my test instead of '11'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=151"
  },
  {
    "text": "Because of that, the compiler generates a specialization of 'isOdd' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=157"
  },
  {
    "text": "that takes in a 'double' type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=161"
  },
  {
    "text": "Unfortunately, it took me some time to find this typo ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=164"
  },
  {
    "text": "as Xcode didn't point me to the specific location ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=167"
  },
  {
    "text": "where 'isOdd' was invoked with incorrect type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=170"
  },
  {
    "text": "Can the language and the compiler help me find mistakes like this faster? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=175"
  },
  {
    "text": "Well, in the current example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=180"
  },
  {
    "text": "the requirements for what types are allowed into 'isOdd' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=182"
  },
  {
    "text": "are not specified explicitly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=186"
  },
  {
    "text": "There's only a documentation comment that states that I must call isOdd ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=189"
  },
  {
    "text": "using integer types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=193"
  },
  {
    "text": "Prior to C++20, C++ programmers did not have a good way ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=196"
  },
  {
    "text": "to specify template requirements when writing generic C++ code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=200"
  },
  {
    "text": "They often had to resort to documentation comments, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=205"
  },
  {
    "text": "specific parameter names, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=208"
  },
  {
    "text": "or complicated enable_if checks ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=210"
  },
  {
    "text": "when specifying template requirements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=213"
  },
  {
    "text": "Well, as you might've heard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=215"
  },
  {
    "text": "C++ 20 introduces a new C++ feature called concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=217"
  },
  {
    "text": "You can use concepts to validate template requirements in your generic C++ code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=222"
  },
  {
    "text": "Let's take a look at how concepts can help me validate the types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=229"
  },
  {
    "text": "that can be passed into 'isOdd'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=233"
  },
  {
    "text": "First, let's go back to the declaration of 'isOdd'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=236"
  },
  {
    "text": "Currently, I use the 'class' keyword ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=240"
  },
  {
    "text": "to specify that type ‘T’ that's used by this template can be any type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=243"
  },
  {
    "text": "C++ 20 allows me to use a concept instead of the 'class' keyword ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=249"
  },
  {
    "text": "to restrict the set of types that this template can be used with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=255"
  },
  {
    "text": "I can use the 'integral' concept provided by the standard library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=259"
  },
  {
    "text": "to restrict this 'isOdd' function template only to the built-in integer types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=264"
  },
  {
    "text": "The compiler will not even try to specialize this function template ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=270"
  },
  {
    "text": "when T does not satisfy this concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=275"
  },
  {
    "text": "The integral concept is declared in the C++ standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=279"
  },
  {
    "text": "So I need to include the concepts header to use it in my code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=283"
  },
  {
    "text": "Now that I added an 'integral' requirement to the type _T_ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=288"
  },
  {
    "text": "in the 'isOdd' function template, the compiler is able to provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=292"
  },
  {
    "text": "a much clearer diagnostic that points directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=296"
  },
  {
    "text": "at where I made the mistake in my tests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=300"
  },
  {
    "text": "Turns out, '1.1' is a double, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=304"
  },
  {
    "text": "and therefore, it does not satisfy the 'integral' concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=307"
  },
  {
    "text": "The compiler is able to explain this to me with a clear error message ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=311"
  },
  {
    "text": "that helps me find and fix this typo much quicker than before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=317"
  },
  {
    "text": "In addition to helping me fix the bug, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=322"
  },
  {
    "text": "constraining the type passed to 'isOdd' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=324"
  },
  {
    "text": "gives me the peace of mind that all the test cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=327"
  },
  {
    "text": "that I have for is 'isOdd' work only with integer types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=330"
  },
  {
    "text": "and that they're actually testing the intended behavior of the algorithm. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=335"
  },
  {
    "text": "You can use concepts to declare the intent ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=341"
  },
  {
    "text": "for which types your templates are meant to be used with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=344"
  },
  {
    "text": "The compiler will then validate the type requirements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=348"
  },
  {
    "text": "before your templates are specialized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=351"
  },
  {
    "text": "Let's take a closer look at how concepts can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=355"
  },
  {
    "text": "and which core concepts are provided by the C++ standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=358"
  },
  {
    "text": "The C++ standard library provides a concepts library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=364"
  },
  {
    "text": "It implements a set of core language concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=368"
  },
  {
    "text": "that you can use to validate the core behavior of a type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=371"
  },
  {
    "text": "You can access this library by including the concepts header in your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=376"
  },
  {
    "text": "I've already shown how I can use the 'integral' concept ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=382"
  },
  {
    "text": "in my earlier example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=386"
  },
  {
    "text": "Now, let's take a look at the other concepts provided by this library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=388"
  },
  {
    "text": "This library provides a number of useful core language concepts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=393"
  },
  {
    "text": "like concepts that test if a type is one of the built-in types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=397"
  },
  {
    "text": "For instance, the 'floating_point' concept is satisfied ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=402"
  },
  {
    "text": "by built-in types like 'float' and 'double'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=405"
  },
  {
    "text": "The 'static_assert' shown here validates that this is indeed the case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=408"
  },
  {
    "text": "It also provides a lot of other useful core concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=414"
  },
  {
    "text": "that check if types are constructible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=417"
  },
  {
    "text": "destructible, convertible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=420"
  },
  {
    "text": "or are they the same as another type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=422"
  },
  {
    "text": "For instance, the 'convertible_to' concept tests ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=425"
  },
  {
    "text": "if a type can be converted to another type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=429"
  },
  {
    "text": "and the 'move_constructible' concept is satisfied by types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=432"
  },
  {
    "text": "that can be constructed directly from another value of the same type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=436"
  },
  {
    "text": "This library also provides several comparison concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=441"
  },
  {
    "text": "that test if types can be compared to other types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=445"
  },
  {
    "text": "For instance, the 'equality_comparable' concept is satisfied by types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=450"
  },
  {
    "text": "that have a valid '==' operator that works with a value of the same type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=454"
  },
  {
    "text": "In addition to concepts mentioned on this slide, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=462"
  },
  {
    "text": "this library provides numerous other core language concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=465"
  },
  {
    "text": "It also provides concepts that test if a type can be moved or copied. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=469"
  },
  {
    "text": "In addition to that, it also provides concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=474"
  },
  {
    "text": "that check if a type is some callable object.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=477"
  },
  {
    "text": "Now that we've looked over the concepts provided to us ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=482"
  },
  {
    "text": "by the C++ standard library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=485"
  },
  {
    "text": "let's take a look at how concepts can be used to constrain templates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=487"
  },
  {
    "text": "Like I've shown earlier, you can use a concept instead of the class keyword ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=492"
  },
  {
    "text": "in a template to restrict which types are allowed for this template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=497"
  },
  {
    "text": "In addition to that, you can use a 'requires' clause ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=502"
  },
  {
    "text": "in a template declaration if you ever need to constrain a type to multiple concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=505"
  },
  {
    "text": "Let's take a look at a slightly different example to see how it can be done.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=511"
  },
  {
    "text": "Here I have 'isDefaultValue' function template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=517"
  },
  {
    "text": "It returns true if the given value is equal to the default value of its type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=521"
  },
  {
    "text": "I can use two concepts from the standard library to test ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=527"
  },
  {
    "text": "that this type supports these operations before this template is specialized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=531"
  },
  {
    "text": "I'm going to add the 'requires' clause to restrict the set of types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=536"
  },
  {
    "text": "which are allowed for this function template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=540"
  },
  {
    "text": "Let's see which concepts from the concepts library can help me ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=543"
  },
  {
    "text": "validate the type here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=546"
  },
  {
    "text": "First, the 'equality_comparable' concept tests if _T_ can be compared ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=548"
  },
  {
    "text": "to another value of the same type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=554"
  },
  {
    "text": "Then, the 'default_constructible' concept tests if _T_ is a type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=558"
  },
  {
    "text": "with a default constructor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=563"
  },
  {
    "text": "The logical and operator between them instructs the compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=566"
  },
  {
    "text": "to validate both concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=569"
  },
  {
    "text": "This ensures that this function template will only be specialized ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=572"
  },
  {
    "text": "with supported types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=576"
  },
  {
    "text": "Let's go over what we've learned so far about concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=579"
  },
  {
    "text": "You should use concepts to restrict the types which are allowed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=583"
  },
  {
    "text": "to be used in your templates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=586"
  },
  {
    "text": "The compiler will then be able to show clearer diagnostics ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=588"
  },
  {
    "text": "as the template won't have to be specialized if a type mismatch occurs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=591"
  },
  {
    "text": "You should reuse the concepts from the concepts library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=597"
  },
  {
    "text": "if you need to validate some core behavior of a type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=600"
  },
  {
    "text": "You should add the 'requires' clause to your templates ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=605"
  },
  {
    "text": "when you need to test if types conform to multiple requirements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=608"
  },
  {
    "text": "We've now seen how to use concepts in C++ programs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=612"
  },
  {
    "text": "C++ allows us to declare custom concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=617"
  },
  {
    "text": "that validate specific behavior of a type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=620"
  },
  {
    "text": "Let's take a look at how to create our own concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=624"
  },
  {
    "text": "that validate specific type behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=627"
  },
  {
    "text": "Before we do that, though, we need to take a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=631"
  },
  {
    "text": "at how to identify the behavioral requirements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=633"
  },
  {
    "text": "that must be validated by the concept we want to declare. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=637"
  },
  {
    "text": "I'm going to use a new example to illustrate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=641"
  },
  {
    "text": "how to validate specific type behavior using concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=644"
  },
  {
    "text": "Say I am building a C++ library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=649"
  },
  {
    "text": "that can render various two-dimensional shapes to an image.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=652"
  },
  {
    "text": "I would like to support various shapes in my library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=657"
  },
  {
    "text": "I'm starting out with a circle shape, as it's the simplest to render. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=660"
  },
  {
    "text": "I'm going to use a C++ class to store its properties, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=665"
  },
  {
    "text": "like position and radius. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=669"
  },
  {
    "text": "In order to render the circle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=672"
  },
  {
    "text": "I'm going to use a distance-function based rendering algorithm ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=674"
  },
  {
    "text": "that runs on each pixel in the rendered image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=678"
  },
  {
    "text": "This algorithm needs to compute the distance to the shape's surface ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=683"
  },
  {
    "text": "in order to render it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=687"
  },
  {
    "text": "The 'getDistanceFrom' method in the Circle class computes it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=690"
  },
  {
    "text": "It returns a negative distance inside the circle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=694"
  },
  {
    "text": "and a positive distance outside the circle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=697"
  },
  {
    "text": "In addition to the circle, I would like to render other shapes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=702"
  },
  {
    "text": "For instance, by geometrically subtracting one circle shape ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=705"
  },
  {
    "text": "from another circle shape, I can render a crescent shape as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=709"
  },
  {
    "text": "I'm going to represent shapes like Crescent that I would like ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=715"
  },
  {
    "text": "to render using classes as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=718"
  },
  {
    "text": "Each new shape class includes the 'getDistanceFrom' method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=720"
  },
  {
    "text": "After creating several shape classes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=726"
  },
  {
    "text": "I now would like to try rendering these shapes to verify their implementation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=729"
  },
  {
    "text": "I have a couple of options for how I can create the rendering function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=735"
  },
  {
    "text": "that works with any shape. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=739"
  },
  {
    "text": "I can create a class hierarchy for the shapes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=741"
  },
  {
    "text": "and use a virtual method to compute the distance to the shape's surface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=744"
  },
  {
    "text": "However, I'm going to use a function template instead for performance reasons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=749"
  },
  {
    "text": "as I want to avoid the virtual call overhead ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=755"
  },
  {
    "text": "as this function is going to be called millions of times during rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=758"
  },
  {
    "text": "This is why I created this rendering function template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=763"
  },
  {
    "text": "The computePixelColor function takes in a shape value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=767"
  },
  {
    "text": "and checks if the given pixel is inside the shape. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=771"
  },
  {
    "text": "If it's inside, it returns a plain white color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=775"
  },
  {
    "text": "This now allows me to verify that shapes can be filled in correctly.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=779"
  },
  {
    "text": "This function is a template, which makes it work with any shape type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=785"
  },
  {
    "text": "be it a circle, crescent, or any other matching type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=789"
  },
  {
    "text": "Even though a template works well here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=794"
  },
  {
    "text": "I would like to use concepts to constrain the type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=796"
  },
  {
    "text": "that can be passed to this function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=799"
  },
  {
    "text": "Constraining the type that's passed to this function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=802"
  },
  {
    "text": "will allow the compiler to produce clearer diagnostics when a type mismatch occurs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=805"
  },
  {
    "text": "In addition to that, constraining the type that's passed to this function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=812"
  },
  {
    "text": "will also allow me to add additional overloads of this function.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=816"
  },
  {
    "text": "In order to constrain the type, I'm going to create a Shape concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=821"
  },
  {
    "text": "This concept will validate the type's behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=826"
  },
  {
    "text": "and will accept classes like circle, crescent, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=829"
  },
  {
    "text": "and any other shape class that I might want to add in the future. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=832"
  },
  {
    "text": "In order to create a concept like 'Shape', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=837"
  },
  {
    "text": "I first need to identify the requirements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=839"
  },
  {
    "text": "that must be validated by this concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=841"
  },
  {
    "text": "Let's see how this can be done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=844"
  },
  {
    "text": "This function template uses type 'T' as the generic type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=847"
  },
  {
    "text": "An argument named 'shape' of type 'T' is then passed to this function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=851"
  },
  {
    "text": "The 'shape' argument is then used inside the function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=856"
  },
  {
    "text": "when I call the 'getDistanceFrom' method on it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=860"
  },
  {
    "text": "As you can see, this is the only requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=864"
  },
  {
    "text": "I want to validate in my concept, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=867"
  },
  {
    "text": "as no other operations are being performed on shape in this function.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=869"
  },
  {
    "text": "You can use the 'requires' expression to test if a type behaves ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=875"
  },
  {
    "text": "in a specific manner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=879"
  },
  {
    "text": "Let's take a look at how I can use 'requires' to create the Shape concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=881"
  },
  {
    "text": "I need to provide a set of expressions that test the behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=886"
  },
  {
    "text": "of a type inside the 'requires'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=890"
  },
  {
    "text": "I already identified the call to 'getDistanceFrom' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=893"
  },
  {
    "text": "as a single requirement I need to test, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=896"
  },
  {
    "text": "so now I can go ahead and create the 'Shape' concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=899"
  },
  {
    "text": "I declared the shape concept using the 'concept' keyword. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=903"
  },
  {
    "text": "I then added the 'requires' expression to this concept to validate the type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=907"
  },
  {
    "text": "I added an argument list to the 'requires' expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=913"
  },
  {
    "text": "This argument list allows me to declare a value 'shape' of type 'T' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=917"
  },
  {
    "text": "that I will then be testing inside the 'requires'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=922"
  },
  {
    "text": "You can use an argument list in a requires expression to declare values of any type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=926"
  },
  {
    "text": "You will then be able to use these values inside the requires. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=931"
  },
  {
    "text": "The body of the 'requires' expression contains a set of requirements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=936"
  },
  {
    "text": "that must pass in order for this concept to be satisfied. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=940"
  },
  {
    "text": "The 'shape' concept has just one simple expression requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=944"
  },
  {
    "text": "that checks whether a method call to 'getDistanceFrom' is valid. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=948"
  },
  {
    "text": "This expression isn't actually going to be executed in the program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=953"
  },
  {
    "text": "It's only needed at compile time to validate the type's behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=958"
  },
  {
    "text": "and it's discarded after the validation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=962"
  },
  {
    "text": "You can use expression requirements to validate the type's behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=966"
  },
  {
    "text": "by testing if a particular expression compiles or not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=970"
  },
  {
    "text": "This particular expression is not yet complete though, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=975"
  },
  {
    "text": "as we're missing the arguments to the 'getDistanceFrom' method call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=979"
  },
  {
    "text": "I know that I want this method to take two values of type 'float', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=983"
  },
  {
    "text": "so I can use two floating point literals to complete this expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=988"
  },
  {
    "text": "I am going to add an additional check to test that 'getDistanceFrom' method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=993"
  },
  {
    "text": "returns a float value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=997"
  },
  {
    "text": "as that's what is being assumed by my generic code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=999"
  },
  {
    "text": "I'm currently using a simple expression requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1005"
  },
  {
    "text": "to test if the type has the 'getDistanceFrom' method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1008"
  },
  {
    "text": "However, I can use a compound requirement instead of the expression requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1013"
  },
  {
    "text": "to test that it returns a float value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1017"
  },
  {
    "text": "The arrow operator can follow a compound requirement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1021"
  },
  {
    "text": "The arrow operator expects a constraint on its right hand side, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1025"
  },
  {
    "text": "so this is where I can use a standard library concept like 'same_as' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1028"
  },
  {
    "text": "to validate that the call to 'getDistanceFrom' method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1033"
  },
  {
    "text": "returns a float value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1036"
  },
  {
    "text": "Now this concept looks ready to me.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1039"
  },
  {
    "text": "I can go ahead and use it to constrain the types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1043"
  },
  {
    "text": "that can be passed to my 'computePixelColor' function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1047"
  },
  {
    "text": "Now my generic 'computePixelColor' function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1050"
  },
  {
    "text": "will only work with types that satisfy the 'Shape' concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1053"
  },
  {
    "text": "This means that classes like Circle and Crescent will be rendered ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1058"
  },
  {
    "text": "using this particular generic 'computePixelColor' function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1062"
  },
  {
    "text": "as both of these types satisfy the 'Shape' concept.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1065"
  },
  {
    "text": "After seeing the plain shapes rendered, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1072"
  },
  {
    "text": "I would like to create a different version of 'computePixelColor' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1074"
  },
  {
    "text": "that adds colors to some of my shapes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1078"
  },
  {
    "text": "Let's say I want to add a colorful GradientCircle class to my shape library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1081"
  },
  {
    "text": "I now need a new function to compute the pixel color in the image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1087"
  },
  {
    "text": "C++20 allows me to create multiple variants ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1093"
  },
  {
    "text": "of the 'computePixelColor' function template. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1097"
  },
  {
    "text": "Each variant must be constrained using different concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1100"
  },
  {
    "text": "I am going to create a new GradientShape concept ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1104"
  },
  {
    "text": "that will be satisfied by classes like GradientCircle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1107"
  },
  {
    "text": "This concept will then constrain a new variant of 'computePixelColor' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1111"
  },
  {
    "text": "that only works with shapes that have a gradient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1116"
  },
  {
    "text": "This concept is implemented using a 'requires' expression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1120"
  },
  {
    "text": "just like the Shape concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1124"
  },
  {
    "text": "However, since I want GradientShape ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1126"
  },
  {
    "text": "to satisfy the original Shape concept as well, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1129"
  },
  {
    "text": "I include it as the first requirement in the new concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1132"
  },
  {
    "text": "This ensures that a class that satisfies the GradientShape concept ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1136"
  },
  {
    "text": "also satisfies the Shape concept, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1141"
  },
  {
    "text": "which means I can still call the 'getDistanceFrom' method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1143"
  },
  {
    "text": "for values of such class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1147"
  },
  {
    "text": "I then use the logical and operator and the 'requires' expression ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1150"
  },
  {
    "text": "to ensure that the GradientShape concept can only be satisfied ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1154"
  },
  {
    "text": "by classes that have the 'getGradientColor' method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1158"
  },
  {
    "text": "Now that I have created the GradientShape concept, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1163"
  },
  {
    "text": "I can go ahead and create a new variant of 'computePixelColor'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1165"
  },
  {
    "text": "This function template only works with shape classes with a gradient, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1171"
  },
  {
    "text": "like the GradientCircle class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1176"
  },
  {
    "text": "as it is constrained by the GradientShape concept. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1178"
  },
  {
    "text": "Now that I have all the pieces in place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1182"
  },
  {
    "text": "I can go ahead and try rendering a circle with a gradient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1184"
  },
  {
    "text": "Here I'm rendering a GradientCircle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1189"
  },
  {
    "text": "Let's see which overload of 'computePixelColor' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1192"
  },
  {
    "text": "the compiler is going to pick inside the 'render' function.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1195"
  },
  {
    "text": "Even though GradientCircle can be safely used with both variants ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1200"
  },
  {
    "text": "of computePixelColor, the compiler picks the overload that is constrained ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1204"
  },
  {
    "text": "with the GradientShape concept ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1209"
  },
  {
    "text": "as it's more specific than the first overload. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1211"
  },
  {
    "text": "Because the compiler picks the most matching overload of 'computePixelColor', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1215"
  },
  {
    "text": "I can see this beautiful gradient circle rendered when I test my library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1219"
  },
  {
    "text": "Amazing! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1224"
  },
  {
    "text": "Now let's go over what we've learned about creating concepts.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1226"
  },
  {
    "text": "You can create concepts by identifying the behavioral requirements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1232"
  },
  {
    "text": "in your existing generic code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1237"
  },
  {
    "text": "You should use the requires expression to create concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1240"
  },
  {
    "text": "to validate the behavior of types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1243"
  },
  {
    "text": "You can also use concepts to create more specific variants ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1246"
  },
  {
    "text": "of generic functions and classes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1250"
  },
  {
    "text": "We've now seen how to enhance your generic C++ code with concepts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1255"
  },
  {
    "text": "In addition to supporting concepts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1260"
  },
  {
    "text": "Xcode 14 has improved its support for other C++20 features as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1263"
  },
  {
    "text": "More specifically, I would like to highlight ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1269"
  },
  {
    "text": "the improved support for compile-time C++ code evaluation in Xcode 14.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1271"
  },
  {
    "text": "Compile time code evaluation is useful ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1279"
  },
  {
    "text": "as it can reduce the cost of initialization ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1281"
  },
  {
    "text": "for variables in your C++ code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1285"
  },
  {
    "text": "This could help reduce your app launch time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1288"
  },
  {
    "text": "if your app has a lot of C++ code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1291"
  },
  {
    "text": "that depends on complex initialization sequences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1293"
  },
  {
    "text": "In addition to that, compile time code evaluation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1298"
  },
  {
    "text": "can help you validate constants that require validation at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1301"
  },
  {
    "text": "This could help you catch bugs before your code even runs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1307"
  },
  {
    "text": "Let's take a look at an example ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1312"
  },
  {
    "text": "to see how I can use compile time code evaluation in C++.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1314"
  },
  {
    "text": "Here I have a snippet of code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1319"
  },
  {
    "text": "that initializes a color palette in my shape rendering library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1321"
  },
  {
    "text": "This library is then used in an iOS app that renders the shapes to the display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1325"
  },
  {
    "text": "Each color in the palette is initialized by parsing a string literal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1331"
  },
  {
    "text": "with the HTML hex code of the color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1335"
  },
  {
    "text": "Currently, the 'fromHexCode' function needs to parse three string literals ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1338"
  },
  {
    "text": "during the initialization of the array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1343"
  },
  {
    "text": "Complicated constant initialization operations like this one ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1346"
  },
  {
    "text": "can have a measurable impact on the launch time of my app if I have a lot of them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1350"
  },
  {
    "text": "I can use compile-time code evaluation to ensure that this array is initialized ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1356"
  },
  {
    "text": "with constant color values instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1361"
  },
  {
    "text": "Let me show you can this can be done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1364"
  },
  {
    "text": "The 'constexpr' keyword enables compile-time code evaluation in C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1367"
  },
  {
    "text": "I must add it in several places in my example ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1373"
  },
  {
    "text": "in order to ensure that palette is a constant color array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1377"
  },
  {
    "text": "First, I need to add the 'constexpr' keyword to the 'fromHexCode' function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1382"
  },
  {
    "text": "The compiler will be now be able to execute the code in this function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1387"
  },
  {
    "text": "at compile time when it's used in a compile time initialization sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1390"
  },
  {
    "text": "You should make your C++ functions 'constexpr' when you want them ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1396"
  },
  {
    "text": "to be evaluatable at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1400"
  },
  {
    "text": "The compiler will let you know if the code in such function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1403"
  },
  {
    "text": "cannot be evaluated at compile time by showing an error ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1406"
  },
  {
    "text": "when you use it in a 'constexpr' initialization sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1410"
  },
  {
    "text": "However, you can also examine a function before adding 'constexpr' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1414"
  },
  {
    "text": "to see if it can be evaluated at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1418"
  },
  {
    "text": "Let's take a peek into fromHexCode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1422"
  },
  {
    "text": "to see how to check if a function like this one ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1424"
  },
  {
    "text": "can be a good candidate for compile time code evaluation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1427"
  },
  {
    "text": "This function uses a number of language constructs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1431"
  },
  {
    "text": "like if statements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1435"
  },
  {
    "text": "and primitive operations like comparison operators and arithmetic operators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1437"
  },
  {
    "text": "All of these operations can be evaluated at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1442"
  },
  {
    "text": "Also, this function makes several calls to another function; hexToInt. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1447"
  },
  {
    "text": "I have already annotated hexToInt function with 'constexpr', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1453"
  },
  {
    "text": "so calls to this function can be evaluated at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1457"
  },
  {
    "text": "Overall, it looks like fromHexCode contains code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1462"
  },
  {
    "text": "that the compiler should be able to evaluate at compile time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1465"
  },
  {
    "text": "so I think it's safe to proceed and use it in a compile time initialization sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1468"
  },
  {
    "text": "After making sure that fromHexCode can be evaluated at compile time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1474"
  },
  {
    "text": "I then need to add the 'constexpr' keyword ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1479"
  },
  {
    "text": "to the 'colorPalette' variable declaration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1482"
  },
  {
    "text": "The compiler now guarantees that it will evaluate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1485"
  },
  {
    "text": "the entire initialization sequence for this array at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1489"
  },
  {
    "text": "More specifically, the compiler will evaluate each call ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1494"
  },
  {
    "text": "to the fromHexCode function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1498"
  },
  {
    "text": "The evaluation will produce a constant color value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1501"
  },
  {
    "text": "that will replace the original call to the function in the palette's initializer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1504"
  },
  {
    "text": "Since all the calls to fromHexCode are now replaced by constant color values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1509"
  },
  {
    "text": "the 'colorPalette' variable is now guaranteed to be initialized ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1515"
  },
  {
    "text": "by an array literal that contains constant color values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1519"
  },
  {
    "text": "This means that now my app doesn't have to pay additional cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1524"
  },
  {
    "text": "for parsing the color values when this palette is initialized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1528"
  },
  {
    "text": "This is great for the launch time of my app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1533"
  },
  {
    "text": "as it reduces the amount of work ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1536"
  },
  {
    "text": "this C++ library inside the app has to do at startup. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1538"
  },
  {
    "text": "You should make your C++ variables 'constexpr' ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1543"
  },
  {
    "text": "when you want to ensure that they are initialized with constant values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1546"
  },
  {
    "text": "Xcode 14 has actually greatly improved its standard library support ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1551"
  },
  {
    "text": "for compile time evaluation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1556"
  },
  {
    "text": "This year we've added the 'constexpr' support ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1559"
  },
  {
    "text": "to several different standard library types and algorithms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1561"
  },
  {
    "text": "which can now be used during compile-time code evaluation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1565"
  },
  {
    "text": "In addition to that, Xcode 14 has greatly improved ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1570"
  },
  {
    "text": "its C++20 standard support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1574"
  },
  {
    "text": "All of the features shown here can now be used in C++ 20 mode.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1577"
  },
  {
    "text": "You should switch to C++ 20 mode today if you haven't already done so. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1583"
  },
  {
    "text": "You can use the \"C++ Language Dialect\" setting ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1589"
  },
  {
    "text": "in your Xcode project to upgrade to C++ 20. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1592"
  },
  {
    "text": "Switching to C++20 will let you use features like concepts in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1597"
  },
  {
    "text": "C++20 does not require a minimum deployment target, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1603"
  },
  {
    "text": "so you can still ship your code for the same OS version ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1607"
  },
  {
    "text": "that you're currently targeting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1610"
  },
  {
    "text": "Try C++20 today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1613"
  },
  {
    "text": "Thank you! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1616"
  },
  {
    "text": "Enjoy the rest of the developer's conference.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110367/?time=1617"
  }
]