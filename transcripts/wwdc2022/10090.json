[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=0"
  },
  {
    "text": "- Hi, and welcome to What's New in TextKit and text views! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=9"
  },
  {
    "text": "I'm Donna Tom, and I'm a TextKit engineer.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=14"
  },
  {
    "text": "In iOS 15 and macOS Monterey, we introduced TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=18"
  },
  {
    "text": "a powerful new text engine with improved performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=23"
  },
  {
    "text": "correctness, and safety.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=27"
  },
  {
    "text": "TextKit 2's viewport-based layout architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=30"
  },
  {
    "text": "delivers high performance text layout, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=33"
  },
  {
    "text": "especially for documents with large contents.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=35"
  },
  {
    "text": "TextKit 2 provides a better text experience for international audiences ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=40"
  },
  {
    "text": "by removing the unnecessary complexity of working with glyphs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=44"
  },
  {
    "text": "and it has full support for modern font technologies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=49"
  },
  {
    "text": "like OpenType and Variable Fonts.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=52"
  },
  {
    "text": "And TextKit 2's focus on working with higher level objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=56"
  },
  {
    "text": "to control text layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=59"
  },
  {
    "text": "makes it easier for you to customize the layout of your text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=61"
  },
  {
    "text": "so you can build cooler stuff with less code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=64"
  },
  {
    "text": "Moving forward, the TextKit 2 engine ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=70"
  },
  {
    "text": "forms the foundation of text layout and rendering on all of Apple's platforms.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=72"
  },
  {
    "text": "Future performance enhancements, updates, and improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=79"
  },
  {
    "text": "will all be focused on the TextKit 2 engine.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=84"
  },
  {
    "text": "By updating to TextKit 2, your app can get the benefits ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=88"
  },
  {
    "text": "of these improvements as we roll them out.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=91"
  },
  {
    "text": "For an in-depth introduction to TextKit2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=94"
  },
  {
    "text": "watch the Meet TextKit2 video. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=96"
  },
  {
    "text": "That video covers the fundamentals ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=99"
  },
  {
    "text": "and how to build your own text layout components using TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=102"
  },
  {
    "text": "In contrast, this video covers the latest advancements in TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=107"
  },
  {
    "text": "and how to get the most out of TextKit 2-backed text views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=112"
  },
  {
    "text": "That's right, I said text views, plural, because now, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=116"
  },
  {
    "text": "as of iOS 16 and macOS Ventura, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=122"
  },
  {
    "text": "all text controls in UIKit and AppKit are using TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=125"
  },
  {
    "text": "including UITextView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=129"
  },
  {
    "text": "So we're using TextKit 2 for layout and rendering all throughout the system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=132"
  },
  {
    "text": "It's important that all apps transition to TextKit 2 as soon as possible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=137"
  },
  {
    "text": "and we've added a number of tools to make the transition easier for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=142"
  },
  {
    "text": "For many apps, this can be a zero code transition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=147"
  },
  {
    "text": "And we expect this to be true ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=151"
  },
  {
    "text": "for apps that don't make any special modifications to their text views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=153"
  },
  {
    "text": "I'll tell you a bit more about that later.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=156"
  },
  {
    "text": "But first, I'll start by going over what's new in TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=160"
  },
  {
    "text": "including some of those tools I just mentioned.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=164"
  },
  {
    "text": "After that, I'll dive deep into the details ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=168"
  },
  {
    "text": "of the TextKit 1 compatibility mode for text views.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=170"
  },
  {
    "text": "Then I'll finish with a discussion of modernization strategies you can use ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=174"
  },
  {
    "text": "when preparing to transition your code to TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=179"
  },
  {
    "text": "So first up is what's new in TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=183"
  },
  {
    "text": "TextKit 2 first came to UIKit in iOS 15 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=188"
  },
  {
    "text": "where UITextField was upgraded to use it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=192"
  },
  {
    "text": "In iOS 16, the UIKit transition to TextKit 2 is complete, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=195"
  },
  {
    "text": "with all text controls using TextKit 2 by default, including UITextView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=200"
  },
  {
    "text": "Most text views will be automatically opted in to TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=206"
  },
  {
    "text": "requiring zero adoption on your part. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=210"
  },
  {
    "text": "There are just a few situations where text views might not get opted in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=212"
  },
  {
    "text": "and I'll cover that in the compatibility segment of this video.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=216"
  },
  {
    "text": "And it's a similar story for AppKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=222"
  },
  {
    "text": "TextKit 2 first came to AppKit in macOS Big Sur. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=224"
  },
  {
    "text": "In macOS Monterey, NSTextField was upgraded to use it by default, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=229"
  },
  {
    "text": "and it was available for NSTextView by opting in.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=233"
  },
  {
    "text": "In macOS Ventura, all text controls use TextKit 2 by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=238"
  },
  {
    "text": "Just like UITextView, most NSTextViews get automatic opt in to TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=243"
  },
  {
    "text": "and require zero adoption on your part.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=249"
  },
  {
    "text": "TextEdit, which is a thin wrapper around NSTextView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=254"
  },
  {
    "text": "uses TextKit 2 everywhere in macOS Ventura. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=257"
  },
  {
    "text": "TextEdit has been using TextKit 2 in plain text mode since macOS Big Sur. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=262"
  },
  {
    "text": "In macOS Ventura, rich text mode uses TextKit 2 as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=267"
  },
  {
    "text": "Since TextKit 2 is the new standard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=274"
  },
  {
    "text": "we've added some convenience constructors for both UITextView and NSTextView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=277"
  },
  {
    "text": "Use these new constructors to choose at initialization time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=282"
  },
  {
    "text": "which text engine to use.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=286"
  },
  {
    "text": "To create a text view that uses TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=289"
  },
  {
    "text": "use the new constructor and pass true ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=292"
  },
  {
    "text": "for the \"UsingTextLayoutManager\" parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=295"
  },
  {
    "text": "If the text view needs to use TextKit 1 for compatibility, pass \"false\" instead.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=298"
  },
  {
    "text": "And there's a new Text Layout option for text views created in Interface Builder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=307"
  },
  {
    "text": "This new option gives you control of which layout system to use ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=312"
  },
  {
    "text": "on a per-instance basis. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=316"
  },
  {
    "text": "The default setting is the system default, which is TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=318"
  },
  {
    "text": "You can also choose to explicitly use TextKit 2 or TextKit 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=323"
  },
  {
    "text": "TextKit 2 now supports non-simple text containers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=330"
  },
  {
    "text": "Non-simple text containers may have holes or gaps in them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=334"
  },
  {
    "text": "This allows text to wrap around images or other inline content.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=339"
  },
  {
    "text": "To create a non-simple text container, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=345"
  },
  {
    "text": "use the exclusionPaths property on NSTextContainer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=347"
  },
  {
    "text": "to define the areas where text should not be laid out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=351"
  },
  {
    "text": "For an example of how to do this, check out the TextKitAndTextView sample code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=355"
  },
  {
    "text": "from the resources associated with this video. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=360"
  },
  {
    "text": "You can find the related example on the \"exclusion path\" tab.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=363"
  },
  {
    "text": "We've enhanced the line breaking engine in TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=370"
  },
  {
    "text": "to choose more even line breaks for justified paragraphs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=373"
  },
  {
    "text": "This is a subtle change that's easier to notice on longer paragraphs of text.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=377"
  },
  {
    "text": "Here we have two versions of the same text, laid out in the same area.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=383"
  },
  {
    "text": "Notice the stretched out lines and large interword spacing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=388"
  },
  {
    "text": "with traditional line breaking.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=392"
  },
  {
    "text": "There's much less of that going on ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=396"
  },
  {
    "text": "with the new even line breaking. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=397"
  },
  {
    "text": "This makes the text easier to read, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=400"
  },
  {
    "text": "and you get it for free with TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=402"
  },
  {
    "text": "There's no adoption required.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=405"
  },
  {
    "text": "And finally, we've added text list support in TextKit 2 for all platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=408"
  },
  {
    "text": "With text lists, you can programmatically create ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=413"
  },
  {
    "text": "numbered or bulleted lists for display in a text view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=416"
  },
  {
    "text": "TextKit 2 uses NSTextList to represent text lists, just like TextKit 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=420"
  },
  {
    "text": "NSTextList used to be available in AppKit only, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=427"
  },
  {
    "text": "but in iOS 16, it's available in UIKit too.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=430"
  },
  {
    "text": "Use NSTextList together with NSmutableParagraphStyle to specify ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=435"
  },
  {
    "text": "that a paragraph in your text storage should be formatted as a list for display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=440"
  },
  {
    "text": "The text view is responsible for picking up these attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=445"
  },
  {
    "text": "from the text storage and reformatting the paragraph content to look like a list.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=449"
  },
  {
    "text": "While NSTextList itself isn't new, there are a few new TextKit 2 additions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=455"
  },
  {
    "text": "Since lists can have nested items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=461"
  },
  {
    "text": "it's natural to represent them as a tree structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=464"
  },
  {
    "text": "In TextKit 2, we've enhanced NSTextElement to support structuring them as trees ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=467"
  },
  {
    "text": "with properties for accessing child and parent elements.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=473"
  },
  {
    "text": "And we've added a new element subclass called NSTextListElement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=478"
  },
  {
    "text": "When the content manager comes across a NSTextList in the text content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=482"
  },
  {
    "text": "it will generate NSTextListElements to represent the items in the list.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=487"
  },
  {
    "text": "To get a more in-depth view of how to create text lists and add items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=494"
  },
  {
    "text": "refer to the TextKitAndTextView sample code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=498"
  },
  {
    "text": "You can find the related example on the \"list\" tab.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=502"
  },
  {
    "text": "And while you're exploring the sample code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=507"
  },
  {
    "text": "don't miss the text attachment example ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=509"
  },
  {
    "text": "which shows how to use the text attachment view provider APIs in TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=511"
  },
  {
    "text": "These APIs let you use a UI or NSView as the text attachment, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=518"
  },
  {
    "text": "and events can be handled directly by the attachment view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=523"
  },
  {
    "text": "This makes event handling with text attachments a whole lot easier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=527"
  },
  {
    "text": "and it's only possible with TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=531"
  },
  {
    "text": "All right, that's it for what's new in TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=534"
  },
  {
    "text": "Next, I'll get into the details of the TextKit 1 compatibility mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=537"
  },
  {
    "text": "Since TextKit 2 is such a radical departure from the design of TextKit 1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=543"
  },
  {
    "text": "we understand that full adoption of TextKit 2 may take some time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=548"
  },
  {
    "text": "for apps that are heavily invested in the TextKit 1 architecture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=552"
  },
  {
    "text": "We want these apps to continue to work well until the transition can be made, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=557"
  },
  {
    "text": "and that's why we've added a special TextKit 1 compatibility mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=561"
  },
  {
    "text": "for UITextView and NSTextView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=565"
  },
  {
    "text": "When you explicitly call an NSLayoutManager API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=568"
  },
  {
    "text": "the text view replaces its NSTextLayoutManager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=572"
  },
  {
    "text": "with an NSLayoutManager and reconfigures itself to use TextKit 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=575"
  },
  {
    "text": "This can also happen if the text view encounters attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=581"
  },
  {
    "text": "not yet supported by TextKit 2, such as tables, or when printing.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=585"
  },
  {
    "text": "If you encounter an unexpected runtime fallback to TextKit 1 in UITextView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=592"
  },
  {
    "text": "check the log for a message warning about the switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=597"
  },
  {
    "text": "Set a breakpoint on the symbol underscore UITextViewEnablingCompatibilityMode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=601"
  },
  {
    "text": "to capture a stack trace and other useful debugging information.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=607"
  },
  {
    "text": "For NSTextView, you can get more information ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=613"
  },
  {
    "text": "about unexpected runtime fallbacks by subscribing to the willSwitch ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=615"
  },
  {
    "text": "or didSwitchToNSLayoutManager notifications.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=619"
  },
  {
    "text": "If you must drop back to TextKit 1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=625"
  },
  {
    "text": "it's best to opt out at initialization time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=627"
  },
  {
    "text": "with programmatically initialized text views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=631"
  },
  {
    "text": "Do this by using your own text container and a TextKit 1 layout manager.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=634"
  },
  {
    "text": "Another option is to use the new convenience constructor ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=640"
  },
  {
    "text": "to initialize a TextKit 1 text view and pass false as the parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=643"
  },
  {
    "text": "This will make your text view use TextKit 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=649"
  },
  {
    "text": "And a third option is to use Interface Builder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=654"
  },
  {
    "text": "and set the new Text Layout option to TextKit 1 on your text view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=657"
  },
  {
    "text": "Here's something to watch out for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=663"
  },
  {
    "text": "If you're swapping out your text container's layout manager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=665"
  },
  {
    "text": "during or after initialization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=668"
  },
  {
    "text": "then your text view will fall back to TextKit 1 as designed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=671"
  },
  {
    "text": "It's inefficient to create all the TextKit 2 objects during initialization ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=676"
  },
  {
    "text": "only to throw them away moments later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=681"
  },
  {
    "text": "There's also potential user side effects, depending on the timing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=684"
  },
  {
    "text": "If it happens during typing, the text view could lose its focus ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=688"
  },
  {
    "text": "and interrupt input, requiring the text view to be selected again to resume. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=692"
  },
  {
    "text": "Avoid this by opting the text view out at initialization time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=698"
  },
  {
    "text": "Now that you know all about compatibility mode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=704"
  },
  {
    "text": "it's time to talk about how to avoid it altogether by modernizing your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=707"
  },
  {
    "text": "and adopting TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=712"
  },
  {
    "text": "And there's one really important thing I want you to remember.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=714"
  },
  {
    "text": "There can be only one layout manager per text view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=719"
  },
  {
    "text": "A text view can't have both an NSTextLayoutManager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=723"
  },
  {
    "text": "and an NSLayoutManager at the same time.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=726"
  },
  {
    "text": "Once a text view switches to TextKit 1, there's no automatic way of going back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=731"
  },
  {
    "text": "The process of switching layout systems is expensive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=737"
  },
  {
    "text": "and you will lose any UI state that was present at the time of the switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=740"
  },
  {
    "text": "So for optimum performance and usability, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=745"
  },
  {
    "text": "the system will never switch a text view back to TextKit 2 from TextKit 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=748"
  },
  {
    "text": "It's a one-way operation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=753"
  },
  {
    "text": "This means it's really important to avoid compatibility mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=756"
  },
  {
    "text": "And there's a few different reasons a text view will enter compatibility mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=762"
  },
  {
    "text": "The number one reason for a text view to enter compatibility mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=766"
  },
  {
    "text": "is accessing the text view's layoutManager property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=770"
  },
  {
    "text": "The other reasons are much less common.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=775"
  },
  {
    "text": "So an important strategy ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=779"
  },
  {
    "text": "is to avoid accessing the text view's layout manager property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=781"
  },
  {
    "text": "Also avoid accessing the layout manager through the text view's text container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=785"
  },
  {
    "text": "Audit your code for uses of these properties, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=791"
  },
  {
    "text": "and remove them or replace them with TextKit 2 equivalents.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=794"
  },
  {
    "text": "If you're deploying your app to older OS versions that don't have TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=800"
  },
  {
    "text": "you might not be able to entirely remove your layoutManager code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=804"
  },
  {
    "text": "In that case, you should first check for the text view's NSTextLayoutManager.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=809"
  },
  {
    "text": "Put your TextKit 2 code in the if clause ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=816"
  },
  {
    "text": "and put the TextKit 1 code in the else clause, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=819"
  },
  {
    "text": "including the layoutManager access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=822"
  },
  {
    "text": "This way, the TextKit 1 code only runs when TextKit 2 is not available, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=825"
  },
  {
    "text": "and your layoutManager query won't cause an unintended fallback to TextKit 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=830"
  },
  {
    "text": "If you've followed all this advice and you still encounter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=837"
  },
  {
    "text": "an unexpected fallback to TextKit 1 coming from the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=840"
  },
  {
    "text": "that's our problem, so please report the issue with Feedback Assistant. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=844"
  },
  {
    "text": "Include a capture of the stack trace at the time of fallback, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=849"
  },
  {
    "text": "which you can get from breaking on ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=852"
  },
  {
    "text": "underscore UITextViewEnablingCompatibilityMode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=853"
  },
  {
    "text": "in UIKit, or willSwitchToNSLayoutManagerNotification ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=857"
  },
  {
    "text": "in AppKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=862"
  },
  {
    "text": "Okay, now I'll get into the specifics of updating code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=865"
  },
  {
    "text": "related to TextKit 1 types, starting with NSLayoutManager. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=869"
  },
  {
    "text": "Once you've audited your code for NSLayoutManager queries, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=874"
  },
  {
    "text": "you'll need to figure out the TextKit 2 equivalents with NSTextLayoutManager.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=877"
  },
  {
    "text": "Some layout manager APIs have similar names between TextKit 1 and 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=884"
  },
  {
    "text": "and the substitutions are straightforward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=889"
  },
  {
    "text": "Here's a few examples. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=891"
  },
  {
    "text": "In TextKit 1, you call usedRect(for: textContainer) on NSLayoutManager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=893"
  },
  {
    "text": "to get the bounding rectangle for the text inside a text container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=899"
  },
  {
    "text": "In TextKit 2, you get this from the usageBoundsForTextContainer property ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=904"
  },
  {
    "text": "on NSTextLayoutManager.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=909"
  },
  {
    "text": "In TextKit 1, we used the name \"temporary attributes\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=912"
  },
  {
    "text": "for attributes that affected only the rendering, and not the layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=916"
  },
  {
    "text": "In TextKit 2, we more accurately call those \"rendering attributes.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=921"
  },
  {
    "text": "But there are some TextKit 1 APIs that ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=927"
  },
  {
    "text": "have no direct equivalents in TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=930"
  },
  {
    "text": "To understand why, you need to understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=933"
  },
  {
    "text": "there is no correct character to glyph mapping ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=936"
  },
  {
    "text": "for many words in Indic scripts like Kannada.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=939"
  },
  {
    "text": "In these scripts, glyphs can be split up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=943"
  },
  {
    "text": "reordered, recombined, or even deleted.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=946"
  },
  {
    "text": "The glyph-based APIs on NSLayoutManager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=950"
  },
  {
    "text": "assume you can directly associate a contiguous range of characters ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=953"
  },
  {
    "text": "with a contiguous range of glyphs, and that's just not true for all scripts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=958"
  },
  {
    "text": "Using these APIs can result in broken layout and rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=963"
  },
  {
    "text": "for text written in scripts like Kannada. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=967"
  },
  {
    "text": "That's why there are zero glyph APIs in TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=969"
  },
  {
    "text": "You can't just substitute a single TextKit 2 API for a TextKit 1 glyph API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=974"
  },
  {
    "text": "Replacing these APIs requires a different approach.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=979"
  },
  {
    "text": "So here's how to update glyph-based code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=984"
  },
  {
    "text": "The first step is to identify which glyph APIs you're using. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=988"
  },
  {
    "text": "Next, look at how you're using those APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=993"
  },
  {
    "text": "and define what you are trying to do at a high level. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=996"
  },
  {
    "text": "Glyph-based code is very low level, and there are many details ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1000"
  },
  {
    "text": "that aren't relevant to your high-level task.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1004"
  },
  {
    "text": "Once you've defined the high-level task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1008"
  },
  {
    "text": "then examine the structures available to you in TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1010"
  },
  {
    "text": "such as layout fragments, line fragments, and text selections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1014"
  },
  {
    "text": "These can help you accomplish your task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1018"
  },
  {
    "text": "For example, consider this TextKit 1 code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1022"
  },
  {
    "text": "There's two glyph APIs used here: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1026"
  },
  {
    "text": "numberOfGlyphs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1029"
  },
  {
    "text": "and lineFragmentRect(forGlyphAt: index) . ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1030"
  },
  {
    "text": "This TextKit 1 code is iterating over all of the glyphs in the document ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1035"
  },
  {
    "text": "and counting the line fragment rects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1040"
  },
  {
    "text": "The high-level task is counting the number of lines of wrapped text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1042"
  },
  {
    "text": "in the text view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1047"
  },
  {
    "text": "Since this code is working with line fragment rects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1049"
  },
  {
    "text": "the TextKit 2 structures to use are NSTextLineFragment ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1052"
  },
  {
    "text": "and NSTextLayoutFragment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1057"
  },
  {
    "text": "And here's the code rewritten to use TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1060"
  },
  {
    "text": "Instead of iterating over glyphs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1063"
  },
  {
    "text": "it's enumerating the text layout fragments in the document ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1066"
  },
  {
    "text": "and supplying a closure that counts all of the text line fragments ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1069"
  },
  {
    "text": "within each layout fragment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1073"
  },
  {
    "text": "Keep that example in mind when updating your own code for TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1077"
  },
  {
    "text": "Now I'm going to shift gears and discuss updating code that's based on NSRange.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1081"
  },
  {
    "text": "TextKit 1 uses NSRange to index into text content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1089"
  },
  {
    "text": "and NSRange is a linear index into a string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1094"
  },
  {
    "text": "For the text \"Hello TextKit 2!\" exclamation point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1099"
  },
  {
    "text": "the NSRange that represents the \"TextKit 2 exclamation point\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1102"
  },
  {
    "text": "is location 6 and length 10, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1107"
  },
  {
    "text": "since it begins at the 6th character and it's 10 characters long. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1111"
  },
  {
    "text": "This linear model is easy to understand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1116"
  },
  {
    "text": "and it works great for indexing into strings.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1118"
  },
  {
    "text": "But the linear model doesn't work for indexing into any content ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1123"
  },
  {
    "text": "that has more structure than a string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1127"
  },
  {
    "text": "Here's an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1130"
  },
  {
    "text": "HTML documents are represented as a tree structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1132"
  },
  {
    "text": "where each tag is a node in the tree. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1136"
  },
  {
    "text": "If our Hello TextKit 2! text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1138"
  },
  {
    "text": "is part of an HTML document, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1141"
  },
  {
    "text": "there's no way for our NSRange to tell us that the text is inside the span tag, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1143"
  },
  {
    "text": "nested 3 levels deep. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1148"
  },
  {
    "text": "The linear model isn't expressive enough to store that information, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1150"
  },
  {
    "text": "so we can't use it to index into a nested structure like this one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1154"
  },
  {
    "text": "This is why TextKit 2 added new types for representing ranges in the text content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1159"
  },
  {
    "text": "NSTextLocation is an object that represents a single location ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1166"
  },
  {
    "text": "inside the text content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1171"
  },
  {
    "text": "NSTextRange consists of a start and end location. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1173"
  },
  {
    "text": "The end location is excluded from the range. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1178"
  },
  {
    "text": "These new types can represent the nested structure of this HTML document ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1182"
  },
  {
    "text": "by defining a location as the DOM node plus a character offset.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1186"
  },
  {
    "text": "Since NSTextLocation is a protocol, any custom object can be a location ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1193"
  },
  {
    "text": "as long as it implements the NSTextLocation protocol methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1198"
  },
  {
    "text": "This is crucial infrastructure for working with different types of backing stores ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1203"
  },
  {
    "text": "that support structured data in their models.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1207"
  },
  {
    "text": "But text views are built on NSAttributedString backing stores ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1211"
  },
  {
    "text": "that don't have this structure, and we can't change that ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1216"
  },
  {
    "text": "without breaking lots of apps, including yours. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1219"
  },
  {
    "text": "So you'll continue to use NSRange when using text view APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1223"
  },
  {
    "text": "like selectedRange or scrollRangeToVisible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1227"
  },
  {
    "text": "And you'll need to convert between NSRange and NSTextRange ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1230"
  },
  {
    "text": "when communicating with the TextKit 2 layout manager or content manager.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1235"
  },
  {
    "text": "To convert a text view's NSRange to an NSTextRange, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1240"
  },
  {
    "text": "define the location as the integer index into the attributed string.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1244"
  },
  {
    "text": "Use the NSRange location as the start location for NSTextRange.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1250"
  },
  {
    "text": "Use the NSRange location plus the length as the end location of the NSTextRange. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1256"
  },
  {
    "text": "Conceptually, that's how to map from NSRange to NSTextRange.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1262"
  },
  {
    "text": "In practice, the code looks a little different ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1269"
  },
  {
    "text": "because NSTextLocations must be objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1271"
  },
  {
    "text": "You need to go through the content manager to compute the locations.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1277"
  },
  {
    "text": "For the start location, ask the content manager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1281"
  },
  {
    "text": "for the location of the beginning of the document, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1284"
  },
  {
    "text": "then offset it by the NSRange's location. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1287"
  },
  {
    "text": "Then offset the start location by the NSRange's length to get the end location.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1291"
  },
  {
    "text": "To go in the other direction, use the text content manager ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1298"
  },
  {
    "text": "to get two different offsets.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1302"
  },
  {
    "text": "The NSRange's location is the offset between the beginning of the document ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1305"
  },
  {
    "text": "and the NSTextRange's location. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1309"
  },
  {
    "text": "And the NSRange's length is the offset between the start and end locations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1313"
  },
  {
    "text": "of the NSTextRange.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1317"
  },
  {
    "text": "UITextViews and UITextFields conform to the UITextInput protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1321"
  },
  {
    "text": "which uses UITextPosition and range. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1326"
  },
  {
    "text": "Most of the time, you won't need to convert ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1329"
  },
  {
    "text": "a UITextRange directly to an NSTextRange ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1332"
  },
  {
    "text": "when using UITextView or UITextField. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1336"
  },
  {
    "text": "But if you do, use the integer offsets ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1339"
  },
  {
    "text": "as the intermediary between the two range types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1342"
  },
  {
    "text": "On the other hand, if you're using a custom view with UITextInput, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1346"
  },
  {
    "text": "you have direct control over the UITextPosition ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1350"
  },
  {
    "text": "and UITextRange subclasses used with your view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1354"
  },
  {
    "text": "You can make your UITextPosition subclass ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1358"
  },
  {
    "text": "conform to NSTextLocation, implement the required method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1361"
  },
  {
    "text": "and use your subclass to create NSTextRanges directly.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1365"
  },
  {
    "text": "Finally, here's a reminder to avoid reusing UITextPosition objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1371"
  },
  {
    "text": "across different views, even if the content in both views is similar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1376"
  },
  {
    "text": "A UITextPosition is only valid for the view used to create it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1382"
  },
  {
    "text": "All right, now you've got lots of strategies at your disposal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1389"
  },
  {
    "text": "for modernizing your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1392"
  },
  {
    "text": "Apply these strategies, and your app will be ready ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1394"
  },
  {
    "text": "to reap the benefits of TextKit 2.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1397"
  },
  {
    "text": "And that's what's new in TextKit and text views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1401"
  },
  {
    "text": "I covered a lot of great improvements in TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1404"
  },
  {
    "text": "and shared some strategies for updating your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1407"
  },
  {
    "text": "while maintaining compatibility for older OS versions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1410"
  },
  {
    "text": "Use TextKit 2 in your apps today to take full advantage of the new improvements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1413"
  },
  {
    "text": "Check your text views to make sure ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1419"
  },
  {
    "text": "they aren't unintentionally falling back to TextKit 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1420"
  },
  {
    "text": "And finally, employ the modernization strategies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1424"
  },
  {
    "text": "to get your app on TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1427"
  },
  {
    "text": "We can't wait to read what you'll create with TextKit 2 and text views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1430"
  },
  {
    "text": "Thanks for watching!",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10090/?time=1435"
  }
]