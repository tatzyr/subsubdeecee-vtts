[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=0"
  },
  {
    "text": "Paul: Hello, and welcome to Compose Custom Layouts with SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=9"
  },
  {
    "text": "I'm Paul, and I work on developer documentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=13"
  },
  {
    "text": "SwiftUI provides a rich set of building blocks ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=16"
  },
  {
    "text": "that you use to compose your app's interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=18"
  },
  {
    "text": "You can combine built-in views that display elements like text, images, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=22"
  },
  {
    "text": "and graphics to create custom, composite views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=27"
  },
  {
    "text": "To arrange all these elements in ever more sophisticated groupings ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=31"
  },
  {
    "text": "SwiftUI provides layout tools.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=35"
  },
  {
    "text": "Containers like horizontal and vertical stacks let you tell SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=39"
  },
  {
    "text": "where to put views relative to one another, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=42"
  },
  {
    "text": "while view modifiers give you additional control ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=45"
  },
  {
    "text": "over things like spacing and alignment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=47"
  },
  {
    "text": "In this talk, I'm going to introduce some new tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=51"
  },
  {
    "text": "that will make some common layouts even easier to build, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=53"
  },
  {
    "text": "and will make more complicated layouts possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=56"
  },
  {
    "text": "Along the way, I'll give you some tips for working with layout in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=59"
  },
  {
    "text": "I'll start by showing you a new member of the grid family ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=64"
  },
  {
    "text": "that's perfect for two-dimensional layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=67"
  },
  {
    "text": "when you have a static set of views to display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=69"
  },
  {
    "text": "Next I'll talk about how you can create a custom view container type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=72"
  },
  {
    "text": "that lets you interact directly with the layout engine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=76"
  },
  {
    "text": "using the new layout protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=79"
  },
  {
    "text": "Then I'll talk about ViewThatFits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=81"
  },
  {
    "text": "a container type that automatically selects from a collection of views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=84"
  },
  {
    "text": "for the one that, well, fits in the available space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=87"
  },
  {
    "text": "And finally, I'll show you how to add seamless transitions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=91"
  },
  {
    "text": "between layout types using AnyLayout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=94"
  },
  {
    "text": "To see all these new features in action, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=98"
  },
  {
    "text": "let's take a look at an app I've been working on.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=100"
  },
  {
    "text": "In recent years, there's been some debate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=104"
  },
  {
    "text": "among some of my colleagues about who makes the best furry companion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=105"
  },
  {
    "text": "I have my own opinion, but I was curious to see if we could come to some consensus, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=110"
  },
  {
    "text": "so I decided to make an app to take a poll. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=114"
  },
  {
    "text": "And I want to include folks with fur allergies, too, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=118"
  },
  {
    "text": "so I'm throwing in one extra option. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=120"
  },
  {
    "text": "Now, I like to do most of my interface design in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=123"
  },
  {
    "text": "because it's so easy to prototype using previews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=127"
  },
  {
    "text": "but as a starting point, I drew a quick sketch of what I'm aiming for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=130"
  },
  {
    "text": "I expect the voting to go on over a period of time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=134"
  },
  {
    "text": "so I want a leaderboard in the middle showing the current standings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=136"
  },
  {
    "text": "I'll put buttons for voting at the bottom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=140"
  },
  {
    "text": "And at the top, I'll display some images of what folks are voting for.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=142"
  },
  {
    "text": "Okay, the first thing I want to do is to build the leaderboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=148"
  },
  {
    "text": "So let's take a closer look at that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=150"
  },
  {
    "text": "The leaderboard is a two-dimensional grid of elements with rows for each contender, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=153"
  },
  {
    "text": "and columns that show names, percentages, and a vote count. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=158"
  },
  {
    "text": "I have a couple of specific things I want to achieve here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=163"
  },
  {
    "text": "First, I want the two text columns to be only as wide as they need to be ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=167"
  },
  {
    "text": "to accommodate the widest cell in each case ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=171"
  },
  {
    "text": "because I want the progress views that represent percentages ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=174"
  },
  {
    "text": "to get as much space as they can. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=176"
  },
  {
    "text": "And this needs to be true no matter how big the counts get ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=178"
  },
  {
    "text": "for my friends that speak other languages ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=182"
  },
  {
    "text": "or for anyone who uses different text sizes on their devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=185"
  },
  {
    "text": "Second, I want the names to be leading edge aligned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=189"
  },
  {
    "text": "but the amounts to be trailing edge aligned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=191"
  },
  {
    "text": "Now, SwiftUI already has lazy grids, which are great for scrollable content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=194"
  },
  {
    "text": "These containers are very efficient when you have a lot of views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=200"
  },
  {
    "text": "because they only load views that are visible, or about to be visible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=203"
  },
  {
    "text": "On the other hand, that means the container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=207"
  },
  {
    "text": "can't automatically size its cells in both dimensions.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=209"
  },
  {
    "text": "For example, the LazyHGrid can figure out how wide to make each column, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=214"
  },
  {
    "text": "because it can measure all the views in a column before drawing them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=218"
  },
  {
    "text": "But it can't measure every view in a row to figure out the row's height. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=222"
  },
  {
    "text": "To make this work, the lazy grids need you ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=226"
  },
  {
    "text": "to provide information about one of their dimensions at initialization time.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=228"
  },
  {
    "text": "For a closer look at lazy grids and other existing SwiftUI layout container types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=233"
  },
  {
    "text": "see the Stacks, grids, and outlines talk from 2020. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=238"
  },
  {
    "text": "But in my case, I don't need scrolling, and I'd like to let SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=242"
  },
  {
    "text": "figure out both the height and the width for each cell. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=246"
  },
  {
    "text": "For this kind of layout, SwiftUI now offers a Grid view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=249"
  },
  {
    "text": "Unlike the lazy grid, the grid loads all of its views at once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=254"
  },
  {
    "text": "so it can automatically size and align its cells ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=257"
  },
  {
    "text": "across both its columns and rows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=261"
  },
  {
    "text": "Let's take a look at the code for this.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=265"
  },
  {
    "text": "Here's a basic version of my leaderboard written as a Grid. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=268"
  },
  {
    "text": "This particular grid view contains three GridRow instances. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=271"
  },
  {
    "text": "Within a row, each view corresponds to a column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=275"
  },
  {
    "text": "So in this example, the first text view in each row ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=278"
  },
  {
    "text": "corresponds to the first column, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=281"
  },
  {
    "text": "the progress view is in the second column, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=283"
  },
  {
    "text": "and the last text view is the third column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=285"
  },
  {
    "text": "Notice that the grid allocates as much space to each row and column ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=289"
  },
  {
    "text": "as it needs to hold its largest view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=293"
  },
  {
    "text": "So the first text column is wide enough for the longest name, but no wider. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=295"
  },
  {
    "text": "Flexible views like the progress indicator take as much space as the grid offers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=300"
  },
  {
    "text": "which in this case is whatever is left over ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=304"
  },
  {
    "text": "after allocating space for the text columns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=306"
  },
  {
    "text": "I want to adjust this a bit, but first, let me create a basic data model ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=309"
  },
  {
    "text": "to give me somewhere to store vote counts.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=313"
  },
  {
    "text": "I'll need more logic to manage and share the data across the network, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=316"
  },
  {
    "text": "but while I'm prototyping the interface, I just need a simple structure like this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=320"
  },
  {
    "text": "I'll include Identifiable conformance, because that'll make it easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=324"
  },
  {
    "text": "to use this type in a ForEach, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=328"
  },
  {
    "text": "and Equatable conformance to make it possible to animate changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=330"
  },
  {
    "text": "And I'll create a set of example data to use in my previews while I prototype. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=335"
  },
  {
    "text": "Going back to my grid, I can create a state variable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=341"
  },
  {
    "text": "and initialize it with my example data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=344"
  },
  {
    "text": "And using that data, I can now create rows with a ForEach. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=346"
  },
  {
    "text": "Notice that the rendered output hasn't changed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=351"
  },
  {
    "text": "because it's still displaying the same data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=353"
  },
  {
    "text": "That's already pretty close, but I need to fix the cell alignment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=356"
  },
  {
    "text": "Right now, all the cells are center aligned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=360"
  },
  {
    "text": "which is the default for a grid, but if you remember, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=362"
  },
  {
    "text": "I want the names to be leading edge aligned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=365"
  },
  {
    "text": "and the values to be trailing edge aligned.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=367"
  },
  {
    "text": "To do that, I'll initialize the grid with leading edge alignment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=370"
  },
  {
    "text": "The value I use here applies to all the cells in the grid. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=374"
  },
  {
    "text": "That works fine for my first two columns, but what about the last? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=378"
  },
  {
    "text": "To affect the alignment of a single column, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=383"
  },
  {
    "text": "I can apply the gridColumnAlignment view modifier to any one cell in that column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=385"
  },
  {
    "text": "So I'll do that with the text view in the last column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=391"
  },
  {
    "text": "Okay, it's getting there, but now that I'm looking at it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=394"
  },
  {
    "text": "I feel like it would be better with a divider between each row. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=397"
  },
  {
    "text": "If I just add a new row to the ForEach with a divider, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=401"
  },
  {
    "text": "this isn't exactly what I want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=405"
  },
  {
    "text": "but notice that this shows a couple of interesting things. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=407"
  },
  {
    "text": "First, because the divider is a flexible view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=410"
  },
  {
    "text": "it's causing the first column to take more space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=413"
  },
  {
    "text": "Basically, the grid is now giving the last column what it needs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=416"
  },
  {
    "text": "and dividing the remaining space between the first two columns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=419"
  },
  {
    "text": "Second, for a grid row that doesn't have as many views as other grid rows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=423"
  },
  {
    "text": "the missing views just create empty cells in the later columns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=428"
  },
  {
    "text": "But what I really want is to have the divider span all the columns of the grid, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=431"
  },
  {
    "text": "and SwiftUI has a new view modifier that lets me do that.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=436"
  },
  {
    "text": "By adding the gridCellColumns modifier to a view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=443"
  },
  {
    "text": "I can tell a single view to span some number of columns; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=447"
  },
  {
    "text": "in this case, all three. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=450"
  },
  {
    "text": "And actually, for the case where the view should span the entire grid, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=452"
  },
  {
    "text": "I can simplify this by just writing the view by itself, outside of a grid row. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=455"
  },
  {
    "text": "Okay, my leaderboard is in pretty good shape ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=461"
  },
  {
    "text": "so let me take a look at the buttons used for voting next.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=464"
  },
  {
    "text": "At first glance, there's nothing too fancy here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=468"
  },
  {
    "text": "However, I do have one special requirement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=471"
  },
  {
    "text": "On the one hand, I don't want to bias my participants ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=474"
  },
  {
    "text": "with smaller buttons for certain choices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=477"
  },
  {
    "text": "But I also don't want the buttons to grow as large as their container, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=480"
  },
  {
    "text": "which could be very large on iPad or Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=483"
  },
  {
    "text": "Instead, the buttons should all have widths equal to the widest button text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=486"
  },
  {
    "text": "So what happens if I try to build this with an Hstack? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=491"
  },
  {
    "text": "What I find is that each button sizes itself to fit its text label, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=495"
  },
  {
    "text": "and the HStack packs these together horizontally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=499"
  },
  {
    "text": "This default stack behavior is exactly what you want in a lot of cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=503"
  },
  {
    "text": "but it doesn't quite meet my spec for this project.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=507"
  },
  {
    "text": "For a refresher on layout fundamentals in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=511"
  },
  {
    "text": "see the Building custom views with SwiftUI talk from 2019. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=514"
  },
  {
    "text": "Using concepts from that talk, let's take a look at this view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=519"
  },
  {
    "text": "to see what I can change to get the behavior I want.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=522"
  },
  {
    "text": "First, the stack's container proposes a size to the stack. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=527"
  },
  {
    "text": "Based on this, the stack proposes a size to its three buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=532"
  },
  {
    "text": "and then each button passes that size through to its text label. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=536"
  },
  {
    "text": "The text views calculate the size they actually want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=540"
  },
  {
    "text": "which depends on the string they contain ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=543"
  },
  {
    "text": "and report this to the button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=545"
  },
  {
    "text": "The button passes the information back through. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=548"
  },
  {
    "text": "The stack sizes itself with this information, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=550"
  },
  {
    "text": "places the buttons in its space, and then reports its own size to its container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=553"
  },
  {
    "text": "Okay, so if the buttons take the size of their text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=558"
  },
  {
    "text": "what if I wrap each text view in a flexible frame and allow it to grow? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=561"
  },
  {
    "text": "The text hasn't changed, but the button sees a flexible subview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=566"
  },
  {
    "text": "which takes as much space as the HStack offers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=569"
  },
  {
    "text": "The stack then distributes its space equally among the views that it contains. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=573"
  },
  {
    "text": "So the buttons are all the same size now, which is great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=578"
  },
  {
    "text": "but their actual size depends on the stack's container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=580"
  },
  {
    "text": "The stack will expand to fill whatever space the container offers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=584"
  },
  {
    "text": "and that's not what I want. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=587"
  },
  {
    "text": "What I really want is a custom stack type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=589"
  },
  {
    "text": "that asks for the ideal size of each button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=592"
  },
  {
    "text": "finds the widest, and then offers that amount of space to each one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=595"
  },
  {
    "text": "Fortunately, SwiftUI has a new tool that lets me do just that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=599"
  },
  {
    "text": "Using the Layout protocol, I can define a custom layout container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=604"
  },
  {
    "text": "that participates directly in the layout process ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=607"
  },
  {
    "text": "with behavior that's tailored to my use case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=610"
  },
  {
    "text": "Let's see how this works.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=614"
  },
  {
    "text": "Looking at the HStack again, let me change it to an EqualWidthHStack ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=616"
  },
  {
    "text": "a type that I'm going to define to solve my specific problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=621"
  },
  {
    "text": "This type is going to allocate width to the buttons equally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=626"
  },
  {
    "text": "in an amount that's as wide as the widest button's ideal width. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=629"
  },
  {
    "text": "I'll keep the flexible frames so that buttons with narrower text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=633"
  },
  {
    "text": "can expand to fill the space that the stack offers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=637"
  },
  {
    "text": "But the buttons will still have an ideal size that I can measure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=640"
  },
  {
    "text": "which is the width of their text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=643"
  },
  {
    "text": "So let's see how I can implement MyEqualWidthHStack.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=645"
  },
  {
    "text": "I start by creating a type that conforms to the Layout protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=652"
  },
  {
    "text": "For a basic layout, all I need are the two required methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=656"
  },
  {
    "text": "Let's add stubs for those. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=659"
  },
  {
    "text": "The first method is sizeThatFits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=662"
  },
  {
    "text": "where I'll calculate and report how large my layout container is.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=664"
  },
  {
    "text": "I get a proposed view size input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=670"
  },
  {
    "text": "which is a size proposal from my layout's own container view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=672"
  },
  {
    "text": "And I can propose sizes to my layout's subviews using the Subviews parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=676"
  },
  {
    "text": "Notice that I can't access the subviews directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=682"
  },
  {
    "text": "Instead, the subviews input is a collection of proxies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=685"
  },
  {
    "text": "that let me interact in specific ways with the subviews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=688"
  },
  {
    "text": "like proposing a size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=692"
  },
  {
    "text": "Each proxy returns a concrete size based on the proposal that I’ve made. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=694"
  },
  {
    "text": "I'll collect all those responses and use them to do some calculations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=699"
  },
  {
    "text": "and then return a concrete size for the EqualWidthHStack to its container.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=703"
  },
  {
    "text": "The second method that I have to implement is placeSubviews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=709"
  },
  {
    "text": "I'll use this to tell my layout's subviews where to appear. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=712"
  },
  {
    "text": "This method takes the same size proposal and subviews inputs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=716"
  },
  {
    "text": "and it also takes a bounds input that represents the region ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=721"
  },
  {
    "text": "that I need to place my subviews into. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=724"
  },
  {
    "text": "Bounds is a rectangle that has the size that I asked for ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=727"
  },
  {
    "text": "in my sizeThatFits implementation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=730"
  },
  {
    "text": "Remember, views pick their own size in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=732"
  },
  {
    "text": "so my layout container will get the size that it asks for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=735"
  },
  {
    "text": "The origin of the region is at the top left, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=739"
  },
  {
    "text": "with positive X to the right, and positive Y down. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=742"
  },
  {
    "text": "You can assume this for all your placement calculations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=745"
  },
  {
    "text": "even in right to left language environments, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=748"
  },
  {
    "text": "because the framework automatically flips the x position of each view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=750"
  },
  {
    "text": "when laying out views in that direction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=754"
  },
  {
    "text": "However, don't assume that the rectangle's origin has the value (0,0). ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=757"
  },
  {
    "text": "Among other things, allowing for a non-zero origin ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=762"
  },
  {
    "text": "enables layout composition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=765"
  },
  {
    "text": "where the placeSubviews method of one layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=767"
  },
  {
    "text": "calls into the same method of another. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=769"
  },
  {
    "text": "To make it a little easier to work with, the rectangle provides properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=772"
  },
  {
    "text": "for accessing important parts of the region, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=775"
  },
  {
    "text": "like the minimum, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=777"
  },
  {
    "text": "center, and maximum points in each dimension.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=780"
  },
  {
    "text": "Now, before I move on, notice one other parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=785"
  },
  {
    "text": "that these methods both have: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=787"
  },
  {
    "text": "a bidirectional cache that I could use ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=789"
  },
  {
    "text": "to share the results of intermediate calculations across method calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=791"
  },
  {
    "text": "For many simple layouts, you won't need this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=796"
  },
  {
    "text": "and I'm just going to ignore the cache for now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=798"
  },
  {
    "text": "However, if profiling your app with Instruments shows that you need to improve ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=802"
  },
  {
    "text": "the efficiency of your layout code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=805"
  },
  {
    "text": "you can look into adding one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=807"
  },
  {
    "text": "Check out the documentation for more information about that.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=809"
  },
  {
    "text": "Okay, let's implement sizeThatFits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=814"
  },
  {
    "text": "Remember, I want to return a size for my container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=817"
  },
  {
    "text": "that fits all of the buttons arranged horizontally, all at the same width. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=819"
  },
  {
    "text": "So first, I'll ask each button for its size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=824"
  },
  {
    "text": "which I do by proposing a size and seeing what comes back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=827"
  },
  {
    "text": "To measure the flexibility of a subview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=831"
  },
  {
    "text": "I can make multiple measurements using special proposals for minimum, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=833"
  },
  {
    "text": "maximum, and ideal sizes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=837"
  },
  {
    "text": "or I can propose a specific size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=839"
  },
  {
    "text": "In this case, I use the unspecified size proposal to ask for the ideal size.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=841"
  },
  {
    "text": "Then I'll find the largest value in each dimension ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=848"
  },
  {
    "text": "for all the sizes that I get back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=851"
  },
  {
    "text": "In this case, the goldfish button sets the width, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=853"
  },
  {
    "text": "and the heights are all the same. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=855"
  },
  {
    "text": "Now let me refactor that into a method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=858"
  },
  {
    "text": "because I'll need it again when I place my subviews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=860"
  },
  {
    "text": "Next, I need to account for the spacing between views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=863"
  },
  {
    "text": "I could just use a constant spacing, like 10 points, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=867"
  },
  {
    "text": "but the layout protocol lets me do better. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=870"
  },
  {
    "text": "In SwiftUI, all views have spacing preferences that indicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=873"
  },
  {
    "text": "the amount of space the view prefers to have between itself and the next view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=877"
  },
  {
    "text": "These preferences are stored in a ViewSpacing instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=882"
  },
  {
    "text": "that's available to layout containers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=885"
  },
  {
    "text": "The view might prefer different values on different edges, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=888"
  },
  {
    "text": "and even different values for different kinds of adjacent views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=891"
  },
  {
    "text": "For example, a view might want more or less space ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=894"
  },
  {
    "text": "between itself and a text view than it wants between itself and an image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=897"
  },
  {
    "text": "And the values can vary by platform as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=902"
  },
  {
    "text": "You can ignore these preferences if it makes sense for your layout, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=906"
  },
  {
    "text": "which is essentially what's happening when you initialize a built-in stack ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=909"
  },
  {
    "text": "with a custom spacing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=913"
  },
  {
    "text": "but respecting these preferences in your own layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=915"
  },
  {
    "text": "is a good way to get results that automatically follow ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=917"
  },
  {
    "text": "Apple's interface guidelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=920"
  },
  {
    "text": "and as a result, match the look of the rest of the system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=922"
  },
  {
    "text": "Now, every view has preferences on all edges, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=926"
  },
  {
    "text": "and when I bring two views together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=929"
  },
  {
    "text": "the preferences on a common edge might not match. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=931"
  },
  {
    "text": "To resolve this, a built-in layout container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=935"
  },
  {
    "text": "uses the larger of the two preferences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=937"
  },
  {
    "text": "And I can do the same thing in my own layout.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=939"
  },
  {
    "text": "The subview proxies give me a way to ask for each button's preferred spacing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=943"
  },
  {
    "text": "to some other button along a given axis. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=947"
  },
  {
    "text": "So let me create an array of values by scanning through the subviews ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=950"
  },
  {
    "text": "and calling the distance method on each proxy's spacing instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=954"
  },
  {
    "text": "to get the spacing to the next view's spacing instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=959"
  },
  {
    "text": "along the horizontal axis. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=962"
  },
  {
    "text": "This call takes into account the preferences ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=965"
  },
  {
    "text": "of both views on their common edge. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=967"
  },
  {
    "text": "The first element in this array tells me how much space ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=971"
  },
  {
    "text": "the cat button wants horizontally to the goldfish button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=973"
  },
  {
    "text": "and the next tells me how much the goldfish button wants to the dog button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=977"
  },
  {
    "text": "I'll force the last element in the array to be zero ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=982"
  },
  {
    "text": "because there aren't any more buttons to compare against. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=984"
  },
  {
    "text": "Okay, let me refactor that into a method for later too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=988"
  },
  {
    "text": "Now I can combine the spacing values to find the total spacing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=992"
  },
  {
    "text": "and use that that with the width and height measurements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=996"
  },
  {
    "text": "to return a size value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=999"
  },
  {
    "text": "This is the size that my layout needs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1001"
  },
  {
    "text": "given the ideal sizes of its subviews ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1003"
  },
  {
    "text": "and each subview's preferred spacing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1005"
  },
  {
    "text": "The other method that I need to implement is placeSubviews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1009"
  },
  {
    "text": "As I mentioned before, I get both the bounds of the container, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1012"
  },
  {
    "text": "and the collection of subview proxies that I can use to direct the buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1016"
  },
  {
    "text": "First, I calculate maxSize and the spacing array ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1021"
  },
  {
    "text": "just like I did in sizeThatFits method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1024"
  },
  {
    "text": "because I'll need those values here too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1026"
  },
  {
    "text": "Then I'll create a size proposal that I can use for each of my subviews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1030"
  },
  {
    "text": "this time based on the size that I want them to have, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1034"
  },
  {
    "text": "rather than their ideal size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1036"
  },
  {
    "text": "I only need one proposal, because I want all the buttons to the be the same size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1038"
  },
  {
    "text": "And I'll find a starting position in the horizontal dimension ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1043"
  },
  {
    "text": "for my first subview, calculated as the leading edge of my bounds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1046"
  },
  {
    "text": "plus half the width of a button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1050"
  },
  {
    "text": "Notice I'm not relying on the origin to be zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1052"
  },
  {
    "text": "but instead starting with the minX value instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1054"
  },
  {
    "text": "Finally, I can go through each of the subview proxies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1059"
  },
  {
    "text": "and call its place method with a point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1062"
  },
  {
    "text": "a statement of what that point represents in terms of the button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1065"
  },
  {
    "text": "and the size proposal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1069"
  },
  {
    "text": "Each time through the loop, I update the horizontal position ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1072"
  },
  {
    "text": "by the width of a view, plus the spacing for the next view pair, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1075"
  },
  {
    "text": "to get ready for the next iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1078"
  },
  {
    "text": "And that's it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1081"
  },
  {
    "text": "Now let's see what happens when I use this new view layout type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1082"
  },
  {
    "text": "And there it is. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1087"
  },
  {
    "text": "I instantiate my own custom layout container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1088"
  },
  {
    "text": "just like I would a built-in HStack, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1091"
  },
  {
    "text": "and the buttons are arranged horizontally, all at the same width. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1093"
  },
  {
    "text": "Now, I want to pause here for a moment ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1098"
  },
  {
    "text": "and talk about how the Layout protocol solves a problem ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1100"
  },
  {
    "text": "that you might have tried to use geometry reader for in the past. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1103"
  },
  {
    "text": "Geometry reader is, after all, a tool for measuring view sizes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1107"
  },
  {
    "text": "However, it's not the best choice in this case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1111"
  },
  {
    "text": "And that's because a geometry reader is designed to measure its container view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1115"
  },
  {
    "text": "and report the that size to its subview. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1118"
  },
  {
    "text": "The subview then uses the information to draw its own content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1121"
  },
  {
    "text": "Notice that for the intended use of a geometry reader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1125"
  },
  {
    "text": "the information flows downward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1128"
  },
  {
    "text": "The measurement that the reader makes has no effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1130"
  },
  {
    "text": "on the layout of its own container.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1132"
  },
  {
    "text": "This is great for things like drawing a path that scales with its container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1135"
  },
  {
    "text": "The geometry reader tells the path logic how much space it has to work with, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1139"
  },
  {
    "text": "and the path logic inside the subview adjusts accordingly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1143"
  },
  {
    "text": "If the container changes size, so does the path, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1147"
  },
  {
    "text": "because the geometry reader passes along the new size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1151"
  },
  {
    "text": "However, for my buttons, and I'll just focus on one here ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1154"
  },
  {
    "text": "to make it easier to see, I need to measure the text view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1157"
  },
  {
    "text": "and then use that to decide how to set a frame that's the text view's container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1161"
  },
  {
    "text": "So I could add a geometry reader in an overlay to the text view– ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1167"
  },
  {
    "text": "remember, it measures its container– ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1170"
  },
  {
    "text": "and then somehow send the measurement data back up to the frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1173"
  },
  {
    "text": "outside of the normal flow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1176"
  },
  {
    "text": "But notice that if I do this, I'm bypassing the layout engine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1178"
  },
  {
    "text": "which might result in a loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1181"
  },
  {
    "text": "The reader measures the layout and changes the frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1183"
  },
  {
    "text": "which might change the layout, which could require another measurement, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1186"
  },
  {
    "text": "Now it is possible to make this work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1191"
  },
  {
    "text": "but if I'm not careful, I could end up crashing my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1194"
  },
  {
    "text": "As a result, this strategy isn't recommended. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1197"
  },
  {
    "text": "Fortunately, the layout protocol gives you a better way to solve this problem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1200"
  },
  {
    "text": "by letting you work within the layout engine.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1204"
  },
  {
    "text": "Okay, let's look at the buttons again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1208"
  },
  {
    "text": "There's something else I want to do here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1210"
  },
  {
    "text": "First, to make this a little easier to read, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1213"
  },
  {
    "text": "I'll refactor the buttons into their own subview. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1214"
  },
  {
    "text": "Now, I happen to know that one of my colleagues uses larger type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1218"
  },
  {
    "text": "on their device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1221"
  },
  {
    "text": "My app automatically supports Dynamic Type because I've used default fonts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1223"
  },
  {
    "text": "so I should mostly get the right behavior for free. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1227"
  },
  {
    "text": "Let's see what happens if I increase the type size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1230"
  },
  {
    "text": "Uh-oh, the buttons don't fit anymore. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1235"
  },
  {
    "text": "Remember that my custom stack doesn't constrain the button widths, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1237"
  },
  {
    "text": "but just lets them have their ideal size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1241"
  },
  {
    "text": "which in this case exceeds the width of the display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1243"
  },
  {
    "text": "So what can I do? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1247"
  },
  {
    "text": "Well, I could modify the layout to do something more complicated ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1248"
  },
  {
    "text": "when the views don't fit, taking into account the size proposal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1251"
  },
  {
    "text": "from the layout's container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1254"
  },
  {
    "text": "But for this case, I can use the new ViewThatFits container ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1256"
  },
  {
    "text": "to do most of the work for me. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1259"
  },
  {
    "text": "This new type picks the first view that fits in the available space ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1261"
  },
  {
    "text": "from a list of views that I give it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1265"
  },
  {
    "text": "By wrapping my custom stack in a ViewThatFits structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1269"
  },
  {
    "text": "and then adding a vertical stack version of the same content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1273"
  },
  {
    "text": "I can let SwiftUI figure out when the buttons need to be arranged differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1276"
  },
  {
    "text": "Of course, the built-in VStack doesn't have the equal width property ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1280"
  },
  {
    "text": "that my custom horizontal stack does, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1284"
  },
  {
    "text": "so I've gone ahead and implemented a vertical version of the custom stack too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1287"
  },
  {
    "text": "It's very similar to the one I already described, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1291"
  },
  {
    "text": "except that it places equal width items along the vertical axis ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1294"
  },
  {
    "text": "instead of the horizontal axis.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1297"
  },
  {
    "text": "And of course, when I remove the dynamic type size override, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1301"
  },
  {
    "text": "it goes back to the horizontal layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1304"
  },
  {
    "text": "Now, there's one last piece of the app I need to build, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1307"
  },
  {
    "text": "and that's the images at the top. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1310"
  },
  {
    "text": "I could do something simple, like just show a group of profile pictures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1312"
  },
  {
    "text": "but I thought I'd have a little fun with it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1316"
  },
  {
    "text": "So I made another custom layout type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1319"
  },
  {
    "text": "that draws views in a circular arrangement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1321"
  },
  {
    "text": "and then rotates the arrangement according to rankings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1324"
  },
  {
    "text": "So this configuration shows goldfish in first place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1328"
  },
  {
    "text": "and the other two tied for second. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1331"
  },
  {
    "text": "And then if dog pulls ahead of cat, I can rotate a bit to show that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1333"
  },
  {
    "text": "Or I can show a slightly more realistic result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1337"
  },
  {
    "text": "all by rotating a radial layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1339"
  },
  {
    "text": "Creating this layout is actually quite straightforward with the layout protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1343"
  },
  {
    "text": "Like before, I just need two methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1347"
  },
  {
    "text": "For size that fits, I want my view to fill the available space, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1350"
  },
  {
    "text": "so I'll return whatever size the container view proposes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1353"
  },
  {
    "text": "I'll convert the proposal into a concrete size ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1357"
  },
  {
    "text": "using the replacing-unspecified-dimensions method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1360"
  },
  {
    "text": "That method automatically handles nil values that could be present ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1364"
  },
  {
    "text": "if the container asks for an ideal size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1367"
  },
  {
    "text": "Then inside place subviews method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1370"
  },
  {
    "text": "I'll offset each subview from the middle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1373"
  },
  {
    "text": "by some radius that's based on the size of the layout region, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1375"
  },
  {
    "text": "and apply a rotation that depends on the index of the view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1379"
  },
  {
    "text": "As a baseline, this places the views at 0, 1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1383"
  },
  {
    "text": "and two-thirds of the way around a circle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1387"
  },
  {
    "text": "To reflect the current rankings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1392"
  },
  {
    "text": "I'll also apply an offset that affects all the views equally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1394"
  },
  {
    "text": "But where do I get the rankings? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1398"
  },
  {
    "text": "Remember, my layout can only access the subview proxies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1400"
  },
  {
    "text": "and not the views, let alone my data model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1403"
  },
  {
    "text": "Well, it turns out that the layout protocol has another trick up its sleeve. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1407"
  },
  {
    "text": "It lets you store values on each subview, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1411"
  },
  {
    "text": "and read the values from inside the layout protocol methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1413"
  },
  {
    "text": "Let's see how I can use that to communicate the rank information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1417"
  },
  {
    "text": "First, I declare a new type that conforms to the LayoutValueKey protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1421"
  },
  {
    "text": "and give it a default value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1426"
  },
  {
    "text": "In addition to providing a value for a view when you don't explicitly set one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1428"
  },
  {
    "text": "the default value establishes the associated value's type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1433"
  },
  {
    "text": "which is an integer in this case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1436"
  },
  {
    "text": "Then, I create a convenience method on View to set the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1439"
  },
  {
    "text": "using the layoutValue view modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1443"
  },
  {
    "text": "Now in my view hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1447"
  },
  {
    "text": "I can apply my convenience rank modifier to the views in my layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1448"
  },
  {
    "text": "Here, I calculate the rank of each pet ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1453"
  },
  {
    "text": "and add it to the pet's corresponding avatar view inside my radial layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1455"
  },
  {
    "text": "Finally, back in my place subviews method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1460"
  },
  {
    "text": "I can add some code to read the values from each subview ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1463"
  },
  {
    "text": "by using the layout value key as an index. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1467"
  },
  {
    "text": "And I can use the ranks to calculate an offset. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1471"
  },
  {
    "text": "I won't go through that logic here, but it basically produces ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1474"
  },
  {
    "text": "an appropriate angle for any possible set of rankings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1477"
  },
  {
    "text": "Well, all except one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1480"
  },
  {
    "text": "What happens if there's a three-way tie? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1483"
  },
  {
    "text": "There's no way to rotate the layout to get all the views in a line, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1485"
  },
  {
    "text": "so I'd have to substitute completely different layout logic for that case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1488"
  },
  {
    "text": "However, there is already a layout type that does this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1493"
  },
  {
    "text": "and that's the built-in HStack. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1496"
  },
  {
    "text": "So what I'd really like is to transition to an HStack ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1498"
  },
  {
    "text": "when I detect a three-way tie. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1501"
  },
  {
    "text": "And it turns out that there's a new tool for that, too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1503"
  },
  {
    "text": "The AnyLayout type lets you apply different layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1507"
  },
  {
    "text": "to a single view hierarchy, so that you maintain the identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1509"
  },
  {
    "text": "of the views as you transition from one layout type to another.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1512"
  },
  {
    "text": "So here I have the radial layout that we saw before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1517"
  },
  {
    "text": "and all I have to do is replace that with a new layout type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1521"
  },
  {
    "text": "that depends on whether there's a three-way tie. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1524"
  },
  {
    "text": "Because the isThreeWayTie property is derived from state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1527"
  },
  {
    "text": "SwiftUI notices when it changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1531"
  },
  {
    "text": "and recognizes that it needs to redraw this view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1533"
  },
  {
    "text": "But because the structural identity of the view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1536"
  },
  {
    "text": "always remains the same, SwiftUI sees this as a view that changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1539"
  },
  {
    "text": "rather than as a new view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1543"
  },
  {
    "text": "As a result, with only one more line, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1546"
  },
  {
    "text": "I can create smooth transitions between layout types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1548"
  },
  {
    "text": "And in fact, by adding the animation view modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1552"
  },
  {
    "text": "I also get animations between all the different states of the radial layout, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1555"
  },
  {
    "text": "because the configuration of the radial layout depends on the same data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1559"
  },
  {
    "text": "And here's what all that looks like in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1563"
  },
  {
    "text": "As I tap on different buttons to change the vote counts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1566"
  },
  {
    "text": "you can see how the avatars move around smoothly to reflect the current standings.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1569"
  },
  {
    "text": "So those are some of the new tools that SwiftUI has ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1577"
  },
  {
    "text": "for composing your app's view layouts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1580"
  },
  {
    "text": "You can use the Grid type to build highly customizable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1583"
  },
  {
    "text": "two-dimensional layouts of static information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1585"
  },
  {
    "text": "You can use the Layout protocol to define your own general purpose, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1588"
  },
  {
    "text": "reusable layouts, or layouts that are highly targeted to a particular use case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1591"
  },
  {
    "text": "You can use ViewThatFits when you want to let SwiftUI pick from a group of views ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1596"
  },
  {
    "text": "to best fit in the available space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1600"
  },
  {
    "text": "And you can seamlessly transition between layout types using AnyLayout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1603"
  },
  {
    "text": "Thanks for joining me today, and I hope you have as much fun ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1608"
  },
  {
    "text": "playing with these new layout tools as I have.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10056/?time=1611"
  }
]