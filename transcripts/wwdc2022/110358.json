[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=0"
  },
  {
    "text": "Hi, I'm Richard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=10"
  },
  {
    "text": "I'm an engineer on the Swift Standard Library team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=11"
  },
  {
    "text": "Today, let's embark on a journey beyond the basics of Swift Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=14"
  },
  {
    "text": "Swift 5.7 is gaining powerful new capabilities for string processing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=18"
  },
  {
    "text": "They start with the 'Regex' type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=23"
  },
  {
    "text": "a new type in the Swift Standard Library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=25"
  },
  {
    "text": "A language built-in Regex literal syntax, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=28"
  },
  {
    "text": "which makes this powerful and familiar concept even more first-class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=31"
  },
  {
    "text": "And finally, a result builder API called RegexBuilder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=36"
  },
  {
    "text": "It is a domain-specific language, or DSL, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=40"
  },
  {
    "text": "that takes advantage of the syntactic simplicity ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=44"
  },
  {
    "text": "and composability of result builders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=48"
  },
  {
    "text": "and pushes the readability of Regex to a whole new level.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=50"
  },
  {
    "text": "For background as to why Swift Regex makes it easier to process strings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=54"
  },
  {
    "text": "check out the Meet Swift Regex session by my colleague Michael. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=59"
  },
  {
    "text": "Let's look at a very simple example of Swift Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=64"
  },
  {
    "text": "Let's say I have a string of data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=67"
  },
  {
    "text": "and like to match and extract the user ID from this string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=70"
  },
  {
    "text": "I can create a regular expression from text ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=74"
  },
  {
    "text": "like I normally do with 'NSRegularExpression'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=78"
  },
  {
    "text": "It matches \"user_id\" colon ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=81"
  },
  {
    "text": "followed by zero or more whitespaces ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=85"
  },
  {
    "text": "followed by one or more digits ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=87"
  },
  {
    "text": "What's different this time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=90"
  },
  {
    "text": "is that we are creating a value of type Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=92"
  },
  {
    "text": "This is a new type in the Swift Standard Library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=95"
  },
  {
    "text": "I can then use string's 'firstMatch' algorithm ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=99"
  },
  {
    "text": "to find the first occurrence of the pattern defined by this Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=102"
  },
  {
    "text": "and print the whole match, just like that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=106"
  },
  {
    "text": "Because my Regex string is known at compile-time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=110"
  },
  {
    "text": "I can switch to using a Regex literal so that the compiler would check ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=114"
  },
  {
    "text": "for syntax errors and Xcode can show syntax highlighting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=118"
  },
  {
    "text": "But for ultimate readability and customizations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=123"
  },
  {
    "text": "I can use the Regex builder DSL. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=126"
  },
  {
    "text": "With Regex builder, reading the content of a Regex ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=129"
  },
  {
    "text": "is as easy as reading native Swift API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=133"
  },
  {
    "text": "In this session I will show you how Regex works ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=137"
  },
  {
    "text": "and how you can apply Regex in your workflow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=140"
  },
  {
    "text": "A Regex is a program that is to be executed by its underlying Regex engine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=143"
  },
  {
    "text": "When executing a Regex, the Regex engine takes an input string, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=149"
  },
  {
    "text": "and performs matching from the start to the end of the string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=153"
  },
  {
    "text": "Let's take a look at a very simple Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=158"
  },
  {
    "text": "This Regex matches a string that starts with one or more of letter \"a\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=160"
  },
  {
    "text": "followed by one or more digits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=165"
  },
  {
    "text": "I use one of the matching algorithms, 'wholeMatch', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=168"
  },
  {
    "text": "to match input \"aaa12\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=171"
  },
  {
    "text": "The Regex engine will start from the first character of the input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=176"
  },
  {
    "text": "First, it matches one or more of character a. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=180"
  },
  {
    "text": "At this point, it reaches character \"1\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=184"
  },
  {
    "text": "and tries to match this character against character \"a\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=187"
  },
  {
    "text": "But it doesn't match. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=191"
  },
  {
    "text": "So the Regex engine moves to the next pattern in the Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=194"
  },
  {
    "text": "to match one or more digits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=197"
  },
  {
    "text": "As we reach the end of the string, matching succeeds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=201"
  },
  {
    "text": "In the rest of this session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=205"
  },
  {
    "text": "I will explain a bit more about this execution model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=207"
  },
  {
    "text": "With Regex built on its underlying Regex engine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=211"
  },
  {
    "text": "the Regex builder DSL ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=215"
  },
  {
    "text": "and Regex-powered algorithms expand the power and expressivity of Regex.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=216"
  },
  {
    "text": "Regex-powered algorithms are collection-based APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=223"
  },
  {
    "text": "that provide some of the most common operations such as first match, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=226"
  },
  {
    "text": "which finds the first occurrence of a Regex in a string, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=231"
  },
  {
    "text": "'wholeMatch', which matches the entire string against a Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=235"
  },
  {
    "text": "'prefixMatch', which matches the prefix of a string against a Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=240"
  },
  {
    "text": "Besides matching, the Swift standard library also added APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=245"
  },
  {
    "text": "for Regex-based predication, replacement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=250"
  },
  {
    "text": "trimming, and splitting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=254"
  },
  {
    "text": "Also, Regex can now be used in Swift's pattern matching syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=257"
  },
  {
    "text": "in control flow statements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=262"
  },
  {
    "text": "making it easier than ever to switch on strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=264"
  },
  {
    "text": "Finally, on top of Regex builder and Regex-powered algorithms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=268"
  },
  {
    "text": "this year, Foundation introduced its own Regex support ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=272"
  },
  {
    "text": "that works seamlessly with Regex builder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=276"
  },
  {
    "text": "The Regex support in Foundation is none other than the formatters ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=280"
  },
  {
    "text": "and parsers that you are probably already using, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=284"
  },
  {
    "text": "such as those for Date and Number. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=288"
  },
  {
    "text": "If you want to learn more about these APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=291"
  },
  {
    "text": "watch the What's new in Foundation session from WWDC21. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=293"
  },
  {
    "text": "This year, Foundation is adding support for formatting and parsing URLs as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=299"
  },
  {
    "text": "With Regex support in Foundation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=305"
  },
  {
    "text": "you can embed the Foundation parsers directly in Regex builder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=307"
  },
  {
    "text": "For example, to parse a bank statement like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=312"
  },
  {
    "text": "I can use a Foundation-provided date parser with a custom format ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=316"
  },
  {
    "text": "and a currency parser with a domain-specific parse strategy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=321"
  },
  {
    "text": "This is a really big deal because you can create Regexes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=326"
  },
  {
    "text": "out of existing battle-tested parsers that take care of corner cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=330"
  },
  {
    "text": "and support localization, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=334"
  },
  {
    "text": "and compose them with the expressivity of the Regex builder DSL. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=336"
  },
  {
    "text": "To show you how you can apply Swift Regex to your workflow, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=341"
  },
  {
    "text": "let's work out an example together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=344"
  },
  {
    "text": "I have been writing a script to parse the logs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=347"
  },
  {
    "text": "from running XCTest-based unit tests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=350"
  },
  {
    "text": "A test log starts and ends with the status of a test suite. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=353"
  },
  {
    "text": "Then XCTest runs every test case and reports the status of the test case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=358"
  },
  {
    "text": "Today let's parse the first and the last lines of the log. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=365"
  },
  {
    "text": "It's information about a test suite. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=369"
  },
  {
    "text": "First, I import RegexBuilder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=372"
  },
  {
    "text": "RegexBuilder is a new module in the Swift Standard Library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=376"
  },
  {
    "text": "that provides the RegexBuilder DSL. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=379"
  },
  {
    "text": "Regex can be initialized with a trailing closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=383"
  },
  {
    "text": "that represents the body of the Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=387"
  },
  {
    "text": "Let's look at an example log message. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=390"
  },
  {
    "text": "There are three variable substrings that we care about in this log; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=393"
  },
  {
    "text": "the test suite's name, the status, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=398"
  },
  {
    "text": "whether it started, passed, or failed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=401"
  },
  {
    "text": "and the timestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=404"
  },
  {
    "text": "I can parse other parts of this line verbatim, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=406"
  },
  {
    "text": "while coming up with a pattern to parse the three variable substrings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=409"
  },
  {
    "text": "The log message starts with the word \"test suite\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=414"
  },
  {
    "text": "followed by a space and a single quote. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=418"
  },
  {
    "text": "Then we parse the test suite's name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=422"
  },
  {
    "text": "The name is an identifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=425"
  },
  {
    "text": "which can contain lowercase or uppercase letters or digits, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=427"
  },
  {
    "text": "but the first character can never be a digit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=432"
  },
  {
    "text": "So we create a custom character class to match a letter as the first character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=436"
  },
  {
    "text": "Then I match zero or more characters ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=441"
  },
  {
    "text": "that are either a letter or a digit from zero to nine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=444"
  },
  {
    "text": "This is very clear and readable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=449"
  },
  {
    "text": "but it's a little cumbersome. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=452"
  },
  {
    "text": "Many of you may be familiar with the textual Regex syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=454"
  },
  {
    "text": "In RegexBuilder, I can actually embed a concise Regex literal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=458"
  },
  {
    "text": "directly in the body. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=463"
  },
  {
    "text": "A Regex literal starts and ends with a slash. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=466"
  },
  {
    "text": "Swift infers the correct strong type for it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=470"
  },
  {
    "text": "This Regex, for example, matches the substring, \"Hello, WWDC!\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=473"
  },
  {
    "text": "So its output type is substring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=479"
  },
  {
    "text": "But what's really cool about a first-class Regex literal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=482"
  },
  {
    "text": "is strongly typed capturing groups. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=486"
  },
  {
    "text": "For example, I can write a capturing group to capture two digits as the year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=489"
  },
  {
    "text": "And give a name to this capturing group, \"year\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=495"
  },
  {
    "text": "When I do this, another substring will appear in the output type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=499"
  },
  {
    "text": "Later in this talk, I will show you how you can use captures ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=504"
  },
  {
    "text": "to extract information from a string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=508"
  },
  {
    "text": "Besides standard Regex literals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=510"
  },
  {
    "text": "Swift also supports extended Regex literals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=513"
  },
  {
    "text": "starting with pound slash and ending with slash pound. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=516"
  },
  {
    "text": "The extended literal allows non-semantic whitespaces. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=521"
  },
  {
    "text": "In this mode you can split your patterns into multiple lines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=526"
  },
  {
    "text": "With a Regex literal embedded in my RegexBuilder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=531"
  },
  {
    "text": "it's clean and yet familiar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=534"
  },
  {
    "text": "After I parse the test name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=537"
  },
  {
    "text": "I parse a single quote and a whitespace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=539"
  },
  {
    "text": "Now I reach the test status. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=543"
  },
  {
    "text": "There are multiple types of test status: started, failed, and passed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=545"
  },
  {
    "text": "To match one of these options, we use 'ChoiceOf'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=551"
  },
  {
    "text": "'ChoiceOf' matches one of multiple subpatterns ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=556"
  },
  {
    "text": "and it's exactly what we need. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=559"
  },
  {
    "text": "Next we parse what comes immediately after the status, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=562"
  },
  {
    "text": "a space followed by \"at\" followed by a space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=566"
  },
  {
    "text": "The rest of the string is a timestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=572"
  },
  {
    "text": "We can match this as one or more of any character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=574"
  },
  {
    "text": "But as I look at some more examples, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=579"
  },
  {
    "text": "a log message sometimes ends with a period. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=581"
  },
  {
    "text": "We still want to use 'Optionally' to match the period when it exists.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=585"
  },
  {
    "text": "To match an input against a Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=591"
  },
  {
    "text": "use one of the provided matching algorithms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=593"
  },
  {
    "text": "Let's use 'wholeMatch', which matches the entire string against a Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=596"
  },
  {
    "text": "With 'wholeMatch', I match each of these log messages, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=602"
  },
  {
    "text": "and print the matched content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=605"
  },
  {
    "text": "It matched! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=608"
  },
  {
    "text": "But we don't just want to know whether it matches the strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=610"
  },
  {
    "text": "We also want to extract information that we care about, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=613"
  },
  {
    "text": "such as the test name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=616"
  },
  {
    "text": "the status, and the timestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=617"
  },
  {
    "text": "So let's go ahead and do this with one of the coolest features of Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=621"
  },
  {
    "text": "Captures! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=624"
  },
  {
    "text": "A Capture saves a portion of the input during matching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=626"
  },
  {
    "text": "It is available as \"Capture\" in RegexBuilder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=630"
  },
  {
    "text": "and as a pair of parentheses in Regex syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=633"
  },
  {
    "text": "Capturing appends the matched substring to the output tuple type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=638"
  },
  {
    "text": "An output tuple type starts with the whole substring ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=644"
  },
  {
    "text": "that matched the entire Regex, followed by the first capture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=647"
  },
  {
    "text": "the second capture, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=652"
  },
  {
    "text": "The matching algorithm returns a Regex Match, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=655"
  },
  {
    "text": "from which you can obtain the output tuple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=659"
  },
  {
    "text": "The whole match, the first capture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=663"
  },
  {
    "text": "and the second capture.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=666"
  },
  {
    "text": "Let me use captures in my test suite log Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=669"
  },
  {
    "text": "I capture the test suite's name, the status, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=674"
  },
  {
    "text": "and the timestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=678"
  },
  {
    "text": "Let's again run this Regex on some inputs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=681"
  },
  {
    "text": "and print the three things that we captured. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=683"
  },
  {
    "text": "That looks like a successful match! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=687"
  },
  {
    "text": "It printed the name, the status, and the timestamp.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=690"
  },
  {
    "text": "But as I look closely, something in the date is a little off. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=696"
  },
  {
    "text": "It included the period in the input as part of the capture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=700"
  },
  {
    "text": "So let me go back and check the Regex for errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=705"
  },
  {
    "text": "I want to focus on the timestamp Regex and see what's wrong with it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=709"
  },
  {
    "text": "Then I realize, the pattern \"one or more of any character\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=713"
  },
  {
    "text": "consumes everything from the first digit of the timestamp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=717"
  },
  {
    "text": "all the way to the end of the line. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=721"
  },
  {
    "text": "So the \"Optionally period\" pattern below it never matched.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=724"
  },
  {
    "text": "I can fix this by making this OneOrMore reluctant. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=729"
  },
  {
    "text": "\"Reluctant\" is a case of repetition behaviors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=734"
  },
  {
    "text": "One or more, zero or more, optionally, and repeat ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=738"
  },
  {
    "text": "are what Swift Regex calls repetitions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=742"
  },
  {
    "text": "A repetition is eager by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=745"
  },
  {
    "text": "It matches as many occurrences as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=749"
  },
  {
    "text": "Let me use the example from earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=752"
  },
  {
    "text": "When the Regex engine tries to match OneOrMore of any character eagerly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=755"
  },
  {
    "text": "it starts with the first character, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=760"
  },
  {
    "text": "and it accepts any character along the way till the end of the input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=763"
  },
  {
    "text": "Then the Regex engine moves on to match Optionally period. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=768"
  },
  {
    "text": "There's no more period to match, but it's optional anyway, so it succeeds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=773"
  },
  {
    "text": "Because we're running the 'wholeMatch' algorithm, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=779"
  },
  {
    "text": "and both the input and the Regex pattern reach the end, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=782"
  },
  {
    "text": "matching succeeds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=785"
  },
  {
    "text": "Although matching succeeded, the period had already been captured ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=788"
  },
  {
    "text": "unexpectedly as part of the OneOrMore.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=793"
  },
  {
    "text": "When we change the repetition behavior to reluctant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=798"
  },
  {
    "text": "the Regex engine matches the repetition a little differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=802"
  },
  {
    "text": "It matches as few characters as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=806"
  },
  {
    "text": "So when the Regex engine matches the input string this time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=810"
  },
  {
    "text": "It carefully marches forward by always trying to match ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=815"
  },
  {
    "text": "the rest of the Regex first, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=818"
  },
  {
    "text": "before consuming a repetition occurrence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=820"
  },
  {
    "text": "When the rest of the Regex doesn't match, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=824"
  },
  {
    "text": "the engine backtracks to the repetition ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=826"
  },
  {
    "text": "and consumes an additional occurrence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=829"
  },
  {
    "text": "Let's fast forward to the last character, the period. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=833"
  },
  {
    "text": "Unlike eager behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=837"
  },
  {
    "text": "the Regex engine did not consume the period initially ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=839"
  },
  {
    "text": "as part of the OneOrMore, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=842"
  },
  {
    "text": "but tries to match the \"Optionally period\" pattern instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=844"
  },
  {
    "text": "This matches, and the Regex engine reaches the end of the pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=848"
  },
  {
    "text": "So matching succeeds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=853"
  },
  {
    "text": "and it produces the correct capture without a trailing period in it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=855"
  },
  {
    "text": "Because eager is the default behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=861"
  },
  {
    "text": "as you create your Regex using a repetition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=863"
  },
  {
    "text": "you should think about its implications on your intended match. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=866"
  },
  {
    "text": "You can specify the behavior at a per-repetition level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=870"
  },
  {
    "text": "by passing an extra argument, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=873"
  },
  {
    "text": "or, you can use the 'repetitionBehavior' modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=877"
  },
  {
    "text": "to override it for all repetitions that did not specify a behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=880"
  },
  {
    "text": "As we've modified the repetition behavior for the timestamp to be reluctant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=885"
  },
  {
    "text": "Matching now extracts the right timestamp ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=890"
  },
  {
    "text": "without including the period.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=893"
  },
  {
    "text": "Let's come back to the Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=898"
  },
  {
    "text": "As I use Capture to extract the test status from the input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=901"
  },
  {
    "text": "its type is Substring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=905"
  },
  {
    "text": "But it would be much better if I can convert the substring ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=908"
  },
  {
    "text": "into something more programming friendly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=911"
  },
  {
    "text": "like a custom data structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=914"
  },
  {
    "text": "To do this, I can use a transforming capture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=916"
  },
  {
    "text": "A transforming capture is a Capture with a transform closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=919"
  },
  {
    "text": "Upon matching, the Regex engine calls the transform closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=925"
  },
  {
    "text": "on the matched substring, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=929"
  },
  {
    "text": "which produces a result of the desired type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=931"
  },
  {
    "text": "The corresponding Regex output type becomes the closure's return type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=936"
  },
  {
    "text": "Here, by transforming the capture with Int's initializer from String, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=941"
  },
  {
    "text": "I get an optional Int in the output tuple type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=946"
  },
  {
    "text": "To obtain a non-optional output, TryCapture can help. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=950"
  },
  {
    "text": "TryCapture is a variant of Capture which accepts a transform ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=955"
  },
  {
    "text": "that returns an optional ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=959"
  },
  {
    "text": "and removes the optionality in the output type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=962"
  },
  {
    "text": "Returning nil during matching will cause the Regex engine to backtrack ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=965"
  },
  {
    "text": "and try an alternative path. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=970"
  },
  {
    "text": "TryCapture is most useful when you transform a capture ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=973"
  },
  {
    "text": "with a failable initializer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=977"
  },
  {
    "text": "A natural fit for storing the captured test status, would be an enumeration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=980"
  },
  {
    "text": "So let's define one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=985"
  },
  {
    "text": "I defined a TestStatus enum with three cases: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=988"
  },
  {
    "text": "started, passed, and failed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=991"
  },
  {
    "text": "The raw string values makes this enum initializable from a string.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=994"
  },
  {
    "text": "In the Regex, I switch to 'TryCapture' with a transform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1000"
  },
  {
    "text": "In the transform closure, I call the TestStatus initializer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1004"
  },
  {
    "text": "to convert the matched substring to a TestStatus value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1008"
  },
  {
    "text": "Now the corresponding output type is TestStatus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1013"
  },
  {
    "text": "Using a custom data structure like this ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1017"
  },
  {
    "text": "makes the Regex match output type safe. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1019"
  },
  {
    "text": "Back to the Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1023"
  },
  {
    "text": "There is one additional improvement I'd like to make. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1024"
  },
  {
    "text": "Currently, I match the timestamp using a wildcard pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1028"
  },
  {
    "text": "It's going to produce a substring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1032"
  },
  {
    "text": "This means that if my app wants to understand the timestamp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1035"
  },
  {
    "text": "it'd have to parse the substring again into another data structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1039"
  },
  {
    "text": "Earlier in the session, I mentioned that Foundation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1044"
  },
  {
    "text": "now supports Swift Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1047"
  },
  {
    "text": "providing industry-strength parsers as Regexes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1049"
  },
  {
    "text": "So instead of parsing the date as a substring, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1053"
  },
  {
    "text": "I can switch to Foundation's ISO 8601 date parser ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1056"
  },
  {
    "text": "to parse the timestamp as a date. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1061"
  },
  {
    "text": "Now the inferred type shows that this Regex outputs a Date.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1065"
  },
  {
    "text": "As I run 'wholeMatch' on the inputs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1070"
  },
  {
    "text": "I can see that the date string was parsed into a Foundation Date value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1072"
  },
  {
    "text": "Having access to battle-tested parsers as a Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1078"
  },
  {
    "text": "like the Foundation date parser, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1081"
  },
  {
    "text": "is incredibly handy in day-to-day string processing tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1083"
  },
  {
    "text": "Next, I will show you an advanced feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1087"
  },
  {
    "text": "re-using a pre-existing parser defined elsewhere in a Swift Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1090"
  },
  {
    "text": "Let's look at an example where we want to parse the duration of a test case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1096"
  },
  {
    "text": "Duration is a floating point number, such as, 0.001. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1100"
  },
  {
    "text": "The best way to do this is, of course, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1106"
  },
  {
    "text": "using the Foundation-provided floating point parser ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1108"
  },
  {
    "text": "with full support for localization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1111"
  },
  {
    "text": "But today, I want to show you what's under the hood ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1114"
  },
  {
    "text": "and how you can hook into the Regex engine yourself ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1117"
  },
  {
    "text": "to leverage an existing parser ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1120"
  },
  {
    "text": "to parse the duration floating-point number. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1122"
  },
  {
    "text": "'strtod' is a function from the C standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1126"
  },
  {
    "text": "It takes a string pointer, parses the underlying string, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1131"
  },
  {
    "text": "and assigns the end position of the match to the end pointer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1135"
  },
  {
    "text": "Let's parse the duration, the C way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1140"
  },
  {
    "text": "To do this, I can define a parser type on my own, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1143"
  },
  {
    "text": "and make it conform to the CustomConsumingRegexComponent protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1147"
  },
  {
    "text": "I define a structure named CDoubleParser. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1152"
  },
  {
    "text": "Its 'RegexOutput' is Double, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1156"
  },
  {
    "text": "because we are parsing a Double number. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1159"
  },
  {
    "text": "In the \"consuming\" method, we make a call to the double parser ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1162"
  },
  {
    "text": "from the C standard library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1166"
  },
  {
    "text": "passing the string pointers to it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1168"
  },
  {
    "text": "and getting a number back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1170"
  },
  {
    "text": "In the method body, I use the withCString method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1173"
  },
  {
    "text": "to obtain the start address. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1177"
  },
  {
    "text": "Then I call the 'strtod' C function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1181"
  },
  {
    "text": "passing the start address ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1183"
  },
  {
    "text": "and a pointer to receive the result end address. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1185"
  },
  {
    "text": "I then check for errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1189"
  },
  {
    "text": "When parsing succeeds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1191"
  },
  {
    "text": "the end address is greater than the start address. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1193"
  },
  {
    "text": "Otherwise, it is a parse failure, so I return nil. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1197"
  },
  {
    "text": "I compute the upper bound of the match from the pointer produced by the C API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1201"
  },
  {
    "text": "And finally, I return the upper bound of the match, and the number output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1207"
  },
  {
    "text": "I can come back to the Regex and use my 'CDoubleParser' directly in the Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1212"
  },
  {
    "text": "The output type is inferred to be Double. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1219"
  },
  {
    "text": "When I call 'wholeMatch' and print the parsed number, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1223"
  },
  {
    "text": "it outputs 0.001, like I expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1226"
  },
  {
    "text": "In summary, today we talked about some common ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1230"
  },
  {
    "text": "and advanced use of Swift Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1233"
  },
  {
    "text": "a new feature in Swift 5.7 that enables you ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1235"
  },
  {
    "text": "to integrate the power of string processing in your apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1238"
  },
  {
    "text": "A good practice when using Swift Regex is to try to strike a good balance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1242"
  },
  {
    "text": "between concision and readability, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1246"
  },
  {
    "text": "especially when you mix the RegexBuilder DSL and Regex literals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1248"
  },
  {
    "text": "When you encounter common patterns such as date and URL, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1253"
  },
  {
    "text": "always prefer the industry-strength parsers provided by Foundation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1257"
  },
  {
    "text": "as parsing these patterns with custom code can be prone to errors.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1261"
  },
  {
    "text": "For more information about Swift Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1267"
  },
  {
    "text": "check out the series of declarative string processing proposals ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1269"
  },
  {
    "text": "on Swift Evolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1273"
  },
  {
    "text": "I hope you'll enjoy processing strings with Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1274"
  },
  {
    "text": "Thank you, and have a great WWDC.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110358/?time=1278"
  }
]