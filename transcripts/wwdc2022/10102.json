[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=0"
  },
  {
    "text": "Hello and welcome. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=9"
  },
  {
    "text": "I'm Galo Avila, engineering manager in GPU Software. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=10"
  },
  {
    "text": "In this session, Eylon and I are excited to share ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=13"
  },
  {
    "text": "how you can improve your app's GPU binary generation with Metal 3. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=15"
  },
  {
    "text": "First, I'll describe how offline compilation can help you ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=19"
  },
  {
    "text": "reduce in app stutters, first launch, and new level load times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=22"
  },
  {
    "text": "Then Eylon will explain how you can use the optimize for size compiler option, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=26"
  },
  {
    "text": "to tune code expanding transformations and improve your compile times.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=30"
  },
  {
    "text": "Offline compilation lets you move GPU binary generation to project build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=35"
  },
  {
    "text": "To fully understand the benefits adoption can bring to your Metal application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=39"
  },
  {
    "text": "I'll start by reviewing the ways in which you can already generate a GPU binary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=43"
  },
  {
    "text": "In your Metal app, GPU binary generation happens both at build time and runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=47"
  },
  {
    "text": "For example, suppose you instantiate a metal library from source. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=52"
  },
  {
    "text": "This generates at app runtime Apple's Intermediate Representation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=56"
  },
  {
    "text": "also known as AIR. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=60"
  },
  {
    "text": "This can be a CPU intensive operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=62"
  },
  {
    "text": "which you can move to app build time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=64"
  },
  {
    "text": "by pre-compiling your source to a Metal library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=65"
  },
  {
    "text": "and instantiating from a file instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=68"
  },
  {
    "text": "Once your Metal library is in memory, creating a Pipeline State Descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=71"
  },
  {
    "text": "containing state and functions is a lightweight operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=74"
  },
  {
    "text": "Until you create your pipeline state object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=78"
  },
  {
    "text": "which can be another CPU intensive operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=80"
  },
  {
    "text": "where just-in-time GPU binary generation takes place.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=82"
  },
  {
    "text": "Since GPU binary generation at runtime can be a CPU intensive operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=88"
  },
  {
    "text": "Metal helps you speed up pipeline state object creation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=92"
  },
  {
    "text": "When you instantiate a PSO, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=96"
  },
  {
    "text": "Metal stores your GPU binaries in its file system cache. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=97"
  },
  {
    "text": "And every time a new PSO is created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=101"
  },
  {
    "text": "any newly generated functions are added. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=103"
  },
  {
    "text": "So any previously generated binaries that are referenced ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=106"
  },
  {
    "text": "will be loaded from the cache.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=109"
  },
  {
    "text": "Metal also lets you explicitly control when and where GPU binaries are cached ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=112"
  },
  {
    "text": "using Binary Archives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=116"
  },
  {
    "text": "Simply use a PSO descriptor to cache a GPU binary in an archive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=118"
  },
  {
    "text": "as many times as you need. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=123"
  },
  {
    "text": "Then your PSO creation becomes a lightweight operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=125"
  },
  {
    "text": "Binary archives enable more flexible caching, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=129"
  },
  {
    "text": "but they still have to be generated at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=131"
  },
  {
    "text": "In many cases, what you really want ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=134"
  },
  {
    "text": "is to generate those archives at build time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=136"
  },
  {
    "text": "and now you finally can. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=138"
  },
  {
    "text": "With offline binary generation, you specify a new artifact ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=140"
  },
  {
    "text": "at project build time called Metal pipelines script, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=143"
  },
  {
    "text": "along with Metal source or a Metal library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=146"
  },
  {
    "text": "A pipelines script is your compiler toolchain equivalent ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=149"
  },
  {
    "text": "to a collection of pipeline descriptors in the API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=152"
  },
  {
    "text": "The output of your compilation process is a binary archive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=155"
  },
  {
    "text": "No further GPU code generation takes place at app runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=158"
  },
  {
    "text": "Merely load your binary archive built offline to accelerate your PSO creation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=162"
  },
  {
    "text": "Offline compilation benefits your app by reducing runtime CPU overhead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=168"
  },
  {
    "text": "which is at the core of what makes Metal a low level API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=172"
  },
  {
    "text": "Further, adoption can improve your app's experience in two noticeable ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=175"
  },
  {
    "text": "First launch and new level load times can become dramatically faster, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=180"
  },
  {
    "text": "potentially resulting in greater engagement and interaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=183"
  },
  {
    "text": "Stutters or frame rate drops, due to runtime compilation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=187"
  },
  {
    "text": "can be removed at last, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=190"
  },
  {
    "text": "without the memory or CPU cost of pre-warming frames. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=191"
  },
  {
    "text": "I'll explore these benefits in more detail next.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=195"
  },
  {
    "text": "Here you have your traditional app runtime binary generation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=199"
  },
  {
    "text": "In this example, your app spends roughly 2/3 of its time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=202"
  },
  {
    "text": "compiling GPU binaries behind a loading screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=205"
  },
  {
    "text": "before you can begin interacting with it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=208"
  },
  {
    "text": "But with offline compilation your runtime shader generation moves to app build time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=211"
  },
  {
    "text": "PSO creation happens in a fraction of the time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=215"
  },
  {
    "text": "and you are able to interact with your app sooner ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=218"
  },
  {
    "text": "instead of idling away at a load screen.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=220"
  },
  {
    "text": "Offline compilation also helps to reduce stutters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=223"
  },
  {
    "text": "With traditional runtime binary generation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=227"
  },
  {
    "text": "you may have too many pipeline states to create at load time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=229"
  },
  {
    "text": "so you might instead be creating some just-in-time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=232"
  },
  {
    "text": "And when that happens, you may experience frame drops ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=236"
  },
  {
    "text": "caused by compilation temporarily interrupting your command encoding.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=239"
  },
  {
    "text": "Offline compilation removes those pesky bubbles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=243"
  },
  {
    "text": "because you can compile many more shaders at app build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=246"
  },
  {
    "text": "Next, I will share a new developer workflow ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=250"
  },
  {
    "text": "to help you harness the benefits of offline compilation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=252"
  },
  {
    "text": "In the following workflow you'll learn how to use new toolchain features ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=256"
  },
  {
    "text": "to build GPU binaries offline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=259"
  },
  {
    "text": "I'll show you how to generate your new pipelines script input artifact. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=261"
  },
  {
    "text": "Then, how to invoke the toolchain to generate a GPU binary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=265"
  },
  {
    "text": "A pipelines script artifact is a JSON formatted description ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=269"
  },
  {
    "text": "of one or more API pipeline state descriptors ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=272"
  },
  {
    "text": "and can be generated in many ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=276"
  },
  {
    "text": "For example, author them in your favorite JSON editor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=278"
  },
  {
    "text": "or Harvest them from binary archives serialized during development and testing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=281"
  },
  {
    "text": "Here you have a snippet of Metal code that generates a render pipeline descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=286"
  },
  {
    "text": "with state and functions and its equivalent JSON representation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=290"
  },
  {
    "text": "First, your API metal library file is specified as a libraries path property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=294"
  },
  {
    "text": "Then your API render descriptor function names as render pipelines properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=299"
  },
  {
    "text": "Lastly, other pipeline state, like raster_sample_count ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=304"
  },
  {
    "text": "or pixel formats, are also captured as script properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=307"
  },
  {
    "text": "Look for further JSON schema details in Metal's developer documentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=311"
  },
  {
    "text": "You also may want to kickstart JSON script generation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=316"
  },
  {
    "text": "and using the Metal runtime can help. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=319"
  },
  {
    "text": "Simply generate your binary archives at runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=322"
  },
  {
    "text": "and serialize them during your development and testing process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=324"
  },
  {
    "text": "Now I'll show you how you can accomplish this with the Metal API.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=327"
  },
  {
    "text": "You begin the runtime harvesting process ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=332"
  },
  {
    "text": "by creating your pipeline descriptor with state and functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=335"
  },
  {
    "text": "adding it to an archive, which generates GPU binary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=338"
  },
  {
    "text": "and serializing it to the file system to import into ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=343"
  },
  {
    "text": "and load from your app's bundle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=345"
  },
  {
    "text": "The Metal 3 runtime stores your pipeline descriptor alongside the GPU binary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=348"
  },
  {
    "text": "Now I'll show you how to extract them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=352"
  },
  {
    "text": "metal-source allows you to extract your JSON pipelines script ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=355"
  },
  {
    "text": "from an existing archive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=358"
  },
  {
    "text": "This is handy for migrating your binary generation from runtime to app build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=360"
  },
  {
    "text": "Just invoke metal-source with the flatbuffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=365"
  },
  {
    "text": "and output directory options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=367"
  },
  {
    "text": "The result is a pipelines script file, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=370"
  },
  {
    "text": "which you can edit to generate additional binaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=371"
  },
  {
    "text": "Now, I'll show you how to invoke the toolchain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=374"
  },
  {
    "text": "Generating a GPU binary from an Xcode project build phase is easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=378"
  },
  {
    "text": "Simply invoke metal as you would from the terminal with your source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=383"
  },
  {
    "text": "pipelines script, and output file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=386"
  },
  {
    "text": "Your output metal library now contains GPU binary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=389"
  },
  {
    "text": "and can be deployed across any toolchain supported device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=392"
  },
  {
    "text": "And if instead of source, you have a Metal library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=396"
  },
  {
    "text": "you can pass that to the toolchain too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=398"
  },
  {
    "text": "Generating a binary from a pre-existing Metal library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=402"
  },
  {
    "text": "is just as easy with Metal translator tool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=405"
  },
  {
    "text": "Just call metal-tt as you would in a terminal with your source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=408"
  },
  {
    "text": "pipelines script, and output file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=411"
  },
  {
    "text": "Your resulting Metal library now contains GPU binary ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=413"
  },
  {
    "text": "for all toolchain supported devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=416"
  },
  {
    "text": "Now that you know how to create binaries offline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=420"
  },
  {
    "text": "I'll review how to load them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=423"
  },
  {
    "text": "Simply provide the binary URL when creating an archive descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=425"
  },
  {
    "text": "and use it to instantiate an archive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=429"
  },
  {
    "text": "That's it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=430"
  },
  {
    "text": "For more information about Metal's binary archive API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=432"
  },
  {
    "text": "please refer to our previous years' talks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=434"
  },
  {
    "text": "Finally, a note on how Metal handles GPU binary compatibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=438"
  },
  {
    "text": "for offline generated artifacts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=441"
  },
  {
    "text": "To ensure your offline generated binaries are forward compatible ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=445"
  },
  {
    "text": "with future OS versions and products. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=447"
  },
  {
    "text": "Metal gracefully upgrades your binary archives during OS updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=450"
  },
  {
    "text": "or at app install time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=453"
  },
  {
    "text": "It does so asynchronously, and in the background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=454"
  },
  {
    "text": "I can't wait for you to harness the benefits of offline compilation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=458"
  },
  {
    "text": "to remove runtime stutters and reduce first launch and new level load times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=461"
  },
  {
    "text": "Such improvements can be tangible to others ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=465"
  },
  {
    "text": "and enhance their overall app experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=467"
  },
  {
    "text": "Now, over to Eylon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=469"
  },
  {
    "text": "Eylon: Thanks, Galo. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=471"
  },
  {
    "text": "Next, I'll introduce the new compile option, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=473"
  },
  {
    "text": "optimize for size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=476"
  },
  {
    "text": "The Metal compiler optimizes code aggressively for runtime performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=478"
  },
  {
    "text": "Some optimizations expand the GPU program size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=482"
  },
  {
    "text": "which may introduce unexpected costs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=485"
  },
  {
    "text": "For example, function inlining is an optimization ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=489"
  },
  {
    "text": "to avoid the overhead of a function call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=492"
  },
  {
    "text": "It works by inlining the body of the called function into the call site. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=494"
  },
  {
    "text": "This example kernel doesn't look like a lot of code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=499"
  },
  {
    "text": "but after inlining, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=502"
  },
  {
    "text": "it would contain a copy of functions 'f' and 'g', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=503"
  },
  {
    "text": "and potentially also of functions called from 'f' and 'g', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=506"
  },
  {
    "text": "such as helpers and non-primitive library functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=509"
  },
  {
    "text": "Another optimization is loop unrolling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=514"
  },
  {
    "text": "which inlines additional copies of a loop body, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=516"
  },
  {
    "text": "to expose parallelism across iterations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=519"
  },
  {
    "text": "and to avoid branching overhead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=521"
  },
  {
    "text": "The compiler may unroll as few as two iterations of the loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=524"
  },
  {
    "text": "or as many as all the iterations of a loop that has fixed bounds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=528"
  },
  {
    "text": "When optimizations like these create a very large program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=533"
  },
  {
    "text": "the compiler also has to spend a lot more time compiling it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=536"
  },
  {
    "text": "and in some situations, you may prefer to avoid those costs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=540"
  },
  {
    "text": "Xcode 14 introduces a new Metal optimization mode: optimize for size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=544"
  },
  {
    "text": "This mode limits size-expanding transformations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=550"
  },
  {
    "text": "such as inlining and loop unrolling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=553"
  },
  {
    "text": "when the compiler applies performance optimizations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=555"
  },
  {
    "text": "The intended benefit is to keep the GPU binary smaller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=558"
  },
  {
    "text": "and the compile time shorter, in cases when default optimization ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=561"
  },
  {
    "text": "proves to be too expensive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=565"
  },
  {
    "text": "When optimizing for size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=567"
  },
  {
    "text": "it is possible for the result to have lower runtime performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=569"
  },
  {
    "text": "Whether that actually happens depends on the program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=572"
  },
  {
    "text": "so you will need to try both optimization modes and compare. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=575"
  },
  {
    "text": "Optimize for size may not improve size and compile time for all shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=579"
  },
  {
    "text": "It is most likely to have benefit for large programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=583"
  },
  {
    "text": "with deep call paths and loops, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=586"
  },
  {
    "text": "where inlining and unrolling are common. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=588"
  },
  {
    "text": "The option is worth trying whenever you encounter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=590"
  },
  {
    "text": "an unexpectedly long compile time from default optimization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=592"
  },
  {
    "text": "The option is available whether compiling at project build time or at app runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=597"
  },
  {
    "text": "Here's a case where optimize for size can make a difference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=602"
  },
  {
    "text": "Cycles is a an open source project implementing a production renderer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=606"
  },
  {
    "text": "for the Blender 3D design environment, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=609"
  },
  {
    "text": "and was recently updated to support Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=612"
  },
  {
    "text": "Apple recently joined the Blender Development Fund, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=615"
  },
  {
    "text": "and one of the things we learned was that Blender's path tracing algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=617"
  },
  {
    "text": "use large compute shaders, with many helper functions and loops, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=621"
  },
  {
    "text": "and its compile times can add up to minutes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=625"
  },
  {
    "text": "It turns out those are exactly the kind of shaders that can benefit ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=628"
  },
  {
    "text": "from Metal 3's new optimize for size option.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=631"
  },
  {
    "text": "When rendering these scenes on an Apple Silicon GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=636"
  },
  {
    "text": "enabling optimize for size improved Blender's Setup Time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=639"
  },
  {
    "text": "which includes compiling shader pipelines, by up to 1.4x. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=642"
  },
  {
    "text": "And it provided that speedup with little or no degradation in Render Time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=648"
  },
  {
    "text": "Some renders slowed up to 4%, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=652"
  },
  {
    "text": "and some did not slow at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=655"
  },
  {
    "text": "So lower runtime performance is possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=657"
  },
  {
    "text": "But in some cases, optimize for size can also improve runtime performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=660"
  },
  {
    "text": "Here's an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=664"
  },
  {
    "text": "These are Render Time speedups for the same scenes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=667"
  },
  {
    "text": "from enabling optimize for size on Intel GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=670"
  },
  {
    "text": "The benefit was not just faster compiles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=674"
  },
  {
    "text": "but also some faster renders, by up to 1.6x. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=676"
  },
  {
    "text": "How? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=680"
  },
  {
    "text": "Because a smaller GPU program can avoid some of the runtime penalties ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=681"
  },
  {
    "text": "that come with large size: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=685"
  },
  {
    "text": "it may enjoy fewer instruction cache misses, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=686"
  },
  {
    "text": "or need fewer registers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=688"
  },
  {
    "text": "which translates to fewer spills to memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=690"
  },
  {
    "text": "or even more threads in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=692"
  },
  {
    "text": "Keep in mind, these results are not typical of all shaders and scenes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=695"
  },
  {
    "text": "and a performance drop is possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=698"
  },
  {
    "text": "For your project, you will need to evaluate the actual impact ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=700"
  },
  {
    "text": "to both compile time and runtime performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=704"
  },
  {
    "text": "You can enable optimize for size when compiling from Metal source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=707"
  },
  {
    "text": "in three different environments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=710"
  },
  {
    "text": "In the Xcode 14 user interface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=713"
  },
  {
    "text": "specify optimize for size as a build setting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=715"
  },
  {
    "text": "Under \"Metal Compiler - Build Options\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=718"
  },
  {
    "text": "find the setting \"Optimization Level\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=720"
  },
  {
    "text": "Level \"Default\" optimizes for performance, as Metal has done in the past. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=723"
  },
  {
    "text": "Level \"Size\" enables optimize for size.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=727"
  },
  {
    "text": "When compiling Metal source by command line, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=731"
  },
  {
    "text": "specify optimize for size using option'-Os'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=734"
  },
  {
    "text": "The first example specifies the option to a single compile-and-link command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=738"
  },
  {
    "text": "The second example has two compile commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=743"
  },
  {
    "text": "and specifies the option to just one of them ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=745"
  },
  {
    "text": "to enable it for only some shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=748"
  },
  {
    "text": "The option does not need to be passed to the link command ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=750"
  },
  {
    "text": "or to any subsequent commands. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=752"
  },
  {
    "text": "And you can use optimize for size either with, or without, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=754"
  },
  {
    "text": "generating a GPU binary using the commands presented earlier in this talk.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=758"
  },
  {
    "text": "Finally, when compiling Metal source at app runtime with a Metal Framework API ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=764"
  },
  {
    "text": "such as 'newLibraryWithSource', ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=769"
  },
  {
    "text": "specify optimize for size in a 'MTLCompileOptions' object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=771"
  },
  {
    "text": "using property 'optimizationLevel'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=774"
  },
  {
    "text": "The optimization level may be 'default' or 'size'. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=777"
  },
  {
    "text": "I hope your project will benefit from this new optimization mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=782"
  },
  {
    "text": "in the Metal compiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=785"
  },
  {
    "text": "Galo: To wrap up, I presented offline compilation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=788"
  },
  {
    "text": "a new workflow for generating GPU binaries entirely at app build time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=790"
  },
  {
    "text": "to reduce in-app stutters, first launch, and new level load times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=794"
  },
  {
    "text": "Eylon: Then I presented optimize for size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=798"
  },
  {
    "text": "a new Metal optimization mode when compiling from source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=800"
  },
  {
    "text": "to reduce program size and compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=803"
  },
  {
    "text": "Galo: We hope these improvements help your app or game ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=807"
  },
  {
    "text": "deliver an improved user experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=809"
  },
  {
    "text": "Eylon: With shorter setup and load times, fewer stutters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=811"
  },
  {
    "text": "and new workflows, thanks to lower compile costs at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=814"
  },
  {
    "text": "Thank you for watching.  ♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10102/?time=819"
  }
]