[
  {
    "text": "♪ Mellow instrumental hip-hop music ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=0"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=3"
  },
  {
    "text": "Hi, my name is Keyi Yu, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=9"
  },
  {
    "text": "and I'm an engineer from the Metal Ecosystem team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=11"
  },
  {
    "text": "Today, it's my pleasure to introduce metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=14"
  },
  {
    "text": "We created metal-cpp for anyone who uses C++ and wants to build ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=17"
  },
  {
    "text": "Metal applications for Apple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=21"
  },
  {
    "text": "Metal-cpp is a low-overhead library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=25"
  },
  {
    "text": "that connects your C++ applications to Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=27"
  },
  {
    "text": "First, I'll start with an overview of what metal-cpp is ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=31"
  },
  {
    "text": "and how it works, and then I'll cover some details ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=35"
  },
  {
    "text": "about the lifecycles for Objective-C objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=39"
  },
  {
    "text": "C++ and Objective-C handle lifecycles a bit differently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=43"
  },
  {
    "text": "and I'll show you how to handle those differences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=47"
  },
  {
    "text": "Xcode and metal-cpp have some great utilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=52"
  },
  {
    "text": "that can help you manage the object lifecycles ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=55"
  },
  {
    "text": "in your apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=58"
  },
  {
    "text": "And finally, I'll show you how to integrate C++ code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=61"
  },
  {
    "text": "with Objective-C classes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=65"
  },
  {
    "text": "So here's a look at metal-cpp and how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=69"
  },
  {
    "text": "Metal is the foundation for accelerated graphics ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=73"
  },
  {
    "text": "and compute on Apple platforms, enabling your apps and games ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=76"
  },
  {
    "text": "to tap into the incredible power of the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=80"
  },
  {
    "text": "It was originally designed using the powerful features ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=83"
  },
  {
    "text": "and the conventions offered by Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=86"
  },
  {
    "text": "But if your code base is in C++, you may need something to bridge ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=89"
  },
  {
    "text": "between your code and Metal's Objective-C code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=94"
  },
  {
    "text": "Introducing metal-cpp! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=97"
  },
  {
    "text": "It serves as a hub between your C++ application ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=99"
  },
  {
    "text": "and Objective-C Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=103"
  },
  {
    "text": "With metal-cpp in your application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=105"
  },
  {
    "text": "you can use Metal classes and functions in C++, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=108"
  },
  {
    "text": "and metal-cpp can help you call Objective-C functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=111"
  },
  {
    "text": "in runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=114"
  },
  {
    "text": "metal-cpp is a lightweight Metal C++ wrapper. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=116"
  },
  {
    "text": "I say it's lightweight, because it's implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=120"
  },
  {
    "text": "as a header-only library with inline function calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=123"
  },
  {
    "text": "It provides 100 percent coverage of the Metal API ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=127"
  },
  {
    "text": "by implementing a one-to-one mapping of C++ calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=131"
  },
  {
    "text": "to Objective-C APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=134"
  },
  {
    "text": "To do this, metal-cpp wraps parts of the Foundation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=136"
  },
  {
    "text": "and CoreAnimation frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=140"
  },
  {
    "text": "It's open source under Apache 2 License, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=142"
  },
  {
    "text": "so you can modify the library and include it ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=144"
  },
  {
    "text": "to your applications, easily. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=147"
  },
  {
    "text": "metal-cpp uses C to call directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=149"
  },
  {
    "text": "into the Objective-C runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=152"
  },
  {
    "text": "This is the exact same mechanism that the Objective-C compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=155"
  },
  {
    "text": "uses to execute Objective-C methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=158"
  },
  {
    "text": "So this wrapper introduces little overhead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=162"
  },
  {
    "text": "Since metal-cpp implements a one-to-one mapping of C++ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=167"
  },
  {
    "text": "to Objective-C calls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=171"
  },
  {
    "text": "it follows the same Cocoa memory-management rules. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=173"
  },
  {
    "text": "I will discuss this in more detail later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=177"
  },
  {
    "text": "This one-to-one mapping also allows ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=179"
  },
  {
    "text": "all of the developer tools to work seamlessly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=182"
  },
  {
    "text": "including GPU Frame Capture and the Xcode debugger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=185"
  },
  {
    "text": "These are the series of calls necessary to draw a triangle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=190"
  },
  {
    "text": "with metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=193"
  },
  {
    "text": "If you are familiar with C++, it's a good time to learn Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=195"
  },
  {
    "text": "because you don't need to worry about language syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=199"
  },
  {
    "text": "If you've already used Metal with Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=202"
  },
  {
    "text": "in terms of function calls, there's very little difference ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=206"
  },
  {
    "text": "between the Objective-C interface of Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=209"
  },
  {
    "text": "and metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=211"
  },
  {
    "text": "I am going to demonstrate how easy it is to use metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=213"
  },
  {
    "text": "First, I create a command buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=218"
  },
  {
    "text": "which I will fill with commands for the GPU to execute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=221"
  },
  {
    "text": "I can simply use the raw pointer in C++ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=225"
  },
  {
    "text": "as a mapping to ID in Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=228"
  },
  {
    "text": "I can create a render command encoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=231"
  },
  {
    "text": "and write render commands with a command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=234"
  },
  {
    "text": "The C++ function renderCommandEncoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=237"
  },
  {
    "text": "and the Objective-C method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=240"
  },
  {
    "text": "renderCommandEncoder WithDescriptor are the same. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=242"
  },
  {
    "text": "The only differences are the name conventions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=246"
  },
  {
    "text": "of the languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=249"
  },
  {
    "text": "I then set a render pipeline state object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=251"
  },
  {
    "text": "which contains the vertex and fragment shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=254"
  },
  {
    "text": "and various other rendering states. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=257"
  },
  {
    "text": "Then I encode my draw call to render a single triangle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=259"
  },
  {
    "text": "Then I indicate that ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=264"
  },
  {
    "text": "I've finished encoding render commands. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=265"
  },
  {
    "text": "I present the drawable, so the triangle is displayed onscreen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=269"
  },
  {
    "text": "Finally, I commit my command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=273"
  },
  {
    "text": "This tells the GPU that it can begin executing my commands. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=276"
  },
  {
    "text": "Obviously, metal-cpp and Objective-C Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=280"
  },
  {
    "text": "are almost the same. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=283"
  },
  {
    "text": "You don't need to worry about language syntax now ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=285"
  },
  {
    "text": "with metal-cpp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=288"
  },
  {
    "text": "you can directly look into the Metal documentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=289"
  },
  {
    "text": "to learn the concepts and usage of Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=292"
  },
  {
    "text": "You may have already played ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=296"
  },
  {
    "text": "with this deferred lighting sample before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=298"
  },
  {
    "text": "We now provide a new version of this deferred lighting sample ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=300"
  },
  {
    "text": "which uses metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=303"
  },
  {
    "text": "We hope this can help you learn how to code with metal-cpp ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=306"
  },
  {
    "text": "in practice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=309"
  },
  {
    "text": "I'm also excited to introduce a series ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=311"
  },
  {
    "text": "of incremental C++ samples that introduces the Metal API ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=313"
  },
  {
    "text": "and shows you how to accomplish different tasks with it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=317"
  },
  {
    "text": "So now that you know a little bit about metal-cpp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=325"
  },
  {
    "text": "how do you actually use it? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=328"
  },
  {
    "text": "We published metal-cpp last year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=330"
  },
  {
    "text": "Here's the webpage where you can find the downloads ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=332"
  },
  {
    "text": "and instructions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=335"
  },
  {
    "text": "Let me show you the steps you will need to take. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=336"
  },
  {
    "text": "After downloading metal-cpp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=339"
  },
  {
    "text": "you should tell Xcode where to find it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=341"
  },
  {
    "text": "Here, I put metal-cpp under the current project. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=344"
  },
  {
    "text": "Then, you need to set C++17 or higher ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=349"
  },
  {
    "text": "as the C++ language dialect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=353"
  },
  {
    "text": "Next, add three frameworks to the project: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=356"
  },
  {
    "text": "Foundation, QuartzCore, and Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=359"
  },
  {
    "text": "Now there's only one thing left to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=363"
  },
  {
    "text": "before using C++ interfaces of those frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=365"
  },
  {
    "text": "There are three headers in metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=369"
  },
  {
    "text": "Since metal-cpp is a header-only library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=372"
  },
  {
    "text": "you need to generate their implementations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=374"
  },
  {
    "text": "before importing the header files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=377"
  },
  {
    "text": "To do this, define three macros: NS_PRIVATE_IMPLEMENTATION, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=379"
  },
  {
    "text": "CA_PRIVATE_IMPLEMENTATION, AND MTL_PRIVATE_IMPLEMENTATION. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=384"
  },
  {
    "text": "If you are interested in what metal-cpp does with the macros ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=389"
  },
  {
    "text": "under the hood, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=392"
  },
  {
    "text": "please check out header bridge files in the metal-cpp folder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=393"
  },
  {
    "text": "You can use the headers separately ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=397"
  },
  {
    "text": "or put them in a single header. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=399"
  },
  {
    "text": "You can import the header files whenever you need them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=402"
  },
  {
    "text": "But remember, do not define the NS, CA, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=405"
  },
  {
    "text": "or MTL_PRIVATE_IMPLEMENTATION macros more than once. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=408"
  },
  {
    "text": "Otherwise, you may cause duplicate definition errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=412"
  },
  {
    "text": "To use metal-cpp effectively, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=416"
  },
  {
    "text": "you'll need to know Cocoa's memory management rules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=419"
  },
  {
    "text": "how to use the great utilities that can help you ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=422"
  },
  {
    "text": "manage object lifecycles, and how to design ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=425"
  },
  {
    "text": "your application architecture when you interface ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=427"
  },
  {
    "text": "with other frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=430"
  },
  {
    "text": "I'll start with object lifecycle management. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=432"
  },
  {
    "text": "During your application's operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=436"
  },
  {
    "text": "you typically need to allocate and release memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=438"
  },
  {
    "text": "You also need to manage command buffers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=441"
  },
  {
    "text": "pipeline objects, and resources. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=444"
  },
  {
    "text": "To help manage this memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=447"
  },
  {
    "text": "Objective-C and Cocoa objects include a reference count. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=449"
  },
  {
    "text": "This is also present in metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=453"
  },
  {
    "text": "Reference counting helps you manage your memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=456"
  },
  {
    "text": "Using reference counting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=459"
  },
  {
    "text": "all objects contain a retainCount property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=460"
  },
  {
    "text": "Components in an app increase the count ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=463"
  },
  {
    "text": "to keep objects they're interacting with alive ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=465"
  },
  {
    "text": "and decrease it when they are done with them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=468"
  },
  {
    "text": "When the retainCount hits zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=471"
  },
  {
    "text": "the runtime deallocates the object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=473"
  },
  {
    "text": "There are two types of reference counting in Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=476"
  },
  {
    "text": "One is called Manual Retain-Release -- MRR; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=479"
  },
  {
    "text": "the other is Automatic Reference Counting -- ARC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=482"
  },
  {
    "text": "When compiling code with the ARC feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=486"
  },
  {
    "text": "the compiler takes the references you create ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=488"
  },
  {
    "text": "and automatically inserts calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=491"
  },
  {
    "text": "to the underlying memory-management mechanism. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=493"
  },
  {
    "text": "metal-cpp objects are manually retained and released. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=496"
  },
  {
    "text": "So you need to understand Cocoa's conventions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=500"
  },
  {
    "text": "to know when to retain and release objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=503"
  },
  {
    "text": "Unlike creating objects in C++, metal-cpp objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=506"
  },
  {
    "text": "are neither created with new nor destroyed with delete. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=511"
  },
  {
    "text": "With Cocoa's conventions, you own any object you create ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=514"
  },
  {
    "text": "with methods starting with the alloc, new, copy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=518"
  },
  {
    "text": "mutableCopy, or create. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=523"
  },
  {
    "text": "You can take ownership of an object using retain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=525"
  },
  {
    "text": "When you no longer need it, you must relinquish ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=529"
  },
  {
    "text": "of an object you own. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=533"
  },
  {
    "text": "You can release it immediately or release it afterwards. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=534"
  },
  {
    "text": "You must not relinquish ownership of an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=538"
  },
  {
    "text": "you do not own as you risk a double free. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=542"
  },
  {
    "text": "Next, I'll walk through an example ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=545"
  },
  {
    "text": "of these Cocoa conventions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=548"
  },
  {
    "text": "In class A, a method uses alloc to create an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=550"
  },
  {
    "text": "and init to initialize this object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=554"
  },
  {
    "text": "Remember, never call init on an object twice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=556"
  },
  {
    "text": "Class A takes the ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=560"
  },
  {
    "text": "and is responsible for deallocating it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=562"
  },
  {
    "text": "Now the retain count for this object is one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=565"
  },
  {
    "text": "Next, class B uses retain to get the object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=569"
  },
  {
    "text": "and takes ownership of this object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=573"
  },
  {
    "text": "So far, I have two objects that share the ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=575"
  },
  {
    "text": "of this object represented by the orange cube. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=579"
  },
  {
    "text": "The retain count increases by one.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=582"
  },
  {
    "text": "Class A doesn't need this object anymore, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=586"
  },
  {
    "text": "so class A should manually call release for it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=589"
  },
  {
    "text": "As a result, the retain count decreases by one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=593"
  },
  {
    "text": "Now, only class B owns the object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=596"
  },
  {
    "text": "OK, finally, class B wants to release this object too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=600"
  },
  {
    "text": "Now the retain count is zero, so the runtime frees the object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=603"
  },
  {
    "text": "Here's a situation where a method in class B ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=608"
  },
  {
    "text": "returns an object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=611"
  },
  {
    "text": "You still need this object in the rest of the programs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=613"
  },
  {
    "text": "In other words, you want to relinquish ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=616"
  },
  {
    "text": "of an object in a method in class B, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=619"
  },
  {
    "text": "but you don't want it to be deallocated immediately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=622"
  },
  {
    "text": "In this case, you should call autorelease in class B. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=626"
  },
  {
    "text": "The retain count is still one after you call autorelease, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=630"
  },
  {
    "text": "and thus, you can still use the object later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=633"
  },
  {
    "text": "Here's the question: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=636"
  },
  {
    "text": "since class B does not own this object anymore, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=638"
  },
  {
    "text": "who is responsible for deallocating it? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=641"
  },
  {
    "text": "The Foundation Framework provides an important object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=644"
  },
  {
    "text": "called the AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=647"
  },
  {
    "text": "The Autorelease API puts the object into an AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=649"
  },
  {
    "text": "Now, the AutoreleasePool takes the ownership of the object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=654"
  },
  {
    "text": "The AutoreleasePool decrements the receiver's retain count ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=658"
  },
  {
    "text": "when the AutoreleasePool is destroyed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=662"
  },
  {
    "text": "You are not the only one who can create autoreleased objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=664"
  },
  {
    "text": "Metal creates several autoreleased objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=668"
  },
  {
    "text": "as part of its operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=671"
  },
  {
    "text": "All methods that create temporary objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=673"
  },
  {
    "text": "add them to AutoreleasePools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=676"
  },
  {
    "text": "by calling autorelease under the hood. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=678"
  },
  {
    "text": "It is the AutoreleasePool's responsibility to release them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=681"
  },
  {
    "text": "In other words, with an AutoreleasePool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=684"
  },
  {
    "text": "you can code in a more elegant way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=687"
  },
  {
    "text": "You can have an AutoreleasePool for the main application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=690"
  },
  {
    "text": "We also encourage you to create and manage ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=693"
  },
  {
    "text": "additional AutoreleasePools at smaller scopes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=696"
  },
  {
    "text": "to reduce your program's working set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=698"
  },
  {
    "text": "You also need AutoreleasePools for every thread you create. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=701"
  },
  {
    "text": "Here's an example showing how to use an AutoreleasePool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=705"
  },
  {
    "text": "and autoreleased objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=708"
  },
  {
    "text": "In this sample, an AutoreleasePool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=711"
  },
  {
    "text": "is created by alloc, which means you take the ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=713"
  },
  {
    "text": "and it should be manually released. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=717"
  },
  {
    "text": "Now we have an AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=720"
  },
  {
    "text": "As we discussed in the beginning, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=723"
  },
  {
    "text": "you should create a command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=725"
  },
  {
    "text": "It's not created with alloc or create, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=727"
  },
  {
    "text": "so you don't own it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=731"
  },
  {
    "text": "Instead, it's an autoreleased object created by Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=733"
  },
  {
    "text": "This command buffer will be put into the AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=739"
  },
  {
    "text": "It's the AutoreleasePool's responsibility to deallocate it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=742"
  },
  {
    "text": "You can use it as you wish ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=746"
  },
  {
    "text": "until you release the AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=748"
  },
  {
    "text": "Then you need to create a RenderPassDescriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=751"
  },
  {
    "text": "This RenderPassDescriptor will be put into the AutoreleasePool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=755"
  },
  {
    "text": "as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=759"
  },
  {
    "text": "Same to RenderCommandEncoder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=760"
  },
  {
    "text": "It's also an autoreleased object created by Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=763"
  },
  {
    "text": "Don't forget this currentDrawable object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=766"
  },
  {
    "text": "It will be put into the AutoreleasePool too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=769"
  },
  {
    "text": "At the end of the piece of code, I use pPool->release ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=773"
  },
  {
    "text": "to release the AutoreleasePool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=776"
  },
  {
    "text": "Before being deallocated, the AutoreleasePool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=779"
  },
  {
    "text": "releases everything that it owns, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=782"
  },
  {
    "text": "in this case, it releases the CommandBuffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=784"
  },
  {
    "text": "RenderPassDescriptor, RenderCommandEncoder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=787"
  },
  {
    "text": "and currentDrawable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=792"
  },
  {
    "text": "Then the AutoreleasePool is released. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=794"
  },
  {
    "text": "So far, you got to know Cocoa's conventions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=796"
  },
  {
    "text": "autoreleased objects, and AutoreleasePools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=799"
  },
  {
    "text": "It's important to correctly manage object lifecycles ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=802"
  },
  {
    "text": "to avoid memory leaks and zombie objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=806"
  },
  {
    "text": "and we have great tools to help you avoid ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=809"
  },
  {
    "text": "and debug these issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=812"
  },
  {
    "text": "I'll focus on two utilities: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=815"
  },
  {
    "text": "NS::SharedPtr and NSZombie. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=817"
  },
  {
    "text": "NS::SharedPtr is a new utility that can help you manage ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=820"
  },
  {
    "text": "the object lifecycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=824"
  },
  {
    "text": "You can find it under Foundation framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=826"
  },
  {
    "text": "in the metal-cpp folder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=828"
  },
  {
    "text": "Notice that it is not exactly the same ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=831"
  },
  {
    "text": "as std:shared_ptr. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=833"
  },
  {
    "text": "So there's no dependency on the C++ standard library ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=835"
  },
  {
    "text": "and no extra cost on storing the reference count. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=839"
  },
  {
    "text": "Here's what NS::SharedPtr is like. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=843"
  },
  {
    "text": "Transfer and retain functions clearly express ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=845"
  },
  {
    "text": "the intent of consuming an object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=848"
  },
  {
    "text": "Transfer creates a SharedPtr ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=851"
  },
  {
    "text": "without increasing the pointee's referenceCount, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=853"
  },
  {
    "text": "effectively transferring ownership to the SharedPtr. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=856"
  },
  {
    "text": "The retain function sends a retain to the passed-in object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=861"
  },
  {
    "text": "Use this function to keep alive objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=865"
  },
  {
    "text": "that are in AutoreleasePools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=868"
  },
  {
    "text": "and to express that the pointer's owner ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=869"
  },
  {
    "text": "has a vested interest in the pointee's lifecycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=872"
  },
  {
    "text": "You can access the underlying object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=876"
  },
  {
    "text": "as expected via get and via the operator->. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=878"
  },
  {
    "text": "SharedPtr copy, move, construction, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=882"
  },
  {
    "text": "and assignment work as expected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=885"
  },
  {
    "text": "with copy increasing the retainCount. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=888"
  },
  {
    "text": "Moves are fast and do not affect the retain count ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=891"
  },
  {
    "text": "in the general case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=894"
  },
  {
    "text": "SharedPtrs always send exactly one release ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=896"
  },
  {
    "text": "to the pointee on destruction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=899"
  },
  {
    "text": "You can avoid this if you want ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=902"
  },
  {
    "text": "by calling the detach function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=903"
  },
  {
    "text": "Going back to the top, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=906"
  },
  {
    "text": "it's important to know the differences between ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=907"
  },
  {
    "text": "creating a pointer by transferring or retaining it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=910"
  },
  {
    "text": "So for TransferPtr, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=914"
  },
  {
    "text": "suppose I have an MRR object, with a reference count of 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=917"
  },
  {
    "text": "After I pass it to the TransferPtr function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=922"
  },
  {
    "text": "the SharedPtr takes ownership of the object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=925"
  },
  {
    "text": "but its retainCount doesn't change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=928"
  },
  {
    "text": "When the pointer goes out of scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=930"
  },
  {
    "text": "the SharedPtr's destructor runs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=932"
  },
  {
    "text": "and calls release on the MRR object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=934"
  },
  {
    "text": "which decrements the retainCount to 0. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=937"
  },
  {
    "text": "Another function is NS::RetainPtr. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=940"
  },
  {
    "text": "When you want to avoid deallocating an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=943"
  },
  {
    "text": "because you want to use it later, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=946"
  },
  {
    "text": "you should use NS::RetainPtr. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=947"
  },
  {
    "text": "Suppose we have this MRR object; the retainCount is one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=950"
  },
  {
    "text": "After we pass it to the RetainPtr function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=955"
  },
  {
    "text": "the retainCount increases by one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=958"
  },
  {
    "text": "After running out of the scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=960"
  },
  {
    "text": "this RetainPtr calls release for this MRR object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=962"
  },
  {
    "text": "So the retainCount is one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=966"
  },
  {
    "text": "In general, NS::TransferPtr takes the ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=969"
  },
  {
    "text": "of an object for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=972"
  },
  {
    "text": "But NS::RetainPtr helps you retain an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=973"
  },
  {
    "text": "when you don't want it to be deallocated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=977"
  },
  {
    "text": "When you pass an object to these two functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=980"
  },
  {
    "text": "NS::TransferPtr doesn't change the reference count ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=984"
  },
  {
    "text": "but NS::RetainPtr increases reference count by one ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=987"
  },
  {
    "text": "as it calls retain for you under the hood. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=991"
  },
  {
    "text": "The destructor of these two functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=994"
  },
  {
    "text": "both call release for the passed-in object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=996"
  },
  {
    "text": "and, therefore, reference count decreases by one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=999"
  },
  {
    "text": "If the reference count hits zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1003"
  },
  {
    "text": "the object will be freed in runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1005"
  },
  {
    "text": "Here's an example of NS::TransferPtr. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1008"
  },
  {
    "text": "When I talked about the render pass, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1011"
  },
  {
    "text": "which drew a single triangle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1013"
  },
  {
    "text": "I needed this render pipeline state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1015"
  },
  {
    "text": "Here are the calls to create a render pipeline state object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1018"
  },
  {
    "text": "These are the attributes that a render pipeline descriptor needs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1022"
  },
  {
    "text": "According to Cocoa's conventions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1025"
  },
  {
    "text": "since these calls starts with new and alloc, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1027"
  },
  {
    "text": "I own these objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1032"
  },
  {
    "text": "So I need to call release for these objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1034"
  },
  {
    "text": "With NS::SharedPtr, I don't need to call release ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1037"
  },
  {
    "text": "for those MRR objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1040"
  },
  {
    "text": "because NS::SharedPtrs takes the ownership of these objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1043"
  },
  {
    "text": "So here, I pass raw pointers to the TransferPtr function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1047"
  },
  {
    "text": "After doing that, there's no need to call release ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1053"
  },
  {
    "text": "as I did in the previous slide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1056"
  },
  {
    "text": "If you are familiar with ARC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1058"
  },
  {
    "text": "you may find that MRR used with NS::SharedPtr ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1060"
  },
  {
    "text": "is similar to using ARC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1064"
  },
  {
    "text": "You may encounter use-after-free bugs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1066"
  },
  {
    "text": "when handling memory manually. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1068"
  },
  {
    "text": "They occur when you are trying to use an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1070"
  },
  {
    "text": "which has been already released. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1072"
  },
  {
    "text": "NSZombie is a good way to check for those bugs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1075"
  },
  {
    "text": "When use-after-free bugs occur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1078"
  },
  {
    "text": "it triggers a breakpoint and provides you with a stack trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1080"
  },
  {
    "text": "You can enable Zombies very easily ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1084"
  },
  {
    "text": "with an environment variable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1086"
  },
  {
    "text": "Just set NSZombieEnabled to YES. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1088"
  },
  {
    "text": "Or If you're using Xcode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1091"
  },
  {
    "text": "you can enable Zombies in a scheme. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1093"
  },
  {
    "text": "Here's how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1096"
  },
  {
    "text": "I want to create a new render pipeline state object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1098"
  },
  {
    "text": "with the same render pipeline settings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1101"
  },
  {
    "text": "So in this newRenderPipelineState function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1105"
  },
  {
    "text": "I reuse the pDesc object.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1108"
  },
  {
    "text": "After clicking on run, Xcode triggers a breakpoint ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1114"
  },
  {
    "text": "and shows me the stack trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1118"
  },
  {
    "text": "That means I got something wrong. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1120"
  },
  {
    "text": "Hm, what's the problem? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1123"
  },
  {
    "text": "Maybe NSZombie can help here, so I enable NSZombie in scheme.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1127"
  },
  {
    "text": "When I run the program again, NSZombie triggers a breakpoint. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1137"
  },
  {
    "text": "I get something new in the console output: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1141"
  },
  {
    "text": "\"message sent to deallocated instance.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1144"
  },
  {
    "text": "Oh, I reused an object that I have already released. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1149"
  },
  {
    "text": "And it's the render pipeline descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1152"
  },
  {
    "text": "So I need to use this render pipeline descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1156"
  },
  {
    "text": "before calling release. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1159"
  },
  {
    "text": "By doing that, I fix the problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1161"
  },
  {
    "text": "More tools and details are covered in this year's talk, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1164"
  },
  {
    "text": "\"Profile and optimize your game's memory.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1168"
  },
  {
    "text": "For example, you can learn how to track retainCount ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1171"
  },
  {
    "text": "in allocations in instruments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1174"
  },
  {
    "text": "Feel free to check out other tools on Apple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1177"
  },
  {
    "text": "You will find out that they can help you debug your game ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1180"
  },
  {
    "text": "and improve performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1183"
  },
  {
    "text": "Now you know how to manage object lifecycles in metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1185"
  },
  {
    "text": "But you may still need to interface with other frameworks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1190"
  },
  {
    "text": "like game controller and audio. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1193"
  },
  {
    "text": "These are still in Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1196"
  },
  {
    "text": "How can you interface with those APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1199"
  },
  {
    "text": "and design an elegant application architecture? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1201"
  },
  {
    "text": "Say you wrote a ViewController in Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1205"
  },
  {
    "text": "but you wrote a renderer in C++ with metal-cpp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1209"
  },
  {
    "text": "You need to call renderer methods, like draw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1213"
  },
  {
    "text": "from the ViewController. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1216"
  },
  {
    "text": "The challenge here is to nicely separate the two languages ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1218"
  },
  {
    "text": "but have them work together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1222"
  },
  {
    "text": "The solution is to create an adapter class ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1225"
  },
  {
    "text": "which calls C++ from Objective-C files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1229"
  },
  {
    "text": "By doing this, you can focus on Objective-C or C++ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1232"
  },
  {
    "text": "in files where you implement features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1237"
  },
  {
    "text": "For example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1240"
  },
  {
    "text": "I can create a RendererAdapter class in Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1241"
  },
  {
    "text": "And down in the implementation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1245"
  },
  {
    "text": "I add an Objective-C method so that I can call it ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1248"
  },
  {
    "text": "directly from the ViewController. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1251"
  },
  {
    "text": "Inside of the interface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1253"
  },
  {
    "text": "I declare a C++ pointer to a renderer object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1255"
  },
  {
    "text": "Inside the body of the method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1260"
  },
  {
    "text": "I directly call the renderer's C++ method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1262"
  },
  {
    "text": "This method needs to pass the MTK::View ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1266"
  },
  {
    "text": "as a C++ object into the draw method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1270"
  },
  {
    "text": "so it casts the view as a C++ type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1273"
  },
  {
    "text": "by using the __bridge keyword. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1278"
  },
  {
    "text": "I'll talk more about this cast later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1280"
  },
  {
    "text": "In contrast, you need to call MTKView which is written ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1283"
  },
  {
    "text": "with Objective-C in Renderer which is written with C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1287"
  },
  {
    "text": "It's challenging as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1292"
  },
  {
    "text": "Similarly, the solution is to create an adapter class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1295"
  },
  {
    "text": "With this class, in C++ files, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1299"
  },
  {
    "text": "you can call Objective-C methods using C++ interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1301"
  },
  {
    "text": "For example, I can create a ViewAdapter class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1307"
  },
  {
    "text": "I write the interfaces in C++, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1310"
  },
  {
    "text": "so in the Renderer class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1313"
  },
  {
    "text": "I can call those C++ view methods easily. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1315"
  },
  {
    "text": "While in the implementation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1318"
  },
  {
    "text": "I call Objective-C methods from MTKView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1320"
  },
  {
    "text": "including currentDrawable and depthStencilTexture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1323"
  },
  {
    "text": "You may notice there're some __bridge keywords here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1328"
  },
  {
    "text": "I use them to cast between metal-cpp objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1331"
  },
  {
    "text": "and Objective-C objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1334"
  },
  {
    "text": "As you learned in the beginning, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1336"
  },
  {
    "text": "metal-cpp objects are manually retained and released, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1338"
  },
  {
    "text": "but objects created by Objective-C ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1341"
  },
  {
    "text": "use automatic reference counting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1344"
  },
  {
    "text": "You need to move objects from MRR to ARC ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1347"
  },
  {
    "text": "and from ARC to MRR. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1350"
  },
  {
    "text": "Here are three types of bridge casting ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1353"
  },
  {
    "text": "which can help you cast between Objective-C and C++. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1355"
  },
  {
    "text": "They can also help you transfer ownership ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1359"
  },
  {
    "text": "_bridge casting casts between Objective-C ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1362"
  },
  {
    "text": "and metal-cpp objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1365"
  },
  {
    "text": "There is no transfer of ownership between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1367"
  },
  {
    "text": "__bridge_retained casting casts an Objective-C pointer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1372"
  },
  {
    "text": "to a metal-cpp pointer and takes the ownership from ARC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1375"
  },
  {
    "text": "__bridge_transfer casting moves a metal-cpp pointer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1380"
  },
  {
    "text": "to Objective-C and transfers the ownership to ARC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1383"
  },
  {
    "text": "Going back to the problem, you need to cast ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1387"
  },
  {
    "text": "between metal-cpp objects and Objective-C objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1390"
  },
  {
    "text": "If there's no transfer of ownership, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1393"
  },
  {
    "text": "you can use __bridge cast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1396"
  },
  {
    "text": "If you want to cast from metal-cpp to Objective-C objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1398"
  },
  {
    "text": "and transfer the ownership to Objective-C, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1403"
  },
  {
    "text": "you should use __bridge_transfer cast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1405"
  },
  {
    "text": "If you want to cast from Objective-C to metal-cpp objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1409"
  },
  {
    "text": "and take the ownership out of ARC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1412"
  },
  {
    "text": "you should use __bridge_retained cast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1414"
  },
  {
    "text": "Here's a case when I have to use MetalKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1417"
  },
  {
    "text": "to leverage the asset loading code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1420"
  },
  {
    "text": "That means in my C++ application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1422"
  },
  {
    "text": "I need a texture as a metal-cpp object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1425"
  },
  {
    "text": "but it is created by Objective-C methods. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1429"
  },
  {
    "text": "I need the ability to transfer ownership out of ARC ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1433"
  },
  {
    "text": "so I can manually release it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1437"
  },
  {
    "text": "And in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1439"
  },
  {
    "text": "I need to pick __bridge_retained cast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1440"
  },
  {
    "text": "I have this C++ function that loads a texture from the catalog ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1446"
  },
  {
    "text": "and I want to return a metal-cpp texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1450"
  },
  {
    "text": "But inside, I'm calling some Objective-C functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1453"
  },
  {
    "text": "in MetalKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1456"
  },
  {
    "text": "I need to define the options that a texture loader needs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1459"
  },
  {
    "text": "Then I create a texture loader by calling an Objective-C method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1463"
  },
  {
    "text": "from MetalKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1469"
  },
  {
    "text": "With that loader, I can create a texture object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1471"
  },
  {
    "text": "and load a texture from the catalog. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1475"
  },
  {
    "text": "This method is also an Objective-C method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1478"
  },
  {
    "text": "from MetalKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1481"
  },
  {
    "text": "Now I have an Objective-C type texture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1483"
  },
  {
    "text": "I need to cast it to the metal-cpp object ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1486"
  },
  {
    "text": "and take it out of ARC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1489"
  },
  {
    "text": "With these steps in mind, it's time to code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1492"
  },
  {
    "text": "and I'll show you how casting works in practice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1494"
  },
  {
    "text": "First step is to define the texture loader options ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1498"
  },
  {
    "text": "that a texture loader needs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1501"
  },
  {
    "text": "I can safely cast the metal-cpp storage mode and usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1503"
  },
  {
    "text": "to the Objective-C type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1507"
  },
  {
    "text": "as the metal-cpp type defines them to the same values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1509"
  },
  {
    "text": "Here I create a texture loader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1513"
  },
  {
    "text": "I have a device that is a metal-cpp object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1516"
  },
  {
    "text": "and I need to pass it to the initWithDevice method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1520"
  },
  {
    "text": "Because the metal-cpp object is an Objective-C object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1524"
  },
  {
    "text": "I can cast it like a toll-free object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1528"
  },
  {
    "text": "There is no transfer of ownership. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1531"
  },
  {
    "text": "Now I use the texture loader options ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1535"
  },
  {
    "text": "and a texture loader to create a texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1537"
  },
  {
    "text": "And I want to return the loaded texture as a metal-cpp object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1539"
  },
  {
    "text": "So I need to take it out of ARC ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1544"
  },
  {
    "text": "and cast it to the corresponding pointer type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1546"
  },
  {
    "text": "This is done with a __bridge_retained cast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1550"
  },
  {
    "text": "After this, I can use this texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1553"
  },
  {
    "text": "as any metal-cpp object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1555"
  },
  {
    "text": "I am responsible for releasing it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1557"
  },
  {
    "text": "In this section, I provided an adapter pattern ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1560"
  },
  {
    "text": "which can help you handle two different languages ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1563"
  },
  {
    "text": "in your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1566"
  },
  {
    "text": "I also showed how to interface with Objective-C and C++ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1568"
  },
  {
    "text": "with three types of casts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1573"
  },
  {
    "text": "To summarize, metal-cpp is a lightweight ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1575"
  },
  {
    "text": "and very efficient Metal C++ wrapper. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1578"
  },
  {
    "text": "I talked about how to manage object lifecycles ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1582"
  },
  {
    "text": "when using metal-cpp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1586"
  },
  {
    "text": "how to interface with Objective-C ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1589"
  },
  {
    "text": "in an elegant manner, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1591"
  },
  {
    "text": "and how our developer tools can help you debug. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1592"
  },
  {
    "text": "Download metal-cpp and play with all the amazing samples now! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1597"
  },
  {
    "text": "See what you can create with Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1601"
  },
  {
    "text": "We look forward to seeing your C++ applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1604"
  },
  {
    "text": "running across all Apple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1607"
  },
  {
    "text": "Thanks for watching! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1609"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2022-10160/?time=1611"
  }
]