[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=0"
  },
  {
    "text": "- Hello, I am Michael Ilseman ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=9"
  },
  {
    "text": "and I'm an engineer on the Swift standard library team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=11"
  },
  {
    "text": "Join me as we meet and get to know Regex in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=13"
  },
  {
    "text": "There's a lot to Swift Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=17"
  },
  {
    "text": "and we'll be getting just a taste of everything it has to offer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=18"
  },
  {
    "text": "Let's say we're developers collaborating with some financial investigators ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=21"
  },
  {
    "text": "on a tool to analyze transactions for irregularities. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=25"
  },
  {
    "text": "Now, you'd think that for a task this important ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=30"
  },
  {
    "text": "we'd be processing well-structured data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=33"
  },
  {
    "text": "But instead, we have a bunch of strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=36"
  },
  {
    "text": "Here the first field has the transaction kind, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=40"
  },
  {
    "text": "the second the transaction date, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=43"
  },
  {
    "text": "the third field the individual or institution, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=46"
  },
  {
    "text": "the fourth and final field the amount in US dollars. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=49"
  },
  {
    "text": "Fields are separated by either 2-or-more spaces or a tab ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=53"
  },
  {
    "text": "for a very important technical reason ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=59"
  },
  {
    "text": "that no one involved can remember. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=62"
  },
  {
    "text": "And, yes, that date field is totally ambiguous. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=66"
  },
  {
    "text": "We're just going to hope that it's month/day/year and see what happens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=71"
  },
  {
    "text": "Processing these transactions involves processing strings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=76"
  },
  {
    "text": "and string is a collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=80"
  },
  {
    "text": "which means we get access to generic collection algorithms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=82"
  },
  {
    "text": "These algorithms basically come in two kinds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=86"
  },
  {
    "text": "those that operate over elements, and those that operate over indices.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=89"
  },
  {
    "text": "We can try to use the element-based algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=94"
  },
  {
    "text": "by splitting out the transaction fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=96"
  },
  {
    "text": "but the field separator being either tab or 2-or-more spaces ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=99"
  },
  {
    "text": "makes this difficult. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=103"
  },
  {
    "text": "Splitting on whitespace alone doesn't cut it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=105"
  },
  {
    "text": "Another approach is to drop down ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=108"
  },
  {
    "text": "to low-level index manipulation code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=111"
  },
  {
    "text": "But it's hard to do right, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=115"
  },
  {
    "text": "and even if you know what you're doing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=116"
  },
  {
    "text": "it still takes a lot of code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=118"
  },
  {
    "text": "Let's come back to split. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=121"
  },
  {
    "text": "The reason this approach doesn't work is because it is element-based ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=122"
  },
  {
    "text": "while the field separator is a more complex pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=126"
  },
  {
    "text": "A solution found in a wide variety of languages ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=129"
  },
  {
    "text": "is to write a regular expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=132"
  },
  {
    "text": "Regular expressions emerged from formal language theory ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=135"
  },
  {
    "text": "where they define a regular language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=138"
  },
  {
    "text": "They entered practical application for search in editors and command-line tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=141"
  },
  {
    "text": "as well as lexical analysis in compilers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=145"
  },
  {
    "text": "These applications take regular expressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=148"
  },
  {
    "text": "beyond their theoretical roots, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=151"
  },
  {
    "text": "as they need to extract portions of the input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=153"
  },
  {
    "text": "control and direct execution, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=156"
  },
  {
    "text": "and add expressive power. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=159"
  },
  {
    "text": "And Swift is taking them further. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=160"
  },
  {
    "text": "We call this derivative Regex.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=162"
  },
  {
    "text": "Regex is a struct generic over its Output, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=165"
  },
  {
    "text": "which is the result of applying it, including captures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=168"
  },
  {
    "text": "You can create one using a literal containing regex syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=172"
  },
  {
    "text": "in between slash delimiters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=176"
  },
  {
    "text": "Swift's regex syntax is compatible with Perl, Python, Ruby, Java, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=178"
  },
  {
    "text": "NSRegularExpression, and many, many others.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=183"
  },
  {
    "text": "This regex matches one or more digits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=187"
  },
  {
    "text": "The compiler knows regex syntax, so you'll get syntax highlighting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=190"
  },
  {
    "text": "compile-time errors, and even strongly-typed captures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=194"
  },
  {
    "text": "which we'll be meeting later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=197"
  },
  {
    "text": "A regex can be created at run-time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=200"
  },
  {
    "text": "from a string containing the same regex syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=202"
  },
  {
    "text": "This is useful for search fields in editors or command-line tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=205"
  },
  {
    "text": "This will throw an error at run-time if the input contains invalid syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=209"
  },
  {
    "text": "The output type is an existential AnyRegexOutput, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=214"
  },
  {
    "text": "because the types and number of captures won't be known until run-time.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=218"
  },
  {
    "text": "And the same regex can be written using a declarative ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=224"
  },
  {
    "text": "and well-structured, albeit more verbose, regex builder.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=227"
  },
  {
    "text": "Let's adapt our split approach from earlier to use a regex literal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=233"
  },
  {
    "text": "The first portion matches 2-or-more occurrences of any whitespace character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=237"
  },
  {
    "text": "The second portion matches a single horizontal tab. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=243"
  },
  {
    "text": "And the pipe character denotes a choice between alternatives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=247"
  },
  {
    "text": "giving us a field separator of either 2-or-more-spaces or a single tab. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=251"
  },
  {
    "text": "Now that our fields are split, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=257"
  },
  {
    "text": "let's make a contribution to civilization itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=259"
  },
  {
    "text": "and normalize that field separator to a single tab and be done with it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=263"
  },
  {
    "text": "We could call 'join' on the result after splitting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=269"
  },
  {
    "text": "but there's a better algorithm for that: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=272"
  },
  {
    "text": "'replacing' lets us replace all field separators with a single tab.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=274"
  },
  {
    "text": "So we go out and evangelize our clearly superior approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=280"
  },
  {
    "text": "to anyone who will listen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=284"
  },
  {
    "text": "Adoption is...slow but promising. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=286"
  },
  {
    "text": "If you are familiar with regular expressions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=290"
  },
  {
    "text": "you may also know of their mixed reputation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=292"
  },
  {
    "text": "As the old saying goes, \"I had a problem, so I wrote a regular expression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=295"
  },
  {
    "text": "Now I have two problems.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=300"
  },
  {
    "text": "But Swift regex is different.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=302"
  },
  {
    "text": "Swift advances the art in four key areas. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=305"
  },
  {
    "text": "Regex syntax is concise and expressive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=309"
  },
  {
    "text": "but it can become terse and difficult to read. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=312"
  },
  {
    "text": "And newer features have to use increasingly cryptic syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=315"
  },
  {
    "text": "Swift regexes can be structured and organized ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=320"
  },
  {
    "text": "the way we structure and organize source code through Regex builders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=323"
  },
  {
    "text": "Literals are concise, builders give structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=326"
  },
  {
    "text": "and literals can be used within builders to find that perfect balance.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=331"
  },
  {
    "text": "Textual representations for data have become a lot more complicated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=336"
  },
  {
    "text": "and handling them correctly requires a standards-conforming parser. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=340"
  },
  {
    "text": "Swift regex lets you interweave industrial-strength parsers ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=345"
  },
  {
    "text": "as individual components of a regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=349"
  },
  {
    "text": "This is done in a library-extensible fashion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=352"
  },
  {
    "text": "meaning any parsers can participate.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=354"
  },
  {
    "text": "Much of the history of applied regular expressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=358"
  },
  {
    "text": "took place in a world where the entire computer system ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=361"
  },
  {
    "text": "only supported a single language and encoding, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=364"
  },
  {
    "text": "most notably ASCII. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=368"
  },
  {
    "text": "But the modern world is Unicode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=370"
  },
  {
    "text": "Swift regex does the Unicode without compromising expressivity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=373"
  },
  {
    "text": "And finally, the power of regular expressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=378"
  },
  {
    "text": "can open up a broad search space that must be exhaustively explored. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=381"
  },
  {
    "text": "This makes their execution difficult to reason about. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=385"
  },
  {
    "text": "Some languages support controls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=388"
  },
  {
    "text": "but because they're behind cryptic syntax, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=390"
  },
  {
    "text": "they tend to be obscure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=393"
  },
  {
    "text": "Swift regex provides predictable execution and surfaces controls prominently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=395"
  },
  {
    "text": "Let's go back to the financial statements we've been working with ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=401"
  },
  {
    "text": "and fully parse each transaction using Regex builders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=404"
  },
  {
    "text": "a declarative approach to string processing in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=408"
  },
  {
    "text": "We'll import the RegexBuilder module to get started. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=412"
  },
  {
    "text": "We can re-use the field separator regex that we just defined. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=416"
  },
  {
    "text": "The first field is simple; it's either a CREDIT or a DEBIT. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=421"
  },
  {
    "text": "We can use the regex literal syntax we've already seen to write that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=425"
  },
  {
    "text": "After that comes a field separator, and then the date. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=430"
  },
  {
    "text": "Parsing dates by hand is a bad idea. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=433"
  },
  {
    "text": "Foundation has really good parsers for types like dates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=436"
  },
  {
    "text": "numbers, and URLs, and we can use them directly in a Regex Builder.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=440"
  },
  {
    "text": "We supply an explicit locale which is our best guess at the author's intent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=445"
  },
  {
    "text": "We do this instead of implicitly using the system's current locale. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=450"
  },
  {
    "text": "We can always change it later, and it's easy to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=455"
  },
  {
    "text": "because we made our assumptions _explicit_ in code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=457"
  },
  {
    "text": "The third field can be \"anything,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=463"
  },
  {
    "text": "so it's tempting to just write \"one or more of anything.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=464"
  },
  {
    "text": "And while that will give us the right answer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=468"
  },
  {
    "text": "it does a lot of unnecessary work first, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=470"
  },
  {
    "text": "because it starts off by matching anything else that comes after it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=473"
  },
  {
    "text": "The regex will back up one character at a time and try the rest of the pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=478"
  },
  {
    "text": "We want to tell the regex to stop when it sees the terminating field separator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=482"
  },
  {
    "text": "There are a quite a few ways that we could accomplish this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=488"
  },
  {
    "text": "One good way to do this is to use NegativeLookahead ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=490"
  },
  {
    "text": "which peeks at the next part of the input without actually consuming it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=494"
  },
  {
    "text": "Here we peek at the input to make sure ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=500"
  },
  {
    "text": "a field separator isn't coming up before matching any character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=502"
  },
  {
    "text": "NegativeLookahead is one of a family of tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=506"
  },
  {
    "text": "that let you precisely control how a Regex matches its components.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=510"
  },
  {
    "text": "Finally, we match the amount, again using one of Foundation's parsers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=515"
  },
  {
    "text": "this time for currency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=520"
  },
  {
    "text": "We've been assuming that comma is a thousands separator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=522"
  },
  {
    "text": "while period is a decimal separator, and we make this assumption explicit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=525"
  },
  {
    "text": "We've built a regex that lets us parse a line from the transaction ledger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=531"
  },
  {
    "text": "We don't just want to recognize the lines. We want to extract some of this data out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=535"
  },
  {
    "text": "To do this, we use captures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=541"
  },
  {
    "text": "which extract portions of our input for later processing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=544"
  },
  {
    "text": "By convention, the '0th' capture is the part of the input ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=548"
  },
  {
    "text": "that the entire regex matched, and each explicit capture follows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=552"
  },
  {
    "text": "Our transaction kind is captured as a Substring that is a slice of our input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=557"
  },
  {
    "text": "For dates, we actually capture the strongly-typed value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=563"
  },
  {
    "text": "that was parsed out without needing to post-process the text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=567"
  },
  {
    "text": "The individual or institution is again captured as a portion of our input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=571"
  },
  {
    "text": "and the decimal capture is another strongly-typed value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=577"
  },
  {
    "text": "To use it, we extract date and decimal values from the match result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=581"
  },
  {
    "text": "and the investigators take it from here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=584"
  },
  {
    "text": "It's at this point that we recommend they dump the data into a real database ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=587"
  },
  {
    "text": "for obvious benefits like structured queries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=592"
  },
  {
    "text": "They have a...different opinion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=596"
  },
  {
    "text": "They want to keep everything as strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=598"
  },
  {
    "text": "Which is good news for this talk because we get to see even more of Swift Regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=601"
  },
  {
    "text": "Everything's going well until suddenly it's not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=607"
  },
  {
    "text": "We just learned that the date order in the transaction text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=611"
  },
  {
    "text": "which we told everyone was totally ambiguous, is in fact ambiguous. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=614"
  },
  {
    "text": "It's not always the same, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=620"
  },
  {
    "text": "and the leading theory is that it depends on the currency used in the transaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=622"
  },
  {
    "text": "Because of course it does. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=628"
  },
  {
    "text": "This means that US dollars is month/day/year ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=630"
  },
  {
    "text": "and British pounds is day/month/year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=635"
  },
  {
    "text": "So let's write a sed-like script to disambiguate this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=640"
  },
  {
    "text": "For our regex, we're going to use an extended delimiter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=644"
  },
  {
    "text": "This allows us to have slashes inside without having to escape them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=648"
  },
  {
    "text": "This also gives us access to an extended syntax mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=653"
  },
  {
    "text": "where whitespace is ignored, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=657"
  },
  {
    "text": "which means we can use whitespace for readability, just like in normal code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=659"
  },
  {
    "text": "We used named captures, which show up in the Regex's output as tuple labels.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=665"
  },
  {
    "text": "And we use a Unicode Property to recognize currency symbols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=671"
  },
  {
    "text": "This makes our regex more adaptable; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=675"
  },
  {
    "text": "we will handle the specific symbols in application logic.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=678"
  },
  {
    "text": "Rather than try to cut and splice text manually, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=683"
  },
  {
    "text": "we're going to yet again use Foundation's date parser. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=687"
  },
  {
    "text": "pickStrategy receives the currency symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=690"
  },
  {
    "text": "and will determine a parse strategy based on it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=693"
  },
  {
    "text": "All of our assumptions are explicit in code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=695"
  },
  {
    "text": "which makes it easier to adapt and evolve, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=698"
  },
  {
    "text": "something we almost certainly will end up needing.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=701"
  },
  {
    "text": "Let's use our regex and helper function with a find-and-replace algorithm ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=706"
  },
  {
    "text": "by supplying a closure which uses the match result, including captures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=710"
  },
  {
    "text": "to construct the replacement string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=715"
  },
  {
    "text": "We pick a strategy based on the captured currency and parse the captured date. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=718"
  },
  {
    "text": "We can access the captures by name, instead of only by position. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=722"
  },
  {
    "text": "For our output, we'll format the new date using ISO-8601, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=727"
  },
  {
    "text": "an unambiguous industry standard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=732"
  },
  {
    "text": "Our tool transforms this ledger Into an unambiguous one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=734"
  },
  {
    "text": "Because we're using a real date parser and formatter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=740"
  },
  {
    "text": "we're far more adaptable to changing requirements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=743"
  },
  {
    "text": "And using a Unicode property to recognize currency symbols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=747"
  },
  {
    "text": "helps us evolve that much quicker. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=750"
  },
  {
    "text": "A regex declares an algorithm over some model of String. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=753"
  },
  {
    "text": "Swift's String presents multiple models for working with Unicode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=758"
  },
  {
    "text": "This string, representing a love story for the ages, contains 3 characters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=763"
  },
  {
    "text": "These characters are complex entities ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=770"
  },
  {
    "text": "formally called Unicode extended grapheme clusters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=772"
  },
  {
    "text": "A single Character is composed of one or more Unicode scalar values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=776"
  },
  {
    "text": "String provides a UnicodeScalarView ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=782"
  },
  {
    "text": "to access this lower-level representation of its contents. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=784"
  },
  {
    "text": "This enables advanced usage as well as compatibility with other systems.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=789"
  },
  {
    "text": "Our first Character, who is our story's protagonist, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=795"
  },
  {
    "text": "is composed of 4 Unicode scalars: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=799"
  },
  {
    "text": "ZOMBIE, Zero Width Joiner, FEMALE SIGN, and uh... ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=802"
  },
  {
    "text": "VARIATION SELECTOR-16, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=807"
  },
  {
    "text": "which in this context signals a preference to be rendered as emoji. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=809"
  },
  {
    "text": "Of course! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=815"
  },
  {
    "text": "These scalars produce the single emoji we see visually. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=817"
  },
  {
    "text": "When strings are stored in memory, they are encoded as UTF-8 bytes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=821"
  },
  {
    "text": "We can view these bytes using the UTF-8 view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=827"
  },
  {
    "text": "UTF-8 is a variable-width encoding, meaning multiple bytes may be needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=830"
  },
  {
    "text": "for a single scalar, and as we saw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=836"
  },
  {
    "text": "multiple scalars may be needed for a single character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=838"
  },
  {
    "text": "Our story's protagonist, represented by 4 Unicode scalars, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=843"
  },
  {
    "text": "is encoded using 13 UTF-8 bytes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=847"
  },
  {
    "text": "In addition to being composed of multiple scalars, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=851"
  },
  {
    "text": "the same exact character can sometimes be represented by different sets of scalars. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=855"
  },
  {
    "text": "This comes up a lot when handling languages other than English. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=860"
  },
  {
    "text": "In this example, the 'e' with an acute accent ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=864"
  },
  {
    "text": "can be represented as either a single scalar, precomposed ‘e’ with acute accent, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=867"
  },
  {
    "text": "or as an ASCII 'e' followed by a combining acute accent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=873"
  },
  {
    "text": "These are the same characters, so String comparison will return true. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=878"
  },
  {
    "text": "This is because String obeys what is formally called ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=883"
  },
  {
    "text": "Unicode Canonical Equivalence.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=885"
  },
  {
    "text": "From the perspective of the UnicodeScalarView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=889"
  },
  {
    "text": "or the UTF-8 view, the contents are different, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=892"
  },
  {
    "text": "and we see this difference when we compare within these lower-level views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=895"
  },
  {
    "text": "Just like String, Swift regex is obsessively Unicode correct by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=899"
  },
  {
    "text": "But it does this without compromising expressivity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=905"
  },
  {
    "text": "Let's switch over a pair of strings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=909"
  },
  {
    "text": "For the first string, we'll match the named Unicode Scalar SPARKLING HEART ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=911"
  },
  {
    "text": "surrounded by any characters denoted by dot (.).",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=916"
  },
  {
    "text": "The any character class will match any Swift character; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=921"
  },
  {
    "text": "that is, any Unicode extended grapheme cluster.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=924"
  },
  {
    "text": "For the second string, characters that are equal compare as equals... ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=929"
  },
  {
    "text": "and we can ignore case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=934"
  },
  {
    "text": "And now our simple love story has become a lot more complicated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=937"
  },
  {
    "text": "Sometimes life, or in this case un-life, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=941"
  },
  {
    "text": "has complexities that we need to process.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=945"
  },
  {
    "text": "Just like String, if you do need to process Unicode scalar values yourself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=949"
  },
  {
    "text": "either for compatibility or sub-grapheme cluster precision, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=954"
  },
  {
    "text": "you can by matching with 'unicodeScalar' semantics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=958"
  },
  {
    "text": "When we match at the Unicode Scalar level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=962"
  },
  {
    "text": "the dot matches a single Unicode Scalar value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=964"
  },
  {
    "text": "instead of a full Swift Character. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=967"
  },
  {
    "text": "Which means we get to see our friend again: VARIATION-SELECTOR 16. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=969"
  },
  {
    "text": "This friendly little selector gets matched by the dot, and you can't see it ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=974"
  },
  {
    "text": "because when it's all alone, it renders as empty whitespace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=978"
  },
  {
    "text": "So helpful.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=983"
  },
  {
    "text": "Now that we've worked with precision and correctness, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=986"
  },
  {
    "text": "let's do something a little different, and get back to finance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=990"
  },
  {
    "text": "The investigators have returned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=994"
  },
  {
    "text": "and this time they have an interesting request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=996"
  },
  {
    "text": "They modified our transaction matching tool to sniff transactions ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1000"
  },
  {
    "text": "live off the wire instead of processing ledgers after the fact. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1003"
  },
  {
    "text": "Looking at their code, they actually did a reasonably good job, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1008"
  },
  {
    "text": "but they're facing scaling issues and need our help. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1012"
  },
  {
    "text": "The transactions they are processing are very similar, but with minor differences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1016"
  },
  {
    "text": "Instead of a date, they have a precise time stamp instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1021"
  },
  {
    "text": "This is represented in a clear, unambiguous, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1025"
  },
  {
    "text": "and shockingly proprietary format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1029"
  },
  {
    "text": "They have a regular expression written in a prior century ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1032"
  },
  {
    "text": "that matches this just fine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1036"
  },
  {
    "text": "It's fine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1039"
  },
  {
    "text": "Next they have a details field ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1042"
  },
  {
    "text": "which includes individuals and identification codes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1043"
  },
  {
    "text": "They filter transactions against this field ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1046"
  },
  {
    "text": "by using a run-time compiled regex derived from input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1049"
  },
  {
    "text": "Because this is live, and there are more fields later on, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1053"
  },
  {
    "text": "they like to bail early on any uninteresting transactions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1057"
  },
  {
    "text": "Then comes an amount and other fields like checksums, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1061"
  },
  {
    "text": "which they handle just fine on their own. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1064"
  },
  {
    "text": "And of course, fields are still separated by 2-or-more spaces or a tab.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1067"
  },
  {
    "text": "Their transaction matcher looks a lot like ours. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1075"
  },
  {
    "text": "They have their own regex for the timestamp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1078"
  },
  {
    "text": "their details regex is compiled from input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1081"
  },
  {
    "text": "and they handle the rest of the fields. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1084"
  },
  {
    "text": "They did a reasonably good job. Everything technically works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1086"
  },
  {
    "text": "It just isn't scaling well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1090"
  },
  {
    "text": "They notice that their timestamp and details regexes ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1092"
  },
  {
    "text": "often match much more of the input than their fields. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1095"
  },
  {
    "text": "Ideally, these regexes would be constrained ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1099"
  },
  {
    "text": "to only run over a single field. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1102"
  },
  {
    "text": "We handled a similar issue in our project by using negative lookahead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1105"
  },
  {
    "text": "so let's pull that regex in.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1109"
  },
  {
    "text": "'field' will efficiently match any character ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1113"
  },
  {
    "text": "until it encounters a field separator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1116"
  },
  {
    "text": "and we'd like to use it to contain their regexes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1118"
  },
  {
    "text": "We could do this as a post-processing step, but because this is running live, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1123"
  },
  {
    "text": "we want to bail early if these regexes don't match their fields. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1127"
  },
  {
    "text": "We can do this using TryCapture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1132"
  },
  {
    "text": "TryCapture passes the matched field to our closure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1135"
  },
  {
    "text": "where we test against the investigator's timestamp and details regexes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1139"
  },
  {
    "text": "If they match, we return the field's value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1145"
  },
  {
    "text": "meaning that matching succeeded and the field is captured. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1148"
  },
  {
    "text": "Otherwise we return nil, which signals that matching failed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1152"
  },
  {
    "text": "TryCapture's closure actively participates in matching, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1158"
  },
  {
    "text": "which is exactly what we need. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1161"
  },
  {
    "text": "And with this, we've solved a major scaling issue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1164"
  },
  {
    "text": "But there's still one more problem: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1167"
  },
  {
    "text": "when something later on in the transaction matcher fails, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1169"
  },
  {
    "text": "it can take a long time to exit.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1172"
  },
  {
    "text": "Our fieldSeparator regex we defined at the very beginning ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1177"
  },
  {
    "text": "matches 2-or-more whitespaces or a tab, which is what we want. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1181"
  },
  {
    "text": "If there are 8 whitespace characters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1186"
  },
  {
    "text": "it will match all of them before trying the rest of the regex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1188"
  },
  {
    "text": "But if the regex later fails, it will back up ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1193"
  },
  {
    "text": "and only match 7 whitespace characters before trying again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1196"
  },
  {
    "text": "And if that fails, it will match only 6 whitespace characters, and so on.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1200"
  },
  {
    "text": "Only after trying all alternatives does matching fail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1210"
  },
  {
    "text": "This backing up in order to try alternatives is called global backtracking ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1215"
  },
  {
    "text": "or, in formal logics, the Kleene closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1221"
  },
  {
    "text": "It's what gives regular expressions their characteristic power. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1224"
  },
  {
    "text": "But it opens up a broad search space to explore, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1229"
  },
  {
    "text": "and here we want a more linear search space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1232"
  },
  {
    "text": "We want to match all of the whitespace and never give any up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1236"
  },
  {
    "text": "There are a couple tools that we could use; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1240"
  },
  {
    "text": "the more general tool is to put fieldSeparator ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1242"
  },
  {
    "text": "in a local backtracking scope instead of a global one.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1245"
  },
  {
    "text": "The Local builder creates a scope where, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1251"
  },
  {
    "text": "if the contained regex ever successfully matches, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1254"
  },
  {
    "text": "any untried alternatives are discarded.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1257"
  },
  {
    "text": "Even if our transaction matcher fails later on, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1262"
  },
  {
    "text": "we don't go back to try consuming fewer spaces. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1266"
  },
  {
    "text": "Global backtracking, the default for regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1270"
  },
  {
    "text": "is great for search and fuzzy matching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1274"
  },
  {
    "text": "Local is useful for matching precisely specified tokens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1277"
  },
  {
    "text": "The field separator, as vexing as it may be, is precise.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1282"
  },
  {
    "text": "Local is known elsewhere as an atomic non-capturing group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1289"
  },
  {
    "text": "which can be a… frightening name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1293"
  },
  {
    "text": "Makes it seem like your regex might blow up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1296"
  },
  {
    "text": "But it actually does the opposite-- it contains the search space.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1300"
  },
  {
    "text": "And with this, we've helped them solve their scaling issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1306"
  },
  {
    "text": "Today we got to meet Swift Regex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1310"
  },
  {
    "text": "but there's so much more that we weren't able to cover. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1313"
  },
  {
    "text": "Be sure to check out Swift Regex: Beyond the Basics by my colleague Richard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1316"
  },
  {
    "text": "Before we leave, I want to highlight a few points. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1322"
  },
  {
    "text": "Regex builders give structure. Regex literals are concise. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1325"
  },
  {
    "text": "The choice between when to use one over the other ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1331"
  },
  {
    "text": "will ultimately be subjective.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1334"
  },
  {
    "text": "Make sure to use real parsers whenever possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1337"
  },
  {
    "text": "This will save you massive amounts of time and avoid headaches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1341"
  },
  {
    "text": "Just by using Swift's defaults, you're going to get ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1347"
  },
  {
    "text": "far more Unicode support and goodness than anywhere else. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1349"
  },
  {
    "text": "Look for ways to use things like character properties effectively, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1353"
  },
  {
    "text": "such as when we matched the currency symbols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1357"
  },
  {
    "text": "And finally, simplify your search and processing algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1360"
  },
  {
    "text": "by using controls such as lookahead and local backtracking scopes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1364"
  },
  {
    "text": "Thank you for watching.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110357/?time=1369"
  }
]