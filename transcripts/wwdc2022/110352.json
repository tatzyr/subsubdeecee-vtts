[
  {
    "text": "♪ Mellow instrumental hip-hop music ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=0"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=3"
  },
  {
    "text": "Hi everyone, I'm Holly from the Swift Compiler team.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=9"
  },
  {
    "text": "Welcome to \"Embrace Swift generics.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=13"
  },
  {
    "text": "Generics are a fundamental tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=17"
  },
  {
    "text": "for writing abstract code in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=19"
  },
  {
    "text": "which is crucial for managing complexity as your code evolves.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=21"
  },
  {
    "text": "Abstraction separates ideas from specific details.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=26"
  },
  {
    "text": "In code, there are a lot of different ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=31"
  },
  {
    "text": "abstraction is useful.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=34"
  },
  {
    "text": "One form of abstraction that you likely use all the time ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=36"
  },
  {
    "text": "is factoring code out into a function or a local variable.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=40"
  },
  {
    "text": "This can be really useful if you need to use ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=45"
  },
  {
    "text": "the same functionality or value multiple times.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=47"
  },
  {
    "text": "When you extract the functionality into a function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=51"
  },
  {
    "text": "the details are abstracted away, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=55"
  },
  {
    "text": "and the code that uses the abstraction ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=57"
  },
  {
    "text": "can express the idea of what's happening ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=59"
  },
  {
    "text": "without repeating the details.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=61"
  },
  {
    "text": "In Swift, you can also abstract away concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=64"
  },
  {
    "text": "If you have a set of types that are all the same idea ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=69"
  },
  {
    "text": "with different details, you can write abstract code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=72"
  },
  {
    "text": "to work with all of those concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=75"
  },
  {
    "text": "Today, we'll walk through the workflow ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=78"
  },
  {
    "text": "of modeling code with concrete types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=81"
  },
  {
    "text": "identifying common capabilities of a set of concrete types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=84"
  },
  {
    "text": "building an interface to represent those capabilities, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=89"
  },
  {
    "text": "and finally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=92"
  },
  {
    "text": "we'll dive into writing generic code using that interface.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=94"
  },
  {
    "text": "We'll dig into Swift's abstraction tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=98"
  },
  {
    "text": "while building up some code to simulate a farm.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=100"
  },
  {
    "text": "So, let's start by writing some concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=104"
  },
  {
    "text": "We'll start with one struct called \"Cow.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=108"
  },
  {
    "text": "Cow has a method called \"eat,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=110"
  },
  {
    "text": "which accepts a parameter of type Hay.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=112"
  },
  {
    "text": "Hay is another struct.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=116"
  },
  {
    "text": "It has a static method called \"grow\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=118"
  },
  {
    "text": "to grow the crop that produces Hay, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=120"
  },
  {
    "text": "which is Alfalfa.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=122"
  },
  {
    "text": "The Alfalfa struct has a method to harvest Hay ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=125"
  },
  {
    "text": "from an instance of Alfalfa.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=127"
  },
  {
    "text": "Finally, we'll add a struct called \"Farm\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=130"
  },
  {
    "text": "that has a method for feeding a cow.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=133"
  },
  {
    "text": "The feed method can be implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=136"
  },
  {
    "text": "by first growing some alfalfa to produce hay, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=138"
  },
  {
    "text": "then harvesting the hay, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=141"
  },
  {
    "text": "and finally, feeding the hay to the cow.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=143"
  },
  {
    "text": "And now, I can feed cows on my farm.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=146"
  },
  {
    "text": "But I want to add more kinds of animals.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=150"
  },
  {
    "text": "I can add more structs to represent other animals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=154"
  },
  {
    "text": "like Horse and Chicken.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=157"
  },
  {
    "text": "And I want to be able to feed cows, horses, and chickens ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=159"
  },
  {
    "text": "on the farm.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=163"
  },
  {
    "text": "I could overload the feed method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=166"
  },
  {
    "text": "to accept each type of parameter separately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=168"
  },
  {
    "text": "but each overload will have a really similar implementation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=171"
  },
  {
    "text": "This will become extra boilerplate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=176"
  },
  {
    "text": "as I add more types of animals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=179"
  },
  {
    "text": "and it's mostly repeated code anyway.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=181"
  },
  {
    "text": "If you find yourself writing overloads ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=184"
  },
  {
    "text": "with repetitive implementations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=187"
  },
  {
    "text": "it might be a sign to generalize.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=189"
  },
  {
    "text": "Fundamentally, these implementations are so similar ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=191"
  },
  {
    "text": "because different types of animals ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=195"
  },
  {
    "text": "are similar in functionality.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=197"
  },
  {
    "text": "The next step is to identify the common capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=200"
  },
  {
    "text": "between the animal types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=203"
  },
  {
    "text": "We've built a set of animal types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=205"
  },
  {
    "text": "that all have the ability to eat some type of food.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=207"
  },
  {
    "text": "Each type of animal will have a different way of eating, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=211"
  },
  {
    "text": "so each implementation of the eat method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=214"
  },
  {
    "text": "will have differences in behavior.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=216"
  },
  {
    "text": "What we want to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=220"
  },
  {
    "text": "is allow abstract code to call the eat method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=221"
  },
  {
    "text": "and have that abstract code behave differently ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=224"
  },
  {
    "text": "depending on the concrete type it's operating on.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=227"
  },
  {
    "text": "The ability of abstract code to behave differently ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=231"
  },
  {
    "text": "for different concrete types is called \"polymorphism.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=234"
  },
  {
    "text": "Polymorphism allows one piece of code to have many behaviors ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=238"
  },
  {
    "text": "depending on how the code is used.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=243"
  },
  {
    "text": "Appropriately, polymorphism itself comes in different forms.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=247"
  },
  {
    "text": "The first is function overloading, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=252"
  },
  {
    "text": "where the same function call can mean different things ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=254"
  },
  {
    "text": "depending on the argument type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=257"
  },
  {
    "text": "Overloading is called \"ad-hoc polymorphism\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=260"
  },
  {
    "text": "because it isn't really a general solution.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=263"
  },
  {
    "text": "We just saw how overloading can lead to repetitive code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=266"
  },
  {
    "text": "Next is subtype polymorphism, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=270"
  },
  {
    "text": "where code operating on a supertype ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=273"
  },
  {
    "text": "can have different behavior based on the specific subtype ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=275"
  },
  {
    "text": "the code is using at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=278"
  },
  {
    "text": "Finally, we have parametric polymorphism, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=281"
  },
  {
    "text": "which is achieved using generics.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=284"
  },
  {
    "text": "Generic code uses type parameters to allow writing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=287"
  },
  {
    "text": "one piece of code that works with different types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=291"
  },
  {
    "text": "and concrete types themselves are used as arguments.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=294"
  },
  {
    "text": "We've already ruled out overloading, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=298"
  },
  {
    "text": "so let's try to use subtype polymorphism.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=301"
  },
  {
    "text": "One way to represent subtype relationships ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=304"
  },
  {
    "text": "is with a class hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=307"
  },
  {
    "text": "We could introduce a class called \"Animal.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=310"
  },
  {
    "text": "Next, we'd change each animal type from a struct to a class.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=314"
  },
  {
    "text": "Each specific animal class will inherit ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=319"
  },
  {
    "text": "from the Animal superclass, and override the eat method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=322"
  },
  {
    "text": "Now, we have an abstract base-class Animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=327"
  },
  {
    "text": "that can represent all of our specific animal types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=331"
  },
  {
    "text": "Code that calls eat on the Animal class ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=335"
  },
  {
    "text": "will use subtype polymorphism ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=338"
  },
  {
    "text": "to call the subclass implementation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=340"
  },
  {
    "text": "But we're not done.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=343"
  },
  {
    "text": "We still haven't filled in a parameter type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=344"
  },
  {
    "text": "for the eat method on Animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=347"
  },
  {
    "text": "and there are a few other red flags in this code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=349"
  },
  {
    "text": "First, using classes forced us into reference semantics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=352"
  },
  {
    "text": "even though we don't need or want any state to be shared ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=357"
  },
  {
    "text": "between different animal instances.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=360"
  },
  {
    "text": "This strategy also requires subclasses ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=364"
  },
  {
    "text": "to override methods in the base class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=366"
  },
  {
    "text": "but forgetting to do this wouldn't be caught ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=369"
  },
  {
    "text": "until runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=371"
  },
  {
    "text": "But the bigger problem with this model of abstraction ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=373"
  },
  {
    "text": "is that each animal subtype eats a different type of food, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=376"
  },
  {
    "text": "and this dependency is really difficult to express ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=380"
  },
  {
    "text": "with a class hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=383"
  },
  {
    "text": "One approach we could take is to have the method accept ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=386"
  },
  {
    "text": "a less specific type, such as Any.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=389"
  },
  {
    "text": "But this strategy relies on subclass implementations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=393"
  },
  {
    "text": "to make sure the correct type was passed at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=396"
  },
  {
    "text": "So, we've imposed extra boilerplate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=400"
  },
  {
    "text": "in each overridden method, but more importantly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=402"
  },
  {
    "text": "it allows you to accidentally pass the wrong type of food, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=405"
  },
  {
    "text": "leaving you with another bug ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=409"
  },
  {
    "text": "that could only be caught at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=411"
  },
  {
    "text": "So, let's try something else.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=413"
  },
  {
    "text": "We could instead express the animal's feed type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=416"
  },
  {
    "text": "in a type-safe way ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=419"
  },
  {
    "text": "by introducing a type parameter on the Animal superclass.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=421"
  },
  {
    "text": "This type parameter serves as a placeholder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=426"
  },
  {
    "text": "for the specific feed type for each subclass.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=429"
  },
  {
    "text": "With this approach, the Food type parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=433"
  },
  {
    "text": "must be elevated to the declaration of the Animal class.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=435"
  },
  {
    "text": "This seems a little unnatural ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=440"
  },
  {
    "text": "because though animals need food to operate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=442"
  },
  {
    "text": "eating food isn't the core purpose of an animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=445"
  },
  {
    "text": "and a lot of code that works with animals ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=448"
  },
  {
    "text": "probably won't care about food at all.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=450"
  },
  {
    "text": "Despite that, all references to the Animal class ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=453"
  },
  {
    "text": "need to specify the food type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=456"
  },
  {
    "text": "For example, each Animal subclass ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=459"
  },
  {
    "text": "needs to explicitly specify its food type in angle brackets ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=461"
  },
  {
    "text": "in the inheritance clause.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=465"
  },
  {
    "text": "This boilerplate at each use site of the Animal class ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=468"
  },
  {
    "text": "could become onerous if we added more types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=472"
  },
  {
    "text": "that are specific to each animal.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=475"
  },
  {
    "text": "So, none of our approaches here ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=478"
  },
  {
    "text": "have good ergonomics or the right semantics.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=479"
  },
  {
    "text": "The fundamental problem is that a class is a data type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=484"
  },
  {
    "text": "and we're trying to convolute a superclass ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=488"
  },
  {
    "text": "to make it represent abstract ideas about concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=490"
  },
  {
    "text": "Instead, we want a language construct ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=495"
  },
  {
    "text": "that was designed to represent capabilities of types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=498"
  },
  {
    "text": "without the details of how the capability works.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=502"
  },
  {
    "text": "Animals have two common capabilities.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=506"
  },
  {
    "text": "Each animal has a specific type of food, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=509"
  },
  {
    "text": "along with an operation for consuming some of that food.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=512"
  },
  {
    "text": "We can build an interface that represents those capabilities.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=516"
  },
  {
    "text": "In Swift, this is done using a protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=521"
  },
  {
    "text": "A protocol is an abstraction tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=524"
  },
  {
    "text": "that describes the functionality of conforming types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=527"
  },
  {
    "text": "Using a protocol, you can separate the ideas ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=532"
  },
  {
    "text": "about what a type does from the implementation details.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=535"
  },
  {
    "text": "The ideas about what a type does ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=539"
  },
  {
    "text": "are expressed through an interface.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=541"
  },
  {
    "text": "Let's translate the capabilities of an animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=544"
  },
  {
    "text": "to a protocol interface.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=547"
  },
  {
    "text": "The name of the protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=550"
  },
  {
    "text": "represents the category of types we're describing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=551"
  },
  {
    "text": "so I called this protocol \"Animal.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=554"
  },
  {
    "text": "Each capability will map to a protocol requirement.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=557"
  },
  {
    "text": "The specific type of food will map ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=561"
  },
  {
    "text": "to an associated type of the Animal protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=563"
  },
  {
    "text": "Just like a type parameter, an associated type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=568"
  },
  {
    "text": "serves as a placeholder for a concrete type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=570"
  },
  {
    "text": "What makes associated types special ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=574"
  },
  {
    "text": "is that they depend on the specific type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=576"
  },
  {
    "text": "that conforms to the protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=578"
  },
  {
    "text": "This relationship is guaranteed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=580"
  },
  {
    "text": "so each instance of a specific type of animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=583"
  },
  {
    "text": "always has the same type of food.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=586"
  },
  {
    "text": "Next, the operation to consume food will map to a method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=589"
  },
  {
    "text": "This method is called \"eat,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=595"
  },
  {
    "text": "and it accepts a parameter of the animal's feed type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=596"
  },
  {
    "text": "The protocol does not have an implementation of this method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=600"
  },
  {
    "text": "and concrete animal types are required to implement it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=603"
  },
  {
    "text": "Now that we have the Animal protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=608"
  },
  {
    "text": "we can make each concrete animal type conform to it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=610"
  },
  {
    "text": "You can annotate a concrete type with a protocol conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=614"
  },
  {
    "text": "at the declaration or in an extension.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=618"
  },
  {
    "text": "Protocols are not limited to classes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=622"
  },
  {
    "text": "so we can use protocols with structs, enums, and actors, too.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=624"
  },
  {
    "text": "Once you write this conformance annotation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=629"
  },
  {
    "text": "the compiler will check that the concrete type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=631"
  },
  {
    "text": "implements each of the protocol requirements.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=634"
  },
  {
    "text": "Each animal type must implement the eat method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=638"
  },
  {
    "text": "and the compiler can infer what the feed type is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=642"
  },
  {
    "text": "because it's used in the parameter list.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=645"
  },
  {
    "text": "The feed type can also be written explicitly ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=648"
  },
  {
    "text": "using a type alias.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=651"
  },
  {
    "text": "We've successfully identified the common capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=654"
  },
  {
    "text": "of an animal and expressed those capabilities, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=656"
  },
  {
    "text": "using a protocol interface.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=659"
  },
  {
    "text": "Now, we can start to write generic code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=662"
  },
  {
    "text": "We can use the Animal protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=666"
  },
  {
    "text": "to implement the feed method on Farm.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=668"
  },
  {
    "text": "We want to write one implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=670"
  },
  {
    "text": "that works for all concrete animal types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=672"
  },
  {
    "text": "We'll use parametric polymorphism ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=675"
  },
  {
    "text": "and introduce a type parameter that will be replaced ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=678"
  },
  {
    "text": "with a concrete type when the method is called.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=681"
  },
  {
    "text": "A type parameter is written after the function name ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=685"
  },
  {
    "text": "in angle brackets.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=688"
  },
  {
    "text": "Just like regular variables and function parameters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=690"
  },
  {
    "text": "you can name a type parameter whatever you like.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=693"
  },
  {
    "text": "And just like any other type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=697"
  },
  {
    "text": "you can reference the type parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=699"
  },
  {
    "text": "throughout the function signature, using its name.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=700"
  },
  {
    "text": "Here, I declared a type parameter called “A”, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=704"
  },
  {
    "text": "and I used A as the type of the animal function parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=707"
  },
  {
    "text": "We always want the concrete animal type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=711"
  },
  {
    "text": "to conform to the Animal protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=713"
  },
  {
    "text": "so we annotate the type parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=716"
  },
  {
    "text": "with a protocol conformance.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=718"
  },
  {
    "text": "Protocol conformances can be written in angle brackets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=720"
  },
  {
    "text": "or they can be written in a trailing \"where\" clause, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=724"
  },
  {
    "text": "where you can also specify relationships ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=727"
  },
  {
    "text": "between different type parameters.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=729"
  },
  {
    "text": "Named type parameters and trailing \"where\" clauses ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=733"
  },
  {
    "text": "are really powerful, because they allow you to write ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=735"
  },
  {
    "text": "sophisticated requirements and type relationships.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=738"
  },
  {
    "text": "But most generic functions don't need this generality.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=742"
  },
  {
    "text": "Let's focus on the feed method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=746"
  },
  {
    "text": "The type parameter A appears once in the parameter list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=749"
  },
  {
    "text": "and the \"where\" clause lists a conformance requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=754"
  },
  {
    "text": "on the type parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=757"
  },
  {
    "text": "In this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=759"
  },
  {
    "text": "naming the type parameter and using the \"where\" clause ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=760"
  },
  {
    "text": "make the method look more complicated than it really is.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=763"
  },
  {
    "text": "This generic pattern is really common, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=766"
  },
  {
    "text": "so there's a simpler way to express it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=769"
  },
  {
    "text": "Instead of writing a type parameter explicitly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=772"
  },
  {
    "text": "we can express this abstract type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=775"
  },
  {
    "text": "in terms of the protocol conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=778"
  },
  {
    "text": "by writing \"some Animal”.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=780"
  },
  {
    "text": "This declaration is identical to the previous one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=783"
  },
  {
    "text": "but the unnecessary type parameter list ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=786"
  },
  {
    "text": "and \"where\" clause are gone, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=789"
  },
  {
    "text": "because we didn't need the expressiveness they provide.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=791"
  },
  {
    "text": "Writing \"some Animal\" is more straightforward, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=794"
  },
  {
    "text": "because it reduces syntactic noise, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=797"
  },
  {
    "text": "and it includes the semantic information ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=799"
  },
  {
    "text": "about the animal parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=801"
  },
  {
    "text": "right in the parameter declaration.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=803"
  },
  {
    "text": "Let's break down the some Animal syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=807"
  },
  {
    "text": "The \"some\" in \"some Animal\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=810"
  },
  {
    "text": "indicates that there is a specific type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=812"
  },
  {
    "text": "that you're working with.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=814"
  },
  {
    "text": "The \"some\" keyword is always followed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=817"
  },
  {
    "text": "by a conformance requirement.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=819"
  },
  {
    "text": "In this case, the specific type must conform ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=822"
  },
  {
    "text": "to the Animal protocol, which will allow us ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=825"
  },
  {
    "text": "to use requirements from the Animal protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=827"
  },
  {
    "text": "on the parameter value.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=830"
  },
  {
    "text": "The \"some\" keyword can be used in parameter and result types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=832"
  },
  {
    "text": "If you've written SwiftUI code before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=836"
  },
  {
    "text": "you've already used \"some\" in result position ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=839"
  },
  {
    "text": "using \"some View.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=841"
  },
  {
    "text": "A result type of \"some View\" is exactly the same concept.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=845"
  },
  {
    "text": "In a SwiftUI view, the body property ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=850"
  },
  {
    "text": "returns some specific type of view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=853"
  },
  {
    "text": "but code that uses the body property ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=855"
  },
  {
    "text": "doesn't need to know what the specific type is.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=858"
  },
  {
    "text": "Let's take a step back to better understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=861"
  },
  {
    "text": "the concept of a specific abstract type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=864"
  },
  {
    "text": "An abstract type that represents a placeholder ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=868"
  },
  {
    "text": "for a specific concrete type is called an opaque type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=871"
  },
  {
    "text": "The specific concrete type that is substituted in ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=876"
  },
  {
    "text": "is called the underlying type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=879"
  },
  {
    "text": "For values with opaque type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=882"
  },
  {
    "text": "the underlying type is fixed for the scope of the value.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=884"
  },
  {
    "text": "This way, generic code using the value is guaranteed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=888"
  },
  {
    "text": "to get the same underlying type each time the value is accessed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=892"
  },
  {
    "text": "A type using the \"some\" keyword and a named type parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=897"
  },
  {
    "text": "in angle brackets both declare an opaque type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=901"
  },
  {
    "text": "Opaque types can be used for both inputs and outputs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=905"
  },
  {
    "text": "so they can be declared in parameter position ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=909"
  },
  {
    "text": "or in result position.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=911"
  },
  {
    "text": "The function arrow is the dividing line ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=915"
  },
  {
    "text": "between these positions.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=917"
  },
  {
    "text": "The position of an opaque type determines ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=919"
  },
  {
    "text": "which part of the program sees the abstract type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=922"
  },
  {
    "text": "and which part of the program determines the concrete type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=925"
  },
  {
    "text": "Named type parameters are always declared on the input side, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=930"
  },
  {
    "text": "so the caller decides the underlying type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=934"
  },
  {
    "text": "and the implementation uses the abstract type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=936"
  },
  {
    "text": "In general, the part of the program supplying the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=941"
  },
  {
    "text": "for an opaque parameter or result type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=944"
  },
  {
    "text": "decides the underlying type, and the part of the program ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=947"
  },
  {
    "text": "using the value sees the abstract type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=950"
  },
  {
    "text": "Let's dig into how this works, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=953"
  },
  {
    "text": "following our intuition about parameter and result values.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=956"
  },
  {
    "text": "Because the underlying type is inferred from a value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=960"
  },
  {
    "text": "the underlying type always comes from the same place ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=964"
  },
  {
    "text": "as the value.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=967"
  },
  {
    "text": "For a local variable, the underlying type is inferred ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=969"
  },
  {
    "text": "from the value on the right-hand side of assignment.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=972"
  },
  {
    "text": "This means local variables with opaque type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=976"
  },
  {
    "text": "must always have an initial value; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=979"
  },
  {
    "text": "and if you don't provide one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=982"
  },
  {
    "text": "the compiler will report an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=983"
  },
  {
    "text": "The underlying type must be fixed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=987"
  },
  {
    "text": "for the scope of the variable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=989"
  },
  {
    "text": "so attempting to change the underlying type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=991"
  },
  {
    "text": "will also result in an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=993"
  },
  {
    "text": "For parameters with opaque type, the underlying type is inferred ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=997"
  },
  {
    "text": "from the argument value at the call site.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1000"
  },
  {
    "text": "Using \"some\" in parameter position is new in Swift 5.7.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1004"
  },
  {
    "text": "The underlying type only needs to be fixed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1010"
  },
  {
    "text": "for the scope of the parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1012"
  },
  {
    "text": "so each call can provide a different argument type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1014"
  },
  {
    "text": "For an opaque result type, the underlying type is inferred ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1018"
  },
  {
    "text": "from the return value in the implementation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1021"
  },
  {
    "text": "A method or computed property with an opaque result type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1025"
  },
  {
    "text": "can be called from anywhere in the program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1028"
  },
  {
    "text": "so the scope of this named value is global.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1031"
  },
  {
    "text": "This means the underlying return type has to be the same ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1035"
  },
  {
    "text": "across all return statements; ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1038"
  },
  {
    "text": "and if it isn't, the compiler will report an error ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1040"
  },
  {
    "text": "that the underlying return values have mismatched types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1044"
  },
  {
    "text": "For an opaque SwiftUI view, the ViewBuilder DSL ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1048"
  },
  {
    "text": "can transform control-flow statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1051"
  },
  {
    "text": "to have the same underlying return type for each branch.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1054"
  },
  {
    "text": "So in this case, we can fix the issue ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1058"
  },
  {
    "text": "by using the ViewBuilder DSL.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1060"
  },
  {
    "text": "Writing an @ViewBuilder annotation on the method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1063"
  },
  {
    "text": "and removing return statements will enable the result ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1066"
  },
  {
    "text": "to be built for us by the ViewBuilder type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1069"
  },
  {
    "text": "Let's go back to the feedAnimal method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1073"
  },
  {
    "text": "I can use \"some\" in the parameter list ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1076"
  },
  {
    "text": "because I don't need to reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1078"
  },
  {
    "text": "the opaque type anywhere else.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1080"
  },
  {
    "text": "When you need to refer to the opaque type multiple times ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1082"
  },
  {
    "text": "in the function signature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1086"
  },
  {
    "text": "that's when a name type parameter comes in handy.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1087"
  },
  {
    "text": "For example, if we add another associated type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1091"
  },
  {
    "text": "to the animal protocol called \"Habitat,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1094"
  },
  {
    "text": "we might want to be able to build a habitat ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1098"
  },
  {
    "text": "on the farm for a given animal.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1100"
  },
  {
    "text": "In this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1103"
  },
  {
    "text": "the result type depends on the specific animal type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1105"
  },
  {
    "text": "so we need to use the type parameter A ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1108"
  },
  {
    "text": "in the parameter type and the return type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1110"
  },
  {
    "text": "Another common place where you need to refer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1114"
  },
  {
    "text": "to an opaque type multiple times is in generic types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1116"
  },
  {
    "text": "Code often declares a type parameter on a generic type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1121"
  },
  {
    "text": "uses the type parameter for a stored property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1126"
  },
  {
    "text": "and again in a memberwise initializer.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1128"
  },
  {
    "text": "Referencing a generic type in a different context ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1132"
  },
  {
    "text": "also requires you to explicitly specify the type parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1135"
  },
  {
    "text": "in angle brackets.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1139"
  },
  {
    "text": "The angle brackets at the declaration ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1141"
  },
  {
    "text": "can help clarify how to use a generic type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1143"
  },
  {
    "text": "so opaque types must always be named for generic types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1147"
  },
  {
    "text": "Now, let's build out the implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1152"
  },
  {
    "text": "of the feed method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1154"
  },
  {
    "text": "We can use the type of the animal parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1155"
  },
  {
    "text": "to access the crop type to grow ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1158"
  },
  {
    "text": "through the Feed-associated type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1160"
  },
  {
    "text": "We'll call Feed.grow() to get an instance of the crop ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1163"
  },
  {
    "text": "that produces this type of feed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1166"
  },
  {
    "text": "Next, we need to harvest the produce from the crop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1168"
  },
  {
    "text": "which we can do by calling a method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1171"
  },
  {
    "text": "provided by the crop type called \"harvest.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1173"
  },
  {
    "text": "And finally, we can feed this produce to the animal.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1176"
  },
  {
    "text": "Because the underlying animal type is fixed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1179"
  },
  {
    "text": "the compiler knows the relationship ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1182"
  },
  {
    "text": "between the plant type, the produce type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1185"
  },
  {
    "text": "and the animal type across the various method calls.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1187"
  },
  {
    "text": "These static relationships prevent us from making ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1190"
  },
  {
    "text": "the mistake of feeding the animal the wrong type of food.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1193"
  },
  {
    "text": "If we attempt to use a type that is not guaranteed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1198"
  },
  {
    "text": "to be the correct food type for this animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1201"
  },
  {
    "text": "the compiler will tell us.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1204"
  },
  {
    "text": "To learn how the other farm protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1207"
  },
  {
    "text": "were crafted to express the relationship ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1209"
  },
  {
    "text": "between the animal-feed type and its plant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1212"
  },
  {
    "text": "check out \"Design protocol interfaces in Swift.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1215"
  },
  {
    "text": "Lastly, let's add a method for feeding all the animals.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1218"
  },
  {
    "text": "I'll add a method called feedAll that accepts an array.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1223"
  },
  {
    "text": "I know the element type needs to conform ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1226"
  },
  {
    "text": "to the Animal protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1229"
  },
  {
    "text": "but I want the array to be able to store ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1230"
  },
  {
    "text": "different types of animals.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1232"
  },
  {
    "text": "Let's see if some Animal can help us here.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1235"
  },
  {
    "text": "With \"some\" there is a specific underlying type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1239"
  },
  {
    "text": "that cannot vary.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1242"
  },
  {
    "text": "Because the underlying type is fixed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1244"
  },
  {
    "text": "all of the elements in the array need to have the same type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1247"
  },
  {
    "text": "So, an array of some Animal doesn't express the right thing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1251"
  },
  {
    "text": "because I want an array that can hold different animal types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1255"
  },
  {
    "text": "Here, we really need a supertype ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1259"
  },
  {
    "text": "that can represent any type of animal.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1261"
  },
  {
    "text": "We can express an arbitrary type of animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1264"
  },
  {
    "text": "by writing \"any Animal.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1267"
  },
  {
    "text": "The \"any\" keyword indicates that this type can store ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1271"
  },
  {
    "text": "any arbitrary type of animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1274"
  },
  {
    "text": "and the underlying type of animal can vary at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1276"
  },
  {
    "text": "Just like with the \"some\" keyword, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1281"
  },
  {
    "text": "the \"any\" keyword is always followed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1283"
  },
  {
    "text": "by a conformance requirement.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1285"
  },
  {
    "text": "any Animal is a single static type that has the capability ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1288"
  },
  {
    "text": "to store any concrete animal type dynamically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1292"
  },
  {
    "text": "which allows us to use subtype polymorphism ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1295"
  },
  {
    "text": "with value types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1298"
  },
  {
    "text": "To allow for this flexible storage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1300"
  },
  {
    "text": "the any Animal type has a special representation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1303"
  },
  {
    "text": "in memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1306"
  },
  {
    "text": "You can think of this representation like a box.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1308"
  },
  {
    "text": "Sometimes, a value is small enough ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1312"
  },
  {
    "text": "to fit inside the box directly.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1314"
  },
  {
    "text": "And other values are too large for the box, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1317"
  },
  {
    "text": "so the value has to be allocated elsewhere, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1320"
  },
  {
    "text": "and the box stores a pointer to that value.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1323"
  },
  {
    "text": "The static type any Animal that can dynamically store ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1326"
  },
  {
    "text": "any concrete animal type is formally called ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1330"
  },
  {
    "text": "an existential type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1333"
  },
  {
    "text": "And the strategy of using the same representation ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1336"
  },
  {
    "text": "for different concrete types is called \"type erasure.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1339"
  },
  {
    "text": "The concrete type is said to be erased at compile time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1343"
  },
  {
    "text": "and the concrete type is only known at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1347"
  },
  {
    "text": "These two instances of the existential type any Animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1350"
  },
  {
    "text": "have the same static type, but different dynamic types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1354"
  },
  {
    "text": "Type erasure eliminates the type-level distinction ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1358"
  },
  {
    "text": "between different animal values, which allows us to use values ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1362"
  },
  {
    "text": "with different dynamic types interchangeably ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1366"
  },
  {
    "text": "as the same static type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1369"
  },
  {
    "text": "We can use type erasure to write a heterogeneous array ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1371"
  },
  {
    "text": "of value types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1374"
  },
  {
    "text": "which is exactly what we want for the feedAll method.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1376"
  },
  {
    "text": "So we'll use an array of any Animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1380"
  },
  {
    "text": "as the parameter type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1382"
  },
  {
    "text": "Using the \"any\" keyword for protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1384"
  },
  {
    "text": "with associated types is new in Swift 5.7.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1386"
  },
  {
    "text": "To implement the feedAll method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1391"
  },
  {
    "text": "we'll first iterate over the animal's array.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1393"
  },
  {
    "text": "For each animal, we want to call the eat method ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1397"
  },
  {
    "text": "from the Animal protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1399"
  },
  {
    "text": "To call this method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1402"
  },
  {
    "text": "we need to get the specific feed type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1403"
  },
  {
    "text": "for the underlying animal at this iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1405"
  },
  {
    "text": "But as soon as we try to call eat on any Animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1409"
  },
  {
    "text": "we'll get a compiler error.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1412"
  },
  {
    "text": "Because we've eliminated the type-level distinction ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1415"
  },
  {
    "text": "between specific animal types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1418"
  },
  {
    "text": "we've also eliminated all type relationships ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1420"
  },
  {
    "text": "that depend on the specific animal type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1423"
  },
  {
    "text": "including associated types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1426"
  },
  {
    "text": "So, we can't know what type of feed this animal expects.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1428"
  },
  {
    "text": "To rely on type relationships, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1433"
  },
  {
    "text": "we need to get back into a context ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1435"
  },
  {
    "text": "where the specific type of animal is fixed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1437"
  },
  {
    "text": "Instead of calling eat directly on any Animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1440"
  },
  {
    "text": "we need to call the feed method that accepts some Animal.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1443"
  },
  {
    "text": "Now, any Animal is a different type from some Animal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1448"
  },
  {
    "text": "but the compiler can convert an instance of any Animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1452"
  },
  {
    "text": "to some Animal by unboxing the underlying value ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1455"
  },
  {
    "text": "and passing it directly to the some Animal parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1459"
  },
  {
    "text": "This capability of unboxing arguments is new in Swift 5.7.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1464"
  },
  {
    "text": "You can think of unboxing as the compiler opening the box ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1470"
  },
  {
    "text": "and taking out the value stored inside.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1474"
  },
  {
    "text": "For the scope of the some Animal parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1477"
  },
  {
    "text": "the value has a fixed underlying type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1480"
  },
  {
    "text": "so we have access to all of the operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1483"
  },
  {
    "text": "on the underlying type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1485"
  },
  {
    "text": "including access to associated types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1487"
  },
  {
    "text": "This is really cool because it allows us to opt ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1491"
  },
  {
    "text": "for flexible storage when we need it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1494"
  },
  {
    "text": "while still allowing us to get back to a context ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1496"
  },
  {
    "text": "where we have the full expressivity ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1499"
  },
  {
    "text": "of the static type system by fixing the underlying type ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1501"
  },
  {
    "text": "for the scope of a function.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1504"
  },
  {
    "text": "And most of the time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1507"
  },
  {
    "text": "you don't have to think about the unboxing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1508"
  },
  {
    "text": "because it just works in the way you'd expect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1510"
  },
  {
    "text": "similar to how calling a protocol method on any Animal ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1513"
  },
  {
    "text": "really calls the method on the underlying type.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1516"
  },
  {
    "text": "So, we can pass each animal to the feed method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1520"
  },
  {
    "text": "where we can grow and harvest the appropriate crop ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1523"
  },
  {
    "text": "to feed to the specific animal at each iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1526"
  },
  {
    "text": "Throughout this process, we've seen that \"some\" and \"any\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1531"
  },
  {
    "text": "have different capabilities.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1534"
  },
  {
    "text": "With \"some,\" the underlying type is fixed.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1538"
  },
  {
    "text": "This allows you to rely on type relationships ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1542"
  },
  {
    "text": "to the underlying type in your generic code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1544"
  },
  {
    "text": "so you'll have full access to the API and associated types ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1547"
  },
  {
    "text": "on the protocol you're working with.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1551"
  },
  {
    "text": "Use \"any\" when you need to store arbitrary concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1554"
  },
  {
    "text": "\"any\" provides type erasure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1559"
  },
  {
    "text": "which allows you represent heterogeneous collections, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1561"
  },
  {
    "text": "represent the absence of an underlying type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1564"
  },
  {
    "text": "using optionals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1567"
  },
  {
    "text": "and make the abstraction an implementation detail.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1568"
  },
  {
    "text": "In general, write \"some\" by default, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1572"
  },
  {
    "text": "and change \"some\" to \"any\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1575"
  },
  {
    "text": "when you know you need to store arbitrary values.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1577"
  },
  {
    "text": "With this approach, you'll only pay the cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1580"
  },
  {
    "text": "of type erasure and its semantic limitations ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1583"
  },
  {
    "text": "when you need the storage flexibility it provides.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1586"
  },
  {
    "text": "This workflow is similar to writing let-constants ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1590"
  },
  {
    "text": "by default, until you know you need mutation.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1592"
  },
  {
    "text": "In this session, we walked through ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1596"
  },
  {
    "text": "the workflow of generalizing code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1598"
  },
  {
    "text": "as it evolves and gains more functionality.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1600"
  },
  {
    "text": "We started by writing concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1604"
  },
  {
    "text": "As the code gained more functionality, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1607"
  },
  {
    "text": "we noticed repetition between different concrete types.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1609"
  },
  {
    "text": "From there, we identified common capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1614"
  },
  {
    "text": "and generalized them using a protocol.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1617"
  },
  {
    "text": "Finally, we wrote abstract code using \"some\" and \"any”, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1620"
  },
  {
    "text": "and we discussed preferring \"some\" for more expressive code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1625"
  },
  {
    "text": "To dig deeper into crafting protocols ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1629"
  },
  {
    "text": "and understanding type erasure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1632"
  },
  {
    "text": "check out \"Design protocol interfaces in Swift.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1634"
  },
  {
    "text": "Thank you joining me and have a great WWDC.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1638"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110352/?time=1641"
  }
]