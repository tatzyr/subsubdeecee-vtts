[
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=0"
  },
  {
    "text": "Hello, everyone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=9"
  },
  {
    "text": "My name is Adrian, and I'll be talking to you about how to set up your project ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=11"
  },
  {
    "text": "for a great debugging experience with LLDB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=15"
  },
  {
    "text": "LLDB is the underlying debugging technology that ships with Xcode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=19"
  },
  {
    "text": "LLDB allows you to set breakpoints in your application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=23"
  },
  {
    "text": "pause its execution, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=27"
  },
  {
    "text": "inspect the state of variables and objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=29"
  },
  {
    "text": "explore your code, and much more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=32"
  },
  {
    "text": "LLDB can help you understand what your code is doing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=35"
  },
  {
    "text": "and it enables you to find the point where the behavior of your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=39"
  },
  {
    "text": "diverges from your expectation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=43"
  },
  {
    "text": "It's a powerful tool for understanding and exploring code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=46"
  },
  {
    "text": "If you want to learn more about LLDB, please check out earlier videos, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=51"
  },
  {
    "text": "for example \"Discover breakpoint improvements\" from WWDC21. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=54"
  },
  {
    "text": "Today we are going to look at some advanced workflows ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=59"
  },
  {
    "text": "that have unique implications on debugging Swift code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=62"
  },
  {
    "text": "Maybe you are integrating a third-party framework into your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=66"
  },
  {
    "text": "Maybe your app and your team has grown to the point ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=70"
  },
  {
    "text": "where most of your code is being built by a continuous integration system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=73"
  },
  {
    "text": "Maybe you are using a custom build system to integrate ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=78"
  },
  {
    "text": "with your company's infrastructure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=80"
  },
  {
    "text": "Maybe you are building software for other software developers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=83"
  },
  {
    "text": "Or you just want to learn more about LLDB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=88"
  },
  {
    "text": "My goal is to provide a better understanding of how LLDB works, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=90"
  },
  {
    "text": "and what information it needs from the build system in order to function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=95"
  },
  {
    "text": "I have a little project here that we are going to use as our running example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=100"
  },
  {
    "text": "I'm a compiler engineer, and I like games, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=104"
  },
  {
    "text": "so in my spare time I write parsers for text adventures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=107"
  },
  {
    "text": "This one I recently started in pure Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=110"
  },
  {
    "text": "Let me show you what I've got so far. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=114"
  },
  {
    "text": "The game uses a text interface so I'm running it in Terminal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=116"
  },
  {
    "text": "As in every good adventure, we'll start by checking our inventory.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=120"
  },
  {
    "text": "This game takes place in a contemporary setting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=127"
  },
  {
    "text": "I see that I have an iPhone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=130"
  },
  {
    "text": "Next, let's have a look at our surroundings.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=132"
  },
  {
    "text": "Hmm, this sensor looks intriguing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=137"
  },
  {
    "text": "Maybe we can use the iPhone on the sensor? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=141"
  },
  {
    "text": "I dropped the iPhone? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=150"
  },
  {
    "text": "Uh, that's not what I wanted to show you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=152"
  },
  {
    "text": "I think that my game has a bug. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=155"
  },
  {
    "text": "Good thing this is a debugger talk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=159"
  },
  {
    "text": "Let's set a breakpoint in the parser and run our command again.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=161"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=171"
  },
  {
    "text": "We should first verify that the command was read correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=179"
  },
  {
    "text": "The \"words\" variable contains the tokenized command.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=183"
  },
  {
    "text": "Ah, this did not go as expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=191"
  },
  {
    "text": "I don't know what's going on here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=195"
  },
  {
    "text": "Yesterday I was using the debugger with no problems, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=197"
  },
  {
    "text": "and then last night I integrated this UI framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=199"
  },
  {
    "text": "for styling text on the terminal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=202"
  },
  {
    "text": "The developers of that framework have a continuous integration system ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=205"
  },
  {
    "text": "that cranks out nightly builds of the framework, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=208"
  },
  {
    "text": "and I'm linking directly against the latest one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=211"
  },
  {
    "text": "I wonder if this framework has something to do with my debugging troubles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=214"
  },
  {
    "text": "Case in point, I already noticed ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=219"
  },
  {
    "text": "that I can't step into the framework's source code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=221"
  },
  {
    "text": "even though I explicitly downloaded the debug build. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=224"
  },
  {
    "text": "Look at that.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=227"
  },
  {
    "text": "I only see disassembly.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=231"
  },
  {
    "text": "Let's try to understand what happened there, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=234"
  },
  {
    "text": "and let's start by figuring out why I couldn't see any source code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=236"
  },
  {
    "text": "What does LLDB need in order to show source code? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=241"
  },
  {
    "text": "When the compiler compiles a function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=245"
  },
  {
    "text": "it generates machine code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=249"
  },
  {
    "text": "And it leaves breadcrumbs for the debugger ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=255"
  },
  {
    "text": "so an address in the executable can be mapped to a source file ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=258"
  },
  {
    "text": "and line number and vice versa. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=262"
  },
  {
    "text": "These breadcrumbs are called debug info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=264"
  },
  {
    "text": "On Apple platforms debug info is stored in object files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=268"
  },
  {
    "text": "For archiving and distribution, debug info can be linked into .dSYM bundles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=273"
  },
  {
    "text": "The debug info linker is called dsymutil. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=279"
  },
  {
    "text": "LLDB uses Spotlight to locate .dSYM bundles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=283"
  },
  {
    "text": "so it's quite flexible in terms of where on disk they are. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=286"
  },
  {
    "text": "Now that we know how debug info works, let's get back to the example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=290"
  },
  {
    "text": "First, let's verify that LLDB has actually found the dSYM for the framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=295"
  },
  {
    "text": "We can do this with the image list command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=301"
  },
  {
    "text": "The UI framework is called \"TerminalInterface\".",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=304"
  },
  {
    "text": "Yes, LLDB did find the dSYM for the framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=315"
  },
  {
    "text": "That means it has access to the debug info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=319"
  },
  {
    "text": "We can use \"image lookup\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=322"
  },
  {
    "text": "to get more info about the current address.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=326"
  },
  {
    "text": "By the way, if you want to learn more about the various options, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=330"
  },
  {
    "text": "LLDB has an excellent built-in help.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=334"
  },
  {
    "text": "Ah, I think I see why there is no source code: ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=337"
  },
  {
    "text": "This source path here points to where the sources were on the build server, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=341"
  },
  {
    "text": "not to where they are on my local machine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=345"
  },
  {
    "text": "We can fix that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=348"
  },
  {
    "text": "LLDB has a built-in source map that we can use to redirect these paths.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=349"
  },
  {
    "text": "We could type in the command right now, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=364"
  },
  {
    "text": "but I'd rather make this change more permanent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=366"
  },
  {
    "text": "In the Scheme editor, which you can bring up by going to Product, Scheme, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=369"
  },
  {
    "text": "Edit scheme, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=374"
  },
  {
    "text": "or by just option-clicking onto the play button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=378"
  },
  {
    "text": "you can define a per-project LLDB init file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=381"
  },
  {
    "text": "I already added one for this project.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=385"
  },
  {
    "text": "Now that we set up LLDB, let's run our project again.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=398"
  },
  {
    "text": "And we have source code.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=412"
  },
  {
    "text": "LLDB can remap source paths using \"settings set target.source-map\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=418"
  },
  {
    "text": "You can put this command into your project's .lldbinit file ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=424"
  },
  {
    "text": "to have this run automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=428"
  },
  {
    "text": "Alternatively, each .dSYM bundle contains a XML .plist file ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=430"
  },
  {
    "text": "where you can put a path prefix remapping dictionary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=435"
  },
  {
    "text": "If you have a download script that fetches the latest builds from a server, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=438"
  },
  {
    "text": "you could modify that script to automatically inject ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=442"
  },
  {
    "text": "the appropriate remapping dictionary into the downloaded .dSYM. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=445"
  },
  {
    "text": "You can learn more about this process on the LLDB website.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=449"
  },
  {
    "text": "Source paths are not language-specific at all, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=455"
  },
  {
    "text": "so this method works for Swift, C++, and Objective-C projects alike. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=458"
  },
  {
    "text": "To learn more about symbols on Apple platforms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=464"
  },
  {
    "text": "check out \"Symbolication: Beyond the basics\" from WWDC21. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=466"
  },
  {
    "text": "When source code is compiled on a build server farm, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=472"
  },
  {
    "text": "the remote paths to source files could be different from machine to machine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=475"
  },
  {
    "text": "To avoid having to define one remap prefix per machine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=480"
  },
  {
    "text": "we can instruct the compiler to canonicalize source paths ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=484"
  },
  {
    "text": "before putting them into the debug info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=487"
  },
  {
    "text": "This is done using the -debug-prefix-map option. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=490"
  },
  {
    "text": "This way the machine-specific path prefix can be replaced ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=494"
  },
  {
    "text": "by a unique, canonical placeholder name ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=498"
  },
  {
    "text": "that can then be remapped to the local path in LLDB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=501"
  },
  {
    "text": "Before we went on the source tangent, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=504"
  },
  {
    "text": "I was trying to print the object description of \"words\".",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=506"
  },
  {
    "text": "That did not work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=513"
  },
  {
    "text": "In fact, even just evaluating the expression \"words\" did not work.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=515"
  },
  {
    "text": "At least we can see the variables in the variables view.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=525"
  },
  {
    "text": "The console equivalent of the Xcode variable view ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=531"
  },
  {
    "text": "is the \"frame variable\" or \"v\" command.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=535"
  },
  {
    "text": "If you want to learn more about the nuances between these commands, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=545"
  },
  {
    "text": "check out \"LLDB: Beyond 'po'\" from WWDC19. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=549"
  },
  {
    "text": "So what is po and why is it still not working? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=554"
  },
  {
    "text": "To understand what this means, we need to learn more about LLDB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=558"
  },
  {
    "text": "As a reminder, LLDB is a debugger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=561"
  },
  {
    "text": "But LLDB is not just a debugger. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=565"
  },
  {
    "text": "It is also a compiler! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=567"
  },
  {
    "text": "In addition to the functionality of a debugger, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=570"
  },
  {
    "text": "LLDB also includes a fully functioning copy of the Swift and Clang compilers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=573"
  },
  {
    "text": "These compilers power LLDB's expression evaluator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=577"
  },
  {
    "text": "which you may know through p and po command aliases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=581"
  },
  {
    "text": "With the expression evaluator we can go beyond looking at variables, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=585"
  },
  {
    "text": "we can perform computation, call functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=589"
  },
  {
    "text": "and even change the state of the program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=592"
  },
  {
    "text": "Check out \"Advanced Debugging with Xcode and LLDB\" from WWDC18 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=595"
  },
  {
    "text": "to get some ideas for what's possible with those commands. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=600"
  },
  {
    "text": "How does a debugger format a local variable? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=604"
  },
  {
    "text": "The debug info provided by the compiler tells the debugger ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=609"
  },
  {
    "text": "where in memory a variable is stored. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=612"
  },
  {
    "text": "But with that information alone, LLDB would only be able to show us ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=615"
  },
  {
    "text": "a random assortment of raw bytes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=619"
  },
  {
    "text": "So how does LLDB turn that into nicely formatted output? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=622"
  },
  {
    "text": "The answer is types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=626"
  },
  {
    "text": "Type information allows LLDB to understand the structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=628"
  },
  {
    "text": "and memory layout of a source variable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=632"
  },
  {
    "text": "With type information, LLDB knows what fields an aggregate type has ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=634"
  },
  {
    "text": "and types allow LLDB to use the appropriate data formatters ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=639"
  },
  {
    "text": "to pretty-print them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=643"
  },
  {
    "text": "Now let's look at where type information comes from. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=645"
  },
  {
    "text": "On the debugger side, where the frame variable and v commands live, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=650"
  },
  {
    "text": "LLDB gets type information from Debug Info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=654"
  },
  {
    "text": "And LLDB also gets types from Swift reflection metadata. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=659"
  },
  {
    "text": "On the compiler side, where the expression evaluator and po live, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=664"
  },
  {
    "text": "LLDB gets type information from Modules. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=668"
  },
  {
    "text": "This clean separation is new in Xcode 14 ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=672"
  },
  {
    "text": "and explains why the variable view can be fully functional ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=675"
  },
  {
    "text": "even if the expression evaluator isn't. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=678"
  },
  {
    "text": "Modules are how the compiler organizes type declarations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=681"
  },
  {
    "text": "The Swift compiler knows many ways of importing modules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=684"
  },
  {
    "text": "but before we dive into that, I want to show you a handy new feature.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=688"
  },
  {
    "text": "How do we start diagnosing an issue that is happening on the compiler side? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=692"
  },
  {
    "text": "This year LLDB has added a new \"swift-healthcheck\" command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=698"
  },
  {
    "text": "It's your first stop for figuring out if a module import failed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=702"
  },
  {
    "text": "Let me show you how this works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=707"
  },
  {
    "text": "By running swift-healthcheck after a problem occurred, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=709"
  },
  {
    "text": "we can get access to a log of the Swift expression evaluator configuration.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=713"
  },
  {
    "text": "At the end of the log we see that LLDB had trouble importing ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=725"
  },
  {
    "text": "the \"TerminalUI\" Swift module. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=728"
  },
  {
    "text": "Based on the name, I assume that this is an implementation detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=731"
  },
  {
    "text": "of the TerminalInterface framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=734"
  },
  {
    "text": "This missing module is a problem because the type of self is generic ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=738"
  },
  {
    "text": "over the UI implementation and without the module containing that type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=743"
  },
  {
    "text": "the expression evaluator cannot realize the dynamic type of \"self\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=748"
  },
  {
    "text": "I'm sending a message to the developers of the framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=753"
  },
  {
    "text": "and ask them to investigate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=755"
  },
  {
    "text": "In my experience, they have always been very responsive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=757"
  },
  {
    "text": "Who knows, maybe we can even find a solution before the end of this video. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=761"
  },
  {
    "text": "In the meantime, let's take a look at how LLDB's compiler finds Swift modules.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=765"
  },
  {
    "text": "My app has its own Swift module. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=772"
  },
  {
    "text": "It may import a system framework, such as Foundation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=775"
  },
  {
    "text": "System frameworks are textual stable Swift interface files that live in the SDK. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=780"
  },
  {
    "text": "Any Swift module might import a Clang module, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=786"
  },
  {
    "text": "which is a fancy name for one or more header files that are grouped together ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=789"
  },
  {
    "text": "with the help of a module map file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=793"
  },
  {
    "text": "Clang modules can depend on other Clang modules.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=796"
  },
  {
    "text": "My app might also import a Swift module that belongs to a locally built framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=801"
  },
  {
    "text": "It could also import textual Swift interface files ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=806"
  },
  {
    "text": "that are not part of the SDK. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=810"
  },
  {
    "text": "If you want to learn how, check out \"Binary Frameworks in Swift\" from WWDC19. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=812"
  },
  {
    "text": "My app might also link against a static library that contains Swift code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=819"
  },
  {
    "text": "and then that comes with a Swift module too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=824"
  },
  {
    "text": "Hmm, we're not done, though. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=827"
  },
  {
    "text": "I should mention there are also bridging headers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=829"
  },
  {
    "text": "which can also import Clang modules. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=831"
  },
  {
    "text": "Finally, as a special feature in LLDB only, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=834"
  },
  {
    "text": "some module contents can be reconstructed from debug info alone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=838"
  },
  {
    "text": "That's a lot of sources! ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=842"
  },
  {
    "text": "How does LLDB find them all? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=844"
  },
  {
    "text": "It's the build system's job to package up the modules so LLDB can find them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=847"
  },
  {
    "text": "Modules from system frameworks stay in the SDK. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=852"
  },
  {
    "text": "LLDB will find a matching SDK to read them from as it's attaching to your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=856"
  },
  {
    "text": "When debugging straight from the object files, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=862"
  },
  {
    "text": "LLDB will find all non-SDK modules where they were at build time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=865"
  },
  {
    "text": "Dsymutil can package a debug info archive called a .DSYM bundle ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=869"
  },
  {
    "text": "for every dynamic library, framework or dylib, and executable.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=873"
  },
  {
    "text": "Each .dSYM bundle can contain binary Swift modules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=880"
  },
  {
    "text": "which may contain bridging headers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=883"
  },
  {
    "text": "textual Swift interface files, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=885"
  },
  {
    "text": "and most importantly, debug info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=887"
  },
  {
    "text": "That covers everything. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=889"
  },
  {
    "text": "Everything? ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=891"
  },
  {
    "text": "Everything except Swift modules that belong to static archives.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=893"
  },
  {
    "text": "In order for a Swift module to be picked up by dsymutil, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=899"
  },
  {
    "text": "it needs to be registered with the linker. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=902"
  },
  {
    "text": "For dynamic libraries and executables, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=905"
  },
  {
    "text": "the build system will do this automatically for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=907"
  },
  {
    "text": "But static archives are not produced by the linker, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=910"
  },
  {
    "text": "they are just collections of object files, like a zip file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=914"
  },
  {
    "text": "That means that the responsibility for registering any Swift modules ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=918"
  },
  {
    "text": "with the linker falls onto every executable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=922"
  },
  {
    "text": "or dynamic library that links the static archive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=925"
  },
  {
    "text": "In many cases, Xcode's build system will do this for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=929"
  },
  {
    "text": "But if you are maintaining your own custom build system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=934"
  },
  {
    "text": "or if you have defined custom build rules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=937"
  },
  {
    "text": "this is something to be aware of.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=940"
  },
  {
    "text": "When using the Apple linker, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=944"
  },
  {
    "text": "Swift modules need to be registered with the -add-ast-path option. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=946"
  },
  {
    "text": "Check your build log to verify that this is the case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=952"
  },
  {
    "text": "You can also use dsymutil to dump the symbol table of your executable ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=957"
  },
  {
    "text": "and grep for \"swiftmodule\" to verify that it worked.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=961"
  },
  {
    "text": "On other platforms like Linux, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=968"
  },
  {
    "text": "the swift driver supports a -modulewrap action ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=970"
  },
  {
    "text": "that converts binary Swift module files into objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=973"
  },
  {
    "text": "that you can link into your binary together with the rest of the debug info. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=976"
  },
  {
    "text": "LLDB will find it there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=980"
  },
  {
    "text": "The developers of the framework were incredibly responsive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=983"
  },
  {
    "text": "As we suspected, it turns out that as a part of the framework's build system ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=987"
  },
  {
    "text": "a static archive is used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=991"
  },
  {
    "text": "And it was the Swift module that belongs to that static archive ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=993"
  },
  {
    "text": "that was missing from the dSYM bundle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=996"
  },
  {
    "text": "I have now installed a fixed version of the framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=998"
  },
  {
    "text": "It has registered the missing static module with the linker ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1001"
  },
  {
    "text": "and so dsymutil was able to collect it.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1005"
  },
  {
    "text": "Now self can be resolved.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1009"
  },
  {
    "text": "And we can print the object description of \"words\".",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1014"
  },
  {
    "text": "Since we're using the console anyway, I'm using the s alias ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1021"
  },
  {
    "text": "to step into the parseFrom function.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1024"
  },
  {
    "text": "And now we can also easily find the bug, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1032"
  },
  {
    "text": "which is just a copy-and-paste error here.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1034"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1046"
  },
  {
    "text": "And with that, we not only solved the puzzle of the missing Swift module, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1064"
  },
  {
    "text": "but also the first puzzle of the game.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1069"
  },
  {
    "text": "Before we wrap up, I have one more detail to watch out for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1073"
  },
  {
    "text": "The Swift compiler will serialize Clang header search paths ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1077"
  },
  {
    "text": "and other related options into the binary .swiftmodule files. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1081"
  },
  {
    "text": "This is great because it makes importing their Clang module dependencies ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1084"
  },
  {
    "text": "just work during the build. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1088"
  },
  {
    "text": "But when building on a different machine, these local paths can be detrimental. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1091"
  },
  {
    "text": "So before shipping a binary .swiftmodule to another machine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1096"
  },
  {
    "text": "consider building with the ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1100"
  },
  {
    "text": "-no-serialize-debugging-options Compiler flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1102"
  },
  {
    "text": "In Xcode this is controlled via the ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1105"
  },
  {
    "text": "SWIFT_SERIALIZE_DEBUGGING_OPTIONS setting.",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1107"
  },
  {
    "text": "You can reintroduce these search paths in LLDB with one of the following settings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1112"
  },
  {
    "text": "Let's recap what we learned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1118"
  },
  {
    "text": "If you want to ship code from one machine to another, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1120"
  },
  {
    "text": "you should ask yourself what level of debugging you expect to be doing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1123"
  },
  {
    "text": "For example, if you ship a binary framework to another developer ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1127"
  },
  {
    "text": "and you don't expect them to step into your code in the debugger, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1131"
  },
  {
    "text": "it's best to just ship the Swift module as a textual .swiftinterface file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1135"
  },
  {
    "text": "But if you are setting up a build server or a continuous integration system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1139"
  },
  {
    "text": "where developers are expected to debug the downloaded build artifacts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1143"
  },
  {
    "text": "you will want to make sure to build a binary Swift module ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1148"
  },
  {
    "text": "and consider turning off search path serialization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1151"
  },
  {
    "text": "You can also canonicalize the source paths on the server ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1155"
  },
  {
    "text": "in the debug info using the -debug-prefix-map option. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1158"
  },
  {
    "text": "That's all I have for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1161"
  },
  {
    "text": "Today we learned about LLDB's dual nature as a debugger and a compiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1164"
  },
  {
    "text": "The debugger needs debug info and reflection metadata to function ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1170"
  },
  {
    "text": "and provides the Xcode variable view, and the v command. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1174"
  },
  {
    "text": "The compiler needs Modules and is sensitive to search paths. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1178"
  },
  {
    "text": "It's behind the expr, p, and po commands. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1183"
  },
  {
    "text": "A good way to get at the compiler diagnostics ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1187"
  },
  {
    "text": "is the new swift-healthcheck command in LLDB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1190"
  },
  {
    "text": "Thank you for watching!  ♪ ♪",
    "link": "https://developer.apple.com/videos/play/wwdc2022-110370/?time=1194"
  }
]