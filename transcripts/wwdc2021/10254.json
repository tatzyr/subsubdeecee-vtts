[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=7"
  },
  {
    "text": "Rokhini Prabhu: Hello, and welcome ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=9"
  },
  {
    "text": "to \"Swift Concurrency Behind the Scenes.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=11"
  },
  {
    "text": "My name is Rokhini, and I work on the Darwin Runtime team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=14"
  },
  {
    "text": "Today, my colleague Varun and I are very excited to talk to you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=18"
  },
  {
    "text": "about some of the underlying nuances ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=22"
  },
  {
    "text": "around Swift concurrency.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=24"
  },
  {
    "text": "This is an advanced talk which builds upon ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=28"
  },
  {
    "text": "some of the earlier talks on Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=31"
  },
  {
    "text": "If you are unfamiliar with the concepts of async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=35"
  },
  {
    "text": "structured concurrency, and actors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=39"
  },
  {
    "text": "I encourage you to watch these others talks first. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=41"
  },
  {
    "text": "In the previous talks on Swift concurrency you've learned about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=46"
  },
  {
    "text": "the various language features available this year ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=49"
  },
  {
    "text": "native to Swift and about how to use them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=53"
  },
  {
    "text": "In this talk, we will be diving deeper to understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=56"
  },
  {
    "text": "why these primitives are designed the way they are, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=59"
  },
  {
    "text": "not only for language safety ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=62"
  },
  {
    "text": "but also for performance and efficiency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=64"
  },
  {
    "text": "As you experiment and adopt Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=67"
  },
  {
    "text": "in your own apps, we hope this talk will give you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=70"
  },
  {
    "text": "a better mental model of how to reason about Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=73"
  },
  {
    "text": "as well how it interfaces with existing threading libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=78"
  },
  {
    "text": "like Grand Central Dispatch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=82"
  },
  {
    "text": "We're going to discuss a few things today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=85"
  },
  {
    "text": "First, we'll talk about the threading model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=88"
  },
  {
    "text": "behind Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=91"
  },
  {
    "text": "and contrast it with Grand Central Dispatch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=93"
  },
  {
    "text": "We'll talk about how we've taken advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=96"
  },
  {
    "text": "of concurrency language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=98"
  },
  {
    "text": "to build a new thread pool for Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=101"
  },
  {
    "text": "thereby achieving better performance and efficiency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=103"
  },
  {
    "text": "Lastly, in this section, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=107"
  },
  {
    "text": "we'll touch on considerations you need to keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=109"
  },
  {
    "text": "when porting your code to using Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=112"
  },
  {
    "text": "Varun will then talk about synchronization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=116"
  },
  {
    "text": "in Swift concurrency via actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=119"
  },
  {
    "text": "We'll talk how actors work under the hood, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=122"
  },
  {
    "text": "how they compare to existing synchronization primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=125"
  },
  {
    "text": "you already may be familiar with -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=128"
  },
  {
    "text": "like serial dispatch queues -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=130"
  },
  {
    "text": "and finally, some things to keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=132"
  },
  {
    "text": "when writing code with actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=135"
  },
  {
    "text": "We have a lot of ground to cover today so let's dive right in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=137"
  },
  {
    "text": "In our discussion today about threading models, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=142"
  },
  {
    "text": "we'll start by taking a look at an example app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=144"
  },
  {
    "text": "written with the technologies available today ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=148"
  },
  {
    "text": "like Grand Central Dispatch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=150"
  },
  {
    "text": "We will then see how the same application fares ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=153"
  },
  {
    "text": "when rewritten with Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=156"
  },
  {
    "text": "Suppose I wanted to write my own news feed reader app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=159"
  },
  {
    "text": "Let's talk about what the high-level components ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=163"
  },
  {
    "text": "of my application might be. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=166"
  },
  {
    "text": "My app will have a main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=168"
  },
  {
    "text": "that will be driving the user interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=170"
  },
  {
    "text": "I will have a database keeping track of the news feeds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=173"
  },
  {
    "text": "that the user is subscribed to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=176"
  },
  {
    "text": "and finally, a subsystem to handle the networking logic ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=179"
  },
  {
    "text": "to fetch the latest contents from the feeds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=182"
  },
  {
    "text": "Let's consider how one might structure this app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=187"
  },
  {
    "text": "with Grand Central Dispatch queues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=189"
  },
  {
    "text": "Let's suppose that the user has asked to see the latest news. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=192"
  },
  {
    "text": "On the main thread, we will handle the user event gesture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=196"
  },
  {
    "text": "From here, we will dispatch async the request ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=201"
  },
  {
    "text": "onto a serial queue that handles the database operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=204"
  },
  {
    "text": "The reason for this is twofold. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=208"
  },
  {
    "text": "Firstly, by dispatching the work onto a different queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=210"
  },
  {
    "text": "we ensure that the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=214"
  },
  {
    "text": "can remain responsive to user input even while waiting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=216"
  },
  {
    "text": "for a potentially large amount of work to happen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=220"
  },
  {
    "text": "Secondly, access to the database is protected, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=223"
  },
  {
    "text": "since a serial queue guarantees mutual exclusion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=227"
  },
  {
    "text": "While on the database queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=231"
  },
  {
    "text": "we'll iterate through the news feeds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=233"
  },
  {
    "text": "the user has subscribed to and for each of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=235"
  },
  {
    "text": "schedule a networking request to our URLSession ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=239"
  },
  {
    "text": "to download the contents of that feed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=242"
  },
  {
    "text": "As the results of the networking requests come in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=246"
  },
  {
    "text": "the URLSession callback will be called on our delegate queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=249"
  },
  {
    "text": "which is a concurrent queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=253"
  },
  {
    "text": "In the completion handler for each of the results, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=256"
  },
  {
    "text": "we will synchronously update the database ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=259"
  },
  {
    "text": "with the latest requests from each of these feeds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=261"
  },
  {
    "text": "so as to cache it for future use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=265"
  },
  {
    "text": "And finally, we'll wake up the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=267"
  },
  {
    "text": "to refresh the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=270"
  },
  {
    "text": "This seems like a perfectly reasonable way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=273"
  },
  {
    "text": "to structure such an application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=275"
  },
  {
    "text": "We've made sure not to block the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=278"
  },
  {
    "text": "while working on requests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=280"
  },
  {
    "text": "And by handling the network requests concurrently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=282"
  },
  {
    "text": "we've taken advantage of the inherent parallelism ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=285"
  },
  {
    "text": "in our program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=287"
  },
  {
    "text": "Let's take a closer look at a code snippet ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=289"
  },
  {
    "text": "that shows how we process the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=292"
  },
  {
    "text": "of our networking requests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=294"
  },
  {
    "text": "First, we have created a URLSession ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=298"
  },
  {
    "text": "for performing downloads from our news feeds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=301"
  },
  {
    "text": "As you can see here, we've set the delegate queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=304"
  },
  {
    "text": "of this URLSession to be a concurrent queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=306"
  },
  {
    "text": "We then iterate over all the news feeds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=310"
  },
  {
    "text": "that need to be updated and for each of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=313"
  },
  {
    "text": "schedule a data task in the URLSession. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=316"
  },
  {
    "text": "In the completion handler of the data task -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=320"
  },
  {
    "text": "which will be invoked on the delegate queue -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=322"
  },
  {
    "text": "we deserialize the results of our download ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=325"
  },
  {
    "text": "and format them into articles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=328"
  },
  {
    "text": "We then dispatch sync against our database queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=331"
  },
  {
    "text": "before updating the results for the feed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=334"
  },
  {
    "text": "So here you can see that we've written ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=338"
  },
  {
    "text": "some straight-line code to do something fairly straightforward ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=340"
  },
  {
    "text": "but this code has some hidden performance pitfalls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=344"
  },
  {
    "text": "To understand more about these performance problems, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=349"
  },
  {
    "text": "we need to first dig into how threads are brought up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=352"
  },
  {
    "text": "to handle work on GCD queues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=355"
  },
  {
    "text": "In Grand Central Dispatch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=358"
  },
  {
    "text": "when work is enqueued onto a queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=360"
  },
  {
    "text": "the system will bring up a thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=362"
  },
  {
    "text": "to service that work item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=364"
  },
  {
    "text": "Since a concurrent queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=368"
  },
  {
    "text": "can handle multiple work items at once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=370"
  },
  {
    "text": "the system will bring up several threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=372"
  },
  {
    "text": "until we have saturated all the CPU cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=375"
  },
  {
    "text": "However, if a thread blocks -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=379"
  },
  {
    "text": "as seen on the first CPU core here -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=381"
  },
  {
    "text": "and there is more work to be done on the concurrent queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=384"
  },
  {
    "text": "GCD will bring up more threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=387"
  },
  {
    "text": "to drain the remaining work items. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=389"
  },
  {
    "text": "The reason for this is twofold. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=393"
  },
  {
    "text": "Firstly, by giving your process another thread, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=396"
  },
  {
    "text": "we are able to ensure that each core ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=399"
  },
  {
    "text": "continues to have a thread that executes work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=401"
  },
  {
    "text": "at any given time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=404"
  },
  {
    "text": "This gives your applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=407"
  },
  {
    "text": "a good, continuing level of concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=409"
  },
  {
    "text": "Secondly the blocked thread may be waiting on a resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=413"
  },
  {
    "text": "like a semaphore, before it can make further progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=416"
  },
  {
    "text": "The new thread that is brought up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=420"
  },
  {
    "text": "to continue working on the queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=422"
  },
  {
    "text": "may be able to help unblock the resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=424"
  },
  {
    "text": "that is being waited on by the first thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=427"
  },
  {
    "text": "So now that we understand a bit more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=430"
  },
  {
    "text": "about thread bringups in GCD, let's go back ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=433"
  },
  {
    "text": "and look at the CPU execution of the code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=436"
  },
  {
    "text": "from our news app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=439"
  },
  {
    "text": "On a two-core device like the Apple Watch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=442"
  },
  {
    "text": "GCD will first bring up two threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=445"
  },
  {
    "text": "to process the feed update results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=447"
  },
  {
    "text": "As the threads block on accessing the database queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=450"
  },
  {
    "text": "more threads are created to continue working ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=454"
  },
  {
    "text": "on the networking queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=457"
  },
  {
    "text": "The CPU then has to context switch between different threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=459"
  },
  {
    "text": "processing the networking results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=463"
  },
  {
    "text": "as indicated by the white vertical lines ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=465"
  },
  {
    "text": "between the various threads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=468"
  },
  {
    "text": "This means that in our news application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=471"
  },
  {
    "text": "we could easily end up with a very large number of threads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=474"
  },
  {
    "text": "If the user has a hundred feeds that need to be updated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=478"
  },
  {
    "text": "then each of those URL data tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=482"
  },
  {
    "text": "will have a completion block on the concurrent queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=485"
  },
  {
    "text": "when the network requests complete. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=487"
  },
  {
    "text": "GCD will bring up more threads when each of the callbacks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=490"
  },
  {
    "text": "block on the database queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=494"
  },
  {
    "text": "resulting in the application having lots of threads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=496"
  },
  {
    "text": "Now you might ask, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=500"
  },
  {
    "text": "what's so bad about having a lot of threads in our application? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=501"
  },
  {
    "text": "Having a lot of threads in our applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=506"
  },
  {
    "text": "means that the system is overcommitted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=508"
  },
  {
    "text": "with more threads than we have CPU cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=511"
  },
  {
    "text": "Consider an iPhone with six CPU cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=514"
  },
  {
    "text": "If our news application has a hundred feed updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=517"
  },
  {
    "text": "that need to be processed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=520"
  },
  {
    "text": "this means that we have overcommitted the iPhone ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=522"
  },
  {
    "text": "with 16 times more threads than cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=525"
  },
  {
    "text": "This is the phenomenon we call thread explosion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=528"
  },
  {
    "text": "Some of our previous WWDC talks have gone into further detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=532"
  },
  {
    "text": "on the risks associated with this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=536"
  },
  {
    "text": "including the possibility of deadlocks in your application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=539"
  },
  {
    "text": "Thread explosion also comes with memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=543"
  },
  {
    "text": "and scheduling overhead that may not be immediately obvious, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=546"
  },
  {
    "text": "so let's look into this further. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=549"
  },
  {
    "text": "Looking back at our news application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=553"
  },
  {
    "text": "each of the blocked threads is holding onto valuable memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=556"
  },
  {
    "text": "and resources while waiting to run again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=560"
  },
  {
    "text": "Each blocked thread has a stack ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=563"
  },
  {
    "text": "and associated kernel data structures to track the thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=565"
  },
  {
    "text": "Some of these threads may be holding onto locks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=569"
  },
  {
    "text": "which other threads that are running might need. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=572"
  },
  {
    "text": "This is a large number of resources and memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=575"
  },
  {
    "text": "to be holding onto for threads which are not making progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=579"
  },
  {
    "text": "There is also greater scheduling overhead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=583"
  },
  {
    "text": "as a result of thread explosion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=586"
  },
  {
    "text": "As new threads are brought up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=588"
  },
  {
    "text": "the CPU need to perform a full thread context switch ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=590"
  },
  {
    "text": "in order to switch away from the old thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=594"
  },
  {
    "text": "to start executing the new thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=596"
  },
  {
    "text": "As the blocked threads become runnable again, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=600"
  },
  {
    "text": "the scheduler will have to timeshare the threads on the CPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=603"
  },
  {
    "text": "so that they are all able to make forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=606"
  },
  {
    "text": "Now, timesharing of threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=610"
  },
  {
    "text": "is fine if that happens a few times -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=612"
  },
  {
    "text": "that is the power of concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=615"
  },
  {
    "text": "But when there is thread explosion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=617"
  },
  {
    "text": "having to timeshare hundreds of threads on a device ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=620"
  },
  {
    "text": "with limited cores can lead to excessive context switching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=623"
  },
  {
    "text": "The scheduling latencies of these threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=628"
  },
  {
    "text": "outweigh the amount of useful work they would do, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=630"
  },
  {
    "text": "therefore, resulting in the CPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=633"
  },
  {
    "text": "running less efficiently as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=635"
  },
  {
    "text": "As we've seen so far, it is easy to miss ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=638"
  },
  {
    "text": "some of these nuances about the threading hygiene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=641"
  },
  {
    "text": "when writing applications with GCD queues ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=644"
  },
  {
    "text": "thereby resulting in poor performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=647"
  },
  {
    "text": "and greater overhead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=650"
  },
  {
    "text": "Building on this experience, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=652"
  },
  {
    "text": "Swift has taken a different approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=653"
  },
  {
    "text": "when designing concurrency into the language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=655"
  },
  {
    "text": "We've built Swift concurrency with performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=659"
  },
  {
    "text": "and efficiency in mind as well so that your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=662"
  },
  {
    "text": "can enjoy controlled, structured, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=665"
  },
  {
    "text": "and safe concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=667"
  },
  {
    "text": "With Swift, we want to change the execution model of apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=671"
  },
  {
    "text": "from the following model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=675"
  },
  {
    "text": "which has lots of threads and context switches, to this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=676"
  },
  {
    "text": "Here you see that we have just two threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=684"
  },
  {
    "text": "executing on our two-core system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=686"
  },
  {
    "text": "and there are no thread context switches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=688"
  },
  {
    "text": "All of our blocked threads go away and instead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=691"
  },
  {
    "text": "we have a lightweight object known as a continuation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=694"
  },
  {
    "text": "to track resumption of work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=698"
  },
  {
    "text": "When threads execute work under Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=701"
  },
  {
    "text": "they switch between continuations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=704"
  },
  {
    "text": "instead of performing a full thread context switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=706"
  },
  {
    "text": "This means that we now only pay ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=709"
  },
  {
    "text": "the cost of a function call instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=712"
  },
  {
    "text": "So the runtime behavior that we want for Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=716"
  },
  {
    "text": "is to create only as many threads as there are CPU cores, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=719"
  },
  {
    "text": "and for threads to be able to cheaply and efficiently ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=723"
  },
  {
    "text": "switch between work items when they are blocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=727"
  },
  {
    "text": "We want you to be able to write straight-line code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=730"
  },
  {
    "text": "that is easy to reason about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=733"
  },
  {
    "text": "and also gives you safe, controlled concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=735"
  },
  {
    "text": "In order to achieve this behavior that we are after, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=740"
  },
  {
    "text": "the operating system needs a runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=743"
  },
  {
    "text": "that threads will not block, and that is only possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=746"
  },
  {
    "text": "if the language is able to provide us with that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=750"
  },
  {
    "text": "Swift's concurrency model and the semantics around it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=753"
  },
  {
    "text": "have therefore been designed with this goal in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=757"
  },
  {
    "text": "To that end, I'd like to dive into two ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=762"
  },
  {
    "text": "of Swift's language-level features that enable us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=764"
  },
  {
    "text": "to maintain a contract with the runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=767"
  },
  {
    "text": "The first comes from the semantics of await ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=770"
  },
  {
    "text": "and the second, from the tracking of task dependencies ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=773"
  },
  {
    "text": "in the Swift runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=776"
  },
  {
    "text": "Let's consider these language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=779"
  },
  {
    "text": "in the context of our example news application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=781"
  },
  {
    "text": "This is the code snippet we walked through earlier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=785"
  },
  {
    "text": "that handles the results of our news feed updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=788"
  },
  {
    "text": "Let's see what this logic looks like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=791"
  },
  {
    "text": "when written with Swift concurrency primitives instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=793"
  },
  {
    "text": "We'd first start with creating an async implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=798"
  },
  {
    "text": "of our helper function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=802"
  },
  {
    "text": "Then, instead of handling the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=803"
  },
  {
    "text": "of our networking requests on a concurrent dispatch queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=806"
  },
  {
    "text": "here we are using a task group instead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=809"
  },
  {
    "text": "to manage our concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=812"
  },
  {
    "text": "In the task group, we will create child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=815"
  },
  {
    "text": "for each feed that needs to be updated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=818"
  },
  {
    "text": "Each child task will perform a download from the feed's URL ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=821"
  },
  {
    "text": "using the shared URLSession. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=825"
  },
  {
    "text": "It will then deserialize the results of the download, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=827"
  },
  {
    "text": "format them into articles and finally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=831"
  },
  {
    "text": "we will call an async function to update our database. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=833"
  },
  {
    "text": "Here, when calling any async functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=838"
  },
  {
    "text": "we annotate it with an await keyword. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=841"
  },
  {
    "text": "From the \"Meet async/await in Swift\" talk, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=844"
  },
  {
    "text": "we learned that an await is an asynchronous wait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=847"
  },
  {
    "text": "That is, it does not block the current thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=851"
  },
  {
    "text": "while waiting for results from the async function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=854"
  },
  {
    "text": "Instead, the function may be suspended ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=857"
  },
  {
    "text": "and the thread will be freed up to execute other tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=860"
  },
  {
    "text": "How does this happen? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=865"
  },
  {
    "text": "How does one give up a thread? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=866"
  },
  {
    "text": "My colleague Varun will now shed light ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=868"
  },
  {
    "text": "on what is done under the hood in the Swift runtime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=870"
  },
  {
    "text": "to make this possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=873"
  },
  {
    "text": "Varun Gandhi: Thanks, Rokhini. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=877"
  },
  {
    "text": "Before jumping into how async functions are implemented, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=878"
  },
  {
    "text": "let's do a quick refresher on how nonasync functions work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=881"
  },
  {
    "text": "Every thread in a running program has one stack, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=886"
  },
  {
    "text": "which it uses to store state for function calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=889"
  },
  {
    "text": "Let's focus on one thread for now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=892"
  },
  {
    "text": "When the thread executes a function call, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=895"
  },
  {
    "text": "a new frame is pushed onto its stack. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=897"
  },
  {
    "text": "This newly created stack frame can be used by the function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=900"
  },
  {
    "text": "to store local variables, the return address, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=903"
  },
  {
    "text": "and any other information that is needed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=906"
  },
  {
    "text": "Once the function finishes executing and returns, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=909"
  },
  {
    "text": "its stack frame is popped. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=912"
  },
  {
    "text": "Now let's consider async functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=916"
  },
  {
    "text": "Suppose that a thread called an add(_:) method on the Feed type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=919"
  },
  {
    "text": "from the updateDatabase function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=922"
  },
  {
    "text": "At this stage, the most recent stack frame will be for add(_:). ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=924"
  },
  {
    "text": "The stack frame stores local variables ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=929"
  },
  {
    "text": "that do not need to be available across a suspension point. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=931"
  },
  {
    "text": "The body of add(_:) has one suspension point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=935"
  },
  {
    "text": "marked by await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=937"
  },
  {
    "text": "The local variables, id and article, are immediately ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=939"
  },
  {
    "text": "used in the body of the for loop after being defined, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=942"
  },
  {
    "text": "without any suspension points in-between. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=946"
  },
  {
    "text": "So they will be stored in the stack frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=949"
  },
  {
    "text": "Additionally, there will be two async frames on the heap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=953"
  },
  {
    "text": "one for updateDatabase and one for add. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=957"
  },
  {
    "text": "Async frames store information that does need to be available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=960"
  },
  {
    "text": "across suspension points. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=963"
  },
  {
    "text": "Notice that the newArticles argument is defined ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=966"
  },
  {
    "text": "before await but needs to be available after the await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=969"
  },
  {
    "text": "This means that the async frame for add ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=973"
  },
  {
    "text": "will keep track of newArticles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=976"
  },
  {
    "text": "Suppose the thread continues executing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=979"
  },
  {
    "text": "When the save function starts executing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=982"
  },
  {
    "text": "the stack frame for add is replaced ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=985"
  },
  {
    "text": "by a stack frame for save. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=987"
  },
  {
    "text": "Instead of adding new stack frames, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=990"
  },
  {
    "text": "the top most stack frame is replaced ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=992"
  },
  {
    "text": "since any variables that will be needed in the future ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=994"
  },
  {
    "text": "will already have been stored in the list of async frames. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=997"
  },
  {
    "text": "The save function also gains an async frame for its use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1002"
  },
  {
    "text": "While the articles are being saved to the database, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1008"
  },
  {
    "text": "it would be better if the thread could do some useful work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1010"
  },
  {
    "text": "instead of being blocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1013"
  },
  {
    "text": "Suppose the execution of the save function is suspended. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1015"
  },
  {
    "text": "And the thread is reused to do some other useful work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1020"
  },
  {
    "text": "instead of being blocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1023"
  },
  {
    "text": "Since all information that is maintained ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1028"
  },
  {
    "text": "across a suspension point is stored on the heap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1030"
  },
  {
    "text": "it can be used to continue execution at a later stage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1034"
  },
  {
    "text": "This list of async frames is the runtime representation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1038"
  },
  {
    "text": "of a continuation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1042"
  },
  {
    "text": "Say after a little while, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1045"
  },
  {
    "text": "the database request is complete, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1047"
  },
  {
    "text": "and suppose some thread is freed up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1049"
  },
  {
    "text": "This could be the same thread as before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1052"
  },
  {
    "text": "or it could be a different thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1054"
  },
  {
    "text": "Suppose the save function resumes executing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1058"
  },
  {
    "text": "on this thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1060"
  },
  {
    "text": "Once it finishes executing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1062"
  },
  {
    "text": "and returns some IDs, then the stack frame for save ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1065"
  },
  {
    "text": "will again be replaced by a stack frame for add. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1068"
  },
  {
    "text": "After that, the thread can start executing zip. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1072"
  },
  {
    "text": "Zipping two arrays is a nonasync operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1076"
  },
  {
    "text": "so it will create a new stack frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1079"
  },
  {
    "text": "Since Swift continues to use the operating system stack, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1083"
  },
  {
    "text": "both async and nonasync Swift code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1085"
  },
  {
    "text": "can efficiently call into C and Objective-C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1088"
  },
  {
    "text": "Moreover, C and Objective-C code can continue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1092"
  },
  {
    "text": "efficiently calling nonasync Swift code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1095"
  },
  {
    "text": "Once the zip function finishes, its stack frame will be popped ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1098"
  },
  {
    "text": "and execution will continue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1102"
  },
  {
    "text": "So far, I've described how await is designed to ensure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1107"
  },
  {
    "text": "efficient suspension and resumption, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1110"
  },
  {
    "text": "while freeing up a thread's resources to do other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1113"
  },
  {
    "text": "Next, Rokhini will describe the second language feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1117"
  },
  {
    "text": "which is the runtime's tracking of dependencies between tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1120"
  },
  {
    "text": "Rokhini: Thanks, Varun. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1124"
  },
  {
    "text": "As described earlier, a function can be broken up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1126"
  },
  {
    "text": "into continuations at an await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1129"
  },
  {
    "text": "also known as a potential suspension point. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1131"
  },
  {
    "text": "In this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1135"
  },
  {
    "text": "the URLSession data task is the async function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1136"
  },
  {
    "text": "and the remaining work after it is the continuation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1140"
  },
  {
    "text": "The continuation can only be executed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1143"
  },
  {
    "text": "after the async function is completed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1146"
  },
  {
    "text": "This is a dependency tracked by the Swift concurrency runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1149"
  },
  {
    "text": "Similarly, within the task group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1154"
  },
  {
    "text": "a parent task may create several child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1157"
  },
  {
    "text": "and each of those child tasks needs to complete ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1160"
  },
  {
    "text": "before a parent task can proceed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1163"
  },
  {
    "text": "This is a dependency that is expressed in your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1166"
  },
  {
    "text": "by the scope of the task group and therefore explicitly known ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1170"
  },
  {
    "text": "to the Swift compiler and runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1174"
  },
  {
    "text": "In Swift, tasks can only await other tasks that are known ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1178"
  },
  {
    "text": "to the Swift runtime -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1182"
  },
  {
    "text": "be it continuations or child tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1183"
  },
  {
    "text": "Therefore, code when structured ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1186"
  },
  {
    "text": "with Swift's concurrency primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1188"
  },
  {
    "text": "provide the runtime with a clear understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1190"
  },
  {
    "text": "of the dependency chain between the tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1193"
  },
  {
    "text": "So far, you've learned how Swift's language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1198"
  },
  {
    "text": "allow a task to be suspended during an await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1201"
  },
  {
    "text": "Instead, the executing thread is able to reason ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1205"
  },
  {
    "text": "about task dependencies ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1208"
  },
  {
    "text": "and pick up a different task instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1210"
  },
  {
    "text": "This means that code written with Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1213"
  },
  {
    "text": "can maintain a runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1216"
  },
  {
    "text": "that threads are always able to make forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1219"
  },
  {
    "text": "We have taken advantage of this runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1223"
  },
  {
    "text": "to build integrated OS support for Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1226"
  },
  {
    "text": "This is in the form of a new cooperative thread pool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1231"
  },
  {
    "text": "to back Swift concurrency as the default executor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1235"
  },
  {
    "text": "The new thread pool will only spawn as many threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1239"
  },
  {
    "text": "as there are CPU cores, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1242"
  },
  {
    "text": "thereby making sure not to overcommit the system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1244"
  },
  {
    "text": "Unlike GCD's concurrent queues, which will spawn more threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1248"
  },
  {
    "text": "when work items block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1252"
  },
  {
    "text": "with Swift threads can always make forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1254"
  },
  {
    "text": "Therefore, the default runtime can be judicious ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1258"
  },
  {
    "text": "about controlling how many threads are spawned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1262"
  },
  {
    "text": "This lets us give your applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1265"
  },
  {
    "text": "the concurrency you need while making sure to avoid ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1267"
  },
  {
    "text": "the known pitfalls of excessive concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1271"
  },
  {
    "text": "In previous WWDC talks about concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1275"
  },
  {
    "text": "with Grand Central Dispatch, we've recommended that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1279"
  },
  {
    "text": "you structure your applications into distinct subsystems ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1282"
  },
  {
    "text": "and maintain one serial dispatch queue per subsystem ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1286"
  },
  {
    "text": "to control the concurrency of your application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1290"
  },
  {
    "text": "This meant that it was difficult for you to get concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1293"
  },
  {
    "text": "greater than one within a subsystem ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1297"
  },
  {
    "text": "without running the risk of thread explosion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1299"
  },
  {
    "text": "With Swift, the language gives us strong invariants ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1303"
  },
  {
    "text": "which the runtime has leveraged, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1307"
  },
  {
    "text": "thereby being able to transparently provide you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1309"
  },
  {
    "text": "with better-controlled concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1312"
  },
  {
    "text": "in the default runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1314"
  },
  {
    "text": "Now that you understand a bit more about the threading model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1319"
  },
  {
    "text": "for Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1322"
  },
  {
    "text": "let's go through some considerations to keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1323"
  },
  {
    "text": "while adopting these exciting new features in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1326"
  },
  {
    "text": "The first consideration that you need to keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1332"
  },
  {
    "text": "has to do with performance when converting synchronous code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1335"
  },
  {
    "text": "into asynchronous code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1338"
  },
  {
    "text": "Earlier, we talked through some of the costs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1340"
  },
  {
    "text": "associated with concurrency such as additional memory allocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1343"
  },
  {
    "text": "and logic in the Swift runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1347"
  },
  {
    "text": "As such, you need to be careful to only write new code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1349"
  },
  {
    "text": "with Swift concurrency when the cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1354"
  },
  {
    "text": "of introducing concurrency into your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1356"
  },
  {
    "text": "outweighs the cost of managing it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1359"
  },
  {
    "text": "The code snippet here might not actually benefit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1363"
  },
  {
    "text": "from the additional concurrency of spawning a child task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1366"
  },
  {
    "text": "simply to read a value from the user's defaults. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1370"
  },
  {
    "text": "This is because the useful work done by the child task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1373"
  },
  {
    "text": "is diminished by the cost of creating and managing the task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1377"
  },
  {
    "text": "We therefore recommend profiling your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1382"
  },
  {
    "text": "with Instruments system trace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1384"
  },
  {
    "text": "to understand it's performance characteristics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1386"
  },
  {
    "text": "as you adopt Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1389"
  },
  {
    "text": "The second thing to be careful about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1392"
  },
  {
    "text": "is the notion of atomicity around an await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1394"
  },
  {
    "text": "Swift makes no guarantee that the thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1398"
  },
  {
    "text": "which executed the code before the await is the same thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1401"
  },
  {
    "text": "which will pick up the continuation as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1405"
  },
  {
    "text": "In fact, await is an explicit point in your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1408"
  },
  {
    "text": "which indicates that atomicity is broken ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1412"
  },
  {
    "text": "since the task may be voluntarily descheduled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1415"
  },
  {
    "text": "As such, you should be careful not to hold locks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1419"
  },
  {
    "text": "across an await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1422"
  },
  {
    "text": "Similarly, thread-specific data will not be preserved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1424"
  },
  {
    "text": "across an await either. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1427"
  },
  {
    "text": "Any assumptions in your code which expect thread locality ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1430"
  },
  {
    "text": "should be revisited to account for the suspending behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1434"
  },
  {
    "text": "of await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1437"
  },
  {
    "text": "And lastly, the final consideration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1440"
  },
  {
    "text": "has to do with the runtime contract that is foundational ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1442"
  },
  {
    "text": "to the efficient threading model in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1446"
  },
  {
    "text": "Recall that with Swift, the language allows us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1450"
  },
  {
    "text": "to uphold a runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1453"
  },
  {
    "text": "that threads will always be able to make forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1455"
  },
  {
    "text": "It is based on this contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1460"
  },
  {
    "text": "that we have built a cooperative thread pool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1461"
  },
  {
    "text": "to be the default executor for Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1464"
  },
  {
    "text": "As you adopt Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1468"
  },
  {
    "text": "it is important to ensure that you continue to maintain ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1470"
  },
  {
    "text": "this contract in your code as well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1473"
  },
  {
    "text": "so that the cooperative thread pool can function optimally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1475"
  },
  {
    "text": "It is possible to maintain this contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1480"
  },
  {
    "text": "within the cooperative thread pool by using safe primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1483"
  },
  {
    "text": "that make the dependencies in your code explicit and known. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1487"
  },
  {
    "text": "With Swift concurrency primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1491"
  },
  {
    "text": "like await, actors, and task groups, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1493"
  },
  {
    "text": "these dependencies are made known at compile time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1496"
  },
  {
    "text": "Therefore, the Swift compiler enforces this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1500"
  },
  {
    "text": "and helps you preserve the runtime contract. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1503"
  },
  {
    "text": "Primitives like os_unfair_locks and NSLocks are also safe ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1507"
  },
  {
    "text": "but caution is required when using them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1512"
  },
  {
    "text": "Using a lock in synchronous code is safe ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1516"
  },
  {
    "text": "when used for data synchronization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1519"
  },
  {
    "text": "around a tight, well-known critical section. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1521"
  },
  {
    "text": "This is because the thread holding the lock ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1525"
  },
  {
    "text": "is always able to make forward progress ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1528"
  },
  {
    "text": "towards releasing the lock. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1530"
  },
  {
    "text": "As such, while the primitive may block a thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1533"
  },
  {
    "text": "for a short period of time under contention, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1536"
  },
  {
    "text": "it does not violate the runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1539"
  },
  {
    "text": "of forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1542"
  },
  {
    "text": "It is worth noting that unlike Swift concurrency primitives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1544"
  },
  {
    "text": "there is no compiler support to aid in correct usage of locks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1548"
  },
  {
    "text": "so it is your responsibility to use this primitive correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1553"
  },
  {
    "text": "On the other hand, primitives like semaphores ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1558"
  },
  {
    "text": "and condition variables are unsafe to use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1561"
  },
  {
    "text": "with Swift concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1564"
  },
  {
    "text": "This is because they hide dependency information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1566"
  },
  {
    "text": "from the Swift runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1569"
  },
  {
    "text": "but introduce a dependency in execution in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1571"
  },
  {
    "text": "Since the runtime is unaware of this dependency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1575"
  },
  {
    "text": "it cannot make the right scheduling decisions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1578"
  },
  {
    "text": "and resolve them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1581"
  },
  {
    "text": "In particular, do not use primitives that create ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1583"
  },
  {
    "text": "unstructured tasks and then retroactively ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1586"
  },
  {
    "text": "introduce a dependency across task boundaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1589"
  },
  {
    "text": "by using a semaphore or an unsafe primitive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1593"
  },
  {
    "text": "Such a code pattern means that a thread can block indefinitely ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1596"
  },
  {
    "text": "against the semaphore until another thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1600"
  },
  {
    "text": "is able to unblock it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1603"
  },
  {
    "text": "This violates the runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1605"
  },
  {
    "text": "of forward progress for threads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1608"
  },
  {
    "text": "To help you identify uses of such unsafe primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1611"
  },
  {
    "text": "in your codebase, we recommend testing your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1615"
  },
  {
    "text": "with the following environment variable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1618"
  },
  {
    "text": "This runs your app under a modified debug runtime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1621"
  },
  {
    "text": "which enforces the invariant of forward progress. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1625"
  },
  {
    "text": "This environment variable can be set in Xcode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1631"
  },
  {
    "text": "on the Run Arguments pane of your project scheme ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1634"
  },
  {
    "text": "as shown here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1637"
  },
  {
    "text": "When running your apps with this environment variable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1641"
  },
  {
    "text": "if you see a thread from the cooperative thread pool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1644"
  },
  {
    "text": "that appears to be hung ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1647"
  },
  {
    "text": "it indicates the use of an unsafe blocking primitive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1648"
  },
  {
    "text": "Now, having learned about how the threading model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1653"
  },
  {
    "text": "has been designed for Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1656"
  },
  {
    "text": "let's discover a little bit more about the primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1658"
  },
  {
    "text": "that are available to us to synchronize state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1661"
  },
  {
    "text": "in this new world. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1664"
  },
  {
    "text": "Varun: In the Swift concurrency talk on actors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1667"
  },
  {
    "text": "you've seen how actors can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1669"
  },
  {
    "text": "to protect mutable state from concurrent access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1671"
  },
  {
    "text": "Put differently, actors provide a powerful new synchronization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1674"
  },
  {
    "text": "primitive that you can use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1678"
  },
  {
    "text": "Recall that actors guarantee mutual exclusion: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1681"
  },
  {
    "text": "an actor may be executing at most one method call at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1684"
  },
  {
    "text": "Mutual exclusion means that the actor's state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1688"
  },
  {
    "text": "is not accessed concurrently, preventing data races. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1691"
  },
  {
    "text": "Let's see how actors compare ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1695"
  },
  {
    "text": "to other forms of mutual exclusion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1697"
  },
  {
    "text": "Consider the earlier example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1701"
  },
  {
    "text": "of updating the database with some articles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1703"
  },
  {
    "text": "by syncing to a serial queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1705"
  },
  {
    "text": "If the queue is not already running ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1708"
  },
  {
    "text": "we say that there is no contention. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1710"
  },
  {
    "text": "In this case, the calling thread is reused to execute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1712"
  },
  {
    "text": "the new work item on the queue without any context switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1715"
  },
  {
    "text": "Instead, if the serial queue is already running ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1719"
  },
  {
    "text": "the queue is said to be under contention. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1723"
  },
  {
    "text": "In this situation, the calling thread is blocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1725"
  },
  {
    "text": "This blocking behavior is what triggered thread explosion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1729"
  },
  {
    "text": "as Rokhini described earlier in the talk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1732"
  },
  {
    "text": "Locks have this same behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1735"
  },
  {
    "text": "Because of the problems associated with blocking, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1738"
  },
  {
    "text": "we have generally advised ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1740"
  },
  {
    "text": "that you prefer using dispatch async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1742"
  },
  {
    "text": "The primary benefit of dispatch async is that it is nonblocking. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1745"
  },
  {
    "text": "So even under contention, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1750"
  },
  {
    "text": "it will not lead to thread explosion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1752"
  },
  {
    "text": "The downside of using dispatch async with a serial queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1754"
  },
  {
    "text": "is that when there is no contention ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1758"
  },
  {
    "text": "Dispatch needs to request a new thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1760"
  },
  {
    "text": "to do the async work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1762"
  },
  {
    "text": "while the calling thread continues to do something else. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1764"
  },
  {
    "text": "Hence, frequent use of dispatch async can lead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1767"
  },
  {
    "text": "to excess thread wakeups and context switches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1770"
  },
  {
    "text": "This brings us to actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1774"
  },
  {
    "text": "Swift's actors combine the best of both worlds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1777"
  },
  {
    "text": "by taking advantage of the cooperative thread pool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1780"
  },
  {
    "text": "for efficient scheduling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1782"
  },
  {
    "text": "When you call a method on an actor that is not running, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1785"
  },
  {
    "text": "the calling thread can be reused to execute the method call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1788"
  },
  {
    "text": "In the case where the called actor is already running, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1792"
  },
  {
    "text": "the calling thread can suspend the function it is executing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1795"
  },
  {
    "text": "and pick up other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1798"
  },
  {
    "text": "Let's look at how these two properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1800"
  },
  {
    "text": "work in the context of the example news app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1802"
  },
  {
    "text": "Let's focus on the database and networking subsystems. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1807"
  },
  {
    "text": "When updating the application to use Swift concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1811"
  },
  {
    "text": "the serial queue for the database ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1814"
  },
  {
    "text": "would be replaced by a database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1816"
  },
  {
    "text": "The concurrent queue for networking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1819"
  },
  {
    "text": "could be replaced by one actor for each news feed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1821"
  },
  {
    "text": "For simplicity, I've only shown three feed actors here -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1825"
  },
  {
    "text": "for the sports feed, the weather feed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1828"
  },
  {
    "text": "and the health feed -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1830"
  },
  {
    "text": "but in practice, there will be many more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1831"
  },
  {
    "text": "These actors would run on the cooperative thread pool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1834"
  },
  {
    "text": "The feed actors interact with the database ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1839"
  },
  {
    "text": "to save articles and perform other actions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1841"
  },
  {
    "text": "This interaction involves execution switching ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1845"
  },
  {
    "text": "from one actor to another. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1847"
  },
  {
    "text": "We call this process actor hopping. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1849"
  },
  {
    "text": "Let's discuss how actor hopping works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1852"
  },
  {
    "text": "Suppose that the actor for the sports feed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1855"
  },
  {
    "text": "is running on a thread from the cooperative pool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1858"
  },
  {
    "text": "and it decides to save some articles into the database. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1860"
  },
  {
    "text": "For now, let's consider that the database is not being used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1864"
  },
  {
    "text": "This is the uncontended case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1868"
  },
  {
    "text": "The thread can directly hop from the sports feed actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1870"
  },
  {
    "text": "to the database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1873"
  },
  {
    "text": "There are two things to notice here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1875"
  },
  {
    "text": "First, the thread did not block while hopping actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1878"
  },
  {
    "text": "Second, hopping did not require a different thread; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1882"
  },
  {
    "text": "the runtime can directly suspend ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1885"
  },
  {
    "text": "the work item for the sports feed actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1887"
  },
  {
    "text": "and create a new work item for the database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1889"
  },
  {
    "text": "Say the database actor runs for a while ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1894"
  },
  {
    "text": "but it has not completed the first work item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1896"
  },
  {
    "text": "At this moment, suppose that the weather feed actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1899"
  },
  {
    "text": "tries to save some articles in the database. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1902"
  },
  {
    "text": "This creates a new work item for the database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1906"
  },
  {
    "text": "An actor ensures safety by guaranteeing mutual exclusion; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1911"
  },
  {
    "text": "at most, one work item may be active at a given time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1914"
  },
  {
    "text": "Since there is already one active work item, D1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1918"
  },
  {
    "text": "the new work item, D2, will be kept pending. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1921"
  },
  {
    "text": "Actors are also nonblocking. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1925"
  },
  {
    "text": "In this situation, the weather feed actor will be suspended ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1927"
  },
  {
    "text": "and the thread it was executing on is now freed up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1932"
  },
  {
    "text": "to do other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1934"
  },
  {
    "text": "After a little while, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1937"
  },
  {
    "text": "the initial database request is completed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1938"
  },
  {
    "text": "so the active work item for the database actor is removed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1941"
  },
  {
    "text": "At this point, the runtime may choose to start executing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1946"
  },
  {
    "text": "the pending work item for the database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1949"
  },
  {
    "text": "Or it may choose to resume one of the feed actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1951"
  },
  {
    "text": "Or it could do some other work on the freed-up thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1954"
  },
  {
    "text": "When there is a lot of asynchronous work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1959"
  },
  {
    "text": "and especially a lot of contention, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1961"
  },
  {
    "text": "the system needs to make trade-offs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1963"
  },
  {
    "text": "based on what work is more important. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1964"
  },
  {
    "text": "Ideally, high-priority work such as that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1967"
  },
  {
    "text": "involving user interaction, would take precedence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1970"
  },
  {
    "text": "over background work, such as saving backups. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1972"
  },
  {
    "text": "Actors are designed to allow the system to prioritize work well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1975"
  },
  {
    "text": "due to the notion of reentrancy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1979"
  },
  {
    "text": "But to understand why reentrancy is important here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1981"
  },
  {
    "text": "let's first take a look at how GCD handles priorities. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1984"
  },
  {
    "text": "Consider the original news application ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1989"
  },
  {
    "text": "with the serial database queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1992"
  },
  {
    "text": "Suppose the database receives some high-priority work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1994"
  },
  {
    "text": "such as for fetching the latest data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1996"
  },
  {
    "text": "to update the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1998"
  },
  {
    "text": "It also receives low-priority work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=1999"
  },
  {
    "text": "such as for backing up the database to iCloud. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2001"
  },
  {
    "text": "This needs to be done at some point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2004"
  },
  {
    "text": "but not necessarily immediately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2006"
  },
  {
    "text": "As the code runs, new work items are created ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2009"
  },
  {
    "text": "and added to the database queue in some interleaved order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2012"
  },
  {
    "text": "Dispatch queues execute the items received ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2016"
  },
  {
    "text": "in a strict first-in, first-out order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2018"
  },
  {
    "text": "Unfortunately, this means that after item A has executed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2022"
  },
  {
    "text": "five low-priority items need to execute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2026"
  },
  {
    "text": "before getting to the next high-priority item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2028"
  },
  {
    "text": "This is called a priority inversion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2031"
  },
  {
    "text": "Serial queues work around priority inversion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2034"
  },
  {
    "text": "by boosting the priority of all of the work in the queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2037"
  },
  {
    "text": "that's ahead of the high-priority work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2040"
  },
  {
    "text": "In practice, this means that the work in the queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2042"
  },
  {
    "text": "will be done sooner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2045"
  },
  {
    "text": "However, it does not resolve the main issue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2048"
  },
  {
    "text": "which is that items 1 through 5 still needed to complete ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2051"
  },
  {
    "text": "before item B could start executing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2054"
  },
  {
    "text": "Solving this issue requires changing the semantic model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2057"
  },
  {
    "text": "away from strict first-in, first-out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2060"
  },
  {
    "text": "This brings us to actor reentrancy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2064"
  },
  {
    "text": "Let's explore how reentrancy is connected to ordering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2067"
  },
  {
    "text": "with an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2070"
  },
  {
    "text": "Consider the database actor executing on a thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2074"
  },
  {
    "text": "Suppose that it is suspended, awaiting some work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2077"
  },
  {
    "text": "and the sports feed actor starts executing on that thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2081"
  },
  {
    "text": "Suppose after a while, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2086"
  },
  {
    "text": "the sports feed actor calls the database actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2087"
  },
  {
    "text": "to save some articles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2090"
  },
  {
    "text": "Since the database actor is uncontended, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2093"
  },
  {
    "text": "the thread can hop to the database actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2096"
  },
  {
    "text": "even though it has one pending work item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2098"
  },
  {
    "text": "To perform the save operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2103"
  },
  {
    "text": "a new work item will be created for the database actor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2105"
  },
  {
    "text": "This is what actor reentrancy means; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2109"
  },
  {
    "text": "new work items on an actor can make progress ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2112"
  },
  {
    "text": "while one or more older work items on it are suspended. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2114"
  },
  {
    "text": "The actor still maintains mutual exclusion: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2118"
  },
  {
    "text": "at most one work item can be executing at a given time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2120"
  },
  {
    "text": "After some time, item D2 will finish executing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2125"
  },
  {
    "text": "Notice that D2 finished executing before D1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2129"
  },
  {
    "text": "even though it was created after D1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2132"
  },
  {
    "text": "Hence, support for actor reentrancy means ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2135"
  },
  {
    "text": "that actors can execute items in an order ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2138"
  },
  {
    "text": "that is not strictly first-in, first-out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2140"
  },
  {
    "text": "Let's revisit the example from before ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2145"
  },
  {
    "text": "but with a database actor instead of a serial queue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2147"
  },
  {
    "text": "First, work item A will execute, as it has high priority. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2151"
  },
  {
    "text": "Once that's done, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2155"
  },
  {
    "text": "there is the same priority inversion as before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2156"
  },
  {
    "text": "Since actors are designed for reentrancy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2160"
  },
  {
    "text": "the runtime may choose to move the higher-priority item ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2162"
  },
  {
    "text": "to the front of the queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2165"
  },
  {
    "text": "ahead of the lower-priority items. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2166"
  },
  {
    "text": "This way, higher-priority work could be executed first, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2170"
  },
  {
    "text": "with lower-priority work following later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2174"
  },
  {
    "text": "This directly addresses the problem of priority inversion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2177"
  },
  {
    "text": "allowing for more effective scheduling ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2180"
  },
  {
    "text": "and resource utilization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2183"
  },
  {
    "text": "I've talked a bit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2186"
  },
  {
    "text": "about how actors using the cooperative pool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2187"
  },
  {
    "text": "are designed to maintain mutual exclusion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2190"
  },
  {
    "text": "and support effective prioritization of work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2192"
  },
  {
    "text": "There is another kind of actor, the main actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2195"
  },
  {
    "text": "and its characteristics are somewhat different ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2198"
  },
  {
    "text": "since it abstracts over an existing notion in the system: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2201"
  },
  {
    "text": "the main thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2204"
  },
  {
    "text": "Consider the example news app using actors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2207"
  },
  {
    "text": "When updating the user interface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2210"
  },
  {
    "text": "you will need to make calls to and from MainActor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2212"
  },
  {
    "text": "Since the main thread is disjoint from the threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2216"
  },
  {
    "text": "in the cooperative pool, this requires a context switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2218"
  },
  {
    "text": "Let's look at the performance implications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2222"
  },
  {
    "text": "of this with a code example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2224"
  },
  {
    "text": "Consider the following code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2228"
  },
  {
    "text": "where we have a function updateArticles on MainActor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2229"
  },
  {
    "text": "which loads articles out of the database ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2233"
  },
  {
    "text": "and updates the UI for each article. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2235"
  },
  {
    "text": "Each iteration of the loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2239"
  },
  {
    "text": "requires at least two context switches: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2241"
  },
  {
    "text": "one to hop from the main actor to the database actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2243"
  },
  {
    "text": "and one to hop back. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2245"
  },
  {
    "text": "Let's see how the CPU usage for such a loop would look like. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2247"
  },
  {
    "text": "Since each loop iteration requires two context switches, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2253"
  },
  {
    "text": "there is a repeating pattern where two threads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2257"
  },
  {
    "text": "run one after another for a short span of time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2259"
  },
  {
    "text": "If the number of loop iterations is low, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2263"
  },
  {
    "text": "and substantial work is being done in each iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2265"
  },
  {
    "text": "that is probably all right. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2268"
  },
  {
    "text": "However, if execution hops on and off ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2271"
  },
  {
    "text": "the main actor frequently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2273"
  },
  {
    "text": "the overhead of switching threads can start to add up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2275"
  },
  {
    "text": "If your application spends a large fraction of time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2281"
  },
  {
    "text": "in context switching, you should restructure your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2283"
  },
  {
    "text": "so that work for the main actor is batched up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2287"
  },
  {
    "text": "You can batch work by pushing the loop into the loadArticles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2292"
  },
  {
    "text": "and updateUI method calls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2295"
  },
  {
    "text": "making sure they process arrays instead of one value at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2297"
  },
  {
    "text": "Batching up work reduces the number of context switches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2301"
  },
  {
    "text": "While hopping between actors on the cooperative pool is fast, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2305"
  },
  {
    "text": "you still need to be mindful of hops to and from the main actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2309"
  },
  {
    "text": "when writing your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2313"
  },
  {
    "text": "Looking back, in this talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2315"
  },
  {
    "text": "you've learned how we've worked on making the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2318"
  },
  {
    "text": "the most efficient it can be, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2320"
  },
  {
    "text": "from the design of the cooperative thread pool -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2322"
  },
  {
    "text": "the mechanism for nonblocking suspension -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2324"
  },
  {
    "text": "to how actors are implemented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2326"
  },
  {
    "text": "At each step, we're using some aspect of the runtime contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2328"
  },
  {
    "text": "to improve the performance of your applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2332"
  },
  {
    "text": "We are excited to see how you use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2335"
  },
  {
    "text": "these incredible new language features to write clear, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2337"
  },
  {
    "text": "efficient, and delightful Swift code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2340"
  },
  {
    "text": "Thank you for watching and have a great WWDC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2343"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10254/?time=2346"
  }
]