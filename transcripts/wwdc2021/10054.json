[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=6"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=7"
  },
  {
    "text": "Jeff Nadeau: Hi, and welcome to \"What's new in AppKit.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=9"
  },
  {
    "text": "I'm Jeff Nadeau. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=11"
  },
  {
    "text": "I work on AppKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=13"
  },
  {
    "text": "and I've got some great updates to share with you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=14"
  },
  {
    "text": "macOS Monterey includes some great new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=16"
  },
  {
    "text": "and enhancements for Mac apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=19"
  },
  {
    "text": "There's really something for everyone in this release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=21"
  },
  {
    "text": "including updates to our user interface design, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=23"
  },
  {
    "text": "enhancements to many of our controls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=27"
  },
  {
    "text": "a big update to SF Symbols, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=29"
  },
  {
    "text": "an all-new text engine called TextKit 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=33"
  },
  {
    "text": "powerful new Swift language features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=36"
  },
  {
    "text": "and automation with Shortcuts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=39"
  },
  {
    "text": "which is now available on the Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=41"
  },
  {
    "text": "Let's dive right in, starting with some updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=44"
  },
  {
    "text": "on the design of the macOS user interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=47"
  },
  {
    "text": "We're thrilled by the response to the system-wide redesign ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=50"
  },
  {
    "text": "that debuted in macOS Big Sur. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=52"
  },
  {
    "text": "So many of our favorite apps have updated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=55"
  },
  {
    "text": "to adopt the new design in only a few short months. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=57"
  },
  {
    "text": "In macOS Monterey, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=61"
  },
  {
    "text": "we've continued to iterate and refine this new design, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=63"
  },
  {
    "text": "so you'll notice a few new touches across the system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=66"
  },
  {
    "text": "Some of them are big and noticeable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=69"
  },
  {
    "text": "like popovers that now appear and recede ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=72"
  },
  {
    "text": "with a brand-new animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=74"
  },
  {
    "text": "or sliders that now smoothly glide into position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=77"
  },
  {
    "text": "when you click them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=80"
  },
  {
    "text": "There are also much more subtle changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=81"
  },
  {
    "text": "like refined metrics in toolbar controls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=84"
  },
  {
    "text": "and spring-loading support on the Search button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=87"
  },
  {
    "text": "so it's easy to drag in text and tokens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=89"
  },
  {
    "text": "And increased spacing between table sections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=92"
  },
  {
    "text": "to improve clarity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=95"
  },
  {
    "text": "We've continued to iterate and enhance the new design ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=97"
  },
  {
    "text": "down to the smallest details. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=99"
  },
  {
    "text": "And that leads me to some control enhancements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=101"
  },
  {
    "text": "that you can use to refine your own designs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=103"
  },
  {
    "text": "The first big one is control tinting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=106"
  },
  {
    "text": "We've enabled custom tinting of individual buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=109"
  },
  {
    "text": "segmented controls, and sliders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=112"
  },
  {
    "text": "Each of these controls accepts a custom tint color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=116"
  },
  {
    "text": "using one of these APIs: bezelColor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=119"
  },
  {
    "text": "selectedSegmentColor, and trackFillColor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=122"
  },
  {
    "text": "We introduced these APIs in macOS Sierra ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=126"
  },
  {
    "text": "to allow tinting of individual controls in the Touch Bar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=128"
  },
  {
    "text": "And starting in macOS Monterey, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=132"
  },
  {
    "text": "they're functional for in-window controls as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=134"
  },
  {
    "text": "To recap, most controls draw using the accent color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=137"
  },
  {
    "text": "which is configurable in System Preferences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=140"
  },
  {
    "text": "This allows people to theme their Mac ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=144"
  },
  {
    "text": "to match their favorite color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=145"
  },
  {
    "text": "The Multicolor option allows each app to define ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=147"
  },
  {
    "text": "its own custom color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=150"
  },
  {
    "text": "For pervasive theming, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=152"
  },
  {
    "text": "you can define a custom accent color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=153"
  },
  {
    "text": "in your app's asset catalog. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=155"
  },
  {
    "text": "The new tinting API provides a way to override the color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=158"
  },
  {
    "text": "for one specific control. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=161"
  },
  {
    "text": "This is great for controls where you'd like to apply ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=163"
  },
  {
    "text": "a semantically meaningful color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=165"
  },
  {
    "text": "For example, if your app uses a specific shade of orange ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=168"
  },
  {
    "text": "to distinguish a preorder from a normal purchase, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=171"
  },
  {
    "text": "you can reinforce that design using a tinted button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=174"
  },
  {
    "text": "Another example would be a video conferencing app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=178"
  },
  {
    "text": "where the Start and End Call buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=181"
  },
  {
    "text": "perform two of the most meaningful actions in the app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=183"
  },
  {
    "text": "Tinting them green and red adds emphasis ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=186"
  },
  {
    "text": "and it makes their function instantly recognizable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=189"
  },
  {
    "text": "One important note is that tinted buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=192"
  },
  {
    "text": "always show their tint color in every active state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=195"
  },
  {
    "text": "unlike ordinary push buttons which are white or gray. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=198"
  },
  {
    "text": "This puts your tint color front and center. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=201"
  },
  {
    "text": "However, take care in your design not to create confusion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=204"
  },
  {
    "text": "with the default button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=206"
  },
  {
    "text": "which also uses a colorful appearance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=208"
  },
  {
    "text": "Finally, it's important to convey your controls' purpose ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=211"
  },
  {
    "text": "using more than just color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=214"
  },
  {
    "text": "You want to make sure that people who have difficultly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=216"
  },
  {
    "text": "distinguishing between colors can still easily identify ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=218"
  },
  {
    "text": "the purpose of a given control, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=221"
  },
  {
    "text": "so be sure to provide a clear label or icon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=223"
  },
  {
    "text": "Another important button design change ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=227"
  },
  {
    "text": "is that push buttons no longer highlight ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=229"
  },
  {
    "text": "using the accent color on click. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=231"
  },
  {
    "text": "This brings them in line with other clickable elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=234"
  },
  {
    "text": "like segmented control segments, slider knobs, and steppers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=236"
  },
  {
    "text": "This is an important change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=241"
  },
  {
    "text": "because if you're doing any custom drawing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=243"
  },
  {
    "text": "that assumes a colorful appearance while highlighted -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=245"
  },
  {
    "text": "say, if you're choosing to draw white content over top -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=248"
  },
  {
    "text": "it might not look correct on macOS Monterey. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=251"
  },
  {
    "text": "Instead of checking for the highlight state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=255"
  },
  {
    "text": "you can drive your drawing decisions using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=257"
  },
  {
    "text": "the interiorBackgroundStyle property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=259"
  },
  {
    "text": "This property reflects the underlying style ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=262"
  },
  {
    "text": "of the button bezel, so it'll always return .normal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=264"
  },
  {
    "text": "for colorless states, and it'll return .emphasized ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=267"
  },
  {
    "text": "for those colorful emphasis states, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=270"
  },
  {
    "text": "like tinted buttons, default buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=273"
  },
  {
    "text": "and buttons that are toggled into an \"on\" state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=275"
  },
  {
    "text": "Finally, we've updated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=279"
  },
  {
    "text": "the Flexible Push style of button -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=280"
  },
  {
    "text": "previously known as Regular Square -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=282"
  },
  {
    "text": "to serve as a variable-height push button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=284"
  },
  {
    "text": "It now supports all of the same configurations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=287"
  },
  {
    "text": "as an ordinary push button, which means that it can serve ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=289"
  },
  {
    "text": "as the default button, and you can tint it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=292"
  },
  {
    "text": "The corner radius and content padding now match those ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=295"
  },
  {
    "text": "of a standard push button at each control size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=298"
  },
  {
    "text": "so they'll fit in great with your other controls, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=301"
  },
  {
    "text": "but their vertically resizable design ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=304"
  },
  {
    "text": "means that they can accommodate larger icons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=306"
  },
  {
    "text": "or text with line breaks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=308"
  },
  {
    "text": "While the vast majority of push buttons should continue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=311"
  },
  {
    "text": "to use the standard fixed-height style, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=313"
  },
  {
    "text": "this newly expanded style offers some flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=316"
  },
  {
    "text": "for those special cases when you need to accommodate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=318"
  },
  {
    "text": "taller content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=321"
  },
  {
    "text": "Another very important control update comes in the form ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=323"
  },
  {
    "text": "of automatic localization for menu keyboard shortcuts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=325"
  },
  {
    "text": "There are a lot of keyboard layouts out there in the world, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=330"
  },
  {
    "text": "and that can make localizing keyboard shortcuts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=332"
  },
  {
    "text": "fairly complex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=334"
  },
  {
    "text": "Some key combinations are hard to reach on some keyboards, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=337"
  },
  {
    "text": "and others can't be typed at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=339"
  },
  {
    "text": "In addition, some directional keyboard shortcuts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=342"
  },
  {
    "text": "really ought to mirror in right-to-left languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=345"
  },
  {
    "text": "The great news is, in macOS Monterey, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=348"
  },
  {
    "text": "AppKit can do it for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=350"
  },
  {
    "text": "Here's an example of a shortcut ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=353"
  },
  {
    "text": "that could benefit from localization: Command-backslash. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=354"
  },
  {
    "text": "While this works fine on a US English keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=358"
  },
  {
    "text": "it's actually impossible to type on a Japanese keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=361"
  },
  {
    "text": "which doesn't have a backslash key at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=364"
  },
  {
    "text": "Starting in macOS Monterey, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=367"
  },
  {
    "text": "the system remaps the shortcut automatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=369"
  },
  {
    "text": "providing an equivalent shortcut that's natural to type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=371"
  },
  {
    "text": "Another common case is a keyboard shortcut ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=375"
  },
  {
    "text": "that has directional meaning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=377"
  },
  {
    "text": "For example, Safari uses Command-square brackets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=379"
  },
  {
    "text": "to go backward and forward in history. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=382"
  },
  {
    "text": "In a right-to-left language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=385"
  },
  {
    "text": "using the left bracket to go backward isn't very intuitive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=386"
  },
  {
    "text": "so AppKit now automatically swaps it to the right bracket ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=390"
  },
  {
    "text": "when running in a right-to-left language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=393"
  },
  {
    "text": "This behavior applies to brackets, braces, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=395"
  },
  {
    "text": "parentheses, and arrow keys. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=398"
  },
  {
    "text": "In some cases, you might want to disable this mirroring behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=400"
  },
  {
    "text": "For example, if your menu item has absolute directionality -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=404"
  },
  {
    "text": "like align left, for example -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=407"
  },
  {
    "text": "you'd want to use the left bracket ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=409"
  },
  {
    "text": "even in a right-to-left language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=411"
  },
  {
    "text": "We've provided an opt-out for cases just like this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=413"
  },
  {
    "text": "You can control this behavior using some new properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=417"
  },
  {
    "text": "on NSMenuItem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=419"
  },
  {
    "text": "allowsAutomaticKey EquivalentMirroring ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=421"
  },
  {
    "text": "lets you control the mirroring behavior ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=424"
  },
  {
    "text": "for directional keys like  brackets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=426"
  },
  {
    "text": "and allowsAutomaticKey EquivalentLocalization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=428"
  },
  {
    "text": "controls all of the localization features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=431"
  },
  {
    "text": "including keyboard mapping and mirroring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=433"
  },
  {
    "text": "If you've already carefully localized ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=438"
  },
  {
    "text": "your keyboard shortcuts, or if your application has ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=439"
  },
  {
    "text": "a heavily custom implementation of keyboard shortcut bindings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=443"
  },
  {
    "text": "you might want to disable this feature for your entire app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=446"
  },
  {
    "text": "To do that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=450"
  },
  {
    "text": "you can implement this application delegate method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=451"
  },
  {
    "text": "applicationShouldAutomatically LocalizeKeyEquivalents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=454"
  },
  {
    "text": "and return false. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=457"
  },
  {
    "text": "Most apps won't need to use this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=459"
  },
  {
    "text": "The individual menu item APIs are strongly preferred ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=461"
  },
  {
    "text": "for opting out specific items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=464"
  },
  {
    "text": "and most apps shouldn't need to opt out at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=466"
  },
  {
    "text": "Next up, some big enhancements to symbol images. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=469"
  },
  {
    "text": "We brought SF Symbols to macOS in Big Sur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=473"
  },
  {
    "text": "opening up a massive repertoire of beautiful, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=476"
  },
  {
    "text": "typographically balanced symbol images to all Mac apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=478"
  },
  {
    "text": "In macOS Monterey, we've built a new generation of symbol APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=483"
  },
  {
    "text": "and tooling that we call SF Symbols 3. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=487"
  },
  {
    "text": "It's a huge update that spans every aspect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=491"
  },
  {
    "text": "of the symbol image workflow, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=493"
  },
  {
    "text": "and it's all available to your AppKit applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=495"
  },
  {
    "text": "SF Symbols 3 expands the capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=498"
  },
  {
    "text": "of the SF Symbols app for previewing, exporting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=500"
  },
  {
    "text": "and importing symbol images. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=503"
  },
  {
    "text": "It also comes with an updated format ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=506"
  },
  {
    "text": "for annotating custom symbols, which allows you to define ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=508"
  },
  {
    "text": "distinct layers within a symbol image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=511"
  },
  {
    "text": "and we've expanded our APIs in AppKit, UIKit, and SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=514"
  },
  {
    "text": "to allow to you to individually color each layer of a symbol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=518"
  },
  {
    "text": "In Big Sur, we offered two distinct rendering modes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=522"
  },
  {
    "text": "for symbols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=525"
  },
  {
    "text": "First, there was the traditional Template style, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=526"
  },
  {
    "text": "which draws using a single tint color or effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=529"
  },
  {
    "text": "over the entire symbol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=532"
  },
  {
    "text": "The second is Multicolor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=534"
  },
  {
    "text": "which draws more like a full-color image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=536"
  },
  {
    "text": "drawing each path element using a color that's defined ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=538"
  },
  {
    "text": "in the symbol image itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=541"
  },
  {
    "text": "In SF Symbols 3, we've added two new rendering modes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=544"
  },
  {
    "text": "which take advantage of the layer information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=547"
  },
  {
    "text": "provided by the new symbol image format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=549"
  },
  {
    "text": "The first, Hierarchical, draws using a single color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=552"
  },
  {
    "text": "while putting emphasis on specific parts of the symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=556"
  },
  {
    "text": "while deemphasizing others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=559"
  },
  {
    "text": "And the second, Palette, lets you assign any color you'd like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=562"
  },
  {
    "text": "to each layer of the symbol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=565"
  },
  {
    "text": "You can access these rendering modes using new API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=568"
  },
  {
    "text": "on NSImage.SymbolConfiguration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=571"
  },
  {
    "text": "I'm representing the NSColor parameters as dots ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=574"
  },
  {
    "text": "to show how they correspond with the rendered symbol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=576"
  },
  {
    "text": "The Hierarchical rendering mode take a single color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=580"
  },
  {
    "text": "which is applied to the symbol layers with decreasing opacity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=582"
  },
  {
    "text": "The Palette mode accepts an array of colors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=586"
  },
  {
    "text": "which are applied to the layers verbatim. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=588"
  },
  {
    "text": "You can also create a configuration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=591"
  },
  {
    "text": "that prefers the Multicolor rendering mode.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=592"
  },
  {
    "text": "We've also added a new API that lets you map ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=598"
  },
  {
    "text": "from one base symbol into one of its variants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=601"
  },
  {
    "text": "For example, you could map the heart symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=604"
  },
  {
    "text": "to its filled variant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=607"
  },
  {
    "text": "or an inscribed variant like circle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=609"
  },
  {
    "text": "or even to the variant that has a slash through it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=611"
  },
  {
    "text": "This is really useful for situations where ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=614"
  },
  {
    "text": "you prefer a particular style of symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=616"
  },
  {
    "text": "for a particular context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=618"
  },
  {
    "text": "For example, you might have a picker control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=621"
  },
  {
    "text": "where you prefer outlines for the unselected states, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=623"
  },
  {
    "text": "but a filled style for your selection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=626"
  },
  {
    "text": "Normally, this control would need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=628"
  },
  {
    "text": "two different image properties to specify the selected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=630"
  },
  {
    "text": "and unselected versions of the image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=633"
  },
  {
    "text": "But with the variants API, it could just accept ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=635"
  },
  {
    "text": "a single base symbol and derive the filled state automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=638"
  },
  {
    "text": "This control could call image(with: .fill) ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=644"
  },
  {
    "text": "to prefer a filled symbol in its selection state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=646"
  },
  {
    "text": "and it'll automatically choose the right version of the symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=649"
  },
  {
    "text": "whenever a filled variant is available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=652"
  },
  {
    "text": "There are constants for each type of symbol variant, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=654"
  },
  {
    "text": "and you can combine them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=657"
  },
  {
    "text": "to request multiple variants together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=658"
  },
  {
    "text": "like circle and fill. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=661"
  },
  {
    "text": "This was just a brief introduction to the features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=663"
  },
  {
    "text": "of SF Symbols 3. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=665"
  },
  {
    "text": "There's a new collection of videos where you can get ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=668"
  },
  {
    "text": "the full details on everything that's new ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=669"
  },
  {
    "text": "across the entire symbols workflow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=672"
  },
  {
    "text": "Be sure to add them to your watch list. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=674"
  },
  {
    "text": "macOS Monterey also features a huge update to the text system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=677"
  },
  {
    "text": "in the form of TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=680"
  },
  {
    "text": "TextKit is the text layout and rendering engine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=682"
  },
  {
    "text": "for all Apple devices, and it's a great text engine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=685"
  },
  {
    "text": "with a proven track record. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=687"
  },
  {
    "text": "TextKit is a linear text layout engine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=690"
  },
  {
    "text": "which means that it typesets a block of text ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=692"
  },
  {
    "text": "from beginning to end. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=694"
  },
  {
    "text": "As we've evolved our platforms and technologies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=696"
  },
  {
    "text": "we've found a lot of cases where nonlinear text layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=699"
  },
  {
    "text": "would serve us much better. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=702"
  },
  {
    "text": "So we went back to the basics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=704"
  },
  {
    "text": "and created a new version of TextKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=706"
  },
  {
    "text": "and that's TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=708"
  },
  {
    "text": "We had a few key goals for TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=712"
  },
  {
    "text": "As always, we want to provide the very best experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=715"
  },
  {
    "text": "for international text of every script and layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=717"
  },
  {
    "text": "We also want to make it easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=721"
  },
  {
    "text": "to mix text with other types of content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=722"
  },
  {
    "text": "And finally, TextKit 2 is designed to be super fast, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=725"
  },
  {
    "text": "efficiently shaping and rendering text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=729"
  },
  {
    "text": "whether it's a short label ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=731"
  },
  {
    "text": "or scrolled partway through a massive document. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=733"
  },
  {
    "text": "TextKit 2 coexists with TextKit 1, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=737"
  },
  {
    "text": "so you can choose which engine to use for a given text view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=740"
  },
  {
    "text": "Now I'm going to let you in on a secret. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=743"
  },
  {
    "text": "You're already running TextKit 2 on your Mac ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=745"
  },
  {
    "text": "because starting in Big Sur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=748"
  },
  {
    "text": "TextEdit uses it for plain text documents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=750"
  },
  {
    "text": "and AppKit text fields use TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=752"
  },
  {
    "text": "for most configurations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=754"
  },
  {
    "text": "So you've actually been getting a sneak peek this entire time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=756"
  },
  {
    "text": "One of the key differences in TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=760"
  },
  {
    "text": "is that it always uses a nonlinear layout system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=761"
  },
  {
    "text": "That means that it can perform text layout ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=765"
  },
  {
    "text": "at a more granular level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=767"
  },
  {
    "text": "which allows it to avoid unnecessary work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=769"
  },
  {
    "text": "For example, if we have a large document ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=772"
  },
  {
    "text": "where only a portion of the text is scrolled to be visible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=775"
  },
  {
    "text": "a linear system still has to lay out all of the previous text ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=778"
  },
  {
    "text": "in order to show this region. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=781"
  },
  {
    "text": "By comparison, a nonlinear system like TextKit 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=784"
  },
  {
    "text": "can start layout at the nearest paragraph boundary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=788"
  },
  {
    "text": "For large documents, this is a huge speedup. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=791"
  },
  {
    "text": "The new layout engine provides a robust set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=794"
  },
  {
    "text": "of customization points, making it simple ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=796"
  },
  {
    "text": "to extend the layout system and add your own behaviors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=798"
  },
  {
    "text": "The nonlinear layout system also lends itself well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=802"
  },
  {
    "text": "to mixing nontext elements into your text layout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=805"
  },
  {
    "text": "And it does all of this while improving performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=809"
  },
  {
    "text": "for even the largest documents. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=811"
  },
  {
    "text": "To learn more, check out \"Meet TextKit 2,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=813"
  },
  {
    "text": "which goes into full detail about the design of the new API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=816"
  },
  {
    "text": "and how to use it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=819"
  },
  {
    "text": "Next up, I'd like to share some updates about AppKit in Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=821"
  },
  {
    "text": "starting with concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=826"
  },
  {
    "text": "Swift 5.5 introduces some important ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=829"
  },
  {
    "text": "language-level features for managing concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=831"
  },
  {
    "text": "The first, async/await, allows for asynchronous method calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=834"
  },
  {
    "text": "that behave a lot like coroutines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=839"
  },
  {
    "text": "The second, actor types, protect mutable state from data races ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=841"
  },
  {
    "text": "by isolating accesses to a single thread of execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=846"
  },
  {
    "text": "AppKit works great with both of these new features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=849"
  },
  {
    "text": "For async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=852"
  },
  {
    "text": "many asynchronous methods in AppKit -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=854"
  },
  {
    "text": "that is, methods that take a continuation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=856"
  },
  {
    "text": "as a completion handler block -- have been transformed in the SDK ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=858"
  },
  {
    "text": "to offer async variants as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=862"
  },
  {
    "text": "One simple example is NSColorSampler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=865"
  },
  {
    "text": "which allows the user to pick a color from anywhere onscreen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=867"
  },
  {
    "text": "This call is asynchronous because it waits for the user ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=871"
  },
  {
    "text": "to pick the color they'd like, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=874"
  },
  {
    "text": "and then it runs the completion handler when they're done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=876"
  },
  {
    "text": "With async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=879"
  },
  {
    "text": "you can express this as an async function call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=880"
  },
  {
    "text": "It yields its thread of execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=883"
  },
  {
    "text": "while it's waiting for the asynchronous work to complete, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=885"
  },
  {
    "text": "and then it picks right back up where it left off. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=888"
  },
  {
    "text": "You can even do it from within a guard statement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=891"
  },
  {
    "text": "Now, the continuation -- the work to be done next -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=893"
  },
  {
    "text": "is no longer nested inside a completion handler block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=897"
  },
  {
    "text": "Instead, the code reads naturally in sequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=900"
  },
  {
    "text": "Actors work to protect state from concurrent access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=906"
  },
  {
    "text": "by isolating it to a single thread of execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=908"
  },
  {
    "text": "If that sounds familiar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=912"
  },
  {
    "text": "it's because most of AppKit's state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=913"
  },
  {
    "text": "like the view hierarchy and responder chain, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=915"
  },
  {
    "text": "should also be accessed from a single thread of execution, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=918"
  },
  {
    "text": "specifically the main thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=921"
  },
  {
    "text": "This restriction fits the actor model nicely, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=924"
  },
  {
    "text": "so we've introduced the concept of a MainActor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=926"
  },
  {
    "text": "which is a type that has to be accessed from the main thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=929"
  },
  {
    "text": "In AppKit, we've designated NSResponder ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=934"
  },
  {
    "text": "including its subclasses of NSView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=937"
  },
  {
    "text": "ViewController, WindowController, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=940"
  },
  {
    "text": "and Application, plus NSCell, Alert, Document, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=942"
  },
  {
    "text": "and DocumentController as MainActors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=946"
  },
  {
    "text": "Code running in a MainActor can freely call methods ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=951"
  },
  {
    "text": "on other MainActor types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=954"
  },
  {
    "text": "since you know that you're already on the main thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=956"
  },
  {
    "text": "However, code that's not running in the MainActor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=959"
  },
  {
    "text": "must use the new async/await features to perform that UI work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=962"
  },
  {
    "text": "in the context of the MainActor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=966"
  },
  {
    "text": "By enforcing this at the compiler level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=969"
  },
  {
    "text": "Swift can help you avoid a common source of bugs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=971"
  },
  {
    "text": "when mixing concurrency with UI code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=974"
  },
  {
    "text": "The Swift concurrency videos go into great depth ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=977"
  },
  {
    "text": "about this powerful new language feature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=979"
  },
  {
    "text": "You don't want to miss them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=981"
  },
  {
    "text": "Also new in Swift 5.5 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=984"
  },
  {
    "text": "is a value-typed version of AttributedString. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=986"
  },
  {
    "text": "On top of providing value semantics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=990"
  },
  {
    "text": "it also has type-safe attributes and great Swift ergonomics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=992"
  },
  {
    "text": "for enumerating and manipulating ranges of attributes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=995"
  },
  {
    "text": "When you're using AttributedString with AppKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=999"
  },
  {
    "text": "you'll automatically get access to the attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1001"
  },
  {
    "text": "that are relevant to our text drawing system; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1004"
  },
  {
    "text": "things like foreground color, paragraph style, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1007"
  },
  {
    "text": "You can convert between struct AttributedString ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1011"
  },
  {
    "text": "and the reference-typed NSAttributedString, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1013"
  },
  {
    "text": "so you can interoperate with APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1016"
  },
  {
    "text": "that use NSAttributedString. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1017"
  },
  {
    "text": "The \"What's new in Foundation\" video goes into more detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1020"
  },
  {
    "text": "on AttributedString's design and how to use it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1023"
  },
  {
    "text": "Our last Swift enhancement has to do with driving updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1026"
  },
  {
    "text": "to your NSViews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1029"
  },
  {
    "text": "It uses Swift's property wrapper feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1031"
  },
  {
    "text": "to dramatically reduce the boilerplate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1033"
  },
  {
    "text": "that's common in view properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1035"
  },
  {
    "text": "Let's go over an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1037"
  },
  {
    "text": "Here's a custom view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1039"
  },
  {
    "text": "that's configurable via a handful of properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1040"
  },
  {
    "text": "And while this looks fine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1043"
  },
  {
    "text": "the reality is that our view's property declarations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1045"
  },
  {
    "text": "are much more likely to contain a lot of didSets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1047"
  },
  {
    "text": "and extra side effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1050"
  },
  {
    "text": "because it's so common that you need to redraw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1052"
  },
  {
    "text": "or layout, or update your constraints ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1054"
  },
  {
    "text": "when something changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1056"
  },
  {
    "text": "Now, that's a lot of boilerplate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1058"
  },
  {
    "text": "So we made this scenario better ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1060"
  },
  {
    "text": "by creating a new Swift property wrapper just for this case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1062"
  },
  {
    "text": "It's called Invalidating. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1066"
  },
  {
    "text": "It's nested under NSView, and it allows you to specify ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1068"
  },
  {
    "text": "one or more aspects of the view to invalidate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1071"
  },
  {
    "text": "when the wrapped property changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1074"
  },
  {
    "text": "All of the didSets and brackets fall away, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1077"
  },
  {
    "text": "making it easier to focus on the definition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1080"
  },
  {
    "text": "of the property itself.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1082"
  },
  {
    "text": "AppKit provides several built-in invalidation cases: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1086"
  },
  {
    "text": "display, layout, constraints, intrinsic content size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1089"
  },
  {
    "text": "and restorable state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1093"
  },
  {
    "text": "Since these invalidations only make sense on views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1096"
  },
  {
    "text": "we've constrained the property wrapper ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1099"
  },
  {
    "text": "so that it only works on subclasses of NSView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1101"
  },
  {
    "text": "We also require that the value conforms to Equatable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1105"
  },
  {
    "text": "We use this conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1109"
  },
  {
    "text": "to check for meaningful changes in value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1110"
  },
  {
    "text": "before performing a potentially expensive redraw or layout pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1112"
  },
  {
    "text": "If you'd like to do something custom, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1117"
  },
  {
    "text": "you can even define your own invalidation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1119"
  },
  {
    "text": "by conforming a type to the NSViewInvalidating protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1121"
  },
  {
    "text": "Finally, Shortcuts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1126"
  },
  {
    "text": "In macOS Monterey, we're excited to bring the full power ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1129"
  },
  {
    "text": "of Shortcuts to the Mac, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1132"
  },
  {
    "text": "and that includes integrating Shortcuts with your AppKit apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1133"
  },
  {
    "text": "The great news is, if you app supports Services, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1136"
  },
  {
    "text": "then it already supports Shortcuts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1139"
  },
  {
    "text": "and Shortcuts appear in all of the same places ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1141"
  },
  {
    "text": "where you can access Services today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1143"
  },
  {
    "text": "If you're new to this functionality, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1147"
  },
  {
    "text": "it's really easy to adopt. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1148"
  },
  {
    "text": "AppKit decides which shortcuts are contextually-appropriate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1150"
  },
  {
    "text": "by checking the responder chain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1153"
  },
  {
    "text": "It asks each responder whether it can provide or receive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1156"
  },
  {
    "text": "the types of data expected by each shortcut. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1159"
  },
  {
    "text": "We express this using a pasteboard type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1163"
  },
  {
    "text": "which in most cases, corresponds to a uniform type identifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1165"
  },
  {
    "text": "All you have to do is implement the validRequestor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1169"
  },
  {
    "text": "for sendType and returnType method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1171"
  },
  {
    "text": "And if you can accept or provide the specified types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1174"
  },
  {
    "text": "return an object conforming to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1177"
  },
  {
    "text": "the NSServicesMenuRequestor protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1178"
  },
  {
    "text": "In most cases, you'll just implement that protocol directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1182"
  },
  {
    "text": "and then return self. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1185"
  },
  {
    "text": "Once a Shortcut is invoked, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1186"
  },
  {
    "text": "you'll get calls to write and/or read data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1188"
  },
  {
    "text": "from a special pasteboard that the Shortcut uses ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1190"
  },
  {
    "text": "for its input and output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1193"
  },
  {
    "text": "And that's it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1195"
  },
  {
    "text": "It's that easy to integrate your app with Shortcuts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1196"
  },
  {
    "text": "We've also brought Siri Intents to macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1199"
  },
  {
    "text": "You can now handle Intents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1202"
  },
  {
    "text": "by creating an Intents Extension in Xcode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1203"
  },
  {
    "text": "Or, if you need to handle them from your main application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1206"
  },
  {
    "text": "you can return an Intent handler from your application delegate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1209"
  },
  {
    "text": "In your app delegate, implement the ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1213"
  },
  {
    "text": "application handlerFor intent: method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1215"
  },
  {
    "text": "returning a handler object for any intent that you can handle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1218"
  },
  {
    "text": "Every type of intent has its own handler protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1221"
  },
  {
    "text": "that the returned object must conform to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1224"
  },
  {
    "text": "so check the Intents framework documentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1226"
  },
  {
    "text": "for more details on implementing a handler object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1229"
  },
  {
    "text": "Now that you're equipped with all of this new information, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1233"
  },
  {
    "text": "what's next? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1235"
  },
  {
    "text": "First, think about how features like control tinting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1237"
  },
  {
    "text": "and SF Symbols 3 can help you enhance the design of your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1240"
  },
  {
    "text": "Next, if your app uses TextKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1244"
  },
  {
    "text": "to create a custom text experience, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1246"
  },
  {
    "text": "watch the \"Meet TextKit 2\" video and try out the new API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1248"
  },
  {
    "text": "You're going to love how easy it is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1252"
  },
  {
    "text": "to express custom layouts and rich content with TextKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1254"
  },
  {
    "text": "The that way your app manages concurrency is a key part ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1260"
  },
  {
    "text": "of its architecture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1263"
  },
  {
    "text": "and Swift's new concurrency features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1264"
  },
  {
    "text": "will be a huge improvement in this area. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1266"
  },
  {
    "text": "Now is the time to start planning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1268"
  },
  {
    "text": "for how features like async/await will shape ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1270"
  },
  {
    "text": "the way your app manages its concurrent workloads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1272"
  },
  {
    "text": "Finally, get your app ready for Shortcuts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1276"
  },
  {
    "text": "by adopting AppKit's automation features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1278"
  },
  {
    "text": "Thanks for your time and attention. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1281"
  },
  {
    "text": "We hope you enjoy all of these great enhancements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1283"
  },
  {
    "text": "in macOS Monterey. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1285"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10054/?time=1286"
  }
]