[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=0"
  },
  {
    "text": "Hi, my name is Tanuja, and I'm an engineer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=10"
  },
  {
    "text": "on the OS Performance team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=12"
  },
  {
    "text": "Today Stefan and I are going to talk about how to detect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=14"
  },
  {
    "text": "and diagnose memory issues in your applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=17"
  },
  {
    "text": "We will start with looking into the impact ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=21"
  },
  {
    "text": "of an application's memory footprint.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=24"
  },
  {
    "text": "We will then talk about the tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=27"
  },
  {
    "text": "to profile your memory usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=29"
  },
  {
    "text": "and the types of memory issues you may encounter.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=30"
  },
  {
    "text": "Let's jump right in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=34"
  },
  {
    "text": "One question you might immediately ask is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=38"
  },
  {
    "text": "why should I care about my application's memory footprint? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=40"
  },
  {
    "text": "The key reason is that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=44"
  },
  {
    "text": "it improves your app's user experience tremendously. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=46"
  },
  {
    "text": "There is a finite amount of memory on the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=49"
  },
  {
    "text": "and monitoring your app's memory use can prevent the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=53"
  },
  {
    "text": "from terminating your app to reclaim that memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=56"
  },
  {
    "text": "This means your app can preserve its state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=60"
  },
  {
    "text": "when in the background, which is great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=62"
  },
  {
    "text": "because loading into memory takes time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=64"
  },
  {
    "text": "and keeping your memory footprint compact ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=66"
  },
  {
    "text": "increases the chance of your application ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=68"
  },
  {
    "text": "remaining in memory, leading to faster app activations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=71"
  },
  {
    "text": "Reducing your memory use also results in a dynamic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=76"
  },
  {
    "text": "responsive experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=79"
  },
  {
    "text": "which is exactly what your users want ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=81"
  },
  {
    "text": "as they explore your new features.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=83"
  },
  {
    "text": "By being strategic about with what your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=86"
  },
  {
    "text": "has loaded into memory, your app can avoid the cost of waiting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=88"
  },
  {
    "text": "to reclaim memory as your user interacts with your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=92"
  },
  {
    "text": "Being strategic about your memory usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=96"
  },
  {
    "text": "also opens the door to a wider range of features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=99"
  },
  {
    "text": "you could add to your app, such as loading videos, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=101"
  },
  {
    "text": "including animations, and a whole lot more.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=104"
  },
  {
    "text": "Finally, our devices are constantly evolving over time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=108"
  },
  {
    "text": "and our newer devices have more physical memory than before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=112"
  },
  {
    "text": "By reducing your memory footprint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=116"
  },
  {
    "text": "your app will be just as performant on older devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=117"
  },
  {
    "text": "increasing the audience that can enjoy your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=120"
  },
  {
    "text": "By monitoring your app's memory footprint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=125"
  },
  {
    "text": "your app will activate faster, be more responsive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=127"
  },
  {
    "text": "handle complex features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=130"
  },
  {
    "text": "and be performant on a wider range of devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=131"
  },
  {
    "text": "Let's now take a look at what makes up your memory footprint.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=135"
  },
  {
    "text": "There are three categories we use to break down ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=140"
  },
  {
    "text": "your application's memory profile: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=141"
  },
  {
    "text": "dirty, compressed, and clean memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=144"
  },
  {
    "text": "Let's take a quick look at what each of these includes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=147"
  },
  {
    "text": "Dirty memory consists of memory written by your application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=151"
  },
  {
    "text": "It also includes all heap allocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=155"
  },
  {
    "text": "such as when you use malloc, decoded image buffers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=158"
  },
  {
    "text": "and frameworks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=161"
  },
  {
    "text": "Compressed memory refers to any dirty pages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=164"
  },
  {
    "text": "that haven't recently been accessed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=167"
  },
  {
    "text": "that the memory compressor has compressed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=169"
  },
  {
    "text": "These pages will be decompressed on access.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=172"
  },
  {
    "text": "Note that we do not have the concept of swap on iOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=176"
  },
  {
    "text": "which is specific to macOS.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=179"
  },
  {
    "text": "And finally, we have clean memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=183"
  },
  {
    "text": "Clean memory is memory that has not been written to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=185"
  },
  {
    "text": "or data that can be paged out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=188"
  },
  {
    "text": "For example, these can be memory mapped files ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=190"
  },
  {
    "text": "such as images that are on disk but loaded into memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=192"
  },
  {
    "text": "Or they can be frameworks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=196"
  },
  {
    "text": "When we refer your application's memory footprint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=200"
  },
  {
    "text": "we're really talking the your app's dirty memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=202"
  },
  {
    "text": "and compressed memory together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=205"
  },
  {
    "text": "Clean memory does not count here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=207"
  },
  {
    "text": "This is a high-level understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=211"
  },
  {
    "text": "of your memory footprint. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=212"
  },
  {
    "text": "For a more in-depth, detailed explanation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=214"
  },
  {
    "text": "we recommend you check out the iOS memory deep dive talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=217"
  },
  {
    "text": "from WWDC 2018. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=220"
  },
  {
    "text": "Let's now take a look at the tools you can use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=223"
  },
  {
    "text": "to profile your memory footprint.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=226"
  },
  {
    "text": "Xcode offers a suite of tools to help monitor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=229"
  },
  {
    "text": "your app's memory performance throughout ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=232"
  },
  {
    "text": "both the development and production workflows.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=233"
  },
  {
    "text": "The XCTest framework helps you monitor your memory footprint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=238"
  },
  {
    "text": "directly in your project's unit and UI tests, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=241"
  },
  {
    "text": "while MetricKit and the Xcode Organizer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=244"
  },
  {
    "text": "allow you to monitor memory metrics in production ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=246"
  },
  {
    "text": "from your customers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=248"
  },
  {
    "text": "The continuation of this talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=252"
  },
  {
    "text": "will be in the context of using performance XCTests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=253"
  },
  {
    "text": "But note that these techniques still apply ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=256"
  },
  {
    "text": "to general memory triage and investigations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=259"
  },
  {
    "text": "Using performance XCTests, you can measure system resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=263"
  },
  {
    "text": "such as memory utilization, CPU usage, disk writes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=267"
  },
  {
    "text": "and a whole lot more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=270"
  },
  {
    "text": "Let's take a look at ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=272"
  },
  {
    "text": "an example test together.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=274"
  },
  {
    "text": "Let's say I'm an app developer at Meal Planner, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=277"
  },
  {
    "text": "an app that helps you organize what you will eat in a week, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=280"
  },
  {
    "text": "and I want to measure the memory usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=283"
  },
  {
    "text": "of this new save meal feature I've added ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=285"
  },
  {
    "text": "that lets user download the recipe to their device.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=287"
  },
  {
    "text": "In my performance test, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=292"
  },
  {
    "text": "I'm using the measure(metrics:options:block:) API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=293"
  },
  {
    "text": "and I'm specifying that I want to measure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=296"
  },
  {
    "text": "the memory use of my targeted application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=299"
  },
  {
    "text": "In the body of the measure block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=303"
  },
  {
    "text": "I'm launching the application, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=304"
  },
  {
    "text": "manually telling the measure API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=306"
  },
  {
    "text": "to start measuring, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=308"
  },
  {
    "text": "and then tapping on the save meal button.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=310"
  },
  {
    "text": "I wait up to 30 seconds for the recipe download ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=314"
  },
  {
    "text": "to complete by checking for an update in the UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=317"
  },
  {
    "text": "Now I can run this test directly in Xcode's UI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=322"
  },
  {
    "text": "to view my measurements.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=324"
  },
  {
    "text": "I can access my measurements by clicking on ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=328"
  },
  {
    "text": "the gray diamond next to my test. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=330"
  },
  {
    "text": "The results popover UI has a drop down ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=332"
  },
  {
    "text": "that shows me which metrics were measured.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=335"
  },
  {
    "text": "The bar graph on the bottom shows me ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=339"
  },
  {
    "text": "the measurements for each individual iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=340"
  },
  {
    "text": "The average of all five iterations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=345"
  },
  {
    "text": "is computed and displayed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=347"
  },
  {
    "text": "I can now decide if I want to set this run's average ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=350"
  },
  {
    "text": "as my baseline for future tests to be compared against.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=353"
  },
  {
    "text": "A future run of the test would now fail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=359"
  },
  {
    "text": "if its average is greater than the set baseline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=361"
  },
  {
    "text": "We call this deviation from the set baseline a regression.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=364"
  },
  {
    "text": "A regression indicates that we should stop, investigate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=369"
  },
  {
    "text": "and fix our code to make sure that the test passes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=372"
  },
  {
    "text": "We are excited to share that in Xcode 13, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=378"
  },
  {
    "text": "we've added in a new feature to collect diagnostics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=381"
  },
  {
    "text": "to help triage these test regressions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=383"
  },
  {
    "text": "There are two diagnostics that we find valuable: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=386"
  },
  {
    "text": "ktrace files and memory graphs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=389"
  },
  {
    "text": "Ktrace files are powerful and versatile. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=394"
  },
  {
    "text": "They can be used for general system investigations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=397"
  },
  {
    "text": "or they can be focused on specific issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=399"
  },
  {
    "text": "such as diving into the rendering pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=402"
  },
  {
    "text": "when investigating hitches ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=404"
  },
  {
    "text": "or looking into reasons for why your main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=406"
  },
  {
    "text": "might be blocked, resulting in a hang.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=408"
  },
  {
    "text": "These ktrace files can be opened and analyzed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=412"
  },
  {
    "text": "in Instruments using your normal workflow.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=415"
  },
  {
    "text": "The second diagnostic is a memory graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=419"
  },
  {
    "text": "which are great for memory-specific investigations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=421"
  },
  {
    "text": "Memory graphs can be used with Xcode's visual debugger ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=424"
  },
  {
    "text": "as well as a variety of command line tools, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=428"
  },
  {
    "text": "some of which we'll cover later in this talk.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=430"
  },
  {
    "text": "A memory graph is essentially a snapshot ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=435"
  },
  {
    "text": "of your process's address space at an instance in time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=437"
  },
  {
    "text": "Memgraphs record the address and size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=441"
  },
  {
    "text": "of each virtual memory region ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=444"
  },
  {
    "text": "and each allocated malloc block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=446"
  },
  {
    "text": "as well as pointers between those regions and blocks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=448"
  },
  {
    "text": "This allows you to inspect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=452"
  },
  {
    "text": "individual objects on the heap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=453"
  },
  {
    "text": "view data regions associated with linked frameworks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=455"
  },
  {
    "text": "and more.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=457"
  },
  {
    "text": "XCTest automatically enables malloc stack logging, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=460"
  },
  {
    "text": "which captures backtraces for newly allocated objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=463"
  },
  {
    "text": "To enable diagnostic collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=469"
  },
  {
    "text": "use the xcodebuild command line tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=471"
  },
  {
    "text": "in conjunction with the ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=474"
  },
  {
    "text": "enablePerformanceTestsDiagnostics flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=475"
  },
  {
    "text": "This flag will enable ktrace collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=478"
  },
  {
    "text": "for nonmemory metrics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=481"
  },
  {
    "text": "and memgraphs for memory metrics.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=482"
  },
  {
    "text": "Once our previously written performance test ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=486"
  },
  {
    "text": "is done running, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=488"
  },
  {
    "text": "we see the following printed to our console. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=490"
  },
  {
    "text": "This is quite a lot, but there are a few ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=492"
  },
  {
    "text": "key things to look for.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=494"
  },
  {
    "text": "The first thing to look for is if the test failed or passed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=497"
  },
  {
    "text": "In this case, the test failed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=501"
  },
  {
    "text": "The output also calls out that the test failed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=505"
  },
  {
    "text": "specifically due to a regression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=507"
  },
  {
    "text": "Our new average is 12% worse than our baseline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=510"
  },
  {
    "text": "Finally, we can find the path to our xcresult bundle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=515"
  },
  {
    "text": "When we open the xcresult bundle in Xcode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=520"
  },
  {
    "text": "we see the memory measurements at the top ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=523"
  },
  {
    "text": "next to the test name.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=525"
  },
  {
    "text": "We can then expand the test logs and towards the bottom, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=529"
  },
  {
    "text": "we can find our attached memgraphs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=532"
  },
  {
    "text": "Once downloaded and unzipped, we find 2 memgraphs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=537"
  },
  {
    "text": "This is because we append an additional iteration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=540"
  },
  {
    "text": "to your test to enable malloc stack logging. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=543"
  },
  {
    "text": "We collect an initial memgraph, prefixed with pre, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=547"
  },
  {
    "text": "at the beginning of the measured iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=550"
  },
  {
    "text": "and we collect a second memgraph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=552"
  },
  {
    "text": "prefixed with post, at the end of the iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=554"
  },
  {
    "text": "This allows you to analyze the memory growth ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=557"
  },
  {
    "text": "over the period of one single iteration if needed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=560"
  },
  {
    "text": "Now with ktrace files and memory graphs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=565"
  },
  {
    "text": "with malloc stack logging enabled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=567"
  },
  {
    "text": "you are ready to not just answer if a regression occurred ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=569"
  },
  {
    "text": "but also why did the regression occur? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=573"
  },
  {
    "text": "I'll now hand it off to my colleague, Stefan, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=575"
  },
  {
    "text": "to talk about the types of memory issues ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=578"
  },
  {
    "text": "you may encounter ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=580"
  },
  {
    "text": "when looking into your collected memgraph diagnostics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=581"
  },
  {
    "text": "Thanks, Tanuja. Hi, everyone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=585"
  },
  {
    "text": "I'm Stefan, an engineer on the OS Performance Team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=588"
  },
  {
    "text": "I'll be going over some common memory issues ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=590"
  },
  {
    "text": "you might find in your app as well as how you can diagnose, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=593"
  },
  {
    "text": "fix, and prevent them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=596"
  },
  {
    "text": "I'll go over two types of memory issues: leaks and heap issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=600"
  },
  {
    "text": "which can be broken down into heap allocation regressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=604"
  },
  {
    "text": "and fragmentation issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=607"
  },
  {
    "text": "This is not an exhaustive list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=609"
  },
  {
    "text": "but it does cover some of the most common issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=611"
  },
  {
    "text": "I'll also cover some command line workflows ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=614"
  },
  {
    "text": "that can be used to diagnose these issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=616"
  },
  {
    "text": "For a more in-depth summary of the command line tools, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=619"
  },
  {
    "text": "check out the iOS memory deep dive talk from WWDC 2018.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=621"
  },
  {
    "text": "Let's start by discussing memory leaks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=627"
  },
  {
    "text": "A leak occurs when the process allocates an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=631"
  },
  {
    "text": "and loses all references to it without ever deallocating it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=634"
  },
  {
    "text": "Here I have an example object graph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=638"
  },
  {
    "text": "where the gray arrows denote references between objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=640"
  },
  {
    "text": "Notice that every object has at least one reference to it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=643"
  },
  {
    "text": "Notice the dotted line reference from object A to object B. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=647"
  },
  {
    "text": "Let's say I set this reference to nil, removing it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=651"
  },
  {
    "text": "With that reference gone, object B has been leaked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=655"
  },
  {
    "text": "There are no references to it at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=658"
  },
  {
    "text": "It's still dirty, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=660"
  },
  {
    "text": "but the process has no way to reference it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=662"
  },
  {
    "text": "and no way to free it until it exits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=664"
  },
  {
    "text": "For this reason, you should always fix leaks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=666"
  },
  {
    "text": "A common way objects leak in Swift is via retain cycles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=671"
  },
  {
    "text": "In this diagram, objects A and B are in a retain cycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=674"
  },
  {
    "text": "They reference one another, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=678"
  },
  {
    "text": "but there are no external references to either of them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=680"
  },
  {
    "text": "This means the process can't access or free either of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=683"
  },
  {
    "text": "so they're considered leaked.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=686"
  },
  {
    "text": "Fortunately, most objects in Swift are managed by ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=689"
  },
  {
    "text": "Swift's automatic reference counting system, or ARC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=692"
  },
  {
    "text": "which prevents a lot of leaks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=695"
  },
  {
    "text": "If you're working with objects not managed by ARC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=697"
  },
  {
    "text": "such as unsafe pointers, make sure you deallocate them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=700"
  },
  {
    "text": "before you lose your references to them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=703"
  },
  {
    "text": "Even ARC managed objects are susceptible to being ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=706"
  },
  {
    "text": "part of a retain cycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=709"
  },
  {
    "text": "So avoid creating strong circular references ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=711"
  },
  {
    "text": "in your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=713"
  },
  {
    "text": "If a circular reference is absolutely necessary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=714"
  },
  {
    "text": "consider a weak reference instead, because weak references ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=717"
  },
  {
    "text": "won't prevent objects from being deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=720"
  },
  {
    "text": "Let's look at an example from the Meal Planner app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=724"
  },
  {
    "text": "Tanuja has sent me some pre and post memgraphs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=727"
  },
  {
    "text": "from the failing XCTest. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=730"
  },
  {
    "text": "Right away, I want to check for leaks in the post memgraph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=732"
  },
  {
    "text": "To do this, I run leaks on the memgraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=737"
  },
  {
    "text": "This shows me some helpful information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=740"
  },
  {
    "text": "about any leaks I have.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=742"
  },
  {
    "text": "The output shows I have 4 leaks for a total of 240 leaked bytes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=746"
  },
  {
    "text": "Further down, the output includes a detailed view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=752"
  },
  {
    "text": "of the object graph for each of the leaks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=754"
  },
  {
    "text": "which gives me some clues as to what might be leaking.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=756"
  },
  {
    "text": "The top of the object graph says ROOT CYCLE, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=761"
  },
  {
    "text": "which means I'm dealing with a retain cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=763"
  },
  {
    "text": "There are some useful symbols here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=767"
  },
  {
    "text": "Looks like this retain cycle probably includes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=769"
  },
  {
    "text": "meal plan and menu item objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=771"
  },
  {
    "text": "Because malloc stack logging is enabled for XCTests, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=776"
  },
  {
    "text": "the output also includes an allocation call stack ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=779"
  },
  {
    "text": "for each leak. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=781"
  },
  {
    "text": "This is extremely useful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=782"
  },
  {
    "text": "for finding which objects leaked.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=784"
  },
  {
    "text": "Often, you'll want to find the section of the call stack ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=787"
  },
  {
    "text": "with symbols from your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=790"
  },
  {
    "text": "Here's the portion of the call stack from my code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=792"
  },
  {
    "text": "The leaking meal plan object is allocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=796"
  },
  {
    "text": "in the populateMealData function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=798"
  },
  {
    "text": "I'll open up Xcode and see if I can fix the issue.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=801"
  },
  {
    "text": "Here's the populateMealData function I saw in leaks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=805"
  },
  {
    "text": "Here I'm allocating a meal plan object and a menu item object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=808"
  },
  {
    "text": "which are the two objects I saw in my retain cycle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=811"
  },
  {
    "text": "Hmm, this addMealToMealPlan function looks a bit suspicious. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=815"
  },
  {
    "text": "I'll take a look.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=819"
  },
  {
    "text": "Hmm, so it looks like I'm calling addItem on the meal plan, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=821"
  },
  {
    "text": "but I'm also calling addPlan on the menu item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=825"
  },
  {
    "text": "This is for a feature allowing us to see all the items ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=828"
  },
  {
    "text": "for a plan but also which plan an item is associated with.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=830"
  },
  {
    "text": "Here in meal plan, addItem adds the menu item ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=836"
  },
  {
    "text": "to an array, saving a reference to it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=838"
  },
  {
    "text": "And here in menu item, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=841"
  },
  {
    "text": "addPlan saves a reference to the meal plan. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=843"
  },
  {
    "text": "So this is definitely a retain cycle because ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=846"
  },
  {
    "text": "they both hold a strong reference to each other.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=848"
  },
  {
    "text": "Once populateMealData exits, both the meal plan ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=851"
  },
  {
    "text": "and menu item objects will be out of scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=855"
  },
  {
    "text": "so there will be no external references to them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=857"
  },
  {
    "text": "But they still reference each other, causing a leak.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=860"
  },
  {
    "text": "I should probably try to find a solution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=864"
  },
  {
    "text": "without a cyclical reference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=866"
  },
  {
    "text": "But as a quick fix for now, I'll change menu item ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=868"
  },
  {
    "text": "to use a weak reference for its meal plan object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=871"
  },
  {
    "text": "This breaks the retain cycle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=874"
  },
  {
    "text": "because we no longer have two cyclical strong references.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=876"
  },
  {
    "text": "Let's shift gears now to heap allocation regressions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=883"
  },
  {
    "text": "The heap is simply a section of your process's address space ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=887"
  },
  {
    "text": "where dynamically allocated objects are stored. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=890"
  },
  {
    "text": "Heap allocation regressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=893"
  },
  {
    "text": "are an increase in memory footprint due to the process ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=894"
  },
  {
    "text": "allocating more objects on the heap than before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=897"
  },
  {
    "text": "To reduce heap regressions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=900"
  },
  {
    "text": "look to remove unused allocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=902"
  },
  {
    "text": "and shrink unnecessarily large allocations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=904"
  },
  {
    "text": "You should also pay attention ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=907"
  },
  {
    "text": "to how much memory you hold at once. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=908"
  },
  {
    "text": "Deallocate memory you're no longer using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=911"
  },
  {
    "text": "and wait to allocate memory until you need it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=913"
  },
  {
    "text": "This will reduce your app's peak footprint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=915"
  },
  {
    "text": "making it less likely to be terminated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=917"
  },
  {
    "text": "So let's return now to the failing XCTest ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=921"
  },
  {
    "text": "from the MealPlanner app and check for a heap regression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=923"
  },
  {
    "text": "To understand where I should look, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=927"
  },
  {
    "text": "I'll run vmmap -summary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=929"
  },
  {
    "text": "on both the pre and post memgraphs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=931"
  },
  {
    "text": "to get a nice overview of where memory is being used.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=933"
  },
  {
    "text": "My footprint in the pre memgraph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=937"
  },
  {
    "text": "is around 112 megabytes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=939"
  },
  {
    "text": "And in the post memgraph, my footprint is 125 megabytes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=942"
  },
  {
    "text": "so that's about a 13 megabyte difference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=946"
  },
  {
    "text": "Further down, the output shows ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=950"
  },
  {
    "text": "my process's memory usage broken down by region.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=951"
  },
  {
    "text": "Because I suspect this is a heap allocation issue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=956"
  },
  {
    "text": "I want to look at the regions starting with MALLOC_ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=958"
  },
  {
    "text": "because those regions contain all of my heap objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=961"
  },
  {
    "text": "Remember Tanuja's equation: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=965"
  },
  {
    "text": "Memory footprint = Dirty memory + Compressed Memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=967"
  },
  {
    "text": "In this tool, the term \"swapped\" means \"compressed.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=971"
  },
  {
    "text": "So of these columns, I only care about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=974"
  },
  {
    "text": "\"dirty size\" and \"swapped size.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=976"
  },
  {
    "text": "And sure enough, the output shows ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=979"
  },
  {
    "text": "that the MALLOC_LARGE region ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=981"
  },
  {
    "text": "is holding about 13 megabytes of dirty memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=982"
  },
  {
    "text": "That's roughly equivalent to my regression size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=985"
  },
  {
    "text": "so I definitely want to look into that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=987"
  },
  {
    "text": "The next step is to figure out what kinds of objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=989"
  },
  {
    "text": "are contributing to this 13 megabyte regression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=992"
  },
  {
    "text": "To get that information, I'll run heap -diffFrom ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=995"
  },
  {
    "text": "on my post memgraph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=998"
  },
  {
    "text": "I pass in my pre and post memgraphs as arguments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1001"
  },
  {
    "text": "This shows me the objects that exist ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1004"
  },
  {
    "text": "in the post memgraph heap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1006"
  },
  {
    "text": "but not in the pre memgraph heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1007"
  },
  {
    "text": "Near the top, the output shows I have around ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1010"
  },
  {
    "text": "13 megabytes of new objects in the post memgraph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1013"
  },
  {
    "text": "Below, the heap memory is broken down by object class. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1017"
  },
  {
    "text": "For each object class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1021"
  },
  {
    "text": "the output shows the number of objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1022"
  },
  {
    "text": "and the sum in bytes of those objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1024"
  },
  {
    "text": "Right away, I notice that I have ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1028"
  },
  {
    "text": "about 13 megabytes worth of this \"non-object\" type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1029"
  },
  {
    "text": "In Swift, this usually indicates raw malloced bytes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1033"
  },
  {
    "text": "This type of object can be a bit tricky to track down, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1036"
  },
  {
    "text": "but there are some tools I can use to get some information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1040"
  },
  {
    "text": "To start, I want the addresses of these non-objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1043"
  },
  {
    "text": "I'll run heap -addresses to grab them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1047"
  },
  {
    "text": "I'll specify that I only want non-objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1052"
  },
  {
    "text": "whose size is at least 500 kilobytes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1054"
  },
  {
    "text": "Aha. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1057"
  },
  {
    "text": "This non-object is about 13 megabytes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1059"
  },
  {
    "text": "so it's a prime suspect in this investigation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1061"
  },
  {
    "text": "I'll grab its address and see if I can ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1064"
  },
  {
    "text": "find some clues about what it is. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1066"
  },
  {
    "text": "I have several options at this point. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1068"
  },
  {
    "text": "Each has its benefits depending on the situation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1070"
  },
  {
    "text": "so I'll walk through each one briefly.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1073"
  },
  {
    "text": "One option I have is to run leaks --traceTree ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1076"
  },
  {
    "text": "on this address.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1079"
  },
  {
    "text": "This gives me a tree of objects that reference this address. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1081"
  },
  {
    "text": "This is useful if I have a specific object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1084"
  },
  {
    "text": "I want to get more information about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1086"
  },
  {
    "text": "and my memgraph doesn't have malloc stack logging ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1088"
  },
  {
    "text": "or MSL enabled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1091"
  },
  {
    "text": "Remember that our XCTest memgraphs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1094"
  },
  {
    "text": "automatically have MSL enabled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1096"
  },
  {
    "text": "but if you're ever working with a memgraph that doesn't, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1098"
  },
  {
    "text": "keep this tool in mind.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1100"
  },
  {
    "text": "I've highlighted the object in the tree that seems relevant. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1103"
  },
  {
    "text": "My large non-object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1106"
  },
  {
    "text": "probably has something to do with this meal data object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1107"
  },
  {
    "text": "in MKTCustomMeal PlannerCollectionViewCell. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1110"
  },
  {
    "text": "I can also run leaks --referenceTree.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1113"
  },
  {
    "text": "This gives me a top-down reference tree ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1122"
  },
  {
    "text": "of all the memory in my process ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1124"
  },
  {
    "text": "with a best guess of which objects are the roots. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1126"
  },
  {
    "text": "With this output, I can get a sense ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1129"
  },
  {
    "text": "of where memory is aggregated in my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1131"
  },
  {
    "text": "This tool is extremely helpful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1133"
  },
  {
    "text": "if I know I have a large regression ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1135"
  },
  {
    "text": "but I don't know which specific objects are responsible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1137"
  },
  {
    "text": "I can pass the --groupByType argument ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1141"
  },
  {
    "text": "to group like types together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1144"
  },
  {
    "text": "shrinking the output ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1146"
  },
  {
    "text": "and making it a bit easier to parse.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1147"
  },
  {
    "text": "Oftentimes, a large chunk of the regression ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1150"
  },
  {
    "text": "will be grouped under a single node in this tree, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1152"
  },
  {
    "text": "making it easier to find clues about what that memory is.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1155"
  },
  {
    "text": "Again, I've highlighted the section ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1159"
  },
  {
    "text": "showing the relevant objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1161"
  },
  {
    "text": "Here's that same meal data object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1163"
  },
  {
    "text": "I saw in the leaks -traceTree output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1165"
  },
  {
    "text": "The output shows that there's about 13 megabytes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1168"
  },
  {
    "text": "worth of memory allocated to this meal data object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1170"
  },
  {
    "text": "I'd love to know how this object is being allocated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1173"
  },
  {
    "text": "Because my memgraph has MSL enabled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1176"
  },
  {
    "text": "I can use malloc_history -fullStacks to figure that out.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1179"
  },
  {
    "text": "I pass in the address of the large non-object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1184"
  },
  {
    "text": "I grabbed from heap -addresses earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1186"
  },
  {
    "text": "And I get an allocation call stack ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1190"
  },
  {
    "text": "for the object at that address. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1191"
  },
  {
    "text": "This is extremely useful when I have MSL enabled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1193"
  },
  {
    "text": "and I have the address of the object I care about.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1196"
  },
  {
    "text": "So looks like my meal data object was allocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1201"
  },
  {
    "text": "in the saveMeal function, shown here on line 3. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1204"
  },
  {
    "text": "I'll head over to Xcode to see what's going on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1207"
  },
  {
    "text": "Here's the saveMeal function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1210"
  },
  {
    "text": "inside my custom cell view controller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1212"
  },
  {
    "text": "And here's the culprit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1214"
  },
  {
    "text": "I'm allocating this raw buffer here ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1216"
  },
  {
    "text": "and then wrapping it with the meal data object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1218"
  },
  {
    "text": "I'm only allocating this buffer so that I can populate it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1220"
  },
  {
    "text": "and save the result to disk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1223"
  },
  {
    "text": "Once I'm done saving to disk, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1225"
  },
  {
    "text": "I don't really need this buffer anymore. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1227"
  },
  {
    "text": "So why is it sticking around? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1229"
  },
  {
    "text": "Well, meal data is a class member, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1232"
  },
  {
    "text": "so as long as this class instance exists, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1234"
  },
  {
    "text": "the reference will stick around. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1237"
  },
  {
    "text": "This means that when I hit saveMeal on any cell, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1239"
  },
  {
    "text": "that cell allocates and holds a large buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1241"
  },
  {
    "text": "that will stick around until that cell is destroyed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1244"
  },
  {
    "text": "That memory could really add up if I'm saving multiple meals.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1246"
  },
  {
    "text": "So how can I fix this? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1251"
  },
  {
    "text": "One option would be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1253"
  },
  {
    "text": "to just define mealData in the saveMeal function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1254"
  },
  {
    "text": "but I know it's used elsewhere in the class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1256"
  },
  {
    "text": "so I don't want to do that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1258"
  },
  {
    "text": "Another way would be to set mealData to nil ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1261"
  },
  {
    "text": "once I'm done writing it to disk. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1263"
  },
  {
    "text": "The data object in Swift is smart enough to automatically ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1266"
  },
  {
    "text": "deallocate the buffer once I've lost my final reference to it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1269"
  },
  {
    "text": "so the buffer won't stick around past the end of this function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1272"
  },
  {
    "text": "Lastly, let's talk about fragmentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1278"
  },
  {
    "text": "Let's quickly go over how pages work in iOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1284"
  },
  {
    "text": "A page is a fixed size, indivisible chunk of memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1287"
  },
  {
    "text": "that the system grants to your process.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1290"
  },
  {
    "text": "Because pages are indivisible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1293"
  },
  {
    "text": "when your process writes to any part of a page, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1295"
  },
  {
    "text": "the entire page is considered dirty, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1297"
  },
  {
    "text": "and your process will be charged for it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1300"
  },
  {
    "text": "even if most of it is unused.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1301"
  },
  {
    "text": "Fragmentation occurs when a process has dirty pages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1304"
  },
  {
    "text": "that are not 100% utilized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1307"
  },
  {
    "text": "To understand how this happens, let's look at an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1310"
  },
  {
    "text": "To start, I have 3 contiguous clean pages.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1313"
  },
  {
    "text": "As the process runs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1318"
  },
  {
    "text": "allocations begin filling up these pages, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1319"
  },
  {
    "text": "dirtying them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1321"
  },
  {
    "text": "When objects are deallocated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1325"
  },
  {
    "text": "they create empty slots where they used to be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1327"
  },
  {
    "text": "marked \"free memory\" in the diagram. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1329"
  },
  {
    "text": "However, these pages are still dirty ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1332"
  },
  {
    "text": "because there are still some allocated objects on them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1334"
  },
  {
    "text": "The system will attempt to fill these empty slots ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1338"
  },
  {
    "text": "with future allocations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1340"
  },
  {
    "text": "Here I have a large incoming allocation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1342"
  },
  {
    "text": "notated by the box on the right. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1345"
  },
  {
    "text": "Unfortunately, this incoming allocation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1347"
  },
  {
    "text": "is too large to fit in my free memory slots. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1350"
  },
  {
    "text": "Even though the combined size of the empty slots ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1353"
  },
  {
    "text": "is large enough, they aren't contiguous ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1355"
  },
  {
    "text": "and they can't be used for a single allocation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1357"
  },
  {
    "text": "So because it couldn't fit in any existing free slots, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1361"
  },
  {
    "text": "the system placed my allocation on a new dirty page ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1364"
  },
  {
    "text": "on the right side of the diagram. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1367"
  },
  {
    "text": "The free memory slots remain unfilled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1369"
  },
  {
    "text": "and are considered fragmented memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1371"
  },
  {
    "text": "The best way to reduce fragmentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1375"
  },
  {
    "text": "is to allocate objects with similar lifetimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1377"
  },
  {
    "text": "close to each other in memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1379"
  },
  {
    "text": "This helps ensure that all of those objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1382"
  },
  {
    "text": "are freed together, giving the process large chunks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1383"
  },
  {
    "text": "of contiguous memory to work with for future allocations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1386"
  },
  {
    "text": "In this example, I manually allocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1391"
  },
  {
    "text": "all the objects marked \"my object,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1393"
  },
  {
    "text": "and I plan to free them at the same time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1395"
  },
  {
    "text": "But I wasn't careful in my code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1398"
  },
  {
    "text": "and the system ended up interleaving my objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1399"
  },
  {
    "text": "with other objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1402"
  },
  {
    "text": "Now, when I free all my objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1404"
  },
  {
    "text": "I have four slots of free memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1406"
  },
  {
    "text": "none of which are contiguous ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1408"
  },
  {
    "text": "because they're broken up by these allocated objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1410"
  },
  {
    "text": "This results in 50% fragmentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1413"
  },
  {
    "text": "and four dirty pages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1415"
  },
  {
    "text": "Not great.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1416"
  },
  {
    "text": "What if I instead wrote code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1419"
  },
  {
    "text": "to allocate all of my objects together? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1420"
  },
  {
    "text": "Now they all end up together on two pages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1423"
  },
  {
    "text": "And when I free my objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1426"
  },
  {
    "text": "the process frees up two clean pages for the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1428"
  },
  {
    "text": "resulting in only 2 dirty pages and 0% fragmentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1431"
  },
  {
    "text": "Notice how fragmentation is a footprint multiplier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1436"
  },
  {
    "text": "50% fragmentation doubled my footprint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1439"
  },
  {
    "text": "from 2 to 4 dirty pages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1442"
  },
  {
    "text": "In most real scenarios, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1445"
  },
  {
    "text": "some fragmentation is inevitable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1447"
  },
  {
    "text": "So as a rule of thumb, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1450"
  },
  {
    "text": "aim for about 25% fragmentation or less.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1451"
  },
  {
    "text": "One way to reduce fragmentation is to use autorelease pools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1455"
  },
  {
    "text": "An autorelease pool tells the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1459"
  },
  {
    "text": "to release all objects allocated inside of it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1461"
  },
  {
    "text": "as soon as it goes out of scope. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1463"
  },
  {
    "text": "This helps ensure that all objects created ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1465"
  },
  {
    "text": "in the autorelease pool have similar lifetimes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1467"
  },
  {
    "text": "Although fragmentation can be an issue for all processes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1471"
  },
  {
    "text": "long running processes can be especially prone, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1474"
  },
  {
    "text": "because there are lots of allocations and deallocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1477"
  },
  {
    "text": "to potentially fragment the address space. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1479"
  },
  {
    "text": "If your app uses long running extensions, for example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1482"
  },
  {
    "text": "be sure to take a look at fragmentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1485"
  },
  {
    "text": "in those processes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1487"
  },
  {
    "text": "To take a quick look at my process's fragmentation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1491"
  },
  {
    "text": "I can run vmmap -summary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1493"
  },
  {
    "text": "and scroll down to the bottom of the output.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1496"
  },
  {
    "text": "This section is divided into malloc zones. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1500"
  },
  {
    "text": "Each zone contains different types of allocations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1502"
  },
  {
    "text": "Usually I would only care about the DefaultMallocZone, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1505"
  },
  {
    "text": "because that's where my heap allocations end up by default.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1509"
  },
  {
    "text": "However, because this memgraph has MSL enabled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1513"
  },
  {
    "text": "I actually care about the MallocStackLoggingLiteZone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1516"
  },
  {
    "text": "As long as MSL is enabled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1520"
  },
  {
    "text": "this zone is where all the heap allocations end up.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1522"
  },
  {
    "text": "The % FRAG column shows me what percentage of my memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1526"
  },
  {
    "text": "is wasted due to fragmentation in each malloc zone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1529"
  },
  {
    "text": "Some of these numbers are pretty large, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1532"
  },
  {
    "text": "but I only need to focus on the MallocStackLoggingLiteZone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1534"
  },
  {
    "text": "That's because the MallocStackLoggingLiteZone ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1539"
  },
  {
    "text": "has by far the largest share of dirty memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1541"
  },
  {
    "text": "with 4.3 megabytes out of 5 megabytes total. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1544"
  },
  {
    "text": "So I can ignore the other zones this time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1548"
  },
  {
    "text": "The \"dirty+swap frag size\" column ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1552"
  },
  {
    "text": "shows me exactly how much memory is wasted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1554"
  },
  {
    "text": "due to fragmentation in each malloc zone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1556"
  },
  {
    "text": "In my case, I'm wasting about 800K due to fragmentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1560"
  },
  {
    "text": "This seems like a lot, but as I mentioned before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1564"
  },
  {
    "text": "some fragmentation is inevitable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1567"
  },
  {
    "text": "So as long as I'm sitting under 25% fragmentation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1569"
  },
  {
    "text": "I'll consider this much waste acceptable.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1572"
  },
  {
    "text": "Looks like I'm sitting at about 19% fragmentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1576"
  },
  {
    "text": "in the MallocStackLoggingLiteZone. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1578"
  },
  {
    "text": "This is comfortably below the 25% rule of thumb, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1581"
  },
  {
    "text": "so I'm not concerned.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1583"
  },
  {
    "text": "If I did have fragmentation issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1586"
  },
  {
    "text": "I could use the Allocations track in the Instruments tool.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1588"
  },
  {
    "text": "Specifically, I'd want to look at ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1593"
  },
  {
    "text": "the allocations list view and see which objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1595"
  },
  {
    "text": "were persisted and destroyed in my area of interest.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1597"
  },
  {
    "text": "In the context of fragmentation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1602"
  },
  {
    "text": "the destroyed objects create free memory slots, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1604"
  },
  {
    "text": "while the persisted objects are the remaining objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1606"
  },
  {
    "text": "responsible for keeping the pages dirty. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1609"
  },
  {
    "text": "Both of them are worth investigating ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1612"
  },
  {
    "text": "when you're looking into fragmentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1613"
  },
  {
    "text": "For more information about how to use the Instruments tool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1617"
  },
  {
    "text": "check out the Getting started with Instruments talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1620"
  },
  {
    "text": "from WWDC 2019.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1623"
  },
  {
    "text": "Now that I've addressed the leaks and heap regressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1626"
  },
  {
    "text": "and verified that fragmentation isn't an issue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1628"
  },
  {
    "text": "I'll run that XCTest again.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1631"
  },
  {
    "text": "Excellent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1638"
  },
  {
    "text": "The XCTest now passes and the regression is resolved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1639"
  },
  {
    "text": "Now that you've learned about detecting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1642"
  },
  {
    "text": "and diagnosing memory issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1644"
  },
  {
    "text": "let's review the workflow you can use for your own app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1646"
  },
  {
    "text": "Anytime you add a new feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1649"
  },
  {
    "text": "write a performance XCTest to monitor memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1651"
  },
  {
    "text": "and/or any of the other provided system metrics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1654"
  },
  {
    "text": "For each test, set a baseline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1658"
  },
  {
    "text": "Then use the test to catch regressions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1660"
  },
  {
    "text": "and investigate using the collected ktrace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1662"
  },
  {
    "text": "and memgraph files.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1664"
  },
  {
    "text": "Use the memgraphs from any failing XCTests ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1668"
  },
  {
    "text": "to help diagnose your memory issue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1670"
  },
  {
    "text": "The first thing you should do is check for leaks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1673"
  },
  {
    "text": "Run the leaks tool and use the MSL backtraces ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1675"
  },
  {
    "text": "to help find and fix any leaks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1678"
  },
  {
    "text": "If the regression doesn't include leaks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1681"
  },
  {
    "text": "then check out the heap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1682"
  },
  {
    "text": "Start with vmmap -summary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1685"
  },
  {
    "text": "to confirm that the memory is in the heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1686"
  },
  {
    "text": "If so, run heap -diffFrom to see which object types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1690"
  },
  {
    "text": "are responsible for the growth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1694"
  },
  {
    "text": "If the culprits seem obvious, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1695"
  },
  {
    "text": "use heap -addresses to get their addresses. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1697"
  },
  {
    "text": "If not, look at leaks -referenceTree for some clues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1700"
  },
  {
    "text": "Finally, investigate culprit object addresses ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1704"
  },
  {
    "text": "with leaks -traceTree and/or malloc_history.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1707"
  },
  {
    "text": "Lastly, make sure you're developing with these ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1711"
  },
  {
    "text": "memory best practices in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1714"
  },
  {
    "text": "Strive to have zero leaks in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1716"
  },
  {
    "text": "If you're working with unsafe types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1718"
  },
  {
    "text": "make sure you remember to free everything you allocate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1720"
  },
  {
    "text": "And be on the lookout for retain cycles in your code as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1723"
  },
  {
    "text": "Find ways to reduce your heap allocations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1727"
  },
  {
    "text": "whether that's shrinking them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1730"
  },
  {
    "text": "holding them for a shorter period of time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1731"
  },
  {
    "text": "or just getting rid of unnecessary allocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1734"
  },
  {
    "text": "altogether. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1736"
  },
  {
    "text": "Make sure to keep fragmentation in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1738"
  },
  {
    "text": "Allocate objects with similar lifetimes next to each other ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1740"
  },
  {
    "text": "to create nice, large chunks of free memory later on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1743"
  },
  {
    "text": "With these best practices and the XCTest workflow, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1747"
  },
  {
    "text": "you'll be equipped to detect, diagnose, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1750"
  },
  {
    "text": "and fix memory issues in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1752"
  },
  {
    "text": "On behalf of Tanuja and myself, thanks so much for tuning in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1755"
  },
  {
    "text": "[percussive music]",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10180/?time=1759"
  }
]