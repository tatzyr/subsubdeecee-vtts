[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=7"
  },
  {
    "text": "Matt Ricketson: Hi, I'm Matt, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=9"
  },
  {
    "text": "and later on I'll be joined by Luca and Raj.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=10"
  },
  {
    "text": "Today, we're going to demystify SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=14"
  },
  {
    "text": "Now, we've heard it many times before ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=17"
  },
  {
    "text": "that SwiftUI is a declarative UI framework.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=19"
  },
  {
    "text": "That means that you describe what you want ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=24"
  },
  {
    "text": "for your app at a high level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=26"
  },
  {
    "text": "and SwiftUI decides exactly how to make it happen.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=27"
  },
  {
    "text": "Now, most of the time, this works great! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=32"
  },
  {
    "text": "And that's when SwiftUI feels magical.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=34"
  },
  {
    "text": "But there will always be those moments ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=37"
  },
  {
    "text": "when SwiftUI does something that you might not expect.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=39"
  },
  {
    "text": "And in those moments, it helps to understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=42"
  },
  {
    "text": "a bit more about what SwiftUI is doing behind the scenes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=45"
  },
  {
    "text": "to build a better intuition for how to get the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=49"
  },
  {
    "text": "you're looking for.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=52"
  },
  {
    "text": "So today's question is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=54"
  },
  {
    "text": "When SwiftUI looks at your code, what does it see? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=55"
  },
  {
    "text": "The answer is three things: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=59"
  },
  {
    "text": "identity, lifetime, and dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=62"
  },
  {
    "text": "Identity is how SwiftUI recognizes elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=66"
  },
  {
    "text": "as the same or distinct across multiple updates of your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=69"
  },
  {
    "text": "Lifetime is how SwiftUI tracks the existence of views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=75"
  },
  {
    "text": "and data over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=78"
  },
  {
    "text": "And dependencies are how SwiftUI understands ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=81"
  },
  {
    "text": "when your interface needs to be updated and why.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=84"
  },
  {
    "text": "Together, these three concepts inform how SwiftUI decides ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=88"
  },
  {
    "text": "what needs to change, how, and when, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=92"
  },
  {
    "text": "resulting in the dynamic user interface you see onscreen.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=95"
  },
  {
    "text": "Today, we'll talk about each of these three concepts in more depth.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=100"
  },
  {
    "text": "Let's start with identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=106"
  },
  {
    "text": "and I have a few friends here to help me.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=108"
  },
  {
    "text": "These Ruby Spaniels are adorable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=111"
  },
  {
    "text": "but they're also the subject of a deep philosophical question.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=114"
  },
  {
    "text": "Are these two different dogs? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=119"
  },
  {
    "text": "Or are these, in fact, two pictures of the same dog? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=121"
  },
  {
    "text": "The truth is, it's impossible to say! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=126"
  },
  {
    "text": "We just don't have enough information.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=129"
  },
  {
    "text": "But this question of whether things are the same or different ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=131"
  },
  {
    "text": "is at the heart of what we call \"identity.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=134"
  },
  {
    "text": "Identity isn't just important for dogs though.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=139"
  },
  {
    "text": "It's also a critical aspect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=141"
  },
  {
    "text": "of how SwiftUI understands your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=143"
  },
  {
    "text": "Let's look at an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=147"
  },
  {
    "text": "This is an app I made called \"Good Dog, Bad Dog,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=150"
  },
  {
    "text": "which helps me keep track ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=153"
  },
  {
    "text": "of whether my furry friend has been on her best behavior.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=154"
  },
  {
    "text": "It's pretty simple.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=157"
  },
  {
    "text": "I can just tap anywhere on the screen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=158"
  },
  {
    "text": "to flip between the good and bad states.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=160"
  },
  {
    "text": "So what does identity have to do with my app? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=163"
  },
  {
    "text": "Well, it's actually very similar to that philosophical question ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=167"
  },
  {
    "text": "we just asked about the dogs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=170"
  },
  {
    "text": "Looking at those icons, do those seem like two different views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=173"
  },
  {
    "text": "completely distinct from each other? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=177"
  },
  {
    "text": "Or could they be the same view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=179"
  },
  {
    "text": "just in a different place and with a different color? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=181"
  },
  {
    "text": "That distinction actually matters a great deal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=184"
  },
  {
    "text": "because it changes how our interface ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=187"
  },
  {
    "text": "transitions from one state to another.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=189"
  },
  {
    "text": "Let's say those icons are, in fact, different views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=193"
  },
  {
    "text": "That means the icons should transition independently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=197"
  },
  {
    "text": "such as fading in and out.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=200"
  },
  {
    "text": "But what if they're, in fact, the same view? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=204"
  },
  {
    "text": "That would instead imply that the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=207"
  },
  {
    "text": "should slide across the screen during the transition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=209"
  },
  {
    "text": "because it's the same view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=213"
  },
  {
    "text": "moving from one location to the other.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=214"
  },
  {
    "text": "So connecting views across different states is important, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=217"
  },
  {
    "text": "because that's how SwiftUI understands ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=220"
  },
  {
    "text": "how to transition between them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=222"
  },
  {
    "text": "This is the key concept behind view identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=225"
  },
  {
    "text": "Views that share the same identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=230"
  },
  {
    "text": "represent different states of the same conceptual UI element.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=232"
  },
  {
    "text": "In contrast, views that represent distinct UI elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=237"
  },
  {
    "text": "will always have different identities.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=240"
  },
  {
    "text": "Later in the talk, Luca and Raj will talk about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=243"
  },
  {
    "text": "the practical impacts of view identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=245"
  },
  {
    "text": "on your app's data and update cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=247"
  },
  {
    "text": "For now, let's look at how identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=251"
  },
  {
    "text": "is represented in your code, focusing on ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=253"
  },
  {
    "text": "the two different types of identity used by SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=256"
  },
  {
    "text": "First, explicit identity: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=261"
  },
  {
    "text": "using custom or data-driven identifiers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=263"
  },
  {
    "text": "And second, structural identity: distinguishing views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=267"
  },
  {
    "text": "by their type and position in the view hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=271"
  },
  {
    "text": "Now, to help understand these concepts, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=275"
  },
  {
    "text": "let me introduce you to some more of my friends.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=277"
  },
  {
    "text": "OK, remember that it can be difficult to tell dogs apart, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=280"
  },
  {
    "text": "especially when they look the same.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=284"
  },
  {
    "text": "So what kind of extra information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=287"
  },
  {
    "text": "would help us identify our dogs? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=289"
  },
  {
    "text": "One way would be to simply ask for their names.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=292"
  },
  {
    "text": "If two dogs look the same and also share the same name, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=296"
  },
  {
    "text": "then I'd say it's pretty likely ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=300"
  },
  {
    "text": "that they're, in fact, the same dog.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=301"
  },
  {
    "text": "But if they have different names, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=304"
  },
  {
    "text": "then we can guarantee that they are, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=306"
  },
  {
    "text": "in fact, different dogs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=308"
  },
  {
    "text": "Assigning names or identifiers like this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=310"
  },
  {
    "text": "is a form of explicit identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=313"
  },
  {
    "text": "Explicit identity is powerful and flexible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=316"
  },
  {
    "text": "but does require that someone, somewhere ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=318"
  },
  {
    "text": "keeps track of all those names.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=321"
  },
  {
    "text": "One form of explicit identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=324"
  },
  {
    "text": "you may already be used to is pointer identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=325"
  },
  {
    "text": "which is used throughout UIKit and AppKit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=329"
  },
  {
    "text": "Now, SwiftUI doesn't use pointer identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=332"
  },
  {
    "text": "but learning about it will help you better understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=334"
  },
  {
    "text": "how and why SwiftUI works differently.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=337"
  },
  {
    "text": "Let's take a quick look.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=340"
  },
  {
    "text": "Consider a UIKit or AppKit view hierarchy, like this one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=342"
  },
  {
    "text": "Since UIViews and NSViews are classes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=345"
  },
  {
    "text": "they each have a unique pointer to their memory allocation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=348"
  },
  {
    "text": "The pointer is a natural source of explicit identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=353"
  },
  {
    "text": "We can refer to individual views just using their pointer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=356"
  },
  {
    "text": "and if two views share the same pointer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=360"
  },
  {
    "text": "we can guarantee that they are really the same view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=363"
  },
  {
    "text": "But SwiftUI doesn't use pointers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=367"
  },
  {
    "text": "because SwiftUI views are value types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=369"
  },
  {
    "text": "commonly represented as structs instead of classes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=371"
  },
  {
    "text": "In the \"SwiftUI essentials\" talk from 2019, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=376"
  },
  {
    "text": "we discussed why SwiftUI uses value types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=379"
  },
  {
    "text": "instead of classes for its views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=382"
  },
  {
    "text": "so I recommend watching that talk to learn more.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=384"
  },
  {
    "text": "For now, the important thing to know is that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=387"
  },
  {
    "text": "value types do not have a canonical reference that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=390"
  },
  {
    "text": "SwiftUI can use as a persistent identity for its views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=393"
  },
  {
    "text": "Instead, SwiftUI relies on other forms of explicit identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=397"
  },
  {
    "text": "For example, consider this list of rescue dogs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=402"
  },
  {
    "text": "The id parameter used here is a form of explicit identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=406"
  },
  {
    "text": "The dog tag ID of each rescue dog is used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=411"
  },
  {
    "text": "to explicitly identify its corresponding view in the list.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=413"
  },
  {
    "text": "If the collection of rescue dogs changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=418"
  },
  {
    "text": "SwiftUI can use those IDs to understand what exactly changed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=421"
  },
  {
    "text": "and generate the correct animations within the list.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=425"
  },
  {
    "text": "In this case, SwiftUI was even able to correctly animate views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=428"
  },
  {
    "text": "moving between different sections.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=432"
  },
  {
    "text": "Let's look at a more advanced example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=435"
  },
  {
    "text": "Here, we're using a ScrollViewReader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=438"
  },
  {
    "text": "to jump to the top of the view using a button at the bottom.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=440"
  },
  {
    "text": "The id(_:) modifier provides a way to explicitly identify a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=445"
  },
  {
    "text": "using a custom identifier -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=449"
  },
  {
    "text": "in this case, our header view at the top of the page.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=452"
  },
  {
    "text": "Then we can pass that identifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=455"
  },
  {
    "text": "to the scroll view proxy's scrollTo(_:) method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=458"
  },
  {
    "text": "to tell SwiftUI to go to that specific view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=461"
  },
  {
    "text": "What's great about this is that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=465"
  },
  {
    "text": "we don't have to explicitly identify every view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=466"
  },
  {
    "text": "just the ones we need to refer to elsewhere in the code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=470"
  },
  {
    "text": "like our header text.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=473"
  },
  {
    "text": "By comparison, the ScrollViewReader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=475"
  },
  {
    "text": "ScrollView, backstory Text, and Bbutton ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=477"
  },
  {
    "text": "do not need explicit identifiers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=480"
  },
  {
    "text": "But just because their identity isn't explicit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=483"
  },
  {
    "text": "that doesn't mean these views have no identity at all ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=485"
  },
  {
    "text": "because every view has an identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=489"
  },
  {
    "text": "even if it's not explicit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=492"
  },
  {
    "text": "This is where structural identity comes in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=495"
  },
  {
    "text": "SwiftUI uses the structure of your view hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=498"
  },
  {
    "text": "to generate implicit identities for your views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=501"
  },
  {
    "text": "so you don't have to.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=505"
  },
  {
    "text": "Now, let me bring in some more of my friends ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=507"
  },
  {
    "text": "to help explain what I mean by that.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=509"
  },
  {
    "text": "Let's say we have two similar dogs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=512"
  },
  {
    "text": "but we don't know their names, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=514"
  },
  {
    "text": "but we still need to identify each one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=515"
  },
  {
    "text": "Well, suppose these are very good dogs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=518"
  },
  {
    "text": "and they're capable of sitting very still.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=521"
  },
  {
    "text": "If we can guarantee they don't move, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=524"
  },
  {
    "text": "we could identify them just based on where they're sitting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=526"
  },
  {
    "text": "like \"The dog on the left\" or \"The dog on the right\".",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=530"
  },
  {
    "text": "We're using the relative arrangement of our subjects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=534"
  },
  {
    "text": "to distinguish them from each other -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=537"
  },
  {
    "text": "that's structural identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=539"
  },
  {
    "text": "SwiftUI leverages structural identity throughout its API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=542"
  },
  {
    "text": "and a classic example is when you use if statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=545"
  },
  {
    "text": "and other conditional logic within your View code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=549"
  },
  {
    "text": "The structure of the conditional statement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=551"
  },
  {
    "text": "gives us a clear way to identify each view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=554"
  },
  {
    "text": "The first view only shows when the condition is true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=558"
  },
  {
    "text": "while the second view only shows when the condition is false.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=561"
  },
  {
    "text": "That means we can always tell which view is which, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=565"
  },
  {
    "text": "even if they happen to look similarly.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=568"
  },
  {
    "text": "However, this only works if SwiftUI can statically guarantee ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=571"
  },
  {
    "text": "that these views stay where they are and never swap places.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=575"
  },
  {
    "text": "SwiftUI accomplishes this by looking at the type structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=579"
  },
  {
    "text": "of your view hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=582"
  },
  {
    "text": "When SwiftUI looks at your views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=585"
  },
  {
    "text": "it sees their generic types -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=586"
  },
  {
    "text": "in this case, our if statement translated into ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=590"
  },
  {
    "text": "a _ConditionalContent view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=592"
  },
  {
    "text": "which is generic over its true and false content.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=594"
  },
  {
    "text": "This translation is powered by a ViewBuilder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=598"
  },
  {
    "text": "which is a type of result builder in Swift.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=602"
  },
  {
    "text": "The View protocol implicitly wraps its body property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=605"
  },
  {
    "text": "in a ViewBuilder, which constructs a single generic view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=608"
  },
  {
    "text": "from the logic statements in our property.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=612"
  },
  {
    "text": "The some View return type of our body property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=615"
  },
  {
    "text": "is a placeholder that represents this static composite type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=617"
  },
  {
    "text": "hiding it away so it doesn't clutter up our code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=621"
  },
  {
    "text": "Using this generic type, SwiftUI can guarantee ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=625"
  },
  {
    "text": "that the true view will always be the AdoptionDirectory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=628"
  },
  {
    "text": "while the False view will always be the DogList, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=632"
  },
  {
    "text": "allowing them to be assigned an implicit, stable identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=636"
  },
  {
    "text": "behind the scenes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=640"
  },
  {
    "text": "In fact, this is the key to understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=642"
  },
  {
    "text": "the Good Dog, Bad Dog app from earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=645"
  },
  {
    "text": "With the code on the top, we have an if statement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=648"
  },
  {
    "text": "that defines different views for each conditional branch.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=650"
  },
  {
    "text": "This will cause the views to transition in and out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=655"
  },
  {
    "text": "because SwiftUI understands that each branch of the if statement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=658"
  },
  {
    "text": "represents a different view with a distinct identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=661"
  },
  {
    "text": "Alternatively, we could just have a single PawView ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=666"
  },
  {
    "text": "that changes its layout and color.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=670"
  },
  {
    "text": "When it transitions to a different state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=673"
  },
  {
    "text": "the view will smoothly slide to its next position.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=675"
  },
  {
    "text": "That's because we're modifying a single view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=679"
  },
  {
    "text": "with a consistent identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=681"
  },
  {
    "text": "Both of these strategies can work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=684"
  },
  {
    "text": "but SwiftUI generally recommends the second approach.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=686"
  },
  {
    "text": "By default, try to preserve identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=690"
  },
  {
    "text": "and provide more fluid transitions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=692"
  },
  {
    "text": "This also helps preserve your view's lifetime and state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=694"
  },
  {
    "text": "which Luca will talk about in more detail later on.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=698"
  },
  {
    "text": "Now that we understand structural identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=701"
  },
  {
    "text": "we need to talk about its evil nemesis, AnyView.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=704"
  },
  {
    "text": "To understand the impact of using AnyView, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=708"
  },
  {
    "text": "let's look at the effect that it has ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=711"
  },
  {
    "text": "on the structure of your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=712"
  },
  {
    "text": "Earlier we wrote this if statement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=715"
  },
  {
    "text": "to switch between the AdoptionDirectory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=717"
  },
  {
    "text": "and the DogList.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=719"
  },
  {
    "text": "When SwiftUI looks at this code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=720"
  },
  {
    "text": "it sees the generic type structure on the right.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=722"
  },
  {
    "text": "Now let's look at a different example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=726"
  },
  {
    "text": "one that uses AnyView extensively.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=728"
  },
  {
    "text": "This is a helper function I've written ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=731"
  },
  {
    "text": "to get a view that represents a dog's breed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=733"
  },
  {
    "text": "Each conditional branch in the function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=737"
  },
  {
    "text": "returns a different kind of view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=739"
  },
  {
    "text": "so I've wrapped them all in AnyViews ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=741"
  },
  {
    "text": "because Swift requires a single return type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=743"
  },
  {
    "text": "for the whole function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=745"
  },
  {
    "text": "Unfortunately, this also means that SwiftUI can't see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=748"
  },
  {
    "text": "the conditional structure of my code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=752"
  },
  {
    "text": "Instead, it just sees an AnyView ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=754"
  },
  {
    "text": "as a return type of the function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=757"
  },
  {
    "text": "This is because AnyView is what's called ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=759"
  },
  {
    "text": "a \"type-erasing wrapper type\" -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=762"
  },
  {
    "text": "it hides the type of the view it is wrapping ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=765"
  },
  {
    "text": "from its generic signature.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=767"
  },
  {
    "text": "But perhaps more importantly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=769"
  },
  {
    "text": "this code is also just really hard to read ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=771"
  },
  {
    "text": "for us mere humans.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=774"
  },
  {
    "text": "Let's see if we can simplify this code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=776"
  },
  {
    "text": "and also make more of its structure visible to SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=778"
  },
  {
    "text": "First, it looks like this branch is conditionally adding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=783"
  },
  {
    "text": "a SheepView alongside our BorderCollieView ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=787"
  },
  {
    "text": "if there are sheep nearby.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=789"
  },
  {
    "text": "We can simplify this by conditionally adding the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=792"
  },
  {
    "text": "inside the HStack rather than ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=795"
  },
  {
    "text": "conditionally adding the HStack around our views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=797"
  },
  {
    "text": "With that change, it's now easy to see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=802"
  },
  {
    "text": "that we're just returning a single view from each branch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=804"
  },
  {
    "text": "so our local dogView variable isn't necessary.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=807"
  },
  {
    "text": "Instead, we can replace it with return statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=811"
  },
  {
    "text": "inside of each branch.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=814"
  },
  {
    "text": "As we saw earlier, normal SwiftUI View code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=816"
  },
  {
    "text": "can use if statements that return different types of views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=819"
  },
  {
    "text": "But if we just try deleting the return statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=824"
  },
  {
    "text": "and AnyViews from our code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=826"
  },
  {
    "text": "we see some errors and warnings appear.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=828"
  },
  {
    "text": "This is because SwiftUI requires a single return type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=832"
  },
  {
    "text": "from our helper function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=835"
  },
  {
    "text": "So how can we avoid these errors? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=837"
  },
  {
    "text": "Recall that the body property of a view is special, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=840"
  },
  {
    "text": "because the View protocol implicitly wraps it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=844"
  },
  {
    "text": "in a ViewBuilder.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=847"
  },
  {
    "text": "This translates the logic in the property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=848"
  },
  {
    "text": "into a single, generic view structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=850"
  },
  {
    "text": "Now, Swift does not infer helper functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=854"
  },
  {
    "text": "to be view builders by default, but we can opt into that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=857"
  },
  {
    "text": "by manually applying the ViewBuilder attribute ourselves.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=860"
  },
  {
    "text": "And that allows us to remove the return statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=864"
  },
  {
    "text": "and the AnyView wrappers without any warnings or errors.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=868"
  },
  {
    "text": "OK, our code is looking pretty good now! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=872"
  },
  {
    "text": "We've gotten rid of all of the AnyViews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=875"
  },
  {
    "text": "making it easier to read than before.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=877"
  },
  {
    "text": "And if we look at the type signature of the result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=880"
  },
  {
    "text": "it now exactly replicates the conditional logic ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=883"
  },
  {
    "text": "of our function with a tree of conditional content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=886"
  },
  {
    "text": "providing SwiftUI with a much richer perspective ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=889"
  },
  {
    "text": "of the view and the identities of its components.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=893"
  },
  {
    "text": "But there's one more small improvement we can make.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=897"
  },
  {
    "text": "The top level of our function is just matching ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=900"
  },
  {
    "text": "against different cases of the dog's breed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=902"
  },
  {
    "text": "This seems like an excellent use case for a switch statement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=905"
  },
  {
    "text": "which are also supported by view builders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=908"
  },
  {
    "text": "Now it's even easier to quickly understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=912"
  },
  {
    "text": "all the different cases of our view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=914"
  },
  {
    "text": "And because switch statements are really just syntactic sugar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=917"
  },
  {
    "text": "for conditional statements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=920"
  },
  {
    "text": "our resulting view's type signature on the right ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=922"
  },
  {
    "text": "remains exactly the same.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=925"
  },
  {
    "text": "Stepping back, we just showed you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=927"
  },
  {
    "text": "how AnyViews erase type information from your code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=930"
  },
  {
    "text": "and walked through how to get rid of unnecessary AnyViews ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=933"
  },
  {
    "text": "by leveraging view builders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=937"
  },
  {
    "text": "In general, we recommend avoiding AnyViews ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=938"
  },
  {
    "text": "whenever possible.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=941"
  },
  {
    "text": "Having too many AnyViews will often make code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=943"
  },
  {
    "text": "harder to read and understand.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=946"
  },
  {
    "text": "Traditional control flow statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=948"
  },
  {
    "text": "like if/else and switch make it much easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=950"
  },
  {
    "text": "to see the different possible states of a view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=952"
  },
  {
    "text": "And because AnyView hides static type information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=956"
  },
  {
    "text": "from the compiler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=959"
  },
  {
    "text": "it can sometimes prevent helpful diagnostic errors and warnings ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=960"
  },
  {
    "text": "from being surfaced in your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=963"
  },
  {
    "text": "Finally, keep in mind that using AnyView when you don't need to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=966"
  },
  {
    "text": "can result in worse performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=970"
  },
  {
    "text": "When possible, use generics to preserve static type information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=973"
  },
  {
    "text": "rather than passing AnyViews around your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=976"
  },
  {
    "text": "And with that, we've finished introducing the basic types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=980"
  },
  {
    "text": "of view identity in SwiftUI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=983"
  },
  {
    "text": "With explicit identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=986"
  },
  {
    "text": "we can tie the identity of our views to our data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=987"
  },
  {
    "text": "or provide custom identifiers to refer to specific views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=990"
  },
  {
    "text": "And with structural identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=995"
  },
  {
    "text": "we've learned how SwiftUI can identify our views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=997"
  },
  {
    "text": "just based on their type and position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=999"
  },
  {
    "text": "within the view hierarchy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1001"
  },
  {
    "text": "And now I'll hand things over to Luca ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1004"
  },
  {
    "text": "to discuss how the identity of your views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1006"
  },
  {
    "text": "is related to their lifetime and state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1008"
  },
  {
    "text": "Luca Bernardi: Thanks, Matt.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1011"
  },
  {
    "text": "Now that we understand how SwiftUI identifies your views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1013"
  },
  {
    "text": "let's explore how identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1018"
  },
  {
    "text": "ties into the lifetime of your views and data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1019"
  },
  {
    "text": "This will help you better understand how SwiftUI works.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1023"
  },
  {
    "text": "To help illustrate this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1027"
  },
  {
    "text": "I'm also going to bring in a friend.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1029"
  },
  {
    "text": "This is Theseus.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1032"
  },
  {
    "text": "Isn't he adorable, too? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1033"
  },
  {
    "text": "Someone will say more adorable, but I digress.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1035"
  },
  {
    "text": "It is very intuitive for us to think that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1038"
  },
  {
    "text": "once we name our favorite pet, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1041"
  },
  {
    "text": "he'll always be the same adorable cat, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1043"
  },
  {
    "text": "even when he is in different states ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1046"
  },
  {
    "text": "and he moves throughout the day.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1048"
  },
  {
    "text": "When we look at him one moment, he might be sleepy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1051"
  },
  {
    "text": "and a moment later, being a proper cat, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1055"
  },
  {
    "text": "he's annoyed by my presence -- but he'll always be Theseus.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1058"
  },
  {
    "text": "This is the essence of connecting identity to lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1064"
  },
  {
    "text": "Identity allows us to define a stable element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1068"
  },
  {
    "text": "for different values over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1072"
  },
  {
    "text": "In other words, it allows us to introduce continuity over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1075"
  },
  {
    "text": "You might be wondering, how does this apply to SwiftUI? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1080"
  },
  {
    "text": "So let's bring back a cat-friendly version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1084"
  },
  {
    "text": "of the app Matt was working on.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1086"
  },
  {
    "text": "Just like Theseus can be in different states ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1090"
  },
  {
    "text": "at different moments in time, our views are also ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1092"
  },
  {
    "text": "in different states throughout their lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1097"
  },
  {
    "text": "Every single state is a different value for our view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1101"
  },
  {
    "text": "Identity connects these different values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1106"
  },
  {
    "text": "as a single entity -- a view -- over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1108"
  },
  {
    "text": "Let's look at some code to clarify this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1113"
  },
  {
    "text": "Here we have a simple view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1116"
  },
  {
    "text": "that displays the intensity of purring.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1118"
  },
  {
    "text": "Spoiler: Theseus is pretty loud.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1121"
  },
  {
    "text": "Through the evaluation of body, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1124"
  },
  {
    "text": "SwiftUI will create a new value for this view; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1126"
  },
  {
    "text": "in this case, with an intensity value of 25.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1130"
  },
  {
    "text": "Theseus is getting hungry and wants more attention.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1134"
  },
  {
    "text": "body is invoked again with a higher intensity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1138"
  },
  {
    "text": "and the new value for the view is created.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1141"
  },
  {
    "text": "These are two distinct values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1145"
  },
  {
    "text": "created from the same view definition.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1148"
  },
  {
    "text": "SwiftUI will keep around a copy of the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1151"
  },
  {
    "text": "to perform a comparison and know if the view has changed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1154"
  },
  {
    "text": "But after that, the value is destroyed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1159"
  },
  {
    "text": "What it is important to understand here is that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1163"
  },
  {
    "text": "the view value is different from the view identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1166"
  },
  {
    "text": "View values are ephemeral ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1170"
  },
  {
    "text": "and you should not rely on their lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1172"
  },
  {
    "text": "But what you can control is their identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1174"
  },
  {
    "text": "When a view is first created and it appears, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1179"
  },
  {
    "text": "SwiftUI assigns it an identity using a combination ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1182"
  },
  {
    "text": "of the techniques discussed before.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1186"
  },
  {
    "text": "Over time, driven by updates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1189"
  },
  {
    "text": "new values for the view are created.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1192"
  },
  {
    "text": "But from SwiftUI's perspective, these represent the same view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1195"
  },
  {
    "text": "Once the identity of the view changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1201"
  },
  {
    "text": "or the view is removed, its lifetime ends.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1203"
  },
  {
    "text": "Whenever we talk about the lifetime of a view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1208"
  },
  {
    "text": "we are referring to the duration of the identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1211"
  },
  {
    "text": "associated with that view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1214"
  },
  {
    "text": "Being able to connect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1217"
  },
  {
    "text": "the identity of a view with its lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1219"
  },
  {
    "text": "is fundamental to understand how SwiftUI persists your state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1222"
  },
  {
    "text": "So let's bring State and StateObject into the picture.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1227"
  },
  {
    "text": "When SwiftUI is looking at your view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1231"
  },
  {
    "text": "and sees a State or a StateObject, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1234"
  },
  {
    "text": "it knows that it needs to persist that piece of data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1237"
  },
  {
    "text": "throughout the view's lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1240"
  },
  {
    "text": "In other words, State and StateObject ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1243"
  },
  {
    "text": "are the persistent storage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1246"
  },
  {
    "text": "associated with your view's identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1249"
  },
  {
    "text": "At the beginning of a view's identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1252"
  },
  {
    "text": "when it's created for the first time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1254"
  },
  {
    "text": "SwiftUI is going to allocate storage in memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1257"
  },
  {
    "text": "for State and StateObject using their initial values.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1260"
  },
  {
    "text": "Here we are focusing on the title state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1265"
  },
  {
    "text": "Throughout the lifetime of the view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1269"
  },
  {
    "text": "SwiftUI will persist this storage as it gets mutated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1271"
  },
  {
    "text": "and the view's body is re-evaluated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1275"
  },
  {
    "text": "Let's look at a concrete example of how changes in identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1279"
  },
  {
    "text": "affect the persistence of state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1282"
  },
  {
    "text": "This is an interesting example because we have the same view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1285"
  },
  {
    "text": "but in two separate branches.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1289"
  },
  {
    "text": "If you remember from before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1291"
  },
  {
    "text": "because of structural identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1293"
  },
  {
    "text": "the two views are considered to have different identities.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1295"
  },
  {
    "text": "Matt has discussed how this affects animations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1300"
  },
  {
    "text": "but this also has a profound impact ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1304"
  },
  {
    "text": "on the persistence of your state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1306"
  },
  {
    "text": "Let's see this in practice.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1309"
  },
  {
    "text": "When we first evaluate body and we enter the true branch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1311"
  },
  {
    "text": "SwiftUI will allocate persistent storage for the state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1315"
  },
  {
    "text": "with its initial value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1320"
  },
  {
    "text": "Throughout the lifetime of this view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1323"
  },
  {
    "text": "SwiftUI persists the state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1325"
  },
  {
    "text": "as it gets mutated by various actions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1328"
  },
  {
    "text": "But what happens if the value of dayTime changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1331"
  },
  {
    "text": "and we enter the false branch? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1334"
  },
  {
    "text": "SwiftUI knows this is a different view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1337"
  },
  {
    "text": "with a distinct identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1340"
  },
  {
    "text": "It creates new storage for the false view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1343"
  },
  {
    "text": "starting with the state's initial value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1346"
  },
  {
    "text": "and the storage for the true view is deallocated right after.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1349"
  },
  {
    "text": "But what if we go back to the true branch? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1355"
  },
  {
    "text": "Well, that's a new view again, so SwiftUI creates new storage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1358"
  },
  {
    "text": "starting again from the state's initial value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1363"
  },
  {
    "text": "The takeaway here is that whenever the identity changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1367"
  },
  {
    "text": "the state is replaced.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1371"
  },
  {
    "text": "Let me pause here for a moment and make sure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1374"
  },
  {
    "text": "that you understand this important point: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1377"
  },
  {
    "text": "the persistence of your state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1380"
  },
  {
    "text": "is tied to the lifetime of your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1382"
  },
  {
    "text": "This is a very powerful concept because we can clearly separate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1387"
  },
  {
    "text": "what is the essence of a view -- its state -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1391"
  },
  {
    "text": "and tie that to its identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1394"
  },
  {
    "text": "Everything else can be derived from it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1397"
  },
  {
    "text": "And your data is so important that SwiftUI has a set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1401"
  },
  {
    "text": "of data-driven constructs that use the identity of your data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1406"
  },
  {
    "text": "as a form of explicit identity for your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1410"
  },
  {
    "text": "The canonical example of this is ForEach.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1415"
  },
  {
    "text": "Let's now take a look at all of the different ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1419"
  },
  {
    "text": "you can initialize a ForEach.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1422"
  },
  {
    "text": "This will help us build a better intuition around this type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1424"
  },
  {
    "text": "The simplest form of ForEach is one that takes a constant range.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1429"
  },
  {
    "text": "This is a very convenient initializer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1434"
  },
  {
    "text": "especially when you are getting started ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1436"
  },
  {
    "text": "prototyping some new UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1438"
  },
  {
    "text": "SwiftUI is going to use the offset in this range ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1440"
  },
  {
    "text": "to identify the views produced by the view builder.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1444"
  },
  {
    "text": "By requiring a constant range, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1447"
  },
  {
    "text": "we guarantee that the identities are stable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1450"
  },
  {
    "text": "for the lifetime of the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1454"
  },
  {
    "text": "In fact, it is an error to use this initializer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1456"
  },
  {
    "text": "with a dynamic range.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1460"
  },
  {
    "text": "And new this year, you will see a warning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1463"
  },
  {
    "text": "when providing a non-constant range.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1466"
  },
  {
    "text": "Let's make things more interesting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1469"
  },
  {
    "text": "and bring in a dynamic collection of data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1471"
  },
  {
    "text": "This initializer takes a collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1475"
  },
  {
    "text": "and a keypath to a property serving as an identifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1477"
  },
  {
    "text": "This property must be hashable because SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1481"
  },
  {
    "text": "is going to use its value to assign an identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1485"
  },
  {
    "text": "to all the views generated from the elements of the collection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1489"
  },
  {
    "text": "Later, Raj is going to show you some examples ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1495"
  },
  {
    "text": "of how choosing a stable identity affects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1498"
  },
  {
    "text": "the performance and correctness of your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1501"
  },
  {
    "text": "This idea of providing a stable identity for your data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1505"
  },
  {
    "text": "is so important that the standard library ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1509"
  },
  {
    "text": "defines the Identifiable protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1512"
  },
  {
    "text": "to describe this capability.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1515"
  },
  {
    "text": "And SwiftUI takes full advantage of this protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1518"
  },
  {
    "text": "allowing you to omit the key path ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1521"
  },
  {
    "text": "and use the identifier provided by the protocol requirement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1524"
  },
  {
    "text": "to define the identity associated with your data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1528"
  },
  {
    "text": "and your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1532"
  },
  {
    "text": "Something that I really love about Swift is that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1534"
  },
  {
    "text": "we can take advantage of its type system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1537"
  },
  {
    "text": "to precisely describe the constraints of the problem ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1540"
  },
  {
    "text": "that we are solving.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1543"
  },
  {
    "text": "So indulge with me in taking a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1545"
  },
  {
    "text": "at the definition of the initializer we are using here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1547"
  },
  {
    "text": "There are a lot of interesting things in this short definition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1551"
  },
  {
    "text": "so let's try to unpack them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1555"
  },
  {
    "text": "ForEach needs two main pieces: a collection -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1558"
  },
  {
    "text": "here indicated by the generic argument Data -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1561"
  },
  {
    "text": "and a way to generate a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1565"
  },
  {
    "text": "from each element of the collection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1567"
  },
  {
    "text": "The shape of this initializer should give you the intuition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1570"
  },
  {
    "text": "that ForEach defines a relationship ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1573"
  },
  {
    "text": "between a collection of data and a collection of views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1576"
  },
  {
    "text": "But actually, the most interesting part here ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1581"
  },
  {
    "text": "is that we constrain the elements of the collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1584"
  },
  {
    "text": "to be Identifiable.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1587"
  },
  {
    "text": "Again, the purpose of the Identifiable protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1589"
  },
  {
    "text": "is to allow for your type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1592"
  },
  {
    "text": "to provide a stable notion of identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1594"
  },
  {
    "text": "so that SwiftUI can keep track of your data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1597"
  },
  {
    "text": "throughout its lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1601"
  },
  {
    "text": "In fact, this is very similar to the concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1603"
  },
  {
    "text": "of identity and lifetime that we discussed earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1606"
  },
  {
    "text": "SwiftUI views that takes an Identifiable type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1610"
  },
  {
    "text": "and a view builder are data-driven components.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1613"
  },
  {
    "text": "These views use the identity of the data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1617"
  },
  {
    "text": "that you provide to scope the lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1620"
  },
  {
    "text": "of the views associated to it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1623"
  },
  {
    "text": "Choosing a good identifier is your opportunity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1626"
  },
  {
    "text": "to control the lifetime of your views and data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1629"
  },
  {
    "text": "So let's recap what we have discussed in this section.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1634"
  },
  {
    "text": "Views values are ephemeral ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1639"
  },
  {
    "text": "and you should not rely on their lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1641"
  },
  {
    "text": "But their identity is not, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1644"
  },
  {
    "text": "and is what gives them continuity over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1646"
  },
  {
    "text": "You are in control of the identity of your views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1651"
  },
  {
    "text": "and you can use identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1654"
  },
  {
    "text": "to clearly scope the lifetime of state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1655"
  },
  {
    "text": "And finally, SwiftUI takes full advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1659"
  },
  {
    "text": "of the Identifiable protocol for data-driven components, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1663"
  },
  {
    "text": "so it's important to choose a stable identifier for your data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1666"
  },
  {
    "text": "And now continuing the tradition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1671"
  },
  {
    "text": "I'm going to hand it over to Raj. Raj? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1674"
  },
  {
    "text": "Raj Ramamurthy: Thanks, Luca! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1676"
  },
  {
    "text": "So far, we've explained what identity is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1678"
  },
  {
    "text": "and how it ties into a view's lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1680"
  },
  {
    "text": "Next, I'm going to dive into how SwiftUI updates the UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1683"
  },
  {
    "text": "The goal is to give you a better mental model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1687"
  },
  {
    "text": "for how to structure SwiftUI code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1690"
  },
  {
    "text": "I'm also going to show a few examples ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1692"
  },
  {
    "text": "outlining everything at the end.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1694"
  },
  {
    "text": "To kick this discussion of dependencies off, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1697"
  },
  {
    "text": "let's look at a view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1699"
  },
  {
    "text": "Here's a simple view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1701"
  },
  {
    "text": "It shows a button that rewards a dog with a treat.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1702"
  },
  {
    "text": "Sorry, Luca, but I'm more of a dog person.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1706"
  },
  {
    "text": "Let's focus on the structure of the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1709"
  },
  {
    "text": "First, let's look at the top.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1712"
  },
  {
    "text": "There are two properties: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1714"
  },
  {
    "text": "one for a dog and another for a treat.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1716"
  },
  {
    "text": "These properties are dependencies of the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1720"
  },
  {
    "text": "A dependency is just an input to the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1723"
  },
  {
    "text": "When a dependency changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1727"
  },
  {
    "text": "the view is required to produce a new body.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1729"
  },
  {
    "text": "The body is where you build the hierarchy for the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1733"
  },
  {
    "text": "Diving into this view's hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1736"
  },
  {
    "text": "we have a button with an action.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1738"
  },
  {
    "text": "Actions are what trigger changes to a view's dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1743"
  },
  {
    "text": "Let's swap the code out for an equivalent diagram.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1747"
  },
  {
    "text": "Here's a diagram of our DogView.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1751"
  },
  {
    "text": "When we tap on the button, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1753"
  },
  {
    "text": "it dispatches an action to reward the dog.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1755"
  },
  {
    "text": "Our dog gulps down the treat in a flash.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1758"
  },
  {
    "text": "And that results in a change to the dog -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1761"
  },
  {
    "text": "maybe he wants another.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1763"
  },
  {
    "text": "Because the dependency changed, DogView produces a new body.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1765"
  },
  {
    "text": "To learn more about the general concepts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1771"
  },
  {
    "text": "of data flow in SwiftUI, check out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1773"
  },
  {
    "text": "\"Data essentials in SwiftUI\" from WWDC 2020.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1775"
  },
  {
    "text": "Next, let's simplify this diagram a bit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1780"
  },
  {
    "text": "Focusing in on the view hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1783"
  },
  {
    "text": "notice how our views form a tree-like structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1785"
  },
  {
    "text": "And if we add the dog and treat dependencies back at the top, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1788"
  },
  {
    "text": "it still looks like a tree.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1792"
  },
  {
    "text": "However, the DogView is not the only view with dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1795"
  },
  {
    "text": "In SwiftUI, each view can have its own set of dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1799"
  },
  {
    "text": "So far, this still looks like a tree.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1804"
  },
  {
    "text": "But note, there can be multiple views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1806"
  },
  {
    "text": "dependent on the same state or other data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1809"
  },
  {
    "text": "For example, one of the descendants ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1812"
  },
  {
    "text": "might depend on the dog, too.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1814"
  },
  {
    "text": "And this could happen for one of our other dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1817"
  },
  {
    "text": "So we started with a tree, but this structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1820"
  },
  {
    "text": "only loosely resembles a tree now.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1823"
  },
  {
    "text": "In fact, if we rearrange it to avoid overlapping lines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1825"
  },
  {
    "text": "we end up with this structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1829"
  },
  {
    "text": "which reveals that this is actually a graph, not a tree.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1831"
  },
  {
    "text": "In fact, we call this structure the \"dependency graph\".",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1836"
  },
  {
    "text": "This structure is important because it allows SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1842"
  },
  {
    "text": "to efficiently update only those views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1844"
  },
  {
    "text": "that require a new body.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1847"
  },
  {
    "text": "Take, for example, the dependency at the bottom.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1849"
  },
  {
    "text": "If we examine this dependency, it has two dependent views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1853"
  },
  {
    "text": "The secret of the graph is that if the dependency changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1857"
  },
  {
    "text": "only those views will be invalidated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1861"
  },
  {
    "text": "SwiftUI will call each view's body, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1864"
  },
  {
    "text": "producing a new body value for each view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1866"
  },
  {
    "text": "SwiftUI will instantiate the values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1870"
  },
  {
    "text": "of each invalidated view's body.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1871"
  },
  {
    "text": "That may result in more dependencies changing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1874"
  },
  {
    "text": "but not always! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1877"
  },
  {
    "text": "Because views are value types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1879"
  },
  {
    "text": "SwiftUI can efficiently compare them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1881"
  },
  {
    "text": "to only update the right subset of views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1883"
  },
  {
    "text": "This is another way to look at what Luca discussed earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1886"
  },
  {
    "text": "A view's value is short-lived.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1890"
  },
  {
    "text": "The struct value is just used for comparison, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1892"
  },
  {
    "text": "but the view itself has a longer lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1895"
  },
  {
    "text": "And that's how we can avoid generating a new body ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1898"
  },
  {
    "text": "for the view in the center.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1900"
  },
  {
    "text": "An identity is the backbone of the dependency graph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1903"
  },
  {
    "text": "As Matt said, every view has identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1907"
  },
  {
    "text": "whether specified explicitly or structurally.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1909"
  },
  {
    "text": "That identity is how SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1914"
  },
  {
    "text": "routes changes to the right views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1916"
  },
  {
    "text": "and efficiently updates the UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1918"
  },
  {
    "text": "There are many kinds of dependencies.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1921"
  },
  {
    "text": "We saw a few examples earlier with the treat property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1923"
  },
  {
    "text": "and the dog binding, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1926"
  },
  {
    "text": "but you can also form dependencies by using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1928"
  },
  {
    "text": "the environment, state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1929"
  },
  {
    "text": "or any of the observable object property wrappers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1931"
  },
  {
    "text": "Next, I'd like to talk about how to improve ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1935"
  },
  {
    "text": "the use of identity in your views.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1938"
  },
  {
    "text": "This will help SwiftUI better understand your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1940"
  },
  {
    "text": "As Luca said, the lifetime of a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1945"
  },
  {
    "text": "is the duration of its identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1947"
  },
  {
    "text": "and that means the stability of an identifier is crucial.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1949"
  },
  {
    "text": "An identifier that isn't stable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1953"
  },
  {
    "text": "can result in a shorter view lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1955"
  },
  {
    "text": "And having a stable identifier also helps performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1957"
  },
  {
    "text": "since SwiftUI doesn't need to continually ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1961"
  },
  {
    "text": "create storage for the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1962"
  },
  {
    "text": "and churn through updating the graph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1964"
  },
  {
    "text": "As you saw earlier, SwiftUI uses lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1966"
  },
  {
    "text": "to manage persisted storage, so stable identifiers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1969"
  },
  {
    "text": "are also important for avoiding loss of state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1972"
  },
  {
    "text": "Let's turn to a code example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1976"
  },
  {
    "text": "to explain the importance of identifier stability.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1978"
  },
  {
    "text": "In this example, I have a list of my favorite pets.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1983"
  },
  {
    "text": "We've got an identifier on our pet struct.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1986"
  },
  {
    "text": "But there's actually a bug; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1989"
  },
  {
    "text": "every time I get a new pet, everything on screen flashes! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1991"
  },
  {
    "text": "Let's stop for a second and look at this code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=1998"
  },
  {
    "text": "Can you spot where the bug is? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2001"
  },
  {
    "text": "The bug is here, in our Identifiable conformance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2004"
  },
  {
    "text": "If you didn't pass the test, don't worry; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2007"
  },
  {
    "text": "there are no treats in this section.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2010"
  },
  {
    "text": "The problem is that this identifier isn't stable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2012"
  },
  {
    "text": "so anytime the data changes, we get a new identifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2015"
  },
  {
    "text": "What if instead, we used the indices of our pets array? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2020"
  },
  {
    "text": "Unfortunately, this has a similar problem.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2024"
  },
  {
    "text": "By using the indices, views are now identified by ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2027"
  },
  {
    "text": "the position of their respective pet in the collection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2030"
  },
  {
    "text": "If I decide I have a new first favorite pet, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2034"
  },
  {
    "text": "all the other pets will change their identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2037"
  },
  {
    "text": "which could cause a bad bug.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2040"
  },
  {
    "text": "In this example, the button inserts a new element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2042"
  },
  {
    "text": "at index zero, but because the last index is the new one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2045"
  },
  {
    "text": "we get an insertion at the end instead of the start.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2049"
  },
  {
    "text": "This is because, like computed random identifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2056"
  },
  {
    "text": "indices are not a stable form of identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2058"
  },
  {
    "text": "In this example, we need to use a stable identifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2063"
  },
  {
    "text": "like one from a database ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2066"
  },
  {
    "text": "or derived from stable properties of the pet.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2068"
  },
  {
    "text": "Any persistent identifier is a great choice.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2071"
  },
  {
    "text": "Now our animation looks great! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2074"
  },
  {
    "text": "But stability isn't the only property we need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2079"
  },
  {
    "text": "for good identifiers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2081"
  },
  {
    "text": "Another property of good identifiers is uniqueness.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2085"
  },
  {
    "text": "Each identifier should map to a single view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2089"
  },
  {
    "text": "This ensures that animations look great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2092"
  },
  {
    "text": "performance is smooth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2094"
  },
  {
    "text": "and the dependencies of your hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2095"
  },
  {
    "text": "are reflected in the most efficient form.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2097"
  },
  {
    "text": "Let's look at another example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2100"
  },
  {
    "text": "In this example, I'm working on a view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2104"
  },
  {
    "text": "with all of my pet's favorite treats.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2106"
  },
  {
    "text": "Each treat has a name, an emoji, and an expiration date.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2109"
  },
  {
    "text": "I've chosen to identify each treat by its name.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2113"
  },
  {
    "text": "At this point -- I'm sure you can guess -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2118"
  },
  {
    "text": "we have a bug here, too.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2120"
  },
  {
    "text": "What happens when we have ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2122"
  },
  {
    "text": "more than one of the same kind of treat? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2124"
  },
  {
    "text": "I don't know about you, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2126"
  },
  {
    "text": "but I like to buy dog biscuits in bulk.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2127"
  },
  {
    "text": "When I add them to the jar, they might not show up! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2130"
  },
  {
    "text": "The problem is that the name of a treat ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2133"
  },
  {
    "text": "is not a unique identifier for it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2136"
  },
  {
    "text": "Instead, we can use a serial number ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2139"
  },
  {
    "text": "or other unique ID per treat.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2141"
  },
  {
    "text": "And this ensures all the right data is shown in our jar.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2144"
  },
  {
    "text": "It will also ensure better animations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2148"
  },
  {
    "text": "and better performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2150"
  },
  {
    "text": "When SwiftUI needs an identifier, it needs your help! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2152"
  },
  {
    "text": "Please be careful when using random identifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2156"
  },
  {
    "text": "especially in computed properties.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2159"
  },
  {
    "text": "In general, you want all of your identifiers to be stable.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2161"
  },
  {
    "text": "An identifier shouldn't change over time; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2166"
  },
  {
    "text": "a new identifier represents a new item with a new lifetime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2168"
  },
  {
    "text": "And lastly, identifiers need to be unique.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2173"
  },
  {
    "text": "Multiple views can't share an identifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2176"
  },
  {
    "text": "SwiftUI relies on these properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2180"
  },
  {
    "text": "to make your app run smoothly and bug-free.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2182"
  },
  {
    "text": "Now that we've talked about explicit identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2185"
  },
  {
    "text": "I'd like to move on to structural identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2188"
  },
  {
    "text": "In this example, I'm working on the treat jar from earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2191"
  },
  {
    "text": "As a responsible pet lover, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2195"
  },
  {
    "text": "I only feed my pets the finest, unexpired foods.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2196"
  },
  {
    "text": "To help me tell when treats have gone bad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2201"
  },
  {
    "text": "I've added a new modifier that optionally dims a treat cell ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2203"
  },
  {
    "text": "when the treat is expired.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2207"
  },
  {
    "text": "I've highlighted the cell that's dimmed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2209"
  },
  {
    "text": "Let's dive into the modifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2212"
  },
  {
    "text": "You can see that in the modifier, I have a date ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2215"
  },
  {
    "text": "and compare it to the current date ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2218"
  },
  {
    "text": "to know when to dim the view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2220"
  },
  {
    "text": "This seems fine at first blush, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2223"
  },
  {
    "text": "but there's a subtle problem here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2225"
  },
  {
    "text": "If the condition changes and our treat becomes expired, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2227"
  },
  {
    "text": "we end up with a new identity because there is a branch here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2231"
  },
  {
    "text": "As Matt discussed, branches are a form of structural identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2235"
  },
  {
    "text": "This means we have two copies of the content ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2240"
  },
  {
    "text": "instead of a single, optionally modified copy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2242"
  },
  {
    "text": "Note that the branch here is in a modifier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2246"
  },
  {
    "text": "For clarity, I've put the modifier and its use site ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2249"
  },
  {
    "text": "on the same slide, but in your project, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2252"
  },
  {
    "text": "you might have branches like this across files ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2255"
  },
  {
    "text": "without even being aware of it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2257"
  },
  {
    "text": "Of course, everything we've discussed here ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2259"
  },
  {
    "text": "applies to views and view modifiers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2261"
  },
  {
    "text": "So how can we avoid this? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2266"
  },
  {
    "text": "Well, one way is to fold the branches together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2268"
  },
  {
    "text": "and move the condition inside the opacity modifier, like so.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2270"
  },
  {
    "text": "By removing this branch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2276"
  },
  {
    "text": "we've correctly described this view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2277"
  },
  {
    "text": "as having a single identity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2279"
  },
  {
    "text": "Furthermore, moving the condition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2281"
  },
  {
    "text": "inside the opacity modifier can help performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2283"
  },
  {
    "text": "because we've tightly scoped the dependent code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2286"
  },
  {
    "text": "Now when the condition changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2289"
  },
  {
    "text": "only the opacity needs to change.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2292"
  },
  {
    "text": "The trick to this is that when the condition is true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2296"
  },
  {
    "text": "we have an opacity of 1, which looks like this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2299"
  },
  {
    "text": "An opacity of 1 has no effect.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2303"
  },
  {
    "text": "We call modifiers like this \"inert modifiers,\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2306"
  },
  {
    "text": "because they don't affect the rendered result.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2308"
  },
  {
    "text": "SwiftUI modifiers are cheap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2311"
  },
  {
    "text": "so there is little inherent cost with this pattern.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2313"
  },
  {
    "text": "Because there is no resulting visual effect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2316"
  },
  {
    "text": "the framework can efficiently prune away the modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2318"
  },
  {
    "text": "further reducing its cost.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2321"
  },
  {
    "text": "Branches are great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2324"
  },
  {
    "text": "and they exist in SwiftUI for a reason.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2325"
  },
  {
    "text": "But when used unnecessarily, they can cause poor performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2328"
  },
  {
    "text": "surprising animations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2331"
  },
  {
    "text": "and, as Luca showed, even loss of state.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2333"
  },
  {
    "text": "When you introduce a branch, pause for a second ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2336"
  },
  {
    "text": "and consider whether you're representing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2339"
  },
  {
    "text": "multiple views or two states of the same view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2341"
  },
  {
    "text": "As we saw, it often works better to use an inert modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2345"
  },
  {
    "text": "instead of a branch to identify a single view.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2349"
  },
  {
    "text": "Here are just a few examples of inert modifiers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2352"
  },
  {
    "text": "I especially love transformEnvironment ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2356"
  },
  {
    "text": "for conditionally writing to the environment.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2358"
  },
  {
    "text": "Putting everything together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2361"
  },
  {
    "text": "we've shown you today that identity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2363"
  },
  {
    "text": "is one of the secrets to amazing performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2364"
  },
  {
    "text": "We've discussed explicit and structural identity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2367"
  },
  {
    "text": "and how you can take advantage of each ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2370"
  },
  {
    "text": "to improve your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2372"
  },
  {
    "text": "From identity, we can derive a view's lifetime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2374"
  },
  {
    "text": "which controls its associated storage, transitions, and more.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2377"
  },
  {
    "text": "And we've also explained that SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2382"
  },
  {
    "text": "uses identity and lifetime to form dependencies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2384"
  },
  {
    "text": "which are represented by a graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2388"
  },
  {
    "text": "that can efficiently update the UI.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2389"
  },
  {
    "text": "Along with demystifying SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2393"
  },
  {
    "text": "we've given you some tips and tricks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2395"
  },
  {
    "text": "to avoid bugs and improve performance in your apps.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2397"
  },
  {
    "text": "And now that you've learned these tricks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2401"
  },
  {
    "text": "take a tour through your code to see if they can help you.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2402"
  },
  {
    "text": "Thank you, and keep building great apps! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2406"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10022/?time=2410"
  }
]