[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=7"
  },
  {
    "text": "Juan Rodriguez Cuellar: Hello, welcome to WWDC.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=9"
  },
  {
    "text": "My name is Juan Rodriguez Cuellar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=12"
  },
  {
    "text": "and I'm a GPU compiler engineer at Apple.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=14"
  },
  {
    "text": "In this session, we’re going to talk about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=17"
  },
  {
    "text": "the brand-new features we’ve added this year ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=19"
  },
  {
    "text": "to enhance our Metal ray tracing API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=21"
  },
  {
    "text": "But first, let’s do a quick recap about ray tracing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=24"
  },
  {
    "text": "Ray-tracing applications are based on tracing the paths ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=28"
  },
  {
    "text": "that rays take as they interact with a scene.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=32"
  },
  {
    "text": "Ray tracing is applied in a lot of domains such as audio, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=35"
  },
  {
    "text": "physics simulation, and AI; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=38"
  },
  {
    "text": "but one of the main applications is photorealistic rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=40"
  },
  {
    "text": "In rendering applications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=44"
  },
  {
    "text": "ray tracing is used to model individual rays of light, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=46"
  },
  {
    "text": "which allow us to simulate effects such as reflections, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=49"
  },
  {
    "text": "soft shadows, and indirect lighting.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=53"
  },
  {
    "text": "That is just a general definition of ray tracing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=55"
  },
  {
    "text": "Let’s talk about Metal’s approach to it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=58"
  },
  {
    "text": "We start with a compute kernel.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=61"
  },
  {
    "text": "In our kernel, we generate rays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=63"
  },
  {
    "text": "which are emitted into the scene.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=66"
  },
  {
    "text": "We then test those rays for intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=68"
  },
  {
    "text": "against the geometry in the scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=71"
  },
  {
    "text": "with an intersector and an acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=73"
  },
  {
    "text": "Each intersection point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=77"
  },
  {
    "text": "represents light bouncing off a surface; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=78"
  },
  {
    "text": "how much light bounces and in what direction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=80"
  },
  {
    "text": "determines what the object looks like.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=83"
  },
  {
    "text": "We then compute a color for each intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=86"
  },
  {
    "text": "and update the image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=89"
  },
  {
    "text": "This process is called shading ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=90"
  },
  {
    "text": "and it can also generate additional rays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=92"
  },
  {
    "text": "and those rays are also tested for intersection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=95"
  },
  {
    "text": "We repeat the process as many times as we’d like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=98"
  },
  {
    "text": "to simulate light bouncing around the scene.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=102"
  },
  {
    "text": "This year, we focused our new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=104"
  },
  {
    "text": "around three major areas.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=107"
  },
  {
    "text": "First, I will talk about how we’ve added ray-tracing support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=109"
  },
  {
    "text": "to our render pipelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=112"
  },
  {
    "text": "which allows us to mix ray tracing with our rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=114"
  },
  {
    "text": "Then I will introduce you to the new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=117"
  },
  {
    "text": "that focus on the usability and portability.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=121"
  },
  {
    "text": "These features will ease the use of Metal ray tracing API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=124"
  },
  {
    "text": "Finally, I will cover the production rendering features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=129"
  },
  {
    "text": "we’ve added this year ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=132"
  },
  {
    "text": "that will help you create more realistic content.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=134"
  },
  {
    "text": "Let's start with ray tracing from render pipelines.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=137"
  },
  {
    "text": "Let’s consider the basic case ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=141"
  },
  {
    "text": "of a render that has a single render pass.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=143"
  },
  {
    "text": "With our new support for ray tracing from render pipelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=147"
  },
  {
    "text": "this makes it super easy to add ray tracing into the render.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=150"
  },
  {
    "text": "However, without this support, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=155"
  },
  {
    "text": "to add ray tracing to this render ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=157"
  },
  {
    "text": "with last year’s Metal ray tracing API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=160"
  },
  {
    "text": "we need to add a compute pass.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=162"
  },
  {
    "text": "Let’s just start by adding it after rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=165"
  },
  {
    "text": "to augment the rendered image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=168"
  },
  {
    "text": "Adding this extra compute pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=171"
  },
  {
    "text": "means writing more output to memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=174"
  },
  {
    "text": "for the compute pass to use for ray tracing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=176"
  },
  {
    "text": "Now, what if we wanted to use ray tracing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=179"
  },
  {
    "text": "in the middle of our render pass to calculate a value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=182"
  },
  {
    "text": "such as shadowing per pixel? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=186"
  },
  {
    "text": "This means that we need to split our rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=189"
  },
  {
    "text": "and introduce a compute pass.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=191"
  },
  {
    "text": "Thinking more about what this means, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=195"
  },
  {
    "text": "we need to write out pixel positions and normals ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=197"
  },
  {
    "text": "to memory as inputs to the ray tracing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=200"
  },
  {
    "text": "and then read the intersection results back -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=203"
  },
  {
    "text": "possibly several times.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=206"
  },
  {
    "text": "But with the new support for ray tracing from render stages, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=209"
  },
  {
    "text": "we never need to leave our render pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=213"
  },
  {
    "text": "and we just write our outputs to memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=215"
  },
  {
    "text": "Let's see how we use our new API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=218"
  },
  {
    "text": "Preparing our render pipeline for ray tracing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=220"
  },
  {
    "text": "is similar to a compute pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=223"
  },
  {
    "text": "You start by building your acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=225"
  },
  {
    "text": "and defining custom intersection functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=228"
  },
  {
    "text": "To support custom intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=231"
  },
  {
    "text": "we need an intersection function table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=233"
  },
  {
    "text": "and we need to fill it with intersection functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=235"
  },
  {
    "text": "This part has some differences compared to last year’s API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=239"
  },
  {
    "text": "Let’s walk through how we can do that.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=242"
  },
  {
    "text": "Let’s consider some simple intersection functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=245"
  },
  {
    "text": "I have some functions here that will allow us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=249"
  },
  {
    "text": "to analytically intersect objects such as a sphere, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=251"
  },
  {
    "text": "a cone, or torus.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=255"
  },
  {
    "text": "When we create our pipeline, we add these functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=259"
  },
  {
    "text": "as linked functions that we may call.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=261"
  },
  {
    "text": "In this case, we are adding them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=264"
  },
  {
    "text": "to the fragment stage of the pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=266"
  },
  {
    "text": "To use the functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=270"
  },
  {
    "text": "we need to create an intersection function table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=272"
  },
  {
    "text": "from the pipeline state and stage.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=274"
  },
  {
    "text": "Once we have the table, we can create function handles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=278"
  },
  {
    "text": "from the pipeline state and stage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=281"
  },
  {
    "text": "and populate the table.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=283"
  },
  {
    "text": "Specifying the functions for the fragment stage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=287"
  },
  {
    "text": "reuses the linkedFunctions object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=290"
  },
  {
    "text": "that we introduced last year.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=292"
  },
  {
    "text": "Each stage has its own set of linkedFunctions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=295"
  },
  {
    "text": "on the render pipeline descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=298"
  },
  {
    "text": "Creating an intersection function table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=302"
  },
  {
    "text": "is much the same as when done for the compute pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=305"
  },
  {
    "text": "The only change is the addition of the stage argument.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=309"
  },
  {
    "text": "To populate the table, we create the function handle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=314"
  },
  {
    "text": "Again, the handle is specific to the stage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=319"
  },
  {
    "text": "so we need to specify the stage when requesting the handle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=322"
  },
  {
    "text": "Once we have the function handle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=327"
  },
  {
    "text": "we just insert it in the function table.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=329"
  },
  {
    "text": "And that’s all you need to do to prepare your function tables ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=333"
  },
  {
    "text": "in render pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=336"
  },
  {
    "text": "Now we just have to use everything we have built so far ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=338"
  },
  {
    "text": "to intersect.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=342"
  },
  {
    "text": "Actual use is straightforward.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=345"
  },
  {
    "text": "The accelerationStructure and the intersection function table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=347"
  },
  {
    "text": "are both bound to buffer indices on the render encoder.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=352"
  },
  {
    "text": "The shaders can then use these resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=357"
  },
  {
    "text": "to intersect rays with an intersector ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=360"
  },
  {
    "text": "the same way you would in a compute kernel.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=363"
  },
  {
    "text": "More details about how to prepare your pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=366"
  },
  {
    "text": "for ray tracing can be found in last year’s presentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=369"
  },
  {
    "text": "In that talk, you will learn about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=373"
  },
  {
    "text": "building acceleration structures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=374"
  },
  {
    "text": "creating function tables, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=377"
  },
  {
    "text": "and using the intersector in the shading language.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=379"
  },
  {
    "text": "With ray-tracing support from render pipelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=382"
  },
  {
    "text": "we are opening the door for even more opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=384"
  },
  {
    "text": "like adding ray tracing within a single render pass, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=387"
  },
  {
    "text": "mixing ray tracing with rasterization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=390"
  },
  {
    "text": "in hybrid rendering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=393"
  },
  {
    "text": "and taking advantage of optimizations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=394"
  },
  {
    "text": "such as tile functions on Apple Silicon.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=396"
  },
  {
    "text": "In fact, we will be soon adding ray tracing to our sample app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=399"
  },
  {
    "text": "that we demoed during the \"Modern Rendering in Metal\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=403"
  },
  {
    "text": "session at WWDC 2019.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=405"
  },
  {
    "text": "With ray tracing from render pipelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=409"
  },
  {
    "text": "we can update the code to use tile functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=411"
  },
  {
    "text": "to keep everything in tile memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=414"
  },
  {
    "text": "For more details about this, see this year’s ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=416"
  },
  {
    "text": "\"Explore hybrid rendering with Metal ray tracing\" presentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=418"
  },
  {
    "text": "Next up, I want to introduce the new features we've added ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=423"
  },
  {
    "text": "this year to improve the usability and portability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=426"
  },
  {
    "text": "of Metal ray tracing API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=429"
  },
  {
    "text": "These features not only provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=431"
  },
  {
    "text": "simpler use of Metal ray tracing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=433"
  },
  {
    "text": "but they also provide portability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=435"
  },
  {
    "text": "from other ray tracing APIs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=437"
  },
  {
    "text": "One of these new features is intersection query.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=440"
  },
  {
    "text": "With intersection query, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=443"
  },
  {
    "text": "we’re allowing you to have more control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=445"
  },
  {
    "text": "over the intersection process.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=447"
  },
  {
    "text": "Intersection query is aimed toward simple use cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=449"
  },
  {
    "text": "where intersector can create overhead.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=453"
  },
  {
    "text": "It is a new way of traversing the acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=456"
  },
  {
    "text": "that gives you the option of performing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=459"
  },
  {
    "text": "in-line custom intersection testing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=461"
  },
  {
    "text": "Let's take a look at how we currently handle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=464"
  },
  {
    "text": "custom intersection using last year’s intersector.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=466"
  },
  {
    "text": "Going back to the alpha test example from last year’s ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=470"
  },
  {
    "text": "ray tracing with Metal presentation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=473"
  },
  {
    "text": "we demonstrated how alpha testing is used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=476"
  },
  {
    "text": "to add a lot of geometric detail to the scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=479"
  },
  {
    "text": "as you see here in the chains and leaves.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=483"
  },
  {
    "text": "We also learned how easy it is to implement alpha testing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=486"
  },
  {
    "text": "by customizing an intersector ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=490"
  },
  {
    "text": "using the triangle intersection function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=492"
  },
  {
    "text": "The logic inside this triangle intersection function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=496"
  },
  {
    "text": "is responsible for accepting or rejecting intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=499"
  },
  {
    "text": "as the ray traverses the acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=503"
  },
  {
    "text": "In this case, test logic will reject the first intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=507"
  },
  {
    "text": "but it will accept the second intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=511"
  },
  {
    "text": "since an opaque surface has been intersected.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=515"
  },
  {
    "text": "Let’s see how intersection functions are used.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=518"
  },
  {
    "text": "When using Intersector, when you call intersect(), ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=523"
  },
  {
    "text": "we start traversing the acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=526"
  },
  {
    "text": "to find an intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=529"
  },
  {
    "text": "and fill our intersection_result.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=531"
  },
  {
    "text": "Within the intersector, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=534"
  },
  {
    "text": "intersection function gets called ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=535"
  },
  {
    "text": "each time a potential intersection is found.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=538"
  },
  {
    "text": "And intersections are then accepted or rejected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=542"
  },
  {
    "text": "based on intersection function logic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=545"
  },
  {
    "text": "This is a great programming model using intersector ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=548"
  },
  {
    "text": "since it is both performant and convenient, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=552"
  },
  {
    "text": "but it does require creating a new intersection function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=554"
  },
  {
    "text": "and linking it to the pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=558"
  },
  {
    "text": "There might be cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=561"
  },
  {
    "text": "where the logic inside the intersection function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=563"
  },
  {
    "text": "is only a few lines of code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=566"
  },
  {
    "text": "as it is the case for alpha test logic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=568"
  },
  {
    "text": "This is the intersection function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=572"
  },
  {
    "text": "that contains the logic to do alpha testing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=574"
  },
  {
    "text": "With intersection query, we can place this logic in-line ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=578"
  },
  {
    "text": "without the need of this intersection function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=581"
  },
  {
    "text": "Here is how.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=584"
  },
  {
    "text": "With intersection query, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=587"
  },
  {
    "text": "when you start the intersection process, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=589"
  },
  {
    "text": "your ray traverses the acceleration structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=591"
  },
  {
    "text": "and the query object contains the state of the traversal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=594"
  },
  {
    "text": "and the result.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=597"
  },
  {
    "text": "Each time the ray intersects a custom primitive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=601"
  },
  {
    "text": "or a nonopaque triangle, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=603"
  },
  {
    "text": "control is returned to the shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=606"
  },
  {
    "text": "for you to evaluate the intersection candidates.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=608"
  },
  {
    "text": "If the current candidate passes your custom intersection logic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=612"
  },
  {
    "text": "you commit it to update ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=616"
  },
  {
    "text": "the current committed intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=618"
  },
  {
    "text": "and then continue the intersection process.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=620"
  },
  {
    "text": "On the other hand, if candidate fails custom intersection logic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=624"
  },
  {
    "text": "you can just ignore it and continue.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=628"
  },
  {
    "text": "Let me show you the code to do alpha testing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=631"
  },
  {
    "text": "using intersection query.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=633"
  },
  {
    "text": "First, you start the traversal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=636"
  },
  {
    "text": "Note that we loop on next ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=639"
  },
  {
    "text": "to evaluate all candidate intersections.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=641"
  },
  {
    "text": "Second, you evaluate each candidate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=645"
  },
  {
    "text": "starting by checking the candidate type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=648"
  },
  {
    "text": "For alpha test example, you're interested ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=651"
  },
  {
    "text": "on intersections of triangle type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=654"
  },
  {
    "text": "After checking the type, you'll want to query ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=657"
  },
  {
    "text": "some intersection information about the candidate.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=660"
  },
  {
    "text": "We perform three queries for information needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=663"
  },
  {
    "text": "in the alpha test logic which is now in-lined.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=666"
  },
  {
    "text": "Finally, if the candidate intersection passes alpha test, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=671"
  },
  {
    "text": "you will commit it so that it becomes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=675"
  },
  {
    "text": "the current committed intersection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=677"
  },
  {
    "text": "Up to now, you have traversed the whole acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=680"
  },
  {
    "text": "evaluating candidate intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=684"
  },
  {
    "text": "and commit the intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=687"
  },
  {
    "text": "that passed the alpha test logic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=688"
  },
  {
    "text": "Now, you need to query committed intersection information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=691"
  },
  {
    "text": "to do the shading.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=695"
  },
  {
    "text": "First, you will query the committed type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=698"
  },
  {
    "text": "If none of the candidate intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=701"
  },
  {
    "text": "met your conditions to become a committed intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=704"
  },
  {
    "text": "committed type will be none, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=708"
  },
  {
    "text": "which means the current ray missed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=709"
  },
  {
    "text": "On the other hand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=713"
  },
  {
    "text": "if there is a committed intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=714"
  },
  {
    "text": "you would want to query information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=716"
  },
  {
    "text": "about the intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=718"
  },
  {
    "text": "applicable to the intersection type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=720"
  },
  {
    "text": "and then use it for shading.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=722"
  },
  {
    "text": "That’s all the code you need to perform alpha testing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=725"
  },
  {
    "text": "using intersection query.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=728"
  },
  {
    "text": "With the introduction of intersection query ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=730"
  },
  {
    "text": "and the introduction of intersector to render pipeline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=733"
  },
  {
    "text": "we are giving you more opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=736"
  },
  {
    "text": "to start bringing Metal ray tracing to your apps.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=738"
  },
  {
    "text": "Here are some things to consider when choosing between ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=741"
  },
  {
    "text": "intersector objects and intersection queries.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=745"
  },
  {
    "text": "Start by considering if you have existing code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=749"
  },
  {
    "text": "such as using the intersector in compute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=752"
  },
  {
    "text": "and your plans for porting that code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=755"
  },
  {
    "text": "If you have existing query code from other APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=758"
  },
  {
    "text": "intersection query can help to port that code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=762"
  },
  {
    "text": "Next, you have the complexity of handling custom intersection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=766"
  },
  {
    "text": "Intersector requires intersection functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=771"
  },
  {
    "text": "and tables, and it might be easier to use intersection query ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=774"
  },
  {
    "text": "to handle custom intersection yourself.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=778"
  },
  {
    "text": "The last question is performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=782"
  },
  {
    "text": "In simpler cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=784"
  },
  {
    "text": "intersection query can avoid overhead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=786"
  },
  {
    "text": "when building your pipeline for ray tracing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=789"
  },
  {
    "text": "but custom intersection handling ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=791"
  },
  {
    "text": "requires returning to your code during traversal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=793"
  },
  {
    "text": "which could have a performance impact, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=796"
  },
  {
    "text": "depending on the use case.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=798"
  },
  {
    "text": "Also, use of multiple query objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=801"
  },
  {
    "text": "will require more memory.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=803"
  },
  {
    "text": "On the other hand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=806"
  },
  {
    "text": "intersector can support those more complex cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=808"
  },
  {
    "text": "by encapsulating all of the intersection work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=811"
  },
  {
    "text": "If you have the opportunity, we would recommend ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=814"
  },
  {
    "text": "comparing the performance of both solutions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=817"
  },
  {
    "text": "That’s all about intersection query.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=821"
  },
  {
    "text": "Now let’s move on to some other new features.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=823"
  },
  {
    "text": "The next two features we’re going to talk about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=826"
  },
  {
    "text": "are user instance IDs and instance transforms.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=829"
  },
  {
    "text": "These features will help you add more information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=832"
  },
  {
    "text": "to your acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=835"
  },
  {
    "text": "and access more of the data that is already there.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=837"
  },
  {
    "text": "Here is why we think these are really useful features.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=841"
  },
  {
    "text": "If we look back to the sample code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=843"
  },
  {
    "text": "from last year’s presentation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=846"
  },
  {
    "text": "we have multiple instances of the kernel box.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=848"
  },
  {
    "text": "Underneath this, we have an instance acceleration structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=851"
  },
  {
    "text": "with a set of nodes that branch until you reach the instances.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=855"
  },
  {
    "text": "Looking at two of these instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=860"
  },
  {
    "text": "they are at the lowest level ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=862"
  },
  {
    "text": "of the instance acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=864"
  },
  {
    "text": "Currently, when you intersect one of these instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=867"
  },
  {
    "text": "you only get the system’s instance ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=870"
  },
  {
    "text": "from the intersection results.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=873"
  },
  {
    "text": "With this, you could maintain your own table of data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=875"
  },
  {
    "text": "but there’s data that we can expose ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=879"
  },
  {
    "text": "in the acceleration structure to help you.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=881"
  },
  {
    "text": "Let’s talk about user-defined instance IDs first.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=884"
  },
  {
    "text": "With this feature, you can specify a custom 32-bit value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=888"
  },
  {
    "text": "for each instance and then you get this value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=892"
  },
  {
    "text": "as part of the intersection results.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=895"
  },
  {
    "text": "This is really useful for you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=898"
  },
  {
    "text": "to index into your own data structures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=900"
  },
  {
    "text": "but it can also be used to encode custom data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=902"
  },
  {
    "text": "For example, here we’re using the user ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=906"
  },
  {
    "text": "to encode a custom color for each instance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=909"
  },
  {
    "text": "You could use this for a simpler reflection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=913"
  },
  {
    "text": "with no need to look up any additional material information.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=915"
  },
  {
    "text": "This is just one example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=919"
  },
  {
    "text": "but the opportunities are endless.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=921"
  },
  {
    "text": "I can see how you would want to encode things ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=923"
  },
  {
    "text": "like per-instance material ID or per-instance flags.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=926"
  },
  {
    "text": "We have created an extended version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=931"
  },
  {
    "text": "of instance descriptor type that is used to specify these IDs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=933"
  },
  {
    "text": "Make sure you specify which type of descriptor you’re using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=939"
  },
  {
    "text": "on the instance acceleration structure descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=942"
  },
  {
    "text": "In the shading language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=948"
  },
  {
    "text": "the value of the current user instance ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=949"
  },
  {
    "text": "is available as an input ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=952"
  },
  {
    "text": "to intersection functions with the instancing tag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=954"
  },
  {
    "text": "To obtain the values after intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=959"
  },
  {
    "text": "the user-defined instance ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=962"
  },
  {
    "text": "is available from the intersection result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=964"
  },
  {
    "text": "when using an intersector object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=967"
  },
  {
    "text": "And when using intersection query object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=969"
  },
  {
    "text": "there is a corresponding query ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=972"
  },
  {
    "text": "to access the user-defined instance ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=974"
  },
  {
    "text": "for both candidate and committed intersections.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=978"
  },
  {
    "text": "Just like user instance ID, we have added support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=981"
  },
  {
    "text": "for accessing your instance transformation matrices.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=985"
  },
  {
    "text": "This data is already specified in the instance descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=988"
  },
  {
    "text": "and it is stored in the acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=993"
  },
  {
    "text": "This year, we’ve exposed these matrices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=997"
  },
  {
    "text": "from the shading language.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1000"
  },
  {
    "text": "You can access the instance transforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1002"
  },
  {
    "text": "in the intersection functions when you apply ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1004"
  },
  {
    "text": "the instancing and world_space_data tags.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1007"
  },
  {
    "text": "Similarly, the instance transforms are provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1011"
  },
  {
    "text": "in the intersection results when using an intersector ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1014"
  },
  {
    "text": "with instancing and world_space_data tags.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1018"
  },
  {
    "text": "When using intersection query with instancing tag, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1023"
  },
  {
    "text": "there are corresponding queries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1026"
  },
  {
    "text": "for accessing the instance transforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1028"
  },
  {
    "text": "for both candidate and committed intersections.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1030"
  },
  {
    "text": "To summarize, this year we are improving ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1034"
  },
  {
    "text": "the usability and portability of Metal ray tracing API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1037"
  },
  {
    "text": "by introducing three new features.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1041"
  },
  {
    "text": "Intersection query comes as an alternative to intersector ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1043"
  },
  {
    "text": "that provides more control over the intersection process.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1048"
  },
  {
    "text": "And with the introduction of user instance ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1052"
  },
  {
    "text": "and instance transforms features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1055"
  },
  {
    "text": "we are providing you the ability to access data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1057"
  },
  {
    "text": "from the acceleration structure instead of having to handle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1060"
  },
  {
    "text": "some external mapping in your code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1063"
  },
  {
    "text": "In addition, these three features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1066"
  },
  {
    "text": "offer portability from other ray tracing APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1068"
  },
  {
    "text": "making cross-platform development easier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1072"
  },
  {
    "text": "So far in the session, we have talked about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1075"
  },
  {
    "text": "our new support for ray tracing in render pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1078"
  },
  {
    "text": "and the different usability and portability features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1081"
  },
  {
    "text": "we have added this year.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1084"
  },
  {
    "text": "Now, let me show you what features we are introducing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1085"
  },
  {
    "text": "to enhance production rendering.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1088"
  },
  {
    "text": "Since Metal ray tracing API was introduced last year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1091"
  },
  {
    "text": "people have been using it to render ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1095"
  },
  {
    "text": "some amazing high-quality content.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1097"
  },
  {
    "text": "This year, we’ve added two new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1100"
  },
  {
    "text": "to make it possible to render even better content.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1103"
  },
  {
    "text": "Let's start with extended limits.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1106"
  },
  {
    "text": "Since we released the Metal ray tracing API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1109"
  },
  {
    "text": "some users have started hitting the internal limits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1112"
  },
  {
    "text": "of our acceleration structures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1115"
  },
  {
    "text": "especially in production-scale use cases.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1117"
  },
  {
    "text": "So we are adding support for an extended-limits mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1121"
  },
  {
    "text": "to support even larger scenes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1124"
  },
  {
    "text": "Last year, we chose these limits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1128"
  },
  {
    "text": "to balance acceleration structure size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1130"
  },
  {
    "text": "in order to favor performance with typical scene sizes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1133"
  },
  {
    "text": "There is a potential performance trade-off ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1137"
  },
  {
    "text": "to turning on this feature, so you’ll need to determine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1140"
  },
  {
    "text": "which mode is best for your application.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1143"
  },
  {
    "text": "Extended-limits mode increases the limit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1146"
  },
  {
    "text": "on the number of primitives, geometries, instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1149"
  },
  {
    "text": "as well as the size of the mask ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1153"
  },
  {
    "text": "used for filtering out instances.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1155"
  },
  {
    "text": "To turn it on, you first specify extended limits mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1158"
  },
  {
    "text": "when building your acceleration structures.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1163"
  },
  {
    "text": "Then specify the extended_limits tag ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1165"
  },
  {
    "text": "on the intersector object in the shading language.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1169"
  },
  {
    "text": "That’s all you need to do to turn on extended limits! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1172"
  },
  {
    "text": "Next, let’s talk about motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1176"
  },
  {
    "text": "In computer graphics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1179"
  },
  {
    "text": "we often assume that the camera exposure is instantaneous.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1180"
  },
  {
    "text": "However, in real life, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1185"
  },
  {
    "text": "the camera exposure lasts for a nonzero period of time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1187"
  },
  {
    "text": "If an object moves relative to the camera during that time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1192"
  },
  {
    "text": "it will appear blurred in the image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1195"
  },
  {
    "text": "In this extreme example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1198"
  },
  {
    "text": "the person in the center has been standing still ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1200"
  },
  {
    "text": "during the whole exposure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1203"
  },
  {
    "text": "while everyone else has been moving, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1205"
  },
  {
    "text": "causing them to be blurred.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1207"
  },
  {
    "text": "This effect can go a long way towards making ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1209"
  },
  {
    "text": "computer-generated images look more realistic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1212"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1216"
  },
  {
    "text": "the sphere is animated across several frames, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1218"
  },
  {
    "text": "but each frame is still an instantaneous exposure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1222"
  },
  {
    "text": "resulting in a choppy animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1225"
  },
  {
    "text": "Using the motion API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1228"
  },
  {
    "text": "we can simulate camera exposure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1230"
  },
  {
    "text": "lasting for a nonzero amount of time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1233"
  },
  {
    "text": "This results in a smoother ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1236"
  },
  {
    "text": "and more realistic-looking animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1237"
  },
  {
    "text": "If we freeze the video, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1241"
  },
  {
    "text": "you can see that the boundaries of the sphere are blurred ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1243"
  },
  {
    "text": "in the direction of motion just like a real camera.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1246"
  },
  {
    "text": "Real-time applications like games ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1250"
  },
  {
    "text": "often approximate this effect in screen space.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1252"
  },
  {
    "text": "But ray tracing allows us to simulate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1256"
  },
  {
    "text": "physically accurate motion blur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1258"
  },
  {
    "text": "which even extends to indirect effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1261"
  },
  {
    "text": "like shadows and reflections.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1263"
  },
  {
    "text": "Let’s take a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1266"
  },
  {
    "text": "at how the motion-blurred version was rendered.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1267"
  },
  {
    "text": "Motion blur is a straightforward extension to ray tracing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1271"
  },
  {
    "text": "Most ray-tracing applications already randomly sample ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1275"
  },
  {
    "text": "the physical dimensions such as incoming light directions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1278"
  },
  {
    "text": "for indirect lighting.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1282"
  },
  {
    "text": "To add motion blur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1284"
  },
  {
    "text": "we can just choose a random time for each ray as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1286"
  },
  {
    "text": "Metal will intersect the scene to match the point in time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1291"
  },
  {
    "text": "associated with each ray.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1295"
  },
  {
    "text": "For instance, this ray will see the scene like this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1297"
  },
  {
    "text": "Another ray will see the scene like this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1302"
  },
  {
    "text": "As we accumulate more and more samples, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1306"
  },
  {
    "text": "we’ll start to converge on a motion-blurred image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1309"
  },
  {
    "text": "You could actually already implement this today ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1312"
  },
  {
    "text": "using custom intersection functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1315"
  },
  {
    "text": "You could compute the bounding boxes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1318"
  },
  {
    "text": "of each primitive throughout the entire exposure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1320"
  },
  {
    "text": "and then use these bounding boxes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1324"
  },
  {
    "text": "to build an acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1325"
  },
  {
    "text": "However, this would be inefficient; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1328"
  },
  {
    "text": "the bounding boxes could be so large ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1331"
  },
  {
    "text": "that some rays would need to check for intersection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1334"
  },
  {
    "text": "with primitives that they will never actually intersect.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1337"
  },
  {
    "text": "Instead, we can use Metal’s built-in support for motion blur ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1341"
  },
  {
    "text": "which is designed to efficiently handle cases like this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1345"
  },
  {
    "text": "The first thing we need to do is associate a random time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1350"
  },
  {
    "text": "with each ray in our Metal shading language code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1354"
  },
  {
    "text": "We start by generating a random time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1358"
  },
  {
    "text": "within the exposure interval, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1361"
  },
  {
    "text": "then we just pass it to the intersector.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1363"
  },
  {
    "text": "The next thing we need to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1367"
  },
  {
    "text": "is to provide our animated geometry to Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1369"
  },
  {
    "text": "We do this using a common method of animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1374"
  },
  {
    "text": "called keyframe animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1377"
  },
  {
    "text": "The animation is created by modeling the ball ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1379"
  },
  {
    "text": "at key points in time called keyframes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1382"
  },
  {
    "text": "These keyframes are uniformly distributed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1386"
  },
  {
    "text": "between the start and end of our animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1389"
  },
  {
    "text": "As rays traverse the acceleration structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1394"
  },
  {
    "text": "they can fetch data from any keyframe ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1397"
  },
  {
    "text": "based on their time value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1400"
  },
  {
    "text": "For instance Ray A would see the scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1403"
  },
  {
    "text": "as it was modeled in Keyframe 11 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1406"
  },
  {
    "text": "because its time happens to match Keyframe 11.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1409"
  },
  {
    "text": "In contrast, Ray B’s time is in between Keyframes 3 and 4.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1413"
  },
  {
    "text": "Therefore, the geometry of the two keyframes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1418"
  },
  {
    "text": "is interpolated for Ray B.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1422"
  },
  {
    "text": "Motion is supported at both the instance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1426"
  },
  {
    "text": "and primitive level.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1428"
  },
  {
    "text": "Instance animation can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1430"
  },
  {
    "text": "to rigidly transform entire objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1432"
  },
  {
    "text": "This is cheaper than primitive animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1435"
  },
  {
    "text": "but doesn’t allow objects to deform.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1437"
  },
  {
    "text": "On the other hand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1440"
  },
  {
    "text": "primitive animation is more expensive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1441"
  },
  {
    "text": "but can be used for things like skinned-character animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1444"
  },
  {
    "text": "Note that both instance and primitive animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1449"
  },
  {
    "text": "are based on keyframe animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1452"
  },
  {
    "text": "Let’s first talk about instance motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1456"
  },
  {
    "text": "In an instance acceleration structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1460"
  },
  {
    "text": "each instance is associated with a transformation matrix.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1462"
  },
  {
    "text": "This matrix describes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1467"
  },
  {
    "text": "where to place the geometry in the scene.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1468"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1471"
  },
  {
    "text": "we have two primitive acceleration structures: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1473"
  },
  {
    "text": "one for the sphere and another for the static geometry.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1476"
  },
  {
    "text": "Each primitive acceleration structure has a single instance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1480"
  },
  {
    "text": "To animate the sphere, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1485"
  },
  {
    "text": "we will provide two transformation matrices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1487"
  },
  {
    "text": "representing the start and end point of the animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1490"
  },
  {
    "text": "Metal will then interpolate these two matrices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1495"
  },
  {
    "text": "based on the time parameter for each ray.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1498"
  },
  {
    "text": "Keep in mind that this is a specific example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1501"
  },
  {
    "text": "using two keyframes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1505"
  },
  {
    "text": "but Metal supports an arbitrary number of key frames.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1507"
  },
  {
    "text": "We provide these matrices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1512"
  },
  {
    "text": "using acceleration structure descriptors.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1514"
  },
  {
    "text": "The standard Metal instance descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1518"
  },
  {
    "text": "only has room for a single transformation matrix.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1520"
  },
  {
    "text": "So instead, we’ll use the new motion instance descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1523"
  },
  {
    "text": "With this descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1528"
  },
  {
    "text": "the transformation matrices are stored in a separate buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1530"
  },
  {
    "text": "The instance descriptor then contains a start index ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1535"
  },
  {
    "text": "and count representing a range of transformation matrices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1539"
  },
  {
    "text": "in the transform buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1543"
  },
  {
    "text": "Each matrix represents a single keyframe.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1545"
  },
  {
    "text": "Let's see how to set up an instance descriptor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1549"
  },
  {
    "text": "with the new motion instance descriptor type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1552"
  },
  {
    "text": "We start by creating the usual ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1556"
  },
  {
    "text": "instance acceleration structure descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1558"
  },
  {
    "text": "We then specify we’re using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1561"
  },
  {
    "text": "the new motion instance descriptor type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1563"
  },
  {
    "text": "Then, we specify the instanceDescriptorBuffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1567"
  },
  {
    "text": "that contains the motion instance descriptors.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1571"
  },
  {
    "text": "Finally, we’ll need to bind the transformsBuffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1575"
  },
  {
    "text": "containing the vertex buffer for each keyframe.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1578"
  },
  {
    "text": "The remaining properties are the same ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1583"
  },
  {
    "text": "as any other instance acceleration structure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1585"
  },
  {
    "text": "and we can build it like any other ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1588"
  },
  {
    "text": "acceleration structure as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1590"
  },
  {
    "text": "We only need to make one change in the shading language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1593"
  },
  {
    "text": "which is to specify the instance_motion tag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1597"
  },
  {
    "text": "This tells the intersector to expect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1601"
  },
  {
    "text": "an acceleration structure with instance motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1603"
  },
  {
    "text": "And that’s all we need to do to set up instance motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1608"
  },
  {
    "text": "Next, let’s talk about primitive motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1612"
  },
  {
    "text": "With primitive motion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1616"
  },
  {
    "text": "each primitive can move separately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1617"
  },
  {
    "text": "meaning it can be used for things ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1620"
  },
  {
    "text": "like skinned-character animation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1622"
  },
  {
    "text": "Remember that we need to provide a separate 3D model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1625"
  },
  {
    "text": "for each keyframe, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1628"
  },
  {
    "text": "and Metal will then interpolate between them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1630"
  },
  {
    "text": "We’ll need to provide vertex data for each keyframe.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1633"
  },
  {
    "text": "Let’s see how to set this up.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1637"
  },
  {
    "text": "We’ll start by collecting each keyframe’s vertex buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1640"
  },
  {
    "text": "into an array.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1644"
  },
  {
    "text": "The MTLMotionKeyframeData object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1646"
  },
  {
    "text": "allows you to specify a buffer and offset.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1649"
  },
  {
    "text": "We’ll use it to specify the vertex buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1652"
  },
  {
    "text": "for each keyframe.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1654"
  },
  {
    "text": "Next, we’ll create a motion triangle geometry descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1657"
  },
  {
    "text": "This is just like creating any other geometry descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1662"
  },
  {
    "text": "except we use a slightly different type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1665"
  },
  {
    "text": "And instead of providing a single vertex buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1668"
  },
  {
    "text": "we’ll provide our array of vertexBuffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1672"
  },
  {
    "text": "Finally, we’ll create the usual ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1676"
  },
  {
    "text": "primitive acceleration structure descriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1678"
  },
  {
    "text": "Next, we provide our geometryDescriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1682"
  },
  {
    "text": "Then we’ll specify the number of keyframes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1686"
  },
  {
    "text": "Similar to instance motion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1690"
  },
  {
    "text": "we’ll need to make a small change ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1693"
  },
  {
    "text": "in the shading language ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1694"
  },
  {
    "text": "to specify the primitive_motion tag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1696"
  },
  {
    "text": "And that’s all we need to do to set up primitive motion! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1699"
  },
  {
    "text": "Keep in mind that you can actually use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1702"
  },
  {
    "text": "both types of animation at the same time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1705"
  },
  {
    "text": "for even more dynamic scenes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1708"
  },
  {
    "text": "Next, let’s take a look at this all in action! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1710"
  },
  {
    "text": "This is a path-traced rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1714"
  },
  {
    "text": "created by our Advanced Content team.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1717"
  },
  {
    "text": "The video was rendered on a Mac Pro ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1719"
  },
  {
    "text": "with an AMD Radeon Pro Vega II GPU.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1721"
  },
  {
    "text": "The ninja character was animated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1725"
  },
  {
    "text": "using a skinned skeletal animation technique ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1727"
  },
  {
    "text": "which allows each primitive to move separately.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1730"
  },
  {
    "text": "Each frame was rendered by combining ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1734"
  },
  {
    "text": "256 randomly timed samples taken using the primitive motion API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1736"
  },
  {
    "text": "We can slow it down to see the difference more clearly.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1742"
  },
  {
    "text": "The version on the left doesn’t have motion blur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1746"
  },
  {
    "text": "while the version on the right does.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1749"
  },
  {
    "text": "And we can increase the exposure time even further ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1753"
  },
  {
    "text": "to simulate a long exposure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1756"
  },
  {
    "text": "Motion blur can make a big difference in realism ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1758"
  },
  {
    "text": "and it’s now easy to add with the new motion API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1761"
  },
  {
    "text": "So that’s it for motion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1765"
  },
  {
    "text": "Thanks for watching this talk.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1767"
  },
  {
    "text": "We have been putting a lot of work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1769"
  },
  {
    "text": "into our Metal ray tracing API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1771"
  },
  {
    "text": "to provide the tools you need to enhance your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1773"
  },
  {
    "text": "We can’t wait to see the amazing content ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1776"
  },
  {
    "text": "that you will create with it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1779"
  },
  {
    "text": "Thank you, and have a great WWDC! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1780"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10149/?time=1784"
  }
]