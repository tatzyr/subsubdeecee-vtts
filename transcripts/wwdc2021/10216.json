[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=7"
  },
  {
    "text": "Meghana Gupta: Hi, my name is Meghana.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=9"
  },
  {
    "text": "Today, I'll be talking to you about ARC in Swift.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=12"
  },
  {
    "text": "Swift provides powerful value types like structs and enums.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=16"
  },
  {
    "text": "You should prefer to use value types when possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=20"
  },
  {
    "text": "to avoid the dangers of unintended sharing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=23"
  },
  {
    "text": "that comes with reference types.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=26"
  },
  {
    "text": "Classes are reference types in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=28"
  },
  {
    "text": "and if you decide to use them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=31"
  },
  {
    "text": "Swift manages its memory via Automatic Reference Counting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=32"
  },
  {
    "text": "or ARC.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=36"
  },
  {
    "text": "In order to write effective Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=38"
  },
  {
    "text": "it is important to understand how ARC works.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=40"
  },
  {
    "text": "In this session, we’ll do just that.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=43"
  },
  {
    "text": "I’ll start with a review of object lifetimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=46"
  },
  {
    "text": "and ARC in Swift.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=49"
  },
  {
    "text": "Then, I’ll describe what observable object lifetimes are.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=51"
  },
  {
    "text": "I'll explain in detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=56"
  },
  {
    "text": "what language features make object lifetimes observable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=57"
  },
  {
    "text": "consequences of relying on observed object lifetimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=61"
  },
  {
    "text": "and some safe techniques to fix them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=65"
  },
  {
    "text": "Let’s begin.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=68"
  },
  {
    "text": "An object’s lifetime in Swift begins at initialization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=70"
  },
  {
    "text": "and ends at last use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=74"
  },
  {
    "text": "ARC automatically manages memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=76"
  },
  {
    "text": "by deallocating an object after its lifetime ends.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=78"
  },
  {
    "text": "It determines an object’s lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=82"
  },
  {
    "text": "by keeping track of its reference counts.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=85"
  },
  {
    "text": "ARC is mainly driven by the Swift compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=88"
  },
  {
    "text": "which inserts retain and release operations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=91"
  },
  {
    "text": "At runtime, retain increments the reference count ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=94"
  },
  {
    "text": "and release decrements it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=98"
  },
  {
    "text": "When the reference count drops to zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=100"
  },
  {
    "text": "the object will be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=103"
  },
  {
    "text": "Let’s see how it works with an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=105"
  },
  {
    "text": "Imagine we want to build a travel app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=109"
  },
  {
    "text": "To represent a traveler, let’s write a class with name ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=112"
  },
  {
    "text": "and an optional destination property.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=116"
  },
  {
    "text": "In the test() function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=120"
  },
  {
    "text": "first, a Traveler object is created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=122"
  },
  {
    "text": "then its reference is copied, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=125"
  },
  {
    "text": "and finally, its destination is updated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=127"
  },
  {
    "text": "In order to automatically manage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=131"
  },
  {
    "text": "the memory of the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=133"
  },
  {
    "text": "the Swift compiler inserts a retain operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=135"
  },
  {
    "text": "when a reference begins and a release operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=139"
  },
  {
    "text": "after the last use of the reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=142"
  },
  {
    "text": "traveler1 is the first reference to the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=145"
  },
  {
    "text": "and its last use is the copy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=149"
  },
  {
    "text": "Here, the Swift compiler inserts a release operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=152"
  },
  {
    "text": "immediately after the last use of the traveler1 reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=156"
  },
  {
    "text": "It does not insert a retain operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=160"
  },
  {
    "text": "when the reference begins, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=163"
  },
  {
    "text": "because initialization sets the reference count to one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=164"
  },
  {
    "text": "traveler2 is another reference to the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=169"
  },
  {
    "text": "and its last use is the destination update.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=173"
  },
  {
    "text": "Here, the Swift compiler inserts a retain operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=177"
  },
  {
    "text": "when the reference begins and a release operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=181"
  },
  {
    "text": "immediately after the last use of the reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=184"
  },
  {
    "text": "Let's step through the code and see what happens at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=188"
  },
  {
    "text": "First, the Traveler object is created on the heap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=194"
  },
  {
    "text": "and initialized with a reference count of one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=197"
  },
  {
    "text": "Then in preparation of the new reference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=202"
  },
  {
    "text": "retain operation executes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=205"
  },
  {
    "text": "incrementing the reference count to two.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=206"
  },
  {
    "text": "Now traveler2 is also a reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=211"
  },
  {
    "text": "to the Traveler object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=214"
  },
  {
    "text": "After the last use of the traveler1 reference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=216"
  },
  {
    "text": "the release operation executes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=220"
  },
  {
    "text": "decrementing the reference count to one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=222"
  },
  {
    "text": "Then the destination of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=226"
  },
  {
    "text": "is updated to Big Sur.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=229"
  },
  {
    "text": "Since that was the last use of the traveler2 reference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=232"
  },
  {
    "text": "release operation executes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=236"
  },
  {
    "text": "decrementing the reference count to zero.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=237"
  },
  {
    "text": "Once the reference count drops to zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=241"
  },
  {
    "text": "the object can be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=243"
  },
  {
    "text": "Object lifetimes in Swift are use-based.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=249"
  },
  {
    "text": "An object's guaranteed minimum lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=253"
  },
  {
    "text": "begins at initialization and ends at last use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=255"
  },
  {
    "text": "This is different from languages like C++, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=260"
  },
  {
    "text": "in which an object’s lifetime is guaranteed to end ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=263"
  },
  {
    "text": "at the closing brace.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=266"
  },
  {
    "text": "In this example, we saw the object was deallocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=269"
  },
  {
    "text": "immediately after the last use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=273"
  },
  {
    "text": "However, in practice, object lifetimes are determined ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=276"
  },
  {
    "text": "by the retain and release operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=280"
  },
  {
    "text": "inserted by the Swift compiler.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=282"
  },
  {
    "text": "And depending on the ARC optimizations that kick in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=285"
  },
  {
    "text": "the observed object lifetimes may differ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=289"
  },
  {
    "text": "from their guaranteed minimum, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=292"
  },
  {
    "text": "ending beyond the last use of the object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=294"
  },
  {
    "text": "In such cases, the object is deallocated at a program point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=297"
  },
  {
    "text": "beyond its last use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=302"
  },
  {
    "text": "In most cases, it doesn’t really matter ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=304"
  },
  {
    "text": "what the exact lifetime of an object is.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=307"
  },
  {
    "text": "However, with language features like weak and unowned references ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=310"
  },
  {
    "text": "and deinitializer side effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=315"
  },
  {
    "text": "it is possible to observe object lifetimes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=317"
  },
  {
    "text": "And if you have programs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=321"
  },
  {
    "text": "that rely on observed object lifetimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=323"
  },
  {
    "text": "instead of guaranteed object lifetimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=325"
  },
  {
    "text": "you can end up with problems in the future.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=328"
  },
  {
    "text": "Because relying on observed object lifetimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=331"
  },
  {
    "text": "may work today, but it is only a coincidence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=333"
  },
  {
    "text": "Observed object lifetimes are an emergent property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=337"
  },
  {
    "text": "of the Swift compiler and can change ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=341"
  },
  {
    "text": "as implementation details change.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=344"
  },
  {
    "text": "Such bugs may not be discovered during development ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=346"
  },
  {
    "text": "and may remain hidden for a long time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=350"
  },
  {
    "text": "only to be uncovered by a compiler update ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=353"
  },
  {
    "text": "with improved ARC optimizations or unrelated source changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=356"
  },
  {
    "text": "that enable a previously limited ARC optimization.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=360"
  },
  {
    "text": "I’ll go over the language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=364"
  },
  {
    "text": "that make object lifetimes observable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=366"
  },
  {
    "text": "walk through what can happen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=369"
  },
  {
    "text": "if we rely only on observed object lifetimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=371"
  },
  {
    "text": "and some safe techniques to fix them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=374"
  },
  {
    "text": "Unlike default references that are strong references, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=377"
  },
  {
    "text": "weak and unowned references do not participate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=380"
  },
  {
    "text": "in reference counting, and for this reason, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=383"
  },
  {
    "text": "they are commonly used to break reference cycles.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=386"
  },
  {
    "text": "Before I get into their details, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=390"
  },
  {
    "text": "let’s see what reference cycles are.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=392"
  },
  {
    "text": "This is an extension of our Travel app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=396"
  },
  {
    "text": "We now want to introduce an optional points system.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=399"
  },
  {
    "text": "A traveler can have an account and accumulate points in it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=402"
  },
  {
    "text": "To represent this, we have a new Account class ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=407"
  },
  {
    "text": "with points property.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=410"
  },
  {
    "text": "The Account class refers to the Traveler class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=411"
  },
  {
    "text": "and the Traveler class refers back to the Account class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=414"
  },
  {
    "text": "In the test() function, we create Traveler and Account objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=418"
  },
  {
    "text": "and then call the printSummary() function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=423"
  },
  {
    "text": "via the traveler reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=425"
  },
  {
    "text": "Let’s step through the code and see what happens with ARC.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=427"
  },
  {
    "text": "First, Traveler object is created on the heap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=432"
  },
  {
    "text": "with a reference count of one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=435"
  },
  {
    "text": "Then Account object is created on the heap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=438"
  },
  {
    "text": "with a reference count of one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=441"
  },
  {
    "text": "Since the Account object refers to the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=444"
  },
  {
    "text": "the reference count of the Traveler object is incremented to two.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=447"
  },
  {
    "text": "Now the Traveler object starts referring to the Account object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=452"
  },
  {
    "text": "so the reference count of the Account object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=456"
  },
  {
    "text": "is also incremented to two.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=459"
  },
  {
    "text": "This is the last use of the account reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=463"
  },
  {
    "text": "After this, the account reference goes away ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=466"
  },
  {
    "text": "and reference count of the Account object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=469"
  },
  {
    "text": "is decremented to one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=471"
  },
  {
    "text": "Then, printSummary() function is called ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=475"
  },
  {
    "text": "to print name and points.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=477"
  },
  {
    "text": "This is the last use of the Traveler reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=480"
  },
  {
    "text": "After this, the Traveler reference goes away ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=484"
  },
  {
    "text": "and the reference count of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=486"
  },
  {
    "text": "is decremented to one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=489"
  },
  {
    "text": "Even after all the references that make the objects reachable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=492"
  },
  {
    "text": "go away, the reference count of the objects remain one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=495"
  },
  {
    "text": "This is because of the reference cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=500"
  },
  {
    "text": "As a result, the objects are never deallocated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=502"
  },
  {
    "text": "causing a memory leak.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=506"
  },
  {
    "text": "You may break the reference cycle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=509"
  },
  {
    "text": "with a weak or unowned reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=511"
  },
  {
    "text": "Because they don’t participate in reference counting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=514"
  },
  {
    "text": "the referred object may be deallocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=517"
  },
  {
    "text": "while a weak or unowned reference is in use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=520"
  },
  {
    "text": "When this happens, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=523"
  },
  {
    "text": "the Swift runtime safely turns access to weak references ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=525"
  },
  {
    "text": "as nil, and access to unowned references as traps.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=529"
  },
  {
    "text": "Any reference participating in the reference cycle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=534"
  },
  {
    "text": "can be marked as weak or unowned to break the reference cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=537"
  },
  {
    "text": "It depends on the application.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=541"
  },
  {
    "text": "In our example, let’s mark the traveler reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=544"
  },
  {
    "text": "in the Account class as weak.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=547"
  },
  {
    "text": "Because weak reference does not participate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=550"
  },
  {
    "text": "in reference counting, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=552"
  },
  {
    "text": "after the last use of the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=554"
  },
  {
    "text": "its reference count drops to zero.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=556"
  },
  {
    "text": "Once the reference count of the Traveler object is zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=560"
  },
  {
    "text": "it can be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=563"
  },
  {
    "text": "When the Traveler object goes away, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=566"
  },
  {
    "text": "its reference to the Account object goes away, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=568"
  },
  {
    "text": "making its reference count zero.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=571"
  },
  {
    "text": "Now the Account object can be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=574"
  },
  {
    "text": "In this example, we used the weak reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=577"
  },
  {
    "text": "to only break the reference cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=580"
  },
  {
    "text": "If a weak reference is used to access an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=583"
  },
  {
    "text": "while its guaranteed object lifetime has ended, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=587"
  },
  {
    "text": "and you are relying on observed object lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=590"
  },
  {
    "text": "for the object to be available, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=593"
  },
  {
    "text": "you can end up with bugs in the future ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=595"
  },
  {
    "text": "when the observed object lifetime changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=598"
  },
  {
    "text": "for unrelated reasons.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=600"
  },
  {
    "text": "Let’s see an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=603"
  },
  {
    "text": "Here, the printSummary() function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=605"
  },
  {
    "text": "is moved from the Traveler class to the Account class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=607"
  },
  {
    "text": "And the test() function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=611"
  },
  {
    "text": "now calls the printSummary() function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=612"
  },
  {
    "text": "via the Account reference.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=614"
  },
  {
    "text": "What exactly happens ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=617"
  },
  {
    "text": "when printSummary() function is called? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=619"
  },
  {
    "text": "It may print the traveler’s name and points today, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=622"
  },
  {
    "text": "but this is only a coincidence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=625"
  },
  {
    "text": "This is because the last use of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=629"
  },
  {
    "text": "is before the call to the printSummary() function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=632"
  },
  {
    "text": "After this, the reference count of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=636"
  },
  {
    "text": "can drop to zero if the compiler inserted a release ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=639"
  },
  {
    "text": "immediately after the last use.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=643"
  },
  {
    "text": "If the reference count has dropped to zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=648"
  },
  {
    "text": "access to the Traveler object via the weak reference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=650"
  },
  {
    "text": "will be nil, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=653"
  },
  {
    "text": "and the Traveler object may be deallocated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=655"
  },
  {
    "text": "So when the printSummary() function is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=659"
  },
  {
    "text": "the force unwrap of the weak Traveler reference will trap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=662"
  },
  {
    "text": "causing a crash.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=665"
  },
  {
    "text": "You may be wondering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=667"
  },
  {
    "text": "if the force unwrap is the reason for the crash here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=669"
  },
  {
    "text": "and optional binding may have prevented it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=672"
  },
  {
    "text": "Optional binding actually worsens the problem.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=676"
  },
  {
    "text": "Without an obvious crash, it creates a silent bug ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=679"
  },
  {
    "text": "that may go unnoticed when the observed object lifetime changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=683"
  },
  {
    "text": "for unrelated reasons.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=686"
  },
  {
    "text": "There are different techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=689"
  },
  {
    "text": "to safely handle weak and unowned references, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=690"
  },
  {
    "text": "each of them with varying degrees ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=694"
  },
  {
    "text": "of upfront implementation cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=696"
  },
  {
    "text": "versus continuous maintenance cost.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=698"
  },
  {
    "text": "Let’s explore them one by one with our example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=701"
  },
  {
    "text": "Swift provides withExtendedLifetime() utility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=704"
  },
  {
    "text": "that can explicitly extend the lifetime of an object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=708"
  },
  {
    "text": "Using withExtendedLifetime(), it is possible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=712"
  },
  {
    "text": "to safely extend the lifetime of the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=715"
  },
  {
    "text": "while the printSummary() function is being called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=718"
  },
  {
    "text": "preventing potential bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=721"
  },
  {
    "text": "The same effect can be achieved by placing an empty call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=724"
  },
  {
    "text": "to withExtendedLifetime() at the end of the existing scope.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=729"
  },
  {
    "text": "For more complex cases, we can ask the compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=734"
  },
  {
    "text": "to extend the lifetime of an object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=737"
  },
  {
    "text": "to the end of the current scope using defer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=740"
  },
  {
    "text": "withExtendedLifetime() may look like an easy way out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=744"
  },
  {
    "text": "of object lifetimes bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=748"
  },
  {
    "text": "However, this technique is fragile, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=750"
  },
  {
    "text": "and transfers the responsibility of correctness on you.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=753"
  },
  {
    "text": "With this approach, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=758"
  },
  {
    "text": "you should ensure withExtendedLifetime() is used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=759"
  },
  {
    "text": "every time a weak reference has a potential to cause bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=762"
  },
  {
    "text": "If not controlled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=767"
  },
  {
    "text": "withExtendedLifetime() can creep up all over the codebase, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=768"
  },
  {
    "text": "increasing maintenance cost.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=772"
  },
  {
    "text": "Redesigning classes with better APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=775"
  },
  {
    "text": "is a much more principled approach.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=777"
  },
  {
    "text": "Object lifetime surprises can be prevented, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=781"
  },
  {
    "text": "if access to the object can be limited ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=784"
  },
  {
    "text": "to strong references only.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=787"
  },
  {
    "text": "Here, the printSummary() function is moved back ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=790"
  },
  {
    "text": "to the Traveler class, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=793"
  },
  {
    "text": "and the weak reference in Account class is hidden.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=795"
  },
  {
    "text": "Tests are now forced to call the printSummary() function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=799"
  },
  {
    "text": "via a strong reference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=803"
  },
  {
    "text": "eliminating potential bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=805"
  },
  {
    "text": "In addition to carrying a performance cost, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=808"
  },
  {
    "text": "weak and unowned references can expose bugs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=811"
  },
  {
    "text": "if you are not careful with class design.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=814"
  },
  {
    "text": "It is important to pause and think, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=817"
  },
  {
    "text": "why are weak and unowned references needed? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=820"
  },
  {
    "text": "Are they used only to break reference cycles? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=824"
  },
  {
    "text": "What if you avoid creating reference cycles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=827"
  },
  {
    "text": "in the first place? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=830"
  },
  {
    "text": "Reference cycles can often be avoided by rethinking algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=832"
  },
  {
    "text": "and transforming cyclic class relationships ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=837"
  },
  {
    "text": "to tree structures.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=840"
  },
  {
    "text": "In our example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=842"
  },
  {
    "text": "Traveler class needs to refer to the Account class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=843"
  },
  {
    "text": "It is not really necessary for the Account class ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=847"
  },
  {
    "text": "to refer to the Traveler class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=850"
  },
  {
    "text": "Account class only needs access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=852"
  },
  {
    "text": "to the traveler’s personal information.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=855"
  },
  {
    "text": "We can move the traveler’s personal information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=858"
  },
  {
    "text": "into a new class called PersonalInfo.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=861"
  },
  {
    "text": "Both Traveler class and Account class can refer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=865"
  },
  {
    "text": "to the PersonalInfo class, avoiding the cycle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=868"
  },
  {
    "text": "Avoiding the need for weak and unowned references ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=873"
  },
  {
    "text": "may have additional implementation cost, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=876"
  },
  {
    "text": "but this is a definite way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=879"
  },
  {
    "text": "to eliminate all potential object lifetime bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=881"
  },
  {
    "text": "Another language feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=886"
  },
  {
    "text": "that makes object lifetimes observable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=887"
  },
  {
    "text": "are deinitializer side effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=890"
  },
  {
    "text": "A deinitializer runs before deallocation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=893"
  },
  {
    "text": "and its side effects can be observed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=896"
  },
  {
    "text": "by external program effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=898"
  },
  {
    "text": "If you write code to sequence deinitializer side effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=901"
  },
  {
    "text": "with external program effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=905"
  },
  {
    "text": "it can lead to hidden bugs, which are uncovered ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=907"
  },
  {
    "text": "only when the observed object lifetime changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=911"
  },
  {
    "text": "due to unrelated reasons.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=913"
  },
  {
    "text": "Before I get into how such bugs can come up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=916"
  },
  {
    "text": "let’s see what a deinitializer is.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=919"
  },
  {
    "text": "This is a repeat of the first example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=922"
  },
  {
    "text": "now with a deinitializer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=925"
  },
  {
    "text": "The deinitializer has a global side effect: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=928"
  },
  {
    "text": "printing a message on the console.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=930"
  },
  {
    "text": "Today the deinitializer may run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=934"
  },
  {
    "text": "after \"Done traveling\" is printed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=936"
  },
  {
    "text": "But since the last use of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=940"
  },
  {
    "text": "is the destination update, the deinitializer can run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=943"
  },
  {
    "text": "before \"Done traveling\" is printed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=947"
  },
  {
    "text": "depending on the ARC optimizations that kick in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=950"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=954"
  },
  {
    "text": "deinitializer side effects were observable but not relied upon.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=955"
  },
  {
    "text": "Let’s look at a more complex example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=960"
  },
  {
    "text": "where deinitializer side effects are relied upon ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=962"
  },
  {
    "text": "by external program effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=966"
  },
  {
    "text": "We now introduce travel metrics to the Traveler class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=969"
  },
  {
    "text": "Whenever a destination is updated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=973"
  },
  {
    "text": "it is recorded in the TravelMetrics class.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=975"
  },
  {
    "text": "Eventually when deinitializing the Traveler object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=979"
  },
  {
    "text": "metrics get published to a global record.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=983"
  },
  {
    "text": "Metrics published are the traveler’s anonymous ID, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=986"
  },
  {
    "text": "number of destinations looked up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=990"
  },
  {
    "text": "and a computed travel interest category.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=992"
  },
  {
    "text": "In the test() function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=995"
  },
  {
    "text": "first, a Traveler object is created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=997"
  },
  {
    "text": "then reference to the travelMetrics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1001"
  },
  {
    "text": "is copied from the Traveler object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1004"
  },
  {
    "text": "The traveler’s destination is updated to Big Sur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1007"
  },
  {
    "text": "which records Big Sur in TravelMetrics.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1011"
  },
  {
    "text": "The traveler’s destination is updated to Catalina, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1015"
  },
  {
    "text": "which records Catalina in TravelMetrics.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1018"
  },
  {
    "text": "Then the travel interest category is computed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1022"
  },
  {
    "text": "by looking at the recorded destinations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1026"
  },
  {
    "text": "Today the deinitializer may run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1030"
  },
  {
    "text": "after computing travel interest, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1032"
  },
  {
    "text": "publishing the interested category as Nature.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1034"
  },
  {
    "text": "But the last use of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1039"
  },
  {
    "text": "is the destination update to Catalina, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1042"
  },
  {
    "text": "immediately after which the deinitializer can run.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1045"
  },
  {
    "text": "Since the deinitializer runs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1049"
  },
  {
    "text": "before computing the travel interest, nil gets published, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1051"
  },
  {
    "text": "causing a bug.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1055"
  },
  {
    "text": "Just like weak and unowned references, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1057"
  },
  {
    "text": "there are different techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1060"
  },
  {
    "text": "to safely handle deinitializer side effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1062"
  },
  {
    "text": "Each of them with varying degrees ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1065"
  },
  {
    "text": "of upfront implementation cost ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1068"
  },
  {
    "text": "versus continuous maintenance cost.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1070"
  },
  {
    "text": "Let’s look at them one by one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1073"
  },
  {
    "text": "withExtendedLifetime() can be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1075"
  },
  {
    "text": "to explicitly extend the lifetime of the Traveler object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1077"
  },
  {
    "text": "until the travel interest category is computed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1081"
  },
  {
    "text": "preventing potential bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1085"
  },
  {
    "text": "As discussed before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1088"
  },
  {
    "text": "this transfers responsibility of correctness on you.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1089"
  },
  {
    "text": "With this approach, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1094"
  },
  {
    "text": "you should ensure withExtendedLifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1095"
  },
  {
    "text": "is used every time there is a potential ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1098"
  },
  {
    "text": "of incorrect interaction between deinitializer side effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1100"
  },
  {
    "text": "and external program effects, increasing maintenance cost.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1104"
  },
  {
    "text": "Deinitializer side effects cannot be observed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1109"
  },
  {
    "text": "if the effects are all local.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1112"
  },
  {
    "text": "Redesigning class API by limiting the visibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1115"
  },
  {
    "text": "of internal class details can prevent object lifetime bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1118"
  },
  {
    "text": "Here, TravelMetrics is marked private, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1124"
  },
  {
    "text": "hiding it from external access.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1127"
  },
  {
    "text": "The deinitializer now computes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1130"
  },
  {
    "text": "the most interested travel category ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1132"
  },
  {
    "text": "and publishes the metrics.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1135"
  },
  {
    "text": "This works, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1138"
  },
  {
    "text": "but a more principled approach is to get rid ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1139"
  },
  {
    "text": "of the deinitializer side effects altogether.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1142"
  },
  {
    "text": "Here, defer is used instead of the deinitializer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1147"
  },
  {
    "text": "to publish metrics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1151"
  },
  {
    "text": "and the deinitializer only performs verification.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1152"
  },
  {
    "text": "By removing deinitializer side effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1157"
  },
  {
    "text": "we can eliminate all potential object lifetime bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1160"
  },
  {
    "text": "We explored our educational Travel app example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1165"
  },
  {
    "text": "to learn about ARC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1168"
  },
  {
    "text": "weak and unowned references, and deinitializer side effects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1170"
  },
  {
    "text": "It is important to thoroughly understand the language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1174"
  },
  {
    "text": "that make object lifetimes observable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1178"
  },
  {
    "text": "and eliminate potentially incorrect reliance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1181"
  },
  {
    "text": "on observed object lifetimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1184"
  },
  {
    "text": "so that we don’t uncover bugs at surprising times.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1186"
  },
  {
    "text": "With Xcode 13, a new experimental build setting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1190"
  },
  {
    "text": "called \"Optimize Object Lifetimes\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1194"
  },
  {
    "text": "is available for the Swift compiler.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1196"
  },
  {
    "text": "This enables powerful lifetime shortening ARC optimizations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1199"
  },
  {
    "text": "With this build setting turned on, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1204"
  },
  {
    "text": "you may see objects being deallocated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1206"
  },
  {
    "text": "immediately after last use much more consistently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1209"
  },
  {
    "text": "bringing observed object lifetimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1213"
  },
  {
    "text": "closer to their guaranteed minimum.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1216"
  },
  {
    "text": "This may expose hidden object lifetime bugs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1219"
  },
  {
    "text": "similar to the examples discussed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1222"
  },
  {
    "text": "You can follow the safe techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1224"
  },
  {
    "text": "discussed in this session to eliminate all such bugs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1226"
  },
  {
    "text": "I hope you enjoyed this session.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1231"
  },
  {
    "text": "Thanks for watching.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1233"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10216/?time=1235"
  }
]