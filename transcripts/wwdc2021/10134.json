[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1"
  },
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=4"
  },
  {
    "text": "Hi, I’m Kavon, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=9"
  },
  {
    "text": "and I’ll be joined by my colleague, Joe, later on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=10"
  },
  {
    "text": "Swift 5.5 introduces a new way to write concurrent programs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=13"
  },
  {
    "text": "using a concept called structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=17"
  },
  {
    "text": "The ideas behind structured concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=19"
  },
  {
    "text": "are based on structured programming, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=22"
  },
  {
    "text": "which so intuitive that you rarely think about it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=24"
  },
  {
    "text": "but thinking about it will help you understand structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=27"
  },
  {
    "text": "So let’s dive in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=30"
  },
  {
    "text": "In the early days of computing, programs were hard to read ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=34"
  },
  {
    "text": "because they were written as a sequence of instructions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=37"
  },
  {
    "text": "where control-flow was allowed to jump all over the place. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=40"
  },
  {
    "text": "You don’t see that today, because languages use structured programming ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=43"
  },
  {
    "text": "to make control-flow more uniform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=47"
  },
  {
    "text": "For example, the if-then statement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=49"
  },
  {
    "text": "uses structured control-flow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=52"
  },
  {
    "text": "It specifies that a nested block of code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=54"
  },
  {
    "text": "is only conditionally executed while moving from top to bottom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=56"
  },
  {
    "text": "In Swift, that block also respects static scoping, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=60"
  },
  {
    "text": "meaning that names are only visible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=64"
  },
  {
    "text": "if they are defined in an enclosing block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=66"
  },
  {
    "text": "This also means that the lifetime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=68"
  },
  {
    "text": "of any variables defined in a block ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=71"
  },
  {
    "text": "will end when leaving the block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=73"
  },
  {
    "text": "So, structured programming with static scope ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=75"
  },
  {
    "text": "makes control-flow and variable lifetime easy to understand.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=78"
  },
  {
    "text": "More generally, structured control-flow can be sequenced ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=83"
  },
  {
    "text": "and nested together naturally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=87"
  },
  {
    "text": "This lets you read your entire program top to bottom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=89"
  },
  {
    "text": "So, those are the fundamentals of structured programming. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=93"
  },
  {
    "text": "As you can imagine, it is easy to take for granted, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=97"
  },
  {
    "text": "because it is so intuitive for us today. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=99"
  },
  {
    "text": "But today’s programs feature asynchronous and concurrent code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=102"
  },
  {
    "text": "and they have not been able to use structured programming ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=106"
  },
  {
    "text": "to make that code easier to write. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=108"
  },
  {
    "text": "First, let’s consider how structured programming ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=111"
  },
  {
    "text": "makes asynchronous code simpler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=114"
  },
  {
    "text": "Say that you need to fetch a bunch of images from the internet ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=116"
  },
  {
    "text": "and resize them to be thumbnails sequentially. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=119"
  },
  {
    "text": "This code does that work asynchronously, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=123"
  },
  {
    "text": "taking in a collection of strings that identify the images. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=125"
  },
  {
    "text": "You’ll notice this function does not return a value when called. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=129"
  },
  {
    "text": "That’s because the function passes its result, or an error, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=133"
  },
  {
    "text": "to a completion handler it was given. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=136"
  },
  {
    "text": "This pattern allows the caller ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=138"
  },
  {
    "text": "to receive an answer at a later time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=140"
  },
  {
    "text": "As a consequence of that pattern, this function cannot use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=143"
  },
  {
    "text": "structured control-flow for error handling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=146"
  },
  {
    "text": "That’s because it only makes sense to handle errors thrown ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=149"
  },
  {
    "text": "out of a function, not into one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=152"
  },
  {
    "text": "Also, this pattern prevents you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=155"
  },
  {
    "text": "from using a loop to process each thumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=157"
  },
  {
    "text": "Recursion is required, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=159"
  },
  {
    "text": "because the code that runs after the function completes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=161"
  },
  {
    "text": "must be nested within the handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=164"
  },
  {
    "text": "Now, let’s take a look at the previous code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=166"
  },
  {
    "text": "but rewritten to use the new async/await syntax, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=169"
  },
  {
    "text": "which is based on structured programming. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=173"
  },
  {
    "text": "I’ve dropped the completion handler argument from the function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=175"
  },
  {
    "text": "Instead, it is annotated with “async” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=179"
  },
  {
    "text": "and “throws” in its type signature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=181"
  },
  {
    "text": "It also returns a value instead of nothing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=184"
  },
  {
    "text": "In the body of the function, I use “await” to say ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=187"
  },
  {
    "text": "that an asynchronous action happens, and no nesting is required ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=190"
  },
  {
    "text": "for the code that runs after that action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=194"
  },
  {
    "text": "This means that I can now loop over the thumbnails ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=197"
  },
  {
    "text": "to process them sequentially. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=199"
  },
  {
    "text": "I can also throw and catch errors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=201"
  },
  {
    "text": "and the compiler will check that I didn’t forget. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=204"
  },
  {
    "text": "For an in-depth look at async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=207"
  },
  {
    "text": "check out the session “Meet async/await in Swift.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=209"
  },
  {
    "text": "So, this code is great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=214"
  },
  {
    "text": "but what if you’re producing thumbnails for thousands of images? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=217"
  },
  {
    "text": "Processing each thumbnail one at a time is no longer ideal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=220"
  },
  {
    "text": "Plus, what if each thumbnail’s dimensions must be downloaded ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=224"
  },
  {
    "text": "from another URL, instead of being a fixed size? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=227"
  },
  {
    "text": "Now there is an opportunity to add some concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=230"
  },
  {
    "text": "so multiple downloads can happen in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=233"
  },
  {
    "text": "You can create additional tasks to add concurrency to a program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=236"
  },
  {
    "text": "Tasks are a new feature in Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=240"
  },
  {
    "text": "that work hand-in-hand with async functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=243"
  },
  {
    "text": "A task provides a fresh execution context ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=245"
  },
  {
    "text": "to run asynchronous code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=248"
  },
  {
    "text": "Each task runs concurrently ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=250"
  },
  {
    "text": "with respect to other execution contexts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=251"
  },
  {
    "text": "They will be automatically scheduled to run in parallel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=254"
  },
  {
    "text": "when it is safe and efficient to do so. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=257"
  },
  {
    "text": "Because tasks are deeply integrated into Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=260"
  },
  {
    "text": "the compiler can help prevent some concurrency bugs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=263"
  },
  {
    "text": "Also, keep in mind that calling an async function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=266"
  },
  {
    "text": "does not create a new task for the call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=269"
  },
  {
    "text": "You create tasks explicitly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=271"
  },
  {
    "text": "There are a few different flavors of tasks in Swift, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=274"
  },
  {
    "text": "because structured concurrency is about the balance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=277"
  },
  {
    "text": "between flexibility and simplicity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=280"
  },
  {
    "text": "So, for the remainder of this session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=283"
  },
  {
    "text": "Joe and I will introduce and discuss each kind of task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=285"
  },
  {
    "text": "to help you understand their trade-offs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=289"
  },
  {
    "text": "Let’s start with the simplest of these tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=291"
  },
  {
    "text": "which is created with a new syntactic form ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=293"
  },
  {
    "text": "called an async-let binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=296"
  },
  {
    "text": "To help you understand this new syntactic form, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=298"
  },
  {
    "text": "I want to first break down the evaluation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=301"
  },
  {
    "text": "of an ordinary let binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=303"
  },
  {
    "text": "There are two parts: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=306"
  },
  {
    "text": "the initializer expression on the right side of the equals ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=307"
  },
  {
    "text": "and the variable’s name on the left. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=310"
  },
  {
    "text": "There may be other statements before or after the let, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=312"
  },
  {
    "text": "so I’ll include those here too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=315"
  },
  {
    "text": "Once Swift reaches a let binding, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=318"
  },
  {
    "text": "its initializer will be evaluated to produce a value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=320"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=324"
  },
  {
    "text": "that means downloading data from a URL, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=326"
  },
  {
    "text": "which could take a while. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=328"
  },
  {
    "text": "After the data has been downloaded, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=330"
  },
  {
    "text": "Swift will bind that value to the variable name ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=333"
  },
  {
    "text": "before proceeding to the statements that follow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=336"
  },
  {
    "text": "Notice that there is only one flow of execution here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=339"
  },
  {
    "text": "as traced by the arrows through each step. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=342"
  },
  {
    "text": "Since the download could take a while, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=345"
  },
  {
    "text": "you want the program to start downloading the data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=348"
  },
  {
    "text": "and keep doing other work until the data is actually needed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=350"
  },
  {
    "text": "To achieve this, you can just add the word async ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=354"
  },
  {
    "text": "in front of an existing let binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=357"
  },
  {
    "text": "This turns it into a concurrent binding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=359"
  },
  {
    "text": "called an async-let. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=362"
  },
  {
    "text": "The evaluation of a concurrent binding is quite different from a sequential one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=364"
  },
  {
    "text": "so let’s learn how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=368"
  },
  {
    "text": "I will start just at the point before encountering the binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=370"
  },
  {
    "text": "To evaluate a concurrent binding, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=374"
  },
  {
    "text": "Swift will first create a new child task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=376"
  },
  {
    "text": "which is a subtask of the one that created it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=378"
  },
  {
    "text": "Because every task represents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=381"
  },
  {
    "text": "an execution context for your program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=383"
  },
  {
    "text": "two arrows will simultaneously come out of this step. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=385"
  },
  {
    "text": "This first arrow is for the child task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=389"
  },
  {
    "text": "which will immediately begin downloading the data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=391"
  },
  {
    "text": "The second arrow is for the parent task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=394"
  },
  {
    "text": "which will immediately bind the variable result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=397"
  },
  {
    "text": "to a placeholder value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=399"
  },
  {
    "text": "This parent task is the same one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=401"
  },
  {
    "text": "that was executing the preceding statements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=403"
  },
  {
    "text": "While the data is being downloaded concurrently by the child, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=406"
  },
  {
    "text": "the parent task continues to execute the statements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=409"
  },
  {
    "text": "that follow the concurrent binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=411"
  },
  {
    "text": "But upon reaching an expression ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=414"
  },
  {
    "text": "that needs the actual value of the result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=416"
  },
  {
    "text": "the parent will await the completion of the child task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=419"
  },
  {
    "text": "which will fulfill the placeholder for result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=422"
  },
  {
    "text": "In this example, our call to URLSession ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=426"
  },
  {
    "text": "could also throw an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=428"
  },
  {
    "text": "This means that awaiting the result might give us an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=430"
  },
  {
    "text": "So I need to write “try” to take care of it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=433"
  },
  {
    "text": "And don’t worry. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=437"
  },
  {
    "text": "Reading the value of result again will not recompute its value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=438"
  },
  {
    "text": "Now that you’ve seen how async-let works, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=442"
  },
  {
    "text": "you can use it to add concurrency to the thumbnail fetching code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=444"
  },
  {
    "text": "I have factored a piece of the previous code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=448"
  },
  {
    "text": "that fetches a single image into its own function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=450"
  },
  {
    "text": "This new function here is also downloading data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=453"
  },
  {
    "text": "from two different URLs: one for the full-sized image itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=456"
  },
  {
    "text": "and the other for metadata, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=460"
  },
  {
    "text": "which contains the optimal thumbnail size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=462"
  },
  {
    "text": "Notice that with a sequential binding, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=464"
  },
  {
    "text": "you write “try await” on the right side of the let, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=467"
  },
  {
    "text": "because that’s where an error or suspension would be observed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=469"
  },
  {
    "text": "To make both downloads happen concurrently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=473"
  },
  {
    "text": "you write “async” in front of both of these lets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=476"
  },
  {
    "text": "Since the downloads are now happening in child tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=479"
  },
  {
    "text": "you no longer write “try await” on the right side ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=482"
  },
  {
    "text": "of the concurrent binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=485"
  },
  {
    "text": "Those effects are only observed by the parent task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=486"
  },
  {
    "text": "when using the variables that are concurrently bound. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=490"
  },
  {
    "text": "So you write “try await” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=493"
  },
  {
    "text": "before the expression’s reading the metadata and the image data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=495"
  },
  {
    "text": "Also, notice that using these concurrently bound variables ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=499"
  },
  {
    "text": "does not require a method call or any other changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=503"
  },
  {
    "text": "Those variables have the same type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=506"
  },
  {
    "text": "that they did in a sequential binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=508"
  },
  {
    "text": "Now, these child tasks I’ve been talking about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=511"
  },
  {
    "text": "are actually part of a hierarchy called a task tree. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=514"
  },
  {
    "text": "This tree is not just an implementation detail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=517"
  },
  {
    "text": "It’s an important part of structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=520"
  },
  {
    "text": "It influences the attributes of your tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=523"
  },
  {
    "text": "like cancellation, priority, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=526"
  },
  {
    "text": "and task-local variables. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=528"
  },
  {
    "text": "Whenever you make a call from one async function to another, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=530"
  },
  {
    "text": "the same task is used to execute the call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=533"
  },
  {
    "text": "So, the function fetchOneThumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=536"
  },
  {
    "text": "inherits all attributes of that task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=539"
  },
  {
    "text": "When creating a new structured task like with async-let, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=541"
  },
  {
    "text": "it becomes the child of the task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=545"
  },
  {
    "text": "that the current function is running on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=547"
  },
  {
    "text": "Tasks are not the child of a specific function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=549"
  },
  {
    "text": "but their lifetime may be scoped to it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=552"
  },
  {
    "text": "The tree is made up of links ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=555"
  },
  {
    "text": "between each parent and its child tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=556"
  },
  {
    "text": "A link enforces a rule ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=559"
  },
  {
    "text": "that says a parent task can only finish its work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=561"
  },
  {
    "text": "if all of its child tasks have finished. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=564"
  },
  {
    "text": "This rule holds even in the face of abnormal control-flow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=566"
  },
  {
    "text": "which would prevent a child task from being awaited. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=570"
  },
  {
    "text": "For example, in this code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=573"
  },
  {
    "text": "I first await the metadata task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=576"
  },
  {
    "text": "before the image data task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=578"
  },
  {
    "text": "If the first awaited task finishes by throwing an error, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=580"
  },
  {
    "text": "the fetchOneThumbnail function must immediately exit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=584"
  },
  {
    "text": "by throwing that error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=587"
  },
  {
    "text": "But what will happen to the task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=589"
  },
  {
    "text": "performing the second download? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=591"
  },
  {
    "text": "During the abnormal exit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=593"
  },
  {
    "text": "Swift will automatically mark the unawaited task as canceled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=595"
  },
  {
    "text": "and then await for it to finish ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=599"
  },
  {
    "text": "before exiting the function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=601"
  },
  {
    "text": "Marking a task as canceled does not stop the task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=603"
  },
  {
    "text": "It simply informs the task that its results are no longer needed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=607"
  },
  {
    "text": "In fact, when a task is canceled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=611"
  },
  {
    "text": "all subtasks that are decedents of that task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=613"
  },
  {
    "text": "will be automatically canceled too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=615"
  },
  {
    "text": "So if the implementation of URLSession ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=618"
  },
  {
    "text": "created its own structured tasks to download the image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=620"
  },
  {
    "text": "those tasks will be marked for cancellation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=624"
  },
  {
    "text": "The function fetchOneThumbnail finally exits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=627"
  },
  {
    "text": "by throwing the error once all of the structured tasks it created ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=630"
  },
  {
    "text": "directly or indirectly have finished. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=633"
  },
  {
    "text": "This guarantee is fundamental to structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=637"
  },
  {
    "text": "It prevents you from accidentally leaking tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=640"
  },
  {
    "text": "by helping you manage their lifetimes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=643"
  },
  {
    "text": "much like how ARC automatically manages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=646"
  },
  {
    "text": "the lifetime of memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=648"
  },
  {
    "text": "So far, I have given you an overview ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=650"
  },
  {
    "text": "of how cancellation propagates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=652"
  },
  {
    "text": "But when does the task finally stop? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=654"
  },
  {
    "text": "If the task is in the middle of an important transaction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=657"
  },
  {
    "text": "or has open network connections, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=660"
  },
  {
    "text": "it would be incorrect to just halt the task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=662"
  },
  {
    "text": "That’s why task cancellation in Swift is cooperative. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=664"
  },
  {
    "text": "Your code must check for cancellation explicitly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=668"
  },
  {
    "text": "and wind down execution in whatever way is appropriate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=671"
  },
  {
    "text": "You can check the cancellation status of the current task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=675"
  },
  {
    "text": "from any function, whether it is async or not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=678"
  },
  {
    "text": "This means that you should implement your APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=681"
  },
  {
    "text": "with cancellation in mind, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=684"
  },
  {
    "text": "especially if they involve long-running computations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=685"
  },
  {
    "text": "Your users may call into your code from a task that can be canceled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=689"
  },
  {
    "text": "and they will expect the computation to stop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=693"
  },
  {
    "text": "as soon as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=695"
  },
  {
    "text": "To see how simple it is to use cooperative cancellation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=698"
  },
  {
    "text": "let’s go back to the thumbnail fetching example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=702"
  },
  {
    "text": "Here, I have rewritten the original function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=705"
  },
  {
    "text": "that was given all of the thumbnails to fetch ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=708"
  },
  {
    "text": "so that it uses the fetchOneThumbnail function instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=710"
  },
  {
    "text": "If this function was called within a task that was canceled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=713"
  },
  {
    "text": "we don’t want to hold up our application ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=717"
  },
  {
    "text": "by creating useless thumbnails. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=719"
  },
  {
    "text": "So I can just add a call to checkCancellation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=722"
  },
  {
    "text": "at the start of each loop iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=725"
  },
  {
    "text": "This call only throws an error ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=727"
  },
  {
    "text": "if the current task has been canceled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=729"
  },
  {
    "text": "You can also obtain the cancellation status of the current task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=732"
  },
  {
    "text": "as a Boolean value if that is more appropriate for your code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=735"
  },
  {
    "text": "Notice that in this version of the function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=739"
  },
  {
    "text": "I’m returning a partial result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=742"
  },
  {
    "text": "a dictionary with only some of the thumbnails requested. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=744"
  },
  {
    "text": "When doing this, you must ensure that your API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=747"
  },
  {
    "text": "clearly states that a partial result may be returned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=750"
  },
  {
    "text": "Otherwise, task cancellation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=754"
  },
  {
    "text": "could trigger a fatal error for your users ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=756"
  },
  {
    "text": "because their code requires a complete result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=758"
  },
  {
    "text": "even during cancellation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=761"
  },
  {
    "text": "So far, you’ve seen that async-let provides ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=763"
  },
  {
    "text": "a lightweight syntax for adding concurrency to your program ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=765"
  },
  {
    "text": "while capturing the essence of structured programming. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=769"
  },
  {
    "text": "The next kind of task I want to tell you about is called a group task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=772"
  },
  {
    "text": "They offer more flexibility than async-let ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=776"
  },
  {
    "text": "without giving up all of the nice properties of structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=779"
  },
  {
    "text": "As we saw earlier, async-let works well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=783"
  },
  {
    "text": "when there’s a fixed amount of concurrency available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=785"
  },
  {
    "text": "Let’s consider both functions that I discussed earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=788"
  },
  {
    "text": "For each thumbnail ID in the loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=791"
  },
  {
    "text": "we call fetchOneThumbnail to process it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=794"
  },
  {
    "text": "which creates exactly two child tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=796"
  },
  {
    "text": "Even if we in-lined the body of that function into this loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=799"
  },
  {
    "text": "the amount of concurrency will not change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=802"
  },
  {
    "text": "Async-let is scoped like a variable binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=806"
  },
  {
    "text": "That means the two child tasks must complete ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=808"
  },
  {
    "text": "before the next loop iteration begins. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=811"
  },
  {
    "text": "But what if we want this loop to kick off tasks to fetch ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=814"
  },
  {
    "text": "all of the thumbnails concurrently? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=818"
  },
  {
    "text": "Then, the amount of concurrency is not known statically ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=821"
  },
  {
    "text": "because it depends on the number of IDs in the array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=824"
  },
  {
    "text": "The right tool for this situation is a task group. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=828"
  },
  {
    "text": "A task group is a form of structured concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=831"
  },
  {
    "text": "that is designed to provide a dynamic amount of concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=833"
  },
  {
    "text": "You can introduce a task group ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=836"
  },
  {
    "text": "by calling the withThrowingTaskGroup function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=838"
  },
  {
    "text": "This function gives you a scoped group object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=841"
  },
  {
    "text": "to create child tasks that are allowed to throw errors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=844"
  },
  {
    "text": "Tasks added to a group cannot outlive the scope ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=848"
  },
  {
    "text": "of the block in which the group is defined. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=851"
  },
  {
    "text": "Since I have placed the entire for-loop inside of the block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=854"
  },
  {
    "text": "I can now create a dynamic number of tasks using the group. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=857"
  },
  {
    "text": "You create child tasks in a group ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=861"
  },
  {
    "text": "by invoking its async method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=863"
  },
  {
    "text": "Once added to a group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=865"
  },
  {
    "text": "child tasks begin executing immediately ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=867"
  },
  {
    "text": "and in any order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=870"
  },
  {
    "text": "When the group object goes out of scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=871"
  },
  {
    "text": "the completion of all tasks within it will be implicitly awaited. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=874"
  },
  {
    "text": "This is a consequence of the task tree rule I described earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=877"
  },
  {
    "text": "because group tasks are structured too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=881"
  },
  {
    "text": "At this point, we’ve already achieved the concurrency that we wanted: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=884"
  },
  {
    "text": "one task for each call to fetchOneThumbnail, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=888"
  },
  {
    "text": "which itself will create two more tasks using async-let. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=891"
  },
  {
    "text": "That’s another nice property of structured concurrency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=895"
  },
  {
    "text": "You can use async-let within group tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=898"
  },
  {
    "text": "or create task groups within async-let tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=901"
  },
  {
    "text": "and the levels of concurrency in the tree compose naturally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=904"
  },
  {
    "text": "Now, this code is not quite ready to run. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=908"
  },
  {
    "text": "If we tried to run it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=911"
  },
  {
    "text": "the compiler would helpfully alert us to a data race issue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=913"
  },
  {
    "text": "The problem is that we’re trying to insert a thumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=916"
  },
  {
    "text": "into a single dictionary from each child task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=918"
  },
  {
    "text": "This is a common mistake when increasing the amount of concurrency in your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=921"
  },
  {
    "text": "Data races are accidentally created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=925"
  },
  {
    "text": "This dictionary cannot handle more than one access at a time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=928"
  },
  {
    "text": "and if two child tasks tried to insert thumbnails simultaneously, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=932"
  },
  {
    "text": "that could cause a crash or data corruption. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=936"
  },
  {
    "text": "In the past, you had to investigate those bugs yourself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=939"
  },
  {
    "text": "but Swift provides static checking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=942"
  },
  {
    "text": "to prevent those bugs from happening in the first place. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=944"
  },
  {
    "text": "Whenever you create a new task, the work that the task performs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=947"
  },
  {
    "text": "is within a new closure type called a @Sendable closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=951"
  },
  {
    "text": "The body of a @Sendable closure is restricted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=955"
  },
  {
    "text": "from capturing mutable variables in its lexical context, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=957"
  },
  {
    "text": "because those variables could be modified ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=960"
  },
  {
    "text": "after the task is launched. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=963"
  },
  {
    "text": "This means that the values you capture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=965"
  },
  {
    "text": "in a task must be safe to share. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=967"
  },
  {
    "text": "For example, because they are value types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=969"
  },
  {
    "text": "like Int and String, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=972"
  },
  {
    "text": "or because they are objects designed to be accessed from multiple threads, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=973"
  },
  {
    "text": "like actors, and classes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=977"
  },
  {
    "text": "that implement their own synchronization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=979"
  },
  {
    "text": "We have a whole session dedicated to this topic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=982"
  },
  {
    "text": "called “Protect mutable state with Swift actors,” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=985"
  },
  {
    "text": "so I encourage you to check it out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=987"
  },
  {
    "text": "To avoid the data race in our example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=990"
  },
  {
    "text": "you can have each child task return a value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=993"
  },
  {
    "text": "This design gives the parent task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=995"
  },
  {
    "text": "the sole responsibility of processing the results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=997"
  },
  {
    "text": "In this case, I specified that each child task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1000"
  },
  {
    "text": "must return a tuple containing the String ID ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1003"
  },
  {
    "text": "and UIImage for the thumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1006"
  },
  {
    "text": "Then, inside each child task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1009"
  },
  {
    "text": "instead of writing to the dictionary directly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1011"
  },
  {
    "text": "I have them return the key value tuple ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1014"
  },
  {
    "text": "for the parent to process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1016"
  },
  {
    "text": "The parent task can iterate through the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1018"
  },
  {
    "text": "from each child task using the new for-await loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1021"
  },
  {
    "text": "The for-await loop obtains the results from the child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1024"
  },
  {
    "text": "in order of completion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1027"
  },
  {
    "text": "Because this loop runs sequentially, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1029"
  },
  {
    "text": "the parent task can safely add ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1032"
  },
  {
    "text": "each key value pair to the dictionary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1034"
  },
  {
    "text": "This is just one example of using the for-await loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1037"
  },
  {
    "text": "to access an asynchronous sequence of values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1040"
  },
  {
    "text": "If your own type conforms to the AsyncSequence protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1043"
  },
  {
    "text": "then you can use for-await to iterate through them too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1047"
  },
  {
    "text": "You can find out more in the “Meet AsyncSequence” session.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1050"
  },
  {
    "text": "While task groups are a form of structured concurrency, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1054"
  },
  {
    "text": "there is a small difference in how the task tree rule is implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1057"
  },
  {
    "text": "for group tasks versus async-let tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1060"
  },
  {
    "text": "Suppose when iterating through the results of this group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1063"
  },
  {
    "text": "I encounter a child task that completed with an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1067"
  },
  {
    "text": "Because that error is thrown out of the group’s block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1070"
  },
  {
    "text": "all tasks in the group will then be implicitly canceled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1073"
  },
  {
    "text": "and then awaited. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1076"
  },
  {
    "text": "This works just like async-let. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1077"
  },
  {
    "text": "The difference comes when your group goes out of scope ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1079"
  },
  {
    "text": "through a normal exit from the block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1082"
  },
  {
    "text": "Then, cancellation is not implicit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1085"
  },
  {
    "text": "This behavior makes it easier for you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1088"
  },
  {
    "text": "to express the fork-join pattern using a task group, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1090"
  },
  {
    "text": "because the jobs will only be awaited, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1093"
  },
  {
    "text": "not canceled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1095"
  },
  {
    "text": "You can also manually cancel all tasks before exiting the block ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1097"
  },
  {
    "text": "using the group’s cancelAll method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1101"
  },
  {
    "text": "Keep in mind that no matter how you cancel a task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1104"
  },
  {
    "text": "cancellation automatically propagates down the tree. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1107"
  },
  {
    "text": "Async-let and group tasks are the two kind of tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1111"
  },
  {
    "text": "that provide scoped structured tasks in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1114"
  },
  {
    "text": "Now, I’ll hand things off to Joe, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1117"
  },
  {
    "text": "who will tell you about unstructured tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1119"
  },
  {
    "text": "Thanks, Kavon. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1122"
  },
  {
    "text": "Hi. I’m Joe. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1123"
  },
  {
    "text": "Kavon showed you how structured concurrency simplifies error propagation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1125"
  },
  {
    "text": "cancellation, and other bookkeeping ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1128"
  },
  {
    "text": "when you add concurrency to a program ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1131"
  },
  {
    "text": "with a clear hierarchy to the tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1133"
  },
  {
    "text": "But we know that you don’t always have a hierarchy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1135"
  },
  {
    "text": "when you’re adding tasks to your program. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1137"
  },
  {
    "text": "Swift also provides unstructured task APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1140"
  },
  {
    "text": "which give you a lot more flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1143"
  },
  {
    "text": "at the expense of needing a lot more manual management. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1145"
  },
  {
    "text": "There are a lot of situations where a task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1148"
  },
  {
    "text": "might not fall into a clear hierarchy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1150"
  },
  {
    "text": "Most obviously, you might not have a parent task at all ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1153"
  },
  {
    "text": "if you’re trying to launch a task to do async computation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1156"
  },
  {
    "text": "from non-async code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1159"
  },
  {
    "text": "Alternatively, the lifetime you want for a task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1161"
  },
  {
    "text": "might not fit the confines of a single scope ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1164"
  },
  {
    "text": "or even a single function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1166"
  },
  {
    "text": "You may, for instance, want to start a task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1168"
  },
  {
    "text": "in response to a method call that puts an object into an active state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1170"
  },
  {
    "text": "and then cancel its execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1174"
  },
  {
    "text": "in response to a different method call that deactivates the object.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1176"
  },
  {
    "text": "This comes up a lot when implementing delegate objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1180"
  },
  {
    "text": "in AppKit and UIKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1183"
  },
  {
    "text": "UI work has to happen on the main thread, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1185"
  },
  {
    "text": "and as the Swift actors session discusses, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1187"
  },
  {
    "text": "Swift ensures this by declaring UI classes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1190"
  },
  {
    "text": "that belong to the main actor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1193"
  },
  {
    "text": "Let’s say we have a collection view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1197"
  },
  {
    "text": "and we can’t yet use the collection view data source APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1198"
  },
  {
    "text": "Instead, we want to use our fetchThumbnails function we just wrote ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1202"
  },
  {
    "text": "to grab thumbnails from the network ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1206"
  },
  {
    "text": "as the items in the collection view are displayed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1208"
  },
  {
    "text": "However, the delegate method is not async, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1210"
  },
  {
    "text": "so we can’t just await a call to an async function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1213"
  },
  {
    "text": "We need to start a task for that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1216"
  },
  {
    "text": "but that task is really an extension of the work we started ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1218"
  },
  {
    "text": "in response to the delegate action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1221"
  },
  {
    "text": "We want this new task to still run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1223"
  },
  {
    "text": "on the main actor with UI priority. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1225"
  },
  {
    "text": "We just don’t want to bound the lifetime of the task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1228"
  },
  {
    "text": "to the scope of this single delegate method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1231"
  },
  {
    "text": "For situations like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1233"
  },
  {
    "text": "Swift allows us to construct an unstructured task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1235"
  },
  {
    "text": "Let’s move that asynchronous part of the code into a closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1238"
  },
  {
    "text": "and pass that closure to construct an async task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1242"
  },
  {
    "text": "Now here’s what happens at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1246"
  },
  {
    "text": "When we reach the point of creating the task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1248"
  },
  {
    "text": "Swift will schedule it to run on the same actor as the originating scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1250"
  },
  {
    "text": "which is the main actor in this case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1254"
  },
  {
    "text": "Meanwhile, control returns immediately to the caller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1256"
  },
  {
    "text": "The thumbnail task will run on the main thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1260"
  },
  {
    "text": "when there’s an opening to do so ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1262"
  },
  {
    "text": "without immediately blocking the main thread on the delegate method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1263"
  },
  {
    "text": "Constructing tasks this way gives us a halfway point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1267"
  },
  {
    "text": "between structured and unstructured code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1270"
  },
  {
    "text": "A directly constructed task still inherits the actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1273"
  },
  {
    "text": "if any, of its launched context, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1276"
  },
  {
    "text": "and it also inherits the priority and other traits of the origin task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1278"
  },
  {
    "text": "just like a group task or an async-let would. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1282"
  },
  {
    "text": "However, the new task is unscoped. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1285"
  },
  {
    "text": "Its lifetime is not bound by the scope of where it was launched. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1287"
  },
  {
    "text": "The origin doesn’t even need to be async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1291"
  },
  {
    "text": "We can create an unscoped task anywhere. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1294"
  },
  {
    "text": "In trade for all of this flexibility, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1297"
  },
  {
    "text": "we must also manually manage the things ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1299"
  },
  {
    "text": "that structured concurrency would have handled automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1301"
  },
  {
    "text": "Cancellation and errors won’t automatically propagate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1304"
  },
  {
    "text": "and the task’s result will not be implicitly awaited ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1308"
  },
  {
    "text": "unless we take explicit action to do so.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1310"
  },
  {
    "text": "So we kicked off a task to fetch thumbnails ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1315"
  },
  {
    "text": "when a collection view item is displayed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1318"
  },
  {
    "text": "and we should also cancel that task if the item is scrolled out of view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1320"
  },
  {
    "text": "before the thumbnails are ready. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1324"
  },
  {
    "text": "Since we’re working with an unscoped task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1326"
  },
  {
    "text": "that cancellation isn’t automatic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1328"
  },
  {
    "text": "Let’s implement it now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1330"
  },
  {
    "text": "After we construct the task, let’s save the value we get. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1332"
  },
  {
    "text": "We can put this value into a dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1336"
  },
  {
    "text": "keyed by the row index when we create the task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1338"
  },
  {
    "text": "so that we can use it later to cancel that task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1341"
  },
  {
    "text": "We should also remove it from the dictionary once the task finishes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1345"
  },
  {
    "text": "so we don’t try to cancel a task if it’s already finished. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1348"
  },
  {
    "text": "Note here that we can access the same dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1351"
  },
  {
    "text": "inside and outside of that async task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1354"
  },
  {
    "text": "without getting a data race flagged by the compiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1357"
  },
  {
    "text": "Our delegate class is bound to the main actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1359"
  },
  {
    "text": "and the new task inherits that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1362"
  },
  {
    "text": "so they’ll never run together in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1364"
  },
  {
    "text": "We can safely access the stored properties of main actor-bound classes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1366"
  },
  {
    "text": "inside this task without worrying about data races. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1370"
  },
  {
    "text": "Meanwhile, if our delegate is later told that the same table row ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1374"
  },
  {
    "text": "has been removed from the display, then we can call the cancel method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1377"
  },
  {
    "text": "on the value to cancel the task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1381"
  },
  {
    "text": "So now we’ve seen how we can create unstructured tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1384"
  },
  {
    "text": "that run independent of a scope ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1387"
  },
  {
    "text": "while still inheriting traits from that task’s originating context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1389"
  },
  {
    "text": "But sometimes you don’t want to inherit anything ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1392"
  },
  {
    "text": "from your originating context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1395"
  },
  {
    "text": "For maximum flexibility, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1397"
  },
  {
    "text": "Swift provides detached tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1399"
  },
  {
    "text": "Like the name suggests, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1402"
  },
  {
    "text": "detached tasks are independent from their context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1403"
  },
  {
    "text": "They're still unstructured tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1407"
  },
  {
    "text": "Their lifetimes are not bound to their originating scope. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1408"
  },
  {
    "text": "But detached tasks don’t pick anything else up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1412"
  },
  {
    "text": "from their originating scope either. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1414"
  },
  {
    "text": "By default, they aren’t constrained to the same actor ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1416"
  },
  {
    "text": "and don’t have to run at the same priority ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1419"
  },
  {
    "text": "as where they were launched. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1421"
  },
  {
    "text": "Detached tasks run independently ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1423"
  },
  {
    "text": "with generic defaults for things like priority, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1425"
  },
  {
    "text": "but they can also be launched with optional parameters ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1427"
  },
  {
    "text": "to control how and where the new task gets executed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1430"
  },
  {
    "text": "Let’s say that after we fetch thumbnails from the server, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1435"
  },
  {
    "text": "we want to write them to a local disk cache ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1438"
  },
  {
    "text": "so we don’t hit the network again if we try to fetch them later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1441"
  },
  {
    "text": "The caching doesn’t need to happen on the main actor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1444"
  },
  {
    "text": "and even if we cancel fetching all of the thumbnails, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1447"
  },
  {
    "text": "it’s still helpful to cache any thumbnails we did fetch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1450"
  },
  {
    "text": "So let’s kick off caching by using a detached task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1454"
  },
  {
    "text": "When we detach a task, we also get a lot more flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1457"
  },
  {
    "text": "in setting up how that new task executes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1461"
  },
  {
    "text": "Caching should happen at a lower priority ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1463"
  },
  {
    "text": "that doesn’t interfere with the main UI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1465"
  },
  {
    "text": "and we can specify background priority ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1468"
  },
  {
    "text": "when we detach this new task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1470"
  },
  {
    "text": "Let’s plan ahead for a moment now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1473"
  },
  {
    "text": "What should we do in the future if we have multiple background tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1475"
  },
  {
    "text": "we want to perform on our thumbnails? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1478"
  },
  {
    "text": "We could detach more background tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1481"
  },
  {
    "text": "but we could also utilize structured concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1484"
  },
  {
    "text": "inside of our detached task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1486"
  },
  {
    "text": "We can combine all of the different kinds of tasks together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1488"
  },
  {
    "text": "to exploit each of their strengths. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1492"
  },
  {
    "text": "Instead of detaching an independent task for every background job, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1495"
  },
  {
    "text": "we can set up a task group and spawn each background job ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1499"
  },
  {
    "text": "as a child task into that group. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1502"
  },
  {
    "text": "There are a number of benefits of doing so. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1505"
  },
  {
    "text": "If we do need to cancel the background task in the future, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1508"
  },
  {
    "text": "using a task group means we can cancel all of the child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1511"
  },
  {
    "text": "just by canceling that top level detached task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1514"
  },
  {
    "text": "That cancellation will then propagate to the child tasks automatically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1517"
  },
  {
    "text": "and we don’t need to keep track of an array of handles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1520"
  },
  {
    "text": "Furthermore, child tasks automatically inherit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1523"
  },
  {
    "text": "the priority of their parent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1526"
  },
  {
    "text": "To keep all of this work in the background, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1528"
  },
  {
    "text": "we only need to background the detached task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1531"
  },
  {
    "text": "and that will automatically propagate to all of its child tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1533"
  },
  {
    "text": "so we don’t need to worry about forgetting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1537"
  },
  {
    "text": "to transitively set background priority ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1539"
  },
  {
    "text": "and accidentally starving UI work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1541"
  },
  {
    "text": "At this point, we’ve seen all of the primary forms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1544"
  },
  {
    "text": "of tasks there are in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1546"
  },
  {
    "text": "Async-let allows for a fixed number of child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1548"
  },
  {
    "text": "to be spawned as variable bindings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1551"
  },
  {
    "text": "with automatic management of cancellation and error propagation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1553"
  },
  {
    "text": "if the binding goes out of scope. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1556"
  },
  {
    "text": "When we need a dynamic number of child tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1559"
  },
  {
    "text": "that are still bounded to a scope, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1562"
  },
  {
    "text": "we can move up to task groups. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1563"
  },
  {
    "text": "If we need to break off some work that isn’t well scoped ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1567"
  },
  {
    "text": "but which is still related to its originating task, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1570"
  },
  {
    "text": "we can construct unstructured tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1573"
  },
  {
    "text": "but we need to manually manage those. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1576"
  },
  {
    "text": "And for maximum flexibility, we also have detached tasks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1578"
  },
  {
    "text": "which are manually managed tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1582"
  },
  {
    "text": "that don’t inherit anything from their origin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1584"
  },
  {
    "text": "Tasks and structured concurrency are just one part ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1588"
  },
  {
    "text": "of the suite of concurrency features Swift supports. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1590"
  },
  {
    "text": "Be sure to check out all these other great talks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1593"
  },
  {
    "text": "to see how it fits in with the rest of the language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1595"
  },
  {
    "text": "“Meet async/await in Swift” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1597"
  },
  {
    "text": "gives you more details about async functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1599"
  },
  {
    "text": "which gives us the structured basis ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1602"
  },
  {
    "text": "for writing concurrent code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1604"
  },
  {
    "text": "Actors provide data isolation to create concurrent systems ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1606"
  },
  {
    "text": "that are safe from data races. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1610"
  },
  {
    "text": "See the “Protect mutable state with Swift actors” session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1612"
  },
  {
    "text": "to learn more about how. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1615"
  },
  {
    "text": "We saw “for await” loops on task groups, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1617"
  },
  {
    "text": "and those are just one example of AsyncSequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1620"
  },
  {
    "text": "which provides a standard interface ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1623"
  },
  {
    "text": "for working with asynchronous streams of data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1624"
  },
  {
    "text": "The “Meet AsyncSequence” session goes deeper ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1627"
  },
  {
    "text": "into the available APIs for working with sequences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1629"
  },
  {
    "text": "Tasks integrate with the core OS ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1633"
  },
  {
    "text": "to achieve low overhead and high scalability, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1636"
  },
  {
    "text": "and the “Swift concurrency: Behind the scenes” session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1639"
  },
  {
    "text": "gives more technical details about how that’s accomplished. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1641"
  },
  {
    "text": "All these features come together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1645"
  },
  {
    "text": "to make writing concurrent code in Swift easy and safe, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1647"
  },
  {
    "text": "letting you write code that gets the most out of your devices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1650"
  },
  {
    "text": "while still focusing on the interesting parts of your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1653"
  },
  {
    "text": "thinking less about the mechanics of managing concurrent tasks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1656"
  },
  {
    "text": "or the worries of potential bugs caused by multithreading. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1659"
  },
  {
    "text": "Thank you for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1662"
  },
  {
    "text": "I hope you enjoy the rest of the conference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1664"
  },
  {
    "text": "[upbeat music]",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10134/?time=1666"
  }
]