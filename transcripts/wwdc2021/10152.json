[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=0"
  },
  {
    "text": "Hi. I'm Saharsh Oza. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=9"
  },
  {
    "text": "I'm with the GPU Software Engineering team at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=11"
  },
  {
    "text": "Today my colleague, Yuliya Pylypiv, and I ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=14"
  },
  {
    "text": "will talk about what's new in Metal Performance Shaders Graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=17"
  },
  {
    "text": "Let us begin. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=20"
  },
  {
    "text": "MPS is a library of metal-based, high-performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=22"
  },
  {
    "text": "GPU-accelerated primitives for varied fields ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=26"
  },
  {
    "text": "like image processing, linear algebra, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=29"
  },
  {
    "text": "ray tracing, and machine learning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=33"
  },
  {
    "text": "MPS team optimizes Metal kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=35"
  },
  {
    "text": "to give the best performance on each hardware ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=38"
  },
  {
    "text": "across Apple's various platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=40"
  },
  {
    "text": "Last year, we introduced the MPSGraph framework, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=44"
  },
  {
    "text": "a general purpose compute graph for the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=48"
  },
  {
    "text": "It is supported on macOS, iOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=51"
  },
  {
    "text": "iPadOS and tvOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=54"
  },
  {
    "text": "same as the MPS framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=57"
  },
  {
    "text": "Please watch our last year's session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=60"
  },
  {
    "text": "to get more introductory details on the MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=62"
  },
  {
    "text": "Let's take a look at the agenda. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=65"
  },
  {
    "text": "We have a lot to cover. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=67"
  },
  {
    "text": "We will discuss ML inference and training acceleration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=69"
  },
  {
    "text": "through MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=72"
  },
  {
    "text": "We will introduce some exciting new MPSGraph operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=74"
  },
  {
    "text": "We will introduce new ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=78"
  },
  {
    "text": "for you to control compilation in MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=80"
  },
  {
    "text": "And finally, we will look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=83"
  },
  {
    "text": "at the all new control-flow capabilities of MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=85"
  },
  {
    "text": "I'd like to introduce my colleague, Yuliya, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=89"
  },
  {
    "text": "who will share some exciting updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=91"
  },
  {
    "text": "for inference and training acceleration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=93"
  },
  {
    "text": "Thanks, Saharsh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=96"
  },
  {
    "text": "Hi. I'm Yuliya Pylypiv. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=97"
  },
  {
    "text": "I am a part of GPU Software team at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=99"
  },
  {
    "text": "Today, I want to share the improvements we've made ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=102"
  },
  {
    "text": "to boost training and inference performance on GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=104"
  },
  {
    "text": "Let's get right into it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=107"
  },
  {
    "text": "The MPSGraph framework has been adopted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=110"
  },
  {
    "text": "by higher level machine learning frameworks like Core ML ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=113"
  },
  {
    "text": "and TensorFlow for GPU acceleration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=116"
  },
  {
    "text": "This year, we have optimized MPSGraph even further ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=119"
  },
  {
    "text": "with a combination of kernel improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=123"
  },
  {
    "text": "and stitching adoption. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=126"
  },
  {
    "text": "This has translated to large performance gains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=127"
  },
  {
    "text": "to the machine learning frameworks that use MPS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=130"
  },
  {
    "text": "Let's take a closer look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=134"
  },
  {
    "text": "at the new Metal Plugin for TensorFlow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=136"
  },
  {
    "text": "TensorFlow is a popular machine learning training platform, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=139"
  },
  {
    "text": "and GPUs are the predominant accelerator device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=142"
  },
  {
    "text": "This year, we have developed a new Metal Plugin ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=145"
  },
  {
    "text": "using TensorFlow PluggableDevice Interface ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=148"
  },
  {
    "text": "released in TensorFlow 2.5. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=151"
  },
  {
    "text": "This brings the power of Metal to TensorFlow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=154"
  },
  {
    "text": "using MPS and MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=157"
  },
  {
    "text": "This allows us to train any machine learning model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=159"
  },
  {
    "text": "on Mac platform GPUs without modifications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=162"
  },
  {
    "text": "Now, let's see one of these in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=166"
  },
  {
    "text": "For this demo, I am going to use a Jupyter environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=168"
  },
  {
    "text": "On my M1 system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=172"
  },
  {
    "text": "I have the latest available TensorFlow installed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=174"
  },
  {
    "text": "When we list physical devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=178"
  },
  {
    "text": "you can see there is only a CPU device registered.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=180"
  },
  {
    "text": "Here I am defining a popular machine learning model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=186"
  },
  {
    "text": "ResNet50, which is widely used for image classification, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=189"
  },
  {
    "text": "transfer learning, and more.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=192"
  },
  {
    "text": "Current model uses a standard ImageNet dataset ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=196"
  },
  {
    "text": "with 224 by 224 image sizes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=199"
  },
  {
    "text": "As you can see, the current ETA for the first epoch ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=205"
  },
  {
    "text": "running on CPU is around 20 minutes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=208"
  },
  {
    "text": "Let me install the TensorFlow Metal Plugin ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=212"
  },
  {
    "text": "which we introduced earlier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=214"
  },
  {
    "text": "and see if we can add some speedup to the current network. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=215"
  },
  {
    "text": "To do so, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=219"
  },
  {
    "text": "I'm gonna use pip install tensorflow-metal...",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=220"
  },
  {
    "text": "going back to the same ResNet50 model we used before.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=229"
  },
  {
    "text": "Only this time, you can see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=234"
  },
  {
    "text": "there is a new GPU device registered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=236"
  },
  {
    "text": "This is the GPU device we introduced ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=238"
  },
  {
    "text": "as a part of the TensorFlow platform using Metal Plugin.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=240"
  },
  {
    "text": "All callbacks and network definition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=246"
  },
  {
    "text": "remain unchanged. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=249"
  },
  {
    "text": "Kicking off the network again so we can compare ETAs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=251"
  },
  {
    "text": "You can see that the GPU version of the same network ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=255"
  },
  {
    "text": "is training around four times faster ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=258"
  },
  {
    "text": "using TensorFlow Metal Plugin.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=260"
  },
  {
    "text": "Now let's take a closer look at the other networks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=264"
  },
  {
    "text": "Here we show the performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=267"
  },
  {
    "text": "on key machine learning training benchmarks relative to the CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=269"
  },
  {
    "text": "As you can see, we have a good speedup across all benchmarks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=273"
  },
  {
    "text": "going up to eight times faster on the M1 MacBook Pro.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=276"
  },
  {
    "text": "Installing the new Metal Plugin for TensorFlow is easy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=282"
  },
  {
    "text": "After installing the base TensorFlow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=286"
  },
  {
    "text": "using pip install tensorflow-macos, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=288"
  },
  {
    "text": "you can install Metal Plugin ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=290"
  },
  {
    "text": "using pip install tensorflow-metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=292"
  },
  {
    "text": "The Metal Plugin will be available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=295"
  },
  {
    "text": "on the official Python package repo, pypi.org. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=296"
  },
  {
    "text": "For details on environment setup and installation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=300"
  },
  {
    "text": "please refer to Metal Developer Resource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=304"
  },
  {
    "text": "That's it for TensorFlow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=306"
  },
  {
    "text": "Next, let's talk about Inference acceleration in Core ML.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=308"
  },
  {
    "text": "Core ML is Apple's machine learning inference framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=313"
  },
  {
    "text": "We also saw significant performance improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=316"
  },
  {
    "text": "on Core ML with MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=319"
  },
  {
    "text": "We show here inference speedup of key classes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=323"
  },
  {
    "text": "of machine learning networks on M1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=325"
  },
  {
    "text": "We get a 2x speedup on BERT, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=328"
  },
  {
    "text": "which is a canonical transformer network ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=331"
  },
  {
    "text": "used for NLP applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=333"
  },
  {
    "text": "ResNet50, which is central to computer vision applications, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=335"
  },
  {
    "text": "has been tuned for texture paths in previous releases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=339"
  },
  {
    "text": "This is an additional performance improvement of 16% ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=343"
  },
  {
    "text": "with our new buffer backend through MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=347"
  },
  {
    "text": "These performance improvements in Core ML and TensorFlow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=351"
  },
  {
    "text": "are due to performance improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=354"
  },
  {
    "text": "in MPS primitives like Convolution2D. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=356"
  },
  {
    "text": "Here, we show the speedup of Convolution2D ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=359"
  },
  {
    "text": "on NHWC and NCHW data layouts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=362"
  },
  {
    "text": "which are used for training and inference respectively. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=366"
  },
  {
    "text": "That's it for the improvements in inference and training. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=370"
  },
  {
    "text": "Next, let's go back to Saharsh to learn more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=373"
  },
  {
    "text": "about the new operations in MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=375"
  },
  {
    "text": "Thanks, Yuliya. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=378"
  },
  {
    "text": "Now we will take a look at the new set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=380"
  },
  {
    "text": "of operations supported by MPSGraph.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=382"
  },
  {
    "text": "We support a plethora of operations on the MPSGraph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=385"
  },
  {
    "text": "from multiple variants of convolutions and reductions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=389"
  },
  {
    "text": "to all the basic math ops you may need in your compute graphs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=392"
  },
  {
    "text": "This year, we added special operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=396"
  },
  {
    "text": "to enable you to do even more with MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=399"
  },
  {
    "text": "We will introduce three new primitives: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=402"
  },
  {
    "text": "control dependency, stencil operator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=405"
  },
  {
    "text": "and gather operator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=408"
  },
  {
    "text": "First, we'll look at control dependency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=410"
  },
  {
    "text": "Control dependency is needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=413"
  },
  {
    "text": "to explicitly order operations in the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=415"
  },
  {
    "text": "To understand this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=418"
  },
  {
    "text": "let's formally define a graph operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=420"
  },
  {
    "text": "Operations in the graph connect with each other ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=422"
  },
  {
    "text": "via three kinds of edges: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=425"
  },
  {
    "text": "input tensors, which represent which tensors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=427"
  },
  {
    "text": "act as data inputs to the op, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=430"
  },
  {
    "text": "output tensors, which are created by the op itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=432"
  },
  {
    "text": "and finally, a special kind of edge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=435"
  },
  {
    "text": "called control dependency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=438"
  },
  {
    "text": "They must execute before the current operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=440"
  },
  {
    "text": "even if the current operation itself does not depend on it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=443"
  },
  {
    "text": "This API also offers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=446"
  },
  {
    "text": "a convenient way to prevent operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=448"
  },
  {
    "text": "from being optimized away by MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=450"
  },
  {
    "text": "This is needed to implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=453"
  },
  {
    "text": "machine learning layers like batch normalization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=455"
  },
  {
    "text": "Let's see this in practice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=458"
  },
  {
    "text": "Batch normalization is a standard layer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=461"
  },
  {
    "text": "used in ML training ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=463"
  },
  {
    "text": "to make the network more stable and converge faster. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=464"
  },
  {
    "text": "Here we see the computational graph for batch normalization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=468"
  },
  {
    "text": "that is used for training. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=471"
  },
  {
    "text": "The first step is to compute the mean and variance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=472"
  },
  {
    "text": "These are, in turn, used to update the running mean ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=476"
  },
  {
    "text": "and running variance which are needed for inference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=479"
  },
  {
    "text": "However, the training graph result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=482"
  },
  {
    "text": "does not require these variables, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=484"
  },
  {
    "text": "so the MPSGraph might optimize them away. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=486"
  },
  {
    "text": "We can solve this by explicitly ordering them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=490"
  },
  {
    "text": "before the final normalization operator ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=492"
  },
  {
    "text": "using control dependencies. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=495"
  },
  {
    "text": "Let's look at a simple example with some code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=498"
  },
  {
    "text": "that shows how you can use this API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=500"
  },
  {
    "text": "This graph shows an exponent and assign operator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=503"
  },
  {
    "text": "The assign operator is not used by anything else in the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=506"
  },
  {
    "text": "So it may be optimized away. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=510"
  },
  {
    "text": "One way to solve this is to explicitly set the assign ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=512"
  },
  {
    "text": "as a targetOperation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=515"
  },
  {
    "text": "However, this requires the developer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=517"
  },
  {
    "text": "to track dependencies globally across the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=520"
  },
  {
    "text": "Instead, with the new control dependency API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=523"
  },
  {
    "text": "you can make the exponent operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=527"
  },
  {
    "text": "depend on the assignment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=529"
  },
  {
    "text": "This removes the need to have a targetOperation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=531"
  },
  {
    "text": "and also ensures that the graph does not optimize it away. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=534"
  },
  {
    "text": "Next, we will see this in code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=538"
  },
  {
    "text": "We first define the operator ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=541"
  },
  {
    "text": "that the exponent is dependent on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=543"
  },
  {
    "text": "Next, we create a dependentBlock ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=546"
  },
  {
    "text": "which defines the exponent operator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=548"
  },
  {
    "text": "Finally, we call the run API on this graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=551"
  },
  {
    "text": "Note that no targetOperations need to be tracked globally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=555"
  },
  {
    "text": "That's it for control dependency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=559"
  },
  {
    "text": "Now let's talk about stencil operators.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=561"
  },
  {
    "text": "A stencil operation is a generalization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=565"
  },
  {
    "text": "of sliding window operators like image convolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=567"
  },
  {
    "text": "These operators are essential in finite element methods, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=571"
  },
  {
    "text": "machine learning, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=574"
  },
  {
    "text": "and image processing applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=575"
  },
  {
    "text": "Here, we see a five-point 2D stencil ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=578"
  },
  {
    "text": "commonly used to implement Laplacian operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=581"
  },
  {
    "text": "The stencil operator shown here ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=584"
  },
  {
    "text": "can be applied to higher dimensions too, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=586"
  },
  {
    "text": "as shown with this seven-point 3D stencil diagram. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=588"
  },
  {
    "text": "Let's take a closer look at the operator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=592"
  },
  {
    "text": "For each output value, it computes a weighted reduction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=595"
  },
  {
    "text": "over the stencil window on the input tensor, as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=598"
  },
  {
    "text": "The operator supports various reduction modes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=602"
  },
  {
    "text": "including argmin/argmax, and various padding modes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=605"
  },
  {
    "text": "including reflection and clampToZero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=608"
  },
  {
    "text": "MPSGraph enables stitching across MPS kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=611"
  },
  {
    "text": "for optimal performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=615"
  },
  {
    "text": "With stitching support, the stencil operator allows you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=617"
  },
  {
    "text": "to express complex mathematical operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=620"
  },
  {
    "text": "in a single kernel launch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=622"
  },
  {
    "text": "Let us see one such example in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=625"
  },
  {
    "text": "Local response normalization is a pytorch op ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=628"
  },
  {
    "text": "used for normalizing in the channel dimension. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=631"
  },
  {
    "text": "It's very straightforward to implement this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=634"
  },
  {
    "text": "with the new stencil operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=636"
  },
  {
    "text": "Here, we see the graph for this normalization technique. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=638"
  },
  {
    "text": "We see that it's just element wise ops ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=642"
  },
  {
    "text": "around the stencil operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=644"
  },
  {
    "text": "Without the new operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=646"
  },
  {
    "text": "multiple dispatches will be needed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=647"
  },
  {
    "text": "Now, since the stencil op supports stitching, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=650"
  },
  {
    "text": "this entire graph can be launched in a single dispatch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=653"
  },
  {
    "text": "So that's it for the stencil operator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=657"
  },
  {
    "text": "Next, let's take a look at improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=660"
  },
  {
    "text": "in gather operations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=662"
  },
  {
    "text": "This year, new gather operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=665"
  },
  {
    "text": "have been added to MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=667"
  },
  {
    "text": "These allow for efficient copying ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=669"
  },
  {
    "text": "of arbitrary sized slices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=671"
  },
  {
    "text": "in noncontiguous memory locations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=673"
  },
  {
    "text": "Conceptually, we are gathering the values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=676"
  },
  {
    "text": "from locations marked in blue from a chunk of memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=679"
  },
  {
    "text": "These gather layers allow for efficient implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=682"
  },
  {
    "text": "of embedding lookup and dynamic matrix copy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=685"
  },
  {
    "text": "GatherND is a powerful extension of the gather operation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=689"
  },
  {
    "text": "While the normal gather supports linear indexing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=692"
  },
  {
    "text": "the gatherND operation enables N-dimensional indexing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=695"
  },
  {
    "text": "This allows for seamless copying of data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=700"
  },
  {
    "text": "from anywhere in an N-dimensional input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=702"
  },
  {
    "text": "The input to this operation is a vector of coordinates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=705"
  },
  {
    "text": "and each coordinate can be up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=708"
  },
  {
    "text": "to the rank of the input tensor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=710"
  },
  {
    "text": "Any dimensions not specified in the coordinates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=713"
  },
  {
    "text": "result in slice copies. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=716"
  },
  {
    "text": "We can step through an example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=719"
  },
  {
    "text": "of a gather of row slices from a 3D tensor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=720"
  },
  {
    "text": "In this example, the indices specify two coordinates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=724"
  },
  {
    "text": "corresponding to the matrix ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=727"
  },
  {
    "text": "and row coordinates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=729"
  },
  {
    "text": "With no third coordinate to column index, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=732"
  },
  {
    "text": "this gatherND will copy entire rows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=734"
  },
  {
    "text": "The result tensor is a 2D matrix of the rows gathered ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=738"
  },
  {
    "text": "from the input matrix. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=742"
  },
  {
    "text": "GatherND can represent nearly any form of gather operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=744"
  },
  {
    "text": "and give great performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=747"
  },
  {
    "text": "For example, let's see how we can implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=749"
  },
  {
    "text": "embedding lookup using gather operations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=752"
  },
  {
    "text": "Embedding lookup is a common operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=756"
  },
  {
    "text": "used to find embedding vectors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=758"
  },
  {
    "text": "for a provided set of input objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=760"
  },
  {
    "text": "Commonly, this layer is used in language processing networks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=763"
  },
  {
    "text": "where an embedding matrix is generated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=767"
  },
  {
    "text": "associating each word in the vocabulary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=769"
  },
  {
    "text": "to an embedding vector. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=772"
  },
  {
    "text": "The ID of the words in the vocabulary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=774"
  },
  {
    "text": "can be used as the indices to a gather operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=776"
  },
  {
    "text": "and the embedding matrix is our input tensor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=779"
  },
  {
    "text": "We would like to get the corresponding rows ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=783"
  },
  {
    "text": "for each word ID, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=785"
  },
  {
    "text": "which we can do easily using a gather layer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=787"
  },
  {
    "text": "We only specify one coordinate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=790"
  },
  {
    "text": "so the entire row will be copied for each input word. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=792"
  },
  {
    "text": "The resulting tensor is a 2D matrix ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=796"
  },
  {
    "text": "of each input word's embedding vector along the rows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=799"
  },
  {
    "text": "That's it for the new MPSGraph operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=803"
  },
  {
    "text": "we have introduced this year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=806"
  },
  {
    "text": "Now let's talk about the compilation APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=807"
  },
  {
    "text": "This year, we are introducing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=810"
  },
  {
    "text": "the new MPSGraphExecutable API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=812"
  },
  {
    "text": "This compilation API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=815"
  },
  {
    "text": "improves performance in two ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=817"
  },
  {
    "text": "First, it gives the developer control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=819"
  },
  {
    "text": "on when to compile the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=822"
  },
  {
    "text": "Second, it allows you to reduce the number of compilation calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=824"
  },
  {
    "text": "through deferred type inference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=828"
  },
  {
    "text": "Now let's take a closer look at each. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=830"
  },
  {
    "text": "Last year, we provided a really convenient API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=833"
  },
  {
    "text": "to define and execute an MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=836"
  },
  {
    "text": "Under the hood, the first time an evaluation was requested, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=840"
  },
  {
    "text": "MPSGraph invoked compilation for the input types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=844"
  },
  {
    "text": "and internally created an executable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=847"
  },
  {
    "text": "For any subsequent executions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=849"
  },
  {
    "text": "MPSGraph seamlessly cached this executable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=852"
  },
  {
    "text": "to ensure compilation cost is not paid again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=854"
  },
  {
    "text": "Users now have the ability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=858"
  },
  {
    "text": "to invoke compilation ahead of time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=860"
  },
  {
    "text": "so you can choose the timeline for compilation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=862"
  },
  {
    "text": "With the compiled executable, you can call run directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=865"
  },
  {
    "text": "on the MPSGraphExecutable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=868"
  },
  {
    "text": "This gives the user control on when the graph is compiled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=871"
  },
  {
    "text": "and also the ability to cache the compiled executable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=873"
  },
  {
    "text": "so you can gain even more performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=877"
  },
  {
    "text": "Let's see this in code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=879"
  },
  {
    "text": "Here, we have a simple graph to add two tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=882"
  },
  {
    "text": "Now to compile, we provide the types for the feeds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=885"
  },
  {
    "text": "and target tensors along with the operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=888"
  },
  {
    "text": "What we get is a compiled graph and an executable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=891"
  },
  {
    "text": "And the evaluation method is just as simple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=895"
  },
  {
    "text": "We provide a Metal command queue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=898"
  },
  {
    "text": "and our input tensor data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=899"
  },
  {
    "text": "So those are the basics of compiling an MPS graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=902"
  },
  {
    "text": "Next, let's talk about how we reduce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=905"
  },
  {
    "text": "the number of compilation calls through deferred type inference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=907"
  },
  {
    "text": "Type inference is a compilation pass ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=911"
  },
  {
    "text": "where MPSGraph must determine tensor shapes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=913"
  },
  {
    "text": "where they are not specified by the user. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=916"
  },
  {
    "text": "In this graph, we are performing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=919"
  },
  {
    "text": "a matrix multiplication of two 2D tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=921"
  },
  {
    "text": "The shapes of the input tensors are shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=925"
  },
  {
    "text": "However, the output tensor is of an unknown shape.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=927"
  },
  {
    "text": "Once the type inference pass is complete, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=932"
  },
  {
    "text": "the output tensor shape is determined ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=934"
  },
  {
    "text": "based on the inputs and operation type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=936"
  },
  {
    "text": "In standard neural networks, the inputs to the network ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=939"
  },
  {
    "text": "are not always the same size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=942"
  },
  {
    "text": "For natural language processing, the sentences or sequences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=945"
  },
  {
    "text": "can be of different lengths. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=949"
  },
  {
    "text": "For CNNs, we see different-sized images ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=951"
  },
  {
    "text": "coming in to be evaluated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=953"
  },
  {
    "text": "Before the compilation upgrades of this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=956"
  },
  {
    "text": "for every new sized image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=958"
  },
  {
    "text": "a compilation would be invoked to do type inference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=960"
  },
  {
    "text": "for the whole graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=963"
  },
  {
    "text": "Now with control over compilation, you, the developer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=965"
  },
  {
    "text": "can invoke compilation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=969"
  },
  {
    "text": "with type inference pass turned off. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=970"
  },
  {
    "text": "This can save tens or hundreds of many seconds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=973"
  },
  {
    "text": "of compilation time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=976"
  },
  {
    "text": "on each iteration and get the best performance.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=977"
  },
  {
    "text": "MPSGraph runtime will infer types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=981"
  },
  {
    "text": "just in time during encoding and seamlessly make things work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=983"
  },
  {
    "text": "It is a tradeoff between saving compilation time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=988"
  },
  {
    "text": "versus getting the most optimal graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=991"
  },
  {
    "text": "Let's see how this can be used in the code example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=994"
  },
  {
    "text": "shared before.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=996"
  },
  {
    "text": "Disabling the type inference pass can be achieved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=999"
  },
  {
    "text": "by setting the compilation descriptor as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1001"
  },
  {
    "text": "That's it for compilation APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1005"
  },
  {
    "text": "Finally, let's talk about the new ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1008"
  },
  {
    "text": "control flow APIs of MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1010"
  },
  {
    "text": "These APIs let you dynamically dispatch operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1013"
  },
  {
    "text": "based on tensors previously evaluated by the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1016"
  },
  {
    "text": "This is common in applications like batch normalization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1020"
  },
  {
    "text": "and recurrent neural networks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1024"
  },
  {
    "text": "Let's take a look at how a “while loop” can be implemented ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1027"
  },
  {
    "text": "with MPSGraph today without the new API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1030"
  },
  {
    "text": "First, we create a graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1034"
  },
  {
    "text": "that computes the predicate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1036"
  },
  {
    "text": "Next, the predicate is evaluated on the CPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1039"
  },
  {
    "text": "through an explicit memory synchronization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1042"
  },
  {
    "text": "If the predicate is true, the previously created graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1045"
  },
  {
    "text": "is re-executed with the new inputs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1049"
  },
  {
    "text": "Otherwise, if the predicate is false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1052"
  },
  {
    "text": "the loop ends and a second MPSGraph is created ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1055"
  },
  {
    "text": "and executed to consume the result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1058"
  },
  {
    "text": "With the new control flow API, all these steps can be launched ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1061"
  },
  {
    "text": "as part of a single MPSGraph execution.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1064"
  },
  {
    "text": "This is more convenient to implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1068"
  },
  {
    "text": "because you don't have to introduce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1070"
  },
  {
    "text": "explicit memory synchronization primitives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1072"
  },
  {
    "text": "Now let's take a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1075"
  },
  {
    "text": "at how this can be potentially more efficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1077"
  },
  {
    "text": "Here we see the control flow timeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1079"
  },
  {
    "text": "without the new API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1082"
  },
  {
    "text": "We encode the first kernel on the CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1084"
  },
  {
    "text": "Once the kernel is complete, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1087"
  },
  {
    "text": "we have to synchronize memory to read the result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1089"
  },
  {
    "text": "This is potentially inefficient, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1093"
  },
  {
    "text": "as the CPU has to wait for the GPU to finish executing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1095"
  },
  {
    "text": "Similarly, the GPU also has to wait ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1099"
  },
  {
    "text": "for the CPU synchronization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1101"
  },
  {
    "text": "and subsequent encoding to complete. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1103"
  },
  {
    "text": "This happens in each iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1106"
  },
  {
    "text": "Now let's see the benefits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1109"
  },
  {
    "text": "of using the new MPSGraph API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1111"
  },
  {
    "text": "We have to perform only one CPU encode call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1113"
  },
  {
    "text": "Since the predicate is evaluated on the GPU timeline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1117"
  },
  {
    "text": "no synchronization overhead is incurred, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1120"
  },
  {
    "text": "and the kernels can be launched without any bubbles.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1122"
  },
  {
    "text": "Now let's see what the new APIs are.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1126"
  },
  {
    "text": "We added three new control flow APIs: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1132"
  },
  {
    "text": "if/else, for loops, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1135"
  },
  {
    "text": "and while loops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1137"
  },
  {
    "text": "Let's start with the if/else primitive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1139"
  },
  {
    "text": "We are all familiar with this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1142"
  },
  {
    "text": "Based on a predicate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1144"
  },
  {
    "text": "different code paths are executed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1146"
  },
  {
    "text": "We are provided a Boolean predicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1148"
  },
  {
    "text": "along with a code block for the “if” and “else” conditions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1150"
  },
  {
    "text": "If this predicate is true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1154"
  },
  {
    "text": "we execute the then block of code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1156"
  },
  {
    "text": "Otherwise, if it's false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1158"
  },
  {
    "text": "the else branch is executed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1160"
  },
  {
    "text": "Having the if/else operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1163"
  },
  {
    "text": "is very useful in neural networks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1165"
  },
  {
    "text": "One canonical usage is in batchNormalization operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1168"
  },
  {
    "text": "which has different behavior in training and inference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1171"
  },
  {
    "text": "With the isTraining Boolean, we can have a single graph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1175"
  },
  {
    "text": "to represent both variants of the normalizer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1178"
  },
  {
    "text": "Let's look at how to set up an if/else branch in code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1182"
  },
  {
    "text": "Let's take a very simple example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1185"
  },
  {
    "text": "of two input scalar tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1187"
  },
  {
    "text": "If the first tensor is smaller than the second, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1190"
  },
  {
    "text": "we return the sum of the operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1192"
  },
  {
    "text": "Else, we return the difference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1195"
  },
  {
    "text": "First, we compute the predicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1198"
  },
  {
    "text": "and pass that to the API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1200"
  },
  {
    "text": "Next, when the predicate is true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1203"
  },
  {
    "text": "we compute the then block and add the tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1205"
  },
  {
    "text": "Finally, when the predicate is false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1209"
  },
  {
    "text": "we compute the else block and subtract the tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1212"
  },
  {
    "text": "Next, let's see how to implement a for loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1215"
  },
  {
    "text": "The for loop primitive loops over a set of operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1219"
  },
  {
    "text": "a fixed number of times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1222"
  },
  {
    "text": "This is common in recurrent neural networks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1224"
  },
  {
    "text": "where we have to loop over sequences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1226"
  },
  {
    "text": "of different lengths during training. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1228"
  },
  {
    "text": "We need to provide the numberOfIterations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1231"
  },
  {
    "text": "of the for loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1233"
  },
  {
    "text": "The index is initialized to 0 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1234"
  },
  {
    "text": "and compared against the numberOfIterations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1237"
  },
  {
    "text": "each loop iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1239"
  },
  {
    "text": "If it's less than the numberOfIterations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1242"
  },
  {
    "text": "we execute the body of the for loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1244"
  },
  {
    "text": "and increment the index by 1.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1246"
  },
  {
    "text": "When the index is equal to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1250"
  },
  {
    "text": "or greater than the numberOfIterations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1251"
  },
  {
    "text": "we end the loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1253"
  },
  {
    "text": "Let's see how to implement this in code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1255"
  },
  {
    "text": "Let's say we wanted to implement a really simple example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1258"
  },
  {
    "text": "We'll initialize the result variable to some input value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1262"
  },
  {
    "text": "Then we loop four times, multiplying the result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1266"
  },
  {
    "text": "by another input value each time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1269"
  },
  {
    "text": "First, we create two graph tensors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1273"
  },
  {
    "text": "The output tensor will be initialized to input0. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1275"
  },
  {
    "text": "In each iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1279"
  },
  {
    "text": "this tensor will be multiplied by input1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1281"
  },
  {
    "text": "Next, we set the numberOfIterations to 4 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1284"
  },
  {
    "text": "so that we can execute the loop four times, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1287"
  },
  {
    "text": "from index 0 to index 3. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1290"
  },
  {
    "text": "Next, we create the body of the for loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1293"
  },
  {
    "text": "This is done by creating a closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1295"
  },
  {
    "text": "which represents a single iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1297"
  },
  {
    "text": "Each iteration is passed the index of the current iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1300"
  },
  {
    "text": "as well as the output of the previous iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1303"
  },
  {
    "text": "Then, we'll update the result and return it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1307"
  },
  {
    "text": "to be passed to the next iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1309"
  },
  {
    "text": "Finally, we pass all these arguments ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1312"
  },
  {
    "text": "to the for loop API in the graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1315"
  },
  {
    "text": "Note that the iterationArguments of the body ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1317"
  },
  {
    "text": "are initialized to input0 tensor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1320"
  },
  {
    "text": "That's it for the for loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1324"
  },
  {
    "text": "Now let's look at the while loop API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1326"
  },
  {
    "text": "This primitive executes a set of operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1329"
  },
  {
    "text": "while a condition is met. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1332"
  },
  {
    "text": "We need to provide two blocks of code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1334"
  },
  {
    "text": "to use this API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1336"
  },
  {
    "text": "In the first block, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1338"
  },
  {
    "text": "the condition is checked with a predicate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1340"
  },
  {
    "text": "When the predicate is true, the body of the while loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1342"
  },
  {
    "text": "in the after block is executed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1345"
  },
  {
    "text": "This recomputes the predicate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1347"
  },
  {
    "text": "MPSGraph then uses this predicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1350"
  },
  {
    "text": "in the next iteration of the before block. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1352"
  },
  {
    "text": "If the condition evaluated is false, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1356"
  },
  {
    "text": "it exits the loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1358"
  },
  {
    "text": "The API also allows for implementing the do-while loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1360"
  },
  {
    "text": "by swapping the body ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1363"
  },
  {
    "text": "and condition evaluation code blocks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1365"
  },
  {
    "text": "Let's say we wanted to implement a really simple example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1368"
  },
  {
    "text": "We'll initialize the result variable to some input value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1371"
  },
  {
    "text": "Then we'll multiply the result by a multiplier each time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1375"
  },
  {
    "text": "in a loop till we exceed a threshold. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1378"
  },
  {
    "text": "First, we define a block of code that will evaluate the predicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1381"
  },
  {
    "text": "using the result of the previous iteration. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1385"
  },
  {
    "text": "It also stores the results of the previous iteration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1388"
  },
  {
    "text": "in a returnTensors NSArray. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1391"
  },
  {
    "text": "This array will be used as the input ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1393"
  },
  {
    "text": "to the next iteration when the predicate is true ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1395"
  },
  {
    "text": "and used as the final result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1397"
  },
  {
    "text": "if the predicate is false. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1399"
  },
  {
    "text": "Next, we define the body of the while loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1402"
  },
  {
    "text": "where the tensors are multiplied. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1404"
  },
  {
    "text": "The product is returned for the condition block to read.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1407"
  },
  {
    "text": "Finally, we'll pass all these arguments ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1411"
  },
  {
    "text": "to the while loop API as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1414"
  },
  {
    "text": "Note the initialInputs argument ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1416"
  },
  {
    "text": "is used in the first iteration of the before block.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1419"
  },
  {
    "text": "That's it for while loops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1423"
  },
  {
    "text": "Next, we'll see how this can be used in a real application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1425"
  },
  {
    "text": "Image composition is a common image editing utility. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1428"
  },
  {
    "text": "Here, an object is implanted into a target image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1432"
  },
  {
    "text": "We start with a source image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1436"
  },
  {
    "text": "and a background image, as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1437"
  },
  {
    "text": "Next, we create a mask on the source image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1440"
  },
  {
    "text": "Let's place this mask of the source image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1443"
  },
  {
    "text": "directly against the background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1446"
  },
  {
    "text": "That does not look great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1448"
  },
  {
    "text": "as we can clearly see the edges of the source image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1450"
  },
  {
    "text": "Through image composition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1453"
  },
  {
    "text": "we want to smoothen these edges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1455"
  },
  {
    "text": "Pairing a Laplacian edge filter with an iterative linear solver ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1457"
  },
  {
    "text": "is a common way to achieve this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1460"
  },
  {
    "text": "Now let's look at the details. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1463"
  },
  {
    "text": "Here, we see the pipeline needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1465"
  },
  {
    "text": "to perform image composition with MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1467"
  },
  {
    "text": "We start with our input tensors, the background image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1470"
  },
  {
    "text": "source image, and a mask of the object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1474"
  },
  {
    "text": "Next we use an iterative linear solver ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1478"
  },
  {
    "text": "coupled with a Laplacian edge detector. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1481"
  },
  {
    "text": "The output of this set of operations is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1484"
  },
  {
    "text": "a composite image with smooth edges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1486"
  },
  {
    "text": "Let's take a look at the Laplacian edge filter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1489"
  },
  {
    "text": "Implementing the Laplacian edge filter ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1493"
  },
  {
    "text": "involves a windowed reduction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1495"
  },
  {
    "text": "over the source image with a set of weights. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1497"
  },
  {
    "text": "The stencil operator is used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1500"
  },
  {
    "text": "to implement this as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1501"
  },
  {
    "text": "Using this operator, we are able ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1504"
  },
  {
    "text": "to see the edges of the source object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1506"
  },
  {
    "text": "The edges computed here will be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1508"
  },
  {
    "text": "as the input to the linear solver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1510"
  },
  {
    "text": "Next, let's take a look at the linear solver.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1513"
  },
  {
    "text": "We start with the background image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1517"
  },
  {
    "text": "and feed it into the linear solver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1519"
  },
  {
    "text": "The solver updates this image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1522"
  },
  {
    "text": "and the result is subsequently read back in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1524"
  },
  {
    "text": "As we can see, this is an iterative process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1527"
  },
  {
    "text": "As the iterations progress, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1531"
  },
  {
    "text": "the solution image improves till we arrive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1533"
  },
  {
    "text": "at the perfect blend at the edges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1535"
  },
  {
    "text": "The loop terminates when the error ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1538"
  },
  {
    "text": "is below a user defined tolerance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1539"
  },
  {
    "text": "This requires a while loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1542"
  },
  {
    "text": "You can now use the MPSGraph Control Flow API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1544"
  },
  {
    "text": "to implement this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1547"
  },
  {
    "text": "Now, let's look at the demo. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1548"
  },
  {
    "text": "We have implemented an image composition utility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1551"
  },
  {
    "text": "using the MPSGraph as an iPad Pro application.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1553"
  },
  {
    "text": "We start with a source image on the top ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1558"
  },
  {
    "text": "and a target image below. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1560"
  },
  {
    "text": "We will be cloning objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1562"
  },
  {
    "text": "from the source to the target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1564"
  },
  {
    "text": "The first thing we need to do is to draw a mask ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1566"
  },
  {
    "text": "around the cow that we want to move.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1568"
  },
  {
    "text": "Let's see how this looks with a naive clone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1571"
  },
  {
    "text": "That does not look very good, as we can see the rough edges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1575"
  },
  {
    "text": "Now let's try the image composition technique ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1578"
  },
  {
    "text": "we just described. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1580"
  },
  {
    "text": "We will start by setting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1582"
  },
  {
    "text": "the initial solution to the background image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1583"
  },
  {
    "text": "Let's run this for about 50 iterations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1586"
  },
  {
    "text": "Clearly, the solution image has not yet converged. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1591"
  },
  {
    "text": "Let's run it for about 50 more iterations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1594"
  },
  {
    "text": "This looks way more natural as the edges smoothen out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1599"
  },
  {
    "text": "The ease of programming with MPSGraph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1602"
  },
  {
    "text": "makes experimenting with different techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1605"
  },
  {
    "text": "straightforward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1606"
  },
  {
    "text": "Initializing the solver with the cloned image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1608"
  },
  {
    "text": "instead of the background image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1610"
  },
  {
    "text": "can result in faster convergence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1612"
  },
  {
    "text": "We can enable this initialization mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1613"
  },
  {
    "text": "by toggling this switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1616"
  },
  {
    "text": "Let's see this in action by setting the iteration count ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1618"
  },
  {
    "text": "to 50 again and resetting to the naive clone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1620"
  },
  {
    "text": "Now let's rerun the solver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1624"
  },
  {
    "text": "We can see the solution image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1627"
  },
  {
    "text": "after 50 iterations looks pretty good. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1629"
  },
  {
    "text": "Since we already start with the source object, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1631"
  },
  {
    "text": "we also observe less bleeding at the edges. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1633"
  },
  {
    "text": "This is great. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1636"
  },
  {
    "text": "But what we really want is to automate convergence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1637"
  },
  {
    "text": "based on an error tolerance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1640"
  },
  {
    "text": "This will require a while loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1641"
  },
  {
    "text": "which we will enable by using this switch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1643"
  },
  {
    "text": "We have implemented this with the new MPSGraph API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1646"
  },
  {
    "text": "The error tolerance can be controlled with this slider. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1650"
  },
  {
    "text": "We have set it to 0.1, as shown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1653"
  },
  {
    "text": "Let's reset this back to the naive clone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1655"
  },
  {
    "text": "Now we start the solver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1657"
  },
  {
    "text": "With this while loop, we converge to the solution image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1660"
  },
  {
    "text": "in about 80 iterations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1663"
  },
  {
    "text": "without me having to specify any iteration count. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1664"
  },
  {
    "text": "Now let's have some fun ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1668"
  },
  {
    "text": "by cloning other animals onto this background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1669"
  },
  {
    "text": "Let's try this cute puppy.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1672"
  },
  {
    "text": "All right, done tracing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1676"
  },
  {
    "text": "I think it would look great at the bottom right ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1678"
  },
  {
    "text": "of this image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1679"
  },
  {
    "text": "Maybe we can try a bird next.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1683"
  },
  {
    "text": "This would look good on the top right of the background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1687"
  },
  {
    "text": "The new background with all these images looks pretty neat. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1691"
  },
  {
    "text": "That's it for the demo.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1694"
  },
  {
    "text": "In summary, we showed how adopting MPSGraph ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1697"
  },
  {
    "text": "led to amazing performance improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1700"
  },
  {
    "text": "for CoreML and TensorFlow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1703"
  },
  {
    "text": "Inference is now up to twice as fast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1705"
  },
  {
    "text": "We introduced useful new compute primitives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1709"
  },
  {
    "text": "including the stencil operator that is going to enable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1711"
  },
  {
    "text": "a wide range of applications.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1714"
  },
  {
    "text": "We showed new compilation flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1717"
  },
  {
    "text": "that MPSGraph offers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1719"
  },
  {
    "text": "This is going to shave off latency from inference networks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1721"
  },
  {
    "text": "And finally, we showed all new ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1725"
  },
  {
    "text": "control flow capabilities of MPSGraph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1727"
  },
  {
    "text": "This API is key to expressing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1730"
  },
  {
    "text": "several linear algebra applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1733"
  },
  {
    "text": "in addition to machine learning networks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1735"
  },
  {
    "text": "We are excited to see how you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1738"
  },
  {
    "text": "will take advantage of these features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1740"
  },
  {
    "text": "Thank you, and have a great WWDC 2021. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1742"
  },
  {
    "text": "[upbeat music]",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10152/?time=1746"
  }
]