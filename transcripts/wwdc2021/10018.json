[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=7"
  },
  {
    "text": "Matt Ricketson: Welcome to “What’s New in SwiftUI.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=9"
  },
  {
    "text": "I’m Matt, and later on, I’ll be joined by Taylor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=12"
  },
  {
    "text": "This session is all about SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=15"
  },
  {
    "text": "Apple’s declarative UI framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=18"
  },
  {
    "text": "SwiftUI is still young, but we’ve come so far already. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=20"
  },
  {
    "text": "SwiftUI was first released in 2019, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=25"
  },
  {
    "text": "introducing a powerful new way to build user interfaces ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=28"
  },
  {
    "text": "in a declarative, state-driven style. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=32"
  },
  {
    "text": "We took the next big step with SwiftUI’s second release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=36"
  },
  {
    "text": "enabling 100 percent SwiftUI apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=39"
  },
  {
    "text": "with the new App and Scene APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=42"
  },
  {
    "text": "This year we’re focused on supporting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=46"
  },
  {
    "text": "even deeper adoption of SwiftUI in your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=48"
  },
  {
    "text": "with a great set of rich new features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=51"
  },
  {
    "text": "Now if you haven’t yet had a chance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=55"
  },
  {
    "text": "to try out SwiftUI yourself, that’s OK! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=57"
  },
  {
    "text": "Only you know what’s best for your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=60"
  },
  {
    "text": "But here are a few tips to keep in mind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=64"
  },
  {
    "text": "as you learn about all the new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=66"
  },
  {
    "text": "available this year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=68"
  },
  {
    "text": "A good way to dip your toes into SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=70"
  },
  {
    "text": "is to use it to create brand-new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=72"
  },
  {
    "text": "in an existing app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=75"
  },
  {
    "text": "like how it powers the new activity stream in Notes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=76"
  },
  {
    "text": "for iOS, iPadOS, and macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=79"
  },
  {
    "text": "Or the new avatar picker in macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=83"
  },
  {
    "text": "also built with SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=85"
  },
  {
    "text": "Remember, you can mix in SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=88"
  },
  {
    "text": "alongside your existing UIKit or AppKit code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=91"
  },
  {
    "text": "SwiftUI is also a useful tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=96"
  },
  {
    "text": "for expanding your app to new platforms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=98"
  },
  {
    "text": "like how SwiftUI was used to build ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=100"
  },
  {
    "text": "the new Shortcuts app on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=102"
  },
  {
    "text": "With SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=104"
  },
  {
    "text": "you can easily share common code between platforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=106"
  },
  {
    "text": "while still crafting a unique experience for each device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=109"
  },
  {
    "text": "And when you’re ready to redesign your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=114"
  },
  {
    "text": "that’s the perfect time to bring in SwiftUI to help. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=116"
  },
  {
    "text": "The all-new Apple Pay purchase flow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=119"
  },
  {
    "text": "was redesigned using SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=121"
  },
  {
    "text": "which was also used to bring a fresh coat of paint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=123"
  },
  {
    "text": "to the new Help Viewer on macOS and the Tips app on watchOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=126"
  },
  {
    "text": "And finally, we can’t forget ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=132"
  },
  {
    "text": "the gorgeous new Weather app for iOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=134"
  },
  {
    "text": "also rebuilt from the ground up in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=137"
  },
  {
    "text": "These are just several examples of how SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=141"
  },
  {
    "text": "is helping build the next generation of apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=144"
  },
  {
    "text": "For this session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=148"
  },
  {
    "text": "we’d like to share some of the great new APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=149"
  },
  {
    "text": "that made it all possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=152"
  },
  {
    "text": "We’ll start by walking through improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=154"
  },
  {
    "text": "to how we build collections of content with lists and grids. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=156"
  },
  {
    "text": "Next, we’ll go beyond lists, introducing new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=160"
  },
  {
    "text": "to take your data-driven apps to the next level. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=163"
  },
  {
    "text": "Third, we’ll show off some stunning new tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=168"
  },
  {
    "text": "for driving graphics and visual effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=171"
  },
  {
    "text": "We’ll talk about enhancements to text, keyboards, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=174"
  },
  {
    "text": "and focus-based navigation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=177"
  },
  {
    "text": "And finally, we’ll give some love to buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=179"
  },
  {
    "text": "So let’s dive in, beginning with lists and grids, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=183"
  },
  {
    "text": "which are critical features for organizing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=187"
  },
  {
    "text": "and displaying data within SwiftUI apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=189"
  },
  {
    "text": "This year, we’re making it even easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=193"
  },
  {
    "text": "to write rich, interactive lists and grids. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=195"
  },
  {
    "text": "Let’s start with a fun one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=200"
  },
  {
    "text": "SwiftUI now has built-in support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=202"
  },
  {
    "text": "for loading images asynchronously. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=205"
  },
  {
    "text": "SwiftUI makes loading these images feel easy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=208"
  },
  {
    "text": "with the new AsyncImage view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=211"
  },
  {
    "text": "Just give it a URL, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=214"
  },
  {
    "text": "and SwiftUI will automatically fetch and display ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=215"
  },
  {
    "text": "the remote image for you, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=218"
  },
  {
    "text": "and even provide a default placeholder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=219"
  },
  {
    "text": "AsyncImage can also be customized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=223"
  },
  {
    "text": "For example, we can add modifiers to the loaded image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=225"
  },
  {
    "text": "and also define custom placeholders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=228"
  },
  {
    "text": "like I’m doing here to add some fun colors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=231"
  },
  {
    "text": "We can even add custom animations and error handling! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=235"
  },
  {
    "text": "And AsyncImage is available on all platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=238"
  },
  {
    "text": "We hope you check it out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=242"
  },
  {
    "text": "AsyncImage loads its content immediately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=245"
  },
  {
    "text": "but sometimes your app needs to load content on-request, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=248"
  },
  {
    "text": "like when showing a feed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=252"
  },
  {
    "text": "This is a great use case for supporting pull-to-refresh ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=254"
  },
  {
    "text": "on iOS and iPadOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=257"
  },
  {
    "text": "using the new refreshable modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=260"
  },
  {
    "text": "This modifier configures a refresh action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=263"
  },
  {
    "text": "and passes down through the environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=266"
  },
  {
    "text": "Lists on iOS and iPadOS use this action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=269"
  },
  {
    "text": "to automatically add pull-to-refresh, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=272"
  },
  {
    "text": "but you can also use it to build ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=274"
  },
  {
    "text": "your own custom refresh behaviors. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=276"
  },
  {
    "text": "You may have noticed this new await keyword, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=280"
  },
  {
    "text": "which is one of the new concurrency language features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=283"
  },
  {
    "text": "in Swift 5.5. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=285"
  },
  {
    "text": "This indicates that the updateItems method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=287"
  },
  {
    "text": "is an async action, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=290"
  },
  {
    "text": "which lets us refresh our list without blocking the UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=292"
  },
  {
    "text": "Another new concurrency-related SwiftUI feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=296"
  },
  {
    "text": "is the task modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=299"
  },
  {
    "text": "This API lets you attach an async task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=302"
  },
  {
    "text": "to the lifetime of your view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=304"
  },
  {
    "text": "That means the task will kick off when the view first loads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=307"
  },
  {
    "text": "and automatically cancel itself when the view is removed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=310"
  },
  {
    "text": "This is a great way for us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=314"
  },
  {
    "text": "to load the first batch of photos automatically. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=316"
  },
  {
    "text": "These new concurrency modifiers look simple on the surface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=319"
  },
  {
    "text": "but can be used to build sophisticated async behaviors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=323"
  },
  {
    "text": "into your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=326"
  },
  {
    "text": "For example, here I’ve set up a task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=328"
  },
  {
    "text": "for loading the newest photos as they become available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=330"
  },
  {
    "text": "I’ve written just a regular for loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=335"
  },
  {
    "text": "but you’ll notice the await keyword used here as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=337"
  },
  {
    "text": "That’s because newestCandidates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=341"
  },
  {
    "text": "is actually an async sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=343"
  },
  {
    "text": "which is another new concurrency feature in Swift 5.5. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=345"
  },
  {
    "text": "This means we’ll wait for the newest candidate asynchronously, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=349"
  },
  {
    "text": "iterating the loop only when the next candidate is available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=352"
  },
  {
    "text": "That means we’re actually packing a ton of functionality ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=357"
  },
  {
    "text": "into just this single modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=359"
  },
  {
    "text": "The view starts a task that listens for candidates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=362"
  },
  {
    "text": "asynchronously as soon as it appears, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=365"
  },
  {
    "text": "updating the list every time a new candidate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=367"
  },
  {
    "text": "becomes available and then automatically canceling the task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=370"
  },
  {
    "text": "when the view disappears, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=373"
  },
  {
    "text": "all without blocking our app’s UI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=375"
  },
  {
    "text": "There’s a lot more to learn about Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=378"
  },
  {
    "text": "and how to take advantage of it in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=380"
  },
  {
    "text": "so we’ve prepared a few other talks to dig into the details. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=382"
  },
  {
    "text": "“Discover concurrency in SwiftUI” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=386"
  },
  {
    "text": "will explain how concurrency relates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=388"
  },
  {
    "text": "to SwiftUI’s update model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=390"
  },
  {
    "text": "and demo some the new features we just discussed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=392"
  },
  {
    "text": "And in “Swift concurrency: Update a sample app,” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=395"
  },
  {
    "text": "we walk you step by step through upgrading an existing project ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=398"
  },
  {
    "text": "with async model code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=402"
  },
  {
    "text": "Next up, we’re giving you new and better ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=405"
  },
  {
    "text": "to build interactivity into your list content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=408"
  },
  {
    "text": "In this example, I’ve written a simple list ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=411"
  },
  {
    "text": "for sharing the directions to my super secret hideout. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=414"
  },
  {
    "text": "This looks nice, but the text isn’t editable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=418"
  },
  {
    "text": "Let’s fix that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=420"
  },
  {
    "text": "We can make text editable by swapping it out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=422"
  },
  {
    "text": "for a text field instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=424"
  },
  {
    "text": "However, a text field requires a binding to the text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=427"
  },
  {
    "text": "Within our list’s content closure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=430"
  },
  {
    "text": "we’re only given a plain value for each element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=432"
  },
  {
    "text": "in our collection, not a binding. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=435"
  },
  {
    "text": "In situations like this, it can be tricky to figure out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=438"
  },
  {
    "text": "how to get a binding to the collection element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=441"
  },
  {
    "text": "for each row. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=444"
  },
  {
    "text": "One common approach is to iterate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=446"
  },
  {
    "text": "over the indices of the collection instead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=448"
  },
  {
    "text": "using a subscript to get a binding to the element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=450"
  },
  {
    "text": "at that index. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=453"
  },
  {
    "text": "However, this technique is not recommended, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=455"
  },
  {
    "text": "because SwiftUI will be forced to reload the entire list ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=458"
  },
  {
    "text": "when anything changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=462"
  },
  {
    "text": "In fact, we’ve prepared a whole talk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=465"
  },
  {
    "text": "discussing this topic in much more detail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=467"
  },
  {
    "text": "To learn more, I’d recommend watching “Demystify SwiftUI.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=470"
  },
  {
    "text": "For now, let’s undo these changes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=474"
  },
  {
    "text": "and take a look at a better solution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=476"
  },
  {
    "text": "This year, SwiftUI is providing a much easier way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=479"
  },
  {
    "text": "to get access to bindings for individual elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=483"
  },
  {
    "text": "within a collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=485"
  },
  {
    "text": "Simply pass a binding to your collection into the list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=488"
  },
  {
    "text": "using the normal dollar sign operator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=491"
  },
  {
    "text": "and SwiftUI will pass back a binding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=494"
  },
  {
    "text": "to each individual element within the closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=496"
  },
  {
    "text": "Code that only needs to read the value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=499"
  },
  {
    "text": "can stay exactly the same as before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=502"
  },
  {
    "text": "just like you’re used to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=504"
  },
  {
    "text": "But now we can easily add interactive controls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=506"
  },
  {
    "text": "like a text field using the normal binding syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=509"
  },
  {
    "text": "that we’re used to, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=512"
  },
  {
    "text": "which means I can finally fill in the super secret door code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=514"
  },
  {
    "text": "I forgot to include earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=518"
  },
  {
    "text": "This new syntax is part of the Swift language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=520"
  },
  {
    "text": "so it works everywhere you would expect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=523"
  },
  {
    "text": "not just lists. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=525"
  },
  {
    "text": "For example, we can use the same technique ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=526"
  },
  {
    "text": "in a ForEach view within our list instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=528"
  },
  {
    "text": "And better yet, you can even back-deploy this code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=531"
  },
  {
    "text": "to any prior release supported by SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=534"
  },
  {
    "text": "But we’re not just making your existing code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=538"
  },
  {
    "text": "easier to write. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=540"
  },
  {
    "text": "Lists are gaining some great new features too! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=541"
  },
  {
    "text": "Let’s start with some new ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=544"
  },
  {
    "text": "to visually customize your lists. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=546"
  },
  {
    "text": "With the new listRowSeparatorTint modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=548"
  },
  {
    "text": "you can change the color of individual row separators, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=552"
  },
  {
    "text": "like I’ve done here to align the separator and icon colors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=555"
  },
  {
    "text": "for each row. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=558"
  },
  {
    "text": "SwiftUI also has an equivalent modifier for section separators. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=559"
  },
  {
    "text": "For this app though, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=563"
  },
  {
    "text": "all those separators seem a little distracting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=564"
  },
  {
    "text": "I want my directions to feel like a single, unified flow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=567"
  },
  {
    "text": "Maybe we should try removing them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=571"
  },
  {
    "text": "which we can now do ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=573"
  },
  {
    "text": "with the new listRowSeparator modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=574"
  },
  {
    "text": "configuring our separators to be hidden. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=576"
  },
  {
    "text": "Now our directions feel much less cluttered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=579"
  },
  {
    "text": "Let’s look at another app I’m making...",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=582"
  },
  {
    "text": "...which helps comic book authors keep track ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=587"
  },
  {
    "text": "of all their superheroes and villains. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=589"
  },
  {
    "text": "This app uses swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=592"
  },
  {
    "text": "to quickly and conveniently pin and delete characters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=594"
  },
  {
    "text": "but without cluttering up our UI with extra controls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=597"
  },
  {
    "text": "New this year, SwiftUI allows you to define ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=602"
  },
  {
    "text": "completely custom swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=604"
  },
  {
    "text": "using the new swipeActions modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=606"
  },
  {
    "text": "You configure swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=609"
  },
  {
    "text": "just like any other kind of menu in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=610"
  },
  {
    "text": "defining actions using buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=613"
  },
  {
    "text": "You can also customize their color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=615"
  },
  {
    "text": "by adding the new tint modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=617"
  },
  {
    "text": "which I’m using to make my pin action yellow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=619"
  },
  {
    "text": "By default, SwiftUI shows swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=622"
  },
  {
    "text": "on the trailing edge of the row. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=624"
  },
  {
    "text": "But you can switch them to the leading side ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=627"
  },
  {
    "text": "using modifier’s edge parameter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=629"
  },
  {
    "text": "You can even support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=632"
  },
  {
    "text": "both leading and trailing swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=633"
  },
  {
    "text": "by adding multiple modifiers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=636"
  },
  {
    "text": "with different edge configurations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=638"
  },
  {
    "text": "And lastly, the swipeActions modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=640"
  },
  {
    "text": "is available on every platform that supports them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=642"
  },
  {
    "text": "making it easy to share code within your multiplatform app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=645"
  },
  {
    "text": "Speaking of other platforms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=649"
  },
  {
    "text": "let’s check in on the macOS version of my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=651"
  },
  {
    "text": "It shows a multicolumn interface, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=653"
  },
  {
    "text": "which makes use of the extra space ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=656"
  },
  {
    "text": "available on the Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=658"
  },
  {
    "text": "Instead of cramming all of my data into the sidebar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=659"
  },
  {
    "text": "I have an overview tab that lists all of my characters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=662"
  },
  {
    "text": "That lets me just keep my pinned characters ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=665"
  },
  {
    "text": "in the sidebar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=667"
  },
  {
    "text": "This list does feel a little plain though. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=669"
  },
  {
    "text": "Let’s try to spruce it up a bit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=671"
  },
  {
    "text": "Here’s my existing code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=673"
  },
  {
    "text": "I’m currently using the inset list style ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=675"
  },
  {
    "text": "to smoothly fit the list within my window. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=677"
  },
  {
    "text": "And we’re able to express this style beautifully in code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=680"
  },
  {
    "text": "using the new enum-like syntax available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=683"
  },
  {
    "text": "on all view styles this year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=686"
  },
  {
    "text": "Also new this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=689"
  },
  {
    "text": "the inset list style is gaining a new trick. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=690"
  },
  {
    "text": "It is now able to alternate the backgrounds of the rows ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=693"
  },
  {
    "text": "by just modifying the style ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=697"
  },
  {
    "text": "with the alternatesRowBackgrounds flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=698"
  },
  {
    "text": "Our list is looking a lot better now, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=701"
  },
  {
    "text": "with each row clearly distinguished from the other. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=703"
  },
  {
    "text": "But for a macOS app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=706"
  },
  {
    "text": "it still feels like we’re not taking full advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=708"
  },
  {
    "text": "of all that space in our window. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=711"
  },
  {
    "text": "So for the next section, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=713"
  },
  {
    "text": "let’s go beyond lists to get even more out of your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=714"
  },
  {
    "text": "To help us make better use of all this space, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=718"
  },
  {
    "text": "let’s upgrade our list to a rich, multicolumn table! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=720"
  },
  {
    "text": "With four columns, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=725"
  },
  {
    "text": "I now get four lists for the price of one! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=726"
  },
  {
    "text": "But the best part is that a moderately complex table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=729"
  },
  {
    "text": "like this can be declared with so little code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=732"
  },
  {
    "text": "it fits on a single slide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=735"
  },
  {
    "text": "That’s because tables use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=738"
  },
  {
    "text": "the same kind of declarative construction that you’re used to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=739"
  },
  {
    "text": "throughout SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=742"
  },
  {
    "text": "Just like with lists, you can create a table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=743"
  },
  {
    "text": "from a single collection of content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=745"
  },
  {
    "text": "But unlike a list, a table is made up of TableColumns ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=748"
  },
  {
    "text": "that define content within each visual column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=752"
  },
  {
    "text": "Each of these columns are visually labeled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=756"
  },
  {
    "text": "and use data from the collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=758"
  },
  {
    "text": "to define their visual content with some shorthand conveniences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=760"
  },
  {
    "text": "for common cases like just displaying text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=764"
  },
  {
    "text": "But tables are also interactive, supporting row selection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=766"
  },
  {
    "text": "both for single rows and multiple rows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=770"
  },
  {
    "text": "just like in regular lists. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=773"
  },
  {
    "text": "Tables also support sorting with the help of key paths ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=776"
  },
  {
    "text": "to sortable values on the columns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=779"
  },
  {
    "text": "Now, tables support several other features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=782"
  },
  {
    "text": "including multiple different visual styles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=784"
  },
  {
    "text": "as well as fine-tuning the appearance of each column. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=787"
  },
  {
    "text": "But let’s talk more about the data you provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=790"
  },
  {
    "text": "to a table or list. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=792"
  },
  {
    "text": "This year, we have several new enhancements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=794"
  },
  {
    "text": "to SwiftUI’s support for CoreData fetch requests. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=795"
  },
  {
    "text": "FetchRequests now provide a binding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=799"
  },
  {
    "text": "to their sort descriptors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=801"
  },
  {
    "text": "which we can pass on to the Table, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=803"
  },
  {
    "text": "allowing us to write a fully Core Data-driven table, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=805"
  },
  {
    "text": "complete with selection and sortable columns, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=809"
  },
  {
    "text": "in just a few lines of code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=811"
  },
  {
    "text": "SwiftUI now also offers a sectioned fetch request, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=813"
  },
  {
    "text": "allowing for complex, multisection lists ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=816"
  },
  {
    "text": "like the one on the right to be driven from a single request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=820"
  },
  {
    "text": "In this example, we partition our data into sections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=824"
  },
  {
    "text": "based on whether or not they're pinned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=827"
  },
  {
    "text": "We use multiple SortDescriptors to arrange the data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=829"
  },
  {
    "text": "first to split it into pinned and unpinned sections, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=833"
  },
  {
    "text": "and second to order ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=836"
  },
  {
    "text": "recently modified characters last. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=837"
  },
  {
    "text": "Next we specify that any changes should be animated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=840"
  },
  {
    "text": "And finally we construct ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=843"
  },
  {
    "text": "the sections and rows of our list dynamically, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=845"
  },
  {
    "text": "based on the results of the request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=848"
  },
  {
    "text": "All together, this single request ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=852"
  },
  {
    "text": "is able to drive the animated list on the right. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=854"
  },
  {
    "text": "For more information on building apps for macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=858"
  },
  {
    "text": "working with tables, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=860"
  },
  {
    "text": "and integrating Core Data with SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=862"
  },
  {
    "text": "be sure to check out these other talks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=864"
  },
  {
    "text": "The “SwiftUI on the Mac” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=868"
  },
  {
    "text": "two-part series will take you step-by-step ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=869"
  },
  {
    "text": "through building an app that’s optimized for the Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=871"
  },
  {
    "text": "And “Bring Core Data concurrency to Swift and SwiftUI” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=875"
  },
  {
    "text": "will cover the new Core Data fetch request APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=878"
  },
  {
    "text": "in much more detail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=881"
  },
  {
    "text": "Now it’s time to step back and think about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=884"
  },
  {
    "text": "how we can help users find what they need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=886"
  },
  {
    "text": "amidst all of this data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=888"
  },
  {
    "text": "Of course, I’m talking about search. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=890"
  },
  {
    "text": "Search is a critical part of all of our platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=894"
  },
  {
    "text": "It helps users find what they need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=897"
  },
  {
    "text": "exactly when they need it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=899"
  },
  {
    "text": "You’ll find it on large devices like the Apple TV, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=901"
  },
  {
    "text": "even all the way down to the smallest devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=904"
  },
  {
    "text": "like the Apple Watch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=906"
  },
  {
    "text": "So since search is a multiplatform problem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=908"
  },
  {
    "text": "it needs a multiplatform solution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=911"
  },
  {
    "text": "that can scale across all these devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=913"
  },
  {
    "text": "Luckily, adding search to your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=916"
  },
  {
    "text": "couldn’t be easier; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=918"
  },
  {
    "text": "just add the searchable modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=919"
  },
  {
    "text": "like we’ve done here on our NavigationView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=921"
  },
  {
    "text": "With this one modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=924"
  },
  {
    "text": "SwiftUI will automatically add a search field ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=925"
  },
  {
    "text": "to the appropriate location in your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=928"
  },
  {
    "text": "and optionally show suggestions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=930"
  },
  {
    "text": "in a platform- and context-appropriate way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=933"
  },
  {
    "text": "The modifier takes a binding to the search text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=935"
  },
  {
    "text": "allowing you to filter your data based on the current value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=938"
  },
  {
    "text": "Now, there is a lot more to say about search in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=941"
  },
  {
    "text": "but luckily we have a whole session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=945"
  },
  {
    "text": "to walk you through how to think about search capabilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=946"
  },
  {
    "text": "on multiple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=949"
  },
  {
    "text": "Check out “Craft search experiences in SwiftUI” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=951"
  },
  {
    "text": "to learn more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=954"
  },
  {
    "text": "So far we’ve explored how to load, display, organize, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=955"
  },
  {
    "text": "and search through your app’s data using lists and grids. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=959"
  },
  {
    "text": "Now let’s talk about how to share that data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=964"
  },
  {
    "text": "beyond your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=966"
  },
  {
    "text": "One of the simplest methods of sharing data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=968"
  },
  {
    "text": "is by just dragging it out of your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=970"
  },
  {
    "text": "In my Heroes & Villains app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=973"
  },
  {
    "text": "I’ve configured the character icon on the detail screen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=975"
  },
  {
    "text": "to be draggable using the existing onDrag modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=978"
  },
  {
    "text": "New this year, you can now add custom previews ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=981"
  },
  {
    "text": "to your draggable views. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=984"
  },
  {
    "text": "This preview is shown instead of the view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=986"
  },
  {
    "text": "while it’s being dragged. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=989"
  },
  {
    "text": "Drag and drop is powered by item providers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=992"
  },
  {
    "text": "which allow data to be copied and shared ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=995"
  },
  {
    "text": "between different processes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=997"
  },
  {
    "text": "This year, SwiftUI is providing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=999"
  },
  {
    "text": "several more ways to use item providers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1001"
  },
  {
    "text": "to integrate with other apps and services ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1005"
  },
  {
    "text": "such as configuring your app to support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1008"
  },
  {
    "text": "importing item providers from external services, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1010"
  },
  {
    "text": "using the new importsItemProviders modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1013"
  },
  {
    "text": "In this example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1017"
  },
  {
    "text": "we’ve configured our view to be able to import images, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1018"
  },
  {
    "text": "and add them as attachments to our story characters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1022"
  },
  {
    "text": "We can pair this capability a new macOS feature: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1025"
  },
  {
    "text": "Continuity Camera. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1029"
  },
  {
    "text": "By adding the “Import from Devices” commands ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1031"
  },
  {
    "text": "to our app’s main menu, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1034"
  },
  {
    "text": "we’re now able to use an iPhone or iPad ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1035"
  },
  {
    "text": "to just take photos to import into our Mac app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1038"
  },
  {
    "text": "Let’s try it out! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1041"
  },
  {
    "text": "The symbol of the View Builder superhero is her trusty hammer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1043"
  },
  {
    "text": "It would be great to attach a picture of it to her profile. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1046"
  },
  {
    "text": "Luckily, I happen to have it right here! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1050"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1054"
  },
  {
    "text": "From within my app, I can access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1056"
  },
  {
    "text": "the “Import from devices” commands in the File menu. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1057"
  },
  {
    "text": "Then, I can choose to take a picture using my iPhone...",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1062"
  },
  {
    "text": "....which automatically opens the Camera app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1069"
  },
  {
    "text": "so we can quickly take a picture.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1071"
  },
  {
    "text": "And the new photo is imported and added to my app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1076"
  },
  {
    "text": "using the importsItemProviders modifier we showed earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1078"
  },
  {
    "text": "SwiftUI also supports exporting data out of our app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1083"
  },
  {
    "text": "Exporting data allows you to take advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1087"
  },
  {
    "text": "of other services, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1089"
  },
  {
    "text": "such as being able to trigger shortcuts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1090"
  },
  {
    "text": "from directly within your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1092"
  },
  {
    "text": "In SwiftUI, you can export data using the new ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1095"
  },
  {
    "text": "exportsItemProviders modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1097"
  },
  {
    "text": "This exposes your app’s data to the rest of the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1100"
  },
  {
    "text": "for example, allowing it to be used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1103"
  },
  {
    "text": "by services and shortcuts on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1105"
  },
  {
    "text": "Let’s take a look at how this appears ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1108"
  },
  {
    "text": "for people using the app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1110"
  },
  {
    "text": "I can now see quick actions show up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1113"
  },
  {
    "text": "in my app’s Services menu ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1115"
  },
  {
    "text": "when I’ve selected one of my pinned characters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1117"
  },
  {
    "text": "This is a handy shortcut for adding a title banner ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1119"
  },
  {
    "text": "to the most recent photo, which I can use to share ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1122"
  },
  {
    "text": "my latest superhero ideas with my friends. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1124"
  },
  {
    "text": "I found this great photo to use for my Stylizer superhero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1128"
  },
  {
    "text": "who happens to also be an adorable dog. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1132"
  },
  {
    "text": "My custom shortcut added this fun banner to the top ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1134"
  },
  {
    "text": "and overlaid the hero’s name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1138"
  },
  {
    "text": "My shortcut also lets me share the photo. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1140"
  },
  {
    "text": "I’d love to get Taylor’s feedback, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1142"
  },
  {
    "text": "since he knows a thing or two about cool graphics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1144"
  },
  {
    "text": "I can just add Taylor as a recipient ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1147"
  },
  {
    "text": "and type in a quick message and send it off! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1149"
  },
  {
    "text": "What do you think, Taylor? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1155"
  },
  {
    "text": "Taylor Kelly: Thank you, Matt. It looks perfect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1157"
  },
  {
    "text": "And it's definitely going to be your new contact photo. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1159"
  },
  {
    "text": "This adorable image is a great segue ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1162"
  },
  {
    "text": "to the next section, Advanced Graphics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1163"
  },
  {
    "text": "There's a bunch of exciting enhancements this year: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1166"
  },
  {
    "text": "from symbol updates, materials and vibrancy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1168"
  },
  {
    "text": "to a powerful new canvas view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1171"
  },
  {
    "text": "First up are symbols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1173"
  },
  {
    "text": "SF Symbols are a great and easy way of adding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1174"
  },
  {
    "text": "beautiful iconography throughout your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1176"
  },
  {
    "text": "Not only are there many new ones this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1179"
  },
  {
    "text": "but they come with several new features to make ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1181"
  },
  {
    "text": "their use in your app even easier and more expressive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1183"
  },
  {
    "text": "There are two new rendering modes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1186"
  },
  {
    "text": "that give you even more control over how symbols are styled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1188"
  },
  {
    "text": "Hierarchical uses the current foreground style ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1191"
  },
  {
    "text": "to color the symbol, just like monochrome, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1194"
  },
  {
    "text": "but automatically adds multiple levels of opacity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1196"
  },
  {
    "text": "to really emphasize the key elements of the symbol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1199"
  },
  {
    "text": "And palette gives you even more fine-grained control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1202"
  },
  {
    "text": "over individual layers of a symbol with custom fills. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1204"
  },
  {
    "text": "Check out \"What's new in SF Symbols\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1208"
  },
  {
    "text": "for more information and design guidance on these new modes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1209"
  },
  {
    "text": "Pairing perfectly with these ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1213"
  },
  {
    "text": "is an update to the set of colors available in SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1214"
  },
  {
    "text": "These colors are optimized ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1217"
  },
  {
    "text": "for all the different configurations they appear in: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1218"
  },
  {
    "text": "light and Dark Mode, specific appearances over blurs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1221"
  },
  {
    "text": "and even the specific platform they’re shown on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1223"
  },
  {
    "text": "In addition to different colors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1226"
  },
  {
    "text": "symbols come in many different shapes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1228"
  },
  {
    "text": "Many symbols have modifiers to show up as filled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1230"
  },
  {
    "text": "circled, and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1232"
  },
  {
    "text": "Previously you had to hardcode these variants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1234"
  },
  {
    "text": "But more than that, you had to know ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1236"
  },
  {
    "text": "which variant was right to use in which context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1238"
  },
  {
    "text": "The iOS Human Interface Guidelines ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1241"
  },
  {
    "text": "describes how in tab bars, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1243"
  },
  {
    "text": "filled variants should be preferred, so you had to ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1244"
  },
  {
    "text": "specifically include that .fill modifier in the name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1247"
  },
  {
    "text": "This year, you don’t have to worry that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1250"
  },
  {
    "text": "SwiftUI will automatically choose the right variant for you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1252"
  },
  {
    "text": "based on the context you use it in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1254"
  },
  {
    "text": "All you have to do is provide the base symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1256"
  },
  {
    "text": "you’d like to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1258"
  },
  {
    "text": "And by not over-specifying ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1260"
  },
  {
    "text": "the exact configuration you want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1261"
  },
  {
    "text": "you also get code that is more reusable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1263"
  },
  {
    "text": "For example, if we run this same code on macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1266"
  },
  {
    "text": "we get the correct variant for that platform: outlines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1269"
  },
  {
    "text": "To learn how to take advantage of this automatic support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1273"
  },
  {
    "text": "in your own custom views, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1275"
  },
  {
    "text": "as well as more symbol enhancements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1276"
  },
  {
    "text": "check out \"SF Symbols in SwiftUI.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1278"
  },
  {
    "text": "There are now a lot of SF Symbols, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1281"
  },
  {
    "text": "so I wanted to build a cool visualizer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1283"
  },
  {
    "text": "to browse through all of them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1285"
  },
  {
    "text": "This is a great use for SwiftUI's new Canvas view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1286"
  },
  {
    "text": "Canvas supports immediate-mode drawing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1290"
  },
  {
    "text": "similar to drawRect from UIKit or AppKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1292"
  },
  {
    "text": "When composing lots of graphical elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1294"
  },
  {
    "text": "that don't need individual tracking or invalidation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1296"
  },
  {
    "text": "this is a great tool. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1299"
  },
  {
    "text": "Here I have a canvas displaying every single SF Symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1301"
  },
  {
    "text": "that comes with the OS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1303"
  },
  {
    "text": "And for all 3166 of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1305"
  },
  {
    "text": "it draws each of them into their own frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1308"
  },
  {
    "text": "Canvas works on every platform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1310"
  },
  {
    "text": "And since Canvas is a view like any other, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1312"
  },
  {
    "text": "we can also attach gestures, accessibility information, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1314"
  },
  {
    "text": "and update it based on state or the environment ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1317"
  },
  {
    "text": "such as adapting to Dark Mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1319"
  },
  {
    "text": "Here, I've added a gesture that lets me set a focalPoint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1323"
  },
  {
    "text": "to zoom in on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1326"
  },
  {
    "text": "And I'll update the frame and opacity of each symbol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1327"
  },
  {
    "text": "based on that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1329"
  },
  {
    "text": "Now I can click and drag around ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1331"
  },
  {
    "text": "and every symbol smoothly updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1333"
  },
  {
    "text": "as the cursor moves around the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1335"
  },
  {
    "text": "We can also make sure this is fully accessible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1338"
  },
  {
    "text": "by taking advantage of a new accessibilityChildren modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1340"
  },
  {
    "text": "What’s so cool is that you reuse the same views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1343"
  },
  {
    "text": "you're used to using in SwiftUI to refine how it comes across ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1346"
  },
  {
    "text": "through accessibility features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1349"
  },
  {
    "text": "In this case, the symbols can now be enumerated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1351"
  },
  {
    "text": "like someone would otherwise browse elements in a list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1353"
  },
  {
    "text": "speaking each element as they navigate through. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1356"
  },
  {
    "text": "This modifier isn’t restricted to just Canvas, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1359"
  },
  {
    "text": "but can be used with any view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1362"
  },
  {
    "text": "to really polish its accessibility experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1363"
  },
  {
    "text": "One final thing we can add to our canvas ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1366"
  },
  {
    "text": "is updating over time, using the new TimelineView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1368"
  },
  {
    "text": "A refinement to make for tvOS is to have that focalPoint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1372"
  },
  {
    "text": "animatedly move around the screen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1374"
  },
  {
    "text": "acting like a screensaver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1376"
  },
  {
    "text": "TimelineView is created with a schedule -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1378"
  },
  {
    "text": "in this case, the animation schedule -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1380"
  },
  {
    "text": "and it provides the current time it's rendering for. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1382"
  },
  {
    "text": "And so we can use that time to update the focalPoint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1385"
  },
  {
    "text": "in the transform, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1387"
  },
  {
    "text": "creating our beautiful symbol screensaver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1389"
  },
  {
    "text": "This TimelineView can do so much more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1391"
  },
  {
    "text": "A really cool feature of the Apple Watch ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1394"
  },
  {
    "text": "is its Always On display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1396"
  },
  {
    "text": "Previously your app would be blurred with the time overlaid ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1397"
  },
  {
    "text": "when it enters the Always On state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1400"
  },
  {
    "text": "And with watchOS 8 your app now dims by default, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1402"
  },
  {
    "text": "and you have more control over how it appears with SwiftUI ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1405"
  },
  {
    "text": "giving you the tools you need, one of which is TimelineView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1408"
  },
  {
    "text": "Once the watch goes into its Always On state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1412"
  },
  {
    "text": "TimelineView can preload the display of your views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1415"
  },
  {
    "text": "at future dates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1417"
  },
  {
    "text": "And as we move into the future, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1419"
  },
  {
    "text": "those view will automatically be displayed onscreen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1421"
  },
  {
    "text": "without ever taking your app from the background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1423"
  },
  {
    "text": "A critical part of this is the TimelineSchedule. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1426"
  },
  {
    "text": "In this example, I'm using the simple everyMinute schedule ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1429"
  },
  {
    "text": "so TimelineView will preload out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1432"
  },
  {
    "text": "the display of each minute on the minute, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1433"
  },
  {
    "text": "showing me the next symbol in the browser. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1436"
  },
  {
    "text": "There are several other kinds of schedules as well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1439"
  },
  {
    "text": "to help suit the needs of your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1441"
  },
  {
    "text": "such as a collection of explicit of dates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1443"
  },
  {
    "text": "which works great for when there will be events ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1445"
  },
  {
    "text": "at specific times. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1447"
  },
  {
    "text": "Now, another important aspect of this mode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1449"
  },
  {
    "text": "is hiding user-sensitive information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1451"
  },
  {
    "text": "since it could be visible to others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1453"
  },
  {
    "text": "I'd really like to keep my favorite symbol private. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1455"
  },
  {
    "text": "And by simply adding the privacySensitive modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1457"
  },
  {
    "text": "it will automatically be redacted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1460"
  },
  {
    "text": "when the watch enters the Always On state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1462"
  },
  {
    "text": "Check out \"What's new in watchOS 8\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1464"
  },
  {
    "text": "for more information on the Always On display and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1466"
  },
  {
    "text": "And this privacy-sensitive modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1469"
  },
  {
    "text": "also works in widgets as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1471"
  },
  {
    "text": "Widgets that are added to the Lock screen will use this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1473"
  },
  {
    "text": "to hide sensitive information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1475"
  },
  {
    "text": "while the device is still locked, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1477"
  },
  {
    "text": "and reveal once the device is unlocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1479"
  },
  {
    "text": "\"Principals of great widgets\" will go into more detail on this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1482"
  },
  {
    "text": "and other ways of building wonderful widgets for your apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1485"
  },
  {
    "text": "Materials are used across all of Apple’s platforms and apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1488"
  },
  {
    "text": "to create beautiful visual effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1491"
  },
  {
    "text": "that really emphasize their content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1493"
  },
  {
    "text": "and now you can create them directly in SwiftUI! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1495"
  },
  {
    "text": "I've been experimenting with adding color and materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1498"
  },
  {
    "text": "to my Symbol Browser, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1500"
  },
  {
    "text": "and I'm adding a material-backed overlay ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1501"
  },
  {
    "text": "to display the number of symbols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1504"
  },
  {
    "text": "Adding a material is as easy as adding a background. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1506"
  },
  {
    "text": "I'm using the ultraThinMaterial, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1509"
  },
  {
    "text": "and can give it any custom shape to fill. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1511"
  },
  {
    "text": "These materials automatically come with the expected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1514"
  },
  {
    "text": "vibrant blending of content on top of them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1516"
  },
  {
    "text": "when using primary, secondary, tertiary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1519"
  },
  {
    "text": "and now even quaternary foreground styles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1521"
  },
  {
    "text": "And emojis are automatically excluded from that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1523"
  },
  {
    "text": "so they look exactly as they should. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1526"
  },
  {
    "text": "On the Mac, system context like sidebars and popovers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1529"
  },
  {
    "text": "automatically have blur material backgrounds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1532"
  },
  {
    "text": "and will also now have that expected vibrant appearance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1535"
  },
  {
    "text": "for the content within them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1537"
  },
  {
    "text": "These new materials work great in conjunction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1539"
  },
  {
    "text": "with the new safeAreaInset modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1541"
  },
  {
    "text": "which allows you to place content ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1544"
  },
  {
    "text": "on top of a scrollable view and have the content position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1545"
  },
  {
    "text": "still start and end as expected. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1548"
  },
  {
    "text": "The \"rich graphics\" session goes into a lot more detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1550"
  },
  {
    "text": "on canvas, materials, and more. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1552"
  },
  {
    "text": "And to wrap it up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1555"
  },
  {
    "text": "complementing new ways to define these beautiful custom views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1556"
  },
  {
    "text": "are a couple of enhancements to SwiftUI previews in Xcode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1559"
  },
  {
    "text": "First is a new preview orientation modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1563"
  },
  {
    "text": "that allows you to specify the orientation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1565"
  },
  {
    "text": "of the iOS device in the previews, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1568"
  },
  {
    "text": "and even mix and match previews across different orientations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1569"
  },
  {
    "text": "And second is a big improvement to how you edit and view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1574"
  },
  {
    "text": "your app's accessibility in previews. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1576"
  },
  {
    "text": "The property editor now has a curated list ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1579"
  },
  {
    "text": "of accessibility modifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1581"
  },
  {
    "text": "making it even easier to polish views' accessibility behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1582"
  },
  {
    "text": "And there is an entirely new way of viewing your previews ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1587"
  },
  {
    "text": "with a new Accessibility Preview tab. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1589"
  },
  {
    "text": "You'll be shown a live, textual representation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1592"
  },
  {
    "text": "of the accessibility elements and their properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1594"
  },
  {
    "text": "This is the same information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1598"
  },
  {
    "text": "that powers accessibility features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1599"
  },
  {
    "text": "but is now presented to you in a format ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1601"
  },
  {
    "text": "that might be more familiar to you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1603"
  },
  {
    "text": "Check out the \"SwiftUI Accessibility\" session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1605"
  },
  {
    "text": "for more information on this and much more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1607"
  },
  {
    "text": "about how to create an amazing accessibility experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1609"
  },
  {
    "text": "for your app! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1612"
  },
  {
    "text": "Now, up next is a range of enhancements to text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1613"
  },
  {
    "text": "text-related controls, and keyboard navigation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1616"
  },
  {
    "text": "Text is so fundamental to every app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1620"
  },
  {
    "text": "It’s one of the main ways your app communicates to people; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1622"
  },
  {
    "text": "it’s often the very first view you write. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1625"
  },
  {
    "text": "And this year, its gaining a lot of new exciting features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1627"
  },
  {
    "text": "from styling to localization, to interactions and formatting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1630"
  },
  {
    "text": "First up is Markdown support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1635"
  },
  {
    "text": "Text can now contain Markdown formatting directly inline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1638"
  },
  {
    "text": "This can be used to add strong emphasis, links -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1641"
  },
  {
    "text": "which can be interacted with -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1645"
  },
  {
    "text": "and even code-style presentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1648"
  },
  {
    "text": "And this is all built on top of the new, powerful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1651"
  },
  {
    "text": "Swift-based AttributedString in Foundation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1653"
  },
  {
    "text": "In addition to Markdown support, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1656"
  },
  {
    "text": "it brings an entire suite of rich, type-safe attributes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1657"
  },
  {
    "text": "and the ability to define your own attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1662"
  },
  {
    "text": "and even use them within Markdown syntax. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1664"
  },
  {
    "text": "For more information on this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1667"
  },
  {
    "text": "and the amazing new Automatic Grammar agreement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1668"
  },
  {
    "text": "check out \"What's new in Foundation.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1670"
  },
  {
    "text": "Importantly, text also localizes its content ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1673"
  },
  {
    "text": "so that people across the world can use your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1676"
  },
  {
    "text": "And this is true of the new Markdown support as well, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1678"
  },
  {
    "text": "allowing language-sensitive attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1681"
  },
  {
    "text": "to be properly localized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1683"
  },
  {
    "text": "Another great improvement to localization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1685"
  },
  {
    "text": "comes from Xcode 13. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1687"
  },
  {
    "text": "It now uses the Swift compiler to generate strings ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1689"
  },
  {
    "text": "and localization catalogs from every use of LocalizedStringKey ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1691"
  },
  {
    "text": "and the new localizedString and attributedString initializers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1695"
  },
  {
    "text": "To learn more about this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1700"
  },
  {
    "text": "and other localization tips and tricks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1701"
  },
  {
    "text": "check out \"Localize Your SwiftUI app.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1703"
  },
  {
    "text": "Now, in addition to these new ways of displaying text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1706"
  },
  {
    "text": "there are new ways of making text even more dynamic. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1708"
  },
  {
    "text": "The first is an important accessibility feature: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1712"
  },
  {
    "text": "Dynamic Type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1714"
  },
  {
    "text": "SwiftUI has supported Dynamic Type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1715"
  },
  {
    "text": "since its inception, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1717"
  },
  {
    "text": "and this year has a new API to allow restricting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1718"
  },
  {
    "text": "the range of type sizes a UI supports ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1720"
  },
  {
    "text": "to keep it from getting too big or too small. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1723"
  },
  {
    "text": "This shows what our header looks like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1727"
  },
  {
    "text": "at the default large size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1728"
  },
  {
    "text": "I personally use Dynamic Type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1730"
  },
  {
    "text": "to get some extra information density into my content, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1732"
  },
  {
    "text": "and this shows how the header stayed the same size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1735"
  },
  {
    "text": "at the small type size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1737"
  },
  {
    "text": "since it's restricted to be, at minimum, the large size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1739"
  },
  {
    "text": "At the other end of the spectrum, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1742"
  },
  {
    "text": "using the accessibility sizes does result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1744"
  },
  {
    "text": "in our header growing larger, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1746"
  },
  {
    "text": "but only up to the extra extra large size. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1747"
  },
  {
    "text": "While macOS doesn't support Dynamic Type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1751"
  },
  {
    "text": "it does support another important text interaction: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1753"
  },
  {
    "text": "selectable text. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1756"
  },
  {
    "text": "This allows people to take action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1758"
  },
  {
    "text": "on noneditable text from your app, and that can ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1759"
  },
  {
    "text": "now be enabled using the textSelection modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1762"
  },
  {
    "text": "That modifier can be applied to any view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1765"
  },
  {
    "text": "and it applies to all the text within it -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1767"
  },
  {
    "text": "in this example, now applying to the text in the header. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1770"
  },
  {
    "text": "And we also introduced this modifier on iOS and iPadOS ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1773"
  },
  {
    "text": "where it enables text to be copied or shared on long-press. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1776"
  },
  {
    "text": "Finally, Foundation's new format-style APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1780"
  },
  {
    "text": "make formatting text so much simpler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1783"
  },
  {
    "text": "yet still allowing precise presentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1785"
  },
  {
    "text": "Here we have a date that applies the default formatting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1788"
  },
  {
    "text": "And this is a variant that displays only the time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1791"
  },
  {
    "text": "as used in the activity list. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1794"
  },
  {
    "text": "And finally, an expanded format ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1796"
  },
  {
    "text": "that allows specifying the exact components to display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1797"
  },
  {
    "text": "Our activity list also featured formatting an array of people ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1801"
  },
  {
    "text": "into a properly localized presentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1804"
  },
  {
    "text": "Let's quickly walk through this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1807"
  },
  {
    "text": "We're mapping our person values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1809"
  },
  {
    "text": "into an array of PersonNameComponents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1811"
  },
  {
    "text": "and formatting it using a list format style. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1814"
  },
  {
    "text": "And for each member in the list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1817"
  },
  {
    "text": "using the PersonNameComponent format with a short style, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1818"
  },
  {
    "text": "showing just the first name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1822"
  },
  {
    "text": "And finally, joining it with an \"and\" conjunction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1824"
  },
  {
    "text": "All together, creating a performant ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1827"
  },
  {
    "text": "and type-safe expression of formatting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1829"
  },
  {
    "text": "that properly handles any number of people. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1831"
  },
  {
    "text": "TextField has also gained support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1834"
  },
  {
    "text": "for these new format styles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1835"
  },
  {
    "text": "allowing you to add editable formatted text ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1837"
  },
  {
    "text": "with a type-safe binding to some underlying value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1839"
  },
  {
    "text": "The new attendee field is bound to a PersonNameComponents value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1842"
  },
  {
    "text": "and it's formatted using the standard name format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1846"
  },
  {
    "text": "This takes care of parsing the input ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1850"
  },
  {
    "text": "and producing the resulting person name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1852"
  },
  {
    "text": "\"What’s new in Foundation\" also goes into detail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1855"
  },
  {
    "text": "on the power of these new format styles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1857"
  },
  {
    "text": "TextField now also supports adding an explicit prompt, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1860"
  },
  {
    "text": "separate from its label, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1863"
  },
  {
    "text": "to let users know what kind of content a field is expecting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1865"
  },
  {
    "text": "And when adding TextField to forms on macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1869"
  },
  {
    "text": "they’ll align their labels similar to other controls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1871"
  },
  {
    "text": "and use the prompt as its placeholder content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1874"
  },
  {
    "text": "Now, the entire point of a text field is adding text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1877"
  },
  {
    "text": "and keyboards are our tool to do that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1880"
  },
  {
    "text": "From software keyboards on iPhone to the iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1883"
  },
  {
    "text": "which supports both software and hardware keyboards, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1886"
  },
  {
    "text": "and of course, macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1890"
  },
  {
    "text": "which always has a hardware keyboard. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1891"
  },
  {
    "text": "This year, there’s several enhancements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1894"
  },
  {
    "text": "to make the experience of using a keyboard even better. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1895"
  },
  {
    "text": "With the new onSubmit modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1898"
  },
  {
    "text": "you can easily add supplementary actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1900"
  },
  {
    "text": "for when the field’s text is submitted by the user, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1902"
  },
  {
    "text": "such as by pressing the Return key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1905"
  },
  {
    "text": "This modifier provides some extra flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1907"
  },
  {
    "text": "in that it can even be applied to an entire form of controls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1909"
  },
  {
    "text": "And to help give users a hint ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1913"
  },
  {
    "text": "of what kind of action will occur ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1915"
  },
  {
    "text": "when submitting a field, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1916"
  },
  {
    "text": "there's the new submitLabel modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1917"
  },
  {
    "text": "On software keyboards, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1920"
  },
  {
    "text": "this will be used as the label for the Return key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1921"
  },
  {
    "text": "And finally, we’ve made it possible to add accessory views ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1924"
  },
  {
    "text": "to the keyboard using the new keyboard toolbar placement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1927"
  },
  {
    "text": "These views will be shown in a toolbar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1930"
  },
  {
    "text": "above the software keyboard on iOS and iPadOS ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1932"
  },
  {
    "text": "or in the Touch Bar on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1935"
  },
  {
    "text": "This is a great way to give users quick access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1938"
  },
  {
    "text": "to actions above the keyboard without dismissing it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1940"
  },
  {
    "text": "to avoid interrupting your app’s editing experience. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1942"
  },
  {
    "text": "Keyboards also serve another important role ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1945"
  },
  {
    "text": "of navigation and focus, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1947"
  },
  {
    "text": "and this functionality exists on every platform; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1950"
  },
  {
    "text": "from using focus on watchOS to direct Digital Crown input, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1953"
  },
  {
    "text": "to using the Siri Remote ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1956"
  },
  {
    "text": "to navigate around content on tvOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1957"
  },
  {
    "text": "For most things, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1960"
  },
  {
    "text": "SwiftUI just takes care of what views are focusable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1961"
  },
  {
    "text": "and how it moves between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1964"
  },
  {
    "text": "But sometimes there are extra refinements you can make ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1966"
  },
  {
    "text": "to create even smoother experiences in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1968"
  },
  {
    "text": "To help with that, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1971"
  },
  {
    "text": "SwiftUI has a new, powerful tool called FocusState. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1972"
  },
  {
    "text": "This is a property wrapper ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1977"
  },
  {
    "text": "that both reflects the state of focus ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1978"
  },
  {
    "text": "and provides precise control over it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1980"
  },
  {
    "text": "At its simplest, it can reflect a Boolean value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1982"
  },
  {
    "text": "This can be tied to a focusable view using the focused modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1986"
  },
  {
    "text": "When that view is focused, the value will be true, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1989"
  },
  {
    "text": "and false when not. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1992"
  },
  {
    "text": "This value can also be written to, to control focus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1993"
  },
  {
    "text": "For instance, in response to someone pressing a button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1996"
  },
  {
    "text": "This example can act as an accelerator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=1999"
  },
  {
    "text": "allowing the user to immediately start typing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2001"
  },
  {
    "text": "after performing a related action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2003"
  },
  {
    "text": "This Boolean version is a convenience for its full form, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2006"
  },
  {
    "text": "which is representing any hashable type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2009"
  },
  {
    "text": "This code is functionally equivalent to the previous slide ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2011"
  },
  {
    "text": "but with some increased flexibility. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2014"
  },
  {
    "text": "Let's walk through it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2016"
  },
  {
    "text": "First, I've defined a simple enumeration of the fields ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2017"
  },
  {
    "text": "that I might want to know are focused. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2020"
  },
  {
    "text": "The FocusState property uses that type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2022"
  },
  {
    "text": "to reflect the current state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2024"
  },
  {
    "text": "It's optional to indicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2026"
  },
  {
    "text": "potentially none of those having focused. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2027"
  },
  {
    "text": "Our focused modifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2029"
  },
  {
    "text": "is still bound to that same focus state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2030"
  },
  {
    "text": "but only when it equals addAttendee. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2032"
  },
  {
    "text": "And finally, when we want to focus that field, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2035"
  },
  {
    "text": "we set our focus state value to addAttendee. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2038"
  },
  {
    "text": "This new flexibility allows adding additional functionality, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2041"
  },
  {
    "text": "such as building the toolbar buttons from before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2044"
  },
  {
    "text": "moving focus between each of the fields, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2046"
  },
  {
    "text": "and reflecting if focus reaches the beginning or the end. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2048"
  },
  {
    "text": "Focus state also provides a great way for iOS apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2051"
  },
  {
    "text": "to dismiss the software keyboard by clearing out its value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2054"
  },
  {
    "text": "If you're interested in learning more about other ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2058"
  },
  {
    "text": "to refine the focus experience in your app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2059"
  },
  {
    "text": "check out this year’s session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2062"
  },
  {
    "text": "\"Direct and reflect focus in SwiftUI.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2063"
  },
  {
    "text": "Last, we’re going to focus in on buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2066"
  },
  {
    "text": "because buttons are important. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2069"
  },
  {
    "text": "We all know what a typical button looks like; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2071"
  },
  {
    "text": "it varies from platform to platform, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2073"
  },
  {
    "text": "and it is one of the simplest ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2075"
  },
  {
    "text": "of allowing people to interact with your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2077"
  },
  {
    "text": "And especially in SwiftUI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2079"
  },
  {
    "text": "buttons are used for a lot of things. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2080"
  },
  {
    "text": "Matt discussed earlier how swipe actions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2083"
  },
  {
    "text": "are composed out of buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2085"
  },
  {
    "text": "And this year, there is a lot new with buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2086"
  },
  {
    "text": "First, SwiftUI now has standard bordered buttons on iOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2091"
  },
  {
    "text": "You can make a button bordered just by adding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2095"
  },
  {
    "text": "a buttonStyle modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2097"
  },
  {
    "text": "like I'm doing with this Add button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2099"
  },
  {
    "text": "Like other style modifiers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2101"
  },
  {
    "text": "this can be added to a group of controls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2103"
  },
  {
    "text": "and applies to all of them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2104"
  },
  {
    "text": "It supports tinting for cases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2106"
  },
  {
    "text": "where you want a specific appearance for a given button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2108"
  },
  {
    "text": "But for this UI, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2110"
  },
  {
    "text": "I like the default appearance that uses the accent color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2111"
  },
  {
    "text": "There's more customization built in as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2115"
  },
  {
    "text": "First up is control size and prominence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2118"
  },
  {
    "text": "I'm using these to customize the buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2121"
  },
  {
    "text": "representing the tags. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2123"
  },
  {
    "text": "They're using the new standard small control size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2125"
  },
  {
    "text": "and have a tint with increased prominence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2127"
  },
  {
    "text": "to really make them stand out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2129"
  },
  {
    "text": "We can use these same modifiers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2132"
  },
  {
    "text": "to create another common kind of button: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2133"
  },
  {
    "text": "these large sized ones now built in to SwiftUI. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2136"
  },
  {
    "text": "By specifying the large control size, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2139"
  },
  {
    "text": "you'll automatically get these beautiful, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2141"
  },
  {
    "text": "rounded rectangle buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2143"
  },
  {
    "text": "And to give them a sense of hierarchy, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2145"
  },
  {
    "text": "I modified the most important one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2147"
  },
  {
    "text": "to have increased prominence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2148"
  },
  {
    "text": "filling it with a high-contrast accent color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2150"
  },
  {
    "text": "And the secondary button can still be tinted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2153"
  },
  {
    "text": "but has a lower contrast. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2155"
  },
  {
    "text": "These buttons have few modifiers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2157"
  },
  {
    "text": "to make them great on the iPad, too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2159"
  },
  {
    "text": "The text labels have a maximum width ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2162"
  },
  {
    "text": "so that the overall button is flexible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2164"
  },
  {
    "text": "but doesn't get comically large. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2165"
  },
  {
    "text": "And the primary button ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2168"
  },
  {
    "text": "has a default action keyboard shortcut, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2170"
  },
  {
    "text": "so when using the app with a keyboard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2172"
  },
  {
    "text": "I can quickly hit the Return key to add this button to my jar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2173"
  },
  {
    "text": "Now, many of this API has already existed on macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2178"
  },
  {
    "text": "making it even easier to build apps for multiple platforms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2181"
  },
  {
    "text": "The one new addition is adding increased prominent tint support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2184"
  },
  {
    "text": "to let you tastefully add these bright buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2188"
  },
  {
    "text": "to your apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2190"
  },
  {
    "text": "Note that nonprominent buttons, like these Add buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2191"
  },
  {
    "text": "do not display any tint since their chrome ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2194"
  },
  {
    "text": "is what indicates their interactivity on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2197"
  },
  {
    "text": "Having learned about prominence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2200"
  },
  {
    "text": "I might be tempted to go and apply that ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2201"
  },
  {
    "text": "to all of my Add buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2202"
  },
  {
    "text": "but it can get overwhelming and confusing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2204"
  },
  {
    "text": "to have so many prominent buttons onscreen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2206"
  },
  {
    "text": "It's best to reserve it for singular primary actions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2209"
  },
  {
    "text": "The lower prominence tint is a great alternative ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2212"
  },
  {
    "text": "for adding a splash of color on iOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2214"
  },
  {
    "text": "Now, my favorite thing about these new button styles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2217"
  },
  {
    "text": "is they automatically have the expected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2219"
  },
  {
    "text": "pressed and disabled states, Dark Mode support, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2221"
  },
  {
    "text": "and of course are fully accessible and compatible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2224"
  },
  {
    "text": "with Dynamic Type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2226"
  },
  {
    "text": "And they help give consistency between apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2228"
  },
  {
    "text": "And buttons' new API doesn't stop here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2231"
  },
  {
    "text": "SwiftUI has also added first-class support for buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2233"
  },
  {
    "text": "with additional semantics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2235"
  },
  {
    "text": "such as marking a button as destructive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2237"
  },
  {
    "text": "which will automatically give them the expected red tint. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2239"
  },
  {
    "text": "One new context this can also be used in ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2243"
  },
  {
    "text": "are confirmation dialogs, which lets users ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2245"
  },
  {
    "text": "confirm actions that have serious impact to their data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2247"
  },
  {
    "text": "On iOS, this shows as an action sheet, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2250"
  },
  {
    "text": "on iPad as a popover, and on macOS as an alert. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2253"
  },
  {
    "text": "SwiftUI automatically handles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2257"
  },
  {
    "text": "following the design sensibilities of each platform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2259"
  },
  {
    "text": "Next, let's talk about buttons that aren't \"capital B\" buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2262"
  },
  {
    "text": "Currently, the app's Add buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2267"
  },
  {
    "text": "just add to the user's default jar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2268"
  },
  {
    "text": "But for avid collectors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2270"
  },
  {
    "text": "I want to support adding to specific jars. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2272"
  },
  {
    "text": "This is a perfect use case for a menu button. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2274"
  },
  {
    "text": "We'll use the same \"Add\" label, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2277"
  },
  {
    "text": "but present a menu of all of the possible jars ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2279"
  },
  {
    "text": "once the button is clicked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2281"
  },
  {
    "text": "However, these menu buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2283"
  },
  {
    "text": "visually carry a lot of prominence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2284"
  },
  {
    "text": "We could hide the indicators ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2287"
  },
  {
    "text": "using a new menuIndicator modifier added this year. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2288"
  },
  {
    "text": "And even without an indicator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2292"
  },
  {
    "text": "this button still presents a menu on click. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2293"
  },
  {
    "text": "But for these buttons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2296"
  },
  {
    "text": "ideally we'd get the best of both worlds: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2297"
  },
  {
    "text": "with a simple single click to add to the default jar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2300"
  },
  {
    "text": "and the flexibility of showing the menu of others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2302"
  },
  {
    "text": "New this year is the ability to customize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2305"
  },
  {
    "text": "a menu's primary action to help with this kind of case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2307"
  },
  {
    "text": "By default, a menu with a primary action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2310"
  },
  {
    "text": "has a two-segmented appearance on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2312"
  },
  {
    "text": "The main part of the button triggers the primary action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2315"
  },
  {
    "text": "in the indicator presenting the menu. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2318"
  },
  {
    "text": "And when the indicator is hidden, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2320"
  },
  {
    "text": "it again looks visually just like the button ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2321"
  },
  {
    "text": "that I started with but has a behavioral distinction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2323"
  },
  {
    "text": "A click triggers the primary action ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2327"
  },
  {
    "text": "and a long-press shows the menu. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2329"
  },
  {
    "text": "And what's great is that this same thing works on iOS, too! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2331"
  },
  {
    "text": "Now these menus give a lot of flexibility, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2334"
  },
  {
    "text": "really catering to how your app needs to use them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2336"
  },
  {
    "text": "Another new example of a control gaining a button style ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2339"
  },
  {
    "text": "is Toggle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2342"
  },
  {
    "text": "This creates a button that when tapped, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2343"
  },
  {
    "text": "visually turns on and off ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2345"
  },
  {
    "text": "and can be used just like any other toggle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2347"
  },
  {
    "text": "And joining these new control styles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2349"
  },
  {
    "text": "is a container that groups related controls; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2351"
  },
  {
    "text": "aptly called ControlGroup. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2354"
  },
  {
    "text": "On iOS, the controls in a group ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2356"
  },
  {
    "text": "are organized a little tighter in the toolbar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2358"
  },
  {
    "text": "And on macOS, there are visual affordances ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2360"
  },
  {
    "text": "indicating the two grouped buttons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2362"
  },
  {
    "text": "And to wrap this all up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2366"
  },
  {
    "text": "naturally all of these things can be composed together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2367"
  },
  {
    "text": "For instance, these standard back/forward buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2370"
  },
  {
    "text": "are a ControlGroup of two menus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2373"
  },
  {
    "text": "Each of these menus have a primaryAction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2375"
  },
  {
    "text": "that is performed when clicked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2377"
  },
  {
    "text": "And once the menu is long-pressed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2379"
  },
  {
    "text": "they'll present their contents. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2381"
  },
  {
    "text": "Now, with just a few additional customizations on buttons ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2384"
  },
  {
    "text": "and these new styles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2387"
  },
  {
    "text": "a lot of flexibility has opened up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2388"
  },
  {
    "text": "on how you can use these controls in your apps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2390"
  },
  {
    "text": "We ran through a lot in this session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2393"
  },
  {
    "text": "and there’s even more that we didn’t have time to cover. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2394"
  },
  {
    "text": "We’re excited for you to take advantage of these new features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2397"
  },
  {
    "text": "in your own SwiftUI apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2399"
  },
  {
    "text": "and adopt SwiftUI in even more places. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2401"
  },
  {
    "text": "Thank you and have a great rest of your 2021! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2404"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10018/?time=2407"
  }
]