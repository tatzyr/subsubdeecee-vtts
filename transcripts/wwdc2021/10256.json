[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=7"
  },
  {
    "text": "Kyle Macomber: Hi, I'm Kyle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=9"
  },
  {
    "text": "The Swift Standard Library team maintains a growing roster ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=11"
  },
  {
    "text": "of open-source packages including Swift ArgumentParser, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=14"
  },
  {
    "text": "Swift Numerics, and Swift System. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=17"
  },
  {
    "text": "Today, we're excited to introduce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=20"
  },
  {
    "text": "two big new additions to the family: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=22"
  },
  {
    "text": "Swift Algorithms and Swift Collections! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=24"
  },
  {
    "text": "Swift Algorithms is an open-source package ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=28"
  },
  {
    "text": "of sequence and collection algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=31"
  },
  {
    "text": "that augments the Swift standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=32"
  },
  {
    "text": "One of the most powerful features of Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=35"
  },
  {
    "text": "is the rich taxonomy of algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=37"
  },
  {
    "text": "that come built in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=39"
  },
  {
    "text": "It takes a little investment to learn the vocabulary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=41"
  },
  {
    "text": "but once you do, it can be striking to discover ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=44"
  },
  {
    "text": "just how many algorithms are hiding in plain sight ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=46"
  },
  {
    "text": "and how much you can improve the quality of your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=49"
  },
  {
    "text": "by adopting them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=52"
  },
  {
    "text": "To see what I mean, let's take a look at some code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=53"
  },
  {
    "text": "from a messaging application that I've been working on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=56"
  },
  {
    "text": "Consider this loop which iterates over the index paths ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=59"
  },
  {
    "text": "for the selected rows in a table view, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=62"
  },
  {
    "text": "collecting all the corresponding messages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=65"
  },
  {
    "text": "for forwarding or deletion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=67"
  },
  {
    "text": "This is just a map. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=70"
  },
  {
    "text": "Using map makes this code clearer to the reader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=74"
  },
  {
    "text": "because it provides extra context ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=76"
  },
  {
    "text": "that the body of the closure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=78"
  },
  {
    "text": "regardless of its length or complexity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=80"
  },
  {
    "text": "is just transforming the input. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=82"
  },
  {
    "text": "Using map also makes this code faster ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=84"
  },
  {
    "text": "because it avoids intermediate allocations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=87"
  },
  {
    "text": "due to array resizing by reserving capacity -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=89"
  },
  {
    "text": "something our raw loop wasn't bothering to do. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=92"
  },
  {
    "text": "Or consider this loop which, if the user taps on an image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=96"
  },
  {
    "text": "iterates the messages in the transcript, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=100"
  },
  {
    "text": "collecting all the attachments for display using Quick Look. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=103"
  },
  {
    "text": "This is just a map and a filter! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=108"
  },
  {
    "text": "In fact, this pattern of filtering out nils ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=111"
  },
  {
    "text": "and mapping to unwrap optionals ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=115"
  },
  {
    "text": "is so common that we have a special name ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=118"
  },
  {
    "text": "and algorithm for it: compactMap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=120"
  },
  {
    "text": "Next, consider this code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=126"
  },
  {
    "text": "I have an array of messages, and I want to transform it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=128"
  },
  {
    "text": "into an array of transcript items. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=131"
  },
  {
    "text": "The tricky thing is that any given message ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=134"
  },
  {
    "text": "might correspond to multiple items in the chat transcript. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=137"
  },
  {
    "text": "Using map here produces an array of arrays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=142"
  },
  {
    "text": "But that's not what I want; I just want a flat array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=145"
  },
  {
    "text": "Does this mean I have to go back to using a raw for loop? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=149"
  },
  {
    "text": "Of course not; we've got another algorithm for that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=153"
  },
  {
    "text": "It's called \"joined\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=157"
  },
  {
    "text": "What it does is join together all the inner arrays ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=159"
  },
  {
    "text": "into a single, flat collection of elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=162"
  },
  {
    "text": "This pattern of mapping and joining is so common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=165"
  },
  {
    "text": "that we define another special kind of map for it: flatMap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=169"
  },
  {
    "text": "Of course, map and filter are just the tip of the iceberg. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=175"
  },
  {
    "text": "Consider this raw loop from the chat detail screen in my app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=179"
  },
  {
    "text": "I want to display the last six photos in a chat, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=183"
  },
  {
    "text": "from newest to oldest. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=185"
  },
  {
    "text": "So I iterate the transcript in reverse -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=188"
  },
  {
    "text": "from newest to oldest -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=190"
  },
  {
    "text": "and if the item is a photo, I add it to the array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=192"
  },
  {
    "text": "And once I have six, I stop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=196"
  },
  {
    "text": "We can express this more concisely ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=199"
  },
  {
    "text": "by chaining together algorithms from the standard library -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=201"
  },
  {
    "text": "reversed, compactMap, and prefix -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=206"
  },
  {
    "text": "to take no more than the first six. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=211"
  },
  {
    "text": "Chaining together algorithms also gives us more flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=215"
  },
  {
    "text": "to express this code more clearly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=218"
  },
  {
    "text": "For example, I find it more natural to think about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=222"
  },
  {
    "text": "this operation in terms of the suffix of the transcript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=225"
  },
  {
    "text": "rather than the prefix of the reversed transcript. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=228"
  },
  {
    "text": "So the chain of algorithms is clearer and more concise ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=232"
  },
  {
    "text": "than the raw loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=235"
  },
  {
    "text": "but how does the performance compare? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=236"
  },
  {
    "text": "If each step in the chain allocates an intermediate array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=238"
  },
  {
    "text": "isn't it going to be slower than the raw loop? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=242"
  },
  {
    "text": "The answer would be yes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=246"
  },
  {
    "text": "if the standard library weren't playing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=248"
  },
  {
    "text": "some clever tricks here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=250"
  },
  {
    "text": "Let's return to the joined algorithm we saw earlier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=253"
  },
  {
    "text": "to take a closer look at what's going on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=255"
  },
  {
    "text": "It turns out joined doesn't actually allocate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=259"
  },
  {
    "text": "and return a new array here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=261"
  },
  {
    "text": "Instead, it returns a FlattenSequence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=263"
  },
  {
    "text": "FlattenSequence is what we call a \"lazy adapter\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=266"
  },
  {
    "text": "For most purposes, it works like an array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=270"
  },
  {
    "text": "but it's just a thin wrapper, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=273"
  },
  {
    "text": "so it's effectively free to create. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=275"
  },
  {
    "text": "And it's lazy, so it processes its elements on demand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=277"
  },
  {
    "text": "rather than doing all the work up front. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=280"
  },
  {
    "text": "Lazy adapters like FlattenSequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=283"
  },
  {
    "text": "are what enable algorithm chains to have competitive performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=285"
  },
  {
    "text": "with raw for loops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=289"
  },
  {
    "text": "Let's return to the detail screen and take a closer look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=291"
  },
  {
    "text": "at our algorithm to compute the last six photos in a chat. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=293"
  },
  {
    "text": "We see that suffix actually just returns an array slice -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=299"
  },
  {
    "text": "that's clever -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=302"
  },
  {
    "text": "and that reversed is also implemented as a lazy adapter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=305"
  },
  {
    "text": "one which intercedes to start at the end ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=309"
  },
  {
    "text": "and end at the start. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=311"
  },
  {
    "text": "What about compactMap? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=314"
  },
  {
    "text": "It's still returning an array. Can that be lazy? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=317"
  },
  {
    "text": "It can. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=320"
  },
  {
    "text": "You just have to add a .lazy to the start of the chain, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=322"
  },
  {
    "text": "and it makes any of the algorithms that take a closure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=325"
  },
  {
    "text": "like map and filter, lazy! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=328"
  },
  {
    "text": "Lazy algorithm chains are a great fit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=331"
  },
  {
    "text": "for use cases like this one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=334"
  },
  {
    "text": "where you're only processing a small number of elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=335"
  },
  {
    "text": "from a potentially very large collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=338"
  },
  {
    "text": "Of course, sometimes you do need or want an array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=341"
  },
  {
    "text": "And in that case, you can always just wrap your algorithm chain ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=345"
  },
  {
    "text": "in an array initializer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=348"
  },
  {
    "text": "This is one more reason why, on the Standard Library team, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=350"
  },
  {
    "text": "we're a big fan of lazy algorithms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=353"
  },
  {
    "text": "It's really easy to turn a lazy algorithm into an eager result, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=355"
  },
  {
    "text": "but it's impossible to go the other way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=359"
  },
  {
    "text": "So I've been making great progress on my messaging app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=362"
  },
  {
    "text": "and my designer approaches me with a feature request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=365"
  },
  {
    "text": "They'd like to include time stamps in the transcript, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=368"
  },
  {
    "text": "if more than an hour has passed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=370"
  },
  {
    "text": "between any two consecutive messages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=372"
  },
  {
    "text": "Seems reasonable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=375"
  },
  {
    "text": "There's got to be another algorithm I can use for this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=376"
  },
  {
    "text": "right? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=378"
  },
  {
    "text": "There is. But to access it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=380"
  },
  {
    "text": "I'm going to need to import the Swift Algorithms package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=382"
  },
  {
    "text": "Every once in a while, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=386"
  },
  {
    "text": "you're going to encounter use cases like these ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=387"
  },
  {
    "text": "that the Swift standard library doesn't have coverage for yet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=390"
  },
  {
    "text": "The purpose of the Algorithms package is to provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=393"
  },
  {
    "text": "a low-friction venue for us -- with your help -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=396"
  },
  {
    "text": "to incubate new families of missing algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=399"
  },
  {
    "text": "for eventual inclusion in the standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=402"
  },
  {
    "text": "We've already added over 40 algorithms to Swift Algorithms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=405"
  },
  {
    "text": "For things like generating all the combinations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=409"
  },
  {
    "text": "or permutations of a collection of elements; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=411"
  },
  {
    "text": "or iterating the elements of a sequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=414"
  },
  {
    "text": "by two or three or in groups determined by a predicate; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=416"
  },
  {
    "text": "or selecting the five smallest elements in a collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=421"
  },
  {
    "text": "the five largest, or just any five at random. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=424"
  },
  {
    "text": "Let's take a closer look at some of the powerful iteration tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=427"
  },
  {
    "text": "that come with Swift Algorithms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=430"
  },
  {
    "text": "windows(ofCount:) provides a sliding window, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=433"
  },
  {
    "text": "here of size 3, into the elements of a collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=436"
  },
  {
    "text": "For each turn of the loop, window is just a subsequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=440"
  },
  {
    "text": "of the base collection -- here an ArraySlice -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=444"
  },
  {
    "text": "which avoids any intermediate allocation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=446"
  },
  {
    "text": "windows(ofCount: 2) are particularly common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=450"
  },
  {
    "text": "and so we have a convenience for it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=452"
  },
  {
    "text": "It's called \"adjacentPairs\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=455"
  },
  {
    "text": "adjacentPairs vends a tuple rather than a subsequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=457"
  },
  {
    "text": "allowing for more convenient element access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=460"
  },
  {
    "text": "Another powerful iteration tool is chunks(ofCount:). ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=464"
  },
  {
    "text": "Unlike windows, chunks don't overlap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=469"
  },
  {
    "text": "If a collection isn't evenly divisible by the chunk count, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=474"
  },
  {
    "text": "the last chunk in the sequence will contain the remainder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=477"
  },
  {
    "text": "And just like windows, chunks are subsequences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=481"
  },
  {
    "text": "of the base collection, so they're cheap to create. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=483"
  },
  {
    "text": "Sometimes you want to chunk a collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=487"
  },
  {
    "text": "into runs of like-elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=488"
  },
  {
    "text": "Here we're chunking on isPrime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=492"
  },
  {
    "text": "This means we'll iterate the chunks of consecutive elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=495"
  },
  {
    "text": "that return the same value for isPrime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=498"
  },
  {
    "text": "For convenience, chunked(on:) vends a tuple of both the chunk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=502"
  },
  {
    "text": "and the value being chunked on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=506"
  },
  {
    "text": "Have you ever found yourself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=509"
  },
  {
    "text": "writing a raw loop like this one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=510"
  },
  {
    "text": "that only does some work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=512"
  },
  {
    "text": "if the previous and current elements differ? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=513"
  },
  {
    "text": "This is just chunked! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=517"
  },
  {
    "text": "Let's return now to that feature request from my designer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=519"
  },
  {
    "text": "to include time stamps in the transcript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=522"
  },
  {
    "text": "whenever more than an hour has passed between messages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=524"
  },
  {
    "text": "If you recall, we create the transcript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=528"
  },
  {
    "text": "by flat mapping over the messages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=530"
  },
  {
    "text": "to make the transcript items. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=532"
  },
  {
    "text": "Well, every transcript item has access to its date. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=535"
  },
  {
    "text": "We can chunk on the date ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=540"
  },
  {
    "text": "to group transcript items together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=542"
  },
  {
    "text": "if less than an hour has passed between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=543"
  },
  {
    "text": "We've already seen how to chunk a collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=547"
  },
  {
    "text": "into runs of like elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=549"
  },
  {
    "text": "Swift Algorithms comes with another variant of chunked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=551"
  },
  {
    "text": "that allows you to provide a custom predicate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=554"
  },
  {
    "text": "It passes you adjacent pairs of elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=557"
  },
  {
    "text": "and you return true if they belong in the same group. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=560"
  },
  {
    "text": "Here, we return true if the time interval ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=564"
  },
  {
    "text": "between transcript items is less than an hour. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=567"
  },
  {
    "text": "Next, we need to create the time stamps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=572"
  },
  {
    "text": "and join everything together into a single, flat collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=574"
  },
  {
    "text": "Earlier, we used joined to flatten a nested collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=579"
  },
  {
    "text": "The standard library comes with another variant of joined ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=584"
  },
  {
    "text": "that can insert a separator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=587"
  },
  {
    "text": "It's really common to use this algorithm to join together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=590"
  },
  {
    "text": "strings with, say, a new line or a comma separator. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=593"
  },
  {
    "text": "However, in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=597"
  },
  {
    "text": "a constant separator isn't sufficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=599"
  },
  {
    "text": "We need access to the first date in the next chunk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=602"
  },
  {
    "text": "in order to construct the time stamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=605"
  },
  {
    "text": "Well, the Algorithms package includes another variant ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=609"
  },
  {
    "text": "of joined that lets you compute the separator ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=612"
  },
  {
    "text": "from the previous and next chunks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=614"
  },
  {
    "text": "We can use that here to join back together ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=618"
  },
  {
    "text": "the chunks of transcript items, now separated by time stamps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=620"
  },
  {
    "text": "Pretty satisfying, huh? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=625"
  },
  {
    "text": "Of course, we don't need to be paying ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=628"
  },
  {
    "text": "for any of these intermediate allocations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=629"
  },
  {
    "text": "All of this can be computed on demand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=633"
  },
  {
    "text": "just by adding a .lazy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=635"
  },
  {
    "text": "Voilà! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=638"
  },
  {
    "text": "I want to caution, though, that laziness is not a silver bullet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=640"
  },
  {
    "text": "When you're only iterating a sequence a single time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=644"
  },
  {
    "text": "computing on demand can save work and avoid allocations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=647"
  },
  {
    "text": "But when you're iterating a sequence again and again -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=651"
  },
  {
    "text": "like I am with the transcript in my messaging app -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=654"
  },
  {
    "text": "computing on demand will repeat the same work over and over -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=656"
  },
  {
    "text": "mapping, chunking, and joining ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=661"
  },
  {
    "text": "every time the user enters edit mode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=662"
  },
  {
    "text": "taps on an image, or visits the detail screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=664"
  },
  {
    "text": "In cases like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=668"
  },
  {
    "text": "you should still use a lazy algorithm chain. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=669"
  },
  {
    "text": "It's just that as a last step, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=671"
  },
  {
    "text": "it'll be more efficient if you save your work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=673"
  },
  {
    "text": "by collecting everything together into an array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=675"
  },
  {
    "text": "We've looked at over a dozen different algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=679"
  },
  {
    "text": "from the Swift standard library and the Algorithms package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=681"
  },
  {
    "text": "All of them work not only on array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=684"
  },
  {
    "text": "but also string, and every other Swift type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=687"
  },
  {
    "text": "that conforms to the sequence and collection protocols -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=689"
  },
  {
    "text": "including every data structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=692"
  },
  {
    "text": "in the new Swift Collections package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=694"
  },
  {
    "text": "Chaining together algorithms makes your code clearer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=697"
  },
  {
    "text": "faster, and more correct. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=700"
  },
  {
    "text": "And becoming proficient at it isn't complicated; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=702"
  },
  {
    "text": "it's just about building your vocabulary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=705"
  },
  {
    "text": "So next time you find yourself reading or writing a raw loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=708"
  },
  {
    "text": "stop and think about if it's a map, a filter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=712"
  },
  {
    "text": "or one of the other algorithms you've just seen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=715"
  },
  {
    "text": "If nothing comes to mind, search the documentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=718"
  },
  {
    "text": "on the sequence and collection protocols, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=721"
  },
  {
    "text": "or read the guides in the Swift Algorithms GitHub repository, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=724"
  },
  {
    "text": "or visit us on the Swift forums ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=728"
  },
  {
    "text": "where we can figure it out together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=729"
  },
  {
    "text": "Who knows, it might serve as the inspiration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=732"
  },
  {
    "text": "for a new addition to the Algorithms package! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=734"
  },
  {
    "text": "Next up, Karoy will teach you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=737"
  },
  {
    "text": "about the versatile data structures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=739"
  },
  {
    "text": "that come with the new Swift Collections package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=741"
  },
  {
    "text": "Karoy? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=744"
  },
  {
    "text": "Karoy Lorentey: Thanks, Kyle! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=745"
  },
  {
    "text": "Let's talk about data structures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=746"
  },
  {
    "text": "As it stands today, the Swift standard library ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=749"
  },
  {
    "text": "implements just three major general-purpose data structures: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=752"
  },
  {
    "text": "it provides arrays, unordered sets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=756"
  },
  {
    "text": "and unordered dictionaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=759"
  },
  {
    "text": "These have proved great choices as universal collection types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=762"
  },
  {
    "text": "and they're especially nice for transferring data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=766"
  },
  {
    "text": "across module boundaries. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=769"
  },
  {
    "text": "They all implement copy-on-write value semantics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=771"
  },
  {
    "text": "providing efficient in-place mutation operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=775"
  },
  {
    "text": "while also ensuring that collection values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=778"
  },
  {
    "text": "are safe to pass around without these mutations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=780"
  },
  {
    "text": "leading to unexpected changes in any of the copies created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=783"
  },
  {
    "text": "However, there are so many more data structures out there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=788"
  },
  {
    "text": "It would be useful to have a larger selection to choose from. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=791"
  },
  {
    "text": "Earlier this year, we released the Swift Collections package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=796"
  },
  {
    "text": "with new data structure implementations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=799"
  },
  {
    "text": "This package lets Swift developers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=802"
  },
  {
    "text": "gain real-life production experience ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=804"
  },
  {
    "text": "with new collection types before we eventually propose them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=807"
  },
  {
    "text": "for inclusion in the Swift standard library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=811"
  },
  {
    "text": "By importing the Swift Collections package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=815"
  },
  {
    "text": "we get access to additional types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=817"
  },
  {
    "text": "The initial version of the package implements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=820"
  },
  {
    "text": "three of the most frequently requested data structures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=822"
  },
  {
    "text": "These happen to be new variations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=826"
  },
  {
    "text": "of the three standard collection types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=828"
  },
  {
    "text": "We have a double-ended queue, an OrderedSet, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=831"
  },
  {
    "text": "and an OrderedDictionary. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=836"
  },
  {
    "text": "These are similar to array, set, and dictionary; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=839"
  },
  {
    "text": "they are variants of the same theme, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=843"
  },
  {
    "text": "adding new features to the existing constructs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=845"
  },
  {
    "text": "That said, these new types aren't replacements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=848"
  },
  {
    "text": "for the existing ones; they are complementary to them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=850"
  },
  {
    "text": "For some use cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=855"
  },
  {
    "text": "the new types will be a better fit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=856"
  },
  {
    "text": "However, for many others, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=858"
  },
  {
    "text": "the existing types continue to be the right choice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=860"
  },
  {
    "text": "In order to know which data structure to reach for, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=863"
  },
  {
    "text": "we need to learn how these differ from the existing types. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=866"
  },
  {
    "text": "So let's take a brief look at each of these, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=870"
  },
  {
    "text": "starting with double-ended queues -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=872"
  },
  {
    "text": "or, rather, queues in general. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=874"
  },
  {
    "text": "Queues pop up everywhere where an arbitrary number of items ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=878"
  },
  {
    "text": "need to be processed one by one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=881"
  },
  {
    "text": "from customers waiting in line in a supermarket ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=884"
  },
  {
    "text": "to asynchronous tasks in an application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=887"
  },
  {
    "text": "In their most abstract form, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=891"
  },
  {
    "text": "queues provide two major operations: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=892"
  },
  {
    "text": "we can push items to the back of the queue, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=895"
  },
  {
    "text": "and we can pop elements off the front.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=899"
  },
  {
    "text": "A double-ended queue makes these queue operations symmetric. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=906"
  },
  {
    "text": "It supports efficiently pushing new items ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=910"
  },
  {
    "text": "to the front of the queue... ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=913"
  },
  {
    "text": "...as well as popping elements off the back.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=916"
  },
  {
    "text": "The name \"double-ended queue\" is quite a mouthful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=923"
  },
  {
    "text": "for such a useful type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=926"
  },
  {
    "text": "so we like to shorten it to \"deque\". ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=927"
  },
  {
    "text": "And to shave off one more syllable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=930"
  },
  {
    "text": "this is traditionally pronounced \"deck\", ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=932"
  },
  {
    "text": "like a deck of cards. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=935"
  },
  {
    "text": "In the Collections package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=937"
  },
  {
    "text": "deque has roughly the same API as the familiar array type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=938"
  },
  {
    "text": "and it implements many of the same protocols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=942"
  },
  {
    "text": "For example, we can use an array literal to create a deque. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=945"
  },
  {
    "text": "Deque conforms to the RandomAccessCollection protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=951"
  },
  {
    "text": "Like array, deque uses integer indices that are offsets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=954"
  },
  {
    "text": "measured from the start of the collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=958"
  },
  {
    "text": "This makes it easy to access any element based on its position. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=960"
  },
  {
    "text": "For example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=964"
  },
  {
    "text": "the element at index 1 in this deque is the letter E. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=966"
  },
  {
    "text": "Now, I'm sure I'm not the only one who is bothered ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=971"
  },
  {
    "text": "by that lowercase f at the end of this collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=974"
  },
  {
    "text": "Luckily, deque conforms to the MutableCollection protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=977"
  },
  {
    "text": "so we can fix this by assigning through the index 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=980"
  },
  {
    "text": "replacing the lowercase f with an uppercase one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=984"
  },
  {
    "text": "Ah, that looks so much better! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=988"
  },
  {
    "text": "Deque also implements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=990"
  },
  {
    "text": "the RangeReplaceableCollection protocol, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=992"
  },
  {
    "text": "so it provides all of the familiar operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=994"
  },
  {
    "text": "for inserting, removing, or replacing subranges of elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=997"
  },
  {
    "text": "For example, we can insert a sequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1002"
  },
  {
    "text": "at the front of our deque by calling ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1004"
  },
  {
    "text": "the insert(contentsOf:) method with an index of zero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1006"
  },
  {
    "text": "How it executes this is where deque starts to differ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1010"
  },
  {
    "text": "from an array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1013"
  },
  {
    "text": "If we used an array to store our items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1015"
  },
  {
    "text": "then inserting new elements at the front ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1018"
  },
  {
    "text": "would need to start by moving the existing elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1021"
  },
  {
    "text": "to make room for the new ones. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1024"
  },
  {
    "text": "To make accesses as simple as possible, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1026"
  },
  {
    "text": "arrays keep their elements in a single contiguous buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1029"
  },
  {
    "text": "starting at the beginning of their storage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1032"
  },
  {
    "text": "If the array is large, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1035"
  },
  {
    "text": "this makes prepending new elements relatively expensive; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1037"
  },
  {
    "text": "so inserting a new element at the front takes time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1041"
  },
  {
    "text": "that is roughly proportional to the number of elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1044"
  },
  {
    "text": "that are already in the array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1047"
  },
  {
    "text": "A deque works differently. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1050"
  },
  {
    "text": "It wraps its storage buffer around its boundaries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1052"
  },
  {
    "text": "so that it can prepend new elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1055"
  },
  {
    "text": "without moving any of the existing ones. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1057"
  },
  {
    "text": "The indices are still offsets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1061"
  },
  {
    "text": "from the logical start of the collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1063"
  },
  {
    "text": "so after the insertion, the element at index 1 is now B. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1066"
  },
  {
    "text": "This means that deques need to do some work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1071"
  },
  {
    "text": "to translate between their logical indices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1074"
  },
  {
    "text": "and their actual storage positions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1076"
  },
  {
    "text": "but accessing elements is still quite efficient. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1079"
  },
  {
    "text": "And because prepending to a deque doesn't involve ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1083"
  },
  {
    "text": "sliding any existing members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1085"
  },
  {
    "text": "they are able to perform this operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1087"
  },
  {
    "text": "radically faster than array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1090"
  },
  {
    "text": "Inserting a new element at the front ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1092"
  },
  {
    "text": "takes a constant amount of time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1094"
  },
  {
    "text": "no matter how many elements are already in the collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1096"
  },
  {
    "text": "This is the power of data structures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1100"
  },
  {
    "text": "Once we have them in our toolbox, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1103"
  },
  {
    "text": "we can use them to solve problems ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1105"
  },
  {
    "text": "that were previously out of reach. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1106"
  },
  {
    "text": "Switching to the right data structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1108"
  },
  {
    "text": "can make all the difference. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1111"
  },
  {
    "text": "It can turn an unusably slow app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1112"
  },
  {
    "text": "into a responsive wonder that is a joy to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1115"
  },
  {
    "text": "Of course, deques can also be clever ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1119"
  },
  {
    "text": "about how they perform operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1121"
  },
  {
    "text": "in the middle of their storage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1123"
  },
  {
    "text": "For instance, when removing a range of elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1126"
  },
  {
    "text": "deque has the option of closing the resulting gap by ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1129"
  },
  {
    "text": "moving the preceding elements rather than the subsequent ones, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1132"
  },
  {
    "text": "and this can reduce the number of elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1136"
  },
  {
    "text": "that need to be moved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1138"
  },
  {
    "text": "This isn't as drastic an improvement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1140"
  },
  {
    "text": "as prepending an element was, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1142"
  },
  {
    "text": "but when we are removing elements at random, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1144"
  },
  {
    "text": "it does make things twice as fast on average. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1147"
  },
  {
    "text": "So, that's deque. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1150"
  },
  {
    "text": "Now, let's take a look at ordered sets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1152"
  },
  {
    "text": "The standard, preexisting set type is a collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1157"
  },
  {
    "text": "that guarantees that all of its elements are unique. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1160"
  },
  {
    "text": "However, it doesn't preserve their original ordering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1163"
  },
  {
    "text": "In fact, the order of elements in a set is effectively random. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1167"
  },
  {
    "text": "This means that two instances of the same set often list them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1173"
  },
  {
    "text": "in two entirely different permutations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1177"
  },
  {
    "text": "Despite this, two sets containing the same elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1183"
  },
  {
    "text": "are considered equal; the order is not significant. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1186"
  },
  {
    "text": "This is great when all we want is to guarantee uniqueness, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1191"
  },
  {
    "text": "but sometimes we also want to be in control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1194"
  },
  {
    "text": "of how the elements are ordered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1197"
  },
  {
    "text": "For example, if we are writing a to-do list app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1199"
  },
  {
    "text": "we may want to ensure that it lists each item only once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1202"
  },
  {
    "text": "but we also need to keep them in the specific order ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1206"
  },
  {
    "text": "set by the user. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1209"
  },
  {
    "text": "So that is what an ordered set does. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1211"
  },
  {
    "text": "Depending on our viewpoint, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1214"
  },
  {
    "text": "it works either like an array that keeps its elements unique, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1216"
  },
  {
    "text": "or we can view it as a set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1219"
  },
  {
    "text": "that preserves the order we establish on its members. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1221"
  },
  {
    "text": "Like arrays and sets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1226"
  },
  {
    "text": "ordered sets are also expressible by array literals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1228"
  },
  {
    "text": "However, unlike a set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1232"
  },
  {
    "text": "the order of elements is guaranteed to be preserved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1234"
  },
  {
    "text": "The order is also significant; two ordered sets compare equal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1238"
  },
  {
    "text": "if they contain not just the same members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1243"
  },
  {
    "text": "but they must also be in the same order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1246"
  },
  {
    "text": "If we just need to know if two ordered sets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1249"
  },
  {
    "text": "contain the same elements, in any order, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1251"
  },
  {
    "text": "then we can compare them through the special unordered view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1254"
  },
  {
    "text": "This lightweight view ignores element ordering, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1257"
  },
  {
    "text": "so it provides a more conventional, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1260"
  },
  {
    "text": "set-like interface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1262"
  },
  {
    "text": "By default, though, ordered sets resemble how arrays work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1265"
  },
  {
    "text": "This is reinforced by the fact that ordered sets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1269"
  },
  {
    "text": "are random access collections with integer offset indices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1271"
  },
  {
    "text": "We can use integer subscripts to access items, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1276"
  },
  {
    "text": "just like in an array or a deque. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1280"
  },
  {
    "text": "As expected from a set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1283"
  },
  {
    "text": "we can also add and remove elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1285"
  },
  {
    "text": "although these operations do need to take the position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1287"
  },
  {
    "text": "into account. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1290"
  },
  {
    "text": "For instance, we have an append operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1292"
  },
  {
    "text": "that adds a new element to the end of the set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1295"
  },
  {
    "text": "if it isn't already a member. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1297"
  },
  {
    "text": "Its return value indicates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1300"
  },
  {
    "text": "whether the element needed to be added, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1302"
  },
  {
    "text": "and it also reports the index of the item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1304"
  },
  {
    "text": "We also have an insert operation that puts the new element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1308"
  },
  {
    "text": "at the specified location. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1311"
  },
  {
    "text": "In this case, the letter B already exists, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1313"
  },
  {
    "text": "so the operation simply returns the index ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1316"
  },
  {
    "text": "of the existing member. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1319"
  },
  {
    "text": "Removing an element leaves a hole in the ordered set, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1321"
  },
  {
    "text": "and the rest of the members need to be moved to fill it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1325"
  },
  {
    "text": "just like in an array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1328"
  },
  {
    "text": "Ordered sets need to keep their elements unique, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1331"
  },
  {
    "text": "so they can't support arbitrary item replacements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1333"
  },
  {
    "text": "This means that unlike arrays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1337"
  },
  {
    "text": "they can't conform to the MutableCollection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1339"
  },
  {
    "text": "or RangeReplaceableCollection protocols. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1341"
  },
  {
    "text": "However, they do support standard reordering operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1344"
  },
  {
    "text": "such as sorting or shuffling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1348"
  },
  {
    "text": "Ordered sets also implement all high-level set operations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1352"
  },
  {
    "text": "from the SetAlgebra protocol, in an order-preserving manner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1356"
  },
  {
    "text": "For example, forming a union appends any missing elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1362"
  },
  {
    "text": "in the order they appear in the second set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1366"
  },
  {
    "text": "Subtracting a set keeps the remaining elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1371"
  },
  {
    "text": "in their original order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1374"
  },
  {
    "text": "Even though the ordered sets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1376"
  },
  {
    "text": "implement most SetAlgebra operations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1378"
  },
  {
    "text": "they cannot officially conform to that protocol ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1381"
  },
  {
    "text": "because it requires that the order of elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1383"
  },
  {
    "text": "must not matter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1386"
  },
  {
    "text": "However, their unordered view ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1388"
  },
  {
    "text": "has an order-insensitive concept of equality. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1390"
  },
  {
    "text": "So it can and does conform to SetAlgebra. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1393"
  },
  {
    "text": "We can use it to pass OrderedSet values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1396"
  },
  {
    "text": "to any function that requires a SetAlgebra value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1399"
  },
  {
    "text": "Looking under the hood, the standard, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1403"
  },
  {
    "text": "unordered set type stores its elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1405"
  },
  {
    "text": "directly in a flat hash table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1408"
  },
  {
    "text": "using a randomly seeded universal hash function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1410"
  },
  {
    "text": "This provides great lookup performance for the elements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1414"
  },
  {
    "text": "but it discards their original ordering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1417"
  },
  {
    "text": "To support arbitrary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1420"
  },
  {
    "text": "user-specified element orderings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1422"
  },
  {
    "text": "an ordered set stores its elements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1424"
  },
  {
    "text": "in a regular array instance, instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1426"
  },
  {
    "text": "Ordered set still uses the same fast ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1430"
  },
  {
    "text": "and secure hash table implementation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1432"
  },
  {
    "text": "but in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1435"
  },
  {
    "text": "the table only needs to store integer indices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1436"
  },
  {
    "text": "into the storage array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1439"
  },
  {
    "text": "The range of these integers is bound by the size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1441"
  },
  {
    "text": "of the hash table, so we can compress the table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1444"
  },
  {
    "text": "by packing the integer values into as few bits as possible. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1446"
  },
  {
    "text": "This can sometimes save a considerable amount of memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1451"
  },
  {
    "text": "compared to a regular set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1455"
  },
  {
    "text": "while still maintaining competitive performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1457"
  },
  {
    "text": "for most operations. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1459"
  },
  {
    "text": "Lookup performance is comparable to the standard set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1462"
  },
  {
    "text": "Finding a random member takes roughly constant time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1465"
  },
  {
    "text": "no matter the size of the collection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1468"
  },
  {
    "text": "Array needs to laboriously look at each element, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1471"
  },
  {
    "text": "which takes longer time as the collection grows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1474"
  },
  {
    "text": "Appending a new element to an ordered set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1478"
  },
  {
    "text": "also performs roughly comparably to inserting an element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1480"
  },
  {
    "text": "into a standard set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1484"
  },
  {
    "text": "This still needs to hash the new item, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1486"
  },
  {
    "text": "and it also includes a check if the element already exists, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1488"
  },
  {
    "text": "so this is a far more complicated operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1491"
  },
  {
    "text": "than directly appending an element to a simple array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1494"
  },
  {
    "text": "But these still take constant time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1497"
  },
  {
    "text": "no matter how large the collections become. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1499"
  },
  {
    "text": "However, while OrderedSet is able to quickly look up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1503"
  },
  {
    "text": "existing elements and append new ones, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1506"
  },
  {
    "text": "it cannot efficiently implement removing or inserting an item ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1508"
  },
  {
    "text": "at the front or middle of the set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1512"
  },
  {
    "text": "Like array, these operations need to slide elements around ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1515"
  },
  {
    "text": "in the storage array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1519"
  },
  {
    "text": "but they also need to renumber subsequent indices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1520"
  },
  {
    "text": "in the hash table. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1523"
  },
  {
    "text": "This means that removals and insertions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1524"
  },
  {
    "text": "turn into operations with linear complexity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1527"
  },
  {
    "text": "making these slower than the regular set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1530"
  },
  {
    "text": "There is always a trade-off! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1534"
  },
  {
    "text": "But once we get familiar with how these data structures work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1536"
  },
  {
    "text": "we will be able to confidently select the right one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1539"
  },
  {
    "text": "to solve any problem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1542"
  },
  {
    "text": "based on the requirements we need to satisfy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1543"
  },
  {
    "text": "and the operations that are important to optimize. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1546"
  },
  {
    "text": "Selecting the right data structure can lead ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1550"
  },
  {
    "text": "to an algorithmic improvement that can result in hundreds, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1552"
  },
  {
    "text": "or even thousands, of times faster code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1556"
  },
  {
    "text": "Selecting the wrong one can do the opposite. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1559"
  },
  {
    "text": "So I think it's useful to learn about these ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1561"
  },
  {
    "text": "because, ultimately, it results in great apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1564"
  },
  {
    "text": "and happy users. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1567"
  },
  {
    "text": "This new OrderedSet type is a pure Swift variant ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1570"
  },
  {
    "text": "of the existing NSOrderedSet type in Foundation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1573"
  },
  {
    "text": "However, because OrderedSet is implemented in a package, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1576"
  },
  {
    "text": "it doesn't bridge with NSOrderedSet. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1580"
  },
  {
    "text": "This means existing Objective-C APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1582"
  },
  {
    "text": "won't get automatically imported to use the new type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1585"
  },
  {
    "text": "These are separate things.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1589"
  },
  {
    "text": "The third data structure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1593"
  },
  {
    "text": "provided by the Collections package ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1595"
  },
  {
    "text": "is an ordered analogue of the standard dictionary type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1597"
  },
  {
    "text": "Like the standard dictionary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1602"
  },
  {
    "text": "this is a sequence of key-value pairs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1604"
  },
  {
    "text": "that lets us use a key as a subscript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1606"
  },
  {
    "text": "to quickly look up its corresponding value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1608"
  },
  {
    "text": "Unlike the regular dictionary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1612"
  },
  {
    "text": "the order of key-value pairs is well-defined. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1614"
  },
  {
    "text": "By default, it follows the order in which the keys ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1617"
  },
  {
    "text": "were originally inserted. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1619"
  },
  {
    "text": "To append a new element, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1623"
  },
  {
    "text": "we can assign a value to a new key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1625"
  },
  {
    "text": "We can remove elements by assigning nil ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1629"
  },
  {
    "text": "to an existing key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1632"
  },
  {
    "text": "Throughout these operations, the ordered dictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1634"
  },
  {
    "text": "maintains its contents in a well-defined order.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1637"
  },
  {
    "text": "Ordered dictionaries use array-like integer indices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1643"
  },
  {
    "text": "but this introduces an interesting issue. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1647"
  },
  {
    "text": "In our example dictionary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1650"
  },
  {
    "text": "the indexing subscript operation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1652"
  },
  {
    "text": "conflicts with the key subscript. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1654"
  },
  {
    "text": "When we subscript with zero, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1657"
  },
  {
    "text": "do we mean to access the value for the key zero ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1659"
  },
  {
    "text": "or do we mean to retrieve the key-value pair at offset zero? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1662"
  },
  {
    "text": "We think that the key-based subscript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1669"
  },
  {
    "text": "is the primary operation for a dictionary type, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1671"
  },
  {
    "text": "so to prevent this ambiguity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1674"
  },
  {
    "text": "subscripting an ordered dictionary always means ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1676"
  },
  {
    "text": "the keying subscript. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1678"
  },
  {
    "text": "OrderedDictionary doesn't provide ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1680"
  },
  {
    "text": "an indexing subscript operation at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1682"
  },
  {
    "text": "This means that OrderedDictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1686"
  },
  {
    "text": "cannot be a collection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1688"
  },
  {
    "text": "because the collection protocol requires such a subscript. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1689"
  },
  {
    "text": "Therefore, OrderedDictionary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1694"
  },
  {
    "text": "only conforms to the sequence protocol. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1696"
  },
  {
    "text": "However, for cases where a collection conformance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1699"
  },
  {
    "text": "is desirable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1702"
  },
  {
    "text": "OrderedDictionary provides the special elements view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1703"
  },
  {
    "text": "Elements is a random-access collection ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1707"
  },
  {
    "text": "that provides an indexing subscript ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1709"
  },
  {
    "text": "returning a key-value pair. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1711"
  },
  {
    "text": "Looking at the underlying implementation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1715"
  },
  {
    "text": "while the regular dictionary type uses two separate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1718"
  },
  {
    "text": "hash tables for storing keys and values respectively, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1721"
  },
  {
    "text": "an ordered dictionary uses a single compressed hash table ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1725"
  },
  {
    "text": "and two parallel arrays instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1729"
  },
  {
    "text": "This can save even more space than ordered sets do. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1732"
  },
  {
    "text": "So these are the three new data structures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1736"
  },
  {
    "text": "available in the Collections package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1739"
  },
  {
    "text": "By using these constructs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1741"
  },
  {
    "text": "we can boost the performance of our apps, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1743"
  },
  {
    "text": "or reduce memory use or -- just as importantly -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1745"
  },
  {
    "text": "we can express constraints ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1748"
  },
  {
    "text": "that we weren't able to easily satisfy with the standard types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1749"
  },
  {
    "text": "such as preserving element ordering in a set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1754"
  },
  {
    "text": "Because these new types ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1757"
  },
  {
    "text": "all conform to some sequence and collection protocols, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1758"
  },
  {
    "text": "they also interoperate with the algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1761"
  },
  {
    "text": "provided by the standard library ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1764"
  },
  {
    "text": "as well as the new Algorithms package ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1766"
  },
  {
    "text": "that Kyle showed us earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1767"
  },
  {
    "text": "Swift Collections and Swift Algorithms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1770"
  },
  {
    "text": "are only two of the new members of our growing list ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1773"
  },
  {
    "text": "of open-source packages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1775"
  },
  {
    "text": "The future of the Swift library ecosystem is being molded ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1778"
  },
  {
    "text": "right now, as we push onto new platforms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1781"
  },
  {
    "text": "and into new domains. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1784"
  },
  {
    "text": "And this is being done in plain sight ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1785"
  },
  {
    "text": "as we increasingly leverage open-source packages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1788"
  },
  {
    "text": "We're deliberately releasing these packages early, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1791"
  },
  {
    "text": "while they're still pliable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1794"
  },
  {
    "text": "and we're developing them as community efforts on GitHub. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1796"
  },
  {
    "text": "So try them out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1801"
  },
  {
    "text": "File an issue. Open a pull request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1802"
  },
  {
    "text": "It's never been a better time, and it's never been easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1805"
  },
  {
    "text": "to get involved and make an impact. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1808"
  },
  {
    "text": "I hope you're as excited about these new Swift packages ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1811"
  },
  {
    "text": "as we are. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1815"
  },
  {
    "text": "We can't wait to see what you build with these! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1816"
  },
  {
    "text": "Thank you for watching, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1819"
  },
  {
    "text": "and enjoy the rest of the conference! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1820"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10256/?time=1823"
  }
]