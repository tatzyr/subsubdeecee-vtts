[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=2"
  },
  {
    "text": "Hi, my name is Kyle Sanner, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=9"
  },
  {
    "text": "from the GPU Software Engineering team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=11"
  },
  {
    "text": "Together with my colleague Alex Li, we'll be talking about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=13"
  },
  {
    "text": "how to get optimal frame pacing in your apps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=16"
  },
  {
    "text": "on variable refresh-rate displays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=19"
  },
  {
    "text": "We'll be focusing on some new display technology coming to macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=21"
  },
  {
    "text": "Adaptive-Sync, and how to drive custom drawing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=25"
  },
  {
    "text": "smoothly on iPad Pro under all conditions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=28"
  },
  {
    "text": "We'll start with a quick overview of the types of displays ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=31"
  },
  {
    "text": "now supported on Apple Platforms.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=34"
  },
  {
    "text": "We're going to introduce you to Adaptive-Sync displays on the Mac, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=37"
  },
  {
    "text": "and the new tools in macOS Monterey that you can use to deliver ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=40"
  },
  {
    "text": "smooth frame rates in full-screen apps and games on these displays.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=44"
  },
  {
    "text": "Then, we'll dig deep into ProMotion on iPad Pro, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=49"
  },
  {
    "text": "and look at some CADisplayLink best practices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=53"
  },
  {
    "text": "that help your apps maintain correct frame pacing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=55"
  },
  {
    "text": "at different frame rates.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=58"
  },
  {
    "text": "Let's first review the types of displays Apple's devices can support.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=61"
  },
  {
    "text": "Most displays on Apple systems work at fixed refresh rates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=66"
  },
  {
    "text": "That is, they refresh themselves at a consistent rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=70"
  },
  {
    "text": "whenever they are powered on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=73"
  },
  {
    "text": "The exception is our ProMotion displays on iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=76"
  },
  {
    "text": "and now with Adaptive-Sync displays on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=78"
  },
  {
    "text": "Let's start digging in to what's new with Adaptive-Sync displays on the Mac.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=82"
  },
  {
    "text": "We'll start with what an Adaptive-Sync display is, and how they work on the Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=87"
  },
  {
    "text": "But first, let's first take a quick look at how a fixed-rate display works.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=92"
  },
  {
    "text": "Here's a diagram showing frames being delivered to a 60Hz display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=96"
  },
  {
    "text": "Each frame is presented to the display, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=101"
  },
  {
    "text": "where it stays for 16ms before the display is refreshed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=103"
  },
  {
    "text": "If there's a new frame drawn by your Mac ready in the Framebuffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=107"
  },
  {
    "text": "then that new frame is presented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=111"
  },
  {
    "text": "Otherwise, the previous frame is shown again.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=113"
  },
  {
    "text": "Looking at a 120Hz display, you see that that though we've ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=117"
  },
  {
    "text": "doubled the refresh rate, and thereby halved the interval ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=120"
  },
  {
    "text": "each frame can be onscreen, it behaves the same way, just faster.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=123"
  },
  {
    "text": "Take a look at this Adaptive-Sync display, on the other hand. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=129"
  },
  {
    "text": "Instead of a static duration, each frame has a window of time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=132"
  },
  {
    "text": "that it can be onscreen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=136"
  },
  {
    "text": "This window varies depending on the attached display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=138"
  },
  {
    "text": "This display can operate between 40 and 120Hz, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=141"
  },
  {
    "text": "which means that a frame can be onscreen anywhere between 8 and 25ms.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=145"
  },
  {
    "text": "Note that once the maximum time has elapsed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=151"
  },
  {
    "text": "the system must refresh the panel, and the display will briefly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=154"
  },
  {
    "text": "be unavailable for new updates for a short time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=157"
  },
  {
    "text": "Okay, so what kind of benefits can your games and apps get ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=161"
  },
  {
    "text": "on an Adaptive-Sync Display? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=164"
  },
  {
    "text": "For applications that mostly run at the maximum refresh rate of the display, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=166"
  },
  {
    "text": "Adaptive-Sync displays provide a great benefit for free. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=171"
  },
  {
    "text": "Let's first take a look at this scenario, where your app is mostly able to produce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=175"
  },
  {
    "text": "new frames in under 8ms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=179"
  },
  {
    "text": "so you're running fairly reliably at 120Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=181"
  },
  {
    "text": "But due to a momentary increase in scene complexity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=185"
  },
  {
    "text": "the finished frame lands in the Framebuffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=188"
  },
  {
    "text": "9ms after the previous frame was first displayed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=190"
  },
  {
    "text": "On a fixed frame rate display, the previous frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=194"
  },
  {
    "text": "is displayed for 16ms, instead of the 8ms you intended. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=196"
  },
  {
    "text": "This results in a perceptible hitch in your app.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=201"
  },
  {
    "text": "On an Adaptive-Sync display, your frame is presented to the display ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=205"
  },
  {
    "text": "immediately after it is done, so your app incurs only a 1ms penalty. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=208"
  },
  {
    "text": "Hitches this small are generally not perceptible to users. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=214"
  },
  {
    "text": "For workloads that can't reach the maximum frame rate of the display, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=218"
  },
  {
    "text": "you can provide smooth, even frames by making ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=222"
  },
  {
    "text": "some small changes to how your app presents its drawables. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=225"
  },
  {
    "text": "Consider this scenario: a game running a complex scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=228"
  },
  {
    "text": "can produce updates at around 90Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=232"
  },
  {
    "text": "However, an intermittent effect causes a large jump in complexity, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=235"
  },
  {
    "text": "but does so inconsistently, causing sudden spikes down to 66Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=239"
  },
  {
    "text": "By monitoring your app's GPU work, you can respond to this spike ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=244"
  },
  {
    "text": "in complexity by intentionally presenting your frames later ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=248"
  },
  {
    "text": "until your scene's complexity is consistently lower. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=251"
  },
  {
    "text": "Now, let's talk about some Adaptive-Sync best practices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=254"
  },
  {
    "text": "On a fixed rate display, when your app's GPU work consistently exceeds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=258"
  },
  {
    "text": "the display's on-glass interval, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=262"
  },
  {
    "text": "we've previously recommended that you slow down your rendering ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=264"
  },
  {
    "text": "to hit the next factor of the display's fastest refresh rate.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=267"
  },
  {
    "text": "Typically, that means lowering your target frames per second to 30 from 60, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=272"
  },
  {
    "text": "like in this example here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=276"
  },
  {
    "text": "When presenting to an Adaptive-Sync display, however, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=280"
  },
  {
    "text": "we're changing that guidance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=282"
  },
  {
    "text": "You should instead attempt to present frames at the highest rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=284"
  },
  {
    "text": "your app can do so evenly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=287"
  },
  {
    "text": "In addition to presenting frames evenly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=290"
  },
  {
    "text": "remember that if your frames are presented at less than the minimum rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=292"
  },
  {
    "text": "that the display supports, that the display might become ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=295"
  },
  {
    "text": "unavailable for new frames, which could induce judder in your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=298"
  },
  {
    "text": "But so long as you're in the supported range, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=303"
  },
  {
    "text": "you're free to pick whatever rate works best for your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=305"
  },
  {
    "text": "Now that you've got a high-level understanding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=308"
  },
  {
    "text": "of the new display support coming to the Mac this year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=310"
  },
  {
    "text": "let's talk about how to enable Adaptive Sync in your games.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=313"
  },
  {
    "text": "First, you'll need a supported Mac. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=317"
  },
  {
    "text": "Any Mac with an Apple Silicon GPU will work great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=319"
  },
  {
    "text": "and we also support many of our most recent Intel-based Macs as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=322"
  },
  {
    "text": "Second, you'll need a supported Adaptive-Sync display, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=327"
  },
  {
    "text": "and to enable Adaptive-Sync mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=330"
  },
  {
    "text": "This can be done by selecting the new variable refresh rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=333"
  },
  {
    "text": "available in Display System Preferences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=337"
  },
  {
    "text": "And lastly, your app needs to be running in full-screen mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=340"
  },
  {
    "text": "Let's see what APIs you can call in your app to detect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=345"
  },
  {
    "text": "whether it should be attempting to do Adaptive-Sync scheduling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=348"
  },
  {
    "text": "First, you'll need to determine whether or not the display you're running on ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=352"
  },
  {
    "text": "is capable of Adaptive-Sync scheduling. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=355"
  },
  {
    "text": "For that, there are some new properties this year on NSScreen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=357"
  },
  {
    "text": "minimumRefreshInterval and maximumRefreshInterval. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=361"
  },
  {
    "text": "These values tell you the range of valid onscreen times ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=364"
  },
  {
    "text": "for a frame presented to this display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=368"
  },
  {
    "text": "On a fixed-frame display, these values will be the same, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=370"
  },
  {
    "text": "so a simple not-equal comparison ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=373"
  },
  {
    "text": "will tell you whether this screen is in Adaptive-Sync mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=375"
  },
  {
    "text": "Next, you'll need to know if your window is currently full screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=379"
  },
  {
    "text": "You can determine that by checking your window's styleMask.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=383"
  },
  {
    "text": "And remember, you'll need to combine both of these checks to ensure your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=387"
  },
  {
    "text": "is able to take advantage of Adaptive-Sync scheduling.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=391"
  },
  {
    "text": "Okay, great. So, now that you've got a handle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=395"
  },
  {
    "text": "on Adaptive-Sync displays and the new APIs that macOS provides to detect them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=398"
  },
  {
    "text": "let's see how we can adapt some existing metal presentation techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=403"
  },
  {
    "text": "to present evenly on an Adaptive-Sync display.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=407"
  },
  {
    "text": "You can use our MetalDrawable APIs that have built-in frame-pacing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=411"
  },
  {
    "text": "such as presentAfterMinimumDuration or presentAtTime, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=415"
  },
  {
    "text": "to great effect with Adaptive-Sync displays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=418"
  },
  {
    "text": "Or, you can roll your own solution with a present now call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=421"
  },
  {
    "text": "and your own custom timers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=425"
  },
  {
    "text": "Let's take a look at how a few different implementations will work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=427"
  },
  {
    "text": "We'll start with a simple example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=432"
  },
  {
    "text": "Here, we're going to acquire a Drawable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=435"
  },
  {
    "text": "set up our GPU work, and present it on the screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=437"
  },
  {
    "text": "We're relying on the back pressure of a Drawable being available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=441"
  },
  {
    "text": "to set our frame rate for us. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=444"
  },
  {
    "text": "On a fixed-rate display, we know that this isn't the best idea, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=447"
  },
  {
    "text": "since there's no guarantee that your GPU work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=450"
  },
  {
    "text": "will align to the refresh rate of the display.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=453"
  },
  {
    "text": "But as you can see from this instruments capture taken on an Adaptive-Sync display, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=457"
  },
  {
    "text": "when our scene is consistent, this seems to work out okay. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=462"
  },
  {
    "text": "The problem here is that this scene is running into periodic hitches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=466"
  },
  {
    "text": "These hitches will translate into stutters that are visible to users. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=470"
  },
  {
    "text": "Let's try to fix that by presenting at a fixed, even rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=475"
  },
  {
    "text": "This technique can also be used if you want to implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=479"
  },
  {
    "text": "a user-adjustable FPS slider for the players of your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=483"
  },
  {
    "text": "Here, we've set the frequency we want to 78Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=487"
  },
  {
    "text": "And instead of a plain present call, we'll use present afterMinimumDuration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=491"
  },
  {
    "text": "for this Drawable, and specify the interval that we defined above. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=495"
  },
  {
    "text": "And here, you can see smoothly presented frames at the rate that we requested. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=500"
  },
  {
    "text": "We aren't presenting as quickly as the previous example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=504"
  },
  {
    "text": "but your users are far less likely to encounter stutters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=507"
  },
  {
    "text": "and your app will use less CPU and GPU time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=510"
  },
  {
    "text": "Okay, so here's where things get a little more interesting. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=514"
  },
  {
    "text": "Let's try an approach that will produce evenly-paced frames ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=518"
  },
  {
    "text": "without having to set a single fixed rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=521"
  },
  {
    "text": "One way to do this is to compute a rolling average of the GPU work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=524"
  },
  {
    "text": "needed to produce each frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=528"
  },
  {
    "text": "and feed that time into our present Drawable call. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=530"
  },
  {
    "text": "For the first frame, we need to load our average GPU time with a starting value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=534"
  },
  {
    "text": "I'm going to choose to be optimistic and target the fastest rate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=539"
  },
  {
    "text": "the display can support here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=542"
  },
  {
    "text": "This will just be a starting point for our average, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=544"
  },
  {
    "text": "so any reasonable guess we make is fine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=546"
  },
  {
    "text": "Now, let's attach a CommandBuffer completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=550"
  },
  {
    "text": "to measure the amount of time the GPU spent rendering this frame, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=553"
  },
  {
    "text": "and incorporate that time into our rolling average. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=556"
  },
  {
    "text": "First, we can acquire the time the GPU took to complete our work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=560"
  },
  {
    "text": "Then, we'll incorporate that new time into our rolling average ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=564"
  },
  {
    "text": "that will be used when we present the next frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=567"
  },
  {
    "text": "And here are the results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=571"
  },
  {
    "text": "As you can see, we're presenting at a rate similar to the previous example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=573"
  },
  {
    "text": "but this limit is determined by the previous frames we've generated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=577"
  },
  {
    "text": "and will produce even frame rates across a range of Mac GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=580"
  },
  {
    "text": "Here, we can see the same program running smoothly at 48Hz ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=586"
  },
  {
    "text": "on a less powerful Mac, without any additional code changes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=589"
  },
  {
    "text": "All right, Now you've got some new tools and techniques ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=594"
  },
  {
    "text": "that you can use to optimize your app for Adaptive-Sync displays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=597"
  },
  {
    "text": "If you want to learn more about Adaptive-Sync displays on macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=601"
  },
  {
    "text": "check out the new Metal sample project on the Apple Developer site. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=604"
  },
  {
    "text": "To learn more about delivering performant experiences in Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=608"
  },
  {
    "text": "check out these WWDC talks from previous years. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=611"
  },
  {
    "text": "And now, I'll hand you over to Alex, where you'll learn more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=615"
  },
  {
    "text": "about frame pacing on iPad Pro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=618"
  },
  {
    "text": "Thank you, Kyle. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=621"
  },
  {
    "text": "Next, let's talk about ProMotion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=622"
  },
  {
    "text": "Since 2017, every iPad Pro has been equipped with a ProMotion display ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=625"
  },
  {
    "text": "that delivers refresh rates of up to 120Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=629"
  },
  {
    "text": "However, 120Hz may not be available in some situations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=633"
  },
  {
    "text": "including when the user has switched on Low Power Mode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=637"
  },
  {
    "text": "which has been brought to the iPad this year with iPadOS 15. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=640"
  },
  {
    "text": "Proper frame pacing will allow your app to present motion contents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=644"
  },
  {
    "text": "correctly and smoothly, regardless of display characteristics, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=647"
  },
  {
    "text": "user preferences, and system states. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=651"
  },
  {
    "text": "We are going to look at the differences between ProMotion and fixed rate displays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=653"
  },
  {
    "text": "as well as the situations in which some frame rates may not be available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=658"
  },
  {
    "text": "Next, we'll discuss what is a display link, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=662"
  },
  {
    "text": "and how your app can use it to drive custom drawing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=665"
  },
  {
    "text": "And finally, we'll offer some display link best practices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=668"
  },
  {
    "text": "Let's dive right in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=673"
  },
  {
    "text": "As Kyle has briefly presented earlier, a fixed 60Hz display ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=675"
  },
  {
    "text": "refreshes every 16ms, a fixed cadence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=679"
  },
  {
    "text": "It supports smooth presentation of contents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=683"
  },
  {
    "text": "whose frame rates are factors of 60. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=686"
  },
  {
    "text": "For example, 60Hz, 30Hz, 20Hz, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=689"
  },
  {
    "text": "However, when the content is slower than the display refresh rate, say 30Hz, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=694"
  },
  {
    "text": "the display itself still has to be refreshed at the same cadence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=699"
  },
  {
    "text": "hence, every other frame is a repeat of the previous, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=703"
  },
  {
    "text": "and this consumes some power. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=707"
  },
  {
    "text": "On the other hand, ProMotion offers great responsiveness ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=709"
  },
  {
    "text": "with refresh rates of up to 120Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=712"
  },
  {
    "text": "It also adapts to onscreen content and so reduces its power consumption. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=716"
  },
  {
    "text": "Let's see how it works. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=721"
  },
  {
    "text": "Of course, at its maximum refresh rate of 120Hz, the display refreshes every 8ms.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=723"
  },
  {
    "text": "Since 120 is a multiple of 60, ProMotion supports all existing frame rates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=730"
  },
  {
    "text": "It offers not just 120Hz, but some intermediate frame rates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=736"
  },
  {
    "text": "for your apps as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=740"
  },
  {
    "text": "Moreover, ProMotion can dynamically adjust its refresh rate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=742"
  },
  {
    "text": "so with a smooth 60Hz content, it can refresh only every 16ms ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=747"
  },
  {
    "text": "without repeats, which otherwise would be required on a fixed 120Hz display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=752"
  },
  {
    "text": "This is true all the way down to 24Hz.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=757"
  },
  {
    "text": "Now, these frame rates may not always be available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=761"
  },
  {
    "text": "The user can turn on Limit Frame Rate toggle ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=764"
  },
  {
    "text": "in Accessibility settings that caps the maximum frame rate to 60Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=767"
  },
  {
    "text": "Also, when the device gets hot, the system may ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=771"
  },
  {
    "text": "apply restrictions on the availability of 120Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=774"
  },
  {
    "text": "With iPadOS 15, we'll also enforce the 60Hz cap in Low Power Mode. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=778"
  },
  {
    "text": "So, how do these scenarios affect your apps? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=784"
  },
  {
    "text": "The good news is that most apps will work without any changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=787"
  },
  {
    "text": "But if your app performs frame-by-frame custom drawing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=791"
  },
  {
    "text": "then you would need to pay attention to these frame rate changes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=794"
  },
  {
    "text": "and we will show you how to do that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=797"
  },
  {
    "text": "The recommended tool to drive custom drawing is display link, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=800"
  },
  {
    "text": "which is essentially a timer that is synchronized with display refresh rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=804"
  },
  {
    "text": "It helps your app drive any custom animations or custom render loop. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=808"
  },
  {
    "text": "There are two display links. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=813"
  },
  {
    "text": "One is CVDisplayLink, offered by CoreVideo on macOS, and the other is CADisplayLink, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=814"
  },
  {
    "text": "offered by CoreAnimation on our other platforms, as well as Catalyst on macOS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=820"
  },
  {
    "text": "each with slightly different characteristics and behavior. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=825"
  },
  {
    "text": "Today, we'll only discuss CADisplayLink, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=828"
  },
  {
    "text": "but on a high level, these concepts will apply to both.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=831"
  },
  {
    "text": "CADisplayLink wakes up at every vsync and invokes the callback. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=835"
  },
  {
    "text": "This provides the application the entire 8ms to complete its work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=840"
  },
  {
    "text": "A regular timer, such as an NSTimer, is very unlikely ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=846"
  },
  {
    "text": "to be in perfect sync with the display. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=850"
  },
  {
    "text": "It can be out of phase or drifting, so sometimes the app may not have ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=853"
  },
  {
    "text": "enough time to complete its work and it leads to frame drops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=859"
  },
  {
    "text": "Now you've seen how CADisplayLink provides consistent timings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=863"
  },
  {
    "text": "here are some of its additional benefits. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=867"
  },
  {
    "text": "It can run at a slower rate than the display refresh rate, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=870"
  },
  {
    "text": "and to do so, your app provides a hint via preferredFramesPerSecond ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=873"
  },
  {
    "text": "and we will choose the nearest available frame rate for you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=878"
  },
  {
    "text": "When the frame rate availability changes, as we have discussed earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=882"
  },
  {
    "text": "CADisplayLink will automatically adjust its rate under the hood. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=886"
  },
  {
    "text": "Of course, it also provides your app with the necessary timing information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=890"
  },
  {
    "text": "so that your custom drawing can be aware of these changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=894"
  },
  {
    "text": "We won't go into how to write a custom animation or custom render loop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=897"
  },
  {
    "text": "but we will provide you with four best practices to help your custom drawing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=901"
  },
  {
    "text": "stay in sync with display timings and avoid some of the common pitfalls.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=906"
  },
  {
    "text": "First, it is important to query the display refresh rate at runtime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=911"
  },
  {
    "text": "instead of hard-coding it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=915"
  },
  {
    "text": "Second, it is usually the case that you should use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=917"
  },
  {
    "text": "the frame rate of the CADisplayLink itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=919"
  },
  {
    "text": "Next, using targetTimestamp to prepare the drawing will help reduce hitches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=923"
  },
  {
    "text": "Finally, it is always a good idea to prepare for the unexpected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=928"
  },
  {
    "text": "by dynamically computing the time delta. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=932"
  },
  {
    "text": "Let's go through them one by one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=935"
  },
  {
    "text": "The maximum display refresh rate can be queried via UIScreen, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=937"
  },
  {
    "text": "which will always return 120Hz on ProMotion displays, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=941"
  },
  {
    "text": "even during situations such as when Low Power Mode is turned on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=945"
  },
  {
    "text": "On the other hand, CADisplayLink will actually ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=950"
  },
  {
    "text": "provide the shortest interval between frames via the duration property, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=952"
  },
  {
    "text": "and it will dynamically update based on the current device state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=956"
  },
  {
    "text": "But almost always, you should use the actual frame information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=961"
  },
  {
    "text": "directly from the CADisplayLink ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=964"
  },
  {
    "text": "because the display link can run slower than the maximum display refresh rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=967"
  },
  {
    "text": "Also, frame rate availability is dependent on the hardware, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=971"
  },
  {
    "text": "and the actual frame rate may be changed dynamically by the display link itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=975"
  },
  {
    "text": "in response to system state changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=980"
  },
  {
    "text": "Let's look at an example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=983"
  },
  {
    "text": "Suppose we request a 40Hz display link. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=985"
  },
  {
    "text": "As you see, on a ProMotion display, 40Hz is supported. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=987"
  },
  {
    "text": "However, on a 60Hz display, or when ProMotion is capped at 60Hz, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=992"
  },
  {
    "text": "the display link will automatically adjust itself to 30Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=998"
  },
  {
    "text": "This ensures a good cadence where each wake-up is on a possible vsync ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1001"
  },
  {
    "text": "that tries to give the equal amount of time for each frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1006"
  },
  {
    "text": "If we were to use a plain 40Hz NSTimer, which is not frame rate aware, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1009"
  },
  {
    "text": "its wake-up could be right in the middle of the vsync interval, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1015"
  },
  {
    "text": "and of course, we cannot present a frame there, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1018"
  },
  {
    "text": "so you'll likely observe hitches in your custom drawing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1021"
  },
  {
    "text": "So, how does it look in the code? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1025"
  },
  {
    "text": "Well, here is how you would usually set up a display link. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1027"
  },
  {
    "text": "First, you must provide a target and a selector, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1031"
  },
  {
    "text": "which is the callback to be invoked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1033"
  },
  {
    "text": "Next, hint the preferred frame rate of 40Hz via preferredFramesPerSecond. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1036"
  },
  {
    "text": "You then add the display link to the current runloop, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1042"
  },
  {
    "text": "from which the callback will be invoked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1045"
  },
  {
    "text": "So, in the callback, you can get the expected interval ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1048"
  },
  {
    "text": "between display link wake-ups ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1050"
  },
  {
    "text": "by subtracting the timestamp from targetTimestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1052"
  },
  {
    "text": "This interval is not necessarily always 1 over 40 because the display link itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1055"
  },
  {
    "text": "may be running at a different frequency. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1060"
  },
  {
    "text": "Next, let's talk about these timestamps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1063"
  },
  {
    "text": "There are primarily two timestamps on the CADisplayLink, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1066"
  },
  {
    "text": "Timestamp, which denotes when the callback is scheduled to be invoked, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1069"
  },
  {
    "text": "and targetTimestamp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1073"
  },
  {
    "text": "which is when the next frame will be composited by CoreAnimation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1074"
  },
  {
    "text": "We'll walk through an example that illustrates why you should use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1078"
  },
  {
    "text": "targetTimestamp to prepare your drawings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1081"
  },
  {
    "text": "Here's an animation in its normalized time domain from 0 to 1. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1085"
  },
  {
    "text": "Suppose we are targeting the highest frame rate possible and currently it is 120Hz. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1090"
  },
  {
    "text": "CADisplayLink wakes up, and if we were to prepare ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1096"
  },
  {
    "text": "our frame presentation using timestamp, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1099"
  },
  {
    "text": "we'll sample directly here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1102"
  },
  {
    "text": "which gets presented in the next vsync, and here it is.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1104"
  },
  {
    "text": "The same process continues, and we see that it has a good cadence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1109"
  },
  {
    "text": "where for each 120Hz frame, our animation progress increases by 0.05. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1112"
  },
  {
    "text": "Now, suppose the thermal state changes, and 120Hz is no longer available. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1119"
  },
  {
    "text": "Now the display link wakes up again, and the app prepares the animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1125"
  },
  {
    "text": "at progress 0.4, which gets presented in the next vsync right here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1129"
  },
  {
    "text": "And the same pattern continues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1137"
  },
  {
    "text": "Something's not quite right at the transition here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1139"
  },
  {
    "text": "We see that the progress increases by 0.05, but one is over 8ms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1142"
  },
  {
    "text": "and the other is over 16ms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1147"
  },
  {
    "text": "It's very clear if we plot progress versus time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1151"
  },
  {
    "text": "we'll see a hiccup right at the transition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1154"
  },
  {
    "text": "and this will reflect as a user perceptible hitch, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1156"
  },
  {
    "text": "and that's not desirable.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1159"
  },
  {
    "text": "Now, let's try targetTimestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1163"
  },
  {
    "text": "CADisplayLink wakes up here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1166"
  },
  {
    "text": "The progress is sampled at targetTimestamp, which gives 0.15. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1168"
  },
  {
    "text": "The same pattern continues, and again, we see a good cadence. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1173"
  },
  {
    "text": "At this frame rate transition point, the display link wakes up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1178"
  },
  {
    "text": "samples at targetTimestamp, and we get 0.50. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1182"
  },
  {
    "text": "And it continues in the same way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1186"
  },
  {
    "text": "If we plot the same progress versus time graph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1189"
  },
  {
    "text": "you will see that it is a straight line, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1191"
  },
  {
    "text": "and hence it provides smooth contents even when the frame rate changes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1194"
  },
  {
    "text": "So, targetTimestamp should be used rather than timestamp to prepare your drawings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1198"
  },
  {
    "text": "In your code, it should generally be as simple ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1204"
  },
  {
    "text": "as replacing any timestamp usage with targetTimestamp. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1206"
  },
  {
    "text": "Finally, let's talk about dynamically computing the time delta. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1212"
  },
  {
    "text": "The difference between targetTimestamp and timestamp ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1216"
  },
  {
    "text": "gives you the expected amount of time between display link callbacks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1219"
  },
  {
    "text": "but the actual amount of time is not guaranteed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1223"
  },
  {
    "text": "A higher priority thread may be scheduled on the CPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1226"
  },
  {
    "text": "or the runloop is busy with something else. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1229"
  },
  {
    "text": "In the extreme case, callbacks may be skipped entirely, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1232"
  },
  {
    "text": "so in these situations, it's especially critical to still maintain ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1236"
  },
  {
    "text": "the correct timing in your custom drawing for the best user experience.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1239"
  },
  {
    "text": "When the CADisplayLink callback is invoked, the app performs its work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1244"
  },
  {
    "text": "to prepare the updates or renders necessary for the next frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1247"
  },
  {
    "text": "Usually, the callback will be invoked right at the scheduled wake-up time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1252"
  },
  {
    "text": "but it's not alays the case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1256"
  },
  {
    "text": "We expect the next callback to be invoked here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1258"
  },
  {
    "text": "However, the display link doesn't get a chance to run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1260"
  },
  {
    "text": "until a few milliseconds into the vsync interval. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1263"
  },
  {
    "text": "And hence, you may not get the full 8ms. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1267"
  },
  {
    "text": "In this case, you can query CACurrentMediaTime ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1270"
  },
  {
    "text": "and compare with targetTimestamp to get a sense of how much time is available.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1273"
  },
  {
    "text": "Now, suppose the work is taking too long in this frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1278"
  },
  {
    "text": "The next callback won't be invoked until the runloop is free again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1282"
  },
  {
    "text": "Because this one is delayed, the following callback will be skipped, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1286"
  },
  {
    "text": "so when you are preparing to advance the progress of your custom drawing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1290"
  },
  {
    "text": "in this callback, be mindful that the time delta that you should use is not 8ms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1294"
  },
  {
    "text": "but rather 16ms, if you were to keep track of the previous timestamp ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1299"
  },
  {
    "text": "at which your custom drawing state was updated at. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1304"
  },
  {
    "text": "Therefore, if your app uses time delta ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1308"
  },
  {
    "text": "to advance the state of your custom drawing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1310"
  },
  {
    "text": "this will slow down your custom drawing by one frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1312"
  },
  {
    "text": "every time a calback is skipped. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1315"
  },
  {
    "text": "You can instead keep track of a previous targetTimestamp ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1318"
  },
  {
    "text": "so that you can advance the state correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1321"
  },
  {
    "text": "And if your custom drawing has high workload, you can look at targetTimestamp ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1324"
  },
  {
    "text": "to potentially reduce the workload to meet the deadline as needed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1328"
  },
  {
    "text": "To recap the best practices, don't guess the display refresh rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1333"
  },
  {
    "text": "Always query it at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1337"
  },
  {
    "text": "Your custom drawing should be flexible in its supported frame rates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1339"
  },
  {
    "text": "and should be ready to adapt to a different rate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1343"
  },
  {
    "text": "Use targetTimestamp to ensure a hitch-free frame rate transition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1346"
  },
  {
    "text": "and be on the look out for any unexpected situations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1350"
  },
  {
    "text": "such as missed display link callback. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1353"
  },
  {
    "text": "So, let's wrap up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1356"
  },
  {
    "text": "In the first half of this session, we've discussed how to optimize your app's ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1358"
  },
  {
    "text": "frame-pacing when running on an Adaptive-Sync display on macOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1362"
  },
  {
    "text": "In the second half, we've described the best practices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1366"
  },
  {
    "text": "for your app to drive its custom drawing and maintain smooth frame-pacing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1369"
  },
  {
    "text": "under all conditions on a ProMotion display on iPad Pro. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1373"
  },
  {
    "text": "As display technologies continue to evolve, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1378"
  },
  {
    "text": "we hope this session has provided you with not only insights, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1380"
  },
  {
    "text": "but also tools and best practices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1384"
  },
  {
    "text": "to support the increasingly dynamic timings of the displays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1386"
  },
  {
    "text": "Thank you so much for joining us, and enjoy the rest of WWDC 2021. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1390"
  },
  {
    "text": "[music]",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10147/?time=1395"
  }
]