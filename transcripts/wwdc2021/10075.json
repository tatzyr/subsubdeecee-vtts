[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=7"
  },
  {
    "text": "Courtland Idstrom: Hello, my name is Courtland Idstrom, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=9"
  },
  {
    "text": "and I'm an engineer on the RealityKit team. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=11"
  },
  {
    "text": "In this video, I'm going to show you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=14"
  },
  {
    "text": "how to use the new rendering features in RealityKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=15"
  },
  {
    "text": "RealityKit is a framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=19"
  },
  {
    "text": "designed to make building AR apps simple and intuitive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=20"
  },
  {
    "text": "Rendering is a key piece of RealityKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=24"
  },
  {
    "text": "centered around highly realistic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=26"
  },
  {
    "text": "physically based rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=28"
  },
  {
    "text": "Since our first release in 2019, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=30"
  },
  {
    "text": "we've been working on your feedback ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=32"
  },
  {
    "text": "and we're shipping a major update to RealityKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=34"
  },
  {
    "text": "In the \"Dive into Reality Kit 2\" session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=36"
  },
  {
    "text": "we covered the evolution of RealityKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=38"
  },
  {
    "text": "providing many enhancements -- from updates to the ECS system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=41"
  },
  {
    "text": "more evolved material and animation capabilities, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=45"
  },
  {
    "text": "and generating audio and texture resources at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=48"
  },
  {
    "text": "To showcase these improvements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=52"
  },
  {
    "text": "we built an app that turns your living room ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=53"
  },
  {
    "text": "into an underwater aquarium. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=55"
  },
  {
    "text": "In this talk, we'll show some of the new rendering features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=58"
  },
  {
    "text": "that went into the app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=60"
  },
  {
    "text": "RealityKit 2 provides control and flexibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=62"
  },
  {
    "text": "with how objects are rendered, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=65"
  },
  {
    "text": "allowing you to create even better AR experiences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=67"
  },
  {
    "text": "This year we bring advancements to our material system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=70"
  },
  {
    "text": "enabling you to add your own materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=73"
  },
  {
    "text": "by authoring custom Metal shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=75"
  },
  {
    "text": "Custom post effects allow you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=78"
  },
  {
    "text": "to augment RealityKit's post effects with your own. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=80"
  },
  {
    "text": "New mesh APIs allow mesh creation, inspection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=84"
  },
  {
    "text": "and modifications at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=88"
  },
  {
    "text": "Let's start with the most requested feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=91"
  },
  {
    "text": "in RealityKit 2, support for custom shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=93"
  },
  {
    "text": "RealityKit's rendering centers around ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=97"
  },
  {
    "text": "a physically based rendering model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=98"
  },
  {
    "text": "Its built-in shaders make it easy to create models ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=101"
  },
  {
    "text": "that look natural next to real objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=103"
  },
  {
    "text": "across a range of lighting conditions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=105"
  },
  {
    "text": "This year, we're building on these physically based shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=107"
  },
  {
    "text": "and exposing the ability for you to customize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=110"
  },
  {
    "text": "the geometry and surface of models using shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=112"
  },
  {
    "text": "The first of our shader APIs is geometry modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=116"
  },
  {
    "text": "A geometry modifier is a program, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=119"
  },
  {
    "text": "written in the Metal Shading Language, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=122"
  },
  {
    "text": "that gives you the opportunity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=124"
  },
  {
    "text": "to change the vertices of an object every frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=125"
  },
  {
    "text": "as it's rendered on the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=128"
  },
  {
    "text": "This includes moving them and customizing their attributes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=130"
  },
  {
    "text": "such as color, normal, or UVs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=133"
  },
  {
    "text": "It's run inside of RealityKit's vertex shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=136"
  },
  {
    "text": "and is perfect for ambient animation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=139"
  },
  {
    "text": "deformation, particle systems, and billboards. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=140"
  },
  {
    "text": "Our seaweed is a great example of ambient animation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=144"
  },
  {
    "text": "The seaweed is moving slowly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=147"
  },
  {
    "text": "due to the movement of water around it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=149"
  },
  {
    "text": "Let's take a closer look. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=151"
  },
  {
    "text": "Here you can see the wireframe of the seaweed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=153"
  },
  {
    "text": "as created by our artist; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=155"
  },
  {
    "text": "this shows the vertices and triangles comprising the mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=157"
  },
  {
    "text": "We're going to write a shader program ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=161"
  },
  {
    "text": "that executes on each vertex to create our motion. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=163"
  },
  {
    "text": "We'll use a sine wave, a simple periodic function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=166"
  },
  {
    "text": "to create movement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=169"
  },
  {
    "text": "We're simulating water currents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=170"
  },
  {
    "text": "so we want nearby vertices to behave similarly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=172"
  },
  {
    "text": "regardless of their model's scale or orientation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=175"
  },
  {
    "text": "For this reason, we use the vertex's world position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=179"
  },
  {
    "text": "as an input to the sine function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=182"
  },
  {
    "text": "We include a time value as well, so that it moves over time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=184"
  },
  {
    "text": "Our first sine wave is in the Y dimension ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=188"
  },
  {
    "text": "to create up-down movement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=190"
  },
  {
    "text": "To control the period of the motion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=192"
  },
  {
    "text": "we'll add a spatial scale. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=194"
  },
  {
    "text": "And we can control the amount of its movement with an amplitude. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=196"
  },
  {
    "text": "We'll apply the same function to the X and Z dimensions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=201"
  },
  {
    "text": "so it moves in all three axes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=204"
  },
  {
    "text": "Now, let's look at the model as a whole. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=206"
  },
  {
    "text": "One thing we haven't yet accounted for: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=210"
  },
  {
    "text": "vertices close to the base of the stalk ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=212"
  },
  {
    "text": "have very little room for movement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=214"
  },
  {
    "text": "while ones at the top have the highest freedom to move. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=216"
  },
  {
    "text": "To simulate this, we can use the vertex's y-coordinate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=219"
  },
  {
    "text": "relative to the object's origin ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=222"
  },
  {
    "text": "as a scaling factor for all three axes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=225"
  },
  {
    "text": "which gives us our final formula. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=228"
  },
  {
    "text": "Now that we have a plan for our shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=233"
  },
  {
    "text": "let's take a look at where to find these parameters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=235"
  },
  {
    "text": "Geometry parameters are organized into a few categories. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=238"
  },
  {
    "text": "The first is uniforms, values that are the same ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=242"
  },
  {
    "text": "for every vertex of the object within one frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=244"
  },
  {
    "text": "We need time for our seaweed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=247"
  },
  {
    "text": "Textures contain all textures authored as part of the model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=250"
  },
  {
    "text": "plus an additional custom slot, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=254"
  },
  {
    "text": "which you can use as you see fit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=255"
  },
  {
    "text": "Material constants have any parameters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=258"
  },
  {
    "text": "such as tint or opacity scale, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=260"
  },
  {
    "text": "authored with the object or set via code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=263"
  },
  {
    "text": "Geometry contains some read-only values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=266"
  },
  {
    "text": "such as the current vertex's model position or vertex ID. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=268"
  },
  {
    "text": "We need both model and world positions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=272"
  },
  {
    "text": "for our seaweed movement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=275"
  },
  {
    "text": "Geometry also has read-write values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=278"
  },
  {
    "text": "including normal, UVs, and model position offset. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=280"
  },
  {
    "text": "Once we have computed our offset, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=284"
  },
  {
    "text": "we'll store it here to move our vertices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=286"
  },
  {
    "text": "Let's dive into Metal shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=289"
  },
  {
    "text": "We start out by including RealityKit.h. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=292"
  },
  {
    "text": "Now we declare a function with the visible function attribute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=295"
  },
  {
    "text": "This instructs the compiler to make it available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=299"
  },
  {
    "text": "separately from other functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=301"
  },
  {
    "text": "The function takes a single parameter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=304"
  },
  {
    "text": "which is RealityKit's geometry_parameters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=306"
  },
  {
    "text": "We'll retrieve all values through this object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=309"
  },
  {
    "text": "Using the geometry member of params, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=312"
  },
  {
    "text": "we'll ask for both the world position and model position. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=314"
  },
  {
    "text": "Next we calculate a phase offset, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=318"
  },
  {
    "text": "based on the world position at the vertex and time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=320"
  },
  {
    "text": "Then we apply our formula to calculate this vertex's offset. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=324"
  },
  {
    "text": "We store the offset on geometry, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=329"
  },
  {
    "text": "which will get added to the vertex's model position. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=330"
  },
  {
    "text": "We have our geometry modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=334"
  },
  {
    "text": "but it's not yet hooked up to our seaweed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=335"
  },
  {
    "text": "Let's switch to our ARView subclass, written in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=339"
  },
  {
    "text": "We start by loading our app's default Metal library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=343"
  },
  {
    "text": "which contains our shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=345"
  },
  {
    "text": "Next we construct a geometryModifier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=347"
  },
  {
    "text": "using our shader's name and library. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=350"
  },
  {
    "text": "For each material on the seaweed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=352"
  },
  {
    "text": "we create a new custom material. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=354"
  },
  {
    "text": "We pass the existing material ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=356"
  },
  {
    "text": "as the first parameter to CustomMaterial, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=357"
  },
  {
    "text": "so that it inherits the textures and material properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=360"
  },
  {
    "text": "from the base material while adding our geometry modifier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=362"
  },
  {
    "text": "It looks pretty nice! Since we're underwater, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=367"
  },
  {
    "text": "we've kept the animation pretty slow. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=370"
  },
  {
    "text": "By tweaking amplitude and phase, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=372"
  },
  {
    "text": "the same effect can be extended to grass, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=374"
  },
  {
    "text": "trees, or other foliage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=376"
  },
  {
    "text": "Now that we've shown how to modify geometry, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=379"
  },
  {
    "text": "let's talk about shading. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=381"
  },
  {
    "text": "This is our octopus from the underwater scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=383"
  },
  {
    "text": "looking great with our built-in shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=386"
  },
  {
    "text": "As they do, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=388"
  },
  {
    "text": "our octopus transitions between multiple looks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=389"
  },
  {
    "text": "The second look has a reddish color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=392"
  },
  {
    "text": "Our artist has authored two base color textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=395"
  },
  {
    "text": "one for each look. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=398"
  },
  {
    "text": "In addition to the color change, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=400"
  },
  {
    "text": "the red octopus has a higher roughness value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=402"
  },
  {
    "text": "making it less reflective. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=404"
  },
  {
    "text": "And, to make our octopus even more special, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=406"
  },
  {
    "text": "we wanted to create a nice transition between looks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=409"
  },
  {
    "text": "Here you can see the transition in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=412"
  },
  {
    "text": "Mesmerizing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=416"
  },
  {
    "text": "While each look can be described as a physically based material, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=418"
  },
  {
    "text": "for the transition itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=421"
  },
  {
    "text": "we need to write a surface shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=422"
  },
  {
    "text": "So what is a surface shader? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=425"
  },
  {
    "text": "A surface shader allows you to define ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=427"
  },
  {
    "text": "the appearance of an object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=429"
  },
  {
    "text": "It runs inside the fragment shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=431"
  },
  {
    "text": "for every visible pixel of an object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=433"
  },
  {
    "text": "In addition to color, this includes surface properties ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=435"
  },
  {
    "text": "such as normal, specular, and roughness. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=438"
  },
  {
    "text": "You can write shaders that enhance an object's appearance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=442"
  },
  {
    "text": "or replace it entirely, creating new effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=444"
  },
  {
    "text": "We've seen the two base-color textures for our octopus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=448"
  },
  {
    "text": "For the transition effect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=451"
  },
  {
    "text": "our artist has encoded a special texture for us. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=453"
  },
  {
    "text": "This texture is actually a combination ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=456"
  },
  {
    "text": "of three different layers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=458"
  },
  {
    "text": "There's a noise layer on top ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=460"
  },
  {
    "text": "creating localized transition patterns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=461"
  },
  {
    "text": "We have a transition layer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=464"
  },
  {
    "text": "which dictates the overall movement, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=466"
  },
  {
    "text": "starting at the head and moving towards the tentacles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=468"
  },
  {
    "text": "And there's a mask layer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=471"
  },
  {
    "text": "for areas that we don't want to change color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=472"
  },
  {
    "text": "such as the eye and underside of the tentacles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=475"
  },
  {
    "text": "These three layers are combined into the red, green, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=479"
  },
  {
    "text": "and blue channels of our texture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=482"
  },
  {
    "text": "which we assign to the custom texture slot. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=484"
  },
  {
    "text": "With our textures set up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=486"
  },
  {
    "text": "let's look at how to access these from a surface shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=487"
  },
  {
    "text": "Similar to the geometry modifier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=492"
  },
  {
    "text": "the surface shader has access to uniforms, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=493"
  },
  {
    "text": "textures, and material constants. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=495"
  },
  {
    "text": "Time is an input to our octopus transition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=498"
  },
  {
    "text": "We'll sample textures authored with our model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=501"
  },
  {
    "text": "and read material constants, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=503"
  },
  {
    "text": "allowing our artist to make model-wide adjustments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=505"
  },
  {
    "text": "Geometry -- such as position, normal, or UVs -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=509"
  },
  {
    "text": "appear in a geometry structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=512"
  },
  {
    "text": "These are the interpolated outputs from the vertex shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=513"
  },
  {
    "text": "We'll use UV0 as our texture coordinate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=517"
  },
  {
    "text": "A surface shader writes a surface structure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=520"
  },
  {
    "text": "Properties start with default values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=522"
  },
  {
    "text": "and we're free to calculate these values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=524"
  },
  {
    "text": "in any way we see fit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=526"
  },
  {
    "text": "We'll be calculating base color and normal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=528"
  },
  {
    "text": "Then, four surface parameters: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=531"
  },
  {
    "text": "roughness, metallic, ambient occlusion, and specular. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=533"
  },
  {
    "text": "Now that we know where our values live, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=536"
  },
  {
    "text": "let's start writing our shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=538"
  },
  {
    "text": "We'll do this in three steps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=540"
  },
  {
    "text": "First calculate the transition value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=542"
  },
  {
    "text": "where 0 is a fully purple octopus and 1 is fully red. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=545"
  },
  {
    "text": "Using the transition value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=549"
  },
  {
    "text": "we'll calculate color and normal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=550"
  },
  {
    "text": "and then fine-tune by assigning material properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=552"
  },
  {
    "text": "Let's get started. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=556"
  },
  {
    "text": "First step: transition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=557"
  },
  {
    "text": "We're building the octopus surface function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=559"
  },
  {
    "text": "which takes a surface_parameters argument. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=561"
  },
  {
    "text": "Since we're using textures, we declare a sampler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=564"
  },
  {
    "text": "On the right, you can see what our octopus looks like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=567"
  },
  {
    "text": "with an empty surface shader -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=569"
  },
  {
    "text": "it's gray and a little bit shiny. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=570"
  },
  {
    "text": "RealityKit puts you in complete control of what does ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=573"
  },
  {
    "text": "or does not contribute to your model's appearance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=575"
  },
  {
    "text": "In order to compute color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=578"
  },
  {
    "text": "there's a few things we need to do first. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=579"
  },
  {
    "text": "We'll store some convenience variables. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=581"
  },
  {
    "text": "We access our UV0, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=584"
  },
  {
    "text": "which we'll use as a texture coordinate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=586"
  },
  {
    "text": "Metal and USD have different texture coordinate systems, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=588"
  },
  {
    "text": "so we'll invert the y-coordinate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=591"
  },
  {
    "text": "to match the textures loaded from USD. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=593"
  },
  {
    "text": "Now we'll sample our transition texture -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=596"
  },
  {
    "text": "the three-layered texture our artist created. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=598"
  },
  {
    "text": "Our artist set up a small function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=601"
  },
  {
    "text": "that takes the mask value plus time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=603"
  },
  {
    "text": "and returns 0 to 1 values for blend and colorBlend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=605"
  },
  {
    "text": "Second step: color and normal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=609"
  },
  {
    "text": "With our previously computed blend variable, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=613"
  },
  {
    "text": "we can now calculate the octopus's color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=615"
  },
  {
    "text": "and see the transition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=618"
  },
  {
    "text": "To do this, we sample two textures: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=619"
  },
  {
    "text": "the base color and the secondary base color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=622"
  },
  {
    "text": "which we've stored in emissive_color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=625"
  },
  {
    "text": "Then we blend between the two colors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=627"
  },
  {
    "text": "using the previously computed colorBlend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=629"
  },
  {
    "text": "We'll multiply by base_color_tint -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=632"
  },
  {
    "text": "a value from the material -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=633"
  },
  {
    "text": "and set our base color on the surface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=635"
  },
  {
    "text": "Next we'll apply the normal map, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=638"
  },
  {
    "text": "which adds surface deviations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=640"
  },
  {
    "text": "most noticeable on the head and tentacles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=642"
  },
  {
    "text": "We sample the normal map texture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=646"
  },
  {
    "text": "unpack its value, and then set on the surface object. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=648"
  },
  {
    "text": "Onto material properties. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=652"
  },
  {
    "text": "Here's our octopus so far, with color and normal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=655"
  },
  {
    "text": "Let's see how surface properties affect its look. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=658"
  },
  {
    "text": "Roughness, which you'll see on the lower body; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=661"
  },
  {
    "text": "ambient occlusion, which will darken up the lower portions; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=663"
  },
  {
    "text": "and specular, which gives us a nice reflection on the eye ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=667"
  },
  {
    "text": "and some additional definition on the body. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=670"
  },
  {
    "text": "Let's add these to our shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=673"
  },
  {
    "text": "We sample four textures on the model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=675"
  },
  {
    "text": "one for each property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=677"
  },
  {
    "text": "Next we scale these values with material settings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=679"
  },
  {
    "text": "In addition, we're also increasing the roughness ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=683"
  },
  {
    "text": "as we transition from purple to red. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=685"
  },
  {
    "text": "Then we set our four values on the surface. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=689"
  },
  {
    "text": "Similar to before, we need to apply the shader to our model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=692"
  },
  {
    "text": "We assign this material to our model in our ARView subclass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=696"
  },
  {
    "text": "First we load our two additional textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=701"
  },
  {
    "text": "then load our surface shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=704"
  },
  {
    "text": "Like before, we're constructing new materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=706"
  },
  {
    "text": "from the object's base material, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=708"
  },
  {
    "text": "this time with a surface shader and our two additional textures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=710"
  },
  {
    "text": "And we're done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=715"
  },
  {
    "text": "So to recap, we've shown the seaweed animation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=717"
  },
  {
    "text": "using geometry modifiers and how to build ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=719"
  },
  {
    "text": "an octopus transition with surface shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=722"
  },
  {
    "text": "While we've demonstrated them separately, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=725"
  },
  {
    "text": "you can combine the two for even more interesting effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=727"
  },
  {
    "text": "Moving on to another highly requested feature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=731"
  },
  {
    "text": "support for adding custom post processing effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=734"
  },
  {
    "text": "RealityKit comes with a rich suite ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=738"
  },
  {
    "text": "of camera-matched post effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=739"
  },
  {
    "text": "like motion blur, camera noise, and depth of field. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=741"
  },
  {
    "text": "These effects are all designed to make virtual and real objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=749"
  },
  {
    "text": "feel like they're part of the same environment. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=752"
  },
  {
    "text": "These are available for you to customize on ARView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=755"
  },
  {
    "text": "This year, we're also exposing the ability for you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=758"
  },
  {
    "text": "to create your own fullscreen effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=760"
  },
  {
    "text": "This allows you to leverage RealityKit for photo realism, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=763"
  },
  {
    "text": "and add new effects to tailor the result for your app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=767"
  },
  {
    "text": "So what is a post process? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=770"
  },
  {
    "text": "A post process is a shader or series of shaders that execute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=772"
  },
  {
    "text": "after objects have been rendered and lit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=777"
  },
  {
    "text": "It also occurs after any RealityKit post effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=780"
  },
  {
    "text": "Its inputs are two textures: color and a depth buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=784"
  },
  {
    "text": "The depth buffer is displayed as greyscale here; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=789"
  },
  {
    "text": "it contains a distance value for each pixel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=791"
  },
  {
    "text": "relative to the camera. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=794"
  },
  {
    "text": "A post process writes its results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=796"
  },
  {
    "text": "to a target color texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=797"
  },
  {
    "text": "The simplest post effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=800"
  },
  {
    "text": "would copy source color into target color. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=801"
  },
  {
    "text": "We can build these in a few ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=805"
  },
  {
    "text": "Apple's platforms come with a number of technologies ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=807"
  },
  {
    "text": "that integrate well with post effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=809"
  },
  {
    "text": "such as Core Image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=811"
  },
  {
    "text": "Metal Performance Shaders, and SpriteKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=813"
  },
  {
    "text": "You can also write your own with the Metal Shading Language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=816"
  },
  {
    "text": "Let's start with some Core Image effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=819"
  },
  {
    "text": "Core Image is an Apple framework for image processing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=822"
  },
  {
    "text": "It has hundreds of color-processing, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=825"
  },
  {
    "text": "stylization, and deformation effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=828"
  },
  {
    "text": "that you can apply to images and video. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=830"
  },
  {
    "text": "Thermal is a neat effect -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=833"
  },
  {
    "text": "something you might turn on for an underwater fish finder. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=835"
  },
  {
    "text": "Let's see how easy it is to integrate with RealityKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=838"
  },
  {
    "text": "All of our post effects will follow the same pattern. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=841"
  },
  {
    "text": "You set render callbacks, respond to prepare with device, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=844"
  },
  {
    "text": "and then post process will be called every frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=849"
  },
  {
    "text": "Render callbacks exist on RealityKit's ARView. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=853"
  },
  {
    "text": "We want both the prepareWithDevice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=856"
  },
  {
    "text": "and postProcess callbacks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=858"
  },
  {
    "text": "Prepare with device will be called once ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=860"
  },
  {
    "text": "with the MTLDevice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=862"
  },
  {
    "text": "This is a good opportunity to create textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=864"
  },
  {
    "text": "load compute or render pipelines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=866"
  },
  {
    "text": "and check device capabilities. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=868"
  },
  {
    "text": "This is where we create our Core Image context. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=870"
  },
  {
    "text": "The postProcess callback is invoked each frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=873"
  },
  {
    "text": "We'll create a CIImage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=876"
  },
  {
    "text": "referencing our source color texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=878"
  },
  {
    "text": "Next we create our thermal filter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=880"
  },
  {
    "text": "If you're using a different Core Image filter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=883"
  },
  {
    "text": "this is where you'd configure its other parameters. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=885"
  },
  {
    "text": "Then we create a render destination, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=888"
  },
  {
    "text": "which targets our output color texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=890"
  },
  {
    "text": "and utilizes the context's command buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=892"
  },
  {
    "text": "We ask Core Image to preserve the image's orientation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=896"
  },
  {
    "text": "and start the task. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=899"
  },
  {
    "text": "That's it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=901"
  },
  {
    "text": "With Core Image, we've unlocked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=902"
  },
  {
    "text": "hundreds of prebuilt effects that we can use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=904"
  },
  {
    "text": "Now let's see how we can use Metal Performance Shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=907"
  },
  {
    "text": "to build new effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=910"
  },
  {
    "text": "Let's talk about bloom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=912"
  },
  {
    "text": "Bloom is a screen space technique that creates a glow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=913"
  },
  {
    "text": "around brightly lit objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=916"
  },
  {
    "text": "simulating a real-world lens effect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=919"
  },
  {
    "text": "Core Image contains a bloom effect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=922"
  },
  {
    "text": "but we're going to build our own ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=923"
  },
  {
    "text": "so we can control every step of the process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=925"
  },
  {
    "text": "We'll build the effect with Metal Performance Shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=928"
  },
  {
    "text": "a collection of highly optimized compute and graphics shaders. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=930"
  },
  {
    "text": "To build this shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=935"
  },
  {
    "text": "we're going to construct a graph of filters ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=936"
  },
  {
    "text": "using color as the source. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=938"
  },
  {
    "text": "We first want to isolate the areas that are bright. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=940"
  },
  {
    "text": "To do this, we use an operation called \"threshold to zero.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=943"
  },
  {
    "text": "It converts color to luminance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=947"
  },
  {
    "text": "and sets every pixel below a certain brightness level to 0. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=948"
  },
  {
    "text": "We then blur the result using a Gaussian blur, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=952"
  },
  {
    "text": "spreading light onto adjacent areas. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=956"
  },
  {
    "text": "Efficient blurs can be challenging to implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=958"
  },
  {
    "text": "and often require multiple stages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=960"
  },
  {
    "text": "Metal Performance Shaders handles this for us. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=962"
  },
  {
    "text": "Then we add this blurred texture to the original color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=965"
  },
  {
    "text": "adding a glow around bright areas. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=968"
  },
  {
    "text": "Let's implement this graph as a post effect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=971"
  },
  {
    "text": "We start by creating an intermediate bloomTexture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=975"
  },
  {
    "text": "Then execute our ThresholdToZero operation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=978"
  },
  {
    "text": "reading from sourceColor and writing to bloomTexture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=981"
  },
  {
    "text": "Then we perform a gaussianBlur in place. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=984"
  },
  {
    "text": "Finally, we add our original color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=988"
  },
  {
    "text": "and this bloomed color together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=990"
  },
  {
    "text": "That's it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=992"
  },
  {
    "text": "Now that we've seen a couple ways to create post effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=993"
  },
  {
    "text": "let's talk about a way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=996"
  },
  {
    "text": "to put effects on top of our output using SpriteKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=997"
  },
  {
    "text": "SpriteKit is Apple's framework for high performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1001"
  },
  {
    "text": "battery-efficient 2D games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1004"
  },
  {
    "text": "It's perfect for adding some effects on top of our 3D view. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1006"
  },
  {
    "text": "We'll use it to add some bubbles on the screen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1009"
  },
  {
    "text": "as a post effect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1012"
  },
  {
    "text": "using the same prepareWithDevice and postProcess callbacks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1013"
  },
  {
    "text": "We have the same two steps as before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1017"
  },
  {
    "text": "In prepareWithDevice, we'll create our SpriteKit renderer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1019"
  },
  {
    "text": "and load the scene containing our bubbles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1022"
  },
  {
    "text": "Then in our postProcess callback, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1024"
  },
  {
    "text": "we'll copy our source color to target color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1027"
  },
  {
    "text": "update our SpriteKit scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1029"
  },
  {
    "text": "and render on top of the 3D content. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1031"
  },
  {
    "text": "prepareWithDevice is pretty straightforward -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1033"
  },
  {
    "text": "we create our renderer and load our scene from a file. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1036"
  },
  {
    "text": "We'll be drawing this over our AR scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1040"
  },
  {
    "text": "so we need our SpriteKit background to be transparent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1042"
  },
  {
    "text": "In postProcess, we first blit the source color ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1046"
  },
  {
    "text": "to the targetColorTexture; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1049"
  },
  {
    "text": "this will be the background that SpriteKit renders in front of. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1051"
  },
  {
    "text": "Then advance our SpriteKit scene to the new time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1054"
  },
  {
    "text": "so our bubbles move upward. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1057"
  },
  {
    "text": "Set up a RenderPassDescriptor and render onto it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1060"
  },
  {
    "text": "And that's it! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1064"
  },
  {
    "text": "We've shown how to utilize existing frameworks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1065"
  },
  {
    "text": "to make post effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1067"
  },
  {
    "text": "but sometimes you really do need to make one from scratch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1069"
  },
  {
    "text": "You can also author a full-screen effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1073"
  },
  {
    "text": "by writing a compute shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1075"
  },
  {
    "text": "For our underwater demo, we needed a fog effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1078"
  },
  {
    "text": "that applies to virtual objects and camera passthrough. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1081"
  },
  {
    "text": "Fog simulates the scattering of light through a medium; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1085"
  },
  {
    "text": "its intensity is proportional to the distance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1088"
  },
  {
    "text": "To create this effect, we needed to know ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1091"
  },
  {
    "text": "how far each pixel is from the device. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1093"
  },
  {
    "text": "Fortunately, ARKit and RealityKit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1097"
  },
  {
    "text": "both provide access to depth information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1099"
  },
  {
    "text": "For LiDAR-enabled devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1103"
  },
  {
    "text": "ARKit provides access to sceneDepth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1105"
  },
  {
    "text": "containing distances in meters from the camera. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1107"
  },
  {
    "text": "These values are extremely accurate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1111"
  },
  {
    "text": "at a lower resolution than the full screen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1112"
  },
  {
    "text": "We could use this depth directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1116"
  },
  {
    "text": "but it doesn't include virtual objects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1118"
  },
  {
    "text": "so they wouldn't fog correctly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1120"
  },
  {
    "text": "In our postProcess, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1122"
  },
  {
    "text": "RealityKit provides access to depth for virtual content ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1124"
  },
  {
    "text": "and -- when scene understanding is enabled -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1127"
  },
  {
    "text": "approximated meshes for real-world objects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1129"
  },
  {
    "text": "The mesh builds progressively as you move, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1133"
  },
  {
    "text": "so it contains some holes where we haven't currently scanned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1136"
  },
  {
    "text": "These holes would show fog as if they were infinitely far away. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1139"
  },
  {
    "text": "We'll combine data from these two depth textures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1143"
  },
  {
    "text": "to resolve this discrepancy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1145"
  },
  {
    "text": "ARKit provides depth values as a texture. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1148"
  },
  {
    "text": "Each pixel is the distance, in meters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1151"
  },
  {
    "text": "of the sampled point. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1154"
  },
  {
    "text": "Since the sensor is at a fixed orientation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1156"
  },
  {
    "text": "on your iPhone or iPad, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1158"
  },
  {
    "text": "we'll ask ARKit to construct a conversion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1159"
  },
  {
    "text": "from the sensor's orientation to the current screen orientation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1162"
  },
  {
    "text": "and then invert the result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1166"
  },
  {
    "text": "To read virtual content depth, we need a little bit of info ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1168"
  },
  {
    "text": "about how RealityKit packs depth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1171"
  },
  {
    "text": "You'll notice that, unlike ARKit's sceneDepth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1174"
  },
  {
    "text": "brighter values are nearer to the camera. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1177"
  },
  {
    "text": "Values are stored in a 0 to 1 range, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1180"
  },
  {
    "text": "using an Infinite Reverse-Z Projection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1183"
  },
  {
    "text": "This just means that 0 means infinitely far away, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1186"
  },
  {
    "text": "and 1 is at the camera's near plane. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1189"
  },
  {
    "text": "We can easily reverse this transform ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1192"
  },
  {
    "text": "by dividing the near plane depth by the sampled depth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1194"
  },
  {
    "text": "Let's write a helper function to do this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1198"
  },
  {
    "text": "We have a Metal function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1201"
  },
  {
    "text": "taking the sample's depth and projection matrix. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1202"
  },
  {
    "text": "Pixels with no virtual content are exactly 0. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1205"
  },
  {
    "text": "We'll clamp to a small epsilon to prevent divide by zero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1208"
  },
  {
    "text": "To undo the perspective division, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1212"
  },
  {
    "text": "we take the last column's z value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1214"
  },
  {
    "text": "and divide by our sampled depth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1216"
  },
  {
    "text": "Great! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1219"
  },
  {
    "text": "Now that we have our two depth values, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1220"
  },
  {
    "text": "we can use the minimum of the two ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1221"
  },
  {
    "text": "as an input to our fog function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1223"
  },
  {
    "text": "Our fog has a few parameters: a maximum distance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1226"
  },
  {
    "text": "a maximum intensity at that distance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1230"
  },
  {
    "text": "and a power curve exponent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1232"
  },
  {
    "text": "The exact values were chosen experimentally. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1235"
  },
  {
    "text": "They shape our depth value to achieve our desired fog density. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1238"
  },
  {
    "text": "Now we're ready to put the pieces together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1242"
  },
  {
    "text": "We have our depth value from ARKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1244"
  },
  {
    "text": "a linearized depth value from RealityKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1246"
  },
  {
    "text": "and a function for our fog. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1249"
  },
  {
    "text": "Let's write our compute shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1251"
  },
  {
    "text": "For each pixel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1253"
  },
  {
    "text": "we start by sampling both linear depth values. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1254"
  },
  {
    "text": "Then we apply our fog function using our tuning parameters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1257"
  },
  {
    "text": "which turns linear depth into a 0 to 1 value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1261"
  },
  {
    "text": "Then we blend between source color and the fog color, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1264"
  },
  {
    "text": "depending on fogBlend's value, storing the result in outColor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1267"
  },
  {
    "text": "To recap, RealityKit's new post process API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1272"
  },
  {
    "text": "enables a wide range of post effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1276"
  },
  {
    "text": "With Core Image, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1279"
  },
  {
    "text": "we've unlocked hundreds of ready-built effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1280"
  },
  {
    "text": "You can easily build new ones with Metal Performance Shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1283"
  },
  {
    "text": "add screen overlays with SpriteKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1287"
  },
  {
    "text": "and write your own from scratch with Metal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1290"
  },
  {
    "text": "For more information about Core Image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1293"
  },
  {
    "text": "or Metal Performance Shaders, see the sessions listed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1295"
  },
  {
    "text": "Now that we've covered rendering effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1300"
  },
  {
    "text": "let's move onto our next topic, dynamic meshes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1302"
  },
  {
    "text": "In RealityKit, mesh resources store mesh data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1306"
  },
  {
    "text": "Previously, this opaque type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1309"
  },
  {
    "text": "allowed you to assign meshes to entities. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1311"
  },
  {
    "text": "This year, we're providing the ability to inspect meshes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1314"
  },
  {
    "text": "create, and update meshes at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1317"
  },
  {
    "text": "Let's look at how we can add special effects to the diver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1321"
  },
  {
    "text": "In this demo, we want to show a spiral effect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1325"
  },
  {
    "text": "where the spiral contours around the diver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1327"
  },
  {
    "text": "You can also see how the spiral is changing its mesh over time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1330"
  },
  {
    "text": "to animate its movement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1334"
  },
  {
    "text": "Let's have a look at how to create this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1336"
  },
  {
    "text": "using our new mesh APIs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1338"
  },
  {
    "text": "The effect boils down into three steps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1340"
  },
  {
    "text": "We use mesh inspection to measure the model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1344"
  },
  {
    "text": "by examining its vertices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1347"
  },
  {
    "text": "We then build a spiral, using the measurements as a guide. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1349"
  },
  {
    "text": "And finally, we can update the spiral over time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1353"
  },
  {
    "text": "Starting with mesh inspection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1358"
  },
  {
    "text": "To explain how meshes are stored, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1360"
  },
  {
    "text": "let's look at our diver model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1362"
  },
  {
    "text": "In RealityKit, the Diver's mesh ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1364"
  },
  {
    "text": "is represented as a mesh resource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1366"
  },
  {
    "text": "With this year's release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1368"
  },
  {
    "text": "MeshResource now contains a member called Contents. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1370"
  },
  {
    "text": "There is where all of the processed mesh geometry lives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1373"
  },
  {
    "text": "Contents contains a list of instances and models. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1377"
  },
  {
    "text": "Models contain the raw vertex data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1382"
  },
  {
    "text": "while instances reference them and add a transform. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1384"
  },
  {
    "text": "Instances allow the same geometry ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1388"
  },
  {
    "text": "to be displayed multiple times without copying the data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1389"
  },
  {
    "text": "A model can have multiple parts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1393"
  },
  {
    "text": "A part is a group of geometry with one material. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1395"
  },
  {
    "text": "Finally, each part contains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1399"
  },
  {
    "text": "the vertex data we're interested in, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1401"
  },
  {
    "text": "such as positions, normals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1403"
  },
  {
    "text": "texture coordinates, and indices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1405"
  },
  {
    "text": "Let's first look at how we would access this data in code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1408"
  },
  {
    "text": "We'll make an extension on MeshResource.Contents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1412"
  },
  {
    "text": "which calls a closure with the position of each vertex. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1415"
  },
  {
    "text": "We start by going through all of the instances. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1418"
  },
  {
    "text": "Each of these instances map to a model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1421"
  },
  {
    "text": "For each instance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1423"
  },
  {
    "text": "we find its transform relative to the entity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1425"
  },
  {
    "text": "We can then go into each of the model's parts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1427"
  },
  {
    "text": "and access the part's attributes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1430"
  },
  {
    "text": "For this function, we're only interested in position. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1433"
  },
  {
    "text": "We can then transform the vertex to the entity space position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1436"
  },
  {
    "text": "and call our callback. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1440"
  },
  {
    "text": "Now that we can visit the vertices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1442"
  },
  {
    "text": "let's look at how we want to use this data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1444"
  },
  {
    "text": "We'll section our diver into horizontal slices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1447"
  },
  {
    "text": "For each slice, we'll find the bounding radius of our model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1450"
  },
  {
    "text": "and do this for every slice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1453"
  },
  {
    "text": "To implement this, we'll start by creating ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1458"
  },
  {
    "text": "a zero-filled array with numSlices elements. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1460"
  },
  {
    "text": "We then figure out the bounds of the mesh along the y-axis ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1463"
  },
  {
    "text": "to create our slices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1466"
  },
  {
    "text": "Using the function we just created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1468"
  },
  {
    "text": "for each vertex in the model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1470"
  },
  {
    "text": "we figure out which slice it goes in ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1472"
  },
  {
    "text": "and we update the radius ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1474"
  },
  {
    "text": "with the largest radius for that slice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1476"
  },
  {
    "text": "Finally, we return a Slices object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1478"
  },
  {
    "text": "containing the radii and bounds. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1481"
  },
  {
    "text": "Now that we've analyzed our mesh to know how big it is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1484"
  },
  {
    "text": "let's look at how to create the spiral mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1487"
  },
  {
    "text": "The spiral is a dynamically generated mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1489"
  },
  {
    "text": "To create this mesh, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1492"
  },
  {
    "text": "we need to describe our data to RealityKit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1494"
  },
  {
    "text": "We do this with a mesh descriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1497"
  },
  {
    "text": "The mesh descriptor contains the positions, normals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1499"
  },
  {
    "text": "texture coordinates, primitives, and material indices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1502"
  },
  {
    "text": "Once you have a mesh descriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1506"
  },
  {
    "text": "you can generate a mesh resource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1507"
  },
  {
    "text": "This invokes RealityKit's mesh processor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1509"
  },
  {
    "text": "which optimizes your mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1512"
  },
  {
    "text": "It will merge duplicate vertices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1514"
  },
  {
    "text": "triangulate your quads and polygons, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1517"
  },
  {
    "text": "and represent the mesh in the most efficient format ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1519"
  },
  {
    "text": "for rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1521"
  },
  {
    "text": "The result of this processing gives us a mesh resource, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1523"
  },
  {
    "text": "which we can assign to an entity. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1525"
  },
  {
    "text": "Note that normals, texture coordinates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1528"
  },
  {
    "text": "and materials are optional. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1530"
  },
  {
    "text": "Our mesh processor will automatically ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1532"
  },
  {
    "text": "generate correct normals and populate them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1534"
  },
  {
    "text": "As part of the optimization process, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1537"
  },
  {
    "text": "RealityKit will regenerate the topology of the mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1539"
  },
  {
    "text": "If you need a specific topology, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1543"
  },
  {
    "text": "you can use MeshResource.Contents directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1545"
  },
  {
    "text": "Now that we know how creating a mesh works, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1548"
  },
  {
    "text": "let's look at how to create the spiral. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1550"
  },
  {
    "text": "To model the spiral, let's take a closer look at a section.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1552"
  },
  {
    "text": "A spiral is also known as a helix. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1558"
  },
  {
    "text": "We'll build this in evenly spaced segments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1561"
  },
  {
    "text": "We can calculate each point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1564"
  },
  {
    "text": "using the mathematical definition of a helix ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1566"
  },
  {
    "text": "and the radius from our analyzed mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1569"
  },
  {
    "text": "Using this function for each segment on the helix, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1572"
  },
  {
    "text": "we can define four vertices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1574"
  },
  {
    "text": "P0 and P1 are exactly the values that p() returns. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1577"
  },
  {
    "text": "To calculate P2 and P3, we can offset P0 and P1 vertically ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1581"
  },
  {
    "text": "with our given thickness. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1586"
  },
  {
    "text": "We're creating triangles, so we need a diagonal. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1588"
  },
  {
    "text": "We'll make two triangles using these points. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1591"
  },
  {
    "text": "Time to put it all together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1594"
  },
  {
    "text": "Our generateSpiral function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1597"
  },
  {
    "text": "needs to store positions and indices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1598"
  },
  {
    "text": "Indices reference values in positions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1601"
  },
  {
    "text": "For each segment, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1604"
  },
  {
    "text": "we'll calculate four positions and store their indices -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1605"
  },
  {
    "text": "i0 is the index of p0 when it's added to the array. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1609"
  },
  {
    "text": "Then we add the four positions and six indices -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1613"
  },
  {
    "text": "for two triangles -- to their arrays. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1616"
  },
  {
    "text": "Once you have your geometry, creating a mesh is simple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1619"
  },
  {
    "text": "First, create a new MeshDescriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1623"
  },
  {
    "text": "Then assign positions and primitives. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1626"
  },
  {
    "text": "We're using triangle primitives, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1628"
  },
  {
    "text": "but we could also choose quads or polygons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1630"
  },
  {
    "text": "Once those two fields are populated, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1633"
  },
  {
    "text": "we have enough to generate a MeshResource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1635"
  },
  {
    "text": "You can also provide other vertex attributes like normals, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1637"
  },
  {
    "text": "textureCoordinates, or material assignments. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1641"
  },
  {
    "text": "We've covered how to create the mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1644"
  },
  {
    "text": "The last thing in our spiral example is mesh updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1646"
  },
  {
    "text": "We use mesh updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1650"
  },
  {
    "text": "to get the spiral to move around the diver. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1652"
  },
  {
    "text": "To update the mesh, there's two ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1654"
  },
  {
    "text": "We could create a new MeshResource each frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1657"
  },
  {
    "text": "using the MeshDescriptors API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1660"
  },
  {
    "text": "But this is not an efficient route, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1662"
  },
  {
    "text": "as it will run through the mesh optimizer each frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1665"
  },
  {
    "text": "A more efficient route is to update the contents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1668"
  },
  {
    "text": "in the MeshResource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1670"
  },
  {
    "text": "You can generate a new MeshContents ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1672"
  },
  {
    "text": "and use it to replace the mesh. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1674"
  },
  {
    "text": "There is one caveat, however. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1676"
  },
  {
    "text": "If we created our original mesh using MeshDescriptor, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1678"
  },
  {
    "text": "RealityKit's mesh processor will have optimized the data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1682"
  },
  {
    "text": "Topology is also reduced to triangles. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1685"
  },
  {
    "text": "As a result, make sure you know how your mesh is affected ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1688"
  },
  {
    "text": "before applying any updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1691"
  },
  {
    "text": "Let's have a look at code for how you can update the spiral. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1694"
  },
  {
    "text": "We start by storing the contents of the existing spiral. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1697"
  },
  {
    "text": "Create a new model from the existing model. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1701"
  },
  {
    "text": "Then, for each part, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1704"
  },
  {
    "text": "we replace triangleIndices with a subset of indices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1705"
  },
  {
    "text": "Finally, with the new contents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1709"
  },
  {
    "text": "we can call replace on the existing MeshResource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1711"
  },
  {
    "text": "And that's it for dynamic meshes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1714"
  },
  {
    "text": "To summarize the key things about dynamic meshes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1716"
  },
  {
    "text": "we've introduced a new Contents field in the MeshResource. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1720"
  },
  {
    "text": "This container allows you to inspect and modify ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1723"
  },
  {
    "text": "a mesh's raw data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1726"
  },
  {
    "text": "You can create new meshes using MeshDescriptor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1728"
  },
  {
    "text": "This flexible route allows you to use triangles, quads, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1730"
  },
  {
    "text": "or even polygons, and RealityKit will generate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1734"
  },
  {
    "text": "an optimized mesh for rendering. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1737"
  },
  {
    "text": "Finally, to update meshes, we've provided the ability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1739"
  },
  {
    "text": "to update a MeshResource's contents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1742"
  },
  {
    "text": "which is ideal for frequent updates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1744"
  },
  {
    "text": "To wrap up, today we've shown off ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1747"
  },
  {
    "text": "some of the new rendering features in RealityKit 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1749"
  },
  {
    "text": "Geometry modifiers let you move and modify vertices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1753"
  },
  {
    "text": "Surface shaders allow you to define ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1757"
  },
  {
    "text": "your model's surface appearance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1759"
  },
  {
    "text": "You can use post effects to apply effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1761"
  },
  {
    "text": "to the final frame, and dynamic meshes make it easy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1764"
  },
  {
    "text": "to create and modify meshes at runtime. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1768"
  },
  {
    "text": "To see more of this year's features, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1771"
  },
  {
    "text": "don't miss \"Dive into RealityKit 2.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1773"
  },
  {
    "text": "And for more information about RealityKit, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1776"
  },
  {
    "text": "watch \"Building Apps with RealityKit.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1778"
  },
  {
    "text": "We're very excited about this year's release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1781"
  },
  {
    "text": "and can't wait to see the experiences you build with it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1783"
  },
  {
    "text": "Thank you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1786"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10075/?time=1787"
  }
]