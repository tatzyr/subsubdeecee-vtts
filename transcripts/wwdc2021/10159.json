[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=5"
  },
  {
    "text": "David Hayward: Welcome, everyone.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=7"
  },
  {
    "text": "My name is David Hayward.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=9"
  },
  {
    "text": "I'm a senior engineer on the Core Image team, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=10"
  },
  {
    "text": "and I'll be giving a short presentation today ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=12"
  },
  {
    "text": "that will show you the latest best practices ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=14"
  },
  {
    "text": "when adding custom Metal Core Image kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=17"
  },
  {
    "text": "to your Xcode project.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=20"
  },
  {
    "text": "In this presentation, I will discuss ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=22"
  },
  {
    "text": "the general benefits of writing custom CIKernels in Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=25"
  },
  {
    "text": "Next, I will introduce two recommended ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=29"
  },
  {
    "text": "that Metal CIKernels can be built.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=31"
  },
  {
    "text": "And then I will demonstrate step by step ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=35"
  },
  {
    "text": "how to add these to your project.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=37"
  },
  {
    "text": "First off, let's review the benefits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=40"
  },
  {
    "text": "of writing custom CIKernels in Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=42"
  },
  {
    "text": "By writing CIKernels in Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=46"
  },
  {
    "text": "you will get access to Core Image features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=47"
  },
  {
    "text": "such as automatic tiling and concatenation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=49"
  },
  {
    "text": "It will improve your app's performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=53"
  },
  {
    "text": "by shifting some of the time to compile kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=55"
  },
  {
    "text": "from runtime to when your app is built.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=58"
  },
  {
    "text": "And doing so will give your kernels access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=62"
  },
  {
    "text": "to high-performance features such as gather-reads, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=64"
  },
  {
    "text": "group-writes, and half-float math.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=67"
  },
  {
    "text": "Last but not least, it will make your life as a developer easier ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=71"
  },
  {
    "text": "by syntax highlighting as you type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=74"
  },
  {
    "text": "and inline error checking when you build.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=76"
  },
  {
    "text": "So with that for motivation, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=80"
  },
  {
    "text": "I will now show you step by step ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=81"
  },
  {
    "text": "how to add Metal Core Image kernels to your application.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=83"
  },
  {
    "text": "There are now two recommended ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=88"
  },
  {
    "text": "to add CIKernels to your project, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=89"
  },
  {
    "text": "and I will describe both methods in detail.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=92"
  },
  {
    "text": "I will refer to this as the extern method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=95"
  },
  {
    "text": "because it requires the kernel functions to be specified ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=97"
  },
  {
    "text": "as extern \"C\" and built using custom build flags.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=100"
  },
  {
    "text": "The second method is new in iOS 15 and macOS 12.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=105"
  },
  {
    "text": "I will refer to this as the stitchable method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=110"
  },
  {
    "text": "because it requires the kernel functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=112"
  },
  {
    "text": "to be in attributed as stitchable.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=114"
  },
  {
    "text": "Its implementation uses Metal Dynamic Libraries.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=117"
  },
  {
    "text": "In both methods, there are four general steps to follow.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=121"
  },
  {
    "text": "First, is to configure your project appropriately.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=124"
  },
  {
    "text": "Second, is to add Metal CIKernel source files to your project.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=128"
  },
  {
    "text": "Third, is to write your Metal CIKernel code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=133"
  },
  {
    "text": "And fourth is to write Swift or Objective-C code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=136"
  },
  {
    "text": "to initialize and apply your kernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=139"
  },
  {
    "text": "to create a new CIImage.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=141"
  },
  {
    "text": "First, let's describe these four steps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=145"
  },
  {
    "text": "when using extern CIKernels, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=147"
  },
  {
    "text": "starting with project configuration.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=149"
  },
  {
    "text": "Unlike conventional Metal compute and graphics shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=152"
  },
  {
    "text": "this Core Image Metal code needs to be compiled and linked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=155"
  },
  {
    "text": "with special flags.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=158"
  },
  {
    "text": "I recommend adding two custom build rules ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=160"
  },
  {
    "text": "to your project targets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=163"
  },
  {
    "text": "which will make using these flags automatic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=164"
  },
  {
    "text": "First, you will go to the project's target settings ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=168"
  },
  {
    "text": "and add a build rule for files that end in .ci.metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=171"
  },
  {
    "text": "For files with this extension, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=176"
  },
  {
    "text": "this rule will run a one-line script ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=177"
  },
  {
    "text": "that calls the Metal compiler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=180"
  },
  {
    "text": "with the required -fcikernel flag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=181"
  },
  {
    "text": "This build rule will produce an output binary ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=186"
  },
  {
    "text": "that will end in .ci.air.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=188"
  },
  {
    "text": "Next, you will add a second build rule ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=192"
  },
  {
    "text": "for files that end in .ci.air.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=195"
  },
  {
    "text": "For files with this extension, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=198"
  },
  {
    "text": "this rule will run a one-line script ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=200"
  },
  {
    "text": "that calls the Metal linker with the required -cikernel flag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=202"
  },
  {
    "text": "This build rule will produce an output ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=207"
  },
  {
    "text": "in your app's Resources directory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=210"
  },
  {
    "text": "that will end in .ci.metallib.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=212"
  },
  {
    "text": "Now that you have added the custom build rules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=216"
  },
  {
    "text": "all you need to do is add .ci.metal sources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=218"
  },
  {
    "text": "to your project.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=221"
  },
  {
    "text": "To do that, select from the File menu ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=223"
  },
  {
    "text": "that you want to add a new Metal file ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=225"
  },
  {
    "text": "and then give that new file a name ends in .ci.metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=228"
  },
  {
    "text": "The next step is to write your CIKernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=234"
  },
  {
    "text": "in the Metal source file.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=236"
  },
  {
    "text": "First, at the top of the source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=239"
  },
  {
    "text": "you will include the CoreImage.h header ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=240"
  },
  {
    "text": "so that you get access to all the classes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=243"
  },
  {
    "text": "that Core Image provides.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=245"
  },
  {
    "text": "The kernel must be specified as extern \"C\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=248"
  },
  {
    "text": "to be recognized by Core Image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=251"
  },
  {
    "text": "The content of your actual kernel implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=254"
  },
  {
    "text": "is up to your imagination.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=257"
  },
  {
    "text": "For one example of what you can do, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=259"
  },
  {
    "text": "I recommend that you watch our WWDC 2020 presentation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=261"
  },
  {
    "text": "on \"HDR editing and playback using AVFoundation.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=266"
  },
  {
    "text": "The final step is to add Swift code to load your kernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=271"
  },
  {
    "text": "and apply it to create a new image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=274"
  },
  {
    "text": "Kernels are typically used in a CIFilter subclass ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=277"
  },
  {
    "text": "which will have properties such as an inputImage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=280"
  },
  {
    "text": "and other input parameters.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=283"
  },
  {
    "text": "I recommend that your filter instantiate its CIKernel object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=286"
  },
  {
    "text": "into a static property.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=290"
  },
  {
    "text": "This way, the work of loading the metallib resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=292"
  },
  {
    "text": "is done only once when it is first needed.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=294"
  },
  {
    "text": "Because of the custom build rule I described earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=299"
  },
  {
    "text": "you will need to specify a resource URL ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=302"
  },
  {
    "text": "with the same name as your source ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=304"
  },
  {
    "text": "and an extension of .ci.metallib.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=306"
  },
  {
    "text": "Lastly, a CIFilter subclass must override ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=310"
  },
  {
    "text": "the outputImage property.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=313"
  },
  {
    "text": "In the getter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=316"
  },
  {
    "text": "you will take the kernel from a static property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=317"
  },
  {
    "text": "and use its apply method to create a new image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=320"
  },
  {
    "text": "based on the input properties.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=323"
  },
  {
    "text": "So that fully describes the process ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=326"
  },
  {
    "text": "of building extern CIKernels.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=328"
  },
  {
    "text": "Let's now describe the new process ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=331"
  },
  {
    "text": "of building stitchable CIKernels.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=332"
  },
  {
    "text": "With the stitchable method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=337"
  },
  {
    "text": "only one setting change is needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=338"
  },
  {
    "text": "to configure your Xcode project.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=340"
  },
  {
    "text": "This setting will tell the Metal linker ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=342"
  },
  {
    "text": "to link against the Core Image framework.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=344"
  },
  {
    "text": "To do this, just go to the project's target setting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=347"
  },
  {
    "text": "and add a build setting for Other Metal Linker Flags ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=350"
  },
  {
    "text": "with the value \"-framework CoreImage\".",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=353"
  },
  {
    "text": "Because stitchable CIKernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=356"
  },
  {
    "text": "don't require custom build rules, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=357"
  },
  {
    "text": "you can simply add .metal sources to your project ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=359"
  },
  {
    "text": "without any special suffix.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=363"
  },
  {
    "text": "You can add kernels in either one or several sources files.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=365"
  },
  {
    "text": "By default, Xcode will build all of them into one .metallib resource.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=369"
  },
  {
    "text": "The next step is to write your CIKernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=374"
  },
  {
    "text": "in the Metal source file.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=376"
  },
  {
    "text": "As before, you will include the CoreImage.h header ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=378"
  },
  {
    "text": "to get access to the Core Image classes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=382"
  },
  {
    "text": "But with this method, the kernel must be attributed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=385"
  },
  {
    "text": "as ] to be recognized by Core Image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=388"
  },
  {
    "text": "Once again, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=392"
  },
  {
    "text": "the final step is to add Swift code to load your kernel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=394"
  },
  {
    "text": "and apply it to create a new image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=397"
  },
  {
    "text": "The only change with stitchable CIKernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=399"
  },
  {
    "text": "is that you can simply load the resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=402"
  },
  {
    "text": "with the standard name of default.metallib.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=404"
  },
  {
    "text": "That concludes the process of building stitchable CIKernels.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=407"
  },
  {
    "text": "It is worth mentioning some of the benefits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=412"
  },
  {
    "text": "of using this method.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=414"
  },
  {
    "text": "Stitchable kernels can link against other Metal libraries.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=416"
  },
  {
    "text": "And they now support input parameters ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=420"
  },
  {
    "text": "that are integer and unsigned integer vector types.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=422"
  },
  {
    "text": "Another niche benefit is that stitchable kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=426"
  },
  {
    "text": "can be compiled from source at runtime.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=429"
  },
  {
    "text": "Most applications should not use this feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=432"
  },
  {
    "text": "because it will incur longer initial compile times.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=434"
  },
  {
    "text": "That said, there are some classes of applications ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=438"
  },
  {
    "text": "that may benefit from this flexibility.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=440"
  },
  {
    "text": "There is one last topic to cover in this presentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=444"
  },
  {
    "text": "The stitchable CIKernel implementation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=448"
  },
  {
    "text": "depends on two important Metal features.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=450"
  },
  {
    "text": "The first is the new Metal Shading Language version 2.4.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=453"
  },
  {
    "text": "Among other things, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=457"
  },
  {
    "text": "this versions supports the ] attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=459"
  },
  {
    "text": "that causes the compiler to associate additional metadata ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=461"
  },
  {
    "text": "with each function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=465"
  },
  {
    "text": "The second is the Metal Dynamic Libraries feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=468"
  },
  {
    "text": "that is used so that your kernels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=471"
  },
  {
    "text": "can link against the Core Image Metal classes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=472"
  },
  {
    "text": "For more details on these Metal features, be sure to watch the ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=476"
  },
  {
    "text": "\"Discover Compilation Workflows in Metal\" presentation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=480"
  },
  {
    "text": "Be aware, though, that Metal Dynamic Libraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=483"
  },
  {
    "text": "are only supported on some graphics devices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=485"
  },
  {
    "text": "specifically iPhone and iPad with A11 and later, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=489"
  },
  {
    "text": "all Macs with Apple silicon, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=493"
  },
  {
    "text": "and Intel Macs with AMD Navi and Vega GPUs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=496"
  },
  {
    "text": "Your application should check the Metal device property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=501"
  },
  {
    "text": "supportsDynamicLibraries ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=504"
  },
  {
    "text": "before using stitchable CIKernels.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=506"
  },
  {
    "text": "So that concludes my step-by-step description ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=510"
  },
  {
    "text": "of how to use the two recommended ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=512"
  },
  {
    "text": "to add Metal CIKernels to your application.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=515"
  },
  {
    "text": "For each method, I've covered how to configure your project, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=519"
  },
  {
    "text": "write the kernel source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=522"
  },
  {
    "text": "and initialize the kernel objects.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=523"
  },
  {
    "text": "I hope that this allows you to add great visual effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=526"
  },
  {
    "text": "to your app's images and videos.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=529"
  },
  {
    "text": "Thank you and enjoy the rest of WWDC 2021! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=531"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10159/?time=535"
  }
]