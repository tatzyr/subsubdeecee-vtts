[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=6"
  },
  {
    "text": "Philippe Hausler: Hi, my name is Philippe, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=9"
  },
  {
    "text": "and I am really excited to introduce you ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=11"
  },
  {
    "text": "to a cool new feature in Swift, AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=13"
  },
  {
    "text": "Today we'll go over what async sequences are ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=17"
  },
  {
    "text": "and the fundamentals behind them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=20"
  },
  {
    "text": "Then we'll talk about how you can use them in your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=22"
  },
  {
    "text": "and go over a few of the new AsyncSequence APIs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=25"
  },
  {
    "text": "And finally, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=29"
  },
  {
    "text": "we'll explore how you can build your own async sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=30"
  },
  {
    "text": "So let's dive right in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=34"
  },
  {
    "text": "This is a really simple tool I wrote to illustrate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=36"
  },
  {
    "text": "some of the cool new stuff you can do with AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=38"
  },
  {
    "text": "In this tool, we start off with a URL to an endpoint.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=42"
  },
  {
    "text": "It lists recent earthquakes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=46"
  },
  {
    "text": "Now, normally downloading stuff is really an asynchronous task ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=48"
  },
  {
    "text": "that can take some time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=52"
  },
  {
    "text": "But in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=54"
  },
  {
    "text": "we don't want to wait for all the things to download; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=55"
  },
  {
    "text": "instead, we want to show things as they are received.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=57"
  },
  {
    "text": "So I decided to shake things up a bit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=60"
  },
  {
    "text": "and use the new async/await features ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=63"
  },
  {
    "text": "to get the lines responded from this endpoint.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=65"
  },
  {
    "text": "The data that we're fetching ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=68"
  },
  {
    "text": "is formatted as comma-separated text, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=69"
  },
  {
    "text": "so each line is a complete row of data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=72"
  },
  {
    "text": "Since the async sequence of lines is emitting each line ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=74"
  },
  {
    "text": "as it's received, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=77"
  },
  {
    "text": "that means we can potentially have a really large download ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=78"
  },
  {
    "text": "ahead of us.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=81"
  },
  {
    "text": "But by emitting them as we get them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=82"
  },
  {
    "text": "the snippet feels really responsive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=84"
  },
  {
    "text": "and the most awesome part about it is that you can use ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=87"
  },
  {
    "text": "the same things that you're familiar with using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=90"
  },
  {
    "text": "from regular sequences in this new async context.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=91"
  },
  {
    "text": "That means that you can use the new for-await-in syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=95"
  },
  {
    "text": "to iterate, and functions like map, filter, and reduce; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=99"
  },
  {
    "text": "or -- like in this sample -- the dropFirst function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=103"
  },
  {
    "text": "to manipulate those values.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=106"
  },
  {
    "text": "So how does this work? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=108"
  },
  {
    "text": "Well, a lot of things that I'm going to talk about today ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=110"
  },
  {
    "text": "have their groundwork based in the async/await talk.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=113"
  },
  {
    "text": "But let's recap a few key points.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=116"
  },
  {
    "text": "Async functions let you write concurrent code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=119"
  },
  {
    "text": "without the need for callbacks, by using the await keyword.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=122"
  },
  {
    "text": "Calling an async function will suspend and then be resumed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=126"
  },
  {
    "text": "whenever a value or error is produced.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=129"
  },
  {
    "text": "AsyncSequence, on the other hand, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=132"
  },
  {
    "text": "will suspend on each element and resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=134"
  },
  {
    "text": "when the underlying iterator produces a value or throws.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=137"
  },
  {
    "text": "Basically, as the name implies, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=142"
  },
  {
    "text": "they're just like regular sequences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=144"
  },
  {
    "text": "but with a few key differences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=146"
  },
  {
    "text": "Namely, each element is delivered asynchronously.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=149"
  },
  {
    "text": "But because they are an asynchronous delivery, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=153"
  },
  {
    "text": "that means that failure is definitely a possibility.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=155"
  },
  {
    "text": "Some async sequences throw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=159"
  },
  {
    "text": "but if failure is not an option, others do not.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=161"
  },
  {
    "text": "Just like functions that throw, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=165"
  },
  {
    "text": "the compiler will help make sure that errors are handled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=167"
  },
  {
    "text": "when iterating or composing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=169"
  },
  {
    "text": "Generally speaking, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=172"
  },
  {
    "text": "asynchronous sequences are a description ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=173"
  },
  {
    "text": "of how to produce values over time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=175"
  },
  {
    "text": "So an async sequence may be zero or more values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=177"
  },
  {
    "text": "and then signify completion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=180"
  },
  {
    "text": "with returning a nil from its iterator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=182"
  },
  {
    "text": "just like sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=184"
  },
  {
    "text": "When an error occurs, that's also a point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=185"
  },
  {
    "text": "at which the async sequence is at a terminal state, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=188"
  },
  {
    "text": "and after an error happens, they'll return nil ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=191"
  },
  {
    "text": "for any subsequent calls to next on their iterator.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=194"
  },
  {
    "text": "So let's take a dive into how that definition works ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=197"
  },
  {
    "text": "by first starting off with regular iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=200"
  },
  {
    "text": "Here we have a pretty familiar pattern.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=204"
  },
  {
    "text": "This is a for-in loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=206"
  },
  {
    "text": "In this case, it's iterating quakes from a sequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=208"
  },
  {
    "text": "and then calling a function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=211"
  },
  {
    "text": "when the magnitude is above a certain value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=212"
  },
  {
    "text": "The compiler has knowledge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=215"
  },
  {
    "text": "of how this iteration should work, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=216"
  },
  {
    "text": "but what it does isn't magic.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=218"
  },
  {
    "text": "The compilation step ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=221"
  },
  {
    "text": "really just does some straightforward transformations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=222"
  },
  {
    "text": "Let's examine those transformations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=226"
  },
  {
    "text": "so you can understand what the asynchronous form of this is.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=228"
  },
  {
    "text": "This is roughly what the compiler does ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=232"
  },
  {
    "text": "when building the previous code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=234"
  },
  {
    "text": "It first starts off by creating an iterator variable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=236"
  },
  {
    "text": "and then uses a while loop to get every quake ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=239"
  },
  {
    "text": "produced by the iterator when next is invoked.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=241"
  },
  {
    "text": "To use the new async/await functionality, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=244"
  },
  {
    "text": "there is one slight alteration that can be made.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=247"
  },
  {
    "text": "It's as simple as changing that next function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=250"
  },
  {
    "text": "to be an asynchronous one.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=253"
  },
  {
    "text": "We can now have the iteration participate in Swift concurrency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=255"
  },
  {
    "text": "by awaiting the next quake.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=259"
  },
  {
    "text": "Let's rewind back to uncover what this would have been like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=261"
  },
  {
    "text": "if the loop was on an async sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=265"
  },
  {
    "text": "As previously mentioned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=268"
  },
  {
    "text": "we need to await each item out of the async sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=269"
  },
  {
    "text": "This is reflected in the new for-await-in syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=273"
  },
  {
    "text": "This all means that if you know how to use Sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=277"
  },
  {
    "text": "you already have a good idea on how to use AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=280"
  },
  {
    "text": "There are a few ways you can utilize async sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=284"
  },
  {
    "text": "As we just covered, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=287"
  },
  {
    "text": "you can use the new for-await-in syntax; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=289"
  },
  {
    "text": "or if the async sequence throws, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=292"
  },
  {
    "text": "you can use the new for-try-await-in syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=294"
  },
  {
    "text": "This lets you easily iterate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=299"
  },
  {
    "text": "the values produced asynchronously -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=300"
  },
  {
    "text": "without having to muck about with closures -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=303"
  },
  {
    "text": "and use the syntax you are already familiar with ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=305"
  },
  {
    "text": "to iterate through them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=308"
  },
  {
    "text": "Even things like break and continue just work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=310"
  },
  {
    "text": "Now you have now had a good introduction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=314"
  },
  {
    "text": "to the theory of async sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=315"
  },
  {
    "text": "Let's explore that iteration just a bit further.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=318"
  },
  {
    "text": "Given a source that is an async sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=321"
  },
  {
    "text": "you can await each value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=323"
  },
  {
    "text": "by using the for-await-in syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=325"
  },
  {
    "text": "This means that it will await each item ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=328"
  },
  {
    "text": "produced by the iterator, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=331"
  },
  {
    "text": "and when it would hit a terminal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=332"
  },
  {
    "text": "it completes the loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=334"
  },
  {
    "text": "When iterating async sequences, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=336"
  },
  {
    "text": "breaking is obviously a good way to terminate iteration early ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=337"
  },
  {
    "text": "from inside the loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=341"
  },
  {
    "text": "This works just like regular sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=343"
  },
  {
    "text": "Here we're breaking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=346"
  },
  {
    "text": "when the location data is not present for the quake.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=347"
  },
  {
    "text": "Or if we have some of value we want to skip, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=350"
  },
  {
    "text": "we can use continue.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=353"
  },
  {
    "text": "In this case, if the depth is greater than some value, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=355"
  },
  {
    "text": "we're skipping those ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=358"
  },
  {
    "text": "and continuing on to await the next quake.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=359"
  },
  {
    "text": "This next iteration from the download ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=364"
  },
  {
    "text": "works just like before, but in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=367"
  },
  {
    "text": "the source that we have can throw an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=370"
  },
  {
    "text": "Just like throwing functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=372"
  },
  {
    "text": "try is required to process each element ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=374"
  },
  {
    "text": "when the AsyncSequence being iterated can throw.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=376"
  },
  {
    "text": "And also just like throwing functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=380"
  },
  {
    "text": "the compiler will detect when you're missing a try ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=382"
  },
  {
    "text": "and offer you a Fix-it to correct the mistake.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=384"
  },
  {
    "text": "This means that when an async sequence can produce errors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=388"
  },
  {
    "text": "you're always safe, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=391"
  },
  {
    "text": "because the language forces you to either throw that error ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=392"
  },
  {
    "text": "or catch it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=395"
  },
  {
    "text": "This second iteration runs sequentially ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=397"
  },
  {
    "text": "after the iteration of the first loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=399"
  },
  {
    "text": "Running code sequentially isn't always what's desired.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=402"
  },
  {
    "text": "If it's useful to run the iteration ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=406"
  },
  {
    "text": "concurrent to other things going on, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=408"
  },
  {
    "text": "you can create a new async task that encapsulates the iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=410"
  },
  {
    "text": "This can be useful when you know the async sequences you're using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=415"
  },
  {
    "text": "might run indefinitely.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=418"
  },
  {
    "text": "Now, even though that sequence could potentially be indefinite, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=421"
  },
  {
    "text": "it's considerably less common to occur.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=424"
  },
  {
    "text": "But in the world of asynchronous behavior, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=427"
  },
  {
    "text": "it is something much more common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=429"
  },
  {
    "text": "and something that you need to consider when using them.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=432"
  },
  {
    "text": "Thankfully, the facilities for concurrency in Swift ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=435"
  },
  {
    "text": "make this really easy and safe to do.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=437"
  },
  {
    "text": "This can be also really helpful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=441"
  },
  {
    "text": "when you want to potentially cancel the iteration externally.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=443"
  },
  {
    "text": "Here we can run the two iterations concurrently ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=447"
  },
  {
    "text": "and terminate the iteration later on.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=449"
  },
  {
    "text": "It's pretty easy with tasks to scope the work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=452"
  },
  {
    "text": "of an iteration that might be indefinite ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=455"
  },
  {
    "text": "to the lifetime of some container.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=458"
  },
  {
    "text": "Let's next take a tour of some of the AsyncSequence APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=460"
  },
  {
    "text": "that are available as of macOS Monterey, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=464"
  },
  {
    "text": "iOS 15, tvOS 15, and watchOS 8.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=467"
  },
  {
    "text": "There are a lot of them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=471"
  },
  {
    "text": "but I'll show you some of the highlights.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=472"
  },
  {
    "text": "Reading from files is often a prime use case ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=475"
  },
  {
    "text": "for asynchronous behavior.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=478"
  },
  {
    "text": "FileHandle now has a new bytes property that gives access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=480"
  },
  {
    "text": "to an asynchronous sequence of bytes from that FileHandle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=484"
  },
  {
    "text": "This can be used in conjunction with the new extension ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=487"
  },
  {
    "text": "on AsyncSequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=490"
  },
  {
    "text": "that converts asynchronous sequences of bytes into lines.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=492"
  },
  {
    "text": "But dealing with files is so common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=496"
  },
  {
    "text": "that we decided that URL should have accessors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=499"
  },
  {
    "text": "for both bytes and lines.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=501"
  },
  {
    "text": "This is that same API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=504"
  },
  {
    "text": "that I used in the initial example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=505"
  },
  {
    "text": "It's a convenience property on URL ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=508"
  },
  {
    "text": "to return an AsyncSequence of lines from the contents, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=510"
  },
  {
    "text": "either from a file or from the network.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=514"
  },
  {
    "text": "I'm certain this will make a number ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=517"
  },
  {
    "text": "of previously really complicated tasks easy and safe.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=518"
  },
  {
    "text": "Sometimes getting things from the network ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=522"
  },
  {
    "text": "requires a bit more control over the responses ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=524"
  },
  {
    "text": "and authentication.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=527"
  },
  {
    "text": "So URLSession now has a bytes function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=528"
  },
  {
    "text": "to fetch an async sequence of bytes given a URL or URLRequest.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=531"
  },
  {
    "text": "If you want to know more, you should definitely check out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=537"
  },
  {
    "text": "the session \"Use async/ await with URLSession\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=539"
  },
  {
    "text": "for some more details on this and a whole lot more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=543"
  },
  {
    "text": "new asynchronous capabilities with URLSession.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=546"
  },
  {
    "text": "But files and networks are not the only thing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=550"
  },
  {
    "text": "that makes sense for AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=553"
  },
  {
    "text": "Notifications can be now awaited with the new notifications API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=555"
  },
  {
    "text": "And iteration is not the only way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=560"
  },
  {
    "text": "to interact with an AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=562"
  },
  {
    "text": "In this example, we're awaiting the first notification ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=565"
  },
  {
    "text": "for remote changes that has a store UUID that matches.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=568"
  },
  {
    "text": "Using methods like firstWhere, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=573"
  },
  {
    "text": "along with the notifications async sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=575"
  },
  {
    "text": "allows for some really neat new design patterns ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=577"
  },
  {
    "text": "that can make code that was previously expressing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=580"
  },
  {
    "text": "complicated logic ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=582"
  },
  {
    "text": "now compact and easier to read.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=584"
  },
  {
    "text": "And if all of those weren't cool enough, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=587"
  },
  {
    "text": "there are a whole lot of new APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=589"
  },
  {
    "text": "for asynchronously manipulating values from async sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=591"
  },
  {
    "text": "These should be pretty familiar, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=595"
  },
  {
    "text": "because they're some of the same functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=596"
  },
  {
    "text": "that are available on Sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=598"
  },
  {
    "text": "We've already covered a few so far, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=600"
  },
  {
    "text": "like dropFirst and firstWhere, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=601"
  },
  {
    "text": "but there are a whole lot more than just those.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=604"
  },
  {
    "text": "Pretty much anything you can think of for using on Sequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=606"
  },
  {
    "text": "now has an asynchronous counterpart ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=609"
  },
  {
    "text": "for working with AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=611"
  },
  {
    "text": "Now that was a lot to take in, and you might be thinking, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=614"
  },
  {
    "text": "\"Hey, those new APIs are really cool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=617"
  },
  {
    "text": "and that syntax is super neat, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=619"
  },
  {
    "text": "but how can I make my own async sequences?\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=622"
  },
  {
    "text": "Well, let's do exactly that! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=625"
  },
  {
    "text": "There are a few ways of implementing an async sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=627"
  },
  {
    "text": "but I'm going to focus in on how to adapt your existing code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=630"
  },
  {
    "text": "Particularly, there are a few design patterns ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=635"
  },
  {
    "text": "that work really well with AsyncSequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=637"
  },
  {
    "text": "and we have some fantastic facilities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=640"
  },
  {
    "text": "for making what you already have interact with this new concept.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=642"
  },
  {
    "text": "Some of those design patterns are like closures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=646"
  },
  {
    "text": "that are called multiple times, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=649"
  },
  {
    "text": "but also some delegates can work nicely too.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=651"
  },
  {
    "text": "Pretty much anything that does not need a response back ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=654"
  },
  {
    "text": "and is just informing of a new value that occurs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=657"
  },
  {
    "text": "can be a prime candidate for making an async sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=660"
  },
  {
    "text": "These design patterns are really common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=664"
  },
  {
    "text": "and you likely already have a few in your apps today.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=666"
  },
  {
    "text": "This is an example of a common handler pattern.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=669"
  },
  {
    "text": "It's a class that has a handler property ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=672"
  },
  {
    "text": "and a start and stop method.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=675"
  },
  {
    "text": "It seems like a perfect candidate for AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=677"
  },
  {
    "text": "Existing usage might be something like this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=681"
  },
  {
    "text": "where a monitor is created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=684"
  },
  {
    "text": "and a handler to get values is assigned, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=685"
  },
  {
    "text": "and then the monitor is started ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=688"
  },
  {
    "text": "so that quakes can be sent to the handler.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=689"
  },
  {
    "text": "Later on, the monitor might be stopped ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=692"
  },
  {
    "text": "to cancel the events being produced.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=694"
  },
  {
    "text": "We can use the same interface to adapt the usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=698"
  },
  {
    "text": "to the new AsyncStream type.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=702"
  },
  {
    "text": "It takes only a small bit of code to use it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=704"
  },
  {
    "text": "and allows you to build an async sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=707"
  },
  {
    "text": "When constructing an async stream, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=711"
  },
  {
    "text": "an element type and construction closure is specified.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=713"
  },
  {
    "text": "The closure has a continuation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=717"
  },
  {
    "text": "that can yield values more than once, finish, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=719"
  },
  {
    "text": "or handle termination.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=721"
  },
  {
    "text": "So this means, in this case, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=724"
  },
  {
    "text": "the monitor can be created inside the construction closure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=726"
  },
  {
    "text": "And then the handler can be assigned to yield quakes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=730"
  },
  {
    "text": "to the continuation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=733"
  },
  {
    "text": "And then the onTermination can handle the cancellation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=734"
  },
  {
    "text": "and cleanup.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=737"
  },
  {
    "text": "And then we can start monitoring.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=738"
  },
  {
    "text": "The same monitor code that we had before ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=740"
  },
  {
    "text": "can easily be encapsulated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=743"
  },
  {
    "text": "within the async stream's construction.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=744"
  },
  {
    "text": "This reduces the need to replicate the same logic ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=746"
  },
  {
    "text": "in every use site.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=749"
  },
  {
    "text": "And this is how the usage of this async stream would work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=750"
  },
  {
    "text": "You can use the powerful transformation functions -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=754"
  },
  {
    "text": "like filter -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=757"
  },
  {
    "text": "and the new for-await-in syntax.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=758"
  },
  {
    "text": "This lets you focus on the intent of your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=760"
  },
  {
    "text": "instead of needing to worry about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=763"
  },
  {
    "text": "replicating the bookkeeping, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=764"
  },
  {
    "text": "since everything is wrapped up into one place.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=766"
  },
  {
    "text": "There's a lot of flexibility with AsyncStream ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=769"
  },
  {
    "text": "to create your own async sequences.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=771"
  },
  {
    "text": "This is really just one example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=774"
  },
  {
    "text": "and there are likely numerous others that you can adapt ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=775"
  },
  {
    "text": "in your own code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=778"
  },
  {
    "text": "AsyncStream is a great way to adapt your existing code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=779"
  },
  {
    "text": "to become an async sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=783"
  },
  {
    "text": "It handles all of the things you would expect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=785"
  },
  {
    "text": "from an async sequence, like safety, iteration, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=787"
  },
  {
    "text": "and cancellation; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=790"
  },
  {
    "text": "but they also handle buffering.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=791"
  },
  {
    "text": "AsyncStream is a solid way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=794"
  },
  {
    "text": "of building your own async sequences ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=796"
  },
  {
    "text": "and a suitable return type from your own APIs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=798"
  },
  {
    "text": "since the only source of elements being produced ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=801"
  },
  {
    "text": "is from the construction.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=803"
  },
  {
    "text": "And if you need to represent errors being thrown? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=805"
  },
  {
    "text": "Well, we have a type for that! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=807"
  },
  {
    "text": "AsyncThrowingStream that is just like AsyncStream ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=810"
  },
  {
    "text": "but can handle errors.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=813"
  },
  {
    "text": "It offers the same flexibility and safety as AsyncStream ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=815"
  },
  {
    "text": "but can handle failures by throwing from its iteration.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=818"
  },
  {
    "text": "AsyncSequence is a really powerful tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=822"
  },
  {
    "text": "that is both safe and familiar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=826"
  },
  {
    "text": "for dealing with more than one asynchronous value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=827"
  },
  {
    "text": "If you know how to use Sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=831"
  },
  {
    "text": "you already know how to use AsyncSequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=832"
  },
  {
    "text": "We've gone over what async sequences are, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=836"
  },
  {
    "text": "and how they're used, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=838"
  },
  {
    "text": "and introduced you to AsyncStream.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=840"
  },
  {
    "text": "We've dived into the theory and what defines them, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=842"
  },
  {
    "text": "and a few of the newly introduced async sequences, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=846"
  },
  {
    "text": "and finally, how to build your own.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=849"
  },
  {
    "text": "I eagerly await what you do with them next.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=851"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10058/?time=854"
  }
]