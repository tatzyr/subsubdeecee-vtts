[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=0"
  },
  {
    "text": "♪ ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=3"
  },
  {
    "text": "Hi, I’m Nate, an engineer on the Swift team here at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=9"
  },
  {
    "text": "Today my colleague Robert ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=13"
  },
  {
    "text": "and I will tell you about async/await in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=14"
  },
  {
    "text": "Asynchronous programming is a regular activity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=18"
  },
  {
    "text": "for many of you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=20"
  },
  {
    "text": "So you know it’s all too easy to write asynchronous code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=21"
  },
  {
    "text": "that’s verbose, complex, and even incorrect. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=24"
  },
  {
    "text": "Async/await in Swift can help out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=28"
  },
  {
    "text": "Using it, you can write asynchronous code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=31"
  },
  {
    "text": "just as easily as you write regular code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=33"
  },
  {
    "text": "And when you do, your code will better reflect your ideas. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=36"
  },
  {
    "text": "It’ll be safer too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=40"
  },
  {
    "text": "On top of that, the SDK has hundreds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=42"
  },
  {
    "text": "of awaitable methods available for you to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=44"
  },
  {
    "text": "For example, UIKit provides functionality ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=48"
  },
  {
    "text": "to form a thumbnail from a UIImage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=51"
  },
  {
    "text": "In fact, it provides both synchronous ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=53"
  },
  {
    "text": "and asynchronous functions to complete that task.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=55"
  },
  {
    "text": "As a quick reminder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=59"
  },
  {
    "text": "when you call a function that is synchronous-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=61"
  },
  {
    "text": "that is, a regular old function-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=63"
  },
  {
    "text": "your thread is blocked, waiting for that function to finish. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=65"
  },
  {
    "text": "So if your fetchThumbnail function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=69"
  },
  {
    "text": "calls preparingThumbnail-- the synchronous function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=71"
  },
  {
    "text": "UIKit provides-- until it finishes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=74"
  },
  {
    "text": "your thread can’t do anything else. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=76"
  },
  {
    "text": "In contrast, if you call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=79"
  },
  {
    "text": "prepareThumbnail (of:completionHandler:)-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=81"
  },
  {
    "text": "the asynchronous version of that function-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=83"
  },
  {
    "text": "while it runs, your thread is free to do other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=86"
  },
  {
    "text": "When it’s done, it will notify you by calling ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=90"
  },
  {
    "text": "its completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=93"
  },
  {
    "text": "The SDK provides many asynchronous functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=95"
  },
  {
    "text": "They let you know that they’ve completed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=98"
  },
  {
    "text": "in a few different ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=100"
  },
  {
    "text": "Some use a completion handler like this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=102"
  },
  {
    "text": "Others rely on delegate callbacks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=104"
  },
  {
    "text": "And many are marked async and just return a value.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=107"
  },
  {
    "text": "What these asynchronous functions all have in common ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=110"
  },
  {
    "text": "is this: when you call one, it unblocks your thread quickly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=113"
  },
  {
    "text": "having kicked off its work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=117"
  },
  {
    "text": "That allows the thread to do other things ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=119"
  },
  {
    "text": "while that long running work completes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=121"
  },
  {
    "text": "To see that difference, let’s take a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=124"
  },
  {
    "text": "at an example that may be familiar to many of you.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=126"
  },
  {
    "text": "In the app Robert and I are building together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=130"
  },
  {
    "text": "we have a list of items, each row of which displays ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=132"
  },
  {
    "text": "a thumbnail of an image stored on a server. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=135"
  },
  {
    "text": "When it’s time to get a thumbnail ready to be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=138"
  },
  {
    "text": "displayed in that list, in our view model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=140"
  },
  {
    "text": "the fetchThumbnail method is called. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=143"
  },
  {
    "text": "It transforms a string ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=145"
  },
  {
    "text": "to a UIImage via a series of steps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=147"
  },
  {
    "text": "First, the view model’s thumbnailURLRequest method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=150"
  },
  {
    "text": "creates a URLRequest from the string. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=153"
  },
  {
    "text": "Next, URLSession’s dataTask method gets ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=156"
  },
  {
    "text": "the data for that request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=160"
  },
  {
    "text": "Then UIImage initWithData creates an image from that data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=162"
  },
  {
    "text": "and finally, UIImage’s prepareThumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=165"
  },
  {
    "text": "method renders a thumbnail from the original image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=168"
  },
  {
    "text": "Each of these operations depends on the previous one’s result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=171"
  },
  {
    "text": "That means they must be performed in sequence.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=175"
  },
  {
    "text": "Some of these operations return values quickly-- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=179"
  },
  {
    "text": "both constructing a URLRequest from a string and a UIImage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=182"
  },
  {
    "text": "from data are like this-- so it’s fine to run them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=186"
  },
  {
    "text": "on whatever thread the function happens to be on ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=189"
  },
  {
    "text": "and for these to be synchronous calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=192"
  },
  {
    "text": "However, some of them take time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=195"
  },
  {
    "text": "It takes awhile to download all the data that makes up an image. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=197"
  },
  {
    "text": "And rendering a nice-looking thumbnail from it requires ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=201"
  },
  {
    "text": "a device to do some expensive work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=204"
  },
  {
    "text": "That’s why the SDK provides asynchronous functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=207"
  },
  {
    "text": "to complete those tasks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=210"
  },
  {
    "text": "So these calls should be asynchronous.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=212"
  },
  {
    "text": "Before Robert and I took async/await out for a spin, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=215"
  },
  {
    "text": "we were writing the function using completion handlers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=219"
  },
  {
    "text": "The function takes as its arguments a string, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=223"
  },
  {
    "text": "the input to the first operation and a completion handler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=225"
  },
  {
    "text": "used to give the output back to the caller. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=229"
  },
  {
    "text": "When fetchThumbnail is called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=232"
  },
  {
    "text": "we first call thumbnailURLRequest. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=234"
  },
  {
    "text": "This method is synchronous, so it doesn’t need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=237"
  },
  {
    "text": "a completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=239"
  },
  {
    "text": "Next we call dataTask ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=242"
  },
  {
    "text": "on the shared URLSession instance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=244"
  },
  {
    "text": "passing that URLRequest ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=246"
  },
  {
    "text": "and a completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=248"
  },
  {
    "text": "It synchronously produces a URLSessionDataTask ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=250"
  },
  {
    "text": "which must be resumed to kick off the asynchronous work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=253"
  },
  {
    "text": "FetchThumbnail then returns, and the thread is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=257"
  },
  {
    "text": "free to do other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=260"
  },
  {
    "text": "That’s really important because downloading ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=262"
  },
  {
    "text": "an image takes time, and you don’t want ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=265"
  },
  {
    "text": "to block a thread waiting for data to stream in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=267"
  },
  {
    "text": "Eventually either the image finishes downloading ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=272"
  },
  {
    "text": "or something goes wrong. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=275"
  },
  {
    "text": "Either way, the request completes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=277"
  },
  {
    "text": "and the completion handler passed to dataTask is invoked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=279"
  },
  {
    "text": "with several optional values: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=283"
  },
  {
    "text": "the data, a response, and an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=285"
  },
  {
    "text": "If something does go wrong, then we need to invoke ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=290"
  },
  {
    "text": "the completion handler and pass the error along. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=293"
  },
  {
    "text": "If everything worked out, then we create an image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=297"
  },
  {
    "text": "from the data using UIImage’s initWithData. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=299"
  },
  {
    "text": "Because it’s synchronous, we get to write normal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=303"
  },
  {
    "text": "straight-line code to handle the results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=305"
  },
  {
    "text": "If no image is produced, we’re done. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=308"
  },
  {
    "text": "And if an image was produced, then finally we call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=311"
  },
  {
    "text": "UIKit’s method prepareThumbnail on it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=314"
  },
  {
    "text": "and pass a completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=316"
  },
  {
    "text": "While its work completes, the thread is unblocked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=319"
  },
  {
    "text": "and freed up to do other work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=322"
  },
  {
    "text": "After the thumbnail is prepared, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=325"
  },
  {
    "text": "that completion handler is invoked with an image ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=327"
  },
  {
    "text": "if preparing a thumbnail succeeds or else nil. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=330"
  },
  {
    "text": "If it does succeed, then we call our completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=334"
  },
  {
    "text": "and pass along the image.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=338"
  },
  {
    "text": "But as Robert pointed out to me, there’s a problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=341"
  },
  {
    "text": "FetchThumbnail’s caller expects to be notified ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=344"
  },
  {
    "text": "when fetchThumbnail finishes its work, even if it fails. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=347"
  },
  {
    "text": "And currently, we’re leaving the caller in the lurch. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=351"
  },
  {
    "text": "I’m so used to writing “guard else return” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=355"
  },
  {
    "text": "that I forgot to invoke the completion handler twice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=357"
  },
  {
    "text": "So if creating a UIImage from data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=361"
  },
  {
    "text": "or preparing a thumbnail fails, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=364"
  },
  {
    "text": "the caller of fetchThumbnail will never be notified ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=366"
  },
  {
    "text": "and the row will never be updated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=369"
  },
  {
    "text": "It’ll just show a spinner forever.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=371"
  },
  {
    "text": "That’s why it’s so important for us, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=375"
  },
  {
    "text": "the authors of fetchThumbnail, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=377"
  },
  {
    "text": "to notify our callers no matter what happens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=379"
  },
  {
    "text": "So every path through the function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=382"
  },
  {
    "text": "should notify them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=384"
  },
  {
    "text": "To do that, we need to invoke our completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=386"
  },
  {
    "text": "if an error occurs and pass the error along. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=388"
  },
  {
    "text": "A normal function gives an error back ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=392"
  },
  {
    "text": "to its caller by throwing it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=394"
  },
  {
    "text": "And Swift ensures that no matter how execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=396"
  },
  {
    "text": "proceeds through the function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=399"
  },
  {
    "text": "if a value isn’t returned, an error is thrown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=401"
  },
  {
    "text": "But we can’t use Swift’s usual error handling mechanism here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=404"
  },
  {
    "text": "We can’t just throw an error from within ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=408"
  },
  {
    "text": "these completion handlers if we run into a problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=410"
  },
  {
    "text": "That’s unfortunate because it means ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=412"
  },
  {
    "text": "Swift can’t check our work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=414"
  },
  {
    "text": "To Swift, a completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=417"
  },
  {
    "text": "like fetchThumbnails is just a closure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=419"
  },
  {
    "text": "While we want to be sure that it’s always invoked, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=422"
  },
  {
    "text": "in Swift there’s no way to enforce that it is. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=425"
  },
  {
    "text": "That’s why I didn’t get a compilation error ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=428"
  },
  {
    "text": "when I just returned from those two guards. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=430"
  },
  {
    "text": "It took Robert pointing out that there was ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=433"
  },
  {
    "text": "a problem for me to fix it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=435"
  },
  {
    "text": "So it’s up to you to make sure that your completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=438"
  },
  {
    "text": "eventually gets called. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=440"
  },
  {
    "text": "When the two of us sat down to write this function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=443"
  },
  {
    "text": "we just wanted to do a few operations one after the next. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=446"
  },
  {
    "text": "Two were synchronous and two were asynchronous, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=450"
  },
  {
    "text": "taking completion handlers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=452"
  },
  {
    "text": "We succeeded, but we ended up with around 20 lines of code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=455"
  },
  {
    "text": "containing five opportunities for subtle bugs to creep in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=459"
  },
  {
    "text": "What we wanted was to perform ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=463"
  },
  {
    "text": "those four operations in sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=465"
  },
  {
    "text": "but what we got is hard to follow, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=467"
  },
  {
    "text": "hard to get right, and obscures our intent.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=469"
  },
  {
    "text": "Now, there are ways we could have made this a bit safer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=473"
  },
  {
    "text": "For example, we could’ve used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=476"
  },
  {
    "text": "the standard library’s result type. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=479"
  },
  {
    "text": "And while this is a little safer, it also adds ceremony, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=481"
  },
  {
    "text": "making our code uglier and slightly longer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=485"
  },
  {
    "text": "People have also used techniques like futures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=488"
  },
  {
    "text": "to improve asynchronous code in other ways. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=491"
  },
  {
    "text": "But none of these approaches give us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=494"
  },
  {
    "text": "code that is simple, easy, and safe. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=496"
  },
  {
    "text": "With async/await, we can do better. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=499"
  },
  {
    "text": "Robert and I rewrote the function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=502"
  },
  {
    "text": "that performs those four steps. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=504"
  },
  {
    "text": "And this time, we used async/await.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=506"
  },
  {
    "text": "The function still takes a string as an argument. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=510"
  },
  {
    "text": "But while last time, a completion handler was passed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=513"
  },
  {
    "text": "as well, this time instead, the function is async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=515"
  },
  {
    "text": "When you mark a function async, the keyword should go just ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=520"
  },
  {
    "text": "before “throws” in the function signature, like this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=523"
  },
  {
    "text": "or before the arrow if the function doesn’t throw. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=526"
  },
  {
    "text": "Marking the function async allows it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=530"
  },
  {
    "text": "and its signature to be simpler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=533"
  },
  {
    "text": "If an image is thumbnailed successfully, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=536"
  },
  {
    "text": "that thumbnail is simply returned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=539"
  },
  {
    "text": "And if an error is encountered, it’s just thrown. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=541"
  },
  {
    "text": "When fetchThumbnail is called, just like before, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=545"
  },
  {
    "text": "it starts off by calling thumbnailURLRequest. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=548"
  },
  {
    "text": "This function is synchronous, so the thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=552"
  },
  {
    "text": "is blocked, doing its work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=554"
  },
  {
    "text": "Next, it starts downloading data by calling data(for: request) ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=557"
  },
  {
    "text": "on the shared URLSession. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=561"
  },
  {
    "text": "Like dataTask, this method is also provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=563"
  },
  {
    "text": "by Foundation and is also asynchronous. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=566"
  },
  {
    "text": "But unlike dataTask, the data method is awaitable. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=569"
  },
  {
    "text": "So after it’s called, it suspends itself quickly, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=573"
  },
  {
    "text": "unblocking the thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=576"
  },
  {
    "text": "The thread is then free to do other work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=578"
  },
  {
    "text": "“Try” is here because the data method is marked “throws.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=582"
  },
  {
    "text": "In the earlier version, remember how we had to check for an error ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=585"
  },
  {
    "text": "and then explicitly call our completion handler with it? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=589"
  },
  {
    "text": "Here in the awaitable version, all of that code is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=592"
  },
  {
    "text": "boiled down to just the try keyword. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=595"
  },
  {
    "text": "Just like “try” is needed to call functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=599"
  },
  {
    "text": "that are marked “throws,” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=601"
  },
  {
    "text": "“await” is needed to call functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=602"
  },
  {
    "text": "that are marked “async.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=604"
  },
  {
    "text": "If an expression has multiple async function calls in it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=606"
  },
  {
    "text": "you only need to write “await” once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=610"
  },
  {
    "text": "just like you only need one “try” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=612"
  },
  {
    "text": "for an expression with multiple throwing function calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=614"
  },
  {
    "text": "All told, the function call is marked “try await.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=618"
  },
  {
    "text": "When dealing with an async expression that throws, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=622"
  },
  {
    "text": "you’ll need to put try before await, like this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=625"
  },
  {
    "text": "Eventually, when the data finishes downloading, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=630"
  },
  {
    "text": "the data method will resume and return to fetchThumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=633"
  },
  {
    "text": "At that point, the values the data method returns ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=638"
  },
  {
    "text": "or error it throws will flow in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=641"
  },
  {
    "text": "If it threw an error, then fetchThumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=644"
  },
  {
    "text": "will throw that error in turn itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=646"
  },
  {
    "text": "Otherwise, the data and response variables will be defined. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=649"
  },
  {
    "text": "This is similar to what happened in the earlier version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=654"
  },
  {
    "text": "of fetchThumbnail when the completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=656"
  },
  {
    "text": "passed to URLSession’s dataTask method was invoked.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=658"
  },
  {
    "text": "In both versions, values and errors that were ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=662"
  },
  {
    "text": "produced by URLSession’s asynchronous method flowed in. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=665"
  },
  {
    "text": "But the awaitable version is so much simpler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=668"
  },
  {
    "text": "It says exactly what we mean. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=672"
  },
  {
    "text": "Make this request and assign the values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=674"
  },
  {
    "text": "we get back to variables so we can use them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=676"
  },
  {
    "text": "And if we happen to run into a problem, throw an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=680"
  },
  {
    "text": "Next, fetchThumbnail will try to create ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=684"
  },
  {
    "text": "a UIImage from the data it downloaded. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=687"
  },
  {
    "text": "If that succeeds, then a thumbnail will be rendered ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=690"
  },
  {
    "text": "for that image by accessing its thumbnail property. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=693"
  },
  {
    "text": "While the thumbnail is formed, the thread is free to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=697"
  },
  {
    "text": "other things until the thumbnail property eventually resumes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=700"
  },
  {
    "text": "and returns to fetchThumbnail.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=703"
  },
  {
    "text": "If a thumbnail is rendered, fetchThumbnail will return it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=708"
  },
  {
    "text": "Otherwise, it’ll throw an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=712"
  },
  {
    "text": "In contrast to the completion handler version, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=714"
  },
  {
    "text": "if no thumbnail is rendered, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=717"
  },
  {
    "text": "Swift ensures that we throw an error here or return a value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=719"
  },
  {
    "text": "But we can’t just silently fail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=723"
  },
  {
    "text": "And that’s it. That’s the all code we need. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=726"
  },
  {
    "text": "The function does exactly what the completion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=730"
  },
  {
    "text": "handler version did before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=732"
  },
  {
    "text": "But instead of 20 lines of code, it just has 6. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=734"
  },
  {
    "text": "And it’s all straight-line code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=737"
  },
  {
    "text": "The four operations that need to be performed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=740"
  },
  {
    "text": "in sequence are listed one after the next. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=742"
  },
  {
    "text": "And Swift makes sure that the function always ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=745"
  },
  {
    "text": "notifies its caller when it’s done, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=747"
  },
  {
    "text": "either by returning or by throwing if a problem comes up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=749"
  },
  {
    "text": "This is just one example of how using async/await can transform ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=753"
  },
  {
    "text": "your asynchronous Swift code, making it safer, shorter, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=758"
  },
  {
    "text": "and making it better reflect your intent.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=763"
  },
  {
    "text": "Let’s dig in to some of the details ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=766"
  },
  {
    "text": "of how fetchThumbnail is implemented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=767"
  },
  {
    "text": "On the second-to-last line, even though there’s ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=770"
  },
  {
    "text": "no function call, the expression that kicks off ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=772"
  },
  {
    "text": "rendering the thumbnail is marked with “await.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=775"
  },
  {
    "text": "That’s because the thumbnail property is async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=778"
  },
  {
    "text": "Not just functions can be async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=781"
  },
  {
    "text": "Properties can be too, so can initializers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=783"
  },
  {
    "text": "Now, the thumbnail property is not part of the SDK. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=788"
  },
  {
    "text": "It’s actually one that Robert added. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=791"
  },
  {
    "text": "Let’s take a look at it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=793"
  },
  {
    "text": "He defined this property in an extension on UIImage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=796"
  },
  {
    "text": "and its implementation is short. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=800"
  },
  {
    "text": "It forms a CGSize and awaits the result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=802"
  },
  {
    "text": "of passing it along to byPreparingThumbnail(ofSize). ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=805"
  },
  {
    "text": "By the way, this method on self is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=809"
  },
  {
    "text": "the awaitable version of the method we used earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=811"
  },
  {
    "text": "There are a couple things to notice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=815"
  },
  {
    "text": "First, it has an explicit getter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=818"
  },
  {
    "text": "This is required to mark a property async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=820"
  },
  {
    "text": "As of Swift 5.5, property getters can also throw. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=824"
  },
  {
    "text": "And like with async function signatures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=828"
  },
  {
    "text": "if a property is both async and throws, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=831"
  },
  {
    "text": "the async keyword goes right before throws.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=834"
  },
  {
    "text": "Second, the property has no setter. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=838"
  },
  {
    "text": "Only read-only properties can be async.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=841"
  },
  {
    "text": "In functions, properties, and initializers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=845"
  },
  {
    "text": "await can be used on expressions to indicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=848"
  },
  {
    "text": "where the function might unblock the thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=850"
  },
  {
    "text": "There’s another place that await can be used as well: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=853"
  },
  {
    "text": "in for loops to iterate over async sequences. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=856"
  },
  {
    "text": "An async sequence is just like a normal sequence ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=860"
  },
  {
    "text": "except that it vends its elements asynchronously. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=863"
  },
  {
    "text": "So fetching the next item must be marked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=866"
  },
  {
    "text": "with the await keyword, indicating that it’s async.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=869"
  },
  {
    "text": "As the function iterates over the async sequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=873"
  },
  {
    "text": "over and over, it may unblock the thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=876"
  },
  {
    "text": "while awaiting the next element and then resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=878"
  },
  {
    "text": "either with the next element into the body of the loop ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=882"
  },
  {
    "text": "or, if there are no elements left, after the loop.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=885"
  },
  {
    "text": "To learn more about AsyncSequence, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=890"
  },
  {
    "text": "watch the “Meet AsyncSequence” session. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=893"
  },
  {
    "text": "And if you’re interested in running ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=895"
  },
  {
    "text": "many asynchronous tasks in parallel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=897"
  },
  {
    "text": "check out the “Structured concurrency in Swift” session.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=899"
  },
  {
    "text": "So there are a lot of places where you can use await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=903"
  },
  {
    "text": "The keyword indicates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=906"
  },
  {
    "text": "that your async function might suspend there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=908"
  },
  {
    "text": "What does it mean for an async function to suspend? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=911"
  },
  {
    "text": "To answer that, let’s think about what happens ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=915"
  },
  {
    "text": "when you call a function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=917"
  },
  {
    "text": "When you call any function, you hand control of the thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=919"
  },
  {
    "text": "your function’s running on over to that function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=923"
  },
  {
    "text": "If it’s a normal function you’re calling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=927"
  },
  {
    "text": "like thumbnailURLRequest here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=929"
  },
  {
    "text": "then the thread will be fully occupied doing work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=931"
  },
  {
    "text": "on behalf of that one function until it finishes.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=934"
  },
  {
    "text": "That work might be in the body of the function itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=939"
  },
  {
    "text": "or in other functions that it calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=942"
  },
  {
    "text": "Eventually, that function will finish, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=945"
  },
  {
    "text": "either by returning a value or throwing an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=947"
  },
  {
    "text": "When it does, it hands control back to your function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=951"
  },
  {
    "text": "That’s the only way that a normal function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=955"
  },
  {
    "text": "can give up control of a thread: by finishing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=957"
  },
  {
    "text": "And your function is the only one it can give control to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=960"
  },
  {
    "text": "If it’s an async function you’re calling, things are different. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=964"
  },
  {
    "text": "Like a normal function, when it’s done, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=969"
  },
  {
    "text": "it will finish and return control to your function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=971"
  },
  {
    "text": "But unlike a normal function, it can give up control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=974"
  },
  {
    "text": "of the thread in an entirely different way: by suspending.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=977"
  },
  {
    "text": "Just like a normal function, when you call an async function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=982"
  },
  {
    "text": "you give control of the thread to it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=985"
  },
  {
    "text": "Once it’s running, an async function can suspend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=988"
  },
  {
    "text": "When it does, it gives up control of the thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=992"
  },
  {
    "text": "But rather than giving control back to your function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=995"
  },
  {
    "text": "it instead gives control of the thread to the system. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=998"
  },
  {
    "text": "When that happens, your function is suspended too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1001"
  },
  {
    "text": "Suspending is the function’s way of telling the system, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1006"
  },
  {
    "text": "“I know you have a lot of work to do. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1009"
  },
  {
    "text": "You decide what’s most important.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1011"
  },
  {
    "text": "How cooperative is that? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1013"
  },
  {
    "text": "So once the function suspends itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1015"
  },
  {
    "text": "the system is free to use the thread to do other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1018"
  },
  {
    "text": "At some point, the system will decide that the most ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1022"
  },
  {
    "text": "important work to be done is to continue running ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1025"
  },
  {
    "text": "the async function that had suspended itself earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1028"
  },
  {
    "text": "At that point, the system will resume it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1031"
  },
  {
    "text": "That async function is then back in control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1034"
  },
  {
    "text": "of the thread and able to keep going about its work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1038"
  },
  {
    "text": "And if it wants, it can suspend itself again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1041"
  },
  {
    "text": "In fact, it can suspend itself as many times as it needs to.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1045"
  },
  {
    "text": "On the other hand, it may not need to suspend itself at all. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1049"
  },
  {
    "text": "While an async function may suspend, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1053"
  },
  {
    "text": "just because it’s marked async ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1056"
  },
  {
    "text": "doesn’t necessarily mean that it will suspend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1057"
  },
  {
    "text": "And by the same token, just because you see an “await” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1061"
  },
  {
    "text": "doesn’t mean the function will definitely suspend there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1064"
  },
  {
    "text": "But eventually, whether without ever suspending ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1069"
  },
  {
    "text": "or after resuming for the last time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1072"
  },
  {
    "text": "the function will finish, handing control of the thread ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1075"
  },
  {
    "text": "back to your function, along with a value or an error.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1078"
  },
  {
    "text": "Let’s take another look at fetchThumbnail to see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1082"
  },
  {
    "text": "what can happen when it suspends.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1085"
  },
  {
    "text": "When fetchThumbnail calls URLSession’s async data method, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1087"
  },
  {
    "text": "the data method stops executing on the thread in the special way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1091"
  },
  {
    "text": "that only async functions can: by suspending. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1095"
  },
  {
    "text": "It gives control of the thread to the system and asks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1099"
  },
  {
    "text": "the system to schedule the work for URLSession’s data method.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1101"
  },
  {
    "text": "But at this point, the system is in control, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1106"
  },
  {
    "text": "and that work may not be started immediately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1109"
  },
  {
    "text": "The thread can be used for other things instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1112"
  },
  {
    "text": "Let’s see how that might happen. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1115"
  },
  {
    "text": "Suppose that after fetchThumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1118"
  },
  {
    "text": "has been called, the user taps a button ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1119"
  },
  {
    "text": "which will upload some data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1122"
  },
  {
    "text": "Say, for example, that they react to a post. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1124"
  },
  {
    "text": "Then the system is free to execute the work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1127"
  },
  {
    "text": "to post the user’s reaction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1130"
  },
  {
    "text": "before the previously queued-up work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1132"
  },
  {
    "text": "Once that late-breaking work has completed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1135"
  },
  {
    "text": "URLSession’s data method may be resumed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1137"
  },
  {
    "text": "Or the system might execute other work instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1141"
  },
  {
    "text": "Finally, once the data method finishes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1144"
  },
  {
    "text": "it will return to fetchThumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1147"
  },
  {
    "text": "The fact that other work can be performed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1151"
  },
  {
    "text": "while a function is suspended is why Swift insists ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1153"
  },
  {
    "text": "that you mark async calls with the await keyword. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1156"
  },
  {
    "text": "You need to be aware that the state of your app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1159"
  },
  {
    "text": "can change dramatically when your function suspends.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1161"
  },
  {
    "text": "Now, this is also true ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1165"
  },
  {
    "text": "when you use completion handlers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1167"
  },
  {
    "text": "But because you don’t have all the ceremony ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1169"
  },
  {
    "text": "and indentation they entail in async/await code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1171"
  },
  {
    "text": "the await keyword is how you notice that a block ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1175"
  },
  {
    "text": "of code doesn’t execute as one transaction. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1178"
  },
  {
    "text": "The function may suspend, and other things may happen ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1182"
  },
  {
    "text": "while it’s suspended between the lines of the function.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1185"
  },
  {
    "text": "More than that, the function may resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1189"
  },
  {
    "text": "onto an entirely different thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1191"
  },
  {
    "text": "To learn about these issues, see the “Protect mutable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1194"
  },
  {
    "text": "state with Swift actors” session. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1196"
  },
  {
    "text": "Here are a few important things to remember about async/await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1200"
  },
  {
    "text": "First, when you mark a function async, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1203"
  },
  {
    "text": "you’re allowing it to suspend. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1206"
  },
  {
    "text": "And when a function suspends itself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1208"
  },
  {
    "text": "it suspends its callers too. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1210"
  },
  {
    "text": "So its callers must be async as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1212"
  },
  {
    "text": "Second, to point out where in an async function it might ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1215"
  },
  {
    "text": "suspend one or many times, the await keyword is used.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1218"
  },
  {
    "text": "Third, while an async function is suspended, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1224"
  },
  {
    "text": "the thread is not blocked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1227"
  },
  {
    "text": "So the system is free to schedule other work. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1228"
  },
  {
    "text": "Even work that gets kicked off later can be executed first. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1231"
  },
  {
    "text": "That means your app’s state can change a great deal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1235"
  },
  {
    "text": "while the function is suspended. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1238"
  },
  {
    "text": "Finally, when an async function resumes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1240"
  },
  {
    "text": "the results returned from the async function it called ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1243"
  },
  {
    "text": "flow back into the original function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1247"
  },
  {
    "text": "and execution continues right where it left off. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1249"
  },
  {
    "text": "You’ve seen how async/await works in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1252"
  },
  {
    "text": "Now Robert will show you how to start using it ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1256"
  },
  {
    "text": "in your own projects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1258"
  },
  {
    "text": "Thanks, Nate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1260"
  },
  {
    "text": "Earlier, Nate showed you the app we’re building together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1262"
  },
  {
    "text": "The thumbnail function he converted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1265"
  },
  {
    "text": "to adopt async/await was called in a few places, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1267"
  },
  {
    "text": "so we’ll need to migrate them to adopt concurrency as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1270"
  },
  {
    "text": "Let’s start with something critical ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1275"
  },
  {
    "text": "to modern software development: testing. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1276"
  },
  {
    "text": "We wanted testing async code to be just as easy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1280"
  },
  {
    "text": "as testing synchronous code, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1283"
  },
  {
    "text": "so XCTest supports async out of the box. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1285"
  },
  {
    "text": "What used to be a tedious process ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1289"
  },
  {
    "text": "of setting up an expectation, calling the API under test, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1291"
  },
  {
    "text": "fulfilling the expectation, and then making sure to wait ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1295"
  },
  {
    "text": "for an arbitrary amount of time becomes as easy as adding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1299"
  },
  {
    "text": "the async keyword to the test function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1303"
  },
  {
    "text": "removing the XCTest expectations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1306"
  },
  {
    "text": "its fulfillment, and the explicit await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1308"
  },
  {
    "text": "and instead awaiting the results of calling the new asynchronous ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1311"
  },
  {
    "text": "fetchThumbnail function that Nate showed you earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1316"
  },
  {
    "text": "Now that our tests are settled, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1321"
  },
  {
    "text": "let’s zoom in on the application code itself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1322"
  },
  {
    "text": "In particular, the SwiftUI code behind ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1326"
  },
  {
    "text": "the thumbnail views in each of row of this list.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1329"
  },
  {
    "text": "An image cell is created with a post, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1333"
  },
  {
    "text": "and each post has an ID that we pass to the viewModel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1335"
  },
  {
    "text": "so it can asynchronously retrieve the thumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1339"
  },
  {
    "text": "You’ve already seen how to transform this call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1342"
  },
  {
    "text": "from the testing code, so let’s give it a shot. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1345"
  },
  {
    "text": "First we remove the completion handler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1349"
  },
  {
    "text": "then “try” is added to handle any errors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1352"
  },
  {
    "text": "and “await” to complete the call to an async function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1356"
  },
  {
    "text": "But when we try to build this code, something goes wrong. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1360"
  },
  {
    "text": "The Swift compiler is telling us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1364"
  },
  {
    "text": "that we cannot call async functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1366"
  },
  {
    "text": "in contexts that aren’t themselves async. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1368"
  },
  {
    "text": "Here, the onAppear modifier takes a plain, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1372"
  },
  {
    "text": "non-async closure, so there needs to be a way to bridge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1376"
  },
  {
    "text": "the gap between the synchronous and the asynchronous worlds.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1380"
  },
  {
    "text": "The solution is to use the async task function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1385"
  },
  {
    "text": "An async task packages up the work in the closure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1389"
  },
  {
    "text": "and sends it to the system for immediate execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1392"
  },
  {
    "text": "on the next available thread, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1394"
  },
  {
    "text": "like the async function on a global dispatch queue.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1396"
  },
  {
    "text": "Its main benefit here is that async code can be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1400"
  },
  {
    "text": "called from inside of sync contexts.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1403"
  },
  {
    "text": "After another rebuild, the compiler is satisfied. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1407"
  },
  {
    "text": "Async tasks are part of a family of APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1411"
  },
  {
    "text": "that allow you to build rich concurrent Swift code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1414"
  },
  {
    "text": "in a familiar and naturally structured style.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1417"
  },
  {
    "text": "To learn more, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1421"
  },
  {
    "text": "See “Explore structured concurrency in Swift.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1422"
  },
  {
    "text": "And to learn how you can take full advantage of async code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1425"
  },
  {
    "text": "in SwiftUI apps, see “Discover concurrency in SwiftUI.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1428"
  },
  {
    "text": "We’ve finished up migrating all the places we were ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1434"
  },
  {
    "text": "calling the fetchThumbnail function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1437"
  },
  {
    "text": "But our app has a lot more opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1439"
  },
  {
    "text": "to adopt async/await. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1441"
  },
  {
    "text": "To get up and running quickly, we recommend starting small ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1443"
  },
  {
    "text": "with an async alternative to an existing API. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1446"
  },
  {
    "text": "The SDK offers hundreds of APIs that take completion handlers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1451"
  },
  {
    "text": "because they do work on your behalf ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1456"
  },
  {
    "text": "in an asynchronous manner. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1458"
  },
  {
    "text": "When these APIs are lined up side by side, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1460"
  },
  {
    "text": "patterns begin to emerge.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1464"
  },
  {
    "text": "Even though they may have different names ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1467"
  },
  {
    "text": "and different purposes, all of these functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1469"
  },
  {
    "text": "have the same essential API contract. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1472"
  },
  {
    "text": "You call them, and they call you back with the provided ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1475"
  },
  {
    "text": "completion handlers, passing the result they obtained. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1478"
  },
  {
    "text": "Earlier, Nate showed you that you could ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1482"
  },
  {
    "text": "await the results of asynchronous functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1484"
  },
  {
    "text": "to write more natural-looking code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1487"
  },
  {
    "text": "Wouldn’t it be awesome if we could turn ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1489"
  },
  {
    "text": "these callback blocks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1491"
  },
  {
    "text": "into these async functions? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1493"
  },
  {
    "text": "As of Swift 5.5, this is exactly what happens. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1497"
  },
  {
    "text": "The Swift compiler automatically takes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1502"
  },
  {
    "text": "a look at completion handler code imported from Objective-C ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1504"
  },
  {
    "text": "and provides an async alternative. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1507"
  },
  {
    "text": "But we didn’t stop there. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1510"
  },
  {
    "text": "Many delegate APIs also include methods ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1512"
  },
  {
    "text": "that pass a completion handler to you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1515"
  },
  {
    "text": "Calling the handler cooperatively ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1518"
  },
  {
    "text": "informs the framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1520"
  },
  {
    "text": "when an asynchronous task has completed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1521"
  },
  {
    "text": "Take this ClockKit complication data source ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1524"
  },
  {
    "text": "that calls fetchThumbnail ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1527"
  },
  {
    "text": "to display a timeline entry for a given post.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1528"
  },
  {
    "text": "Just as before, we have to make sure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1532"
  },
  {
    "text": "to call the completion handler on all paths, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1534"
  },
  {
    "text": "and there’s a lot of extra noise here because of the closure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1537"
  },
  {
    "text": "With async await, this no longer needs to be the case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1541"
  },
  {
    "text": "This delegate method has an async alternative ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1545"
  },
  {
    "text": "we can use instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1548"
  },
  {
    "text": "First, the async alternative’s name is used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1550"
  },
  {
    "text": "which drops the leading “get.” ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1554"
  },
  {
    "text": "We recommend that async functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1556"
  },
  {
    "text": "omit leading words like “get” that communicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1558"
  },
  {
    "text": "when the results of a call are not directly returned. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1561"
  },
  {
    "text": "After all, since this is an async ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1565"
  },
  {
    "text": "alternative function, it returns a timeline entry directly. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1568"
  },
  {
    "text": "Now that there is an async context set up, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1573"
  },
  {
    "text": "we call the async version of fetchThumbnail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1575"
  },
  {
    "text": "Finally, we return a timeline entry from this method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1579"
  },
  {
    "text": "rather than calling the now-deleted completion block.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1583"
  },
  {
    "text": "The async APIs we’ve highlighted here barely scratch the surface.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1587"
  },
  {
    "text": "To learn more, see these sessions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1592"
  },
  {
    "text": "which go into much greater detail about the APIs themselves ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1595"
  },
  {
    "text": "and how you can use them when adopting async/await.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1599"
  },
  {
    "text": "All of these are examples of situations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1603"
  },
  {
    "text": "where Swift will create async alternatives on your behalf. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1605"
  },
  {
    "text": "But there will inevitably be places in your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1609"
  },
  {
    "text": "where you will need to create an async alternative yourself.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1612"
  },
  {
    "text": "Let’s see what this looks like in practice.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1616"
  },
  {
    "text": "In our app, we use this getPersistentPosts function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1619"
  },
  {
    "text": "to retrieve any posts we persisted ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1623"
  },
  {
    "text": "to our Core Data store. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1625"
  },
  {
    "text": "This function is called in a lot more places in our app ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1627"
  },
  {
    "text": "than the async thumbnail function was, so it would be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1630"
  },
  {
    "text": "a really big change to just use async everywhere. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1633"
  },
  {
    "text": "And since we’re using NSAsynchronousFetchRequest, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1638"
  },
  {
    "text": "it seems like this function is a perfect candidate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1641"
  },
  {
    "text": "for an async alternative. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1644"
  },
  {
    "text": "First, we make an async function and convert the return value. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1646"
  },
  {
    "text": "Since this function can yield an error, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1651"
  },
  {
    "text": "we mark this function “throws” as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1654"
  },
  {
    "text": "Next, we call the completion handler version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1657"
  },
  {
    "text": "of getPersistentPosts and, well, now we’re stuck.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1660"
  },
  {
    "text": "We need to return the result ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1666"
  },
  {
    "text": "from the callback back to the places awaiting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1667"
  },
  {
    "text": "calls to the async persistentPosts function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1669"
  },
  {
    "text": "Not only that, those callers are in a suspended state. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1673"
  },
  {
    "text": "We need to make sure to resume them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1677"
  },
  {
    "text": "at the right point in time and with the right data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1679"
  },
  {
    "text": "so that they can get on with the rest of their work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1681"
  },
  {
    "text": "Earlier, Nate showed you how Swift and the system ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1685"
  },
  {
    "text": "cooperate to take care of resuming async code for us. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1688"
  },
  {
    "text": "Let’s dive a little deeper ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1692"
  },
  {
    "text": "into how this suspend/resume process works to see if we can ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1694"
  },
  {
    "text": "come up with a similar solution for our problem.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1698"
  },
  {
    "text": "When the async version of persistentPosts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1702"
  },
  {
    "text": "is called, it calls into Core Data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1704"
  },
  {
    "text": "At some later time, Core Data calls the completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1707"
  },
  {
    "text": "and passes the result of the fetch request. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1711"
  },
  {
    "text": "This situation looks almost identical to the one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1714"
  },
  {
    "text": "Nate showed you earlier when our fetchThumbnail function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1717"
  },
  {
    "text": "asked the system, not Core Data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1720"
  },
  {
    "text": "to resume a suspended async function call.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1722"
  },
  {
    "text": "All that’s missing is a bridge to await the completion handler ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1726"
  },
  {
    "text": "and resume with the fetch request’s results.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1730"
  },
  {
    "text": "This pattern comes up all the time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1733"
  },
  {
    "text": "and it has a name: a continuation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1735"
  },
  {
    "text": "Throughout this session, Nate and I have already ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1739"
  },
  {
    "text": "showed you lots of examples of continuations: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1741"
  },
  {
    "text": "methods that take completion blocks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1744"
  },
  {
    "text": "The caller of the method awaits the result of the function call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1747"
  },
  {
    "text": "and provides a closure to specify what to do next. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1751"
  },
  {
    "text": "When the function call completes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1755"
  },
  {
    "text": "it calls the completion handler to resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1757"
  },
  {
    "text": "whatever the caller wanted to do with the result. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1759"
  },
  {
    "text": "This kind of cooperative execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1763"
  },
  {
    "text": "is exactly the way async functions in Swift work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1765"
  },
  {
    "text": "To make this explicit, Swift provides a feature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1769"
  },
  {
    "text": "so that you can create, manage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1772"
  },
  {
    "text": "and resume continuations in a high-level and safe way.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1774"
  },
  {
    "text": "Let’s return to our example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1780"
  },
  {
    "text": "to see how continuations can help us finish ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1781"
  },
  {
    "text": "writing our async alternative.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1784"
  },
  {
    "text": "The withCheckedThrowingContinuation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1787"
  },
  {
    "text": "function lifts completion blocks with errors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1789"
  },
  {
    "text": "up to throwing async Swift functions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1792"
  },
  {
    "text": "It has a counterpart called ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1796"
  },
  {
    "text": "withCheckedContinuations for the situations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1797"
  },
  {
    "text": "where you know a function will never throw an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1800"
  },
  {
    "text": "These functions are the way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1804"
  },
  {
    "text": "to gain access to a continuation value ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1805"
  },
  {
    "text": "you can use to resume a suspended async function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1808"
  },
  {
    "text": "This also builds the first part of the bridge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1812"
  },
  {
    "text": "by allowing us to await calls to getPersistentPosts.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1814"
  },
  {
    "text": "Let’s finish building the bridge. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1819"
  },
  {
    "text": "The continuation value provides a resume function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1822"
  },
  {
    "text": "into which we place the results from the completion handler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1825"
  },
  {
    "text": "Not only that, but resume provides ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1829"
  },
  {
    "text": "the missing link we need to unsuspend any calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1832"
  },
  {
    "text": "awaiting the result of the persistentPosts function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1835"
  },
  {
    "text": "And there, in one neat package, is our finished bridge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1838"
  },
  {
    "text": "from completion handlers to async functions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1842"
  },
  {
    "text": "Continuations provide a powerful way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1846"
  },
  {
    "text": "to manually take control ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1848"
  },
  {
    "text": "over the execution of an async function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1850"
  },
  {
    "text": "but there are some things to keep in mind. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1853"
  },
  {
    "text": "Continuations have a simple but important contract. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1856"
  },
  {
    "text": "Resume must be called exactly once on every path. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1860"
  },
  {
    "text": "But don’t worry. Swift has your back here.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1864"
  },
  {
    "text": "If the continuation is discarded without resume being called, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1868"
  },
  {
    "text": "the Swift runtime will log a warning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1872"
  },
  {
    "text": "since this will result in async calls never unsuspending.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1874"
  },
  {
    "text": "If a continuation is resumed multiple times ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1878"
  },
  {
    "text": "in the same function, however, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1881"
  },
  {
    "text": "this is a more serious error as it can corrupt program data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1883"
  },
  {
    "text": "To combat this, the Swift runtime will detect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1887"
  },
  {
    "text": "attempts to call resume multiple times and will ensure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1890"
  },
  {
    "text": "a fatal error occurs at the second resumption point.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1893"
  },
  {
    "text": "With this in mind, let’s highlight one more ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1897"
  },
  {
    "text": "important place you might use checked continuations.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1900"
  },
  {
    "text": "Many APIs are event driven. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1904"
  },
  {
    "text": "They provide delegate callbacks to notify ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1907"
  },
  {
    "text": "our application at specific critical points ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1909"
  },
  {
    "text": "and allow it to respond appropriately. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1912"
  },
  {
    "text": "In order to properly adopt async/await, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1915"
  },
  {
    "text": "we’ll have to store the continuation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1917"
  },
  {
    "text": "and resume it later. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1919"
  },
  {
    "text": "As before, we create a checked continuation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1922"
  },
  {
    "text": "Then we save it and kick off the work.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1927"
  },
  {
    "text": "To respect the API contract ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1932"
  },
  {
    "text": "of checked continuations, we make sure to resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1934"
  },
  {
    "text": "the active continuation, and finally nil it out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1937"
  },
  {
    "text": "so we’re protected from calling it more than once.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1942"
  },
  {
    "text": "Always remember: the checked continuation value here ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1945"
  },
  {
    "text": "represents the ability to manually resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1949"
  },
  {
    "text": "any async calls to this API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1951"
  },
  {
    "text": "so it must be called on all paths.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1954"
  },
  {
    "text": "If your delegate API is called many times or not at all ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1957"
  },
  {
    "text": "in certain circumstances, it is critical to resume ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1960"
  },
  {
    "text": "any active continuations exactly once.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1964"
  },
  {
    "text": "To learn more about the lower-level details ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1969"
  },
  {
    "text": "of Swift concurrency, including continuations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1971"
  },
  {
    "text": "see the “Swift concurrency: Behind the scenes” session.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1974"
  },
  {
    "text": "This has been a whirlwind tour of async/await in Swift. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1978"
  },
  {
    "text": "We’ve shown you just how the async and await keywords ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1983"
  },
  {
    "text": "work at runtime and how you can adopt them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1986"
  },
  {
    "text": "in your applications and frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1988"
  },
  {
    "text": "To get you started, we gave you a sampling of the async APIs ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1991"
  },
  {
    "text": "available in the SDK and showed you how to bridge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1994"
  },
  {
    "text": "your existing code from the synchronous world ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=1997"
  },
  {
    "text": "to the async world.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=2000"
  },
  {
    "text": "Async/await is the foundation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=2003"
  },
  {
    "text": "of a whole universe of Swift concurrency features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=2005"
  },
  {
    "text": "We’re excited to see what you build with them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=2008"
  },
  {
    "text": "Thank you for watching.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10132/?time=2011"
  }
]