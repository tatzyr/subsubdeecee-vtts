[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=6"
  },
  {
    "text": "Jonathan Hogg: Hello, and welcome to this session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=10"
  },
  {
    "text": "on the Accelerate and associated frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=11"
  },
  {
    "text": "I'm Jonathan from Apple's Vector & Numerics team, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=14"
  },
  {
    "text": "and today I'm going to talk to you briefly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=16"
  },
  {
    "text": "about the Accelerate framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=18"
  },
  {
    "text": "before telling you what's new in our machine learning library, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=20"
  },
  {
    "text": "BNNS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=22"
  },
  {
    "text": "I'll then cover improvements to simd.h, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=24"
  },
  {
    "text": "and introduce Apple Archive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=27"
  },
  {
    "text": "and our new Apple Encrypted Archive containers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=29"
  },
  {
    "text": "So let's get started with a brief overview ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=32"
  },
  {
    "text": "of the Accelerate framework. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=34"
  },
  {
    "text": "Accelerate provides high-performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=37"
  },
  {
    "text": "numerical computation across all Apple platforms: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=38"
  },
  {
    "text": "MacOS, iOS, iPadOS, watchOS and tvOS. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=41"
  },
  {
    "text": "Accelerate also provides access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=48"
  },
  {
    "text": "to the machine learning accelerators ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=49"
  },
  {
    "text": "in Apple Silicon Macs and recent iPhone and iPad devices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=51"
  },
  {
    "text": "The only way to leverage this hardware ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=55"
  },
  {
    "text": "is by calling Accelerate either directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=57"
  },
  {
    "text": "or through higher-level frameworks such as Core ML. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=59"
  },
  {
    "text": "Accelerate is composed of several parts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=63"
  },
  {
    "text": "vDSP provides primitives for signal processing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=66"
  },
  {
    "text": "such as DFT and FFT routines. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=69"
  },
  {
    "text": "vImage provides routines for image processing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=71"
  },
  {
    "text": "such as format conversion and convolution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=74"
  },
  {
    "text": "vForce provides vectorized versions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=77"
  },
  {
    "text": "of transcendental functions such as sine and cosine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=79"
  },
  {
    "text": "BLAS and LAPACK provide high-performance implantations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=83"
  },
  {
    "text": "of the standard dense matrix algebra routines, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=86"
  },
  {
    "text": "while Sparse BLAS and our Sparse Solvers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=89"
  },
  {
    "text": "provide similar functionality for sparse matrices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=90"
  },
  {
    "text": "Finally, BNNS provides support for machine learning. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=93"
  },
  {
    "text": "I'm also going to talk to you today ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=99"
  },
  {
    "text": "about some related frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=100"
  },
  {
    "text": "simd.h provides computational small vectors and matrices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=103"
  },
  {
    "text": "such as those covered in graphics programming, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=106"
  },
  {
    "text": "whilst Compression and Apple Archive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=109"
  },
  {
    "text": "provide support for lossless data compression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=111"
  },
  {
    "text": "In order to use these frameworks, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=114"
  },
  {
    "text": "simply add the relevant include or import statement to your code ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=116"
  },
  {
    "text": "and add the framework to your Xcode project. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=119"
  },
  {
    "text": "Now, let me tell you about BNNS in more detail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=123"
  },
  {
    "text": "BNNS stands for Basic Neural Network Subroutines ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=127"
  },
  {
    "text": "and provides performance primitives for machine learning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=130"
  },
  {
    "text": "on the CPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=132"
  },
  {
    "text": "For those of you unfamiliar with Apple's machine learning ecosystem, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=134"
  },
  {
    "text": "this diagram shows the lay of the land. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=137"
  },
  {
    "text": "There are three main hardware blocks: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=139"
  },
  {
    "text": "the CPU, which includes the machine learning accelerators ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=141"
  },
  {
    "text": "I mentioned previously; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=144"
  },
  {
    "text": "the GPU; and the separate neural engine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=146"
  },
  {
    "text": "BNNS provides performance primitives on the CPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=149"
  },
  {
    "text": "in the same way as MPS provides performance primitives ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=152"
  },
  {
    "text": "on the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=155"
  },
  {
    "text": "Above this layer, there are a number of frameworks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=157"
  },
  {
    "text": "that run on one or more of these backends. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=160"
  },
  {
    "text": "These include Apple's high-level machine learning frameworks -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=162"
  },
  {
    "text": "Core ML and Create ML -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=164"
  },
  {
    "text": "as well as the specialist frameworks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=166"
  },
  {
    "text": "like Vision and Natural Language. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=168"
  },
  {
    "text": "BNNS provides support for both training and inference ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=171"
  },
  {
    "text": "across a wide range of layer types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=174"
  },
  {
    "text": "as well as support for the optimizers shown at the bottom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=176"
  },
  {
    "text": "In this release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=179"
  },
  {
    "text": "we have added support for several new layer types: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=180"
  },
  {
    "text": "embedding, random fill, and quantization; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=182"
  },
  {
    "text": "as well as support for AdamW optimizer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=186"
  },
  {
    "text": "We've also improved existing layers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=189"
  },
  {
    "text": "adding two new activation functions: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=191"
  },
  {
    "text": "SiLU and HardSwish, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=193"
  },
  {
    "text": "as well as support for new arithmetic functions: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=196"
  },
  {
    "text": "ternary select, multiply add, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=198"
  },
  {
    "text": "as well as element-wise minimum and maximum. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=200"
  },
  {
    "text": "Layer fusions provide the ability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=204"
  },
  {
    "text": "to consume the output of one layer immediately ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=206"
  },
  {
    "text": "as the input to a subsequent layer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=209"
  },
  {
    "text": "avoiding the need to write it out to memory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=210"
  },
  {
    "text": "and read it back in again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=212"
  },
  {
    "text": "We've added layer fusions of convolution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=214"
  },
  {
    "text": "and fully connected layers with the new quantization layer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=215"
  },
  {
    "text": "as well as a fusion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=218"
  },
  {
    "text": "between the arithmetic and normalization layers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=219"
  },
  {
    "text": "Other improvements include improved support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=222"
  },
  {
    "text": "for gradient clipping in the optimizer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=224"
  },
  {
    "text": "which can also be used as standalone functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=227"
  },
  {
    "text": "as well as AMSGrad support for our Adam-based optimizers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=229"
  },
  {
    "text": "Together, these improvements have expanded the range ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=233"
  },
  {
    "text": "and network architectures we can accelerate even further. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=235"
  },
  {
    "text": "Now, let me tell you about some improvements to simd.h. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=239"
  },
  {
    "text": "simd.h provides computational primitives on small vectors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=243"
  },
  {
    "text": "and matrices that fit into the CPU's registers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=246"
  },
  {
    "text": "including support for functions such as sine and cosine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=249"
  },
  {
    "text": "as well as useful geometric operations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=252"
  },
  {
    "text": "including support for quaternions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=254"
  },
  {
    "text": "The thing I really like about simd.h is it lets us jump in ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=256"
  },
  {
    "text": "and get 90 percent of the benefit of vectorization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=259"
  },
  {
    "text": "with 10 percent of the effort. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=262"
  },
  {
    "text": "Here, let me show you. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=264"
  },
  {
    "text": "Here's a neural network activation function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=266"
  },
  {
    "text": "I just invented. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=267"
  },
  {
    "text": "As you can see, it has three different branches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=269"
  },
  {
    "text": "If the input is less than minus pi, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=272"
  },
  {
    "text": "I just return zero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=274"
  },
  {
    "text": "If it's between minus pi and pi, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=276"
  },
  {
    "text": "I return two times the exponent of x, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=277"
  },
  {
    "text": "multiplied by x plus pi over two. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=279"
  },
  {
    "text": "Otherwise, if it's greater than pi, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=282"
  },
  {
    "text": "I return two times the exponent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=284"
  },
  {
    "text": "That's great, but if I have a large amount of data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=287"
  },
  {
    "text": "I may want to run it faster than a scalar loop allows. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=290"
  },
  {
    "text": "So let me show you how to implement that in simd. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=293"
  },
  {
    "text": "I already have some boilerplate in place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=296"
  },
  {
    "text": "an extension which allows me to easily write vectors ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=298"
  },
  {
    "text": "to a buffer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=301"
  },
  {
    "text": "and a simple loop that iterates over our output array ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=303"
  },
  {
    "text": "in increments of one length eight vector at a time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=306"
  },
  {
    "text": "The interesting part is how to translate our scalar function ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=310"
  },
  {
    "text": "into a simd equivalent. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=312"
  },
  {
    "text": "Let's start by looking again at our scalar code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=314"
  },
  {
    "text": "I see it has several branches. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=316"
  },
  {
    "text": "These don't work well for vectorization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=318"
  },
  {
    "text": "Instead, let's construct this out of parts we can merge ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=320"
  },
  {
    "text": "based on a mask. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=323"
  },
  {
    "text": "Looking more closely, if x is less than minus pi, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=326"
  },
  {
    "text": "I just return zero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=329"
  },
  {
    "text": "If it's greater, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=331"
  },
  {
    "text": "I return an expression involving two times exponent of x. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=332"
  },
  {
    "text": "Let's pull that out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=338"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=341"
  },
  {
    "text": "Now, we want to construct a vector from that y, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=345"
  },
  {
    "text": "replacing with zero everywhere ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=349"
  },
  {
    "text": "that x is element-wise less than minus pi. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=354"
  },
  {
    "text": "Next, we can look at a greater than case. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=360"
  },
  {
    "text": "Here, we are either multiplying by one in the high region, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=362"
  },
  {
    "text": "or by x plus pi over two in the middle region. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=366"
  },
  {
    "text": "So let's write that in the same way. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=369"
  },
  {
    "text": "We take our x plus pi over two expression ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=372"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=377"
  },
  {
    "text": "and this time we're replacing with one everywhere ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=380"
  },
  {
    "text": "that x is element-wise greater than or equal to pi. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=386"
  },
  {
    "text": "Now all that remains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=390"
  },
  {
    "text": "is to multiply these two quantities together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=392"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=395"
  },
  {
    "text": "Obviously, if a zero element, multiplying by either value of b ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=396"
  },
  {
    "text": "still returns zero. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=403"
  },
  {
    "text": "So let's run that and see how it looks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=404"
  },
  {
    "text": "Now, I can see -- looking down the console -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=413"
  },
  {
    "text": "that my new simd version is almost three times faster ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=416"
  },
  {
    "text": "than the previous scalar code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=419"
  },
  {
    "text": "So how is simd improved in this release? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=422"
  },
  {
    "text": "We've improved usability for C++ programmers using templates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=425"
  },
  {
    "text": "We have added types and traits structures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=429"
  },
  {
    "text": "to allow you to move between the underlying scalar type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=431"
  },
  {
    "text": "and vector length and the concrete simd type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=433"
  },
  {
    "text": "without complicated code structures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=435"
  },
  {
    "text": "or needing to implement similar types yourself. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=437"
  },
  {
    "text": "To simplify their use, we have also added convenient aliases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=440"
  },
  {
    "text": "to reduce the need for C++ boilerplate. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=443"
  },
  {
    "text": "Here's an example of what they look like in use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=447"
  },
  {
    "text": "The vector and matrix types allow us to go ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=449"
  },
  {
    "text": "from an underlying type -- such as float or int -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=450"
  },
  {
    "text": "and a vector length to a concrete type ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=453"
  },
  {
    "text": "and also have members providing access to related types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=455"
  },
  {
    "text": "such as the unaligned version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=458"
  },
  {
    "text": "and the mask type resulting from comparisons. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=459"
  },
  {
    "text": "The Vector_t and Matrix_t aliases ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=463"
  },
  {
    "text": "provide simplified syntax to access the same definitions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=465"
  },
  {
    "text": "as we had before. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=468"
  },
  {
    "text": "The get_traits struct allows us to go in the other direction, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=469"
  },
  {
    "text": "moving from the concrete simd type to the generic one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=472"
  },
  {
    "text": "And again, there are aliases to simplify the syntax ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=475"
  },
  {
    "text": "for common use cases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=478"
  },
  {
    "text": "We've also added templated versions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=481"
  },
  {
    "text": "of the make and convert functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=482"
  },
  {
    "text": "to allow their use in templated code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=484"
  },
  {
    "text": "These work the same as the existing functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=486"
  },
  {
    "text": "but their destination type is now a template parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=488"
  },
  {
    "text": "rather than part of the function name. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=491"
  },
  {
    "text": "In addition to our C++ improvements, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=494"
  },
  {
    "text": "we have added several new functions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=497"
  },
  {
    "text": "supported across all our languages. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=498"
  },
  {
    "text": "These are classification functions -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=501"
  },
  {
    "text": "like isfinite and isinf -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=502"
  },
  {
    "text": "that provide vector versions of the scalar functions in libm, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=504"
  },
  {
    "text": "as well as new functions for calculating the gamma function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=506"
  },
  {
    "text": "as well as the trace of simd matrices. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=509"
  },
  {
    "text": "Now, introducing Apple Archive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=512"
  },
  {
    "text": "and our new Apple Encrypted Archive formats. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=514"
  },
  {
    "text": "Apple Archive has been powering our system updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=517"
  },
  {
    "text": "for the better part of a decade. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=520"
  },
  {
    "text": "In the macOS 11 release, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=522"
  },
  {
    "text": "we gave you access to the compressed container ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=523"
  },
  {
    "text": "and archive format. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=525"
  },
  {
    "text": "New in macOS 12, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=528"
  },
  {
    "text": "we have added APIs for encryption to this support. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=530"
  },
  {
    "text": "The archive format itself ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=534"
  },
  {
    "text": "provides a modern, modular approach, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=535"
  },
  {
    "text": "allowing you to select exactly which file attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=537"
  },
  {
    "text": "and metadata you want to store. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=539"
  },
  {
    "text": "It is streamable, which means you don't have to worry about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=541"
  },
  {
    "text": "fitting the entire data in memory at once. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=543"
  },
  {
    "text": "It also supports separate manifest files ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=545"
  },
  {
    "text": "for indexing into large archives like file system images. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=547"
  },
  {
    "text": "The new Apple Encrypted Archive builds on this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=552"
  },
  {
    "text": "combining compression, authenticated encryption, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=554"
  },
  {
    "text": "and a digital signature into a single secure package. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=557"
  },
  {
    "text": "It gives you state-of-the-art cryptography ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=562"
  },
  {
    "text": "that's been designed and audited by our Security team, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=564"
  },
  {
    "text": "as well as outside experts. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=567"
  },
  {
    "text": "Data confidentiality means that your data stays secret. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=569"
  },
  {
    "text": "Data authenticity means that you can be sure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=573"
  },
  {
    "text": "it hasn't been corrupted in transit. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=575"
  },
  {
    "text": "Sender authentication means you can be sure who sent it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=577"
  },
  {
    "text": "Signature privacy means that in a public key context, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=581"
  },
  {
    "text": "only you and the sender know who has signed it. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=583"
  },
  {
    "text": "We also obfuscate metadata -- such as the file lengths -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=586"
  },
  {
    "text": "and include resigning attack protection. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=589"
  },
  {
    "text": "Together, this means you can be confident ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=592"
  },
  {
    "text": "that your data remains private and secure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=594"
  },
  {
    "text": "In order to facilitate correct deployment, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=598"
  },
  {
    "text": "we offer a number of different profiles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=600"
  },
  {
    "text": "for different use cases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=602"
  },
  {
    "text": "The basic profile is to have a digital signature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=604"
  },
  {
    "text": "without encryption. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=606"
  },
  {
    "text": "This can be used for things like software updates ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=607"
  },
  {
    "text": "where the contents are not secret, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=609"
  },
  {
    "text": "but you want to be sure the data hasn't been tampered with. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=611"
  },
  {
    "text": "Next, we have symmetric encryption, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=615"
  },
  {
    "text": "with or without a signature, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=617"
  },
  {
    "text": "using a securely shared binary key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=618"
  },
  {
    "text": "This is similar to the next option ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=621"
  },
  {
    "text": "which uses a password rather than a binary key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=622"
  },
  {
    "text": "Finally, we have full-blown public key encryption, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=625"
  },
  {
    "text": "again with or without signature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=628"
  },
  {
    "text": "In all profiles, compression is optional ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=630"
  },
  {
    "text": "and data is always authenticated. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=632"
  },
  {
    "text": "To work with these formats, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=636"
  },
  {
    "text": "we provide a number of command-line tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=637"
  },
  {
    "text": "For working with the compressed archive portion of the format, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=639"
  },
  {
    "text": "there is compression_tool, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=641"
  },
  {
    "text": "and for the encrypted archive, there is aea. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=643"
  },
  {
    "text": "The aa tool handles the entire container. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=647"
  },
  {
    "text": "There is of course also an API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=651"
  },
  {
    "text": "provided by the Apple Archive framework in both Swift and C. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=653"
  },
  {
    "text": "It is stream-based, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=657"
  },
  {
    "text": "allowing for both sequential and random access. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=658"
  },
  {
    "text": "Its implementation is multithreaded ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=661"
  },
  {
    "text": "for blazingly fast performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=663"
  },
  {
    "text": "So, let's see this API in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=666"
  },
  {
    "text": "Here, we have a simple demo app we have put together. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=668"
  },
  {
    "text": "The top portion of the window acts as a drag-and-drop target ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=671"
  },
  {
    "text": "for things we want to encrypt, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=674"
  },
  {
    "text": "whilst the bottom part is a simple status pane. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=675"
  },
  {
    "text": "Let's say I want to encrypt this TopSecret directory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=678"
  },
  {
    "text": "I just drag and drop this into the app. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=681"
  },
  {
    "text": "And, oh no! We get an error. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=685"
  },
  {
    "text": "We haven't implemented this function yet! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=686"
  },
  {
    "text": "Let's do that now. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=689"
  },
  {
    "text": "So, what do we need to do to encrypt this with Apple Archive? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=691"
  },
  {
    "text": "First, we need an encryption context ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=694"
  },
  {
    "text": "that describes the algorithm and profile to use, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=696"
  },
  {
    "text": "along with our encryption secret. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=699"
  },
  {
    "text": "We also need a file stream we're going to write the archive to. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=702"
  },
  {
    "text": "We combine these to create an encryption stream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=706"
  },
  {
    "text": "The encryption stream will encrypt a stream of bytes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=709"
  },
  {
    "text": "so we need an adaptor that will translate the directory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=712"
  },
  {
    "text": "we want to encrypt into such. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=714"
  },
  {
    "text": "This is the encoder stream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=716"
  },
  {
    "text": "The data, of course, flows in the opposite direction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=719"
  },
  {
    "text": "to the object creation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=722"
  },
  {
    "text": "We feed archive entries into the encoder stream, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=723"
  },
  {
    "text": "which transform them into bytes for the encryption stream, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=726"
  },
  {
    "text": "which then outputs the encrypted data to the file stream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=728"
  },
  {
    "text": "Let's see how that looks in code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=732"
  },
  {
    "text": "Here, we specify that we're using a symmetric profile. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=734"
  },
  {
    "text": "And the \"none\" tells us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=737"
  },
  {
    "text": "that we're going to use no digital signature. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=738"
  },
  {
    "text": "The initial portion of the enum ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=741"
  },
  {
    "text": "just specifies the particular algorithm we want to use. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=742"
  },
  {
    "text": "Here, we're going to use \"lzfse\" to compress our data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=746"
  },
  {
    "text": "With the context created, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=750"
  },
  {
    "text": "we just need to specify our symmetric encryption key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=752"
  },
  {
    "text": "Next, we create those three streams. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=756"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=760"
  },
  {
    "text": "First, we create the file stream, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=764"
  },
  {
    "text": "then we combine it with a context ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=767"
  },
  {
    "text": "to create the encryptionStream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=769"
  },
  {
    "text": "Finally, we derive the encoderStream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=771"
  },
  {
    "text": "Now, it's important that we remember ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=774"
  },
  {
    "text": "to close these streams in the correct order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=776"
  },
  {
    "text": "In particular, closing the encryptionStream ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=779"
  },
  {
    "text": "does a lot of work behind the scenes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=781"
  },
  {
    "text": "as it signs and seals the archive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=783"
  },
  {
    "text": "Finally, all that remains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=786"
  },
  {
    "text": "is for us to feed our files into the encoderStream. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=788"
  },
  {
    "text": "I specify the file attributes I want to encode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=793"
  },
  {
    "text": "and then call the writeDirectoryContents method. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=797"
  },
  {
    "text": "All that remains is print a status message to the console ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=801"
  },
  {
    "text": "with the encryption key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=804"
  },
  {
    "text": "Let's see if that worked. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=806"
  },
  {
    "text": "If I drop our TopSecret directory into the app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=809"
  },
  {
    "text": "it succeeds, encrypts it, and prints out our encryption key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=811"
  },
  {
    "text": "Now, if I drag and drop our encrypted archive into the app, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=816"
  },
  {
    "text": "it tries to decrypt it and asks for the encryption key. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=819"
  },
  {
    "text": "So let's copy and paste that encryption key ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=822"
  },
  {
    "text": "and let's see what's inside. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=826"
  },
  {
    "text": "Mmm, delicious! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=828"
  },
  {
    "text": "That's everything I have for you on Apple Encrypted Archive, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=831"
  },
  {
    "text": "so let's wrap up. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=833"
  },
  {
    "text": "Today, I talked to you about improvements ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=835"
  },
  {
    "text": "to the Accelerate framework, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=837"
  },
  {
    "text": "including support for new layer types in BNNS, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=838"
  },
  {
    "text": "as well as expanded C++ support ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=842"
  },
  {
    "text": "and other functionality in simd.h. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=844"
  },
  {
    "text": "I then gave you an introduction to the Apple Archive ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=847"
  },
  {
    "text": "and new Apple Encrypted Archive formats ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=849"
  },
  {
    "text": "and their support in the frameworks. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=851"
  },
  {
    "text": "Thank you and enjoy the rest of WWDC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=854"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10233/?time=857"
  }
]