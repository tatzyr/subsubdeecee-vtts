[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=2"
  },
  {
    "text": "Welcome to WWDC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=9"
  },
  {
    "text": "Hi, I'm Jonathan Metzgar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=11"
  },
  {
    "text": "I'm a member of the Metal Ecosystem team ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=13"
  },
  {
    "text": "at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=15"
  },
  {
    "text": "We get to work with game developers to help them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=16"
  },
  {
    "text": "get the best graphics performance on our Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=18"
  },
  {
    "text": "Dustin and I are going to show you how ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=21"
  },
  {
    "text": "we optimize high-end games for Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=23"
  },
  {
    "text": "In this video, I'm going to cover ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=26"
  },
  {
    "text": "the process that we use to optimize games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=28"
  },
  {
    "text": "Then, I'm going to show you the kinds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=30"
  },
  {
    "text": "of optimizations that are used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=32"
  },
  {
    "text": "in the games Baldur's Gate 3 and Metro Exodus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=34"
  },
  {
    "text": "And lastly, Dustin is going to do a tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=37"
  },
  {
    "text": "demonstration featuring the game Divinity: Original Sin 2, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=40"
  },
  {
    "text": "while he introduces the new GPU Timeline in Xcode 13. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=44"
  },
  {
    "text": "Let's dive in and talk about optimization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=49"
  },
  {
    "text": "So, over the past year, we collaborated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=52"
  },
  {
    "text": "with Larian Studios and 4A Games to find ways to tune ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=54"
  },
  {
    "text": "the graphics performance in their games for Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=57"
  },
  {
    "text": "I am sure you'll be excited to see the details, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=60"
  },
  {
    "text": "and I want to take a moment and thank both Larian Studios ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=63"
  },
  {
    "text": "and 4A Games for giving us permission to show ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=66"
  },
  {
    "text": "development materials in this presentation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=69"
  },
  {
    "text": "Looking back over the course of the year, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=71"
  },
  {
    "text": "we have analyzed many games and identified some common scenarios ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=73"
  },
  {
    "text": "that affect graphics performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=77"
  },
  {
    "text": "You're probably interested in finding opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=79"
  },
  {
    "text": "to optimize your own game, so we have geared this session ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=81"
  },
  {
    "text": "to emphasize how our GPU tools are especially helpful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=84"
  },
  {
    "text": "in pinpointing these problem areas ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=87"
  },
  {
    "text": "and to suggest ways to solve them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=89"
  },
  {
    "text": "And, in particular, I'd like to share some of the principles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=91"
  },
  {
    "text": "our team uses to help developers optimize their games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=94"
  },
  {
    "text": "When we optimize a graphics application, it's important ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=97"
  },
  {
    "text": "to have a methodology, a set of principles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=100"
  },
  {
    "text": "that define how we solve a particular problem. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=103"
  },
  {
    "text": "So, let me show you a four-step process. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=105"
  },
  {
    "text": "First, you need to choose what data to collect, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=109"
  },
  {
    "text": "or measure, so it will help you understand ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=112"
  },
  {
    "text": "what's happening with your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=114"
  },
  {
    "text": "Soon after you begin measuring data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=116"
  },
  {
    "text": "you will want to choose some performance targets, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=118"
  },
  {
    "text": "or where you want to be when you finish. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=120"
  },
  {
    "text": "You may decide the in-game location ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=122"
  },
  {
    "text": "to take your GPU frame captures and Metal system traces, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=124"
  },
  {
    "text": "the scene complexity, graphics settings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=127"
  },
  {
    "text": "and other metrics important to you, like frame time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=130"
  },
  {
    "text": "Then, you analyze the data to learn about ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=133"
  },
  {
    "text": "the behavior of your engine. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=135"
  },
  {
    "text": "In-depth analysis helps you find where ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=137"
  },
  {
    "text": "and why the bottlenecks are occurring. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=139"
  },
  {
    "text": "Once you know what is causing a bottleneck, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=141"
  },
  {
    "text": "then you can make improvements to the game, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=144"
  },
  {
    "text": "but normally you pick one or two at a time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=146"
  },
  {
    "text": "so you can understand the impact of each change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=148"
  },
  {
    "text": "Lastly, you verify your improvements by comparing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=151"
  },
  {
    "text": "some new measurements with your original ones. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=154"
  },
  {
    "text": "Since optimization is a process, you will go back and repeat ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=157"
  },
  {
    "text": "until your performance targets have been met. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=160"
  },
  {
    "text": "For these games, we use Xcode's Metal Debugger ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=163"
  },
  {
    "text": "to give us insights about their performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=166"
  },
  {
    "text": "and how their frame graphs are structured, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=168"
  },
  {
    "text": "and we use Metal System Trace in Instruments to learn ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=170"
  },
  {
    "text": "about a game's performance over time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=173"
  },
  {
    "text": "It's a great idea to save a GPU trace file ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=176"
  },
  {
    "text": "and an Instruments trace file so you can have ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=178"
  },
  {
    "text": "your before and after data, both before and after optimization. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=180"
  },
  {
    "text": "So, I have a little list of things you could consider, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=184"
  },
  {
    "text": "or look for, in your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=187"
  },
  {
    "text": "As I mentioned, Xcode and Instruments are great tools ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=190"
  },
  {
    "text": "to help you understand your Metal application. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=193"
  },
  {
    "text": "Optimization is about getting the best out of several areas, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=196"
  },
  {
    "text": "ranging from shader performance to memory bandwidth. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=199"
  },
  {
    "text": "Another area is getting good overlap across your vertex, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=202"
  },
  {
    "text": "fragment, and compute workloads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=206"
  },
  {
    "text": "And while rendering several frames in flight, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=208"
  },
  {
    "text": "some Apple GPUs can overlap workloads between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=211"
  },
  {
    "text": "I'll show you some pointers to help you with resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=214"
  },
  {
    "text": "dependencies, which might prevent that overlap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=217"
  },
  {
    "text": "And since some developers use a custom workflow ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=220"
  },
  {
    "text": "for their shaders, I'll show you how ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=222"
  },
  {
    "text": "compiler settings can affect performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=224"
  },
  {
    "text": "Lastly, I'll talk about how to reduce the impact ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=227"
  },
  {
    "text": "of redundant bindings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=230"
  },
  {
    "text": "Let's start with Baldur's Gate 3 from Larian Studios. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=233"
  },
  {
    "text": "Baldur's Gate 3 is an RPG building ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=238"
  },
  {
    "text": "on a 20-year gaming legacy and stands out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=240"
  },
  {
    "text": "with its cinematic visual effects. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=243"
  },
  {
    "text": "Our engagement with Larian Studios ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=245"
  },
  {
    "text": "helped us identify how they could optimize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=247"
  },
  {
    "text": "their amazing rendering engine for Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=249"
  },
  {
    "text": "First, we started with a GPU frame capture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=252"
  },
  {
    "text": "like the Ravaged Beach scene we see here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=255"
  },
  {
    "text": "Then, we break down the scene into a frame graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=257"
  },
  {
    "text": "The frame graph is a breakdown ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=261"
  },
  {
    "text": "of the order and purpose of each rendering pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=263"
  },
  {
    "text": "High-end games have many render passes specializing in achieving ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=266"
  },
  {
    "text": "a certain visual effect, such as ambient occlusion, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=269"
  },
  {
    "text": "shadow mapping, post processing, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=273"
  },
  {
    "text": "Baldur's Gate 3 has a complex frame graph, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=276"
  },
  {
    "text": "so this is a simplified version. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=278"
  },
  {
    "text": "By using Xcode's Metal Debugger, we capture a GPU trace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=282"
  },
  {
    "text": "and use it to see all the render passes in the game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=286"
  },
  {
    "text": "Clicking on Show Dependencies brings ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=289"
  },
  {
    "text": "up a visualization that you can pan and zoom. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=291"
  },
  {
    "text": "It shows how your render passes depend on the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=295"
  },
  {
    "text": "of previous ones to help you understand what's going on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=298"
  },
  {
    "text": "For example, I am zooming into this deferred ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=301"
  },
  {
    "text": "decal render stage to get more details. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=304"
  },
  {
    "text": "Next, I will show you the Instruments tools. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=306"
  },
  {
    "text": "We spend time analyzing games using the Instruments trace, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=311"
  },
  {
    "text": "using the Metal System Trace, or Game performance templates. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=315"
  },
  {
    "text": "Metal System Trace is ideal if you wanna focus on GPU execution ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=318"
  },
  {
    "text": "and scheduling analysis, and Game Performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=322"
  },
  {
    "text": "expands on that to help you with other issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=325"
  },
  {
    "text": "like thread stalls or thermal notifications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=327"
  },
  {
    "text": "Let's choose Metal System Trace to see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=330"
  },
  {
    "text": "the behavior of our engine from frame to frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=332"
  },
  {
    "text": "Instruments allows you to view several channels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=336"
  },
  {
    "text": "of data along a timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=339"
  },
  {
    "text": "Here, we find our first problem: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=340"
  },
  {
    "text": "An expensive workload in our render passes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=342"
  },
  {
    "text": "An expensive workload might mean that we need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=345"
  },
  {
    "text": "to optimize a shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=347"
  },
  {
    "text": "For instance, we see a long compute shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=348"
  },
  {
    "text": "holding up the rest of our frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=351"
  },
  {
    "text": "We call these gaps \"bubbles.\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=352"
  },
  {
    "text": "Let's switch back over to the GPU trace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=355"
  },
  {
    "text": "and investigate this further. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=357"
  },
  {
    "text": "This is the \"before\" GPU trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=360"
  },
  {
    "text": "Let's change the grouping from API CALL to PIPELINE STATE. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=362"
  },
  {
    "text": "You may notice the pipeline states ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=366"
  },
  {
    "text": "are sorted by execution time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=368"
  },
  {
    "text": "Let's check the first compute pipeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=371"
  },
  {
    "text": "We can expand the compute function details ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=373"
  },
  {
    "text": "to take a closer look at its statistics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=375"
  },
  {
    "text": "Notice here that there are ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=378"
  },
  {
    "text": "over four-and-a-half-thousand instructions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=379"
  },
  {
    "text": "That's quite a lot. So, what else? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=382"
  },
  {
    "text": "Let's see what resources are being used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=385"
  },
  {
    "text": "by this compute function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=387"
  },
  {
    "text": "Depending on the input data, this function uses up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=390"
  },
  {
    "text": "to 120 textures to produce the output. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=393"
  },
  {
    "text": "However, we discovered that only six ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=396"
  },
  {
    "text": "to 12 are actually used 90% of the time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=398"
  },
  {
    "text": "So, let's talk about how this shader could be improved. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=402"
  },
  {
    "text": "Shaders that need to handle many different conditions can reserve ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=406"
  },
  {
    "text": "more registers than necessary, and this can reduce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=410"
  },
  {
    "text": "the number of threads that run in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=412"
  },
  {
    "text": "Splitting your workload into smaller, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=414"
  },
  {
    "text": "more focused shaders, which need fewer registers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=416"
  },
  {
    "text": "can improve the utilization of the shader cores. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=419"
  },
  {
    "text": "So, instead of selecting the appropriate algorithm ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=422"
  },
  {
    "text": "in the shader, you would choose the appropriate shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=425"
  },
  {
    "text": "permutation when you issue your GPU workload. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=427"
  },
  {
    "text": "Additionally, a shader function which uses too many registers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=430"
  },
  {
    "text": "can result in register pressure, when an execution unit runs out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=434"
  },
  {
    "text": "of fast register memory and has to use device memory instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=438"
  },
  {
    "text": "That's one reason to use 16-bit types, like half, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=441"
  },
  {
    "text": "when appropriate, since they use half the register ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=445"
  },
  {
    "text": "space than 32-bit types, like floats. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=448"
  },
  {
    "text": "In this case, Larian Studios already optimized their shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=452"
  },
  {
    "text": "to use half-precision floating point and decided to create ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=455"
  },
  {
    "text": "dedicated shader variants, instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=458"
  },
  {
    "text": "So, let's see what happened. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=461"
  },
  {
    "text": "When comparing the numbers before, in the box on the left, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=464"
  },
  {
    "text": "with the numbers in the box on the right, the number ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=467"
  },
  {
    "text": "of instructions reduced by 84%, branches reduced 90%, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=470"
  },
  {
    "text": "registers reduced 25%, and texture reads reduced 92%. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=474"
  },
  {
    "text": "This shader variant is used 90% of the time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=480"
  },
  {
    "text": "We can also see this in the Metal System Trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=483"
  },
  {
    "text": "Notice here, in the before trace, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=486"
  },
  {
    "text": "the bubbles we saw earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=488"
  },
  {
    "text": "And here, in the after trace, they have been minimized. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=492"
  },
  {
    "text": "Larian Studios was able to reduce this shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=495"
  },
  {
    "text": "by eight milliseconds, on average. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=498"
  },
  {
    "text": "That is a huge win! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=500"
  },
  {
    "text": "If you look at your most expensive pipeline state objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=502"
  },
  {
    "text": "and shaders, you may find a complicated shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=505"
  },
  {
    "text": "that could be simplified. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=508"
  },
  {
    "text": "This is especially true if the results ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=509"
  },
  {
    "text": "of that shader are used by a later pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=512"
  },
  {
    "text": "This was a huge improvement for the game, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=514"
  },
  {
    "text": "but short of the developer's performance target. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=516"
  },
  {
    "text": "We just mentioned memory as an issue, and one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=519"
  },
  {
    "text": "of the features of our GPUs is lossless compression, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=521"
  },
  {
    "text": "which is enabled in certain conditions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=525"
  },
  {
    "text": "So, maybe there was a flag we either accidentally set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=527"
  },
  {
    "text": "or forgot to set. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=530"
  },
  {
    "text": "Lossless compression helps reduce bandwidth by compressing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=531"
  },
  {
    "text": "textures when they are stored from tile to device memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=535"
  },
  {
    "text": "If you look at the Bandwidth Insights ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=540"
  },
  {
    "text": "on the Summary page, you may notice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=542"
  },
  {
    "text": "Lossless Compression warnings for some textures. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=545"
  },
  {
    "text": "They tell you that these textures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=547"
  },
  {
    "text": "can't be lossless compressed, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=549"
  },
  {
    "text": "and you may pay a bandwidth penalty. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=550"
  },
  {
    "text": "Metal Debugger will also let you know why these textures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=553"
  },
  {
    "text": "can't be lossless compressed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=555"
  },
  {
    "text": "Here we see it's because of the ShaderWrite usage flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=557"
  },
  {
    "text": "We can see all the usage flags by going to the memory section. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=561"
  },
  {
    "text": "Once in the memory section, we can filter by render targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=565"
  },
  {
    "text": "Then, right click on the table header, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=569"
  },
  {
    "text": "choose texture, and then usage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=572"
  },
  {
    "text": "Now, we can sort by usage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=575"
  },
  {
    "text": "and find the textures using ShaderWrite. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=577"
  },
  {
    "text": "If you set the ShaderWrite or PixelFormatView flag ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=581"
  },
  {
    "text": "when you create your textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=584"
  },
  {
    "text": "you will disable lossless compression. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=585"
  },
  {
    "text": "Let's take a look at these flags in more detail. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=587"
  },
  {
    "text": "The Unknown, ShaderWrite, and PixelFormatView flags ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=591"
  },
  {
    "text": "prevent your textures from being lossless compressed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=595"
  },
  {
    "text": "The general rule of thumb is to use these flags ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=597"
  },
  {
    "text": "only when required. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=600"
  },
  {
    "text": "For example, you would use the ShaderWrite flag ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=601"
  },
  {
    "text": "if you use the write() method to store values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=604"
  },
  {
    "text": "in a texture from a fragment or compute function. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=606"
  },
  {
    "text": "Rendering to a texture bound as a color attachment ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=609"
  },
  {
    "text": "doesn't require the ShaderWrite flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=611"
  },
  {
    "text": "And don't set the PixelFormatView option ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=614"
  },
  {
    "text": "if you only need to read the component values ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=616"
  },
  {
    "text": "in a different order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=618"
  },
  {
    "text": "Instead, create a texture view using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=619"
  },
  {
    "text": "a swizzle pattern to specify the new order. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=622"
  },
  {
    "text": "Similarly, don't set the PixelFormatView option if ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=624"
  },
  {
    "text": "your texture view only converts between linear space and sRGB. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=628"
  },
  {
    "text": "Check the documentation for more information. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=633"
  },
  {
    "text": "Shader optimization and lossless compression ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=635"
  },
  {
    "text": "are two techniques that have helped us out, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=638"
  },
  {
    "text": "but another problem area is getting good overlap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=640"
  },
  {
    "text": "across the vertex, fragment, and compute channels. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=643"
  },
  {
    "text": "Let's take a look at two ways to optimize workloads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=646"
  },
  {
    "text": "across channels. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=649"
  },
  {
    "text": "First, we'll start by looking at our Metal System Trace again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=650"
  },
  {
    "text": "Here, we can see that we have low overlap ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=653"
  },
  {
    "text": "on our vertex, fragment, and compute channels. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=655"
  },
  {
    "text": "It would be nice to improve this to keep the GPU busy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=658"
  },
  {
    "text": "One way to solve this problem is to see if we can ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=662"
  },
  {
    "text": "restructure the encoding order in our frame graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=664"
  },
  {
    "text": "In other words, we want to move this work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=667"
  },
  {
    "text": "over to where the vertex stage has very low occupancy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=669"
  },
  {
    "text": "We would like to process those vertices earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=672"
  },
  {
    "text": "along with the fragment stage of an earlier render pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=675"
  },
  {
    "text": "We can think of our frame graph as a list ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=680"
  },
  {
    "text": "of rendering tasks, like this pseudocode example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=683"
  },
  {
    "text": "Getting good overlap can be as simple as changing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=686"
  },
  {
    "text": "the order of your render tasks in your frame graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=689"
  },
  {
    "text": "Some tasks may rely on results from earlier ones, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=691"
  },
  {
    "text": "but not always. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=694"
  },
  {
    "text": "It turns out that the CascadedShadowBuffer stage, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=696"
  },
  {
    "text": "which is vertex-shader heavy, could be moved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=699"
  },
  {
    "text": "a few tasks earlier, since it has few dependencies. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=701"
  },
  {
    "text": "And now, we see that our region ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=705"
  },
  {
    "text": "with low overlap has better utilization of the vertex ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=707"
  },
  {
    "text": "and fragment channels, giving us another 1 ms win. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=710"
  },
  {
    "text": "But there is another optimization ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=713"
  },
  {
    "text": "that we can try out. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=715"
  },
  {
    "text": "Games often have two to three frames in flight. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=717"
  },
  {
    "text": "So, a cool feature in our tile-based ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=720"
  },
  {
    "text": "deferred rendering, or TBDR architecture GPUs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=722"
  },
  {
    "text": "is to overlap workloads from two frames ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=725"
  },
  {
    "text": "when there are no resource dependencies between them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=728"
  },
  {
    "text": "So, I'm going to show you how to optimize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=731"
  },
  {
    "text": "for this possibility. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=732"
  },
  {
    "text": "Let's have a look at the GPU track in Instruments once again. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=735"
  },
  {
    "text": "Here, you can see that these frames ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=739"
  },
  {
    "text": "are processed, almost serially. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=741"
  },
  {
    "text": "This is caused by using a blit encoder to update ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=744"
  },
  {
    "text": "constant buffers, like per-frame animation data, and so on. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=747"
  },
  {
    "text": "To efficiently update constant buffer data with a discrete GPU, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=752"
  },
  {
    "text": "we blit from shared buffers on the CPU to a private buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=756"
  },
  {
    "text": "on the GPU, which will be used for rendering the frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=760"
  },
  {
    "text": "This strategy is efficient for GPUs with discrete memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=763"
  },
  {
    "text": "so you want to keep this behavior for that purpose. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=767"
  },
  {
    "text": "If your device has a unified memory architecture, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=771"
  },
  {
    "text": "then there is no need to use a blit encoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=774"
  },
  {
    "text": "to copy your data to a private buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=777"
  },
  {
    "text": "However, when you use a shared buffer in a ring-buffer pattern, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=779"
  },
  {
    "text": "you need to watch out for synchronization issues ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=783"
  },
  {
    "text": "because visual corruption can happen if your CPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=786"
  },
  {
    "text": "writes to data currently being read by the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=789"
  },
  {
    "text": "Let's see this in action. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=792"
  },
  {
    "text": "Here, you can see in this diagram ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=796"
  },
  {
    "text": "the encoding and rendering of our frames. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=798"
  },
  {
    "text": "We are using colors to represent ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=801"
  },
  {
    "text": "the shared buffers, which are updated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=803"
  },
  {
    "text": "at the beginning of the frame: blue for buffer one, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=804"
  },
  {
    "text": "green for buffer two, and yellow for buffer three. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=808"
  },
  {
    "text": "Ring buffers are typically used to implement queues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=811"
  },
  {
    "text": "which need to use a compact amount of memory. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=815"
  },
  {
    "text": "Here, there is no concern of a data race condition ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=818"
  },
  {
    "text": "with this arrangement, as our writing and reading ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=821"
  },
  {
    "text": "of our shared buffers is mutually exclusive. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=823"
  },
  {
    "text": "It's very common to have latency between encoding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=826"
  },
  {
    "text": "the frame and the rendering of a frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=829"
  },
  {
    "text": "This causes a shift ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=831"
  },
  {
    "text": "of when the rendering actually begins. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=833"
  },
  {
    "text": "As long as the latency isn't too long, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=835"
  },
  {
    "text": "you will not have a data race condition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=837"
  },
  {
    "text": "However, what happens if latency continues to increase? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=839"
  },
  {
    "text": "Well, this introduces a data race condition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=844"
  },
  {
    "text": "where the main thread is updating its shared buffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=847"
  },
  {
    "text": "during the time the GPU is rendering the frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=849"
  },
  {
    "text": "And if that happens, you could get visual corruption ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=852"
  },
  {
    "text": "if elements of your frame are dependent on this data. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=855"
  },
  {
    "text": "In the case of Baldur's Gate 3, removing the private buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=858"
  },
  {
    "text": "and blit encoder eliminated ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=862"
  },
  {
    "text": "the synchronization point, but introduced a race condition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=864"
  },
  {
    "text": "which affected their temporal anti-aliasing render pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=867"
  },
  {
    "text": "So, let's see how to avoid this situation. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=870"
  },
  {
    "text": "To avoid this race condition, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=874"
  },
  {
    "text": "you need to make sure you are not writing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=876"
  },
  {
    "text": "into the same resource the GPU is reading from. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=878"
  },
  {
    "text": "For example, you could utilize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=880"
  },
  {
    "text": "a completion handler, and then wait until it is safe ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=882"
  },
  {
    "text": "to update the shared buffer in your encoding thread. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=885"
  },
  {
    "text": "But let me show you how we avoided a wait time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=888"
  },
  {
    "text": "We maintained our completion handler, but added an extra ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=893"
  },
  {
    "text": "buffer to our ring buffer to avoid the wait. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=896"
  },
  {
    "text": "The extra buffer is colored purple on the bottom diagram. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=899"
  },
  {
    "text": "The memory consumption remains the same as with a discrete GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=902"
  },
  {
    "text": "But if you need to save on memory, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=906"
  },
  {
    "text": "and the CPU wait time doesn't affect frame rate of your game, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=908"
  },
  {
    "text": "then you can just use three buffers. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=911"
  },
  {
    "text": "So, let's look at an easy way to decide how many shared ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=913"
  },
  {
    "text": "and private buffers to create with a pseudocode example. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=917"
  },
  {
    "text": "In this code snippet, you can see how to choose ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=922"
  },
  {
    "text": "the number of shared and private buffers at initialization time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=925"
  },
  {
    "text": "Once we have created our device, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=929"
  },
  {
    "text": "we can check to see if the device has ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=931"
  },
  {
    "text": "unified memory or not, and then ensure that we create ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=933"
  },
  {
    "text": "an extra shared buffer, or to use a private buffer. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=936"
  },
  {
    "text": "This extra buffer will help reduce ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=939"
  },
  {
    "text": "the impact of waiting for a completion handler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=941"
  },
  {
    "text": "which we are using to avoid a data race condition. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=944"
  },
  {
    "text": "And now, we can see how Fragment workloads from the previous ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=947"
  },
  {
    "text": "frame overlaps with Vertex workloads from the next frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=950"
  },
  {
    "text": "Overall, this can give us one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=954"
  },
  {
    "text": "to two milliseconds, depending on the scene. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=956"
  },
  {
    "text": "And, of course, this approach can be applied not ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=958"
  },
  {
    "text": "only for the constant buffer data we've ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=961"
  },
  {
    "text": "shown in this example, but for all of the buffer data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=962"
  },
  {
    "text": "you transfer from the CPU to the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=965"
  },
  {
    "text": "So, let's review. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=969"
  },
  {
    "text": "Larian Studios was able to achieve their performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=971"
  },
  {
    "text": "targets by applying the following optimizations: ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=974"
  },
  {
    "text": "Optimizing their most expensive shaders to reduce bubbles, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=977"
  },
  {
    "text": "opting in to lossless compression to improve ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=981"
  },
  {
    "text": "bandwidth, overlapping vertex and fragment workloads ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=984"
  },
  {
    "text": "to get better GPU utilization, and checking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=987"
  },
  {
    "text": "for resource dependencies that prevent frame overlap. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=990"
  },
  {
    "text": "When they were finished, Larian Studios not only met ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=993"
  },
  {
    "text": "their performance targets, but got a 33% improvement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=996"
  },
  {
    "text": "in frame time for their game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=999"
  },
  {
    "text": "And now, we will look at a different set ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1001"
  },
  {
    "text": "of optimizations with the game Metro Exodus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1004"
  },
  {
    "text": "Metro Exodus is known for its epic storyline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1007"
  },
  {
    "text": "and demanding visual effects, as you can see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1010"
  },
  {
    "text": "in this series of game-play clips. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1012"
  },
  {
    "text": "After the integration of our suggested optimizations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1014"
  },
  {
    "text": "4A Games was able to meet their performance targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1017"
  },
  {
    "text": "So now, let's have a look at an in-game scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1020"
  },
  {
    "text": "from Metro Exodus. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1023"
  },
  {
    "text": "Metro Exodus uses a custom workflow to translate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1025"
  },
  {
    "text": "render commands into Metal API commands, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1028"
  },
  {
    "text": "which is quite common for cross-platform games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1030"
  },
  {
    "text": "The translation layer they are using is optimized ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1033"
  },
  {
    "text": "for Metal, but some issues can arise ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1036"
  },
  {
    "text": "when two complex systems come together in practice. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1038"
  },
  {
    "text": "So, additional performance tuning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1042"
  },
  {
    "text": "was required to meet their project goals. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1043"
  },
  {
    "text": "As in the previous game, we start ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1048"
  },
  {
    "text": "by investigating how a frame is being rendered. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1050"
  },
  {
    "text": "Modern renderers have a lot of different techniques involved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1053"
  },
  {
    "text": "so first we try to understand the high-level frame graph. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1056"
  },
  {
    "text": "Again, we start analysis by looking at the GPU trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1060"
  },
  {
    "text": "It always gives us useful insights about game performance. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1064"
  },
  {
    "text": "So first, let's start with the GPU time, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1068"
  },
  {
    "text": "which doesn't meet the developer performance targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1071"
  },
  {
    "text": "So, let's find the shader or pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1073"
  },
  {
    "text": "which is the most time-consuming. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1075"
  },
  {
    "text": "To do this, we are going to group by pipeline state ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1077"
  },
  {
    "text": "once again and look at the most expensive one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1080"
  },
  {
    "text": "Let's quickly look at its statistics. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1083"
  },
  {
    "text": "You can see that there is a high number of ALU instructions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1086"
  },
  {
    "text": "compared to the total, meaning this is a math-heavy shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1089"
  },
  {
    "text": "We also see that the number of registers being used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1092"
  },
  {
    "text": "by the shader is quite high. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1095"
  },
  {
    "text": "The number of registers used by a particular shader directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1097"
  },
  {
    "text": "affects how its workload will scale during execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1100"
  },
  {
    "text": "The higher this number is, the less work can be done ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1103"
  },
  {
    "text": "in parallel by the GPU. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1106"
  },
  {
    "text": "Sometimes it's just a complex shader, such as SSAO ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1108"
  },
  {
    "text": "in this example, that requires lots ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1111"
  },
  {
    "text": "of computations and registers, but sometimes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1114"
  },
  {
    "text": "the compiler settings can affect the generated instructions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1116"
  },
  {
    "text": "and register allocation, as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1119"
  },
  {
    "text": "Let's also take a look at the shader compiler options. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1121"
  },
  {
    "text": "And it turns out, this shader was compiled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1124"
  },
  {
    "text": "with the fast math flag disabled. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1126"
  },
  {
    "text": "Fast math allows the shader compiler to optimize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1128"
  },
  {
    "text": "various instructions, and it is enabled ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1131"
  },
  {
    "text": "for the Metal shader compiler, by default. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1133"
  },
  {
    "text": "However, there might be some cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1136"
  },
  {
    "text": "for example, using custom shader workflows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1138"
  },
  {
    "text": "that can disable this compilation flag. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1141"
  },
  {
    "text": "In this case, we discovered that the translation layer, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1143"
  },
  {
    "text": "which 4A Games was using to invoke the compiler, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1146"
  },
  {
    "text": "had its default behavior set to not use fast math. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1149"
  },
  {
    "text": "So, what is fast math? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1153"
  },
  {
    "text": "Fast math is a set of optimizations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1155"
  },
  {
    "text": "for floating-point arithmetic, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1158"
  },
  {
    "text": "that trades between speed and correctness. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1159"
  },
  {
    "text": "For example, assumptions can be made that there will be no NANs, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1162"
  },
  {
    "text": "infinity, or signed zeros as either a result or argument. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1166"
  },
  {
    "text": "Fast math optimizations can also apply ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1170"
  },
  {
    "text": "algebraically-equivalent transformations, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1173"
  },
  {
    "text": "which may affect the precision in floating-point results. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1175"
  },
  {
    "text": "However in most scenarios, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1179"
  },
  {
    "text": "fast math is a great choice for games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1181"
  },
  {
    "text": "This can significantly improve performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1183"
  },
  {
    "text": "especially in ALU-bound cases. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1185"
  },
  {
    "text": "Our recommendation to you is to check your compiler options ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1188"
  },
  {
    "text": "to verify that you have enabled fast math, if your shaders do ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1191"
  },
  {
    "text": "not depend on the things that we just mentioned.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1195"
  },
  {
    "text": "The fast math flag works at the front- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1200"
  },
  {
    "text": "and back-end compiler levels. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1203"
  },
  {
    "text": "When you are building your shader source, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1204"
  },
  {
    "text": "the front-end shader compiler will select fast math functions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1206"
  },
  {
    "text": "which will be used in intermediate code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1209"
  },
  {
    "text": "This will hint to the back-end shader compiler that it can ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1212"
  },
  {
    "text": "generate more optimal GPU machine code. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1215"
  },
  {
    "text": "Here, you can see how the Instructions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1218"
  },
  {
    "text": "and Register counters on the left have been improved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1220"
  },
  {
    "text": "in the box on the right after we recompiled this shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1223"
  },
  {
    "text": "So, after changing the behavior of the translation layer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1226"
  },
  {
    "text": "to enable fast math for all the shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1229"
  },
  {
    "text": "we got a 21% frame time decrease in our test workload ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1232"
  },
  {
    "text": "using the built-in game benchmark. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1235"
  },
  {
    "text": "So, the next area I wanna talk about is redundant bindings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1238"
  },
  {
    "text": "If we go back to the summary page, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1243"
  },
  {
    "text": "and look at the API insights, we can see there are ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1245"
  },
  {
    "text": "many redundant bindings when rendering the frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1248"
  },
  {
    "text": "Redundant bindings can be either resources like textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1251"
  },
  {
    "text": "buffers, and samplers; or render states ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1254"
  },
  {
    "text": "like depth stencil state, viewport configuration, etc. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1257"
  },
  {
    "text": "Repeatedly binding resources might negatively affect ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1261"
  },
  {
    "text": "your encoding time, but redundant render ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1264"
  },
  {
    "text": "state changes may also affect the GPU time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1266"
  },
  {
    "text": "Let's have a look at the encoding ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1271"
  },
  {
    "text": "and GPU times in the Metal System Trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1272"
  },
  {
    "text": "For a given frame, it takes eight-and-a-half milliseconds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1276"
  },
  {
    "text": "for all the commands to be encoded ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1279"
  },
  {
    "text": "and around 22 milliseconds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1280"
  },
  {
    "text": "for the GPU to render this frame. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1282"
  },
  {
    "text": "When we investigated the cause of the redundant bindings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1284"
  },
  {
    "text": "we found that the translation layer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1287"
  },
  {
    "text": "could be modified to reduce them. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1289"
  },
  {
    "text": "So, let me show you a pseudocode example which shows how ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1292"
  },
  {
    "text": "to check for and reduce redundant bindings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1295"
  },
  {
    "text": "Instead of binding textures directly to the encoder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1298"
  },
  {
    "text": "you can pre-cache them and only bind them if they change. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1302"
  },
  {
    "text": "And to minimize interactions with the API, you can set all ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1305"
  },
  {
    "text": "the textures with one call to the setFragmentTextures method ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1309"
  },
  {
    "text": "instead of setting them in a loop, one by one. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1312"
  },
  {
    "text": "Additionally, you can apply a similar approach ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1316"
  },
  {
    "text": "to other shader stages and other binding types, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1318"
  },
  {
    "text": "like buffers and samplers, as well as render states. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1321"
  },
  {
    "text": "So, let's see what happened in the Metal System Trace. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1324"
  },
  {
    "text": "4A Games was able to reduce encoding time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1329"
  },
  {
    "text": "between 30% and 50%, depending on the scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1332"
  },
  {
    "text": "because the translation layer wasn't repeatedly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1335"
  },
  {
    "text": "binding the same resources and render states. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1338"
  },
  {
    "text": "However, GPU time also decreased by up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1341"
  },
  {
    "text": "to three milliseconds and, overall, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1343"
  },
  {
    "text": "resulted in a 15% speedup in their in-game benchmark. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1346"
  },
  {
    "text": "If you have a few redundant binding warnings, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1349"
  },
  {
    "text": "it's not an issue, but we definitely see an impact ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1352"
  },
  {
    "text": "with hundreds or thousands of redundant bindings. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1354"
  },
  {
    "text": "So, avoiding redundant bindings gave us a further 15% reduction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1359"
  },
  {
    "text": "in average frame time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1364"
  },
  {
    "text": "After these two improvements, 4A Games was able to meet ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1365"
  },
  {
    "text": "their performance targets. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1368"
  },
  {
    "text": "So now, let's summarize what we learned ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1370"
  },
  {
    "text": "from optimizing Metro Exodus for Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1372"
  },
  {
    "text": "First, if you're using a custom workflow for shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1377"
  },
  {
    "text": "you should check your compiler settings to ensure ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1380"
  },
  {
    "text": "you are using the best options for your Metal applications. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1382"
  },
  {
    "text": "And if you see a lot of redundant binding warnings ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1386"
  },
  {
    "text": "in the Metal Debugger, I showed you a technique ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1388"
  },
  {
    "text": "to reduce encoding and GPU time overhead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1390"
  },
  {
    "text": "which you can apply either to your engine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1393"
  },
  {
    "text": "or the translation layer that you are using. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1395"
  },
  {
    "text": "And now, I'd like to hand it over to Dustin, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1397"
  },
  {
    "text": "who's going to talk to you about Divinity: Original Sin 2 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1400"
  },
  {
    "text": "and demo the new Xcode GPU timeline features. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1403"
  },
  {
    "text": "Thanks, Jonathan. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1407"
  },
  {
    "text": "Hi, my name is Dustin, and I work ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1409"
  },
  {
    "text": "on the GPU Software team here at Apple. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1411"
  },
  {
    "text": "And today, I'm excited to show you a hands-on demo ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1413"
  },
  {
    "text": "optimizing an early build of Larian Studios hit title, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1416"
  },
  {
    "text": "Divinity: Original Sin 2. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1419"
  },
  {
    "text": "Last year, Larian announced they were ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1421"
  },
  {
    "text": "bringing their critically-acclaimed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1423"
  },
  {
    "text": "role-playing game Divinity: Original Sin 2 to the iPad. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1425"
  },
  {
    "text": "And over the last year, Larian has worked hard ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1428"
  },
  {
    "text": "optimizing their game to run great on Apple GPU's, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1430"
  },
  {
    "text": "and the game is a lot of fun to play. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1433"
  },
  {
    "text": "Larian was able to achieve these results with the help of a great ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1435"
  },
  {
    "text": "set of tools in Metal Debugger and Metal System Trace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1439"
  },
  {
    "text": "that are getting even better this year in Xcode 13 ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1443"
  },
  {
    "text": "with the addition of the new GPU Timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1446"
  },
  {
    "text": "Let's get started by taking a look at a frame ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1449"
  },
  {
    "text": "of Divinity: Original Sin 2 I captured earlier. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1452"
  },
  {
    "text": "We are here on the Summary Page, which contains an overview ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1455"
  },
  {
    "text": "of your frame that helps to guide you along the way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1458"
  },
  {
    "text": "as you debug and optimize your game. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1460"
  },
  {
    "text": "From the Summary Page, we can quickly navigate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1462"
  },
  {
    "text": "to all the great tools offered by the Metal Debugger, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1465"
  },
  {
    "text": "including the new GPU Timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1468"
  },
  {
    "text": "And accessing it is as easy as clicking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1470"
  },
  {
    "text": "on the new Performance page here. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1472"
  },
  {
    "text": "So, let me go ahead and do that. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1474"
  },
  {
    "text": "Introducing the new GPU Timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1477"
  },
  {
    "text": "The Timeline has been designed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1480"
  },
  {
    "text": "around Apple GPU's unique architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1481"
  },
  {
    "text": "that allows each GPU pipeline stage to run in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1483"
  },
  {
    "text": "In order to maximize performance, we need to keep ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1487"
  },
  {
    "text": "all pipeline stages as busy as possible by maximizing overlap, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1490"
  },
  {
    "text": "which the Timeline allows you to easily see. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1494"
  },
  {
    "text": "The Timeline is composed of two sections. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1497"
  },
  {
    "text": "On the top, we have the GPU section, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1500"
  },
  {
    "text": "which is composed of separate tracks ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1502"
  },
  {
    "text": "for each pipeline stage, making it really easy to see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1504"
  },
  {
    "text": "which stages are active and running in parallel. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1508"
  },
  {
    "text": "Underneath, we have the Counters section, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1511"
  },
  {
    "text": "which contains a curated set of important counters, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1513"
  },
  {
    "text": "such as shader occupancy, bandwidth, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1516"
  },
  {
    "text": "and performance limiters that provides us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1519"
  },
  {
    "text": "with deeper insight into how the GPU's system performance ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1522"
  },
  {
    "text": "changes over the course of your workload. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1525"
  },
  {
    "text": "The encoders in the GPU tracks provide us with a lot ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1529"
  },
  {
    "text": "of useful information, with even more just a click away. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1531"
  },
  {
    "text": "Selecting a Render Encoder brings up ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1535"
  },
  {
    "text": "the Timeline's sidebar, which contains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1536"
  },
  {
    "text": "additional information for the currently-selected item. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1538"
  },
  {
    "text": "In this case, the sidebar contains ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1541"
  },
  {
    "text": "render pass information, such as texture details, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1543"
  },
  {
    "text": "load/store actions, and the number of draw calls. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1546"
  },
  {
    "text": "Notice that since Render Encoders are composed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1549"
  },
  {
    "text": "of two shader stages, both the vertex ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1552"
  },
  {
    "text": "and fragment stages are highlighted, as well. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1554"
  },
  {
    "text": "If we select the Fragment track instead, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1557"
  },
  {
    "text": "the sidebar contains all of the encoders in the Timeline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1559"
  },
  {
    "text": "which can then be sorted based on time. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1562"
  },
  {
    "text": "But that's not all because we can expand the Fragment track ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1566"
  },
  {
    "text": "to reveal the Shader Timeline, which shows all of the shaders ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1569"
  },
  {
    "text": "used by the encoders during their execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1572"
  },
  {
    "text": "We can easily identify long-running shaders, as well ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1575"
  },
  {
    "text": "as which shaders are running in parallel with others. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1578"
  },
  {
    "text": "For the Fragment track, we also have ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1582"
  },
  {
    "text": "two additional tracks for load/store actions. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1584"
  },
  {
    "text": "This is useful to be able to see when the GPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1586"
  },
  {
    "text": "is loading and storing attachment textures between ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1589"
  },
  {
    "text": "local and main memory, and is an important ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1591"
  },
  {
    "text": "consideration in order to reduce bandwidth usage. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1594"
  },
  {
    "text": "Selecting a shader will highlight all the regions ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1598"
  },
  {
    "text": "on the timeline where it is active, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1600"
  },
  {
    "text": "and we can learn more about it from its compiler statistics ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1602"
  },
  {
    "text": "and runtime performance metrics presented in the sidebar. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1605"
  },
  {
    "text": "Expanding the shader timeline shows each shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1609"
  },
  {
    "text": "in its own track, which is useful ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1612"
  },
  {
    "text": "for understanding the flow of your GPU workload ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1614"
  },
  {
    "text": "and the order of shader execution. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1616"
  },
  {
    "text": "Now that you're a bit more familiar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1621"
  },
  {
    "text": "with the new GPU Timeline and thinking ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1622"
  },
  {
    "text": "of all the ways that you will be able to use it yourself, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1624"
  },
  {
    "text": "let me show you just how how easy it is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1627"
  },
  {
    "text": "to find performance bottlenecks using the GPU Timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1629"
  },
  {
    "text": "Shader performance can suffer as a result of many factors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1633"
  },
  {
    "text": "one of which is register pressure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1637"
  },
  {
    "text": "and when this happens, the GPU runs out ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1639"
  },
  {
    "text": "of fast register memory and has to use main memory instead. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1642"
  },
  {
    "text": "A high ALU limiter alone does not indicate ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1646"
  },
  {
    "text": "a performance bottleneck. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1649"
  },
  {
    "text": "It may just be that your shader is math heavy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1650"
  },
  {
    "text": "However, when combined with low shader occupancy, this may be ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1653"
  },
  {
    "text": "an indicator of a shader experiencing register pressure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1657"
  },
  {
    "text": "which will cause your shader to run slower. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1660"
  },
  {
    "text": "In order to highlight this better for today's demo, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1663"
  },
  {
    "text": "let me pin both the ALU track and the shader occupancy track ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1666"
  },
  {
    "text": "to the top of the Timeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1670"
  },
  {
    "text": "by clicking the \"Plus\" button here on the left.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1671"
  },
  {
    "text": "As I scan over these two tracks, the first thing I notice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1677"
  },
  {
    "text": "is this region here, where the ALU spikes and, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1681"
  },
  {
    "text": "at the same time, shader occupancy drops. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1683"
  },
  {
    "text": "I can highlight a region on the Timeline to see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1688"
  },
  {
    "text": "how long it takes to execute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1690"
  },
  {
    "text": "Notice as I do this, the counters in the sidebar ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1692"
  },
  {
    "text": "update dynamically based on the selected region. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1694"
  },
  {
    "text": "This region here is taking about 3.7 milliseconds to execute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1697"
  },
  {
    "text": "Let's zoom in and take a closer look. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1701"
  },
  {
    "text": "It looks like our issue is related ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1705"
  },
  {
    "text": "to these first four encoders of the Ambient Occlusion pass. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1707"
  },
  {
    "text": "Let's see what shaders are being used ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1710"
  },
  {
    "text": "by taking a look at the shader timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1712"
  },
  {
    "text": "Looks like our issue is related to this shader here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1716"
  },
  {
    "text": "as it's the only one being used. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1718"
  },
  {
    "text": "From the sidebar's runtime performance metrics, not only is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1721"
  },
  {
    "text": "this shader ALU intensive, it is float heavy, as well, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1724"
  },
  {
    "text": "so let's take a look ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1727"
  },
  {
    "text": "at the Floating Point Utilization track. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1728"
  },
  {
    "text": "Notice as I hover over this track, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1732"
  },
  {
    "text": "this shader is only using F32. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1734"
  },
  {
    "text": "F16 is at 0%. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1736"
  },
  {
    "text": "From the Timeline, we can navigate directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1739"
  },
  {
    "text": "to shader source by right clicking and opening the shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1741"
  },
  {
    "text": "Here in the source editor, we can see a simplified version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1746"
  },
  {
    "text": "of the shader source for demo purposes. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1749"
  },
  {
    "text": "Along with source, we can also see per-line cost information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1752"
  },
  {
    "text": "with the help of the shader profiler. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1755"
  },
  {
    "text": "Hovering over the shader profiler pie chart provides us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1758"
  },
  {
    "text": "with confirmation that this function is ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1761"
  },
  {
    "text": "likely causing register pressure, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1763"
  },
  {
    "text": "as it is both ALU and float heavy. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1765"
  },
  {
    "text": "Situations like this are candidates for using F16, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1768"
  },
  {
    "text": "which gives us double the amount of registers in places ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1772"
  },
  {
    "text": "where the full precision of F32 is not required, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1774"
  },
  {
    "text": "which will help to reduce register pressure. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1777"
  },
  {
    "text": "Metal Debugger makes it really convenient ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1781"
  },
  {
    "text": "to update source code directly inside the source editor. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1782"
  },
  {
    "text": "Let me make this change here that uses an updated version ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1786"
  },
  {
    "text": "of the shader that uses a mixture of F32 and F16. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1789"
  },
  {
    "text": "After making this change, I can click the \"Reload Shaders\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1794"
  },
  {
    "text": "button down here at the bottom, which will trigger ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1797"
  },
  {
    "text": "a shader update that both recompiles and reprofiles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1800"
  },
  {
    "text": "our shader, as well as updating the per-line shader costs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1803"
  },
  {
    "text": "Let's see what effect this change has made ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1808"
  },
  {
    "text": "by going back to the Timeline. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1809"
  },
  {
    "text": "The first thing I'd like to do is see ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1812"
  },
  {
    "text": "how long those first four encoders ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1814"
  },
  {
    "text": "of the Ambient Occlusion pass are taking.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1815"
  },
  {
    "text": "Looks like this region here is taking about 2.6 milliseconds ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1820"
  },
  {
    "text": "to execute. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1824"
  },
  {
    "text": "The change we just made has improved ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1825"
  },
  {
    "text": "our shader execution time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1827"
  },
  {
    "text": "by over one millisecond, or 30%, which is a huge improvement. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1828"
  },
  {
    "text": "Taking a look at some of the counters from earlier, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1834"
  },
  {
    "text": "while ALU is still high, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1836"
  },
  {
    "text": "that is to be expected for a math-heavy shader. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1838"
  },
  {
    "text": "But notice now, our shader is experiencing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1841"
  },
  {
    "text": "less register pressure, as our shader occupancy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1843"
  },
  {
    "text": "has improved by almost double. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1846"
  },
  {
    "text": "This was accomplished by using a mixture of F32 and F16, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1848"
  },
  {
    "text": "which we can see using ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1852"
  },
  {
    "text": "the Floating Point Utilization track. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1853"
  },
  {
    "text": "The GPU Timeline made it really easy for me ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1856"
  },
  {
    "text": "to identify the issue, navigate to where ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1859"
  },
  {
    "text": "the problem existed, and get it fixed. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1862"
  },
  {
    "text": "The GPU Timeline is a great tool ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1864"
  },
  {
    "text": "for identifying not only shader performance issues, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1867"
  },
  {
    "text": "but also memory bandwidth and many other kinds of issues. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1870"
  },
  {
    "text": "I hope you enjoyed this demo of the brand-new GPU Timeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1873"
  },
  {
    "text": "and are already thinking of all the ways ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1877"
  },
  {
    "text": "that you're going to use it to optimize your games ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1879"
  },
  {
    "text": "to run even better on Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1881"
  },
  {
    "text": "Thank you, and enjoy the rest of WWDC. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1884"
  },
  {
    "text": "Back to Jonathan. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1887"
  },
  {
    "text": "Thank you, Dustin, for that amazing demo. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1888"
  },
  {
    "text": "And thank you for watching. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1891"
  },
  {
    "text": "It was great to share with you how we worked ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1893"
  },
  {
    "text": "with Larian Studios and 4A Games to take advantage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1895"
  },
  {
    "text": "of the features on our Apple GPUs. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1897"
  },
  {
    "text": "They provide many ways to improve performance, ranging ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1900"
  },
  {
    "text": "from lossless compression to overlapping shader workloads. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1903"
  },
  {
    "text": "And our tools, like Metal System Trace ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1906"
  },
  {
    "text": "and the new GPU timeline in Xcode, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1908"
  },
  {
    "text": "will really be helpful to you as you improve your games. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1910"
  },
  {
    "text": "If there's one thing I can leave you with, a thorough examination ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1913"
  },
  {
    "text": "of your rendering is essential to delivering a highly-optimized ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1916"
  },
  {
    "text": "game, and our tools are there to help you with this. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1920"
  },
  {
    "text": "If you'd like to learn more, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1923"
  },
  {
    "text": "please refer to the related sessions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1924"
  },
  {
    "text": "\"Discover Metal debugging, profiling, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1926"
  },
  {
    "text": "and asset creation tools\" in this year's WWDC, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1929"
  },
  {
    "text": "or \"Optimize Metal apps and games with GPU counters\" ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1932"
  },
  {
    "text": "from WWDC20. ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1936"
  },
  {
    "text": "Thank you, and farewell! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1937"
  },
  {
    "text": "[music]",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10148/?time=1940"
  }
]