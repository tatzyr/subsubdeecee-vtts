[
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=0"
  },
  {
    "text": "♪ Bass music playing ♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=2"
  },
  {
    "text": " ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=5"
  },
  {
    "text": "♪ ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=7"
  },
  {
    "text": "Alejandro Segovia Azapian: Welcome to WWDC! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=9"
  },
  {
    "text": "My name is Ale Segovia Azapian, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=11"
  },
  {
    "text": "and I'm a GPU software engineer at Apple.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=13"
  },
  {
    "text": "In this session, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=16"
  },
  {
    "text": "we're going to explore bindless rendering in Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=17"
  },
  {
    "text": "Bindless is a modern resource binding model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=21"
  },
  {
    "text": "that allows making groups of resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=23"
  },
  {
    "text": "available to the GPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=25"
  },
  {
    "text": "to implement modern rendering techniques.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=27"
  },
  {
    "text": "First, we'll take a look at the need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=29"
  },
  {
    "text": "for the concept behind bindless.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=31"
  },
  {
    "text": "Then, we will introduce the bindless model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=33"
  },
  {
    "text": "and show how it provides the flexibility needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=35"
  },
  {
    "text": "to solve the challenges of the traditional binding model.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=37"
  },
  {
    "text": "We will recap the mechanisms to encode ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=41"
  },
  {
    "text": "and make your scene resources available to Metal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=43"
  },
  {
    "text": "with argument buffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=46"
  },
  {
    "text": "and how to navigate your GPU structures from shaders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=48"
  },
  {
    "text": "Let's get started! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=51"
  },
  {
    "text": "So bindless rendering allows making all our scene resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=53"
  },
  {
    "text": "available to our shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=57"
  },
  {
    "text": "bringing incredible flexibility to our graphics techniques.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=59"
  },
  {
    "text": "Let's take a look at an example.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=62"
  },
  {
    "text": "Let's imagine we have a ray tracing kernel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=66"
  },
  {
    "text": "finding intersections against an acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=68"
  },
  {
    "text": "For some light effects, such as ray-traced shadows, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=71"
  },
  {
    "text": "the algorithm is very natural.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=74"
  },
  {
    "text": "We want to find any objects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=78"
  },
  {
    "text": "between the intersection point and the light.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=80"
  },
  {
    "text": "All we need to trace the shadow ray is a position ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=83"
  },
  {
    "text": "and the direction toward the light.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=86"
  },
  {
    "text": "No object attributes or Metal resources are needed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=89"
  },
  {
    "text": "beyond the world-space position of the intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=92"
  },
  {
    "text": "which we can derive from the ray ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=94"
  },
  {
    "text": "and the intersection's parameter.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=96"
  },
  {
    "text": "For other effects however, such as reflections, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=99"
  },
  {
    "text": "the situation gets more complicated.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=101"
  },
  {
    "text": "Let's take a look at a ray tracing reflection shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=103"
  },
  {
    "text": "in Metal Shading Language.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=105"
  },
  {
    "text": "In this new example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=109"
  },
  {
    "text": "we've just found an intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=110"
  },
  {
    "text": "and we're trying to paint the pixel ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=112"
  },
  {
    "text": "with the correct reflected color.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=113"
  },
  {
    "text": "If we just paint a solid color after we find an intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=117"
  },
  {
    "text": "the reflection on the ground will not look accurate.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=120"
  },
  {
    "text": "To produce correct results, we need to determine ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=123"
  },
  {
    "text": "the attributes of each reflected point found ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=126"
  },
  {
    "text": "and calculate the correct shading for its pixel.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=128"
  },
  {
    "text": "This problem is also present for other ray-traced effects ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=134"
  },
  {
    "text": "such as diffuse global illumination ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=137"
  },
  {
    "text": "and even ambient occlusion in some cases.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=138"
  },
  {
    "text": "The challenge is that when we ray trace, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=142"
  },
  {
    "text": "our rays may hit any object in the acceleration structure.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=144"
  },
  {
    "text": "This means that from our ray tracing shader, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=147"
  },
  {
    "text": "we potentially need access to any Metal resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=150"
  },
  {
    "text": "in our scene, including vertex data -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=152"
  },
  {
    "text": "associated with the mesh intersected -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=155"
  },
  {
    "text": "and its material.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=157"
  },
  {
    "text": "It is just not possible to bind this amount of resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=159"
  },
  {
    "text": "directly to our pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=161"
  },
  {
    "text": "This is where the bindless binding model comes in.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=163"
  },
  {
    "text": "The idea behind bindless is to aggregate our resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=167"
  },
  {
    "text": "and link them together.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=170"
  },
  {
    "text": "This allows us to bind a single buffer to the pipeline ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=172"
  },
  {
    "text": "and make all referenced resources available ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=175"
  },
  {
    "text": "via navigation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=177"
  },
  {
    "text": "In Metal, the construct that allows us to do this ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=180"
  },
  {
    "text": "is argument buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=182"
  },
  {
    "text": "In particular, for bindless, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=183"
  },
  {
    "text": "argument buffers Tier 2 are required.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=185"
  },
  {
    "text": "These are available on the Apple6 and Mac2 GPU families.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=188"
  },
  {
    "text": "Argument buffers can be used from all shader types in Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=192"
  },
  {
    "text": "This means that you can use them for both ray tracing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=196"
  },
  {
    "text": "and rasterization.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=198"
  },
  {
    "text": "As we saw, for certain ray tracing effects, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=200"
  },
  {
    "text": "using bindless is mandatory ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=202"
  },
  {
    "text": "in order to obtain good visual results.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=204"
  },
  {
    "text": "For rasterization, the use is optional ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=207"
  },
  {
    "text": "but provides advantages over the direct binding model.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=209"
  },
  {
    "text": "In particular, it virtually removes the slot limits ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=212"
  },
  {
    "text": "for the number of resources that can be bound ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=215"
  },
  {
    "text": "for any given draw call, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=217"
  },
  {
    "text": "and it also provides some nice optimization opportunities ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=220"
  },
  {
    "text": "that we'll explore later in this session.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=223"
  },
  {
    "text": "We introduced argument buffers with Metal 2 as a mechanism ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=226"
  },
  {
    "text": "to allow you to bind constant data and resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=229"
  },
  {
    "text": "all at once in a single call to the Metal API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=232"
  },
  {
    "text": "Argument buffers are very flexible ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=236"
  },
  {
    "text": "and can even reference other buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=238"
  },
  {
    "text": "The idea behind the bindless model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=242"
  },
  {
    "text": "is to leverage this capability ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=243"
  },
  {
    "text": "to link all of our scene resources together.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=245"
  },
  {
    "text": "This will allow making them available to the GPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=248"
  },
  {
    "text": "at the same time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=250"
  },
  {
    "text": "Let's look at an example of a way ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=253"
  },
  {
    "text": "to link our scene resources with argument buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=255"
  },
  {
    "text": "Let's say we want to render a model such as this fire truck.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=259"
  },
  {
    "text": "The model is comprised of textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=263"
  },
  {
    "text": "vertex data, and index data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=265"
  },
  {
    "text": "These are the typical resources you would bind one by one ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=268"
  },
  {
    "text": "for every draw call in the traditional binding model.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=272"
  },
  {
    "text": "In our case, however -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=275"
  },
  {
    "text": "because we want to make all textures, vertex data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=277"
  },
  {
    "text": "and indices of the scene available at once -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=280"
  },
  {
    "text": "we need to aggregate these.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=282"
  },
  {
    "text": "Here's a potential way to do so.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=285"
  },
  {
    "text": "We can first create a meshes argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=287"
  },
  {
    "text": "to contain all our meshes or submeshes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=289"
  },
  {
    "text": "depending on how our assets are organized.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=292"
  },
  {
    "text": "This argument buffer will allow referencing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=295"
  },
  {
    "text": "the vertex and index arrays in our scene.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=298"
  },
  {
    "text": "Similarly, we can do the same and encode our materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=301"
  },
  {
    "text": "to an argument buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=305"
  },
  {
    "text": "Each material can reference its textures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=306"
  },
  {
    "text": "as well as contain inline constant data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=309"
  },
  {
    "text": "OK, but now that we have all our meshes and materials ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=313"
  },
  {
    "text": "available to the GPU, how can we bring them together? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=316"
  },
  {
    "text": "Well, we can, for example, create an instance object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=319"
  },
  {
    "text": "and also place it in an argument buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=323"
  },
  {
    "text": "An instance can reference one mesh ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=325"
  },
  {
    "text": "and an associated material.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=327"
  },
  {
    "text": "This is also a great place ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=329"
  },
  {
    "text": "to store a model transformation matrix ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=330"
  },
  {
    "text": "as inline constant data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=332"
  },
  {
    "text": "But we don't have to stop there.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=334"
  },
  {
    "text": "Now that we can store one instance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=336"
  },
  {
    "text": "we can take this further ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=338"
  },
  {
    "text": "and encode all of our instances as an array ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=340"
  },
  {
    "text": "into this argument buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=342"
  },
  {
    "text": "Let's simplify this diagram ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=343"
  },
  {
    "text": "and add a few more truck instances, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=345"
  },
  {
    "text": "each one with its own material.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=347"
  },
  {
    "text": "As we can see, with this, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=350"
  },
  {
    "text": "we can now have our full scene and its resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=353"
  },
  {
    "text": "encoded and linked with argument buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=356"
  },
  {
    "text": "Later, when we want to reference any of these resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=359"
  },
  {
    "text": "from our shaders, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=362"
  },
  {
    "text": "we just need a pointer to the instances buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=364"
  },
  {
    "text": "We can pass it directly ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=367"
  },
  {
    "text": "and interpret this buffer as an array, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=368"
  },
  {
    "text": "or pass a pointer through another scene argument buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=370"
  },
  {
    "text": "Now, it's important to note what happens with the residency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=375"
  },
  {
    "text": "of indirectly accessed resources.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=377"
  },
  {
    "text": "Since we're only passing a pointer to the scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=380"
  },
  {
    "text": "into the pipeline, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=382"
  },
  {
    "text": "Metal will know about this buffer reference, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=384"
  },
  {
    "text": "but not about resources accessed indirectly.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=386"
  },
  {
    "text": "The application is responsible for declaring residency ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=390"
  },
  {
    "text": "of all indirectly accessed resources.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=393"
  },
  {
    "text": "Making a resource resident means signaling to the driver ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=396"
  },
  {
    "text": "to make its memory available to the GPU.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=400"
  },
  {
    "text": "This is necessary so we can reference them from our shaders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=403"
  },
  {
    "text": "We can do this by calling the useResource:usage: API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=408"
  },
  {
    "text": "for compute encoders and useResource:usage:stages: API ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=411"
  },
  {
    "text": "for render command encoders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=415"
  },
  {
    "text": "Accessing a nonresident resource is a common cause ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=417"
  },
  {
    "text": "of GPU restarts and command buffer failures.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=419"
  },
  {
    "text": "This is because its memory pages may not be present ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=422"
  },
  {
    "text": "if we forgot to call this API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=426"
  },
  {
    "text": "So it's very important to declare ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=427"
  },
  {
    "text": "every indirectly accessed resource to Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=429"
  },
  {
    "text": "Now, another option, for convenience, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=432"
  },
  {
    "text": "is that resources allocated from MTLHeaps ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=434"
  },
  {
    "text": "can now be made resident with a single call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=436"
  },
  {
    "text": "by means of the useHeap API.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=438"
  },
  {
    "text": "This is a great option if you are already suballocating ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=441"
  },
  {
    "text": "or planning to suballocate resources from heaps.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=443"
  },
  {
    "text": "Now, heaps are a fantastic part of the Metal API, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=447"
  },
  {
    "text": "and we recommend you use them ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=449"
  },
  {
    "text": "for the best resource-creation performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=450"
  },
  {
    "text": "and memory-saving opportunities.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=452"
  },
  {
    "text": "There are, however, a few considerations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=455"
  },
  {
    "text": "to use them effectively.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=456"
  },
  {
    "text": "The first thing to ask is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=459"
  },
  {
    "text": "Are all our suballocated resources only read from? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=460"
  },
  {
    "text": "Examples of where we might need to write into a resource ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=464"
  },
  {
    "text": "include mesh skinning from a compute shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=466"
  },
  {
    "text": "and dynamic textures, amongst others.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=468"
  },
  {
    "text": "In these cases, if the GPU needs to write into any resources, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=472"
  },
  {
    "text": "they need to be declared resident individually ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=476"
  },
  {
    "text": "with the write usage flag.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=478"
  },
  {
    "text": "Additionally, any resources that may have been modified ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=482"
  },
  {
    "text": "that we now intend to read from ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=486"
  },
  {
    "text": "will still need their own useResource call.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=488"
  },
  {
    "text": "This is so that the Metal framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=490"
  },
  {
    "text": "can handle resource transitions for you, flushing GPU caches ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=492"
  },
  {
    "text": "and adjusting the internal memory layout.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=495"
  },
  {
    "text": "The second consideration is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=499"
  },
  {
    "text": "Does the heap track suballocate resource dependencies? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=501"
  },
  {
    "text": "Again, this is especially important ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=504"
  },
  {
    "text": "if we're reading and writing into resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=506"
  },
  {
    "text": "coming from the same heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=508"
  },
  {
    "text": "Metal is great at avoiding synchronization problems ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=511"
  },
  {
    "text": "through dependency tracking, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=514"
  },
  {
    "text": "and since Metal 2.3, heaps can be configured ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=516"
  },
  {
    "text": "to track hazards in the access to their resources.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=518"
  },
  {
    "text": "However, since heaps are a single resource to Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=522"
  },
  {
    "text": "synchronization is handled at the heap level ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=526"
  },
  {
    "text": "not the suballocation level.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=528"
  },
  {
    "text": "This may subject suballocated resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=530"
  },
  {
    "text": "to the problem of false sharing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=532"
  },
  {
    "text": "Let's take a look.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=534"
  },
  {
    "text": "Let's imagine we have two render passes -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=536"
  },
  {
    "text": "A and B -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=537"
  },
  {
    "text": "accessing resources from the same heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=539"
  },
  {
    "text": "Render pass A is rendering to a render texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=541"
  },
  {
    "text": "allocated from a tracked heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=544"
  },
  {
    "text": "Render pass B is reading from an unrelated buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=546"
  },
  {
    "text": "that is suballocated from the same heap.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=549"
  },
  {
    "text": "Depending on different conditions, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=553"
  },
  {
    "text": "render passes A and B may qualify to be executed ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=554"
  },
  {
    "text": "in parallel by the GPU; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=557"
  },
  {
    "text": "however, due to the potential hazard ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=558"
  },
  {
    "text": "of writing and reading from the same resource -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=561"
  },
  {
    "text": "the heap -- Metal has to serialize access ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=564"
  },
  {
    "text": "to ensure there are no race conditions.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=566"
  },
  {
    "text": "This can potentially increase the execution wall-clock time ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=570"
  },
  {
    "text": "of our workload by the GPU.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=573"
  },
  {
    "text": "In our case, however, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=575"
  },
  {
    "text": "if we know the individual resources are independent, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=577"
  },
  {
    "text": "this fence could be avoided.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=580"
  },
  {
    "text": "There are two ways to do this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=581"
  },
  {
    "text": "One option is to suballocate resources that are updatable ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=585"
  },
  {
    "text": "from heaps separate to the ones used for our static resources.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=589"
  },
  {
    "text": "The other option, if we desire to bundle everything together, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=593"
  },
  {
    "text": "is to make sure heaps are configured ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=596"
  },
  {
    "text": "not to track their suballocated resources.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=598"
  },
  {
    "text": "This is the default behavior in Metal, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=601"
  },
  {
    "text": "and it means we as programmers take on the responsibility ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=603"
  },
  {
    "text": "of synchronizing hazards ourselves.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=605"
  },
  {
    "text": "Now, in this diagram I simplified things a bit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=609"
  },
  {
    "text": "to illustrate the problem of false sharing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=611"
  },
  {
    "text": "In practice, overlapping occurs at the shading stage level, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=614"
  },
  {
    "text": "not at the render pass level.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=617"
  },
  {
    "text": "As a consequence, Metal allows us ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=619"
  },
  {
    "text": "to specify our fences at the stage granularity.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=621"
  },
  {
    "text": "This is great because it allows us to still run ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=624"
  },
  {
    "text": "parts of our pipeline -- such as vertex stage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=627"
  },
  {
    "text": "and rasterizer -- concurrently, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=630"
  },
  {
    "text": "and only block later in the fragment stage ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=632"
  },
  {
    "text": "if it happens to depend on ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=634"
  },
  {
    "text": "a previous pass's fragment stage output.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=636"
  },
  {
    "text": "We recommend you always do this for maximum performance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=640"
  },
  {
    "text": "if possible.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=642"
  },
  {
    "text": "Now, this is a lot to remember, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=646"
  },
  {
    "text": "so if you only get one thing from this list, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=647"
  },
  {
    "text": "please remember this: read-only data, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=650"
  },
  {
    "text": "such as static textures and meshes, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=652"
  },
  {
    "text": "are the easiest to handle.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=654"
  },
  {
    "text": "Determine the total allocation size ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=657"
  },
  {
    "text": "and alignment requirements upfront ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=659"
  },
  {
    "text": "and place these resources in a heap when the app starts ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=660"
  },
  {
    "text": "or during a loading section in your game.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=663"
  },
  {
    "text": "This way, you can later make it resident in a single call, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=666"
  },
  {
    "text": "with minimal overhead in your critical path.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=670"
  },
  {
    "text": "Now that we know about the bindless binding model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=674"
  },
  {
    "text": "let's take a look at how we can encode our resources ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=676"
  },
  {
    "text": "and put this in practice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=678"
  },
  {
    "text": "and make our complete scene available to the GPU ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=680"
  },
  {
    "text": "with argument buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=682"
  },
  {
    "text": "Let's say we want to encode our instances buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=685"
  },
  {
    "text": "Remember, this buffer consists of an array of instances.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=688"
  },
  {
    "text": "As we saw, instances reference a mesh, a material, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=691"
  },
  {
    "text": "and contain an inline constant 4x4 matrix ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=694"
  },
  {
    "text": "describing the transformation from local to world space.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=697"
  },
  {
    "text": "Encoding is performed via an argument buffer encoder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=701"
  },
  {
    "text": "and there are two distinct ways to create one in Metal.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=704"
  },
  {
    "text": "You may be familiar with encoding via reflection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=708"
  },
  {
    "text": "If the argument buffer is passed as a direct parameter ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=712"
  },
  {
    "text": "to the shader function, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=714"
  },
  {
    "text": "we can ask the MTLFunction object ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=715"
  },
  {
    "text": "to create an encoder for us.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=717"
  },
  {
    "text": "This mechanism works great, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=720"
  },
  {
    "text": "but when we are encoding the entire scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=721"
  },
  {
    "text": "into argument buffers, not all encoders can be reflected.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=723"
  },
  {
    "text": "In particular, the MTLFunction signature ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=726"
  },
  {
    "text": "does not know about the indirectly referenced buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=728"
  },
  {
    "text": "There might also be other situations ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=733"
  },
  {
    "text": "where creating an encoder from a MTLFunction ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=735"
  },
  {
    "text": "is not convenient; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=736"
  },
  {
    "text": "for example, if your engine architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=738"
  },
  {
    "text": "handles argument-buffer creation and resource loading ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=740"
  },
  {
    "text": "separate from pipeline state creation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=742"
  },
  {
    "text": "Additionally, we cannot reflect an encoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=746"
  },
  {
    "text": "when the function is expecting to be passed an array.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=748"
  },
  {
    "text": "So what can we do in these cases? ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=751"
  },
  {
    "text": "For these cases, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=754"
  },
  {
    "text": "Metal provides a convenient second mechanism ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=755"
  },
  {
    "text": "to create an encoder through a MTLArgumentDescriptor.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=757"
  },
  {
    "text": "MTLArgumentDescriptors allow describing the struct members ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=760"
  },
  {
    "text": "to Metal and subsequently creating an encoder ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=763"
  },
  {
    "text": "without a MTLFunction.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=765"
  },
  {
    "text": "We must first create a descriptor for each member, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=767"
  },
  {
    "text": "specifying data type and binding index.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=771"
  },
  {
    "text": "Next, we take our descriptors, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=774"
  },
  {
    "text": "and pass them directly to the MTLDevice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=777"
  },
  {
    "text": "to create our encoder.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=779"
  },
  {
    "text": "As a result, we obtain our encoder object back.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=781"
  },
  {
    "text": "So let's explore what this looks like in code.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=785"
  },
  {
    "text": "For each member, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=789"
  },
  {
    "text": "we needed to create a MTLArgumentDescriptor; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=790"
  },
  {
    "text": "we specify the binding index, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=793"
  },
  {
    "text": "corresponding to the ID attribute ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=795"
  },
  {
    "text": "for the member in the struct; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=796"
  },
  {
    "text": "we specify the MTLDataType and potentially access; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=799"
  },
  {
    "text": "and finally, after we've declared all the members, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=803"
  },
  {
    "text": "we can create the encoder directly from the device, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=807"
  },
  {
    "text": "passing an array with all our descriptors.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=809"
  },
  {
    "text": "Once we have an encoder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=814"
  },
  {
    "text": "it's straightforward to record our data into a buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=815"
  },
  {
    "text": "We set the argument buffer on the encoder, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=819"
  },
  {
    "text": "pointing at the beginning of the buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=822"
  },
  {
    "text": "Then, we simply set the data we want to store.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=823"
  },
  {
    "text": "Encoding an array is simple as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=827"
  },
  {
    "text": "All we have to do ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=830"
  },
  {
    "text": "is offset the encoder's argument buffer recording point ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=831"
  },
  {
    "text": "by the encodedLength, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=834"
  },
  {
    "text": "which we can conveniently retrieve from the encoder.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=835"
  },
  {
    "text": "For the next instance, we add the encodedLength ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=838"
  },
  {
    "text": "to our offset a second time.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=840"
  },
  {
    "text": "In fact, the offset for each position we need to record in ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=844"
  },
  {
    "text": "is going to be the index times the encodedLength.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=847"
  },
  {
    "text": "This mechanism makes it very easy ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=850"
  },
  {
    "text": "to encode arrays of structs.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=851"
  },
  {
    "text": "Now, one important point worth mentioning ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=854"
  },
  {
    "text": "is that no special treatment is needed from shader side ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=856"
  },
  {
    "text": "to index into these arrays.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=859"
  },
  {
    "text": "The shader does not need to know ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=862"
  },
  {
    "text": "the length of the buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=863"
  },
  {
    "text": "and can freely index into any location in the array.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=865"
  },
  {
    "text": "It just works! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=867"
  },
  {
    "text": "OK, now that we have encoded our bindless scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=869"
  },
  {
    "text": "let's take a look at navigation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=871"
  },
  {
    "text": "For the case of ray tracing, navigation is very natural.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=875"
  },
  {
    "text": "First, we bind the buffer that contains the root ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=878"
  },
  {
    "text": "of our bindless scene to our ray tracing pipeline.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=880"
  },
  {
    "text": "This is the argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=883"
  },
  {
    "text": "from where we can access all the others.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=884"
  },
  {
    "text": "Next, from our kernel, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=887"
  },
  {
    "text": "we proceed with the ray-traced intersection as usual.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=889"
  },
  {
    "text": "After we discovered an intersection, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=892"
  },
  {
    "text": "the intersection result object describes the navigation.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=894"
  },
  {
    "text": "We can query this object for instance_id, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=898"
  },
  {
    "text": "geometry_id, and primitive_id.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=900"
  },
  {
    "text": "These members are designed specifically ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=903"
  },
  {
    "text": "for navigating our acceleration structures.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=905"
  },
  {
    "text": "It is, therefore, important to build our bindless scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=907"
  },
  {
    "text": "with a structure that mirrors our acceleration structures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=910"
  },
  {
    "text": "such as the one shown earlier.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=912"
  },
  {
    "text": "Let's take a look at it again.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=914"
  },
  {
    "text": "Remember, this is just an example ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=916"
  },
  {
    "text": "of how to organize the scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=918"
  },
  {
    "text": "so I'm going to navigate it according to how I organized it.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=920"
  },
  {
    "text": "The particular details for your scene may vary, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=923"
  },
  {
    "text": "according to how you decide to organize ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=925"
  },
  {
    "text": "your own argument buffers.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=927"
  },
  {
    "text": "First, we need to find an intersection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=930"
  },
  {
    "text": "Once we have it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=933"
  },
  {
    "text": "because we strategically organized our bindless scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=934"
  },
  {
    "text": "given the instance_id we can now follow the pointer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=937"
  },
  {
    "text": "to the instances buffer and determine which one we hit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=940"
  },
  {
    "text": "Next, as we saw, the instance knows its mesh and material.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=945"
  },
  {
    "text": "So we can simply use the geometry_id ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=949"
  },
  {
    "text": "to determine which geometry we hit ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=951"
  },
  {
    "text": "within the referenced buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=952"
  },
  {
    "text": "Finally, if we prepared each mesh ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=956"
  },
  {
    "text": "to know its index buffer, we can use the primitive_id ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=958"
  },
  {
    "text": "to determine the exact primitive that we hit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=961"
  },
  {
    "text": "In the case of a triangle, for instance, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=963"
  },
  {
    "text": "we can pull the three indices from this array ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=965"
  },
  {
    "text": "and use them to retrieve its vertex data.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=967"
  },
  {
    "text": "Here's what this navigation looks like ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=970"
  },
  {
    "text": "in Metal Shading Language.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=972"
  },
  {
    "text": "From the intersection object, we retrieve the instance_id ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=974"
  },
  {
    "text": "and use it to dynamically index into our instances array ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=977"
  },
  {
    "text": "and retrieve the instance we hit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=980"
  },
  {
    "text": "Next, having the instance, we use the geometry_id ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=984"
  },
  {
    "text": "to determine which geometry or submesh was hit.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=987"
  },
  {
    "text": "Once we've determined the geometry, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=992"
  },
  {
    "text": "we can directly pull the indices from the index buffer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=994"
  },
  {
    "text": "In the case of a triangle, we pull three indices, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=998"
  },
  {
    "text": "one after the other.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1000"
  },
  {
    "text": "We use these indices to access into the vertex data array ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1003"
  },
  {
    "text": "and retrieve any attribute we need for our technique.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1006"
  },
  {
    "text": "For example, we can retrieve the normals ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1009"
  },
  {
    "text": "corresponding to each vertex.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1011"
  },
  {
    "text": "And finally, using the point's barycentric coordinates, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1014"
  },
  {
    "text": "we manually interpolate vertex normals ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1017"
  },
  {
    "text": "to arrive at the correct normal at the intersection point.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1019"
  },
  {
    "text": "With these changes in place, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1024"
  },
  {
    "text": "taking it back to our teapot example, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1026"
  },
  {
    "text": "now that we have a way to calculate the normal ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1028"
  },
  {
    "text": "at the intersection point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1029"
  },
  {
    "text": "we can correctly shade our reflection.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1031"
  },
  {
    "text": "We've updated the code to find the correct attributes ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1035"
  },
  {
    "text": "at the intersection point, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1037"
  },
  {
    "text": "and now the results are visually correct.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1039"
  },
  {
    "text": "We can now continue building on this framework ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1043"
  },
  {
    "text": "to calculate any other attribute we want, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1045"
  },
  {
    "text": "such as texture coordinates to apply a texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1047"
  },
  {
    "text": "or tangent vectors to implement normal mapping.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1049"
  },
  {
    "text": "So here we saw how to navigate our bindless scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1055"
  },
  {
    "text": "to retrieve vertex data, manually interpolate it, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1057"
  },
  {
    "text": "and finally, apply it to correctly shade ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1060"
  },
  {
    "text": "all the intersection points discovered.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1062"
  },
  {
    "text": "To help you bring these concepts into your own engine, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1064"
  },
  {
    "text": "we're going to be releasing a companion code sample ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1066"
  },
  {
    "text": "that shows a concrete implementation of all of this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1069"
  },
  {
    "text": "This is a hybrid rendering sample ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1072"
  },
  {
    "text": "that calculates ray-traced reflections for a scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1074"
  },
  {
    "text": "loaded using the Model I/O framework.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1076"
  },
  {
    "text": "The sample shows how you can encode a bindless scene ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1078"
  },
  {
    "text": "that matches the ray tracing acceleration structures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1081"
  },
  {
    "text": "and it also shows how to find intersections ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1084"
  },
  {
    "text": "and correctly shade their associated pixels ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1086"
  },
  {
    "text": "directly from your ray tracing shaders.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1089"
  },
  {
    "text": "As we can see here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1093"
  },
  {
    "text": "the sample also allows directly visualizing ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1094"
  },
  {
    "text": "the output of the reflection ray tracing shader ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1096"
  },
  {
    "text": "just at the points where the rays intersect the trucks.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1098"
  },
  {
    "text": "This is great for iteratively experimenting ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1101"
  },
  {
    "text": "with the reflection algorithm.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1103"
  },
  {
    "text": "Now, we've covered a lot of ground here, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1108"
  },
  {
    "text": "and so far we've been centering most of our discussion ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1110"
  },
  {
    "text": "in the context of ray tracing.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1112"
  },
  {
    "text": "But as I mentioned earlier, we can apply the same principles ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1114"
  },
  {
    "text": "to properly shade our pixels in the context of rasterization.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1117"
  },
  {
    "text": "Physically based rendering is a great candidate for this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1120"
  },
  {
    "text": "In PBR, our fragment shader needs information ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1124"
  },
  {
    "text": "coming from several textures; ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1127"
  },
  {
    "text": "for example, albedo, roughness, metallic, and ambient occlusion.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1129"
  },
  {
    "text": "In the direct binding model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1134"
  },
  {
    "text": "we need to bind each slot individually ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1135"
  },
  {
    "text": "before issuing each one of our draw calls.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1137"
  },
  {
    "text": "The bindless model vastly simplifies this.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1141"
  },
  {
    "text": "Once we have encoded our argument buffers, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1145"
  },
  {
    "text": "we can directly bind the scene, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1147"
  },
  {
    "text": "navigate to the material corresponding to our draw call, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1149"
  },
  {
    "text": "and access all textures indirectly.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1151"
  },
  {
    "text": "In fact, since we now just need to bind a single buffer once, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1153"
  },
  {
    "text": "this architecture provides an excellent opportunity ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1157"
  },
  {
    "text": "to optimize our engines further ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1160"
  },
  {
    "text": "by reducing the number of draw calls ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1162"
  },
  {
    "text": "and use instanced rendering instead.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1163"
  },
  {
    "text": "Just remember to make resident all textures we plan to access.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1166"
  },
  {
    "text": "Here's an example of a typical PBR shader.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1171"
  },
  {
    "text": "In the traditional model, each referenced texture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1174"
  },
  {
    "text": "needs to be individually bound before this draw call.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1177"
  },
  {
    "text": "If the following draw call ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1180"
  },
  {
    "text": "requires a different set of textures, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1181"
  },
  {
    "text": "all these resources need to be bound one by one as well.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1183"
  },
  {
    "text": "When using a bindless model, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1188"
  },
  {
    "text": "we can now just pass our root argument buffer ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1189"
  },
  {
    "text": "and retrieve our material ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1192"
  },
  {
    "text": "directly from its referenced structures, just like before.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1193"
  },
  {
    "text": "First we retrieve the instance -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1197"
  },
  {
    "text": "this may be determined in the vertex shading stage -- ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1199"
  },
  {
    "text": "then retrieve its material, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1203"
  },
  {
    "text": "and use its referenced textures and constant data ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1206"
  },
  {
    "text": "to calculate the appropriate shading.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1209"
  },
  {
    "text": "Finally, we just return the color.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1212"
  },
  {
    "text": "All right! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1215"
  },
  {
    "text": "And that was a tour on how to effectively implement ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1216"
  },
  {
    "text": "bindless rendering in Metal! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1218"
  },
  {
    "text": "To recap, we explored the Metal bindless model ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1220"
  },
  {
    "text": "and saw how extremely flexible it is, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1223"
  },
  {
    "text": "allowing you to represent your scene any way you desire.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1225"
  },
  {
    "text": "My recommendation is to design and build structures ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1229"
  },
  {
    "text": "that ease the navigation for your given renderer.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1232"
  },
  {
    "text": "This way, navigation becomes very natural, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1234"
  },
  {
    "text": "and you can even use the same buffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1237"
  },
  {
    "text": "for both ray tracing and rasterization.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1238"
  },
  {
    "text": "Bindless completely changes the game, ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1242"
  },
  {
    "text": "giving your GPU all the data you need ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1244"
  },
  {
    "text": "to implement modern rendering techniques.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1246"
  },
  {
    "text": "You can even take it further and use this architecture ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1248"
  },
  {
    "text": "to put the GPU in the driver seat ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1251"
  },
  {
    "text": "and adopt indirect pipelines through indirect command buffers ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1253"
  },
  {
    "text": "and GPU culling.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1255"
  },
  {
    "text": "We can't wait to see how you put this in practice ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1257"
  },
  {
    "text": "to deliver the next generation ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1259"
  },
  {
    "text": "of graphical applications and games.",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1260"
  },
  {
    "text": "Thank you and enjoy the rest of WWDC 2021! ",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1263"
  },
  {
    "text": "♪",
    "link": "https://developer.apple.com/videos/play/wwdc2021/10286/?time=1266"
  }
]