WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
タヌ・シンハル:みなさん、こんにちは。

00:00:10.000 --> 00:00:15.000
私の名前はTanuで、Apple TVチームのSwiftUIエンジニアです。

00:00:15.000 --> 00:00:21.000
今日は、SwiftUIで焦点を当てて作業するいくつかの新しい方法について話します。

00:00:21.000 --> 00:00:27.000
SwiftUIの素晴らしい点の1つは、箱から出してすぐに無料でどれだけの機能を手に入れるかです。

00:00:27.000 --> 00:00:38.000
組み込みコンポーネントのデフォルトの動作は、SwiftUIのプラットフォーム規約に関する知識に基づいており、さまざまなコンテキストで賢明で使い慣れた全体的な経験をもたらします。

00:00:38.000 --> 00:00:44.000
焦点を見ると、この知性が働いています。

00:00:44.000 --> 00:01:00.000
フォーカスは、アプリがキーボード、リモコン、ゲームコントローラー、アクセス可能なスイッチコントロール、およびタッチ入力とは異なり、特定の画面座標に結びついていないその他のソースから入力を取ることができるシステムです。

00:01:00.000 --> 00:01:09.000
多くの場合、フォーカスビューは特別な装飾で描画されるため、入力がどこに向けられるかを簡単に予測できます。

00:01:09.000 --> 00:01:14.000
ほとんどの場合、SwiftUIはあなたに代わってフォーカスを管理します。

00:01:14.000 --> 00:01:29.000
誰かがテキストフィールドをクリックしたり、Tabキーを押したり、調整可能な時計コンプリケーションをタップしたり、Siri Remoteをスワイプしたりすると、SwiftUIはフォーカスがどのように影響され、次の配置がどのように表示されるかを決定します。

00:01:29.000 --> 00:01:35.000
これは、慣習によって正しい行動を決めることができる単純なケースに最適です。

00:01:35.000 --> 00:01:43.000
しかし、フォーカスに関するより加速された体験を望むケースもあります。

00:01:43.000 --> 00:01:52.000
メモアプリのこの例では、新しいメモボタンを選択すると、新しく作成されたメモにフォーカスを自動的に移動します。

00:01:52.000 --> 00:01:58.000
このタイプの動作には、確かにカスタム実装が必要です。

00:01:58.000 --> 00:02:09.000
ここでは、ユーザーがリモコンを右にスワイプしたときに、左下のボタンから画面の上部近くのコンテンツにフォーカスを移動したいシナリオがあります。

00:02:09.000 --> 00:02:18.000
ミュージックボタンとアプリタイルは互いに隣接していないため、SwiftUIはフォーカスをどこに移動するかを自動的に推測することはできません。

00:02:18.000 --> 00:02:23.000
遠隔フォーカスターゲットをリンクする前に、より多くの情報が必要です。

00:02:23.000 --> 00:02:30.000
そして、iOSのこの例では、ユーザーがイベントを選択したときにキーボードをなくしたいだけです。

00:02:30.000 --> 00:02:36.000
今年導入する新しいAPIのおかげで、SwiftUIでこれらすべてを行うことができます。

00:02:36.000 --> 00:02:40.000
この講演では、2種類のユースケースに焦点を当てます。

00:02:40.000 --> 00:02:54.000
直接入力せずに特定のビューにフォーカスを移動する方法を確認し、小さなビューから大きなナビゲーションターゲットを作成して、ユーザーの手の届かないところに何もないようにします。

00:02:54.000 --> 00:03:01.000
まず、ユーザーの注意を引くためにフォーカスを移動したい例を見てみましょう。

00:03:01.000 --> 00:03:06.000
私たちは休暇に行く準備ができていて、バケーションプランナーアプリに取り組み始めました。

00:03:06.000 --> 00:03:14.000
このアプリはすべてのAppleプラットフォームで動作し、旅行を予約するだけでなく、目的地を閲覧することができます。

00:03:14.000 --> 00:03:23.000
このアプリを起動すると、アカウントにログインできるように、メールフィールド、パスワードフィールド、Appleでサインインボタンが表示されます。

00:03:23.000 --> 00:03:33.000
このログイン画面で、入力された電子メールが正しい形式ではないことが判明した場合は、プログラムでフォーカスを電子メールフィールドに戻します。

00:03:33.000 --> 00:03:38.000
この動作を実現するには、FocusState APIを使用します。

00:03:38.000 --> 00:03:46.000
ログインビューの既存のコードには、TextFieldとSecureFieldを持つVStackが含まれています。

00:03:46.000 --> 00:03:50.000
次に、このビューにFocusStateプロパティラッパーを追加します。

00:03:50.000 --> 00:03:55.000
FocusStateは、今年導入した新しいAPIです!

00:03:55.000 --> 00:04:01.000
これは、現在の焦点の位置に応じて変化する特別なタイプの状態です。

00:04:01.000 --> 00:04:06.000
FocusStateを使用して、フォーカスされたフィールドの識別子を保持します。

00:04:06.000 --> 00:04:10.000
focusedField変数は、この例で作成した列挙型です。

00:04:10.000 --> 00:04:17.000
FocusStateには、文字列、整数、またはその他のハッシュ可能な値タイプを使用できます。

00:04:17.000 --> 00:04:20.000
FocusStateの値はオプションであることに注意してください。

00:04:20.000 --> 00:04:32.000
一般に、FocusStateに使用されるタイプは、ハッシュ可能とオプションの両方でなければならず、フォーカスが画面の無関係な部分にある場合はnilが使用されます。

00:04:32.000 --> 00:04:38.000
次に、TextFieldとSecureFieldにフォーカスされた修飾子を追加します。

00:04:38.000 --> 00:04:46.000
今年も新しく、この修飾子は、フォーカスの配置とfocusFieldプロパティの値の間のリンクを作成します。

00:04:46.000 --> 00:04:55.000
このシンプルなリンクは、アプリで他の決定を下すために現在のフォーカスの配置を使用できることを意味するため、強力なツールです。

00:04:55.000 --> 00:04:59.000
ログインフォームでその展開を見ることができます。

00:04:59.000 --> 00:05:06.000
画面が最初に表示されると、フォーカスがないため、focusFieldの値はnilです。

00:05:06.000 --> 00:05:14.000
しかし、誰かが電子メールのテキストフィールドをタップすると、そのフィールドに焦点が当てられ、キーボードが表示されます。

00:05:14.000 --> 00:05:27.000
フォーカスされたテキストフィールドはFocusState値にバインドされているため、FocusedFieldの値は自動的に更新され、電子メールテキストフィールドの識別子が保持されます。

00:05:27.000 --> 00:05:31.000
フォーカス配置とFocusStateの間のリンクは、両方の方法で機能します。

00:05:31.000 --> 00:05:41.000
これは、フォーカスの変化に反応することに限定されないことを意味します。FocusStateプロパティを更新するだけで、プログラムでフォーカスを移動できます。

00:05:41.000 --> 00:05:58.000
たとえば、プログラムで focusedField の値を .password に設定すると、SwiftUI は SecureField が設定している新しい値に関連付けられていることを知り、フォーカスは自動的にパスワード フィールドに移動します。

00:05:58.000 --> 00:06:06.000
フォーカスバインディングが整ったので、それらを機能させることができます。

00:06:06.000 --> 00:06:11.000
バケーションプランナーアプリでは、ユーザーがデータを送信すると、それを検証します。

00:06:11.000 --> 00:06:17.000
メールが期待どおりの形式でない場合は、focusFieldをメールに設定します。

00:06:17.000 --> 00:06:24.000
これは、まだそこにない場合は、電子メールのテキストフィールドにフォーカスを送り返します。

00:06:24.000 --> 00:06:30.000
さらに、メールが無効な場合は、メールフィールドを境界線で強調表示したいと思います。

00:06:30.000 --> 00:06:35.000
この境界線は、フォーカスがメールフィールドにある場合にのみ表示したいと考えています。

00:06:35.000 --> 00:06:42.000
これを行うには、境界線を作成するときにfocusdFieldの値を簡単に読み取ることができます。

00:06:42.000 --> 00:06:45.000
このすべてがどのように一緒になるか見てみましょう。

00:06:45.000 --> 00:06:48.000
メールフィールドには有効なアドレスがないことに注意してください。

00:06:48.000 --> 00:06:51.000
現在、フォーカスはパスワードフィールドにあります。

00:06:51.000 --> 00:06:57.000
Goを押すと、focusFieldが設定されている場所でonSubmitコールバックがトリガーされます。

00:06:57.000 --> 00:07:01.000
これにより、カーソルは電子メールフィールドに戻ります。

00:07:01.000 --> 00:07:05.000
メールフィールドが集中している間、その周りに赤い境界線が見えます。

00:07:05.000 --> 00:07:17.000
ただし、電子メールフィールドからフォーカスを移動すると、フォーカスフィールドは電子メール識別子と等しなくなり、赤い境界線が消えます。

00:07:17.000 --> 00:07:23.000
すべてのフォームデータが有効なシナリオでは、単にキーボードを却下したいと考えています。

00:07:23.000 --> 00:07:28.000
キーボードを閉じるには、FocusState変数をnilに設定します。

00:07:28.000 --> 00:07:35.000
focusedFieldはオプションであるため、焦点がこのビューを離れたことを示すためにnilを使用します。

00:07:35.000 --> 00:07:39.000
ビデオでは、メールアドレスが更新されたことに注意してください。

00:07:39.000 --> 00:07:46.000
今回提出すると、FocusState変数をnilに設定したため、キーボードは却下されます。

00:07:46.000 --> 00:07:52.000
アプリにテキストフィールドがある場合、フォーカスをプログラムで制御することがどのように役立つかを見てきました。

00:07:52.000 --> 00:07:56.000
ただし、FocusStatesはテキストフィールドだけではありません。

00:07:56.000 --> 00:08:05.000
iOS、tvOS、watchOS、またはmacOSのフォーカス可能なビューのフォーカスをプログラムで制御するために使用できます!

00:08:05.000 --> 00:08:11.000
次のセクションでは、アプリにおけるフォーカスベースのナビゲーションの役割について説明します。

00:08:11.000 --> 00:08:16.000
バケーションプランナーアプリのtvOSバージョンを見てみましょう。 

00:08:16.000 --> 00:08:23.000
私たちは、あなたが訪問したいかもしれないいくつかの目的地からの写真を追加することで、テレビの余分なスペースを活用しました。

00:08:23.000 --> 00:08:30.000
ログインする前でも、[写真の参照]ボタンをクリックすると、より多くの写真を見ることができます。

00:08:30.000 --> 00:08:34.000
最初はメールフィールドに焦点が当てられていることに注意してください。

00:08:34.000 --> 00:08:40.000
Siri Remoteを右にスワイプすると、フォーカスが「写真の閲覧」ボタンに移動します。

00:08:40.000 --> 00:08:44.000
しかし、それはデフォルトでは機能しません。

00:08:44.000 --> 00:08:49.000
これは、指向性フォーカスナビゲーションが隣接関係に基づいているためです。

00:08:49.000 --> 00:08:57.000
スワイプしてフォーカスを移動する場合、フォーカスは、指定された方向に隣接してフォーカス可能なものがある場合にのみ移動します。

00:08:57.000 --> 00:09:00.000
このアプリのフォーカス可能なビューを見てみましょう。

00:09:00.000 --> 00:09:09.000
左側のログインフィールドに隣接するフォーカス可能なビューがないため、下部のボタンは到達できません。

00:09:09.000 --> 00:09:17.000
この画面をナビゲート可能にするために、ブラウズボタンのフォーカス可能な領域を拡張し、ログインフィールドに隣接します。

00:09:17.000 --> 00:09:21.000
これは、新しいFocusSections APIを使用して行われます。

00:09:21.000 --> 00:09:23.000
それがどれほど簡単か見てみましょう。

00:09:23.000 --> 00:09:29.000
ここには、テレビ用のバケーションプランナーコードの簡略化されたバージョンがあります。

00:09:29.000 --> 00:09:37.000
2つのVStackを持つHStackが含まれています。1つはログインフィールド用、もう1つは画像とボタン用のVStackです。

00:09:37.000 --> 00:09:47.000
ボタンの周りにより大きな論理フォーカスターゲットを作成し、ボタンがログインフィールドに隣接しているかのようにフォーカス振る舞うようにします。

00:09:47.000 --> 00:09:54.000
これは、ボタンを含むVStackにfocusSection()修飾子を追加するだけで実行できます。

00:09:54.000 --> 00:10:05.000
focusSection() 修飾子が任意のビューに追加されると、フォーカス可能なサブビューが含まれている場合、そのビューのフレームはフォーカスを受け入れることができるようになります。

00:10:05.000 --> 00:10:16.000
また、ボタンを左にスワイプするときにフォーカスをログインフィールドに戻したいので、最初のVStackに別のfocusSection()修飾子を追加します。

00:10:16.000 --> 00:10:25.000
このアプリを実行すると、ユーザーはリモコンを左右にスワイプすることで、入力フィールドとブラウズボタンの間でフォーカスを移動できます。

00:10:25.000 --> 00:10:33.000
物事をまとめるとき、異なるプラットフォームで異なって見えることが多いフォーカスについて考えることをお勧めします。

00:10:33.000 --> 00:10:38.000
SwiftUIには、ほとんどの場合、優れたデフォルト動作が組み込まれています。

00:10:38.000 --> 00:10:47.000
新しいフォーカス状態とFocusSections APIは、フォーカスを活用してさらに合理化されたエクスペリエンスを作成するのに役立ちます。

00:10:47.000 --> 00:10:55.000
アプリに取り組みながら、フォーカスがユーザーの行動に影響を与える多くの方法を観察してください。

00:10:55.000 --> 00:11:01.000
このセッションで、ユーザーが最も重要なことに集中するのに役立つツールが備わったことを願っています。

00:11:01.000 --> 00:11:04.000
見てくれてありがとう、そして素晴らしいWWDCを！

00:11:04.000 --> 23:59:59.000
♪

