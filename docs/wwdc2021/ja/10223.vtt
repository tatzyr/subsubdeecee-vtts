WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
ダニエル・サイクス・ターナー:こんにちは、私の名前はダニエル・サイクス・ターナーで、アクセシビリティエンジニアです。

00:00:14.000 --> 00:00:27.000
この講演では、同僚のVirataと私は、watchOSのアクセシビリティ機能のいくつかと、開発者としてこれらの機能を使用する人々をサポートするために時計アプリを構築する方法について説明します。

00:00:27.000 --> 00:00:33.000
今日の講演では、まずwatchOSのアクセシビリティを紹介します。

00:00:33.000 --> 00:00:41.000
次に、アクセシビリティAPIを掘り下げ、さまざまな種類の視覚的アクセシビリティをサポートするために何ができるかを紹介します。

00:00:41.000 --> 00:00:50.000
そして最後に、Virataは、モーターアクセシビリティが時計でどのように機能し、それをサポートするために何ができるかを説明します。

00:00:50.000 --> 00:00:54.000
watchOSのアクセシビリティから始めましょう。

00:00:54.000 --> 00:00:59.000
アクセシビリティとは、自分に最適な方法でデバイスを使用する人々に関するものです。

00:00:59.000 --> 00:01:07.000
つまり、アプリに最高のユーザーエクスペリエンスを提供するためには、アクセシビリティを考慮する必要があります。

00:01:07.000 --> 00:01:13.000
Apple Watchには、アプリをより簡単に使用できるアクセシビリティ機能の大規模なスイートがあります。

00:01:13.000 --> 00:01:27.000
たとえば、VoiceOverなどの支援技術により、視覚障害のある人は、コンテンツが読み返されている間に一連のジェスチャーとタップを使用して画面をナビゲートすることで、Apple Watchをフルに使用できます。

00:01:27.000 --> 00:01:34.000
そして、今年のwatchOSの真新しいのは、Apple Watchのために特別に再考されたAssistiveTouchです。

00:01:34.000 --> 00:01:42.000
AssistiveTouchを使用すると、運動障害のある人は、画面に触れることなくApple Watchを使用できます。

00:01:42.000 --> 00:01:47.000
Virataは、これが後でどのように機能し、それをサポートするために何ができるかを紹介します。

00:01:47.000 --> 00:01:59.000
watchOSは、Reduce Motion、Bold Text、そして今年の新しい大きなアクセシビリティテキストサイズなど、いくつかのディスプレイの宿泊施設も提供しています。

00:01:59.000 --> 00:02:03.000
watchOSの視覚的なアクセシビリティについて話しましょう。

00:02:03.000 --> 00:02:14.000
適切なAPIでアクセシビリティをサポートすることで、アプリがWatchKitまたはSwiftUIで書かれているかどうかに関係なく、VoiceOverがユーザーに対して正しく機能することを保証します。

00:02:14.000 --> 00:02:17.000
この講演では、SwiftUIのアクセシビリティに焦点を当てます。

00:02:17.000 --> 00:02:23.000
ただし、ここで学ぶすべての原則がWatchKitにも適用されることを知ってください。

00:02:23.000 --> 00:02:29.000
そして、アプリにアクセスできるようにするときは、合併症や通知を忘れないでください。

00:02:29.000 --> 00:02:39.000
コンプリケーションと動的通知は、アプリからコンテンツを配信する別のパスとして機能するため、当社の支援技術もサポートする必要があります。

00:02:39.000 --> 00:02:43.000
さて、アプリを構築するために何か新しいことを学ぶための最良の方法ではありませんか?

00:02:43.000 --> 00:02:52.000
幸いなことに、私は自宅で植物を育てることにかなり投資するようになったので、先に進んでそれらの世話をするのに役立つアプリを構築することにしました。

00:02:52.000 --> 00:03:08.000
今、それは完全には終わっていませんが、ここのメイン画面には、植物ケアタスクの今後のスケジュールを含む、私の植物に関するすべての情報があります:5日間で水、7日間で受精し、中程度の日光に保ちます。

00:03:08.000 --> 00:03:11.000
ここのリストには他にもいくつかの植物があります。

00:03:11.000 --> 00:03:18.000
その後、植物ごとに、水をやるときや受精するときなどのタスクを記録するために使用できる2つのボタンがあります。

00:03:18.000 --> 00:03:25.000
そして、セルをタップすることで、水やりと施肥の間の日数を調整できます。

00:03:25.000 --> 00:03:30.000
これは有益なアプリなので、各セルにはかなりの量のテキストが含まれています。

00:03:30.000 --> 00:03:38.000
ここでは、システムのテキストサイズがデフォルトのサイズにあるときにアプリがどのように見えるかをお見せします。それはかなり良く見えます。

00:03:38.000 --> 00:03:52.000
しかし、左に示すように、システムテキストサイズを非常に小さいサイズに変更すると、ボタンとタスクリストのテキストのサイズが変更されている間、植物名のタイトルは同じサイズのままであることに気付くでしょう。

00:03:52.000 --> 00:04:03.000
その後、右側のアクセシビリティエクストララージに移動すると、タスクリストのテキストサイズが非常に大きくなり、切り捨てられ、画面上のすべての情報に収まらなくなりました。

00:04:03.000 --> 00:04:08.000
私たちのアプリがダイナミックタイプをよりよくサポートする方法を見てみましょう。

00:04:08.000 --> 00:04:15.000
PlantViewのコードを検査すると、タイトルやその他のコンテンツが入ったVStackがあります。

00:04:15.000 --> 00:04:19.000
タイトルに使用したフォントが固定フォントサイズを使用していることに注意してください。

00:04:19.000 --> 00:04:23.000
それは間違いなく私のタイトルがサイズを変えるのを止めるでしょう。

00:04:23.000 --> 00:04:29.000
固定フォントサイズを使用するのではなく、提供されている11のテキストスタイルのいずれかを使用する必要があります。

00:04:29.000 --> 00:04:34.000
左側のテキストスタイルは、デフォルトのシステムテキストサイズで表示されます。

00:04:34.000 --> 00:04:40.000
そして、最大のテキストサイズにスケールアップすると、右側のテキストスタイルのサイズに大きくなります。

00:04:40.000 --> 00:04:48.000
テキストスタイルを使用することで、システムはシステムのテキストサイズ設定でフォントサイズを自動的に調整します。

00:04:48.000 --> 00:05:00.000
したがって、PlantViewコードをもう一度見ると、タイトルフォントを小さいタイトルのtitle3テキストスタイルに変更することで、その変更を迅速かつ簡単に行うことができます。

00:05:00.000 --> 00:05:04.000
次に、タスクリストの切り捨てテキストを修正しましょう。

00:05:04.000 --> 00:05:16.000
PlantTaskLabelのコードでは、HStackのすべてに1のlineLimitを割り当てています。これにより、テキストを1行にしか展開できません。

00:05:16.000 --> 00:05:23.000
UIに必要な数の行に柔軟に調整するには、lineLimitをサポートする必要がある最大行数に設定します。

00:05:23.000 --> 00:05:28.000
または、無制限の数の行を許可するためにそれを削除します。

00:05:28.000 --> 00:05:29.000
今、私たちは進歩を遂げています。

00:05:29.000 --> 00:05:36.000
しかし、UIは確かに大きく、切り捨てはありませんが、その過程ではるかに混雑しています。

00:05:36.000 --> 00:05:40.000
そして、画面上の情報を読むのはまだ簡単ではありません。

00:05:40.000 --> 00:05:46.000
より大きなテキストスタイルのレイアウトは、異なる構造化が必要になる場合があります。

00:05:46.000 --> 00:05:54.000
したがって、レイアウトを構築するときは、sizeCategoryに環境プロパティラッパーを作成して、これが変更されるたびに更新を取得します。

00:05:54.000 --> 00:05:59.000
次に、サイズカテゴリに応じてUIを調整する必要があります。 

00:05:59.000 --> 00:06:05.000
この場合、タスクリストのテキストはextraExtraLargeのどこかでラップし始めます。

00:06:05.000 --> 00:06:10.000
したがって、サイズカテゴリがこれよりも小さい場合は、以前に見たPlantViewを使用します。

00:06:10.000 --> 00:06:19.000
しかし、それが大きい場合は、ラベルとボタンのそれぞれを積み重ね、成長するためのより多くのスペースを与えるこの新しい垂直植物ビューを使用します。

00:06:19.000 --> 00:06:22.000
それはずっと良く見えます。

00:06:22.000 --> 00:06:31.000
時計に大きなアクセシビリティテキストスタイルの導入により、より多くの人々がダイナミックタイプを利用することを期待しています。

00:06:31.000 --> 00:06:37.000
Apple Watchを設定している人には、開始時にテキストサイズをカスタマイズするオプションが表示されます。

00:06:37.000 --> 00:06:46.000
また、変更を加えない場合、時計は電話で使用されているものに最も近いサイズを自動的に選択します。

00:06:46.000 --> 00:06:54.000
したがって、ダイナミックタイプを要約すると、時計アプリが大きなテキストサイズでうまく動作することを確認するための3つの重要なことがあります。

00:06:54.000 --> 00:07:00.000
まず、固定されたフォントサイズではなく、常にテキストスタイルを使用するようにしてください。

00:07:00.000 --> 00:07:05.000
次に、テキストを折り返して、切り捨てられないようにします。

00:07:05.000 --> 00:07:12.000
そして第三に、必要に応じて、コンテンツが混雑しすぎると、垂直に積み重ねられたレイアウトに切り替えます。

00:07:12.000 --> 00:07:23.000
これは大きなテキストの表面を引っ掻くだけなので、「ダイナミックタイプでアプリを構築する」というトークをチェックして、ゲームを本当にステップアップすることを強くお勧めします。

00:07:23.000 --> 00:07:31.000
そして、素晴らしいビジュアル体験を作ることについてさらに学ぶには、「アプリを視覚的にアクセスできるようにする」というトークを必ずチェックしてください。

00:07:31.000 --> 00:07:34.000
さて、視覚的には、それはうまくいきます。

00:07:34.000 --> 00:07:36.000
しかし、もし私がビジュアルユーザーでなかったら?

00:07:36.000 --> 00:07:43.000
VoiceOverをオンにして、その体験がどのようなものかを聞いてみましょう。

00:07:43.000 --> 00:07:46.000
ボイスオーバー:WWDaisy。

00:07:46.000 --> 00:07:50.000
デイジー、イメージ。

00:07:50.000 --> 00:07:53.000
ドロップ、画像。

00:07:53.000 --> 00:07:55.000
5日間。

00:07:55.000 --> 00:07:58.000
葉、画像。

00:07:58.000 --> 00:08:01.000
7日間。

00:08:01.000 --> 00:08:04.000
明るさが高い、画像。

00:08:04.000 --> 00:08:06.000
ミディアム。

00:08:06.000 --> 00:08:10.000
ドロップ、塗りつぶし、ボタン。

00:08:10.000 --> 00:08:14.000
葉、塗りつぶし、ボタン。

00:08:14.000 --> 00:08:18.000
ダニエル：わかりました、それでは間違いなく私たちができるいくつかの改善があります。

00:08:18.000 --> 00:08:22.000
1つ目は、対話できる要素の数を減らすことです。

00:08:22.000 --> 00:08:25.000
現時点では、これはかなり複雑な見解です。

00:08:25.000 --> 00:08:31.000
各セルには4つのラベル、4つの画像、2つのボタンがあります。

00:08:31.000 --> 00:08:38.000
そして現在、2番目の植物に行くには、最初の植物細胞のすべての項目をナビゲートする必要があります。

00:08:38.000 --> 00:08:49.000
また、水、肥料、日光の画像アイコンは、テキストの別々の要素として読み取られ、そのラベルは私たちの文脈にさえ意味をなしませんでした。

00:08:49.000 --> 00:08:57.000
最後に、下部の2つのボタンは、使用されているシンボルによって提供されるデフォルトのラベルを使用していました。

00:08:57.000 --> 00:09:05.000
だから、私たちが話した最初の問題は、プラント1からプラント2に移動するためだけに、あまりにも多くのアイテムをナビゲートしなければならないということです。

00:09:05.000 --> 00:09:17.000
NavigationLinkを作成したとき、各要素のアクセシビリティ状態を理解するために、子のaccessibilityElementグループを.containとして指定してこれを行いました。

00:09:17.000 --> 00:09:26.000
しかし、これは良さそうなので、この行を削除し、NavigationLinkは子供たちからのすべてのアクセシビリティ情報を自動的に結合します。

00:09:26.000 --> 00:09:33.000
現在、セルは単一の要素として扱われ、読み出される内容は「WWDaisy」です。5日間。

00:09:33.000 --> 00:09:37.000
7日間。ミディアム。ボタン。

00:09:37.000 --> 00:09:48.000
そのタスクリストはまだいくつかの作業が必要なので、次は、それぞれにより良いラベルを与えることによって、今後の植物ケアタスクにいくつかのコンテキストを提供しましょう。

00:09:48.000 --> 00:09:51.000
ラベルはPlantTaskによって決定されます。

00:09:51.000 --> 00:09:59.000
したがって、PlantTaskLabel構造体内で、アクセシビリティラベルを変更して、プラントタスクごとに異なる文字列を返します。

00:09:59.000 --> 00:10:03.000
これは、私がボタンにラベルを貼るのに使うのと同じテクニックです。

00:10:03.000 --> 00:10:10.000
今、コンテンツは「WWDaisy」と読み上げられます。5日で水やり。7日間で受精。

00:10:10.000 --> 00:10:13.000
中程度の日光を避けてください。ボタン。

00:10:13.000 --> 00:10:23.000
そして、水と受精ボタンは、「ログ散水、ボタン」と「ログ施肥、ボタン」と読み上げられます。

00:10:23.000 --> 00:10:29.000
これまでのところ、多くの作業が自動的に行われ、必要なのはいくつかの追加の修飾子だけです。

00:10:29.000 --> 00:10:34.000
実際、SwiftUIでは、アクセシビリティのほとんどが無料です。

00:10:34.000 --> 00:10:36.000
あなたはおそらく数行のコードを書くでしょう。

00:10:36.000 --> 00:10:40.000
しかし、時々、カスタムコントロールを構築する必要があるかもしれません。

00:10:40.000 --> 00:10:47.000
植物の散水と施肥の頻度を調整できるように、カスタムカウンターを構築しました。

00:10:47.000 --> 00:10:50.000
見てみましょう。 

00:10:50.000 --> 00:10:53.000
ボイスオーバー:日の散水頻度、見出し。

00:10:53.000 --> 00:10:56.000
削除、ボタン。

00:10:56.000 --> 00:10:59.000
8。

00:10:59.000 --> 00:11:03.000
追加ボタン。追加。

00:11:03.000 --> 00:11:07.000
ダニエル：これは技術的には機能しますが、理想的な経験ではありません。

00:11:07.000 --> 00:11:12.000
ここでの目標は、これら3つの項目を単一のアクセス可能な要素に変えることです。

00:11:12.000 --> 00:11:17.000
これを行うには、accessibilityElement修飾子を使用することから始めます。

00:11:17.000 --> 00:11:23.000
これにより、新しい高レベルの要素が作成されますが、今回はすべての子供を無視します。

00:11:23.000 --> 00:11:28.000
これは実際にはaccessibilityElementのデフォルトの動作です。

00:11:28.000 --> 00:11:32.000
したがって、同じ動作を得るためにパラメータを空白のままにすることができます。

00:11:32.000 --> 00:11:42.000
そして、私は子供たちを無視しているので、これは自動的に提供されたアクセシビリティアクションとともに、追加と削除ボタンのラベルを破棄します。

00:11:42.000 --> 00:11:53.000
代わりに、accessibilityAdjustableActionを使用して、ユーザーがカウンターを上下にスワイプして値を増減できるようにします。

00:11:53.000 --> 00:11:59.000
そして今、私は1つの要素しか持っているので、タスクの名前を使用して単一のラベルを与えます。

00:11:59.000 --> 00:12:05.000
これは「散水周波数」または「施肥周波数」になります。

00:12:05.000 --> 00:12:08.000
最後に、私はそれに価値を与えます。

00:12:08.000 --> 00:12:18.000
accessibilityValueは変更されるたびに読み出されますが、ラベルは要素に移動するときにのみ読み出されます。

00:12:18.000 --> 00:12:22.000
ボイスオーバー:日の散水頻度、見出し。

00:12:22.000 --> 00:12:27.000
散水頻度。8日。調整可能。

00:12:27.000 --> 00:12:28.000
9日間。

00:12:28.000 --> 00:12:32.000
ダニエル：すごい。それははるかにうまくいきます。

00:12:32.000 --> 00:12:37.000
先ほど見たように、SwiftUIは私たちの時計アプリをVoiceOverから簡単にアクセスできるようにしました。

00:12:37.000 --> 00:12:45.000
そして素晴らしいのは、これはSwiftUIなので、同じコードがmacOSとiOSでも機能するということです。

00:12:45.000 --> 00:12:54.000
SwiftUIで素晴らしい体験を設計することの詳細については、「SwiftUIのアクセシビリティ」というトークを必ずチェックしてください。

00:12:54.000 --> 00:13:04.000
また、SwiftUIアクセシビリティを使用する際のまったく新しいツールとAPIについて学ぶには、「SwiftUIアクセシビリティ：基本を超えて」というトークをチェックしてください。

00:13:04.000 --> 00:13:14.000
さて、視覚的なアクセシビリティから進む前に、さらに2つのことを強調したいと思います。合併症と通知です。

00:13:14.000 --> 00:13:23.000
コンプリケーションはアプリへのトラフィックの多いウィンドウなので、もちろん、アクセスしやすい方法で情報を提供する必要があります。

00:13:23.000 --> 00:13:33.000
さまざまな種類の合併症がありますが、そのほとんどは、テキスト、画像、記号の3つの異なるコンポーネントで構成されます。

00:13:33.000 --> 00:13:43.000
テキストはVoiceOverによって自動的にピックアップされますが、テキストに略語が含まれている場合は、短縮されていないバージョンでアクセシビリティラベルを追加してください。

00:13:43.000 --> 00:13:52.000
ここでは、「3月9日水曜日」を「3月9日水曜日」の完全な形に拡大します。

00:13:52.000 --> 00:13:55.000
画像ベースの合併症も非常に一般的です。

00:13:55.000 --> 00:14:02.000
ここにもアクセシビリティラベルを必ず提供してください。そうしないと、代わりに画像名が使用されます。

00:14:02.000 --> 00:14:10.000
「月」は「月のリアルタイムビュー」ほど説明的ではありません。第3四半期。

00:14:10.000 --> 00:14:24.000
SFシンボルなどの特定の図像には、「ドロップ、塗りつぶし」などのデフォルトのアクセシビリティラベルが付属している場合がありますが、シンボルに付属のラベルがあなたにとって最も理にかなっていることを確認してください。

00:14:24.000 --> 00:14:28.000
「3日間で水」は私にとってはるかに理にかなっています。

00:14:28.000 --> 00:14:34.000
通知に関しては、これらはアプリがユーザーに多くの情報を送信する別の方法です。

00:14:34.000 --> 00:14:46.000
したがって、一部の通知はかなり簡単ですが、動的通知などの他の通知は複雑なビューを持つ可能性があるため、アプリに提供したのと同じアクセシビリティサポートが必要になります。

00:14:46.000 --> 00:14:53.000
そして今、私はあなたをVirataに渡して、モーターアクセシビリティについてすべてお伝えします。

00:14:53.000 --> 00:14:54.000
Virata Yindeeyoungyeon:まあ、ありがとう、ダニエル。

00:14:54.000 --> 00:14:57.000
私の名前はビラタ・インディーヨンヨンヨンです。

00:14:57.000 --> 00:15:00.000
私はアクセシビリティチームのエンジニアです。

00:15:00.000 --> 00:15:05.000
今日、私はApple Watchのモーターアクセシビリティサポートについて話すことにとても興奮しています。

00:15:05.000 --> 00:15:12.000
しかし、プレゼンテーションに飛び込む前に、私たちの新機能を簡単に見てみましょう。

00:15:12.000 --> 00:15:27.000
画面に触れることなく、手のジェスチャーのみを使用して、文字盤からコントロールセンターに移動し、おやすみモードボタンに移動し、オンにすることができます。

00:15:27.000 --> 00:15:30.000
それはとても簡単です。

00:15:30.000 --> 00:15:34.000
今年は、Apple WatchにAssistiveTouchをもたらすことにとても興奮しています。

00:15:34.000 --> 00:15:41.000
AssistiveTouchを使用すると、Apple Watchがオンになっている手のみを使用して、タッチなしでApple Watchをフルに使用できます。

00:15:41.000 --> 00:15:47.000
人々は手のジェスチャーや手の動きを使って、画面上のカーソルをナビゲートすることができます。

00:15:47.000 --> 00:15:52.000
画面コンテンツに基づいて追加機能にアクセスするためのメニューを表示できます。

00:15:52.000 --> 00:15:57.000
一部の人にとっては、これがApple Watchとやり取りできる唯一の方法かもしれません。

00:15:57.000 --> 00:16:08.000
手足の欠損、手や腕の機能の喪失などの運動障害を持つ人々のために、AssistiveTouchはApple Watchでコントロールとアクションを実行するためのより多くのオプションを可能にします。

00:16:08.000 --> 00:16:12.000
では、AssistiveTouchの使い方の例を見てみましょう。

00:16:12.000 --> 00:16:16.000
AssistiveTouchを使用する主な方法は、手のジェスチャーです。

00:16:16.000 --> 00:16:31.000
人々は、クレンチしてタップしたり、ダブルクレンチしてアクションメニューを表示したり、ピンチして次の要素に移動したり、ダブルピンチして前の要素に戻ったりするなど、さまざまなジェスチャーを実行できます。

00:16:31.000 --> 00:16:38.000
手のジェスチャーを使用できない人のために、代替手段は手の動きを使用することです。

00:16:38.000 --> 00:16:45.000
手首を傾けることで、人々は画面上のポインタを動かし、UI要素と対話することができます。

00:16:45.000 --> 00:16:56.000
iOSのAssistiveTouchと同様に、Dwell Controlを使用すると、ポインタを要素の上に一定時間置くことでアクションを実行できます。

00:16:56.000 --> 00:17:00.000
それでは、AssistiveTouchの仕組みについて詳しく説明しましょう。

00:17:00.000 --> 00:17:06.000
AssistiveTouchは、カーソルとアクションメニューの2つの主な機能で構成されています。

00:17:06.000 --> 00:17:10.000
AssistiveTouchをオンにすると、画面にカーソルが表示されます。

00:17:10.000 --> 00:17:17.000
カーソルは、左上から右下の順に、画面上の各要素に1つずつ焦点を合わせます。

00:17:17.000 --> 00:17:21.000
カーソルは、さらなる相互作用のために要素を強調表示します。

00:17:21.000 --> 00:17:28.000
フォーカスされた要素に関するその他のアクションについては、アクションメニューを表示して、システムまたはカスタムアクションを実行できます。

00:17:28.000 --> 00:17:39.000
AssistiveTouchアクションメニューには、デジタルクラウンの押下、スクロールナビゲーション、ジェスチャーインタラクションなど、デバイスの制御を可能にするデフォルトのシステムアクションが付属しています。

00:17:39.000 --> 00:17:43.000
このメニューにカスタムアクションを追加することもできます。

00:17:43.000 --> 00:17:45.000
だから今、私たちはAssistiveTouchがどのように機能するかを知っています。

00:17:45.000 --> 00:17:49.000
あなたのアプリケーションでそれをどのようにサポートできるかを見てみましょう。

00:17:49.000 --> 00:17:52.000
これらの次のトピックについて確認します。

00:17:52.000 --> 00:17:57.000
まず、あなたの見解にどのようなフォーカス可能な要素があり、それらをどのように変更できるかを学びます。

00:17:57.000 --> 00:18:03.000
次に、カーソルフレームとフレームサイズを変更する方法を見ていきます。

00:18:03.000 --> 00:18:08.000
最後に、アクションメニューをカスタマイズする方法について詳しく説明します。

00:18:08.000 --> 00:18:12.000
焦点を絞る要素から始めましょう。

00:18:12.000 --> 00:18:17.000
この表は、AssistiveTouchでどの要素にフォーカスできるかの一般的な概要を示しています。

00:18:17.000 --> 00:18:22.000
ユーザーインタラクションに応答するインタラクティブな要素のみがフォーカス可能です。

00:18:22.000 --> 00:18:31.000
SwiftUIは、ユーザーインタラクションを処理するための組み込みの制御要素を提供します。これらの要素はインタラクティブでフォーカス可能です。

00:18:31.000 --> 00:18:40.000
ビューでは、ボタン、トグル、またはNavigationLinkがある場合、これらの要素はデフォルトでフォーカスできます。

00:18:40.000 --> 00:18:49.000
実用的な要素は、アクションがあるか、インタラクティブであると定義されているため、AssistiveTouchによってフォーカス可能です。

00:18:49.000 --> 00:18:55.000
テキスト要素は、タップジェスチャーアクションを添付することで、インタラクティブでフォーカス可能になります。

00:18:55.000 --> 00:19:00.000
要素にaccessibilityActionを追加することもできます。

00:19:00.000 --> 00:19:11.000
ボタンや調整可能な要素など、実用的な特性を持つ要素を定義すると、インタラクティブとして扱われ、AssistiveTouchによってフォーカスされます。

00:19:11.000 --> 00:19:14.000
一部の要素はフォーカスできません。

00:19:14.000 --> 00:19:22.000
ユーザーインタラクションに応答しないラベルやテキストなどの静的要素は、AssistiveTouchではフォーカスできません。

00:19:22.000 --> 00:19:27.000
ユーザーインタラクションが無効になっている要素もフォーカスできません。

00:19:27.000 --> 00:19:29.000
では、例を見てみましょう。

00:19:29.000 --> 00:19:36.000
このビューでは、ラベルヘッダー、ドリンク情報を含むテキスト、同意とキャンセルボタンの要素があります。

00:19:36.000 --> 00:19:42.000
2つのボタンのみがフォーカス可能ですが、ラベルとテキストはフォーカスできません。

00:19:42.000 --> 00:19:45.000
このビューのコードを見てみましょう。 

00:19:45.000 --> 00:19:52.000
タップジェスチャーがメインのVStackに添付されており、このビューをタップしてドリンクの詳細ビューを表示できることを示します。

00:19:52.000 --> 00:19:59.000
ただし、明示的に宣言されない限り、VStack内の静的要素はフォーカス可能になりません。

00:19:59.000 --> 00:20:03.000
ここでは、同意ボタンとキャンセルボタンのみがフォーカス可能です。

00:20:03.000 --> 00:20:09.000
では、ユーザーはビューをタップしてドリンクの詳細ビューを表示できることをどのように知るのでしょうか?

00:20:09.000 --> 00:20:20.000
より良いユーザーエクスペリエンスを提供するために、私はそれが対話可能であり、タップを実行できることを示すために、ドリンク情報のテキスト要素を強調したいと思います。

00:20:20.000 --> 00:20:25.000
これは、accessibilityRespondsToUserインタラクション修飾子に「true」を設定することで実行できます。

00:20:25.000 --> 00:20:35.000
修飾子を適用した後、このビューには3つのフォーカス可能な要素があります。ドリンク情報テキスト、受け入れるボタンとキャンセルボタン要素です。

00:20:35.000 --> 00:20:39.000
では、AssistiveTouchカーソルフレームについて詳しく学びましょう。

00:20:39.000 --> 00:20:49.000
ご覧のとおり、フォーカスされた要素は、AssistiveTouchが要素が扱いにくいかどうか、またはアクションを実行できるかどうかを強調するために重要です。

00:20:49.000 --> 00:21:00.000
AssistiveTouchカーソルフレームは、要素のタップ可能な領域と同じです。小さなタップ可能な領域を持つ要素は小さなカーソルフレームを持ち、内部のコンテンツをクリップする可能性があります。

00:21:00.000 --> 00:21:08.000
パディングを追加し、クリッピングを防ぐためにボーダーをオブジェクトの形状に一致させることで、これをよりきれいにすることができます。

00:21:08.000 --> 00:21:16.000
この例では、省略記号画像を含むNavigationLinkは、AssistiveTouchカーソルから小さな円で強調表示されます。

00:21:16.000 --> 00:21:24.000
タップ可能な領域のサイズを大きくすることで、これを改善することができ、AssistiveTouchカーソルフレームも変更します。

00:21:24.000 --> 00:21:32.000
contentShape修飾子へのパスを指定することで、要素のタップ可能な領域とカーソルフレームを変更できます。

00:21:32.000 --> 00:21:40.000
このNavigationLinkでは、タップ可能な領域の形状を要素のサイズの1.5倍の円に設定しました。

00:21:40.000 --> 00:21:48.000
その結果、AssistiveTouchカーソルフレームが大きくなり、要素が画面上で見やすくなります。

00:21:48.000 --> 00:21:52.000
では、AssistiveTouchのアクションメニューを見てみましょう。

00:21:52.000 --> 00:21:59.000
AssistiveTouchアクションメニューは、デフォルトのシステムアクションとカスタムアクションをビューに表示し、アクションメニューリストに表示します。

00:21:59.000 --> 00:22:10.000
フォーカス要素にカスタムアクションがある場合、それらのアクションは優先順位付けされ、リストの先頭に表示されるため、対話する方が便利です。

00:22:10.000 --> 00:22:16.000
要素が調整可能な場合は、デクリメントアクションとインクリメントアクションが表示されます。

00:22:16.000 --> 00:22:25.000
アクセシビリティグループ要素にカスタムアクションが含まれている場合、グループ要素に焦点を当てると、それらのアクションが表面化されます。

00:22:25.000 --> 00:22:31.000
要素にVoiceOverのカスタムアクションをすでに追加している場合、それは素晴らしいことです!

00:22:31.000 --> 00:22:35.000
これらのアクションは、AssistiveTouchアクションメニューにも自動的に表示されます。

00:22:35.000 --> 00:22:38.000
カスタムアクションはアイコンとして表示されます。

00:22:38.000 --> 00:22:43.000
デフォルトの画像は、カスタムアクション名の最初の文字になります。

00:22:43.000 --> 00:22:52.000
カスタムアクションアイコンに画像を提供する場合は、accessibilityAction修飾子に画像を含むラベルを追加できます。

00:22:52.000 --> 00:22:54.000
さて、それは私たちのセッションの終わりです。

00:22:54.000 --> 00:22:58.000
これで、Apple Watchのアクセシビリティ機能をよりよく理解できるようになりました。

00:22:58.000 --> 00:23:04.000
アプリケーションにDynamic Type、VoiceOver、AssistiveTouchのサポートを追加することを忘れないでください。

00:23:04.000 --> 00:23:10.000
これらのAPIを使用し、誰もがwatchOSアプリケーションにアクセスできるようにするためのツールがあります。

00:23:10.000 --> 00:23:14.000
さて、あなたの時間をありがとう、WWDCの残りの部分を楽しんでください!

00:23:14.000 --> 23:59:59.000
♪

