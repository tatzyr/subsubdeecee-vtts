WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
デビッド・ヘイワード:皆さん、ようこそ。

00:00:09.000 --> 00:00:10.000
私の名前はデビッド・ヘイワードです。

00:00:10.000 --> 00:00:22.000
私はCore Imageチームのシニアエンジニアで、今日は短いプレゼンテーションを行い、XcodeプロジェクトにカスタムMetal Core Imageカーネルを追加する際の最新のベストプラクティスを紹介します。

00:00:22.000 --> 00:00:29.000
このプレゼンテーションでは、MetalでカスタムCIKernelsを書くことの一般的な利点について説明します。

00:00:29.000 --> 00:00:35.000
次に、メタルCIKernelsを構築できる2つの推奨方法を紹介します。

00:00:35.000 --> 00:00:40.000
そして、これらをプロジェクトに追加する方法を段階的に実演します。

00:00:40.000 --> 00:00:46.000
まず、MetalでカスタムCIKernelsを書くことの利点を確認しましょう。

00:00:46.000 --> 00:00:53.000
CIKernels in Metalを書くことで、自動タイルや連結などのCore Image機能にアクセスできます。

00:00:53.000 --> 00:01:02.000
カーネルをコンパイルする時間をランタイムからアプリが構築されたときにシフトすることで、アプリのパフォーマンスが向上します。

00:01:02.000 --> 00:01:11.000
そうすることで、カーネルはギャザーリード、グループライト、ハーフフロート数学などの高性能機能にアクセスできます。

00:01:11.000 --> 00:01:20.000
最後になりましたが、入力時のシンタックスハイライトとビルド時のインラインエラーチェックにより、開発者としての生活が楽になります。

00:01:20.000 --> 00:01:28.000
モチベーションのために、Metal Core Imageカーネルをアプリケーションに追加する方法を段階的に紹介します。

00:01:28.000 --> 00:01:35.000
CIKernelsをプロジェクトに追加するには、推奨される2つの方法があり、両方の方法を詳しく説明します。

00:01:35.000 --> 00:01:45.000
カーネル関数を外部「C」として指定し、カスタムビルドフラグを使用して構築する必要があるため、これを外部メソッドと呼びます。

00:01:45.000 --> 00:01:50.000
2番目の方法は、iOS 15とmacOS 12で新しい方法です。

00:01:50.000 --> 00:01:57.000
カーネル関数がステッチ可能として帰属する必要があるため、これをステッチ可能な方法と呼びます。

00:01:57.000 --> 00:02:01.000
その実装はメタルダイナミックライブラリを使用しています。

00:02:01.000 --> 00:02:04.000
どちらの方法でも、従うべき4つの一般的なステップがあります。

00:02:04.000 --> 00:02:08.000
まず、プロジェクトを適切に設定することです。

00:02:08.000 --> 00:02:13.000
次に、Metal CIKernelのソースファイルをプロジェクトに追加することです。

00:02:13.000 --> 00:02:16.000
3つ目は、Metal CIKernelコードを書くことです。

00:02:16.000 --> 00:02:25.000
そして4つ目は、SwiftまたはObjective-Cコードを書いて、カーネルを初期化して適用して新しいCIImageを作成することです。

00:02:25.000 --> 00:02:32.000
まず、プロジェクト構成から始めて、外部CIKernelsを使用する際のこれらの4つのステップを説明しましょう。

00:02:32.000 --> 00:02:40.000
従来のMetalコンピューティングやグラフィックスシェーダーとは異なり、このCore Image Metalコードはコンパイルされ、特別なフラグでリンクする必要があります。

00:02:40.000 --> 00:02:48.000
これらのフラグを自動的に使用するために、プロジェクトターゲットに2つのカスタムビルドルールを追加することをお勧めします。

00:02:48.000 --> 00:02:56.000
まず、プロジェクトのターゲット設定に移動し、.ci.metalで終わるファイルのビルドルールを追加します。

00:02:56.000 --> 00:03:06.000
この拡張子を持つファイルの場合、このルールは、必要な-fcikernelフラグでMetalコンパイラを呼び出す1行のスクリプトを実行します。

00:03:06.000 --> 00:03:12.000
このビルドルールは、.ci.airで終わる出力バイナリを生成します。

00:03:12.000 --> 00:03:18.000
次に、.ci.airで終わるファイルの2番目のビルドルールを追加します。

00:03:18.000 --> 00:03:27.000
この拡張子を持つファイルの場合、このルールは、必要な-cikernelフラグでMetalリンカを呼び出す1行のスクリプトを実行します。

00:03:27.000 --> 00:03:36.000
このビルドルールは、.ci.metallibで終わるアプリのリソースディレクトリに出力を生成します。

00:03:36.000 --> 00:03:43.000
カスタムビルドルールを追加したので、プロジェクトに.ci.metalソースを追加するだけです。

00:03:43.000 --> 00:03:54.000
これを行うには、ファイルメニューから新しいMetalファイルを追加するものを選択し、その新しいファイルに.ci.metalで終わる名前を付けます。

00:03:54.000 --> 00:03:59.000
次のステップは、CIKernelをMetalソースファイルに書き込むことです。

00:03:59.000 --> 00:04:08.000
まず、ソースの上部にCoreImage.hヘッダーを含めると、Core Imageが提供するすべてのクラスにアクセスできます。

00:04:08.000 --> 00:04:14.000
カーネルは、コアイメージによって認識される外部「C」として指定する必要があります。

00:04:14.000 --> 00:04:19.000
実際のカーネル実装の内容は、あなたの想像力次第です。

00:04:19.000 --> 00:04:31.000
あなたができることの1つの例として、「AVFoundationを使用したHDR編集と再生」に関するWWDC 2020プレゼンテーションを見ることをお勧めします。

00:04:31.000 --> 00:04:37.000
最後のステップは、Swiftコードを追加してカーネルをロードし、それを適用して新しいイメージを作成することです。

00:04:37.000 --> 00:04:46.000
カーネルは通常、inputImageやその他の入力パラメータなどのプロパティを持つCIFilterサブクラスで使用されます。

00:04:46.000 --> 00:04:52.000
フィルターは、CIKernelオブジェクトを静的プロパティにインスタンス化することをお勧めします。

00:04:52.000 --> 00:04:59.000
このようにして、metalibリソースをロードする作業は、最初に必要なときに一度だけ行われます。

00:04:59.000 --> 00:05:10.000
先ほど説明したカスタムビルドルールのため、ソースと同じ名前のリソースURLと.ci.metallibの拡張子を指定する必要があります。

00:05:10.000 --> 00:05:16.000
最後に、CIFilterサブクラスはoutputImageプロパティをオーバーライドする必要があります。

00:05:16.000 --> 00:05:26.000
ゲッターでは、静的プロパティからカーネルを取得し、その適用メソッドを使用して、入力プロパティに基づいて新しいイメージを作成します。

00:05:26.000 --> 00:05:31.000
そのため、外部CIKernelsを構築するプロセスを完全に説明しています。

00:05:31.000 --> 00:05:37.000
それでは、ステッチ可能なCIKernelsを構築する新しいプロセスについて説明しましょう。

00:05:37.000 --> 00:05:42.000
ステッチ可能な方法では、Xcodeプロジェクトを構成するのに必要な設定変更は1つだけです。

00:05:42.000 --> 00:05:47.000
この設定は、Core ImageフレームワークとリンクするようにMetalリンカーに指示します。

00:05:47.000 --> 00:05:56.000
これを行うには、プロジェクトのターゲット設定に移動し、「-framework CoreImage」の値を持つOther Metal Linker Flagsのビルド設定を追加するだけです。

00:05:56.000 --> 00:06:05.000
ステッチ可能なCIKernelsはカスタムビルドルールを必要としないため、特別なサフィックスなしでプロジェクトに.metalソースを追加するだけです。

00:06:05.000 --> 00:06:09.000
1つまたは複数のソースファイルにカーネルを追加できます。

00:06:09.000 --> 00:06:14.000
デフォルトでは、Xcodeはそれらをすべて1つの.metallibリソースに組み込みます。

00:06:14.000 --> 00:06:18.000
次のステップは、CIKernelをMetalソースファイルに書き込むことです。

00:06:18.000 --> 00:06:25.000
以前と同様に、Core Imageクラスにアクセスするには、CoreImage.hヘッダーを含めます。

00:06:25.000 --> 00:06:32.000
しかし、この方法では、カーネルはコアイメージによって認識されるために]として帰属する必要があります。

00:06:32.000 --> 00:06:39.000
もう一度、最後のステップは、カーネルをロードするためにSwiftコードを追加し、それを適用して新しいイメージを作成することです。

00:06:39.000 --> 00:06:47.000
Stitchable CIKernelsの唯一の変更は、default.metallibの標準名でリソースをロードできることです。

00:06:47.000 --> 00:06:52.000
これで、ステッチ可能なCIKernelsを構築するプロセスが終了します。

00:06:52.000 --> 00:06:56.000
この方法を使用することの利点のいくつかに言及する価値があります。

00:06:56.000 --> 00:07:00.000
ステッチ可能なカーネルは、他のメタルライブラリとリンクできます。

00:07:00.000 --> 00:07:06.000
そして、彼らは現在、整数型と符号なし整数ベクトル型である入力パラメータをサポートしています。

00:07:06.000 --> 00:07:12.000
もう1つのニッチな利点は、ステッチ可能なカーネルを実行時にソースからコンパイルできることです。

00:07:12.000 --> 00:07:18.000
ほとんどのアプリケーションは、初期コンパイル時間が長くなるため、この機能を使用すべきではありません。

00:07:18.000 --> 00:07:24.000
とはいえ、この柔軟性の恩恵を受ける可能性のあるアプリケーションのクラスがいくつかあります。

00:07:24.000 --> 00:07:28.000
このプレゼンテーションで取り上げる最後のトピックが1つあります。

00:07:28.000 --> 00:07:33.000
ステッチ可能なCIKernelの実装は、2つの重要な金属機能に依存します。

00:07:33.000 --> 00:07:37.000
1つ目は、新しいメタルシェーディング言語バージョン2.4です。

00:07:37.000 --> 00:07:48.000
とりわけ、このバージョンは、コンパイラが追加のメタデータを各関数に関連付ける]属性をサポートしています。

00:07:48.000 --> 00:07:56.000
2つ目は、カーネルがCore Image Metalクラスとリンクできるように使用されるMetal Dynamic Libraries機能です。

00:07:56.000 --> 00:08:03.000
これらのメタル機能の詳細については、「Discover Compilation Workflows in Metal」のプレゼンテーションを必ずご覧ください。

00:08:03.000 --> 00:08:21.000
ただし、Metal Dynamic Librariesは、一部のグラフィックスデバイス、特にA11以降を搭載したiPhoneとiPad、Appleシリコンを搭載したすべてのMac、AMD NaviとVega GPUを搭載したIntel Macでのみサポートされていることに注意してください。

00:08:21.000 --> 00:08:30.000
アプリケーションは、ステッチ可能なCIKernelsを使用する前に、Metal deviceプロパティsupportsDynamicLibrariesを確認する必要があります。

00:08:30.000 --> 00:08:39.000
これで、Metal CIKernelsをアプリケーションに追加する2つの推奨方法を使用する方法についてのステップバイステップの説明は終わりです。

00:08:39.000 --> 00:08:46.000
各メソッドについて、プロジェクトを設定し、カーネルソースを書き、カーネルオブジェクトを初期化する方法を取り上げました。

00:08:46.000 --> 00:08:51.000
これにより、アプリの画像やビデオに素晴らしい視覚効果を追加できることを願っています。

00:08:51.000 --> 00:08:55.000
ありがとう、WWDC 2021の残りを楽しんでください!

00:08:55.000 --> 23:59:59.000
♪

