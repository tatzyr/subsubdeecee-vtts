WEBVTT

00:00:01.000 --> 00:00:10.000
こんにちは。

00:00:10.000 --> 00:00:11.000
私はシンディ・クラリッサです。

00:00:11.000 --> 00:00:14.000
私はCore Locationのソフトウェアエンジニアです。

00:00:14.000 --> 00:00:18.000
今日は、今年のコアロケーションのクールな新しいことについて話します。

00:00:18.000 --> 00:00:29.000
私たちは、できるだけ多くの許可を付与する必要のある人々に直面することなく、アプリのロケーションベースの機能に電力を供給できる2つの新機能を導入しています。

00:00:29.000 --> 00:00:35.000
最初の機能から始めて、リージョンベースのユーザー通知をwatchOS 8にもたらします。

00:00:35.000 --> 00:00:43.000
今、あなたのApple Watchアプリは、ジムに到着したときにトレーニングを開始するか、家に帰ったら犬に餌をやることを人々に思い出させることができます。

00:00:43.000 --> 00:00:51.000
たとえば、ここには、この新機能を使用して、空港に到着したときにフライトについて人々に通知するApp in the Airがあります。

00:00:51.000 --> 00:01:01.000
リージョンベースのユーザー通知を使用すると、システムは「常に」権限を持つことなく、アプリに代わって空間的に関連性のある情報を表示できます。

00:01:01.000 --> 00:01:09.000
watchOSにリージョンベースのユーザー通知を採用する方法の詳細については、「watchOSの新機能」セッションをご覧ください。

00:01:09.000 --> 00:01:12.000
では、このセッションの主なトピックについて話しましょう。

00:01:12.000 --> 00:01:22.000
私たちは、人々が自分のデータをより詳細に制御できる場所を要求する新しい方法を導入していますが、同時に、アプリにより多くの機能を提供します。

00:01:22.000 --> 00:01:28.000
まず、今日の位置認証の状態と、新機能の背後にある動機について話します。

00:01:28.000 --> 00:01:42.000
iOS 14では、アプリが位置情報の承認を要求すると、最初のプロンプトが表示され、許可を一度、使用中、または許可しないから選択することができます。

00:01:42.000 --> 00:01:49.000
そして、昨年の新機能により、人々はあなたのアプリに送信される場所の精度を制御することができます。

00:01:49.000 --> 00:01:59.000
あなた方の何人かは、人々があなたのアプリで一度許可を選択したことに気づいたかもしれません、そして、彼らはあなたのアプリに使用中の許可を与えることが必要ではないと思うかもしれません。

00:01:59.000 --> 00:02:10.000
たとえば、ペットショップアプリは、最寄りのペットショップを決定するために場所の承認を要求するかもしれませんが、異なるキャットフードのオプションを閲覧しているときには、その場所を必要としません。

00:02:10.000 --> 00:02:19.000
この場合、このアプリを使用している人は、一度許可するか許可しないかを選択する可能性が高くなります。

00:02:19.000 --> 00:02:26.000
ユーザーが「1回許可」を選択した場合、アプリを使用している期間の位置許可を付与します。

00:02:26.000 --> 00:02:30.000
しかし、あなたのアプリはバックグラウンドに入ると承認を失います。

00:02:30.000 --> 00:02:37.000
これにより、複数のロケーション認証要求が発生する可能性があり、ユーザーエクスペリエンスに悪影響を及ぼす可能性があります。

00:02:37.000 --> 00:02:45.000
別のケースでは、プロンプトにうんざりしている人が、プロンプトが再び表示されるのを防ぐために「許可しない」を選択する可能性があることに気付くかもしれません。

00:02:45.000 --> 00:02:51.000
これにより、後で場所を承認するために設定に人を送信しなければならない可能性があります。

00:02:51.000 --> 00:03:07.000
プライバシーはAppleにとって重要な優先事項であり続けているため、「ユーザーエクスペリエンスを妨げることなく、どうすればより多くのコントロールを与えることができるか」と考えました。必要な瞬間にのみ場所を承認する簡単でフレンドリーな方法を提供できますか?

00:03:07.000 --> 00:03:16.000
iOS 15から、私が言及した問題点に取り組むために、UIKit用のCLLocationButtonとSwiftUI用のLocationButtonを導入します。

00:03:16.000 --> 00:03:21.000
ここには、近くの最寄りの公園を見つけるパークファインダーアプリがあります。

00:03:21.000 --> 00:03:27.000
下部には、矢印グリフの横に「現在地」というタイトルの青い位置情報ボタンがあります。

00:03:27.000 --> 00:03:35.000
ボタンを押すと、パークファインダーは私の現在の場所を取得し、近くのすべての公園の地図ビューを表示することができます。

00:03:35.000 --> 00:03:43.000
左上の位置矢印が青に変わり、許可したばかりの承認にユーザーの注意を喚起します。

00:03:43.000 --> 00:03:52.000
注意すべき点の1つは、ロケーションボタンが、毎回プロンプトを通過させることなく、実際にアプリにAllow-Onceの許可を与えていることです。

00:03:52.000 --> 00:03:58.000
後で、これが既存の承認ステータスにどのように影響するかについて説明します。

00:03:58.000 --> 00:04:05.000
位置情報ボタンをwatchOS、iOS、Catalystを搭載したmacOS、MacのiPadアプリに導入します。

00:04:05.000 --> 00:04:09.000
それでは、APIと、CLLocationButtonをアプリに追加する方法を掘り下げてみましょう。

00:04:09.000 --> 00:04:13.000
CLLocationButtonは、CoreLocationUIフレームワークの一部です。

00:04:13.000 --> 00:04:18.000
UIButtonと同様に、CLLocationButtonはUIControlsから派生しています。

00:04:18.000 --> 00:04:22.000
そのため、ボタンでUIControl機能を使用できます。

00:04:22.000 --> 00:04:26.000
さらに、ボタンに固有の4つのプロパティがあります。

00:04:26.000 --> 00:04:44.000
矢印のタイプを設定するCLLocationButtonIcon、ボタンのラベルを設定するCLLocationLabel、ボタンの丸みを設定するcornerRadius、最後にラベルのサイズを設定するfontSizeがあります。

00:04:44.000 --> 00:04:51.000
簡単な概要を調べたので、「CLLocationButtonで場所を受け取るにはどうすればよいですか？」と疑問に思うかもしれません。

00:04:51.000 --> 00:04:56.000
まあ、それはUIButtonで場所を要求するのと似ています。

00:04:56.000 --> 00:04:59.000
例を挙げると理解しやすいと思います。

00:04:59.000 --> 00:05:04.000
UIButtonをCLLocationButtonに置き換える方法をお見せしましょう。

00:05:04.000 --> 00:05:14.000
このUIButtonの例では、ボタンのタップ時に使用中の承認を最初に要求することで、場所を要求する簡単なボタンを作成します。

00:05:14.000 --> 00:05:19.000
まず、UIButtonをインスタンス化し、そのタイトルを「現在地」に設定します。

00:05:19.000 --> 00:05:26.000
関数を呼び出すターゲットアクションを追加し、ボタンがタップされるたびに必要なアクションを実行したい。

00:05:26.000 --> 00:05:30.000
この場合、近くのすべての公園を展示したいです。

00:05:30.000 --> 00:05:35.000
では、この関数を「showNearByParks」と呼びましょう。

00:05:35.000 --> 00:05:44.000
このshowNearByParks関数では、locationManagerを使用してrequestWhenInUseAuthorizationとstartUpdatingLocationを呼び出します。

00:05:44.000 --> 00:05:49.000
この関数では、それに応じてマップビューをレンダリングするための追加のロジックも追加します。

00:05:49.000 --> 00:05:52.000
しかし、簡単にするために、それを省略しましょう。

00:05:52.000 --> 00:06:03.000
まず、最初の2行を削除し、CLLocationButtonのインスタンス化に置き換えてから、ラベルを「.currentLocation」に設定することで、UIButtonを置き換えましょう。

00:06:03.000 --> 00:06:17.000
最後に、requestWhenInUseAuthorizationへの呼び出しをコメントアウトすることができます。これは、ボタンが正常にタップされるたびに、ロケーションボタンがお客様に代わって1回限りの承認を付与するためです。

00:06:17.000 --> 00:06:23.000
したがって、既存のUIButtonをお持ちの場合は、ここに示すように簡単に置き換えられます。

00:06:23.000 --> 00:06:30.000
しかし、私たちはそれをさらに簡単にしたいので、このトークに添付されているパークファインダーアプリの例を見ることができます。

00:06:30.000 --> 00:06:34.000
SwiftUIアプリを持っている人のために、位置情報ボタンもSwiftUIにあります。

00:06:34.000 --> 00:06:37.000
ここの例に示すように、LocationButtonを使用できます。

00:06:37.000 --> 00:06:49.000
SwiftUIの新しい「symbolVariant」を使用して矢印タイプを設定し、「ティント」を使用してボタンの背景色を設定していることを指摘したいと思います。

00:06:49.000 --> 00:06:53.000
ロケーションボタンをカスタマイズする方法について、いくつかの例を見てみましょう。

00:06:53.000 --> 00:07:01.000
位置ボタンを使用すると、背景色、テキストとグリフの色、丸みを帯びた角などをカスタマイズできます。

00:07:01.000 --> 00:07:05.000
ここでは、ボタンで作成できるスタイルの例をいくつか紹介します。

00:07:05.000 --> 00:07:09.000
ロケーションボタンをカスタマイズするステップバイステップの例を見てみましょう。

00:07:09.000 --> 00:07:11.000
デフォルトのボタンから始めましょう。

00:07:11.000 --> 00:07:19.000
デフォルトの外観は、ここに示すように、白の「現在地」タイトルとシステムブルーの背景色です。

00:07:19.000 --> 00:07:23.000
ボタンアイコンをarrowFilledに設定できます。

00:07:23.000 --> 00:07:30.000
次に、tintColorを白から黒に設定することで、アイコンの前景色を変更できます。

00:07:30.000 --> 00:07:34.000
次に、backgroundColorを白に設定します。

00:07:34.000 --> 00:07:41.000
最後に、25.0に設定することで、角半径を角が丸みを帯びるように設定できます。

00:07:41.000 --> 00:07:53.000
また、ボタンの制約とサイジングの設定方法に応じて、ボタンの幅が高さに等しい場合、コーナー半径が幅の半分のときに完璧な円を作成できます。

00:07:53.000 --> 00:07:59.000
これで、デフォルトの位置ボタンを簡単な調整で白い円形のボタンに変えました。

00:07:59.000 --> 00:08:03.000
ロケーションボタンに追加できるいくつかの文体の変更をちょうど通過しました。

00:08:03.000 --> 00:08:08.000
ボタンをカスタマイズして、アプリに合った完璧な外観を作成できます。

00:08:08.000 --> 00:08:11.000
しかし、大きな力には大きな責任が伴います。

00:08:11.000 --> 00:08:20.000
位置情報ボタンをカスタマイズすると、位置情報ボタンが明確で見えるようにするために、いくつかの制限が発生する可能性があります。

00:08:20.000 --> 00:08:29.000
ボタンが正しく描画されていないか、場所を受け取っていないように見える場合、あなたが期待できるいくつかの例について話したいと思います。

00:08:29.000 --> 00:08:35.000
その場合、ターゲットアクションが呼び出されますが、承認は得られません。

00:08:35.000 --> 00:08:36.000
でも、心配しないでください。

00:08:36.000 --> 00:08:42.000
遭遇している制限を把握するのに役立つログメッセージで多くのフィードバックを提供します。

00:08:42.000 --> 00:08:53.000
たとえば、これらは、ボタンのサイズ、アルファ値、およびtintColorとbackgroundColorの間の色のコントラストの不十分さを参照する異なるログメッセージにすぎません。

00:08:53.000 --> 00:08:59.000
それでは、XcodeでInterface Builderを使用している場合に期待できるフィードバックの例をいくつか紹介しましょう。

00:08:59.000 --> 00:09:11.000
先ほど作成したボタンを続けると、既存のボタンを白い色合いに変更すると、ボタンの背景色がすでに白であるため、人々はこれを見ることができません。

00:09:11.000 --> 00:09:17.000
したがって、これを行うと、Xcodeの[問題]タブの下のナビゲーションペインにこの問題が表示されます。

00:09:17.000 --> 00:09:24.000
代わりに、元のボタンを元に戻して、このボタンの不透明度（アルファ）を変更してみましょう。

00:09:24.000 --> 00:09:31.000
たぶん、あなたはこれを見ることができますが、他の人にとっては、それは少し透明すぎるので、それは私たちのアクセシビリティガイドラインに失敗します。

00:09:31.000 --> 00:09:37.000
同様の問題文がXcodeで作成され、アルファ値を増やすことをお勧めします。

00:09:37.000 --> 00:09:42.000
あなたが遭遇するかもしれないもう一つの問題は、ボタンのサイズが不十分です。

00:09:42.000 --> 00:09:48.000
これは、ボタンの内容がボタンのサイズに対して小さすぎる、または大きすぎる場合です。

00:09:48.000 --> 00:09:54.000
ユーザーのローカリゼーション設定に応じて、ボタンのテキストの長さが変更される可能性があります。

00:09:54.000 --> 00:10:01.000
では、言語を変更してテキストサイズを大きくしましょう。

00:10:01.000 --> 00:10:09.000
実装が自動レイアウトに優しいかどうかに応じて、言語を変更すると、テキストのサイズがボタンよりも大きくなる可能性があります。

00:10:09.000 --> 00:10:12.000
テキストがドイツ語のボタンに合わないことに注意してください。

00:10:12.000 --> 00:10:16.000
このような場合は、ログメッセージを見てフィードバックを求めてください。

00:10:16.000 --> 00:10:28.000
位置情報ボタンを非常に小さいまたは非常に大きなテキストサイズでテストするだけでなく、ボタンがすべてのケースで機能していることを確認するために異なる言語でテストすることを忘れないでください。

00:10:28.000 --> 00:10:34.000
したがって、ボタンをカスタマイズするときは、それが明確で目に見えることが不可欠であることを覚えておいてください。

00:10:34.000 --> 00:10:41.000
ボタンが正しく描画されていないか、場所を受信していないように見える場合は、もはや判読できない可能性があります。

00:10:41.000 --> 00:10:48.000
その場合は、何が間違っている可能性があるかを判断するのに役立つガイダンスのためのログメッセージを提供します。

00:10:48.000 --> 00:10:55.000
ロケーションボタンの実装方法がわかったので、それが既存の承認ステータスにどのように影響するか疑問に思うかもしれません。

00:10:55.000 --> 00:11:01.000
前に述べたように、ロケーションボタンは基本的にAllow-Onceの承認を与えています。

00:11:01.000 --> 00:11:12.000
アプリにいかなる種類の承認ステータスもない場合は、プライバシー設定で「共有するとき」が選択されている「NotDetermined」承認があります。

00:11:12.000 --> 00:11:22.000
これがアプリの現在の状態である場合、各ユーザーが初めて位置情報ボタンを押すと、このプロンプトは、彼らが搭乗していることを確認するように求められます。

00:11:22.000 --> 00:11:34.000
ただし、「アプリの使用中」状態など、アプリがすでに位置情報に許可されている場合、位置情報ボタンを使用しても既存の状態は変更されず、他のUIButtonと同様に動作します。

00:11:34.000 --> 00:11:44.000
それが機能するところでは、場所ボタンは、自分の場所がいつ、毎回使用されるかどうかを人々に決めさせているので、魔法のように安心感を感じることができます。

00:11:44.000 --> 00:11:54.000
ロケーションボタンははるかに快適であるため、人々は以前よりもロケーションボタンを介してアプリの位置情報を提供する可能性が高いと思います。

00:11:54.000 --> 00:12:00.000
だから、私たちはユーザーとあなたのアプリに正しい足で降りる別の機会を与えたい。

00:12:00.000 --> 00:12:15.000
過去にアプリで「許可しない」承認を選択した人が新しいロケーションボタンをタップすると、このボタンの紹介プロンプトが表示され、アプリをNotDeterminedに戻し、今後はロケーションボタンを使用する機会があります。

00:12:15.000 --> 00:12:24.000
そこで、このセッションでは、リージョンベースのユーザー通知を使用して、watchOSアプリにより多くの動的な機能をもたらすことについて話しました。

00:12:24.000 --> 00:12:28.000
もっと学ぶことに興味があるなら、セッションのリソースを見るのを忘れないでください。

00:12:28.000 --> 00:12:34.000
また、場所を尋ねる方法のゲームを変えることができるいくつかのクールな新機能も取り上げました。

00:12:34.000 --> 00:12:39.000
人々が自分のデータプライバシーをより詳細に制御できるようにすることは、Appleにとって重要です。

00:12:39.000 --> 00:12:43.000
人々は自分のデータがどのように共有されているかをますます認識しています。

00:12:43.000 --> 00:13:02.000
最も素晴らしいユーザーエクスペリエンスを提供するだけでなく、顧客との信頼を築くためにアプリを設計するとき、「私のアプリには従来の認証が必要ですか、それとも位置情報ボタンを使用した1回限りの位置認証がより適していますか？」と自問したいと思うかもしれません。

00:13:02.000 --> 00:13:07.000
そして、答えは、場合によっては、一度で十分かもしれないということです。

00:13:07.000 --> 00:13:14.000
ロケーションボタンを使用すると、位置情報を共有したいタイミングをより詳細に制御することで、人々の信頼を得ることができます。

00:13:14.000 --> 00:13:15.000
ありがとうございます。

00:13:15.000 --> 23:59:59.000
[音楽]。

