WEBVTT

00:00:00.000 --> 00:00:12.000
iOS 15の「UIKitの新機能」へようこそ。

00:00:12.000 --> 00:00:17.000
私の名前はマイケルで、後で同僚のジェイミーが加わります。

00:00:17.000 --> 00:00:21.000
iOS 15には、驚くべき新技術と機能が満載です。

00:00:21.000 --> 00:00:27.000
これらの新機能の採用を支援するために、いくつかのエキサイティングな方法でUIKitを更新しました。

00:00:27.000 --> 00:00:39.000
ジェイミーと私は一緒に、生産性の更新、UIの改良、APIの強化、パフォーマンスの向上、そしていくつかの新しいセキュリティとプライバシー機能について説明します。

00:00:39.000 --> 00:00:53.000
生産性はiPadOSの中心であり、今年も例外ではなく、iPadマルチタスク、キーボードナビゲーション、キーボードショートカット、iPadポインターのアップデートがあります。

00:00:53.000 --> 00:00:59.000
iPadを次のレベルに引き上げるために、マルチタスクをどのように更新したかについての簡単なデモから始めましょう。

00:00:59.000 --> 00:01:09.000
メールでは、新しいセンターシーンのマルチタスク機能を使用して、単一のメッセージに集中することをこれまで以上に簡単にしています。

00:01:09.000 --> 00:01:14.000
メッセージを長押ししてコンテキストメニューを開き、「新しいウィンドウで開く」を選択します。

00:01:14.000 --> 00:01:19.000
これにより、画面の中央にある独自のUIWindowSceneでメッセージが開きます。

00:01:19.000 --> 00:01:22.000
これは、手元のタスクに集中するのに最適な方法です。

00:01:22.000 --> 00:01:33.000
新しいセンターシーンは、ドラッグアンドドロップを使用するか、ウィンドウシーンの上部にある新しいマルチタスクメニューでスプリットビューオプションを選択することで、スプリットビューに移動することもできます。

00:01:33.000 --> 00:01:41.000
または、マルチタスクメニューを下にスワイプして、新しいウィンドウシェルフにシーンをドッキングすることもできます。

00:01:41.000 --> 00:01:48.000
この機能をアプリに追加するのは、新しいウィンドウシーンのアクティベーションアクションを作成するのと同じくらい簡単です。

00:01:48.000 --> 00:01:56.000
このアクションは、アプリで処理できるNSUserActivityで作成されたアクティベーション設定を返すクロージャを取ります。

00:01:56.000 --> 00:02:00.000
このアクションをコンテキストメニューに追加して、準備完了です。

00:02:00.000 --> 00:02:06.000
iPadOS 13.4では、Magic Keyboardとポインターを導入しました。

00:02:06.000 --> 00:02:11.000
iPadOS 15では、バンド選択を追加することでポインタのサポートを改善しました。

00:02:11.000 --> 00:02:19.000
新しいAPIの提供に加えて、複数選択をサポートするUICollectionViewsのバンド選択をデフォルトで有効にしました。

00:02:19.000 --> 00:02:30.000
また、セカンダリシェイプと任意のポインタースタイルを組み合わせることで、追加のコンテキストや機能のヒントを伝えることができるポインターアクセサリーも追加しました。

00:02:30.000 --> 00:02:35.000
複数のアクセサリを一度に表示し、ポインタの周りに配置できます。

00:02:35.000 --> 00:02:44.000
それらはポインタと同じ流動的な性質を持ち、システムは異なるアクセサリーの形状と位置の間でシームレスにアニメーション化します。

00:02:44.000 --> 00:02:49.000
iPadOS 15では、キーボードショートカットメニューを完全に再設計しました。

00:02:49.000 --> 00:02:56.000
分類されたショートカットと組み込みの検索により、探しているショートカットを見つけることがかつてないほど簡単になりました。

00:02:56.000 --> 00:03:05.000
新しいキーボードショートカットメニューは、アプリのiPadとMac Catalystバージョンのパリティも高めます。

00:03:05.000 --> 00:03:10.000
これらの新機能を最大限に活用するには、UIMenuBuilderを採用する必要があります。

00:03:10.000 --> 00:03:14.000
UIApplicationDelegateにbuildMenuWithBuilderを実装します。

00:03:14.000 --> 00:03:22.000
「表示」や「ファイル」などの事前定義されたカテゴリの1つにコマンドを割り当てたり、独自のカスタムカテゴリを作成したりすることもできます。

00:03:22.000 --> 00:03:29.000
カテゴリを使用するには、UIResponderのkeyCommandsプロパティの使用についてアプリケーションを監査する必要があります。

00:03:29.000 --> 00:03:34.000
このプロパティに割り当てられたコマンドをbuildMenuWithBuilder関数に移動します。

00:03:34.000 --> 00:03:44.000
マルチタスク、iPadポインター、新しいキーボードショートカットメニューの詳細については、iPadアプリを次のレベルに引き上げる素晴らしいビデオがあります。

00:03:44.000 --> 00:03:51.000
また、iPadOS 15でフォーカスベースのキーボードナビゲーションの豊富なサポートを追加しました。

00:03:51.000 --> 00:03:58.000
すでにtvOSのフォーカスシステムに精通している場合は、iPadOSでも利用可能になったことを知って喜んでいるでしょう。

00:03:58.000 --> 00:04:07.000
実際、tvOS、CarPlay、iPadOS、Mac Catalystのすべてのフォーカスナビゲーションは、現在UIFocusSystem上に構築されています。

00:04:07.000 --> 00:04:18.000
iPadとMac CatalystのUIFocusSystemでは、矢印キーを使用してフォーカスアイテム間を移動し、タブキーを使用してフォーカスグループ間を移動します。

00:04:18.000 --> 00:04:33.000
この例では、メールアプリケーションはサイドバーでUISplitViewControllerを使用しており、これらの標準UIKitコンポーネントを使用すると、iPadOS 15でデフォルトで実証されたキーボードナビゲーションが有効になります。

00:04:33.000 --> 00:04:40.000
アプリでのキーボードナビゲーションのサポートの詳細については、「キーボードナビゲーションに焦点を当てる」をチェックしてください。

00:04:40.000 --> 00:04:45.000
iOSのもう1つの重要な生産性機能は、マルチタッチのドラッグアンドドロップです。

00:04:45.000 --> 00:04:50.000
iOS 11で導入されたドラッグアンドドロップは、不可欠な生産性向上です。

00:04:50.000 --> 00:04:58.000
1つの簡単なジェスチャーで、アプリケーション間でもアプリケーション内やiPadOS上でデータをシームレスに移動できます。

00:04:58.000 --> 00:05:08.000
iOS 15では、UIKitはiPhoneでもアプリ間のドラッグアンドドロップを有効にし、多くのエキサイティングな新しいインタラクションのロックを解除しました。

00:05:08.000 --> 00:05:14.000
たとえば、新しい時計バンドのアイデアを友人とすばやく共有することがこれまで以上に簡単になりました。

00:05:14.000 --> 00:05:21.000
1つのジェスチャーで、Safariからメッセージを会話に簡単にドラッグできます。

00:05:21.000 --> 00:05:26.000
ドラッグアンドドロップAPIは、この拡張機能をサポートするために変更されていません。

00:05:26.000 --> 00:05:35.000
技術的な詳細を更新するために、ドラッグアンドドロップを利用する方法について詳しく説明する2017年の4つの素晴らしいビデオがあります。

00:05:35.000 --> 00:05:40.000
次に、iOS 15のUIの改良点をいくつか紹介します。

00:05:40.000 --> 00:05:44.000
UIToolbarとUITabBarの外観を洗練しました。

00:05:44.000 --> 00:05:53.000
この更新された外観は、下までスクロールすると背景素材が削除され、コンテンツがより視覚的に明確になります。

00:05:53.000 --> 00:06:01.000
UITabBarでは、SFシンボルのサポートを強化し、お気に入りのシンボルを使用するときに素晴らしい結果をもたらしました。

00:06:01.000 --> 00:06:08.000
UIKitは、アプリでこの新しい外観をシームレスにするために最善を尽くしていますが、遭遇する可能性のあるいくつかの問題があります。

00:06:08.000 --> 00:06:19.000
バーの半透明プロパティをfalseに設定している可能性のある場所のコードを監査し、非標準のedgeForExtendedLayoutを持つUIViewControllersをチェックする必要があります。

00:06:19.000 --> 00:06:25.000
これらの条件は両方とも、新しい外観で視覚的な問題を引き起こします。

00:06:25.000 --> 00:06:35.000
新しいデフォルトの動作がアプリに適切でない場合は、カスタムの外観を作成し、バーのscrollEdgeAppearanceプロパティに割り当てるだけです。

00:06:35.000 --> 00:06:44.000
このプロパティは、以前はUINavigationBarでのみ利用可能でしたが、現在はUIToolbarとUITabBarでも利用可能です。

00:06:44.000 --> 00:06:51.000
カスタム外観を設定すると、前述の互換性のないAPIによる視覚的な問題を回避できます。

00:06:51.000 --> 00:07:01.000
さらに、新しいスクロールエッジの外観遷移を実行すると、UIKitが観察のための適切なスクロールビューを推測できない可能性があります。

00:07:01.000 --> 00:07:08.000
scrollViewを直接指定するために、UIViewControllerに新しい機能を追加しました。setContentScrollView for edgeです。

00:07:08.000 --> 00:07:10.000
すべてのバーを見てください。

00:07:10.000 --> 00:07:12.000
外観があなたが期待しているものであることを確認してください。

00:07:12.000 --> 00:07:18.000
特別なことをした場所を必ず確認してください。特別な注意が必要かもしれません。

00:07:18.000 --> 00:07:22.000
iOS 15のヘッダーが新しく登場しました。

00:07:22.000 --> 00:07:33.000
プレーンリストの場合、セクションヘッダーはコンテンツに沿ってシームレスに表示され、下にスクロールするときにトップに固定されたときにのみ、目に見える背景素材が表示されます。

00:07:33.000 --> 00:07:42.000
さらに、この新しいデザインでセクションを視覚的に分離するために、各セクションヘッダーの上に新しいパディングが挿入されています。

00:07:42.000 --> 00:07:51.000
連絡先アプリで示されているように、リストのコンテンツが長い場合は、このプレーンスタイルをインデックスバーと組み合わせて使用する必要があります。

00:07:51.000 --> 00:07:54.000
UIKitはグループ化されたスタイルも提供しています。

00:07:54.000 --> 00:08:00.000
これは、カスタムコンテンツや視覚的にリッチなコンテンツがあまり含まれていないUIで使用するためのものです。

00:08:00.000 --> 00:08:09.000
これは、設定アプリにあるものと同様に、設定UIや登録フローに最適です。

00:08:09.000 --> 00:08:17.000
目立つヘッダースタイルは、iPadのサイドバーリストに使用される既存のサイドバーヘッダースタイルと非常によく似ています。

00:08:17.000 --> 00:08:25.000
目立つヘッダーは、.sidebarリストをコンパクトなサイズのクラスの.insetGroupedリストに適応させる場合に最適です。

00:08:25.000 --> 00:08:30.000
時計アプリのアラームタブは、この新しいスタイルを大いに活用しています。

00:08:30.000 --> 00:08:41.000
そして最後に、ヘッダーが階層を維持し、失われないように、視覚的に豊かなコンテンツで使用するための新しい非常に顕著なグループ化されたスタイルがあります。

00:08:41.000 --> 00:08:46.000
WatchアプリのFace Galleryをチェックして、このスタイルの動作を確認してください。

00:08:46.000 --> 00:08:54.000
これらの優れたヘッダースタイルすべてにアクセスするには、iOS 14で導入されたUIListContentConfiguration APIを使用します。

00:08:54.000 --> 00:09:04.000
iOS 14.5では、リスト内のセパレータを完全に制御できるUIListSeparatorConfigurationを導入しました。

00:09:04.000 --> 00:09:15.000
リスト全体の設定を指定することも、システム生成の外観を行ごとに上書きして、セパレータを完全に制御することもできます。

00:09:15.000 --> 00:09:23.000
iOS 15のシートは、私たちが中程度の高さのデテントと呼ぶものに表示される画面の半分しかカバーしない機能を得ます。

00:09:23.000 --> 00:09:35.000
この新しいハーフハイト機能を使用すると、オプションでこのディテントの後ろの調光を無効にして、シート内と後ろの両方でインタラクションを可能にする非モーダルエクスペリエンスを作成できます。

00:09:35.000 --> 00:09:43.000
「UIKitでシートをカスタマイズしてサイズ変更する」を見て、iOS 15でシートを強化したすべての方法について学んでください。

00:09:43.000 --> 00:09:46.000
次はUIDatePickerです。

00:09:46.000 --> 00:09:52.000
そして、はい、iOS 15では、時間の車輪を再導入しています。

00:09:52.000 --> 00:09:56.000
しかし、今では、入力にキーボードを使用する時間をタップするだけです。

00:09:56.000 --> 00:10:01.000
また、iPadのMagic Keyboardを使用すると、時間をインラインで編集することもできます。

00:10:01.000 --> 00:10:05.000
もちろん、画面をタップして美しいホイールを表示することもできます。

00:10:05.000 --> 00:10:09.000
それで、同僚のジェイミーに渡します。

00:10:09.000 --> 00:10:11.000
ありがとう、マイク！

00:10:11.000 --> 00:10:16.000
iOS 15のUIKit APIのさらなる機能強化を検討し始めます。

00:10:16.000 --> 00:10:21.000
私たちの最初のAPI強化は、多くの点でUIの改良でもあります。

00:10:21.000 --> 00:10:28.000
ボタンのルックアンドフィールを柔軟に設定できるように、UIButtonに新しいAPIを追加しました。

00:10:28.000 --> 00:10:41.000
既存のプレーンスタイルと同様に、グレーの背景を持つグレー、着色された背景を持つティンテッド、完全に不透明なフィルドを追加しました。

00:10:41.000 --> 00:10:52.000
新しいスタイルに加えて、ボタンはダイナミックタイプとして知られるシステムの「テキストサイズ」設定に応じてサイズ変更をサポートし、初めて複数行のテキストを正式にサポートできるようになりました。

00:10:52.000 --> 00:11:03.000
これらの変更と、それらを可能にする新しいUIButton.Configuration APIは、ボタンをより強力にするだけでなく、よりカスタマイズ可能で更新も簡単です。

00:11:03.000 --> 00:11:16.000
iOS 14でリリースされたボタンへのUIMenuの追加とともに、UIButtonConfigurationを使用すると、UIKitで初めてポップアップボタンとプルダウンボタンをネイティブに作成できます。

00:11:16.000 --> 00:11:28.000
そしてもちろん、MacでUIKitを使用していて、Xcodeで「Mac用のインターフェイスを最適化」を選択した場合、これらのボタンはすべて期待どおりに見え、動作します。

00:11:28.000 --> 00:11:31.000
以下は、APIがいかに使いやすいかの例です。

00:11:31.000 --> 00:11:34.000
ボタンの設定を作成するだけです。

00:11:34.000 --> 00:11:39.000
このコンストラクターはティンテッドスタイルを与えます。

00:11:39.000 --> 00:11:43.000
設定のプロパティは、ボタンをカスタマイズするために使用されます。

00:11:43.000 --> 00:11:46.000
そして、ボタンをインスタンス化し、設定を渡します。

00:11:46.000 --> 00:11:53.000
ここには表示されていませんが、残っているのはアクションを追加し、ビューにボタンを追加することだけです。

00:11:53.000 --> 00:12:02.000
UIButtonConfigurationには、ここでカバーできる以上のものがたくさんあるので、それをカバーする完全なビデオと、UIButtonの他の改善が詳細にあります。

00:12:02.000 --> 00:12:07.000
「Meet the UIKit Button System」をチェックして、ボタンAPIについて学んでください。

00:12:07.000 --> 00:12:14.000
iOSとiPadOSのUIContextMenuInteractionは、折りたたみ可能なサブメニューをサポートするようになりました。

00:12:14.000 --> 00:12:21.000
このメニューの「Sort By」項目のようなシェブロンのアイテムをタップすると表示されます。

00:12:21.000 --> 00:12:22.000
これのための新しいAPIはありません。

00:12:22.000 --> 00:12:31.000
UIMenu APIはすでにサブメニューをサポートしていますが、iOS 15より前は、タップすると現在のメニューが完全に置き換えられました。

00:12:31.000 --> 00:12:38.000
これは、「UIKitボタンシステムに会う」ビデオでももう少し議論されています。

00:12:38.000 --> 00:12:47.000
iOS 13では、サンフランシスコのフォントの隣によく似合う何百ものスケーラブルなシンボルであるSFシンボルを導入しました。

00:12:47.000 --> 00:12:49.000
iOS 15では、これらはさらに良くなります。

00:12:49.000 --> 00:12:59.000
追加のシンボルがあるだけでなく、ヒエラルキー、パレット、マルチカラーの3つの新しい方法で色を使用する機能を追加しました。

00:12:59.000 --> 00:13:04.000
モノクロのシンボルは、あなたがすでに知っていて愛している単色の着色可能な画像です。

00:13:04.000 --> 00:13:11.000
階層記号は、レイヤーの階層に単一のランタイム指定の色合いの色を適用します。

00:13:11.000 --> 00:13:16.000
パレットシンボルでは、複数の色を明示的に指定できます。

00:13:16.000 --> 00:13:24.000
そして、以前はAppKitとSwiftUIでのみ利用可能だった多色シンボルは、固定された多色表現を持っています。

00:13:24.000 --> 00:13:32.000
これらすべてのカラフルなモードを使用するための新しいAPIは、UIKit、SwiftUI、およびAppKitで利用できます。

00:13:32.000 --> 00:13:34.000
APIは本当に使いやすいです。

00:13:34.000 --> 00:13:49.000
このコードは、UIImageSymbolConfigurationを設定して、階層的な色合いの基礎としてシステムのオレンジ色を使用し、それを使用して階層的に着色されたオレンジ色の太陽のシンボルのこの画像を作成します。

00:13:49.000 --> 00:13:54.000
SFSymbolsを定期的に使用する場合は、いくつかのスタイルのバリエーションがあることを知っています。

00:13:54.000 --> 00:13:58.000
例えば、塗りつぶし、円や長方形に。

00:13:58.000 --> 00:14:04.000
以前のリリースでは、これらは点線の文字列を指定して選択されています。

00:14:04.000 --> 00:14:15.000
iOS 15では、タイプを事前に指定するか、既存の画像のバリアントを生成するかにかかわらず、これらのバリアントを非常に簡単に操作できる新しいUIImage APIがあります。

00:14:15.000 --> 00:14:21.000
これは「ハート」文字列で表されるシンボルであり、コードで選択できる2つのバリアントです。

00:14:21.000 --> 00:14:30.000
「SFシンボルの設計と構築」コレクションには、SFシンボルのあらゆる側面に関するビデオがたくさんあり、それらをすべてチェックすることをお勧めします。

00:14:30.000 --> 00:14:38.000
UIKit APIについては、特に「UIKitとAppKitのSFシンボル」の詳細があります。

00:14:38.000 --> 00:14:46.000
UIContentSizeCategory特性は、動的型サイズとも呼ばれるシステムテキストサイズ設定をコードで表します。

00:14:46.000 --> 00:14:54.000
ラベル、テキストフィールド、テキストビュー、画像ビュー（おそらくSFSymbolsを含む）を設定して、設定に自動的に調整できます。

00:14:54.000 --> 00:15:00.000
iOS 15では、階層の表示に特性を適用する方法を制限する新しい方法を追加しました。

00:15:00.000 --> 00:15:04.000
これにより、サイズに床や天井を簡単に設定できます。

00:15:04.000 --> 00:15:10.000
これは、すべてのテキストサイズ設定でアプリのテキストと画像が素晴らしく見えることを確認するときに大きな助けになります。

00:15:10.000 --> 00:15:15.000
ここでは、時計は大きな時間ラベルがどれだけ小さくなるかを制限しています。

00:15:15.000 --> 00:15:19.000
このAPIを使用してテキストサイズを過度に制限しないでください。

00:15:19.000 --> 00:15:30.000
これらの設定は非常に重要な機能を果たしており、最高のテキストサイズ設定を使用している人にとって、アプリの機能がすべて利用可能であり、すべてが読みやすいことが最も重要です。

00:15:30.000 --> 00:15:38.000
したがって、別の例として、これを使用して、デフォルトのサイズですでに非常に大きい見出しの成長を制限することができます。

00:15:38.000 --> 00:15:42.000
私たちはすべてのプラットフォームでシステムの色を統合しました。

00:15:42.000 --> 00:15:44.000
これはUIKitにとってどういう意味ですか?

00:15:44.000 --> 00:15:53.000
さて、いくつかの色にはいくつかの微妙な変更があり、以前は他のフレームワークでしか利用できなかったいくつかの色は、アプリが実行されている場所ならどこでもUIKitでも利用できるようになりました。

00:15:53.000 --> 00:16:00.000
だから、UIKitアプリでsystemMintやsystemBrownを使いたくてうずうずしているなら、今がその時です。

00:16:00.000 --> 00:16:03.000
また、UIColor.tintColorも新機能です。

00:16:03.000 --> 00:16:09.000
これは、アプリまたはトレイト階層の現在の色合いの色に基づいて、実行時に解決される色です。

00:16:09.000 --> 00:16:17.000
新しいUIButton.Configurationと新しいカラフルなSFシンボルAPIで使用するのに最適です。

00:16:17.000 --> 00:16:26.000
UIColorに加えて、色を混合してピッキングするための標準インターフェイスであるUIColorPicker ViewControllerも強化されています。

00:16:26.000 --> 00:16:39.000
iOS 14.5では、新しいコールバック、colorPickerViewController(didSelect:continuously:)があり、色が混在して変更されたときや、ピッキングが完了したときにアプリのUIを更新できます。

00:16:39.000 --> 00:16:48.000
TextKit 2は、iOS、iPadOS、tvOS、macOSで利用可能な新しい次世代のテキストレイアウトシステムです。

00:16:48.000 --> 00:16:56.000
これは、テキストでやりたいことを簡単に表現できる強力な新しいシステムであり、高速で高性能な方法で行います。

00:16:56.000 --> 00:17:08.000
UIKitは、採用を必要としないカンナダ語のような複雑なスクリプトを持つ言語でテキストにより良いレイアウトをもたらすUITextFieldを強化するために舞台裏で採用しました。

00:17:08.000 --> 00:17:16.000
TextKit 2、それができること、そしてアプリでの使用方法についてもっと知りたい場合は、「Meet TextKit 2」をご覧ください。

00:17:16.000 --> 00:17:25.000
UISceneSessionは、アプリケーションのUIのインスタンスを表し、アプリスイッチャーで表されるアプリウィンドウに対応します。

00:17:25.000 --> 00:17:30.000
インターフェイスの状態はNSUserActivityで表されます。

00:17:30.000 --> 00:17:40.000
アプリは、シーンがバックグラウンドに入ったときにこのNSUserActivityをシステムに提供し、シーンが再インスタンス化されたときにインターフェイス状態を復元するために使用する必要があります。

00:17:40.000 --> 00:17:44.000
iPadOS 15では、これをより簡単にするための新しいAPIがいくつかあります。

00:17:44.000 --> 00:17:50.000
テキスト入力ビューの一時的な状態を取得して設定する新しい方法があります。

00:17:50.000 --> 00:17:56.000
ストーリーボードのロード後に状態を復元するためのより便利な場所を提供する新しいUISceneコールバックがあります。

00:17:56.000 --> 00:18:05.000
また、状態を返す非同期モデルコードがある場合、アプリの起動プロセスを拡張し、アプリのUIがアクティブになるのを遅らせる機会があります。

00:18:05.000 --> 00:18:09.000
すべてのエンジニアリングの取り組みは、UISceneベースのAPIに焦点を当てています。

00:18:09.000 --> 00:18:19.000
iPadOS 13でUISceneが導入される前の古いUIApplicationベースのライフサイクルをまだ使用している場合は、今がUISceneに切り替える時です。

00:18:19.000 --> 00:18:27.000
すべてのUIKitアプリが使用できます。複数のウィンドウをサポートする必要はありませんが、iPadやMacアプリの場合、それは素晴らしいアイデアです。

00:18:27.000 --> 00:18:35.000
UISceneの復習と、強化された状態復元APIの詳細については、「iPadアプリを次のレベルに引き上げる」をご覧ください。

00:18:35.000 --> 00:18:46.000
シーンといえば、iOS 15のUIKitには、アプリが各シーンで対話されている現在共有可能なコンテンツを表現できるようにする新しいAPIがあります。

00:18:46.000 --> 00:18:56.000
これらは、iOSとMacの新しいSiri「Share This」機能と、Mac CatalystのNSSharingServicePickerToolbarItemで使用されています。

00:18:56.000 --> 00:19:06.000
「ショートカット、Siri、提案のための素晴らしいアクションをデザインする」と「素晴らしいMac Catalystアプリの資質」のビデオには、さらに多くの詳細があります。

00:19:06.000 --> 00:19:13.000
最後のAPI強化のために、私たちは親愛なる友人、UICollectionViewとUITableViewに戻ります。

00:19:13.000 --> 00:19:22.000
iOS 14では、過去よりもはるかに簡単かつ一貫してセルのルックアンドフィールを設定できるように、新しいAPIを導入しました。

00:19:22.000 --> 00:19:30.000
iOS 15では、新しいクロージャベースのアップデートハンドラにより、セルの再構成がこれまで以上に簡単になります。

00:19:30.000 --> 00:19:35.000
セルサブクラスを作成し、状態を使用してupdateConfigurationをオーバーライドする必要がなくなりました。

00:19:35.000 --> 00:19:40.000
セルを作成するのと同じ場所に、そのコードをインラインで書くことができます。

00:19:40.000 --> 00:19:44.000
ここでは、セルが無効になっているときにテキストをグレー表示しています。

00:19:44.000 --> 00:19:51.000
同様のクロージャベースの機能は、新しいUIButtonConfiguration APIでも利用できます。

00:19:51.000 --> 00:19:56.000
コレクションとテーブルビューを簡単に更新できるように、差分可能なデータソースを改善しました。

00:19:56.000 --> 00:20:06.000
iOS 15では、違いをアニメーション化せずにスナップショットを適用すると、既存のすべてのセルを破棄することなく、それらの変更に基づいてUIが更新されます。

00:20:06.000 --> 00:20:17.000
また、アイテムを効率的に再構成するための新しいAPIがあるため、アイテムのプロパティがアイデンティティを変更せずに変更されたときに、既存のセルに表示されるコンテンツを更新できます。

00:20:17.000 --> 00:20:23.000
UIKitが実行されるすべてのデバイスには、複数のプロセッサコアと強力なグラフィックスハードウェアがあります。

00:20:23.000 --> 00:20:28.000
物事は早く起こるべきだ。アニメーションとスクロールは常にスムーズであるべきです。

00:20:28.000 --> 00:20:36.000
iOS 15では、これらの特性を持つ建物アプリをさらに簡単にするいくつかの機能強化と新しいAPIがあります。

00:20:36.000 --> 00:20:40.000
UIKitで利用可能なもののいくつかについて話しましょう。 いくつか話しましょう。

00:20:40.000 --> 00:20:44.000
まず、UICollectionViewとUITableViewに戻ります。

00:20:44.000 --> 00:20:48.000
iOS 15では、セルのプリフェッチの変更が導入されています。

00:20:48.000 --> 00:20:52.000
これらの変更は、iOS 15用にビルドすると自動的に有効になります。

00:20:52.000 --> 00:21:01.000
彼らは、完全に滑らかなスクロールを維持しながら、セルを準備するために、最大2倍の時間（ほぼ2つのビジュアルフレームの価値）をアプリに与えることができます。

00:21:01.000 --> 00:21:03.000
多くのセルに画像が表示されます。

00:21:03.000 --> 00:21:11.000
過去には、メインのUIキューが大きな画像のデコードに縛られているときに、スクロールの一時的な中断に気づいたかもしれません。

00:21:11.000 --> 00:21:15.000
iOS 15では、アプリコードがこのプロセスをより詳細に制御できます。

00:21:15.000 --> 00:21:21.000
画像を準備するための新しい簡単な機能があるので、アプリが画像を表示する必要があるときに完全に準備が整います。

00:21:21.000 --> 00:21:30.000
また、これらの機能は非同期に使いやすいため、画像がデコードされている間、UIキューはイベントを自由に処理できます。

00:21:30.000 --> 00:21:35.000
多くのアプリは大きな画像を処理しますが、小さいサイズで表示します。

00:21:35.000 --> 00:21:46.000
これを助けるために、画像とディスプレイに関するシステムの知識を使用して、画像のサイズをより効率的に変更し、メモリを節約する新しいUIImage APIがあります。

00:21:46.000 --> 00:21:58.000
これらのコレクションビューと画像の改善の詳細、それらを活用する方法に関する情報、およびその他の優れたパフォーマンスのヒントについては、「超高速リストとコレクションビューを作成する」をご覧ください。

00:21:58.000 --> 00:22:03.000
Swiftは、非同期コードの作成をこれまで以上に簡単にする新機能を導入しました。

00:22:03.000 --> 00:22:14.000
ほとんどのUIKit APIはメインUIキューで呼び出す必要があり、コンパイル時にこれが初めて強制されるように、これらのAPIをメインアクターとして注釈付けしました。

00:22:14.000 --> 00:22:25.000
新しいUIImage準備機能のような他の分野では、UIKitが新しい非同期Swift言語機能で簡単かつ安全に使用できるようにAPIを微調整しました。

00:22:25.000 --> 00:22:34.000
「Meet async/await in Swift」と「Meet AsyncSequence」をチェックして、非同期コードを開発するこの新しい方法に進んでください。

00:22:34.000 --> 00:22:37.000
さて、セキュリティとプライバシー。

00:22:37.000 --> 00:22:45.000
私たちは、システムがどのインターフェイスが実際に相互作用しているかを検証できるように、iOS 15にいくつかの新しい技術を構築しました。

00:22:45.000 --> 00:22:53.000
私たちはこれをいくつかの場所でUIKitに統合しました。ここでは、あなたのアプリに影響を与える可能性のある3つについて話します。

00:22:53.000 --> 00:22:56.000
まず、場所ボタン。

00:22:56.000 --> 00:23:06.000
OS 15は、アプリがデバイスの現在の場所へのケースバイケースのワンタイムアクセスを許可するボタンを埋め込むことを可能にする新しいAPIを導入しました。

00:23:06.000 --> 00:23:12.000
彼らは、多くのアラートやプロンプトなしでタップされたときにのみ、これを行います。

00:23:12.000 --> 00:23:22.000
APIは柔軟性があるので、すべてのアプリの外観に合わせることができますが、舞台裏では、ボタンが常に明確で読みやすいか、機能しないことを保証します。

00:23:22.000 --> 00:23:34.000
これを任意のアプリに埋め込む方法を議論するビデオ全体があります。「場所のボタンに会う」私はあなたがiOS 14で導入されたこのバナーに気づいたと確信しています。

00:23:34.000 --> 00:23:41.000
アプリが別のアプリのペーストボードにコピーされたデータにアクセスすると表示されます。

00:23:41.000 --> 00:23:52.000
iOS 15では、システムが標準のシステムペーストインターフェイスとの意図的な相互作用の後にデータがアクセスされたことを確認できるときはいつでもバナーを排除しています。

00:23:52.000 --> 00:23:59.000
たとえば、編集メニューの貼り付けボタンをタップしたり、ハードウェアキーボードのCmd-Vをタップしたりします。

00:23:59.000 --> 00:24:04.000
また、いくつかの新しい標準の貼り付けメニュー項目を提供するためにAPIを追加しました。

00:24:04.000 --> 00:24:08.000
これらを使用すると、通知バナーも表示されません。

00:24:08.000 --> 00:24:16.000
「貼り付け」、「貼り付けと移動」、「貼り付けと検索」、「貼り付けと一致のスタイル」を指定する新しい方法を提供します。

00:24:16.000 --> 00:24:26.000
これらのそれぞれについて、UIMenuControllerとUICommandで使用するための標準のUIResponderセレクタと、UIActionで使用するための新しい識別子があります。

00:24:26.000 --> 00:24:33.000
時々、アプリはペーストボード上にあるものについてのより多くの情報を求めていますが、完全なアクセスを必要としません。

00:24:33.000 --> 00:24:42.000
iOS 14では、アプリがペーストボードに番号、可能性のあるWeb URL、または可能性のあるWeb検索用語があるかどうかを確認するために使用できるAPIを導入しました。

00:24:42.000 --> 00:24:45.000
そして、私たちは電卓とSafariでこれらを自分たちで使います。

00:24:45.000 --> 00:24:52.000
iOS 15では、このAPIは、すべての標準データ検出器タイプをカバーするように大幅に拡張されました。

00:24:52.000 --> 00:24:57.000
データ自体へのアクセスを許可しないため、これらのいずれも通知を表示しません。

00:24:57.000 --> 00:25:13.000
テキストを自分で解析することなくデータ値を取得するAPIもありますが、これらのAPIが標準の貼り付けインターフェイスの使用後以外の任意のタイミングで使用される場合、システムには貼り付け通知が表示されます。

00:25:13.000 --> 00:25:22.000
私たちの最後のプライバシー強化は、iOS 14.5で新しく、ロケーションとペーストインターフェイスを強化する技術の初期バージョンに基づいて構築されました。

00:25:22.000 --> 00:25:26.000
UIEventAttributionは、WebKitチームと協力して開発されました。

00:25:26.000 --> 00:25:31.000
WebKitのプライベートクリック測定機能は、WebからWebへのクリック測定を提供します。

00:25:31.000 --> 00:25:37.000
UIEventAttributionは、PCMをUIKitにもたらし、App-to-Webクリック測定を提供します。

00:25:37.000 --> 00:25:41.000
これは、広告のクリックとタップのプライバシー保護測定を意味します。

00:25:41.000 --> 00:25:53.000
使いやすいです - UIEventAttributionViewsで広告をカバーし、広告タップに応答して開いたURLとともにUIEventAttributionオブジェクトを渡すだけです。

00:25:53.000 --> 00:25:58.000
これの詳細については、「プライバシーを保護する広告アトリビューションを満たす」ビデオを参照してください。

00:25:58.000 --> 00:26:04.000
「プライベートクリック測定の紹介」というタイトルの素晴らしいWebKit.orgブログ記事もあります。

00:26:04.000 --> 00:26:09.000
まあ、それはかなりの旋風でした、そして私たちは新しいものをすべてカバーさえしませんでした。

00:26:09.000 --> 00:26:11.000
次は何ですか?

00:26:11.000 --> 00:26:16.000
iOS 15 SDKを使ってアプリをコンパイルしてください。

00:26:16.000 --> 00:26:21.000
iPhoneのドラッグアンドドロップや強化されたシステムカラーなどの新機能をテストしてください。

00:26:21.000 --> 00:26:28.000
新しいボタン、バー、リスト、シンボルを備えた新しいiOS 15の外観を採用してください。

00:26:28.000 --> 00:26:34.000
より良いマルチタスク、キーボード、トラックパッドのサポートのために、私たちの新しいiPad機能を採用してください。

00:26:34.000 --> 00:26:42.000
そして、新しいUIKit APIを使用して、ユーザーのプライバシーを尊重し、さらに優れた、さらに高速なアプリをさらに簡単に作成します。

00:26:42.000 --> 23:59:59.000
ありがとうございます。

