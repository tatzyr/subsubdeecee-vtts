WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
ハン・ミン・オン:こんにちは、私の名前はハン・ミン・オンです。

00:00:12.000 --> 00:00:15.000
私はXcode Debugger UIチームのエンジニアです。

00:00:15.000 --> 00:00:23.000
今日は、デバッグの生産性を高めるブレークポイントに対するチームの改善について話したいと思います。

00:00:23.000 --> 00:00:27.000
全員を同じページに乗せるために、いくつかのブレークポイントの基本から始めましょう。

00:00:27.000 --> 00:00:38.000
プログラムでバグに遭遇した場合、それはあなたの期待に実行されていないことを意味し、現実が分岐した理由をデバッガで確認する必要があります。

00:00:38.000 --> 00:00:42.000
この時点で、あなたが行う2つの一般的な活動があります。

00:00:42.000 --> 00:00:47.000
1つは、状況をさらに理解するためにプロセス状態を検査することです。

00:00:47.000 --> 00:00:52.000
第二に、プロセスの実行を踏むことで論理を確認します。

00:00:52.000 --> 00:00:59.000
どちらのアクティビティでも、理想的にはバグが発生する直前に一時停止する必要があります。

00:00:59.000 --> 00:01:04.000
そして、プロセスを一時停止する最善の方法は、ブレークポイントを使用することです。

00:01:04.000 --> 00:01:08.000
Xcodeで作成できる3つの一般的なブレークポイントについて説明します。

00:01:08.000 --> 00:01:13.000
1つ目は、ソースファイルのブレークポイントです。

00:01:13.000 --> 00:01:16.000
これらは1つのファイルに設定されているブレークポイントです。

00:01:16.000 --> 00:01:19.000
最も一般的なタイプは、行ブレークポイントです。

00:01:19.000 --> 00:01:26.000
これはブレークポイントの主力であり、検査したいコード行で一時停止するのに最適です。

00:01:26.000 --> 00:01:33.000
作成する最速の方法は、一時停止したい行のすぐ隣にある溝をクリックするだけです。

00:01:33.000 --> 00:01:43.000
この時点で、関数 convertedToVolume のロジックを踏んで確認したいとします。

00:01:43.000 --> 00:01:48.000
しかし、私が足を踏み入れるとき、私は実際に別の表現に足を踏み入れています。

00:01:48.000 --> 00:01:55.000
コンパイラは、justedDensityを最初に実行する必要があると正しく判断しました。

00:01:55.000 --> 00:02:07.000
もちろん、私は外に出て機能に戻ることができますが、何度も繰り返さなければならないとき、これは面倒になる可能性があります。

00:02:07.000 --> 00:02:14.000
私たちがここで見ているのは、時にはラインブレークポイントが十分に粒状ではないということです。

00:02:14.000 --> 00:02:21.000
これは、コンパイラがLLDBが停止するための複数の場所を生成したためです。

00:02:21.000 --> 00:02:27.000
私たちが本当に欲しいのは、変換されたToVolumeが実行される直前に一時停止することです。

00:02:27.000 --> 00:02:32.000
Xcode 13では、列ブレークポイントを導入しています。

00:02:32.000 --> 00:02:40.000
これにより、行に沿って特定の式で一時停止する必要があるときに、行のブレークポイントの欠点を回避できます。

00:02:40.000 --> 00:02:50.000
convertedToVolumeで列ブレークポイントを設定するには、Commandキーを押しながら式をクリックしてアクションポップオーバーを表示し、列ブレークポイントの設定を選択します。

00:02:50.000 --> 00:02:57.000
ラインブレークポイントと同様に、アイコンをクリックして無効または有効にすることができます。

00:02:57.000 --> 00:03:04.000
ブレークポイントを変更する必要がある場合は、ダブルクリックしてブレークポイントエディタを表示できます。

00:03:04.000 --> 00:03:10.000
行のブレークポイントはもう必要ないので、溝からドラッグして削除できます。

00:03:10.000 --> 00:03:16.000
あなたは私たちのコラムのブレークポイントに同じことをすることができますが、私はそれをそこに残すつもりです。

00:03:16.000 --> 00:03:23.000
コントロールまたはマウスの右クリックで、以前のアクションを含むコンテキストメニューが表示されます。

00:03:23.000 --> 00:03:33.000
ここでは、ブレークポイントナビゲーターで「公開」を選択します。サブタイトルが修正され、ブレークポイントの列が表示されます。

00:03:33.000 --> 00:03:42.000
続行すると、次のNutritionFactを反復し、新しく設定された列ブレークポイントにヒットします。

00:03:42.000 --> 00:03:48.000
ブレークポイントが当たると、XcodeはラインPCを使用して一時停止したラインを伝えます。

00:03:48.000 --> 00:03:52.000
それは線の上に薄緑色のハイライトを描きます。

00:03:52.000 --> 00:03:55.000
Xcode 11.4では、カラムPCを導入しました。

00:03:55.000 --> 00:04:01.000
列PCは、式の下に緑色のアンダースコアを描画することで、一時停止した列を表示します。

00:04:01.000 --> 00:04:07.000
そのため、デバッガが次に実行する式を知ることができます。

00:04:07.000 --> 00:04:15.000
convertedToVolumeの下で列PCを見ているので、私は自信を持って機能にワンステップを行うことができます。

00:04:15.000 --> 00:04:21.000
列ブレークポイントは、SwiftのクロージャやObjective-Cのブロックに特に役立ちます。

00:04:21.000 --> 00:04:28.000
時には、単一のSwift行は、この単一の行269のように、複数のクロージャを持つことができます。

00:04:28.000 --> 00:04:39.000
コンパイラがデバッグ条件でファイルをコンパイルすると、ソース行と列をコンパイルされたアドレスにマップするラインテーブルと呼ばれるマップが作成されます。

00:04:39.000 --> 00:04:46.000
したがって、この行のクロージャごとに、コンパイラはデバッガが一時停止に使用する行テーブルエントリを生成します。

00:04:46.000 --> 00:05:05.000
最後のクロージャの匿名パラメータ$0を検査したいと仮定すると、269で行ブレークポイントを設定できますが、一時停止後、最後のクロージャに到達するには、生成された行テーブルエントリのために多数のステップインとステップアウトを行う必要があります。

00:05:05.000 --> 00:05:18.000
Xcode 13では、最後の0ドルで列ブレークポイントを簡単に設定でき、一時停止すると、まさに私たちがなりたい場所になり、0ドルを心ゆくまで検査できることがわかります。

00:05:18.000 --> 00:05:25.000
うーん、朝食に香り高いドリアンスムージーを食べるのは、一日を始めるのに最適な方法です。

00:05:25.000 --> 00:05:27.000
おいしい！

00:05:27.000 --> 00:05:30.000
象徴的なブレークポイントに移りましょう。

00:05:30.000 --> 00:05:36.000
これらは、これらの関数が実行されたときにプロセスを一時停止する関数名のブレークポイントです。

00:05:36.000 --> 00:05:43.000
これらは、ソースファイルのブレークポイントが使用できない、または不便な状況で非常に役立ちます。

00:05:43.000 --> 00:05:49.000
たとえば、ソースファイルにアクセスできないため、デバッグ情報でコンパイルすることはできません。

00:05:49.000 --> 00:05:57.000
または、共通の関数を実装する多くのサブクラスがあり、それぞれにファイルブレークポイントを設定するのは面倒です。

00:05:57.000 --> 00:06:01.000
見てみましょう。 

00:06:01.000 --> 00:06:06.000
ブレークポイントナビゲーターの下部にある追加ボタンをクリックします。

00:06:06.000 --> 00:06:10.000
これにより、作成できるブレークポイントのリストが表示されます。

00:06:10.000 --> 00:06:19.000
シンボリックブレークポイントを選択すると、すぐにブレークポイントエディタが表示され、シンボル名を入力できます。

00:06:19.000 --> 00:06:25.000
いくつかのクラスで実装されているトグル関数で一時停止することに興味があるとします。

00:06:25.000 --> 00:06:29.000
それぞれを探す代わりに、ここでトグルを入力するだけです。

00:06:29.000 --> 00:06:40.000
しかし、一般的な単語である関数名には注意する必要があります。

00:06:40.000 --> 00:06:49.000
これは、LLDBがシステムライブラリを含む、プロセスでロードされるすべてのライブラリの名前と一致するためです。

00:06:49.000 --> 00:06:55.000
制限されていない場合、多くの解決されたブレークポイントの場所があり、時には数千の場所でさえあります。

00:06:55.000 --> 00:07:02.000
それらの多くが常に実行パスに打たれている場合、これは迷惑になる可能性があります。

00:07:02.000 --> 00:07:09.000
ありがたいことに、検索を特定のモジュールに制限することができます。

00:07:09.000 --> 00:07:15.000
モジュールは、メインバイナリを含む、実行中にロードできるバイナリまたはイメージです。

00:07:15.000 --> 00:07:22.000
ここでは、アプリのバイナリ名である「Fruta」と入力します。

00:07:22.000 --> 00:07:28.000
そして、私たちは3つの解決された場所を取得します。これははるかに管理しやすいです。

00:07:28.000 --> 00:07:33.000
スムージーを選んだので、お気に入りのボタンを切り替えましょう。

00:07:33.000 --> 00:07:37.000
設定されたばかりの象徴的なブレークポイントにヒットします。

00:07:37.000 --> 00:07:44.000
さて、シンボリックブレークポイントの場合、タイポグラフィエラーを起こすのはかなり簡単であることを知っています。

00:07:44.000 --> 00:07:51.000
そして、プログラムの実行中に、ブレークポイントがヒットせず、頭を悩ませています。

00:07:51.000 --> 00:07:59.000
convertToMassと呼ばれるものを作ってみましょう。

00:07:59.000 --> 00:08:11.000
Xcode 13の新機能、ブレークポイントがLLDBによってどの場所にも解決されない場合、Xcodeは破線アイコンを表示します。

00:08:11.000 --> 00:08:17.000
ブレークポイントが解決されない理由は無数にありますが、いくつかの一般的な説明があります。

00:08:17.000 --> 00:08:23.000
未解決のブレークポイントアイコンにカーソルを合わせると、役立つツールチップがあります。

00:08:23.000 --> 00:08:26.000
最初のいくつかの理由は、ブレークポイントの種類に関連しています。

00:08:26.000 --> 00:08:34.000
したがって、シンボリックブレークポイントの場合、名前を正しく綴るには、シンボルはライブラリに存在する必要があります。

00:08:34.000 --> 00:08:40.000
次の理由は、より一般的です。ブレークポイントのライブラリを読み込む必要があります。

00:08:40.000 --> 00:08:51.000
ライブラリは、ボタンをクリックするなどのユーザーアクションを実行した後にのみロードされ、その時点でLLDBは自動的にブレークポイントを解決します。

00:08:51.000 --> 00:08:54.000
この場合、スペルが悪いのではないかと思います。

00:08:54.000 --> 00:08:56.000
考えてみましょう。

00:08:56.000 --> 00:09:04.000
1つの方法は、検索ナビゲーターを使用して「変換」を検索することです。

00:09:04.000 --> 00:09:10.000
ご覧のとおり、かなりの数の結果があり、それらを視覚的に分析するには時間がかかります。

00:09:10.000 --> 00:09:15.000
代わりに、LLDBを通じて別のトリックを使いましょう。

00:09:15.000 --> 00:09:37.000
Xcodeコンソールでは、モジュールを意味する「image」と入力します。「lookup -r」は正規表現、「n」は名前、「convert」は「convert」で、検索を制限するためにモジュール名「Fruta」を指定します。

00:09:37.000 --> 00:09:42.000
一致は4つしかなく、確かに関数名のスペルを間違えていることがわかります。

00:09:42.000 --> 00:09:46.000
それは「convertedToMass」であるべきです。

00:09:46.000 --> 00:09:57.000
コピーしてブレークポイントエディタに貼り付けましょう。

00:09:57.000 --> 00:10:06.000
そして今回、LLDBはそれをうまく解決し、私たちに場所番号1を与えました。

00:10:06.000 --> 00:10:14.000
他のLLDBのヒントやコツに興味がある場合は、前回のプレゼンテーション「LLDB: Beyond 'po'」をご覧ください。

00:10:14.000 --> 00:10:22.000
別のファイルを持ち出しましょう。

00:10:22.000 --> 00:10:27.000
未解決のブレークポイントは、ソースファイルのブレークポイントでも見ることができます。

00:10:27.000 --> 00:10:30.000
彼らに関連する理由は2つあります。

00:10:30.000 --> 00:10:34.000
まず、ブレークポイントの行をコンパイルする必要があります。

00:10:34.000 --> 00:10:41.000
この場合、23行はコンパイラ条件の他の部分にあるため、コンパイルされませんでした。

00:10:41.000 --> 00:10:45.000
また、コンパイラはモジュールのデバッグ情報を生成している必要があります。

00:10:45.000 --> 00:10:49.000
そうでない場合は、ビルド設定を確認する必要があります。

00:10:49.000 --> 00:10:52.000
次はランタイム問題のブレークポイントです。

00:10:52.000 --> 00:10:59.000
ランタイムの問題は、バックグラウンドスレッドのUI状態を変更するなど、実行時に発生する問題です。

00:10:59.000 --> 00:11:11.000
クラッシュほど深刻ではなく、デフォルトでは、Xcodeはプロセスを一時停止しません。これは、別のバグに焦点を当てているときに破壊的すぎる可能性があるためです。

00:11:11.000 --> 00:11:19.000
代わりに、ランタイムの問題が発生すると、Xcodeはバックトレースを記録し、イシューナビゲーターに表示します。

00:11:19.000 --> 00:11:27.000
しかし、この問題は過去に起こったため、現在のプロセス状態を検査しても意味がありません。

00:11:27.000 --> 00:11:34.000
だから時々、あなたはそれが起こったときにそれを捕まえたいと思う。

00:11:34.000 --> 00:11:41.000
ランタイムの問題のブレークポイントがあると、デバッガで一時停止し、そこでプロセスを突くことができます。

00:11:41.000 --> 00:11:44.000
ランタイム問題のブレークポイントにはさまざまな種類があります。

00:11:44.000 --> 00:11:51.000
タイプポップアップを使用すると、特定のタイプを簡単に選択できます。

00:11:51.000 --> 00:11:58.000
それらのいくつかについては、スキームエディタの診断タブで対応する機能を有効にする必要があることを覚えておいてください。

00:11:58.000 --> 00:12:05.000
Go Toボタンをクリックするだけでそこに行くことができます。

00:12:05.000 --> 00:12:12.000
メインスレッドチェッカーのランタイム問題のブレークポイントを利用したいので、メインスレッドチェッカーを有効にしたい。

00:12:12.000 --> 00:12:17.000
私のセッションで、Xcode 13のブレークポイントの改善点が示されたことを願っています。

00:12:17.000 --> 00:12:24.000
ブレークポイントはデバッグ能力を大幅に向上させることができ、間違いなくあなたのレパートリーの一部であるべきです。

00:12:24.000 --> 00:12:27.000
ありがとう、WWDCの残りの部分を楽しんでください。

00:12:27.000 --> 23:59:59.000
♪

