WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
マリン・ユーバンクス:みなさん、こんにちは。

00:00:10.000 --> 00:00:17.000
ClassKitチームのエンジニアであるMarinです。ファイルベースのアプリ用にClassKitに追加した新しいAPIをお見せできることを嬉しく思います。

00:00:17.000 --> 00:00:21.000
今日は、スクールワークと、それがClassKitでどのように使用されているかについて説明します。

00:00:21.000 --> 00:00:27.000
次に、ファイルベースのアプリ用の新しいAPIの詳細なレビューを行います。

00:00:27.000 --> 00:00:31.000
次に、サンプルの実装を順を追って説明します。

00:00:31.000 --> 00:00:37.000
そして最後に、ClassKitの開発者モードを使用して新しいAPIをテストする方法を紹介します。

00:00:37.000 --> 00:00:42.000
まず、スクールワークの概要を簡単に説明します。

00:00:42.000 --> 00:00:50.000
スクールワークは、教師が生徒がアプリを使って学習する課題を共有できる教育アプリです。

00:00:50.000 --> 00:01:05.000
アプリがClassKitフレームワークを採用し、CLSContextsと呼ばれる割り当て可能なコンテンツをアドバタイズし、アクティビティの進捗データの報告を開始すると、教師はそのコンテンツを割り当て、アプリによって報告された進捗データを表示できるようになります。

00:01:05.000 --> 00:01:11.000
アプリがClassKit対応の場合、教師はカリキュラムでアプリを使用する可能性が高くなります。

00:01:11.000 --> 00:01:23.000
そして、まもなく、スクールワークはさらに使いやすくなり、教師のワークフローを合理化し、指導に情報を提供し、アプリから教師にデータを提供するための多くの新機能が追加されます。

00:01:23.000 --> 00:01:30.000
スクールワークに精通したので、アプリのデータがスクールワークにどのように流れ込むかを見てみましょう。

00:01:30.000 --> 00:01:34.000
アプリはClassKitフレームワークにデータを送信します。

00:01:34.000 --> 00:01:37.000
ClassKitは、そのデータをスクールワークアプリに表示します。

00:01:37.000 --> 00:01:41.000
その後、データは生徒と教師に提示されます。

00:01:41.000 --> 00:01:45.000
これは、ClassKit対応アプリのいくつかの割り当てを含むスクールワークのビューです。

00:01:45.000 --> 00:01:55.000
課題の1つをタップすると、ClassKitを採用し、学生の進捗データを報告したアプリの例を見ることができます。

00:01:55.000 --> 00:01:59.000
このユースケースの詳細については、少し後で説明します。

00:01:59.000 --> 00:02:06.000
スクールワークを確認したので、新しいファイルベースの進捗APIについて話しましょう。

00:02:06.000 --> 00:02:11.000
App Storeには19万以上の教育アプリがあります。

00:02:11.000 --> 00:02:17.000
そして、多くの人がClassKitのコンテキストベースのAPIを採用していますが、全員が持っているわけではありません。

00:02:17.000 --> 00:02:27.000
私たちは、特にファイルと対話するアプリと、ClassKitをどのように採用したいかについてフィードバックを受けましたが、コンテキストはあなたのユースケースにはあまり合いませんでした。

00:02:27.000 --> 00:02:36.000
さて、あなたのアプリがファイルベースであるため、ClassKitの採用を保留しているなら、私たちはあなたのためだけに新しいAPIを追加しました。

00:02:36.000 --> 00:02:41.000
この新しいAPIは、ファイルと対話するすべてのアプリ用です。

00:02:41.000 --> 00:02:48.000
ファイルを編集したり、ファイルを開いて表示したりできるアプリがあれば、ファイルベースのアプリの新しいAPIが気に入るはずです。

00:02:48.000 --> 00:02:57.000
この新しいAPIを採用することで、スクールワークで割り当てられたときに、アプリ内で使用されるファイルの生徒の進捗データを報告することができます。

00:02:57.000 --> 00:03:06.000
教師がClassKit対応アプリからコンテンツを割り当てると、追加の洞察が提供されます。これは彼らにとって勝利であり、アプリの素晴らしい新しいユースケースです。

00:03:06.000 --> 00:03:11.000
注意すべき重要なことの1つは、アプリがOpen in Placeを採用しなければならないということです。

00:03:11.000 --> 00:03:18.000
アプリがOpen in Placeをサポートしている場合、生徒と教師の間で共有された正確なファイルは、コピーではなくアプリで開きます。

00:03:18.000 --> 00:03:22.000
これは、ファイルに進捗データを追加するための新しいAPIです。

00:03:22.000 --> 00:03:25.000
それはfetchActivityと呼ばれ、CLSDataStoreにあります。

00:03:25.000 --> 00:03:31.000
ここに示されているこのAPIの非同期と非同期の両方の代替バージョンがあります。

00:03:31.000 --> 00:03:37.000
ファイルのファイルURLをこのAPIに渡すと、CLSActivityが返されます。

00:03:37.000 --> 00:03:41.000
CLSActivityを取得したら、進捗データを追加できます。

00:03:41.000 --> 00:03:45.000
では、アプリが送信できる進捗データの種類を見てみましょう。

00:03:45.000 --> 00:03:52.000
すでにClassKitを採用している場合、これは利用可能な現在の進捗データ型のレビューになります。

00:03:52.000 --> 00:04:01.000
ClassKitを初めて使用する場合、これらのクラスは現在CLSContextsで使用されていますが、同じデータ型をファイルに適用することもできます。

00:04:01.000 --> 00:04:04.000
ここにはCLSActivityがあります。

00:04:04.000 --> 00:04:09.000
これは、特定のファイルに関連付けられているすべての進捗データをカプセル化するために使用されるクラスです。

00:04:09.000 --> 00:04:14.000
CLSActivityに追加できるデータの種類がいくつかあります。

00:04:14.000 --> 00:04:15.000
まず、期間があります。

00:04:15.000 --> 00:04:20.000
これは、学生が割り当てられたファイルの作業に費やした時間です。

00:04:20.000 --> 00:04:23.000
時間はすべてのファイルタイプで報告する必要があります。

00:04:23.000 --> 00:04:30.000
このAPIを使用するには、CLSActivityに存在する開始メソッドと停止メソッドを呼び出すだけです。

00:04:30.000 --> 00:04:32.000
次に進歩があります。

00:04:32.000 --> 00:04:35.000
これは0と1の間の値です。

00:04:35.000 --> 00:04:40.000
進捗状況は通常、ファイルを通じて学生の進捗状況を決定できる場合に使用されます。

00:04:40.000 --> 00:04:46.000
たとえば、オーディオまたはビデオファイルがあり、学生が50%の方法を得たとします。

00:04:46.000 --> 00:04:50.000
再生の進行状況を0.5と報告します。

00:04:50.000 --> 00:04:57.000
進捗を追加するには、進捗プロパティを直接設定するか、開始から終了までの範囲を追加できます。

00:04:57.000 --> 00:05:02.000
重複する範囲または同じ範囲を複数回追加できます。

00:05:02.000 --> 00:05:08.000
正しい進捗状況が生徒と教師に報告されるように、ロジックを処理します。

00:05:08.000 --> 00:05:15.000
また、編集できるファイルがある場合に便利なprimaryActivityItemもあります。

00:05:15.000 --> 00:05:24.000
primaryActivityItemを設定すると、このデータが生徒と教師に強調表示され、スクールワークアプリのUIの主要部分に表示されます。

00:05:24.000 --> 00:05:28.000
追加のActivityItemsプロパティもあります。

00:05:28.000 --> 00:05:34.000
これは、追加のメタデータを追加するのに役立つCLSActivityItemsの配列です。

00:05:34.000 --> 00:05:41.000
primaryActivityItemを追加するには、CLSActivityにprimaryActivityItemプロパティを設定します。

00:05:41.000 --> 00:05:53.000
additionalActivityItemを追加するには、CLSActivityのaddAdditionalActivityItem関数を呼び出すと、追加するactivityItemを渡します。

00:05:53.000 --> 00:06:02.000
primaryActivityItem プロパティと additionalActivityItem プロパティには、CLSActivityItem の 3 つのサブクラスのうちの 1 つへの参照があります。

00:06:02.000 --> 00:06:08.000
次のサブクラスのいずれかを追加できます。まず、CLSBinaryItemがあります。

00:06:08.000 --> 00:06:11.000
これは、任意のバイナリデータ型を表すために使用されます。

00:06:11.000 --> 00:06:15.000
これの使い方の例は、クイズの質問かもしれません。

00:06:15.000 --> 00:06:18.000
生徒が正しかったか間違っていたとしましょう。

00:06:18.000 --> 00:06:21.000
または、CLSQuantityItemを追加することもできます。

00:06:21.000 --> 00:06:24.000
これは、一般的な数値に使用されます。

00:06:24.000 --> 00:06:31.000
これは、ドキュメントのページ数、スライド数、または合計単語数に使用できます。

00:06:31.000 --> 00:06:33.000
最後はCLSScoreItemです。

00:06:33.000 --> 00:06:38.000
このクラスは、合計の一部として表されるすべてのものに使用されます。

00:06:38.000 --> 00:06:43.000
例えば、クイズのスコア。ユーザーは10点満点中8点を取った。

00:06:43.000 --> 00:06:51.000
これらのサブクラスの任意の組み合わせをアクティビティ、そのうちの1つ、またはすべてに追加できます。

00:06:51.000 --> 00:07:00.000
追加できるデータの種類がわかったので、このAPIをアプリに採用するコードサンプルを見てみましょう。

00:07:00.000 --> 00:07:04.000
ここには、テキストファイルを開いて編集できるサンプルアプリがあります。

00:07:04.000 --> 00:07:08.000
生徒がテキストファイルを開いたら、タイマーを起動します。

00:07:08.000 --> 00:07:11.000
学生は通過し、ファイルを編集します。

00:07:11.000 --> 00:07:17.000
生徒がファイルを閉じようとしているとき、私は合計単語数を記録し、タイマーを停止します。

00:07:17.000 --> 00:07:25.000
ファイルを開き、学生がそれとやり取りを開始するときに呼び出されるコードの一部に移動しましょう。

00:07:25.000 --> 00:07:27.000
私はopenFile関数を持っています。

00:07:27.000 --> 00:07:29.000
これは私が時間を追跡し始めるところです。

00:07:29.000 --> 00:07:40.000
アプリでは、ファイルを開くためにすでに持っているコードの一部に移動し、ここでタイマーを開始するために少しコードを追加します。 

00:07:40.000 --> 00:07:45.000
まず、ファイルURLのCLSアクティビティを取得します。

00:07:45.000 --> 00:07:55.000
アクティビティを取得したら、開始を呼び出すと時間の追跡を開始し、その後、CLSDataStoreの保存を呼び出すと、行った変更をコミットします。

00:07:55.000 --> 00:08:01.000
先に進んで、実装をテストするときに後で戻ってくるブレークポイントをここに追加しましょう。

00:08:01.000 --> 00:08:06.000
また、生徒が終わったらタイマーを停止し、primaryActivityItemを追加したいです。

00:08:06.000 --> 00:08:11.000
それでは、学生がファイルを閉じようとしているときに呼び出される私のコードの一部に移動しましょう。

00:08:11.000 --> 00:08:25.000
ここでは、CLSDataStore.shared. fetchActivityを呼び出し、すでに存在する場合はprimaryActivityItemをつかんで更新するか、まだ存在しない場合は新しいCLSQuantityItemを作成します。

00:08:25.000 --> 00:08:33.000
CLSQuantityItemを取得したら、その値を更新し、アクティビティのprimaryActivityItemとして設定できます。

00:08:33.000 --> 00:08:35.000
アクティビティに進捗状況を追加できます。

00:08:35.000 --> 00:08:38.000
そして最後に、タイマーを止めるためにストップを呼びます。

00:08:38.000 --> 00:08:41.000
その後、必ずセーブに電話します。

00:08:41.000 --> 00:08:48.000
CLSDataStoreで保存を呼び出しない場合、先ほど行った変更は永続しません。

00:08:48.000 --> 00:08:50.000
ここにもブレークポイントを追加します。

00:08:50.000 --> 00:08:55.000
これを使用して、学生の進捗データの提出をデバッグするのに役立ちます。

00:08:55.000 --> 00:09:05.000
サンプルアプリにAPIを採用したので、スクールワークと開発者モードを使用して実装をテストする方法を見てみましょう。

00:09:05.000 --> 00:09:10.000
まず、ClassKit環境の資格を開発に設定する必要があります。

00:09:10.000 --> 00:09:13.000
これはXcodeの内部にあります。

00:09:13.000 --> 00:09:15.000
デフォルト値はプロダクションです。

00:09:15.000 --> 00:09:22.000
開発者モードとスクールワークを使用してテストできるように、開発資格の値を変更します。

00:09:22.000 --> 00:09:26.000
次回コードを実行すると、開発者モードで実行されます。

00:09:26.000 --> 00:09:32.000
テストが終わったら、これを本番に戻すことが重要です。

00:09:32.000 --> 00:09:36.000
次に、iPadで開発者モードをオンにする必要があります。

00:09:36.000 --> 00:09:42.000
設定アプリを開き、開発者&gt; ClassKit APIに移動します。

00:09:42.000 --> 00:09:47.000
スクールワークで私たちの役割を教師に変更するために教師を選択します。

00:09:47.000 --> 00:09:50.000
では、スクールワークアプリを開きます。

00:09:50.000 --> 00:09:54.000
スクールワークが始まると、教師のUIが表示されます。

00:09:54.000 --> 00:10:06.000
また、右上隅の[割り当ての作成]ボタンをタップすると、[ファイル]ボタンをタップして、アプリがサポートするファイルを追加する割り当てを作成できます。

00:10:06.000 --> 00:10:13.000
次に、追加するファイルを選択し、クラスと課題のタイトルを入力します。

00:10:13.000 --> 00:10:18.000
必要に応じて、オプションで指導テキストを追加することもできます。

00:10:18.000 --> 00:10:24.000
そして、右上隅のボタンをタップして、この課題をクラスに公開します。

00:10:24.000 --> 00:10:33.000
課題を作成したので、学生としての役割を切り替えて、進捗データの提出の実装をテストすることができます。

00:10:33.000 --> 00:10:37.000
では、設定アプリに戻りましょう。

00:10:37.000 --> 00:10:44.000
[設定] で、[開発者] &gt; [ClassKit API] を選択し、[学生] をタップします。

00:10:44.000 --> 00:10:48.000
これは今、学業における私の役割を学生として行動するように変えました。

00:10:48.000 --> 00:10:51.000
スクールワークアプリに戻ります。

00:10:51.000 --> 00:11:00.000
UIの右上隅に課題の作成ボタンがなくなったため、学生としてログインしていることがわかります。

00:11:00.000 --> 00:11:08.000
画面の中央に、作成したばかりの課題が表示され、それをタップすると、課題の詳細が表示されます。

00:11:08.000 --> 00:11:15.000
ファイルアイコンをタップすると、進行状況データの報告を開始するアプリにディープリンクされます。

00:11:15.000 --> 00:11:20.000
ファイルが私のアプリで開き、私のコードはタイマーを開始するために呼び出されます。

00:11:20.000 --> 00:11:25.000
ここでは、タイマーを開始するためにセーブを呼び出した後、ブレークポイントがヒットするのを見ることができます。

00:11:25.000 --> 00:11:37.000
そして、Playを押してからアプリに戻ると、Student Progressバナーが上からドロップダウンします。これは、保存が成功し、タイマーが開始されたことを示しています。

00:11:37.000 --> 00:11:42.000
その後、エッセイを完成させるためにテキストの束を追加します。

00:11:42.000 --> 00:11:47.000
私のサンプルアプリには、ファイルの編集が終わったら生徒がタップする完了ボタンがあります。

00:11:47.000 --> 00:11:50.000
だから、左上隅にある完了ボタンをタップします。

00:11:50.000 --> 00:11:55.000
この時点で、私のcloseFile関数が呼び出されます。

00:11:55.000 --> 00:12:01.000
wordCountをprimaryActivityItemとして保存し、タイマーを停止するために、2番目のブレークポイントがヒットしたことがわかります。

00:12:01.000 --> 00:12:05.000
その後、プレイを押してスクールワークに戻ることができます。

00:12:05.000 --> 00:12:09.000
スクールワークでは、アプリから提出された進捗データを見ることができます。

00:12:09.000 --> 00:12:12.000
まず、私は時間を41分と見ています。

00:12:12.000 --> 00:12:18.000
これは、私が開始、停止、保存を正しく呼び出していることを検証します。

00:12:18.000 --> 00:12:22.000
次に、primaryActivityItemとして設定した単語数が表示されます。

00:12:22.000 --> 00:12:28.000
primaryActivityItemとして設定したCLSActivityItemサブクラスは、UIのメイン部分に表示されます。

00:12:28.000 --> 00:12:38.000
私の単語数が558単語として見ることができるという事実は、私のCLSQuantityItemの提出が正しく機能していることを検証します。

00:12:38.000 --> 00:12:44.000
さて、私たちの役割を教師に戻して、私のアプリによって提出されたデータが教師にどのように表示されるかを見てみましょう。

00:12:44.000 --> 00:12:50.000
画面の中央には、すべての学生の平均時間と平均単語数があることがわかります。

00:12:50.000 --> 00:12:55.000
その下には、課題のすべての学生の行があります。

00:12:55.000 --> 00:12:59.000
学生のセルには、ある学生が提出したデータが表示されます。

00:12:59.000 --> 00:13:05.000
また、学生セルをタップすると、アプリによって報告された進捗データを見ることができます。

00:13:05.000 --> 00:13:14.000
primaryActivityItem、時間、および可読性グレードレベルとしてリストされている1つの追加のActivityItemがあります。

00:13:14.000 --> 00:13:18.000
そして、それが開発者モードを使用してClassKitの統合をテストする方法です。

00:13:18.000 --> 00:13:22.000
資格を本番に戻すことを忘れないでください。

00:13:22.000 --> 00:13:23.000
まあ、いいね！

00:13:23.000 --> 00:13:28.000
今日は、新しいAPIから開発者モードでのテストまで、多くのことを取り上げました。

00:13:28.000 --> 00:13:39.000
教育のためにアプリを考慮しなくても、教育者がそうする可能性は十分にあり、ClassKitを有効にすると、アプリがカリキュラムに統合する準備が整うことを意味します。

00:13:39.000 --> 00:13:41.000
だから、必ず私たちのAPIを採用してください。

00:13:41.000 --> 00:13:42.000
そして、ありがとう。

00:13:42.000 --> 00:13:48.000
フィードバックレポートをありがとうございます。その他のフィードバックは提出してください。

00:13:48.000 --> 00:13:51.000
私たちはあなたからの連絡が大好きです。

00:13:51.000 --> 00:14:01.000
また、コンテキストベースのAPIについて詳しく知りたい場合は、「ClassKitの新機能」に関する以前のセッションと、2018年の講演「ClassKitの紹介」をご覧ください。

00:14:01.000 --> 00:14:04.000
ありがとう、そして素晴らしいWWDCを!

00:14:04.000 --> 23:59:59.000
♪

