WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
こんにちは。

00:00:10.000 --> 00:00:13.000
iOSのMeet Safari Web Extensionsへようこそ。

00:00:13.000 --> 00:00:16.000
私はサファリチームのエンジニア、デビッド・ケサダです。

00:00:16.000 --> 00:00:22.000
そして今日は、iOS 15、Safari Web Extensionsのエキサイティングな新機能を歩きます。

00:00:22.000 --> 00:00:31.000
Web拡張機能は、ユーザーが膨大な数の方法でブラウジングを拡張およびカスタマイズできる強力なタイプのブラウザ拡張機能です。

00:00:31.000 --> 00:00:36.000
それらは、HTML、CSS、JavaScriptの標準的なウェブ技術で構築されています。

00:00:36.000 --> 00:00:48.000
また、WebExtension APIはしばらくの間、すべての主要なデスクトップブラウザで利用可能でした。つまり、ブラウザ拡張機能を一度作成して、すべてのブラウザに展開して、非常に多くのユーザーにリーチできます。

00:00:48.000 --> 00:00:57.000
しかし今、私はWeb拡張機能がiOS 15に登場し、これまで以上に多くのユーザーのためのブラウザ拡張機能を構築できることを伝えることに興奮しています。

00:00:57.000 --> 00:01:02.000
iOSで実行されているSafari Web Extensionのデモをお見せしたいと思います。

00:01:02.000 --> 00:01:05.000
Sea Creatorという拡張機能を披露します。

00:01:05.000 --> 00:01:12.000
この拡張機能はもともとMacのブラウザ用に書かれていましたが、私はそれをiOSにもたらすことに取り組んできました。

00:01:12.000 --> 00:01:22.000
この拡張機能は、海の生き物に関する楽しい事実を示し、海の生き物の名前を絵文字に置き換えることで、海の生物についてもっと読むのを楽しくします。

00:01:22.000 --> 00:01:26.000
iPadでこれを見てみましょう。 見てみましょう。

00:01:26.000 --> 00:01:32.000
今、Sea Creatorをインストールしたばかりで、魚に関する記事を読んでいるSafariを開きました。

00:01:32.000 --> 00:01:38.000
絵文字でこのページを盛り上げることができるように、ここでSea Creatorを使い始めたいと思っています。

00:01:38.000 --> 00:01:47.000
そこで、アクションメニューを開き、新しい拡張機能リストを掘り下げます。これにより、Sea Creatorを含む利用可能なすべての拡張機能が表示されます。

00:01:47.000 --> 00:01:49.000
だから私はそれをオンにします。

00:01:49.000 --> 00:01:58.000
さて、Sea Creatorのもう1つの機能は、新しいタブを開くたびに使用するカスタムスタートページでSafariの前面と中央に置くことができることです。

00:01:58.000 --> 00:02:02.000
もう少ししたら調べてみます。

00:02:02.000 --> 00:02:08.000
そして今、私はシークリエーターをオンにしたので、それは私が使用する準備ができているアクションメニューのすぐそこにあります。

00:02:08.000 --> 00:02:14.000
そして、私がそれを行うとき、Safariは私がSea Creatorにこのサイトへのフルアクセスを与えても大丈夫かどうかを私に尋ねます。

00:02:14.000 --> 00:02:26.000
同じWeb拡張機能の許可モデルをMacのSafariからiOSに持ち込みました。つまり、私はユーザーとして、ブラウジング拡張機能のどれだけにアクセスできるかを完全に制御できます。

00:02:26.000 --> 00:02:28.000
これについては後で詳しく説明します。

00:02:28.000 --> 00:02:31.000
しかし、今、私はシークリエイターの実行を許可します。

00:02:31.000 --> 00:02:37.000
そして、ちょうどそのように、それはページ上のこれらすべての魚の絵文字を交換しました、それはちょうど私がそれを読むのが好きな方法です。

00:02:37.000 --> 00:02:43.000
また、このポップアップが開き、これまでに置き換えた単語の合計が表示されます。

00:02:43.000 --> 00:02:45.000
しかし、この1ページだけではありません。

00:02:45.000 --> 00:02:50.000
私はSea Creatorにこのウェブサイト全体で作業する許可を与えました。

00:02:50.000 --> 00:02:57.000
だから、他のページに移動すると、Sea Creatorはまだ私のために働いていて、ここでも絵文字をくれます。

00:02:57.000 --> 00:03:02.000
使い始めたら、わざわざエクステンションをもう一度開く必要はありません。

00:03:02.000 --> 00:03:05.000
もちろん、Sea Creatorには先に述べたもう1つの機能があります。

00:03:05.000 --> 00:03:20.000
より多くのブラウジングを行うために新しいタブを開くと、今日のヒトデに関する今日の事実でSea Creatorのこの大胆な新しいタブページに迎えられます-そしてもう一度、そのカウンターは、Sea Creatorがこれまでに私に与えてくれた絵文字の数を示しています。

00:03:20.000 --> 00:03:22.000
これはかなりクールです。

00:03:22.000 --> 00:03:26.000
だから、それはiOSでうまく機能しているSea Creatorを簡単に見ることでした。

00:03:26.000 --> 00:03:32.000
このセッションでは、あなたもiOS用のSafari Web拡張機能を作成する方法をお見せしたいと思います。

00:03:32.000 --> 00:03:40.000
そして、既存の拡張機能を取り、いくつかの変更を加えるだけでiOSに持ち込んだ方法の例として、Sea Creatorを使用します。

00:03:40.000 --> 00:03:44.000
しかし、以前にブラウザ拡張機能を書いたことがなくても心配しないでください。

00:03:44.000 --> 00:03:51.000
Web拡張機能の仕組みと、新しい拡張機能の作成を開始する方法の概要を説明します。

00:03:51.000 --> 00:04:00.000
その過程で、あなたの拡張機能が最高のものになるのを助けるために、いくつかのデバッグテクニックとベストプラクティスを取り上げます。

00:04:00.000 --> 00:04:08.000
そして、ユーザーのプライバシーと、それがSafari Web Extensionsの権限モデルとどのように関連しているかに関するいくつかの考えで締めくくります。

00:04:08.000 --> 00:04:15.000
だから、私たちの旅は、そもそもiOSで実行できるウェブ拡張機能を作成することから始まります。

00:04:15.000 --> 00:04:20.000
これがどのように機能するかを理解するために、舞台裏を見てみましょう。

00:04:20.000 --> 00:04:26.000
Safariにとって、ウェブ拡張機能はアプリの一部であることを理解することが重要です。

00:04:26.000 --> 00:04:31.000
したがって、ウェブ拡張機能をインストールする場合は、そのアプリをインストールします。

00:04:31.000 --> 00:04:38.000
また、他のタイプのiOSアプリと同様に、Safari Web拡張機能を備えたアプリはApp Storeで見つけることができます。

00:04:38.000 --> 00:04:44.000
また、Xcodeには、拡張機能を出荷するためのアプリを構築するために必要なものがすべて揃っています。

00:04:44.000 --> 00:04:50.000
したがって、iOS用のSafari Web拡張機能の構築を考えるとき、3つの場所のうちの1つから始めるかもしれません。

00:04:50.000 --> 00:05:08.000
ゼロから新しい拡張機能を作成することを検討しているのかもしれませんし、すでに別のブラウザ用に書いたのかもしれませんし、Safariに持ち込みたいのかもしれませんし、MacのSafariの拡張機能がすでに持っていて、iOSでも利用できるようにしたいのかもしれません。

00:05:08.000 --> 00:05:12.000
これらの各ケースで何ができるかを確認したいと思います。

00:05:12.000 --> 00:05:21.000
したがって、まず、新しいWeb拡張機能を作成したい場合は、Xcodeに含まれているテンプレートを使用して、非常に簡単に始めることができます。

00:05:21.000 --> 00:05:31.000
新しいXcodeプロジェクトを作成し、Safari Extension Appテンプレートを使用して、Web拡張機能とそれを含むアプリの構築を開始できます。

00:05:31.000 --> 00:05:38.000
そして、このテンプレートを使用すると、典型的なWeb拡張機能が持つ可能性のあるすべてのリソースが付属する拡張機能を取得します。

00:05:38.000 --> 00:05:47.000
すでにそこにあるものをカスタマイズしたり、拡張機能のニーズに応じてピースを追加または削除したりすることで、これを出発点として使用できます。

00:05:47.000 --> 00:05:59.000
これで、すでに別のブラウザ用のWeb拡張機能を構築している場合は、Safari Web Extension Converterと呼ばれるツールを利用して、既存の拡張機能からXcodeプロジェクトを自動的に作成できます。

00:05:59.000 --> 00:06:11.000
コマンドラインでコンバーターを実行し、拡張機能のリソースへのパスを提供するだけで、ネイティブアプリで拡張機能をパッケージ化する新しいXcodeプロジェクトが作成されます。

00:06:11.000 --> 00:06:22.000
そして、Xcode 13の新機能であるSafari Web Extension Converterは、デフォルトでiOSとmacOSの両方でSafariをサポートするプロジェクトを作成します。

00:06:22.000 --> 00:06:31.000
また、新しく作成されたプロジェクトは、デフォルトでは、既存の拡張機能のリソースをコピーするのではなく、元のパスで参照します。

00:06:31.000 --> 00:06:43.000
最後に、過去にmacOS用のSafari Web Extensionを構築するためにXcodeプロジェクトをすでに設定している場合は、コンバーターを使用してそのプロジェクトをアップグレードして、iOSもサポートすることもできます。

00:06:43.000 --> 00:06:51.000
コンバーターを実行し、Xcodeプロジェクトへのパスとともに--rebuild-projectオプションを提供できます。

00:06:51.000 --> 00:06:57.000
その後、コンバーターはiOS互換バージョンの拡張機能と包含アプリをプロジェクトに追加します。

00:06:57.000 --> 00:07:08.000
今、私は初めてSea CreatorをiOSに持ち込むステップをたどって、Safari Web Extension Converterを実際に見せたいです。

00:07:08.000 --> 00:07:15.000
これが私のSea Creator Xcodeプロジェクトで、MacでSafari用のSea Creatorを開発するために使用しました。

00:07:15.000 --> 00:07:19.000
しかし、それは今Macしかサポートしていないので、私はそれを修正したいです。

00:07:19.000 --> 00:07:34.000
そこで、ターミナルを開いてxcrun safari-web-extension-converterと入力し、--rebuild-projectオプションを使用し、Xcodeプロジェクトへのパスを提供し、コンバーターを実行します。

00:07:34.000 --> 00:07:43.000
そして、それは私の既存のプロジェクトに関するいくつかの詳細を確認し、クロスプラットフォームバージョンでそれを上書きしたいかどうかを私に尋ねるのをやめます。

00:07:43.000 --> 00:07:49.000
また、コンバーターを実行すると、拡張機能との潜在的な互換性の問題が警告されます。

00:07:49.000 --> 00:07:57.000
この場合、iOSではサポートされていない永続的な背景ページと呼ばれるものの使用について警告しています。

00:07:57.000 --> 00:07:58.000
後でこれを修正する必要があります。

00:07:58.000 --> 00:08:03.000
しかし、今のところ、コンバーターを続けさせます。

00:08:03.000 --> 00:08:08.000
そして、それが完了すると、私のプロジェクトは自動的に開きます。

00:08:08.000 --> 00:08:15.000
ここには、私のアプリのiOSとmacOSの両方のバージョンと拡張機能のフォルダがあることに注意してください。

00:08:15.000 --> 00:08:21.000
さて、共有拡張機能グループ内のリソースフォルダを見てみましょう。

00:08:21.000 --> 00:08:25.000
ここでは、Sea Creator Web Extensionのコア部分を見つけることができます。

00:08:25.000 --> 00:08:33.000
Web Extension APIを初めて使用している人のために、後で言及するので、これらの部分のいくつかが何であるかを説明したいと思います。

00:08:33.000 --> 00:08:35.000
マニフェストから始めます。

00:08:35.000 --> 00:08:39.000
これは、拡張子の構造を説明するJSONファイルです。

00:08:39.000 --> 00:08:52.000
拡張機能の名前、アクセスしたいウェブサイト、ポップアップページやSea Creatorのような新しいタブページなど、サポートする機能などの重要な情報が含まれています。

00:08:52.000 --> 00:08:56.000
次に、バックグラウンドスクリプトと呼ばれるJavaScriptソースがあります。

00:08:56.000 --> 00:09:07.000
ブラウザは、拡張機能が有効になっているときにこのスクリプトをバックグラウンドで実行することができ、拡張機能はブラウザまたは拡張機能の他の部分から来るさまざまなイベントをリッスンすることができます。

00:09:07.000 --> 00:09:14.000
Sea Creatorのバックグラウンドスクリプトは、ウェブページに追加された絵文字の数のカウンターを追跡します。

00:09:14.000 --> 00:09:19.000
次に、コンテンツスクリプトと呼ばれる別のタイプのスクリプトがあります。

00:09:19.000 --> 00:09:24.000
ブラウザは、ユーザーが訪問したウェブページでこのスクリプトを自動的に実行します。

00:09:24.000 --> 00:09:32.000
拡張機能は任意の数のコンテンツスクリプトを持つことができ、マニフェストはどのコンテンツスクリプトをどのWebサイトで実行するかを指定します。

00:09:32.000 --> 00:09:39.000
このスクリプトは、拡張機能にページを直接操作してページを拡張およびカスタマイズする権限を与えます。

00:09:39.000 --> 00:09:46.000
たとえば、Sea Creatorのコンテンツページは、実際に動物の名前を絵文字に置き換えるものです。

00:09:46.000 --> 00:09:54.000
そして、それを行うと、バックグラウンドスクリプトにメッセージを送信し、その中央カウンタを更新できます。

00:09:54.000 --> 00:10:04.000
もちろん、この拡張機能には、新しいタブページ用のHTML、CSS、その他のJavaScriptファイル、およびそのポップアップページもあります。

00:10:04.000 --> 00:10:15.000
そして最後に、ローカライズされた文字列、拡張機能のアイコンやその他のグラフィックなど、他のリソースがいくつかあります。

00:10:15.000 --> 00:10:20.000
したがって、これらの作品はすべて一緒になって、Sea Creator Web Extensionを作ります。

00:10:20.000 --> 00:10:27.000
そして、Safari Web Extension Converterのおかげで、私はこれらすべてをネイティブアプリにパッケージ化するプロジェクトを持っています。

00:10:27.000 --> 00:10:34.000
そして、私は今プロジェクトを実行できるので、すぐにSafariでSea Creatorを使い始めることができます。

00:10:34.000 --> 00:10:43.000
画面上部のツールバーに移動し、iOS用のSea Creatorを選択し、アプリを実行する目的地を選択します。

00:10:43.000 --> 00:10:51.000
私はiOSデバイスを接続していないので、この場合はiPhoneシミュレーターを使用します。

00:10:51.000 --> 00:10:54.000
次に、[実行]ボタンをクリックします。

00:10:54.000 --> 00:11:02.000
そして、Xcodeは私のアプリプロジェクトを構築し、シミュレータをロードし、私のアプリを実行します。

00:11:02.000 --> 00:11:11.000
これはWeb Extension Converterによって生成されたSea Creatorアプリで、Sea Creator Web Extensionが含まれています。

00:11:11.000 --> 00:11:22.000
このセッションの冒頭で、Safari内で直接拡張機能をオンにできることを示しましたが、アプリが示唆するように、設定を使用して拡張機能を管理することもできます。

00:11:22.000 --> 00:11:29.000
そして、ここでそれを披露したいので、設定に切り替えます。

00:11:29.000 --> 00:11:36.000
Safari、Extensions、そしてSea Creatorに飛び込みます。

00:11:36.000 --> 00:11:42.000
そして、これはSea Creatorの詳細ページで、拡張機能に関する情報とそれをオンにするスイッチがあります。

00:11:42.000 --> 00:11:47.000
しかし、そのスイッチはグレー表示になっていて、まだ拡張機能をオンにできません。

00:11:47.000 --> 00:11:50.000
これは、読み込みを妨げる拡張機能に問題があることを意味します。

00:11:50.000 --> 00:11:53.000
私は間違いなく次にこれを調べる必要があります。

00:11:53.000 --> 00:11:56.000
そして、これは私がデバッグについて話したいところです。

00:11:56.000 --> 00:12:07.000
プロジェクトを構築して拡張機能をインストールできるのは素晴らしい第一歩ですが、もちろん、なぜうまくいかないのかを知るために、より深く掘り下げる方法を知ることが不可欠です。

00:12:07.000 --> 00:12:17.000
Web拡張機能のエラーを特定し、Webインスペクタなどのツールを使用して拡張機能の一部をデバッグするのは簡単です。

00:12:17.000 --> 00:12:26.000
設定を振り返ってみると、下部にエラーが表示され、iOSの拡張機能には非永続的な背景ページが必要です。

00:12:26.000 --> 00:12:27.000
これは聞き覚えがある。

00:12:27.000 --> 00:12:30.000
コンバーターが以前に私に警告したのと同じ問題です。

00:12:30.000 --> 00:12:33.000
そして今、私は実際にそれを修正しに行きたいです。

00:12:33.000 --> 00:12:47.000
だから私はXcodeに戻り、マニフェストを開き、バックグラウンドセクションに「persistent」:falseキーを追加します。

00:12:47.000 --> 00:12:52.000
この変更については後で詳しく説明しますが、今のところ、これでエラーを乗り越えるはずです。

00:12:52.000 --> 00:13:05.000
この変更を行ったので、アプリを再度実行して、更新された拡張機能をシミュレーターにインストールします。

00:13:05.000 --> 00:13:08.000
そして、これが再びSea Creatorアプリです。

00:13:08.000 --> 00:13:17.000
修正すべきエラーが1つしかないように見えたので、設定に戻るのではなく、Safariに直行します。

00:13:17.000 --> 00:13:28.000
Safariを開き、拡張機能リストを開くと、Sea Creatorがあり、今すぐオンにできるようです。

00:13:28.000 --> 00:13:32.000
Safariは、Sea Creatorの新しいタブエクスペリエンスを使用する選択肢を提供します。

00:13:32.000 --> 00:13:37.000
そして、私は前にそれを見たことがないので、それがiPhoneでどのように見えるかを確認したいです。

00:13:37.000 --> 00:13:46.000
だから、それを新しいタブページとして設定し、拡張機能リストを閉じて、新しいタブを開きます。

00:13:46.000 --> 00:13:50.000
そして、私が期待したように、Sea Creatorの新しいタブページがあります。

00:13:50.000 --> 00:13:54.000
しかし、テキストは本当に小さく、ページは見栄えがよくありません。

00:13:54.000 --> 00:14:03.000
iOSでこの拡張機能を実行するのは初めてなので、コンテンツがまだiPhoneでうまく動作するように調整されていないことは驚くべきことではありません。

00:14:03.000 --> 00:14:11.000
今すぐこれを修正したいのですが、これを行うには、Webインスペクタを使用してこのページを詳しく見て、念頭に置いているいくつかの変更を試してみます。

00:14:11.000 --> 00:14:31.000
Web Inspectorに行くには、MacでSafariを開き、SafariのAdvanced Preferencesを再確認して、Developメニューが有効になっていることを確認します。

00:14:31.000 --> 00:14:41.000
そして今、私はその開発メニューを持っているので、私はそれを開き、私が使用しているiPhoneシミュレータを選択し、検査するページを選択することができます。

00:14:41.000 --> 00:14:44.000
さて、シークリエイターには2つの選択肢があります。

00:14:44.000 --> 00:14:52.000
バックグラウンドスクリプトをデバッグしたい場合は、拡張機能の背景ページを選択できますが、この場合は、新しいタブページを検査します。

00:14:52.000 --> 00:14:56.000
だから私は他の選択肢を選びます。

00:14:56.000 --> 00:14:58.000
そして今、私はウェブインスペクタにいます。

00:14:58.000 --> 00:15:02.000
ここで最初に取り上げたいのは、ページの全体的なサイズです。

00:15:02.000 --> 00:15:12.000
デフォルトでは、iPhoneのSafariはWebページをデスクトップブラウザのサイズのようにレンダリングし、より大きなコンテンツを縮小して画面に収まります。

00:15:12.000 --> 00:15:16.000
しかし、テキストが小さすぎるので、私はここでこの動作を望んでいません。

00:15:16.000 --> 00:15:21.000
だから、iPhoneのウェブデザインに関しては、非常に一般的な習慣を使います。

00:15:21.000 --> 00:15:26.000
ビューポートのメタタグを追加して、Safariにこの方法でコンテンツを拡大縮小しないように伝えます。

00:15:26.000 --> 00:15:36.000
Head要素を選択し、子要素を追加し、そのビューポートメタタグの内容を追加します。

00:15:36.000 --> 00:15:43.000
タグを追加し、その変更に応じてシミュレータでページが更新されます。

00:15:43.000 --> 00:15:49.000
今、すべてのテキストは読みやすいサイズですが、すべて画面に収まるわけではありません。これは私の次の問題です。

00:15:49.000 --> 00:15:55.000
なぜこのようにレイアウトされているのかを理解するために、このページの要素を調べたいです。

00:15:55.000 --> 00:16:02.000
ボディタグを見ると、ページ上のすべてのコンテンツを含むこのdivがあることがわかります。

00:16:02.000 --> 00:16:11.000
焦点を合わせて右側のスタイルシートのサイドバーを見ると、要素の固定幅が850であることがわかります。

00:16:11.000 --> 00:16:17.000
それは、ウィンドウが本当に広く、ある時点でテキストをラップしたいデスクトップでは理にかなっています。

00:16:17.000 --> 00:16:22.000
しかし、電話はそれほど広くないので、それはiPhoneでは機能しません。

00:16:22.000 --> 00:16:30.000
そのルールが正確な幅を要求するのではなく、コンテンツの最大幅を設定すると、ここでより理にかなっていると思います。

00:16:30.000 --> 00:16:32.000
そして、私はここで単にルールを編集することができます。

00:16:32.000 --> 00:16:42.000
幅をクリックして最大幅に変更すると、シミュレータのページがその変更を反映するように更新されます。

00:16:42.000 --> 00:16:48.000
これで、コンテンツの幅はiPhoneにはるかに適しており、すべてのテキストが画面に収まります。

00:16:48.000 --> 00:16:54.000
これは今はるかに良く見えますが、私が行ったこれらの変更は、このインスペクターセッションの一時的なものです。

00:16:54.000 --> 00:16:59.000
これらの変更を失わないように、実際にこれらの変更をプロジェクトに保存したいです。

00:16:59.000 --> 00:17:04.000
そして、スタイルシートインスペクタで作業している間、スタイルシートの更新されたコピーを保存するのは本当に簡単です。

00:17:04.000 --> 00:17:11.000
Command + Sと入力するだけで、更新されたルールを持つスタイルシートを保存できます。

00:17:11.000 --> 00:17:17.000
そして、私のプロジェクトでnew_tab_page.cssを上書きします。

00:17:17.000 --> 00:17:27.000
しかし、ビューポートの変更のために、そのタグを静的リソースではなくライブWebページに追加したので、元のソースに同じ変更を加える必要があります。

00:17:27.000 --> 00:17:46.000
そのタグを選択し、コピーし、Xcodeに戻り、新しいタブページのソースを開き、そこにコンテンツを貼り付けます。

00:17:46.000 --> 00:17:54.000
だから、次回Sea Creatorを実行するときは、その更新されたページソースとスタイルシートを使用し、再び同じように良く見えるでしょう。

00:17:54.000 --> 00:18:07.000
そして、これは、Webインスペクタを使用してWeb拡張機能のボンネットの下を見て、何が起こっているのかを正確に理解し、拡張機能を反復しながら潜在的な変更を試すいくつかの例です。

00:18:07.000 --> 00:18:19.000
今のところ、私は新しいタブページだけを見るつもりですが、開発の後半では、明らかにiOSで拡張機能の他のすべての部分をテストしに行く必要があり、そのために同じツールとテクニックを使用します。

00:18:19.000 --> 00:18:27.000
iOSでSafariの拡張機能設定を使用して、Web拡張機能の設定のエラーを表示できます。

00:18:27.000 --> 00:18:36.000
具体的には、Sea Creatorは永続的な背景ページを使用するという致命的なエラーがありましたが、ここには非致命的な警告があるかもしれないので、チェックする必要があります。

00:18:36.000 --> 00:18:46.000
これらの詳細は、Xcodeからのアプリのデバッグビルドの設定にのみ表示され、App StoreやTestFlightからのコピーには表示されません。

00:18:46.000 --> 00:18:54.000
Web拡張機能を変更すると、アプリを再度実行して、デバイスまたはシミュレータで拡張機能を更新するだけです。

00:18:54.000 --> 00:19:01.000
そしてもちろん、Webインスペクタを使用すると、拡張機能のWebコンテンツに関する問題を調査できます。

00:19:01.000 --> 00:19:09.000
Webインスペクタにアクセスするには、MacのSafariの高度な環境設定で開発メニューを有効にしなければならなかったことを覚えておいてください。

00:19:09.000 --> 00:19:22.000
私のデモでは、拡張機能にiOSシミュレータを使用しましたが、物理的なiOSデバイスを使用する場合は、Safariの高度な設定でそのデバイスでWebインスペクタのサポートを有効にする必要があります。

00:19:22.000 --> 00:19:30.000
Web Inspectorを深く掘り下げ、その最新の機能のいくつかについて学ぶには、Discover Web Inspectorの改善点をチェックしてください。

00:19:30.000 --> 00:19:46.000
iOS用のSafari Web拡張機能を作成し、いくつかの基本的な問題をデバッグしたので、iOSでSafariの拡張機能を構築する際に注意する必要があるいくつかのことを含め、心に留めておくべきいくつかのベストプラクティスについて説明したいと思います。

00:19:46.000 --> 00:19:54.000
非永続的な背景ページから始めて、あなたの拡張機能に関連する可能性のある5つのトピックに焦点を当てます。

00:19:54.000 --> 00:20:00.000
バックグラウンドページは、拡張機能のバックグラウンドスクリプトを実行するためにブラウザが読み込むウェブページです。

00:20:00.000 --> 00:20:07.000
そして、このページでは、拡張機能がブラウザまたは拡張機能の他の部分から送信されたイベントを処理できます。

00:20:07.000 --> 00:20:10.000
しかし、このページをロードしたままにしておくと、パフォーマンスコストがかかります。

00:20:10.000 --> 00:20:17.000
有効になっている拡張機能ごとに、もう1つのタブを開いたままにして実行しているかのように、メモリと電力を使用できます。

00:20:17.000 --> 00:20:22.000
これらすべてのページを常に読み込んでおくと、かなり無駄になる可能性があります。

00:20:22.000 --> 00:20:36.000
しかし、バックグラウンドページを非永続化することができます。つまり、ブラウザは拡張機能が実際に作業を行う必要がある場合にのみロードし、ブラウザはしばらくアイドル状態のときにそのページを後でアンロードできます。

00:20:36.000 --> 00:20:43.000
そうすれば、パフォーマンスコストは、拡張機能が有用なことをしている間にのみ支払われます。

00:20:43.000 --> 00:20:53.000
システムメモリとバッテリー寿命が特にプレミアムであるiOSでは、バックグラウンドページが非永続的でなければならないため、これは重要です。

00:20:53.000 --> 00:21:01.000
XcodeのWeb拡張テンプレートには、すでに非永続的な背景ページが付属しているため、iOSで実行する準備ができています。

00:21:01.000 --> 00:21:11.000
しかし、Sea Creatorのように永続的な背景ページを使用する既存の拡張機能がある場合は、非永続的に変更する必要があります。

00:21:11.000 --> 00:21:19.000
そして、マニフェストのバックグラウンドセクションに「永続的:」Falseキーを追加することで、それを行うことができます。

00:21:19.000 --> 00:21:32.000
非永続的な背景ページを使用するように拡張機能を更新する際に直面する可能性のあるベストプラクティスと潜在的な問題の詳細については、Explore Safari Web Extension Improvementsをご覧ください。

00:21:32.000 --> 00:21:37.000
次に、レスポンシブデザインについて話しましょう。

00:21:37.000 --> 00:21:47.000
Sea Creatorで学んだように、iOSに拡張機能を導入することは、そのWebコンテンツがこれまで考慮したことのない新しい環境でレンダリングされる可能性があることを意味します。

00:21:47.000 --> 00:22:00.000
Sea Creatorの新しいタブページで行ったように、iPhoneとiPadで拡張機能のWebコンテンツのレイアウトをテストし、さまざまな画面サイズに対応できるレスポンシブデザインを使用してください。

00:22:00.000 --> 00:22:08.000
しかし、iOSでウェブコンテンツを素晴らしく見せることに関しては、画面サイズの違いだけが考慮事項ではありません。

00:22:08.000 --> 00:22:11.000
知っておくべきことをいくつかお話ししましょう。お聞かせください。

00:22:11.000 --> 00:22:23.000
拡張機能に、画面の下部付近に重要な要素をレイアウトした全ページのWebコンテンツがある場合は、Safariのタブバーまたはデバイスのホームインジケーターでカバーされている可能性があります。

00:22:23.000 --> 00:22:37.000
CSS用語では、コンテンツが部分的に隠されている可能性のある画面の端付近のこの領域は安全でない領域と呼ばれ、ビューポートの使用可能な領域は安全領域と呼ばれます。

00:22:37.000 --> 00:22:47.000
CSS環境変数を使用すると、セーフエリアインセットを計算して、重要な要素がセーフエリア内に配置されていることを確認できます。

00:22:47.000 --> 00:22:58.000
iPhoneでは、これはランドスケープでも検討する価値があります。ランドスケープでは、デバイスにはディスプレイの左側と右側にも安全な領域のインセットがある可能性があります。

00:22:58.000 --> 00:23:13.000
同様のCSSを使用し、ビューポートでビューポートフィットパラメータを指定することで、Webコンテンツに重要なコンテンツをセーフエリア内に保持するエッジツーエッジのデザインを与えることができます。

00:23:13.000 --> 00:23:21.000
iOSでウェブコンテンツをよりくつろげるこれらのAPIの詳細については、Design for Safari 15をご覧ください。

00:23:21.000 --> 00:23:31.000
iPadとデスクトップブラウザでは、拡張機能にポップアップページがある場合は、コンテンツに合わせて快適なサイズのポップオーバーとして表示されることに慣れているかもしれません。

00:23:31.000 --> 00:23:40.000
しかし、iPhoneでは、Safariはこのウェブページをシートとして表示し、あなたのコンテンツを驚かせるかもしれません。

00:23:40.000 --> 00:23:46.000
シートはデバイスの全幅にまたがり、コンテンツが期待するよりも高くレイアウトされる可能性があります。

00:23:46.000 --> 00:24:00.000
Sea Creatorの初期バージョンのこのスクリーンショットでは、コンテンツには画面の端からあまりパディングがなく、本文ではなくページ内の個々の要素に背景色を設定しました。

00:24:00.000 --> 00:24:06.000
したがって、テキストは少し窮屈に見え、背景はページ全体を埋めません。

00:24:06.000 --> 00:24:17.000
しかし、その後、コンテンツのアライメントとパディングを更新して、呼吸するスペースをもう少し確保し、シート全体を覆うように本体の背景色を指定しました。

00:24:17.000 --> 00:24:24.000
拡張機能にポップアップページがある場合は、拡張機能に同様の変更を加えるべきかどうかを検討してください。

00:24:24.000 --> 00:24:30.000
また、Safariはランドスケープでも同様のプレゼンテーションを使用することに注意してください。

00:24:30.000 --> 00:24:37.000
これらの構成で拡張機能のインターフェイスをテストして、この余分なスペースが与えられたときにレイアウトが理にかなっていることを確認してください。

00:24:37.000 --> 00:24:43.000
そして最後に、設計上の考慮事項の中で、ダイナミックタイプについて言及したいと思います。

00:24:43.000 --> 00:24:50.000
ダイナミックタイプは、ユーザーがテキストやその他の視覚的要素のサイズを調整できる機能です。

00:24:50.000 --> 00:24:57.000
コンテンツを小さくして、より大きく収まるようにして、より見やすくすることができます。

00:24:57.000 --> 00:25:07.000
拡張機能のインターフェースを小さいテキストサイズまたは大きいテキストサイズでテストして、ユーザーが選択したサイズで正しく見えることを確認してください。

00:25:07.000 --> 00:25:18.000
Webコンテンツがダイナミックタイプを最大限に活用できるように、WebKitには、ユーザーのテキストサイズの好みを尊重し、それに合わせてサイズを変更するさまざまなシステムフォントがあります。

00:25:18.000 --> 00:25:27.000
Safariの他のインターフェイスと同様に、テキストがユーザーが快適に読めるように、これらのフォントを拡張機能に採用する必要があります。

00:25:27.000 --> 00:25:35.000
したがって、ここでの主なポイントは、SafariのUIを念頭に置いて拡張機能のWebコンテンツを設計することです。

00:25:35.000 --> 00:25:47.000
iPhoneでフルページのWebコンテンツをテストして、画面サイズにうまく適応し、画面下部にあるSafariのUIと衝突しないことを確認します。

00:25:47.000 --> 00:26:02.000
iPhoneのポップアップWebページをテストして、レイアウトがシートスタイルのプレゼンテーションで理にかなっていることを確認し、幅広いダイナミックタイプサイズでインターフェイスをテストして、ユーザーの好みに合わせて調整されていることを確認する必要があります。

00:26:02.000 --> 00:26:11.000
Safariの新しいインターフェースで見栄えを良くするためにウェブコンテンツをデザインするためのヒントについては、Design for Safari 15をご覧ください。

00:26:11.000 --> 00:26:14.000
次に、ポインタイベント。

00:26:14.000 --> 00:26:26.000
拡張機能が現在、任意のクリックとドラッグのマウスイベントの処理に依存している場合は、ユーザーがiOSをタップしても同じイベントが送信されないことに注意してください。

00:26:26.000 --> 00:26:30.000
代わりに、ポインターイベントAPIを採用する必要があります。

00:26:30.000 --> 00:26:42.000
マウスイベントAPIに似ており、マウス入力でも同じように機能しますが、ポインターイベントAPIはタッチとApple Pencil入力も報告します。

00:26:42.000 --> 00:26:47.000
それでは、Web Extension Windows APIについて話しましょう。

00:26:47.000 --> 00:26:57.000
デスクトップブラウザでは、ユーザーは複数のウィンドウを開いている可能性があり、Web拡張機能はbrowser.windows APIを使用してこれらのウィンドウを操作できます。

00:26:57.000 --> 00:27:03.000
そして、同じことがiPadにも当てはまり、Safariの複数のウィンドウを開くこともできます。

00:27:03.000 --> 00:27:12.000
各Safariウィンドウはフルスクリーンかもしれませんし、別のアプリ、おそらく別のSafariと並んでスプリットビューにあるかもしれません。

00:27:12.000 --> 00:27:18.000
しかし、ボンネットの下では、これらのウィンドウのそれぞれは実際にはiOSのシーンと呼ばれています。

00:27:18.000 --> 00:27:29.000
拡張機能がWindows APIを使用している場合は、Safariの各シーンに実際には2つのウィンドウがあることを知っておく必要があります。1つは通常のブラウジング用、もう1つはプライベートブラウジング用です。

00:27:29.000 --> 00:27:35.000
これは、Safariのシーンが1つしかないにもかかわらず、iPhoneでも当てはまります。

00:27:35.000 --> 00:27:45.000
browser.windows.getAll APIを呼び出すと、どのウィンドウが開いているかを照会すると、APIはこれら2つのウィンドウオブジェクトを返します。

00:27:45.000 --> 00:27:51.000
最初のウィンドウでは、シークレットプロパティはfalseで、フォーカスはtrueです。

00:27:51.000 --> 00:27:58.000
これは私が見ているウィンドウを表しており、プライベートブラウジングではなく、通常のブラウジングです。

00:27:58.000 --> 00:28:03.000
2番目のウィンドウには、Safariシーンのプライベートブラウジングタブがあります。

00:28:03.000 --> 00:28:06.000
そしてもちろん、そのプロパティは最初のウィンドウとは異なります。

00:28:06.000 --> 00:28:10.000
シークレットは真実であり、集中は誤りです。

00:28:10.000 --> 00:28:20.000
Safariをプライベートブラウジングに切り替えてwindows.getAllを再度呼び出すと、APIは異なるウィンドウオブジェクトを返します。

00:28:20.000 --> 00:28:29.000
これで、フォーカスされたプロパティが両方のウィンドウで変更され、2番目のウィンドウにフォーカスが追加されました。

00:28:29.000 --> 00:28:36.000
これは、1つのSafariシーンが2つのウィンドウで表されるiPadでもまったく同じように機能します。

00:28:36.000 --> 00:28:42.000
しかし、スプリットビューでSafariの2番目のシーンを開くと、APIは4つのウィンドウを報告します。

00:28:42.000 --> 00:28:55.000
そして、私の拡張機能がwindows.onCreatedイベントをリッスンすると、スプリットビューを開くときにイベントが2回発生し、新しいSafariシーンの2つの新しいウィンドウごとに1回発生します。

00:28:55.000 --> 00:29:02.000
したがって、このAPIを使用する場合は、最初は期待できないかもしれない余分なウィンドウに遭遇するので、このモデルを覚えておいてください。

00:29:02.000 --> 00:29:11.000
ウィンドウが実際に何であるかのこのモデルに加えて、拡張機能に影響を与える可能性のあるWindows APIにはいくつかの制限があります。

00:29:11.000 --> 00:29:18.000
ウィンドウの状態を作成、削除、更新する方法は利用できません。

00:29:18.000 --> 00:29:26.000
iOSでは、ウィンドウの配置はユーザーによって完全に制御され、アプリや拡張機能ではありません。

00:29:26.000 --> 00:29:34.000
ユーザーがアプリスイッチャーからSafariを閉じると予想されるように、windows.onRemovedイベントは発生しません。

00:29:34.000 --> 00:29:37.000
それは本当に窓を閉じたり削除したりしません。

00:29:37.000 --> 00:29:42.000
ユーザーが後で中断したところから再開するようにしておくだけです。

00:29:42.000 --> 00:29:49.000
また、これらの制限はウィンドウ自体にのみ適用され、それらのウィンドウ内のタブには適用されないことに注意してください。

00:29:49.000 --> 00:29:59.000
Browser.tabs APIを使用すると、Web拡張機能は、必要に応じて個々のタブを追加、削除、更新するための完全な制御をまだ持っています。

00:29:59.000 --> 00:30:04.000
さて、ベストプラクティスの最後は機能検出です。

00:30:04.000 --> 00:30:14.000
既存の拡張機能をiOSに持ち込むと、いくつかのAPIが利用できないことがあります。たとえば、先ほど言及したWindows APIです。

00:30:14.000 --> 00:30:21.000
しかし、コンテキストメニューやWebRequestなど、他にもいくつかあります。

00:30:21.000 --> 00:30:29.000
拡張機能の重要でない部分がそのようなAPIを使用している場合は、必ず機能検出を使用して、利用できないケースを処理してください。

00:30:29.000 --> 00:30:46.000
したがって、これらのAPIを無条件に呼び出すのではなく、それらのAPIの存在に基づいてそのコードを条件付けして、拡張機能の一部をきれいに除外し、サポートするブラウザに関してより柔軟にすることができます。

00:30:46.000 --> 00:31:01.000
また、将来追加される新しいAPIを採用する際には、すべてのブラウザや一部のユーザーがまだ使用している可能性のある以前のバージョンのブラウザですぐには利用できない可能性があるため、このパターンを使用する必要があります。

00:31:01.000 --> 00:31:04.000
そして、それはベストプラクティスをまとめます。

00:31:04.000 --> 00:31:13.000
私は今、Safari Web拡張機能の多くの部分をカバーしましたが、間違いなく最も重要なトピックを最後に保存しました。それはユーザーのプライバシーです。

00:31:13.000 --> 00:31:23.000
ユーザーのプライバシーは、私たちが行うすべての大きな部分を占めているため、個人データがどのように処理されるかに関しては、ユーザーは透明性と管理に値すると考えています。

00:31:23.000 --> 00:31:26.000
そしてもちろん、それは彼らがSafariで行うすべてを含みます。

00:31:26.000 --> 00:31:37.000
Web拡張機能は、ユーザーのブラウジングに膨大な量のアクセスを得ることができるため、それを許可すべきかどうか、どのウェブサイトで許可すべきかはユーザー次第です。

00:31:37.000 --> 00:31:52.000
歴史的に、他のブラウザは、あなたがそれをオンにしたときにすぐに要求するすべてのウェブサイトへの完全なアクセスを拡張機能に与えるでしょう、それは潜在的に拡張機能の味を得るために前もってプライバシーを犠牲にするように求めています。

00:31:52.000 --> 00:32:05.000
しかし、Safariは、ユーザーが同意した場合にのみエクステンションがウェブサイトへのアクセスを許可されるオプトインモデルを使用して、Web拡張機能ユーザーに透明性と制御を提供することで、より良いことを目指しています。

00:32:05.000 --> 00:32:07.000
あなたは以前にシークリエーターでこれを垣間見ました。

00:32:07.000 --> 00:32:22.000
オンにしたとき、すぐにページの変更を開始しませんでしたが、Safariに「はい、ここでこの拡張機能を使用したいのですが、アクセスしても大丈夫です」と明示的に伝えたときにのみできました。

00:32:22.000 --> 00:32:34.000
そして、私がアクセスする拡張機能を与えると、Safariはタブバーで私がこのページで実行されている拡張機能を持っていることを私に知らせるので、私は拡張機能がここで私のウェブブラウジングを見ているかもしれないことを知っています。

00:32:34.000 --> 00:32:42.000
しかし、まだ拡張機能へのアクセスを許可していないウェブサイトに移動すると、そのインジケーターは消えます。

00:32:42.000 --> 00:32:48.000
そして、私はその拡張機能がこのページで実行されておらず、私がここで何をしているのかを見ることができないことを知っています。

00:32:48.000 --> 00:32:51.000
この権限モデルをもっと詳しく見てみましょう。

00:32:51.000 --> 00:32:58.000
繰り返しますが、ユーザーは特定のWebサイトで使用することを選択した場合、拡張機能にオプトインします。

00:32:58.000 --> 00:33:07.000
Safariは、拡張機能がアクセスしようとしているウェブサイトを明確にするダイアログを表示することで、ユーザーに同意を求めます。

00:33:07.000 --> 00:33:15.000
これは、ユーザーがアクションメニューで拡張機能を選択するか、キーボードショートカットのいずれかを使用して拡張機能を呼び出すときに発生します。

00:33:15.000 --> 00:33:21.000
そして、この同意は、プライバシーに敏感なAPIが機能するために必要です。

00:33:21.000 --> 00:33:32.000
具体的には、タブのURLまたはタイトルを明らかにするAPIには、拡張機能がそのURLの許可を持っている場合にのみ、この情報が含まれます。

00:33:32.000 --> 00:33:39.000
クッキーAPIは、拡張機能が許可しているウェブサイトのクッキーの読み書きのみを許可します。

00:33:39.000 --> 00:33:49.000
そして、JavaScriptとスタイルシートの注入は、あなたが推測した、あなたの拡張機能が許可を持っているウェブサイトでのみ許可されます。

00:33:49.000 --> 00:34:04.000
拡張機能に必要な権限がないが、まだユーザーに要求していないときに、拡張機能のスクリプトがこれらのAPIのいずれかを呼び出す場合、Safariは完了ハンドラーを呼び出すのを待ち、画面の上部に中断のないバナーを表示します。

00:34:04.000 --> 00:34:19.000
これにより、拡張機能がより多くのアクセスを望んでいることをユーザーに知らせ、拡張機能が求めているウェブサイトのセットを確認し、それらのウェブサイトのアクセスを許可または拒否する決定を下すことができます。

00:34:19.000 --> 00:34:24.000
拡張機能が本当に必要とするよりも、この方法でより多くの許可を要求することは避けるべきです。

00:34:24.000 --> 00:34:30.000
一部のタイプの拡張機能では、許可に関するこの考え方は、必要以上のものかもしれません。

00:34:30.000 --> 00:34:45.000
たとえば、個々のWebページを共有または注釈を付ける拡張機能は、ユーザーが任意のタブで訪問した時点でサイトへのフルアクセスを必要とせず、ユーザーのために一度に1つのことを行う許可を一度だけ必要です。

00:34:45.000 --> 00:34:51.000
そして、activeTabパーミッションと呼ばれるこれらの拡張機能のための素晴らしい解決策があります。

00:34:51.000 --> 00:35:02.000
拡張機能がactiveTabの許可を要求すると、Safariはユーザーが明示的に拡張機能を使用するタブで拡張機能の許可を自動的に付与します。

00:35:02.000 --> 00:35:08.000
そして、この許可は、現在のタブのみの現在のウェブサイトに限定されます。

00:35:08.000 --> 00:35:14.000
したがって、ユーザーがそのタブを別のWebサイトに移動すると、取り消されます。

00:35:14.000 --> 00:35:22.000
ユーザーからの長期的なコミットメントを必要としないため、Safariはこの許可を付与するときにプロンプトを表示しません。

00:35:22.000 --> 00:35:29.000
この機能を採用するには、マニフェストのパーミッションセクションにactiveTabを追加するだけです。

00:35:29.000 --> 00:35:38.000
つまり、Safariでは、ユーザーは拡張機能がどのWebサイトで作業できるかを常に制御できるということです。

00:35:38.000 --> 00:35:45.000
したがって、拡張機能は、ユーザーが訪問するすべてのページで自動的に動作できるわけではありませんのでご注意ください。

00:35:45.000 --> 00:35:57.000
多くの拡張機能では、activeTabの許可は、それ以上のアクセスについて盗聴することなく、ユーザーが拡張機能を使用しているページだけにアクセスするのに最適な方法です。

00:35:57.000 --> 00:36:04.000
これらの概念はすべて、Safari Web拡張機能をサポートするすべてのプラットフォームで同じです。

00:36:04.000 --> 00:36:16.000
macOSでこれを実際に見て、activeTabを使用するための拡張機能の更新を詳しく見るには、WWDC 2020のMeet Safari Web Extensionsをチェックしてください。

00:36:16.000 --> 00:36:21.000
そして、それはSafari Web Extensionsのプライバシー保護許可モデルです。

00:36:21.000 --> 00:36:32.000
今日取り上げた他のすべてに加えて、iOSのSafari Web拡張機能と、それらを構築するために利用可能なツールのより完全なビューが得られることを願っています。

00:36:32.000 --> 00:36:45.000
私たちは、今日Macですでに愛している多くの拡張機能だけでなく、まだ来ていない素晴らしい新しい拡張機能を含む、iOS 15でSafariにもたらされるWeb拡張機能体験を見ることにとても興奮しています。

00:36:45.000 --> 00:36:53.000
したがって、拡張機能開発が初めての場合は、このセッションに関連するリンクされたリソースをチェックすることをお勧めします。

00:36:53.000 --> 00:36:58.000
そこでは、ダウンロードして自分で試すことができるサンプルコードを見つけることができます。

00:36:58.000 --> 00:37:06.000
また、Appleの開発者ドキュメントとMDN Webドキュメントで、利用可能なWeb拡張APIの詳細を読むことができます。

00:37:06.000 --> 00:37:21.000
すでに別のブラウザまたはMacのSafari用のWeb拡張機能を開発している場合は、Xcode 13のSafari Web拡張機能コンバータを試して、拡張機能をiOSに簡単に持ち込むことをお勧めします。

00:37:21.000 --> 00:37:32.000
バグレポート、提案、互換性の問題などのフィードバックがある場合は、feedbackassistant.apple.comでフィードバックを送信することをお勧めします。

00:37:32.000 --> 00:37:38.000
また、連絡を取りたい場合や質問がある場合は、Apple Developer Forumsで私たちに連絡することもできます。

00:37:38.000 --> 00:37:44.000
そして最後に、あなたが興味を持っているかもしれない他の2つのセッションをもう一度お勧めしたいと思います。

00:37:44.000 --> 00:37:51.000
Safari Web拡張機能の改善は、Safari Web拡張機能への最近のAPIの追加について教えてくれます。

00:37:51.000 --> 00:38:00.000
そして、Design for Safari 15は、iOS 15のSafariの新しいデザインでウェブコンテンツを素晴らしく見せる方法を紹介します。

00:38:00.000 --> 00:38:04.000
見てくれてありがとう、そして素晴らしいWWDCをお過ごしください。

00:38:04.000 --> 23:59:59.000
[明るい音楽]。

