WEBVTT

00:00:02.000 --> 00:00:11.000
セッション「Meet TestFlight on Mac」へようこそ。

00:00:11.000 --> 00:00:15.000
TestFlightエンジニアリングマネージャーのShobi Vijayakumarです。

00:00:15.000 --> 00:00:21.000
近日公開予定の驚くべき新しいTestFlight機能について皆さんと共有できることを本当に楽しみにしています。

00:00:21.000 --> 00:00:26.000
今年、最も人気のあるリクエストの1つであるMacでのTestFlightをご紹介します。

00:00:26.000 --> 00:00:32.000
TestFlightを使用すると、アプリのベータビルドをテスターに配布し、貴重なフィードバックを収集できます。

00:00:32.000 --> 00:00:41.000
iOSとtvOSで利用可能で、今、この秋にMacOSに持ち込む予定です。

00:00:41.000 --> 00:00:51.000
MacのTestFlightは、iOSとtvOSで持っているすべての同じ機能を提供し、Mac App Storeでダウンロードできます。

00:00:51.000 --> 00:00:57.000
ベータ版アプリをインストールしたり、自動更新を設定したり、フィードバックを共有したりできます。

00:00:57.000 --> 00:01:04.000
Apple Silicon MacのネイティブMacアプリとiOSアプリをサポートしています。

00:01:04.000 --> 00:01:07.000
まず、ベータ版アプリのインストールを見てみましょう。

00:01:07.000 --> 00:01:13.000
招待メールを送信するか、公開リンクを共有することで、テスターを募集できます。

00:01:13.000 --> 00:01:18.000
彼らが招待を受け入れると、彼らはあなたのアプリのテスターになります。

00:01:18.000 --> 00:01:31.000
バージョンごとにグループ化されたさまざまなビルドを参照して、テストする特定のビルドを選択し、インストールボタンをクリックしてダウンロードしてMacでテストを開始できます。

00:01:31.000 --> 00:01:36.000
ベータ版アプリがインストールされると、いつでもTestFlightから起動できます。

00:01:36.000 --> 00:01:42.000
また、Dock、Launchpad、Finderなど、あらゆる手段で起動することもできます。

00:01:42.000 --> 00:01:56.000
ベータアプリとして簡単に認識できるように、Dock、Launchpad、およびFinderのベータアプリケーションとして、アプリ名の横に黄色のドットを表示します。

00:01:56.000 --> 00:02:04.000
テスターは、利用可能な最新のビルドが自動的にインストールされるように自動更新を設定できます。

00:02:04.000 --> 00:02:09.000
これにより、彼らがあなたのアプリの最新ビルドをテストしていることが保証されます。

00:02:09.000 --> 00:02:20.000
アプリのベータ版をテストしている間、テスターは経験した問題についてフィードバックを送信したり、改善のための提案をしたりすることができます。

00:02:20.000 --> 00:02:32.000
スクリーンショットを撮り、添付し、問題を説明するコメントを追加してから送信するだけで、アプリから直接フィードバックを送信できます。

00:02:32.000 --> 00:02:38.000
このフィードバックは、App Store Connectのスクリーンショットフィードバックセクションで見ることができます。

00:02:38.000 --> 00:02:48.000
ベータアプリがクラッシュした場合、TestFlightは自動的にクラッシュログをキャプチャし、テスターが追加のコメントを入力するためのダイアログを提供します。

00:02:48.000 --> 00:02:57.000
クラッシュログをダウンロードして、App Store ConnectのクラッシュフィードバックセクションとXcode Organizerでフィードバックを見ることができます。

00:02:57.000 --> 00:03:04.000
これは、MacでのTestFlightの主な機能の簡単な概要であり、アプリをテストし、貴重なフィードバックを収集するのに役立ちます。

00:03:04.000 --> 00:03:20.000
次に、Apple Silicon MacのネイティブMacアプリとiOSアプリをTestFlightに設定する方法と、内部グループ管理の改善と組み込みのXcode Cloud機能を見てみましょう。

00:03:20.000 --> 00:03:27.000
さて、TestFlightでネイティブMacアプリを配布することについて詳しく説明しましょう。

00:03:27.000 --> 00:03:34.000
ネイティブMacアプリには、Mac上のTestFlightで配布するプロビジョニングプロファイルが必要です。

00:03:34.000 --> 00:03:42.000
Xcodeを使用して署名を自動的に管理する際に、アプリのプロビジョニングプロファイルを作成して含めます。

00:03:42.000 --> 00:03:48.000
アプリが手動で署名を管理する場合は、プロファイルを明示的に追加する必要があります。

00:03:48.000 --> 00:03:53.000
プロファイルを手動で作成してアップロードする方法は、開発者ポータルに記載されています。

00:03:53.000 --> 00:03:59.000
プロビジョニングプロファイルでアップロードされると、ビルドはmacOSの下に表示されます。

00:03:59.000 --> 00:04:07.000
iOSやtvOSと非常によく似た、テスターを管理し、それぞれを配布するグループを作成できます。

00:04:07.000 --> 00:04:18.000
ビルドごとに、招待されたテスターの数、デバイスへのインストール、過去7日間のセッション、クラッシュ、フィードバック数を表示できます。

00:04:18.000 --> 00:04:22.000
これらの数字は、すべてのテスターに集約されています。

00:04:22.000 --> 00:04:32.000
App Store Connectのクラッシュやスクリーンショットのフィードバックセクションを見ているときは、プラットフォームmacOSを選択してフィルタリングできます。

00:04:32.000 --> 00:04:40.000
特定のMacデバイスまたはMacOSバージョンを選択することで、フィードバックをさらにフィルタリングできます。

00:04:40.000 --> 00:04:46.000
ご覧のとおり、TestFlightを使用したネイティブMacアプリの配布は、iOSやtvOSと非常によく似ています。

00:04:46.000 --> 00:04:54.000
Apple Silicon MacのiOSアプリをTestFlightでどのように配布できるか見てみましょう。

00:04:54.000 --> 00:05:02.000
テスターグループごとに、Apple Silicon MacでiPhoneとiPadアプリのTestFlightの可用性を制御できます。

00:05:02.000 --> 00:05:10.000
有効にすると、このグループのiOSビルドはApple Silicon MacのTestFlightで利用できます。

00:05:10.000 --> 00:05:15.000
これを無効にすると、そのグループのすべてのiOSビルドがMacで使用できなくなります。

00:05:15.000 --> 00:05:22.000
これにより、Apple Silicon MacでiOSアプリをテストできる人をより柔軟に制御できます。

00:05:22.000 --> 00:05:33.000
iOSのビルドは今日と同様に表示されますが、表示されるカウントにはApple Silicon Macの数字も含まれます。

00:05:33.000 --> 00:05:46.000
同様に、プラットフォームiOSのApp Store Connectでクラッシュとスクリーンショットのフィードバックを見ることができ、Apple Silicon Macから提出されたフィードバックが含まれます。

00:05:46.000 --> 00:05:52.000
Apple Silicon MacのTestFlightでiOSアプリを配布するのは簡単です。

00:05:52.000 --> 00:05:57.000
内部テストは、常にApp Store Connectチームとのテストを便利にしてきました。

00:05:57.000 --> 00:06:04.000
今年は、社内グループ管理をさらに柔軟にするために新しい改善を行いました。

00:06:04.000 --> 00:06:08.000
また、サポートされているすべてのプラットフォームに適用されます。

00:06:08.000 --> 00:06:13.000
外部グループに似た複数の内部グループを作成できるようになりました。

00:06:13.000 --> 00:06:20.000
また、内部グループごとにビルドの配布とフィードバックの収集を設定することもできます。

00:06:20.000 --> 00:06:24.000
例えば、開発チームとQAチームがあるとしましょう。

00:06:24.000 --> 00:06:28.000
それぞれに内部グループを作成できるようになりました。

00:06:28.000 --> 00:06:40.000
開発ライフサイクルの一環として、開発チームにすべてのビルドへのアクセスを許可することができますが、QAチームは特定の安定したビルドへのアクセスのみを必要とする場合があります。

00:06:40.000 --> 00:06:54.000
開発チームの場合、自動配布フラグを有効にして、現在および将来のすべてのビルドをこのグループで利用可能にしますが、QAチームの場合、特定のビルドを手動で追加することを選択します。

00:06:54.000 --> 00:07:02.000
ユースケースごとに内部グループをどのように設定できるかを見たので、設定方法をお見せしたいと思います。

00:07:02.000 --> 00:07:09.000
内部テストの横にあるプラスボタンをクリックすると、各チームのグループを作成できます。

00:07:09.000 --> 00:07:12.000
次に、内部グループに名前を付けます。

00:07:12.000 --> 00:07:17.000
開発チームの場合は、「自動配布を有効にする」を選択します。

00:07:17.000 --> 00:07:24.000
QAチームでは、[自動配布を有効にする]のチェックを外し、[作成]をクリックします。

00:07:24.000 --> 00:07:34.000
グループが作成されたら、QAチームの場合、プラスボタンをクリックして、グループに追加するビルドを手動で選択できます。

00:07:34.000 --> 00:07:44.000
次に、各グループについて、テスターの横にあるプラスボタンをクリックして、グループに該当するものを手動で選択して追加できます。

00:07:44.000 --> 00:07:52.000
また、外部テストと同様に、グループごとのフィードバックを有効または無効にするオプションもあります。

00:07:52.000 --> 00:08:00.000
App Store Connect APIを使用する場合は、BetaGroupsリソースを通じて異なる構成の内部グループを管理できます。

00:08:00.000 --> 00:08:07.000
同様に、iOSでApp Store Connectを使用している場合は、そこから管理することもできます。

00:08:07.000 --> 00:08:13.000
さて、これらは内部テストをより柔軟にするための大きな改善です。

00:08:13.000 --> 00:08:21.000
最後に、エキサイティングなXcode Cloudの機能をTestFlightに直接統合しました。

00:08:21.000 --> 00:08:25.000
今週、AppleはXcode Cloudを導入した。

00:08:25.000 --> 00:08:34.000
Xcode CloudはTestFlightと統合し、アプリを自動的に構築、テスト、配布するためのシームレスなエクスペリエンスを提供します。

00:08:34.000 --> 00:08:40.000
Xcode Cloudの詳細については、セッション「Meet Xcode Cloud」をご覧ください。

00:08:40.000 --> 00:08:52.000
まず、Xcode CloudはTestFlightを通じてベータビルドの配布を管理し、特定のベータグループにビルドを自動的に配布することでシームレスなエクスペリエンスを提供します。

00:08:52.000 --> 00:08:59.000
第二に、ビルドは、開発チームがビルドグループを介して作業する方法で整理されています。

00:08:59.000 --> 00:09:04.000
App Store Connectでどのように見えるかをお見せしましょう。

00:09:04.000 --> 00:09:13.000
これはビルドグループビューで、Xcode CloudワークフローとGITブランチによってグループ化されたビルドがあります。

00:09:13.000 --> 00:09:18.000
それらはiOSのApp Store Connectアプリでもサポートされています。

00:09:18.000 --> 00:09:32.000
TestFlightの内部テスターの場合、ビルドグループディスプレイを使用すると、より身近なGITブランチ名と内部テスト用のXcode Cloudワークフローに基づいてビルドを簡単に見つけることができます。

00:09:32.000 --> 00:09:40.000
App Store Connectのフィードバックセクションで、特定のビルドグループでフィードバックをフィルタリングすることもできます。

00:09:40.000 --> 00:09:45.000
さて、これらは今年まもなく登場するTestFlightの驚くべき機能です。

00:09:45.000 --> 00:09:51.000
MacのTestFlightは、Apple Silicon MacのネイティブMacアプリとiOSアプリの両方をサポートしています。

00:09:51.000 --> 00:09:55.000
来秋にMacでベータテストを開始できます。

00:09:55.000 --> 00:10:00.000
内部グループ管理を改善し、必要に応じて複数のグループを作成します。

00:10:00.000 --> 00:10:09.000
そして最後に、Xcode CloudはApp Store ConnectおよびTestFlightと統合して、ビルド配布を管理し、ビルドグループごとに整理します。

00:10:09.000 --> 00:10:14.000
今日、Xcode Cloud Betaにサインアップできます。

00:10:14.000 --> 00:10:20.000
今年追加されたすべての新機能を楽しんで、素晴らしいTestFlight体験が得られると思います。

00:10:20.000 --> 00:10:22.000
それらを試してみて、あなたのフィードバックをください。

00:10:22.000 --> 00:10:24.000
どうもありがとうございます。

00:10:24.000 --> 23:59:59.000
[明るい音楽]。

