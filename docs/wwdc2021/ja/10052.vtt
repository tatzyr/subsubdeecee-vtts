WEBVTT

00:00:00.000 --> 00:00:11.000
Mac Catalystの新機能へようこそ。

00:00:11.000 --> 00:00:16.000
私の名前はジェイソン・ビーバーで、後で同僚のニック・テイスラーが参加します。

00:00:16.000 --> 00:00:29.000
Mac Catalystは、既存のiOSアプリケーションをmacOSに持ち込み、Macのより大きなディスプレイ、統合されたキーボード、マウスまたはトラックパッドを最大限に活用できるようにする技術です。

00:00:29.000 --> 00:00:36.000
何千人もの開発者がMac Catalystを使用してiOSアプリケーションをmacOSに持ち込んでおり、その結果は信じられないほどでした。

00:00:36.000 --> 00:00:42.000
最近のApple賞を受賞したMac Catalystアプリについていくつかお話ししましょう。

00:00:42.000 --> 00:00:48.000
Shapr3Dは、MacとiPadの両方でサポートされている産業用強力なCADツールです。

00:00:48.000 --> 00:01:01.000
iPadバージョンはマルチタッチと鉛筆の体験として設計されていますが、Mac Catalystで構築された新しいMacバージョンは、デスクトップユーザーが期待するように、マウスとキーボードのサポートを利用しています。

00:01:01.000 --> 00:01:10.000
Instapaperは、オフラインで記事を読むための非常に人気のあるアプリで、Mac Catalystのおかげで、Macでデビューしました。

00:01:10.000 --> 00:01:14.000
Notabilityは優れたメモ取りアプリです。

00:01:14.000 --> 00:01:26.000
既存のMacバージョンを置き換えて、アプリの新しいバージョンは、ユーザーにiPadのすべてのクールな機能を提供しますが、Macの画面サイズ、キーボード、およびより速い速度を利用するように最適化されています。

00:01:26.000 --> 00:01:29.000
Apple PencilでSidecarもサポートしています。

00:01:29.000 --> 00:01:37.000
新しいAPIの概要から始めて、macOS Montereyで強化したAPIについて説明します。

00:01:37.000 --> 00:01:42.000
最後に、ニックがデモアプリで採用したときに、これらの新しいAPIを実際に表示します。

00:01:42.000 --> 00:01:47.000
macOS Montereyの新しいAPIの概要から始めましょう。

00:01:47.000 --> 00:01:55.000
以前は、macOS Big Surでは、showsMenuAsPrimaryActionプロパティを持つボタンにメニューを添付するサポートを追加しました。

00:01:55.000 --> 00:01:58.000
これにより、プルダウンメニューを作成できました。

00:01:58.000 --> 00:02:10.000
さて、macOS Montereyでは、changesSelectionAsPrimaryActionと呼ばれる新しいプロパティを使用して、ポップアップボタンのサポートを追加しました。これにより、ボタンのタイトルがメニューの選択を追跡します。

00:02:10.000 --> 00:02:16.000
これら2つのプロパティにより、ボタンを設定できる4つの方法があります。

00:02:16.000 --> 00:02:20.000
両方のプロパティをfalseに設定すると、標準のプッシュボタンが表示されます。

00:02:20.000 --> 00:02:25.000
ボタンをクリックして長押ししたときにメニューが設定されている場合、これは引き続きメニューを表示できることに注意してください。

00:02:25.000 --> 00:02:29.000
そのボタンを作成するコードは以下の通りです。

00:02:29.000 --> 00:02:37.000
changesSelectionAsPrimaryActionのみがtrueに設定されている場合、クリックしてオンとオフを切り替えることができるトグルボタンが表示されます。

00:02:37.000 --> 00:02:42.000
これは、アプリケーションの状態を示すために使用できます。

00:02:42.000 --> 00:02:48.000
showsMenuAsPrimaryActionのみがtrueに設定されている場合、プルダウンメニューが表示されます。

00:02:48.000 --> 00:02:53.000
また、両方のプロパティがtrueに設定されている場合、新しいポップアップボタンが表示されます。

00:02:53.000 --> 00:03:03.000
現在、メニューをプライマリアクションとして表示するように構成されたボタンの場合、ボタンはmacOSの左クリックであるプライマリインタラクションですぐにメニューを表示します。

00:03:03.000 --> 00:03:10.000
ただし、メニューをプライマリアクションとして表示するように設定されていないボタンの場合、動作はアプリのイディオムによって異なります。

00:03:10.000 --> 00:03:17.000
iPadのイディオムでは、メニューはmacOSでの右クリックであるセカンダリインタラクションでトリガーされます。

00:03:17.000 --> 00:03:24.000
しかし、アプリケーションがMacのイディオムを採用している場合、メニューはボタンを長押しすることでトリガーされます。

00:03:24.000 --> 00:03:29.000
「Meet the UIKitボタンシステム」ビデオで、ボタンの新機能について詳しく知ることができます。

00:03:29.000 --> 00:03:33.000
Mac CatalystアプリでToolTipsを利用できるようにしました。

00:03:33.000 --> 00:03:39.000
ツールチップは、アプリケーションのビューにカーソルを合わせると表示される小さなフローティングウィンドウです。

00:03:39.000 --> 00:03:44.000
また、コンテンツに関するコンテキストや追加の詳細を提供するために使用できます。

00:03:44.000 --> 00:03:49.000
UIViewにToolTipを追加するには、UIToolTipInteractionを使用します。

00:03:49.000 --> 00:03:57.000
必要なのは、テキスト文字列でUIToolTipInteractionを作成し、そのインタラクションをビューに追加することだけです。

00:03:57.000 --> 00:04:03.000
ただし、ToolTipsの一般的な用途の1つは、UI内のコントロールの動作を明確にすることです。

00:04:03.000 --> 00:04:10.000
これは、ツールチップをすばやく設定できるように、UIControlに便利なプロパティを追加したほど一般的なパターンです。

00:04:10.000 --> 00:04:15.000
ラベルは、編集不可能な文字列を表示するために、iOSアプリ全体で使用されます。

00:04:15.000 --> 00:04:21.000
ラベルの内容が長すぎて収まらない場合、ラベルはテキストを切り捨てなければなりません。

00:04:21.000 --> 00:04:28.000
さて、macOS Montereyでは、ラベルの完全な内容が利用できるように、拡張ツールチップのサポートを追加しました。

00:04:28.000 --> 00:04:33.000
このサンプルUIでは、タイトルラベルの内容が長すぎて収まりません。

00:04:33.000 --> 00:04:40.000
拡張ツールチップを有効にすると、ラベルにマウスを合わせると、完全なタイトルが表示されます。

00:04:40.000 --> 00:04:47.000
これは、showsExpansionTextWhenTruncatedと呼ばれるUILabelの新しいプロパティで有効にすることができます。

00:04:47.000 --> 00:04:55.000
info.plistに追加できるUIApplicationSupports PrintCommandという新しいinfo.plistキーを導入しました。

00:04:55.000 --> 00:05:02.000
trueに設定すると、起動時にMac Catalystアプリケーションに「印刷」と「PDFとしてエクスポート」のメニュー項目が自動的に追加されます。

00:05:02.000 --> 00:05:18.000
このplistキーは、iOSアプリケーションにも追加でき、iPadOSショートカットオーバーレイに「印刷」オプションが表示され、iOSアプリケーションがM1 Macで実行されているときに「印刷」と「PDFとしてエクスポート」メニュー項目も表示されます。

00:05:18.000 --> 00:05:26.000
このplistキーは、「印刷」と「PDFとしてエクスポート」のメニュー項目をオペレーティングシステムに伝えますが、ストーリーの半分にすぎません。

00:05:26.000 --> 00:05:30.000
それでも、コードに印刷サポートを明示的に実装する必要があります。

00:05:30.000 --> 00:05:35.000
これを行うには、printContentと呼ばれる新しいUIResponderアクションがあります。

00:05:35.000 --> 00:05:43.000
任意のUIResponderでこれを実装することができ、レスポンダーチェーン検索は適切な印刷ターゲットを見つけるために使用されます。

00:05:43.000 --> 00:05:51.000
printContentの実装が呼び出されたら、通常どおりUIPrintInteractionControllerを設定して使用するだけです。

00:05:51.000 --> 00:05:54.000
私たちは今、あなたのウィンドウにサブタイトルを追加するためのサポートを持っています。

00:05:54.000 --> 00:06:00.000
これは、アプリケーションの状態に関する補助情報を提供するために使用できます。

00:06:00.000 --> 00:06:06.000
これは、サブタイトルと呼ばれるUISceneの新しいプロパティで設定できます。

00:06:06.000 --> 00:06:10.000
macOS Montereyでは、ショートカットアプリケーションがMacで利用可能になりました。

00:06:10.000 --> 00:06:18.000
アプリケーションがiOSでカスタムインテントを採用している場合、MacのSiriとショートカットで利用可能になります。

00:06:18.000 --> 00:06:22.000
アプリ内インテント処理とインテント拡張機能の両方が利用可能です。

00:06:22.000 --> 00:06:28.000
したがって、以前にMac CatalystアプリでIntents拡張機能の構築を無効にしたことがある場合は、再有効にすることができます。

00:06:28.000 --> 00:06:32.000
詳細については、「Meet Shortcuts for macOS」のビデオをご覧ください。

00:06:32.000 --> 00:06:37.000
これは、macOS Montereyで新しいAPIの概要をまとめたものです。

00:06:37.000 --> 00:06:42.000
macOS Montereyで強化したAPIの概要に移りましょう。

00:06:42.000 --> 00:06:57.000
アプリのテーマに合わせて書いたカスタムボタンやスライダーがある場合は、ネイティブコントロールをオプトアウトしてMacのイディオムを採用するときにMac Catalystにそれらを保持できますが、独自のスケーリングを77%に下げる必要があります。

00:06:57.000 --> 00:07:03.000
さて、このアプリ全体で行うことはお勧めしませんが、アプリのエクスペリエンスの鍵となる特定のコントロールに対してのみお勧めします。

00:07:03.000 --> 00:07:09.000
新しいボタンシステムは、よりクロスプラットフォームの方法でアプリのテーマに合ったボタンを作成するためにも使用できます。

00:07:09.000 --> 00:07:14.000
そして、これについては「UIKitボタンシステムを満たす」ビデオで詳しく知ることができます。

00:07:14.000 --> 00:07:18.000
UIBehavioralStyleは、これを可能にする新しい列挙型です。

00:07:18.000 --> 00:07:29.000
UIButtonとUISliderにはそれぞれ2つの新しいプロパティがあります。preferredBehavioralStyleはreadwriteで、behavioralStyleはこのプロパティの読み取り専用解決値です。

00:07:29.000 --> 00:07:42.000
iOSでは、behavioralStyleの解決された値は変更されないので、このコード行を.padまたはmacに明示的に設定して、iOSアプリに影響を与えずにMac Catalystケースを処理するのは簡単です。

00:07:42.000 --> 00:07:51.000
ドキュメントベースのアプリの場合、ウィンドウタブをオプトアウトするUIApplicationSupports TabbedSceneCollectionという新しいplistプロパティがあります。

00:07:51.000 --> 00:07:59.000
Falseに設定すると、ウィンドウのタブは無効になり、デフォルトのタブ関連のメニュー項目は追加されません。

00:07:59.000 --> 00:08:05.000
現在、Macウィンドウの外に移動しないように、カーソルを非表示にしてロックするためのUIPointerLockStateをサポートしています。

00:08:05.000 --> 00:08:12.000
これはゲームにとって本当に便利なので、ユーザーが誤ってゲームの外をクリックして別のアプリケーションを前面に持ち込まないようにします。

00:08:12.000 --> 00:08:19.000
アプリやウィンドウを切り替えると一時的にウィンドウのロックが解除され、ウィンドウをクリックすると再ロックされます。

00:08:19.000 --> 00:08:26.000
また、水平軸または垂直軸でiBeamカーソルを取得するために使用できるUIPointerShapeもサポートしています。

00:08:26.000 --> 00:08:33.000
macOSでこのAPIを使用すると、正規のNSCursorシェイプの1つを取得します。

00:08:33.000 --> 00:08:39.000
最後に、アプリで必要に応じてカーソルを非表示にできるように、非表示のポインタスタイルをサポートしています。

00:08:39.000 --> 00:08:43.000
私たちは、新しく強化されたUIKit APIをいくつか調べてみました。

00:08:43.000 --> 00:08:52.000
さて、ニックに渡して、これらの新しく強化されたAPIを使用して、Mac CatalystアプリをMacでさらにくつろげる方法を説明します。

00:08:52.000 --> 00:08:54.000
ありがとう、ジェイソン!

00:08:54.000 --> 00:08:56.000
これらの新機能は非常に興味をそそられます。

00:08:56.000 --> 00:08:59.000
私はすでにそれらを試してみる機会がありました。

00:08:59.000 --> 00:09:04.000
Catalystチームが開発したアプリのデモをご案内します。 

00:09:04.000 --> 00:09:08.000
Catalystチームは旅行作家として月明かりであることが判明しました。

00:09:08.000 --> 00:09:12.000
そこで、私たちはiPhoneとiPad用のトリッププランナーを開発しました。

00:09:12.000 --> 00:09:19.000
これは、M1を搭載した13インチのMacBook Proで実行されているトリッププランナーです。

00:09:19.000 --> 00:09:25.000
できるだけ多くのユーザーがアプリを利用できるように、M1 Macで実行するためにアプリを選択しました。

00:09:25.000 --> 00:09:28.000
アプリの機能のツアーをしましょう。

00:09:28.000 --> 00:09:38.000
トリッププランナーは、世界中で訪れるべき素晴らしい場所をリストアップし、さまざまな頻繁な旅行者プログラムにリワードポイントを引き換えることができるアプリです。

00:09:38.000 --> 00:09:43.000
そのUIは3列のスプリットビューコントローラーに基づいています。

00:09:43.000 --> 00:09:55.000
サイドバーを使用すると、お気に入りの国の宿泊施設、レストラン、サイト間を移動したり、報酬プログラムを選択してポイントを確認して使うことができます。

00:09:55.000 --> 00:10:04.000
サイドバーで何かを選択すると、それがカテゴリの場合、Trip Plannerはスプリットビューコントローラーの補足列にその内容を表示します。

00:10:04.000 --> 00:10:14.000
補足ビューコントローラーには、日本、スペイン、ブラジル、タンザニアの観光スポット、レストラン、宿泊施設があります。

00:10:14.000 --> 00:10:25.000
代わりに、サイドバーのリーフアイテムまたは補足ビューコントローラーのアイテムを選択すると、セカンダリビューコントローラーはそのアイテムの詳細を表示します。

00:10:25.000 --> 00:10:31.000
日本で一番好きなカフェの1つ、エクストリーム抹茶を選びます。

00:10:31.000 --> 00:10:40.000
詳細ビューコントローラーには、カフェに関するテキスト、旅行を計画するのに役立つボタン、エクストリーム抹茶がどこにあるかを示すマップビューが含まれています。

00:10:40.000 --> 00:10:46.000
トリッププランナーの場合、M1 Macでは箱から出してすべてがうまくいきました。

00:10:46.000 --> 00:10:52.000
しかし、iOSアプリなので、Macでくつろげるようにするためにできることはたくさんありました。

00:10:52.000 --> 00:10:58.000
さらに進むには、そのチェックボックスをチェックしてMac Catalystアプリにする必要がありました。

00:10:58.000 --> 00:11:01.000
具体的には、このチェックボックス。ズームできますか？

00:11:01.000 --> 00:11:05.000
そして、チェックボックスをオンにしてアプリを強化します。

00:11:05.000 --> 00:11:09.000
これはMac Catalyst用に最適化されたトリッププランナーです。

00:11:09.000 --> 00:11:28.000
新しいウィンドウを開くためのダブルタップジェスチャーリコグナイザ、カスタムタイトルバーの外観など、Mac固有の機能を追加し、ネイティブコントロールとシャープなテキストを提供するMac用に最適化することでオールインしました。

00:11:28.000 --> 00:11:37.000
そのプロセスに関する完全なストーリーについては、「素晴らしいMac Catalystアプリの資質」と「Mac Catalystアプリのインターフェースの最適化」をご覧ください。

00:11:37.000 --> 00:11:43.000
トリッププランナーの最終版では、ジェイソンが先ほど話した新しいAPIを採用しました。

00:11:43.000 --> 00:11:45.000
それぞれの養子縁組をカバーします。

00:11:45.000 --> 00:11:48.000
サンプルプロジェクトをダウンロードすることを強くお勧めします。

00:11:48.000 --> 00:11:52.000
ここに示すすべてのスニペットは、そのコードから直接取得されています。

00:11:52.000 --> 00:11:57.000
これはmacOS Monterey用に完全に更新されたアプリです。

00:11:57.000 --> 00:11:59.000
エクストリーム抹茶をもう一度選びました。

00:11:59.000 --> 00:12:05.000
背景色のmacOSスタイルのボタンの形でUIにいくつかの色に気づくかもしれません。

00:12:05.000 --> 00:12:07.000
しかし、私はそれらに戻ります。

00:12:07.000 --> 00:12:10.000
最初にシーンの字幕について話したいと思います。

00:12:10.000 --> 00:12:15.000
私は新しいUISceneサブタイトルプロパティを使用して2つのことをしています。

00:12:15.000 --> 00:12:23.000
まず、サブタイトルを使用して、Macでよりくつろげる方法で詳細ビューコントローラーのタイトルを表示しています。

00:12:23.000 --> 00:12:28.000
ウィンドウの字幕は、ナビゲーションアイテムのタイトルよりもMacに似ています。

00:12:28.000 --> 00:12:35.000
第二に、ユーザーがアプリをナビゲートする際に役立つコンテキストを提供するために字幕を変更しています。

00:12:35.000 --> 00:12:43.000
トリッププランナーでは、日本とタンザニアを選びます。

00:12:43.000 --> 00:12:47.000
だから、窓のサブタイトルには「国」と書かれています。

00:12:47.000 --> 00:12:57.000
この小さなキャンプ場を選択すると、ここの補足ビューコントローラーで、サブタイトルが変更され、グランプキリマンジャロを選択したことを知らせます。

00:12:57.000 --> 00:13:01.000
そして、リワードプログラムセクション全体を選択すると...

00:13:01.000 --> 00:13:08.000
サブタイトルは再び国と報酬プログラムに変わり、ユーザーのコンテキストが追加されます。

00:13:08.000 --> 00:13:13.000
字幕がCatalystアプリにコンテキストを追加するのにどのように役立つかについても考えてください。

00:13:13.000 --> 00:13:20.000
また、字幕はUITitlebarツールバースタイルごとに異なって表示されることに注意してください。

00:13:20.000 --> 00:13:26.000
あなたのアプリに最適な外観を見つけるために、これを試してみてください。

00:13:26.000 --> 00:13:34.000
字幕を設定するには、文字列値から始めて、シーンへの参照を取得し、字幕プロパティを設定します。

00:13:34.000 --> 00:13:41.000
これをシーン接続時に設定するか、後でビューのウィンドウのシーンにアクセスして設定できます。

00:13:41.000 --> 00:13:46.000
次に、トリッププランナーでツールチップを採用した方法を紹介します。

00:13:46.000 --> 00:13:55.000
macOSの非常に一般的なインタラクションパターンは、その何かについての詳細を得るために、一時的に何かの上にマウスをホバリングすることです。

00:13:55.000 --> 00:14:03.000
このテクニックは、アプリのUIを乱雑にすることなくユーザーを教育する長年の方法です。

00:14:03.000 --> 00:14:10.000
ツールチップは、切り捨てられたラベルの全文を表示することもできます。

00:14:10.000 --> 00:14:14.000
ここで、私はブラジルのイグアスの滝を選びました。

00:14:14.000 --> 00:14:20.000
画像にマウスを合わせると、ツールチップが表示されます!

00:14:20.000 --> 00:14:25.000
曇りの日には、青々とした深い緑の森が轟音のイグアスの滝を取り囲んでいる。

00:14:25.000 --> 00:14:28.000
なんて素敵な説明でしょう。

00:14:28.000 --> 00:14:40.000
新しいUIToolTipInteraction APIを使用して、この機能をすべての画像に追加し、Macでアプリをよりくつろげるようにします。

00:14:40.000 --> 00:14:53.000
また、UILabel APIを使用して、国際化された通貨フォーマットのために切り捨てられるこれらのラベルの拡張を可能にし、予想よりも少し長くなりました。

00:14:53.000 --> 00:14:58.000
ジェイソンが先に調べたように、ToolTip APIにはさまざまな形式があります。

00:14:58.000 --> 00:15:14.000
ヒーロー画像の場合、UITooltipInteractionDelegateなしでUIToolTipInteraction APIを使用することは、任意のビューにToolTipとして定数テキストを添付したかったので、私のニーズに合っていました。

00:15:14.000 --> 00:15:22.000
通貨テキストには、UILabelのshowsExpansionTextWhenTruncatedプロパティを使用しました。

00:15:22.000 --> 00:15:33.000
また、ToolTipを任意のコントロールに添付したい場合は、UIControlのToolTipプロパティが適切なAPIです。

00:15:33.000 --> 00:15:39.000
macOS MontereyのCatalystで利用可能なさまざまな新しいボタンに移ります。

00:15:39.000 --> 00:15:50.000
新しいiOS 15 UIButtonConfiguration APIの紹介については、「Meet the UIKit button system」ビデオをチェックすることをお勧めします。

00:15:50.000 --> 00:15:59.000
これらの新しいUIButtonConfigurationプロパティの多くは、Mac用に最適化されたCatalystアプリに独自の症状があります。

00:15:59.000 --> 00:16:08.000
さらに良いことに、iOSと同様に、UIButtonで定義されたプロパティをUIButtonConfigurationのプロパティと混在させて一致させることができます。

00:16:08.000 --> 00:16:15.000
たくさんのボタンを見せて、その後、それぞれがコードでどのように構成されたかをお見せします。

00:16:15.000 --> 00:16:20.000
新しいボタンの背景色を披露するために、新しい目的地を選びます。

00:16:20.000 --> 00:16:22.000
コパカバーナはどうですか？

00:16:22.000 --> 00:16:35.000
ここのボタンは塗りつぶされた構成を使用しているので、環境の色合いの色を拾い、画像と背景のぼかしによく一致する色を自動的に取得します。

00:16:35.000 --> 00:16:39.000
では、報酬の詳細ビューコントローラーに移動します。

00:16:39.000 --> 00:16:43.000
サイドバーからプログラムを持ち出します...

00:16:43.000 --> 00:16:47.000
そして、Diamond Dubloonsリワードプログラムを選択してください。

00:16:47.000 --> 00:16:56.000
このビューの目的は、旅行で獲得したポイントを交換し、何に交換するかを選択できるようにすることです。

00:16:56.000 --> 00:17:01.000
スライダーを使って、何ポイント使うかを選択できます。

00:17:01.000 --> 00:17:10.000
このトグルボタンを使用してポイント乗数をアクティブにし、添付のメニューで乗数を選択することもできます。

00:17:10.000 --> 00:17:17.000
ポイント乗数だけが理にかなっているので、最大の数字を選ぶような気がします。

00:17:17.000 --> 00:17:19.000
だから、私は6つを選びます。

00:17:19.000 --> 00:17:21.000
何がキャッチなのかしら。

00:17:21.000 --> 00:17:29.000
これらの大きなボタンを切り替えて、引き換えるカテゴリを選択できます。

00:17:29.000 --> 00:17:34.000
引き換え、キャッシュアウト、またはポイントの寄付のどちらかを選択できます。

00:17:34.000 --> 00:17:42.000
そして、最終的に提出する準備ができたら、右下の送信ボタンをクリックするか、このリセットボタンをクリックしてやり直すことができます。

00:17:42.000 --> 00:17:45.000
ここにはかなりの数の新しいボタンがあります。

00:17:45.000 --> 00:17:50.000
それぞれを設定する方法を紹介します。

00:17:50.000 --> 00:17:55.000
まず、私たち全員がよく知っているもの、つまりプッシュボタンをカバーします。

00:17:55.000 --> 00:17:58.000
詳細ビューコントローラーでは、これは送信ボタンでした。

00:17:58.000 --> 00:18:07.000
これは、Big Surで導入されたシステムタイプのUIButtonに過ぎ、その役割はプライマリに設定されています。

00:18:07.000 --> 00:18:11.000
次に、ポイント乗数メニューボタンがあります。

00:18:11.000 --> 00:18:17.000
このボタンは、プライマリクリックで状態を切り替え、長押しするとメニューが表示されます。

00:18:17.000 --> 00:18:28.000
最終的にはカスタム背景色が欲しいと思うので、塗りつぶされた設定を使用し、タイトルを「ポイント乗数」に設定します。

00:18:28.000 --> 00:18:36.000
トグル動作を取得するには、Jasonが教えてくれた新しいブールプロパティ、changesSelectionAsPrimaryActionを使用します。

00:18:36.000 --> 00:18:38.000
それをtrueに設定します。

00:18:38.000 --> 00:18:47.000
これで、ボタンの背景色は、アプリの色合いと標準の無色の外観を切り替えます。

00:18:47.000 --> 00:18:55.000
乗数の値といくつかのUIActionsで設定されたメニューも添付します。

00:18:55.000 --> 00:19:08.000
そして最後に、メニューのアクションハンドラでは、ユーザーが最大のポイント乗数を選択すると、条件付きでトグルの背景色をシステムの赤に変更します。

00:19:08.000 --> 00:19:13.000
次に、リセットボタンを設定します。

00:19:13.000 --> 00:19:17.000
プレーンな構成を使用して、ボーダレスの外観を得ることができます。

00:19:17.000 --> 00:19:23.000
この構成はiPadOSの外観と非常によく似ています。

00:19:23.000 --> 00:19:32.000
ボタンの役割を破壊的に設定し、誤ってアクションをトリガーするのを防ぐイベント処理を行うようにシステムに指示します。

00:19:32.000 --> 00:19:35.000
そして、そのティントカラーをシステムレッドに設定します。

00:19:35.000 --> 00:19:37.000
そのボタンはそれだけです。

00:19:37.000 --> 00:19:48.000
引き換え、キャッシュアウト、寄付のどちらかを選択できるビューの左下にあるポップアップボタンについては、ボタン設定APIを使用する必要はありません。

00:19:48.000 --> 00:19:56.000
システムボタンを作成し、changesSelectionAsPrimaryActionをtrueに設定します。

00:19:56.000 --> 00:20:01.000
意味的には、それはポップアップボタンが行うことです。

00:20:01.000 --> 00:20:09.000
次に、showsMenuAsPrimaryActionをtrueに設定します。なぜなら、それは意味的にもポップアップボタンが行うことだからです。

00:20:09.000 --> 00:20:12.000
しかし、何を与えますか?ボタンは変わっていません。

00:20:12.000 --> 00:20:14.000
実際、それは持っています。

00:20:14.000 --> 00:20:17.000
別のトグルボタンを実現しました。

00:20:17.000 --> 00:20:20.000
しかし、デフォルトの状態は、もちろんオフです。

00:20:20.000 --> 00:20:24.000
ヌル以外のメニュープロパティがありません。

00:20:24.000 --> 00:20:29.000
これは、Mac Catalystでポップアップの外観を新しくするために重要です。

00:20:29.000 --> 00:20:35.000
メニューを何かに設定したので、ポップアップボタンは完全に機能しています。

00:20:35.000 --> 00:20:40.000
最後に、これらの大きなパネルのようなトグルボタンに焦点を当てます。

00:20:40.000 --> 00:20:47.000
このレイアウトは、iPadスタイルのボタンがレイアウトされたスペースを埋めるためにどのように伸びるかを利用しています。

00:20:47.000 --> 00:20:51.000
Macスタイルを使用するボタンは、このように動作しません。

00:20:51.000 --> 00:20:59.000
Trip PlannerがMac用に最適化に設定されていても、iPadの動作を維持することができました。その方法は次のとおりです。

00:20:59.000 --> 00:21:05.000
私はさらに別の塗りつぶされたボタン構成から始めました。

00:21:05.000 --> 00:21:14.000
次に、設定を使用して画像を設定し、画像のボタンの状態を指定する必要はありません。

00:21:14.000 --> 00:21:21.000
.padの動作スタイルを指定すると、iPadのレイアウト動作が取得されます。

00:21:21.000 --> 00:21:27.000
つまり、ボタンの背景が伸びてフレームを埋めます。

00:21:27.000 --> 00:21:36.000
シンボルはもう少し大きくする必要があったので、より大きなポイントサイズでボタンに好みのシンボル構成を設定しました。

00:21:36.000 --> 00:21:51.000
以前と同様に、changesSelectionAsPrimaryActionをtrueに設定し、ボタンのisSelectedプロパティに基づいて、選択されている色と選択されていない色を指定するcolorUpdateHandlerを提供しました。

00:21:51.000 --> 00:21:55.000
私はあなたがこれらの新しいオプションのすべてに私と同じくらい興奮していることを知っています。

00:21:55.000 --> 00:22:10.000
UIButtonのAPIの長年のメンバーと光沢のある、真新しいプロパティは、Macで自宅で大丈夫なボタンの過多を作成するために、多くの方法で混合し、一致させることができます。

00:22:10.000 --> 00:22:15.000
私があなたに見せたいトリッププランナーの最後の特徴は印刷です。

00:22:15.000 --> 00:22:21.000
新しい組み込みのキーコマンドサポートにより、印刷はCatalystでこれまで以上に簡単です。

00:22:21.000 --> 00:22:30.000
レスポンダーチェーンを使用して印刷を処理する最も適切なオブジェクトを選択することで、トリッププランナーの印刷体験を向上させることができました。

00:22:30.000 --> 00:22:33.000
それが何を意味するのかを実証させてください。

00:22:33.000 --> 00:22:41.000
トリッププランナーの最新バージョンに戻って、私はスペインで最も愛されているレストランの1つ、Charcuterie Boredを選びました。

00:22:41.000 --> 00:22:51.000
Catalyst固有のズームコントロールをクリックして、マップビューを操作します。

00:22:51.000 --> 00:22:59.000
これで、アプリケーションのフォーカスとファーストレスポンダーのステータスは、この詳細ビューコントローラーに移動しました。

00:22:59.000 --> 00:23:08.000
メニューからファイル印刷を選択すると、印刷ダイアログが表示されます...

00:23:08.000 --> 00:23:11.000
この1つのアイテムだけを印刷することを申し出ます。

00:23:11.000 --> 00:23:21.000
さて、その日の計画を完了するために、パルケ・グエルとホテル・バルセロナも選びます。

00:23:21.000 --> 00:23:27.000
組み込みのショートカットコマンド+Pを使用して印刷します。

00:23:27.000 --> 00:23:34.000
印刷ダイアログが表示されたら、選択した3つのアイテムをすべて印刷できるようになりました...

00:23:34.000 --> 00:23:38.000
現在の詳細ビューコントローラーだけではありません。

00:23:38.000 --> 00:23:52.000
最後に、Shift + Tabがサイドバーの国に集中し、補足または詳細ビューコントローラーで何も選択されていない場合...

00:23:52.000 --> 00:24:03.000
そして、印刷しようとすると、トリッププランナーは何をすべきかを知っていて、サイドバーで選択したすべてのアイテムを印刷します。

00:24:03.000 --> 00:24:06.000
では、どうすればこれを達成できるのでしょうか?

00:24:06.000 --> 00:24:18.000
まず第一に、Jasonが導入した新しいinfo.plistキーは、Trip Plannerが印刷をサポートし、メニュー項目を追加したいことをシステムに知らせるように設定する必要があります。

00:24:18.000 --> 00:24:24.000
詳細ビューコントローラーでは、UIResponderから2つのメソッドをオーバーライドしました。

00:24:24.000 --> 00:24:32.000
印刷コンテンツは実際の印刷を行い、UIKitはレスポンダーチェーンでこのアクションを実行できるオブジェクトを探します。

00:24:32.000 --> 00:24:40.000
場合によっては、アプリケーションのビジネスロジックによって決定され、詳細ビューコントローラは印刷したくない場合があります。

00:24:40.000 --> 00:24:48.000
そこで、canPerformActionメソッドを使用して、詳細ビューコントローラーが印刷できるかどうかをレスポンダーチェーンに通知しました。

00:24:48.000 --> 00:25:02.000
このメソッドはprintContentの前に呼び出され、falseを返すと、UIKitがそのアクションを実行できるオブジェクトを探してレスポンダーチェーンを登るため、詳細ビューコントローラはスキップされます。

00:25:02.000 --> 00:25:17.000
アプリケーションのルートビューコントローラーであり、ほとんどの場合、レスポンダーチェーンの上部に近いBrowserSplitViewControllerでは、別のUIResponderメソッド、targetForAction:withSenderを実装しました。

00:25:17.000 --> 00:25:23.000
これにより、スプリットビューコントローラーは、どのオブジェクトが印刷を処理するかを選択できます。

00:25:23.000 --> 00:25:37.000
これは、ユーザーの選択とビジネスロジックがいくつかのページセットを印刷する必要があると指示する場合に便利ですが、特定の印刷を実装するオブジェクトはレスポンダーチェーンの一部ではありません。

00:25:37.000 --> 00:25:49.000
これは、そのオブジェクトにbeonFirstResponderを送信することによって、そのオブジェクトをレスポンダーチェーンに強制するよりもはるかに好まれます。これは、このシナリオで使用される場合はアンチパターンになります。

00:25:49.000 --> 00:25:50.000
そして、それは印刷用です。

00:25:50.000 --> 00:25:52.000
私はグリッドから外す準備ができているようです。

00:25:52.000 --> 00:26:05.000
このビデオでは、ジェイソンは、あなたのアプリをこれまで以上にMacにもたらすのに役立つ新しいMac Catalyst APIと強化されたMac Catalyst APIを紹介してくれました。

00:26:05.000 --> 00:26:08.000
それから、私はトリッププランナーでそれらを採用する方法を示しました。

00:26:08.000 --> 00:26:17.000
ほとんどの場合、それらは単なる新しいプロパティであり、設定する1行で、Catalystアプリに典型的なMac機能をもたらします。

00:26:17.000 --> 00:26:19.000
これらを自分で試してみてください。

00:26:19.000 --> 00:26:25.000
いくつかのマイナーなコード変更を行い、Mac Catalystアプリがどのように大きな改善を得るかを見てください。

00:26:25.000 --> 00:26:26.000
見てくれてありがとう。

00:26:26.000 --> 23:59:59.000
[パーカッシブミュージック]。

