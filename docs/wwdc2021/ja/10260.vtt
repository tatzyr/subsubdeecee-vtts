WEBVTT

00:00:02.000 --> 00:00:11.000
こんにちは、私はマイケル・オクスです。

00:00:11.000 --> 00:00:13.000
私はUIKitチームのフレームワークエンジニアです。

00:00:13.000 --> 00:00:17.000
iPadのキーボードナビゲーションに焦点を当てることを歓迎します。

00:00:17.000 --> 00:00:20.000
人々はiPadでハードウェアキーボードを使うのが大好きです。

00:00:20.000 --> 00:00:28.000
Mac CatalystとiPadOS 15は、アプリのキーボードナビゲーションをサポートする強力なAPIを導入しています。

00:00:28.000 --> 00:00:33.000
iPadOSのキーボードでアプリをナビゲートすると、とても身近に感じるでしょう。

00:00:33.000 --> 00:00:36.000
タブキーは、アプリ内の重要な領域間を移動します。

00:00:36.000 --> 00:00:45.000
矢印キーはエリア内を移動し、iPadOSのreturnキーまたはMac Catalystのスペースバーでアイテムを選択できます。

00:00:45.000 --> 00:00:50.000
アプリがすでにこれらのキーコマンドを使用している場合、カスタムコマンドは機能しなくなります。

00:00:50.000 --> 00:00:55.000
これらの紛争を解決する方法については、後で説明します。

00:00:55.000 --> 00:00:58.000
まず、キーボードナビゲーションの動作をお見せしましょう。

00:00:58.000 --> 00:01:06.000
写真では、タブキーを押して、サイドバーのライブラリセルから右側の写真グリッドにフォーカスを移動できます。

00:01:06.000 --> 00:01:13.000
これで、矢印キーを使用してグリッド内の写真間を移動できます。

00:01:13.000 --> 00:01:21.000
探している写真を見つけたら、戻るを押して選択できます。

00:01:21.000 --> 00:01:30.000
iOS 15 SDKでコンパイルすると、この動作はテキストフィールド、テキストビュー、サイドバーに対して自動的に有効になります。

00:01:30.000 --> 00:01:35.000
また、素晴らしい体験のために、他のコレクション、テーブル、カスタムビューを選択する必要があります。

00:01:35.000 --> 00:01:39.000
すぐにこれを行う方法をお見せします。

00:01:39.000 --> 00:01:44.000
これがエキサイティングな機能であることは知っていますが、アプリのキーボードのすべての要素をナビゲート可能にしないでください。

00:01:44.000 --> 00:01:53.000
キーボードナビゲーションは、ユーザーがアプリの主要な機能にアクセスできるようにすることを目的としているため、テキスト入力、リスト、およびコレクションビューに焦点を当てます。

00:01:53.000 --> 00:01:58.000
ボタン、セグメント化されたコントロール、スイッチなどのコントロールは脇に置いておきます。

00:01:58.000 --> 00:02:02.000
フルキーボードアクセスにより、これらのコントロールはキーボードでナビゲート可能になります。

00:02:02.000 --> 00:02:08.000
フルキーボードアクセスの詳細については、「iOSアプリでフルキーボードアクセスをサポートする」をご覧ください。

00:02:08.000 --> 00:02:17.000
iPadOSのキーボードナビゲーションは、tvOSと同じフォーカスシステムを使用します。以前にtvOSアプリを書いたことがあれば、多くのAPIは身近に感じるでしょう。

00:02:17.000 --> 00:02:23.000
ただし、注意すべき新しいAPIと行動の違いがいくつかあります。

00:02:23.000 --> 00:02:30.000
フォーカスシステム全般についてもっと知りたい場合は、「tvOSでのフォーカスインタラクション」をチェックしてください。

00:02:30.000 --> 00:02:39.000
このビデオでは、アプリのより多くのコンテンツをフォーカス可能にする方法と、これらのフォーカス可能なアイテムの外観をカスタマイズする方法を紹介します。

00:02:39.000 --> 00:02:49.000
知っておくべきサイドバーの特別な動作をお見せします。また、アプリで構造を定義する新しい方法であるフォーカスグループについて話します。

00:02:49.000 --> 00:02:55.000
最後に、あなたがよく知っているべきレスポンダーチェーンの重要な変更点を紹介します。

00:02:55.000 --> 00:03:01.000
しかし、では、UIのより多くの要素を集中可能にする方法を見てみましょう。

00:03:01.000 --> 00:03:04.000
canBecomeFocusedは真実の唯一の源です。

00:03:04.000 --> 00:03:08.000
これはUIFocusItemの読み取り専用プロパティです。

00:03:08.000 --> 00:03:12.000
それをオーバーライドしてtrueを返して、アイテムをフォーカス可能にします。

00:03:12.000 --> 00:03:16.000
さて、あなたは疑問に思うかもしれません、フォーカスアイテムとは何ですか?

00:03:16.000 --> 00:03:24.000
フォーカスシステムのバックボーンは、UIFocusItemとUIFocusEnvironmentの2つのプロトコルです。

00:03:24.000 --> 00:03:28.000
FocusItemsは、単にフォーカスできるアイテムです。

00:03:28.000 --> 00:03:33.000
FocusEnvironmentsは、フォーカス可能なアイテムの階層を定義します。

00:03:33.000 --> 00:03:42.000
UIViewは、どのビューでもフォーカスできるため、これらのプロトコルの両方に準拠していますが、フォーカスできるサブビューを含めることもできます。

00:03:42.000 --> 00:03:50.000
一方、UIViewControllerは、ビジュアル自体を提供しないため、UIFocusEnvironmentにのみ準拠しています。

00:03:50.000 --> 00:03:54.000
両方のプロトコルを独自のオブジェクトに実装することもできます。

00:03:54.000 --> 00:04:00.000
これにより、Metalなどの他の技術でレンダリングされるコンテンツにフォーカスを採用できます。

00:04:00.000 --> 00:04:06.000
キーボードナビゲーションの最も可能性の高い候補は、テーブルまたはコレクションビューのセルです。

00:04:06.000 --> 00:04:10.000
UIKitはいくつかの便利なAPIを提供しているので、サブクラスする必要はありません。

00:04:10.000 --> 00:04:17.000
Set allowsFocus to true on a table or collection view to make all セルのフォーカス可能にします。

00:04:17.000 --> 00:04:22.000
サイドバーでは、allowsFocusはデフォルトでtrueであることに注意してください。

00:04:22.000 --> 00:04:31.000
よりきめ細かい制御のために、デリゲートでcanFocusItemAt indexPathを使用して、各セルのフォーカス性を個別に制御できます。

00:04:31.000 --> 00:04:38.000
これらの方法は両方とも、canBecomeFocusedをオーバーライドしないセルにのみ影響します。

00:04:38.000 --> 00:04:43.000
フォーカス項目が期待どおりに動作しない場合は、いくつかのデバッグツールが利用可能です。

00:04:43.000 --> 00:04:50.000
lldbでは、UIFocusDebuggerを呼び出すことができます。CheckFocusability(項目:)をチェックし、デバッグしたい項目を渡します。

00:04:50.000 --> 00:04:53.000
例えば、あなたが集中可能にしようとしているビュー。

00:04:53.000 --> 00:05:03.000
フォーカスシステムがこの項目をフォーカス可能とみなさない理由を説明します。

00:05:03.000 --> 00:05:06.000
そこで、UIを集中可能にする方法について話しました。

00:05:06.000 --> 00:05:10.000
焦点を絞ったアイテムの外観を詳しく見てみましょう。

00:05:10.000 --> 00:05:14.000
システム全体でよく見られるスタイルは2つあります。

00:05:14.000 --> 00:05:18.000
まず、macOSのフォーカスリングに似たハローエフェクトがあります。

00:05:18.000 --> 00:05:22.000
実際、これはMac Catalystのデフォルトの効果です。

00:05:22.000 --> 00:05:29.000
iPadOSでは、FocusEffectプロパティにUIFocusHaloEffectを割り当てることで、この効果を使用できます。

00:05:29.000 --> 00:05:34.000
引数なしで初期化された場合、システムはハローの形状を推測します。

00:05:34.000 --> 00:05:38.000
コンテンツによりよく合うように形状をカスタマイズすることもできます。

00:05:38.000 --> 00:05:48.000
たとえば、画像に角が丸みを帯びている場合、ハローは角を丸めることで外観と一致する必要があります。

00:05:48.000 --> 00:05:56.000
UIFocusHaloEffectには、丸みを帯びたrect用のものなど、さまざまな形状のイニシャライザが多数あります。

00:05:56.000 --> 00:06:02.000
これらの初期化子を使用して、ハローの形状がビューのコンテンツの周りにアウトラインを作成することを確認します。

00:06:02.000 --> 00:06:07.000
Halo Effectでは、ビュー階層内の位置も制御できます。

00:06:07.000 --> 00:06:15.000
ここでは、ハローは画像のバッジの上にレンダリングされていますが、ハローが画像とバッジの間にある場合、より良く見えます。

00:06:15.000 --> 00:06:25.000
画像ビューをreferenceViewとして指定することで、UIKitは画像の上とバッジの下にハローをレンダリングします。

00:06:25.000 --> 00:06:31.000
参照ビューは、ビュー階層内のハローの相対的な順序を定義します。

00:06:31.000 --> 00:06:36.000
ハロー効果のスーパービューを定義するコンテナビューを指定することもできます。

00:06:36.000 --> 00:06:45.000
これは、フォーカスされたアイテムの直接スーパービューがそのコンテンツをクリッピングしている場合に便利です。

00:06:45.000 --> 00:06:53.000
これらは両方ともオプションであり、推測された外観があなたが期待するものではない場合にのみ、それらを提供する必要があります。

00:06:53.000 --> 00:07:00.000
コレクションとテーブルビューのセルは、画像のような完全に不透明なコンテンツがある場合にのみ、その周りにハローを表示する必要があります。

00:07:00.000 --> 00:07:05.000
他のすべてのケースでは、セルがフォーカスされたとき、それは強調表示されるはずです。

00:07:05.000 --> 00:07:14.000
これは、背景がアプリの色合いに変わり、テキストとアイコンの前景色を良いコントラストに調整する必要があることを意味します。

00:07:14.000 --> 00:07:18.000
このハイライトの外観は、UIFocusEffectとして利用できません。

00:07:18.000 --> 00:07:26.000
代わりに、iOS 14で導入された背景とコンテンツ構成を使用すると、自動的にこの外観になります。

00:07:26.000 --> 00:07:30.000
これらの詳細については、「現代のセル構成」をご覧ください。

00:07:30.000 --> 00:07:37.000
背景とコンテンツの設定を使用していない場合、サンプルアプリはすべてのケースで正しい色を取得する方法を示します。

00:07:37.000 --> 00:07:40.000
必ずそれをチェックしてください。

00:07:40.000 --> 00:07:45.000
さて、カスタムの外観を適用する場合は、まずfocusEffectプロパティをnilに設定します。

00:07:45.000 --> 00:07:48.000
これにより、システムのスタイリングがオフになります。

00:07:48.000 --> 00:07:56.000
次にdidUpdateFocusをオーバーライドします(in:コンテキストとAnimationCoordinator:)フォーカスアイテムに。

00:07:56.000 --> 00:08:01.000
次にフォーカスされたアイテムがセルフの場合は、フォーカスを示すためにスタイリングを適用します。

00:08:01.000 --> 00:08:07.000
以前にフォーカスされたアイテムがセルフの場合は、フォーカスされていない外観を復元します。

00:08:07.000 --> 00:08:16.000
didUpdateFocus(in: context)では、次または以前にフォーカスされたアイテムがこの環境に関連する場合にのみ変更を加える必要があります。

00:08:16.000 --> 00:08:26.000
これは、以前にフォーカスされたアイテムのすべての祖先環境と、次のフォーカスされたアイテムが、didUpdateFocus(in: context)への呼び出しを受けるためです。

00:08:26.000 --> 00:08:30.000
したがって、すべてのスーパービューとビューコントローラーがこの呼び出しを取得します。

00:08:30.000 --> 00:08:37.000
これにより、親が子供のフォーカスの変化に反応できる非常に柔軟な実装が可能になります。

00:08:37.000 --> 00:08:44.000
では、サイドバーや同様のコンテキスト変更UIに固有の機能を詳しく見てみましょう。

00:08:44.000 --> 00:08:47.000
選択と焦点は2つの異なる概念です。

00:08:47.000 --> 00:08:56.000
ただし、サイドバーでは、フォーカスを移動すると、選択が続きます。

00:08:56.000 --> 00:09:05.000
同様に、タップして新しいセルを選択すると、フォーカスもこの新しく選択されたセルに移動します。

00:09:05.000 --> 00:09:09.000
これは「選択は焦点に従う」と呼ばれています。

00:09:09.000 --> 00:09:15.000
任意のテーブルまたはコレクションビューでこのプロパティを、ほとんどのセルで必要な動作に設定します。

00:09:15.000 --> 00:09:24.000
個々のセルの動作を変更したい場合は、デリゲートに selectionFollowsFocus ForItemAtIndexPath を実装します。

00:09:24.000 --> 00:09:37.000
selectionFollowsFocusをオフにすると、セルを選択すると、同じ列に新しいビューコントローラーをプッシュしたり、アラートを表示したりするなど、破壊的なアクションが発生する場合に便利です。

00:09:37.000 --> 00:09:44.000
たとえば、写真では、「新しいアルバム」を選択すると、アルバムの名前を尋ねるアラートが表示されます。

00:09:44.000 --> 00:09:48.000
デリゲートを使用する場合、プロパティの価値は依然として重要です。

00:09:48.000 --> 00:09:58.000
selectionFollowsFocusをコレクションビューの全体的な意図に設定し、デリゲートを使用して個々のセルの特別な動作を表現します。

00:09:58.000 --> 00:10:04.000
システムは、適切な動作を選択する際に両方の値を考慮に入れます。

00:10:04.000 --> 00:10:11.000
では、アプリの構造を表現するキーボードナビゲーションの新機能であるフォーカスグループを見てみましょう。

00:10:11.000 --> 00:10:22.000
UIKitは階層からフォーカスグループを自動的に推測しますが、タブキーがアプリ内でフォーカスを移動する方法をカスタマイズするために明示的に宣言することもできます。

00:10:22.000 --> 00:10:25.000
tvOSは指向性フォーカスのみを使用します。

00:10:25.000 --> 00:10:33.000
Siri Remoteをスワイプするか、キーボードの矢印キーを使用するだけで、すべての要素にアクセスできます。

00:10:33.000 --> 00:10:42.000
一方、iPadOSとMac Catalystには、キーボードでナビゲートする2つの異なる方法があります。矢印キーとタブキーです。

00:10:42.000 --> 00:10:49.000
tvOSとは異なり、矢印キーはアプリの定義された領域内でのみフォーカスを移動します。

00:10:49.000 --> 00:10:52.000
これらの分野はフォーカスグループと呼ばれています。

00:10:52.000 --> 00:11:03.000
たとえば、上下の矢印キーを使用してリマインダーのリストをナビゲートできます。

00:11:03.000 --> 00:11:11.000
リストをナビゲートするには、タブキーを押して検索フィールドに集中し、タブをもう一度押してリストに移動できます。

00:11:11.000 --> 00:11:18.000
タブをもう一度押すと、フォーカスループがリマインダーに戻ります。

00:11:18.000 --> 00:11:28.000
リマインダー、検索フィールド、およびリストはそれぞれフォーカスグループであり、タブキーはそれらの間でフォーカスを移動します。

00:11:28.000 --> 00:11:33.000
フォーカスがグループに移動すると、そのグループ内でフォーカスするアイテムを選択します。

00:11:33.000 --> 00:11:39.000
そのアイテムはグループのプライマリアイテムと呼ばれます。

00:11:39.000 --> 00:11:42.000
グループのプライマリアイテムは変更できます。

00:11:42.000 --> 00:11:46.000
例えば、ここでは2番目のリマインダーに焦点を当てます。

00:11:46.000 --> 00:11:59.000
フォーカスシステムは、このグループから切り替えるとこれを記憶し、リマインダーに戻ると、このアイテムがグループのプライマリアイテムになったため、フォーカスは再び2番目のアイテムに移動します。

00:11:59.000 --> 00:12:04.000
タブキーは、各グループのプライマリアイテムを接続し、それらの間でフォーカスを移動します。

00:12:04.000 --> 00:12:08.000
これはタブループと呼ばれます。

00:12:08.000 --> 00:12:12.000
一部の環境では、デフォルトで独自のフォーカスグループを定義します。

00:12:12.000 --> 00:12:19.000
これらには、コレクションやテーブルビューなどのスクロールビューや、テキストフィールドやテキストビューなどのテキスト入力クラスが含まれます。

00:12:19.000 --> 00:12:27.000
環境が独自のグループを定義しない場合、親環境のグループ、通常はスーパービューまたはビューコントローラを継承します。

00:12:27.000 --> 00:12:33.000
たとえば、デフォルトでは、すべてのセルは自動的にコレクションビューのグループに属します。

00:12:33.000 --> 00:12:38.000
同じグループに属することで、矢印キーでセル間を移動できます。

00:12:38.000 --> 00:12:44.000
フォーカスグループを自分で定義するには、フォーカスグループ識別子を任意のビューまたはビューコントローラーに割り当てます。

00:12:44.000 --> 00:12:52.000
2つの環境が明示的または継承によって同じ識別子を共有する場合、それらは同じグループの一部です。

00:12:52.000 --> 00:12:58.000
グループのプライマリアイテムをカスタマイズするには、そのアイテムにフォーカスグループの優先順位を割り当てます。

00:12:58.000 --> 00:13:02.000
これは、アイテムがグループ内でどれほど重要であるかを定義します。

00:13:02.000 --> 00:13:08.000
優先順位が最も高い目に見えるアイテムは、グループのプライマリアイテムです。

00:13:08.000 --> 00:13:28.000
デフォルトでは、システムは事前定義された優先順位の1つを割り当てます。無視、デフォルトの優先順位。以前にフォーカスされた。優先順位付けされた、選択したセルのように、アイテムが他のアイテムよりも重要であることを示す。そして現在フォーカスされている、これは可能な限り最高の優先順位です。

00:13:28.000 --> 00:13:35.000
アイテムの優先度をシステムが提供する優先度以下に下げることはできないことを理解することが重要です。

00:13:35.000 --> 00:13:40.000
代わりに、別のアイテムの優先順位を上げる必要があります。

00:13:40.000 --> 00:13:49.000
たとえば、.previouslyFocusedよりも高い優先度をセルに割り当てると、そのセルはそのグループの最後にフォーカスされた項目よりも重要になります。

00:13:49.000 --> 00:14:00.000
したがって、このカスタマイズされたセルと以前にフォーカスされたセルの両方が目に見える場合でも、優先順位が高いため、カスタマイズされたセルが主要なアイテムになります。

00:14:00.000 --> 00:14:04.000
だから、今、あなたはあなたのアイテムをグループ化する方法を知っています。

00:14:04.000 --> 00:14:07.000
次に、これらのグループがどのようにソートされるかに焦点を当てましょう。

00:14:07.000 --> 00:14:10.000
ここでは、リマインダーが再び見られます。

00:14:10.000 --> 00:14:17.000
前述のように、各テーブルとコレクションビュー、および各テキストフィールドは、独自のグループを定義します。

00:14:17.000 --> 00:14:29.000
前に見たように、タブキーを連続して押すと、検索フィールドからサイドバーのリスト、そして右側のリマインダーにフォーカスが合います。

00:14:29.000 --> 00:14:31.000
これはUIKitがデフォルトで行うことです。

00:14:31.000 --> 00:14:44.000
ただし、この種のコンテナビューを自分で構築した場合、すべてのグループが読み取り順にソートされ、上から下への末尾につながるため、フォーカスは検索フィールドから直接リマインダーに移動します。

00:14:44.000 --> 00:14:50.000
フォーカスシステムは、サイドバーが明確な列であることを知りません。

00:14:50.000 --> 00:14:56.000
検索フィールドとリストが1つの連続したブロックにソートされるように、それらを共通の親グループに配置することができます。

00:14:56.000 --> 00:15:02.000
これは、サイドバーのコンテナビューでフォーカスグループ識別子を定義することによって行われます。

00:15:02.000 --> 00:15:14.000
この新しいグループにはフォーカス可能なアイテムが直接含まれていませんが、タブループは、リマインダーリストに移動する前に、検索フィールドグループからリストグループに移動します。

00:15:14.000 --> 00:15:20.000
多くの標準的なUIKitプレゼンテーションは、すでにこれらの中間グループを提供しています。

00:15:20.000 --> 00:15:25.000
カスタムコンテナビューの場合、共通の祖先に対して独自のfocusGroupIdentifierを宣言します。

00:15:25.000 --> 00:15:30.000
フォーカスグループは、アプリの視覚構造を定義する簡単な方法です。

00:15:30.000 --> 00:15:33.000
タブループの固定順序を定義する必要はありません。

00:15:33.000 --> 00:15:44.000
代わりに、システムはフォーカスグループを使用して、読み取り方向、レイアウト、および可視性を考慮したタブループの順序を導き出し、一貫したエクスペリエンスを提供します。

00:15:44.000 --> 00:15:48.000
アプリでフォーカスグループをカスタマイズする場合、UIFocusDebuggerはあなたの友達です。

00:15:48.000 --> 00:15:56.000
checkFocusGroupTree（環境の場合：）を呼び出すと、渡された環境から始まるフォーカスグループ構造が印刷されます。

00:15:56.000 --> 00:16:02.000
フォーカスシステム自体を渡すことで、現在のすべてのグループを見ることもできます。

00:16:02.000 --> 00:16:07.000
さて、このテキスト構造は役に立ちますが、デバッグツールがもう1つあります。

00:16:07.000 --> 00:16:10.000
フォーカスグループとリマインダーで見せたスクリーンショットを覚えていますか？

00:16:10.000 --> 00:16:13.000
実際にあなたのアプリでこれをライブで入手できます。

00:16:13.000 --> 00:16:21.000
有効にすると、フォーカスループデバッガは、オプションキーを長押しすると、アプリのタブループの順序を視覚化します。

00:16:21.000 --> 00:16:26.000
また、オプションとコントロールを押すと、フォーカスグループの視覚化が得られます。

00:16:26.000 --> 00:16:32.000
このモードでは、グループの主要項目は点線で示されます。

00:16:32.000 --> 00:16:37.000
それを有効にするには、Xcodeのスキーム設定に移動し、「実行」を選択し、次に「引数」を選択します。

00:16:37.000 --> 00:16:45.000
次に、起動引数-UIFocusLoopDebuggerEnabled YESを追加し、その前にダッシュを置くことを忘れないでください。

00:16:45.000 --> 00:16:50.000
これで、Xcodeからアプリを実行するたびに、このデバッグオーバーレイはアプリですぐに利用できます。

00:16:50.000 --> 00:16:54.000
これは、iPadOSとMac Catalystに焦点を当てる基本をカバーしています。

00:16:54.000 --> 00:17:01.000
キーボードナビゲーションで取り上げるトピックがもう1つあり、それはレスポンダーチェーンです。

00:17:01.000 --> 00:17:16.000
レスポンダーチェーンとフォーカスシステムの両方がキーボード入力を扱っているため、UIKitはこれらのシステムを可能な限り同期して、フォーカスされたアイテムが常にファーストレスポンダー内にあるか、ファーストレスポンダー自体であることを確認します。

00:17:16.000 --> 00:17:21.000
テキストフィールドとコレクションビューセルを備えた簡略化されたビュー階層を見てみましょう。

00:17:21.000 --> 00:17:29.000
現在、テキストフィールドはフォーカスされ、ソリッドリングで示され、破線リングで示されるファーストレスポンダーでもあります。

00:17:29.000 --> 00:17:37.000
フォーカスがこのコレクションビューセルに移動すると、UIKitは最初の応答器もこのセルに移動しようとします。

00:17:37.000 --> 00:17:46.000
このセルがcanBecomeFirstResponderからfalseを返す場合、システムはレスポンダーチェーンを反復してtrueを返すレスポンダーを見つけます。

00:17:46.000 --> 00:17:51.000
この場合、そのレスポンダはセルのビューコントローラーです。

00:17:51.000 --> 00:17:54.000
逆も真であることに注意してください。

00:17:54.000 --> 00:18:01.000
最初のレスポンダーが変更されると、フォーカスシステムはそのレスポンダー内で新しいフォーカス可能なアイテムを見つけようとします。

00:18:01.000 --> 00:18:11.000
最初のレスポンダーとフォーカスされたアイテムの間のこの関係により、重要なイベントは常にフォーカスされたアイテムに配信され、そこからレスポンダーチェーンを上に移動します。

00:18:11.000 --> 00:18:14.000
これにより、いくつかの興味深い新しい行動が可能になります。

00:18:14.000 --> 00:18:22.000
たとえば、セルがキーコマンドに応答してフォーカスされると、キーコマンドがそのセルに配信されます。

00:18:22.000 --> 00:18:26.000
これを使用する方法については、サンプルアプリをご覧ください。

00:18:26.000 --> 00:18:32.000
iPadOS 15用のアプリをアップデートするときは、becomeFirstResponderを呼び出す場所を意識してください。

00:18:32.000 --> 00:18:38.000
レスポンダーチェーンとフォーカスが同期されているため、ファーストレスポンダーを変更すると、フォーカスが強制的に更新されます。

00:18:38.000 --> 00:18:41.000
これはユーザーにとって非常に混乱を招く可能性があります。

00:18:41.000 --> 00:18:47.000
通常、特にフォーカスの更新に応じて、beonFirstResponderを呼び出すのを避けるのが最善です。

00:18:47.000 --> 00:18:51.000
フォーカスシステムは、すべてのアプリで一貫したエクスペリエンスを提供します。

00:18:51.000 --> 00:18:55.000
これを行うには、特定のキーコマンドの優先順位が必要です。

00:18:55.000 --> 00:19:03.000
アプリがタブや下矢印などのキーコマンドを使用している場合、iOS 15 SDKでコンパイルすると、そのキーコマンドは機能しなくなります。

00:19:03.000 --> 00:19:08.000
このキーコマンドを使用して独自のカスタムキーボードナビゲーションを構築する場合は、そのままにしておくことができます。

00:19:08.000 --> 00:19:13.000
以前のバージョンでは動作し、iPadOS 15ではフォーカスシステムが引き継ぎます。

00:19:13.000 --> 00:19:16.000
それ以外の場合は、このキーコマンドを再マップします。

00:19:16.000 --> 00:19:26.000
本当にこのキーコマンドを引き続き使用したい場合は、キーボードナビゲーションが壊れていないことを確認してから、wanesPriorityOverSystemBehaviorをtrueに設定してください。

00:19:26.000 --> 00:19:33.000
キーボードショートカットの改善についてもっと知りたい場合は、「iPadアプリを次のレベルに引き上げる」をチェックしてください。

00:19:33.000 --> 00:19:47.000
pressesBegan、pressesChanged、pressesEnded、pressesCancelledを実装して手動でプレスを処理する場合は、これらのメソッドをすべて実装し、処理しないプレスに対してスーパーを一貫して呼び出してください。

00:19:47.000 --> 00:19:53.000
iPadOS 15とMac Catalystのキーボードナビゲーションは、ユーザーにとって強力なツールです。

00:19:53.000 --> 00:19:58.000
コレクションビューとテーブルビューを集中可能にして、優れたユーザーエクスペリエンスを提供します。

00:19:58.000 --> 00:20:02.000
キーボードナビゲーションと衝突しないように、キーコマンドを更新してください。

00:20:02.000 --> 00:20:11.000
また、優れた検索体験の構築、カスタム選択、フォーカスガイドなど、さらにいくつかの機能を説明するサンプルアプリをチェックしてください。

00:20:11.000 --> 00:20:16.000
iPadOS 15のキーボードナビゲーションで構築しているものを見るのが待ちきれません。

00:20:16.000 --> 00:20:17.000
ご覧いただきありがとうございます。

00:20:17.000 --> 23:59:59.000
[パーカッシブミュージック]。

