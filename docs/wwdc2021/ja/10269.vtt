WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Itai Rom：「高度なXcode Cloudワークフローのカスタマイズ」へようこそ。

00:00:12.000 --> 00:00:17.000
私の名前はイタイで、後で同僚のヤンが参加します。

00:00:17.000 --> 00:00:20.000
今年はXcode Cloudを導入します。

00:00:20.000 --> 00:00:27.000
Xcode Cloudは、Xcodeに組み込まれた継続的な統合および配信サービスであり、Apple開発者専用に設計されています。

00:00:27.000 --> 00:00:34.000
他のセッションでは、エンドツーエンドのワークフローを設定して、アプリを継続的に構築、テスト、配布する方法を示しました。

00:00:34.000 --> 00:00:42.000
このセッションでは、チームのニーズに合うようにXcode Cloudをカスタマイズするために使用できる、より高度な機能について説明します。

00:00:42.000 --> 00:00:52.000
Xcode Cloudは、開発者のウェブサイト、TestFlight、App Store ConnectなどのAppleの開発者ツールやサービスとすぐに統合するように設計されています。

00:00:52.000 --> 00:01:00.000
また、すべての主要なGitベースのソースコントロールプロバイダーや、メッセージング用のSlackなど、必要不可欠な日々の開発ツールとも統合されます。

00:01:00.000 --> 00:01:07.000
ただし、パイプラインの重要な部分である社内または独自のツールやその他の外部サービスがあるかもしれません。

00:01:07.000 --> 00:01:15.000
このセッションでは、Xcode Cloudをカスタマイズして、これらのツールやサービスとうまく統合する方法を紹介します。

00:01:15.000 --> 00:01:18.000
4つのカスタマイズトピックを取り上げます。

00:01:18.000 --> 00:01:23.000
まず、環境変数を使用して余分な情報をビルドに渡すことについて説明します。

00:01:23.000 --> 00:01:29.000
ビルドで実行するアクションでスクリプトを使用してカスタムコマンドを実行する方法を学びます。

00:01:29.000 --> 00:01:33.000
また、ビルド中に必要な他のソースリポジトリを追加する方法。

00:01:33.000 --> 00:01:39.000
そして最後に、Webhookを使用してXcode Cloudをチームが使用する他のシステムと統合する方法。

00:01:39.000 --> 00:01:44.000
カバーすることがたくさんあるので、環境変数で直接入りましょう。

00:01:44.000 --> 00:01:53.000
プロジェクトのワークフローを計画および設定する際に、実行中のワークフローに応じて、ビルドの動作をわずかに異なるようにしたい場合があります。

00:01:53.000 --> 00:02:00.000
たとえば、アプリがAPIサービスに依存している場合、テストに本番環境ではなくステージング環境を使用したいと思うかもしれません。

00:02:00.000 --> 00:02:06.000
この場合、APIサービスの別のURLをテストに渡す必要があります。

00:02:06.000 --> 00:02:09.000
環境変数では、まさにそれを行うことができます。

00:02:09.000 --> 00:02:17.000
これらは、ビルドの動作をさらに制御するために使用できる情報を定義できるシンプルなキーと値のペアです。

00:02:17.000 --> 00:02:22.000
ワークフローの「環境」セクションで、必要な環境変数を設定できます。

00:02:22.000 --> 00:02:29.000
ワークフロー設定の一部であるため、ソースリポジトリに追加情報をコミットする必要はありません。

00:02:29.000 --> 00:02:37.000
ワークフローが実行されるたびに、定義した変数がアクションを実行している環境で設定されます。

00:02:37.000 --> 00:02:44.000
APIキーやアクセストークンなどの機密情報については、秘密の環境変数を設定できます。

00:02:44.000 --> 00:02:47.000
秘密の環境変数は安全に処理されます。

00:02:47.000 --> 00:02:55.000
それらは常に暗号化され、安全に保存され、復号化された値は、アクションの実行に使用される一時的な環境でのみ使用できます。

00:02:55.000 --> 00:03:03.000
値もログから編集され、非秘密変数のようにワークフローエディタで表示することはできません。

00:03:03.000 --> 00:03:05.000
環境変数を秘密にするのは簡単です。

00:03:05.000 --> 00:03:09.000
環境変数テーブルの「秘密」チェックボックスをチェックするだけです。

00:03:09.000 --> 00:03:20.000
環境変数の値はビューから非表示になり、変更を保存すると安全に保存され、ワークフローエディタで表示できなくなります。

00:03:20.000 --> 00:03:26.000
環境変数は、動作をカスタマイズし、追加情報をワークフローに渡すための便利なメカニズムを提供します。

00:03:26.000 --> 00:03:32.000
彼らは私たちの次の高度な機能と組み合わせてさらに強力です:カスタムスクリプト。

00:03:32.000 --> 00:03:41.000
Xcode CloudのワークフローとXcodeのスキームの間では、ワークフローで実行したいアクションを設定する方法に多くの柔軟性があります。

00:03:41.000 --> 00:03:50.000
しかし、アクション中にカスタムロジックや追加のコマンドを実行する必要がある場合があり、カスタムスクリプトはこれを達成するための強力で柔軟な方法を提供します。

00:03:50.000 --> 00:03:55.000
カスタムスクリプトは、作成してソースリポジトリに含めるシェルスクリプトです。

00:03:55.000 --> 00:03:59.000
カスタムスクリプトは、ワークフローの各アクションで実行されます。

00:03:59.000 --> 00:04:08.000
利用可能なスクリプトには、ポストクローンスクリプト、プレXcodebuildスクリプト、ポストXcodebuildスクリプトの3種類があります。

00:04:08.000 --> 00:04:19.000
Xcode Cloudがアクションを実行するたびに、一連のステップを実行し、その名前で示唆されているように、各カスタムスクリプトは、アクションの特定のポイントでステップとして実行されます。

00:04:19.000 --> 00:04:26.000
まず、Xcode Cloudは一時的な環境を設定し、プライマリリポジトリからソースコードをクローンします。

00:04:26.000 --> 00:04:30.000
その後、Xcode Cloudはクローン後のスクリプトを実行します。

00:04:30.000 --> 00:04:36.000
他のすべてのソース依存関係を解決した後、XcodeクラウドはXcodebuild前のスクリプトを実行します。

00:04:36.000 --> 00:04:41.000
次に、Xcode Cloudはアクションに対応するXcodebuildコマンドを実行します。

00:04:41.000 --> 00:04:49.000
Xcodebuildステップが終了すると、Xcode CloudはXcodebuild後のスクリプトを実行し、以前に生成したアーティファクトを保存します。

00:04:49.000 --> 00:05:02.000
ワークフローに複数のアクション（複数のビルドアクションなど）、またはビルド、テスト、分析、アーカイブアクションが含まれている場合、Xcode Cloudは各アクションの適切なタイミングでカスタムスクリプトを実行します。

00:05:02.000 --> 00:05:05.000
Xcode Cloudにカスタムスクリプトを追加するのは簡単です。

00:05:05.000 --> 00:05:16.000
適切な名前のシェルスクリプトを「ci_scripts」というフォルダに追加し、このフォルダをワークフローで使用しているプロジェクトファイルまたはワークスペースと同じレベルに配置するだけです。

00:05:16.000 --> 00:05:25.000
カスタムスクリプトはソースコードの一部であるため、プルリクエストでスクリプトの変更をテストしたり、さまざまなブランチで動作をカスタマイズしたりできます。

00:05:25.000 --> 00:05:33.000
Xcode Cloudがアクションを実行すると、適切なタイミングで各スクリプトの存在を判断し、存在する場合は実行します。

00:05:33.000 --> 00:05:36.000
カスタムスクリプトを実行するためにワークフローを設定する必要はありません。

00:05:36.000 --> 00:05:39.000
スクリプトがあれば、それらは実行されます。

00:05:39.000 --> 00:05:52.000
Xcode Cloudがスクリプトを見つけて実行するには、ci_scriptsフォルダの名前と内部のスクリプトがこの命名規則と正確に一致する必要があることに注意してください。

00:05:52.000 --> 00:06:00.000
ワークフローで設定した環境変数は、秘密の環境変数を含むカスタムスクリプトで使用できます。

00:06:00.000 --> 00:06:05.000
さらに、Xcode Cloudは、他のさまざまな有用な環境変数も提供します。

00:06:05.000 --> 00:06:15.000
これらの変数を使用してスクリプトにフロー制御を追加して、実行するコマンドがワークフロー中の正しいポイントで実行されるようにすることができます。

00:06:15.000 --> 00:06:26.000
たとえば、アクションがiOS、macOS、tvOS、またはwatchOSで実行されているかどうかを確認したい場合は、CI_PRODUCT_PLATFORM変数の値を使用できます。

00:06:26.000 --> 00:06:43.000
よりターゲットを絞ったシナリオでは、特定のワークフローのアーカイブアクション中にのみ実行したいコマンドがあります。コマンドを実行する前に、CI_XCODEBUILD_ACTIONとCI_WORKFLOW変数がアーカイブアクションと特定のワークフローと一致することを確認できます。

00:06:43.000 --> 00:06:46.000
カスタムスクリプトの動作を見てみましょう。

00:06:46.000 --> 00:06:49.000
私のチームは、Frutaというスムージー注文アプリに取り組んでいます。

00:06:49.000 --> 00:06:57.000
「Explore Xcode Cloud workflows」セッションでは、Frutaのようなアプリを構築、テスト、配布するためのワークフローを設定する方法を学びました。

00:06:57.000 --> 00:07:02.000
Xcode Cloudを使用して、プルリクエストを作成するたびにビルドおよびテストします。

00:07:02.000 --> 00:07:11.000
また、TestFlightを介してプルリクエストからのビルドをチームのメンバーに配布し、コードがマージされる前に変更を確認してサインオフできるようにします。

00:07:11.000 --> 00:07:18.000
今日は、チームメンバーがデバイスにインストールされているビルドがプルリクエストからのものであるかどうかをわかりやすくしたいと思います。

00:07:18.000 --> 00:07:24.000
プルリクエストから構築するときに、別のアプリアイコンを使用することでそれを行うことができます。

00:07:24.000 --> 00:07:28.000
推測したように、カスタムスクリプトを使用すると、簡単に設定できます。

00:07:28.000 --> 00:07:32.000
やり方を見てみましょう。

00:07:32.000 --> 00:07:35.000
Xcodeでは、私はすでにFrutaプロジェクトを開いています。

00:07:35.000 --> 00:07:40.000
カスタムスクリプトを追加する前に、まずプロジェクトにci_scriptsフォルダを追加する必要があります。

00:07:40.000 --> 00:07:51.000
これを行うには、プロジェクトナビゲーターでプロジェクトを選択し、下部のプラスボタンをクリックし、新しいグループを選択します。

00:07:51.000 --> 00:07:55.000
フォルダ名、ci_scriptsを入力します。

00:07:55.000 --> 00:08:09.000
次に、デザイナーが作成したベータアプリのアイコンセットをci_scriptsフォルダに追加して、カスタムスクリプトをビルド中に所定の位置に交換できるようにします。

00:08:09.000 --> 00:08:17.000
これを行うには、Finderからci_scriptsフォルダにドラッグします。

00:08:17.000 --> 00:08:24.000
シートで、選択したターゲットのチェックを外し、[完了]をクリックします。

00:08:24.000 --> 00:08:27.000
最後に、Xcodebuild前のスクリプトを追加しましょう。

00:08:27.000 --> 00:08:36.000
このスクリプトはXcodebuildコマンドの前に実行され、必要に応じてFrutaのデフォルトのアプリアイコンセットとベータアプリアイコンセットを交換するために使用します。

00:08:36.000 --> 00:08:48.000
私はすでに使用するスクリプトを作成したので、それをci_scriptsフォルダに追加するだけです。

00:08:48.000 --> 00:08:57.000
繰り返しますが、シート内のターゲットのチェックを外し、[完了]をクリックします。

00:08:57.000 --> 00:09:03.000
私のスクリプトが整ったので、それが何をするのかを詳しく見てみましょう。

00:09:03.000 --> 00:09:09.000
まず、ビルドがプルリクエストから来ている場合にのみ、アプリのアイコンが交換されていることを確認したい。

00:09:09.000 --> 00:09:16.000
Xcode Cloudが提供する環境変数の1つを使用して、ビルドがプルリクエストであるかどうかを実行時に確認できます。

00:09:16.000 --> 00:09:29.000
これにはプルリクエストに関連するさまざまな環境変数がありますが、この場合、CI_PULL_REQUEST_NUMBER環境変数が設定されていることを確認します。

00:09:29.000 --> 00:09:34.000
また、ベータアプリのアイコンは、TestFlightに配布されるビルドにのみ使用したいと考えています。

00:09:34.000 --> 00:09:40.000
Xcode CloudがビルドをTestFlightに配布するたびに、常にプロジェクトのアーカイブを最初に構築します。

00:09:40.000 --> 00:09:51.000
したがって、これをチェックする良い方法は、CI_XCODEBUILD_ACTION環境変数の値が「アーカイブ」であるかどうかを確認することです。

00:09:51.000 --> 00:10:06.000
これらの環境変数の両方が期待値を持つ場合、既存のアプリアイコンセットを削除し、rmコマンドとmvコマンドを使用してベータアプリアイコンセットに置き換えます。

00:10:06.000 --> 00:10:16.000
また、CI_WORKSPACE環境変数を使用して、デフォルトとベータアプリのアイコンセットの両方の正しいパスを構築していることに注意してください。

00:10:16.000 --> 00:10:23.000
残っているのは、これらの変更でプルリクエストを開き、Xcode CloudがFrutaを構築してTestFlightに配布するのを待つことだけです。

00:10:23.000 --> 00:10:28.000
今そのプロセスを歩くのではなく、事前にビルドを準備しました。

00:10:28.000 --> 00:10:33.000
ここで、Xcode Cloudは私のプルリクエストブランチからFrutaを構築し、配布しました。

00:10:33.000 --> 00:10:39.000
携帯電話のTestFlightアプリで、ビルドが追加したばかりの新しいベータアプリのアイコンを使用していることを確認できます。

00:10:39.000 --> 00:10:48.000
これで、プルリクエストをマージすることができ、チームの全員が自分のプルリクエストのビルドで同じベータアプリのアイコンを見始めます。

00:10:48.000 --> 00:10:54.000
Xcode Cloudでカスタムスクリプトを使用する方法を見たので、それらについて注意すべき重要なことがいくつかあります。

00:10:54.000 --> 00:11:04.000
カスタムスクリプトの標準出力と標準エラーは、実行したアクションのログに含まれており、アーティファクトタブからダウンロードすることもできます。

00:11:04.000 --> 00:11:14.000
スクリプトが期待どおりに実行されているように見える場合は、正しく名前を付け、プロジェクトまたはワークスペースの横にci_scriptsフォルダに配置したことを再確認してください。

00:11:14.000 --> 00:11:21.000
カスタムスクリプトの障害のトラブルシューティングを支援するために、有用なロギングと回復力を追加してください。

00:11:21.000 --> 00:11:30.000
たとえば、スクリプトが外部サービスにネットワーク要求を行う場合、冗長なロギングを有効にしてそれらの要求を再試行するロジックを含めることができます。

00:11:30.000 --> 00:11:34.000
さらに、Xcode Cloudはスクリプトの終了コードを尊重します。

00:11:34.000 --> 00:11:41.000
したがって、スクリプトがゼロ以外の値で終了した場合、Xcode Cloudはこれを失敗とみなし、全体的なアクションに失敗します。

00:11:41.000 --> 00:11:51.000
これを利用して、Xcode Cloudが残りのアクションを続ける前に、スクリプトで実行する必要があるコマンドが成功していることを確認することができます。

00:11:51.000 --> 00:11:57.000
最後に、テストアクションでは、テストの構築と実行に複数の環境が使用されることに注意してください。

00:11:57.000 --> 00:12:03.000
テストの構築に使用される環境のみが、デフォルトでソースコードが複製されます。

00:12:03.000 --> 00:12:07.000
テストを実行する環境では、ソースコードが複製されることはありません。

00:12:07.000 --> 00:12:10.000
Ci_scriptsフォルダのみが利用可能になります。

00:12:10.000 --> 00:12:24.000
その結果、ポストクローンスクリプトはこれらの環境では実行されず、カスタムスクリプトと他のシェルスクリプトや小さなツールなどの依存関係は、ci_scriptsフォルダ内に完全に含まれている必要があります。

00:12:24.000 --> 00:12:30.000
カスタムスクリプトと環境変数を使用すると、ワークフローの動作をカスタマイズするための2つの強力なツールがあります。

00:12:30.000 --> 00:12:41.000
次に、同僚のYanが、ワークフローでSwiftパッケージやその他の依存関係を利用できるように、Xcode Cloudで追加のリポジトリを使用する方法を紹介します。

00:12:41.000 --> 00:12:42.000
Yan Huang: ありがとう、イタイ。

00:12:42.000 --> 00:12:46.000
多くのプロジェクトは、ツール、ライブラリ、フレームワークを使用して構築されています。

00:12:46.000 --> 00:12:56.000
これらの依存関係は、多くの場合、プロジェクト間で共有されるGitリポジトリでホストされており、プロジェクトを正常に構築するために取得する必要があります。

00:12:56.000 --> 00:13:01.000
Xcode Cloudは、これらの追加のリポジトリを自動的に追加するのに役立ちます。

00:13:01.000 --> 00:13:09.000
たとえば、ユーザーが友達を招待し、Frutaアプリに飲み物を共有できるようにする新機能を追加したい。

00:13:09.000 --> 00:13:12.000
別のチームが同様の機能を実装しました。

00:13:12.000 --> 00:13:21.000
そのため、私のチームと共有されているプライベートGitリポジトリでホストされている「InvitationsKit」と呼ばれるパッケージを再利用します。

00:13:21.000 --> 00:13:25.000
このパッケージを追加する方法を見てみましょう。

00:13:25.000 --> 00:13:29.000
ここで私はFrutaプロジェクトでXcodeにいます。

00:13:29.000 --> 00:13:35.000
[ファイル]メニューからパッケージを追加し、[パッケージの追加]を選択できます。

00:13:35.000 --> 00:13:43.000
私はすでにNature Labsの共有パッケージコレクションを持っています。これには、組織内のパッケージのリストが含まれています。

00:13:43.000 --> 00:13:49.000
InvitationsKitを選択し、[パッケージの追加]をクリックします。

00:13:49.000 --> 00:14:11.000
依存関係が追加されたので、ソースコントロールメニューからこの新しい依存関係をコミットし、変更をブランチにプッシュします。

00:14:11.000 --> 00:14:18.000
Xcode Cloudでワークフローを設定し、ブランチから新しいコミットを受信したときに新しいビルドを開始します。

00:14:18.000 --> 00:14:21.000
したがって、この新しいコミットは新しいビルドを開始する必要があります。

00:14:21.000 --> 00:14:32.000
この依存関係を追加するのは初めてなので、Xcode CloudがInvitationsKitリポジトリにアクセスできないため、ビルドが失敗すると予想しています。

00:14:32.000 --> 00:14:37.000
しかし、Xcode Cloudはこの問題に対処するための簡単なUIを提供します。

00:14:37.000 --> 00:14:43.000
App Store ConnectのXcode Cloudに向かい、この新しいビルドを見てみましょう。

00:14:43.000 --> 00:14:46.000
予想通り、ビルドは失敗しました。

00:14:46.000 --> 00:14:56.000
Xcode Cloudは、リポジトリへのアクセスに問題があることを示す警告バナーを表示し、リポジトリへのアクセスを許可するオプションを提供します。

00:14:56.000 --> 00:15:03.000
先に進み、リポジトリの管理ボタンをクリックします。

00:15:03.000 --> 00:15:16.000
設定ページに移動し、招待キットリポジトリのリンクにカーソルを合わせ、グラントをクリックします。

00:15:16.000 --> 00:15:23.000
ソース管理サービスによっては、リポジトリにアクセスするためにXcode Cloudを承認するよう指示される場合があります。

00:15:23.000 --> 00:15:38.000
私は先に進み、GithubでInvitationsKitへのアクセスを提供しました。

00:15:38.000 --> 00:15:43.000
さて、Xcode Cloudを振り返ってみると、Access Grantedと表示されます。

00:15:43.000 --> 00:15:50.000
ビルドを再実行できるようになりました。

00:15:50.000 --> 00:15:54.000
今回はこのビルドが通過することを期待しています。

00:15:54.000 --> 00:16:02.000
「設定」の「追加リポジトリ」セクションに戻って、接続されているすべてのリポジトリを確認できます。

00:16:02.000 --> 00:16:07.000
使用されなくなった場合は、そこからアクセスを拒否することもできます。

00:16:07.000 --> 00:16:12.000
Xcode Cloudは、ビルド中に新しく参照されたリポジトリを検出します。

00:16:12.000 --> 00:16:22.000
Xcode Cloudがアクセスできない依存関係を追加すると、UIはこの問題を解決するための迅速かつ簡単な方法を提供します。

00:16:22.000 --> 00:16:32.000
これは、カスタムスクリプト内のリポジトリの複製やGitサブモジュールの参照など、あらゆるGit操作に有効です。

00:16:32.000 --> 00:16:37.000
これは、他のすべての依存関係管理ツールにも適用されます。

00:16:37.000 --> 00:16:44.000
このデモでは、新しいSwiftパッケージコレクション機能を使用して、追加のパッケージを含めました。

00:16:44.000 --> 00:16:52.000
それについてもっと知りたい場合は、「コレクションを使用してSwiftパッケージを発見してキュレーションする」をチェックしてください。

00:16:52.000 --> 00:16:58.000
これまでのところ、Xcode Cloud内でビルドをカスタマイズする方法を実演しました。

00:16:58.000 --> 00:17:03.000
しかし、時にはあなたとあなたのチームは、外部サービスを通じて協力したいと思うかもしれません。

00:17:03.000 --> 00:17:08.000
たとえば、新しいビルドの準備ができたら、ベータテスターに通知することをお勧めします。

00:17:08.000 --> 00:17:12.000
これは、ウェブフックが助けに来ることができる場所です。

00:17:12.000 --> 00:17:17.000
Webhookは、Xcode Cloudがサービスと通信する方法を提供します。

00:17:17.000 --> 00:17:28.000
ビルドライフサイクルのさまざまな段階で送信される豊富なペイロードにより、ワークフローをさらに自動化し、チームのコラボレーションを向上させることができます。

00:17:28.000 --> 00:17:31.000
それについてもっと知るために飛び込みましょう。

00:17:31.000 --> 00:17:39.000
Xcode CloudでWebhookを設定して、ビルドの3つの異なる段階でリアルタイムの更新を受け取ることができます。

00:17:39.000 --> 00:17:56.000
まず、ビルドが作成されたとき、コードをプッシュしたか、手動でビルドを開始したため、次に、ビルドが開始されたとき、最後に、ビルドが失敗したか成功したかに関係なく、ビルドが完了したとき。

00:17:56.000 --> 00:18:05.000
プロジェクトに新しいWebhookを追加する方法を見てみましょう。Xcode CloudでWebhookを簡単に追加できます。

00:18:05.000 --> 00:18:08.000
左側の列にある[設定]タブをクリックします。

00:18:08.000 --> 00:18:14.000
Webhooksをクリックし、プラスボタンをクリックします。

00:18:14.000 --> 00:18:25.000
次に、Webhookの名前と、HTTPリクエストを受信して処理できるアプリまたはサービスへのURLを入力するよう求められます。

00:18:25.000 --> 00:18:28.000
次に、[保存]をクリックします。

00:18:28.000 --> 00:18:33.000
Xcode Cloudでは、製品ごとに最大5つのWebhookを作成できます。

00:18:33.000 --> 00:18:40.000
簡単に識別できるように、各Webhookに固有の名前を指定してください。

00:18:40.000 --> 00:19:01.000
エンドポイントに送信されるペイロードは、App Store Connectアプリケーション、ワークフロー、製品、ビルドなど、ビルドと製品に関する情報を含むJSONブロブです。

00:19:01.000 --> 00:19:08.000
HttpRequestを介して送信されるペイロードを受信して処理するには、アプリまたはサービスを設定する必要があります。

00:19:08.000 --> 00:19:16.000
AWS LambdaでSwiftを使用してそれを達成する方法についてのサンプルコードを見てみましょう。

00:19:16.000 --> 00:19:19.000
まず、リクエストを受け取ります。

00:19:19.000 --> 00:19:23.000
次に、そのペイロードをJSONオブジェクトにデコードします。

00:19:23.000 --> 00:19:27.000
次に、ワークフローの名前とビルド状態を確認します。

00:19:27.000 --> 00:19:40.000
ワークフローがリリースワークフローであり、ビルド状態が成功した場合は、テストが利用可能であることをテスターまたはベータユーザーに知らせるメッセージをTwitterに投稿します。

00:19:40.000 --> 00:19:48.000
最後に、Webhookリクエストが正常に処理されたことを確認するため、200ステータスコードを返します。

00:19:48.000 --> 00:19:59.000
Swiftサーバーレス機能の実行について詳しく知りたい場合は、WWDC 2020でこのセッションをチェックしてください。

00:19:59.000 --> 00:20:06.000
エンドポイントが成功したステータスコードを返さない場合、Xcode Cloudは再度リクエストを送信しようとします。

00:20:06.000 --> 00:20:14.000
また、Xcode Cloudを使用すると、エンドポイントに配信されたWebhookのコンテンツを簡単に検査できます。

00:20:14.000 --> 00:20:25.000
App Store ConnectでXcode Cloudに移動できます。設定とWebhookをクリックします。検査するWebhookを選択します。

00:20:25.000 --> 00:20:32.000
次に、異なるタイムスタンプでの配達のリストが表示され、興味のあるものを選択します。

00:20:32.000 --> 00:20:39.000
サービスに送信されたリクエストと受信した応答が表示されます。

00:20:39.000 --> 00:20:43.000
Xcode Cloud Webhooksでできることはたくさんあります。

00:20:43.000 --> 00:20:46.000
追加の例をいくつか紹介します。

00:20:46.000 --> 00:21:03.000
バグチェックシステムから問題を自動的に作成または解決できます。ビルドが失敗したときにページングシステムに通知を送信します。複雑なリリースワークフローの一部としてダウンストリームビルドを開始します。

00:21:03.000 --> 00:21:11.000
Webhookの徹底的なコンテンツを使用してワークフローを拡張することになると、空が限界です。

00:21:11.000 --> 00:21:14.000
このセッションで学んだことをまとめましょう。

00:21:14.000 --> 00:21:18.000
まず、ビルドの環境変数を渡す方法について学びました。

00:21:18.000 --> 00:21:28.000
次に、ビルドプロセスをカスタマイズするためのスクリプトを設定する方法と、プロジェクト内の追加のリポジトリを操作する方法を実演しました。

00:21:28.000 --> 00:21:36.000
最後に、ビルドライフサイクルのさまざまな段階でXcode Cloudからコールバックを受信するようにWebhookを設定する方法を学びました。

00:21:36.000 --> 00:21:40.000
これらの機能がチームの日々のワークフローを強化できることを願っています。

00:21:40.000 --> 00:21:41.000
ご覧いただきありがとうございます。

00:21:41.000 --> 23:59:59.000
♪

