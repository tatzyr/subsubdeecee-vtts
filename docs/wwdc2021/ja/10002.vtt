WEBVTT

00:00:02.000 --> 00:00:17.000
こんにちは、「watchOS 8の新機能」へようこそ。私の名前はジェイク・ベーレンスで、アップルのウォッチエバンジェリストです。

00:00:17.000 --> 00:00:45.000
watchOS 7は、ファミリーセットアップなどの機能で多くの新しい機会を開き、家族がiPhoneなしで接続を維持できます。複数のコンプリケーションにより、ウォッチフェイスのより豊かなエクスペリエンスを作成できます。ウォッチフェイスの共有では、誰かと共有したり、オンラインで投稿したりできる、お気に入りのコンプリケーションで自分のウォッチフェイスを作成できます。

00:00:45.000 --> 00:00:53.000
watchOS 8では、さらに素晴らしいWatchアプリ体験を作成するのに役立つトップリクエストのいくつかに焦点を当てました。

00:00:53.000 --> 00:00:57.000
話すことがたくさんあるので、飛び込みましょう。

00:00:57.000 --> 00:01:00.000
まずは常時表示です。

00:01:00.000 --> 00:01:12.000
Apple Watch Series 5とwatchOS 6では、常時表示ディスプレイが文字盤に搭載され、watchOS 8では、アプリに常時表示ディスプレイが導入されています。

00:01:12.000 --> 00:01:24.000
また、HealthKitデータのバックグラウンド配信とBluetoothスキャンを利用して、健康関連の合併症を最新の状態に保つ方法についても説明します。

00:01:24.000 --> 00:01:28.000
Apple Watchは時間の経過とともにより自立しています。

00:01:28.000 --> 00:01:33.000
watchOS 8では、地域ベースのユーザー通知を手首にもたらします。

00:01:33.000 --> 00:01:41.000
私は、これらが適切な場所で適切なタイミングで誰かに関連情報をもたらす方法について話します。

00:01:41.000 --> 00:01:52.000
最後に、watchアプリの開発と使用をさらに良くするwatchOS 8の新しいシステムとAPIの強化について話します。

00:01:52.000 --> 00:01:55.000
常時表示ディスプレイから始めましょう。

00:01:55.000 --> 00:02:02.000
常時表示ディスプレイを使用すると、手首を上げることなく、時計のコンテンツを見ることができます。

00:02:02.000 --> 00:02:06.000
手首を上げると、ディスプレイが再びアクティブになります。

00:02:06.000 --> 00:02:12.000
常時表示ディスプレイは、Apple Watch Series 5と6でサポートされています。

00:02:12.000 --> 00:02:19.000
watchOS 7では、常時オンの状態は、時間のオーバーレイでアプリのUIがぼやけて表示されました。

00:02:19.000 --> 00:02:31.000
watchOS 8 SDKでアプリを再構築すると、アプリのUIは代わりに暗い状態で表示され、誰かがUIをタップするとすぐにインタラクティブになります。

00:02:31.000 --> 00:02:40.000
常時オンの状態では、システムは誰かが見るのに十分な明るさを保ちながら、ディスプレイの全体的な明るさを自動的に下げます。

00:02:40.000 --> 00:02:51.000
アプリのUIをこの明るさの低下に適応させるために、isLuminanceReducedというSwiftUI環境プロパティを導入しています。

00:02:51.000 --> 00:03:00.000
特に重要な情報を強調し、非公開にしておくべき情報を隠すことで、この状態に対応できます。

00:03:00.000 --> 00:03:09.000
迅速な反復を支援するために、この環境プロパティのサポートをXcodeプレビューとシミュレータに含めました。

00:03:09.000 --> 00:03:15.000
シミュレータでは、ウィンドウのボタンをクリックして、リストダウンイベントをシミュレートします。

00:03:15.000 --> 00:03:22.000
これは、アプリのUIが常時オンの状態にどのように反応するかを見たいときに本当に役立ちます。

00:03:22.000 --> 00:03:28.000
それでは、常時オン状態のアプリのUIのいくつかの指導原則について話しましょう。

00:03:28.000 --> 00:03:34.000
アクティブ状態から常時オン状態への移行はシームレスに感じられるはずです。

00:03:34.000 --> 00:03:39.000
UIを大幅に変更したり、情報を再編成したりしないでください。

00:03:39.000 --> 00:03:45.000
そうでなければ、常時オン状態からアクティブへの移行は不快になります。

00:03:45.000 --> 00:03:50.000
アクティブなUIのコンテキストを維持することが鍵です。

00:03:50.000 --> 00:04:00.000
この例では、FitbodはUIを接地し、状態間で一貫性を保ちながら、より明るい要素と二次テキストの一部をさらに調光させます。

00:04:00.000 --> 00:04:05.000
次に、重要でない情報や要素を暗くする必要があります。

00:04:05.000 --> 00:04:17.000
二次テキスト、画像、または塗りつぶしがある場合は、それらを自分でさらに暗くして、強調表示して表示したい情報をより際立たせることができます。

00:04:17.000 --> 00:04:32.000
AnyListは、食料品の買い物リストを作成して共有し、レシピを整理するのに役立ち、リストアイテムの背景を削除し、ギリシャヨーグルトの味や牛乳の量などの二次情報をさらに暗くします。

00:04:32.000 --> 00:04:42.000
これにより、ショッピングカートを押したり、買い物かごを運んだりする可能性があるため、メインリストアイテムのタイトルがさらに目を見やすくなります。

00:04:42.000 --> 00:05:00.000
UIに色や画像で満たされた大きな要素がある場合は、それらの要素をストロークまたは薄暗い色で表現するように減らし、UIのグラウンディングを再び維持しますが、強調表示された情報を表示できるようにします。

00:05:00.000 --> 00:05:10.000
この例では、Pandoraは下部に沿ったセカンダリコントロールを暗くし、アルバムのアートワークを削除し、似ているが薄暗い色を使用します。

00:05:10.000 --> 00:05:17.000
これは、曲名とアーティスト名を一目で強調するのに本当にうまく機能します。

00:05:17.000 --> 00:05:24.000
輝度が低下すると、機密情報を編集または削除することもできます。

00:05:24.000 --> 00:05:36.000
この例に示されている口座番号、残高、およびいくつかの個人的な健康データなどの情報は、誰かの手首が下がっている間に詮索好きな目から不明瞭にする良い候補者かもしれません。

00:05:36.000 --> 00:05:48.000
SwiftUIを使用した編集の詳細については、ウィジェットが同様の編集モデルを共有しているため、開発者アプリの「素晴らしいウィジェットの原則」ビデオを参照してください。

00:05:48.000 --> 00:05:57.000
最後に、アニメーションが発生している場合は、ループの最初のフレームにリセットするか、休んだ状態に解決する必要があります。

00:05:57.000 --> 00:06:00.000
アニメーションの途中でそれらを残さないのが最善です。

00:06:00.000 --> 00:06:12.000
常時オン状態でUIを最高に見せる方法がわかったので、手首を下げている間にアプリのUIを更新する方法の技術的な側面について話しましょう。

00:06:12.000 --> 00:06:23.000
ワークアウトセッションや継続的なランタイムを提供するオーディオセッションなど、進行中のアクティブなセッションがあるアプリでは、UIを1秒間に1回まで更新できます。

00:06:23.000 --> 00:06:35.000
これにより、カウンタ、メトリクス、その他のデータを最新の状態に保つことができますが、10分の1秒などのサブ秒の増分を削除する必要があります。

00:06:35.000 --> 00:06:41.000
アクティブなセッションのないアプリの場合、1分間に1回まで更新できます。

00:06:41.000 --> 00:06:54.000
システムが時計の文字盤に戻るまでのデフォルトのタイムアウトは2分ですが、顧客がこの設定を変更する可能性があるため、アプリがこれよりも長く表示されるように計画する必要があります。

00:06:54.000 --> 00:06:59.000
では、非アクティブなアプリがUIを更新する必要があることをどのように伝えますか?

00:06:59.000 --> 00:07:03.000
そのために、SwiftUIでTimelineViewを作成しました。

00:07:03.000 --> 00:07:09.000
TimelineViewはスケジュールを取り、日付に応じてビューを構築します。

00:07:09.000 --> 00:07:18.000
更新のスケジュールに関しては、アプリに適したことを何でもできるように、一握りのTimelineSchedulesを提供しました。

00:07:18.000 --> 00:07:22.000
毎分があり、毎分更新されます。

00:07:22.000 --> 00:07:31.000
これはまた、システムクロックと一致します。つまり、各更新はデバイスの分の上部で発生します。

00:07:31.000 --> 00:07:39.000
周期的には、2分ごとやアプリに適したものなど、間隔を設定できます。

00:07:39.000 --> 00:07:46.000
1分間隔で定期的なスケジュールを使用する場合、それらはシステムクロックに整列されません。

00:07:46.000 --> 00:07:54.000
これは、ワークアウトが開始されたときなど、特定のイベントに関連して更新のタイミングを測る必要がある場合に本当に便利です。

00:07:54.000 --> 00:08:07.000
1.5分後に更新が必要になり、2.5分後に更新が必要になるなど、特定の時間に発生する変更がある場合は、明示的です。

00:08:07.000 --> 00:08:09.000
カスタムもあります。

00:08:09.000 --> 00:08:20.000
毎分更新されるタイマーのようなものを持っているが、最後の60秒間1秒間に1回更新したい場合、これは本当にうまく機能します。

00:08:20.000 --> 00:08:35.000
アプリがアクティブなセッションではなく、このタイマーの最後の60秒のように、短期間でより高速な更新が必要だと私たちに言う場合、システムはそうしようとしますが、それらの更新は保証されません。

00:08:35.000 --> 00:08:39.000
最後に、アニメーションのスケジュールがあります。

00:08:39.000 --> 00:08:53.000
TimelineView、スケジュール、アニメーションなどの詳細については、開発者アプリの「SwiftUIの新機能」と「SwiftUIアプリに豊富なグラフィックを追加する」ビデオをご覧ください。

00:08:53.000 --> 00:08:58.000
私たちは、健康とフィットネスのアプリがApple Watchに与えた影響が大好きです。

00:08:58.000 --> 00:09:03.000
watchOS 8では、WatchアプリにHealthKitデータのバックグラウンド配信をもたらしました。

00:09:03.000 --> 00:09:13.000
これにより、アプリのパッシブヘルスモニタリングが開き、ファミリーセットアップ構成で使用されるスタンドアロンのWatchアプリに大きな影響を与える可能性があります。

00:09:13.000 --> 00:09:19.000
HealthKitデータのバックグラウンド配信を設定すると、iOSと同様に機能します。

00:09:19.000 --> 00:09:31.000
watchOSでは、新しい健康データが収集されたために述語が一致し、バックグラウンドオブザーバークエリが処理されると、アプリは結果を受信するためにウェイプされます。

00:09:31.000 --> 00:09:35.000
これは、Watchアプリで1時間に1回までできます。

00:09:35.000 --> 00:09:44.000
誰かがあなたのアプリのコンプリケーションをアクティブなウォッチフェイスに追加した場合、1時間に最大4回まで結果を受け取ることができます。

00:09:44.000 --> 00:10:00.000
これらの機会はすべて、アプリのバックグラウンドアプリの更新予算にカウントされるため、1時間あたり最大4つの結果しか追加されないため、他の理由でバックグラウンドアプリの更新ウェイクに影響を与える可能性があります。

00:10:00.000 --> 00:10:02.000
アップデート周波数について話しましょう。

00:10:02.000 --> 00:10:16.000
アプリに結果を配信すると、転倒イベント、低血中酸素飽和度、心拍数イベントなど、さまざまな重要なデータタイプに対してすぐに行います。

00:10:16.000 --> 00:10:24.000
影響を受けるデータ型の完全なリストについては、Apple Developer Webサイトの開発者ドキュメントを参照してください。

00:10:24.000 --> 00:10:29.000
他のすべてのデータタイプは、1時間ごとまたはより長い間隔で配信されます。

00:10:29.000 --> 00:10:40.000
また、アプリがApple Watch上の健康データの認知度を高めたことを顧客に知らせるために、HealthKit認証シートに新しい情報を追加しました。

00:10:40.000 --> 00:10:49.000
HealthKitデータのバックグラウンド配信は、ウォッチフェイスの健康とフィットネス関連の合併症に新たな可能性をもたらすと考えています。

00:10:49.000 --> 00:10:57.000
watchOS 4では、BluetoothデバイスがApple Watchに直接接続し、Core Bluetoothを使用できるようにしました。

00:10:57.000 --> 00:11:02.000
私たちはこれのいくつかの本当に信じられないほどの用途を見てきました。

00:11:02.000 --> 00:11:16.000
watchOS 8では、さらに一歩前進し、アクティブなウォッチフェイスにあるときにアプリのコンプリケーションが得られるバックグラウンドアプリの更新機会中にデバイスが接続できるようにしています。

00:11:16.000 --> 00:11:25.000
例えば、これは人々がQardioの医療グレードのECGで心臓病を監視することを可能にするQardioです。

00:11:25.000 --> 00:11:40.000
そして、これはSonra Watchで、米国以外のサッカーコーチやサッカーは、GPSトラッカーを使用してトレーニング中の選手のパフォーマンスの最大28のリアルタイムメトリックを監視することができます。

00:11:40.000 --> 00:11:54.000
バックグラウンドアプリの更新中にBluetooth接続を使用すると、アプリのコンプリケーションをBluetoothデバイスで最新の状態に保ち、1日を通して更新された情報を表示できることを意味します。

00:11:54.000 --> 00:12:04.000
バックグラウンドアプリの更新は、アクティブなウォッチフェイスにあるアプリのコンプリケーションに、1時間あたり最大4つの接続と更新の機会を提供します。

00:12:04.000 --> 00:12:11.000
これらの機会は、アプリの全体的なバックグラウンドアプリのリフレッシュ予算にカウントされることを忘れないでください。

00:12:11.000 --> 00:12:17.000
アプリがフォアグラウンドにあるときに、最初のデバイス接続を必ず設定してください。

00:12:17.000 --> 00:12:20.000
これはバックグラウンドからはできません。 バックグラウンドではできません。

00:12:20.000 --> 00:12:29.000
デバイスへの接続が確立されると、バックグラウンドアプリの更新により、アプリに接続して新しいデータを取得する機会が与えられます。

00:12:29.000 --> 00:12:35.000
また、非常に短期間でデータを接続して処理することも重要です。

00:12:35.000 --> 00:12:47.000
これを支援するために、WKRefreshBackgroundTaskに新しい有効期限ハンドラを追加したので、時間が足りず、今やっていることを終わらせる必要があるときに伝えることができます。

00:12:47.000 --> 00:12:51.000
これにより、必要に応じてアプリをクリーンアップし、優雅に劣化させることができます。

00:12:51.000 --> 00:12:59.000
詳細については、開発者アプリの「BluetoothデバイスをApple Watchに接続する」をご覧ください。

00:12:59.000 --> 00:13:02.000
Apple Watchは、常にあなたの上にあるデバイスです。

00:13:02.000 --> 00:13:15.000
独立したWatchアプリがより普及し、顧客がコーヒーや時計だけで店に行くためにますます不足するにつれて、場所は重要なことを把握するための重要な部分です。

00:13:15.000 --> 00:13:20.000
watchOS 8では、地域ベースのユーザー通知をApple Watchに導入しています。

00:13:20.000 --> 00:13:27.000
これは、ジオフェンスに基づいて重要なことを通知できることを意味します。

00:13:27.000 --> 00:13:33.000
たとえば、スロープを使用して、リフトにいるときにスキートレーニングを開始することを思い出させることができます。

00:13:33.000 --> 00:13:40.000
または、App in the Airを使用して空港に着いたときにフライト情報を受け取ることができます。

00:13:40.000 --> 00:13:46.000
watchOSの地域ベースのユーザー通知は、iOSと同様に機能します。

00:13:46.000 --> 00:13:56.000
顧客のプライバシーを保護するために、最初に静的な通知を受け取り、ボタンをタップして完全な動的通知を見ることができます。

00:13:56.000 --> 00:14:08.000
これにより、場所に基づいて通知トリガーに設定した地域に出入りする人に基づいて、事前に作成されたローカル通知を配信できます。

00:14:08.000 --> 00:14:15.000
これを利用するには、「使用中」の許可が必要であることを覚えておいてください。

00:14:15.000 --> 00:14:28.000
また、お気に入りの店舗の場所を設定するなど、誰かが明示的な意図を示した場所の近くの重要なポイントのみを含むように、地域の数を制限する必要があります。

00:14:28.000 --> 00:14:35.000
地域は、半径約数百メートルの場合、最も電力効率が高い。

00:14:35.000 --> 00:14:43.000
地域ベースのユーザー通知に加えて、watchOS 8はCore Locationの新しい位置情報ボタンをサポートしています。

00:14:43.000 --> 00:14:52.000
このボタンは、タップするたびに承認プロンプトを通過することなく、1回限りの位置認証を提供します。

00:14:52.000 --> 00:14:58.000
舞台裏では、それは「一度許可する」伝統的な承認のように機能します。

00:14:58.000 --> 00:15:07.000
位置情報ボタンは、位置情報を共有したいタイミングをより詳細に制御することで、人々から信頼を得る簡単な方法です。

00:15:07.000 --> 00:15:18.000
watchOS 8とiOS 15のCore Locationアップデートの詳細については、Developerアプリで利用可能な「Meet the location button」をご覧ください。

00:15:18.000 --> 00:15:24.000
また、Core Motionに新しい常時オンの高度計APIを導入しています。

00:15:24.000 --> 00:15:35.000
これにより、終日のバッテリー寿命への影響を最小限に抑え、誰かがアプリと位置情報を共有することなく、リアルタイムの標高更新にアクセスできます。

00:15:35.000 --> 00:15:44.000
watchOS 8に搭載される新機能とAPIとは別に、Watchアプリの開発と使用をこれまで以上に簡単にするために多くの機能強化を行いました。

00:15:44.000 --> 00:15:50.000
watchOS 8では、Apple Watchは睡眠中の呼吸数を測定できるようになりました。

00:15:50.000 --> 00:16:00.000
これにより、睡眠の詳細などのアプリは、呼吸数データを表示し、朝起きたときに変化を視覚化することができます。

00:16:00.000 --> 00:16:05.000
手足の違いがある人のために、Apple WatchにAssistiveTouchをお届けできることを嬉しく思います。

00:16:05.000 --> 00:16:14.000
アクションを実行し、UIをナビゲートするのに役立つ人の手のジェスチャーを認識できるので、これは本当にエキサイティングです。

00:16:14.000 --> 00:16:20.000
また、watchOS 8に大きなアクセシビリティテキストサイズを導入しています。

00:16:20.000 --> 00:16:30.000
Watchアプリをよりアクセスしやすくする方法の詳細については、Developerアプリの「Create accessible Experience for watchOS」をご覧ください。

00:16:30.000 --> 00:16:37.000
Watchアプリの単体テストとUIテストは、Xcode 12.5で導入されました。

00:16:37.000 --> 00:16:49.000
しかし、アプリをアクセシブルにすることがテスト可能にすることなので、watchOSの新しいアクセシビリティ機能により、アプリをよりアクセスしやすくする時間がかつてないほど良くなりました。

00:16:49.000 --> 00:17:01.000
watchOS 8はまた、iOSで見られるように、スクロールビューの上部に大きなタイトルを追加し、デバイス間でより一貫した感触を可能にします。

00:17:01.000 --> 00:17:13.000
テキスト入力はwatchOS 8で刷新され、誰かがアプリごとにスクリブルまたはディクテーションを好むかどうかを記憶し、テキストの入力中に入力タイプ間の変更にすばやくアクセスできるようになりました。

00:17:13.000 --> 00:17:23.000
これにより、より多くのテキストを簡単に入力でき、SwiftUIテキストフィールドでこの機能を無料で利用できます。

00:17:23.000 --> 00:17:30.000
新しい検索可能なAPIを使用すると、カスタマイズされた提案で検索フィールドをアプリに簡単に追加できます。

00:17:30.000 --> 00:17:36.000
検索フィールドに、候補が利用可能であることを示すボタンが表示されます。

00:17:36.000 --> 00:17:40.000
彼らがそれをタップすると、彼らはあなたのカスタマイズされた提案を見るでしょう。

00:17:40.000 --> 00:17:44.000
結果にカスタマイズされたUIを提供することもできます。

00:17:44.000 --> 00:17:53.000
開発者アプリの「SwiftUIでのクラフト検索体験」ビデオを見て、詳細を学ぶことができます。

00:17:53.000 --> 00:18:03.000
リストはスワイプアクションをサポートするようになったので、アイテムを削除することに加えて、お気に入りなどのカスタムアクションを実行できるようになりました。

00:18:03.000 --> 00:18:18.000
ボタンの役割は、破壊的なボタンタイプなどの特定のボタンタイプを表示および処理する方法をシステムに知らせますが、タップしたときにそれらのボタンに追加の触覚を与えるcontrolProminence修飾子も含まれています。

00:18:18.000 --> 00:18:30.000
また、SwiftUI Canvas APIはwatchOS 8でも利用できます。つまり、Apple Watchにある信じられないほどのGPUを使用して、豊富なプログラム描画を行うことができます。

00:18:30.000 --> 00:18:36.000
watchOS 8を搭載したApple Watchの新しい可能性に興奮する理由はたくさんあります。

00:18:36.000 --> 00:18:43.000
TimelineViewは、人の手首が下がっていて、一目で情報を取得する必要があるときに、UIを更新するのに役立ちます。

00:18:43.000 --> 00:18:48.000
これはすべてのアプリが採用すべきものなので、まずそれをチェックしてください。

00:18:48.000 --> 00:18:58.000
アプリの複雑さは、HealthKitデータとBluetooth接続のバックグラウンド配信により、最新の情報を取得する新しい方法を得ました。

00:18:58.000 --> 00:19:04.000
これは、合併症が一部の人々がWatchアプリを使用する主な方法であることをさらに支持します。

00:19:04.000 --> 00:19:09.000
一目でもっと届けることができれば、絶対にそうすべきです。

00:19:09.000 --> 00:19:15.000
地域ベースのユーザー通知により、場所がWatchアプリにとって何を意味するかが強化されました。

00:19:15.000 --> 00:19:23.000
これらを理にかなっている場所に採用することで、顧客がアプリに関わり続ける驚きと喜びの瞬間を追加できます。

00:19:23.000 --> 00:19:35.000
そして最後に、AssistiveTouchやSwiftUI Canvas APIなどの次のレベルの機能を利用すると、Watchアプリをこれまで以上に使いやすく、没入感のあるものにすることができます。

00:19:35.000 --> 00:19:38.000
私はあなたが作るものを見るために見ています。

00:19:38.000 --> 00:19:40.000
ありがとうございます。

00:19:40.000 --> 23:59:59.000
[音楽]。

