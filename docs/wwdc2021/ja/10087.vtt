WEBVTT

00:00:00.000 --> 00:00:12.000
こんにちは、私はパフォーマンスツールエンジニアのソニアです。

00:00:12.000 --> 00:00:19.000
今日、同僚のShreyasと私は、アプリでパワーとパフォーマンスの回帰を診断する方法を紹介します。

00:00:19.000 --> 00:00:23.000
毎年、あなたは可能な限り最高のアプリをリリースするために一生懸命働いています。

00:00:23.000 --> 00:00:32.000
アプリで素晴らしい体験にユーザーを招待したいので、パワーとパフォーマンスの最適化が非常に重要です。

00:00:32.000 --> 00:00:48.000
この講演では、アプリのパフォーマンスに影響を与える主要な指標、回帰を発見するのに役立つツール、ディスクの書き込みを減らすのに役立つ洞察、およびパフォーマンスワークフローを自動化するためのAPIについて説明します。

00:00:48.000 --> 00:01:01.000
パフォーマンスを最適化するために、アプリを変更することなく、Xcode OrganizerとApp Store Connect APIを通じて利用可能なメトリクスと診断の包括的なセットがあります。

00:01:01.000 --> 00:01:04.000
ご存知のように、パフォーマンスを最適化するのは簡単ではありません。

00:01:04.000 --> 00:01:11.000
非常に多くのメトリックと診断が利用できるので、情報の海で迷子になりやすいです。

00:01:11.000 --> 00:01:18.000
各リリースを前回よりも良くしたいが、パフォーマンスの優先順位を要約する簡単な方法が必要です。

00:01:18.000 --> 00:01:22.000
Xcodeオーガナイザーは、パフォーマンスを理解するための素晴らしいツールです。

00:01:22.000 --> 00:01:34.000
現在、バッテリー、起動、ハング、メモリ、ディスク書き込み、スクロールヒッチ、終了など、7つのメトリックカテゴリのデータを収集しています。

00:01:34.000 --> 00:01:36.000
それは処理すべき多くの情報です。

00:01:36.000 --> 00:01:41.000
次にXcodeオーガナイザーに飛び込んで、パフォーマンスの回帰を診断しましょう。

00:01:41.000 --> 00:01:44.000
アプリのさまざまな指標を見ることから始めます。

00:01:44.000 --> 00:01:49.000
左側のナビゲーションバーにある7つのメトリックカテゴリから選択できます。

00:01:49.000 --> 00:01:58.000
バッテリーや終端などの一部のカテゴリには、複数のセクションと、さまざまなイベントタイプを詳述するサブカテゴリがあります。

00:01:58.000 --> 00:02:06.000
オプションで、何十もの異なるデバイスタイプと、アプリのトップユーザーと典型的なユーザーのパーセンタイルから選択できます。

00:02:06.000 --> 00:02:11.000
オーガナイザーの中央には、過去16のリリースのデータを含むチャートが表示されます。

00:02:11.000 --> 00:02:16.000
この場合、アプリの終了を調査したいです。

00:02:16.000 --> 00:02:29.000
画面上のチャートは、最新バージョンで終了が大幅に増加したことを示しており、特に青色で強調表示されたより違法な命令の終了により、リリースに問題がある可能性があることを示しています。

00:02:29.000 --> 00:02:44.000
現場でのパフォーマンスを理解するために利用できる非常に豊富で興味深いメトリクスのセットがありますが、非常に多くのデバイスオプション、メトリクスカテゴリ、およびサブカテゴリがあるため、パフォーマンスを最適化するためにどこから始めるべきかは明らかではありません。

00:02:44.000 --> 00:02:53.000
そのため、主催者にインサイトセクションがあり、すべてのパフォーマンスの優先順位を強調し、ワークフローを合理化します。

00:02:53.000 --> 00:03:01.000
Xcodeオーガナイザーは現在、メトリクスデータを処理し、パフォーマンスの回帰などの興味深い傾向を特定します。

00:03:01.000 --> 00:03:07.000
飛び込む前に、パフォーマンス回帰とは何か、どのように検出されるかについて話しましょう。

00:03:07.000 --> 00:03:14.000
回帰は、最近のリリースと比較して、電力またはパフォーマンス領域でアプリのパフォーマンスが悪い場合に発生します。

00:03:14.000 --> 00:03:18.000
例えば、リリース後の起動に時間がかかる場合。

00:03:18.000 --> 00:03:25.000
この例では、メトリックは最近のリリースで分析され、値が上昇傾向にあるかどうかを判断します。

00:03:25.000 --> 00:03:30.000
その後、メトリックは過去数回のリリースで平均化され、最新の値と比較されます。

00:03:30.000 --> 00:03:40.000
メトリックが上昇傾向にあり、最新の値が過去数回のリリースの平均よりも高い場合、回帰としてフラグが付けられ、インサイトセクションに要約されます。

00:03:40.000 --> 00:03:52.000
この例では、アプリの起動に平均1.1秒かかりましたが、最後のリリースで突然2.5秒にジャンプし、回帰としてフラグが立てられていました。

00:03:52.000 --> 00:03:58.000
回帰がどのようにフラグ付けされるかがわかったので、主催者に戻って、いくつかの例を掘り下げてみましょう。

00:03:58.000 --> 00:04:00.000
回帰タブを見てみましょう。

00:04:00.000 --> 00:04:05.000
パフォーマンスの最優先事項を発見できるワンストップショップです。

00:04:05.000 --> 00:04:08.000
最近のリリース後、あなたのアプリは突然クラッシュしますか?

00:04:08.000 --> 00:04:12.000
そのクールな新しいカメラ機能は、デバイスのバッテリーを消耗していますか?

00:04:12.000 --> 00:04:16.000
これらの質問に対する答えは、インサイトセクションにあります。

00:04:16.000 --> 00:04:23.000
必要なすべてのデータは、現場でのパフォーマンスを理解するために、この移動先セクションで強調表示されます。

00:04:23.000 --> 00:04:31.000
ここでは、典型的なパーセンタイルと上位パーセンタイルのデバイス間で異なるメトリックカテゴリとサブカテゴリの回帰を発見できます。

00:04:31.000 --> 00:04:42.000
左側は、どのメトリックが回帰したか、どのくらい、どのパーセンタイルで回帰したかを要約し、さらに優れたアプリを作成するために何に焦点を当てる必要があるかを正確に強調します。

00:04:42.000 --> 00:04:48.000
私のアプリには、終端、メモリ、ディスク書き込みにわたっていくつかの回帰があります。

00:04:48.000 --> 00:04:52.000
次に、それぞれの例とそれらを解釈する方法を見ていきます。

00:04:52.000 --> 00:04:55.000
終了回帰から始めます。

00:04:55.000 --> 00:05:00.000
解雇を受ける前に、「なぜ私のアプリが殺されるのか」のビデオをチェックしてください。

00:05:00.000 --> 00:05:02.000
より多くの文脈のために。

00:05:02.000 --> 00:05:07.000
各回帰は、私の最新のアプリリリースからのすべてのトップ問題を要約します。

00:05:07.000 --> 00:05:15.000
セクションの上部には、不正な命令がクラッシュを引き起こしていることを示しています。これは、アプリが無効な関数ポインタにアクセスすると発生する可能性があります。

00:05:15.000 --> 00:05:21.000
さらに下には、私のアプリの最後の4つのリリースで違法な命令終了のチャートがあります。

00:05:21.000 --> 00:05:26.000
チャートの上部は、どのパーセンタイルとデバイスが影響を受けたかを示しています。

00:05:26.000 --> 00:05:33.000
この場合、すべてのiPhoneの上位パーセンタイルユーザーは、最新のリリースでより多くのクラッシュを経験しています。

00:05:33.000 --> 00:05:39.000
違法な命令出口の平均数と最新の数は、チャートの右側にあります。

00:05:39.000 --> 00:05:44.000
この場合、私のアプリは最新バージョンで10日ごとにクラッシュし始めました。

00:05:44.000 --> 00:05:52.000
画面上の終了は、ユーザーがホーム画面に戻って頻繁にアプリを再起動する必要があるため、非常に破壊的です。

00:05:52.000 --> 00:06:02.000
これらのクラッシュの原因となる無効な関数ポインタへの参照を削除し、クラッシュ診断を見てさらに掘り下げることができます。

00:06:02.000 --> 00:06:10.000
クラッシュ診断の詳細については、「Triage TestFlight crashes with Xcode」ビデオをご覧ください。

00:06:10.000 --> 00:06:18.000
回帰とクラッシュ診断を使用して、次のアプリのリリースで画面上の終了を減らす必要があることがわかった。

00:06:18.000 --> 00:06:22.000
私は画面上の終了で停止したくないし、私にできることがもっとあることを知っています。

00:06:22.000 --> 00:06:27.000
アプリの回帰をチェックして、改善のための他の分野を発見します。

00:06:27.000 --> 00:06:31.000
タスクのタイムアウトにも回帰があるようです。

00:06:31.000 --> 00:06:35.000
一部のメトリックは、複数のデバイスとパーセンタイルで退行する可能性があります。

00:06:35.000 --> 00:06:42.000
この場合、タスクのタイムアウトは、典型的なパーセンタイルと上位パーセンタイルの両方ですべてのiPhoneで増加しています。

00:06:42.000 --> 00:06:51.000
右側の各回帰をスクロールして、最近のリリースのデータと、メトリックの最新値と平均値を表示できます。

00:06:51.000 --> 00:06:58.000
アプリがバックグラウンドに切り替えられると、システムがタスクを終了する前に30秒でタスクを実行します。

00:06:58.000 --> 00:07:08.000
これは、バックグラウンドタスクを適切に終了しないと、アプリがより頻繁に終了し、ユーザーが次回切り替えるときに起動が遅くなる可能性があることを意味します。

00:07:08.000 --> 00:07:13.000
私のアプリは現在、バックグラウンドで3日ごとに終了しています。

00:07:13.000 --> 00:07:19.000
画面上の終了ほど破壊的ではありませんが、バックグラウンド終了ははるかに一般的になる可能性があります。

00:07:19.000 --> 00:07:25.000
アプリがバックグラウンドで終了した場合でも、シームレスな起動体験が不可欠です。

00:07:25.000 --> 00:07:33.000
UIKitの状態復元機能を統合して、バックグラウンドの出口からスムーズに回復できます。

00:07:33.000 --> 00:07:41.000
最後に、私のアプリの回帰に戻ると、私が集中する必要があるもう1つのパフォーマンス領域があります。

00:07:41.000 --> 00:07:49.000
ディスク書き込みは前回のリリースで28%増加しましたが、問題の原因は明らかではありません。

00:07:49.000 --> 00:07:56.000
パフォーマンスに問題があることは知っていますが、アプリを最適化する前に、どこから始めるべきかについてより多くの洞察が必要です。

00:07:56.000 --> 00:08:03.000
次に、Shreyasは、ディスク書き込み回帰の主な原因を発見する方法を説明します。

00:08:03.000 --> 00:08:04.000
ありがとう、ソニア。

00:08:04.000 --> 00:08:06.000
こんにちは、私はシュレヤスです。

00:08:06.000 --> 00:08:14.000
私はAppleのストレージソフトウェアエンジニアであり、ディスク書き込み回帰をデバッグし、アプリのパフォーマンスを把握する方法について説明します。

00:08:14.000 --> 00:08:18.000
しかし、これに飛び込む前に、なぜディスク書き込みがそんなに重要なのですか?

00:08:18.000 --> 00:08:22.000
ストレージは、CPUやメモリと非常によく似ていますが、限られたリソースです。

00:08:22.000 --> 00:08:26.000
チェックされていないディスクの書き込みは、基礎となるデバイスが摩耗し、損傷する可能性があります。

00:08:26.000 --> 00:08:31.000
彼らはまた、迷惑な画面上のハングやUIヒッチの一般的な原因です。

00:08:31.000 --> 00:08:36.000
私たちが注意しなければ、彼らはすぐにバッテリーの寿命を食い尽くす可能性があります。

00:08:36.000 --> 00:08:41.000
これらは、ディスク書き込みの最適化を優れたユーザーエクスペリエンスを確保するための重要なコンポーネントにします。

00:08:41.000 --> 00:08:47.000
それを念頭に置いて、高ディスク書き込みを診断するために利用可能なリソースについて学びましょう。

00:08:47.000 --> 00:08:51.000
Xcodeオーガナイザーのディスク書き込みレポートペインは素晴らしい出発点です。

00:08:51.000 --> 00:09:00.000
これらのレポートは、アプリ分析の共有に同意したデバイスから収集され、書き込みにつながったスタックトレースに関する情報が含まれています。

00:09:00.000 --> 00:09:08.000
各レポートのスタックトレースは複数の署名に分割され、書き込みはすべてのレポートで署名のために追跡されます。

00:09:08.000 --> 00:09:13.000
このレポートリストでは、署名は書き込みの合計に基づいてソートされて表示されます。

00:09:13.000 --> 00:09:28.000
各署名について、書き込みの原因を示す詳細なスタックトレースを見つけることができます。また、受信されたログの数、OSバージョンとハードウェアモデルの内訳などに関する統計情報を見つけることもできます。

00:09:28.000 --> 00:09:32.000
問題領域を特定するには、トップの署名に細心の注意を払ってください。

00:09:32.000 --> 00:09:38.000
この場合、トップシグネチャは書き込みの67%を担当します。

00:09:38.000 --> 00:09:42.000
コールスタックから、これはSQLite関数によるものだと推測できます。

00:09:42.000 --> 00:09:49.000
多くの場合、問題の原因であるこれを知ることは、問題の解決に大いに役立ちます。

00:09:49.000 --> 00:09:54.000
しかし、多くの場合、この場合のように、修正は明らかではないかもしれません。

00:09:54.000 --> 00:10:03.000
ここのコードは私の新機能にとって重要であり、明らかなバグは見当たりませんし、次のステップがどうあるべきかは明らかではありません。

00:10:03.000 --> 00:10:08.000
どこを見るべきかを知っていれば、答えはスタックトレースに存在することが判明しました。

00:10:08.000 --> 00:10:18.000
スタックの奥深くには、多くの場合、使用しているライブラリの関数があり、何が間違っているのか、十分な研究があれば、それを修正する方法を伝えることができます。

00:10:18.000 --> 00:10:20.000
しかし、それは非常に難しい場合があります。

00:10:20.000 --> 00:10:26.000
多くの場合、特定のドメインの知識が必要であり、非常に時間がかかる場合があります。

00:10:26.000 --> 00:10:32.000
このすべての労力を節約するために、Xcode 13では、オーガナイザーにはインサイトと呼ばれる新しいフィールドがあります。

00:10:32.000 --> 00:10:38.000
舞台裏では、リポジトリは高いディスク書き込みを引き起こす既知のアンチパターンで維持されています。

00:10:38.000 --> 00:10:45.000
レポートを受け取ると、これらのアンチパターンを示す機能がスキャンされます。

00:10:45.000 --> 00:10:52.000
一致がある場合、問題は問題を解決するための最適化の提案とともにここで強調表示されます。

00:10:52.000 --> 00:10:59.000
これにより、デバッグの労力を大幅に節約しながら、アプリの書き込みを減らし、パフォーマンスを向上させることが容易になります。

00:10:59.000 --> 00:11:05.000
たとえば、トップシグネチャの場合、インデックスを追加するための最適化の提案が表示されます。

00:11:05.000 --> 00:11:13.000
また、問題を詳細に説明し、問題をデバッグして修正する手順を説明するドキュメントページへのリンクもあります。

00:11:13.000 --> 00:11:14.000
すごい。

00:11:14.000 --> 00:11:16.000
さて、アドバイスに従って、それが役立つかどうか見てみましょう。

00:11:16.000 --> 00:11:21.000
これを行うには、ファイルアクティビティツールを起動させてください。

00:11:21.000 --> 00:11:27.000
ファイルアクティビティインストゥルメントは、ストレージに関連するすべての問題をデバッグするための素晴らしいリソースです。

00:11:27.000 --> 00:11:33.000
アプリが実行するすべての読み取りと書き込みの詳細な内訳が表示されます。

00:11:33.000 --> 00:11:38.000
それは私の修正を検証するのに最適なツールです。

00:11:38.000 --> 00:11:45.000
以前は、機器は一時ファイルへの約180メガバイトの書き込みを示していました。

00:11:45.000 --> 00:11:49.000
これにより、780ミリ秒のレイテンシも導入されます。

00:11:49.000 --> 00:11:55.000
そして今、インデックスの後、関数による書き込みはゼロに下がります。

00:11:55.000 --> 00:11:58.000
これは、SQLiteがより効率的になるためです。

00:11:58.000 --> 00:12:06.000
これは、780ミリ秒のレイテンシが遅くなっなくなったことを意味します。SQLiteインデックスはその一例です。

00:12:06.000 --> 00:12:19.000
アプリのパフォーマンスを向上させるための他の最適化提案の範囲があり、このリストを拡張するための継続的な作業があるので、今日あなたのアプリの洞察をチェックしてください。

00:12:19.000 --> 00:12:21.000
インサイトペインに戻りましょう。

00:12:21.000 --> 00:12:23.000
私たちのアプリには3つの回帰がありました。

00:12:23.000 --> 00:12:30.000
私たちはそれらのそれぞれを精査し、それらをすべて解決するために利用可能なリソースを発見しました。

00:12:30.000 --> 00:12:31.000
それはすごい。

00:12:31.000 --> 00:12:40.000
Xcodeオーガナイザーにはたくさんのパワーとパフォーマンスの分析があり、洞察はアプリのパフォーマンスの優先順位を発見するためのゴー・トゥ・ペインであるべきです。

00:12:40.000 --> 00:12:42.000
それを最大限に活用してください。

00:12:42.000 --> 00:12:48.000
回帰と洞察を定期的に、そして間違いなくすべてのリリース後にチェックすることを計画してください。

00:12:48.000 --> 00:12:57.000
Xcodeオーガナイザーに加えて、今日カバーされているすべての分析にアクセスする別の方法があり、それはApp Store Connect APIです。

00:12:57.000 --> 00:13:03.000
これらは、プログラムでデータにアクセスし、カスタムソリューションを構築したい場合に最適です。

00:13:03.000 --> 00:13:07.000
おそらく、あなたはすでに設定した分析パイプラインを持っています。

00:13:07.000 --> 00:13:12.000
これらのAPIは、これらすべてのクールな分析を統合するのに最適なツールです。

00:13:12.000 --> 00:13:19.000
WWDC 2020のビデオ「パワーとパフォーマンスAPIでトレンドを特定する」をチェックしてください。

00:13:19.000 --> 00:13:23.000
APIのエンドポイントとレスポンスを非常に詳細にカバーしています。

00:13:23.000 --> 00:13:27.000
APIの応答の概要を簡単に説明しましょう。

00:13:27.000 --> 00:13:33.000
メトリクスについては、perfPowerMetricsエンドポイントにGETリクエストを行うことができます。

00:13:33.000 --> 00:13:39.000
これは、最近のバージョンのアプリのメトリクスとインサイトを含むJSONレスポンスを返します。

00:13:39.000 --> 00:13:42.000
インサイトセクションに飛び込みましょう。

00:13:42.000 --> 00:13:47.000
インサイト内では、アプリで特定されたすべての回帰を見つけることができます。

00:13:47.000 --> 00:13:53.000
回帰ごとに、メトリックカテゴリと特定された回帰の概要があります。

00:13:53.000 --> 00:14:01.000
これは、Xcode Organizerで以前に発見した違法な命令による画面上の終了です。

00:14:01.000 --> 00:14:04.000
次に、人口セクションがあります。

00:14:04.000 --> 00:14:10.000
これは、影響を受けるパーセンタイルとデバイスの詳細で構造化されたリストを提供します。

00:14:10.000 --> 00:14:15.000
これらを使用して、アプリのパフォーマンスを向上させるための集中的なアクションを実行できます。

00:14:15.000 --> 00:14:22.000
同様に、診断レポートの場合、診断署名のエンドポイントにGETリクエストを行うことができます。

00:14:22.000 --> 00:14:30.000
応答にはトップ署名のリストがあり、各署名にはそれに関連付けられた詳細へのリンクがあります。

00:14:30.000 --> 00:14:38.000
このリンクへのGETリクエストは、詳細な診断ログと署名に関連する洞察を提供します。

00:14:38.000 --> 00:14:44.000
分析パイプラインでこれらのAPIを使用し、洞察が表示されたら、すぐに行動を起こしてください。

00:14:44.000 --> 00:14:51.000
これで、パフォーマンス回帰とは何か、それらをどのように診断できるか、そしてそれらを修正するための実用的なデータを見つけることができる場所がわかりました。

00:14:51.000 --> 00:14:54.000
次にやるべきことは次のとおりです。おく必要があります。

00:14:54.000 --> 00:14:58.000
今すぐXcodeオーガナイザーを開いてください。回帰ペインをチェックしてください。

00:14:58.000 --> 00:15:01.000
アプリのトップパフォーマンスの回帰が何であるかを確認してください。

00:15:01.000 --> 00:15:04.000
あなたのアプリがどれだけ書いているか調べてください。

00:15:04.000 --> 00:15:06.000
トップディスク書き込みコールスタックは、あなたが期待するものですか?

00:15:06.000 --> 00:15:09.000
それとも、アプリを遅くする隠れたバグがありますか?

00:15:09.000 --> 00:15:14.000
最後に、アプリのパフォーマンスを常に把握する計画を立ててください。

00:15:14.000 --> 00:15:20.000
Xcodeオーガナイザーを定期的にチェックし、カスタム分析パイプラインでApp Store Connect APIを使用してください。

00:15:20.000 --> 00:15:23.000
お時間をいただきありがとうございます。幸せな回帰狩り。

00:15:23.000 --> 23:59:59.000
[明るい音楽]。

