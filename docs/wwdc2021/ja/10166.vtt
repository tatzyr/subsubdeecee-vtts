WEBVTT

00:00:00.000 --> 00:00:11.000
こんにちは、私はビクトリアです。

00:00:11.000 --> 00:00:23.000
私はAppleのドキュメンテーションツールチームのエンジニアで、同僚のイーサンと一緒に、Xcode 13の新しいドキュメンテーション機能を紹介します。

00:00:23.000 --> 00:00:32.000
ワークフローに適合し、開発の新しい可能性を解き放つ、ドキュメントを読み書きする新しい方法があります。

00:00:32.000 --> 00:00:40.000
Xcode 13には、Swiftフレームワークとパッケージのドキュメントを構築、書き込み、閲覧するための新機能があります。

00:00:40.000 --> 00:00:49.000
これにより、コードの作成中にSwiftの依存関係に関するすべてを読むことができる、ドキュメント駆動型開発の強力なモードが解放されます。

00:00:49.000 --> 00:00:56.000
このドキュメントは、Xcodeの開発者ドキュメントウィンドウのプラットフォームライブラリのすぐそばにあります。

00:00:56.000 --> 00:01:21.000
このセッションでは、Xcode 13のドキュメント機能の概要を説明し、作成および使用しているSwiftフレームワークとパッケージのドキュメントの構築を順を順に説明し、Xcode 13を使用して優れたドキュメントを作成する方法を示し、Xcode 13でドキュメントを共有する方法を披露して仕上げます。

00:01:21.000 --> 00:01:26.000
私が新しいドキュメント機能に個人的に興奮している理由から始めましょう。

00:01:26.000 --> 00:01:28.000
私たちは皆そこに行ったことがあると確信しています。

00:01:28.000 --> 00:01:37.000
使いたい新しいフレームワークやパッケージがいくつかありますが、それをコードに統合する時が来たら、その中に何が入っているかを把握する必要があります。

00:01:37.000 --> 00:01:40.000
ここでXcode 13が介入します。

00:01:40.000 --> 00:01:52.000
現在、Xcodeにはドキュメントとコード用のコンパイラが付属しており、Xcode内でSwiftフレームワークとパッケージのドキュメントをビルドして表示できます。

00:01:52.000 --> 00:02:01.000
私たちはそれをDocCと呼び、ドキュメントの読み書き方法を強化するために、Xcode全体にすべて統合しました。

00:02:01.000 --> 00:02:07.000
現在、DocCは、事後に実行される単なるドキュメントコンパイラではありません。

00:02:07.000 --> 00:02:37.000
これは、Xcodeを補完する完全に統合されたドキュメント環境であり、ドキュメントがクイックヘルプに表示されるリッチなライブ環境を提供し、豊富なコード補完により、ドキュメントをまとまりのある全体にまとめることができ、統合された開発者ドキュメントウィンドウで利用可能な完全なドキュメント、XcodeとWebで表示するための事前構築されたドキュメントを共有するための簡単なオプションです。

00:02:37.000 --> 00:02:45.000
WWDC 2021での他のDocCセッションにご期待ください。これらすべてを詳細に説明します。

00:02:45.000 --> 00:03:05.000
DocCは、優れたリファレンスドキュメントを作成する権限を与え、XcodeとSwiftのパワーを活用して、フレームワークまたはパッケージ内のパブリックAPIの鳥瞰図をユーザーに提供し、APIがどのように連携するかを説明する機能を備えています。

00:03:05.000 --> 00:03:09.000
しかし、DocCを使用すると、優れたリファレンスドキュメントよりもはるかに多くのものを書くことができます。

00:03:09.000 --> 00:03:16.000
DocCでドキュメントを書くには、今年披露することに興奮している追加の2つの方法があります。

00:03:16.000 --> 00:03:28.000
記事では、フレームワークの背後にある全体像をユーザーに説明し、フレームワーク内の個々のアイテムをまとまりのあるストーリーと一緒に結びつける機会を提供します。

00:03:28.000 --> 00:03:36.000
そして、チュートリアルは、フレームワークを使用するプロジェクトを書くための強力なステップバイステップのウォークスルーです。

00:03:36.000 --> 00:03:47.000
ユーザーにフレームワークのガイド付き紹介をゼロから提供することで、参照ドキュメントや記事よりもはるかに深く掘り下げることができます。

00:03:47.000 --> 00:03:58.000
これらのオーサリング体験はすべて、Markdownの力とシンプルさを活用し、拡張して、ドキュメントのオーサリングをコードを書くのと同じくらい流動的にします。

00:03:58.000 --> 00:04:09.000
ソースコード以外の記事やチュートリアルを含むドキュメントカタログの組み立てについてもっと知りたい場合は、今年のWWDCでこれらのセッションをチェックしてください。

00:04:09.000 --> 00:04:25.000
そして最後に、今年後半にDocCをオープンソースとしてリリースし、構築されたドキュメントアーカイブをWeb上でホストできるWebアプリとともに、Xcodeの外部でもこれらの新しいドキュメントワークフローを活用できるようにします。

00:04:25.000 --> 00:04:36.000
Xcode 13の新しいドキュメント機能を味わったので、XcodeのDocCでドキュメントを構築することについて話しましょう。

00:04:36.000 --> 00:04:41.000
最初にボンネットの下を覗いて、それがどのように機能するかを見てみましょう。

00:04:41.000 --> 00:04:52.000
ドキュメントを構築するために、Xcodeはフレームワークまたはパッケージを構築し、コンパイルされたアーティファクトと一緒にパブリックAPIに関する情報を保存するようにコンパイラに依頼します。

00:04:52.000 --> 00:05:10.000
その後、その公開API情報はDocCに渡され、ソースコードの外部に書かれた記事やチュートリアルを含むドキュメントカタログと組み合わせて、コンパイルされたドキュメントを含む最終的なアーカイブを作成します。

00:05:10.000 --> 00:05:20.000
ドキュメントカタログとドキュメントの整理の詳細については、「XcodeでDocCドキュメントを昇格する」セッションをご覧ください。

00:05:20.000 --> 00:05:29.000
そして、DocCとXcodeのビルドシステムとの統合のおかげで、このプロセスは、ターゲットが依存するすべてのSwiftフレームワークとパッケージで繰り返されます。

00:05:29.000 --> 00:05:34.000
このようにして、すべての関連文書を1か所にまとめることができます。

00:05:34.000 --> 00:05:39.000
しかし、これはあなたの日々の文書化のニーズにとって何を意味しますか?

00:05:39.000 --> 00:05:47.000
Xcode 13でSwiftフレームワークとパッケージのドキュメントを構築するには3つの方法があります。

00:05:47.000 --> 00:05:55.000
オンデマンドでドキュメントを構築するには、ドキュメントをコンパイルしてロードするための新しいビルドドキュメントメニュー項目があります。

00:05:55.000 --> 00:06:05.000
また、Swiftフレームワークに取り組んでいて、常にドキュメントをプレビューしたい場合は、コンパイルするたびにドキュメントを構築するための新しいビルド設定もあります。

00:06:05.000 --> 00:06:13.000
また、コマンドラインとCIのニーズのために、xcodebuildにはドキュメントをビルドするための新しいコマンドもあります。

00:06:13.000 --> 00:06:21.000
これは、XcodeでBuild Documentationを選択するのと同じビルドを実行しますが、コマンドラインでxcodebuildを使用します。

00:06:21.000 --> 00:06:31.000
私の同僚のDavidは、「DocCドキュメントのホストと自動化」セッションで、ドキュメントワークフローの自動化に関する詳細情報を持っています。

00:06:31.000 --> 00:06:33.000
これを実際に見てみましょう。

00:06:33.000 --> 00:06:40.000
私のチームメイトは、かわいい小さなナマケモノのカタログ化とカスタマイズに関する SlothCreatorと呼ばれるこのパッケージに取り組んできました。

00:06:40.000 --> 00:06:45.000
私はそれを試してみたいので、それがXcode 13でどのように見えるか見てみましょう。

00:06:45.000 --> 00:06:53.000
Slothyと呼ばれるこのアプリを設定したので、SlothCreatorを使用してナマケモノをカスタマイズし、プレビューすることができます。

00:06:53.000 --> 00:07:04.000
私はすでに私のアプリの依存関係として SlothCreatorを設定しましたが、それが提供するAPIについてもっと見たいので、製品メニューを開きましょう...

00:07:04.000 --> 00:07:13.000
そして、ドキュメントのビルドを選択して確認します。

00:07:13.000 --> 00:07:27.000
そして、ちょうどそのように、開発者ドキュメントウィンドウが開き、ナビゲーターで、私は私のSlothyプロジェクトと私が作業している SlothCreatorパッケージを展開して、ナビゲーターの概要を見ることができます。

00:07:27.000 --> 00:07:37.000
SlothCreatorの概要をメインビューにロードし、下にスクロールすると、利用可能なタイプとプロトコルのリストが表示されます。

00:07:37.000 --> 00:07:40.000
ここでは、ハビタットと呼ばれるこのタイプを見ることができます。

00:07:40.000 --> 00:07:44.000
それをクリックしてページを読み込みましょう。

00:07:44.000 --> 00:07:49.000
ここには良い情報がありますが、他に何か言及しているものがあるかどうか疑問に思います。

00:07:49.000 --> 00:07:57.000
上部の検索フィールドを選択し、「生息地」を探しましょう。

00:07:57.000 --> 00:07:59.000
いくつかの異なることがこれについて言及しているように見えます。

00:07:59.000 --> 00:08:06.000
このスリープ方法をクリックして、ドキュメントページを表示しましょう。

00:08:06.000 --> 00:08:11.000
このページは睡眠方法に固有のものですが、これがどのタイプの一部なのか気になります。

00:08:11.000 --> 00:08:19.000
ウィンドウの上部にあるジャンプバーには、これがナマケモノタイプの一部であることがわかります。

00:08:19.000 --> 00:08:28.000
このナマケモノをクリックすると、プルダウンメニューが表示され、もう一度クリックすると、そのタイプのドキュメントページを開くことができます。

00:08:28.000 --> 00:08:31.000
今、私はこれらすべてのAPIがどのように組み合わされているかを把握しています。

00:08:31.000 --> 00:08:37.000
だから今、私たちは SlothCreatorのドキュメントを歩く機会がありました。

00:08:37.000 --> 00:08:41.000
巻き戻して、どうやってそのポイントにたどり着いたのか見てみましょう。

00:08:41.000 --> 00:08:47.000
私の同僚のイーサンは、素晴らしいドキュメントを書くためにXcode 13の新機能のいくつかを示すことから始めます。

00:08:47.000 --> 00:08:49.000
それを取り上げてください。

00:08:49.000 --> 00:08:51.000
ありがとう、ビクトリア。

00:08:51.000 --> 00:09:03.000
Xcode 13のドキュメントの構築と閲覧に関する優れたサポートについて確認したので、DocCでさらに優れたドキュメントを書くためのいくつかのコツをお見せしたいと思います。

00:09:03.000 --> 00:09:08.000
DocCは、インソースドキュメントの利点を中心に設計されています。

00:09:08.000 --> 00:09:17.000
ドキュメントをコードと一緒に書くと、既存の開発ワークフローと便利かつ簡単に統合できます。

00:09:17.000 --> 00:09:22.000
宣言にドキュメントを追加するには、その真上に特別な種類のコメントを書くだけです。

00:09:22.000 --> 00:09:27.000
これにより、将来行う可能性のあるコードの変更とドキュメントを簡単に同期させることができます。

00:09:27.000 --> 00:09:34.000
そしてもちろん、Git diffsのような既存のテキストベースのツールにぴったり合います。

00:09:34.000 --> 00:09:40.000
コードベースの将来のメンテナーに余分なコンテキストを提供するために、すでにソースコードにコメントを付けている可能性があります。

00:09:40.000 --> 00:09:47.000
Swiftや他の多くの言語では、2つのスラッシュで行を始めてコメントを書きます。

00:09:47.000 --> 00:09:55.000
これらのコメントを書くことで、将来のメンテナーがコードベース内で理解し、生産的になるのを助けるために長い道のりを歩んできました。

00:09:55.000 --> 00:09:59.000
しかし、今日のフレームワークの採用者を助けたい場合はどうなりますか?

00:09:59.000 --> 00:10:03.000
これがドキュメントのコメントのためのものです。

00:10:03.000 --> 00:10:13.000
3つのスラッシュで始まるコメントを書くことで、Swiftドキュメントコンパイラにコメントをそのすぐ下の宣言に関連付けるように指示します。

00:10:13.000 --> 00:10:21.000
コメントはシンボルのコンパイルされたドキュメントページに含まれ、フレームワークをインポートする人は誰でもアクセスできます。

00:10:21.000 --> 00:10:30.000
また、ブロックスタイルのコメントを使用する場合は、開始区切り文字に余分なアスタリスクを含めるだけで、そのスタイルでドキュメントコメントを作成できます。

00:10:30.000 --> 00:10:33.000
これが実際にどのように機能するか見てみましょう。

00:10:33.000 --> 00:10:39.000
ビクトリアが述べたように、ここ数ヶ月間、私たちはSlothCreatorフレームワークに取り組んできました。

00:10:39.000 --> 00:10:46.000
SlothCreatorは、かわいいナマケモノをカタログ化してカスタマイズするための機能を提供するSwiftパッケージです。

00:10:46.000 --> 00:10:58.000
SlothCreatorの開発者として、フレームワークの採用者が簡単に開始できることを確認したいので、私が取り組んだコードベースの部分にドキュメントコメントを追加することに取り組んできました。

00:10:58.000 --> 00:11:09.000
特に、私のフレームワークをインポートする人なら誰でもアクセスできるのはこれらのAPIであるため、 SlothCreatorのすべてのパブリックAPIが十分に文書化されていることを確認したい。

00:11:09.000 --> 00:11:16.000
同じ理由で、DocCはフレームワーク内のパブリックシンボルとオープンシンボルのドキュメントページのみを生成します。

00:11:16.000 --> 00:11:21.000
SlothCreatorには、まだ文書化が必要なシンボルがいくつかあります。

00:11:21.000 --> 00:11:23.000
この食品構造から始めましょう。

00:11:23.000 --> 00:11:31.000
まず、タイプの宣言の上に3つのスラッシュを追加して、ドキュメントコメントを作成します。

00:11:31.000 --> 00:11:36.000
そして、これは「ナマケモノが消費できる食べ物」だと書きます。

00:11:36.000 --> 00:11:45.000
私のドキュメントコメントの最初の行はシンボルの要約に変わりますが、ディスカッションセクションでいくつかの追加情報を追加したいと思います。

00:11:45.000 --> 00:11:52.000
要約の後に改行を追加し、ナマケモノが愛する食べ物の種類に関する詳細を追加して、今1つを追加します。

00:11:52.000 --> 00:12:01.000
また、DocCはMarkdownを完全にサポートしているため、Markdownのフェンスで囲まれたコードブロック構文を使用してコード例を追加できます。

00:12:01.000 --> 00:12:03.000
すごい。

00:12:03.000 --> 00:12:08.000
これは、食品構造の周りにいくつかの本当に役立つ追加のコンテキストを追加すると思います。

00:12:08.000 --> 00:12:12.000
ドキュメントを再構築して、私のドキュメントが今どのようになっているか見てみましょう。

00:12:12.000 --> 00:12:21.000
マウスを[製品]メニューに移動し、[ドキュメントのビルド]を選択することで、それを行うことができます。

00:12:21.000 --> 00:12:26.000
Xcodeは、フレームワーク自体と一緒に SlothCreatorのドキュメントを再構築します。

00:12:26.000 --> 00:12:35.000
そして、このビルドにビルドドキュメントボタンを使用したため、完了すると、ドキュメントビューアが更新されたドキュメントで開きます。

00:12:35.000 --> 00:12:41.000
しかし、私は実際に私たちがちょうど追加したコメントを確認するために食品構造体のページに直接行くことに興味があります。

00:12:41.000 --> 00:12:46.000
幸いなことに、Xcodeにはクイックヘルプと呼ばれる機能があり、それを行うことができます。

00:12:46.000 --> 00:12:54.000
クイックヘルプは、ソースエディタでシンボルのドキュメントの短い要約バージョンを提供します。

00:12:54.000 --> 00:13:01.000
Optionキーを押しながら食品の宣言をクリックすると、今すぐ試すことができます。

00:13:01.000 --> 00:13:09.000
しかし、 SlothCreatorの採用者は、コード内のフード構造体への参照をオプションでクリックすることで、同じビューを開くことができます。

00:13:09.000 --> 00:13:14.000
だから、私たちが書いたコメントは、要約とディスカッションのセクションにあります。

00:13:14.000 --> 00:13:22.000
しかし、要約されたビュー以上のものを探しているなら、Xcode 13の新機能には、Open in Developer Documentationのリンクがあります。

00:13:22.000 --> 00:13:34.000
クイックヘルプビューの右下隅にマウスを移動し、[開発者ドキュメントで開く]をクリックすると、ドキュメントウィンドウがそのシンボルのページに向かって開きます。

00:13:34.000 --> 00:13:36.000
すごい。

00:13:36.000 --> 00:13:40.000
SlothCreatorにはまだドキュメントが欠落しているもう1つのシンボルがあります。

00:13:40.000 --> 00:13:47.000
マウスをXcodeのナビゲーターに移動し、ナマケモノアイテムをクリックして、ナマケモノファイルを開きます。

00:13:47.000 --> 00:13:53.000
そして、下にスクロールすると、Eatメソッドにはまだドキュメントコメントが必要であることに気づいています。

00:13:53.000 --> 00:13:59.000
それでは、方法を文書化する最良の方法を簡単に見てみましょう。

00:13:59.000 --> 00:14:07.000
メソッドの宣言の上にトリプルスラッシュコメントを追加し、ドキュメントの要約を構成するテキストを追加することで、同じ方法から始めます。

00:14:07.000 --> 00:14:13.000
しかし、パラメータとして渡されることを期待していることも具体的に文書化する必要があります。

00:14:13.000 --> 00:14:16.000
パラメータセクションでこれを行います。

00:14:16.000 --> 00:14:28.000
パラメータセクションをドキュメントに追加するには、Markdownリスト項目を「パラメータ」という単語で始まり、メソッドのパラメータの名前、コロン、そしてそのドキュメントを入力します。

00:14:28.000 --> 00:14:37.000
今回は、戻り値区切り文字の後にコロンとメソッドが返すものの説明を書くことで、非常によく似た方法で戻り値セクションを追加できます。

00:14:37.000 --> 00:14:41.000
しかし、あなたの方法に複数のパラメータがある場合はどうなりますか?

00:14:41.000 --> 00:14:48.000
この場合、最善のことは、単一のパラメータ区切り文字から複数のパラメータ1に行くことです。

00:14:48.000 --> 00:14:54.000
これは、パラメータ名が親パラメータ区切り文字の子として書かれていることを除いて、他のものとほぼ同じように機能します。

00:14:54.000 --> 00:15:00.000
それでは、基本をやり直したので、ナマケモノの食べ方を文書化しましょう。

00:15:00.000 --> 00:15:08.000
これで、3つのスラッシュで始まるドキュメントコメントを手動で書くことで、フード構造を文書化するときと同じように始めることができます。

00:15:08.000 --> 00:15:21.000
しかし、私はより複雑なシンボルを文書化しているので、現在の宣言を文書化するのに最も適したテンプレートを挿入するXcodeの優れたドキュメントの追加機能を利用するつもりです。

00:15:21.000 --> 00:15:29.000
Commandキーを押したまま、メソッドの宣言をクリックしてアクションメニューを開くことで、これを行うことができます。

00:15:29.000 --> 00:15:39.000
次に、[アクション]メニューの[ドキュメントの追加]をクリックすると、メソッドの文書化を開始するのに最適なテンプレートがあります。

00:15:39.000 --> 00:15:50.000
まず、方法の概要を記入してから、食品と量のパラメータと、この方法が返すものについて説明します。

00:15:50.000 --> 00:15:58.000
そして、コード例とともにディスカッションセクションを追加して、ドキュメントを終了します。

00:15:58.000 --> 00:16:08.000
前回と同じように、マウスを製品メニューに移動し、ビルドドキュメント項目を選択することで、ドキュメントを再構築できます。

00:16:08.000 --> 00:16:13.000
そしてもう一度、Xcodeはフレームワーク自体と一緒に私のドキュメントを構築しています。

00:16:13.000 --> 00:16:21.000
今回は、ウィンドウのナビゲーターを介してナマケモノ構造体に移動し、ナマケモノのトピックグループでナマケモノを見つけます。

00:16:21.000 --> 00:16:30.000
ナマケモノのページを下にスクロールすると、インスタンスメソッドセクションで私のメソッドが見つかります...

00:16:30.000 --> 00:16:33.000
私の更新されたドキュメントと一緒に。

00:16:33.000 --> 00:16:35.000
私はすでにそれに本当に満足しています。

00:16:35.000 --> 00:16:42.000
このメソッドの入力と出力は本当に明確に定義されており、ここにも有用なコード例があります。

00:16:42.000 --> 00:16:46.000
これはほとんど準備ができていると思いますが、私たちはまだここで何かを見逃しています。

00:16:46.000 --> 00:16:54.000
ドキュメントのこのページを読んでいるだけなら、私はここで考慮すべき他の関連シンボルの素晴らしい文脈を持っていません。

00:16:54.000 --> 00:17:00.000
そして、 SlothCreatorのメンテナーとして、読者が次に学ぶことを検討すべき他のシンボルをいくつか呼び出したいと思います。

00:17:00.000 --> 00:17:06.000
さて、Xcode 13の新機能は、ドキュメントのシンボルにリンクする機能です。

00:17:06.000 --> 00:17:14.000
これは、フレームワークのさまざまな部分を接続し、関連する情報に読者を導くための本当に素晴らしい方法です。

00:17:14.000 --> 00:17:18.000
これらのリンクは、新しいダブルバックティック構文で記述します。

00:17:18.000 --> 00:17:21.000
例を見てみましょう。 例を見てみましょう。

00:17:21.000 --> 00:17:24.000
これが私たちが以前に文書化した方法、睡眠です。

00:17:24.000 --> 00:17:26.000
しかし、それは真空中には存在しません。

00:17:26.000 --> 00:17:30.000
実際、ナマケモノ構造体には別のプロパティがあります。

00:17:30.000 --> 00:17:43.000
ナマケモノの現在のエネルギーレベルを表す値があり、睡眠を呼び出すことの副作用の1つはナマケモノのエネルギーレベルの変化であることを読者が理解することが重要だと思います。

00:17:43.000 --> 00:17:49.000
だから、私はエネルギーレベルプロパティを参照して、ここで私のメソッドディスカッションセクションに追加します。

00:17:49.000 --> 00:17:58.000
Xcode 13より前は、これを行う自然な方法は、バックティックで囲んでモノスペースコードフォントでプロパティの名前を書くことです。

00:17:58.000 --> 00:18:04.000
しかし、今、私はダブルバックティック構文に変換し、リンクを作成することができます。

00:18:04.000 --> 00:18:16.000
さて、そのプロパティは私が文書化しているメソッドの兄弟であり、Swiftでローカル変数を参照するときと同じように、親タイプとのリンクをさらに修飾する必要がないので、energyLevelへのリンクは非常に簡単でした。

00:18:16.000 --> 00:18:20.000
プロパティの名前、energyLevelを書くことができます。

00:18:20.000 --> 00:18:25.000
しかし、別のタイプの子供を参照したい場合は、もう少し具体的にする必要があります。

00:18:25.000 --> 00:18:33.000
だから、ここで私はハビタット構造体の子供にリンクするためにハビタット/comfortLevelを書きます。

00:18:33.000 --> 00:18:35.000
すごい。

00:18:35.000 --> 00:18:40.000
食べる方法のドキュメントへのリンクを追加して、これが実際にどのように機能するかを見てみましょう。

00:18:40.000 --> 00:18:45.000
私はここで「彼らが食べ物を食べるとき、ナマケモノは...」と書くことから始めます。

00:18:45.000 --> 00:18:49.000
そして今、私はenergyLevelプロパティへのシンボルリンクを書くつもりです。

00:18:49.000 --> 00:18:55.000
だから私は2つのバックティックを入力し、それからエネルギーレベルを書き始めます。

00:18:55.000 --> 00:18:59.000
Xcodeのコード補完は、正しいリンクを取得していることを確認するのに役立ちます。

00:18:59.000 --> 00:19:04.000
先に進んでそのアイテムを選択します。

00:19:04.000 --> 00:19:12.000
そして、私はエネルギーレベルが「食品によって増加する」と言うでしょう--そして今、私は食品構造体の子供を参照するつもりです。

00:19:12.000 --> 00:19:16.000
もう一度2つのバックティックから始めます。

00:19:16.000 --> 00:19:24.000
そして、私は食べ物、フォワードスラッシュ、そしてエネルギーを書きます。

00:19:24.000 --> 00:19:31.000
私は今、2つのシンボルリンクを作成しました。これは、読者がこの方法に関する文脈をよりよく理解するのに役立つと思います。

00:19:31.000 --> 00:19:34.000
また、これらのリンクはクイックヘルプでもアクセスできます。

00:19:34.000 --> 00:19:41.000
したがって、Optionキーを押したままメソッドの宣言をクリックして、クイックヘルプポップオーバーを開きます。

00:19:41.000 --> 00:19:46.000
これは私たちが追加したディスカッションセクションであり、もちろん、ディスカッションでは2つのリンクです。

00:19:46.000 --> 00:19:52.000
そして、1つをクリックすると、ドキュメントウィンドウの参照シンボルのページに直行されます。

00:19:52.000 --> 00:20:03.000
SlothCreatorのすべてのパブリックAPIに良いドキュメントコメントを書いたので、同僚と共有し、ウェブで利用できるようにすることに本当に興奮しています。

00:20:03.000 --> 00:20:10.000
すべてのドキュメントビルドの一部としてXcodeが出力するドキュメントアーカイブを介してこれを行うことができます。

00:20:10.000 --> 00:20:16.000
ドキュメントアーカイブに含まれるのは、ウェブ上でドキュメントを共有するために使用できる単一ページのウェブアプリです。

00:20:16.000 --> 00:20:24.000
私の同僚のDavidは、彼の「DocCドキュメントをホストして自動化する」セッションで、それを行う方法について詳しく説明します。

00:20:24.000 --> 00:20:27.000
それをチェックすることを強くお勧めします。

00:20:27.000 --> 00:20:34.000
しかし、Xcodeは、ドキュメントウィンドウから直接ドキュメントのエクスポートとインポートもサポートしています。

00:20:34.000 --> 00:20:36.000
今、それを見てみましょう。 

00:20:36.000 --> 00:20:44.000
最初にマウスをウィンドウのナビゲーターに移動して、ドキュメントウィンドウから SlothCreatorをエクスポートします。

00:20:44.000 --> 00:20:50.000
SlothCreatorフレームワーク項目にカーソルを合わせると、コンテキストメニューアイコンが表示されます。

00:20:50.000 --> 00:20:55.000
クリックすると、エクスポートするオプションがあります。

00:20:55.000 --> 00:20:57.000
デスクトップに保存します。

00:20:57.000 --> 00:20:59.000
すごい。

00:20:59.000 --> 00:21:06.000
今、私はそれを同僚に送る準備ができています。アーカイブをダブルクリックするだけで、Xcodeのドキュメントウィンドウで開きます。

00:21:06.000 --> 00:21:12.000
しかし、私はすでに SlothCreatorについて知っているので、別のドキュメントアーカイブを開きたいと思います。

00:21:12.000 --> 00:21:24.000
私は最近、SlothCreatorにコマンドラインインターフェイスを追加することは素晴らしいことだとチームと話し合っており、私の同僚の一人は、ArgumentParserは役立つ素晴らしいオープンソースフレームワークであると述べました。

00:21:24.000 --> 00:21:29.000
ArgumentParserの最新のドキュメントアーカイブが送られてきたので、今すぐ開きましょう。

00:21:29.000 --> 00:21:37.000
ドキュメントアーカイブをダブルクリックするだけで、すぐに学習を開始できます。

00:21:37.000 --> 00:21:43.000
ドキュメンテーションは、成功し、長期的なフレームワークを開発するための鍵です。

00:21:43.000 --> 00:21:48.000
ソースに直接ドキュメントを書くことは、本当に便利で強力だと思います。

00:21:48.000 --> 00:21:59.000
そして、DocC統合を備えたXcode 13の新機能で、素晴らしいドキュメントを書くすべてのハードワークは、新しくて強力な方法で報われるでしょう。

00:21:59.000 --> 00:22:05.000
WWDCには他にもいくつかのセッションがあり、ドキュメントを次のレベルに引き上げるのに本当に役立ちます。

00:22:05.000 --> 00:22:16.000
「XcodeでDocCドキュメントを昇格する」は、このセッションが終了するところをピックアップし、ドキュメントカタログを追加してドキュメントをよりよく整理する方法を示します。

00:22:16.000 --> 00:22:29.000
先に述べた「DocCドキュメントのホストと自動化」では、ドキュメントを既存の継続的インテグレーションセットアップに統合する方法と、ドキュメントをオンラインでホストする方法について説明します。

00:22:29.000 --> 00:22:44.000
最後に、ステップバイステップの指示の恩恵を受ける可能性のあるフレームワークのより複雑な部分がある場合は、その方法を示す「DocCでインタラクティブなチュートリアルを構築する」をチェックすることをお勧めします。

00:22:44.000 --> 00:22:45.000
ご覧いただきありがとうございます。

00:22:45.000 --> 23:59:59.000
[パーカッシブミュージック]。

