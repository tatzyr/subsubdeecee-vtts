WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
アレックス・テレク:こんにちは、私はアレックスです。

00:00:10.000 --> 00:00:12.000
私はShazamチームのエンジニアです。

00:00:12.000 --> 00:00:14.000
このセッションにご参加いただきありがとうございます。

00:00:14.000 --> 00:00:22.000
今日は、カスタムカタログ認識を使用してShazamKitを使用してアプリのカスタムオーディオエクスペリエンスを作成する方法を紹介します。

00:00:22.000 --> 00:00:31.000
このセッションでは、カタログ、署名、メディアアイテムなど、既存のShazamKitの概念の一部を使用します。

00:00:31.000 --> 00:00:37.000
まだそれらに慣れていない場合は、「Explore ShazamKit」トークをチェックしてください。

00:00:37.000 --> 00:00:41.000
今日取り上げるものを見てみましょう。私たちは何をカバーするかを見てみましょう。

00:00:41.000 --> 00:00:46.000
カスタムオーディオとメタデータを使用してカタログを作成する方法について説明します。

00:00:46.000 --> 00:00:55.000
マイクとAVFAudioフレームワークを使用してオーディオを録音するときに、オーディオを独自のカスタムカタログに一致させる方法を学びます。

00:00:55.000 --> 00:01:01.000
次に、アプリをカスタマイズして、コンテンツをカスタムオーディオに同期させます。

00:01:01.000 --> 00:01:08.000
最後に、カスタムカタログを扱う際に使用できるベストプラクティスのいくつかを取り上げます。

00:01:08.000 --> 00:01:10.000
これはコードアロングです。

00:01:10.000 --> 00:01:16.000
開発者ポータルには、このセッションを通して使用するプロジェクトがあります。

00:01:16.000 --> 00:01:20.000
始める前にプロジェクトをダウンロードすることをお勧めします。

00:01:20.000 --> 00:01:26.000
学習がますますデジタルになるにつれて、私たちは子供たちを夢中にさせる方法を考え出す必要があります。

00:01:26.000 --> 00:01:35.000
Apple TVでビデオを再生して、適切なタイミングで質問を表示するコンパニオンアプリがあればどうでしょうか？

00:01:35.000 --> 00:01:45.000
今日は、カスタムカタログ認識を使用して教育ビデオに同期して反応するリモートアプリを構築する方法を紹介します。

00:01:45.000 --> 00:01:50.000
まず、カスタムカタログとは正確に何であり、どのように構築するのですか?

00:01:50.000 --> 00:01:56.000
カスタムカタログは、任意のオーディオから生成する署名のコレクションです。

00:01:56.000 --> 00:02:01.000
署名ごとに関連するメタデータを追加することもできます。

00:02:01.000 --> 00:02:06.000
カスタムカタログに署名を追加するには、SignatureGeneratorオブジェクトを使用できます。

00:02:06.000 --> 00:02:10.000
オーディオバッファをシグネチャに変換します。

00:02:10.000 --> 00:02:22.000
まず、シグネチャジェネレータを作成し、audioEngineのinputNodeでinstallTap機能を使用して、バッファとaudioTimeをジェネレータに追加します。

00:02:22.000 --> 00:02:27.000
バッファパラメータは、inputNodeの出力からキャプチャされたオーディオのバッファです。

00:02:27.000 --> 00:02:32.000
audioTimeは、バッファがキャプチャされた時刻です。

00:02:32.000 --> 00:02:40.000
audioFormatを指定するときは、サポートされているサンプルレートの1つでフォーマットがPCMであることを確認してください。

00:02:40.000 --> 00:02:46.000
ジェネレータの署名関数を呼び出すと、オーディオバッファが署名に変換されます。

00:02:46.000 --> 00:02:51.000
私たちはこれを参照署名と呼び、カスタムカタログに追加することができます。

00:02:51.000 --> 00:02:56.000
Shazamsignatureファイルを使用して、カタログに署名を追加することもできます。

00:02:56.000 --> 00:03:00.000
これは、デバイス間で共有できる不透明なファイルです。

00:03:00.000 --> 00:03:07.000
ShazamKitでカスタムカタログを簡単に採用できるように、このセッションでは、このファイルを含めました。

00:03:07.000 --> 00:03:12.000
始める前に、ダウンロードしたプロジェクトを開いて、そこに何があるか見てみましょう。

00:03:12.000 --> 00:03:18.000
質問オブジェクトを詳しく見てみましょう。 

00:03:18.000 --> 00:03:22.000
質問は、アプリ内のカスタムコンテンツを表します。

00:03:22.000 --> 00:03:26.000
まず、タイトルとオフセットがあります。

00:03:26.000 --> 00:03:29.000
タイトルは、ビデオのセクションを説明する文字列です。

00:03:29.000 --> 00:03:33.000
オフセットは、このセクションが表示される時刻です。

00:03:33.000 --> 00:03:38.000
例えば、45秒で、先生は数学の方程式について話し始めます。

00:03:38.000 --> 00:03:45.000
そのタイトルと45をオフセットとして質問を作成します。

00:03:45.000 --> 00:03:50.000
方程式は、数学の方程式を示す教育の瞬間を表します。

00:03:50.000 --> 00:03:53.000
これを増分ビルディングブロックとして使用できます。

00:03:53.000 --> 00:04:00.000
たとえば、方程式の左側と右側を異なるオフセットで表示したい場合があります。

00:04:00.000 --> 00:04:11.000
最後に、answerRangeとrequiresAnswerは、インタラクティブなUIがいつ表示されるかを示すために使用されるので、子供たちは質問に答える練習をすることができます。

00:04:11.000 --> 00:04:16.000
これが私たちの教育ビデオでどのように見えるかを見てみましょう。

00:04:16.000 --> 00:04:19.000
最初の質問は14秒から始まります。

00:04:19.000 --> 00:04:27.000
私は21秒で1つの赤いリンゴを持ち、25秒で3つの緑のリンゴを追加します。

00:04:27.000 --> 00:04:33.000
最後に、31秒で、学生は質問に答える機会があります。

00:04:33.000 --> 00:04:44.000
ビデオは通常、時、分、秒でフォーマットされるので、ここでやったようにオフセットを作成するには、まず時間を秒に変換する必要があります。

00:04:44.000 --> 00:04:52.000
たとえば、「3分14秒とは何ですか？」など、Siriに助けを求めることができます。

00:04:52.000 --> 00:04:57.000
では、コードに飛び込んで、カスタムカタログを使い始める方法を見てみましょう!

00:04:57.000 --> 00:05:06.000
まず、メタデータが関連付けられた署名を追加してカタログを作成します。

00:05:06.000 --> 00:05:13.000
ここには、カタログを作成する機能を備えたCatalogProviderがあります。

00:05:13.000 --> 00:05:24.000
カタログに追加する参照署名は、FoodMath.shazamsignatureと呼ばれます。

00:05:24.000 --> 00:05:29.000
そのファイルをロードして、そこから署名オブジェクトを作成しましょう。

00:05:29.000 --> 00:05:39.000
それを取得したら、メディアアイテムを使用してメタデータを定義します。

00:05:39.000 --> 00:05:46.000
タイトルやサブタイトルなど、定義済みのメディアアイテムのプロパティキーをいくつか設定します。

00:05:46.000 --> 00:05:49.000
これは教育ビデオを説明するつもりです。

00:05:49.000 --> 00:05:58.000
また、教師とエピソードの2つのカスタムキーを使用して、SHMediaItemPropertyに拡張機能を作成しました。

00:05:58.000 --> 00:06:04.000
エピソード番号と教師の名前を設定すると、カタログの内容がさらにカスタマイズされます。

00:06:04.000 --> 00:06:15.000
あなたが今しなければならないのは、customCatalogオブジェクトを作成することだけです。

00:06:15.000 --> 00:06:21.000
次に、addReferenceSignatureを呼び出し、署名とmediaItemオブジェクトを渡します。

00:06:21.000 --> 00:06:27.000
これにより、作成したばかりのメタデータが、ディスクからロードした参照署名に関連付けられます。

00:06:27.000 --> 00:06:29.000
完璧！

00:06:29.000 --> 00:06:36.000
それを整えたので、オーディオをカタログに照合し始め、その結果を実際に見ることができます。

00:06:36.000 --> 00:06:40.000
では、マッチャーを開きましょう。

00:06:40.000 --> 00:06:47.000
マイクからの入力音声を、作成したばかりのカスタムカタログの内容と一致させます。

00:06:47.000 --> 00:06:54.000
マイクからオーディオをキャプチャするには、AVFAudioのAVAudioEngineを使用できます。

00:06:54.000 --> 00:07:03.000
このプロジェクトでは、すでにInfo.plistファイルにマイクの使用に関する説明を追加しました。

00:07:03.000 --> 00:07:12.000
また、マッチャーには、マイクの許可を要求し、オーディオセッションを設定するためのコードを含めました。

00:07:12.000 --> 00:07:23.000
まず、マッチの更新を受け取るには、セッションオブジェクトを作成し、デリゲートを設定します。

00:07:23.000 --> 00:07:30.000
マッチ関数は、以前に作成したカスタムカタログを取るので、それをセッションに渡すことができます。

00:07:30.000 --> 00:07:41.000
これで、audioEngineのinputNodeのinstallTap機能を使用してオーディオを一致させる準備が整いました。

00:07:41.000 --> 00:07:51.000
この関数は、マイクから変換されたオーディオであるaudioBufferと、バッファがキャプチャされた時間であるaudioTimeを返します。

00:07:51.000 --> 00:07:59.000
次に、セッションでmatchStreamingBufferを呼び出し、オーディオバッファとオーディオ時間をパスします。

00:07:59.000 --> 00:08:09.000
提供されたオーディオが連続していることを確認するために、セッションによって検証されるため、利用可能な時間を含めることをお勧めします。

00:08:09.000 --> 00:08:24.000
最初にセッションデリゲートを設定したので、更新を処理するために、セッションデリゲートからセッション:didFind match:関数を実装できます。

00:08:24.000 --> 00:08:32.000
このため、MatchResultというオブジェクトを作成しました。

00:08:32.000 --> 00:08:43.000
セッションによって返されるMatchedMediaItemが含まれています: didFind match: 関数、これはカタログの参照署名に関連付けられているメタデータです。

00:08:43.000 --> 00:08:49.000
エピソード番号や先生の名前など、先ほど作成した詳細が含まれます。

00:08:49.000 --> 00:08:56.000
マッチからのみ生成でき、それに関連する追加情報が含まれています。

00:08:56.000 --> 00:09:03.000
また、MatchResultには、先ほどお見せした質問オブジェクトがあります。

00:09:03.000 --> 00:09:07.000
これは、数学の方程式を持つビデオのセクションを表しています。

00:09:07.000 --> 00:09:11.000
これを使用して、試合に関連するコンテンツを検索します。

00:09:11.000 --> 00:09:26.000
したがって、デリゲート内では、最初のMatchedMediaItemオブジェクトを取るようにMatchResultを設定し、今のところ、質問には何も設定しません。

00:09:26.000 --> 00:09:30.000
さあ、ビルドして実行して、試合の動作を見てみましょう。

00:09:30.000 --> 00:09:36.000
これは私たちのFoodMathアプリで、学生が利用できるエピソードのリストがあります。

00:09:36.000 --> 00:09:41.000
私はビデオを再生することができ、同僚のニールと一緒に、いくつかの数学の問題を解くことを学ぶことができます。

00:09:41.000 --> 00:09:44.000
ニール、今日は私たちに何がありますか？

00:09:44.000 --> 00:09:52.000
ニール：フォーマットは、私はあなたに質問をします、あなたはそれについて考える時間があるでしょう、そして、あなたがそれを正しくしたかどうかを確認します

00:09:52.000 --> 00:10:02.000
私たちのアプリがあれば、あなたも一緒に遊ぶことができます。&lt;私がビデオを始めたとき、アプリは私たちがエピソード3「Count on Me」を聴いていることを認識しました。

00:10:02.000 --> 00:10:04.000
これはすごい！

00:10:04.000 --> 00:10:12.000
次に、Questionオブジェクトを使用して、オーディオの特定のオフセットに表示するセクションを把握します。

00:10:12.000 --> 00:10:23.000
MatchedMediaItemを使用して、どのビデオを見ているかを知りますが、predictedCurrentMatchOffsetなどの試合に関する追加情報も含まれています。

00:10:23.000 --> 00:10:30.000
これは、秒単位の時間間隔として表される参照署名の自動更新位置です。

00:10:30.000 --> 00:10:37.000
これを使用して、ビデオのどこにいるかを把握し、関連する質問オブジェクトを見つけることができます。

00:10:37.000 --> 00:10:53.000
コードに戻ると、デリゲートコールバックで、nilを設定する代わりに、述語CurrentMatchOffsetの直後に来る最後の質問を見つけたいです。

00:10:53.000 --> 00:10:57.000
質問のオフセットを使用して値を比較できます。

00:10:57.000 --> 00:11:06.000
session:didFindMatchは、同じ一致で複数回呼び出すことができます。

00:11:06.000 --> 00:11:13.000
では、新しいQuestionオブジェクトを取得したときにのみ結果を更新するフィルタを実装しましょう。

00:11:13.000 --> 00:11:21.000
それを手に入れたら、結果を値で更新できます。

00:11:21.000 --> 00:11:28.000
それでは、それがどのように見えるか見てみましょう。構築して実行します。

00:11:28.000 --> 00:11:31.000
今回は、加算について学びたいです。

00:11:31.000 --> 00:11:40.000
もう一度ビデオを再生して、質問の内容がビデオと同期して表示されるかどうかを確認します。

00:11:40.000 --> 00:11:43.000
ニール：質問1。始めましょう。

00:11:43.000 --> 00:11:54.000
今日はお店に行って、リンゴが好きだったので、赤いリンゴを1つ買いました。そして、緑のリンゴを1つ、2つ、3つ買いました。

00:11:54.000 --> 00:11:57.000
全部で何個のリンゴを買いましたか？

00:11:57.000 --> 00:12:04.000
あなたのタイマーが始まります...今。&lt;アレックス：今は質問の時間です。1足し3って何？

00:12:04.000 --> 00:12:07.000
5つかな？

00:12:07.000 --> 00:12:10.000
ああ。いいえ、私はそれを間違えました。もう一度やってみましょう。

00:12:10.000 --> 00:12:19.000
ビデオを巻き戻して、今回はもっと注意を払います！

00:12:19.000 --> 00:12:22.000
ニール：質問1。始めましょう。

00:12:22.000 --> 00:12:34.000
今日はお店に行って、リンゴが好きだったので、赤いリンゴを1つ買いました。そして、緑のリンゴを1つ、2つ、3つ買いました。

00:12:34.000 --> 00:12:36.000
全部で何個のリンゴを買いましたか？

00:12:36.000 --> 00:12:46.000
あなたのタイマーが始まります...今。&lt;アレックス：もう一度聞いたので、答えは4だと知っています。

00:12:46.000 --> 00:12:49.000
この質問が簡単すぎる場合はどうなりますか?

00:12:49.000 --> 00:13:00.000
先にスキップして、ニールが私たちに教えるためにもう少し複雑なものを持っているかどうかを確認します。

00:13:00.000 --> 00:13:04.000
ニール：質問4。最後の質問です。

00:13:04.000 --> 00:13:08.000
だから今日、私はかなりお腹が空いています。

00:13:08.000 --> 00:13:12.000
だから私は14個のリンゴを買うことに決めました。

00:13:12.000 --> 00:13:25.000
1... 2... 3... 4 -- &lt; アレックス：それはたくさんのリンゴですもう少し先に行かせてください。

00:13:25.000 --> 00:13:27.000
20秒先をスキップします。

00:13:27.000 --> 00:13:32.000
ニール：それで、私はさらに28個のリンゴを買うことにしました。

00:13:32.000 --> 00:13:42.000
1...2...3...

00:13:42.000 --> 00:13:49.000
4...5...6...

00:13:49.000 --> 00:13:55.000
26...27...

00:13:55.000 --> 00:13:57.000
28個のリンゴ。

00:13:57.000 --> 00:13:59.000
全部で何個のリンゴを買いましたか？

00:13:59.000 --> 00:14:04.000
あなたのタイマーは今始まります。&lt;アレックス：さて、それは素晴らしい質問です。

00:14:04.000 --> 00:14:05.000
フォローしましたか?

00:14:05.000 --> 00:14:10.000
お気に入りの番号で行くよ！

00:14:10.000 --> 00:14:11.000
その通りです！

00:14:11.000 --> 00:14:15.000
究極の質問に対する答えは42です!

00:14:15.000 --> 00:14:21.000
それは簡単です:学生がビデオのどこにいても、リモートアプリはコンテンツに追いつき、更新します。

00:14:21.000 --> 00:14:27.000
カスタムカタログを使用する際のベストプラクティスのいくつかを取り上げましょう。

00:14:27.000 --> 00:14:34.000
カスタムカタログは、shazamcatalogファイル拡張子を使用してデバイス間でシームレスに共有できます。

00:14:34.000 --> 00:14:41.000
ファイルURLを使用してディスクにロードして保存したり、ネットワーク経由で配信したりできます。

00:14:41.000 --> 00:14:50.000
リモートWebサービスを使用する場合は、まずカタログをダウンロードしてから、カスタムカタログオブジェクトに追加機能を使用することをお勧めします。

00:14:50.000 --> 00:14:56.000
ネットワーク上で利用可能なカタログが存在しない場合は、必ずローカルカタログを提供してください。

00:14:56.000 --> 00:15:01.000
カタログは、ユースケースに固有のデータを返すためにカスタムキーを保存できます。

00:15:01.000 --> 00:15:08.000
カタログに追加するデータが有効なプロパティリスト値の1つであることを確認してください。

00:15:08.000 --> 00:15:23.000
matchStreamingBufferを使用する場合、ShazamKitはオーディオストリームを一致させ、パフォーマンスと検索の強度のバランスを取り、署名の生成と自動更新のすべての作業を行います。

00:15:23.000 --> 00:15:36.000
だから今、あなたは教育ビデオに同期された完全なアプリを構築し、学生が現在署名とカスタムカタログのみを使用している場所にコンテンツを更新しました。

00:15:36.000 --> 00:15:43.000
これは可能な多くの例の1つに過ぎず、ShazamKitを使用して何を構築するかを本当に楽しみにしています。

00:15:43.000 --> 00:15:46.000
ありがとう、そして素晴らしいWWDCをお過ごしください。

00:15:46.000 --> 23:59:59.000
♪

