WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
「コレクションを使用してSwiftパッケージを発見し、キュレーションする」セッションへようこそ。

00:00:14.000 --> 00:00:22.000
Xcode 11では、Swiftパッケージのサポートを導入し、ライブラリをソースコードとして配布する簡単なアプローチを提供しました。

00:00:22.000 --> 00:00:29.000
ますます多くのパッケージが公開されるにつれて、特定のユースケースに合ったパッケージの発見をよりアクセスしやすくしたいと考えています。

00:00:29.000 --> 00:00:35.000
プロジェクトにパッケージを追加するとき、開発者はライセンスなどの詳細情報も見たいと思っています。

00:00:35.000 --> 00:00:40.000
これを行うには、メタデータにアクセスする標準化された方法が必要です。

00:00:40.000 --> 00:00:51.000
このため、Xcode 13では、パッケージコレクション、他の人と共有でき、プロジェクトにパッケージを追加するためのまったく新しい改善されたエクスペリエンスを促進するパッケージのキュレーションリストを導入しています。

00:00:51.000 --> 00:01:07.000
教育者やコミュニティのインフルエンサーは、コース資料やブログ記事に合わせてパッケージコレクションを公開し、初めてパッケージを使用する際の障壁を取り除き、どのパッケージが特定のタスクに役立つかを決定する負担を取り除くことができます。

00:01:07.000 --> 00:01:16.000
企業は、コレクションを使用して、社内のエンジニアリングチームの意思決定スペースを絞り込み、信頼できる審査されたパッケージのセットに焦点を当てることができます。

00:01:16.000 --> 00:01:19.000
まず、講演の簡単な概要。

00:01:19.000 --> 00:01:25.000
デモから始めて、コレクションの使い方をもっと詳しく見ていきます。

00:01:25.000 --> 00:01:31.000
私たちは独自のコレクションの作成に飛び込み、別のデモで締めくくります。

00:01:31.000 --> 00:01:37.000
Swift Numericsに関するブログ記事を見つけたので、Xcodeで試してみたいと思っています。

00:01:37.000 --> 00:01:47.000
投稿から最初の例をコピーして、Xcodeに切り替えてコードを貼り付けます。

00:01:47.000 --> 00:01:52.000
Numericsモジュールが私のプロジェクトに存在しないため、ビルドに失敗しています。

00:01:52.000 --> 00:02:05.000
以前は、プロジェクトに数値パッケージを追加する方法を理解するために投稿に戻る必要がありましたが、Xcode 13では、オープンソースパッケージのデフォルトコレクションを提供しているため、エディタで修正を取得します。

00:02:05.000 --> 00:02:15.000
これで、「検索」をクリックすると、数値が事前に選択された新しい「パッケージの追加」ワークフローに移動します。

00:02:15.000 --> 00:02:25.000
Xcodeには、最新バージョン、著者、ライセンス、READMEなど、パッケージに関する多くの情報があります。

00:02:25.000 --> 00:02:33.000
また、リリース履歴タブに切り替えて、利用可能なすべてのバージョンのリリースノートを確認することもできます。

00:02:33.000 --> 00:02:39.000
依存関係を追加するには、バージョン要件と追加するプロジェクトを選択できます。

00:02:39.000 --> 00:02:45.000
両方のデフォルトを受け入れ、「パッケージを追加」をクリックします。

00:02:45.000 --> 00:02:52.000
今、パッケージはチェックアウトされ、Xcodeは指定されたバージョンから製品の選択を提供します。

00:02:52.000 --> 00:02:57.000
Numerics製品を選択し、1つのターゲットに追加します。

00:02:57.000 --> 00:03:02.000
終了するには、もう一度「パッケージを追加」をクリックします。

00:03:02.000 --> 00:03:07.000
プロジェクトナビゲーターを見ると、そこに新しい依存関係が表示されます。

00:03:07.000 --> 00:03:12.000
そして、ビルドを実行すると、プロジェクトが正常に構築されていることがわかります。

00:03:12.000 --> 00:03:17.000
プロジェクトに加えられた「パッケージの追加」ワークフローの正確な変更を簡単に見てみましょう。

00:03:17.000 --> 00:03:26.000
そのために、プロジェクトエディタを開き、プロジェクトを選択し、Swiftパッケージタブを開きます。

00:03:26.000 --> 00:03:31.000
ここでは、依存関係とバージョンルールを確認できます。

00:03:31.000 --> 00:03:41.000
さて、ターゲットエディタを開いてフレームワーク、ライブラリ、埋め込みコンテンツのフェーズを見ると、数値製品がここにリンクされていることがわかります。

00:03:41.000 --> 00:03:45.000
これはXcodeの新しい「パッケージを追加」ワークフローです。

00:03:45.000 --> 00:03:48.000
さて、XcodeはNumericsパッケージについてどのように知りましたか?

00:03:48.000 --> 00:03:59.000
Xcodeには、Swift Argument ParserやSwift NIOなど、Appleが発行した一連のオープンソースパッケージを含む、事前設定されたデフォルトコレクションが付属しています。

00:03:59.000 --> 00:04:09.000
これにより、モジュール名の自動補完と、コレクションの情報を使用してパッケージを追加するための修正を提供することで、Xcodeでのこれらのプロジェクトの使用がはるかにシームレスになります。

00:04:09.000 --> 00:04:13.000
このデフォルトのコレクションは定期的に更新されているため、パッケージの正確なリストは変更される可能性があります。

00:04:13.000 --> 00:04:19.000
さて、同僚のフランチェスコにコレクションの使用について詳しく教えてもらいます。

00:04:19.000 --> 00:04:20.000
ありがとう、ボリス。

00:04:20.000 --> 00:04:25.000
インポートステートメントから直接そのパッケージをインポートすることは簡単でした。

00:04:25.000 --> 00:04:28.000
コレクションとは何かを詳しく見てみましょう。

00:04:28.000 --> 00:04:32.000
コレクションはJSONファイルで、通常はHTTPS経由でフェッチされます。

00:04:32.000 --> 00:04:41.000
コレクションには、要約、バージョン、販売された製品など、パッケージURLとそのメタデータのリストが含まれています。

00:04:41.000 --> 00:04:45.000
これにより、豊富な情報をXcodeに表示できます。

00:04:45.000 --> 00:04:48.000
これはコレクションのJSONのスニペットです。

00:04:48.000 --> 00:04:54.000
通常、これを詳しく見ることはありませんが、いくつかの重要な分野を見てみましょう。

00:04:54.000 --> 00:05:06.000
パッケージのURL、READMEのURL、要約、およびパッケージのバージョンに関するより詳細な情報を見ることができます。

00:05:06.000 --> 00:05:15.000
Swift Package Managerは、今日では「SwiftPM」と略されることが多いため、Macにコレクションをキャッシュするためのデータベースを管理します。

00:05:15.000 --> 00:05:24.000
これは、コマンドライン上のSwiftPMを含むXcodeだけでなく、libSwiftPMを使用する任意のツールから、設定されたコレクションにアクセスできることを意味します。

00:05:24.000 --> 00:05:28.000
SwiftPMは、より大きなSwiftオープンソースプロジェクトの一部です。

00:05:28.000 --> 00:05:35.000
Swift.orgのウェブサイトは、コミュニティと貢献するプロセスについて学ぶことができる素晴らしい場所です。

00:05:35.000 --> 00:05:41.000
SwiftPMは、コレクションのサポートなど、ライブラリとしての機能を提供します。

00:05:41.000 --> 00:05:46.000
ライブラリをlibSwiftPMと呼び、Xcodeのパッケージにも電力を供給します。

00:05:46.000 --> 00:05:49.000
ボリスと私はウェブサイトのブログ記事をまとめています。

00:05:49.000 --> 00:05:57.000
読者がフォローできるように、投稿で使用しているパッケージでコレクションを作成します。

00:05:57.000 --> 00:06:00.000
ありがとう、フランチェスコ。

00:06:00.000 --> 00:06:05.000
Alamofireを使用してネットワークリクエストを行うのが好きなので、コレクションに追加します。

00:06:05.000 --> 00:06:11.000
さらに、プロジェクトの書式設定の一貫性を保ちたいので、swift-formatも使用します。

00:06:11.000 --> 00:06:17.000
コレクションにどのパッケージを入れたいかがわかったので、続けて作成しましょう。

00:06:17.000 --> 00:06:21.000
コレクションを作成するために、GitHubにツールを公開しました。

00:06:21.000 --> 00:06:25.000
独自のコレクションを公開したい場合は、これをローカルで複製して構築できます。

00:06:25.000 --> 00:06:35.000
ジェネレータは、情報を自動的に収集し、常にフォーマットの最新バージョンに従って出力を生成することにより、コレクションを作成するプロセスを簡素化します。

00:06:35.000 --> 00:06:47.000
このツールは、オプションのメタデータを含むパッケージURLのリストである入力JSONファイルを受け取り、他のユーザーと共有される出力ファイルを生成します。

00:06:47.000 --> 00:06:52.000
同じGitHubプロジェクトの一部であるコレクションに署名するための別のツールもあります。

00:06:52.000 --> 00:06:59.000
コレクションへの署名はオプションですが、著者を確認でき、コレクションの完全性を保護します。

00:06:59.000 --> 00:07:03.000
入力JSON形式はこんな感じです。

00:07:03.000 --> 00:07:09.000
概要、キーワード、著者情報など、コレクション全体のメタデータが少しあります。

00:07:09.000 --> 00:07:13.000
これは、Xcodeでコレクションを追加するときに表示されます。

00:07:13.000 --> 00:07:18.000
そして最も重要なのは、パッケージのURLのリストです。

00:07:18.000 --> 00:07:27.000
このツールは各パッケージに関する情報を自動的に取得しますが、コレクションをオーサリングするときにパッケージごとに追加のメタデータを提供することもできます。

00:07:27.000 --> 00:07:45.000
これには、カスタムサマリーやキーワードなどの検索結果を改善できるメタデータ、コレクションが表すバージョンの制限、パッケージが販売する最も関連性の高い製品にユーザーを導くのに役立つ除外製品、およびREADME URLの指定が含まれます。

00:07:45.000 --> 00:07:50.000
入力JSONファイルに基づいてコレクションを配布することは、3段階のプロセスです。

00:07:50.000 --> 00:07:55.000
まず、ジェネレータを使用して出力JSONファイルを作成します。

00:07:55.000 --> 00:08:01.000
次に、出力と署名キーと証明書を使用して、署名ツールで署名されたコレクションを作成します。

00:08:01.000 --> 00:08:08.000
そして最後に、直接共有するか、ウェブサーバーに置くことで、署名されたコレクションを配布することができます。

00:08:08.000 --> 00:08:15.000
有効な、有効期限のない、取り消しのないコード署名証明書でコレクションに署名できます。

00:08:15.000 --> 00:08:20.000
要件の詳細については、SwiftPMのドキュメントをご覧ください。

00:08:20.000 --> 00:08:27.000
コレクションに署名したくない場合は、生成ツールを使用した後に配布に進んでください。

00:08:27.000 --> 00:08:33.000
しかし、フランチェスコと私が取り組んでいるこのコレクションのために、私たちは先に進んで署名するつもりです。

00:08:33.000 --> 00:08:40.000
私はすでに署名用のファイルと、先ほどのスライドで見た入力JSONを準備しました。

00:08:40.000 --> 00:08:44.000
また、ジェネレータと署名ツールをダウンロードして構築しました。

00:08:44.000 --> 00:09:00.000
まず、入力JSONと出力パスで「package-collection-generate」を実行します。

00:09:00.000 --> 00:09:14.000
より多くの情報出力を得るために`--verbose`を渡しており、より多くのメタデータを求めてGitHub APIを照会するためにGitHub認証トークンを渡しています。

00:09:14.000 --> 00:09:20.000
このコマンドは、情報を収集するために異なるバージョンのパッケージをチェックアウトすることがわかります。

00:09:20.000 --> 00:09:22.000
これには数秒かかるはずです。

00:09:22.000 --> 00:09:26.000
そして、それは完了し、出力ファイルを生成しました。

00:09:26.000 --> 00:09:29.000
次に、コレクションに署名したいと思います。

00:09:29.000 --> 00:09:45.000
`package-collection-sign`コマンドを実行し、生成したばかりのJSONファイルを渡し、出力パスを指定します。

00:09:45.000 --> 00:09:56.000
また、以前にエクスポートした鍵と証明書を渡します。

00:09:56.000 --> 00:10:00.000
私はすでに生成されたコレクションをサーバーにアップロードしました。

00:10:00.000 --> 00:10:03.000
コマンドラインを使ってそれと対話する方法を見てみましょう。

00:10:03.000 --> 00:10:08.000
SwiftPMは、そうするために「package-collection」というサブコマンドをもたらします。

00:10:08.000 --> 00:10:22.000
まず、設定されたコレクションのリストにコレクションを追加し、Xcodeでも利用できるようになります。

00:10:22.000 --> 00:10:24.000
これにより、コレクションを取得して追加されます。

00:10:24.000 --> 00:10:29.000
もちろん、フランチェスコが後で表示するXcodeのUIでもこれを行うことができます。

00:10:29.000 --> 00:10:40.000
次に、「迅速なパッケージコレクションの説明」を使用して、内容を見てみましょう。

00:10:40.000 --> 00:10:45.000
まず、先ほど指定したメタデータがあります。

00:10:45.000 --> 00:10:50.000
コレクション内のパッケージのリストを取得し、最後に署名に関する情報を取得します。

00:10:50.000 --> 00:10:56.000
これは、誰がコレクションに署名したか、および署名がSwiftPMによって検証されたことを示しています。

00:10:56.000 --> 00:11:05.000
これは、特定のコレクションが期待する人によって作成されたかどうかを判断し、コレクションの整合性を変更から保護するために使用できます。

00:11:05.000 --> 00:11:11.000
次に、スウィフトフォーマットのような個々のパッケージを見てみましょう。

00:11:11.000 --> 00:11:16.000
このために、今回はパッケージURLを使用して、describeコマンドを再び使用します。

00:11:16.000 --> 00:11:35.000
このコマンドの出力には、利用可能なバージョン、作成者、星、README URLなど、パッケージ全体に関する情報と、使用されているSwiftツールのバージョン、モジュールや製品など、最新バージョンの詳細が表示されます。

00:11:35.000 --> 00:11:45.000
新しいコレクションが良さそうであることを確認したので、同僚のフランチェスコに送ります。フランチェスコは、デモアプリをまとめてXcodeの体験をもう少し紹介します。

00:11:45.000 --> 00:11:47.000
ありがとう、ボリス。

00:11:47.000 --> 00:11:51.000
デモアプリ用の新しいプロジェクトを作成しました。

00:11:51.000 --> 00:12:01.000
「ファイル」&gt;「パッケージを追加」に移動し、「+」ボタンをクリックしてコレクションを追加することで、新しいコレクションをXcodeに追加できます。

00:12:01.000 --> 00:12:13.000
これで、コレクションのURLを貼り付けることができ、「ロード」をクリックした後、Xcodeはそれに含まれるパッケージの数と最後に更新された日時を教えてくれます。

00:12:13.000 --> 00:12:20.000
コレクションを追加した後、Alamofireとswift-formatのパッケージを見ることができます。

00:12:20.000 --> 00:12:27.000
AlamofireのネットワークAPIを使いたいので、パッケージをプロジェクトに追加します。

00:12:27.000 --> 00:12:35.000
Alamofire製品を選択し、「パッケージを追加」をクリックして唯一のターゲットに追加します。

00:12:35.000 --> 00:12:53.000
Xcodeが依存関係を追加したので、ソースファイルに戻ってコードを書き始めることができます。

00:12:53.000 --> 00:13:01.000
Alamofireを使ってREADMEをダウンロードしたので、swift-cmarkパッケージを使ってMarkdownを解析したい。

00:13:01.000 --> 00:13:05.000
「パッケージの追加」パネルに戻りましょう。

00:13:05.000 --> 00:13:12.000
Xcode 13の新機能では、プロジェクトナビゲーターのコンテキストメニューからパッケージオプションへのクイックアクセスを追加しました。

00:13:12.000 --> 00:13:18.000
ここから、「パッケージを追加」を選択してパネルを再度開くことができます。

00:13:18.000 --> 00:13:27.000
どのコレクションにもswift-cmarkはなく、URLを検索バーに直接貼り付けることで追加できます。

00:13:27.000 --> 00:13:36.000
Swift-cmarkのメインブランチを選択し、プロジェクトにパッケージを追加します。

00:13:36.000 --> 00:13:41.000
Swift-cmarkを追加したので、ブログ投稿のアプリを完成させることができます。

00:13:41.000 --> 00:13:51.000
今、インターネット上からこの使いやすいパッケージであり、私たちにとって最も重要なこと、つまりアプリを書くことに焦点を当てています。

00:13:51.000 --> 00:13:56.000
Xcode 13のSwiftパッケージコレクションは、新しいパッケージの発見に役立ちます。

00:13:56.000 --> 00:14:06.000
独自のコレクションを作成すると、キュレーションされたパッケージのリストを共有できるため、プロジェクトへの追加が合理化されます。

00:14:06.000 --> 00:14:18.000
一般的なパッケージの詳細については、WWDC19セッション「XcodeでのSwiftパッケージの採用」と「Swiftパッケージの作成」をお勧めします。

00:14:18.000 --> 00:14:20.000
ご覧いただきありがとうございます。

00:14:20.000 --> 23:59:59.000
[明るい音楽]。

