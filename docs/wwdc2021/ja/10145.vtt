WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
Pranav Sodhani:こんにちは、WWDCへようこそ!

00:00:11.000 --> 00:00:16.000
私の名前はプラナブで、アップルのディスプレイとカラーテクノロジーチームの一員です。

00:00:16.000 --> 00:00:30.000
この講演では、ビデオ品質ツールを紹介し、アプリやコンテンツ作成ワークフローで圧縮されたビデオの知覚品質を評価する方法を紹介します。

00:00:30.000 --> 00:00:33.000
典型的なビデオ配信ワークフローを見ることから始めましょう。

00:00:33.000 --> 00:00:44.000
このようなワークフローでは、高品質のソースビデオはビデオ圧縮を受け、オプションでビデオをダウンスケーリングして、より低いビットレートでビデオを生成します。

00:00:44.000 --> 00:00:51.000
そして、これらの低ビットレートのビデオは、帯域幅に制約のあるネットワークを介して簡単に配信できます。

00:00:51.000 --> 00:01:04.000
このようなワークフローを使用するいくつかの可能な方法には、AVAssetWriterなどのAVFoundation API、Compressorなどのアプリ、または独自のビデオ圧縮ワークフローの1つになります。

00:01:04.000 --> 00:01:09.000
現在、ダウンスケーリングと圧縮により、ビデオコーディングとスケーリングアーティファクトを追加できます。

00:01:09.000 --> 00:01:15.000
そして、これはソースビデオを損ない、目に見えるアーティファクトを作成します。

00:01:15.000 --> 00:01:23.000
このようなアーティファクトの一例は、右側のフレームに示されている圧縮ビデオの閉塞性です。

00:01:23.000 --> 00:01:30.000
もう1つの例は、ビデオがぼやけて見え、ビデオの詳細が消え始めるときです。

00:01:30.000 --> 00:01:37.000
このようなアーティファクトは、消費者のビデオ品質体験に悪影響を及ぼす可能性があります。

00:01:37.000 --> 00:01:41.000
私たちは、消費者が高品質のビデオ体験を期待していることを知っています。

00:01:41.000 --> 00:01:44.000
したがって、この期待に応えることが重要です。

00:01:44.000 --> 00:01:50.000
さて、これを行うための最初のステップは、配信されたコンテンツの品質を評価することです。

00:01:50.000 --> 00:01:58.000
そして、これを行う最も正確な方法は、実際の人々にビデオを見てもらい、ビデオ品質の尺度で評価してもらうことです。

00:01:58.000 --> 00:02:04.000
しかし、大量のビデオを評価したい場合、これは非常に時間がかかり、スケーラブルではありません。

00:02:04.000 --> 00:02:08.000
幸いなことに、別の方法があります。

00:02:08.000 --> 00:02:17.000
ここで必要なのは、スピードとスケーラビリティのプロセスを自動化できるように、ビデオ品質を特徴付ける客観的な方法です。

00:02:17.000 --> 00:02:29.000
このような設定では、知覚ビデオ品質ツールは、圧縮されたビデオとソースビデオを入力として取り、ビデオ品質スコアを出力します。

00:02:29.000 --> 00:02:39.000
このスコアは、1から5の範囲の浮動小数点数であり、実際の人々が圧縮されたビデオをどのように評価したかを模倣することができます。

00:02:39.000 --> 00:02:46.000
今日、私たちはこのような知覚的なビデオ品質ツールで開発者を可能にすることに非常に興奮しています。

00:02:46.000 --> 00:02:51.000
要するに、私たちはそれを高度なビデオ品質ツールまたはAVQTと呼んでいます。

00:02:51.000 --> 00:02:54.000
AVQTについてもっと学びましょう。

00:02:54.000 --> 00:02:56.000
では、AVQTとは正確には何ですか?

00:02:56.000 --> 00:03:01.000
さて、AVQTはmacOSのコマンドライン実行可能ファイルとして提供されます。

00:03:01.000 --> 00:03:07.000
そして、実際の人々が圧縮されたビデオの品質をどのように評価するかを模倣しようとします。

00:03:07.000 --> 00:03:15.000
AVQTを使用して、フレームレベルとセグメントレベルのスコアの両方を計算できます。セグメントは通常数秒の長さです。

00:03:15.000 --> 00:03:22.000
そしてもちろん、AVQTのすべてのAVFoundationベースのビデオフォーマットのサポートを追加しました。

00:03:22.000 --> 00:03:32.000
これには、SDRだけでなく、HDR10、HLG、ドルビービジョンなどのHDRビデオフォーマットも含まれます。

00:03:32.000 --> 00:03:40.000
次に、アプリケーション全体で非常に有用なAVQTの3つの重要な属性について説明します。

00:03:40.000 --> 00:03:46.000
まず、AVQTが人間の知覚とどの程度一致しているかを見ていきます。

00:03:46.000 --> 00:03:51.000
次に、AVQTの計算速度について話します。

00:03:51.000 --> 00:03:58.000
そして最後に、ビデオ品質を予測する際に、視聴設定の認識が重要である理由を紹介します。

00:03:58.000 --> 00:04:02.000
これらのそれぞれについて詳しく説明しましょう。

00:04:02.000 --> 00:04:07.000
AVQTは、ビデオ品質に関する人間の意見とよく相関しています。

00:04:07.000 --> 00:04:14.000
また、アニメーション、ナチュラルシーン、スポーツなどのコンテンツタイプでうまく機能します。

00:04:14.000 --> 00:04:27.000
PSNRや構造的類似性、略してSSIMなどの従来のビデオ品質指標は、通常、コンテンツタイプ間ではあまりうまく機能しないことがわかりました。

00:04:27.000 --> 00:04:30.000
1つの例を見てみましょう。

00:04:30.000 --> 00:04:36.000
さて、これは私たちの最初のソースビデオである高品質のスポーツクリップのフレームです。

00:04:36.000 --> 00:04:42.000
圧縮されたビデオの同じフレームを見てみましょう。

00:04:42.000 --> 00:04:47.000
フレームが十分に高い知覚品質のように見えることがわかります。

00:04:47.000 --> 00:04:56.000
その通り、PSNRスコアは約35、AVQTスコアは4.4です。

00:04:56.000 --> 00:05:02.000
次に、2番目のソースビデオで同じ演習を実施します。

00:05:02.000 --> 00:05:07.000
この場合の圧縮ビデオには、目に見えるアーティファクトがあるようです。

00:05:07.000 --> 00:05:13.000
特に、その人の顔にいくつかのアーティファクトを見ることができます。

00:05:13.000 --> 00:05:25.000
興味深いことに、それは約35の同じPSNRスコアを取得しますが、今回はAVQTはそれを約2.5と評価し、品質が悪いことを意味します。

00:05:25.000 --> 00:05:29.000
ここでは、AVQTスコアが正しい予測だと思います。

00:05:29.000 --> 00:05:39.000
これは、クロスコンテンツ評価で何がうまくいかないのかを説明するために選んだ一例にすぎないことに注意してください。

00:05:39.000 --> 00:05:45.000
多様なビデオセットでAVQTの知覚精度をテストしたかった。

00:05:45.000 --> 00:05:50.000
そこで、私たちは公的に利用可能なビデオ品質データセットでそれを評価しました。

00:05:50.000 --> 00:05:59.000
これらのデータセットには、人間の被験者が提供するソースビデオ、圧縮ビデオ、およびビデオ品質スコアが含まれます。

00:05:59.000 --> 00:06:08.000
ここでは、Waterloo IVC 4KとVQEG HD3の2つのデータセットの結果を紹介します。

00:06:08.000 --> 00:06:19.000
ウォータールーIVCデータセットには、コーディングとスケーリングの両方のアーティファクトにまたがる20のソースビデオと480の圧縮ビデオが含まれています。

00:06:19.000 --> 00:06:25.000
4つの異なるビデオ解像度と2つの異なるビデオ規格をカバーしています。

00:06:25.000 --> 00:06:29.000
VQEG HD3データセットは比較的小さいです。

00:06:29.000 --> 00:06:34.000
9つのソースビデオと72の圧縮ビデオがあります。

00:06:34.000 --> 00:06:41.000
そして、これらは1080pのビデオ解像度でビデオコーディングを使用して生成されました。

00:06:41.000 --> 00:06:49.000
また、ビデオ品質メトリックのパフォーマンスを客観的に測定するために、相関と距離の測定を使用します。

00:06:49.000 --> 00:06:58.000
ピアソン相関係数、つまりPCCは、予測されたスコアが主観的なスコアとどの程度相関しているかを測定します。

00:06:58.000 --> 00:07:03.000
PCC値が高いほど、相関関係が向上します。

00:07:03.000 --> 00:07:09.000
そして、RMSEは、予測が主観的なスコアからどれだけ離れているかを測定します。

00:07:09.000 --> 00:07:14.000
RMSE値が低いと、予測精度が高くなります。

00:07:14.000 --> 00:07:21.000
さて、AVQTが人間の被験者から与えられたスコアをどれだけうまく予測できるかを評価したいと思います。

00:07:21.000 --> 00:07:26.000
ここのx軸には、地上の真実の主観的なビデオ品質スコアがあります。

00:07:26.000 --> 00:07:31.000
そして、y軸には、AVQTによって予測されたスコアがあります。

00:07:31.000 --> 00:07:35.000
ここのすべてのポイントは、圧縮されたビデオを表しています。

00:07:35.000 --> 00:07:45.000
散布図からわかるように、いくつかの外れ値を除いて、AVQTはこのデータセットの主観的なスコアを予測するのに素晴らしい仕事をしています。

00:07:45.000 --> 00:07:52.000
これは、高いPCCスコアと低いRMSEスコアにも反映されています。

00:07:52.000 --> 00:07:58.000
また、VQEG HD3データセットでも高いパフォーマンスが見られます。

00:07:58.000 --> 00:08:03.000
先に進んで、AVQTの計算速度について話しましょう。

00:08:03.000 --> 00:08:09.000
スケーラビリティを確保するためには、高い計算速度が非常に重要であることに注意してください。

00:08:09.000 --> 00:08:15.000
AVQTのアルゴリズムは、Metalで高速に実行するように設計および最適化されています。

00:08:15.000 --> 00:08:20.000
これは、大きなビデオファイルを非常に迅速に実行できることを意味します。

00:08:20.000 --> 00:08:24.000
また、すべての前処理をネイティブに処理します。

00:08:24.000 --> 00:08:29.000
あなたにとって、これはビデオをデコードしてオフラインでスケーリングする必要がないことを意味します。

00:08:29.000 --> 00:08:31.000
AVQTはあなたのためにそれをします。

00:08:31.000 --> 00:08:38.000
AVQTは毎秒175フレームで1080pのビデオを実行することに注意してください。

00:08:38.000 --> 00:08:48.000
したがって、24 Hzで10分の長さの1080pビデオがある場合、AVQTは1.5分以内にその品質を計算できます。

00:08:48.000 --> 00:08:55.000
私たちが話したい最後の属性は、セットアップの認識を見ることです。

00:08:55.000 --> 00:09:01.000
視聴設定は、ビデオを見るときに知覚するビデオ品質に影響を与える可能性があります。

00:09:01.000 --> 00:09:11.000
特に、ディスプレイサイズ、ディスプレイ解像度、視聴距離などの要因は、ビデオ内のアーティファクトを隠したり誇張したりする可能性があります。

00:09:11.000 --> 00:09:21.000
これに対処するために、AVQTはこれらのパラメータをツールへの入力として取り、これらの要因が変化するにつれて正しい傾向を予測しようとします。

00:09:21.000 --> 00:09:24.000
そのようなケースを1つ見てみましょう。

00:09:24.000 --> 00:09:26.000
2つのシナリオを考えてみましょう。

00:09:26.000 --> 00:09:36.000
シナリオAでは、画面の高さの1.5倍の視聴距離で4Kディスプレイで4Kビデオを見ています。

00:09:36.000 --> 00:09:47.000
シナリオBでは、同じディスプレイで同じビデオを見ていますが、現在は画面の高さの3倍の視聴距離にあります。

00:09:47.000 --> 00:09:55.000
明らかに、シナリオBでは、あなたがそれを注意深く見ていたときに見えたアーティファクトのいくつかを見逃すでしょう。

00:09:55.000 --> 00:10:03.000
これは、シナリオBで認識されるビデオ品質がシナリオAよりも高くなることを意味します。

00:10:03.000 --> 00:10:07.000
そして、AVQTはさまざまな品質レベルでそのような傾向を捉えることができます。

00:10:07.000 --> 00:10:17.000
ここのチャートは、視聴距離が1.5Hから3Hに増加するにつれて、AVQTスコアも増加することを示しています。

00:10:17.000 --> 00:10:25.000
これの詳細については、ツールで利用可能なREADMEドキュメントを確認することをお勧めします。

00:10:25.000 --> 00:10:33.000
さて、皆さんがAVQTに興奮しているので、このツールを正しい方法で使用する方法をお見せしましょう。

00:10:33.000 --> 00:10:40.000
開発者ダウンロードポータルを通じて、まもなくAVQTを利用できるようになります。

00:10:40.000 --> 00:10:43.000
デモを順を追って説明します。

00:10:43.000 --> 00:10:49.000
だから、私はすでにツールをダウンロードし、このシステムにAVQTをインストールしました。

00:10:49.000 --> 00:10:58.000
「どのAVQT」の出力を見ると、AVQTがusr/local/binディレクトリに配置されていることがわかります。

00:10:58.000 --> 00:11:08.000
これで、AVQTヘルプコマンドを呼び出して、AVQTでサポートされているさまざまなフラグの使用について詳しく読むことができます。

00:11:08.000 --> 00:11:11.000
現在のディレクトリに何があるか見てみましょう。 

00:11:11.000 --> 00:11:17.000
サンプルリファレンスと、デモに使用するサンプル圧縮ビデオがあります。

00:11:17.000 --> 00:11:21.000
だから、それらを通してAVQTを実行させてください。

00:11:21.000 --> 00:11:28.000
参照ファイルとテストファイルを入力として提供し、出力ファイルを指定します。

00:11:28.000 --> 00:11:34.000
出力ファイルにsample_output.csvという名前を付けましょう。

00:11:34.000 --> 00:11:39.000
このツールは進捗状況を印刷し、セグメントのスコアを画面に報告します。

00:11:39.000 --> 00:11:48.000
デフォルトのセグメント期間は6秒で、このクリップの長さは5秒なので、セグメントは1つしかありません。

00:11:48.000 --> 00:11:52.000
次に、出力ファイルを見てみましょう。

00:11:52.000 --> 00:11:55.000
フレームレベルのスコアはここで確認できます。

00:11:55.000 --> 00:12:03.000
そして最後に、セグメントレベルのスコアが下に向かっています。

00:12:03.000 --> 00:12:09.000
さて、デモではいくつかのオプションを示しましたが、このツールには他にもいくつかの機能が組み込まれています。

00:12:09.000 --> 00:12:19.000
たとえば、セグメント期間と時間プールフラグを使用して、フレームレベルのスコアの集計方法を変更できます。

00:12:19.000 --> 00:12:27.000
同様に、表示距離フラグと表示解像度フラグを使用して表示設定を指定できます。

00:12:27.000 --> 00:12:31.000
これの詳細については、READMEを参照してください。

00:12:31.000 --> 00:12:33.000
わかった。

00:12:33.000 --> 00:12:37.000
これまでのところ、AVQTの重要な属性のいくつかについて学びました。

00:12:37.000 --> 00:12:45.000
また、ビデオのペアでコマンドラインツールを使用してビデオ品質スコアを生成する方法も見ました。

00:12:45.000 --> 00:12:54.000
次に、AVQTを使用してHLSのビットレートを最適化できる特定のケースを見てみましょう。

00:12:54.000 --> 00:12:58.000
HLS層は異なるビットレートでエンコードされます。

00:12:58.000 --> 00:13:03.000
そして、これらのビットレートを選択することは、常に簡単なプロセスではないことを知っています。

00:13:03.000 --> 00:13:11.000
これを支援するために、HLSオーサリング仕様文書にいくつかのビットレートガイドラインを公開しました。

00:13:11.000 --> 00:13:20.000
これらのビットレートは、HLS経由で配信される典型的なコンテンツの初期エンコーディングターゲットにすぎないことに注意してください。

00:13:20.000 --> 00:13:29.000
また、コンテンツによってエンコーディングの複雑さが異なることもわかっています。これは、最適なビットレートがコンテンツによって異なることを意味します。

00:13:29.000 --> 00:13:40.000
したがって、アニメーション映画など、1種類のコンテンツでうまく機能するビットレートは、スポーツイベントではうまく機能しないかもしれません。

00:13:40.000 --> 00:13:48.000
AVQTをフィードバックとして使用して、コンテンツの最適なビットレートを決定する方法は次のとおりです。

00:13:48.000 --> 00:13:52.000
まず、最初の目標ビットレートから始めます。

00:13:52.000 --> 00:13:58.000
このビットレートを使用して、ソースビデオをエンコードし、HLS層を作成します。

00:13:58.000 --> 00:14:07.000
次に、ソースビデオとエンコードされたHLS層を使用して、AVQTを使用してビデオ品質スコアを計算します。

00:14:07.000 --> 00:14:18.000
最後に、AVQTスコアを分析して、HLS層の目標ビットレートを増減するかどうかを決定できます。

00:14:18.000 --> 00:14:23.000
これを例で示すために、特定のHLS層を選びましょう。

00:14:23.000 --> 00:14:30.000
ここでは、毎秒11.6メガビットの2160p層を選択しています。

00:14:30.000 --> 00:14:37.000
次に、前の2つのシーケンス（アニメーションとスポーツ）をこの推奨ビットレートでエンコードします。

00:14:37.000 --> 00:14:45.000
エンコードされた階層の準備ができたら、AVQTを使用してビデオ品質スコアを計算します。

00:14:45.000 --> 00:14:50.000
ここのチャートは、2つのビデオシーケンスのAVQTスコアを示しています。

00:14:50.000 --> 00:15:01.000
この特定の層では、高いビデオ品質が期待できるため、しきい値を4.5に設定し、ほぼ優れた品質を示しています。

00:15:01.000 --> 00:15:10.000
このビットレートはこのアニメーションクリップには十分ですが、スポーツクリップには十分ではないことがわかります。

00:15:10.000 --> 00:15:15.000
そこで、私たちは戻って、このフィードバックを使用してビットレート目標を調整します。

00:15:15.000 --> 00:15:23.000
特に、スポーツクリップのビットレート目標を増やし、AVQTスコアを再計算する必要があります。

00:15:23.000 --> 00:15:28.000
ビットレートの10%の増加を目指しましょう。

00:15:28.000 --> 00:15:33.000
ここでは、スポーツクリップの新しいAVQTスコアをプロットしました。

00:15:33.000 --> 00:15:39.000
更新されたスコアは現在、予想されるしきい値の4つ半を上回っています。

00:15:39.000 --> 00:15:45.000
また、アニメーションコンテンツのビデオ品質にもはるかに似ています。

00:15:45.000 --> 00:15:52.000
最後に、この話から取り除いてほしい重要なことがいくつかあります。

00:15:52.000 --> 00:15:59.000
ビデオ圧縮は、消費者のビデオ品質体験に影響を与える目に見えるアーティファクトにつながる可能性があります。

00:15:59.000 --> 00:16:05.000
AVQTを使用して、圧縮されたビデオの品質を評価できます。

00:16:05.000 --> 00:16:12.000
AVQTはmacOSのコマンドラインツールとして提供され、すばやく計算でき、セットアップを認識して表示しています。

00:16:12.000 --> 00:16:18.000
また、すべてのAVFoundationベースのビデオフォーマットもサポートしています。

00:16:18.000 --> 00:16:25.000
最後に、AVQTを使用して、HLS層のビデオ品質を最適化できます。

00:16:25.000 --> 00:16:28.000
ありがとうございます！

00:16:28.000 --> 23:59:59.000
♪

