WEBVTT

00:00:02.000 --> 00:00:14.000
こんにちは。私は認証体験チームのエンジニア、エリン・ウェルズです。

00:00:14.000 --> 00:00:20.000
アプリやウェブサイトが誰かにパスワードを要求した場合、アカウントのセキュリティが極めて重要であることを知っています。

00:00:20.000 --> 00:00:33.000
このビデオでは、顧客のアカウントをより安全に保つ方法と、iCloudキーチェーンに組み込まれた新しい検証コードジェネレータを使用して、確認コードでさらに簡単にサインインする方法について説明します。

00:00:33.000 --> 00:00:39.000
これは大きな話題であり、私はそれを3つの重要な部分に分解するつもりです。

00:00:39.000 --> 00:00:49.000
まず、パスワード、セキュリティ上の問題のいくつか、およびマルチステップ認証がこれらの問題のいくつかに対処するのにどのように役立つかについて話します。

00:00:49.000 --> 00:01:02.000
次に、iOS 15とmacOS MontereyのiCloudキーチェーンに組み込まれたまったく新しいオーセンティケータを含む、時間ベースの検証コードについて話します。

00:01:02.000 --> 00:01:16.000
最後に、私は一歩下がって、認証の世界で起こっている大きな変化の始まりと、人々が検証コードでサインインする方法を改善する他の機会について議論します。

00:01:16.000 --> 00:01:21.000
さて、パスワードとマルチステップ認証について話しましょう。

00:01:21.000 --> 00:01:26.000
パスワードはどこにでもあり、人々はその使い方を理解しています。

00:01:26.000 --> 00:01:30.000
しかし、正しく使用するのが難しいことが判明しました。

00:01:30.000 --> 00:01:35.000
実際、パスワードを正しく使用するよりも、パスワードを誤用する方が簡単です。

00:01:35.000 --> 00:01:42.000
人々は頻繁に複数のウェブサイトでパスワードを再利用したり、推測しやすいパスワードを選択したりします。

00:01:42.000 --> 00:01:47.000
また、攻撃者が誰かにパスワードを放棄するように説得することもかなり簡単です。

00:01:47.000 --> 00:01:56.000
したがって、サービスはジレンマに直面しています。ログインを簡単にしながら、ユーザーのアカウントにセキュリティを追加するにはどうすればよいですか?

00:01:56.000 --> 00:02:00.000
多くのサービスは、ログインフローにステップを追加します。

00:02:00.000 --> 00:02:05.000
彼らは誰かの身元を確認するために追加の情報を求めます。

00:02:05.000 --> 00:02:12.000
このような手順を追加すると、誰かのパスワードを持つ攻撃者がその人のアカウントにアクセスできる可能性を減らします。

00:02:12.000 --> 00:02:21.000
また、攻撃者は、その人が同じパスワードを使用した他のアカウントに自動的にアクセスできないことを意味します。

00:02:21.000 --> 00:02:24.000
確認コードは一般的な追加ステップです。

00:02:24.000 --> 00:02:28.000
サービスは、誰かがユーザー名とパスワードを入力した後、これらのコードを要求します。

00:02:28.000 --> 00:02:41.000
これらのコードは、SMS、電子メール、またはプッシュ通知を介して配信されるか、その人の電話またはハードウェアキーフォブのオーセンティケータアプリによって生成されます。

00:02:41.000 --> 00:02:45.000
これらのコードの本質的な特徴は、シングルユースであることです。

00:02:45.000 --> 00:02:52.000
記憶したり保存したりすることを意図していないため、パスワードのように再利用されることはありません。

00:02:52.000 --> 00:02:59.000
ただし、検証コードはまだ人間がコードを入力する必要があるため、パスワードと同じようにフィッシングされが実行されがちです。

00:02:59.000 --> 00:03:05.000
確認コードが配信される最も一般的な方法は、SMSです。

00:03:05.000 --> 00:03:13.000
携帯電話を持っているほとんどすべての人がテキストメッセージを受信でき、人々はテキストの送受信を理解しています。

00:03:13.000 --> 00:03:16.000
オートフィルにより、これらのコードの使用がさらに簡単になりました。

00:03:16.000 --> 00:03:20.000
1回タップするだけで、任意のテキストフィールドにコードが入力されます。

00:03:20.000 --> 00:03:25.000
しかし、SMSで配信される確認コードにはまだ本当の問題があります。

00:03:25.000 --> 00:03:28.000
一つには、彼らはあまり安全ではありません。

00:03:28.000 --> 00:03:37.000
彼らはキャリアネットワークのスヌーピングや、攻撃者が他の誰かのためのメッセージを受信できるSIMスワップ攻撃に対して脆弱です。

00:03:37.000 --> 00:03:44.000
人々は、テキストメッセージがエラーなく行ったり来たりすることを当然のことと考える傾向がありますが、ネットワークアクセスが必要です。

00:03:44.000 --> 00:03:55.000
したがって、誰かが飛行機に乗っているか、強力なサービスから離れている場合、メッセージが届くまでに長い時間がかかるか、まったく届かない可能性があります。

00:03:55.000 --> 00:04:00.000
最後に、SMSメッセージには、送信と受信の両方にコストがかかります。

00:04:00.000 --> 00:04:04.000
したがって、これらのメッセージを何百万も送信すると、本当に加算されます。

00:04:04.000 --> 00:04:09.000
検証コードのもう1つの方法は、デバイス上のコードジェネレータです。

00:04:09.000 --> 00:04:18.000
これを行うためのアルゴリズムはRFC 6238で定義されており、「時間ベースのワンタイムパスワード」または「TOTP」と呼ばれます。

00:04:18.000 --> 00:04:25.000
秘密鍵と時間がかかり、それらの情報のビットに基づいて短い数値コードを生成します。

00:04:25.000 --> 00:04:30.000
通常、オーセンティケータアプリまたはハードウェアデバイスがコードを生成します。

00:04:30.000 --> 00:04:33.000
サービスとのコミュニケーションは必要ありません。

00:04:33.000 --> 00:04:36.000
それはすべてデバイス上で起こります。

00:04:36.000 --> 00:04:40.000
これは、セキュリティとユーザーエクスペリエンスの面で大きな利点です。

00:04:40.000 --> 00:04:46.000
コードは短時間、通常は30秒ほど有効です。

00:04:46.000 --> 00:04:55.000
また、誰もSMSメッセージを送受信する可能性があるため、サービスと顧客の両方のコストが削減されます。

00:04:55.000 --> 00:05:01.000
TOTPの課題は、セットアップが少し複雑になる傾向があることです。

00:05:01.000 --> 00:05:10.000
サービスは、顧客のデバイスがコードの生成を開始できるように、他のいくつかのパラメータとともに、秘密鍵を顧客と共有する必要があります。

00:05:10.000 --> 00:05:21.000
一般的なセットアッププロセスでは、あるデバイスにQRコードを表示し、別のデバイスに認証アプリをダウンロードし、そのアプリでQRコードをスキャンします。

00:05:21.000 --> 00:05:25.000
これは面倒なプロセスであり、人々に説明するのは難しいです。

00:05:25.000 --> 00:05:32.000
デバイス上でコードを生成することは、誰にとってもより良い経験ですが、セットアップに関する厄介な問題がまだあります。

00:05:32.000 --> 00:05:45.000
私たちはこれらの困難のいくつかを注意深く見て、AutoFillと一緒に合理化されたセットアップ体験をもたらすiCloudキーチェーンの新機能を開発しました。

00:05:45.000 --> 00:05:58.000
iOS 15とmacOS Montereyで新しく、時間ベースの検証コードジェネレータをiCloudキーチェーンパスワードマネージャーに組み込みました。これがどのように機能するかをお見せできることをとても楽しみにしています。

00:05:58.000 --> 00:06:05.000
私たちは基本から始めました:このデバイスまたは他のデバイスで使用するコードを調べてコピーします。

00:06:05.000 --> 00:06:09.000
これらは、オーセンティケータアプリの重要な機能です。

00:06:09.000 --> 00:06:13.000
しかし、オートフィルは本当にこれを輝かせます。

00:06:13.000 --> 00:06:21.000
SMSで配信されるコードと同様に、AutoFillは生成された確認コードをワンタップで入力します。

00:06:21.000 --> 00:06:31.000
コードはすぐに利用できるため、顧客はより合理化された信頼性の高いサインイン体験を得ることができるため、SMSメッセージを送信するコストを削減できます。

00:06:31.000 --> 00:06:38.000
この機能の私のお気に入りの部分の1つは、新しい確認コードを簡単に設定できることです。

00:06:38.000 --> 00:06:50.000
TOTPセットアップページに特別なリンクやボタンを追加すると、iOS 15またはmacOS Montereyを使用している人は、数回タップするだけで同じデバイスに新しい確認コードを設定できます。

00:06:50.000 --> 00:06:54.000
それは本当に、本当に簡単です。

00:06:54.000 --> 00:07:02.000
最後に、確認コードは人のすべてのデバイスで同期され、iCloudキーチェーンで安全にバックアップされます。

00:07:02.000 --> 00:07:08.000
そのため、Macでアカウントにサインインするときに、確認コードを入力するためにiPhoneを取り出す必要はありません。

00:07:08.000 --> 00:07:11.000
これはアカウントの復旧にも最適です。

00:07:11.000 --> 00:07:19.000
確認コードがiCloudに安全にバックアップされている場合、デバイスを失うことは、もはやアカウントへのアクセスを失うことを意味しません。

00:07:19.000 --> 00:07:33.000
リマインダーとして、iCloudキーチェーンのすべてがエンドツーエンドで暗号化されているため、Appleや他の誰かではなく、アカウントの所有者以外の誰もアクセスできません。

00:07:33.000 --> 00:07:40.000
iCloudキーチェーンが有効になっているデバイスは、Face ID、Touch ID、またはパスコードで保護されています。

00:07:40.000 --> 00:07:45.000
そして、すべてのAppleデバイスは、オペレーティングシステムでサポートされている最高レベルのセキュリティを備えています。

00:07:45.000 --> 00:07:51.000
したがって、キーチェーンデータは、人が現時点でどのデバイスを持っていても安全です。

00:07:51.000 --> 00:07:59.000
Appleのプラットフォームセキュリティガイドは、これらすべてと、さらに詳細に説明しています。

00:07:59.000 --> 00:08:06.000
顧客がコードの設定と入力に可能な限り最高の経験を確実にするために、あなたができる簡単なことがいくつかあります。

00:08:06.000 --> 00:08:10.000
セットアップフローには2つのことがあり、ログインフローには1つだけです。

00:08:10.000 --> 00:08:13.000
それぞれについて少し話しましょう。

00:08:13.000 --> 00:08:19.000
数回タップするだけで新しい確認コードを設定できることは大きな問題です。

00:08:19.000 --> 00:08:25.000
何億人ものiPhoneユーザーが、iOS 15にアップデートするとすぐにこれを行うことができるようになるだろう。

00:08:25.000 --> 00:08:35.000
セットアップ画面にこれを行うリンクまたはボタンを追加することで、デバイスで確認コードを非常に簡単に設定できます。

00:08:35.000 --> 00:08:42.000
TOTPコードでのログインをサポートするインフラストラクチャがすでにある場合は、otpauth: URLsに精通している可能性があります。

00:08:42.000 --> 00:09:03.000
これらのURLには、base32でエンコードされた秘密鍵、各コードの桁数、各コードが有効な期間、ドメイン名に設定する必要がある発行者フィールドなど、コードジェネレータの設定に必要なすべての情報が含まれています。

00:09:03.000 --> 00:09:09.000
iCloudキーチェーンは、このフィールドを使用して、確認コードを追加するアカウントを提案します。

00:09:09.000 --> 00:09:17.000
これは、TOTPセットアッププロセスの一般的な部分であるQRコードにエンコードするのと同じURLです。

00:09:17.000 --> 00:09:25.000
URLの前に「apple-」を付けることで、iCloudキーチェーンパスワードマネージャーに直接リンクできます。

00:09:25.000 --> 00:09:32.000
このapple otpauth: URLを使用して、Webページのアンカータグに入れることができます。

00:09:32.000 --> 00:09:34.000
そして、アプリでは、2つの選択肢があります。

00:09:34.000 --> 00:09:49.000
textViewの attributedStringプロパティに割り当てるNSAttributedStringに「link」属性を追加してリンクを作成するか、ウィンドウシーンで開いているAPIを使用してボタンタップに応答してURLを開くことができます。

00:09:49.000 --> 00:09:55.000
システムが可用性チェックでapple otpauth: URLsを開くことができるかどうかを確認できます。

00:09:55.000 --> 00:10:02.000
以前のバージョンのiOSでは、セットアップボタンを非表示にし、セットアップURLを削除する必要があります。

00:10:02.000 --> 00:10:12.000
セットアップ中にできる2番目のことは、他のTOTPアプリでスキャンすることを意図したQRコードにJPG、PNG、GIFなどのラスター画像を使用することです。

00:10:12.000 --> 00:10:19.000
Safariは、デバイス上の画像分析を使用してQRコードを検出し、それらに含まれる情報をデコードします。

00:10:19.000 --> 00:10:30.000
SafariがQRコードにotpauth: URLが含まれていると判断した場合、QRコード画像のコンテキストメニューでコードジェネレータを設定することを提案します。

00:10:30.000 --> 00:10:35.000
最後にやるべきことは、生成されたコードを入力するためのテキストフィールドに関するものです。

00:10:35.000 --> 00:10:44.000
自動入力がユーザー名、パスワード、確認コードを入力する場所を正確に把握するために、これらのテキストフィールドにコンテンツタイプを注釈付けします。

00:10:44.000 --> 00:11:05.000
これは、textContentTypeビュー修飾子を使用したSwiftUI、UITextFieldsのtextContentTypeプロパティを使用したUIKit、NSTextFieldsのcontentTypeプロパティを使用したAppKitアプリ、およびWebでは、入力要素のオートコンプリート属性を「ワンタイムコード」に設定できます。

00:11:05.000 --> 00:11:07.000
だから今、私は一歩後退したい。

00:11:07.000 --> 00:11:16.000
認証の全体像を見て、既存のインフラストラクチャをより安全にする方法について少し話しましょう。

00:11:16.000 --> 00:11:22.000
認証メカニズムはスペクトル上に存在し、進むにつれて強度とセキュリティが向上します。

00:11:22.000 --> 00:11:31.000
パスワードは業界の従来のベースラインであり、サービスがパスワードベースのログインフローを強化する方法はいくつかあります。

00:11:31.000 --> 00:11:42.000
最も一般的な2つは、SMSで配信されるパスワード+コードと、TOTPで生成されたパスワード+コードです。

00:11:42.000 --> 00:11:51.000
追加の意思決定サービスは、認証プロセス全体を別のサービスに委任するフェデレーションサインインプロバイダーを使用するかどうかです。

00:11:51.000 --> 00:12:00.000
フェデレーション認証オプションは、従来の方法と同じメカニズムに基づいていますが、より少ないパスワードを追跡する必要があります。

00:12:00.000 --> 00:12:12.000
Appleでサインインの場合と同様に、堅牢で安全なインフラストラクチャに実装すると、従来のメカニズムよりも安全になることもあります。

00:12:12.000 --> 00:12:16.000
これらのいずれかを超えたステップは、パスワードを完全に取り除くことです。

00:12:16.000 --> 00:12:21.000
WebAuthentication標準、または「WebAuthn」は、まさにこれを行います。

00:12:21.000 --> 00:12:26.000
代わりに、公開鍵の暗号化を使用してアカウントを安全に保ちます。

00:12:26.000 --> 00:12:34.000
iOS 15とmacOS Montereyには、パスワードの使用可能な代替品を提供するこの技術のプレビューが含まれています。

00:12:34.000 --> 00:12:39.000
私のチームメイトのギャレットは、あなたが間違いなくチェックすべきそれについてのビデオを持っています。

00:12:39.000 --> 00:12:53.000
業界全体がパスワードなしでその未来の構築に取り組み続けているため、すでに持っているインフラストラクチャのセキュリティを向上させるための措置を講じることにはまだ本当の価値があります。

00:12:53.000 --> 00:12:59.000
オンラインで人々をより安全に保つためにできることは何でも良いことです。

00:12:59.000 --> 00:13:03.000
一歩一歩、SMSで配信された確認コードの懸念を取ることができます。

00:13:03.000 --> 00:13:11.000
時間ベースの検証コードの採用を評価する際には、SMSでコードを送信する必要があるかもしれません。

00:13:11.000 --> 00:13:22.000
iOS 14とmacOS Big Surでは、メッセージにドメインバインディングを追加することで、SMSコードをフィッシングに対してより耐性にするためのシンプルなメカニズムを導入しました。

00:13:22.000 --> 00:13:30.000
ドメインバインディングは、このメッセージのコードが特定のドメインを対象としていることをオートフィルと通信する方法です。

00:13:30.000 --> 00:13:41.000
コードがこのようにバインドされている場合、AutoFillは、バインドされているドメインがWebページのドメインまたはアプリの関連ドメインの1つと一致する場合にのみコードを提供します。

00:13:41.000 --> 00:13:47.000
アプリでは、これは関連するドメインやユニバーサルリンクと同じメカニズムで動作します。

00:13:47.000 --> 00:13:53.000
したがって、これらの技術用にアプリをすでに設定している場合は、ドメインバインディングを追加する準備が整っています。

00:13:53.000 --> 00:14:01.000
これについては、ドメインバインディングによるSMSコードのセキュリティ強化について公開した記事で詳しく知ることができます。

00:14:01.000 --> 00:14:06.000
確認コードについてすべて知っているので、これら2つの重要なことを行ってください。

00:14:06.000 --> 00:14:11.000
まず、アプリやウェブサイトに時間ベースの検証コードを採用します。

00:14:11.000 --> 00:14:16.000
バックエンドにサポートを追加し、SMSでコードを取得するのではなく、顧客にそれらを使用するよう促します。

00:14:16.000 --> 00:14:24.000
第二に、SMS確認コードを引き続きサポートする場合は、メッセージにドメインバインディングを追加します。

00:14:24.000 --> 00:14:25.000
ご覧いただきありがとうございます。

00:14:25.000 --> 23:59:59.000
[音楽]。

