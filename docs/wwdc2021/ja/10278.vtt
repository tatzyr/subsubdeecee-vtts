WEBVTT

00:00:00.000 --> 00:00:14.000
こんにちは。私はApple Designチームのデザイナー、Camille Moussetteです。

00:00:14.000 --> 00:00:22.000
このセッションでは、アプリにオーディオと触覚フィードバックを追加するための実用的な手順と設計上の考慮事項を説明します。

00:00:22.000 --> 00:00:32.000
歴史的に、アニメーション、サウンド、ハプティックスを含む豊富なアプリ体験を提供することは、デザインとエンジニアリングの両方の観点から非常に困難でした。

00:00:32.000 --> 00:00:39.000
iPhoneのCore Hapticsを使用すると、見た目、音、リアルに感じる魔法の瞬間を簡単に作成できるようになりました。

00:00:39.000 --> 00:00:47.000
これらのスキルを説明し、練習するために、HapticBounceと呼ばれる以前のコードサンプルプロジェクトから派生したiOSアプリを使用します。

00:00:47.000 --> 00:00:56.000
ミニゲームのようにし、ビジュアル、サウンド、ハプティクスをうまくデザインするためのキャンバスを提供するために、いくつかの追加が行われました。

00:00:56.000 --> 00:01:01.000
新しいデモはHapticRicochetと呼ばれています。

00:01:01.000 --> 00:01:09.000
HapticRicochetは、iPhoneで命を吹き込み、iPhoneの向きに基づいて動き回るボールの物語です。

00:01:09.000 --> 00:01:18.000
ボールは転がり、物理的な世界で期待するように、オーディオと触覚フィードバックで電話の壁から跳ね返ります。

00:01:18.000 --> 00:01:22.000
ボールを叩いたら...

00:01:22.000 --> 00:01:23.000
それはより大きなボールに成長します。

00:01:23.000 --> 00:01:28.000
もう一度タップすると、ボールにシールドが追加されます。

00:01:28.000 --> 00:01:37.000
そのシールドは壁と衝突するたびに損傷し、枯渇し、最終的にボールは崩壊して死にます。

00:01:37.000 --> 00:01:43.000
また、背景の任意の場所をタップして有効または無効にするテクスチャを背景に追加しました。

00:01:43.000 --> 00:01:55.000
このセッションでは、シールドの追加とローリングテクスチャの有効化という2つのメカニックだけに焦点を当てます。

00:01:55.000 --> 00:01:59.000
先に進む前に、議題を確認しましょう。

00:01:59.000 --> 00:02:04.000
まず、Apple内でよく使用する主要なオーディオと触覚設計の原則を確認します。

00:02:04.000 --> 00:02:14.000
豊富なマルチモーダルフィードバックを可能にするフレームワークであるCore Hapticsを簡単に紹介します。

00:02:14.000 --> 00:02:26.000
セッションのコアでは、XcodeのHapticRicochetプロジェクトを検討し、シールドとローリングテクスチャの瞬間のフィードバックをどのように追加、設計、洗練するかを確認します。

00:02:26.000 --> 00:02:34.000
マルチモーダルエクスペリエンスの設計は難しい場合がありますが、うまくやると、ユーザーエクスペリエンスが本当に向上します。

00:02:34.000 --> 00:02:38.000
それは魔法のように、楽しく、ちょうどいい感じです。

00:02:38.000 --> 00:02:41.000
1つの例は、iOSの懐中電灯ボタンです。

00:02:41.000 --> 00:02:50.000
ビジュアルアニメーション、サウンド、触覚フィードバックを組み合わせて、明確で正確で簡潔な統一された体験を提供します。

00:02:50.000 --> 00:02:56.000
これは、デザインとエンジニアリングの努力を伴う反復的で創造的なプロセスです。

00:02:56.000 --> 00:03:07.000
通常、あなたはそれらを聞くのではなく、触覚を感じるでしょうが、デモンストレーションの目的で、これらの触覚を音に変換したので、このビデオで聞くことができます。

00:03:07.000 --> 00:03:13.000
あなたのアプリ体験で魔法と喜びを達成するために、ここに作業を導くための3つの原則があります。

00:03:13.000 --> 00:03:18.000
彼らは社内で役に立ちましたし、彼らもあなたを助けることができることを願っています。

00:03:18.000 --> 00:03:25.000
それらは因果関係、調和、そして有用性です。

00:03:25.000 --> 00:03:29.000
フィードバックが有用であるためには、その原因が明らかでなければなりません。

00:03:29.000 --> 00:03:33.000
それは、フィードバックのソースや原因を明確かつ明白にすることです。

00:03:33.000 --> 00:03:39.000
最も単純な形式は、ボールが壁と電話の境界に当たったときにフィードバックを得ることです。

00:03:39.000 --> 00:03:43.000
それは関連する音と触覚との衝突です。

00:03:43.000 --> 00:03:49.000
同様に、ハプティックスローリングテクスチャは、背景のビジュアルが表示されている場合にのみ表示されます。

00:03:49.000 --> 00:03:54.000
あなたは、グリッドがその感覚を生み出したことを理解しています。

00:03:54.000 --> 00:04:05.000
私たちの第二の原則である調和は、私たちの感覚が一貫性があり、一貫性があり、与えられた経験を作成するために協力しているときに最もよく機能することを強調しています。

00:04:05.000 --> 00:04:10.000
見た目と音を感じるべきです。そして、その響きは感じるべきです。

00:04:10.000 --> 00:04:13.000
小さなボールは小さく感じ、小さく聞こえるはずです。

00:04:13.000 --> 00:04:20.000
大きなボールは、それが本当の余分な質量を持っているように、音を鳴らし、より重く感じるはずです。

00:04:20.000 --> 00:04:27.000
私たちの第3の原則であるユーティリティは、あなたのアプリ体験に明確な価値を提供することです。

00:04:27.000 --> 00:04:30.000
できるからといってフィードバックを追加しないでください。

00:04:30.000 --> 00:04:34.000
それはすぐに圧倒的で不快になる可能性があります。

00:04:34.000 --> 00:04:41.000
ボールの成長など、アプリの重要な瞬間のために触覚とオーディオを予約してください。

00:04:41.000 --> 00:04:44.000
次に、コアハプティクスを復習しましょう。

00:04:44.000 --> 00:04:51.000
Core Hapticsは、アプリのカスタム触覚とオーディオフィードバックを設計できるiPhoneとiOSのテクノロジーです。

00:04:51.000 --> 00:05:01.000
これは、エンジン、プレーヤー、パターン、イベントの4つの基本的な要素を中心とした強力なAPIです。

00:05:01.000 --> 00:05:03.000
それらを簡単に復習しましょう。

00:05:03.000 --> 00:05:06.000
最高レベルの要素はエンジンです。

00:05:06.000 --> 00:05:10.000
それが電話の物理アクチュエータへのリンクです。

00:05:10.000 --> 00:05:12.000
次は選手がいます。

00:05:12.000 --> 00:05:17.000
開始、停止、一時停止などの再生制御に使用されます。

00:05:17.000 --> 00:05:20.000
次に、パターンとイベントがあります。

00:05:20.000 --> 00:05:23.000
パターンは、時間の経過とともにイベントのコレクションです。

00:05:23.000 --> 00:05:27.000
イベントは、エクスペリエンスを指定するために使用される構成要素です。

00:05:27.000 --> 00:05:29.000
イベントには多くの種類があります。

00:05:29.000 --> 00:05:33.000
最も一般的なものは、一時的で連続的です。

00:05:33.000 --> 00:05:37.000
実際には、ここにイベントで作られたパターンの具体的な例があります。

00:05:37.000 --> 00:05:45.000
MacOS 12で利用可能なQuickLook Visualizerを使用して、.ahapファイルで指定された触覚パターンを確認しています。

00:05:45.000 --> 00:05:49.000
AHAPはApple Haptic Audio Patternの略です。

00:05:49.000 --> 00:05:51.000
もう一度見てみましょう。 

00:05:51.000 --> 00:05:59.000
Finderで.ahapファイルを選択し、キーボードのスペースバーを押します。

00:05:59.000 --> 00:06:03.000
では、パターン内の項目を詳しく見てみましょう。

00:06:03.000 --> 00:06:08.000
青の最初のイベントは一時的なイベントです。

00:06:08.000 --> 00:06:14.000
オレンジ色の2番目のイベントは連続したイベントです。

00:06:14.000 --> 00:06:16.000
パターンはJSON構文を使用しています。

00:06:16.000 --> 00:06:21.000
一時的なイベントはこのコードから作成されます。

00:06:21.000 --> 00:06:25.000
これは、コアハプティクスの概要をまとめたものです。

00:06:25.000 --> 00:06:29.000
より詳細な情報については、オンラインでドキュメントを確認してください。

00:06:29.000 --> 00:06:35.000
このセッションの練習では、パターンの読み込み、変更、演奏に焦点を当てます。

00:06:35.000 --> 00:06:37.000
XcodeとHapticRicochetの時間です。

00:06:37.000 --> 00:06:42.000
HapticRicochet-Startフォルダからプロジェクトを開きます。

00:06:42.000 --> 00:06:46.000
iPhoneでプロジェクトをコンパイルして実行できることを確認してください。

00:06:46.000 --> 00:06:49.000
シミュレーターはハプティックスでは動作しません。

00:06:49.000 --> 00:06:53.000
触覚を感じるには、物理的なiPhone 8以降が必要です。

00:06:53.000 --> 00:06:58.000
電話が無音になっておらず、音量レベルが高いことを確認してください。

00:06:58.000 --> 00:07:06.000
計画は、ViewControllerファイルと.ahap、.wav、.pngアセットファイルを操作することです。

00:07:06.000 --> 00:07:10.000
ゲームとそのすべての相互作用に精通していることを確認してください。

00:07:10.000 --> 00:07:15.000
ボールをタップし、背景をタップし、電話を傾けることができることを忘れないでください。

00:07:15.000 --> 00:07:24.000
準備ができたら、シールド変換に飛び込みましょう。

00:07:24.000 --> 00:07:30.000
調和の原理を使ってシールドの瞬間を解剖し、デザインの詳細を見ていきます。

00:07:30.000 --> 00:07:38.000
ビジュアルでは、持続時間が500ミリ秒で、右上にこのように見えるアニメーションがあります。

00:07:38.000 --> 00:07:43.000
触覚のために、私たちは新しい状態への変換を強調したいと思います。

00:07:43.000 --> 00:07:51.000
オーディオについては、エネルギーの利得と堅牢で保護された最終状態を伝えたいと考えています。

00:07:51.000 --> 00:07:56.000
この練習のために、私たちは異なる資質を伝える2つの異なる資産を作成しました。

00:07:56.000 --> 00:08:00.000
私たちはそれらを見て、シールド体験に最も適したものを見ていきます。

00:08:00.000 --> 00:08:06.000
しかし、まず、シールドのフィードバックをロードして再生する方法を見てみましょう。

00:08:06.000 --> 00:08:10.000
機能的には、コードは2つの部分に分かれています。

00:08:10.000 --> 00:08:18.000
まず、ビルディングブロックを初期化し、次に、そのシールド変換を再生してレンダリングする機能です。

00:08:18.000 --> 00:08:24.000
initializeShieldHaptics関数では、まずShieldTransientファイルからパターンを作成します。

00:08:24.000 --> 00:08:29.000
次に、そのパターンでshieldPlayerを作成します。

00:08:29.000 --> 00:08:33.000
フィードバックはこの時点で再生する準備ができています。

00:08:33.000 --> 00:08:38.000
関数シールドは、変換をレンダリングする準備ができたら呼び出されます。

00:08:38.000 --> 00:08:44.000
触覚とオーディオのフィードバックは、shieldPlayerでstartPlayerを呼び出すことで再生されます。

00:08:44.000 --> 00:08:48.000
これは、プロジェクトで頻繁に再利用する便利な機能です。

00:08:48.000 --> 00:08:52.000
その後、ビジュアルアニメーションが再生されます。

00:08:52.000 --> 00:08:56.000
それでは、ShieldTransientの資産を見てみましょう。

00:08:56.000 --> 00:09:00.000
これは、触覚フィードバックとオーディオフィードバックの経験を定義します。

00:09:00.000 --> 00:09:08.000
触覚はこのように感じるはずです:そして、オーディオはこのように聞こえるはずです:私はその音が好きです。

00:09:08.000 --> 00:09:12.000
それはボールの堅牢性と保護のゲインのように感じます。

00:09:12.000 --> 00:09:14.000
もう一度聞きましょう。

00:09:14.000 --> 00:09:17.000
問題は、触覚と音が本当に一致しないことです。

00:09:17.000 --> 00:09:19.000
触覚は3つのトランジェントでできています...

00:09:19.000 --> 00:09:23.000
オーディオは連続的で進歩的ですが。

00:09:23.000 --> 00:09:26.000
2つの感覚の間には調和がない。

00:09:26.000 --> 00:09:33.000
ShieldContinuousと呼ばれる代替資産を見てみましょう。

00:09:33.000 --> 00:09:35.000
それは継続的な触覚進行を持っています...

00:09:35.000 --> 00:09:38.000
そして、減衰する不安定なオーディオ。

00:09:38.000 --> 00:09:44.000
繰り返しになりますが、触覚とオーディオが本当に一致していないことを感じ、聞くことができます。

00:09:44.000 --> 00:09:46.000
しかし、私はハプティックが好きです。

00:09:46.000 --> 00:09:50.000
それは盾を得るための良い変革のように感じます。

00:09:50.000 --> 00:09:52.000
もう一度触覚を聞きましょう。

00:09:52.000 --> 00:10:00.000
私の計画は、その連続的な触覚パターンを使用しますが、最初の資産からの音を使用することです。

00:10:00.000 --> 00:10:08.000
2つのアセットを使用して、最初のパターンから好きなオーディオを取り、2番目の連続した触覚パターンで使用します。

00:10:08.000 --> 00:10:11.000
私が実際にそれをどのように行うか見てみましょう。

00:10:11.000 --> 00:10:18.000
まず、テキストエディタでShieldContinuous.ahapファイルを開き、ファイルの最後までスクロールします。

00:10:18.000 --> 00:10:26.000
触覚で再生するオーディオファイルを指定するこのイベントが表示されます。

00:10:26.000 --> 00:10:31.000
オーディオファイルのファイル名でEventType AudioCustomを使用しています。

00:10:31.000 --> 00:10:38.000
ParameterValueを使用してボリュームを指定および調整できます。

00:10:38.000 --> 00:10:49.000
優先オーディオを使用するには、ファイル参照をShieldB.wavからShieldA.wavに変更します。

00:10:49.000 --> 00:10:52.000
改訂された最終的な資産はこんな感じです。

00:10:52.000 --> 00:10:55.000
触覚...

00:10:55.000 --> 00:10:58.000
そして、オーディオは首尾一貫しています。

00:10:58.000 --> 00:11:01.000
彼らはお互いを支え、強化し合います。

00:11:01.000 --> 00:11:05.000
オーディオとハプティックを組み合わせたものを一緒に聴きましょう。

00:11:05.000 --> 00:11:11.000
必要な最後の変更は、作成した最終資産を使用することです。

00:11:11.000 --> 00:11:23.000
InitializeShieldHaptics関数に戻り、ShielTransientを使用する代わりに、ShieldContinuousファイルを指定してロードします。

00:11:23.000 --> 00:11:26.000
ヴォイラ！ここにあります。

00:11:26.000 --> 00:11:29.000
私は今、デバイスでコンパイルして実行しています。

00:11:29.000 --> 00:11:36.000
私はちょうどいいと感じる調和のとれたシールドの変容で終わります。

00:11:36.000 --> 00:11:43.000
触覚、オーディオ、ビジュアルは、ボールにシールド保護の追加を伝えるためにうまく機能しています。

00:11:43.000 --> 00:11:49.000
次に、アプリにローリングテクスチャを追加する方法を確認します。

00:11:49.000 --> 00:11:55.000
HapticRicochetは、転がる質感ではなく、壁との衝突から始まります。

00:11:55.000 --> 00:12:03.000
背景をタップすると、水玉模様のテクスチャが表示され、ボールが転がるにつれて追加の触覚フィードバックが得られる。

00:12:03.000 --> 00:12:09.000
私たちは、技術的な性質の2つの問題に遭遇し、解決します。

00:12:09.000 --> 00:12:15.000
もう1つは、経験の設計に関連しています。

00:12:15.000 --> 00:12:22.000
initializeTextureHaptics関数では、まずテクスチャahapファイルからパターンを作成します。

00:12:22.000 --> 00:12:26.000
次に、そのパターンでShieldPlayerを作成します。

00:12:26.000 --> 00:12:32.000
updateTexturePlayer関数は、テクスチャがアクティブなすべてのフレームで呼び出されます。

00:12:32.000 --> 00:12:37.000
ボールの速度に基づいて触覚の強度を更新するために使用します。

00:12:37.000 --> 00:12:40.000
結果を見てみましょう。-結果を見てみましょう。

00:12:40.000 --> 00:12:45.000
私が気づいている問題は、数秒後にテクスチャが消えることです。

00:12:45.000 --> 00:12:50.000
なぜこんな風に起こっているのか知っています。

00:12:50.000 --> 00:12:53.000
その行動を修正する簡単な方法があります。

00:12:53.000 --> 00:13:00.000
私たちが持っている問題は、.ahapファイルのテクスチャに2秒の触覚コンテンツしかないことです。

00:13:00.000 --> 00:13:05.000
その行動を変え、無限に再生させる方法があります。

00:13:05.000 --> 00:13:14.000
パターンプレーヤーの高度なバリアントは、一時停止、再開、その他のコールバックなどの追加機能を提供します。

00:13:14.000 --> 00:13:21.000
HapticRicochetでは、高度なパターンプレーヤーをループ機能のためだけに使用します。

00:13:21.000 --> 00:13:24.000
この変化を歩きましょう。

00:13:24.000 --> 00:13:32.000
まず、texturePlayerの宣言をCHHapticAdvancedPatternPlayerタイプに変更します。

00:13:32.000 --> 00:13:38.000
次に、同じテクスチャファイルを使用しますが、今回はAdvancedPlayerを作成します。

00:13:38.000 --> 00:13:43.000
これで、そのAdvancedPlayerでループ動作を有効にすることができます。

00:13:43.000 --> 00:13:47.000
良いことは、残りのコードがすべて同じままであることです。

00:13:47.000 --> 00:13:51.000
結果を見てみましょう。-結果を見てみましょう。

00:13:51.000 --> 00:14:00.000
ローリングテクスチャは、今回は明らかな一時停止や縫い目なしでループで再生されます。

00:14:00.000 --> 00:14:09.000
私が取り組みたい2番目の問題は、テクスチャのルックアンドフィールに関連しています。

00:14:09.000 --> 00:14:16.000
触覚パターンのアセットは非常に密度が高く、2秒間で100件近くのエントリがあることがわかります。

00:14:16.000 --> 00:14:21.000
私たちの視覚的な背景の質感は非常に粗く、横にいくつかの点があるだけです。

00:14:21.000 --> 00:14:29.000
ドットパターンがより緻密であれば、経験は改善され、より現実的になると思います。

00:14:29.000 --> 00:14:35.000
backgroundImageに使用したリソースファイルを、このファイルのFineバージョンを使用するように変更します。

00:14:35.000 --> 00:14:39.000
アプリを実行すると、新しい密度の高いテクスチャが使用されます。

00:14:39.000 --> 00:14:41.000
見てみましょう。 

00:14:41.000 --> 00:14:57.000
問題や問題が発生した場合は、プロジェクトの最終バージョンをHapticRicochet-Finalフォルダに含めました。

00:14:57.000 --> 00:15:06.000
このセッション中に行ったすべての変更があり、iPhoneでコンパイルして感じる準備ができています。

00:15:06.000 --> 00:15:10.000
あなた自身の触覚体験を探求し、デザインする余地はまだあります。

00:15:10.000 --> 00:15:18.000
ゲームの他の変換を見て、あなた自身の新しい触覚と音のフィードバックをデザインしてみてください。

00:15:18.000 --> 00:15:26.000
要約すると、私はあなたのアプリで素晴らしいマルチモーダル体験を設計するためにあなたを導くことができるオーディオと触覚設計の原則を導入しました。

00:15:26.000 --> 00:15:32.000
iOSでカスタムフィードバックを追加するためのAPIであるCore Hapticsの基礎を見直しました。

00:15:32.000 --> 00:15:39.000
シールドとローリングテクスチャの仕組みに焦点を当てたHapticRicochetプロジェクトを使用して実践しました。

00:15:39.000 --> 00:15:46.000
追加情報とリソースについては、ヒューマンインターフェイスガイドラインと開発者ドキュメントを参照してください。

00:15:46.000 --> 00:15:53.000
最後に、Core Hapticsの立ち上げをカバーするWWDC 2019セッションを再検討することができます。

00:15:53.000 --> 00:15:55.000
ご覧いただきありがとうございます。

00:15:55.000 --> 23:59:59.000
[パーカッシブミュージック]。

