WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:11.000
こんにちは！

00:00:11.000 --> 00:00:14.000
私の名前はラッセルで、UIKitチームのエンジニアです。

00:00:14.000 --> 00:00:23.000
iOS 13では、シートに洗練された外観を導入し、それらを電話に持ち込み、普遍的なプル・トゥ・却下ジェスチャーを追加しました。

00:00:23.000 --> 00:00:33.000
これの詳細については、iOS 13のUIの近代化ビデオ、特に9分45秒から始まるプレゼンテーションに関するセクションをご覧ください。

00:00:33.000 --> 00:00:43.000
iOS 15では、シートにたくさんのカスタマイズオプションを追加することで、その基盤の上に構築されたので、これまでにない楽しい新しい方法でそれらを使用することができます。

00:00:43.000 --> 00:00:52.000
画面の半分しかカバーしない垂直方向のサイズ変更可能なシートを作成できる、ミディアムデテントのサポートを追加しました。

00:00:52.000 --> 00:01:02.000
また、調光ビューを削除することもできます。これにより、シートが表示されている間、ユーザーがシートの背後にあるコンテンツを操作できる非モーダルUIを構築できます。

00:01:02.000 --> 00:01:10.000
次に、横向きの携帯電話でフルスクリーン以外の外観を取得する方法など、いくつかの新しいビジュアルオプションについて説明します。

00:01:10.000 --> 00:01:20.000
そして最後に、通常のサイズクラスのポップオーバーとコンパクトサイズクラスのカスタマイズされたシートの間でシームレスに適応するUIを設定する方法を紹介します。

00:01:20.000 --> 00:01:26.000
このすべてを探索するために、デジタルはがきを作成するためのサンプルアプリを作成し、このビデオで利用できます。

00:01:26.000 --> 00:01:32.000
はがきごとに、画像、テキスト、フォントをカスタマイズできます。

00:01:32.000 --> 00:01:36.000
さて、シートをカスタマイズする前に、まずシートを入手する必要があります。

00:01:36.000 --> 00:01:48.000
シートは、UISheetPresentationControllerと呼ばれる新しいUIPresentationControllerサブクラスのインスタンスであり、すべてのカスタマイズオプションがこのクラスのプロパティとして公開されます。

00:01:48.000 --> 00:01:56.000
このクラスのインスタンスを取得する典型的な方法は、提示する前にビューコントローラーのsheetPresentationControllerプロパティを読み取ることです。

00:01:56.000 --> 00:02:06.000
このメソッドは、ビューコントローラのmodalPresentationStyleがデフォルトでフォームシートまたはページシートである限り、非nilインスタンスを返します。

00:02:06.000 --> 00:02:10.000
ここから、インスタンスにさまざまなプロパティを設定してカスタマイズできます。

00:02:10.000 --> 00:02:16.000
これは、ビューコントローラーのpopoverPresentationControllerを取得し、そのプロパティを設定するのと同じパターンです。

00:02:16.000 --> 00:02:21.000
そして、それで、デテントに飛び込みましょう。

00:02:21.000 --> 00:02:23.000
デテントとは何ですか?

00:02:23.000 --> 00:02:32.000
デテントは、シートが自然に休む高さであり、これらは完全に拡張されたシートフレームのほんの一部として定義されます。

00:02:32.000 --> 00:02:39.000
完全に拡張されたフレームは、ここでiPhoneとiPadで視覚化されており、以前にシートを使用したことがある場合はおなじみのはずです。

00:02:39.000 --> 00:02:51.000
iOS 15で2つのシステム定義のデテントを公開しました。シートの完全な高さの約半分である中程度のデテントと、完全に拡張されたシートの高さである大きなデテントです。

00:02:51.000 --> 00:02:58.000
シートがサポートするデテントを指定するには、デテントプロパティで必要なデテントの配列を設定するだけです。

00:02:58.000 --> 00:03:09.000
このプロパティのデフォルト値は、大きなディテントの配列です。そのため、まったく設定しないと、標準のフルハイトシートが表示されます。

00:03:09.000 --> 00:03:17.000
これを中規模と大規模のデテントの配列に設定すると、中規模と大規模の間でサイズ変更可能なシートが表示されます。

00:03:17.000 --> 00:03:27.000
しかし、これをミディアムディテントのみの配列に設定することもできます。これにより、ミディアムハイトで表示され、フルハイトにサイズ変更できないシートが得られます。

00:03:27.000 --> 00:03:29.000
これをサンプルアプリに適用しましょう。

00:03:29.000 --> 00:03:36.000
システムイメージピッカーを標準シートに表示するために、iOS 14 SDKをターゲットにしたコードから始めています。

00:03:36.000 --> 00:03:46.000
ボタンをタップすると、この最初の関数が呼び出され、画像ピッカーを作成し、ピッカーのデリゲートをselfに設定し、ピッカーを表示します。

00:03:46.000 --> 00:03:57.000
次に、画像が選択されると、ピッカーdidFinishPickingデリゲートメソッドが呼び出され、選択した画像を画像ビューに設定し、ピッカーを閉じます。

00:03:57.000 --> 00:03:58.000
それを走らせましょう。

00:03:58.000 --> 00:04:02.000
写真ボタンをタップすると、フォトピッカーがアプリ全体をカバーします。

00:04:02.000 --> 00:04:05.000
私の旅行が最近非常にバーチャルだったことに注目してください。

00:04:05.000 --> 00:04:11.000
そして、私が写真を選ぶと、フォトピッカーは却下し、私がはがきで選んだ写真を明らかにします。

00:04:11.000 --> 00:04:14.000
しかし、別の写真を選びたい場合はどうなりますか?

00:04:14.000 --> 00:04:16.000
私は再びこの全体の流れを経なければなりません。

00:04:16.000 --> 00:04:21.000
そして、写真のライブラリとはがきを同時に見せることができれば、本当にうれしいです。

00:04:21.000 --> 00:04:24.000
そして、ミディアムデテントで、私はできます。

00:04:24.000 --> 00:04:28.000
これは以前と同じコードですが、いくつかの変更があります。

00:04:28.000 --> 00:04:35.000
ピッカーを提示する前に、そのsheetPresentationControllerにアクセスし、そのディテントを中と大に設定します。

00:04:35.000 --> 00:04:46.000
また、ピッカーのFinishPickingデリゲートコールバックでは、写真を選択するときにフォトピッカーを却下したくないので、フォトピッカーを却下する行を削除しました。

00:04:46.000 --> 00:04:54.000
今、これを実行して写真ボタンをタップすると、私のライブラリは半分の高さで表示され、私は写真を選ぶことができます、そして出来上がり。

00:04:54.000 --> 00:04:57.000
私はまだ下の図書館で私のはがきでそれを見ることができます。

00:04:57.000 --> 00:05:02.000
そして、別の写真を試してみたい場合は、ワンタップと同じくらい簡単です。

00:05:02.000 --> 00:05:10.000
また、私のディテント配列には大きなディテントが含まれているため、バーをドラッグしてこのシートをフルハイトにサイズ変更できます。

00:05:10.000 --> 00:05:16.000
さらに、スクロールビューは一番上にスクロールされるため、スクロールビューをスクロールするとシートも展開されます。

00:05:16.000 --> 00:05:23.000
システム共有シートのようなアクションのシートの場合、これはリストの下部にあるより高度なアクションを徐々に開示する素晴らしい機能です。

00:05:23.000 --> 00:05:34.000
しかし、このフォトライブラリの例では、バーからドラッグしてシートのサイズを明示的に変更しない限り、はがきが常に表示されるように、スクロールはシートを展開しない方がいいかもしれません。

00:05:34.000 --> 00:05:43.000
この代替動作を取得するには、1つの追加プロパティを設定するだけです: PrefersScrollingExpands- WhenScrolledToEdge。

00:05:43.000 --> 00:05:50.000
デフォルトでは、このプロパティはtrueなので、falseに設定すると、スクロールがシートを拡張するのを防ぎます。

00:05:50.000 --> 00:05:59.000
これで、フォトピッカーはスクロールしてもサイズを変更しませんが、バーをドラッグしてフォトライブラリをよりよく表示できます。

00:05:59.000 --> 00:06:04.000
しかし、今、写真をタップしても、何かが起こったことは明らかではありません。

00:06:04.000 --> 00:06:12.000
これは、写真をタップするとフォトピッカーが却下され、私の選択が受信されたことを明確に示す以前の動作とは対照的です。

00:06:12.000 --> 00:06:21.000
私が欲しいのは、私の選択が受信されたことを示し、私の選択がはがきに表示されるようにするために、写真をタップしたときにシートのサイズをミディアムデテントに変更することです。

00:06:21.000 --> 00:06:26.000
そして、選択したデテントをプログラムで変更することで、これを達成できます。

00:06:26.000 --> 00:06:37.000
したがって、写真がタップされるたびに呼び出される画像ピッカーデリゲートメソッドに戻ると、ここにコードを追加してsheetPresentationControllerを取得し、選択したDetentIdentifierをmediumに設定できます。

00:06:37.000 --> 00:06:39.000
これを試してみましょう。

00:06:39.000 --> 00:06:44.000
写真をタップすると、遷移に気づく。

00:06:44.000 --> 00:06:45.000
うわー！

00:06:45.000 --> 00:06:48.000
その移行はとても速かったので、私はもう少しで眉毛を失いそうになった。

00:06:48.000 --> 00:06:50.000
実際にはまったくアニメーション化されませんでした。

00:06:50.000 --> 00:06:56.000
プロパティの設定をsheet.animateChangesブロックにラップすることで、このトランジションを簡単にアニメーション化できます。

00:06:56.000 --> 00:07:10.000
これにより、必要に応じて標準アニメーション曲線でシートをメディアデテントまでアニメーション化し、ルートシートのスケーリングバックアップなど、スタック内の他のシートもアニメーション化します。

00:07:10.000 --> 00:07:12.000
バターのように滑らか。

00:07:12.000 --> 00:07:18.000
もう1つの良いことは、調光ビューを削除して、選択した写真をフルカラーで表示することです。

00:07:18.000 --> 00:07:24.000
これを行うには、最小のUndimmed- DetentIdentifierと呼ばれるもう1つのプロパティがあります。

00:07:24.000 --> 00:07:33.000
デフォルトでは、このプロパティはnilです。これは、すべてのディテントがディミングされていることを意味しますが、ディミングを削除する場合は、ディミングしたくない最小のディテントの識別子に設定します。

00:07:33.000 --> 00:07:37.000
この場合、ミディアムに設定します。

00:07:37.000 --> 00:07:42.000
ピッカーを持ち出すと、ミディアムデテントで調光がないことに注意してください。

00:07:42.000 --> 00:07:43.000
タダ！

00:07:43.000 --> 00:07:48.000
しかし、大きなデテントにサイズを変更すると、調光はまだ消えます。

00:07:48.000 --> 00:08:02.000
このプロパティでは、調光を視覚的に削除するだけでなく、シート内のコンテンツだけでなく、シート外のコンテンツとも対話できるため、高度なノンモーダルエクスペリエンスを構築できます。

00:08:02.000 --> 00:08:15.000
これはフォントピッカーでさらに深刻で、フォントピッカーがアップしている間にテキストの範囲を選択し、その範囲にフォントを適用し、選択を調整し、フォントを再度適用できるUIを構築しました。

00:08:15.000 --> 00:08:20.000
これがどのように達成されるかの詳細については、サンプルアプリをダウンロードしてください。

00:08:20.000 --> 00:08:35.000
また、中程度の高さのシートが自動キーボード回避をサポートしていることも注目に値するので、ここでフォントを検索すると、シートはキーボードを考慮して自動的に成長し、キーボードが閉じると、シートは自動的に下に折りたたまれます。

00:08:35.000 --> 00:08:48.000
だから、それはデテントに関する多くの情報でしたが、今、私は風景のiPhoneのシートのための新しいオプションの外観から始めて、シートのための他のいくつかの新しい視覚的なカスタマイズオプションに注意を向けたいと思います。

00:08:48.000 --> 00:09:00.000
iOS 13では、すべてのシートを横向きにフルスクリーンにし、シートが下端の画面にのみ取り付けられる代替の外観が利用可能になりました。

00:09:00.000 --> 00:09:06.000
この新しい外観を得るには、prefersEdgeAttached- InCompactHeightをtrueに設定するだけです。

00:09:06.000 --> 00:09:10.000
今、これを設定するだけで、常に安全なエリアと同じくらい広いシートが得られます。

00:09:10.000 --> 00:09:19.000
幅が presentedViewControllers preferredContentSize に続くシートをご希望の場合は、widthFollows- PreferredContentSize- WhenEdgeAttached を true に設定します。

00:09:19.000 --> 00:09:27.000
これにより、シートのデフォルト幅が狭くなり、この幅をさらにカスタマイズするためにpreferredContentSizeを設定できます。

00:09:27.000 --> 00:09:31.000
これらのプロパティに加えて、必要に応じてグラバーを表示するプロパティもあります。

00:09:31.000 --> 00:09:43.000
グラバーはしばしば必要ではありませんが、スクロールがシートのサイズを変更しない場合など、シートのサイズ変更可能であることは明らかではない場合、グラバーを表示することはサイズ変更の有用な指標になります。

00:09:43.000 --> 00:09:46.000
今、シートの角に注目してください。

00:09:46.000 --> 00:09:50.000
私たちが公開したもう1つのオプションは、コーナー半径をカスタマイズする機能です。

00:09:50.000 --> 00:09:55.000
アプリがより丸みを帯びた外観の場合は、その美学に合わせたいと思うかもしれません。

00:09:55.000 --> 00:10:05.000
システムは積み重ねられたコーナーが一貫して見えるので、このフォトピッカーがルートシートを押し戻すために拡大した場合、ルートシートは一致するより大きなコーナーを持つことに注意してください。

00:10:05.000 --> 00:10:16.000
最後に、iPadでデテント付きのシートを作成することは可能ですが、多くの場合、コンパクトでシートに適応するポップオーバーが求められ、潜在的にデテントのようなものでカスタマイズされます。

00:10:16.000 --> 00:10:19.000
サンプルアプリでこのアプローチを取りましょう。

00:10:19.000 --> 00:10:24.000
iPadで画像ピッカーのポップオーバーを取得するには、いくつかの小さな変更を加える必要があります。

00:10:24.000 --> 00:10:29.000
まず、ピッカーのmodalPresentationStyleをポップオーバーに設定します。

00:10:29.000 --> 00:10:40.000
次に、sheetPresentationControllerをつかむ代わりに、これはnilを返すので、modalPresentationStyleはシートではないので、popoverPresentationControllerを取得します。

00:10:40.000 --> 00:10:48.000
ポップオーバーのソースをbarButtonItemに設定し、popoverでadaptiveSheet-PresentationControllerと呼ばれる新しいプロパティをつかみます。

00:10:48.000 --> 00:10:59.000
このプロパティは、ポップオーバーがコンパクトなサイズのクラスで適応するシートのインスタンスを返し、以前のシートと同じように設定します。

00:10:59.000 --> 00:11:07.000
写真ボタンをタップすると、フォトピッカーがポップオーバーに表示され、シーンのサイズを変更すると、中程度の高さのシートに適応します。

00:11:07.000 --> 00:11:09.000
うまくいきます！

00:11:09.000 --> 00:11:14.000
そして、ピッカーを展開して写真を選択すると--ああ、いや!

00:11:14.000 --> 00:11:18.000
以前に実装したように、自動的に中程度の高さにサイズ変更されませんでした。

00:11:18.000 --> 00:11:19.000
うーん。

00:11:19.000 --> 00:11:23.000
Picker didFinishPickingデリゲートメソッドに戻りましょう。

00:11:23.000 --> 00:11:24.000
ああ！

00:11:24.000 --> 00:11:33.000
アダプティブシートを取得するには、このコードのpopoverPresentationControllerのadaptiveSheet-PresentControllerも読む必要があります。

00:11:33.000 --> 00:11:36.000
今、私が写真を選択するときに注意してください。

00:11:36.000 --> 00:11:41.000
万歳！再びミディアムにサイズ変更されます。

00:11:41.000 --> 00:11:50.000
さて、以前は簡単に構築できなかったシートを使用して、新しいタイプのUIを簡単に構築できる多くのことについてここで話しました。

00:11:50.000 --> 00:11:56.000
中程度の高さのシートやノンモーダル体験の恩恵を受けるエリアについては、独自のアプリを確認してください。

00:11:56.000 --> 00:12:02.000
今日、アプリに半分の高さのカスタムカードがある場合は、これらの新しく強化されたUIKitシートに置き換えてください。

00:12:02.000 --> 23:59:59.000
ご覧いただきありがとうございます、そして私はあなたがシートで構築するすべてのクールな新しいものを見るのを楽しみにしています。

