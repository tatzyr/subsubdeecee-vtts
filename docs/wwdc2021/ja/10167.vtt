WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
Beatriz Magalhães:こんにちは、私の名前はBeaで、ドキュメンテーションチームのヒューマンインターフェースデザイナーです。

00:00:14.000 --> 00:00:20.000
同僚のジャックと私は、XcodeでDocCドキュメントを昇格する方法について話し合うつもりです。

00:00:20.000 --> 00:00:25.000
素晴らしいドキュメントを作成して共有することがこれまで以上に簡単になりました。

00:00:25.000 --> 00:00:32.000
今年は、SwiftフレームワークのドキュメントをXcode 13に統合しました。

00:00:32.000 --> 00:00:38.000
このセッションでは、作成したフレームワークのドキュメントを強化します： SlothCreator。

00:00:38.000 --> 00:00:45.000
SlothCreatorを使用して、自然の中で見つけたナマケモノをカタログ化し、新しい愛らしい仮想ナマケモノを作成できます。

00:00:45.000 --> 00:01:09.000
このフレームワークの既存のドキュメントをより良くするために、Xcode 13で利用可能なドキュメントページタイプと、コンテンツに最適なものを選択する方法、フレームワークに関するストーリーを伝えるためにAPIの順序を整理する方法、および拡張機能がドキュメントの書き方を柔軟にする方法について説明します。

00:01:09.000 --> 00:01:14.000
新しいXcode機能、つまりドキュメントページタイプから始めます。

00:01:14.000 --> 00:01:29.000
Xcode 13には「ドキュメントカタログ」と呼ばれるまったく新しい機能があり、ドキュメントウィンドウまたはWebで表示できる3つのページタイプ（リファレンス、記事、チュートリアル）を作成できます。

00:01:29.000 --> 00:01:36.000
各プロジェクトはユニークでニーズが異なりますが、通常、多様なドキュメントセットを持つことは良いことです。

00:01:36.000 --> 00:01:43.000
リファレンスは、ライブラリ内の個々のAPIに関する簡潔で詳細な情報を提供します。

00:01:43.000 --> 00:01:49.000
これにより、テキストの説明、コードスニペット、および異なるシンボル間の関係を追加できます。

00:01:49.000 --> 00:01:53.000
これはあなたのドキュメントのバックボーンです。

00:01:53.000 --> 00:01:57.000
記事は自由形式のコンテンツを含むページです。

00:01:57.000 --> 00:02:05.000
彼らは、フレームワークがどのように機能するかの全体像を与え、特定のタスクを完了する方法を説明するのが得意です。

00:02:05.000 --> 00:02:09.000
彼らはしばしば異なるシンボルの間で点をつなぎます。

00:02:09.000 --> 00:02:15.000
チュートリアルは、フレームワークを使用するプロジェクトのステップバイステップのウォークスルーです。

00:02:15.000 --> 00:02:21.000
シンボルの組み合わせが実際に実装することでどのように連携するかを理解するのは素晴らしいことです。

00:02:21.000 --> 00:02:31.000
すべての習熟度レベルのフレームワーク採用者はチュートリアルの恩恵を受けることができますが、これは非常に初心者に優しいフォーマットであることは注目に値します。

00:02:31.000 --> 00:02:35.000
このセッションでは、記事に焦点を当てます。

00:02:35.000 --> 00:02:41.000
参考資料やチュートリアルに関する情報を見るには、これらの他のWWDCセッションをチェックしてください。

00:02:41.000 --> 00:02:49.000
SlothCreatorのドキュメントを強化し始める前に、ドキュメントウィンドウの新機能を確認します。

00:02:49.000 --> 00:02:58.000
これで、ナビゲーターでAppleのすべてのテクノロジーと独自のドキュメントを見ることができます。

00:02:58.000 --> 00:03:02.000
さて、 SlothCreatorのドキュメントの現在の状態を確認します。

00:03:02.000 --> 00:03:07.000
SlothCreator SwiftパッケージをXcodeで開いています。

00:03:07.000 --> 00:03:14.000
[製品] をクリックし、[ドキュメントの作成] をクリックして、ドキュメント ウィンドウを表示します。

00:03:14.000 --> 00:03:23.000
SlothCreatorフレームワークのドキュメントをスクロールすると、すべてのシンボルがすでにここで参照でカバーされていることがわかります。これは素晴らしいことです。

00:03:23.000 --> 00:03:32.000
しかし、以前にこのフレームワークを使用したことがない人の視点からこのページに近づくと、それが何をするのか一目では明らかではありません。

00:03:32.000 --> 00:03:37.000
トップレベルの記事を使って全体像を描くことができます。

00:03:37.000 --> 00:03:53.000
トップレベルの記事には、簡潔な要約文、画像やコードスニペットなどのコンテンツを含む概要、下部には、強調したいいくつかの記号を含むトピックセクションがあります。

00:03:53.000 --> 00:03:59.000
記事を追加するには、ドキュメントカタログでプロジェクトを設定する必要があります。

00:03:59.000 --> 00:04:06.000
ドキュメントカタログは、すべてのドキュメントファイルを含むXcodeナビゲーターのファイルです。

00:04:06.000 --> 00:04:09.000
さらに、新しいページタイプを書くことができます。

00:04:09.000 --> 00:04:18.000
これにより、ドキュメントに一目ですばやくアクセスでき、日々のワークフローでドキュメントに優先順位を付けることが容易になります。

00:04:18.000 --> 00:04:29.000
これを行うには、 SlothCreator ターゲットのソースを含む SlothCreator Sources ディレクトリを右クリックし、新しいファイルを選択します。

00:04:29.000 --> 00:04:38.000
次に、ドキュメンテーションカタログが見つかるまでリストをスクロールします。

00:04:38.000 --> 00:04:43.000
フレームワークのターゲットに合わせて名前を付けます： SlothCreator。

00:04:43.000 --> 00:04:48.000
Xcodeは、ドキュメントカタログを作成するときにトップレベルの記事を提供します。

00:04:48.000 --> 00:04:57.000
プロジェクトナビゲーターとマークダウンの両方で名前を「SlothCreator」に変更します。

00:04:57.000 --> 00:05:00.000
では、私たちの記事を始めましょう。

00:05:00.000 --> 00:05:03.000
あなたはMarkdownを使って記事を書きます。

00:05:03.000 --> 00:05:11.000
まず、私のフレームワークが行うことを1つの文で説明する要約を追加します。

00:05:11.000 --> 00:05:22.000
次に、SlothCreatorの主な機能（研究、ケア、視覚化）に関する概要タイトルの下に、より詳細な情報を追加します。

00:05:22.000 --> 00:05:28.000
最後に、開発者が何を見ているのかを一目でわかるように、画像を追加します。

00:05:28.000 --> 00:05:37.000
2倍の解像度で、ダークモードと互換性のある画像、またはダークモードの代替画像を追加することをお勧めします。

00:05:37.000 --> 00:05:42.000
ファイルに適切な命名規則を含めることを忘れないでください。

00:05:42.000 --> 00:05:46.000
まず、ファイルの名前：「sloth」。

00:05:46.000 --> 00:05:51.000
次に、画像がダークモードの場合、チルダと「ダーク」という単語が表示されます。

00:05:51.000 --> 00:05:55.000
次に、スケールファクターを記述する@2x。

00:05:55.000 --> 00:06:02.000
そして最後に、画像ファイル形式は、この場合は.pngです。

00:06:02.000 --> 00:06:17.000
画像が適切なサイズで正しく名前が付けられていることを確認したので、Finderを開き、アセットをドキュメントカタログのリソースフォルダにドラッグします。

00:06:17.000 --> 00:06:23.000
次に、記事Markdownに画像を追加します。

00:06:23.000 --> 00:06:35.000
まず、感嘆符を追加し、次に画像にアクセスできるように括弧の間に説明を追加し、最後に括弧の間のファイル名を追加しました。

00:06:35.000 --> 00:06:39.000
私が「@2x」や「~dark」と入力しなかったことに気づいたかもしれません。

00:06:39.000 --> 00:06:46.000
なぜなら、Xcodeは自動的に画像を選択するので、入力する必要があるのは画像名自体だけです。

00:06:46.000 --> 00:06:49.000
さて、私はトップレベルの記事を終えました。

00:06:49.000 --> 00:06:53.000
私のドキュメントを作成して、それがどのように見えるか見てみましょう。

00:06:53.000 --> 00:07:02.000
製品をクリックし、ドキュメントのビルドをもう一度選択して、ドキュメントウィンドウを表示します。

00:07:02.000 --> 00:07:17.000
素晴らしい、 SlothCreatorは、明確な高レベルの要約、このフレームワークが何のためにあるべきかについてのより多くのコンテキストを与える概要、およびフレームワークのコアコンセプトを一目で説明する画像を持っています。

00:07:17.000 --> 00:07:25.000
さて、これまでSlothCreatorを使用したことがない人は、フレームワークが何をするかの全体像をすぐに理解することができます。

00:07:25.000 --> 00:07:33.000
SlothCreatorを使い始める方法に関する実用的な最初のステップを提供することで、このドキュメントをさらに良くすることができます。

00:07:33.000 --> 00:07:35.000
タスク記事はそれに役立つかもしれません。

00:07:35.000 --> 00:07:49.000
事前にタスク記事を準備したので、Finderを開いてSlothCreatorのドキュメントカタログにドラッグします。

00:07:49.000 --> 00:07:57.000
この記事は、このフレームワークの中核要素であるナマケモノの作成と世話の仕方を人々に教えることを目的としています。

00:07:57.000 --> 00:08:01.000
構造の面では、トップレベルの記事と非常によく似ています。

00:08:01.000 --> 00:08:05.000
どちらのタイプにも、テキスト、画像、コードスニペットを含めることができます。

00:08:05.000 --> 00:08:07.000
ここでの最大の違いは内容です。

00:08:07.000 --> 00:08:18.000
これらの違いを確認するには、製品とビルドドキュメントを選択して、ドキュメントを再度作成します。

00:08:18.000 --> 00:08:27.000
次に、ドキュメントウィンドウナビゲーターで、「Getting Started with Sloths」を選択します。

00:08:27.000 --> 00:08:35.000
素晴らしい、この記事は、その特性と特性を説明することによって、ナマケモノを作成する方法に関するより多くのコンテキストを提供します。

00:08:35.000 --> 00:08:41.000
また、ナマケモノの世話をし、適切な生息地を形成する方法に関する実用的なステップを提供します。

00:08:41.000 --> 00:08:45.000
これは、人々がSlothCreatorをはるかに早く採用するのに役立ちます。

00:08:45.000 --> 00:08:54.000
要約すると、これまでのところ、私はあなたが作成できるすべての異なるタイプのドキュメントと、それぞれを何に使用できるかについて話しました。

00:08:54.000 --> 00:09:07.000
「ドキュメントカタログ」と呼ばれる新しいXcode 13機能を導入しました。これにより、すべてのドキュメントファイルを同じ場所に配置し、新しいタイプのドキュメントを作成できます。

00:09:07.000 --> 00:09:17.000
そして、私はそれを使用して、より多くのコンテキストを与え、特定のタスクに飛び込むことによって、私のドキュメントを強化する2つの記事を作成しました。

00:09:17.000 --> 00:09:24.000
これらの記事を作成するために、私はMarkdownと私たちが現在サポートしている新しいファイルをドキュメントに使用しました。

00:09:24.000 --> 00:09:35.000
今、私はそれをジャックに引き渡すので、彼はあなたのシンボルを整理し、ドキュメントの拡張機能を作成することによって、あなたのドキュメントをさらに良くする方法について話すことができます。

00:09:35.000 --> 00:09:37.000
ジャック・ローレンス:ありがとう、ビー、それらの記事は素晴らしく見えます。

00:09:37.000 --> 00:09:43.000
いくつかの新しいページを追加したので、フレームワークを通してすべての人を導くのに役立つ別の方法があります。

00:09:43.000 --> 00:09:48.000
以前、Beaは SlothCreatorの概要を含むフレームワークページを作成しました。

00:09:48.000 --> 00:09:56.000
ページの下部に、DocCコンパイラは、ナマケモノフレームワークのすべてのドキュメントを含むトピックセクションを自動的に作成しました。

00:09:56.000 --> 00:09:59.000
これは素晴らしいスタートですが、改善できると思います。

00:09:59.000 --> 00:10:04.000
だから、一歩下がって、私たちが伝えたい物語について考えてみましょう。

00:10:04.000 --> 00:10:16.000
SlothCreator APIは、ナマケモノの研究と作成、ナマケモノの健康と幸福のケア、生息地でのナマケモノの視聴の3つの主要なカテゴリに分類されます。

00:10:16.000 --> 00:10:23.000
これらのカテゴリを使用して、SlothCreatorのドキュメントページを整理できます。

00:10:23.000 --> 00:10:26.000
フレームワークのトップレベルのページは次のとおりです。

00:10:26.000 --> 00:10:29.000
まず、最も重要なページ以外はすべて脇に置いておきます。

00:10:29.000 --> 00:10:36.000
速度や色などのサポートタイプは、後で別のページの下に整理できます。

00:10:36.000 --> 00:10:43.000
次に、残りのページをSlothCreatorの機能を中心としたグループに整理します。

00:10:43.000 --> 00:10:50.000
そして最後に、グループとページを最も先進的なものから最も先進的なものまで並べ替えます。

00:10:50.000 --> 00:10:59.000
この新しい組織ははるかに親しみやすく見え、特定の機能に興味のあるフレームワークの採用者は、どこを見るべきかを知るでしょう。

00:10:59.000 --> 00:11:04.000
次に、これらのテーマを使用するようにフレームワークのドキュメントを更新します。

00:11:04.000 --> 00:11:08.000
SlothCreatorプロジェクトとビルドドキュメントを開いています。

00:11:08.000 --> 00:11:12.000
コンパイラは、デフォルトのグループを持つ各ページにトピックセクションを自動的に追加します。

00:11:12.000 --> 00:11:16.000
しかし、私はいくつかの余分なマークダウンでそれをカスタマイズすることができます。

00:11:16.000 --> 00:11:20.000
以前、Beaはフレームワーク記事を含むドキュメントカタログを作成しました。

00:11:20.000 --> 00:11:27.000
プロジェクトナビゲーターで、ドキュメントカタログ内の SlothCreator Markdown ファイルを選択します。

00:11:27.000 --> 00:11:30.000
テンプレートには、私が記入するためのトピックセクションがすでに含まれています。

00:11:30.000 --> 00:11:36.000
「エッセンシャル」から始めて、第3レベルの見出しでグループタイトルを更新します。

00:11:36.000 --> 00:11:39.000
次に、グループに含めるリンクのリストを追加します。

00:11:39.000 --> 00:11:43.000
「はじめに」の記事とナマケモノタイプから始めます。

00:11:43.000 --> 00:11:50.000
記事にリンクするには、doc URLスキームを使用して、拡張子のないファイルの名前を使用します。

00:11:50.000 --> 00:11:56.000
シンボルにリンクするには、シンボルの名前をダブルバックティックで囲みます。

00:11:56.000 --> 00:12:04.000
先ほど作成したカテゴリを使用して、他のすべてのドキュメントページもグループに整理します。

00:12:04.000 --> 00:12:07.000
では、再構築して変更を見てみます。

00:12:07.000 --> 00:12:13.000
[製品] メニューで、[ビルド ドキュメント] を選択して再構築します。

00:12:13.000 --> 00:12:21.000
ドキュメントは構築されていますが、DocCによって生成された診断が表示され、ここにリンクを誤って入力したようです。

00:12:21.000 --> 00:12:27.000
オートコンプリートに任せましょうので、私はそれが正しいと確信しています。

00:12:27.000 --> 00:12:35.000
次に、製品メニューを使用してドキュメントを再度再構築し、すべての問題を解決したかどうかを確認します。

00:12:35.000 --> 00:12:38.000
素晴らしい、これ以上の警告はありません。

00:12:38.000 --> 00:12:48.000
ドキュメントウィンドウのフレームワークページで、新しい「Getting Started」記事は、誰もが見る最初のトピックであり、複雑さの順に SlothCreatorのメインテーマが続きます。

00:12:48.000 --> 00:12:56.000
左側のドキュメントナビゲーターも各ページのトピックセクションに合わせて更新されるので、探しているページをすばやく見つけることができます。

00:12:56.000 --> 00:12:59.000
それでは、ドキュメントの整理方法を確認しましょう。

00:12:59.000 --> 00:13:05.000
すべてのページが自動的に整理され、トピックセクションでカスタマイズできます。

00:13:05.000 --> 00:13:10.000
トピックセクションを作成するには、第2レベルのトピックの見出しを追加します。

00:13:10.000 --> 00:13:19.000
次に、第3レベルの見出しを持つグループを追加し、現在のページの下に整理したい他のページへのリンクのリストを追加します。

00:13:19.000 --> 00:13:27.000
クラス、構造、列挙、プロトコルなどのコンテナシンボルとともに、任意の記事にトピックセクションを追加できます。

00:13:27.000 --> 00:13:37.000
フレームワークのドキュメントを整理するときは、最も重要な機能とテーマ、および開発者がアプリを作成するために一緒に使用するAPIを検討してください。

00:13:37.000 --> 00:13:43.000
プライマリドキュメントの下のサポートページを移動して、焦点と明確さを追加します。

00:13:43.000 --> 00:13:48.000
そして、基本から始めて、徐々に複雑さを導入します。

00:13:48.000 --> 00:13:56.000
フレームワークページでグループをカスタマイズしたので、タイプとそのメンバーを含む、 SlothCreatorのすべてのドキュメントを整理したいと思います。

00:13:56.000 --> 00:14:03.000
ドキュメント拡張機能を使用すると、APIのドキュメントの書き方を柔軟に選択できます。

00:14:03.000 --> 00:14:14.000
ソースコードにカスタムトピックセクションを追加できますが、この追加のドキュメントが別のファイルにある場合、時間の経過とともにレビューして維持する方が簡単だと思います。

00:14:14.000 --> 00:14:18.000
そして、私はまさにそれを行うためにドキュメント拡張機能を使用することができます。

00:14:18.000 --> 00:14:21.000
まず、新しいMarkdownファイルを作成します。

00:14:21.000 --> 00:14:26.000
タイトルのリンク構文を使用してAPIに関連付けます。

00:14:26.000 --> 00:14:41.000
次に、ソースコードの焦点と明確さを向上させるために、要約やディスカッションなどの主要なコンテンツをコードに残し、トピックセクションを抽出します。

00:14:41.000 --> 00:14:49.000
DocCがビルドすると、各ソースコメントと対応するドキュメント拡張機能が1つのドキュメントページにマージされます。

00:14:49.000 --> 00:14:59.000
拡張機能を使用すると、ドキュメントの作成とレビュー、フレームワークの生成されたインターフェイスの改善、より良いドキュメントの読み取り体験を簡単に提供できます。

00:14:59.000 --> 00:15:04.000
次に、 SlothCreatorのドキュメントを強化するために、ドキュメント拡張機能を追加します。

00:15:04.000 --> 00:15:08.000
まず、変更を加える前にナマケモノのページを見てみます。

00:15:08.000 --> 00:15:15.000
Slothタイプのドキュメントコメントがあり、ビルドされたドキュメントもあります。

00:15:15.000 --> 00:15:24.000
ソースコードに書いたドキュメントは素晴らしく見えますが、トピックセクションは改善される可能性があり、ドキュメント拡張でそれを行うことができます。

00:15:24.000 --> 00:15:31.000
プロジェクトナビゲーターで、ドキュメントカタログを右クリックして新しいファイルを追加します。

00:15:31.000 --> 00:15:39.000
テンプレートセレクタで、拡張ファイルテンプレートを選択し、「Sloth」という名前を付けます。

00:15:39.000 --> 00:15:44.000
次に、タイトルのリンクを使用して、拡張ファイルをナマケモノタイプに接続します。

00:15:44.000 --> 00:15:53.000
URLにモジュールの名前を含める必要があります。

00:15:53.000 --> 00:16:00.000
以前、同僚のBeaがこの構文を使用してトップレベルのフレームワーク記事を作成したので、これは見覚えがあるかもしれません。

00:16:00.000 --> 00:16:06.000
次に、トピックセクションにいくつかのカスタマイズされたグループを追加します。

00:16:06.000 --> 00:16:15.000
最後に、製品&gt;ビルドドキュメントを使用して再構築し、結果を確認します。

00:16:15.000 --> 00:16:22.000
ソースコードに書いたコンテンツはまだ一番上にあり、ドキュメントファイルで作成したトピックセクションはその後に追加されます。

00:16:22.000 --> 00:16:30.000
ナビゲーターでページを展開すると、ナビゲーターも更新されます。

00:16:30.000 --> 00:16:34.000
Beaと私が行った変更は完了し、私たちはそれらを世界と共有する準備ができています。

00:16:34.000 --> 00:16:40.000
ドキュメントはXcodeで見栄えがよく、誰でもSwiftパッケージをダウンロードした後にビルドできます。

00:16:40.000 --> 00:16:51.000
また、ナビゲーターのエクスポートボタンを使用して、Swiftパッケージをダウンロードしたり構築したりすることなく、Xcodeでドキュメントを閲覧するために使用できるアーカイブをエクスポートすることもできます。

00:16:51.000 --> 00:16:57.000
そして、誰もがアクセスできるようにしたい場合は、ウェブ上でドキュメントを公開することもできます。

00:16:57.000 --> 00:17:00.000
そして、この関連セッションをチェックして、詳細を知ることができます。

00:17:00.000 --> 00:17:05.000
それでは、Swiftフレームワークのドキュメントを昇格させる方法を確認しましょう。

00:17:05.000 --> 00:17:11.000
まず、フレームワークを紹介する記事を作成し、APIがどのように連携するかを説明します。

00:17:11.000 --> 00:17:17.000
次に、ドキュメントをグループに整理して、ナビゲーションを改善します。

00:17:17.000 --> 00:17:23.000
最後に、ドキュメント拡張ファイルのAPIリファレンスに深さと詳細を追加します。

00:17:23.000 --> 00:17:32.000
さらに進めたい場合は、ウェブに公開する方法を学び、これら2つの関連セッションのチュートリアルで読者を段階的にガイドすることができます。

00:17:32.000 --> 00:17:37.000
Xcode 13はドキュメントの巨大なアップデートであり、あなたが公開するものを見てとても興奮しています。

00:17:37.000 --> 00:17:39.000
見てくれてありがとう!

00:17:39.000 --> 23:59:59.000
♪

