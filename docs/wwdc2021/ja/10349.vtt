WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:11.000
ねえ、私はジェイコブです。

00:00:11.000 --> 00:00:14.000
「SwiftUIのSFシンボル」へようこそ。

00:00:14.000 --> 00:00:16.000
このセッションでは、いくつかのトピックを見ていきます。

00:00:16.000 --> 00:00:21.000
まず、SwiftUIのSFシンボルを使用するための基礎のいくつか。

00:00:21.000 --> 00:00:24.000
次に、シンボルのバリアントを使用する方法。

00:00:24.000 --> 00:00:27.000
そして最後に、新しいレンダリングモードでの作業。

00:00:27.000 --> 00:00:38.000
これらのAPIの可用性に関する1つの注意：このセッションで見られるものはすべて、すべてのAppleプラットフォームで利用でき、今年のリリースで何か新しいものを知るために新しいバッジを探してください。

00:00:38.000 --> 00:00:40.000
ファンダメンタルズに入りましょう。

00:00:40.000 --> 00:00:46.000
すでにSwiftUIのシンボルを使用している場合は、この部分は簡単なはずです。

00:00:46.000 --> 00:00:50.000
まず、シンボルを見せましょう。

00:00:50.000 --> 00:00:56.000
最も簡単な方法は、画像で「ハート」のようなシステムが提供するシンボルの1つを使用することです。

00:00:56.000 --> 00:00:59.000
ラベルビューは、シンボルを表示するもう1つの主な方法です。

00:00:59.000 --> 00:01:06.000
ラベルは、タイトルとアイコンの組み合わせであり、ほとんどの場合、シンボルです。

00:01:06.000 --> 00:01:14.000
ラベルの素晴らしい点は、このペアリングの一般的な説明であり、その動作が表示されているコンテキストに適応させることです。

00:01:14.000 --> 00:01:19.000
たとえば、多くのコンポーネントでは、ラベルにシンボルとタイトルが表示されます。

00:01:19.000 --> 00:01:27.000
場合によっては、異なるレイアウトで表示されるか、場合によっては、コンポーネントにシンボルまたはタイトルのみが表示されます。

00:01:27.000 --> 00:01:36.000
SwiftUIは、組み込みビューでこれらの変更を自動的に行います。また、独自のビューでラベルスタイルを使用して行うこともできます。

00:01:36.000 --> 00:01:42.000
使用する初期化子を変更するだけで、画像とラベルの両方でカスタムシンボルを表示できます。

00:01:42.000 --> 00:01:49.000
これはこれらの構成のそれぞれがどのように見えるかですが、重要なのは視覚的表現だけではありません。

00:01:49.000 --> 00:01:54.000
これは、これらの各ビューがデフォルトでVoiceOverに表示される方法です。

00:01:54.000 --> 00:02:02.000
タイトルはコンテンツのテキスト説明を与えるので、ラベルを使用すると自動的に優れたアクセシビリティサポートが得られることがわかります。

00:02:02.000 --> 00:02:06.000
画像のみのケースを詳しく見てみましょう。

00:02:06.000 --> 00:02:12.000
可能であれば、SwiftUIはシステムシンボルの内容に基づいてラベルを提供します。

00:02:12.000 --> 00:02:17.000
あなたが「愛」ボタンのためにハートを使用している場合のように、これはあなたが必要とするすべてかもしれません。

00:02:17.000 --> 00:02:25.000
ただし、一部のシンボルには標準的な意味がなく、その場合、デフォルトのアクセシビリティの説明はそれほど役に立ちません。

00:02:25.000 --> 00:02:31.000
また、アプリがシンボルをどのように使用しているかについて、より具体的な情報を追加できるかもしれません。

00:02:31.000 --> 00:02:37.000
アクセシビリティラベルを使用して、いつでもその情報を提供できます。

00:02:37.000 --> 00:02:43.000
私たちのカスタムシンボルは、理想的なアクセシビリティの説明を取得していない別のケースです。

00:02:43.000 --> 00:02:50.000
それを改善する素晴らしい方法は、Localizable.stringsファイルで画像の名前のローカリゼーションを提供することです。

00:02:50.000 --> 00:02:58.000
SwiftUIは、使用されている場所であればどこでも、この画像のアクセシビリティラベルにこのローカライズ可能な文字列を自動的に使用します。

00:02:58.000 --> 00:03:02.000
記号を使用する最後の方法の1つは、テキストの一部としてです。

00:03:02.000 --> 00:03:06.000
文字列補間を使用して、テキストの実行内にシンボルを埋め込むことができます。

00:03:06.000 --> 00:03:15.000
これは、このシェブロンのように、テキストと一緒にシンボルをリフローしたいときに使用する良いテクニックです。

00:03:15.000 --> 00:03:23.000
さて、心でラベルに戻り、それらをカスタマイズするためにシンボルに適用できる修飾子のいくつかを見てみましょう。

00:03:23.000 --> 00:03:28.000
フォアグラウンドスタイル修飾子でシンボルの色を変更することから始めましょう。

00:03:28.000 --> 00:03:34.000
テキストと記号は、ライトモードまたはダークモードでデフォルトで黒または白になります。

00:03:34.000 --> 00:03:43.000
foregroundStyleを赤などの特定の色に設定するか、現在の色合いやセカンダリスタイルなどのよりセマンティックな値に設定できます。

00:03:43.000 --> 00:03:50.000
後で再びforegroundStyleに戻り、それを使ってできるより高度な効果を確認します。

00:03:50.000 --> 00:03:57.000
フォント修飾子を使用して、テキストサイズとシンボルのサイズの両方を変更できます。

00:03:57.000 --> 00:04:09.000
本文やキャプションなどのテキストスタイルを使用する場合、テキストとシンボルは動的タイプで拡大縮小され、固定サイズを選択した場合、それらは一定のままです。

00:04:09.000 --> 00:04:16.000
シンボルのサイズを変更できる他の軸は、imageScale修飾子を使用して、そのスケールです。

00:04:16.000 --> 00:04:23.000
これにより、使用されるフォントサイズは変更されませんが、テキストに対するシンボルの大きさは変更されます。

00:04:23.000 --> 00:04:26.000
次に、バリアントを見てみましょう。 

00:04:26.000 --> 00:04:31.000
iOSのタブバーには、塗りつぶされたシンボルのバリエーションを使用する必要があることに気づいたかもしれません。

00:04:31.000 --> 00:04:41.000
過去には、これはシンボルアプリから正しいシンボルを慎重に選択し、シンボルに「スパークル」のような塗りつぶしのバリアントがないタイミングを知ることで、自分でやらなければならなかったことでした。

00:04:41.000 --> 00:04:50.000
今年の新機能では、タブバーやその他のビューは、含まれているシンボルに適用するために、塗りつぶしなどの特定のバリアントを自動的に選択できるようになりました。

00:04:50.000 --> 00:04:56.000
これは、シンボルの基本バージョンを使用するだけで、余分な作業なしで適切なバリアントを取得できることを意味します。

00:04:56.000 --> 00:05:02.000
また、必要な正確な設定を過度に指定しないことで、より再利用可能なコードも取得できます。

00:05:02.000 --> 00:05:10.000
たとえば、macOSでこの同じコードを実行すると、そのプラットフォームの正しいバリアントを取得します:アウトライン。

00:05:10.000 --> 00:05:14.000
このバリアントサポートは、独自のコンポーネントでも使用できます。

00:05:14.000 --> 00:05:19.000
ここでは、デフォルトのアウトラインバリアントで示されているラベルの簡単なリストがあります。

00:05:19.000 --> 00:05:24.000
ここで塗りつぶされたバリアントを使用するには、新しい symbolVariant 修飾子を使用できます。

00:05:24.000 --> 00:05:32.000
この修飾子は、環境内で指定されたバリアントを設定するので、ここで行っているように、ビュー階層全体で使用するのは素晴らしいことです。

00:05:32.000 --> 00:05:38.000
フィル、スラッシュ、および形状カプセル化のセットなど、利用可能なバリアントの大規模なセットがあります。

00:05:38.000 --> 00:05:47.000
そして、これらは、.circle.fillのように、シンボル自体の名前で結合されるのと同じ方法で、互いに組み合わせることができます。

00:05:47.000 --> 00:05:51.000
この同じバリアントセットは、カスタムシンボルでも機能します。

00:05:51.000 --> 00:05:56.000
あなたがしなければならないのは、システムシンボルで使用されるのと同じ命名パターンに従うことだけです。

00:05:56.000 --> 00:05:59.000
次に、レンダリングモードを見てみましょう。

00:05:59.000 --> 00:06:06.000
シンボルは4つの異なるレンダリングモードをサポートし、シンボルの色付け方法をカスタマイズできます。

00:06:06.000 --> 00:06:08.000
各レンダリングモードの例をいくつか紹介します。

00:06:08.000 --> 00:06:10.000
私たちはそれらを一つずつ確認します。

00:06:10.000 --> 00:06:19.000
また、さまざまなレンダリングモードのデザインについて詳しく知りたい場合は、「SFシンボルの新機能」を強くお勧めします。

00:06:19.000 --> 00:06:23.000
さて、今回はmacOSで、カードのリストに戻りましょう。

00:06:23.000 --> 00:06:29.000
現在、私たちのシンボルは、モノクロのデフォルトのレンダリングモードを示しています。

00:06:29.000 --> 00:06:34.000
これは、シンボルのセットに一貫した色を表示するのによく機能します。

00:06:34.000 --> 00:06:40.000
ただし、この場合、各カードに関連付けられている色を使用してこれらのシンボルを表示したいと思います。

00:06:40.000 --> 00:06:46.000
マルチカラーレンダリングモードは、各シンボルが表すものの色を表示するのに最適な方法です。

00:06:46.000 --> 00:06:51.000
そして、マルチカラーにシンボルレンダリングモード修飾子を追加することで、それに変更することができます。

00:06:51.000 --> 00:06:58.000
シンボルに多色表現がない場合は、モノクロレンダリングモードに戻ります。

00:06:58.000 --> 00:07:06.000
SFシンボルアプリを使用して、マルチカラー定義を持つシンボルを検索し、カスタムシンボルにマルチカラーサポートを追加できます。

00:07:06.000 --> 00:07:10.000
詳細については、「SFシンボルアプリの概要」をご覧ください。

00:07:10.000 --> 00:07:16.000
このアプリの別の部分には、デッキのさまざまな部分にカードをシャッフルするためのボタンがいくつかあります。

00:07:16.000 --> 00:07:20.000
異なるレベルの不透明度を持つこれらのシンボルの重要な部分を強調したいと思います。

00:07:20.000 --> 00:07:23.000
どのレンダリングモードがそれをするのか覚えていますか?

00:07:23.000 --> 00:07:26.000
そうです！階層的！

00:07:26.000 --> 00:07:30.000
階層的に同じ symbolRenderingMode 修飾子を使用できます。

00:07:30.000 --> 00:07:41.000
これは、現在のフォアグラウンドスタイルを使用して、モノクロのようにシンボルに単一の色を適用するだけでなく、シンボルの重要な要素を強調するために、複数のレベルの不透明度を追加します。

00:07:41.000 --> 00:07:46.000
最後のレンダリングモードが1つあり、私のアプリにはそれが役立つボタンがあります。

00:07:46.000 --> 00:07:50.000
私はカードゲームがあまり得意ではないので、間違いを元に戻すためにこのボタンが必要です。

00:07:50.000 --> 00:07:57.000
ここでは、この円形の背景を取得するために、.circle.fillバリアントを持つボタンにシンボルを表示しています。

00:07:57.000 --> 00:07:59.000
しかし、着色はまさに私が望むものではありません。

00:07:59.000 --> 00:08:03.000
カードの色にもっと似合うものが欲しいです。

00:08:03.000 --> 00:08:07.000
foregroundStyle修飾子を使用して、シンボルに色を設定できることを忘れないでください。

00:08:07.000 --> 00:08:10.000
しかし、私たちはさらに進むことができます。

00:08:10.000 --> 00:08:14.000
今年は、シンボルを描くために使用する複数の色を設定できます。

00:08:14.000 --> 00:08:20.000
これは、シンボルのレイヤーのカラーリングを最大限に制御できるパレットレンダリングモードを使用します。

00:08:20.000 --> 00:08:25.000
シンボルの各レベルを制御するために、最大3つのスタイルを指定できます。

00:08:25.000 --> 00:08:32.000
このシンボルには一次と三次の内容があるので、第1色と第3の色が使用されます。

00:08:32.000 --> 00:08:41.000
このシンボルのアウトラインバージョンのように、プライマリコンテンツとセカンダリコンテンツのみを持つシンボルを使用すると、それらの色のみが使用されます。

00:08:41.000 --> 00:08:53.000
ほとんどの個々のシンボルは、これらの両方のように2つのレイヤーしか使用しないため、3つではなく2つのスタイルを指定でき、最後のスタイルはセカンダリ以降のすべてのスタイルに使用されます。

00:08:53.000 --> 00:08:56.000
多くの場合、必要なのはこれだけです。

00:08:56.000 --> 00:09:03.000
これまで色を使用してきましたが、これはフォアグラウンドスタイルの修飾子であり、どのShapeStyleでも機能します。

00:09:03.000 --> 00:09:12.000
セカンダリスタイルを使用して、ぼかしの前で鮮やかな効果を得たり、素材を使用してシンボルの背後にある背景をぼかしたりすることもできます。

00:09:12.000 --> 00:09:19.000
フォアグラウンドスタイルと素材についてもっと知りたい場合は、「SwiftUIアプリにリッチなグラフィックを追加する」をチェックしてください。

00:09:19.000 --> 00:09:24.000
レンダリングモードのフルセットをもう一度振り返ってみましょう。

00:09:24.000 --> 00:09:31.000
使用するレンダリングモードを確認して選択する最良の方法は、SFシンボルアプリとそのインスペクタです。

00:09:31.000 --> 00:09:40.000
そして、SwiftUIでこれらの設定を表現するためのこれらのAPIは同じように機能するので、Symbolsアプリとコードの間を行き来するのは簡単です。

00:09:40.000 --> 00:09:44.000
また、最小限の構成で最高の動作も得ます。

00:09:44.000 --> 00:09:52.000
フォアグラウンドスタイルが1つしかなく、レンダリングモードを指定しない場合は、自動的にモノクロになります。

00:09:52.000 --> 00:10:00.000
また、複数のフォアグラウンドスタイルを指定しても、レンダリングモードを指定しないと、自動的にパレットが取得されます。

00:10:00.000 --> 00:10:06.000
シンボルアプリには、これらの異なるレンダリングモードで使用できる色の大規模なセットがあります。

00:10:06.000 --> 00:10:14.000
そして、その色のフルセットは、今年新しいいくつかの色とスタイルを含むSwiftUIでも利用可能です。

00:10:14.000 --> 00:10:24.000
これらの色は、ライトモードとダークモード、ぼかし上の特別なレンダリング、表示されている特定のプラットフォームまで、表示されるすべての異なる構成に最適化されています。

00:10:24.000 --> 00:10:37.000
シンボルの作成方法、外観を変更するための修飾子のセット、表示されるシンボルのバリアントを変更する方法、異なるレンダリングモードの選択、フォアグラウンドスタイルを使用してシンボルのカラーリングをカスタマイズする方法を見ました。

00:10:37.000 --> 00:10:44.000
SFシンボルを使用すると、アプリに美しいグラフィックを簡単に追加し、好きなだけカスタマイズできます。

00:10:44.000 --> 00:10:48.000
アプリをさらに良く見せるために、それらを採用できる場所を確認してください。

00:10:48.000 --> 00:10:51.000
見てくれてありがとう、素晴らしいWWDCをお過ごしください。

00:10:51.000 --> 23:59:59.000
[明るい音楽]。

