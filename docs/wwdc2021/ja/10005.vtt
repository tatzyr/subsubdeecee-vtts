WEBVTT

00:00:01.000 --> 00:00:10.000
こんにちは。

00:00:10.000 --> 00:00:16.000
私の名前はヤンです。BluetoothデバイスをApple Watchに接続する新しい方法についてお話ししたいと思います。

00:00:16.000 --> 00:00:20.000
まず、Core BluetoothがwatchOS 7でどのように機能するかを確認します。

00:00:20.000 --> 00:00:25.000
次に、watchOS 8のエキサイティングな新機能について話します。

00:00:25.000 --> 00:00:31.000
そして、Apple Watchで動作するようにアクセサリーとアプリをデザインする最良の方法について説明します。

00:00:31.000 --> 00:00:34.000
今日のCore Bluetoothの仕組みから始めましょう。

00:00:34.000 --> 00:00:41.000
アプリがフォアグラウンドにある間、またはバックグラウンドセッション中にのみ、Bluetoothデバイスに接続できます。

00:00:41.000 --> 00:00:46.000
これは、人が自分のアクセサリーから情報を得るためにあなたのアプリに集中したいときに最適です。

00:00:46.000 --> 00:00:52.000
しかし、アクセサリーからの情報を複雑にしたい場合はどうなりますか?

00:00:52.000 --> 00:00:57.000
現在、人がアプリを開かない限り、コンプリケーションは更新できません。

00:00:57.000 --> 00:01:03.000
watchOS 8では、バックグラウンドアプリの更新中にBluetoothアクセサリを接続できます。

00:01:03.000 --> 00:01:11.000
これにより、アクセサリの情報でコンプリケーションを更新したり、バッテリー残量が少なくなった場合にローカル通知を送信したりできます。

00:01:11.000 --> 00:01:22.000
私の例の温度センサーで、コンプリケーションで温度を更新できるので、時計をちらっと見るたびに見ることができます。

00:01:22.000 --> 00:01:32.000
私たちの例では温度センサーを使用していますが、誰かが一目で情報を見たいと思うアクセサリーかもしれません。

00:01:32.000 --> 00:01:42.000
バックグラウンドアプリの更新中にBluetoothの使用を開始するには、Info.plistのUIBackgroundModesにbluetooth-centralを追加するだけです。

00:01:42.000 --> 00:01:50.000
これは、「必要なバックグラウンドモード」と「アプリはCoreBluetoothを使用して通信する」と表示されることもあります。

00:01:50.000 --> 00:01:54.000
これは、プラットフォーム間の違いを示す表です。

00:01:54.000 --> 00:01:59.000
これらは、Bluetooth Low Energyで現在サポートされている構成です。

00:01:59.000 --> 00:02:04.000
アクセサリがApple Watchとどのように通信するかを掘り下げてみましょう。

00:02:04.000 --> 00:02:11.000
ユーザーがすでにあなたのアクセサリーとペアリングしていて、あなたのWatchアプリを開いたとしましょう。

00:02:11.000 --> 00:02:19.000
アプリはアクセサリに接続しようとし、広告が表示されるとすぐにBluetooth LE接続が確立されます。

00:02:19.000 --> 00:02:24.000
ユーザーがwatchOSアプリを終了すると、Bluetooth接続が終了します。

00:02:24.000 --> 00:02:30.000
Bluetooth接続は、次回watchOSアプリのランタイムが利用可能になるまで利用できません。

00:02:30.000 --> 00:02:36.000
watchOS 8の次のバックグラウンドアプリの更新中に何が起こるかを分析しましょう。

00:02:36.000 --> 00:02:45.000
アプリは既知の周辺機器への接続を開始し、次回広告を受信すると、Apple Watchがアクセサリに接続します。

00:02:45.000 --> 00:02:52.000
データの取得が完了するとすぐに、Bluetooth接続を終了し、データを処理できます。

00:02:52.000 --> 00:03:03.000
バックグラウンドアプリの更新はいつでも発生する可能性があるため、Apple Watchに表示する重要なアップデートがある場合は、アクセサリをできるだけ頻繁に宣伝する必要があります。

00:03:03.000 --> 00:03:08.000
さて、あなたのアクセサリーが電力を節約するためにめったに宣伝しないとしましょう。

00:03:08.000 --> 00:03:15.000
バックグラウンドアプリの更新中に広告が受信され、接続が発生しない可能性があります。

00:03:15.000 --> 00:03:25.000
バックグラウンドアプリの更新は特定の時間に行われることは保証されていないため、重要なアップデートがあるときはいつでも、アクセサリを頻繁に宣伝する必要があります。

00:03:25.000 --> 00:03:29.000
考えられる戦略の1つは、アクセサリのセンサーデータをバッファリングすることです。

00:03:29.000 --> 00:03:37.000
バッファ制限に近づいたら、広告率を上げて、Apple Watchに再接続する可能性を高めます。

00:03:37.000 --> 00:03:43.000
ガイドとして、理想的なRF条件で少なくとも2秒ごとに宣伝する必要があります。

00:03:43.000 --> 00:03:52.000
デバイスがより困難なRF状態で動作することを期待する場合は、再接続の可能性を高めるために、アクセサリをより頻繁に宣伝する必要があります。

00:03:52.000 --> 00:04:02.000
アプリがCore Bluetoothとどのように相互作用するか、watchOSがBluetoothアクセサリとどのように相互作用するかを見てみましょう。

00:04:02.000 --> 00:04:04.000
これはタイムダイアグラムフローです。

00:04:04.000 --> 00:04:08.000
時間は上から下へと進みます。

00:04:08.000 --> 00:04:13.000
アプリがフォアグラウンドにあるときに何が起こるかから始めましょう。

00:04:13.000 --> 00:04:15.000
あなたのアクセサリーは広告です。

00:04:15.000 --> 00:04:19.000
新しいデバイスをスキャンして、Bluetoothアクセサリを検出できます。

00:04:19.000 --> 00:04:25.000
デバイスが発見されたら、それへの接続を開始できます。

00:04:25.000 --> 00:04:30.000
Apple Watchが広告を受け取るとすぐに接続されます。

00:04:30.000 --> 00:04:39.000
Bluetooth接続が完了したら、cancelPeripheralConnectionを呼び出すと、Bluetoothデバイスが切断されます。

00:04:39.000 --> 00:04:47.000
その後、後でApple Watchの画面がオフになると、watchOSアプリは一時停止されます。

00:04:47.000 --> 00:04:52.000
では、次のバックグラウンドアプリの更新で何が起こるかを見てみましょう。

00:04:52.000 --> 00:04:56.000
経過時間はスケールではないことに注意してください。

00:04:56.000 --> 00:05:02.000
アプリがBluetoothアクセサリに再接続する必要がある場合は、接続を開始できます。

00:05:02.000 --> 00:05:04.000
ここで接続が確立されます。

00:05:04.000 --> 00:05:12.000
前述のように、必要な時間だけアクセサリーに接続することを強くお勧めします。

00:05:12.000 --> 00:05:18.000
必要なデータを取得し、バックグラウンドアプリの更新中に切断をリクエストする必要があります。

00:05:18.000 --> 00:05:26.000
この場合、データ転送が完了し、アプリは周辺接続をキャンセルします。

00:05:26.000 --> 00:05:28.000
別の潜在的なユーザーフローを見てみましょう。

00:05:28.000 --> 00:05:37.000
この1つでは、BluetoothアクセサリはApple Watchの近くにないか、バックグラウンドアプリの更新中に広告を掲載しません。

00:05:37.000 --> 00:05:42.000
バックグラウンドアプリの更新期間中にこれを管理する方法は次のとおりです。

00:05:42.000 --> 00:05:48.000
まず、周辺機器に接続しますが、広告はありません。

00:05:48.000 --> 00:05:53.000
有効期限ハンドラが呼び出されたら、接続をキャンセルするように依頼する必要があります。

00:05:53.000 --> 00:06:01.000
このようにして、あなたはきれいなスレートを持ち、次のバックグラウンドアプリのリフレッシュの開始時に再接続を依頼することができます。

00:06:01.000 --> 00:06:09.000
バッテリーを節約するために、有効期限ハンドラが呼び出される前に接続をキャンセルすることも良い習慣です。

00:06:09.000 --> 00:06:16.000
次のバックグラウンドアプリの更新で再接続する必要がある場合は、connectPeripheralを再度発行できます。

00:06:16.000 --> 00:06:22.000
Apple Watchが広告を見るとすぐに、あなたのアクセサリーに接続します。

00:06:22.000 --> 00:06:27.000
この時点で、必要なすべてのデータを取得してダウンロードできます。

00:06:27.000 --> 00:06:32.000
その後、接続が完了したらすぐに切断できます。

00:06:32.000 --> 00:06:39.000
最後のフローを見て、バックグラウンドアプリの更新中に切断しないとどうなるかを見てみましょう。

00:06:39.000 --> 00:06:41.000
接続を開始します。

00:06:41.000 --> 00:06:46.000
Apple Watchが広告を見るとすぐに、接続を確立します。

00:06:46.000 --> 00:06:53.000
ここでは、バックグラウンドアプリの更新が期限切れになる前に、アプリがすべてのデータを取得する時間がなかったとしましょう。

00:06:53.000 --> 00:07:02.000
この場合、Core Bluetoothは、次のバックグラウンドアプリの更新の終了時に自動的に接続を終了します。

00:07:02.000 --> 00:07:08.000
次のバックグラウンドアプリの更新で、アプリはdiddleDisconnectPeripheralイベントを取得します。

00:07:08.000 --> 00:07:17.000
この時点で、アプリが必要な場合は、Bluetooth接続を開始するか、次のバックグラウンドアプリの更新まで待つことができます。

00:07:17.000 --> 00:07:23.000
必要な時間だけアクセサリーに接続することを強くお勧めします。

00:07:23.000 --> 00:07:30.000
アプリは、バックグラウンドアプリの更新中に切断を要求する必要があります。

00:07:30.000 --> 00:07:34.000
これを実装するためのコードを詳しく見てみましょう。

00:07:34.000 --> 00:07:41.000
誰かがフォアグラウンドでアプリを起動すると、周辺機器を検出して接続できます。

00:07:41.000 --> 00:07:48.000
didDiscoverPeripheralデリゲートメソッドは、広告が検出されたときに呼び出されます。

00:07:48.000 --> 00:07:53.000
過去にCoreBluetoothを使用したことがあれば、これはよく知られています。

00:07:53.000 --> 00:07:58.000
では、バックグラウンドアプリの更新中に何が起こるかを見てみましょう。

00:07:58.000 --> 00:08:02.000
handleBackgroundTasksデリゲートメソッドが呼び出されます。

00:08:02.000 --> 00:08:09.000
バックグラウンドワークのいずれかを開始できます。私たちの場合は、Bluetooth周辺機器に接続したいと考えています。

00:08:09.000 --> 00:08:18.000
バックグラウンドアプリの更新中、終了直前に、バックグラウンドアプリの更新が終了しようとしているという通知も届きます。

00:08:18.000 --> 00:08:21.000
これはwatchOS 8の新しいAPIです。

00:08:21.000 --> 00:08:28.000
これを使用して、既存の作業をキャンセルし、アプリケーションを一時停止モードにする準備をすることができます。

00:08:28.000 --> 00:08:31.000
次に、タスクを完了として設定します。

00:08:31.000 --> 00:08:39.000
また、バックグラウンドランタイムを取得するときは、Bluetoothデバイスが切断されたときの動作を決定する必要があります。

00:08:39.000 --> 00:08:50.000
コールバックdidDisconnectPeripheralは、フォアグラウンドまたはバックグラウンドアプリの更新中に発生する可能性があり、すべてのプラットフォームで発生することを忘れないでください。

00:08:50.000 --> 00:09:02.000
ここで、didDisconnectPeripheralがある場合、WatchKit Extensionデリゲートに存在するdidCompleteDisconnectionという関数を呼び出します。

00:09:02.000 --> 00:09:07.000
このようにして、この機能の動作はwatchOSに固有のものです。

00:09:07.000 --> 00:09:18.000
didCompleteDisconnection関数が行うことは、バックグラウンドアプリの更新にあることを確認し、もしそうなら、タスクが完了したことを示します。

00:09:18.000 --> 00:09:22.000
これにより、バックグラウンドアプリの更新が終了します。

00:09:22.000 --> 00:09:26.000
Apple WatchでCore Bluetoothを使用するためのベストプラクティスについて話しましょう。

00:09:26.000 --> 00:09:35.000
初めてのデバイス設定では、アプリがフォアグラウンドで実行されている必要があります。つまり、ユーザーはWatchアプリを積極的に使用しています。

00:09:35.000 --> 00:09:38.000
この時点で新しい周辺機器をスキャンします。

00:09:38.000 --> 00:09:44.000
アプリが周辺機器を発見したら、最初のBluetooth接続を設定できます。

00:09:44.000 --> 00:09:46.000
必要に応じて、デバイスとペアリングすることもできます。

00:09:46.000 --> 00:09:51.000
アプリがフォアグラウンドを終了すると、新しい周辺機器をスキャンすることはできません。

00:09:51.000 --> 00:09:57.000
代わりに、以前に発見された周辺機器への接続を要求する必要があります。

00:09:57.000 --> 00:10:00.000
接続したら、必要なデータを取得します。

00:10:00.000 --> 00:10:06.000
データの取得が完了したら、アプリはバッテリーを節約するために周辺機器から切断する必要があります。

00:10:06.000 --> 00:10:14.000
バックグラウンドアプリの更新が終了する前にアプリが切断されない場合、Core Bluetoothは自動的にアクセサリから切断されます。

00:10:14.000 --> 00:10:18.000
アプリにランタイムがある場合にのみ再接続できます。

00:10:18.000 --> 00:10:22.000
Core Bluetoothについて質問がある場合は、今週私たちのラボに参加することをお勧めします。

00:10:22.000 --> 00:10:24.000
ありがとう。

00:10:24.000 --> 23:59:59.000
[音楽]。

