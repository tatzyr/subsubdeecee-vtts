WEBVTT

00:00:02.000 --> 00:00:12.000
こんにちは、WWDCへようこそ。

00:00:12.000 --> 00:00:17.000
私の名前はジョエルです。MusicKitでアプリに音楽を追加する方法についてお話ししたいと思います。

00:00:17.000 --> 00:00:25.000
MusicKitは、アプリがSwiftで音楽アイテムにアクセスするための表現力豊かなAPIを提供するAppleプラットフォーム用の新しいフレームワークです。

00:00:25.000 --> 00:00:32.000
新しいSwift並行性構文を活用し、SwiftUIと組み合わせて使用するようにゼロから設計されています。

00:00:32.000 --> 00:00:47.000
MusicKitは、アプリがApple Musicから幅広いカタログコンテンツにアクセスするためのサーバーサイドAPIのセットであるApple Music APIと統合する方法を加速し、Apple Musicに関連する魅力的なアプリを構築することがはるかに簡単になります。

00:00:47.000 --> 00:00:51.000
まず、MusicKitで音楽コンテンツをリクエストする方法について説明します。

00:00:51.000 --> 00:01:23.000
次に、アプリがApple Musicと統合する方法にとって重要な他のトピックについて説明します。たとえば、アプリがApple Music関連のデータにアクセスするためのユーザーの同意を求めること、Apple Music APIにアクセスするために必要なトークンの管理、サブスクリプション情報および関連機能にアクセスすること、Apple Musicカタログから音楽を再生すること、そして最後に、ユーザーがまだ購読者でない場合にApple Musicのサブスクリプションオファーを表示する方法などです。

00:01:23.000 --> 00:01:30.000
MusicKitは、Apple Music APIからコンテンツを取得できる構造化されたリクエストで、音楽アイテムにアクセスするための新しいモデルレイヤーを提供します。

00:01:30.000 --> 00:01:38.000
Apple Musicカタログのコンテンツを検索するか、特定のフィルターに基づいてリソースを取得できます。

00:01:38.000 --> 00:01:47.000
これらのリクエストは、ページネーションのサポートが組み込まれたコレクションにグループ化されたアイテムで応答を生成し、最初の応答からアイテムの次のバッチを取得できるようにします。

00:01:47.000 --> 00:01:49.000
では、これらの音楽アイテムはどんな感じですか?

00:01:49.000 --> 00:01:51.000
アルバムの具体的な例を見てみましょう。 アルバムで見てみましょう。

00:01:51.000 --> 00:01:56.000
「アルバム」は、プロパティが3つの異なるカテゴリにグループ化された値タイプです。

00:01:56.000 --> 00:02:11.000
最初のカテゴリには、「title」のような文字列プロパティ、「isCompilation」のようなブールプロパティ、または関連するサイズ情報や関連する色と一緒にアートワークのURLにアクセスできる「アートワーク」のようなより構造化されたプロパティなどの単純な属性が含まれています。

00:02:11.000 --> 00:02:19.000
アルバムは、関連するアーティストやジャンル、または特定のアルバムのトラックのリストなど、いくつかの関係も提供しています。

00:02:19.000 --> 00:02:26.000
たとえば、「トラック」関係の結果は、別のタイプの音楽アイテムであるタイプ「トラック」の値のコレクションです。

00:02:26.000 --> 00:02:34.000
最後に、これらの強力なモデルレベルの関係に加えて、「アルバム」は関連コンテンツのいくつかの弱い関連付けを提供します。

00:02:34.000 --> 00:02:40.000
協会は関係と非常によく似ていますが、通常、より一時的であるか、より編集的に駆動されます。

00:02:40.000 --> 00:02:50.000
たとえば、アルバムの「appearsOn」アソシエーションはプレイリストのコレクションを返しますが、関係のコレクションとは異なり、これにはタイトルもあります。

00:02:50.000 --> 00:02:53.000
MusicKitとの関係の読み込みとアクセスはとても簡単です。

00:02:53.000 --> 00:03:06.000
アルバムを考えると、「アーティスト」や「トラック」などの関係や「関連アルバム」などの関連付けを含む、この同じアルバムの別の表現を1回の操作で簡単に取得できます。

00:03:06.000 --> 00:03:14.000
「with」メソッドは、特別なSwiftキーワード「await」で呼び出す必要があります。これは、これが舞台裏で非同期操作を実行することを示します。

00:03:14.000 --> 00:03:20.000
これは確かに、ネットワークを介してApple Music APIからこのアルバムのより完全な表現を取得します。

00:03:20.000 --> 00:03:28.000
その後、この詳細なアルバムからトラックのリストを取得し、通常の配列と同じようにそれらのトラックを反復することができます。

00:03:28.000 --> 00:03:30.000
そして、これがこのコードのコンソール出力です。

00:03:30.000 --> 00:03:40.000
「関連アルバム」などの関連付けへのアクセスも同じように機能しますが、唯一の違いは、通常、コレクションから直接アクセスできるタイトルも含まれていることです。

00:03:40.000 --> 00:03:45.000
その後、同じ方法でコレクションを反復して、関連するアルバムのいくつかを印刷することができます。

00:03:45.000 --> 00:03:48.000
そして、これがこのコードのコンソール出力です。

00:03:48.000 --> 00:03:51.000
では、MusicKitで音楽コンテンツをリクエストするデモを見てみましょう。

00:03:51.000 --> 00:03:57.000
私はApple Musicのアルバムを見つけて楽しむことができるアプリに取り組んできました。

00:03:57.000 --> 00:04:05.000
この検索フィールドを使用してアルバムを検索できます。この検索フィールドは、すでにいくつかのコードが接続されており、音楽カタログ検索リクエストを使用して一致する検索結果をロードします。

00:04:05.000 --> 00:04:09.000
このアプリは、私が最近見たアルバムのリストも追跡します。

00:04:09.000 --> 00:04:20.000
「Catch A Vibe - EP」というタイトルのこのアルバムの詳細については、この詳細ビューが表示された後、このアルバムのトラックのリストがアニメーション化されていることに気づいたかもしれません。

00:04:20.000 --> 00:04:30.000
これは、先ほど見たように、このアルバムの「トラック」関係をロードし、SwiftUIビューの状態変数を更新し、このリストに入力するために使用されます。

00:04:30.000 --> 00:04:36.000
アートワークの下にある再生ボタンで、または特定のトラックを選択することで、このアルバムから音楽の再生を開始できます。

00:04:36.000 --> 00:04:44.000
これは、MusicKitの再生APIを使用して、このトラックのリストでキューを設定し、プレーヤーの再生メソッドを呼び出すだけです。

00:04:44.000 --> 00:04:47.000
やってみよう！

00:04:47.000 --> 00:04:52.000
だから、Karun &amp; MONBRUの「Catch a Vibe」というタイトルのトラックを選択すると...

00:04:52.000 --> 00:04:57.000
この曲が流れ始めます。

00:04:57.000 --> 00:04:59.000
♪ああ、ああ、いや♪

00:04:59.000 --> 00:05:05.000
私たちのアプリは、ロック画面のメディアコントロールでも自動的に動作し、この曲の中間点までスクラブすることができます。

00:05:05.000 --> 00:05:18.000
しかし、私はこのアプリを使って、フェニックスのこのアルバムのように、私のCDライブラリから古い音楽を再発見するのを手伝いたいと思っていました。

00:05:18.000 --> 00:05:29.000
だから、iPhoneのカメラを古いCDのバーコードに向け、このアプリにこの同じアルバムをデジタル形式で表示させることができる機能を追加したいと思います。

00:05:29.000 --> 00:05:32.000
私はすでにこの機能のためのいくつかの実験的なコードを追加しました。

00:05:32.000 --> 00:05:39.000
有効にすると、下部にバーコードボタンが表示され、カメラビューが表示されます。

00:05:39.000 --> 00:05:46.000
このCDのバーコードを指すと、バーコードの値を自動的に認識して表示します。

00:05:46.000 --> 00:05:51.000
私が欠けているのは、MusicKitを使って対応するアルバムを見つけるコードだけです。

00:05:51.000 --> 00:05:54.000
先に進んで、それを私たちのアプリに追加しましょう。

00:05:54.000 --> 00:06:01.000
では、MusicCatalogResourceRequestを使ってアルバムリクエストを作成させてください。

00:06:01.000 --> 00:06:07.000
私は特にアルバムを探しています。

00:06:07.000 --> 00:06:23.000
そしてここでは、バーコードの専門用語であるUniversal Product Codeの略であるUPCプロパティがequalTo: detectedBarcodeであるアルバムを見つけることを確認したい。

00:06:23.000 --> 00:06:31.000
このリクエストを非同期に実行できます。

00:06:31.000 --> 00:06:36.000
albumsRequest.response。

00:06:36.000 --> 00:06:49.000
そして、応答から、私は結果で最初のアルバムを探すことができます。

00:06:49.000 --> 00:06:57.000
その後、この最初のアルバムを下のhandleDetectedAlbumヘルパーメソッドに渡すことができます。

00:06:57.000 --> 00:07:02.000
handleDetectedAlbum (firstAlbum)。

00:07:02.000 --> 00:07:10.000
この方法は、バーコードスキャンビューを却下し、検出されたアルバムのアルバム詳細ビューをプッシュします。

00:07:10.000 --> 00:07:16.000
そして、メインスレッドで実行されることを確認するために、MainActorでここに飾られています。

00:07:16.000 --> 00:07:23.000
したがって、それを呼び出すときは、awaitキーワードを追加することを確認する必要があります。

00:07:23.000 --> 00:07:28.000
では、アプリをもう一度ビルドして実行して試してみましょう。

00:07:28.000 --> 00:07:32.000
バーコードボタンをタップします。

00:07:32.000 --> 00:07:38.000
私のアルバムを持って行きなさい。

00:07:38.000 --> 00:07:41.000
うまくいった！

00:07:41.000 --> 00:07:47.000
これで、Apple Musicで私の古い音楽をデジタル形式で楽しむのがはるかに簡単になります。

00:07:47.000 --> 00:08:01.000
MusicKitは、URLを使用して任意のApple Music APIエンドポイントからコンテンツをロードできるという点で、構造化されたリクエストとは異なる汎用データリクエストも提供しています。

00:08:01.000 --> 00:08:07.000
このリクエストから得られるのは、Apple Music APIからのJSONレスポンスの生データです。

00:08:07.000 --> 00:08:19.000
JSONDecoderでこの生データをデコードする必要がありますが、Codableプロトコルに準拠しているため、既存の音楽アイテムタイプを活用できるため、難しい必要はありません。

00:08:19.000 --> 00:08:21.000
例を見てみましょう。 例を見てみましょう。

00:08:21.000 --> 00:08:31.000
Apple Musicからトップレベルのジャンルのリストをロードしたい場合は、この特定のURLからコンテンツを読み込むことで行うことができます。対応するJSONレスポンスは次のとおりです。

00:08:31.000 --> 00:08:36.000
この結果を詳しく見ると、真ん中にジャンルのリソースのように見えるものが見えます。

00:08:36.000 --> 00:08:39.000
では、スウィフトでこれをどのように表現しますか?

00:08:39.000 --> 00:08:42.000
案の定、MusicKitにはジャンルタイプがあります。

00:08:42.000 --> 00:08:46.000
ズームバックすると、Swiftでの応答全体をどのように表現しますか?

00:08:46.000 --> 00:08:51.000
ジャンルの単純な配列であるデータメンバーを使用して構造体を作成できます。

00:08:51.000 --> 00:08:54.000
次に、この構造体は必ずDecodableとしてマークしてください。

00:08:54.000 --> 00:09:02.000
また、「ジャンル」自体もDecodableに準拠しているため、追加のデコードロジックを書く必要さえありません。

00:09:02.000 --> 00:09:12.000
したがって、このデータをアプリに読み込むには、この構造体をファイルの上部に置き、ユーザーの特定の国コードを使用してURLを構築します。

00:09:12.000 --> 00:09:20.000
このURLを使用して音楽データリクエストを作成し、すでに見たのと同じパターンに従って、そこから応答を取得します。

00:09:20.000 --> 00:09:29.000
その応答を取得したら、MyGenresResponseタイプをデコードメソッドに渡すことで、JSONDecoderを使用してデータをデコードできます。

00:09:29.000 --> 00:09:30.000
そして、それだけです!

00:09:30.000 --> 00:09:35.000
強く入力されたジャンルの応答で個々のジャンルにアクセスできるようになりました。

00:09:35.000 --> 00:09:42.000
そして、ご覧のとおり、MusicKitの他のリクエストから取得できるのと同じ種類の音楽アイテムが手に入る。

00:09:42.000 --> 00:09:47.000
だから、それがApple Music APIの任意のURLからコンテンツを読み込む方法です。

00:09:47.000 --> 00:09:56.000
そして、音楽コンテンツの読み込み方法がわかったので、プライバシーから始めて、アプリをApple Musicと統合するための重要な予備的なステップについて話し合いましょう。

00:09:56.000 --> 00:10:01.000
私たちは、ユーザーがどのアプリが自分のデータにアクセスできるかをコントロールし続けることを望んでいます。

00:10:01.000 --> 00:10:12.000
したがって、ユーザーのリスニング履歴や音楽ライブラリを含むApple Music APIからデータをリクエストする前に、アプリがApple Musicにアクセスするためのユーザーのインフォームドコンセントを取得する必要があります。

00:10:12.000 --> 00:10:17.000
このユーザーコンテンツの要求は、デバイスごとおよびアプリごとに行う必要があります。

00:10:17.000 --> 00:10:28.000
そして、ユーザー同意ダイアログは、Apple Musicのプレイリストや自分のプレイリストでワークアウトできる素晴らしいフィットネスアプリであるZovaという名前のアプリのコンテキストでどのように見えるかです。

00:10:28.000 --> 00:10:33.000
初めてワークアウトを始めるとき、ZovaはApple Musicにアクセスする許可を求めます。

00:10:33.000 --> 00:10:38.000
このダイアログは、アプリがApple Musicにアクセスする必要がある理由をユーザーに伝える必要があります。

00:10:38.000 --> 00:10:48.000
そのために、Info.plistで定義する必要があるApple Musicのアプリの使用状況の説明は、このダイアログのサブタイトルとして含まれています。

00:10:48.000 --> 00:10:51.000
以下は、MusicKitのユーザーの同意を要求する方法の例です。

00:10:51.000 --> 00:10:59.000
アプリにMusicKitを必要とする機能があり、isAuthorizedForMusicKit状態変数を使用してこの機能へのアクセスをゲートしているとします。

00:10:59.000 --> 00:11:08.000
アプリの適切な時点で、MusicKitを使用する前に、この非同期リクエスト方法でApple Musicにアクセスするための承認をリクエストできます。

00:11:08.000 --> 00:11:13.000
これは、アプリがまだ承認されていない場合にのみ、ユーザーに促します。

00:11:13.000 --> 00:11:21.000
リクエストメソッドはステータス値を返し、そのステータスが「authorized」と等しい場合は、isAuthorizedForMusicKit変数を「true」に設定できます。

00:11:21.000 --> 00:11:26.000
では、Apple Music APIからデータをロードするために必要なトークンについて簡単に話しましょう。

00:11:26.000 --> 00:11:32.000
Apple Music APIには、基本的にAPIでアプリを認証する開発者トークンが必要です。

00:11:32.000 --> 00:11:48.000
以前は、この開発者トークンを取得するには、開発者ポータルでMusicKit秘密鍵を作成し、管理下にあるサーバーに置き、キーが非公開に保たれ、アプリにサーバーから新しい開発者トークンを要求してもらう必要がありました。

00:11:48.000 --> 00:11:56.000
しかし今、MusicKit for Swiftを使用すると、開発者トークンがアプリ用に自動的に生成されるため、これについて心配する必要がなくなりました。

00:11:56.000 --> 00:12:01.000
開発者ポータルに登録して、この新しい自動動作をオプトインするだけです。

00:12:01.000 --> 00:12:10.000
具体的には、App IDを登録するページで、下部の[App Services]タブを選択し、MusicKitチェックボックスを有効にします。

00:12:10.000 --> 00:12:11.000
そして、あなたは終わりました!

00:12:11.000 --> 00:12:17.000
さらに、Apple Music APIには、パーソナライズされたエンドポイントのユーザートークンが必要です。

00:12:17.000 --> 00:12:23.000
そして、今年の新しい開発者トークンと同様に、ユーザートークンはあなたに代わって自動的に生成されます。

00:12:23.000 --> 00:12:30.000
アプリでMusicKitを使用する必要があるかもしれないもう1つのことは、ユーザーがアクティブなApple Musicサブスクリプションを持っているかどうかを把握する方法です。

00:12:30.000 --> 00:12:47.000
MusicKitのサブスクリプション情報は、ユーザーがApple Musicカタログのコンテンツを再生できるかどうか、iCloudミュージックライブラリが有効になっているかどうか、またはまだアクティブなサブスクリプションを持っていない場合に加入者になることができるかどうかを示す3つの異なる機能として公開されます。

00:12:47.000 --> 00:12:53.000
アプリの特定のApple Music関連機能の関連機能を必ず確認してください。

00:12:53.000 --> 00:13:02.000
たとえば、音楽を再生するために再生ボタンが接続されている場合、ユーザーがApple Musicのカタログコンテンツを再生できない場合は、無効にしておくことができます。

00:13:02.000 --> 00:13:07.000
ビューで状態変数を定義して、音楽サブスクリプションを追跡できます。

00:13:07.000 --> 00:13:17.000
次に、音楽サブスクリプションプロパティ「canPlayCatalogContent」が「false」に設定されている場合、無効な修飾子をボタンに適用して、無効のままであることを確認することができます。

00:13:17.000 --> 00:13:28.000
そして最後に、新しいタスク修飾子に渡された非同期ブロック内で、新しいサブスクリプション更新ストリームを使用して、音楽サブスクリプションの変更を通知することができます。

00:13:28.000 --> 00:13:31.000
では、MusicKitでの再生について話しましょう。

00:13:31.000 --> 00:13:37.000
MusicKitは、SystemMusicPlayerとApplicationMusicPlayerと呼ばれる2つの異なるプレーヤーを提供しています。

00:13:37.000 --> 00:13:41.000
例から始めて、それらのプレイヤーの違いについて説明しましょう。

00:13:41.000 --> 00:13:55.000
ソーシャルメディアアプリは、SystemMusicPlayerを使用してシステム音楽アプリから再生されているものを変更したい場合がありますが、フィットネスアプリは、システム音楽アプリから完全に独立した再生状態を維持するためにApplicationMusicPlayerを使用することを好むかもしれません。

00:13:55.000 --> 00:14:00.000
これらのプレーヤーは両方とも、現在再生中の情報を自動的に報告し、リモートコマンドを処理します。

00:14:00.000 --> 00:14:06.000
これは、デモの早い段階で、ロック画面のシステムメディアコントロールと深く統合したものです。

00:14:06.000 --> 00:14:09.000
しかし、現在再生中のアプリは異なって報告されています。

00:14:09.000 --> 00:14:20.000
SystemMusicPlayerを使用する場合、音楽アプリは現在再生中のアプリとして報告されますが、ApplicationMusicPlayerを使用する場合、アプリは現在再生中のアプリとして報告されます。

00:14:20.000 --> 00:14:23.000
再生キューの所有権も異なります。

00:14:23.000 --> 00:14:33.000
SystemMusicPlayerでは、アプリはシステムミュージックアプリをリモートコントロールするだけですが、ApplicationMusicPlayerでは、アプリは完全に独立した再生キューを所有しています。

00:14:33.000 --> 00:14:40.000
これらのプレイヤーの両方を使用すると、1つ以上のアイテムでキューを設定したり、次にプレイするアイテムを追加したり、後でプレイしたりできます。

00:14:40.000 --> 00:14:50.000
しかし、ApplicationMusicPlayerだけが再生キューをさらに制御し、中央にアイテムを挿入したり、以前に追加されたアイテムを削除したりすることができます。

00:14:50.000 --> 00:15:04.000
最後に、ユーザーがまだApple Musicの購読者でない場合は、アプリ内からApple Musicの無料トライアルを開始できるようにして、音楽でアプリのユーザーエクスペリエンスを向上させるために取り組んだすべての機能を楽しむことができます。

00:15:04.000 --> 00:15:15.000
サブスクリプションオファーは、「音楽を再生する」などのアプリの機能によりよく対応するように、ユーザーに表示されるメインメッセージを調整することで設定できます。

00:15:15.000 --> 00:15:21.000
また、特定の曲、アルバム、またはプレイリストを強調表示して、文脈的になることもできます。

00:15:21.000 --> 00:15:33.000
また、アプリのサブスクリプションオファーシートを使用することで、Appleサービスパフォーマンスパートナープログラムと呼ばれるアフィリエイトプログラムを通じて、新しいApple Musicの購読者を連れてきたことで報酬を得ることができます。

00:15:33.000 --> 00:15:41.000
アプリでコンテクスト音楽サブスクリプションオファーを表示するには、先ほど見たように音楽サブスクリプションを追跡する必要があります。

00:15:41.000 --> 00:15:46.000
また、オファーが表示されているかどうかを追跡するには、別の状態変数も必要です。

00:15:46.000 --> 00:15:53.000
サブスクリプションオファーオプションのitemIDプロパティとして、例えばアルバムのIDを渡します。

00:15:53.000 --> 00:15:59.000
音楽サブスクリプションで「canBecomeSubscriber」が「false」に設定されている場合は、オファーボタンを無効にしておいてください。

00:15:59.000 --> 00:16:08.000
次に、isShowingOfferプロパティにバインドし、オプションを含むmusicSubscriptionOffer修飾子を使用します。

00:16:08.000 --> 00:16:11.000
最後に、isShowingOffer変数を「true」に設定します。

00:16:11.000 --> 00:16:16.000
アプリに戻って、Apple Musicのコンテクストオファーがどのようなものか見てみましょう。

00:16:16.000 --> 00:16:21.000
以前のデモでは、すでにアクティブなApple Musicサブスクリプションでサインインしていました。

00:16:21.000 --> 00:16:33.000
したがって、Apple Musicのサブスクリプションオファーを表示するのが適切かもしれないシナリオをシミュレートするには、設定に移動し、アカウントからサインアウトするだけです。

00:16:33.000 --> 00:16:45.000
その後、アプリに戻ると、再生ボタンが無効になり、ユーザーをApple Musicに招待する別のボタンのためのスペースを作るために左に移動されたことがわかります。

00:16:45.000 --> 00:16:54.000
このボタンをタップすると、サブスクリプションオファーが表示され、アプリで見ていた特定のアルバムが強調表示されます。

00:16:54.000 --> 00:16:59.000
そして、それが、ユーザーがアプリ内からApple Musicの無料トライアルを開始できるようにする方法です。

00:16:59.000 --> 00:17:06.000
結論として、経験の一部として少し音楽を追加することで強化できる多くの種類のアプリがあります。

00:17:06.000 --> 00:17:13.000
たとえば、ゲームの気分に合ったバックグラウンドミュージックを再生することで、ゲームをより没入感のあるものにすることができます。

00:17:13.000 --> 00:17:18.000
または、フィットネスアプリでユーザーのモチベーションを維持するために、明るい音楽を再生することもできます。

00:17:18.000 --> 00:17:25.000
また、ソーシャルメディアアプリでは、音楽を強調するコンテンツにユーザーをさらに関与させることができます。

00:17:25.000 --> 00:17:36.000
さらに進むには、いくつかの関連セッションをチェックして、ShazamKitでShazamシグネチャの力を活用することについて学び、SwiftUIで並行性を深く掘り下げることができます。

00:17:36.000 --> 00:17:39.000
見てくれてありがとう、そしてWWDC 2021を楽しんでください!

00:17:39.000 --> 23:59:59.000
[パーカッシブミュージック]。

