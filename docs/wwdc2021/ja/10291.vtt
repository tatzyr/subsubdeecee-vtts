WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
グラハム・セイファート:こんにちは、WWDC 2021へようこそ。

00:00:13.000 --> 00:00:16.000
私の名前はGraham Seyffertで、MusicKitのエンジニアです。

00:00:16.000 --> 00:00:24.000
過去数年間で、Apple Musicカタログから新しく強化されたデータを取得する開発者の能力を強化しました。

00:00:24.000 --> 00:00:28.000
今日、私たちはあなたにこれらの改善のいくつかを紹介することに興奮しています。

00:00:28.000 --> 00:00:45.000
このプレゼンテーションでは、APIの検索機能の強化と、リソースを関連付け、属性を拡張し、応答内のリソースのリレーションシップビューを要求することによってデータを要求する新しい方法について説明します。

00:00:45.000 --> 00:00:49.000
最後に、チャートAPIの新しい機能強化について確認します。

00:00:49.000 --> 00:00:56.000
検索の機能強化のいくつかを調べる前に、現在の/search/hintsエンドポイントをすばやく要約したいと思います。

00:00:56.000 --> 00:01:01.000
今日すでにこのエンドポイントを使用して、推奨される検索語句のリストを取得する可能性があります。

00:01:01.000 --> 00:01:07.000
例として、検索用語「テイラー」の結果をいくつか紹介します。

00:01:07.000 --> 00:01:14.000
今日は、/search/hintsエンドポイントに代わる/search/suggestionsエンドポイントを紹介します。

00:01:14.000 --> 00:01:24.000
このエンドポイントは、/search/hintsエンドポイントと同じ用語へのアクセスを提供し、リクエストにkinds=termsを指定することで、これらを取得し続けることができます。

00:01:24.000 --> 00:01:29.000
ただし、このエンドポイントからの応答が少し異なることがわかります。

00:01:29.000 --> 00:01:35.000
提案された結果は、リクエストで指定された種類の1つと一致する種類を示すようになりました。

00:01:35.000 --> 00:01:42.000
また、検索クエリに使用する用語と、ユーザーに表示する用語を区別します。

00:01:42.000 --> 00:01:51.000
さらに重要なことに、このエンドポイントでは、トップの推奨検索結果にもアクセスできるようになりました。

00:01:51.000 --> 00:02:00.000
これらは、リクエストにkinds=topResultsと、結果の取得に関心のあるリソースタイプを指定することで要求される場合があります。

00:02:00.000 --> 00:02:05.000
topResults種類のリソースは、コンテンツキーの下にあります。

00:02:05.000 --> 00:02:16.000
このエンドポイントから得られる結果は、幅よりも速度を優先するため、通常の検索から得られる結果と著しく異なる可能性があることは注目に値します。

00:02:16.000 --> 00:02:23.000
そのため、これは通常の/検索エンドポイントの置き換えではなく、それを補完することを目的としています。

00:02:23.000 --> 00:02:31.000
リソースを変更する方法に入る前に、馴染みのない人のためのリソースとは何かを再紹介したいと思います。

00:02:31.000 --> 00:02:41.000
すべてのリソースには、APIでリソースを検索するために必要な最小限の情報である「リソース識別子」と呼ばれるものがあります。

00:02:41.000 --> 00:02:47.000
リソース識別子には、リソースのID、そのタイプ、およびhrefが含まれます。

00:02:47.000 --> 00:02:58.000
リソースの完全な表現には、その名前などのリソースの属性、およびインクルードパラメータを使用して要求された場合の潜在的な関係も含まれます。

00:02:58.000 --> 00:03:05.000
関係は、曲のジャンルやプレイリストのトラックなど、関連リソースのコレクションです。

00:03:05.000 --> 00:03:11.000
それで、私は今、リソースに関連する概念を紹介したいと思います。

00:03:11.000 --> 00:03:23.000
関連で要求された関係は、その関係内のリソースの前述のリソース識別子のみを返すという点で、要求された関係とは異なります。

00:03:23.000 --> 00:03:31.000
これは、アクセスが必要なのがリソースの参照である場合、関係を関連付けると、より迅速な応答が得られます。

00:03:31.000 --> 00:03:43.000
関連クエリパラメータを使用して、ターゲットとするリソースタイプで分類し、その後に取得したい関係名のリストを使用して、関係を関連付けることができます。

00:03:43.000 --> 00:03:53.000
たとえば、/search /suggestionsエンドポイントでは、ユーザーが曲の結果を選択すると、その曲のアルバムページにポップアウトすることを決定できます。

00:03:53.000 --> 00:04:04.000
この場合、必要なのは、そこに移動するためにその曲のアルバムのhrefだけなので、そのデータを取得するために relate=albumsを指定できます。

00:04:04.000 --> 00:04:12.000
その後、その曲の結果がそれぞれのアルバムのリソース識別子を含むようになりました。

00:04:12.000 --> 00:04:22.000
したがって、関連するコンテンツをすばやく参照したいときに使用するのは素晴らしいことですが、すでに回答に戻っているリソースについてもっと知りたい場合はどうなりますか?

00:04:22.000 --> 00:04:31.000
前述のように、今日のすべてのリソースには、名前、アートワークなどのデフォルトの属性セットがあります。

00:04:31.000 --> 00:04:34.000
しかし、リソースには拡張された属性もあるかもしれません。

00:04:34.000 --> 00:04:47.000
拡張属性は、計算にコストがかかるか、必要頻度が低いため、デフォルトでそれらを含めると、応答が著しく遅くなるか、オブジェクトモデルが肥大化する可能性があります。

00:04:47.000 --> 00:05:01.000
関連クエリパラメータで見たものと同様に、拡張クエリパラメータを使用してリソースタイプで分類し、興味のある属性名のリストでそれに従うことで、リソースの拡張属性を要求できます。

00:05:01.000 --> 00:05:11.000
/suggestionsのリクエストに基づいて、曲の結果については、ユーザーがApple Musicのそのアーティストのページにリンクできるようにしたいと決めるかもしれません。

00:05:11.000 --> 00:05:17.000
これを行うには、リクエストにextend=artistUrlを追加するだけです。

00:05:17.000 --> 00:05:25.000
実際、これを行うと、応答の曲のリソースにartistUrl属性が含まれていることがわかります。

00:05:25.000 --> 00:05:30.000
さて、リレーションシップビューの概念を紹介したいと思います。

00:05:30.000 --> 00:05:34.000
関係と比較して、ビューはリソースとより緩く結合されています。

00:05:34.000 --> 00:05:40.000
彼らは必ずしも人間関係のようなリソースに関するいくつかの地上の真実を表すものではありません。

00:05:40.000 --> 00:05:46.000
これにより、ビューはアルバムページなどの製品ページ体験を駆動するのに理想的です。

00:05:46.000 --> 00:05:53.000
これを、たとえば検索結果ページで使用するのに便利な関係と比較してください。

00:05:53.000 --> 00:05:58.000
さらに、ビューには、タイトルなどの属性とデータがある場合があります。

00:05:58.000 --> 00:06:01.000
ビューは、直接リソースフェッチでのみリクエストできます。

00:06:01.000 --> 00:06:04.000
これは、それらを取得するには2つの異なる方法があることを意味します。

00:06:04.000 --> 00:06:16.000
ビュークエリパラメータを使用してリストを指定するか、リクエストパスのリソースのIDの直後に/view/{viewName}を介してリストを指定できます。

00:06:16.000 --> 00:06:23.000
この回答では、アーティストリソースにトップソングビューを含めるとどのように見えるかの例があります。

00:06:23.000 --> 00:06:28.000
その他の例としては、トップミュージックビデオやアーティストのシングルなどがあります。

00:06:28.000 --> 00:06:35.000
特定のリソースタイプでサポートされているビューの完全なリストは、もちろん、公式のApple Music APIドキュメントに記載されています。

00:06:35.000 --> 00:06:39.000
最後に、Charts APIのアップデートを見てみましょう。

00:06:39.000 --> 00:06:47.000
今日、Apple Musicは、世界、店頭、そして最近では特定の都市のチャートプレイリストをサポートしています。

00:06:47.000 --> 00:06:52.000
ユーザーはこれらのチャートプレイリストをライブラリに追加することができ、自動的に更新されます。

00:06:52.000 --> 00:07:07.000
types=playlistsを指定し、「with」クエリパラメータを使用して、dailyGlobalTopChartsまたはcityCharts、またはその両方のいずれかのセットを示すことで、/chartsエンドポイントから直接これらを取得できるようになりました。

00:07:07.000 --> 00:07:12.000
そして、ここに、これらのクエリパラメータを持つチャートの応答がどのように見えるかの例があります。

00:07:12.000 --> 00:07:23.000
要約すると、今日は検索とチャートのエンドポイントの強化を検討し、応答でリソースのデータを取得する新しい方法を検討しました。

00:07:23.000 --> 00:07:40.000
Apple Music APIについてもっと知りたい場合は、Apple Music APIでコンテンツを相互参照する方法に関する今年のセッション、またはAPIのコアコンセプトのいくつかをさらに詳細に説明する2017年のIntroducing MusicKitプレゼンテーションを強くお勧めします。

00:07:40.000 --> 00:07:44.000
ご覧いただきありがとうございます。今年のWWDCをお楽しみください。ありがとうございます。

00:07:44.000 --> 23:59:59.000
♪

