WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
Willem Mattelaer：こんにちは、私の名前はWillemで、グループ活動に取り組んでいるエンジニアです。

00:00:13.000 --> 00:00:19.000
アンガスとアダムと一緒に、グループアクティビティでカスタムエクスペリエンスを作成する方法について話します。

00:00:19.000 --> 00:00:27.000
まず、このセッションで取り組むアプリを紹介し、グループアクティビティのサポートを追加するのに最適な候補者である理由を説明します。

00:00:27.000 --> 00:00:35.000
次に、アクティビティの作成とセッション管理の手順について説明し、メディアエクスペリエンスの作成との違いについて説明します。

00:00:35.000 --> 00:00:41.000
最後に、アプリの使用中にユーザーが経験する体験を磨く方法をいくつか紹介します。

00:00:41.000 --> 00:00:47.000
グループアクティビティを使用すると、SharePlayを使用してデバイス間で共有エクスペリエンスを構築できます。

00:00:47.000 --> 00:00:56.000
メディアエクスペリエンスの作成に重点を置いていますが、それはあなたの創造性を熱狂させ、あなたのアプリが複数のデバイスでどのように体験できるかを見るのを妨げるべきではありません。

00:00:56.000 --> 00:01:02.000
「グループ活動でメディア体験を調整する」セッションで紹介されたコンセプトのいくつかを基盤とします。

00:01:02.000 --> 00:01:06.000
私はそれをチェックすることを強くお勧めします。

00:01:06.000 --> 00:01:13.000
このセッションでは、FaceTimeで一緒に描画できるDrawTogetherというアプリに取り組みます。

00:01:13.000 --> 00:01:19.000
これは、画面のほぼ全体がキャンバスであり、誰もが描画に使用できるランダムな色を取得する非常にシンプルなアプリです。

00:01:19.000 --> 00:01:26.000
しかし、単純であるにもかかわらず、私の友人と一緒に絵を描き、彼らの何人かの素晴らしいスキルを賞賛したり、彼らの貧しい絵を笑うのはまだ信じられないほど楽しいです。

00:01:26.000 --> 00:01:29.000
私自身は間違いなく2番目のカテゴリーに分類されます。

00:01:29.000 --> 00:01:38.000
私たちが取り組んでいることの簡単なデモをお見せしましょう。

00:01:38.000 --> 00:01:40.000
やあみんな、どうしたの?

00:01:40.000 --> 00:01:42.000
アダム、あなたが私に質問があるのを見ました。

00:01:42.000 --> 00:01:48.000
アダム・サイード:うん。アンガスと私は話していて、彼はあなたが本当に良いアーティストだと言いました - グレードAピカソのように。

00:01:48.000 --> 00:01:49.000
だから、あなたは私たちに見せなければなりません、男!

00:01:49.000 --> 00:01:53.000
アンガス・バートン：ウィレムの絵をいくつか見ましたが、印象的です。

00:01:53.000 --> 00:01:56.000
ウィレム：アンガス、あなたはほんの少し大げさだと思います。

00:01:56.000 --> 00:01:58.000
でも、私に何ができるかをお見せできてうれしいです。

00:01:58.000 --> 00:02:00.000
DrawTogetherアプリに行きましょう。

00:02:00.000 --> 00:02:01.000
アダム：わかりました。

00:02:01.000 --> 00:02:06.000
牧歌的な風景のように、私たちはできますか?

00:02:06.000 --> 00:02:09.000
ウィレム：もちろん、ええと...家を描くことから始めましょう、多分

00:02:09.000 --> 00:02:13.000
アダム：わかりました。

00:02:13.000 --> 00:02:15.000
アンガス：ウィレム、この家はかなり基本的に見えます。

00:02:15.000 --> 00:02:18.000
たぶん、私は太陽の下であなたを手伝うでしょう。

00:02:18.000 --> 00:02:20.000
アダム：木を試してみます。

00:02:20.000 --> 00:02:23.000
ウィレム：その木は高すぎます。

00:02:23.000 --> 00:02:27.000
アダム：いや、太陽が低すぎるよ。

00:02:27.000 --> 00:02:29.000
ウィレム：草を追加させてください。

00:02:29.000 --> 00:02:32.000
アダム：もう少し木を描きます。

00:02:32.000 --> 00:02:35.000
ウィレム：わかりました。ええと、私はそれを呼ぼうと思います

00:02:35.000 --> 00:02:39.000
私たちはアーティストではないので、今やっていることをやめるべきです。

00:02:39.000 --> 00:02:43.000
後で話そう、いい？いい？

00:02:43.000 --> 00:02:45.000
アダム:OK、アンガス:さようなら。

00:02:45.000 --> 00:02:52.000
ウィレム：あなたが見たように、グループ活動APIの中核的な経験の1つは、物理的に離れている間に一緒に物事を行うことを可能にすることです。

00:02:52.000 --> 00:03:01.000
ロックを解除できるリアルタイムのインタラクションと、ユーザーが他の人を見たり聞いたりすることができるので、ユーザーが得る瞬間的な反応は、本当に魔法のような瞬間につながる可能性があります。

00:03:01.000 --> 00:03:07.000
これは、アプリにグループアクティビティを統合する方法を検討する際に留意すべきことです。

00:03:07.000 --> 00:03:12.000
グループアクティビティを採用するには、アクティビティの作成とセッション管理の2つのステップがあります。

00:03:12.000 --> 00:03:16.000
「メディア体験の調整」セッションで、これをより詳細に取り上げました。

00:03:16.000 --> 00:03:24.000
このセッションでは、アクティビティの作成から始めて、カスタムエクスペリエンスを構築する際に、これらのステップがどのように変化するかを見てみましょう。

00:03:24.000 --> 00:03:27.000
グループアクティビティを作成するには2つの部分があります。

00:03:27.000 --> 00:03:32.000
最初にアクティビティを設定し、その後、アクティビティをアクティブにします。

00:03:32.000 --> 00:03:38.000
メディアグループアクティビティと比較して、カスタムアクティビティでは設定部分のみが異なります。

00:03:38.000 --> 00:03:44.000
アクティビティを設定するときは、すべての参加者間で共有したい特定の経験について考える必要があります。

00:03:44.000 --> 00:03:49.000
アクティビティには、その経験を通して一定のままであるすべての情報を含める必要があります。

00:03:49.000 --> 00:03:55.000
「グループ活動でメディア体験を調整する」セッションを見たことがあるなら、これは見覚えがあるはずです。

00:03:55.000 --> 00:04:04.000
GroupActivityプロトコルに準拠したDrawTogether構造体を定義し、タイトルで関連するメタデータを構築するメタデータプロパティを実装しました。

00:04:04.000 --> 00:04:10.000
これをカスタムアクティビティにするには、メタデータに正しいタイプを設定するだけです。

00:04:10.000 --> 00:04:15.000
それをジェネリックに設定することで、このアクティビティをカスタムアクティビティに設定します。

00:04:15.000 --> 00:04:19.000
そして、メディアと比較してカスタムアクティビティを設定するときにする必要があるのはそれだけです。

00:04:19.000 --> 00:04:25.000
それでは、Xcodeにジャンプして、DrawTogetherアプリでカスタムグループアクティビティの作成を始めましょう。

00:04:25.000 --> 00:04:29.000
まず、私たちが始めたコードを簡単に説明させてください。

00:04:29.000 --> 00:04:33.000
DrawTogetherは、SwiftUIアプリのライフサイクルを使用するSwiftUIアプリです。

00:04:33.000 --> 00:04:36.000
ContentViewはアプリのメインビューです。

00:04:36.000 --> 00:04:41.000
ビューの上部には、描画時に使用される色を示すインジケーターがあります。

00:04:41.000 --> 00:04:44.000
その下にはCanvasViewがあります。

00:04:44.000 --> 00:04:51.000
これはキャンバスを取り、キャンバス内のすべてのストロークを描画し、ユーザーの入力に基づいてキャンバスを更新する責任があります。

00:04:51.000 --> 00:04:57.000
最後に、下部にはControlBarがあり、描画中に役立ついくつかのコントロールが含まれています。

00:04:57.000 --> 00:05:02.000
現在、キャンバスをクリアしてゼロから始めるためのボタンが1つあります。

00:05:02.000 --> 00:05:09.000
キャンバス自体は、各ストロークに色、識別子、およびポイントのリストを持つストロークの配列で構成されています。

00:05:09.000 --> 00:05:19.000
キャンバスには、ローカルユーザーが現在描画しているストロークを表すactiveStrokeと、ユーザーが使用するストロークカラーもあります。

00:05:19.000 --> 00:05:22.000
では、アクティビティの設定から始めましょう。

00:05:22.000 --> 00:05:25.000
その前に、グループアクティビティの資格を追加する必要があります。

00:05:25.000 --> 00:05:32.000
プロジェクト設定に移動し、「署名と機能」タブで新しい機能を追加します。

00:05:32.000 --> 00:05:38.000
グループアクティビティを検索して選択します。

00:05:38.000 --> 00:05:42.000
資格ができたので、最後にアクティビティを設定しましょう。

00:05:42.000 --> 00:05:48.000
「ファイル」&gt;「新規」&gt;「ファイル」に移動して、新しいファイルを追加します。

00:05:48.000 --> 00:05:51.000
そして、スウィフトファイルを選択します。

00:05:51.000 --> 00:05:52.000
私はそれを「DrawTogether」と呼びます...

00:05:52.000 --> 00:05:58.000
...そして、[作成]をクリックします。

00:05:58.000 --> 00:06:00.000
まず、フレームワークをインポートします。

00:06:00.000 --> 00:06:11.000
次に、GroupActivityプロトコルに準拠した「DrawTogether」という新しい構造体を定義します。

00:06:11.000 --> 00:06:17.000
GroupActivityプロトコルには、実装すべき2つのプロパティがあります。activityIdentifierとメタデータです。

00:06:17.000 --> 00:06:20.000
activityIdentifierについては、デフォルトの実装に依存します。

00:06:20.000 --> 00:06:23.000
ただし、メタデータプロパティはまだ必要です。

00:06:23.000 --> 00:06:29.000
では、それを追加しましょう。

00:06:29.000 --> 00:06:36.000
この計算されたプロパティでは、GroupActivityMetadataオブジェクトを作成し、タイトルを設定します。

00:06:36.000 --> 00:06:39.000
また、タイプをジェネリックに設定しました。

00:06:39.000 --> 00:06:42.000
これはカスタムアクティビティにとって非常に重要です。

00:06:42.000 --> 00:06:48.000
最後に、メタデータオブジェクトを返します。

00:06:48.000 --> 00:06:53.000
アクティビティを設定したので、適切なタイミングでアクティブにする必要があります。

00:06:53.000 --> 00:06:57.000
私はそれをアクティブにするために新しいボタンを追加します - そして、私たちのコントロールバーよりも良い場所は何ですか？

00:06:57.000 --> 00:06:59.000
HStackの開始時にボタンを追加します。

00:06:59.000 --> 00:07:07.000
ボタンのラベルには、SFシンボルを使用しています。

00:07:07.000 --> 00:07:14.000
また、アクションのクロージャでは、カスタムグループアクティビティの新しいインスタンスを作成し、アクティベートを呼び出します。

00:07:14.000 --> 00:07:18.000
そして、私たちの活動を活性化するために必要なのはそれだけです。

00:07:18.000 --> 00:07:22.000
カスタムグループアクティビティの設定方法とアクティベート方法を示しました。

00:07:22.000 --> 00:07:26.000
これらは、アクティビティ作成ステップに必要な2つの部分です。

00:07:26.000 --> 00:07:31.000
さて、アンガスに渡します。アンガスはセッション管理のステップについてお話しします。

00:07:31.000 --> 00:07:32.000
アンガス:ありがとう、ウィレム。

00:07:32.000 --> 00:07:38.000
次に、グループアクティビティを使用してアプリケーションでカスタムデータを送受信する方法について説明します。

00:07:38.000 --> 00:07:44.000
これは、グループアクティビティでユニークなSharePlay体験を作成することの中心です。

00:07:44.000 --> 00:07:56.000
「グループ活動とメディア体験を調整する」というタイトルの前のセッションから、セッションの受信、再生の準備、セッションへの参加の3つのステップに精通している必要があります。

00:07:56.000 --> 00:08:01.000
再生同期の代わりに、カスタムエクスペリエンス用にセッションを設定する必要があります。

00:08:01.000 --> 00:08:07.000
しかし、それに飛び込む前に、グループセッションを受信して参加するためのコードを追加しましょう。

00:08:07.000 --> 00:08:17.000
Xcodeに戻りましょう。まず、ContentViewに移動し、GroupActivitiesをインポートします。

00:08:17.000 --> 00:08:26.000
次に、GroupSessionを受信するための非同期タスクを作成します。

00:08:26.000 --> 00:08:33.000
グループセッションが開催されたので、それを保管する場所が必要です。

00:08:33.000 --> 00:08:40.000
「configureGroupSession」を呼び出す新しいメソッドを使用して、Canvasオブジェクトに保存しましょう。

00:08:40.000 --> 00:08:50.000
では、Canvasに移動して、configureGroupSessionメソッドを実装しましょう。

00:08:50.000 --> 00:08:55.000
まず、一番上に行って、必ずGroupActivitiesをインポートします。

00:08:55.000 --> 00:09:03.000
ファイルの一番下に行って、次に新しいメソッドを実装しましょう。

00:09:03.000 --> 00:09:13.000
ここでは、受け取ったgroupSessionオブジェクトをクラスの新しいプロパティに割り当てました。

00:09:13.000 --> 00:09:19.000
また、groupSessionプロパティを設定する前にキャンバスをリセットすることに注意してください。

00:09:19.000 --> 00:09:24.000
最後になりましたが、groupSessionに参加するコードを追加しましょう。

00:09:24.000 --> 00:09:32.000
この時点で、プロジェクトを構築してコンパイルできるはずです。

00:09:32.000 --> 00:09:40.000
製品&gt;ビルドに移動して、それをテストしましょう。

00:09:40.000 --> 00:09:41.000
すごい。

00:09:41.000 --> 00:09:50.000
グループセッションを受信して参加するためのコードを設定したので、アプリケーションでカスタムデータを送受信するためのセッションを設定する方法を見てみましょう。

00:09:50.000 --> 00:10:02.000
セッションを設定するには、グループセッション内の参加者との間で生データや構造化メッセージを送受信するためのシンプルなAPIを提供するGroupSessionMessengerを使用します。

00:10:02.000 --> 00:10:07.000
次はGroupSessionMessengerの使い方を見てみましょう。

00:10:07.000 --> 00:10:12.000
まず、groupSessionからGroupSessionMessengerを作成します。

00:10:12.000 --> 00:10:20.000
GroupSessionMessengerを使用する最初のステップは、アプリケーションの参加者間で交換する必要があるデータの種類を定義することです。

00:10:20.000 --> 00:10:27.000
DrawTogetherでは、他のデバイスと共有する必要がある特定のデータは、ストローク自体です。

00:10:27.000 --> 00:10:33.000
識別子、色、座標点の3つのプロパティでストロークを表すことができます。

00:10:33.000 --> 00:10:38.000
UpsertStrokeMessageをCodableプロトコルに準拠させることに注意してください。

00:10:38.000 --> 00:10:50.000
これは、GroupSessionMessengerが構造化されたメッセージを送受信することを可能にし、メッセージがコーダブルである限り、シリアル化とデシリアライズを自動的に処理するためです。

00:10:50.000 --> 00:10:58.000
セッションを設定するための2番目のステップは、GroupSessionMessengerのメッセージAPIを使用してデータを受信することです。

00:10:58.000 --> 00:11:02.000
DrawTogetherでは、UpsertStrokeMessagesの受信を処理する必要があります。

00:11:02.000 --> 00:11:18.000
ここに示されているメッセージAPIは、コーダブルタイプを取ることができ、非同期シーケンスを返します。これは、そのタイプのメッセージを含むタプルと、メッセージを取り巻くコンテキストを返します。これには、どの参加者がそのメッセージを送信したかなどの情報が含まれます。

00:11:18.000 --> 00:11:24.000
セッションを設定するための3番目のステップは、GroupSessionMessengerの送信APIを使用してデータを送信することです。

00:11:24.000 --> 00:11:30.000
DrawTogetherでは、グループ内のすべての参加者にUpsertStrokeMessageを送信します。

00:11:30.000 --> 00:11:33.000
送信APIは非同期スローメソッドであることに注意してください。

00:11:33.000 --> 00:11:37.000
スローされるエラーは、アプリケーションによって適切に処理されるべきです。

00:11:37.000 --> 00:11:41.000
では、Xcodeに移動して、GroupSessionMessengerコードを追加しましょう。

00:11:41.000 --> 00:11:52.000
まず、Canvasのソースファイルに移動し、グループセッションからGroupSessionMessengerを作成します。

00:11:52.000 --> 00:11:57.000
作成したばかりのメッセンジャーオブジェクトを保持するキャンバスにメッセンジャープロパティを追加します。

00:11:57.000 --> 00:12:10.000
次に、参加者間で送受信されるUpsertStrokeMessageを定義する必要があります。

00:12:10.000 --> 00:12:12.000
このために新しいファイルを作成しましょう。

00:12:12.000 --> 00:12:17.000
「ファイル」&gt;「新規」&gt;「ファイル」に移動して行います。

00:12:17.000 --> 00:12:19.000
スウィフトファイルを選択...

00:12:19.000 --> 00:12:22.000
...そして、それを私たちのモデルフォルダに貼り付けましょう。

00:12:22.000 --> 00:12:27.000
そして、それを「メッセージ」と呼びましょう。

00:12:27.000 --> 00:12:34.000
それでは、UpsertStrokeMessageを定義するコードを追加しましょう。

00:12:34.000 --> 00:12:41.000
GroupSessionMessengerで送受信するメッセージを定義したので、送受信するコードを書いてみましょう。

00:12:41.000 --> 00:12:47.000
これを行うには、Canvasに戻ります。

00:12:47.000 --> 00:12:57.000
ファイルの一番下に移動して、メッセージを受信するためのコードを追加しましょう。

00:12:57.000 --> 00:13:05.000
ここでは、非同期シーケンスからUpsertStrokeMessagesを受信するための切り離されたタスクを作成し、メッセージを処理するために新しいメソッド、ハンドルを呼び出します。

00:13:05.000 --> 00:13:09.000
次にそれを実装しましょう。

00:13:09.000 --> 00:13:20.000
このコードでは、その識別子をチェックして、すでにストロークがあるかどうかを確認し、その場合はポイントを追加します。

00:13:20.000 --> 00:13:27.000
それ以外の場合は、新しいストロークを作成し、ポイントを追加し、ストロークの配列にストロークを追加します。

00:13:27.000 --> 00:13:31.000
次に、メッセージを送信するためのコードを書きます。

00:13:31.000 --> 00:13:37.000
上記の方法、addPointToActiveStrokeに進みます。

00:13:37.000 --> 00:13:43.000
すごい！

00:13:43.000 --> 00:13:49.000
それでは、アプリを構築して実行し、共有されたDrawTogetherエクスペリエンスの動作を見てみましょう。

00:13:49.000 --> 00:13:54.000
だから私は2つのデバイスに行き、自分自身とFaceTime通話を始めます。

00:13:54.000 --> 00:13:56.000
電話アプリに行って、それから自分に電話します。

00:13:56.000 --> 00:13:59.000
そして、私は他のデバイスで答えるつもりです。

00:13:59.000 --> 00:14:07.000
マイクの電源を切ってください。

00:14:07.000 --> 00:14:13.000
今、このデバイスで、私は共有DrawTogether体験を始めるつもりです。

00:14:13.000 --> 00:14:16.000
左下のアイコンをタップします。

00:14:16.000 --> 00:14:20.000
そして、他のデバイスでは、グループセッションに参加します。

00:14:20.000 --> 00:14:25.000
そして今、私は自分自身でチックタックトーをするつもりです。

00:14:25.000 --> 00:14:37.000
私が先に引っ越します。

00:14:37.000 --> 00:14:39.000
私が勝ったようですね。

00:14:39.000 --> 00:14:42.000
かっこいい。私たちのコードは機能しているようです。

00:14:42.000 --> 00:15:02.000
まずメッセージを定義し、次にメッセージを受信し、最後にメッセージを送信することで、GroupSessionMessengerを使用してセッションを設定する方法について話しました。GroupSessionMessengerを使用する際に考慮すべき他のいくつかのことについて話しましょう。

00:15:02.000 --> 00:15:11.000
ボンネットの下で、GroupSessionMessengerは、グループ内のすべてのアクティブな参加者に信頼性の高いFIFO命令のメッセージ配信を提供します。

00:15:11.000 --> 00:15:17.000
送信するメッセージには制約があります。大きすぎると、送信APIからエラーがスローされます。

00:15:17.000 --> 00:15:26.000
GroupSessionMessengerは、より小さなペイロードを対象としており、ファイル、画像、ビデオなどの大きなアセットのストリーミングには使用しないでください。

00:15:26.000 --> 00:15:30.000
メッセージを送信する際に考慮すべきもう1つのことは、フロー制御とレート制限です。

00:15:30.000 --> 00:15:39.000
ループのようにメッセージのバーストをすばやく連続して送信すると、送信APIからエラーがスローされる可能性があります。

00:15:39.000 --> 00:15:46.000
最後に、GroupSessionMessengerで使用するメッセージを定義するときは、アプリケーションプロトコルにバージョン管理サポートを追加することを検討してください。

00:15:46.000 --> 00:15:52.000
これにより、アプリケーションは、古いバージョンのソフトウェアを実行しているデバイスとのインターオプをサポートできます。

00:15:52.000 --> 00:15:59.000
今、私はそれをアダムに渡します。アダムは、あなたのグループアクティビティの経験を磨く方法についてあなたに話します。

00:15:59.000 --> 00:16:00.000
アダム:ありがとう、アンガス!

00:16:00.000 --> 00:16:07.000
それでは、あなたのアプリがカスタムエクスペリエンスのために必要とするかもしれないいくつかの最後の仕上げについて話しましょう。

00:16:07.000 --> 00:16:10.000
まず、遅いジョイナーについて話しましょう。

00:16:10.000 --> 00:16:15.000
レイトジョイナーは、セッションの開始後にアクティビティセッションに参加するデバイスです。

00:16:15.000 --> 00:16:23.000
適切な経験を確実にするために、すべてのデバイスが同じデータで動作しているように、遅いジョイナーに最新情報を提供する必要があります。

00:16:23.000 --> 00:16:30.000
このシナリオの会計処理は、一貫したユーザーエクスペリエンスを確保するために重要ですが、万能ではありません。

00:16:30.000 --> 00:16:34.000
このキャッチアッププロセスに必要なデータは、アプリと経験によって異なります。

00:16:34.000 --> 00:16:38.000
それでは、それがDrawTogetherアプリにどのように適用されるか見てみましょう。

00:16:38.000 --> 00:16:40.000
グループセッションに2つのデバイスがあるとしましょう。

00:16:40.000 --> 00:16:46.000
これらの2つのデバイスは同じ情報を持っています:キャンバスに描かれたスマイリーフェイス。

00:16:46.000 --> 00:16:52.000
描画が起こったとき、彼らは両方ともセッションにいたので、彼らは経験を通して同じデータを持っていることがわかります。

00:16:52.000 --> 00:16:54.000
では、別のデバイスを追加してみましょう。

00:16:54.000 --> 00:16:59.000
この時点で、新しいデバイスはGroupSessionで参加を呼び出しますが、キャンバスには何もありません。

00:16:59.000 --> 00:17:04.000
だから私たちは雲を描きます、そして-ああ、それは-それは良くありません

00:17:04.000 --> 00:17:09.000
新しいデバイスには以前のコンテキストがなかったので、私たちのスマイリーフェイスには雲があります。

00:17:09.000 --> 00:17:11.000
では、バックアップしてもう一度やってみましょう。

00:17:11.000 --> 00:17:17.000
新しいデバイスが参加するとすぐにスマイリーフェイスショーが表示されるように、これをどのように修正しますか?

00:17:17.000 --> 00:17:27.000
新しいデバイスがグループセッションに参加を呼び出すと、グループセッションに参加した他のすべてのデバイスには、GroupSession fireのactiveParticipantsプロパティが表示されます。

00:17:27.000 --> 00:17:34.000
その信号を観察するデバイスは、そのキャッチアップデータ（この場合は既存の描画キャンバス）を新しく参加したデバイスに送信します。

00:17:34.000 --> 00:17:40.000
今、新しいデバイスが結合すると、それはすでにそこにスマイリーフェイスがあったので、私たちはその周りに描くことができます!

00:17:40.000 --> 00:17:43.000
さて、コードでこれをどのように行うのですか?

00:17:43.000 --> 00:17:48.000
最初にする必要があるのは、アプリがキャッチアップメッセージで送信する必要があるデータを理解することです。

00:17:48.000 --> 00:18:01.000
私たちはDrawTogetherの経験であり、私たちの目標はキャンバスがすべての人のデバイスで同じであることを確認することなので、先に進んで「CanvasMessage」と呼ばれるMessage.swiftファイルに新しいメッセージを作りましょう。

00:18:01.000 --> 00:18:11.000
この構造体には、私たちが持っているすべてのストロークと、どのメッセージが最新であるかを計算するためのヒューリスティックとして使用される「pointCount」を呼び出す変数が含まれます。

00:18:11.000 --> 00:18:12.000
すごい！

00:18:12.000 --> 00:18:15.000
さて、このメッセージの受信をどのように処理しますか?

00:18:15.000 --> 00:18:27.000
Canvas.swiftのCanvasモデルに進むと、Angusが以前に示したように、GroupSessionMessengerを使用してconfigureGroupSessionでメッセージハンドラを設定できます。

00:18:27.000 --> 00:18:39.000
ここから、ハンドル関数を呼び出すことがわかりますので、先に進んでそれを実装しましょう。

00:18:39.000 --> 00:18:49.000
このコードでは、現在持っているものよりも新しいキャッチアップメッセージのみを受け入れるために、pointCountヒューリスティックから保護していることがわかります。

00:18:49.000 --> 00:18:56.000
それが合格したら、キャンバスのストロークをcatchupMessageのストロークで上書きします。

00:18:56.000 --> 00:19:05.000
さて、先ほど説明したように、私たちがコミュニケーションを取る必要がある新しい参加者がいるかどうかを把握するために、アクティブな参加者が変わるのを聞く必要があります。

00:19:05.000 --> 00:19:12.000
それでは、それをconfigureGroupSession機能に追加しましょう。

00:19:12.000 --> 00:19:21.000
このハンドラーでは、新しいアクティブ参加者と古いアクティブ参加者の間のデルタをつかむことがわかります。

00:19:21.000 --> 00:19:26.000
これにより、新しく参加した参加者にのみキャッチアップメッセージを送信できます。

00:19:26.000 --> 00:19:27.000
すごい！

00:19:27.000 --> 00:19:31.000
今、私たちはメッセージを形成して送信するだけです。

00:19:31.000 --> 00:19:40.000
このメッセージには現在のキャンバスの状態が含まれており、新しい参加者にのみ送信されます。

00:19:40.000 --> 00:19:41.000
そして、それだけです!

00:19:41.000 --> 00:19:43.000
それはキャッチアップです!

00:19:43.000 --> 00:19:51.000
では、特定の活動のためにグループセッションを行うためのすべての部分が整ったので、活動を完全に変更する場合はどうすればよいですか?

00:19:51.000 --> 00:19:57.000
これは、描画キャンバスの変更や映画の変更のようなものかもしれません。

00:19:57.000 --> 00:20:06.000
当社のAPIは、アクティビティを変更する2つの方法を提供します。新しいグループセッションを作成するか、既存のグループセッションの全員のアクティビティを更新することができます。

00:20:06.000 --> 00:20:10.000
では、その2つについて話しましょう。

00:20:10.000 --> 00:20:19.000
コンテンツを変更する最初の好ましい方法は、グループセッションを開始したのと同じAPIを呼び出すことです：groupActivityのprepareForActivation。

00:20:19.000 --> 00:20:34.000
このアプローチは、GroupSessionの出入りのためのクリーンな障壁を提供するため、参加者間の一貫した状態について推論しやすくなるため、古いGroupSessionから必要のない長引く状態やメッセージを心配する必要はありません。

00:20:34.000 --> 00:20:42.000
これは、ユーザーがアクティビティから戻って、新しいメモや映画を検索するなど、次のアクティビティを見つけるのに非常に役立ちます。

00:20:42.000 --> 00:20:48.000
これはまた、システムに大きな変更の兆候を与え、ユーザーに通知するために使用されます。

00:20:48.000 --> 00:20:58.000
この呼び出しの後、グループセッションを開始するのと同じ方法で、GroupActivityのセッション非同期シーケンスを介して新しいGroupSessionを受け取ります。

00:20:58.000 --> 00:21:05.000
さて、アプリケーションに、複数の曲が相互に再生されるなど、移行するアクティビティのリストがある場合はどうなりますか?

00:21:05.000 --> 00:21:14.000
GroupSession APIは、GroupSessionのアクティビティプロパティを設定するだけで、すべての人に更新をトリガーする簡単な方法を提供します。

00:21:14.000 --> 00:21:17.000
そこから、アクティビティプロパティの変更を聞きます。

00:21:17.000 --> 00:21:24.000
当社のAPIは、デバイスが常に同じアクティビティに収束することを保証するので、心配する必要はありません。

00:21:24.000 --> 00:21:29.000
この2つを概念的に理解したので、どれをDrawTogetherアプリに使うべきですか?

00:21:29.000 --> 00:21:35.000
私たちのアプリは、それぞれの新しい描画キャンバスにクリーンなスレートを望んでいるので、新しいセッションAPIは私たちが望むものを正確に提供してくれるでしょう。

00:21:35.000 --> 00:21:40.000
それでは、Xcodeにジャンプして、それを実装する方法を見てみましょう。

00:21:40.000 --> 00:21:44.000
ここでの最初のステップは、新しいセッションをどのようにトリガーするかを決定することです。

00:21:44.000 --> 00:21:51.000
私たちの場合は、クライアントがリセットボタンを使用するときに、先に進んで新しいGroupSessionを作成するようにしましょう。

00:21:51.000 --> 00:22:00.000
ControlBarコードを見ると、Canvasモデルを呼び出してローカル状態をリセットするCapsuleButtonがすでにあることがわかります。

00:22:00.000 --> 00:22:06.000
では、その機能を変更して、GroupSessionを分解して新しい機能を作成しましょう。

00:22:06.000 --> 00:22:19.000
このコードでは、GroupSessionのタスクとキャンセルをキャンセルします。

00:22:19.000 --> 00:22:27.000
また、GroupSessionがあるかどうかも確認します。その場合は、それを残して、DrawTogetherタイプのactivateプロパティに呼び出します。

00:22:27.000 --> 00:22:32.000
そこから、グループセッションを受けるための通常の流れが行われ、私たちは行っても大丈夫です!

00:22:32.000 --> 00:22:38.000
私たちは今、新しいキャンバスに移行するためのクリーンな方法を持っています。

00:22:38.000 --> 00:22:44.000
さて、UIを変更して、友人とSharePlay体験を試すことができることをユーザーに示したい場合はどうなりますか?

00:22:44.000 --> 00:22:55.000
たとえば、描画アプリでは、キャンバスをここからこれに変更したいと考えています。GroupSessionの対象となる場合、キャンバスを共有するためのボタンが表示されることに気付くでしょう。

00:22:55.000 --> 00:22:58.000
では、これをどうやってやるの?

00:22:58.000 --> 00:23:05.000
GroupStateObserver APIを使用すると、デバイスがいつグループセッションの対象となるかをパブリッシャーに聞くことができます。

00:23:05.000 --> 00:23:09.000
その後、これを使用して、ボタンを動的に表示および非表示にすることができます。

00:23:09.000 --> 00:23:14.000
だから、それを実行しに行きましょう!

00:23:14.000 --> 00:23:18.000
私たちが見たように、私たちはアプリケーションの左下に小さなボタンが欲しいです。

00:23:18.000 --> 00:23:30.000
アプリケーションにはすでにControlBarビューに共有ボタンがあるため、GroupStateObserverに基づいてボタンを表示および非表示にする動作を変更しましょう。

00:23:30.000 --> 00:23:34.000
まず、groupStateObserverをビューに追加します。

00:23:34.000 --> 00:23:51.000
それでは、GroupSessionの資格があり、まだこのgroupSessionに参加していない場合にのみ、CapsuleButtonを囲んで表示しましょう。

00:23:51.000 --> 00:23:52.000
そして、それだけです!

00:23:52.000 --> 00:23:57.000
私たちのボタンは、ユーザーに役立つ場合にのみ動的に表示されるようになりました。

00:23:57.000 --> 00:24:01.000
さて、このセッションで見たものを見てみましょう。

00:24:01.000 --> 00:24:10.000
シンプルな描画アプリを作成する完全なプロセスを経て、グループアクティビティを活用して、これまでにないほど同期して接続するように変更しました。

00:24:10.000 --> 00:24:20.000
しかし、もっと重要なのは、あなたの創造性を完全に解き放ち、グループアクティビティでカスタムSharePlay体験を作成するために必要なすべてのステップを踏んだことです。

00:24:20.000 --> 00:24:36.000
ジェネリックタイプのカスタムアクティビティの作成、同期通信のためのGroupSessionとGroupSessionMessengerの設定と活用、および真に豊かなユーザーエクスペリエンスを作成するためにアプリが採用すべきエッジケースとAPIについて話しました。

00:24:36.000 --> 00:24:43.000
私はあなたが私たちと一緒にこのカスタム体験を作成するのを楽しんだことを願っています、そして私たちはあなたの創造性がグループ活動のフレームワークでワイルドになるのを楽しみにしています!

00:24:43.000 --> 00:24:53.000
グループアクティビティについて学ぶ際の次のステップは、「グループアクティビティのデザイン」セッションです。まだ見ていない場合は、「グループアクティビティでメディア体験を構築する」セッションもチェックしてください。

00:24:53.000 --> 00:24:56.000
ご不明な点がございましたら、グループアクティビティラボでお問い合わせください。

00:24:56.000 --> 00:25:00.000
そして最後に、チューニングしてくれてありがとう、素晴らしいWWDCをお過ごしください。

00:25:00.000 --> 00:25:02.000
あなたが何を作るかを見るのが待ちきれません!

00:25:02.000 --> 23:59:59.000
♪

