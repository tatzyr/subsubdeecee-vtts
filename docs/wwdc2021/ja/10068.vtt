WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
エリック・ホーンバーガー：皆さん、こんにちは。今日はご参加いただきありがとうございます。

00:00:12.000 --> 00:00:15.000
私たちはあなたのためにいくつかの素晴らしいコンテンツを計画しています。

00:00:15.000 --> 00:00:21.000
私たちは、あなたと私が一緒に研究とケアアプリを構築するコードに沿って歩くつもりです。

00:00:21.000 --> 00:00:27.000
ResearchKitは、AppleがGitHubコミュニティと協力して維持しているオープンソースのiOSフレームワークです。

00:00:27.000 --> 00:00:37.000
参加者が身体的または認知的な運動などの活動を行っている間、同意を収集し、調査を管理し、センサーデータを記録するためのUI要素を提供します。

00:00:37.000 --> 00:00:45.000
CareKitは、同様に、完全にオープンソースのフレームワークでもあり、患者向けのケアアプリの構築に役立つように設計されています。

00:00:45.000 --> 00:00:51.000
薬を服用したり、医師に電話したりするなど、患者に実行してもらいたいタスクをスケジュールすることに優れています。

00:00:51.000 --> 00:00:58.000
また、健康関連データに安全な永続性レイヤーを提供し、チャート作成のためのユーティリティを備えています。

00:00:58.000 --> 00:01:11.000
さて、過去のWWDCセッションでは、これら2つの兄弟フレームワークを単独で議論することがよくありましたが、今年は患者にとってより良い体験を生み出すためにそれらをどのように一緒に使用できるかを紹介します...

00:01:11.000 --> 00:01:13.000
ごめんなさい。

00:01:13.000 --> 00:01:15.000
私たちはただ--私はそれをサイレントにしておくべきだった

00:01:15.000 --> 00:01:16.000
私たちはカットしますか?

00:01:16.000 --> 00:01:21.000
乗組員:いいえ、ただ答えてください。

00:01:21.000 --> 00:01:25.000
エリック: やあ、ジェイミー。最近どうですか？

00:01:25.000 --> 00:01:26.000
ジェイミー:ねえ、エリック。

00:01:26.000 --> 00:01:34.000
あなたが今WWDCの準備で忙しいのは知っていますが、理学療法研究アプリの資金がちょうど来たことをあなたに伝えたかったのです!

00:01:34.000 --> 00:01:37.000
この最先端の研究は、非常に多くの人々を助けるでしょう!

00:01:37.000 --> 00:01:42.000
では、すぐにアプリの最初の改訂を出せると思いますか？

00:01:42.000 --> 00:01:47.000
エリック：ねえ、ジェイミー、それは素晴らしいニュースです、そして私は本当ワクワクしています。

00:01:47.000 --> 00:01:52.000
問題は、私たちはダブダブコードの真ん中にいるということです。

00:01:52.000 --> 00:01:54.000
ジェイミー：ああ、もうコーディングしてるの？

00:01:54.000 --> 00:01:55.000
それは完璧です！

00:01:55.000 --> 00:01:57.000
したがって、そのアプリは「Recover」と呼ばれます。

00:01:57.000 --> 00:02:05.000
それは参加者が手術後に膝を強化するのに役立つ理学療法アプリになるだろう、そしてそれはゲームチェンジャーになるだろう!

00:02:05.000 --> 00:02:14.000
私はたくさんの素晴らしいアイデアを持っていますが、まず、参加者がアプリを使い始める前に、参加者が研究に参加することに同意することが本当に重要です。

00:02:14.000 --> 00:02:21.000
私たちは彼らにすべての法律を説明しなければなりませんが、私は本当に威圧的ではない方法でそれをやりたいです。

00:02:21.000 --> 00:02:27.000
また、参加者から署名を得て、私たちとデータを共有することに同意してもらう必要があります。

00:02:27.000 --> 00:02:29.000
ええと、ちょっと待って、エリック。

00:02:29.000 --> 00:02:31.000
臨床チームからメッセージが届いています。

00:02:31.000 --> 00:02:38.000
ああ、うわー。最初の参加者は月曜日に術後から解放されるようです。

00:02:38.000 --> 00:02:41.000
エリック、とりあえずオンボーディングを始められますか？

00:02:41.000 --> 00:02:44.000
残りのチームに追いつかなければなりませんが、すぐにかけ直します。

00:02:44.000 --> 00:02:46.000
これは素晴らしいことになるだろう!

00:02:46.000 --> 00:02:51.000
エリック：わかりました。

00:02:51.000 --> 00:02:53.000
ええと...じゃあ、わかった！

00:02:53.000 --> 00:02:56.000
これは今、私たちのコードになると思います。

00:02:56.000 --> 00:03:02.000
だから、ジェイミーがその会議から抜け出す前に、オンボーディングを終えることができるかどうか見てみましょう

00:03:02.000 --> 00:03:08.000
では、このセッションでは、オンボーディングと同意に焦点を当てましょう。

00:03:08.000 --> 00:03:22.000
どのようなデータを収集し、誰がアクセスし、何に使用され、どのくらいの期間保持されるかを参加者に説明し、そのすべてを理解しやすくすることは、良い研究にとって最も重要です。

00:03:22.000 --> 00:03:30.000
アプリのこの非常に重要な部分を正しく取得するのに役立つResearchKitの新しいベストプラクティスをいくつか紹介します。

00:03:30.000 --> 00:03:39.000
そして、ボーナスとして、そのオンボーディングと同意の流れをCareKitベースのアプリに焼きつける賢い方法を実演します。

00:03:39.000 --> 00:03:50.000
具体的には、標準のCareKitアプリを設定しますが、ケアプランの内容が明らかにされる前に参加者がオンボーディングを完了する必要があります。

00:03:50.000 --> 00:03:58.000
その同意とオンボーディングフローの一環として、参加者に何をするように求められているかを伝えるいくつかの指示手順を構築します。

00:03:58.000 --> 00:04:06.000
実際の同意部分に飛び込む前に、このように参加者を方向づけることは、彼らの経験を向上させるのに本当に役立つことがわかりました。

00:04:06.000 --> 00:04:19.000
署名を収集する方法を紹介し、ResearchKitを使用して、オンボーディングの一環として、HealthKit、通知、デバイスの動きの承認を事前に要求する方法も実演します。

00:04:19.000 --> 00:04:24.000
フォローしたい場合は、セッションリソースでスタータープロジェクトを見つけることができます。

00:04:24.000 --> 00:04:28.000
Xcodeを開いて始めましょう！

00:04:28.000 --> 00:04:30.000
ここが私たちが出発点です。

00:04:30.000 --> 00:04:32.000
今日は4つのファイルに触れる予定です。

00:04:32.000 --> 00:04:34.000
まずはAppDelegateです。

00:04:34.000 --> 00:04:38.000
ここで私たちはCareKitの店舗と交流します。

00:04:38.000 --> 00:04:45.000
Surveys.swiftでは、ResearchKitを使用していくつかの調査を書きます。

00:04:45.000 --> 00:04:53.000
次に、CareFeedViewControllerとInsightsViewControllerがあり、アプリのUIを構築します。

00:04:53.000 --> 00:04:58.000
さて、スターターアプリを実行すると、実際には今あまりないことがわかります。

00:04:58.000 --> 00:05:02.000
コンテンツのないOCKDailyPageViewControllerだけです。

00:05:02.000 --> 00:05:06.000
日の間に飛び回ることができますが、まだ何もありません。

00:05:06.000 --> 00:05:10.000
そのすべてを埋めるのが私たちの仕事です。

00:05:10.000 --> 00:05:17.000
この隅にInsightsタブもあり、パート3でそれに戻ります。

00:05:17.000 --> 00:05:22.000
さて、私たちがやりたいことは、同意カードを参加者のフィードに表示することです。

00:05:22.000 --> 00:05:26.000
その同意タスクは、アプリの残りの部分へのアクセスをゲートします。

00:05:26.000 --> 00:05:36.000
完了するまで他には何も表示されません。完了したら、他のすべてのタスクが表示されるはずです。

00:05:36.000 --> 00:05:43.000
ここでAppDelegate.swiftにジャンプして、私たちの最初のステップは、オンボーディングのためのCareKitタスクを永続化することです。

00:05:43.000 --> 00:05:52.000
次に、タスクを作成するたびに、タスクが参加者のフィードに表示される頻度を指定するスケジュールを定義する必要があります。

00:05:52.000 --> 00:05:59.000
オンボーディングには、毎日のスケジュールを使用するため、同意が完了するまで毎日オンボーディングが求められます。

00:05:59.000 --> 00:06:01.000
次に、タスクを作成します。

00:06:01.000 --> 00:06:05.000
私たちは、それがユニークである限り、私たちが望むものなら何でもできるIDを与えます。

00:06:05.000 --> 00:06:12.000
ランダムな識別子は問題ありませんが、この場合、ここで別のファイルで定義した定数があります。

00:06:12.000 --> 00:06:15.000
また、作成したばかりのスケジュールを渡す必要があります。

00:06:15.000 --> 00:06:22.000
また、いくつかの指示を指定し、オンボーディングが遵守に影響を与えるべきではないことを示します。

00:06:22.000 --> 00:06:29.000
これが意味するのは、基本的に、オンボーディングは、ほとんどのCareKitアプリの上部にある完了リングを埋めることにカウントされないということです。

00:06:29.000 --> 00:06:32.000
そして最後に、私たちは私たちの店にタスクを持続させることができます。

00:06:32.000 --> 00:06:37.000
先に進んでメッセージを印刷して、成功したかどうかを知らせます。

00:06:37.000 --> 00:06:45.000
さて、私たちは店でオンボーディングタスクを持っています、行く準備ができています、そして今、私たちはそれを参加者のフィードに表示する準備ができています。

00:06:45.000 --> 00:06:51.000
CareViewController.swiftを飛び越え、CareKitにどのように表示したいかを伝えます。

00:06:51.000 --> 00:06:59.000
ここでは、少し前に見たカレンダーとフィードであるOCKDailyPageViewControllerをサブクラス化しています。

00:06:59.000 --> 00:07:04.000
日付メソッドのprepare listViewControllerをオーバーライドしています。

00:07:04.000 --> 00:07:18.000
このメソッドは、ユーザーが新しい日付にスワイプするたびに呼び出され、日付を検査し、その日付に表示したいものを決定し、適切なコンテンツをlistViewControllerに追加するのが私たちの仕事です。

00:07:18.000 --> 00:07:27.000
さて、最初にやりたいことは、その質問に対する回答に基づいて異なるコンテンツを表示するため、参加者がオンボーディングを終了したかどうかを確認することです。

00:07:27.000 --> 00:07:32.000
もう少し下に降りて、それを行う方法を書き出しましょう。

00:07:32.000 --> 00:07:43.000
checkIfOnboardingIsCompleteメソッド内で、OCKOutomeQueryを作成し、オンボーディングタスクに関連するすべての結果を照会します。

00:07:43.000 --> 00:07:47.000
クエリが返されたら、結果が見つかったかどうかを確認します。

00:07:47.000 --> 00:07:51.000
何もなければ、それはオンボーディングがまだ終わっていないことを意味します。

00:07:51.000 --> 00:07:56.000
1つある場合、それはオンボーディングがすでに完了していることを意味します。

00:07:56.000 --> 00:08:06.000
ここで新しい方法を使用し、オンボーディングが完了したかどうかに基づいて、同意タスクのみを表示するか、他のすべてのタスクを表示します。

00:08:06.000 --> 00:08:08.000
わかった。これまでのところ、とても良いです!

00:08:08.000 --> 00:08:15.000
私たちは今、参加者がアプリの残りの部分に入る前にオンボードすることを要求するメカニズムを持っています。

00:08:15.000 --> 00:08:20.000
次のステップは、そのオンボーディングフローを設定することです。

00:08:20.000 --> 00:08:31.000
ここでは、ResearchKit調査を提示するCareKitタスクカードを作成したいと考えていますが、その前に、表示するものがあるように、実際にResearchKit調査を作成する必要があります。

00:08:31.000 --> 00:08:36.000
Surveys.swiftに立ち寄って、それを処理します。

00:08:36.000 --> 00:08:39.000
始めるために私たちの機能をスタブしましょう。

00:08:39.000 --> 00:08:51.000
私たちのオンボーディング調査は、歓迎ステップ、指示ステップ、署名ステップ、許可ステップ、そして最後に完了ステップの5つのステップで構成されます。

00:08:51.000 --> 00:08:57.000
1つ目は歓迎のステップで、ORKInstructionStepになります。

00:08:57.000 --> 00:09:00.000
私たちは今日、これらの指示の手順の多くを見るつもりです。

00:09:00.000 --> 00:09:04.000
ResearchKitステップを作成するたびに、一意の識別子を与える必要があります。

00:09:04.000 --> 00:09:08.000
ランダムな識別子を含め、任意のパターンを使用できます。

00:09:08.000 --> 00:09:13.000
この重要なパスに触発されたアプローチは、私にとって本当にうまくいくことがわかりました。

00:09:13.000 --> 00:09:19.000
また、タイトルと詳細テキスト、ヘッダー画像も指定します。

00:09:19.000 --> 00:09:20.000
わかった。

00:09:20.000 --> 00:09:27.000
次に、ステップ2はインフォームドコンセントのステップであり、これも指示のステップになります。

00:09:27.000 --> 00:09:30.000
しかし、今回は、いくつかのボディアイテムを追加します。

00:09:30.000 --> 00:09:38.000
ボディアイテムは基本的に箇条書きですが、箇条書きの代わりに画像、この場合はSFシンボルを使用するオプションがあります。

00:09:38.000 --> 00:09:44.000
このボディアイテムは、健康データを共有するように求められることを参加者に伝えます。

00:09:44.000 --> 00:09:54.000
2番目のボディアイテムを作成して、タスクを完了するように求められ、3番目のボディアイテムを作成して、署名を提供するように求められます。

00:09:54.000 --> 00:09:59.000
彼らのデータがプライベートで安全に保たれることを思い出させるために、もう1つ追加しましょう。

00:09:59.000 --> 00:10:04.000
最後に、これらのボディアイテムを指示ステップに挿入します。

00:10:04.000 --> 00:10:07.000
そして、それは指示をカバーしています。

00:10:07.000 --> 00:10:13.000
次は署名を集めることであり、幸いなことに、ResearchKitはこの部分を本当に簡単にします。

00:10:13.000 --> 00:10:17.000
署名はORKWebViewStepで収集できます。

00:10:17.000 --> 00:10:25.000
showSignature AfterContentプロパティをtrueに設定すると、ステップの下部に署名ボックスを表示するようにResearchKitにプロンプトが表示されます。

00:10:25.000 --> 00:10:33.000
実際の同意書をHTMLとして提供でき、署名ボックスのすぐ上に表示されます。

00:10:33.000 --> 00:10:36.000
そこに行きます。署名はかなり速くて簡単でした!

00:10:36.000 --> 00:10:39.000
最後のビットは許可を要求します。

00:10:39.000 --> 00:10:48.000
この4番目のステップでは、チームメイトのParieceが昨年WWDCで導入したHealthKitPermissionTypeで許可を収集します。

00:10:48.000 --> 00:10:58.000
2組のHealthKitタイプを指定する必要があります。1つは書き込み許可が必要で、もう1つは読み許可が必要です。

00:10:58.000 --> 00:11:01.000
今年は、2つの新しい許可タイプを導入します。

00:11:01.000 --> 00:11:12.000
1つ目はORKNotificationPermissionTypeで、アラートを表示したり、アプリにバッジを付けたり、サウンドを再生したりする許可をリクエストできます。

00:11:12.000 --> 00:11:21.000
また、デバイスのモーションデータへのアクセスを求めるのに役立つORKMotionActivity PermissionTypeも導入しています。

00:11:21.000 --> 00:11:28.000
これら3つすべてをrequestPermissionStepに渡し、4番目のステップを締めくくります。

00:11:28.000 --> 00:11:35.000
5番目と最後のステップは、ジェイミーの研究に参加してくれた参加者に感謝する完了ステップです。

00:11:35.000 --> 00:11:40.000
これらのステップはすべて、ORKOrderedTask内で連鎖されます。

00:11:40.000 --> 00:11:48.000
ResearchKitに提示してもらいたい順序で手順を渡してから、この方法からタスクを返します。

00:11:48.000 --> 00:11:49.000
わかった。

00:11:49.000 --> 00:11:59.000
オンボーディングと同意の流れ全体を定義したので、CareFeedViewControllerに戻り、CareKitベースのアプリから表示する方法を再検討しましょう。

00:11:59.000 --> 00:12:07.000
真新しいクラスであるOCKSurveyTaskViewControllerを導入しており、この目的のために特別に構築されています。

00:12:07.000 --> 00:12:16.000
他のすべてのCareKitビューコントローラーと同様に、eventQueryとstoreManagerと一緒に表示したいタスクのIDを渡します。

00:12:16.000 --> 00:12:25.000
さらに、作成したばかりの調査と、ResearchKitの結果を一連のCareKitの結果値に変換するクロージャーも必要です。

00:12:25.000 --> 00:12:29.000
パート2では、この閉鎖をより詳細に再検討します。

00:12:29.000 --> 00:12:36.000
今のところ、参加者がオンボーディングを完了した日付を保持するだけで十分だと言うだけです。

00:12:36.000 --> 00:12:40.000
また、このタスクカードをフィードに追加したいと考えています。

00:12:40.000 --> 00:12:49.000
さて、実際にはもう1つのステップがあり、参加者がオンボーディングを完了したら、フィードがリロードされることを確認することです。

00:12:49.000 --> 00:12:55.000
それを達成する1つの方法は、自分自身を調査タスクビューコントローラーの代理人として設定することです。

00:12:55.000 --> 00:13:02.000
次に、ここで、デリゲートメソッドを実装できます。調査タスクビューコントローラーdidFinishタスクと結果。

00:13:02.000 --> 00:13:15.000
この方法の本文では、オンボーディングが正常に完了したことを確認することができます。これは基本的に、参加者が途中でキャンセルしなかったということです。彼らは最後まで行き、正常に完了しました。

00:13:15.000 --> 00:13:20.000
その場合は、reload() を呼び出してフィードを更新できます。

00:13:20.000 --> 00:13:23.000
さて、私たちのオンボーディングカードが設定されています。

00:13:23.000 --> 00:13:29.000
参加者がオンボーディングを完了すると、OCKOutcomeを保存し、フィードをリロードします。

00:13:29.000 --> 00:13:31.000
これは良さそうですね！

00:13:31.000 --> 00:13:33.000
実際、それがすべてだと思います。実は。

00:13:33.000 --> 00:13:38.000
アプリを実行して、これがすべて機能することを確認しましょう。

00:13:38.000 --> 00:13:45.000
アプリの使用を開始する前に、同意を求められていることがわかります。

00:13:45.000 --> 00:13:47.000
そして、それはまさに私たちが望んでいることです!

00:13:47.000 --> 00:13:55.000
ここで[開始]ボタンをタップすると、少し前に作成したウェルカムステップで迎えられることがわかります。

00:13:55.000 --> 00:14:00.000
次のステップは、私たちが定義したボディアイテムの指示ステップです。

00:14:00.000 --> 00:14:04.000
私たちが選んだSFシンボルは、本当にそれを生き生きとさせます。

00:14:04.000 --> 00:14:11.000
次は署名ステップなので、ここを下にスクロールして署名します。

00:14:11.000 --> 00:14:15.000
...そして、承認ステップに進みます。

00:14:15.000 --> 00:14:17.000
まず、HealthKitを承認します。

00:14:17.000 --> 00:14:19.000
先に進んでそれを許可してください。

00:14:19.000 --> 00:14:24.000
次は通知、次にデバイスの動きです。

00:14:24.000 --> 00:14:32.000
最後のページは、私たちがすべて終わったことを知らせ、参加してくれたことへの感謝の完了ステップです。

00:14:32.000 --> 00:14:34.000
そして今、私たちはケアフィードに戻っています。

00:14:34.000 --> 00:14:39.000
これで終わったので、同意を完了するためのプロンプトはもう表示されないように注意してください。

00:14:39.000 --> 00:14:44.000
代わりに、これは私たちのアプリのすべての真のコンテンツが表示される場所です。

00:14:44.000 --> 00:14:49.000
私たちは次のセッションでそれにたどり着くつもりです。

00:14:49.000 --> 00:14:53.000
ねえSiri、ジェイミーにメッセージを送って、オンボーディングと同意が終わったと伝えてもらえますか？

00:14:53.000 --> 00:14:59.000
私たちのフレームワークの詳細については、researchandcare.orgをご覧ください。

00:14:59.000 --> 00:15:05.000
ソースコードを読んだり、貢献したりしたい場合は、両方のフレームワークがGitHubで入手できます。

00:15:05.000 --> 00:15:08.000
次のセッションにまた参加してください。

00:15:08.000 --> 00:15:12.000
ジェイミーにすぐに確認してから、パート2にまた合流します。

00:15:12.000 --> 00:15:14.000
また近いうちに会いましょう!

00:15:14.000 --> 23:59:59.000
♪

