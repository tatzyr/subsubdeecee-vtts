WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
エドワード:こんにちは、WWDCへようこそ!

00:00:12.000 --> 00:00:18.000
私はウォレットチームのエンジニアであるエドワードで、後で同僚のラスが加わります。

00:00:18.000 --> 00:00:23.000
私たちは今日ここにいて、WalletとApple Payの新機能についてお話しできることをとても楽しみにしています。

00:00:23.000 --> 00:00:26.000
今日は3つの主要な分野について話したいと思います。

00:00:26.000 --> 00:00:33.000
まず、ウォレットの最新情報を共有し、昨年のエキサイティングなロールアウトについてお話ししたいと思います。

00:00:33.000 --> 00:00:36.000
第二に、Apple Payに多くのエキサイティングなアップデートを行いました。

00:00:36.000 --> 00:00:41.000
また、いくつかの新機能を追加し、支払いをさらに使いやすくしました。

00:00:41.000 --> 00:00:46.000
第三に、私たちが行ったいくつかの新しいAPI強化をしたいと思います。

00:00:46.000 --> 00:00:50.000
では、ウォレットのアップデートから始めましょう。

00:00:50.000 --> 00:00:55.000
基調講演で聞いたことがあるかもしれませんが、私たちはApple WalletにIDカードを導入しています。

00:00:55.000 --> 00:01:02.000
米国では、いくつかの州で、運転免許証や州IDをスキャンしてセルフィーを撮ることができます。

00:01:02.000 --> 00:01:05.000
あなたのIDはセキュアエレメントによって保護されています。

00:01:05.000 --> 00:01:12.000
TSAは、デジタルIDを使用できる最初の場所として、空港のセキュリティチェックポイントを有効にするために取り組んでいます。

00:01:12.000 --> 00:01:18.000
これの詳細については、このセッションに関連するリンクを確認してください。

00:01:18.000 --> 00:01:27.000
また、iOS 15では、HomeKitに接続されたロックのサポートが追加されたので、ユーザーはタップしてホームキーパスでドアのロックを解除できるようになりました。

00:01:27.000 --> 00:01:32.000
パスの追加に関しては、多くのユーザーがウェブから直接インストールすることを知っています。

00:01:32.000 --> 00:01:39.000
たとえば、iOS 14では、映画のチケットを4枚追加したい場合は、個別に追加します。

00:01:39.000 --> 00:01:45.000
今年新しく、Safariからマルチパスダウンロードを追加しました。

00:01:45.000 --> 00:01:51.000
簡単な変更で、パスをバンドルして、ユーザーの体験をスムーズにすることができます。

00:01:51.000 --> 00:01:55.000
これを行うには、3つのことを行う必要があります。

00:01:55.000 --> 00:01:59.000
まず、PkPassファイルを一緒に圧縮します。

00:01:59.000 --> 00:02:03.000
次に、ファイル拡張子を.pkpassesに設定します。

00:02:03.000 --> 00:02:07.000
そして最後に、正しいマイムタイプを使用してください。

00:02:07.000 --> 00:02:14.000
これで、バンドル内のすべてのパスが1回のダウンロードでWalletによってダウンロードされ、処理されます。

00:02:14.000 --> 00:02:20.000
そして、これらすべてのパスでは、それらをすべて追跡するのが面倒な場合があります。

00:02:20.000 --> 00:02:28.000
また、多くの人が古いパスを削除するのが好きではなく、代わりに記念品として持っていることを好むことを知っていますが、それは財布を雑然とさせる可能性があります。

00:02:28.000 --> 00:02:37.000
iOS 15では、Walletは期限切れのパスを自動的に非表示にし、パスを整理して見つけやすくするようになりました。

00:02:37.000 --> 00:02:41.000
これを利用する方法の例をお見せしましょう。

00:02:41.000 --> 00:02:44.000
ここでは、サンプルパスからいくつかのJSONを参照してください。

00:02:44.000 --> 00:02:49.000
ウォレットは3つのフィールドを見て、パスを自動的に非表示にする必要があるかどうかを判断します。

00:02:49.000 --> 00:02:56.000
第一に、パスの有効期限は現在の日付より古いです。

00:02:56.000 --> 00:03:00.000
2、関連する日付は1日より古いです。

00:03:00.000 --> 00:03:04.000
または3つ、パスは無効になっています。

00:03:04.000 --> 00:03:11.000
ユーザーにとって素晴らしい体験を確実にするために、これらのフィールドがパスに正しく設定されていることを確認する必要があります。

00:03:11.000 --> 00:03:14.000
さて、Apple Payのアップデートについてお話ししましょう。

00:03:14.000 --> 00:03:21.000
Apple Payは、iPhone、iPad、Apple Watch、Macで支払いを行う最も簡単な方法であり続けています。

00:03:21.000 --> 00:03:25.000
これにより、ユーザーはアプリやウェブ上で支払いを行うことができます。

00:03:25.000 --> 00:03:32.000
Apple Payは、iMessageとビジネスチャット、および合理化された瞬間的な体験のためのApp Clipsでもサポートされています。

00:03:32.000 --> 00:03:36.000
世界中のApple Payの使用量は増加し続けています。

00:03:36.000 --> 00:03:46.000
今年はメキシコ、イスラエル、南アフリカでサポートを追加しました。つまり、Apple Payは現在、世界中の55の国と地域で利用可能です。

00:03:46.000 --> 00:03:50.000
より多くの場所でエクスプレス・トランジットのサポートを追加しました。

00:03:50.000 --> 00:03:55.000
また、ブラジルなどの場所では、クレジットカードとデビットカードの組み合わせのサポートも含まれています。

00:03:55.000 --> 00:04:02.000
さて、素晴らしい支払い体験を生み出すために、アプリやウェブサイトに加えることができるいくつかの変更をお見せしたいと思います。

00:04:02.000 --> 00:04:10.000
昨年、Apple PayでレンタルやApple Payでチャージするなど、より多くのボタンタイプのサポートを追加しました。

00:04:10.000 --> 00:04:15.000
今日はもう1つ紹介します：Apple Payを続けてください。

00:04:15.000 --> 00:04:20.000
他のボタンと一緒にカートでApple Payを提供する場合は、このボタンを使用する必要があります。

00:04:20.000 --> 00:04:23.000
アクションの呼び出しとしてContinueを使用できます。

00:04:23.000 --> 00:04:28.000
また、Apple Payボタンの新しいJavaScript実装も導入しています。

00:04:28.000 --> 00:04:31.000
この新しいボタンは、現在のすべてのボタンの種類とスタイルをサポートしています。

00:04:31.000 --> 00:04:36.000
実装が簡単で、サイトのデザインに合わせてカスタマイズできます。

00:04:36.000 --> 00:04:38.000
以下は実装の例です。

00:04:38.000 --> 00:04:42.000
ご覧のとおり、ボタンのサイズとスタイルは簡単に設定できます。

00:04:42.000 --> 00:04:46.000
スタイルには「apple-pay」という接頭辞が付いていることに注意してください。

00:04:46.000 --> 00:04:52.000
これの詳細については、Apple Developer Portalのドキュメントをご覧ください。

00:04:52.000 --> 00:04:58.000
次に、iPhoneとiPadのApple Payに加えた大きな変更をお見せしたいと思います。

00:04:58.000 --> 00:05:04.000
iOS 15では、まったく新しいApple Pay体験で支払いをさらに良くすることに興奮しています。

00:05:04.000 --> 00:05:09.000
まったく新しいデザインでSwiftUIでApple Payシートを一から再構築しました。

00:05:09.000 --> 00:05:15.000
それは素晴らしい新しい外観で、ユーザーにさらに明確でスムーズな支払い体験を提供します。

00:05:15.000 --> 00:05:19.000
また、コンバージョンを改善するためにいくつかの新機能を実装しました。

00:05:19.000 --> 00:05:26.000
Apple Payを初めて使用するユーザーのために、支払いシートからカードと住所を追加するフローを簡素化しました。

00:05:26.000 --> 00:05:31.000
既存のユーザーは、Apple Payエクスペリエンスを離れることなく、別のカードを追加できます。

00:05:31.000 --> 00:05:36.000
また、問題が発生したときにより明確にするために、エラー処理を再設計しました。

00:05:36.000 --> 00:05:42.000
ユーザーが新しい支払い方法の追加を完了すると、シームレスに取引を再開します。

00:05:42.000 --> 00:05:50.000
また、支払い項目、割引、小計など、より詳細な情報を表示する新しいサマリービューを追加しました。

00:05:50.000 --> 00:05:57.000
iOS 15の新機能では、サマリービューにアプリのアイコンも表示されます。

00:05:57.000 --> 00:06:03.000
ウェブでの支払いについては、支払いの概要ビューにウェブクリップアイコンが表示されています。

00:06:03.000 --> 00:06:09.000
Apple Payでは、これは以前はMacからハンドオフを使用して取引を完了する場合にのみ表示されていました。

00:06:09.000 --> 00:06:18.000
今、あなたのウェブサイトのアイコンは、支払いが正しい場所に行くことをユーザーに視覚的に安心させるために、Apple Payトランザクション内で表示できます。

00:06:18.000 --> 00:06:28.000
ウェブ上でApple Payを受け入れ、ウェブクリップのアイコンをまだ設定していない場合は、アイコンをユーザーに表示することを強くお勧めします。

00:06:28.000 --> 00:06:35.000
これを行うには、ルートドキュメントフォルダに表示されているサイズで2xと3xのアイコンを指定する必要があります。

00:06:35.000 --> 00:06:41.000
その後、Apple Payは自動的にこのアイコンを取得し、支払い要求とともに表示します。

00:06:41.000 --> 00:06:49.000
この実装に関する詳細情報は、Apple Developerサイトのヒューマンインターフェースガイドラインセクションに記載されています。

00:06:49.000 --> 00:06:57.000
アイコンサイズをテーマにしていますが、PKPassの新しいアイコンサイズの要件を思い出させてください。

00:06:57.000 --> 00:07:13.000
iOS 15の通知では、より大きなアイコンが表示されるようになったため、アイコンがぼやけることなく表示されるように、PKPassアイコンを1倍で最低38x38に更新する必要があります。

00:07:13.000 --> 00:07:18.000
また、トータルラインにより多くの柔軟性を導入できることを嬉しく思います。

00:07:18.000 --> 00:07:29.000
これにより、支払いが後で発生した場合に日付を追加できます。たとえば、予約注文を受ける場合や定期的な支払いの頻度を追加する場合などです。

00:07:29.000 --> 00:07:35.000
私たちが今観察した新機能の多くは、いくつかの簡単な変更でアプリに追加できます。

00:07:35.000 --> 00:07:40.000
それでは、iOS 15で導入するAPIの機能強化を詳しく見ていきます。

00:07:40.000 --> 00:07:43.000
出荷日の範囲のサポートを追加させていただきます。

00:07:43.000 --> 00:07:48.000
これで、Apple Pay内で関連する配送または集荷時間をユーザーに提示できます。

00:07:48.000 --> 00:07:54.000
これらは、店舗でのピックアップの推定出荷日または配達日または時間枠を設定するために使用できます。

00:07:54.000 --> 00:07:59.000
この追加情報は、メインのApple Payビューに表示されます。

00:07:59.000 --> 00:08:03.000
新しい出荷日APIには、カレンダーとタイムゾーンのサポートが組み込まれています。

00:08:03.000 --> 00:08:11.000
これにより、アプリでの出荷日や集荷時間の処理が簡単になり、関連情報がユーザーに明確に表示されます。

00:08:11.000 --> 00:08:15.000
次に、これがどのように機能するかを簡単にお見せします。

00:08:15.000 --> 00:08:21.000
私たちは、以前と同じPKShippingMethodを使用して通常の配送方法を定義することから始めます。

00:08:21.000 --> 00:08:23.000
次に、カレンダーを選択します。

00:08:23.000 --> 00:08:27.000
この例では、ユーザーの現在のカレンダーを使用します。

00:08:27.000 --> 00:08:34.000
私たちは今日を参考にして、この日から3日から7日の間に到着を推定します。

00:08:34.000 --> 00:08:39.000
次に、カレンダーを使用して日付範囲の開始日と終了日を決定します。

00:08:39.000 --> 00:08:46.000
最後に、日付を適切な日付コンポーネントに変換し、配送方法に追加します。

00:08:46.000 --> 00:08:54.000
単純な日付ではなく日付コンポーネントを使用しているため、iOSに組み込まれている豊富なカレンダーとタイムゾーンのサポートを利用できます。

00:08:54.000 --> 00:08:58.000
これにより、他の方法では不可能なユースケースが可能になります。

00:08:58.000 --> 00:09:05.000
たとえば、ユーザーの現在のタイムゾーンに関係なく、ピックアップ時間に正しいタイムゾーンを指定できます。

00:09:05.000 --> 00:09:15.000
このレベルの詳細により、特定のピックアップ時間を表示するなど、ユーザーに最も適した日付と時刻情報を表示することもできます。

00:09:15.000 --> 00:09:19.000
ウェブ上にApple Payに相当するJavaScriptを含めました。

00:09:19.000 --> 00:09:25.000
日付コンポーネントの範囲は、Swiftとは少し異なる方法で指定されていることがわかります。

00:09:25.000 --> 00:09:30.000
日付コンポーネントは、サポートされているピックアップタイプと組み合わせて使用できます。

00:09:30.000 --> 00:09:35.000
たとえば、アプリでピックアップ時間を表示できます。

00:09:35.000 --> 00:09:39.000
日付範囲に加えて、読み取り専用の配送先住所を宣言できるようになりました。

00:09:39.000 --> 00:09:44.000
これを使用して、特定のピックアップ場所をユーザーに通知できます。

00:09:44.000 --> 00:09:50.000
これを有効にするには、PKContactのインスタンスとして住所の詳細を入力する必要があります。

00:09:50.000 --> 00:09:59.000
この例では、必要なすべてのアドレスコンポーネントを設定できるように、郵便住所をCNMutablePostalAddressとして作成しました。

00:09:59.000 --> 00:10:03.000
配送先の連絡先を支払いリクエストに追加できるようになりました。

00:10:03.000 --> 00:10:08.000
最後に、編集モードを宣言し、必要な出荷フィールドを指定します。

00:10:08.000 --> 00:10:14.000
PKContactに含まれるアドレスフィールドは、読み取り専用としてユーザーに表示されます。

00:10:14.000 --> 00:10:21.000
この例では、ユーザーが編集できない集荷先住所を提供しました。

00:10:21.000 --> 00:10:25.000
そして、これはウェブ上のApple PayのJavaScriptに相当するものです。

00:10:25.000 --> 00:10:39.000
shippingContact辞書を設定し、shippingType、shippingContactEditingMode、およびrequiredShippingContactFieldsを設定し、JavaScript支払い要求の他のフィールドを含めます。

00:10:39.000 --> 00:10:46.000
詳細については、開発者ポータルのApple Payセクションにあるドキュメントをご覧ください。

00:10:46.000 --> 00:10:51.000
iOS 15のもう1つの素晴らしい新機能は、クーポンコードのサポートです。

00:10:51.000 --> 00:10:56.000
これで、ユーザーは支払いを開始すると、プロモーションコードを入力できます。

00:10:56.000 --> 00:11:04.000
これは、ユーザーが割引コードを適用するのを忘れた場合、Apple Payの取引をキャンセルする必要がないようにするためのものです。

00:11:04.000 --> 00:11:17.000
また、ユーザーが製品ページまたはショッピングカートからチェックアウトできるエクスプレス購入フローがありますが、クーポン入力フィールドはチェックアウト時にのみ表示されます。

00:11:17.000 --> 00:11:25.000
支払い要求を更新する方法を提供しているので、必要に応じて割引コードを検証したり、エラーメッセージを返すことができます。

00:11:25.000 --> 00:11:28.000
飛び込んでコードを見てみましょう。 

00:11:28.000 --> 00:11:35.000
クーポンコードがユーザーによって変更されるたびに更新を実行するデリゲートメソッドを使用して変更を加えることができます。

00:11:35.000 --> 00:11:41.000
たとえば、これを使用してコードを検証し、支払い合計を更新できます。

00:11:41.000 --> 00:11:47.000
また、この方法を使用して、カスタマイズされたエラーを返したり、支払いの概要アイテムと配送方法を更新したりすることもできます。

00:11:47.000 --> 00:11:53.000
ラスはまもなくこの例を詳しく紹介します。

00:11:53.000 --> 00:12:01.000
可能な限りコードを事前に入力し、無効なコードに関連するエラーメッセージを表示することをお勧めします。

00:12:01.000 --> 00:12:06.000
iOS 15用のこれらのエキサイティングなAPI機能強化を楽しんだことを願っています。

00:12:06.000 --> 00:12:13.000
理論的にこれについてすべて話したので、デモのためにラスにあなたを引き渡すので、これらすべての素晴らしい新機能を実装する方法を見ることができます。

00:12:13.000 --> 00:12:16.000
ラス・フェネンガ:ありがとう、エドワード。みなさん、こんにちは。

00:12:16.000 --> 00:12:19.000
私の名前はラスで、ウォレットチームのソフトウェアエンジニアです。

00:12:19.000 --> 00:12:28.000
そして、iOS 15で支払いシートに追加した素晴らしい新機能のいくつかと、それらをアプリに統合する方法をあなたに示すことができることに興奮しています。

00:12:28.000 --> 00:12:30.000
では、始めましょう!

00:12:30.000 --> 00:12:34.000
ここに私が計画しているフードフェスティバルのチケット購入アプリがあります。

00:12:34.000 --> 00:12:43.000
私のアプリは、Apple Payの支払いシートを利用するために、PKPaymentAuthorization ControllerDelegateの既存のプロトコル方法をすでに実装しています。

00:12:43.000 --> 00:12:49.000
iOS 15では、支払いシートは追加の作業なしで自動的に新しい外観に更新されます。

00:12:49.000 --> 00:12:58.000
iOS 15へのアップデートで、フェスティバルの参加者が最終的に複数の方法でチケットをリクエストできるようにしたいと決めました。

00:12:58.000 --> 00:13:04.000
これを行うには、複数の配送方法のサポートを追加する必要があるので、飛び込みましょう!

00:13:04.000 --> 00:13:12.000
PaymentHandlerクラスに向かい、PKPaymentRequestを構築し、複数のPKShippingMethodsのサポートを追加し始めます。

00:13:12.000 --> 00:13:22.000
最初に追加するのは、ユーザーが利用できるさまざまなオプションを表すPKShippingMethodsの配列を返すヘルパー関数です。

00:13:22.000 --> 00:13:30.000
私が作成した最初のPKShippingMethodは、標準的な配送方法であり、フェスティバルでチケットを受け取ることができることをユーザーに知らせます。

00:13:30.000 --> 00:13:36.000
iOS 15の新機能で、チケットが出荷されるまでにかかる推定範囲をユーザーに提供したい。

00:13:36.000 --> 00:13:44.000
これを行うには、日付とカレンダーオブジェクトを作成し、今から3〜5日後に出荷開始日と出荷終了日を定義します。

00:13:44.000 --> 00:13:50.000
その後、支払いシートでユーザーに表示する日付コンポーネントを指定できます。

00:13:50.000 --> 00:14:00.000
次に、PKShippingMethodを構築し、新しいプロパティdateComponentsRangeを設定し、2つの配送方法の配列を返します。

00:14:00.000 --> 00:14:10.000
最後に必要なのは、PKPaymentRequestに配送方法を設定することです。

00:14:10.000 --> 00:14:16.000
これらの簡単な変更で、私はアプリを構築し、支払いシートで新しい配送方法をチェックすることができます。

00:14:16.000 --> 00:14:20.000
配送方法を示す新しい行が支払いシートに自動的に追加されました。

00:14:20.000 --> 00:14:28.000
行をタップすると、日付範囲をサポートするものを含め、追加されたばかりの両方の配送方法が表示されます。

00:14:28.000 --> 00:14:38.000
また、今年のフェスティバルでは、すべての参加者にクーポンコードを送信し、アプリの支払いシートから直接引き換える機能を追加したいと決めました。

00:14:38.000 --> 00:14:41.000
これを行うには、私が行う必要がある2つの主な変更があります。

00:14:41.000 --> 00:14:45.000
コードに戻りましょう。

00:14:45.000 --> 00:14:48.000
1つ目は、PKPaymentRequestを構築するときです。

00:14:48.000 --> 00:14:54.000
trueに設定する必要がある新しいブール値、supportsCouponCodeがあります。

00:14:54.000 --> 00:15:04.000
また、PKPaymentRequestで設定して、すでに有効なクーポンコードの1つをクーポンフィールドに事前に入力できるように、新しいオプションのプロパティ、クーポンコードもあります。

00:15:04.000 --> 00:15:23.000
次に、PKPaymentAuthorization ControllerDelegateに準拠したクラス拡張機能にジャンプし、新しいプロトコルメソッドpaymentAuthorizationController didChangeCouponCodeを実装します。ここでは、要約アイテムの更新を処理し、クーポンコードが入力されたときにクーポンコードエントリに関連するエラーを表示できます。

00:15:23.000 --> 00:15:31.000
最初に必要なのは、有効なクーポンコードが入力された場合にPKPaymentSummaryItemsを更新するヘルパー機能です。

00:15:31.000 --> 00:15:36.000
私は、私たちの小計項目である最初の要約項目への参照をつかみます。

00:15:36.000 --> 00:15:42.000
そこから、ユーザーが適用された割引を確認できる新しいPKPaymentSummaryItemを作成します。

00:15:42.000 --> 00:15:49.000
次に、税金と合計の新しい要約項目を作成し、それらの配列を返します。

00:15:49.000 --> 00:15:57.000
割引アプリケーションロジックが書かれたので、クーポンコードの検証ロジックを書くことができます。

00:15:57.000 --> 00:16:08.000
最初に、ユーザーが入力したクーポンコードが空であるかどうかを確認し、空の場合は、変更されていない支払い要約項目で完了パスを呼び出すだけです。

00:16:08.000 --> 00:16:21.000
入力されたクーポンコードが有効なクーポンコードと一致する場合は、作成したばかりのapplyDiscount関数を使用して、更新された要約アイテムをCouponCodeUpdateオブジェクトに返します。

00:16:21.000 --> 00:16:27.000
アプリの場合、この時点でサーバーから有効なクーポンコードを取得する必要がある可能性が最も高いです。

00:16:27.000 --> 00:16:39.000
最後に、入力されたクーポンコードが無効な場合は、新しいPKPaymentRequestコンビニエンティニシャイザー、paymentCouponCodeInvalidErrorを使用し、支払いシートに直接表示する説明を入力します。

00:16:39.000 --> 00:16:47.000
また、期限切れのクーポンコードの2番目の便利な初期化子もあります：paymentCouponCodeExpired ErrorWithLocalizedDescription。

00:16:47.000 --> 00:16:54.000
次に、このエラーをクーポンコード更新初期化子と元のSummaryItemsに渡します。

00:16:54.000 --> 00:16:59.000
そのように、私はアプリ内にクーポンコードのサポートを追加しました。

00:16:59.000 --> 00:17:03.000
調べてみましょう。

00:17:03.000 --> 00:17:11.000
クーポンコードを入力するには、サマリービューをタップして、クーポンコードのテキストフィールドにクーポンコードを入力するだけです。

00:17:11.000 --> 00:17:17.000
最初に無効なクーポンコードFestを入力すると、入力したエラーメッセージがテキストフィールドのすぐ下に表示されます。

00:17:17.000 --> 00:17:26.000
有効なクーポンコード「FESTIVAL」を入力すると、支払いの概要項目がすぐに更新されます。

00:17:26.000 --> 00:17:36.000
その後、配送先と配送先住所を選択するだけで、支払いリクエストの準備が整いました。

00:17:36.000 --> 00:17:43.000
これらの簡単な変更により、Apple Payサンドボックス環境のデバイスで支払いシートの更新をテストする準備が整いました。

00:17:43.000 --> 00:17:45.000
さて、エドワードに戻ります。

00:17:45.000 --> 00:17:46.000
エドワード:ありがとう、ラス。

00:17:46.000 --> 00:17:54.000
ラスは、複数の配送方法、新しい日付範囲、クーポンコードAPIを実装するのがいかに簡単かを示しました。

00:17:54.000 --> 00:18:05.000
今年は、ホームキーパス、身分証明書、期限切れのパスの非表示、複数のパスの取り込みなど、ウォレットにいくつかのエキサイティングな新しいアップデートを提供しました。

00:18:05.000 --> 00:18:12.000
ウェブ上のApple Payの新しいJavaScript支払いボタンと、iOSの新しいApple Pay体験を導入しました。

00:18:12.000 --> 00:18:22.000
日付範囲と読み取り専用アドレスのサポート、クーポンコード、およびこれらを自分のアプリに実装する方法など、新しい出荷APIについて学びました。

00:18:22.000 --> 00:18:27.000
詳細については、開発者ポータルのApple Payセクションをご覧ください。

00:18:27.000 --> 00:18:33.000
これには、アプリやウェブサイトからの支払い要求をテストするためのApple Payサンドボックスが含まれます。

00:18:33.000 --> 00:18:35.000
ご覧いただきありがとうございます。

00:18:35.000 --> 23:59:59.000
♪

