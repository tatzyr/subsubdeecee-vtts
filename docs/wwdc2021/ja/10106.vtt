WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:25.000
ギャレット・デビッドソン：こんにちは、私は認証エクスペリエンスチームのエンジニアであるギャレットです。私たちが取り組んできたことを垣間見ることができることに非常に興奮しています。Appleがパスワードからの業界全体の移行をサポートするために取っている最初のステップです。

00:00:25.000 --> 00:00:31.000
今日アプリやウェブサイトにサインインするたびに、おそらくパスワードを入力しているでしょう。

00:00:31.000 --> 00:00:42.000
象徴的なユーザー名とパスワードフィールドのペアは、すぐに認識でき、本当に使いやすく、ほとんどの人はそれに遭遇したときに何をすべきかをすぐに知っています。

00:00:42.000 --> 00:00:57.000
しかし、開発者、ユーザー、および業界全体は、アカウントにサインインするために迅速に認証できるこの大きな利便性は、アカウントのセキュリティにコストがかかることを集合的に学びました。

00:00:57.000 --> 00:01:04.000
認証技術が長年にわたって進化するにつれて、業界が学んだ基本的な教訓がいくつかあります。

00:01:04.000 --> 00:01:10.000
まず、特にそれらの秘密が共有されている場合、秘密を保護することは困難です。

00:01:10.000 --> 00:01:22.000
今日のほとんどの認証は、アカウントの作成時にパスワードなどの秘密を共有し、すべての認証中にその秘密を再共有するユーザーとサーバーに依存しています。

00:01:22.000 --> 00:01:30.000
その秘密が共有されるたびに、意図した受信者以外の誰かがその秘密を知る危険性があります。

00:01:30.000 --> 00:01:38.000
偽のメールや電話、誤解を招くウェブサイトなどのフィッシングは、間違った当事者が秘密を知るための最も一般的な方法です。

00:01:38.000 --> 00:01:48.000
そして、パスワードのような秘密が出てきた場合、弱いパスワードを使用したり、複数のアカウントで同じパスワードを再利用したりすると、すぐに問題が悪化する可能性があります。

00:01:48.000 --> 00:02:01.000
実際、2020年のVerizon Data Breach Investigation Reportによると、ハッキング関連のデータ侵害の80%以上が、資格情報のブルートフォースや、紛失または盗難された資格情報の使用に関連していました。

00:02:01.000 --> 00:02:03.000
こうである必要はありません。 

00:02:03.000 --> 00:02:09.000
認証技術は、これらのリスクのいくつかを軽減するために進化し続けています。

00:02:09.000 --> 00:02:13.000
当初、パスワードは主に人々の頭の中に保存されていました。

00:02:13.000 --> 00:02:21.000
しかし、人々は一般的に、すべてのアカウントの強力でユニークなパスワードを思いつき、覚えておくのが得意ではないことがわかりました。

00:02:21.000 --> 00:02:29.000
パスワードマネージャーは、アカウントごとに強力で一意のパスワードを作成し、いくつかの形式のフィッシングの可能性についてのヒントを提供することができます。

00:02:29.000 --> 00:02:40.000
iCloudキーチェーンのパスワードマネージャーはAppleデバイスに組み込まれており、サードパーティが独自のパスワードマネージャーをシステムに統合するためのAPIを利用できるようにしました。

00:02:40.000 --> 00:02:54.000
サービス所有者は、パスワードとOTPなどの追加要素を要求するなど、ログインフローに追加の手順を追加することもできます。たとえば、SMSや生成されたワンタイム検証コードなどです。

00:02:54.000 --> 00:03:09.000
macOS MontereyとiOS 15には、iCloudキーチェーンパスワードマネージャーにコードジェネレータが組み込まれています。これは、チームメイトのErynの「iCloudキーチェーン検証コードによる安全なログイン」ビデオで詳しく知ることができます。

00:03:09.000 --> 00:03:19.000
一部のアプリやウェブサイトは、代わりに、Appleでサインインなどのフェデレーション認証を通じて認証を完全に第三者に外部委託することを選択します。

00:03:19.000 --> 00:03:27.000
フェデレーション認証により、信頼を少数の高度に保護されたアカウントに限定することができます。

00:03:27.000 --> 00:03:32.000
しかし、このビデオでは、非フェドレーション認証オプションに焦点を当てます。

00:03:32.000 --> 00:03:34.000
これらがどのように比較されるかについて話しましょう。

00:03:34.000 --> 00:03:43.000
それらはすべて非常に使いやすく、ほとんどのデバイスで動作し、多かれ少なかれ常にあなたと一緒にいます。

00:03:43.000 --> 00:03:46.000
しかし、セキュリティレベルはもっと良いかもしれません。

00:03:46.000 --> 00:03:52.000
覚えておくことができるパスワードは、おそらくすべてのアカウントで強力で一意ではありません。

00:03:52.000 --> 00:04:03.000
パスワードマネージャーは、強力でユニークなパスワードを作成するために使用できますが、パスワードを保護するために使用するパスワードと潜在的に追加の要因と同じくらい強力です。

00:04:03.000 --> 00:04:13.000
また、シングルユースコードも役立ちますが、まだ入力可能、フィッシング可能、共有秘密であるため、パスワードと同じ問題の多くが発生します。

00:04:13.000 --> 00:04:17.000
また、パスワードが頭の中にある場合は、パスワードを忘れることができます。

00:04:17.000 --> 00:04:24.000
これは、アプリやウェブサイトが別の回復フローを必要とすることを意味し、今日では通常、電子メールのリンクです。

00:04:24.000 --> 00:04:32.000
これにより、アカウント全体のセキュリティレベルを電子メールプロバイダーのセキュリティレベルに引き下げることができますが、これは一般的にあなたが制御するものではありません。

00:04:32.000 --> 00:04:39.000
一部のパスワードマネージャーと第2要素ソリューションは回復に役立ちますが、同様の問題に直面する傾向があります。

00:04:39.000 --> 00:04:44.000
記憶されたパスワードはまた、いかなる種類のフィッシング抵抗も提供しません。

00:04:44.000 --> 00:04:58.000
パスワードマネージャーは、合法に見えるフィッシングサイトでパスワードの入力を申し出ないなど、フィッシングに関するヒントを提供できますが、誰かが自分でパスワードを手動で入力してフィッシングされるのを防ぐことはできません。

00:04:58.000 --> 00:05:04.000
ワンタイムコードには同様の問題がありますが、導入できる最新の緩和策がいくつかあります。

00:05:04.000 --> 00:05:17.000
そして最後に、これらの方法はすべて、ユーザーとサーバーの間の共有秘密に依存しているため、その共有秘密の最も弱い保護よりも根本的に強くはありません。

00:05:17.000 --> 00:05:23.000
そのチャートを念頭に置いて、パスワードの問題に対する実際の解決策の特性について話しましょう。

00:05:23.000 --> 00:05:29.000
まず、パスワードの置き換えは設計上安全である必要があります。

00:05:29.000 --> 00:05:36.000
すべてのベストプラクティスに従えば、パスワードは合理的に安全です。

00:05:36.000 --> 00:05:42.000
しかし、経験は、それが誰にとっても常に行うのはかなり難しいことを示しています。

00:05:42.000 --> 00:05:48.000
パスワードの置き換えは、最初からそのセキュリティを構築する必要があります。

00:05:48.000 --> 00:05:51.000
しかし、私たちは使いやすさも後退したくありません。

00:05:51.000 --> 00:05:56.000
パスワードはとても使いやすいので、長い間私たちと一緒にいます。

00:05:56.000 --> 00:05:58.000
私たちはそれを失いたくない。

00:05:58.000 --> 00:06:04.000
簡単であることには、常に利用可能であり、どこでも使用可能であることが含まれます。

00:06:04.000 --> 00:06:11.000
今日、パスワードを知っているか、パスワードを検索できる限り、サインインしたいデバイスがそれをサポートしているとかなり想定できます。

00:06:11.000 --> 00:06:20.000
新しいデバイスでの認証に対する追加の摩擦は、すぐにサインインしたいだけの人々の養子縁組を傷つけるでしょう。

00:06:20.000 --> 00:06:27.000
そして最後に、回復は後付けとして追加されるものではなく、一流の機能であるべきです。

00:06:27.000 --> 00:06:40.000
人々は間違いを犯し、悪いことが起こり、パスワードの解決策は、全体的なセキュリティを損なうことなく人間が人間であることを扱うのに十分なフォールトトレラントでなければなりません。

00:06:40.000 --> 00:06:50.000
今日の最も強力なセキュリティオプションの1つは、特に高いセキュリティコンテキストで2番目の要因として一般的に使用されるセキュリティキー、ハードウェアドングルまたはフォブです。

00:06:50.000 --> 00:06:57.000
これらは、誰にでも開かれたWeb認証（またはWebAuthn）標準に基づいています。

00:06:57.000 --> 00:07:01.000
そして、それらのほとんどは、最初の学習曲線の後にかなり使いやすいです。

00:07:01.000 --> 00:07:05.000
そして、それらは単なるパスワードよりもはるかに安全です。

00:07:05.000 --> 00:07:10.000
この強みのほとんどはWebAuthnから来ていますが、これについてはもう少しお話しします。

00:07:10.000 --> 00:07:15.000
最新のウェブブラウザは、ほとんどの最新のデバイスでセキュリティキーもサポートしています。

00:07:15.000 --> 00:07:23.000
macOSとiOSのSafariは、しばらくの間、USB、NFC、およびLightningセキュリティキーをサポートしていました。

00:07:23.000 --> 00:07:31.000
ほとんどのセキュリティキーは複数の接続方法もサポートしているため、1つのハードウェアキーをさまざまなデバイスで使用できます。

00:07:31.000 --> 00:07:35.000
WebAuthnとパスワードを比較してみましょう。

00:07:35.000 --> 00:07:41.000
WebAuthnの最大の利点の1つは、共有秘密の代わりに公開鍵と秘密鍵のペアを使用することです。

00:07:41.000 --> 00:07:47.000
今日パスワードがどのように機能するかを調べる場合は、まずパスワードを入力します。

00:07:47.000 --> 00:07:57.000
その後、通常、ハッシュと塩漬けのようなものによって難読化され、結果の塩漬けハッシュがサーバーに送信されます。

00:07:57.000 --> 00:08:09.000
今、サーバーのコピーが難読化されているにもかかわらず、あなたとサーバーの両方が秘密のコピーを持っており、あなたは両方ともその秘密を保護する責任を等しく負っています。

00:08:09.000 --> 00:08:12.000
これは私たちが処分しているものです。

00:08:12.000 --> 00:08:18.000
公開鍵と秘密鍵のペアでは、パスワードの代わりに、デバイスは鍵のペアを作成します。

00:08:18.000 --> 00:08:23.000
これらのキーの1つは公開されています。ユーザー名と同じくらい公開されています。

00:08:23.000 --> 00:08:28.000
それは誰とでも共有でき、秘密ではありません。

00:08:28.000 --> 00:08:30.000
もう1つの鍵は非公開です。

00:08:30.000 --> 00:08:35.000
この秘密鍵は秘密であり、あなたのデバイスによって保護されています。

00:08:35.000 --> 00:08:40.000
あなたのデバイスは、サーバーでさえも、このキーを他の人と共有することはありません。

00:08:40.000 --> 00:08:47.000
アカウントを作成すると、デバイスはこれら2つの関連するキーを生成します。

00:08:47.000 --> 00:08:51.000
その後、公開鍵をサーバーと共有します。

00:08:51.000 --> 00:08:59.000
現在、サーバーには公開鍵のコピーがあり、公開情報であるため、パスワードと同じ保護要件はありません。

00:08:59.000 --> 00:09:07.000
秘密鍵はデバイスに残り、そのデバイスだけがそれを保護する責任があります。

00:09:07.000 --> 00:09:12.000
後で、サインインしたいときは、サーバーに秘密のものを送信しません。

00:09:12.000 --> 00:09:21.000
代わりに、デバイスがアカウントの公開鍵に関連付けられた秘密鍵を知っていることを証明することで、それがあなたのアカウントであることを証明します。

00:09:21.000 --> 00:09:24.000
その交換はこのように機能します。

00:09:24.000 --> 00:09:28.000
まず、自分のアカウントにサインインします。

00:09:28.000 --> 00:09:34.000
その後、ウェブサイトは私のデバイスに、それが実際に私のアカウントであることを証明するように求めます。

00:09:34.000 --> 00:09:45.000
これは、私の秘密鍵が何であるかを実際に言わずに、私のデバイスが私のアカウントの公開鍵に関連付けられた秘密鍵を持っていることを証明するために、私が「挑戦」と呼ばれるものを実行することによってこれを行います。

00:09:45.000 --> 00:09:50.000
これを行うには、サーバーはシングルユースチャレンジを送り返します。

00:09:50.000 --> 00:09:59.000
私のデバイスは秘密鍵を持っているので、その挑戦を取り、私の秘密鍵を使用して、挑戦の「署名」と呼ばれるものを行います。

00:09:59.000 --> 00:10:03.000
私のアカウントに有効な署名を作成できるのは秘密鍵だけです。

00:10:03.000 --> 00:10:06.000
その後、この署名はサーバーに送り返されます。

00:10:06.000 --> 00:10:13.000
サーバーはすでに私の公開鍵を持っているので、この署名をその公開鍵と照合することができます。

00:10:13.000 --> 00:10:19.000
私の公開鍵を持っている人は誰でも、署名がその鍵と一致するかどうかを簡単に確認できます。

00:10:19.000 --> 00:10:26.000
ただし、私だけが秘密鍵を持っているので、チャレンジの有効な署名を作成できるのは私だけです。

00:10:26.000 --> 00:10:35.000
したがって、私の秘密が何であるかを学ぶことなく、誰でも簡単に私の身元を確認することができます。

00:10:35.000 --> 00:10:43.000
そして最後に、署名が実際に私の公開鍵と一致すると仮定すると、サーバーは私がサインインしていることを示しています!

00:10:43.000 --> 00:10:46.000
私の秘密鍵が私のデバイスから離れたことがないことに注目してください。

00:10:46.000 --> 00:10:58.000
サーバーは、私の秘密（秘密鍵）が実際に何であるかを学ぶことなく、これが私のアカウントであることを確認することができました。

00:10:58.000 --> 00:11:14.000
公開鍵と秘密鍵のペアは、資格情報がデバイスによって作成および管理されることを意味し、秘密鍵はサーバーと共有されることはありません。これらの鍵は、推測可能、再利用、弱い、またはサーバーが侵害されることに対して脆弱になることはありません。

00:11:14.000 --> 00:11:21.000
WebAuthnはまた、人間ではなく、ブラウザとオペレーティングシステムに信頼を根付しています。

00:11:21.000 --> 00:11:34.000
このソフトウェアは、資格情報が作成されたウェブサイトやアプリでのみ使用可能であることを厳密に強制し、誰かが間違ったウェブサイトで認証を試みることさえ防ぎます。

00:11:34.000 --> 00:11:45.000
また、WebAuthnのすべての資格情報は公開鍵と秘密鍵のペアであるため、サーバーは認証機密を保持する責任を負いません。

00:11:45.000 --> 00:11:59.000
これは、秘密を安全に保つためのサーバー側の作業が少なくなり、攻撃者が盗むための認証秘密がないため、サーバーは攻撃者にとって価値の低いターゲットであることを意味します。

00:11:59.000 --> 00:12:05.000
セキュリティキーをそのチャートの他の項目と比較してみましょう。

00:12:05.000 --> 00:12:09.000
それらは最初の学習曲線の後にかなり使いやすいです。

00:12:09.000 --> 00:12:16.000
それらは、すべてのAppleデバイスと多くの最新の非Appleデバイスで動作します。

00:12:16.000 --> 00:12:19.000
しかし、彼らは必ずしもいつもあなたと一緒にいるとは限りません。

00:12:19.000 --> 00:12:24.000
常に追加のハードウェアを購入して持ち歩く必要があります。

00:12:24.000 --> 00:12:31.000
これは採用のための参入障壁になる可能性があり、パスワードと比較して使いやすさの一歩後退です。

00:12:31.000 --> 00:12:35.000
しかし、セキュリティレベルはとても良いです。

00:12:35.000 --> 00:12:48.000
セキュリティキーの資格情報は、複数のアカウント間で簡単に推測したり再利用したりしないことが保証され、OSレベルでフィッシング保護が組み込まれています。

00:12:48.000 --> 00:12:50.000
しかし、そのセキュリティには代償が伴います。

00:12:50.000 --> 00:13:00.000
資格情報が単一のセキュリティキーに関連付けられ、そのセキュリティキーが紛失、盗難、または破損した場合、それらの資格情報はすべてそうです。

00:13:00.000 --> 00:13:11.000
採用者は、追加のセキュリティキーを購入し、安全な場所に保管し、両方を同時に失わないことを期待するなど、バックアップシステムを用意する必要があります。

00:13:11.000 --> 00:13:21.000
しかし、WebAuthnのおかげで、彼らは非常に強力なフィッシング抵抗を提供し、サーバーに保存された秘密の必要性を排除します。

00:13:21.000 --> 00:13:28.000
iOS 14.5では、iOSのすべてのブラウザで動作するようにセキュリティキーのサポートを拡張しました。

00:13:28.000 --> 00:13:40.000
macOS MontereyとiOS 15の新機能では、macOSとiOSのすべてのアプリでセキュリティキーAPIを初めて利用できるようにしています。

00:13:40.000 --> 00:13:51.000
このAPIは、Web上のWebAuthn APIと同等のネイティブとして、AuthenticationServicesフレームワークのASAuthorization APIファミリーに追加されています。

00:13:51.000 --> 00:14:03.000
ASAuthorizationは、パスワード、Appleでサインイン、セキュリティキーなど、システムがサポートするあらゆるメカニズムでサインインするためのワンストップショップです。

00:14:03.000 --> 00:14:09.000
ただし、セキュリティキーなどの追加のハードウェアを持ち歩くことは、必ずしもすべての人に当てはまるとは限りません。

00:14:09.000 --> 00:14:23.000
このAPIは、ユーザーのユーザビリティのトレードオフが特別なセキュリティニーズを上回る、特に高セキュリティのコンテキストでのアプリに役立つと考えており、そのカテゴリに該当する場合は試してみることを楽しみにしています。

00:14:23.000 --> 00:14:30.000
さて、キーペアを使用したパスワードレス認証は、認証技術の次の大きなものです。

00:14:30.000 --> 00:14:40.000
この標準は、アカウントのセキュリティを推し進めることを目標に、プラットフォームベンダーとサービスオーナーの両方からの業界全体の共同作業でした。

00:14:40.000 --> 00:14:49.000
WebAuthnのサポートは、オペレーティングシステム、アプリプラットフォーム、ウェブブラウザ、ウェブサイト全体で増加しています。

00:14:49.000 --> 00:15:13.000
このビデオの残りの部分で私が話すこと、そしてここで紹介することに本当に興奮しているのは、ポストパスワードの世界へのAppleの貢献のプレビューです。すべてのiPhone、iPad、MacにWebAuthnのセキュリティを構築する新機能なので、パスワードの代替としてどこでも使用できます。

00:15:13.000 --> 00:15:17.000
それは「iCloudキーチェーンのパスワード」と呼ばれています。

00:15:17.000 --> 00:15:23.000
この新機能は、「パスワード」と呼ばれる新しいタイプの資格情報をiCloudキーチェーンに保存します。

00:15:23.000 --> 00:15:36.000
パスキーは、標準が提供する驚くべきセキュリティと、すべてのデバイスでバックアップ、同期、作業の使いやすさを組み合わせたWebAuthnの資格情報です。

00:15:36.000 --> 00:15:40.000
私たちはそれらをiCloudキーチェーンに保存しています。

00:15:40.000 --> 00:15:47.000
iCloudキーチェーンの他のすべてと同様に、それらはエンドツーエンドで暗号化されているため、Appleでさえそれらを読むことができません。

00:15:47.000 --> 00:15:50.000
あなたの秘密はあなたの秘密です。

00:15:50.000 --> 00:15:53.000
そして、それらはとても使いやすいです。

00:15:53.000 --> 00:15:58.000
ほとんどの場合、ワンタップまたはクリックするだけでサインインできます。

00:15:58.000 --> 00:16:09.000
また、WebAuthnとiCloudキーチェーンの統合セキュリティのおかげで、今日のほとんどのパスワードプラスセカンドファクタソリューションよりも強力です。

00:16:09.000 --> 00:16:21.000
また、ワンタップでサインインできるため、今日のほとんどすべての一般的な形式の認証よりも簡単で、速く、安全です。

00:16:21.000 --> 00:16:23.000
そのチャートに追加しましょう。

00:16:23.000 --> 00:16:29.000
先ほども言ったように、とても使いやすいです。通常、ワンタップまたはクリックするだけでサインインできます。

00:16:29.000 --> 00:16:35.000
macOS MontereyとiOS 15の一部としてリリースするものは、すべてのAppleデバイスで動作します。

00:16:35.000 --> 00:16:44.000
もちろん、すべての人のパスワードを置き換えるために、この技術は、iCloudキーチェーンをサポートしていないデバイスを含むすべてのデバイスで動作する必要があります。

00:16:44.000 --> 00:16:49.000
その機能はmacOS MontereyとiOS 15には存在しません。

00:16:49.000 --> 00:16:56.000
すべてのAppleデバイスに組み込まれているため、iPhone、iPad、またはMacが近くにあるときはいつでも利用できます。

00:16:56.000 --> 00:16:59.000
追加のハードウェアは必要ありません。

00:16:59.000 --> 00:17:06.000
これは、WebAuthn標準とiCloudキーチェーンの両方の一部であるすべての高度な保護に基づいて構築されています。

00:17:06.000 --> 00:17:13.000
また、iCloudキーチェーンでバックアップされているため、すべてのAppleデバイスを紛失しても、資格情報を取り戻すことができます。

00:17:13.000 --> 00:17:18.000
セキュリティキーと同じ強力なプラットフォーム提供のフィッシング耐性を持っています。

00:17:18.000 --> 00:17:31.000
また、公開鍵と秘密鍵のペアを使用しているため、サーバーが認証秘密を保存するビジネスから抜け出し、攻撃者にとって価値の低いターゲットにもなります。

00:17:31.000 --> 00:17:34.000
だから、これがその仕組みです。

00:17:34.000 --> 00:17:42.000
これは私たちのお気に入りの認証デモアプリであるシャイニーで、そのソースコードはこのビデオの関連リンクで見つけることができます。

00:17:42.000 --> 00:17:45.000
まず、アカウントを作成する必要があります。

00:17:45.000 --> 00:17:51.000
ユーザー名を入力し、[アカウントの作成]ボタンをタップします。

00:17:51.000 --> 00:17:58.000
次に、信頼できるシステムシートには、資格情報とそれを使用できる場所に関する情報が表示されます。

00:17:58.000 --> 00:18:03.000
続行、Face IDをタップして、完了です。

00:18:03.000 --> 00:18:14.000
私は本当にそれについて考える必要はありませんでしたが、私は今、私のiCloudキーチェーンに安全に保存されているこのアカウントの非常に強力な公開/秘密鍵の資格情報を持っています。

00:18:14.000 --> 00:18:19.000
このアプリに戻ってサインインしたいときは、同じように簡単です。 

00:18:19.000 --> 00:18:28.000
シートが出てくると、サインインしているアプリの名前やアカウントなど、非常に明確な質問をされます。

00:18:28.000 --> 00:18:34.000
それが私の望みなので、Continue、Face IDをタップして、完了です。

00:18:34.000 --> 00:18:35.000
それでおそれ！

00:18:35.000 --> 00:18:40.000
これは、人々がこれらの新しい資格情報を作成して使用するために必要なすべてです。

00:18:40.000 --> 00:18:57.000
また、システム管理の公開鍵と秘密鍵のペアであるため、再利用や推測はできず、アプリやウェブサイトの侵害に対して脆弱ではなく、非常に強力なフィッシング保護がオペレーティングシステムとブラウザに組み込まれています。

00:18:57.000 --> 00:19:01.000
ブラウザと言えば、これらの資格情報はウェブでも機能します。

00:19:01.000 --> 00:19:08.000
ここでは、WebAuthnを採用したシャイニーウェブサイトのホームページのSafariにいます。

00:19:08.000 --> 00:19:17.000
サインインボタンをタップすると、作成したばかりの資格情報、またはセキュリティキーを使用するオプションが表示されます。

00:19:17.000 --> 00:19:23.000
ここで「続ける」、Face IDをタップすると、アプリと同じようにサインインしています。

00:19:23.000 --> 00:19:27.000
これは、iOS上のすべてのウェブブラウザアプリでも機能します。

00:19:27.000 --> 00:19:29.000
そして、それはMacでも動作します!

00:19:29.000 --> 00:19:42.000
これらの資格情報はiCloudキーチェーンに保存されているため、すべてのデバイス間で同期され、あらゆる種類のMacアプリやSafariのウェブで動作します。

00:19:42.000 --> 00:19:46.000
では、実装を覗いてみましょう。

00:19:46.000 --> 00:19:56.000
まず、プラットフォームが提供する強力なフィッシング保護がアプリで動作するためには、デバイスはアプリとウェブサイトの間に強い関連性が必要です。

00:19:56.000 --> 00:20:02.000
これは、「webcredentials」アソシエーションタイプを使用して、関連付けられたドメインを通じて行われます。

00:20:02.000 --> 00:20:10.000
ここではあまり詳しく説明しませんが、数年前の「アプリのパスワード自動入力の紹介」ビデオを見て、もっと学ぶことができます。

00:20:10.000 --> 00:20:13.000
次に、アカウントの作成について話しましょう。

00:20:13.000 --> 00:20:16.000
ここのコードは実際にはかなり簡単です。

00:20:16.000 --> 00:20:18.000
それを分解しましょう。

00:20:18.000 --> 00:20:31.000
createAccount機能には、サーバーからフェッチされたシングルユースチャレンジ、アカウントのユーザー名、および通常、バックエンドのアカウントの識別子であるユーザーIDの3つの入力が必要です。

00:20:31.000 --> 00:20:36.000
まず、リクエストオブジェクトを作成するにはリクエストプロバイダーが必要です。

00:20:36.000 --> 00:20:41.000
relyingPartyIdentifierはWebAuthnの設定によって異なりますが、通常はドメイン名です。

00:20:41.000 --> 00:20:49.000
そのプロバイダを使用してregistrationRequestを作成し、リクエストを承認コントローラーに渡します。

00:20:49.000 --> 00:20:55.000
最後に、承認コントローラにデリゲートとpresentationContextProviderを設定し、リクエストを開始します。

00:20:55.000 --> 00:21:00.000
これにより、以前のシートがポップアップし、資格情報を作成するように求められます。

00:21:00.000 --> 00:21:07.000
トランザクションが終了すると、新しい資格情報の詳細が記載されたデリゲートコールバックが届きます。

00:21:07.000 --> 00:21:10.000
さて、サインインは非常によく似ています。

00:21:10.000 --> 00:21:12.000
ほんの少しのことを変える必要があります。

00:21:12.000 --> 00:21:21.000
registrationRequestを作成する代わりに、サインイン時に使用されるWebAuthn用語であるassertionRequestを作成します。

00:21:21.000 --> 00:21:25.000
assertionRequestにはチャレンジのみが必要です。

00:21:25.000 --> 00:21:27.000
そして、あなたが変える必要があるのはそれだけです。

00:21:27.000 --> 00:21:33.000
承認コントローラへのこのパラメータが配列であることを強調したいと思います。

00:21:33.000 --> 00:21:43.000
パスワードやAppleとのサインインなど、アプリがサポートするさまざまな認証メカニズムのリクエストのリストをここに渡すことができます。

00:21:43.000 --> 00:21:48.000
以前のシートには、現在利用可能な資格情報が入力されます。

00:21:48.000 --> 00:21:56.000
唯一の注意点は、公開鍵の登録要求を非登録オプションと混在させることはできないということです。

00:21:56.000 --> 00:22:02.000
さて、最後に、承認が完了したら、デリゲートオブジェクトへのコールバックについて話しましょう。

00:22:02.000 --> 00:22:07.000
クレデンシャルは、提供された承認オブジェクトのプロパティです。

00:22:07.000 --> 00:22:13.000
ユーザーが新しいプラットフォームクレデンシャルを登録した場合、プラットフォームクレデンシャル登録を受け取ります。

00:22:13.000 --> 00:22:21.000
既存のプラットフォームクレデンシャルでサインインした場合、プラットフォームクレデンシャルアサーションを受け取ります。

00:22:21.000 --> 00:22:28.000
または、彼らがあなたがサポートする何か他のものでサインインした場合は、ここでもそれを処理できます。

00:22:28.000 --> 00:22:39.000
いずれにせよ、ウェブと同じようにクレデンシャルオブジェクトから必要なプロパティを読み、それらの値をサーバーに送信し、それらを検証し、操作を完了する必要があります。

00:22:39.000 --> 00:22:41.000
そして、それが仕組みです。

00:22:41.000 --> 00:22:44.000
さて、もう少し詳しく説明したいだけです。

00:22:44.000 --> 00:22:51.000
パスワードからの移行には時間がかかり、詳細を正しく理解することが重要です。

00:22:51.000 --> 00:23:00.000
macOS MontereyとiOS 15では、iCloudキーチェーンのパスキーはテクノロジープレビューとしてリリースされ、デフォルトではオフになっています。

00:23:00.000 --> 00:23:05.000
iOSでは、設定アプリの開発者設定セクションに新しいスイッチがあります。

00:23:05.000 --> 00:23:11.000
これをオンにすると、これらの同期されたキーをアプリとウェブの両方で使用できます。

00:23:11.000 --> 00:23:15.000
そしてmacOSでは、スイッチはSafariの開発メニューにあります。

00:23:15.000 --> 00:23:20.000
まず、Safariの「詳細設定」で「開発」メニューをオンにする必要があります。

00:23:20.000 --> 00:23:25.000
この設定は、Safariの環境設定の「詳細」ペインの下部にあります。

00:23:25.000 --> 00:23:32.000
次に、開発メニューで同期プラットフォーム認証を有効にするオプションがあります。

00:23:32.000 --> 00:23:35.000
テストするときは、必ずこの機能をオンにしてください。

00:23:35.000 --> 00:23:42.000
macOS MontereyとiOS 15では、これらのパスキーはテスト用であり、本番アカウント用ではありません。

00:23:42.000 --> 00:23:50.000
このプレビューの重点は、iCloudキーチェーンでバックアップされたWebAuthnの実装である認証技術です。

00:23:50.000 --> 00:23:59.000
パスワードからの業界全体の移行には、このプレビューの一部ではない、思慮深く一貫して適用されたデザインパターンが必要になります。

00:23:59.000 --> 00:24:05.000
そして最後に、これはプレビューなので、オフにしたときに優雅に動作することを確認しました。

00:24:05.000 --> 00:24:16.000
プラットフォーム登録要求はエラーを返し、他のクレデンシャル要求タイプと混合した場合でも、スイッチがオフのときにプラットフォームアサーション要求は静かに無視されます。

00:24:16.000 --> 00:24:19.000
だから、次にできることは次のとおりです。

00:24:19.000 --> 00:24:25.000
公開鍵ベースのフィッシングに強い資格情報は、アカウント認証の次のフロンティアです。

00:24:25.000 --> 00:24:32.000
開発者ドキュメントと、このビデオからリンクされているサンプルコードをチェックして、始めるのを手伝ってください。

00:24:32.000 --> 00:24:42.000
また、まだお持ちでない場合は、サーバーにWebAuthnの実装を起動して、WebAuthnベースの資格情報の試しを開始できます。

00:24:42.000 --> 00:24:54.000
さて、私のお気に入りの部分：iCloudキーチェーンのパスキーのこのテクノロジープレビューを試して、ウェブサイトやアプリの既存のワークフローにどのように適合するかを確認してください。

00:24:54.000 --> 00:25:00.000
試してみる際に、開発者フォーラムとフィードバックアシスタントでご意見をお聞かせください。

00:25:00.000 --> 00:25:02.000
私たちは本当にあなたから話を聞きたいです。

00:25:02.000 --> 00:25:12.000
先に述べたように、これはパスワードを置き換えるための複数年にわたる取り組みの第一歩であり、皆さんが言わなければならないことに非常に興味があります。

00:25:12.000 --> 00:25:14.000
見てくれてありがとう!

00:25:14.000 --> 23:59:59.000
♪

