WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
Melissa Nierle:私はEnterprise and Education Technologiesチームのソフトウェアエンジニア、Melissa Nierleです。

00:00:14.000 --> 00:00:27.000
Appleでは、企業パートナーや教育機関がチームメンバーと学生をつなぐために必要なツールを提供するために、最高のデバイス管理機能と機能の作成に常に取り組んでいます。

00:00:27.000 --> 00:00:31.000
これらすべての管理機能のバックボーンは、MDMプロトコルそのものです。

00:00:31.000 --> 00:00:42.000
このプロトコルは、iOS、macOS、tvOS内で直接提供される定評のある、頻繁に使用されるソリューションであり、モバイルデバイス管理全体の標準となっています。

00:00:42.000 --> 00:00:55.000
また、毎年機能を追加する一方で、デバイス管理目標に対してプロトコルを継続的に評価し、MDMソリューション開発者、管理者、ユーザーの動的なニーズを満たすために進化させます。

00:00:55.000 --> 00:01:00.000
今日、私たちのMDMプロトコルは、命令的で反応的なプロトコルとして説明することができます。

00:01:00.000 --> 00:01:06.000
各管理ワークフローには、デバイスとサーバー間の時間と複数の往復がかかります。

00:01:06.000 --> 00:01:13.000
その後、組織全体で多数のデバイスを管理すると、パフォーマンスの課題が複雑になります。

00:01:13.000 --> 00:01:19.000
これは、プロトコルが可能な限り高性能でスケーラブルであることを確認したい場所の例です。

00:01:19.000 --> 00:01:26.000
そして、最適なパフォーマンスとスケーラビリティを実現するために、MDMプロトコル自体を再構想しました。

00:01:26.000 --> 00:01:36.000
デバイス管理の未来は宣言的な管理です。デバイスにポリシー管理をもたらすプロトコルの変革的なアップデートです。

00:01:36.000 --> 00:01:47.000
宣言的な管理により、デバイスは自律的かつプロアクティブになり、サーバーを軽量でリアクティブにし、絶え間ないポーリングなしで更新を購読することができます。

00:01:47.000 --> 00:01:55.000
自律デバイスは、独自の状態の変化に反応し、サーバーからプロンプトを表示せずに管理ロジックを自分自身に適用します。

00:01:55.000 --> 00:02:06.000
プロアクティブなデバイスには、重要な状態変更が発生したときにサーバーに非同期に報告するステータスチャネルがあり、サーバーがデバイスをポーリングする必要がなくなります。

00:02:06.000 --> 00:02:16.000
デバイスを自律的かつプロアクティブにすることは、宣言型管理の基盤であり、パフォーマンスとスケーラビリティの向上を可能にします。

00:02:16.000 --> 00:02:21.000
そして、最良の部分は、それは新しいパラダイムですが、新しいプロトコルではないということです。

00:02:21.000 --> 00:02:28.000
私たちは、iOSデバイスから始めて、この新しい宣言機能を既存のMDMプロトコルに組み込みました。

00:02:28.000 --> 00:02:33.000
新しい宣言的パラダイムを強化するデータモデルを深く掘り下げます。

00:02:33.000 --> 00:02:37.000
その後、MDMとの統合について話します。

00:02:37.000 --> 00:02:43.000
具体的な例を見て、始める方法を学びます。

00:02:43.000 --> 00:02:45.000
宣言型データモデルから始めましょう。

00:02:45.000 --> 00:02:48.000
宣言型データモデルには3つの柱があります。

00:02:48.000 --> 00:03:09.000
宣言は、サーバーが定義してデバイスに送信するペイロードです。ステータスチャネルは、デバイスが自分自身に関する新しい情報でサーバーを積極的に更新する新しい通信チャネルです。拡張性により、Appleが宣言管理に新機能を導入するにつれて、デバイスとサーバーはそれをシームレスに処理します。

00:03:09.000 --> 00:03:16.000
これら3つの柱を理解することで、宣言型管理をMDMソリューションに組み込む準備ができます。

00:03:16.000 --> 00:03:19.000
宣言から始めましょう。

00:03:19.000 --> 00:03:28.000
宣言は、アカウント、設定、制限など、組織がデバイスに強制したいポリシーを表します。

00:03:28.000 --> 00:03:36.000
宣言は、すべてのユーザーに共通するポリシーと、単一のユーザーまたはデバイスに固有のポリシーを作成できます。

00:03:36.000 --> 00:03:38.000
宣言の構成を調べてみましょう。

00:03:38.000 --> 00:03:47.000
宣言のデータ表現はプロファイルに似ており、宣言は一連のキーと値の標準型を持つ辞書でもあります。

00:03:47.000 --> 00:03:54.000
ただし、宣言は、plistではなく、ネットワーク経由で送信されるとJSONオブジェクトとしてシリアル化されます。

00:03:54.000 --> 00:04:00.000
すべての宣言には、Type、Identifier、ServerTokenの3つの必須プロパティがあります。

00:04:00.000 --> 00:04:05.000
タイプは、設定が表すポリシーを定義します。

00:04:05.000 --> 00:04:12.000
Identifierキーには、デバイスに送信されるすべての宣言のセット内の宣言を一意に識別する値があります。

00:04:12.000 --> 00:04:16.000
通常、これは文字列として表されるUUIDになります。

00:04:16.000 --> 00:04:21.000
デバイスは、宣言をサーバーと同期するときにこの値を使用します。

00:04:21.000 --> 00:04:27.000
ServerTokenキーは、識別子キーに基づく宣言の一意のリビジョンを表します。

00:04:27.000 --> 00:04:31.000
このキーは、宣言をサーバーと同期するときにも使用されます。

00:04:31.000 --> 00:04:35.000
値は、リビジョンごとに異なる必要がある文字列です。

00:04:35.000 --> 00:04:39.000
例に示すように、単純なカウンタまたはUUID文字列である可能性があります。

00:04:39.000 --> 00:04:46.000
ペイロードは、宣言型に関連するキーと値を含む、宣言のデータ固有の部分です。

00:04:46.000 --> 00:04:51.000
プロファイルペイロードと同様に、いくつかのキーが必要な場合があり、他のキーはオプションである場合があります。

00:04:51.000 --> 00:05:02.000
値は、文字列、数値、ブール値、配列、または辞書であり、数値1から10までのような範囲、または文字列列挙のような特定の値のセットに制限される可能性があります。

00:05:02.000 --> 00:05:08.000
宣言には、構成、資産、アクティベーション、管理の4種類があります。

00:05:08.000 --> 00:05:12.000
最初のタイプの宣言は設定です。

00:05:12.000 --> 00:05:20.000
構成は、アカウント、設定、制限など、デバイスに適用するポリシーを表します。

00:05:20.000 --> 00:05:25.000
構成は、MDMの既存のプロファイルペイロードに似ています。

00:05:25.000 --> 00:05:32.000
以下は、デバイスのパスコードに制限を適用する設定宣言の例です。

00:05:32.000 --> 00:05:39.000
すべての宣言に必要な標準キー（Type、Identifier、およびServerToken）が存在します。

00:05:39.000 --> 00:05:45.000
タイプの値は、これを宣言のパスコード設定タイプとして識別します。

00:05:45.000 --> 00:05:51.000
ペイロードキーには、設定のパスコードポリシーデータが含まれています。

00:05:51.000 --> 00:05:54.000
次のタイプの申告は資産です。

00:05:54.000 --> 00:05:58.000
アセットは、設定に必要な補助データへの参照を表します。

00:05:58.000 --> 00:06:02.000
これは、大きなデータの共有アイテムでも、パーソナライズされたアイテムでもかまいません。

00:06:02.000 --> 00:06:10.000
大規模なデータ項目の場合、資産宣言には、デバイスがサーバーから実際の資産データを取得するために使用するURLが含まれています。

00:06:10.000 --> 00:06:17.000
このサーバーは、MDMサーバーである可能性がありますし、別のコンテンツ配信ネットワークサーバーである可能性があります。

00:06:17.000 --> 00:06:26.000
別のコンテンツ配信ネットワークから資産を提供すると、大規模なネットワーク帯域幅をサポートする負担が、より適したサービスに移行します。

00:06:26.000 --> 00:06:34.000
アセットは、名前、メールアドレス、アカウントのパスワード、証明書など、ユーザーに固有のデータを表すためにも使用できます。

00:06:34.000 --> 00:06:41.000
これにより、ユーザーごとのカスタマイズされたデータが構成から削除され、より小さな専用のアセットタイプの宣言に移動します。

00:06:41.000 --> 00:06:45.000
資産は構成と1対多の関係があります。

00:06:45.000 --> 00:06:55.000
たとえば、1つのクレデンシャルアセットを複数のアカウント構成で参照できるため、各アカウント構成で同じユーザー情報を複製する必要がなくなります。

00:06:55.000 --> 00:07:01.000
次に、ユーザーの資格情報を更新する必要がある場合は、その資産のみを更新する必要があります。

00:07:01.000 --> 00:07:08.000
その資産を参照するすべての構成は変更されず、デバイスはそれに応じてポリシーを更新します。

00:07:08.000 --> 00:07:17.000
一度に多くの構成に対して、このような増分更新を行う機能により、デバイス管理システムの全体的な応答性が向上します。

00:07:17.000 --> 00:07:19.000
資産申告の構成を調べてみましょう。

00:07:19.000 --> 00:07:26.000
以下は、ユーザーIDを定義する資産宣言の例です。基本的にはユーザーの連絡先情報です。

00:07:26.000 --> 00:07:34.000
必要な3つの標準キーが存在し、Typeの値はこれをユーザーID資産宣言として定義します。

00:07:34.000 --> 00:07:38.000
ペイロードキーには、このアセットのユーザーIDプロパティが含まれています。

00:07:38.000 --> 00:07:41.000
次のタイプの宣言はアクティベーションです。

00:07:41.000 --> 00:07:46.000
アクティベーションは、デバイスが原子的に適用される一連の構成を表します。

00:07:46.000 --> 00:07:54.000
これは、セット内のすべての構成が、参照された資産とともに、それらすべてを適用するために有効でなければならないことを意味します。

00:07:54.000 --> 00:07:59.000
無効な場合、アクティベーションは関連するポリシーを適用できません。

00:07:59.000 --> 00:08:03.000
以下は、2つの設定を含む簡単なアクティベーションの例です。

00:08:03.000 --> 00:08:12.000
必要な3つの宣言キーが存在し、ペイロードにはアクティベーションによって原子的に適用される設定のセットが含まれています。

00:08:12.000 --> 00:08:15.000
設定は識別子キーによって参照されます。

00:08:15.000 --> 00:08:20.000
アクティベーションと構成の間には多対多の関係があります。

00:08:20.000 --> 00:08:29.000
アクティベーションは複数の構成を参照することができ、構成は複数のアクティベーションを参照することができます。

00:08:29.000 --> 00:08:36.000
この多対多の関係により、複雑なビジネスロジックをデバイスによって自律的に処理できます。

00:08:36.000 --> 00:08:44.000
アクティベーションには、デバイスでアクティベーション状態がアクティブまたは非アクティブであるかを決定する述語を含めることができます。

00:08:44.000 --> 00:08:51.000
デバイスは、述語がtrueと評価された場合にのみ、アクティベーションによって参照される構成を処理します。

00:08:51.000 --> 00:09:00.000
例として、述語は、特定のアクティベーションがiPadなどの特定のデバイスタイプでのみアクティブであることを宣言できます。

00:09:00.000 --> 00:09:06.000
もう1つの例は、一連のポリシーを特定のバージョンのOSにのみ適用したいことです。

00:09:06.000 --> 00:09:16.000
これにより、サーバーは任意のデバイス状態のすべての宣言を送信でき、デバイス自体がどれを適用するかを決定できるため、デバイスはさらに自律的になります。

00:09:16.000 --> 00:09:23.000
デバイスの状態が変わると、アクティベーション述語はサーバーからの介入なしに再評価されます。

00:09:23.000 --> 00:09:29.000
新しいデバイスの状態に関連するポリシーが適用され、古いポリシーは削除されます。

00:09:29.000 --> 00:09:33.000
ここのデバイスはますますプロアクティブになっています。

00:09:33.000 --> 00:09:41.000
述語がない場合、デバイスは常にアクティベーションによって参照される構成を処理します。

00:09:41.000 --> 00:09:53.000
ここでは、以前のアクティベーションの例がありますが、このアクティベーションにはデバイスがiPadの場合にのみポリシーが適用されるべきであることを示す述語があります。

00:09:53.000 --> 00:09:57.000
最後のタイプの宣言は、管理宣言です。

00:09:57.000 --> 00:10:03.000
管理宣言は、全体的な管理状態をデバイスに伝えるために使用されます。

00:10:03.000 --> 00:10:10.000
これには、組織の詳細を説明する宣言と、サーバーの機能を説明する宣言が含まれます。

00:10:10.000 --> 00:10:16.000
これらの宣言は、静的情報をデバイスに伝えるのに役立ちます。

00:10:16.000 --> 00:10:23.000
そして、これらはあなたのデバイスに組織ポリシーを適用するための4種類の宣言です。

00:10:23.000 --> 00:10:29.000
新しい宣言型管理データモデルの2番目の柱は、ステータスチャネルです。

00:10:29.000 --> 00:10:36.000
宣言の仕組みを考えると、デバイスの宣言された状態は、どの時点でもデバイスの実際の状態と一致しない場合があります。

00:10:36.000 --> 00:10:44.000
たとえば、ユーザーインタラクションを必要とする宣言は、そのアクションが実行されるまで適用されません。

00:10:44.000 --> 00:10:53.000
これの良い例は、ユーザーがデバイスの新しいポリシー準拠のパスコードを作成するためにアクションを取らなければならないパスコードポリシーです。

00:10:53.000 --> 00:10:59.000
このデバイス状態遷移に可視性を加えるために、ステータスチャネルを作成しました。

00:10:59.000 --> 00:11:04.000
デバイス状態の更新は、ステータスレポートでサーバーに送信されます。

00:11:04.000 --> 00:11:12.000
サーバーは特定のステータス項目を購読できるため、関心のある変更の更新のみを受信します。

00:11:12.000 --> 00:11:17.000
ステータス項目は、期間で区切られた文字列トークンで構成されるキーパスによって識別されます。

00:11:17.000 --> 00:11:26.000
ステータス項目は、以前のアクティベーション述語の例に示すように、アクティベーション述語の式として使用できます。

00:11:26.000 --> 00:11:33.000
サーバーは、ステータスサブスクリプション設定を使用して特定のステータス項目をサブスクライブします。

00:11:33.000 --> 00:11:44.000
この設定を受信すると、デバイスはサブスクライブされたステータスアイテムの初期ステータスレポートを送信し、サブスクライブされたアイテムが変更された場合はレポートを送信します。

00:11:44.000 --> 00:11:49.000
ステータスレポートは増分であるため、変更された項目のみが報告されます。

00:11:49.000 --> 00:11:58.000
宣言のステータスは、適用されるかどうかにかかわらず、サーバーがサブスクライブする必要なく、変更時に常にサーバーに報告されます。

00:11:58.000 --> 00:12:04.000
特定のステータス項目の更新を購読する設定を調べてみましょう。

00:12:04.000 --> 00:12:12.000
この設定は、デバイスのオペレーティングシステムのバージョン、タイプ、およびモデルを表す3つのステータス項目をサブスクライブします。

00:12:12.000 --> 00:12:20.000
この設定がデバイスで有効になると、新しく購読した各ステータスアイテムの初期ステータスレポートが送信されます。

00:12:20.000 --> 00:12:29.000
ステータス項目はJSONオブジェクトとして表され、対応するキーパスの階層コンポーネントによってネストされます。

00:12:29.000 --> 00:12:33.000
この場合、デバイスはiOS 14.5にあると報告しています。

00:12:33.000 --> 00:12:41.000
ユーザーがソフトウェアを最新のiOSバージョンにアップデートすると、デバイスはオペレーティングシステムのバージョン項目のステータス変更を報告します。

00:12:41.000 --> 00:12:48.000
サーバーは、デバイスがiOS 15にアップグレードされたことを検出するようになりました。

00:12:48.000 --> 00:12:53.000
宣言型データモデルの3番目の柱は拡張性です。

00:12:53.000 --> 00:13:06.000
Apple製品の長いライフサイクルを考えると、特にソフトウェアのアップデートや新しいハードウェアモデルがリリースされるにつれて、さまざまなバージョンのMDMソリューションとAppleデバイスとの互換性を維持することが不可欠です。

00:13:06.000 --> 00:13:13.000
宣言型管理により、デバイスとサーバーの両方がサポートされている機能を相互にアドバタイズするようになりました。

00:13:13.000 --> 00:13:21.000
それぞれが、ソフトウェアバージョンやハードウェアの依存関係をハードコードすることなく、いつ新機能を活用し始めることができるかを知っています。

00:13:21.000 --> 00:13:31.000
サーバーとクライアントの両方がアドバタイズする機能には、マイナーなプロトコルの更新と主要なプロトコルの更新の両方を表すサポートされている機能のリストが含まれています。

00:13:31.000 --> 00:13:40.000
クライアントはまた、クライアントがサポートする宣言とステータス項目の完全なセットを一覧表示する、サポートされているペイロードをアドバタイズします。

00:13:40.000 --> 00:13:45.000
サーバーの機能は、管理宣言を介してデバイスに送信されます。

00:13:45.000 --> 00:13:52.000
サーバーがアップグレードされると、他のタイプの宣言と同様に、すべての新機能をデバイスに同期します。

00:13:52.000 --> 00:13:57.000
このデバイスは、サーバーの新機能をすぐに活用できます。

00:13:57.000 --> 00:14:03.000
クライアントの機能は、機能が変更されるごとに特定のステータス項目としてサーバーに送信されます。

00:14:03.000 --> 00:14:10.000
このようにして、サーバーはすぐにデバイスの新機能とペイロードを利用し始めることができます。

00:14:10.000 --> 00:14:17.000
宣言型データモデルに拡張性を構築することで、宣言型管理が現在と未来のために構築されることを保証します。

00:14:17.000 --> 00:14:24.000
データモデルを理解したので、宣言型管理がMDMプロトコルにどのようにシームレスに統合されているかを掘り下げてみましょう。

00:14:24.000 --> 00:14:29.000
既存のMDMベンダーは、今日から宣言型管理機能を使用できます。

00:14:29.000 --> 00:14:42.000
宣言管理はMDMプロトコルに統合され、登録および登録解除プロセスの管理、およびHTTPトランスポートおよびデバイスおよびユーザー認証の処理に利用されます。

00:14:42.000 --> 00:14:52.000
既存および成熟したMDM製品は、新しいプロトコルまたはサーバーインフラストラクチャを採用するための破壊的な変更なしに、宣言型管理にスムーズに移行できます。

00:14:52.000 --> 00:15:01.000
宣言とステータスチャネルは、拡張可能な方法で、すでに使用中のMDMコマンドやプロファイルと共存しています。

00:15:01.000 --> 00:15:08.000
これにより、すべてのMDMワークフローを一度に更新することなく、宣言型管理のさまざまな機能を徐々に採用できます。

00:15:08.000 --> 00:15:20.000
たとえば、サーバーはステータスサブスクリプションのみを実装することを選択し、すべての宣言管理を採用することなく、MDMプロトコルにステータスチャネルを効果的に追加できます。

00:15:20.000 --> 00:15:27.000
デバイスがMDMから登録解除されると、すべての宣言が削除され、それに応じてデバイスの状態が調整されます。

00:15:27.000 --> 00:15:32.000
重要なことに、宣言型管理は既存のMDMの動作にまったく影響を与えません。

00:15:32.000 --> 00:15:44.000
実際、宣言管理は、アクティベーションのためのMDMコマンドと、同期とステータスレポートのためのMDMチェックイン要求を使用して、既存のMDMの動作を活用します。

00:15:44.000 --> 00:15:47.000
次に、これらのそれぞれにズームインしましょう。

00:15:47.000 --> 00:15:51.000
DeclarativeManagementコマンドがMDMに追加されました。

00:15:51.000 --> 00:15:54.000
このコマンドは2つの目的を果たします。

00:15:54.000 --> 00:15:58.000
まず、デバイスの宣言的な管理機能をアクティブにします。

00:15:58.000 --> 00:16:02.000
一度オンにすると、宣言型管理をオフにすることはできませんのでご注意ください。

00:16:02.000 --> 00:16:08.000
ただし、サーバーはすべての宣言を削除して、宣言管理を効果的に無効にすることができます。

00:16:08.000 --> 00:16:16.000
第二に、このコマンドには、必要に応じて同期フローを開始する同期トークンを含むペイロードを含めることができます。

00:16:16.000 --> 00:16:26.000
また、宣言を同期し、ステータスレポートをサーバーに送信するときにデバイスが使用する新しいDeclarativeManagement CheckInリクエストタイプもあります。

00:16:26.000 --> 00:16:30.000
新しいチェックインリクエストタイプの例を次に示します。

00:16:30.000 --> 00:16:34.000
MessageTypeキーは、新しいDeclarativeManagement値に設定されています。

00:16:34.000 --> 00:16:43.000
エンドポイントキーは、クライアントがサーバーから宣言マニフェストデータを取得する要求をしていることを示す値に設定されます。

00:16:43.000 --> 00:16:51.000
このステータスレポートなどの一部のリクエストには、Base64でエンコードされたデータを含めることもできます。

00:16:51.000 --> 00:16:57.000
チェックインリクエストを使用して宣言を同期すると、サーバーからの応答があります。

00:16:57.000 --> 00:17:10.000
応答には2つのタイプがあります。サーバーが定義するすべての宣言の識別子とサーバートークンのプロパティをリストするマニフェストと、デバイスが適用する単一の宣言です。

00:17:10.000 --> 00:17:22.000
宣言管理を有効にし、CheckInリクエストと宣言を同期する方法を学んだので、ポリシーをプロファイルから宣言に徐々に移行する方法について話しましょう。

00:17:22.000 --> 00:17:28.000
プロファイルを構成として送信およびインストールするための宣言タイプがあります。

00:17:28.000 --> 00:17:40.000
これにより、MDMプロファイルの完全なスイートを利用して、プロファイルベースのポリシーロジックをデバイスに移行することで、宣言型管理をすぐに活用できます。

00:17:40.000 --> 00:17:43.000
プロファイル設定の例を次に示します。

00:17:43.000 --> 00:17:46.000
プロファイルはURL経由で参照されます。

00:17:46.000 --> 00:17:53.000
この設定を有効にすると、プロファイルはURLから取得され、デバイスにインストールされます。

00:17:53.000 --> 00:18:00.000
私たちは、iOS 15ベータ版で宣言型管理を今日簡単に採用できるようにするために、これらの措置を講じました。

00:18:00.000 --> 00:18:05.000
では、宣言型管理がサーバーとどのようにやり取りするかの例を見てみましょう。

00:18:05.000 --> 00:18:09.000
まず、宣言型管理を活性化します。

00:18:09.000 --> 00:18:13.000
これは、すでにMDMに登録されているデバイスから始まります。

00:18:13.000 --> 00:18:16.000
サーバーはデバイスにプッシュ通知を送信します。

00:18:16.000 --> 00:18:23.000
デバイスは、ステータスをアイドルに設定したServerURLエンドポイント要求を送信することにより、通常の方法でプッシュに応答します。

00:18:23.000 --> 00:18:27.000
その後、サーバーはDeclarativeManagementコマンドで応答します。

00:18:27.000 --> 00:18:32.000
受領すると、デバイスは宣言的な管理をアクティブにします。

00:18:32.000 --> 00:18:39.000
DeclarativeManagementコマンドを処理した後、デバイスはAcknowledgedステータスをサーバーに送り返します。

00:18:39.000 --> 00:18:44.000
その後、サーバーにこれ以上のコマンドがない場合は、空の応答が返されます。

00:18:44.000 --> 00:18:51.000
その後、デバイスは宣言的な管理同期プロセスを開始します。次にそれを実行しましょう。

00:18:51.000 --> 00:18:57.000
デバイスはまず、エンドポイントキーを宣言項目に設定してチェックイン要求を送信します。

00:18:57.000 --> 00:19:03.000
サーバーは、宣言メタデータを含むマニフェストで応答します。

00:19:03.000 --> 00:19:10.000
次に、デバイスはマニフェスト内の項目を、以前にサーバーから受信した宣言のセットと比較します。

00:19:10.000 --> 00:19:18.000
この比較を通じて、デバイスはどの宣言が新しく、どの宣言が変更され、どの宣言が削除されたかを知ることができます。

00:19:18.000 --> 00:19:22.000
新規または変更された宣言ごとに、デバイスはチェックインリクエストを送信します。

00:19:22.000 --> 00:19:28.000
このリクエストのエンドポイントキーは、宣言リソースを一意に識別するパスに設定されています。

00:19:28.000 --> 00:19:34.000
次に、サーバーはその宣言を表すJSONオブジェクトで応答します。

00:19:34.000 --> 00:19:44.000
すべての宣言がサーバーからフェッチされると、デバイスはこの更新された宣言状態によって表されるポリシー変更の適用を開始します。

00:19:44.000 --> 00:19:52.000
ポリシーの変更が適用されると、デバイスは対応する更新されたステータス項目とともにステータスレポートをサーバーに送信します。

00:19:52.000 --> 00:19:58.000
始めるのを助けるために、iOS 15で出荷しているものを見てみましょう。

00:19:58.000 --> 00:20:04.000
宣言型管理機能は、iOS 15とiPadOS 15を搭載したデバイスでサポートされています。

00:20:04.000 --> 00:20:14.000
また、MDM登録タイプがユーザー登録である場合にのみ利用できます。iOS 15で導入された新しいオンボーディングフロー、またはiOS 13からのフローのいずれかです。

00:20:14.000 --> 00:20:22.000
設定については、MDMアカウントとパスコードプロファイルペイロードの同等のセットをカバーするアカウントとパスコードの設定があります。

00:20:22.000 --> 00:20:30.000
また、MDMでサポートされているプロファイルの完全なスイートをデバイスに宣言的にインストールし始めることを可能にするプロファイル構成もサポートしています。

00:20:30.000 --> 00:20:40.000
ステータスサブスクリプション構成も今日利用可能で、サーバーが受信したい特定のステータスアイテムの更新を宣言するために使用されます。

00:20:40.000 --> 00:20:43.000
今日利用可能なアクティベーションには1つのタイプがあります。

00:20:43.000 --> 00:20:52.000
この単純なアクティベーションは、アトミックに適用する必要がある構成のリストを定義し、オプションの述語を含めることができます。

00:20:52.000 --> 00:21:05.000
資産宣言には、ユーザーの連絡先情報を表すユーザーID資産と、ユーザーアカウントのユーザーIDとパスワードを含むユーザー資格情報資産の2種類があります。

00:21:05.000 --> 00:21:13.000
管理宣言については、組織の詳細とサーバー機能の2つのタイプをサポートしています。

00:21:13.000 --> 00:21:16.000
次に、今日利用可能なステータスアイテムは次のとおりです。

00:21:16.000 --> 00:21:22.000
各宣言には、デバイスから自動的にサーバーに送信される独自のステータス項目があります。

00:21:22.000 --> 00:21:31.000
また、デバイスのハードウェアモデルとそのオペレーティングシステムの詳細など、デバイスの基本的なプロパティをカバーする一連のステータス項目も利用できます。

00:21:31.000 --> 00:21:38.000
これらの宣言とステータス項目の詳細については、Appleのデバイス管理開発者ドキュメントをご覧ください。

00:21:38.000 --> 00:21:49.000
今日は、宣言管理とその機能の新しいパラダイムを取り上げ、宣言管理がどのようにデバイスをより自律的かつプロアクティブなものにするかを発見しました。

00:21:49.000 --> 00:21:53.000
宣言型管理をMDMソリューションに統合する方法を学びました。

00:21:53.000 --> 00:22:02.000
宣言型管理がどのように機能するかを示す例を見て、宣言型管理がどのように今日から使い始める準備ができているかを見直しました。

00:22:02.000 --> 00:22:08.000
宣言型管理でMDMソリューションを再発明する方法を見つけるのが待ちきれません。

00:22:08.000 --> 00:22:11.000
参加してくれてありがとう、素晴らしいWWDCをお過ごしください。

00:22:11.000 --> 23:59:59.000
♪

