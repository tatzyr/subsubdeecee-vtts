WEBVTT

00:00:00.000 --> 00:00:10.000
こんにちは。

00:00:10.000 --> 00:00:13.000
Xcode OrganizerでTestFlightのクラッシュをトリアージすることへようこそ。

00:00:13.000 --> 00:00:15.000
私の名前はマットで、Xcodeのエンジニアです。

00:00:15.000 --> 00:00:30.000
今日は、Xcodeオーガナイザーに組み込んだ新しいツールのいくつかを紹介します。これにより、アプリのすべてのターゲット間でクラッシュをトリアージし、TestFlightユーザーからのフィードバックを活用して、ビルドのクラッシュ修正をより迅速に行うことができます。

00:00:30.000 --> 00:00:36.000
次に、MetricKitで行った新しいTerminationsオーガナイザーと進歩を紹介します。

00:00:36.000 --> 00:00:43.000
アプリがTestFlightを利用してベータ版をテストしている場合、テスターからのクラッシュフィードバックが本当に貴重であることを知っているでしょう。

00:00:43.000 --> 00:00:52.000
テスターがクラッシュした後にフィードバックを書くと、App Store Connectでそのフィードバックを表示し、クラッシュログをダウンロードして、何が起こったのかの分析を開始できます。

00:00:52.000 --> 00:00:59.000
後で、このワークフローをスーパーチャージするXcodeで行った変更をお見せします。

00:00:59.000 --> 00:01:04.000
まず、Xcode 13の前に利用可能な機能の概要を簡単に説明したいと思います。

00:01:04.000 --> 00:01:10.000
Crashes Organizerでは、App StoreとTestFlightの両方のアプリのクラッシュをサポートしています。

00:01:10.000 --> 00:01:16.000
アプリクリップやアプリ拡張機能からのクラッシュなど、すべてのプラットフォームでアプリのクラッシュを表示します。

00:01:16.000 --> 00:01:26.000
オーガナイザーは、問題をランク付けして、最も優先度の高いクラッシュを表示し、それらのクラッシュがさまざまなデバイスやOSバージョンにどのように分散されているかを示します。

00:01:26.000 --> 00:01:32.000
そして、そのクラッシュを攻撃し始めることを決めたら、Xcodeプロジェクトで直接開くことができます。

00:01:32.000 --> 00:01:37.000
これらの優れた機能はすべて、開発者アカウントでXcodeにサインインするだけで、すぐに機能します。

00:01:37.000 --> 00:01:48.000
素晴らしいアプリを作る旅は、一度出荷すると、顧客は常にあなたが可能だとさえ知らなかった方法でそれを壊すように見えるので、時には長くてでこぼこになることがあります。

00:01:48.000 --> 00:01:56.000
Xcode 13では、クラッシュしないという目標に近づき続けることができるように、クラッシュオーガナイザーをさらに良くしたかったのです。

00:01:56.000 --> 00:02:07.000
これにより、クラッシュログの配信をほぼ瞬時に作成し、クラッシュに関するより豊富なデータを提供し、これらの再現が困難な問題を解決するのに役立つより多くのコンテキストを提供するという使命が設定されました。

00:02:07.000 --> 00:02:13.000
Crashes OrganizerのXcode 13に追加した素晴らしい新機能をすべてお見せできることを嬉しく思います。

00:02:13.000 --> 00:02:17.000
6つの大きな改善点をあなたと共有します。

00:02:17.000 --> 00:02:20.000
まず、TestFlightの迅速な配信がクラッシュします。

00:02:20.000 --> 00:02:27.000
テスターのいずれかがTestFlightビルドをクラッシュした場合、そのクラッシュを数分後にオーガナイザーに配信します。

00:02:27.000 --> 00:02:38.000
このクイッククラッシュ配信により、最終日からすべてのTestFlightクラッシュを表示できるようになり、選択したクラッシュがいつ発生したかを示す1時間ごとのグラフが表示されます。

00:02:38.000 --> 00:02:44.000
Xcode 13では、1年分のクラッシュ履歴を利用できるようにしています。

00:02:44.000 --> 00:02:50.000
タイム期間別にクラッシュをフィルタリングして、昨年発生したすべてのクラッシュを確認できるようになりました。

00:02:50.000 --> 00:02:59.000
1年分のクラッシュを表示できるため、検査官のグラフ領域に時間分布が表示され、月単位でクラッシュの有病率が表示されます。

00:02:59.000 --> 00:03:05.000
私たちは、アプリのすべての部分の健全性をよりよく理解するためのより多くのツールを提供したかったのです。

00:03:05.000 --> 00:03:13.000
そのため、今年はCrashes Organizerにフィルターを追加して、アプリの特定の部分に集中できるようにします。

00:03:13.000 --> 00:03:21.000
オーガナイザーは、すべてのバージョンとビルドでクラッシュリストをフィルタリングしたり、個々の過去のリリースにドリルダウンしたりすることもできます。

00:03:21.000 --> 00:03:28.000
また、時計アプリ、アプリクリップ、共有拡張機能など、アプリに同梱されている拡張機能のいずれかでフィルタリングすることもできます。

00:03:28.000 --> 00:03:34.000
iOSアプリがこれらの驚異的なAppleシリコンMacでどのように実行されているかを確認することもできます。

00:03:34.000 --> 00:03:45.000
アプリの問題のトリアージの一部は、誰が特定のクラッシュの影響を受け、そのクラッシュがさまざまなカテゴリに分散されているかの全体像を把握することです。

00:03:45.000 --> 00:03:54.000
そのため、今年は、ユニークなクラッシュがアプリのバージョンとTestFlightとApp Storeにどのように分散されているかを確認する機能を追加しました。

00:03:54.000 --> 00:04:01.000
皆さんは、ソロアーティストとして、大規模なチームで、そしてその間のすべてで、いくつかの素晴らしいアプリを出荷しました。

00:04:01.000 --> 00:04:09.000
Xcode 13では、オーガナイザーから直接クラッシュレポートを共有する機能を追加することで、互いに協力する新しい方法を導入しています。

00:04:09.000 --> 00:04:19.000
ツールバーの新しい共有ボタンを使用すると、クラッシュをチームのメンバーと直接共有したり、単にやることリストに追加したりできます。

00:04:19.000 --> 00:04:28.000
そして、これらのリンクの1つをクリックすると、オーガナイザーはダウンロードしてこの問題に焦点を当て、このクラッシュに焦点を合わせ、調査を開始することができます。

00:04:28.000 --> 00:04:37.000
TestFlightは、開発者が新しいクラッシュやバグを見つけるのに役立つテスターの手に新機能や修正を迅速に入手するための貴重なツールです。

00:04:37.000 --> 00:04:44.000
TestFlightでアプリをベータテストすることは、開発者がApp Storeに甘いアップデートを出荷するという自信を植え付けるのに役立ちます。

00:04:44.000 --> 00:04:54.000
Xcode 13で、TestFlightのクラッシュフィードバックをCrashes Organizerに直接持ち込むことを発表できることを非常に嬉しく思います。

00:04:54.000 --> 00:04:58.000
App Store Connectは、クラッシュフィードバックを含むすべてのTestFlightフィードバックを表示します。

00:04:58.000 --> 00:05:11.000
生のフィードバックとクラッシュログをApp Store Connectから直接ダウンロードし続けるか、今年の新しい「Xcodeで開く」ボタンを使用して、関連するクラッシュをオーガナイザーで開くことができます。

00:05:11.000 --> 00:05:14.000
クラッシュフィードバックの表示がこれまで以上に簡単になりました。

00:05:14.000 --> 00:05:19.000
クラッシュオーガナイザーには、TestFlightのクラッシュフィードバックに特化した新しい検査官がいます。

00:05:19.000 --> 00:05:26.000
このインスペクタを開くと、選択したクラッシュにヒットしたテスターから提出されたすべてのフィードバックが表示されます。

00:05:26.000 --> 00:05:36.000
これにより、クラッシュレポートと一緒に1つの統一されたフィードバックリストを表示し、クラッシュを修正するために必要な余分な情報をすばやくふるいにかけることができます。

00:05:36.000 --> 00:05:42.000
再現が困難な問題を追跡する際に、この追加されたコンテキストは非常に貴重であると考えています。

00:05:42.000 --> 00:05:44.000
だから、クールな新しいものがたくさんあります。

00:05:44.000 --> 00:05:50.000
飛び込んで、新しいクラッシュオーガナイザーでいくつかのクラッシュのトリアージを始めましょう。

00:05:50.000 --> 00:05:59.000
私はチームのアプリFrutaに取り組んでおり、最近App Storeに新しいバージョンを出荷しましたが、Xcode Cloudを使用してTestFlightに新しいバージョンを継続的に展開しています。

00:05:59.000 --> 00:06:06.000
今日は、アプリクリップに最近のクラッシュがあったかどうかを確認したいので、オーガナイザーを開いて何が起こっているのか見てみましょう。

00:06:06.000 --> 00:06:13.000
ウィンドウメニューバー項目を選択し、オーガナイザーを選択することでこれを行うことができます。

00:06:13.000 --> 00:06:20.000
左側のサイドバーから、Xcodeが私のiOSアプリFrutaのCrashes Organizerを開いたことがわかります。

00:06:20.000 --> 00:06:26.000
ウィンドウの上部にあるツールバーには、今年利用可能なすべての新しいフィルターオプションが表示されます。

00:06:26.000 --> 00:06:34.000
フィルターバーの下にはクラッシュリストがあり、過去2週間のすべてのクラッシュがすべてのバージョン、ビルド、製品に表示されています。

00:06:34.000 --> 00:06:39.000
このリストをすばやくスキャンすると、さまざまな種類の問題を見ることができます。

00:06:39.000 --> 00:06:47.000
リストのクラッシュには、アプリクリップ、ウォッチアプリ、またはアプリ拡張機能から来たかどうかを示すさまざまなバッジが表示されます。

00:06:47.000 --> 00:06:53.000
これにより、クラッシュが影響しているアプリのどの領域かをすばやく特定できます。

00:06:53.000 --> 00:06:56.000
クラッシュリストの右側に、ログビューが見えます。

00:06:56.000 --> 00:07:02.000
これは、私がクラッシュリストで選択したクラッシュのフレンドリーで簡略化されたビューを示しています。

00:07:02.000 --> 00:07:10.000
そして最後に、ログビューの右側にインスペクタが表示され、選択したクラッシュに関するあらゆる種類の興味深い情報が表示されます。

00:07:10.000 --> 00:07:16.000
オーガナイザーに精通したので、App Clipの最近の問題をすべて見てみたいと思う。

00:07:16.000 --> 00:07:25.000
時計アプリ、アプリクリップ、アプリ拡張機能など、私のアプリに同梱されているすべての製品を一覧表示する製品フィルターをツールバーで開くことができます。

00:07:25.000 --> 00:07:29.000
先に進んで、ここでアプリクリップを選択します。

00:07:29.000 --> 00:07:36.000
アプリクリップを選択すると、クラッシュリストがフィルタリングされ、過去2週間のアプリクリップのクラッシュのみが表示されました。

00:07:36.000 --> 00:07:39.000
ここのリストの最初のクラッシュは、私たちのトップクラッシュです。

00:07:39.000 --> 00:07:47.000
タイトルの下に、主催者は、このクラッシュが過去2週間で21台、最終日に7台に影響を与えていることを知らせています。

00:07:47.000 --> 00:07:55.000
さて、コードを掘り下げ始める前に、私の調査を導き、いくつかの文脈の手がかりに導くのに役立ついくつかの質問を自問したいと思います。

00:07:55.000 --> 00:07:58.000
まず、これはどのくらいの期間問題になっていますか?

00:07:58.000 --> 00:08:11.000
ウィンドウの右側にあるインスペクタのグラフ領域に向かうと、グラフの凡例から、このクラッシュがバージョン2.0で最初に登場し、最新のTestFlightビルド2.0.1に影響していることがわかります。

00:08:11.000 --> 00:08:15.000
次の質問、これは私のプロダクションアプリに影響しますか、それともTestFlightだけですか？

00:08:15.000 --> 00:08:21.000
フィルターをリリースに変更して、これがTestFlightとApp Storeの両方のビルドに影響していることがわかります。

00:08:21.000 --> 00:08:30.000
したがって、この問題は非常に重要であり、お客様はそれを経験しており、最新のApp Storeリリースで退行した可能性があるようです。

00:08:30.000 --> 00:08:33.000
では、ログビューに焦点を当てましょう。

00:08:33.000 --> 00:08:38.000
ログビューは、クラッシュした正確なフレームを便利に強調表示しています。

00:08:38.000 --> 00:08:46.000
また、バックトレースの上のスレッド番号、スレッド番号6を見ることで、これがバックグラウンドスレッドで起こったことも知っています。

00:08:46.000 --> 00:08:55.000
お気に入りを同期している間にこれがクラッシュしているのがわかりますが、私があまりにも頻繁に作業するコードの領域ではないので、これを再現する方法がよくわかりません。

00:08:55.000 --> 00:09:03.000
このクラッシュについてより多くの洞察を与えてくれる、自分自身に尋ねる質問がもっと思い浮かばないので、より多くの文脈を得ることが本当に役立つでしょう。

00:09:03.000 --> 00:09:12.000
幸いなことに、リストのこのクラッシュの横にフィードバックアイコンがあるので、テスターの1人がこのクラッシュを経験し、フィードバックを提出したことを知っています。

00:09:12.000 --> 00:09:17.000
これは、私がこのクラッシュに取り組み始めるために必要な文脈の欠けている部分かもしれません。

00:09:17.000 --> 00:09:24.000
インスペクターエリアに向かい、新しいフィードバックインスペクターを開くことで、彼らのフィードバックを見ることができます。

00:09:24.000 --> 00:09:30.000
私はちょうど1分前にそれを見た人を含め、いくつかのテスターがこの同じクラッシュを打ったことがわかります。

00:09:30.000 --> 00:09:37.000
検査官では、各フィードバックレポートのプレビューを見ることができ、1つをクリックすると、ポップオーバーで詳細を見ることができます。

00:09:37.000 --> 00:09:51.000
この最新のフィードバックをクリックすると、ポップオーバーが開き、インストールした正確なバージョンとビルド、デバイスモデル、バッテリーレベル、利用可能なディスク容量など、このテスターのクラッシュの豊富なコンテキストがすべて表示されます。

00:09:51.000 --> 00:09:54.000
これらはすべて、クラッシュを診断する際に役立つ手がかりになります。

00:09:54.000 --> 00:10:01.000
この場合、テスターがセルラーにいたのがわかりますが、彼らのコメントには「トンネルを通り抜けていて、お気に入りのボタンを押しました。

00:10:01.000 --> 00:10:03.000
数秒後、それは墜落した。

00:10:03.000 --> 00:10:09.000
うーん。もし彼らがトンネルを通過していたら、ネットワーク接続が悪かったかもしれません。

00:10:09.000 --> 00:10:16.000
これで、すべての手がかりを組み合わせて、お気に入りのボタンを押すと、最終的にクラッシュするバックグラウンドタスクがトリガーされることを知ることができます。

00:10:16.000 --> 00:10:19.000
コードに飛び込み始めるには十分だと思います。

00:10:19.000 --> 00:10:27.000
プロジェクトで開くボタンを使用して、このクラッシュをFruta Xcodeプロジェクトで直接開きます。

00:10:27.000 --> 00:10:37.000
さて、Xcodeが開き、左側のデバッグナビゲーターにバックトレースが表示され、ソースファイルとクラッシュコードの正確な行がハイライトされたエディタが表示されています。

00:10:37.000 --> 00:10:40.000
では、なぜこのコードがクラッシュするのですか?

00:10:40.000 --> 00:10:45.000
さて、私たちは致命的なエラーでわざとクラッシュしているようですが、これは興味深い選択です。

00:10:45.000 --> 00:10:51.000
syncFavorites関数を簡単に通過して、何をしようとしているのかを理解しましょう。

00:10:51.000 --> 00:10:55.000
まず、背景スレッドにジャンプします。

00:10:55.000 --> 00:10:59.000
次に、このスムージーをお気に入りのディスクとして保存しているようです。

00:10:59.000 --> 00:11:05.000
次に、バックエンドを更新し、ディスパッチグループを使用してこれらの操作を同期しています。

00:11:05.000 --> 00:11:11.000
その後、10秒のタイムアウトでこれらの操作を待ち、時間がかかる場合はクラッシュします。

00:11:11.000 --> 00:11:13.000
これはかなり不公平です。

00:11:13.000 --> 00:11:18.000
私たちのテスターのフィードバックを思い出して、彼らがスムージーをお気に入りにしたとき、彼らはトンネルを通過していたと言いました。

00:11:18.000 --> 00:11:28.000
彼らがトンネルを通過していた場合、おそらくネットワーク接続の質が悪かったため、バックエンドとの同期には間違いなく10秒以上かかる可能性があります。

00:11:28.000 --> 00:11:30.000
このクラッシュは今、完全に理にかなっています。

00:11:30.000 --> 00:11:36.000
タイムアウトが短すぎて適切に処理されていないことがわかったので、これを修正しましょう。

00:11:36.000 --> 00:11:46.000
最近コンバインスキルを練習しているので、コンバインを使ってこれを修正したいと思います。

00:11:46.000 --> 00:11:47.000
すごい。

00:11:47.000 --> 00:11:56.000
だから今、私たちは2つのパブリッシャーの結果をマージしており、タイムアウト（現在は30秒）になると、クラッシュではなく完了ハンドラーを呼び出します。

00:11:56.000 --> 00:11:58.000
問題は解決しました。

00:11:58.000 --> 00:12:01.000
主催者に戻って、この問題を解決済みとしてマークしましょう。

00:12:01.000 --> 00:12:07.000
ああ、私の上司がちょうど私にメールを送ったようです。

00:12:07.000 --> 00:12:11.000
ああ、クレイグはデモでクラッシュした。

00:12:11.000 --> 00:12:18.000
ありがたいことに、私の上司はオーガナイザーの新しい共有機能を使用して、クレイグがヒットした正確なクラッシュを私に送ったので、私はそれを掘り下げる必要はありません。

00:12:18.000 --> 00:12:26.000
このリンクをクリックすると、オーガナイザーは、そのリンクに埋め込まれた単一のクラッシュのフォーカスされたビューを作成します。

00:12:26.000 --> 00:12:28.000
私は実際に以前にこのクラッシュを見たことがあります。

00:12:28.000 --> 00:12:31.000
先日これを修正し、解決済みとしてマークしました。

00:12:31.000 --> 00:12:36.000
私はまた、根本的な問題を思い出すことができるように、クラッシュに親しみやすい名前を付けました。

00:12:36.000 --> 00:12:45.000
私は先に進んで、私がすでにこれを修正したことを上司に知らせます。

00:12:45.000 --> 00:12:59.000
そこで、オーガナイザーの新しいフィルターを使用してApp Clipのクラッシュをトリアージする方法、インスペクタで新しい分布グラフを使用する方法、TestFlightのフィードバックを使用して、そうでなければ再現するのが難しかった問題を解決する方法を見てきました。

00:12:59.000 --> 00:13:04.000
それでは、新しいTerminations OrganizerとMetricKitの改良点を見てみましょう。

00:13:04.000 --> 00:13:10.000
新しい終了オーガナイザーは、顧客に影響を与える可能性のあるアプリの終了の傾向を示しています。

00:13:10.000 --> 00:13:19.000
Crashes Organizerで表示されるクラッシュは、プログラミングの失敗の結果ですが、アプリのプロセスを終了する方法は他にもあります。

00:13:19.000 --> 00:13:26.000
終了は、「起動時にタイムアウト」や「システムメモリ制限を打つ」などの理由で分類されます。

00:13:26.000 --> 00:13:33.000
アプリの終了イベントのこれらのカテゴリを以前のバージョンと比較して、回帰を見つけることができます。

00:13:33.000 --> 00:13:40.000
これらの終了の一部はバックグラウンドで発生しますが、場合によっては、アプリが画面上にある間に発生する可能性があります。

00:13:40.000 --> 00:13:45.000
終了オーガナイザーは、あなたがそれらを修正する計画を立てることができるように、違いを理解するのに役立ちます。

00:13:45.000 --> 00:13:56.000
回帰に飛び込みたい場合は、今年のアプリケーションパフォーマンスサバイバルガイドセッションをチェックし、終了の詳細については、セッションをチェックすることをお勧めします。なぜ私のアプリが殺されるのですか?2020年から。

00:13:56.000 --> 00:14:02.000
よく知らない場合は、AppleフレームワークMetricKitを使用して、コードのクラッシュログを収集できます。

00:14:02.000 --> 00:14:15.000
あなたがする必要があるのは、MetricKitをインポートし、MetricKitマネージャーのリスニングを開始し、MetricKit診断ペイロードが受信されたときにcrashDiagnosticsプロパティを使用することだけです。

00:14:15.000 --> 00:14:26.000
今年の新機能、クラッシュ診断は集約されなくなり、毎日1回配信されませんが、アプリの次の起動時に配信されるため、クラッシュログにすばやくアクセスできます。

00:14:26.000 --> 00:14:29.000
また、MetricKitがmacOSをサポートするようになったことを発表できることを嬉しく思います。

00:14:29.000 --> 00:14:36.000
MetricKitの使用の詳細については、2020年からのMetricKitの新機能のセッションをお勧めします。

00:14:36.000 --> 00:14:40.000
クラッシュを追跡して表示する方法は他にもたくさんあります。

00:14:40.000 --> 00:14:47.000
デバイスウィンドウから、またはデバイスから直接ログを共有することで、接続されたデバイスのクラッシュにアクセスできます。

00:14:47.000 --> 00:14:55.000
XCTestは、テストの実行中に発生したクラッシュを収集し、コンソールアプリを使用してMacとシミュレーターからクラッシュを表示できます。

00:14:55.000 --> 00:15:01.000
これらの追加ツールの詳細については、2018年の「クラッシュとクラッシュログを理解する」セッションをご覧ください。

00:15:01.000 --> 00:15:04.000
今日、私たちはいくつかの素晴らしい新機能を見ました。

00:15:04.000 --> 00:15:17.000
新しいスピーディーなクラッシュログ配信、TestFlightフィードバック統合、および配布メトリクスが、エクスペリエンスの修正クラッシュを劇的に改善し、最終的にアプリの健全性とユーザーエクスペリエンスを向上させることを願っています。

00:15:17.000 --> 00:15:19.000
ご覧いただきありがとうございます。

00:15:19.000 --> 00:15:23.000
そして、成功への道は常に建設中であることを覚えておいてください。

00:15:23.000 --> 23:59:59.000
[パーカッシブミュージック]。

