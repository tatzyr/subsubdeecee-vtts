WEBVTT

00:00:02.000 --> 00:00:11.000
こんにちは、私はラスティです。

00:00:11.000 --> 00:00:19.000
私はCloudKitチームのエンジニアであり、新しいCloudKit開発者ツールと新しいCloudKitスキーマ言語を紹介することに興奮しています。

00:00:19.000 --> 00:00:26.000
このセッションでは、クラウドと統合するアプリケーションにとって統合テストが難しい理由について説明します。

00:00:26.000 --> 00:00:30.000
次に、CloudKit用の新しいコマンドライン開発者ツールであるcktoolを実演します。

00:00:30.000 --> 00:00:35.000
cktoolをXcode内で使用してテスト設定を自動化する方法がわかります。

00:00:35.000 --> 00:00:38.000
CloudKitの新しい宣言型スキーマ言語について学びます。

00:00:38.000 --> 00:00:40.000
そして、次のステップで物事をまとめます。

00:00:40.000 --> 00:00:43.000
始めましょう。

00:00:43.000 --> 00:00:50.000
クラウドサービスに依存するアプリケーションを作成する場合、アプリケーションと依存するサービスの間に明示的な契約があります。

00:00:50.000 --> 00:00:58.000
統合テストは、これらのサービスとどのようにやり取りするかを検証するのに役立ちますが、これらの統合テストのセットアップを適切に自動化することは、いくつかの理由で難しい場合があります。

00:00:58.000 --> 00:01:03.000
まず、アプリが使用しているデータモデルでサーバーを最新の状態に保つことは必ずしも容易ではありません。

00:01:03.000 --> 00:01:11.000
アプリの開発中にスキーマを反復する際には、サーバー上のスキーマが、テストの実行時にアプリが使用しているスキーマと正確に一致することが重要です。

00:01:11.000 --> 00:01:21.000
また、テストがテストの一部としてそのデータを変更する場合、テストが実行されるたびにクラウド内の一貫したサンプルデータセットに対してテストが実行されていることを確認するのは難しい場合があります。

00:01:21.000 --> 00:01:24.000
CloudKitチームは、このすべてをあなたのために簡単にしました。

00:01:24.000 --> 00:01:41.000
先ほど導入した新しいCloudKitスキーマ言語を使用すると、アプリケーションコードのすぐ横にあるファイルにCloudKitスキーマを宣言し、それをバージョン管理にチェックインして、プロジェクトの他のすべての変更とともに変更を追跡し、常にアプリのデータモデルがCloudKitスキーマと一致していることを確認できます。

00:01:41.000 --> 00:01:53.000
また、新しいcktoolコマンドライン開発者ツールを使用すると、このスキーマ宣言をCloudKitサーバーに送信するプロセスを簡単に自動化し、テストを実行する直前にサーバーに一貫したサンプルデータセットを作成できます。

00:01:53.000 --> 00:01:56.000
すぐに飛び込んで、cktoolを使い始めましょう。

00:01:56.000 --> 00:01:59.000
まず、cktoolはXcode 13でインストールされます。

00:01:59.000 --> 00:02:04.000
Xcode 13をインストールすると、すぐにターミナルからcktoolの使用を開始できます。

00:02:04.000 --> 00:02:07.000
Cktoolはxcrunで呼び出されます。

00:02:07.000 --> 00:02:08.000
それはいくつかのコマンドを提供します。

00:02:08.000 --> 00:02:21.000
たとえば、CloudKitサーバー上のレコードの作成、サーバーに既に存在するレコードのクエリ、新しいスキーマ言語ファイルのインポートとエクスポート、ツール自体の承認の管理などを行うことができます。

00:02:21.000 --> 00:02:26.000
cktoolを使用する前に、CloudKitでの承認について理解すべき点がいくつかあります。

00:02:26.000 --> 00:02:32.000
cktoolはCloudKitサーバーと直接通信するため、まずツールの承認を得る必要があります。

00:02:32.000 --> 00:02:41.000
スキーマインポートなどのコンテナ管理機能を実行するためにcktoolのみを承認するか、さらにコンテナ内のデータにアクセスするツールを承認するかを選択できます。

00:02:41.000 --> 00:02:44.000
CloudKitは、この目的のために2つの新しい概念を導入しました。

00:02:44.000 --> 00:02:49.000
1つ目は「管理トークン」と呼ばれ、cktoolがCloudKitコンテナを管理するために使用されます。

00:02:49.000 --> 00:02:57.000
管理トークンは単一の開発者アカウントに関連付けられ、その開発者が複数のチームのメンバーである場合、開発者チーム全体で使用できます。

00:02:57.000 --> 00:03:02.000
管理トークンは、スキーマのインポートやエクスポートなどの設定ユースケースのみを対象としています。

00:03:02.000 --> 00:03:05.000
このトークンは、コンテナ内のデータへのアクセスを提供しません。

00:03:05.000 --> 00:03:15.000
そのため、アプリのコンテナのユーザーのプライベートデータベースまたはアプリのコンテナのパブリックデータベースにデータを書き込むツールを承認するために使用できるユーザートークンも導入しました。

00:03:15.000 --> 00:03:19.000
CloudKitコンソールから管理トークンとユーザートークンを取得できます。

00:03:19.000 --> 00:03:26.000
CloudKitコンソールの詳細については、別のWWDC21セッションである「Meet CloudKit Console」をご覧ください。

00:03:26.000 --> 00:03:36.000
開発者アカウントの管理トークンとユーザートークンの両方を取得したので、macOSキーチェーンに安全に保存するツールに追加することができ、続行する準備ができています。

00:03:36.000 --> 00:03:38.000
私は今、いくつかの面白いことを始めることができます。

00:03:38.000 --> 00:03:42.000
例えば、Apple開発者チームのメンバーシップのリストを尋ねます。

00:03:42.000 --> 00:03:45.000
そして、私がメンバーであるチームのリストを取り戻します。すごい。

00:03:45.000 --> 00:03:52.000
さて、コンテナにデータベーススキーマが定義されていて、変更を加える前にソースコードリポジトリにコミットしたいとしましょう。

00:03:52.000 --> 00:03:54.000
Cktoolを使えば、それは簡単です。

00:03:54.000 --> 00:04:08.000
このexport-schemaコマンドを使用すると、開発スキーマを「schema.ckdb」というファイルにプルダウンできます。このファイルは、先ほど述べた新しいCloudKitスキーマ言語でフォーマットされており、わずか1分でこのファイルを詳細に検討します。

00:04:08.000 --> 00:04:11.000
Cktoolを使えば、コンテナにデータを追加することもできます。

00:04:11.000 --> 00:04:21.000
ここでは、このサンプルブックレコードのように、JSONとして表現されたサンプル値がある場合、このサンプルブックレコードのように、そのJSONをツールへの入力として使用して、パブリックデータベースにレコードを作成できます。

00:04:21.000 --> 00:04:35.000
さて、ツールの動作に関する基本的な感覚がわかったので、アプリのCloudKitコンテナの開発環境からすべてのデータを削除するための簡単な3ステップスクリプトを作成し、スキーマ宣言をサーバーに送信し、最後にテストデータをロードします。

00:04:35.000 --> 00:04:47.000
そうすれば、Xcodeでのテストプリアクションの一部としてこのスクリプトを実行し、テストを実行するたびにアプリケーションが使用している正確なスキーマを使用して、CloudKitコンテナが常に一貫した状態にあることを確認できます。

00:04:47.000 --> 00:04:55.000
したがって、ここXcodeでは、プロジェクトのアプリケーションのスキームを編集し、テストフェーズで事前アクションを選択します。

00:04:55.000 --> 00:04:58.000
これで、新しい実行スクリプトアクションを追加できます。

00:04:58.000 --> 00:05:05.000
スクリプトがプロジェクト内のスキーマファイルへのパスを持つように、アプリターゲットのビルド設定を提供します。

00:05:05.000 --> 00:05:20.000
ここでは、cktoolコマンドを貼り付けてコンテナをリセットし、次にアプリケーションプロジェクトのファイルからスキーマをインポートし、最後にコンテナのパブリックデータベースにサンプルレコードを作成します。

00:05:20.000 --> 00:05:27.000
これらのコマンドは同期しているため、次々に実行され、何かが期待どおりに動かない場合に備えて、失敗しても実行が停止することに注意してください。

00:05:27.000 --> 00:05:32.000
その場合、実際にテストを実行する前に、テスト前の問題を解決するように注意することができます。

00:05:32.000 --> 00:05:34.000
それでおそれ。

00:05:34.000 --> 00:05:39.000
今、Xcodeテストを実行すると、cktoolは実行直前にCloudKitコンテナを準備します。

00:05:39.000 --> 00:05:40.000
完璧。

00:05:40.000 --> 00:05:44.000
では、アプリケーションのデータモデルを変更する必要がある場合はどうなりますか?

00:05:44.000 --> 00:05:46.000
CloudKitスキーマ言語についてもっと話しましょう。

00:05:46.000 --> 00:05:51.000
実際、先ほどダウンロードしたschema.ckdbファイルを調べてみましょう。

00:05:51.000 --> 00:05:58.000
ファイルの中には、私のスキーマのレコードタイプを記述する強力な方法である新しいCloudKitスキーマ言語があります。

00:05:58.000 --> 00:06:02.000
読み書きが簡単で、私のアプリケーションコードで私のプロジェクトにここに含めることができます。

00:06:02.000 --> 00:06:06.000
スキーマセクション内には、レコードタイプがあります。

00:06:06.000 --> 00:06:10.000
これらは、CloudKitコンソールのコンテナに示すように、レコードタイプを正確に反映します。

00:06:10.000 --> 00:06:15.000
各レコードタイプには複数のフィールドがあり、各フィールドには名前とデータタイプがあります。

00:06:15.000 --> 00:06:21.000
トリプルアンダースコアフィールド名は、すべてのレコードタイプに対してCloudKitによって作成されるシステムフィールドです。

00:06:21.000 --> 00:06:27.000
これらのシステムフィールドの下には、CloudKitのこのレコードタイプのカスタムアプリケーションデータを表すカスタムフィールドがあります。

00:06:27.000 --> 00:06:35.000
CloudKitコンソールと同じように、クエリ可能、検索可能、ソート可能なインデックスなどのフィールドのインデックスを作成できます。

00:06:35.000 --> 00:06:43.000
CloudKitスキーマ言語でこれを行うには、ここのブックレコードタイプのこの「タイトル」カスタムフィールドのように、フィールドのデータタイプの直後にインデックスを宣言します。

00:06:43.000 --> 00:06:47.000
フィールド定義の下には、レコードタイプのセキュリティロール設定があります。

00:06:47.000 --> 00:06:54.000
これは、これらの3つの組み込みシステムセキュリティロールのそれぞれのように、名前付きセキュリティロールごとに権限を付与できる場所です。

00:06:54.000 --> 00:07:02.000
「_Creator」にはレコードを作成したユーザーのみが含まれ、「_world」にはすべてのユーザーが含まれ、「_icloud」には認証されたユーザーが含まれます。

00:07:02.000 --> 00:07:09.000
CloudKitスキーマ言語では、シングル行と複数行の両方のコメントを含めることで、スキーマファイルをあなたとあなたのチームにとってさらに読みやすくすることができることに注意してください。

00:07:09.000 --> 00:07:14.000
ファイルが処理されると、コメントはCloudKitサーバーによって無視されますので、好きな場所にコメントを入れてください。

00:07:14.000 --> 00:07:24.000
CloudKitスキーマ言語は、開発者にスキーマを宣言および変更するための迅速で柔軟な方法を提供するため、CloudKitスキーマの進化に関するいくつかのコア概念を覚えておくことが重要です。

00:07:24.000 --> 00:07:29.000
まず、コンテナの開発環境でレコードタイプを完全に制御できます。

00:07:29.000 --> 00:07:37.000
開発中のレコードタイプを追加および削除したり、制限なしでそれらのレコードタイプ内のカスタムフィールドを追加および削除したりできます。

00:07:37.000 --> 00:07:44.000
もちろん、新しいレコードタイプは常に生産に昇格することができ、生産中の既存のレコードタイプに新しいフィールドを追加することもできます。

00:07:44.000 --> 00:07:55.000
しかし、いったんレコードタイプがコンテナのプロダクション環境に昇格されると、それらは削除または名前を変更できず、プロダクションに昇格されたレコードタイプ内のカスタムフィールドも削除または名前を変更することはできません。

00:07:55.000 --> 00:08:03.000
この理由は、CloudKitサーバーが、アプリの古いバージョンがまだ使用している可能性のあるレコードタイプとフィールドを常に理解できるようにするためです。

00:08:03.000 --> 00:08:12.000
これは、コンテナの開発環境でスキーマ宣言に破壊的な変更を加えることはできますが、これらの破壊的な変更を生産に促進することはできないことを意味します。

00:08:12.000 --> 00:08:18.000
本番環境でインデックスを追加および削除することは可能であり、セキュリティロールの設定も変更できることに注意してください。

00:08:18.000 --> 00:08:28.000
これらのスキーマプロモーションの概念はすべてCloudKitにとって新しいものではありませんが、この新しいファイルベースのスキーマ宣言から得られる柔軟性は、それらを見直して理解することが重要であることを意味します。

00:08:28.000 --> 00:08:36.000
cktoolで何ができるか、CloudKitスキーマ言語がどのように機能するかを理解したので、自分のプロジェクトで両方を試してみることをお勧めします。

00:08:36.000 --> 00:08:42.000
CloudKitコンソールから管理トークンとユーザートークンを使用してcktoolを承認し、そのコマンドを調べます。

00:08:42.000 --> 00:08:51.000
既存のCloudKitスキーマをCloudKitスキーマ言語ファイルにエクスポートし、プロジェクトに追加し、プロジェクトの残りの部分でバージョン管理に必ず確認してください。

00:08:51.000 --> 00:08:58.000
cktoolを使用して統合テストのセットアップ手順を作成し、スクリプトをテストプリアクションとしてXcodeスキームに追加します。

00:08:58.000 --> 00:09:04.000
コマンドラインからCloudKitコンテナの特定の要素を管理する機能は本当に強力です。

00:09:04.000 --> 00:09:20.000
他のすべてのアプリケーションコードと一緒にCloudKitスキーマの宣言をファイルに維持することは、開発ライフサイクルを通じてデータモデルとの一貫性を保つのに役立ち、これらすべてを結び付けて統合テストのクラウドセットアップを自動化することはさらに優れています。

00:09:20.000 --> 00:09:23.000
私たちは、あなたがこれらの新しいツールで何をするかを見つけることに興奮しています。

00:09:23.000 --> 00:09:27.000
CloudKitについてもっと学ぶために時間を割いていただき、WWDC21にご関心をお寄せいただきありがとうございます。

00:09:27.000 --> 23:59:59.000
[音楽]。

