WEBVTT

00:00:00.000 --> 00:00:12.000
こんにちは、WWDCへようこそ。

00:00:12.000 --> 00:00:21.000
私の名前はマイクです。今日は、SFシンボル3で導入された新機能を利用したカスタムシンボルを作成する方法を説明します。

00:00:21.000 --> 00:00:26.000
まず、カスタムシンボルとは何か、いつ使用したいのかをまとめます。

00:00:26.000 --> 00:00:30.000
カスタムシンボルには、SVGテンプレートでの作業が含まれます。

00:00:30.000 --> 00:00:37.000
SFシンボル3では、まったく新しいテンプレートバージョンがあるので、以前のバージョンからの変更について説明します。

00:00:37.000 --> 00:00:45.000
テンプレートを生成し、シンボルを編集し、モノクロ以外のレンダリングモード用に準備する方法を説明します。

00:00:45.000 --> 00:00:52.000
注釈、レンダリングモードデータをシンボルに追加するプロセスについて説明します。

00:00:52.000 --> 00:00:57.000
ワークフローに大きな影響を与える可能性のある、より高度なテクニックについて説明します。

00:00:57.000 --> 00:01:02.000
そして最後に、Xcodeのエクスポートとカスタムシンボルの配布をカバーして締めくくります。

00:01:02.000 --> 00:01:06.000
始めましょう。では、カスタムシンボルとは何ですか?

00:01:06.000 --> 00:01:11.000
さて、SFシンボルは2019年に導入されました。

00:01:11.000 --> 00:01:17.000
最初のリリースでは、アプリで使用できる1,500以上のシンボルがありました。

00:01:17.000 --> 00:01:21.000
それ以来、シンボルのライブラリは成長したばかりです。

00:01:21.000 --> 00:01:26.000
2年後、SFシンボル3では、合計3,000以上のシンボルがあります。

00:01:26.000 --> 00:01:30.000
現在、これらのシンボルは多種多様な主題とカテゴリをカバーしています。

00:01:30.000 --> 00:01:38.000
しかし、あなたのアプリには、円の中のティーカップなどの既存のSFシンボルによって完全にキャプチャされていない特定のニーズがあるかもしれません。

00:01:38.000 --> 00:01:42.000
ここでカスタムシンボルの出番です。

00:01:42.000 --> 00:01:50.000
カスタムシンボルが必要な場合は、それを一連のベクトルパスとして描画し、カスタムシンボルテンプレートに配置します。

00:01:50.000 --> 00:01:56.000
テンプレートはSVG形式であり、あなたのデザインといくつかのガイドが含まれています。

00:01:56.000 --> 00:02:04.000
このテンプレートは、あなた自身のシンボルがSFシンボルが提供するすべての機能を利用するためのメカニズムです。

00:02:04.000 --> 00:02:18.000
これには、テキストの横にあるシンボルの見栄えを良くするためのタイポグラフィの配置、リストやテーブルビューで使用するときにシンボルが互いに光学的に中央に配置されていることを確認するための余白が含まれます。

00:02:18.000 --> 00:02:27.000
テキストを一致させ、iOSのアクセシビリティ太字などの機能に調整するための複数の重み...

00:02:27.000 --> 00:02:34.000
そして最後に、異なるUI要素のコンテキストに合わせて調整するための3つのウェイトマッチスケール。

00:02:34.000 --> 00:02:38.000
だから、これらはSFシンボルとカスタムシンボルのハイライトです。

00:02:38.000 --> 00:02:48.000
カスタムシンボルテンプレートの基本を確認するには、WWDC 2019の「SFシンボルの紹介」を見ることをお勧めします。

00:02:48.000 --> 00:02:56.000
SFシンボルの背後にあるデザインの詳細については、WWDC 2021の「SFシンボルの新機能」をご覧ください。

00:02:56.000 --> 00:03:01.000
カスタムシンボルを使用するタイミングがわかったので、それらを可能にするテンプレートを確認しましょう。

00:03:01.000 --> 00:03:10.000
SFシンボル3の新機能に合わせて、テンプレートの新しいバージョン、バージョン3.0があります。

00:03:10.000 --> 00:03:20.000
このバージョンのテンプレートには、バージョン2.0と比較していくつかの重要な新機能があり、Xcode 13以上が必要です。

00:03:20.000 --> 00:03:30.000
3.0では、左マージンと右マージンのガイドラインにはより明示的な名前があり、それらが対応するデザインバリアントを示しています。

00:03:30.000 --> 00:03:35.000
たとえば、これらの余白には「Regular-M」という接尾辞があります。

00:03:35.000 --> 00:03:47.000
これは、光学アライメントをさらに制御するために、テンプレート内の任意のバリアントにマージンを追加することができ、デザインバリアントの1つに一致する接尾辞がある限り、それらは尊重されることを意味します。

00:03:47.000 --> 00:03:53.000
さらに重要なことに、テンプレートのこの形式は、シンボルがさまざまなレンダリングモードでどのように見えるべきかに関する情報を埋め込むことができます。

00:03:53.000 --> 00:04:04.000
モノクロやマルチカラーなどの既存のモードのデータや、新しい階層モードやパレットモードで使用されるデータを埋め込むことができます。

00:04:04.000 --> 00:04:12.000
これに加えて、3.0テンプレートは、より少ないことをすることでより多くのことを達成できるいくつかの高度な機能をサポートしています。

00:04:12.000 --> 00:04:16.000
これについては、「高度な技術」のセクションで詳しく説明します。

00:04:16.000 --> 00:04:26.000
新しいテンプレートの完全な仕様については、Developer.Apple.com/SF-Symbolsで更新されたドキュメントをご覧ください。

00:04:26.000 --> 00:04:31.000
新しいテンプレートに慣れたので、カスタムシンボルに取り組みましょう。

00:04:31.000 --> 00:04:38.000
だから私は同僚の何人かとカードゲームアプリに取り組んでおり、SFシンボルアプリは私たちが必要とする多くのシンボルをカバーしています。

00:04:38.000 --> 00:04:43.000
カードのデッキを表すために使用できる4つのスーツとスタックがあります。

00:04:43.000 --> 00:04:49.000
唯一欠けているのは、私たちのアプリで特別な役割を果たすハートの女王を表すために使用できるものです。

00:04:49.000 --> 00:04:53.000
私は上にハートが付いた王冠のシンボルを描いています。

00:04:53.000 --> 00:04:59.000
既存のSFシンボルをカスタマイズできるように、SFシンボルアプリを開くことから始めることができます。

00:04:59.000 --> 00:05:04.000
このようにして、ステムの厚さ、スケール、アライメントの基準点があります。

00:05:04.000 --> 00:05:11.000
SFシンボルアプリで「クラウン」を検索すると、素敵な未記入のバージョンが利用可能であることがわかります。

00:05:11.000 --> 00:05:13.000
これは素晴らしい出発点になるでしょう。

00:05:13.000 --> 00:05:17.000
私が追加する必要があるのは、一番上のハートだけです。

00:05:17.000 --> 00:05:22.000
「クラウン」を選択し、コンテキストメニューから「カスタムシンボルとして複製」を選択できます。

00:05:22.000 --> 00:05:28.000
そして、サイドバーのカスタムシンボルセクションの下に、私が複製したばかりのクラウンのセルがあります。

00:05:28.000 --> 00:05:32.000
「Custom.crown」は少し曖昧なので、名前を変更します。

00:05:32.000 --> 00:05:36.000
「Queen.heart」は、私が考えていることをはるかに説明しています。

00:05:36.000 --> 00:05:45.000
さて、これは新しいカスタムシンボルを始めるのに良い方法ですが、1.0と2.0のカスタムシンボルテンプレートとして過去数年間のシンボルがあるかもしれません。

00:05:45.000 --> 00:05:46.000
それは問題ではありません。

00:05:46.000 --> 00:05:55.000
既存のシンボルをアプリにドロップすると、自動的に現在のコレクションに追加され、3.0テンプレートにアップコンバートされます。

00:05:55.000 --> 00:06:08.000
シンボルが私のコレクションに入ったら、「クラウン」のようなSFシンボルをコピーしても、「Teacup.circle」のようなカスタムシンボルをインポートしても、スケッチ、イラストレーター、フィグマなどのデザインアプリで編集するためにエクスポートできます。

00:06:08.000 --> 00:06:14.000
これを行うには、ファイルエクスポートテンプレート、またはCommand + Eを選択できます。

00:06:14.000 --> 00:06:21.000
これにより、3.0テンプレートがモノクロでエクスポートされるので、カスタマイズできます。

00:06:21.000 --> 00:06:29.000
SFシンボルアプリに由来するシンボルの場合、3.0テンプレートの初期設定には、静的と可変の2つのオプションがあります。

00:06:29.000 --> 00:06:32.000
どのセットアップを選択するかは、設計目標によって異なります。

00:06:32.000 --> 00:06:38.000
静的セットアップは2.0テンプレートに似ているので、馴染みがあるはずです。

00:06:38.000 --> 00:06:43.000
中規模では、27セットのパスと1セットの明示的なマージンが定期的にあります。

00:06:43.000 --> 00:06:51.000
特定の重量とスケールをターゲットにしている場合、またはシンボルの1つまたは2つのバリアントのみを設計する予定の場合、この設定はうまく機能します。

00:06:51.000 --> 00:06:59.000
一方、変数設定では、3組のパスと3組のマージンを持つ3.0テンプレートが生成されます。

00:06:59.000 --> 00:07:09.000
すべてのデザインバリアントをサポートする予定の場合は、他の24を生成するために必要なデザインバリアントの最小数を提供するため、このセットアップから始めることに興味があるかもしれません。

00:07:09.000 --> 00:07:16.000
これには、すべてのパスが非常に高いレベルの互換性と一貫性を持つ必要があります。

00:07:16.000 --> 00:07:19.000
しかし、今これについて心配しないでください。

00:07:19.000 --> 00:07:23.000
これらの要件とテンプレートのこの設定については、後で詳細に再検討します。

00:07:23.000 --> 00:07:29.000
今のところ、1つまたは2つのバリアントしか描画しないので、静的セットアップをエクスポートします。

00:07:29.000 --> 00:07:35.000
デザインアプリケーションでテンプレートを開いたら、編集を始める準備が整いました。

00:07:35.000 --> 00:07:42.000
2.0テンプレートで作業するように、私は必要のないデザインバリアントを削除し、始めるためにいくつかだけをデザインすることができます。

00:07:42.000 --> 00:07:51.000
互換性のあるパスがないテンプレートの場合、Regular-Mediumはまだ必要なので、それから始めます。

00:07:51.000 --> 00:07:54.000
王冠の真ん中の尖塔に心臓のためのスペースを作ります。

00:07:54.000 --> 00:08:03.000
そして、このシンボルをマルチカラーモードで見栄え良くしたいので、後でシンボルの特定の部分に色を割り当てることができるようにパスを調整します。

00:08:03.000 --> 00:08:09.000
これらの調整により、私は今、クラウンの中空部分のための単一の閉じた形状を持っています。

00:08:09.000 --> 00:08:12.000
次に、心に焦点を当てます。

00:08:12.000 --> 00:08:20.000
今、シンボルを編集する際に、ストロークシンボルに取り組んでいるので、レギュラーミディアムの茎の厚さに合わせてストロークを使用するかもしれません。

00:08:20.000 --> 00:08:25.000
これは、心臓のプロポーションとサイズを反復する際に柔軟性を与えてくれます。

00:08:25.000 --> 00:08:30.000
しかし、注意してください、私はデザインに満足したら、ライブストロークをパスに変換するようにしてください。

00:08:30.000 --> 00:08:36.000
パスに変換すると、ストロークされた図形を後で色で塗りつぶすことができます。

00:08:36.000 --> 00:08:43.000
パスに変換するもう1つの利点は、ストロークが十分に正確でない場合のために、いくつかのマイナーな光学調整を行うことができることです。

00:08:43.000 --> 00:08:49.000
ここのように、心臓の上半分では、ストロークが大きすぎて内側が丸いです。

00:08:49.000 --> 00:08:56.000
パスに変換したので、曲線を微調整して不格好に見せることができます。

00:08:56.000 --> 00:09:06.000
1つのデザインバリアントが描かれたので、シンボルをモノクロ以外のレンダリングモードをサポートしたい場合は、心に留めておくべきいくつかの項目について話す良い機会です。

00:09:06.000 --> 00:09:10.000
最終的なデザインでライブストロークを使用することは避けてください。

00:09:10.000 --> 00:09:19.000
代わりに、結果の図形が色や階層グループを取ることができるように、任意のストロークをパスに変換するようにしてください。

00:09:19.000 --> 00:09:21.000
オープンパスの使用は避けてください。

00:09:21.000 --> 00:09:26.000
これらは、接続されていない開始点と終了点を持つパスです。

00:09:26.000 --> 00:09:31.000
閉じた塗りつぶし領域がないため、これらの形状は色を取ることができません。

00:09:31.000 --> 00:09:37.000
代わりに、デザイン内のすべての形状が定義された塗りつぶし領域で閉じられていることを確認してください。

00:09:37.000 --> 00:09:44.000
グラデーションやドロップシャドウなどの効果など、複数の色を含む特別な塗りつぶしは避けてください。

00:09:44.000 --> 00:09:51.000
これらが存在する場合、シンボル用に作成した多色または階層データを上書きします。

00:09:51.000 --> 00:09:56.000
代わりに、追加の効果のない標準的なフラットフィルに固執してください。

00:09:56.000 --> 00:10:01.000
さて、私のデザインツールに戻ると、テンプレートはかなりむき出しです。

00:10:01.000 --> 00:10:07.000
シンボルがiOSのアクセシビリティ太字機能に反応するように、セミボールドを追加したいかもしれません。

00:10:07.000 --> 00:10:15.000
これを行うには、既存の図面を目的のレイヤーにコピーし、そこから調整することをお勧めします。

00:10:15.000 --> 00:10:23.000
これは、デザインバリアント全体で同じ数のパスが使用されるため、入るのに良い習慣です。

00:10:23.000 --> 00:10:33.000
多色または階層データを持つシンボルを生成する場合は、すべてのデザインバリアントのパス数を維持することが要件です。

00:10:33.000 --> 00:10:37.000
この例では、その番号と順序を示すためにパスに色を付けました。

00:10:37.000 --> 00:10:40.000
どちらのデザインバリアントにも4つのパスがあります。

00:10:40.000 --> 00:10:48.000
最初の2つのパスがフォルダを作成し、3番目のパスとして円、4番目のパスとしてプラス記号があります。

00:10:48.000 --> 00:10:54.000
その結果、これらの2つの図面は多色で素晴らしく見えます。

00:10:54.000 --> 00:11:04.000
これらの図面には4つのパスもありますが、細心の注意を払うと、右側のパスの順序をシャッフルしたことに気付くでしょう。

00:11:04.000 --> 00:11:13.000
フォルダのメインストロークは、左側の図面の最初のパスですが、右側の図面の3番目のパスです。

00:11:13.000 --> 00:11:21.000
デザインが同じ数のパスを持つが、順序が異なる場合、レンダリングは大きく異なる可能性があります。

00:11:21.000 --> 00:11:25.000
そして、これらの図面を多色でレンダリングすると、それらは一致しません。

00:11:25.000 --> 00:11:31.000
プラスバッジの緑色は、右側のデザインバリアントのフォルダに適用されます。

00:11:31.000 --> 00:11:33.000
クイーンハートのシンボルに戻ります。

00:11:33.000 --> 00:11:35.000
今のところ素晴らしく見えます。

00:11:35.000 --> 00:11:45.000
そして、私は自分のデザインバリアントを作成する方法に慎重だったので、マルチカラーと階層モードをサポートするために注釈を付けることで、それをさらに良くすることができます。

00:11:45.000 --> 00:11:49.000
その前に、シンボルをアプリにインポートし直す必要があります。

00:11:49.000 --> 00:11:56.000
既存のセルにドロップするだけで、SFシンボルアプリで更新する必要があります。

00:11:56.000 --> 00:12:06.000
今、シンボルに注釈を付ける必要はありませんが、モノクロ以外のレンダリングモードでシンボルの外観を制御したい場合は、それは良い考えです。

00:12:06.000 --> 00:12:14.000
注釈を付けるには、シンボルを構成する個々のパスをビルディングブロックとして使用します。

00:12:14.000 --> 00:12:19.000
これらから、レンダリングモードごとにレイヤーのセットを作成します。

00:12:19.000 --> 00:12:24.000
レイヤーは、単にいくつかの関連するレンダリングデータを持つパスの集まりです。

00:12:24.000 --> 00:12:32.000
ここには、7つのパスを持つ王冠の層と、2つのパスを持つハートの層があります。

00:12:32.000 --> 00:12:40.000
マルチカラーモードのレイヤーには色が割り当てられ、階層モードのレイヤーには階層グループが割り当てられます。

00:12:40.000 --> 00:12:47.000
レイヤーには明示的なz順序があり、上部のレイヤーは下のレイヤーをブロックします。

00:12:47.000 --> 00:12:50.000
これは、デザインアプリケーションでレイヤーを作成するのと変わりません。

00:12:50.000 --> 00:12:56.000
注釈を開始するには、アプリでシンボルを選択し、ギャラリービューに入ります。

00:12:56.000 --> 00:13:05.000
右側のインスペクタで、レンダリングモードタブを選択して、シンボルをプレビューして注釈を付けることができます。

00:13:05.000 --> 00:13:10.000
モノクロ、階層、パレット、マルチカラーから選べます。

00:13:10.000 --> 00:13:18.000
モノクロ以外のモードでは、アクティブモードに対応するレイヤーを追加および編集できます。

00:13:18.000 --> 00:13:20.000
そして、中央にはプレビューがあります。

00:13:20.000 --> 00:13:27.000
ここでは、私たちが自由に使えるすべてのパスと対話し、それらをレイヤーに割り当てることができます。

00:13:27.000 --> 00:13:32.000
まずはマルチカラーレンダリングモードから始めます。

00:13:32.000 --> 00:13:36.000
王冠用の新しいレイヤーを作成します。

00:13:36.000 --> 00:13:39.000
その後、レイヤーの色を選択できます。

00:13:39.000 --> 00:13:45.000
マルチカラーレイヤーの場合は、さまざまなシステムカラーから選択することも、独自のカスタムカラーを使用することもできます。

00:13:45.000 --> 00:13:58.000
ライトモード、ダークモード、ハイコントラストモード、および異なる活気のコンテキストで見栄えを良くするために、システムの外観の変化に適応するため、可能な限りシステムが提供する色を使用することをお勧めします。

00:13:58.000 --> 00:14:03.000
王冠にはシステムイエローを使います。

00:14:03.000 --> 00:14:06.000
そして、それは1つの層が完了しました。さて、心臓のためだけに。

00:14:06.000 --> 00:14:10.000
私はそれを赤で独自のレイヤーに追加します。

00:14:10.000 --> 00:14:18.000
シンボルの中空部分に色を設定することで、マルチカラーモードでクラウンにもう少し深みを加えたいです。

00:14:18.000 --> 00:14:21.000
パスは任意の数のレイヤーで使用できます。

00:14:21.000 --> 00:14:32.000
だから、ストロークと塗りつぶしの効果を達成するために、私は透明にしたいパスを持つレイヤーを追加し、それをより低い不透明度に設定しました。

00:14:32.000 --> 00:14:35.000
心臓にも同じことをします。私は心臓にも同じことをします。

00:14:35.000 --> 00:14:36.000
それは素晴らしいですね。

00:14:36.000 --> 00:14:40.000
次に、階層に移ります。

00:14:40.000 --> 00:14:49.000
以前のようにレイヤーを構築できますが、色の代わりに、一次から三次までの階層グループを割り当てます。

00:14:49.000 --> 00:14:55.000
階層データは、階層およびパレットレンダリングモードで使用されます。

00:14:55.000 --> 00:14:59.000
セカンダリにクラウンのレイヤーを追加します。

00:14:59.000 --> 00:15:02.000
そして、プライマリの心臓。

00:15:02.000 --> 00:15:09.000
プレビューでは、心臓が完全に不透明ではないため、王冠のビットが心臓を通して重なっていることがわかります。

00:15:09.000 --> 00:15:14.000
これは、重なり合う図形を扱う際の一般的な問題です。

00:15:14.000 --> 00:15:21.000
これらのオーバーラップがどのようにレンダリングされるかを制御するために、各レイヤーには右側にトグルがあります。

00:15:21.000 --> 00:15:27.000
非アクティブの場合、透明なレイヤーは、左に示すように、以下のレイヤーと混ざります。

00:15:27.000 --> 00:15:29.000
これがデフォルトの動作です。

00:15:29.000 --> 00:15:38.000
アクティブな場合、透明なレイヤーは、右に示すように、その背後にあるものをクリアし、他のレイヤーが存在しないかのようにレンダリングされます。

00:15:38.000 --> 00:15:43.000
クリアバックトグルセットで、今、私のシンボルは期待どおりに動作します。

00:15:43.000 --> 00:15:52.000
階層的な注釈データはパレットレンダリングモードでも使用されるので、レイヤーのインタラクションも見栄えが良いことを確認します。

00:15:52.000 --> 00:15:53.000
これは素晴らしく見えます。

00:15:53.000 --> 00:16:01.000
シアン層は透明ですが、後ろのクリアが有効になっているので、その後ろのインディゴクラウンは見えません。

00:16:01.000 --> 00:16:08.000
パレットレンダリングモードでは、階層のような1色ではなく、シンボルに2色から3色を割り当てることができます。

00:16:08.000 --> 00:16:16.000
これら2つのモードが階層的な注釈を解釈して色を適用する方法の違いを確認しましょう。

00:16:16.000 --> 00:16:24.000
Hierarchicalは1つの色を使用し、それをシンボルのレイヤーに適用し、階層レベルに基づいて不透明度を変化させます。

00:16:24.000 --> 00:16:28.000
この場合、一次グループと三次グループを持つシンボルがあります。

00:16:28.000 --> 00:16:36.000
パレットは2〜3色を取り、その動作は渡された色の数によってわずかに異なります。

00:16:36.000 --> 00:16:43.000
2つの色を渡すと、レベルに関係なく、利用可能な階層グループ間で色が分配されます。

00:16:43.000 --> 00:16:52.000
このシンボルでは、2つのグループしかないため、最初の色はプライマリグループに適用され、2番目の色は三次グループに適用されます。

00:16:52.000 --> 00:16:58.000
3つの色を渡すと、それぞれが対応する階層グループに適用されます。

00:16:58.000 --> 00:17:06.000
最初の色は一次色、2番目の色は二次、3番目の色は三次に割り当てられます。

00:17:06.000 --> 00:17:15.000
すでに注釈を付けたシンボルの編集を続ける必要がある場合は、テンプレートをエクスポートし、デザインツールでモノクロ表現を編集します。

00:17:15.000 --> 00:17:20.000
次に、シンボルを再インポートし、注釈が期待どおりにレンダリングされていることを確認します。

00:17:20.000 --> 00:17:28.000
注釈データを保持したい場合は、注釈付きシンボルのパスを変更する際には特別な注意が必要です。

00:17:28.000 --> 00:17:36.000
このデータはデザイン全体で同じ数のパスを必要とするため、ポイントを安全に追加、削除、調整できます。

00:17:36.000 --> 00:17:43.000
しかし、パス全体を削除または並べ替えると、デザインが注釈データと同期しなくなります。

00:17:43.000 --> 00:17:48.000
このような場合、新しいパス構造を説明するためにシンボルに再注釈を付ける必要があります。

00:17:48.000 --> 00:17:55.000
今、私は2つのデザインバリアントで私のシンボルを持っており、それは注釈が付けられているので、他のレンダリングモードでは見栄えがします。

00:17:55.000 --> 00:18:01.000
私はここで止まることができますが、スケールと重量の他の組み合わせをサポートする必要がある場合はどうなりますか?

00:18:01.000 --> 00:18:10.000
このセクションでは、3つ以上のデザインバリアントを描画する予定がある場合に、時間を節約できるカスタムシンボルを操作するテクニックについて説明します。

00:18:10.000 --> 00:18:19.000
過去には、テンプレートの残りのバリアントを1つずつ入力し続け、目的の重量とスケールに合わせてパスを調整しました。

00:18:19.000 --> 00:18:24.000
しかし今、SFシンボル3では、これを行うためのはるかに良い方法があります。

00:18:24.000 --> 00:18:31.000
互換性のあるデータを含む3つのデザインバリアントのみを提供すると、残りのテンプレートを無料で入手できます。

00:18:31.000 --> 00:18:35.000
これは、3.0変数テンプレートを要求するときに得られるSVGの構造です。

00:18:35.000 --> 00:18:39.000
互換性のあるデザインを製造するための要件を掘り下げてみましょう。

00:18:39.000 --> 00:18:44.000
まず、デザインソースと呼ぶものを確認します。

00:18:44.000 --> 00:18:49.000
これらは超軽量-小、レギュラー-小、黒-小です。

00:18:49.000 --> 00:18:54.000
それらが存在する場合、パスはソース全体で評価され、それらが一致するかどうかを確認します。

00:18:54.000 --> 00:19:01.000
比較のために、レギュラー・スモール・ソースとブラック・スモール・ソースに焦点を当てましょう。

00:19:01.000 --> 00:19:09.000
設計バリアント全体で、すべてのパスは、注釈要件で先に説明したのとまったく同じ番号と順序を持つ必要があります。

00:19:09.000 --> 00:19:13.000
私は彼らの順序を示すためにここで王冠のパスを着色しました。

00:19:13.000 --> 00:19:17.000
9つの道があり、それらはすべて一致します。

00:19:17.000 --> 00:19:23.000
たとえば、心臓の2つのパスは、両方のデザインバリアントの8番目と9番目のパスです。

00:19:23.000 --> 00:19:25.000
これまでのところ、とても良いです。

00:19:25.000 --> 00:19:30.000
次に、デザインバリアント全体の対応するパス内を確認します。

00:19:30.000 --> 00:19:35.000
通常のソースとブラックソースの心臓の外側の経路を比較してみましょう。

00:19:35.000 --> 00:19:39.000
各パスは一連のポイントから構築されます。

00:19:39.000 --> 00:19:47.000
赤の通常のソースには24ポイント、青には黒のソースには24ポイントがあります。

00:19:47.000 --> 00:19:53.000
互換性があるには、ポイントは対応するパス間で1対1で一致する必要があります。

00:19:53.000 --> 00:20:04.000
一致する点の各ペアは架空の線を作成し、それぞれの線に沿って各点を移動すると、2つの互換性のあるパスをブレンドすることができます。

00:20:04.000 --> 00:20:10.000
通常のソースの各ポイントはブラックソースのポイントに対応するため、それを行うことができます。

00:20:10.000 --> 00:20:19.000
赤の小さなハートに焦点を当て、青の大きなハートと調和する道を観察します。

00:20:19.000 --> 00:20:24.000
ブレンディングは、互換性のあるパス間の任意の場所で新しいパスを生成することを可能にするものです。

00:20:24.000 --> 00:20:27.000
このブレンドは「補間」として知られています。

00:20:27.000 --> 00:20:36.000
ポイントレベルで補間がどのように機能するかがわかったので、ズームアウトしてシンボル全体に適用しましょう。

00:20:36.000 --> 00:20:42.000
超軽量、レギュラー、ブラックの間の重量を計算できることに気付くでしょう。

00:20:42.000 --> 00:20:52.000
これは、シンボルの中規模および大規模デザインバリアントを生成するために必要な重量補償のメカニズムです。

00:20:52.000 --> 00:20:55.000
これらの要件を要約しましょう。

00:20:55.000 --> 00:21:00.000
シンボルが補間可能と見なされるには、3つのことが必要です。

00:21:00.000 --> 00:21:02.000
まず、3つのデザインソース。

00:21:02.000 --> 00:21:06.000
超軽量-小、レギュラー-小、ブラック-小。

00:21:06.000 --> 00:21:09.000
第二に、パスの互換性。

00:21:09.000 --> 00:21:12.000
すべてのパスはソース間で一致する必要があります。

00:21:12.000 --> 00:21:15.000
そして最後に、ポイントの互換性。

00:21:15.000 --> 00:21:20.000
一致するすべてのパスは、同じ数のポイントを持つ必要があります。

00:21:20.000 --> 00:21:24.000
では、これらの補間可能なシンボルの1つをどのように作成しますか?

00:21:24.000 --> 00:21:32.000
さて、静的セットアップの代わりに、可変セットアップでSFシンボルアプリから3.0テンプレートをエクスポートすることから始めます。

00:21:32.000 --> 00:21:37.000
このようにして、3つのソースデザインの余白とアウトラインがあります。

00:21:37.000 --> 00:21:44.000
以前にRegular-Mediumで行ったように、私はRegular-Smallから始めて、上に私の心を追加します。

00:21:44.000 --> 00:21:47.000
今回は小規模のためです。 

00:21:47.000 --> 00:21:57.000
補間は非常に厳しい要件があるため、他のソースに取り組む前に、最初のレギュラースモールデザインバリアントを良好な状態にすることをお勧めします。

00:21:57.000 --> 00:22:09.000
Ultralight-SmallとBlack-Smallのソースに取り組むときは、Regular-Smallパスをコピーして貼り付け、そこからポイントの位置を変更するのが最善です。

00:22:09.000 --> 00:22:16.000
これは、カスタムシンボルが他のデザインバリアントを生成できることを確認するために重要です。

00:22:16.000 --> 00:22:19.000
では、もう一度見直しましょう。

00:22:19.000 --> 00:22:27.000
シンボルを補間可能にしたい場合は、互換性が壊れるので、ポイントの追加や削除は避けてください。

00:22:27.000 --> 00:22:29.000
代わりに、既存のポイントのみを調整してください。

00:22:29.000 --> 00:22:37.000
これにより、設計間の互換性が維持されるため、移動ポイントとコントロールポイントは問題ありません。

00:22:37.000 --> 00:22:46.000
準備ができたら、更新されたテンプレートをアプリのカスタムシンボルセルにドロップし、以前と同じように注釈を付けることができます。

00:22:46.000 --> 00:22:53.000
私はソースを描くのに慎重だったので、27のバリアントをすべてカバーしており、実装するためにこれを手渡す準備ができています。

00:22:53.000 --> 00:23:01.000
カスタムシンボルを作成する方法を取り上げたので、シンボルを配布する方法などの次のステップについて話しましょう。

00:23:01.000 --> 00:23:04.000
シンボルを配布するときは、2つの選択肢があります。

00:23:04.000 --> 00:23:09.000
2.0テンプレートまたは3.0テンプレートをエクスポートできます。

00:23:09.000 --> 00:23:16.000
2.0テンプレートは、iOS 14などの古いOSに展開する予定の場合にのみ使用してください。

00:23:16.000 --> 00:23:22.000
モノクロしか含まれていないので、そのモードで使用するときにシンボルが理にかなっていることを確認してください。

00:23:22.000 --> 00:23:26.000
2.0テンプレートへの変換は非可逆操作です。

00:23:26.000 --> 00:23:33.000
古いOSがそれらを理解できないため、注釈データと明示的な余白は削除されます。

00:23:33.000 --> 00:23:43.000
3.0は、追加したすべての多色および階層データ、およびカスタムマージンを埋め込むことができますが、下位互換性はありません。

00:23:43.000 --> 00:23:47.000
注意してください、このテンプレートは編集用のソースアーティファクトではありません。

00:23:47.000 --> 00:23:52.000
現在の設計ツールは、埋め込まれた注釈データと完全に互換性がない可能性があります。

00:23:52.000 --> 00:23:59.000
シンボルをさらに編集したり、同僚と共有したりする必要がある場合は、SFシンボルアプリにインポートする必要があります。

00:23:59.000 --> 00:24:06.000
そこから、注釈を落とすリスクなしにモノクロ表現に取り組むことができます。

00:24:06.000 --> 00:24:13.000
エクスポートする3.0テンプレートは、Xcodeに直接移動するか、SFシンボルアプリに戻る必要があります。

00:24:13.000 --> 00:24:25.000
最小展開ターゲットがiOS 14の場合、2.0と3.0の両方のテンプレートをエクスポートし、バージョンチェックに基づいて適切なアセットを使用する必要があります。

00:24:25.000 --> 00:24:32.000
最小展開ターゲットがiOS15以降の場合は、3.0テンプレートをエクスポートするだけです。

00:24:32.000 --> 00:24:37.000
同僚とシンボルを共有する場合は、3.0テンプレートをエクスポートします。

00:24:37.000 --> 00:24:42.000
その後、それをSFシンボルアプリにインポートして、編集と注釈付けを続けることができます。

00:24:42.000 --> 00:24:46.000
今日は多くの内容を取り上げたので、簡単にまとめましょう。

00:24:46.000 --> 00:24:54.000
新しい3.0カスタムシンボルテンプレート、それがサポートする機能、および編集方法について話しました。

00:24:54.000 --> 00:25:01.000
注釈のためにシンボルを準備し、多色と階層データを追加する方法を取り上げました。

00:25:01.000 --> 00:25:08.000
私たちは、補間を利用するためにいくつかのより厳しい要件を選択する、より高度なワークフローを模索しました。

00:25:08.000 --> 00:25:13.000
そして、私たちはあなたのシンボルを配布する方法について話し終えたところです。

00:25:13.000 --> 00:25:17.000
シンボルを配信したら、OSで使用する準備が整いました。

00:25:17.000 --> 00:25:22.000
適切なモードでシンボルをレンダリングするために使用できる新しいAPIがいくつかあります。

00:25:22.000 --> 00:25:35.000
コード内のSFシンボルとカスタムシンボルの呼び出しの詳細については、WWDC 2021の「UIKitとAppKitのSFシンボル」と「SwiftUIのSFシンボル」をチェックしてください。

00:25:35.000 --> 00:25:38.000
それは最初から最後までカスタムシンボルです。

00:25:38.000 --> 00:25:41.000
あなた自身のシンボルを作成し、注釈を付けることを楽しんでいただければ幸いです。

00:25:41.000 --> 23:59:59.000
[明るい音楽]。

