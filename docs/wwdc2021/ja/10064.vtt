WEBVTT

00:00:02.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
こんにちは。

00:00:10.000 --> 00:00:23.000
私はデビッド・ダンカンで、同僚のエリック・デュディアックと一緒に、UIKitがiOS 15でボタンをより良くするすべての方法について話し合います。

00:00:23.000 --> 00:00:28.000
謙虚なボタンは、大小のアプリの定番です。

00:00:28.000 --> 00:00:33.000
ボタンは、おそらくユーザーの入力を求める最も一般的な方法です。

00:00:33.000 --> 00:00:44.000
ボタンには、大小、画像、テキスト、またはその両方、背景の有無にかかわらず、虹のあらゆる色など、さまざまな形式があります。

00:00:44.000 --> 00:00:49.000
いくつかの特定のスタイルに焦点を当てることから始めましょう。

00:00:49.000 --> 00:00:56.000
iOS 15では、UIKitはこれら4つの基本的なスタイルを提供しているようになりました。

00:00:56.000 --> 00:01:06.000
あなたがすでに知っていて愛しているプレーンスタイルに加えて、新しいグレー、着色、塗りつぶされたスタイルです。

00:01:06.000 --> 00:01:11.000
しかし、UIKitはiOS 15でボタンをよりスタイリッシュにするだけではありません。

00:01:11.000 --> 00:01:14.000
それはまた、それらをより強力にします。

00:01:14.000 --> 00:01:22.000
ダイナミックタイプがデフォルトでサポートされ、複数行のテキストサポートがボタンシステムに組み込まれています。

00:01:22.000 --> 00:01:33.000
アクセシビリティは、すべてのアクセシビリティ機能のより良いサポートと、デフォルトでよりアクセスしやすいボタンの生成によって強化されました。

00:01:33.000 --> 00:01:41.000
そして、これらすべての新機能により、ボタンはこれまで以上にカスタマイズ可能であるため、あなたが望むスタイルを正確に得ることができます。

00:01:41.000 --> 00:01:51.000
それでは、そのプライマーで、新しいボタンシステムへの入り口であるUIButtonConfigurationに会いましょう。

00:01:51.000 --> 00:01:59.000
あらゆる形とサイズのボタンのプレミアサプライヤーであるボタンエンポリアムへようこそ。

00:01:59.000 --> 00:02:07.000
Button Emporiumは常に最高のボタンを持ちたいので、UIButtonConfigurationを採用するようにアプリを更新しましょう...

00:02:07.000 --> 00:02:12.000
非常に重要なサインインボタンから始めます。

00:02:12.000 --> 00:02:21.000
現在、アプリはこのコードでサインインボタンを生成し、「サインイン」というタイトルのプレーンなシステムボタンを生成します。

00:02:21.000 --> 00:02:29.000
しかし、これは非常に重要なボタンなので、新しい塗りつぶしスタイルを使ってもっと目立たせましょう。

00:02:29.000 --> 00:02:31.000
そして、私たちは終わりました!

00:02:31.000 --> 00:02:49.000
UIButtonは、提供する構成で既存のAPIで設定されたタイトルと画像を自動的に統合し、すべてのコードを一度に更新することなく、ボタンのスタイルを簡単に更新できるため、UIButtonConfigurationを簡単に開始できます。

00:02:49.000 --> 00:02:57.000
しかし、コードを更新する準備ができたら、UIButtonConfigurationにはスタイルだけではありません。

00:02:57.000 --> 00:03:01.000
次にそれを見てみましょう。それは、次は

00:03:01.000 --> 00:03:04.000
これは現在の「カートに追加」ボタンです。

00:03:04.000 --> 00:03:17.000
今ではかなり基本的なボタンですが、UIButtonConfigurationが提供する新機能を利用して、ボタン購入体験をターボチャージします。

00:03:17.000 --> 00:03:23.000
まず、他のボタンを補完するので、着色されたスタイルを使用します。

00:03:23.000 --> 00:03:31.000
まず、着色されたボタン構成を作成し、そのタイトルを設定し、以前にボタンをどのように設定したかを一致させます。

00:03:31.000 --> 00:03:36.000
次に、記入した設定でボタンを作成します。

00:03:36.000 --> 00:03:41.000
これはすでにかなりの改善ですが、トップを乗り越えましょう。

00:03:41.000 --> 00:03:50.000
私たちが行う次の改善は、ボタンに画像を追加し、それが一目で何をするかを簡単に決定することです。

00:03:50.000 --> 00:04:04.000
私たちのデザイナーは本当に後付けの位置に画像を望んでいるので、画像プロパティの設定に加えて、imagePlacementプロパティも設定し、画像を必要な場所に正確に配置します。

00:04:04.000 --> 00:04:10.000
しかし、新しい「カートに追加」ボタンに追加したい機能がさらに2つあります。

00:04:10.000 --> 00:04:21.000
1つ目は、UIButtonConfigurationのサブタイトル機能を使用して、複数のアイテムを注文したときに何が起こるかをプレビューすることです。

00:04:21.000 --> 00:04:29.000
2つ目は、ボタンが押されたときに、輪郭を描かれた画像から塗りつぶされたバージョンに切り替えることです。

00:04:29.000 --> 00:04:34.000
そのために、適切なタイミングで画像プロパティを更新する必要があります。

00:04:34.000 --> 00:04:43.000
これらの変更のいずれかが発生したときにボタンを正しく更新するために、configurationUpdateHandlerを追加します。

00:04:43.000 --> 00:04:52.000
configurationUpdateHandlerは、ボタンが更新が必要なときに呼び出され、一元化された変更を行うことができます。

00:04:52.000 --> 00:05:04.000
通常、ボタンの設定を変更するので、通常、開始設定を取得することから始まり、変更された設定の設定で終わります。

00:05:04.000 --> 00:05:13.000
ここでは、ボタンの既存の設定から始めますが、同じように簡単に新しいものを作成し、代わりにすべてのパラメータを記入することができます。

00:05:13.000 --> 00:05:17.000
まず、ボタンに正しい画像を設定しましょう。

00:05:17.000 --> 00:05:25.000
ボタンを押すと、isHighlightedはtrueを返し、カートシンボルの塗りつぶしバージョンを設定します。

00:05:25.000 --> 00:05:29.000
それ以外の場合は、概説されたバージョンを使用します。

00:05:29.000 --> 00:05:40.000
isHighlightedはUIButtonの状態であるため、その値が変更されたときにconfigurationUpdateHandlerが呼び出されるように自動的に手配します。

00:05:40.000 --> 00:05:46.000
次に、itemQuantityDescriptionが変更されたときにサブタイトルを更新します。

00:05:46.000 --> 00:05:50.000
しかし、itemQuantityDescriptionはUIButtonのプロパティではありません。

00:05:50.000 --> 00:05:58.000
値が変更されたときにconfigurationUpdateHandlerを呼び出すようにどのように手配しますか?

00:05:58.000 --> 00:06:07.000
お客様が購入するボタンの数を変更すると、アプリはitemQuantityDescriptionを更新します。

00:06:07.000 --> 00:06:27.000
[カートに追加]ボタンも確実に更新されるように、didSetハンドラーはsetNeedsUpdateConfigurationを呼び出し、configurationUpdateHandlerの呼び出しを手配し、ボタンの更新をトリガーします。

00:06:27.000 --> 00:06:36.000
Button Emporiumでは、気に入らなかったボタンに会ったことがなく、UIButtonConfigurationでは、好きなものがたくさんあります。

00:06:36.000 --> 00:06:42.000
次のボタンを更新する前に、他の機能をすばやく取り上げましょう。

00:06:42.000 --> 00:06:50.000
ボタンにアクティビティインジケーターが表示されるようになり、アプリがビジーであるというフィードバックを簡単に提供できるようになりました。

00:06:50.000 --> 00:07:01.000
ボタンの設定でshowsActivityIndicatorをtrueに設定するだけで、インジケーターが表示され、必要に応じて画像を置き換えます。

00:07:01.000 --> 00:07:11.000
ボタンのレイアウトの側面を調整するのは簡単で、ボタン内のコンテンツの配置をより詳細に制御できます。

00:07:11.000 --> 00:07:24.000
ここでは、contentInsetsがボタンの端にスペースを確保する方法を見ることができ、imagePaddingとtitlePaddingを使用すると、これらの要素間のスペースを増やすことができます。

00:07:24.000 --> 00:07:38.000
また、UIKitはこれらのコンポーネントを自動的にレイアウトしますが、タイトルが互いにどのように整列するか、およびボタンのコンテンツがコンテンツ領域内でどのように整列するかを制御できます。

00:07:38.000 --> 00:07:47.000
セマンティックなスタイリングにより、細部を掘り下げることなく、まとまりのあるスタイルのボタンを簡単に作成できます。

00:07:47.000 --> 00:08:11.000
シンプルな塗りつぶしボタンから始めて、baseBackgroundColor、baseForegroundColor、cornerStyle、およびbuttonSizeを設定してカスタマイズされたボタンを生成し、余分な労力をかけずに押したり無効にしたりなどのテーマ別の状態を自動的に取得します。

00:08:11.000 --> 00:08:27.000
しかし、多くの自動化があっても、非常に重要な「チェックアウト」ボタンのように、必要なものを正確に持っていなければならないときのために、詳細なカスタマイズを行うのは簡単です。

00:08:27.000 --> 00:08:35.000
ボタンエンポリアムのお客様が最小限の手間でボタンを入手できるように、チェックアウトボタンは大きくて見つけやすいです。

00:08:35.000 --> 00:08:45.000
それを構築するには、塗りつぶされたスタイルから始めて、そのサイズを大きく設定し、その画像とタイトルを記入します。

00:08:45.000 --> 00:08:52.000
ボタンをタップすると、カートの処理を開始し、アクティビティインジケーターを表示したいと考えています。

00:08:52.000 --> 00:09:02.000
これを有効にするには、configurationUpdateHandlerを追加して、設定のshowsActivityIndicatorプロパティを管理します。

00:09:02.000 --> 00:09:17.000
以前と同様に、isCartBusyプロパティの変更は、チェックアウトボタンでsetNeedsUpdateConfigurationを呼び出して、必要に応じてアクティビティインジケータのオンとオフを確認します。

00:09:17.000 --> 00:09:22.000
そして、青はいいですが、私たちは印象を残すようにしたいです。

00:09:22.000 --> 00:09:32.000
したがって、正確な色が背景に使用されるように、UIButtonConfigurationのUIBackgroundConfigurationのbackgroundColorを設定しましょう。

00:09:32.000 --> 00:09:35.000
その方がずっといい。

00:09:35.000 --> 00:09:46.000
UIButtonConfigurationがボタンをこれまで以上に良く見せる方法について話し合ったので、エリックに渡して、ボタンができる他の新しいことについて話します。

00:09:46.000 --> 00:09:48.000
ありがとう、デビッド。

00:09:48.000 --> 00:09:56.000
ボタンの外観をカスタマイズする方法を確認したので、ボタンの機能をカスタマイズする方法を調べてみましょう。

00:09:56.000 --> 00:10:03.000
ほとんどのボタンは単純なプッシュボタンですが、時にはボタンに少し余分な動作が必要です。

00:10:03.000 --> 00:10:07.000
最初に調べるのは、トグルボタンです。

00:10:07.000 --> 00:10:11.000
これらのボタンは、UIControlから選択した状態を保持します。

00:10:11.000 --> 00:10:16.000
ボタンを押すたびに自動的にオンとオフを切り替えます。

00:10:16.000 --> 00:10:21.000
また、必要に応じてプログラムで変更することもできます。

00:10:21.000 --> 00:10:34.000
オン状態とオフ状態の組み込みスタイルに加えて、UIButtonConfigurationを利用して、これらのオン状態とオフ状態のプレゼンテーションをカスタマイズできます。

00:10:34.000 --> 00:10:37.000
iOSのトグルボタンの概念は新しいものではありません。

00:10:37.000 --> 00:10:44.000
ミュージックアプリの歌詞ボタンのようないくつかのボタンに気づいたかもしれません。

00:10:44.000 --> 00:10:50.000
このようにプレーヤーで歌詞のオンとオフを切り替えます。

00:10:50.000 --> 00:10:59.000
機能的には、これはUISwitchと同じように機能しますが、UIのスペースを節約し、アプリのデザインにはるかに適しています。

00:10:59.000 --> 00:11:05.000
トグルボタンは、カレンダーのこのようなUIBarButtonItemsでも機能します。

00:11:05.000 --> 00:11:10.000
上部のバーでは、日の詳細を有効または無効にすることができます。

00:11:10.000 --> 00:11:14.000
それを押すと、詳細の表示が切り替えます。

00:11:14.000 --> 00:11:23.000
この場合、UIBarButtonItemには、選択した状態に対して読み取りまたは設定できる新しい選択プロパティがあります。

00:11:23.000 --> 00:11:28.000
それでは、ボタンエンポリアムを更新して、トグルボタンを採用しましょう。

00:11:28.000 --> 00:11:32.000
私たちのアプリでは、購入したいボタンの種類を閲覧できます。

00:11:32.000 --> 00:11:36.000
しかし、閲覧している間、私は現在在庫があるものを熟読したいだけです。

00:11:36.000 --> 00:11:44.000
ここでは、絶対にすべてを表示することと、在庫があり、出荷する準備ができているものを切り替えるためのトグルボタンを追加しました。

00:11:44.000 --> 00:11:46.000
これはトグルボタンの素晴らしい使い方です。

00:11:46.000 --> 00:11:54.000
1つの利点は、それがボタンであるため、ラベルがその一部であり、ここで何が切り替えられているかを非常に明確にすることです。

00:11:54.000 --> 00:11:57.000
では、どうやって作ったのか調べてみましょう。

00:11:57.000 --> 00:12:01.000
ここでは、ボタンの設定の基本があります。

00:12:01.000 --> 00:12:06.000
トグルボタンにするには、changesSelectionAsPrimaryActionをtrueに設定するだけです。

00:12:06.000 --> 00:12:08.000
今はトグルボタンです。

00:12:08.000 --> 00:12:11.000
それでおそれ。

00:12:11.000 --> 00:12:16.000
選択した状態を内部モデルに合わせて設定することもできます。

00:12:16.000 --> 00:12:22.000
さて、オンとオフの2つの状態だけで、もう少し複雑なものが欲しいかもしれません。

00:12:22.000 --> 00:12:28.000
切り替えるオプションが増えたボタンについては、ポップアップボタンを使用できます。

00:12:28.000 --> 00:12:34.000
ポップアップボタンは、iOSにすでに存在するプルダウンボタンに近いものです。

00:12:34.000 --> 00:12:37.000
これらは押すとメニューが表示されます。

00:12:37.000 --> 00:12:46.000
ポップアップボタンはそれをさらに一歩進め、メニュー要素の1つだけが選択されていることを確認します。

00:12:46.000 --> 00:12:50.000
また、現在の選択をタイトルと画像として表示します。

00:12:50.000 --> 00:12:54.000
ポップアップボタンの構築は、実際にはプルダウンボタンの構築の延長です。

00:12:54.000 --> 00:12:57.000
それらについては、メニューがボタンに割り当てられます。

00:12:57.000 --> 00:13:04.000
メニューをデフォルトのアクションにするには、showsMenuAsPrimaryActionプロパティをtrueに設定します。

00:13:04.000 --> 00:13:11.000
ポップアップボタンは、changesSelectionAsPrimaryActionプロパティをオンにするだけで、さらに一歩進みます。

00:13:11.000 --> 00:13:13.000
必要なのはそれだけです。

00:13:13.000 --> 00:13:20.000
それらはUISegmentedControlのように機能しますが、セグメント化されたコントロールに収まる選択肢が多い場合に便利です。

00:13:20.000 --> 00:13:26.000
また、選択肢に固有の階層がある場合にも役立ちます。

00:13:26.000 --> 00:13:30.000
このスタイルのボタンのいくつかの例が今日存在します。

00:13:30.000 --> 00:13:36.000
たとえば、電話アプリはポップアップボタンを使用して、発信通話のSIMを切り替えます。

00:13:36.000 --> 00:13:39.000
そして、ここでボタンはメニューを表示します。

00:13:39.000 --> 00:13:42.000
セカンダリを選択すると、回線が切り替わります。

00:13:42.000 --> 00:13:47.000
その結果、ボタンは新しい発信回線に更新されます。

00:13:47.000 --> 00:13:52.000
ラベルと画像が更新され、新しい選択が表示されます。

00:13:52.000 --> 00:13:56.000
同様に、Button Emporiumではこれを使用しています。

00:13:56.000 --> 00:14:00.000
ボタンを閲覧しているときは、さまざまな色のボタンがあります。

00:14:00.000 --> 00:14:11.000
色の数は選択できる固定セットですが、セグメント化されたコントロールには大きすぎるかもしれませんが、本当にインラインで変更したいほど小さいです。

00:14:11.000 --> 00:14:16.000
これは、選択をボタンのタイトルにしたいので、ポップアップボタンの素晴らしい使い方です。

00:14:16.000 --> 00:14:23.000
その後、すべての色の選択を提示することができます。

00:14:23.000 --> 00:14:28.000
そして、新しい選択では、私たちのアプリは色の選択のために更新することができます。

00:14:28.000 --> 00:14:31.000
そのコードを調べてみましょう。

00:14:31.000 --> 00:14:37.000
ここでは、実際に更新できる簡単なプルダウンメニューを作成するためのコードがあります。

00:14:37.000 --> 00:14:42.000
トグルボタンと同様に、changesSelectionAsPrimaryActionをtrueに切り替えます。

00:14:42.000 --> 00:14:45.000
そして今、それはポップアップボタンです。

00:14:45.000 --> 00:14:57.000
リストの最初の色だけでなく、特定の色をデフォルトの選択にしたい場合は、メニューを設定するときにその色を「オン」に事前に割り当てることができます。

00:14:57.000 --> 00:15:01.000
これにより、デフォルトの選択になります。

00:15:01.000 --> 00:15:11.000
常に正確に単一の要素を持つ現在の選択された要素についてボタンのメニューを尋ねることで、選択を確認できます。

00:15:11.000 --> 00:15:20.000
また、コードで新しいものを設定する必要がある場合は、ボタンのメニュープロパティから要素の状態を変更するだけです。

00:15:20.000 --> 00:15:32.000
ポップアップボタンはInterface Builderでも作成できますが、この場合、固定リストを使用する代わりにサーバーから色を動的に取得したいので、コードで行います。

00:15:32.000 --> 00:15:43.000
Interface Builderで新しいボタンシステムとボタンタイプの使用の詳細については、「スタイルでインターフェイスを構築する」ビデオをご覧ください。

00:15:43.000 --> 00:15:49.000
これらの新しいボタンタイプの最良の部分の1つは、Mac Catalystで自動的に動作することです。

00:15:49.000 --> 00:15:56.000
Macユーザーは、プルダウン、ポップアップ、トグルボタンなど、ボタンが特定の方法で見え、動作することを期待しています。

00:15:56.000 --> 00:16:02.000
これらのiOSボタンを使用すると、自動的にMacバージョンに更新されます。

00:16:02.000 --> 00:16:17.000
ここでは、プレゼンテーションを通して使用してきたように、iPadアプリから選択したボタンがあります。これには、デフォルトのボーダーレスボタンと、新しい構成を使用するボタン、ポップアップボタンとプルダウンボタンが含まれます。

00:16:17.000 --> 00:16:21.000
そして、Mac Catalystの手動変更はありません。

00:16:21.000 --> 00:16:24.000
経験豊富なMacユーザーが期待する通りです。

00:16:24.000 --> 00:16:31.000
プルダウンボタンとポップアップボタンのMacインジケーターを含む、標準のベゼルボタンがあります。

00:16:31.000 --> 00:16:40.000
しかし、場合によっては、iPadボタンの余分なカスタマイズは、Macアプリでもより適切かもしれません。

00:16:40.000 --> 00:16:47.000
そのため、ボタンは動作スタイルを自動のデフォルトからiPadに変更することをサポートします。

00:16:47.000 --> 00:16:54.000
これは、先ほど作成したチェックアウトボタンのように、アプリ内の非常に目立つカスタムボタンに役立ちます。

00:16:54.000 --> 00:17:02.000
Mac Catalystアプリの構築とカスタマイズの詳細については、「Mac Catalystの新機能」ビデオをご覧ください。

00:17:02.000 --> 00:17:12.000
ポップアップボタンの例で気付いたかもしれませんが、機能の多くはUIMenuの新機能と既存の機能の上に構築されています。

00:17:12.000 --> 00:17:20.000
UIMenuは、多くの素晴らしいインタラクションのために、UIButtonとUIBarButtonItemと本当にうまくペアになります。

00:17:20.000 --> 00:17:26.000
ポップアップボタンとプルダウンボタンの両方を作成するために、ボタンの動作を調整する方法を検討しました。

00:17:26.000 --> 00:17:40.000
iOSとiPadOSでは、これらの動作は視覚的なカスタマイズとは独立しているため、UIButtonConfigurationと簡単に組み合わせて、さまざまなボタンスタイルを作成できます。

00:17:40.000 --> 00:17:49.000
これらのボタンは、より明確にするためにメニュー項目に字幕を持つ機能など、メニューの改善の恩恵も受けます。

00:17:49.000 --> 00:17:58.000
さらに、iOSとiPadOSのサブメニューナビゲーションも改善され、メニュー内に階層を作成できるようになりました。

00:17:58.000 --> 00:18:05.000
また、場合によっては、プルダウンボタンのサブメニューを単一選択メニュー自体として動作させたい場合があります。

00:18:05.000 --> 00:18:11.000
これは、たとえば、アクションメニュー内に「ソートバイ」メニューがある場合に便利です。

00:18:11.000 --> 00:18:16.000
新しいメニューの改善のいくつかは、これをはるかに簡単に作成します。

00:18:16.000 --> 00:18:22.000
これは、コードのサブメニューを使用したカスタムプルダウンバーボタンアイテムです。

00:18:22.000 --> 00:18:27.000
いくつかのアクションがあり、次に結果をソートするためのサブメニューがあります。

00:18:27.000 --> 00:18:36.000
そのサブメニュー内のメニュー項目を手動でオンとオフにするのではなく、このサブメニューを作成するときに単一の選択用であることを示します。

00:18:36.000 --> 00:18:44.000
これで、ポップアップボタンと同じ自動選択動作を取得しますが、サブメニュー内だけです。

00:18:44.000 --> 00:18:51.000
選択した要素は1つだけ許可され、選択した要素はユーザーがタップすると更新されます。

00:18:51.000 --> 00:18:58.000
ポップアップメニューで以前に行ったのとまったく同じ方法で、コードで更新またはアクセスできます。

00:18:58.000 --> 00:19:03.000
また、メニューに独自のサブメニューがある場合、単一選択の動作が機能します。

00:19:03.000 --> 00:19:08.000
サブツリー全体で一度に選択できる要素は1つだけです。

00:19:08.000 --> 00:19:20.000
また、selectedElementsプロパティにはサブメニューの選択が含まれているため、サブメニューがないのと同じくらい簡単にアクセスできます。

00:19:20.000 --> 00:19:22.000
だから、それがあなたのアプリでより良いボタンを作る方法です。

00:19:22.000 --> 00:19:33.000
ボタンに構成を追加して、スタイリングをより詳細に制御し、プラットフォームとの一貫性を保ちながら、より豊かなスタイリングのロックを解除します。

00:19:33.000 --> 00:19:42.000
また、既存のピッカーインターフェイスまたはコントロールをポップアップボタンまたはトグルボタンに置き換えて、より合理化されたインタラクションを得る方法も検討します。

00:19:42.000 --> 00:19:48.000
これらの変更により、削除または簡略化できるUIButtonサブクラスが見つかる可能性があります。

00:19:48.000 --> 00:19:56.000
また、システムはボタンをよりよく理解できるため、Mac Catalystの変換が自動的に向上します。

00:19:56.000 --> 00:20:01.000
ご参加いただきありがとうございます。ボタンの世界を深く掘り下げて楽しんでいただければ幸いです。

00:20:01.000 --> 23:59:59.000
[明るい音楽]。

