WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:20.000
パトリック・アングル:こんにちは!私はWebKit Developer ExperienceチームのエンジニアであるPatrickです。今年のWeb Inspectorで新しく追加された多くのエキサイティングな機能と改善点を紹介できることを嬉しく思います。

00:00:20.000 --> 00:00:30.000
Web InspectorはmacOSのSafariの一部であり、Web開発者やデザイナーがWebページやWebアプリケーションを検査するための豊富なツールセットにアクセスできるようにします。

00:00:30.000 --> 00:00:40.000
Webページ上のすべてのリソースとアクティビティを検査でき、macOS、iOS、iPadOS、tvOSでシームレスに動作します。

00:00:40.000 --> 00:00:57.000
今年は、CSSグリッドを視覚化するための新しいオーバーレイ、ブレークポイントの強化、Webインスペクタで監査を作成および編集する機能から、Webインスペクタの新機能を紹介することに興奮しています。

00:00:57.000 --> 00:01:02.000
これらの新機能について話す前に、以前にWebインスペクタを使用したことがない場合は、それを有効にする必要があります。

00:01:02.000 --> 00:01:08.000
Safariの環境設定の「詳細」タブで、「メニューバーに開発メニューを表示」を有効にします。

00:01:08.000 --> 00:01:15.000
Web インスペクタは、[開発] メニューの [Web インスペクタを表示] 項目を使用して開くことができます。

00:01:15.000 --> 00:01:20.000
Webインスペクタが有効になったので、今年最初の新しいツールであるグリッドオーバーレイを見てみましょう。

00:01:20.000 --> 00:01:24.000
最近のウェブページのレイアウトはかなり複雑になる可能性があります。

00:01:24.000 --> 00:01:36.000
CSSグリッドは、デザイナーが信じられないほど強力で、印刷デザインで働いたことのある人なら誰でもすぐに馴染みのある方法でコンテンツを簡単にレイアウトできる2次元レイアウトシステムです。

00:01:36.000 --> 00:01:45.000
行と列の構造が定義され、要素がグリッドに配置または分散され、柔軟でありながら予測可能なレイアウトを実現します。

00:01:45.000 --> 00:01:54.000
グリッドは、Webページをレイアウトするための非常に有能な方法ですが、レイアウトがより複雑になるにつれて、多くの新しい質問や混乱をもたらす可能性があります。

00:01:54.000 --> 00:01:57.000
例えば、なぜ私のコラムはこのサイズなのですか?

00:01:57.000 --> 00:02:02.000
それとも、なぜこの青い箱がここにあるのですか?

00:02:02.000 --> 00:02:20.000
以前はWebインスペクタでは、これらの差し迫った質問に対する主な回答源は、要素タブのスタイルサイドバーで、今年は独自の独立したサイドバーに移動し、計算されたスタイルなどの他のパネルと一緒に一致するCSSルールを表示できるようになりました。

00:02:20.000 --> 00:02:25.000
グリッドのオーサグラニングスタイルを見ると、そのレイアウトに関する情報を収集できます。

00:02:25.000 --> 00:02:29.000
しかし、グリッドのオーサされたスタイルは、そこに道の一部を得るだけです。

00:02:29.000 --> 00:02:34.000
Webインスペクタでこの情報を消化するより視覚的な方法があれば、それは素晴らしいことではないでしょうか?

00:02:34.000 --> 00:02:35.000
さて、今あります!

00:02:35.000 --> 00:02:43.000
DOMツリーの要素を見ると、CSSグリッドである各要素の横に新しいクリック可能なグリッドバッジが表示されます。

00:02:43.000 --> 00:02:47.000
ここでは、私たちのページに2つのCSSグリッドのうちの1つのバッジが表示されます。

00:02:47.000 --> 00:03:03.000
この新しいバッジをクリックしてWebページに戻ると、既存のコンテンツの上に新しいグリッドオーバーレイが表示され、作成したCSSを読んで、それがあなたが思うことを期待する精神的な体操なしに、グリッドのレイアウトをインラインで視覚化することができます。

00:03:03.000 --> 00:03:07.000
しかし、これがあなたのグリッドについて見たい正確な情報でない場合はどうなりますか?

00:03:07.000 --> 00:03:11.000
グリッドエリア、線名、その他のオプションはどうですか?

00:03:11.000 --> 00:03:14.000
それに答えるために、ウェブインスペクタに戻りましょう。

00:03:14.000 --> 00:03:22.000
ここでは、グリッドオーバーレイに関連するすべてのオプションとコントロールを表示する別の新機能、レイアウトパネルを見つけることができます。

00:03:22.000 --> 00:03:26.000
まず、ページ上のグリッドのリストを見てみましょう。 ページ上のグリッドのリストを見てみましょう。

00:03:26.000 --> 00:03:32.000
ここでは、すべてのグリッドオーバーレイを一度にオンまたはオフに切り替えるオプションがあります。

00:03:32.000 --> 00:03:36.000
または、単一のグリッドのオーバーレイをオフまたはオンに切り替えることもできます。

00:03:36.000 --> 00:03:42.000
各グリッドは、リストで識別するために、対応するCSSセレクタでリストされています。

00:03:42.000 --> 00:03:54.000
リストされている各グリッドの横には、グリッドオーバーレイの色をインタラクティブに変更できるカラースウォッチがあり、そのグリッドオーバーレイが有効になっている場合、各要素のバッジはこの色を使用します。

00:03:54.000 --> 00:03:59.000
Webインスペクタは、次回同じページが読み込まれたときに、各要素の色を記憶します。

00:03:59.000 --> 00:04:11.000
次に、これらのオーバーレイの表示方法を制御するオプションを見てみましょう。トラックサイズから始めて、グリッドの各トラック（行または列）のオーサ整理されたサイズを表示します。

00:04:11.000 --> 00:04:15.000
ここのように、小数単位と最小コンテンツの組み合わせが使用されます。

00:04:15.000 --> 00:04:22.000
次に、行番号は、グリッド内の特定の行または列に子要素を配置するために使用できる値を示します。

00:04:22.000 --> 00:04:34.000
最後の明示的なグリッド線から数える行番号を表す負の行番号をラベル内に配置し、正の行番号と一緒に配置し、アイテムの配置方法を選択できるようにしました。

00:04:34.000 --> 00:04:43.000
行名は、エリア名と明示的に名前が付けられた行に基づいて、グリッド内の行を参照する別の方法を提供します。

00:04:43.000 --> 00:04:53.000
エリア名を使用すると、グリッド内の各名前付きエリアを表示できます。これは、希望する配置の両側の線に対処せずに、グリッドに子供を配置したい場合に役立ちます。

00:04:53.000 --> 00:04:58.000
各エリアの中央にエリア名を配置し、各エリアを太いストロークで概説しました。

00:04:58.000 --> 00:05:11.000
最後に、この2番目のグリッドコンテナで拡張グリッドラインをオンにすると、ページの端まで拡張されたトラックラインを見ることができ、グリッドの配置をページ上の他の要素と視覚的に比較することができます。

00:05:11.000 --> 00:05:20.000
パフォーマンスを念頭に置いてオーバーレイを構築し、ページをスムーズにスクロールしながら、必要なだけ有効にすることができます。

00:05:20.000 --> 00:05:26.000
バターのように滑らかなスクロールを提供しながら、何十ものグリッドを同時に表示できます。

00:05:26.000 --> 00:05:35.000
それらは、ウィキペディアからのこの垂直設定テキスト、右から左へのテキスト方向、およびそれらの組み合わせのようなすべての書き込みモードで動作します。

00:05:35.000 --> 00:05:47.000
また、これらのオーバーレイは、Safari 15または最新のSafariテクノロジープレビューを搭載したMacからリモートで検査する場合、iOS 15およびiPadOS 15でも利用できます。

00:05:47.000 --> 00:06:02.000
グリッドはウェブ上で非常に重要なレイアウトツールであると考えています。そのため、これらのツールをWebインスペクタに持ち込み、すべてのプラットフォームでグリッドを視覚化およびデバッグして、信じられないほどのレイアウトを作成し続けることができます。

00:06:02.000 --> 00:06:09.000
それでは、グリッドオーバーレイがウェブページの問題をよりよく理解し、解決するのにどのように役立つかを見てみましょう。

00:06:09.000 --> 00:06:16.000
私が取り組んできたウェブページを見てみましょう。それは、私が毎朝見たい情報の簡単な概要を示しています。

00:06:16.000 --> 00:06:25.000
通勤、その日の天気予報を見ることができます - 今夜はジャケットが欲しいようです！ - そして、今日の仕事の後に店で受け取るもののリスト

00:06:25.000 --> 00:06:32.000
このページはCSSグリッドでレイアウトされており、これらのさまざまなサイズのタイルを簡単に作成し、私のページに配置できます。

00:06:32.000 --> 00:06:38.000
しかし、待って、ダッシュボードを飾るために使用したこれらの楽しい絵文字の1つを配置するのを忘れたようです。

00:06:38.000 --> 00:06:41.000
それは私の絵文字の残りの部分と一緒にここに属しています!

00:06:41.000 --> 00:06:46.000
問題ありません。新しいグリッドオーバーレイを使用して、好きな場所に正確に配置できます。

00:06:46.000 --> 00:06:52.000
ページの検査を開始するには、問題のある要素を右クリックして[要素の検査]を選択します。

00:06:52.000 --> 00:06:58.000
Inspect Elementが表示されない場合は、先に説明したようにWebインスペクタを有効にしてください。

00:06:58.000 --> 00:07:05.000
次に、詳細サイドバーのレイアウトパネルを選択し、ページ上のすべてのグリッドコンテキストを確認できます。

00:07:05.000 --> 00:07:15.000
これらのグリッドのどれで作業したいのかよく覚えていませんが、すべてのグリッドオーバーレイの上部チェックボックスをチェックすることで、すべてのオーバーレイを一度に有効にすることができます。

00:07:15.000 --> 00:07:21.000
今、私が作業したいグリッドコンテキストは、私のすべてのタイルを保持するピンクのものです。

00:07:21.000 --> 00:07:27.000
このグリッドコンテキストのリストでチェックを外して、他の2つのオーバーレイをオフにします。

00:07:27.000 --> 00:07:32.000
そして今、私は興味を持っているグリッドオーバーレイだけが残っています。

00:07:32.000 --> 00:07:47.000
あなたが私のような人なら、手元のタスクを実行するために必要な情報だけを正確に見たいかもしれないので、迷子の絵文字を配置するための行番号だけに集中できるように、トラックサイズラベルを無効にします。

00:07:47.000 --> 00:07:58.000
そして今、残りの行番号ラベルは、私の絵文字を配置したい場所を正確に見ることができます:列トラックライン6と行トラックライン4。

00:07:58.000 --> 00:08:08.000
私は明示的に右クリックして、私の問題のある絵文字のためにタイルを検査したので、それはすでに私のために選択されており、私は私の修正をテストするためにそのスタイルを編集するためにすぐにジャンプすることができます。

00:08:08.000 --> 00:08:23.000
また、新しい3パネルレイアウトを使用すると、レイアウトパネルを同時に表示できます。これは、パネルを常に切り替えることなく、ページで異なるスタイルをテストしながら表示しているラベルやグリッドオーバーレイを切り替えたい場合に最適です。

00:08:23.000 --> 00:08:32.000
スタイルパネルで、スタイル属性セクションをクリックして、新しいプロパティ、グリッドエリアを追加します。

00:08:32.000 --> 00:08:43.000
次に、コロンを入力して新しいプロパティの値の編集にジャンプし、行トラックライン4と列トラックライン6に「4 / 6」と入力します。

00:08:43.000 --> 00:08:46.000
完璧です、私の絵文字は私が今欲しいところです。

00:08:46.000 --> 00:08:57.000
しかし、もう少し考えてみると、後でグリッドから行や列を追加または削除しても、この絵文字が常にこのコーナーにあることを確認したいです。

00:08:57.000 --> 00:09:06.000
行トラックライン4と列トラックライン6の値を与えたのと同じラベルに、それぞれに2番目の行番号-3が表示されます。

00:09:06.000 --> 00:09:16.000
この負の行番号は、実際に私が明示的に定義したグリッドの終わりから私の絵文字3つのトラックラインを保持し、私の状況に最適です。

00:09:16.000 --> 00:09:31.000
グリッドエリアプロパティの値をこれらの新しい値「-3 / -3」に更新し、絵文字がまだ正しい場所にあることを確認し、別の行を追加したり、グリッドから別の列を削除したりすると、引き続き続きます。

00:09:31.000 --> 00:09:41.000
Web Inspectorに登場するこの新しいオーバーレイは、ページのレイアウトをすばやく調整するのに役立ち、既存のレイアウトを理解し、新しいレイアウトを設計するのに最適です。

00:09:41.000 --> 00:09:46.000
では、ブレークポイントによるJavaScriptデバッグの改善について話しましょう。

00:09:46.000 --> 00:09:54.000
スクリプトの場合、スクリプトが正常に機能しない理由を理解しようとすると、しばしばconsole.logから始めます。

00:09:54.000 --> 00:09:58.000
あるいは、ブレークポイントを試したことがない場合は、それらをチェックすることを強くお勧めします。

00:09:58.000 --> 00:10:05.000
それらは強力で、すぐにわかるように、以前よりもさらに設定可能です。

00:10:05.000 --> 00:10:14.000
ブレークポイントを初めて使用する場合、開始する最も簡単な方法は、一時停止したい行でJavaScriptの行溝をクリックして、[ソース]タブで開始することです。

00:10:14.000 --> 00:10:32.000
これにより、ブレークポイントが作成され、到達すると、その行の先頭でスクリプトを一時停止し、行の実行を待ちます。一度に1つのステートメントでコードをステップスルーしたり、特定のステートメントを深く掘り下げたり、あらゆる段階で変数の状態を表示したりできます。

00:10:32.000 --> 00:10:34.000
しかし、ブレークポイントにはもっと多くのものがあります!

00:10:34.000 --> 00:10:39.000
実際、5つの異なるタイプのブレークポイントがあり、あらゆる機会に1つあります。

00:10:39.000 --> 00:10:59.000
デバッガステートメント、例外、アサーションのブレークポイントがあります。JavaScriptの行で設定できるJavaScriptブレークポイント。クリック、タイムアウト、インターバル、アニメーションフレームなどのイベントが処理されたときに一時停止するイベントブレークポイント。DOMノードに関連するアクションが発生したときに一時停止するDOMブレークポイント。

00:10:59.000 --> 00:11:06.000
これらは、[要素] タブ、または Web インスペクタのノード プレビューのコンテキスト メニューから追加できます。

00:11:06.000 --> 00:11:17.000
また、URLブレークポイントは、XMLHttpRequestやFetchなどのAPIを介してURLに対してネットワーク要求が行われようとしているときに一時停止します。

00:11:17.000 --> 00:11:23.000
ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、JavaScriptブレークポイントを設定できます。

00:11:23.000 --> 00:11:27.000
ここでは、ブレークポイントの多くの側面を制御できます。

00:11:27.000 --> 00:11:31.000
これらの各オプションを見てみましょう。 それぞれのオプションを見てみましょう。

00:11:31.000 --> 00:11:35.000
ブレークポイントがヒットするには真でなければならない条件を設定できます。

00:11:35.000 --> 00:11:50.000
今年は、要素タブで現在選択されているDOMノードを参照するなど、ブレークポイント条件とアクションの式内でWebインスペクタのコンソールタブAPIの使用をサポートするようになりました。

00:11:50.000 --> 00:12:03.000
場合によっては、ブレークポイント条件は、いくつかの反復が完了するまで停止したくないループ内のように、ヒットする前にブレークポイントを無視する回数としてよりよく表現されるかもしれません。

00:12:03.000 --> 00:12:09.000
これは、ブレークポイントがいつ発火するかを制御する条件に加えて、または代わりに使用できます。

00:12:09.000 --> 00:12:18.000
条件に加えて使用すると、無視された呼び出しの数は、条件が満たされた場合にのみ増加します。

00:12:18.000 --> 00:12:52.000
次に、コードがJavaScriptソースにインラインであるかのように、変数へのアクセスを使用してコンテキストでJavaScriptを評価するなど、ブレークポイントがヒットしたときに実行されるアクションを定義できます。テンプレート文字列リテラルで簡単にコンソールにメッセージを記録します。ブレークポイントがヒットしたことを音声で知るようにシステムビープ音を再生します。プローブ式を定義します。これは、ソースタブの詳細サイドバーのプローブパネル

00:12:52.000 --> 00:13:12.000
今年の新機能では、JavaScript式をサポートするアクションタイプは、ユーザーのジェスチャーをエミュレートするように設定できます。これは、ビデオの再生など、通常はユーザーが開始する必要があるJavaScript APIと対話する場合に役立ち、Webページのソースの変更を実装する前に新しい動作をすばやくテストできます。

00:13:12.000 --> 00:13:20.000
これらのアクションをいくつでも組み合わせて、任意のアクションタイプの複数を含むブレークポイントをカスタマイズできます。

00:13:20.000 --> 00:13:34.000
最後に、基礎となるWebページを変更せずにテストするためのロギングやクイックパッチを追加したい状況で、アクションを評価して実行した後、ブレークポイントを自動的に継続させることができます。

00:13:34.000 --> 00:13:45.000
ブレークポイントを設定するためのこれらのオプションは非常に汎用性があり、今年はJavaScriptブレークポイントだけでなく、すべてのブレークポイントタイプで利用可能になりました。

00:13:45.000 --> 00:13:59.000
これにより、ボタンなどの特定のタイプの要素のクリックイベントのみを一時停止したり、特定のURLに対してネットワーク要求が行われたときにシステムビープ音を再生したりするなど、強力なブレークポイント条件を設定できます。

00:13:59.000 --> 00:14:12.000
すべてのブレークポイントタイプで利用可能なこれらの構成オプションは、適切なタイミングでノイズをカットしたり、少しノイズを作ったりすることで、すでに優れたデバッグツールをさらに良くします。

00:14:12.000 --> 00:14:20.000
さて、私のダッシュボードのウェブページに戻り、これらの新しいツールがパッチのデバッグとテストを簡単にする問題を見てみましょう。

00:14:20.000 --> 00:14:27.000
私は最近、通勤タイルに、推定通勤時間を他の人と共有するために使用したいボタンを追加しました。

00:14:27.000 --> 00:14:30.000
いつ遅れるかわからない。

00:14:30.000 --> 00:14:34.000
残念ながら、共有ボタンをクリックすると、何も起こりません。

00:14:34.000 --> 00:14:42.000
さらに悪いことに、このタイルに取り組んでから数日が経ちましたが、このボタンのクリックイベントをどこで処理するか覚えていません。

00:14:42.000 --> 00:14:48.000
幸いなことに、イベントブレークポイントを使用してクリックイベントハンドラで一時停止し、コードを見つけることができます。

00:14:48.000 --> 00:14:52.000
ソースタブでイベントブレークポイントを作成できます。

00:14:52.000 --> 00:15:02.000
ナビゲーションサイドバーのブレークポイントセクションの右上にあるプラスをクリックし、イベントブレークポイントを選択すると、新しいイベントブレークポイントを定義できます。

00:15:02.000 --> 00:15:08.000
クリックするイベントを設定し、Returnキーを押して新しいブレークポイントを作成します。

00:15:08.000 --> 00:15:12.000
ナビゲーションサイドバーにクリックブレークポイントが表示されました。

00:15:12.000 --> 00:15:16.000
このイベントブレークポイントは、ボタンをクリックすると一時停止するはずです。

00:15:16.000 --> 00:15:24.000
しかし、まず、通勤の最新の時間の見積もりを共有していることを確認したいので、更新ボタンをクリックして--おっと!

00:15:24.000 --> 00:15:34.000
私のイベントブレークポイントは、共有ボタンをクリックしたときにのみ一時停止したいにもかかわらず、更新ボタンを含むすべてのクリックイベントで実際に一時停止します。

00:15:34.000 --> 00:15:40.000
今年利用可能な新しい設定オプションを使用して、ブレークポイントを変更しましょう。

00:15:40.000 --> 00:15:45.000
ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、ブレークポイントを編集できます。

00:15:45.000 --> 00:15:50.000
ここでは、イベントブレークポイントの設定オプションを含むポップオーバーを取得します。

00:15:50.000 --> 00:15:55.000
必要なときだけ一時停止するように条件を追加する必要があります。

00:15:55.000 --> 00:16:09.000
この場合、Web InspectorコンソールAPIを使用して、現在のイベントを「$event」で取得し、イベントのターゲットが共有ボタンと等しいかどうかを確認できます。

00:16:09.000 --> 00:16:22.000
この特定のボタンのブレークポイントをハードコーディングする代わりに、別のコンソールAPIを使用して、イベントのターゲットが「要素」タブで現在選択されているDOMノードであるかどうかを確認します。

00:16:22.000 --> 00:16:28.000
設定ポップオーバーをクリックすると、すべての変更が自動的に適用されます。

00:16:28.000 --> 00:16:36.000
更新ボタンをクリックすると、まだブレークポイントが一時停止しているので、[続行]ボタンをクリックして、ページでスクリプトの実行を再開します。

00:16:36.000 --> 00:16:41.000
これで、更新ボタンをクリックすると、通勤時間が更新され、ブレークポイントがヒットしません。

00:16:41.000 --> 00:16:52.000
しかし、共有ボタンを右クリックし、要素の検査を選択して選択した要素にすると、共有ボタンとビンゴをクリックできるようになりました!

00:16:52.000 --> 00:17:00.000
ブレークポイントは私が望んでいた場所で正確に一時停止し、共有ボタンが機能しない理由がわかりました。この機能を書くのを忘れました。

00:17:00.000 --> 00:17:11.000
ブレークポイントは、その日、または少なくともこのデモを再び保存し、ソースに戻って実装する前に変更をテストするために今すぐ共有をパッチするのに役立ちます。

00:17:11.000 --> 00:17:20.000
ライン溝をクリックし、ブレークポイントインジケーターを右クリックし、ブレークポイントの編集を選択することで、共有機能にブレークポイントを追加します。

00:17:20.000 --> 00:17:24.000
このブレークポイントに条件は必要ありませんが、アクションを追加したいです。

00:17:24.000 --> 00:17:29.000
デフォルトのアクションタイプであるEvaluate JavaScriptは、まさに私がここで欲しいものです。

00:17:29.000 --> 00:17:42.000
すでにデータで準備したオブジェクト「this.shareData」で「navigator.share」を呼び出すアクションにJavaScriptを追加します。

00:17:42.000 --> 00:17:50.000
この修正のテストの一環として、実際にスクリプトを一時停止する必要はないので、評価後に自動的に続行も有効にします。

00:17:50.000 --> 00:17:55.000
以前と同様に、ポップオーバーの外側をクリックすると、変更が保存されます。

00:17:55.000 --> 00:18:00.000
今のところクリックイベントのブレークポイントが終わったので、インジケーターをクリックして無効にしましょう。

00:18:00.000 --> 00:18:06.000
また、[続行]ボタンをクリックして、自分のページでスクリプトの実行を再開します。

00:18:06.000 --> 00:18:10.000
共有ボタンをクリックすると、共有メニューが表示されます。

00:18:10.000 --> 00:18:14.000
共有データが正しいことを確認するために、メモを選択します。

00:18:14.000 --> 00:18:18.000
これは正しいように見えるので、ソースコードに戻ってこの変更を加えることができます。

00:18:18.000 --> 00:18:20.000
すごい！

00:18:20.000 --> 00:18:28.000
ブレークポイントのこれらの強化により、ソースにconsole.logステートメントをペッパーすることなく、ソリューションを特定してテストすることが可能になりました。

00:18:28.000 --> 00:18:33.000
そして今、私は実用的な解決策を持っているので、私は私のソースに私の修正を追加することができます。

00:18:33.000 --> 00:18:42.000
それでは、監査のエキサイティングな新機能を見てみましょう。Webインスペクタでテストを作成および編集する機能です。

00:18:42.000 --> 00:18:48.000
監査タブの各テストはJavaScriptで書かれており、検査されたWebページに対して実行されます。

00:18:48.000 --> 00:18:56.000
これらのテストは、誤ったDOM構造をチェックしたり、設計システムルールを強制したり、アクセシビリティ属性を見逃していないことを確認したりするのに役立ちます。

00:18:56.000 --> 00:19:02.000
個々のテストに加えて、テストのグループを共有して実行できます。

00:19:02.000 --> 00:19:24.000
デフォルトでは、Webインスペクタには2つのテストグループがあります。監査の仕組みとそれらがサポートする機能のツアーを提供するデモ監査と、タイトルまたは代替テキストがすべての画像要素に設定されていることを確認するなど、ARIA仕様に従ってDOMアクセシビリティのベストプラクティスのサブセットをチェックする一連のアクセシビリティテストです。

00:19:24.000 --> 00:19:35.000
テストを選択して監査名の横にある[スタート]ボタンを使用してテストを実行するか、ナビゲーションサイドバーの上部にある[スタート]ボタンですべてのテストを実行できます。

00:19:35.000 --> 00:19:42.000
テストの実行後、各テストの結果と、合格と不合格の全体的な要約を見ることができます。

00:19:42.000 --> 00:19:48.000
障害がある場合は、それらの障害に関する情報を確認して、パッチを当てることができます。

00:19:48.000 --> 00:20:01.000
テストを共有したり、外部テキストエディタで編集したりするには、テストをエクスポートし、結果のJSONファイルに変更を加え、変更されたテストをWebインスペクタにインポートすることができます。

00:20:01.000 --> 00:20:09.000
このエクスポートとインポートのプロセスは、チーム全体またはコミュニティとテストを共有するのに最適です。

00:20:09.000 --> 00:20:15.000
そして今年は、新しい編集モードでテストの作成と編集をさらに簡単にします。

00:20:15.000 --> 00:20:27.000
ナビゲーションサイドバーの下部にある[編集]ボタンをクリックすると、[監査]タブが編集モードに変わり、新しいテストを作成したり、既存のテストを編集したりできるようになりました。

00:20:27.000 --> 00:20:37.000
デフォルトのデモ監査およびアクセシビリティテストグループは削除または編集できませんが、複製して複製を編集できることに注意してください。

00:20:37.000 --> 00:20:43.000
とりあえず、ナビゲーションサイドバーの[項目の作成]を使用して、新しいテストの作成を見てみましょう。

00:20:43.000 --> 00:20:46.000
新しいテストケース、またはテストケースのグループを作成できます。

00:20:46.000 --> 00:20:51.000
とりあえず、新しいテストケースの作成を見てみましょう。

00:20:51.000 --> 00:20:59.000
新しいテストケースを作成すると、ナビゲーションサイドバーに追加され、テストのデフォルトのコンテンツが編集できることがわかります。

00:20:59.000 --> 00:21:04.000
ここでは、設定できるいくつかの異なるものがあります。

00:21:04.000 --> 00:21:17.000
名前、テストの説明、およびテストがサポートする最小監査バージョンは、一部の機能がサポートされていない可能性のある古いバージョンのWebインスペクタで監査が実行されていないことを確認します。

00:21:17.000 --> 00:21:24.000
セットアップスクリプトは、すべてのトップレベルのテストまたはテストグループの前に実行されるJavaScriptです。

00:21:24.000 --> 00:21:30.000
これにより、このトップレベルのテストのすべてのテストが依存する共通のセットアップ機能を実行できます。

00:21:30.000 --> 00:21:41.000
最後になりましたが、テスト自体があります。これは、trueまたはfalse、またはテストの実行に関する詳細情報を含む結果オブジェクトを返すことができるJavaScript関数です。

00:21:41.000 --> 00:21:52.000
特別なWebInspectorAuditオブジェクトも利用可能で、テスト自体とテストのセットアップの両方で使用するテスト専用の追加のAPIを公開します。

00:21:52.000 --> 00:21:57.000
このAPIの詳細については、Webインスペクタリファレンスを参照してください。

00:21:57.000 --> 00:22:03.000
変更は自動的に保存され、これらすべてをエクスポートせずにWebインスペクタで実行できるようになりました。

00:22:03.000 --> 00:22:10.000
しかし、これらのテストの柔軟性を本当に理解するために、私はあなたにそれらを実際に見せたいと思います。

00:22:10.000 --> 00:22:20.000
最後にもう一度ダッシュボードに戻り、監査がいくつかの種類のアクセシビリティの問題やWebページの設計の問題をキャッチするのにどのように役立つかを見てみましょう。

00:22:20.000 --> 00:22:26.000
監査タブを開いたときに最初にしたいことは、デフォルトのアクセシビリティテストケースを実行することです。

00:22:26.000 --> 00:22:33.000
これらは、私が一般的なアクセシビリティのベストプラクティスについてどのようにやっているかについて、良いベースラインの読み取りを得るのに役立ちます。

00:22:33.000 --> 00:22:40.000
テストグループの横にある[実行]ボタンをクリックすると、これらのテストをすばやく実行できます。

00:22:40.000 --> 00:22:42.000
そして悪くないが、私はもっとうまくやれる。

00:22:42.000 --> 00:22:50.000
合格フィルターボタンをクリックしてそれらの結果を非表示にすることで、テストの失敗を見ることができ、テストの失敗のみを表示できます。

00:22:50.000 --> 00:22:52.000
これを直しましょう。

00:22:52.000 --> 00:23:02.000
このテストは、失敗したDOMノードのリストを提供し、ホバーに表示される「要素タブで表示」ボタンを使用して、そのノードに簡単にジャンプできます。

00:23:02.000 --> 00:23:15.000
[要素]タブで、DOMノードを右クリックして[追加]&gt;[属性]を選択し、新しいタイトルを入力して、画像にタイトルを追加することをテストします。

00:23:15.000 --> 00:23:19.000
監査タブに戻り、同じテストグループを再度実行します。

00:23:19.000 --> 00:23:24.000
そして今回、私はすべてのテストに合格したことがわかります。

00:23:24.000 --> 00:23:29.000
監査のもう1つの大きな用途は、私のウェブページが自分の設計基準を満たしていることを確認することです。

00:23:29.000 --> 00:23:37.000
このプロジェクトに取り組んでいる間の私のルールの1つは、すべての要素に小さなフォントファミリーのセットを一貫して使用していることを確認することでした。

00:23:37.000 --> 00:23:43.000
今年Webインスペクタに追加された新しい監査編集モードを使用して、それを行いましょう。

00:23:43.000 --> 00:23:49.000
ナビゲーションサイドバーの下部にある編集ボタンをクリックして編集を開始します。

00:23:49.000 --> 00:23:50.000
今、私は編集モードです。

00:23:50.000 --> 00:23:55.000
ここでは、サイドバーの上部にある[作成]ボタンを使用して、新しいテストケースを作成できます。

00:23:55.000 --> 00:24:01.000
テストケースのデフォルトオプションを保持し、テストケースに「Fonts」という名前を付けます。

00:24:01.000 --> 00:24:03.000
残りのテストケースを編集できるようになりました。

00:24:03.000 --> 00:24:10.000
このテストケースが何をするかを覚えておくのに役立つ説明を追加することから始めます。

00:24:10.000 --> 00:24:19.000
では、私が準備した実際のテストコードを挿入しましょう。

00:24:19.000 --> 00:24:21.000
私のテストには3つの主要なステップがあります。

00:24:21.000 --> 00:24:24.000
まず、期待されるフォントファミリの配列を作成します。

00:24:24.000 --> 00:24:31.000
次に、予想されるフォントファミリにリストされていないフォントファミリで、ページ上のすべての要素を収集します。

00:24:31.000 --> 00:24:37.000
最後に、テストに失敗した要素を含め、結果オブジェクトを返します。

00:24:37.000 --> 00:24:45.000
監査の作成が終わったら、ナビゲーションサイドバーの下部にある[完了]をクリックします。

00:24:45.000 --> 00:24:49.000
名前の横にある[実行]ボタンをクリックして監査を実行できるようになりました。

00:24:49.000 --> 00:24:55.000
私のページのノードの1つに問題があるようなので、何が間違っているのか見てみましょう。

00:24:55.000 --> 00:25:02.000
もう一度「要素で表示」タブボタンを使用して、要素に移動し、そのスタイルを見ることができます。

00:25:02.000 --> 00:25:04.000
まあ、これは恥ずかしいです。

00:25:04.000 --> 00:25:05.000
コミックサンズ！

00:25:05.000 --> 00:25:18.000
私は本当にこのフォントを使いたくないので、代わりにこれをui丸みを帯びたフォントファミリに変更しましょう。

00:25:18.000 --> 00:25:24.000
さて、監査タブに戻り、テストをもう一度実行し、完璧です!

00:25:24.000 --> 00:25:40.000
私がしたい最後のことは、私が犯したのと同じ恥ずかしい間違いを避けるために同僚と共有できるように、エクスポート監査ボタンを使用してテストをエクスポートすることです - 多分私は物語のコミックサンズ部分を省くでしょうが。

00:25:40.000 --> 00:25:56.000
組み込みのアクセシビリティテストは、私が見逃した問題をキャッチできただけでなく、Webページに独自のデザインシステムルールを適用するためのテストを書くことができ、チームが変更を確認する前に全員が同じページにいることを確認することがさらに簡単になりました。

00:25:56.000 --> 00:26:00.000
そして、私たちはウェブインスペクタでこれらの大きな新機能をカバーしました!

00:26:00.000 --> 00:26:05.000
CSSグリッドの新しいオーバーレイは、コンテンツが正しく見えるようにするのに役立ちます。

00:26:05.000 --> 00:26:12.000
ブレークポイントの改善により、Webインスペクタを離れることなく、問題の修正を簡単に検索、デバッグ、テストできます。

00:26:12.000 --> 00:26:23.000
また、Webインスペクタで新しい監査を作成および編集すると、Webページがアクセシビリティ基準と独自の基準を満たしていることを確認するためにテストをすばやく作成できます。

00:26:23.000 --> 00:26:31.000
これらの新機能に加えて、Webインスペクタをさらに改善するために、微調整と機能強化を行い、多数のバグを修正しました。

00:26:31.000 --> 00:26:35.000
私が行く前に、あなたに残したい役に立つリソースがいくつかあります。

00:26:35.000 --> 00:26:49.000
Web Inspectorが、Safari、Mail、App Store、およびmacOSとiOSの他の多くのアプリで使用される高速でプライベートで安全なWebブラウザエンジンであるオープンソースのWebKitプロジェクトの一部であることに気づいていないかもしれません。

00:26:49.000 --> 00:26:59.000
WebKitプロジェクトの詳細については、webkit.orgをご覧ください。Web Inspectorのグリッドオーバーレイに関するものなど、WebKitの新機能に関するブログ記事もあります。

00:26:59.000 --> 00:27:14.000
Webインスペクタの新機能に関するブログ記事に加えて、幅広いWebインスペクタの機能とインターフェイスをカバーし、監査やブレークポイントなど、今日説明した多くの機能について深く掘り下げたドキュメントを見つけることもできます。

00:27:14.000 --> 00:27:24.000
これらの機能には、私が今日カバーできたよりもはるかに多くの深さがあり、もっと知りたい場合は、ドキュメントをチェックすることを強くお勧めします。

00:27:24.000 --> 00:27:26.000
私たちもあなたから話を聞きたいです!

00:27:26.000 --> 00:27:39.000
バグに遭遇した場合、またはWebインスペクタを改善する方法について提案がある場合は、フィードバックアシスタントでmacOSのフィードバックを提出し、フィードバックの領域としてWebKitを選択してください。

00:27:39.000 --> 00:27:59.000
また、約2週間ごとにリリースされるSafari Technology Previewをダウンロードすることをお勧めします。これは、すべてのMac、iPhone、およびiPadに含まれているSafariのバージョンに表示される前に、開発者が新しいWebKitおよびWeb Inspectorツール、機能、および修正に早期にアクセスできるように特別に設計されています。

00:27:59.000 --> 00:28:19.000
最後に、「Design for Safari 15」など、これらの他の素晴らしいセッションをチェックして、Safariの美しいコンテンツを適応させてデザインする方法を学び、「高度なWebコンテンツの開発」して、Webページをさらに強化するために使用できる新しいJavaScriptとWebAssembly機能についてすべて学んでください。

00:28:19.000 --> 00:28:28.000
また、WWDC 2020のセッション「Web Inspectorの新機能」を見て、Web Inspectorでさらに多くの改善点を確認してください。

00:28:28.000 --> 00:28:33.000
これらの素晴らしいセッションは、開発者アプリで見つけることができます。

00:28:33.000 --> 00:28:35.000
ありがとう！

00:28:35.000 --> 23:59:59.000
♪

