WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
ロン・サントス:やあ、みんな。私はロン・サントスです。

00:00:11.000 --> 00:00:14.000
私はキーボードに取り組んでいるソフトウェアエンジニアです。

00:00:14.000 --> 00:00:23.000
そして、入力やディクテーションではなく、カメラを使用してテキストを入力できる新機能を最大限に活用する方法を紹介します。

00:00:23.000 --> 00:00:32.000
だから、私たちはこの新しいリリースに本当に一生懸命取り組んできました、そして今、WWDCがついにここに来たので、私は休暇の準備ができています。

00:00:32.000 --> 00:00:35.000
安全になったらすぐに、休暇を取って旅行したいです。私は少し休みを取って旅行したいです。

00:00:35.000 --> 00:00:40.000
しかし、私を悩ませる旅行についての1つのことは、その非デジタルテキストのすべてを扱うことです。

00:00:40.000 --> 00:00:41.000
どういう意味かわかりますか?

00:00:41.000 --> 00:00:47.000
請求書、アクティビティチラシ、そして彼らがホテルの部屋にあなたのために残す巨大なバインダー

00:00:47.000 --> 00:00:52.000
幸いなことに、iOS 15には、あなたの周りの世界からテキストをキャプチャできる新機能があります。

00:00:52.000 --> 00:00:55.000
私の言いたいことをお見せしましょう。

00:00:55.000 --> 00:00:56.000
チェックしてみて！

00:00:56.000 --> 00:00:58.000
私はこの旅行日記アプリを作っています。

00:00:58.000 --> 00:01:03.000
ハワイへの最後の旅行のように、私が行った旅行や滞在した場所を記録するためにそれを使用します。

00:01:03.000 --> 00:01:08.000
ここの上部には、画像ヘッダーを追加できます。カメラロールから素敵な風景写真かもしれません。

00:01:08.000 --> 00:01:14.000
次に、名前、電話番号、住所などのホテル情報のフィールドがあります。

00:01:14.000 --> 00:01:20.000
私は実際に私の目の前にある文書にそのすべての情報を持っています。

00:01:20.000 --> 00:01:24.000
私はそれをすべてタイプしたくありません、そして今、私はする必要はありません。

00:01:24.000 --> 00:01:33.000
たとえば、電話番号フィールドを2回タップすると、編集メニューにカメラからのテキストを使用する新しいオプションが表示されます。

00:01:33.000 --> 00:01:39.000
起動すると、カメラはドキュメント上のこのテキストグループを即座に認識します。

00:01:39.000 --> 00:01:42.000
私はそれを凍結して、電話番号だけを選択することができます。

00:01:42.000 --> 00:01:45.000
次に、[挿入]をタップすると完了です。

00:01:45.000 --> 00:01:46.000
それはかなり素晴らしいと思います。

00:01:46.000 --> 00:01:49.000
写真が千の言葉に値するという言葉を思い出させます。

00:01:49.000 --> 00:01:54.000
しかし、この機能を使用すると、文字通り写真から千の言葉を取ることができます。

00:01:54.000 --> 00:01:58.000
とにかく、先ほど言ったように、この機能を最大限に活用する方法をお見せしたいと思います。

00:01:58.000 --> 00:02:02.000
コンテンツのフィルタリングについて話すことから始めましょう。

00:02:02.000 --> 00:02:06.000
あなたが覚えているなら、私は大きなテキストブロックから電話番号をドラッグして選択しなければなりませんでした。

00:02:06.000 --> 00:02:10.000
まあ、アプリが私が電話番号を探していることを知っているなら、私はそれをする必要はありません。

00:02:10.000 --> 00:02:14.000
それは他のすべてを無視して、ただ番号をつかむべきです。

00:02:14.000 --> 00:02:18.000
まず、必要なコンテンツをフィルタリングするのがいかに簡単かをお見せします。

00:02:18.000 --> 00:02:26.000
フィルタリングは、テキストフィールドとテキストビューで利用可能なTextContentTypeとKeyboardTypeプロパティを使用して行われます。

00:02:26.000 --> 00:02:31.000
実際、あなたはおそらくすでにこれらのプロパティを使用して自動入力のようなものをサポートしているでしょう。

00:02:31.000 --> 00:02:33.000
もしそうなら、素晴らしい。

00:02:33.000 --> 00:02:36.000
カメラ入力の余分なメリットがあります。

00:02:36.000 --> 00:02:41.000
そして、あなたがそれらを使用していない場合は、ここにあなたの方法を示す前年からのいくつかのビデオがあります。

00:02:41.000 --> 00:02:44.000
はい、TextContentTypeに戻ります。

00:02:44.000 --> 00:02:47.000
TextContentTypeは、これらのさまざまな値のいずれかにすることができます。

00:02:47.000 --> 00:02:50.000
しかし、カメラはこれらすべてのタイプをフィルタリングしません。

00:02:50.000 --> 00:02:53.000
この7つだけでフィルタリングされます。

00:02:53.000 --> 00:02:55.000
いくつかの例を見てみましょう。 ではいくつかの例を見てみましょう。

00:02:55.000 --> 00:03:03.000
これらの最初の4つ（電話番号、完全な住所、URL、電子メール）はすべて、今日のiOSに先行しています。

00:03:03.000 --> 00:03:13.000
iOS 15の新機能では、フライト番号、出荷追跡番号、日付、時刻、期間の組み合わせの3つのタイプが追加されました。

00:03:13.000 --> 00:03:19.000
フライト番号が旅行アプリにどのように役立つか、または追跡番号がパッケージ追跡アプリにとってどのようにクールであるかを想像できます。

00:03:19.000 --> 00:03:22.000
とにかく、これらのコンテンツタイプを使用する方法は次のとおりです。

00:03:22.000 --> 00:03:23.000
それは超簡単です。

00:03:23.000 --> 00:03:31.000
インターフェイスビルダーの場合は、属性インスペクタでコンテンツタイプとキーボードタイプを探します。

00:03:31.000 --> 00:03:34.000
コードでこれを行う場合は、必要な値を割り当てるだけです。

00:03:34.000 --> 00:03:44.000
私の旅行日記アプリでは、電話番号フィールドは電話パッドキーボードを使用しており、アドレスフィールドにはfullStreetAddressのtextContentTypeがあります。

00:03:44.000 --> 00:03:49.000
そして、電話番号については、autocorrectionTypeをnoに設定したことに注意してください。

00:03:49.000 --> 00:03:55.000
なぜなら、自動修正や予測テキスト候補がない場合、iOSはカメラにすばやくアクセスするためのボタンを提供するからです。

00:03:55.000 --> 00:04:03.000
さて、私のアプリに戻りましょう、そして私たちは再びホテルの電話番号をキャプチャしようとすることができますが、今回は、私たちの変更で。

00:04:03.000 --> 00:04:09.000
さて、カメラを持ち出すと、電話番号以外の他のすべてのテキストをスマートに無視します。

00:04:09.000 --> 00:04:15.000
アドレスフィールドでもう一度やってみましょう。

00:04:15.000 --> 00:04:16.000
それはとても速いです。

00:04:16.000 --> 00:04:19.000
タップとスワイプがはるかに少なくなります。

00:04:19.000 --> 00:04:21.000
それがコンテンツをフィルタリングする方法です。

00:04:21.000 --> 00:04:22.000
別の挑戦に移りましょう。

00:04:22.000 --> 00:04:28.000
その使用を本当に奨励するために、この機能をより見つけやすくするにはどうすればよいですか?

00:04:28.000 --> 00:04:32.000
アプリ開発者として、私たちは合理化されたユーザーインターフェースが大好きです。

00:04:32.000 --> 00:04:41.000
つまり、ユーザーが知らないメニューやジェスチャーの後ろに隠された追加機能がある場合があります。

00:04:41.000 --> 00:04:46.000
たとえば、アプリでメモフィールドを使用する場合、ここで入力にカメラを使用できるかどうかは明らかではありません。

00:04:46.000 --> 00:04:51.000
編集メニューは2回目のタップ時にのみ表示されます。

00:04:51.000 --> 00:04:56.000
そして、候補バーには、先ほどお見せしたボタンの代わりに予測テキストがあります。

00:04:56.000 --> 00:05:03.000
したがって、カメラの入力を示唆する画面上のボタンが必要な場合は、専用のランチャーボタンを追加してください。

00:05:03.000 --> 00:05:11.000
これを行うには、まず、iOS 15で新しいcaptureTextFromCameraファクトリメソッドを使用してUIActionを作成する必要があります。

00:05:11.000 --> 00:05:17.000
このアクションは、カメラを起動する方法を知っていますが、ボタンやメニューと一緒に使用すると、画像とラベルも提供します。

00:05:17.000 --> 00:05:21.000
カメラからテキストを挿入するアイテムで、私のアプリにメニューを追加しましょう。

00:05:21.000 --> 00:05:23.000
だから、これがまた私のアプリです。

00:05:23.000 --> 00:05:28.000
メモフィールドを編集するときは、このツールバーがキーボードの上に表示されます。

00:05:28.000 --> 00:05:38.000
カメラアイコン付きの2番目の項目をタップすると、新しい機能であるカメラからのテキストなど、カメラ関連のアクションの束のメニューを表示したいです。

00:05:38.000 --> 00:05:41.000
ここでは、アクションを作成します。

00:05:41.000 --> 00:05:49.000
そして、オプションの識別子以外に、ファクトリメソッドはレスポンダーがテキストを受け入れることだけであることに注意してください。

00:05:49.000 --> 00:05:53.000
次に、他のメニュー項目のアクションを作成します。

00:05:53.000 --> 00:06:02.000
最後に、メニューを組み立てて、textFromCameraアクションを含む、作成したばかりのアクションのそれぞれを入力します。

00:06:02.000 --> 00:06:06.000
タイトルや使用する画像を指定する必要がないことを覚えておいてください。

00:06:06.000 --> 00:06:08.000
それはすべてアクションによって提供されます。

00:06:08.000 --> 00:06:10.000
タイトルは私のためにローカライズされるでしょう。

00:06:10.000 --> 00:06:13.000
よし、やってみよう。

00:06:13.000 --> 00:06:14.000
アプリに戻ってきました。

00:06:14.000 --> 00:06:17.000
これがメモフィールドとカメラメニューのツールバーです。

00:06:17.000 --> 00:06:24.000
目の前のアクティビティチラシからテキストを挿入させてください。

00:06:24.000 --> 00:06:25.000
そして終わった!

00:06:25.000 --> 00:06:29.000
わずか数行のコードでユーザーが発見できるランチャー。

00:06:29.000 --> 00:06:32.000
しかし、心に留めておくべきことが1つあります。

00:06:32.000 --> 00:06:38.000
カメラランチャーを追加する前に、まずcanPerformAction withSenderの結果を確認する必要があります。

00:06:38.000 --> 00:06:49.000
これは、UIActionがcaptureTextFromCameraと呼ばれるUIResponderオブジェクトの新しいメソッドを呼び出すことで機能し、カット、コピー、ペーストなどの標準的な編集アクションと同様に機能するためです。

00:06:49.000 --> 00:06:53.000
そして、これらのアクションは、コンテキストに応じて、常に利用できるとは限りません。

00:06:53.000 --> 00:06:57.000
たとえば、何も選択されていない場合、テキストをカットすることはできません。

00:06:57.000 --> 00:07:01.000
ここでも同じことです。captureTextFromCameraアクションにはいくつかの前提条件があります。

00:07:01.000 --> 00:07:04.000
その1つの方法は、すべての要件が満たされていることを確認します。

00:07:04.000 --> 00:07:06.000
しかし、それぞれに目を通しましょう。

00:07:06.000 --> 00:07:10.000
そうすれば、そのメソッドがfalseを返す理由をよりよく知ることができます。

00:07:10.000 --> 00:07:16.000
まず、いくつかのハードウェア要件があります。iOS 15を実行しているすべてのデバイスがこの機能をサポートしているわけではありません。

00:07:16.000 --> 00:07:18.000
デバイスはiPhoneであるべきです。

00:07:18.000 --> 00:07:24.000
そして、どんなiPhoneだけでなく、ニューラルエンジンの機械学習の超能力を持つもの。

00:07:24.000 --> 00:07:28.000
ハードウェアとは別に、レスポンダーはテキスト挿入を処理する必要があります。

00:07:28.000 --> 00:07:30.000
それについては後でもっと話しましょう。

00:07:30.000 --> 00:07:37.000
次に、これは明らかかもしれませんが、レスポンダーがテキストビューまたはテキストフィールドである場合は、編集可能でなければなりません。

00:07:37.000 --> 00:07:44.000
そして最後に、ユーザーは優先言語のリストにこれらの7つのサポートされている言語のうち少なくとも1つを持っている必要があります。

00:07:44.000 --> 00:07:46.000
あなたは今、カメラ入力を処理するための設備が整っています。

00:07:46.000 --> 00:07:50.000
しかし、締めくくる前に、私がアプリに追加した楽しいものをお見せしましょう。

00:07:50.000 --> 00:07:52.000
ヘッダーの写真を覚えていますか？

00:07:52.000 --> 00:07:56.000
素敵ですが、その上にキャプションを追加するのはちょっとクールだと思います。

00:07:56.000 --> 00:07:59.000
たぶん、カメラから取ったキャプション。

00:07:59.000 --> 00:08:04.000
そこで、メニュー項目で行ったように、ここにランチャーボタンを追加しました。

00:08:04.000 --> 00:08:14.000
そして今、私はテキストをキャプチャして画像の上に置くことができます。

00:08:14.000 --> 00:08:15.000
でも、どうやってやるの?

00:08:15.000 --> 00:08:20.000
つまり、それは画像ビューであり、テキストコントロールではありません。

00:08:20.000 --> 00:08:23.000
一歩下がって、テキストコントロールがどのように機能するかを理解しましょう。

00:08:23.000 --> 00:08:26.000
そして、後で画像ビューについて話します。

00:08:26.000 --> 00:08:29.000
テキストコントロールは、UIKeyInputと呼ばれるプロトコルを採用しています。

00:08:29.000 --> 00:08:35.000
これは、レスポンダーがキーボード入力を受け入れるための基本的なメソッドセットを定義します。

00:08:35.000 --> 00:08:40.000
プロトコルには3つのメソッドがあり、そのうちの1つはinsertTextメソッドです。

00:08:40.000 --> 00:08:45.000
そして、その方法はまさにカメラからアプリにテキストを転送するために使用されるものです。

00:08:45.000 --> 00:08:50.000
したがって、レスポンダーがカメラ入力をサポートするには、このプロトコルを採用する必要があります。

00:08:50.000 --> 00:08:53.000
私はちょうどテキストコントロールがUIKeyInputを採用すると言ったことを知っています。

00:08:53.000 --> 00:08:59.000
しかし、実際には、彼らはUIKeyInputの拡張であるUITextInputと呼ばれるプロトコルを採用しています。

00:08:59.000 --> 00:09:06.000
UITextInputを採用すると、カメラを使用するときに追加の機能、つまり挿入するテキストのプレビューが表示されます。

00:09:06.000 --> 00:09:09.000
そして、それはここに示されているsetMarkedTextメソッドで行われます。

00:09:09.000 --> 00:09:11.000
ただし、プレビューはオプションです。

00:09:11.000 --> 00:09:16.000
あなたがそれを持っていないことを選択した場合、UIKeyInputを採用するだけで済みます。

00:09:16.000 --> 00:09:21.000
言及すべき最後のプロトコルが1つあり、あなたはすでに数分前にそれを捕まえたかもしれません。

00:09:21.000 --> 00:09:25.000
UIKeyInput自体はUITextInputTraitsを拡張します。

00:09:25.000 --> 00:09:37.000
そのプロトコルは、KeyboardTypeやTextContentTypeなどのオプションのプロパティのみで構成されており、以前から特定のコンテンツのカメラ入力をフィルタリングするために使用されます。

00:09:37.000 --> 00:09:48.000
したがって、カメラ入力には、UIKeyInputを採用し、オプションで、求めている機能のレベルに応じて、UITextInputTraitsまたはUITextInputを採用します。

00:09:48.000 --> 00:09:51.000
わかりました。では、ImageViewに戻しましょう。

00:09:51.000 --> 00:09:58.000
UIImageViewをサブクラス化し、UIKeyInputを採用するHeadlineImageViewという新しいクラスを作成します。

00:09:58.000 --> 00:09:59.000
これがコードです。 

00:09:59.000 --> 00:10:08.000
これはUIImageViewの単純なサブクラスであり、キャプションを表示するために使用するUILabelサブビューがあります。

00:10:08.000 --> 00:10:15.000
UIKeyInputを採用するには、hasText、deleteBackward、insertTextの3つのメソッドが必要であることを覚えておいてください。

00:10:15.000 --> 00:10:19.000
通常、レスポンダーはUIKeyInputを採用してキーボードを召喚します。

00:10:19.000 --> 00:10:26.000
しかし、キーボード入力ではなくカメラ入力のみが欲しいので、insertTextを実装するだけです。

00:10:26.000 --> 00:10:33.000
hasTextはfalseを返すだけで、deleteBackwardは何もする必要はありません。

00:10:33.000 --> 00:10:37.000
insertTextに関しては、その実装は本当に簡単です。

00:10:37.000 --> 00:10:41.000
カメラからテキストを取り、私たちのラベルに渡すだけです。

00:10:41.000 --> 00:10:42.000
それがすべてです! 

00:10:42.000 --> 00:10:47.000
これで、カメラからキャプチャされたキャプションを表示する方法を持つ画像ビューがあります。

00:10:47.000 --> 00:10:49.000
私と一緒にこの旅行をしてくれてありがとう!

00:10:49.000 --> 00:10:51.000
これがあなたが立ち去ることを願っているものです。

00:10:51.000 --> 00:10:54.000
テキストコンテンツの種類を活用してください。

00:10:54.000 --> 00:10:59.000
彼らは、カメラからテキストをフィルタリングするなど、複数の方法で役立ちます。

00:10:59.000 --> 00:11:03.000
カメラの入力を本当に促進したいときは、独自のランチャーを作成してください。

00:11:03.000 --> 00:11:10.000
私たちは、ユーザーがアプリ間でカメラ入力に関連付けることができる一貫した外観のためのラベルと画像を提供します。

00:11:10.000 --> 00:11:14.000
ただし、まず機能が利用可能かどうかを確認してください。

00:11:14.000 --> 00:11:20.000
最後に、テキストコントロールではない独自のカスタムレスポンダーにカメラ入力を使用できることを忘れないでください。

00:11:20.000 --> 00:11:24.000
UIKeyInputプロトコルを採用するだけです。

00:11:24.000 --> 00:11:28.000
安全な旅をして、WWDC 2021の残りの部分を楽しんでください!

00:11:28.000 --> 23:59:59.000
♪

