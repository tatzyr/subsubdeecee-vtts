WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:17.000
私はRavi Kandadai Madhavanです。このビデオでは、Xcodeの静的アナライザを使用してアプリのバグを見つけて修正する方法を紹介します。

00:00:17.000 --> 00:00:23.000
まず、静的アナライザを使用してバグを見つけ、それらを理解する方法を実演します。

00:00:23.000 --> 00:00:30.000
次に、Xcode 13の新しいチェックについて説明します。これは、コード内のより多くの種類の問題を見つけるのに役立ちます。

00:00:30.000 --> 00:00:37.000
最後に、アナライザをカスタマイズして、開発ワークフローとよりよく統合する方法について説明します。

00:00:37.000 --> 00:00:41.000
それでは、アナライザーを使ってバグを見つける方法を見てみましょう。

00:00:41.000 --> 00:00:54.000
スタティックアナライザは、実行せずにソースコードを分析することでバグを発見できるXcodeのツールであり、アプリのテストや品質保証を行う前でもバグを明らかにすることができます。

00:00:54.000 --> 00:00:59.000
また、まれでテストでカバーされていないコードパスの問題を見つけることもできます。

00:00:59.000 --> 00:01:06.000
アナライザは、SwiftとObjective-Cの混合プロジェクトでも、C/C++とObjective-Cコードのバグを見つけます。

00:01:06.000 --> 00:01:11.000
私が開発しているアプリを使って、アナライザーが動作しているのを見てみましょう。

00:01:11.000 --> 00:01:18.000
私は、太陽系の探索を可能にするSwiftとObjective-Cで書かれた既存のアプリを改善しようとしています。

00:01:18.000 --> 00:01:21.000
これはアプリのXcodeプロジェクトです。

00:01:21.000 --> 00:01:26.000
静的アナライザを実行して、コードに何か問題があるかどうかを確認します。

00:01:26.000 --> 00:01:27.000
走るのはとても簡単です。

00:01:27.000 --> 00:01:36.000
製品に移動して[分析]を選択するか、キーボードショートカットCommand-Shift-Bを使用してください。

00:01:36.000 --> 00:01:40.000
Xcodeのステータスバーでアナライザが実行されているのを見ることができます。

00:01:40.000 --> 00:01:44.000
プロジェクトを分析することは、それを構築するのと非常によく似ています。

00:01:44.000 --> 00:01:51.000
アナライザは、現在アクティブなスキームのターゲット内のすべてのソースファイルをスキャンし、バグを探します。

00:01:51.000 --> 00:01:55.000
ステータスでわかるように、アナライザは私のプロジェクトで問題を発見しました。

00:01:55.000 --> 00:02:00.000
Xcodeのイシューナビゲーターにアクセスして、それについてもっと学ぶことができます。

00:02:00.000 --> 00:02:05.000
お見せしたように、プロジェクトでアナライザを実行するのに必要なのは、ワンクリックだけです。

00:02:05.000 --> 00:02:15.000
そして、このワンクリックで、セキュリティ上の問題、論理的なバグ、APIの誤用など、いくつかの種類のバグを見つけることができます。

00:02:15.000 --> 00:02:20.000
アナライザはバグを見つけるだけでなく、それらを説明することもできます。

00:02:20.000 --> 00:02:24.000
私のアプリで見つかったバグに戻って、それを理解してみましょう。

00:02:24.000 --> 00:02:31.000
ここでの問題は、Objective-CメソッドpositionAtDateが想定されていないときにnilを返していることです。

00:02:31.000 --> 00:02:36.000
メソッドの戻り値は、メソッドの定義でnullではないと宣言されています。

00:02:36.000 --> 00:02:41.000
しかし今、私はこの方法がどのようにnilを返すのかを理解したい。

00:02:41.000 --> 00:02:46.000
アナライザの問題を展開し、バグにつながる一連のイベントを確認できます。

00:02:46.000 --> 00:02:52.000
イベントは、発生したステートメントとともに、エディタにも表示されます。

00:02:52.000 --> 00:02:55.000
矢印は、イベントがどのように順序付けられているかを示しています。

00:02:55.000 --> 00:03:00.000
これらのレポートを下から上まで読む方が簡単だと思います。

00:03:00.000 --> 00:03:05.000
最後のイベントは、返された値、位置がnilであることを示しています。

00:03:05.000 --> 00:03:16.000
以前のイベントは、位置を初期化するためのメソッドregularPositionAtDateが、そのレシーバーオブジェクトがnilであるため呼び出されていないためであることを示しています。

00:03:16.000 --> 00:03:21.000
矢印を見ると、これはスイッチのデフォルトのケースに沿って起こります。

00:03:21.000 --> 00:03:29.000
レポートの先頭に戻ると、レシーバーオブジェクトがnilに初期化され、デフォルトのケースに沿ってそのまま残っていることがわかります。

00:03:29.000 --> 00:03:37.000
今、私はスイッチ内で球形または不規則ではないオブジェクトを扱っていないことを理解しています。

00:03:37.000 --> 00:03:43.000
これを修正するために、デフォルトのケースを球面ケースと同じにします。

00:03:43.000 --> 00:03:48.000
アナライザを再実行して、問題が修正されたことを確認します。

00:03:48.000 --> 00:03:52.000
アプリの開発中にこのバグが検出されたことにかなり安心しました。

00:03:52.000 --> 00:04:06.000
これは、null以外の値を返すように注釈されたObjective-Cメソッドからnilを返すと、メソッドがSwiftから呼び出されたときに予期しないランタイム動作が発生する可能性があるためです。

00:04:06.000 --> 00:04:12.000
ありがたいことに、静的アナライザを実行すると、私のアプリのユーザーに影響を与える前に、このバグが明らかになりました。

00:04:12.000 --> 00:04:19.000
Xcode 13では、アナライザをさらに良くし、あなたのためにいくつかの真新しいチェックがあります。

00:04:19.000 --> 00:04:23.000
アナライザは、コード内のより多くのロジックバグをキャッチできるようになりました。

00:04:23.000 --> 00:04:30.000
不要な分岐条件など、無限のループや冗長なコードを検出できます。

00:04:30.000 --> 00:04:39.000
アサートの副作用を報告することができ、C ++コードでは、移動および前進演算子の使用でエラーをキャッチする可能性があります。

00:04:39.000 --> 00:04:44.000
これらの新しいチェックの一部は、AppleのClangコンパイラへのオープンソースの貢献です。

00:04:44.000 --> 00:04:49.000
これらの新しいチェックがキャッチできるバグの例をいくつか見てみましょう。

00:04:49.000 --> 00:04:55.000
一般的に、アサートを使用してコードに対する期待を検証することをお勧めします。

00:04:55.000 --> 00:05:02.000
ただし、アサートに変数やメモリへの書き込みなどの副作用がないことを確認する必要があります。

00:05:02.000 --> 00:05:11.000
たとえば、ここに示されている、天体の配列を横断し、関連する月の数を数えるコードスニペットを考えてみましょう。

00:05:11.000 --> 00:05:18.000
月を持つ物体の数が惑星の数以下であることをチェックするNSAssertがあります。

00:05:18.000 --> 00:05:23.000
しかし、この主張には、衛星でオブジェクトを追跡するカウンターをインクリメントするという副作用があります。

00:05:23.000 --> 00:05:32.000
このような更新は、リリースビルド構成で失われる可能性があり、コードの実行を高速化するためにアサートを無効にすることができます。

00:05:32.000 --> 00:05:36.000
したがって、このコードはリリースビルドでカウンタをまったく増やさない可能性があります。

00:05:36.000 --> 00:05:42.000
デバッグビルドに表示されないため、開発中にこのようなバグを見逃すのは簡単です。

00:05:42.000 --> 00:05:48.000
Xcode 13を起動すると、アナライザはコードでそのような問題を見つけて報告することができます。

00:05:48.000 --> 00:05:54.000
このチェックは、NSAssertsだけでなく、CとC++のアサートにも機能します。

00:05:54.000 --> 00:06:02.000
これらのバグは修正が簡単で、ここに示すように、副作用をアサートの外に移動させるだけです。

00:06:02.000 --> 00:06:05.000
無限ループはもう一つの一般的なバグです。

00:06:05.000 --> 00:06:10.000
複雑なロジックを持つループがあるときにそれが起こるのを見たことがあるかもしれません。

00:06:10.000 --> 00:06:17.000
たとえば、ここに示されているネストされたループは、2次元グリッドに値を入力しようとします。

00:06:17.000 --> 00:06:26.000
これは、変数値が実際のループカウンタである列ではなく内部ループによってインクリメントされるバグを隠します。

00:06:26.000 --> 00:06:31.000
アナライザは、そのような間違いを検出し、あなたに説明できるようになりました。

00:06:31.000 --> 00:06:34.000
一度見つけたら、このバグはとても簡単に修正できます。

00:06:34.000 --> 00:06:38.000
値を列に置き換えるだけです。

00:06:38.000 --> 00:06:42.000
これらのチェックは単純な間違いを見つけましたが、私たちはそれらに本当のバグを見つけました。

00:06:42.000 --> 00:06:47.000
これで、あなたもそれらを使用し、バグを見つけて、アプリを開発する際に修正することができます。

00:06:47.000 --> 00:06:53.000
Xcodeは、開発ワークフローに合わせてアナライザを微調整するための多くのカスタマイズを提供しています。

00:06:53.000 --> 00:06:59.000
プロジェクトのビルド設定から、プロジェクトのすべてのビルドと一緒にアナライザを実行させることができます。

00:06:59.000 --> 00:07:04.000
関連する設定をすばやく絞り込むには、検索機能を利用してください。

00:07:04.000 --> 00:07:12.000
たとえば、検索キーワードとして「分析」を使用すると、アナライザに関連するオプションだけを見ることができます。

00:07:12.000 --> 00:07:17.000
「ビルド」中に分析を有効にするには、ビルド設定をオンにするだけです。

00:07:17.000 --> 00:07:22.000
増分ビルドと同様に、分析は変更されたファイルでのみ実行されます。

00:07:22.000 --> 00:07:28.000
これにより、コードが変更された後にアナライザーをすばやく簡単に実行できます。

00:07:28.000 --> 00:07:33.000
アナライザは、浅いものと深いものの2つの分析モードを提供します。

00:07:33.000 --> 00:07:39.000
シャローモードは高速ですが、複数の機能にまたがるバグの探索を避けます。

00:07:39.000 --> 00:07:44.000
ビルドと分析の時間に敏感なプロジェクトでは、このモードを使用してください。

00:07:44.000 --> 00:07:51.000
先に述べたように、アナライザにはさまざまな種類のバグを見つけるためのチェックがあり、そのうちのいくつかはオプトインです。

00:07:51.000 --> 00:07:58.000
ビルド設定から選択的に有効または無効にすることで、プロジェクトに合ったチェックを微調整できます。

00:07:58.000 --> 00:08:05.000
たとえば、プロジェクトにセキュリティクリティカルなコードがある場合は、セキュリティ問題のチェックを有効にします。

00:08:05.000 --> 00:08:17.000
一方、いくつかの問題がコードに関連していないことがわかった場合は、あまり役に立たないチェックを個別に無効にして、他のチェックの恩恵を受けることができます。

00:08:17.000 --> 00:08:22.000
プロジェクト全体ではなく、単一のファイルを分析することもできます。

00:08:22.000 --> 00:08:26.000
[製品] &gt; [アクションの実行] メニューから分析するファイルを選択します。

00:08:26.000 --> 00:08:31.000
これを使用して、プロジェクトを構築する必要もなく、変更をすばやく確認できます。

00:08:31.000 --> 00:08:35.000
これは、ヘッダーファイルを変更する場合に特に便利です。

00:08:35.000 --> 00:08:39.000
それをインポートするすべてのファイルの再分析をスキップします。

00:08:39.000 --> 00:08:45.000
Xcodeの静的アナライザは、開発中の非常に早い段階でコードのバグを明らかにすることができます。

00:08:45.000 --> 00:08:48.000
ボタンをクリックするだけで実行し、多くの種類のバグを見つけます。

00:08:48.000 --> 00:08:51.000
そして、あなたのワークフローに合わせてカスタマイズすることを忘れないでください。

00:08:51.000 --> 00:08:58.000
Xcode 13では、アナライザをさらに改善し、論理的なバグを見つけるための多くの新しいチェックを追加しました。

00:08:58.000 --> 00:09:03.000
アナライザを使用して、ユーザーに届く前にアプリのバグを修正してください。

00:09:03.000 --> 00:09:06.000
ありがとう、そしてWWDCの残りの部分を楽しんでください!

00:09:06.000 --> 23:59:59.000
[明るい音楽]。

