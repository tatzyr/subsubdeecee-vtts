WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
みなさん、こんにちは！

00:00:10.000 --> 00:00:13.000
私はAVFoundationエンジニアのプラシャントです。

00:00:13.000 --> 00:00:15.000
WWDC21へようこそ。

00:00:15.000 --> 00:00:21.000
近年、オーバーザトップストリーミングサービスの人気はリニアテレビの人気に近づいています。

00:00:21.000 --> 00:00:29.000
あなたがいる市場によっては、ユーザーは実際に支払う必要がある広告なしのコンテンツよりも無料の広告サポートコンテンツを好むかもしれません。

00:00:29.000 --> 00:00:35.000
したがって、HLSストリームに広告やその他のインタースティシャルを含めることに興味がある場合は、適切なセッションにチューニングしました。

00:00:35.000 --> 00:00:41.000
飛び込む前に、HLSストリームに広告を挿入するための既存のメカニズムのいくつかを簡単に確認しましょう。

00:00:41.000 --> 00:00:45.000
DISCONTINUITYタグを使用して、サーバー側の広告挿入を実行できます。

00:00:45.000 --> 00:00:54.000
これは、広告セグメントがコンテンツセグメントと一緒にステッチされるという点でかなり静的なスキームであり、このステッチはプレイリストがユーザーに販売される前でも行う必要があります。

00:00:54.000 --> 00:01:08.000
ご想像のとおり、ユーザーが広告マーカーに近づいたり、再バインドしたりする際に広告アセットの遅延バインドを許可しません。つまり、ユーザーがすでに視聴したビデオの一部に移動すると、同じ広告が再び表示されます。

00:01:08.000 --> 00:01:15.000
HLSはセグメントの粒度で動作するため、広告ポッドとの間の遷移はセグメント境界で行う必要があります。

00:01:15.000 --> 00:01:22.000
広告マーカーがコンテンツセグメントの中央に存在する場合は、広告をステッチするためにそのセグメントを分割する必要があります。

00:01:22.000 --> 00:01:28.000
多くの場合、品質層の数は、一次資産と間質資産の間で異なります。

00:01:28.000 --> 00:01:34.000
すべての主要な品質層と一緒に広告をステッチするには、広告をコンテンツエンコーディングと一致するように調整する必要があります。

00:01:34.000 --> 00:01:39.000
また、広告がプライマリコンテンツと同じコーデックを使用していることを確認する必要があります。

00:01:39.000 --> 00:01:44.000
そして、ライブストリーミングのシナリオでは、あなたの包装業者は多くのバックエンドの簿記をしなければならないかもしれません。

00:01:44.000 --> 00:01:48.000
広告とインタースティシャルは、ほとんどがビデオオンデマンドストリームです。

00:01:48.000 --> 00:01:53.000
しかし、包装業者は、広告休憩全体にわたってセグメントごとにこれらをスプールする必要があります。

00:01:53.000 --> 00:01:55.000
クライアント側に広告を挿入することもできます。

00:01:55.000 --> 00:01:59.000
今まで、これがどのように行われるかについての正式な勧告はありませんでした。

00:01:59.000 --> 00:02:07.000
より一般的なアプローチの1つは、一方のプレイヤーが主要なコンテンツを提示し、もう一方のプレイヤーがインタースティシャルを提示する2人プレイスキームを使用することです。

00:02:07.000 --> 00:02:13.000
そして、トランジションは、2人のプレイヤー間の再生を調整し、プレイヤービュー階層を管理することによって達成されます。

00:02:13.000 --> 00:02:16.000
これはうまくいきますが、ここでの問題は主にパフォーマンス側にあります。

00:02:16.000 --> 00:02:25.000
2人のプレイヤー間でバッファリングが適切に調整されていない場合、広告をプリフェッチすると、プライマリコンテンツストリームのアダプティブビットレートのパフォーマンスに影響します。

00:02:25.000 --> 00:02:31.000
そして、ピクチャー・イン・ピクチャーやAirPlayのような機能は、これらのカスタムプレーヤーのアプローチでうまくやるのは本当に難しいです。

00:02:31.000 --> 00:02:37.000
今年は、これらすべての懸念に対処し、一般的に広告の挿入をよりシンプルにしようとしました。

00:02:37.000 --> 00:02:44.000
広告がプログラムのタイムラインにスケジュールできる個別の資産として扱われるHLSインタースティシャルを導入しています。

00:02:44.000 --> 00:02:47.000
広告はDISCONTINUITYタグでステッチされなくなりました。

00:02:47.000 --> 00:02:52.000
代わりに、彼らはマスタープレイリストを介して参照できる自己完結型の資産として残ります。

00:02:52.000 --> 00:02:58.000
すぐにわかるように、このスキームは動的であり、遅延バインディング、さらには広告インベントリへの再バインディングを可能にします。

00:02:58.000 --> 00:03:00.000
セグメントの境界に制約されなくなりました。

00:03:00.000 --> 00:03:04.000
プログラムのタイムラインのどこにでも広告を任意に配置できます。

00:03:04.000 --> 00:03:12.000
HLSインタースティシャルは、AVKitと組み合わせて、tvOSのナビゲーション制限のサポートを組み込み提供します。

00:03:12.000 --> 00:03:15.000
また、AirPlayとピクチャ・イン・ピクチャのサポートも組み込まれています。

00:03:15.000 --> 00:03:20.000
スケジュールされたすべての広告とインタースティシャルは、AirPlayセッションに引き継がれます。

00:03:20.000 --> 00:03:28.000
また、シームレスな移行を実現するために、プライマリプレーヤーとインタースティシャルプレーヤー間のバッファリングと他のシステムリソースの使用を調整します。

00:03:28.000 --> 00:03:36.000
次に、HLSインタースティシャルを使用した広告とともに、ビデオオンデマンドコンテンツを提示する際の典型的な再生フローを見てみましょう。

00:03:36.000 --> 00:03:44.000
この写真の青いバーはメインコンテンツを表し、オレンジと緑のバーは再生中にスケジュールしたい広告です。

00:03:44.000 --> 00:03:50.000
これで、プライマリは広告マーカーまで再生され、その時点で一時停止し、最初の広告が再生を開始します。

00:03:50.000 --> 00:03:54.000
最初の広告が再生されると、2番目の広告がすぐに続きます。

00:03:54.000 --> 00:03:58.000
2番目の広告の後、プライマリは中断したところから再開されます。

00:03:58.000 --> 00:04:01.000
では、バッファリングシーケンスを見てみましょう。

00:04:01.000 --> 00:04:04.000
最初の広告の開始時間までプライマリをバッファリングすることから始めます。

00:04:04.000 --> 00:04:08.000
これで、最初の広告を事前にバッファーし、スムーズな移行を実現できるようにします。

00:04:08.000 --> 00:04:12.000
これが完全にバッファリングされた後、2番目の広告を事前にバッファリングします。

00:04:12.000 --> 00:04:18.000
そして、2番目の広告が完全にバッファリングされた後、プライマリを再度バッファリングして、シームレスに切り替えます。

00:04:18.000 --> 00:04:25.000
ライブシナリオの再生フローは似ていますが、広告期間で前方にジャンプした後にプライマリーに再参加します。

00:04:25.000 --> 00:04:28.000
これは、私たちがライブエッジと同期し続けるためです。

00:04:28.000 --> 00:04:33.000
また、これはシームレスな移行が可能なように、同様のバッファリング戦略を採用しています。

00:04:33.000 --> 00:04:38.000
では、HLSインタースティシャルでどのように広告をスケジュールしますか?

00:04:38.000 --> 00:04:41.000
DATERANGEタグを使用してサーバーサイド広告の挿入ができるようになりました。

00:04:41.000 --> 00:04:45.000
このため、属性を持つ新しい日付範囲クラスを導入しています。

00:04:45.000 --> 00:04:49.000
このプレイリストは、PROGRAM-DATE-TIMEタグを介してタイミング情報を運びます。

00:04:49.000 --> 00:04:55.000
広告スケジュールが日付を使用して指定されるようになったため、これらのタグは必須になりました。

00:04:55.000 --> 00:05:02.000
ここでは、DATERANGEタグを使用して広告が並び、クラスがcom.apple.hls.interstitialに設定されています。

00:05:02.000 --> 00:05:05.000
ID属性はイベントを一意に識別します。

00:05:05.000 --> 00:05:09.000
START-DATEは、プライマリタイムラインで広告を開始したい場所です。

00:05:09.000 --> 00:05:12.000
ここでは、広告が再生の5秒でスケジュールされていることがわかります。

00:05:12.000 --> 00:05:16.000
DURATION 属性は、広告の期間を指定します。

00:05:16.000 --> 00:05:21.000
X-ASSET-URI属性は、広告のマスタープレイリストのURIを指定します。

00:05:21.000 --> 00:05:28.000
また、X-RESUME-OFFSET属性は、プライマリ再生を再開したいSTART-DATEからのオフセットを指定します。

00:05:28.000 --> 00:05:33.000
0の再開オフセットは、プライマリが中断したところから再開することを意味します。

00:05:33.000 --> 00:05:38.000
再開オフセット属性がない場合は、広告期間に等しいオフセットでプライマリに再参加します。

00:05:38.000 --> 00:05:43.000
これはおそらくあなたがライブシナリオでやりたいことです。

00:05:43.000 --> 00:05:46.000
ここに示されているように、インストリーム広告をスキップしたい場合があります。

00:05:46.000 --> 00:05:51.000
そのために、履歴書のオフセットをインストリーム広告の期間として指定するだけです。

00:05:51.000 --> 00:05:54.000
DATERANGEタグを使用して複数の広告をスケジュールできます。

00:05:54.000 --> 00:06:00.000
ここでは、最初の広告がプライマリの5秒にスケジュールされ、2番目の広告が10秒にスケジュールされています。

00:06:00.000 --> 00:06:05.000
広告ごとに同じ開始時間を指定するだけで、連続して広告をスケジュールできます。

00:06:05.000 --> 00:06:10.000
ここでは、最初の広告は再生後5秒で始まり、2番目の広告も始まります。

00:06:10.000 --> 00:06:13.000
広告はプレイリストに表示される順序で表示されます。

00:06:13.000 --> 00:06:22.000
X-ASSET-URI属性を使用して広告を参照するこれらのアプローチでは、プレイリストにDATERANGEタグを追加するときに広告ポッドを定義する必要があります。

00:06:22.000 --> 00:06:26.000
しかし、X-ASSET-LIST属性を使用してその決定を延期することができます。

00:06:26.000 --> 00:06:32.000
X-ASSET-LISTは、イベントスケジュールを含むJSONオブジェクトを指します。

00:06:32.000 --> 00:06:41.000
オブジェクトには、インタースティシャルのリストを指定するASSETS配列があり、各エントリはマスタープレイリストのURIと期間を指定します。

00:06:41.000 --> 00:06:48.000
このJSONオブジェクトはバッファリング時にのみフェッチされ、広告インベントリへの遅延バインが可能になることに注意してください。

00:06:48.000 --> 00:06:50.000
通常、広告は最後まで完全に再生されます。

00:06:50.000 --> 00:06:55.000
ただし、X-PLAYOUT-LIMIT属性を使用して、広告の終了時間を指定できます。

00:06:55.000 --> 00:06:59.000
この属性を使用して、ライブブロードキャストで早期リターンシナリオを実装できます。

00:06:59.000 --> 00:07:04.000
アーリーリターンは、ライブフィードに戻るために広告休憩を中断したい場所です。

00:07:04.000 --> 00:07:10.000
これはニュース速報のシナリオによるものかもしれませんし、視聴者に見逃してほしくないスポーツフィールドに突然の興奮があったのかもしれません。

00:07:10.000 --> 00:07:13.000
では、アーリーリターンを実装するためにこれをどのように使用しますか?

00:07:13.000 --> 00:07:16.000
ここには、6つのセグメントを含むライブプレイリストがあります。

00:07:16.000 --> 00:07:18.000
ライブエッジはセグメント6の終わりにあります。

00:07:18.000 --> 00:07:22.000
現在、プレイヘッドは通常、ライブエッジの背後にある3つのターゲット期間になります。

00:07:22.000 --> 00:07:25.000
この場合、セグメント3の最後にあります。

00:07:25.000 --> 00:07:29.000
この時点で、15秒の広告スポットはセグメント6に従うことが決定されます。

00:07:29.000 --> 00:07:35.000
したがって、プレイリストの更新には、実際には6つのセグメントすべてと、広告スケジュールを含むDATERANGEタグが含まれています。

00:07:35.000 --> 00:07:42.000
次のアップデートでは、プレイヘッドはセグメント4の最後に移動し、広告はまだセグメント6に続く予定です。

00:07:42.000 --> 00:07:45.000
ここの影付きのセグメント7は、単に広告の休憩を表しています。

00:07:45.000 --> 00:07:52.000
次のアップデートでは、再生ヘッドはセグメント5の最後に移動し、次のアップデートでは、広告ブレークの始まりです。

00:07:52.000 --> 00:07:56.000
何もしなければ、広告は15秒間再生されます。

00:07:56.000 --> 00:08:02.000
しかし、例えば12秒後に早期リターンをスケジュールしたい場合は、単にプレーアウト制限を指定するだけです。

00:08:02.000 --> 00:08:07.000
これで、広告はプログラムに戻る前に12秒間再生されます。

00:08:07.000 --> 00:08:13.000
多くの場合、契約上の理由から、ユーザーが広告を飛び越えたりスキップしたりするのを防ぎたいと思うでしょう。

00:08:13.000 --> 00:08:17.000
X-RESTRICT属性を使用してナビゲーション制限を指定できます。

00:08:17.000 --> 00:08:23.000
値がジャンプするX-RESTRICTは、ユーザーが広告の前の時間から広告の後の時間を探すのを防ぎます。

00:08:23.000 --> 00:08:29.000
値スキップ付きのX-RESTRICTは、希望とは異なるレートで広告を再生するのを防ぎます。

00:08:29.000 --> 00:08:32.000
これらの制限はUIによって実施されることに注意してください。

00:08:32.000 --> 00:08:34.000
tvOSでは、AVKitによって施行されています。

00:08:34.000 --> 00:08:39.000
また、ビデオプレゼンテーションにAVPlayerViewControllerを使用する場合は、それらを利用できるはずです。

00:08:39.000 --> 00:08:46.000
他のプラットフォームを使用している場合、またはAVKitを使用していない場合、これらの制限を強制するのはアプリケーション次第です。

00:08:46.000 --> 00:08:53.000
DATERANGEタグを使用してサーバーサイド広告をスケジュールする方法を確認したので、クライアントでの進捗状況を監視する方法を見てみましょう。

00:08:53.000 --> 00:09:10.000
このため、2つの新しいAVFoundationオブジェクトを導入しています。インタースティシャルがスケジュールまたは再生されたときにクライアントに通知するAVPlayerInterstitialEventMonitorと、プレイヤーアイテムのタイムラインに広告を掲載するために必要なすべての情報を含むAVPlayerInterstitialEventオブジェクトです。

00:09:10.000 --> 00:09:28.000
AVPlayerInterstitialEventMonitorには、次のプロパティがあります。プライマリアセットを再生しているプライマリプレーヤー、広告の再生を監視するために使用できるインタースティシャルプレーヤーのハンドル、プレーヤーに設定されたさまざまなインタースティシャルを表すAVPlayerInterstitialEventオブジェクトの配列であるイベント配列。

00:09:28.000 --> 00:09:32.000
AVPlayerInterstitialEventオブジェクトの説明にすぐにたどり着きます。

00:09:32.000 --> 00:09:34.000
currentEventのハンドル。

00:09:34.000 --> 00:09:38.000
したがって、これはインタースティシャルが再生されているときに有効であり、それ以外の場合はnullになります。

00:09:38.000 --> 00:09:50.000
そして、イベントスケジュールが変更されたときに発火するeventsDidChangeNotificationと、最後にインタースティシャルへの切り替え時に発火するcurrentEvent-DidChangeNotificationがあります。

00:09:50.000 --> 00:09:58.000
インタースティシャルイベントを記述するAVPlayerInterstitialEventオブジェクトには、基本的に先ほど見たDATERANGE属性に類似したプロパティがあります。

00:09:58.000 --> 00:10:04.000
プライマリアイテムは、インタースティシャルをスケジュールするタイムライン上のプライマリアセットを表します。

00:10:04.000 --> 00:10:09.000
識別子はID属性に似ており、これはイベントを一意に識別します。

00:10:09.000 --> 00:10:14.000
時間と日付フィールドは、それぞれメディアの時間と日付でインタースティシャルの開始時間を指定します。

00:10:14.000 --> 00:10:17.000
これはSTART-DATE属性のようなものです。

00:10:17.000 --> 00:10:23.000
テンプレートアイテムのコピーを使用して、広告ポッドを表すインタースティシャルプレーヤーアイテムを作成します。

00:10:23.000 --> 00:10:26.000
したがって、これは先ほど見たASSET-LIST属性に似ています。

00:10:26.000 --> 00:10:31.000
制限プロパティは、インタースティシャルのナビゲーション制限を指定します。

00:10:31.000 --> 00:10:37.000
次に、DATERANGEのプロパティに似た resumptionOffsetとplayoutLimitプロパティがあります。

00:10:37.000 --> 00:10:41.000
そして最後に、userDefinedAttributesの辞書があります。

00:10:41.000 --> 00:10:50.000
したがって、DATERANGEタグにカスタム属性を指定でき、これらはuserDefinedAttributesプロパティを介してクライアントアプリケーションに表示されます。

00:10:50.000 --> 00:10:57.000
たとえば、広告再生メトリクスを報告するためのビーコンURLやその他のカスタム属性を含めることができます。

00:10:57.000 --> 00:11:03.000
インタースティシャルが再生されているときに、これらのAPIを使用してUIを更新する方法を示すコードの例を次に示します。

00:11:03.000 --> 00:11:06.000
プライマリコンテンツを再生するためのAVPlayerを作成します。

00:11:06.000 --> 00:11:11.000
したがって、このコンテンツには、DATERANGEタグを使用してスケジュールされたインタースティシャルがあります。

00:11:11.000 --> 00:11:15.000
そして、AVPlayerInterstitialEventMonitorを作成し、プレーヤーに設定します。

00:11:15.000 --> 00:11:23.000
次に、currentEvent-DidChangeNotificationを購読して、プレイヤーがインタースティシャルに出入りするときにアプリケーションに通知します。

00:11:23.000 --> 00:11:27.000
そして、その通知が発火したら、UIを更新するだけです。

00:11:27.000 --> 00:11:38.000
時には、クライアント側で広告をスケジュールしたいと思うかもしれません。そのために、AVPlayerにイベントをプログラムで設定できるAVPlayer-InterstitialEventControllerを導入しています。

00:11:38.000 --> 00:11:44.000
このオブジェクトはAVPlayerInterstitialEventMonitorを継承しているため、多くの共通のプロパティがあります。

00:11:44.000 --> 00:11:53.000
注意すべき点の1つは、イベントプロパティはモニターで読み取り専用ですが、コントローラの読み取り/書き込みプロパティであるため、イベントをプログラムでスケジュールできるということです。

00:11:53.000 --> 00:12:00.000
また、これには、現在再生中のインタースティシャルをキャンセルできるcancelCurrentEvent APIもあります。

00:12:00.000 --> 00:12:05.000
このサンプルでは、AVPlayerに2つの広告を含む広告ポッドをスケジュールする方法を見てみます。

00:12:05.000 --> 00:12:09.000
プライマリアセットを再生するためにAVPlayerを作成します。

00:12:09.000 --> 00:12:14.000
次に、AVPlayer- InterstitialEventControllerを作成し、AVPlayerに設定します。

00:12:14.000 --> 00:12:18.000
広告ポッドを表すAVPlayerアイテムの配列を作成します。

00:12:18.000 --> 00:12:33.000
次に、PlayerInterstitialEventオブジェクトを作成し、primaryItemをプレイヤーの現在のアイテムとして指定します。これは、ムービーアセット、この例の開始時間、再生の約10秒、およびtemtemtemsを以前に作成した広告ポッドとして表します。

00:12:33.000 --> 00:12:38.000
そして、オブジェクトが作成されたら、コントローラーのイベントプロパティに設定するだけです。

00:12:38.000 --> 00:12:47.000
AVPlayerViewControllerでプレーヤーを設定する直前に、currentItem.translates- PlayerInterstitialEventsプロパティをtrueに設定していることに気付くかもしれません。

00:12:47.000 --> 00:12:55.000
これが設定されると、AVKitはタイムラインにナビゲーションマーカーを配置し、tvOSでナビゲーション制限を強制します。

00:12:55.000 --> 00:13:02.000
それでは、tvOSのHLSインタースティシャルとのAVKit統合について、デモに進みましょう。

00:13:02.000 --> 00:13:06.000
ここでは、再生後約40秒で開始される広告があります。

00:13:06.000 --> 00:13:10.000
そして、この広告にはナビゲーション制限が設定されていません。

00:13:10.000 --> 00:13:15.000
広告マーカーがタイムラインに表示されていることがわかります。

00:13:15.000 --> 00:13:20.000
広告が再生されると、再生ヘッドの上にカウントダウンタイマーが表示されます。

00:13:20.000 --> 00:13:27.000
そして、この広告には制限が設定されていないので、Apple TVのリモコンの端に手を滑るので、スキップするオプションが表示されます。

00:13:27.000 --> 00:13:32.000
そうすることで、広告からスキップしてプライマリに戻ることになります。

00:13:32.000 --> 00:13:40.000
さて、これについては同じ設定ですが、広告にはスキップ制限が設定されています。

00:13:40.000 --> 00:13:44.000
そのため、広告が再生されると、広告からスキップするオプションは表示されません。

00:13:44.000 --> 00:13:49.000
プライマリに戻る前に、それが完全に再生されるのを待つ必要があります。

00:13:49.000 --> 00:13:51.000
「グレイハウンド」のトム・ハンクス。

00:13:51.000 --> 00:13:55.000
定格PG-13。Apple TV+限定。

00:13:55.000 --> 00:13:57.000
ありがとう、ジョシュ。

00:13:57.000 --> 00:13:59.000
このタイムラインに見られるように、ここには2つの広告があります。

00:13:59.000 --> 00:14:04.000
1つ目はナビゲーション制限がなく、2つ目はジャンプ制限があります。

00:14:04.000 --> 00:14:10.000
だから、私たちが両方の広告を飛び越えようとするとき...

00:14:10.000 --> 00:14:15.000
広告の再生中に、再生ヘッドが制限された広告マーカーにスナップすることがわかります。

00:14:15.000 --> 00:14:20.000
私たちは高いものから地獄を降ろします。

00:14:20.000 --> 00:14:22.000
「グレイハウンド」のトム・ハンクス。

00:14:22.000 --> 00:14:26.000
定格PG-13。Apple TV+限定。

00:14:26.000 --> 00:14:31.000
そして、広告が終わった後、私たちはシークの場所から再開します。

00:14:31.000 --> 00:14:35.000
最後に、DATERANGEタグを使用してサーバーサイド広告をスケジュールできるようになりました。

00:14:35.000 --> 00:14:42.000
ビデオオンデマンドストリームの履歴書オフセットを0に指定して、中断したところからプログラムに再参加するようにします。

00:14:42.000 --> 00:14:46.000
そして、ライブストリームのこの属性をスキップして、ライブエッジで再参加することができます。

00:14:46.000 --> 00:14:59.000
広告アセットの遅延バインディングにX-ASSET-LIST属性を使用し、X-PLAYOUT-LIMIT属性を使用してライブブロードキャストの早期リターンをスケジュールし、X-RESTRICT属性でナビゲーション制限を指定できます。

00:14:59.000 --> 00:15:04.000
クライアント側で広告の再生を監視するには、AVPlayer-InterstitialEventMonitorを使用します。

00:15:04.000 --> 00:15:08.000
また、AVPlayer-InterstitialEventControllerを使用してプログラムで広告を設定できます。

00:15:08.000 --> 23:59:59.000
WWDC21の残りの部分を見て楽しんでいただきありがとうございます。

