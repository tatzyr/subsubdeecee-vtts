WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
ニシャント・ネロガル:こんにちは、WWDCへようこそ。

00:00:09.000 --> 00:00:14.000
私の名前はニシャントで、AVFoundationチームのエンジニアです。

00:00:14.000 --> 00:00:17.000
今日は、HLSバリアントを見ていきます。

00:00:17.000 --> 00:00:28.000
まず、AVFoundation APIを使用してHLSバリアントを検査する方法を見て、後で、ダウンロードでHLSバリアントを使用する方法を見ていきます。

00:00:28.000 --> 00:00:32.000
では、バリアント検査から始めましょう。

00:00:32.000 --> 00:00:36.000
皆さんは、典型的なマスタープレイリストがどのように見えるかに精通している必要があります。

00:00:36.000 --> 00:00:39.000
ここに例があります。

00:00:39.000 --> 00:00:42.000
この特定のプレイリストには、2つのバリエーションがあります。

00:00:42.000 --> 00:00:52.000
バリアントの1つはステレオオーディオを備えたSDRバリアントで、もう1つはドルビーアトモスオーディオを備えたドルビービジョンバリアントです。

00:00:52.000 --> 00:00:58.000
この特定のプレイリストを表すアセットは、アプリでこのようなものが表示される場合があります。

00:00:58.000 --> 00:01:06.000
よく見ると、アセットには4K、ドルビービジョン、ドルビーアトモスのバッジがあることがわかります。

00:01:06.000 --> 00:01:11.000
以前、あなたはバンドからそのような情報を得る必要がありました。

00:01:11.000 --> 00:01:17.000
iOS 15では、HLSプレイリストを直接検査して推測できます。

00:01:17.000 --> 00:01:23.000
そのために、マスタープレイリストの場所を指すAVURLAssetから始めます。

00:01:23.000 --> 00:01:29.000
後で、バリアントのプロパティからHLSプレイリストを取得できます。

00:01:29.000 --> 00:01:37.000
このAVAssetVariantは、ここで見られるように、マスタープレイリストからそうであるようにHLSバリアントを表しています。

00:01:37.000 --> 00:01:41.000
したがって、異なるメディア属性を表す複数のプロパティがあります。

00:01:41.000 --> 00:01:46.000
メディアビットレートなどの属性の一部は、直接アクセスできます。

00:01:46.000 --> 00:01:53.000
ビデオやオーディオの演出に関連するものなど、他の属性は、独自のサブクラスにグループ化されています。

00:01:53.000 --> 00:02:00.000
それらはそれぞれVideoAttributesとAudioAttributesと呼ばれています。

00:02:00.000 --> 00:02:06.000
ご覧のとおり、それぞれに関連プロパティがあり、資産を理解するために使用できます。

00:02:06.000 --> 00:02:11.000
これで、AVFoundationでHLSバリアントを検査する方法がわかりました。

00:02:11.000 --> 00:02:14.000
ダウンロードでそれらをどのように使用できるか見てみましょう。

00:02:14.000 --> 00:02:19.000
オフライン再生用のHLSコンテンツのダウンロードは2016年からサポートされています。

00:02:19.000 --> 00:02:28.000
HLSダウンロードAPIに精通していない場合は、WWDC 2020のトピックに関する以前の講演をチェックすることをお勧めします。

00:02:28.000 --> 00:02:34.000
iOS 15では、HLSダウンロードAPIを使用して、さらに強力にしています。

00:02:34.000 --> 00:02:40.000
通常、ダウンロード用に選択されたHLSバリアントに影響を与えたい。

00:02:40.000 --> 00:02:45.000
これは、ビジネス上の要件によるものかもしれませんし、ユーザーにより多くの選択肢を提供したいだけかもしれません。

00:02:45.000 --> 00:02:49.000
以前は、downloadTaskオプションを使用してそのような入力を提供できました。

00:02:49.000 --> 00:02:57.000
HDRのオプション、ロスレスオーディオのオプション、その他いくつかの属性がありました。

00:02:57.000 --> 00:03:03.000
iOS 15では、NSPredicatesを使用してバリアントの選択を拡大しています。

00:03:03.000 --> 00:03:08.000
あなたはすでにコアデータの述語の使用に精通しているかもしれません。

00:03:08.000 --> 00:03:12.000
そうでなければ、心配しないでください、あなたは今日それらについて学ぶでしょう。

00:03:12.000 --> 00:03:17.000
始めるために、バリアント修飾子インターフェースを紹介しましょう。

00:03:17.000 --> 00:03:22.000
このインターフェイスを使用すると、AVFoundationにバリアント設定を指定できます。

00:03:22.000 --> 00:03:27.000
そして、私が言ったように、それらはNSPredicatesを使用して構築することができます。

00:03:27.000 --> 00:03:31.000
いくつかの例を見て理解しましょう。

00:03:31.000 --> 00:03:37.000
ここでは、ピークビットレートを5メガビット未満と表現するNSPredicateがあります。

00:03:37.000 --> 00:03:44.000
これを使用してバリアント修飾子を構築し、AVFoundationに5メガビット未満のバリアントを好むように指示します。

00:03:44.000 --> 00:03:47.000
十分に簡単ですよね?

00:03:47.000 --> 00:03:49.000
別の例を見てみましょう。 もう一度見てみましょう。

00:03:49.000 --> 00:03:53.000
ここでは、HDRビデオ範囲のNSPredicateを作成します。

00:03:53.000 --> 00:03:59.000
そして、以前と同様に、それのバリアント修飾子を構築できます。

00:03:59.000 --> 00:04:06.000
また、複数の述語を組み合わせて複合述語を作成し、それらを使用してバリアント修飾子を作成することもできます。

00:04:06.000 --> 00:04:11.000
バリアントの任意のプロパティを使用して述語を作成できます。

00:04:11.000 --> 00:04:20.000
述語フォーマット文字列を使用して簡単に表現できないオーディオチャンネル数などのプロパティについては、カスタムコンストラクタがあります。

00:04:20.000 --> 00:04:24.000
バリアント修飾子については、ヘッダードキュメントで調べることができます。

00:04:24.000 --> 00:04:30.000
バリアント修飾子を取得したら、それを使用してコンテンツ設定と呼ばれるものを作成します。

00:04:30.000 --> 00:04:37.000
各コンテンツ構成は、ビデオ、オーディオ、および字幕のレンディションのセットを表します。

00:04:37.000 --> 00:04:42.000
さて、例を挙げて理解しましょう。

00:04:42.000 --> 00:04:47.000
これは、先ほど見た2つの述語を組み合わせたバリアント修飾子です。

00:04:47.000 --> 00:04:50.000
ええ、これはコンパウンドです。ハハハ。

00:04:50.000 --> 00:04:55.000
5メガビット未満のHDRバリアントを好むことをAVFoundationに通知します。

00:04:55.000 --> 00:05:04.000
また、英語とフランス語のオーディオと英語の字幕のレンディションを表す一連のメディアセレクションもあります。

00:05:04.000 --> 00:05:08.000
これらは両方とも、コンテンツ設定オブジェクトを作成するために使用できます。

00:05:08.000 --> 00:05:13.000
これらのコンテンツ設定を複数作成し、downloadTaskに提供できます。

00:05:13.000 --> 00:05:19.000
これらの複数のコンテンツ構成は、ダウンロード構成インターフェイスによって結び付けられています。

00:05:19.000 --> 00:05:23.000
これはすべてをまとめる根です。

00:05:23.000 --> 00:05:30.000
AVURLAssetで作成され、アセット名とオプションで画像が必要です。

00:05:30.000 --> 00:05:35.000
アセット名と画像は設定アプリに表示されます。

00:05:35.000 --> 00:05:40.000
これにより、ユーザーは設定アプリの1か所ですべてのダウンロードを管理できます。

00:05:40.000 --> 00:05:46.000
そしてもちろん、downloadTaskは複数のコンテンツ設定で設定できます。

00:05:46.000 --> 00:05:57.000
よく見ると、コンテンツ構成の1つがプライマリとして指定され、残りは補助になります。

00:05:57.000 --> 00:06:10.000
両者の違いは、通常、ビデオ、オーディオ、および字幕のレンディションのプライマリセットをダウンロードし、追加のオーディオまたは字幕のレンディションでそれらを補完したいということです。

00:06:10.000 --> 00:06:21.000
追加のレンディションを補助コンテンツ構成として指定することで、AVFoundationに複数のビデオレンディションのダウンロードを最適化し、ダウンロードしないように指示します。

00:06:21.000 --> 00:06:25.000
例を挙げるにつれて、より明確になります。

00:06:25.000 --> 00:06:28.000
これが完全な例です。

00:06:28.000 --> 00:06:35.000
まず、AVURLAssetとタイトルでダウンロード設定を作成することから始めます。

00:06:35.000 --> 00:06:39.000
主なコンテンツ構成は、先ほど見たものと同じです。

00:06:39.000 --> 00:06:47.000
英語とフランス語のオーディオと英語の字幕レンディションで、5メガビット未満のHDRバリアントをダウンロードするように構成されています。

00:06:47.000 --> 00:06:55.000
この特定の例では、英語オーディオをロスレス形式でダウンロードするための補助コンテンツ構成で補完したいと思います。

00:06:55.000 --> 00:07:00.000
これで、ダウンロードしたい両方のコンテンツ構成があります。

00:07:00.000 --> 00:07:06.000
optimizesAuxiliary ContentConfigurationsをtrueに設定してください。

00:07:06.000 --> 00:07:19.000
ちなみに、デフォルトでは真実であり、AVFoundationはロスレスバリアントを選択できるため、ロスレスバリアントのビデオレンディションはプライマリコンテンツ構成と同じです。

00:07:19.000 --> 00:07:28.000
Falseに設定すると、ロスレスバリアントが独立して評価され、重複したビデオレンディションがダウンロードされる可能性があります。

00:07:28.000 --> 00:07:32.000
これにより、私たちが望まないダウンロードサイズが大きくなる可能性があります。

00:07:32.000 --> 00:07:38.000
OK、ダウンロード設定が完了したら、それを使用してdownloadTaskを作成できます。

00:07:38.000 --> 00:07:42.000
ダウンロードを開始するには、downloadTaskを再開します。

00:07:42.000 --> 00:07:48.000
iOS 15以降では、NSProgressインターフェイスを使用してdownloadTaskの進捗状況を観察することもできます。

00:07:48.000 --> 00:07:55.000
NSProgressオブジェクトはKVO観測可能で、それを使用してユーザーインターフェイスを更新できます。

00:07:55.000 --> 00:07:57.000
先に進みます。

00:07:57.000 --> 00:08:04.000
述語で表現するのが難しいかもしれないバリアントを選択するためのビジネスロジックを持っている人もいるかもしれないことを理解しています。

00:08:04.000 --> 00:08:10.000
このような場合は、明示的にダウンロードするバリアントを選択することもできます。

00:08:10.000 --> 00:08:18.000
この例では、すでにプライマリバリアントと補助バリアントとそれに合うメディアの選択を選択しました。

00:08:18.000 --> 00:08:25.000
バリアントで直接修飾子を作成することで、AVFoundationにそのままダウンロードするように指示できます。

00:08:25.000 --> 00:08:30.000
ダウンロードしたデバイスで再生できるように、バリアントを選択するように注意してください。

00:08:30.000 --> 00:08:32.000
それが私たちが今日持っているすべてです、皆さん。

00:08:32.000 --> 00:08:38.000
最後に、HLSバリアントを検査し、それらを使用してdownloadTaskを設定する方法を調べました。

00:08:38.000 --> 00:08:43.000
その過程で、downloadTask設定用のさまざまなインターフェイスに遭遇しました。

00:08:43.000 --> 00:08:46.000
1つ目はバリアント修飾子でした。

00:08:46.000 --> 00:08:49.000
これは、バリアントの好みを表現するために使用されます。

00:08:49.000 --> 00:08:52.000
その後、コンテンツ構成インターフェースを見ました。

00:08:52.000 --> 00:08:58.000
コンテンツ構成は、バリアント設定とメディア選択の選択肢を結び付けます。

00:08:58.000 --> 00:09:01.000
最後に、ダウンロード設定を見ました。

00:09:01.000 --> 00:09:06.000
ダウンロード設定は、すべてを結びつけるルートインターフェースです。

00:09:06.000 --> 00:09:12.000
最後になりましたが、NSProgressを使用してdownloadTaskを監視できることも学びました。

00:09:12.000 --> 00:09:15.000
詳細については、ヘッダードキュメントを確認してください。

00:09:15.000 --> 00:09:17.000
彼らはとてもよくコメントされています。

00:09:17.000 --> 00:09:19.000
見てくれてありがとう、バイバイ!

00:09:19.000 --> 23:59:59.000
♪

