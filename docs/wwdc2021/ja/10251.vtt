WEBVTT

00:00:00.000 --> 00:00:13.000
こんにちは、私はトムです。「UIKitとAppKitのSFシンボル」へようこそ。

00:00:13.000 --> 00:00:19.000
今日は、SFシンボルの新機能をアプリに実装する方法のツアーをご案内します。

00:00:19.000 --> 00:00:24.000
まず、さまざまなカラーモードとその使用方法について説明します。 それらを使用する方法について説明します。

00:00:24.000 --> 00:00:28.000
次に、設定を組み合わせて必要な効果を得る方法について説明します。 必要な効果を得ることができます。

00:00:28.000 --> 00:00:33.000
そして最後に、これらの色付きのシンボルをアトリビュート文字列で使用することを検討します。

00:00:33.000 --> 00:00:37.000
AppKitとUIKitの両方に適用される例が表示されます。

00:00:37.000 --> 00:00:47.000
新しいAPIは両方のフレームワークで同一であるため、いくつかのフレームワーク固有のニュアンスを除いて、一方に適用されるものは他方にも適用されます。

00:00:47.000 --> 00:00:50.000
新機能は、SFシンボルに色を追加することを中心としています。

00:00:50.000 --> 00:00:57.000
AppKitはmacOS 11で多色記号を追加しましたが、UIKitはiOS 15でそれらを追加しています。

00:00:57.000 --> 00:01:01.000
今年のリリースでは、SFシンボルのカラーレンダリングモードが追加されています。

00:01:01.000 --> 00:01:05.000
そして、明確にするために、これらのレンダリングモードはすべてのプラットフォームで動作します。

00:01:05.000 --> 00:01:11.000
新しいレンダリングモードをサポートするために、シンボルは異なるレイヤーを持ち、それぞれが異なる色を持っています。

00:01:11.000 --> 00:01:16.000
これらのレイヤーは階層で定義されており、あるレイヤーが他のレイヤーよりも目立つことを意味します。

00:01:16.000 --> 00:01:22.000
これは、一次、二次、三次の3つの層があることを意味します。

00:01:22.000 --> 00:01:27.000
iOSでは、シンボルは新しいレンダリングモードを有効にするためにテンプレートモードが必要です。

00:01:27.000 --> 00:01:32.000
macOSでは、新しい設定を適用すると、正しいテンプレートモードが自動的に設定されます。

00:01:32.000 --> 00:01:38.000
また、SFシンボルを初めての場合は、WWDC19の「SFシンボルの紹介」をチェックしてください。

00:01:38.000 --> 00:01:43.000
私たちが見る最初のレンダリングモードは、モノクロシンボルです。

00:01:43.000 --> 00:01:45.000
これがボイスメールアプリです。

00:01:45.000 --> 00:01:48.000
このUIでは、いくつかのシンボルが使用されています。

00:01:48.000 --> 00:01:52.000
1つのモノクロシンボルと、異なるカラーモードを使用する他のいくつかのシンボルがあります。

00:01:52.000 --> 00:01:59.000
しかし、まずモノクロのシンボルに焦点を当てて、後で他のものに戻ります。

00:01:59.000 --> 00:02:05.000
名前が示すように、モノクロのシンボルには1つの色しかありません。通常、ビューの色合いまたはアクセントカラーです。

00:02:05.000 --> 00:02:13.000
そして、この結果を達成するために、新しいシンボル画像を作成し、それを画像ビューに割り当て、色合いまたはアクセント色を設定してシンボルの色を設定します。

00:02:13.000 --> 00:02:22.000
そして、ここでは何も変わっていません。デフォルトの動作であるため、モノクロシンボルをレンダリングするために余分な設定は必要ありません。

00:02:22.000 --> 00:02:27.000
そのため、iOS 15とmacOS 11以前はモノクロが唯一のレンダリングモードでした。

00:02:27.000 --> 00:02:33.000
色を指定するには、画像ビューに色合いまたはアクセント色を設定するだけです。それだけです。

00:02:33.000 --> 00:02:40.000
既存のモノクロモードがなくなったので、新しいモード、階層的なカラーシンボルについて話すことができます。

00:02:40.000 --> 00:02:47.000
Macの階層記号の良い例は、コントロールセンターで使用されるアイコンです。

00:02:47.000 --> 00:02:54.000
コントロールセンターでシンボルが使用されている場所がいくつかありますが、表示セクションにズームインしましょう。

00:02:54.000 --> 00:03:01.000
ここではいくつかのシンボルが使用されています。中央のトグルボタンの列と、デバイスのリストのアイコンです。

00:03:01.000 --> 00:03:08.000
デバイスのシンボルは、それらの上のトグルボタンとは異なる色合いで、これらは階層的な色のシンボルです。

00:03:08.000 --> 00:03:16.000
階層カラーモードは、シンボルのレイヤー階層を使用して各レイヤーをカラー化し、提供された色がプライマリレイヤーカラーとして使用されます。

00:03:16.000 --> 00:03:23.000
二次層と三次層は、不透明度が徐々に低下する原色のバリエーションを得る。

00:03:23.000 --> 00:03:32.000
既存のタイプのシンボル構成とまったく同じように機能する、新しいタイプのシンボル構成でカラーモードを指定します。

00:03:32.000 --> 00:03:40.000
また、imageViewのシンボル構成をこのタイプの構成に設定すると、シンボルは階層的なカラーシンボルとして表示されます。

00:03:40.000 --> 00:03:48.000
階層的な色記号の配色は1つの色に基づいており、他の色は不透明度を減らすことによってその1つの色から派生しています。

00:03:48.000 --> 00:03:50.000
レイヤー階層はここで重要です。

00:03:50.000 --> 00:03:55.000
1つのレイヤーが欠落している場合、関連する派生色は使用されません。

00:03:55.000 --> 00:03:58.000
3番目のカラーレンダリングモードもあります:パレット。

00:03:58.000 --> 00:04:02.000
私たちが発見するように、それは階層的なカラーレンダリングモードに似ていますが、また異なります。

00:04:02.000 --> 00:04:05.000
ボイスメールの例に戻りましょう。

00:04:05.000 --> 00:04:10.000
右側の3つのボタンにはそれぞれ複数の色があり、それぞれに異なる色があります。

00:04:10.000 --> 00:04:14.000
これらのボタンを一歩ずつ構築します。

00:04:14.000 --> 00:04:17.000
まず、目的の画像でボタンを初期化します。

00:04:17.000 --> 00:04:20.000
これには新しいボタン設定を使用しています。

00:04:20.000 --> 00:04:23.000
しかし、これらのプレーンな画像は、私たちが望むものではありません。

00:04:23.000 --> 00:04:28.000
画像は円の形をしており、塗りつぶされている必要があります。

00:04:28.000 --> 00:04:34.000
以前は、シンボル名に目的の修飾子を追加することでこれを行うことができましたが、今ではより良い方法があります:画像のバリエーション。

00:04:34.000 --> 00:04:42.000
名前が示すように、画像のバリアントを使用する場合は、名前を手動で変更することなく、画像の別のバリアントを要求できます。

00:04:42.000 --> 00:04:47.000
まず、画像を円に変えましょう。

00:04:47.000 --> 00:04:50.000
次に、それらの円に素敵な塗りつぶしを追加します。

00:04:50.000 --> 00:04:57.000
ボタンコンテナビューでバリアントを指定しているため、これらのバリアントはすべてのボタン内のすべての画像に適用されます。

00:04:57.000 --> 00:05:02.000
画像にそのバリアントがない場合は、最初に指定された画像が使用されます。

00:05:02.000 --> 00:05:11.000
バリアント仕様はビュー階層を伝播し、その階層の画像ビューは魔法をかけるためにそれらを拾います。

00:05:11.000 --> 00:05:16.000
形が邪魔になったので、これらのシンボルのそれぞれの色をどのように指定しますか?

00:05:16.000 --> 00:05:21.000
さて、色のパレットを指定する新しいタイプのシンボル構成を作成できます。

00:05:21.000 --> 00:05:26.000
これらの色は、階層的な色構成と同様にレイヤー階層に適用されます。

00:05:26.000 --> 00:05:31.000
しかし、ここでは、派生色を使用するのではなく、明示的に指定された色を使用しています。

00:05:31.000 --> 00:05:36.000
また、パレットカラーのリストに新しいタイプの色を使用しています。ティントカラーです。

00:05:36.000 --> 00:05:41.000
これは、ビューが適切なレイヤーに色合いの色を自動的に適用することを意味します。

00:05:41.000 --> 00:05:44.000
そして、次のボタンについては、以前と同じように行います。

00:05:44.000 --> 00:05:50.000
ベースイメージをロードし、適切な色構成を構築し、ボタン構成に適用します。

00:05:50.000 --> 00:05:56.000
そして、この場合、以前とまったく同じように見えますが、ここには落とし穴があり、後で説明します。

00:05:56.000 --> 00:06:01.000
そして、同じシナリオは最後のボタンでも機能しますが、色が違うだけです。

00:06:01.000 --> 00:06:05.000
そして、以前のように、なぜここで白を明示的に指定しなければならないのか疑問に思うかもしれません。

00:06:05.000 --> 00:06:09.000
モノクロのシンボルを使って正しく着色することはできませんか?

00:06:09.000 --> 00:06:14.000
答えはノーです、私たちはできません、そしてこれは私が前に言及したキャッチです。

00:06:14.000 --> 00:06:18.000
私たちのデザイナーは、これらのシンボルの内側の部分は常に白でなければならないと指定しました。

00:06:18.000 --> 00:06:24.000
そして今までは、モノクロ記号を使用していても、偶然に正しい結果が得られていたでしょう。

00:06:24.000 --> 00:06:27.000
どうして？私たちはライトモードでした。

00:06:27.000 --> 00:06:32.000
しかし、ダークモードに切り替えると、モノクロシンボルは望ましい結果を与えません。

00:06:32.000 --> 00:06:39.000
これは、モノクロバージョンが内側の部分にノックアウトを使用しているため、背景が隙間から出血するためです。

00:06:39.000 --> 00:06:47.000
さて、パレットレンダリングモードを使用することで、これらのボタンがさまざまなユーザーインターフェイススタイルに正しく表示されるようにします。

00:06:47.000 --> 00:06:50.000
私は前に新しい色について言及しました:ティントカラー。

00:06:50.000 --> 00:06:56.000
これは、使用されているビューの色合いの色に解決されるUIKitの新しいダイナミックカラーです。

00:06:56.000 --> 00:07:03.000
これは、シンボルレイヤーの色を指定するときに特に便利ですが、他の色を使用できる場所ならどこでもこの色を使用することができます。

00:07:03.000 --> 00:07:08.000
ただし、ダイナミックな色に関するルールは依然として適用されることを覚えておいてください。

00:07:08.000 --> 00:07:16.000
ダイナミックカラーがどのように機能するかの詳細については、WWDC19の「iOSでダークモードを実装する」セッションを参照してください。

00:07:16.000 --> 00:07:18.000
一部のシンボルには2つのレイヤーしかありません。

00:07:18.000 --> 00:07:22.000
たとえば、セカンダリレイヤーが欠落しているシンボルがたくさんあります。

00:07:22.000 --> 00:07:26.000
これらの種類のシンボルのパレットモードをどのように処理しますか?

00:07:26.000 --> 00:07:32.000
これらの良い例は、一次層と三次層のみを持つデバイスシンボルです。

00:07:32.000 --> 00:07:36.000
このiPadのシンボルを2層の色で色付けするにはどうすればよいですか?

00:07:36.000 --> 00:07:43.000
シンボルは最大3つのレイヤーを持つことができるので、各レイヤーに1つずつ3つの色を指定できます。

00:07:43.000 --> 00:07:48.000
この場合、レイヤーがないため、二次色は使用されません。

00:07:48.000 --> 00:07:52.000
ただし、2つのレイヤーのみのシンボルに対してこれを行う別の方法があります。

00:07:52.000 --> 00:08:01.000
これらのシンボルについては、構成で2色のみを指定でき、色は利用可能なレイヤーに順番に適用されます。

00:08:01.000 --> 00:08:12.000
前者の方法は、色が正しいレイヤーに直接マッピングされるため、レイヤーの数が混在する関連シンボルのパレット色を指定する方法の一貫性を可能にします。

00:08:12.000 --> 00:08:19.000
後者の方法は、シンボルに2つの層しかないことを確かに知っているときの利便性です。

00:08:19.000 --> 00:08:26.000
パレット設定は、シンボルのレイヤー階層に適用される明示的な色セットを指定します。

00:08:26.000 --> 00:08:31.000
階層レンダリングモードとは異なり、パレットレンダリングモードは派生色を作成しません。

00:08:31.000 --> 00:08:37.000
また、階層レンダリングモードと同様に、各シンボルレイヤーの階層レベルは重要です。

00:08:37.000 --> 00:08:41.000
3層未満のシンボルに便利なソリューションもあります。

00:08:41.000 --> 00:08:45.000
これにより、最後のカラーレンダリングモードであるマルチカラーに導きます。

00:08:45.000 --> 00:08:53.000
前に述べたように、このカラーモードは昨年AppKitとSwiftUIに追加されましたが、今年はUIKitに導入されました。

00:08:53.000 --> 00:08:56.000
これらのカテゴリの一部には、複数の色の画像があります。

00:08:56.000 --> 00:08:58.000
これらは多色のシンボルです。

00:08:58.000 --> 00:09:01.000
これをどのように実装するか見てみましょう。

00:09:01.000 --> 00:09:04.000
まず、各セルの画像を読み込む必要があります。

00:09:04.000 --> 00:09:09.000
今のところ、これらは通常のシンボルであり、デフォルトではモノクロモードになります。

00:09:09.000 --> 00:09:13.000
次に、多色のシンボルが欲しいことを示す必要があります。

00:09:13.000 --> 00:09:21.000
これを行うには、シンボルの多色バリアントを要求する設定を作成し、その設定を画像ビューに割り当てます。

00:09:21.000 --> 00:09:26.000
しかし、1つのアイコンは変わりませんでした。そのシンボルは多色をサポートしていません。

00:09:26.000 --> 00:09:29.000
では、どのシンボルが多色をサポートしているかをどうやって把握しますか?

00:09:29.000 --> 00:09:33.000
見つける簡単な方法は、SFシンボルアプリを使用することです。

00:09:33.000 --> 00:09:39.000
シンボルを検索し、インスペクタを使用して、シンボルがサポートしている演色モードを確認します。

00:09:39.000 --> 00:09:43.000
例えば、私たちの炎のシンボルはモノクロのみをサポートしています。

00:09:43.000 --> 00:09:47.000
しかし、肺のシンボルは4つのカラーレンダリングモードすべてをサポートしています。

00:09:47.000 --> 00:09:55.000
さらに、1行のコードを書かなくてもシンボルがどのように表示されるかをよりよく理解するために、ここで各レイヤーのカラーマッピングで遊ぶこともできます。

00:09:55.000 --> 00:09:58.000
私たちの例に戻りましょう。

00:09:58.000 --> 00:10:07.000
したがって、これらのシンボルのすべてがマルチカラーをサポートしているわけではないため、シンボルを正しく表示するには、TintColorを手動で正しい値に設定する必要があります。

00:10:07.000 --> 00:10:13.000
一部の多色シンボルには色合いのレイヤーがあり、ビューの色合いやアクセントの色の影響を受けます。

00:10:13.000 --> 00:10:16.000
そのようなレイヤーのないシンボルは影響を受けません。

00:10:16.000 --> 00:10:21.000
私たちの例では、それらのどれもそうしないので、すべてがそのままです。

00:10:21.000 --> 00:10:29.000
構成の名前から推測したように、多色構成は、シンボルの多色レンダリングの好みを示します。

00:10:29.000 --> 00:10:33.000
前に述べたように、すべてのシンボルに多色のバリエーションがあるわけではありません。

00:10:33.000 --> 00:10:40.000
マルチカラー構成を他のカラー構成の1つと組み合わせることができますが、それについては後で詳しく説明します。

00:10:40.000 --> 00:10:48.000
その結果、2つのカラーモードをサポートする構成になります。利用可能な場合はマルチカラー、それ以外の場合は他のカラーモードです。

00:10:48.000 --> 00:10:55.000
階層モードとパレットモードを組み合わせると、相互に排他的であるため、最後に指定されたモードになることに注意してください。

00:10:55.000 --> 00:11:01.000
次に、そのカラーモードがサポートされていない場合、システムはモノクロモードを使用します。

00:11:01.000 --> 00:11:06.000
したがって、多色記号には、コードで変更できない色の固定セットがあります。

00:11:06.000 --> 00:11:11.000
さらに、一部のシンボルには、色合いまたはアクセントカラーを使用してレンダリングされるレイヤーがあります。

00:11:11.000 --> 00:11:14.000
そして、これが機能するためには何もすることはありません。

00:11:14.000 --> 00:11:20.000
シンボルは、表示時にイメージビューから適切な色合いまたはアクセントカラーをピックアップします。

00:11:20.000 --> 00:11:23.000
さて、4つのモードすべてと、コードでそれらを使用する方法について説明します。

00:11:23.000 --> 00:11:26.000
しかし、Interface Builderでも同じことができますか?

00:11:26.000 --> 00:11:28.000
幸いなことに、答えはイエスです。

00:11:28.000 --> 00:11:35.000
Xcodeは、IDEから直接カラーレンダリングモードを設定するための同様の機能を追加しました。

00:11:35.000 --> 00:11:39.000
ここでは、Planetsアプリのストーリーボードを表示するXcode Openがあります。

00:11:39.000 --> 00:11:44.000
ImageView UIが拡張され、カラーレンダリングモードを指定できるようになりました。

00:11:44.000 --> 00:11:50.000
また、結果のカラー構成は、既存の構成と組み合わせることもできます。

00:11:50.000 --> 00:11:57.000
Interface Builderのこれらすべての新機能についてもっと知りたい場合は、今年の「スタイルでインターフェイスを構築する」をチェックしてください。

00:11:57.000 --> 00:12:04.000
これらすべての異なるカラーモードについて話したので、それらを他の構成と組み合わせて、より複雑な効果を得るにはどうすればよいですか?

00:12:04.000 --> 00:12:06.000
幸いなことに、それはそれほど難しくありません。

00:12:06.000 --> 00:12:11.000
今回はショートカットアプリから別の例を見てみましょう。 ショートカットアプリから。

00:12:11.000 --> 00:12:17.000
各アクションのアイコンはかなり大きいですが、階層的なカラーレンダリングモードもあるようです。

00:12:17.000 --> 00:12:25.000
したがって、2つの構成が必要です。1つはポイントサイズを指定するため、もう1つは色構成を指定するためです。

00:12:25.000 --> 00:12:27.000
しかし、私たちは1つしか適用できません。

00:12:27.000 --> 00:12:28.000
それらをどのように組み合わせますか?

00:12:28.000 --> 00:12:31.000
これを行う簡単な方法があることが判明しました。

00:12:31.000 --> 00:12:38.000
2つの構成を組み合わせる方法があり、その結果、両方の構成の要素を持つ構成になります。

00:12:38.000 --> 00:12:47.000
この例では、2つの構成を作成します。1つはポイントサイズを指定するため、もう1つは階層色を指定するためです。

00:12:47.000 --> 00:12:51.000
次に、適用方法を使用してそれらを組み合わせて、最終的な構成を作成します。

00:12:51.000 --> 00:12:56.000
そして、その設定は画像を表示する画像ビューに適用され、望ましい結果が得られます。

00:12:56.000 --> 00:13:00.000
このメカニズムは色構成だけに限定されないことに注意してください。

00:13:00.000 --> 00:13:03.000
これは他のタイプの構成でも使用できます。

00:13:03.000 --> 00:13:06.000
たとえば、テキスト、スタイル、重みを組み合わせます。

00:13:06.000 --> 00:13:10.000
今、私たちは異なる構成を組み合わせる方法を知っています。

00:13:10.000 --> 00:13:14.000
1つのトピックが残っています。帰属文字列にカラーシンボルを使用することです。

00:13:14.000 --> 00:13:16.000
この最後の例を見てみましょう。

00:13:16.000 --> 00:13:21.000
これは、さまざまなホテルや利用可能な部屋に関する情報を一覧表示する架空のアプリです。

00:13:21.000 --> 00:13:24.000
記号がテキストと組み合わされている場所がいくつかあります。

00:13:24.000 --> 00:13:28.000
しかし、部屋のアメニティと、このテキストをどのように実装するかに焦点を当てましょう。

00:13:28.000 --> 00:13:30.000
それはかなりシンプルですが、少し精巧です。

00:13:30.000 --> 00:13:34.000
画像の添付ファイルでアトリビュート文字列を作成する必要があります。

00:13:34.000 --> 00:13:38.000
まず、正しい色構成を使用して画像をロードします。

00:13:38.000 --> 00:13:42.000
この場合、階層的な色構成を使用しています。

00:13:42.000 --> 00:13:48.000
この画像を使用してテキスト添付ファイルを作成し、その添付ファイルを使用して帰属文字列を完成させます。

00:13:48.000 --> 00:13:52.000
そして、これは利用可能なすべてのアメニティに対して繰り返されます。

00:13:52.000 --> 00:14:00.000
テキストを表示するラベルでは、階層的な色構成に使用したのと同じ正しいフォントと同じテキスト色も指定します。

00:14:00.000 --> 00:14:08.000
モノクロシンボルは自動的にテキストの色を選択しますが、色構成のシンボルの場合は、色を明示的に指定する必要があります。

00:14:08.000 --> 00:14:15.000
また、カラーシンボルは、モノクロのシンボルと同様に、文字列で指定されたフォントサイズをピックアップします。

00:14:15.000 --> 00:14:24.000
これらのステップの後、私たちが望む結果が得られます。帰属文字列のシンボルの統合のおかげで、適切なコンテンツ、色、サイズのラベルです。

00:14:24.000 --> 00:14:31.000
既存のものに加えて、SFシンボルに3つの新しいカラーモードを導入し、アプリでそれらを使用する方法を説明しました。

00:14:31.000 --> 00:14:34.000
シンボルは、アプリに高品質の画像を追加するのに最適な方法です。

00:14:34.000 --> 00:14:41.000
色付きのシンボルはそれを拡大し、さらに多くの可能性を可能にします。

00:14:41.000 --> 00:14:45.000
このセッションを楽しんだ場合は、いくつかの関連セッションを必ずチェックしてください。

00:14:45.000 --> 00:14:50.000
新機能の入門書については、「SFシンボルの新機能」をご覧ください。

00:14:50.000 --> 00:14:57.000
または、「SwiftUIのSFシンボル」を見て、SwiftUIで新しいシンボルを使用する方法を確認してください。

00:14:57.000 --> 00:14:59.000
見てくれてありがとう、そして今、素晴らしいアプリを作りに行きましょう!

00:14:59.000 --> 23:59:59.000
[明るい音楽]。

