WEBVTT

00:00:00.000 --> 00:00:16.000
みなさん、こんにちは！私の名前はアヤカで、Mac用のショートカットを紹介するためにここにいることをとても嬉しく思います。

00:00:16.000 --> 00:00:23.000
まず、Mac用のショートカットの概要と、今年ショートカットにもたらす他のエキサイティングな新しいアップデートのいくつかから始めたいと思います。

00:00:23.000 --> 00:00:30.000
ショートカットを使用すると、反復的なタスクを自動化し、さまざまなアプリの機能をつなげて問題を解決できます。

00:00:30.000 --> 00:00:32.000
それはあなたの技術の使い方を創造的にすることができます。

00:00:32.000 --> 00:00:39.000
そして、Mac用のショートカットは、自動化をこれまで以上に楽しくアクセスしやすくします。

00:00:39.000 --> 00:00:44.000
アプリを初めて開くと、iPhoneからすでに同期されているすべてのショートカットが表示されます。

00:00:44.000 --> 00:00:52.000
このアプリには、新しいMac固有のショートカットなど、すぐに使用できる新しいショートカットを発見できるショートカットギャラリーも含まれています。

00:00:52.000 --> 00:01:01.000
また、独自のショートカットを作成したい場合は、Macでくつろげるように一から再設計されたショートカットエディターを使用することもできます。

00:01:01.000 --> 00:01:13.000
ところで、私たちはSwiftUIでMacアプリのほぼ全体を書きました。これにより、iOSとMacアプリの間で統一されたコードベースを維持しながら、各プラットフォームに合わせて詳細を調整することができます。

00:01:13.000 --> 00:01:17.000
iOSと同様に、Mac上のどのアプリでもショートカットにアクションを提供できます。

00:01:17.000 --> 00:01:29.000
このセッションでは、iOSアプリ、ネイティブMacアプリ、またはMac Catalystで構築されたアプリを開発しているかどうかにかかわらず、アプリのショートカットをサポートすることで、macOSで強力なワークフローを有効にする方法について説明します。

00:01:29.000 --> 00:01:38.000
また、AppleScriptやAutomatorなど、私たちが知っていて愛している既存のツールを含め、ショートカットがMacの自動化の全体像にどのように適合するかについても説明します。

00:01:38.000 --> 00:01:51.000
今年は、フォーカスとサウンド認識の2つの新しい自動化タイプと、ウィンドウとファイルを管理できるまったく新しい一連のアクションに加えて、後で強調します。

00:01:51.000 --> 00:01:57.000
あなたのアプリが、人々が強力なショートカットを作成するためのカスタムアクションを提供する方法も説明します。

00:01:57.000 --> 00:02:05.000
ちなみに、アプリがファイルプロバイダーと統合されている場合、これらの新しいファイルアクションは、アプリが提供するファイルで自動的に機能します。

00:02:05.000 --> 00:02:16.000
また、既存のSiriKitメッセージインテントを採用したアプリをお持ちの場合は、アプリからのカスタムメッセージ送信アクションを使用して、この機能を自動的に公開します。

00:02:16.000 --> 00:02:21.000
また、共有に関するいくつかのエキサイティングな新しいアップデートがあり、開発者がショートカットを構築して共有するのが大好きであることを知っています。

00:02:21.000 --> 00:02:26.000
今年は、ショートカットの配布をはるかに簡単にします。

00:02:26.000 --> 00:02:30.000
また、ショートカットをファイルとして配布できる新しいファイル形式もあります。

00:02:30.000 --> 00:02:34.000
また、プライベート共有を有効にしました。これは、ショートカットを同僚と共有するのに便利です。

00:02:34.000 --> 00:02:37.000
見てみましょう。 

00:02:37.000 --> 00:02:42.000
これで、特別な設定をオンにしなくても、誰でもショートカットをダウンロードできます。

00:02:42.000 --> 00:02:48.000
これは、ウェブサイトやアプリで独自のショートカットを配布できることを意味します。

00:02:48.000 --> 00:02:54.000
例えば、あなたのアプリのアクションを使用する素晴らしいショートカットを人々に提供したいとしましょう。

00:02:54.000 --> 00:03:05.000
さて、そのショートカットを作成してiCloudに共有すると、Appleはショートカットを公証し、アプリやウェブサイトで機能し、人々が簡単にダウンロードできるようにリンクに変換します。

00:03:05.000 --> 00:03:14.000
また、ライブラリからの写真のようにアプリにデータを渡すショートカットをダウンロードしたときに、より具体的な許可プロンプトを表示することで、人々がデータを管理できるようにしています。

00:03:14.000 --> 00:03:17.000
そして、もっとあります。

00:03:17.000 --> 00:03:24.000
ショートカットをファイルとして共有できるようになりました。これは、iCloudの外部にショートカットを配布する必要がある場合に便利です。

00:03:24.000 --> 00:03:30.000
そして、iCloudリンクと同様に、ショートカットファイルは安全であることを確認するためにAppleによって公証されます。

00:03:30.000 --> 00:03:41.000
最後になりましたが、連絡先と共有したり、個人的なバックアップを保存したりするために、iCloudにアップロードすることなく、ショートカットを非公開で共有するための新しいモードがあります。

00:03:41.000 --> 00:03:44.000
ショートカットファイルは、それらを送信した人の身元で署名されています。

00:03:44.000 --> 00:03:49.000
ショートカットに再署名する必要がある場合は、新しいショートカットコマンドラインツールを使用できます。

00:03:49.000 --> 00:03:53.000
これらはすべて、今年のショートカットのエキサイティングな新しいアップデートです。

00:03:53.000 --> 00:03:58.000
それでは、ショートカットが既存のMacオートメーション技術にどのように適合するかを見てみましょう。

00:03:58.000 --> 00:04:06.000
Macには、AppleScript、Shell Scripting、Automatorなど、オートメーションを深くサポートしてきた長い歴史があります。

00:04:06.000 --> 00:04:10.000
ShortcutsがAppleScriptsとShell Scriptingを完全にサポートしていることを共有できることを嬉しく思います。

00:04:10.000 --> 00:04:18.000
ショートカットエディタ内で直接スクリプトを作成して実行できる、ショートカットに組み込まれた新しいアクションがあります。

00:04:18.000 --> 00:04:21.000
次に、Automatorを見てみましょう。

00:04:21.000 --> 00:04:28.000
Automatorは、反復的なタスクを自動化するためのワークフローを作成できるMacの既存の自動化ツールです。

00:04:28.000 --> 00:04:31.000
ショートカットはMacの自動化の未来です。

00:04:31.000 --> 00:04:35.000
しかし、私たちはまだAutomatorとそれに依存するすべての人を深く気にかけています。

00:04:35.000 --> 00:04:46.000
Automatorからショートカットへの移行をできるだけスムーズにするために、ほとんどのAutomatorワークフローをショートカットに変換できる移行ツールを構築しました。

00:04:46.000 --> 00:04:57.000
たとえば、Finderで選択したPDFドキュメントから画像を作成する優れたワークフローがある場合、ショートカットはそれをインポートし、各Automatorアクションを1つ以上のショートカットアクションに変換できます。

00:04:57.000 --> 00:05:05.000
あなたがしなければならないのは、アプリにドラッグするか、右クリックメニューを使用して、ショートカットアプリでワークフローファイルを開くことだけです!

00:05:05.000 --> 00:05:08.000
あなたのワークフローはショートカットに変わります。

00:05:08.000 --> 00:05:18.000
移行を有効にするために、最も人気のあるAutomatorアクションをすべてショートカット、シェルスクリプトとAppleScriptを実行するアクション、ファイルの管理などを追加しました。

00:05:18.000 --> 00:05:22.000
そしてもちろん、これらの行動はすべて私たちの移住者によってサポートされています。

00:05:22.000 --> 00:05:28.000
それでは、あなたのアプリがショートカットにどのように適合するか、そしてそれが顧客のために生み出すことができる価値について話しましょう。

00:05:28.000 --> 00:05:34.000
アプリがショートカットと統合できる主な方法は、「アクション」を介してその機能を公開することです。

00:05:34.000 --> 00:05:45.000
ショートカットにアクションを公開することで、人々はアプリの機能をより速く使用し、アプリを使用して強力なワークフローを作成し、最後に、他のアプリと組み合わせてアプリを使用することができます。

00:05:45.000 --> 00:05:48.000
これらをもっと詳しく見てみましょう。

00:05:48.000 --> 00:05:53.000
macOSには、人々がショートカットを実行できる場所がたくさんあります。

00:05:53.000 --> 00:06:06.000
アプリからアクションを公開すると、突然、ショートカットアプリ自体、ショートカットメニューバー、キーボードショートカットの入力、Spotlightでの検索などから使用できるようになります。

00:06:06.000 --> 00:06:11.000
だから、あなたはこれまで以上に多くの場所であなたの機能をより速く使用するために人々を開放しています。

00:06:11.000 --> 00:06:17.000
さらに、アプリのアクションは、強力なマルチステップのショートカットの一部として使用できます。

00:06:17.000 --> 00:06:21.000
人々が自分のタスクを管理できるto-doアプリを作ったとしましょう。

00:06:21.000 --> 00:06:27.000
アプリの機能をアクションとして公開すると、突然、人々はそれらのアクションを使用して強力なワークフローを作成できます。

00:06:27.000 --> 00:06:36.000
たとえば、明日予定されているすべてのto-doを見つけ、優先度を高く設定し、ワンクリックでリストに表示するショートカットを作成できます。

00:06:36.000 --> 00:06:46.000
アクションをフックできるさまざまな方法があるため、いくつかのアクションを公開するだけで、アプリの機能に何千もの新しいユースケースを有効にすることができます。

00:06:46.000 --> 00:06:54.000
アプリからアクションを公開することで、アプリの機能を他のアプリと組み合わせて使用できるようにすることもできます。

00:06:54.000 --> 00:07:09.000
たとえば、画像編集アプリを作成し、アプリのカスタム画像フィルターを適用するアクションを公開すると、突然、人々はそのアクションを使用して、写真を選択し、画像フィルターを適用し、ソーシャルメディアに投稿するこのようなワークフローを作成できます。

00:07:09.000 --> 00:07:15.000
したがって、これらは、アクションを公開することで、人々があなたのアプリで何ができるかをスーパーチャージする方法のほんの一例です。

00:07:15.000 --> 00:07:23.000
アプリで人々に力を与えるために提供できるアクションの種類について詳しく知るために、素晴らしいアクションの設計をカバーするセッションを必ずチェックしてください。

00:07:23.000 --> 00:07:28.000
今からイアンに渡して、実際にこれらのアクションを構築する方法を教えてくれます。

00:07:28.000 --> 00:07:35.000
こんにちは、私はイアンです。今日は、Macアプリのショートカットアクションを構築する方法を紹介します。

00:07:35.000 --> 00:07:39.000
後で、統合のために心に留めておくべきいくつかの特別な考慮事項について説明します。

00:07:39.000 --> 00:07:43.000
アクションの構築から始めましょう。

00:07:43.000 --> 00:07:49.000
iOSと同様に、ショートカットのアクションは、SiriKitとも呼ばれるIntentsフレームワークを使用して構築されます。

00:07:49.000 --> 00:08:01.000
このセッションでは、人々が行う必要があるタスクのリストを追跡し、それぞれが独自の期日を持ち、それらのタスクを他の人と共有できる共同タスク管理アプリを開発しているふりをします。

00:08:01.000 --> 00:08:07.000
人々がMacのどこからでも私のアプリの機能を使用できることは本当に重要です。

00:08:07.000 --> 00:08:15.000
ショートカットと統合することで、ユーザーがアプリでタスクを含むマルチステップのショートカットを構築できるようにすることができます。

00:08:15.000 --> 00:08:21.000
アプリを見ると、ユーザーがやり取りするコンテンツの主なタイプはタスクです。

00:08:21.000 --> 00:08:24.000
各タスクには、いくつかの重要な属性があります。

00:08:24.000 --> 00:08:29.000
まず、タイトルがあります。これは、何をする必要があるかを説明するテキストです。

00:08:29.000 --> 00:08:35.000
タスクには、期日と、タスクを他の人と共有するためのリンクもあります。

00:08:35.000 --> 00:08:43.000
アプリ内のタスクに関連して実行できる操作もたくさんありますが、これは動詞と考えることができます。

00:08:43.000 --> 00:08:53.000
新しいタスクを追加したり、既存のタスクを編集または削除したり、特定の条件に一致するタスクを取得したり、もちろん、アプリは特定のタスクを表示したりできます。

00:08:53.000 --> 00:08:57.000
だから、それらの動詞のそれぞれについて、私はアクションを作成するつもりです。

00:08:57.000 --> 00:09:05.000
これらは、ユーザーが呼び出すことができる原始的な操作を形成し、これらのアクションは、人々がそれらを一緒に使用できるように設計されています。

00:09:05.000 --> 00:09:11.000
たとえば、これら2つをペアリングすることで、タスクを取得し、それを削除することができます。

00:09:11.000 --> 00:09:21.000
タスクを作成するだけで、誰かがメモから選択したテキストを受け取り、必要に応じてテキストを大文字にし、ユーザーに期日の入力を依頼する自動ワークフローを作成できます。

00:09:21.000 --> 00:09:30.000
その後、ショートカットはそのテキストと期日をタスクの作成アクションに渡すことができ、タスクを作成する意図を私のアプリに配信します。

00:09:30.000 --> 00:09:41.000
私のアプリでタスクが作成されると、私の意図は共有URLを含むタスクを返し、ショートカットはそのリンクをメッセージ内の誰かに送信できます。

00:09:41.000 --> 00:09:42.000
さて、それはほんの一例です。

00:09:42.000 --> 00:09:50.000
ショートカットには非常に多くの異なるアクションがあるため、人々はタスクの作成アクションをほぼ無限の方法で利用することができます。

00:09:50.000 --> 00:09:56.000
アプリが公開するアクションがわかったので、それらを実装し始めます。

00:09:56.000 --> 00:10:01.000
実装の最初のステップは、アプリのインテント定義ファイルを作成することです。

00:10:01.000 --> 00:10:07.000
このファイルをXcodeプロジェクトに追加すると、ソースコードと一緒にコンパイルされます。

00:10:07.000 --> 00:10:12.000
このプレゼンテーションでは、Mac用のかなり基本的なSwiftUIアプリがあります。

00:10:12.000 --> 00:10:18.000
ただし、使用するUIフレームワークに関係なく、インテントを追加するプロセスは非常に似ています。

00:10:18.000 --> 00:10:23.000
まず、インテント定義ファイルを作成します。

00:10:23.000 --> 00:10:28.000
テンプレートペインで、意図の定義を検索します。

00:10:28.000 --> 00:10:30.000
デフォルト名は問題ありません。

00:10:30.000 --> 00:10:34.000
コンパイルされるように、必ずアプリのターゲットに追加してください。

00:10:34.000 --> 00:10:38.000
これが新しい空のインテント定義ファイルです。

00:10:38.000 --> 00:10:46.000
ファイル内では、アプリが実装する各インテントと、この場合はタスクなどに使用される他のタイプを定義する必要があります。

00:10:46.000 --> 00:10:54.000
このアプリには、このタスクタイプを参照するいくつかのインテントがありますので、まずタスクタイプを定義します。

00:10:54.000 --> 00:11:00.000
これを行うには、左下の「+」ボタンをクリックし、「新しいタイプ」を選択します。

00:11:00.000 --> 00:11:06.000
各タイプは自動的に識別子とdisplayStringプロパティを持ちます。

00:11:06.000 --> 00:11:14.000
displayStringプロパティはタスクのタイトルに対して機能しますが、期日と共有リンクのタイプにさらにプロパティを追加する必要があります。

00:11:14.000 --> 00:11:21.000
まず、タスクをいつまでに完了しなければならないかを指定する期日プロパティを追加します。

00:11:21.000 --> 00:11:28.000
これは日付と時刻を表すので、日付コンポーネントタイプを選択します。

00:11:28.000 --> 00:11:36.000
また、他の人と共有できるタスクへのリンクであるURLも追加します。

00:11:36.000 --> 00:11:42.000
最初のタスクが完了したので、ダジャレは意図していないので、私は先に進んで意図を定義します。

00:11:42.000 --> 00:11:48.000
これは、タスクを作成できる意図です。

00:11:48.000 --> 00:11:57.000
「タスクの作成」という名前を付け、カテゴリを「作成」に変更します。

00:11:57.000 --> 00:12:02.000
また、意図が何をするかを説明する簡単な説明も書きます。

00:12:02.000 --> 00:12:07.000
ユーザーは、アプリが実装するアクションのリストを見ているときにこれが表示されます。

00:12:07.000 --> 00:12:10.000
次に、意図のパラメータを定義します。

00:12:10.000 --> 00:12:19.000
意図を関数のように考え、パラメータを関数がその作業を行うために渡さなければならない引数と考えてください。

00:12:19.000 --> 00:12:26.000
新しいタスクを作成するには、私のアプリはタイトルと期日を知る必要があるので、それぞれにパラメータを作成します。

00:12:26.000 --> 00:12:32.000
共有リンクは、タスクが作成されたときにアプリが生成されるため、事前に収集する必要はありません。

00:12:32.000 --> 00:12:37.000
タイトルのパラメータを追加することから始めましょう。

00:12:37.000 --> 00:12:41.000
タイプとして文字列を選択します。

00:12:41.000 --> 00:12:45.000
各タイプのパラメータには、それに関連付けられたいくつかの設定オプションがあります。

00:12:45.000 --> 00:12:48.000
それが理にかなっているなら、デフォルト値を指定できます。

00:12:48.000 --> 00:12:52.000
しかし、この場合は、空の文字列として残しておきます。

00:12:52.000 --> 00:13:03.000
次に、期日パラメータを日付コンポーネントタイプで追加します。

00:13:03.000 --> 00:13:13.000
そして、ここにプロンプトを追加するので、ユーザーが事前に日付を入力しない場合、アプリは実行時に日付を尋ねることができます。

00:13:13.000 --> 00:13:17.000
両方のパラメータが定義されたので、ほぼ完了です。

00:13:17.000 --> 00:13:22.000
最後に、ショートカットアプリのセクションまでスクロールして、さらにいくつかのことを記入する必要があります。

00:13:22.000 --> 00:13:25.000
まず、入力パラメータを指定します。

00:13:25.000 --> 00:13:34.000
多くの場合、ユーザーはどこか他の場所からテキストを受け取り、それを私たちのアクションに渡すので、私は入力としてタイトルパラメータを選択します。

00:13:34.000 --> 00:13:44.000
これにより、ショートカットを構築する際のエクスペリエンスが改善されるため、ユーザーがショートカットで以前のアクションのテキストをすでに持っている場合は、アクションを追加すると自動的に入力されます。

00:13:44.000 --> 00:13:48.000
最後にすべきことは、要約を定義することです。

00:13:48.000 --> 00:13:53.000
この文字列は、ショートカットでこのアクションを見たときにユーザーに表示されます。

00:13:53.000 --> 00:13:59.000
私はそれを「期日でタスクを作成する」と呼びます。

00:13:59.000 --> 00:14:07.000
タスクを作成するには両方のパラメータが必要なので、それらの両方を要約に入れているので、アクションを見ると常に表示されます。

00:14:07.000 --> 00:14:12.000
要約に入れたくないパラメータがある場合は、遠慮なく省いてください。

00:14:12.000 --> 00:14:18.000
これを行うと、ユーザーはアクションを展開して編集できるようになります。

00:14:18.000 --> 00:14:24.000
意図を定義すると、Xcodeは実装で使用するクラスとプロトコルを生成します。

00:14:24.000 --> 00:14:26.000
今、私はアプリを構築するつもりです。

00:14:26.000 --> 00:14:31.000
これにより、続行する前に意図の定義に問題がないことを確認します。

00:14:31.000 --> 00:14:35.000
ビルドログでは、いくつかの新しいコードが構築されているのが見えます。

00:14:35.000 --> 00:14:40.000
これらのソースファイルは、インテント定義に入れられたものに基づいてXcodeによって生成されます。

00:14:40.000 --> 00:14:47.000
Xcodeは、タスクタイプとCreateTaskIntentのソースコードを生成しました。

00:14:47.000 --> 00:14:51.000
これらの新しいタイプは、アプリのコードベースで使用できるようになりました。

00:14:51.000 --> 00:15:02.000
さらに、意図が定義されたので、ショートカットアプリを起動し、新しいショートカットを作成し、新しいタスク作成アクションを検索できます。

00:15:02.000 --> 00:15:05.000
コードを書いていないので、まだ機能しません。

00:15:05.000 --> 00:15:10.000
次に、アプリは着信インテントをディスパッチして処理する必要があります。

00:15:10.000 --> 00:15:15.000
このコードは、誰かがショートカットまたはSiriを介してアクションを実行するときに実行されます。

00:15:15.000 --> 00:15:20.000
アプリは、どのプロセスが意図を処理するかを決定する必要があり、2つのオプションがあります。

00:15:20.000 --> 00:15:27.000
第一に、それらをアプリ内で処理するか、第二に、別のインテント拡張を構築します。

00:15:27.000 --> 00:15:35.000
アプリ内インテント処理により、アプリはアプリデリゲートに配信される着信インテントに応答してその状態を操作できます。

00:15:35.000 --> 00:15:40.000
ほとんどのアプリはこれから始まり、必要に応じてインテント拡張機能に移行する必要があります。

00:15:40.000 --> 00:15:47.000
インテント拡張機能は、アプリに代わってインテントを処理できる軽量でスタンドアロンのプロセスです。

00:15:47.000 --> 00:16:00.000
インテントが実行されるたびにプロセスを起動する必要があるため、アプリ自体を起動する必要がないため、インテント拡張機能の構築は可能な限り効率的にするのに役立ちます。

00:16:00.000 --> 00:16:08.000
アプリとインテント拡張機能は、着信するインテントごとにインテントハンドラオブジェクトをインスタンス化して返すように求められます。

00:16:08.000 --> 00:16:13.000
これを行うために実装すべきAPIを見てみましょう。

00:16:13.000 --> 00:16:20.000
アプリ内インテント処理には、インテントハンドラを返すことができるAppDelegateメソッドがあります。

00:16:20.000 --> 00:16:26.000
macOS Montereyでは、このAPIはNSApplicationDelegateでも利用可能になりました。

00:16:26.000 --> 00:16:36.000
インテント拡張の場合、INExtensionのサブクラスはhandlerForIntentメソッドをオーバーライドできます。

00:16:36.000 --> 00:16:46.000
アプリ内インテント処理とインテント拡張機能の違いの詳細については、WWDC 2020の「エンパワーメント」セッションをご覧ください。

00:16:46.000 --> 00:16:50.000
次に、アプリに入り、アプリ内のインテント処理を実装します。

00:16:50.000 --> 00:16:55.000
最初にする必要があるのは、アプリのサポートされているインテントとしてCreateTaskIntentを追加することです。

00:16:55.000 --> 00:17:03.000
これにより、この意図がアプリデリゲートに配信されるべきであることをシステムに知らせます。

00:17:03.000 --> 00:17:08.000
次に、メインアプリのソースコードに移動します。

00:17:08.000 --> 00:17:11.000
まず、アプリのアプリデリゲートを作成します。

00:17:11.000 --> 00:17:21.000
これはSwiftUIアプリのライフサイクルを使用しているため、オブジェクトをSwiftUIに接続するためのデリゲートアダプターも作成する必要があります。

00:17:21.000 --> 00:17:29.000
インテントを受け取るには、インテントフレームワークをインポートし、handlerForIntentメソッドを実装します。

00:17:29.000 --> 00:17:36.000
ディスパッチメソッドができたので、次のステップはインテントのハンドラを実装することです。

00:17:36.000 --> 00:17:42.000
この例では、インテントを処理するための新しいクラスを作成しますが、これはアプリ内の任意のオブジェクトにすることができます。

00:17:42.000 --> 00:17:48.000
インテントハンドラーは、「ハンドリング」という単語で終わるこのインテントのために生成されたプロトコルに準拠する必要があります。

00:17:48.000 --> 00:17:54.000
Create Taskのインテントについては、CreateTaskIntentHandlingという名前です。

00:17:54.000 --> 00:18:05.000
次に、intentがCreateTaskIntentの場合、handlerForIntentメソッドを更新して新しいIntentHandlerオブジェクトを返します。

00:18:05.000 --> 00:18:10.000
Xcodeは、どのメソッドを実装する必要があるかを知らせるはずです。

00:18:10.000 --> 00:18:18.000
意図処理プロトコルには、解決、オプションの提供、確認、処理の4種類の方法を含めることができます。

00:18:18.000 --> 00:18:22.000
パラメータごとに解決方法が生成されます。

00:18:22.000 --> 00:18:28.000
これは、パラメータが有効かどうかを確認し、そうでない場合は何をすべきかをシステムに指示するチャンスです。

00:18:28.000 --> 00:18:36.000
この目的のために、2つの解決方法があり、1つはタイトル用、もう1つは期日用です。

00:18:36.000 --> 00:18:44.000
Titleパラメータの場合、アプリは値がnilではなく、空でないことを確認する必要があります。

00:18:44.000 --> 00:18:52.000
タイトルが空の場合、needsValueを返し、ユーザーに値を入力するように促すようにシステムに指示します。

00:18:52.000 --> 00:18:59.000
期日パラメータについては、期日が検証され、それがゼロではないことを確認するために同様のものが実装されます。

00:18:59.000 --> 00:19:12.000
期日に関するアプリの要件を見ると、解決方法はまた、すべての期日が未来であることを確認し、日付が過去の場合はユーザーにエラーを表示する必要があります。

00:19:12.000 --> 00:19:23.000
これを行うには、インテント定義ファイルに戻り、カスタム検証エラーを追加します。

00:19:23.000 --> 00:19:33.000
コード、invalidDate、および期日は将来でなければならないというエラーメッセージが表示されます。

00:19:33.000 --> 00:19:43.000
これで、アプリは先ほど追加したカスタム検証エラーでサポートされていない結果を返すことができ、日付が無効であるというエラーメッセージが表示されます。

00:19:43.000 --> 00:19:46.000
別のタイプの方法は、オプションを提供することです。

00:19:46.000 --> 00:19:51.000
ダイナミックオプション設定が有効になっているパラメータには、これが表示されます。

00:19:51.000 --> 00:20:02.000
パラメータのいずれかに有限の可能な値のセットしかなく、ユーザーが独自の任意の値を入力できるようにしたくない場合は、そのパラメータの動的オプションを有効にできます。

00:20:02.000 --> 00:20:13.000
これにより、インテントの実行中にこれらの可能な値を指定できるprovide optionsというメソッドが作成され、ショートカットはユーザーに値の1つから選択するように求めます。

00:20:13.000 --> 00:20:26.000
パラメータが個別に解決された後、オプションで確認方法を実装することもできます。これは、すべてがうまく見えることを確認し、意図を処理し、問題が発生した場合にエラーをスローできるはずです。

00:20:26.000 --> 00:20:34.000
たとえば、ネットワーク接続が必要な場合は、実際にネットワークに到達できるかどうかを確認する必要があります。

00:20:34.000 --> 00:20:40.000
最後に、ハンドルメソッドは、意図があなたに指示していることを実際に行う場所です。

00:20:40.000 --> 00:20:45.000
ハンドルメソッドは、アプリにタスクを作成し、成功を返します。

00:20:45.000 --> 00:20:53.000
アクションがタスクを作成した後、後のアクションが共有URLなどの属性を使用できるように、タスクを出力として提供する必要があります。

00:20:53.000 --> 00:20:58.000
インテントエディタに戻って、インテントの応答セクションに移動します。

00:20:58.000 --> 00:21:05.000
ここでは、作成されたタスクのプロパティを追加します。 

00:21:05.000 --> 00:21:07.000
以前に作成したタスクタイプを選択します。

00:21:07.000 --> 00:21:14.000
ショートカットで使用できるように、そのプロパティをインテントの出力として選択します。

00:21:14.000 --> 00:21:22.000
そして今、コードに戻ると、応答にはタスクオブジェクトを割り当てることができるタスクプロパティがあります。

00:21:22.000 --> 00:21:26.000
これが完了すると、あなたの意図はショートカットアプリにアクションとして表示されるはずです。

00:21:26.000 --> 00:21:31.000
だから、それをテストし、人々がそれを使用できるすべての方法を試すのに時間を費やすようにしてください。

00:21:31.000 --> 00:21:39.000
テストを開始するには、ショートカットアプリをもう一度開き、タスクの作成アクションを見ます。

00:21:39.000 --> 00:21:47.000
タスクの名前と日付を入力します。「明日の午後3時」です。

00:21:47.000 --> 00:21:51.000
実行ボタンを押すと、タスクは正常に作成されます。

00:21:51.000 --> 00:21:58.000
しかし、日付を「昨日の午後3時」に変更すると...

00:21:58.000 --> 00:22:02.000
予想通り、エラーメッセージが表示されます。

00:22:02.000 --> 00:22:06.000
だから、ショートカットでアクションを構築するためのものです。

00:22:06.000 --> 00:22:16.000
最後に、今日はMacでショートカットを開発する際に心に留めておくべきいくつかの考慮事項について説明します。

00:22:16.000 --> 00:22:30.000
Mac Catalystで構築されたアプリ、ファイルを扱うアプリ、iOSとMacの両方に展開するアプリ、ショートカットを実行する必要があるアプリやツールなど、4種類のアプリについて説明します。

00:22:30.000 --> 00:22:36.000
まず、Mac Catalystを使用してiOSアプリをMacに持ち込む場合、知っておくべきことがいくつかあります。

00:22:36.000 --> 00:22:43.000
macOS Montereyでは、Mac Catalystで構築されている場合、アプリは同じIntents APIを使用できるようになりました。

00:22:43.000 --> 00:22:49.000
新しいアプリを構築している場合は、すべてがiOSと同じように機能するはずです。

00:22:49.000 --> 00:23:00.000
ただし、アプリがすでにMacで利用可能で、iOSのIntentsフレームワークと統合されている場合は、Macに来る過程でIntentsの統合をまとめた可能性があります。

00:23:00.000 --> 00:23:07.000
したがって、macOS Montereyで実行しているときは、この機能を再度有効にするためにコードを監査してください。

00:23:07.000 --> 00:23:12.000
私が強調したいもう1つのタイプのアプリは、ドキュメントベースのアプリです。

00:23:12.000 --> 00:23:18.000
以前のデモでは、タスク管理アプリは、アプリ内に完全に存在するタスクで動作します。

00:23:18.000 --> 00:23:24.000
しかし、他の多くのアプリは、ディスク上のファイルとして存在するドキュメントで動作します。

00:23:24.000 --> 00:23:34.000
iOS 15とmacOS Montereyでは、インテントのファイルパラメータを使用すると、ユーザーは特定のファイルを選択してアプリのアクションに渡すことができます。

00:23:34.000 --> 00:23:42.000
アプリがデータベースではなく、主にファイルベースのドキュメントを扱う場合は、ファイルで動作する一連のアクションを構築することを検討してください。

00:23:42.000 --> 00:23:51.000
たとえば、スプレッドシートアプリは、ドキュメントを開いたり、特定のファイルの行にデータを追加したりするアクションを作成できます。

00:23:51.000 --> 00:24:00.000
サードパーティのショートカットがファイルでどのように機能するかのもう一つの本当にクールな例は、サウンド分析からこのセッションで示されています。

00:24:00.000 --> 00:24:11.000
iOSとMacの両方に存在するアプリを開発している場合、両方のプラットフォームでアクションを機能させるには、アプリの両方のコピーに同じインテントを展開する必要があります。

00:24:11.000 --> 00:24:17.000
これにより、あるプラットフォームでショートカットを構築し、他のプラットフォームで同じように動作させることができます。

00:24:17.000 --> 00:24:26.000
これを行うには、両方のアプリに同じ正確なインテント定義をコンパイルし、インテントが同じ名前とパラメータを共有していることを確認する必要があります。

00:24:26.000 --> 00:24:32.000
場合によっては、アプリはプラットフォーム間で異なるバンドル識別子を持つ場合があり、これは問題ありません。

00:24:32.000 --> 00:24:43.000
ショートカットはこれを処理しますが、同じ名前のインテントは、同じApple Developerチームを介して展開されたアプリ間でのみ共有されることに注意してください。

00:24:43.000 --> 00:24:58.000
また、アプリのあるバージョンから別のバージョンにユーザーをアップグレードする必要がある場合、iOS 15では、2つのアプリが同じ開発者からのもので、同じインテント名を使用している限り、アプリのショートカットは自動的に一方から他方に転送されます。

00:24:58.000 --> 00:25:05.000
最後に、アプリやコマンドラインツールからショートカットを実行したい場合は、考慮すべき2つの方法があります。

00:25:05.000 --> 00:25:12.000
まず、ショートカットは、MacアプリとAppleScriptsがショートカットを一覧表示して実行できるスクリプトインターフェイスを公開します。

00:25:12.000 --> 00:25:21.000
さらに、シェルスクリプトやコマンドラインツールでショートカットを一覧表示して実行できるショートカットコマンドラインツールもあります。

00:25:21.000 --> 00:25:29.000
ショートカットを実行する機能の恩恵を受けるアプリやスクリプトを開発する場合は、スクリプトインターフェイスを使用する必要があります。

00:25:29.000 --> 00:25:39.000
「ショートカットイベント」プロセスと通信することで、アプリはユーザーが設定したショートカットのリストを取得し、ショートカットの実行を開始できます。

00:25:39.000 --> 00:25:47.000
AppleScriptでは、「ショートカットイベント」プロセスに名前でショートカットを実行するように指示することで、これを達成できます。

00:25:47.000 --> 00:25:55.000
Scripting Bridgeフレームワークを使用すると、ショートカットイベントプロセスに、SwiftまたはObjective-Cアプリから直接ショートカットを実行するように依頼できます。

00:25:55.000 --> 00:26:03.000
サンドボックスアプリの場合、「com.apple.security.scriptingターゲット」という資格を追加する必要があります。

00:26:03.000 --> 00:26:11.000
ショートカットのリストにアクセスして実行するには、「com.apple.shortcuts.run」ターゲットを追加する必要があります。

00:26:11.000 --> 00:26:17.000
最後に、macOS Montereyには、ショートカットを一覧表示し、名前で実行できるコマンドラインツールも含まれています。

00:26:17.000 --> 00:26:22.000
コマンドラインツールやスクリプトがある場合は、このインターフェイスを介してショートカットと統合できます。

00:26:22.000 --> 00:26:32.000
最後に、ショートカットがMacで利用可能になり、どんな種類のアプリを持っていても、ショートカットエコシステムに参加する必要があります。

00:26:32.000 --> 00:26:37.000
アプリにアクションを追加することで、人々がアプリでできることを増やすことができます。

00:26:37.000 --> 00:26:40.000
ショートカットは、人々があなたのアプリで創造的になることを可能にします。

00:26:40.000 --> 00:26:44.000
人々があなたの行動でどのようなショートカットを構築するかを知ることができて喜んでいるかもしれません。

00:26:44.000 --> 23:59:59.000
[パーカッシブミュージック]。

