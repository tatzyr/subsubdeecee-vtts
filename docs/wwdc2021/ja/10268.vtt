WEBVTT

00:00:03.000 --> 00:00:12.000
こんにちは、Xcode Cloudワークフローに関するこのセッションへようこそ。

00:00:12.000 --> 00:00:24.000
私の名前はJustinで、TestFlightチームのエンジニアで、同僚のWesleyとKevinと一緒に、Xcode Cloudでワークフローを作成する際のインとアウトを紹介するためにここにいます。

00:00:24.000 --> 00:00:37.000
ワークフローはXcode Cloudの中心であり、あなたとあなたのチームがアプリやフレームワークの構築、分析、テスト、アーカイブ、配布を自動化できる継続的な統合を推進します。

00:00:37.000 --> 00:00:44.000
それらは柔軟で拡張性があるので、チームの既存の開発および配布プロセスに関するワークフローをカスタマイズできます。

00:00:44.000 --> 00:00:53.000
また、Xcode Cloudを使用すると、ワークフロー管理は、すでに使用しているApple開発者ツールであるXcodeとApp Store Connectに統合されます。

00:00:53.000 --> 00:00:57.000
このセッションでは、ワークフローを特定のコンポーネントに分解しましょう。

00:00:57.000 --> 00:01:03.000
まず、ワークフローを自動的に実行する条件を設定する方法を説明します。

00:01:03.000 --> 00:01:07.000
次に、環境を設定するためのオプションについて説明します。

00:01:07.000 --> 00:01:20.000
また、ビルドに関する通知を送信したり、それらのビルドをTestFlightに自動的にデプロイしたりするなど、後で実行するアクションとともに、自動化したいタスクに対して複数のアクションを作成する方法も紹介します。

00:01:20.000 --> 00:01:28.000
最後に、チームのコラボレーションと生産性を高めるために有用で非常に便利だと思うかもしれないさまざまなワークフローのためのいくつかの戦略があります。

00:01:28.000 --> 00:01:30.000
カバーすることがたくさんあるので、始めましょう。

00:01:30.000 --> 00:01:33.000
ウェズリーに渡しましょう。

00:01:33.000 --> 00:01:35.000
ありがとう、ジャスティン!

00:01:35.000 --> 00:01:38.000
私は開発者チームのメンバーとFrutaというアプリで協力しています。

00:01:38.000 --> 00:01:41.000
すでにXcode Cloudで稼働しています。

00:01:41.000 --> 00:01:48.000
「Meet Xcode Cloud」のセッションをまだ見ていない場合は、最初のワークフローの設定について学ぶために必ずチェックしてください。

00:01:48.000 --> 00:01:56.000
ここでは、Xcodeのレポートナビゲーターに統合されており、新しいクラウドタブがあり、チームからのワークフローとビルドを見ることができます。

00:01:56.000 --> 00:02:01.000
Frutaアプリをオンボーディングすると、メインブランチを構築するデフォルトのワークフローが作成されました。

00:02:01.000 --> 00:02:12.000
このワークフローは私たちにとってうまく機能していますが、プルリクエストも使用するチームであるため、チームが活用できるプルリクエスト固有のワークフローを作成したいと思います。

00:02:12.000 --> 00:02:31.000
チームの誰かがプルリクエストを作成するたびに実行し、アプリを分析、テスト、アーカイブし、プルリクエストのビルドが終了したらチームに通知し、アプリのバージョンをチームのメンバーに配信して、主要な統合ブランチにマージされる前に機能をテストできるようにしたいと思います。

00:02:31.000 --> 00:02:34.000
ワークフローの作成は簡単です。

00:02:34.000 --> 00:02:44.000
[製品] メニューで、[ワークフローの管理] に移動し、[プラス] をクリックし、アプリを選択できます。

00:02:44.000 --> 00:02:53.000
これにより、新しいワークフローエディタが追跡されます。

00:02:53.000 --> 00:02:57.000
ワークフローは、いくつかの設定可能なコンポーネントで構成されています。

00:02:57.000 --> 00:03:01.000
これが私のワークフローに名前を付けることができる一般的なセクションです。

00:03:01.000 --> 00:03:10.000
私はこれを「プルリクエスト」と名付けます。

00:03:10.000 --> 00:03:22.000
少数の個人だけがワークフローの変更を担当するチームにいたら、チームに影響を与える可能性のある意図しない更新を防ぐために編集を制限することを選択できます。

00:03:22.000 --> 00:03:37.000
デフォルトでは、Xcode Cloudはローカル設定の知識でプライマリリポジトリとプロジェクト情報を設定しますが、プライマリリポジトリを移動したり、Xcodeプロジェクトからワークスペースに移行したりする場合は、ここでこれらの設定を変更できます。

00:03:37.000 --> 00:03:41.000
次に、開始条件のセクションを見てみましょう。

00:03:41.000 --> 00:03:50.000
これは、ワークフローをいつ実行したいかを定義できる場所です。

00:03:50.000 --> 00:03:52.000
Xcode Cloudにはいくつかの条件タイプがあります。

00:03:52.000 --> 00:04:00.000
このワークフローでは、メインブランチにマージするすべてのプルリクエストに対して実行するように開始条件を設定したいと思います。

00:04:00.000 --> 00:04:05.000
これを行うには、タイプメニューから選択し、プルリクエストへのすべての変更を選択できます。

00:04:05.000 --> 00:04:12.000
この条件タイプでは、ソースブランチとターゲットブランチを指定できます。

00:04:12.000 --> 00:04:22.000
ソースブランチをAny Branch、ターゲットブランチをMainに設定します。

00:04:22.000 --> 00:04:30.000
チームメンバーがメインに対してプルリクエストを作成して変更を加えるたびに、Xcode Cloudはこのワークフローを自動的に実行します。

00:04:30.000 --> 00:04:42.000
プルリクエストを作成するとき、Xcode Cloudはソースブランチとターゲットブランチのマージを一緒に構築してテストするので、私のチームメンバーは自信を持って、チームの残りの部分との変更の本当の影響を知ることができます。

00:04:42.000 --> 00:04:51.000
また、これらの条件を特定のファイルやフォルダに絞り込み、ワークフローの実行時に以前に実行中のビルドを自動キャンセルするかどうかを設定することもできます。

00:04:51.000 --> 00:04:55.000
これは、あるコミットを別のコミットの上に連続してプッシュする場合に便利です。

00:04:55.000 --> 00:05:06.000
プルリクエストへのすべての変更は、ワークフローに設定できる開始条件の1つに過ぎず、チームのニーズに応じて、それらのニーズを満たすように設定できる他の条件タイプがあります。

00:05:06.000 --> 00:05:12.000
ブランチへのすべての変更は、常にソースブランチを構築し、プルリクエストの状態を無視します。

00:05:12.000 --> 00:05:16.000
タグへのすべての変更は、新しいタグが作成されるたびに構築されます。

00:05:16.000 --> 00:05:20.000
スケジュールでは、選択できる定期的なスケジュールで選択したブランチが構築されます。

00:05:20.000 --> 00:05:24.000
時折実行したい長時間のテストがある場合、これは素晴らしいことです。

00:05:24.000 --> 00:05:33.000
このワークフローがいつ実行されるかを決定する開始条件を設定したので、ワークフローの実行方法を決定する環境セクションを設定しましょう。

00:05:33.000 --> 00:05:45.000
Xcode CloudはAppleのクラウドインフラストラクチャ上で動作し、さまざまなmacOSとXcodeバージョンを利用できます。

00:05:45.000 --> 00:05:49.000
XcodeとmacOSのバージョンを選択するには、メニューから選択するだけです。

00:05:49.000 --> 00:05:56.000
また、最新のリリースまたはベータ版を指すようにワークフローを設定することもできるので、いつでも最新のソフトウェアでビルドまたはテストできます。

00:05:56.000 --> 00:06:03.000
開発者として、私たちは皆、生産性を深く気にかけており、その大部分は使用するツールのパフォーマンスです。

00:06:03.000 --> 00:06:09.000
あなたの多くは、多くのファイルを持つ大規模なプロジェクトに取り組み、潜在的に長いビルド時間に対処します。

00:06:09.000 --> 00:06:16.000
Xcode内のローカルと同様に、変更されたファイルを構築するだけで、変更を段階的に構築するオプションがあります。

00:06:16.000 --> 00:06:18.000
Xcode Cloudにもこのオプションがあります。

00:06:18.000 --> 00:06:21.000
これは通常、より高速なビルドにつながります。

00:06:21.000 --> 00:06:25.000
しかし、代わりにクリーンなビルドを実行したい場合があります。

00:06:25.000 --> 00:06:35.000
これは、最終ビルドですべてが機能していることを確認するために重要であり、TestFlightを使用して外部ベータテスターにデプロイできるビルドを作成したり、App Storeに提出したりすることも必要です。

00:06:35.000 --> 00:06:39.000
環境セクションでは、クリーンを選択するオプションがあります。

00:06:39.000 --> 00:06:46.000
これはプルリクエストのワークフローなので、パフォーマンスのメリットを活用できるように、チェックを外しておきます。

00:06:46.000 --> 00:06:54.000
すべてのチームは独自の方法で作業し、チームは彼らが望むように働くことができる柔軟性を持つために彼らのツールを必要とします。

00:06:54.000 --> 00:06:59.000
Xcode Cloudは、最も一般的な開発タスクを箱から出して実行できるオプションを提供します。

00:06:59.000 --> 00:07:03.000
ただし、拡張性のためのさまざまなオプションも提供します。

00:07:03.000 --> 00:07:10.000
この拡張性により、Xcode Cloudをチームが作業を完了するために使用する他のツールやシステムと接続できます。

00:07:10.000 --> 00:07:18.000
Xcode Cloudは、データにアクセスし、ワークフローを設定し、ビルドを開始するための包括的なAPIを提供します。

00:07:18.000 --> 00:07:28.000
Xcodeが提供する既存のスクリプトオプションに加えて、Xcodeはビルドとテストを実行しているデバイスで実行されるカスタムスクリプトを作成する機能を追加します。

00:07:28.000 --> 00:07:34.000
環境セクションでは、Xcode Cloudがカスタムスクリプトで利用できるようにする環境変数を指定できます。

00:07:34.000 --> 00:07:49.000
これは、ソースコードリポジトリにチェックインしたくない設定や秘密に役立ちます。

00:07:49.000 --> 00:07:54.000
また、環境変数を秘密としてマークして、余分なレベルの保護を提供することもできます。

00:07:54.000 --> 00:08:02.000
これに関する詳細については、「高度なXcodeクラウドワークフローのカスタマイズ」セッションまたはドキュメントを参照してください。

00:08:02.000 --> 00:08:06.000
これまでのところ、ワークフローがいつ実行され、いつ実行されるかを設定する方法を示しました。

00:08:06.000 --> 00:08:09.000
彼らはどんな環境で走るべきですか?

00:08:09.000 --> 00:08:12.000
次に、行動について話しましょう。

00:08:12.000 --> 00:08:17.000
アクションは、ワークフローが実行されるたびに、ワークフローがあなたとあなたのチームのために行う作業を定義します。

00:08:17.000 --> 00:08:29.000
Xcodeにローカルで実行するように依頼できる重要なアクションは、ビルド、静的分析の実行、テスト、アーカイブなど、Xcode Cloud内ですべて利用可能になりました。

00:08:29.000 --> 00:08:35.000
設定したいアクションは、アーカイブ、テスト、分析のアクションです。

00:08:35.000 --> 00:08:47.000
アクションでプラスアイコンをクリックし、アーカイブを選択して、アーカイブアクションを追加することから始めましょう。

00:08:47.000 --> 00:08:51.000
アーカイブを作成するプラットフォームとスキームを選択する必要があります。

00:08:51.000 --> 00:08:57.000
それはすでにiOSプラットフォームとiOSスキームを事前に選択しており、これはまさに私が望んでいたものです。

00:08:57.000 --> 00:09:03.000
また、TestFlightに登録するか、App Storeの配布の準備をするオプションもありますが、これについては後で詳しく説明します。

00:09:03.000 --> 00:09:07.000
プロビジョニングプロファイルやコード署名IDを管理する必要がなかったことに気付くかもしれません。

00:09:07.000 --> 00:09:10.000
Xcode Cloudはこれを自動的に処理します。

00:09:10.000 --> 00:09:15.000
これの詳細については、「クラウド署名でXcodeでアプリを配布する」セッションをチェックしてください。

00:09:15.000 --> 00:09:20.000
アーカイブアクションが設定されたので、テストアクションに注目しましょう。

00:09:20.000 --> 00:09:24.000
アプリのテストは、開発プロセスの非常に重要な部分です。

00:09:24.000 --> 00:09:33.000
ユーザーがより少ないバグを経験することを保証するのに役立つだけでなく、あなたが行っている変更に自信を与えることで、開発プロセスをスピードアップすることができます。

00:09:33.000 --> 00:09:38.000
しかし、ローカルでテストを実行するのが面倒で遅い場合もあれば、忘れてしまうこともあります。

00:09:38.000 --> 00:09:46.000
Xcode Cloudでのテストでワークフローを設定することで、テストは安定した信頼性が高く、再現可能な環境で実行されます。

00:09:46.000 --> 00:09:55.000
あなたが他の仕事をしている間、彼らはバックグラウンドで実行され、ローカル環境を解放し、自動的に実行され、手動で実行することを覚えておく必要がないように解放されます。

00:09:55.000 --> 00:10:06.000
テストアクションを追加するには、プラスボタンをクリックしてテストを選択するだけです。

00:10:06.000 --> 00:10:10.000
テストアクションでは、合格する必要があるかどうかを選択できます。

00:10:10.000 --> 00:10:16.000
アクションを必要に応じてマークすることは、このテストアクションが失敗した場合、全体的なビルドが失敗することを意味します。

00:10:16.000 --> 00:10:22.000
テストスイートを構築している場合は、全体的なビルド状態に影響を与えないように、これを「合格不要」に設定することを選択できます。

00:10:22.000 --> 00:10:26.000
実行するテストの選択に関しては、いくつかの選択肢があります。

00:10:26.000 --> 00:10:38.000
「スキーム設定を使用」を選択して、Fruta iOSスキームの設定を参照するか、特定のテストセットに磨きをかけたい場合は、特定のテストプランを選択できます。

00:10:38.000 --> 00:10:44.000
そのセットができたら、あとはテストを実行したいシミュレーターを選択するだけです。

00:10:44.000 --> 00:10:49.000
Xcode Cloudは、さまざまな画面サイズのシミュレータのコレクションである推奨オプションを提供します。

00:10:49.000 --> 00:11:06.000
推奨されるオプションは、常に環境セクションで選択されたXcodeに対してテストされますが、特定のシミュレータを選択すると、古いOSバージョンのリストから選択することもできます。

00:11:06.000 --> 00:11:10.000
私が実行したい最後のアクションは、分析アクションです。

00:11:10.000 --> 00:11:15.000
コンパイラは、多くのクラスのバグを自動的に見つけ、それらについて警告することができます。

00:11:15.000 --> 00:11:24.000
これらに気配って修正することで、実行時にこれらの問題を追跡することと比較して、開発時間を大幅に節約でき、ユーザーに私たちのアプリでより安定したバグのない体験を提供します。

00:11:24.000 --> 00:11:36.000
しかし、静的分析の実行は、典型的なローカル反復開発ワークフローの一部ではないため、私たちの多くはそれを実行するのを忘れ、時間の経過とともにチーム全体で問題が増加するのを見るだけです。

00:11:36.000 --> 00:11:42.000
Xcode Cloudを使用すると、コードを変更するたびに静的分析が実行されることを確認できます。

00:11:42.000 --> 00:11:52.000
分析アクションを追加するには、プラスボタンをクリックし、分析を選択します。

00:11:52.000 --> 00:11:58.000
テストと同様に、静的分析の問題を合格が必要かどうかとしてマークするオプションがあります。

00:11:58.000 --> 00:12:07.000
今のところ、静的分析の結果を監視したいだけなので、合格に必要としてマークしません。

00:12:07.000 --> 00:12:10.000
最後のアクションはビルドアクションです。

00:12:10.000 --> 00:12:14.000
場合によっては、簡単なXcodeビルドアクションを実行する必要があるかもしれません。

00:12:14.000 --> 00:12:25.000
これは、特定のセカンダリビルド構成またはスキームがまだコンパイルされていることを確認したり、アプリの一部であるフレームワークを独自に構築できるようにしたりするのに役立つかもしれません。

00:12:25.000 --> 00:12:34.000
プルリクエストワークフローのアーカイブ、テスト、分析アクションを設定したので、このワークフローにポストアクションを追加するためにケビンに渡します。

00:12:34.000 --> 00:12:35.000
ありがとう、ウェズリー。

00:12:35.000 --> 00:12:40.000
Xcode Cloudワークフローを使用すると、ポストアクションを設定できます。

00:12:40.000 --> 00:12:45.000
ポストアクションは、すべてのビルド、分析、テスト、およびアーカイブアクションが完了した後に実行されます。

00:12:45.000 --> 00:12:52.000
Xcode Cloudで設定できるポストアクションは、通知を送信し、TestFlightで展開しています。

00:12:52.000 --> 00:12:55.000
まずは通知について話しましょう。

00:12:55.000 --> 00:12:58.000
送信できる通知イベントには2種類あります。

00:12:58.000 --> 00:13:00.000
1つ目は、ビルドが成功するときです。

00:13:00.000 --> 00:13:13.000
すべてのビルド成功の通知を送信するオプションがあります。ブランチまたはプルリクエストビルドが失敗から通過に移行するときの修正のみ。または通知しないでください。

00:13:13.000 --> 00:13:16.000
もう1つの通知イベントは、ビルドが失敗したときのものです。

00:13:16.000 --> 00:13:27.000
すべてのビルドの失敗に対して通知を送信できます。ブランチまたはプルリクエストビルドがパスから失敗に移行するときは、ブレークのみです。または通知しないでください。

00:13:27.000 --> 00:13:32.000
このワークフローでは、プルリクエストのビルドが終了したらチームに通知したい。

00:13:32.000 --> 00:13:36.000
アクションセクションの下には、ポストアクションがあります。

00:13:36.000 --> 00:13:44.000
通知アクションを追加するには、[プラス]ボタンをクリックして[通知]を選択します。

00:13:44.000 --> 00:13:47.000
私はビルドの成功とビルドの失敗のためにすべてを残します。

00:13:47.000 --> 00:13:52.000
通知イベントの下には、通知を送信する場所に関するいくつかのオプションがあります。

00:13:52.000 --> 00:13:57.000
Xcode Cloudは、人気のあるコラボレーションツールSlackと統合されています。

00:13:57.000 --> 00:14:05.000
Slackアカウントが承認されたら、プラスボタンをクリックしてチャンネルのリストを表示できます。

00:14:05.000 --> 00:14:10.000
「ci-builds」チャンネルを選択し、[OK]をクリックします。

00:14:10.000 --> 00:14:14.000
メールアドレスを追加するオプションもあります。

00:14:14.000 --> 00:14:21.000
デフォルトでは、すべてのユーザーが開始したビルドの通知を自動的に受け取るので、このリストに追加する必要はありません。

00:14:21.000 --> 00:14:29.000
ただし、グループメールがある場合、または開始していないビルドを受け取りたいユーザーがいる場合は、ここにメールを追加できます。

00:14:29.000 --> 00:14:37.000
最後に、Xcode Cloud Workflowsの私のお気に入りの機能の1つである、TestFlightで自動的にデプロイする機能を共有したいと思います。

00:14:37.000 --> 00:14:42.000
そして今、MacのTestFlightを使用すると、Appleが提供するすべてのプラットフォームに展開できます。

00:14:42.000 --> 00:14:45.000
Xcode Cloudには2つのTestFlight展開オプションがあります。

00:14:45.000 --> 00:14:51.000
内部テスターへの展開が強化され、開発チームのメンバーにビルドをすばやく送信できます。

00:14:51.000 --> 00:14:58.000
彼らはあなたのチームのメンバーであるため、クリーンを選択せずにプルリクエストとビルドから生成されたビルドを受け取ることができます。

00:14:58.000 --> 00:15:04.000
今日TestFlightを使用している場合、外部テストとApp Storeは、あなたがすでに知っていることと同等です。

00:15:04.000 --> 00:15:12.000
候補者とリリースブランチに推奨され、ベータアプリのレビューを条件として、外部テスターとApp Storeに配布することができます。

00:15:12.000 --> 00:15:19.000
TestFlightは、チームメイトや組織外のベータテスターのデバイスにアプリのビルドを取得するのに最適な方法です。

00:15:19.000 --> 00:15:24.000
ワークフローを設定して、ビルドを任意のTestFlightグループに自動的にデプロイできます。

00:15:24.000 --> 00:15:30.000
TestFlightグループを、App Store ConnectのTestFlightタブで、今日と同じように管理します。

00:15:30.000 --> 00:15:36.000
ここでは、複数の内部グループと外部グループがあり、それぞれが私のワークフローで利用できます。

00:15:36.000 --> 00:15:42.000
内部TestFlightグループで自動的にデプロイするには、3つのことを行う必要があります。

00:15:42.000 --> 00:15:45.000
まず、アーカイブアクションを追加する必要があります。

00:15:45.000 --> 00:15:51.000
次に、アーカイブの展開オプションを内部テストに設定する必要があります。

00:15:51.000 --> 00:15:55.000
最後に、TestFlight内部テストのポストアクションを追加する必要があります。

00:15:55.000 --> 00:15:58.000
まさにそれを行うようにワークフローを設定しましょう。

00:15:58.000 --> 00:16:01.000
このワークフローをQAチームに自動的に展開したい。

00:16:01.000 --> 00:16:13.000
これを行うには、まず、iOSのアーカイブアクションをクリックし、TestFlight内部テストのみを選択します。

00:16:13.000 --> 00:16:16.000
これを行うことは、私のビルドがTestFlightで利用可能になることを意味します。

00:16:16.000 --> 00:16:25.000
ビルドを自動的に誰にも送信したくないが、App Store ConnectのTestFlightセクションから後でそれを行うオプションを保持している場合、これは素晴らしいことです。

00:16:25.000 --> 00:16:31.000
このアプリでは、ビルドが生成されるたびに自動的に同僚にデプロイしたい。

00:16:31.000 --> 00:16:35.000
これを行うには、TestFlightのポストアクションを追加する必要があります。

00:16:35.000 --> 00:16:45.000
ポストアクションの横にあるプラスボタンをクリックして、TestFlight内部テストを追加します。

00:16:45.000 --> 00:16:49.000
アーカイブiOSアーティファクトは事前に選択されており、それが私の望みです。

00:16:49.000 --> 00:16:54.000
プラスボタンを押して内部グループを追加します。

00:16:54.000 --> 00:17:01.000
最後に、QAチームを選択します。

00:17:01.000 --> 00:17:07.000
今、私のQAチームのメンバーは、メインブランチにマージされる前に、すべての機能を検証してテストすることができます。

00:17:07.000 --> 00:17:17.000
TestFlight外部テストを使用して組織外のテスターにビルドを送信することは、App Storeに提出する前にアプリとその機能に関するフィードバックを得るのに最適な方法です。

00:17:17.000 --> 00:17:25.000
このようにして、より幅広いユーザーから変更に自信を持ち、App Storeにリリースされる前に変更を加え、問題を修正できる可能性があります。

00:17:25.000 --> 00:17:30.000
TestFlight外部テストで展開するには、さらにいくつかの条件を設定する必要があります。

00:17:30.000 --> 00:17:33.000
開始条件で1つのブランチを選択します。

00:17:33.000 --> 00:17:38.000
これにより、外部ベータテスターに送信するビルドの一貫性が保証されます。

00:17:38.000 --> 00:17:41.000
次に、「環境」セクションで「クリーン」を選択します。

00:17:41.000 --> 00:17:47.000
これにより、派生データを使用せずに、コードがゼロから構築されることを保証します。

00:17:47.000 --> 00:17:52.000
最後に、アーカイブアクションの展開設定をTestFlightとApp Storeに設定します。

00:17:52.000 --> 00:18:00.000
結局のところ、TestFlight外部テストの実行後の設定は、TestFlight内部テストの設定に似ています。

00:18:00.000 --> 00:18:04.000
TestFlightで作成された外部グループを追加するだけです。

00:18:04.000 --> 00:18:10.000
TestFlight外部テストには、個々のテスターに展開する機能が追加されています。

00:18:10.000 --> 00:18:17.000
Xcodeでプルリクエストワークフローを作成しましたが、App Store Connectでワークフローを作成、編集、管理することもできます。

00:18:17.000 --> 00:18:22.000
Xcodeから離れていて、ワークフローを変更する必要がある場合は、素晴らしい選択肢です。

00:18:22.000 --> 00:18:28.000
ジャスティンに戻って、チームのために作成できるワークフローの種類についていくつかの推奨事項を作成します。

00:18:28.000 --> 00:18:30.000
ジャスティン？

00:18:30.000 --> 00:18:31.000
ありがとう、ケビン。

00:18:31.000 --> 00:18:36.000
Fruta QAチームは、プルリクエストワークフローでビルドにすばやくアクセスすることを気に入っていると思います。

00:18:36.000 --> 00:18:41.000
ご覧のとおり、ワークフローには、チームの働き方をモデル化するための多くの力と柔軟性があります。

00:18:41.000 --> 00:18:45.000
作業を完了するために必要なだけ多くのワークフローを作成できます。

00:18:45.000 --> 00:18:47.000
私は私たちのチームがいくつかを作成することを知っています。

00:18:47.000 --> 00:18:55.000
ケビンはプルリクエストのワークフローを紹介しましたが、あなたとあなたのチームが試すことができるより多くのワークフローのためのいくつかのアイデアがあります。

00:18:55.000 --> 00:19:03.000
開発チーム以外のユーザーにアプリを表示するには、外部のTestFlightグループに配布するか、App Storeにアプリを提出することができます。

00:19:03.000 --> 00:19:09.000
ここでのアイデアは、私のアプリのユーザーが素晴らしい体験をできるように、高品質を強制したいということです。

00:19:09.000 --> 00:19:13.000
リリース用に指定されたブランチでワークフローを実行する必要があります。

00:19:13.000 --> 00:19:22.000
包括的なテストを実行し、ビルドをアーカイブし、最後に外部のTestFlightグループに展開し、ユーザーの手に展開する必要があります。

00:19:22.000 --> 00:19:26.000
よりよく説明するために、私のリリースワークフローをお見せしましょう。

00:19:26.000 --> 00:19:36.000
ワークフローが将来のすべてのリリースも確実に構築されるように、リリースブランチのブランチに開始条件を「すべての変更」に設定しました。

00:19:36.000 --> 00:19:44.000
徹底的に、このワークフローのすべてのビルドをゼロから生成したいので、「環境」セクションで「クリーン」をチェックしました。

00:19:44.000 --> 00:19:54.000
そうすることで、すべてが再びコンパイルされるため、通常ビルド時間が長くなりますが、キャッシュによって引き起こされる問題がないという自信が得られます。

00:19:54.000 --> 00:20:00.000
このワークフローには、XcodeとmacOSの特定のバージョンも選択したことに注意してください。

00:20:00.000 --> 00:20:06.000
ツールをピン留めすることは、リリースの収束と最終化の重要な部分です。

00:20:06.000 --> 00:20:17.000
私たちのアプリがユーザーのiPhoneとiPadの範囲で動作することを確認するために、私はテストセクションでさまざまなシミュレータでテストを実行します。

00:20:17.000 --> 00:20:26.000
TestFlight経由でアプリのビルドを配布するために、アーカイブアクションを含め、展開準備をTestFlightとApp Storeに設定しました。

00:20:26.000 --> 00:20:34.000
ベータテスターが常に最新のビルドを確実に得るために、外部のTestFlightグループに展開するためのポストアクションを設定しました。

00:20:34.000 --> 00:20:41.000
新しいコードがリリースブランチにマージされると、自動的にビルドされ、テストされ、ベータテスターにデプロイされます。

00:20:41.000 --> 00:20:49.000
これで、品質が依然として高いという自信を維持しながら、変更に関するフィードバックを迅速に得ることができます。

00:20:49.000 --> 00:20:54.000
これは、毎晩より深いテストを実行する、あなたが作成したいかもしれない別のワークフローです。

00:20:54.000 --> 00:21:02.000
私のオーバーナイトテストワークフローは定期的に実行され、必要なだけ多くのプラットフォームをカバーするために複数のシミュレータに対してテストします。

00:21:02.000 --> 00:21:12.000
テストの失敗はQAチームに報告され、完全にテストに焦点を当てているため、ビルドをどこにも展開する必要はありません。

00:21:12.000 --> 00:21:21.000
毎週の頻度で開始条件タイプとして「ブランチのスケジュール」を選択して、毎週平日の夜にこのワークフローを実行するように開始条件を設定しました。

00:21:21.000 --> 00:21:25.000
その後、私は月曜日から金曜日の午前1時に私の日を選択しました。

00:21:25.000 --> 00:21:34.000
環境セクションでは、新しいツールがリリースされたときにアプリが正常にビルドされるように、最新のXcodeバージョンを選択しました。

00:21:34.000 --> 00:21:42.000
アプリを徹底的にテストしたいので、合格するために必要ないくつかのテストプランとシミュレータを選択しました。

00:21:42.000 --> 00:21:50.000
静的分析も実行したいので、分析アクションを追加し、合格する必要があります。

00:21:50.000 --> 00:21:55.000
以前のテストのいずれかが失敗した場合、QAチームは通知ポストアクションで見つけます。

00:21:55.000 --> 00:22:00.000
Build SuccessをDon't Not Notifyに設定し、Build Failure to Allに設定しました。

00:22:00.000 --> 00:22:05.000
私のQAチームは独自のSlackチャンネルを持っていますが、メールアドレスを指定することもできます。

00:22:05.000 --> 00:22:10.000
いずれにせよ、QAチームは翌朝までにビルドの失敗について知るでしょう。

00:22:10.000 --> 00:22:20.000
このようなワークフローを実行することは、あなたとあなたのチームが日中開発を続け、夜にアプリを徹底的にテストするためにXcode Cloudを離れることができるので、時間を節約するための素晴らしい方法です。

00:22:20.000 --> 00:22:28.000
そして最後に、Xcodeの製品メニューの下にはワークフローの管理があり、チームが使用するすべてのワークフローを見ることができます。

00:22:28.000 --> 00:22:34.000
先ほど作成したオーバーナイトテストのワークフローと、ウェズリーとケビンが以前に作成したワークフローが見えます。

00:22:34.000 --> 00:22:42.000
プロジェクトが成長するにつれて、チームのニーズに合わせてワークフローを追加、編集、または削除することができます。

00:22:42.000 --> 00:22:44.000
そして、それは私たちのチームのワークフローのためにそれです。

00:22:44.000 --> 00:22:54.000
プルリクエストのワークフローを作成する方法、さまざまなプラットフォーム用のアクションを設定する方法、TestFlightユーザーにリリースを配布する方法、夜間テストを設定する方法を示しました。

00:22:54.000 --> 00:22:57.000
しかし、ワークフローでできることはもっとたくさんあります。

00:22:57.000 --> 00:23:02.000
さらに、App Store Connectからこれらのワークフローを作成および管理することもできます。

00:23:02.000 --> 00:23:08.000
ワークフローの詳細については、「高度なXcodeクラウドワークフローのカスタマイズ」をご覧ください。

00:23:08.000 --> 00:23:13.000
まだチャンスがない場合は、「Meet Xcode Cloud」を見て、プロジェクトをオンボーディングする方法を学んでください。

00:23:13.000 --> 00:23:21.000
クラウド署名とXcodeのプルリクエストの新しいサポートを深く掘り下げる他の素晴らしいセッションもあります。

00:23:21.000 --> 00:23:31.000
Xcode Cloudは、あなたのチームに、作業方法に適応し、チームが一貫して開発慣行に従うのに役立つ、柔軟で拡張可能なワークフローを作成する能力を提供します。

00:23:31.000 --> 00:23:38.000
このセッションが、あなたとあなたのチームが開発を反復し、高品質のアプリを提供する際に活用するためのワークフローを作成するのに役立つことを願っています。

00:23:38.000 --> 00:23:42.000
見てくれてありがとう、そしてWWDCの残りの部分を楽しんでください。

00:23:42.000 --> 23:59:59.000
[音楽]。

