WEBVTT

00:00:02.000 --> 00:00:13.000
こんにちは、WWDC 2021へようこそ。

00:00:13.000 --> 00:00:17.000
私はスージーで、XcodeでXCTestに取り組んでいます。

00:00:17.000 --> 00:00:27.000
このセッションでは、テストを繰り返すツールであるテストの繰り返しで信頼性の低いコードを診断する方法について学びます。

00:00:27.000 --> 00:00:35.000
アプリを行使するテストを実行する過程で、信頼性の低いコードを実行すると、テストが失敗することがあります。

00:00:35.000 --> 00:00:45.000
競争条件、環境の仮定、グローバル状態、または外部サービスとの通信に対処する際に、この種の矛盾に遭遇する可能性があります。

00:00:45.000 --> 00:00:51.000
これらは再現が難しいため、追跡するのが難しいバグです。

00:00:51.000 --> 00:00:56.000
これらのタイプの障害を診断する1つの方法は、テストを繰り返し実行することです。

00:00:56.000 --> 00:01:06.000
Xcode 13で追加されたテストの繰り返しでは、停止条件で指定された数の反復までテストを繰り返すことができます。

00:01:06.000 --> 00:01:10.000
Xcodeは3つのテスト繰り返しモードをサポートしています。

00:01:10.000 --> 00:01:13.000
最初のモードは固定反復です。

00:01:13.000 --> 00:01:19.000
固定反復は、ステータスに関係なく、テストを一定回数繰り返します。

00:01:19.000 --> 00:01:28.000
固定反復は、テストスイートの信頼性を理解し、新しいテストが時間の経過とともに導入されるにつれて信頼性を維持するのに役立ちます。

00:01:28.000 --> 00:01:30.000
2つ目は失敗までです。

00:01:30.000 --> 00:01:34.000
失敗するまで、失敗するまでテストを繰り返し続けます。

00:01:34.000 --> 00:01:41.000
私はこのツールを使用して、デバッガでそれをキャッチするために非決定的なテストの失敗を再現するのが大好きです。

00:01:41.000 --> 00:01:44.000
最後に、失敗時に再試行します。

00:01:44.000 --> 00:01:50.000
失敗時に再試行すると、指定された最大値まで成功するまでテストが再試行されます。

00:01:50.000 --> 00:01:57.000
これは、最初は失敗するが、最終的には再試行で成功する信頼性の低いテストを特定するのに役立ちます。

00:01:57.000 --> 00:02:07.000
CIのテストでこの動作を示している場合は、テストプランで失敗時に再試行を一時的に有効にし、問題を解決するために追加のデータを収集することができます。

00:02:07.000 --> 00:02:13.000
再試行の失敗は、実際の製品の問題を隠すことができることを覚えておくことが重要です。

00:02:13.000 --> 00:02:22.000
一部の機能は、最終的に成功する前に最初に失敗するので、障害を診断するために一時的にこのモードを使用するのが最善です。

00:02:22.000 --> 00:02:26.000
これが実際にどのように機能するかをよりよく理解しましょう。

00:02:26.000 --> 00:02:32.000
アイスクリームトラックが私の家のそばを運転するまでの時間を教えてくれるIceCreamTruckCountdownというアプリを作成しました。

00:02:32.000 --> 00:02:40.000
私はトラックにクッキーとクリームがあるのが大好きなので、トラックにすべての味があることを確認するためにtestFlavorsというテストを書きました。

00:02:40.000 --> 00:02:46.000
testFlavorsは、私がトラックデポから得るトラックを持っています。

00:02:46.000 --> 00:02:53.000
私はprepareFlavorsと呼び、最後に、トラックには33種類のフレーバーがすべて揃っていると主張します。

00:02:53.000 --> 00:03:00.000
最近、testFlavorsがXcode Cloudのメインブランチで失敗することがあることに気づきました。

00:03:00.000 --> 00:03:09.000
より多くの情報を収集するために、テスト計画を一時的に設定し、テスト繰り返しモードを有効にして失敗時に再試行しました。

00:03:09.000 --> 00:03:17.000
レポートナビゲーターを見て、クラウドレポートを確認しましょう。

00:03:17.000 --> 00:03:28.000
私のテストは一貫して失敗していないので、この最後のテストで詳細を確認しましょう。

00:03:28.000 --> 00:03:38.000
最初のデバイスを開くと、ここに反復ラベルがあり、このテストの最初の反復であることを知らせます。

00:03:38.000 --> 00:03:46.000
はぁ。そして、他のすべての行を展開すると、アサーションの失敗はすべて同じで、この最後のテストに合格しました。

00:03:46.000 --> 00:03:52.000
1つのデバイスだけでなく、すべてのテストが一貫して合格することを期待していました。

00:03:52.000 --> 00:03:55.000
この失敗をローカルで再現してみます。

00:03:55.000 --> 00:03:59.000
testFlavorsがあるファイルに行きましょう。

00:03:59.000 --> 00:04:03.000
テスト用のテストダイヤモンドをControlキーを押しながらクリックします。

00:04:03.000 --> 00:04:11.000
メニューで、「testFlavors（）」を繰り返し実行」を選択して、テストの繰り返しダイアログを表示します。

00:04:11.000 --> 00:04:19.000
ここでは、繰り返しの停止条件、最大繰り返しの設定、および失敗の一時停止などの他のオプションを選択できます。

00:04:19.000 --> 00:04:30.000
クラウドレポートで発生した問題を再現したいので、停止条件を設定して、最大繰り返しを100に保つようにしています。

00:04:30.000 --> 00:04:36.000
今からテストを実行します。

00:04:36.000 --> 00:04:39.000
ああ、イェーイ！テストはローカルで失敗しました。

00:04:39.000 --> 00:04:47.000
失敗注釈をクリックすると、Xcode Cloudで発生したのと同じエラーが表示され、100回中4回失敗しました。

00:04:47.000 --> 00:04:51.000
すごい！これでこの問題をデバッグできます。

00:04:51.000 --> 00:05:03.000
testFlavorsのテストダイヤモンドをControlキーを押しながらもう一度クリックし、「testFlavors（）」を繰り返し実行を選択します...しかし、今回は、問題が発生したときにデバッグできるように、失敗時に停止を使用します。

00:05:03.000 --> 00:05:12.000
ありがたいことに、Xcodeは自動的に失敗の一時停止を選択するので、デバッガでエラーをキャッチできます。

00:05:12.000 --> 00:05:16.000
さて、私たちはその問題を捕まえました。

00:05:16.000 --> 00:05:30.000
そして、私たちはトラックの味との矛盾を見ていることを知っているので、デバッガで私たちのトラックオブジェクトを見てみます。

00:05:30.000 --> 00:05:37.000
私たちはすでにprepareFlavorsと呼んだので、33であるべきときにフレーバーが0であることは奇妙に思えます。

00:05:37.000 --> 00:05:41.000
この完成ハンドラーの中にたどり着いたのだろうか。

00:05:41.000 --> 00:05:48.000
ブレークポイントを追加して[続行]をクリックします。

00:05:48.000 --> 00:05:54.000
うーん、それは間違っているようです。

00:05:54.000 --> 00:06:05.000
ああ、フルフィルメントは、内側の準備フレーバー完了ハンドラーではなく、外側の完了ハンドラーで呼ばれます。

00:06:05.000 --> 00:06:15.000
これは、複数の完了ハンドラーを持つ非同期イベントと、正しい場所で期待が満たされていないことによって引き起こされるかなり単純なバグです。

00:06:15.000 --> 00:06:22.000
Swift 5.5のasync/awaitに対するXCTestのサポートにより、このテストを簡素化して、二度と起こらないようにします。

00:06:22.000 --> 00:06:40.000
このテストをasync/awaitを使用するように変換するには、メソッドヘッダーに「async throws」を追加します。

00:06:40.000 --> 00:06:58.000
truckDepotからiceCreamTruckを入手する「await」バージョンを使用します。

00:06:58.000 --> 00:07:07.000
prepareFlavorsの「await」バージョンを使用します。

00:07:07.000 --> 00:07:14.000
私は同じ主張を維持しますが、トラックはもはやオプションではありません。

00:07:14.000 --> 00:07:18.000
このテストをもう一度実行して、修正されていることを確認しましょう。

00:07:18.000 --> 00:07:36.000
Controlキーを押しながらクリックして「testFlavors（）」を繰り返し実行し、もう一度停止条件として最大繰り返しを選択します。

00:07:36.000 --> 00:07:39.000
イェーイ！テストは100回合格した。

00:07:39.000 --> 00:07:46.000
私は今、これが修正されたと確信しており、テスト計画から失敗した再試行を削除し、変更をコミットする準備ができています。

00:07:46.000 --> 00:07:55.000
そのため、デスクでこれを使用する方法と、テスト計画で設定することで、CIでテストを繰り返し実行する方法をよりよく理解しました。

00:07:55.000 --> 00:08:01.000
CLIを使用して、デモのように繰り返しテストを実行する別の方法について話しましょう。

00:08:01.000 --> 00:08:08.000
Xcodebuildを直接実行する場合、テストプランの設定を上書きするxcodebuildフラグを追加できます。

00:08:08.000 --> 00:08:22.000
番号で-test-iterationsに合格して、テストを一定回数実行するか、-retry-tests-on-failureまたは-run-tests-until-failureと組み合わせて、他の停止条件の1つで使用します。

00:08:22.000 --> 00:08:35.000
Xcodebuildでデモと同じようにテストを実行するには、テストを実行するために使用されるbase xcodebuildコマンドから始めて、フラグ-test-iterationsを100に設定し、-run-tests-until-failureを追加します。

00:08:35.000 --> 00:08:42.000
要約すると、信頼性の低いコードを診断するのに役立つツールとしてテストの繰り返しを使用してください。

00:08:42.000 --> 00:08:48.000
一貫性のないテストの処理の詳細については、「XCTestで予想される障害を受け入れる」をご覧ください。

00:08:48.000 --> 00:08:53.000
Swift asyncの詳細については、「Meet async/await in Swift」をチェックしてください。

00:08:53.000 --> 00:08:54.000
見てくれてありがとう。

00:08:54.000 --> 23:59:59.000
[パーカッシブミュージック]。

