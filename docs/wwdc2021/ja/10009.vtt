WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
ブレイディ・ホワイト:こんにちは、私はブレイディです。

00:00:10.000 --> 00:00:12.000
私はフィットネスチームのエンジニアです。

00:00:12.000 --> 00:00:14.000
参加してくれてありがとう。

00:00:14.000 --> 00:00:18.000
App Storeにはすでに素晴らしいワークアウトアプリがたくさんあります。

00:00:18.000 --> 00:00:23.000
Apple Watchは、あらゆる種類のフィットネス活動を追跡できる素晴らしいデバイスです。

00:00:23.000 --> 00:00:26.000
挑戦的な自転車に乗って、距離と標高を追跡できます。

00:00:26.000 --> 00:00:30.000
激しいトレーニング中に消費された心拍数とエネルギーを監視できます。

00:00:30.000 --> 00:00:34.000
水泳では、ストロークの種類を検出し、ラップを数えることさえできます。

00:00:34.000 --> 00:00:39.000
これらすべてが、素晴らしいワークアウトアプリを構築するために利用できます。

00:00:39.000 --> 00:00:43.000
今日取り上げるものを見てみましょう。私たちは何をカバーするかを見てみましょう。

00:00:43.000 --> 00:00:45.000
このセッションはコードアロングです。

00:00:45.000 --> 00:00:49.000
それが何を意味するのか、どのように参加できるかについて説明します。

00:00:49.000 --> 00:00:53.000
SwiftUIでワークアウトビューを構築します。

00:00:53.000 --> 00:00:57.000
次に、HealthKitを私たちの見解に統合します。

00:00:57.000 --> 00:01:00.000
また、Always On状態をサポートする方法も紹介します。

00:01:00.000 --> 00:01:04.000
ワクワクしています、始めましょう。

00:01:04.000 --> 00:01:06.000
このセッションはコードアロングです。

00:01:06.000 --> 00:01:09.000
ワークアウトアプリをゼロから一緒に構築します。

00:01:09.000 --> 00:01:14.000
Xcodeの準備をしながら、いくつかの概念を取り上げましょう。

00:01:14.000 --> 00:01:16.000
ワークアウトアプリとは何ですか?

00:01:16.000 --> 00:01:19.000
ワークアウトアプリは、ワークアウト中のフィットネス活動を追跡します。

00:01:19.000 --> 00:01:22.000
ワークアウトはワンタップで開始できます。

00:01:22.000 --> 00:01:31.000
ワークアウトのセッション中は、経過時間、エネルギー燃焼、心拍数、距離などのライブメトリクスが表示されます。

00:01:31.000 --> 00:01:36.000
ワークアウトが終了すると、要約にはワークアウトに記録されたメトリクスが表示されます。

00:01:36.000 --> 00:01:39.000
これが私たちが今日構築するものです。

00:01:39.000 --> 00:01:42.000
ワークアウトビューの構築を始めましょう。

00:01:42.000 --> 00:01:46.000
Xcodeを開いて、新しいプロジェクトを始めましょう。

00:01:46.000 --> 00:01:54.000
[新しいXcodeプロジェクトの作成]、[watchOS]、[Watch App]をクリックし、[次へ]をクリックします。

00:01:54.000 --> 00:01:58.000
ワークアウトアプリに「MyWorkouts」などの名前を付けてください。

00:01:58.000 --> 00:02:04.000
インターフェイスがSwiftUIで、言語がSwiftであることを確認し、[次へ]をクリックします。

00:02:04.000 --> 00:02:13.000
プロジェクトの場所を見つけて、[作成]をクリックします。

00:02:13.000 --> 00:02:19.000
インスペクターを隠して、キャンバスのサイズを変更しましょう。

00:02:19.000 --> 00:02:24.000
「再開」をクリックして、Xcodeプレビューを使用して、アプリがどのように見えるかを見てみましょう。

00:02:24.000 --> 00:02:27.000
素晴らしい、私たちのSwiftUIアプリは準備ができています。

00:02:27.000 --> 00:02:31.000
誰かがStartViewでワークアウトを始める方法を提供しましょう。

00:02:31.000 --> 00:02:34.000
ワークアウトはワンタップで開始できます。

00:02:34.000 --> 00:02:42.000
カルーセルスタイルのレイアウトを持つリストビューは、大きな深度効果で垂直にスクロールするワークアウトのリストを提供します。

00:02:42.000 --> 00:02:45.000
私たちのワークアウトのリストには、自転車、ランニング、ウォーキングが含まれます。

00:02:45.000 --> 00:02:48.000
StartViewを作成しましょう。

00:02:48.000 --> 00:02:51.000
「ContentView」の名前を「StartView」に変更しましょう。

00:02:51.000 --> 00:03:01.000
コマンドキーを押しながらContentViewをクリックし、[名前の変更]をクリックし、新しい名前として「StartView」と入力します。

00:03:01.000 --> 00:03:08.000
MyWorkoutsApp.swift StartViewでは、NavigationViewのルートビューになりました。

00:03:08.000 --> 00:03:12.000
[名前の変更] をクリックします。

00:03:12.000 --> 00:03:16.000
StartViewのリストに表示するワークアウトタイプの配列を定義しましょう。

00:03:16.000 --> 00:03:25.000
まず、HealthKitをインポートしてHKWorkoutActivityTypeにアクセスしましょう。

00:03:25.000 --> 00:03:34.000
次に、ワークアウトタイプの配列を追加しましょう。

00:03:34.000 --> 00:03:40.000
私たちのワークアウトリストには、サイクリング、ランニング、ウォーキングのHKWorkoutActivityTypesがあります。

00:03:40.000 --> 00:04:01.000
識別可能なプロトコルに準拠するようにHKWorkoutActivityType列挙型を拡張し、名前変数を追加することで、HKWorkoutActivityTypeをリストにアクセスできるようにしましょう。

00:04:01.000 --> 00:04:09.000
IDで計算された変数は、列挙型のrawValueを返します。

00:04:09.000 --> 00:04:15.000
名前変数は、ケースを切り替えて、「Run」、「Bike」、または「Walk」などの名前を返します。

00:04:15.000 --> 00:04:28.000
StartViewのボディにリストビューを追加して、ワークアウトのリストを表示しましょう。

00:04:28.000 --> 00:04:35.000
このリストは、そのモデルとしてoutworkTypes変数を使用します。

00:04:35.000 --> 00:04:38.000
ワークアウトタイプごとにナビゲーションリンクが表示されます。

00:04:38.000 --> 00:04:42.000
NavigationLinkは、ナビゲーションベースのインターフェイスの宛先を定義します。

00:04:42.000 --> 00:04:45.000
今のところ、目的地はテキストビューになります。

00:04:45.000 --> 00:04:54.000
これらのナビゲーションリンクは後で設定して、正しいワークアウトを追跡していることを確認します。

00:04:54.000 --> 00:05:02.000
パディングはナビゲーションリンクを高くし、より大きなタップエリアを提供し、簡単にワークアウトを開始します。

00:05:02.000 --> 00:05:09.000
このリストは、スクロール時に深度効果を提供するためにカルーセルリストスタイルを使用します。

00:05:09.000 --> 00:05:12.000
navigationBarTitleには「ワークアウト」が表示されます。

00:05:12.000 --> 00:05:20.000
「再開」をクリックして、StartViewのプレビューを見てみましょう。

00:05:20.000 --> 00:05:25.000
ライブプレビューをクリックするとスクロールできます。

00:05:25.000 --> 00:05:29.000
上にスクロールして、カルーセルリストスタイルの深度効果を確認します。

00:05:29.000 --> 00:05:30.000
素敵ですね。

00:05:30.000 --> 00:05:34.000
ワークアウトセッションはモーダル体験として提示されます。

00:05:34.000 --> 00:05:38.000
ワークアウト中、人々は通常、セッション固有の機能だけを必要とします。

00:05:38.000 --> 00:05:42.000
ワークアウトのリストを確認したり、アプリの他の部分にアクセスしたりする必要はありません。

00:05:42.000 --> 00:05:50.000
モーダルエクスペリエンスで最も重要なアイテムを提供することは、気晴らしを最小限に抑えながらセッションを管理するのに役立ちます。

00:05:50.000 --> 00:05:56.000
Apple Watchでワークアウトアプリを使用する人は、ビューがこの順序であることを期待しています。

00:05:56.000 --> 00:06:04.000
左側のコントロールビューには、終了、一時停止、再開などの進行中のセッションを制御するボタンがあります。

00:06:04.000 --> 00:06:10.000
中央では、メトリクスが一目で読める専用画面に表示されます。

00:06:10.000 --> 00:06:16.000
右側のメディア再生コントロールでは、ワークアウト中にメディアを制御できます。

00:06:16.000 --> 00:06:22.000
watchOSのTabViewは、誰かが左右にスワイプすると、複数の子ビューを切り替えます。

00:06:22.000 --> 00:06:26.000
TabViewは、ビューの下部にページインジケーターも提供します。

00:06:26.000 --> 00:06:30.000
TabViewは、セッション中のビューを表示するのに最適です。

00:06:30.000 --> 00:06:38.000
3つのワークアウトセッションビューのタブビューでSessionPagingViewを作成しましょう。

00:06:38.000 --> 00:06:43.000
[ファイル] &gt; [新規] &gt; [ファイル] をクリックします。

00:06:43.000 --> 00:06:55.000
SwiftUI Viewをクリックし、[次へ]をクリックし、この名前を「SessionPagingView」と命名し、[作成]をクリックします。

00:06:55.000 --> 00:07:03.000
TabViewで選択できる各ビューをモデル化するためのタブ列挙型を作成しましょう。

00:07:03.000 --> 00:07:08.000
タブ列挙型には、コントロール、メトリクス、nowPlayingの3つのケースがあります。

00:07:08.000 --> 00:07:14.000
また、TabViewの選択のバインディングを提供するために、「選択」という名前の@State変数を追加しました。

00:07:14.000 --> 00:07:20.000
選択のデフォルト値はメトリクスになるため、ワークアウトが始まるとメトリクスビューが表示されます。

00:07:20.000 --> 00:07:29.000
TabViewを追加しましょう。

00:07:29.000 --> 00:07:34.000
TabViewの選択パラメータは、選択状態変数へのバインディングを使用します。

00:07:34.000 --> 00:07:38.000
テキストビューは、作成されるまで各ビューのプレースホルダです。

00:07:38.000 --> 00:07:41.000
各ビューにはタグが付いているので、選択できます。

00:07:41.000 --> 00:07:48.000
「再開」をクリックして、SessionPagingViewがどのように見えるかを見てみましょう。

00:07:48.000 --> 00:07:54.000
ライブプレビューをクリックすると、ビュー間をスワイプできます。

00:07:54.000 --> 00:08:02.000
SessionPagingViewの選択変数のデフォルト値はメトリクスであるため、メトリクステキストビューが最初に表示されることに注意してください。

00:08:02.000 --> 00:08:07.000
左にスワイプすると、コントロールのテキストビューが表示されます。

00:08:07.000 --> 00:08:11.000
右にスワイプすると、再生中のテキストビューが表示されます。

00:08:11.000 --> 00:08:13.000
すごい！

00:08:13.000 --> 00:08:16.000
ワークアウトの実行中に、ライブメトリクスが表示されます。

00:08:16.000 --> 00:08:26.000
セッションが実行などの動きを必要とする場合、アプリは大きなフォントサイズを使用し、最も重要な情報が読みやすいようにテキストを配置する必要があります。

00:08:26.000 --> 00:08:32.000
MetricsViewは、経過時間、アクティブエネルギー、現在の心拍数、距離を表示します。

00:08:32.000 --> 00:08:37.000
HealthKitには、さらに多くのHKQuantityTypesが使用できます。

00:08:37.000 --> 00:08:40.000
MetricsViewを作成しましょう。

00:08:40.000 --> 00:09:00.000
[ファイル] &gt; [新規] &gt; [ファイル SwiftUI ビュー] をクリックし、[次へ] をクリックし、この名前を「MetricsView」と命名し、[作成] をクリックします。

00:09:00.000 --> 00:09:12.000
VStackには、4つのメトリックテキストビューが含まれます。

00:09:12.000 --> 00:09:22.000
テキストビューは、これらのテキストビューをモデルに接続するまで、今のところデフォルト値です。

00:09:22.000 --> 00:09:32.000
黄色のforegroundColorと半太字のfontWeightを与えて、経過時間を焦点にしましょう。

00:09:32.000 --> 00:09:39.000
アクティブエネルギーテキストビューは、エネルギー単位キロカロリーのデフォルト値を使用して測定値を作成します。

00:09:39.000 --> 00:09:55.000
測定は、ユニットを短縮する新しいフォーマットされた機能を使用し、使用法はワークアウトエネルギー燃焼のためのワークアウトであり、numberFormatは分数をトリミングする分数Lengthがゼロです。

00:09:55.000 --> 00:10:00.000
心拍数テキストビューは、fractionLength zeroでフォーマットされたデフォルト値を使用します。

00:10:00.000 --> 00:10:08.000
フォーマットされた文字列に「bpm」を追加します。

00:10:08.000 --> 00:10:13.000
距離テキストビューは、UnitLength.metersのデフォルト値を使用します。

00:10:13.000 --> 00:10:16.000
測定値は短縮単位でフォーマットされています。

00:10:16.000 --> 00:10:27.000
使用法は道路であり、ロケールに基づいて自然に進行する帝国単位またはメートル単位を表示します。

00:10:27.000 --> 00:10:36.000
丸みを帯びたデザイン、monospacedDigits、小文字のTitleのシステムフォントを使用します。

00:10:36.000 --> 00:10:48.000
メトリクスを最先端に整列させたいので、VStackにmaxWidth infinityと先頭の整列を持つフレームビュー修飾子を与えました。

00:10:48.000 --> 00:10:52.000
このVStackのコンテンツを画面の下部まで拡張できるようにしたいと考えています。

00:10:52.000 --> 00:10:58.000
これを許可するために、私たちは一番下の安全な領域を無視します。

00:10:58.000 --> 00:11:10.000
メトリクスをナビゲーションバーのタイトルに揃えたいので、これを行うにはscenePadding()を使用しました。

00:11:10.000 --> 00:11:17.000
経過時間テキストビューは、経過時間を適切にフォーマットし、Always On状態に基づいてサブ秒を非表示または表示したいと考えています。

00:11:17.000 --> 00:11:23.000
これを行うには、ElapsedTimeViewを作成し、カスタムのElapsedTimeFormatterを作成しましょう。

00:11:23.000 --> 00:11:49.000
[ファイル] &gt; [新規] &gt; [ファイル]、SwiftUI View をクリックし、[次へ] をクリックし、「ElapsedTimeView」という名前を付け、[作成] をクリックします。

00:11:49.000 --> 00:11:54.000
私たちのElapsedTimeViewには、TimeIntervalであるelapsedTimeがあり、デフォルトはゼロになっています。

00:11:54.000 --> 00:12:00.000
showSubsecondsは、デフォルトでtrueに設定されているブール引数です。

00:12:00.000 --> 00:12:09.000
timeFormatterは、以下で定義するElapsedTimeFormatter状態変数です。

00:12:09.000 --> 00:12:16.000
ビューの本文には、timeFormatterが使用できるように、経過時間をNSNumberにキャストするテキストビューが含まれています。

00:12:16.000 --> 00:12:19.000
テキストビューには半大胆なfontWeightがあります。

00:12:19.000 --> 00:12:32.000
showSubsecondsが変更されると、timeFormatterのshowSubseconds変数も変更されます。

00:12:32.000 --> 00:12:37.000
ElapsedTimeFormatterは、DateComponentsFormatterを使用するカスタムフォーマッタです。

00:12:37.000 --> 00:12:41.000
経過時間が分と秒とパッドゼロを表示したい。

00:12:41.000 --> 00:12:49.000
showSubseconds変数は、サブ秒が表示されるかどうかを決定します。

00:12:49.000 --> 00:12:54.000
オプションの文字列を返す値関数の文字列をオーバーライドします。

00:12:54.000 --> 00:13:00.000
最初のガードは、値がTimeIntervalであることを保証します。

00:13:00.000 --> 00:13:09.000
2番目のガードは、componentsFormatterが文字列を返すことを保証します。

00:13:09.000 --> 00:13:17.000
showSubsecondsがtrueの場合、By 1で割って切り捨てられたRemainderを取得し、100を掛けてサブ秒を計算します。

00:13:17.000 --> 00:13:26.000
ローカライズされた decimalSeparator を使用し、formattedString を返し、サブ秒を追加します。

00:13:26.000 --> 00:13:31.000
showSubseconds が false の場合、subseconds なしで formattedString を返します。

00:13:31.000 --> 00:13:38.000
再開をクリックすると、ElapsedTimeViewのプレビューが表示されます。

00:13:38.000 --> 00:13:39.000
よさそうですね。

00:13:39.000 --> 00:13:41.000
分には、コロンの左側にゼロが埋め込まれています。

00:13:41.000 --> 00:13:44.000
セコンドには、コロンの右側にゼロが埋め込まれています。

00:13:44.000 --> 00:13:48.000
サブ秒は小数点の後に表示されます。

00:13:48.000 --> 00:13:50.000
ElapsedTimeViewをMetricsViewに追加しましょう。

00:13:50.000 --> 00:13:55.000
MetricsViewをクリックします。

00:13:55.000 --> 00:14:05.000
経過時間テキストビューをElapsedTimeViewに置き換えます。

00:14:05.000 --> 00:14:07.000
MetricsViewをプレビューしましょう。

00:14:07.000 --> 00:14:10.000
美味しそう！

00:14:10.000 --> 00:14:17.000
ControlsViewには、終了、一時停止、再開など、進行中のセッションを制御するボタンがあります。

00:14:17.000 --> 00:14:21.000
終了ボタンをタップすると、ワークアウトの概要が表示されます。

00:14:21.000 --> 00:14:26.000
一時停止ボタンをタップすると、ワークアウトが一時停止し、メトリクスビューが表示されます。

00:14:26.000 --> 00:14:29.000
ControlsViewを作成しましょう。

00:14:29.000 --> 00:14:46.000
[ファイル] &gt; [新規] &gt; [ファイル]、SwiftUI View をクリックし、この名前を「ControlsView」と選択し、[作成] をクリックします。

00:14:46.000 --> 00:14:55.000
終了ボタンと一時停止ボタンを追加しましょう。

00:14:55.000 --> 00:15:05.000
HStackには2つのVStackが含まれており、各VStackにはボタンとテキストビューが含まれています。

00:15:05.000 --> 00:15:09.000
終了ボタンのラベルは、システム名「xmark」の画像です。

00:15:09.000 --> 00:15:15.000
ボタンは赤い色合いで、title2フォントを使用してシンボルのサイズを大きくします。

00:15:15.000 --> 00:15:22.000
下のテキストビューには「終了」文字列があります。

00:15:22.000 --> 00:15:25.000
一時停止ボタンは、システム名「一時停止」の画像を使用します。

00:15:25.000 --> 00:15:27.000
それは黄色の色合いを持っています。

00:15:27.000 --> 00:15:29.000
下のテキストビューには「一時停止」文字列があります。

00:15:29.000 --> 00:15:39.000
[再開]をクリックして、ControlsViewをプレビューします。

00:15:39.000 --> 00:15:43.000
素敵ですね。

00:15:43.000 --> 00:15:48.000
NowPlayingViewは、ワークアウトのセッション中にメディア再生コントロールを提供します。

00:15:48.000 --> 00:15:52.000
これには、現在メディアを再生しているサードパーティのアプリのコントロールが含まれます。

00:15:52.000 --> 00:15:55.000
NowPlayingViewを追加しましょう。

00:15:55.000 --> 00:16:01.000
SessionPagingViewを選択します。

00:16:01.000 --> 00:16:03.000
NowPlayingViewはWatchKitによって提供されています。

00:16:03.000 --> 00:16:08.000
WatchKitをインポートしましょう。

00:16:08.000 --> 00:16:21.000
テキストビューをControlsView、MetricsView、NowPlayingViewに置き換えましょう。

00:16:21.000 --> 00:16:24.000
NowPlayingViewは、WatchKitが提供するSwiftUIビューです。

00:16:24.000 --> 00:16:26.000
それはとても簡単です。

00:16:26.000 --> 00:16:38.000
[再開] をクリックすると、SessionPagingView のプレビューが表示されます。

00:16:38.000 --> 00:16:42.000
プレビューでは、MetricsViewを見ることができます。

00:16:42.000 --> 00:16:46.000
左にスワイプすると、ControlsViewが表示されます。

00:16:46.000 --> 00:16:50.000
右にずっとスワイプして...

00:16:50.000 --> 00:16:57.000
...NowPlayingViewを見るには。

00:16:57.000 --> 00:17:04.000
StartViewに戻り、NavigationLinkの宛先をSessionPagingViewに変更しましょう。

00:17:04.000 --> 00:17:08.000
StartViewを選択します。

00:17:08.000 --> 00:17:18.000
宛先をSessionPagingViewに更新します。

00:17:18.000 --> 00:17:24.000
要約画面は、ワークアウトが終了したことを確認し、記録された情報を表示します。

00:17:24.000 --> 00:17:31.000
人々が現在の進捗状況を簡単に確認できるように、アクティビティリングを含めることで要約を強化します。

00:17:31.000 --> 00:17:35.000
サマリービューを作成しましょう。

00:17:35.000 --> 00:17:49.000
[ファイル] &gt; [新規] &gt; [ファイル]、SwiftUI View をクリックし、[次へ] をクリックし、この名前を「SummaryView」と名前を付け、[作成] をクリックします。

00:17:49.000 --> 00:18:02.000
メトリクスとその値を記述するカスタムSummaryMetricViewを作成しましょう。

00:18:02.000 --> 00:18:12.000
SummaryMetricViewは、メトリックを記述するタイトルとメトリックの値文字列を取ります。

00:18:12.000 --> 00:18:15.000
本文には、2つのテキストビューと分割器が含まれています。

00:18:15.000 --> 00:18:21.000
メトリック値を示すテキストビューは、丸みを帯びたデザインと小文字のSmallCapsのタイトルシステムフォントを使用します。

00:18:21.000 --> 00:18:26.000
前景カラーとしてアクセントカラーを使用します。

00:18:26.000 --> 00:18:36.000
SummaryViewのワークアウト期間フォーマッタを作成しましょう。

00:18:36.000 --> 00:18:45.000
durationFormatterは、時、分、秒をコロンとパッドゼロで区切って表示するDateComponentsFormatterです。

00:18:45.000 --> 00:18:58.000
SummaryMetricViewsとDoneボタンをSummaryViewに追加しましょう。

00:18:58.000 --> 00:19:08.000
ScrollViewとVStackには、4つのSummaryMetricViewsとDoneボタンが含まれています。

00:19:08.000 --> 00:19:21.000
合計時間テキストビューは、hurationFormatterを使用して、時間、分、秒をコロンで区切って表示します。

00:19:21.000 --> 00:19:29.000
Total Distance SummaryMetricViewは、短縮単位を使用してフォーマットされたデフォルト値で測定を使用します。

00:19:29.000 --> 00:19:42.000
使用法は道路であり、ロケールに基づいて自然に進行する帝国単位またはメートル単位を表示します。

00:19:42.000 --> 00:19:48.000
Total Energy SummaryMetricViewは、デフォルト値とキロカロリーのエネルギー単位で測定を使用します。

00:19:48.000 --> 00:19:51.000
短縮単位でフォーマットされています。

00:19:51.000 --> 00:20:03.000
使用法はワークアウトエネルギーのためのワークアウトであり、numberFormatは分数Lengthゼロの精度を持っています。

00:20:03.000 --> 00:20:14.000
平均心拍数SummaryMetricViewは、数値精度、分数Lengthゼロでフォーマットされたデフォルト値を使用し、1分あたりの拍数に「bpm」を追加します。

00:20:14.000 --> 00:20:21.000
SummaryMetricViewsの実際のワークアウト値は後で提供します。

00:20:21.000 --> 00:20:31.000
テキストビューとディバイダをナビゲーションバーのタイトルに揃えたいので、VStackで.scenePadding()を使用しました。

00:20:31.000 --> 00:20:38.000
navigationTitleは「Summary」になり、ナビゲーションバーにインラインで表示されます。

00:20:38.000 --> 00:20:42.000
次に、ワークアウトの概要にアクティビティリングを追加します。

00:20:42.000 --> 00:21:06.000
[ファイル] &gt; [新規] &gt; [ファイル] をクリックし、[スウィフト ファイル] をクリックし、[次へ] という名前を付け、[作成] をクリックします。

00:21:06.000 --> 00:21:10.000
HealthKitをインポートしてHKHealthStoreにアクセスします。

00:21:10.000 --> 00:21:18.000
SwiftUIをインポートして、WKInterfaceObjectRepresentableにアクセスします。

00:21:18.000 --> 00:21:23.000
ActivityRingsView構造体は、WKInterfaceObjectRepresentableに準拠しています。

00:21:23.000 --> 00:21:30.000
healthStore定数は初期化時に割り当てられます。

00:21:30.000 --> 00:21:42.000
プロトコルに準拠するには、makeWKInterfaceObjectとupdateWKInterfaceObjectの2つの機能が必要です。

00:21:42.000 --> 00:21:53.000
makeWKInterfaceObject内では、WKInterfaceActivityRingであるactivityRingsObjectを宣言します。

00:21:53.000 --> 00:22:02.000
次に、HKActivitySummaryQueryの述語を作成し、今日の日付コンポーネントを使用します。

00:22:02.000 --> 00:22:13.000
次に、クエリを作成して結果を処理し、メインキューのactivityRingsObjectにアクティビティサマリーを設定します。

00:22:13.000 --> 00:22:16.000
次に、HKHealthStoreでクエリを実行します。

00:22:16.000 --> 00:22:19.000
最後に、activityRingsObjectを返します。

00:22:19.000 --> 00:22:22.000
ActivityRingsViewをSummaryViewに追加しましょう。

00:22:22.000 --> 00:22:28.000
SummaryViewをクリックします。

00:22:28.000 --> 00:22:35.000
HKHealthStoreにアクセスするには、HealthKitをインポートしましょう。

00:22:35.000 --> 00:22:48.000
次に、完了ボタンの上にテキストビューとActivityRingsViewを追加します。

00:22:48.000 --> 00:22:53.000
テキストビューとActivityRingsViewsを追加しました。フレームの幅と高さは50です。

00:22:53.000 --> 00:22:55.000
とりあえずHKHealthStoreを作成します。

00:22:55.000 --> 00:22:58.000
後で、1つ再利用します。

00:22:58.000 --> 00:23:06.000
SummaryViewをプレビューしましょう。[再開]をクリックします。

00:23:06.000 --> 00:23:12.000
ライブプレビューをクリックするとスクロールできます。

00:23:12.000 --> 00:23:22.000
SummaryMetricViews、Activity Rings、および完了ボタンのそれぞれを参照してください。

00:23:22.000 --> 00:23:25.000
HealthKitの統合について話しましょう。

00:23:25.000 --> 00:23:33.000
HealthKitは、ワークアウト中のフィットネスアクティビティを追跡し、そのワークアウトをHealthKitに保存するための組み込み機能を提供します。

00:23:33.000 --> 00:23:40.000
これにより、開発者としての時間を節約でき、顧客はすべてのワークアウトを1か所に保存できます。

00:23:40.000 --> 00:23:50.000
HKワークアウトセッションは、カロリーや心拍数など、ワークアウトに関連するデータを正確に収集できるように、データ収集のためにデバイスのセンサーを準備します。

00:23:50.000 --> 00:23:56.000
また、ワークアウトがアクティブなときにアプリケーションをバックグラウンドで実行することもできます。

00:23:56.000 --> 00:24:00.000
HKLiveWorkoutBuilderは、HKWorkoutオブジェクトを作成して保存します。

00:24:00.000 --> 00:24:05.000
サンプルやイベントを自動的に収集します。

00:24:05.000 --> 00:24:10.000
詳細については、「ワークアウトで作業する新しい方法」セッションをチェックしてください。

00:24:10.000 --> 00:24:14.000
アプリのデータフローがどうなるか見てみましょう。

00:24:14.000 --> 00:24:18.000
WorkoutManagerは、HealthKitとのインターフェースを担当します。

00:24:18.000 --> 00:24:24.000
HKWorkoutSessionと連携して、ワークアウトを開始、一時停止、終了します。

00:24:24.000 --> 00:24:32.000
HKLiveWorkoutBuilderと連携して、ワークアウトのサンプルをリッスンし、そのデータを私たちの見解に提供します。

00:24:32.000 --> 00:24:35.000
WorkoutManagerは環境オブジェクトになります。

00:24:35.000 --> 00:24:42.000
環境オブジェクトは、観測可能なオブジェクトが変更されるたびに現在のビューを無効にします。

00:24:42.000 --> 00:24:54.000
MyWorkoutsAppのNavigationViewをWorkoutManager環境オブジェクトに割り当て、WorkoutManagerをNavigationViewのビュー階層内のビューに伝播します。

00:24:54.000 --> 00:25:01.000
その後、ビューは、環境内のWorkoutManagerにアクセスするための@EnvironmentObjectを宣言します。

00:25:01.000 --> 00:25:03.000
WorkoutManagerを作成しましょう。

00:25:03.000 --> 00:25:22.000
[ファイル] &gt; [新規] &gt; [ファイル] &gt; [Swift ファイル] をクリックし、[次へ] をクリックし、この名前を「WorkoutManager」に名前を付けて [作成] をクリックします。

00:25:22.000 --> 00:25:32.000
WorkoutManagerがHealthKitのAPIにアクセスできるように、HealthKitをインポートします。

00:25:32.000 --> 00:25:39.000
次に、ObservableObjectプロトコルに準拠したNSObjectであるWorkoutManagerクラスを定義します。

00:25:39.000 --> 00:25:42.000
私たちは、すべてのビューにWorkoutManagerへのアクセスを許可したいと考えています。

00:25:42.000 --> 00:25:49.000
これは、MyWorkoutsAppのNavigationViewの環境オブジェクトとしてWorkoutManagerを割り当てることによって行います。

00:25:49.000 --> 00:25:53.000
MyWorkoutsAppを選択します。

00:25:53.000 --> 00:26:00.000
workoutManagerをStateObjectとして追加します。

00:26:00.000 --> 00:26:07.000
environmentObjectビュー修飾子をNavigationViewに追加します。

00:26:07.000 --> 00:26:15.000
NavigationViewにenvironmentObjectが割り当てられると、そのビュー階層内のビューにenvironmentObjectを自動的に渡します。

00:26:15.000 --> 00:26:17.000
ナビゲーションモデルを設定しましょう。

00:26:17.000 --> 00:26:23.000
WorkoutManagerを選択します。

00:26:23.000 --> 00:26:32.000
WorkoutManagerは、オプションのHKWorkoutActivityTypeである選択したワークアウトを管理します。

00:26:32.000 --> 00:26:37.000
選択したワークアウトを追跡するために、選択したワークアウト変数を追加しました。

00:26:37.000 --> 00:26:43.000
これで、StartViewのNavigationLinkは、その選択をWorkoutManagerの選択したワークアウトにバインドする必要があります。

00:26:43.000 --> 00:26:48.000
StartViewを選択します。

00:26:48.000 --> 00:26:55.000
workoutManager EnvironmentObjectをStartViewに追加します。

00:26:55.000 --> 00:27:05.000
タグと選択でNavigationLinkを更新しましょう。

00:27:05.000 --> 00:27:07.000
タグはワークアウトタイプです。

00:27:07.000 --> 00:27:12.000
選択は、outworkManagerのselectedWorkoutへのバインディングです。

00:27:12.000 --> 00:27:18.000
これで、ワークアウトがタップされるたびに、outworkManagerで選択したワークアウトが更新されます。

00:27:18.000 --> 00:27:24.000
ワークアウトが選択されたら、HKWorkoutSessionとHKLiveWorkoutBuilderを始めましょう。

00:27:24.000 --> 00:27:36.000
WorkoutManagerを選択します。

00:27:36.000 --> 00:27:42.000
HKHealthStore、HKWorkoutSession、HKLiveWorkoutBuilderを追加します。

00:27:42.000 --> 00:27:54.000
では、ワークアウトを開始するためのstartWorkout機能を作成しましょう。

00:27:54.000 --> 00:27:57.000
startWorkout関数は、workoutTypeパラメータを取ります。

00:27:57.000 --> 00:28:02.000
HKWorkoutConfigurationは、outworkeTypeを使用して作成されます。

00:28:02.000 --> 00:28:05.000
私たちのアプリでは、すべてのワークアウトが屋外になります。

00:28:05.000 --> 00:28:11.000
ロケーションタイプによって、HKWorkoutSessionとHKLiveWorkoutBuilderの動作が決まることに注意してください。

00:28:11.000 --> 00:28:19.000
たとえば、屋外サイクリング活動は正確な位置データを生成しますが、屋内サイクリング活動は生成しません。

00:28:19.000 --> 00:28:27.000
healthStoreと設定を使用してHKWorkoutSessionを作成します。

00:28:27.000 --> 00:28:31.000
セッションの関連WorkoutBuilderにビルダーを割り当てます。

00:28:31.000 --> 00:28:38.000
これは、スローされたエラーを処理するためにdo-catchブロックで行われます。

00:28:38.000 --> 00:28:45.000
healthStoreとoutreoutConfigurationを使用して、ビルダーのデータソースをHKLiveWorkoutDataSourceに割り当てます。

00:28:45.000 --> 00:28:55.000
HKLiveWorkoutDataSourceは、アクティブなワークアウトセッションからのライブデータを自動的に提供します。

00:28:55.000 --> 00:29:02.000
startDateを作成し、セッションでstartActivityを呼び出し、ビルダーでbeginCollectionを作成します。

00:29:02.000 --> 00:29:12.000
選択したワークアウトが変更されるたびに、startWorkoutを呼び出しましょう。

00:29:12.000 --> 00:29:15.000
選択されたワークアウトはゼロにすることができます。

00:29:15.000 --> 00:29:21.000
ガードステートメントを使用して、選択したワークアウトがnilではない場合にのみstartWorkoutを呼び出します。

00:29:21.000 --> 00:29:30.000
アプリがワークアウトセッションを作成する前に、HealthKitを設定し、アプリが使用する健康データの読み取りと共有の許可を要求する必要があります。

00:29:30.000 --> 00:29:42.000
承認を要求する機能を追加しましょう。

00:29:42.000 --> 00:29:50.000
ワークアウトセッションでは、ワークアウトの種類を共有する許可を求める必要があります。

00:29:50.000 --> 00:29:56.000
また、セッションの一環としてApple Watchによって自動的に記録されたデータタイプも読みたいです。

00:29:56.000 --> 00:30:05.000
また、アクティビティリングの概要を読む許可も必要です。

00:30:05.000 --> 00:30:08.000
次に、healthStoreでrequestAuthorizationに電話します。

00:30:08.000 --> 00:30:12.000
ビューが表示されたら、HealthKitからStartViewリクエストの承認をもらいましょう。

00:30:12.000 --> 00:30:23.000
StartViewをクリックします。

00:30:23.000 --> 00:30:28.000
現れると、outreoutManagerのrequestAuthorization関数が呼び出されます。

00:30:28.000 --> 00:30:31.000
拡張機能にHealthKitを有効にしましょう。

00:30:31.000 --> 00:30:39.000
MyWorkoutsのプロジェクトファイルを選択してください...

00:30:39.000 --> 00:30:45.000
...MyWorkouts WatchKit拡張機能、署名、機能。

00:30:45.000 --> 00:30:53.000
「機能を追加」を選択し、下にスクロールし、「HealthKit」を選択します。

00:30:53.000 --> 00:31:01.000
アクティブなワークアウトセッションを持つアプリはバックグラウンドで実行できるため、WatchKit拡張機能にバックグラウンドモード機能を追加する必要があります。

00:31:01.000 --> 00:31:05.000
ワークアウトセッションには、ワークアウト処理のバックグラウンドモードが必要です。

00:31:05.000 --> 00:31:12.000
[機能の追加、背景モード] を選択します。

00:31:12.000 --> 00:31:16.000
ワークアウト処理を選択します。

00:31:16.000 --> 00:31:21.000
WatchKit ExtensionのInfo.plistファイルに使用状況の説明を追加する必要があります。

00:31:21.000 --> 00:31:26.000
Info.plistを選択します。

00:31:26.000 --> 00:31:33.000
最後の行を選択し、Returnキーを押します。

00:31:33.000 --> 00:31:40.000
NSHealth ShareUsageDescriptionキーを使用してください。

00:31:40.000 --> 00:31:45.000
アプリが要求されたデータを読み取る必要がある理由を説明してください。

00:31:45.000 --> 00:31:48.000
Returnキーを押します。

00:31:48.000 --> 00:31:55.000
NSHealth UpdateUsageDescriptionキーを使用してください。

00:31:55.000 --> 00:32:02.000
アプリが書き込む予定のデータを説明してください。

00:32:02.000 --> 00:32:06.000
アプリを構築して実行して、アプリがHealthKitに許可を要求するのを見てみましょう。

00:32:06.000 --> 00:32:25.000
[実行]をクリックします。

00:32:25.000 --> 00:32:28.000
私たちのアプリはHealthKitの承認を要求しました。

00:32:28.000 --> 00:32:33.000
下にスクロールして[レビュー]をクリックします。

00:32:33.000 --> 00:32:39.000
以下のすべての要求されたデータを選択します。

00:32:39.000 --> 00:32:44.000
私たちのアプリがワークアウトの共有を要求しているのを見てください。

00:32:44.000 --> 00:32:47.000
提供された説明を参照してください。

00:32:47.000 --> 00:32:50.000
「次へ」をタップします。

00:32:50.000 --> 00:32:52.000
私たちのアプリは読み取りアクセスを要求しました。

00:32:52.000 --> 00:32:56.000
以下のすべての要求されたデータを選択します。

00:32:56.000 --> 00:33:07.000
アプリが読み取りアクセスを要求したデータ型を参照してください。

00:33:07.000 --> 00:33:10.000
提供された説明を参照してください。

00:33:10.000 --> 00:33:14.000
「完了」をタップします。

00:33:14.000 --> 00:33:19.000
ワークアウトセッションを開始できるようになったので、HKWorkoutSessionをコントロールする必要があります。

00:33:19.000 --> 00:33:27.000
WorkoutManagerを選択します。

00:33:27.000 --> 00:33:39.000
セッション状態制御ロジックを追加しましょう。

00:33:39.000 --> 00:33:46.000
「running」という名前の@Published変数は、セッションが実行されているかどうかを追跡します。

00:33:46.000 --> 00:33:50.000
一時停止と再開機能は、セッションを一時停止して再開します。

00:33:50.000 --> 00:34:00.000
togglePause機能は、セッションが実行されているかどうかに基づいてセッションを一時停止または再開します。

00:34:00.000 --> 00:34:03.000
endWorkout関数はセッションを終了します。

00:34:03.000 --> 00:34:19.000
WorkoutManagerをHKWorkoutSessionDelegateに拡張して、セッション状態の変更をリッスンしましょう。

00:34:19.000 --> 00:34:31.000
workoutSession didChangeTo toState fromState with Date 関数は、セッション状態が変更されるたびに呼び出されます。

00:34:31.000 --> 00:34:41.000
実行中の変数は、toStateが実行中かどうかに基づいて更新され、UI更新のためにメインキューにディスパッチされます。

00:34:41.000 --> 00:34:50.000
セッションが終了に移行したら、ビルダーのendCollectionを呼び出し、終了日を指定して、ワークアウトサンプルの収集を停止します。

00:34:50.000 --> 00:34:56.000
endCollectionが終了したら、finishWorkoutを呼び出してHKWorkoutを健康データベースに保存します。

00:34:56.000 --> 00:35:08.000
必ずWorkoutManagerをHKWorkoutSessionの代理人として割り当ててください。

00:35:08.000 --> 00:35:14.000
それでは、ControlsViewでセッションを一時停止、再開、終了させましょう。

00:35:14.000 --> 00:35:19.000
ControlsViewを選択します。

00:35:19.000 --> 00:35:31.000
ビューがセッションを制御できるように、outworkManagerをEnvironmentObjectとして追加します。

00:35:31.000 --> 00:35:40.000
workoutManagerで終了ボタンのアクションコールendWorkoutを持っています。

00:35:40.000 --> 00:35:56.000
一時停止/再開ボタンは、セッションを一時停止または再開し、セッションの状態に基づいて画像とテキストを更新する必要があります。

00:35:56.000 --> 00:36:05.000
ボタンのアクションは、sessionManagerのtogglePause機能を呼び出し、セッションを一時停止または再開します。

00:36:05.000 --> 00:36:13.000
ボタンの画像のsystemNameは、outworkManagerの実行変数に基づいて「一時停止」または「再生」のいずれかです。

00:36:13.000 --> 00:36:19.000
ボタンの下のテキストには、workoutManagerの実行変数に基づいて「一時停止」または「再開」のいずれかが表示されます。

00:36:19.000 --> 00:36:24.000
SessionPagingViewを更新して、ナビゲーションバーにワークアウト名を表示しましょう。

00:36:24.000 --> 00:36:29.000
SessionPagingViewを選択します。

00:36:29.000 --> 00:36:35.000
SessionPagingViewはWorkoutManager環境変数にアクセスする必要があるので、それを追加しましょう。

00:36:35.000 --> 00:36:42.000
では、ナビゲーションバーを設定しましょう。

00:36:42.000 --> 00:36:48.000
ナビゲーションタイトルは、WorkoutManagerが選択したWorkoutの名前です。

00:36:48.000 --> 00:36:56.000
トレーニング中に誰かがStartViewに戻りたくないので、ナビゲーションバーの戻るボタンは非表示になっています。

00:36:56.000 --> 00:37:01.000
NowPlayingViewが表示されたら、ナビゲーションバーを非表示にします。

00:37:01.000 --> 00:37:06.000
誰かがワークアウトを一時停止または再開するときは、MetricsViewにスワイプする必要はありません。

00:37:06.000 --> 00:37:18.000
onChangeビュー修飾子を追加することで、彼らのためにこれを行うことができます。

00:37:18.000 --> 00:37:23.000
WorkoutManagerの実行中の公開変数が変更されると、displayMetricsView関数が呼び出されます。

00:37:23.000 --> 00:37:29.000
displayMetricsViewは、選択状態変数をメトリクス withAnimationに設定します。

00:37:29.000 --> 00:37:34.000
ワークアウトが終了したので、SummaryViewを表示して閉じる機能を追加しましょう。

00:37:34.000 --> 00:37:39.000
WorkoutManagerをクリックします。

00:37:39.000 --> 00:37:53.000
ブール値がデフォルトでfalseである「showingSummaryView」という名前の公開変数を追加します。

00:37:53.000 --> 00:37:58.000
この変数は、アプリのナビゲーションビューでシートの選択にバインディングを提供します。

00:37:58.000 --> 00:38:11.000
endWorkoutで、ShowingSummaryViewをtrueに設定します。

00:38:11.000 --> 00:38:16.000
SummaryViewをシートとしてMyWorkoutsAppのNavigationViewに追加しましょう。

00:38:16.000 --> 00:38:21.000
MyWorkoutsAppをクリックします。

00:38:21.000 --> 00:38:29.000
NavigationViewにシートビュー修飾子を追加します。

00:38:29.000 --> 00:38:35.000
isPresentedパラメータは、outworkManagerの showingSummaryViewへのバインディングです。

00:38:35.000 --> 00:38:38.000
シートの内容はSummaryViewです。

00:38:38.000 --> 00:38:42.000
SummaryViewで、シートを閉じる機能を追加しましょう。

00:38:42.000 --> 00:38:48.000
SummaryViewをクリックします。

00:38:48.000 --> 00:38:56.000
Dismiss Dnvironment変数を追加します。

00:38:56.000 --> 00:39:06.000
[完了] ボタンのアクションで、dis dismiss() を呼び出します。

00:39:06.000 --> 00:39:12.000
アプリケーションを実行してセッションを開始および終了し、SummaryViewが表示されるのを見てみましょう。

00:39:12.000 --> 00:39:17.000
[停止] をクリックして、前回の実行を停止します。

00:39:17.000 --> 00:39:24.000
[実行]をクリックします。

00:39:24.000 --> 00:39:27.000
ランニングワークアウトをタップします。

00:39:27.000 --> 00:39:31.000
デフォルトのメトリック値は、セッション中と要約に引き続き表示されます。

00:39:31.000 --> 00:39:33.000
後で設定します。

00:39:33.000 --> 00:39:35.000
左にスワイプします。

00:39:35.000 --> 00:39:38.000
一時停止をタップします。

00:39:38.000 --> 00:39:40.000
MetricsViewが表示されていることに注意してください。

00:39:40.000 --> 00:39:45.000
左にスワイプします。

00:39:45.000 --> 00:39:47.000
ボタンに「再開」と表示されていることに注意してください。

00:39:47.000 --> 00:39:51.000
終了をタップします。

00:39:51.000 --> 00:39:54.000
ワークアウトの概要はシートとして表示されます。

00:39:54.000 --> 00:39:57.000
下にスクロールします。

00:39:57.000 --> 00:39:59.000
「完了」をタップします。

00:39:59.000 --> 00:40:03.000
シートが却下され、StartViewが表示されます。

00:40:03.000 --> 00:40:07.000
MetricsViewとSummaryViewを取得して、実際のワークアウト指標を表示しましょう。

00:40:07.000 --> 00:40:14.000
WorkoutManagerは、MetricsViewとSummaryViewが観察できる公開されたワークアウトメトリクスを公開します。

00:40:14.000 --> 00:40:20.000
WorkoutManagerを選択します。

00:40:20.000 --> 00:40:32.000
公開されたメトリクス変数をWorkoutManagerに追加しましょう。

00:40:32.000 --> 00:40:35.000
averageHeartRateはSummaryViewによって使用されます。

00:40:35.000 --> 00:40:41.000
ハートレート、アクティブエネルギー、および距離は、メトリクスビューによって観察されます。

00:40:41.000 --> 00:40:48.000
WorkoutManagerは、HKLiveWorkoutBuilderDelegateであることによってビルダーに追加されたワークアウトサンプルを観察する必要があります。

00:40:48.000 --> 00:40:50.000
今これをやりましょう。

00:40:50.000 --> 00:40:59.000
まず、ビルダーのデリゲートをWorkoutManagerとして割り当てましょう。

00:40:59.000 --> 00:41:14.000
それでは、WorkoutManagerをHKLiveWorkout BuilderDelegateプロトコルに準拠させましょう。

00:41:14.000 --> 00:41:21.000
HKLiveWorkout BuilderDelegateプロトコルに準拠するようにWorkoutManagerを拡張しました。

00:41:21.000 --> 00:41:26.000
workoutBuilderDidCollectEventは、ビルダーがイベントを収集するたびに呼び出されます。

00:41:26.000 --> 00:41:32.000
アプリでは、この機能を空のままにします。

00:41:32.000 --> 00:41:42.000
workoutBuilder didCollectDataOf collectedTypesは、ビルダーが新しいサンプルを収集するたびに呼び出されます。

00:41:42.000 --> 00:41:45.000
collectedTypesの各タイプを反復します。

00:41:45.000 --> 00:41:49.000
ガードは、収集されたタイプがHKQuantityTypeであることを保証します。

00:41:49.000 --> 00:41:52.000
統計は、その数量タイプのビルダーから読み取られます。

00:41:52.000 --> 00:42:00.000
updateForStatistics（まもなく作成する関数）が呼び出され、公開されたメトリック値が更新されます。

00:42:00.000 --> 00:42:13.000
updateForStatistics関数を作成しましょう。

00:42:13.000 --> 00:42:18.000
updateForStatisticsは、オプションのHKStatisticsオブジェクトを取ります。

00:42:18.000 --> 00:42:25.000
統計がゼロの場合、ガードは早期に戻ってきます。

00:42:25.000 --> 00:42:29.000
メトリックの更新を非同期にメインキューにディスパッチします。

00:42:29.000 --> 00:42:31.000
各数量タイプを切り替えます。

00:42:31.000 --> 00:42:38.000
heartRateの場合、1分あたりの拍数が欲しいので、カウントHKUnitを1分HKUnitで割った値を使用します。

00:42:38.000 --> 00:42:44.000
1分あたりの拍数に対して、heartRateをmostRrecentQuantityのdoubleValueとして割り当てます。

00:42:44.000 --> 00:42:53.000
averageHeartRateを統計として割り当てます。平均1分あたりのビートのaverageQuantityのdoubleValue。

00:42:53.000 --> 00:42:59.000
activeEnergyBurned quantityTypeには、キロカロリーエネルギーユニットを使用します。

00:42:59.000 --> 00:43:08.000
energyUnitのsumQuantityのdoubleValueとしてactiveEnergyを割り当てます。

00:43:08.000 --> 00:43:14.000
ウォーキング、ランニング、サイクリング距離については、mmeterUnitのsumQuantityのdoubleValueを取得します。

00:43:14.000 --> 00:43:19.000
それでは、MetricsViewにWorkoutManagerのメトリック値を使ってもらいましょう。

00:43:19.000 --> 00:43:25.000
MetricsViewを選択します。

00:43:25.000 --> 00:43:32.000
workoutManagerを環境変数として追加します。

00:43:32.000 --> 00:43:56.000
WorkoutManagerのメトリック値を使用するようにビューを更新しましょう。

00:43:56.000 --> 00:44:04.000
ElapsedTimeViewは、workoutManagerのビルダーのelapsedTimeを使用します。

00:44:04.000 --> 00:44:14.000
activeEnergyテキストビューの測定は、workoutManagerのactiveEnergyを使用します。

00:44:14.000 --> 00:44:22.000
heartRateテキストビューは、workoutManagerのheartRateを使用します。

00:44:22.000 --> 00:44:31.000
距離テキストビューの測定は、workoutManagerの距離を使用します。

00:44:31.000 --> 00:44:38.000
ビルダーの経過時間変数は公開されていないため、ビルダーの経過時間が更新されると、現在ビューは更新されません。

00:44:38.000 --> 00:44:46.000
私たちができることは、VStackをTimelineViewでラップすることです。

00:44:46.000 --> 00:44:48.000
タイムラインビューは今年新しくです。

00:44:48.000 --> 00:44:52.000
TimelineViewは、スケジュールに沿って時間の経過とともに更新されます。

00:44:52.000 --> 00:44:56.000
watchOSアプリは、Always On状態をサポートするようになりました。

00:44:56.000 --> 00:45:00.000
TimelineViewsは、Always Onコンテキストの変更を認識させます。

00:45:00.000 --> 00:45:08.000
詳細については、「watchOS 8の新機能」と「SwiftUIの新機能」セッションをチェックしてください。

00:45:08.000 --> 00:45:13.000
アプリはアクティブ状態または常時オン状態のいずれかになります。

00:45:13.000 --> 00:45:19.000
アクティブなワークアウトセッションを持つアプリは、せいぜい1秒に1回、Always On状態で更新できます。

00:45:19.000 --> 00:45:25.000
これは、MetricsViewがAlways On状態でサブ秒を非表示にする必要があることを意味します。

00:45:25.000 --> 00:45:33.000
ビューを簡素化するためにページインジケータコントロールを非表示にするなど、Always On状態に関するその他の設計上の考慮事項を行う必要があります。

00:45:33.000 --> 00:45:43.000
TimelineViewには、Always Onコンテキストによって決定されるTimelineScheduleModeに基づいて間隔を変更するカスタムTimelineScheduleが必要です。

00:45:43.000 --> 00:45:58.000
カスタムのタイムラインスケジュールを作成しましょう。

00:45:58.000 --> 00:46:02.000
MetricsTimelineScheduleには、スケジュールを開始するタイミングの開始日があります。

00:46:02.000 --> 00:46:09.000
その初期化子はstartDateを取ります。

00:46:09.000 --> 00:46:14.000
MetricsTimelineScheduleは、PeriodicTimelineScheduleエントリを生成するエントリ関数を実装しています。

00:46:14.000 --> 00:46:19.000
この関数は、startDateを使用してPeriodicTimelineScheduleを作成します。

00:46:19.000 --> 00:46:22.000
間隔はTimelineScheduleModeによって決定されます。

00:46:22.000 --> 00:46:28.000
TimelineScheduleModeがlowFrequencyの場合、TimelineSchedule間隔は1秒です。

00:46:28.000 --> 00:46:33.000
TimelineScheduleModeが正常な場合、間隔は毎秒30回です。

00:46:33.000 --> 00:46:47.000
VStackをTimelineViewでラップしましょう。

00:46:47.000 --> 00:46:55.000
TimelineViewは、ビルダーのstartDateを使用して、MetricsTimelineScheduleを使用します。

00:46:55.000 --> 00:47:01.000
ElapsedTimeViewのshowSubsecondsは、TimelineViewのcontext.cadenceによって決定されます。

00:47:01.000 --> 00:47:04.000
ケイデンスがライブの場合、サブ秒が表示されます。

00:47:04.000 --> 00:47:08.000
それ以外の場合、サブ秒はAlways On状態で非表示になります。

00:47:08.000 --> 00:47:12.000
アプリケーションを実行して、ワークアウト中に更新されるメトリクスを見てみましょう。

00:47:12.000 --> 00:47:16.000
[停止]をクリックして、現在の実行を停止します。

00:47:16.000 --> 00:47:22.000
[実行]をクリックします。

00:47:22.000 --> 00:47:26.000
ランニングワークアウトをタップします。

00:47:26.000 --> 00:47:29.000
経過時間が増加していることに注意してください。 

00:47:29.000 --> 00:47:34.000
watchOSシミュレーターは、ライブワークアウトサンプルの収集を自動的にシミュレートします。

00:47:34.000 --> 00:47:36.000
カロリーが蓄積されています。

00:47:36.000 --> 00:47:37.000
心拍数が更新されています。

00:47:37.000 --> 00:47:40.000
距離が溜まっています。

00:47:40.000 --> 00:47:46.000
シミュレーターのロックボタンをクリックして、常にオンの状態を試してみましょう。

00:47:46.000 --> 00:47:52.000
サブ秒が非表示になり、メトリクスは1秒間に1回しか更新されません。

00:47:52.000 --> 00:47:55.000
ロック解除ボタンをクリックしてアクティブな状態に戻ります。

00:47:55.000 --> 00:48:00.000
左にスワイプしてワークアウトを終了します。

00:48:00.000 --> 00:48:08.000
SummaryViewにはまだ実際のHKWorkoutの値が必要です。

00:48:08.000 --> 00:48:10.000
今これをやりましょう。

00:48:10.000 --> 00:48:15.000
まず、SummaryViewで使用するHKWorkoutをWorkoutManagerに追加しましょう。

00:48:15.000 --> 00:48:17.000
WorkoutManagerを選択します。

00:48:17.000 --> 00:48:30.000
HKWorkout公開変数を追加します。

00:48:30.000 --> 00:48:48.000
ビルダーがワークアウトの保存を終了したら、ビルダーのfinishWorkout機能が完了したら、ワークアウトをWorkoutManagerに割り当てます。

00:48:48.000 --> 00:48:52.000
この割り当ては、UI更新のメインキューで行います。

00:48:52.000 --> 00:48:56.000
SummaryViewが却下されたら、モデルをリセットする必要があります。

00:48:56.000 --> 00:49:09.000
これを行うresetWorkout関数を作成しましょう。

00:49:09.000 --> 00:49:15.000
resetWorkout関数は、すべてのモデル変数を初期状態にリセットします。

00:49:15.000 --> 00:49:18.000
要約が却下されたら、resetWorkoutを呼びましょう。

00:49:18.000 --> 00:49:32.000
これは、ShowingSummaryViewのdidSetで行われます。

00:49:32.000 --> 00:49:39.000
ワークアウトが終了したら、ワークアウトが保存されている間に、サマリービューを表示する前に、進行状況ビューを表示しましょう。

00:49:39.000 --> 00:49:42.000
サマリービューに行きましょう。

00:49:42.000 --> 00:49:46.000
SummaryViewをクリックします。

00:49:46.000 --> 00:49:56.000
まず、outworkManager EnvironmentObjectをSummaryViewに追加します。

00:49:56.000 --> 00:50:16.000
ビルダーがワークアウトの保存を終了したら、workoutManagerがHKWorkoutを割り当てるまで、ProgressViewを表示したい。

00:50:16.000 --> 00:50:30.000
workoutManagerのワークアウトがゼロの場合、「ワークアウトの保存」というテキストでProgressViewを表示し、ナビゲーションバーを非表示にします。

00:50:30.000 --> 00:50:35.000
また、WorkoutマネージャーのHKHealthStoreを使用するようにActivityRingsViewを更新しました。

00:50:35.000 --> 00:50:39.000
アプリごとに1つのHKHealthStoreのみが必要です。

00:50:39.000 --> 00:50:58.000
HKWorkoutの値を使用するようにSummaryMetricViewsを更新しましょう。

00:50:58.000 --> 00:51:06.000
合計時間メトリックビューは、ワークアウトの期間を使用します。

00:51:06.000 --> 00:51:14.000
totalDistanceメトリックビューは、ワークアウトの総距離を使用します。

00:51:14.000 --> 00:51:23.000
Total Energyメトリックビューは、ワークアウトのtotalEnergyBurnedを使用します。

00:51:23.000 --> 00:51:27.000
平均心拍数メトリックビューは、outworkManagerの平均HeartRateを使用します。

00:51:27.000 --> 00:51:34.000
後で平均心拍数を保存したい場合は、ワークアウトを保存する前にビルダーにメタデータとして追加できます。

00:51:34.000 --> 00:51:38.000
Always On状態に反応するようにSessionPagingViewを更新しましょう。

00:51:38.000 --> 00:51:43.000
SessionPagingViewを選択します。

00:51:43.000 --> 00:51:51.000
isLuminanceReduced Environment変数を追加します。

00:51:51.000 --> 00:52:05.000
Always On状態では、TabViewのページインジケーターを非表示にし、MetricsViewが表示されるようにします。

00:52:05.000 --> 00:52:13.000
isLuminanceReducedに基づいて、tabViewStyleのindexDisplayModeを決してまたは自動に設定しました。

00:52:13.000 --> 00:52:20.000
isLuminanceReducedが変更されたら、displayMetricsView関数を呼び出すと、MetricsViewが表示されます。

00:52:20.000 --> 00:52:23.000
シミュレーターでアプリを実行して試してみましょう。

00:52:23.000 --> 00:52:26.000
停止をクリックして最後の実行を停止します。

00:52:26.000 --> 00:52:34.000
[実行]をクリックします。

00:52:34.000 --> 00:52:38.000
ランニングワークアウトを選択します。

00:52:38.000 --> 00:52:41.000
メトリクスがビルダーからライブで更新されていることに注意してください。

00:52:41.000 --> 00:52:45.000
左にスワイプします。一時停止をタップします。

00:52:45.000 --> 00:52:49.000
ワークアウトが一時停止されているため、メトリクスの更新が停止したことに注意してください。

00:52:49.000 --> 00:52:54.000
左にスワイプします。[再開] をタップします。

00:52:54.000 --> 00:52:57.000
メトリクスは更新を再開します。

00:52:57.000 --> 00:53:00.000
右にスワイプして、NowPlayingViewを参照してください。

00:53:00.000 --> 00:53:03.000
左にスワイプします。

00:53:03.000 --> 00:53:07.000
ロックをクリックして、常にオン状態をトリガーします。

00:53:07.000 --> 00:53:11.000
サブ秒が非表示になり、ページコントロールインジケーターが非表示になっていることに注意してください。

00:53:11.000 --> 00:53:16.000
ロック解除をクリックして、アクティブな状態を再開します。

00:53:16.000 --> 00:53:20.000
左にスワイプして、終了をタップします。

00:53:20.000 --> 00:53:23.000
ワークアウトは節約します。

00:53:23.000 --> 00:53:25.000
要約が表示されます。

00:53:25.000 --> 00:53:27.000
下にスクロールして、各メトリックを表示します。

00:53:27.000 --> 00:53:37.000
アクティビティリングは、エネルギー量、運動時間、待機時間に基づいて入力されます。

00:53:37.000 --> 00:53:38.000
「完了」をタップします。

00:53:38.000 --> 00:53:48.000
私たちはスタートビューに戻り、次のトレーニングの準備ができています。

00:53:48.000 --> 00:53:58.000
SwiftUIを使用して、Always On状態をサポートするHealthKitと統合された完全に機能するワークアウトアプリを実装するのがいかに簡単かを見ました。

00:53:58.000 --> 00:54:01.000
あなたが次に構築する素晴らしいワークアウトアプリを見るのが待ちきれません!

00:54:01.000 --> 23:59:59.000
♪

