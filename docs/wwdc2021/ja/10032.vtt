WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:18.000
ミーガン・ガードナー:こんにちは!私の名前は、WebKitチームのエンジニアであるミーガン・ガードナーです。今日は、WKWebViewの追加を一緒に検討します。

00:00:18.000 --> 00:00:21.000
旅を始める前に、私たちが何を探求しているかを確認しましょう。

00:00:21.000 --> 00:00:26.000
WKWebViewとは何か、なぜアプリで使いたいのかを教えてあげましょう。

00:00:26.000 --> 00:00:33.000
ユーザーがURLをクリックすると、Webページが読み込まれ、そのコンテンツと対話できることを期待しています。

00:00:33.000 --> 00:00:41.000
URLをロードし、コンテンツをレンダリングし、そのコンテンツでJavaScriptを実行することは非常に複雑な作業です!

00:00:41.000 --> 00:00:46.000
そのため、その作業のほとんどをWKWebView内にカプセル化しました。

00:00:46.000 --> 00:00:48.000
そして、あなたのためだけではありません!

00:00:48.000 --> 00:00:53.000
WKWebViewは、iOSとMacOSのすべてのWebコンテンツを表示するために使用されるビューです。

00:00:53.000 --> 00:00:55.000
これにはSafariが含まれます。

00:00:55.000 --> 00:01:00.000
したがって、アプリにWebページを表示する必要がある場合は、WKWebViewを追加する必要があると考えるかもしれません。

00:01:00.000 --> 00:01:01.000
でも待って！

00:01:01.000 --> 00:01:04.000
あなたはそのコンテンツで何をしているのですか?

00:01:04.000 --> 00:01:13.000
Webページを表示する方法が必要だが、そのコンテンツとのカスタマイズされたインタラクションがあまり必要ない場合は、おそらくSFSafariViewControllerが必要です。

00:01:13.000 --> 00:01:17.000
これはあなたのアプリ内の小さなサファリのようなものです。

00:01:17.000 --> 00:01:22.000
これらのビューの1つを使用するのは信じられないほど簡単ですが、トレードオフがあります。

00:01:22.000 --> 00:01:25.000
ウェブコンテンツとやり取りするためにできることはほとんどありません。

00:01:25.000 --> 00:01:31.000
しかし、今年はSafariのビューコントローラーでもう少し簡単にしました。

00:01:31.000 --> 00:01:47.000
ユーザーは常にSafariビューコントローラーのコンテンツの共有シートを介してアプリ拡張機能を実行できましたが、アプリ専用に構築された特別な機能については、ユーザーが発見するのが少し面倒で困難でした。

00:01:47.000 --> 00:01:57.000
そのため、iOS 15では、アプリ拡張機能の1つをSafariビューコントローラーのカスタマイズされたボタンにするための新しいAPIを追加しました。

00:01:57.000 --> 00:02:12.000
このボタンをアプリの共有拡張機能の1つにマッピングすることができ、実行される拡張機能を最もよく表すそのボタンの画像を設定することもできます。これにより、ユーザーはページでJavaScriptを実行するなど、ツールバーから直接アプリ拡張機能を実行できます。

00:02:12.000 --> 00:02:15.000
しかし、これはまだ非常に限られた量の相互作用です。

00:02:15.000 --> 00:02:18.000
そこでWKWebViewの出番です。

00:02:18.000 --> 00:02:23.000
WKWebViewでは、表示されているコンテンツで多くのことを行うことができます。

00:02:23.000 --> 00:02:28.000
コンテンツをロード、操作、操作するための多くのAPIがあります。

00:02:28.000 --> 00:02:36.000
したがって、Webコンテンツを表示する必要があり、それと複雑なやり取りが必要な場合は、WKWebViewがあなたです。

00:02:36.000 --> 00:02:43.000
また、WKWebViewはWebコンテンツとのやり取りに関するものであるため、私たちは常にそれをより簡単にするよう努めています。

00:02:43.000 --> 00:02:51.000
Webビューのコンテンツにアクセスして操作するのに役立つ簡単なAPIを採用することで、より多くの作業負荷を引き受けます。

00:02:51.000 --> 00:03:00.000
今年は一生懸命働き、WKWebViewに新しい便利な機能を追加しました。今日は、それらのいくつかについてお話ししたいと思います。

00:03:00.000 --> 00:03:09.000
まず、JavaScriptを注入することなく、Webコンテンツと対話および操作できるいくつかのAPIについて説明します。

00:03:09.000 --> 00:03:22.000
次に、以前はSafariでしか利用できなかった機能にアクセスできるいくつかのAPIをカバーし、アプリでより深いブラウザのような体験を可能にします。

00:03:22.000 --> 00:03:32.000
JavaScriptの使用をオプトアウトできるこれらのAPIを検討する前に、JavaScriptを避けたい理由を確認しましょう。

00:03:32.000 --> 00:03:35.000
私たちはJavaScriptが大好きです!

00:03:35.000 --> 00:03:36.000
それはウェブの言語です!

00:03:36.000 --> 00:03:40.000
しかし、JavaScriptの注入は複雑です。

00:03:40.000 --> 00:03:47.000
インジェクションを介して横断する必要があるネイティブとウェブの間のインターフェースは、ナビゲートするのが難しく、面倒な場合があります。

00:03:47.000 --> 00:03:55.000
また、複数のWebソースからのコンテンツを扱う場合、意図しない副作用が簡単に生じたり、管理が困難になったりする可能性があります。

00:03:55.000 --> 00:03:59.000
できればその頭痛を避けるのが最善です。

00:03:59.000 --> 00:04:04.000
注入されたJavaScriptと互換性のない機能もあります。

00:04:04.000 --> 00:04:08.000
昨年、アプリバインドドメインと呼ばれる新機能を導入しました。

00:04:08.000 --> 00:04:14.000
これにより、アプリで深いインタラクションを許可するドメインを指定できます。

00:04:14.000 --> 00:04:19.000
アプリにバインドされたドメインは、ユーザーのアプリのセキュリティとプライバシーを高めるのに役立ちます。

00:04:19.000 --> 00:04:23.000
しかし、この利点を得るために、ウェブビューにJavaScriptを注入することはできません。

00:04:23.000 --> 00:04:26.000
そうすると、その機能が無効になります。

00:04:26.000 --> 00:04:35.000
Apple Payなど、JavaScriptを注入することを選択した場合、ウェブビューではアクセスできない、他の価値の高い機能もあります。

00:04:35.000 --> 00:04:44.000
そのため、JavaScriptの注入に対処することなく、Webビューのコンテンツを簡単に操作できるように、いくつかの新しいAPIを追加しました。

00:04:44.000 --> 00:04:47.000
これらの新しいAPIは3つのカテゴリーに分類されます。

00:04:47.000 --> 00:04:55.000
まず、ウェブサイトのページのテーマカラーと関連するカラーにアクセスする簡単な方法があります。

00:04:55.000 --> 00:05:03.000
次に、テキストインタラクションを無効にする方法と、ウェブビューでメディア再生を制御できるようにする方法。

00:05:03.000 --> 00:05:06.000
まず、テーマカラーを探りましょう。

00:05:06.000 --> 00:05:18.000
昨年、ミッションクリティカルな内部アプリの1つであるBrowser Petsについてあなたに話したことを覚えているかもしれません。これは、Brady EidsonがSafariのウェブサイトでWebKittensとPupsからのフィードを組み合わせるために書いたものです。

00:05:18.000 --> 00:05:29.000
さて、利用可能なすべての新しいAPIで、ブレイディと私は、私たちの多くの士気を高める猫や犬を最大限に活用するために、この重要なツールを更新することにしました。

00:05:29.000 --> 00:05:40.000
WebKittensウェブサイトのエンジニアの一人は、季節によって変化するダイナミックなテーマカラーを追加し、私たちの重要なペットの写真に少しセンスを加えることを決定しました。

00:05:40.000 --> 00:05:45.000
これもアプリに反映してほしかったが、コードを複製したくなかった。

00:05:45.000 --> 00:05:51.000
幸いなことに、私たちはこれを非常に簡単にする新しいAPIを持っています。

00:05:51.000 --> 00:06:04.000
ご覧のとおり、この新しいAPIを使用して、ヘッダービューの色をウェブサイトのテーマカラーに設定できるため、仲間のエンジニアがWebKittensのウェブサイトに入れた作業を活用することができます。

00:06:04.000 --> 00:06:12.000
ウェブサイトのエンジニアは、将来的に新しいテーマを追加することさえでき、私の側で追加の作業なしでアプリに反映されます。

00:06:12.000 --> 00:06:22.000
themeColorが設定されていない場合、将来のシードでは、代替の計算された背景色がunderPageBackgroundColorとして公開され、同様に使用できます。

00:06:22.000 --> 00:06:28.000
Safariがこれを使用して、アプリとWebページをブレンドする外観を作成していることに気づいたかもしれません。

00:06:28.000 --> 00:06:38.000
この値に書き留めて、Webコンテンツの終わりを過ぎてスクロールするときに背景を埋めるために使用される色をカスタマイズすることもできます。

00:06:38.000 --> 00:06:41.000
次に、テキストのインタラクションについて話しましょう。

00:06:41.000 --> 00:06:53.000
最近、SafariウェブサイトのWebKittensとPupsにビデオを追加し、Browser Petsユーザーは、これらのビデオを再生しようとすると誤ってテキスト選択コントロールをアクティブにしたと不平を言っています。

00:06:53.000 --> 00:06:55.000
まあ、私たちはそれを望んでいません!

00:06:55.000 --> 00:07:01.000
幸いなことに、ウェブビューでのテキストインタラクションをすばやく簡単に無効にする新しいAPIがあります。

00:07:01.000 --> 00:07:02.000
簡単です！

00:07:02.000 --> 00:07:10.000
Webビューを設定するときは、Webビューの作成に使用する環境設定でtextInteractionEnabledをfalseに設定してください。

00:07:10.000 --> 00:07:14.000
これにより、そのWebビュー内のすべてのテキストインタラクションがオフになります。

00:07:14.000 --> 00:07:20.000
これで、テキスト選択コントロールがメディアコントロールの邪魔にならず、それらのキティビデオを妨害されずに再生することができます。

00:07:20.000 --> 00:07:26.000
メディアコントロールといえば、メディア再生コントロールのためのいくつかの素晴らしいアップデートがあります!

00:07:26.000 --> 00:07:34.000
以前は、ウェブビューで再生されていたメディアを一時停止または一時停止したい場合は、JavaScriptを注入する必要がありました。

00:07:34.000 --> 00:07:39.000
また、DOMを制御できるようにするには、DOM内の特定の要素を見つける必要があります。

00:07:39.000 --> 00:07:46.000
しかし今、私たちはあなたのウェブビューでメディアの状態を簡単に制御できるシンプルなAPIを持っています。

00:07:46.000 --> 00:08:04.000
これで、すべてのメディアを簡単に一時停止したり、すべてのメディアウィンドウを閉じたり、ページ上のメディアの状態を取得したり、メディアを一時停止したりできます。これにより、setAllMediaPlaybackSuspendedがfalseに設定されるまで、メディアが一時停止し、ユーザーコントロールを無効にします。

00:08:04.000 --> 00:08:16.000
これらの新しいAPIと使いやすさに慣れるために、Bradyに渡して、Browser Petsでこれらの新しいメディアコントロールAPIをどのように利用したかをお見せします！

00:08:16.000 --> 00:08:18.000
ブレイディ・エイドソン:ありがとう、ミーガン。

00:08:18.000 --> 00:08:22.000
こんにちは、私はWebKitチームのエンジニア、ブレイディ・エイドソンです。

00:08:22.000 --> 00:08:34.000
Meganがほのめかしたように、SafariウェブサイトのWebKittensとPupsの両方が最近、静止画だけでなくビデオを投稿する機能を追加しました。つまり、ブラウザペットアプリにもビデオがあります。

00:08:34.000 --> 00:08:37.000
これが今のアプリの外観です。

00:08:37.000 --> 00:08:42.000
これらのボタンは、私が追加しているさまざまな機能のためのネイティブUIボタンです。

00:08:42.000 --> 00:08:52.000
ページの上部にあるバナーはWebコンテンツであり、Webサイトはテーマカラーを設定しており、Meganが言及したWebビューthemeColorプロパティを使用して採用しました。

00:08:52.000 --> 00:08:57.000
ビデオが追加されると、一部の人々はビデオを自動再生しないという好みを表明しました。

00:08:57.000 --> 00:09:00.000
この一時停止ボタンは、それらを収容するためのものです。

00:09:00.000 --> 00:09:04.000
それが何をするか見てみましょう。

00:09:04.000 --> 00:09:07.000
犬ではなく、子猫のビデオだけが一時停止しました。

00:09:07.000 --> 00:09:10.000
そして、プレイを押すと、何も起こりません。

00:09:10.000 --> 00:09:14.000
コードを見てみましょう。-コードを見てみましょう。

00:09:14.000 --> 00:09:21.000
このJavaScriptは、以前にこれらのビデオを一時停止しようとする唯一の選択肢であり、問題がありました。

00:09:21.000 --> 00:09:27.000
私は2つの異なるウェブサイトのウェブページの構造を理解しなければならず、その構造は絶えず変化しています。

00:09:27.000 --> 00:09:34.000
たとえば、Pups WebサイトのこのJavaScriptは以前は機能していましたが、今は機能しません。

00:09:34.000 --> 00:09:37.000
幸いなことに、今はもっと良い方法があります。

00:09:37.000 --> 00:09:45.000
まず、ウェブビューでpauseAllMediaPlaybackの呼び出しを採用しました。

00:09:45.000 --> 00:09:52.000
これは、ページ上のすべてのメディア要素でJavaScript関数の一時停止を呼び出すのと同じです。

00:09:52.000 --> 00:09:54.000
そして、それはうまく機能します。

00:09:54.000 --> 00:09:58.000
しかし、ページを更新したときに何が起こるかに注目してください。

00:09:58.000 --> 00:10:01.000
ビデオは再び再生されます。

00:10:01.000 --> 00:10:02.000
新しいページの読み込み。

00:10:02.000 --> 00:10:05.000
これらのビデオは一時停止されたことがありません。

00:10:05.000 --> 00:10:13.000
もっとスティッキーなものが欲しいなら、setAllMediaPlaybackSuspendedを使います。

00:10:13.000 --> 00:10:17.000
今それを試してみましょう。

00:10:17.000 --> 00:10:23.000
ビデオが一時停止され、ページを更新した後でも一時停止されたままであることに注意してください。

00:10:23.000 --> 00:10:30.000
これは、この設定はウェブビュー自体のプロパティであり、その中のコンテンツのプロパティではないためです。

00:10:30.000 --> 00:10:33.000
また、私は再開することができます。

00:10:33.000 --> 00:10:39.000
これらの新しいAPIのおかげで、アプリにより良いメディア体験を追加する柔軟性ができるようになりました。

00:10:39.000 --> 00:10:40.000
戻るよ、ミーガン。

00:10:40.000 --> 00:10:41.000
ミーガン：ありがとう、ブレイディ！

00:10:41.000 --> 00:10:46.000
それらのペットは素晴らしく見え、新しいメディアコントロールでさらに良く見えます。

00:10:46.000 --> 00:10:52.000
したがって、これらは、JavaScriptの使用を回避できるWKWebViewの新しいAPIです。

00:10:52.000 --> 00:10:58.000
アプリの作成やウェブコンテンツとのやり取りが以前よりもさらに簡単になることを願っています。

00:10:58.000 --> 00:11:07.000
次に、以前はSafariでしか利用できなかった機能にアクセスできるいくつかのブラウザレベルのAPIを確認します。

00:11:07.000 --> 00:11:10.000
カバーすべきAPIには3つの分野があります。

00:11:10.000 --> 00:11:14.000
まず、シンプルなHTTPSオーバーライドフラグです。

00:11:14.000 --> 00:11:23.000
次はメディアキャプチャ、またはウェブで知られているように、getUserMediaです。これは現在、ウェブビューで完全に利用可能です。

00:11:23.000 --> 00:11:32.000
そして最後に、WKWebViewに関連して機能するダウンロードを管理する新しいAPIは、アプリでのダウンロードを許可および管理します。

00:11:32.000 --> 00:11:35.000
では、HTTPSから始めましょう。

00:11:35.000 --> 00:11:46.000
ウェブ上のセキュリティとプライバシーは常に重要であり、私たちは常にあなたとあなたのユーザーにとってセキュリティとプライバシーを容易にする新しい方法を探しています。

00:11:46.000 --> 00:11:55.000
これはウェブを閲覧するためのより安全で安全な方法であるため、HTTPSにトラフィックを移動するための幅広い業界のプッシュがありました。

00:11:55.000 --> 00:12:04.000
多くのトップサイトはHTTPSをサポートしており、HTTPからHTTPSへの接続を自動的にアップグレードするサイトもあります。

00:12:04.000 --> 00:12:15.000
iOS 15とmacOS Monterey以降、HTTPSをサポートしていることをわかっているサイトにHTTPリクエストを受け付け、アップグレードしています。

00:12:15.000 --> 00:12:20.000
この追加のセキュリティを得るために、あなたは全く何もする必要はありません!

00:12:20.000 --> 00:12:28.000
しかし、ローカルデバッグのためにオフにする必要がある場合は、設定時に簡単に設定できるフラグがあります。

00:12:28.000 --> 00:12:34.000
うまくいけば、あなたはこれを必要としないでしょうが、あなたがそうするなら、それはここにあり、それはおそらく本番コードで行われるべきではありません。

00:12:34.000 --> 00:12:38.000
次に、メディアキャプチャで何が起こっているのかを見直しましょう。

00:12:38.000 --> 00:12:48.000
iOS 14.3では、WKWebViewのgetUserMediaを有効にしました。これにより、WebRTC機能がアプリ内で機能するようにしました。

00:12:48.000 --> 00:12:51.000
今、私たちはそれをさらに良くしました!

00:12:51.000 --> 00:13:02.000
カスタムスキームハンドラからWebコンテンツをロードすると、ユーザーリクエストプロンプトは、WebサイトのURLからのリクエストを表示するのではなく、アプリをリクエストの元として表示します。

00:13:02.000 --> 00:13:06.000
これにより、ユーザーにとってより直感的でシームレスな体験が得られるはずです。

00:13:06.000 --> 00:13:15.000
プロンプトをURLからのリクエストとして残したい場合は、カスタムスキームハンドラなしでロードするだけで、プロンプトが今日のまま表示されます。

00:13:15.000 --> 00:13:24.000
また、ウェブコンテンツを扱う際に、カメラとマイクの許可をユーザーに要求するタイミングと方法を決定できる新しいAPIもあります。

00:13:24.000 --> 00:13:35.000
通常の資格とプロンプトを使用してカメラとマイクのユーザー権限を取得したら、権限プロンプトを表示するかどうかを決定できます。

00:13:35.000 --> 00:13:44.000
これを使用して、独自のプロンプトを実装したり、制御して信頼するWebコンテンツに対するユーザーの以前の応答を記憶したりできます。

00:13:44.000 --> 00:13:55.000
WKWebViewでUIデリゲートを作成して設定することで、ユーザーにカメラまたはマイクを使用する許可を求めるタイミングを決定できるようになりました。

00:13:55.000 --> 00:14:01.000
このデリゲートを実装しない場合、ユーザーは今日と同じようにプロンプトを引き続き取得します。

00:14:01.000 --> 00:14:10.000
しかし、ウェブサイトとの以前のインタラクションからユーザー設定を保存したためにプロンプトをスキップしたい場合は、このデリゲートがそれを可能にします。

00:14:10.000 --> 00:14:13.000
ブラウザペットのためにこれらの新しいAPIをどのように活用しましたか?

00:14:13.000 --> 00:14:21.000
さて、私たちのコントロールを超えた状況のために、チームは公園での毎月の子犬のミートアップをキャンセルしなければなりませんでした。

00:14:21.000 --> 00:14:32.000
私たちの親愛なる犬をお互いに共有する必要性を満たすために、ブレイディと私はブラウザペットに仮想ドッグパークを追加することにしました。そうすれば、私たちはまだ私たちの社会的な犬の良さを進行させることができました。

00:14:32.000 --> 00:14:43.000
これには、getUserMediaを使用してWebRTC機能を設定し、お互いや犬の友達をリアルタイムで見てチャットできるようにすることが含まれます!

00:14:43.000 --> 00:14:53.000
UIデリゲートを設定するとき、サーバーからの要求は、ユーザーがすでにアプリにカメラとマイクを使用する許可を与えた場合、ユーザーが許可を与えるものであることを知っています。

00:14:53.000 --> 00:14:57.000
そのため、WKWebViewでこのデリゲートを設定することで、そのプロンプトをスキップできます。

00:14:57.000 --> 00:14:59.000
しかし、私にできるのはそれだけではありません!

00:14:59.000 --> 00:15:10.000
このユーザーメディアを開始および停止するためにJavaScriptを実行する代わりに、JavaScriptなしでメディアコントロールと対話する方法と同様に、状態を取得して設定することができます。

00:15:10.000 --> 00:15:15.000
これはカメラでもマイクでも機能します。

00:15:15.000 --> 00:15:26.000
これらの新しいAPIと使いやすさにさらに精通するために、Bradyに返します。Bradyは、Virtual dog parkをBrowser Petsに追加する方法を紹介します！

00:15:26.000 --> 00:15:28.000
ブレイディ:ありがとう、ミーガン。

00:15:28.000 --> 00:15:33.000
ミーガンが述べたように、私たちが住んでいる時代のために、私たちは仮想ドッグパークを稼働させなければなりませんでした。

00:15:33.000 --> 00:15:36.000
ブラウザペットアプリをもう一度見てみましょう。

00:15:36.000 --> 00:15:39.000
通話ボタンに気付いた人もいるかもしれません。

00:15:39.000 --> 00:15:40.000
今すぐそれをタップしましょう。

00:15:40.000 --> 00:15:45.000
私たちは、友人の家でホストされているバーチャルドッグパークにすぐに接続されます。

00:15:45.000 --> 00:15:49.000
コネクトをタップして楽しみに参加しましょう。

00:15:49.000 --> 00:15:56.000
さて、このアプリでカメラを使用したのは初めてなので、ブラウザペットに関するシステム全体のプロンプトが表示されます。

00:15:56.000 --> 00:15:59.000
絶対に許可を選択しましょう。

00:15:59.000 --> 00:16:05.000
そして、現在表示しているウェブサイトに固有の2番目のプロンプトは、今日のシステムのデフォルトの動作です。

00:16:05.000 --> 00:16:07.000
それも許可しましょう。

00:16:07.000 --> 00:16:11.000
そして、私たちはそこにいます。getUserMediaが動作しています。

00:16:11.000 --> 00:16:23.000
しかし、Meganが述べたように、WKUIDelegateに変更を加えることができるかどうか、経験をさらに良くしてみましょう。

00:16:23.000 --> 00:16:30.000
私たちの代理人では、仮想ドッグパークのコンテンツを提供するホストを確認し、メディアキャプチャアクセスを許可します。

00:16:30.000 --> 00:16:36.000
それがブラウザペットをどのように変えるか見てみましょう。

00:16:36.000 --> 00:16:38.000
すごい。プロンプトはありません。

00:16:38.000 --> 00:16:48.000
また、デリゲートを使用する方法は、将来のコンテンツが他のホストから来て、カメラにアクセスしようとする場合、ユーザーを安全かつプライベートに保ちます。

00:16:48.000 --> 00:16:51.000
ビデオチャットに入ったので、ミュートボタンを試してみましょう。

00:16:51.000 --> 00:16:54.000
ご覧のとおり、私のカメラフィードが落ちました。

00:16:54.000 --> 00:17:04.000
また、ステータスバーの記録インジケーターが消えてミュートが解除されていることに気付くでしょう。カメラのフィードを元に戻すと、記録インジケーターが戻ってきます。

00:17:04.000 --> 00:17:07.000
これは簡単でした。JavaScriptは必要ありません。

00:17:07.000 --> 00:17:14.000
私がしなければならなかったのは、Meganが言及したように、それをwebView.setCameraCaptureStateに接続することだけでした。

00:17:14.000 --> 00:17:21.000
これは、これらのAPIを使用して、WKWebViewアプリでメディアキャプチャエクスペリエンスを簡単にカスタマイズする方法の単なる味でした。

00:17:21.000 --> 00:17:23.000
戻るよ、ミーガン。

00:17:23.000 --> 00:17:24.000
ミーガン：ありがとう、ブレイディ！

00:17:24.000 --> 00:17:30.000
私たちはすべての素晴らしいペットと会い続けることができてとてもうれしいです。

00:17:30.000 --> 00:17:33.000
最後に、ダウンロードについて話しましょう。

00:17:33.000 --> 00:17:44.000
ブラウザペットユーザーは、これらのかわいい動物の写真を友人や家族と共有したいと言っていますが、Appleの従業員だけがブラウザペットアプリを使用することを許可されています。

00:17:44.000 --> 00:17:54.000
幸いなことに、ウェブビューからのダウンロードを許可および管理できるAPIを追加し、ファイルの共有をこれまで以上に簡単にしました!

00:17:54.000 --> 00:17:58.000
ウェブからダウンロードを開始するには3つの方法があります。

00:17:58.000 --> 00:18:06.000
ウェブコンテンツはダウンロードを開始し、サーバーはダウンロードを開始し、アプリはダウンロードを開始できます。

00:18:06.000 --> 00:18:11.000
ウェブコンテンツは、これに似たJavaScriptでダウンロードを開始します。

00:18:11.000 --> 00:18:22.000
このJavaScriptが実行されると、ダウンロードナビゲーションアクションが開始され、shouldPerformDownloadがtrueに設定されているナビゲーションデリゲートが呼び合います。

00:18:22.000 --> 00:18:30.000
この値を使用して、他のロジックとともに、ダウンロードを許可するかどうかを判断する必要があります。

00:18:30.000 --> 00:18:39.000
サーバーは、WebビューでloadRequestを呼び出した後、このようにHTTPでダウンロードを開始できます。

00:18:39.000 --> 00:18:56.000
その場合、WKNavigationResponseには「添付ファイル」を含む値を持つContent-Dispositionヘッダーフィールドがあり、その場合は、決定ハンドラからWKNavigationActionPolicyDownloadを返してダウンロードを開始する必要があります。

00:18:56.000 --> 00:19:05.000
最後に、アプリは、このようなNSURLRequestを使用して、現在のページのコンテキストで何かをダウンロードしたいと判断できます。

00:19:05.000 --> 00:19:17.000
どのような方法を使用しても、WKDownloadオブジェクトを取得するときに、バイトをディスクに書き込む場所を伝えるために、そのオブジェクトにデリゲートプロパティを設定する必要があります。

00:19:17.000 --> 00:19:21.000
そうしない場合、ダウンロードは自動的にキャンセルされます。

00:19:21.000 --> 00:19:28.000
ダウンロードに失敗した場合、デリゲートにメソッドを実装すると、ダウンロードを再開するデータが渡されます。

00:19:28.000 --> 00:19:33.000
その後、そのデータを使用して、ウェブビューからダウンロードを再開できます。

00:19:33.000 --> 00:19:42.000
この新しいAPIを使用すると、子猫をファイルにダウンロードし、写真に保存しない簡単な方法を提供できるようになりました。

00:19:42.000 --> 00:19:45.000
だから、これらは私たちのブラウザレベルのAPIです。

00:19:45.000 --> 00:19:54.000
私たちは、彼らがあなたとあなたのユーザーにあなたのアプリで豊かなウェブ体験を持つためのより多くのオプションを提供すると思います。

00:19:54.000 --> 00:19:56.000
うわー、なんて旅だ！

00:19:56.000 --> 00:20:00.000
今日、私たちは一緒に多くのことを探求しました。

00:20:00.000 --> 00:20:10.000
JavaScriptを注入する代わりに使用できるいくつかのAPIについて話し、より強力なブラウザレベルの機能をいくつか取り上げました。

00:20:10.000 --> 00:20:17.000
新しいテーマカラー、テキストインタラクション、メディア再生APIを使用する方がはるかに簡単です。

00:20:17.000 --> 00:20:37.000
また、自動HTTPS接続、getUserMediaプロンプトの簡単で安全な制御、WKDownloadの追加により、アプリでより豊かな体験をより簡単かつ安全にしたので、アプリでダウンロードを簡単に管理できます。

00:20:37.000 --> 00:20:45.000
今年サポートしている新しいWeb APIの詳細については、「高度なWebコンテンツの開発」セッションをご覧ください。

00:20:45.000 --> 00:21:00.000
また、「Webインスペクタの改善を発見」でWebコンテンツをデバッグおよび改善する新しい方法を発見することもできます。アプリやWeb用の素晴らしいWebコンテンツを作成するのに役立つ2つの素晴らしいセッション。

00:21:00.000 --> 00:21:04.000
ウェブはまだ成長しており、そうであるように、私たちも成長します。

00:21:04.000 --> 00:21:09.000
今年実装したAPIの多くは、開発者のフィードバックに基づいています。

00:21:09.000 --> 00:21:15.000
だから、あなたが見たいAPIを持っているなら、私たちはあなたから話を聞きたいです!

00:21:15.000 --> 00:21:23.000
Appleとのフィードバックに加えて、webkit.orgには、Slackワークスペースからメーリングリストまで、複数の連絡方法があります。

00:21:23.000 --> 00:21:30.000
WebKitはオープンソースなので、ファイルのバグだけでなく、WebKitを自分でチェックして構築する方法も学ぶことができます。

00:21:30.000 --> 00:21:34.000
私たちの新しいAPIの探求に参加してくれてありがとう!

00:21:34.000 --> 00:21:38.000
私はあなたがWWDC21の素晴らしい残りを持っていることを願っています!

00:21:38.000 --> 23:59:59.000
♪

