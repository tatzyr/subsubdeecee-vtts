WEBVTT

00:00:02.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:17.000
こんにちは、私の名前はホリーで、継続的インテグレーションテクノロジーチームのマネージャーで、後でチームメイトのジェフ・マクギニスが参加します。

00:00:17.000 --> 00:00:30.000
今日は、あなたのような開発者、Appleプラットフォーム用のアプリやフレームワークを構築している人のために設計された、使いやすい継続的な統合と配信サービスであるXcode Cloudを紹介できることを嬉しく思います。

00:00:30.000 --> 00:00:35.000
このセッションでは、継続的インテグレーションの紹介から始め、Xcode Cloudをご紹介します。

00:00:35.000 --> 00:00:43.000
次に、プロジェクトをセットアップし、コードを変更し、Xcode Cloudを使用してチームと協力する方法を学びます。

00:00:43.000 --> 00:00:45.000
始めましょう。

00:00:45.000 --> 00:00:53.000
継続的インテグレーションまたはCIは、問題が早期に発見され、修正されるように、コードの変更を定期的に統合する慣行です。

00:00:53.000 --> 00:01:00.000
このプラクティスを採用することで、チームは協力して作業しながら、高品質の製品を作成することができます。

00:01:00.000 --> 00:01:07.000
典型的なCIワークフローは、あなたまたはチームメンバーがコード変更をリポジトリにプッシュしたときに実行される一連の自動化されたステップです。

00:01:07.000 --> 00:01:17.000
これらの手順では、ビルド、テストの実行、またはコードの変更がチームの確立された品質レベルを満たしていることを確認するために必要なその他のアクションなどを行うことができます。

00:01:17.000 --> 00:01:25.000
CIを使用すると、変更の統合はリスクが低く、次のリリースは安定していることを安心できます。

00:01:25.000 --> 00:01:31.000
さて、CIがあなたにとってどのように見えるかを考えるために、アプリのライフサイクルを見てみましょう。

00:01:31.000 --> 00:01:35.000
開発者として、複数のソースからのフィードバックで作業している可能性があります。

00:01:35.000 --> 00:01:47.000
Xcodeでバグを修正して機能を作成し、プルリクエストについてチームからコードレビューのフィードバックを受け取り、TestFlightを介して新しいバージョンを配布し、テスターのフィードバックを統合します。

00:01:47.000 --> 00:01:54.000
高品質のアプリやフレームワークを作成するには、コードとフィードバックを生産的に反復するチームの能力が不可欠です。

00:01:54.000 --> 00:01:57.000
そこでXcode Cloudの出番です。

00:01:57.000 --> 00:02:11.000
Xcode Cloudは、Appleの開発者ツール間の点を接続しながら、CIのアイデアに基づいて構築し、プロジェクトを構築、テスト、配布、フィードバックを収集し、迅速に反復するための完全な開発パイプラインを提供します。

00:02:11.000 --> 00:02:17.000
機能のツアーに参加して、何ができるかを学びましょう。

00:02:17.000 --> 00:02:22.000
あなたはほとんどの時間をXcodeでの開発に費やし、Xcode CloudはXcodeにあります。

00:02:22.000 --> 00:02:25.000
ここでは、Xcode Cloudの動作を見ることができます。

00:02:25.000 --> 00:02:29.000
複数のワークフローが設定されており、ビルドが実行され、問題をキャッチしています。

00:02:29.000 --> 00:02:34.000
また、チームが行っているすべての仕事について新しい洞察を得ることができます。

00:02:34.000 --> 00:02:41.000
ワークフローは、どのアクションを実行するか、いつ実行するかをXcode Cloudに指示する設定です。

00:02:41.000 --> 00:02:46.000
簡単なオンボーディングを簡単に通過し、最初のワークフローを迅速に起動して実行することができます。

00:02:46.000 --> 00:02:53.000
その後、戻ってきて編集したり、さまざまなユースケースをサポートするための新しいワークフローを作成したりできます。

00:02:53.000 --> 00:02:56.000
ワークフローを実行した結果は、ビルドと呼ばれます。

00:02:56.000 --> 00:03:06.000
Xcode Cloudは、コード署名と複数のオペレーティングシステムバージョンとXcodeリリースへのアクセスを提供するAppleマネージドクラウドインフラストラクチャでビルドを実行します。

00:03:06.000 --> 00:03:15.000
レポートナビゲーターの[クラウド]タブでアプリをクリックすると、すべてのワークフローのステータスと最新のビルドをサイドバーで確認できます。

00:03:15.000 --> 00:03:31.000
アプリをクリックすると、ビルドグループの概要も開きます。このビューには、ワークフローだけでなくgitブランチによっても、開発チームの作業方法によって整理されたすべてのビルドが表示され、多くのブランチで1つのワークフローを使用できますが、結果を別々に見ることができます。

00:03:31.000 --> 00:03:39.000
概要の上にあるマインフィルターをクリックして、リストをフィルタリングして、コードの変更によって開始されたビルドのみを表示することもできます。

00:03:39.000 --> 00:03:44.000
または、レポートナビゲーターで人物アイコンを選択します。

00:03:44.000 --> 00:03:49.000
ビルドグループの概要から1つのレベル下にあるのは、ワークフローの単一実行のビルドレポートです。

00:03:49.000 --> 00:03:53.000
これは、コード変更に固有の結果を深く掘り下げることができる場所です。

00:03:53.000 --> 00:03:59.000
テストレポート、ログを表示したり、問題を引き起こしたコードに直接ジャンプしたりできます。

00:03:59.000 --> 00:04:03.000
ジェフは後でビルドレポートの詳細を詳しく説明します。

00:04:03.000 --> 00:04:09.000
先ほど見たものはすべてXcodeだけでなく、App Store Connectでも入手できます。

00:04:09.000 --> 00:04:19.000
これには、ビルドの開始と表示、ワークフローの管理、アーティファクトの表示とダウンロード、チームとの結果の共有、通知設定の管理が含まれます。

00:04:19.000 --> 00:04:27.000
また、すでにTestFlightで作業している場合、Xcode CloudはApp Store Connectのすぐ隣にあるタブで、すばやくアクセスできます。

00:04:27.000 --> 00:04:32.000
App Store Connectでは、個人通知の設定を設定することもできます。

00:04:32.000 --> 00:04:40.000
ビルドの失敗に対してSlack通知を設定するのが好きなので、コードをプッシュした後も作業を続けることができますが、修正すべきことがあればすぐに警告されます。

00:04:40.000 --> 00:04:45.000
チームの全員が、自分に最適な通知を設定できます。

00:04:45.000 --> 00:04:59.000
外出先でも、Xcodeで設定していないプロジェクトのビルドを可視化したい場合でも、プロジェクトにコードをコミットしていないチームのメンバーでも、App Store ConnectのXcode Cloudはフル機能のWebベースのエクスペリエンスを提供します。

00:04:59.000 --> 00:05:10.000
Xcode Cloudを作成したとき、開発プロセスとチームとのコラボレーションのために設計しましたが、プライバシーを中核に構築されています。

00:05:10.000 --> 00:05:13.000
あなたのソースコードはあなたのプロジェクトの中心です。

00:05:13.000 --> 00:05:21.000
そのため、Xcode Cloudのすべての側面は、データが確実に保護されるように設計されています。

00:05:21.000 --> 00:05:23.000
ビルド環境は一時的なものです。

00:05:23.000 --> 00:05:29.000
ワークロードは完全に分離され、環境は取り壊され、ビルド間でゼロから作成されます。

00:05:29.000 --> 00:05:31.000
ソースコードは決して保存されません。

00:05:31.000 --> 00:05:36.000
Xcode Cloudは、一時的なビルド環境内でのみコードをフェッチします。

00:05:36.000 --> 00:05:41.000
ビルドデータは保存時に暗号化され、専用のCloudKitデータベースに保存されます。

00:05:41.000 --> 00:05:44.000
そして、あなたは自分のデータを管理しています。

00:05:44.000 --> 00:05:50.000
データはいつでも削除でき、システムから完全に削除されます。

00:05:50.000 --> 00:05:56.000
Xcode Cloudを導入したので、ジェフに渡してセットアップを進めます。 セットアップを進めます。

00:05:56.000 --> 00:05:59.000
Xcode Cloudへのオンボーディングを始めましょう。

00:05:59.000 --> 00:06:04.000
Xcodeとの強力な統合のおかげで、始めるのにいくつかの簡単な手順しかかかりません。

00:06:04.000 --> 00:06:16.000
プロセスは、製品メニューのXcode Cloudセクションにアクセスし、ワークフローの作成を選択することから始まります。

00:06:16.000 --> 00:06:22.000
次に、ローカルプロジェクトで検出されたこれらのオプションから、オンボーディングするアプリを選択します。

00:06:22.000 --> 00:06:35.000
今日は、私のチームが開発している「Fruta」という新しいスムージー注文アプリを選びます。このアプリはiOSとmacOSの両方をサポートしており、両方のプラットフォームを一度にオンボーディングします。

00:06:35.000 --> 00:06:39.000
私たちのアプリは、私のために自動的に作成されたデフォルトの最初のワークフローから始まります。

00:06:39.000 --> 00:06:47.000
私のローカルプロジェクトを検査することで、Xcode Cloudは私のチームの既存の構成に合わせてこれらの初期ワークフロー設定を調整することができます。

00:06:47.000 --> 00:07:00.000
ワークフローは、開始条件、環境、実行する一連のアクション、および展開や通知などのポストアクションで構成されています。

00:07:00.000 --> 00:07:11.000
そして、Xcode Cloudがメインブランチへのすべてのプッシュを開始条件として選択し、私の環境用にリリースされた最新のXcode、およびiOSとmacOSの両方のアーカイブアクションを見ることができます。

00:07:11.000 --> 00:07:16.000
これらの設定を変更するオプションがありますが、これは私には良さそうなので、続けます。

00:07:16.000 --> 00:07:24.000
ワークフロー編集を深く掘り下げるには、会議の後半で「Explore Xcode Cloud Workflows」セッションをチェックしてください。

00:07:24.000 --> 00:07:27.000
次に、Xcode Cloudにソースコードへのアクセスを許可します。

00:07:27.000 --> 00:07:37.000
これは、プライマリリポジトリ、サブモジュール、プライベートSwiftパッケージなど、プロジェクトを構築するために必要なすべてのソースリポジトリをカバーする1回限りのアクションです。

00:07:37.000 --> 00:07:43.000
公的にアクセス可能なリポジトリでは、追加の承認は必要ありません。

00:07:43.000 --> 00:07:51.000
Xcode Cloudは私のプロジェクト内の2つのプライベートリポジトリを発見したので、次に、ソースがホストされているGitHubに明示的な権限を付与します。

00:07:51.000 --> 00:07:58.000
アクセスの付与をクリックすると、次のステップの詳細をApp Store Connectに移動します。

00:07:58.000 --> 00:08:07.000
このプロセスはソースプロバイダーによって異なり、何らかの理由でいつでもアクセスを取り消すことができることに注意することが重要です。

00:08:07.000 --> 00:08:15.000
Xcode Cloudへのソースコードアクセスの許可はウェブ上で完了し、このアシスタントがプロセスを案内します。

00:08:15.000 --> 00:08:22.000
まず、Apple IDをソースアカウントに接続します。これは、Xcode Cloudでパーソナライズされたエクスペリエンスを可能にするために使用されます。

00:08:22.000 --> 00:08:33.000
このステップは、プロバイダーのネイティブ認証フローとXcode Cloudの安全な暗号化を活用するので、私のコードと個人情報が保護されたままであることを知っています。

00:08:33.000 --> 00:08:41.000
次に、GitHub組織にXcode Cloudアプリケーションをインストールし、選択したリポジトリにアクセスできるようにします。

00:08:41.000 --> 00:08:42.000
すごい！

00:08:42.000 --> 00:08:45.000
これらの手順が完了すると、私のGitHubアカウントはすべて設定されています。

00:08:45.000 --> 00:08:48.000
Xcodeでオンボーディングをローカルで終わらせましょう。

00:08:48.000 --> 00:08:53.000
リポジトリの準備が整いました。続けます。

00:08:53.000 --> 00:08:59.000
最後のステップでは、Xcode Cloudは私のアプリケーションとバンドルIDをApp Store Connectに登録することを提案します。

00:08:59.000 --> 00:09:03.000
私たちのアプリケーションはすでに作成されているので、ここで詳細を確認します。

00:09:03.000 --> 00:09:06.000
すべてが良さそうです。

00:09:06.000 --> 00:09:13.000
私のアプリがXcode Cloud用に構成されたので、オンボーディングプロセスをまとめることができ、最初のビルドが開始されます。

00:09:13.000 --> 00:09:14.000
私の最初のビルドが完成したようです。

00:09:14.000 --> 00:09:18.000
結果を詳しく見てみましょう。 

00:09:18.000 --> 00:09:30.000
ビルドグループの概要には、アクティブなビルドと完了したビルドが一目で表示され、最初のエントリをクリックすると、ビルドの概要ページが開きます。

00:09:30.000 --> 00:09:42.000
この概要では、期間や環境構成などのビルドに関する簡単な詳細を示し、下部には、関連するすべてのアクションとポストアクションのステータスが表示されます。

00:09:42.000 --> 00:09:51.000
また、右上には、実行を再構築し、ローカル環境でこのリビジョンをチェックするのに役立つボタンがあります。

00:09:51.000 --> 00:10:01.000
概要を残し、「Archive-iOS」を渡すなどのアクションノードを展開すると、この特定のアクションの概要が表示されます。

00:10:01.000 --> 00:10:08.000
そして、ビュー内では、この実行によって生成されたログとアーティファクトを見つけることができます。

00:10:08.000 --> 00:10:17.000
ログページは、このアクション内のすべてのタスクをきちんと整理し、注意が必要な領域に焦点を当てるために上部にフィルターを使用できます。

00:10:17.000 --> 00:10:25.000
また、アーティファクトページでビルドによって生成されたバイナリ、ログファイル、その他のアーティファクトにも簡単にアクセスできます。

00:10:25.000 --> 00:10:31.000
これはすべて、チームメイトと私がXcodeでCIコンテンツにアクセスするための非常に便利な方法になります。

00:10:31.000 --> 00:10:38.000
それでは、アクションの概要にアクセスして、Macのアーカイブアクションが失敗した理由を調査しましょう。

00:10:38.000 --> 00:10:44.000
ログビューと同様に、効率的なトリアージのために、これらの問題をタイプ別にフィルタリングできます。

00:10:44.000 --> 00:10:59.000
私たちの最初のCIビルドは、以前にMacアプリで見逃したインポートの問題を見つけたようで、Xcodeで結果をトリアージしているので、問題内でこのジャンプボタンを使用して、修正する必要があるコードに直接移動できます。

00:10:59.000 --> 00:11:04.000
物事をクリーンアップするために簡単なコード変更を行います。

00:11:04.000 --> 00:11:22.000
そして、CIビルドを良いスタートにしたいので、先に進んでコミットしてリモートリポジトリにプッシュします。

00:11:22.000 --> 00:11:27.000
そして、変更をプッシュした直後に、Xcode Cloudが私のために新しいビルドを開始したことがわかります。

00:11:27.000 --> 00:11:32.000
そして、私はすべての変化をライブでフォローし続けることができます。

00:11:32.000 --> 00:11:34.000
私は自分の素早い進歩にかなり興奮しています。

00:11:34.000 --> 00:11:40.000
Appleのクラウドインフラストラクチャに基づいてCIビルドを実行することで、私たちのチームはこれまで以上に効率的にプロジェクトに協力します。

00:11:40.000 --> 00:11:43.000
さて、ホリーに戻って楽しみに参加してください。

00:11:43.000 --> 00:11:48.000
Geoff、私たちのプロジェクトFrutaのためにXcode Cloudをセットアップして実行してくれてありがとう。

00:11:48.000 --> 00:11:57.000
同じチームのメンバーとして、私はMacでFruta Xcodeプロジェクトを開き、ジェフと私たちのチームの残りの部分が取り組んできたすべてのワークフローとビルドを見ることができます。

00:11:57.000 --> 00:12:08.000
クラウドタブのレポートナビゲーターでは、プロジェクト名をクリックすると、ワークフローはチーム内で共有されるため、ジェフが作成したデフォルトのワークフローが表示されます。

00:12:08.000 --> 00:12:12.000
ジェフがインポートエラーを修正したときに開始したビルド2が正常に完了したようです。

00:12:12.000 --> 00:12:20.000
通過するビルドが見つかったので、ワークフローを編集してそれが何をするかを確認し、Frutaの追加カバレッジを得るためにどのような改善ができるかを調べましょう。

00:12:20.000 --> 00:12:26.000
ワークフロー名を右クリックして、ワークフローの編集を選択できます。

00:12:26.000 --> 00:12:29.000
ワークフローにもっとわかりやすい名前を付けることから始めましょう。

00:12:29.000 --> 00:12:41.000
リリースに使用するいくつかのブランチを構築してテストするので、このワークフローを「リリース」と呼びましょう。

00:12:41.000 --> 00:12:43.000
では、開始条件を編集しましょう。

00:12:43.000 --> 00:12:48.000
サイドバーから開始条件セクションを選択して、設定を表示します。

00:12:48.000 --> 00:12:53.000
開始条件は、ワークフローを実行するために何が起こる必要があるかを定義することを忘れないでください。

00:12:53.000 --> 00:12:58.000
デフォルトは、コードの変更がメインブランチにプッシュされたときに開始するように設定されています。

00:12:58.000 --> 00:13:02.000
私のチームもリリースブランチを使用しているので、ここにも追加しましょう。

00:13:02.000 --> 00:13:13.000
カスタムブランチセクションのプラスボタンをクリックし、テーブル行にブランチ名を入力するだけです。

00:13:13.000 --> 00:13:15.000
それはスタートコンディションに良さそうです。

00:13:15.000 --> 00:13:18.000
では、行動に移りましょう。

00:13:18.000 --> 00:13:24.000
デフォルトのワークフローは、プロジェクトが実行されているすべてのプラットフォームのアーカイブアクションを自動的に作成します。

00:13:24.000 --> 00:13:30.000
これは構築するのに最適な基盤ですが、追加のカバレッジを追加するには、ここにいくつかのテストを追加したいと思います。

00:13:30.000 --> 00:13:36.000
サイドバーのアクションヘッダーの右側にあるプラスボタンをクリックし、テストアクションタイプを選択します。

00:13:36.000 --> 00:13:45.000
テストアクションでは、プラットフォームを選択できます--iOSをやりましょう--そして正しいスキーム、私たちの場合はFruta iOSを選択します。

00:13:45.000 --> 00:13:52.000
サイドバーには、必要なものをすべて記入していないため、新しいテストアクションの横にまだ赤いXがあります。

00:13:52.000 --> 00:13:56.000
私が設定する必要がある最後の設定は、これらのテストを実行するためのいくつかのデバイスを追加することです。

00:13:56.000 --> 00:14:04.000
宛先テーブルの下にあるプラスボタンをクリックすると、推奨されるiPhoneシミュレーターが自動的に追加されます...

00:14:04.000 --> 00:14:11.000
そして、もう一度クリックすると、おすすめのiPadが追加されます。

00:14:11.000 --> 00:14:14.000
これらを変更して、特定のデバイスシミュレータを選択することもできます。

00:14:14.000 --> 00:14:23.000
私のアプリがiPhone 12でうまく機能することを確認するために、最新のiPhoneを選びましょう。

00:14:23.000 --> 00:14:30.000
私が追加したすべての目的地は、最新のOSバージョンを使用するように自動的に設定されていることに注意してください。

00:14:30.000 --> 00:14:41.000
サイドバーでワークフローを確認でき、すべてが良さそうなので、右下の[保存]ボタンをクリックして変更を保存しましょう。

00:14:41.000 --> 00:14:46.000
ワークフローに変更を加えたので、開始するためにコードを変更しなくても機能するようにしたいです。

00:14:46.000 --> 00:14:57.000
レポートナビゲーターでワークフローを右クリックし、ビルドの開始を選択することで、手動で行うことができます。

00:14:57.000 --> 00:15:00.000
次に、実行するブランチを選択するよう求められます。

00:15:00.000 --> 00:15:06.000
そのブランチをワークフローに追加したばかりなので、「release/v1」で試してみましょう。

00:15:06.000 --> 00:15:09.000
そしてここから、[ビルドの開始]をクリックして開始します。

00:15:09.000 --> 00:15:12.000
素晴らしい、私たちの新しいビルドが実行されているように見えます。

00:15:12.000 --> 00:15:22.000
さて、ビルドグループの概要には、リリース/v1ブランチの新しいセクションがあり、私が始めたばかりの新しいビルドであるビルド3は、実行中の状態でここに表示されます。

00:15:22.000 --> 00:15:26.000
これが完了したら、リリースブランチがどうなっているかよくわかります。

00:15:26.000 --> 00:15:34.000
その後、リリースワークフローに追加したり、チームの仕組みをサポートするために新しいワークフローを作成したりできます。

00:15:34.000 --> 00:15:39.000
Xcode Cloudは、私たちのアプリの継続的な統合プラクティスを採用することを本当に簡単にしました。

00:15:39.000 --> 00:15:44.000
数回クリックするだけで、ジェフは私たちをセットアップし、ワークフローが見つけた問題を修正しました。

00:15:44.000 --> 00:15:50.000
その後、彼がすでに行ったすべてのことを簡単に確認し、ワークフローをより堅牢にすることができました。

00:15:50.000 --> 00:15:58.000
高品質のアプリやフレームワークを作成するには、コードとフィードバックの両方を生産的に反復するチームの能力が不可欠です。

00:15:58.000 --> 00:16:13.000
Xcode Cloudを使用すると、CIを簡単にセットアップできます。これはまったく新しいプラクティスであるか、プロセスをシームレスにするかにかかわらず、生産性を高め、ユーザーが製品で素晴らしい体験を得られることに自信を持つことができます。

00:16:13.000 --> 00:16:18.000
このセッションが、Xcode CloudとContinuous Integrationに慣れるのに役立ったことを願っています。

00:16:18.000 --> 00:16:25.000
カナダのバンクーバーにある私たちのチームから、そしてジェフと私を代表して、あなたに感謝し、WWDC 2021の残りの部分を楽しんでください。

00:16:25.000 --> 23:59:59.000
[明るい音楽]。

