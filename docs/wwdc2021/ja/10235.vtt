WEBVTT

00:00:00.000 --> 00:00:13.000
こんにちは、私の名前はウィルで、アップルのデザインマネージャーです。

00:00:13.000 --> 00:00:18.000
今日は、同僚のハンナと一緒に、DocCを使ってインタラクティブな開発者チュートリアルを書く方法を紹介します。

00:00:18.000 --> 00:00:28.000
チュートリアルは、APIを使用して実際のアプリを構築するためのステップバイステップの手順で、迅速なフレームワークやパッケージがどのように機能するかの詳細を開発者に教えるのに最適な方法です。

00:00:28.000 --> 00:00:31.000
あなたは私たちがアップルで書いたいくつかのチュートリアルに精通しているかもしれません。

00:00:31.000 --> 00:00:36.000
SwiftUIとMac Catalystを紹介するチュートリアルを作成しました。

00:00:36.000 --> 00:00:43.000
これらの入門チュートリアルでは、これらのフレームワークの基本を学び、ステップバイステップのコード例に従ってスキルを構築します。

00:00:43.000 --> 00:00:49.000
フレームワークの採用者は、チュートリアルで提示された新しいアイデアをどれだけ早く始めることができるかを気に入っていることがわかりました。

00:00:49.000 --> 00:00:54.000
これらのチュートリアルを書くために、DocCと呼ばれるドキュメントコンパイラを構築しました。

00:00:54.000 --> 00:01:06.000
DocCはマークダウンを活用してプレーンテキストをリッチでインタラクティブなシステムに変換し、今年はDocCをXcodeに導入したので、SwiftパッケージやSwiftフレームワークのチュートリアルを書くこともできます。

00:01:06.000 --> 00:01:09.000
DocCは開発者のチュートリアルだけではありません。

00:01:09.000 --> 00:01:24.000
DocCは、ソースコメントからプロジェクト内のSwiftフレームワークとパッケージのドキュメントを構築することもできます。つまり、アプリ開発者にとって、依存関係は開発者ドキュメントウィンドウのプラットフォームライブラリと一緒にドキュメントを持つことができます。

00:01:24.000 --> 00:01:34.000
また、SwiftフレームワークまたはSwiftパッケージを作成する場合は、ソースで採用者向けのドキュメントを書くことができるため、APIを作成および変更する際に最新の状態に保つのは簡単です。

00:01:34.000 --> 00:01:42.000
ドキュメントウィンドウに豊富な書式設定体験を提供しながら、ソースの読みやすさを維持するために、ドキュメントコメントをマークダウンで記述します。

00:01:42.000 --> 00:01:50.000
ドキュメントカタログを追加して、記事を書いたり、フレームワークやパッケージ内のすべてのAPIを整理したりすることもできます。

00:01:50.000 --> 00:01:58.000
DocCの使用とドキュメントカタログの設定については、こちらに記載されているセッションで詳しく知ることができます。

00:01:58.000 --> 00:02:02.000
このセッションでは、チュートリアルを書くことに焦点を当てます。

00:02:02.000 --> 00:02:10.000
チュートリアルは非常にインタラクティブな形式のドキュメントであり、オーサリングを容易にするために、ディレクティブを持つようにマークダウンを拡張しました。

00:02:10.000 --> 00:02:20.000
ディレクティブは、コンテンツのようなチュートリアルを作成するための構造を提供するため、すでに慣れ親しんでいる可能性のある既存のマークダウン構文でコンテンツを書くことに集中できます。

00:02:20.000 --> 00:02:25.000
開発者のチュートリアルは、実際のプロジェクト、理想的にはアプリの構築を中心としています。

00:02:25.000 --> 00:02:31.000
チュートリアルアプリは、現実的な方法でフレームワーク内のAPIを使用する必要があります。

00:02:31.000 --> 00:02:42.000
たとえば、SwiftUIチュートリアルでは、初心者がSwiftUIを使い始めるために理解する必要があるコア機能を探るランドマークと呼ばれるアプリを構築する方法を紹介します。

00:02:42.000 --> 00:02:51.000
Mac Catalystでは、iPadとMacのナビゲーションイディオムの違いを探るレシピアプリを構築する方法を教えます。

00:02:51.000 --> 00:03:01.000
そして今、私の同僚と私は、あなたのiPhoneでかわいい小さなデジタルナマケモノを作成、カタログ化、ケアするための新しいフレームワークに取り組んでいます。

00:03:01.000 --> 00:03:13.000
私の同僚はすでにいくつかの素晴らしい参考文献や記事を書いていますが、このフレームワークの採用者は、フレームワークのさまざまな側面がどのように相互作用するかをすばやく確認できるように、実際のアプリを構築することを学ぶことから恩恵を受けると思います。

00:03:13.000 --> 00:03:20.000
このセッションでは、同僚のハンナと私は、このフレームワークの採用者に、このフレームワークを始めるために必要な基本を教えるためのチュートリアルを作成します。

00:03:20.000 --> 00:03:24.000
チュートリアルの主なコンポーネントの概要を説明することから始めます。

00:03:24.000 --> 00:03:27.000
次に、アイデアと計画にどのようにアプローチするかを説明します。

00:03:27.000 --> 00:03:32.000
そして最後に、チュートリアルのコレクションの作成をデモするハンナに渡します。

00:03:32.000 --> 00:03:35.000
わかった。始めましょう。

00:03:35.000 --> 00:03:39.000
先に述べたように、チュートリアルは非常にインタラクティブな学習方法です。

00:03:39.000 --> 00:03:55.000
また、記事やリファレンスドキュメントと同様に、チュートリアルのテキストはマークダウンで作成されていますが、チュートリアルでは特別な構文を使用してこのマークダウンを構造を提供するディレクティブでラップし、DocCがチュートリアルで紹介されている複雑なレイアウトとインタラクションを構築できます。

00:03:55.000 --> 00:04:01.000
これは、このテキストがチュートリアルの単一のステップであることをDocCに伝える基本的な指示です。

00:04:01.000 --> 00:04:11.000
有益なテキストに加えて、この例には、DocCがステップを達成するためにどのコードを書くべきかを正確に読者に示すために表示するSwiftファイルへのリンクが含まれています。

00:04:11.000 --> 00:04:13.000
そして、DocCディレクティブはネストすることができます。

00:04:13.000 --> 00:04:21.000
この場合、コードディレクティブには、読者にステップのより多くのコンテキストを提供する画像ディレクティブが含まれています。

00:04:21.000 --> 00:04:25.000
チュートリアルページには、先ほど見たような個々のステップがたくさんあります。

00:04:25.000 --> 00:04:30.000
目次は、組織と個々のチュートリアルへのリンクを提供します。

00:04:30.000 --> 00:04:35.000
目次の指示を見てみましょう。 指示を見てみましょう。

00:04:35.000 --> 00:04:42.000
目次ファイルは、ページのすべての要素を含むTutorialsディレクティブで始まります。

00:04:42.000 --> 00:04:53.000
チュートリアルディレクティブの中には、フレームワーク採用者がチュートリアル全体で構築するもののタイトルと簡単な説明を含むイントロディレクティブがあります。

00:04:53.000 --> 00:05:04.000
DocCは、目次ページでチュートリアルへのリンクを提供すると、「始める」ボタンやタイミング計算など、導入のいくつかの要素を自動的に生成します。

00:05:04.000 --> 00:05:06.000
序文には画像ディレクティブも含まれています。

00:05:06.000 --> 00:05:11.000
ドキュメントカタログリソースフォルダに画像を保存できます。

00:05:11.000 --> 00:05:14.000
ページの下には、チャプターディレクティブがあります。

00:05:14.000 --> 00:05:18.000
チャプターを使用して、チュートリアルを一緒に意味のあるグループに整理します。

00:05:18.000 --> 00:05:27.000
チャプターは、フレームワークの採用者にチュートリアルに従う際に明確な進歩感を与え、フレームワークが何であるかについてのコンテキストを提供します。

00:05:27.000 --> 00:05:31.000
章の中には、チュートリアルへの個別のリンクがあります。

00:05:31.000 --> 00:05:41.000
このページによって設定されたすべてのコンテキストで、フレームワークの採用者は、チュートリアルページに移動する前に、フレームワークが何であるか、それを使用して構築するものをよく理解する必要があります。

00:05:41.000 --> 00:05:47.000
目次と同様に、チュートリアルページはページの内容を含む単一のディレクティブで始まります。

00:05:47.000 --> 00:05:52.000
この場合、それは単一のチュートリアルディレクティブです。

00:05:52.000 --> 00:06:03.000
DocCは、チュートリアルの紹介で目次ページからいくつかの情報を使用し、それが属する章を参照することによって、このチュートリアルの全体的なテーマが何であるかを人々に知らせます。

00:06:03.000 --> 00:06:11.000
チュートリアルの紹介には、フレームワークの採用者にフレームワークのどの部分を使用し、それを使用して何を構築するかを伝えるタイトルと説明が含まれています。

00:06:11.000 --> 00:06:16.000
建物の道に沿って明確にするために、チュートリアルはセクションに分かれています。

00:06:16.000 --> 00:06:26.000
セクションの紹介はチュートリアルの紹介と非常によく似ていますが、次のセクションに進む前にフレームワークの採用者が行う進捗状況に固有のものです。

00:06:26.000 --> 00:06:33.000
セクションには、次のステップに進むために正確に何をする必要があるかを採用者に指示するステップが含まれています。

00:06:33.000 --> 00:06:38.000
ステップは短く、理解しやすく、従うのが簡単であるべきです。

00:06:38.000 --> 00:06:46.000
フレームワークの採用者は、彼らがすぐに学んでいるフレームワークをスピードアップするのを助けるために、一貫した明確なチュートリアルステップに依存しています。

00:06:46.000 --> 00:06:52.000
明確な計画から始めると、チュートリアルのコレクション全体でまとまりのある一連のステップを作成する方が簡単です。

00:06:52.000 --> 00:06:59.000
新しいナマケモノフレームワークの開発者チュートリアルのコレクションを概説して、この計画を立てる方法をお見せしましょう。

00:06:59.000 --> 00:07:06.000
フレームワークを概説する方法を理解するには、フレームワークがどのように機能し、実際の用途について考えるのが最善です。

00:07:06.000 --> 00:07:15.000
さて、私の同僚と私が取り組んできたフレームワークはすべてナマケモノに関するものであり、人々が使用するのを見て興奮しているかなりクールな機能を提供します。

00:07:15.000 --> 00:07:18.000
これは、フレームワークの主な機能の高レベルのビューです。

00:07:18.000 --> 00:07:26.000
私のチュートリアルを概説するために、私はチュートリアルを通してそれらを説明する方法の良いアイデアを得ることができるように、最も重要なAPIをリストアップするつもりです。

00:07:26.000 --> 00:07:31.000
Slothタイプ自体のようなAPIや、Food GeneratorやPowerPickerがあることがわかります。

00:07:31.000 --> 00:07:37.000
これらについて一度に考えようとすると、明確な順序でどのように教えるべきかを決めるのは難しいでしょう。

00:07:37.000 --> 00:07:42.000
では、一般的な機能領域でグループ化させてください。

00:07:42.000 --> 00:07:49.000
ナマケモノタイプを理解することは、このフレームワークの採用者にとって本当に重要であることを知っているので、ナマケモノタイプの作成と編集に関連するすべてをグループ化します。

00:07:49.000 --> 00:07:57.000
ナマケモノの生成、名前の付け、権限の編集に使用されるAPI：これらはナマケモノの作成に使用されるコアAPIです。

00:07:57.000 --> 00:08:03.000
そして、フードジェネレーター、ケアスケジュール、生息地などの残りのAPIもすべて関連していることがわかりました。

00:08:03.000 --> 00:08:08.000
ナマケモノの世話に関するこれらのAPI。

00:08:08.000 --> 00:08:16.000
だから、フレームワークを構成する2つの主要なAPIグループがあるようです。ナマケモノの作成に関するAPIのグループと、ナマケモノのケアに関するAPIのグループです。

00:08:16.000 --> 00:08:18.000
これは素晴らしいスタートです。

00:08:18.000 --> 00:08:24.000
私は、採用者が私たちのフレームワークをうまく使用するためにこれらのAPIを理解する必要があることを知っています。

00:08:24.000 --> 00:08:29.000
そして、このようにそれらをグループ化することで、それらが一緒にどのように機能するかを示すことが容易になります。

00:08:29.000 --> 00:08:35.000
しかし、このフレームワークの採用者は、自分のアプリでより複雑なことをしたいと思う可能性が高いことも知っています。

00:08:35.000 --> 00:08:37.000
だから、私は別のグループを追加します。

00:08:37.000 --> 00:08:48.000
私たちの新しいフレームワークは、ナマケモノの作成と世話に関するものですが、含まれているAPIを超えた方法で使用できるように準備したいので、相互運用性に関する情報を含める必要があります。

00:08:48.000 --> 00:08:56.000
採用者は、ナマケモノが他の動物と交流したり、異なる場所を移動したり、ナマケモノのグループでたむろしたりするのを助けるためにフレームワークを使用する可能性が高いと思います。

00:08:56.000 --> 00:08:58.000
私はすべてのユースケースを想像しようとしているわけではありません。

00:08:58.000 --> 00:09:05.000
私は自分のアプリでフレームワークを使用する方法を人々に紹介するのに十分な多様性が欲しいだけです。

00:09:05.000 --> 00:09:09.000
これら3つのグループで、私はチュートリアルを整理する素晴らしいスタートを切りました。

00:09:09.000 --> 00:09:19.000
今のところ、私はこれらのグループを章に変え、それらを使ってアプリのアイデアをブレインストーミングし、フレームワークの採用者に実際のアプリでAPIを使用する方法を教えます。

00:09:19.000 --> 00:09:23.000
チュートリアルでは、これら3つの分野のそれぞれに機能を備えたアプリを設計しました。

00:09:23.000 --> 00:09:29.000
作成のために、ユーザーが新しいナマケモノを生成し、それに色とパワーを割り当てることができるシンプルなビューを作成します。

00:09:29.000 --> 00:09:36.000
思いやりのために、私はユーザーにナマケモノの一般的な活動レベル、食欲、気分を見る能力を与えます。

00:09:36.000 --> 00:09:45.000
そして、インタラクションセクションでは、ユーザーが世界中を移動し、他の動物と交流するときにナマケモノを見つけることができる機能を作ります。

00:09:45.000 --> 00:09:50.000
私のアプリのアイデアをスケッチして、私はそれをどのように構築するか、そしてそれをどのように人々にそれを構築するように教えるかを計画する準備ができています。

00:09:50.000 --> 00:09:55.000
アプリの構築方法に大まかに従った各章のチュートリアルのリストを書きます。

00:09:55.000 --> 00:09:58.000
まず、ナマケモノを作成するためのビューを作成します。

00:09:58.000 --> 00:10:02.000
その後、より複雑なスロのケア機能に取り組みます。

00:10:02.000 --> 00:10:07.000
最後に、他のフレームワークを使用するアプリの部分を構築します。

00:10:07.000 --> 00:10:14.000
このすべての計画の後、私は私たちのフレームワークの採用者がナマケモノを作成し、世話するのに役立つと確信しているチュートリアルのリストを持っています。

00:10:14.000 --> 00:10:23.000
この計画は私が書くにつれて変わるかもしれませんが、今のところ、私の考えを整理し、すべての重要なAPIを明確だが冗長ではない方法でカバーしたことを確認するのに役立ちます。

00:10:23.000 --> 00:10:27.000
これまでのところ、ディレクティブ構文とチュートリアルを構成するコンポーネントを調査しました。

00:10:27.000 --> 00:10:31.000
また、チュートリアルのコレクションを概説する基本についても説明しました。

00:10:31.000 --> 00:10:39.000
この時点で、私たちは書き始める準備ができているので、Xcode 13でDocCでチュートリアルを書く方法を示す同僚のHannahに渡します。

00:10:39.000 --> 00:10:43.000
ありがとう、ウィル。私の名前はハンナです。

00:10:43.000 --> 00:10:46.000
私はここアップルのヒューマンインターフェースデザイナーです。

00:10:46.000 --> 00:10:59.000
SlothCreatorチュートリアルの概要がわかったので、Xcode 13のまったく新しいDocC機能を使用して、チュートリアルを一緒に書く方法を説明しましょう。

00:10:59.000 --> 00:11:09.000
私の同僚のBeaとJackは、「XcodeでDocCドキュメントを昇格する」セッションで、ドキュメントファイルを整理するためのドキュメントカタログを作成する方法を取り上げました。

00:11:09.000 --> 00:11:15.000
SlothCreator用に作成したのと同じドキュメントカタログにチュートリアルを追加します。

00:11:15.000 --> 00:11:21.000
ウィルが述べたように、チュートリアルをコンパイルするには目次ファイルが必要です。

00:11:21.000 --> 00:11:30.000
だから、私はすでにSlothCreatorチュートリアル用のチュートリアルフォルダと目次ファイルを作成しました。

00:11:30.000 --> 00:11:35.000
さあ、私の最初のチュートリアルを作り始めましょう!

00:11:35.000 --> 00:11:47.000
まず、[チュートリアル]フォルダを右クリックし、[新しいファイル]を選択してテンプレートセレクターを表示し、[チュートリアルファイル]を選択し、[次へ]をクリックします。

00:11:47.000 --> 00:11:54.000
このチュートリアルを「カスタムナマケモノの作成」と名付けます。

00:11:54.000 --> 00:11:58.000
DocCは、私が始めるためのテンプレートを提供します。

00:11:58.000 --> 00:12:06.000
チュートリアルファイルテンプレートには、セクションにイントロ、セクション、および一連のステップがあります。

00:12:06.000 --> 00:12:10.000
必要に応じて、チュートリアルの完了予定時刻を表示できます。

00:12:10.000 --> 00:12:16.000
約20分かかると思います。

00:12:16.000 --> 00:12:19.000
このチュートリアルのタイトルを続けましょう。

00:12:19.000 --> 00:12:25.000
ここでは、「カスタムナマケモノの作成」と入力します。

00:12:25.000 --> 00:12:29.000
次に、このチュートリアルの概要を追加します。

00:12:29.000 --> 00:12:38.000
チュートリアルをより魅力的に見せたいので、チュートリアルのイントロ、セクションのイントロ、ステップのためにいくつかのアートファイルを用意しました。

00:12:38.000 --> 00:12:50.000
アートファイルフォルダを開き、準備したすべての画像を選択し、ドキュメントカタログのリソースフォルダにドラッグアンドドロップします。

00:12:50.000 --> 00:12:53.000
私がデザインしたイントロ画像をお見せしましょう。

00:12:53.000 --> 00:13:00.000
フレームワークの採用者がこのチュートリアルで構築するものを視覚的に説明しています。

00:13:00.000 --> 00:13:08.000
イントロ画像を追加するには、「ソース」の後に画像ファイル名を入力します。

00:13:08.000 --> 00:13:14.000
また、画像にアクセスしやすい説明を追加します。

00:13:14.000 --> 00:13:27.000
私は、すべてのSlothCreatorの採用者がチュートリアルを読むことと聞くことの両方を通して素晴らしい学習体験をできるように、私のチュートリアルを誰もがアクセスできるようにしたい。

00:13:27.000 --> 00:13:33.000
アクセス可能な説明は、画像を見ている人にとって何が自明であるかを説明しています。

00:13:33.000 --> 00:13:46.000
たとえば、イントロ画像を「ナマケモノのアウトラインとナマケモノの下に4つのボタンを持つアプリインターフェースのワイヤーフレーム」と説明します。

00:13:46.000 --> 00:13:56.000
ボタンには、氷、火、風、稲妻のシンボルが左から右に表示されます。

00:13:56.000 --> 00:14:02.000
コードに説明を追加しましょう。

00:14:02.000 --> 00:14:10.000
このチュートリアルのイントロを完了したので、最初のセクションに移りましょう。

00:14:10.000 --> 00:14:13.000
これは初心者に優しいチュートリアルになります。

00:14:13.000 --> 00:14:20.000
したがって、最初のセクションでは、フレームワークの採用者は、Slothyアプリの基本を設定することから始めます。

00:14:20.000 --> 00:14:29.000
セクションのタイトルを入れて、セクションの説明を追加します。

00:14:29.000 --> 00:14:38.000
また、このセクションのタスクフローを視覚的に表す、準備したセクション画像も追加します。

00:14:38.000 --> 00:14:47.000
イントロ画像を追加した方法と同様に、画像ファイル名とアクセス可能な説明を入力します。

00:14:47.000 --> 00:14:53.000
次に、ステップに進みましょう。

00:14:53.000 --> 00:15:01.000
このセクションの最初のステップでは、フレームワークの採用者は、iOSアプリテンプレートを使用して新しいXcodeプロジェクトを作成します。

00:15:01.000 --> 00:15:07.000
私はそれを指示に入れます。

00:15:07.000 --> 00:15:23.000
このステップのメディアは、採用者にそれを行う方法に関するより多くのコンテキストを提供する必要があるので、Xcodeのテンプレートセレクターのスクリーンショットを撮り、彼らが対話する必要がある領域を強調しました。

00:15:23.000 --> 00:15:35.000
覚えておくべきことの1つは、フレームワークの採用者がこのチュートリアルを見ているとき、セクションとステップの背景は、Xcodeの設定に基づいて明るいか暗いかのどちらかである可能性があります。

00:15:35.000 --> 00:15:44.000
そのため、ダークモードと互換性のある画像を作成するか、外観ごとに個別の画像を提供できます。

00:15:44.000 --> 00:15:49.000
この画像をステップに追加します。

00:15:49.000 --> 00:16:01.000
最初のステップを追加しました。先に進み、セクション1の残りのステップを追加します。

00:16:01.000 --> 00:16:02.000
わかりました。

00:16:02.000 --> 00:16:05.000
最初のセクションの手順を完了しました。

00:16:05.000 --> 00:16:09.000
このチュートリアルがどのように進んでいるかを見てみましょう。

00:16:09.000 --> 00:16:28.000
Xcode 13では、製品ビルドドキュメントに移動して開発者ドキュメントウィンドウでチュートリアルをプレビューしたり、キーボードのcontrol+shift+command+Dを押してショートカットを使用できます。

00:16:28.000 --> 00:16:30.000
すごい！チュートリアルは正常にコンパイルされました。

00:16:30.000 --> 00:16:36.000
そして今、私はちょうどポップアップしたドキュメンテーションウィンドウで書いたものをプレビューすることができます。

00:16:36.000 --> 00:16:40.000
目次ページを見てみましょう。 ページを見てみましょう。

00:16:40.000 --> 00:16:51.000
左側のナビゲーターでは、私の同僚が SlothCreatorのために書いた他のドキュメントとともに、私のチュートリアルが SlothCreatorプロジェクトの下に整理されていることがわかります。

00:16:51.000 --> 00:16:55.000
右側には、目次ページが見えます。

00:16:55.000 --> 00:17:03.000
イントロセクションには、チュートリアルコレクションの概要と目を引く画像があります。

00:17:03.000 --> 00:17:08.000
イントロの下には、私の最初の章と、今書いたチュートリアルへのリンクがあります。

00:17:08.000 --> 00:17:13.000
見てみましょう。 

00:17:13.000 --> 00:17:26.000
チュートリアルページの上部から、フレームワークの採用者に SlothCreationビューを構築することを通知するチュートリアルイントロがあり、約20分かかります。

00:17:26.000 --> 00:17:30.000
その下が最初のセクションです。

00:17:30.000 --> 00:17:37.000
このセクションでは、採用者はプロジェクトを設定するための4つの簡単なステップを実行します。

00:17:37.000 --> 00:17:42.000
ステップを下にスクロールすると、画像の更新を見ることができます。

00:17:42.000 --> 00:17:45.000
これまでのところ、すべてが良さそうです。

00:17:45.000 --> 00:17:51.000
2番目のセクションでは、フレームワークの採用者がSlothCreatorでコーディングを開始します。

00:17:51.000 --> 00:17:56.000
コードステップでそれらを導く方法を見てみましょう。

00:17:56.000 --> 00:18:02.000
私はすでにセクション2のイントロと最初のステップを完了しました。

00:18:02.000 --> 00:18:12.000
フレームワークの採用者が前のステップで作成したSwiftファイルに SlothCreatorパッケージをインポートしている2番目のステップを見てみましょう。

00:18:12.000 --> 00:18:17.000
それに飛び込む前に、いくつかのことを指摘したいと思います。

00:18:17.000 --> 00:18:25.000
コードステップは、上部に表示名を表示し、採用者にどのファイルに取り組むべきかを伝えます。

00:18:25.000 --> 00:18:34.000
DocCは、このステップで追加したSwiftファイルを画面の右側、表示名の下に表示します。

00:18:34.000 --> 00:18:46.000
DocCは、現在のコードファイルと前のステップのコードファイルを自動的に比較し、コードの新しい部分を強調表示することもできます。

00:18:46.000 --> 00:18:49.000
このコードファイルはプレビューを生成します。

00:18:49.000 --> 00:18:59.000
採用者が指示に正常に従っているかどうかを確認できるように、このステップにプレビューのスクリーンショットを追加できます。

00:18:59.000 --> 00:19:02.000
Xcodeに戻って、このステップを終わらせましょう。

00:19:02.000 --> 00:19:16.000
まず、表示名、次にコードファイル名、そして最後にプレビュー画像を追加します。

00:19:16.000 --> 00:19:34.000
コードステップを追加する方法がわかったので、セクション2の残りのステップを追加します。

00:19:34.000 --> 00:19:41.000
これまでのところ、チュートリアルのイントロ、セクション、およびさまざまな種類のステップの書き方を説明しました。

00:19:41.000 --> 00:19:46.000
さて、 SlothCreatorのために書いたすべてのチュートリアルを追加します。

00:19:46.000 --> 00:19:57.000
Finderを開き、準備したすべてのチュートリアルファイルを選択し、チュートリアルフォルダにドラッグアンドドロップします。

00:19:57.000 --> 00:20:16.000
次に、目次ファイルを開き、第1章の他の2つのチュートリアルをリンクし、第2章と第3章を追加します。

00:20:16.000 --> 00:20:20.000
さて、今、私は SlothCreatorチュートリアルを完了しました。

00:20:20.000 --> 00:20:22.000
一緒に見てみましょう。 

00:20:22.000 --> 00:20:32.000
目次ページから、このチュートリアルコレクションには、3つの章に編成された8つのチュートリアルが含まれていることがわかります。

00:20:32.000 --> 00:20:36.000
左側のナビゲーターからもこの構造を見ることができます。

00:20:36.000 --> 00:20:44.000
このページは、フレームワークの採用者にこのチュートリアルコレクションの要約ビューを提供する素晴らしい方法です。

00:20:44.000 --> 00:20:47.000
先ほど書いたチュートリアルページも見てみましょう。

00:20:47.000 --> 00:20:58.000
私たちは、プロジェクトの設定方法を通じてフレームワーク採用者をガイドするイントロと最初のセクションを見ました。

00:20:58.000 --> 00:21:09.000
その下には、ナマケモノのカスタマイズビューを構築する方法に関する明確なコーディング手順を提供する2番目のセクションがあります。

00:21:09.000 --> 00:21:10.000
すごい！

00:21:10.000 --> 00:21:12.000
チュートリアルは本当に良さそうです!

00:21:12.000 --> 00:21:20.000
私たちのフレームワークの採用者は、私のチュートリアルを見たときにSlothCreatorについて学ぶことに興奮すると確信しています。

00:21:20.000 --> 00:21:33.000
このセッションでは、チュートリアルとは何か、良いチュートリアルとは何か、チュートリアルの概要を説明する方法、DocCを使用してチュートリアルを作成およびプレビューする方法について説明しました。

00:21:33.000 --> 00:21:37.000
DocCは、Xcode 13の強力な新しいドキュメント機能です。

00:21:37.000 --> 00:21:48.000
それを使えば、参考文献、記事、チュートリアルなど、フレームワークの包括的なドキュメントを書くことができます。

00:21:48.000 --> 00:21:59.000
DocCでドキュメントを作成、構築、整理する方法の詳細については、今年のWWDCの他のDocCセッションをチェックすることをお勧めします。

00:21:59.000 --> 00:22:07.000
私たちと一緒に学んでいただきありがとうございます。Xcode 13のDocCで何を作成するのかに興奮しています。

00:22:07.000 --> 23:59:59.000
[明るい音楽]。

