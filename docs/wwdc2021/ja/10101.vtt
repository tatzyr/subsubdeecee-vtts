WEBVTT

00:00:02.000 --> 00:00:12.000
こんにちは、「ReplayKitでローリングクリップを発見」へようこそ。

00:00:12.000 --> 00:00:17.000
私の名前はアーネストで、ReplayKitチームのソフトウェアエンジニアです。

00:00:17.000 --> 00:00:22.000
今日は、アプリケーションのハイライトをキャプチャする新しい方法を示すことに本当に興奮しています。

00:00:22.000 --> 00:00:26.000
まず、ReplayKitの概要をお伝えします。

00:00:26.000 --> 00:00:32.000
ReplayKitは、アプリケーションの画面とオーディオを録音できるフレームワークです。

00:00:32.000 --> 00:00:41.000
人々が指導ビデオを作りたいとき、または単にゲームプレイを披露したいとき、アプリ内画面録画は、保存して友達と共有できるビデオを作成します。

00:00:41.000 --> 00:00:45.000
そして、人々が作成するビデオコンテンツをもっとコントロールしたい場合はどうなりますか?

00:00:45.000 --> 00:00:48.000
フィルターやオーバーレイを追加したい場合があります。

00:00:48.000 --> 00:00:51.000
アプリ内スクリーンキャプチャでこれを行うことができます。

00:00:51.000 --> 00:01:02.000
アプリ内画面キャプチャは、オーディオとビデオのサンプルをアプリケーションプロセスに直接提供するため、作成中のコンテンツを完全に制御できます。

00:01:02.000 --> 00:01:07.000
そして、私たちは皆、ゲームをプレイする次の最高のことは、ゲームプレイをライブで見ることであることを知っています。

00:01:07.000 --> 00:01:16.000
アプリ内放送により、アプリケーションをサードパーティの放送サービスに簡単にストリーミングし、世界中で視聴できます。

00:01:16.000 --> 00:01:23.000
現在の記録機能はさまざまなユースケースをカバーしていますが、現在カバーしていないものもあります。

00:01:23.000 --> 00:01:30.000
だから、あなたのプレイヤーがすべての敵と戦い、あなたのゲームのレベルへの鍵のロックを解除したと想像してみてください、そして今、彼らはその瞬間を友達と共有したいと思っています。

00:01:30.000 --> 00:01:38.000
しかし、このレベルをプレイするのは初めてなので、彼らは何かエキサイティングなことが起こることを知らなかったし、その瞬間を捉えることができなかった。

00:01:38.000 --> 00:01:44.000
現在、プレイヤーは記憶に残るハイライトをすべて保存するために、ゲームプレイ全体を記録する必要があります。

00:01:44.000 --> 00:01:52.000
これにより、大きな録音が発生し、多くのスペースを占有するだけでなく、短いクリップにトリミングする時間が必要になります。

00:01:52.000 --> 00:01:57.000
すべてのハイライトがちょうど起こったときに記録できたら、それは素晴らしいことではないでしょうか？

00:01:57.000 --> 00:02:04.000
あるいは、さらに良いことに、ReplayKitがあなたのためにこれを行い、各瞬間のビデオクリップを提供したらどうなりますか?

00:02:04.000 --> 00:02:12.000
今年は、私たちが取り組んでいる新機能、クリップ録画を紹介できることを嬉しく思います。

00:02:12.000 --> 00:02:16.000
クリップの録音は、オーディオとビデオのサンプルのローリングバッファを保持します。

00:02:16.000 --> 00:02:24.000
クリップのエクスポートが呼び出されると、最大15秒前のサンプルを短いビデオクリップにエクスポートできます。

00:02:24.000 --> 00:02:31.000
だから今、いつ録音を開始するかを知る代わりに、いつエクスポートするかを知る必要があります。

00:02:31.000 --> 00:02:33.000
ビデオクリップをエクスポートする方法はいくつかあります。

00:02:33.000 --> 00:02:42.000
アプリケーションにUIボタンやゲームコントローラーのサポートを追加できるので、クリップをキャプチャするタイミングを手動で制御できます。

00:02:42.000 --> 00:02:47.000
ボタンをタップするだけで、必要なときに正確にクリップを取得できます。

00:02:47.000 --> 00:02:51.000
また、クリップを自動的にキャプチャするトリガーをアプリケーションに追加することもできます。

00:02:51.000 --> 00:03:00.000
これにより、彼らが完璧なコンボを得たり、最終的なボスを倒したり、最高のスピードランに勝ったりするとき、あなたはいつもそれらのエキサイティングな瞬間をキャプチャします。

00:03:00.000 --> 00:03:06.000
また、これらすべてのクリップを使用すると、パーソナライズされたユーザーエクスペリエンスを作成できます。

00:03:06.000 --> 00:03:17.000
録画のコレクションに開くカスタムオーバーレイを追加したり、プレイヤーが見て共有できるように、レベルの終わりにキャプチャされたすべてのクリップを含むハイライトリールを提示することもできます。

00:03:17.000 --> 00:03:29.000
クリップの録画はiOSとmacOSで利用可能で、既存の録画、キャプチャ、ブロードキャストAPIと並ぶ強力な機能です。

00:03:29.000 --> 00:03:38.000
他の機能と同様に、クリップの録画は、同じHD品質、低パフォーマンスの影響、および組み込みのプライバシー保護を提供します。

00:03:38.000 --> 00:03:41.000
クリップの録画はボンネットの下でどのように機能しますか?

00:03:41.000 --> 00:03:43.000
見てみましょう。 

00:03:43.000 --> 00:03:49.000
クリップの録画には、開始、停止、エクスポートの3つのAPIが含まれています。

00:03:49.000 --> 00:03:56.000
クリップバッファリングを開始するには、アプリケーションがRPScreenRecorderを呼び込んでsharedRecorderシングルトンインスタンスを取得する必要があります。

00:03:56.000 --> 00:04:01.000
共有インスタンスを使用すると、startClipBuffering APIを呼び出すことができます。

00:04:01.000 --> 00:04:07.000
その時点で、ReplayKitはアプリケーションの画面とオーディオサンプルをローリングバッファに保存します。

00:04:07.000 --> 00:04:14.000
ReplayKitが新しいサンプルを受け取るたびに、15秒より古いサンプルは破棄されます。

00:04:14.000 --> 00:04:20.000
ローリングバッファが起動した後、ReplayKitはアプリケーションがエクスポートするように指示するのを待ちます。

00:04:20.000 --> 00:04:29.000
アプリケーションがエクスポートクリップAPIを呼び出すと、ReplayKitは残りを処理し、その瞬間のビデオクリップを返します。

00:04:29.000 --> 00:04:42.000
ローリングバッファが不要になった場合、またはアプリ内ブロードキャストなどの別のReplayKit機能を使用する場合は、停止APIを呼び出すことができ、ReplayKitはセッションを破棄します。

00:04:42.000 --> 00:04:49.000
この情報を念頭に置いて、新しいクリップAPIを実装するサンプルプロジェクトをお見せしましょう。

00:04:49.000 --> 00:04:53.000
あなたはすでに昨年のセッションからこのサンプルプロジェクトに精通しているかもしれません。

00:04:53.000 --> 00:04:57.000
更新されたサンプルプロジェクトには、クリップのコードが含まれるようになりました。

00:04:57.000 --> 00:05:00.000
このコードを見てみましょう。 では、

00:05:00.000 --> 00:05:07.000
他のレコーディングセッションと同様に、メインストーリーボードの「クリップの開始」ボタンに関連付けられたIBActionがあります。

00:05:07.000 --> 00:05:14.000
このボタンは、まだアクティブでない場合はクリップバッファリングを開始し、アクティブの場合はクリップバッファリングを停止するために使用されます。

00:05:14.000 --> 00:05:20.000
では、クリップバッファリングを開始すると何が起こるかを見てみましょう。

00:05:20.000 --> 00:05:22.000
クリップバッファリングを開始するコードは次のとおりです。

00:05:22.000 --> 00:05:30.000
RPScreenRecorderから共有レコーダーインスタンスを取得し、完了ハンドラでstartClipBufferingを呼び出します。

00:05:30.000 --> 00:05:38.000
ここでは、完了ハンドラ内で、UIの更新など、起動時に発生したエラーを処理する必要があります。

00:05:38.000 --> 00:05:45.000
エラーがない場合は、UIを更新して、録画が現在アクティブであることを示す必要があります。

00:05:45.000 --> 00:05:50.000
開始と同様に、サンプルプロジェクトにはストップクリップバッファリング方法があります。

00:05:50.000 --> 00:05:56.000
ここで共有インスタンスを取得しますが、今回はstopClipBuffering APIを呼び出します。

00:05:56.000 --> 00:06:06.000
完了ハンドラでは、停止中に発生したエラーを処理する必要があり、UIを更新して、録画していないことを示す必要があります。

00:06:06.000 --> 00:06:13.000
クリップバッファリングの開始と停止のコードを確認したので、クリップをエクスポートするために必要なコードを見てみましょう。

00:06:13.000 --> 00:06:18.000
これは、「クリップのエクスポート」ボタンに関連付けられたIBActionのコードです。

00:06:18.000 --> 00:06:22.000
このアクションは、人がクリップを生成することを決定したときにトリガーされます。

00:06:22.000 --> 00:06:31.000
このアプローチに制限されず、独自のアプリケーショントリガーに基づいてクリップを自動的にエクスポートする可能性があることを覚えておいてください。

00:06:31.000 --> 00:06:41.000
ここで、積極的に録画していて、以前のstartClipBufferingメソッドからボタンが有効になっている場合、exportClip関数が呼び出されます。

00:06:41.000 --> 00:06:50.000
exportClip APIを呼び出すには、URLとクリップの継続時間を指定する必要があります。

00:06:50.000 --> 00:06:56.000
開始APIと停止APIと同様に、完了ハンドラーのエラーを処理します。

00:06:56.000 --> 00:07:01.000
エラーがない場合は、指定されたURLにクリップがあるはずです。

00:07:01.000 --> 00:07:07.000
クリップにアクセスすると、独自のユーザーエクスペリエンスを構築して整理できます。

00:07:07.000 --> 00:07:13.000
ここの私のサンプルコードでは、クリップは単に写真に保存されます。

00:07:13.000 --> 00:07:15.000
そして、それだけです!

00:07:15.000 --> 00:07:19.000
これら3つのAPIを使用すると、アプリケーションに録画するクリップを追加できるようになりました。

00:07:19.000 --> 00:07:26.000
指定されたURLのクリップに直接アクセスできるため、独自のアプリ内体験を構築できます。

00:07:26.000 --> 00:07:32.000
前述のように、クリップを取得するもう1つの方法は、ゲームコントローラーのサポートを追加することです。

00:07:32.000 --> 00:07:37.000
ゲームコントローラーのフレームワークには、クリップの録画が組み込まれます。

00:07:37.000 --> 00:07:43.000
ゲームコントローラーからエクスポートされたクリップは、写真またはデスクトップに直接保存されることに注意してください。

00:07:43.000 --> 00:07:51.000
したがって、生成されたクリップで独自のアプリ内体験を作成するには、ReplayKitクリップAPIを実装する必要があります。

00:07:51.000 --> 00:08:04.000
ReplayKitとゲームコントローラーフレームワークの両方を統合する場合は、RPScreenRecorderで利用可能なプロパティと記録プロパティの両方にキー値観察を使用していることを確認することをお勧めします。

00:08:04.000 --> 00:08:13.000
また、必要に応じてアプリケーションの状態を更新できるように、必ずプロトコルRPScreenRecorderDelegateに従ってください。

00:08:13.000 --> 00:08:17.000
そして、クリップ録画をアプリケーションに統合するのは簡単です。

00:08:17.000 --> 00:08:23.000
クリップの録画により、アプリケーションはエキサイティングな瞬間をすべてキャプチャする準備が整います。

00:08:23.000 --> 00:08:29.000
あなたが作成するすべてのクリップと新しいユーザーエクスペリエンスを見るのを楽しみにしています。

00:08:29.000 --> 00:08:31.000
私たちのセッションをご覧いただきありがとうございます。

00:08:31.000 --> 00:08:34.000
素晴らしいWWDCをお過ごしください。

00:08:34.000 --> 23:59:59.000
[パーカッシブミュージック]。

