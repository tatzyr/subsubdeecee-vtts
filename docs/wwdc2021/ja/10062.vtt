WEBVTT

00:00:00.000 --> 00:00:05.000
♪ベース音楽の演奏♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:15.000
Mathieu Tozer: こんにちは、私はMathieu Tozerで、macOS SwiftUIチームのエンジニアです。

00:00:15.000 --> 00:00:22.000
SwiftUIは、その中核となるマルチプラットフォームフレームワークであり、どこでも素晴らしいアプリを簡単に構築できるようにすることを目的としています。

00:00:22.000 --> 00:00:30.000
新しいコンセプトやAPIに近づくときは、一歩下がって、各プラットフォームがその機能に何を期待しているかを検討します。

00:00:30.000 --> 00:00:40.000
SwiftUIの素晴らしい点は、そのAPIと概念がすべてのプラットフォームに適用されることです。この講演では、それらがMacのためにどのように微調整されているかを紹介します。

00:00:40.000 --> 00:00:45.000
これはコードアロングで、スケルトンプロジェクトをダウンロードして、私と一緒にMacアプリを書きます。

00:00:45.000 --> 00:00:53.000
始める前に、アプリの作業中に参照する素晴らしいMacアプリに入る重要な原則のいくつかを見てみましょう。

00:00:53.000 --> 00:00:59.000
これらは柔軟で、親しみやすく、広大で、正確です。

00:00:59.000 --> 00:01:04.000
Macアプリは柔軟性があり、私たち一人一人が個別にそれらを使用する方法に適応します。

00:01:04.000 --> 00:01:14.000
これは、キーボード、マウス、トラックパッド、スイッチコントロール、さらにはiPadからMacを物理的に使用する方法から始まり、ソフトウェア自体にまで及びます。

00:01:14.000 --> 00:01:26.000
テーブルの列、サイドバー、詳細パネル、表示モード、ウィンドウを最適な方法で調整することで、ワークフローをカスタマイズでき、インターフェイスが適応します。

00:01:26.000 --> 00:01:29.000
そして同時に、Macアプリは馴染みがあります。

00:01:29.000 --> 00:01:37.000
システムと一致するコントロールとデザインパターンを使用すると、共通の視覚言語のおかげで、アプリがすぐに親しみやすくなります。

00:01:37.000 --> 00:01:47.000
たとえば、ファイルメニューは、私が常に新しいものを作成するために到達する場所であり、検索バーはすべてのアプリツールバーに一貫した外観を持っています。

00:01:47.000 --> 00:02:00.000
ウィンドウの領域をゾーニングし、ナビゲーションと階層をサイドバーに、コンテンツを中央に、ユーザー機能を上部と右側に配置することで、アプリをより親しみやすくすることができます。

00:02:00.000 --> 00:02:04.000
しかし、その一貫性は、アプリがユニークで目立つ余地を残すことができます。

00:02:04.000 --> 00:02:08.000
アプリのアクセントカラーなど、カスタマイズを追加できます。

00:02:08.000 --> 00:02:14.000
また、カスタムコントロールが必要な場合は、システムコントロールに適合するように設計する必要があります。

00:02:14.000 --> 00:02:16.000
Macアプリは広大です。

00:02:16.000 --> 00:02:25.000
大型で、多くの場合、複数のディスプレイは、ドリルインスタイルのナビゲーションスタックに隠されることなく、より多くの情報を画面上に整理できることを意味します。

00:02:25.000 --> 00:02:38.000
具体的には、アウトラインビューとサムネイルプレビュー付きのサイドバー、一時的な要素のポップオーバー、コントロールのペインを切り替えるタブ、コンテンツを表示するディスクロージャーグループなどのコントロールを使用することを意味します。

00:02:38.000 --> 00:02:41.000
最後に、Macアプリは正確です。

00:02:41.000 --> 00:02:54.000
彼らは大きなウィンドウを持っているだけでなく、彼らのビューはまた、コンテンツとコントロールの高密度をもたらすより狭い余白と間隔を持っており、これらのコントロールはマウスポインタで使用するように設計されています。

00:02:54.000 --> 00:03:04.000
とはいえ、密度の増加は複雑さを増大させる必要はありません。シンプルで単一の目的を果たすアプリは、依然として素晴らしいMacアプリです。

00:03:04.000 --> 00:03:07.000
あなたはおそらく、お気に入りのMacアプリからこれらのアイデアを認識するでしょう。

00:03:07.000 --> 00:03:11.000
次に、これらのアイデアを実際に適用します。

00:03:11.000 --> 00:03:13.000
私はあなたと一緒にMacアプリを作るつもりです。

00:03:13.000 --> 00:03:19.000
ここで一時停止を押して、このセッションの開始点と終了点を含むプロジェクトをダウンロードします。

00:03:19.000 --> 00:03:21.000
私はガーデニングが本当に好きです。

00:03:21.000 --> 00:03:26.000
何年にもわたって私の庭を追跡するための専用アプリがあれば素晴らしいと思います。

00:03:26.000 --> 00:03:28.000
私たちはMac用にこのアプリを構築するつもりです。

00:03:28.000 --> 00:03:38.000
柔軟なウィンドウや高い情報密度などのプラットフォーム機能を活用し、macOSで素晴らしい方法でアプリのデータを本当にやり取りできるようにします。

00:03:38.000 --> 00:03:43.000
左側には、すべてのガーデンプロジェクトのアウトラインビューを示すサイドバーがあります。

00:03:43.000 --> 00:03:49.000
庭を選択して、テーブルビューまたはギャラリーですべての植物の詳細を見ることができます。

00:03:49.000 --> 00:03:51.000
このアプリの実装を始めましょう。

00:03:51.000 --> 00:03:55.000
スタータープロジェクトでSession1.workspaceを開きます。

00:03:55.000 --> 00:04:04.000
私たちは植物の配列を含む庭の構造を持っており、私たちをスピードアップするためにいくつかのビューとヘルパーを持っていますが、私たちはContentViewで開始します。

00:04:04.000 --> 00:04:10.000
サイドバーを折りたたんで、Xcodeのプレビューのためのスペースを作るつもりです。

00:04:10.000 --> 00:04:12.000
私たちのMacアプリは2列のレイアウトになります。

00:04:12.000 --> 00:04:15.000
このテキストビューをNavigationViewに埋め込みます。

00:04:15.000 --> 00:04:22.000
パディングを削除して、テキストをサイドバーに変更します。

00:04:22.000 --> 00:04:25.000
2番目の列は、私たちの植物テーブル用です。

00:04:25.000 --> 00:04:32.000
この平坦化された階層は、Macの大画面での広範なナビゲーション体験のための強固な基盤を提供します。

00:04:32.000 --> 00:04:34.000
サイドバーに行きましょう。

00:04:34.000 --> 00:04:43.000
Commandキーを押しながらクリックすると、このビューを独自のサブビューに抽出し、名前を「サイドバー」に変更します。

00:04:43.000 --> 00:04:48.000
私は自分の店にアクセスする必要があります。

00:04:48.000 --> 00:04:57.000
そして、今年の私の庭のリストを見せたいです。

00:04:57.000 --> 00:05:04.000
そして、葉のシステムイメージでラベルに各庭の名前を表示します。

00:05:04.000 --> 00:05:13.000
どの庭園が最新であるかを確認し、歴史を独自のセクションに配置し、詳細表示三角形をクリックして表示するものを正確に制御できるようにしたいと思います。

00:05:13.000 --> 00:05:21.000
複雑さを管理するための使い慣れた方法を提供しながら、ナビゲーションシステムをさらに平坦化するDisclosureGroupを使用します。

00:05:21.000 --> 00:05:29.000
リストをForEachに変更し、Commandキーを押しながらクリックすると、リストに埋め込むことを選択できます。

00:05:29.000 --> 00:05:34.000
反復するコンテンツはすでに定義されているので、それをクリアすることができます。

00:05:34.000 --> 00:05:43.000
さて、この式は以前と同じですが、これでForEachをDisclosureGroupに埋め込むことができます。

00:05:43.000 --> 00:05:48.000
そして、systemImageの場合、まあ、これは少し一口ですが、ここに行きます。

00:05:48.000 --> 00:05:53.000
Chart.bar.doc.horizontal画像を使用します。

00:05:53.000 --> 00:06:00.000
オーケー、いいね。私は自分の庭をアウトライン構造で整理し、私が見るものを制御する柔軟性を与えてくれます。

00:06:00.000 --> 00:06:09.000
しかし、現在のグループをデフォルトで開いて、アプリを開くたびに拡張状態が持続するようにしたいので、アプリをより身近にします。

00:06:09.000 --> 00:06:14.000
expansionStateを保存するには、サイドバーにプロパティを追加します。

00:06:14.000 --> 00:06:25.000
@SceneStorageプロパティラッパーで注釈を付け、expensionStateのキーを提供します。

00:06:25.000 --> 00:06:31.000
これは、アプリが終了したときにこのプロパティをオフロードし、ウィンドウが復元されたときにリロードするようにSwiftUIに指示します。

00:06:31.000 --> 00:06:40.000
今、私は今年のディスクロージャーグループにバインディングを渡します。

00:06:40.000 --> 00:06:43.000
...そして今、現在のグループが拡大されています。

00:06:43.000 --> 00:06:55.000
サイドバーが少しきついと思うので、最小幅を設定するだけです。

00:06:55.000 --> 00:07:04.000
セクションに履歴を表示し、先ほど作成したGardenHistoryOutlineビューを使用します。

00:07:04.000 --> 00:07:15.000
私もその拡張状態を渡します。

00:07:15.000 --> 00:07:21.000
私の貧しい植物が水を必要とするときに強調するためにバッジを追加するつもりです。

00:07:21.000 --> 00:07:26.000
OK、右側の詳細を見るには、選択を追加する必要があります。

00:07:26.000 --> 00:07:31.000
選択した庭のIDにバインディングを追加します。

00:07:31.000 --> 00:07:36.000
そして、その選択をリストへの拘束力として提供できます。

00:07:36.000 --> 00:07:44.000
サイドバーの親であるContentViewは、値を保持し、サイドバーとテーブルにバインディングを渡します。

00:07:44.000 --> 00:07:57.000
だから私もこれをここにコピーして、実行の合間に持続するように@SceneStorageにポップするつもりです。

00:07:57.000 --> 00:08:04.000
そして、サイドバーにも渡します。

00:08:04.000 --> 00:08:06.000
私のサイドバーは良さそうだと思います。

00:08:06.000 --> 00:08:13.000
ディスクロージャーの三角形で表示されるものを制御でき、Macが再起動すると、そのままに復元されます。

00:08:13.000 --> 00:08:17.000
私たちは今、GardenDetailビューから始めることができます。

00:08:17.000 --> 00:08:22.000
選択にもバインディングが必要です。

00:08:22.000 --> 00:08:29.000
そして、Commandキーを押しながらクリックすると、ビューの定義にジャンプできます。

00:08:29.000 --> 00:08:33.000
このビューには、すでにストアのプロパティと、まもなく使用する他のプロパティが含まれています。

00:08:33.000 --> 00:08:39.000
また、庭の名前と年をナビゲーションタイトルとサブタイトルとして表示するように設定されています。

00:08:39.000 --> 00:08:49.000
詳細ビューの独自の変数でテーブルを実装し、ここで本文から使用します。

00:08:49.000 --> 00:08:57.000
庭の植物のリストを表示することから始めましょう。

00:08:57.000 --> 00:09:04.000
他の植物のプロパティを水平スタックビューで表示できますが、表示するデータがたくさんあり、その多くはテキストです。

00:09:04.000 --> 00:09:11.000
また、植物をアルファベット順または植えた順に並べ替える機能を追加したいと思います。

00:09:11.000 --> 00:09:14.000
これらの理由から、植物をテーブルに表示します。

00:09:14.000 --> 00:09:23.000
テーブルは、画面スペースをうまく活用して、広範なUIでデータを表示、フィルタリング、並べ替え、編集する正確な方法を提供します。

00:09:23.000 --> 00:09:28.000
一般的に、表示する視覚的な要素があり、複雑なソートを必要としない場合は、リストを使用してください。

00:09:28.000 --> 00:09:32.000
それ以外の場合は、複数の列が必要な場合は、テーブルを検討してください。

00:09:32.000 --> 00:09:43.000
リストをテーブルに置き換え、各行を分割するためのいくつかの列を提供します。

00:09:43.000 --> 00:09:47.000
そして、それと同じくらい簡単に、私は単一の列を持つテーブルを持っています!

00:09:47.000 --> 00:09:49.000
では、さらにいくつかの列を追加しましょう。

00:09:49.000 --> 00:09:55.000
各植物が成長するのにどれくらいの時間がかかるか知りたいので、そのための列を追加します。

00:09:55.000 --> 00:10:02.000
重要なパスを提供する代わりに、TableColumnのコンテンツクロージャを開き、植物を手渡します。

00:10:02.000 --> 00:10:12.000
これで、ここで好きなビューを提供できますが、daysToMaturityプロパティは整数なので、フォーマットされた文字列でテキストビューを提供します。

00:10:12.000 --> 00:10:16.000
私はたくさんの植物を持っていて、いつももっと植えています。

00:10:16.000 --> 00:10:21.000
行を選択して並べ替えることができることは、植物を整理しておくのに役立ちます。

00:10:21.000 --> 00:10:24.000
したがって、まず選択範囲にバインディングを追加できます。

00:10:24.000 --> 00:10:32.000
テーブルをソート可能にする場合は、sortOrderバインディングと各列へのキーパスを提供する必要があります。

00:10:32.000 --> 00:10:37.000
そのため、daysToMaturity列にキーパスを追加する必要があります。

00:10:37.000 --> 00:10:43.000
テーブルのパワーを本当に曲げるために、ViewsフォルダのTableColumnsファイルからさらにいくつかの列を貼り付けましょう。

00:10:43.000 --> 00:10:54.000
彼らは私たちにいくつかの重要な日付を設定し、お気に入りとして植物にフラグを立てます。

00:10:54.000 --> 00:11:01.000
とりあえずプレビューをオフにして、アプリを実行します。

00:11:01.000 --> 00:11:04.000
このすべての植物データを見てください!

00:11:04.000 --> 00:11:10.000
行を選択でき、列ヘッダーをクリックして並べ替えることができます。

00:11:10.000 --> 00:11:21.000
これは素晴らしいことですが、今は、テーブルに新しい植物を追加したり、複数の植物に水やりとしてマークしたりするなど、庭を管理するために必要な多くの基本的なアクションを実行する方法がありません。

00:11:21.000 --> 00:11:30.000
ツールバーは、この種のアクションに馴染みのある場所です。これは、macOSユーザーがアプリの使用方法を発見できる標準的な場所です。

00:11:30.000 --> 00:11:39.000
植物を追加するボタンから始めて、ここにツールバーを追加できます。

00:11:39.000 --> 00:11:48.000
「Add Plant」と「plus」というタイトルのラベルを付けます。

00:11:48.000 --> 00:11:54.000
私は構築して実行するつもりです、そして今、私は私のテーブルに植物を追加することができます!

00:11:54.000 --> 00:12:02.000
アプリのインターフェースのカスタマイズは、庭の表示方法など、ツールバーにも表示できます。

00:12:02.000 --> 00:12:07.000
ここにDisplayModePickerを追加できます。

00:12:07.000 --> 00:12:15.000
私はたくさんの植物を持っていますが、それらを注文することができますが、迅速かつ正確に行数を絞り込むのは素晴らしいことです。

00:12:15.000 --> 00:12:26.000
私たちは常にMacのハードウェアキーボードにすぐにアクセスできるので、検索可能な修飾子をテーブルに追加し、searchTextにバインディングを渡します。

00:12:26.000 --> 00:12:33.000
searchTextは、テーブルに渡される植物配列をフィルタリングするために使用する詳細ビューのプロパティです。

00:12:33.000 --> 00:12:37.000
そして、検索フィルタリングを追加するために必要なのはそれだけです!

00:12:37.000 --> 00:12:45.000
窓の構造が設定されていますが、野菜パッチと裏庭の花壇を同時に見たいです。本当に見たいです。

00:12:45.000 --> 00:12:48.000
さて、私たちはすでにこの能力を持っていることがわかりました。

00:12:48.000 --> 00:12:56.000
ファイルメニューから新しいウィンドウを開くことができ、各ウィンドウには独自の選択とサイドバーの展開状態があります。

00:12:56.000 --> 00:13:03.000
もちろん、各ツールバーは独自のウィンドウに属しているので、野菜パッチや花壇に植物を追加できます。

00:13:03.000 --> 00:13:06.000
私の植物は定期的に水をやる必要があります。

00:13:06.000 --> 00:13:13.000
植物を並べ替えてろ過し、いくつかの行を選択し、一度に散水済みとしてマークできるようにしたいです。

00:13:13.000 --> 00:13:17.000
これらのアクションを実行するためのコマンドをmacOSのメインメニューに追加します。

00:13:17.000 --> 00:13:23.000
メニューは、検索することさえできるおなじみのUIであり、人々があなたのアプリを探索するのに役立ちます。

00:13:23.000 --> 00:13:30.000
カスタムコマンドを追加する前に、システムが提供するコマンドを追加することから始めましょう。

00:13:30.000 --> 00:13:32.000
GardenAppファイルに移動します。

00:13:32.000 --> 00:13:38.000
WindowGroupにコマンド修飾子を追加し、SidebarCommands()を追加します。

00:13:38.000 --> 00:13:44.000
これで、サイドバーは[表示]メニューまたはキーボードショートカットで切り替えることができます。

00:13:44.000 --> 00:13:46.000
今、私たちのカスタムコマンドのために。

00:13:46.000 --> 00:13:51.000
メインメニューフォルダでPlantCommandsファイルを開きます。

00:13:51.000 --> 00:13:59.000
一番前の窓の庭にアクションを送信できるようにしたいので、庭の変数が必要です。

00:13:59.000 --> 00:14:08.000
@FocusedBindingプロパティラッパーを使用して、FocusedValuesの拡張機能で定義したカスタムプロパティへのキーパスを渡します。

00:14:08.000 --> 00:14:20.000
植物コマンドメニュー項目は、どの植物がテーブルで選択されているかを知る必要があるため、散水済みとしてチェックできるため、選択も渡す必要があります。

00:14:20.000 --> 00:14:28.000
本体に移動すると、コマンドがビューと同様に宣言されていることに気付くでしょう。つまり、独自のコマンドを作成し、メニューを表すコマンドのカスタムツリーを構築できます。

00:14:28.000 --> 00:14:30.000
まず、追加の植物アクションです。

00:14:30.000 --> 00:14:41.000
これで、すでにツールバーから植物を追加できますが、メインメニューにはアプリが実行できるすべてのアクションが含まれているはずですが、ツールバーは通常、便宜上いくつかのサブセットにすぎません。

00:14:41.000 --> 00:14:46.000
これは何かを作るためのアクションなので、おなじみの場所に置きます。

00:14:46.000 --> 00:14:52.000
CommandGroupを使用して、ファイルメニューのnewItemの前に配置します。

00:14:52.000 --> 00:14:57.000
私の散水アクションのために、私はそれを「植物」と呼ばれる新しいCommandMenuに入れたいです。

00:14:57.000 --> 00:15:07.000
これは、アプリの表示メニューの横に表示されます。

00:15:07.000 --> 00:15:14.000
これらのビューには、単に庭を変異させるボタンと、ボタンの動作を定義する修飾子が含まれています。

00:15:14.000 --> 00:15:17.000
複数のウィンドウがありますが、メニューバーは1つしかありません。

00:15:17.000 --> 00:15:24.000
花壇にニンジンを入れたくないので、メニューはどの庭にアクションを送るべきかをどうやって知ることができますか?

00:15:24.000 --> 00:15:32.000
GardenDetailビューに戻って、フォーカスされたSceneValue修飾子をテーブルに追加し、キーパスとバインディングを渡します。

00:15:32.000 --> 00:15:37.000
選考にも同じことをします。

00:15:37.000 --> 00:15:44.000
これは、シーン全体がフォーカスされているときに、指定されたキーパスのこれらの値を公開するようにシステムに指示します。

00:15:44.000 --> 00:15:50.000
最後に、GardenAppファイルでは、先ほど追加したSidebarCommands()の後に新しいコマンドを追加する必要があります。

00:15:50.000 --> 00:15:54.000
SwiftUIは、それらをメインメニューに追加することを知っています。

00:15:54.000 --> 00:15:59.000
メインメニューから一番前の窓の庭に植物を挿入できるようになりました。

00:15:59.000 --> 00:16:08.000
また、水やりとしてマークする必要がある植物を選択し、植物メニューから選択することもできます。

00:16:08.000 --> 00:16:17.000
すべてのアプリのアクションにメニューを追加すると、キーボードショートカットを有効にし、アプリで物事を成し遂げるためのさまざまな方法を提供することで、アプリの柔軟性が向上します。

00:16:17.000 --> 00:16:24.000
また、アクションの発見可能性を支援し、人々がアプリの機能を探求し、発見できるようにします。

00:16:24.000 --> 00:16:37.000
そういえば、パート2では、アクセントカラー、テーブル間のドラッグアンドドロップ、iOSデバイスで植物の写真を撮って添付する方法など、ジェフと一緒にアプリにより多くの機能と磨きを追加します。

00:16:37.000 --> 00:16:38.000
今日は多くのことを取り上げました。

00:16:38.000 --> 00:16:48.000
SwiftUIを使用してMacアプリのインターフェースを一から構築し、各コンポーネントが優れたMacアプリを作ることができるものにどのように貢献するかを示しました。

00:16:48.000 --> 00:16:49.000
見てくれてありがとう!

00:16:49.000 --> 23:59:59.000
♪

