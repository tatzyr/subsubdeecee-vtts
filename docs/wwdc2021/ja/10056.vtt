WEBVTT

00:00:00.000 --> 00:00:17.000
こんにちは、私の名前はニルス・ベックです。「M1を搭載したMac上の素晴らしいiPadとiPhoneアプリの資質」へようこそ。

00:00:17.000 --> 00:00:22.000
100万以上のiPadとiPhoneアプリがすでにMac App Storeで入手可能です。

00:00:22.000 --> 00:00:28.000
macOS Big Surでの体験は素晴らしく、macOS Montereyでさらに改善しました。

00:00:28.000 --> 00:00:53.000
このビデオでは、いくつかのiOS APIを対応するMac機能にマッピングする方法、M1でMacでアプリを輝かせるのに役立ついくつかの一般的なベストプラクティス、macOS Big SurソフトウェアアップデートとmacOS Montereyで行った改善について議論し、Mac App Storeの展開の考慮事項で締めくくります。

00:00:53.000 --> 00:01:00.000
M1を搭載したMac上のiPadとiPhoneアプリは、既存のアプリのリーチをMacに拡大する最も簡単な方法です。

00:01:00.000 --> 00:01:11.000
これは、iOS App Storeに提出および承認された未変更のiPadまたはiPhoneアプリで、Mac App Storeを通じてM1 Macを持っている人に提供されます。

00:01:11.000 --> 00:01:15.000
これを可能にするために、私たちは互換性に重点を置いています。

00:01:15.000 --> 00:01:20.000
システムAPIは、可能な限り自然なMacと同等のものにマッピングされます。

00:01:20.000 --> 00:01:27.000
私たちの目的は、あなたが何も変更を加えることなく、Macでスムーズなアプリ体験を確保することです。

00:01:27.000 --> 00:01:30.000
そして、ほとんどの既存のアプリはうまく機能します!

00:01:30.000 --> 00:01:36.000
これには、小さなiPhoneユーティリティから最先端のiPadゲームやProアプリまで、あらゆるものが含まれます。

00:01:36.000 --> 00:01:39.000
さまざまな拡張機能もサポートされています。

00:01:39.000 --> 00:01:49.000
たとえば、共有拡張機能、WidgetKitウィジェット、写真編集拡張機能、VPNネットワーク拡張機能、オーディオユニットなどです。

00:01:49.000 --> 00:01:56.000
したがって、既存のiPadまたはiPhoneアプリは、箱から出してすぐにMacですでにうまく機能する可能性が非常に高いです。

00:01:56.000 --> 00:02:13.000
もちろん、テキストインタラクション、コピー&amp;ペースト、Macメニューバーなど、すべての基本的な機能をサポートしていますが、バックグラウンドアプリの更新、ユーザー通知、カメラアクセス、Siriの意図など、多くの高度な機能もあります。

00:02:13.000 --> 00:02:22.000
これらのトピックの多くは、ビデオ「AppleシリコンMacのiPadとiPhoneアプリ」で議論されているので、詳細についてはそれをチェックしてください。

00:02:22.000 --> 00:02:30.000
また、アプリがMacが提供するものをさらに活用したい場合は、アプリのMac Catalystバージョンを構築することを検討してください。

00:02:30.000 --> 00:02:38.000
それについては、ビデオ「優れたMac Catalystアプリの資質」と「Mac Catalystの新機能」で詳しく知ることができます。

00:02:38.000 --> 00:02:44.000
さて、先ほど述べたAPIのいくつかについて詳しく調べてみましょう。

00:02:44.000 --> 00:02:53.000
あなたはすでにiPadとiPhoneであなたのアプリを素晴らしいものにするためにこれらを使用している可能性があり、私たちはMacで同じ素晴らしい機能をシームレスに提供するためにそれらをブリッジしました。

00:02:53.000 --> 00:03:02.000
当然のことながら、テキストフィールドへのテキスト入力やUIKeyCommandキーボードショートカットにMacキーボードを使用できます。

00:03:02.000 --> 00:03:11.000
しかし、より多くの制御が必要で、独自のキープレス処理を書きたい場合は、UIResponderのUIPress APIでそれを行うことができます。

00:03:11.000 --> 00:03:21.000
すべてのMacには物理的なキーボードが搭載されているため、iPadとiPhoneで物理的なキーボードのサポートを追加するのに時間がかかったアプリは、同時にMacで大幅に改善されます。

00:03:21.000 --> 00:03:24.000
次に、メニューバーについて話しましょう。

00:03:24.000 --> 00:03:32.000
念のため、Macのメニューバーは、アプリの機能とキーボードショートカットの発見可能性を支援することを目的としています。

00:03:32.000 --> 00:03:38.000
メニューバーの構造は起動時に決定され、その後は多かれ少なかれ一定のままである必要があります。

00:03:38.000 --> 00:03:46.000
アイテムは追加または削除されませんが、現在適用されているかどうかに応じて、有効または無効になります。

00:03:46.000 --> 00:03:52.000
アプリの機能を考慮して、アプリのメニューバーに自動的に入力します。

00:03:52.000 --> 00:04:00.000
たとえば、メニュー項目を追加して、新しいウィンドウを作成したり、リッチテキストを操作したり、デバイスの向きを変更したりできます。

00:04:00.000 --> 00:04:16.000
keyCommandsプロパティを介してUIRespondersに直接接続されているUIKeyCommandsはメニューバーには表示されませんが、適用されるたびにキーボードショートカットがメニュー項目のショートカットよりも優先されることに注意してください。

00:04:16.000 --> 00:04:23.000
iOS 13で導入した最新のUIMenuBuilder APIをすでに使用しているかもしれません。

00:04:23.000 --> 00:04:27.000
これにより、UIKeyCommandsにセマンティック構造が追加されます。

00:04:27.000 --> 00:04:37.000
この構造は、キーボード付きのiPadでCommandキーを押したままに表示されるキーボードショートカットメニューに表示されます。

00:04:37.000 --> 00:04:46.000
Macでは、ビルダーに渡されるデフォルトの構造は異なりますが、構造へのカスタマイズはメインメニューに反映されます。

00:04:46.000 --> 00:04:56.000
UIKeyCommandsは、アクションに適用可能なターゲットを見つけるためにレスポンダーチェーンに依存しており、これはメニュー項目が有効になっているかどうかを決定します。

00:04:56.000 --> 00:05:07.000
これについては、「iPadアプリを次のレベルに引き上げる」、「iPadキーボードナビゲーションに焦点を当てる」、「優れたMac Catalystアプリの資質」などのビデオをご覧ください。

00:05:07.000 --> 00:05:17.000
iPadとiPhoneでドラッグアンドドロップを使用するアプリの場合、UIDragInteractionとUIDropInteractionを使用すると、これは自動的にMacにも引き継がれます。

00:05:17.000 --> 00:05:27.000
これにより、QrafterからデスクトップにQRコードをドラッグしているこの例のように、人々はあなたのアプリと他のアプリの間でコンテンツをシームレスにドラッグすることができます。

00:05:27.000 --> 00:05:37.000
また、UIPrintInteractionControllerで印刷するアプリの場合、コードで印刷が開始されると、これは自動的にMacの印刷ダイアログにブリッジされます。

00:05:37.000 --> 00:05:53.000
さらに良いことに、新しいInfo.plistキー「UIApplicationSupports PrintCommand」を採用し、対応する標準印刷アクションを実装すると、PDFメニュー項目として印刷とエクスポートが自動的にアプリのメニューバーに追加されます。

00:05:53.000 --> 00:05:59.000
この新しいAPIの詳細については、「Mac Catalystの新機能」をご覧ください。

00:05:59.000 --> 00:06:04.000
多くのアプリは設定バンドルを使用しており、ここからMacスタイルの環境設定パネルを自動的に生成します。

00:06:04.000 --> 00:06:12.000
設定バンドルにクレジットを入れることも一般的であり、そのようなケースを特定し、そのテキストを[About]ボックスに移動します。

00:06:12.000 --> 00:06:20.000
しかし、Macの「情報」ボックスに表示されている内容をより詳細に制御したい場合は、バンドルにクレジットファイルを追加するオプションもあります。

00:06:20.000 --> 00:06:27.000
Macアプリと同じように、RTF、RTFD、またはHTMLファイルを使用できます。

00:06:27.000 --> 00:06:33.000
アプリを素晴らしいiPadアプリにするのに役立つiPad中心のAPIがいくつかあります。

00:06:33.000 --> 00:06:35.000
これらはすべてMacで素晴らしく出くわします。

00:06:35.000 --> 00:06:40.000
だから、素晴らしいiPadアプリを作ることで、M1を搭載したMacでもアプリをより良くすることができます。

00:06:40.000 --> 00:06:56.000
アプリがUIApplicationSupports MultipleScenes Info.plistキーに従って複数のシーンをサポートしている場合、各シーンは別々のウィンドウに変換され、新しいシーンを作成するためにメニュー項目を自動的に追加します。

00:06:56.000 --> 00:07:06.000
Macでは、システム全体の設定は、アプリが終了したときにすべてのウィンドウが閉じられるかどうか、または次の起動時に既存のウィンドウが復元されるかどうかを決定します。

00:07:06.000 --> 00:07:16.000
アプリが複数のシーンをサポートしている場合は、この設定を尊重しますので、すべてのシーンが切断されたり、場合によっては状態の復元が行われなくても驚かないでください。

00:07:16.000 --> 00:07:23.000
一方、iPadのマルチタスクサポートは、macOSでサイズ変更可能なウィンドウに自動的に変換されます。

00:07:23.000 --> 00:07:29.000
あなたのアプリはすでにiPadで動的なレイアウト変更をサポートしているので、Macではライブサイズ変更ウィンドウを取得できます。

00:07:29.000 --> 00:07:39.000
UIWindowSceneのminimumSizeとmaximumSize APIを使用して、許容されるシーンサイズの範囲を制限できます。

00:07:39.000 --> 00:07:43.000
ウィンドウのサイズが変更されると、ウィンドウのシーンサイズのみが変更されることに注意してください。

00:07:43.000 --> 00:07:50.000
一方、UIの画面サイズは引き続きデバイスサイズを報告し続けますが、この場合は変更されません。

00:07:50.000 --> 00:07:59.000
したがって、iPadでもレイアウト計算に画面サイズを使用しないでください。そうしないと、UI要素が間違った場所になります。

00:07:59.000 --> 00:08:07.000
アプリがデバイスの画面全体を制御することを期待している場合は、固定のシーンサイズとアスペクト比を使用します。

00:08:07.000 --> 00:08:15.000
しかし、ウィンドウの内容は、アプリに透過的な方法で、必要に応じてスケールアップまたはスケールダウンすることができます。

00:08:15.000 --> 00:08:27.000
また、アプリが複数のユーザーインターフェイスの向きをサポートしている場合は、自動的に追加されたメニューバーの項目を使用するか、ウィンドウの端をドラッグすることで、ウィンドウの向きを変更できます。

00:08:27.000 --> 00:08:38.000
ここでは、メニューバーの項目を使用してChess.comアプリの向きを変更しており、ユーザーインターフェイスは各デバイスの向きを最適に活用するように適応します。

00:08:38.000 --> 00:08:54.000
これらのマッピングやその他のマッピングは、iPadやiPhoneアプリをMacに持ち込む際の摩擦のほとんどを取り除くことができますが、Macを含むすべてのプラットフォームでアプリがうまく機能するようにするために従うべきコーディングプラクティスに触れましょう。

00:08:54.000 --> 00:09:07.000
Appleフレームワークを使用する場合は、当社のフレームワークの文書化されていないメソッドがMacに存在しないか、いつでも変更される可能性があるため、公式にサポートされているAPIのみを使用することが重要です。

00:09:07.000 --> 00:09:12.000
Macでは異なる可能性があるため、ファイルシステムの場所へのハードコーディングパスは避けてください。

00:09:12.000 --> 00:09:17.000
たとえば、パスの前に「/private」または「var mobile」を付けないでください。

00:09:17.000 --> 00:09:23.000
代わりに、適切なAPIを使用して、実行時に各パスを決定します。

00:09:23.000 --> 00:09:39.000
同様に、直接制御下にないUIの場合、Macでは大きく異なる可能性があるため、ビューやアラートの画面上の配置、またはそのようなビュー階層の正確な設定について、コードで仮定しないことが最善です。

00:09:39.000 --> 00:09:47.000
また、Macでは、利用可能なカメラの解像度と向きがかなり異なる可能性があることに注意してください。

00:09:47.000 --> 00:09:56.000
たとえば、写真が撮影されたときにiPhoneアプリが縦向きの場合、結果のカメラ写真も縦向きになると予想されるかもしれません。

00:09:56.000 --> 00:10:03.000
しかし、アプリがMacで縦向きになっている場合、これは必ずしも当てはまるとは限りません。

00:10:03.000 --> 00:10:08.000
それがカメラの配置方法なので、代わりに横向きの画像を受け取るかもしれません。

00:10:08.000 --> 00:10:14.000
多くのアプリとの互換性を向上させるために、すでに多くのヒューリスティックを含めています。

00:10:14.000 --> 00:10:20.000
たとえば、背面カメラを依頼した場合でも、Macの前面カメラの写真を提供します。

00:10:20.000 --> 00:10:34.000
しかし、AVCaptureDeviceDiscoverySessionと関連するAVFoundation APIを使用して、利用可能なカメラとその真のプロパティ（プレビューディメンションなど）に関する情報を収集すると、はるかに優れています。

00:10:34.000 --> 00:10:39.000
そして、すべての可能な設定をUIでうまく処理することを目指すべきです。

00:10:39.000 --> 00:10:44.000
また、一部のハードウェア機能はMacでは利用できないことを覚えておいてください。

00:10:44.000 --> 00:10:50.000
あなたのコードは、そのような状況を優雅に処理し、代替案を提供できるはずです。

00:10:50.000 --> 00:10:55.000
例えば、ARKitによる拡張現実はMacではサポートされていません。

00:10:55.000 --> 00:11:04.000
ARKitがアプリのコア機能である場合、必要なデバイス機能にした可能性が高いため、アプリはMac App Storeに表示されません。

00:11:04.000 --> 00:11:12.000
しかし、ARKitがオプション機能である場合は、適切なARConfigurationサブクラスのisSupportedプロパティをすでにチェックしている必要があります。

00:11:12.000 --> 00:11:23.000
そして、Macや他の場所で最高の体験を得るには、この機能を持つデバイスのUIでのみ拡張現実機能を表示するようにしてください。

00:11:23.000 --> 00:11:33.000
アプリがダイレクトマルチタッチまたはCoreMotionに依存している場合は、Macのキーボードとトラックパッドにより適した代替案をさらに提供することを検討してください。

00:11:33.000 --> 00:11:37.000
とはいえ、この場合、Touch Alternativesが役立つかもしれません。

00:11:37.000 --> 00:11:39.000
すぐにそれについてもっと話します。

00:11:39.000 --> 00:11:47.000
また、CoreLocationを使用している場合、正確な位置データがなくても、アプリは引き続き使用可能である必要があります。

00:11:47.000 --> 00:11:53.000
たとえば、Lowe'sアプリがここで行うように、代替手段として手動の位置入力を提供できます。

00:11:53.000 --> 00:11:59.000
次に、M1を搭載したMacを最初に出荷し始めて以来、私たちが行った改善点のいくつかをいくつか見ましょう。

00:11:59.000 --> 00:12:08.000
macOS Big Sur 11.3では、iPadとiPhoneアプリのWindowsがMacでどのように動作するかをいくつか改善しました。

00:12:08.000 --> 00:12:23.000
アプリがマルチタスクをサポートしていないが、大きなデバイスサイズをサポートしているため、コンテンツサイズが固定されている場合は、起動時に、アプリが起動している画面に収まる最大のサポートされているデバイスサイズを選択します。

00:12:23.000 --> 00:12:32.000
アプリに関する限り、デバイスのサイズはセッション全体で固定されたままですが、ウィンドウは利用可能なスペースをより良く利用します。

00:12:32.000 --> 00:12:36.000
代わりに、サポートされている最小のデバイスサイズを使用するという好みもあります。

00:12:36.000 --> 00:12:41.000
そして、先に述べたように、ウィンドウの内容は必要に応じてスケールアップまたはスケールダウンされます。

00:12:41.000 --> 00:12:52.000
たとえば、ウィンドウをフルスクリーンにすると、元のシーンのアスペクト比を維持しながら、ウィンドウの内容は使用可能なスペースに合わせて自動的にスケールアップされます。

00:12:52.000 --> 00:13:00.000
または、起動後にウィンドウが小さな画面に移動した場合、ウィンドウがまだ収まるように、必要に応じて自動的にスケールを下げます。

00:13:00.000 --> 00:13:14.000
ウィンドウズーム機能を使用して、2つのズームファクターを切り替えることもできます。1つはUI要素の自然なサイズを優先し、もう1つはピクセル完璧な精度を優先します。

00:13:14.000 --> 00:13:21.000
ここでは、この機能を使用して、Chess.comアプリの2つのズームファクターを切り替えています。

00:13:21.000 --> 00:13:29.000
ゲームコントローラーは、ゲーム対応のすべてのプラットフォームで利用可能なGameController.frameworkを通じて、初日からサポートされています。

00:13:29.000 --> 00:13:37.000
macOS Big Sur 11.3から、Macのキーボードとトラックパッドを仮想ゲームコントローラーとして使用できるようになりました。

00:13:37.000 --> 00:13:47.000
したがって、実際のコントローラーが手元になくても、キーボードを使用して、ゲームがコントローラーボタンにマップするすべての機能にアクセスするのは簡単です。

00:13:47.000 --> 00:13:57.000
そして、macOS Montereyでは、対応する環境設定パネルのこの写真に示すように、感度スライダーとポインタの非表示を追加して、これをさらに洗練しました。

00:13:57.000 --> 00:14:02.000
このフレームワークの詳細については、「ゲームコントローラーの進歩」をご覧ください。

00:14:02.000 --> 00:14:15.000
さらに、初日から、Touch Alternativesは、キーボードとトラックパッドを、マルチタッチ、ドラッグ、タップ、スワイプなど、Macでは使用が容易ではないいくつかのインタラクションスタイルにマッピングしています。

00:14:15.000 --> 00:14:20.000
また、MacOS 11.3では、多くの改善を行いました。

00:14:20.000 --> 00:14:24.000
たとえば、デバイスを仮想的に傾けることができます。

00:14:24.000 --> 00:14:27.000
これにより、多くの追加ゲームへの扉が開かれます。

00:14:27.000 --> 00:14:38.000
また、環境設定パネルには、キーボードとトラックパッドを介して5つのインタラクションスタイルのそれぞれにアクセスする方法を説明する便利なグラフィカル表現が含まれています。

00:14:38.000 --> 00:14:45.000
さらに、アプリがTouch Alternativesに自動的に選択できるようにしました。

00:14:45.000 --> 00:14:52.000
オプトインすると、この機能の発見を支援するために、最初の起動時にオンボーディングダイアログが表示されます。

00:14:52.000 --> 00:14:58.000
グラフィックは環境設定パネルのものと似ていますが、選択したインタラクションスタイルのみを強調します。

00:14:58.000 --> 00:15:03.000
この例では、チルトとマルチタッチのみが表示されます。

00:15:03.000 --> 00:15:12.000
アプリがこれらのTouch Alternativesのいずれかの恩恵を受けると判断した場合、最初からアプリのTouch Alternativesを有効にする方法は次のとおりです。

00:15:12.000 --> 00:15:21.000
「Com.apple.uikit.inputalternativ es.plist」という名前のnew.plistファイルをバンドルに追加するだけです。

00:15:21.000 --> 00:15:25.000
次に、スニペットに表示されているキーと値を追加します。

00:15:25.000 --> 00:15:30.000
また、必要なオンボーディングアレイには、アプリに役立つ機能のみを含めてください。

00:15:30.000 --> 00:15:34.000
そうすれば、オンボーディングダイアログではこれらの機能のみが強調表示されます。

00:15:34.000 --> 00:15:36.000
あなたのためにこれを実演させてください。

00:15:36.000 --> 00:15:43.000
例えば、「Assoluto Racing」と呼ばれるこのiPadゲームは、M1を搭載したMacで変更されずに実行されています。

00:15:43.000 --> 00:15:51.000
このアプリは最初からTouch Alternativesを自動的に有効にするので、最初の起動時に、このオンボーディングダイアログはキーボードコントロールを表示します。

00:15:51.000 --> 00:15:57.000
しかし、まず、ソフトウェアキーボードを見せて、ウィンドウをフルスクリーンにしましょう。

00:15:57.000 --> 00:16:11.000
コンテンツは画面に合わせてスケールアップされ、iPadのアスペクト比を維持しています。

00:16:11.000 --> 00:16:16.000
フリースタイルドリフトのために「空港」レベルに向かいましょう。

00:16:16.000 --> 00:16:21.000
このアプリはCoreMotionを使用しているので、iPadではデバイスを傾けて操縦できます。

00:16:21.000 --> 00:16:28.000
M1を搭載したMacでTouch Alternativesを有効にすると、W、A、S、Dキーは傾きをシミュレートします。

00:16:28.000 --> 00:16:35.000
そして、ここで私はトラックパッドを使って画面上のアクセルボタンを押しながら、そのように車を制御します。

00:16:35.000 --> 00:16:38.000
そして、これらすべてはアプリにとって完全に透明です。

00:16:38.000 --> 00:16:50.000
私がどうするか見てみましょう。

00:16:50.000 --> 00:16:52.000
うまくいったよ！

00:16:52.000 --> 00:16:54.000
しかし、私は漂流スキルに少し取り組む必要があります。

00:16:54.000 --> 00:16:58.000
macOS Montereyでは、さらに多くの改善を行いました。

00:16:58.000 --> 00:17:09.000
Apple Payは、macOS Big SurのMac Catalystアプリケーションに導入したのと同じ強化されたクロスプラットフォームAPIを使用して、M1 MacのiPadおよびiPhoneアプリで利用可能になりました。

00:17:09.000 --> 00:17:16.000
これは、単一の実装を使用して、Apple Payが利用可能なすべてのプラットフォームで支払いを受け入れることができることを意味します。

00:17:16.000 --> 00:17:27.000
PKPaymentAuthorizationControllerデリゲートで「paymentAuthorizationController、didRequestMerchantSessionUpdate」デリゲートコールを実装していることを確認してください。

00:17:27.000 --> 00:17:32.000
詳細については、ビデオ「ウォレットとApple Payの新機能」をご覧ください。

00:17:32.000 --> 00:17:36.000
また、AVKitでフルスクリーンビデオをさらに良くしました。

00:17:36.000 --> 00:17:43.000
AVPlayerViewとAVPlayerViewControllerは、別のウィンドウを使用して自動的にフルスクリーンでビデオを撮影できるようになりました。

00:17:43.000 --> 00:17:55.000
これは、ウィンドウが起動時の解像度とアスペクト比に制限されているアプリでも、ビデオコンテンツに応じてMacディスプレイを最大限に活用することを意味します。

00:17:55.000 --> 00:18:05.000
また、フルスクリーンエクスペリエンスをさらに制御する必要がある場合は、AVPlayerViewDelegateとAVPlayerViewControllerDelegateに新しいAPIを追加しました。

00:18:05.000 --> 00:18:11.000
さらに、AVFoundationはM1を搭載したMacでHDR再生とストリーミングをサポートしています。

00:18:11.000 --> 00:18:16.000
アプリでは、Mac固有の採用作業は必要ありません。

00:18:16.000 --> 00:18:22.000
最後に、iPadとiPhoneアプリのAVKitコントロールは、他のMacアプリと同じように見えるようになりました。

00:18:22.000 --> 00:18:28.000
私たちは、新しいジェスチャーをサポートするMacトラックパッドを最大限に活用しています。

00:18:28.000 --> 00:18:32.000
詳細については、「AVKitの新機能」というビデオをご覧ください。

00:18:32.000 --> 00:18:43.000
また、アプリがインテントフレームワークを使用してカスタムSiriKitショートカットを提供する場合、macOS Montereyでは、M1 MacのiPadおよびiPhoneアプリでサポートされるようになりました。

00:18:43.000 --> 00:18:52.000
ショートカットの詳細については、「macOSのショートカットに会う」と「ショートカット、Siri、提案のための素晴らしいアクションをデザインする」のトークをチェックしてください。

00:18:52.000 --> 00:18:54.000
朗報！

00:18:54.000 --> 00:18:56.000
Mac App Storeに載るのは簡単です。

00:18:56.000 --> 00:19:00.000
実際、ほとんどのアプリは自動的にそこにあります。

00:19:00.000 --> 00:19:04.000
先に述べたように、ほとんどの場合、Macにいるのは理にかなっています。

00:19:04.000 --> 00:19:16.000
結局のところ、モバイルになるように設計されたBluetoothドアロックアプリでさえ、携帯電話なしで家からロックアウトしたが、M1を手にしたMacを持っている場合に役に立つかもしれません。

00:19:16.000 --> 00:19:22.000
したがって、以前にMac App Storeからアプリをオプトアウトしたことがある場合は、今が再考する時かもしれません。

00:19:22.000 --> 00:19:30.000
タッチオルタナティブや強化されたフルスクリーンビデオ再生などの改善により、あなたのアプリはMacにぴったりかもしれません。

00:19:30.000 --> 00:19:39.000
その場合は、App Store Connectの「このアプリを利用可能にする」チェックボックスに再度チェックを入れるだけで、Mac App Storeでアプリを利用できるようになります。

00:19:39.000 --> 00:19:47.000
以前にオプトアウトしたかどうかにかかわらず、あなたのアプリがM1を搭載したMacで本当にうまく機能することを確認する必要があります。

00:19:47.000 --> 00:19:56.000
ユーザーエクスペリエンスが基準を満たしていると確信したら、ここに示されているApp Store Connectの「互換性の確認」リンクをクリックしてください。

00:19:56.000 --> 00:20:06.000
これにより、Mac App Storeのアプリの横に表示される「Not verified for macOS」テキストが削除され、「Designed for iPad」に置き換えられます。

00:20:06.000 --> 00:20:13.000
アプリの買い物客は、あなたがMacであなたのアプリで良い経験を持っていることを確認するために時間をかかったというサインとしてこれを取るでしょう。

00:20:13.000 --> 00:20:15.000
これはアプリごとに1回だけ行う必要があります。

00:20:15.000 --> 00:20:21.000
ああ、私たちはまた、iPadとiPhoneのアプリをMac App Storeではるかに見つけやすくしました。

00:20:21.000 --> 00:20:27.000
顧客が名前で検索すると、iPhoneとiPadのアプリタブに切り替える必要がなくなります。

00:20:27.000 --> 00:20:35.000
Appleは、互換性に必要な推奨される最小macOSバージョンを自動的に選択し、ほとんどの場合、これは問題ありません。

00:20:35.000 --> 00:20:41.000
しかし、まれに、カスタムmacOSの可用性でこれをオーバーライドしたいと思うかもしれません。

00:20:41.000 --> 00:20:54.000
たとえば、ビデオアプリはBig Surで正常に動作するかもしれませんが、AVKitのフルスクリーン改善にアクセスできるようにしたい場合は、モントレー以降でのみ利用可能であると判断できます。

00:20:54.000 --> 00:20:57.000
この場合、2つの選択肢があります。

00:20:57.000 --> 00:21:06.000
まもなく、App Store Connectの「価格と可用性」ページで、別の最小macOSバージョンを選択できるようになります。

00:21:06.000 --> 00:21:12.000
これは、新しいバージョンを再提出する必要がないため、すでにストアにあるアプリに最適です。

00:21:12.000 --> 00:21:20.000
または、Info.plistでLSMinimumSystemVersionを指定し、次の更新の一部としてこの変更を送信することもできます。

00:21:20.000 --> 00:21:24.000
これは、積極的に開発中のアプリに推奨されるアプローチです。

00:21:24.000 --> 00:21:31.000
これは、iOSの最小システムバージョンを指定するMinimumOSVersionキーを置き換えるものではないことに注意してください。

00:21:31.000 --> 00:21:34.000
しかし、実際には、両方のオプションはめったに必要ないはずです。

00:21:34.000 --> 00:21:38.000
最後に、テストについて少し話しましょう。

00:21:38.000 --> 00:21:41.000
macOSでのテストは、iPadでのテストと非常によく似ています。

00:21:41.000 --> 00:21:45.000
すでに慣れ親しんでいるのと同じワークフローを使用できます。

00:21:45.000 --> 00:21:56.000
Xcodeでのローカルテストでは、実行先としてMy Mac（Designed for iPad）を選択するだけで、デバッグ、単体テストなど、すべて他のデバイスと同じように機能します。

00:21:56.000 --> 00:22:09.000
ベータテストでは、iPhoneやiPadアプリを含むmacOS MontereyのすべてのアプリにTestFlightサポートを追加したので、M1を搭載したMacを使用しているベータテスターにアプリを配布できるようになりました。

00:22:09.000 --> 00:22:15.000
これの詳細については、ビデオ「Meet TestFlight on Mac」をご覧ください。

00:22:15.000 --> 00:22:17.000
だから、Macへようこそ!

00:22:17.000 --> 00:22:20.000
アプリを確認してオプトインしてください。

00:22:20.000 --> 00:22:21.000
それは簡単です。

00:22:21.000 --> 00:22:29.000
そして、iPadとiPhoneのアプリを改善し続けるにつれて、M1を搭載したMacでもそれらのアプリをより良くしていることを忘れないでください。

00:22:29.000 --> 00:22:32.000
どうもありがとうございます。

00:22:32.000 --> 23:59:59.000
[明るい音楽]。

