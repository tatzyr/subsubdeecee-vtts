WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
こんにちは、私の名前はナットです。

00:00:10.000 --> 00:00:13.000
そして、私はアップルでゲームテクノロジーに取り組んでいます。

00:00:13.000 --> 00:00:19.000
iOS、tvOS、macOSのゲーム入力について追いつくために、今年も参加してくれてありがとう。

00:00:19.000 --> 00:00:26.000
今日は、Appleプラットフォームでゲーム入力を初めて利用する方法と理由の両方を簡単に要約することから始めます。

00:00:26.000 --> 00:00:32.000
次に、新しいタイプの仮想ゲームコントローラーをお見せして、一緒に小さなコードを書きます。

00:00:32.000 --> 00:00:37.000
最後に、より実際の物理コントローラーについて話し、いくつかの新機能について話し合いたいと思います。

00:00:37.000 --> 00:00:40.000
では、レビューから始めましょう。

00:00:40.000 --> 00:00:48.000
ゲームコントローラーフレームワークの目標は、Appleプラットフォーム間であらゆる種類の効率的で低遅延入力のサポートを簡単に追加できるようにすることです。

00:00:48.000 --> 00:01:01.000
一般的なAPIを介して入力ハードウェアを抽象化することで、ゲームコントローラーフレームワークを使用すると、入力がどのように再マップされたか、または特定のコントローラ、キーボード、またはポインティングデバイス間の違いを心配することなく、入力コードを一度書くことができます。

00:01:01.000 --> 00:01:13.000
iOS、iPadOS、tvOSでは、プレイヤーはシステム全体およびアプリケーションごとのゲームコントローラー入力リマッピングを作成できます。これにより、ゲームをよりカスタマイズ可能でアクセスしやすくなります。

00:01:13.000 --> 00:01:19.000
また、すべてのプラットフォームで、プレイヤーが保持している特定のコントローラーのシンボルと機能を反映するようにUIを構築できます。

00:01:19.000 --> 00:01:27.000
だから、あなたのプレーヤーがチームサークルスクエアトライアングルクロスであろうとチームA-B-X-Yであろうと、あなたのゲームUIは彼らにぴったりです。

00:01:27.000 --> 00:01:43.000
ゲームコントローラーフレームワークの基本は、さまざまな種類のGCDeviceオブジェクトの接続と切断に関する通知に反応し、入力状態のためにアクティブなデバイスをポーリングするか、入力状態の変更について通知されるように値が変更されたハンドラーを設定することです。

00:01:43.000 --> 00:01:54.000
コントローラがシステムに接続または切断すると、GCControllerオブジェクトが作成され、削除され、GCControllerDidConnectおよびGCControllerDidDisconnect通知が送信されます。

00:01:54.000 --> 00:02:05.000
キーボードが接続または切断するときのGCKeyboardオブジェクトと、デバイスが接続または切断することを指すときのGCMouseオブジェクトと同じパターンです。

00:02:05.000 --> 00:02:12.000
たとえば、GCControllerオブジェクトがいつ接続または切断されるかを調べるために、オブザーバーを追加するだけです。

00:02:12.000 --> 00:02:21.000
次に、入力状態が変更されたときに通知するようにこれらの変更ハンドラを設定するか、他の場所でコントローラの状態をポーリングするかはあなた次第です。

00:02:21.000 --> 00:02:26.000
これは、コントローラー、キーボード、ポインティングデバイスなど、使用すべきパターンと同じです。

00:02:26.000 --> 00:02:33.000
私たちは、ゲームコントローラーをサポートする非常に多くの素晴らしい新しいゲームと、コントローラーをうまくサポートするゲームに対する顧客の大きな関心を見てきました。

00:02:33.000 --> 00:02:37.000
だからこそ、私たちは人々がゲームコントローラーをサポートするゲームを見つけるのを本当に助けたいのです。

00:02:37.000 --> 00:02:43.000
ゲームがゲームコントローラーをサポートしていることがわかったら、コントローラーサポートバッジでApp Storeでバッジします。

00:02:43.000 --> 00:02:44.000
それは小さなことのように見えますよね?

00:02:44.000 --> 00:02:50.000
しかし、彼らがコントローラーを使うのが好きなら、それはプレイヤーが探しているものであり、私はそれが私が探しているバッジであることを知っています。

00:02:50.000 --> 00:02:55.000
そして、私たちは常にゲームコントローラーでうまく機能するアプリをキュレーションし、宣伝するために目を光らせています。

00:02:55.000 --> 00:03:00.000
ゲームコントローラーを本当に輝かせるアプリを発見すると、ゲームには複数のセクションがあります。

00:03:00.000 --> 00:03:07.000
あなたのアプリがプロモーションに選ばれることを保証することはできませんが、コントローラーで素晴らしい仕事をすると、プレイヤーは間違いなく気づくでしょう。

00:03:07.000 --> 00:03:10.000
だから、あなたのアプリのサポートをマークするためにあなたがしなければならないことはすべてここにあります。

00:03:10.000 --> 00:03:13.000
Xcodeでは、ゲームコントローラー機能を追加するだけです。

00:03:13.000 --> 00:03:22.000
これは、アプリケーションのInfo.plistにゲームコントローラー機能でタグ付けし、App Storeに提出する前に行う必要があるのはそれだけです。

00:03:22.000 --> 00:03:30.000
ゲームにこの機能がある場合、ゲームコントローラーの環境設定パネルのアプリごとのカスタマイズセクションに含めることもわかっています。

00:03:30.000 --> 00:03:36.000
プレイヤーは自分の好みに合わせてコントロールを微調整する機能が大好きで、ゲームのアクセシビリティを向上させるのに最適な方法です。

00:03:36.000 --> 00:03:44.000
入力の再マッピングに参加するために何もする必要はありませんが、ゲームにタグを付けると、プレイヤーは具体的にカスタマイズできます。

00:03:44.000 --> 00:03:50.000
ゲームコントローラーフレームワークを採用すると無料で得られるもう1つの素晴らしい機能は、スクリーンショットとビデオクリップです。

00:03:50.000 --> 00:03:57.000
プレイヤーは、コントローラーの共有ボタンをすばやくタッチするだけで、スクリーンショットをキャプチャしたり、ビデオクリップの録画を開始および停止したりできます。

00:03:57.000 --> 00:04:01.000
ここで私はFox2をプレイしています。

00:04:01.000 --> 00:04:10.000
共有ボタンをダブルタップすると、スクリーンショットをキャプチャできます。

00:04:10.000 --> 00:04:16.000
スクリーンショットは、私のカメラロール、macOSを使っている場合はデスクトップ、またはAppleTVから私の携帯電話にAirDropされます。

00:04:16.000 --> 00:04:22.000
共有ボタンを長押しして画面の録画を開始および停止したい場合、次のようになります。

00:04:22.000 --> 00:04:32.000
少し後、今年追加した新しいタイプのゲームクリップ録画に関するニュースがあります。

00:04:32.000 --> 00:04:38.000
ゲーム洗練されたコントローラーをサポートするものについての私の最後のアドバイスは、UIでのグリフの適切な使用です。

00:04:38.000 --> 00:04:43.000
在庫を表示するボタンを使用するには、このヒントを検討してください。

00:04:43.000 --> 00:04:47.000
MFiまたはXboxコントローラーでは、Yボタンを表示する必要があります。

00:04:47.000 --> 00:04:51.000
プレイステーションのコントローラーでは、代わりに三角形を表示したい。

00:04:51.000 --> 00:04:57.000
それは小さなことのように思えるかもしれませんが、うわー、私たちはあなたのUIに表示されている間違ったボタン名についてのフィードバックを本当に聞きます。

00:04:57.000 --> 00:05:04.000
ゲームに適している場合は、オプションで位置ボタンの位置を表す別のアプローチを検討してください。

00:05:04.000 --> 00:05:14.000
一部のプレーヤー、特に新規および若いプレーヤーは、表示している場所をより迅速に認識する可能性があり、ボタンの名前を読むために見下ろす必要はありません。

00:05:14.000 --> 00:05:21.000
プレイヤーがシステムリマッピングUIでボタンを再マッピングした場合でも、常に正しいグリフを表示するのが非常に簡単になりました。

00:05:21.000 --> 00:05:37.000
たとえば、再マッピング環境設定に示すように、Xボタンの押下をAアクションにマッピングし、ユーザーにAアクションを押して続行するように依頼したい場合、開発者がAアクションに関連付けられたグリフを要求したときに、実際にXグリフを表示したいと考えています。

00:05:37.000 --> 00:05:46.000
これを行うには、AボタンのsfSymbolsNameを照会し、名前のUIImageシステムイメージを使用して表示する画像を取得します。

00:05:46.000 --> 00:05:49.000
次に、再マッピングに基づいて正しいグリフを表示します。

00:05:49.000 --> 00:05:51.000
だから、それは私の非常に迅速な要約でした。

00:05:51.000 --> 00:05:58.000
詳細が必要な場合は、過去のWWDC会議のゲームコントローラーに関するこれらの他の講演をチェックしてください。

00:05:58.000 --> 00:06:04.000
だから、過去数年間、私たちはiOSとiPadOSにゲームをもたらす多くの開発者と話をしてきました。

00:06:04.000 --> 00:06:13.000
多くはもともとゲームコントローラーの入力を中心に設計されたゲームなので、2つのアナログスティック、おそらくdパッドまたはタッチパッド、およびデジタルボタン入力を期待しています。

00:06:13.000 --> 00:06:20.000
私たちが聞いたのは、これらのゲームのために一貫性があり、素晴らしい感じで見栄えの良いタッチベースの入力を構築するのに苦労した人もいるということです。

00:06:20.000 --> 00:06:27.000
タッチ入力処理コードは、キーボード、マウス、ゲームコントローラーの入力コードパスとは異なると聞きました。

00:06:27.000 --> 00:06:35.000
これに対処するために、既存のすべてのゲームコントローラー入力コードと互換性のある新しい仮想オンスクリーンコントローラーについてお話ししたいと思います。

00:06:35.000 --> 00:06:45.000
iPhoneとiPad用のこれらの新しいオンスクリーンコントロールは素晴らしく見え、手のサイズ全体のグリップ位置と優れた応答性と感触のために慎重に調整されています。

00:06:45.000 --> 00:06:49.000
アプリケーションに簡単に追加でき、ゲームコントローラーのように動作します。

00:06:49.000 --> 00:07:03.000
独自のオンスクリーンオーバーレイUIを作成し、タッチ入力をゲーム入力システムに変換する代わりに、これらのオンスクリーンコントロールはゲームコントローラーフレームワークGCControllerオブジェクトと同じようにコードに表示されるため、入力ロジックははるかに一貫性を保つことができます。

00:07:03.000 --> 00:07:13.000
それらは独自のシンボルでカスタマイズ可能で、iOSとiPadOSのデザイン言語の要素を共有しながら、あなたの色やスタイルと統合します。

00:07:13.000 --> 00:07:22.000
1つのボタン、3つのボタン、またはdパッドと複数のボタンが必要かどうかに応じて、さまざまなレイアウトに調整されます。

00:07:22.000 --> 00:07:31.000
画面上のコントローラの中核原理は、左右の領域が独立して構成され、レイアウトが構成に基づいて決定されることです。

00:07:31.000 --> 00:07:34.000
要素の手動配置はサポートされていません。

00:07:34.000 --> 00:07:42.000
側面ごとに、構成は0〜4つのボタンとサムスティック、dパッド、またはタッチパッドのいずれかで構築できます。

00:07:42.000 --> 00:07:45.000
ボタンとスティックには触覚があります。

00:07:45.000 --> 00:07:48.000
そして最後に、構成は作成時に固定されます。

00:07:48.000 --> 00:07:54.000
要素を表示および非表示にできますが、新しい仮想コントローラーを作成せずに追加または削除することはできません。

00:07:54.000 --> 00:07:59.000
それでは、レイアウトを選択し、画面上の仮想ゲームコントローラーを表示するために何をするかを見てみましょう。

00:07:59.000 --> 00:08:07.000
まず、使用したいすべての可能なボタンとジョイスティックを識別するGCControllerConfigurationを作成します。

00:08:07.000 --> 00:08:10.000
次に、その設定から仮想コントローラーを作成します。

00:08:10.000 --> 00:08:18.000
その後、カスタムシェイプを設定したり、いくつかの要素を非表示にしたりするなど、オプションで要素の設定を行うことができます。

00:08:18.000 --> 00:08:30.000
次に、コントローラを接続するようにシステムに指示すると、処理に慣れているのと同じGCGameControllerDidConnect通知がトリガーされ、GCControllerオブジェクトが表示されます。

00:08:30.000 --> 00:08:39.000
それでは、私がここに示しているようなレイアウトを得るために書くコードを見てみましょう。左側のサムスティック、右側のサムスティック、右側のAボタンとBボタンです。

00:08:39.000 --> 00:08:41.000
それはとても簡単です。

00:08:41.000 --> 00:08:45.000
新しいGCVirtualControllerConfigurationオブジェクトを作成することから始めます。

00:08:45.000 --> 00:08:47.000
次に、どの要素が欲しいかを確立します。

00:08:47.000 --> 00:08:53.000
前の写真と同じように、右側に2つの親指スティックと2つのボタンが必要です。

00:08:53.000 --> 00:08:57.000
次に、その設定を使用してGCVirtualControllerオブジェクトを作成します。

00:08:57.000 --> 00:09:04.000
そして最後に、接続を呼び出します。標準のGCControllerDidConnectNotificationが到着します。

00:09:04.000 --> 00:09:06.000
だから、それは簡単でした。

00:09:06.000 --> 00:09:11.000
しかし、この写真のように、これらのボタンの独自のビジュアルをどのように確立しますか?

00:09:11.000 --> 00:09:16.000
これは、GCVirtualController要素の設定を調整することで簡単に実行できます。

00:09:16.000 --> 00:09:26.000
回転攻撃を示すためにAボタンを変更し、ジャンプを示すためにBボタンを設定するこのレイアウトを作成するには、Aボタンの設定を調整してBezierPathを追加するだけです。

00:09:26.000 --> 00:09:30.000
次に、Bボタンを設定してBezierPathを確立します。

00:09:30.000 --> 00:09:35.000
Config.hiddenプロパティを使用して、さまざまなボタン要素を表示および非表示にするのと同じくらい簡単です。

00:09:35.000 --> 00:09:39.000
ご覧のとおり、これらのコントロールを好みに合わせてカスタマイズするのにそれほど多くはかかりません。

00:09:39.000 --> 00:09:44.000
では、物理コントローラーの非仮想世界に戻りましょう。

00:09:44.000 --> 00:09:48.000
プレイヤーが選べる素晴らしいコントローラーがたくさんあります。

00:09:48.000 --> 00:09:53.000
Made for iPhone、MFiコントローラーはたくさんあり、常に新しいものや改善が見られます。

00:09:53.000 --> 00:10:00.000
L3 / R3サムスティックトリガーとより多くのシステムボタンを備えたスタンドアロンのSteelSeries Nimbus +は本当に素晴らしいです。

00:10:00.000 --> 00:10:04.000
私はまた、フォームフィットのRazer KishiとBackbone Oneの大ファンです。

00:10:04.000 --> 00:10:09.000
これらのタイプのフォームフィッティングコントローラーは、私のバックパックに入れておくための私の新しいお気に入りです。

00:10:09.000 --> 00:10:21.000
もちろん、MFiコントローラーに加えて、すべてのAppleプラットフォームでSony DualShock 4とXbox Oneコントローラーをサポートしており、プレイヤーは昨年追加したXbox Elite V2とXbox Adaptiveコントローラーのサポートが大好きです。

00:10:21.000 --> 00:10:29.000
iOS 14.5とmacOS 11.3で、最新世代のコンソールコントローラーのサポートを追加しました。

00:10:29.000 --> 00:10:38.000
Sony DualSenseコントローラーとXbox Series Xコントローラーは、とても素晴らしい感覚のコントローラーで、ゲームコントローラーフレームワークを使用しているときにのみ機能します。

00:10:38.000 --> 00:10:45.000
Xbox Series Xコントローラーには新しい専用の共有ボタンがあり、DualSenseにはクールなアダプティブトリガー技術があります。

00:10:45.000 --> 00:10:49.000
アダプティブトリガーと、それらを使用する方法を掘り下げてみましょう。

00:10:49.000 --> 00:10:54.000
DualSenseアダプティブトリガーを使用すると、フォースフィードバックを使用してゲームイマージョンを向上させることができます。

00:10:54.000 --> 00:11:05.000
プレイヤーが何をしているかに基づいてトリガーにさまざまな抵抗を動的に適用することで、弓の弦や張力とより多くの感覚の下にあるパチンコを引っ張る感覚をエミュレートすることができます。

00:11:05.000 --> 00:11:08.000
私はあなたがこれらのトリガーがどれほど素晴らしいと感じるかを感じる機会を得ることを願っています。

00:11:08.000 --> 00:11:12.000
ゲームコントローラーフレームワークでアダプティブトリガーをサポートする方法は本当に簡単です。

00:11:12.000 --> 00:11:18.000
まず、プレイヤーのコントローラーの物理入力プロファイルがDualSenseであることを確認する必要があります。

00:11:18.000 --> 00:11:24.000
次に、メソッド呼び出しで求めているアダプティブトリガー効果を設定するだけです。

00:11:24.000 --> 00:11:32.000
本当にダイナミックなエフェクトを作成したい場合は、アダプティブトリガーとゲームの状態を継続的に読み取り、それに応じてエフェクトを調整できます。

00:11:32.000 --> 00:11:39.000
たとえば、トリガーをより強く引っ張るときや、プレイヤーがロープをより大きな張力に引っ張るときに、より多くの抵抗を加えることができます。

00:11:39.000 --> 00:11:46.000
最後に、子供たちが部屋を出るときに明かりを消すように思い出させるように、終わったら適応トリガー効果をオフにする必要があります。

00:11:46.000 --> 00:11:50.000
簡単なコード例に飛び込んで、実際にこれを達成する方法を見てみましょう。

00:11:50.000 --> 00:11:56.000
だから、プレイヤーがいくつかのターゲットをノックアウトするためにパチンコを発射できるゲームがあるとしましょう。

00:11:56.000 --> 00:12:01.000
プレイヤーは左のトリガーで照準を開始し、右のトリガーでパチンコを引き戻すことができます。

00:12:01.000 --> 00:12:05.000
プレイヤーがパチンコを引き戻すときに、アダプティブトリガー効果を追加したい。

00:12:05.000 --> 00:12:09.000
まず、プレイヤーのコントローラーがDualSenseであることを確認する必要があります。

00:12:09.000 --> 00:12:15.000
私たちのゲームはシングルプレイヤーゲームなので、GCController.currentをチェックしてアクティブなコントローラーを取得できます。

00:12:15.000 --> 00:12:19.000
その後、DualSenseの適切なアダプティブトリガーをつかむことができます。

00:12:19.000 --> 00:12:25.000
この例では、プレイヤーがパチンコを狙っているときにのみ抵抗力を適用したいと思うでしょう。

00:12:25.000 --> 00:12:31.000
トリガーがどこまで引っ張られたかに基づいて、適用された抵抗の強さを動的に計算します。

00:12:31.000 --> 00:12:38.000
トリガーがずっと引き戻されていない場合は、アダプティブトリガーにフィードバック効果を適用します。

00:12:38.000 --> 00:12:42.000
フィードバック効果は、引き金を引くときに指に一定の抵抗を提供します。

00:12:42.000 --> 00:12:49.000
そうでなければ、トリガーがずっと後ろに引っ張られた場合は、低周波の振動効果を適用します。

00:12:49.000 --> 00:12:56.000
この効果により、トリガーが振動し、パチンコを引き戻して緊張させ続けるのに苦労している感覚をエミュレートします。

00:12:56.000 --> 00:13:01.000
最後に、プレイヤーがパチンコを発射したら、アダプティブトリガーをオフにしたい。

00:13:01.000 --> 00:13:06.000
今日の会話の最後のトピックは、ゲームコントローラーの共有ボタンによるメディアキャプチャについてです。

00:13:06.000 --> 00:13:11.000
昨年、コントローラーの指定された共有ボタンにいくつかのメディアキャプチャジェスチャーを導入しました。

00:13:11.000 --> 00:13:21.000
共有ボタンは通常、コントローラーの左上のシステムボタンにマッピングされますが、Xbox Series Xのような一部のコントローラーには、他の場所で共有というラベルの付いたボタンがあります。

00:13:21.000 --> 00:13:31.000
先ほど示したように、メディアキャプチャのシステムジェスチャーは、カメラロールのスクリーンショットをキャプチャするためのダブルプレスと、ReplayKitの録画を開始および停止するための長押しです。

00:13:31.000 --> 00:13:36.000
今年は、超クールな新しいタイプのメディアキャプチャ、15秒のハイライトを追加します。

00:13:36.000 --> 00:13:47.000
だから今、あなたの記録を開始および停止することを覚えておく代わりに、プレイヤーは自動バックグラウンドバッファリングをオンにすることができます。これにより、長押しするといつでもゲームプレイの最後の15秒を保存できます。

00:13:47.000 --> 00:13:55.000
ReplayKitクリップは、ゲーマーが素晴らしいボスバトル、素晴らしいコンボの動き、または壮大な失敗をキャプチャするための素晴らしい方法です。

00:13:55.000 --> 00:14:08.000
より長い録画の開始と停止の自動形式、または15秒のハイライトを保存できるバックグラウンド録画の開始のどちらかを選択するには、ゲームコントローラーの環境設定パネルでグローバルまたはアプリケーションごとの設定を切り替えるだけです。

00:14:08.000 --> 00:14:13.000
ゲームの重要なポイントに独自のハイライトをトリガーしたい場合は、そのためのAPIがあります。

00:14:13.000 --> 00:14:16.000
これにより、これらの15秒のスナップショットもトリガーされます。

00:14:16.000 --> 00:14:18.000
ふぅ。わかりました。

00:14:18.000 --> 00:14:21.000
これで、今年のゲーム入力ニュースが終わります。

00:14:21.000 --> 00:14:30.000
行く前に、アプリごとにカスタマイズできるように、ゲームコントローラーのサポートでアプリにタグを付けることを忘れないでください。そうすれば、App Storeはアプリを適切に分類できます。

00:14:30.000 --> 00:14:35.000
ゲームコントローラー、キーボード、マウス入力をゲームでどのように活用するかを本当に楽しみにしています。

00:14:35.000 --> 00:14:45.000
ゲーム開発者やゲーマー向けの機能に関するプレゼンテーションをもっと見る準備ができたら、「ReplayKitでローリングクリップを発見」と「Game Centerの新機能」もチェックしてください。

00:14:45.000 --> 00:14:47.000
見てくれてありがとう。

00:14:47.000 --> 00:14:48.000
また近いうちにお会いできるのを楽しみにしています。

00:14:48.000 --> 00:14:53.000
今のところ、オンラインでお会いし、ご質問にお答えできることを楽しみにしています。

00:14:53.000 --> 23:59:59.000
[明るい音楽]。

