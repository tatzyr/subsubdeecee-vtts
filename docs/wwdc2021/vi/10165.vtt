WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:15.000
Xin chào, tên tôi là Yagil Burowski, và tôi là một kỹ sư trong nhóm Công nghệ Vị trí tại Apple.

00:00:15.000 --> 00:00:23.000
Trong buổi nói chuyện này, tôi sẽ đề cập đến những tiến bộ mới nhất, cũng như các tính năng mới sẽ đến với khuôn khổ Tương tác lân cận trong năm nay.

00:00:23.000 --> 00:00:39.000
Khung Tương tác lân cận giúp dễ dàng tận dụng các khả năng độc đáo của U1, chip của Apple cho công nghệ băng thông siêu rộng và cho phép tạo ra các tương tác chính xác và nhận biết không gian giữa các thiết bị lân cận.

00:00:39.000 --> 00:00:48.000
Đó là cùng một công nghệ cung cấp năng lượng cho "Tìm kiếm chính xác" với AirTag và các cử chỉ chuyển giao trôi chảy giữa iPhone và HomePod mini.

00:00:48.000 --> 00:00:51.000
Đây là những gì chúng tôi sẽ đề cập trong phiên này.

00:00:51.000 --> 00:00:55.000
Chúng ta sẽ bắt đầu với các bản cập nhật cho luồng quyền của người dùng.

00:00:55.000 --> 00:01:04.000
Sau đó, chúng tôi sẽ giới thiệu các API mới để chạy Tương tác lân cận với phần cứng của bên thứ ba tương thích.

00:01:04.000 --> 00:01:16.000
Và chúng ta sẽ kết thúc bằng việc nói về các tài nguyên dành cho các nhà phát triển ứng dụng, cũng như các nhà sản xuất phụ kiện, để bắt đầu áp dụng các API mới này trong các ứng dụng và phụ kiện của bên thứ ba.

00:01:16.000 --> 00:01:26.000
Trước khi chúng tôi đi sâu vào, đối với những bạn mới sử dụng Tương tác lân cận hoặc chỉ cần bồi dưỡng, hãy nhanh chóng tóm tắt lại cách bạn sử dụng khung trong ứng dụng của mình.

00:01:26.000 --> 00:01:30.000
Bạn bắt đầu với việc tạo một phiên bản phiên.

00:01:30.000 --> 00:01:38.000
Đó là đối tượng chính mà qua đó bạn sẽ định cấu hình và chạy các tương tác không gian của mình với các thiết bị gần đó.

00:01:38.000 --> 00:01:46.000
Tiếp theo, bạn sẽ cần chỉ định một phần của ứng dụng của mình để phù hợp với giao thức NISessionDelegate.

00:01:46.000 --> 00:01:52.000
Người đại diện sẽ nhận được thông tin cập nhật từ khuôn khổ.

00:01:52.000 --> 00:02:01.000
Điều tiếp theo bạn cần làm là tạo một đối tượng cấu hình, sẽ là một lớp con của NIConfiguration.

00:02:01.000 --> 00:02:11.000
Ví dụ, bạn có thể tạo Cấu hình ngang hàng lân cận khi bạn muốn bắt đầu một phiên giữa hai iPhone đang chạy ứng dụng của bạn.

00:02:11.000 --> 00:02:34.000
Khi bạn gọi chạy trên phiên với cấu hình bạn đã tạo, Tương tác lân cận sẽ bắt đầu cung cấp cho ứng dụng của bạn một luồng cập nhật Đối tượng lân cận, mỗi bản cập nhật chứa khoảng cách và tùy chọn, hướng, cho các thiết bị gần đó đang tích cực tham gia phiên.

00:02:34.000 --> 00:02:44.000
Nếu bạn quan tâm đến việc đi sâu hơn vào các API của khuôn khổ, vui lòng xem bài nói chuyện WWDC năm ngoái, "Gặp gỡ tương tác lân cận".

00:02:44.000 --> 00:02:54.000
Để truy cập dữ liệu như khoảng cách hoặc hướng đến một thiết bị gần đó, ứng dụng của bạn cần có sự cho phép của người dùng.

00:02:54.000 --> 00:02:59.000
Vì vậy, hãy nói về những cải tiến đối với quy trình cấp phép người dùng mà chúng tôi đã thực hiện trong năm nay.

00:02:59.000 --> 00:03:03.000
Đây là quy trình cấp phép Tương tác lân cận trong iOS 14.

00:03:03.000 --> 00:03:11.000
Lời nhắc sẽ xuất hiện lần đầu tiên ứng dụng của bạn chạy một phiên trong vòng đời ứng dụng mới.

00:03:11.000 --> 00:03:27.000
Các tùy chọn trên cảnh báo, "Không cho phép" hoặc "Cho phép một lần", cung cấp một lựa chọn rất rõ ràng, nhưng vì quyền này là một lần, nó cũng có thể dẫn đến các lời nhắc bổ sung trong một số tình huống nhất định.

00:03:27.000 --> 00:03:34.000
Vì vậy, năm nay, có một cách mới để cấp quyền cho các ứng dụng sử dụng Tương tác lân cận.

00:03:34.000 --> 00:03:38.000
Đây là lời nhắc cấp phép "Nearby Interaction" mới trong iOS 15.

00:03:38.000 --> 00:03:43.000
Nó trông giống nhau, nhưng nó khác nhau theo một vài cách quan trọng.

00:03:43.000 --> 00:03:50.000
Hệ thống sẽ tự động hiển thị lời nhắc cấp phép trong lần đầu tiên ứng dụng của bạn chạy NISession.

00:03:50.000 --> 00:04:10.000
Vì vậy, điều thực sự quan trọng đối với bạn là đảm bảo rằng thời gian khi bạn chạy NISession của mình trùng khớp với ý định rõ ràng của người dùng, vì vậy người dùng của bạn dễ dàng hiểu tại sao một tính năng cụ thể trong ứng dụng của bạn yêu cầu quyền truy cập vào Tương tác lân cận.

00:04:10.000 --> 00:04:14.000
Chúng ta hãy xem xét kỹ hơn các tùy chọn mới trên lời nhắc.

00:04:14.000 --> 00:04:20.000
Tùy chọn "OK" mới cấp quyền cho ứng dụng của bạn trong khi ứng dụng đang được sử dụng.

00:04:20.000 --> 00:04:30.000
Cho dù người dùng chấp nhận hay từ chối yêu cầu sử dụng Tương tác lân cận của ứng dụng của bạn, lời nhắc cho phép sẽ không hiển thị lại.

00:04:30.000 --> 00:04:37.000
Bắt đầu từ iOS 15, các ứng dụng sử dụng Tương tác lân cận sẽ xuất hiện trong Cài đặt.

00:04:37.000 --> 00:04:44.000
Vì vậy, nếu người dùng thay đổi ý định, họ có thể truy cập ứng dụng Cài đặt và thay đổi quyền truy cập "Tương tác gần" của ứng dụng của bạn.

00:04:44.000 --> 00:04:50.000
Đảm bảo kiểm tra kịch bản này khi phát triển ứng dụng của bạn.

00:04:50.000 --> 00:04:56.000
Hãy tóm tắt mô hình quyền người dùng Tương tác lân cận mới.

00:04:56.000 --> 00:05:05.000
Lời nhắc cấp phép mới, khi được chấp nhận, cho phép ứng dụng của bạn liên tục sử dụng Tương tác lân cận trong khi ứng dụng đang được sử dụng.

00:05:05.000 --> 00:05:13.000
Cảnh báo sẽ trình bày một chuỗi mô tả sử dụng, do bạn cung cấp trong Info.plist của ứng dụng của bạn.

00:05:13.000 --> 00:05:24.000
Trong chuỗi mục đích này, hãy rõ ràng và súc tích, và giải thích những tính năng tuyệt vời trong ứng dụng của bạn cần truy cập vào Tương tác lân cận là gì.

00:05:24.000 --> 00:05:39.000
Sau khi lời nhắc hiển thị lần đầu tiên và cuối cùng, tên và biểu tượng ứng dụng của bạn sẽ xuất hiện trong ứng dụng Cài đặt, có nghĩa là người dùng có thể thay đổi trạng thái cho phép ứng dụng của bạn bất cứ lúc nào.

00:05:39.000 --> 00:05:50.000
Khi ứng dụng của bạn không có đủ quyền sử dụng Tương tác lân cận, NISessions của bạn sẽ bị vô hiệu hóa với mã lỗi liên quan đến quyền.

00:05:50.000 --> 00:06:02.000
Vì vậy, nếu một chức năng chính trong ứng dụng của bạn dựa vào quyền truy cập vào Tương tác lân cận, hãy đảm bảo giải thích rõ ràng điều này cho người dùng của bạn và hướng dẫn họ đến ứng dụng Cài đặt khi thích hợp.

00:06:02.000 --> 00:06:07.000
Đó là lời nhắc cấp phép mới trong iOS 15.

00:06:07.000 --> 00:06:15.000
Và bây giờ, chúng tôi rất vui mừng được giới thiệu một số API mới giúp có thể sử dụng Tương tác lân cận với phần cứng của bên thứ ba tương thích.

00:06:15.000 --> 00:06:22.000
Chúng tôi muốn API này hoạt động với một loạt các phụ kiện mà bạn có thể cân nhắc xây dựng.

00:06:22.000 --> 00:06:31.000
Vì vậy, chúng tôi dựa trên hỗ trợ phần cứng của bên thứ ba của Nearby Interaction dựa trên các tiêu chuẩn mà chúng tôi đang làm việc với các nhóm ngành.

00:06:31.000 --> 00:06:49.000
Và để giúp bạn bắt đầu tạo mẫu, thử nghiệm và xây dựng các phụ kiện của mình, chúng tôi đã làm việc với các nhà sản xuất chipset, những người đang cung cấp các bộ công cụ phát triển có sẵn có chứa phần cứng và phần sụn có thể tương tác với U1 trong iPhone.

00:06:49.000 --> 00:06:59.000
Vì vậy, cùng với các bộ công cụ phát triển, chúng tôi cũng đang cung cấp mã ứng dụng mẫu hoạt động ngay lập tức với phần cứng trong bộ công cụ phát triển.

00:06:59.000 --> 00:07:07.000
Vì vậy, cùng nhau, chúng có thể đóng vai trò là điểm khởi đầu tuyệt vời cho dự án của bạn.

00:07:07.000 --> 00:07:20.000
Và nếu bạn là nhà sản xuất phụ kiện, vui lòng xem tài liệu Đặc tả Giao thức Phụ kiện, Tương tác lân cận sẽ có sẵn cho bạn trong "Bản xem trước dành cho nhà phát triển" trên trang web của nhà phát triển Apple.

00:07:20.000 --> 00:07:37.000
Cho dù bạn chỉ muốn mày mò với công nghệ mới thú vị này hay bạn đã sẵn sàng tích hợp Ultra Wideband vào phụ kiện của riêng mình, hãy xem một ví dụ đơn giản minh họa cách bạn sử dụng API Tương tác lân cận với phụ kiện của bên thứ ba.

00:07:37.000 --> 00:07:47.000
Bật chức năng khác nhau dựa trên khoảng cách chính xác của người dùng đến một phụ kiện có thể là một cách mạnh mẽ để hợp lý hóa các tương tác với thiết bị đó.

00:07:47.000 --> 00:07:58.000
Vì vậy, giả sử rằng bạn đang xây dựng một phụ kiện và bạn muốn tích hợp Ultra Wideband vào đó, để kích hoạt một tập hợp các tính năng sẽ thực sự làm cho nó nổi bật.

00:07:58.000 --> 00:08:09.000
Và vì Ultra Wideband có thể cung cấp cho bạn khoảng cách chính xác, bạn đang lên kế hoạch sử dụng nó để theo dõi một vài vùng hoặc khu vực chính xác xung quanh phụ kiện.

00:08:09.000 --> 00:08:19.000
Vì vậy, giả sử rằng bạn xác định một vùng xung quanh phụ kiện có bán kính 1,5 mét và một vùng khác lớn hơn với bán kính 3 mét.

00:08:19.000 --> 00:08:31.000
Và giả sử rằng bạn quan tâm đến những khoảng cách cụ thể này bởi vì, khi người dùng vào khu vực lớn hơn xung quanh phụ kiện, bạn muốn bật một số chức năng A.

00:08:31.000 --> 00:08:38.000
Và khi người dùng vào khu vực nhỏ hơn, bạn muốn bật chức năng B.

00:08:38.000 --> 00:08:43.000
Vậy, làm thế nào để bạn thực sự đạt được điều này trong ứng dụng của mình bằng cách sử dụng khung Tương tác lân cận?

00:08:43.000 --> 00:08:54.000
Trước hết, Tương tác lân cận mong đợi ứng dụng và phụ kiện của bạn có một số loại khả năng trao đổi dữ liệu giữa chúng.

00:08:54.000 --> 00:09:06.000
Đối với công nghệ cụ thể được sử dụng để trao đổi dữ liệu, điều đó hoàn toàn phụ thuộc vào bạn và những gì phụ kiện của bạn làm và không cần phải làm.

00:09:06.000 --> 00:09:09.000
Giả sử phụ kiện của bạn đã hỗ trợ Bluetooth.

00:09:09.000 --> 00:09:18.000
Điều này sẽ đưa bạn vào một vị trí tuyệt vời vì bạn sẽ có thể sử dụng khả năng Bluetooth hiện có cho yêu cầu trao đổi dữ liệu của mình.

00:09:18.000 --> 00:09:26.000
Nếu phụ kiện của bạn được kết nối với mạng cục bộ hoặc được kết nối an toàn với internet, bạn cũng đang ở trong tình trạng tuyệt vời.

00:09:26.000 --> 00:09:35.000
Khả năng gửi dữ liệu qua lại giữa ứng dụng và phụ kiện sẽ phục vụ bạn cho những gì bạn cần làm tiếp theo.

00:09:35.000 --> 00:09:43.000
Nhớ lại rằng khi chúng tôi muốn bắt đầu một phiên giữa hai iPhone đang chạy ứng dụng của bạn, chúng tôi đã tạo Cấu hình ngang hàng lân cận.

00:09:43.000 --> 00:09:50.000
Để bắt đầu một phiên với một phụ kiện, chúng tôi sẽ tạo một Cấu hình Phụ kiện lân cận.

00:09:50.000 --> 00:09:55.000
Đây là loại NIConfiguration mới trong iOS 15.

00:09:55.000 --> 00:10:12.000
Để khởi tạo Cấu hình Phụ kiện, chúng tôi cần cung cấp cho nó một số dữ liệu cấu hình, mô tả phụ kiện mà khung dự kiến sẽ nhận được ở một định dạng cụ thể được gọi là Dữ liệu Cấu hình Phụ kiện.

00:10:12.000 --> 00:10:17.000
Nhưng làm thế nào để chúng ta có được dữ liệu cấu hình này, và định dạng cụ thể này là gì?

00:10:17.000 --> 00:10:31.000
Phần cứng băng thông rộng siêu tương thích U1, giống như các loại bạn có thể nhận được từ các nhà cung cấp công nghệ được chứng nhận, sẽ biết cách tạo dữ liệu cấu hình này theo yêu cầu.

00:10:31.000 --> 00:10:45.000
Điều này có nghĩa là mã bạn đang chạy trên chính phụ kiện sẽ cần tạo dữ liệu này và sau đó gửi nó đến ứng dụng của bạn trên kênh dữ liệu của bạn.

00:10:45.000 --> 00:10:54.000
Hãy xem xét một ví dụ mã để khởi tạo Cấu hình Phụ kiện lân cận với dữ liệu nhận được từ một phụ kiện.

00:10:54.000 --> 00:11:00.000
Giả sử rằng setupAccessory là một phương pháp trợ giúp mà tôi đã viết trong ứng dụng của mình.

00:11:00.000 --> 00:11:12.000
Bất cứ khi nào tôi nhận được Dữ liệu Cấu hình Phụ kiện từ một phụ kiện, có logic trong ứng dụng của tôi định tuyến nó đến chức năng này, cùng với tên của phụ kiện.

00:11:12.000 --> 00:11:20.000
Tại thời điểm này, tôi có thể tạo NINearbyAccessoryConfiguration bằng cách sử dụng dữ liệu tôi nhận được từ phụ kiện.

00:11:20.000 --> 00:11:27.000
Bạn sẽ nhận thấy rằng tôi tạo cấu hình của mình bên trong một câu lệnh do/catch.

00:11:27.000 --> 00:11:39.000
Tôi làm điều này bởi vì nếu dữ liệu tôi nhận được từ phụ kiện không hợp lệ theo một cách nào đó, phương thức NIConfiguration init sẽ ném một ngoại lệ.

00:11:39.000 --> 00:11:50.000
Nhưng nếu đối tượng cấu hình được tạo thành công, điều đó có nghĩa là dữ liệu tôi nhận được từ phụ kiện ở định dạng phù hợp và hiện có thể được sử dụng.

00:11:50.000 --> 00:11:56.000
Lý do cuối cùng để tạo ra một cấu hình là để sử dụng nó để chạy một phiên.

00:11:56.000 --> 00:12:03.000
Nhưng trước khi tôi làm điều đó, có một cơ hội tốt để tôi lưu trữ một số dữ liệu hữu ích để sử dụng sau này.

00:12:03.000 --> 00:12:13.000
Loại Cấu hình Phụ kiện lân cận mới có thuộc tính DiscoveryToken cho phụ kiện mà khung tự động điền vào.

00:12:13.000 --> 00:12:21.000
Ngoài ra, trong chức năng setupAccessory mà tôi đã xác định, tôi cũng có tên của phụ kiện.

00:12:21.000 --> 00:12:47.000
Vì vậy, có thể thực sự hữu ích khi lưu mã thông báo khám phá cùng với tên của phụ kiện ở giai đoạn này bởi vì sau này, khi tôi bắt đầu nhận được các bản cập nhật NearbyObject về phụ kiện này, tôi sẽ có thể sử dụng mã thông báo và tên để tương quan các bản cập nhật trở lại phụ kiện này, sau đó hiển thị giao diện người dùng

00:12:47.000 --> 00:12:48.000
Được rồi.

00:12:48.000 --> 00:12:56.000
Vì vậy, chúng tôi có dữ liệu cấu hình hợp lệ từ phụ kiện và chúng tôi đã sử dụng nó để tạo một đối tượng cấu hình phụ kiện.

00:12:56.000 --> 00:13:02.000
Bây giờ, chúng ta có thể sẵn sàng tương tác với phụ kiện này.

00:13:02.000 --> 00:13:09.000
Để quản lý tương tác, chúng ta sẽ cần một phiên bản NISession và chúng ta sẽ cần đặt đại diện của phiên.

00:13:09.000 --> 00:13:19.000
Để bắt đầu phiên, chúng tôi chỉ cần gọi hàm "chạy" trên phiên, sử dụng đối tượng cấu hình phụ kiện mà chúng tôi đã tạo.

00:13:19.000 --> 00:13:31.000
Cũng giống như Tương tác lân cận cần dữ liệu cấu hình từ phụ kiện, phụ kiện cũng cần dữ liệu cấu hình từ Tương tác lân cận để biết cách tự định cấu hình.

00:13:31.000 --> 00:13:37.000
Dữ liệu này cần phải ở định dạng được gọi là "Dữ liệu cấu hình có thể chia sẻ".

00:13:37.000 --> 00:13:49.000
Khi bạn chạy một phiên với cấu hình phụ kiện, Tương tác lân cận sẽ cung cấp Dữ liệu cấu hình có thể chia sẻ cho ứng dụng của bạn thông qua cuộc gọi lại đại diện.

00:13:49.000 --> 00:14:01.000
Và giống như chúng tôi đã sử dụng kênh dữ liệu để nhận dữ liệu cấu hình của phụ kiện, ở đây, chúng tôi sẽ sử dụng lại nó để gửi dữ liệu cấu hình có thể chia sẻ trở lại phụ kiện.

00:14:01.000 --> 00:14:05.000
Để làm cho mọi thứ cụ thể hơn, hãy xem một ví dụ về mã.

00:14:05.000 --> 00:14:16.000
Dữ liệu cấu hình có thể chia sẻ được cung cấp cho ứng dụng của bạn thông qua lệnh gọi lại đại diện didGenerate, đây là một cuộc gọi lại đại diện mới trong iOS 15.

00:14:16.000 --> 00:14:19.000
Đây là một triển khai khả thi của cuộc gọi lại này trong một ứng dụng.

00:14:19.000 --> 00:14:32.000
Khung cung cấp Dữ liệu Cấu hình Có thể Chia sẻ và cũng chỉ ra phụ kiện nào nên sử dụng, điều này thực sự hữu ích trong trường hợp bạn đang tương tác với nhiều phụ kiện.

00:14:32.000 --> 00:14:39.000
Bạn nên lên kế hoạch gửi dữ liệu đến phụ kiện càng sớm càng tốt qua kênh dữ liệu của mình.

00:14:39.000 --> 00:14:48.000
Trên một lưu ý chung, việc quản lý kết nối dữ liệu với các phụ kiện khác nhau có thể có nhiều hình thức khác nhau, tất cả tùy thuộc vào trường hợp sử dụng của bạn.

00:14:48.000 --> 00:14:58.000
Để đơn giản, giả sử rằng trong kiến trúc ứng dụng của tôi, tôi đã chọn giữ kết nối dữ liệu độc lập cho từng phụ kiện mà tôi đang tương tác.

00:14:58.000 --> 00:15:08.000
Và để giữ cho mã của tôi được sắp xếp độc đáo, tôi đã xác định một hàm trợ giúp cung cấp cho tôi kết nối dựa trên Đối tượng lân cận mà tôi cung cấp cho nó.

00:15:08.000 --> 00:15:17.000
Khi tôi nhận được tham chiếu đến kết nối, tôi sẽ sử dụng nó để gửi Dữ liệu Cấu hình Có thể Chia sẻ đến phụ kiện ngay lập tức.

00:15:17.000 --> 00:15:25.000
Điều quan trọng là phải tối ưu hóa ứng dụng của bạn để gửi dữ liệu cấu hình có thể chia sẻ đến phụ kiện với ít độ trễ nhất có thể.

00:15:25.000 --> 00:15:31.000
Nếu ShareableConfigurationData không được gửi đủ nhanh, phiên của bạn có thể hết thời gian chờ.

00:15:31.000 --> 00:15:40.000
Thời gian chờ trong phiên với phụ kiện sẽ được thông báo đến ứng dụng của bạn thông qua lệnh gọi lại đại diện didRemove.

00:15:40.000 --> 00:15:44.000
Hãy xem cách bạn có thể xử lý kịch bản này.

00:15:44.000 --> 00:15:52.000
Khi Tương tác lân cận cung cấp cho tôi cuộc gọi lại didRemove, được hiển thị trên màn hình, trước tiên tôi sẽ kiểm tra tham số "lý do".

00:15:52.000 --> 00:16:04.000
Nếu lý do là .timeout và tôi rất tin tưởng rằng phụ kiện có thể vẫn ở gần đó, tôi có thể thử tương tác lại với nó.

00:16:04.000 --> 00:16:16.000
Để quyết định xem tôi có nên đi vào "quy trình thử lại" với phụ kiện này hay không, tôi đã xác định một chức năng trợ giúp có chứa logic chuyên biệt giúp tôi đưa ra quyết định này.

00:16:16.000 --> 00:16:22.000
Bạn có thể tưởng tượng rằng những điều kiện như "Đã bao nhiêu lần tôi thử lại mà không thành công?"

00:16:22.000 --> 00:16:25.000
Hoặc "Phụ kiện đã thông báo cho tôi rằng nó đã dừng lại chưa?"

00:16:25.000 --> 00:16:31.000
Hoặc các câu hỏi tương tự khác có thể là một phần của các quyết định như thế này.

00:16:31.000 --> 00:16:39.000
Nếu tôi quyết định thử lại, tất cả những gì tôi phải làm là chạy lại phiên với cùng một cấu hình.

00:16:39.000 --> 00:16:48.000
Hãy nhớ rằng cấu hình được lưu trong bộ nhớ cache sẽ chỉ còn hiệu lực miễn là phiên trên phụ kiện không bị chấm dứt.

00:16:48.000 --> 00:16:56.000
Nếu phiên bị chấm dứt, tôi sẽ phải trải qua cùng một luồng mà tôi đã sử dụng để tạo và chạy phiên lần đầu tiên.

00:16:56.000 --> 00:17:09.000
Hãy nhớ rằng các phiên trên phụ kiện là thứ mà mã chạy trên phụ kiện phải quản lý và có thể được thực hiện theo nhiều cách khác nhau, tất cả tùy thuộc vào trường hợp sử dụng của bạn.

00:17:09.000 --> 00:17:10.000
Được rồi.

00:17:10.000 --> 00:17:17.000
Bạn đã gửi Dữ liệu Cấu hình Có thể Chia sẻ đến phụ kiện của mình và thậm chí bạn có logic để xử lý các lần thử lại nếu cần.

00:17:17.000 --> 00:17:19.000
Tiếp theo là gì?

00:17:19.000 --> 00:17:34.000
Giống như với Dữ liệu Cấu hình Phụ kiện Phần cứng tương thích U1 trong phụ kiện sẽ tự động biết phải làm gì với Dữ liệu Cấu hình Có thể Chia sẻ khi mã phụ kiện của bạn cung cấp nó cho nó.

00:17:34.000 --> 00:17:46.000
Vì vậy, một khi mã chạy trên phụ kiện nhận được dữ liệu, nó cần cung cấp nguyên trạng và càng nhanh càng tốt cho phần cứng Ultra-Wideband trên bo mạch.

00:17:46.000 --> 00:17:54.000
Bạn có thể tự hỏi - phần cứng Ultra-Wideband trong phụ kiện sẽ biết cách tạo hoặc tiêu thụ dữ liệu cấu hình như thế nào?

00:17:54.000 --> 00:18:06.000
Cả Dữ liệu Cấu hình Phụ kiện và Dữ liệu Cấu hình Có thể Chia sẻ đều được xác định trong một tài liệu đặc tả mà chúng tôi đã xuất bản vào đầu mùa xuân này.

00:18:06.000 --> 00:18:22.000
Tài liệu dành cho các nhà sản xuất chipset và mô-đun, và nó chứa các chi tiết cần thiết để tạo ra các giải pháp băng tần siêu rộng sử dụng các tiêu chuẩn công nghiệp để tương tác với U1 trong iPhone.

00:18:22.000 --> 00:18:32.000
Ngoài đặc điểm kỹ thuật tương tác cho các nhà sản xuất chipset, chúng tôi cũng đang phát hành một đặc điểm kỹ thuật nhắm vào các nhà sản xuất phụ kiện.

00:18:32.000 --> 00:18:45.000
Vì vậy, nếu bạn đang hy vọng xây dựng một phụ kiện có chứa phần cứng Ultra-Wideband và bạn muốn tương tác với nó bằng cách sử dụng khung Tương tác lân cận trong ứng dụng của mình, tài liệu này là dành cho bạn.

00:18:45.000 --> 00:18:52.000
Bạn sẽ tìm thấy nó trên trang web của nhà phát triển, cùng với các tài nguyên bổ sung để bắt đầu.

00:18:52.000 --> 00:18:54.000
Đây là nơi chúng tôi đã dừng lại.

00:18:54.000 --> 00:19:01.000
Chúng tôi vừa gửi Dữ liệu Cấu hình Có thể Chia sẻ đến phụ kiện qua kênh dữ liệu.

00:19:01.000 --> 00:19:09.000
Bây giờ, hãy xem điều gì sẽ xảy ra khi mã trên phụ kiện nhận được nó và cung cấp nó cho phần cứng Ultra-Wideband.

00:19:09.000 --> 00:19:24.000
Sau khi nhận được dữ liệu cấu hình có thể chia sẻ, phần cứng Ultra-Wideband trên phụ kiện sẽ ngay lập tức bắt đầu chạy trong cấu hình thích hợp để tương tác với NISession trong ứng dụng của bạn.

00:19:24.000 --> 00:19:40.000
Và nếu cả phụ kiện và iPhone đang chạy ứng dụng của bạn ở gần nhau, phiên sẽ bắt đầu cung cấp cho ứng dụng của bạn một luồng cập nhật NearbyObject, chứa khoảng cách và tùy chọn, hướng đến phụ kiện.

00:19:40.000 --> 00:19:47.000
Bạn thậm chí có thể tương tác với một số phụ kiện cùng một lúc, bằng cách tạo và chạy một phiên cho mỗi phụ kiện.

00:19:47.000 --> 00:19:56.000
Tùy thuộc vào các tính năng phần cứng trên phụ kiện, bạn cũng có thể nhận được các bản cập nhật khoảng cách tương đương trong mã đang chạy trên phụ kiện.

00:19:56.000 --> 00:20:02.000
Khi bạn nhận được các bản cập nhật NearbyObject từ khuôn khổ, bạn sẽ làm gì với chúng?

00:20:02.000 --> 00:20:18.000
Xin nhắc lại, chúng tôi muốn xây dựng trải nghiệm trong đó ứng dụng và phụ kiện bật chức năng A khi người dùng vào khu vực lớn hơn và bật chức năng B khi người dùng vào khu vực nhỏ hơn xung quanh phụ kiện.

00:20:18.000 --> 00:20:26.000
Hãy xem một ví dụ mã cho thấy cách bạn có thể làm điều này bằng cách sử dụng các bản cập nhật NearbyObject trong ứng dụng iOS của mình.

00:20:26.000 --> 00:20:38.000
Khi phiên giữa ứng dụng và phụ kiện đang chạy, các cập nhật về phụ kiện được gửi đến đại diện của phiên thông qua lệnh gọi lại đại diện didUpdate.

00:20:38.000 --> 00:20:44.000
Đầu tiên, tôi sẽ lấy một tham chiếu đến đối tượng gần đó mà khung đang cập nhật cho tôi.

00:20:44.000 --> 00:20:52.000
Tiếp theo, tôi sẽ tạo một biến cục bộ với khoảng cách đến đối tượng này, mà khung đang cung cấp tính bằng mét.

00:20:52.000 --> 00:21:02.000
Điều tiếp theo tôi sẽ làm là cung cấp dữ liệu này cho chức năng trợ giúp mà tôi có trong ứng dụng mà tôi đã gọi là getSmoothedDistance.

00:21:02.000 --> 00:21:08.000
Tôi đã xác định chức năng này trong ứng dụng của mình để giúp tôi bảo vệ chống lại những thay đổi nhanh chóng về khoảng cách.

00:21:08.000 --> 00:21:18.000
Ví dụ, trong trường hợp người dùng thực hiện các chuyển động đột ngột hoặc họ tình cờ đứng trên ranh giới giữa các khu vực.

00:21:18.000 --> 00:21:26.000
Cuối cùng, tôi có thể kiểm tra xem khoảng cách của người dùng từ phụ kiện có vượt quá ngưỡng được xác định trước của tôi hay không.

00:21:26.000 --> 00:21:34.000
Ở đây, tôi có thể chọn bật Chức năng A hoặc Chức năng B dựa trên khoảng cách hiện tại.

00:21:34.000 --> 00:21:48.000
Nếu bạn quan tâm đến việc tìm hiểu thêm về trải nghiệm thiết kế dựa trên khoảng cách và hướng giữa các thiết bị, hãy xem bài nói chuyện WWDC "Thiết kế cho Tương tác Không gian" từ năm nay.

00:21:48.000 --> 00:21:53.000
Vì vậy, hãy tóm tắt những gì chúng ta đã thảo luận trong phiên này.

00:21:53.000 --> 00:22:02.000
Chúng tôi đã nói về cách mô hình cấp phép mới cho phép ứng dụng của bạn truy cập Tương tác lân cận trong khi ứng dụng đang được sử dụng.

00:22:02.000 --> 00:22:14.000
Chúng tôi đã đi sâu vào thế giới hoàn toàn mới của các phụ kiện của bên thứ ba hỗ trợ Tương tác lân cận và những API nào bạn có thể sử dụng để xây dựng tương tác không gian với phụ kiện của riêng bạn.

00:22:14.000 --> 00:22:26.000
Chúng tôi cũng đã thảo luận về các bộ công cụ phát triển của bên thứ ba, có sẵn từ các nhà cung cấp công nghệ được hỗ trợ và mã ứng dụng iOS mà bạn có thể sử dụng để bắt đầu với dự án của mình ngay lập tức.

00:22:26.000 --> 00:22:32.000
Vì vậy, hãy tiếp tục, thử và bắt đầu thử nghiệm và tạo mẫu các trường hợp sử dụng của bạn.

00:22:32.000 --> 00:22:42.000
Và khi bạn đã sẵn sàng áp dụng Ultra Wideband trong phụ kiện của mình, hãy đọc các tài liệu đặc điểm kỹ thuật có liên quan, có sẵn trên trang web của nhà phát triển Apple.

00:22:42.000 --> 00:22:45.000
Đó là nó cho các bản cập nhật Tương tác lân cận năm nay.

00:22:45.000 --> 00:22:46.000
Cảm ơn vì đã điều chỉnh.

00:22:46.000 --> 00:22:54.000
Chúng tôi hy vọng phiên này hữu ích và chứa tất cả thông tin bạn cần để bắt đầu xây dựng một số ứng dụng và phụ kiện tuyệt vời.

00:22:54.000 --> 23:59:59.000
[Nhạc lạc quan].

