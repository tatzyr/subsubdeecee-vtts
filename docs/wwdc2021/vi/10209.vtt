WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Han Ming Ong: Xin chào, tên tôi là Han Ming Ong.

00:00:12.000 --> 00:00:15.000
Tôi là một kỹ sư trong nhóm Xcode Debugger UI.

00:00:15.000 --> 00:00:23.000
Hôm nay, tôi muốn nói về những cải tiến mà nhóm đã thực hiện đối với các điểm dừng sẽ giúp việc gỡ lỗi của bạn hiệu quả hơn.

00:00:23.000 --> 00:00:27.000
Hãy bắt đầu với một số điều cơ bản về điểm dừng để đưa mọi người vào cùng một trang.

00:00:27.000 --> 00:00:38.000
Khi bạn gặp phải một lỗi trong chương trình của mình, điều đó có nghĩa là nó không thực hiện theo mong đợi của bạn và bạn muốn kiểm tra với trình gỡ lỗi tại sao thực tế lại phân kỳ.

00:00:38.000 --> 00:00:42.000
Tại thời điểm này, có hai hoạt động phổ biến mà bạn thực hiện.

00:00:42.000 --> 00:00:47.000
Một, bạn kiểm tra trạng thái quy trình để hiểu rõ hơn về tình hình.

00:00:47.000 --> 00:00:52.000
Hai, bạn xác định logic của mình bằng cách bước qua quá trình thực hiện.

00:00:52.000 --> 00:00:59.000
Cả hai hoạt động đều yêu cầu bạn tạm dừng, lý tưởng nhất là ngay trước khi lỗi xảy ra.

00:00:59.000 --> 00:01:04.000
Và cách tốt nhất để tạm dừng quá trình là sử dụng điểm dừng.

00:01:04.000 --> 00:01:08.000
Chúng ta sẽ nói về ba điểm dừng phổ biến mà bạn có thể tạo trong Xcode.

00:01:08.000 --> 00:01:13.000
Đầu tiên là các điểm ngắt tệp nguồn.

00:01:13.000 --> 00:01:16.000
Đây là những điểm dừng được đặt trong một tệp duy nhất.

00:01:16.000 --> 00:01:19.000
Loại phổ biến nhất là điểm ngắt dòng.

00:01:19.000 --> 00:01:26.000
Nó là công cụ của các điểm dừng và rất tuyệt vời để tạm dừng trên một dòng mã bạn muốn kiểm tra.

00:01:26.000 --> 00:01:33.000
Cách nhanh nhất để tạo một cái chỉ đơn giản là nhấp vào máng xối, ngay bên cạnh dòng bạn muốn tạm dừng.

00:01:33.000 --> 00:01:43.000
Giả sử tại thời điểm này, tôi muốn kiểm tra logic của hàm convertedToVolume bằng cách bước vào nó.

00:01:43.000 --> 00:01:48.000
Nhưng khi tôi bước vào, tôi thực sự đang bước vào một biểu hiện khác.

00:01:48.000 --> 00:01:55.000
Trình biên dịch đã xác định đúng rằng nhu cầu mật độ đã điều chỉnh được thực hiện trước.

00:01:55.000 --> 00:02:07.000
Tất nhiên, tôi có thể bước ra ngoài và sau đó quay trở lại chức năng, nhưng điều này có thể tốn nhiều công sức khi bạn phải lặp lại nó nhiều lần.

00:02:07.000 --> 00:02:14.000
Những gì chúng ta đang thấy ở đây là đôi khi một điểm ngắt dòng không đủ chi tiết.

00:02:14.000 --> 00:02:21.000
Đó là bởi vì trình biên dịch đã tạo ra nhiều hơn một vị trí để LLDB dừng lại.

00:02:21.000 --> 00:02:27.000
Những gì chúng tôi thực sự muốn là tạm dừng ngay trước khi convertedToVolume được thực thi.

00:02:27.000 --> 00:02:32.000
Trong Xcode 13, chúng tôi đang giới thiệu các điểm ngắt cột.

00:02:32.000 --> 00:02:40.000
Điều này cho phép bạn tránh những thiếu sót của các điểm ngắt dòng khi bạn cần tạm dừng ở một số biểu thức nhất định dọc theo một dòng.

00:02:40.000 --> 00:02:50.000
Để đặt điểm ngắt cột trên convertedToVolume, bạn nhấp lệnh vào biểu thức để hiển thị cửa sổ bật lên Hành động và sau đó chọn Đặt điểm ngắt cột.

00:02:50.000 --> 00:02:57.000
Cũng giống như với điểm ngắt dòng, bạn có thể nhấp vào biểu tượng để tắt hoặc bật.

00:02:57.000 --> 00:03:04.000
Bạn có thể nhấp đúp vào nó để hiển thị trình chỉnh sửa điểm dừng nếu bạn cần sửa đổi điểm dừng.

00:03:04.000 --> 00:03:10.000
Vì chúng ta không cần điểm ngắt dòng nữa, chúng ta có thể xóa nó bằng cách kéo ra khỏi máng xối.

00:03:10.000 --> 00:03:16.000
Bạn có thể làm điều tương tự với điểm dừng cột của chúng tôi, nhưng tôi sẽ để nó ở đó.

00:03:16.000 --> 00:03:23.000
Điều khiển hoặc nhấp chuột phải sẽ hiển thị menu ngữ cảnh bao gồm hành động trước đó của chúng tôi.

00:03:23.000 --> 00:03:33.000
Ở đây tôi sẽ chọn Reveal in Breakpoint Navigator Phụ đề đã được sửa đổi để hiển thị cho bạn cột của điểm dừng.

00:03:33.000 --> 00:03:42.000
Khi chúng tôi tiếp tục, chúng tôi sẽ lặp lại thông qua NutritionFact tiếp theo và đạt đến điểm dừng cột mới được thiết lập của chúng tôi.

00:03:42.000 --> 00:03:48.000
Khi điểm dừng chạm vào, Xcode sử dụng dòng PC để cho bạn biết dòng bị tạm dừng.

00:03:48.000 --> 00:03:52.000
Nó vẽ một điểm nhấn màu xanh lá cây nhạt trên đường thẳng.

00:03:52.000 --> 00:03:55.000
Trong Xcode 11.4, chúng tôi đã giới thiệu cột PC.

00:03:55.000 --> 00:04:01.000
Cột PC hiển thị cho bạn cột đã tạm dừng bằng cách vẽ dấu gạch dưới màu xanh lá cây dưới biểu thức.

00:04:01.000 --> 00:04:07.000
Vì vậy, nó cho bạn biết biểu thức mà trình gỡ lỗi sẽ thực hiện tiếp theo.

00:04:07.000 --> 00:04:15.000
Vì tôi đang nhìn thấy cột PC trong convertedToVolume, tôi có thể tự tin thực hiện một bước vào chức năng.

00:04:15.000 --> 00:04:21.000
Các điểm ngắt cột đặc biệt hữu ích cho việc đóng trong Swift hoặc các khối trong Objective-C.

00:04:21.000 --> 00:04:28.000
Đôi khi một dòng Swift duy nhất có thể có nhiều lần đóng, giống như dòng 269 này.

00:04:28.000 --> 00:04:39.000
Khi trình biên dịch biên dịch một tệp trong điều kiện gỡ lỗi, nó sẽ tạo ra một bản đồ được gọi là bảng dòng ánh xạ các dòng và cột nguồn đến các địa chỉ được biên dịch.

00:04:39.000 --> 00:04:46.000
Vì vậy, đối với mỗi lần đóng trên dòng này, trình biên dịch tạo ra một mục nhập bảng dòng mà trình gỡ lỗi sẽ sử dụng để tạm dừng.

00:04:46.000 --> 00:05:05.000
Giả sử tôi muốn kiểm tra tham số ẩn danh 0 đô la của lần đóng cuối cùng, tôi có thể đặt điểm dừng dòng ở mức 269 nhưng sau khi tạm dừng, để đạt được lần đóng cuối cùng, tôi cần thực hiện nhiều bước vào và bước ra do các mục nhập bảng dòng được tạo.

00:05:05.000 --> 00:05:18.000
Chúng tôi đã thấy rằng với Xcode 13, chúng tôi có thể chỉ cần đặt điểm dừng cột ở mức 0 đô la cuối cùng và khi tạm dừng, chúng tôi chính xác là nơi chúng tôi muốn và chúng tôi có thể kiểm tra 0 đô la theo ý mình.

00:05:18.000 --> 00:05:25.000
Hmm, có vẻ như có Sinh tố sầu riêng thơm - cho bữa sáng không kém - là một cách tuyệt vời để bắt đầu ngày mới.

00:05:25.000 --> 00:05:27.000
Ngon quá!

00:05:27.000 --> 00:05:30.000
Hãy chuyển sang các điểm dừng mang tính biểu tượng.

00:05:30.000 --> 00:05:36.000
Đây là những điểm ngắt trên tên hàm sẽ tạm dừng quá trình khi các hàm đó được thực thi.

00:05:36.000 --> 00:05:43.000
Chúng rất hữu ích trong những tình huống mà các điểm ngắt tệp nguồn không thể được sử dụng hoặc bất tiện.

00:05:43.000 --> 00:05:49.000
Ví dụ, bạn không có quyền truy cập vào các tệp nguồn và do đó, bạn không thể biên dịch chúng với thông tin gỡ lỗi.

00:05:49.000 --> 00:05:57.000
Hoặc bạn có nhiều lớp con triển khai một hàm chung và thật rườm rà khi đặt một điểm ngắt tệp trong mỗi lớp.

00:05:57.000 --> 00:06:01.000
Hãy cùng xem nào.

00:06:01.000 --> 00:06:06.000
Chúng tôi sẽ nhấp vào nút Thêm ở cuối trình điều hướng điểm dừng.

00:06:06.000 --> 00:06:10.000
Điều này đưa ra một danh sách các điểm dừng mà chúng ta có thể tạo ra.

00:06:10.000 --> 00:06:19.000
Chúng tôi sẽ chọn Điểm dừng tượng trưng và ngay lập tức trình chỉnh sửa điểm dừng xuất hiện để chúng tôi có thể nhập tên biểu tượng.

00:06:19.000 --> 00:06:25.000
Giả sử chúng ta quan tâm đến việc tạm dừng chức năng chuyển đổi được triển khai trong một vài lớp.

00:06:25.000 --> 00:06:29.000
Thay vì tìm kiếm từng người trong số họ, chúng ta chỉ cần nhập nút chuyển đổi ở đây.

00:06:29.000 --> 00:06:40.000
Nhưng bạn cần phải cẩn thận về tên hàm là những từ phổ biến.

00:06:40.000 --> 00:06:49.000
Điều này là do LLDB sẽ khớp với tên trong tất cả các thư viện được tải trong quá trình này, bao gồm cả các thư viện hệ thống.

00:06:49.000 --> 00:06:55.000
Nếu không hạn chế, có thể có nhiều vị trí điểm dừng được giải quyết, đôi khi thậm chí là hàng nghìn.

00:06:55.000 --> 00:07:02.000
Điều này có thể gây khó chịu nếu nhiều người trong số họ liên tục bị tấn công bởi đường dẫn thực thi.

00:07:02.000 --> 00:07:09.000
Rất may, chúng tôi có thể giới hạn tìm kiếm trong một mô-đun cụ thể.

00:07:09.000 --> 00:07:15.000
Mô-đun là một tệp nhị phân hoặc hình ảnh có thể được tải trong quá trình thực thi, bao gồm cả tệp nhị phân chính.

00:07:15.000 --> 00:07:22.000
Ở đây chúng tôi nhập "Fruta", là tên nhị phân của ứng dụng của chúng tôi.

00:07:22.000 --> 00:07:28.000
Và chúng tôi nhận được ba địa điểm được giải quyết, dễ quản lý hơn rất nhiều.

00:07:28.000 --> 00:07:33.000
Vì chúng ta đã chọn một ly sinh tố, hãy chuyển đổi nút yêu thích.

00:07:33.000 --> 00:07:37.000
Chúng tôi sẽ đạt được điểm dừng mang tính biểu tượng vừa được thiết lập.

00:07:37.000 --> 00:07:44.000
Bây giờ, đối với các điểm ngắt tượng trưng, bạn biết rằng khá dễ dàng để tạo ra lỗi đánh máy.

00:07:44.000 --> 00:07:51.000
Và sau đó trong quá trình thực thi chương trình, điểm dừng không chạm vào và bạn bị gãi đầu.

00:07:51.000 --> 00:07:59.000
Hãy thử tạo ra một cái gọi là convertToMass.

00:07:59.000 --> 00:08:11.000
Mới trong Xcode 13, nếu một điểm dừng không được LLDB giải quyết đến bất kỳ vị trí nào, Xcode sẽ hiển thị cho bạn một biểu tượng đứt nét.

00:08:11.000 --> 00:08:17.000
Có vô số lý do tại sao điểm dừng không được giải quyết nhưng có một số cách giải thích phổ biến.

00:08:17.000 --> 00:08:23.000
Nếu bạn di chuột qua biểu tượng điểm dừng chưa được giải quyết, chúng tôi có một chú giải công cụ có thể giúp bạn.

00:08:23.000 --> 00:08:26.000
Một vài lý do đầu tiên liên quan đến loại điểm dừng.

00:08:26.000 --> 00:08:34.000
Vì vậy, đối với một điểm dừng biểu tượng, tên phải được đánh vần chính xác và biểu tượng phải tồn tại trong thư viện của nó.

00:08:34.000 --> 00:08:40.000
Lý do tiếp theo chung chung hơn: thư viện cho điểm dừng phải được tải.

00:08:40.000 --> 00:08:51.000
Đôi khi, thư viện chỉ được tải sau khi bạn đã thực hiện một số hành động của người dùng, như nhấp vào một nút và tại thời điểm đó, LLDB sẽ tự động giải quyết điểm dừng cho bạn.

00:08:51.000 --> 00:08:54.000
Trong trường hợp này, tôi nghi ngờ mình có cách đánh vần không tốt.

00:08:54.000 --> 00:08:56.000
Hãy tìm ra nó.

00:08:56.000 --> 00:09:04.000
Một cách là sử dụng trình điều hướng tìm kiếm và tìm kiếm "chuyển đổi".

00:09:04.000 --> 00:09:10.000
Như bạn có thể thấy, có khá nhiều kết quả và sẽ mất một thời gian để phân tích chúng một cách trực quan.

00:09:10.000 --> 00:09:15.000
Thay vào đó, hãy sử dụng một thủ thuật khác thông qua LLDB.

00:09:15.000 --> 00:09:37.000
Trong bảng điều khiển Xcode, chúng tôi nhập `image` - cũng có nghĩa là mô-đun - `lookup -r` cho regex, `n` cho tên, `convert` và chúng tôi cung cấp tên mô-đun, Fruta để hạn chế tìm kiếm.

00:09:37.000 --> 00:09:42.000
Bạn có thể thấy chúng tôi chỉ có bốn trận đấu và chắc chắn đã viết sai chính tả tên hàm.

00:09:42.000 --> 00:09:46.000
Nó nên được "convertedToMass."

00:09:46.000 --> 00:09:57.000
Hãy sao chép và dán nó vào trình chỉnh sửa điểm dừng của chúng tôi.

00:09:57.000 --> 00:10:06.000
Và lần này, LLDB đã giải quyết nó thành công và cho chúng tôi vị trí số một.

00:10:06.000 --> 00:10:14.000
Nếu bạn quan tâm đến các mẹo và thủ thuật LLDB khác, vui lòng xem bài thuyết trình trước của chúng tôi, "LLDB: Ngoài 'po'."

00:10:14.000 --> 00:10:22.000
Hãy đưa ra một tập tin khác.

00:10:22.000 --> 00:10:27.000
Các điểm ngắt chưa được giải quyết cũng có thể được nhìn thấy trong các điểm ngắt tệp nguồn.

00:10:27.000 --> 00:10:30.000
Có hai lý do liên quan đến họ.

00:10:30.000 --> 00:10:34.000
Đầu tiên, dòng cho điểm dừng phải được biên dịch.

00:10:34.000 --> 00:10:41.000
Trong trường hợp này, dòng 23 không được biên dịch vì nó nằm trong phần khác của điều kiện trình biên dịch.

00:10:41.000 --> 00:10:45.000
Ngoài ra, trình biên dịch phải tạo thông tin gỡ lỗi cho mô-đun.

00:10:45.000 --> 00:10:49.000
Nếu không, bạn cần kiểm tra cài đặt xây dựng của mình.

00:10:49.000 --> 00:10:52.000
Tiếp theo là các điểm ngắt vấn đề thời gian chạy.

00:10:52.000 --> 00:10:59.000
Sự cố thời gian chạy là sự cố xảy ra trong thời gian chạy - ví dụ: thay đổi trạng thái giao diện người dùng trong luồng nền.

00:10:59.000 --> 00:11:11.000
Nó không nghiêm trọng như sự cố và theo mặc định, Xcode không tạm dừng quy trình của bạn, bởi vì nó có thể quá gây rối khi bạn đang tập trung vào một lỗi khác.

00:11:11.000 --> 00:11:19.000
Thay vào đó, khi sự cố thời gian chạy xảy ra, Xcode sẽ ghi lại dấu vết ngược và trình bày nó trong trình duyệt Vấn đề.

00:11:19.000 --> 00:11:27.000
Nhưng bởi vì vấn đề đã xảy ra trong quá khứ, không có lý do gì để kiểm tra trạng thái quy trình hiện tại.

00:11:27.000 --> 00:11:34.000
Vì vậy, đôi khi, bạn muốn bắt nó khi nó xảy ra.

00:11:34.000 --> 00:11:41.000
Có một điểm dừng sự cố thời gian chạy cho phép bạn tạm dừng trong trình gỡ lỗi và chọc vào quy trình ở đó và sau đó.

00:11:41.000 --> 00:11:44.000
Có nhiều loại điểm dừng vấn đề thời gian chạy khác nhau.

00:11:44.000 --> 00:11:51.000
Bạn có thể dễ dàng chọn một loại cụ thể bằng cách sử dụng cửa sổ bật lên loại.

00:11:51.000 --> 00:11:58.000
Hãy nhớ rằng đối với một số người trong số họ, bạn cần bật tính năng tương ứng trong tab chẩn đoán của trình chỉnh sửa sơ đồ.

00:11:58.000 --> 00:12:05.000
Bạn có thể đến đó chỉ bằng cách nhấp vào nút Đi đến.

00:12:05.000 --> 00:12:12.000
Vì chúng tôi muốn sử dụng điểm dừng vấn đề thời gian chạy của trình kiểm tra luồng chính, chúng tôi muốn bật Trình kiểm tra luồng chính.

00:12:12.000 --> 00:12:17.000
Tôi hy vọng rằng phiên của tôi đã cho bạn thấy những cải tiến mà chúng tôi đã thực hiện đối với các điểm dừng trong Xcode 13.

00:12:17.000 --> 00:12:24.000
Điểm dừng có thể nâng cao đáng kể năng lực gỡ lỗi của bạn và chắc chắn nên là một phần trong tiết mục của bạn.

00:12:24.000 --> 00:12:27.000
Cảm ơn bạn và tận hưởng phần còn lại của WWDC.

00:12:27.000 --> 23:59:59.000
♪

