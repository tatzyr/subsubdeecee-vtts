WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
Brady White: Xin chào, tôi là Brady.

00:00:10.000 --> 00:00:12.000
Tôi là một kỹ sư trong đội Thể hình.

00:00:12.000 --> 00:00:14.000
Cảm ơn vì đã tham gia cùng tôi.

00:00:14.000 --> 00:00:18.000
Có rất nhiều ứng dụng tập luyện tuyệt vời đã có sẵn trong App Store.

00:00:18.000 --> 00:00:23.000
Apple Watch là một thiết bị tuyệt vời có khả năng theo dõi tất cả các loại hoạt động thể dục.

00:00:23.000 --> 00:00:26.000
Nó có thể theo dõi khoảng cách và độ cao trên những chuyến đi xe đạp đầy thử thách đó.

00:00:26.000 --> 00:00:30.000
Bạn có thể theo dõi nhịp tim và năng lượng bị đốt cháy trong quá trình tập luyện cường độ cao.

00:00:30.000 --> 00:00:34.000
Đối với bơi lội, nó thậm chí có thể phát hiện loại đột quỵ và đếm vòng đua.

00:00:34.000 --> 00:00:39.000
Tất cả những điều này và hơn thế nữa có sẵn để bạn xây dựng một ứng dụng tập luyện tuyệt vời.

00:00:39.000 --> 00:00:43.000
Hãy xem những gì chúng ta sẽ đề cập hôm nay.

00:00:43.000 --> 00:00:45.000
Phiên này là một Code-Along.

00:00:45.000 --> 00:00:49.000
Chúng tôi sẽ xem xét điều đó có nghĩa là gì và cách bạn có thể tham gia.

00:00:49.000 --> 00:00:53.000
Chúng tôi sẽ xây dựng chế độ xem tập luyện của mình trong SwiftUI.

00:00:53.000 --> 00:00:57.000
Sau đó, chúng tôi sẽ tích hợp HealthKit vào quan điểm của mình.

00:00:57.000 --> 00:01:00.000
Chúng tôi cũng sẽ chỉ cho bạn cách hỗ trợ trạng thái Luôn Bật.

00:01:00.000 --> 00:01:04.000
Tôi rất phấn khích, hãy bắt đầu nào.

00:01:04.000 --> 00:01:06.000
Phiên này là một mã-cùng.

00:01:06.000 --> 00:01:09.000
Chúng tôi sẽ cùng nhau xây dựng một ứng dụng tập luyện từ đầu.

00:01:09.000 --> 00:01:14.000
Trong khi bạn chuẩn bị sẵn Xcode, hãy đề cập đến một vài khái niệm.

00:01:14.000 --> 00:01:16.000
Ứng dụng tập luyện là gì?

00:01:16.000 --> 00:01:19.000
Một ứng dụng tập luyện theo dõi hoạt động thể dục trong quá trình tập luyện.

00:01:19.000 --> 00:01:22.000
Một bài tập có thể được bắt đầu chỉ với một cú chạm.

00:01:22.000 --> 00:01:31.000
Trong khi tập luyện đang diễn ra, các chỉ số trực tiếp được hiển thị, chẳng hạn như thời gian đã trôi qua, năng lượng bị đốt cháy, nhịp tim và khoảng cách.

00:01:31.000 --> 00:01:36.000
Khi bài tập kết thúc, một bản tóm tắt hiển thị các số liệu được ghi lại cho bài tập.

00:01:36.000 --> 00:01:39.000
Đây là những gì chúng ta sẽ xây dựng ngày hôm nay.

00:01:39.000 --> 00:01:42.000
Hãy bắt đầu xây dựng quan điểm tập luyện của chúng ta.

00:01:42.000 --> 00:01:46.000
Hãy mở Xcode và bắt đầu một dự án mới.

00:01:46.000 --> 00:01:54.000
Nhấp vào Tạo một dự án Xcode mới, watchOS, Xem Ứng dụng, nhấp vào Tiếp theo.

00:01:54.000 --> 00:01:58.000
Đặt tên cho ứng dụng tập luyện của bạn, chẳng hạn như "MyWorkouts".

00:01:58.000 --> 00:02:04.000
Đảm bảo Giao diện là SwiftUI, và ngôn ngữ là Swift và nhấp vào Tiếp theo.

00:02:04.000 --> 00:02:13.000
Tìm một địa điểm cho dự án của bạn và nhấp vào Tạo.

00:02:13.000 --> 00:02:19.000
Hãy giấu thanh tra và thay đổi kích thước khung vẽ của chúng ta.

00:02:19.000 --> 00:02:24.000
Hãy nhấp vào Tiếp tục để xem ứng dụng của chúng tôi trông như thế nào, sử dụng bản xem trước Xcode.

00:02:24.000 --> 00:02:27.000
Tuyệt vời, ứng dụng SwiftUI của chúng tôi đã sẵn sàng.

00:02:27.000 --> 00:02:31.000
Hãy cung cấp một cách để ai đó bắt đầu tập luyện với StartView.

00:02:31.000 --> 00:02:34.000
Một bài tập có thể được bắt đầu chỉ với một cú chạm.

00:02:34.000 --> 00:02:42.000
Chế độ xem danh sách với bố cục kiểu băng chuyền sẽ cung cấp danh sách các bài tập cuộn theo chiều dọc với hiệu ứng chiều sâu tuyệt vời.

00:02:42.000 --> 00:02:45.000
Danh sách các bài tập của chúng tôi sẽ bao gồm đạp xe, chạy bộ và đi bộ.

00:02:45.000 --> 00:02:48.000
Hãy tạo StartView của chúng ta.

00:02:48.000 --> 00:02:51.000
Hãy đổi tên "ContentView" thành "StartView".

00:02:51.000 --> 00:03:01.000
Nhấp chuột lệnh vào ContentView, nhấp vào Đổi tên, Nhập "StartView" làm tên mới.

00:03:01.000 --> 00:03:08.000
Lưu ý rằng trong MyWorkoutsApp.swift StartView bây giờ là chế độ xem gốc của NavigationView.

00:03:08.000 --> 00:03:12.000
Nhấp vào Đổi tên.

00:03:12.000 --> 00:03:16.000
Hãy xác định một loạt các loại bài tập để hiển thị trong danh sách StartView của chúng tôi.

00:03:16.000 --> 00:03:25.000
Đầu tiên, hãy nhập HealthKit để có quyền truy cập vào HKWorkoutActivityType.

00:03:25.000 --> 00:03:34.000
Tiếp theo, hãy thêm mảng các loại bài tập của chúng ta.

00:03:34.000 --> 00:03:40.000
Danh sách tập luyện của chúng tôi sẽ có HKWorkoutActivityCác loại đạp xe, chạy bộ và đi bộ.

00:03:40.000 --> 00:04:01.000
Hãy làm cho HKWorkoutActivityType có thể truy cập vào danh sách của chúng tôi bằng cách mở rộng danh sách HKWorkoutActivityType để phù hợp với giao thức có thể nhận dạng và thêm biến tên.

00:04:01.000 --> 00:04:09.000
Biến được tính toán ID sẽ trả về giá trị thô của enum.

00:04:09.000 --> 00:04:15.000
Biến tên sẽ chuyển qua các trường hợp để trả về một tên như "Chạy", "Xe đạp" hoặc "Đi bộ".

00:04:15.000 --> 00:04:28.000
Hãy thêm chế độ xem Danh sách vào phần thân StartView của chúng tôi để hiển thị danh sách các bài tập.

00:04:28.000 --> 00:04:35.000
Danh sách sử dụng biến workoutTypes làm mô hình của nó.

00:04:35.000 --> 00:04:38.000
Một NavigationLink được hiển thị cho mỗi loại bài tập.

00:04:38.000 --> 00:04:42.000
NavigationLink xác định đích đến cho giao diện dựa trên điều hướng.

00:04:42.000 --> 00:04:45.000
Hiện tại, điểm đến sẽ là chế độ xem văn bản.

00:04:45.000 --> 00:04:54.000
Chúng tôi sẽ thiết lập các liên kết điều hướng này sau để đảm bảo rằng chúng đang theo dõi bài tập phù hợp.

00:04:54.000 --> 00:05:02.000
Đệm làm cho các liên kết điều hướng cao hơn để cung cấp cho chúng một khu vực chạm lớn hơn để dễ dàng bắt đầu tập luyện.

00:05:02.000 --> 00:05:09.000
Danh sách sử dụng listStyle băng chuyền để cung cấp hiệu ứng chiều sâu khi cuộn.

00:05:09.000 --> 00:05:12.000
Tiêu đề thanh điều hướng sẽ hiển thị "Bài tập".

00:05:12.000 --> 00:05:20.000
Hãy nhấp vào Tiếp tục để xem bản xem trước StartView của chúng tôi.

00:05:20.000 --> 00:05:25.000
Nhấp vào Xem trước Trực tiếp để có thể cuộn.

00:05:25.000 --> 00:05:29.000
Cuộn lên để xem hiệu ứng độ sâu băng chuyền ListStyle.

00:05:29.000 --> 00:05:30.000
Trông thật tuyệt.

00:05:30.000 --> 00:05:34.000
Buổi tập luyện sẽ được trình bày như một trải nghiệm phương thức.

00:05:34.000 --> 00:05:38.000
Trong quá trình tập luyện, mọi người thường chỉ cần chức năng dành riêng cho phiên.

00:05:38.000 --> 00:05:42.000
Họ không cần xem lại danh sách các bài tập hoặc truy cập các phần khác trong ứng dụng của bạn.

00:05:42.000 --> 00:05:50.000
Cung cấp các mục quan trọng nhất trong trải nghiệm phương thức có thể giúp mọi người quản lý phiên của họ trong khi giảm thiểu sự phân tâm.

00:05:50.000 --> 00:05:56.000
Những người sử dụng ứng dụng tập luyện trên Apple Watch mong đợi lượt xem theo thứ tự này.

00:05:56.000 --> 00:06:04.000
Ở bên trái, chế độ xem điều khiển của chúng tôi có các nút điều khiển phiên đang tiến hành như Kết thúc, Tạm dừng và Tiếp tục.

00:06:04.000 --> 00:06:10.000
Ở trung tâm, các số liệu xuất hiện trên một màn hình chuyên dụng mà mọi người có thể đọc trong nháy mắt.

00:06:10.000 --> 00:06:16.000
Ở bên phải, các điều khiển phát lại phương tiện cho phép điều khiển phương tiện trong quá trình tập luyện.

00:06:16.000 --> 00:06:22.000
TabView trên watchOS chuyển đổi giữa nhiều chế độ xem con khi ai đó vuốt sang trái hoặc phải.

00:06:22.000 --> 00:06:26.000
TabView cũng cung cấp một chỉ báo trang ở cuối chế độ xem.

00:06:26.000 --> 00:06:30.000
TabView sẽ hoạt động tốt để hiển thị chế độ xem trong phiên của chúng tôi.

00:06:30.000 --> 00:06:38.000
Hãy tạo một SessionPagingView với TabView cho ba chế độ xem buổi tập luyện của chúng tôi.

00:06:38.000 --> 00:06:43.000
Nhấp vào Tệp &gt; Mới &gt; Tệp...

00:06:43.000 --> 00:06:55.000
SwiftUI View, nhấp vào Next, đặt tên cho cái này là "SessionPagingView" và nhấp vào Create.

00:06:55.000 --> 00:07:03.000
Hãy tạo một tab enum để mô hình hóa từng chế độ xem có thể được chọn trong TabView của chúng tôi.

00:07:03.000 --> 00:07:08.000
Tab enum có ba trường hợp: điều khiển, số liệu và hiện đang phát.

00:07:08.000 --> 00:07:14.000
Chúng tôi cũng đã thêm một biến @State có tên là "lựa chọn" để cung cấp ràng buộc cho lựa chọn của TabView.

00:07:14.000 --> 00:07:20.000
Giá trị mặc định của lựa chọn sẽ là số liệu, để khi bắt đầu tập luyện, chế độ xem số liệu sẽ được hiển thị.

00:07:20.000 --> 00:07:29.000
Hãy thêm TabView.

00:07:29.000 --> 00:07:34.000
Tham số lựa chọn của TabView sử dụng liên kết với biến trạng thái lựa chọn của chúng tôi.

00:07:34.000 --> 00:07:38.000
Chế độ xem văn bản là trình giữ chỗ cho mỗi chế độ xem cho đến khi chúng được tạo.

00:07:38.000 --> 00:07:41.000
Mỗi lượt xem có một thẻ để chúng có thể được chọn.

00:07:41.000 --> 00:07:48.000
Hãy nhấp vào Tiếp tục và xem SessionPagingView của chúng tôi trông như thế nào.

00:07:48.000 --> 00:07:54.000
Nhấp vào Xem trước Trực tiếp để có thể vuốt giữa các chế độ xem.

00:07:54.000 --> 00:08:02.000
Lưu ý chế độ xem văn bản Metrics được hiển thị trước, bởi vì giá trị mặc định của biến lựa chọn của SessionPagingView là số liệu.

00:08:02.000 --> 00:08:07.000
Vuốt sang trái sẽ hiển thị chế độ xem văn bản Điều khiển.

00:08:07.000 --> 00:08:11.000
Vuốt hết bên phải sẽ hiển thị chế độ xem văn bản Đang phát.

00:08:11.000 --> 00:08:13.000
Tuyệt vời!

00:08:13.000 --> 00:08:16.000
Trong khi bài tập đang chạy, các số liệu trực tiếp được hiển thị.

00:08:16.000 --> 00:08:26.000
Khi một phiên yêu cầu chuyển động, như đang chạy, ứng dụng của bạn nên sử dụng kích thước phông chữ lớn và sắp xếp văn bản sao cho thông tin quan trọng nhất dễ đọc.

00:08:26.000 --> 00:08:32.000
MetricsView của chúng tôi sẽ hiển thị thời gian đã trôi qua, năng lượng hoạt động, nhịp tim hiện tại và khoảng cách.

00:08:32.000 --> 00:08:37.000
HealthKit có nhiều HKQuantityTypes khác có sẵn để bạn sử dụng.

00:08:37.000 --> 00:08:40.000
Hãy tạo MetricsView.

00:08:40.000 --> 00:09:00.000
Nhấp vào Tệp &gt; Mới &gt; Tệp SwiftUI Xem, nhấp vào Tiếp theo, đặt tên cho "MetricsView" này và nhấp vào Tạo.

00:09:00.000 --> 00:09:12.000
VStack sẽ chứa bốn chế độ xem Văn bản số liệu của chúng tôi.

00:09:12.000 --> 00:09:22.000
Chế độ xem Văn bản hiện có các giá trị mặc định cho đến khi chúng tôi kết nối các chế độ xem Văn bản này với mô hình của mình.

00:09:22.000 --> 00:09:32.000
Hãy biến thời gian đã trôi qua thành tiêu điểm bằng cách đặt cho nó một Màu nền trước màu vàng và trọng lượng phông chữ bán đậm.

00:09:32.000 --> 00:09:39.000
Chế độ xem văn bản năng lượng hoạt động tạo ra một phép đo bằng cách sử dụng giá trị mặc định trong đơn vị năng lượng kilocalories.

00:09:39.000 --> 00:09:55.000
Phép đo sử dụng một chức năng được định dạng mới viết tắt đơn vị, cách sử dụng là tập luyện để đốt cháy năng lượng tập luyện và numberFormat có chiều dài phân số bằng 0 để cắt các phân số.

00:09:55.000 --> 00:10:00.000
Chế độ xem văn bản nhịp tim sử dụng giá trị mặc định được định dạng bằng fractionLength zero.

00:10:00.000 --> 00:10:08.000
Nó nối thêm "bpm" - cho nhịp mỗi phút - vào chuỗi được định dạng.

00:10:08.000 --> 00:10:13.000
Chế độ xem văn bản khoảng cách sử dụng giá trị mặc định với UnitLength.meters.

00:10:13.000 --> 00:10:16.000
Phép đo được định dạng với các đơn vị viết tắt.

00:10:16.000 --> 00:10:27.000
Cách sử dụng là đường bộ, hiển thị các đơn vị đế quốc hoặc số liệu tiến triển tự nhiên dựa trên địa phương.

00:10:27.000 --> 00:10:36.000
Chúng tôi sẽ sử dụng phông chữ hệ thống của tiêu đề với thiết kế tròn trịa, chữ số đơn cách và chữ thường SmallCaps.

00:10:36.000 --> 00:10:48.000
Chúng tôi muốn các số liệu của mình được căn chỉnh theo cạnh trước, vì vậy chúng tôi đã cung cấp cho VStack một công cụ sửa đổi chế độ xem khung hình với vô cực maxWidth và căn chỉnh hàng đầu.

00:10:48.000 --> 00:10:52.000
Chúng tôi muốn cho phép nội dung của VStack này mở rộng đến cuối màn hình.

00:10:52.000 --> 00:10:58.000
Để cho phép điều này, chúng tôi bỏ qua khu vực an toàn phía dưới.

00:10:58.000 --> 00:11:10.000
Chúng tôi muốn các số liệu của mình được căn chỉnh theo tiêu đề thanh điều hướng, vì vậy chúng tôi đã sử dụng scenePadding() để thực hiện việc này.

00:11:10.000 --> 00:11:17.000
Chúng tôi muốn chế độ xem Văn bản thời gian đã trôi qua của mình định dạng thời gian đã trôi qua đúng cách và ẩn hoặc hiển thị các giây phụ dựa trên trạng thái Luôn Bật.

00:11:17.000 --> 00:11:23.000
Để làm điều này, hãy tạo một ElapsedTimeView và tạo một ElapsedTimeFormatter tùy chỉnh.

00:11:23.000 --> 00:11:49.000
Nhấp vào Tệp &gt; Mới &gt; Tệp, Chế độ xem SwiftUI, nhấp vào Tiếp theo, đặt tên cho nó là "ElapsedTimeView" và nhấp vào Tạo.

00:11:49.000 --> 00:11:54.000
ElapsedTimeView của chúng tôi có elapsedTime, là TimeInterval, mặc định là 0.

00:11:54.000 --> 00:12:00.000
showSubseconds là một đối số Boolean mặc định là true.

00:12:00.000 --> 00:12:09.000
timeFormatter là một biến trạng thái ElapsedTimeFormatter mà chúng tôi xác định bên dưới.

00:12:09.000 --> 00:12:16.000
Nội dung của Chế độ xem chứa chế độ xem Văn bản chuyển Thời gian đã trôi qua sang Số NS để Trình định dạng thời gian có thể sử dụng nó.

00:12:16.000 --> 00:12:19.000
Chế độ xem văn bản có fontWeight bán đậm.

00:12:19.000 --> 00:12:32.000
Khi showSubseconds thay đổi, biến showSubseconds của timeFormatter cũng thay đổi.

00:12:32.000 --> 00:12:37.000
ElapsedTimeFormatter là một trình định dạng tùy chỉnh sử dụng DateComponentsFormatter.

00:12:37.000 --> 00:12:41.000
Chúng tôi muốn thời gian đã trôi qua để hiển thị phút và giây và pad số không.

00:12:41.000 --> 00:12:49.000
Biến showSubseconds ra lệnh nếu giây con được hiển thị.

00:12:49.000 --> 00:12:54.000
Chúng tôi ghi đè chuỗi cho hàm giá trị, trả về một Chuỗi tùy chọn.

00:12:54.000 --> 00:13:00.000
Người bảo vệ đầu tiên đảm bảo giá trị là một TimeInterval.

00:13:00.000 --> 00:13:09.000
Bộ phận bảo vệ thứ hai đảm bảo các thành phần Formatter trả về một chuỗi.

00:13:09.000 --> 00:13:17.000
Nếu showSubseconds là đúng, hãy tính các giây con bằng cách lấy Remainder bị cắt ngắn bằng cách chia cho 1, sau đó nhân với 100.

00:13:17.000 --> 00:13:26.000
Sử dụng decimalSeparator được bản địa hóa, sau đó trả về một formattedString, nối thêm các giây con.

00:13:26.000 --> 00:13:31.000
Nếu showSubseconds là sai, thì chỉ cần trả về formattedString mà không có subseconds.

00:13:31.000 --> 00:13:38.000
Nhấp vào tiếp tục để xem bản xem trước của ElapsedTimeView của chúng tôi.

00:13:38.000 --> 00:13:39.000
Có vẻ ổn.

00:13:39.000 --> 00:13:41.000
Phút có các số không được đệm ở phía bên trái của đại tràng.

00:13:41.000 --> 00:13:44.000
Giây có các số không được đệm ở phía bên phải của đại tràng.

00:13:44.000 --> 00:13:48.000
Giây con được hiển thị sau số thập phân.

00:13:48.000 --> 00:13:50.000
Hãy thêm ElapsedTimeView vào MetricsView.

00:13:50.000 --> 00:13:55.000
Nhấp vào MetricsView.

00:13:55.000 --> 00:14:05.000
Thay thế chế độ xem Văn bản thời gian đã trôi qua bằng Chế độ xem Thời gian trôi qua.

00:14:05.000 --> 00:14:07.000
Hãy xem trước MetricsView của chúng tôi.

00:14:07.000 --> 00:14:10.000
Trông thật tuyệt!

00:14:10.000 --> 00:14:17.000
ControlsView có các nút điều khiển phiên đang tiến hành, chẳng hạn như Kết thúc, Tạm dừng và Tiếp tục.

00:14:17.000 --> 00:14:21.000
Khi nhấn nút Kết thúc, bản tóm tắt bài tập sẽ được hiển thị.

00:14:21.000 --> 00:14:26.000
Khi nút Tạm dừng được nhấn, bài tập sẽ tạm dừng và MetricsView sẽ được hiển thị.

00:14:26.000 --> 00:14:29.000
Hãy tạo ControlsView.

00:14:29.000 --> 00:14:46.000
Nhấp vào Tệp &gt; Mới &gt; Tệp, Chế độ xem SwiftUI, đặt tên cho "ControlsView" này và nhấp vào Tạo.

00:14:46.000 --> 00:14:55.000
Hãy thêm các nút Kết thúc và Tạm dừng.

00:14:55.000 --> 00:15:05.000
Một HStack chứa hai VStacks trong đó mỗi VStack chứa một nút và một chế độ xem văn bản.

00:15:05.000 --> 00:15:09.000
Nhãn của nút Kết thúc là một Hình ảnh với systemName "xmark".

00:15:09.000 --> 00:15:15.000
Nút có tông màu đỏ và sử dụng phông chữ title2 để tăng kích thước của biểu tượng.

00:15:15.000 --> 00:15:22.000
Chế độ xem văn bản bên dưới có chuỗi "Kết thúc".

00:15:22.000 --> 00:15:25.000
Nút tạm dừng sử dụng một hình ảnh với systemName "tạm dừng".

00:15:25.000 --> 00:15:27.000
Nó có tông màu vàng.

00:15:27.000 --> 00:15:29.000
Chế độ xem văn bản bên dưới có chuỗi "Tạm dừng".

00:15:29.000 --> 00:15:39.000
Nhấp vào Tiếp tục để xem trước ControlsView.

00:15:39.000 --> 00:15:43.000
Trông thật tuyệt.

00:15:43.000 --> 00:15:48.000
NowPlayingView cung cấp các điều khiển phát lại phương tiện trong khi tập luyện đang diễn ra.

00:15:48.000 --> 00:15:52.000
Điều này bao gồm các điều khiển cho các ứng dụng của bên thứ ba hiện đang phát phương tiện.

00:15:52.000 --> 00:15:55.000
Hãy thêm NowPlayingView.

00:15:55.000 --> 00:16:01.000
Chọn SessionPagingView.

00:16:01.000 --> 00:16:03.000
NowPlayingView được cung cấp bởi WatchKit.

00:16:03.000 --> 00:16:08.000
Hãy nhập WatchKit.

00:16:08.000 --> 00:16:21.000
Hãy thay thế chế độ xem văn bản của chúng tôi bằng ControlsView, MetricsView và NowPlayingView.

00:16:21.000 --> 00:16:24.000
NowPlayingView là một chế độ xem SwiftUI được cung cấp bởi WatchKit.

00:16:24.000 --> 00:16:26.000
Thật đơn giản.

00:16:26.000 --> 00:16:38.000
Nhấp vào Tiếp tục để xem bản xem trước của SessionPagingView.

00:16:38.000 --> 00:16:42.000
Trong Xem trước, chúng ta có thể thấy MetricsView của mình.

00:16:42.000 --> 00:16:46.000
Vuốt sang trái để xem ControlsView.

00:16:46.000 --> 00:16:50.000
Vuốt hết sang phải...

00:16:50.000 --> 00:16:57.000
...Để xem NowPlayingView.

00:16:57.000 --> 00:17:04.000
Hãy quay lại StartView của chúng tôi và thay đổi đích đến của NavigationLink thành SessionPagingView.

00:17:04.000 --> 00:17:08.000
Chọn StartView.

00:17:08.000 --> 00:17:18.000
Cập nhật điểm đến đến SessionPagingView.

00:17:18.000 --> 00:17:24.000
Màn hình Tóm tắt xác nhận rằng một bài tập đã kết thúc và hiển thị thông tin đã ghi lại.

00:17:24.000 --> 00:17:31.000
Chúng tôi sẽ nâng cao bản tóm tắt bằng cách bao gồm Vòng hoạt động để mọi người có thể dễ dàng kiểm tra tiến trình hiện tại của họ.

00:17:31.000 --> 00:17:35.000
Hãy tạo chế độ xem Tóm tắt.

00:17:35.000 --> 00:17:49.000
Nhấp vào Tệp &gt; Mới &gt; Tệp, Chế độ xem SwiftUI, nhấp vào Tiếp theo, đặt tên cho "Chế độ xem tóm tắt" này và nhấp vào Tạo.

00:17:49.000 --> 00:18:02.000
Hãy tạo một SummaryMetricView tùy chỉnh mô tả số liệu và giá trị của nó.

00:18:02.000 --> 00:18:12.000
Tóm tắtMetricView lấy một tiêu đề mô tả số liệu và một chuỗi giá trị của số liệu.

00:18:12.000 --> 00:18:15.000
Nội dung chứa hai chế độ xem văn bản và một dải phân cách.

00:18:15.000 --> 00:18:21.000
Chế độ xem văn bản hiển thị giá trị số liệu sử dụng phông chữ hệ thống tiêu đề với thiết kế tròn và chữ thường SmallCaps.

00:18:21.000 --> 00:18:26.000
Nó sử dụng accentColor làm màu nền trước của nó.

00:18:26.000 --> 00:18:36.000
Hãy tạo trình định dạng thời lượng tập luyện cho Chế độ xem tóm tắt.

00:18:36.000 --> 00:18:45.000
durationFormatter là một DateComponentsFormatter hiển thị giờ, phút và giây cách nhau bằng dấu hai chấm và số không.

00:18:45.000 --> 00:18:58.000
Hãy thêm SummaryMetricViews và nút Xong vào SummaryView của chúng tôi.

00:18:58.000 --> 00:19:08.000
ScrollView và VStack chứa bốn nút SummaryMetricViews và Done của chúng tôi.

00:19:08.000 --> 00:19:21.000
Chế độ xem văn bản Tổng thời gian sử dụng durationFormatter để hiển thị giờ, phút và giây, cách nhau bằng dấu hai chấm.

00:19:21.000 --> 00:19:29.000
Tổng khoảng cách Tóm tắtMetricView sử dụng Phép đo với giá trị mặc định được định dạng bằng cách sử dụng đơn vị viết tắt.

00:19:29.000 --> 00:19:42.000
Cách sử dụng là đường bộ, hiển thị các đơn vị đế quốc hoặc số liệu tiến triển tự nhiên dựa trên địa phương.

00:19:42.000 --> 00:19:48.000
Tóm tắt tổng năng lượngMetricView sử dụng Phép đo với giá trị mặc định và đơn vị năng lượng là kilocalories.

00:19:48.000 --> 00:19:51.000
Nó được định dạng bằng cách sử dụng một đơn vị viết tắt.

00:19:51.000 --> 00:20:03.000
Sử dụng là tập luyện cho năng lượng tập luyện, và numberFormat có độ chính xác với fractionLength zero.

00:20:03.000 --> 00:20:14.000
Tóm tắt nhịp tim trung bìnhMetricView sử dụng giá trị mặc định được định dạng với độ chính xác của số, độ dài phân số 0 và thêm "bpm" cho nhịp mỗi phút.

00:20:14.000 --> 00:20:21.000
Chúng tôi sẽ cung cấp các giá trị tập luyện thực tế sau cho SummaryMetricViews.

00:20:21.000 --> 00:20:31.000
Chúng tôi muốn các chế độ xem văn bản và dải phân cách căn chỉnh theo tiêu đề thanh điều hướng nên chúng tôi đã sử dụng .scenePadding() trên VStack.

00:20:31.000 --> 00:20:38.000
Tiêu đề điều hướng sẽ là "Tóm tắt" và sẽ hiển thị nội tuyến trong thanh điều hướng.

00:20:38.000 --> 00:20:42.000
Tiếp theo, hãy thêm Vòng hoạt động vào bản tóm tắt tập luyện.

00:20:42.000 --> 00:21:06.000
Nhấp vào Tệp &gt; Mới &gt; Tệp, Tệp Swift, nhấp vào Tiếp theo, đặt tên cho "ActivityRingsView" này và nhấp vào Tạo.

00:21:06.000 --> 00:21:10.000
Nhập HealthKit để có quyền truy cập vào HKHealthStore.

00:21:10.000 --> 00:21:18.000
Nhập SwiftUI để có quyền truy cập vào WKInterfaceObjectRepresentable.

00:21:18.000 --> 00:21:23.000
Cấu trúc ActivityRingsView phù hợp với WKInterfaceObjectRepresentable.

00:21:23.000 --> 00:21:30.000
Hằng số healthStore được chỉ định khi khởi tạo.

00:21:30.000 --> 00:21:42.000
Hai chức năng được yêu cầu để phù hợp với giao thức: makeWKInterfaceObject và updateWKInterfaceObject.

00:21:42.000 --> 00:21:53.000
Bên trong makeWKInterfaceObject, chúng tôi khai báo activityRingsObject là WKInterfaceActivityRing.

00:21:53.000 --> 00:22:02.000
Tiếp theo, chúng tôi tạo vị ngữ cho HKActivitySummaryQuery và sử dụng các thành phần ngày cho ngày hôm nay.

00:22:02.000 --> 00:22:13.000
Sau đó, chúng tôi tạo truy vấn và xử lý kết quả, đặt tóm tắt hoạt động trên activityRingsObject trên hàng đợi chính.

00:22:13.000 --> 00:22:16.000
Sau đó thực hiện truy vấn trên HKHealthStore.

00:22:16.000 --> 00:22:19.000
Cuối cùng, trả về activityRingsObject.

00:22:19.000 --> 00:22:22.000
Hãy thêm ActivityRingsView vào SummaryView.

00:22:22.000 --> 00:22:28.000
Nhấp vào Xem Tóm tắt.

00:22:28.000 --> 00:22:35.000
Hãy nhập HealthKit để có quyền truy cập vào HKHealthStore.

00:22:35.000 --> 00:22:48.000
Tiếp theo, hãy thêm chế độ xem Văn bản và Chế độ xem Vòng hoạt động phía trên nút Xong.

00:22:48.000 --> 00:22:53.000
Chúng tôi đã thêm chế độ xem Văn bản và Chế độ xem ActivityRings với chiều rộng và chiều cao khung là 50.

00:22:53.000 --> 00:22:55.000
Chúng tôi sẽ tạo một HKHealthStore ngay bây giờ.

00:22:55.000 --> 00:22:58.000
Sau đó, chúng tôi sẽ sử dụng lại một cái.

00:22:58.000 --> 00:23:06.000
Hãy xem trước Chế độ xem Tóm tắt của chúng tôi. Nhấp vào Tiếp tục.

00:23:06.000 --> 00:23:12.000
Nhấp vào Xem trước Trực tiếp để có thể cuộn.

00:23:12.000 --> 00:23:22.000
Xem từng nút SummaryMetricViews, Activity Rings và Done của chúng tôi.

00:23:22.000 --> 00:23:25.000
Hãy nói về việc tích hợp HealthKit.

00:23:25.000 --> 00:23:33.000
HealthKit cung cấp chức năng tích hợp để theo dõi hoạt động thể dục trong quá trình tập luyện và lưu bài tập đó vào HealthKit.

00:23:33.000 --> 00:23:40.000
Điều này giúp bạn tiết kiệm thời gian với tư cách là nhà phát triển và khách hàng của bạn sẽ lưu tất cả các bài tập của họ đến một địa điểm.

00:23:40.000 --> 00:23:50.000
Buổi tập luyện HK chuẩn bị các cảm biến của thiết bị để thu thập dữ liệu để bạn có thể thu thập chính xác dữ liệu liên quan đến việc tập luyện, như lượng calo và nhịp tim.

00:23:50.000 --> 00:23:56.000
Nó cũng cho phép ứng dụng của bạn chạy trong nền khi bài tập đang hoạt động.

00:23:56.000 --> 00:24:00.000
HKLiveWorkoutBuilder sẽ tạo và lưu một đối tượng HKWorkout.

00:24:00.000 --> 00:24:05.000
Nó tự động thu thập các mẫu và sự kiện cho bạn.

00:24:05.000 --> 00:24:10.000
Để tìm hiểu thêm, hãy xem phiên "Những cách mới để làm việc với các bài tập".

00:24:10.000 --> 00:24:14.000
Hãy xem luồng dữ liệu sẽ như thế nào cho ứng dụng của chúng tôi.

00:24:14.000 --> 00:24:18.000
WorkoutManager sẽ chịu trách nhiệm giao tiếp với HealthKit.

00:24:18.000 --> 00:24:24.000
Nó giao tiếp với một HKWorkoutSession để bắt đầu, tạm dừng và kết thúc bài tập.

00:24:24.000 --> 00:24:32.000
Nó giao tiếp với HKLiveWorkoutBuilder để lắng nghe các mẫu tập luyện và cung cấp dữ liệu đó cho quan điểm của chúng tôi.

00:24:32.000 --> 00:24:35.000
WorkoutManager sẽ là một đối tượng môi trường.

00:24:35.000 --> 00:24:42.000
Một đối tượng môi trường làm mất hiệu lực chế độ xem hiện tại bất cứ khi nào đối tượng có thể quan sát được thay đổi.

00:24:42.000 --> 00:24:54.000
Chúng tôi sẽ chỉ định Điều hướng của Ứng dụng MyWorkouts Xem đối tượng môi trường WorkoutManager, điều này sẽ truyền WorkoutManager đến các chế độ xem trong hệ thống phân cấp chế độ xem của NavigationView.

00:24:54.000 --> 00:25:01.000
Lượt xem sau đó sẽ khai báo @EnvironmentObject để có quyền truy cập vào WorkoutManager trong môi trường.

00:25:01.000 --> 00:25:03.000
Hãy tạo ra WorkoutManager.

00:25:03.000 --> 00:25:22.000
Nhấp vào Tệp &gt; Mới &gt; Tệp, Tệp Swift, nhấp vào Tiếp theo, đặt tên cho "Trợ quản lý tập luyện" này và nhấp vào Tạo.

00:25:22.000 --> 00:25:32.000
Nhập HealthKit để WorkoutManager có quyền truy cập vào API của HealthKit.

00:25:32.000 --> 00:25:39.000
Sau đó xác định lớp WorkoutManager là một NSObject phù hợp với giao thức ObservableObject.

00:25:39.000 --> 00:25:42.000
Chúng tôi muốn cung cấp cho tất cả các quan điểm của chúng tôi quyền truy cập vào WorkoutManager.

00:25:42.000 --> 00:25:49.000
Chúng tôi làm điều này bằng cách chỉ định WorkoutManager làm đối tượng môi trường trên NavigationView của MyWorkoutsApp.

00:25:49.000 --> 00:25:53.000
Chọn MyWorkoutsApp.

00:25:53.000 --> 00:26:00.000
Thêm workoutManager làm StateObject.

00:26:00.000 --> 00:26:07.000
Thêm công cụ sửa đổi chế độ xem environmentObject vào NavigationView.

00:26:07.000 --> 00:26:15.000
Khi một NavigationView được gán một environmentObject, nó sẽ tự động chuyển environmentObject đến các chế độ xem trong hệ thống phân cấp chế độ xem của nó.

00:26:15.000 --> 00:26:17.000
Hãy thiết lập mô hình điều hướng của chúng ta.

00:26:17.000 --> 00:26:23.000
Chọn WorkoutManager.

00:26:23.000 --> 00:26:32.000
WorkoutManager sẽ quản lý bài tập đã chọn, đây là một HKWorkoutActivityType tùy chọn.

00:26:32.000 --> 00:26:37.000
Chúng tôi đã thêm biến Bài tập đã chọn để theo dõi bài tập đã chọn.

00:26:37.000 --> 00:26:43.000
Bây giờ NavigationLink của StartView của chúng tôi cần liên kết lựa chọn của nó với WorkoutManager's selectedWorkout.

00:26:43.000 --> 00:26:48.000
Chọn StartView.

00:26:48.000 --> 00:26:55.000
Thêm workoutManager EnvironmentObject vào StartView.

00:26:55.000 --> 00:27:05.000
Hãy cập nhật NavigationLink với thẻ và lựa chọn.

00:27:05.000 --> 00:27:07.000
Thẻ là loại bài tập.

00:27:07.000 --> 00:27:12.000
Lựa chọn là một ràng buộc đối với selectedWorkout trên workoutManager.

00:27:12.000 --> 00:27:18.000
Bây giờ, bất cứ khi nào một bài tập được nhấn, selectedWorkout on workoutManager sẽ cập nhật.

00:27:18.000 --> 00:27:24.000
Bây giờ hãy bắt đầu một HKWorkoutSession và HKLiveWorkoutBuilder khi một bài tập được chọn.

00:27:24.000 --> 00:27:36.000
Chọn WorkoutManager.

00:27:36.000 --> 00:27:42.000
Thêm HKHealthStore, HKWorkoutSession, và HKLiveWorkoutBuilder.

00:27:42.000 --> 00:27:54.000
Bây giờ, hãy tạo một chức năng startWorkout để bắt đầu tập luyện.

00:27:54.000 --> 00:27:57.000
Chức năng startWorkout nhận một tham số workoutType.

00:27:57.000 --> 00:28:02.000
Cấu hình HKWorkout được tạo bằng cách sử dụng workoutType.

00:28:02.000 --> 00:28:05.000
Đối với ứng dụng của chúng tôi, tất cả các bài tập của chúng tôi sẽ ở ngoài trời.

00:28:05.000 --> 00:28:11.000
Lưu ý rằng loại vị trí xác định cách thức hoạt động của HKWorkoutSession và HKLiveWorkoutBuilder.

00:28:11.000 --> 00:28:19.000
Ví dụ, một hoạt động đạp xe ngoài trời tạo ra dữ liệu vị trí chính xác, trong khi một hoạt động đạp xe trong nhà thì không.

00:28:19.000 --> 00:28:27.000
Tạo HKWorkoutSession bằng cách sử dụng healthStore và cấu hình.

00:28:27.000 --> 00:28:31.000
Chỉ định trình tạo cho Trình tạo bài tập được liên kết của phiên.

00:28:31.000 --> 00:28:38.000
Điều này được thực hiện trong một khối do-catch để xử lý bất kỳ lỗi nào được ném.

00:28:38.000 --> 00:28:45.000
Chỉ định nguồn dữ liệu của người xây dựng cho HKLiveWorkoutDataSource bằng cách sử dụng healthStore và workoutConfiguration.

00:28:45.000 --> 00:28:55.000
HKLiveWorkoutDataSource tự động cung cấp dữ liệu trực tiếp từ một buổi tập luyện tích cực.

00:28:55.000 --> 00:29:02.000
Tạo startDate, gọi startActivity trên phiên và beginCollection trên trình tạo.

00:29:02.000 --> 00:29:12.000
Bất cứ khi nào selectedWorkout thay đổi, hãy gọi startWorkout.

00:29:12.000 --> 00:29:15.000
selectedWorkout có thể là nil.

00:29:15.000 --> 00:29:21.000
Sử dụng câu lệnh bảo vệ để chỉ gọi startWorkout khi selectedWorkout không phải là số không.

00:29:21.000 --> 00:29:30.000
Trước khi ứng dụng của chúng tôi có thể tạo một buổi tập luyện, chúng tôi cần thiết lập HealthKit và yêu cầu ủy quyền để đọc và chia sẻ bất kỳ dữ liệu sức khỏe nào mà ứng dụng của chúng tôi dự định sử dụng.

00:29:30.000 --> 00:29:42.000
Hãy thêm một chức năng để yêu cầu ủy quyền.

00:29:42.000 --> 00:29:50.000
Đối với các buổi tập luyện, chúng tôi phải yêu cầu quyền chia sẻ các loại bài tập.

00:29:50.000 --> 00:29:56.000
Chúng tôi cũng muốn đọc bất kỳ loại dữ liệu nào được Apple Watch tự động ghi lại như một phần của phiên.

00:29:56.000 --> 00:30:05.000
Chúng tôi cũng muốn được phép đọc bản tóm tắt Activity Rings.

00:30:05.000 --> 00:30:08.000
Sau đó gọi yêu cầu Ủy quyền trên healthStore.

00:30:08.000 --> 00:30:12.000
Hãy ủy quyền yêu cầu StartView từ HealthKit khi chế độ xem xuất hiện.

00:30:12.000 --> 00:30:23.000
Nhấp vào StartView.

00:30:23.000 --> 00:30:28.000
Khi xuất hiện, chức năng ủy quyền yêu cầu của workoutManager sẽ được gọi.

00:30:28.000 --> 00:30:31.000
Hãy kích hoạt HealthKit cho tiện ích mở rộng của chúng tôi.

00:30:31.000 --> 00:30:39.000
Chọn tệp dự án của MyWorkouts...

00:30:39.000 --> 00:30:45.000
... Tiện ích mở rộng, ký và khả năng của MyWorkouts WatchKit.

00:30:45.000 --> 00:30:53.000
Chọn Thêm Khả năng, cuộn xuống, chọn HealthKit.

00:30:53.000 --> 00:31:01.000
Các ứng dụng có phiên tập luyện tích cực có thể chạy ở chế độ nền, vì vậy bạn cần thêm khả năng chế độ nền vào Tiện ích mở rộng WatchKit của mình.

00:31:01.000 --> 00:31:05.000
Các buổi tập luyện yêu cầu chế độ nền xử lý bài tập.

00:31:05.000 --> 00:31:12.000
Chọn Thêm Khả Năng, Chế Độ Nền.

00:31:12.000 --> 00:31:16.000
Chọn xử lý bài tập.

00:31:16.000 --> 00:31:21.000
Chúng tôi cần thêm mô tả sử dụng vào tệp Info.plist của WatchKit Extension.

00:31:21.000 --> 00:31:26.000
Chọn Info.plist.

00:31:26.000 --> 00:31:33.000
Chọn hàng cuối cùng, sau đó nhấn Return.

00:31:33.000 --> 00:31:40.000
Sử dụng khóa NSHealth ShareUsageDescription.

00:31:40.000 --> 00:31:45.000
Mô tả lý do tại sao ứng dụng của bạn cần đọc dữ liệu được yêu cầu.

00:31:45.000 --> 00:31:48.000
Nhấn Return.

00:31:48.000 --> 00:31:55.000
Sử dụng khóa NSHealth UpdateUsageDescription.

00:31:55.000 --> 00:32:02.000
Mô tả dữ liệu mà ứng dụng của bạn dự định viết.

00:32:02.000 --> 00:32:06.000
Hãy xây dựng và chạy ứng dụng của chúng tôi để xem ứng dụng của chúng tôi yêu cầu sự cho phép từ HealthKit.

00:32:06.000 --> 00:32:25.000
Nhấp vào Chạy.

00:32:25.000 --> 00:32:28.000
Ứng dụng của chúng tôi đã yêu cầu ủy quyền HealthKit.

00:32:28.000 --> 00:32:33.000
Cuộn xuống và nhấp vào Đánh giá.

00:32:33.000 --> 00:32:39.000
Chọn Tất Cả Dữ Liệu Được Yêu Cầu Bên Dưới.

00:32:39.000 --> 00:32:44.000
Thấy rằng ứng dụng của chúng tôi đã yêu cầu chia sẻ Bài tập.

00:32:44.000 --> 00:32:47.000
Xem lời giải thích được cung cấp của chúng tôi.

00:32:47.000 --> 00:32:50.000
Nhấn Tiếp Theo.

00:32:50.000 --> 00:32:52.000
Ứng dụng của chúng tôi đã yêu cầu quyền truy cập đọc.

00:32:52.000 --> 00:32:56.000
Chọn Tất Cả Dữ Liệu Được Yêu Cầu Bên Dưới.

00:32:56.000 --> 00:33:07.000
Xem các loại dữ liệu mà ứng dụng của chúng tôi đã yêu cầu quyền truy cập đọc.

00:33:07.000 --> 00:33:10.000
Xem lời giải thích được cung cấp của chúng tôi.

00:33:10.000 --> 00:33:14.000
Nhấn Xong.

00:33:14.000 --> 00:33:19.000
Bây giờ buổi tập có thể bắt đầu, chúng ta cần kiểm soát HKWorkoutSession.

00:33:19.000 --> 00:33:27.000
Chọn WorkoutManager.

00:33:27.000 --> 00:33:39.000
Hãy thêm logic kiểm soát trạng thái phiên của chúng ta.

00:33:39.000 --> 00:33:46.000
Một biến @Published có tên "đang chạy" theo dõi nếu phiên đang chạy.

00:33:46.000 --> 00:33:50.000
Chức năng tạm dừng và tiếp tục tạm dừng và tiếp tục phiên.

00:33:50.000 --> 00:34:00.000
Chức năng togglePause sẽ tạm dừng hoặc tiếp tục phiên dựa trên việc phiên có đang chạy hay không.

00:34:00.000 --> 00:34:03.000
Chức năng endWorkout sẽ kết thúc phiên.

00:34:03.000 --> 00:34:19.000
Hãy mở rộng WorkoutManager để trở thành một HKWorkoutSessionDelegate để lắng nghe những thay đổi đối với trạng thái phiên.

00:34:19.000 --> 00:34:31.000
Chức năng workoutSession didChangeTo toState fromState with Date được gọi bất cứ khi nào trạng thái phiên thay đổi.

00:34:31.000 --> 00:34:41.000
Biến đang chạy của chúng tôi sẽ cập nhật dựa trên việc toState có đang chạy hay không và được gửi đến hàng đợi chính để cập nhật giao diện người dùng.

00:34:41.000 --> 00:34:50.000
Khi phiên chuyển sang kết thúc, hãy gọi endCollection trên trình tạo với ngày kết thúc được cung cấp để ngừng thu thập các mẫu tập luyện.

00:34:50.000 --> 00:34:56.000
Sau khi endCollection kết thúc, hãy gọi finishWorkout để lưu HKWorkout vào cơ sở dữ liệu Sức khỏe.

00:34:56.000 --> 00:35:08.000
Đảm bảo chỉ định WorkoutManager làm đại biểu HKWorkoutSession.

00:35:08.000 --> 00:35:14.000
Bây giờ hãy để ControlsView tạm dừng, tiếp tục và kết thúc phiên.

00:35:14.000 --> 00:35:19.000
Chọn ControlsView.

00:35:19.000 --> 00:35:31.000
Thêm workoutManager làm Đối tượng Môi trường để chế độ xem của chúng tôi có thể kiểm soát phiên.

00:35:31.000 --> 00:35:40.000
Có lệnh gọi hành động của nút Kết thúc endWorkout trên workoutManager.

00:35:40.000 --> 00:35:56.000
Nút Tạm dừng/Tiếp tục cần tạm dừng hoặc tiếp tục phiên và cập nhật hình ảnh và văn bản của nó dựa trên trạng thái phiên.

00:35:56.000 --> 00:36:05.000
Hành động của nút gọi chức năng togglePause của workoutManager để tạm dừng hoặc tiếp tục phiên.

00:36:05.000 --> 00:36:13.000
Tên hệ thống của Hình ảnh của nút là "tạm dừng" hoặc "chơi", dựa trên biến chạy của workoutManager.

00:36:13.000 --> 00:36:19.000
Văn bản bên dưới nút hiển thị "Tạm dừng" hoặc "Tiếp tục", cũng dựa trên biến chạy của workoutManager.

00:36:19.000 --> 00:36:24.000
Hãy cập nhật SessionPagingView của chúng tôi để hiển thị tên bài tập trong thanh điều hướng.

00:36:24.000 --> 00:36:29.000
Chọn SessionPagingView.

00:36:29.000 --> 00:36:35.000
SessionPagingView cần quyền truy cập vào biến môi trường WorkoutManager, vì vậy hãy thêm điều đó.

00:36:35.000 --> 00:36:42.000
Bây giờ hãy cấu hình thanh điều hướng của chúng tôi.

00:36:42.000 --> 00:36:48.000
Tiêu đề điều hướng là tên của WorkoutManager's selectedWorkout.

00:36:48.000 --> 00:36:56.000
Nút quay lại của thanh điều hướng bị ẩn, vì chúng tôi không muốn ai đó quay lại StartView khi họ đang tập luyện.

00:36:56.000 --> 00:37:01.000
Khi NowPlayingView được hiển thị, chúng tôi muốn ẩn thanh điều hướng.

00:37:01.000 --> 00:37:06.000
Khi ai đó tạm dừng hoặc tiếp tục tập luyện, họ không cần phải vuốt đến MetricsView.

00:37:06.000 --> 00:37:18.000
Chúng ta có thể làm điều này cho họ bằng cách thêm công cụ sửa đổi chế độ xem onChange.

00:37:18.000 --> 00:37:23.000
Khi biến được xuất bản đang chạy của WorkoutManager thay đổi, hàm displayMetricsView được gọi.

00:37:23.000 --> 00:37:29.000
displayMetricsView đặt biến trạng thái lựa chọn thành số liệu với Hoạt hình.

00:37:29.000 --> 00:37:34.000
Bây giờ bài tập có thể kết thúc, hãy thêm khả năng hiển thị và loại bỏ Chế độ xem tóm tắt.

00:37:34.000 --> 00:37:39.000
Nhấp vào WorkoutManager.

00:37:39.000 --> 00:37:53.000
Thêm một biến đã xuất bản có tên "showingSummaryView" là một Boolean mặc định là false.

00:37:53.000 --> 00:37:58.000
Biến này sẽ cung cấp một ràng buộc cho lựa chọn của trang tính trên chế độ xem điều hướng của ứng dụng của chúng tôi.

00:37:58.000 --> 00:38:11.000
Trong endWorkout, đặt showingSummaryView thành true.

00:38:11.000 --> 00:38:16.000
Hãy thêm Chế độ xem Tóm tắt dưới dạng Trang tính vào Chế độ xem Điều hướng của Ứng dụng MyWorkouts.

00:38:16.000 --> 00:38:21.000
Nhấp vào MyWorkoutsApp.

00:38:21.000 --> 00:38:29.000
Thêm công cụ sửa đổi chế độ xem trang tính vào NavigationView.

00:38:29.000 --> 00:38:35.000
Tham số isPresented là một ràng buộc với workoutManager's showingSummaryView.

00:38:35.000 --> 00:38:38.000
Nội dung của trang tính là một Chế độ xem Tóm tắt.

00:38:38.000 --> 00:38:42.000
Trong SummaryView, hãy thêm khả năng loại bỏ trang tính.

00:38:42.000 --> 00:38:48.000
Nhấp vào Xem Tóm tắt.

00:38:48.000 --> 00:38:56.000
Thêm biến Dnvironment loại bỏ.

00:38:56.000 --> 00:39:06.000
Trong hành động của nút Xong, hãy gọi dismiss().

00:39:06.000 --> 00:39:12.000
Hãy chạy ứng dụng của chúng tôi để bắt đầu và kết thúc phiên và xem Chế độ xem Tóm tắt được hiển thị.

00:39:12.000 --> 00:39:17.000
Nhấp vào Dừng lại để dừng lần chạy trước đó.

00:39:17.000 --> 00:39:24.000
Nhấp vào Chạy.

00:39:24.000 --> 00:39:27.000
Nhấn vào bài tập Run.

00:39:27.000 --> 00:39:31.000
Các giá trị số liệu mặc định sẽ vẫn được hiển thị trong phiên và trong bản tóm tắt.

00:39:31.000 --> 00:39:33.000
Chúng tôi sẽ thiết lập nó sau.

00:39:33.000 --> 00:39:35.000
Vuốt sang trái.

00:39:35.000 --> 00:39:38.000
Nhấn Tạm Dừng.

00:39:38.000 --> 00:39:40.000
Lưu ý rằng MetricsView được hiển thị.

00:39:40.000 --> 00:39:45.000
Vuốt sang trái.

00:39:45.000 --> 00:39:47.000
Lưu ý rằng nút bây giờ hiển thị "Tiếp tục".

00:39:47.000 --> 00:39:51.000
Nhấn vào Kết thúc.

00:39:51.000 --> 00:39:54.000
Bản tóm tắt tập luyện của chúng tôi hiển thị dưới dạng một tờ.

00:39:54.000 --> 00:39:57.000
Cuộn xuống.

00:39:57.000 --> 00:39:59.000
Nhấn Xong.

00:39:59.000 --> 00:40:03.000
Trang tính bị loại bỏ và StartView được hiển thị.

00:40:03.000 --> 00:40:07.000
Hãy lấy MetricsView và SummaryView của chúng tôi để hiển thị các chỉ số tập luyện thực tế.

00:40:07.000 --> 00:40:14.000
WorkoutManager sẽ hiển thị các chỉ số tập luyện đã công bố mà MetricsView và SummaryView có thể quan sát được.

00:40:14.000 --> 00:40:20.000
Chọn WorkoutManager.

00:40:20.000 --> 00:40:32.000
Hãy thêm các biến số liệu đã xuất bản vào WorkoutManager.

00:40:32.000 --> 00:40:35.000
averageHeartRate sẽ được sử dụng bởi SummaryView.

00:40:35.000 --> 00:40:41.000
heartRate, activeEnergy và khoảng cách sẽ được MetricsView quan sát.

00:40:41.000 --> 00:40:48.000
WorkoutManager cần quan sát các mẫu tập luyện được thêm vào trình tạo bằng cách trở thành một HKLiveWorkoutBuilderDelegate.

00:40:48.000 --> 00:40:50.000
Hãy làm điều này ngay bây giờ.

00:40:50.000 --> 00:40:59.000
Đầu tiên, hãy chỉ định đại diện của người xây dựng làm WorkoutManager.

00:40:59.000 --> 00:41:14.000
Bây giờ hãy làm cho WorkoutManager tuân thủ giao thức HKLiveWorkout BuilderDelegate.

00:41:14.000 --> 00:41:21.000
Chúng tôi đã mở rộng WorkoutManager để phù hợp với giao thức HKLiveWorkout BuilderDelegate.

00:41:21.000 --> 00:41:26.000
workoutBuilderDidCollectEvent được gọi bất cứ khi nào người xây dựng thu thập một sự kiện.

00:41:26.000 --> 00:41:32.000
Chúng tôi sẽ để trống chức năng này cho ứng dụng của chúng tôi.

00:41:32.000 --> 00:41:42.000
workoutBuilder didCollectDataOf collectedTypes được gọi bất cứ khi nào người xây dựng thu thập các mẫu mới.

00:41:42.000 --> 00:41:45.000
Chúng tôi sẽ lặp lại từng loại trong các loại được thu thập.

00:41:45.000 --> 00:41:49.000
Người bảo vệ đảm bảo loại được thu thập là HKQuantityType.

00:41:49.000 --> 00:41:52.000
Thống kê được đọc từ người xây dựng cho loại số lượng đó.

00:41:52.000 --> 00:42:00.000
updateForStatistics - một hàm mà chúng tôi sẽ tạo trong thời gian ngắn - sẽ được gọi, cập nhật các giá trị số liệu đã xuất bản.

00:42:00.000 --> 00:42:13.000
Hãy tạo chức năng updateForStatistics.

00:42:13.000 --> 00:42:18.000
updateForStatistics lấy một đối tượng HKStatistics tùy chọn.

00:42:18.000 --> 00:42:25.000
Một người bảo vệ trả lại sớm nếu số liệu thống kê là không.

00:42:25.000 --> 00:42:29.000
Gửi các bản cập nhật số liệu không đồng bộ đến hàng đợi chính.

00:42:29.000 --> 00:42:31.000
Chuyển qua từng loại số lượng.

00:42:31.000 --> 00:42:38.000
Đối với heartRate, chúng tôi muốn nhịp mỗi phút, vì vậy chúng tôi sử dụng số HKUnit chia cho một phút HKUnit.

00:42:38.000 --> 00:42:44.000
Gán heartRate là giá trị kép của nhiều nhất của số lượng gần đây nhất cho nhịp đập mỗi phút.

00:42:44.000 --> 00:42:53.000
Chỉ định averageHeartRate làm thống kê.averageQuantity's doubleValue cho beats mỗi phút.

00:42:53.000 --> 00:42:59.000
Đối với loại số lượng năng lượng ActiveEnergyBurned, hãy sử dụng kilocalorie energyUnit.

00:42:59.000 --> 00:43:08.000
Gán activeEnergy làm giá trị kép của sumQuantity cho energyUnit.

00:43:08.000 --> 00:43:14.000
Đối với khoảng cách đi bộ, chạy và đạp xe, hãy lấy giá trị kép của sumQuantity cho meterUnit.

00:43:14.000 --> 00:43:19.000
Bây giờ hãy để MetricsView sử dụng các giá trị số liệu từ WorkoutManager.

00:43:19.000 --> 00:43:25.000
Chọn MetricsView.

00:43:25.000 --> 00:43:32.000
Thêm workoutManager làm biến Môi trường.

00:43:32.000 --> 00:43:56.000
Hãy cập nhật quan điểm của chúng tôi để sử dụng các giá trị số liệu từ WorkoutManager.

00:43:56.000 --> 00:44:04.000
ElapsedTimeView sử dụng workoutManager's builder's elapsedTime.

00:44:04.000 --> 00:44:14.000
Phép đo của chế độ xem văn bản activeEnergy sử dụng activeEnergy của workoutManager.

00:44:14.000 --> 00:44:22.000
Chế độ xem văn bản heartRate sử dụng heartRate của workoutManager.

00:44:22.000 --> 00:44:31.000
Phép đo của chế độ xem văn bản khoảng cách sử dụng khoảng cách của người quản lý tập luyện.

00:44:31.000 --> 00:44:38.000
Biến thời gian trôi qua của trình tạo không được công bố, vì vậy chế độ xem của chúng tôi hiện tại sẽ không cập nhật khi thời gian trôi qua của trình tạo cập nhật.

00:44:38.000 --> 00:44:46.000
Những gì chúng ta có thể làm là bọc VStack trong TimelineView.

00:44:46.000 --> 00:44:48.000
TimelineView là mới trong năm nay.

00:44:48.000 --> 00:44:52.000
Chế độ xem dòng thời gian cập nhật theo thời gian phù hợp với lịch trình của nó.

00:44:52.000 --> 00:44:56.000
Các ứng dụng watchOS hiện hỗ trợ trạng thái Luôn Bật.

00:44:56.000 --> 00:45:00.000
TimelineViews làm cho quan điểm của chúng ta nhận thức được những thay đổi đối với ngữ cảnh Luôn Bật.

00:45:00.000 --> 00:45:08.000
Để tìm hiểu thêm, hãy xem các phiên "Có gì mới trong watchOS 8" và "Có gì mới trong SwiftUI".

00:45:08.000 --> 00:45:13.000
Các ứng dụng có thể ở trạng thái hoạt động hoặc trạng thái Luôn bật.

00:45:13.000 --> 00:45:19.000
Các ứng dụng có các buổi tập luyện tích cực có thể cập nhật, nhiều nhất, mỗi giây một lần ở trạng thái Luôn Bật.

00:45:19.000 --> 00:45:25.000
Điều này có nghĩa là MetricsView cần ẩn các giây phụ ở trạng thái Luôn Bật.

00:45:25.000 --> 00:45:33.000
Các cân nhắc thiết kế khác nên được thực hiện cho trạng thái Luôn Bật, chẳng hạn như ẩn các điều khiển chỉ báo trang để đơn giản hóa chế độ xem.

00:45:33.000 --> 00:45:43.000
Chế độ xem dòng thời gian của chúng tôi cần một Lịch trình dòng thời gian tùy chỉnh thay đổi khoảng thời gian của nó dựa trên Chế độ TimelineSchedule được quyết định bởi ngữ cảnh Luôn Bật.

00:45:43.000 --> 00:45:58.000
Hãy tạo Lịch trình Dòng thời gian tùy chỉnh của chúng tôi.

00:45:58.000 --> 00:46:02.000
MetricsTimelineSchedule có Ngày bắt đầu khi nào lịch trình nên bắt đầu.

00:46:02.000 --> 00:46:09.000
Trình khởi tạo của nó có một startDate.

00:46:09.000 --> 00:46:14.000
MetricsTimelineSchedule triển khai chức năng các mục nhập để tạo ra các mục nhập PeriodicTimelineSchedule.

00:46:14.000 --> 00:46:19.000
Hàm tạo ra một PeriodicTimelineSchedule bằng cách sử dụng startDate.

00:46:19.000 --> 00:46:22.000
Khoảng thời gian được xác định bởi TimelineScheduleMode.

00:46:22.000 --> 00:46:28.000
Khi TimelineScheduleMode có tần số thấp, khoảng thời gian TimelineSchedule là một giây.

00:46:28.000 --> 00:46:33.000
Khi TimelineScheduleMode bình thường, khoảng thời gian là 30 lần mỗi giây.

00:46:33.000 --> 00:46:47.000
Hãy gói VStack của chúng ta trong TimelineView.

00:46:47.000 --> 00:46:55.000
TimelineView sử dụng MetricsTimelineSchedule của chúng tôi, sử dụng startDate của trình tạo.

00:46:55.000 --> 00:47:01.000
ShowSubseconds của ElapsedTimeView được xác định bởi context.cadence của TimelineView.

00:47:01.000 --> 00:47:04.000
Khi nhịp hoạt động, các giây con được hiển thị.

00:47:04.000 --> 00:47:08.000
Nếu không thì giây con sẽ bị ẩn trong trạng thái Luôn Bật.

00:47:08.000 --> 00:47:12.000
Hãy chạy ứng dụng của chúng tôi để xem các số liệu được cập nhật trong quá trình tập luyện.

00:47:12.000 --> 00:47:16.000
Nhấp vào Dừng lại để dừng quá trình chạy hiện tại.

00:47:16.000 --> 00:47:22.000
Nhấp vào Chạy.

00:47:22.000 --> 00:47:26.000
Nhấn vào bài tập Run.

00:47:26.000 --> 00:47:29.000
Lưu ý rằng thời gian đã trôi qua đang tăng dần.

00:47:29.000 --> 00:47:34.000
Trình mô phỏng watchOS tự động mô phỏng việc thu thập các mẫu tập luyện trực tiếp cho bạn.

00:47:34.000 --> 00:47:36.000
Calo đang tích lũy.

00:47:36.000 --> 00:47:37.000
Nhịp tim đang cập nhật.

00:47:37.000 --> 00:47:40.000
Khoảng cách đang tích lũy.

00:47:40.000 --> 00:47:46.000
Hãy thử trạng thái Luôn Bật bằng cách nhấp vào nút Khóa trên trình giả lập.

00:47:46.000 --> 00:47:52.000
Lưu ý giây phụ bị ẩn và số liệu chỉ cập nhật một lần mỗi giây.

00:47:52.000 --> 00:47:55.000
Nhấp vào nút Mở khóa để trở về trạng thái hoạt động.

00:47:55.000 --> 00:48:00.000
Vuốt sang trái và kết thúc bài tập.

00:48:00.000 --> 00:48:08.000
Chế độ xem tóm tắt vẫn cần các giá trị HKWorkout thực tế.

00:48:08.000 --> 00:48:10.000
Hãy làm điều này ngay bây giờ.

00:48:10.000 --> 00:48:15.000
Đầu tiên, hãy thêm HKWorkout vào WorkoutManager để được sử dụng trong Chế độ xem tóm tắt.

00:48:15.000 --> 00:48:17.000
Chọn WorkoutManager.

00:48:17.000 --> 00:48:30.000
Thêm một biến HKWorkout Published.

00:48:30.000 --> 00:48:48.000
Khi người xây dựng đã lưu xong bài tập, hãy chỉ định bài tập cho WorkoutManager khi chức năng finishWorkout của người xây dựng hoàn thành.

00:48:48.000 --> 00:48:52.000
Chúng tôi thực hiện bài tập này trên hàng đợi chính để cập nhật giao diện người dùng.

00:48:52.000 --> 00:48:56.000
Khi Chế độ xem Tóm tắt bị loại bỏ, chúng ta cần đặt lại mô hình của mình.

00:48:56.000 --> 00:49:09.000
Hãy tạo một chức năng resetWorkout thực hiện việc này.

00:49:09.000 --> 00:49:15.000
Chức năng resetWorkout đặt lại tất cả các biến mô hình của chúng tôi trở lại trạng thái ban đầu.

00:49:15.000 --> 00:49:18.000
Hãy gọi resetWorkout khi bản tóm tắt bị loại bỏ.

00:49:18.000 --> 00:49:32.000
Điều này được thực hiện trong didSet of showingSummaryView.

00:49:32.000 --> 00:49:39.000
Hãy hiển thị chế độ xem tiến trình khi bài tập kết thúc, trong khi bài tập đang lưu, trước khi hiển thị Chế độ xem tóm tắt.

00:49:39.000 --> 00:49:42.000
Hãy đi đến Chế độ xem Tóm tắt của chúng tôi.

00:49:42.000 --> 00:49:46.000
Nhấp vào Xem Tóm tắt.

00:49:46.000 --> 00:49:56.000
Đầu tiên, thêm workoutManager EnvironmentObject vào SummaryView.

00:49:56.000 --> 00:50:16.000
Chúng tôi muốn hiển thị ProgressView cho đến khi workoutManager có HKWorkout được chỉ định khi người xây dựng hoàn thành việc lưu bài tập.

00:50:16.000 --> 00:50:30.000
Nếu bài tập của workoutManager là số không, thì hãy hiển thị ProgressView với dòng chữ hiển thị "Tiết kiệm bài tập" và ẩn thanh điều hướng.

00:50:30.000 --> 00:50:35.000
Chúng tôi cũng đã cập nhật ActivityRingsView để sử dụng HKHealthStore của workoutManager.

00:50:35.000 --> 00:50:39.000
Bạn chỉ cần một HKHealthStore duy nhất cho mỗi ứng dụng.

00:50:39.000 --> 00:50:58.000
Hãy cập nhật SummaryMetricViews của chúng tôi để sử dụng các giá trị HKWorkout.

00:50:58.000 --> 00:51:06.000
Chế độ xem chỉ số Tổng thời gian sử dụng thời lượng tập luyện.

00:51:06.000 --> 00:51:14.000
Chế độ xem chỉ số tổng khoảng cách sử dụng tổng khoảng cách của bài tập.

00:51:14.000 --> 00:51:23.000
Chế độ xem số liệu Tổng năng lượng sử dụng totalEnergyBurned của bài tập.

00:51:23.000 --> 00:51:27.000
Chế độ xem chỉ số Nhịp tim Trung bình sử dụng Tỷ lệ Nhịp tim trung bình của Người quản lý tập luyện.

00:51:27.000 --> 00:51:34.000
Nếu bạn muốn lưu nhịp tim trung bình cho sau này, bạn có thể thêm nó dưới dạng siêu dữ liệu cho trình tạo trước khi lưu bài tập.

00:51:34.000 --> 00:51:38.000
Hãy cập nhật SessionPagingView của chúng tôi để phản ứng với trạng thái Luôn Bật.

00:51:38.000 --> 00:51:43.000
Chọn SessionPagingView.

00:51:43.000 --> 00:51:51.000
Thêm biến isLuminanceReduced Environment.

00:51:51.000 --> 00:52:05.000
Trong trạng thái Luôn Bật, chúng tôi muốn ẩn chỉ báo trang của TabView và đảm bảo MetricsView được hiển thị.

00:52:05.000 --> 00:52:13.000
Chúng tôi đã đặt indexDisplayMode của tabViewStyle thành không bao giờ hoặc tự động, dựa trên isLuminanceReduced.

00:52:13.000 --> 00:52:20.000
Khi isLuminanceReduced thay đổi, hãy gọi hàm displayMetricsView để hiển thị MetricsView.

00:52:20.000 --> 00:52:23.000
Hãy chạy ứng dụng của chúng tôi trong trình giả lập và dùng thử.

00:52:23.000 --> 00:52:26.000
Nhấp vào Dừng lại để dừng lần chạy cuối cùng.

00:52:26.000 --> 00:52:34.000
Nhấp vào Chạy.

00:52:34.000 --> 00:52:38.000
Chọn bài tập Run.

00:52:38.000 --> 00:52:41.000
Các chỉ số thông báo đang cập nhật trực tiếp từ trình tạo.

00:52:41.000 --> 00:52:45.000
Vuốt sang trái. Nhấn Tạm Dừng.

00:52:45.000 --> 00:52:49.000
Các chỉ số thông báo đã ngừng cập nhật, vì bài tập bị tạm dừng.

00:52:49.000 --> 00:52:54.000
Vuốt sang trái. Nhấn Tiếp tục.

00:52:54.000 --> 00:52:57.000
Các chỉ số tiếp tục cập nhật.

00:52:57.000 --> 00:53:00.000
Vuốt sang phải, xem NowPlayingView.

00:53:00.000 --> 00:53:03.000
Vuốt sang trái.

00:53:03.000 --> 00:53:07.000
Nhấp vào Khóa để kích hoạt trạng thái Luôn Bật.

00:53:07.000 --> 00:53:11.000
Thông báo giây phụ bị ẩn và các chỉ báo kiểm soát trang bị ẩn.

00:53:11.000 --> 00:53:16.000
Nhấp vào Mở khóa để tiếp tục trạng thái hoạt động.

00:53:16.000 --> 00:53:20.000
Vuốt sang trái, nhấn Kết thúc.

00:53:20.000 --> 00:53:23.000
Việc tập luyện tiết kiệm.

00:53:23.000 --> 00:53:25.000
Bản tóm tắt được hiển thị.

00:53:25.000 --> 00:53:27.000
Cuộn xuống để xem từng số liệu.

00:53:27.000 --> 00:53:37.000
Vòng hoạt động sẽ điền vào dựa trên lượng năng lượng, số phút tập thể dục và giờ đứng.

00:53:37.000 --> 00:53:38.000
Nhấn Xong.

00:53:38.000 --> 00:53:48.000
Chúng tôi được đưa trở lại chế độ xem bắt đầu, sẵn sàng cho buổi tập luyện tiếp theo của chúng tôi.

00:53:48.000 --> 00:53:58.000
Bạn đã thấy việc sử dụng SwiftUI dễ dàng như thế nào để triển khai một ứng dụng tập luyện đầy đủ chức năng được tích hợp với HealthKit hỗ trợ trạng thái Luôn Bật.

00:53:58.000 --> 00:54:01.000
Chúng tôi nóng lòng muốn xem bạn sẽ xây dựng ứng dụng tập luyện tuyệt vời nào tiếp theo!

00:54:01.000 --> 23:59:59.000
♪

