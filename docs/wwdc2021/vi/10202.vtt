WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:17.000
Tôi là Ravi Kandadai Madhavan, và trong video này, tôi sẽ chỉ ra cách sử dụng trình phân tích tĩnh trong Xcode để tìm và sửa lỗi trong ứng dụng của bạn.

00:00:17.000 --> 00:00:23.000
Đầu tiên, tôi sẽ trình bày cách sử dụng máy phân tích tĩnh để tìm lỗi và cũng hiểu chúng.

00:00:23.000 --> 00:00:30.000
Sau đó, tôi sẽ mô tả các kiểm tra mới trong Xcode 13, điều này có thể giúp tìm ra nhiều loại vấn đề hơn trong mã của bạn.

00:00:30.000 --> 00:00:37.000
Cuối cùng, tôi sẽ mô tả những cách mà bạn có thể tùy chỉnh máy phân tích để tích hợp nó tốt hơn với quy trình phát triển của bạn.

00:00:37.000 --> 00:00:41.000
Bây giờ chúng ta hãy xem cách sử dụng máy phân tích để tìm lỗi.

00:00:41.000 --> 00:00:54.000
Trình phân tích tĩnh là một công cụ trong Xcode có thể phát hiện lỗi bằng cách phân tích mã nguồn mà không cần chạy nó, vì vậy nó có thể tiết lộ lỗi, ngay cả trước khi bạn kiểm tra và đảm bảo chất lượng ứng dụng của mình.

00:00:54.000 --> 00:00:59.000
Nó cũng có thể tìm thấy các vấn đề trong các đường dẫn mã hiếm và không được bao phủ bởi các bài kiểm tra.

00:00:59.000 --> 00:01:06.000
Trình phân tích tìm thấy các lỗi trong mã C/C++ và Objective-C, ngay cả trong các dự án Swift và Objective-C hỗn hợp.

00:01:06.000 --> 00:01:11.000
Hãy để chúng tôi xem trình phân tích đang hoạt động bằng cách sử dụng một ứng dụng mà tôi đang phát triển.

00:01:11.000 --> 00:01:18.000
Tôi đang cố gắng cải thiện một ứng dụng hiện có được viết bằng Swift và Objective-C cho phép khám phá hệ mặt trời.

00:01:18.000 --> 00:01:21.000
Đây là dự án Xcode cho ứng dụng.

00:01:21.000 --> 00:01:26.000
Tôi sẽ chạy Trình phân tích tĩnh để xem liệu nó có tìm thấy bất kỳ vấn đề gì với mã của tôi không.

00:01:26.000 --> 00:01:27.000
Nó rất dễ chạy.

00:01:27.000 --> 00:01:36.000
Chỉ cần vào Sản phẩm và chọn Phân tích, hoặc sử dụng phím tắt Command-Shift-B.

00:01:36.000 --> 00:01:40.000
Bạn có thể thấy máy phân tích đang chạy trong thanh trạng thái của Xcode.

00:01:40.000 --> 00:01:44.000
Phân tích dự án của bạn rất giống với việc xây dựng nó.

00:01:44.000 --> 00:01:51.000
Trình phân tích quét tất cả các tệp nguồn trong các mục tiêu của sơ đồ hiện đang hoạt động để tìm kiếm lỗi.

00:01:51.000 --> 00:01:55.000
Như bạn thấy trong trạng thái, máy phân tích đã tìm thấy một vấn đề trong dự án của tôi.

00:01:55.000 --> 00:02:00.000
Tôi có thể vào trình điều hướng vấn đề của Xcode để tìm hiểu thêm về nó.

00:02:00.000 --> 00:02:05.000
Như tôi đã chỉ cho bạn, tất cả những gì cần thiết để chạy máy phân tích trên dự án của bạn là một cú nhấp chuột.

00:02:05.000 --> 00:02:15.000
Và với một cú nhấp chuột này, bạn có thể tìm thấy một số loại lỗi, như vấn đề bảo mật, lỗi logic, lạm dụng API và nhiều hơn nữa.

00:02:15.000 --> 00:02:20.000
Máy phân tích không chỉ có thể tìm thấy lỗi mà còn có thể giải thích chúng.

00:02:20.000 --> 00:02:24.000
Hãy quay lại với lỗi được tìm thấy trong ứng dụng của tôi và cố gắng hiểu nó.

00:02:24.000 --> 00:02:31.000
Vấn đề ở đây là phương thức Objective-C positionAtDate đang trả về nil khi nó không được cho là như vậy.

00:02:31.000 --> 00:02:36.000
Giá trị trả về của phương thức được khai báo là non-null trong định nghĩa của phương thức.

00:02:36.000 --> 00:02:41.000
Nhưng bây giờ, tôi muốn hiểu phương pháp này trả về số không như thế nào.

00:02:41.000 --> 00:02:46.000
Bạn có thể mở rộng các vấn đề của máy phân tích và xem chuỗi sự kiện dẫn đến lỗi.

00:02:46.000 --> 00:02:52.000
Các sự kiện cũng được hiển thị trong trình chỉnh sửa, cùng với các tuyên bố nơi chúng xảy ra.

00:02:52.000 --> 00:02:55.000
Các mũi tên cho thấy các sự kiện được sắp xếp như thế nào.

00:02:55.000 --> 00:03:00.000
Tôi thấy dễ dàng hơn để đọc những báo cáo này từ dưới lên trên.

00:03:00.000 --> 00:03:05.000
Sự kiện cuối cùng cho thấy giá trị trả về, vị trí, là số không.

00:03:05.000 --> 00:03:16.000
Các sự kiện trước đó cho thấy điều này là do phương thức regularPositionAtDate, có nghĩa là khởi tạo vị trí, không được gọi vì đối tượng người nhận của nó là số không.

00:03:16.000 --> 00:03:21.000
Nhìn vào các mũi tên, điều này xảy ra dọc theo trường hợp mặc định của công tắc.

00:03:21.000 --> 00:03:29.000
Quay trở lại phần đầu của báo cáo cho thấy rằng đối tượng người nhận được khởi tạo thành số không và vẫn như vậy trong trường hợp mặc định.

00:03:29.000 --> 00:03:37.000
Bây giờ, tôi hiểu rằng tôi chưa xử lý các vật thể không có hình cầu hoặc không đều trong công tắc.

00:03:37.000 --> 00:03:43.000
Để khắc phục điều này, tôi sẽ làm cho trường hợp mặc định giống hệt với trường hợp hình cầu.

00:03:43.000 --> 00:03:48.000
Tôi sẽ chạy lại máy phân tích để đảm bảo sự cố đã được khắc phục.

00:03:48.000 --> 00:03:52.000
Tôi khá nhẹ nhõm vì lỗi này được phát hiện trong khi tôi đang phát triển ứng dụng.

00:03:52.000 --> 00:04:06.000
Điều này là do việc trả về nil từ phương thức Objective-C được chú thích là trả về giá trị không null có thể dẫn đến hành vi thời gian chạy bất ngờ khi phương thức được gọi từ Swift, điều này xảy ra trong mã của tôi.

00:04:06.000 --> 00:04:12.000
Rất may, chạy trình phân tích tĩnh đã tiết lộ lỗi này trước khi nó có thể ảnh hưởng đến người dùng ứng dụng của tôi.

00:04:12.000 --> 00:04:19.000
Trong Xcode 13, chúng tôi đã làm cho máy phân tích thậm chí còn tốt hơn và chúng tôi có một số kiểm tra hoàn toàn mới cho bạn.

00:04:19.000 --> 00:04:23.000
Trình phân tích bây giờ có thể bắt được nhiều lỗi logic hơn trong mã của bạn.

00:04:23.000 --> 00:04:30.000
Nó có thể phát hiện các vòng lặp vô hạn và mã dự phòng, chẳng hạn như các điều kiện nhánh không cần thiết.

00:04:30.000 --> 00:04:39.000
Nó có thể báo cáo các tác dụng phụ trong các khẳng định và trong mã C++, nó có thể phát hiện các lỗi trong việc sử dụng các toán tử di chuyển và chuyển tiếp.

00:04:39.000 --> 00:04:44.000
Các phần của các kiểm tra mới này là các đóng góp nguồn mở được thực hiện cho trình biên dịch Clang của Apple.

00:04:44.000 --> 00:04:49.000
Hãy xem một số ví dụ về lỗi mà những kiểm tra mới này có thể bắt được.

00:04:49.000 --> 00:04:55.000
Nói chung, đó là một cách thực hành tốt để sử dụng các khẳng định để xác thực kỳ vọng của bạn về mã của bạn.

00:04:55.000 --> 00:05:02.000
Tuy nhiên, bạn phải đảm bảo rằng các khẳng định không có tác dụng phụ, chẳng hạn như ghi vào các biến hoặc bộ nhớ.

00:05:02.000 --> 00:05:11.000
Ví dụ, hãy xem xét đoạn mã được hiển thị ở đây đi qua một mảng các vật thể thiên văn và đếm số lượng những vật thể có liên quan đến mặt trăng.

00:05:11.000 --> 00:05:18.000
Nó có một NSAssert kiểm tra xem số lượng vật thể có mặt trăng nhỏ hơn hoặc bằng số lượng hành tinh hay không.

00:05:18.000 --> 00:05:23.000
Nhưng khẳng định có tác dụng phụ là tăng bộ đếm theo dõi các vật thể bằng mặt trăng.

00:05:23.000 --> 00:05:32.000
Các bản cập nhật như thế này có thể bị mất trong cấu hình xây dựng bản phát hành, nơi các bản khẳng định có thể bị vô hiệu hóa để làm cho mã của bạn chạy nhanh hơn.

00:05:32.000 --> 00:05:36.000
Vì vậy, mã này có thể không tăng bộ đếm chút nào trong các bản dựng phát hành.

00:05:36.000 --> 00:05:42.000
Thật dễ dàng để bỏ lỡ những lỗi như thế này trong quá trình phát triển, vì chúng không hiển thị trong các bản dựng gỡ lỗi.

00:05:42.000 --> 00:05:48.000
Bắt đầu từ Xcode 13, máy phân tích có thể tìm thấy những vấn đề như vậy trong mã của bạn và báo cáo nó.

00:05:48.000 --> 00:05:54.000
Kiểm tra này hoạt động không chỉ đối với NSAsserts, mà còn đối với các khẳng định trong C và C++.

00:05:54.000 --> 00:06:02.000
Những lỗi này rất dễ sửa và bạn chỉ cần di chuyển tác dụng phụ ra ngoài khẳng định, như được hiển thị ở đây.

00:06:02.000 --> 00:06:05.000
Vòng lặp vô hạn là một lỗi phổ biến khác.

00:06:05.000 --> 00:06:10.000
Bạn có thể đã thấy nó xảy ra khi có các vòng lặp với logic phức tạp.

00:06:10.000 --> 00:06:17.000
Ví dụ, vòng lặp lồng nhau được hiển thị ở đây cố gắng điền vào lưới hai chiều với một giá trị.

00:06:17.000 --> 00:06:26.000
Nó ẩn một lỗi trong đó giá trị biến được tăng lên bởi vòng lặp bên trong thay vì cột, đó là bộ đếm vòng lặp thực tế.

00:06:26.000 --> 00:06:31.000
Máy phân tích bây giờ có thể phát hiện những lỗi như vậy và giải thích nó cho bạn.

00:06:31.000 --> 00:06:34.000
Một khi bạn phát hiện ra nó, lỗi này rất dễ sửa.

00:06:34.000 --> 00:06:38.000
Chỉ cần thay thế giá trị bằng cột.

00:06:38.000 --> 00:06:42.000
Mặc dù những kiểm tra này tìm thấy lỗi đơn giản, chúng tôi đã tìm thấy lỗi thực sự với chúng.

00:06:42.000 --> 00:06:47.000
Bây giờ bạn cũng có thể sử dụng chúng, tìm lỗi và sửa chúng khi bạn phát triển ứng dụng của mình.

00:06:47.000 --> 00:06:53.000
Xcode cung cấp nhiều tùy chỉnh để tinh chỉnh máy phân tích để phù hợp với quy trình phát triển của bạn.

00:06:53.000 --> 00:06:59.000
Bạn có thể làm cho trình phân tích chạy cùng với mọi bản dựng của dự án của bạn từ cài đặt xây dựng của dự án.

00:06:59.000 --> 00:07:04.000
Để nhanh chóng thu hẹp các cài đặt có liên quan, hãy sử dụng chức năng tìm kiếm.

00:07:04.000 --> 00:07:12.000
Ví dụ, sử dụng "phân tích" làm từ khóa tìm kiếm, tôi chỉ có thể xem xét các tùy chọn có liên quan đến máy phân tích.

00:07:12.000 --> 00:07:17.000
Để bật Phân tích trong khi 'Xây dựng', tất cả những gì bạn cần làm là bật cài đặt xây dựng.

00:07:17.000 --> 00:07:22.000
Giống như các bản dựng gia tăng, phân tích chỉ chạy trên các tệp được sửa đổi.

00:07:22.000 --> 00:07:28.000
Điều này làm cho việc chạy máy phân tích sau khi thay đổi mã nhanh chóng và dễ dàng.

00:07:28.000 --> 00:07:33.000
Máy phân tích cung cấp hai chế độ phân tích: nông và sâu.

00:07:33.000 --> 00:07:39.000
Chế độ nông nhanh hơn, nhưng tránh khám phá các lỗi trải rộng trên nhiều chức năng.

00:07:39.000 --> 00:07:44.000
Sử dụng chế độ này trong các dự án nhạy cảm với thời gian xây dựng và phân tích.

00:07:44.000 --> 00:07:51.000
Như tôi đã đề cập trước đó, máy phân tích đã kiểm tra tìm các loại lỗi khác nhau và một số trong số chúng là chọn tham gia.

00:07:51.000 --> 00:07:58.000
Bạn có thể tinh chỉnh các kiểm tra phù hợp với dự án của mình bằng cách bật hoặc tắt chúng một cách có chọn lọc từ cài đặt xây dựng.

00:07:58.000 --> 00:08:05.000
Ví dụ, nếu dự án của bạn có mã quan trọng về bảo mật, hãy bật kiểm tra các vấn đề bảo mật.

00:08:05.000 --> 00:08:17.000
Mặt khác, nếu bạn thấy rằng một số vấn đề không liên quan đến mã của mình, bạn có thể vô hiệu hóa các kiểm tra ít hữu ích hơn một cách riêng lẻ và vẫn được hưởng lợi từ các kiểm tra khác.

00:08:17.000 --> 00:08:22.000
Bạn cũng có thể phân tích một tệp duy nhất thay vì toàn bộ dự án.

00:08:22.000 --> 00:08:26.000
Chọn tệp để phân tích từ menu Sản phẩm &gt; Thực hiện Hành động.

00:08:26.000 --> 00:08:31.000
Sử dụng cái này để kiểm tra các thay đổi của bạn một cách nhanh chóng, thậm chí không cần xây dựng dự án của bạn.

00:08:31.000 --> 00:08:35.000
Điều này đặc biệt hữu ích khi sửa đổi các tệp tiêu đề.

00:08:35.000 --> 00:08:39.000
Nó sẽ bỏ qua việc phân tích lại tất cả các tệp nhập nó.

00:08:39.000 --> 00:08:45.000
Trình phân tích tĩnh trong Xcode có thể phát hiện lỗi trong mã của bạn rất sớm trong quá trình phát triển.

00:08:45.000 --> 00:08:48.000
Chạy nó chỉ với một cú nhấp chuột và tìm thấy nhiều loại lỗi.

00:08:48.000 --> 00:08:51.000
Và đừng quên tùy chỉnh nó theo quy trình làm việc của bạn.

00:08:51.000 --> 00:08:58.000
Trong Xcode 13, chúng tôi đã cải tiến hơn nữa trình phân tích và thêm nhiều kiểm tra mới để tìm lỗi logic.

00:08:58.000 --> 00:09:03.000
Sử dụng trình phân tích và sửa lỗi trong ứng dụng của bạn trước khi chúng tiếp cận người dùng của bạn.

00:09:03.000 --> 00:09:06.000
Cảm ơn bạn, và tận hưởng phần còn lại của WWDC!

00:09:06.000 --> 23:59:59.000
[Nhạc lạc quan].

