WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Itai Rom: Chào mừng đến với "Tùy chỉnh quy trình làm việc Xcode Cloud nâng cao của bạn."

00:00:12.000 --> 00:00:17.000
Tên tôi là Itai, và tôi sẽ được tham gia sau bởi đồng nghiệp của tôi, Yan.

00:00:17.000 --> 00:00:20.000
Năm nay chúng tôi giới thiệu Xcode Cloud.

00:00:20.000 --> 00:00:27.000
Xcode Cloud là một dịch vụ tích hợp và phân phối liên tục được tích hợp trong Xcode và được thiết kế dành riêng cho các nhà phát triển Apple.

00:00:27.000 --> 00:00:34.000
Trong các phiên khác, chúng tôi đã chỉ ra cách bạn có thể thiết lập quy trình làm việc đầu cuối để liên tục xây dựng, kiểm tra và phân phối các ứng dụng của mình.

00:00:34.000 --> 00:00:42.000
Trong phiên này, chúng ta sẽ nói về một số tính năng nâng cao hơn mà bạn có thể sử dụng để tùy chỉnh Xcode Cloud để phù hợp hơn với nhu cầu của nhóm bạn.

00:00:42.000 --> 00:00:52.000
Xcode Cloud được thiết kế để tích hợp với các công cụ và dịch vụ của nhà phát triển Apple - như trang web của nhà phát triển, TestFlight và App Store Connect - ngay lập tức.

00:00:52.000 --> 00:01:00.000
Nó cũng tích hợp với các công cụ phát triển thiết yếu hàng ngày của bạn, như tất cả các nhà cung cấp kiểm soát nguồn dựa trên Git chính và thậm chí cả Slack để nhắn tin.

00:01:00.000 --> 00:01:07.000
Tuy nhiên, bạn có thể có các công cụ nội bộ hoặc độc quyền và các dịch vụ bên ngoài khác là một phần quan trọng trong quy trình của bạn.

00:01:07.000 --> 00:01:15.000
Trong phiên này, chúng tôi sẽ trình bày cách bạn có thể tùy chỉnh Xcode Cloud để tích hợp tốt với các công cụ và dịch vụ này.

00:01:15.000 --> 00:01:18.000
Chúng tôi sẽ đề cập đến bốn chủ đề tùy chỉnh.

00:01:18.000 --> 00:01:23.000
Đầu tiên, chúng ta sẽ thảo luận về việc sử dụng các biến môi trường để chuyển thêm các bit thông tin vào các bản dựng của bạn.

00:01:23.000 --> 00:01:29.000
Chúng ta sẽ học cách sử dụng các tập lệnh để chạy các lệnh tùy chỉnh trong các hành động bạn chạy trong bản dựng của mình.

00:01:29.000 --> 00:01:33.000
Và cũng như cách thêm các kho lưu trữ nguồn khác mà bạn cần trong quá trình xây dựng.

00:01:33.000 --> 00:01:39.000
Và cuối cùng, cách bạn có thể sử dụng webhooks để tích hợp Xcode Cloud với các hệ thống khác mà nhóm của bạn sử dụng.

00:01:39.000 --> 00:01:44.000
Có rất nhiều thứ để đề cập, vì vậy hãy đi thẳng vào nó với các biến môi trường.

00:01:44.000 --> 00:01:53.000
Khi bạn lập kế hoạch và định cấu hình quy trình làm việc cho dự án của mình, có thể có những lúc bạn muốn hành vi xây dựng của mình hơi khác nhau tùy thuộc vào quy trình làm việc đang chạy.

00:01:53.000 --> 00:02:00.000
Ví dụ: nếu ứng dụng của bạn phụ thuộc vào dịch vụ API, bạn có thể muốn các thử nghiệm của mình sử dụng môi trường dàn dựng thay vì sản xuất.

00:02:00.000 --> 00:02:06.000
Trong trường hợp này, bạn muốn chuyển một URL khác cho dịch vụ API vào các bài kiểm tra của mình.

00:02:06.000 --> 00:02:09.000
Các biến môi trường cho phép bạn làm điều đó.

00:02:09.000 --> 00:02:17.000
Chúng là các cặp khóa-giá trị đơn giản cho phép bạn xác định một số thông tin mà bạn có thể sử dụng để kiểm soát hơn nữa hành vi của bản dựng của mình.

00:02:17.000 --> 00:02:22.000
Bạn có thể cấu hình bất kỳ biến môi trường nào bạn cần ngay trong phần Môi trường trong quy trình làm việc của mình.

00:02:22.000 --> 00:02:29.000
Vì chúng là một phần của cấu hình quy trình làm việc của bạn, bạn không cần phải cam kết bất kỳ thông tin bổ sung nào vào kho lưu trữ nguồn của mình.

00:02:29.000 --> 00:02:37.000
Mỗi khi quy trình làm việc của bạn chạy, các biến bạn đã xác định sẽ được đặt trong môi trường đang chạy các hành động.

00:02:37.000 --> 00:02:44.000
Đối với thông tin nhạy cảm, như khóa API hoặc mã thông báo truy cập, bạn có thể định cấu hình một biến môi trường bí mật.

00:02:44.000 --> 00:02:47.000
Các biến môi trường bí mật được xử lý an toàn.

00:02:47.000 --> 00:02:55.000
Chúng luôn được mã hóa và lưu trữ an toàn và các giá trị được giải mã của chúng chỉ khả dụng trong môi trường tạm thời được sử dụng để chạy các hành động của bạn.

00:02:55.000 --> 00:03:03.000
Các giá trị cũng được biên tập lại từ nhật ký và bạn không thể xem chúng trong trình chỉnh sửa quy trình làm việc như bạn có thể cho một biến không bí mật.

00:03:03.000 --> 00:03:05.000
Tạo một bí mật biến đổi môi trường thật dễ dàng.

00:03:05.000 --> 00:03:09.000
Chỉ cần chọn hộp kiểm "Bí mật" trong bảng biến môi trường.

00:03:09.000 --> 00:03:20.000
Giá trị của biến môi trường của bạn sau đó sẽ bị ẩn khỏi chế độ xem và một khi bạn lưu thay đổi của mình, sẽ được lưu trữ an toàn và không thể xem được nữa trong trình chỉnh sửa quy trình làm việc.

00:03:20.000 --> 00:03:26.000
Các biến môi trường cung cấp một cơ chế tiện dụng để tùy chỉnh hành vi và chuyển thông tin bổ sung vào quy trình làm việc của bạn.

00:03:26.000 --> 00:03:32.000
Chúng thậm chí còn mạnh hơn khi kết hợp với tính năng nâng cao tiếp theo của chúng tôi: các tập lệnh tùy chỉnh.

00:03:32.000 --> 00:03:41.000
Giữa quy trình làm việc của Xcode Cloud và các sơ đồ của Xcode, bạn có rất nhiều sự linh hoạt trong cách bạn có thể thiết lập các hành động mà bạn muốn chạy trong quy trình làm việc của mình.

00:03:41.000 --> 00:03:50.000
Nhưng đôi khi bạn sẽ cần chạy logic tùy chỉnh hoặc các lệnh bổ sung trong một hành động và các tập lệnh tùy chỉnh cung cấp một cách mạnh mẽ và linh hoạt để đạt được điều này.

00:03:50.000 --> 00:03:55.000
Tập lệnh tùy chỉnh là tập lệnh shell mà bạn viết và đưa vào kho lưu trữ nguồn của mình.

00:03:55.000 --> 00:03:59.000
Các tập lệnh tùy chỉnh của bạn được chạy trong mỗi hành động trong quy trình làm việc của bạn.

00:03:59.000 --> 00:04:08.000
Có ba loại tập lệnh có sẵn: tập lệnh post-clone, tập lệnh pre-Xcodebuild và tập lệnh post-Xcodebuild.

00:04:08.000 --> 00:04:19.000
Mỗi lần Xcode Cloud chạy một hành động, nó thực hiện một loạt các bước và mỗi tập lệnh tùy chỉnh, như được gợi ý bởi tên của nó, được chạy như một bước tại một điểm cụ thể trong một hành động.

00:04:19.000 --> 00:04:26.000
Đầu tiên, Xcode Cloud thiết lập một môi trường tạm thời và sao chép mã nguồn từ kho lưu trữ chính của bạn.

00:04:26.000 --> 00:04:30.000
Sau đó, Xcode Cloud chạy tập lệnh post-clone.

00:04:30.000 --> 00:04:36.000
Sau khi giải quyết tất cả các phụ thuộc nguồn khác, đám mây Xcode chạy tập lệnh pre-Xcodebuild.

00:04:36.000 --> 00:04:41.000
Tiếp theo, Xcode Cloud chạy lệnh Xcodebuild tương ứng của hành động.

00:04:41.000 --> 00:04:49.000
Khi bước Xcodebuild kết thúc, Xcode Cloud chạy tập lệnh sau Xcodebuild và lưu bất kỳ tạo tác nào mà nó đã tạo trước đó.

00:04:49.000 --> 00:05:02.000
Nếu quy trình làm việc của bạn bao gồm một số hành động - ví dụ: nhiều hành động xây dựng - hoặc xây dựng, kiểm tra, phân tích và lưu trữ các hành động - Xcode Cloud sẽ chạy các tập lệnh tùy chỉnh của bạn vào những thời điểm thích hợp cho mỗi hành động.

00:05:02.000 --> 00:05:05.000
Thêm một tập lệnh tùy chỉnh vào Xcode Cloud thật dễ dàng.

00:05:05.000 --> 00:05:16.000
Bạn chỉ cần thêm một tập lệnh shell với tên thích hợp vào một thư mục có tên "ci_scripts", và đặt thư mục này ở cùng cấp độ với tệp dự án hoặc không gian làm việc bạn đang sử dụng trong quy trình làm việc của mình.

00:05:16.000 --> 00:05:25.000
Vì các tập lệnh tùy chỉnh là một phần của mã nguồn của bạn, bạn có thể kiểm tra các thay đổi tập lệnh trong các yêu cầu kéo hoặc thậm chí tùy chỉnh hành vi của chúng trên các nhánh khác nhau.

00:05:25.000 --> 00:05:33.000
Khi Xcode Cloud chạy các hành động của bạn, nó sẽ tìm kiếm sự tồn tại của từng tập lệnh vào thời điểm thích hợp và chạy chúng nếu chúng có mặt.

00:05:33.000 --> 00:05:36.000
Bạn không cần phải định cấu hình quy trình làm việc của mình để chạy các tập lệnh tùy chỉnh của mình.

00:05:36.000 --> 00:05:39.000
Nếu các kịch bản ở đó, chúng sẽ được chạy.

00:05:39.000 --> 00:05:52.000
Lưu ý rằng tên của thư mục ci_scripts và các tập lệnh bên trong phải khớp chính xác với quy ước đặt tên này để Xcode Cloud tìm và chạy các tập lệnh của bạn.

00:05:52.000 --> 00:06:00.000
Các biến môi trường mà bạn đã định cấu hình trong quy trình làm việc của mình có sẵn để sử dụng trong các tập lệnh tùy chỉnh của bạn, bao gồm các biến môi trường bí mật.

00:06:00.000 --> 00:06:05.000
Ngoài ra, Xcode Cloud cũng cung cấp nhiều biến môi trường hữu ích khác.

00:06:05.000 --> 00:06:15.000
Bạn có thể sử dụng các biến này để thêm kiểm soát luồng vào tập lệnh của mình, để bạn có thể đảm bảo các lệnh bạn muốn chạy được chạy tại các điểm chính xác trong quy trình làm việc của bạn.

00:06:15.000 --> 00:06:26.000
Ví dụ: nếu bạn muốn kiểm tra xem hành động của mình có đang chạy cho iOS, macOS, tvOS hoặc watchOS hay không, bạn có thể sử dụng giá trị của biến CI_PRODUCT_PLATFORM.

00:06:26.000 --> 00:06:43.000
Trong một kịch bản được nhắm mục tiêu nhiều hơn - có lẽ có một lệnh bạn chỉ muốn chạy trong hành động lưu trữ của một quy trình làm việc cụ thể - bạn có thể kiểm tra xem các biến CI_XCODEBUILD_ACTION và CI_WORKFLOW có khớp với hành động lưu trữ và quy trình làm việc cụ thể hay không trước khi chạy lệnh.

00:06:43.000 --> 00:06:46.000
Hãy xem các tập lệnh tùy chỉnh đang hoạt động.

00:06:46.000 --> 00:06:49.000
Nhóm của tôi làm việc trên một ứng dụng đặt hàng sinh tố có tên Fruta.

00:06:49.000 --> 00:06:57.000
Trong phiên "Khám phá quy trình làm việc Xcode Cloud", bạn đã học cách thiết lập quy trình làm việc để xây dựng, kiểm tra và phân phối các ứng dụng, như Fruta.

00:06:57.000 --> 00:07:02.000
Chúng tôi sử dụng Xcode Cloud để xây dựng và kiểm tra mỗi khi chúng tôi tạo yêu cầu kéo.

00:07:02.000 --> 00:07:11.000
Chúng tôi cũng phân phối các bản dựng từ các yêu cầu kéo của chúng tôi cho các thành viên trong nhóm của chúng tôi thông qua TestFlight, cho phép họ xác minh và đăng xuất các thay đổi trước khi mã được hợp nhất.

00:07:11.000 --> 00:07:18.000
Hôm nay, tôi muốn giúp các thành viên trong nhóm dễ dàng biết liệu bản dựng được cài đặt trên thiết bị của họ có phải từ yêu cầu kéo hay không.

00:07:18.000 --> 00:07:24.000
Chúng ta có thể làm điều đó bằng cách sử dụng một biểu tượng ứng dụng khác khi chúng ta đang xây dựng từ một yêu cầu kéo.

00:07:24.000 --> 00:07:28.000
Như bạn có thể đoán, việc sử dụng một tập lệnh tùy chỉnh giúp việc thiết lập điều này trở nên dễ dàng.

00:07:28.000 --> 00:07:32.000
Hãy xem làm thế nào.

00:07:32.000 --> 00:07:35.000
Trong Xcode, tôi đã mở dự án Fruta.

00:07:35.000 --> 00:07:40.000
Trước khi tôi có thể thêm một tập lệnh tùy chỉnh, trước tiên tôi cần thêm một thư mục ci_scripts vào dự án của mình.

00:07:40.000 --> 00:07:51.000
Tôi có thể làm điều này bằng cách chọn dự án của mình trong trình duyệt dự án và nhấp vào nút dấu cộng ở dưới cùng và sau đó chọn Nhóm mới.

00:07:51.000 --> 00:07:55.000
Tôi sẽ nhập tên thư mục, ci_scripts.

00:07:55.000 --> 00:08:09.000
Tiếp theo, tôi sẽ thêm bộ biểu tượng ứng dụng beta mà nhà thiết kế của chúng tôi đã tạo vào thư mục ci_scripts, để tập lệnh tùy chỉnh của tôi có thể hoán đổi nó vào vị trí trong quá trình xây dựng.

00:08:09.000 --> 00:08:17.000
Để làm điều đó, tôi sẽ kéo nó vào thư mục ci_scripts của tôi từ Finder.

00:08:17.000 --> 00:08:24.000
Trong trang tính, tôi sẽ bỏ chọn bất kỳ mục tiêu nào đã chọn và nhấp vào Kết thúc.

00:08:24.000 --> 00:08:27.000
Cuối cùng, hãy thêm một tập lệnh pre-Xcodebuild.

00:08:27.000 --> 00:08:36.000
Tập lệnh này sẽ chạy trước lệnh Xcodebuild và tôi sẽ sử dụng nó để hoán đổi biểu tượng ứng dụng mặc định của Fruta được đặt với biểu tượng ứng dụng beta được đặt khi thích hợp.

00:08:36.000 --> 00:08:48.000
Tôi đã tạo một tập lệnh để sử dụng, vì vậy tất cả những gì tôi cần làm là thêm nó vào thư mục ci_scripts.

00:08:48.000 --> 00:08:57.000
Một lần nữa, tôi sẽ bỏ chọn bất kỳ mục tiêu nào trong trang tính và nhấp vào Kết thúc.

00:08:57.000 --> 00:09:03.000
Bây giờ kịch bản của tôi đã được đặt đúng chỗ, chúng ta hãy xem xét kỹ hơn những gì nó hoạt động.

00:09:03.000 --> 00:09:09.000
Đầu tiên, tôi muốn đảm bảo rằng biểu tượng ứng dụng chỉ được hoán đổi khi bản dựng đến từ một yêu cầu kéo.

00:09:09.000 --> 00:09:16.000
Tôi có thể sử dụng một trong những biến môi trường mà Xcode Cloud cung cấp để kiểm tra trong thời gian chạy xem bản dựng có phải là yêu cầu kéo hay không.

00:09:16.000 --> 00:09:29.000
Có nhiều biến môi trường liên quan đến các yêu cầu kéo mà tôi có thể sử dụng cho việc này, nhưng trong trường hợp này tôi sẽ kiểm tra xem biến môi trường CI_PULL_REQUEST_NUMBER đã được đặt chưa.

00:09:29.000 --> 00:09:34.000
Ngoài ra, tôi chỉ muốn biểu tượng ứng dụng beta được sử dụng cho các bản dựng được phân phối cho TestFlight.

00:09:34.000 --> 00:09:40.000
Bất cứ khi nào Xcode Cloud phân phối một bản dựng cho TestFlight, nó luôn xây dựng một kho lưu trữ của dự án trước.

00:09:40.000 --> 00:09:51.000
Vì vậy, một cách tốt để kiểm tra điều này là xác minh xem giá trị của biến môi trường CI_XCODEBUILD_ACTION có phải là "lưu trữ" hay không.

00:09:51.000 --> 00:10:06.000
Nếu cả hai biến môi trường này đều có giá trị mong đợi, thì tôi sẽ xóa bộ biểu tượng ứng dụng hiện có và thay thế nó bằng bộ biểu tượng ứng dụng beta bằng các lệnh rm và mv.

00:10:06.000 --> 00:10:16.000
Ngoài ra, hãy lưu ý rằng tôi đang sử dụng biến môi trường CI_WORKSPACE để xây dựng đường dẫn phù hợp cho cả bộ biểu tượng ứng dụng mặc định và beta.

00:10:16.000 --> 00:10:23.000
Tất cả những gì còn lại cần làm là mở một yêu cầu kéo với những thay đổi này và đợi Xcode Cloud xây dựng và phân phối Fruta cho TestFlight.

00:10:23.000 --> 00:10:28.000
Thay vì trải qua quá trình đó ngay bây giờ, tôi đã chuẩn bị một bản dựng trước thời hạn.

00:10:28.000 --> 00:10:33.000
Ở đây, Xcode Cloud đã xây dựng và phân phối Fruta từ nhánh yêu cầu kéo của tôi.

00:10:33.000 --> 00:10:39.000
Trong ứng dụng TestFlight trên điện thoại của tôi, tôi có thể xác minh rằng bản dựng của tôi đang sử dụng biểu tượng ứng dụng beta mới mà tôi vừa thêm.

00:10:39.000 --> 00:10:48.000
Bây giờ tôi có thể hợp nhất yêu cầu kéo của mình và mọi người trong nhóm sẽ bắt đầu thấy cùng một biểu tượng ứng dụng beta trong các bản dựng của các yêu cầu kéo của riêng họ.

00:10:48.000 --> 00:10:54.000
Bây giờ chúng ta đã thấy cách sử dụng các tập lệnh tùy chỉnh trong Xcode Cloud, có một vài điều quan trọng cần lưu ý về chúng.

00:10:54.000 --> 00:11:04.000
Đầu ra tiêu chuẩn và lỗi tiêu chuẩn từ các tập lệnh tùy chỉnh của bạn được bao gồm trong nhật ký cho hành động mà chúng đã chạy và chúng cũng có thể được tải xuống từ tab Hiện vật.

00:11:04.000 --> 00:11:14.000
Nếu tập lệnh của bạn dường như không chạy khi bạn mong đợi, hãy kiểm tra kỹ xem bạn đã đặt tên chính xác chưa và đặt nó vào thư mục ci_scripts cùng với dự án hoặc không gian làm việc của bạn.

00:11:14.000 --> 00:11:21.000
Đảm bảo thêm ghi nhật ký và khả năng phục hồi hữu ích để hỗ trợ bạn khắc phục mọi lỗi trong các tập lệnh tùy chỉnh của mình.

00:11:21.000 --> 00:11:30.000
Ví dụ: nếu tập lệnh của bạn thực hiện các yêu cầu mạng đối với các dịch vụ bên ngoài, bạn có thể muốn bao gồm logic để thử lại các yêu cầu đó với tính năng ghi nhật ký chi tiết được bật.

00:11:30.000 --> 00:11:34.000
Ngoài ra, Xcode Cloud tôn trọng mã thoát của các tập lệnh của bạn.

00:11:34.000 --> 00:11:41.000
Vì vậy, nếu tập lệnh của bạn thoát với giá trị khác 0, Xcode Cloud sẽ coi đây là một thất bại và sẽ thất bại trong hành động tổng thể.

00:11:41.000 --> 00:11:51.000
Bạn có thể tận dụng điều này để đảm bảo rằng các lệnh bạn cần chạy trong tập lệnh của mình thành công trước khi Xcode Cloud tiếp tục với phần còn lại của hành động.

00:11:51.000 --> 00:11:57.000
Cuối cùng, cần lưu ý rằng trong một hành động thử nghiệm, nhiều môi trường được sử dụng để xây dựng và chạy các thử nghiệm của bạn.

00:11:57.000 --> 00:12:03.000
Chỉ có môi trường được sử dụng để xây dựng các bài kiểm tra của bạn mới có mã nguồn của bạn được nhân bản vào nó theo mặc định.

00:12:03.000 --> 00:12:07.000
Các môi trường chạy thử nghiệm của bạn sẽ không có mã nguồn được nhân bản vào chúng.

00:12:07.000 --> 00:12:10.000
Họ sẽ chỉ có thư mục ci_scripts được cung cấp trên chúng.

00:12:10.000 --> 00:12:24.000
Kết quả là, tập lệnh sau sao chép sẽ không chạy trong các môi trường này và các tập lệnh tùy chỉnh của bạn và bất kỳ phụ thuộc nào của chúng, chẳng hạn như các tập lệnh shell khác và các công cụ nhỏ, phải được chứa hoàn toàn trong thư mục ci_scripts.

00:12:24.000 --> 00:12:30.000
Với các tập lệnh tùy chỉnh và các biến môi trường, bạn có hai công cụ mạnh mẽ để tùy chỉnh hành vi của quy trình làm việc của mình.

00:12:30.000 --> 00:12:41.000
Tiếp theo, đồng nghiệp Yan của tôi sẽ chỉ cho bạn cách sử dụng các kho lưu trữ bổ sung với Xcode Cloud để bạn có thể sử dụng các gói Swift và các phụ thuộc khác trong quy trình làm việc của mình.

00:12:41.000 --> 00:12:42.000
Yan Huang: Cảm ơn, Itai.

00:12:42.000 --> 00:12:46.000
Nhiều dự án được xây dựng bằng cách sử dụng các công cụ, thư viện và khuôn khổ.

00:12:46.000 --> 00:12:56.000
Những phụ thuộc đó thường được lưu trữ trong kho lưu trữ Git được chia sẻ giữa các dự án và chúng cần được truy xuất để dự án của bạn xây dựng thành công.

00:12:56.000 --> 00:13:01.000
Xcode Cloud tự động giúp thêm các kho lưu trữ bổ sung này.

00:13:01.000 --> 00:13:09.000
Ví dụ, chúng tôi muốn thêm một tính năng mới để cho phép người dùng mời bạn bè của họ và chia sẻ đồ uống vào ứng dụng Fruta.

00:13:09.000 --> 00:13:12.000
Một nhóm khác đã triển khai một tính năng tương tự.

00:13:12.000 --> 00:13:21.000
Vì vậy, chúng tôi sẽ sử dụng lại gói của họ có tên là "InvitationsKit", được lưu trữ trên kho lưu trữ Git riêng tư được chia sẻ với nhóm của tôi.

00:13:21.000 --> 00:13:25.000
Hãy xem cách thêm gói này.

00:13:25.000 --> 00:13:29.000
Tôi ở đây trong Xcode với dự án Fruta.

00:13:29.000 --> 00:13:35.000
Tôi có thể thêm một gói từ menu Tệp và chọn Thêm Gói.

00:13:35.000 --> 00:13:43.000
Tôi đã có bộ sưu tập các gói được chia sẻ của Nature Labs, trong đó có danh sách các gói trong tổ chức của chúng tôi.

00:13:43.000 --> 00:13:49.000
Tôi sẽ chọn InvitationsKit và nhấp vào Add Package.

00:13:49.000 --> 00:14:11.000
Bây giờ sự phụ thuộc đã được thêm vào, tôi sẽ cam kết sự phụ thuộc mới này từ menu Kiểm soát Nguồn và đẩy các thay đổi của tôi đến chi nhánh của tôi.

00:14:11.000 --> 00:14:18.000
Chúng tôi thiết lập một quy trình làm việc trong Xcode Cloud sẽ bắt đầu một bản dựng mới khi nó nhận được một cam kết mới từ bất kỳ chi nhánh nào.

00:14:18.000 --> 00:14:21.000
Vì vậy, cam kết mới này sẽ bắt đầu một bản dựng mới.

00:14:21.000 --> 00:14:32.000
Vì đây là lần đầu tiên chúng tôi thêm sự phụ thuộc này, tôi hy vọng rằng việc xây dựng sẽ thất bại vì Xcode Cloud không có quyền truy cập vào kho lưu trữ InvitationsKit.

00:14:32.000 --> 00:14:37.000
Nhưng Xcode Cloud cung cấp một giao diện người dùng dễ dàng để giải quyết vấn đề này.

00:14:37.000 --> 00:14:43.000
Hãy đến Xcode Cloud trong App Store Connect và xem bản dựng mới này.

00:14:43.000 --> 00:14:46.000
Đúng như dự đoán, việc xây dựng đã thất bại.

00:14:46.000 --> 00:14:56.000
Xcode Cloud hiển thị một biểu ngữ cảnh báo chỉ ra rằng nó có vấn đề với việc truy cập kho lưu trữ và cung cấp cho tôi tùy chọn cấp quyền truy cập vào nó.

00:14:56.000 --> 00:15:03.000
Tôi tiếp tục và nhấp vào nút Quản lý Kho lưu trữ.

00:15:03.000 --> 00:15:16.000
Nó đưa tôi đến trang cài đặt, nơi tôi có thể di chuột qua liên kết kho lưu trữ invitationsKit và sau đó nhấp vào Grant.

00:15:16.000 --> 00:15:23.000
Tùy thuộc vào dịch vụ kiểm soát nguồn của bạn, bạn có thể được hướng dẫn phê duyệt Xcode Cloud để truy cập kho lưu trữ.

00:15:23.000 --> 00:15:38.000
Tôi đã tiếp tục và cung cấp quyền truy cập vào InvitationsKit trong Github.

00:15:38.000 --> 00:15:43.000
Bây giờ, khi tôi nhìn lại trong Xcode Cloud, nó hiển thị Quyền truy cập được cấp.

00:15:43.000 --> 00:15:50.000
Bây giờ tôi có thể chạy lại bản dựng.

00:15:50.000 --> 00:15:54.000
Chúng tôi hy vọng lần này sẽ qua đời.

00:15:54.000 --> 00:16:02.000
Bạn có thể quay lại phần Kho lưu trữ bổ sung trong Cài đặt để tìm hiểu tất cả các kho lưu trữ đã được kết nối.

00:16:02.000 --> 00:16:07.000
Bạn cũng có thể từ chối quyền truy cập từ đó nếu chúng không còn được sử dụng nữa.

00:16:07.000 --> 00:16:12.000
Xcode Cloud sẽ phát hiện các kho lưu trữ mới được tham chiếu trong quá trình xây dựng.

00:16:12.000 --> 00:16:22.000
Khi chúng tôi thêm một phụ thuộc mà Xcode Cloud không có quyền truy cập, giao diện người dùng cung cấp một cách nhanh chóng và dễ dàng để khắc phục sự cố này.

00:16:22.000 --> 00:16:32.000
Điều này có giá trị cho bất kỳ hoạt động Git nào bao gồm nhân bản kho lưu trữ bên trong tập lệnh tùy chỉnh hoặc tham chiếu mô-đun con Git.

00:16:32.000 --> 00:16:37.000
Điều này cũng áp dụng cho tất cả các công cụ quản lý phụ thuộc khác.

00:16:37.000 --> 00:16:44.000
Trong bản demo này, chúng tôi đã sử dụng tính năng Swift Packages Collection mới để bao gồm một gói bổ sung.

00:16:44.000 --> 00:16:52.000
Nếu bạn muốn tìm hiểu thêm về nó, hãy xem "Khám phá và quản lý các gói Swift bằng Bộ sưu tập."

00:16:52.000 --> 00:16:58.000
Cho đến nay chúng tôi đã chứng minh cho bạn cách tùy chỉnh bản dựng của bạn trong Xcode Cloud.

00:16:58.000 --> 00:17:03.000
Nhưng đôi khi bạn và nhóm của bạn cũng có thể muốn cộng tác thông qua các dịch vụ bên ngoài.

00:17:03.000 --> 00:17:08.000
Ví dụ, bạn có thể muốn thông báo cho những người thử nghiệm beta khi một bản dựng mới đã sẵn sàng.

00:17:08.000 --> 00:17:12.000
Đây là nơi webhooks có thể đến để giúp đỡ.

00:17:12.000 --> 00:17:17.000
Webhooks cung cấp một cách để Xcode Cloud giao tiếp với các dịch vụ của bạn.

00:17:17.000 --> 00:17:28.000
Với tải trọng phong phú được gửi ở các giai đoạn khác nhau của vòng đời xây dựng, bạn sẽ có thể tự động hóa hơn nữa quy trình làm việc của mình và cải thiện sự hợp tác của nhóm.

00:17:28.000 --> 00:17:31.000
Hãy đi sâu vào để tìm hiểu thêm về nó.

00:17:31.000 --> 00:17:39.000
Bạn có thể thiết lập webhooks trong Xcode Cloud để nhận các bản cập nhật theo thời gian thực ở ba giai đoạn khác nhau trong bản dựng của bạn.

00:17:39.000 --> 00:17:56.000
Đầu tiên, khi bản dựng được tạo, hoặc vì bạn đã đẩy một số mã hoặc bắt đầu xây dựng theo cách thủ công; sau đó, khi bản dựng đang bắt đầu; cuối cùng, khi bản dựng đã hoàn thành, bất kể bản dựng thất bại hay thành công.

00:17:56.000 --> 00:18:05.000
Hãy xem cách thêm một webhook mới vào dự án của chúng tôi Thêm webhooks thật dễ dàng trong Xcode Cloud.

00:18:05.000 --> 00:18:08.000
Nhấp vào tab Cài đặt ở cột bên trái.

00:18:08.000 --> 00:18:14.000
Nhấp vào Webhooks và sau đó nhấp vào nút dấu cộng.

00:18:14.000 --> 00:18:25.000
Sau đó, nó sẽ yêu cầu bạn nhập tên webhook của bạn và URL vào một ứng dụng hoặc các dịch vụ có khả năng nhận và xử lý các yêu cầu HTTP.

00:18:25.000 --> 00:18:28.000
Sau đó, nhấp vào Lưu.

00:18:28.000 --> 00:18:33.000
Xcode Cloud cho phép bạn tạo tối đa năm webhooks cho mỗi sản phẩm.

00:18:33.000 --> 00:18:40.000
Đảm bảo cung cấp một tên duy nhất cho mỗi webhooks của bạn để đảm bảo bạn có thể dễ dàng xác định chúng.

00:18:40.000 --> 00:19:01.000
Tải trọng được gửi đến điểm cuối của bạn là một đốm màu JSON với thông tin về bản dựng và sản phẩm của bạn, chẳng hạn như ứng dụng App Store Connect, quy trình làm việc, sản phẩm, bản dựng của bạn và hơn thế nữa.

00:19:01.000 --> 00:19:08.000
Bạn cần thiết lập một ứng dụng hoặc một dịch vụ để nhận và xử lý tải trọng được gửi qua HttpRequest.

00:19:08.000 --> 00:19:16.000
Chúng ta hãy xem mã mẫu về cách đạt được điều đó bằng Swift trên AWS Lambda.

00:19:16.000 --> 00:19:19.000
Đầu tiên, chúng tôi nhận được yêu cầu.

00:19:19.000 --> 00:19:23.000
Sau đó giải mã tải trọng của nó thành một đối tượng JSON.

00:19:23.000 --> 00:19:27.000
Sau đó, chúng tôi kiểm tra tên của quy trình làm việc và trạng thái xây dựng.

00:19:27.000 --> 00:19:40.000
Nếu quy trình làm việc là quy trình phát hành và trạng thái xây dựng đã thành công, chúng tôi sẽ đăng một tin nhắn lên Twitter để cho người thử nghiệm hoặc người dùng beta biết rằng nó có sẵn để thử nghiệm.

00:19:40.000 --> 00:19:48.000
Cuối cùng, chúng tôi sẽ trả lại mã trạng thái 200 để xác nhận rằng yêu cầu webhook đã được xử lý thành công.

00:19:48.000 --> 00:19:59.000
Nếu bạn muốn tìm hiểu thêm về việc chạy các chức năng không máy chủ Swift, hãy xem phiên này trong WWDC 2020.

00:19:59.000 --> 00:20:06.000
Nếu điểm cuối của bạn không trả về mã trạng thái thành công, Xcode Cloud sẽ cố gắng gửi lại yêu cầu.

00:20:06.000 --> 00:20:14.000
Xcode Cloud cũng giúp bạn dễ dàng kiểm tra nội dung của các webhook đã được gửi đến điểm cuối của bạn.

00:20:14.000 --> 00:20:25.000
Bạn có thể truy cập Xcode Cloud trong App Store Connect; nhấp vào cài đặt của bạn và webhook; chọn webhook bạn muốn kiểm tra.

00:20:25.000 --> 00:20:32.000
Sau đó, nó hiển thị cho bạn danh sách các giao hàng tại các dấu thời gian khác nhau và chọn giao hàng mà bạn quan tâm.

00:20:32.000 --> 00:20:39.000
Nó hiển thị cho bạn yêu cầu đã được gửi đến dịch vụ của bạn và phản hồi đã nhận được.

00:20:39.000 --> 00:20:43.000
Có rất nhiều thứ bạn có thể làm với webhooks Xcode Cloud.

00:20:43.000 --> 00:20:46.000
Đây là một vài ví dụ bổ sung.

00:20:46.000 --> 00:21:03.000
Bạn có thể tự động tạo hoặc giải quyết các vấn đề từ hệ thống kiểm tra lỗi của mình; gửi thông báo đến hệ thống phân trang khi bản dựng không thành công; bắt đầu các bản dựng hạ nguồn như một phần của quy trình phát hành phức tạp.

00:21:03.000 --> 00:21:11.000
Khi nói đến việc mở rộng quy trình làm việc của bạn bằng cách sử dụng nội dung đầy đủ của webhook, bầu trời là giới hạn.

00:21:11.000 --> 00:21:14.000
Hãy tóm tắt lại những gì chúng ta đã học được trong phiên này.

00:21:14.000 --> 00:21:18.000
Đầu tiên, chúng tôi đã học về cách chuyển các biến môi trường cho bản dựng của bạn.

00:21:18.000 --> 00:21:28.000
Sau đó, chúng tôi đã trình bày cách thiết lập các tập lệnh để tùy chỉnh quy trình xây dựng của bạn và cách làm việc với các kho lưu trữ bổ sung trong dự án của bạn.

00:21:28.000 --> 00:21:36.000
Cuối cùng, chúng tôi đã học cách thiết lập webhooks để nhận cuộc gọi lại từ Xcode Cloud ở các giai đoạn khác nhau của vòng đời xây dựng.

00:21:36.000 --> 00:21:40.000
Chúng tôi hy vọng những tính năng này có thể nâng cao quy trình làm việc hàng ngày của nhóm bạn.

00:21:40.000 --> 00:21:41.000
Cảm ơn bạn đã xem.

00:21:41.000 --> 23:59:59.000
♪

