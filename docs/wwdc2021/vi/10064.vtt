WEBVTT

00:00:02.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
Xin chào.

00:00:10.000 --> 00:00:23.000
Tôi là David Duncan, và với đồng nghiệp của tôi, Eric Dudiak, chúng ta sẽ thảo luận về tất cả các cách mà UIKit làm cho các nút tốt hơn trong iOS 15.

00:00:23.000 --> 00:00:28.000
Nút khiêm tốn, một yếu tố chính của các ứng dụng lớn và nhỏ.

00:00:28.000 --> 00:00:33.000
Các nút có lẽ là cách phổ biến nhất để thu hút đầu vào của người dùng.

00:00:33.000 --> 00:00:44.000
Các nút có nhiều dạng: lớn và nhỏ; với hình ảnh, văn bản hoặc cả hai; có và không có nền; và mọi màu sắc của cầu vồng.

00:00:44.000 --> 00:00:49.000
Hãy bắt đầu bằng cách tập trung vào một vài phong cách cụ thể.

00:00:49.000 --> 00:00:56.000
Trong iOS 15, UIKit hiện cung cấp bốn phong cách cơ bản này.

00:00:56.000 --> 00:01:06.000
Thêm vào phong cách đơn giản mà bạn đã biết và yêu thích là phong cách mới màu xám, nhuốm màu và đầy đặn.

00:01:06.000 --> 00:01:11.000
Nhưng UIKit không chỉ làm cho các nút trở nên phong cách hơn trong iOS 15.

00:01:11.000 --> 00:01:14.000
Nó cũng làm cho chúng mạnh hơn.

00:01:14.000 --> 00:01:22.000
Kiểu động hiện được hỗ trợ theo mặc định và hỗ trợ văn bản nhiều dòng được tích hợp vào hệ thống nút.

00:01:22.000 --> 00:01:33.000
Khả năng tiếp cận đã được nâng cao với sự hỗ trợ tốt hơn cho tất cả các tính năng trợ năng cũng như tạo ra các nút dễ tiếp cận hơn theo mặc định.

00:01:33.000 --> 00:01:41.000
Và với tất cả các tính năng mới này, các nút có thể tùy chỉnh nhiều hơn bao giờ hết, vì vậy bạn có thể có được chính xác phong cách bạn muốn.

00:01:41.000 --> 00:01:51.000
Vì vậy, với mồi đó, hãy gặp UIButtonConfiguration, điểm vào của hệ thống nút mới.

00:01:51.000 --> 00:01:59.000
Chào mừng đến với Button Emporium, nhà cung cấp hàng đầu về các nút ở mọi hình dạng và kích cỡ.

00:01:59.000 --> 00:02:07.000
Button Emporium luôn muốn có các nút tốt nhất, vì vậy hãy cập nhật ứng dụng để áp dụng UIButtonConfiguration...

00:02:07.000 --> 00:02:12.000
Bắt đầu với nút Đăng nhập quan trọng nhất.

00:02:12.000 --> 00:02:21.000
Hiện tại ứng dụng tạo ra một nút Đăng nhập với mã này, tạo ra một nút hệ thống đơn giản với tiêu đề "Đăng nhập".

00:02:21.000 --> 00:02:29.000
Nhưng đây là một nút siêu quan trọng, vì vậy hãy làm cho nó nổi bật hơn bằng cách sử dụng kiểu đầy mới.

00:02:29.000 --> 00:02:31.000
Và chúng ta đã hoàn thành!

00:02:31.000 --> 00:02:49.000
Thật dễ dàng để bắt đầu với UIButtonConfiguration, vì UIButton tự động tích hợp các tiêu đề và hình ảnh được đặt với API hiện có trên các cấu hình bạn cung cấp, giúp bạn dễ dàng cập nhật kiểu nút của mình mà không cần cập nhật tất cả mã của bạn cùng một lúc.

00:02:49.000 --> 00:02:57.000
Nhưng khi bạn đã sẵn sàng cập nhật mã của mình, có rất nhiều thứ để UIButtonConfiguration hơn là chỉ các kiểu.

00:02:57.000 --> 00:03:01.000
Hãy cùng xem xét điều đó tiếp theo.

00:03:01.000 --> 00:03:04.000
Đây là nút "Thêm vào giỏ hàng" hiện tại của chúng tôi.

00:03:04.000 --> 00:03:17.000
Đó là một nút khá cơ bản ngay bây giờ, nhưng chúng tôi sẽ tận dụng các tính năng mới được cung cấp bởi UIButtonConfiguration để tăng tốc trải nghiệm mua nút.

00:03:17.000 --> 00:03:23.000
Để bắt đầu, chúng tôi sẽ sử dụng kiểu nhuốm màu vì nó bổ sung cho các nút khác của chúng tôi.

00:03:23.000 --> 00:03:31.000
Chúng tôi bắt đầu bằng cách tạo một cấu hình nút màu, đặt tiêu đề của nó, phù hợp với cách chúng tôi đã định cấu hình nút của mình trước đây.

00:03:31.000 --> 00:03:36.000
Tiếp theo chúng tôi tạo nút với cấu hình đã điền của chúng tôi.

00:03:36.000 --> 00:03:41.000
Đây đã là một cải tiến khá lớn, nhưng hãy đưa nó lên hàng đầu.

00:03:41.000 --> 00:03:50.000
Cải tiến tiếp theo mà chúng tôi sẽ thực hiện là thêm một hình ảnh vào nút, giúp đơn giản hơn trong việc xác định những gì nó làm trong nháy mắt.

00:03:50.000 --> 00:04:04.000
Nhà thiết kế của chúng tôi thực sự muốn hình ảnh ở vị trí cuối, vì vậy bên cạnh việc đặt thuộc tính hình ảnh, chúng tôi cũng đặt thuộc tính imagePlacement, đặt hình ảnh chính xác ở nơi chúng tôi muốn.

00:04:04.000 --> 00:04:10.000
Nhưng có hai tính năng nữa mà chúng tôi muốn thêm vào nút "Thêm vào giỏ hàng" mới của mình.

00:04:10.000 --> 00:04:21.000
Đầu tiên là xem trước những gì xảy ra khi bạn đặt hàng nhiều mặt hàng, tính năng này sẽ sử dụng tính năng phụ đề của UIButtonConfiguration.

00:04:21.000 --> 00:04:29.000
Thứ hai là chuyển từ hình ảnh được phác thảo sang phiên bản đầy của nó khi nhấn nút.

00:04:29.000 --> 00:04:34.000
Để làm được điều đó, chúng ta cần cập nhật thuộc tính hình ảnh vào thời điểm thích hợp.

00:04:34.000 --> 00:04:43.000
Để cập nhật nút một cách chính xác khi một trong hai thay đổi này xảy ra, chúng tôi sẽ thêm một configurationUpdateHandler.

00:04:43.000 --> 00:04:52.000
ConfigurationUpdateHandler được gọi khi nút cần cập nhật, cho phép bạn thực hiện các thay đổi tập trung.

00:04:52.000 --> 00:05:04.000
Thông thường bạn sẽ thay đổi cấu hình của nút, vì vậy nó thường bắt đầu bằng cách lấy cấu hình bắt đầu và kết thúc bằng việc cài đặt cấu hình đã thay đổi.

00:05:04.000 --> 00:05:13.000
Ở đây chúng ta bắt đầu với cấu hình hiện có của nút, nhưng bạn có thể dễ dàng tạo một cái mới và thay vào đó điền vào tất cả các thông số của nó.

00:05:13.000 --> 00:05:17.000
Đầu tiên hãy đặt hình ảnh chính xác cho nút.

00:05:17.000 --> 00:05:25.000
Khi nhấn nút, isHighlighted trả về true và chúng tôi đặt phiên bản đã điền của biểu tượng giỏ hàng của mình.

00:05:25.000 --> 00:05:29.000
Nếu không, chúng tôi sử dụng phiên bản được phác thảo.

00:05:29.000 --> 00:05:40.000
Vì isHighlighted là trạng thái của UIButton, nó tự động sắp xếp để configurationUpdateHandler được gọi khi giá trị đó thay đổi.

00:05:40.000 --> 00:05:46.000
Tiếp theo, chúng tôi cập nhật phụ đề khi itemQuantityDescription thay đổi.

00:05:46.000 --> 00:05:50.000
Nhưng itemQuantityDescription không phải là một thuộc tính của UIButton.

00:05:50.000 --> 00:05:58.000
Làm thế nào để chúng ta sắp xếp để configurationUpdateHandler được gọi khi giá trị thay đổi?

00:05:58.000 --> 00:06:07.000
Khi khách hàng thay đổi số lượng nút cần mua, ứng dụng sẽ cập nhật itemQuantityDescription.

00:06:07.000 --> 00:06:27.000
Để đảm bảo rằng nút Thêm vào giỏ hàng cũng cập nhật, trình xử lý didSet của chúng tôi gọi setNeedsUpdateConfiguration, từ đó sắp xếp để trình xử lý cấu hìnhUpdate được gọi và kích hoạt cập nhật nút.

00:06:27.000 --> 00:06:36.000
Tại Button Emporium, chúng tôi chưa bao giờ gặp một nút nào mà chúng tôi không thích và với UIButtonConfiguration, có rất nhiều thứ để thích.

00:06:36.000 --> 00:06:42.000
Trước khi chúng tôi cập nhật nút tiếp theo, hãy nhanh chóng đề cập đến một số tính năng khác.

00:06:42.000 --> 00:06:50.000
Các nút hiện có thể hiển thị chỉ báo hoạt động, giúp dễ dàng cung cấp phản hồi rằng ứng dụng của bạn đang bận.

00:06:50.000 --> 00:07:01.000
Chỉ cần đặt showsActivityIndicator thành true trong cấu hình nút của bạn và chúng tôi sẽ hiển thị chỉ báo, thay thế hình ảnh nếu cần.

00:07:01.000 --> 00:07:11.000
Việc điều chỉnh các khía cạnh của bố cục nút rất đơn giản, giúp bạn kiểm soát nhiều hơn cách định vị nội dung trong nút.

00:07:11.000 --> 00:07:24.000
Tại đây bạn có thể thấy cách contentInsets dành không gian trên các cạnh của nút và imagePadding và titlePadding cho phép chúng tôi tăng không gian giữa các yếu tố đó.

00:07:24.000 --> 00:07:38.000
Và trong khi UIKit sẽ tự động bố trí các thành phần này, bạn có quyền kiểm soát cách các tiêu đề căn chỉnh với nhau cũng như cách nội dung của nút căn chỉnh bên trong khu vực nội dung.

00:07:38.000 --> 00:07:47.000
Kiểu dáng ngữ nghĩa giúp việc tạo các nút với phong cách gắn kết trở nên đơn giản mà không cần phải đào sâu vào chi tiết.

00:07:47.000 --> 00:08:11.000
Bắt đầu với một nút được điền đơn giản, chúng tôi định cấu hình baseBackgroundColor, baseForegroundColor, cornerStyle và buttonSize để tạo một nút tùy chỉnh và bạn sẽ tự động nhận được các trạng thái theo chủ đề, chẳng hạn như nhấn và tắt mà không cần nỗ lực thêm.

00:08:11.000 --> 00:08:27.000
Nhưng ngay cả với nhiều tự động hóa, vẫn dễ dàng thực hiện các tùy chỉnh chi tiết cho những thời điểm mà bạn chỉ cần có chính xác những gì bạn cần, như với nút "Thanh tra" quan trọng nhất của chúng tôi.

00:08:27.000 --> 00:08:35.000
Để đảm bảo rằng khách hàng của Button Emporium có thể nhận được các nút của họ với ít phiền phức nhất, nút thanh toán rất lớn và dễ tìm.

00:08:35.000 --> 00:08:45.000
Để xây dựng nó, chúng ta sẽ bắt đầu với kiểu điền, đặt kích thước của nó thành lớn và điền vào hình ảnh và tiêu đề của nó.

00:08:45.000 --> 00:08:52.000
Khi nhấn nút, chúng tôi bắt đầu xử lý giỏ hàng và muốn hiển thị chỉ báo hoạt động.

00:08:52.000 --> 00:09:02.000
Để kích hoạt điều này, chúng tôi thêm một configurationUpdateHandler để quản lý thuộc tính showsActivityIndicator của cấu hình.

00:09:02.000 --> 00:09:17.000
Cũng giống như trước đây, các thay đổi đối với thuộc tính isCartBusy sẽ gọi setNeedsUpdateConfiguration trên nút thanh toán để đảm bảo chỉ báo hoạt động được bật và tắt khi cần thiết.

00:09:17.000 --> 00:09:22.000
Và trong khi màu xanh là tốt, chúng tôi muốn đảm bảo để lại ấn tượng.

00:09:22.000 --> 00:09:32.000
Vì vậy, để đảm bảo màu sắc chính xác của chúng tôi được sử dụng cho nền, hãy đặt Màu nền của UIButtonConfiguration's UIBackgroundConfiguration.

00:09:32.000 --> 00:09:35.000
Điều đó tốt hơn nhiều.

00:09:35.000 --> 00:09:46.000
Bây giờ chúng ta đã thảo luận về cách UIButtonConfiguration có thể làm cho các nút của bạn trông đẹp hơn bao giờ hết, tôi sẽ giao nó cho Eric để nói về những điều mới khác mà các nút có thể làm.

00:09:46.000 --> 00:09:48.000
Cảm ơn, David.

00:09:48.000 --> 00:09:56.000
Bây giờ chúng ta đã kiểm tra cách các nút có thể tùy chỉnh giao diện của chúng, hãy kiểm tra xem các nút có thể tùy chỉnh chức năng của chúng như thế nào.

00:09:56.000 --> 00:10:03.000
Hầu hết các nút chỉ là các nút nhấn đơn giản, nhưng đôi khi một nút cần thêm một chút hành vi.

00:10:03.000 --> 00:10:07.000
Cái đầu tiên chúng ta sẽ kiểm tra là nút chuyển đổi.

00:10:07.000 --> 00:10:11.000
Các nút này giữ nguyên trạng thái đã chọn từ UIControl.

00:10:11.000 --> 00:10:16.000
Họ tự động bật và tắt nó mỗi khi nhấn nút.

00:10:16.000 --> 00:10:21.000
Nó cũng có thể được thay đổi theo chương trình khi cần thiết.

00:10:21.000 --> 00:10:34.000
Ngoài các kiểu tích hợp cho các trạng thái bật và tắt, chúng ta có thể tận dụng Cấu hình UIButton để tùy chỉnh bản trình bày của các trạng thái bật và tắt này.

00:10:34.000 --> 00:10:37.000
Khái niệm về các nút chuyển đổi trên iOS không phải là mới.

00:10:37.000 --> 00:10:44.000
Bạn có thể đã nhận thấy một số nút như nút lời bài hát trong ứng dụng Nhạc.

00:10:44.000 --> 00:10:50.000
Nó bật và tắt lời bài hát trong trình phát như thế này.

00:10:50.000 --> 00:10:59.000
Về mặt chức năng, cái này hoạt động giống như UISwitch, nhưng nó tiết kiệm một số dung lượng trong giao diện người dùng và nó phù hợp với thiết kế của ứng dụng hơn nhiều.

00:10:59.000 --> 00:11:05.000
Các nút chuyển đổi cũng hoạt động trên UIBarButtonItems như thế này trong Lịch.

00:11:05.000 --> 00:11:10.000
Ở thanh trên cùng, chi tiết trong ngày có thể được bật và tắt.

00:11:10.000 --> 00:11:14.000
Đẩy nó sẽ chuyển đổi màn hình hiển thị các chi tiết.

00:11:14.000 --> 00:11:23.000
Trong trường hợp này, có một thuộc tính được chọn mới trên UIBarButtonItem có thể được đọc hoặc đặt cho trạng thái đã chọn.

00:11:23.000 --> 00:11:28.000
Bây giờ hãy cập nhật Button Emporium để áp dụng các nút chuyển đổi.

00:11:28.000 --> 00:11:32.000
Ứng dụng của chúng tôi cho phép chúng tôi duyệt các loại nút mà chúng tôi muốn mua.

00:11:32.000 --> 00:11:36.000
Nhưng trong khi duyệt, tôi chỉ muốn xem xét những gì hiện có trong kho.

00:11:36.000 --> 00:11:44.000
Ở đây, chúng tôi đã thêm một nút chuyển đổi để chuyển đổi giữa hiển thị hoàn toàn mọi thứ và chỉ những gì có trong kho và sẵn sàng giao hàng.

00:11:44.000 --> 00:11:46.000
Đây là một cách sử dụng tuyệt vời của nút chuyển đổi.

00:11:46.000 --> 00:11:54.000
Một lợi thế là, vì nó là một nút, nhãn là một phần của nó, làm cho nó rất rõ ràng những gì đang được chuyển đổi ở đây.

00:11:54.000 --> 00:11:57.000
Vậy hãy kiểm tra xem chúng ta đã làm điều đó như thế nào.

00:11:57.000 --> 00:12:01.000
Ở đây, chúng tôi có những điều cơ bản về thiết lập một nút.

00:12:01.000 --> 00:12:06.000
Để biến nó thành một nút chuyển đổi, chúng tôi chỉ cần đặt changesSelectionAsPrimaryAction thành true.

00:12:06.000 --> 00:12:08.000
Bây giờ nó là một nút chuyển đổi.

00:12:08.000 --> 00:12:11.000
Thế là xong.

00:12:11.000 --> 00:12:16.000
Chúng tôi cũng có thể đặt trạng thái đã chọn để phù hợp với mô hình nội bộ của chúng tôi.

00:12:16.000 --> 00:12:22.000
Bây giờ, chúng ta có thể muốn một cái gì đó phức tạp hơn một chút mà chỉ cần hai trạng thái bật và tắt.

00:12:22.000 --> 00:12:28.000
Đối với các nút có thể có nhiều tùy chọn hơn để chuyển đổi giữa, chúng ta có thể sử dụng các nút bật lên.

00:12:28.000 --> 00:12:34.000
Các nút bật lên gần giống với các nút kéo xuống, vốn đã tồn tại trong iOS.

00:12:34.000 --> 00:12:37.000
Những thứ này trình bày một thực đơn khi được nhấn.

00:12:37.000 --> 00:12:46.000
Các nút bật lên tiến thêm một bước nữa và đảm bảo rằng một và chỉ một trong các yếu tố menu được chọn.

00:12:46.000 --> 00:12:50.000
Họ cũng cho thấy lựa chọn hiện tại đó là tiêu đề và hình ảnh của họ.

00:12:50.000 --> 00:12:54.000
Xây dựng nút bật lên thực sự là một phần mở rộng của việc xây dựng nút kéo xuống.

00:12:54.000 --> 00:12:57.000
Đối với những người đó, một menu được gán cho nút.

00:12:57.000 --> 00:13:04.000
Để biến menu thành hành động mặc định, thuộc tính showsMenuAsPrimaryAction được đặt thành true.

00:13:04.000 --> 00:13:11.000
Các nút bật lên tiến thêm một bước nữa bằng cách chỉ cần bật thuộc tính changesSelectionAsPrimaryAction.

00:13:11.000 --> 00:13:13.000
Đó là tất cả những gì nó cần.

00:13:13.000 --> 00:13:20.000
Chúng hoạt động giống như UISegmentedControl nhưng có thể hữu ích khi có nhiều lựa chọn hơn mức có thể phù hợp với điều khiển được phân đoạn.

00:13:20.000 --> 00:13:26.000
Chúng cũng có thể hữu ích cho các trường hợp mà các lựa chọn có hệ thống phân cấp vốn có.

00:13:26.000 --> 00:13:30.000
Một số ví dụ về kiểu nút này tồn tại ngày nay.

00:13:30.000 --> 00:13:36.000
Ví dụ, ứng dụng Điện thoại sử dụng nút bật lên để chuyển đổi giữa các SIM cho các cuộc gọi đi.

00:13:36.000 --> 00:13:39.000
Và ở đây nút trình bày một thực đơn.

00:13:39.000 --> 00:13:42.000
Chọn công tắc thứ cấp đường dây.

00:13:42.000 --> 00:13:47.000
Kết quả là, nút được cập nhật lên dòng đi mới.

00:13:47.000 --> 00:13:52.000
Nhãn và hình ảnh đã được cập nhật để hiển thị lựa chọn mới.

00:13:52.000 --> 00:13:56.000
Tương tự, chúng tôi có một số cách sử dụng cho việc này trong Button Emporium.

00:13:56.000 --> 00:14:00.000
Khi chúng tôi duyệt các nút, chúng tôi có một số nút có nhiều màu sắc khác nhau.

00:14:00.000 --> 00:14:11.000
Số lượng màu sắc là một bộ cố định để lựa chọn, nhưng có lẽ quá lớn đối với một điều khiển được phân đoạn, nhưng nó cũng đủ nhỏ để chúng tôi thực sự muốn thay đổi nó trong dòng.

00:14:11.000 --> 00:14:16.000
Đây là một cách sử dụng tuyệt vời của nút bật lên vì chúng tôi muốn lựa chọn là tiêu đề của nút.

00:14:16.000 --> 00:14:23.000
Sau đó chúng ta có thể trình bày tất cả các lựa chọn màu sắc.

00:14:23.000 --> 00:14:28.000
Và trên một lựa chọn mới, ứng dụng của chúng tôi chỉ có thể cập nhật cho lựa chọn màu sắc.

00:14:28.000 --> 00:14:31.000
Hãy điều tra mã cho điều đó.

00:14:31.000 --> 00:14:37.000
Ở đây chúng tôi thực sự có mã để tạo một menu kéo xuống đơn giản mà chúng tôi có thể cập nhật.

00:14:37.000 --> 00:14:42.000
Cũng giống như nút chuyển đổi, chúng tôi chuyển changesSelectionAsPrimaryAction sang true.

00:14:42.000 --> 00:14:45.000
Và bây giờ nó là một nút bật lên.

00:14:45.000 --> 00:14:57.000
Nếu chúng ta muốn có một màu cụ thể là lựa chọn mặc định thay vì chỉ màu đầu tiên trong danh sách, chúng ta có thể chỉ định trước màu đó để "bật" khi chúng ta đặt menu.

00:14:57.000 --> 00:15:01.000
Điều đó sẽ làm cho nó trở thành lựa chọn mặc định.

00:15:01.000 --> 00:15:11.000
Chúng ta có thể kiểm tra lựa chọn bằng cách hỏi menu của nút cho các Yếu tố được chọn hiện tại, phần tử này sẽ luôn có chính xác một phần tử duy nhất.

00:15:11.000 --> 00:15:20.000
Và nếu chúng ta cần đặt một cái mới trong mã, chúng ta chỉ có thể thay đổi trạng thái trên phần tử từ thuộc tính menu của nút.

00:15:20.000 --> 00:15:32.000
Các nút bật lên cũng có thể được tạo trong Trình tạo giao diện, nhưng trong trường hợp này, chúng tôi sẽ muốn truy xuất màu động từ máy chủ thay vì sử dụng danh sách cố định, vì vậy chúng tôi sẽ làm điều đó bằng mã.

00:15:32.000 --> 00:15:43.000
Để tìm hiểu thêm về cách sử dụng hệ thống nút mới và các loại nút với Trình tạo giao diện, hãy xem video "Xây dựng giao diện theo phong cách".

00:15:43.000 --> 00:15:49.000
Một trong những phần tốt nhất của các loại nút mới này là chúng tự động hoạt động trên Mac Catalyst.

00:15:49.000 --> 00:15:56.000
Người dùng Mac mong đợi các nút trông và hoạt động theo một cách nhất định, bao gồm các nút kéo xuống, cửa sổ bật lên và nút chuyển đổi.

00:15:56.000 --> 00:16:02.000
Với các nút iOS này, chúng sẽ tự động được cập nhật lên phiên bản Mac của chúng.

00:16:02.000 --> 00:16:17.000
Vì vậy, ở đây chúng tôi có một lựa chọn các nút từ ứng dụng iPad, giống như chúng tôi đã sử dụng trong suốt bản trình bày, bao gồm các nút không viền mặc định và một số nút sử dụng cấu hình mới cũng như các nút bật lên và kéo xuống.

00:16:17.000 --> 00:16:21.000
Và ở đây họ không có thay đổi thủ công nào trên Mac Catalyst.

00:16:21.000 --> 00:16:24.000
Đúng như cách mà một người dùng Mac dày dạn kinh nghiệm mong đợi.

00:16:24.000 --> 00:16:31.000
Chúng tôi nhận được các nút viền tiêu chuẩn, bao gồm các chỉ báo Mac cho các nút kéo xuống và bật lên.

00:16:31.000 --> 00:16:40.000
Tuy nhiên, trong một số trường hợp, việc tùy chỉnh thêm các nút iPad có thể phù hợp hơn ngay cả đối với ứng dụng Mac.

00:16:40.000 --> 00:16:47.000
Đối với điều đó, nút hỗ trợ thay đổi kiểu hành vi từ mặc định là tự động sang iPad.

00:16:47.000 --> 00:16:54.000
Điều này rất hữu ích cho các nút tùy chỉnh, rất nổi bật trong một ứng dụng, như nút thanh toán mà chúng tôi đã thực hiện trước đó.

00:16:54.000 --> 00:17:02.000
Để biết thêm thông tin về việc xây dựng và tùy chỉnh các ứng dụng Mac Catalyst, hãy xem video "Có gì mới trong Mac Catalyst".

00:17:02.000 --> 00:17:12.000
Như bạn có thể nhận thấy trong các ví dụ về nút bật lên, phần lớn chức năng được xây dựng dựa trên các tính năng mới và hiện có của UIMenu.

00:17:12.000 --> 00:17:20.000
UIMenu kết hợp rất tốt với UIButton và UIBarButtonItem cho nhiều tương tác tuyệt vời.

00:17:20.000 --> 00:17:26.000
Chúng tôi đã khám phá cách bạn có thể điều chỉnh hành vi của các nút để tạo cả nút bật lên và nút kéo xuống.

00:17:26.000 --> 00:17:40.000
Trên iOS và iPadOS, những hành vi này độc lập với các tùy chỉnh trực quan, vì vậy bạn có thể dễ dàng kết hợp chúng với UIButtonConfiguration để tạo ra nhiều kiểu nút khác nhau.

00:17:40.000 --> 00:17:49.000
Các nút này cũng được hưởng lợi từ những cải tiến trong menu như khả năng các mục menu có phụ đề rõ ràng hơn.

00:17:49.000 --> 00:17:58.000
Trên hết, điều hướng menu con trên iOS và iPadOS cũng đã được cải thiện, cho phép tạo ra các hệ thống phân cấp trong một menu.

00:17:58.000 --> 00:18:05.000
Và trong một số trường hợp, bạn có thể muốn menu con của nút kéo xuống hoạt động như một menu lựa chọn duy nhất.

00:18:05.000 --> 00:18:11.000
Ví dụ, điều này có thể hữu ích nếu bạn có menu "sắp xếp theo" trong menu hành động.

00:18:11.000 --> 00:18:16.000
Một số cải tiến menu mới giúp việc tạo ra điều này dễ dàng hơn nhiều.

00:18:16.000 --> 00:18:22.000
Đây là một mục nút thanh kéo xuống tùy chỉnh sử dụng menu con trong mã của chúng tôi.

00:18:22.000 --> 00:18:27.000
Nó có một vài hành động và sau đó là một menu con để sắp xếp kết quả.

00:18:27.000 --> 00:18:36.000
Thay vì bật và tắt các mục menu theo cách thủ công trong menu con đó, chúng tôi sẽ chỉ ra rằng menu con này dành cho một lựa chọn duy nhất khi chúng tôi tạo nó.

00:18:36.000 --> 00:18:44.000
Bây giờ nó nhận được cùng một hành vi lựa chọn tự động mà các nút bật lên nhận được nhưng chỉ trong menu con.

00:18:44.000 --> 00:18:51.000
Chỉ một phần tử được chọn sẽ được cho phép và phần tử được chọn sẽ được cập nhật khi người dùng nhấn vào nó.

00:18:51.000 --> 00:18:58.000
Nó có thể được cập nhật hoặc truy cập bằng mã theo cách chính xác như cách chúng tôi đã làm trước đó với menu bật lên.

00:18:58.000 --> 00:19:03.000
Và hành vi lựa chọn đơn hoạt động nếu menu có menu con riêng.

00:19:03.000 --> 00:19:08.000
Chỉ một phần tử trong toàn bộ cây con sau đó có thể được chọn tại một thời điểm.

00:19:08.000 --> 00:19:20.000
Và thuộc tính selectedElements bao gồm lựa chọn trong menu con, giúp việc truy cập dễ dàng như thể chúng ta không có menu con.

00:19:20.000 --> 00:19:22.000
Vì vậy, đó là cách tạo các nút tốt hơn trong ứng dụng của bạn.

00:19:22.000 --> 00:19:33.000
Thêm cấu hình vào các nút để kiểm soát nhiều hơn kiểu dáng để mở khóa kiểu dáng phong phú hơn nhiều trong khi vẫn nhất quán với nền tảng.

00:19:33.000 --> 00:19:42.000
Đồng thời khám phá các cách để thay thế các giao diện hoặc điều khiển chọn hiện có bằng các nút bật lên hoặc chuyển đổi để có được các tương tác hợp lý hơn.

00:19:42.000 --> 00:19:48.000
Với những thay đổi này, bạn có thể sẽ tìm thấy các lớp con UIButton có thể được xóa hoặc đơn giản hóa.

00:19:48.000 --> 00:19:56.000
Và bởi vì hệ thống có thể hiểu rõ hơn về các nút của bạn, bạn sẽ tự động nhận được chuyển đổi Mac Catalyst tốt hơn nhiều.

00:19:56.000 --> 00:20:01.000
Cảm ơn bạn đã tham gia cùng chúng tôi, và tôi hy vọng bạn thích đi sâu vào thế giới của các nút bấm.

00:20:01.000 --> 23:59:59.000
[Nhạc lạc quan].

