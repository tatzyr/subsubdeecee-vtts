WEBVTT

00:00:02.000 --> 00:00:13.000
Xin chào và chào mừng đến với WWDC.

00:00:13.000 --> 00:00:17.000
Tôi là Jeremy Goldman, một kỹ sư trong nhóm XCTest.

00:00:17.000 --> 00:00:25.000
Trong phiên này, chúng ta sẽ khám phá một số cách mới thú vị để tương tác với các thiết bị từ UI Tests trong Xcode 13.

00:00:25.000 --> 00:00:39.000
Đặc biệt, chúng tôi sẽ tập trung vào ba tương tác mới trên ba nền tảng khác nhau: Con trỏ iPadOS, Vương miện kỹ thuật số watchOS và bàn di chuột macOS.

00:00:39.000 --> 00:00:42.000
Hãy bắt đầu với Con trỏ iPadOS.

00:00:42.000 --> 00:00:54.000
Trong iPadOS 13.4, Apple đã giới thiệu hỗ trợ chuột và bàn di chuột, cung cấp cho người dùng một cách hoàn toàn mới để tương tác với iPad, sử dụng các phụ kiện như Bàn phím ma thuật.

00:00:54.000 --> 00:01:03.000
Nhiều nhà phát triển đã tận dụng tối đa điều này bằng cách thêm hành vi và tương tác dành riêng cho con trỏ vào ứng dụng iPad của họ, như hoạt ảnh di chuột tùy chỉnh.

00:01:03.000 --> 00:01:11.000
Trong Xcode 13, chúng tôi đang cung cấp một API mới mạnh mẽ để kiểm soát Con trỏ iPadOS trong các bài kiểm tra giao diện người dùng.

00:01:11.000 --> 00:01:25.000
API này sẽ cho phép bạn tạo các bài kiểm tra tự động mạnh mẽ cho nhiều loại tương tác con trỏ trong các ứng dụng iPad của bạn và sẽ có sẵn để sử dụng với các thiết bị chạy iPadOS 15 trở lên.

00:01:25.000 --> 00:01:28.000
Hãy kiểm tra API mới này chi tiết hơn.

00:01:28.000 --> 00:01:37.000
Đầu tiên, chúng tôi đang thêm một thuộc tính mới trên XCUIDevice để cho biết liệu một thiết bị có hỗ trợ tương tác con trỏ hay không.

00:01:37.000 --> 00:01:49.000
Tiếp theo, chúng tôi sẽ thêm các phương pháp mới trên XCUIElement để thực hiện các tương tác con trỏ khác nhau, như di chuột, nhiều loại nhấp chuột và cuộn hai ngón tay.

00:01:49.000 --> 00:02:00.000
Chúng tôi cũng đang thêm các phương thức cho các trường hợp sử dụng nhấp và kéo nâng cao hơn cũng như một phương thức lớp để thực thi các khối mã với một hoặc nhiều khóa sửa đổi được giữ lại.

00:02:00.000 --> 00:02:06.000
Các phương pháp này cũng có sẵn trên XCUICoordinate, nếu yêu cầu độ chính xác bổ sung.

00:02:06.000 --> 00:02:14.000
Hãy cùng khám phá cách các API mới này hoạt động trong thực tế bằng cách tạo Thử nghiệm giao diện người dùng mới cho tương tác con trỏ trong ứng dụng iOS.

00:02:14.000 --> 00:02:20.000
Trong bản demo này, tôi sẽ sử dụng ứng dụng Fruta, ứng dụng này có thanh bên ban đầu bị ẩn khi khởi chạy.

00:02:20.000 --> 00:02:28.000
Gần đây tôi đã thêm chức năng dành riêng cho con trỏ trên iPad, trong đó thao tác vuốt bàn di chuột hai ngón tay nằm ngang sẽ mở thanh bên.

00:02:28.000 --> 00:02:31.000
Hãy thêm một bài kiểm tra giao diện người dùng cho điều đó.

00:02:31.000 --> 00:02:38.000
Ở đây tôi có một lớp Kiểm tra giao diện người dùng trống, đó là nơi tôi sẽ thêm Bài kiểm tra giao diện người dùng mới của mình.

00:02:38.000 --> 00:02:42.000
Hãy nhanh chóng xem qua những gì bài kiểm tra này đang làm.

00:02:42.000 --> 00:02:49.000
Nó bắt đầu bằng cách khởi chạy ứng dụng và sau đó khẳng định rằng thanh bên ban đầu không xuất hiện khi khởi chạy.

00:02:49.000 --> 00:02:56.000
Sau đó, nó thực hiện thao tác vuốt bàn di chuột hai ngón tay nằm ngang và khẳng định rằng thanh bên hiện đã có mặt.

00:02:56.000 --> 00:03:02.000
Một điều khác mà tôi muốn chỉ ra là thuộc tính khả dụng này mà tôi đã thêm vào phương pháp kiểm tra.

00:03:02.000 --> 00:03:08.000
Điều này là cần thiết bất cứ khi nào bạn đang sử dụng các phương pháp chỉ có sẵn bắt đầu với một phiên bản iOS cụ thể.

00:03:08.000 --> 00:03:14.000
Trong trường hợp này, các API tương tác con trỏ đã được giới thiệu trong iOS 15.0.

00:03:14.000 --> 00:03:17.000
Hãy thử chạy thử nghiệm trên trình giả lập iPad.

00:03:17.000 --> 00:03:24.000
Bạn có thể theo dõi cùng với chỉ báo con trỏ, đó là vòng tròn tối gần góc dưới cùng bên trái của màn hình.

00:03:24.000 --> 00:03:47.000
Tuyệt vời! Có vẻ như bài kiểm tra của chúng tôi hoạt động trên iPad.

00:03:47.000 --> 00:03:53.000
Tuy nhiên, ứng dụng này cũng có sẵn trên iPhone, không hỗ trợ tương tác con trỏ.

00:03:53.000 --> 00:03:56.000
Hãy thử chạy thử nghiệm này trên trình giả lập iPhone.

00:03:56.000 --> 00:04:18.000
Vì vậy, có vẻ như bài kiểm tra không thành công với thông báo lỗi rằng "Các sự kiện con trỏ không được hỗ trợ trên thiết bị này."

00:04:18.000 --> 00:04:25.000
Để giải quyết vấn đề này, chúng ta cần sửa đổi bài kiểm tra của mình để nó chỉ thực thi trên các thiết bị hỗ trợ tương tác con trỏ.

00:04:25.000 --> 00:04:36.000
Chúng ta có thể làm điều này bằng cách sử dụng XCTSkipUnless với thuộc tính supportsPointerInteraction mới trên XCUIDevice để bỏ qua bài kiểm tra trên các thiết bị không được hỗ trợ, thay vì thất bại.

00:04:36.000 --> 00:04:44.000
Bây giờ hãy thử chạy lại bài kiểm tra trên trình giả lập iPhone.

00:04:44.000 --> 00:04:56.000
Hoàn hảo. Vì vậy, bây giờ bài kiểm tra này sẽ bị bỏ qua trên các thiết bị không hỗ trợ tương tác con trỏ.

00:04:56.000 --> 00:05:05.000
Hãy nói về một số cách mới để tương tác với các thiết bị trên các nền tảng khác, cụ thể hơn là watchOS và Digital Crown.

00:05:05.000 --> 00:05:12.000
Như bạn có thể đã biết, Xcode 12.5 đã giới thiệu hỗ trợ Kiểm tra giao diện người dùng cho các ứng dụng watchOS.

00:05:12.000 --> 00:05:22.000
Hỗ trợ này bao gồm các phương pháp mới có sẵn trên watchOS để tổng hợp các sự kiện cảm ứng cũng như các sự kiện nút phần cứng, như nhấp vào vương miện.

00:05:22.000 --> 00:05:29.000
Trong Xcode 13, chúng tôi đang mở rộng hỗ trợ này với một phương pháp mới để tổng hợp vòng quay Digital Crown.

00:05:29.000 --> 00:05:40.000
Phương pháp này chỉ yêu cầu một tham số, số vòng quay và có tham số vận tốc tùy chọn để chỉ định tốc độ mà vương miện nên được xoay.

00:05:40.000 --> 00:05:55.000
Tham số vận tốc này có loại XCUIGestureVelocity, có nghĩa là bạn có thể sử dụng một trong các giá trị đặt trước, như chậm, nhanh và mặc định hoặc bạn có thể chỉ định giá trị thập phân tùy chỉnh theo vòng quay mỗi giây.

00:05:55.000 --> 00:05:59.000
Hãy xem phương pháp mới này hoạt động như thế nào trong thực tế.

00:05:59.000 --> 00:06:04.000
Giả sử tôi có một ứng dụng thời tiết đơn giản cho watchOS hiển thị nhiệt độ hiện tại bên ngoài.

00:06:04.000 --> 00:06:16.000
Ứng dụng có một tính năng mà người dùng có thể cuộn vương miện kỹ thuật số về phía trước để xem nhiệt độ dự báo vào những thời điểm trong tương lai hoặc cuộn ngược lại để xem nhiệt độ được ghi lại ở những thời điểm trước đây.

00:06:16.000 --> 00:06:22.000
Hãy cùng xem qua Bài kiểm tra giao diện người dùng cơ bản để đảm bảo chức năng xoay vương miện này hoạt động như mong đợi.

00:06:22.000 --> 00:06:30.000
Thử nghiệm bắt đầu bằng cách khởi chạy ứng dụng và sau đó khẳng định rằng nhãn thời gian dự báo ban đầu cho biết Nhiệt độ hiện tại.

00:06:30.000 --> 00:06:38.000
Sau đó, chúng tôi xoay vương miện kỹ thuật số một vòng quay đầy đủ về phía trước và khẳng định nhãn được cập nhật để ghi "Một giờ kể từ bây giờ."

00:06:38.000 --> 00:06:48.000
Sau đó, chúng tôi xoay vương miện hai vòng quay đầy đủ về phía sau và bài kiểm tra kết thúc bằng cách khẳng định rằng nhãn đã cập nhật để ghi "Một giờ trước."

00:06:48.000 --> 00:06:52.000
Cuối cùng, hãy nói về bàn di chuột macOS.

00:06:52.000 --> 00:06:55.000
Cụ thể hơn, hãy tập trung vào việc cuộn.

00:06:55.000 --> 00:07:01.000
Cuộn có thể được chia thành hai loại khác nhau: rời rạc và liên tục.

00:07:01.000 --> 00:07:05.000
Cuộn rời rạc có chuyển động gia tăng chính xác.

00:07:05.000 --> 00:07:09.000
Hãy suy nghĩ về việc xoay bánh xe cuộn trên một con chuột vật lý.

00:07:09.000 --> 00:07:21.000
Nội dung trên màn hình di chuyển theo gia số đồng đều cho mỗi lần đánh dấu trên bánh xe cuộn và chuyển động không quán tính, có nghĩa là nó ngừng di chuyển ngay lập tức khi bạn ngừng xoay bánh xe cuộn.

00:07:21.000 --> 00:07:27.000
Mặt khác, cuộn liên tục hoặc theo từng giai đoạn, có chuyển động trôi chảy và năng động.

00:07:27.000 --> 00:07:30.000
Hình ảnh vuốt bằng hai ngón tay trên bàn di chuột.

00:07:30.000 --> 00:07:42.000
Nội dung trên màn hình cuộn trơn tru trong khi bạn đang vuốt và chuyển động quán tính, có nghĩa là nó tiếp tục di chuyển sau khi bạn nhấc ngón tay lên cho đến khi nó dần dần dừng lại.

00:07:42.000 --> 00:07:51.000
XCTest hiện đang cung cấp một phương pháp cuộn trên macOS cho phép bạn thực hiện cuộn chính xác pixel rời rạc trong các bài kiểm tra giao diện người dùng của mình.

00:07:51.000 --> 00:08:01.000
Phương pháp này yêu cầu hai tham số để chỉ định khoảng cách ngang và dọc chính xác tính bằng pixel để cuộn.

00:08:01.000 --> 00:08:09.000
Trong Xcode 13, chúng tôi đang giới thiệu các phương pháp mới để tổng hợp cuộn liên tục hoặc giống như bàn di chuột trên macOS.

00:08:09.000 --> 00:08:16.000
Các phương pháp này chấp nhận một tham số vận tốc tùy chọn để chỉ định tốc độ mà bạn muốn cuộn.

00:08:16.000 --> 00:08:31.000
Tham số vận tốc này có loại XCUIGestureVelocity có nghĩa là, giống như trong phương pháp rotateDigitalCrown mà chúng tôi đã khám phá trước đó, bạn có thể sử dụng các cài đặt trước hoặc bạn có thể chỉ định giá trị thập phân tùy chỉnh tính bằng pixel mỗi giây.

00:08:31.000 --> 00:08:43.000
Xcode 13 giới thiệu các API trên nhiều nền tảng để cho phép tự động hóa các phương thức đầu vào mới và cung cấp hỗ trợ cho các trường hợp sử dụng chuyên biệt hơn.

00:08:43.000 --> 00:09:00.000
Sử dụng chức năng mới này để tạo Kiểm tra giao diện người dùng cho các tương tác dành riêng cho con trỏ trong ứng dụng iPad của bạn, tự động xoay vương miện kỹ thuật số trong Kiểm tra giao diện người dùng watchOS của bạn và thực hiện cuộn liên tục, giống như bàn di chuột trên macOS với các phương pháp vuốt mới.

00:09:00.000 --> 00:09:05.000
Nếu bạn quan tâm đến việc tìm hiểu thêm, hãy đảm bảo kiểm tra các phiên liên quan này.

00:09:05.000 --> 00:09:09.000
Cảm ơn vì đã xem và tận hưởng phần còn lại của WWDC.

00:09:09.000 --> 23:59:59.000
[Âm nhạc].

