WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Edward: Xin chào, và chào mừng đến với WWDC!

00:00:12.000 --> 00:00:18.000
Tôi là Edward, một kỹ sư trong nhóm Wallet, và sau đó tôi sẽ được tham gia bởi đồng nghiệp của tôi, Russ.

00:00:18.000 --> 00:00:23.000
Chúng tôi rất vui mừng được ở đây hôm nay để nói chuyện với bạn về những gì mới trong Wallet và Apple Pay.

00:00:23.000 --> 00:00:26.000
Hôm nay tôi muốn nói về ba lĩnh vực chính.

00:00:26.000 --> 00:00:33.000
Đầu tiên, tôi muốn chia sẻ một số cập nhật Wallet và cho bạn biết về một số triển khai thú vị mà chúng tôi đã có trong năm ngoái.

00:00:33.000 --> 00:00:36.000
Thứ hai, chúng tôi đã thực hiện rất nhiều cập nhật thú vị cho Apple Pay.

00:00:36.000 --> 00:00:41.000
Chúng tôi cũng đã thêm một số chức năng mới, giúp thanh toán trở nên dễ sử dụng hơn.

00:00:41.000 --> 00:00:46.000
Thứ ba, tôi muốn trải qua một số cải tiến API mới mà chúng tôi đã thực hiện.

00:00:46.000 --> 00:00:50.000
Vì vậy, hãy bắt đầu với một số cập nhật cho Wallet.

00:00:50.000 --> 00:00:55.000
Như bạn có thể đã nghe trong Keynote, chúng tôi sẽ mang chứng minh thư đến Apple Wallet.

00:00:55.000 --> 00:01:02.000
Bắt đầu từ Mỹ, với một vài tiểu bang được chọn, bạn chỉ cần quét bằng lái xe hoặc ID tiểu bang của mình và chụp ảnh tự sướng.

00:01:02.000 --> 00:01:05.000
ID của bạn được bảo vệ bởi Yếu tố Bảo mật.

00:01:05.000 --> 00:01:12.000
TSA đang làm việc để kích hoạt các trạm kiểm soát an ninh sân bay là nơi đầu tiên bạn có thể sử dụng ID kỹ thuật số của mình.

00:01:12.000 --> 00:01:18.000
Để biết thêm thông tin về điều này, hãy xem các liên kết được liên kết với phiên này.

00:01:18.000 --> 00:01:27.000
Cũng mới trong iOS 15, chúng tôi đã thêm hỗ trợ cho các khóa được kết nối HomeKit, vì vậy giờ đây người dùng có thể nhấn để mở khóa cửa bằng thẻ chìa khóa nhà.

00:01:27.000 --> 00:01:32.000
Khi nói đến việc thêm thẻ, chúng tôi biết nhiều người dùng của bạn cài đặt chúng ngay từ web.

00:01:32.000 --> 00:01:39.000
Ví dụ, trong iOS 14, nếu bạn muốn thêm bốn vé xem phim, bạn sẽ thêm chúng riêng lẻ.

00:01:39.000 --> 00:01:45.000
Mới trong năm nay, chúng tôi đã thêm các bản tải xuống multipass từ Safari.

00:01:45.000 --> 00:01:51.000
Với một sự thay đổi đơn giản, bạn có thể kết hợp các thẻ lại với nhau, làm cho trải nghiệm mượt mà cho người dùng của bạn.

00:01:51.000 --> 00:01:55.000
Để làm điều này, bạn sẽ cần phải làm ba điều.

00:01:55.000 --> 00:01:59.000
Đầu tiên, nén các tệp PkPass lại với nhau.

00:01:59.000 --> 00:02:03.000
Thứ hai, đặt phần mở rộng tệp thành .pkpasses.

00:02:03.000 --> 00:02:07.000
Và, cuối cùng, sử dụng đúng loại kịch câm.

00:02:07.000 --> 00:02:14.000
Bây giờ, tất cả các thẻ trong gói sẽ được Wallet tải xuống và xử lý trong một lần tải xuống.

00:02:14.000 --> 00:02:20.000
Và với tất cả những đường chuyền này, đôi khi bạn có thể gặp rắc rối khi theo dõi tất cả chúng.

00:02:20.000 --> 00:02:28.000
Chúng tôi cũng biết rằng nhiều người không thích xóa các thẻ cũ, thay vào đó thích có chúng làm vật kỷ niệm, nhưng điều đó có thể khiến Wallet trở nên lộn xộn.

00:02:28.000 --> 00:02:37.000
Vì vậy, mới trong iOS 15, Wallet giờ đây sẽ tự động ẩn thẻ đã hết hạn của bạn, giữ cho thẻ được sắp xếp và dễ tìm.

00:02:37.000 --> 00:02:41.000
Hãy để tôi chỉ cho bạn một ví dụ về cách bạn có thể tận dụng điều này.

00:02:41.000 --> 00:02:44.000
Ở đây chúng ta thấy một số JSON từ một ví dụ vượt qua.

00:02:44.000 --> 00:02:49.000
Wallet xem xét ba trường để xác định xem một đường chuyền có nên được tự động ẩn hay không.

00:02:49.000 --> 00:02:56.000
Thứ nhất, thẻ có ngày hết hạn cũ hơn ngày hiện tại.

00:02:56.000 --> 00:03:00.000
Hai, ngày liên quan cũ hơn một ngày.

00:03:00.000 --> 00:03:04.000
Hoặc ba, đường chuyền đã bị vô hiệu.

00:03:04.000 --> 00:03:11.000
Để đảm bảo trải nghiệm tuyệt vời cho người dùng của bạn, bạn nên đảm bảo các trường này được đặt chính xác trên thẻ của bạn.

00:03:11.000 --> 00:03:14.000
Bây giờ hãy để tôi kể cho bạn nghe về một số bản cập nhật mà chúng tôi đã thực hiện cho Apple Pay.

00:03:14.000 --> 00:03:21.000
Apple Pay tiếp tục là cách dễ nhất để thanh toán trên iPhone, iPad, Apple Watch và Mac.

00:03:21.000 --> 00:03:25.000
Nó cho phép người dùng thực hiện thanh toán trong các ứng dụng và trên web.

00:03:25.000 --> 00:03:32.000
Apple Pay được hỗ trợ trong iMessage và Business Chat, cũng như trong App Clips để có trải nghiệm hợp lý, ngay lập tức.

00:03:32.000 --> 00:03:36.000
Việc sử dụng Apple Pay trên toàn thế giới tiếp tục phát triển.

00:03:36.000 --> 00:03:46.000
Chúng tôi đã thêm hỗ trợ ở Mexico, Israel và Nam Phi trong năm nay, có nghĩa là Apple Pay hiện đã có mặt ở 55 quốc gia và khu vực trên toàn cầu.

00:03:46.000 --> 00:03:50.000
Chúng tôi đã thêm hỗ trợ cho Express Transit ở nhiều địa điểm hơn.

00:03:50.000 --> 00:03:55.000
Và, chúng tôi đã bao gồm hỗ trợ cho thẻ tín dụng và thẻ ghi nợ kết hợp ở những nơi như Brazil.

00:03:55.000 --> 00:04:02.000
Bây giờ, tôi muốn cho bạn thấy một vài thay đổi mà bạn có thể thực hiện đối với các ứng dụng và trang web của mình để tạo ra trải nghiệm thanh toán tuyệt vời.

00:04:02.000 --> 00:04:10.000
Năm ngoái, chúng tôi đã thêm hỗ trợ cho nhiều loại nút hơn như Thuê bằng Apple Pay và Nạp tiền bằng Apple Pay.

00:04:10.000 --> 00:04:15.000
Hôm nay chúng tôi sẽ giới thiệu thêm một cái nữa: Tiếp tục với Apple Pay.

00:04:15.000 --> 00:04:20.000
Bạn nên sử dụng nút này khi cung cấp Apple Pay trong giỏ hàng cùng với các nút khác.

00:04:20.000 --> 00:04:23.000
Bạn có thể sử dụng Tiếp tục như một lời kêu gọi hành động.

00:04:23.000 --> 00:04:28.000
Chúng tôi cũng đang giới thiệu một triển khai JavaScript mới cho nút Apple Pay.

00:04:28.000 --> 00:04:31.000
Nút mới này hỗ trợ tất cả các loại và kiểu nút hiện tại.

00:04:31.000 --> 00:04:36.000
Nó rất dễ thực hiện và có thể được tùy chỉnh để phù hợp với thiết kế trang web của bạn.

00:04:36.000 --> 00:04:38.000
Đây là một ví dụ triển khai.

00:04:38.000 --> 00:04:42.000
Như bạn có thể thấy, kích thước và kiểu nút có thể được cấu hình dễ dàng.

00:04:42.000 --> 00:04:46.000
Lưu ý rằng các kiểu được đặt trước bằng "apple-pay".

00:04:46.000 --> 00:04:52.000
Để biết thêm thông tin về điều này, hãy xem tài liệu trên Cổng thông tin dành cho nhà phát triển Apple.

00:04:52.000 --> 00:04:58.000
Tiếp theo, tôi muốn cho bạn thấy những thay đổi lớn mà chúng tôi đã thực hiện đối với Apple Pay cho iPhone và iPad.

00:04:58.000 --> 00:05:04.000
Đối với iOS 15, chúng tôi rất vui mừng được thanh toán tốt hơn nữa với trải nghiệm Apple Pay hoàn toàn mới.

00:05:04.000 --> 00:05:09.000
Chúng tôi đã xây dựng lại bảng Apple Pay từ đầu trong SwiftUI với một thiết kế hoàn toàn mới.

00:05:09.000 --> 00:05:15.000
Nó mang đến cho người dùng trải nghiệm thanh toán rõ ràng và mượt mà hơn với giao diện mới tuyệt vời.

00:05:15.000 --> 00:05:19.000
Chúng tôi cũng đã triển khai một số tính năng mới để cải thiện chuyển đổi.

00:05:19.000 --> 00:05:26.000
Đối với những người dùng mới sử dụng Apple Pay, chúng tôi đã đơn giản hóa quy trình để thêm thẻ và địa chỉ từ bảng thanh toán.

00:05:26.000 --> 00:05:31.000
Người dùng hiện tại sẽ có thể thêm một thẻ khác mà không cần rời khỏi trải nghiệm Apple Pay.

00:05:31.000 --> 00:05:36.000
Chúng tôi cũng đã thiết kế lại việc xử lý lỗi để rõ ràng hơn khi xảy ra sự cố.

00:05:36.000 --> 00:05:42.000
Khi người dùng đã hoàn tất việc thêm một phương thức thanh toán mới, họ sẽ liên tục giao dịch của mình.

00:05:42.000 --> 00:05:50.000
Chúng tôi cũng đã thêm một chế độ xem tóm tắt mới hiển thị thông tin chi tiết hơn, chẳng hạn như các mục thanh toán, giảm giá và tổng phụ.

00:05:50.000 --> 00:05:57.000
Mới cho iOS 15, chúng tôi cũng hiển thị biểu tượng ứng dụng của bạn trên chế độ xem tóm tắt.

00:05:57.000 --> 00:06:03.000
Đối với các khoản thanh toán trên web, chúng tôi hiện đang hiển thị biểu tượng Web Clip trên chế độ xem tóm tắt thanh toán.

00:06:03.000 --> 00:06:09.000
Trong Apple Pay, điều này trước đây chỉ hiển thị khi sử dụng chuyển giao từ máy Mac để hoàn tất giao dịch.

00:06:09.000 --> 00:06:18.000
Bây giờ biểu tượng trang web của bạn có thể xem được trong giao dịch Apple Pay để cung cấp sự đảm bảo trực quan cho người dùng rằng thanh toán sẽ đến đúng nơi.

00:06:18.000 --> 00:06:28.000
Nếu bạn chấp nhận Apple Pay trên web và bạn chưa đặt biểu tượng Web Clip, chúng tôi thực sự khuyên bạn nên hiển thị biểu tượng của mình cho người dùng.

00:06:28.000 --> 00:06:35.000
Để làm điều này, bạn nên cung cấp biểu tượng 2x và 3x ở các kích thước được hiển thị trong thư mục tài liệu gốc của bạn.

00:06:35.000 --> 00:06:41.000
Apple Pay sau đó sẽ tự động truy xuất và hiển thị biểu tượng này cùng với yêu cầu thanh toán.

00:06:41.000 --> 00:06:49.000
Thông tin chi tiết về việc triển khai điều này có sẵn trong phần Nguyên tắc Giao diện Con người của trang web Nhà phát triển Apple.

00:06:49.000 --> 00:06:57.000
Trong khi chúng ta đang nói về chủ đề kích thước biểu tượng, tôi muốn nhắc bạn về các yêu cầu kích thước biểu tượng mới cho PKPasses của bạn.

00:06:57.000 --> 00:07:13.000
Vì các thông báo trong iOS 15 hiện hiển thị biểu tượng lớn hơn, bạn sẽ cần cập nhật biểu tượng PKPass của mình lên tối thiểu 38x38 ở tốc độ 1x để đảm bảo rằng các biểu tượng của bạn được hiển thị mà không bị mờ.

00:07:13.000 --> 00:07:18.000
Chúng tôi cũng vui mừng giới thiệu sự linh hoạt hơn trong tổng dòng.

00:07:18.000 --> 00:07:29.000
Điều này sẽ cho phép bạn thêm ngày nếu thanh toán xảy ra muộn hơn; ví dụ: nếu bạn nhận đơn đặt hàng trước hoặc thêm tần suất thanh toán định kỳ.

00:07:29.000 --> 00:07:35.000
Nhiều tính năng mới mà chúng tôi vừa quan sát có thể được thêm vào ứng dụng của bạn chỉ với một vài thay đổi đơn giản.

00:07:35.000 --> 00:07:40.000
Vì vậy, bây giờ chúng ta sẽ xem xét kỹ hơn các cải tiến API mà chúng ta đang giới thiệu trong iOS 15.

00:07:40.000 --> 00:07:43.000
Chúng tôi vui mừng bổ sung hỗ trợ cho phạm vi ngày giao hàng.

00:07:43.000 --> 00:07:48.000
Bây giờ bạn có thể giới thiệu cho người dùng của mình thời gian giao hàng hoặc nhận hàng có liên quan trong Apple Pay.

00:07:48.000 --> 00:07:54.000
Chúng có thể được sử dụng để đặt ngày vận chuyển hoặc giao hàng ước tính hoặc cửa sổ thời gian để nhận hàng tại cửa hàng.

00:07:54.000 --> 00:07:59.000
Thông tin bổ sung này được hiển thị ngay trên chế độ xem Apple Pay chính.

00:07:59.000 --> 00:08:03.000
Các API ngày giao hàng mới có hỗ trợ tích hợp cho lịch và múi giờ.

00:08:03.000 --> 00:08:11.000
Điều này làm cho việc xử lý ngày giao hàng hoặc thời gian nhận hàng trong ứng dụng của bạn trở nên đơn giản và thông tin liên quan được hiển thị rõ ràng cho người dùng của bạn.

00:08:11.000 --> 00:08:15.000
Bây giờ tôi sẽ chỉ cho bạn ngắn gọn cách thức hoạt động của nó.

00:08:15.000 --> 00:08:21.000
Chúng tôi bắt đầu bằng cách xác định một phương thức vận chuyển thông thường bằng cách sử dụng PKShippingMethod giống như trước đây.

00:08:21.000 --> 00:08:23.000
Tiếp theo, chúng tôi chọn một lịch.

00:08:23.000 --> 00:08:27.000
Trong ví dụ này, chúng tôi sử dụng lịch hiện tại của người dùng.

00:08:27.000 --> 00:08:34.000
Chúng tôi sử dụng ngày hôm nay làm tài liệu tham khảo và ước tính thời gian đến từ ba đến bảy ngày kể từ ngày này.

00:08:34.000 --> 00:08:39.000
Sau đó, chúng tôi xác định ngày bắt đầu và ngày kết thúc cho phạm vi ngày của mình bằng cách sử dụng lịch.

00:08:39.000 --> 00:08:46.000
Cuối cùng, chúng tôi chuyển đổi ngày thành các thành phần ngày thích hợp và sau đó chúng tôi thêm chúng vào phương thức vận chuyển.

00:08:46.000 --> 00:08:54.000
Chúng tôi sử dụng các thành phần ngày thay vì ngày đơn giản để chúng tôi có thể tận dụng lợi thế của lịch phong phú và hỗ trợ múi giờ được tích hợp trong iOS.

00:08:54.000 --> 00:08:58.000
Điều này cho phép các trường hợp sử dụng mà nếu không sẽ không thể thực hiện được.

00:08:58.000 --> 00:09:05.000
Ví dụ, chúng tôi có thể cung cấp múi giờ chính xác cho thời gian nhận hàng bất kể múi giờ hiện tại của người dùng.

00:09:05.000 --> 00:09:15.000
Mức độ chi tiết này cũng cho phép chúng tôi hiển thị thông tin ngày và giờ phù hợp nhất với người dùng, chẳng hạn như hiển thị thời gian nhận hàng cụ thể.

00:09:15.000 --> 00:09:19.000
Chúng tôi đã bao gồm một JavaScript tương đương cho Apple Pay trên web.

00:09:19.000 --> 00:09:25.000
Bạn có thể thấy chúng tôi chỉ định phạm vi thành phần ngày hơi khác so với chúng tôi làm trong Swift.

00:09:25.000 --> 00:09:30.000
Các thành phần ngày của bạn có thể được sử dụng kết hợp với bất kỳ loại nhận hàng nào được hỗ trợ của chúng tôi.

00:09:30.000 --> 00:09:35.000
Ví dụ, bạn có thể hiển thị thời gian nhận hàng trong ứng dụng của mình.

00:09:35.000 --> 00:09:39.000
Ngoài phạm vi ngày, bây giờ bạn có thể khai báo địa chỉ giao hàng chỉ đọc.

00:09:39.000 --> 00:09:44.000
Bạn có thể sử dụng cái này để thông báo cho người dùng về một địa điểm nhận hàng cụ thể.

00:09:44.000 --> 00:09:50.000
Để kích hoạt điều này, bạn phải cung cấp chi tiết địa chỉ như một ví dụ của PKContact.

00:09:50.000 --> 00:09:59.000
Trong ví dụ này, chúng tôi đã tạo một địa chỉ bưu chính dưới dạng CNMutablePostalAddress để chúng tôi có thể đặt tất cả các thành phần địa chỉ mà chúng tôi cần.

00:09:59.000 --> 00:10:03.000
Bây giờ bạn có thể thêm liên hệ giao hàng vào yêu cầu thanh toán.

00:10:03.000 --> 00:10:08.000
Cuối cùng chúng tôi khai báo chế độ chỉnh sửa và chỉ định các trường vận chuyển bắt buộc.

00:10:08.000 --> 00:10:14.000
Các trường địa chỉ có trong PKContact sẽ được trình bày cho người dùng dưới dạng chỉ đọc.

00:10:14.000 --> 00:10:21.000
Trong ví dụ này, chúng tôi đã cung cấp địa chỉ nhận bưu chính mà người dùng sẽ không thể chỉnh sửa.

00:10:21.000 --> 00:10:25.000
Và đây là tương đương trong JavaScript cho Apple Pay trên web.

00:10:25.000 --> 00:10:39.000
Bạn thiết lập từ điển shippingContact, đặt shippingType, shippingContactEditingMode và requiredShippingContactFields, và sau đó bạn bao gồm các trường khác cho yêu cầu thanh toán JavaScript.

00:10:39.000 --> 00:10:46.000
Để biết thêm thông tin, hãy xem tài liệu có sẵn trên phần Apple Pay của Cổng thông tin dành cho nhà phát triển.

00:10:46.000 --> 00:10:51.000
Một tính năng mới tuyệt vời khác cho iOS 15 là hỗ trợ mã phiếu giảm giá.

00:10:51.000 --> 00:10:56.000
Giờ đây, người dùng của bạn có thể nhập mã khuyến mại sau khi họ đã bắt đầu thanh toán.

00:10:56.000 --> 00:11:04.000
Điều này nhằm mục đích để người dùng của bạn không phải hủy giao dịch Apple Pay của họ nếu họ quên áp dụng mã giảm giá.

00:11:04.000 --> 00:11:17.000
Bạn cũng có thể cân nhắc thực hiện điều này nếu bạn có quy trình mua hàng nhanh, nơi người dùng có thể thanh toán từ trang sản phẩm hoặc giỏ hàng, nhưng trường nhập phiếu giảm giá chỉ được hiển thị khi thanh toán.

00:11:17.000 --> 00:11:25.000
Chúng tôi đã cung cấp các phương thức để cập nhật yêu cầu thanh toán, vì vậy bạn có thể xác thực mã giảm giá hoặc trả lại thông báo lỗi khi được yêu cầu.

00:11:25.000 --> 00:11:28.000
Hãy đi sâu vào và xem mã.

00:11:28.000 --> 00:11:35.000
Bạn có thể thực hiện các thay đổi bằng cách sử dụng phương pháp đại diện thực hiện cập nhật bất cứ khi nào người dùng thay đổi mã phiếu giảm giá.

00:11:35.000 --> 00:11:41.000
Ví dụ, bạn có thể sử dụng cái này để xác thực mã và sau đó cập nhật bất kỳ tổng thanh toán nào.

00:11:41.000 --> 00:11:47.000
Bạn cũng sử dụng phương thức để trả lại các lỗi tùy chỉnh hoặc cập nhật các mặt hàng tóm tắt thanh toán và phương thức vận chuyển.

00:11:47.000 --> 00:11:53.000
Russ sẽ sớm chỉ cho bạn một ví dụ về điều này chi tiết hơn.

00:11:53.000 --> 00:12:01.000
Chúng tôi khuyên bạn nên điền trước mã bất cứ khi nào có thể, cũng như hiển thị các thông báo lỗi có liên quan cho các mã không hợp lệ.

00:12:01.000 --> 00:12:06.000
Tôi hy vọng bạn thích những cải tiến API thú vị này cho iOS 15.

00:12:06.000 --> 00:12:13.000
Bây giờ chúng ta đã nói tất cả về điều này trên lý thuyết, tôi sẽ giao bạn cho Russ để trình diễn để bạn có thể xem cách triển khai tất cả các tính năng mới tuyệt vời này.

00:12:13.000 --> 00:12:16.000
Russ Fenenga: Cảm ơn, Edward. Xin chào mọi người.

00:12:16.000 --> 00:12:19.000
Tên tôi là Russ, và tôi là một kỹ sư phần mềm trong nhóm Wallet.

00:12:19.000 --> 00:12:28.000
Và tôi rất vui khi có thể chứng minh cho bạn một số tính năng mới tuyệt vời mà chúng tôi đã thêm vào bảng thanh toán trong iOS 15 và cách bạn có thể tích hợp chúng vào ứng dụng của mình.

00:12:28.000 --> 00:12:30.000
Vậy hãy bắt đầu nào!

00:12:30.000 --> 00:12:34.000
Ở đây tôi có ứng dụng mua vé cho lễ hội ẩm thực mà tôi đang lên kế hoạch.

00:12:34.000 --> 00:12:43.000
Ứng dụng của tôi đã triển khai các phương thức giao thức hiện có từ PKPaymentAuthorization ControllerDelegate để tận dụng lợi thế của bảng thanh toán Apple Pay.

00:12:43.000 --> 00:12:49.000
Với iOS 15, bảng thanh toán sẽ tự động được cập nhật lên giao diện mới mà không cần bất kỳ công việc bổ sung nào.

00:12:49.000 --> 00:12:58.000
Tôi đã quyết định rằng với bản cập nhật lên iOS 15, tôi muốn những người tham dự lễ hội của mình cuối cùng cũng có khả năng yêu cầu vé của họ theo nhiều cách.

00:12:58.000 --> 00:13:04.000
Để làm điều này, tôi sẽ cần thêm hỗ trợ cho nhiều phương thức vận chuyển, vì vậy hãy đi sâu vào!

00:13:04.000 --> 00:13:12.000
Tôi sẽ tham gia vào lớp PaymentHandler của chúng tôi, nơi tôi xây dựng PKPaymentRequest để bắt đầu thêm hỗ trợ cho nhiều PKShippingMethods.

00:13:12.000 --> 00:13:22.000
Điều đầu tiên tôi sẽ thêm vào là một hàm trợ giúp trả về cho tôi một mảng PKShippingMethods đại diện cho các tùy chọn khác nhau có sẵn cho người dùng của tôi.

00:13:22.000 --> 00:13:30.000
Phương pháp PKShipping đầu tiên mà tôi tạo ra là một phương thức vận chuyển tiêu chuẩn, cho người dùng biết rằng họ có thể nhận vé tại lễ hội.

00:13:30.000 --> 00:13:36.000
Mới sử dụng iOS 15, tôi muốn cung cấp cho người dùng một phạm vi ước tính, nó sẽ mất vé để được vận chuyển cho họ.

00:13:36.000 --> 00:13:44.000
Để làm điều này, tôi tạo một đối tượng Ngày và Lịch, sau đó xác định ngày bắt đầu vận chuyển và ngày kết thúc vận chuyển từ ba đến năm ngày kể từ bây giờ.

00:13:44.000 --> 00:13:50.000
Sau đó tôi có thể chỉ định các thành phần ngày mà tôi muốn hiển thị cho người dùng trong bảng thanh toán.

00:13:50.000 --> 00:14:00.000
Sau đó, tôi xây dựng PKShippingMethod của mình để đảm bảo rằng tôi đặt thuộc tính mới, dateComponentsRange và trả lại mảng của hai phương thức vận chuyển.

00:14:00.000 --> 00:14:10.000
Điều cuối cùng tôi cần làm là đặt các phương thức vận chuyển trên PKPaymentRequest như vậy.

00:14:10.000 --> 00:14:16.000
Với những thay đổi đơn giản này, tôi có thể xây dựng ứng dụng của mình và kiểm tra các phương thức vận chuyển mới trong bảng thanh toán.

00:14:16.000 --> 00:14:20.000
Một hàng mới đã tự động được thêm vào bảng thanh toán hiển thị các phương thức vận chuyển.

00:14:20.000 --> 00:14:28.000
Nếu tôi nhấn vào hàng, tôi sẽ thấy cả hai phương thức vận chuyển vừa được thêm vào, bao gồm cả phương thức hỗ trợ phạm vi ngày.

00:14:28.000 --> 00:14:38.000
Tôi cũng đã quyết định rằng đối với lễ hội năm nay, tôi muốn gửi mã phiếu giảm giá cho tất cả những người tham dự của mình và thêm chức năng đổi chúng trực tiếp thông qua bảng thanh toán trong ứng dụng của mình.

00:14:38.000 --> 00:14:41.000
Để làm điều này, có hai thay đổi chính mà tôi cần thực hiện.

00:14:41.000 --> 00:14:45.000
Hãy quay trở lại mã.

00:14:45.000 --> 00:14:48.000
Đầu tiên là khi xây dựng PKPaymentRequest.

00:14:48.000 --> 00:14:54.000
Có một boolean mới, hỗ trợCouponCode, cần được đặt thành true.

00:14:54.000 --> 00:15:04.000
Ngoài ra còn có một thuộc tính tùy chọn mới, couponCode, mà bạn có thể đặt trên PKPaymentRequest của mình để điền trước trường phiếu giảm giá với một trong các mã phiếu giảm giá đã hợp lệ của bạn.

00:15:04.000 --> 00:15:23.000
Tiếp theo, hãy chuyển xuống phần mở rộng lớp học của tôi phù hợp với PKPaymentAuthorization ControllerDelegate và triển khai phương thức giao thức mới paymentAuthorizationController didChangeCouponCode nơi tôi sẽ có thể xử lý việc cập nhật các mục tóm tắt của mình và hiển thị các lỗi liên quan đến mục nhập mã phiếu giảm giá khi nhập mã phiếu giảm giá

00:15:23.000 --> 00:15:31.000
Điều đầu tiên tôi cần là một chức năng trợ giúp cập nhật PKPaymentSummaryItems của chúng tôi nếu nhập mã phiếu giảm giá hợp lệ.

00:15:31.000 --> 00:15:36.000
Tôi lấy một tham chiếu đến mục tóm tắt đầu tiên là mục tổng phụ của chúng tôi.

00:15:36.000 --> 00:15:42.000
Từ đó, tôi tạo một PKPaymentSummaryItem mới cho phép người dùng xem chiết khấu đã được áp dụng.

00:15:42.000 --> 00:15:49.000
Sau đó tôi tạo một mục tóm tắt mới cho thuế và tổng, và sau đó trả lại mảng của chúng.

00:15:49.000 --> 00:15:57.000
Bây giờ tôi đã viết logic ứng dụng giảm giá của mình, sau đó tôi có thể viết logic xác thực mã phiếu giảm giá của mình.

00:15:57.000 --> 00:16:08.000
Trước tiên, tôi kiểm tra xem mã phiếu giảm giá của tôi mà người dùng đã nhập có trống không và nếu có, chỉ cần gọi việc hoàn thành của chúng tôi trong các mục tóm tắt thanh toán chưa được sửa đổi.

00:16:08.000 --> 00:16:21.000
Nếu mã phiếu giảm giá đã nhập khớp với mã phiếu giảm giá hợp lệ, thì tôi sử dụng chức năng applyDiscount vừa tạo để trả lại các mục tóm tắt đã cập nhật vào đối tượng CouponCodeUpdate của chúng tôi.

00:16:21.000 --> 00:16:27.000
Đối với các ứng dụng của bạn, rất có thể bạn sẽ cần tìm nạp mã phiếu giảm giá hợp lệ từ máy chủ của mình vào thời điểm này.

00:16:27.000 --> 00:16:39.000
Cuối cùng, nếu mã phiếu giảm giá đã nhập không hợp lệ, tôi sử dụng trình khởi tạo tiện lợi PKPaymentRequest mới, paymentCouponCodeInvalidError và cung cấp cho nó một mô tả được hiển thị trực tiếp trong bảng thanh toán.

00:16:39.000 --> 00:16:47.000
Chúng tôi cũng có trình khởi tạo tiện lợi thứ hai cho các mã phiếu giảm giá đã hết hạn: paymentCouponCodeExpired ErrorWithLocalizedDescription.

00:16:47.000 --> 00:16:54.000
Sau đó tôi chuyển lỗi này vào trình khởi tạo cập nhật mã phiếu giảm giá của chúng tôi cũng như SummaryItems ban đầu.

00:16:54.000 --> 00:16:59.000
Cứ như vậy, tôi đã thêm hỗ trợ cho mã phiếu giảm giá bên trong ứng dụng của mình.

00:16:59.000 --> 00:17:03.000
Hãy kiểm tra nó.

00:17:03.000 --> 00:17:11.000
Để nhập mã phiếu giảm giá, tôi chỉ cần nhấn vào chế độ xem tóm tắt và nhập mã phiếu giảm giá vào trường văn bản mã phiếu giảm giá.

00:17:11.000 --> 00:17:17.000
Nếu lần đầu tiên tôi nhập mã phiếu giảm giá không hợp lệ, Fest, thông báo lỗi tôi cung cấp sẽ được hiển thị trực tiếp bên dưới trường văn bản.

00:17:17.000 --> 00:17:26.000
Bây giờ nếu tôi nhập mã phiếu giảm giá hợp lệ, FESTIVAL, các mục tóm tắt thanh toán sẽ được cập nhật ngay lập tức.

00:17:26.000 --> 00:17:36.000
Sau đó, tôi chỉ cần chọn địa chỉ giao hàng cũng như địa chỉ giao hàng và yêu cầu thanh toán của tôi đã sẵn sàng.

00:17:36.000 --> 00:17:43.000
Với những thay đổi đơn giản này, giờ đây bạn đã sẵn sàng kiểm tra các bản cập nhật của mình cho bảng thanh toán trên thiết bị trong môi trường hộp cát Apple Pay của chúng tôi.

00:17:43.000 --> 00:17:45.000
Bây giờ, trở lại với Edward.

00:17:45.000 --> 00:17:46.000
Edward: Cảm ơn, Russ.

00:17:46.000 --> 00:17:54.000
Russ vừa cho chúng tôi thấy việc triển khai nhiều phương thức vận chuyển, phạm vi ngày mới và API mã phiếu giảm giá dễ dàng như thế nào.

00:17:54.000 --> 00:18:05.000
Năm nay, chúng tôi đã cung cấp một số cập nhật mới thú vị cho Wallet như thẻ khóa nhà, nhận dạng, ẩn thẻ đã hết hạn và nhập nhiều thẻ.

00:18:05.000 --> 00:18:12.000
Chúng tôi đã giới thiệu nút thanh toán JavaScript mới cho Apple Pay trên web và trải nghiệm Apple Pay mới trên iOS.

00:18:12.000 --> 00:18:22.000
Bạn đã tìm hiểu về các API vận chuyển mới, bao gồm hỗ trợ cho phạm vi ngày và địa chỉ chỉ đọc, cũng như mã phiếu giảm giá và cách bạn có thể triển khai chúng trong các ứng dụng của riêng mình.

00:18:22.000 --> 00:18:27.000
Để biết thêm thông tin, hãy xem phần Apple Pay của Cổng thông tin dành cho nhà phát triển.

00:18:27.000 --> 00:18:33.000
Điều này bao gồm hộp cát Apple Pay để kiểm tra các yêu cầu thanh toán từ các ứng dụng và trang web của bạn.

00:18:33.000 --> 00:18:35.000
Cảm ơn bạn đã xem.

00:18:35.000 --> 23:59:59.000
♪

