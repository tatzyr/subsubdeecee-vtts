WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:16.000
Jeff Robertson: Chào mừng bạn đến với phần thứ hai của bài nói chuyện của chúng tôi về việc xây dựng một ứng dụng Mac tuyệt vời trong SwiftUI.

00:00:16.000 --> 00:00:21.000
Tôi là Jeff, một kỹ sư trong nhóm SwiftUI.

00:00:21.000 --> 00:00:26.000
Tôi hy vọng bạn thích phần đầu tiên của bài nói chuyện này của đồng nghiệp Mathieu của tôi.

00:00:26.000 --> 00:00:36.000
Nếu bạn chưa xem phần một, vui lòng dừng lại ở đây và làm như vậy ngay bây giờ, vì chúng tôi sẽ xây dựng dựa trên những thay đổi được thảo luận trong buổi nói chuyện đó.

00:00:36.000 --> 00:00:41.000
Ứng dụng làm vườn của chúng tôi đã đi một chặng đường dài kể từ khi bắt đầu cuộc nói chuyện của Mathieu.

00:00:41.000 --> 00:00:48.000
SwiftUI cho phép chúng tôi xây dựng một ứng dụng với khá nhiều chức năng trong thời gian rất ngắn.

00:00:48.000 --> 00:00:58.000
Tuy nhiên, người dùng có xu hướng sử dụng các ứng dụng của chúng tôi theo nhiều cách khác nhau và một ứng dụng macOS đặc biệt tuyệt vời sẽ giải thích cho điều này.

00:00:58.000 --> 00:01:07.000
Với ý nghĩ đó, chúng ta hãy xem xét một số cách mà chúng ta có thể xây dựng một ứng dụng cho mọi người trong khi vẫn duy trì các nguyên tắc Mathieu đã nêu trong phần một.

00:01:07.000 --> 00:01:19.000
Đầu tiên, chúng ta sẽ xem xét ý nghĩa của việc trở thành một ứng dụng macOS hoàn toàn có thể tùy chỉnh, bằng cách xử lý các thay đổi đối với toàn bộ hệ thống cũng như trong ứng dụng của chúng ta.

00:01:19.000 --> 00:01:30.000
Thêm một quy trình làm việc bổ sung cho người dùng của chúng tôi để thao tác dữ liệu của họ thông qua kéo và thả là một cách khác để chúng tôi cung cấp trải nghiệm người dùng linh hoạt.

00:01:30.000 --> 00:01:37.000
Sau đó, chúng ta sẽ khám phá cách làm việc với hệ thống tệp, bằng cách cho phép xuất dữ liệu ứng dụng của chúng ta.

00:01:37.000 --> 00:01:45.000
Và cuối cùng, chúng tôi sẽ thêm hỗ trợ cho Continuity Camera để tạo quy trình làm việc liền mạch để nhập hình ảnh vào ứng dụng của chúng tôi.

00:01:45.000 --> 00:01:56.000
Điều đầu tiên tôi muốn nói với bạn không phải là bất kỳ API cụ thể nào cả, mà là nhiều hơn về cách một ứng dụng được xây dựng bằng SwiftUI phù hợp với khả năng tùy chỉnh của macOS.

00:01:56.000 --> 00:02:00.000
Ở đây, tôi đã mở ứng dụng làm vườn của chúng tôi cũng như Tùy chọn hệ thống.

00:02:00.000 --> 00:02:08.000
Tôi sẽ chuyển sang chế độ Tối và bạn có thể thấy ứng dụng của chúng tôi tự động cập nhật giao diện của nó.

00:02:08.000 --> 00:02:14.000
Trong khi tôi mở Tùy chọn Hệ thống, tôi cũng sẽ cập nhật kích thước biểu tượng thanh bên của mình thành lớn.

00:02:14.000 --> 00:02:20.000
Cũng giống như với chế độ Tối, ứng dụng của chúng tôi đã tự điều chỉnh theo những gì tôi đã đặt trong Tùy chọn Hệ thống.

00:02:20.000 --> 00:02:31.000
Tôi thích những điểm nhấn nhỏ này, cả với tư cách là nhà phát triển - vì tôi tự động nhận được chúng - và với tư cách là người dùng - vì điều đó có nghĩa là các ứng dụng tôi đang sử dụng sẽ tính đến sở thích cá nhân của riêng tôi.

00:02:31.000 --> 00:02:39.000
Trước khi tôi rời khỏi System Preferences để tập trung vào ứng dụng của chúng tôi, tôi muốn chỉ ra rằng tôi đã đặt màu nhấn của mình thành nhiều màu.

00:02:39.000 --> 00:02:50.000
Tính năng này cho phép các nhà phát triển định cấu hình màu nhấn dành riêng cho ứng dụng; và hệ điều hành sẽ tùy chỉnh các nút, tô sáng lựa chọn và glyph thanh bên của ứng dụng của bạn.

00:02:50.000 --> 00:03:02.000
Tôi muốn hỗ trợ màu nhấn trong ứng dụng của mình, vì vậy tôi sẽ mở danh mục tài sản trong dự án của chúng tôi và chọn AccentColor.

00:03:02.000 --> 00:03:08.000
Và tôi sẽ thay đổi nội dung của nó thành màu xanh lá cây của hệ thống để phù hợp với chủ đề ứng dụng của chúng tôi.

00:03:08.000 --> 00:03:14.000
Như bạn có thể thấy, các biểu tượng thanh bên và lựa chọn của chúng tôi đều đã nhận được sự thay đổi.

00:03:14.000 --> 00:03:23.000
Chúng tôi đã thấy cách ứng dụng của chúng tôi có thể tự động phản ứng với những thay đổi ảnh hưởng đến toàn bộ hệ điều hành, nhưng còn cài đặt dành riêng cho ứng dụng thì sao?

00:03:23.000 --> 00:03:28.000
Hãy cùng xem qua việc thêm một giao diện để cho phép người dùng tùy chỉnh ứng dụng làm vườn của chúng tôi.

00:03:28.000 --> 00:03:31.000
Ở đây, tôi đã mở tệp GardenApp của chúng tôi.

00:03:31.000 --> 00:03:36.000
Và cùng với cảnh WindowGroup, tôi sẽ thêm cảnh Cài đặt.

00:03:36.000 --> 00:03:41.000
Và cảnh này sẽ cung cấp cho chúng ta một mục menu, khi được chọn, sẽ mở ra một cửa sổ với chế độ xem của chúng ta.

00:03:41.000 --> 00:03:47.000
Tôi sẽ sử dụng SettingsView mà tôi đã thiết lập và tôi cũng sẽ chuyển nó cho mô hình của mình.

00:03:47.000 --> 00:04:02.000
Ngoài ra, cảnh Cài đặt cũng sẽ thêm mục menu thích hợp vào menu chính của ứng dụng của bạn và định cấu hình nó bằng phím tắt tiêu chuẩn của Command-comma.

00:04:02.000 --> 00:04:04.000
Điều này cho chúng ta một khởi đầu tuyệt vời.

00:04:04.000 --> 00:04:08.000
Bây giờ, chúng ta hãy xem SettingsView, nơi tôi sẽ xác định giao diện.

00:04:08.000 --> 00:04:22.000
Trên macOS, các ứng dụng thường cung cấp giao diện cài đặt với các biểu tượng thanh công cụ để cho phép chuyển đổi giữa các ngăn khác nhau, đặc biệt nếu ứng dụng cung cấp nhiều cài đặt có thể được chia thành các danh mục khác nhau.

00:04:22.000 --> 00:04:25.000
Vì vậy, đối với quan điểm chính của tôi ở đây, tôi sẽ sử dụng TabView.

00:04:25.000 --> 00:04:38.000
Và tôi sẽ cho nó hai đứa con: một cho Cài đặt chung và một cho Cài đặt xem.

00:04:38.000 --> 00:04:45.000
Và đối với nội dung của tab trong khu vực thanh công cụ cửa sổ, tôi sẽ sử dụng tabItem.

00:04:45.000 --> 00:04:47.000
Và nội dung của cái này chỉ có thể là một Nhãn.

00:04:47.000 --> 00:04:56.000
Chúng tôi sẽ cung cấp cho nó văn bản được hiển thị - trong trường hợp này là "Chung" - và một hình ảnh hệ thống; Tôi sẽ sử dụng "thiết bị" cho Cài đặt chung.

00:04:56.000 --> 00:04:59.000
Và sau đó hãy làm điều tương tự cho ViewingSettings của chúng ta.

00:04:59.000 --> 00:05:09.000
Tôi sẽ thêm một tab Mục và một Nhãn - chúng tôi sẽ gọi nó là "Xem" - và một hệ thống Hình ảnh của, tôi nghĩ, "kính mắt".

00:05:09.000 --> 00:05:13.000
Được rồi. Vì vậy, bây giờ chúng tôi có nội dung của hai tab của chúng tôi.

00:05:13.000 --> 00:05:16.000
Hãy điền vào GeneralSettings ngay bây giờ.

00:05:16.000 --> 00:05:26.000
Một cái gì đó có thể tốt cho người dùng của chúng tôi là khả năng xác định một khu vườn được sử dụng làm mặc định khi hiện tại không có khu vườn nào được chọn.

00:05:26.000 --> 00:05:29.000
Đối với điều này, tôi sẽ thêm một Picker...

00:05:29.000 --> 00:05:46.000
Và mục đầu tiên, tôi nghĩ, sẽ là Văn bản ("Không có").

00:05:46.000 --> 00:05:52.000
Và đối với những người khác, tôi sẽ thêm một ForEach trên tất cả các khu vườn trong dữ liệu của chúng tôi.

00:05:52.000 --> 00:06:14.000
Và đối với mỗi khu vườn, tôi sẽ chỉ thêm một Văn bản và đặt cho nó tên của khu vườn cũng như năm hiển thị của nó.

00:06:14.000 --> 00:06:21.000
Chúng tôi cũng sẽ cần cung cấp một thẻ ở đây với ID của khu vườn.

00:06:21.000 --> 00:06:27.000
Vì vậy, đối với giá trị "Không có" của chúng tôi, chúng tôi có thể cho nó một thẻ không có.

00:06:27.000 --> 00:06:34.000
Và đối với các khu vườn khác của chúng tôi, chúng tôi sẽ cung cấp cho nó một thẻ tương ứng với ID của khu vườn.

00:06:34.000 --> 00:06:46.000
Cuối cùng, chúng tôi cần cung cấp một số trạng thái cho lựa chọn của Picker.

00:06:46.000 --> 00:06:56.000
Khi cung cấp giao diện cài đặt như thế này, điều quan trọng là phải duy trì trạng thái để ứng dụng của bạn ghi nhớ lựa chọn của người dùng qua các lần khởi chạy và cập nhật hệ điều hành.

00:06:56.000 --> 00:07:01.000
Trong SwiftUI, điều này có thể được thực hiện bằng cách sử dụng trình bao bọc thuộc tính AppStorage.

00:07:01.000 --> 00:07:09.000
Trình bao bọc thuộc tính này sẽ duy trì giá trị của chúng tôi bằng cách sử dụng hệ thống UserDefaults, đó chính xác là những gì chúng tôi muốn ở đây.

00:07:09.000 --> 00:07:15.000
Vì vậy, để ràng buộc lựa chọn của chúng tôi, tôi sẽ thêm trình bao bọc thuộc tính AppStorage.

00:07:15.000 --> 00:07:17.000
Cái này cần một chìa khóa.

00:07:17.000 --> 00:07:24.000
Chúng tôi sẽ cho nó "khu vườn mặc định", và chúng tôi sẽ gọi nó là "lựa chọn".

00:07:24.000 --> 00:07:28.000
Nó cũng là một Garden.ID tùy chọn.

00:07:28.000 --> 00:07:35.000
Và những gì điều này sẽ làm là duy trì giá trị lựa chọn của chúng tôi bằng cách sử dụng hệ thống mặc định của người dùng.

00:07:35.000 --> 00:07:41.000
Tôi cũng sẽ thêm một Kích thước cố định vào Bộ chọn của mình và một số phần đệm vào biểu mẫu.

00:07:41.000 --> 00:07:56.000
Tôi sẽ chuyển sang Chế độ xem nội dung của chúng tôi tại đây và tôi sẽ thêm AppStorage của chúng tôi và cung cấp cho nó cùng một khóa mà chúng tôi đã sử dụng.

00:07:56.000 --> 00:08:09.000
Chúng tôi sẽ gọi nó là "defaultGardenID", và nó cũng là một Garden.ID tùy chọn.

00:08:09.000 --> 00:08:22.000
Và sau đó ở đây, nơi tôi có ràng buộc này để lựa chọn, tôi sẽ thay thế nó bằng Ràng buộc và "get" trước tiên sẽ là sử dụng ID Vườn đã chọn.

00:08:22.000 --> 00:08:27.000
Và sau đó nếu điều đó không được thiết lập, chúng ta sẽ quay trở lại ID Vườn mặc định.

00:08:27.000 --> 00:08:32.000
Và sau đó đối với setter, chúng tôi chỉ muốn cập nhật ID Garden đã chọn của mình.

00:08:32.000 --> 00:08:35.000
Chúng tôi không thực sự muốn cập nhật defaultGarden của mình.

00:08:35.000 --> 00:08:40.000
Vì vậy, tôi sẽ chỉ nói "selectedGardenID = $0".

00:08:40.000 --> 00:08:44.000
Được rồi.

00:08:44.000 --> 00:08:46.000
Tôi sẽ chạy ứng dụng của chúng ta.

00:08:46.000 --> 00:08:56.000
Mở mục menu Tùy chọn tại đây và tôi sẽ chọn Cây trồng trong nhà làm khu vườn mặc định của mình.

00:08:56.000 --> 00:09:01.000
Và tôi sẽ mở một cửa sổ mới, và chúng ta thấy Cây trồng trong nhà được chọn.

00:09:01.000 --> 00:09:08.000
Cung cấp hỗ trợ tùy chỉnh thông qua cài đặt là một cách hay để xây dựng trải nghiệm linh hoạt cho người dùng của chúng tôi.

00:09:08.000 --> 00:09:13.000
Một cách khác là cung cấp quy trình làm việc thay thế cho cùng một hành động.

00:09:13.000 --> 00:09:19.000
Trong phần đầu tiên của bài nói chuyện của chúng tôi, Mathieu đã chỉ cho bạn cách thêm mục menu chính để thêm cây vào khu vườn đã chọn.

00:09:19.000 --> 00:09:30.000
Đây là chức năng tuyệt vời cho ứng dụng của chúng tôi, nhưng hãy xem xét một cách khác để chúng tôi có thể cung cấp chức năng tương tự thông qua tương tác người dùng macOS phổ biến: kéo và thả.

00:09:30.000 --> 00:09:36.000
Vì chúng tôi đang sử dụng bảng ở đây, tôi sẽ thực hiện một vài điều chỉnh để hỗ trợ nó trở thành nguồn kéo và điểm đến thả.

00:09:36.000 --> 00:09:42.000
Điều đầu tiên tôi sẽ làm là loại bỏ "cây" này khỏi trình khởi tạo.

00:09:42.000 --> 00:09:49.000
Sau đó, tôi sẽ đi xuống ở cuối và thêm một trình tạo hàng.

00:09:49.000 --> 00:09:55.000
Đối với nội dung của trình tạo hàng này, tôi sẽ thêm một ForEach và sử dụng những cây mà chúng tôi đã có từ trước.

00:09:55.000 --> 00:10:05.000
Và đối với mỗi nhà máy, tôi sẽ tạo ra một TableRow với nó.

00:10:05.000 --> 00:10:12.000
Vì vậy, bây giờ tôi sẽ tùy chỉnh từng TableRows của chúng tôi bằng cách thêm công cụ sửa đổi itemProvider.

00:10:12.000 --> 00:10:20.000
Và tôi sẽ chỉ trả lại plant.itemProvider ở đây, đây là một thuộc tính được tính toán mà tôi đã thiết lập trên mô hình của mình.

00:10:20.000 --> 00:10:24.000
Vì vậy, bây giờ mỗi hàng này hỗ trợ trở thành một nguồn kéo.

00:10:24.000 --> 00:10:31.000
Bây giờ tôi đã thực hiện đủ thay đổi để cho phép tôi kéo cây của mình ra, nhưng điều này không hữu ích lắm nếu không có gì chấp nhận nó.

00:10:31.000 --> 00:10:35.000
Hãy khắc phục điều đó bằng cách thêm hỗ trợ thả vào bảng của chúng tôi.

00:10:35.000 --> 00:10:39.000
Công cụ sửa đổi onInsert là nửa còn lại của phương trình kéo và thả của chúng tôi.

00:10:39.000 --> 00:10:50.000
Nó cần một danh sách các loại nội dung và tôi sẽ vượt qua Plant.draggableType ở đây, đây là một loại tùy chỉnh mà tôi đã thiết lập trên mô hình của mình.

00:10:50.000 --> 00:10:53.000
Nó cũng cần một kết thúc, được truyền hai tham số.

00:10:53.000 --> 00:10:59.000
Một là chỉ mục xảy ra sự sụt giảm và một là danh sách các nhà cung cấp mặt hàng.

00:10:59.000 --> 00:11:09.000
Sau đó chúng tôi sẽ gọi cho Plant.fromItemProviders để tạo mô hình của chúng tôi và chúng tôi sẽ chuyển các nhà cung cấp mặt hàng đó ở đây.

00:11:09.000 --> 00:11:14.000
Điều này sẽ trả lại cho chúng tôi một danh sách các loài thực vật mà chúng tôi có thể sử dụng để cập nhật mô hình của mình.

00:11:14.000 --> 00:11:29.000
Tôi sẽ gọi garden.plants.insert (contentsOf: plants) tại chỉ mục nơi nó xảy ra.

00:11:29.000 --> 00:11:42.000
Bây giờ, tôi có thể mở một cửa sổ mới với Cây trồng trong nhà của mình, chọn một vài bông hoa từ Giường hoa ở sân sau của tôi và kéo để sao chép chúng.

00:11:42.000 --> 00:11:50.000
Kéo và thả là một cách tuyệt vời để di chuyển dữ liệu bên trong ứng dụng của chúng tôi, nhưng còn việc di chuyển dữ liệu giữa ứng dụng của chúng tôi và hệ điều hành thì sao?

00:11:50.000 --> 00:11:58.000
Người dùng của chúng tôi sẽ đánh giá cao việc có thể xuất tất cả dữ liệu này - có lẽ cho mục đích sao lưu hoặc nhập vào một ứng dụng khác.

00:11:58.000 --> 00:12:08.000
Để tạo điều kiện thuận lợi cho quy trình làm việc này, hãy thêm một mục menu chính để xuất cơ sở dữ liệu của chúng tôi ở định dạng tệp chung có thể được chia sẻ với các ứng dụng khác.

00:12:08.000 --> 00:12:14.000
Tôi đã tạo một loại để chứa mục menu của mình, loại này phù hợp với giao thức lệnh.

00:12:14.000 --> 00:12:23.000
Trong các lệnh của chúng tôi ở đây, tôi sẽ thêm một ImportExportCommands và cũng chuyển nó cho cửa hàng của chúng tôi.

00:12:23.000 --> 00:12:26.000
Hãy chuyển sang tệp đó ngay bây giờ.

00:12:26.000 --> 00:12:37.000
Và đối với phần thân, tôi sẽ thêm CommandGroup và tôi sẽ thay thế vị trí importExport do hệ thống cung cấp.

00:12:37.000 --> 00:12:44.000
Và những gì điều này sẽ làm là thêm mục menu của chúng tôi ở vị trí dự kiến trong menu Tệp.

00:12:44.000 --> 00:12:50.000
Vì vậy, đối với nội dung của CommandGroup của chúng tôi, tôi sẽ thêm một Phần và một Nút.

00:12:50.000 --> 00:12:55.000
Chúng tôi sẽ dán nhãn "Xuất khẩu" theo sau là các hình elip.

00:12:55.000 --> 00:13:02.000
Các hình elip chỉ ra cho người dùng rằng việc chọn mục đó sẽ mở ra một cửa sổ hoặc hộp thoại lưu.

00:13:02.000 --> 00:13:13.000
Và Nút chỉ có thể sửa đổi một số trạng thái - giả sử, "isShowingExport = true" - và hãy thêm trạng thái đó vào đây.

00:13:13.000 --> 00:13:24.000
Vì vậy, bây giờ chúng tôi có Nút của mình, đang sửa đổi một số trạng thái.

00:13:24.000 --> 00:13:29.000
Tôi cũng sẽ thêm công cụ sửa đổi fileExporter vào đây.

00:13:29.000 --> 00:13:37.000
Và tôi sẽ cung cấp cho nó một ràng buộc với trạng thái của chúng tôi trong tham số isPresented của nó.

00:13:37.000 --> 00:13:40.000
Đang hiển thị xuất khẩu.

00:13:40.000 --> 00:13:42.000
Nó cũng cần một tài liệu.

00:13:42.000 --> 00:13:49.000
Đây là một loại cần phải phù hợp với giao thức tài liệu tệp hoặc giao thức tài liệu tệp tham chiếu.

00:13:49.000 --> 00:13:53.000
Tôi đã thêm sự phù hợp vào cửa hàng của mình, vì vậy chúng tôi sẽ chuyển nó ở đây.

00:13:53.000 --> 00:13:56.000
Ngoài ra, nó cần một loại nội dung.

00:13:56.000 --> 00:14:07.000
Chúng tôi sẽ cung cấp cho nó Store.readableContentTypes.first chỉ là loại CSV.

00:14:07.000 --> 00:14:15.000
Và cuối cùng, nó cần một sự đóng cửa, được thông qua kết quả của hoạt động, cho thấy thành công hay thất bại.

00:14:15.000 --> 00:14:31.000
Bây giờ, tôi có thể chọn mục menu Xuất của chúng tôi, cung cấp cho nó một tệp để lưu dưới dạng "plants.csv", nhấn Xuất và tệp đã được lưu vào đĩa.

00:14:31.000 --> 00:14:39.000
Trong khi chúng ta đang nói về chủ đề di chuyển dữ liệu giữa ứng dụng của chúng ta và hệ điều hành, có một điều cuối cùng tôi muốn thảo luận.

00:14:39.000 --> 00:14:45.000
Ứng dụng của chúng tôi có rất nhiều dữ liệu văn bản về các nhà máy của chúng tôi, nhưng cũng sẽ rất tuyệt nếu thêm hình ảnh.

00:14:45.000 --> 00:14:49.000
Người dùng có thể chụp ảnh cây của họ theo thời gian để theo dõi tiến trình của họ.

00:14:49.000 --> 00:14:53.000
Một cách để kích hoạt luồng nhập này là với Continuity Camera.

00:14:53.000 --> 00:15:00.000
Tính năng này sẽ cho phép người dùng của chúng tôi chụp ảnh nhà máy của họ bằng thiết bị iOS của họ và nhập trực tiếp vào ứng dụng của chúng tôi.

00:15:00.000 --> 00:15:08.000
Hãy xem cách chúng ta có thể thêm một mục menu để kích hoạt luồng này khi người dùng đã chọn một cây trong chế độ xem thư viện.

00:15:08.000 --> 00:15:18.000
Sau importExportCommands của tôi, tôi sẽ thêm ImportFromDevicesCommands, và điều đó sẽ cung cấp cho chúng tôi mục menu chính của chúng tôi.

00:15:18.000 --> 00:15:35.000
Ngoài ra, tôi sẽ chuyển sang tệp GardenDetail của chúng tôi và ở cuối phần thân của chúng tôi ở đây, tôi sẽ thêm công cụ sửa đổi importsItemProviders và điều này có danh sách các loại mà chúng tôi muốn hỗ trợ nhập.

00:15:35.000 --> 00:15:42.000
Tôi sẽ căn cứ vào việc liệu có bất cứ thứ gì được chọn hay không, vì vậy tôi sẽ sử dụng lựa chọn của chúng tôi ở đây.

00:15:42.000 --> 00:15:50.000
Và nếu nó trống, tôi sẽ trả về một mảng trống.

00:15:50.000 --> 00:16:00.000
Và nếu nó không trống, tôi sẽ trả lại Plant.importImageTypes, đây là danh sách tất cả các loại hình ảnh trên hệ thống.

00:16:00.000 --> 00:16:07.000
Và công cụ sửa đổi này đóng cửa, được thông qua danh sách các nhà cung cấp mặt hàng.

00:16:07.000 --> 00:16:22.000
Chúng tôi sẽ lấy những nhà cung cấp đó và gọi Plant.importImageFromProviders, chuyển nó cho các nhà cung cấp và điều này sẽ trả lại cho chúng tôi một URL nơi nó đã lưu hình ảnh vào đĩa.

00:16:22.000 --> 00:16:27.000
Sau đó, chúng tôi sẽ cập nhật mô hình của mình bằng cách lặp lại tất cả các ID được chọn...

00:16:27.000 --> 00:16:41.000
...Và lấy một tham chiếu đến nhà máy và cập nhật hình ảnh của nóURL.

00:16:41.000 --> 00:16:46.000
Tôi sẽ chọn khu vườn Cây trồng trong nhà của mình và chuyển sang chế độ Thư viện.

00:16:46.000 --> 00:16:49.000
Và tôi sẽ làm mọi thứ lớn hơn một chút.

00:16:49.000 --> 00:16:51.000
Chọn cây của tôi ở đây.

00:16:51.000 --> 00:17:00.000
Trong mục menu chính, chọn Nhập từ iPhone &gt; Chụp ảnh.

00:17:00.000 --> 00:17:06.000
Và bạn có thể xem thư viện của chúng tôi được cập nhật.

00:17:06.000 --> 00:17:11.000
Tôi hy vọng đây là một chuyến tham quan thú vị về một số cách khác nhau để xác định một ứng dụng Mac tuyệt vời.

00:17:11.000 --> 00:17:16.000
Tôi đang mong chờ tất cả các cách mà các ứng dụng của bạn sẽ làm cho nền tảng macOS tốt hơn.

00:17:16.000 --> 00:17:20.000
Chúc bạn có một WWDC 2021 tuyệt vời.

00:17:20.000 --> 23:59:59.000
♪

