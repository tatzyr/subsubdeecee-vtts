WEBVTT

00:00:00.000 --> 00:00:12.000
Chào mừng đến với "Có gì mới trong UIKit" trong iOS 15.

00:00:12.000 --> 00:00:17.000
Tên tôi là Michael và sau đó tôi sẽ được tham gia bởi đồng nghiệp Jamie của tôi.

00:00:17.000 --> 00:00:21.000
iOS 15 được đóng gói đầy đủ các công nghệ và tính năng mới tuyệt vời.

00:00:21.000 --> 00:00:27.000
Chúng tôi đã cập nhật UIKit theo một số cách thú vị để giúp bạn áp dụng những khả năng mới này.

00:00:27.000 --> 00:00:39.000
Cùng nhau, Jamie và tôi sẽ đề cập đến các bản cập nhật năng suất, cải tiến giao diện người dùng, cải tiến API, cải tiến hiệu suất, cũng như một số tính năng bảo mật và quyền riêng tư mới.

00:00:39.000 --> 00:00:53.000
Năng suất là trọng tâm của iPadOS, và năm nay cũng không ngoại lệ, với các bản cập nhật cho iPad Multitasking, điều hướng bàn phím, phím tắt và con trỏ iPad, chỉ là một vài cái tên.

00:00:53.000 --> 00:00:59.000
Hãy bắt đầu với một bản demo ngắn về cách chúng tôi đã cập nhật Đa nhiệm để đưa iPad lên một tầm cao mới.

00:00:59.000 --> 00:01:09.000
Trong Mail, chúng tôi đang sử dụng tính năng Đa nhiệm cảnh trung tâm mới để giúp việc tập trung vào một tin nhắn dễ dàng hơn bao giờ hết.

00:01:09.000 --> 00:01:14.000
Chỉ cần nhấn và giữ một tin nhắn để mở menu ngữ cảnh và chọn "Mở trong Cửa sổ Mới".

00:01:14.000 --> 00:01:19.000
Điều này sẽ mở tin nhắn trong UIWindowScene của riêng nó ở giữa màn hình.

00:01:19.000 --> 00:01:22.000
Đây là một cách tuyệt vời để tập trung vào nhiệm vụ trong tầm tay.

00:01:22.000 --> 00:01:33.000
Cảnh trung tâm mới cũng có thể được di chuyển sang Split View bằng cách kéo và thả hoặc bằng cách chọn tùy chọn Split View trong menu Đa nhiệm mới ở đầu cảnh cửa sổ.

00:01:33.000 --> 00:01:41.000
Cách khác, bạn có thể vuốt xuống menu Đa nhiệm và gắn cảnh vào kệ cửa sổ mới.

00:01:41.000 --> 00:01:48.000
Thêm chức năng này vào ứng dụng của bạn cũng đơn giản như tạo một hành động kích hoạt cảnh cửa sổ mới.

00:01:48.000 --> 00:01:56.000
Hành động này đóng cửa trả về cấu hình kích hoạt, được tạo bằng NSUserActivity có thể được xử lý bởi ứng dụng của bạn.

00:01:56.000 --> 00:02:00.000
Thêm hành động này vào trình đơn ngữ cảnh và bạn đã sẵn sàng.

00:02:00.000 --> 00:02:06.000
Với iPadOS 13.4, chúng tôi đã giới thiệu Bàn phím ma thuật và một con trỏ.

00:02:06.000 --> 00:02:11.000
Trong iPadOS 15, chúng tôi đã cải thiện hỗ trợ con trỏ bằng cách thêm lựa chọn băng tần.

00:02:11.000 --> 00:02:19.000
Ngoài việc cung cấp API mới, chúng tôi đã bật lựa chọn dải theo mặc định cho UICollectionViews hỗ trợ đa lựa chọn.

00:02:19.000 --> 00:02:30.000
Chúng tôi cũng đã thêm các phụ kiện con trỏ cho phép bạn truyền đạt ngữ cảnh bổ sung hoặc gợi ý về chức năng bằng cách kết hợp các hình dạng phụ với bất kỳ kiểu con trỏ nào.

00:02:30.000 --> 00:02:35.000
Nhiều phụ kiện có thể được hiển thị cùng một lúc và được đặt xung quanh con trỏ.

00:02:35.000 --> 00:02:44.000
Chúng có cùng bản chất lỏng như con trỏ và hệ thống hoạt hình liền mạch giữa các hình dạng và vị trí phụ kiện khác nhau.

00:02:44.000 --> 00:02:49.000
Trong iPadOS 15, chúng tôi đã thiết kế lại hoàn toàn menu phím tắt.

00:02:49.000 --> 00:02:56.000
Với các phím tắt được phân loại và tìm kiếm tích hợp, việc tìm kiếm phím tắt bạn đang tìm kiếm chưa bao giờ dễ dàng hơn thế.

00:02:56.000 --> 00:03:05.000
Trình đơn Phím tắt mới cũng cung cấp sự cân bằng tăng lên giữa các phiên bản iPad và Mac Catalyst của ứng dụng của bạn.

00:03:05.000 --> 00:03:10.000
Để tận dụng tối đa các tính năng mới này, bạn cần áp dụng UIMenuBuilder.

00:03:10.000 --> 00:03:14.000
Triển khai buildMenuWithBuilder trên UIApplicationDelegate của bạn.

00:03:14.000 --> 00:03:22.000
Gán lệnh cho một trong các danh mục được xác định trước như "Xem" hoặc "Tệp" hoặc thậm chí tạo danh mục tùy chỉnh của riêng bạn.

00:03:22.000 --> 00:03:29.000
Để sử dụng các danh mục, bạn sẽ cần kiểm tra ứng dụng của mình để sử dụng thuộc tính keyCommands của UIResponder.

00:03:29.000 --> 00:03:34.000
Di chuyển bất kỳ lệnh nào được gán cho thuộc tính này sang hàm buildMenuWithBuilder.

00:03:34.000 --> 00:03:44.000
Để tìm hiểu thêm về Đa nhiệm, con trỏ iPad và menu Phím tắt mới, chúng tôi có một video tuyệt vời về việc đưa các ứng dụng iPad của bạn lên một tầm cao mới.

00:03:44.000 --> 00:03:51.000
Chúng tôi cũng đã thêm hỗ trợ phong phú cho điều hướng bàn phím dựa trên tiêu điểm trong iPadOS 15.

00:03:51.000 --> 00:03:58.000
Nếu bạn đã quen thuộc với hệ thống lấy nét trên tvOS, thì bạn sẽ rất vui khi biết nó hiện cũng có sẵn trong iPadOS.

00:03:58.000 --> 00:04:07.000
Trên thực tế, tất cả điều hướng tập trung trong tvOS, CarPlay, iPadOS và Mac Catalyst hiện được xây dựng trên UIFocusSystem.

00:04:07.000 --> 00:04:18.000
Với UIFocusSystem trên iPad và Mac Catalyst, các phím mũi tên được sử dụng để di chuyển giữa các mục tiêu điểm và phím tab để di chuyển giữa các nhóm tiêu điểm.

00:04:18.000 --> 00:04:33.000
Trong ví dụ này, ứng dụng Thư đang sử dụng UISplitViewController với thanh bên và khi sử dụng các thành phần UIKit tiêu chuẩn này, điều hướng bàn phím như được trình diễn sẽ được bật theo mặc định trong iPadOS 15.

00:04:33.000 --> 00:04:40.000
Kiểm tra "Tập trung vào điều hướng bàn phím" để tìm hiểu thêm về việc hỗ trợ điều hướng bàn phím trong ứng dụng của bạn.

00:04:40.000 --> 00:04:45.000
Một tính năng năng suất thiết yếu khác của iOS là Kéo và Thả cảm ứng đa điểm.

00:04:45.000 --> 00:04:50.000
Được giới thiệu trong iOS 11, Kéo và Thả là một cải tiến năng suất thiết yếu.

00:04:50.000 --> 00:04:58.000
Với một cử chỉ đơn giản, bạn có thể di chuyển dữ liệu liền mạch trong ứng dụng và trên iPadOS ngay cả giữa các ứng dụng.

00:04:58.000 --> 00:05:08.000
Với iOS 15, UIKit cũng cho phép kéo và thả giữa các ứng dụng trên iPhone, mở khóa nhiều tương tác mới thú vị.

00:05:08.000 --> 00:05:14.000
Ví dụ, bây giờ dễ dàng hơn bao giờ hết để nhanh chóng chia sẻ ý tưởng về một dây đeo đồng hồ mới với một người bạn.

00:05:14.000 --> 00:05:21.000
Với một cử chỉ, bạn có thể chỉ cần kéo một bức ảnh từ Safari ngay vào cuộc trò chuyện Tin nhắn.

00:05:21.000 --> 00:05:26.000
Các API Kéo và Thả không thay đổi để hỗ trợ khả năng mở rộng này.

00:05:26.000 --> 00:05:35.000
Để làm mới các chi tiết kỹ thuật, chúng tôi có bốn video tuyệt vời từ năm 2017 đi sâu về cách tận dụng Kéo và Thả.

00:05:35.000 --> 00:05:40.000
Tiếp theo, tôi sẽ chỉ cho bạn một số cải tiến giao diện người dùng trong iOS 15.

00:05:40.000 --> 00:05:44.000
Chúng tôi đã tinh chỉnh giao diện của UIToolbar và UITabBar.

00:05:44.000 --> 00:05:53.000
Giao diện được cập nhật này sẽ loại bỏ tài liệu nền khi cuộn xuống dưới cùng, mang lại sự rõ ràng hơn về mặt hình ảnh cho nội dung của bạn.

00:05:53.000 --> 00:06:01.000
Trong UITabBar, chúng tôi đã tăng cường hỗ trợ cho Biểu tượng SF, mang lại kết quả tuyệt vời khi sử dụng bất kỳ biểu tượng yêu thích nào của bạn.

00:06:01.000 --> 00:06:08.000
Mặc dù UIKit cố gắng hết sức để làm cho giao diện mới này liền mạch trong ứng dụng của bạn, nhưng có một vài vấn đề bạn có thể gặp phải.

00:06:08.000 --> 00:06:19.000
Bạn nên kiểm tra mã của mình cho những nơi mà bạn có thể đặt thuộc tính mờ của thanh thành sai và kiểm tra bất kỳ UIViewControllers nào có các cạnh không chuẩn ForExtendedLayout.

00:06:19.000 --> 00:06:25.000
Cả hai điều kiện này sẽ gây ra các vấn đề về thị giác với diện mạo mới.

00:06:25.000 --> 00:06:35.000
Nếu hành vi mặc định mới không phù hợp với ứng dụng của bạn, chỉ cần tạo giao diện tùy chỉnh và gán nó cho thuộc tính scrollEdgeAppearance trên thanh của bạn.

00:06:35.000 --> 00:06:44.000
Thuộc tính này trước đây chỉ có sẵn trên UINavigationBar nhưng hiện cũng có sẵn trên UIToolbar và UITabBar.

00:06:44.000 --> 00:06:51.000
Cài đặt giao diện tùy chỉnh sẽ tránh được bất kỳ vấn đề trực quan nào gây ra bởi các API không tương thích đã đề cập trước đó.

00:06:51.000 --> 00:07:01.000
Ngoài ra, có thể UIKit sẽ không thể suy ra chế độ xem cuộn thích hợp để quan sát khi thực hiện chuyển đổi giao diện cạnh cuộn mới.

00:07:01.000 --> 00:07:08.000
Để chỉ định trực tiếp scrollView, chúng tôi đã thêm một chức năng mới trên UIViewController - setContentScrollView cho cạnh.

00:07:08.000 --> 00:07:10.000
Nhìn vào tất cả các quán bar của bạn.

00:07:10.000 --> 00:07:12.000
Hãy chắc chắn rằng ngoại hình là những gì bạn mong đợi.

00:07:12.000 --> 00:07:18.000
Hãy chắc chắn kiểm tra bất cứ nơi nào bạn đã làm điều gì đó đặc biệt - nó có thể cần được chú ý thêm.

00:07:18.000 --> 00:07:22.000
Chúng tôi có một diện mạo mới cho các tiêu đề trong iOS 15.

00:07:22.000 --> 00:07:33.000
Đối với các danh sách đơn giản, tiêu đề phần hiện hiển thị liền mạch phù hợp với nội dung và chỉ hiển thị tài liệu nền có thể nhìn thấy khi được ghim lên trên cùng khi bạn cuộn xuống.

00:07:33.000 --> 00:07:42.000
Ngoài ra, có phần đệm mới được chèn phía trên mỗi tiêu đề phần để phân tách trực quan các phần với thiết kế mới này.

00:07:42.000 --> 00:07:51.000
Bạn nên sử dụng phong cách đơn giản này kết hợp với các thanh chỉ mục để xóa nhanh khi nội dung danh sách dài như được thể hiện trong ứng dụng Danh bạ.

00:07:51.000 --> 00:07:54.000
UIKit cũng cung cấp một phong cách nhóm.

00:07:54.000 --> 00:08:00.000
Cái này được sử dụng trong giao diện người dùng không chứa nhiều nội dung tùy chỉnh hoặc trực quan phong phú.

00:08:00.000 --> 00:08:09.000
Đây là một lựa chọn tuyệt vời cho giao diện người dùng cấu hình hoặc quy trình đăng ký tương tự như những gì bạn tìm thấy trong ứng dụng Cài đặt.

00:08:09.000 --> 00:08:17.000
Kiểu tiêu đề nổi bật rất giống với kiểu tiêu đề thanh bên hiện có được sử dụng cho danh sách thanh bên trên iPad.

00:08:17.000 --> 00:08:25.000
Các tiêu đề nổi bật là một lựa chọn tuyệt vời để sử dụng khi điều chỉnh danh sách .sidebar thành danh sách .insetGrouped trong một lớp kích thước nhỏ gọn.

00:08:25.000 --> 00:08:30.000
Tab báo thức trong ứng dụng Đồng hồ tận dụng tuyệt vời phong cách mới này.

00:08:30.000 --> 00:08:41.000
Và cuối cùng, chúng tôi có một phong cách nhóm cực kỳ nổi bật mới để sử dụng với nội dung phong phú về mặt thị giác để các tiêu đề duy trì hệ thống phân cấp và tránh bị mất.

00:08:41.000 --> 00:08:46.000
Kiểm tra Thư viện khuôn mặt của ứng dụng Đồng hồ để xem phong cách này đang hoạt động.

00:08:46.000 --> 00:08:54.000
Để truy cập tất cả các kiểu tiêu đề tuyệt vời này, hãy sử dụng UIListContentConfiguration API được giới thiệu trong iOS 14.

00:08:54.000 --> 00:09:04.000
Trong iOS 14.5, chúng tôi đã giới thiệu UIListSeparatorConfiguration cho phép kiểm soát hoàn toàn các dấu phân cách trong danh sách.

00:09:04.000 --> 00:09:15.000
Bạn có thể chỉ định cấu hình cho toàn bộ danh sách hoặc bạn có thể ghi đè giao diện do hệ thống tạo trên cơ sở mỗi hàng, cho phép bạn toàn quyền kiểm soát các dấu phân cách.

00:09:15.000 --> 00:09:23.000
Các trang tính trong iOS 15 có khả năng chỉ che một nửa màn hình, được hiển thị ở cái mà chúng ta gọi là chân đế có chiều cao trung bình.

00:09:23.000 --> 00:09:35.000
Với chức năng nửa chiều cao mới này, bạn có thể tùy chọn tắt tính năng làm mờ phía sau lỗ này để tạo ra trải nghiệm phi phương thức cho phép tương tác cả bên trong và phía sau trang tính.

00:09:35.000 --> 00:09:43.000
Xem "Tùy chỉnh và thay đổi kích thước trang tính trong UIKit" để tìm hiểu về tất cả các cách chúng tôi đã nâng cao trang tính trong iOS 15.

00:09:43.000 --> 00:09:46.000
Tiếp theo là UIDatePicker.

00:09:46.000 --> 00:09:52.000
Và vâng, trong iOS 15, chúng tôi đang giới thiệu lại bánh xe thời gian.

00:09:52.000 --> 00:09:56.000
Nhưng bây giờ, bạn có thể chỉ cần nhấn vào thời gian để sử dụng bàn phím để nhập.

00:09:56.000 --> 00:10:01.000
Và với Magic Keyboard trên iPad, bạn thậm chí có thể chỉnh sửa thời gian ngay trong dòng.

00:10:01.000 --> 00:10:05.000
Tất nhiên, bạn vẫn có thể chạm vào màn hình để lộ những bánh xe tuyệt đẹp đó.

00:10:05.000 --> 00:10:09.000
Và với điều đó, tôi sẽ giao nó cho đồng nghiệp Jamie của tôi.

00:10:09.000 --> 00:10:11.000
Cảm ơn, Mike!

00:10:11.000 --> 00:10:16.000
Tôi sẽ bắt đầu xem xét thêm một số cải tiến cho UIKit APIs trong iOS 15.

00:10:16.000 --> 00:10:21.000
Những cải tiến API đầu tiên của chúng tôi theo nhiều cách cũng là một sự tinh chỉnh giao diện người dùng.

00:10:21.000 --> 00:10:28.000
Chúng tôi đã thêm các API mới vào UIButton, để cho phép bạn cấu hình linh hoạt giao diện nút của mình.

00:10:28.000 --> 00:10:41.000
Cũng như phong cách Plain hiện có, chúng tôi đã thêm Gray, có nền màu xám, Tinted, có nền nhuốm màu và Filled, hoàn toàn mờ đục.

00:10:41.000 --> 00:10:52.000
Ngoài các kiểu mới, các nút hiện hỗ trợ thay đổi kích thước tốt hơn để đáp ứng với cài đặt "kích thước văn bản" của hệ thống được gọi là Loại động và lần đầu tiên chính thức hỗ trợ văn bản nhiều dòng.

00:10:52.000 --> 00:11:03.000
Những thay đổi này và UIButton.Configuration API mới cho phép chúng, không chỉ làm cho các nút mạnh hơn, chúng còn có thể tùy chỉnh và dễ cập nhật hơn.

00:11:03.000 --> 00:11:16.000
Cùng với các bổ sung UIMenu cho các nút được phát hành trong iOS 14, UIButtonConfiguration cho phép bạn tạo các nút bật lên và kéo xuống nguyên bản trong UIKit lần đầu tiên.

00:11:16.000 --> 00:11:28.000
Và, tất nhiên, nếu bạn đang sử dụng UIKit trên Mac và bạn đã chọn Xcode để "Tối ưu hóa giao diện cho Mac", tất cả các nút này đều trông và hoạt động giống như bạn mong đợi.

00:11:28.000 --> 00:11:31.000
Đây là một ví dụ về việc API dễ sử dụng như thế nào.

00:11:31.000 --> 00:11:34.000
Chỉ cần tạo một cấu hình nút.

00:11:34.000 --> 00:11:39.000
Trình tạo này tạo ra phong cách Tinted.

00:11:39.000 --> 00:11:43.000
Các thuộc tính của cấu hình được sử dụng để tùy chỉnh nút.

00:11:43.000 --> 00:11:46.000
Và sau đó khởi tạo nút, chuyển cấu hình.

00:11:46.000 --> 00:11:53.000
Nó không được hiển thị ở đây, nhưng điều duy nhất còn lại là thêm một hành động và thêm nút vào chế độ xem của bạn.

00:11:53.000 --> 00:12:02.000
Có rất nhiều thứ trong UIButtonConfiguration hơn tôi có thể đề cập ở đây, vì vậy có một video đầy đủ bao gồm nó và các cải tiến khác cho UIButton, chi tiết.

00:12:02.000 --> 00:12:07.000
Kiểm tra "Gặp gỡ Hệ thống Nút UIKit" để tìm hiểu tất cả về các API nút.

00:12:07.000 --> 00:12:14.000
UIContextMenuInteraction trên iOS và iPadOS hiện hỗ trợ các menu con có thể thu gọn.

00:12:14.000 --> 00:12:21.000
Chúng xuất hiện khi bạn nhấn vào bất kỳ mục nào có chevron như mục "Sắp xếp theo" trong menu này.

00:12:21.000 --> 00:12:22.000
Không có API mới cho việc này.

00:12:22.000 --> 00:12:31.000
UIMenu API đã hỗ trợ các menu con, nhưng trước iOS 15, chúng đã thay thế hoàn toàn menu hiện tại khi bạn nhấn vào chúng.

00:12:31.000 --> 00:12:38.000
Điều này cũng được thảo luận thêm một chút trong video "Gặp gỡ Hệ thống Nút UIKit".

00:12:38.000 --> 00:12:47.000
Trong iOS 13, chúng tôi đã giới thiệu Biểu tượng SF - hàng trăm biểu tượng có thể mở rộng trông tuyệt vời bên cạnh phông chữ San Francisco của chúng tôi.

00:12:47.000 --> 00:12:49.000
Trong iOS 15, những thứ này thậm chí còn tốt hơn.

00:12:49.000 --> 00:12:59.000
Không chỉ có các biểu tượng bổ sung mà chúng tôi còn bổ sung khả năng sử dụng màu sắc theo ba cách mới: Phân cấp, Bảng màu và Nhiều màu.

00:12:59.000 --> 00:13:04.000
Biểu tượng đơn sắc là những hình ảnh đơn sắc mà bạn đã biết và yêu thích.

00:13:04.000 --> 00:13:11.000
Các ký hiệu phân cấp áp dụng một màu sắc thái duy nhất được chỉ định trong thời gian chạy cho một hệ thống phân cấp các lớp.

00:13:11.000 --> 00:13:16.000
Các biểu tượng bảng màu cho phép nhiều màu được chỉ định rõ ràng.

00:13:16.000 --> 00:13:24.000
Và các biểu tượng nhiều màu, trước đây chỉ có trong AppKit và SwiftUI, có biểu diễn nhiều màu cố định.

00:13:24.000 --> 00:13:32.000
Các API mới để sử dụng tất cả các chế độ đầy màu sắc này có sẵn trong UIKit, SwiftUI và AppKit.

00:13:32.000 --> 00:13:34.000
Các API thực sự dễ sử dụng.

00:13:34.000 --> 00:13:49.000
Mã này thiết lập UIImageSymbolConfiguration để sử dụng màu cam của hệ thống làm cơ sở cho việc pha màu phân cấp, và sau đó sử dụng nó để tạo ra hình ảnh này của biểu tượng mặt trời màu cam nhuốm màu phân cấp.

00:13:49.000 --> 00:13:54.000
Nếu bạn thường xuyên sử dụng SFSymbols, bạn biết chúng có một vài biến thể phong cách.

00:13:54.000 --> 00:13:58.000
Ví dụ, lấp đầy, trên hình tròn hoặc trên hình chữ nhật.

00:13:58.000 --> 00:14:04.000
Trong các bản phát hành trước, chúng được chọn bằng cách chỉ định các chuỗi chấm.

00:14:04.000 --> 00:14:15.000
Trong iOS 15, có một API UIImage mới giúp làm việc với các biến thể này cực kỳ dễ dàng, cho dù bạn muốn chỉ định loại trước hay tạo một biến thể của hình ảnh hiện có.

00:14:15.000 --> 00:14:21.000
Đây là biểu tượng được biểu thị bằng chuỗi "trái tim" và hai trong số các biến thể của nó, hiện có thể được chọn trong mã.

00:14:21.000 --> 00:14:30.000
Có rất nhiều video về tất cả các khía cạnh của Biểu tượng SF trong bộ sưu tập "Thiết kế và xây dựng Biểu tượng SF", và tôi khuyến khích bạn kiểm tra tất cả chúng.

00:14:30.000 --> 00:14:38.000
Có nhiều hơn về UIKit API cụ thể trong "Biểu tượng SF trong UIKit và AppKit."

00:14:38.000 --> 00:14:46.000
Các đặc điểm UIContentSizeCategory đại diện cho cài đặt kích thước văn bản hệ thống, còn được gọi là kích thước loại động, trong mã.

00:14:46.000 --> 00:14:54.000
Bạn có thể đặt nhãn, trường văn bản, chế độ xem văn bản và chế độ xem hình ảnh của mình - có thể chứa SFSymbols - để tự động điều chỉnh theo cài đặt.

00:14:54.000 --> 00:15:00.000
Trong iOS 15, chúng tôi đã thêm một cách mới để hạn chế cách áp dụng các đặc điểm để xem hệ thống phân cấp.

00:15:00.000 --> 00:15:04.000
Điều này cho phép bạn dễ dàng đặt sàn hoặc trần cho kích thước.

00:15:04.000 --> 00:15:10.000
Đây có thể là một trợ giúp tuyệt vời khi bạn đảm bảo văn bản và hình ảnh của ứng dụng của mình trông tuyệt vời ở mọi cài đặt kích thước văn bản.

00:15:10.000 --> 00:15:15.000
Ở đây, Clock đang giới hạn mức độ nhỏ của nhãn thời gian lớn của nó.

00:15:15.000 --> 00:15:19.000
Vui lòng không sử dụng API này để giới hạn quá mức kích thước văn bản.

00:15:19.000 --> 00:15:30.000
Các cài đặt này phục vụ một chức năng cực kỳ quan trọng và điều tối quan trọng là tất cả chức năng của ứng dụng của bạn đều có sẵn và mọi thứ đều dễ đọc đối với những người sử dụng cài đặt kích thước văn bản cao nhất.

00:15:30.000 --> 00:15:38.000
Vì vậy, như một ví dụ khác, bạn có thể sử dụng điều này để hạn chế sự phát triển của một tiêu đề đã rất lớn ở kích thước mặc định.

00:15:38.000 --> 00:15:42.000
Chúng tôi đã thống nhất màu sắc hệ thống trên tất cả các nền tảng của mình.

00:15:42.000 --> 00:15:44.000
Điều này có ý nghĩa gì đối với UIKit?

00:15:44.000 --> 00:15:53.000
Chà, có một số thay đổi tinh tế đối với một số màu và một số màu trước đây chỉ có sẵn trong các khuôn khổ khác hiện cũng có sẵn trong UIKit ở bất cứ nơi nào ứng dụng của bạn đang chạy.

00:15:53.000 --> 00:16:00.000
Vì vậy, nếu bạn muốn sử dụng systemMint hoặc systemBrown trong ứng dụng UIKit của mình, bây giờ là lúc.

00:16:00.000 --> 00:16:03.000
UIColor.tintColor cũng mới.

00:16:03.000 --> 00:16:09.000
Đó là một màu được giải quyết trong thời gian chạy, dựa trên màu sắc thái hiện tại của ứng dụng hoặc hệ thống phân cấp đặc điểm.

00:16:09.000 --> 00:16:17.000
Nó hoàn hảo để sử dụng với UIButton.Configuration mới và các API Biểu tượng SF đầy màu sắc mới.

00:16:17.000 --> 00:16:26.000
Cùng với UIColor, cũng có những cải tiến cho UIColorPicker ViewController, giao diện tiêu chuẩn để trộn và chọn màu.

00:16:26.000 --> 00:16:39.000
Trong iOS 14.5, có một cuộc gọi lại mới, colorPickerViewController(didSelect:continuously:), cho phép giao diện người dùng ứng dụng được cập nhật khi màu sắc được trộn lẫn và thay đổi, cũng như khi quá trình chọn hoàn tất.

00:16:39.000 --> 00:16:48.000
TextKit 2 là hệ thống bố cục văn bản thế hệ tiếp theo mới có sẵn trong iOS, iPadOS, tvOS và macOS.

00:16:48.000 --> 00:16:56.000
Đó là một hệ thống mới mạnh mẽ giúp bạn dễ dàng thể hiện những gì bạn muốn làm với văn bản và nó thực hiện nó theo cách nhanh chóng, hiệu suất cao.

00:16:56.000 --> 00:17:08.000
UIKit đã áp dụng nó ở hậu trường để cung cấp năng lượng cho UITextField, nơi nó mang lại bố cục tốt hơn cho văn bản bằng các ngôn ngữ có tập lệnh phức tạp, như Kannada mà không cần áp dụng.

00:17:08.000 --> 00:17:16.000
Nếu bạn muốn biết thêm về TextKit 2, nó có thể làm gì và cách sử dụng nó trong các ứng dụng của mình, hãy xem "Gặp gỡ TextKit 2".

00:17:16.000 --> 00:17:25.000
UISceneSession đại diện cho một phiên bản giao diện người dùng ứng dụng của bạn và tương ứng với cửa sổ ứng dụng được thể hiện trong trình chuyển đổi ứng dụng.

00:17:25.000 --> 00:17:30.000
Trạng thái giao diện được đại diện bởi NSUserActivity.

00:17:30.000 --> 00:17:40.000
Ứng dụng của bạn cung cấp NSUserActivity này cho hệ thống khi một cảnh đi vào nền và nên sử dụng nó để khôi phục trạng thái giao diện khi cảnh được khôi phục lại.

00:17:40.000 --> 00:17:44.000
Trong iPadOS 15, có một vài API mới để làm cho việc này dễ dàng hơn.

00:17:44.000 --> 00:17:50.000
Có một cách mới để có được và thiết lập trạng thái thoáng qua của chế độ xem nhập văn bản của chúng tôi.

00:17:50.000 --> 00:17:56.000
Có một cuộc gọi lại UIScene mới cung cấp một nơi thuận tiện hơn để khôi phục trạng thái sau khi tải bảng phân cảnh.

00:17:56.000 --> 00:18:05.000
Và có một cơ hội để mở rộng quá trình khởi chạy ứng dụng và trì hoãn khi giao diện người dùng ứng dụng của bạn hoạt động nếu bạn có mã mô hình không đồng bộ trả về trạng thái.

00:18:05.000 --> 00:18:09.000
Tất cả các nỗ lực kỹ thuật của chúng tôi đều tập trung vào các API dựa trên UIScene.

00:18:09.000 --> 00:18:19.000
Nếu bạn vẫn đang sử dụng vòng đời dựa trên UIApplication cũ từ trước khi UIScene được giới thiệu trong iPadOS 13, bây giờ là lúc để chuyển sang UIScene.

00:18:19.000 --> 00:18:27.000
Tất cả các ứng dụng UIKit đều có thể sử dụng nó. Không cần hỗ trợ nhiều cửa sổ, mặc dù, đối với các ứng dụng iPad và Mac, đó là một ý tưởng tuyệt vời.

00:18:27.000 --> 00:18:35.000
Để được bồi dưỡng về UIScene và biết thêm chi tiết về các API khôi phục trạng thái nâng cao, hãy xem "Đưa các ứng dụng iPad của bạn lên một tầm cao mới."

00:18:35.000 --> 00:18:46.000
Nói về các cảnh, trong UIKit trong iOS 15, có các API mới cho phép các ứng dụng thể hiện nội dung có thể chia sẻ hiện đang được tương tác trong mỗi cảnh.

00:18:46.000 --> 00:18:56.000
Chúng được sử dụng bởi tính năng Siri "Chia sẻ cái này" mới trên iOS và Mac, và bởi NSSharingServicePickerToolbarItem trên Mac Catalyst.

00:18:56.000 --> 00:19:06.000
Có rất nhiều chi tiết hơn trong các video "Thiết kế các hành động tuyệt vời cho Phím tắt, Siri và Đề xuất" và "Chất lượng của một ứng dụng Mac Catalyst tuyệt vời".

00:19:06.000 --> 00:19:13.000
Đối với những cải tiến API cuối cùng của chúng tôi, chúng tôi sẽ quay lại với những người bạn thân yêu của chúng tôi, UICollectionView và UITableView.

00:19:13.000 --> 00:19:22.000
Trong iOS 14, chúng tôi đã giới thiệu các API mới để cho phép bạn định cấu hình giao diện của các ô dễ dàng và nhất quán hơn nhiều so với trước đây.

00:19:22.000 --> 00:19:30.000
Trong iOS 15, các trình xử lý cập nhật dựa trên đóng mới giúp cấu hình lại các ô của bạn dễ dàng hơn bao giờ hết.

00:19:30.000 --> 00:19:35.000
Bạn không còn cần tạo một lớp con ô và ghi đè updateConfiguration bằng trạng thái.

00:19:35.000 --> 00:19:40.000
Bây giờ bạn có thể viết mã đó nội tuyến, ở cùng một nơi bạn tạo các ô.

00:19:40.000 --> 00:19:44.000
Ở đây, chúng tôi đang làm xám văn bản của mình khi ô bị vô hiệu hóa.

00:19:44.000 --> 00:19:51.000
Các chức năng dựa trên đóng tương tự cũng có sẵn trong UIButtonConfiguration APIs mới.

00:19:51.000 --> 00:19:56.000
Chúng tôi đã cải thiện nguồn dữ liệu có thể thay đổi để giúp cập nhật bộ sưu tập và chế độ xem bảng của bạn dễ dàng hơn.

00:19:56.000 --> 00:20:06.000
Trong iOS 15, khi bạn áp dụng ảnh chụp nhanh mà không tạo hiệu ứng động cho sự khác biệt, giao diện người dùng sẽ cập nhật dựa trên những thay đổi đó mà không loại bỏ tất cả các ô hiện có.

00:20:06.000 --> 00:20:17.000
Và có API mới để cấu hình lại các mục một cách hiệu quả, vì vậy bạn có thể cập nhật nội dung được hiển thị trong các ô hiện có khi các thuộc tính của các mục thay đổi mà không thay đổi danh tính của chúng.

00:20:17.000 --> 00:20:23.000
Mọi thiết bị mà UIKit chạy đều có nhiều lõi xử lý và phần cứng đồ họa mạnh mẽ.

00:20:23.000 --> 00:20:28.000
Mọi thứ nên diễn ra nhanh chóng. Hoạt ảnh và cuộn phải luôn mượt mà.

00:20:28.000 --> 00:20:36.000
Trong iOS 15, có một vài cải tiến và API mới giúp các ứng dụng xây dựng với những đặc điểm này trở nên dễ dàng hơn.

00:20:36.000 --> 00:20:40.000
Hãy nói về một vài trong số những cái có sẵn trong UIKit.

00:20:40.000 --> 00:20:44.000
Đầu tiên, chúng ta sẽ quay lại UICollectionView và UITableView.

00:20:44.000 --> 00:20:48.000
iOS 15 giới thiệu các thay đổi đối với tìm nạp trước ô.

00:20:48.000 --> 00:20:52.000
Những thay đổi này tự động có hiệu lực khi bạn xây dựng cho iOS 15.

00:20:52.000 --> 00:21:01.000
Họ có thể cung cấp cho các ứng dụng gấp đôi lượng thời gian - gần như giá trị của hai khung hình ảnh - để chuẩn bị các ô trong khi vẫn giữ cho cuộn hoàn toàn mượt mà.

00:21:01.000 --> 00:21:03.000
Nhiều ô hiển thị hình ảnh.

00:21:03.000 --> 00:21:11.000
Trong quá khứ, bạn có thể đã nhận thấy sự gián đoạn nhất thời trong việc cuộn khi hàng đợi giao diện người dùng chính bị ràng buộc để giải mã các hình ảnh lớn.

00:21:11.000 --> 00:21:15.000
Trong iOS 15, mã ứng dụng có thể kiểm soát nhiều hơn quá trình này.

00:21:15.000 --> 00:21:21.000
Có những chức năng dễ dàng mới để chuẩn bị hình ảnh nên chúng hoàn toàn sẵn sàng khi ứng dụng của bạn cần hiển thị chúng.

00:21:21.000 --> 00:21:30.000
Và các chức năng này dễ sử dụng không đồng bộ, vì vậy hàng đợi giao diện người dùng có thể tự do xử lý các sự kiện trong khi hình ảnh đang được giải mã.

00:21:30.000 --> 00:21:35.000
Nhiều ứng dụng xử lý hình ảnh lớn, nhưng hiển thị chúng ở kích thước nhỏ.

00:21:35.000 --> 00:21:46.000
Để giải quyết vấn đề này, có các API UIImage mới thay đổi kích thước hình ảnh hiệu quả hơn - và tiết kiệm bộ nhớ - bằng cách sử dụng kiến thức của hệ thống về hình ảnh và màn hình.

00:21:46.000 --> 00:21:58.000
Để biết thêm chi tiết về chế độ xem bộ sưu tập và cải tiến hình ảnh này, thông tin về cách bạn có thể tận dụng chúng và một số mẹo hiệu suất tuyệt vời khác, hãy xem "Tạo danh sách nhanh và chế độ xem bộ sưu tập".

00:21:58.000 --> 00:22:03.000
Swift đã giới thiệu các tính năng mới giúp viết mã không đồng bộ dễ dàng hơn bao giờ hết.

00:22:03.000 --> 00:22:14.000
Hầu hết các API UIKit phải được gọi trên hàng đợi UI chính và chúng tôi đã chú thích các API đó là Tác nhân chính để đảm bảo rằng điều này được thực thi, lần đầu tiên, tại thời điểm biên dịch.

00:22:14.000 --> 00:22:25.000
Trong các lĩnh vực khác, như các tính năng chuẩn bị UIImage mới, chúng tôi đã tinh chỉnh các API của mình để đảm bảo rằng UIKit dễ dàng và an toàn để sử dụng với các tính năng ngôn ngữ Swift không đồng bộ mới.

00:22:25.000 --> 00:22:34.000
Kiểm tra "Gặp gỡ không đồng bộ/chờ đợi trong Swift" và "Gặp gỡ AsyncSequence" để bắt đầu với cách phát triển mã không đồng bộ mới này.

00:22:34.000 --> 00:22:37.000
Bây giờ, bảo mật và quyền riêng tư.

00:22:37.000 --> 00:22:45.000
Chúng tôi đã xây dựng một số công nghệ mới vào iOS 15 cho phép hệ thống xác minh giao diện nào đang thực sự được tương tác.

00:22:45.000 --> 00:22:53.000
Chúng tôi đã tích hợp cái này vào UIKit ở một vài nơi, và ở đây, tôi sẽ nói về ba thứ có thể ảnh hưởng đến ứng dụng của bạn.

00:22:53.000 --> 00:22:56.000
Đầu tiên, Nút Vị trí.

00:22:56.000 --> 00:23:06.000
OS 15 giới thiệu một API mới cho phép các ứng dụng nhúng các nút cấp quyền truy cập từng trường hợp, một lần vào vị trí hiện tại của thiết bị.

00:23:06.000 --> 00:23:12.000
Họ làm điều này khi, và chỉ khi, họ được khai thác mà không có nhiều cảnh báo hoặc lời nhắc.

00:23:12.000 --> 00:23:22.000
API rất linh hoạt, vì vậy nó có thể phù hợp với mọi giao diện của ứng dụng, nhưng đằng sau hậu trường, nó đảm bảo các nút luôn rõ ràng và dễ đọc, nếu không chúng sẽ không hoạt động.

00:23:22.000 --> 00:23:34.000
Có cả một video thảo luận về cách nhúng cái này vào bất kỳ ứng dụng nào, "Gặp gỡ nút Vị trí" Tôi chắc rằng bạn đã nhận thấy biểu ngữ này, được giới thiệu trong iOS 14.

00:23:34.000 --> 00:23:41.000
Nó được hiển thị khi một ứng dụng truy cập dữ liệu được sao chép vào bảng dán trong một ứng dụng khác.

00:23:41.000 --> 00:23:52.000
Trong iOS 15, chúng tôi sẽ loại bỏ biểu ngữ bất cứ khi nào hệ thống có thể xác nhận rằng dữ liệu đã được truy cập sau khi tương tác có chủ ý với giao diện dán hệ thống tiêu chuẩn.

00:23:52.000 --> 00:23:59.000
Ví dụ, nhấn vào nút dán trong menu chỉnh sửa hoặc Cmd-V trên bàn phím phần cứng.

00:23:59.000 --> 00:24:04.000
Chúng tôi cũng đã thêm API để cung cấp một vài mục menu Dán tiêu chuẩn mới.

00:24:04.000 --> 00:24:08.000
Khi những thứ này được sử dụng, biểu ngữ thông báo cũng không được hiển thị.

00:24:08.000 --> 00:24:16.000
Chúng tôi cung cấp những cách mới để xác định "Dán", "Dán và Đi", "Dán và Tìm kiếm" và "Paste and Match Style".

00:24:16.000 --> 00:24:26.000
Đối với mỗi cái này, có các bộ chọn UIResponder tiêu chuẩn - để sử dụng với UIMenuController và UICommand - và các số nhận dạng mới - để sử dụng với UIAction.

00:24:26.000 --> 00:24:33.000
Đôi khi một ứng dụng muốn biết thêm thông tin về những gì có trên bảng dán, nhưng không cần truy cập đầy đủ.

00:24:33.000 --> 00:24:42.000
Trong iOS 14, chúng tôi đã giới thiệu một API mà các ứng dụng có thể sử dụng để kiểm tra xem có số, URL web có thể xảy ra hay cụm từ tìm kiếm web có thể xảy ra trên bảng dán hay không.

00:24:42.000 --> 00:24:45.000
Và chúng tôi tự sử dụng những thứ này trong Máy tính và Safari.

00:24:45.000 --> 00:24:52.000
Trong iOS 15, API này đã được mở rộng đáng kể để bao gồm tất cả các loại Máy dò Dữ liệu tiêu chuẩn.

00:24:52.000 --> 00:24:57.000
Không cái nào trong số này sẽ hiển thị thông báo, bởi vì chúng không cấp quyền truy cập vào chính dữ liệu.

00:24:57.000 --> 00:25:13.000
Ngoài ra còn có các API để truy xuất các giá trị dữ liệu mà không cần phải tự phân tích văn bản, mặc dù nếu các API này được sử dụng bất cứ lúc nào khác ngoài sau khi sử dụng giao diện dán tiêu chuẩn, hệ thống sẽ hiển thị thông báo dán.

00:25:13.000 --> 00:25:22.000
Cải tiến quyền riêng tư cuối cùng của chúng tôi là mới trong iOS 14.5 và được xây dựng trên phiên bản đầu tiên của công nghệ cung cấp năng lượng cho giao diện vị trí và dán.

00:25:22.000 --> 00:25:26.000
UIEventAttribution được phát triển cùng với nhóm WebKit.

00:25:26.000 --> 00:25:31.000
Tính năng Đo lường Nhấp chuột Riêng tư của WebKit cung cấp Đo lường Nhấp chuột Web-to-Web.

00:25:31.000 --> 00:25:37.000
UIEventAttribution đưa PCM đến UIKit và cung cấp Đo lường Nhấp chuột Từ Ứng dụng đến Web.

00:25:37.000 --> 00:25:41.000
Điều này có nghĩa là đo lường bảo vệ quyền riêng tư của các lần nhấp và nhấn quảng cáo.

00:25:41.000 --> 00:25:53.000
Thật dễ dàng để sử dụng - chỉ cần che quảng cáo của bạn bằng UIEventAttributionViews và chuyển đối tượng UIEventAttribution cùng với bất kỳ URL nào bạn mở để phản hồi các lần nhấn quảng cáo.

00:25:53.000 --> 00:25:58.000
Để tìm hiểu thêm về điều này, hãy xem video "Gặp gỡ phân bổ quảng cáo bảo vệ quyền riêng tư".

00:25:58.000 --> 00:26:04.000
Ngoài ra còn có một bài đăng trên blog WebKit.org tuyệt vời có tựa đề "Giới thiệu phép đo nhấp chuột riêng tư".

00:26:04.000 --> 00:26:09.000
Chà, đó là một cơn lốc, và chúng tôi thậm chí còn không đề cập đến mọi thứ mới.

00:26:09.000 --> 00:26:11.000
Tiếp theo là gì?

00:26:11.000 --> 00:26:16.000
Vui lòng truy cập và biên dịch ứng dụng của bạn bằng SDK iOS 15.

00:26:16.000 --> 00:26:21.000
Thử nghiệm các tính năng mới như Kéo và Thả trên iPhone và màu sắc hệ thống nâng cao của chúng tôi.

00:26:21.000 --> 00:26:28.000
Áp dụng giao diện iOS 15 mới với các nút, thanh, danh sách và biểu tượng mới.

00:26:28.000 --> 00:26:34.000
Áp dụng các tính năng iPad mới của chúng tôi để hỗ trợ đa nhiệm, bàn phím và bàn di chuột tốt hơn.

00:26:34.000 --> 00:26:42.000
Và sử dụng UIKit APIs mới để tôn trọng quyền riêng tư của người dùng và tạo ra các ứng dụng thậm chí còn tốt hơn, thậm chí nhanh hơn, thậm chí dễ dàng hơn.

00:26:42.000 --> 23:59:59.000
Cảm ơn bạn.

