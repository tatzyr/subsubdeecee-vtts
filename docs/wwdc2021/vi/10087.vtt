WEBVTT

00:00:00.000 --> 00:00:12.000
Xin chào, tôi là Sonia, một kỹ sư công cụ hiệu suất.

00:00:12.000 --> 00:00:19.000
Hôm nay, đồng nghiệp Shreyas của tôi và tôi sẽ chỉ cho bạn cách chẩn đoán hồi quy năng lượng và hiệu suất trong ứng dụng của bạn.

00:00:19.000 --> 00:00:23.000
Hàng năm, bạn làm việc chăm chỉ để phát hành các ứng dụng tốt nhất có thể.

00:00:23.000 --> 00:00:32.000
Bạn muốn mời người dùng trải nghiệm tuyệt vời trong các ứng dụng của mình, đó là lý do tại sao việc tối ưu hóa sức mạnh và hiệu suất rất quan trọng.

00:00:32.000 --> 00:00:48.000
Bài nói chuyện này sẽ bao gồm các chỉ số chính ảnh hưởng đến hiệu suất ứng dụng của bạn, các công cụ giúp bạn khám phá hồi quy, thông tin chi tiết để giúp bạn giảm ghi đĩa và API để tự động hóa quy trình làm việc hiệu suất của bạn.

00:00:48.000 --> 00:01:01.000
Để giúp bạn tối ưu hóa hiệu suất, có một bộ số liệu và chẩn đoán toàn diện có sẵn cho bạn thông qua Xcode Organizer và App Store Connect API, mà không có bất kỳ thay đổi nào đối với ứng dụng của bạn.

00:01:01.000 --> 00:01:04.000
Như bạn đã biết, hiệu suất không dễ để tối ưu hóa.

00:01:04.000 --> 00:01:11.000
Với rất nhiều số liệu và chẩn đoán có sẵn, có thể dễ dàng bị lạc trong biển thông tin.

00:01:11.000 --> 00:01:18.000
Bạn muốn làm cho mỗi bản phát hành tốt hơn bản trước, nhưng cần một cách nhanh chóng để tóm tắt các ưu tiên hiệu suất của bạn.

00:01:18.000 --> 00:01:22.000
Xcode Organizer là một công cụ tuyệt vời để hiểu hiệu suất.

00:01:22.000 --> 00:01:34.000
Nó hiện đang thu thập dữ liệu trên bảy danh mục số liệu, bao gồm pin, khởi chạy, treo, bộ nhớ, ghi đĩa, quá giang cuộn và chấm dứt.

00:01:34.000 --> 00:01:36.000
Đó là rất nhiều thông tin để xử lý.

00:01:36.000 --> 00:01:41.000
Hãy đi sâu vào Xcode Organizer tiếp theo và chẩn đoán hồi quy hiệu suất.

00:01:41.000 --> 00:01:44.000
Tôi sẽ bắt đầu bằng cách xem các số liệu khác nhau cho ứng dụng của mình.

00:01:44.000 --> 00:01:49.000
Tôi có thể chọn từ bảy danh mục số liệu trên thanh điều hướng bên trái.

00:01:49.000 --> 00:01:58.000
Một số danh mục, như pin và đầu cuối, có thể có nhiều phần, cũng như các danh mục con chi tiết các loại sự kiện khác nhau.

00:01:58.000 --> 00:02:06.000
Tôi có thể tùy ý chọn giữa hàng tá loại thiết bị khác nhau, cũng như phần trăm cho người dùng hàng đầu và điển hình của ứng dụng của tôi.

00:02:06.000 --> 00:02:11.000
Trung tâm của người tổ chức hiển thị một biểu đồ với dữ liệu cho 16 bản phát hành gần đây nhất.

00:02:11.000 --> 00:02:16.000
Trong trường hợp này, tôi muốn điều tra việc chấm dứt trong ứng dụng của mình.

00:02:16.000 --> 00:02:29.000
Biểu đồ trên màn hình cho thấy việc chấm dứt đã tăng đáng kể trong phiên bản mới nhất, cho thấy có thể có vấn đề với bản phát hành, đặc biệt là do nhiều lối thoát hướng dẫn bất hợp pháp được đánh dấu màu xanh lam.

00:02:29.000 --> 00:02:44.000
Có một bộ số liệu phong phú và thú vị có sẵn để tôi hiểu hiệu suất trong lĩnh vực này, nhưng với rất nhiều tùy chọn thiết bị, danh mục số liệu và danh mục con, không rõ tôi nên bắt đầu từ đâu để tối ưu hóa hiệu suất.

00:02:44.000 --> 00:02:53.000
Đó là lý do tại sao bây giờ có một phần thông tin chi tiết trong trình tổ chức để làm nổi bật tất cả các ưu tiên hiệu suất của bạn và hợp lý hóa quy trình làm việc của bạn.

00:02:53.000 --> 00:03:01.000
Xcode Organizer hiện xử lý dữ liệu số liệu và xác định các xu hướng thú vị như hồi quy hiệu suất.

00:03:01.000 --> 00:03:07.000
Trước khi tôi đi sâu vào, hãy nói về hồi quy hiệu suất là gì và cách chúng được phát hiện.

00:03:07.000 --> 00:03:14.000
Hồi quy xảy ra khi một ứng dụng hoạt động kém trong lĩnh vực năng lượng hoặc hiệu suất so với các bản phát hành gần đây.

00:03:14.000 --> 00:03:18.000
Ví dụ, khi mất nhiều thời gian hơn để khởi chạy sau khi phát hành.

00:03:18.000 --> 00:03:25.000
Trong ví dụ này, số liệu được phân tích qua các bản phát hành gần đây để xác định xem giá trị có đang có xu hướng tăng hay không.

00:03:25.000 --> 00:03:30.000
Số liệu sau đó được tính trung bình trong một vài bản phát hành gần đây nhất và được so sánh với giá trị mới nhất.

00:03:30.000 --> 00:03:40.000
Nếu số liệu đang có xu hướng tăng và giá trị mới nhất cao hơn mức trung bình trong một vài bản phát hành gần đây nhất, nó sẽ được gắn cờ là hồi quy và được tóm tắt trong phần thông tin chi tiết.

00:03:40.000 --> 00:03:52.000
Trong ví dụ này, ứng dụng mất trung bình 1,1 giây để khởi chạy, sau đó đột nhiên tăng lên 2,5 giây trong bản phát hành cuối cùng, khiến nó bị gắn cờ là hồi quy.

00:03:52.000 --> 00:03:58.000
Bây giờ bạn đã biết hồi quy được gắn cờ như thế nào, chúng ta hãy quay lại với người tổ chức và đi sâu vào một vài ví dụ.

00:03:58.000 --> 00:04:00.000
Đây là một cái nhìn về tab hồi quy.

00:04:00.000 --> 00:04:05.000
Đó là một cửa hàng một cửa, nơi bạn có thể khám phá những ưu tiên hiệu suất hàng đầu của mình.

00:04:05.000 --> 00:04:08.000
Ứng dụng của bạn đột nhiên gặp sự cố sau bản phát hành gần đây?

00:04:08.000 --> 00:04:12.000
Tính năng máy ảnh mới thú vị đó có làm cạn kiệt pin của thiết bị không?

00:04:12.000 --> 00:04:16.000
Bạn sẽ tìm thấy câu trả lời cho những câu hỏi này và hơn thế nữa trong phần thông tin chi tiết.

00:04:16.000 --> 00:04:23.000
Tất cả dữ liệu bạn cần sẽ được đánh dấu trong phần hướng đến này để hiểu hiệu suất trong lĩnh vực này.

00:04:23.000 --> 00:04:31.000
Tại đây bạn có thể khám phá hồi quy cho các danh mục số liệu và danh mục con khác nhau trên các thiết bị cho các phân vị điển hình và hàng đầu được nhóm lại với nhau.

00:04:31.000 --> 00:04:42.000
Phía bên tay trái sẽ tóm tắt số liệu nào đã hồi quy, bao nhiêu và cho phần trăm nào, làm nổi bật chính xác những gì bạn cần tập trung vào để tạo ra các ứng dụng tốt hơn nữa.

00:04:42.000 --> 00:04:48.000
Ứng dụng của tôi có một số hồi quy trên các lần chấm dứt, bộ nhớ và ghi đĩa.

00:04:48.000 --> 00:04:52.000
Tiếp theo, tôi sẽ xem qua một ví dụ về từng ví dụ và cách diễn giải chúng.

00:04:52.000 --> 00:04:55.000
Tôi sẽ bắt đầu với hồi quy chấm dứt.

00:04:55.000 --> 00:05:00.000
Trước khi tôi chấm dứt hợp đồng, hãy xem video về "Tại sao ứng dụng của tôi bị hỏng?"

00:05:00.000 --> 00:05:02.000
Để biết thêm ngữ cảnh.

00:05:02.000 --> 00:05:07.000
Mỗi hồi quy sẽ tóm tắt tất cả các vấn đề hàng đầu từ bản phát hành ứng dụng mới nhất của tôi.

00:05:07.000 --> 00:05:15.000
Đầu phần cho thấy các hướng dẫn bất hợp pháp đang gây ra sự cố, có thể xảy ra khi ứng dụng của tôi truy cập vào một con trỏ chức năng không hợp lệ.

00:05:15.000 --> 00:05:21.000
Xa hơn nữa, có một biểu đồ các lối thoát hướng dẫn bất hợp pháp trong bốn bản phát hành cuối cùng của ứng dụng của tôi.

00:05:21.000 --> 00:05:26.000
Đầu biểu đồ cho thấy phần trăm và thiết bị nào bị ảnh hưởng.

00:05:26.000 --> 00:05:33.000
Trong trường hợp này, những người dùng phân vị hàng đầu trên tất cả iPhone đang gặp nhiều sự cố hơn trong bản phát hành mới nhất.

00:05:33.000 --> 00:05:39.000
Số lần thoát hướng dẫn bất hợp pháp trung bình và mới nhất nằm ở bên phải biểu đồ.

00:05:39.000 --> 00:05:44.000
Trong trường hợp này, ứng dụng của tôi đã bắt đầu gặp sự cố mười ngày một lần trong phiên bản mới nhất.

00:05:44.000 --> 00:05:52.000
Việc chấm dứt trên màn hình rất gây gián đoạn vì người dùng sẽ phải quay lại Màn hình chính và khởi chạy lại ứng dụng thường xuyên.

00:05:52.000 --> 00:06:02.000
Tôi sẽ muốn xóa các tham chiếu đến con trỏ chức năng không hợp lệ gây ra những sự cố này và có thể tìm hiểu thêm bằng cách xem xét chẩn đoán sự cố của tôi.

00:06:02.000 --> 00:06:10.000
Xem video "Phân loại TestFlight gặp sự cố với Xcode" để tìm hiểu thêm về chẩn đoán sự cố.

00:06:10.000 --> 00:06:18.000
Sử dụng hồi quy và chẩn đoán sự cố, bây giờ tôi biết tôi cần giảm việc chấm dứt trên màn hình trong bản phát hành ứng dụng tiếp theo.

00:06:18.000 --> 00:06:22.000
Tôi không muốn dừng lại ở việc chấm dứt trên màn hình và biết rằng tôi có thể làm được nhiều hơn thế.

00:06:22.000 --> 00:06:27.000
Tôi sẽ kiểm tra hồi quy ứng dụng của mình để khám phá các lĩnh vực khác cần cải thiện.

00:06:27.000 --> 00:06:31.000
Có vẻ như cũng có hồi quy trong thời gian chờ nhiệm vụ.

00:06:31.000 --> 00:06:35.000
Một số chỉ số có thể thoái lui cho nhiều thiết bị và phần trăm.

00:06:35.000 --> 00:06:42.000
Trong trường hợp này, thời gian chờ tác vụ đã tăng lên trên tất cả các iPhone trên cả phân vị điển hình và phân vị hàng đầu.

00:06:42.000 --> 00:06:51.000
Tôi có thể cuộn qua từng hồi quy ở bên phải, xem dữ liệu cho các bản phát hành gần đây cũng như giá trị mới nhất và trung bình cho số liệu.

00:06:51.000 --> 00:06:58.000
Khi các ứng dụng được chuyển sang nền, chúng có 30 giây để thực hiện các tác vụ trước khi hệ thống chấm dứt chúng.

00:06:58.000 --> 00:07:08.000
Điều này có nghĩa là việc không kết thúc các tác vụ nền một cách thích hợp có thể khiến ứng dụng của bạn chấm dứt thường xuyên hơn, dẫn đến việc khởi chạy chậm vào lần sau khi người dùng quay lại.

00:07:08.000 --> 00:07:13.000
Ứng dụng của tôi hiện đang bị chấm dứt ba ngày một lần trong nền.

00:07:13.000 --> 00:07:19.000
Mặc dù không gây rối như chấm dứt trên màn hình, nhưng việc chấm dứt nền có thể phổ biến hơn nhiều.

00:07:19.000 --> 00:07:25.000
Điều cần thiết là phải có trải nghiệm khởi chạy liền mạch, ngay cả khi ứng dụng của tôi bị chấm dứt ở chế độ nền.

00:07:25.000 --> 00:07:33.000
Tôi có thể tích hợp các tính năng khôi phục trạng thái của UIKit để đảm bảo khôi phục trơn tru từ bất kỳ lối thoát nền nào.

00:07:33.000 --> 00:07:41.000
Cuối cùng, quay trở lại hồi quy ứng dụng của tôi, có một lĩnh vực hiệu suất nữa mà tôi cần tập trung vào.

00:07:41.000 --> 00:07:49.000
Ghi đĩa đã tăng 28% trong bản phát hành cuối cùng, nhưng không rõ nguyên nhân gây ra sự cố.

00:07:49.000 --> 00:07:56.000
Thật tuyệt khi tôi biết có vấn đề về hiệu suất, nhưng tôi sẽ cần thêm thông tin chi tiết về nơi bắt đầu trước khi tối ưu hóa ứng dụng của mình.

00:07:56.000 --> 00:08:03.000
Tiếp theo, Shreyas sẽ cho bạn biết cách khám phá các nguyên nhân hàng đầu gây ra hồi quy ghi đĩa.

00:08:03.000 --> 00:08:04.000
Cảm ơn, Sonia.

00:08:04.000 --> 00:08:06.000
Xin chào, tôi là Shreyas.

00:08:06.000 --> 00:08:14.000
Tôi là một kỹ sư phần mềm lưu trữ tại Apple, và tôi sẽ đề cập đến cách gỡ lỗi hồi quy ghi đĩa và luôn cập nhật hiệu suất của ứng dụng.

00:08:14.000 --> 00:08:18.000
Nhưng trước khi đi sâu vào vấn đề này, tại sao ghi đĩa lại quan trọng như vậy?

00:08:18.000 --> 00:08:22.000
Lưu trữ, rất giống CPU và bộ nhớ, là một nguồn tài nguyên hạn chế.

00:08:22.000 --> 00:08:26.000
Ghi đĩa không được kiểm tra có thể bị hao mòn và làm hỏng thiết bị bên dưới.

00:08:26.000 --> 00:08:31.000
Chúng cũng là một nguyên nhân phổ biến gây phiền nhiễu trên màn hình treo và giao diện người dùng quá giang.

00:08:31.000 --> 00:08:36.000
Nếu chúng ta không cẩn thận, chúng có thể làm tăng thời lượng pin nhanh chóng.

00:08:36.000 --> 00:08:41.000
Những điều này làm cho việc tối ưu hóa đĩa ghi lại một thành phần quan trọng trong việc đảm bảo trải nghiệm người dùng tuyệt vời.

00:08:41.000 --> 00:08:47.000
Với ý nghĩ đó, hãy tìm hiểu về các tài nguyên có sẵn để chẩn đoán ghi đĩa cao.

00:08:47.000 --> 00:08:51.000
Ngăn báo cáo ghi đĩa trong Xcode Organizer là một điểm khởi đầu tuyệt vời.

00:08:51.000 --> 00:09:00.000
Các báo cáo này được thu thập từ các thiết bị đã đồng ý chia sẻ phân tích ứng dụng và chúng chứa thông tin về dấu vết ngăn xếp dẫn đến việc ghi.

00:09:00.000 --> 00:09:08.000
Dấu vết ngăn xếp từ mỗi báo cáo được chia thành nhiều chữ ký và các bản ghi được theo dõi để có chữ ký trên tất cả các báo cáo.

00:09:08.000 --> 00:09:13.000
Trong danh sách báo cáo này, các chữ ký được hiển thị được sắp xếp dựa trên tổng số lần ghi.

00:09:13.000 --> 00:09:28.000
Đối với mỗi chữ ký, chúng tôi có thể tìm thấy dấu vết ngăn xếp chi tiết cho chúng tôi thấy nguyên nhân của việc ghi và chúng tôi cũng có thể tìm thấy số liệu thống kê về số lượng nhật ký đã được nhận, phiên bản hệ điều hành và sự cố mô hình phần cứng trông như thế nào, v.v.

00:09:28.000 --> 00:09:32.000
Để xác định các khu vực có vấn đề, hãy chú ý đến chữ ký hàng đầu của bạn.

00:09:32.000 --> 00:09:38.000
Trong trường hợp này, chữ ký hàng đầu chịu trách nhiệm cho 67% số lần viết.

00:09:38.000 --> 00:09:42.000
Chúng ta có thể suy ra từ các calltacks rằng điều này là do một hàm SQLite.

00:09:42.000 --> 00:09:49.000
Rất nhiều lần, biết điều này, nguồn gốc của vấn đề, có thể đi một chặng đường dài hướng tới việc giải quyết vấn đề.

00:09:49.000 --> 00:09:54.000
Nhưng thông thường, như trong trường hợp này, việc sửa chữa có thể không rõ ràng.

00:09:54.000 --> 00:10:03.000
Mã ở đây rất quan trọng đối với tính năng mới của tôi, tôi không phát hiện ra bất kỳ lỗi rõ ràng nào và không rõ các bước tiếp theo của tôi nên là gì.

00:10:03.000 --> 00:10:08.000
Hóa ra, câu trả lời có mặt trong dấu vết ngăn xếp nếu bạn biết tìm ở đâu.

00:10:08.000 --> 00:10:18.000
Đôi khi có các chức năng nằm sâu trong ngăn xếp trong các thư viện mà bạn đang sử dụng có thể cho bạn biết điều gì sai và, với đủ nghiên cứu, cách khắc phục nó.

00:10:18.000 --> 00:10:20.000
Nhưng điều đó có thể rất phức tạp.

00:10:20.000 --> 00:10:26.000
Nó thường đòi hỏi kiến thức về miền cụ thể và có thể cực kỳ tốn thời gian.

00:10:26.000 --> 00:10:32.000
Để tiết kiệm cho bạn tất cả nỗ lực này, trong Xcode 13, người tổ chức có một lĩnh vực mới gọi là thông tin chi tiết.

00:10:32.000 --> 00:10:38.000
Đằng sau hậu trường, một kho lưu trữ được duy trì với các phản mẫu đã biết gây ra ghi đĩa cao.

00:10:38.000 --> 00:10:45.000
Khi nhận được báo cáo, chúng được quét để tìm các chức năng chỉ ra các phản mẫu này.

00:10:45.000 --> 00:10:52.000
Khi có kết quả khớp, vấn đề được đánh dấu ở đây cùng với đề xuất tối ưu hóa để khắc phục sự cố.

00:10:52.000 --> 00:10:59.000
Điều này sẽ giúp dễ dàng giảm ghi của ứng dụng và cải thiện hiệu suất trong khi tiết kiệm rất nhiều nỗ lực gỡ lỗi.

00:10:59.000 --> 00:11:05.000
Ví dụ, đối với chữ ký hàng đầu của chúng tôi, tôi thấy một đề xuất tối ưu hóa để thêm một chỉ mục.

00:11:05.000 --> 00:11:13.000
Ngoài ra còn có một liên kết đến trang tài liệu sẽ giải thích vấn đề một cách chi tiết và đưa ra các bước để gỡ lỗi và khắc phục sự cố.

00:11:13.000 --> 00:11:14.000
Tuyệt vời.

00:11:14.000 --> 00:11:16.000
Bây giờ, hãy làm theo lời khuyên và xem nó có giúp ích gì không.

00:11:16.000 --> 00:11:21.000
Và để làm điều đó, hãy để tôi kích hoạt các công cụ hoạt động tập tin.

00:11:21.000 --> 00:11:27.000
Công cụ hoạt động tệp là một tài nguyên tuyệt vời để gỡ lỗi tất cả các vấn đề liên quan đến lưu trữ.

00:11:27.000 --> 00:11:33.000
Nó cung cấp cho tôi bảng phân tích chi tiết về tất cả các lần đọc và ghi mà ứng dụng thực hiện.

00:11:33.000 --> 00:11:38.000
Đó là công cụ hoàn hảo để xác nhận bản sửa lỗi của tôi.

00:11:38.000 --> 00:11:45.000
Trước đây, các công cụ hiển thị khoảng 180 megabyte ghi vào các tệp tạm thời.

00:11:45.000 --> 00:11:49.000
Điều này cũng giới thiệu độ trễ 780 mili giây.

00:11:49.000 --> 00:11:55.000
Và bây giờ, sau chỉ mục, các ghi do hàm giảm xuống 0.

00:11:55.000 --> 00:11:58.000
Điều này là do SQLite bây giờ hiệu quả hơn.

00:11:58.000 --> 00:12:06.000
Điều này có nghĩa là chúng ta không còn có độ trễ 780 mili giây làm chúng ta chậm lại. Chỉ mục SQLite là một ví dụ.

00:12:06.000 --> 00:12:19.000
Có một loạt các đề xuất tối ưu hóa khác để cải thiện hiệu suất ứng dụng của bạn và có công việc liên tục để mở rộng danh sách này, vì vậy hãy xem thông tin chi tiết cho ứng dụng của bạn ngay hôm nay.

00:12:19.000 --> 00:12:21.000
Hãy quay lại khung thông tin chi tiết.

00:12:21.000 --> 00:12:23.000
Chúng tôi đã có ba hồi quy cho ứng dụng của mình.

00:12:23.000 --> 00:12:30.000
Chúng tôi đã xem xét kỹ lưỡng từng người trong số họ và chúng tôi đã phát hiện ra các nguồn lực sẵn có để giải quyết tất cả chúng.

00:12:30.000 --> 00:12:31.000
Điều đó thật tuyệt.

00:12:31.000 --> 00:12:40.000
Có rất nhiều phân tích sức mạnh và hiệu suất trong Xcode Organizer và thông tin chi tiết nên là một khung cần thiết để khám phá các ưu tiên hiệu suất của ứng dụng của bạn.

00:12:40.000 --> 00:12:42.000
Tận dụng tối đa nó.

00:12:42.000 --> 00:12:48.000
Lên kế hoạch kiểm tra hồi quy và thông tin chi tiết định kỳ, và chắc chắn sau mỗi lần phát hành.

00:12:48.000 --> 00:12:57.000
Ngoài Xcode Organizer, có một cách khác để bạn truy cập tất cả các phân tích được đề cập ngày hôm nay và đó là App Store Connect APIs.

00:12:57.000 --> 00:13:03.000
Những thứ này rất tuyệt nếu bạn muốn truy cập dữ liệu theo chương trình và xây dựng các giải pháp tùy chỉnh.

00:13:03.000 --> 00:13:07.000
Có lẽ bạn đã có một đường ống phân tích mà bạn đã thiết lập.

00:13:07.000 --> 00:13:12.000
Sau đó, các API này là công cụ hoàn hảo để bạn tích hợp tất cả các phân tích thú vị này.

00:13:12.000 --> 00:13:19.000
Xem video "Xác định xu hướng với Power and Performance API" từ WWDC 2020.

00:13:19.000 --> 00:13:23.000
Nó bao gồm các điểm cuối API và phản hồi rất chi tiết.

00:13:23.000 --> 00:13:27.000
Hãy để tôi đưa ra một cái nhìn tổng quan nhanh về một số phản hồi API.

00:13:27.000 --> 00:13:33.000
Đối với các số liệu, bạn có thể thực hiện yêu cầu GET đến điểm cuối perfPowerMetrics.

00:13:33.000 --> 00:13:39.000
Điều này trả về phản hồi JSON có số liệu và thông tin chi tiết của ứng dụng cho các phiên bản gần đây của bạn.

00:13:39.000 --> 00:13:42.000
Hãy nhảy vào phần thông tin chi tiết.

00:13:42.000 --> 00:13:47.000
Trong thông tin chi tiết, bạn sẽ tìm thấy tất cả các hồi quy được xác định cho ứng dụng của mình.

00:13:47.000 --> 00:13:53.000
Đối với mỗi hồi quy, bạn sẽ tìm thấy danh mục số liệu và bản tóm tắt về hồi quy đã xác định.

00:13:53.000 --> 00:14:01.000
Đây là việc chấm dứt trên màn hình do một hướng dẫn bất hợp pháp mà chúng tôi đã phát hiện trước đó trong Xcode Organizer.

00:14:01.000 --> 00:14:04.000
Tiếp theo, bạn sẽ tìm thấy phần dân số.

00:14:04.000 --> 00:14:10.000
Điều này cung cấp một danh sách chi tiết, có cấu trúc về các phân vị và thiết bị bị ảnh hưởng.

00:14:10.000 --> 00:14:15.000
Bạn có thể sử dụng những thứ này để thực hiện hành động tập trung nhằm cải thiện hiệu suất ứng dụng của mình.

00:14:15.000 --> 00:14:22.000
Tương tự, đối với các báo cáo chẩn đoán, bạn có thể thực hiện yêu cầu GET đến điểm cuối Chữ ký chẩn đoán.

00:14:22.000 --> 00:14:30.000
Các câu trả lời sẽ có một danh sách các chữ ký hàng đầu và mỗi chữ ký sẽ có một liên kết đến các chi tiết liên quan đến nó.

00:14:30.000 --> 00:14:38.000
Yêu cầu GET đến liên kết này sẽ cung cấp cho bạn nhật ký chẩn đoán chi tiết và thông tin chi tiết liên quan đến chữ ký.

00:14:38.000 --> 00:14:44.000
Sử dụng các API này trong các quy trình phân tích của bạn và khi bạn thấy thông tin chi tiết, hãy hành động ngay lập tức.

00:14:44.000 --> 00:14:51.000
Bây giờ bạn đã biết hồi quy hiệu suất là gì và cách bạn có thể chẩn đoán chúng và nơi bạn có thể tìm thấy dữ liệu có thể hành động để khắc phục chúng.

00:14:51.000 --> 00:14:54.000
Đây là những gì bạn cần làm tiếp theo.

00:14:54.000 --> 00:14:58.000
Mở Xcode Organizer ngay bây giờ. Kiểm tra khung hồi quy.

00:14:58.000 --> 00:15:01.000
Xem hồi quy hiệu suất hàng đầu của ứng dụng của bạn là gì.

00:15:01.000 --> 00:15:04.000
Tìm hiểu xem ứng dụng của bạn ghi được bao nhiêu.

00:15:04.000 --> 00:15:06.000
Các cuộc gọi ghi đĩa trên cùng có phải là những gì bạn mong đợi không?

00:15:06.000 --> 00:15:09.000
Hay có những lỗi ẩn nào đang làm chậm ứng dụng của bạn?

00:15:09.000 --> 00:15:14.000
Cuối cùng, hãy lên kế hoạch để luôn cập nhật hiệu suất ứng dụng của bạn.

00:15:14.000 --> 00:15:20.000
Kiểm tra Xcode Organizer định kỳ và sử dụng App Store Connect APIs trong bất kỳ quy trình phân tích tùy chỉnh nào.

00:15:20.000 --> 00:15:23.000
Cảm ơn bạn đã dành thời gian. Săn hồi quy vui vẻ.

00:15:23.000 --> 23:59:59.000
[Nhạc lạc quan].

