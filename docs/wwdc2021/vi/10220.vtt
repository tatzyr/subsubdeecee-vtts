WEBVTT

00:00:01.000 --> 00:00:21.000
Xin chào, tên tôi là Paul Borokhov, và tôi là một kỹ sư trong nhóm SwiftUI Mac.

00:00:21.000 --> 00:00:29.000
Tôi sẽ tham gia sau bởi đồng nghiệp Kate Kononenko của tôi trong nhóm Bản địa hóa, và chúng tôi sẽ nói chuyện với bạn về cách bản địa hóa ứng dụng SwiftUI của bạn.

00:00:29.000 --> 00:00:34.000
Để minh họa quá trình này, chúng tôi sẽ sử dụng ứng dụng mẫu Fruta mà bạn có thể đã thấy trước đây.

00:00:34.000 --> 00:00:42.000
Ứng dụng này cho phép bạn duyệt qua thực đơn sinh tố, gọi chúng và cũng xem các công thức để làm chúng tại nhà.

00:00:42.000 --> 00:00:55.000
Trong buổi nói chuyện này, chúng tôi sẽ thêm bản địa hóa tiếng Nga vào ứng dụng, vì đó là cả ngôn ngữ mẹ đẻ của tôi và Kate, và bởi vì nó là một chương trình giới thiệu tốt cho các phương pháp hay nhất về bản địa hóa khác nhau mà bạn có thể sẽ cần sử dụng trong các ứng dụng của riêng mình.

00:00:55.000 --> 00:01:02.000
Chúng ta sẽ xem xét một số nguyên tắc cơ bản về cách các chuỗi được bản địa hóa trong SwiftUI và việc tránh những cạm bẫy thiết kế phổ biến dễ dàng như thế nào.

00:01:02.000 --> 00:01:10.000
Chúng tôi sẽ thảo luận về các kỹ thuật để tạo kiểu và định dạng chuỗi và dữ liệu của bạn, đồng thời đề cập đến một số cải tiến đối với bản địa hóa phím tắt.

00:01:10.000 --> 00:01:19.000
Cuối cùng, Kate sẽ đưa ra bản demo về những cải tiến mà chúng tôi đã thực hiện đối với quy trình bản địa hóa trong Xcode để giúp bản địa hóa ứng dụng của bạn dễ dàng hơn bao giờ hết.

00:01:19.000 --> 00:01:29.000
Một trong những phần quan trọng nhất của việc bản địa hóa ứng dụng của bạn là đảm bảo rằng các chuỗi trong các phần khác nhau của giao diện người dùng của bạn được hiển thị cho người dịch và hiển thị chính xác trong thời gian chạy.

00:01:29.000 --> 00:01:37.000
SwiftUI giúp bạn dễ dàng làm điều này, bởi vì khi bạn sử dụng Văn bản với chuỗi theo nghĩa đen, nó sẽ tự động thực hiện tra cứu chuỗi được bản địa hóa trong gói chính.

00:01:37.000 --> 00:01:45.000
Trong ví dụ này, tôi có một nút Xong được bản địa hóa tự động trong thời gian chạy dựa trên bản dịch trong tệp chuỗi tiếng Nga của tôi.

00:01:45.000 --> 00:01:56.000
Điều này cũng hoạt động cho nội suy chuỗi, để bạn có thể nhúng các biến vào chuỗi của mình và chúng được tự động chuyển đổi thành các chỉ định định dạng trong các tệp và danh mục chuỗi có thể định vị đã xuất.

00:01:56.000 --> 00:02:05.000
Mới trong Xcode 13, bây giờ chúng tôi tự động suy ra loại chỉ định định dạng dựa trên loại biến được truyền vào chuỗi.

00:02:05.000 --> 00:02:10.000
Văn bản chấp nhận các đối số tùy chọn bổ sung cho tên bảng và gói, trong trường hợp bạn cần kiểm soát nhiều hơn.

00:02:10.000 --> 00:02:17.000
Trong ví dụ này, chúng tôi đã đặt tất cả các chuỗi liên quan đến thành phần của mình vào một bảng riêng biệt được gọi là "Thành phần".

00:02:17.000 --> 00:02:28.000
Ngoài các thành phần thực tế của sinh tố, chúng tôi cũng đã đặt hai biến thể của từ "thành phần" cho hai ngữ cảnh khác nhau, trong chế độ xem sinh tố và trong chế độ xem công thức, trong bảng chuỗi này.

00:02:28.000 --> 00:02:34.000
Chúng tôi đã làm điều này bởi vì tiếng Nga yêu cầu hai từ này phải được dịch khác nhau dựa trên ngữ cảnh, như bạn có thể thấy.

00:02:34.000 --> 00:02:39.000
Bạn có thể tìm hiểu thêm về cách sắp xếp các chuỗi của mình trong bài nói chuyện "Hợp lý hóa các chuỗi được bản địa hóa của bạn".

00:02:39.000 --> 00:02:45.000
Tất cả điều này đều hoạt động vì đối số đầu tiên của Text là loại LocalizedStringKey.

00:02:45.000 --> 00:02:54.000
Nếu bạn có các chế độ xem và phương thức tùy chỉnh chấp nhận các ký tự chuỗi, bạn có thể làm cho chúng có thể định vị được bằng cách sử dụng loại này thay cho Chuỗi.

00:02:54.000 --> 00:03:05.000
Bằng cách này, các ký tự được truyền dưới dạng đối số cho các chế độ xem và chức năng này sẽ tự động được trích xuất trong quá trình xuất bản địa hóa Xcode và sau đó được tải từ gói trong thời gian chạy.

00:03:05.000 --> 00:03:11.000
Một cách tiếp cận thay thế, mà chúng ta đã thấy trước đó trong ví dụ nút, là để quan điểm của bạn chấp nhận đối số Văn bản thay thế.

00:03:11.000 --> 00:03:19.000
Sử dụng LocalizedStringKey cũng cho phép bạn xem trước nhiều ngôn ngữ cùng một lúc bằng cách chỉ định ngôn ngữ của môi trường trong nhà cung cấp xem trước của bạn.

00:03:19.000 --> 00:03:29.000
Nếu bạn muốn xem trước tất cả các chuỗi được bản địa hóa, bao gồm cả những chuỗi được tải bằng NSLocalizedString, bạn có thể thay đổi ngôn ngữ trong trình chỉnh sửa sơ đồ, như Kate sẽ chỉ cho bạn sau.

00:03:29.000 --> 00:03:36.000
Tính năng mới trong Xcode 13, xuất dự án của bạn để bản địa hóa thực sự có thể xây dựng tất cả các mục tiêu để tìm các chuỗi có thể định vị.

00:03:36.000 --> 00:03:43.000
Điều này có nghĩa là trong thực tế là Xcode có thể làm tốt hơn nhiều trong việc tìm kiếm nội dung có thể định vị và trích xuất nó để bản địa hóa.

00:03:43.000 --> 00:03:47.000
Vì vậy, hãy tưởng tượng chúng ta có một số mã với một chuỗi nhiều dòng.

00:03:47.000 --> 00:03:54.000
Bởi vì trình biên dịch hiện được sử dụng để trích xuất nội dung được bản địa hóa, chuỗi nhiều dòng này được phân tích cú pháp chính xác.

00:03:54.000 --> 00:04:01.000
Bây giờ, hãy xem SwiftUI giúp bạn dễ dàng xây dựng các ứng dụng với bố cục thân thiện với bản địa hóa như thế nào.

00:04:01.000 --> 00:04:12.000
Cũng giống như tra cứu chuỗi, các hành vi bố cục mặc định do SwiftUI cung cấp đã được thiết kế với mục đích bản địa hóa và trong hầu hết các trường hợp, không cần bất kỳ nỗ lực bổ sung nào từ phía bạn.

00:04:12.000 --> 00:04:20.000
Ví dụ, khi thích hợp, các điều khiển với Văn bản sẽ bao bọc nó để nó không cắt hoặc cắt ngắn bằng các ngôn ngữ có nhãn dài hơn.

00:04:20.000 --> 00:04:26.000
Trong trường hợp này, tên sinh tố được gói thành dòng thứ hai bằng tiếng Nga, bởi vì nó dài hơn.

00:04:26.000 --> 00:04:30.000
Bố cục cũng được tự động lật cho các ngôn ngữ từ phải sang trái.

00:04:30.000 --> 00:04:37.000
Bạn có thể thấy trong ảnh chụp màn hình rằng bố cục ô bảng đã được lật và các biểu tượng trong thanh tab cũng đã được phản chiếu khi thích hợp.

00:04:37.000 --> 00:04:49.000
Và ngay cả khi bạn phải tùy chỉnh một cái gì đó để đi chệch khỏi mặc định, các tùy chọn chúng tôi cung cấp hướng dẫn bạn đến các giải pháp thân thiện với bản địa hóa, chẳng hạn như cung cấp căn chỉnh hàng đầu, thay vì trái, trong VStacks.

00:04:49.000 --> 00:04:56.000
Tiếp theo, trong việc xây dựng các ứng dụng của bạn, bạn có thể thấy mình cần tạo kiểu cho Văn bản bản địa hóa được hiển thị trong giao diện người dùng của mình.

00:04:56.000 --> 00:05:02.000
Để làm điều này dễ dàng hơn, chúng tôi đã giới thiệu khả năng tạo kiểu cho các chuỗi có thể định vị bằng cách sử dụng markdown.

00:05:02.000 --> 00:05:11.000
Điều này đơn giản hóa đáng kể việc áp dụng kiểu dáng cho các chuỗi được bản địa hóa và cung cấp cho người dịch của bạn khả năng áp dụng kiểu dáng hợp lý cho ngôn ngữ của họ.

00:05:11.000 --> 00:05:23.000
Ví dụ, tiếng Ả Rập không có khái niệm in nghiêng, vì vậy ngay cả khi bạn sử dụng trọng âm trong chuỗi tiếng Anh của mình, người dịch của bạn vẫn có thể sử dụng một cách xử lý khác, chẳng hạn như nhấn mạnh, trong bản dịch của họ.

00:05:23.000 --> 00:05:31.000
Trong trường hợp này, dịch giả tiếng Nga của chúng tôi đã có thể áp dụng đánh dấu xung quanh các từ phù hợp nhất trong chuỗi để phù hợp với mục đích của mô tả tiếng Anh gốc.

00:05:31.000 --> 00:05:41.000
Và trong khi sự hỗ trợ này tồn tại trong nền tảng, SwiftUI giúp bạn đặc biệt dễ dàng tận dụng lợi thế bằng cách chỉ cần chuyển các chuỗi được tạo kiểu trực tiếp đến các văn bản để hiển thị.

00:05:41.000 --> 00:05:48.000
Bạn có thể tìm hiểu thêm về kiểu dáng Văn bản bằng cách xem "Có gì mới trong nền tảng" và các cuộc nói chuyện SwiftUI.

00:05:48.000 --> 00:05:55.000
Một tình huống phổ biến khác mà bạn sẽ gặp phải trong các ứng dụng của mình là nhu cầu định dạng dữ liệu theo cách phù hợp với ngôn ngữ và khu vực.

00:05:55.000 --> 00:06:03.000
Các API định dạng mới dễ sử dụng hơn và tích hợp chặt chẽ với Text và TextField sẽ cho phép bạn hoàn thành nhiệm vụ này.

00:06:03.000 --> 00:06:07.000
Ở Fruta, chúng tôi hiển thị số lượng calo ở một số nơi trong giao diện người dùng.

00:06:07.000 --> 00:06:14.000
Trước đây, chúng tôi phải tạo một trình định dạng đo lường để hiển thị các giá trị được định dạng, tương tự như những gì trên trang chiếu ở đây.

00:06:14.000 --> 00:06:20.000
Bây giờ, chúng ta có thể chỉ định định dạng theo cách khai báo trực tiếp nội tuyến với nơi giá trị đang được hiển thị.

00:06:20.000 --> 00:06:26.000
Điều này không chỉ dễ đọc hơn mà còn có thể hiệu quả hơn mã trên trang chiếu trước.

00:06:26.000 --> 00:06:32.000
Bạn có thể tìm hiểu thêm về các API định dạng mới này trong bài nói chuyện "Có gì mới trong nền tảng".

00:06:32.000 --> 00:06:41.000
Cuối cùng, hãy xem xét các phím tắt, cho phép người mới và người dùng thành thạo hoàn thành các tác vụ nhanh hơn, cả trên máy Mac và iPad của họ.

00:06:41.000 --> 00:06:52.000
Mới trong macOS và iPadOS, bất kỳ phím tắt nào bạn xác định trong ứng dụng SwiftUI của mình giờ đây sẽ được tự động điều chỉnh để chúng có thể được nhập vào bố cục bàn phím hiện đang hoạt động của người dùng.

00:06:52.000 --> 00:06:58.000
Ví dụ: nếu bạn muốn thêm sinh tố vào danh sách yêu thích của mình, bạn có thể nhập "Lệnh cộng" để làm như vậy.

00:06:58.000 --> 00:07:07.000
Điều này hoạt động tốt trên bố cục của Hoa Kỳ, nơi tổ hợp yêu cầu chính xác hai lần nhấn phím, phím Command và phím cộng.

00:07:07.000 --> 00:07:12.000
Tuy nhiên, nếu bạn đang sử dụng bố cục bàn phím tiếng Litva, việc đạt được phím cộng không hề dễ dàng như vậy.

00:07:12.000 --> 00:07:17.000
Bạn phải nhấn phím đánh dấu ngược trước, sau đó nhấn "Shift bằng."

00:07:17.000 --> 00:07:23.000
Tệ hơn nữa, sự kết hợp này thực sự không thể đánh máy được trong khi giữ phím Command.

00:07:23.000 --> 00:07:40.000
Nhưng nhờ tính năng ánh xạ lại của macOS Monterey và iPadOS 15, khi bố cục bàn phím Litva đang hoạt động, phím tắt được thay đổi thành "Command ž" và người dùng của chúng tôi có thể thêm sinh tố vào mục yêu thích của họ bằng cách sử dụng phím tắt bất kể họ hiện đang sử dụng bố cục bàn phím nào.

00:07:40.000 --> 00:07:45.000
Và đây là phần hay nhất, bạn với tư cách là nhà phát triển không cần phải làm bất cứ điều gì, nó chỉ hoạt động.

00:07:45.000 --> 00:07:57.000
Và với điều đó, hãy để tôi chuyển nó cho Kate, người sẽ cho thấy những cải tiến mà chúng tôi đã thực hiện đối với quy trình bản địa hóa trong Xcode 13, cũng như giới thiệu một số phương pháp hay nhất và API mới mà tôi vừa đề cập.

00:07:57.000 --> 00:07:58.000
Cảm ơn, Paul.

00:07:58.000 --> 00:08:01.000
Xin chào, tôi là Kate, một kỹ sư trong nhóm Bản địa hóa.

00:08:01.000 --> 00:08:06.000
Hãy nhảy vào để xem việc bản địa hóa ứng dụng SwiftUI dễ dàng như thế nào.

00:08:06.000 --> 00:08:08.000
Ở đây chúng tôi có ứng dụng mẫu Fruta.

00:08:08.000 --> 00:08:15.000
Chúng tôi muốn đảm bảo rằng mọi người trên khắp thế giới có thể gọi sinh tố bằng ngôn ngữ mẹ đẻ của họ.

00:08:15.000 --> 00:08:18.000
Hôm nay, tôi sẽ thêm bản địa hóa tiếng Nga.

00:08:18.000 --> 00:08:29.000
Vì vậy, trước tiên, tôi đi đến dự án trong trình điều hướng dự án, sau đó chọn "Fruta" trong trình chỉnh sửa dự án và trong tab Thông tin, tôi có thể thêm bản địa hóa.

00:08:29.000 --> 00:08:35.000
Tất cả các bản địa hóa mà macOS đi kèm được liệt kê ở đây theo thứ tự bảng chữ cái.

00:08:35.000 --> 00:08:44.000
Trong Xcode 12.5, chúng tôi đã thêm hàng trăm ngôn ngữ và biến thể khu vực khác trong menu con "Nhiều ngôn ngữ hơn" ở cuối danh sách.

00:08:44.000 --> 00:08:47.000
Tôi sẽ chỉ chọn "tiếng Nga."

00:08:47.000 --> 00:08:57.000
Như Paul đã đề cập, Xcode 13 đơn giản hóa rất nhiều việc trích xuất chuỗi từ mã Swift bằng cách sử dụng các công nghệ mới trong trình biên dịch Swift.

00:08:57.000 --> 00:09:07.000
Fruta được viết bằng SwiftUI, vì vậy tôi muốn đảm bảo rằng cài đặt xây dựng "Sử dụng Trình biên dịch để trích xuất chuỗi Swift" được đặt thành "Có".

00:09:07.000 --> 00:09:15.000
Điều này được bật theo mặc định cho các dự án Swift mới, nhưng bạn có thể chọn tham gia cài đặt này nếu dự án hiện tại của bạn sử dụng SwiftUI.

00:09:15.000 --> 00:09:27.000
Khi tôi xuất để bản địa hóa, Xcode sẽ xây dựng tất cả các mục tiêu trong dự án của tôi và sử dụng thông tin loại trình biên dịch để trích xuất LocalizedStringKeys từ mã SwiftUI của tôi.

00:09:27.000 --> 00:09:36.000
Trước khi xuất, tôi có thể sử dụng các ngôn ngữ giả trong SwiftUI Previews để xem chuỗi nào có thể định vị và chuỗi nào tôi đã bỏ lỡ.

00:09:36.000 --> 00:09:43.000
Vì vậy, tôi sẽ vào trình chỉnh sửa sơ đồ và trong tab Tùy chọn, nhấp vào Ngôn ngữ ứng dụng.

00:09:43.000 --> 00:09:56.000
Tất cả các ngôn ngữ được ứng dụng của tôi hỗ trợ đều được liệt kê ở đây ở trên cùng, nhưng tôi sẽ đi đến tận cùng và chọn Accented Pseudolanguage.

00:09:56.000 --> 00:10:03.000
Ngôn ngữ giả có dấu thêm các dấu trọng âm khác nhau vào chuỗi nguồn của tôi trong giao diện người dùng.

00:10:03.000 --> 00:10:07.000
Bây giờ, tôi có thể thấy rằng tất cả các thành phần đều được địa phương hóa giả.

00:10:07.000 --> 00:10:16.000
Các phép đo không được bản địa hóa giả vì chúng được định dạng, nhưng StepperView lẽ ra phải được bản địa hóa giả.

00:10:16.000 --> 00:10:19.000
Hãy làm cho chuỗi này có thể định vị được.

00:10:19.000 --> 00:10:27.000
StepperView là một chế độ xem SwiftUI tùy chỉnh nhận chuỗi "nhãn" và chuyển nó xuống chế độ xem Văn bản.

00:10:27.000 --> 00:10:33.000
Trong các chế độ xem SwiftUI tùy chỉnh yêu cầu bản địa hóa, chúng ta cần sử dụng LocalizedStringKey.

00:10:33.000 --> 00:10:41.000
Hãy chắc chắn rằng nó được bản địa hóa giả ngay bây giờ.

00:10:41.000 --> 00:10:42.000
Tuyệt vời!

00:10:42.000 --> 00:10:48.000
Bây giờ chuỗi này có thể định vị được, chúng ta cần đảm bảo rằng nó xử lý số nhiều đúng cách.

00:10:48.000 --> 00:10:57.000
Mã này hoạt động để số nhiều "smoothie" trong tiếng Anh, nhưng nó sẽ không hoạt động cho tất cả các từ và nó sẽ không hoạt động cho tất cả các ngôn ngữ.

00:10:57.000 --> 00:11:00.000
Thay vào đó hãy sử dụng stringsdict.

00:11:00.000 --> 00:11:06.000
Tệp stringsdict có thể cung cấp các bản dịch khác nhau cho một biến thể số nhiều trong một ngôn ngữ.

00:11:06.000 --> 00:11:14.000
Để biết thêm thông tin về cách sử dụng stringsdict, hãy xem video "Hợp lý hóa chuỗi được bản địa hóa của bạn".

00:11:14.000 --> 00:11:26.000
Tôi có một tệp được chuẩn bị ngay tại đây, vì vậy tôi sẽ kéo nó vào dự án của mình...

00:11:26.000 --> 00:11:30.000
Và đánh dấu nó để bản địa hóa.

00:11:30.000 --> 00:11:33.000
Bây giờ, hãy xuất để bản địa hóa.

00:11:33.000 --> 00:11:43.000
Bắt đầu từ Xcode 12.5, bạn có thể xuất và nhập bản địa hóa cho các dự án và không gian làm việc trong menu Sản phẩm.

00:11:43.000 --> 00:11:50.000
Vì vậy, tôi sẽ chỉ nhấp vào Xuất bản địa hóa và lưu nó vào màn hình nền.

00:11:50.000 --> 00:12:00.000
Bây giờ, Xcode đang xây dựng dự án của tôi và sẽ tạo một Danh mục Bản địa hóa Xcode sẵn sàng để gửi cho Paul, người đã tình nguyện dịch nó sang tiếng Nga.

00:12:00.000 --> 00:12:10.000
Bạn có thể tìm hiểu thêm về Danh mục bản địa hóa Xcode trong bài nói chuyện "Quy trình bản địa hóa mới trong Xcode 10" từ WWDC 2018.

00:12:10.000 --> 00:12:15.000
Hãy kiểm tra kỹ những gì đã được xuất trước khi gửi nó đi để dịch.

00:12:15.000 --> 00:12:22.000
Bắt đầu với Xcode 13, Danh mục bản địa hóa Xcode thậm chí còn thuận tiện hơn khi làm việc.

00:12:22.000 --> 00:12:27.000
Tôi có thể chỉ cần nhấp đúp vào danh mục trong Finder và mở nó trong Xcode.

00:12:27.000 --> 00:12:42.000
Điều này cực kỳ hữu ích nếu bạn đang bản địa hóa ứng dụng của riêng mình, xác minh chuỗi hoặc ảnh chụp màn hình trước khi gửi nội dung để bản địa hóa hoặc nếu sửa bản dịch cho các ngôn ngữ cụ thể.

00:12:42.000 --> 00:12:48.000
Ở đây trong trình chỉnh sửa, tôi có thể thấy tất cả các tệp yêu cầu bản địa hóa.

00:12:48.000 --> 00:12:53.000
Khi tôi chọn một tệp, tôi có thể thấy tất cả các chuỗi như trình dịch.

00:12:53.000 --> 00:12:59.000
Chìa khóa, chuỗi nguồn, bản dịch và nhận xét.

00:12:59.000 --> 00:13:03.000
Tôi sẽ lướt qua đây và xem mọi thứ có ổn không.

00:13:03.000 --> 00:13:07.000
Ngay lập tức, tôi có thể thấy một vài vấn đề.

00:13:07.000 --> 00:13:11.000
Đầu tiên, chúng tôi đã xuất chuỗi "%lf Calories".

00:13:11.000 --> 00:13:17.000
Chuỗi đó nên được định dạng vì các vùng khác nhau sử dụng các đơn vị khác nhau để đo lượng calo.

00:13:17.000 --> 00:13:21.000
Tôi sẽ cần thay đổi mã để khắc phục điều đó.

00:13:21.000 --> 00:13:34.000
Ở đây trong NutritionFactView nơi chuỗi được trích xuất, thay vì một chuỗi, tôi có thể sử dụng phương pháp "định dạng" trong loại Đo lường của mình trên cấu trúc NutritionFacts của mình.

00:13:34.000 --> 00:13:41.000
Tôi sẽ sử dụng định dạng rộng và đặt cách sử dụng thành "thực phẩm", vì chúng tôi đang đo lượng calo thực phẩm.

00:13:41.000 --> 00:13:45.000
Điều này sẽ đảm nhận việc định dạng các đơn vị cho tất cả các khu vực.

00:13:45.000 --> 00:13:47.000
Đó là một sửa chữa dễ dàng.

00:13:47.000 --> 00:13:53.000
Hãy quay lại xem lại các chuỗi của tôi.

00:13:53.000 --> 00:14:01.000
Ồ, người dịch không thấy tên biến, vì vậy một chuỗi như "Mua công thức cho %@" có thể gây nhầm lẫn.

00:14:01.000 --> 00:14:06.000
Tôi đang mua một công thức với một mức giá nhất định, hay tôi đang tặng nó cho một người bạn?

00:14:06.000 --> 00:14:12.000
Hãy xem liệu có bất kỳ chuỗi mơ hồ nào khác không.

00:14:12.000 --> 00:14:20.000
"Yêu thích" có một bình luận nói rằng đó là một động từ, nhưng tôi nên thêm một bình luận vào "Yêu thích" để rõ ràng đó là một danh từ.

00:14:20.000 --> 00:14:25.000
Tôi sẽ thêm nhận xét bằng mã cho cả hai thứ đó.

00:14:25.000 --> 00:14:31.000
Trước tiên hãy xử lý chuỗi "Mua công thức cho".

00:14:31.000 --> 00:14:33.000
Vậy là xong.

00:14:33.000 --> 00:14:41.000
Chuỗi "Yêu thích" nằm trong các mục thanh tab của tôi, vì vậy hãy thêm nhận xét cho nó.

00:14:41.000 --> 00:14:43.000
Các mục thanh tab là chế độ xem Nhãn.

00:14:43.000 --> 00:14:51.000
Trong SwiftUI, để thêm nhận xét, tôi cần khởi tạo Nhãn với chế độ xem Văn bản.

00:14:51.000 --> 00:14:57.000
Thêm các nhận xét như thế này thực sự quan trọng để đảm bảo bản địa hóa chất lượng cao.

00:14:57.000 --> 00:15:01.000
Tôi không muốn các dịch giả của mình bối rối và phải đoán xem ý tôi là gì.

00:15:01.000 --> 00:15:05.000
Được rồi, tôi nghĩ tôi đã sửa mọi thứ.

00:15:05.000 --> 00:15:12.000
Đã đến lúc xuất một danh mục mới và gửi nó cho Paul.

00:15:12.000 --> 00:15:18.000
Chà, điều đó thật nhanh.

00:15:18.000 --> 00:15:22.000
Paul là Apple Silicon của các dịch giả!

00:15:22.000 --> 00:15:27.000
Chúng ta hãy xem nhanh những gì anh ấy đã gửi lại.

00:15:27.000 --> 00:15:31.000
Ở đây, tôi có thể xem tất cả các bản dịch.

00:15:31.000 --> 00:15:36.000
Có stringsdict cho bước sinh tố mà tôi đã thêm vào.

00:15:36.000 --> 00:15:41.000
Có vẻ ổn. Hãy nhập cái này và xem ứng dụng trông như thế nào bằng tiếng Nga.

00:15:41.000 --> 00:15:51.000
Để nhập, tôi chỉ cần vào menu Sản phẩm, nhấp vào Nhập bản địa hóa, và sau đó chọn Danh mục từ Paul.

00:15:51.000 --> 00:15:53.000
Tất cả các chuỗi của tôi nên được bản địa hóa ngay bây giờ.

00:15:53.000 --> 00:15:57.000
Hãy xây dựng và chạy ứng dụng bằng tiếng Nga cho macOS.

00:15:57.000 --> 00:16:09.000
Đầu tiên, tôi sẽ thay đổi sơ đồ thành macOS, và sau đó tôi có thể thay đổi ngôn ngữ sang tiếng Nga.

00:16:09.000 --> 00:16:15.000
Được rồi, hãy chạy nó.

00:16:15.000 --> 00:16:21.000
Chà, ứng dụng trông tuyệt vời bằng tiếng Nga, và tất cả các loại sinh tố đều trông rất ngon.

00:16:21.000 --> 00:16:27.000
Tôi có thể thấy các thành phần và tất cả giá trị dinh dưỡng cho tất cả chúng.

00:16:27.000 --> 00:16:33.000
Tôi nghĩ tôi thực sự sẽ đặt cái này.

00:16:33.000 --> 00:16:38.000
Chà, thật là một dịch vụ tuyệt vời.

00:16:38.000 --> 00:16:44.000
Bản địa hóa trong SwiftUI được thiết kế để dễ dàng, vì vậy bạn có thể tập trung vào việc viết mã.

00:16:44.000 --> 00:16:49.000
Đây là một số điểm chính cần ghi nhớ khi bạn phát triển ứng dụng của mình.

00:16:49.000 --> 00:16:56.000
LocalizedStringKey là một loại đặc biệt báo hiệu SwiftUI tra cứu các chuỗi được bản địa hóa trong gói của bạn.

00:16:56.000 --> 00:17:01.000
Sử dụng nó trong các chế độ xem SwiftUI tùy chỉnh để làm cho chúng sẵn sàng cho bản địa hóa.

00:17:01.000 --> 00:17:11.000
Bật cài đặt xây dựng "Sử dụng Trình biên dịch để trích xuất chuỗi Swift" để trích xuất LocalizedStringKeys từ mã khi xuất để bản địa hóa trong Xcode.

00:17:11.000 --> 00:17:17.000
Định dạng chuỗi của bạn để quốc tế hóa mã của bạn và tạo kiểu cho chúng bằng Markdown.

00:17:17.000 --> 00:17:22.000
Sử dụng Văn bản để thêm nhận xét cho ngữ cảnh dịch bổ sung.

00:17:22.000 --> 00:17:27.000
Cảm ơn vì đã xem, và tận hưởng phần còn lại của WWDC!

00:17:27.000 --> 23:59:59.000
[Âm nhạc].

