WEBVTT

00:00:00.000 --> 00:00:13.000
Xin chào, tôi là Tom, và tôi muốn chào đón bạn đến với "Biểu tượng SF trong UIKit và AppKit."

00:00:13.000 --> 00:00:19.000
Hôm nay tôi sẽ đưa bạn đi tham quan về cách triển khai các tính năng mới của Biểu tượng SF trong ứng dụng của bạn.

00:00:19.000 --> 00:00:24.000
Đầu tiên, chúng ta sẽ xem xét các chế độ màu khác nhau và cách sử dụng chúng.

00:00:24.000 --> 00:00:28.000
Sau đó, chúng ta sẽ nói về cách kết hợp các cấu hình để có được các hiệu ứng mà bạn muốn.

00:00:28.000 --> 00:00:33.000
Và cuối cùng, chúng ta sẽ khám phá việc sử dụng các ký hiệu màu này trong các chuỗi được quy cho.

00:00:33.000 --> 00:00:37.000
Bạn sẽ thấy các ví dụ áp dụng cho cả AppKit và UIKit.

00:00:37.000 --> 00:00:47.000
Các API mới giống hệt nhau cho cả hai khuôn khổ, vì vậy những gì áp dụng cho cái này, cũng áp dụng cho cái kia, ngoại trừ một số sắc thái cụ thể của khuôn khổ.

00:00:47.000 --> 00:00:50.000
Các tính năng mới xoay quanh việc thêm màu sắc vào Biểu tượng SF.

00:00:50.000 --> 00:00:57.000
Trong khi AppKit thêm các biểu tượng nhiều màu trong macOS 11, UIKit đang thêm chúng trong iOS 15.

00:00:57.000 --> 00:01:01.000
Đối với các bản phát hành năm nay, các chế độ kết xuất màu bổ sung cho Biểu tượng SF đang được thêm vào.

00:01:01.000 --> 00:01:05.000
Và để rõ ràng, các chế độ kết xuất này hoạt động trên tất cả các nền tảng.

00:01:05.000 --> 00:01:11.000
Để hỗ trợ các chế độ kết xuất mới, các biểu tượng hiện có các lớp khác nhau, mỗi lớp có một màu khác nhau.

00:01:11.000 --> 00:01:16.000
Các lớp này được định nghĩa trong một hệ thống phân cấp, có nghĩa là một lớp nổi bật hơn một lớp khác.

00:01:16.000 --> 00:01:22.000
Điều này có nghĩa là chúng ta có ba lớp: tiểu học, trung học và đại học.

00:01:22.000 --> 00:01:27.000
Trên iOS, các biểu tượng yêu cầu chế độ mẫu để các chế độ kết xuất mới có hiệu lực.

00:01:27.000 --> 00:01:32.000
Trên macOS, việc áp dụng các cấu hình mới sẽ tự động thiết lập chế độ mẫu chính xác.

00:01:32.000 --> 00:01:38.000
Và nếu bạn chưa quen với Biểu tượng SF, hãy xem "Giới thiệu Biểu tượng SF" từ WWDC19.

00:01:38.000 --> 00:01:43.000
Chế độ kết xuất đầu tiên chúng ta sẽ xem xét là các biểu tượng đơn sắc.

00:01:43.000 --> 00:01:45.000
Đây là một ứng dụng Thư thoại.

00:01:45.000 --> 00:01:48.000
Trong giao diện người dùng này, một vài biểu tượng đang được sử dụng.

00:01:48.000 --> 00:01:52.000
Có một biểu tượng đơn sắc và một vài biểu tượng khác sử dụng chế độ màu khác.

00:01:52.000 --> 00:01:59.000
Nhưng trước tiên hãy tập trung vào biểu tượng đơn sắc, và chúng ta sẽ quay lại với những biểu tượng khác sau.

00:01:59.000 --> 00:02:05.000
Đúng như tên gọi, một biểu tượng đơn sắc chỉ có một màu: thường là tông màu hoặc màu nhấn của chế độ xem.

00:02:05.000 --> 00:02:13.000
Và để đạt được kết quả này, chúng tôi tạo một hình ảnh biểu tượng mới, gán nó cho chế độ xem hình ảnh và đặt màu hoặc màu nhấn để định cấu hình màu của biểu tượng.

00:02:13.000 --> 00:02:22.000
Và không có gì thay đổi ở đây: chúng tôi không cần bất kỳ cấu hình bổ sung nào để hiển thị biểu tượng đơn sắc, vì đó là hành vi mặc định.

00:02:22.000 --> 00:02:27.000
Vì vậy, đơn sắc là chế độ kết xuất duy nhất trước iOS 15 và macOS 11.

00:02:27.000 --> 00:02:33.000
Để chỉ định một màu, tất cả những gì chúng ta phải làm là đặt màu hoặc màu nhấn trên chế độ xem hình ảnh, và thế là xong.

00:02:33.000 --> 00:02:40.000
Bây giờ chúng ta đã có chế độ đơn sắc trước đây, chúng ta có thể nói về một chế độ mới: các biểu tượng màu phân cấp.

00:02:40.000 --> 00:02:47.000
Một ví dụ điển hình về các biểu tượng phân cấp trên máy Mac là các biểu tượng được sử dụng trong Trung tâm điều khiển.

00:02:47.000 --> 00:02:54.000
Có một vài nơi mà các biểu tượng đang được sử dụng trong Trung tâm điều khiển, nhưng hãy phóng to phần Hiển thị.

00:02:54.000 --> 00:03:01.000
Có một vài biểu tượng đang được sử dụng ở đây: hàng nút chuyển đổi ở giữa và các biểu tượng trong danh sách các thiết bị.

00:03:01.000 --> 00:03:08.000
Các biểu tượng thiết bị được nhuộm màu khác với các nút chuyển đổi phía trên chúng và đây là các biểu tượng có màu phân cấp.

00:03:08.000 --> 00:03:16.000
Chế độ màu phân cấp sử dụng hệ thống phân cấp lớp của một biểu tượng để tô màu cho từng lớp và màu được cung cấp được sử dụng làm màu lớp chính.

00:03:16.000 --> 00:03:23.000
Các lớp thứ cấp và thứ ba có được các biến thể của màu cơ bản với độ mờ giảm dần.

00:03:23.000 --> 00:03:32.000
Bạn chỉ định chế độ màu thông qua một loại cấu hình biểu tượng mới, hoạt động giống hệt như các loại cấu hình biểu tượng hiện có.

00:03:32.000 --> 00:03:40.000
Và bằng cách đặt cấu hình biểu tượng của imageView thành loại cấu hình này, biểu tượng sẽ được hiển thị dưới dạng biểu tượng màu phân cấp.

00:03:40.000 --> 00:03:48.000
Bảng màu của biểu tượng màu phân cấp dựa trên một màu, với các màu khác bắt nguồn từ một màu đó bằng cách giảm độ mờ đục.

00:03:48.000 --> 00:03:50.000
Hệ thống phân cấp lớp rất quan trọng ở đây.

00:03:50.000 --> 00:03:55.000
Nếu thiếu một lớp, màu dẫn xuất liên quan sẽ không được sử dụng.

00:03:55.000 --> 00:03:58.000
Ngoài ra còn có chế độ kết xuất màu thứ ba: bảng màu.

00:03:58.000 --> 00:04:02.000
Như chúng ta sẽ khám phá, nó giống như chế độ kết xuất màu phân cấp, nhưng cũng khác nhau.

00:04:02.000 --> 00:04:05.000
Hãy quay lại ví dụ Thư thoại của chúng ta.

00:04:05.000 --> 00:04:10.000
Ba nút bên phải mỗi nút có nhiều màu và mỗi nút có các màu khác nhau.

00:04:10.000 --> 00:04:14.000
Chúng tôi sẽ xây dựng các nút này từng bước một.

00:04:14.000 --> 00:04:17.000
Đầu tiên, chúng ta sẽ khởi tạo các nút của mình với những hình ảnh mong muốn.

00:04:17.000 --> 00:04:20.000
Chúng tôi đang sử dụng một cấu hình nút mới cho việc này.

00:04:20.000 --> 00:04:23.000
Nhưng những hình ảnh đơn giản này hoàn toàn không phải là thứ chúng ta muốn.

00:04:23.000 --> 00:04:28.000
Các hình ảnh nên có hình tròn và được điền vào.

00:04:28.000 --> 00:04:34.000
Chúng tôi đã từng có thể làm điều này bằng cách thêm các công cụ sửa đổi mong muốn vào tên biểu tượng, nhưng bây giờ có một cách tốt hơn: các biến thể hình ảnh.

00:04:34.000 --> 00:04:42.000
Đúng như tên gọi, khi sử dụng các biến thể hình ảnh, bạn có thể yêu cầu một biến thể khác của hình ảnh mà không cần thay đổi tên theo cách thủ công.

00:04:42.000 --> 00:04:47.000
Đầu tiên, hãy biến hình ảnh của chúng ta thành hình tròn.

00:04:47.000 --> 00:04:50.000
Sau đó, chúng ta sẽ thêm một màu tô đẹp vào những vòng tròn đó.

00:04:50.000 --> 00:04:57.000
Vì chúng tôi đang chỉ định các biến thể trên chế độ xem vùng chứa nút, các biến thể đó được áp dụng cho tất cả các hình ảnh trong tất cả các nút.

00:04:57.000 --> 00:05:02.000
Nếu một hình ảnh không có biến thể đó, hình ảnh được chỉ định ban đầu sẽ được sử dụng.

00:05:02.000 --> 00:05:11.000
Đặc tả biến thể sẽ lan truyền xuống hệ thống phân cấp chế độ xem và chế độ xem hình ảnh trong hệ thống phân cấp đó sẽ chọn chúng để thực hiện phép thuật của chúng.

00:05:11.000 --> 00:05:16.000
Bây giờ chúng ta đã có hình dạng, làm thế nào để chúng ta chỉ định màu sắc cho mỗi biểu tượng này?

00:05:16.000 --> 00:05:21.000
Chà, chúng ta có thể tạo ra một loại cấu hình biểu tượng mới, một loại cấu hình chỉ định bảng màu.

00:05:21.000 --> 00:05:26.000
Những màu này được áp dụng cho hệ thống phân cấp lớp tương tự như cấu hình màu phân cấp.

00:05:26.000 --> 00:05:31.000
Nhưng chúng tôi đang sử dụng các màu ở đây được chỉ định rõ ràng so với việc sử dụng các màu có nguồn gốc.

00:05:31.000 --> 00:05:36.000
Và chúng tôi cũng đang sử dụng một loại màu mới trong danh sách các màu bảng màu: màu sắc thái.

00:05:36.000 --> 00:05:41.000
Điều này có nghĩa là chế độ xem sẽ tự động áp dụng màu sắc của nó cho lớp thích hợp.

00:05:41.000 --> 00:05:44.000
Và đối với nút tiếp theo, chúng tôi làm chính xác như trước đây.

00:05:44.000 --> 00:05:50.000
Tải hình ảnh cơ sở, xây dựng cấu hình màu phù hợp và áp dụng chúng vào cấu hình nút.

00:05:50.000 --> 00:05:56.000
Và trong trường hợp này, nó trông giống hệt như trước đây, nhưng có một nhược điểm ở đây, và tôi sẽ giải thích điều đó sau.

00:05:56.000 --> 00:06:01.000
Và kịch bản tương tự cũng hoạt động cho nút cuối cùng, nhưng chỉ với các màu khác nhau.

00:06:01.000 --> 00:06:05.000
Và giống như trước đây, bạn có thể tự hỏi tại sao chúng ta phải chỉ định rõ ràng màu trắng ở đây.

00:06:05.000 --> 00:06:09.000
Chúng ta không thể chỉ sử dụng một biểu tượng đơn sắc và tô màu chúng một cách chính xác sao?

00:06:09.000 --> 00:06:14.000
Câu trả lời là không, chúng ta không thể, và đây là cái bẫy mà tôi đã đề cập trước đây.

00:06:14.000 --> 00:06:18.000
Nhà thiết kế của chúng tôi đã chỉ định rằng các phần bên trong của các biểu tượng này phải luôn có màu trắng.

00:06:18.000 --> 00:06:24.000
Và cho đến bây giờ, chúng tôi sẽ vô tình nhận được kết quả chính xác, ngay cả khi sử dụng các biểu tượng đơn sắc.

00:06:24.000 --> 00:06:27.000
Tại sao? Chúng tôi đã ở chế độ ánh sáng.

00:06:27.000 --> 00:06:32.000
Nhưng khi chúng ta chuyển sang chế độ tối, các biểu tượng đơn sắc không cho chúng ta kết quả mong muốn.

00:06:32.000 --> 00:06:39.000
Điều này là do các phiên bản đơn sắc sử dụng loại trực tiếp cho các phần bên trong, và do đó nền chảy qua các khoảng trống.

00:06:39.000 --> 00:06:47.000
Bây giờ, bằng cách sử dụng chế độ kết xuất bảng màu, chúng tôi đảm bảo các nút này xuất hiện chính xác cho các kiểu giao diện người dùng khác nhau.

00:06:47.000 --> 00:06:50.000
Tôi đã đề cập đến một màu mới trước đây: tintColor.

00:06:50.000 --> 00:06:56.000
Đây là một màu động mới trong UIKit sẽ phân giải thành màu sắc thái của chế độ xem mà nó được sử dụng.

00:06:56.000 --> 00:07:03.000
Điều này đặc biệt tiện dụng khi chỉ định màu lớp biểu tượng, nhưng bạn cũng có thể sử dụng màu này ở mọi nơi bạn có thể sử dụng bất kỳ màu nào khác.

00:07:03.000 --> 00:07:08.000
Tuy nhiên, hãy nhớ rằng các quy tắc xung quanh màu sắc động vẫn được áp dụng.

00:07:08.000 --> 00:07:16.000
Xem phiên "Thực hiện chế độ tối trên iOS" của WWDC19 để tìm hiểu thêm về cách hoạt động của màu động.

00:07:16.000 --> 00:07:18.000
Một số biểu tượng chỉ có hai lớp.

00:07:18.000 --> 00:07:22.000
Ví dụ, có một loạt các biểu tượng thiếu một lớp phụ.

00:07:22.000 --> 00:07:26.000
Làm thế nào để chúng ta xử lý chế độ bảng màu cho các loại biểu tượng này?

00:07:26.000 --> 00:07:32.000
Một ví dụ điển hình về những biểu tượng này là các biểu tượng thiết bị, chỉ có một lớp chính và một lớp ba.

00:07:32.000 --> 00:07:36.000
Làm thế nào để chúng ta tô màu biểu tượng iPad này bằng hai lớp màu?

00:07:36.000 --> 00:07:43.000
Vì các biểu tượng có thể có tối đa ba lớp, bạn chỉ có thể chỉ định ba màu, một cho mỗi lớp.

00:07:43.000 --> 00:07:48.000
Trong trường hợp này, màu phụ không được sử dụng vì lớp không có ở đó.

00:07:48.000 --> 00:07:52.000
Tuy nhiên, có một cách khác để làm điều này cho các biểu tượng chỉ có hai lớp.

00:07:52.000 --> 00:08:01.000
Đối với những biểu tượng đó, chúng tôi chỉ có thể chỉ định hai màu trong cấu hình của bạn và màu sắc sẽ được áp dụng cho các lớp có sẵn theo trình tự.

00:08:01.000 --> 00:08:12.000
Phương pháp trước đây cho phép tính nhất quán về cách chỉ định màu bảng màu cho các biểu tượng liên quan với số lớp hỗn hợp, bởi vì các màu trực tiếp ánh xạ đến đúng lớp.

00:08:12.000 --> 00:08:19.000
Phương pháp thứ hai là một sự tiện lợi khi bạn biết chắc chắn rằng biểu tượng chỉ có hai lớp.

00:08:19.000 --> 00:08:26.000
Cấu hình bảng màu chỉ định một tập hợp màu rõ ràng được áp dụng cho hệ thống phân cấp lớp của biểu tượng.

00:08:26.000 --> 00:08:31.000
Không giống như chế độ kết xuất phân cấp, chế độ kết xuất bảng màu không tạo ra các màu có nguồn gốc.

00:08:31.000 --> 00:08:37.000
Và tương tự như chế độ kết xuất phân cấp, cấp độ phân cấp của mỗi lớp biểu tượng rất quan trọng.

00:08:37.000 --> 00:08:41.000
Ngoài ra còn có một giải pháp thuận tiện cho các biểu tượng có ít hơn ba lớp.

00:08:41.000 --> 00:08:45.000
Điều này đưa chúng ta đến chế độ kết xuất màu cuối cùng: nhiều màu.

00:08:45.000 --> 00:08:53.000
Như tôi đã đề cập trước đây, chế độ màu này đã được thêm vào AppKit và SwiftUI vào năm ngoái nhưng được giới thiệu cho UIKit năm nay.

00:08:53.000 --> 00:08:56.000
Một số danh mục này có hình ảnh với nhiều màu sắc.

00:08:56.000 --> 00:08:58.000
Đây là những biểu tượng nhiều màu.

00:08:58.000 --> 00:09:01.000
Hãy xem chúng ta sẽ thực hiện điều này như thế nào.

00:09:01.000 --> 00:09:04.000
Trước hết, chúng ta cần tải hình ảnh cho mỗi ô.

00:09:04.000 --> 00:09:09.000
Hiện tại, đây là những biểu tượng thông thường và chúng tôi có chế độ đơn sắc theo mặc định.

00:09:09.000 --> 00:09:13.000
Sau đó, chúng tôi cần chỉ ra rằng chúng tôi muốn các biểu tượng nhiều màu.

00:09:13.000 --> 00:09:21.000
Chúng tôi làm điều này bằng cách tạo một cấu hình yêu cầu biến thể nhiều màu của một biểu tượng và gán cấu hình đó cho chế độ xem hình ảnh.

00:09:21.000 --> 00:09:26.000
Nhưng một biểu tượng không thay đổi: biểu tượng của nó không hỗ trợ nhiều màu.

00:09:26.000 --> 00:09:29.000
Vậy, làm thế nào để bạn tìm ra biểu tượng nào hỗ trợ nhiều màu hay không?

00:09:29.000 --> 00:09:33.000
Một cách dễ dàng để tìm hiểu là sử dụng ứng dụng Biểu tượng SF.

00:09:33.000 --> 00:09:39.000
Tìm kiếm biểu tượng, sau đó sử dụng trình kiểm tra để xem biểu tượng hỗ trợ chế độ kết xuất màu nào.

00:09:39.000 --> 00:09:43.000
Ví dụ, biểu tượng ngọn lửa của chúng tôi chỉ hỗ trợ đơn sắc.

00:09:43.000 --> 00:09:47.000
Nhưng biểu tượng phổi hỗ trợ cả bốn chế độ kết xuất màu.

00:09:47.000 --> 00:09:55.000
Ngoài ra, bạn cũng có thể chơi với ánh xạ màu cho từng lớp ở đây, để cảm nhận tốt hơn về cách biểu tượng sẽ xuất hiện mà không cần phải viết một dòng mã.

00:09:55.000 --> 00:09:58.000
Hãy quay lại ví dụ của chúng ta.

00:09:58.000 --> 00:10:07.000
Vì vậy, vì không phải tất cả các biểu tượng này đều hỗ trợ nhiều màu, chúng ta cần đặt thủ công màu sắc đến đúng giá trị để biểu tượng hiển thị chính xác.

00:10:07.000 --> 00:10:13.000
Một số biểu tượng nhiều màu có lớp màu và chúng sẽ bị ảnh hưởng bởi tông màu hoặc màu nhấn của chế độ xem.

00:10:13.000 --> 00:10:16.000
Các biểu tượng không có lớp như vậy sẽ không bị ảnh hưởng.

00:10:16.000 --> 00:10:21.000
Trong ví dụ của chúng tôi, không ai trong số họ làm vậy, vì vậy mọi thứ vẫn như cũ.

00:10:21.000 --> 00:10:29.000
Như bạn có thể đoán từ tên của cấu hình, cấu hình nhiều màu chỉ ra sự ưu tiên cho kết xuất nhiều màu của một biểu tượng.

00:10:29.000 --> 00:10:33.000
Như tôi đã đề cập trước đây, không phải tất cả các biểu tượng đều có biến thể nhiều màu.

00:10:33.000 --> 00:10:40.000
Bạn có thể kết hợp cấu hình nhiều màu với một trong các cấu hình màu khác, nhưng nhiều hơn về điều đó sau.

00:10:40.000 --> 00:10:48.000
Và kết quả là một cấu hình hỗ trợ hai chế độ màu: nhiều màu khi có sẵn và chế độ màu khác nếu không.

00:10:48.000 --> 00:10:55.000
Lưu ý rằng việc kết hợp chế độ phân cấp và chế độ bảng màu sẽ dẫn đến chế độ được chỉ định cuối cùng, vì chúng loại trừ lẫn nhau.

00:10:55.000 --> 00:11:01.000
Đổi lại, nếu chế độ màu đó không được hỗ trợ, hệ thống sẽ sử dụng chế độ đơn sắc.

00:11:01.000 --> 00:11:06.000
Vì vậy, các biểu tượng nhiều màu có một bộ màu cố định không thể sửa đổi trong mã.

00:11:06.000 --> 00:11:11.000
Ngoài ra, một số biểu tượng có một lớp sẽ được hiển thị bằng cách sử dụng tông màu hoặc màu nhấn.

00:11:11.000 --> 00:11:14.000
Và bạn không có gì để làm để điều này hoạt động.

00:11:14.000 --> 00:11:20.000
Biểu tượng chọn đúng tông màu hoặc màu nhấn từ chế độ xem hình ảnh của nó khi nó được hiển thị.

00:11:20.000 --> 00:11:23.000
Bây giờ, chúng tôi đã đề cập đến cả bốn chế độ và cách sử dụng chúng trong mã của bạn.

00:11:23.000 --> 00:11:26.000
Nhưng chúng ta có thể làm điều tương tự trong Trình tạo Giao diện không?

00:11:26.000 --> 00:11:28.000
May mắn thay, câu trả lời là có.

00:11:28.000 --> 00:11:35.000
Xcode đã thêm chức năng tương tự để định cấu hình các chế độ kết xuất màu ngay từ IDE.

00:11:35.000 --> 00:11:39.000
Ở đây chúng tôi có Xcode Open hiển thị bảng phân cảnh cho ứng dụng Planets.

00:11:39.000 --> 00:11:44.000
Giao diện người dùng ImageView đã được mở rộng để cho phép chỉ định chế độ kết xuất màu.

00:11:44.000 --> 00:11:50.000
Và cấu hình màu kết quả cũng có thể kết hợp với các cấu hình đã có trước đó.

00:11:50.000 --> 00:11:57.000
Nếu bạn muốn tìm hiểu thêm về tất cả các tính năng mới này trong Trình tạo giao diện, hãy xem "Xây dựng giao diện theo phong cách" năm nay.

00:11:57.000 --> 00:12:04.000
Bây giờ chúng ta đã nói về tất cả các chế độ màu khác nhau này, làm thế nào chúng ta có thể kết hợp chúng với các cấu hình khác để có được các hiệu ứng phức tạp hơn?

00:12:04.000 --> 00:12:06.000
May mắn thay, nó không quá khó.

00:12:06.000 --> 00:12:11.000
Hãy xem một ví dụ khác, lần này là từ ứng dụng Phím tắt.

00:12:11.000 --> 00:12:17.000
Các biểu tượng của mỗi hành động khá lớn, nhưng chúng dường như cũng có chế độ kết xuất màu phân cấp.

00:12:17.000 --> 00:12:25.000
Vì vậy, chúng ta cần hai cấu hình: một để chỉ định kích thước điểm và một để chỉ định cấu hình màu sắc.

00:12:25.000 --> 00:12:27.000
Nhưng chúng ta chỉ có thể áp dụng một.

00:12:27.000 --> 00:12:28.000
Làm thế nào để chúng ta kết hợp chúng?

00:12:28.000 --> 00:12:31.000
Hóa ra có một cách dễ dàng để làm điều này.

00:12:31.000 --> 00:12:38.000
Có một phương pháp để kết hợp hai cấu hình, dẫn đến một cấu hình có các yếu tố của cả hai cấu hình.

00:12:38.000 --> 00:12:47.000
Trong ví dụ ở đây, chúng tôi tạo hai cấu hình: một để chỉ định kích thước điểm và một để chỉ định màu phân cấp.

00:12:47.000 --> 00:12:51.000
Sau đó chúng tôi kết hợp chúng bằng cách sử dụng các phương pháp áp dụng để tạo ra một cấu hình cuối cùng.

00:12:51.000 --> 00:12:56.000
Và cấu hình đó được áp dụng trên chế độ xem hình ảnh hiển thị hình ảnh, cho chúng ta kết quả mong muốn.

00:12:56.000 --> 00:13:00.000
Lưu ý rằng cơ chế này không chỉ giới hạn ở cấu hình màu sắc.

00:13:00.000 --> 00:13:03.000
Bạn cũng có thể sử dụng cái này với các loại cấu hình khác.

00:13:03.000 --> 00:13:06.000
Ví dụ, kết hợp văn bản, kiểu dáng và trọng lượng.

00:13:06.000 --> 00:13:10.000
Bây giờ chúng ta đã biết cách kết hợp các cấu hình khác nhau.

00:13:10.000 --> 00:13:14.000
Chúng ta còn lại một chủ đề: sử dụng các ký hiệu màu trong các chuỗi được gán.

00:13:14.000 --> 00:13:16.000
Lấy ví dụ cuối cùng này.

00:13:16.000 --> 00:13:21.000
Đây là một ứng dụng tưởng tượng liệt kê các khách sạn khác nhau và thông tin về các phòng trống của họ.

00:13:21.000 --> 00:13:24.000
Có một vài nơi mà các biểu tượng được kết hợp với văn bản.

00:13:24.000 --> 00:13:28.000
Nhưng hãy tập trung vào các tiện nghi trong phòng và cách chúng tôi sẽ thực hiện văn bản này.

00:13:28.000 --> 00:13:30.000
Nó khá đơn giản, nhưng hơi phức tạp.

00:13:30.000 --> 00:13:34.000
Chúng ta phải xây dựng một chuỗi được quy kết với tệp đính kèm hình ảnh.

00:13:34.000 --> 00:13:38.000
Đầu tiên, chúng tôi tải hình ảnh, sử dụng cấu hình màu chính xác.

00:13:38.000 --> 00:13:42.000
Trong trường hợp này, chúng tôi đang sử dụng cấu hình màu phân cấp.

00:13:42.000 --> 00:13:48.000
Chúng tôi sử dụng hình ảnh này để tạo tệp đính kèm văn bản và sau đó chúng tôi sử dụng tệp đính kèm đó để hoàn thành chuỗi được gán của mình.

00:13:48.000 --> 00:13:52.000
Và điều này sau đó được lặp lại cho tất cả các tiện nghi có sẵn.

00:13:52.000 --> 00:14:00.000
Trên nhãn hiển thị văn bản, chúng tôi cũng chỉ định phông chữ chính xác và cùng màu văn bản như chúng tôi đã sử dụng cho các cấu hình màu phân cấp.

00:14:00.000 --> 00:14:08.000
Các ký hiệu đơn sắc tự động chọn màu văn bản, nhưng đối với các biểu tượng có cấu hình màu, chúng ta phải chỉ định màu một cách rõ ràng.

00:14:08.000 --> 00:14:15.000
Và các ký hiệu màu sắc chọn kích thước phông chữ được chỉ định trong chuỗi, giống như các ký hiệu đơn sắc.

00:14:15.000 --> 00:14:24.000
Sau các bước này, chúng tôi có kết quả mà chúng tôi muốn: một nhãn có nội dung, màu sắc và kích thước phù hợp, nhờ vào việc tích hợp các ký hiệu trong các chuỗi được gán.

00:14:24.000 --> 00:14:31.000
Chúng tôi đã giới thiệu ba chế độ màu mới cho Biểu tượng SF ngoài chế độ hiện có và chúng tôi đã giải thích cách sử dụng chúng trong ứng dụng của bạn.

00:14:31.000 --> 00:14:34.000
Biểu tượng là một cách tuyệt vời để thêm hình ảnh chất lượng cao vào ứng dụng của bạn.

00:14:34.000 --> 00:14:41.000
Các biểu tượng màu mở rộng trên đó, cho phép nhiều khả năng hơn nữa.

00:14:41.000 --> 00:14:45.000
Nếu bạn thích phiên này, hãy chắc chắn kiểm tra một vài phiên liên quan.

00:14:45.000 --> 00:14:50.000
Xem "Có gì mới trong Biểu tượng SF" để biết thông tin cơ bản về các khả năng mới.

00:14:50.000 --> 00:14:57.000
Hoặc hãy xem "Biểu tượng SF trong SwiftUI" để xem cách bạn có thể sử dụng các biểu tượng mới trong SwiftUI.

00:14:57.000 --> 00:14:59.000
Cảm ơn vì đã xem, và bây giờ hãy xây dựng những ứng dụng tuyệt vời!

00:14:59.000 --> 23:59:59.000
[Nhạc lạc quan].

