WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Thomas Naudet: Xin chào, và chào mừng đến với WWDC.

00:00:12.000 --> 00:00:20.000
Tôi là Thomas từ nhóm bản địa hóa tại Apple, và hôm nay tôi sẽ chỉ cho bạn cách hợp lý hóa các chuỗi bản địa hóa của bạn.

00:00:20.000 --> 00:00:25.000
Bạn sẽ thấy cách dễ nhất để làm cho ứng dụng của bạn hoạt động bằng nhiều ngôn ngữ.

00:00:25.000 --> 00:00:28.000
Chúng ta sẽ bắt đầu bằng cách viết mã UI.

00:00:28.000 --> 00:00:32.000
Sau đó, chúng tôi sẽ xem cách sắp xếp các chuỗi trong các mục tiêu của bạn.

00:00:32.000 --> 00:00:38.000
Sau đó chúng tôi sẽ để Xcode thực hiện công việc nặng nhọc cho chúng tôi.

00:00:38.000 --> 00:00:42.000
Cuối cùng, chúng ta sẽ học các kỹ thuật mới cho các chuỗi nâng cao.

00:00:42.000 --> 00:00:47.000
Với tất cả những điều này, chúng tôi sẽ đảm bảo ứng dụng của bạn được chuẩn bị cho những bản dịch tuyệt vời.

00:00:47.000 --> 00:00:52.000
Điều này cực kỳ quan trọng vì văn bản có ở khắp mọi nơi trong cuộc sống của chúng ta.

00:00:52.000 --> 00:00:56.000
Chúng tôi sử dụng văn bản để giao tiếp và nhận thông tin trong thế giới thực.

00:00:56.000 --> 00:01:05.000
Nó rõ ràng là đúng hơn trên các thiết bị được kết nối của chúng tôi với tất cả các ứng dụng, thông báo và bài báo mà chúng tôi đọc hàng ngày.

00:01:05.000 --> 00:01:12.000
Hơn bao giờ hết, điều quan trọng là văn bản có thể được đọc, chính xác và có thể truy cập được.

00:01:12.000 --> 00:01:18.000
Hãy tưởng tượng bạn bị lạc hoàn toàn trên con phố này khi cố gắng tìm một cửa hàng nhỏ trong số tất cả những biển báo đó.

00:01:18.000 --> 00:01:21.000
Nó có thể giống nhau đối với người dùng ứng dụng của bạn.

00:01:21.000 --> 00:01:27.000
Văn bản là một tính năng cốt lõi - nó hướng dẫn người dùng và mang lại sự quen thuộc.

00:01:27.000 --> 00:01:37.000
Theo cách đó, bản địa hóa ứng dụng của bạn là cơ hội để tiếp cận tất cả người dùng trên toàn thế giới, đặc biệt là ở tất cả các thị trường mà App Store cung cấp.

00:01:37.000 --> 00:01:44.000
Là một nhà phát triển, bạn đã quen thuộc với văn bản, vì các nhà phát triển chúng tôi thích đặt tên mọi thứ.

00:01:44.000 --> 00:01:47.000
Chúng tôi gọi văn bản là "chuỗi".

00:01:47.000 --> 00:01:58.000
Chuỗi ở khắp mọi nơi: tiêu đề, nút, nội dung người dùng, nội dung trực tuyến, truy vấn tìm kiếm, đồ họa, nhãn khả năng truy cập, v.v.

00:01:58.000 --> 00:02:02.000
Hãy nghĩ về tất cả các chuỗi trong ứng dụng của bạn dưới dạng phụ đề phim.

00:02:02.000 --> 00:02:13.000
Trong bộ phim bạn xem, bạn muốn tất cả phụ đề phải bằng đúng ngôn ngữ, vào đúng thời điểm, với bối cảnh phù hợp và nhất quán trong suốt bộ phim.

00:02:13.000 --> 00:02:15.000
Điều này hoàn toàn giống nhau ở đây.

00:02:15.000 --> 00:02:25.000
Chuỗi của bạn truyền tải ý nghĩa cho nội dung trực quan của bạn và giúp người dùng điều hướng qua các đường phố của ứng dụng của bạn.

00:02:25.000 --> 00:02:31.000
Bây giờ chúng ta hãy xem, từ góc độ nhà phát triển, quy trình bản địa hóa là gì.

00:02:31.000 --> 00:02:35.000
Giao diện người dùng của bạn trình bày các chuỗi trong chế độ xem.

00:02:35.000 --> 00:02:39.000
Những chuỗi đó tồn tại trong các tệp của riêng chúng.

00:02:39.000 --> 00:02:48.000
Điều này giúp phân tách các mối quan tâm giữa nội dung trực quan của bạn - nội dung chung cho tất cả các ngôn ngữ - và các bản dịch cụ thể của bạn.

00:02:48.000 --> 00:02:54.000
Ở giữa, khung Foundation liên kết giao diện người dùng của bạn và tất cả các chuỗi của bạn.

00:02:54.000 --> 00:02:58.000
Trong buổi nói chuyện này, tôi sẽ đi vào chi tiết về từng thành phần này.

00:02:58.000 --> 00:03:04.000
Điều đó có vẻ như rất nhiều, nhưng chúng tôi sẽ khám phá mọi thứ từng bước một.

00:03:04.000 --> 00:03:09.000
Sau đó, hãy bắt đầu bằng cách xác định các chuỗi trong giao diện người dùng của bạn.

00:03:09.000 --> 00:03:14.000
Hiển thị các chuỗi được bản địa hóa thật dễ dàng bằng cách kết hợp các công nghệ mới nhất của Apple.

00:03:14.000 --> 00:03:22.000
Tôi khuyến khích bạn sử dụng những kỹ thuật này trong ứng dụng của mình, để bạn không bao giờ phải suy nghĩ hai lần về bản địa hóa nữa!

00:03:22.000 --> 00:03:26.000
Chà, bất kỳ chuỗi nào bạn xác định trong giao diện người dùng đều cần được bản địa hóa.

00:03:26.000 --> 00:03:30.000
Có hai loại dây có thể nhìn thấy được.

00:03:30.000 --> 00:03:34.000
Một cái được định nghĩa trực tiếp khi bạn tạo chế độ xem của mình.

00:03:34.000 --> 00:03:38.000
Ở đây, tôi đã xác định một nhãn trong SwiftUI và Storyboard.

00:03:38.000 --> 00:03:41.000
Và vâng! Cả hai đều có thể định vị được.

00:03:41.000 --> 00:03:43.000
Tôi đã nói với bạn rằng nó thật dễ dàng!

00:03:43.000 --> 00:03:54.000
Loại chuỗi thứ hai tổng quát hơn và có thể được tìm thấy trong mã mô hình trong SwiftUI mà còn trong AppKit hoặc UIKit.

00:03:54.000 --> 00:03:59.000
Bạn có thể cần lưu trữ một chuỗi trong một biến hoặc trả về nó từ một hàm.

00:03:59.000 --> 00:04:04.000
Trong tất cả các trường hợp này, bạn có thể sử dụng NSLocalizedString.

00:04:04.000 --> 00:04:12.000
Mới trong iOS 15 và macOS Monterey, bạn có thể sử dụng phương pháp tinh chỉnh của chúng tôi cho Swift, String(được bản địa hóa:).

00:04:12.000 --> 00:04:17.000
Hãy tập trung vào phương pháp đầu tiên trong SwiftUI trong giây lát.

00:04:17.000 --> 00:04:31.000
Mọi thứ bạn trình bày trong giao diện thực sự là chế độ xem, cho dù đây là nhãn văn bản hay nút, tất cả đều có thể định vị theo mặc định, sẵn sàng lưu trữ các chuỗi đã dịch trong tương lai của bạn.

00:04:31.000 --> 00:04:40.000
Vì điều này được bật theo mặc định, nếu bạn có nội dung giả như bản xem trước, hãy đảm bảo bạn chọn không tham gia bằng cách sử dụng nguyên văn.

00:04:40.000 --> 00:04:44.000
Điều này sẽ tránh được những công việc không cần thiết cho các dịch giả.

00:04:44.000 --> 00:04:49.000
Bạn có thể học thêm các kỹ thuật trong phiên liên quan này.

00:04:49.000 --> 00:04:54.000
Bây giờ chúng ta đã đề cập đến những điều cơ bản, hãy học cách làm cho chuỗi này năng động hơn.

00:04:54.000 --> 00:04:59.000
Tôi hiện đang hiển thị một nút bản địa hóa để đặt hàng.

00:04:59.000 --> 00:05:06.000
Bạn có thể không biết tôi thích các buổi hòa nhạc, và tôi thích xem các nghệ sĩ sống với bạn bè hơn nữa!

00:05:06.000 --> 00:05:12.000
Trong ứng dụng này, không rõ tôi đang đặt bao nhiêu vé cho tất cả bạn bè của mình.

00:05:12.000 --> 00:05:18.000
Vì vậy, hãy cải thiện nút đó để bao gồm số lượng vé tôi đã chọn.

00:05:18.000 --> 00:05:19.000
Điều đó thật dễ dàng.

00:05:19.000 --> 00:05:24.000
Tôi vừa chèn một biến vào chuỗi giống như tôi đã quen trong Swift.

00:05:24.000 --> 00:05:31.000
Ở đây, số lượng sẽ được thay thế trong thời gian chạy bằng số thực tế, 3.

00:05:31.000 --> 00:05:38.000
Bây giờ chúng ta đã thấy tất cả các tùy chọn của mình, tôi muốn gọi ra một cạm bẫy phổ biến: Chuỗi với (định dạng:).

00:05:38.000 --> 00:05:45.000
Chuỗi với (định dạng:) rất tuyệt, nhưng nó không có ý định được sử dụng cho các chuỗi cục bộ.

00:05:45.000 --> 00:05:52.000
Hãy xem tại sao với một ví dụ bằng tiếng Ả Rập trong đó hướng văn bản và các chữ số có thể khác nhau.

00:05:52.000 --> 00:05:58.000
Tin tốt là cả hai đều được quản lý tự động khi bạn sử dụng String(localized:).

00:05:58.000 --> 00:06:07.000
Bây giờ, số "ba" được viết chính xác bằng tiếng Ả Rập trong nút, theo các chữ số ưa thích của người dùng trong Cài đặt.

00:06:07.000 --> 00:06:19.000
Chuỗi (được bản địa hóa:) cũng hỗ trợ số nhiều và cách ly từng phần của chuỗi, có nghĩa là các từ không bị xáo trộn trong văn bản hai chiều.

00:06:19.000 --> 00:06:22.000
Cuối cùng, hãy cẩn thận để không lạm dụng các biến số.

00:06:22.000 --> 00:06:28.000
Dán các chuỗi lại với nhau rất tiện dụng nhưng có thể dẫn đến các vấn đề dịch thuật.

00:06:28.000 --> 00:06:39.000
Ở đây từ "Đặt hàng" có thể được viết khác nhau trong một số ngôn ngữ cho dù bạn đặt hàng ngay bây giờ hay đặt hàng sau.

00:06:39.000 --> 00:06:43.000
Sử dụng hai dây riêng biệt sẽ an toàn hơn.

00:06:43.000 --> 00:06:52.000
Được rồi. Có một khía cạnh quan trọng, cuối cùng mà chúng ta cần thấy mà tôi đã bí mật giữ bạn cho đến bây giờ.

00:06:52.000 --> 00:06:57.000
Các chuỗi bạn đã xác định sẽ cần được dịch bởi ai đó khác ngoài bạn.

00:06:57.000 --> 00:07:08.000
Người dịch không có giao diện người dùng ứng dụng đầy đủ trước mặt họ trong khi họ dịch từng chuỗi một và họ cần phải nhất quán trong tất cả các chuỗi.

00:07:08.000 --> 00:07:16.000
Vì vậy, bạn cần giúp họ, giống như bạn giúp đồng nghiệp hiểu mã của bạn bằng cách thêm nhận xét mã.

00:07:16.000 --> 00:07:20.000
Tôi nhấn mạnh, bất kể chuỗi nào, bạn nên luôn xác định một bình luận.

00:07:20.000 --> 00:07:27.000
Và đừng quên các tệp Bảng phân cảnh của bạn; chúng có một trường nhận xét trong trình kiểm tra danh tính.

00:07:27.000 --> 00:07:31.000
Hãy để tôi chia sẻ một số mẹo để giúp người dịch.

00:07:31.000 --> 00:07:35.000
Đầu tiên, các bình luận nên giải thích nơi hiển thị chuỗi.

00:07:35.000 --> 00:07:41.000
Ví dụ, đây có phải là một cái nút không? Một nhãn hiệu? Một số văn bản VoiceOver?

00:07:41.000 --> 00:07:51.000
Biết đây là một hành động - để đặt hàng - hay một tuyên bố - một đơn đặt hàng - là rất quan trọng.

00:07:51.000 --> 00:07:54.000
Thứ hai, họ nên giải thích bối cảnh.

00:07:54.000 --> 00:08:01.000
Nếu tôi nhấn Đặt hàng, tôi đang hoàn thành giao dịch hay sắp xếp danh sách?

00:08:01.000 --> 00:08:04.000
Cuối cùng, các bình luận nên giải thích các biến số.

00:08:04.000 --> 00:08:16.000
Khi người bản địa hóa nhìn thấy chuỗi của bạn, họ không nhìn thấy mã của bạn, vì vậy họ không nhìn thấy tên của các biến của bạn để có manh mối, thay vào đó chỉ là một trình giữ chỗ chung.

00:08:16.000 --> 00:08:22.000
Vậy đối với ví dụ cuối cùng ở đây, con số trước "Đã đặt hàng" đại diện cho điều gì?

00:08:22.000 --> 00:08:25.000
Đây có phải là số lượng đơn đặt hàng trong quá khứ không?

00:08:25.000 --> 00:08:28.000
Số lượng vé tôi vừa đặt?

00:08:28.000 --> 00:08:34.000
Vâng! Nhờ bình luận, tôi biết đó là tổng số vé.

00:08:34.000 --> 00:08:44.000
Người dịch bằng nhiều ngôn ngữ sẽ có thể dịch chính xác theo giới tính của từ "vé".

00:08:44.000 --> 00:08:51.000
Đôi khi cách dễ nhất cũng là viết một giá trị ví dụ của biến trong nhận xét.

00:08:51.000 --> 00:08:53.000
Với ý nghĩ đó, nó đây rồi.

00:08:53.000 --> 00:08:59.000
Bạn đã chuẩn bị sẵn mã giao diện người dùng để bản địa hóa.

00:08:59.000 --> 00:09:05.000
Bây giờ, chúng ta sẽ tìm hiểu cách bạn có thể duy trì mã giao diện người dùng của mình tách biệt với các chuỗi của mình.

00:09:05.000 --> 00:09:10.000
Về cơ bản, bạn sẽ có thể sắp xếp nơi dây của bạn sẽ sống.

00:09:10.000 --> 00:09:18.000
Để làm điều này, hãy xem Foundation sẽ đảm bảo rằng mã của bạn tải các tệp chuỗi được bản địa hóa chính xác như thế nào.

00:09:18.000 --> 00:09:22.000
Tất nhiên, bản địa hóa bắt đầu bằng một ngôn ngữ.

00:09:22.000 --> 00:09:27.000
Bạn có thể vào cài đặt dự án của mình để thêm một cái mới.

00:09:27.000 --> 00:09:29.000
Hãy cùng xem Xcode.

00:09:29.000 --> 00:09:34.000
Chọn dự án của bạn và nhấp vào nút dấu cộng (+) để thêm bản địa hóa.

00:09:34.000 --> 00:09:39.000
Bạn sẽ thấy menu đạt được rất nhiều ngôn ngữ mới trong phiên bản mới nhất.

00:09:39.000 --> 00:09:46.000
Hãy xem nào... Trong danh sách bản địa hóa ứng dụng của chúng tôi, nó bắt đầu với Base ở trên cùng.

00:09:46.000 --> 00:09:51.000
Thật vậy, đây là nơi các yếu tố giao diện người dùng sống vì chúng được chia sẻ giữa các ngôn ngữ.

00:09:51.000 --> 00:10:00.000
Ví dụ, một tệp Bảng phân cảnh được chia sẻ; một tệp Siri Intents cũng được chia sẻ.

00:10:00.000 --> 00:10:02.000
Sau đó chúng cần được thêm vào Base.

00:10:02.000 --> 00:10:08.000
Vì vậy, hãy đảm bảo rằng bạn nhấp vào nút Bản địa hóa cho tất cả các tài sản được chia sẻ.

00:10:08.000 --> 00:10:12.000
OK nhưng mặt khác, các chuỗi của bạn không được chia sẻ.

00:10:12.000 --> 00:10:14.000
Strings thuộc về một ngôn ngữ.

00:10:14.000 --> 00:10:21.000
Vì vậy, bạn sẽ có dây của bạn bằng tiếng Anh và tất cả các dây của bạn bằng tiếng Ả Rập.

00:10:21.000 --> 00:10:30.000
Để kiểm tra ứng dụng của bạn bằng các chuỗi bằng một ngôn ngữ nhất định, bạn có thể thay đổi môi trường xem trước trong SwiftUI hoặc thay đổi cài đặt sơ đồ ứng dụng.

00:10:30.000 --> 00:10:37.000
Nếu thiết bị bằng ngôn ngữ mà ứng dụng của bạn không hỗ trợ, Foundation sẽ cố gắng tìm ra giải pháp thay thế tốt nhất.

00:10:37.000 --> 00:10:50.000
Nếu điện thoại của tôi bằng tiếng Tây Ban Nha Mexico, Foundation sẽ cố gắng dự phòng bằng tiếng Tây Ban Nha Mỹ Latinh, sau đó sang tiếng Tây Ban Nha, sau đó sang ngôn ngữ phát triển ứng dụng của bạn - ví dụ: tiếng Anh.

00:10:50.000 --> 00:10:57.000
Cuối cùng, khi các chuỗi đến từ máy chủ, hãy đảm bảo rằng bạn tôn trọng ngôn ngữ ưa thích của người dùng.

00:10:57.000 --> 00:10:58.000
Tuyệt vời.

00:10:58.000 --> 00:11:02.000
Chúng tôi đã thấy rằng mỗi ngôn ngữ có một tập hợp các chuỗi.

00:11:02.000 --> 00:11:08.000
Những chuỗi đó có thể được sắp xếp thêm thành các tệp được gọi là "bảng".

00:11:08.000 --> 00:11:12.000
Bạn có thể sử dụng tính năng này để sắp xếp mọi chuỗi theo ý muốn.

00:11:12.000 --> 00:11:18.000
Ví dụ, bạn có thể có một bảng cho mỗi tính năng hoặc mỗi màn hình.

00:11:18.000 --> 00:11:25.000
Vì đây là tùy chọn theo mặc định, tất cả các chuỗi được đặt trong một bảng có tên Localizable.

00:11:25.000 --> 00:11:31.000
Cụ thể, điều này có nghĩa là tất cả các chuỗi được lưu trữ trong một tệp có tên Localizable.strings.

00:11:31.000 --> 00:11:36.000
Hãy xem xét một ví dụ để tóm tắt lại những gì chúng ta đã học được cho đến nay.

00:11:36.000 --> 00:11:45.000
Tôi có mã sau đây khai báo một chuỗi với một biến, một tên bảng tùy chỉnh và một nhận xét.

00:11:45.000 --> 00:11:48.000
Giả sử ứng dụng của tôi hỗ trợ tiếng Pháp.

00:11:48.000 --> 00:11:56.000
Trong Xcode, sau đó bạn sẽ cần một tệp UserProfile.strings chứa bản dịch tiếng Pháp từ tiếng Anh.

00:11:56.000 --> 00:12:03.000
Nó sẽ được lưu trữ trong một thư mục tài nguyên của Pháp được đặt tên theo quy ước, fr.lproj.

00:12:03.000 --> 00:12:06.000
Nhận xét rất hữu ích cho người dịch tiếng Pháp.

00:12:06.000 --> 00:12:15.000
Họ đã sử dụng chữ "e" để đánh dấu nữ tính, là "địa điểm;" tiếng Pháp cho vé là nữ tính.

00:12:15.000 --> 00:12:19.000
Hãy thêm gia vị cho mọi thứ một chút và nói về gói.

00:12:19.000 --> 00:12:24.000
Tham số này cho phép tải các chuỗi qua các mục tiêu.

00:12:24.000 --> 00:12:27.000
Tham số gói là chính theo mặc định.

00:12:27.000 --> 00:12:30.000
Trong ứng dụng của riêng bạn, bạn không cần nó.

00:12:30.000 --> 00:12:32.000
Chính là ứng dụng đó.

00:12:32.000 --> 00:12:39.000
Trong tiện ích mở rộng ứng dụng của bạn, main đề cập đến tiện ích mở rộng của riêng bạn, vì vậy bạn cũng không cần nó.

00:12:39.000 --> 00:12:44.000
Nhưng giả sử bạn muốn chia sẻ một chuỗi giữa ứng dụng của bạn và tiện ích mở rộng của nó.

00:12:44.000 --> 00:12:49.000
Trong tiện ích mở rộng của bạn, bạn sẽ cần cung cấp gói ứng dụng chính.

00:12:49.000 --> 00:12:54.000
Làm như vậy tránh trùng lặp các chuỗi giữa hai chuỗi.

00:12:54.000 --> 00:12:58.000
Bạn cũng có thể lấy chuỗi của mình từ một khuôn khổ.

00:12:58.000 --> 00:13:12.000
Trong trường hợp đó, bạn nhấn trực tiếp vào chuỗi của khung bằng cách chỉ định gói của nó trong mã ứng dụng của bạn hoặc khung chứa các biến bạn có thể sử dụng trực tiếp.

00:13:12.000 --> 00:13:21.000
Các biến chuỗi được bản địa hóa đó đã được xác định trong khung bằng cách chỉ định gói riêng của khung.

00:13:21.000 --> 00:13:31.000
Hãy nhìn lại mô hình của chúng tôi, chỉ bây giờ chúng tôi sẽ cập nhật nó để làm cho ứng dụng của chúng tôi tải chuỗi được cung cấp bởi khung.

00:13:31.000 --> 00:13:41.000
Khung xác định chuỗi và thông báo cho Foundation bản dịch được lưu trữ bên trong gói riêng của nó trong tệp chuỗi.

00:13:41.000 --> 00:13:49.000
Nếu không có tham số này, chuỗi sẽ được tìm nạp từ ứng dụng lưu trữ thay thế và không tìm thấy.

00:13:49.000 --> 00:13:51.000
Trong thực tế, nó trông như thế này.

00:13:51.000 --> 00:13:55.000
Bạn cung cấp gói nơi văn bản của bạn được lưu trữ.

00:13:55.000 --> 00:14:00.000
Khung sẽ tìm kiếm các chuỗi thành gói riêng của nó.

00:14:00.000 --> 00:14:02.000
Sau đó, nó dễ dàng cho ứng dụng của bạn.

00:14:02.000 --> 00:14:06.000
Chuỗi có thể được sử dụng trong một dòng mã đơn giản.

00:14:06.000 --> 00:14:19.000
Hơn nữa, nếu bạn thực hiện bản địa hóa trong các khuôn khổ của mình theo cách này, bạn thậm chí sẽ không phải tạo tệp chuỗi được trình bày ở đây có chứa "Hoàn thành". Bây giờ hãy xem tại sao.

00:14:19.000 --> 00:14:24.000
Chúng tôi đã thấy mọi thứ bạn có thể làm trong mã để khai báo và sắp xếp các chuỗi.

00:14:24.000 --> 00:14:30.000
Nhưng chúng tôi chưa thấy cách thực sự tạo các tệp sẽ giữ bản dịch của bạn.

00:14:30.000 --> 00:14:34.000
Hóa ra bạn thực sự không cần phải tạo các tệp chuỗi đó.

00:14:34.000 --> 00:14:40.000
Xcode có thể đảm nhận việc tạo tất cả các tệp .strings cho bạn.

00:14:40.000 --> 00:14:46.000
Khi bạn sử dụng Export Localizations, nó sẽ đọc mã của bạn và trích xuất tất cả các chuỗi của bạn.

00:14:46.000 --> 00:14:49.000
Điều này thật tuyệt vì bạn không cần phải duy trì các tệp chuỗi.

00:14:49.000 --> 00:14:55.000
Nếu bạn đã từng quên bản địa hóa chuỗi bạn vừa mã hóa trong giao diện người dùng của mình, thì điều này là dành cho bạn.

00:14:55.000 --> 00:15:00.000
Nếu bạn gặp khó khăn với 'genstrings', điều này cũng dành cho bạn.

00:15:00.000 --> 00:15:07.000
Năm nay, trong Xcode 13, chúng tôi đã thêm hỗ trợ trình biên dịch để trích xuất chuỗi Swift.

00:15:07.000 --> 00:15:11.000
Ngoài ra, không gian làm việc hiện được hỗ trợ đầy đủ.

00:15:11.000 --> 00:15:17.000
Điều này tiếp tục tách biệt mối quan tâm giữa logic của bạn và bản dịch của bạn.

00:15:17.000 --> 00:15:23.000
Xcode sẽ phát hiện và trích xuất văn bản từ các phương pháp Swift và Foundation mà chúng ta đã thấy trước đó.

00:15:23.000 --> 00:15:30.000
Xin lưu ý, nếu bạn có mã tùy chỉnh bao bọc các API đó, điều này sẽ không hoạt động theo mặc định.

00:15:30.000 --> 00:15:41.000
Bạn không cần phải sử dụng một phương thức hoặc macro thông thường, nhưng nếu bạn thực sự cần, bạn có thể thêm chúng vào cài đặt xây dựng của mình trong Tên Macro Chuỗi được Bản địa hóa.

00:15:41.000 --> 00:15:56.000
Đối với phần còn lại, Xcode sẽ trích xuất để bản địa hóa tên ứng dụng và mô tả quyền riêng tư của bạn được xác định trong Info.plist và nói chung tất cả các tài sản được đánh dấu là Bản địa hóa trong trình kiểm tra của Xcode.

00:15:56.000 --> 00:16:03.000
Nếu bạn có bản địa hóa hiện có, bạn đã có thể chuyển sang xuất Xcode cho giao diện người dùng mới của mình.

00:16:03.000 --> 00:16:08.000
Các chuỗi mới sẽ được tự động thêm vào các tệp hiện có của bạn.

00:16:08.000 --> 00:16:14.000
Điều này thật tuyệt nếu bạn muốn chuyển đổi dự án của mình theo tốc độ của riêng bạn.

00:16:14.000 --> 00:16:19.000
Như một phần thưởng, ảnh chụp màn hình từ các bài kiểm tra giao diện người dùng của bạn hiện đã được bao gồm.

00:16:19.000 --> 00:16:31.000
Thật tuyệt vời cho những người bản địa hóa của bạn để họ có được ngữ cảnh ở một chuỗi và thật tuyệt vời khi bạn giới thiệu ảnh chụp màn hình được bản địa hóa của ứng dụng của mình trên App Store.

00:16:31.000 --> 00:16:41.000
Được rồi, Xcode đã trích xuất tất cả các danh mục bản địa hóa, vì vậy bạn sẽ nghĩ rằng đến lượt người dịch làm việc ngay bây giờ.

00:16:41.000 --> 00:16:43.000
Thực ra, bạn cũng có thể làm điều đó!

00:16:43.000 --> 00:16:51.000
Tính năng mới trong Xcode 13, các danh mục bản địa hóa đã xuất có thể được xem và chỉnh sửa trực tiếp trong Xcode.

00:16:51.000 --> 00:16:56.000
Bạn có thể thấy từng tệp được tạo - vì vậy mỗi bảng - trong các gói của chúng ở bên trái.

00:16:56.000 --> 00:17:03.000
Và đối với lựa chọn của bạn, bạn có thể thấy tất cả các chuỗi, hình ảnh và tệp chứa trong đó.

00:17:03.000 --> 00:17:10.000
Bạn có thể lọc các chuỗi, sắp xếp chúng, xem nhận xét, ảnh chụp màn hình và thậm chí dịch!

00:17:10.000 --> 00:17:14.000
Điều này rất thuận tiện nếu bạn phát triển và dịch ứng dụng của riêng mình.

00:17:14.000 --> 00:17:19.000
Nó cũng cho phép bạn tự xem lại và sửa lỗi.

00:17:19.000 --> 00:17:30.000
Khi người dịch gửi lại cho bạn các danh mục chuỗi đã dịch, bạn có thể nhập chúng vào dự án của mình bằng cách sử dụng menu Sản phẩm trong Xcode.

00:17:30.000 --> 00:17:37.000
Và bùng nổ! Các tệp chuỗi, stringsdicts và các tài sản khác của bạn sẽ được tạo và cập nhật.

00:17:37.000 --> 00:17:45.000
Sử dụng dòng lệnh tương đương, bạn có thể chạy xuất và nhập tự động trên một hệ thống tích hợp liên tục.

00:17:45.000 --> 00:17:55.000
Bằng cách gọi cho họ thường xuyên, dự án của bạn nhận được các chuỗi cập nhật nhất và quay vòng nhanh chóng trong việc dịch giao diện người dùng mới của bạn.

00:17:55.000 --> 00:18:05.000
Bạn có thể thấy quy trình làm việc nâng cao đang hoạt động trong phiên năm nay, "Nơ phương hóa ứng dụng SwiftUI của bạn" và tìm hiểu thêm trong phiên giới thiệu.

00:18:05.000 --> 00:18:06.000
Thế là xong!

00:18:06.000 --> 00:18:10.000
Bạn đã chứng kiến cách các chuỗi được sinh ra và sống trong ứng dụng của bạn.

00:18:10.000 --> 00:18:14.000
Để kết luận, tôi sẽ chỉ cho bạn cách xử lý một số chuỗi phức tạp hơn.

00:18:14.000 --> 00:18:18.000
Và tôi chắc chắn rằng bạn sẽ thích những tính năng mới mà chúng tôi có trong cửa hàng.

00:18:18.000 --> 00:18:20.000
Hãy bắt đầu với một cái tuyệt vời!

00:18:20.000 --> 00:18:25.000
Chúng tôi đã cải thiện các chuỗi được quy kết để có bản địa hóa tích hợp sẵn.

00:18:25.000 --> 00:18:30.000
Bây giờ nó có thể thực hiện được với sự hỗ trợ của cú pháp Markdown!

00:18:30.000 --> 00:18:34.000
Bây giờ bạn có thể bản địa hóa các chuỗi của mình mà không làm mất bất kỳ định dạng nào.

00:18:34.000 --> 00:18:40.000
Không còn các thao tác nhân vật rủi ro nữa, chỉ để in đậm một từ.

00:18:40.000 --> 00:18:57.000
Nói về điều đó, ở đây tôi sử dụng dấu hoa thị để nhấn mạnh vào "hoàn thành". Tôi khuyến khích bạn kiểm tra "Có gì mới trong Foundation" để tìm hiểu cách bạn có thể thêm liên kết, điểm nhấn, văn bản không gian đơn, v.v.

00:18:57.000 --> 00:19:03.000
Chúng tôi đã thấy rằng một chuỗi bạn xác định trong mã sẽ có một bản dịch trong tệp chuỗi.

00:19:03.000 --> 00:19:09.000
Nhưng đôi khi bạn cần chuỗi của mình có nhiều biểu diễn.

00:19:09.000 --> 00:19:17.000
Điều này có thể thực hiện được với tệp stringsdict, một tập hợp các chuỗi thích ứng với các quy tắc bạn xác định.

00:19:17.000 --> 00:19:22.000
Ví dụ, hãy nhớ ví dụ của chúng tôi nơi chúng tôi muốn đặt một vài vé?

00:19:22.000 --> 00:19:31.000
Trong tiếng Anh, chúng tôi sẽ thêm chữ "s" làm hậu tố nếu có nhiều vé và không có chữ "s" cho một vé.

00:19:31.000 --> 00:19:37.000
Để giữ cho mã của bạn đơn giản và chính xác, bạn cần xác định quy tắc số nhiều này bằng cách sử dụng stringsdict.

00:19:37.000 --> 00:19:43.000
Bởi vì nếu bạn bản địa hóa ứng dụng của mình, những quy tắc đó sẽ khác nhau đối với mỗi ngôn ngữ.

00:19:43.000 --> 00:19:46.000
Nhìn vào một số trường hợp bằng tiếng Nga.

00:19:46.000 --> 00:19:53.000
Bạn không muốn giải quyết điều đó trong mã, nó đúng hơn là một cái gì đó bản địa hóa nên quan tâm.

00:19:53.000 --> 00:19:55.000
Hãy xem chúng ta sẽ thực hiện điều đó như thế nào.

00:19:55.000 --> 00:20:01.000
Không cần thay đổi mã; chúng tôi vẫn sẽ sử dụng mã hiện có của mình ở trên.

00:20:01.000 --> 00:20:08.000
Đầu tiên, so với các tệp chuỗi được tạo cho bạn, stringsdict là một lựa chọn tham gia thủ công.

00:20:08.000 --> 00:20:15.000
Vì vậy, hãy tạo một cái bằng cách sử dụng mẫu Xcode và đảm bảo rằng bạn đã nhấp vào Bản địa hóa trong trình kiểm tra.

00:20:15.000 --> 00:20:20.000
Được rồi, tất cả bắt đầu với chuỗi bạn đã xác định trong mã.

00:20:20.000 --> 00:20:27.000
Nếu bạn có nhiều chuỗi số nhiều trong mã, bạn có thể thêm mục nhập gốc này vào đây cho mỗi chuỗi.

00:20:27.000 --> 00:20:30.000
Bên trong, bạn xác định giá trị thực tế được trình bày.

00:20:30.000 --> 00:20:34.000
Giá trị này tuân theo cơ chế tìm kiếm-thay thế.

00:20:34.000 --> 00:20:40.000
Ở đây trong ví dụ này tôi đã định nghĩa một mã thông báo có tên là "vé".

00:20:40.000 --> 00:20:44.000
Nó sẽ giữ chuỗi cuối cùng đầy đủ.

00:20:44.000 --> 00:20:59.000
Tốt nhất là bao gồm hầu hết văn bản bên trong mã thông báo, nhưng trường đó sẽ có thể định vị được trong trường hợp người dịch cần thêm tiền tố, hậu tố hoặc di chuyển mã thông báo xung quanh trong trường hợp bạn có nhiều biến.

00:20:59.000 --> 00:21:04.000
Được rồi, mã thông báo đó sẽ thay đổi tùy theo một biến số của bạn trong mã.

00:21:04.000 --> 00:21:08.000
Sau đó hãy xác định mã thông báo vé đó.

00:21:08.000 --> 00:21:13.000
Đầu tiên, chúng tôi chỉ xác nhận rằng chúng tôi đang thực hiện một số số số nhiều.

00:21:13.000 --> 00:21:20.000
Sau đó, chúng tôi chỉ ra biến là một số với bộ định dạng kiểu C d.

00:21:20.000 --> 00:21:24.000
Và cuối cùng, chúng ta có thể viết các quy tắc số nhiều.

00:21:24.000 --> 00:21:31.000
Trong tiếng Anh, chúng ta chỉ có thể khai báo quy tắc "một" và "khác" và "không", nếu bạn muốn.

00:21:31.000 --> 00:21:37.000
Đối với mỗi mục nhập, chúng tôi viết giá trị thực của mã thông báo vé.

00:21:37.000 --> 00:21:45.000
Sau đó, nếu chúng ta có ba vé, trong tiếng Anh nó sẽ sử dụng "khác" và tạo "Đặt 3 vé".

00:21:45.000 --> 00:21:49.000
Bằng cách thay thế %d bằng số 3.

00:21:49.000 --> 00:21:52.000
Nếu một ngôn ngữ cần nhiều trường hợp hơn, đừng lo lắng.

00:21:52.000 --> 00:21:55.000
Xcode sẽ thêm chúng cho bạn tại thời điểm xuất.

00:21:55.000 --> 00:22:02.000
Trong tiếng Nga, nó sẽ thêm "vài" và "nhiều" lên trên những cái hiện có.

00:22:02.000 --> 00:22:03.000
Thế là xong!

00:22:03.000 --> 00:22:07.000
Chuỗi của chúng tôi sẽ được số nhiều trong thời gian chạy.

00:22:07.000 --> 00:22:10.000
Trước khi chúng ta tiếp tục, tôi muốn gọi ra một trường hợp.

00:22:10.000 --> 00:22:18.000
Mặc dù stringsdict nên được sử dụng cho số nhiều, nhưng nó có nghĩa là cho các chuỗi chứa một số.

00:22:18.000 --> 00:22:21.000
Chúng ta đã thấy trước đó trường hợp "một" cho số ít trong tiếng Anh.

00:22:21.000 --> 00:22:31.000
Nó thực sự cũng dành cho số một trong tiếng Nga, nhưng, nó cũng được sử dụng cho 21, 31, v.v.

00:22:31.000 --> 00:22:42.000
Sau đó, trong trường hợp đó, sử dụng stringsdict sẽ không chính xác vì bạn chỉ muốn bằng một.

00:22:42.000 --> 00:22:47.000
Trong ví dụ này, số nhiều thay đổi theo điều này, cả hai hoặc tất cả.

00:22:47.000 --> 00:22:51.000
Không có số; vui lòng không sử dụng stringsdict.

00:22:51.000 --> 00:23:01.000
Hãy tưởng tượng tôi đặt 21 vé cho tất cả bạn bè của mình, và tôi sẽ thấy bằng tiếng Nga, "Đặt vé này" thay vì "Đặt tất cả vé".

00:23:01.000 --> 00:23:05.000
Tôi sẽ hỏi bạn, "Tiền của tôi đâu?"

00:23:05.000 --> 00:23:15.000
Thay vào đó, hãy sử dụng if/else đơn giản nhưng hiệu quả này để số nhiều chính xác từng chuỗi trong số ba chuỗi, trong tất cả các ngôn ngữ.

00:23:15.000 --> 00:23:21.000
Và đó là hỗ trợ số nhiều, nhưng stringsdict có thể xử lý nhiều loại biến thể hơn của một chuỗi.

00:23:21.000 --> 00:23:26.000
Tôi mời bạn xem các phiên liên quan để tìm hiểu thêm.

00:23:26.000 --> 00:23:32.000
Điều này thật tuyệt, nhưng chúng tôi muốn cung cấp cho bạn một cách đơn giản hơn.

00:23:32.000 --> 00:23:36.000
Vâng, Foundation đã học năm nay cách làm ngữ pháp cho bạn!

00:23:36.000 --> 00:23:49.000
Với hỗ trợ Markdown được thêm vào các chuỗi được gán, hãy sử dụng định dạng mới này với thuộc tính inflect và bạn sẽ nhận được giá trị phù hợp được tính toán trong thời gian chạy, như trên nút này.

00:23:49.000 --> 00:23:57.000
Đây là một bổ sung mới tuyệt vời cho iOS 15 và macOS Monterey, hiện có sẵn bằng một số ngôn ngữ được chọn.

00:23:57.000 --> 00:24:02.000
Nếu bạn muốn kiểm soát nhiều hơn, bạn có thể sử dụng stringsdict.

00:24:02.000 --> 00:24:05.000
Chúng tôi đã không dừng lại ở việc thêm hỗ trợ số nhiều.

00:24:05.000 --> 00:24:10.000
Chúng tôi muốn các chuỗi phần mềm của mình toàn diện hơn.

00:24:10.000 --> 00:24:15.000
Ví dụ, khi một ứng dụng chào đón người dùng, nó khá đơn giản bằng tiếng Anh.

00:24:15.000 --> 00:24:23.000
Nhưng nó không phải bằng tiếng Tây Ban Nha vì nó phụ thuộc vào điều khoản địa chỉ của người dùng.

00:24:23.000 --> 00:24:31.000
Cho đến nay, bạn phải trình bày một chuỗi không được cá nhân hóa, điều này đúng nhưng cứng nhắc đối với hầu hết người dùng Tây Ban Nha.

00:24:31.000 --> 00:24:35.000
Theo nghĩa đen, "Chúng tôi chào đón bạn."

00:24:35.000 --> 00:24:39.000
Vậy điều gì sẽ xảy ra nếu chúng ta có thể cá nhân hóa chuỗi cho người dùng?

00:24:39.000 --> 00:24:43.000
Với ký hiệu Markdown mới của chúng tôi, bạn có thể làm điều đó ngay bây giờ!

00:24:43.000 --> 00:24:49.000
Chuỗi bây giờ sẽ tuân theo thuật ngữ địa chỉ bạn chọn trong cài đặt ngôn ngữ của thiết bị.

00:24:49.000 --> 00:25:04.000
Vì vậy, "Bienvenida" dành cho những người dùng muốn được gọi là nữ tính, "Bienvenido" trong nam tính và nếu chúng tôi không biết, chúng tôi sẽ sử dụng phương án thay thế uốn hiện có.

00:25:04.000 --> 00:25:11.000
Các biến tố nội tuyến cho số nhiều và thuật ngữ địa chỉ có thể được xác định trong mã hoặc bản dịch của bạn.

00:25:11.000 --> 00:25:19.000
Chúng tôi rất vui mừng về sự bổ sung mới này cho các ngôn ngữ được chọn và chúng tôi rất nóng lòng được xem ứng dụng của bạn sử dụng nó.

00:25:19.000 --> 00:25:25.000
Cuối cùng, hôm nay chúng ta đã thấy tất cả các cách bạn có thể viết các chuỗi có thể định vị.

00:25:25.000 --> 00:25:32.000
Nhưng nếu bạn muốn trình bày dữ liệu, bạn thực sự nên để các khuôn khổ viết chúng cho bạn.

00:25:32.000 --> 00:25:39.000
Các nhà định dạng của chúng tôi xử lý hàng trăm sự kết hợp ngôn ngữ và khu vực, và nhiều loại và đơn vị khác nhau.

00:25:39.000 --> 00:25:44.000
Vì vậy, đừng mã hóa cứng; hãy để chúng tôi làm công việc khó khăn.

00:25:44.000 --> 00:25:49.000
Và điều này dễ dàng hơn bao giờ hết bắt đầu từ năm nay để áp dụng các định dạng trong Swift.

00:25:49.000 --> 00:25:55.000
Chúng tôi đã làm cho chúng dễ dàng sử dụng nội tuyến trong phép nội suy chuỗi của bạn.

00:25:55.000 --> 00:26:03.000
Kiểm tra "Có gì mới trong Foundation" năm nay để tìm API yêu thích mới của bạn và nhận thông tin chi tiết về tất cả những gì chúng ta đã thấy hôm nay.

00:26:03.000 --> 00:26:10.000
Nếu bạn cần triển khai các bản phát hành trước đó hoặc muốn biết chi tiết về các bộ định dạng, hãy kiểm tra phiên năm ngoái.

00:26:10.000 --> 00:26:21.000
Được rồi, điều tôi muốn bạn lấy đi hôm nay là nếu bạn viết mã bằng API hiện đại, Xcode sẽ tạo ra tất cả các chuỗi cho bạn.

00:26:21.000 --> 00:26:30.000
Chúng tôi đã thấy cách bạn có thể sắp xếp các chuỗi của mình trên các gói và chúng tôi đã phát hiện ra các API mới để giúp bạn dễ dàng sử dụng ngữ pháp và định dạng.

00:26:30.000 --> 00:26:37.000
Nếu bạn làm theo tất cả các kỹ thuật này, việc thêm một ngôn ngữ mới sẽ không yêu cầu bất kỳ thay đổi mã nào!

00:26:37.000 --> 00:26:40.000
Cuối cùng, luôn luôn kiểm tra.

00:26:40.000 --> 00:26:49.000
Cho dù bạn đã nỗ lực bao nhiêu để bản địa hóa các chuỗi của mình, bạn nên kiểm tra ứng dụng của mình để đảm bảo nó chạy tốt trong tất cả các ngôn ngữ.

00:26:49.000 --> 00:26:54.000
Với điều đó, tôi nóng lòng muốn đặt các buổi hòa nhạc với ứng dụng được bản địa hóa hoàn toàn của bạn.

00:26:54.000 --> 00:26:58.000
Tận hưởng phần còn lại của WWDC, cảm ơn bạn đã xem.

00:26:58.000 --> 23:59:59.000
♪

