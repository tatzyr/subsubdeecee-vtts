WEBVTT

00:00:00.000 --> 00:00:05.000
♪ Nhạc bass đang phát ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
Owen Monsma: Xin chào, và chào mừng đến với "Chất lượng của một ứng dụng Mac Catalyst tuyệt vời."

00:00:13.000 --> 00:00:16.000
Tên tôi là Owen Monsma, và tôi là một kỹ sư Ca cao.

00:00:16.000 --> 00:00:20.000
Và tôi sẽ được tham gia sau bởi đồng nghiệp Dave Rahardja của tôi từ UIKit.

00:00:20.000 --> 00:00:27.000
Hôm nay chúng ta sẽ xem xét ba cân nhắc quan trọng để tạo ra một ứng dụng Catalyst tuyệt vời.

00:00:27.000 --> 00:00:33.000
Đầu tiên, chúng tôi sẽ đề cập đến một số thay đổi cấp cao xảy ra khi bạn chuyển sang ứng dụng Mac Catalyst.

00:00:33.000 --> 00:00:40.000
Tiếp theo, chúng tôi sẽ đi sâu vào một số sửa đổi mã cụ thể mà bạn có thể thực hiện để cải thiện trải nghiệm ứng dụng của mình trên Mac.

00:00:40.000 --> 00:00:44.000
Và chúng ta sẽ kết thúc với thông tin về phân phối ứng dụng.

00:00:44.000 --> 00:00:49.000
Vậy hãy bắt đầu với việc di chuyển ứng dụng của bạn sang Mac Catalyst.

00:00:49.000 --> 00:00:58.000
Bước đầu tiên hướng tới một ứng dụng Catalyst tuyệt vời là có một ứng dụng iPad tuyệt vời và ứng dụng của bạn đã chạy mà không có thay đổi bổ sung nào trên máy Mac với M1.

00:00:58.000 --> 00:01:05.000
Nếu bạn có máy Mac M1, bạn có thể thử điều này ngay lập tức với điểm đến chạy được thiết kế cho iPad trong Xcode.

00:01:05.000 --> 00:01:11.000
Bằng cách áp dụng các tính năng này trên iPad, ứng dụng Mac của bạn sẽ có một khởi đầu tuyệt vời.

00:01:11.000 --> 00:01:19.000
Nếu ứng dụng của bạn hỗ trợ đa nhiệm trên iPad, bạn có thể tự động nhận được hỗ trợ nhiều cửa sổ trên Mac.

00:01:19.000 --> 00:01:29.000
Và nếu bạn sử dụng UIMenuBuilder, các menu của bạn sẽ tự động được chọn trong thanh menu của ứng dụng và bằng các menu theo ngữ cảnh với một cú nhấp chuột phụ vào chế độ xem của bạn.

00:01:29.000 --> 00:01:34.000
Chúng tôi cũng tự động kết nối các hành vi của hệ thống như sao chép/dán và kéo và thả.

00:01:34.000 --> 00:01:46.000
Để tìm hiểu thêm về cách ứng dụng iPad của bạn chạy nguyên trạng trên máy Mac M1, hãy xem video của chúng tôi, "Các chất lượng của các ứng dụng iPad và iPhone tuyệt vời trên máy Mac với M1."

00:01:46.000 --> 00:01:49.000
Nhưng bạn ở đây vì bạn muốn đưa mọi thứ đi xa hơn.

00:01:49.000 --> 00:01:58.000
Bằng cách chọn hộp kiểm Mac, bạn có được khả năng phân phối cho tất cả các máy Mac và có quyền truy cập vào các API bổ sung để tinh chỉnh thêm ứng dụng của mình.

00:01:58.000 --> 00:02:02.000
Vì vậy, hãy làm điều đó với ứng dụng của chúng tôi, Trip Planner!

00:02:02.000 --> 00:02:08.000
Trong cài đặt dự án Xcode của chúng tôi, chúng tôi kiểm tra tùy chọn Mac trong Thông tin triển khai.

00:02:08.000 --> 00:02:16.000
Lưu ý ở bên phải, một cửa sổ bật lên bổ sung xuất hiện, cho phép chúng tôi chọn giữa giao diện iPad được chia tỷ lệ và giao diện được tối ưu hóa Mac.

00:02:16.000 --> 00:02:19.000
Chúng tôi sẽ xem xét lựa chọn này nhiều hơn một chút.

00:02:19.000 --> 00:02:24.000
Hiện tại, hãy nhấp vào xây dựng và chạy trên thanh công cụ Xcode.

00:02:24.000 --> 00:02:27.000
Và ứng dụng của chúng tôi được xây dựng và chạy!

00:02:27.000 --> 00:02:33.000
Bây giờ, nếu ứng dụng của bạn không thể xây dựng được, có một vài điều cần điều tra.

00:02:33.000 --> 00:02:40.000
Một số khung và lớp không dùng nữa không có sẵn cho Mac Catalyst, vì vậy bây giờ là lúc để hiện đại hóa.

00:02:40.000 --> 00:02:46.000
Điều này không chỉ giúp ứng dụng của bạn chạy trên Mac mà còn cải thiện ứng dụng iOS của bạn.

00:02:46.000 --> 00:02:53.000
Chuyển từ OpenGLES sang khung Metal của riêng Apple sẽ mở ra toàn bộ sức mạnh của GPU.

00:02:53.000 --> 00:03:01.000
Khung Danh bạ đã thay thế Sổ địa chỉ bị phản đối và là một cách hướng tới tương lai, an toàn cho luồng để xử lý danh bạ.

00:03:01.000 --> 00:03:06.000
Và UIWebView bị phản đối và đã bị thay thế bởi WKWebView.

00:03:06.000 --> 00:03:10.000
Ngoài ra, hãy đảm bảo kiểm tra các phụ thuộc của bên thứ ba của bạn.

00:03:10.000 --> 00:03:19.000
Nếu các khung đó được phân phối dưới dạng gói XCFramework, hãy đảm bảo rằng chúng cung cấp tệp nhị phân Mac để liên kết.

00:03:19.000 --> 00:03:26.000
Khi bạn bắt đầu làm việc trên ứng dụng Mac của mình, hãy theo dõi các cảnh báo trình biên dịch khi xây dựng dự án của bạn và theo dõi nhật ký bảng điều khiển cho các thông báo thời gian chạy.

00:03:26.000 --> 00:03:33.000
Những cảnh báo này cho bạn biết cách sửa mã của mình để nó chạy tốt như quy trình Mac Catalyst.

00:03:33.000 --> 00:03:40.000
Và hãy nhớ chỉ sử dụng API được hỗ trợ để ứng dụng của bạn tiếp tục chạy trên các bản phát hành macOS trong tương lai.

00:03:40.000 --> 00:03:46.000
Điều quan trọng là phải nhận thức được các sự kiện vòng đời mà ứng dụng của bạn sẽ nhận được khi chạy trên máy Mac.

00:03:46.000 --> 00:04:01.000
Nếu ứng dụng của bạn hiện đang dựa vào các sự kiện vòng đời được gọi trên đại diện ứng dụng của bạn, thay vào đó bạn nên theo dõi vòng đời cảnh để ứng dụng của bạn có thể phản hồi các sự kiện cụ thể cho nội dung của từng cửa sổ trên màn hình nền.

00:04:01.000 --> 00:04:09.000
Hãy nhớ rằng, một ứng dụng Mac Catalyst sẽ không nhận được sự kiện sceneDidEnterBackground thường xuyên như một ứng dụng iPad.

00:04:09.000 --> 00:04:14.000
Các cảnh chuyển sang trạng thái nền khi cửa sổ màn hình nền được thu nhỏ hoặc đóng lại.

00:04:14.000 --> 00:04:25.000
Nếu ứng dụng của bạn sử dụng sceneDidEnterBackground để thực hiện một số công việc thông thường như tự động lưu tài liệu, thay vào đó sử dụng bộ hẹn giờ sẽ đảm bảo hành động này được thực hiện thường xuyên.

00:04:25.000 --> 00:04:32.000
Cuối cùng, hãy nhớ rằng ứng dụng Catalyst của bạn có thể không có cảnh nào nhưng vẫn tiếp tục chạy ở phía trước.

00:04:32.000 --> 00:04:40.000
Trạng thái này xảy ra khi tất cả các cửa sổ ứng dụng của bạn đã bị đóng, nhưng tên ứng dụng của bạn vẫn hiển thị trên thanh menu.

00:04:40.000 --> 00:04:44.000
Bây giờ hãy quyết định xem có nên tối ưu hóa giao diện của chúng ta cho Mac hay không.

00:04:44.000 --> 00:04:50.000
Đây là một trong những quyết định quan trọng nhất cần đưa ra khi bạn lần đầu tiên bắt đầu đưa ứng dụng của mình đến.

00:04:50.000 --> 00:04:58.000
Sử dụng thành ngữ Mac được khuyến nghị để làm cho ứng dụng của bạn cảm thấy như ở nhà nhất trên Mac, nhưng nó yêu cầu một số công việc bổ sung.

00:04:58.000 --> 00:05:08.000
Trong thành ngữ Mac, ứng dụng của bạn sẽ chạy ở tỷ lệ 100 phần trăm, mang đến cho bạn văn bản và hình ảnh hoàn hảo về điểm ảnh và các điều khiển AppKit gốc.

00:05:08.000 --> 00:05:16.000
Nếu bạn muốn, bạn có thể thêm các tài sản dành riêng cho Mac mới vào danh mục tài sản của mình để tận dụng chi tiết bổ sung này.

00:05:16.000 --> 00:05:23.000
Thực hành tốt là cung cấp cả tài sản 1x và 2x để hỗ trợ tất cả các độ phân giải của màn hình.

00:05:23.000 --> 00:05:32.000
Lưu ý, số liệu kích thước của nhiều điều khiển của bạn sẽ thay đổi, vì vậy điều quan trọng là phải điều chỉnh bố cục ứng dụng của bạn để phù hợp.

00:05:32.000 --> 00:05:36.000
Đối với các điều khiển tùy chỉnh trong ứng dụng của bạn, bạn có một lựa chọn bổ sung.

00:05:36.000 --> 00:05:39.000
Tự động, bạn có được kiểu điều khiển Mac.

00:05:39.000 --> 00:05:48.000
Nhưng bây giờ bạn có thể chọn không tham gia các nút và thanh trượt của mình từ chuyển đổi này để sử dụng các API tùy chỉnh không có sẵn trên các điều khiển Mac.

00:05:48.000 --> 00:06:00.000
Nếu bạn sử dụng bất kỳ tài sản tùy chỉnh nào - như đặt ngón tay cái trên UISlider - chúng sẽ xuất hiện lớn hơn dự kiến theo mặc định, vì vậy bạn có thể cần mở rộng quy mô hoặc cung cấp tài sản mới.

00:06:00.000 --> 00:06:08.000
Cũng nên nhớ rằng người dùng Mac mong đợi các điều khiển kiểu AppKit, vì vậy các điều khiển tùy chỉnh nên được sử dụng một cách tiết kiệm.

00:06:08.000 --> 00:06:16.000
Để biết thêm chi tiết về thành ngữ Mac, hãy xem video của chúng tôi, "Tối ưu hóa giao diện của ứng dụng Mac Catalyst của bạn."

00:06:16.000 --> 00:06:25.000
Bởi vì một ứng dụng Catalyst trong thành ngữ Mac đảm nhận các kiểu điều khiển AppKit, cả giao diện và hành vi của một số điều khiển của bạn sẽ thay đổi.

00:06:25.000 --> 00:06:34.000
Trong video của chúng tôi, "Có gì mới trong Mac Catalyst", chúng tôi đã giới thiệu kiểu nút bật lên mới làm tròn bộ loại nút Mac của chúng tôi.

00:06:34.000 --> 00:06:40.000
Hãy đi sâu vào điều gì làm cho các điều khiển này khác nhau và cách hệ thống chọn cái nào để sử dụng.

00:06:40.000 --> 00:06:48.000
Hiểu được các điều khiển này và nơi chúng thường được tìm thấy sẽ giúp bạn đưa ra lựa chọn sáng suốt về việc sử dụng chúng trong ứng dụng của bạn.

00:06:48.000 --> 00:06:53.000
Loại UIButton mặc định là UIButton type .system.

00:06:53.000 --> 00:06:59.000
Với loại nút này, nút sẽ tự động đảm nhận giao diện mong đợi cho ngữ cảnh của nó.

00:06:59.000 --> 00:07:04.000
Trong thành ngữ Mac, điều này có nghĩa là nó trở thành một nút ấn viền.

00:07:04.000 --> 00:07:13.000
Các nút kéo xuống là một điều khiển gốc Mac được sử dụng để cung cấp danh sách các hành động có thể xảy ra và được vẽ bằng một chỉ báo mũi tên đơn.

00:07:13.000 --> 00:07:22.000
Một ví dụ điển hình là PDF kéo xuống trong hộp thoại in, trình bày các hành động như Lưu dưới dạng PDF hoặc Gửi trong Thư.

00:07:22.000 --> 00:07:34.000
Để có được nút kéo xuống, hãy đảm bảo rằng bạn đã gán menu giao diện người dùng cho nút của mình thông qua thuộc tính menu của nó và đặt showMenuAsPrimaryAction thành true.

00:07:34.000 --> 00:07:39.000
Nút của bạn sẽ có giao diện kéo xuống và trình bày menu chỉ bằng một cú nhấp chuột.

00:07:39.000 --> 00:07:45.000
Và mới đối với Catalyst với macOS Monterey là các nút bật lên.

00:07:45.000 --> 00:07:52.000
Các nút bật lên trông tương tự như các nút kéo xuống nhưng có chỉ báo mũi tên kép và chúng làm điều gì đó hơi khác một chút.

00:07:52.000 --> 00:08:00.000
Khi kéo xuống kích hoạt một hành động, một nút bật lên được sử dụng để chọn một trong một tập hợp các tùy chọn loại trừ lẫn nhau.

00:08:00.000 --> 00:08:03.000
Ví dụ, chọn ngày trong tuần.

00:08:03.000 --> 00:08:07.000
Tiêu đề trong nút sau đó cập nhật để phản ánh lựa chọn.

00:08:07.000 --> 00:08:13.000
Đây là một lựa chọn tốt, thân thiện với Mac để thay thế UIPickerView trong ứng dụng của bạn.

00:08:13.000 --> 00:08:21.000
Nhận được điều khiển này tương tự như nút kéo xuống, nhưng thay đổi thuộc tínhSelectionAsPrimaryAction cũng phải đúng.

00:08:21.000 --> 00:08:30.000
Cuối cùng, các hộp kiểm được sử dụng để đại diện cho một nút chuyển đổi nhị phân không độc quyền và là một giải pháp thay thế thân thiện với chuột hơn cho công tắc.

00:08:30.000 --> 00:08:35.000
Và hóa ra, bạn nhận được hộp kiểm mà không cần làm thêm!

00:08:35.000 --> 00:08:43.000
Chỉ cần đảm bảo rằng công tắc có bộ tiêu đề và lưu ý rằng thuộc tính tiêu đề chỉ được hỗ trợ trong thành ngữ Mac.

00:08:43.000 --> 00:08:56.000
Theo mặc định, công tắc có Kiểu tự động ưu tiên và bạn có thể xác minh trong thời gian chạy xem đó là công tắc hay hộp kiểm bằng cách sử dụng thuộc tính kiểu chỉ đọc.

00:08:56.000 --> 00:09:02.000
Bây giờ, để đi sâu vào một số thay đổi mã cụ thể, hãy giao mọi thứ cho đồng nghiệp của tôi, Dave.

00:09:02.000 --> 00:09:07.000
Dave Rahardja: Xin chào mọi người, tên tôi là Dave, và tôi là một kỹ sư trong nhóm UIKit.

00:09:07.000 --> 00:09:13.000
Hãy nói về một số điều cụ thể bạn có thể làm để làm cho ứng dụng Mac Catalyst của bạn cảm thấy như ở nhà hơn.

00:09:13.000 --> 00:09:18.000
Một ứng dụng Mac Catalyst có thể có quyền truy cập vào nhiều bất động sản màn hình hơn.

00:09:18.000 --> 00:09:26.000
Các cửa sổ ứng dụng của bạn có thể được thay đổi kích thước lớn hơn nhiều trên máy Mac so với trên iPad và có thể được hiển thị toàn màn hình.

00:09:26.000 --> 00:09:31.000
Hãy dành một chút thời gian để thay đổi kích thước cửa sổ ứng dụng của bạn và chú ý đến bố cục của nó.

00:09:31.000 --> 00:09:39.000
Đảm bảo rằng bạn đang sử dụng không gian bổ sung để hiển thị nhiều nội dung và điều khiển hơn để làm cho các ứng dụng của bạn dễ sử dụng hơn.

00:09:39.000 --> 00:09:43.000
Thay đổi kích thước trực tiếp sẽ đưa hiệu suất bố cục ứng dụng của bạn vào thử nghiệm.

00:09:43.000 --> 00:09:51.000
Ứng dụng của bạn nên thực hiện ít công việc nhất có thể trong quá trình bố trí để giữ cho các cửa sổ của ứng dụng của bạn phản hồi trong quá trình thay đổi kích thước.

00:09:51.000 --> 00:09:58.000
Lưu ý đặc biệt các tương tác trong ứng dụng của bạn dựa trên các bài thuyết trình và cửa sổ bật lên theo phương thức.

00:09:58.000 --> 00:10:06.000
Với diện tích hiển thị lớn hơn, bạn có thể làm cho các tương tác này luôn có sẵn bằng cách hiển thị chúng dưới dạng chế độ xem trẻ em.

00:10:06.000 --> 00:10:09.000
Bây giờ, hãy nói về các thiết bị đầu vào con trỏ.

00:10:09.000 --> 00:10:18.000
Hãy nhớ rằng không phải tất cả các máy Mac đều có bàn di chuột và một số máy Mac được kết nối với các thiết bị đầu vào không hỗ trợ cuộn.

00:10:18.000 --> 00:10:29.000
Nếu chế độ xem của bạn dựa vào cử chỉ chụm hoặc xoay để hoạt động, hãy đảm bảo rằng tất cả các khả năng của nó đều có thể truy cập bằng chuột mà không cần nhập cuộn.

00:10:29.000 --> 00:10:38.000
Thêm các nút bổ sung hoặc các điều khiển khác vào chế độ xem ứng dụng Mac Catalyst của bạn để đảm bảo tất cả các chức năng của nó đều có thể truy cập được.

00:10:38.000 --> 00:10:48.000
Ngoài ra, việc phát hiện các công cụ sửa đổi bàn phím trên bộ nhận dạng cử chỉ chạm hoặc xoay đôi khi có thể cung cấp quyền truy cập nhanh hơn vào chức năng của chế độ xem của bạn.

00:10:48.000 --> 00:10:54.000
Ví dụ, cho phép Shift-pan phóng to.

00:10:54.000 --> 00:10:57.000
Hãy nói về các phím tắt và menu chính.

00:10:57.000 --> 00:11:06.000
Menu chính của ứng dụng Mac là một nơi tuyệt vời để khám phá tất cả các hành động có sẵn trong ứng dụng của bạn, cũng như các phím tắt liên quan của chúng.

00:11:06.000 --> 00:11:17.000
Nếu ứng dụng của bạn đã hỗ trợ các phím tắt bằng cách trả về các lệnh chính từ người phản hồi, hãy thêm các lệnh này vào menu chính bằng API trình tạo menu thay thế.

00:11:17.000 --> 00:11:24.000
Di chuyển tất cả các phím tắt của bạn đến menu chính giúp chúng có thể phát hiện được ngay cả khi chúng hiện không được bật.

00:11:24.000 --> 00:11:35.000
Hơn nữa, sử dụng MenuBuilder API để sắp xếp các phím tắt của bạn trên Mac Catalyst cũng sắp xếp chúng trên lớp phủ phím tắt iPad.

00:11:35.000 --> 00:11:42.000
Khi bạn xây dựng menu chính của mình, hãy đảm bảo thêm tất cả các hành động cần thiết để tương tác với ứng dụng của bạn.

00:11:42.000 --> 00:11:49.000
Các hành động được thực hiện bằng cử chỉ trên iPad cũng có thể truy cập được bằng cách chọn các mục từ menu chính.

00:11:49.000 --> 00:11:56.000
Thêm các phím tắt vào các mục menu của bạn sẽ cung cấp quyền truy cập nhanh hơn vào các hành động này.

00:11:56.000 --> 00:12:09.000
Bởi vì thanh menu và các hành động lệnh chính được định tuyến bắt đầu từ người phản hồi đầu tiên, hãy đảm bảo rằng các chế độ xem sẽ là mục tiêu của những hành động đó có thể trở thành người phản hồi đầu tiên và có thể chấp nhận sự tập trung.

00:12:09.000 --> 00:12:18.000
Bạn có thể làm điều này bằng cách để quan điểm của bạn trả về true cho các thuộc tính canBecomeFirstResponder và canBecomeFocused.

00:12:18.000 --> 00:12:37.000
Vì một ứng dụng Mac phải ít dựa vào thao tác trực tiếp các chế độ xem và nhiều hơn vào việc người dùng chọn chế độ xem và sau đó chọn một hành động từ menu chính, khả năng nhiều lượt xem ứng dụng của bạn trở thành người phản hồi đầu tiên và tập trung trở nên quan trọng hơn trên Mac Catalyst.

00:12:37.000 --> 00:12:45.000
Để biết thêm thông tin về tiêu điểm và phản hồi đầu tiên, hãy xem video, "Tập trung vào điều hướng bàn phím iPad."

00:12:45.000 --> 00:12:52.000
Trong khi chúng tôi đang nói về chủ đề người phản hồi, hãy đảm bảo để chuỗi người phản hồi không được sửa đổi trong ứng dụng của bạn.

00:12:52.000 --> 00:12:56.000
Nói cách khác, đừng ghi đè nextResponder.

00:12:56.000 --> 00:13:04.000
Để chuỗi phản hồi không được sửa đổi đảm bảo rằng Mac Catalyst có thể định tuyến hành động của bạn đến các mục tiêu thích hợp.

00:13:04.000 --> 00:13:17.000
Nếu ứng dụng của bạn phải xử lý một số hành động nhất định bằng cách sử dụng các đối tượng không nằm trong chuỗi phản hồi của nó, hãy sử dụng chức năng target (cho Action:, withSender:) để ủy thác các hành động này cho đối tượng thích hợp thay thế.

00:13:17.000 --> 00:13:19.000
Hãy xem qua mã.

00:13:19.000 --> 00:13:31.000
Trong ví dụ này, quan điểm của chúng tôi ủy quyền hành động setAsFavorite cho một đối tượng mô hình, đồng thời cho phép các hành động khác tiếp tục truyền bá chuỗi phản hồi.

00:13:31.000 --> 00:13:36.000
Bây giờ hãy nói về các cảnh và cách chúng hoạt động trong ứng dụng Mac Catalyst.

00:13:36.000 --> 00:13:41.000
Một ứng dụng Mac có thể có nhiều cửa sổ máy tính để bàn mở cùng một lúc.

00:13:41.000 --> 00:13:48.000
Trong ứng dụng Mac Catalyst, mỗi cửa sổ này được ghép nối với UIWindowScene.

00:13:48.000 --> 00:13:51.000
Ứng dụng của bạn có thể cung cấp các cửa sổ có các chức năng khác nhau.

00:13:51.000 --> 00:13:59.000
Ví dụ, nó có thể có một cửa sổ tài liệu, một cửa sổ xem chi tiết, một cửa sổ soạn tin nhắn, v.v.

00:13:59.000 --> 00:14:07.000
Cách tốt nhất để tổ chức các chức năng cảnh khác nhau này là xác định cấu hình cảnh cho từng loại cửa sổ.

00:14:07.000 --> 00:14:14.000
Để xác định cấu hình cảnh, hãy thêm chúng vào Info.plist của bạn trong mục Bản kê khai cảnh ứng dụng.

00:14:14.000 --> 00:14:22.000
Trong mảng Vai trò Phiên Ứng dụng, tạo một cấu hình cho mỗi loại cảnh mà ứng dụng của bạn hỗ trợ.

00:14:22.000 --> 00:14:33.000
Đặt tên cho mỗi cấu hình này và chọn lớp cảnh, lớp đại diện và bảng phân cảnh sẽ được khởi tạo khi cảnh được tạo.

00:14:33.000 --> 00:14:42.000
Bây giờ chúng ta đã xác định cấu hình cảnh của mình, hãy thảo luận về cách chúng ta có thể sử dụng chúng để tạo một cảnh mới của một cấu hình cụ thể.

00:14:42.000 --> 00:14:49.000
Trong ví dụ này, chúng tôi muốn tạo một cảnh xem chi tiết mới khi chế độ xem được nhấp đúp.

00:14:49.000 --> 00:14:56.000
Điều đầu tiên chúng tôi làm là xác định một loại hoạt động người dùng mới để yêu cầu cảnh xem chi tiết.

00:14:56.000 --> 00:14:59.000
Chúng tôi sẽ gọi nó là viewDetailActivityType.

00:14:59.000 --> 00:15:08.000
Khi chúng tôi tạo hoạt động người dùng mới đó, chúng tôi muốn chuyển một mã định danh cho mục mà chúng tôi muốn hiển thị chi tiết.

00:15:08.000 --> 00:15:15.000
Để làm điều đó, chúng tôi xác định một itemIDKey sẽ giữ thông tin đó trong từ điển thông tin người dùng.

00:15:15.000 --> 00:15:30.000
Sau đó, trong trình xử lý sự kiện nhấp đúp chuột của chúng tôi, chúng tôi tạo một đối tượng NSUserActivity mới thuộc loại thích hợp và đặt thuộc tính userInfo của nó thành một từ điển chứa itemID mà chúng tôi muốn hiển thị.

00:15:30.000 --> 00:15:40.000
Cuối cùng, chúng tôi gọi hàm UIApplication requestSceneSessionActivation, chuyển vào hoạt động người dùng mà chúng tôi vừa tạo.

00:15:40.000 --> 00:15:44.000
Điều này sẽ khiến hệ thống tạo ra cảnh mới của chúng tôi.

00:15:44.000 --> 00:15:49.000
Vì vậy, bây giờ chúng tôi biết cách yêu cầu một cảnh mới cho một loại hoạt động người dùng cụ thể.

00:15:49.000 --> 00:15:56.000
Bây giờ hãy nói về cách sử dụng thông tin đó để tải cấu hình cảnh thích hợp.

00:15:56.000 --> 00:16:05.000
Chúng tôi phản hồi các yêu cầu tạo cảnh bằng cách triển khai chức năng cấu hình ứng dụng ForConnecting trong đại diện ứng dụng.

00:16:05.000 --> 00:16:12.000
Trong quá trình triển khai của chúng tôi, chúng tôi kiểm tra xem yêu cầu cảnh đến có chứa bất kỳ hoạt động nào của người dùng hay không.

00:16:12.000 --> 00:16:20.000
Yêu cầu có thể chứa nhiều hoạt động của người dùng, nhưng đối với ví dụ mã này, chúng tôi sẽ chỉ kiểm tra hoạt động đầu tiên.

00:16:20.000 --> 00:16:26.000
Nếu có một hoạt động chúng tôi cần xử lý, sau đó chúng tôi kiểm tra loại hoạt động của nó.

00:16:26.000 --> 00:16:31.000
Ở đây, chúng tôi kiểm tra xem nó có bằng viewDetailActivityType hay không.

00:16:31.000 --> 00:16:36.000
Nếu vậy, chúng tôi sẽ trả lại cấu hình cảnh có tên DetailViewer.

00:16:36.000 --> 00:16:51.000
Điều này sẽ khiến hệ thống kiểm tra trong Info.plist của chúng tôi để biết cấu hình của tên đó và tải các lớp đại diện cảnh và cảnh thích hợp và hiển thị bảng phân cảnh được chỉ định trong cửa sổ máy tính để bàn mới.

00:16:51.000 --> 00:16:59.000
Nếu không có cấu hình cảnh cụ thể nào được tải, chúng tôi sẽ quay lại cấu hình mặc định.

00:16:59.000 --> 00:17:01.000
Còn một việc nữa để làm.

00:17:01.000 --> 00:17:05.000
Hãy nhớ rằng chúng tôi đã lưu itemID để mặt hàng được hiển thị?

00:17:05.000 --> 00:17:11.000
Chúng ta vẫn cần đặt giá trị đó trên bộ điều khiển chế độ xem của cảnh mà chúng ta vừa tạo.

00:17:11.000 --> 00:17:15.000
Chúng tôi làm điều đó trong lớp SceneDelegate của chúng tôi.

00:17:15.000 --> 00:17:23.000
Chức năng phiên willConnectTo của cảnh được gọi ngay trước khi cảnh sắp được hiển thị trên màn hình nền.

00:17:23.000 --> 00:17:30.000
Hoạt động của người dùng đã được chuyển vào đại diện ứng dụng của chúng tôi cũng được chuyển vào chức năng này trong đại diện cảnh.

00:17:30.000 --> 00:17:38.000
Bây giờ chúng ta có thể trích xuất itemID từ từ điển userInfo của nó và đặt nó trên bộ điều khiển chế độ xem mới của chúng ta.

00:17:38.000 --> 00:17:46.000
Sử dụng NSUserActivity để định cấu hình các cảnh mới cũng giúp ứng dụng của bạn hỗ trợ khôi phục trạng thái dễ dàng hơn.

00:17:46.000 --> 00:17:57.000
Nếu đại diện cảnh của bạn phản hồi cuộc gọi lại stateRestorationActivity (cho Scene:), hoạt động người dùng được trả về sẽ được hệ thống lưu lại khi ứng dụng của bạn thoát.

00:17:57.000 --> 00:18:14.000
Nếu khôi phục trạng thái được bật trong Tùy chọn hệ thống, lần tới khi ứng dụng của bạn được khởi chạy, hệ thống sẽ tạo lại cảnh của bạn và chuyển đối tượng hoạt động người dùng của từng cảnh sang cấu hình ứng dụng của đại diện ứng dụng của bạn để kết nối chức năng SceneSession.

00:18:14.000 --> 00:18:20.000
Đây là chức năng tương tự được gọi khi ứng dụng của bạn tạo cảnh mới, như đã đề cập trước đó.

00:18:20.000 --> 00:18:35.000
Bằng cách sử dụng một tập hợp các loại hoạt động nhất quán, bạn có thể sử dụng cùng một mã để chọn cấu hình cảnh thích hợp khi ứng dụng của bạn tạo cửa sổ máy tính để bàn mới và trong quá trình khôi phục trạng thái.

00:18:35.000 --> 00:18:56.000
Có một điều bạn cần thêm vào đại diện cảnh của mình để ứng dụng của bạn có thể xử lý cả yêu cầu cảnh mới và khôi phục trạng thái với cùng một mã và đó là sửa đổi chức năng phiên willConnect cảnh của bạn trong đại diện cảnh của bạn để nó quay trở lại stateRestorationActivity nếu hoạt động trong các tùy chọn kết nối cảnh là số không.

00:18:56.000 --> 00:19:02.000
Bây giờ ứng dụng của bạn đã sẵn sàng để xử lý các yêu cầu cảnh mới và khôi phục trạng thái.

00:19:02.000 --> 00:19:09.000
Để biết thêm thông tin về khôi phục trạng thái, hãy xem video "Giới thiệu nhiều cửa sổ trên iPad".

00:19:09.000 --> 00:19:13.000
Tiếp theo, hãy nói về thanh công cụ ứng dụng của bạn.

00:19:13.000 --> 00:19:21.000
Một ứng dụng Mac tuyệt vời sử dụng thanh công cụ của cửa sổ để trình bày các hành động được sử dụng thường xuyên và các tùy chọn điều hướng khác để truy cập nhanh.

00:19:21.000 --> 00:19:34.000
Không giống như thanh công cụ trên iOS, thanh công cụ trên cửa sổ máy tính để bàn của ứng dụng Mac Catalyst không thay đổi khi bộ điều khiển chế độ xem xuất hiện và biến mất trong bộ điều khiển Split View hoặc bộ điều khiển điều hướng.

00:19:34.000 --> 00:19:43.000
Bởi vì các thanh công cụ được liên kết chặt chẽ với các cảnh, nơi tốt nhất để định cấu hình thanh công cụ của bạn là trong lớp con đại diện cảnh của bạn.

00:19:43.000 --> 00:19:49.000
Một mục quan trọng thường được tìm thấy trên thanh công cụ là nút chia sẻ.

00:19:49.000 --> 00:20:01.000
Thêm NSSharingServicePicker ToolbarItem vào thanh công cụ của bạn cho phép ứng dụng của bạn chia sẻ nội dung chính được hiển thị trong cảnh của bạn bằng cách sử dụng menu chia sẻ tiêu chuẩn của Mac.

00:20:01.000 --> 00:20:11.000
Trong macOS Monterey, chúng tôi đã thêm khả năng nút tự động sử dụng cấu hình các mục hoạt động được chia sẻ bởi cảnh của bạn.

00:20:11.000 --> 00:20:19.000
Lưu ý rằng đây là cùng một cấu hình mà chức năng Chia sẻ này mới của Siri sử dụng trên iOS.

00:20:19.000 --> 00:20:29.000
Một cách tốt để cung cấp cấu hình chia sẻ cho cảnh của bạn là trả về một đối tượng từ thuộc tính activityItemsConfiguration của RootViewController.

00:20:29.000 --> 00:20:37.000
Trên Mac Catalyst, NSSharingServicePicker ToolbarItem trong thanh công cụ của ứng dụng của bạn sẽ tự động sử dụng thuộc tính này.

00:20:37.000 --> 00:20:43.000
Trên iOS, Siri sử dụng cùng một thuộc tính để chia sẻ dữ liệu bằng cách sử dụng Chia sẻ cái này.

00:20:43.000 --> 00:20:48.000
Tất nhiên, thanh công cụ không phải là nơi duy nhất ứng dụng của bạn có thể cung cấp các mục để chia sẻ.

00:20:48.000 --> 00:20:55.000
Thông thường, bạn muốn cho phép chia sẻ hình ảnh hoặc các mục khác thông qua trình đơn ngữ cảnh.

00:20:55.000 --> 00:21:04.000
Để làm điều này, hãy trả về một đối tượng activityItemsConfiguration từ chế độ xem của bạn sau đó thêm một contextMenuInteraction.

00:21:04.000 --> 00:21:09.000
Đây là kết quả, trên cả Mac Catalyst và iPad.

00:21:09.000 --> 00:21:16.000
Trên Mac Catalyst, lưu ý rằng hành động Sao chép và menu Chia sẻ sẽ tự động được thêm vào.

00:21:16.000 --> 00:21:21.000
Và khi ứng dụng của bạn chạy trên iPad, hành động Sao chép và Chia sẻ sẽ được thêm vào.

00:21:21.000 --> 00:21:25.000
Nhấn vào hành động Chia sẻ sẽ tự động trình bày bảng chia sẻ.

00:21:25.000 --> 00:21:36.000
Sử dụng API Cấu hình Mục Hoạt động cho phép ứng dụng của bạn khai báo những gì chế độ xem của nó có thể chia sẻ để hệ thống có thể hiển thị giao diện người dùng phù hợp trên mỗi nền tảng.

00:21:36.000 --> 00:21:47.000
Bây giờ chúng ta đã nói về cách ứng dụng của bạn có thể chia sẻ dữ liệu của nó, hãy nói về cách ứng dụng của bạn có thể nhập hình ảnh từ iPhone hoặc iPad bằng Máy ảnh liên tục.

00:21:47.000 --> 00:21:56.000
Nếu ứng dụng của bạn sử dụng UITextView để hiển thị văn bản phong phú, hỗ trợ Continuity Camera sẽ tự động được bật trong macOS Monterey.

00:21:56.000 --> 00:22:07.000
Nhấp chuột phải vào chế độ xem văn bản sẽ hiển thị menu ngữ cảnh với tùy chọn chụp ảnh trên iPhone hoặc iPad của bạn và tự động thêm nó dưới dạng tệp đính kèm.

00:22:07.000 --> 00:22:24.000
Để thêm hỗ trợ cho Continuity Camera vào bất kỳ chế độ xem nào, chỉ cần trả lại một đối tượng UIPasteConfiguration chấp nhận hình ảnh từ thuộc tính pasteConfiguration của chế độ xem của bạn, sau đó thêm giao diện người dùng contextMenuInteraction.

00:22:24.000 --> 00:22:33.000
Sau đó triển khai chức năng paste(itemProviders:) để tải và dán các đối tượng đến - trong trường hợp này là hình ảnh.

00:22:33.000 --> 00:22:53.000
Như một phần thưởng, việc trả lại cấu hình dán từ chế độ xem của bạn không chỉ cho phép Máy ảnh liên tục khi cấu hình chấp nhận hình ảnh, nó còn tự động kích hoạt hành động Dán trong menu ngữ cảnh và cho phép chế độ xem của bạn chấp nhận các lần kéo đến, cả trên Mac Catalyst và iPad.

00:22:53.000 --> 00:23:00.000
Vì vậy, đó là một số điều cụ thể bạn có thể làm để giúp ứng dụng của mình trở thành một ứng dụng Mac Catalyst tuyệt vời.

00:23:00.000 --> 00:23:04.000
Bây giờ chúng ta hãy quay lại Owen để nói về việc phân phối.

00:23:04.000 --> 00:23:06.000
Owen: Cảm ơn, Dave.

00:23:06.000 --> 00:23:17.000
Khi nói đến việc phát hành ứng dụng của bạn, điều quan trọng cần nhớ là các ứng dụng Mac Catalyst là ứng dụng Mac và có thể được phân phối thông qua tất cả các phương tiện giống như bất kỳ ứng dụng Mac nào khác.

00:23:17.000 --> 00:23:28.000
Bạn có thể xuất bản ứng dụng của mình trên Mac App Store, với tùy chọn Universal Purchase để khách hàng iOS hiện tại của bạn tự động nhận được ứng dụng Mac của bạn.

00:23:28.000 --> 00:23:34.000
Bạn có quyền truy cập vào TestFlight để phát hành bản beta của ứng dụng của mình và để nhận phản hồi sớm về các bản dựng mới.

00:23:34.000 --> 00:23:39.000
Bạn cũng có thể sử dụng App Notarization và tự phân phối nó.

00:23:39.000 --> 00:23:47.000
Và nếu bạn phát triển một khuôn khổ, hãy sử dụng XCFrameworks để phân phối đa nền tảng, kết hợp các tệp nhị phân với nhau cho tất cả các nền tảng.

00:23:47.000 --> 00:23:57.000
Hôm nay, chúng tôi đã đề cập đến quá trình xây dựng ứng dụng iOS của bạn cho Mac với Mac Catalyst và nêu bật một số quyết định và thay đổi quan trọng cần thực hiện trên đường đi.

00:23:57.000 --> 00:24:00.000
Bây giờ là lúc để xem xét các dự án của riêng bạn.

00:24:00.000 --> 00:24:12.000
Thật dễ dàng để ứng dụng của bạn chạy trên Mac và chỉ với một chút công việc, bạn có thể làm cho ứng dụng của mình cảm thấy như ở nhà và cung cấp cho một nhóm khách hàng hào hứng hoàn toàn mới.

00:24:12.000 --> 00:24:13.000
Cảm ơn bạn!

00:24:13.000 --> 23:59:59.000
♪

