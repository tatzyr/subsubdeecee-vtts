WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
안녕.

00:00:10.000 --> 00:00:13.000
iOS에서 사파리 웹 확장 프로그램을 만나보세요.

00:00:13.000 --> 00:00:16.000
저는 사파리 팀의 엔지니어인 데이비드 케사다입니다.

00:00:16.000 --> 00:00:22.000
그리고 오늘, 저는 iOS 15, Safari Web Extensions의 흥미진진한 새로운 기능을 살펴볼 것입니다.

00:00:22.000 --> 00:00:31.000
웹 확장 프로그램은 사용자가 다양한 방법으로 브라우징을 확장하고 사용자 정의할 수 있는 강력한 유형의 브라우저 확장 프로그램입니다.

00:00:31.000 --> 00:00:36.000
그것들은 표준 웹 기술로 만들어졌다: HTML, CSS, 자바스크립트.

00:00:36.000 --> 00:00:48.000
그리고 WebExtension API는 한동안 모든 주요 데스크톱 브라우저에서 사용할 수 있었습니다. 즉, 브라우저 확장 프로그램을 한 번 작성하고 모든 브라우저에 배포하여 많은 사용자에게 도달할 수 있습니다.

00:00:48.000 --> 00:00:57.000
하지만 이제, 웹 확장 프로그램이 iOS 15에 출시되어 그 어느 때보다 더 많은 사용자를 위한 브라우저 확장 프로그램을 구축할 수 있다는 것을 알려드리게 되어 기쁩니다.

00:00:57.000 --> 00:01:02.000
iOS에서 실행되는 Safari 웹 확장 프로그램의 데모를 보여드리고 싶습니다.

00:01:02.000 --> 00:01:05.000
나는 씨 크리에이터라는 확장 프로그램을 자랑할 것이다.

00:01:05.000 --> 00:01:12.000
이 확장 프로그램은 원래 Mac의 브라우저를 위해 작성되었지만, iOS로 가져오기 위해 노력해 왔습니다.

00:01:12.000 --> 00:01:22.000
이 확장 프로그램은 나에게 바다 생물에 대한 재미있는 사실을 보여주고 바다 생물의 이름을 이모티콘으로 대체하여 바다 생물에 대해 더 재미있게 읽을 수 있게 해준다.

00:01:22.000 --> 00:01:26.000
아이패드에서 이것을 살펴봅시다.

00:01:26.000 --> 00:01:32.000
이제, 저는 방금 씨 크리에이터를 설치했고, 물고기에 관한 기사를 읽고 있는 사파리를 열었습니다.

00:01:32.000 --> 00:01:38.000
이모티콘으로 이 페이지를 활기차게 만들 수 있도록 여기서 Sea Creator를 사용하고 싶습니다.

00:01:38.000 --> 00:01:47.000
그래서 나는 액션 메뉴를 열고 Sea Creator를 포함하여 내가 사용할 수 있는 모든 확장 프로그램을 보여주는 새로운 확장 목록을 자세히 살펴볼 것이다.

00:01:47.000 --> 00:01:49.000
그래서 내가 켤게.

00:01:49.000 --> 00:01:58.000
이제, Sea Creator의 또 다른 기능은 새 탭을 열 때마다 사용하는 사용자 지정 시작 페이지로 Safari의 전면과 중앙에 둘 수 있다는 것입니다.

00:01:58.000 --> 00:02:02.000
조금 있다가 확인해 볼게.

00:02:02.000 --> 00:02:08.000
그리고 이제 Sea Creator를 켰으니, 내가 사용할 수 있는 액션 메뉴에 바로 있습니다.

00:02:08.000 --> 00:02:14.000
그리고 내가 그렇게 할 때, 사파리는 나에게 Sea Creator에게 이 사이트에 대한 완전한 접근 권한을 부여해도 괜찮은지 묻는다.

00:02:14.000 --> 00:02:26.000
우리는 Mac의 Safari에서 iOS로 동일한 웹 확장 권한 모델을 가져왔습니다. 즉, 사용자로서 내 브라우징 확장 프로그램에 액세스할 수 있는 양을 완전히 제어할 수 있습니다.

00:02:26.000 --> 00:02:28.000
나중에 이것에 대해 더 자세히 얘기할게.

00:02:28.000 --> 00:02:31.000
하지만 지금 당장, 나는 Sea Creator가 달리도록 허용할 것이다.

00:02:31.000 --> 00:02:37.000
그리고 그렇게, 그것은 페이지에 있는 이 모든 물고기 이모티콘으로 바뀌었고, 그것이 바로 내가 그것을 읽는 것을 좋아하는 방식이다.

00:02:37.000 --> 00:02:43.000
그것은 또한 내가 지금까지 얼마나 많은 단어를 대체했는지 보여주는 이 팝업을 열었다.

00:02:43.000 --> 00:02:45.000
하지만 이건 그냥 한 페이지가 아니야.

00:02:45.000 --> 00:02:50.000
나는 Sea Creator에게 이 웹사이트 전체에서 작업할 수 있는 권한을 부여했다.

00:02:50.000 --> 00:02:57.000
그래서 내가 다른 페이지로 이동할 때, Sea Creator는 여전히 나를 위해 일하고 있으며 여기에서도 이모티콘을 준다.

00:02:57.000 --> 00:03:02.000
일단 사용하기 시작하면 확장 프로그램을 다시 열지 않아도 됩니다.

00:03:02.000 --> 00:03:05.000
물론, 씨 크리에이터는 내가 앞서 언급한 기능이 하나 더 있다.

00:03:05.000 --> 00:03:20.000
더 많은 브라우징을 하기 위해 새 탭을 열 때, 나는 오늘 불가사리에 대한 오늘의 사실과 함께 Sea Creator의 대담한 새 탭 페이지에 의해 환영받는다-- 그리고 다시 한 번, Sea Creator가 지금까지 나에게 얼마나 많은 이모티콘을 줬는지 보여주는 카운터.

00:03:20.000 --> 00:03:22.000
이건 꽤 멋져.

00:03:22.000 --> 00:03:26.000
그래서 그것은 iOS에서 잘 작동하는 Sea Creator를 빠르게 살펴보는 것이었다.

00:03:26.000 --> 00:03:32.000
이 세션에서, 저는 당신이 어떻게 iOS용 사파리 웹 확장 프로그램을 만들 수 있는지 보여주고 싶습니다.

00:03:32.000 --> 00:03:40.000
그리고 저는 기존 확장 프로그램을 몇 가지 변경 사항으로 iOS로 가져온 방법의 예로 Sea Creator를 사용할 것입니다.

00:03:40.000 --> 00:03:44.000
하지만 이전에 브라우저 확장 프로그램을 작성한 적이 없다면 걱정하지 마세요.

00:03:44.000 --> 00:03:51.000
웹 확장이 어떻게 작동하는지, 그리고 어떻게 새로운 것을 만들기 시작할 수 있는지에 대한 개요를 알려드리겠습니다.

00:03:51.000 --> 00:04:00.000
그 과정에서, 나는 당신의 확장이 최고가 될 수 있도록 몇 가지 디버깅 기술과 모범 사례를 다룰 것입니다.

00:04:00.000 --> 00:04:08.000
그리고 사용자 개인 정보 보호와 그것이 사파리 웹 확장의 권한 모델과 어떤 관련이 있는지에 대한 몇 가지 생각으로 마무리하겠습니다.

00:04:08.000 --> 00:04:15.000
그래서, 우리의 여정은 애초에 iOS에서 실행할 수 있는 웹 확장 프로그램을 만드는 것으로 시작됩니다.

00:04:15.000 --> 00:04:20.000
이것이 어떻게 작동하는지 이해하기 위해 배후를 살펴봅시다.

00:04:20.000 --> 00:04:26.000
사파리의 경우, 웹 확장은 앱의 일부라는 것을 이해하는 것이 중요하다.

00:04:26.000 --> 00:04:31.000
그래서 웹 확장 프로그램을 설치하고 싶을 때, 앱을 설치하세요.

00:04:31.000 --> 00:04:38.000
그리고 다른 유형의 iOS 앱과 마찬가지로, Safari 웹 확장 프로그램이 있는 앱은 App Store에서 찾을 수 있습니다.

00:04:38.000 --> 00:04:44.000
그리고 Xcode는 확장 프로그램을 배송하기 위해 앱을 만드는 데 필요한 모든 것을 갖추고 있습니다.

00:04:44.000 --> 00:04:50.000
따라서 iOS용 Safari 웹 확장 프로그램을 구축하는 것에 대해 생각할 때, 세 곳 중 한 곳에서 시작할 수 있습니다.

00:04:50.000 --> 00:05:08.000
아마도 당신은 처음부터 새로운 확장 프로그램을 만들고 있거나, 이미 다른 브라우저를 위해 하나를 썼고, 그것을 사파리로 가져오고 싶거나, 이미 Mac에서 사파리 확장 프로그램을 가지고 있고, iOS에서도 사용할 수 있도록 하고 싶을 수도 있습니다.

00:05:08.000 --> 00:05:12.000
나는 이 각각의 경우에 네가 무엇을 할 수 있는지 검토하고 싶어.

00:05:12.000 --> 00:05:21.000
그래서 먼저, 새로운 웹 확장을 만들고 싶다면, Xcode에 포함된 템플릿을 사용하여 매우 쉽게 시작할 수 있습니다.

00:05:21.000 --> 00:05:31.000
새로운 Xcode 프로젝트를 만들고 Safari 확장 앱 템플릿을 사용하여 웹 확장 프로그램과 포함된 앱 구축을 시작할 수 있습니다.

00:05:31.000 --> 00:05:38.000
그리고 이 템플릿을 사용하면, 일반적인 웹 확장 프로그램이 가질 수 있는 모든 리소스와 함께 제공되는 확장 프로그램을 얻을 수 있습니다.

00:05:38.000 --> 00:05:47.000
이미 있는 것을 사용자 정의하거나 확장에 필요한 것에 따라 조각을 추가하거나 제거하여 이것을 출발점으로 사용할 수 있습니다.

00:05:47.000 --> 00:05:59.000
이제, 이미 다른 브라우저용 웹 확장 프로그램을 구축했다면, Safari Web Extension Converter라는 도구를 활용하여 기존 확장 프로그램에서 Xcode 프로젝트를 자동으로 만들 수 있습니다.

00:05:59.000 --> 00:06:11.000
명령줄에서 변환기를 실행하고, 확장 프로그램의 리소스에 대한 경로를 제공하면, 네이티브 앱에서 확장 프로그램을 패키징하는 새로운 Xcode 프로젝트를 만들 수 있습니다.

00:06:11.000 --> 00:06:22.000
그리고 Xcode 13의 새로운 기능인 Safari Web Extension Converter는 기본적으로 iOS와 macOS 모두에서 Safari를 지원하는 프로젝트를 만듭니다.

00:06:22.000 --> 00:06:31.000
그리고 새로 생성된 프로젝트는 기본적으로 기존 확장 프로그램의 리소스를 복사하는 대신 원래 경로에서 참조합니다.

00:06:31.000 --> 00:06:43.000
마지막으로, macOS용 Safari 웹 확장을 구축하기 위해 과거에 이미 Xcode 프로젝트를 설정했다면, 변환기를 사용하여 해당 프로젝트를 업그레이드하여 iOS도 지원할 수 있습니다.

00:06:43.000 --> 00:06:51.000
변환기를 실행하고 Xcode 프로젝트의 경로와 함께 --rebuild-project 옵션을 제공할 수 있습니다.

00:06:51.000 --> 00:06:57.000
그런 다음 변환기는 iOS 호환 버전의 확장 프로그램과 포함된 앱을 프로젝트에 추가합니다.

00:06:57.000 --> 00:07:08.000
이제 저는 처음으로 Sea Creator를 iOS로 가져오는 단계를 추적하여 Safari Web Extension Converter를 보여주고 싶습니다.

00:07:08.000 --> 00:07:15.000
그래서 여기 제가 Mac에서 Safari용 Sea Creator를 개발하는 데 사용했던 Sea Creator Xcode 프로젝트가 있습니다.

00:07:15.000 --> 00:07:19.000
하지만 지금은 Mac만 지원하며, 저는 그것을 고치고 싶습니다.

00:07:19.000 --> 00:07:34.000
그래서 터미널을 열고 xcrun safari-web-extension-converter를 입력하고 --rebuild-project 옵션을 사용하고 Xcode 프로젝트의 경로를 제공하고 변환기를 실행할 것입니다.

00:07:34.000 --> 00:07:43.000
그리고 그것은 내 기존 프로젝트에 대한 몇 가지 세부 사항을 확인하고 크로스 플랫폼 버전으로 덮어쓰고 싶은지 묻기 위해 멈춘다.

00:07:43.000 --> 00:07:49.000
또한, 변환기를 실행할 때마다 확장 프로그램과의 잠재적인 호환성 문제에 대해 경고할 것입니다.

00:07:49.000 --> 00:07:57.000
이 경우, iOS에서 지원되지 않는 지속적인 배경 페이지라는 것의 사용에 대해 경고하고 있습니다.

00:07:57.000 --> 00:07:58.000
난 이걸 나중에 고쳐야 해.

00:07:58.000 --> 00:08:03.000
하지만 지금은, 나는 변환기가 계속 진행하도록 놔둘 것이다.

00:08:03.000 --> 00:08:08.000
그리고 그것이 완료되면, 내 프로젝트가 자동으로 열린다.

00:08:08.000 --> 00:08:15.000
여기에 내 앱과 확장 프로그램의 iOS 및 macOS 버전 모두에 대한 폴더가 있습니다.

00:08:15.000 --> 00:08:21.000
이제 공유 확장 그룹 내의 리소스 폴더를 살펴보고 싶습니다.

00:08:21.000 --> 00:08:25.000
여기서 Sea Creator Web Extension의 핵심 부분을 찾을 수 있습니다.

00:08:25.000 --> 00:08:33.000
웹 확장 API를 처음 접하는 분들을 위해, 나중에 언급할 것이기 때문에 이 조각들 중 일부가 무엇인지 설명하고 싶습니다.

00:08:33.000 --> 00:08:35.000
매니페스트부터 시작하겠습니다.

00:08:35.000 --> 00:08:39.000
이것은 확장자의 구조를 설명하는 JSON 파일이다.

00:08:39.000 --> 00:08:52.000
여기에는 확장 프로그램의 이름, 액세스하려는 웹사이트, 팝업 페이지 또는 Sea Creator와 같은 새 탭 페이지와 같은 지원 기능과 같은 중요한 정보가 포함되어 있습니다.

00:08:52.000 --> 00:08:56.000
다음으로, 배경 스크립트라고 불리는 자바스크립트 소스가 있습니다.

00:08:56.000 --> 00:09:07.000
브라우저는 확장 프로그램이 활성화되면 백그라운드에서 이 스크립트를 실행할 수 있으며, 확장 프로그램이 브라우저 또는 확장 프로그램의 다른 부분에서 오는 다양한 이벤트를 들을 수 있습니다.

00:09:07.000 --> 00:09:14.000
Sea Creator의 배경 스크립트는 웹 페이지에 얼마나 많은 이모티콘이 추가되었는지에 대한 카운터를 추적합니다.

00:09:14.000 --> 00:09:19.000
다음으로, 콘텐츠 스크립트라고 불리는 또 다른 유형의 스크립트가 있습니다.

00:09:19.000 --> 00:09:24.000
브라우저는 사용자가 방문하는 웹 페이지에서 이 스크립트를 자동으로 실행합니다.

00:09:24.000 --> 00:09:32.000
확장 프로그램은 원하는 수의 콘텐츠 스크립트를 가질 수 있으며, 매니페스트는 어떤 웹사이트에서 어떤 콘텐츠 스크립트를 실행해야 하는지 지정합니다.

00:09:32.000 --> 00:09:39.000
이 스크립트는 확장자에게 페이지를 직접 조작하여 확장하고 사용자 정의할 수 있는 기능을 제공합니다.

00:09:39.000 --> 00:09:46.000
예를 들어, 씨 크리에이터의 콘텐츠 페이지는 실제로 동물 이름을 이모티콘으로 대체하는 것이다.

00:09:46.000 --> 00:09:54.000
그리고 그렇게 한 후, 백그라운드 스크립트로 메시지를 보내 중앙 카운터를 업데이트할 수 있습니다.

00:09:54.000 --> 00:10:04.000
물론, 확장 프로그램에는 새 탭 페이지와 팝업 페이지를 위한 HTML, CSS 및 기타 자바스크립트 파일도 있습니다.

00:10:04.000 --> 00:10:15.000
그리고 마지막으로, 여기에 현지화된 문자열뿐만 아니라 확장 프로그램의 아이콘 및 기타 그래픽과 같은 다른 리소스가 있습니다.

00:10:15.000 --> 00:10:20.000
그래서 이 모든 조각들은 Sea Creator 웹 확장을 만들기 위해 함께 모인다.

00:10:20.000 --> 00:10:27.000
그리고 사파리 웹 확장 변환기 덕분에, 저는 이제 이 모든 것을 네이티브 앱으로 포장하는 프로젝트가 있습니다.

00:10:27.000 --> 00:10:34.000
그리고 나는 지금 내 프로젝트를 실행할 수 있으므로, 바로 사파리에서 Sea Creator를 사용할 수 있다.

00:10:34.000 --> 00:10:43.000
이제 화면 상단의 도구 모음으로 이동하여 iOS용 Sea Creator를 선택하고 앱을 실행할 목적지를 선택하여 그렇게 할 것입니다.

00:10:43.000 --> 00:10:51.000
나는 연결된 iOS 장치가 없기 때문에, 이 경우, 나는 아이폰 시뮬레이터를 사용할 것이다.

00:10:51.000 --> 00:10:54.000
그럼 내가 실행 버튼을 클릭할게.

00:10:54.000 --> 00:11:02.000
그리고 Xcode는 내 앱 프로젝트를 만들고, 시뮬레이터를 로드하고, 내 앱을 실행할 것이다.

00:11:02.000 --> 00:11:11.000
그래서 이것은 Web Extension Converter에서 생성된 Sea Creator 앱이며, Sea Creator Web Extension이 포함되어 있습니다.

00:11:11.000 --> 00:11:22.000
이 세션의 시작 부분에서, 저는 사파리 내에서 직접 확장 프로그램을 켤 수 있다는 것을 보여주었지만, 앱이 제안하는 것처럼 설정을 사용하여 확장 프로그램을 관리할 수도 있습니다.

00:11:22.000 --> 00:11:29.000
그리고 나는 여기서 그것을 자랑하고 싶어, 그래서 나는 설정으로 전환할 거야.

00:11:29.000 --> 00:11:36.000
나는 사파리, 익스텐션, 그리고 씨 크리에이터로 뛰어들 것이다.

00:11:36.000 --> 00:11:42.000
그리고 여기 확장에 대한 정보와 그것을 켤 수 있는 스위치가 있는 Sea Creator의 세부 정보 페이지가 있습니다.

00:11:42.000 --> 00:11:47.000
하지만 그 스위치는 회색으로 바뀌었고, 나는 아직 확장 프로그램을 켤 수 없다.

00:11:47.000 --> 00:11:50.000
이것은 로딩을 막는 확장에 문제가 있다는 것을 의미합니다.

00:11:50.000 --> 00:11:53.000
나는 확실히 다음에 이것을 살펴봐야 해.

00:11:53.000 --> 00:11:56.000
그리고 여기가 내가 디버깅에 대해 이야기하고 싶은 곳이다.

00:11:56.000 --> 00:12:07.000
프로젝트를 구축하고 확장 프로그램을 설치할 수 있는 것은 훌륭한 첫 번째 단계이지만, 물론, 일이 잘못되면 왜 잘못되는지 알아내기 위해 더 깊이 파고드는 방법을 아는 것이 중요합니다.

00:12:07.000 --> 00:12:17.000
웹 확장 프로그램의 오류를 식별하고 웹 인스펙터와 같은 도구를 사용하여 확장 프로그램의 일부를 디버깅하는 것은 쉽습니다. 그것이 제가 지금 보여드릴 것입니다.

00:12:17.000 --> 00:12:26.000
설정을 되돌아보면, 하단에 iOS의 확장 프로그램에는 비영구적인 배경 페이지가 있어야 한다는 오류가 있습니다.

00:12:26.000 --> 00:12:27.000
친숙하게 들리네.

00:12:27.000 --> 00:12:30.000
그것은 변환기가 이전에 나에게 경고했던 것과 같은 문제이다.

00:12:30.000 --> 00:12:33.000
그리고 이제 나는 실제로 그것을 고치고 싶어.

00:12:33.000 --> 00:12:47.000
그래서 나는 Xcode로 돌아가서 매니페스트를 열고, 백그라운드 섹션에 "persistent": false 키를 추가할 것이다.

00:12:47.000 --> 00:12:52.000
나는 나중에 이 변화에 대해 더 자세히 이야기할 것이지만, 현재로서는, 이것은 나를 오류를 극복하게 할 것이다.

00:12:52.000 --> 00:13:05.000
이제 이 변경을 했으니, 시뮬레이터에 업데이트된 확장 프로그램을 설치하기 위해 앱을 다시 실행할 것입니다.

00:13:05.000 --> 00:13:08.000
그리고 여기 다시 한 번 Sea Creator 앱이 있습니다.

00:13:08.000 --> 00:13:17.000
수정해야 할 오류가 하나밖에 없는 것 같았기 때문에, 이제 설정으로 돌아가는 대신 사파리로 바로 갈 것이다.

00:13:17.000 --> 00:13:28.000
사파리를 열고, 확장 목록을 열면, 씨 크리에이터가 있고, 지금 켤 수 있을 것 같습니다.

00:13:28.000 --> 00:13:32.000
사파리는 나에게 씨 크리에이터의 새로운 탭 경험을 사용할 수 있는 선택권을 제공한다.

00:13:32.000 --> 00:13:37.000
그리고 나는 전에 그것을 본 적이 없기 때문에 iPhone에서 어떻게 생겼는지 확인하고 싶다.

00:13:37.000 --> 00:13:46.000
그래서 나는 그것을 새 탭 페이지로 설정하고, 확장 목록을 닫고, 새 탭을 열 것이다.

00:13:46.000 --> 00:13:50.000
그리고 내가 예상했던 것처럼, Sea Creator의 새로운 탭 페이지가 있다.

00:13:50.000 --> 00:13:54.000
하지만 텍스트는 정말 작고, 페이지가 좋아 보이지 않습니다.

00:13:54.000 --> 00:14:03.000
iOS에서 이 확장 프로그램을 실행한 것은 이번이 처음이므로, 콘텐츠가 아직 iPhone에서 잘 작동하도록 조정되지 않은 것은 놀라운 일이 아닙니다.

00:14:03.000 --> 00:14:11.000
나는 지금 이것을 고치고 싶고, 그렇게 하기 위해, 나는 웹 인스펙터를 사용하여 이 페이지를 자세히 살펴보고 내가 염두에 두고 있는 몇 가지 변경 사항을 시도해 볼 것이다.

00:14:11.000 --> 00:14:31.000
그래서 웹 인스펙터로 가려면, Mac에서 사파리를 연 다음, 사파리의 고급 환경 설정에서 개발 메뉴가 활성화되어 있는지 다시 확인할 것입니다.

00:14:31.000 --> 00:14:41.000
그리고 이제 개발 메뉴가 생겼으니, 그것을 열고, 내가 사용하고 있는 아이폰 시뮬레이터를 선택하고, 검사할 페이지를 선택할 수 있습니다.

00:14:41.000 --> 00:14:44.000
이제, Sea Creator를 위한 두 가지 옵션이 있습니다.

00:14:44.000 --> 00:14:52.000
배경 스크립트를 디버깅하려면 확장 배경 페이지를 선택할 수 있지만, 이 경우 새 탭 페이지를 검사하고 싶습니다.

00:14:52.000 --> 00:14:56.000
그래서 나는 다른 옵션을 선택할 거야.

00:14:56.000 --> 00:14:58.000
그리고 지금 나는 웹 인스펙터에 있어.

00:14:58.000 --> 00:15:02.000
내가 여기서 가장 먼저 다루고 싶은 것은 페이지의 전체 크기이다.

00:15:02.000 --> 00:15:12.000
기본적으로, 아이폰의 사파리는 웹 페이지를 마치 데스크톱 브라우저의 크기인 것처럼 렌더링한 다음, 더 큰 콘텐츠를 축소하여 화면에 모두 맞도록 합니다.

00:15:12.000 --> 00:15:16.000
하지만 나는 텍스트를 너무 작게 만들기 때문에 이 행동을 원하지 않는다.

00:15:16.000 --> 00:15:21.000
그래서 나는 아이폰용 웹 디자인에 관해서 매우 일반적인 관행을 사용할 것이다.

00:15:21.000 --> 00:15:26.000
사파리에 이런 식으로 콘텐츠를 확장하지 말라고 말하기 위해 뷰포트 메타 태그를 추가할 것이다.

00:15:26.000 --> 00:15:36.000
헤드 요소를 선택하고, 자식 요소를 추가하고, 그 뷰포트 메타 태그의 내용을 추가할 것이다.

00:15:36.000 --> 00:15:43.000
나는 태그를 추가할 것이고, 그 변화에 대한 응답으로 시뮬레이터에서 페이지를 업데이트할 것이다.

00:15:43.000 --> 00:15:49.000
이제 모든 텍스트는 읽을 수 있는 크기이지만, 화면에 모두 맞지는 않으며, 이것이 나의 다음 문제이다.

00:15:49.000 --> 00:15:55.000
나는 그것이 왜 이렇게 배치되는지 이해하기 위해 이 페이지의 요소를 검사하고 싶다.

00:15:55.000 --> 00:16:02.000
나는 본문 태그를 볼 것이고, 여기에 페이지의 모든 내용을 포함하는 이 div가 있다는 것을 알아차렸다.

00:16:02.000 --> 00:16:11.000
초점을 맞추고 오른쪽에 있는 스타일시트 사이드바를 보면, 그 요소의 고정 너비가 850이라는 것을 알 수 있다.

00:16:11.000 --> 00:16:17.000
그것은 윈도우가 정말 넓을 수 있고 어느 시점에서 텍스트를 감싸기를 원하는 데스크톱에서 말이 될 것이다.

00:16:17.000 --> 00:16:22.000
하지만 전화기가 그렇게 넓지 않기 때문에 그것은 아이폰에서 작동하지 않는다.

00:16:22.000 --> 00:16:30.000
나는 그 규칙이 정확한 너비를 요구하기보다는 콘텐츠의 최대 너비를 설정한다면 여기서 더 합리적일 것이라고 생각한다.

00:16:30.000 --> 00:16:32.000
그리고 난 그냥 여기서 규칙을 편집할 수 있어.

00:16:32.000 --> 00:16:42.000
너비를 클릭하고 최대 너비로 변경하면 시뮬레이터의 페이지가 변경 사항을 반영하도록 업데이트됩니다.

00:16:42.000 --> 00:16:48.000
이제 콘텐츠의 너비는 iPhone에 훨씬 더 적합하며, 모든 텍스트는 화면에 맞습니다.

00:16:48.000 --> 00:16:54.000
지금은 훨씬 나아 보이지만, 제가 만든 이러한 변경 사항은 이 인스펙터 세션에 일시적일 뿐입니다.

00:16:54.000 --> 00:16:59.000
나는 실제로 이 변경 사항들을 내 프로젝트에 다시 저장해서 잃어버리지 않도록 하고 싶다.

00:16:59.000 --> 00:17:04.000
그리고 내가 스타일시트 인스펙터에서 작업하는 동안 스타일시트의 업데이트된 복사본을 저장하는 것은 정말 쉽다.

00:17:04.000 --> 00:17:11.000
업데이트된 규칙이 있는 스타일시트를 저장하기 위해 Command+S를 입력하기만 하면 됩니다.

00:17:11.000 --> 00:17:17.000
그리고 나는 내 프로젝트에서 new_tab_page.css를 덮어쓸 것이다.

00:17:17.000 --> 00:17:27.000
하지만 뷰포트 변경을 위해, 나는 그 태그를 정적 리소스가 아닌 라이브 웹 페이지에 추가했기 때문에, 원래 소스에 동일한 변경을 해야 할 것이다.

00:17:27.000 --> 00:17:46.000
나는 그 태그를 선택하고, 복사하고, Xcode로 돌아가서, 새 탭 페이지의 소스를 열고, 거기에 내용을 붙여넣을 것이다.

00:17:46.000 --> 00:17:54.000
그래서 다음에 내가 Sea Creator를 실행할 때, 업데이트된 페이지 소스와 스타일시트를 사용할 것이고, 다시 좋아 보일 것이다.

00:17:54.000 --> 00:18:07.000
그리고 그것은 웹 인스펙터를 사용하여 웹 확장 프로그램의 후드 아래를 보고, 무슨 일이 일어나고 있는지 정확히 이해하고, 확장 프로그램을 반복하는 동안 잠재적인 변화를 실험하는 몇 가지 예입니다.

00:18:07.000 --> 00:18:19.000
지금은 새 탭 페이지만 볼 것이지만, 나중에 개발에서 iOS에서 확장 프로그램의 다른 모든 부분을 테스트해야 하며, 이를 위해 동일한 도구와 기술을 사용할 것입니다.

00:18:19.000 --> 00:18:27.000
iOS에서 Safari의 확장 설정을 사용하여 웹 확장 구성의 오류를 볼 수 있습니다.

00:18:27.000 --> 00:18:36.000
특히, Sea Creator는 지속적인 배경 페이지를 사용하는 치명적인 오류가 있었지만, 여기에 확인해야 할 치명적이지 않은 경고가 있을 수도 있습니다.

00:18:36.000 --> 00:18:46.000
이러한 세부 사항은 Xcode의 앱 디버그 빌드 설정에만 표시되며 App Store 또는 TestFlight의 사본에는 나타나지 않습니다.

00:18:46.000 --> 00:18:54.000
웹 확장 프로그램을 변경할 때, 앱을 다시 실행하여 장치나 시뮬레이터에서 확장 프로그램을 업데이트하기만 하면 됩니다.

00:18:54.000 --> 00:19:01.000
그리고 물론, 웹 인스펙터를 사용하면 확장 프로그램의 웹 콘텐츠 문제를 조사할 수 있습니다.

00:19:01.000 --> 00:19:09.000
웹 인스펙터에 액세스하려면 Mac의 Safari의 고급 환경 설정에서 개발 메뉴를 활성화해야 한다는 것을 기억하십시오.

00:19:09.000 --> 00:19:22.000
데모에서 확장 프로그램에 iOS 시뮬레이터를 사용했지만, 실제 iOS 장치를 사용하고 싶다면 Safari의 고급 설정에서 해당 장치에서 웹 인스펙터 지원을 활성화해야 합니다.

00:19:22.000 --> 00:19:30.000
웹 인스펙터에 대해 더 자세히 알아보고 최신 기능에 대해 알아보려면, 웹 인스펙터 개선 사항을 확인하세요.

00:19:30.000 --> 00:19:46.000
이제 iOS용 Safari 웹 확장 프로그램을 만들고 몇 가지 기본 문제를 디버깅했으므로, iOS에서 Safari용 확장 프로그램을 구축할 때 주의해야 할 몇 가지 사항을 포함하여 명심해야 할 몇 가지 모범 사례를 살펴보고 싶습니다.

00:19:46.000 --> 00:19:54.000
나는 비영구적인 배경 페이지부터 시작하여 당신의 확장과 관련이 있을 수 있는 다섯 가지 주제에 초점을 맞출 것이다.

00:19:54.000 --> 00:20:00.000
배경 페이지는 브라우저가 확장 프로그램의 배경 스크립트를 실행하기 위해 로드하는 웹 페이지입니다.

00:20:00.000 --> 00:20:07.000
그리고 이 페이지를 사용하면 확장 프로그램이 브라우저나 확장 프로그램의 다른 부분에서 보낸 이벤트를 처리할 수 있습니다.

00:20:07.000 --> 00:20:10.000
하지만 이 페이지를 로드하는 것은 성능 비용이 든다.

00:20:10.000 --> 00:20:17.000
활성화된 모든 확장에 대해 탭을 하나 더 열고 실행하는 것처럼 메모리와 전원을 사용할 수 있습니다.

00:20:17.000 --> 00:20:22.000
이 모든 페이지를 항상 로드하는 것은 꽤 낭비일 수 있다.

00:20:22.000 --> 00:20:36.000
하지만 백그라운드 페이지를 비영구적으로 만들 수 있습니다. 즉, 브라우저는 확장 프로그램이 실제로 작업을 해야 할 때만 로드되며, 브라우저는 나중에 한동안 유휴 상태일 때 해당 페이지를 언로드할 수 있습니다.

00:20:36.000 --> 00:20:43.000
그렇게 하면, 성능 비용은 확장 프로그램이 유용한 일을 하는 동안에만 지불됩니다.

00:20:43.000 --> 00:20:53.000
이것은 시스템 메모리와 배터리 수명이 특히 프리미엄인 iOS에서 백그라운드 페이지가 비영구적이어야 하기 때문에 중요하다.

00:20:53.000 --> 00:21:01.000
Xcode의 웹 확장 템플릿은 이미 비영구적인 배경 페이지와 함께 제공되므로 iOS에서 실행할 준비가 되었습니다.

00:21:01.000 --> 00:21:11.000
하지만 Sea Creator처럼 영구적인 배경 페이지를 사용하는 기존 확장 프로그램이 있다면, 지속적이지 않게 변경해야 합니다.

00:21:11.000 --> 00:21:19.000
그리고 매니페스트의 배경 섹션에 "영구:" False 키를 추가하여 그렇게 할 수 있습니다.

00:21:19.000 --> 00:21:32.000
비영구적인 배경 페이지를 사용하도록 확장 프로그램을 업데이트할 때 직면할 수 있는 몇 가지 모범 사례와 잠재적인 문제에 대해 자세히 알아보려면, Explore Safari 웹 확장 개선 사항 살펴보기에서 확인하세요.

00:21:32.000 --> 00:21:37.000
다음으로, 반응형 디자인에 대해 이야기해 봅시다.

00:21:37.000 --> 00:21:47.000
Sea Creator와 함께 배웠듯이, iOS에 확장 프로그램을 도입하면 이전에 고려하지 않은 새로운 환경에서 웹 콘텐츠가 렌더링될 수 있음을 의미합니다.

00:21:47.000 --> 00:22:00.000
Sea Creator의 새 탭 페이지에서 했던 것처럼, iPhone과 iPad에서 확장 프로그램의 웹 콘텐츠 레이아웃을 테스트하고 다양한 화면 크기를 수용할 수 있는 반응형 디자인을 사용하세요.

00:22:00.000 --> 00:22:08.000
하지만 화면 크기의 차이가 iOS에서 웹 콘텐츠를 멋지게 보이게 할 때 유일한 고려 사항은 아닙니다.

00:22:08.000 --> 00:22:11.000
당신이 알아야 할 몇 가지 사항에 대해 말씀드리겠습니다.

00:22:11.000 --> 00:22:23.000
확장 프로그램에 화면 하단 근처에 중요한 요소를 배치하는 전체 페이지 웹 콘텐츠가 있는 경우, Safari의 탭 바 또는 장치의 홈 표시기로 덮여 있을 수 있습니다.

00:22:23.000 --> 00:22:37.000
CSS 용어에서, 콘텐츠가 부분적으로 숨겨질 수 있는 화면 가장자리 근처의 이 영역을 안전하지 않은 영역이라고 하며, 뷰포트의 사용 가능한 영역을 안전 영역이라고 합니다.

00:22:37.000 --> 00:22:47.000
CSS 환경 변수를 사용하면 안전 영역 삽입을 계산하여 중요한 요소가 안전 영역 내에 배치되도록 할 수 있습니다.

00:22:47.000 --> 00:22:58.000
iPhone에서, 이것은 또한 장치가 디스플레이의 왼쪽과 오른쪽에 안전 영역 삽입물이 있을 수 있는 풍경에서도 고려할 가치가 있다.

00:22:58.000 --> 00:23:13.000
유사한 CSS를 사용하고 뷰포트에서 뷰포트-핏 매개 변수를 지정함으로써, 웹 콘텐츠에 중요한 콘텐츠를 안전한 영역 내에 유지하는 에지 투 에지 디자인을 제공할 수 있습니다.

00:23:13.000 --> 00:23:21.000
iOS에서 웹 콘텐츠를 더 편안하게 만들 수 있는 이러한 API에 대해 자세히 알아보려면 Design for Safari 15를 확인하세요.

00:23:21.000 --> 00:23:31.000
iPad 및 데스크톱 브라우저에서, 확장 프로그램에 팝업 페이지가 있는 경우, 콘텐츠에 맞는 편안한 크기의 팝오버로 표시되는 데 익숙해질 수 있습니다.

00:23:31.000 --> 00:23:40.000
그러나 아이폰에서 사파리는 이 웹 페이지를 시트로 표시할 것이며, 이는 당신의 콘텐츠에 놀랄 수 있습니다.

00:23:40.000 --> 00:23:46.000
시트는 장치의 전체 너비에 걸쳐 있으며, 내용이 예상하는 것보다 더 높게 배치될 수 있다.

00:23:46.000 --> 00:24:00.000
Sea Creator의 초기 버전의 스크린샷에서, 콘텐츠는 화면 가장자리에서 많은 패딩이 없었고, 우리는 본문이 아닌 페이지의 개별 요소에 배경색을 설정했습니다.

00:24:00.000 --> 00:24:06.000
그래서 텍스트는 약간 비좁아 보이고 배경은 전체 페이지를 채우지 않는다.

00:24:06.000 --> 00:24:17.000
하지만 우리는 숨을 쉴 수 있는 공간을 조금 더 제공하기 위해 콘텐츠의 정렬과 패딩을 업데이트했으며, 이제 몸체에 배경색을 지정하여 전체 시트를 덮습니다.

00:24:17.000 --> 00:24:24.000
확장 프로그램에 팝업 페이지가 있다면, 확장 프로그램에 대해 비슷한 변경을 해야 하는지 생각해 보세요.

00:24:24.000 --> 00:24:30.000
그리고 사파리는 풍경에서도 비슷한 프레젠테이션을 사용할 것이라는 점에 유의하세요.

00:24:30.000 --> 00:24:37.000
이 추가 공간이 주어졌을 때 레이아웃이 의미가 있는지 확인하기 위해 이러한 구성에서 확장의 인터페이스를 테스트해야 합니다.

00:24:37.000 --> 00:24:43.000
그리고 마지막으로 디자인 고려 사항 중에서, 나는 동적 유형을 언급하고 싶다.

00:24:43.000 --> 00:24:50.000
동적 유형은 사용자가 텍스트 및 기타 시각적 요소의 크기를 조정할 수 있는 기능입니다.

00:24:50.000 --> 00:24:57.000
더 잘 보이도록 콘텐츠를 더 작게 만들 수 있습니다.

00:24:57.000 --> 00:25:07.000
확장 프로그램의 인터페이스를 더 작거나 큰 텍스트 크기로 테스트하여 사용자가 선택한 모든 크기에서 괜찮은지 확인하십시오.

00:25:07.000 --> 00:25:18.000
웹 콘텐츠가 동적 유형을 최대한 활용할 수 있도록, WebKit에는 사용자의 텍스트 크기 선호도를 존중하고 일치하도록 크기를 조정하는 다양한 시스템 글꼴이 있습니다.

00:25:18.000 --> 00:25:27.000
Safari의 나머지 인터페이스와 마찬가지로 텍스트를 사용자가 편안하게 읽을 수 있도록 확장 프로그램에 이러한 글꼴을 채택해야 합니다.

00:25:27.000 --> 00:25:35.000
그래서 여기서 주요 요점은 사파리의 UI를 염두에 두고 확장 프로그램의 웹 콘텐츠를 디자인하는 것입니다.

00:25:35.000 --> 00:25:47.000
iPhone에서 전체 페이지 웹 콘텐츠를 테스트하여 화면 크기에 잘 적응하고 화면 하단의 Safari의 UI와 충돌하지 않는지 확인하십시오.

00:25:47.000 --> 00:26:02.000
레이아웃이 시트 스타일 프레젠테이션에 맞는지 확인하기 위해 iPhone에서 팝업 웹 페이지를 테스트해야 하며, 사용자의 선호도에 맞게 조정되도록 다양한 동적 유형 크기에서 인터페이스를 테스트해야 합니다.

00:26:02.000 --> 00:26:11.000
Safari의 새로운 인터페이스에서 멋지게 보이도록 웹 콘텐츠를 디자인하는 방법에 대한 더 많은 팁은 Design for Safari 15를 확인하세요.

00:26:11.000 --> 00:26:14.000
다음으로, 포인터 이벤트.

00:26:14.000 --> 00:26:26.000
확장 프로그램이 현재 임의의 클릭과 드래그에 대한 마우스 이벤트를 처리하는 데 의존하는 경우, 사용자가 iOS를 탭할 때 동일한 이벤트가 전송되지 않는다는 점에 유의하십시오.

00:26:26.000 --> 00:26:30.000
대신 포인터 이벤트 API를 채택해야 합니다.

00:26:30.000 --> 00:26:42.000
마우스 이벤트 API와 유사하며, 마우스 입력과 동일하게 작동하지만, 포인터 이벤트 API는 터치와 Apple Pencil 입력도 보고합니다.

00:26:42.000 --> 00:26:47.000
그리고 이제 웹 확장 윈도우 API에 대해 이야기해 봅시다.

00:26:47.000 --> 00:26:57.000
데스크톱 브라우저에서 사용자는 여러 개의 창을 열 수 있으며 웹 확장 프로그램은 browser.windows API를 사용하여 이러한 창으로 작업할 수 있습니다.

00:26:57.000 --> 00:27:03.000
그리고 Safari의 여러 창을 열 수 있는 iPad에서도 마찬가지입니다.

00:27:03.000 --> 00:27:12.000
각 사파리 창은 전체 화면일 수도 있고, 다른 앱, 다른 사파리와 나란히 분할 보기에 있을 수도 있습니다.

00:27:12.000 --> 00:27:18.000
하지만 후드 아래에서, 이 윈도우들 각각은 실제로 iOS에서 장면이라고 불린다.

00:27:18.000 --> 00:27:29.000
확장 프로그램이 Windows API를 사용하는 경우, Safari의 각 장면에는 실제로 두 개의 창이 있다는 것을 알아야 합니다: 하나는 일반 브라우징용이고 다른 하나는 개인 브라우징용입니다.

00:27:29.000 --> 00:27:35.000
사파리의 장면이 하나밖에 없지만, 이것은 아이폰에서도 사실이다.

00:27:35.000 --> 00:27:45.000
browser.windows.getAll API를 호출하여 어떤 창이 열려 있는지 쿼리하면, API는 이 두 창 객체를 반환합니다.

00:27:45.000 --> 00:27:51.000
첫 번째 창에서, 시크릿 속성은 거짓이고, 초점은 사실이다.

00:27:51.000 --> 00:27:58.000
이것은 개인 브라우징이 아닌 일반 브라우징에 있는 내가 보고 있는 창을 나타낸다.

00:27:58.000 --> 00:28:03.000
두 번째 창에는 사파리 장면의 개인 브라우징 탭이 있습니다.

00:28:03.000 --> 00:28:06.000
그리고 물론, 그것의 속성은 첫 번째 창과 다르다.

00:28:06.000 --> 00:28:10.000
시크릿은 사실이고, 집중은 거짓이다.

00:28:10.000 --> 00:28:20.000
이제 Safari를 개인 브라우징으로 전환하고 windows.getAll을 다시 호출하면 API는 다른 창 개체를 반환합니다.

00:28:20.000 --> 00:28:29.000
이제 집중된 속성은 두 창 모두에서 바뀌었고, 두 번째 창은 이제 초점을 맞췄다.

00:28:29.000 --> 00:28:36.000
이것은 하나의 사파리 장면이 두 개의 창으로 표시되는 iPad에서 정확히 동일하게 작동합니다.

00:28:36.000 --> 00:28:42.000
하지만 분할 보기에서 사파리의 두 번째 장면을 열면, API는 이제 네 개의 창을 보고할 것이다.

00:28:42.000 --> 00:28:55.000
그리고 내 확장 프로그램이 windows.onCreated 이벤트를 듣는다면, 분할 보기를 열 때, 새로운 사파리 장면에서 두 개의 새 창 각각에 대해 두 번씩 이벤트가 발생하는 것을 관찰할 것이다.

00:28:55.000 --> 00:29:02.000
따라서 이 API를 사용하는 경우, 처음에는 예상하지 못할 수도 있는 추가 창이 발생할 때 이 모델을 염두에 두세요.

00:29:02.000 --> 00:29:11.000
창이 실제로 무엇인지에 대한 이 모델 외에도, 확장에 영향을 미칠 수 있는 윈도우 API의 몇 가지 제한 사항이 있습니다.

00:29:11.000 --> 00:29:18.000
창의 상태를 생성, 제거 및 업데이트하는 방법은 사용할 수 없습니다.

00:29:18.000 --> 00:29:26.000
iOS에서 창 배치는 앱이나 확장 프로그램이 아닌 사용자에 의해 완전히 제어됩니다.

00:29:26.000 --> 00:29:34.000
windows.onRemoved 이벤트는 사용자가 앱 스위처에서 Safari를 닫을 때 예상할 수 있는 것처럼 실행되지 않습니다.

00:29:34.000 --> 00:29:37.000
그것은 정말로 창문을 닫거나 제거하지 않는다.

00:29:37.000 --> 00:29:42.000
그것은 사용자가 나중에 중단한 곳에서 다시 선택할 수 있도록 남겨둔다.

00:29:42.000 --> 00:29:49.000
그리고 이러한 제한은 해당 창 내의 탭이 아닌 창 자체에만 적용된다는 점에 유의하십시오.

00:29:49.000 --> 00:29:59.000
Browser.tabs API를 사용하면 웹 확장 프로그램은 여전히 원하는 대로 개별 탭을 추가, 제거 및 업데이트할 수 있습니다.

00:29:59.000 --> 00:30:04.000
이제, 마지막 모범 사례는 기능 감지입니다.

00:30:04.000 --> 00:30:14.000
기존 확장 프로그램을 iOS로 가져올 때, 제가 조금 전에 언급한 윈도우 API와 같은 일부 API를 사용할 수 없다는 것을 알 수 있습니다.

00:30:14.000 --> 00:30:21.000
하지만 컨텍스트 메뉴와 WebRequest와 같은 몇 가지 다른 것들이 있습니다.

00:30:21.000 --> 00:30:29.000
확장 프로그램의 필수적이지 않은 부분이 그러한 API를 사용하는 경우, 사용할 수 없는 경우를 처리하기 위해 기능 감지를 사용해야 합니다.

00:30:29.000 --> 00:30:46.000
따라서, 이러한 API를 무조건 호출하는 대신, 해당 API의 존재에 따라 해당 코드를 조건화하여 확장 프로그램의 일부를 깔끔하게 배제하고 지원하는 브라우저와 관련하여 더 유연하게 만들 수 있습니다.

00:30:46.000 --> 00:31:01.000
또한 미래에 추가되는 새로운 API를 채택할 때 이 패턴을 사용해야 합니다. 모든 브라우저 또는 일부 사용자가 여전히 사용할 수 있는 이전 버전의 브라우저에서 즉시 사용할 수 없을 수도 있기 때문입니다.

00:31:01.000 --> 00:31:04.000
그리고 그것은 모범 사례를 마무리한다.

00:31:04.000 --> 00:31:13.000
나는 이제 사파리 웹 확장의 많은 부분을 다루었지만, 틀림없이 마지막으로 가장 중요한 주제를 저장했고, 그것은 사용자 개인 정보 보호이다.

00:31:13.000 --> 00:31:23.000
사용자 개인 정보 보호는 우리가 하는 모든 일의 큰 부분이므로, 우리는 사용자가 개인 데이터를 처리하는 방법과 관련하여 투명성과 통제력을 가질 자격이 있다고 믿습니다.

00:31:23.000 --> 00:31:26.000
그리고 물론 그것은 그들이 사파리에서 하는 모든 것을 포함한다.

00:31:26.000 --> 00:31:37.000
웹 확장은 사용자의 브라우징에 엄청난 양의 액세스를 얻을 수 있으므로, 그것이 허용되어야 하는지 여부와 어떤 웹사이트가 사용자에게 달려 있어야 하는지에 대한 결정.

00:31:37.000 --> 00:31:52.000
역사적으로, 다른 브라우저는 당신이 그것을 켤 때 즉시 요청하는 모든 웹사이트에 대한 확장 전체 액세스를 제공할 것이며, 이는 잠재적으로 확장을 맛보기 위해 사전에 개인 정보를 희생하도록 요구하고 있습니다.

00:31:52.000 --> 00:32:05.000
그러나 사파리는 사용자가 동의할 때만 웹사이트에 액세스할 수 있는 옵트인 모델로 웹 확장 사용자에게 투명성과 제어를 제공함으로써 더 나은 것을 목표로 한다.

00:32:05.000 --> 00:32:07.000
당신은 이전에 Sea Creator와 함께 이것을 엿볼 수 있었습니다.

00:32:07.000 --> 00:32:22.000
내가 그것을 켰을 때 내 페이지를 즉시 수정하기 시작하지는 않았지만, 내가 사파리에 "네, 여기서 이 확장 프로그램을 사용하고 싶고, 접근해도 괜찮습니다."라고 명시적으로 말했을 때만 그렇게 할 수 있었습니다.

00:32:22.000 --> 00:32:34.000
그리고 일단 확장 프로그램에 액세스하면, 사파리는 탭 바에서 이 페이지에서 실행 중인 확장 프로그램이 있다고 알려주므로, 확장 프로그램이 여기에서 내 웹 브라우징을 볼 수 있다는 것을 알고 있습니다.

00:32:34.000 --> 00:32:42.000
하지만 아직 확장에 대한 접근을 허용하지 않은 웹사이트로 이동하면, 그 표시기는 사라집니다.

00:32:42.000 --> 00:32:48.000
그리고 나는 그 확장 프로그램이 이 페이지에서 실행되지 않고 내가 여기서 무엇을 하고 있는지 볼 수 없다는 것을 알고 있다.

00:32:48.000 --> 00:32:51.000
이 권한 모델을 더 자세히 살펴봅시다.

00:32:51.000 --> 00:32:58.000
다시 말하지만, 사용자는 특정 웹사이트에서 사용하기로 선택할 때 확장 프로그램을 선택합니다.

00:32:58.000 --> 00:33:07.000
사파리는 확장 프로그램이 어떤 웹사이트에 접근하려고 하는지 명확하게 하는 대화상자를 제시하여 사용자에게 동의를 요청할 것이다.

00:33:07.000 --> 00:33:15.000
이것은 사용자가 작업 메뉴에서 선택하거나 키보드 단축키를 사용하여 확장 프로그램을 호출할 때 발생합니다.

00:33:15.000 --> 00:33:21.000
그리고 이 동의는 개인 정보 보호에 민감한 API가 작동하려면 필요합니다.

00:33:21.000 --> 00:33:32.000
특히, 탭의 URL이나 제목을 공개하는 API는 확장 프로그램에 해당 URL에 대한 권한이 있는 경우에만 이 정보가 포함됩니다.

00:33:32.000 --> 00:33:39.000
쿠키 API는 확장 프로그램이 권한이 있는 웹사이트의 쿠키만 읽고 쓸 수 있도록 합니다.

00:33:39.000 --> 00:33:49.000
그리고 자바스크립트와 스타일시트를 삽입하는 것은 확장 프로그램에 권한이 있는 웹사이트에서만 허용됩니다.

00:33:49.000 --> 00:34:04.000
확장 프로그램에 필요한 권한이 없지만 아직 사용자에게 요청하지 않았을 때 확장 프로그램의 스크립트가 이러한 API를 호출하는 경우, Safari는 완료 핸들러를 호출하기 위해 대기하고 화면 상단에 무중단 배너를 표시합니다.

00:34:04.000 --> 00:34:19.000
이를 통해 사용자는 확장 프로그램이 더 많은 액세스를 원한다는 것을 알 수 있으며, 확장 프로그램이 요구하는 웹사이트 세트를 검토할 수 있으며, 해당 웹사이트에 대한 액세스를 허용하거나 거부하기로 결정할 수 있습니다.

00:34:19.000 --> 00:34:24.000
확장 프로그램이 실제로 필요로 하는 것보다 더 많은 허가를 요청하는 것을 피해야 합니다.

00:34:24.000 --> 00:34:30.000
일부 유형의 확장의 경우, 허가에 대한 이러한 사고 방식은 필요한 것보다 조금 더 많을 수 있습니다.

00:34:30.000 --> 00:34:45.000
예를 들어, 개별 웹 페이지를 공유하거나 주석을 달는 확장 프로그램은 사용자가 모든 탭에서 방문할 때마다 사이트에 대한 전체 액세스가 필요하지 않으며, 오히려 사용자를 위해 한 번에 한 가지 일을 할 수 있는 권한을 원합니다.

00:34:45.000 --> 00:34:51.000
그리고 activeTab 권한이라고 불리는 확장에 대한 훌륭한 해결책이 있습니다.

00:34:51.000 --> 00:35:02.000
확장 프로그램이 activeTab 권한을 요청하면, Safari는 사용자가 확장 프로그램을 명시적으로 사용하는 탭에서 자동으로 확장 권한을 부여합니다.

00:35:02.000 --> 00:35:08.000
그리고 이 권한은 현재 탭의 현재 웹사이트로 제한됩니다.

00:35:08.000 --> 00:35:14.000
따라서 사용자가 그 탭을 다른 웹사이트로 이동하면 취소됩니다.

00:35:14.000 --> 00:35:22.000
사파리는 사용자로부터 장기적인 약속이 필요하지 않기 때문에 이 권한을 부여할 때 프롬프트를 표시하지 않습니다.

00:35:22.000 --> 00:35:29.000
이 기능을 채택하려면, 매니페스트의 권한 섹션에 activeTab을 추가하기만 하면 됩니다.

00:35:29.000 --> 00:35:38.000
그래서 이 모든 것은 사파리에서 사용자가 확장 프로그램이 작동할 수 있는 웹사이트를 항상 통제할 수 있다는 것을 말하는 것이다.

00:35:38.000 --> 00:35:45.000
따라서 확장 프로그램이 사용자가 방문하는 모든 페이지에서 자동으로 작동할 수 없다는 점에 유의하십시오.

00:35:45.000 --> 00:35:57.000
많은 확장 프로그램의 경우, activeTab 권한은 사용자가 확장 프로그램을 사용하는 페이지에만 액세스할 수 있는 좋은 방법입니다.

00:35:57.000 --> 00:36:04.000
이러한 모든 개념은 사파리 웹 확장을 지원하는 모든 플랫폼에서 동일합니다.

00:36:04.000 --> 00:36:16.000
macOS에서 이것을 보고 activeTab을 사용하기 위해 확장 프로그램을 업데이트하는 것을 자세히 살펴보려면, WWDC 2020의 Meet Safari 웹 확장 프로그램을 확인하세요.

00:36:16.000 --> 00:36:21.000
그리고 그것은 사파리 웹 확장의 개인 정보 보호 권한 모델입니다.

00:36:21.000 --> 00:36:32.000
오늘 제가 다룬 다른 모든 것과 함께, 이것이 iOS의 사파리 웹 확장과 이를 구축하는 데 사용할 수 있는 도구에 대한 보다 완전한 시각을 제공하기를 바랍니다.

00:36:32.000 --> 00:36:45.000
우리는 오늘날 Mac에서 이미 좋아하는 많은 확장 프로그램뿐만 아니라 아직 출시되지 않은 훌륭한 새로운 확장 프로그램을 포함하여 iOS 15에서 Safari에 도입될 웹 확장 경험을 보게 되어 매우 기쁩니다.

00:36:45.000 --> 00:36:53.000
따라서 확장 개발을 처음 접한다면, 이 세션과 관련된 연결된 리소스를 확인하는 것이 좋습니다.

00:36:53.000 --> 00:36:58.000
거기서, 당신은 다운로드하고 직접 시험해 볼 수 있는 샘플 코드를 찾을 수 있습니다.

00:36:58.000 --> 00:37:06.000
그리고 Apple의 개발자 문서와 MDN 웹 문서에서 사용할 수 있는 웹 확장 API에 대해 자세히 읽을 수 있습니다.

00:37:06.000 --> 00:37:21.000
이미 다른 브라우저 또는 Mac의 Safari용 웹 확장 프로그램을 개발했다면, Xcode 13의 Safari Web Extension Converter를 사용하여 확장 프로그램을 iOS로 쉽게 가져오는 것이 좋습니다.

00:37:21.000 --> 00:37:32.000
버그 보고서, 제안 또는 호환성 문제와 같은 피드백이 있다면, feedbackassistant.apple.com에서 피드백을 보내주시기 바랍니다.

00:37:32.000 --> 00:37:38.000
연락하거나 질문이 있는 경우 Apple Developer Forums에서 저희에게 연락할 수도 있습니다.

00:37:38.000 --> 00:37:44.000
그리고 마지막으로, 저는 당신이 관심이 있을 수 있는 두 개의 다른 세션을 다시 추천하고 싶습니다.

00:37:44.000 --> 00:37:51.000
사파리 웹 확장 개선 사항을 살펴보면 사파리 웹 확장에 최근 추가된 API에 대해 배울 수 있습니다.

00:37:51.000 --> 00:38:00.000
그리고 Safari 15용 디자인은 iOS 15에서 Safari의 새로운 디자인으로 웹 콘텐츠를 멋지게 보이게 하는 방법을 보여줄 것입니다.

00:38:00.000 --> 00:38:04.000
봐줘서 고마워, 그리고 멋진 WWDC 보내.

00:38:04.000 --> 23:59:59.000
[쾌활한 음악].

