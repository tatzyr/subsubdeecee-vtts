WEBVTT

00:00:00.000 --> 00:00:11.000
Mac Catalyst의 새로운 기능에 오신 것을 환영합니다.

00:00:11.000 --> 00:00:16.000
제 이름은 제이슨 비버이고, 나중에 제 동료 닉 테이슬러와 합류할 것입니다.

00:00:16.000 --> 00:00:29.000
Mac Catalyst는 기존 iOS 애플리케이션을 macOS로 가져와 Mac의 더 큰 디스플레이, 통합 키보드, 마우스 또는 트랙패드를 최대한 활용할 수 있는 기술입니다.

00:00:29.000 --> 00:00:36.000
수천 명의 개발자들이 Mac Catalyst를 사용하여 iOS 애플리케이션을 macOS로 가져왔고, 그 결과는 믿을 수 없었다.

00:00:36.000 --> 00:00:42.000
최근 Apple 수상 경력에 빛나는 Mac Catalyst 앱 몇 가지에 대해 말씀드리겠습니다.

00:00:42.000 --> 00:00:48.000
Shapr3D는 Mac과 iPad 모두에서 지원되는 산업용 CAD 도구입니다.

00:00:48.000 --> 00:01:01.000
iPad 버전은 멀티 터치 및 연필 경험으로 설계되었지만, Mac Catalyst로 제작된 새로운 Mac 버전은 데스크톱 사용자가 기대하는 것처럼 마우스와 키보드 지원을 활용합니다.

00:01:01.000 --> 00:01:10.000
Instapaper는 오프라인에서 기사를 읽는 데 매우 인기 있는 앱이며, Mac Catalyst 때문에 Mac에서 데뷔했습니다.

00:01:10.000 --> 00:01:14.000
Notability는 뛰어난 노트 필기 앱이다.

00:01:14.000 --> 00:01:26.000
기존 Mac 버전을 대체하는 새로운 버전의 앱은 사용자에게 iPad의 모든 멋진 기능을 제공하지만, Mac의 화면 크기, 키보드 및 더 빠른 속도를 활용하도록 최적화되어 있습니다.

00:01:26.000 --> 00:01:29.000
그것은 심지어 애플 펜슬로 사이드카를 지원한다.

00:01:29.000 --> 00:01:37.000
우리는 새로운 API에 대한 개요로 시작한 다음, macOS Monterey에서 향상된 API를 다룰 것입니다.

00:01:37.000 --> 00:01:42.000
마지막으로, 우리는 닉이 데모 앱에서 그것들을 채택할 때 이 새로운 API를 실제로 보여줄 것이다.

00:01:42.000 --> 00:01:47.000
macOS Monterey의 새로운 API에 대한 개요부터 시작합시다.

00:01:47.000 --> 00:01:55.000
이전에 macOS Big Sur에서 showsMenuAsPrimaryAction 속성이 있는 버튼에 메뉴를 첨부하는 지원을 추가했습니다.

00:01:55.000 --> 00:01:58.000
이를 통해 풀다운 메뉴를 만들 수 있습니다.

00:01:58.000 --> 00:02:10.000
이제 macOS Monterey에서 버튼의 제목이 메뉴에서 선택을 추적하도록 하는 changesSelectionAsPrimaryAction이라는 새로운 속성과 함께 팝업 버튼에 대한 지원을 추가했습니다.

00:02:10.000 --> 00:02:16.000
이 두 속성으로, 이제 버튼을 구성할 수 있는 네 가지 방법이 있습니다.

00:02:16.000 --> 00:02:20.000
두 속성 모두 false로 설정하면, 우리는 표준 푸시 버튼을 얻는다.

00:02:20.000 --> 00:02:25.000
버튼을 길게 클릭할 때 메뉴가 설정되어 있으면 여전히 메뉴를 표시할 수 있습니다.

00:02:25.000 --> 00:02:29.000
그 버튼을 만드는 코드는 아래와 같습니다.

00:02:29.000 --> 00:02:37.000
changesSelectionAsPrimaryAction만 true로 설정된 경우, 클릭하여 켜고 끌 수 있는 토글 버튼이 나타납니다.

00:02:37.000 --> 00:02:42.000
이것은 당신의 지원서의 상태를 나타내는 데 사용될 수 있습니다.

00:02:42.000 --> 00:02:48.000
showsMenuAsPrimaryAction만 true로 설정하면, 풀다운 메뉴를 얻을 수 있습니다.

00:02:48.000 --> 00:02:53.000
그리고 두 속성이 모두 true로 설정되면, 새로운 팝업 버튼을 받게 됩니다.

00:02:53.000 --> 00:03:03.000
이제, 메뉴를 기본 동작으로 표시하도록 구성된 버튼의 경우, 버튼은 macOS에서 왼쪽 클릭인 기본 상호 작용과 함께 메뉴를 즉시 표시합니다.

00:03:03.000 --> 00:03:10.000
그러나, 메뉴를 기본 동작으로 표시하도록 구성되지 않은 버튼의 경우, 동작은 앱의 관용구에 따라 다릅니다.

00:03:10.000 --> 00:03:17.000
iPad 관용구에서 메뉴는 macOS에서 오른쪽 클릭인 보조 상호 작용으로 트리거됩니다.

00:03:17.000 --> 00:03:24.000
하지만 응용 프로그램이 맥 관용구를 채택한다면, 메뉴는 버튼을 길게 누르면 트리거됩니다.

00:03:24.000 --> 00:03:29.000
"UIKit 버튼 시스템 만나기" 비디오에서 버튼의 새로운 기능에 대해 자세히 알아볼 수 있습니다.

00:03:29.000 --> 00:03:33.000
우리는 이제 Mac Catalyst 앱에서 ToolTips를 사용할 수 있도록 만들었습니다.

00:03:33.000 --> 00:03:39.000
툴팁은 커서가 애플리케이션의 보기 위에 마우스를 올려놓을 때 나타나는 작은 플로팅 창입니다.

00:03:39.000 --> 00:03:44.000
그리고 그것은 당신의 콘텐츠에 대한 맥락이나 추가 세부 사항을 제공하는 데 사용될 수 있습니다.

00:03:44.000 --> 00:03:49.000
UIView에 툴팁을 추가하려면, UIToolTipInteraction을 사용하세요.

00:03:49.000 --> 00:03:57.000
텍스트 문자열로 UIToolTipInteraction을 만든 다음, 그 상호 작용을 보기에 추가하기만 하면 됩니다.

00:03:57.000 --> 00:04:03.000
그러나 툴팁의 일반적인 사용 중 하나는 UI에서 컨트롤의 동작을 명확히 하는 것입니다.

00:04:03.000 --> 00:04:10.000
이것은 툴팁을 빠르게 설정할 수 있도록 UIControl에 편의 속성을 추가한 일반적인 패턴입니다.

00:04:10.000 --> 00:04:15.000
라벨은 iOS 앱 전체에서 편집할 수 없는 문자열을 표시하는 데 사용됩니다.

00:04:15.000 --> 00:04:21.000
라벨의 내용이 너무 길어서 맞지 않을 때, 라벨은 텍스트를 잘라야 한다.

00:04:21.000 --> 00:04:28.000
이제 macOS Monterey에서 라벨의 전체 내용을 사용할 수 있도록 확장 툴팁에 대한 지원을 추가했습니다.

00:04:28.000 --> 00:04:33.000
이 샘플 UI에서, 제목 라벨의 내용은 너무 길어서 맞을 수 없다.

00:04:33.000 --> 00:04:40.000
확장 툴팁을 활성화하면, 라벨 위에 마우스를 올려놓으면 전체 제목이 표시됩니다.

00:04:40.000 --> 00:04:47.000
UILabel의 showsExpansionTextWhenTruncated라는 새로운 속성으로 이것을 활성화할 수 있습니다.

00:04:47.000 --> 00:04:55.000
Info.plist에 추가할 수 있는 UIApplicationSupports PrintCommand라는 새로운 info.plist 키를 도입했습니다.

00:04:55.000 --> 00:05:02.000
True로 설정하면, 출시 시 Mac Catalyst 애플리케이션에 "인쇄" 및 "PDF로 내보내기" 메뉴 항목을 자동으로 추가합니다.

00:05:02.000 --> 00:05:18.000
이 plist 키는 iOS 애플리케이션에 추가할 수 있으며 iPadOS 단축키 오버레이에 "인쇄" 옵션만 표시되며 iOS 애플리케이션이 M1 Mac에서 실행될 때 "인쇄" 및 "PDF로 내보내기" 메뉴 항목도 표시됩니다.

00:05:18.000 --> 00:05:26.000
이 plist 키는 운영 체제에 "인쇄" 및 "PDF로 내보내기" 메뉴 항목을 원한다고 말하지만, 이야기의 절반에 불과합니다.

00:05:26.000 --> 00:05:30.000
당신은 여전히 코드에서 인쇄 지원을 명시적으로 구현해야 합니다.

00:05:30.000 --> 00:05:35.000
그렇게 하기 위해, printContent라고 불리는 새로운 UIResponder 작업이 있다.

00:05:35.000 --> 00:05:43.000
모든 UIResponder에서 이를 구현할 수 있으며, 응답자 체인 검색은 적절한 인쇄 대상을 찾는 데 사용됩니다.

00:05:43.000 --> 00:05:51.000
printContent의 구현이 호출되면, 평소처럼 UIPrintInteractionController를 설정하고 사용하세요.

00:05:51.000 --> 00:05:54.000
우리는 이제 당신의 창에 자막을 추가하는 것을 지원합니다.

00:05:54.000 --> 00:06:00.000
이것은 당신의 지원 상태에 대한 보조 정보를 제공하는 데 사용될 수 있습니다.

00:06:00.000 --> 00:06:06.000
이것은 자막이라고 불리는 UIScene의 새로운 속성으로 설정할 수 있습니다.

00:06:06.000 --> 00:06:10.000
macOS Monterey에서, 단축키 응용 프로그램은 이제 Mac에서 사용할 수 있습니다.

00:06:10.000 --> 00:06:18.000
애플리케이션이 iOS에서 사용자 지정 의도를 채택하는 경우, 이제 Mac에서 Siri 및 단축키와 함께 사용할 수 있습니다.

00:06:18.000 --> 00:06:22.000
인앱 인텐트 처리와 인텐트 확장을 모두 사용할 수 있습니다.

00:06:22.000 --> 00:06:28.000
따라서, 이전에 Mac Catalyst 앱에서 인텐트 확장 프로그램 구축을 비활성화했다면, 이제 다시 활성화할 수 있습니다.

00:06:28.000 --> 00:06:32.000
"macOS용 바로 가기 만나기" 비디오에서 더 많은 것을 찾을 수 있습니다.

00:06:32.000 --> 00:06:37.000
그것은 macOS Monterey의 새로운 API에 대한 개요를 마무리합니다.

00:06:37.000 --> 00:06:42.000
macOS Monterey에서 개선한 API에 대한 개요로 넘어갑시다.

00:06:42.000 --> 00:06:57.000
앱의 테마에 맞게 작성한 사용자 지정 버튼이나 슬라이더가 있는 경우, 기본 컨트롤을 선택 해제하여 Mac 관용구를 채택할 때 Mac Catalyst에 보관할 수 있지만, 77%로 축소해야 합니다.

00:06:57.000 --> 00:07:03.000
이제, 우리는 이 앱 전체를 하는 것을 권장하지 않지만, 앱 경험의 핵심인 특정 컨트롤에 대해서만 권장하지 않습니다.

00:07:03.000 --> 00:07:09.000
새로운 버튼 시스템은 또한 더 크로스 플랫폼 방식으로 앱의 테마에 맞는 버튼을 만드는 데 사용할 수 있습니다.

00:07:09.000 --> 00:07:14.000
그리고 "UIKit 버튼 시스템 만나기" 비디오에서 이것에 대해 더 자세히 알아볼 수 있습니다.

00:07:14.000 --> 00:07:18.000
UIBehavioralStyle은 이것을 가능하게 하는 새로운 열거형이다.

00:07:18.000 --> 00:07:29.000
UIButton과 UISlider에는 각각 두 개의 새로운 속성이 있습니다: preferredBehavioralStyle은 readwrite이고, behavioralStyle은 이 속성에 대한 읽기 전용 해결된 값입니다.

00:07:29.000 --> 00:07:42.000
iOS에서 behavioralStyle의 해결된 값은 변경되지 않으므로, iOS 앱에 영향을 미치지 않고 Mac Catalyst 케이스를 처리하기 위해 이 코드 줄을 .pad 또는 ,mac으로 명시적으로 설정하는 것은 쉽습니다.

00:07:42.000 --> 00:07:51.000
문서 기반 앱의 경우, 창 탭을 선택 해제하기 위해 UIApplicationSupports TabbedSceneCollection이라는 새로운 plist 속성이 있습니다.

00:07:51.000 --> 00:07:59.000
False로 설정하면, 창 탭이 비활성화되고, 기본 탭 관련 메뉴 항목은 추가되지 않습니다.

00:07:59.000 --> 00:08:05.000
우리는 이제 커서를 숨기고 Mac 창 밖으로 이동하지 않도록 잠그는 UIPointerLockState를 지원합니다.

00:08:05.000 --> 00:08:12.000
이것은 게임에 정말 유용하므로, 사용자가 실수로 게임 외부를 클릭하고 다른 응용 프로그램을 전면에 가져오지 않습니다.

00:08:12.000 --> 00:08:19.000
앱이나 창을 전환할 때 일시적으로 창을 잠금 해제하고, 창을 클릭하면 다시 잠글 수 있습니다.

00:08:19.000 --> 00:08:26.000
우리는 또한 수평 또는 수직 축에서 iBeam 커서를 얻는 데 사용할 수 있는 UIPointerShape를 지원합니다.

00:08:26.000 --> 00:08:33.000
macOS에서 이 API를 사용하면, 표준 NSCursor 모양 중 하나를 얻을 수 있습니다.

00:08:33.000 --> 00:08:39.000
마지막으로, 앱에서 필요할 때 커서를 숨길 수 있도록 숨겨진 포인터 스타일을 지원합니다.

00:08:39.000 --> 00:08:43.000
우리는 많은 새롭고 향상된 UIKit API를 검토했습니다.

00:08:43.000 --> 00:08:52.000
이제, 저는 그것을 닉에게 넘겨서 Mac Catalyst 앱을 Mac에서 훨씬 더 편안하게 느낄 수 있도록 이 새롭고 향상된 API를 어떻게 사용할지 안내할 것입니다.

00:08:52.000 --> 00:08:54.000
고마워, 제이슨!

00:08:54.000 --> 00:08:56.000
그 새로운 기능들은 매우 흥미롭다.

00:08:56.000 --> 00:08:59.000
나는 이미 그것들을 시험해 볼 기회가 있었다.

00:08:59.000 --> 00:09:04.000
카탈리스트 팀이 개발한 앱의 데모를 안내해 드리겠습니다.

00:09:04.000 --> 00:09:08.000
그것은 여행 작가로서 촉매 팀의 달빛으로 밝혀졌다.

00:09:08.000 --> 00:09:12.000
그래서, 우리는 아이폰과 아이패드용 트립 플래너를 개발했다.

00:09:12.000 --> 00:09:19.000
다음은 M1이 장착된 13인치 맥북 프로에서 실행되는 트립 플래너입니다.

00:09:19.000 --> 00:09:25.000
우리는 가능한 한 많은 사용자가 앱을 사용할 수 있도록 M1 Mac에서 앱을 실행하도록 선택했습니다.

00:09:25.000 --> 00:09:28.000
앱의 기능을 안내해 드리겠습니다.

00:09:28.000 --> 00:09:38.000
트립 플래너는 전 세계에서 방문하기 좋은 장소를 나열하고 다양한 빈번한 여행자 프로그램에 대한 보상 포인트를 사용할 수 있는 앱입니다.

00:09:38.000 --> 00:09:43.000
그것의 UI는 3열 분할 뷰 컨트롤러를 기반으로 한다.

00:09:43.000 --> 00:09:55.000
사이드바를 사용하여, 내가 가장 좋아하는 나라의 숙박 시설, 레스토랑 및 사이트 사이를 탐색하거나, 포인트를 검토하고 사용할 수 있는 보상 프로그램을 선택할 수 있습니다.

00:09:55.000 --> 00:10:04.000
사이드바에서 무언가를 선택할 때, 그것이 카테고리라면, 트립 플래너는 분할 뷰 컨트롤러의 보충 열에 그 내용을 보여줍니다.

00:10:04.000 --> 00:10:14.000
보조 보기 컨트롤러는 일본, 스페인, 브라질, 탄자니아의 명소, 레스토랑 및 숙박 시설로 채워집니다.

00:10:14.000 --> 00:10:25.000
대신 사이드바에서 리프 항목이나 보충 보기 컨트롤러의 항목을 선택하면, 보조 보기 컨트롤러는 해당 항목에 대한 세부 사항을 보여줍니다.

00:10:25.000 --> 00:10:31.000
나는 일본에서 내가 가장 좋아하는 카페 중 하나인 익스트림 말차를 선택할 것이다.

00:10:31.000 --> 00:10:40.000
세부 보기 컨트롤러에는 카페에 대한 텍스트, 여행을 계획하는 데 도움이 되는 버튼, 익스트림 말차가 어디에 있는지 보여주는 지도 보기가 포함되어 있습니다.

00:10:40.000 --> 00:10:46.000
트립 플래너의 경우, M1 Mac에서 모든 것이 즉시 작동했다.

00:10:46.000 --> 00:10:52.000
그러나, iOS 앱이기 때문에, Mac에서 집에서 느낄 수 있도록 우리가 할 수 있는 일은 너무 많았다.

00:10:52.000 --> 00:10:58.000
더 나아가기 위해, 우리는 그 확인란을 선택하고 Mac Catalyst 앱으로 만들어야 했다.

00:10:58.000 --> 00:11:01.000
이 체크박스는 구체적으로 말하자면. 확대할 수 있을까요?

00:11:01.000 --> 00:11:05.000
그리고 확인란을 선택하여 앱을 향상시키세요.

00:11:05.000 --> 00:11:09.000
여기 Mac Catalyst에 최적화된 Trip Planner가 있습니다.

00:11:09.000 --> 00:11:28.000
우리는 새 창을 열기 위한 더블 탭 제스처 인식기, 사용자 지정 제목 표시줄 모양과 같은 Mac 전용 기능을 추가했으며, 기본 컨트롤과 선명한 텍스트를 제공하는 Mac을 최적화하여 올인했습니다.

00:11:28.000 --> 00:11:37.000
그 과정에 대한 전체 이야기를 보려면 "훌륭한 Mac Catalyst 앱의 품질"과 "Mac Catalyst 앱의 인터페이스 최적화"를 보세요.

00:11:37.000 --> 00:11:43.000
트립 플래너의 최종 버전에서, 저는 제이슨이 방금 말한 새로운 API를 채택했습니다.

00:11:43.000 --> 00:11:45.000
나는 각각의 입양을 다룰 것이다.

00:11:45.000 --> 00:11:48.000
샘플 프로젝트를 다운로드하는 것이 좋습니다.

00:11:48.000 --> 00:11:52.000
내가 여기서 보여줄 모든 스니펫은 그 코드에서 직접 가져온 것이다.

00:11:52.000 --> 00:11:57.000
여기 macOS Monterey용으로 완전히 업데이트된 앱이 있습니다.

00:11:57.000 --> 00:11:59.000
나는 익스트림 말차를 다시 선택했다.

00:11:59.000 --> 00:12:05.000
배경색이 있는 macOS 스타일 버튼 형태의 UI에서 일부 색상을 볼 수 있습니다.

00:12:05.000 --> 00:12:07.000
하지만 나는 그것들로 돌아갈 거야.

00:12:07.000 --> 00:12:10.000
먼저 장면 자막에 대해 이야기하고 싶습니다.

00:12:10.000 --> 00:12:15.000
저는 두 가지 일을 하기 위해 새로운 UIScene 자막 속성을 사용하고 있습니다.

00:12:15.000 --> 00:12:23.000
먼저, 저는 Mac에서 더 편안하게 느껴지는 방식으로 디테일 뷰 컨트롤러의 제목을 보여주기 위해 자막을 사용하고 있습니다.

00:12:23.000 --> 00:12:28.000
창 자막은 내비게이션 항목의 제목보다 Mac과 더 비슷합니다.

00:12:28.000 --> 00:12:35.000
둘째, 사용자가 앱을 탐색할 때 유용한 맥락을 제공하기 위해 자막을 변경하고 있습니다.

00:12:35.000 --> 00:12:43.000
여행 플래너에서, 나는 일본과 탄자니아를 선택할 것이다.

00:12:43.000 --> 00:12:47.000
그래서, 창문의 자막은 "국가"라고 쓰여 있다.

00:12:47.000 --> 00:12:57.000
이 작은 캠핑 장소를 선택하면, 여기 보충 보기 컨트롤러에서, 내가 글램프 킬리만자로를 선택했다는 것을 알리기 위해 자막이 바뀝니다.

00:12:57.000 --> 00:13:01.000
그리고 내가 전체 보상 프로그램 섹션을 선택한다면...

00:13:01.000 --> 00:13:08.000
자막은 국가 및 보상 프로그램으로 다시 변경되어 사용자에 대한 컨텍스트를 추가합니다.

00:13:08.000 --> 00:13:13.000
자막이 Catalyst 앱에 컨텍스트를 추가하는 데 어떻게 도움이 될 수 있는지 생각해 보세요.

00:13:13.000 --> 00:13:20.000
또한 자막은 각 UITitlebar 도구 모음 스타일에 대해 다르게 표시됩니다.

00:13:20.000 --> 00:13:26.000
당신의 앱에 가장 적합한 모습을 찾기 위해 이것을 실험해 보세요.

00:13:26.000 --> 00:13:34.000
자막을 설정하려면, 문자열 값으로 시작하고, 장면에 대한 참조를 받은 다음, 자막 속성을 설정하세요.

00:13:34.000 --> 00:13:41.000
장면 연결 시간에 이것을 설정하거나, 나중에 뷰 창의 장면에 액세스하여 설정할 수 있습니다.

00:13:41.000 --> 00:13:46.000
다음으로, 제가 여행 플래너에서 툴팁을 어떻게 채택했는지 보여드리겠습니다.

00:13:46.000 --> 00:13:55.000
macOS에서 매우 일반적인 상호 작용 패턴은 그 무언가에 대해 더 자세히 알기 위해 잠시 마우스를 올려놓는 것이다.

00:13:55.000 --> 00:14:03.000
이 기술은 앱의 UI를 어지럽히지 않고 사용자를 교육하는 오랜 방법입니다.

00:14:03.000 --> 00:14:10.000
툴팁은 또한 잘린 라벨의 전체 텍스트를 보여줄 수 있다.

00:14:10.000 --> 00:14:14.000
여기서, 나는 브라질의 이과수 폭포를 선택했다.

00:14:14.000 --> 00:14:20.000
잠시 이미지 위에 마우스를 올려놓으면 툴팁이 나타납니다!

00:14:20.000 --> 00:14:25.000
"우수하고 짙은 녹색의 숲이 흐린 날에 포효하는 이과수 폭포를 둘러싸고 있다."

00:14:25.000 --> 00:14:28.000
정말 좋은 설명이네요.

00:14:28.000 --> 00:14:40.000
우리는 새로운 UIToolTipInteraction API를 사용하여 모든 이미지에 이 기능을 추가했으며, 앱이 Mac에서 더 편안하게 느껴집니다.

00:14:40.000 --> 00:14:53.000
나는 또한 UILabel API를 사용하여 국제화된 통화 포맷으로 인해 잘리는 이러한 라벨을 확장하여 예상보다 조금 더 길게 만들었다.

00:14:53.000 --> 00:14:58.000
제이슨이 이전에 살펴봤듯이, 다양한 형태의 툴팁 API가 있다.

00:14:58.000 --> 00:15:14.000
영웅 이미지의 경우, UITooltipInteractionDelegate 없이 UIToolTipInteraction API를 사용하는 것은 임의의 보기에 ToolTip으로 일정한 텍스트를 첨부하고 싶었기 때문에 내 필요에 맞았다.

00:15:14.000 --> 00:15:22.000
통화 텍스트를 위해, 나는 UILabel에서 showsExpansionTextWhenTruncated 속성을 사용했다.

00:15:22.000 --> 00:15:33.000
그리고 ToolTip을 임의의 컨트롤에 첨부하고 싶다면, UIControl의 ToolTip 속성이 사용하기에 적합한 API입니다.

00:15:33.000 --> 00:15:39.000
macOS Monterey의 Catalyst에서 사용할 수 있는 다양한 새로운 버튼으로 넘어갈 것입니다.

00:15:39.000 --> 00:15:50.000
새로운 iOS 15 UIButtonConfiguration API에 대한 소개를 위해 "UIKit 버튼 시스템 만나기" 비디오를 확인하는 것이 좋습니다.

00:15:50.000 --> 00:15:59.000
이러한 새로운 UIButtonConfiguration 속성 중 다수는 Mac에 최적화된 Catalyst 앱에서 자체적으로 나타나고 있다.

00:15:59.000 --> 00:16:08.000
그리고 더 좋은 것은, iOS와 마찬가지로, UIButton에 정의된 속성은 UIButtonConfiguration의 속성과 혼합되고 일치할 수 있습니다.

00:16:08.000 --> 00:16:15.000
나는 너에게 많은 버튼을 보여줄 것이고, 그 후에, 각 버튼이 코드에서 어떻게 구성되었는지 보여줄 것이다.

00:16:15.000 --> 00:16:20.000
나는 새로운 버튼 배경색을 자랑하기 위해 새로운 목적지를 선택할 것이다.

00:16:20.000 --> 00:16:22.000
코파카바나는 어때?

00:16:22.000 --> 00:16:35.000
여기에 있는 버튼은 채워진 구성을 사용하고 있으므로 환경의 색조 색상을 선택하고 이미지와 배경 블러와 잘 일치하는 색상을 자동으로 얻습니다.

00:16:35.000 --> 00:16:39.000
이제, 보상 세부 보기 컨트롤러로 이동하겠습니다.

00:16:39.000 --> 00:16:43.000
사이드바에서 내 프로그램을 가져올게...

00:16:43.000 --> 00:16:47.000
그리고 다이아몬드 듀블룬스 리워드 프로그램을 선택하세요.

00:16:47.000 --> 00:16:56.000
이 견해의 목적은 내가 여행에서 얻은 포인트를 교환하고 무엇을 교환할지 선택할 수 있도록 하는 것이다.

00:16:56.000 --> 00:17:01.000
슬라이더를 사용하여 내가 얼마나 많은 포인트를 쓰고 있는지 선택할 수 있다.

00:17:01.000 --> 00:17:10.000
이 토글 버튼을 사용하여 포인트 승수를 활성화할 수 있으며, 첨부된 메뉴로 승수를 선택할 수도 있습니다.

00:17:10.000 --> 00:17:17.000
내 포인트 승수가 말이 되기 때문에 가장 큰 숫자를 선택하는 것 같아.

00:17:17.000 --> 00:17:19.000
그래서, 나는 여섯 개를 선택할 거야.

00:17:19.000 --> 00:17:21.000
캐치가 뭔지 궁금해.

00:17:21.000 --> 00:17:29.000
이 더 큰 버튼을 전환하여 사용할 카테고리를 선택할 수 있습니다.

00:17:29.000 --> 00:17:34.000
나는 교환, 현금화 또는 포인트 기부 중 하나를 선택할 수 있다.

00:17:34.000 --> 00:17:42.000
그리고 마침내 제출할 준비가 되면, 오른쪽 하단의 제출 버튼을 클릭하거나, 이 재설정 버튼을 클릭하여 다시 시작할 수 있습니다.

00:17:42.000 --> 00:17:45.000
여기에 꽤 많은 새로운 버튼이 있다.

00:17:45.000 --> 00:17:50.000
각각을 구성하는 방법을 보여드릴게요.

00:17:50.000 --> 00:17:55.000
나는 먼저 우리 모두가 익숙한 것을 다룰 것이다: 푸시 버튼.

00:17:55.000 --> 00:17:58.000
디테일 뷰 컨트롤러에서, 이것은 제출 버튼이었다.

00:17:58.000 --> 00:18:07.000
이것은 역할이 기본으로 설정된 Big Sur에 도입된 시스템 유형의 UIButton일 뿐입니다.

00:18:07.000 --> 00:18:11.000
다음으로, 포인트 승수 메뉴 버튼이 있습니다.

00:18:11.000 --> 00:18:17.000
이 버튼은 기본 클릭 시 상태를 전환하고 길게 누르면 메뉴를 표시합니다.

00:18:17.000 --> 00:18:28.000
나는 결국 사용자 지정 배경색을 원할 것이라는 것을 알고 있으므로, 채워진 구성을 사용하고 제목을 "포인트 승수"로 설정할 것이다.

00:18:28.000 --> 00:18:36.000
토글 동작을 얻기 위해, 나는 제이슨이 우리에게 말한 새로운 부울 속성인 changesSelectionAsPrimaryAction을 사용할 것이다.

00:18:36.000 --> 00:18:38.000
그걸 사실로 설정해.

00:18:38.000 --> 00:18:47.000
이제, 우리 버튼의 배경색은 앱의 색조 색상과 표준 무색 외관 사이를 전환할 것입니다.

00:18:47.000 --> 00:18:55.000
승수 값과 일부 UIActions로 구성된 메뉴도 첨부하겠습니다.

00:18:55.000 --> 00:19:08.000
그리고 마지막으로, 메뉴의 액션 핸들러에서 사용자가 가장 큰 포인트 승수를 선택하면, 우리는 조건부로 토글의 배경색을 시스템 빨간색으로 변경할 것입니다.

00:19:08.000 --> 00:19:13.000
이제 리셋 버튼을 구성하세요.

00:19:13.000 --> 00:19:17.000
나는 테두리가 없는 외관을 얻기 위해 평범한 구성을 사용할 수 있다.

00:19:17.000 --> 00:19:23.000
이 구성은 iPadOS 외관과 매우 유사해 보인다.

00:19:23.000 --> 00:19:32.000
나는 버튼의 역할을 파괴적으로 설정하여 시스템에 실수로 동작을 트리거하는 것을 방지하는 이벤트 처리를 수행하도록 지시할 것이다.

00:19:32.000 --> 00:19:35.000
그리고 tintColor를 systemRed로 설정하세요.

00:19:35.000 --> 00:19:37.000
그게 그 버튼의 거야.

00:19:37.000 --> 00:19:48.000
사용, 현금 인출 및 기부 중에서 선택할 수 있는 보기의 왼쪽 하단에 있는 팝업 버튼의 경우, 버튼 구성 API를 사용할 필요가 없습니다.

00:19:48.000 --> 00:19:56.000
시스템 버튼을 만들고 changesSelectionAsPrimaryAction을 true로 설정하겠습니다.

00:19:56.000 --> 00:20:01.000
의미론적으로, 그것이 팝업 버튼이 하는 일이다.

00:20:01.000 --> 00:20:09.000
다음으로, 나는 showsMenuAsPrimaryAction을 true로 설정하고 싶다. 왜냐하면 그것은 또한 의미적으로 팝업 버튼이 하는 일이기 때문이다.

00:20:09.000 --> 00:20:12.000
하지만 무엇을 주나요? 그 버튼은 바뀌지 않았어.

00:20:12.000 --> 00:20:14.000
사실, 있어.

00:20:14.000 --> 00:20:17.000
우리는 또 다른 토글 버튼을 달성했다.

00:20:17.000 --> 00:20:20.000
하지만 기본 상태는 물론 꺼져 있다.

00:20:20.000 --> 00:20:24.000
우리는 null이 아닌 메뉴 속성을 놓치고 있다.

00:20:24.000 --> 00:20:29.000
그것은 Mac Catalyst에서 새로운 팝업 모양을 얻는 데 매우 중요하다.

00:20:29.000 --> 00:20:35.000
이제 메뉴를 무언가로 설정했으므로, 팝업 버튼이 완벽하게 작동합니다.

00:20:35.000 --> 00:20:40.000
마지막으로, 이 크고 패널과 같은 토글 버튼에 집중하세요.

00:20:40.000 --> 00:20:47.000
이 레이아웃은 iPad 스타일의 버튼이 배치된 공간을 채우기 위해 늘어나는 방법을 활용합니다.

00:20:47.000 --> 00:20:51.000
맥 스타일을 사용하는 버튼은 이런 식으로 작동하지 않는다.

00:20:51.000 --> 00:20:59.000
트립 플래너가 Mac용으로 최적화하도록 설정된 동안에도 iPad 동작을 유지할 수 있었고, 방법은 다음과 같습니다.

00:20:59.000 --> 00:21:05.000
나는 또 다른 채워진 버튼 구성으로 시작했다.

00:21:05.000 --> 00:21:14.000
그런 다음 이미지의 버튼 상태를 지정할 필요 없이 이미지를 설정하기 위해 구성을 사용했습니다.

00:21:14.000 --> 00:21:21.000
.Pad 동작 스타일을 지정함으로써, 나는 iPad에서 할 수 있는 레이아웃 동작을 얻는다.

00:21:21.000 --> 00:21:27.000
즉, 버튼의 배경은 프레임을 채우기 위해 뻗어 있다.

00:21:27.000 --> 00:21:36.000
기호는 조금 더 커야 했기 때문에, 나는 더 큰 포인트 크기로 버튼에 선호하는 기호 구성을 설정했다.

00:21:36.000 --> 00:21:51.000
이전과 마찬가지로 changesSelectionAsPrimaryAction을 true로 설정하고 버튼의 isSelected 속성을 기반으로 선택되고 선택되지 않은 색상을 지정하기 위해 colorUpdateHandler를 제공했습니다.

00:21:51.000 --> 00:21:55.000
나는 네가 이 모든 새로운 옵션들에 대해 나만큼 흥분하고 있다는 것을 알아.

00:21:55.000 --> 00:22:10.000
UIButton의 API와 반짝이는 새로운 속성의 오랜 회원은 Mac에서 집에 있는 많은 버튼을 만들기 위해 여러 가지 방법으로 혼합되고 일치할 수 있습니다.

00:22:10.000 --> 00:22:15.000
제가 당신에게 보여주고 싶은 트립 플래너의 마지막 특징은 인쇄입니다.

00:22:15.000 --> 00:22:21.000
새로운 내장된 키 명령 지원을 통해 Catalyst에서 그 어느 때보다 인쇄가 더 쉽습니다.

00:22:21.000 --> 00:22:30.000
응답자 체인을 사용하여 인쇄를 처리할 가장 적합한 개체를 선택하여 Trip Planner에서 인쇄 경험을 향상시킬 수 있었습니다.

00:22:30.000 --> 00:22:33.000
그게 무슨 뜻인지 보여줄게.

00:22:33.000 --> 00:22:41.000
Trip Planner의 최신 버전으로 돌아가서, 나는 스페인에서 가장 사랑받는 레스토랑 중 하나인 Charcuterie Bored를 선택했다.

00:22:41.000 --> 00:22:51.000
촉매별 줌 컨트롤을 클릭하여 지도 보기와 상호 작용할 것입니다.

00:22:51.000 --> 00:22:59.000
이제, 애플리케이션 포커스와 첫 번째 응답자 상태가 이 세부 보기 컨트롤러로 이동했습니다.

00:22:59.000 --> 00:23:08.000
메뉴에서 파일 인쇄를 선택하면, 인쇄 대화 상자가 나타납니다...

00:23:08.000 --> 00:23:11.000
이 한 항목만 인쇄할 것을 제안합니다.

00:23:11.000 --> 00:23:21.000
이제, 나는 또한 그날의 계획을 완성하기 위해 구엘 공원과 호텔 바르셀로나를 선택할 것이다.

00:23:21.000 --> 00:23:27.000
내장된 바로 가기 명령+P를 사용하여 인쇄할 것입니다.

00:23:27.000 --> 00:23:34.000
이제 나오는 인쇄 대화 상자는 내가 선택한 세 가지 항목을 모두 인쇄할 수 있도록 제공합니다...

00:23:34.000 --> 00:23:38.000
현재 디테일 뷰 컨트롤러뿐만 아니라.

00:23:38.000 --> 00:23:52.000
마지막으로, Shift+Tab이 사이드바의 국가에 초점을 맞추고 보충 또는 세부 보기 컨트롤러에서 아무것도 선택하지 않은 경우...

00:23:52.000 --> 00:24:03.000
그리고 나서 인쇄해 보세요, 트립 플래너는 무엇을 해야 할지 알고 사이드바에서 선택한 모든 항목을 인쇄합니다.

00:24:03.000 --> 00:24:06.000
그래서, 내가 이걸 어떻게 해?

00:24:06.000 --> 00:24:18.000
무엇보다도, 제이슨이 도입한 새로운 info.plist 키는 트립 플래너가 인쇄를 지원하고 메뉴 항목을 추가하고 싶다는 것을 시스템에 알리도록 설정되어야 합니다.

00:24:18.000 --> 00:24:24.000
디테일 뷰 컨트롤러에서, 나는 UIResponder의 두 가지 방법을 재정의했다.

00:24:24.000 --> 00:24:32.000
인쇄 콘텐츠는 실제 인쇄를 수행하며, UIKit은 응답자 체인에서 이 작업을 수행할 수 있는 개체를 찾습니다.

00:24:32.000 --> 00:24:40.000
어떤 경우에는, 애플리케이션 비즈니스 로직에 의해 지시되며, 디테일 뷰 컨트롤러는 인쇄를 원하지 않을 수 있습니다.

00:24:40.000 --> 00:24:48.000
그래서, 저는 canPerformAction 방법을 사용하여 응답자 체인에 세부 보기 컨트롤러가 인쇄할 수 있는지 여부를 알렸습니다.

00:24:48.000 --> 00:25:02.000
이 방법은 printContent 전에 호출되며, false를 반환하면 UIKit이 해당 작업을 수행할 수 있는 개체를 찾기 위해 응답자 체인을 올라가기 때문에 세부 정보 보기 컨트롤러를 건너뜁니다.

00:25:02.000 --> 00:25:17.000
애플리케이션의 루트 뷰 컨트롤러인 BrowserSplitViewController에서, 따라서 거의 항상 응답자 체인의 상단 근처에, 저는 또 다른 UIResponder 방법인 targetForAction:withSender를 구현했습니다.

00:25:17.000 --> 00:25:23.000
이를 통해 분할 뷰 컨트롤러는 인쇄를 처리해야 하는 개체를 선택할 수 있습니다.

00:25:23.000 --> 00:25:37.000
이것은 사용자의 선택과 비즈니스 논리가 일부 페이지 세트를 인쇄해야 한다고 지시할 때 유용하지만, 특정 인쇄를 구현하는 객체는 응답자 체인의 일부가 아닙니다.

00:25:37.000 --> 00:25:49.000
이것은 그 객체에 becomeFirstResponder를 보내 응답자 체인으로 강제하는 것보다 훨씬 선호되며, 이 시나리오에서 사용될 경우 안티 패턴이 될 것이다.

00:25:49.000 --> 00:25:50.000
그리고 그게 인쇄를 위한 거야.

00:25:50.000 --> 00:25:52.000
나는 전력망에서 벗어나 여행할 준비가 된 것 같아.

00:25:52.000 --> 00:26:05.000
이 비디오에서 제이슨은 그 어느 때보다 더 나은 앱을 Mac에 제공하는 데 도움이 되는 새로운 Mac Catalyst API와 향상된 Mac Catalyst API를 소개했습니다.

00:26:05.000 --> 00:26:08.000
그리고 나서, 나는 트립 플래너에서 그것들을 채택하는 방법을 보여주었다.

00:26:08.000 --> 00:26:17.000
대부분의 경우, 그것들은 Catalyst 앱에 전형적인 Mac 기능을 제공하는 새로운 속성일 뿐이며, 설정할 수 있는 단일 라인입니다.

00:26:17.000 --> 00:26:19.000
가서 이것들을 직접 시도해 봐.

00:26:19.000 --> 00:26:25.000
약간의 코드를 변경하고, Mac Catalyst 앱이 어떻게 크게 개선되는지 보세요.

00:26:25.000 --> 00:26:26.000
봐줘서 고마워.

00:26:26.000 --> 23:59:59.000
[타격적인 음악].

