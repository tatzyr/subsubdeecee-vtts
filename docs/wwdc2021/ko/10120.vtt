WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
Sommer Panage: 안녕하세요, 제 이름은 Sommer Panage입니다.

00:00:11.000 --> 00:00:16.000
오늘 iOS의 전체 키보드 액세스에 대해 이야기하게 되어 기쁩니다.

00:00:16.000 --> 00:00:21.000
풀 키보드 액세스는 운동 장애가 있는 고객을 위한 기능입니다.

00:00:21.000 --> 00:00:28.000
그래서 오늘부터, iOS의 일반적인 모터 접근성에 대한 간략한 개요를 알려드리겠습니다.

00:00:28.000 --> 00:00:36.000
그 후, 우리는 전체 키보드 액세스와 특히 iPad에서 사용자에게 제공하는 모든 기능을 자세히 살펴볼 것입니다.

00:00:36.000 --> 00:00:48.000
그리고 마지막으로, 우리는 개발자로서 키보드 사용자를 지원하기 위해 애플리케이션을 구축할 때 명심해야 할 주요 API와 원칙에 대해 자세히 알아볼 것입니다.

00:00:48.000 --> 00:00:53.000
이제, 모터 접근성에 대한 검토를 시작합시다.

00:00:53.000 --> 00:00:59.000
iOS용 접근 가능한 앱 개발에 대해 논의할 때, 우리는 모든 사용자를 염두에 두고 싶습니다.

00:00:59.000 --> 00:01:05.000
우리는 종종 시각 장애가 있거나 시력이 낮은 사람들을 위한 기술인 VoiceOver의 관점에서 접근성에 대해 이야기합니다.

00:01:05.000 --> 00:01:12.000
그러나, 우리의 소프트웨어가 운동 장애가 있는 모든 사람에게도 작동하는지 확인하는 것도 중요합니다.

00:01:12.000 --> 00:01:19.000
운동 장애는 광범위한 용어이며 누군가가 여러 가지 방법으로 iOS 장치를 사용하는 방식에 영향을 미칠 수 있다.

00:01:19.000 --> 00:01:22.000
어떤 사람들은 제한된 운동 범위를 가질 수 있다.

00:01:22.000 --> 00:01:29.000
다른 사람들은 떨림이나 화면을 만지는 것과 같은 더 미세한 운동 장애가 있을 수 있다.

00:01:29.000 --> 00:01:42.000
그리고 운동 장애의 심각성에 따라, 많은 사람들은 키보드, 조이스틱 또는 버튼과 같은 외부 하드웨어를 통해 장치와 상호 작용하는 것이 더 쉽거나 심지어 필요하다고 생각합니다.

00:01:42.000 --> 00:01:50.000
iOS는 운동 장애가 있는 사람들이 장치에서 원활한 경험을 할 수 있도록 수많은 보조 기술을 제공합니다.

00:01:50.000 --> 00:01:58.000
예를 들어, 우리는 하드웨어 상호 작용이나 멀티 터치 제스처에 어려움을 겪을 수 있는 사람들을 위해 AssistiveTouch를 제공합니다.

00:01:58.000 --> 00:02:06.000
AssistiveTouch는 화면 메뉴를 사용하여 이러한 상호 작용을 간단한 단일 탭으로 단순화합니다.

00:02:06.000 --> 00:02:15.000
스위치 컨트롤을 사용하면 모터 능력이 더 제한된 사람들이 하나 이상의 외부 스위치나 버튼을 사용하여 iOS 장치와 상호 작용할 수 있습니다.

00:02:15.000 --> 00:02:22.000
그리고 물론, 사람들이 음성만으로 iOS 기기와 상호 작용할 수 있는 음성 명령도 있습니다.

00:02:22.000 --> 00:02:28.000
그리고 그것은 우리를 최신 모터 기술 중 하나인 Full Keyboard Access로 데려온다.

00:02:28.000 --> 00:02:35.000
iOS는 iOS 9부터 키보드를 지원했지만, 추가 입력 모드였다.

00:02:35.000 --> 00:02:44.000
iOS 13.4.1에서 출시된 Full Keyboard Access를 통해 고객은 이제 키보드를 통해 장치와 100% 상호 작용할 수 있습니다.

00:02:44.000 --> 00:02:57.000
화면을 터치하기에 충분한 손재주가 없지만 외부 스위치가 필요하거나 사용하고 싶지 않은 사람들을 위한 AssistiveTouch와 스위치 제어 사이의 중간 지점입니다.

00:02:57.000 --> 00:03:10.000
그것은 또한 비언어적이거나, 언어 장애가 있거나, 단순히 음성 제어를 사용하는 것이 말이 되지 않는 환경에 있을 수 있는 사람들을 위해 음성 제어의 대안을 제공합니다.

00:03:10.000 --> 00:03:21.000
풀 키보드 액세스는 또한 한 손 키보드 또는 인체 공학적 분할 키보드와 같은 사용자 지정 또는 접근 가능한 키보드 레이아웃에 의존하는 사람들에게 적합합니다.

00:03:21.000 --> 00:03:31.000
풀 키보드 액세스가 사람들에게 터치스크린 없이 진정한 iOS 경험을 제공하기 위해, 기본 키보드 입력에 수많은 추가 기능을 제공합니다.

00:03:31.000 --> 00:03:43.000
전체 키보드 액세스에는 탐색 명령이 있어 사용자가 화면의 모든 단일 요소, 상호 작용 명령 및 드래그 앤 드롭과 같은 제스처 모드에 접근할 수 있습니다.

00:03:43.000 --> 00:03:47.000
그리고 이 모든 명령은 탭을 수정 키로 사용합니다.

00:03:47.000 --> 00:03:53.000
그러나, 그들은 또한 다른 키 콤보를 선호할 수 있는 사람들을 위해 완전히 사용자 정의할 수 있습니다.

00:03:53.000 --> 00:04:00.000
그래서 사용자가 전체 키보드 액세스를 사용하여 iPad에서 어떻게 탐색할 수 있는지 살펴봅시다.

00:04:00.000 --> 00:04:05.000
그래서 먼저, 화살표 키를 사용하여 노트 앱과 스페이스 바로 이동하여 활성화할 수 있습니다.

00:04:05.000 --> 00:04:12.000
거기에서, 나는 탭하여 새 메모를 만든 다음 즉시 편집할 수 있다.

00:04:12.000 --> 00:04:17.000
셰이프 셔플이라는 앱 중 하나에서 버전 2에 대한 메모를 할 것 같아요.

00:04:17.000 --> 00:04:21.000
아이패드를 위해 멋지게 만들자.

00:04:21.000 --> 00:04:30.000
편집이 끝나면, Control-Tab을 사용하여 편집 모드에서 벗어날 수 있습니다.

00:04:30.000 --> 00:04:38.000
이제 오래된 메모를 삭제하고 싶다면, Tab-Z를 사용하여 작업 목록을 불러올 수 있습니다.

00:04:38.000 --> 00:04:44.000
그러면 화살표와 스페이스를 사용하여 메모를 삭제할 수 있습니다.

00:04:44.000 --> 00:04:47.000
이제, 내가 새로운 메모를 하나 더 하고 싶다고 가정해 봅시다.

00:04:47.000 --> 00:04:55.000
음, 메모 만들기 버튼을 다시 탭하거나 Tab-F를 사용하여 찾기 기능을 사용할 수 있습니다.

00:04:55.000 --> 00:05:00.000
그리고 난 그냥 "new"를 입력하고, 거기로 가자.

00:05:00.000 --> 00:05:13.000
이제 전체 키보드 액세스와 그것이 어떻게 사용되는지에 대한 모든 것을 알았으니, 앱 개발자로서 키보드 사용자가 최상의 경험을 할 수 있도록 어떻게 할 수 있는지 살펴볼 때입니다.

00:05:13.000 --> 00:05:21.000
2020년에, 저는 당신과 스위치 컨트롤에 대해 이야기했고, 우리는 아이들이 모양, 색상 및 숫자를 배울 수 있는 이 재미있는 게임을 작업했습니다.

00:05:21.000 --> 00:05:24.000
우리는 함께 이 앱에 접근할 수 있게 만들었다.

00:05:24.000 --> 00:05:32.000
올해, 저는 전체 키보드 액세스에서 잘 작동하는지 확인할 수 있도록 iPad용 셰이프 셔플을 수정하기로 결정했습니다.

00:05:32.000 --> 00:05:34.000
아직 셰이프 셔플을 보지 못했다면, 걱정하지 마세요.

00:05:34.000 --> 00:05:36.000
여기 빠른 투어가 있습니다.

00:05:36.000 --> 00:05:42.000
각 레벨에서, 플레이어는 우리가 여기서 보는 것과 같은 프롬프트를 받는다: 두 개의 노란색 사각형.

00:05:42.000 --> 00:05:53.000
그런 다음 그들은 세 개의 필수 카드를 찾기 위해 아래의 카드를 탭해야 합니다; 이 경우, 두 개의 물체가 있는 카드, 정사각형 카드, 그리고 옐로 카드.

00:05:53.000 --> 00:05:57.000
일단 그들이 각각의 올바른 카드를 두 번 탭하면, 그들은 다음 단계로 넘어갈 수 있다.

00:05:57.000 --> 00:06:01.000
그리고 레벨이 올라간다면, 프롬프트가 더 어려워진다.

00:06:01.000 --> 00:06:08.000
방금 두 개를 찾은 것 같아서, 두 번 탭하여 보드에 추가하고 노란색과 사각형을 계속 검색할 수 있습니다.

00:06:08.000 --> 00:06:17.000
이제, 카드가 맞는지 아닌지 확실하지 않다면, 나중에 돌아올 수 있도록 길게 눌러서 핀을 넣을 수 있습니다.

00:06:17.000 --> 00:06:20.000
왼쪽 하단에 있는 이 두 개에 핀을 넣을게.

00:06:20.000 --> 00:06:25.000
그런 다음, 내가 돌아올 때, 나는 최종 선택을 하고 레벨을 이길 수 있다.

00:06:25.000 --> 00:06:31.000
흠... 알았어!

00:06:31.000 --> 00:06:38.000
이제 다른 라운드를 할 때 어떻게 작동하는지 보기 위해 게임플레이 보기부터 시작하지만 이번에는 키보드를 통해 봅시다.

00:06:38.000 --> 00:06:42.000
그래서 내가 탭과 스페이스 바를 눌렀을 때, 일이 잘 작동하는 것 같다.

00:06:42.000 --> 00:06:46.000
나는 탭으로 카드 사이를 이동하고 스페이스로 뒤집을 수 있다.

00:06:46.000 --> 00:06:51.000
이제 삼각형 카드를 추가하거나 고정해 봅시다.

00:06:51.000 --> 00:06:56.000
탭-Z를 눌러 작업 메뉴를 불러올 것이지만, 사용 가능한 작업이 보이지 않습니다.

00:06:56.000 --> 00:07:05.000
이제, 실제로 사용자가 추가 및 핀과 같은 게임에서 일반적인 행동을 빠르게 할 수 있도록 도울 수 있는 두 가지 방법이 있습니다.

00:07:05.000 --> 00:07:09.000
우리가 이것을 해결할 수 있는 첫 번째 방법은 사용자 지정 조치를 통한 것이다.

00:07:09.000 --> 00:07:13.000
맞춤 행동은 많은 보조 기술로 번역되기 때문에 훌륭하다.

00:07:13.000 --> 00:07:21.000
무언가에 사용자 지정 작업을 추가하면 VoiceOver, 스위치 제어 및 전체 키보드 액세스에 표시됩니다.

00:07:21.000 --> 00:07:25.000
사용자 지정 작업은 Tab-Z를 눌렀을 때 나타나는 것입니다.

00:07:25.000 --> 00:07:38.000
여기서 볼 수 있듯이, 내가 해야 할 일은 내가 추가하고 싶은 작업에 대한 UIAccessibilityCustomAction을 만든 다음, 내 cardView의 accessibilityCustomActions 배열로 설정하는 것이다.

00:07:38.000 --> 00:07:41.000
또한, 이미지를 추가하는 것은 항상 좋다.

00:07:41.000 --> 00:07:47.000
이 이미지들은 전체 키보드 액세스에는 나타나지 않지만, 스위치 제어에는 표시됩니다.

00:07:47.000 --> 00:07:50.000
사용자 지정 작업이 추가된 내 UI는 다음과 같습니다.

00:07:50.000 --> 00:07:56.000
Tab-Z를 누르면, 카드를 추가하거나 고정할 수 있는 이 멋진 팝오버가 표시됩니다.

00:07:56.000 --> 00:08:04.000
사용자 지정 작업은 우리의 접근성 기능을 사용하는 모든 사람에게 좋습니다; 그러나, 여기서 취할 수 있는 또 다른 정말 멋진 접근 방식이 있습니다.

00:08:04.000 --> 00:08:07.000
사용자 지정 키보드 단축키를 추가할 수 있습니다.

00:08:07.000 --> 00:08:20.000
사용자 지정 키보드 단축키의 좋은 점은 전체 키보드 액세스 사용자와 장치로 키보드를 사용하는 사용자 모두에게 작동하지만 전체 키보드 액세스가 켜져 있지 않다는 것입니다.

00:08:20.000 --> 00:08:24.000
접근성과 파워 유저 모두에게 좋습니다.

00:08:24.000 --> 00:08:29.000
키보드 단축키 목록을 보려면, Command 키를 길게 누르기만 하면 됩니다.

00:08:29.000 --> 00:08:38.000
올해 "iPad 앱을 한 단계 끌어올리세요" 강연에서 iPad의 키보드 단축키에 대한 모든 것을 배울 수 있습니다.

00:08:38.000 --> 00:08:50.000
오늘, Mac Catalyst 13에서 새롭고 이제 iOS와 iPadOS 15로 가져온 이 API를 어떻게 활용할 수 있는지에 대한 짧은 예를 보여드리겠습니다.

00:08:50.000 --> 00:09:01.000
AppDelegate에서 buildMenu를 재정의하여 키 명령을 설정할 수 있습니다. 여기서 두 개의 UIKeyCommands를 만듭니다. 하나는 추가 작업을 위한 것이고 다른 하나는 핀 작업을 위한 것입니다.

00:09:01.000 --> 00:09:08.000
Command를 누를 때 KeyCommand HUD에 표시되기 때문에 검색 가능한 제목을 추가해야 합니다.

00:09:08.000 --> 00:09:16.000
다음으로, "게임플레이"라는 이름을 붙인 새로운 UI 메뉴를 만들고, 새로운 명령을 "자녀"로 전달합니다.

00:09:16.000 --> 00:09:22.000
마지막으로, 메뉴 빌더에 메뉴를 삽입했고, 끝났어!

00:09:22.000 --> 00:09:36.000
이제, 실제로 선택한 카드가 있을 때만 HUD에서 이러한 항목이 활성화되기를 원하기 때문에 GameViewController에서 canPerformAction을 재정의하여 카드가 실제로 선택되었을 때만 이러한 항목을 표시합니다.

00:09:36.000 --> 00:09:42.000
내가 Command 키를 누르고 카드를 선택했을 때 우리 게임의 모습은 다음과 같습니다.

00:09:42.000 --> 00:09:47.000
그리고 여기서, 저는 Full Keyboard Access를 위한 개발의 핵심 원칙을 강조하고 싶습니다.

00:09:47.000 --> 00:09:56.000
사용자의 효율성을 향상시키기 위해 모든 일반적인 작업에 사용자 지정 작업과 키보드 단축키를 추가해야 합니다.

00:09:56.000 --> 00:10:05.000
둘 다 쉽게 발견할 수 있을 뿐만 아니라, 키보드를 통해 앱과 상호 작용하는 모든 사람의 경험을 향상시킵니다.

00:10:05.000 --> 00:10:07.000
우리 게임으로 돌아가자.

00:10:07.000 --> 00:10:09.000
나는 새로운 행동으로 삼각형을 추가했다.

00:10:09.000 --> 00:10:13.000
이제 Shift-Tab을 사용하여 홈 버튼으로 돌아갈 것입니다.

00:10:13.000 --> 00:10:17.000
하지만, 내가 그것을 하는 동안, 나는 또 다른 문제를 본다.

00:10:17.000 --> 00:10:23.000
스페이스 바를 탭하면 아무 일도 일어나지 않더라도 그 삼각형을 선택할 수 있다.

00:10:23.000 --> 00:10:28.000
그래서 우선, 우리가 상호 작용할 수 없다면 왜 우리의 커서가 이 요소로 가는가?

00:10:28.000 --> 00:10:33.000
음, 저는 이미 이 앱에서 VoiceOver 지원 작업을 했고, 그 모습은 다음과 같습니다.

00:10:33.000 --> 00:10:41.000
당신은 내가 내 아이템에서 isAccessibilityElement를 true로 설정하고 접근성 라벨을 제공한다는 것을 알게 될 것입니다.

00:10:41.000 --> 00:10:46.000
VoiceOver가 사용자에게 각 항목을 읽어야 하기 때문에 이것은 훌륭합니다.

00:10:46.000 --> 00:10:54.000
그러나, 누군가가 전체 키보드 액세스 사용자인 경우, 그들의 커서는 isAccessibilityElement로 표시된 많은 항목으로 이동합니다.

00:10:54.000 --> 00:11:00.000
Full Keyboard Access가 이 요소를 건너뛰도록 하려면, 한 줄을 더 추가해야 합니다.

00:11:00.000 --> 00:11:06.000
여기서, 당신은 우리가 accessibilityResponds ToUserInteraction을 false로 설정한 것을 볼 수 있습니다.

00:11:06.000 --> 00:11:12.000
이것은 우리 시스템에 이것이 접근성 요소이지만, 사용자가 상호 작용할 수 있는 요소가 아니라는 것을 알려줍니다.

00:11:12.000 --> 00:11:19.000
따라서 전체 키보드 액세스 또는 스위치 제어와 같은 모터 기술의 커서는 건너뛰어야 합니다.

00:11:19.000 --> 00:11:27.000
접근성 RespondsToUserInteraction은 isAccessibilityElement가 이미 참인 경우에만 의미가 있습니다.

00:11:27.000 --> 00:11:34.000
기본적으로, 시스템은 isAccessibilityElement true를 대화형이든 아니든 요소를 올바르게 설정하려고 합니다.

00:11:34.000 --> 00:11:48.000
대부분의 경우 VoiceOver에 액세스할 수 있지만 전체 키보드 액세스 또는 기타 모터 기술이 아닌 개체가 있을 때만 accessibilityResponds ToUserInteraction을 false로 설정하면 됩니다.

00:11:48.000 --> 00:11:54.000
이것은 우리를 풀 키보드 액세스를 위한 개발의 두 번째 핵심 원칙으로 이끈다.

00:11:54.000 --> 00:12:02.000
앱을 테스트할 때, 커서가 사용자가 상호 작용할 수 있는 항목으로만 가는지 확인하고 싶을 것입니다.

00:12:02.000 --> 00:12:12.000
이제, 앱을 구축하고 초점이 올바른 장소로만 가는지 확인하면서, 우리가 방금 논의한 API 대신 canBecomeFocused를 재정의하는 것이 유혹적일 수 있습니다.

00:12:12.000 --> 00:12:21.000
그러나, 이것은 전체 초점 엔진에 대한 초점 동작을 무시하고 전체 키보드 액세스가 켜져 있지 않을 때 탭을 사용하여 탐색하는 사람들에게 영향을 미칠 것이다.

00:12:21.000 --> 00:12:28.000
따라서 전체 키보드 액세스 사용자의 동작만 수정하고 싶을 때 이것을 피하는 것이 가장 좋습니다.

00:12:28.000 --> 00:12:31.000
사실, 이것은 중요한 영역을 불러일으킨다.

00:12:31.000 --> 00:12:40.000
전체 키보드 액세스를 구동하는 데 사용되는 포커스 시스템은 iPadOS와 같은 모든 OS에서 탭 탐색을 구동하는 것과 동일합니다.

00:12:40.000 --> 00:12:48.000
전체 키보드 액세스로 작업하기 위해 그것을 만질 필요는 없지만, 더 알고 싶다면, 이 세 가지 대화를 추천합니다.

00:12:48.000 --> 00:12:57.000
올해 우리는 "iPad 키보드 내비게이션에 집중"과 "SwiftUI의 직접 및 반영"이라는 두 가지 다른 회담이 있습니다.

00:12:57.000 --> 00:13:04.000
그리고 2017년에, 포커스 엔진이 tvOS를 어떻게 구동하는지에 대한 환상적인 이야기가 있다.

00:13:04.000 --> 00:13:11.000
이제, 홈 화면으로 돌아가서, 전체 키보드 액세스의 멋진 찾기 기능을 사용할 수 있는지 확인하고 싶습니다.

00:13:11.000 --> 00:13:13.000
그럼 한 번 해보자.

00:13:13.000 --> 00:13:17.000
좋아, 숫자 레벨은 상자 밖에서 잘 작동해.

00:13:17.000 --> 00:13:22.000
8단계와 12단계를 찾는 것은 쉽다.

00:13:22.000 --> 00:13:28.000
그리고 이미 VoiceOver 지원을 추가했기 때문에, 찾기와 함께 설정 버튼도 받고 있습니다.

00:13:28.000 --> 00:13:32.000
하지만 그 버튼이 설정이라는 것을 모른다면 어떻게 되나요?

00:13:32.000 --> 00:13:36.000
어쩌면 나는 "선호"나 "선호"를 입력할지도 몰라.

00:13:36.000 --> 00:13:38.000
흠. 운이 없어.

00:13:38.000 --> 00:13:44.000
이 문제를 해결하기 위해, 우리는 accessibilityUserInputLabels에 문자열 배열을 설정할 수 있습니다.

00:13:44.000 --> 00:13:55.000
여기서, 저는 사람들이 무엇을 입력하든 도달할 수 있도록 이 라벨에 기본 설정, 선호도, 장비 및 설정에 대한 현지화된 단어를 설정하고 있습니다.

00:13:55.000 --> 00:14:04.000
이 문자열을 추가함으로써, 당신은 또한 음성 제어 사용자에게 호의를 베풀게 될 것입니다. 왜냐하면 그들은 이제 이러한 이름 중 하나를 말하고 설정 버튼을 탭할 수 있기 때문입니다.

00:14:04.000 --> 00:14:08.000
물론, 이것은 당신의 VoiceOver 라벨을 방해하지 않을 것입니다.

00:14:08.000 --> 00:14:15.000
그래서 이제 "prefs"를 입력하면 잘 작동합니다!

00:14:15.000 --> 00:14:19.000
그리고 이것은 나를 오늘 우리의 세 번째이자 마지막 원칙으로 이끈다.

00:14:19.000 --> 00:14:29.000
사용자가 항상 찾기로 빠르게 얻을 수 있도록 이미지 기반 컨트롤에 대해 가능한 한 많은 라벨을 제공해야 합니다.

00:14:29.000 --> 00:14:33.000
이제, 우리가 끝내기 전에, 나는 약간의 재미있는 폴란드어를 하고 싶어.

00:14:33.000 --> 00:14:36.000
그러니 내 홈 화면을 한 번 더 보자.

00:14:36.000 --> 00:14:40.000
이 모든 항목은 UI 버튼이기 때문에, 탭은 자연스럽게 이동하고 있다.

00:14:40.000 --> 00:14:42.000
그리고 그거 좋네.

00:14:42.000 --> 00:14:45.000
하지만 내 커서가 어떻게 항상 직사각형인지 알아?

00:14:45.000 --> 00:14:50.000
더 장난스럽게 만들기 위해, 버튼의 모양과 일치하도록 합시다.

00:14:50.000 --> 00:14:59.000
버튼 주위에 멋진 커서 모양을 보여주기 위해, 우리는 accessibilityPath를 사용할 수 있습니다 - 사실, VoiceOver에 사용할 것과 동일한 accessibilityPath입니다.

00:14:59.000 --> 00:15:06.000
정적 보기의 경우, UIBezierPath를 사용하여 accessibilityPath를 모양 자체의 것으로 설정할 수 있습니다.

00:15:06.000 --> 00:15:11.000
화면 좌표에서 접근성 경로를 설정하고 있다는 것을 주목하세요.

00:15:11.000 --> 00:15:20.000
스크롤 보기에 있는 경우, 스크롤할 때에도 화면 좌표에 대해 항상 정확하도록 accessibilityPath를 재정의하고 싶을 것입니다.

00:15:20.000 --> 00:15:24.000
이 약간의 폴란드어가 얼마나 재미있어 보이는지 봅시다.

00:15:24.000 --> 00:15:33.000
이제 내가 탭할 때, 우리는 원, 삼각형, 사각형을 볼 수 있다.

00:15:33.000 --> 00:15:37.000
그리고 그것은 VoiceOver와도 마찬가지일 것이다.

00:15:37.000 --> 00:15:46.000
그것으로, 키보드, 특히 전체 키보드 액세스용 앱을 개발할 때 명심해야 할 몇 가지 주요 아이디어를 검토해 봅시다.

00:15:46.000 --> 00:15:55.000
먼저, 사용자 지정 동작과 키보드 단축키를 사용하여 앱을 탐색하는 효율적인 수단을 추가하세요.

00:15:55.000 --> 00:16:01.000
다음으로, 커서가 사용자가 실제로 상호 작용할 수 없는 항목에 착륙하지 않도록 하십시오.

00:16:01.000 --> 00:16:13.000
그리고 마지막으로, 사람들이 전체 키보드 액세스의 찾기 기능을 최대한 활용할 수 있도록 특히 이미지 기반 컨트롤에 사용자 입력 라벨을 추가해야 합니다.

00:16:13.000 --> 00:16:15.000
그리고 그게 다야!

00:16:15.000 --> 00:16:21.000
오늘 당신이 모든 Apple 제품에서 모터 접근성의 중요성을 이해하기를 바랍니다.

00:16:21.000 --> 00:16:28.000
우리 장치와 상호 작용하는 방법에는 여러 가지가 있지만, 키보드는 사용자에게 강력한 도구가 되었다.

00:16:28.000 --> 00:16:37.000
이 이야기의 정보를 통해, 이제 앱이 전체 키보드 액세스 사용자와 모든 사람에게 훌륭한 경험을 제공한다는 것을 확신할 수 있어야 합니다.

00:16:37.000 --> 00:16:42.000
감사합니다 그리고 놀라운 WWDC 2021을 보내세요.

00:16:42.000 --> 23:59:59.000
♪

