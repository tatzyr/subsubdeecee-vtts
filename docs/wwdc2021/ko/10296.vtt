WEBVTT

00:00:02.000 --> 00:00:13.000
안녕하세요, WWDC 2021에 오신 것을 환영합니다.

00:00:13.000 --> 00:00:17.000
저는 수지이고, Xcode에서 XCTest를 작업합니다.

00:00:17.000 --> 00:00:27.000
이 세션에서, 우리는 테스트를 반복하는 도구인 테스트 반복으로 신뢰할 수 없는 코드를 진단하는 방법에 대해 배울 것입니다.

00:00:27.000 --> 00:00:35.000
앱을 실행하는 테스트를 실행하는 과정에서, 신뢰할 수 없는 코드를 실행할 때 때때로 테스트가 실패할 수 있습니다.

00:00:35.000 --> 00:00:45.000
인종 조건, 환경 가정, 글로벌 상태 또는 외부 서비스와의 통신을 다룰 때 이러한 유형의 불일치에 부딪힐 수 있습니다.

00:00:45.000 --> 00:00:51.000
이것들은 번식하기 어렵기 때문에 추적하기 어려운 버그이다.

00:00:51.000 --> 00:00:56.000
이러한 유형의 실패를 진단하는 한 가지 방법은 테스트를 반복적으로 실행하는 것입니다.

00:00:56.000 --> 00:01:06.000
Xcode 13에 추가된 테스트 반복을 사용하면 정지 조건으로 지정된 횟수까지 테스트를 반복할 수 있습니다.

00:01:06.000 --> 00:01:10.000
Xcode는 세 가지 테스트 반복 모드를 지원합니다.

00:01:10.000 --> 00:01:13.000
첫 번째 모드는 고정 반복이다.

00:01:13.000 --> 00:01:19.000
고정된 반복은 상태에 관계없이 고정된 횟수로 테스트를 반복할 것입니다.

00:01:19.000 --> 00:01:28.000
고정 반복은 테스트 제품군의 신뢰성을 이해하고 시간이 지남에 따라 새로운 테스트가 도입됨에 따라 신뢰성을 유지하는 데 도움이 됩니다.

00:01:28.000 --> 00:01:30.000
두 번째는 실패할 때까지이다.

00:01:30.000 --> 00:01:34.000
실패할 때까지 실패할 때까지 테스트를 계속 반복할 것이다.

00:01:34.000 --> 00:01:41.000
저는 이 도구를 사용하여 디버거에서 그것을 잡기 위해 비결정적 테스트 실패를 재현하는 것을 좋아합니다.

00:01:41.000 --> 00:01:44.000
마지막으로 실패에 대한 재시도입니다.

00:01:44.000 --> 00:01:50.000
실패 시 재시도하면 지정된 최대치까지 성공할 때까지 테스트를 다시 시도할 것입니다.

00:01:50.000 --> 00:01:57.000
이것은 처음에는 실패하지만 결국 재시도에 성공하는 신뢰할 수 없는 테스트를 식별하는 데 유용합니다.

00:01:57.000 --> 00:02:07.000
CI의 테스트가 이러한 동작을 나타내는 경우, 일시적으로 테스트 계획에서 실패에 대한 재시도를 활성화하고 문제를 해결하기 위해 추가 데이터를 수집할 수 있습니다.

00:02:07.000 --> 00:02:13.000
재시도 실패가 실제 제품의 문제를 숨길 수 있다는 것을 기억하는 것이 중요합니다.

00:02:13.000 --> 00:02:22.000
일부 기능은 결국 성공하기 전에 처음에는 실패하므로, 이 모드를 일시적으로 사용하여 실패를 진단하는 것이 가장 좋습니다.

00:02:22.000 --> 00:02:26.000
이것이 실제로 어떻게 작동하는지 더 잘 이해합시다.

00:02:26.000 --> 00:02:32.000
나는 아이스크림 트럭이 내 집으로 운전할 때까지 얼마나 걸리는지 알려주는 IceCreamTruckCountdown이라는 앱을 만들었다.

00:02:32.000 --> 00:02:40.000
나는 트럭에 쿠키와 크림이 있을 때가 좋아, 그래서 나는 트럭이 모든 맛을 가지고 있는지 확인하기 위해 testFlavors라는 테스트를 작성했다.

00:02:40.000 --> 00:02:46.000
testFlavors는 내가 트럭 창고에서 가져온 트럭을 가지고 있다.

00:02:46.000 --> 00:02:53.000
나는 prepareFlavors에 전화하고, 마지막으로, 트럭이 33가지 맛을 모두 가지고 있다고 주장한다.

00:02:53.000 --> 00:03:00.000
최근에, 나는 testFlavors가 때때로 Xcode Cloud의 주요 지점에서 실패한다는 것을 알아차렸다.

00:03:00.000 --> 00:03:09.000
더 많은 정보를 수집하기 위해, 저는 일시적으로 테스트 계획을 구성하여 실패 시 테스트 반복 모드를 다시 시도할 수 있도록 했습니다.

00:03:09.000 --> 00:03:17.000
보고서 네비게이터를 살펴보고 클라우드 보고서를 확인해 봅시다.

00:03:17.000 --> 00:03:28.000
내 시험은 일관성 없이 실패하고 있으므로, 더 많은 정보를 위해 이 마지막 시험을 확인해 봅시다.

00:03:28.000 --> 00:03:38.000
첫 번째 장치를 확장하면, 이 테스트의 첫 번째 반복이라는 것을 알려주는 반복 라벨이 있습니다.

00:03:38.000 --> 00:03:46.000
허. 그리고 내가 다른 모든 행을 확장할 때, 주장 실패는 모두 동일하며, 이 마지막 테스트는 통과했다.

00:03:46.000 --> 00:03:52.000
나는 모든 테스트가 하나의 장치뿐만 아니라 지속적으로 통과할 것으로 예상했다.

00:03:52.000 --> 00:03:55.000
나는 이 실패를 현지에서 재현하려고 노력할 것이다.

00:03:55.000 --> 00:03:59.000
testFlavors가 있는 우리 파일로 가자.

00:03:59.000 --> 00:04:03.000
나는 우리의 테스트를 위해 테스트 다이아몬드를 Control-클릭할 것이다.

00:04:03.000 --> 00:04:11.000
메뉴에서 "testFlavors()"를 반복해서 실행하여 테스트 반복 대화상자를 불러올 것입니다.

00:04:11.000 --> 00:04:19.000
여기서 반복의 중지 조건을 선택하고, 최대 반복을 설정하고, 실패 시 일시 정지와 같은 다른 옵션을 선택할 수 있습니다.

00:04:19.000 --> 00:04:30.000
클라우드 보고서에서 발생한 문제를 재현하고 싶기 때문에, 최대 반복을 거치고 100으로 유지하도록 정지 조건을 설정하고 있습니다.

00:04:30.000 --> 00:04:36.000
이제 나는 시험을 볼 거야.

00:04:36.000 --> 00:04:39.000
오, 예이! 그 시험은 현지에서 실패했다.

00:04:39.000 --> 00:04:47.000
실패 주석을 클릭하면, Xcode Cloud에서 발생한 것과 동일한 오류가 표시되며, 100번 중 4번 실패했습니다.

00:04:47.000 --> 00:04:51.000
좋아! 나는 이제 이 문제를 디버깅할 수 있다.

00:04:51.000 --> 00:05:03.000
testFlavors에 대한 테스트 다이아몬드를 다시 Control-클릭하고, "testFlavors()" 실행을 반복해서 선택할 것입니다... 하지만 이번에는 실패 시 중지를 사용하여 문제가 발생했을 때 문제를 디버깅할 수 있습니다.

00:05:03.000 --> 00:05:12.000
고맙게도, Xcode는 자동으로 실패 시 일시 정지를 선택하므로 디버거에서 오류를 잡을 수 있습니다.

00:05:12.000 --> 00:05:16.000
좋아, 우리는 그 문제를 알아챘어.

00:05:16.000 --> 00:05:30.000
그리고 나는 우리가 트럭의 맛과 불일치를 보고 있다는 것을 알고 있으므로, 디버거에 있는 우리의 트럭 물체를 살펴볼 것이다.

00:05:30.000 --> 00:05:37.000
우리가 이미 prepareFlavors라고 불렀기 때문에 맛이 33이어야 할 때 맛이 0이라는 것이 이상해 보인다.

00:05:37.000 --> 00:05:41.000
나는 우리가 이 완성 핸들러 안에서 그것을 해냈는지 궁금하다.

00:05:41.000 --> 00:05:48.000
중단점을 추가하고 계속을 클릭하세요.

00:05:48.000 --> 00:05:54.000
흠, 그건 잘못된 것 같아.

00:05:54.000 --> 00:06:05.000
오, 그 성취는 내부 prepareFlavors completionHandler가 아니라 외부 완성 핸들러에서 불린다.

00:06:05.000 --> 00:06:15.000
이것은 여러 completionHandlers가 있는 비동기 이벤트와 올바른 장소에서 충족되지 않는 기대로 인한 상당히 간단한 버그입니다.

00:06:15.000 --> 00:06:22.000
Swift 5.5의 async/await에 대한 XCTest의 지원을 통해 이 테스트를 단순화하여 다시는 발생하지 않도록 할 수 있습니다.

00:06:22.000 --> 00:06:40.000
이 테스트를 async/await를 사용하도록 변환하려면, 메소드 헤더에 "async throws"를 추가할 것입니다.

00:06:40.000 --> 00:06:58.000
나는 트럭 창고에서 아이스크림 트럭을 얻는 "기다림" 버전을 사용할 것이다.

00:06:58.000 --> 00:07:07.000
나는 prepareFlavors의 "await" 버전을 사용할 것이다.

00:07:07.000 --> 00:07:14.000
나는 같은 주장을 유지할 것이지만, 트럭은 더 이상 선택 사항이 아니다.

00:07:14.000 --> 00:07:18.000
이 테스트가 수정되었는지 확인하기 위해 이 테스트를 한 번 더 실행합시다.

00:07:18.000 --> 00:07:36.000
Control-클릭하고 "testFlavors()"를 반복해서 실행하고... 다시 한 번 최대 반복을 중지 조건으로 선택합니다.

00:07:36.000 --> 00:07:39.000
야호! 그 시험은 100번 통과했다.

00:07:39.000 --> 00:07:46.000
나는 이제 이것이 수정되었다고 확신하며, 테스트 계획에서 실패에 대한 재시도를 제거하고 변경을 커밋할 준비가 되었습니다.

00:07:46.000 --> 00:07:55.000
그래서 우리는 책상에서 이것을 사용하는 방법과 테스트 계획에서 구성하여 CI에서 테스트를 반복적으로 실행하는 한 가지 방법을 더 잘 이해했습니다.

00:07:55.000 --> 00:08:01.000
CLI를 사용하여 데모와 같이 반복으로 테스트를 실행하는 또 다른 방법에 대해 이야기해 봅시다.

00:08:01.000 --> 00:08:08.000
Xcodebuild를 직접 실행할 때, 테스트 계획 설정을 재정의하는 xcodebuild 플래그를 추가할 수 있습니다.

00:08:08.000 --> 00:08:22.000
-Test-iterations를 숫자로 통과하여 고정된 횟수의 테스트를 실행하거나 -retry-tests-on-failure 또는 -run-tests-until-failure와 결합하여 다른 정지 조건 중 하나와 함께 사용하십시오.

00:08:22.000 --> 00:08:35.000
Xcodebuild로 데모에서와 동일하게 테스트를 실행하려면, 테스트를 실행하는 데 사용되는 기본 xcodebuild 명령으로 시작하고 플래그 -test-iterations를 100으로 설정하고 -run-tests-until-failure를 추가하십시오.

00:08:35.000 --> 00:08:42.000
요약하자면, 테스트 반복을 신뢰할 수 없는 코드를 진단하는 데 도움이 되는 도구로 사용하세요.

00:08:42.000 --> 00:08:48.000
일관성 없는 테스트를 처리하는 방법에 대한 자세한 내용은 "XCTest에서 예상되는 실패를 받아들이세요"를 보세요.

00:08:48.000 --> 00:08:53.000
스위프트 비동기에 대해 더 알아보려면, "스위프트에서 비동기/기다림을 만나세요"를 확인하세요.

00:08:53.000 --> 00:08:54.000
봐줘서 고마워.

00:08:54.000 --> 23:59:59.000
[타격적인 음악].

