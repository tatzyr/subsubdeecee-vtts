WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Itai Rom: "고급 Xcode 클라우드 워크플로우 사용자 정의"에 오신 것을 환영합니다.

00:00:12.000 --> 00:00:17.000
제 이름은 이타이이고, 나중에 제 동료인 얀과 합류할 것입니다.

00:00:17.000 --> 00:00:20.000
올해 우리는 Xcode Cloud를 소개합니다.

00:00:20.000 --> 00:00:27.000
Xcode Cloud는 Xcode에 내장된 지속적인 통합 및 전달 서비스이며 Apple 개발자 전용으로 설계되었습니다.

00:00:27.000 --> 00:00:34.000
다른 세션에서는 앱을 지속적으로 구축, 테스트 및 배포하기 위해 엔드투엔드 워크플로우를 설정하는 방법을 보여주었습니다.

00:00:34.000 --> 00:00:42.000
이 세션에서, 우리는 팀의 요구에 더 잘 맞도록 Xcode Cloud를 사용자 정의하는 데 사용할 수 있는 몇 가지 고급 기능에 대해 이야기할 것입니다.

00:00:42.000 --> 00:00:52.000
Xcode Cloud는 개발자 웹사이트, TestFlight 및 App Store Connect와 같은 Apple 개발자 도구 및 서비스와 즉시 통합되도록 설계되었습니다.

00:00:52.000 --> 00:01:00.000
또한 모든 주요 Git 기반 소스 제어 제공 업체, 심지어 메시징을 위한 슬랙과 같은 필수적이고 일상적인 개발 도구와 통합됩니다.

00:01:00.000 --> 00:01:07.000
그러나, 파이프라인의 핵심 부분인 사내 또는 독점 도구 및 기타 외부 서비스가 있을 수 있습니다.

00:01:07.000 --> 00:01:15.000
이 세션에서는 이러한 도구 및 서비스와 잘 통합되도록 Xcode Cloud를 사용자 정의할 수 있는 방법을 시연할 것입니다.

00:01:15.000 --> 00:01:18.000
우리는 네 가지 사용자 지정 주제를 다룰 것이다.

00:01:18.000 --> 00:01:23.000
먼저, 우리는 환경 변수를 사용하여 빌드에 추가 정보를 전달하는 것에 대해 논의할 것입니다.

00:01:23.000 --> 00:01:29.000
빌드에서 실행하는 작업에서 스크립트를 사용하여 사용자 지정 명령을 실행하는 방법을 배울 것입니다.

00:01:29.000 --> 00:01:33.000
그리고 빌드 중에 필요한 다른 소스 저장소를 추가하는 방법.

00:01:33.000 --> 00:01:39.000
그리고 마지막으로, 웹훅을 사용하여 Xcode Cloud를 팀이 사용하는 다른 시스템과 통합하는 방법.

00:01:39.000 --> 00:01:44.000
다룰 것이 많으니, 환경 변수로 바로 들어가 봅시다.

00:01:44.000 --> 00:01:53.000
프로젝트에 대한 워크플로우를 계획하고 구성할 때, 실행 중인 워크플로우에 따라 빌드의 동작이 약간 다르기를 원할 때가 있을 수 있습니다.

00:01:53.000 --> 00:02:00.000
예를 들어, 앱이 API 서비스에 의존하는 경우, 테스트에서 프로덕션이 아닌 스테이징 환경을 사용하도록 할 수 있습니다.

00:02:00.000 --> 00:02:06.000
이 경우, API 서비스에 대한 다른 URL을 테스트에 전달하고 싶습니다.

00:02:06.000 --> 00:02:09.000
환경 변수는 당신이 바로 그것을 할 수 있게 해준다.

00:02:09.000 --> 00:02:17.000
그것들은 빌드의 동작을 더 제어하는 데 사용할 수 있는 몇 가지 정보를 정의할 수 있는 간단한 키-값 쌍입니다.

00:02:17.000 --> 00:02:22.000
워크플로우의 환경 섹션에서 바로 필요한 모든 환경 변수를 구성할 수 있습니다.

00:02:22.000 --> 00:02:29.000
그것들은 워크플로우 구성의 일부이기 때문에, 소스 저장소에 추가 정보를 커밋할 필요가 없습니다.

00:02:29.000 --> 00:02:37.000
워크플로우가 실행될 때마다, 정의한 변수는 작업을 실행하는 환경에서 설정됩니다.

00:02:37.000 --> 00:02:44.000
API 키나 액세스 토큰과 같은 민감한 정보의 경우, 비밀 환경 변수를 구성할 수 있습니다.

00:02:44.000 --> 00:02:47.000
비밀 환경 변수는 안전하게 처리된다.

00:02:47.000 --> 00:02:55.000
그것들은 항상 암호화되고 안전하게 저장되며, 해독된 값은 작업을 실행하는 데 사용되는 임시 환경에서만 사용할 수 있습니다.

00:02:55.000 --> 00:03:03.000
값은 또한 로그에서 편집되며, 비비밀 변수에 대해 할 수 있는 것처럼 워크플로우 편집기에서 볼 수 없습니다.

00:03:03.000 --> 00:03:05.000
환경 변수를 비밀로 만드는 것은 쉽다.

00:03:05.000 --> 00:03:09.000
환경 변수 테이블에서 "비밀" 확인란을 체크하세요.

00:03:09.000 --> 00:03:20.000
환경 변수의 값은 보기에서 숨겨지고 변경 사항을 저장하면 안전하게 저장되며 더 이상 워크플로우 편집기에서 볼 수 없습니다.

00:03:20.000 --> 00:03:26.000
환경 변수는 행동을 사용자 정의하고 워크플로우에 추가 정보를 전달할 수 있는 편리한 메커니즘을 제공합니다.

00:03:26.000 --> 00:03:32.000
그것들은 우리의 다음 고급 기능인 사용자 지정 스크립트와 함께 훨씬 더 강력합니다.

00:03:32.000 --> 00:03:41.000
Xcode Cloud의 워크플로우와 Xcode의 구성표 사이에서, 워크플로우에서 실행하려는 작업을 설정하는 방법에 많은 유연성이 있습니다.

00:03:41.000 --> 00:03:50.000
하지만 때로는 작업 중에 사용자 지정 논리나 추가 명령을 실행해야 하며, 사용자 지정 스크립트는 이를 달성할 수 있는 강력하고 유연한 방법을 제공합니다.

00:03:50.000 --> 00:03:55.000
사용자 지정 스크립트는 소스 저장소에 작성하고 포함하는 셸 스크립트입니다.

00:03:55.000 --> 00:03:59.000
사용자 지정 스크립트는 워크플로우의 각 작업에서 실행됩니다.

00:03:59.000 --> 00:04:08.000
사용 가능한 스크립트에는 세 가지 유형이 있습니다: 포스트 클론 스크립트, pre-Xcodebuild 스크립트, 그리고 post-Xcodebuild 스크립트.

00:04:08.000 --> 00:04:19.000
Xcode Cloud가 작업을 실행할 때마다 일련의 단계를 수행하고 이름에서 알 수 있듯이 각 사용자 지정 스크립트는 작업의 특정 지점에서 단계로 실행됩니다.

00:04:19.000 --> 00:04:26.000
먼저, Xcode Cloud는 임시 환경을 설정하고 기본 저장소에서 소스 코드를 복제합니다.

00:04:26.000 --> 00:04:30.000
그 후, Xcode Cloud는 복제 후 스크립트를 실행한다.

00:04:30.000 --> 00:04:36.000
다른 모든 소스 종속성을 해결한 후, Xcode 클라우드는 pre-Xcodebuild 스크립트를 실행합니다.

00:04:36.000 --> 00:04:41.000
다음으로, Xcode Cloud는 작업에 해당하는 Xcodebuild 명령을 실행합니다.

00:04:41.000 --> 00:04:49.000
Xcodebuild 단계가 완료되면, Xcode Cloud는 post-Xcodebuild 스크립트를 실행하고 이전에 생성된 아티팩트를 저장합니다.

00:04:49.000 --> 00:05:02.000
워크플로우에 여러 작업(예: 여러 빌드 작업) 또는 빌드, 테스트, 분석 및 보관 작업이 포함된 경우, Xcode Cloud는 각 작업에 대해 적절한 시간에 사용자 지정 스크립트를 실행합니다.

00:05:02.000 --> 00:05:05.000
Xcode Cloud에 사용자 지정 스크립트를 추가하는 것은 쉽습니다.

00:05:05.000 --> 00:05:16.000
"Ci_scripts"라는 폴더에 적절한 이름의 셸 스크립트를 추가하고, 이 폴더를 워크플로우에서 사용 중인 프로젝트 파일이나 작업 공간과 같은 수준에 배치하기만 하면 됩니다.

00:05:16.000 --> 00:05:25.000
사용자 지정 스크립트는 소스 코드의 일부이기 때문에, 풀 리퀘스트에서 스크립트 변경을 테스트하거나 다른 분기에서 동작을 사용자 정의할 수도 있습니다.

00:05:25.000 --> 00:05:33.000
Xcode Cloud가 당신의 행동을 실행할 때, 적절한 시간에 각 스크립트의 존재를 찾고 존재하는 경우 실행합니다.

00:05:33.000 --> 00:05:36.000
사용자 지정 스크립트를 실행하기 위해 워크플로우를 구성할 필요가 없습니다.

00:05:36.000 --> 00:05:39.000
스크립트가 거기에 있다면, 그것들은 실행될 것이다.

00:05:39.000 --> 00:05:52.000
Xcode Cloud가 스크립트를 찾고 실행하려면 ci_scripts 폴더의 이름과 내부의 스크립트가 이 명명 규칙과 정확히 일치해야 합니다.

00:05:52.000 --> 00:06:00.000
워크플로우에서 구성한 환경 변수는 비밀 환경 변수를 포함하여 사용자 지정 스크립트에서 사용할 수 있습니다.

00:06:00.000 --> 00:06:05.000
또한, Xcode Cloud는 다양한 유용한 환경 변수를 제공합니다.

00:06:05.000 --> 00:06:15.000
이러한 변수를 사용하여 스크립트에 흐름 제어를 추가할 수 있으므로, 실행하려는 명령이 워크플로우 중 올바른 지점에서 실행되도록 할 수 있습니다.

00:06:15.000 --> 00:06:26.000
예를 들어, iOS, macOS, tvOS 또는 watchOS에서 작업이 실행 중인지 확인하려면 CI_PRODUCT_PLATFORM 변수의 값을 사용할 수 있습니다.

00:06:26.000 --> 00:06:43.000
더 표적화된 시나리오에서 - 아마도 특정 워크플로우의 아카이브 작업 중에만 실행하고 싶은 명령이 있을 것입니다 - 명령을 실행하기 전에 CI_XCODEBUILD_ACTION 및 CI_WORKFLOW 변수가 아카이브 작업 및 특정 워크플로우와 일치하는지 확인할 수 있습니다.

00:06:43.000 --> 00:06:46.000
사용자 지정 스크립트가 작동하는 것을 봅시다.

00:06:46.000 --> 00:06:49.000
우리 팀은 Fruta라는 스무디 주문 앱을 작업한다.

00:06:49.000 --> 00:06:57.000
"Xcode Cloud 워크플로우 탐색" 세션에서는 Fruta와 같은 앱을 구축, 테스트 및 배포하기 위해 워크플로우를 설정하는 방법을 배웠습니다.

00:06:57.000 --> 00:07:02.000
우리는 풀 리퀘스트를 만들 때마다 Xcode Cloud를 사용하여 구축하고 테스트합니다.

00:07:02.000 --> 00:07:11.000
우리는 또한 풀 리퀘스트에서 빌드를 TestFlight를 통해 팀 구성원에게 배포하여 코드가 병합되기 전에 변경 사항을 확인하고 서명할 수 있도록 합니다.

00:07:11.000 --> 00:07:18.000
오늘, 저는 팀원들이 장치에 설치된 빌드가 풀 리퀘스트에서 나온 것인지 더 쉽게 알 수 있도록 하고 싶습니다.

00:07:18.000 --> 00:07:24.000
풀 리퀘스트에서 빌드할 때 다른 앱 아이콘을 사용하여 그렇게 할 수 있습니다.

00:07:24.000 --> 00:07:28.000
짐작하셨겠지만, 사용자 지정 스크립트를 사용하면 이것을 쉽게 설정할 수 있습니다.

00:07:28.000 --> 00:07:32.000
어떻게 하는지 보자.

00:07:32.000 --> 00:07:35.000
Xcode에서, 나는 이미 Fruta 프로젝트를 열었다.

00:07:35.000 --> 00:07:40.000
사용자 지정 스크립트를 추가하기 전에, 먼저 프로젝트에 ci_scripts 폴더를 추가해야 합니다.

00:07:40.000 --> 00:07:51.000
프로젝트 네비게이터에서 내 프로젝트를 선택하고 하단의 더하기 버튼을 클릭한 다음 새 그룹을 선택하여 이것을 할 수 있습니다.

00:07:51.000 --> 00:07:55.000
폴더 이름인 ci_scripts를 입력하겠습니다.

00:07:55.000 --> 00:08:09.000
다음으로, 디자이너가 만든 베타 앱 아이콘 세트를 ci_scripts 폴더에 추가하여 사용자 지정 스크립트가 빌드 중에 제자리에 바꿀 수 있도록 할 것입니다.

00:08:09.000 --> 00:08:17.000
그렇게 하려면, 파인더에서 ci_scripts 폴더로 드래그하겠습니다.

00:08:17.000 --> 00:08:24.000
시트에서 선택한 대상의 선택을 취소하고 마침을 클릭하겠습니다.

00:08:24.000 --> 00:08:27.000
마지막으로, pre-Xcodebuild 스크립트를 추가해 봅시다.

00:08:27.000 --> 00:08:36.000
이 스크립트는 Xcodebuild 명령 이전에 실행되며, 적절한 경우 Fruta의 기본 앱 아이콘과 베타 앱 아이콘 세트를 교체하는 데 사용할 것입니다.

00:08:36.000 --> 00:08:48.000
이미 사용할 스크립트를 만들었으므로, ci_scripts 폴더에 추가하기만 하면 됩니다.

00:08:48.000 --> 00:08:57.000
다시 말하지만, 시트에서 대상의 선택을 취소하고 마침을 클릭하겠습니다.

00:08:57.000 --> 00:09:03.000
이제 내 대본이 제자리에 있으니, 그것이 무엇을 하는지 자세히 살펴봅시다.

00:09:03.000 --> 00:09:09.000
먼저, 빌드가 풀 리퀘스트에서 나올 때만 앱 아이콘이 교체되는지 확인하고 싶습니다.

00:09:09.000 --> 00:09:16.000
Xcode Cloud가 제공하는 환경 변수 중 하나를 사용하여 빌드가 풀 리퀘스트인지 아닌지 런타임에 확인할 수 있습니다.

00:09:16.000 --> 00:09:29.000
이를 위해 사용할 수 있는 풀 리퀘스트와 관련된 다양한 환경 변수가 있지만, 이 경우 CI_PULL_REQUEST_NUMBER 환경 변수가 설정되어 있는지 확인할 것입니다.

00:09:29.000 --> 00:09:34.000
또한, 저는 베타 앱 아이콘이 TestFlight에 배포되는 빌드에만 사용되기를 원합니다.

00:09:34.000 --> 00:09:40.000
Xcode Cloud가 TestFlight에 빌드를 배포할 때마다, 항상 프로젝트의 아카이브를 먼저 구축합니다.

00:09:40.000 --> 00:09:51.000
그래서 이것을 확인하는 좋은 방법은 CI_XCODEBUILD_ACTION 환경 변수의 값이 "아카이브"인지 확인하는 것입니다.

00:09:51.000 --> 00:10:06.000
이 두 환경 변수 모두 예상 값을 가지고 있다면, 기존 앱 아이콘 세트를 제거하고 rm 및 mv 명령을 사용하여 베타 앱 아이콘 세트로 교체합니다.

00:10:06.000 --> 00:10:16.000
또한, CI_WORKSPACE 환경 변수를 사용하여 기본 및 베타 앱 아이콘 세트 모두에 대한 올바른 경로를 구성하고 있습니다.

00:10:16.000 --> 00:10:23.000
남은 일은 이러한 변경 사항으로 풀 리퀘스트를 열고 Xcode Cloud가 Fruta를 구축하고 TestFlight에 배포할 때까지 기다리는 것뿐입니다.

00:10:23.000 --> 00:10:28.000
지금 그 과정을 거치는 대신, 나는 미리 빌드를 준비했다.

00:10:28.000 --> 00:10:33.000
여기서, Xcode Cloud는 내 풀 리퀘스트 브랜치에서 Fruta를 구축하고 배포했다.

00:10:33.000 --> 00:10:39.000
내 휴대폰의 TestFlight 앱에서, 내 빌드가 방금 추가한 새로운 베타 앱 아이콘을 사용하고 있는지 확인할 수 있습니다.

00:10:39.000 --> 00:10:48.000
이제 풀 리퀘스트를 병합할 수 있고 팀의 모든 사람들이 자신의 풀 리퀘스트 빌드에서 동일한 베타 앱 아이콘을 보기 시작할 것입니다.

00:10:48.000 --> 00:10:54.000
이제 Xcode Cloud에서 사용자 지정 스크립트를 사용하는 방법을 보았으므로, 그것에 대해 주의해야 할 몇 가지 중요한 사항이 있습니다.

00:10:54.000 --> 00:11:04.000
사용자 지정 스크립트의 표준 출력과 표준 오류는 실행된 작업에 대한 로그에 포함되어 있으며, 아티팩트 탭에서 다운로드할 수도 있습니다.

00:11:04.000 --> 00:11:14.000
스크립트가 예상대로 실행되지 않는 것 같다면, 올바르게 이름을 지정하고 프로젝트나 작업 공간과 함께 ci_scripts 폴더에 배치했는지 다시 확인하십시오.

00:11:14.000 --> 00:11:21.000
사용자 지정 스크립트의 오류 문제를 해결하는 데 도움이 되는 유용한 로깅과 복원력을 추가하십시오.

00:11:21.000 --> 00:11:30.000
예를 들어, 스크립트가 외부 서비스에 네트워크 요청을 하는 경우, 자세한 로깅이 활성화된 상태에서 해당 요청을 다시 시도하는 논리를 포함할 수 있습니다.

00:11:30.000 --> 00:11:34.000
또한, Xcode Cloud는 스크립트의 종료 코드를 존중합니다.

00:11:34.000 --> 00:11:41.000
따라서 스크립트가 0이 아닌 값으로 종료되면, Xcode Cloud는 이것을 실패로 간주하고 전반적인 작업에 실패할 것입니다.

00:11:41.000 --> 00:11:51.000
Xcode Cloud가 나머지 작업을 계속하기 전에 스크립트에서 실행해야 하는 명령이 성공할 수 있도록 이를 활용할 수 있습니다.

00:11:51.000 --> 00:11:57.000
마지막으로, 테스트 작업에서 테스트를 구축하고 실행하는 데 여러 환경이 사용된다는 점에 유의해야 합니다.

00:11:57.000 --> 00:12:03.000
테스트를 구축하는 데 사용되는 환경만 기본적으로 소스 코드를 복제할 수 있습니다.

00:12:03.000 --> 00:12:07.000
테스트를 실행하는 환경에는 소스 코드가 복제되지 않습니다.

00:12:07.000 --> 00:12:10.000
그들은 ci_scripts 폴더만 사용할 수 있을 것이다.

00:12:10.000 --> 00:12:24.000
결과적으로, 복제 후 스크립트는 이러한 환경에서 실행되지 않으며 사용자 지정 스크립트와 다른 셸 스크립트 및 작은 도구와 같은 종속성은 ci_scripts 폴더에 완전히 포함되어야 합니다.

00:12:24.000 --> 00:12:30.000
사용자 지정 스크립트와 환경 변수를 사용하면 워크플로우의 동작을 사용자 정의할 수 있는 두 가지 강력한 도구가 있습니다.

00:12:30.000 --> 00:12:41.000
다음으로, 제 동료 Yan은 워크플로우에서 Swift 패키지 및 기타 종속성을 사용할 수 있도록 Xcode Cloud와 함께 추가 저장소를 사용하는 방법을 보여줄 것입니다.

00:12:41.000 --> 00:12:42.000
옌 황: 고마워, 이타이.

00:12:42.000 --> 00:12:46.000
많은 프로젝트가 도구, 라이브러리 및 프레임워크를 사용하여 구축된다.

00:12:46.000 --> 00:12:56.000
이러한 종속성은 종종 프로젝트 간에 공유되는 Git 저장소에서 호스팅되며, 프로젝트를 성공적으로 구축하려면 검색해야 합니다.

00:12:56.000 --> 00:13:01.000
Xcode Cloud는 이러한 추가 저장소를 자동으로 추가하는 데 도움을 준다.

00:13:01.000 --> 00:13:09.000
예를 들어, 우리는 사용자가 친구를 초대하고 Fruta 앱에 음료를 공유할 수 있는 새로운 기능을 추가하고 싶습니다.

00:13:09.000 --> 00:13:12.000
다른 팀은 비슷한 기능을 구현했다.

00:13:12.000 --> 00:13:21.000
그래서 우리는 우리 팀과 공유된 개인 Git 저장소에서 호스팅되는 "InvitationsKit"이라는 패키지를 재사용할 것입니다.

00:13:21.000 --> 00:13:25.000
이 패키지를 추가하는 방법을 봅시다.

00:13:25.000 --> 00:13:29.000
여기 Fruta 프로젝트와 함께 Xcode에 있습니다.

00:13:29.000 --> 00:13:35.000
파일 메뉴에서 패키지를 추가하고 패키지 추가를 선택할 수 있습니다.

00:13:35.000 --> 00:13:43.000
저는 이미 우리 조직 내의 패키지 목록이 포함된 Nature Labs 공유 패키지 컬렉션을 가지고 있습니다.

00:13:43.000 --> 00:13:49.000
InvitationsKit을 선택하고 패키지 추가를 클릭할 것입니다.

00:13:49.000 --> 00:14:11.000
이제 종속성이 추가되었으므로, 소스 제어 메뉴에서 이 새로운 종속성을 커밋하고 변경 사항을 내 브랜치로 푸시할 것입니다.

00:14:11.000 --> 00:14:18.000
우리는 모든 브랜치에서 새 커밋을 받을 때 새 빌드를 시작할 Xcode Cloud에서 워크플로우를 설정합니다.

00:14:18.000 --> 00:14:21.000
그래서 이 새로운 커밋은 새로운 빌드를 시작해야 한다.

00:14:21.000 --> 00:14:32.000
이 종속성을 추가하는 것은 이번이 처음이기 때문에, Xcode Cloud가 InvitationsKit 저장소에 액세스할 수 없기 때문에 빌드가 실패할 것으로 예상합니다.

00:14:32.000 --> 00:14:37.000
하지만 Xcode Cloud는 이 문제를 해결할 수 있는 쉬운 UI를 제공합니다.

00:14:37.000 --> 00:14:43.000
App Store Connect의 Xcode Cloud로 가서 이 새로운 빌드를 살펴봅시다.

00:14:43.000 --> 00:14:46.000
예상대로, 빌드는 실패했다.

00:14:46.000 --> 00:14:56.000
Xcode Cloud는 저장소에 액세스하는 데 문제가 있음을 나타내는 경고 배너를 표시하고 액세스 권한을 부여할 수 있는 옵션을 제공합니다.

00:14:56.000 --> 00:15:03.000
저는 계속해서 저장소 관리 버튼을 클릭하세요.

00:15:03.000 --> 00:15:16.000
설정 페이지로 이동하여 invitationsKit 저장소 링크를 가리킨 다음 그랜트를 클릭할 수 있습니다.

00:15:16.000 --> 00:15:23.000
소스 제어 서비스에 따라, 저장소에 액세스하기 위해 Xcode Cloud를 승인하도록 지시받을 수 있습니다.

00:15:23.000 --> 00:15:38.000
나는 Github에서 InvitationsKit에 대한 액세스를 제공했다.

00:15:38.000 --> 00:15:43.000
이제, Xcode Cloud를 되돌아보면, 액세스가 부여된 것을 보여준다.

00:15:43.000 --> 00:15:50.000
이제 빌드를 다시 실행할 수 있습니다.

00:15:50.000 --> 00:15:54.000
우리는 이 빌드가 이번에 통과할 것으로 예상한다.

00:15:54.000 --> 00:16:02.000
설정 아래의 추가 저장소 섹션으로 돌아가서 연결된 모든 저장소를 찾을 수 있습니다.

00:16:02.000 --> 00:16:07.000
더 이상 사용되지 않는 경우 거기에서 액세스를 거부할 수도 있습니다.

00:16:07.000 --> 00:16:12.000
Xcode Cloud는 빌드 중에 새로 참조된 저장소를 감지합니다.

00:16:12.000 --> 00:16:22.000
Xcode Cloud가 액세스할 수 없는 종속성을 추가할 때, UI는 이 문제를 빠르고 쉽게 해결할 수 있는 방법을 제공합니다.

00:16:22.000 --> 00:16:32.000
이것은 사용자 지정 스크립트 내부의 저장소를 복제하거나 Git 하위 모듈을 참조하는 것을 포함한 모든 Git 작업에 유효합니다.

00:16:32.000 --> 00:16:37.000
이것은 다른 모든 의존성 관리 도구에도 적용된다.

00:16:37.000 --> 00:16:44.000
이 데모에서, 우리는 새로운 스위프트 패키지 컬렉션 기능을 사용하여 추가 패키지를 포함했습니다.

00:16:44.000 --> 00:16:52.000
그것에 대해 더 알고 싶다면, "컬렉션을 사용하여 스위프트 패키지를 발견하고 큐레이팅하세요"를 확인하세요.

00:16:52.000 --> 00:16:58.000
지금까지 우리는 Xcode Cloud 내에서 빌드를 사용자 정의하는 방법을 시연했습니다.

00:16:58.000 --> 00:17:03.000
하지만 때때로 당신과 당신의 팀은 외부 서비스를 통해 협력하고 싶어할 수도 있습니다.

00:17:03.000 --> 00:17:08.000
예를 들어, 새 빌드가 준비되면 베타 테스터에게 알리고 싶을 수도 있습니다.

00:17:08.000 --> 00:17:12.000
이곳은 웹훅이 도움을 줄 수 있는 곳이다.

00:17:12.000 --> 00:17:17.000
웹훅은 Xcode Cloud가 서비스와 통신할 수 있는 방법을 제공합니다.

00:17:17.000 --> 00:17:28.000
빌드 수명 주기의 여러 단계에서 전송되는 풍부한 페이로드를 통해 워크플로우를 더욱 자동화하고 팀의 협업을 개선할 수 있습니다.

00:17:28.000 --> 00:17:31.000
그것에 대해 더 알아보기 위해 뛰어들자.

00:17:31.000 --> 00:17:39.000
Xcode Cloud에서 웹훅을 설정하여 빌드의 세 가지 단계에서 실시간 업데이트를 받을 수 있습니다.

00:17:39.000 --> 00:17:56.000
먼저, 빌드가 생성될 때, 코드를 푸시하거나 수동으로 빌드를 시작했기 때문에; 그런 다음, 빌드가 시작될 때; 마지막으로, 빌드가 완료되었을 때, 빌드가 실패했는지 성공했는지에 상관없이.

00:17:56.000 --> 00:18:05.000
Xcode Cloud에서 웹훅을 쉽게 추가할 수 있는 프로젝트에 새로운 웹훅을 추가하는 방법을 봅시다.

00:18:05.000 --> 00:18:08.000
왼쪽 열의 설정 탭을 클릭하세요.

00:18:08.000 --> 00:18:14.000
웹훅을 클릭한 다음 더하기 버튼을 클릭하세요.

00:18:14.000 --> 00:18:25.000
그런 다음 웹훅의 이름과 HTTP 요청을 수신하고 처리할 수 있는 앱이나 서비스의 URL을 입력하도록 요청할 것입니다.

00:18:25.000 --> 00:18:28.000
그런 다음, 저장을 클릭하세요.

00:18:28.000 --> 00:18:33.000
Xcode Cloud를 사용하면 제품당 최대 5개의 웹훅을 만들 수 있습니다.

00:18:33.000 --> 00:18:40.000
쉽게 식별할 수 있도록 각 웹훅에 고유한 이름을 제공해야 합니다.

00:18:40.000 --> 00:19:01.000
엔드포인트로 전송되는 페이로드는 App Store Connect 애플리케이션, 워크플로우, 제품, 빌드 등과 같은 빌드 및 제품에 대한 정보가 포함된 JSON Blob입니다.

00:19:01.000 --> 00:19:08.000
HttpRequest를 통해 전송되는 페이로드를 수신하고 처리하려면 앱이나 서비스를 설정해야 합니다.

00:19:08.000 --> 00:19:16.000
AWS Lambda에서 Swift를 사용하여 이를 달성하는 방법에 대한 샘플 코드를 살펴봅시다.

00:19:16.000 --> 00:19:19.000
먼저, 우리는 요청을 받습니다.

00:19:19.000 --> 00:19:23.000
그런 다음 페이로드를 JSON 객체로 디코딩하세요.

00:19:23.000 --> 00:19:27.000
그런 다음 워크플로우의 이름과 빌드 상태를 확인합니다.

00:19:27.000 --> 00:19:40.000
워크플로우가 릴리스 워크플로우이고 빌드 상태가 성공했다면, 테스터나 베타 사용자가 테스트할 수 있다는 것을 알리기 위해 트위터에 메시지를 게시할 것입니다.

00:19:40.000 --> 00:19:48.000
마지막으로, 우리는 웹훅 요청이 성공적으로 처리되었음을 확인하기 위해 200 상태 코드를 반환할 것입니다.

00:19:48.000 --> 00:19:59.000
스위프트 서버리스 기능 실행에 대해 더 알고 싶다면, WWDC 2020에서 이 세션을 확인하세요.

00:19:59.000 --> 00:20:06.000
엔드포인트가 성공적인 상태 코드를 반환하지 않으면, Xcode Cloud는 요청을 다시 보내려고 시도할 것입니다.

00:20:06.000 --> 00:20:14.000
Xcode Cloud를 사용하면 엔드포인트로 전달된 웹훅의 콘텐츠를 쉽게 검사할 수 있습니다.

00:20:14.000 --> 00:20:25.000
App Store Connect에서 Xcode Cloud로 이동하여 설정과 웹훅을 클릭하고 검사하려는 웹훅을 선택할 수 있습니다.

00:20:25.000 --> 00:20:32.000
그런 다음 다른 타임 스탬프의 배송 목록을 보여주고, 관심 있는 것을 선택하세요.

00:20:32.000 --> 00:20:39.000
그것은 당신에게 당신의 서비스로 전송된 요청과 수신된 응답을 보여줍니다.

00:20:39.000 --> 00:20:43.000
Xcode Cloud 웹훅으로 할 수 있는 일이 정말 많습니다.

00:20:43.000 --> 00:20:46.000
여기 몇 가지 추가 예가 있습니다.

00:20:46.000 --> 00:21:03.000
버그 확인 시스템에서 문제를 자동으로 만들거나 해결할 수 있습니다. 빌드가 실패할 때 페이징 시스템에 알림을 보내고, 복잡한 릴리스 워크플로우의 일부로 다운스트림 빌드를 시작할 수 있습니다.

00:21:03.000 --> 00:21:11.000
웹훅의 철저한 콘텐츠를 사용하여 워크플로우를 확장할 때, 하늘은 한계입니다.

00:21:11.000 --> 00:21:14.000
우리가 이 세션에서 배운 것을 요약해 봅시다.

00:21:14.000 --> 00:21:18.000
먼저, 우리는 당신의 빌드를 위한 환경 변수를 전달하는 방법에 대해 배웠습니다.

00:21:18.000 --> 00:21:28.000
그런 다음 빌드 프로세스를 사용자 정의하기 위해 스크립트를 설정하는 방법과 프로젝트의 추가 저장소로 작업하는 방법을 시연했습니다.

00:21:28.000 --> 00:21:36.000
마지막으로, 우리는 빌드 수명 주기의 여러 단계에서 Xcode Cloud에서 콜백을 받기 위해 웹훅을 설정하는 방법을 배웠습니다.

00:21:36.000 --> 00:21:40.000
우리는 이러한 기능이 팀의 일상적인 워크플로우를 향상시킬 수 있기를 바랍니다.

00:21:40.000 --> 00:21:41.000
봐줘서 고마워.

00:21:41.000 --> 23:59:59.000
♪

