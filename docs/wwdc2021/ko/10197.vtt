WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
"컬렉션을 사용하여 스위프트 패키지를 발견하고 큐레이팅하는" 세션에 오신 것을 환영합니다.

00:00:14.000 --> 00:00:22.000
Xcode 11에서 우리는 라이브러리를 소스 코드로 배포하는 간단한 접근 방식을 제공하는 Swift 패키지에 대한 지원을 도입했습니다.

00:00:22.000 --> 00:00:29.000
점점 더 많은 패키지가 게시됨에 따라, 우리는 특정 사용 사례에 맞는 패키지를 더 쉽게 발견할 수 있도록 하고 싶습니다.

00:00:29.000 --> 00:00:35.000
프로젝트에 패키지를 추가할 때, 개발자들은 라이선스와 같은 더 많은 정보를 보고 싶어 한다.

00:00:35.000 --> 00:00:40.000
그렇게 하기 위해, 우리는 메타데이터에 접근하는 표준화된 방법을 원한다.

00:00:40.000 --> 00:00:51.000
이것이 우리가 Xcode 13에서 다른 사람들과 공유할 수 있고 프로젝트에 패키지를 추가하기 위한 완전히 새롭고 개선된 경험을 유도하는 패키지 컬렉션, 큐레이팅된 패키지 목록을 도입하는 이유입니다.

00:00:51.000 --> 00:01:07.000
교육자와 커뮤니티 인플루언서는 코스 자료나 블로그 게시물과 함께 패키지 컬렉션을 게시하고, 패키지를 처음 사용할 때 장벽을 제거하고, 어떤 패키지가 특정 작업에 유용한지 결정하는 부담을 제거할 수 있습니다.

00:01:07.000 --> 00:01:16.000
기업은 컬렉션을 사용하여 내부 엔지니어링 팀의 의사 결정 공간을 좁힐 수 있으며, 신뢰할 수 있는 심사된 패키지 세트에 집중할 수 있습니다.

00:01:16.000 --> 00:01:19.000
먼저, 이야기에 대한 간략한 개요.

00:01:19.000 --> 00:01:25.000
우리는 데모로 시작한 다음, 컬렉션을 더 자세히 사용하는 방법을 살펴 봅니다.

00:01:25.000 --> 00:01:31.000
우리는 우리만의 컬렉션을 만들고, 또 다른 데모로 마무리할 것이다.

00:01:31.000 --> 00:01:37.000
Swift Numerics에 대한 블로그 게시물을 찾았고, Xcode에서 시도해 보고 싶습니다.

00:01:37.000 --> 00:01:47.000
게시물에서 첫 번째 예제를 복사하고 Xcode로 전환하여 코드를 붙여넣을 것입니다.

00:01:47.000 --> 00:01:52.000
내 프로젝트에 숫자 모듈이 없기 때문에 빌드 실패를 받고 있다.

00:01:52.000 --> 00:02:05.000
이전에는 내 프로젝트에 숫자 패키지를 추가하는 방법을 알아내기 위해 게시물로 돌아가야 했지만, Xcode 13에서는 오픈 소스 패키지의 기본 컬렉션을 제공하고 있기 때문에 편집기에서 바로 수정을 받으세요.

00:02:05.000 --> 00:02:15.000
이제 "검색"을 클릭하면 숫자가 미리 선택된 새로운 "패키지 추가" 워크플로우로 이동합니다.

00:02:15.000 --> 00:02:25.000
우리는 Xcode에서 최신 버전, 저자, 라이선스 및 README와 같은 패키지에 대한 많은 정보를 가지고 있습니다.

00:02:25.000 --> 00:02:33.000
또한 릴리스 기록 탭으로 전환하여 사용 가능한 모든 버전의 릴리스 노트를 볼 수 있습니다.

00:02:33.000 --> 00:02:39.000
종속성을 추가하기 위해, 우리는 버전 요구 사항과 추가할 프로젝트를 선택할 수 있습니다.

00:02:39.000 --> 00:02:45.000
둘 다 기본값을 수락하고 "패키지 추가"를 클릭하세요.

00:02:45.000 --> 00:02:52.000
이제, 패키지가 체크 아웃될 것이며, Xcode는 주어진 버전에서 다양한 제품을 제공합니다.

00:02:52.000 --> 00:02:57.000
나는 숫자 제품을 골라서 내 하나의 목표에 추가할 것이다.

00:02:57.000 --> 00:03:02.000
끝내기 위해, 나는 다시 한 번 "패키지 추가"를 클릭할 것이다.

00:03:02.000 --> 00:03:07.000
프로젝트 네비게이터를 살펴보면, 그곳에서 새로운 의존성을 보게 될 것이다.

00:03:07.000 --> 00:03:12.000
그리고 우리가 빌드를 수행한다면, 우리는 그 프로젝트가 지금 성공적으로 구축된다는 것을 알 수 있다.

00:03:12.000 --> 00:03:17.000
프로젝트에 대한 "패키지 추가" 워크플로우의 정확한 변경 사항을 간단히 살펴보겠습니다.

00:03:17.000 --> 00:03:26.000
그것을 위해, 우리는 프로젝트 편집기를 열고, 프로젝트를 선택하고, 스위프트 패키지 탭을 열 것입니다.

00:03:26.000 --> 00:03:31.000
여기서, 우리는 우리의 의존성과 버전 규칙을 볼 수 있다.

00:03:31.000 --> 00:03:41.000
이제, 대상 편집기를 열어 프레임워크, 라이브러리 및 임베디드 콘텐츠 단계를 살펴보면, 여기에 연결된 숫자 제품을 볼 수 있습니다.

00:03:41.000 --> 00:03:45.000
이것은 Xcode의 새로운 "패키지 추가" 워크플로우입니다.

00:03:45.000 --> 00:03:48.000
이제, Xcode는 숫자 패키지에 대해 어떻게 알았나요?

00:03:48.000 --> 00:03:59.000
Xcode는 Swift Argument Parser 및 Swift NIO와 같은 Apple이 발행한 오픈 소스 패키지 세트를 포함하는 사전 구성된 기본 컬렉션과 함께 제공됩니다.

00:03:59.000 --> 00:04:09.000
이것은 컬렉션의 정보를 사용하여 패키지를 추가하기 위한 모듈 이름과 수정의 자동 완성을 제공함으로써 Xcode에서 이러한 프로젝트를 훨씬 더 원활하게 사용할 수 있습니다.

00:04:09.000 --> 00:04:13.000
이 기본 컬렉션은 정기적으로 업데이트되므로, 정확한 패키지 목록이 변경될 수 있습니다.

00:04:13.000 --> 00:04:19.000
이제, 제 동료인 프란체스코가 컬렉션 사용에 대해 더 자세히 알려드리겠습니다.

00:04:19.000 --> 00:04:20.000
고마워, 보리스.

00:04:20.000 --> 00:04:25.000
수입 명세서를 통해 그 패키지를 직접 가져오는 것은 수월했다.

00:04:25.000 --> 00:04:28.000
컬렉션이 무엇인지 자세히 살펴봅시다.

00:04:28.000 --> 00:04:32.000
컬렉션은 일반적으로 HTTPS를 통해 가져온 JSON 파일입니다.

00:04:32.000 --> 00:04:41.000
컬렉션에는 요약, 버전 및 판매된 제품을 포함한 패키지 URL과 메타데이터 목록이 포함되어 있습니다.

00:04:41.000 --> 00:04:45.000
이것은 Xcode에 풍부한 정보를 표시할 수 있게 해준다.

00:04:45.000 --> 00:04:48.000
이것은 컬렉션의 JSON의 스니펫이다.

00:04:48.000 --> 00:04:54.000
당신은 보통 이것을 자세히 보지는 않겠지만, 몇 가지 중요한 분야를 살펴봅시다.

00:04:54.000 --> 00:05:06.000
패키지의 URL, README의 URL, 요약 및 패키지 버전에 대한 자세한 정보를 볼 수 있습니다.

00:05:06.000 --> 00:05:15.000
오늘날 종종 "SwiftPM"으로 축약되는 Swift Package Manager는 Mac에서 컬렉션을 캐싱하기 위한 데이터베이스를 관리합니다.

00:05:15.000 --> 00:05:24.000
즉, 명령줄의 SwiftPM을 포함하여 Xcode뿐만 아니라 libSwiftPM을 사용하는 모든 도구에서 구성된 컬렉션에 액세스할 수 있습니다.

00:05:24.000 --> 00:05:28.000
SwiftPM은 더 큰 Swift 오픈 소스 프로젝트의 일부입니다.

00:05:28.000 --> 00:05:35.000
Swift.org 웹사이트는 지역 사회와 기여하는 과정에 대해 배울 수 있는 훌륭한 장소입니다.

00:05:35.000 --> 00:05:41.000
SwiftPM은 컬렉션 지원을 포함하여 라이브러리로서의 기능을 제공합니다.

00:05:41.000 --> 00:05:46.000
우리는 라이브러리를 libSwiftPM이라고 부르며, Xcode의 패키지에도 전원을 공급합니다.

00:05:46.000 --> 00:05:49.000
보리스와 나는 우리 웹사이트를 위한 블로그 게시물을 작성하고 있다.

00:05:49.000 --> 00:05:57.000
우리는 독자들이 따라갈 수 있도록 포스트에서 사용하고 있는 패키지로 컬렉션을 만들 것입니다.

00:05:57.000 --> 00:06:00.000
고마워, 프란체스코.

00:06:00.000 --> 00:06:05.000
우리는 Alamofire를 사용하여 네트워크 요청을 하는 것을 좋아하기 때문에 컬렉션에 추가합니다.

00:06:05.000 --> 00:06:11.000
또한, 우리는 또한 프로젝트의 서식을 일관되게 유지하고 싶기 때문에, 신속한 형식도 사용할 것입니다.

00:06:11.000 --> 00:06:17.000
이제 컬렉션에 어떤 패키지를 갖고 싶은지 알았으니, 계속하고 만들어 봅시다.

00:06:17.000 --> 00:06:21.000
컬렉션을 만들기 위해, 우리는 GitHub에 도구를 게시했습니다.

00:06:21.000 --> 00:06:25.000
자신의 컬렉션을 게시하고 싶다면 이것을 로컬로 복제하고 구축할 수 있습니다.

00:06:25.000 --> 00:06:35.000
발전기는 정보를 자동으로 수집하고 항상 최신 버전의 형식에 따라 출력을 생성하여 컬렉션을 만드는 과정을 단순화합니다.

00:06:35.000 --> 00:06:47.000
이 도구는 선택적 메타데이터가 있는 패키지 URL 목록인 입력 JSON 파일을 가져와 다른 사람들과 공유할 출력 파일을 생성합니다.

00:06:47.000 --> 00:06:52.000
동일한 GitHub 프로젝트의 일부인 컬렉션에 서명하기 위한 별도의 도구도 있습니다.

00:06:52.000 --> 00:06:59.000
컬렉션에 서명하는 것은 선택 사항이지만, 저자를 확인하고 컬렉션의 무결성을 보호할 수 있습니다.

00:06:59.000 --> 00:07:03.000
이것이 입력 JSON 형식의 모습이다.

00:07:03.000 --> 00:07:09.000
개요, 키워드 및 저자 정보와 같은 컬렉션 전체에 대한 약간의 메타데이터가 있습니다.

00:07:09.000 --> 00:07:13.000
이것은 Xcode에 컬렉션을 추가할 때 표시됩니다.

00:07:13.000 --> 00:07:18.000
그리고 가장 중요한 것은, 패키지 URL 목록이다.

00:07:18.000 --> 00:07:27.000
이 도구는 각 패키지에 대한 정보를 자동으로 가져오지만, 컬렉션을 작성할 때 패키지당 추가 메타데이터를 제공할 수도 있습니다.

00:07:27.000 --> 00:07:45.000
여기에는 사용자 지정 요약 또는 키워드와 같은 검색 결과를 개선할 수 있는 메타데이터, 컬렉션이 나타내는 버전 제한, 패키지를 판매하는 가장 관련성이 높은 제품으로 사용자를 안내하는 데 유용할 수 있는 제외 제품, README URL을 지정하는 것이 포함됩니다.

00:07:45.000 --> 00:07:50.000
입력 JSON 파일을 기반으로 컬렉션을 배포하는 것은 3단계 과정이다.

00:07:50.000 --> 00:07:55.000
먼저, 우리는 생성기를 사용하여 출력 JSON 파일을 만듭니다.

00:07:55.000 --> 00:08:01.000
그런 다음, 우리는 출력과 서명 키와 인증서를 사용하여 서명 도구로 서명된 컬렉션을 만듭니다.

00:08:01.000 --> 00:08:08.000
그리고 마지막으로, 우리는 서명된 컬렉션을 직접 공유하거나 웹 서버에 넣어 배포할 수 있습니다.

00:08:08.000 --> 00:08:15.000
유효하고, 만료되지 않고, 취소되지 않은 코드 서명 인증서로 컬렉션에 서명할 수 있습니다.

00:08:15.000 --> 00:08:20.000
요구 사항에 대한 자세한 내용은 SwiftPM 문서를 확인하세요.

00:08:20.000 --> 00:08:27.000
컬렉션에 서명하고 싶지 않다면, 생성 도구를 사용한 후 배포를 진행하세요.

00:08:27.000 --> 00:08:33.000
하지만 프란체스코와 내가 작업하고 있는 이 컬렉션을 위해, 우리는 계속해서 서명할 것이다.

00:08:33.000 --> 00:08:40.000
나는 이미 서명을 위한 파일과 이전에 슬라이드에서 본 입력 JSON을 준비했다.

00:08:40.000 --> 00:08:44.000
나는 또한 발전기와 서명 도구를 다운로드하고 만들었다.

00:08:44.000 --> 00:09:00.000
우리는 입력 JSON과 출력 경로로 `package-collection-generate`를 실행하는 것으로 시작합니다.

00:09:00.000 --> 00:09:14.000
우리는 더 많은 정보 출력을 얻기 위해 `--verbose`를 전달하고 있으며, 더 많은 메타데이터를 위해 GitHub API를 쿼리하기 위해 GitHub auth-token을 전달하고 있습니다.

00:09:14.000 --> 00:09:20.000
우리는 명령이 정보를 수집하기 위해 다른 버전의 패키지를 확인하는 것을 본다.

00:09:20.000 --> 00:09:22.000
이건 몇 초가 걸릴 거야.

00:09:22.000 --> 00:09:26.000
그리고 나서, 그것은 완료되었고 출력 파일을 생성했다.

00:09:26.000 --> 00:09:29.000
다음으로, 우리는 컬렉션에 서명하고 싶습니다.

00:09:29.000 --> 00:09:45.000
우리는 `package-collection-sign` 명령을 실행하고, 방금 생성한 JSON 파일을 전달하고, 출력 경로를 지정합니다.

00:09:45.000 --> 00:09:56.000
우리는 또한 이전에 수출한 열쇠와 인증서를 통과한다.

00:09:56.000 --> 00:10:00.000
나는 이미 생성된 컬렉션을 서버에 업로드했다.

00:10:00.000 --> 00:10:03.000
명령줄을 사용하여 상호 작용하는 방법을 봅시다.

00:10:03.000 --> 00:10:08.000
SwiftPM은 그렇게 하기 위해 `package-collection`이라는 하위 명령을 제공한다.

00:10:08.000 --> 00:10:22.000
시작하기 위해, 우리는 구성된 컬렉션 목록에 컬렉션을 추가하여 Xcode에서도 사용할 수 있습니다.

00:10:22.000 --> 00:10:24.000
이것은 컬렉션을 가져와서 추가한다.

00:10:24.000 --> 00:10:29.000
물론, 프란체스코가 나중에 보여줄 Xcode의 UI에서도 이것을 할 수 있습니다.

00:10:29.000 --> 00:10:40.000
다음으로, 'swift package-collection describe'를 사용하여 내용을 살펴봅시다.

00:10:40.000 --> 00:10:45.000
먼저, 우리가 이전에 지정한 메타데이터가 있다.

00:10:45.000 --> 00:10:50.000
우리는 컬렉션의 패키지 목록과 마지막으로 서명에 대한 정보를 얻는다.

00:10:50.000 --> 00:10:56.000
이것은 누가 컬렉션에 서명했는지, 그리고 서명이 SwiftPM에 의해 확인되었음을 보여준다.

00:10:56.000 --> 00:11:05.000
이것은 주어진 컬렉션이 당신이 기대하는 사람에 의해 만들어졌는지 여부를 결정하는 데 사용될 수 있으며 또한 수정으로부터 컬렉션의 무결성을 보호할 수 있습니다.

00:11:05.000 --> 00:11:11.000
다음으로, 스위프트 포맷과 같은 개별 패키지를 살펴봅시다.

00:11:11.000 --> 00:11:16.000
이를 위해, 우리는 이번에는 패키지 URL과 함께 설명 명령을 다시 사용합니다.

00:11:16.000 --> 00:11:35.000
이 명령의 출력에서 사용 가능한 버전, 저자, 별 및 README URL과 같은 전체 패키지에 대한 정보와 사용 중인 스위프트 도구 버전과 모듈 및 제품을 포함한 최신 버전에 대한 세부 정보를 볼 수 있습니다.

00:11:35.000 --> 00:11:45.000
이제 우리는 우리의 새로운 컬렉션이 좋아 보인다는 것을 확인했으므로, 나는 그것을 내 동료인 프란체스코에게 보낼 것이다. 프란체스코는 우리의 데모 앱을 모아서 당신에게 Xcode 경험을 조금 더 보여줄 것이다.

00:11:45.000 --> 00:11:47.000
고마워, 보리스.

00:11:47.000 --> 00:11:51.000
나는 방금 데모 앱을 위한 새로운 프로젝트를 만들었다.

00:11:51.000 --> 00:12:01.000
파일 &gt; 패키지 추가로 이동하여 + 버튼을 클릭하여 컬렉션을 추가하여 Xcode에 새 컬렉션을 추가할 수 있습니다.

00:12:01.000 --> 00:12:13.000
이제 컬렉션의 URL을 붙여넣을 수 있으며, "로드"를 클릭한 후, Xcode는 얼마나 많은 패키지가 포함되어 있고 언제 마지막으로 업데이트되었는지 알려줍니다.

00:12:13.000 --> 00:12:20.000
컬렉션을 추가한 후, 우리는 패키지를 볼 수 있습니다: Alamofire와 swift-format.

00:12:20.000 --> 00:12:27.000
저는 Alamofire의 네트워킹 API를 사용하고 싶기 때문에, 제 프로젝트에 패키지를 추가할 것입니다.

00:12:27.000 --> 00:12:35.000
Alamofire 제품을 선택하고 "패키지 추가"를 클릭하여 유일한 대상에 추가하겠습니다.

00:12:35.000 --> 00:12:53.000
우리는 Xcode가 종속성을 추가했다는 것을 알 수 있으므로, 이제 소스 파일로 돌아가서 코드를 작성하기 시작할 수 있습니다.

00:12:53.000 --> 00:13:01.000
이제 Alamofire를 사용하여 README를 다운로드했으므로 swift-cmark 패키지를 사용하여 Markdown을 구문 분석하고 싶습니다.

00:13:01.000 --> 00:13:05.000
"패키지 추가" 패널로 돌아가자.

00:13:05.000 --> 00:13:12.000
Xcode 13의 새로운 기능, 우리는 프로젝트 네비게이터의 컨텍스트 메뉴를 통해 패키지 옵션에 대한 빠른 액세스를 추가했습니다.

00:13:12.000 --> 00:13:18.000
여기에서 "패키지 추가"를 선택하여 패널을 다시 열 수 있습니다.

00:13:18.000 --> 00:13:27.000
내 컬렉션에는 스위프트 마크가 없으며, URL을 검색 표시줄에 직접 붙여넣어 추가할 수 있습니다.

00:13:27.000 --> 00:13:36.000
나는 swift-cmark의 주요 지점을 선택하고 내 프로젝트에 패키지를 추가할 것이다.

00:13:36.000 --> 00:13:41.000
이제 스위프트 마크를 추가했으니, 블로그 게시물에 대한 앱을 완성할 수 있습니다.

00:13:41.000 --> 00:13:51.000
이제 인터넷을 통해 패키지를 사용하기 쉽고 우리에게 가장 중요한 것, 즉 앱을 작성하는 것에 집중하기 쉽습니다.

00:13:51.000 --> 00:13:56.000
Xcode 13의 스위프트 패키지 컬렉션은 새로운 패키지를 발견하는 데 도움을 준다.

00:13:56.000 --> 00:14:06.000
자신만의 컬렉션을 만들면 큐레이팅된 패키지 목록을 공유하여 프로젝트에 추가하는 것을 간소화할 수 있습니다.

00:14:06.000 --> 00:14:18.000
일반적으로 패키지에 대해 자세히 알아보려면, WWDC19 세션, "Xcode에서 Swift 패키지 채택" 및 "Swift 패키지 만들기"를 추천합니다.

00:14:18.000 --> 00:14:20.000
봐줘서 고마워.

00:14:20.000 --> 23:59:59.000
[쾌활한 음악].

