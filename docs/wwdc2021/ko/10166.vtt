WEBVTT

00:00:00.000 --> 00:00:11.000
안녕하세요, 저는 빅토리아입니다.

00:00:11.000 --> 00:00:23.000
저는 Apple의 Documentation Tools 팀의 엔지니어이며, 동료 Ethan과 함께 Xcode 13의 새로운 문서 기능을 소개할 것입니다.

00:00:23.000 --> 00:00:32.000
워크플로우에 딱 맞고 개발을 위한 새로운 가능성을 열어주는 문서를 읽고 쓰는 새로운 방법이 있습니다.

00:00:32.000 --> 00:00:40.000
Xcode 13에는 Swift 프레임워크와 패키지에 대한 문서를 작성, 작성 및 찾아볼 수 있는 새로운 기능이 있습니다.

00:00:40.000 --> 00:00:49.000
이것은 코드를 작성하는 동안 Swift 종속성에 대한 모든 것을 읽을 수 있는 강력한 문서 기반 개발 모드를 잠금 해제합니다.

00:00:49.000 --> 00:00:56.000
이 문서는 Xcode의 개발자 문서 창에 있는 플랫폼 라이브러리와 바로 옆에 있습니다.

00:00:56.000 --> 00:01:21.000
이 세션에서는 Xcode 13의 문서 기능에 대한 개요를 제공합니다. 작성하고 사용하는 Swift 프레임워크 및 패키지에 대한 문서 작성 과정을 안내하고, Xcode 13을 사용하여 훌륭한 문서를 작성하는 방법을 보여주고, Xcode 13과 문서를 공유할 수 있는 방법을 보여줌으로써 마무리합니다.

00:01:21.000 --> 00:01:26.000
제가 새로운 문서 기능에 대해 개인적으로 흥분하는 이유부터 시작합시다.

00:01:26.000 --> 00:01:28.000
나는 우리 모두가 거기에 있었다고 확신해.

00:01:28.000 --> 00:01:37.000
우리가 사용하고 싶은 새로운 프레임워크나 패키지가 있지만, 그것을 우리의 코드에 통합할 때가 되면, 우리는 그 안에 무엇이 들어 있는지 알아내야 한다.

00:01:37.000 --> 00:01:40.000
이것이 Xcode 13이 개입하는 곳이다.

00:01:40.000 --> 00:01:52.000
이제 Xcode는 문서와 코드를 위한 컴파일러와 함께 제공되며, Xcode 내에서 Swift 프레임워크와 패키지에 대한 문서를 빌드하고 볼 수 있습니다.

00:01:52.000 --> 00:02:01.000
우리는 그것을 DocC라고 부르며, 문서를 읽고 쓰는 방식을 향상시키기 위해 Xcode 전반에 걸쳐 모든 것을 통합했습니다.

00:02:01.000 --> 00:02:07.000
이제, DocC는 사실 이후에 실행되는 단순한 문서 컴파일러 그 이상이다.

00:02:07.000 --> 00:02:37.000
Xcode를 보완하는 완전히 통합된 문서 환경으로, 빠른 도움말에 나타나는 문서와 함께 풍부한 라이브 환경을 제공하며, 문서를 응집력 있는 전체로 묶을 수 있는 풍부한 코드 완성, 통합 개발자 문서 창에서 사용할 수 있는 전체 문서, Xcode와 웹에서 볼 수 있는 사전 구축된 문서를 쉽게 공유할 수 있는 옵션을 제공합니다.

00:02:37.000 --> 00:02:45.000
이 모든 것을 자세히 살펴볼 WWDC 2021의 다른 DocC 세션을 계속 지켜봐 주세요.

00:02:45.000 --> 00:03:05.000
DocC는 Xcode와 Swift의 힘을 활용하여 사용자에게 프레임워크 또는 패키지의 공개 API에 대한 조감도를 제공하여 API가 어떻게 함께 작동하는지 설명할 수 있는 기능을 갖춘 훌륭한 참조 문서를 작성할 수 있도록 합니다.

00:03:05.000 --> 00:03:09.000
하지만 DocC는 훌륭한 참조 문서보다 훨씬 더 많은 것을 작성할 수 있게 해준다.

00:03:09.000 --> 00:03:16.000
올해 자랑할 수 있는 DocC와 함께 문서를 작성하는 두 가지 추가 방법이 있습니다.

00:03:16.000 --> 00:03:28.000
기사를 사용하면 프레임워크 뒤의 큰 그림을 통해 사용자를 안내할 수 있으며, 프레임워크의 개별 항목을 응집력 있는 이야기와 함께 묶을 수 있는 기회를 제공합니다.

00:03:28.000 --> 00:03:36.000
그리고 튜토리얼은 프레임워크를 사용하는 프로젝트를 작성하는 강력한 단계별 연습입니다.

00:03:36.000 --> 00:03:47.000
그것들은 사용자에게 처음부터 프레임워크에 대한 가이드 소개를 제공함으로써 참조 문서나 기사보다 훨씬 더 깊이 들어갈 수 있게 해준다.

00:03:47.000 --> 00:03:58.000
이러한 모든 저작 경험은 마크다운의 힘과 단순성을 활용하고 확장하여 문서를 작성하는 것을 코드를 작성하는 것만큼 유동적으로 만듭니다.

00:03:58.000 --> 00:04:09.000
소스 코드 이외의 기사와 튜토리얼로 문서 카탈로그를 조립하는 것에 대해 더 알고 싶다면, 올해 WWDC에서 이 세션을 확인하세요.

00:04:09.000 --> 00:04:25.000
그리고 마지막으로, 우리는 올해 말에 DocC를 오픈 소스로 출시할 예정이며, 웹에서 구축된 문서 아카이브를 호스팅할 수 있는 웹 앱과 함께 Xcode 외부에서도 이러한 새로운 문서 워크플로우를 활용할 수 있습니다.

00:04:25.000 --> 00:04:36.000
이제 Xcode 13의 새로운 문서 기능을 맛보게 되었으니, Xcode에서 DocC로 문서를 만드는 것에 대해 이야기해 봅시다.

00:04:36.000 --> 00:04:41.000
먼저 후드 아래에서 어떻게 작동하는지 간단히 살펴보자.

00:04:41.000 --> 00:04:52.000
문서를 구축하기 위해 Xcode는 프레임워크나 패키지를 구축하고 컴파일러에게 컴파일된 아티팩트와 함께 공용 API에 대한 정보를 저장하도록 요청합니다.

00:04:52.000 --> 00:05:10.000
그런 다음 공개 API 정보는 DocC에 전달되며, DocC는 소스 코드 외부에 작성된 기사와 튜토리얼이 포함된 문서 카탈로그와 결합하여 컴파일된 문서를 포함하는 최종 아카이브를 만듭니다.

00:05:10.000 --> 00:05:20.000
문서 카탈로그와 문서 구성에 대해 자세히 알아보려면, "Xcode에서 DocC 문서 올리기" 세션을 확인하세요.

00:05:20.000 --> 00:05:29.000
그리고 DocC와 Xcode의 빌드 시스템의 통합 덕분에, 이 과정은 타겟이 의존하는 모든 스위프트 프레임워크와 패키지에 대해 반복됩니다.

00:05:29.000 --> 00:05:34.000
이렇게 하면, 모든 관련 문서를 한 곳에 모두 가질 수 있습니다.

00:05:34.000 --> 00:05:39.000
하지만 이것은 당신의 일상적인 문서 요구 사항에 대해 무엇을 의미합니까?

00:05:39.000 --> 00:05:47.000
Xcode 13에서 Swift 프레임워크와 패키지에 대한 문서를 구축하는 세 가지 방법이 있습니다.

00:05:47.000 --> 00:05:55.000
필요에 따라 문서를 작성하기 위해, 문서를 컴파일하고 로드하는 새로운 빌드 문서 메뉴 항목이 있습니다.

00:05:55.000 --> 00:06:05.000
그리고 스위프트 프레임워크에서 작업하고 항상 문서를 미리 보고 싶다면, 컴파일할 때마다 문서를 빌드하는 새로운 빌드 설정도 있습니다.

00:06:05.000 --> 00:06:13.000
그리고 명령줄과 CI 요구를 위해, xcodebuild에는 문서를 작성하는 새로운 명령도 있습니다.

00:06:13.000 --> 00:06:21.000
이것은 Xcode에서 빌드 문서를 선택하지만 명령줄에서 xcodebuild를 사용하는 것과 동일한 빌드를 실행합니다.

00:06:21.000 --> 00:06:31.000
제 동료 데이비드는 "DocC 문서 호스트 및 자동화" 세션에서 문서 워크플로우 자동화에 대한 더 많은 정보를 가지고 있습니다.

00:06:31.000 --> 00:06:33.000
이것이 실제로 실행되는지 봅시다.

00:06:33.000 --> 00:06:40.000
내 팀원들은 귀여운 작은 나무늘보를 분류하고 커스터마이징하는 것에 관한 SlothCreator라는 패키지를 작업하고 있다.

00:06:40.000 --> 00:06:45.000
나는 그것을 시도해보고 싶으니까, Xcode 13에서 어떻게 보이는지 보자.

00:06:45.000 --> 00:06:53.000
Slothy라고 불리는 이 앱을 설정하여 SlothCreator를 사용하여 나무늘보를 사용자 정의하고 갈 때 미리 볼 수 있습니다.

00:06:53.000 --> 00:07:04.000
나는 이미 SlothCreator를 내 앱의 종속성으로 설정했지만, 그것이 제공하는 API에 대해 더 알고 싶으니, 제품 메뉴를 열어봅시다...

00:07:04.000 --> 00:07:13.000
그리고 문서 빌드를 선택하여 살펴보세요.

00:07:13.000 --> 00:07:27.000
그리고 그렇게, 개발자 문서 창이 열리고, 네비게이터에서 Slothy 프로젝트와 내가 작업하고 있는 SlothCreator 패키지를 확장하여 네비게이터에서 개요를 볼 수 있습니다.

00:07:27.000 --> 00:07:37.000
메인 보기에서 SlothCreator 개요를 로드할 것이며, 아래로 스크롤하면 사용 가능한 유형과 프로토콜 목록이 있습니다.

00:07:37.000 --> 00:07:40.000
여기서 나는 서식지라고 불리는 이 유형을 볼 수 있다.

00:07:40.000 --> 00:07:44.000
페이지를 로드하려면 클릭합시다.

00:07:44.000 --> 00:07:49.000
여기에 좋은 정보가 있지만, 다른 언급이 있는지 궁금합니다.

00:07:49.000 --> 00:07:57.000
맨 위에 있는 검색 필드를 선택하고 "서식지"를 찾아봅시다.

00:07:57.000 --> 00:07:59.000
몇 가지 다른 것들이 이것을 언급하는 것처럼 보인다.

00:07:59.000 --> 00:08:06.000
이 수면 방법을 클릭하여 문서 페이지를 불러봅시다.

00:08:06.000 --> 00:08:11.000
이 페이지는 수면 방법에 따라 다르지만, 이것이 어떤 유형의 일부인지 궁금합니다.

00:08:11.000 --> 00:08:19.000
창문 상단의 점프 바에서, 나는 이것이 나무늘보 유형의 일부라는 것을 알 수 있다.

00:08:19.000 --> 00:08:28.000
이 나무늘보를 클릭하면 풀다운 메뉴가 나타나고, 다시 클릭하면 해당 유형의 문서 페이지를 열 수 있습니다.

00:08:28.000 --> 00:08:31.000
이제 나는 이 모든 API가 어떻게 서로 잘 맞는지에 대한 그림을 얻고 있다.

00:08:31.000 --> 00:08:37.000
그래서 이제 우리는 SlothCreator의 문서를 살펴볼 기회가 있었다.

00:08:37.000 --> 00:08:41.000
되감고 그것이 어떻게 그 지점에 도달했는지 살펴봅시다.

00:08:41.000 --> 00:08:47.000
내 동료 Ethan은 훌륭한 문서를 작성하기 위해 Xcode 13의 새로운 기능 중 일부를 보여주는 것으로 시작할 것이다.

00:08:47.000 --> 00:08:49.000
가져가.

00:08:49.000 --> 00:08:51.000
고마워, 빅토리아.

00:08:51.000 --> 00:09:03.000
이제 문서 작성 및 브라우징에 대한 Xcode 13의 훌륭한 지원을 살펴보았으므로, DocC로 더 나은 문서를 작성할 수 있는 몇 가지 트릭을 보여드리고 싶습니다.

00:09:03.000 --> 00:09:08.000
DocC는 인소스 문서의 이점을 중심으로 설계되었다.

00:09:08.000 --> 00:09:17.000
코드와 함께 문서를 작성하여 기존 개발 워크플로우와 편리하고 쉽게 통합할 수 있습니다.

00:09:17.000 --> 00:09:22.000
선언문에 문서를 추가하려면, 그 바로 위에 특별한 종류의 주석을 쓰면 됩니다.

00:09:22.000 --> 00:09:27.000
이를 통해 향후 변경할 수 있는 코드 변경 사항과 문서를 쉽게 동기화할 수 있습니다.

00:09:27.000 --> 00:09:34.000
그리고 물론, 그것은 Git diffs와 같은 기존 텍스트 기반 도구와 잘 어울릴 것입니다.

00:09:34.000 --> 00:09:40.000
코드베이스의 미래 관리자에게 추가 컨텍스트를 제공하기 위해 이미 소스 코드에 주석을 달고 있을 가능성이 높습니다.

00:09:40.000 --> 00:09:47.000
스위프트와 다른 많은 언어에서, 당신은 두 개의 앞으로 슬래시로 줄을 시작하여 댓글을 작성합니다.

00:09:47.000 --> 00:09:55.000
이러한 의견을 작성함으로써, 당신은 미래의 메인테이너가 코드베이스 내에서 이해하고 생산적일 수 있도록 돕는 데 먼 길을 걸었다.

00:09:55.000 --> 00:09:59.000
하지만 오늘날의 프레임워크를 채택하는 사람들을 돕고 싶다면 어떨까요?

00:09:59.000 --> 00:10:03.000
이것이 문서 논평을 위한 것이다.

00:10:03.000 --> 00:10:13.000
세 개의 포워드 슬래시로 시작하는 주석을 작성함으로써, 당신은 스위프트 문서 컴파일러에게 주석을 바로 아래의 선언과 연관시키라고 말하고 있습니다.

00:10:13.000 --> 00:10:21.000
댓글은 기호의 컴파일된 문서 페이지에 포함되며 프레임워크를 가져오는 모든 사람이 액세스할 수 있습니다.

00:10:21.000 --> 00:10:30.000
그리고 블록 스타일의 주석을 사용하는 것을 선호한다면, 시작 구분 기호에 추가 별표를 포함하여 해당 스타일로 문서 주석을 만들 수 있습니다.

00:10:30.000 --> 00:10:33.000
이 모든 것이 실제로 어떻게 작동하는지 봅시다.

00:10:33.000 --> 00:10:39.000
빅토리아가 언급했듯이, 지난 몇 달 동안, 우리는 SlothCreator 프레임워크를 연구해 왔다.

00:10:39.000 --> 00:10:46.000
SlothCreator는 귀여운 나무늘보를 분류하고 사용자 정의하는 기능을 제공하는 스위프트 패키지입니다.

00:10:46.000 --> 00:10:58.000
SlothCreator의 개발자로서, 저는 프레임워크의 모든 채택자가 시작할 수 있는 쉬운 방법이 있는지 확인하고 싶기 때문에, 제가 작업한 코드베이스 부분에 문서 주석을 추가하기 위해 노력해 왔습니다.

00:10:58.000 --> 00:11:09.000
특히, 저는 SlothCreator의 모든 공개 API가 잘 문서화되어 있는지 확인하고 싶습니다. 왜냐하면 제 프레임워크를 가져오는 모든 사람이 접근할 수 있는 것은 이러한 API이기 때문입니다.

00:11:09.000 --> 00:11:16.000
같은 이유로, DocC는 프레임워크에서 공개 및 공개 기호에 대한 문서 페이지만 생성합니다.

00:11:16.000 --> 00:11:21.000
SlothCreator에는 여전히 문서화가 필요한 몇 가지 기호가 있습니다.

00:11:21.000 --> 00:11:23.000
이 음식 구조부터 시작합시다.

00:11:23.000 --> 00:11:31.000
문서 주석을 만들기 위해 유형 선언 위에 세 개의 순방향 슬래시를 추가하는 것으로 시작하겠습니다.

00:11:31.000 --> 00:11:36.000
그리고 나서 나는 이것이 "늘보가 먹을 수 있는 음식"이라고 쓸 것이다.

00:11:36.000 --> 00:11:45.000
내 문서 주석의 첫 번째 줄은 기호의 요약으로 바뀔 것이지만, 토론 섹션과 함께 몇 가지 추가 정보를 추가하고 싶습니다.

00:11:45.000 --> 00:11:52.000
요약 후에 줄 바꿈을 추가한 다음 나무늘보가 좋아하는 음식의 종류에 대한 추가 세부 사항을 추가하여 지금 하나를 추가하겠습니다.

00:11:52.000 --> 00:12:01.000
그리고 DocC는 Markdown을 완벽하게 지원하기 때문에, Markdown의 울타리 코드 블록 구문을 사용하여 코드 예제를 추가할 수 있습니다.

00:12:01.000 --> 00:12:03.000
좋아.

00:12:03.000 --> 00:12:08.000
나는 이것이 식품 구조에 대해 정말 유용한 추가 맥락을 추가한다고 생각한다.

00:12:08.000 --> 00:12:12.000
문서를 재구성하여 지금 내 문서가 어떻게 보이는지 봅시다.

00:12:12.000 --> 00:12:21.000
마우스를 제품 메뉴로 이동한 다음 문서 작성을 선택하여 할 수 있습니다.

00:12:21.000 --> 00:12:26.000
Xcode는 이제 프레임워크 자체와 함께 SlothCreator의 문서를 재구성할 것이다.

00:12:26.000 --> 00:12:35.000
그리고 이 빌드에 빌드 문서 버튼을 사용했기 때문에, 완료되면 문서 뷰어가 업데이트된 문서와 함께 열립니다.

00:12:35.000 --> 00:12:41.000
하지만 저는 사실 우리가 방금 추가한 댓글을 검토하기 위해 Food struct 페이지로 바로 가는 것에 관심이 있습니다.

00:12:41.000 --> 00:12:46.000
다행히도, Xcode에는 내가 그렇게 할 수 있는 빠른 도움말이라는 기능이 있다.

00:12:46.000 --> 00:12:54.000
빠른 도움말은 소스 편집기에서 바로 기호 문서의 짧은 요약 버전을 제공합니다.

00:12:54.000 --> 00:13:01.000
옵션 키를 누른 다음 음식 선언을 클릭하여 지금 시도해 볼 수 있습니다.

00:13:01.000 --> 00:13:09.000
하지만 SlothCreator의 채택자는 코드에서 Food 구조에 대한 참조를 옵션으로 클릭하여 동일한 보기를 열 수 있습니다.

00:13:09.000 --> 00:13:14.000
그래서 우리가 쓴 논평은 바로 여기 요약 및 토론 섹션에 있습니다.

00:13:14.000 --> 00:13:22.000
하지만 요약된 보기보다 더 많은 것을 찾고 있다면, Xcode 13의 새로운 기능은 Open in Developer Documentation 링크입니다.

00:13:22.000 --> 00:13:34.000
빠른 도움말 보기의 오른쪽 하단 모서리로 마우스를 이동하고 개발자 문서에서 열기를 클릭하면 문서 창이 해당 기호의 페이지로 바로 실행됩니다.

00:13:34.000 --> 00:13:36.000
굉장해.

00:13:36.000 --> 00:13:40.000
SlothCreator에서 여전히 문서가 누락된 또 다른 기호가 있다.

00:13:40.000 --> 00:13:47.000
마우스를 Xcode의 네비게이터로 이동하고 Sloth 항목을 클릭하여 Sloth 파일을 열 것입니다.

00:13:47.000 --> 00:13:53.000
그리고 내가 아래로 스크롤하면, 나는 Eat 방법이 여전히 문서 주석이 필요하다는 것을 알아차리고 있다.

00:13:53.000 --> 00:13:59.000
그래서 방법을 문서화하는 가장 좋은 방법을 빠르게 살펴봅시다.

00:13:59.000 --> 00:14:07.000
우리는 방법의 선언 위에 삼중 슬래시 주석을 추가하고 문서 요약을 구성하는 텍스트를 추가하여 같은 방식으로 시작합니다.

00:14:07.000 --> 00:14:13.000
하지만 우리는 또한 우리가 매개 변수로 전달될 것으로 예상되는 것을 구체적으로 문서화해야 한다.

00:14:13.000 --> 00:14:16.000
우리는 매개 변수 섹션을 통해 이것을 한다.

00:14:16.000 --> 00:14:28.000
Parameter라는 단어로 시작하는 Markdown 목록 항목과 메서드의 매개 변수 이름, 콜론 및 문서를 작성하여 문서에 매개 변수 섹션을 추가합니다.

00:14:28.000 --> 00:14:37.000
이번에는 콜론과 메소드가 반환하는 것에 대한 설명을 작성하여 매우 유사한 방식으로 반환 섹션을 추가할 수 있습니다.

00:14:37.000 --> 00:14:41.000
하지만 당신의 방법에 여러 매개 변수가 있다면 어떨까요?

00:14:41.000 --> 00:14:48.000
이 경우, 가장 좋은 방법은 단수 매개 변수 구분 기호에서 복수 매개 변수로 가는 것이다.

00:14:48.000 --> 00:14:54.000
이것은 매개 변수 이름이 부모 매개 변수 구분 기호의 자식으로 쓰여진 것을 제외하고는 다른 것과 거의 동일하게 작동합니다.

00:14:54.000 --> 00:15:00.000
이제 기본 사항을 검토했으니, 나무늘보 먹는 방법을 문서화해 봅시다.

00:15:00.000 --> 00:15:08.000
이제, 나는 세 개의 포워드 슬래시로 시작하는 문서 주석을 수동으로 작성하여 식품 구조를 문서화할 때와 같은 방식으로 시작할 수 있다.

00:15:08.000 --> 00:15:21.000
하지만 더 복잡한 기호를 문서화하고 있기 때문에, 현재 선언을 문서화하는 데 가장 적합한 템플릿을 삽입하는 Xcode의 훌륭한 문서 추가 기능을 활용할 것입니다.

00:15:21.000 --> 00:15:29.000
Command 키를 누른 다음 방법의 선언을 클릭하여 작업 메뉴를 열어서 이것을 할 수 있습니다.

00:15:29.000 --> 00:15:39.000
다음으로, 작업 메뉴에서 문서 추가를 클릭할 수 있으며, 그렇게 하면, 제 방법을 문서화하기 시작할 수 있는 훌륭한 템플릿이 있습니다.

00:15:39.000 --> 00:15:50.000
방법의 요약을 작성하는 것으로 시작한 다음, 음식 및 수량 매개 변수와 이 방법이 반환하는 것을 설명할 것입니다.

00:15:50.000 --> 00:15:58.000
그리고 나서 코드 예제와 함께 토론 섹션을 추가하여 문서를 마무리하겠습니다.

00:15:58.000 --> 00:16:08.000
지난번과 마찬가지로, 마우스를 제품 메뉴로 이동하고 문서 작성 항목을 선택하여 문서를 다시 작성할 수 있습니다.

00:16:08.000 --> 00:16:13.000
그리고 다시 한번, Xcode는 프레임워크 자체와 함께 내 문서를 구축하고 있다.

00:16:13.000 --> 00:16:21.000
이번에는 창의 네비게이터를 통해 Sloth 구조체로 이동하여 Sloths 주제 그룹에서 Sloth를 찾을 수 있습니다.

00:16:21.000 --> 00:16:30.000
Sloth 페이지에서 아래로 스크롤하면, 인스턴스 방법 섹션에서 내 방법을 찾을 수 있습니다...

00:16:30.000 --> 00:16:33.000
내 업데이트된 문서와 함께.

00:16:33.000 --> 00:16:35.000
난 이미 그것에 정말 만족해.

00:16:35.000 --> 00:16:42.000
이 방법의 입력과 출력은 정말 잘 정의되어 있으며, 여기에 유용한 코드 예제도 있습니다.

00:16:42.000 --> 00:16:46.000
나는 이것이 거의 갈 준비가 되었다고 생각하지만, 우리는 여전히 여기서 뭔가를 놓치고 있다.

00:16:46.000 --> 00:16:54.000
만약 내가 이 문서 페이지를 읽고 있다면, 나는 여기서 고려해야 할 다른 관련 기호에 대한 좋은 맥락을 가지고 있지 않다.

00:16:54.000 --> 00:17:00.000
그리고 SlothCreator의 관리자로서, 저는 독자가 다음에 배우는 것을 고려해야 할 다른 기호를 부르고 싶습니다.

00:17:00.000 --> 00:17:06.000
음, Xcode 13의 새로운 기능은 문서의 기호에 연결할 수 있는 기능입니다.

00:17:06.000 --> 00:17:14.000
이것은 프레임워크의 다른 부분을 연결하고 독자를 관련 정보로 안내하는 정말 좋은 방법입니다.

00:17:14.000 --> 00:17:18.000
당신은 새로운 이중 백틱 구문을 통해 이 링크를 작성합니다.

00:17:18.000 --> 00:17:21.000
예를 들어 봅시다.

00:17:21.000 --> 00:17:24.000
여기 우리가 이전에 문서화한 방법이 있습니다, 수면.

00:17:24.000 --> 00:17:26.000
하지만 그것은 진공 상태에서 존재하지 않는다.

00:17:26.000 --> 00:17:30.000
사실 나무늘보 구조에는 또 다른 재산이 있다.

00:17:30.000 --> 00:17:43.000
나무늘보의 현재 에너지 수준을 나타내는 값이 있으며, 나는 독자들이 수면을 부르는 부작용 중 하나가 나무늘보의 에너지 수준의 변화라는 것을 이해하는 것이 중요하다고 생각한다.

00:17:43.000 --> 00:17:49.000
그래서 나는 에너지 레벨 속성에 대한 참조와 함께 내 방법 토론 섹션에 추가할 것이다.

00:17:49.000 --> 00:17:58.000
Xcode 13 이전에 이것을 하는 자연스러운 방법은 백틱으로 둘러싸서 모노스페이스 코드 글꼴로 속성의 이름을 쓰는 것입니다.

00:17:58.000 --> 00:18:04.000
하지만 이제 나는 이중 백틱 구문으로 변환하고 링크를 만들 수 있다.

00:18:04.000 --> 00:18:16.000
이제, energyLevel에 대한 링크는 꽤 간단했다. 왜냐하면 그 속성은 내가 문서화하고 있는 방법의 형제이기 때문이며, Swift에서 지역 변수를 참조할 때와 마찬가지로, 나는 부모 유형으로 내 링크를 더 이상 검증할 필요가 없다.

00:18:16.000 --> 00:18:20.000
난 그냥 그 부동산의 이름을 쓸 수 있어, energyLevel.

00:18:20.000 --> 00:18:25.000
하지만 내가 다른 유형의 아이를 언급하고 싶다면, 나는 좀 더 구체적이어야 한다.

00:18:25.000 --> 00:18:33.000
그래서 여기서 나는 Habitat 구조체의 아이와 연결하기 위해 Habitat/comfortLevel을 쓴다.

00:18:33.000 --> 00:18:35.000
좋아.

00:18:35.000 --> 00:18:40.000
먹는 방법에 대한 문서에 몇 가지 링크를 추가하여 이것이 실제로 어떻게 작동하는지 봅시다.

00:18:40.000 --> 00:18:45.000
나는 여기서 "그들이 음식을 먹을 때, 나무늘보가..."라고 쓰는 것으로 시작할 것이다.

00:18:45.000 --> 00:18:49.000
그리고 이제 나는 energyLevel 속성에 대한 심볼 링크를 쓸 것이다.

00:18:49.000 --> 00:18:55.000
그래서 나는 두 개의 백틱을 입력한 다음, 에너지 레벨을 쓰기 시작할 것이다.

00:18:55.000 --> 00:18:59.000
Xcode의 코드 완성은 내가 올바른 링크를 얻고 있는지 확인하는 데 도움이 될 것이다.

00:18:59.000 --> 00:19:04.000
내가 가서 그 아이템을 선택할게.

00:19:04.000 --> 00:19:12.000
그래서 나는 에너지 레벨이 "음식에 의해 증가한다"고 말할 것이다. 그리고 이제 나는 음식 구조의 아이를 참조할 것이다.

00:19:12.000 --> 00:19:16.000
두 개의 백틱으로 다시 시작하겠습니다.

00:19:16.000 --> 00:19:24.000
그리고 나서 나는 음식, 포워드 슬래시, 그리고 에너지를 쓸 것이다.

00:19:24.000 --> 00:19:31.000
나는 이제 독자들이 이 방법에 대한 맥락을 더 잘 이해하는 데 정말 도움이 될 것이라고 생각하는 두 개의 심볼 링크를 만들었다.

00:19:31.000 --> 00:19:34.000
그리고 이 링크들은 빠른 도움말에서도 접근할 수 있다.

00:19:34.000 --> 00:19:41.000
그래서 나는 옵션 키를 누르고 내 방법의 선언을 클릭하여 빠른 도움말 팝오버를 열 것이다.

00:19:41.000 --> 00:19:46.000
여기 우리가 추가한 토론 섹션과 물론 토론에서 우리의 두 링크가 있습니다.

00:19:46.000 --> 00:19:52.000
그리고 하나를 클릭하면 문서 창에서 참조된 기호 페이지로 바로 이동합니다.

00:19:52.000 --> 00:20:03.000
이제 SlothCreator의 모든 공개 API에 대한 좋은 문서 의견을 작성했으므로, 동료들과 공유하고 웹에서 사용할 수 있게 되어 정말 기쁩니다.

00:20:03.000 --> 00:20:10.000
Xcode가 모든 문서 빌드의 일부로 출력하는 문서 아카이브를 통해 이것을 할 수 있습니다.

00:20:10.000 --> 00:20:16.000
문서 아카이브에는 웹에서 문서를 공유하는 데 사용할 수 있는 단일 페이지 웹 앱이 포함되어 있습니다.

00:20:16.000 --> 00:20:24.000
내 동료 데이비드는 그의 "호스트 및 DocC 문서 자동화" 세션에서 그것을 하는 방법에 대해 자세히 설명할 것이다.

00:20:24.000 --> 00:20:27.000
나는 네가 그것을 확인하는 것을 강력히 추천한다.

00:20:27.000 --> 00:20:34.000
하지만 Xcode는 또한 문서 창에서 직접 문서를 내보내고 가져오는 것을 지원합니다.

00:20:34.000 --> 00:20:36.000
이제 그걸 살펴봅시다.

00:20:36.000 --> 00:20:44.000
먼저 마우스를 창의 네비게이터로 이동하여 문서 창에서 SlothCreator를 내보낼 것입니다.

00:20:44.000 --> 00:20:50.000
SlothCreator 프레임워크 항목 위에 마우스를 올려놓으면 상황에 맞는 메뉴 아이콘이 나타납니다.

00:20:50.000 --> 00:20:55.000
나는 그것을 클릭할 것이고, 이제 내보낼 수 있는 옵션이 있다.

00:20:55.000 --> 00:20:57.000
그냥 내 데스크톱에 저장할게.

00:20:57.000 --> 00:20:59.000
좋아.

00:20:59.000 --> 00:21:06.000
이제 동료들에게 보낼 준비가 되었고, 아카이브를 두 번 클릭하면 Xcode의 문서 창에서 열립니다.

00:21:06.000 --> 00:21:12.000
하지만 저는 이미 SlothCreator에 대해 알고 있기 때문에, 다른 문서 아카이브를 열고 싶습니다.

00:21:12.000 --> 00:21:24.000
저는 최근에 팀과 SlothCreator에 명령줄 인터페이스를 추가하는 것이 좋을 것이라고 논의하고 있으며, 제 동료 중 한 명은 ArgumentParser가 도움이 될 수 있는 훌륭한 오픈 소스 프레임워크라고 언급했습니다.

00:21:24.000 --> 00:21:29.000
그들은 나에게 ArgumentParser에 대한 최신 문서 아카이브를 보냈으니, 지금 열어보자.

00:21:29.000 --> 00:21:37.000
문서 아카이브를 두 번 클릭하면 바로 학습을 시작할 수 있습니다.

00:21:37.000 --> 00:21:43.000
문서화는 성공적이고 오래 지속되는 프레임워크를 개발하는 데 핵심이다.

00:21:43.000 --> 00:21:48.000
우리는 당신이 소스에서 직접 문서를 작성하는 것이 정말 편리하고 강력하다고 생각합니다.

00:21:48.000 --> 00:21:59.000
그리고 DocC 통합과 함께 Xcode 13의 새로운 기능, 훌륭한 문서를 작성하는 모든 노력은 새롭고 강력한 방식으로 결실이 될 것입니다.

00:21:59.000 --> 00:22:05.000
WWDC에는 문서를 다음 단계로 끌어올리는 데 도움이 되는 몇 가지 다른 세션이 있습니다.

00:22:05.000 --> 00:22:16.000
"Xcode에서 DocC 문서를 높이세요"는 이 세션이 중단되는 지점을 선택하며, 문서 카탈로그를 추가하여 문서를 더 잘 구성하는 방법을 보여줍니다.

00:22:16.000 --> 00:22:29.000
앞서 언급한 "DocC 문서를 호스팅하고 자동화하세요"는 문서를 기존 지속적인 통합 설정에 통합하는 방법과 온라인으로 문서를 호스팅하는 방법을 설명합니다.

00:22:29.000 --> 00:22:44.000
마지막으로, 단계별 지침의 혜택을 받을 수 있는 프레임워크의 더 복잡한 부분이 있다면, "DocC에서 대화형 튜토리얼 빌드"를 확인하는 것이 좋습니다.

00:22:44.000 --> 00:22:45.000
봐줘서 고마워.

00:22:45.000 --> 23:59:59.000
[타격적인 음악].

