WEBVTT

00:00:01.000 --> 00:00:21.000
안녕하세요, 제 이름은 폴 보로호프이고, 저는 스위프트UI 맥 팀의 엔지니어입니다.

00:00:21.000 --> 00:00:29.000
저는 나중에 현지화 팀의 동료 케이트 코노넨코와 합류할 것이며, SwiftUI 앱을 현지화하는 방법에 대해 이야기할 것입니다.

00:00:29.000 --> 00:00:34.000
이 과정을 설명하기 위해, 우리는 당신이 전에 보았을 수도 있는 Fruta 샘플 앱을 사용할 것입니다.

00:00:34.000 --> 00:00:42.000
이 응용 프로그램을 사용하면 스무디 메뉴를 찾아보고, 주문하고, 집에서 만들 수 있는 레시피를 볼 수 있습니다.

00:00:42.000 --> 00:00:55.000
이 강연에서, 우리는 앱에 러시아어 현지화를 추가할 것입니다. 왜냐하면 그것은 나와 케이트의 모국어이기 때문입니다. 왜냐하면 그것은 당신이 자신의 앱에서 사용해야 할 다른 현지화 모범 사례에 대한 좋은 쇼케이스이기 때문입니다.

00:00:55.000 --> 00:01:02.000
우리는 SwiftUI에서 문자열이 어떻게 현지화되는지, 그리고 일반적인 디자인 함정을 피하는 것이 얼마나 쉬운지에 대한 몇 가지 기본 사항을 살펴볼 것입니다.

00:01:02.000 --> 00:01:10.000
우리는 문자열과 데이터를 스타일링하고 포맷하는 기술에 대해 논의하고, 키보드 단축키 현지화에 대한 몇 가지 개선 사항을 다룰 것입니다.

00:01:10.000 --> 00:01:19.000
마지막으로, 케이트는 앱을 그 어느 때보다 쉽게 현지화할 수 있도록 Xcode의 현지화 워크플로우에 대한 개선 사항을 시연할 것입니다.

00:01:19.000 --> 00:01:29.000
애플리케이션을 현지화하는 가장 중요한 부분 중 하나는 UI의 다양한 부분의 문자열이 번역기에 노출되고 런타임에 올바르게 렌더링되도록 하는 것입니다.

00:01:29.000 --> 00:01:37.000
SwiftUI는 문자열 리터럴이 있는 텍스트를 사용하면 메인 번들에서 지역화된 문자열 조회를 자동으로 수행하기 때문에 이를 쉽게 할 수 있습니다.

00:01:37.000 --> 00:01:45.000
이 예에서는 러시아어 문자열 파일의 번역에 따라 런타임에 자동으로 현지화되는 완료 버튼이 있습니다.

00:01:45.000 --> 00:01:56.000
이것은 또한 문자열 보간에도 작동하므로 변수를 문자열에 포함할 수 있으며 내보낸 로컬라이제이 가능한 문자열 파일과 카탈로그의 형식 지정자로 자동으로 변환됩니다.

00:01:56.000 --> 00:02:05.000
Xcode 13의 새로운 기능, 우리는 이제 문자열에 전달되는 변수의 유형에 따라 형식 지정자 유형을 자동으로 추론합니다.

00:02:05.000 --> 00:02:10.000
텍스트는 더 많은 제어가 필요한 경우를 대비하여 테이블 이름과 번들에 대한 추가 선택적 인수를 허용합니다.

00:02:10.000 --> 00:02:17.000
이 예에서, 우리는 모든 성분 관련 문자열을 "성분"이라는 별도의 테이블에 배치했습니다.

00:02:17.000 --> 00:02:28.000
스무디의 실제 재료 외에도, 우리는 스무디 보기와 레시피 보기에서 두 가지 다른 맥락에 대한 "성분"이라는 단어의 두 가지 변형을 이 문자열 표에 배치했습니다.

00:02:28.000 --> 00:02:34.000
보시다시피, 러시아어는 이 두 단어가 문맥에 따라 다르게 번역되어야 하기 때문에 이것을 했습니다.

00:02:34.000 --> 00:02:39.000
"현지화된 문자열 간소화" 토크에서 문자열을 구성하는 방법에 대해 자세히 알아볼 수 있습니다.

00:02:39.000 --> 00:02:45.000
이 모든 것은 텍스트의 첫 번째 인수가 LocalizedStringKey 유형이기 때문에 작동합니다.

00:02:45.000 --> 00:02:54.000
문자열 리터럴을 허용하는 사용자 지정 뷰와 메소드가 있다면, 문자열 대신 이 유형을 사용하여 현지화할 수 있습니다.

00:02:54.000 --> 00:03:05.000
이렇게 하면, 이러한 뷰와 함수에 인수로 전달되는 리터럴은 Xcode 현지화 내보내기 프로세스 중에 자동으로 추출된 다음 런타임에 번들에서 로드됩니다.

00:03:05.000 --> 00:03:11.000
버튼 예제에서 앞서 본 다른 접근 방식은 당신의 견해가 대신 텍스트 인수를 받아들이도록 하는 것입니다.

00:03:11.000 --> 00:03:19.000
LocalizedStringKey를 사용하면 미리보기 공급자에서 환경의 로케일을 지정하여 여러 로케일을 한 번에 미리 볼 수 있습니다.

00:03:19.000 --> 00:03:29.000
NSLocalizedString으로 로드된 문자열을 포함하여 모든 현지화된 문자열을 미리 보고 싶다면, 케이트가 나중에 보여줄 것처럼 스킴 편집기에서 언어를 변경할 수 있습니다.

00:03:29.000 --> 00:03:36.000
Xcode 13의 새로운 기능, 현지화를 위해 프로젝트를 내보내면 실제로 모든 대상을 구축하여 현지화 가능한 문자열을 찾을 수 있습니다.

00:03:36.000 --> 00:03:43.000
이것이 실제로 의미하는 바는 Xcode가 현지화 가능한 콘텐츠를 찾고 현지화를 위해 추출하는 것을 훨씬 더 잘 할 수 있다는 것이다.

00:03:43.000 --> 00:03:47.000
그래서 우리가 멀티라인 문자열을 가진 코드를 가지고 있다고 상상해 보세요.

00:03:47.000 --> 00:03:54.000
컴파일러는 이제 현지화된 콘텐츠를 추출하는 데 사용되기 때문에, 이 멀티라인 문자열 리터럴은 올바르게 구문 분석됩니다.

00:03:54.000 --> 00:04:01.000
이제 SwiftUI를 통해 현지화 친화적인 레이아웃으로 앱을 쉽게 만들 수 있는 방법을 살펴보겠습니다.

00:04:01.000 --> 00:04:12.000
문자열 조회와 마찬가지로, SwiftUI가 제공하는 기본 레이아웃 동작은 현지화를 염두에 두고 설계되었으며, 대부분의 경우 추가적인 노력이 필요하지 않습니다.

00:04:12.000 --> 00:04:20.000
예를 들어, 적절한 경우, 텍스트가 있는 컨트롤은 더 긴 라벨이 있는 언어로 클립되거나 잘리지 않도록 래핑됩니다.

00:04:20.000 --> 00:04:26.000
이 경우, 스무디 이름은 더 길기 때문에 러시아어로 두 번째 줄로 싸여 있다.

00:04:26.000 --> 00:04:30.000
레이아웃은 오른쪽에서 왼쪽 언어로도 자동으로 뒤집힌다.

00:04:30.000 --> 00:04:37.000
스크린샷에서 테이블 셀 레이아웃이 뒤집혔고, 탭 표시줄의 기호도 적절한 경우 미러링된 것을 볼 수 있습니다.

00:04:37.000 --> 00:04:49.000
그리고 기본값에서 벗어나기 위해 무언가를 사용자 정의해야 하는 경우에도, 우리가 제공하는 옵션은 VStacks에서 왼쪽이 아닌 선도적인 정렬을 제공하는 것과 같은 현지화 친화적인 솔루션으로 안내합니다.

00:04:49.000 --> 00:04:56.000
다음으로, 앱을 빌드할 때, UI에 표시되는 현지화된 텍스트의 스타일을 지정해야 할 수도 있습니다.

00:04:56.000 --> 00:05:02.000
이것을 더 쉽게 하기 위해, 우리는 마크다운을 사용하여 지역화 가능한 문자열을 스타일링하는 기능을 도입했습니다.

00:05:02.000 --> 00:05:11.000
이것은 현지화된 문자열에 스타일링을 적용하는 것을 크게 단순화하고 번역가에게 그들의 언어에 적합한 스타일을 적용할 수 있는 능력을 제공합니다.

00:05:11.000 --> 00:05:23.000
예를 들어, 아랍어에는 이탤릭체 개념이 없으므로, 영어 문자열에서 강조를 사용하더라도, 번역가는 번역에서 강한 강조와 같은 다른 치료법을 사용할 수 있습니다.

00:05:23.000 --> 00:05:31.000
이 경우, 우리의 러시아어 번역가는 원래 영어 설명의 의도와 일치하도록 문자열에서 가장 관련성이 높은 단어 주위에 마크업을 적용할 수 있었습니다.

00:05:31.000 --> 00:05:41.000
그리고 이 지원이 기초에 존재하지만, SwiftUI는 스타일이 지정된 문자열을 표시할 텍스트에 직접 전달하여 특히 쉽게 활용할 수 있습니다.

00:05:41.000 --> 00:05:48.000
"What's New in Foundation"과 SwiftUI 회담을 확인하여 텍스트 스타일링에 대해 자세히 알아볼 수 있습니다.

00:05:48.000 --> 00:05:55.000
앱에서 접하게 될 또 다른 일반적인 시나리오는 언어와 지역에 적합한 방식으로 데이터를 포맷해야 한다는 것입니다.

00:05:55.000 --> 00:06:03.000
사용하기 쉽고 Text 및 TextField와 긴밀하게 통합되는 새로운 포맷 API를 사용하면 이 작업을 수행할 수 있습니다.

00:06:03.000 --> 00:06:07.000
Fruta에서, 우리는 UI의 여러 장소에서 칼로리 수를 보여줍니다.

00:06:07.000 --> 00:06:14.000
과거에는 여기 슬라이드에 있는 것과 유사한 포맷된 값을 표시하기 위해 측정 포맷터를 만들어야 했습니다.

00:06:14.000 --> 00:06:20.000
이제, 우리는 값이 표시되는 위치와 직접 함께 선언적인 방식으로 형식을 지정할 수 있습니다.

00:06:20.000 --> 00:06:26.000
이것은 읽기 쉬울 뿐만 아니라, 이전 슬라이드의 코드보다 더 성능이 높을 수 있다.

00:06:26.000 --> 00:06:32.000
"What's New in Foundation" 강연에서 이러한 새로운 포맷 API에 대해 자세히 알아볼 수 있습니다.

00:06:32.000 --> 00:06:41.000
마지막으로, 초보자와 고급 사용자 모두가 Mac과 iPad 모두에서 작업을 더 빨리 수행할 수 있는 키보드 단축키를 고려해 봅시다.

00:06:41.000 --> 00:06:52.000
macOS와 iPadOS의 새로운 기능인 SwiftUI 앱에서 정의한 모든 키보드 단축키는 이제 사용자의 현재 활성 키보드 레이아웃에 입력할 수 있도록 자동으로 조정됩니다.

00:06:52.000 --> 00:06:58.000
예를 들어, 즐겨찾기 목록에 스무디를 추가하려면, "Command plus"를 입력하여 그렇게 할 수 있습니다.

00:06:58.000 --> 00:07:07.000
이것은 미국 레이아웃에서 잘 작동하며, 조합은 정확히 두 개의 키 누르기, 명령 및 플러스 키를 필요로 합니다.

00:07:07.000 --> 00:07:12.000
그러나, 리투아니아어 키보드 레이아웃을 사용하는 경우, 더하기 키에 도달하는 것은 그렇게 쉽지 않습니다.

00:07:12.000 --> 00:07:17.000
먼저 백틱 키를 누른 다음, "Shift equals"를 눌러야 합니다.

00:07:17.000 --> 00:07:23.000
설상가상으로, 이 조합은 실제로 명령 키를 누른 상태에서 입력할 수 없습니다.

00:07:23.000 --> 00:07:40.000
하지만 macOS Monterey와 iPadOS 15의 리매핑 기능 덕분에 리투아니아 키보드 레이아웃이 활성화되면 바로 가기가 "Command ž"로 변경되며 사용자는 현재 어떤 키보드 레이아웃을 사용하든 키보드 단축키를 사용하여 즐겨찾기에 스무디를 추가할 수 있습니다.

00:07:40.000 --> 00:07:45.000
그리고 여기 가장 좋은 부분이 있습니다, 개발자로서 당신은 아무것도 할 필요가 없습니다, 그냥 작동합니다.

00:07:45.000 --> 00:07:57.000
그리고 그것으로, 케이트에게 넘기겠습니다. 케이트는 Xcode 13의 현지화 워크플로우에 대한 개선 사항을 보여주고 제가 방금 다룬 모범 사례와 새로운 API를 시연할 것입니다.

00:07:57.000 --> 00:07:58.000
고마워, 폴.

00:07:58.000 --> 00:08:01.000
안녕하세요, 저는 현지화 팀의 엔지니어인 케이트입니다.

00:08:01.000 --> 00:08:06.000
SwiftUI 앱을 현지화하는 것이 얼마나 쉬운지 알아봅시다.

00:08:06.000 --> 00:08:08.000
여기 Fruta 샘플 앱이 있습니다.

00:08:08.000 --> 00:08:15.000
우리는 전 세계 사람들이 모국어로 스무디를 주문할 수 있도록 하고 싶습니다.

00:08:15.000 --> 00:08:18.000
오늘, 나는 러시아어 현지화를 추가할 것이다.

00:08:18.000 --> 00:08:29.000
그래서, 먼저, 프로젝트 네비게이터에서 프로젝트로 이동한 다음, 프로젝트 편집기에서 "Fruta"를 선택하고, 정보 탭에서 현지화를 추가할 수 있습니다.

00:08:29.000 --> 00:08:35.000
macOS와 함께 제공되는 모든 현지화는 여기에 알파벳순으로 나열되어 있습니다.

00:08:35.000 --> 00:08:44.000
Xcode 12.5에서, 우리는 목록 하단의 "더 많은 언어" 하위 메뉴에 수백 개의 언어와 지역 변형을 추가했습니다.

00:08:44.000 --> 00:08:47.000
난 그냥 "러시아어"를 선택할 거야.

00:08:47.000 --> 00:08:57.000
폴이 언급했듯이, Xcode 13은 스위프트 컴파일러의 새로운 기술을 사용하여 스위프트 코드에서 문자열 추출을 크게 단순화합니다.

00:08:57.000 --> 00:09:07.000
Fruta는 SwiftUI로 작성되었으므로, "Use Compiler to Extract Swift Strings" 빌드 설정이 "Yes"로 설정되어 있는지 확인하고 싶습니다.

00:09:07.000 --> 00:09:15.000
이것은 새로운 Swift 프로젝트에 대해 기본적으로 활성화되어 있지만, 기존 프로젝트가 SwiftUI를 사용하는 경우 이 설정을 선택할 수 있습니다.

00:09:15.000 --> 00:09:27.000
현지화를 위해 내보낼 때, Xcode는 내 프로젝트의 모든 대상을 구축하고 컴파일러 유형 정보를 사용하여 SwiftUI 코드에서 LocalizedStringKeys를 추출합니다.

00:09:27.000 --> 00:09:36.000
내보내기 전에 SwiftUI Previews에서 의사 언어를 사용하여 어떤 문자열이 현지화 가능하고 어떤 문자열을 놓쳤는지 확인할 수 있습니다.

00:09:36.000 --> 00:09:43.000
그래서, 저는 계획 편집기로 가서 옵션 탭에서 앱 언어를 클릭하세요.

00:09:43.000 --> 00:09:56.000
내 앱에서 지원하는 모든 언어는 여기 상단에 나열되어 있지만, 하단까지 가서 Accented Pseudolanguage를 선택할 것입니다.

00:09:56.000 --> 00:10:03.000
악센트가 있는 의사 언어는 UI의 소스 문자열에 다른 악센트를 추가합니다.

00:10:03.000 --> 00:10:07.000
이제, 나는 모든 재료가 사이비로컬화되었다는 것을 알 수 있다.

00:10:07.000 --> 00:10:16.000
측정은 포맷되어 있기 때문에 의사로컬화되지 않지만, 스테퍼뷰는 의사로컬화되어야 한다.

00:10:16.000 --> 00:10:19.000
이 문자열을 현지화할 수 있게 합시다.

00:10:19.000 --> 00:10:27.000
StepperView는 "라벨" 문자열을 가져와 텍스트 보기로 전달하는 사용자 지정 SwiftUI 보기입니다.

00:10:27.000 --> 00:10:33.000
현지화가 필요한 사용자 지정 SwiftUI 보기에서는 LocalizedStringKey를 사용해야 합니다.

00:10:33.000 --> 00:10:41.000
지금 그것이 사이비 현지화되었는지 확인합시다.

00:10:41.000 --> 00:10:42.000
좋아!

00:10:42.000 --> 00:10:48.000
이제 이 문자열은 현지화할 수 있기 때문에, 복수형을 제대로 처리하는지 확인해야 합니다.

00:10:48.000 --> 00:10:57.000
이 코드는 영어로 "smoothie"를 복수화하는 데 작동하지만, 모든 단어에서 작동하지는 않을 것이며 모든 언어에서 작동하지 않을 것이다.

00:10:57.000 --> 00:11:00.000
대신 stringsdict를 사용하자.

00:11:00.000 --> 00:11:06.000
Stringsdict 파일은 언어의 복수 변형에 대해 다른 번역을 제공할 수 있다.

00:11:06.000 --> 00:11:14.000
Stringsdict를 사용하는 방법에 대한 자세한 내용은 "현지화된 문자열 간소화" 비디오를 확인하세요.

00:11:14.000 --> 00:11:26.000
여기 파일이 준비되어 있어서, 그냥 내 프로젝트로 드래그할게...

00:11:26.000 --> 00:11:30.000
그리고 현지화를 위해 표시하세요.

00:11:30.000 --> 00:11:33.000
이제 현지화를 위해 수출합시다.

00:11:33.000 --> 00:11:43.000
Xcode 12.5부터 제품 메뉴에서 프로젝트와 작업 공간의 현지화를 내보내고 가져올 수 있습니다.

00:11:43.000 --> 00:11:50.000
그래서 저는 현지화 내보내기를 클릭하고, 데스크톱에 저장해 봅시다.

00:11:50.000 --> 00:12:00.000
이제, Xcode는 내 프로젝트를 구축하고 있으며 그것을 러시아어로 번역하기 위해 자원한 Paul에게 보낼 준비가 된 Xcode 현지화 카탈로그를 만들 것이다.

00:12:00.000 --> 00:12:10.000
WWDC 2018의 "Xcode 10의 새로운 현지화 워크플로우" 강연에서 Xcode 현지화 카탈로그에 대해 자세히 알아볼 수 있습니다.

00:12:10.000 --> 00:12:15.000
번역을 위해 보내기 전에 무엇을 내보냈는지 다시 확인해 봅시다.

00:12:15.000 --> 00:12:22.000
Xcode 13부터 Xcode 현지화 카탈로그는 작업하기가 훨씬 더 편리합니다.

00:12:22.000 --> 00:12:27.000
파인더에서 카탈로그를 두 번 클릭하고 Xcode에서 열 수 있습니다.

00:12:27.000 --> 00:12:42.000
이것은 자신의 앱을 현지화하거나, 현지화를 위해 콘텐츠를 보내기 전에 문자열이나 스크린샷을 확인하거나, 특정 언어에 대한 번역을 수정하는 경우 매우 유용합니다.

00:12:42.000 --> 00:12:48.000
여기 편집기에서 현지화가 필요한 모든 파일을 볼 수 있습니다.

00:12:48.000 --> 00:12:53.000
파일을 선택하면, 번역기처럼 모든 문자열을 볼 수 있습니다.

00:12:53.000 --> 00:12:59.000
키, 소스 문자열, 번역 및 주석.

00:12:59.000 --> 00:13:03.000
난 그냥 여기를 훑어보고 모든 게 괜찮아 보이는지 볼 거야.

00:13:03.000 --> 00:13:07.000
지금 당장, 나는 몇 가지 문제를 볼 수 있다.

00:13:07.000 --> 00:13:11.000
먼저, 우리는 "%lf 칼로리" 문자열을 수출했다.

00:13:11.000 --> 00:13:17.000
다른 지역이 칼로리를 측정하기 위해 다른 단위를 사용하기 때문에 그 문자열은 포맷되어야 한다.

00:13:17.000 --> 00:13:21.000
나는 그것을 고치기 위해 코드를 바꿔야 할 것이다.

00:13:21.000 --> 00:13:34.000
문자열이 추출된 NutritionFactView에서 문자열 대신 NutritionFacts 구조체의 측정 유형에서 "포맷된" 방법을 사용할 수 있습니다.

00:13:34.000 --> 00:13:41.000
우리가 음식 칼로리를 측정하고 있기 때문에 나는 넓은 포맷을 사용하고 사용량을 "음식"으로 설정할 것이다.

00:13:41.000 --> 00:13:45.000
이것은 모든 지역의 단위를 포맷하는 것을 처리할 것이다.

00:13:45.000 --> 00:13:47.000
그건 쉬운 해결책이었어.

00:13:47.000 --> 00:13:53.000
내 줄을 검토하는 것으로 돌아가자.

00:13:53.000 --> 00:14:01.000
오, 번역가들은 변수 이름을 볼 수 없어서, "%@ 레시피 구매"와 같은 문자열이 혼란스러울 수 있습니다.

00:14:01.000 --> 00:14:06.000
특정 가격에 레시피를 사는 건가요, 아니면 친구에게 선물하는 건가요?

00:14:06.000 --> 00:14:12.000
다른 모호한 문자열이 있는지 봅시다.

00:14:12.000 --> 00:14:20.000
"즐겨찾기"는 동사라는 댓글이 있지만, 명사임을 분명히 알 수 있도록 "즐겨찾기"에 댓글을 추가해야 합니다.

00:14:20.000 --> 00:14:25.000
나는 그 둘 다에 대한 코드에 주석을 추가할 것이다.

00:14:25.000 --> 00:14:31.000
먼저 "구매 레시피" 문자열을 처리합시다.

00:14:31.000 --> 00:14:33.000
우리가 간다.

00:14:33.000 --> 00:14:41.000
"즐겨찾기" 문자열은 내 탭 바 항목에 있으므로, 그것에 대한 코멘트도 추가합시다.

00:14:41.000 --> 00:14:43.000
탭 바 항목은 라벨 보기입니다.

00:14:43.000 --> 00:14:51.000
SwiftUI에서 주석을 추가하려면 텍스트 보기로 라벨을 초기화해야 합니다.

00:14:51.000 --> 00:14:57.000
이와 같은 댓글을 추가하는 것은 고품질 현지화를 보장하는 데 정말 중요하다.

00:14:57.000 --> 00:15:01.000
나는 내 번역가들이 혼란스러워하고 내 말이 무슨 뜻인지 추측하는 것을 원하지 않는다.

00:15:01.000 --> 00:15:05.000
알았어, 내가 다 고친 것 같아.

00:15:05.000 --> 00:15:12.000
새로운 카탈로그를 내보내서 폴에게 보낼 시간이다.

00:15:12.000 --> 00:15:18.000
와, 그건 빨랐어.

00:15:18.000 --> 00:15:22.000
폴은 번역가의 애플 실리콘이야!

00:15:22.000 --> 00:15:27.000
그가 돌려보낸 것을 잠깐 살펴보자.

00:15:27.000 --> 00:15:31.000
여기서, 나는 모든 번역을 볼 수 있다.

00:15:31.000 --> 00:15:36.000
내가 추가한 스무디 스테퍼의 stringsdict가 있어.

00:15:36.000 --> 00:15:41.000
좋아 보인다. 이것을 가져와서 앱이 러시아어로 어떻게 생겼는지 봅시다.

00:15:41.000 --> 00:15:51.000
가져오려면, 제품 메뉴로 이동하여 현지화 가져오기를 클릭한 다음 Paul의 카탈로그를 선택합니다.

00:15:51.000 --> 00:15:53.000
내 모든 현은 지금 현지화되어야 해.

00:15:53.000 --> 00:15:57.000
macOS용 러시아어로 앱을 만들고 실행해 봅시다.

00:15:57.000 --> 00:16:09.000
먼저, 계획을 macOS로 변경한 다음 언어를 러시아어로 변경할 수 있습니다.

00:16:09.000 --> 00:16:15.000
좋아, 실행하자.

00:16:15.000 --> 00:16:21.000
와, 그 앱은 러시아어로 멋져 보이고, 모든 스무디는 맛있어 보여.

00:16:21.000 --> 00:16:27.000
나는 그들 모두의 재료와 모든 영양가를 볼 수 있다.

00:16:27.000 --> 00:16:33.000
난 사실 이걸 주문할 것 같아.

00:16:33.000 --> 00:16:38.000
와, 정말 훌륭한 서비스야.

00:16:38.000 --> 00:16:44.000
SwiftUI의 현지화는 쉽게 설계되었으므로 코드 작성에 집중할 수 있습니다.

00:16:44.000 --> 00:16:49.000
다음은 앱을 개발할 때 명심해야 할 몇 가지 핵심 사항입니다.

00:16:49.000 --> 00:16:56.000
LocalizedStringKey는 번들에서 현지화된 문자열을 찾기 위해 SwiftUI에 신호를 보내는 특별한 유형입니다.

00:16:56.000 --> 00:17:01.000
사용자 지정 SwiftUI 보기에서 사용하여 현지화를 준비하세요.

00:17:01.000 --> 00:17:11.000
Xcode에서 현지화를 위해 내보낼 때 코드에서 LocalizedStringKeys를 추출하기 위해 "컴파일러를 사용하여 Swift Strings 추출" 빌드 설정을 활성화하십시오.

00:17:11.000 --> 00:17:17.000
코드를 국제화하기 위해 문자열을 포맷하고, 마크다운으로 스타일을 지정하세요.

00:17:17.000 --> 00:17:22.000
텍스트를 사용하여 추가 번역 컨텍스트에 대한 주석을 추가하세요.

00:17:22.000 --> 00:17:27.000
시청해 주셔서 감사합니다, 그리고 나머지 WWDC를 즐기세요!

00:17:27.000 --> 23:59:59.000
[음악].

