WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:13.000
안녕하세요, 제 이름은 Balraj이고, 저는 Xcode 팀의 엔지니어입니다.

00:00:13.000 --> 00:00:19.000
오늘, 저는 Xcode 13의 앱 배포에 대해 말씀드리고 싶습니다.

00:00:19.000 --> 00:00:34.000
앱을 배포하는 다양한 방법이 있으며, 오늘은 App Store Connect에 앱을 업로드하는 방법, App Store Connect 외부의 배포 옵션 및 배포를 자동화하는 방법에 대해 논의할 것입니다.

00:00:34.000 --> 00:00:49.000
나는 또한 Xcode 13의 배포 워크플로우에 추가한 새로운 기능을 검토할 것이므로, 앱을 배포하는 것이 처음이든 백 번째이든 이 세션의 콘텐츠가 가치가 있다는 것을 알게 될 것입니다.

00:00:49.000 --> 00:00:56.000
최근에, 나는 꽤 많은 베이킹을 해왔기 때문에, 다른 사람들이 베이커를 시작할 수 있도록 앱을 만드는 데 영감을 받았다.

00:00:56.000 --> 00:01:02.000
베이커는 사람들이 다양한 종류의 빵과 구운 음식을 만드는 것을 도울 것이다.

00:01:02.000 --> 00:01:12.000
저는 최근에 베이커 iOS 앱의 첫 번째 빌드를 완료하고, 광범위하게 테스트했으며, 피드백을 위해 베타 테스터에게 앱을 배포하고 싶습니다.

00:01:12.000 --> 00:01:21.000
베타 테스트를 위해, 저는 앱의 베타 빌드를 배포하고 피드백을 받는 서비스인 TestFlight에서 제 앱을 사용할 수 있기를 바랍니다.

00:01:21.000 --> 00:01:29.000
TestFlight에서 Baker 빌드를 사용할 수 있도록 하려면, 먼저 App Store Connect에 빌드를 업로드해야 합니다.

00:01:29.000 --> 00:01:36.000
App Store Connect는 TestFlight에서 Baker의 빌드를 관리하고 개발자 팀의 설정을 구성할 수 있는 곳입니다.

00:01:36.000 --> 00:01:41.000
App Store Connect는 또한 App Store를 위한 Baker의 빌드를 관리할 곳이다.

00:01:41.000 --> 00:01:51.000
따라서 TestFlight 또는 App Store에서 Baker를 사용할 수 있도록 하든, 먼저 Baker 빌드를 App Store Connect에 업로드해야 합니다.

00:01:51.000 --> 00:02:00.000
나는 Baker의 베타 빌드를 Xcode에서 바로 App Store Connect에 업로드할 것이므로, 배포 프로세스는 내가 앱을 개발했던 곳에서 바로 시작됩니다.

00:02:00.000 --> 00:02:12.000
Xcode 13에는 App Store Connect 또는 로컬 컴퓨터에서 설정을 수행하지 않고도 Baker를 업로드할 수 있는 배포의 흥미로운 새로운 변경 사항이 있습니다.

00:02:12.000 --> 00:02:20.000
Xcode 13의 첫 번째 새로운 추가 사항은 업로드하기 전에 Xcode에서 직접 앱 레코드를 만들 수 있다는 것입니다.

00:02:20.000 --> 00:02:26.000
다음으로, Xcode는 배포 과정에서 앱의 빌드 번호를 관리할 수 있습니다.

00:02:26.000 --> 00:02:36.000
그리고 마지막으로, 클라우드 서명을 통해 인증서와 개인 키는 클라우드에 저장되므로 자동 서명을 사용할 때 더 이상 로컬에서 수동으로 설정할 필요가 없습니다.

00:02:36.000 --> 00:02:42.000
Xcode에서 App Store Connect에 Baker 앱을 업로드하여 이 모든 것이 어떻게 작동하는지 살펴봅시다.

00:02:42.000 --> 00:02:46.000
저는 베이커 프로젝트를 열었고, 업로드할 준비가 되었습니다.

00:02:46.000 --> 00:02:51.000
내가 가장 먼저 필요한 것은 배포를 위해 처리할 수 있는 베이커 앱의 빌드이다.

00:02:51.000 --> 00:03:03.000
이러한 유형의 빌드를 수행하려면, Baker가 지원되는 모든 iOS 장치에서 실행될 수 있도록 해야 하기 때문에 먼저 도구 모음에서 모든 iOS 장치 실행 대상을 선택할 것입니다.

00:03:03.000 --> 00:03:08.000
그런 다음 메뉴 표시줄에서 제품을 선택하고 아카이브를 클릭하세요.

00:03:08.000 --> 00:03:18.000
아카이브는 배포할 때 사용될 앱과 팀에 대한 메타데이터가 포함된 애플리케이션의 개발자 서명 릴리스 빌드입니다.

00:03:18.000 --> 00:03:24.000
보관 작업이 완료되면, Xcode 주최자가 자동으로 나타납니다.

00:03:24.000 --> 00:03:30.000
구축된 아카이브는 자동으로 선택되며, 이는 내가 배포에 사용하고 싶은 것이다.

00:03:30.000 --> 00:03:42.000
오른쪽의 검사관에서 버전, 번들 ID, 팀 이름 및 배포를 위해 오른쪽 상단 모서리에 있는 큰 파란색 버튼과 같은 아카이브에 대한 정보도 볼 수 있습니다.

00:03:42.000 --> 00:03:56.000
아카이브를 저장하는 것 외에도, 주최자는 충돌, 에너지, 통찰력 및 지표와 같은 모든 앱에 대한 다양한 앱 분석을 볼 수 있는 곳이기도 합니다.

00:03:56.000 --> 00:04:03.000
베이커가 베타 테스트를 받고 있기 때문에, 나는 앱이 어떻게 실행되고 있는지에 대한 통찰력을 얻기 위해 확실히 여기에서 다시 확인할 것이다.

00:04:03.000 --> 00:04:10.000
배포를 시작하려면, 현재 선택한 아카이브를 사용하고 앱 배포 버튼을 클릭하겠습니다.

00:04:10.000 --> 00:04:16.000
배포의 첫 번째 단계는 내가 베이커를 어떻게 배포하고 싶은지 선택하는 것이다.

00:04:16.000 --> 00:04:22.000
App Store Connect는 기본 방법이며, 여기가 제가 업로드하고 싶은 곳이기 때문에 선택한 상태로 두겠습니다.

00:04:22.000 --> 00:04:32.000
Ad Hoc 및 Enterprise와 같이 이 창에 표시된 앱을 배포하는 다양한 추가 방법이 있으며, 나중에 더 자세히 살펴보겠습니다.

00:04:32.000 --> 00:04:40.000
App Store Connect에 계속 업로드하려면, 배포 도우미의 오른쪽 하단 모서리에 있는 다음을 클릭할 것입니다.

00:04:40.000 --> 00:04:46.000
그리고 나서 나는 업로드할지 내보내고 싶은지 묻는 단계로 넘어갔다.

00:04:46.000 --> 00:05:00.000
업로드는 내 아카이브를 가지고 업로드를 위해 패키지된 앱의 형식인 IPA에 서명하고 생성하여 App Store Connect로 보내는 반면, Export는 IPA를 구축하고 정확히 같은 방식으로 콘텐츠에 서명합니다.

00:05:00.000 --> 00:05:08.000
유일한 차이점은 Xcode가 IPA를 App Store Connect에 업로드하지 않고 컴퓨터의 지정된 디렉토리로 이동한다는 것입니다.

00:05:08.000 --> 00:05:13.000
이 IPA는 나중에 Transporter를 사용하여 App Store에 제출할 수 있습니다.

00:05:13.000 --> 00:05:20.000
지금 당장 베이커를 앱스토어 커넥트에 업로드하고 싶기 때문에, 업로드를 선택한 상태로 두고 다음을 클릭하여 계속할 것입니다.

00:05:20.000 --> 00:05:26.000
Xcode는 이제 App Store Connect 상태를 확인하고 다양한 배포 설정 단계를 수행합니다.

00:05:26.000 --> 00:05:37.000
Xcode 13의 새로운 기능, Baker의 실제 빌드를 업로드하기 전에 필요한 App Store Connect에서 앱 레코드를 만드는 프롬프트가 표시됩니다.

00:05:37.000 --> 00:05:49.000
앱 레코드 생성 단계는 베이커 아카이브 및 시스템 설정에서 파생된 앱 이름, 번들 ID 및 기본 언어와 같은 속성에 대한 기본값을 제공합니다.

00:05:49.000 --> 00:05:54.000
저는 기본 옵션에 만족하기 때문에, 다음을 클릭하겠습니다.

00:05:54.000 --> 00:05:58.000
Xcode는 이제 App Store Connect에서 필요한 앱 레코드를 생성합니다.

00:05:58.000 --> 00:06:09.000
앱 레코드는 베이커의 업로드된 모든 빌드를 볼 수 있는 곳이며 TestFlight, 인앱 구매, 가격 정보 등을 설정할 수 있는 곳입니다.

00:06:09.000 --> 00:06:15.000
Baker 앱 레코드는 이제 App Store Connect에서 사용할 수 있으며 앱 목록에서 볼 수 있습니다.

00:06:15.000 --> 00:06:25.000
새로 생성된 베이커 앱 레코드는 베이커의 모든 빌드가 관리되는 곳이 될 것이므로, 후속 업로드를 수행할 때 새 앱 레코드를 다시 만들 필요가 없습니다.

00:06:25.000 --> 00:06:39.000
Xcode가 Baker 앱 레코드를 만들고 App Store Connect 설정을 확인한 후, 아카이브의 내용과 앱 배포 방법에 따라 결정되는 옵션 목록이 제공됩니다.

00:06:39.000 --> 00:06:56.000
비트코드를 위해 빌드하고 싶습니다. 내 앱의 충돌 보고서가 상세하고 설명되도록 기호를 포함하고 싶습니다. 베이커의 빌드 번호가 모든 프레임워크에서 일관성이 있는지 확인하고 싶습니다. 따라서 기본값을 선택하고 다음을 클릭하여 계속하시겠습니까.

00:06:56.000 --> 00:07:00.000
나는 이제 베이커에 어떻게 서명하고 싶은지 묻는 페이지로 끌려갔다.

00:07:00.000 --> 00:07:08.000
서명은 베이커가 신뢰할 수 있는 개발자로부터 왔는지 확인하고 소프트웨어가 안전하게 실행되도록 하는 데 사용됩니다.

00:07:08.000 --> 00:07:13.000
나에게 제공된 두 가지 옵션은 자동 서명과 수동 서명이다.

00:07:13.000 --> 00:07:21.000
자동 서명을 통해 Xcode는 서명을 처리할 수 있으며, 수동은 서명 프로세스를 완전히 제어하고 싶을 때를 위한 것입니다.

00:07:21.000 --> 00:07:27.000
Xcode가 서명을 처리하기를 원하므로, 자동 서명을 계속 확인하고 다음을 클릭하여 계속하겠습니다.

00:07:27.000 --> 00:07:33.000
Xcode는 이제 베이커 아카이브를 IPA로 변환하고 배포를 위해 서명할 것이다.

00:07:33.000 --> 00:07:41.000
배포 워크플로우의 자동 서명은 로컬 기계 설정 없이 서명이 작동하게 하는 몇 가지 흥미로운 변화를 겪었습니다.

00:07:41.000 --> 00:07:48.000
서명 과정에는 내가 신뢰할 수 있는 개발자임을 확인하기 위해 인증서와 개인 키가 필요합니다.

00:07:48.000 --> 00:08:01.000
로컬로 서명할 때, 내 컴퓨터에 배포 인증서와 개인 키가 설치되어 있는지 확인해야 하며, 이는 종종 배포 워크플로우에 들어가기 전에 수동 설정이 필요합니다.

00:08:01.000 --> 00:08:08.000
Xcode 13에서 자동 서명을 사용할 때 인증서 설정이 필요하지 않습니다.

00:08:08.000 --> 00:08:16.000
인증서와 개인 키는 이제 서명 작업이 이루어지는 클라우드에 안전하게 저장할 수 있습니다.

00:08:16.000 --> 00:08:21.000
이것은 자동 서명을 사용할 때 인증서를 전혀 설정할 필요가 없다는 것을 의미합니다.

00:08:21.000 --> 00:08:31.000
이 새로운 스타일의 서명은 App Store 업로드, 개발자 ID 및 엔터프라이즈 배포와 같은 Xcode의 모든 배포 방법에서 지원됩니다.

00:08:31.000 --> 00:08:37.000
클라우드 서명은 모든 서명 자산을 관리하고 앱에 서명함으로써 무대 뒤에서 완전히 작동합니다.

00:08:37.000 --> 00:08:40.000
이것이 어떻게 작동하는지 더 자세히 살펴봅시다.

00:08:40.000 --> 00:08:48.000
Xcode는 개발자가 서명한 베이커 앱을 아카이브에 넣고 부분 서명을 생성합니다.

00:08:48.000 --> 00:08:53.000
이 부분 서명에는 앱 내 콘텐츠의 해시가 포함되어 있습니다.

00:08:53.000 --> 00:09:02.000
그런 다음 해당 해시 사본이 서버로 전송되며, 서버는 개인 키와 인증서를 사용하여 클라우드에서 앱에 서명합니다.

00:09:02.000 --> 00:09:12.000
그런 다음 서명의 나머지 부분을 반환하고 서명 과정을 완료하기 위해 부분 서명에 삽입합니다.

00:09:12.000 --> 00:09:23.000
이제 자동 및 클라우드 서명을 사용하여 App Store Connect에 업로드할 수 있는 완전히 배포 서명된 Baker 앱이 있습니다.

00:09:23.000 --> 00:09:31.000
App Store Connect에서 관리자 또는 계정 소유자 역할을 하는 사람은 누구나 기본적으로 App Store Connect 배포에 대한 클라우드 서명을 할 수 있습니다.

00:09:31.000 --> 00:09:43.000
개발자 역할을 가진 사람이 클라우드 서명을 사용하여 Baker를 업로드하기를 원한다면, 클라우드 관리 배포 인증서 액세스 확인란을 선택하여 App Store Connect에 대한 권한을 부여할 수 있습니다.

00:09:43.000 --> 00:09:54.000
Xcode는 이제 Baker 앱의 패키징 및 클라우드 서명을 완료했으며 App Store Connect에 업로드하기 전에 요약 페이지를 보여줍니다.

00:09:54.000 --> 00:10:03.000
사용된 인증서 유형, 버전 번호 및 Baker 앱이 서명된 자격과 같은 정보를 볼 수 있습니다.

00:10:03.000 --> 00:10:08.000
나는 내가 보는 것에 만족하기 때문에, 계속해서 업로드를 클릭할 것이다.

00:10:08.000 --> 00:10:14.000
이제, Xcode는 Baker의 첫 번째 빌드를 App Store Connect에 업로드할 것이다.

00:10:14.000 --> 00:10:22.000
이제, App Store Connect에 접속하면, 이전에 만든 앱 레코드 Xcode에서 Baker의 첫 번째 빌드를 볼 수 있습니다.

00:10:22.000 --> 00:10:27.000
여기서부터, 나는 TestFlight를 위해 Baker를 설정하고 베타 테스트를 시작할 수 있을 것이다.

00:10:27.000 --> 00:10:35.000
TestFlight용 App Store Connect 및 App Store에서 앱을 설정하는 방법에 대한 자세한 내용은 설명의 가이드를 참조하십시오.

00:10:35.000 --> 00:10:42.000
베이커가 TestFlight와 베타 테스트를 받은 후, 나는 많은 버그와 피드백을 해결했다.

00:10:42.000 --> 00:10:47.000
이제 필요한 업데이트와 함께 내 앱의 다른 빌드를 업로드하고 싶습니다.

00:10:47.000 --> 00:10:50.000
그 과정은 우리가 방금 겪은 것과 거의 똑같아 보인다.

00:10:50.000 --> 00:10:56.000
원하는 변경 사항으로 앱을 보관하고 Xcode Organizer를 통해 배포할 것입니다.

00:10:56.000 --> 00:10:59.000
두 가지 차이점이 있을 것이다.

00:10:59.000 --> 00:11:12.000
첫째, 앱 레코드를 다시 만들 필요가 없으며, 둘째, App Store Connect는 각 빌드를 유지하고 버전과 빌드 번호를 사용하여 차별화하기 때문에 Baker의 빌드 번호가 다른지 확인해야 합니다.

00:11:12.000 --> 00:11:18.000
보관하기 전에 프로젝트 파일의 빌드 번호를 수정하여 이것을 할 수 있습니다.

00:11:18.000 --> 00:11:25.000
하지만 내 빌드 번호를 관리하고 싶지 않다면, 배포 워크플로우는 이제 나를 위해 이것을 할 수 있다.

00:11:25.000 --> 00:11:39.000
Xcode 13의 새로운 기능, Xcode가 App Store Connect에서 이미 사용된 빌드 번호로 배포하고 있거나 증가하지 않는 경우, 아카이브의 빌드 번호를 유효한 것으로 증가시키는 것을 제안할 것입니다.

00:11:39.000 --> 00:11:46.000
Xcode가 선택한 빌드 번호를 보려면 버전 및 빌드 번호 관리 옵션을 살펴보세요.

00:11:46.000 --> 00:11:58.000
배포 워크플로우가 내 빌드 번호를 관리하도록 했기 때문에, 나는 Baker의 첫 번째 업로드와 정확히 같은 과정을 따랐고, 이제 App Store Connect에서 Baker의 두 번째 빌드를 가지고 있다.

00:11:58.000 --> 00:12:09.000
베타 빌드를 출시하고 피드백을 처리하는 이 주기는 App Store 출시에 필요한 원하는 품질을 충족하는 빌드가 있을 때까지 계속될 것입니다.

00:12:09.000 --> 00:12:22.000
App Store에서 Baker를 얻기 위해, App Store Connect에서 TestFlight 빌드 중 하나를 홍보하거나, 이전에 했던 것과 똑같은 방식으로 주최자의 다른 빌드를 App Store Connect에 업로드할 수 있습니다.

00:12:22.000 --> 00:12:30.000
베이커가 앱 스토어에 있으면, 베이커 앱에 새로운 기능, 버그 수정 및 개선 사항을 추가하는 작업을 계속할 수 있습니다.

00:12:30.000 --> 00:12:39.000
TestFlight 또는 App Store의 다음 업로드가 준비되면, Xcode에서 같은 과정을 다시 따를 수 있습니다.

00:12:39.000 --> 00:12:56.000
클라우드 서명, 앱 레코드 생성 및 빌드 번호 관리와 같은 Xcode 13의 배포 워크플로우에 새로 추가된 덕분에 이제 App Store Connect에서 사전 기계 설정이나 설정 없이 앱을 배포할 수 있습니다.

00:12:56.000 --> 00:13:00.000
이것은 당신의 앱을 그 어느 때보다 간소화되게 배포할 수 있게 합니다.

00:13:00.000 --> 00:13:05.000
Xcode는 다양한 배포 옵션을 제공합니다.

00:13:05.000 --> 00:13:11.000
Mac 앱을 시작으로 앱을 배포하기 위한 몇 가지 다른 옵션을 살펴봅시다.

00:13:11.000 --> 00:13:18.000
베이커를 포함한 대부분의 iOS 앱은 기본적으로 애플 실리콘 맥에서 사용할 수 있습니다.

00:13:18.000 --> 00:13:24.000
이 설정을 구성하려면, 베이커 앱 레코드의 개인 정보 보호 및 가용성 섹션으로 갈 수 있습니다.

00:13:24.000 --> 00:13:38.000
하지만 저는 베이커가 인텔 맥에서도 사용할 수 있기를 바랍니다. 그래서 저는 맥 카탈리스트 버전이나 베이커의 네이티브 맥 버전을 만들 수 있고, 그런 다음 제 앱을 전 세계에 배포하는 방법에 대한 두 가지 옵션이 있을 것입니다.

00:13:38.000 --> 00:13:48.000
iOS와 동일한 방식으로 클라우드에 서명하고 배포하여 Mac Baker 앱의 빌드를 Mac App Store에 배포할 수 있습니다.

00:13:48.000 --> 00:13:55.000
iOS 앱과 동일한 번들 ID를 사용하는 경우, 내 Mac 앱은 iOS 버전과 동일한 앱 레코드를 사용합니다.

00:13:55.000 --> 00:14:02.000
이것은 또한 인앱 구매와 같은 특정 기능이 두 플랫폼에서 공유된다는 것을 의미합니다.

00:14:02.000 --> 00:14:10.000
MacOS Monterey에서 새로 사용할 수 있기 때문에 TestFlight에서 Mac 앱을 사용할 수 있습니다.

00:14:10.000 --> 00:14:18.000
이것은 내가 모든 애플 플랫폼에서 베이커의 베타 테스트를 위해 TestFlight를 사용할 수 있다는 것을 의미한다.

00:14:18.000 --> 00:14:26.000
사람들이 Mac App Store 외부에서 Baker를 다운로드하기를 원한다면, 개발자 ID를 사용하여 앱을 배포하도록 선택할 수 있습니다.

00:14:26.000 --> 00:14:37.000
개발자 ID 배포 클라우드는 베이커에게 개발자 ID 인증서를 서명하고 공증으로 알려진 과정에서 맬웨어 검사를 위해 앱을 업로드합니다.

00:14:37.000 --> 00:14:44.000
베이커가 서명되고 공증되면, macOS는 앱이 모든 Mac에서 실행될 것이라고 믿을 것이다.

00:14:44.000 --> 00:14:53.000
개발자 ID 및 공증 사용 배포에 대한 자세한 내용은 "공증에 관한 모든 것" 세션을 참조하십시오.

00:14:53.000 --> 00:15:03.000
개발자 ID와 Mac App Store는 macOS를 위한 두 가지 주요 배포 방법이며, 둘 다 앱을 세상에 출시하기 위한 훌륭한 옵션입니다.

00:15:03.000 --> 00:15:13.000
이제 Mac에서 배포하는 다양한 방법을 살펴보았습니다. iOS에서 앱을 배포하는 몇 가지 방법을 더 살펴보겠습니다.

00:15:13.000 --> 00:15:18.000
가끔, 나는 내 팀원들에게 베이커의 배포 서명 빌드를 직접 보내고 싶다.

00:15:18.000 --> 00:15:26.000
이것은 버그 수정 테스트, 실험적인 새로운 기능 테스트 또는 기타 다양한 이유로 수행될 수 있습니다.

00:15:26.000 --> 00:15:30.000
이 사용 사례를 위해, 나는 임시 배포를 사용하고 싶을 것이다.

00:15:30.000 --> 00:15:39.000
임시 배포를 통해 Baker가 장치 유형당 팀에 등록된 최대 100개의 장치에서 실행할 수 있도록 서명할 수 있습니다.

00:15:39.000 --> 00:15:48.000
Xcode를 사용하여 임시 배포 옵션을 선택하고, 앱을 내보낸 다음, 등록된 장치로 Baker를 팀원 중 한 명에게 보낼 수 있습니다.

00:15:48.000 --> 00:15:57.000
마지막으로, 우리 팀은 회사 내에서 내부적으로 배포하고 싶은 Campus Explorer라는 앱을 가지고 있습니다.

00:15:57.000 --> 00:16:04.000
Xcode는 이러한 방식으로 배포할 수 있는 두 가지 옵션을 제공합니다: 사용자 지정 앱과 엔터프라이즈 배포.

00:16:04.000 --> 00:16:10.000
사용자 지정 앱을 사용하려면, App Store Connect에 배포하고 사용자 지정 앱을 설정할 수 있습니다.

00:16:10.000 --> 00:16:19.000
둘째, 기업 프로그램을 통해 개인적으로 배포하고 싶다면, 주최자에서 기업 배포 방법을 선택할 수 있습니다.

00:16:19.000 --> 00:16:30.000
사용자 지정 앱 배포에 대한 자세한 내용은 "Apple Business Manager를 사용한 사용자 지정 앱 배포" 세션을 참조하십시오.

00:16:30.000 --> 00:16:36.000
우리는 이제 다양한 방법과 다양한 빌드를 위해 베이커를 배포했습니다.

00:16:36.000 --> 00:16:46.000
시간이 지남에 따라, 나는 배포할 때 동일한 옵션과 방법을 지속적으로 선택할 것이므로, 배포 프로세스 자동화를 시작하고 싶습니다.

00:16:46.000 --> 00:16:57.000
배포 자동화는 하나의 지속적인 워크플로우에서 앱을 구축, 테스트 및 배포할 수 있기 때문에 지속적인 통합 서비스를 사용할 때 특히 좋습니다.

00:16:57.000 --> 00:17:01.000
새로운 Xcode Cloud CI 서비스는 이에 적합합니다.

00:17:01.000 --> 00:17:09.000
애플리케이션을 빌드하고 테스트하면, Xcode Cloud는 App Store Connect에 앱의 자동 배포를 지원합니다.

00:17:09.000 --> 00:17:18.000
Xcode Cloud에서 앱을 설정하고 배포하는 방법을 배우려면, "Xcode Cloud 워크플로우 탐색" 세션을 살펴보세요.

00:17:18.000 --> 00:17:30.000
다른 CI 서비스를 사용하여 배포를 자동화하거나 컴퓨터에서 로컬로 자동화하려면 Xcode 명령줄 도구인 xcodebuild를 사용할 수 있습니다.

00:17:30.000 --> 00:17:41.000
`xcodebuild -exportArchive` 명령은 배포를 자동화하는 데 사용되며, 아카이브, 내보내기 옵션 plist 및 자격 증명을 사용합니다.

00:17:41.000 --> 00:17:51.000
베이커의 첫 번째 업로드에서 했던 것처럼 Xcode에서 아카이브를 만들거나, xcodebuild의 아카이브 명령을 사용하여 빌드할 수 있습니다.

00:17:51.000 --> 00:18:00.000
빌드된 아카이브를 참조하려면, `-archivePath` 인수를 사용하고 빌드된 아카이브로 경로를 전달할 것입니다.

00:18:00.000 --> 00:18:06.000
다음은 앱 배포 레시피와 같은 내보내기 옵션 plist입니다.

00:18:06.000 --> 00:18:13.000
이것은 내가 Xcode의 배포 워크플로우에서 수동으로 선택한 모든 옵션이 지정된 곳이다.

00:18:13.000 --> 00:18:21.000
IPA를 내보내면, 내보내기 옵션 plist는 선택한 모든 옵션과 함께 내보낸 디렉토리에 저장됩니다.

00:18:21.000 --> 00:18:34.000
우리가 Baker를 App Store Connect에 업로드했을 때, 업로드 선택, 비트코드 활성화, 자동 서명 선택과 같은 옵션을 추적하는 내보내기 옵션 plist가 생성되었습니다.

00:18:34.000 --> 00:18:42.000
Xcodebuild가 이 plist를 사용하면 Xcode에서와 정확히 동일한 옵션을 선택하여 배포됩니다.

00:18:42.000 --> 00:18:51.000
내보내기 옵션 plist에서 사용할 수 있는 옵션 목록을 보려면, 명령줄에서 `xcodebuild -help`를 실행할 수 있습니다.

00:18:51.000 --> 00:19:01.000
내보내기 옵션 plist를 지정하려면, plist 파일의 경로와 함께 `-exportOptionsPlist` 인수를 전달해야 합니다.

00:19:01.000 --> 00:19:10.000
마지막으로, 성공적으로 클라우드 서명하고 App Store에 업로드하기 위해 xcodebuild가 유효한 자격 증명에 액세스할 수 있는지 확인해야 합니다.

00:19:10.000 --> 00:19:13.000
이것을 하는 방법은 두 가지가 있다.

00:19:13.000 --> 00:19:23.000
첫 번째 방법은 xcodebuild를 실행하기 전에 Xcode에 로그인하는 것이며, 세션은 일정 기간 동안 내 컴퓨터에서 지속됩니다.

00:19:23.000 --> 00:19:35.000
Xcode로 로그인하면, 필요한 유일한 플래그는 xcodebuild가 Apple Developer 웹사이트와 통신할 수 있는 권한을 부여하는 `-allowProvisioningUpdates`입니다.

00:19:35.000 --> 00:19:44.000
Xcode 13의 새로운 기능, App Store Connect 키를 사용하여 Xcode에 로그인하지 않고도 xcodebuild에 로그인할 수 있습니다.

00:19:44.000 --> 00:19:48.000
키는 App Store Connect에서 가져와서 xcodebuild로 전달할 수 있습니다.

00:19:48.000 --> 00:20:09.000
필요한 세 가지는 `-authenticationKeyIssuerID`를 사용하여 xcodebuild에 전달되는 발행인 ID입니다; `-authenticationKeyID`를 사용하여 전달되는 키 ID; 마지막으로, API 키 다운로드 버튼을 사용하여 API 키를 다운로드해야 합니다.

00:20:09.000 --> 00:20:17.000
다운로드한 파일의 경로는 `-authenticationKeyPath`를 사용하여 xcodebuild로 전달할 수 있습니다.

00:20:17.000 --> 00:20:24.000
Xcodebuild는 여전히 개발자 웹사이트와 통신해야 하기 때문에 여전히 프로비저닝 업데이트를 허용해야 합니다.

00:20:24.000 --> 00:20:32.000
그것과 모든 App Store Connect 키를 갖게 되면, xcodebuild가 앱을 배포하는 데 필요한 자격 증명을 갖게 됩니다.

00:20:32.000 --> 00:20:41.000
이제 아카이브, 내보내기 옵션 plist 및 자격 증명이 있으므로 전체 xcodebuild 명령을 구성하는 데 필요한 모든 것이 있습니다.

00:20:41.000 --> 00:20:47.000
여기 베이커의 배포를 자동화하기 위한 명령을 위해 조립된 모든 요소가 있습니다.

00:20:47.000 --> 00:20:58.000
나는 일주일에 한 번 베타 테스터에게 업데이트를 계속 제공하고 싶기 때문에, 배포를 위해 이 명령을 사용하여 이 작업을 수행하도록 CI를 설정할 것이다.

00:20:58.000 --> 00:21:03.000
그리고 그것이 Xcode 13을 사용하여 앱을 배포하는 모든 방법입니다.

00:21:03.000 --> 00:21:13.000
TestFlight 및 App Store용 App Store Connect 배포부터 개발자 ID, 임시 및 엔터프라이즈와 같은 배포 방법까지.

00:21:13.000 --> 00:21:20.000
그런 다음, 마지막으로, 배포 프로세스를 자동화하기 위해, xcodebuild 또는 Xcode Cloud CI 서비스를 사용할 수 있습니다.

00:21:20.000 --> 00:21:39.000
Xcode Cloud를 사용하여 앱을 배포하는 방법에 대한 자세한 내용은 "Explore Xcode Cloud workflows" 세션을 참조하십시오. 다른 배포 방법에 대한 자세한 내용은 "App Distribution — From Ad Hoc to Enterprise" 세션에 몇 가지 유용한 정보가 있습니다.

00:21:39.000 --> 00:21:42.000
들어주셔서 정말 감사합니다, 그리고 멋진 WWDC를 보내세요!

00:21:42.000 --> 23:59:59.000
[쾌활한 음악].

