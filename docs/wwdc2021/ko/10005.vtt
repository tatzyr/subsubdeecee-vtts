WEBVTT

00:00:01.000 --> 00:00:10.000
안녕.

00:00:10.000 --> 00:00:16.000
제 이름은 얀이고, 블루투스 장치를 Apple Watch에 연결하는 새로운 방법에 대해 말씀드리고 싶습니다.

00:00:16.000 --> 00:00:20.000
먼저, 코어 블루투스가 watchOS 7에서 어떻게 작동하는지 검토하겠습니다.

00:00:20.000 --> 00:00:25.000
그런 다음 watchOS 8의 흥미진진한 새로운 기능에 대해 이야기하겠습니다.

00:00:25.000 --> 00:00:31.000
그리고 Apple Watch와 함께 작동하도록 액세서리와 앱을 디자인하는 가장 좋은 방법에 대해 논의하겠습니다.

00:00:31.000 --> 00:00:34.000
오늘 코어 블루투스가 어떻게 작동하는지부터 시작합시다.

00:00:34.000 --> 00:00:41.000
앱이 포그라운드에 있거나 백그라운드 세션 중에만 블루투스 장치에 연결할 수 있습니다.

00:00:41.000 --> 00:00:46.000
이것은 사람이 액세서리에서 정보를 얻기 위해 앱에 집중하고 싶을 때 좋습니다.

00:00:46.000 --> 00:00:52.000
하지만 액세서리의 정보로 합병증을 만들고 싶다면 어떨까요?

00:00:52.000 --> 00:00:57.000
현재, 사람이 당신의 앱을 열지 않는 한 합병증을 업데이트할 수 없습니다.

00:00:57.000 --> 00:01:03.000
이제 watchOS 8에서는 백그라운드 앱 새로 고침 중에 블루투스 액세서리를 연결할 수 있습니다.

00:01:03.000 --> 00:01:11.000
이를 통해 액세서리의 정보로 합병증을 업데이트하거나 배터리가 부족한 경우 로컬 알림을 보낼 수 있습니다.

00:01:11.000 --> 00:01:22.000
내 예시 온도 센서로, 이제 컴플리케이션에서 온도를 업데이트할 수 있으므로, 시계를 볼 때마다 볼 수 있습니다.

00:01:22.000 --> 00:01:32.000
우리는 예시에서 온도 센서를 사용하고 있지만, 누군가가 정보를 한 눈에 보고 싶어하는 모든 액세서리일 수 있습니다.

00:01:32.000 --> 00:01:42.000
백그라운드 앱 새로 고침 중에 블루투스 사용을 시작하려면, Info.plist의 UIBackgroundModes에 bluetooth-central을 추가하기만 하면 됩니다.

00:01:42.000 --> 00:01:50.000
이것은 또한 "필수 배경 모드"와 "앱은 CoreBluetooth를 사용하여 통신합니다"로 나타날 수 있습니다.

00:01:50.000 --> 00:01:54.000
여기 플랫폼 간의 차이점을 보여주는 표가 있습니다.

00:01:54.000 --> 00:01:59.000
이것들은 블루투스 저에너지에 대해 현재 지원되는 구성이다.

00:01:59.000 --> 00:02:04.000
액세서리가 Apple Watch와 어떻게 통신하는지 살펴봅시다.

00:02:04.000 --> 00:02:11.000
사용자가 이미 액세서리와 페어링하고 Watch 앱을 열었다고 가정해 봅시다.

00:02:11.000 --> 00:02:19.000
앱은 액세서리에 연결하려고 시도하며, 광고가 보이자마자 블루투스 LE 연결이 설정됩니다.

00:02:19.000 --> 00:02:24.000
사용자가 watchOS 앱을 종료하면 블루투스 연결이 종료됩니다.

00:02:24.000 --> 00:02:30.000
다음에 watchOS 앱에서 런타임을 사용할 수 있을 때까지 블루투스 연결을 사용할 수 없습니다.

00:02:30.000 --> 00:02:36.000
watchOS 8에서 다음 백그라운드 앱 새로 고침 중에 무슨 일이 일어나는지 분석해 봅시다.

00:02:36.000 --> 00:02:45.000
앱이 알려진 주변 장치에 연결을 시작하고, 다음에 광고를 받으면 Apple Watch가 액세서리에 연결됩니다.

00:02:45.000 --> 00:02:52.000
데이터 검색을 마치자마자, 블루투스 연결을 종료하고 데이터를 처리할 수 있습니다.

00:02:52.000 --> 00:03:03.000
백그라운드 앱 새로 고침은 언제든지 발생할 수 있으므로, 액세서리는 Apple Watch에 표시할 중요한 업데이트가 있을 때 가능한 한 자주 광고해야 합니다.

00:03:03.000 --> 00:03:08.000
이제, 당신의 액세서리가 전력을 절약하기 위해 거의 광고하지 않는다고 가정해 봅시다.

00:03:08.000 --> 00:03:15.000
백그라운드 앱 새로 고침 중에 광고가 수신되지 않고 연결이 발생하지 않을 수 있습니다.

00:03:15.000 --> 00:03:25.000
백그라운드 앱 새로 고침은 특정 시간에 발생하는 것이 보장되지 않으므로, 액세서리는 중요한 업데이트가 있을 때마다 자주 광고해야 합니다.

00:03:25.000 --> 00:03:29.000
한 가지 가능한 전략은 액세서리의 센서 데이터를 버퍼링하는 것입니다.

00:03:29.000 --> 00:03:37.000
버퍼 한도에 가까울 때, 광고율을 높여 Apple Watch에 다시 연결할 가능성을 높이세요.

00:03:37.000 --> 00:03:43.000
가이드로서, 당신은 이상적인 RF 조건에서 적어도 2초마다 광고해야 합니다.

00:03:43.000 --> 00:03:52.000
장치가 더 어려운 RF 조건에서 작동할 것으로 예상한다면, 액세서리는 재연결 가능성을 높이기 위해 더 자주 광고해야 합니다.

00:03:52.000 --> 00:04:02.000
앱이 코어 블루투스와 어떻게 상호 작용하는지, 그리고 watchOS가 블루투스 액세서리와 어떻게 상호 작용하는지 살펴봅시다.

00:04:02.000 --> 00:04:04.000
이것은 시간 다이어그램 흐름이다.

00:04:04.000 --> 00:04:08.000
시간은 위에서 아래로 진행된다.

00:04:08.000 --> 00:04:13.000
앱이 포그라운드에 있을 때 일어나는 일부터 시작합시다.

00:04:13.000 --> 00:04:15.000
당신의 액세서리는 광고입니다.

00:04:15.000 --> 00:04:19.000
블루투스 액세서리를 감지하기 위해 새 장치를 스캔할 수 있습니다.

00:04:19.000 --> 00:04:25.000
장치가 발견되면, 연결을 시작할 수 있습니다.

00:04:25.000 --> 00:04:30.000
Apple Watch가 광고를 받자마자, 연결될 것이다.

00:04:30.000 --> 00:04:39.000
블루투스 연결이 완료되면, 블루투스 장치의 연결을 끊는 cancelPeripheralConnection을 호출할 수 있습니다.

00:04:39.000 --> 00:04:47.000
그런 다음, 나중에 Apple Watch 화면이 꺼지면 watchOS 앱이 일시 중지됩니다.

00:04:47.000 --> 00:04:52.000
이제, 다음 백그라운드 앱 새로 고침에서 무슨 일이 일어나는지 살펴봅시다.

00:04:52.000 --> 00:04:56.000
경과된 시간은 규모를 위한 것이 아니라는 점에 유의하세요.

00:04:56.000 --> 00:05:02.000
앱이 블루투스 액세서리에 다시 연결해야 하는 경우, 연결을 시작할 수 있습니다.

00:05:02.000 --> 00:05:04.000
여기서 연결이 확립된다.

00:05:04.000 --> 00:05:12.000
앞서 언급했듯이, 필요한 시간 동안만 액세서리에 연결하는 것이 좋습니다.

00:05:12.000 --> 00:05:18.000
필요한 데이터를 검색한 다음 백그라운드 앱 새로 고침 중에 연결을 해제를 요청해야 합니다.

00:05:18.000 --> 00:05:26.000
이 경우, 데이터 전송이 완료되고 앱은 주변 연결을 취소합니다.

00:05:26.000 --> 00:05:28.000
또 다른 잠재적인 사용자 흐름을 살펴봅시다.

00:05:28.000 --> 00:05:37.000
이것에서, 블루투스 액세서리는 Apple Watch 근처에 없거나 백그라운드 앱 새로 고침 중에 광고하지 않습니다.

00:05:37.000 --> 00:05:42.000
백그라운드 앱 새로 고침 기간 동안 이것을 관리하는 방법은 다음과 같습니다.

00:05:42.000 --> 00:05:48.000
먼저, 당신은 주변 장치에 연결할 것이지만, 광고는 없습니다.

00:05:48.000 --> 00:05:53.000
만료 핸들러가 호출되면, 연결을 취소하도록 요청해야 합니다.

00:05:53.000 --> 00:06:01.000
이렇게 하면 깨끗한 슬레이트를 갖게 되며 다음 백그라운드 앱 새로 고침을 시작할 때 다시 연결하도록 요청할 수 있습니다.

00:06:01.000 --> 00:06:09.000
배터리를 절약하기 위해 만료 핸들러가 호출되기 전에 연결을 취소하는 것도 좋습니다.

00:06:09.000 --> 00:06:16.000
다음 백그라운드 앱 새로 고침에서 다시 연결해야 하는 경우, connectPeripheral을 다시 발행할 수 있습니다.

00:06:16.000 --> 00:06:22.000
Apple Watch가 광고를 보자마자, 그것은 당신의 액세서리에 연결될 것입니다.

00:06:22.000 --> 00:06:27.000
이 시점에서, 당신은 필요한 모든 데이터를 가져오고 다운로드할 수 있습니다.

00:06:27.000 --> 00:06:32.000
그런 다음, 연결이 끝나자마자 연결을 끊을 수 있습니다.

00:06:32.000 --> 00:06:39.000
백그라운드 앱 새로 고침 중에 연결을 끊지 않으면 어떻게 되는지 보는 최종 흐름을 살펴봅시다.

00:06:39.000 --> 00:06:41.000
연결을 시작하세요.

00:06:41.000 --> 00:06:46.000
애플 워치가 광고를 보자마자, 연결을 설정할 것이다.

00:06:46.000 --> 00:06:53.000
여기서, 당신의 앱이 백그라운드 앱 새로 고침이 만료되기 전에 모든 데이터를 검색할 시간이 없었다고 가정해 봅시다.

00:06:53.000 --> 00:07:02.000
이 경우, 코어 블루투스는 다음 백그라운드 앱 새로 고침이 끝날 때 자동으로 연결을 종료합니다.

00:07:02.000 --> 00:07:08.000
다음 백그라운드 앱 새로 고침에서, 당신의 앱은 didDisconnectPeripheral 이벤트를 받게 될 것입니다.

00:07:08.000 --> 00:07:17.000
이 시점에서, 앱이 필요하다면, 블루투스 연결을 시작하거나 다음 백그라운드 앱 새로 고침까지 기다릴 수 있습니다.

00:07:17.000 --> 00:07:23.000
필요한 시간 동안만 액세서리에 연결하는 것이 좋습니다.

00:07:23.000 --> 00:07:30.000
당신의 앱은 백그라운드 앱 새로 고침 중에 연결을 끊어달라고 요청해야 합니다.

00:07:30.000 --> 00:07:34.000
이것을 구현하기 위한 코드를 자세히 살펴봅시다.

00:07:34.000 --> 00:07:41.000
누군가가 전경에서 앱을 실행하면, 주변 장치를 발견하고 연결할 수 있습니다.

00:07:41.000 --> 00:07:48.000
didDiscoverPeripheral 위임 방법은 광고가 감지될 때 호출됩니다.

00:07:48.000 --> 00:07:53.000
과거에 CoreBluetooth를 사용한 적이 있다면, 이것은 친숙합니다.

00:07:53.000 --> 00:07:58.000
이제 백그라운드 앱 새로 고침 중에 무슨 일이 일어나는지 봅시다.

00:07:58.000 --> 00:08:02.000
handleBackgroundTasks 위임 메서드가 호출됩니다.

00:08:02.000 --> 00:08:09.000
당신은 당신의 배경 작업을 시작할 수 있으며, 우리의 경우, 우리는 블루투스 주변 장치에 연결하고 싶습니다.

00:08:09.000 --> 00:08:18.000
백그라운드 앱 새로 고침 동안, 종료 직전에 백그라운드 앱 새로 고침이 곧 완료될 것이라는 알림도 받습니다.

00:08:18.000 --> 00:08:21.000
이것은 watchOS 8의 새로운 API입니다.

00:08:21.000 --> 00:08:28.000
이것을 사용하여 기존 작업을 취소하고 정지 모드로 전환할 애플리케이션을 준비할 수 있습니다.

00:08:28.000 --> 00:08:31.000
그런 다음 작업을 완료된 것으로 설정하세요.

00:08:31.000 --> 00:08:39.000
또한, 백그라운드 런타임을 얻을 때, 블루투스 장치가 연결 해제될 때 어떤 동작이 될지 결정해야 합니다.

00:08:39.000 --> 00:08:50.000
콜백 didDisconnectPeripheral은 전경이나 백그라운드 앱 새로 고침에서 발생할 수 있으며 모든 플랫폼에서 발생할 수 있다는 것을 기억하십시오.

00:08:50.000 --> 00:09:02.000
여기서, 우리가 didDisconnectPeripheral을 가지고 있을 때, 우리는 당신의 WatchKit 확장 대리인에 있는 didCompleteDisconnection이라는 함수를 호출합니다.

00:09:02.000 --> 00:09:07.000
이런 식으로, 이 기능의 동작은 watchOS에만 해당된다.

00:09:07.000 --> 00:09:18.000
함수 didCompleteDisconnection이 하는 일은 우리가 백그라운드 앱 새로 고침에 있는지 확인하는 것이며, 그렇다면 작업이 완료되었음을 나타냅니다.

00:09:18.000 --> 00:09:22.000
이렇게 하면 백그라운드 앱 새로 고침이 종료됩니다.

00:09:22.000 --> 00:09:26.000
Apple Watch에서 Core Bluetooth를 사용하는 모범 사례에 대해 이야기해 봅시다.

00:09:26.000 --> 00:09:35.000
처음 장치 설정의 경우, 앱이 포그라운드에서 실행되어야 하며, 이는 사용자가 Watch 앱을 적극적으로 사용하고 있음을 의미합니다.

00:09:35.000 --> 00:09:38.000
이 시간에 새로운 주변 장치를 스캔하세요.

00:09:38.000 --> 00:09:44.000
앱이 주변 장치를 발견하면, 초기 블루투스 연결을 설정할 수 있습니다.

00:09:44.000 --> 00:09:46.000
필요한 경우 장치와 페어링할 수도 있습니다.

00:09:46.000 --> 00:09:51.000
앱이 포그라운드에서 나가면, 새로운 주변 장치를 스캔할 수 없습니다.

00:09:51.000 --> 00:09:57.000
대신, 이전에 발견된 주변 장치에 대한 연결을 요청해야 합니다.

00:09:57.000 --> 00:10:00.000
일단 연결되면, 필요한 데이터를 검색하세요.

00:10:00.000 --> 00:10:06.000
데이터 검색이 완료되면, 앱은 배터리를 절약하기 위해 주변 장치에서 연결을 끊어야 합니다.

00:10:06.000 --> 00:10:14.000
백그라운드 앱 새로 고침이 끝나기 전에 앱이 연결 해제되지 않으면, 코어 블루투스는 자동으로 액세서리에서 연결을 끊습니다.

00:10:14.000 --> 00:10:18.000
앱에 런타임이 있을 때만 다시 연결할 수 있습니다.

00:10:18.000 --> 00:10:22.000
코어 블루투스에 대해 궁금한 점이 있으시면 이번 주에 저희 연구실에 가입하시기 바랍니다.

00:10:22.000 --> 00:10:24.000
고마워.

00:10:24.000 --> 23:59:59.000
[음악].

