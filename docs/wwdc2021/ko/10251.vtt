WEBVTT

00:00:00.000 --> 00:00:13.000
안녕하세요, 저는 톰입니다. "UIKit과 AppKit의 SF 기호"에 오신 것을 환영합니다.

00:00:13.000 --> 00:00:19.000
오늘 저는 당신의 앱에서 SF 심볼의 새로운 기능을 구현하는 방법을 안내할 것입니다.

00:00:19.000 --> 00:00:24.000
먼저, 우리는 다양한 색상 모드와 그것들을 사용하는 방법을 살펴볼 것입니다.

00:00:24.000 --> 00:00:28.000
그런 다음, 우리는 당신이 원하는 효과를 얻기 위해 구성을 결합하는 방법에 대해 이야기할 것입니다.

00:00:28.000 --> 00:00:33.000
그리고 마지막으로, 우리는 귀속 문자열에서 이러한 컬러 기호를 사용하는 것을 탐구할 것입니다.

00:00:33.000 --> 00:00:37.000
AppKit과 UIKit 모두에 적용되는 예시를 볼 수 있습니다.

00:00:37.000 --> 00:00:47.000
새로운 API는 두 프레임워크 모두에 대해 동일하므로, 일부 프레임워크별 뉘앙스를 제외하고 하나에 적용되는 것은 다른 프레임워크에도 적용됩니다.

00:00:47.000 --> 00:00:50.000
새로운 기능은 SF 심볼에 색상을 추가하는 것을 중심으로 한다.

00:00:50.000 --> 00:00:57.000
AppKit은 macOS 11에 다색 기호를 추가했지만, UIKit은 iOS 15에 추가하고 있다.

00:00:57.000 --> 00:01:01.000
올해 출시를 위해, SF 심볼을 위한 추가 컬러 렌더링 모드가 추가되고 있다.

00:01:01.000 --> 00:01:05.000
그리고 분명히 말하자면, 이러한 렌더링 모드는 모든 플랫폼에서 작동합니다.

00:01:05.000 --> 00:01:11.000
새로운 렌더링 모드를 지원하기 위해, 기호는 이제 다른 레이어를 가지고 있으며, 각각 다른 색상을 가지고 있다.

00:01:11.000 --> 00:01:16.000
이 층들은 계층 구조로 정의되며, 이는 한 층이 다른 층보다 더 두드러진다는 것을 의미한다.

00:01:16.000 --> 00:01:22.000
이것은 우리가 세 개의 층을 가지고 있다는 것을 의미한다: 1차, 2차, 그리고 3차.

00:01:22.000 --> 00:01:27.000
iOS에서 기호는 새로운 렌더링 모드를 적용하려면 템플릿 모드가 필요합니다.

00:01:27.000 --> 00:01:32.000
macOS에서 새로운 구성을 적용하면 자동으로 올바른 템플릿 모드가 설정됩니다.

00:01:32.000 --> 00:01:38.000
그리고 SF 심볼을 처음 접한다면, WWDC19의 "SF 심볼 소개"를 확인하세요.

00:01:38.000 --> 00:01:43.000
우리가 살펴볼 첫 번째 렌더링 모드는 흑백 기호입니다.

00:01:43.000 --> 00:01:45.000
여기 음성 메일 앱이 있습니다.

00:01:45.000 --> 00:01:48.000
이 UI에서, 몇 개의 기호가 사용되고 있다.

00:01:48.000 --> 00:01:52.000
하나의 흑백 기호와 다른 색상 모드를 사용하는 몇 가지 다른 기호가 있습니다.

00:01:52.000 --> 00:01:59.000
하지만 먼저 흑백 기호에 집중하자, 그리고 우리는 나중에 다른 것들로 돌아갈 것이다.

00:01:59.000 --> 00:02:05.000
이름에서 알 수 있듯이, 흑백 기호는 오직 하나의 색상만 가지고 있다: 보통 뷰의 색조 또는 악센트 색상.

00:02:05.000 --> 00:02:13.000
그리고 이 결과를 달성하기 위해, 우리는 새로운 기호 이미지를 만들고, 이미지 보기에 할당하고, 기호의 색상을 구성하기 위해 색조 또는 악센트 색상을 설정합니다.

00:02:13.000 --> 00:02:22.000
그리고 여기서는 아무것도 바뀌지 않았습니다: 기본 동작이기 때문에 흑백 기호를 렌더링하기 위해 추가 구성이 필요하지 않습니다.

00:02:22.000 --> 00:02:27.000
그래서, 흑백은 iOS 15와 macOS 11 이전의 유일한 렌더링 모드였다.

00:02:27.000 --> 00:02:33.000
색상을 지정하려면, 이미지 보기에 색조나 악센트 색상을 설정하기만 하면 됩니다. 그게 전부입니다.

00:02:33.000 --> 00:02:40.000
이제 우리는 이전에 기존의 흑백 모드를 벗어났기 때문에, 우리는 새로운 모드에 대해 이야기할 수 있다: 계층적 색상 기호.

00:02:40.000 --> 00:02:47.000
Mac의 계층적 기호의 좋은 예는 제어 센터에서 사용되는 아이콘이다.

00:02:47.000 --> 00:02:54.000
제어 센터에서 기호가 사용되는 곳이 몇 군데 있지만, 디스플레이 섹션을 확대해 봅시다.

00:02:54.000 --> 00:03:01.000
여기에 사용되는 몇 가지 기호가 있습니다: 중앙의 토글 버튼 행과 장치 목록의 아이콘.

00:03:01.000 --> 00:03:08.000
장치 기호는 위의 토글 버튼과 다르게 착색되며, 이는 계층적으로 색칠된 기호입니다.

00:03:08.000 --> 00:03:16.000
계층적 색상 모드는 기호의 레이어 계층 구조를 사용하여 각 레이어를 색칠하며, 제공된 색상은 기본 레이어 색상으로 사용됩니다.

00:03:16.000 --> 00:03:23.000
2차 및 3차 층은 점진적으로 불투명도가 감소하면서 원색의 변화를 얻는다.

00:03:23.000 --> 00:03:32.000
기존 유형의 기호 구성과 똑같이 작동하는 새로운 유형의 기호 구성을 통해 색상 모드를 지정합니다.

00:03:32.000 --> 00:03:40.000
그리고 imageView의 기호 구성을 이러한 유형의 구성으로 설정하면 기호가 계층적 색상 기호로 표시됩니다.

00:03:40.000 --> 00:03:48.000
계층적 색상 기호의 색 구성표는 한 가지 색상을 기반으로 하며, 다른 색상은 불투명도를 줄임으로써 한 가지 색상에서 파생됩니다.

00:03:48.000 --> 00:03:50.000
계층 구조는 여기서 중요하다.

00:03:50.000 --> 00:03:55.000
한 레이어가 누락된 경우, 관련 파생 색상은 사용되지 않습니다.

00:03:55.000 --> 00:03:58.000
세 번째 컬러 렌더링 모드도 있습니다: 팔레트.

00:03:58.000 --> 00:04:02.000
우리가 발견할 것처럼, 그것은 계층적 컬러 렌더링 모드와 비슷하지만, 또한 다르다.

00:04:02.000 --> 00:04:05.000
음성 메일 예시로 돌아가자.

00:04:05.000 --> 00:04:10.000
오른쪽에 있는 세 개의 버튼은 각각 여러 가지 색상을 가지고 있으며, 각각 다른 색상을 가지고 있다.

00:04:10.000 --> 00:04:14.000
우리는 이 버튼들을 한 번에 한 단계씩 만들 것이다.

00:04:14.000 --> 00:04:17.000
먼저, 우리는 원하는 이미지로 버튼을 초기화할 것입니다.

00:04:17.000 --> 00:04:20.000
우리는 이것을 위해 새로운 버튼 구성을 사용하고 있습니다.

00:04:20.000 --> 00:04:23.000
하지만 이 평범한 이미지들은 우리가 원하는 것이 전혀 아니다.

00:04:23.000 --> 00:04:28.000
이미지는 원 모양이어야 하며 채워져야 한다.

00:04:28.000 --> 00:04:34.000
우리는 기호 이름에 원하는 수정자를 추가하여 이것을 할 수 있었지만, 이제 더 나은 방법이 있습니다: 이미지 변형.

00:04:34.000 --> 00:04:42.000
이름에서 알 수 있듯이, 이미지 변형을 사용할 때, 수동으로 이름을 변경하지 않고도 이미지의 다른 변형을 요청할 수 있습니다.

00:04:42.000 --> 00:04:47.000
먼저, 우리의 이미지를 원으로 바꾸자.

00:04:47.000 --> 00:04:50.000
그런 다음, 우리는 그 원들에 멋진 채우기를 추가할 것이다.

00:04:50.000 --> 00:04:57.000
버튼 컨테이너 보기에서 변형을 지정하고 있기 때문에, 이러한 변형은 모든 버튼의 모든 이미지에 적용됩니다.

00:04:57.000 --> 00:05:02.000
이미지에 그 변형이 없다면, 원래 지정된 이미지가 사용될 것이다.

00:05:02.000 --> 00:05:11.000
변형 사양은 뷰 계층 구조를 전파할 것이며, 그 계층 구조의 이미지 뷰는 그들의 마법을 하기 위해 그들을 선택할 것이다.

00:05:11.000 --> 00:05:16.000
이제 우리가 모양을 벗어났으니, 이 기호들 각각에 대한 색상을 어떻게 지정하나요?

00:05:16.000 --> 00:05:21.000
음, 우리는 색상 팔레트를 지정하는 새로운 유형의 기호 구성을 만들 수 있습니다.

00:05:21.000 --> 00:05:26.000
이 색상들은 계층적 색상 구성과 유사한 레이어 계층 구조에 적용됩니다.

00:05:26.000 --> 00:05:31.000
하지만 우리는 파생된 색상을 사용하는 것보다 명시적으로 지정된 색상을 사용하고 있습니다.

00:05:31.000 --> 00:05:36.000
그리고 우리는 또한 팔레트 색상 목록에서 새로운 유형의 색상을 사용하고 있습니다: 색조 색상.

00:05:36.000 --> 00:05:41.000
이것은 보기가 자동으로 적절한 레이어에 색조 색상을 적용한다는 것을 의미합니다.

00:05:41.000 --> 00:05:44.000
그리고 다음 버튼을 위해, 우리는 정확히 이전과 똑같이 한다.

00:05:44.000 --> 00:05:50.000
기본 이미지를 로드하고, 올바른 색상 구성을 만들고, 버튼 구성에 적용하세요.

00:05:50.000 --> 00:05:56.000
그리고 이 경우, 그것은 이전과 정확히 똑같아 보이지만, 여기에 문제가 있으며, 나중에 설명하겠습니다.

00:05:56.000 --> 00:06:01.000
그리고 같은 시나리오는 마지막 버튼에서도 작동하지만, 색상이 다릅니다.

00:06:01.000 --> 00:06:05.000
그리고 이전과 마찬가지로, 당신은 왜 우리가 여기에 흰색을 명시적으로 지정해야 하는지 궁금할 것입니다.

00:06:05.000 --> 00:06:09.000
그냥 흑백 기호를 사용하고 올바르게 색을 칠할 수는 없을까요?

00:06:09.000 --> 00:06:14.000
대답은 아니오입니다, 우리는 할 수 없습니다, 그리고 이것은 제가 전에 언급한 캐치입니다.

00:06:14.000 --> 00:06:18.000
우리 디자이너는 이 기호의 내부 부분이 항상 흰색이어야 한다고 명시했다.

00:06:18.000 --> 00:06:24.000
그리고 지금까지, 우리는 흑백 기호를 사용할 때에도 우연히 올바른 결과를 얻었을 것이다.

00:06:24.000 --> 00:06:27.000
왜? 우리는 라이트 모드에 있었어.

00:06:27.000 --> 00:06:32.000
하지만 우리가 다크 모드로 전환할 때, 흑백 기호는 우리에게 원하는 결과를 주지 않는다.

00:06:32.000 --> 00:06:39.000
이것은 흑백 버전이 내부 부분에 녹아웃을 사용하기 때문에 배경이 틈을 통해 피를 흘리기 때문이다.

00:06:39.000 --> 00:06:47.000
이제, 팔레트 렌더링 모드를 사용하여, 우리는 이 버튼들이 다른 사용자 인터페이스 스타일에 올바르게 나타나는지 확인합니다.

00:06:47.000 --> 00:06:50.000
나는 전에 새로운 색을 언급했다: tintColor.

00:06:50.000 --> 00:06:56.000
이것은 사용되는 뷰의 색조 색상으로 해결되는 UIKit의 새로운 동적 색상입니다.

00:06:56.000 --> 00:07:03.000
이것은 심볼 레이어 색상을 지정할 때 특히 편리하지만, 다른 색상을 사용할 수 있는 모든 곳에서 이 색상을 사용할 수도 있습니다.

00:07:03.000 --> 00:07:08.000
그러나, 역동적인 색상에 대한 규칙이 여전히 적용된다는 것을 명심하세요.

00:07:08.000 --> 00:07:16.000
역동적인 색상이 어떻게 작동하는지 자세히 알아보려면 WWDC19의 "iOS에서 다크 모드 구현" 세션을 참조하십시오.

00:07:16.000 --> 00:07:18.000
몇몇 기호는 두 개의 층만 가지고 있다.

00:07:18.000 --> 00:07:22.000
예를 들어, 2차 레이어가 누락된 많은 기호가 있다.

00:07:22.000 --> 00:07:26.000
이러한 종류의 기호에 대한 팔레트 모드를 어떻게 처리하나요?

00:07:26.000 --> 00:07:32.000
이것들의 좋은 예는 1차 층과 3차 층만 있는 장치 기호이다.

00:07:32.000 --> 00:07:36.000
이 iPad 기호를 두 레이어 색상으로 어떻게 색칠하나요?

00:07:36.000 --> 00:07:43.000
기호는 최대 세 개의 레이어를 가질 수 있기 때문에, 각 레이어에 대해 하나씩 세 가지 색상을 지정할 수 있습니다.

00:07:43.000 --> 00:07:48.000
이 경우, 레이어가 없기 때문에 보조 색상은 사용되지 않습니다.

00:07:48.000 --> 00:07:52.000
그러나, 두 층만 있는 기호에 대해 이것을 할 수 있는 또 다른 방법이 있다.

00:07:52.000 --> 00:08:01.000
이러한 기호의 경우, 구성에서 두 가지 색상만 지정할 수 있으며, 색상은 사용 가능한 레이어에 순서대로 적용됩니다.

00:08:01.000 --> 00:08:12.000
이전 방법은 색상이 올바른 레이어에 직접 매핑되기 때문에 혼합된 수의 레이어와 관련된 기호에 대한 팔레트 색상을 지정하는 방법에 대한 일관성을 허용합니다.

00:08:12.000 --> 00:08:19.000
후자의 방법은 기호가 두 개의 층만 가지고 있다는 것을 확실히 알 때 편리하다.

00:08:19.000 --> 00:08:26.000
팔레트 구성은 기호의 레이어 계층 구조에 적용되는 명시적인 색상 세트를 지정합니다.

00:08:26.000 --> 00:08:31.000
계층적 렌더링 모드와 달리, 팔레트 렌더링 모드는 파생된 색상을 만들지 않습니다.

00:08:31.000 --> 00:08:37.000
그리고 계층적 렌더링 모드와 마찬가지로, 각 심볼 레이어의 계층 수준은 중요하다.

00:08:37.000 --> 00:08:41.000
세 층 미만의 기호를 위한 편리한 솔루션도 있습니다.

00:08:41.000 --> 00:08:45.000
이것은 우리를 마지막 컬러 렌더링 모드로 데려온다: 다색.

00:08:45.000 --> 00:08:53.000
전에 언급했듯이, 이 컬러 모드는 작년에 AppKit과 SwiftUI에 추가되었지만 올해 UIKit에 도입되었습니다.

00:08:53.000 --> 00:08:56.000
이 카테고리들 중 일부는 여러 색상의 이미지를 가지고 있다.

00:08:56.000 --> 00:08:58.000
이것들은 다색 상징이다.

00:08:58.000 --> 00:09:01.000
우리가 이것을 어떻게 구현할지 봅시다.

00:09:01.000 --> 00:09:04.000
우선, 우리는 각 셀에 대한 이미지를 로드해야 합니다.

00:09:04.000 --> 00:09:09.000
현재로서는, 이것들은 일반 기호이며, 우리는 기본적으로 흑백 모드를 받습니다.

00:09:09.000 --> 00:09:13.000
그러면 우리는 다색 기호를 원한다는 것을 나타낼 필요가 있다.

00:09:13.000 --> 00:09:21.000
우리는 기호의 다색 변형을 요청하는 구성을 만들고 그 구성을 이미지 뷰에 할당함으로써 이것을 합니다.

00:09:21.000 --> 00:09:26.000
하지만 하나의 아이콘은 변하지 않았다: 그 기호는 다색을 지원하지 않는다.

00:09:26.000 --> 00:09:29.000
그래서, 어떤 기호가 다색을 지원하는지 어떻게 알 수 있나요?

00:09:29.000 --> 00:09:33.000
알아내는 쉬운 방법은 SF 심볼 앱을 사용하는 것이다.

00:09:33.000 --> 00:09:39.000
기호를 검색한 다음, 인스펙터를 사용하여 기호가 지원하는 색상 렌더링 모드를 확인하세요.

00:09:39.000 --> 00:09:43.000
예를 들어, 우리의 불꽃 기호는 흑백만 지원합니다.

00:09:43.000 --> 00:09:47.000
하지만 폐 기호는 네 가지 컬러 렌더링 모드를 모두 지원합니다.

00:09:47.000 --> 00:09:55.000
또한, 한 줄의 코드를 작성하지 않고도 기호가 어떻게 나타나는지 더 잘 느낄 수 있도록 각 레이어의 색상 매핑을 사용할 수 있습니다.

00:09:55.000 --> 00:09:58.000
우리의 예시로 돌아가자.

00:09:58.000 --> 00:10:07.000
따라서, 이 모든 기호가 다색을 지원하는 것은 아니기 때문에, 기호가 올바르게 표시되기 위해서는 tintColor를 올바른 값으로 수동으로 설정해야 합니다.

00:10:07.000 --> 00:10:13.000
일부 다색 기호에는 색조 레이어가 있으며, 보기의 색조 또는 악센트 색상에 영향을 받을 것이다.

00:10:13.000 --> 00:10:16.000
그러한 층이 없는 기호는 영향을 받지 않을 것이다.

00:10:16.000 --> 00:10:21.000
우리의 예에서, 그들 중 누구도 하지 않기 때문에, 모든 것이 그대로 남아 있다.

00:10:21.000 --> 00:10:29.000
구성의 이름에서 짐작할 수 있듯이, 다색 구성은 기호의 다색 렌더링에 대한 선호도를 나타냅니다.

00:10:29.000 --> 00:10:33.000
내가 전에 언급했듯이, 모든 기호가 다색 변형을 가지고 있는 것은 아니다.

00:10:33.000 --> 00:10:40.000
다색 구성을 다른 색상 구성 중 하나와 결합할 수 있지만, 나중에 더 자세히 볼 수 있습니다.

00:10:40.000 --> 00:10:48.000
그리고 결과는 두 가지 색상 모드를 지원하는 구성입니다: 사용 가능할 때 다색, 그렇지 않은 다른 색상 모드.

00:10:48.000 --> 00:10:55.000
계층적 모드와 팔레트 모드를 결합하면 상호 배타적이기 때문에 마지막으로 지정된 모드가 될 것입니다.

00:10:55.000 --> 00:11:01.000
차례로, 그 컬러 모드가 지원되지 않는다면, 시스템은 흑백 모드를 사용한다.

00:11:01.000 --> 00:11:06.000
그래서, 다색 기호는 코드에서 수정할 수 없는 고정된 색상 세트를 가지고 있다.

00:11:06.000 --> 00:11:11.000
또한, 일부 기호에는 색조나 악센트 색상을 사용하여 렌더링될 레이어가 있습니다.

00:11:11.000 --> 00:11:14.000
그리고 당신은 이것이 작동하기 위해 할 일이 없습니다.

00:11:14.000 --> 00:11:20.000
기호는 표시될 때 이미지 뷰에서 올바른 색조 또는 악센트 색상을 선택합니다.

00:11:20.000 --> 00:11:23.000
이제, 우리는 네 가지 모드와 코드에서 그것들을 사용하는 방법을 모두 다루었습니다.

00:11:23.000 --> 00:11:26.000
하지만 인터페이스 빌더에서도 똑같이 할 수 있나요?

00:11:26.000 --> 00:11:28.000
다행히도, 대답은 '예'이다.

00:11:28.000 --> 00:11:35.000
Xcode는 IDE에서 바로 색상 렌더링 모드를 구성하기 위해 유사한 기능을 추가했습니다.

00:11:35.000 --> 00:11:39.000
여기 행성 앱의 스토리보드를 표시하는 Xcode Open이 있습니다.

00:11:39.000 --> 00:11:44.000
ImageView UI는 컬러 렌더링 모드를 지정할 수 있도록 확장되었습니다.

00:11:44.000 --> 00:11:50.000
그리고 그 결과 색상 구성은 또한 이전에 존재하는 구성과 결합할 수 있다.

00:11:50.000 --> 00:11:57.000
인터페이스 빌더의 이러한 모든 새로운 기능에 대해 더 알고 싶다면, 올해의 "스타일로 인터페이스 구축"을 확인하세요.

00:11:57.000 --> 00:12:04.000
이제 우리는 이 모든 다른 색상 모드에 대해 이야기했으니, 어떻게 그것들을 다른 구성과 결합하여 더 복잡한 효과를 얻을 수 있을까요?

00:12:04.000 --> 00:12:06.000
다행히 그렇게 어렵지 않아.

00:12:06.000 --> 00:12:11.000
이번에는 단축키 앱에서 또 다른 예를 확인해 봅시다.

00:12:11.000 --> 00:12:17.000
각 동작의 아이콘은 꽤 크지만, 계층적 색상 렌더링 모드도 있는 것으로 보인다.

00:12:17.000 --> 00:12:25.000
그래서, 우리는 두 가지 구성이 필요합니다: 하나는 포인트 크기를 지정하기 위한 것이고, 다른 하나는 색상 구성을 지정하기 위한 것입니다.

00:12:25.000 --> 00:12:27.000
하지만 우리는 하나만 적용할 수 있습니다.

00:12:27.000 --> 00:12:28.000
그것들을 어떻게 결합하나요?

00:12:28.000 --> 00:12:31.000
이것을 할 수 있는 쉬운 방법이 있다는 것이 밝혀졌다.

00:12:31.000 --> 00:12:38.000
두 가지 구성을 결합하는 방법이 있으며, 그 결과 두 구성의 요소가 있는 구성이 됩니다.

00:12:38.000 --> 00:12:47.000
여기 예시에서, 우리는 두 가지 구성을 만듭니다: 하나는 포인트 크기를 지정하기 위한 것이고, 다른 하나는 계층적 색상을 지정하기 위한 것입니다.

00:12:47.000 --> 00:12:51.000
그런 다음 적용 방법을 사용하여 최종 구성을 만듭니다.

00:12:51.000 --> 00:12:56.000
그리고 그 구성은 이미지를 표시하는 이미지 보기에 적용되어 원하는 결과를 제공합니다.

00:12:56.000 --> 00:13:00.000
이 메커니즘은 색상 구성에만 국한되지 않는다는 점에 유의하십시오.

00:13:00.000 --> 00:13:03.000
당신은 또한 이것을 다른 유형의 구성과 함께 사용할 수 있습니다.

00:13:03.000 --> 00:13:06.000
예를 들어, 텍스트, 스타일 및 가중치를 결합하는 것.

00:13:06.000 --> 00:13:10.000
이제 우리는 다른 구성을 결합하는 방법을 알고 있다.

00:13:10.000 --> 00:13:14.000
한 가지 주제가 남았습니다: 귀속 문자열에서 색상 기호를 사용하는 것.

00:13:14.000 --> 00:13:16.000
이 마지막 예를 들어보세요.

00:13:16.000 --> 00:13:21.000
이것은 다양한 호텔과 이용 가능한 객실에 대한 정보를 나열하는 상상의 앱이다.

00:13:21.000 --> 00:13:24.000
기호가 텍스트와 결합되는 곳이 몇 군데 있다.

00:13:24.000 --> 00:13:28.000
하지만 객실 편의 시설과 이 텍스트를 어떻게 구현할 것인지에 집중합시다.

00:13:28.000 --> 00:13:30.000
그것은 꽤 간단하지만, 약간 정교하다.

00:13:30.000 --> 00:13:34.000
우리는 이미지 첨부 파일로 속성 문자열을 만들어야 합니다.

00:13:34.000 --> 00:13:38.000
먼저, 우리는 올바른 색상 구성을 사용하여 이미지를 로드합니다.

00:13:38.000 --> 00:13:42.000
이 경우, 우리는 계층적 색상 구성을 사용하고 있습니다.

00:13:42.000 --> 00:13:48.000
우리는 이 이미지를 사용하여 텍스트 첨부 파일을 만든 다음, 그 첨부 파일을 사용하여 속성 문자열을 완성합니다.

00:13:48.000 --> 00:13:52.000
그리고 이것은 이용 가능한 모든 편의 시설에 대해 반복된다.

00:13:52.000 --> 00:14:00.000
텍스트를 표시하는 라벨에서, 우리는 또한 계층적 색상 구성에 사용한 것과 동일한 글꼴과 동일한 텍스트 색상을 지정합니다.

00:14:00.000 --> 00:14:08.000
흑백 기호는 텍스트 색상을 자동으로 선택하지만, 색상 구성이 있는 기호의 경우 색상을 명시적으로 지정해야 합니다.

00:14:08.000 --> 00:14:15.000
그리고 색상 기호는 흑백 기호와 마찬가지로 문자열에 지정된 글꼴 크기를 선택합니다.

00:14:15.000 --> 00:14:24.000
이 단계 후에, 우리는 우리가 원하는 결과를 얻을 수 있습니다: 속성 문자열에 기호를 통합한 덕분에 올바른 콘텐츠, 색상 및 크기를 가진 라벨.

00:14:24.000 --> 00:14:31.000
우리는 기존 모드 외에도 SF 심볼에 대한 세 가지 새로운 색상 모드를 도입했으며, 앱에서 사용하는 방법을 설명했습니다.

00:14:31.000 --> 00:14:34.000
기호는 앱에 고품질 이미지를 추가할 수 있는 좋은 방법입니다.

00:14:34.000 --> 00:14:41.000
컬러 기호는 그것을 확장하여 더 많은 가능성을 허용한다.

00:14:41.000 --> 00:14:45.000
이 세션을 즐겼다면, 몇 가지 관련 세션을 꼭 확인하세요.

00:14:45.000 --> 00:14:50.000
새로운 기능에 대한 입문서를 보려면 "SF Symbols의 새로운 기능"을 보세요.

00:14:50.000 --> 00:14:57.000
또는 "SwiftUI의 SF 기호"를 살펴보고 SwiftUI에서 새로운 기호를 어떻게 사용할 수 있는지 알아보세요.

00:14:57.000 --> 00:14:59.000
시청해 주셔서 감사합니다, 그리고 이제 놀라운 앱을 만드세요!

00:14:59.000 --> 23:59:59.000
[쾌활한 음악].

