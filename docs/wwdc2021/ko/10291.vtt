WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
그레이엄 세이퍼트: 안녕하세요, WWDC 2021에 오신 것을 환영합니다.

00:00:13.000 --> 00:00:16.000
제 이름은 그레이엄 세이퍼트이고, 저는 뮤직킷 엔지니어입니다.

00:00:16.000 --> 00:00:24.000
지난 몇 년 동안, 우리는 개발자들이 Apple Music 카탈로그에서 새롭고 풍부한 데이터를 가져올 수 있는 능력을 향상시켰습니다.

00:00:24.000 --> 00:00:28.000
오늘 우리는 당신에게 이러한 개선 사항 중 일부를 소개하게 되어 기쁩니다.

00:00:28.000 --> 00:00:45.000
이 프레젠테이션에서, 우리는 API의 검색 기능에 대한 개선 사항뿐만 아니라 리소스를 관련시키고, 속성을 확장하고, 응답의 리소스에 대한 관계 뷰를 요청하여 데이터를 요청하는 새로운 방법을 살펴볼 것입니다.

00:00:45.000 --> 00:00:49.000
마지막으로, 우리는 차트 API에 대한 몇 가지 새로운 개선 사항을 검토할 것입니다.

00:00:49.000 --> 00:00:56.000
검색 개선 사항 중 일부를 검토하기 전에, 현재 /search/hints 엔드포인트를 빠르게 요약하고 싶습니다.

00:00:56.000 --> 00:01:01.000
오늘 이미 이 엔드포인트를 사용하여 제안된 검색어 목록을 가져올 수 있습니다.

00:01:01.000 --> 00:01:07.000
예를 들어, 여기 검색어 "테일러"에 대해 다시 얻을 수 있는 몇 가지 결과가 있습니다.

00:01:07.000 --> 00:01:14.000
오늘, 우리는 /search/hints 엔드포인트를 대체하는 /search/suggestions 엔드포인트를 소개합니다.

00:01:14.000 --> 00:01:24.000
이 엔드포인트는 /search/hints 엔드포인트와 동일한 용어에 대한 액세스를 제공하며, 요청에 대해 kinds=terms를 지정하여 계속 가져올 수 있습니다.

00:01:24.000 --> 00:01:29.000
그러나, 당신은 이 종점의 반응이 약간 다르다는 것을 알 수 있습니다.

00:01:29.000 --> 00:01:35.000
제안된 결과는 이제 요청에 명시된 종류 중 하나와 일치하는 종류를 나타냅니다.

00:01:35.000 --> 00:01:42.000
그것은 또한 검색 쿼리에 사용해야 하는 용어를 사용자에게 표시해야 하는 용어와 구별한다.

00:01:42.000 --> 00:01:51.000
더 중요한 것은, 이 엔드포인트는 이제 가장 많이 제안된 검색 결과에 액세스할 수 있게 해준다는 것이다.

00:01:51.000 --> 00:02:00.000
이것들은 요청에 대해 types=topResults와 결과를 가져오는 데 관심이 있는 일부 리소스 유형을 지정하여 요청할 수 있습니다.

00:02:00.000 --> 00:02:05.000
topResults 종류에 대한 리소스는 콘텐츠 키 아래에서 찾을 수 있습니다.

00:02:05.000 --> 00:02:16.000
이 응답은 폭보다 속도를 우선시하기 때문에 이 엔드포인트에서 얻을 수 있는 결과가 일반 검색에서 얻을 수 있는 결과와 눈에 띄게 다를 수 있다는 점은 주목할 가치가 있습니다.

00:02:16.000 --> 00:02:23.000
따라서, 이것은 일반/검색 엔드포인트를 대체하기 위한 것이 아니라, 오히려 그것을 보완하기 위한 것이다.

00:02:23.000 --> 00:02:31.000
자원을 수정하는 방법에 들어가기 전에, 익숙하지 않은 사람들을 위한 자원이 무엇인지 다시 소개하고 싶습니다.

00:02:31.000 --> 00:02:41.000
모든 자원은 우리가 "자원 식별자"라고 부르는 것을 가지고 있으며, 이는 API에서 자원을 찾는 데 필요한 최소한의 정보입니다.

00:02:41.000 --> 00:02:47.000
자원 식별자에는 자원의 ID, 유형 및 href가 포함됩니다.

00:02:47.000 --> 00:02:58.000
자원의 완전한 표현은 또한 이름과 같은 자원의 속성과 포함 매개 변수를 사용하여 요청된 경우 잠재적으로 관계를 포함할 것이다.

00:02:58.000 --> 00:03:05.000
관계는 노래의 장르나 재생 목록의 트랙과 같은 관련 자료의 모음이다.

00:03:05.000 --> 00:03:11.000
그것으로, 저는 이제 관련 자원의 개념을 소개하고 싶습니다.

00:03:11.000 --> 00:03:23.000
요청된 관계는 해당 관계의 자원에 대해 앞서 언급한 자원 식별자만 반환한다는 점에서 요청된 관계와 다릅니다.

00:03:23.000 --> 00:03:31.000
이것은 당신이 접근이 필요한 모든 것이 자원의 참조라면 관계를 관련시키는 것이 더 빠른 응답을 가져온다는 것을 의미합니다.

00:03:31.000 --> 00:03:43.000
관련 쿼리 매개 변수를 사용하고 목표로 하는 리소스 유형으로 분류한 다음, 되돌리고 싶은 관계 이름 목록을 통해 관계를 연관시킬 수 있습니다.

00:03:43.000 --> 00:03:53.000
예를 들어, /search /suggestions 엔드포인트에서 사용자가 노래 결과를 선택하면 해당 노래의 앨범 페이지로 팝업할 수 있습니다.

00:03:53.000 --> 00:04:04.000
이 경우, 그곳을 탐색하기 위해 그 노래의 앨범에 대한 href만 있으면 됩니다. 그래서 우리는 그 데이터를 얻기 위해 relate=albums를 지정할 수 있습니다.

00:04:04.000 --> 00:04:12.000
그렇게 한 후, 우리는 그 노래 결과가 이제 각각의 앨범에 대한 리소스 식별자를 포함하는 것을 볼 수 있습니다.

00:04:12.000 --> 00:04:22.000
그래서 관련은 우리가 추가 관련 콘텐츠를 빠르게 참조하고 싶을 때 사용하기에 좋지만, 우리가 이미 응답으로 돌아오고 있는 자원에 대해 더 알고 싶다면 어떨까요?

00:04:22.000 --> 00:04:31.000
앞서 언급했듯이, 오늘날 모든 자원에는 이름, 작품 등과 같은 기본 속성 세트가 있습니다.

00:04:31.000 --> 00:04:34.000
하지만 자원은 또한 확장된 속성을 가질 수 있다.

00:04:34.000 --> 00:04:47.000
확장 속성은 계산하는 데 더 비싸거나 덜 자주 필요하기 때문에, 기본적으로 포함하면 응답이 눈에 띄게 느려지거나 객체 모델이 부풀어 오를 수 있습니다.

00:04:47.000 --> 00:05:01.000
관련 쿼리 매개 변수로 방금 본 것과 유사하게, 확장 쿼리 매개 변수를 사용하고, 리소스 유형으로 분류하고, 관심 있는 속성 이름 목록을 따라 리소스에 대한 확장 속성을 요청할 수 있습니다.

00:05:01.000 --> 00:05:11.000
우리의 /suggestions 요청을 바탕으로, 우리는 노래 결과를 위해 사용자가 Apple Music의 해당 아티스트 페이지에 연결할 수 있도록 허용하기로 결정할 수 있습니다.

00:05:11.000 --> 00:05:17.000
이렇게 하기 위해, 당신은 단순히 당신의 요청에 extend=artistUrl을 추가할 수 있습니다.

00:05:17.000 --> 00:05:25.000
실제로, 이것을 한 후, 우리는 이제 우리의 응답에서 노래 자원이 artistUrl 속성을 포함하는 것을 볼 수 있다.

00:05:25.000 --> 00:05:30.000
이제 저는 관계 관점의 개념을 소개하고 싶습니다.

00:05:30.000 --> 00:05:34.000
관계에 비해, 견해는 그들의 자원과 더 느슨하게 결합되어 있다.

00:05:34.000 --> 00:05:40.000
그들은 반드시 관계처럼 자원에 대한 근거적인 진실을 나타내는 것은 아니다.

00:05:40.000 --> 00:05:46.000
이것은 앨범 페이지와 같은 제품 페이지 경험을 운전하는 데 이상적으로 적합한 뷰를 만든다.

00:05:46.000 --> 00:05:53.000
예를 들어, 검색 결과 페이지에서 사용하기에 유용할 수 있는 관계와 비교하세요.

00:05:53.000 --> 00:05:58.000
게다가, 뷰는 데이터뿐만 아니라 제목과 같은 속성을 가질 수 있다.

00:05:58.000 --> 00:06:01.000
뷰는 또한 직접 리소스 가져오기에서만 요청할 수 있습니다.

00:06:01.000 --> 00:06:04.000
이것은 당신이 그것들을 가져올 수 있는 두 가지 다른 방법이 있다는 것을 의미합니다.

00:06:04.000 --> 00:06:16.000
뷰 쿼리 매개 변수를 사용하여 목록을 지정하거나 요청 경로의 리소스 ID 바로 뒤에 /view/{viewName}을 통해 단일 목록을 지정할 수 있습니다.

00:06:16.000 --> 00:06:23.000
이 응답에서, 우리는 아티스트 리소스에 Top Songs 뷰를 포함하는 것이 어떻게 생겼는지에 대한 예를 가지고 있습니다.

00:06:23.000 --> 00:06:28.000
다른 예로는 톱 뮤직 비디오나 아티스트의 싱글이 있다.

00:06:28.000 --> 00:06:35.000
주어진 리소스 유형에 대해 지원되는 뷰의 전체 목록은 물론 공식 Apple Music API 문서에서 찾을 수 있습니다.

00:06:35.000 --> 00:06:39.000
마지막으로, 차트 API에 대한 업데이트를 살펴봅시다.

00:06:39.000 --> 00:06:47.000
오늘날, 애플 뮤직은 세계, 상점, 그리고 최근에는 특정 도시의 차트 재생 목록을 지원합니다.

00:06:47.000 --> 00:06:52.000
사용자는 이 차트 재생 목록을 라이브러리에 추가할 수 있으며, 이는 자동으로 업데이트됩니다.

00:06:52.000 --> 00:07:07.000
이제 types=playlists를 지정하고 "with" 쿼리 매개 변수를 사용하여 dailyGlobalTopCharts 또는 cityCharts 또는 둘 다 원하는 세트를 표시하여 /charts 엔드포인트에서 직접 가져올 수 있습니다.

00:07:07.000 --> 00:07:12.000
그리고 여기에 이러한 쿼리 매개 변수가 있는 차트의 응답이 어떻게 보일 수 있는지에 대한 예가 있습니다.

00:07:12.000 --> 00:07:23.000
그래서 요약하자면, 오늘 우리는 검색 및 차트 엔드포인트에 대한 개선 사항을 검토했고, 응답에서 리소스에 대한 데이터를 가져오는 새로운 방법을 살펴보았습니다.

00:07:23.000 --> 00:07:40.000
Apple Music API에 대해 더 알고 싶다면, Apple Music API에서 콘텐츠를 상호 참조하는 방법에 대한 올해의 세션이나 API의 핵심 개념 중 일부를 더 자세히 설명하는 2017년 MusicKit 소개 프레젠테이션을 적극 추천합니다.

00:07:40.000 --> 00:07:44.000
시청해 주셔서 정말 감사드리며, 올해의 WWDC를 즐기시기 바랍니다.

00:07:44.000 --> 23:59:59.000
♪

