WEBVTT

00:00:02.000 --> 00:00:14.000
안녕하세요, 저는 디스플레이 및 컬러 테크놀로지 팀의 켄 그린바움입니다.

00:00:14.000 --> 00:00:19.000
"High Dynamic Range, rendering with EDR" 강연에 참석해 주셔서 감사합니다.

00:00:19.000 --> 00:00:22.000
그것은 당신과 공유하게 되어 매우 기쁩니다.

00:00:22.000 --> 00:00:28.000
우리가 다룰 것과 누가 참석함으로써 가장 도움이 될 수 있는지 빨리 해보자.

00:00:28.000 --> 00:00:47.000
우리는 EDR이 실제로 무엇인지부터 시작하고, 기존 앱에 EDR을 추가하는 데 사용되는 네 가지 단계를 설명하고, 렌더링을 더 잘 제어하기 위해 네이티브 EDR API에 대해 논의하고, 마지막으로 EDR과 관련된 일련의 모범 사례를 탐구할 것입니다.

00:00:47.000 --> 00:00:50.000
이제, EDR이 뭐야?

00:00:50.000 --> 00:00:54.000
EDR은 당신이 익숙하지 않을 수도 있는 약어입니다.

00:00:54.000 --> 00:00:58.000
그것은 "확장된 다이내믹 레인지"를 의미합니다.

00:00:58.000 --> 00:01:08.000
우리는 플랫폼에서 사용되는 HDR 표현과 HDR 렌더링 기술을 모두 참조하기 위해 "EDR"을 사용합니다.

00:01:08.000 --> 00:01:13.000
그것은 당신이 이미 익숙할 수도 있는 색상 관리와 다소 유사합니다.

00:01:13.000 --> 00:01:17.000
많은 종류의 앱 개발자들은 이 이야기가 흥미롭다는 것을 알게 될 것이다.

00:01:17.000 --> 00:01:30.000
우선, 컴퓨터 그래픽 기술, 하이 다이내믹 레인지 디스플레이, 특히 애플이 지난 몇 년 동안 출시한 새로운 XDR 디스플레이에 관심이 있는 모든 개발자.

00:01:30.000 --> 00:01:41.000
다음은 가장 현실적이고 흥미진진한 경험을 만들고 싶은 하드코어 게임 개발자이며, 렌더링 엔진에 이미 존재할 수 있는 밝은 디테일을 잠금 해제합니다.

00:01:41.000 --> 00:01:53.000
비판적으로, HDR 비디오와 스틸 이미지에 대한 스튜디오 참조 응답을 달성하는 데 관심이 있는 프로 앱 개발자들이 있다.

00:01:53.000 --> 00:02:04.000
마지막으로, 그래픽에만 중점을 두지는 않지만, 현재 생태계에 진입하는 HDR 스틸 이미지와 비디오 콘텐츠를 수용하고 싶은 앱 개발자가 있습니다.

00:02:04.000 --> 00:02:09.000
HDR은 여기에 있으며, 우리의 EDR 기술에 의해 활성화됩니다.

00:02:09.000 --> 00:02:17.000
우리가 논의할 때, 우리는 이미 사용자의 손에 놀라운 기능을 갖춘 디스플레이를 가지고 있다.

00:02:17.000 --> 00:02:29.000
사용자가 캡처, 스트리밍 및 다운로드하는 생태계의 놀라운 HDR 콘텐츠뿐만 아니라 게임과 전문가용 HDR 앱은 App Store에서 사용할 수 있습니다.

00:02:29.000 --> 00:02:32.000
EDR은 적응형 기술이다.

00:02:32.000 --> 00:02:42.000
우리가 논의할 바와 같이, EDR은 HDR 콘텐츠를 매우 다른 기능의 디스플레이에 매핑할 뿐만 아니라 훨씬 더 넓은 범위의 시청 조건을 지원합니다.

00:02:42.000 --> 00:02:48.000
어두운 곳에서 볼 때와 밝은 환경에서 디스플레이가 많이 다르게 보인다는 것을 알아차린 적이 있나요?

00:02:48.000 --> 00:02:57.000
실내에서 경험하는 밝고 생생한 색상은 야외에서 볼 때 낮은 다이내믹 레인지로 어둡고 음소거되어 보일 수 있습니다.

00:02:57.000 --> 00:02:59.000
디스플레이는 바뀌지 않았다.

00:02:59.000 --> 00:03:03.000
주어진 밝기 설정에서, 그것은 항상 같은 빛을 만들고 있다.

00:03:03.000 --> 00:03:09.000
환경에 빠르게 적응한 당신의 비전뿐만 아니라 변화된 환경입니다.

00:03:09.000 --> 00:03:16.000
어두운 환경에서, 당신의 비전은 주요 광원인 표시된 콘텐츠에 적응합니다.

00:03:16.000 --> 00:03:29.000
하지만 밝은 환경에서, 사용자의 비전은 훨씬 더 어두운 디스플레이를 통해 환경에 크게 적응하여 콘텐츠가 어두워지고 씻겨져 검은색과 그림자 디테일을 분쇄합니다.

00:03:29.000 --> 00:03:47.000
이것이 EDR과 기본 주변 적응 기술이 화이트 포인트, 블랙 포인트, 기준 흰색 밝기 및 다이내믹 레인지와 같은 디스플레이 매개 변수를 "EDR 헤드룸"으로 설명하여 디스플레이를 사용자의 적응된 비전에 매핑하는 이유입니다.

00:03:47.000 --> 00:03:51.000
EDR의 적응은 많은 이점을 제공한다.

00:03:51.000 --> 00:04:02.000
아마도 가장 놀랍게도, 이것은 기존의 표준 다이내믹 레인지 디스플레이에서도 EDR이 진정한 HDR 응답을 만드는 결과를 낳는다.

00:04:02.000 --> 00:04:09.000
즉, 해당 디스플레이가 그에 상응하는 조광 밝기 설정이 있는 조광 환경에서 볼 때.

00:04:09.000 --> 00:04:17.000
마찬가지로, EDR의 역학은 밝은 HDR 디스플레이에서 상황에 최적화된 HDR 기능을 생성합니다.

00:04:17.000 --> 00:04:33.000
이를 통해 HDR 콘텐츠는 HDR 참조 희미한 환경에서 멋지게 보일 수 있으며, 이 일러스트레이션의 패치와 같은 그림자 디테일을 유지하면서 더 밝은 환경에서 감소된 최적의 다이내믹 레인지를 제공합니다.

00:04:33.000 --> 00:04:37.000
EDR 렌더링은 우리가 몇 년 동안 배송한 대부분의 장치에서 지원됩니다.

00:04:37.000 --> 00:04:49.000
우리는 기존의 최대 SDR 흰색보다 몇 배 더 밝은 EDR 픽셀을 디스플레이에 렌더링할 수 있는 EDR 헤드룸 측면에서 HDR 기능을 설명했습니다.

00:04:49.000 --> 00:04:57.000
EDR 헤드룸은 디스플레이 기능과 현재 밝기 슬라이더 설정을 포함한 다른 매개 변수에 따라 다릅니다.

00:04:57.000 --> 00:05:06.000
최신 Mac과 iPad에서 볼 수 있는 기존 백라이트 디스플레이에서는 최대 2x SDR까지 사용할 수 있습니다.

00:05:06.000 --> 00:05:13.000
XDR 디스플레이가 장착된 iPhone은 최대 8x SDR EDR 헤드룸을 제공합니다.

00:05:13.000 --> 00:05:21.000
새로운 아이패드 프로의 리퀴드 레티나 XDR 디스플레이는 최대 16배 SDR을 가지고 있다.

00:05:21.000 --> 00:05:30.000
Mac, iPad 및 AppleTV를 통해 일반적인 외부 HDR 10 디스플레이를 구동할 때 대략 5배의 SDR이 제공됩니다.

00:05:30.000 --> 00:05:40.000
그리고 Pro Display XDR은 밝기가 최소 4니트 값으로 설정되면 기본 XDR 프리셋에서 놀라운 400x SDR로 렌더링됩니다.

00:05:40.000 --> 00:05:48.000
HDR 지원 디스플레이는 이미 많은 사용자의 손에 있을 뿐만 아니라, HDR 콘텐츠가 주류가 되고 있다.

00:05:48.000 --> 00:06:00.000
상용 HDR 콘텐츠 외에도, 사용자는 자신의 iPhone 및 기타 장치에서 캡처한 HDR 스틸 및 비디오 콘텐츠를 생태계에 추가하고 있습니다.

00:06:00.000 --> 00:06:04.000
경외심을 불러일으키는 지원서 목록은 이미 EDR을 채택했다.

00:06:04.000 --> 00:06:13.000
EDR을 지원하는 최상위 게임으로는 "Baldur's Gate 3", "Divinity: Original Sin 2", "Shadow of the Tomb Raider"가 있습니다.

00:06:13.000 --> 00:06:23.000
점점 더 많은 AppleTV 서비스가 TV 앱, 넷플릭스, 유튜브를 포함한 HDR 콘텐츠를 제공한다.

00:06:23.000 --> 00:06:33.000
마지막으로, 흥미롭고 성장하는 프로 앱 목록은 EDR을 채택하여 분담금을 높이고 플랫폼에서 개발된 HDR 콘텐츠의 양을 늘렸다.

00:06:33.000 --> 00:06:44.000
Affinity Photo, DaVinci Resolve, Cinema 4D, Final Cut Pro, Nuke 및 Pixelmator Pro는 앱 중 일부일 뿐입니다.

00:06:44.000 --> 00:06:53.000
우리는 다른 사람들에게 다른 것을 의미하는 경향이 있는 "HDR"과 차별화하기 위해 부분적으로 우리의 기술을 "EDR"이라고 명명하기로 결정했습니다.

00:06:53.000 --> 00:07:00.000
많은 사람들이 하이 다이내믹 레인지를 생각할 때, 그들은 딥 블랙을 생산할 수 있는 밝은 디스플레이를 상상한다.

00:07:00.000 --> 00:07:06.000
프로덕션 마인드는 콘텐츠 형식, 아마도 HDR10 또는 Dolby Vision을 생각할 수 있다.

00:07:06.000 --> 00:07:12.000
기술적으로, 그것은 PQ나 HLG와 같은 전송 기능을 떠올리게 한다.

00:07:12.000 --> 00:07:23.000
그리고 아마도 예술적으로, HDR은 심지어 밝은 하이라이트를 나타내는 초현실적이고 그림 같은 톤 맵과 SDR과 같은 희미한 그림자 디테일을 제안할 수 있다.

00:07:23.000 --> 00:07:31.000
RIT가 제작한 초고 다이내믹 레인지 OpenEXR 이미지의 SDR 톤 맵을 고려하십시오.

00:07:31.000 --> 00:07:36.000
톤 맵에는 빛나는 전구와 그림자 디테일이 모두 있습니다.

00:07:36.000 --> 00:07:41.000
그러나, 원본 HDR 이미지의 극적인 다이내믹 레인지는 손실되었다.

00:07:41.000 --> 00:07:52.000
EDR은 의도를 잃으면서 모든 세부 사항을 보존하는 HDR-to-SDR 변환이 아니라 진정한 하이 다이내믹 레인지 렌더링입니다.

00:07:52.000 --> 00:08:04.000
RIT 팀은 여기에서 볼 수 있는 18개의 브래킷 디지털 SLR 노출을 결합하여 놀라운 500,000:1 다이내믹 레인지로 HDR 이미지를 만들었습니다.

00:08:04.000 --> 00:08:20.000
EDR은 부동 소수점에서 이것을 완전히 나타내며, 이미지의 피사체, Luxo 램프 자체는 참조 흰색의 1.0 아래의 픽셀 값으로, 그리고 전구의 방출 구체와 같은 더 밝은 세부 사항은 500에 가까운 값으로 표현됩니다.

00:08:20.000 --> 00:08:23.000
그것은 램프 베이스보다 500배 더 밝다.

00:08:23.000 --> 00:08:28.000
EDR의 구현은 시스템의 모든 요소의 참조 흰색 사이의 매핑을 만든다.

00:08:28.000 --> 00:08:35.000
콘텐츠의 참조 흰색에서 디스플레이의 참조, 사용자의 적응된 비전에 이르기까지.

00:08:35.000 --> 00:09:00.000
이 매핑은 HDR과 SDR 콘텐츠가 나란히 공존할 수 있도록 허용하고, 환경 전반에 걸쳐 HDR 디스플레이의 다이내믹 레인지를 최적으로 노출하고, 기존 SDR 디스플레이가 진정한 HDR을 렌더링할 수 있도록 허용하며, 항상 EDR이 가능한 한 큰 다이내믹 레인지를 렌더링할 수 있도록 허용하는 것을 포함하여 EDR의 많은 이점을 제공하는 데 기본입니다.

00:09:00.000 --> 00:09:10.000
예를 들어, Pro Display XDR에서 밝기 슬라이더가 최대 500니트로 설정된 경우, 최대 3.2의 EDR 값은 클리핑 없이 렌더링됩니다.

00:09:10.000 --> 00:09:19.000
그에 상응하는 더 큰 EDR 값을 가진 램프 헤드와 같은 더 밝은 요소는 디스플레이의 1,600니트 피크에 고정될 것이다.

00:09:19.000 --> 00:09:40.000
디스플레이의 밝기 설정을 4니트 최소값으로 낮추면, 어둡거나 어두운 환경에서 자동으로 자동 밝기를 통해 또는 수동으로 밝기 슬라이더를 사용하여 최대 400의 EDR 값을 렌더링할 수 있으므로 이 뛰어난 이미지의 대부분의 동적 범위를 제공합니다.

00:09:40.000 --> 00:09:49.000
이미지의 가장 밝은 요소는 여전히 디스플레이의 1,600니트 피크 밝기로 렌더링되었지만, 이제 전구의 윤곽을 명확하게 정의합니다.

00:09:49.000 --> 00:09:55.000
마찬가지로, 밝게 빛나는 컬러 체커의 색상과 같은 다른 세부 사항이 드러난다.

00:09:55.000 --> 00:10:07.000
사용자의 비전이 이제 이미지의 4-니트 참조 흰색에 적응함에 따라, 이미지의 가장 밝은 요소는 이제 램프 베이스보다 400배 더 밝게 렌더링됩니다.

00:10:07.000 --> 00:10:14.000
EDR의 부동 소수점 HDR 표현 및 렌더링 파이프라인의 의미를 살펴봅시다.

00:10:14.000 --> 00:10:23.000
부동 소수점인 EDR은 완전히 채워진 색도 다이어그램으로 표현되는 것처럼 인간이 인식할 수 있는 모든 색을 나타낼 수 있다.

00:10:23.000 --> 00:10:29.000
마찬가지로, EDR은 완전히 렌더링되면 시력에 해를 끼칠 수 있는 밝기를 나타낼 수 있다.

00:10:29.000 --> 00:10:34.000
따라서, EDR의 표현은 미래 지향적이다.

00:10:34.000 --> 00:10:41.000
언급했듯이, EDR은 표현일 뿐만 아니라 HDR 렌더링 파이프라인이기도 하다.

00:10:41.000 --> 00:10:48.000
EDR은 애플이 개척한 색상 관리 기술의 확장이며, 매우 오랫동안 배송되어 왔다.

00:10:48.000 --> 00:10:55.000
예를 들어, GPU 가속 컬러 관리 비디오는 MacOS 10.4 Tiger에서 처음 배송되었습니다.

00:10:55.000 --> 00:11:12.000
일반 및 넓은 색영역의 미디어를 나란히 표시할 수 있도록 하는 것과 개념적으로 유사한 EDR은 HDR과 SDR 자산이 조화로운 방식으로 화면을 공유하고 다른 기능의 디스플레이에 적절하게 렌더링할 수 있도록 합니다.

00:11:12.000 --> 00:11:22.000
무엇보다도, 이것은 개발자들이 기존 SDR 자산을 계속 사용하고 필요에 따라 선택적으로 EDR 지원을 추가할 수 있다는 것을 의미합니다.

00:11:22.000 --> 00:11:27.000
HDR 픽셀 값에 대한 EDR의 표현을 시각적으로 살펴봅시다.

00:11:27.000 --> 00:11:31.000
EDR은 부동 소수점 표현이다.

00:11:31.000 --> 00:11:46.000
EDR 0.0은 검은색을 나타내고, 1.0은 "참조 흰색" 또는 "UI 흰색"으로도 알려진 SDR max를 나타내며, 따라서 EDR 0.0에서 1.0은 항상 같은 SDR 범위를 나타냅니다.

00:11:46.000 --> 00:11:50.000
이 값들은 이미지의 주제를 나타내며, 렌더링할 때 절대 잘리지 않을 것이다.

00:11:50.000 --> 00:11:59.000
1.0 이상의 EDR 값은 하이라이트 및 방출 표면과 같은 SDR 밝기를 초과하는 값을 나타냅니다.

00:11:59.000 --> 00:12:06.000
이 값들은 매우 밝아질 수 있으며, 표현할 수 있지만, 렌더링될 때 클리핑될 수 있다.

00:12:06.000 --> 00:12:15.000
EDR은 디스플레이에 기존의 순수 전력 응답이나 최신 HDR 전송 기능이 있는지 여부에 관계없이 디스플레이를 구동하는 데 사용됩니다.

00:12:15.000 --> 00:12:21.000
PQ 기반인 기본 XDR 프리셋에서 Pro Display XDR을 고려해 봅시다.

00:12:21.000 --> 00:12:26.000
EDR 0.0은 제로 니트 PQ 코드를 통해 디스플레이를 제로 니트로 구동한다.

00:12:26.000 --> 00:12:34.000
"참조 흰색"이라고 불리는 EDR 1.0은 항상 그렇듯이 디스플레이 밝기 슬라이더 또는 자동 밝기에 의해 스케일링됩니다.

00:12:34.000 --> 00:12:40.000
XDR 프리셋은 전형적인 약 4~500 니트의 기준 흰색 밝기 범위를 가지고 있다.

00:12:40.000 --> 00:12:44.000
이 예시에서 최대 500 니트 설정을 고려해 봅시다.

00:12:44.000 --> 00:12:50.000
밝기 설정에 관계없이, 피크 화이트는 이 프리셋에서 항상 1,600니트입니다.

00:12:50.000 --> 00:13:02.000
따라서, 가장 밝고 렌더링 가능한 EDR 값인 EDRmax는 1,600니트 피크 화이트를 500니트 참조 화이트로 나누어 계산할 수 있는 3.2입니다.

00:13:02.000 --> 00:13:14.000
이에 따라, 우리는 디스플레이에 렌더링할 수 있는 가장 밝은 값이 참조 흰색보다 3.2배 더 밝기 때문에 3.2배의 SDR 헤드룸이 있다고 말합니다.

00:13:14.000 --> 00:13:34.000
요약하자면, Pro Display XDR에서, 500니트에서 "참조 흰색"으로도 알려진 디스플레이 밝기와 함께 기본 XDR 프리셋을 사용하여, EDR 값 0.0에서 3.2는 0.0에서 1,600니트로 디스플레이에 렌더링되며, EDR 1.0은 500니트로 표시됩니다.

00:13:34.000 --> 00:13:41.000
마지막으로, EDRmax의 3.2 이상의 EDR 값은 피크 화이트, 1,600 니트로 잘립니다.

00:13:41.000 --> 00:13:55.000
놀랍게도, 디스플레이 밝기가 최소 4니트로 감소함에 따라, 최대 400의 EDR 값을 렌더링할 수 있게 되어 진정한 다이내믹 레인지에서 믿을 수 없을 정도로 밝은 디테일을 드러냅니다.

00:13:55.000 --> 00:14:01.000
이제 EDR이 어떻게 작동하는지에 대한 개요를 갖게 되었으므로, 우리는 당신의 애플리케이션에 EDR을 추가하는 것을 살펴볼 것입니다.

00:14:01.000 --> 00:14:05.000
대부분의 응용 프로그램에 EDR 지원을 추가하는 네 단계가 있습니다.

00:14:05.000 --> 00:14:15.000
이 단계들은 모두 간단하지만, 그 효과는 미묘할 수 있으며 모든 것을 적용하기 전까지는 EDR 결과를 안정적으로 얻지 못할 것입니다.

00:14:15.000 --> 00:14:22.000
먼저, 적절한 컨텍스트, 레이어 또는 객체에 속성을 추가하여 EDR을 요청해야 합니다.

00:14:22.000 --> 00:14:28.000
둘째, 확장된 범위의 색 공간을 버퍼, 레이어 또는 앱과 연결해야 합니다.

00:14:28.000 --> 00:14:35.000
색상 관리는 확장된 범위의 색상 공간이 지정되지 않은 경우 EDR 값을 1.0 이상으로 클립합니다.

00:14:35.000 --> 00:14:45.000
색상 관리는 소스와 대상 색상 공간이 일치하지 않을 때만 작동할 수 있으므로, 이 클립은 간헐적이거나 콘텐츠에 의존적일 수 있습니다.

00:14:45.000 --> 00:14:52.000
셋째, 1.0 이상의 값을 나타낼 수 있는 픽셀 버퍼 형식을 선택해야 합니다.

00:14:52.000 --> 00:14:54.000
이것은 보통 일종의 부동 소수점이다.

00:14:54.000 --> 00:15:03.000
마지막으로, 당신의 애플리케이션은 SDR 0.0에서 1 범위를 초과하는 픽셀을 생성해야 하며, 따라서 자랑할 반짝이는 요소가 있어야 합니다.

00:15:03.000 --> 00:15:09.000
많은 개발자들은 EDR 지원을 추가하고 싶을 수도 있는 기존 앱을 가지고 있다.

00:15:09.000 --> 00:15:19.000
아마도 EDR을 시작하는 가장 쉬운 방법은 기존 SDR 콘텐츠 대신 HDR 비디오 또는 스틸 이미지 콘텐츠를 대체하는 것입니다.

00:15:19.000 --> 00:15:22.000
그런 다음 우리가 방금 설명한 네 단계를 따르세요.

00:15:22.000 --> 00:15:31.000
예를 들어, 표시된 이메일 앱과 같은 일부 응용 프로그램은 HDR 콘텐츠가 발생할 때만 선택적으로 EDR을 활성화할 수 있습니다.

00:15:31.000 --> 00:15:41.000
AVFoundation의 AVPlayer 인터페이스는 Dolby Vision, HDR 10 및 HLG와 같은 점점 더 많은 HDR 비디오 형식을 지원합니다.

00:15:41.000 --> 00:15:49.000
AVPlayer는 watchOS를 제외한 모든 플랫폼에서 가능한 경우 이러한 형식을 EDR로 자동으로 렌더링합니다.

00:15:49.000 --> 00:15:57.000
기존 AVPlayer 기반 애플리케이션은 EDR을 통해 지원되는 HDR 비디오 형식을 렌더링하는 데 변경이 필요하지 않습니다.

00:15:57.000 --> 00:16:01.000
EDR이 활성화된 AVPlayer 코드 예제를 살펴봅시다.

00:16:01.000 --> 00:16:08.000
항상 그렇듯이, 먼저 AVPlayer의 playerWithURL을 사용하여 AVPlayer 인스턴스를 만듭니다.

00:16:08.000 --> 00:16:12.000
그러나, 우리의 예에서, 우리는 HDR 비디오 콘텐츠를 지정합니다.

00:16:12.000 --> 00:16:18.000
다음으로, playerLayerWithPlayer를 사용하여 플레이어를 레이어에 추가하세요.

00:16:18.000 --> 00:16:23.000
마지막으로, 컨트롤러를 플레이어에게 가리키고 플레이어에게 플레이를 시작하도록 요청하세요.

00:16:23.000 --> 00:16:34.000
AVFoundation은 HDR 미디어를 EDR로 렌더링하는 데 필요한 것을 자동으로 수행하며, 콘텐츠 유형에 따라 EDR을 활성화 및 비활성화합니다.

00:16:34.000 --> 00:16:37.000
HDR 비디오 재생은 꽤 간단하다.

00:16:37.000 --> 00:16:41.000
다음으로, HDR 스틸 이미지 렌더링을 고려해 봅시다.

00:16:41.000 --> 00:16:51.000
ImageIO는 HDR 이미지 형식을 광범위하게 지원하며, 부동 소수점 버퍼에서 EDR로 디코딩된 픽셀을 편리하게 반환합니다.

00:16:51.000 --> 00:16:59.000
ImageIO는 모든 플랫폼에서 사용할 수 있지만, 현재 디코딩된 결과는 macOS에서 EDR로만 렌더링될 수 있습니다.

00:16:59.000 --> 00:17:07.000
우리는 다가오는 CAMetalLayer 예제에서 ImageIO 기반 자산을 애플리케이션에 통합하는 방법을 시연할 것입니다.

00:17:07.000 --> 00:17:11.000
이제, 네이티브 EDR API를 살펴봅시다.

00:17:11.000 --> 00:17:25.000
내가 언급했듯이, 네이티브 EDR API는 게임 및 프로 앱과 같은 애플리케이션을 위해 만들어졌으며, 개발자는 사용자 지정 콘텐츠를 렌더링하고 HDR 미디어가 렌더링되는 방식을 더 잘 제어할 수 있습니다.

00:17:25.000 --> 00:17:32.000
현재, 이 API는 CAMetalLayer와 NSOpenGLView를 통해 macOS에서 사용할 수 있습니다.

00:17:32.000 --> 00:17:38.000
선호하는 네이티브 EDR 프레임워크인 CAMetalLayer를 사용하는 예를 살펴봅시다.

00:17:38.000 --> 00:17:52.000
우선, 우리는 4단계 프로세스 중 처음 세 가지를 살펴보고, EDR을 선택하고, 확장된 범위의 색 공간을 설정하고, FP16 픽셀 버퍼 형식을 선택할 것입니다.

00:17:52.000 --> 00:18:01.000
먼저, metalLayer의 "wantsExtended DynamicRangeContent" 속성을 "yes"로 설정하여 EDR에 옵트인하세요.

00:18:01.000 --> 00:18:09.000
둘째, metalLayer의 색 공간을 ExtendedLinearDisplayP3와 같은 확장된 범위의 색 공간으로 설정하세요.

00:18:09.000 --> 00:18:17.000
셋째, metalLayer의 픽셀 형식을 RGBA16Float와 같은 부동 소수점 형식으로 설정하십시오.

00:18:17.000 --> 00:18:23.000
다음으로, 우리는 실제로 EDR 픽셀을 생성하는 네 번째 EDR 옵트인 단계를 검토할 것이다.

00:18:23.000 --> 00:18:31.000
이 경우, 우리는 ImageIO를 사용하여 HDR 스틸 이미지 콘텐츠를 가져오고 결과를 EDR 텍스처로 렌더링할 것입니다.

00:18:31.000 --> 00:18:35.000
그것은 조금 관련되어 있기 때문에, 우리는 그것을 단계별로 걸을 것이다.

00:18:35.000 --> 00:18:53.000
우리는 HDR 콘텐츠에서 CGImage를 만들고, 디코딩된 이미지를 부동 소수점 비트맵으로 그리고, 부동 소수점 텍스처를 만들고, EDR 비트맵을 텍스처에 로드하고, 마지막으로 EDR 지원 금속 파이프라인에 텍스처를 렌더링합니다.

00:18:53.000 --> 00:19:08.000
먼저, CGImage는 CGImageSourceCreateWithURL과 CGImageSourceCreateImageAtIndex를 사용하여 HDRimageURL에 지정된 소스에서 생성됩니다.

00:19:08.000 --> 00:19:25.000
다음으로, metalLayer에서 이전에 설정한 것과 동일한 색상 공간을 사용하여 CGBitmapContextCreate로 CGContext를 만들고, CGContextDrawImage를 사용하여 EDR 이미지를 부동 소수점 컨텍스트로 그립니다.

00:19:25.000 --> 00:19:33.000
이제, 우리는 newTextureWithDescriptor를 사용하여 RGBA16Float 유형의 부동 소수점 텍스처를 만듭니다.

00:19:33.000 --> 00:19:42.000
replaceRegion을 사용하여 CGBitmapContextGetData를 사용하여 EDR 텍스처에 EDR 이미지 데이터를 로드하십시오.

00:19:42.000 --> 00:19:51.000
마지막으로, 개발자는 EDR 텍스처를 EDR 지원 금속 파이프라인으로 렌더링하고 역동적인 결과를 즐길 준비가 되어 있다.

00:19:51.000 --> 00:20:02.000
여전히 OpenGL 기반 애플리케이션을 지원하는 사람들을 위해, 우리는 이미 시연한 것과 유사한 단계를 사용하여 NSOpenGLView에서 EDR을 활성화하는 방법을 살펴볼 것입니다.

00:20:02.000 --> 00:20:07.000
EDR의 채택은 또한 색상 관리를 완전히 수용할 수 있는 기회를 제공할 수 있다.

00:20:07.000 --> 00:20:10.000
그러나, 우리는 이 이야기에서 그것을 다루지 않을 것이다.

00:20:10.000 --> 00:20:22.000
우리는 다음 단계를 살펴볼 것입니다: EDR을 선택하고, 부동 소수점 픽셀 버퍼 형식을 선택하고, EDR과 콘텐츠를 NSOpenGLView로 그리기.

00:20:22.000 --> 00:20:30.000
NSOpenGLView는 자동으로 색상 관리되지 않기 때문에 확장된 범위의 색 공간을 설정하는 것은 필요하지 않습니다.

00:20:30.000 --> 00:20:40.000
먼저, NSOpenGLView의 "wantsExtendedDynamicRange OpenGLSurface" 속성을 "yes"로 설정하여 EDR을 선택하세요.

00:20:40.000 --> 00:20:49.000
둘째, 픽셀 버퍼 형식을 ColorSize, 64로 NSOpenGLPFAColorFloat로 설정하세요.

00:20:49.000 --> 00:20:56.000
마지막으로, EDR 값을 OpenGLView에 가져오고, 수정된 응용 프로그램을 실행하고, 결과를 즐기세요.

00:20:56.000 --> 00:21:10.000
이제 기존 응용 프로그램에서 기본 EDR 지원을 활성화하는 것에 대해 논의했으므로, 조금 더 깊이 파고들고 EDR 지원 응용 프로그램을 최대한 활용할 수 있는 여러 가지 모범 사례를 살펴보겠습니다.

00:21:10.000 --> 00:21:15.000
EDR 옵트인 4단계는 확장된 범위의 색 공간을 설정하는 것이다.

00:21:15.000 --> 00:21:22.000
그리고 지금까지 우리의 예에서, 우리는 적절한 확장 범위 색 공간을 명시적으로 설정했다.

00:21:22.000 --> 00:21:30.000
그러나, 많은 앱은 색상 공간을 명시적으로 설정하지 않고, 대신 프레임워크에서 제공하는 기본 색상 공간을 사용합니다.

00:21:30.000 --> 00:21:40.000
이것은 종종 확장된 범위가 아닌 디스플레이 또는 구성 공간에 해당하므로, 무언가가 이루어지지 않는 한 EDR을 깨뜨린다.

00:21:40.000 --> 00:21:45.000
기존 색 공간을 확장된 범위로 홍보하는 방법의 예를 살펴봅시다.

00:21:45.000 --> 00:21:51.000
먼저, 이 경우, 뷰의 창에서 기존 색상 공간을 얻으세요.

00:21:51.000 --> 00:21:57.000
둘째, CGcolorspaceCreateExtended를 사용하여 그 색 공간을 확장된 범위로 홍보하세요.

00:21:57.000 --> 00:22:10.000
마지막으로, 새로 생성된 확장된 범위의 색영역을 창, 버퍼 또는 레이어에 적절하게 할당하여 색영역을 명시적으로 설정하지 않은 앱이 EDR을 사용할 수 있도록 합니다.

00:22:10.000 --> 00:22:15.000
다음으로, 우리는 EDR 콘텐츠를 생성하기 위한 모범 사례를 탐구할 것이다.

00:22:15.000 --> 00:22:25.000
지금까지, 우리는 EDR 콘텐츠의 값이 1.0을 초과한다고 언급했지만, 실제로 이 콘텐츠를 합성하거나 HDR 소스에서 변환하는 방법은 아닙니다.

00:22:25.000 --> 00:22:38.000
적절하게 작성된 콘텐츠를 어둡게 보이게 하는 섬뜩하고 무지개 빛깔의 빛을 가질 수 있는 두려운 "빛나는 토끼 증후군"을 경험할 수 있기 때문에 EDR 콘텐츠를 생성하도록 주의하십시오.

00:22:38.000 --> 00:22:46.000
강조했듯이, EDR 1.0 위의 픽셀은 반사 하이라이트와 방출 표면만 인코딩해야 합니다.

00:22:46.000 --> 00:22:52.000
이것은 SDR 콘텐츠를 HDR로 늘리는 것이 부적절하다는 것을 의미합니다.

00:22:52.000 --> 00:22:58.000
SDR 콘텐츠는 기본 0.0에서 1.0 범위의 EDR과 호환됩니다.

00:22:58.000 --> 00:23:03.000
이것은 SDR 참조 흰색을 HDR 콘텐츠와 일치시킨다.

00:23:03.000 --> 00:23:15.000
HDR 콘텐츠가 너무 밝게 작성될 때, 더 어두운 요소 또는 그림자가 EDR 1.0을 초과해야 하는 것은 잘 작성된 콘텐츠에 비해 부자연스럽게 보일 것이다.

00:23:15.000 --> 00:23:24.000
사용자의 비전은 이 지나치게 밝은 콘텐츠에 적응하기 시작할 수 있으며, 다른 콘텐츠를 비교했을 때 어둡게 보일 수 있다.

00:23:24.000 --> 00:23:31.000
사진작가와 애니메이터가 노출을 설정하기 위해 사용하는 18% 회색 카드를 들고 있는 소녀의 예를 고려해 보세요.

00:23:31.000 --> 00:23:45.000
그 소녀는 사진의 주제이며, 결과적으로, 사진작가나 애니메이터는 그녀가 참조 흰색 또는 그 이하가 되도록 노출을 설정할 것이며, 따라서 잘리지 않을 것이다.

00:23:45.000 --> 00:23:49.000
대부분의 사용자 인터페이스 요소도 EDR 1.0을 초과해서는 안 됩니다.

00:23:49.000 --> 00:23:59.000
그러나, 관심을 끌기 위해 밝게 조명된 EDR 색상 선택기 또는 일시적으로 확장된 UI를 포함한 예외가 있을 수 있습니다.

00:23:59.000 --> 00:24:15.000
태양이나 구름과 같은 방출 표면과 반짝이는 표면에서 반사되는 태양과 같은 반사 하이라이트는 잠재적으로 참조 흰색보다 훨씬 밝으며, 결과적으로 EDR 1.0을 초과할 것으로 예상됩니다.

00:24:15.000 --> 00:24:20.000
장면의 가장 밝은 요소는 이미 SDR 인코딩에 의해 잘렸다.

00:24:20.000 --> 00:24:26.000
결과적으로, SDR 콘텐츠는 EDR 0.0에서 1.0으로 정확하게 표현된다.

00:24:26.000 --> 00:24:32.000
때때로 워크플로우는 HDR 형식을 명시적으로 EDR로 변환해야 합니다.

00:24:32.000 --> 00:24:39.000
언급했듯이, ImageIO는 HDR 콘텐츠를 EDR로 디코딩하여 추가 변환이 필요하지 않습니다.

00:24:39.000 --> 00:24:48.000
예를 들어, HLG는 0.0에서 12.0 EDR 범위로 디코딩되며, EDR 1.0은 참조 흰색을 나타냅니다.

00:24:48.000 --> 00:24:59.000
ImageIO는 다른 HDR 스틸 이미지 형식을 특정 범위로 디코딩하며, EDR 1.0은 항상 소스의 참조 흰색에 해당합니다.

00:24:59.000 --> 00:25:05.000
AVFoundation은 현재 HDR10과 같은 HDR 형식을 EDR로 디코딩하지 않습니다.

00:25:05.000 --> 00:25:09.000
결과적으로, 이것들은 EDR 렌더링과 함께 사용하기 위해 조정되어야 한다.

00:25:09.000 --> 00:25:13.000
이 전환은 간단하며 두 단계를 포함한다.

00:25:13.000 --> 00:25:18.000
먼저, 역전사 함수를 적용하여 선형 광으로 변환한다.

00:25:18.000 --> 00:25:21.000
그리고 두 번째로, 매체의 기준 흰색으로 나눕니다.

00:25:21.000 --> 00:25:33.000
예를 들어, PQ 콘텐츠의 경우 100 니트이므로 참조 흰색은 EDR 1.0에 매핑되고 최대 PQ 10,000 니트 값은 EDR 100에 매핑됩니다.

00:25:33.000 --> 00:25:39.000
디지털과 필름의 많은 사진과 마찬가지로 하늘이 흰색으로 잘린 이 사진을 생각해 보세요.

00:25:39.000 --> 00:25:56.000
EDR은 이미지의 주제를 나타내는 EDR 1.0, 참조 흰색까지 값을 클립하지 않지만, EDR은 현재 EDRmax를 초과하는 참조 흰색 위의 값을 클립하므로 현재 시스템 디스플레이 및 디스플레이 설정에서 렌더링할 수 없습니다.

00:25:56.000 --> 00:26:07.000
참조 흰색 위의 이러한 값은 구름, 하늘, 태양과 같은 하이라이트 또는 방출 표면이며, 이 이미지에서 볼 수 없으며, 따라서 일반적으로 자를 수 있습니다.

00:26:07.000 --> 00:26:12.000
그러나, 밝은 디테일의 클리핑이 항상 받아들여지는 것은 아니다.

00:26:12.000 --> 00:26:17.000
예를 들어, 구름 위로 높이 날아다니는 햇볕에 쬐인 비행기의 이미지를 생각해 보세요.

00:26:17.000 --> 00:26:20.000
파란색 "HDR11" 도색이 보이시나요?

00:26:20.000 --> 00:26:34.000
밝게 조명된 숫자와 칠해진 동체는 둘 다 참조 흰색보다 크게 렌더링될 수 있으며, 따라서 디스플레이 기능과 현재 EDRmax에 따라 잠재적으로 잘릴 수 있습니다.

00:26:34.000 --> 00:26:45.000
이 숫자가 영화나 게임에서 중요한 플롯 요소였다면, 클리핑을 피하거나 관리하고 숫자를 볼 수 있도록 동적 톤 매핑을 사용할 수 있습니다.

00:26:45.000 --> 00:26:54.000
정교한 응용 프로그램이 현재 EDRmax 값을 어떻게 따라잡을 수 있는지 살펴보고, 그에 따라 그들이 렌더링하는 것을 적용해 봅시다.

00:26:54.000 --> 00:27:09.000
응용 프로그램은 NSScreen 알림을 구독하거나, 장면의 물체의 밝기를 조정하거나, 장면의 노출을 변경하거나, 블룸 효과를 적용하거나, 중요한 세부 사항이 손실되지 않도록 소프트 클립을 적용할 수 있습니다.

00:27:09.000 --> 00:27:15.000
현재, NSScreen 인터페이스에서 접근할 수 있는 동적 EDR 값은 하나뿐이다.

00:27:15.000 --> 00:27:25.000
그것은 maximumExtendedDynamic RangeColorComponentValue이며, 현재 렌더링 가능한 최대 선형 EDR 값을 나타냅니다.

00:27:25.000 --> 00:27:31.000
우리가 언급했듯이, EDRmax보다 큰 EDR 값은 EDRmax로 고정될 것이다.

00:27:31.000 --> 00:27:41.000
그리고 EDRmax는 시간이 지남에 따라 바뀔 수 있는 디스플레이 밝기나 트루 톤과 같은 특성에 의존하기 때문에 동적으로 바뀔 수 있습니다.

00:27:41.000 --> 00:27:48.000
NSScreen에서 액세스할 수 있는 다른 두 개의 EDR 값은 정적이며, 이는 시간이 지남에 따라 변하지 않는다는 것을 의미합니다.

00:27:48.000 --> 00:28:02.000
이전 값과 달리, maximumPotentialExtendedDynamic RangeColorComponentValue는 이 디스플레이에서 클리핑하지 않고 렌더링할 수 있는 최대 EDR 선형 픽셀 값을 반환합니다.

00:28:02.000 --> 00:28:07.000
즉, 디스플레이 밝기와 기타 기능이 적절하게 설정된 경우.

00:28:07.000 --> 00:28:18.000
최대 잠재적 EDR은 SDR 또는 HDR 버전의 콘텐츠를 사용해야 하는지, 또는 EDR을 활성화하는 것이 가치가 있는지 결정하는 것과 같은 결정을 안내하는 데 사용될 수 있습니다.

00:28:18.000 --> 00:28:21.000
그 잠재력은 이름에 있다는 것을 기억하세요.

00:28:21.000 --> 00:28:27.000
현재 렌더링 가능한 최대 값인 EDRmax는 이 값보다 낮을 수 있습니다.

00:28:27.000 --> 00:28:32.000
1.0은 EDR을 지원하지 않는 디스플레이 또는 디스플레이 프리셋의 경우 반환됩니다.

00:28:32.000 --> 00:28:45.000
최종 정적 값인 maximumReferenceExtendedDynamic RangeColorComponentValue는 주로 참조 표준에 대한 가장 높은 충실도를 달성하는 데 관심이 있는 Pro 애플리케이션 개발자에게 관심이 있습니다.

00:28:45.000 --> 00:28:55.000
주어진 디스플레이에서 클리핑이나 톤 매핑과 같은 왜곡 없이 렌더링되도록 보장되는 최대 EDR 값을 제공합니다.

00:28:55.000 --> 00:28:59.000
0.0은 참조 렌더링을 지원하지 않는 디스플레이에서 반환됩니다.

00:28:59.000 --> 00:29:05.000
이제, NSScreen을 통해 EDR 값을 읽는 예제 코드를 살펴봅시다.

00:29:05.000 --> 00:29:10.000
여기서, 우리는 두 개의 정적 EDR 값인 maxPotential과 maxReference를 읽습니다.

00:29:10.000 --> 00:29:17.000
EDR 값은 디스플레이마다 다를 수 있으므로, 앱이 실제로 켜져 있는 화면에서 전화를 걸어야 합니다.

00:29:17.000 --> 00:29:21.000
이 예에서, 우리는 당신의 창과 관련된 NSScreen을 사용하고 있습니다.

00:29:21.000 --> 00:29:39.000
응용 프로그램은 "NSWindowDidChangeScreen" 알림을 구독하여 동적 EDR 변경 사항을 파악한 다음, 화면 변경 이벤트를 수신할 때 현재 EDR 매개 변수를 쿼리하고, 현재 EDR 헤드룸에 대한 지식을 기반으로 렌더링되는 것을 잠재적으로 변경할 수 있습니다.

00:29:39.000 --> 00:29:45.000
톤 매핑에 대한 논의를 완료하기 위해, 우리는 CAMetalLayer 톤 매퍼를 간략하게 살펴볼 것이다.

00:29:45.000 --> 00:29:55.000
이것은 HLG 및 HDR10과 같은 HDR 비디오를 프로젝트 기반 HDR 마스터링 매개 변수로 작성하고 렌더링하는 프로 앱에 관심이 있습니다.

00:29:55.000 --> 00:30:11.000
이미 설명한 바와 같이 시스템 앱과 AVPlayer를 사용하는 앱은 CAMetalLayer 톤 매퍼를 사용하여 미디어별 광학-광학 전송 기능과 그렇지 않으면 렌더링할 수 없는 HDR 값에 대한 소프트 클립을 제공합니다.

00:30:11.000 --> 00:30:20.000
CAMetalLayer 톤 매퍼는 "CAEDRMetadata" 속성을 통해 활성화되며 macOS에서 사용할 수 있습니다.

00:30:20.000 --> 00:30:28.000
이 예제는 앱의 CAMetalLayer에서 "EDRMetadata" 속성을 설정하여 시스템 톤 매퍼를 활성화하는 방법을 보여줍니다.

00:30:28.000 --> 00:30:32.000
많은 EDRMetadata 생성자를 사용할 수 있습니다.

00:30:32.000 --> 00:30:37.000
그것들은 HDR 비디오 표준과 제공된 마스터링 정보에 특화되어 있다.

00:30:37.000 --> 00:30:42.000
여기서 우리는 매개 변수를 받지 않는 HLGMetadata 생성자를 볼 수 있다.

00:30:42.000 --> 00:30:46.000
다음으로, 우리는 HDR10 생성자 중 하나를 시연합니다.

00:30:46.000 --> 00:30:59.000
이것은 세 가지 매개 변수를 사용합니다: 니트의 명시적 최소 및 최대 루미넌스, 그리고 종종 HDR10의 100니트 참조 흰색으로 설정된 opticalOutputScale.

00:30:59.000 --> 00:31:11.000
일단 구성되면, 애플리케이션의 CAMetalLayer에 결과 객체를 설정하여 이 레이어에서 렌더링된 모든 콘텐츠가 제공된 메타데이터를 기반으로 시스템 톤 매퍼에 의해 처리되도록 합니다.

00:31:11.000 --> 00:31:18.000
적응형 톤 매핑과 밀접한 관련이 있는 앱은 현재 렌더링 가능한 가장 밝은 흰색으로 그리기를 원할 수 있습니다.

00:31:18.000 --> 00:31:28.000
우리는 이미 NSScreen에서 현재 EDRmax를 얻는 방법을 알고 있지만, EDR 헤드룸은 선형 값이며 픽셀은 대부분 비선형으로 인코딩됩니다.

00:31:28.000 --> 00:31:35.000
이 마지막 예에서, 우리는 EDRmax를 앱의 잠재적으로 비선형 색 공간으로 변환할 것입니다.

00:31:35.000 --> 00:31:41.000
먼저, 우리는 CGColorSpaceCreateWithName을 사용하여 렌더링하고 싶은 선형 EDRmax 흰색 픽셀을 만듭니다.

00:31:41.000 --> 00:31:50.000
그런 다음 CGColorCreateCopy ByMatchingToColorSpace를 사용하여 선형 EDRmax 픽셀을 애플리케이션의 색상 공간으로 변환하십시오.

00:31:50.000 --> 00:31:55.000
그 결과 색상은 모든 EDR 지원 응용 프로그램에서 사용될 수 있습니다.

00:31:55.000 --> 00:32:01.000
이것은 우리에게 논의할 마지막 주제, EDR의 힘과 성능 영향을 남긴다.

00:32:01.000 --> 00:32:15.000
모든 CG 렌더링과 마찬가지로, EDR이 전력과 성능에 미치는 영향을 평가하는 것은 복잡할 수 있으며, 종종 주어진 장치에 사용되는 특정 하드웨어 아키텍처와 디스플레이 기술에 의존한다.

00:32:15.000 --> 00:32:31.000
이 강연에서 자세히 설명하지는 않겠지만, 더 밝은 픽셀을 생성하는 것은 종종 더 많은 전력을 소비하고, EDR과 함께 사용되는 부동 소수점 버퍼가 더 클 수 있으므로 그렇지 않으면 사용될 수 있는 고정 소수점 버퍼보다 더 많은 대역폭을 소비하는 것과 같이 고려해야 할 몇 가지 일반적인 사항이 있습니다.

00:32:31.000 --> 00:32:34.000
이것은 차례로 더 많은 전력 소비와 관련이 있다.

00:32:34.000 --> 00:32:40.000
CAEDRMetadata 기반 톤 매핑을 활성화하는 것조차도 추가 처리 패스를 포함한다.

00:32:40.000 --> 00:32:44.000
이것은 차례로 대기 시간과 대역폭을 증가시킨다.

00:32:44.000 --> 00:32:51.000
간단히 말해서, EDR은 많은 기능과 마찬가지로 무료가 아니며, 따라서 현명하게 사용해야 한다.

00:32:51.000 --> 00:32:58.000
가장 좋은 방법은 HDR 콘텐츠와 잠재적인 EDR 헤드룸이 모두 있을 때 EDR을 활성화하는 것입니다.

00:32:58.000 --> 00:33:01.000
그렇지 않을 때는 EDR을 비활성화하세요.

00:33:01.000 --> 00:33:15.000
마찬가지로, EDR 잠재적 헤드룸 또는 현재 EDRmax 헤드룸이 1.0보다 크게 큰지에 따라 HDR 또는 SDR 버전의 콘텐츠를 선택하거나 스트리밍하십시오.

00:33:15.000 --> 00:33:20.000
또는, 더 간단하게, 사용자가 차이를 볼 때만 EDR을 활성화하세요.

00:33:20.000 --> 00:33:24.000
우리는 짧은 기간에 EDR에 대해 많은 것을 다루었다.

00:33:24.000 --> 00:33:31.000
나는 당신이 나만큼 EDR에 흥분하기를 바라며, 그것을 당신의 응용 프로그램에 통합하기를 열망합니다.

00:33:31.000 --> 00:33:38.000
요약하자면, EDR은 macOS, iOS, iPadOS 및 tvOS 장치에서 사용됩니다.

00:33:38.000 --> 00:33:44.000
EDR은 이미 사용하고 있는 색상 관리 및 SDR 표현의 확장입니다.

00:33:44.000 --> 00:33:47.000
EDR은 응용 프로그램이 옵트인하기 쉽다.

00:33:47.000 --> 00:33:56.000
EDR은 업계 HDR 표준과 호환되며, 장치와 환경 전반에 걸쳐 비모달 적응 경험을 제공합니다.

00:33:56.000 --> 00:34:06.000
HDR 비디오 재생, Apple Pro Display XDR 및 EDR의 금속 렌더링에 대한 자세한 내용은 다음 회담과 리소스를 확인하십시오.

00:34:06.000 --> 00:34:07.000
고마워!

00:34:07.000 --> 00:34:09.000
남은 WWDC를 즐기시기 바랍니다.

00:34:09.000 --> 23:59:59.000
[음악].

