WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
한밍옹: 안녕하세요, 제 이름은 한밍옹입니다.

00:00:12.000 --> 00:00:15.000
저는 Xcode 디버거 UI 팀의 엔지니어입니다.

00:00:15.000 --> 00:00:23.000
오늘, 저는 당신의 디버깅을 더 생산적으로 만들 브레이크포인트에 대한 팀의 개선에 대해 이야기하고 싶습니다.

00:00:23.000 --> 00:00:27.000
모든 사람이 같은 페이지에 있게 하기 위해 몇 가지 중단점 기본 사항부터 시작합시다.

00:00:27.000 --> 00:00:38.000
프로그램에서 버그가 발생하면, 그것은 당신의 기대에 부응하지 않는다는 것을 의미하며, 디버거로 왜 현실이 갈라졌는지 확인하고 싶습니다.

00:00:38.000 --> 00:00:42.000
이 시점에서, 당신이 하는 두 가지 일반적인 활동이 있습니다.

00:00:42.000 --> 00:00:47.000
하나, 당신은 상황을 더 이해하기 위해 프로세스 상태를 검사합니다.

00:00:47.000 --> 00:00:52.000
둘째, 당신은 프로세스 실행을 통해 당신의 논리를 확인한다.

00:00:52.000 --> 00:00:59.000
두 활동 모두 버그가 발생하기 직전에 이상적으로는 일시 중지해야 합니다.

00:00:59.000 --> 00:01:04.000
그리고 그 과정을 일시 중지하는 가장 좋은 방법은 중단점을 사용하는 것이다.

00:01:04.000 --> 00:01:08.000
우리는 당신이 Xcode에서 만들 수 있는 세 가지 일반적인 중단점에 대해 이야기할 것입니다.

00:01:08.000 --> 00:01:13.000
첫 번째는 소스 파일 중단점이다.

00:01:13.000 --> 00:01:16.000
이것들은 단일 파일에 설정된 중단점이다.

00:01:16.000 --> 00:01:19.000
가장 일반적인 유형은 선 중단점이다.

00:01:19.000 --> 00:01:26.000
그것은 중단점의 원동력이며 검사하고 싶은 코드 줄에서 일시 중지하는 데 탁월합니다.

00:01:26.000 --> 00:01:33.000
하나를 만드는 가장 빠른 방법은 일시 중지하고 싶은 줄 바로 옆에 있는 홈통을 클릭하는 것입니다.

00:01:33.000 --> 00:01:43.000
이 시점에서, 나는 그것에 들어가서 함수 convertedToVolume의 논리를 확인하고 싶다.

00:01:43.000 --> 00:01:48.000
하지만 내가 개입할 때, 나는 실제로 다른 표현으로 들어가고 있다.

00:01:48.000 --> 00:01:55.000
컴파일러는 조정된 Density가 먼저 실행되어야 한다고 올바르게 결정했다.

00:01:55.000 --> 00:02:07.000
물론, 나는 나가서 그 기능으로 돌아갈 수 있지만, 여러 번 반복해야 할 때 이것은 힘들 수 있다.

00:02:07.000 --> 00:02:14.000
우리가 여기서 보고 있는 것은 때때로 라인 중단점이 충분히 세분화되지 않는다는 것이다.

00:02:14.000 --> 00:02:21.000
그것은 컴파일러가 LLDB가 멈출 수 있는 하나 이상의 위치를 생성했기 때문이다.

00:02:21.000 --> 00:02:27.000
우리가 정말로 원하는 것은 convertedToVolume이 실행되기 직전에 일시 중지하는 것이다.

00:02:27.000 --> 00:02:32.000
Xcode 13에서 우리는 열 중단점을 도입하고 있습니다.

00:02:32.000 --> 00:02:40.000
이를 통해 선을 따라 특정 표현에서 일시 중지해야 할 때 줄 중단점의 단점을 피할 수 있습니다.

00:02:40.000 --> 00:02:50.000
convertedToVolume에서 열 중단점을 설정하려면, 표현식을 Command-클릭하여 Actions 팝오버를 불러온 다음 열 중단점 설정을 선택하십시오.

00:02:50.000 --> 00:02:57.000
라인 중단점과 마찬가지로, 아이콘을 클릭하여 비활성화하거나 활성화할 수 있습니다.

00:02:57.000 --> 00:03:04.000
중단점을 수정해야 하는 경우 두 번 클릭하여 중단점 편집기를 불러올 수 있습니다.

00:03:04.000 --> 00:03:10.000
더 이상 라인 중단점이 필요하지 않기 때문에, 홈통에서 드래그하여 삭제할 수 있습니다.

00:03:10.000 --> 00:03:16.000
넌 우리 칼럼 브레이크포인트에도 똑같이 할 수 있지만, 난 그냥 거기에 놔둘 거야.

00:03:16.000 --> 00:03:23.000
제어 또는 마우스 오른쪽 버튼을 클릭하면 이전 작업이 포함된 상황에 맞는 메뉴가 나타납니다.

00:03:23.000 --> 00:03:33.000
여기서 저는 브레이크포인트 네비게이터에서 공개를 선택할 것입니다. 브레이크포인트의 열을 보여주기 위해 자막이 수정되었습니다.

00:03:33.000 --> 00:03:42.000
우리가 계속할 때, 우리는 다음 NutritionFact를 반복하고 새로 설정된 열 중단점에 도달할 것이다.

00:03:42.000 --> 00:03:48.000
중단점이 도달하면, Xcode는 라인 PC를 사용하여 일시 중지된 라인을 알려줍니다.

00:03:48.000 --> 00:03:52.000
그것은 선 위에 밝은 초록색 하이라이트를 그린다.

00:03:52.000 --> 00:03:55.000
Xcode 11.4에서, 우리는 열 PC를 도입했다.

00:03:55.000 --> 00:04:01.000
열 PC는 표현식 아래에 녹색 밑줄을 그려 일시 중지된 열을 보여줍니다.

00:04:01.000 --> 00:04:07.000
따라서 디버거가 다음에 실행할 표현식을 알 수 있습니다.

00:04:07.000 --> 00:04:15.000
convertedToVolume에서 열 PC를 보고 있기 때문에, 나는 그 기능에 대한 한 단계를 자신 있게 할 수 있다.

00:04:15.000 --> 00:04:21.000
열 중단점은 Swift의 클로저 또는 Objective-C의 블록에 특히 유용합니다.

00:04:21.000 --> 00:04:28.000
때때로 단일 스위프트 라인은 이 단일 라인 269처럼 여러 개의 폐쇄를 가질 수 있다.

00:04:28.000 --> 00:04:39.000
컴파일러가 디버그 조건 하에서 파일을 컴파일할 때, 소스 선과 열을 컴파일된 주소로 매핑하는 선 테이블이라는 지도를 만듭니다.

00:04:39.000 --> 00:04:46.000
따라서 이 줄의 각 폐쇄에 대해 컴파일러는 디버거가 일시 중지하는 데 사용할 라인 테이블 항목을 생성합니다.

00:04:46.000 --> 00:05:05.000
마지막 폐쇄의 익명 매개 변수 $0을 검사하고 싶다고 가정하면, 라인 중단점을 269로 설정할 수 있지만 일시 중지한 후 마지막 폐쇄에 도달하려면 생성된 라인 테이블 항목으로 인해 수많은 스텝 인 및 스텝 아웃을 수행해야 합니다.

00:05:05.000 --> 00:05:18.000
우리는 Xcode 13을 사용하여 마지막 $0에서 열 중단점을 설정할 수 있으며 일시 중지될 때 정확히 우리가 원하는 곳에 있으며 $0을 마음껏 검사할 수 있습니다.

00:05:18.000 --> 00:05:25.000
흠, 아침 식사로 향기로운 두리안 스무디를 먹는 것은 하루를 시작하기에 좋은 방법인 것 같아.

00:05:25.000 --> 00:05:27.000
맛있어!

00:05:27.000 --> 00:05:30.000
상징적인 중단점으로 넘어갑시다.

00:05:30.000 --> 00:05:36.000
이것들은 그 함수가 실행될 때 프로세스를 일시 중지할 함수 이름의 중단점이다.

00:05:36.000 --> 00:05:43.000
그것들은 소스 파일 중단점을 사용할 수 없거나 불편한 상황에서 매우 유용하다.

00:05:43.000 --> 00:05:49.000
예를 들어, 소스 파일에 액세스할 수 없으므로 디버그 정보로 컴파일할 수 없습니다.

00:05:49.000 --> 00:05:57.000
또는 공통 기능을 구현하는 많은 하위 클래스가 있으며, 각각에 파일 중단점을 설정하는 것은 번거롭습니다.

00:05:57.000 --> 00:06:01.000
한 번 보자.

00:06:01.000 --> 00:06:06.000
우리는 중단점 네비게이터 하단에 있는 추가 버튼을 클릭할 것입니다.

00:06:06.000 --> 00:06:10.000
이것은 우리가 만들 수 있는 중단점 목록을 불러온다.

00:06:10.000 --> 00:06:19.000
기호 중단점을 선택하면 즉시 중단점 편집기가 나타나 기호 이름을 입력할 수 있습니다.

00:06:19.000 --> 00:06:25.000
우리가 몇 가지 클래스에서 구현된 토글 기능을 일시 중지하는 데 관심이 있다고 가정해 봅시다.

00:06:25.000 --> 00:06:29.000
그들 각각을 찾는 대신, 우리는 여기에 토글을 입력할 수 있습니다.

00:06:29.000 --> 00:06:40.000
하지만 당신은 일반적인 단어인 함수 이름에 대해 조심해야 합니다.

00:06:40.000 --> 00:06:49.000
이것은 LLDB가 시스템 라이브러리를 포함하여 프로세스에서 로드되는 모든 라이브러리의 이름과 일치하기 때문입니다.

00:06:49.000 --> 00:06:55.000
제한되지 않는다면, 많은 해결된 중단점 위치가 있을 수 있으며, 때로는 수천 개일 수도 있다.

00:06:55.000 --> 00:07:02.000
그들 중 많은 사람들이 실행 경로에 지속적으로 부딪히면 이것은 짜증날 수 있다.

00:07:02.000 --> 00:07:09.000
고맙게도, 우리는 검색을 특정 모듈로 제한할 수 있다.

00:07:09.000 --> 00:07:15.000
모듈은 메인 바이너리를 포함하여 실행 중에 로드할 수 있는 바이너리 또는 이미지입니다.

00:07:15.000 --> 00:07:22.000
여기서 우리는 우리 앱의 이진 이름인 "Fruta"를 입력합니다.

00:07:22.000 --> 00:07:28.000
그리고 우리는 훨씬 더 관리하기 쉬운 세 개의 해결된 위치를 얻는다.

00:07:28.000 --> 00:07:33.000
우리가 스무디를 선택했으니, 좋아하는 버튼을 전환합시다.

00:07:33.000 --> 00:07:37.000
우리는 방금 설정된 상징적인 중단점에 도달할 것이다.

00:07:37.000 --> 00:07:44.000
이제, 상징적인 중단점의 경우, 당신은 타이포그래피 오류를 만드는 것이 꽤 쉽다는 것을 알고 있습니다.

00:07:44.000 --> 00:07:51.000
그리고 프로그램을 실행하는 동안, 중단점이 부딪히지 않고 당신은 머리를 긁고 있습니다.

00:07:51.000 --> 00:07:59.000
convertToMass라고 불리는 것을 만들어 봅시다.

00:07:59.000 --> 00:08:11.000
Xcode 13의 새로운 기능, 중단점이 LLDB에 의해 어떤 위치로도 해결되지 않으면, Xcode는 당신에게 점선 아이콘을 보여줄 것입니다.

00:08:11.000 --> 00:08:17.000
중단점이 해결되지 않는 데는 무수한 이유가 있지만 몇 가지 일반적인 설명이 있다.

00:08:17.000 --> 00:08:23.000
해결되지 않은 중단점 아이콘 위에 마우스를 올려놓으면, 당신을 도울 수 있는 툴팁이 있습니다.

00:08:23.000 --> 00:08:26.000
처음 몇 가지 이유는 중단점의 종류와 관련이 있다.

00:08:26.000 --> 00:08:34.000
따라서 상징적인 중단점을 위해, 이름은 정확하게 철자되어야 하며 기호는 라이브러리에 존재해야 한다.

00:08:34.000 --> 00:08:40.000
다음 이유는 더 일반적이다: 중단점에 대한 라이브러리를 로드해야 한다.

00:08:40.000 --> 00:08:51.000
때때로, 라이브러리는 버튼을 클릭하는 것과 같은 사용자 작업을 수행한 후에만 로드되며, 그 시점에서 LLDB는 자동으로 중단점을 해결합니다.

00:08:51.000 --> 00:08:54.000
이 경우, 나는 철자가 좋지 않은 것 같아.

00:08:54.000 --> 00:08:56.000
알아내자.

00:08:56.000 --> 00:09:04.000
한 가지 방법은 찾기 네비게이터를 사용하고 "변환"을 검색하는 것입니다.

00:09:04.000 --> 00:09:10.000
보시다시피, 꽤 많은 결과가 있으며 시각적으로 분석하는 데 시간이 좀 걸릴 것입니다.

00:09:10.000 --> 00:09:15.000
대신, LLDB를 통해 다른 트릭을 사용합시다.

00:09:15.000 --> 00:09:37.000
Xcode 콘솔에서, 우리는 모듈을 의미하는 `image`를 입력합니다. 정규 표현식의 경우 `lookup -r`, 이름에 대한 `n`, `convert`를 입력하고 검색을 제한하기 위해 모듈 이름인 Fruta를 제공합니다.

00:09:37.000 --> 00:09:42.000
당신은 우리가 일치하는 것이 4개밖에 없고 확실히 기능 이름의 철자가 틀렸다는 것을 알 수 있습니다.

00:09:42.000 --> 00:09:46.000
그것은 "대량으로 전환"되어야 한다.

00:09:46.000 --> 00:09:57.000
그것을 복사해서 우리의 중단점 편집기에 붙여넣자.

00:09:57.000 --> 00:10:06.000
그리고 이번에, LLDB는 그것을 성공적으로 해결했고 우리에게 1번 위치를 주었다.

00:10:06.000 --> 00:10:14.000
다른 LLDB 팁과 요령에 관심이 있다면, 이전 프레젠테이션인 "LLDB: Beyond 'po'"를 시청하세요.

00:10:14.000 --> 00:10:22.000
다른 파일을 가져오자.

00:10:22.000 --> 00:10:27.000
해결되지 않은 중단점은 소스 파일 중단점에서도 볼 수 있다.

00:10:27.000 --> 00:10:30.000
그들과 관련된 두 가지 이유가 있다.

00:10:30.000 --> 00:10:34.000
먼저, 중단점의 줄을 컴파일해야 한다.

00:10:34.000 --> 00:10:41.000
이 경우, 23번 줄은 컴파일러 조건의 다른 부분에 있기 때문에 컴파일되지 않았다.

00:10:41.000 --> 00:10:45.000
또한, 컴파일러는 모듈에 대한 디버그 정보를 생성했어야 한다.

00:10:45.000 --> 00:10:49.000
그렇지 않다면, 빌드 설정을 확인해야 합니다.

00:10:49.000 --> 00:10:52.000
다음은 런타임 문제 중단점입니다.

00:10:52.000 --> 00:10:59.000
런타임 문제는 런타임에서 발생하는 문제입니다. 예를 들어, 백그라운드 스레드에서 UI 상태를 변경합니다.

00:10:59.000 --> 00:11:11.000
충돌만큼 심각하지 않으며, 기본적으로 Xcode는 다른 버그에 집중할 때 너무 파괴적일 수 있기 때문에 프로세스를 일시 중지하지 않습니다.

00:11:11.000 --> 00:11:19.000
대신, 런타임 문제가 발생하면, Xcode는 백트레이스를 기록하고 이슈 네비게이터에 표시합니다.

00:11:19.000 --> 00:11:27.000
하지만 그 문제는 과거에 발생했기 때문에, 현재 프로세스 상태를 조사하는 것은 의미가 없다.

00:11:27.000 --> 00:11:34.000
그래서 가끔, 당신은 그것이 일어날 때 그것을 잡고 싶어합니다.

00:11:34.000 --> 00:11:41.000
런타임 문제 중단점이 있으면 디버거에서 일시 중지하고 프로세스를 찌를 수 있습니다.

00:11:41.000 --> 00:11:44.000
런타임 이슈 브레이크포인트에는 다양한 유형이 있다.

00:11:44.000 --> 00:11:51.000
유형 팝업을 사용하여 특정 유형을 쉽게 선택할 수 있습니다.

00:11:51.000 --> 00:11:58.000
그들 중 일부는 계획 편집기의 진단 탭에서 해당 기능을 활성화해야 한다는 것을 명심하세요.

00:11:58.000 --> 00:12:05.000
이동 버튼을 클릭하기만 하면 거기에 갈 수 있습니다.

00:12:05.000 --> 00:12:12.000
메인 스레드 검사기 런타임 문제 중단점을 사용하고 싶기 때문에, 메인 스레드 검사기를 활성화하고 싶습니다.

00:12:12.000 --> 00:12:17.000
제 세션이 Xcode 13의 중단점에 대한 개선 사항을 보여줬으면 좋겠습니다.

00:12:17.000 --> 00:12:24.000
중단점은 디버깅 능력을 크게 향상시킬 수 있으며 확실히 레퍼토리의 일부가 되어야 합니다.

00:12:24.000 --> 00:12:27.000
감사합니다 그리고 나머지 WWDC를 즐기세요.

00:12:27.000 --> 23:59:59.000
♪

