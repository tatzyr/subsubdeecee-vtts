WEBVTT

00:00:02.000 --> 00:00:17.000
안녕하세요, "watchOS 8의 새로운 기능"에 오신 것을 환영합니다. 제 이름은 제이크 베렌스이고, 저는 애플의 시계 전도사입니다.

00:00:17.000 --> 00:00:45.000
watchOS 7은 가족 설정과 같은 기능을 통해 가족 구성원이 iPhone 없이도 연결 상태를 유지할 수 있는 많은 새로운 기회를 열었습니다. 여러 합병증을 통해 시계 페이스에 대한 더 풍부한 경험을 만들 수 있습니다. 그리고 시계 페이스 공유를 통해 좋아하는 합병증으로 자신만의 시계 페이스를 만들 수 있습니다. 누군가와 공유하거나 온라인으로 게시할 수 있습니다.

00:00:45.000 --> 00:00:53.000
watchOS 8에서, 우리는 당신이 훨씬 더 놀라운 Watch 앱 경험을 만들 수 있도록 당신의 주요 요청에 초점을 맞췄습니다.

00:00:53.000 --> 00:00:57.000
할 얘기가 많으니까, 뛰어들자.

00:00:57.000 --> 00:01:00.000
첫 번째는 상시표시형 디스플레이입니다.

00:01:00.000 --> 00:01:12.000
Apple Watch Series 5와 watchOS 6는 시계 페이스에 상시표시형 디스플레이를 가져왔고, 이제 watchOS 8에서 우리는 당신의 앱에 상시표시 디스플레이를 가져오고 있습니다.

00:01:12.000 --> 00:01:24.000
나는 또한 건강 관련 합병증을 최신 상태로 유지하기 위해 HealthKit 데이터와 블루투스 스캔의 배경 전달을 활용하는 방법에 대해 이야기할 것입니다.

00:01:24.000 --> 00:01:28.000
Apple Watch는 시간이 지남에 따라 더 독립적이 되었다.

00:01:28.000 --> 00:01:33.000
watchOS 8을 통해, 우리는 지역 기반 사용자 알림을 손목에 가져오고 있습니다.

00:01:33.000 --> 00:01:41.000
나는 이것들이 어떻게 적절한 시간에 적절한 장소에서 누군가에게 관련 정보를 제공할 수 있는지에 대해 이야기할 것이다.

00:01:41.000 --> 00:01:52.000
마지막으로, Watch 앱을 더 잘 개발하고 사용할 수 있도록 watchOS 8에 제공되는 몇 가지 새로운 시스템 및 API 개선 사항에 대해 이야기하겠습니다.

00:01:52.000 --> 00:01:55.000
상시표시형 디스플레이부터 시작합시다.

00:01:55.000 --> 00:02:02.000
상시표시형 디스플레이를 사용하면 손목을 들지 않고도 시계의 콘텐츠를 볼 수 있습니다.

00:02:02.000 --> 00:02:06.000
손목을 들어 올리면, 디스플레이가 다시 활성화됩니다.

00:02:06.000 --> 00:02:12.000
Always-On 디스플레이는 Apple Watch Series 5와 6에서 지원됩니다.

00:02:12.000 --> 00:02:19.000
watchOS 7에서 상시표시 상태는 앱의 UI가 시간이 겹쳐서 흐려지는 것을 보여주었다.

00:02:19.000 --> 00:02:31.000
watchOS 8 SDK로 앱을 재구축할 때, 앱의 UI는 이제 흐리게 표시된 상태로 표시되며 누군가가 UI를 탭하면 즉시 상호 작용합니다.

00:02:31.000 --> 00:02:40.000
항상 켜져 있는 상태에서, 시스템은 누군가가 볼 수 있을 만큼 충분히 밝게 유지하면서 디스플레이의 전반적인 밝기를 자동으로 줄인다.

00:02:40.000 --> 00:02:51.000
앱의 UI를 감소된 밝기에 맞게 조정할 수 있도록, 우리는 isLuminanceReduced라는 SwiftUI 환경 속성을 도입하고 있습니다.

00:02:51.000 --> 00:03:00.000
특히 중요한 정보를 강조하고 비공개로 유지해야 하는 정보를 숨겨서 이 상태에 대응할 수 있습니다.

00:03:00.000 --> 00:03:09.000
빠르게 반복할 수 있도록, 우리는 Xcode 미리보기와 시뮬레이터에 이 환경 속성에 대한 지원을 포함시켰습니다.

00:03:09.000 --> 00:03:15.000
시뮬레이터에서 창의 버튼을 클릭하여 손목 다운 이벤트를 시뮬레이션합니다.

00:03:15.000 --> 00:03:22.000
이것은 앱의 UI가 항상 켜져 있는 상태에 어떻게 반응하는지 보고 싶을 때 정말 도움이 될 것입니다.

00:03:22.000 --> 00:03:28.000
이제 상시 상태의 앱 UI에 대한 몇 가지 지침 원칙에 대해 이야기해 봅시다.

00:03:28.000 --> 00:03:34.000
활성 상태에서 상시 상태로의 전환은 매끄럽게 느껴져야 한다.

00:03:34.000 --> 00:03:39.000
UI를 크게 바꾸거나 정보를 재구성하지 마세요.

00:03:39.000 --> 00:03:45.000
그렇지 않으면 항상 켜져 있는 상태에서 활동적인 상태로의 전환은 충격적일 것이다.

00:03:45.000 --> 00:03:50.000
활성 UI의 컨텍스트를 유지하는 것이 중요하다.

00:03:50.000 --> 00:04:00.000
이 예에서, Fitbod는 더 밝은 요소와 보조 텍스트를 더 어둡게 하면서 UI를 주 간에 접지되고 일관성 있게 유지합니다.

00:04:00.000 --> 00:04:05.000
다음으로, 필수적이지 않은 정보와 요소를 어둡게 해야 합니다.

00:04:05.000 --> 00:04:17.000
보조 텍스트, 이미지 또는 채우기가 있는 경우, 강조 표시하고 표시하고 싶은 정보를 더 강조하기 위해 직접 더 어둡게 할 수 있습니다.

00:04:17.000 --> 00:04:32.000
식료품 쇼핑 목록을 만들고 공유하고 레시피를 구성하는 데 도움이 되는 AnyList는 목록 항목의 배경을 제거하고 그릭 요거트의 맛이나 우유의 양과 같은 2차 정보를 더욱 흐리게 합니다.

00:04:32.000 --> 00:04:42.000
이것은 당신이 쇼핑 카트를 밀거나 쇼핑 바구니를 들고 있을 수 있기 때문에 주요 목록 항목 제목을 훨씬 더 한눈에 볼 수 있게 해준다.

00:04:42.000 --> 00:05:00.000
UI에 색상이나 이미지로 채워진 큰 요소가 있는 경우, 해당 요소를 획이나 흐린 색상으로 표현하도록 줄이고 UI의 접지를 다시 유지하지만 강조 표시된 정보를 여전히 볼 수 있도록 할 수 있습니다.

00:05:00.000 --> 00:05:10.000
이 예에서, 판도라는 하단을 따라 보조 컨트롤을 어둡게 하고 앨범 아트워크를 제거하고 비슷하지만 흐리게 된 색상을 사용합니다.

00:05:10.000 --> 00:05:17.000
이것은 노래 이름과 아티스트 이름을 한 눈에 강조하는 데 정말 잘 작동한다.

00:05:17.000 --> 00:05:24.000
휘도가 감소하면, 민감한 정보를 편집하거나 제거할 수도 있습니다.

00:05:24.000 --> 00:05:36.000
이 예에 표시된 계좌 번호, 잔액 및 일부 개인 건강 데이터와 같은 정보는 누군가의 손목이 내려 있는 동안 엿보는 눈에서 모호하게 할 수 있는 좋은 후보자일 수 있다.

00:05:36.000 --> 00:05:48.000
SwiftUI를 사용하는 편집에 대해 자세히 알아보려면, 위젯이 유사한 편집 모델을 공유하기 때문에 개발자 앱의 "훌륭한 위젯의 원리" 비디오를 참조하십시오.

00:05:48.000 --> 00:05:57.000
마지막으로, 애니메이션이 발생하는 경우, 루프의 첫 번째 프레임으로 재설정하거나 휴식 상태로 해결해야 합니다.

00:05:57.000 --> 00:06:00.000
그들을 중간에 애니메이션으로 남겨두지 않는 것이 가장 좋다.

00:06:00.000 --> 00:06:12.000
이제 항상 켜져 있는 상태에서 UI를 최고로 보이게 하는 방법을 알았으니, 손목이 내려 있는 동안 앱의 UI를 업데이트하는 방법의 기술적 측면에 대해 이야기해 봅시다.

00:06:12.000 --> 00:06:23.000
지속적인 런타임을 제공하는 운동 세션이나 오디오 세션과 같은 진행 중인 활성 세션이 있는 앱의 경우, UI를 초당 한 번까지 업데이트할 수 있습니다.

00:06:23.000 --> 00:06:35.000
이를 통해 카운터, 메트릭 및 기타 데이터를 최신 상태로 유지할 수 있지만, 10분의 1초와 같은 하위 증가를 제거해야 합니다.

00:06:35.000 --> 00:06:41.000
활성 세션이 없는 앱의 경우, 분당 최대 한 번까지 업데이트할 수 있습니다.

00:06:41.000 --> 00:06:54.000
시스템이 시계 페이스로 돌아가기 전의 기본 시간 초과는 2분이지만, 고객이 이 설정을 변경할 수 있으므로 앱이 이보다 더 오래 표시될 수 있도록 계획해야 합니다.

00:06:54.000 --> 00:06:59.000
그렇다면 비활성 앱이 UI를 업데이트해야 한다고 어떻게 말하나요?

00:06:59.000 --> 00:07:03.000
그것을 위해, 우리는 SwiftUI에서 TimelineView를 만들었습니다.

00:07:03.000 --> 00:07:09.000
TimelineView는 일정을 잡고 날짜에 따라 뷰를 구성합니다.

00:07:09.000 --> 00:07:18.000
업데이트 일정과 관련하여, 우리는 당신이 당신의 앱에 맞는 모든 것을 할 수 있도록 몇 가지 타임라인 일정을 제공했습니다.

00:07:18.000 --> 00:07:22.000
매 분마다 업데이트되는 매 순간이 있다.

00:07:22.000 --> 00:07:31.000
이것은 또한 시스템 시계와 정렬되며, 이는 각 업데이트가 장치의 분 상단에서 발생한다는 것을 의미합니다.

00:07:31.000 --> 00:07:39.000
2분마다 또는 앱에 적합한 것과 같은 간격을 설정할 수 있는 주기가 있습니다.

00:07:39.000 --> 00:07:46.000
만약 당신이 1분 간격으로 주기적인 일정을 사용한다면, 그것들은 시스템 시계에 맞춰지지 않습니다.

00:07:46.000 --> 00:07:54.000
운동이 시작되었을 때와 같이 특정 이벤트와 관련하여 업데이트 시간을 정해야 하는 경우 이것은 정말 유용할 수 있습니다.

00:07:54.000 --> 00:08:07.000
1.5분에 업데이트가 필요하고 2.5분 후에 업데이트가 필요한 경우와 같이 특정 시간에 발생하는 변경 사항이 있습니다.

00:08:07.000 --> 00:08:09.000
관습도 있어.

00:08:09.000 --> 00:08:20.000
매 분마다 업데이트되는 타이머와 같은 것이 있지만 지난 60초 동안 초당 한 번 업데이트하고 싶다면 이것은 정말 잘 작동할 수 있습니다.

00:08:20.000 --> 00:08:35.000
앱이 활성 세션에 있지 않고 이 타이머의 마지막 60초와 같이 짧은 기간 동안 더 빠른 업데이트가 필요하다고 말하는 경우, 시스템은 그렇게 하려고 시도할 것이지만, 이러한 업데이트는 보장되지 않습니다.

00:08:35.000 --> 00:08:39.000
마지막으로, 애니메이션 일정이 있습니다.

00:08:39.000 --> 00:08:53.000
TimelineView, 일정, 애니메이션 등에 대해 자세히 알아보려면, 개발자 앱에서 "SwiftUI의 새로운 기능"과 "SwiftUI 앱에 풍부한 그래픽 추가" 비디오를 시청하세요.

00:08:53.000 --> 00:08:58.000
우리는 건강 및 피트니스 앱이 Apple Watch에 미친 영향을 좋아합니다.

00:08:58.000 --> 00:09:03.000
watchOS 8에서, 우리는 Watch 앱에 HealthKit 데이터의 백그라운드 전송을 가져왔습니다.

00:09:03.000 --> 00:09:13.000
이것은 앱에 대한 수동 건강 모니터링을 열고 가족 설정 구성에 사용되는 독립형 Watch 앱에 큰 영향을 미칠 수 있습니다.

00:09:13.000 --> 00:09:19.000
HealthKit 데이터의 백그라운드 전송 설정은 iOS와 유사하게 작동합니다.

00:09:19.000 --> 00:09:31.000
watchOS에서, 새로운 건강 데이터가 수집되어 술어가 일치하고 백그라운드 관찰자 쿼리가 처리되면, 앱은 결과를 받기 위해 깨어남에 있습니다.

00:09:31.000 --> 00:09:35.000
이것은 Watch 앱의 경우 시간당 최대 한 번이 될 수 있습니다.

00:09:35.000 --> 00:09:44.000
누군가가 당신의 앱의 합병증을 활성 시계 페이스에 추가했다면, 시간당 최대 네 번 결과를 받을 수 있습니다.

00:09:44.000 --> 00:10:00.000
이러한 모든 기회는 앱의 백그라운드 앱 새로 고침 예산에 포함되므로, 시간당 최대 4개의 결과만 추가되며 다른 이유로 백그라운드 앱 새로 고침에 영향을 미칠 수 있습니다.

00:10:00.000 --> 00:10:02.000
업데이트 주파수에 대해 이야기해 봅시다.

00:10:02.000 --> 00:10:16.000
우리가 당신의 앱에 결과를 제공할 때, 우리는 가을 사건, 낮은 혈중 산소 포화도, 심박수 사건 등을 포함한 다양한 중요한 데이터 유형에 대해 즉시 할 것입니다.

00:10:16.000 --> 00:10:24.000
영향을 받는 데이터 유형의 전체 목록은 Apple Developer 웹사이트의 개발자 문서를 보세요.

00:10:24.000 --> 00:10:29.000
다른 모든 데이터 유형은 매시간 또는 더 긴 간격으로 전달될 것이다.

00:10:29.000 --> 00:10:40.000
우리는 또한 앱이 Apple Watch의 건강 데이터에 대한 인식이 높아졌다는 것을 고객에게 알리기 위해 HealthKit 인증 시트에 새로운 정보를 추가했습니다.

00:10:40.000 --> 00:10:49.000
우리는 HealthKit 데이터의 배경 전달이 시계 화면의 건강 및 피트니스 관련 합병증에 새로운 가능성을 가져올 것이라고 생각합니다.

00:10:49.000 --> 00:10:57.000
watchOS 4에서, 우리는 블루투스 장치가 Apple Watch에 직접 연결하고 코어 블루투스를 사용할 수 있도록 했습니다.

00:10:57.000 --> 00:11:02.000
우리는 이것의 정말 놀라운 용도를 보았다.

00:11:02.000 --> 00:11:16.000
watchOS 8에서, 우리는 한 걸음 더 나아가고 있으며, 앱이 활성 시계 페이스에 있을 때 앱의 합병증이 얻을 수 있는 백그라운드 앱 새로 고침 기회 동안 장치를 연결할 수 있도록 하고 있습니다.

00:11:16.000 --> 00:11:25.000
예를 들어, 이것은 사람들이 Qardio의 의료 등급 ECG로 심장 상태를 모니터링할 수 있는 Qardio입니다.

00:11:25.000 --> 00:11:40.000
그리고 이것은 미국 이외의 사람들을 위해 축구 코치 또는 축구가 GPS 추적기를 사용하여 훈련 중 선수의 성과에 대한 최대 28개의 실시간 지표를 모니터링할 수 있는 Sonra Watch입니다.

00:11:40.000 --> 00:11:54.000
백그라운드 앱 새로 고침 중에 블루투스 연결을 사용하면 앱의 합병증이 블루투스 장치를 최신 상태로 유지하고 하루 종일 업데이트된 정보를 표시할 수 있다는 것을 의미합니다.

00:11:54.000 --> 00:12:04.000
백그라운드 앱 새로 고침은 활성 워치 페이스에 있는 앱의 합병증을 시간당 최대 4회까지 연결하고 업데이트할 수 있는 기회를 제공합니다.

00:12:04.000 --> 00:12:11.000
이러한 기회는 앱의 전체 백그라운드 앱 새로 고침 예산에 반영된다는 것을 기억하십시오.

00:12:11.000 --> 00:12:17.000
앱이 포그라운드에 있을 때 초기 장치 연결을 설정해야 합니다.

00:12:17.000 --> 00:12:20.000
이것은 백그라운드에서 할 수 없다.

00:12:20.000 --> 00:12:29.000
장치에 대한 연결이 설정되면, 백그라운드 앱 새로 고침은 앱에 연결하고 새로운 데이터를 얻을 수 있는 기회를 제공합니다.

00:12:29.000 --> 00:12:35.000
매우 짧은 시간 내에 데이터를 연결하고 처리하는 것도 중요합니다.

00:12:35.000 --> 00:12:47.000
이를 돕기 위해, 우리는 WKRefreshBackgroundTask에 새로운 만료 핸들러를 추가하여 시간이 부족하고 하고 있는 일을 끝내야 할 때 알 수 있습니다.

00:12:47.000 --> 00:12:51.000
이를 통해 필요한 경우 앱을 정리하고 우아하게 저하시킬 수 있습니다.

00:12:51.000 --> 00:12:59.000
자세한 내용은 개발자 앱에서 "블루투스 장치를 Apple Watch에 연결"을 시청하세요.

00:12:59.000 --> 00:13:02.000
Apple Watch는 항상 당신에게 있는 장치입니다.

00:13:02.000 --> 00:13:15.000
독립적인 시계 앱이 점점 더 널리 퍼지고 고객들이 점점 더 커피를 마시거나 시계만 가지고 가게에 다 떨어지면서, 위치는 중요한 것을 파악하는 데 중요한 부분이다.

00:13:15.000 --> 00:13:20.000
watchOS 8에서는 지역 기반 사용자 알림을 Apple Watch로 가져오고 있습니다.

00:13:20.000 --> 00:13:27.000
이것은 당신이 지오펜스를 기반으로 중요한 것들에 대한 알림을 받을 수 있다는 것을 의미합니다.

00:13:27.000 --> 00:13:33.000
예를 들어, 슬로프를 사용하여 리프트에 있을 때 스키 운동을 시작하도록 상기시킬 수 있습니다.

00:13:33.000 --> 00:13:40.000
또는 App in the Air를 사용하여 공항에 도착하면 항공편 정보를 받을 수 있습니다.

00:13:40.000 --> 00:13:46.000
watchOS의 지역 기반 사용자 알림은 iOS와 비슷하게 작동합니다.

00:13:46.000 --> 00:13:56.000
고객의 개인 정보를 보호하기 위해, 그들은 먼저 버튼을 탭하여 전체 동적 알림을 볼 수 있는 정적 알림을 받게 됩니다.

00:13:56.000 --> 00:14:08.000
이를 통해 위치에 따라 알림 트리거로 설정한 지역에 들어가거나 나가는 사람을 기반으로 미리 생성된 로컬 알림을 전달할 수 있습니다.

00:14:08.000 --> 00:14:15.000
이것을 이용하려면 "사용 중" 허가가 필요하다는 것을 명심하세요.

00:14:15.000 --> 00:14:28.000
또한 좋아하는 상점 위치를 설정하는 것과 같이 누군가 또는 그들이 명시적인 의도를 보여준 장소 근처의 중요한 관심 지점만 포함하도록 지역 수를 제한해야 합니다.

00:14:28.000 --> 00:14:35.000
지역은 반경에서 약 몇 백 미터 정도일 때 가장 전력 효율적이다.

00:14:35.000 --> 00:14:43.000
지역 기반 사용자 알림과 함께, watchOS 8은 Core Location의 새로운 위치 버튼을 지원합니다.

00:14:43.000 --> 00:14:52.000
이 버튼은 탭할 때마다 인증 프롬프트를 거치지 않고 일회성 위치 인증을 제공합니다.

00:14:52.000 --> 00:14:58.000
무대 뒤에서, 그것은 "한 번 허용" 전통적인 허가처럼 행동한다.

00:14:58.000 --> 00:15:07.000
위치 버튼은 사람들이 언제 위치를 공유하고 싶은지 더 잘 제어할 수 있도록 함으로써 사람들의 신뢰를 얻을 수 있는 쉬운 방법입니다.

00:15:07.000 --> 00:15:18.000
watchOS 8 및 iOS 15의 핵심 위치 업데이트에 대한 자세한 내용은 개발자 앱에서 사용할 수 있는 "위치 버튼 만나기"를 참조하십시오.

00:15:18.000 --> 00:15:24.000
우리는 또한 코어 모션에 새로운 상시표시형 고도계 API를 도입하고 있습니다.

00:15:24.000 --> 00:15:35.000
이를 통해 하루 종일 배터리 수명에 미치는 영향을 최소화하고 누군가가 앱과 위치를 공유하지 않고도 실시간 고도 업데이트에 액세스할 수 있습니다.

00:15:35.000 --> 00:15:44.000
watchOS 8에 제공되는 새로운 기능과 API 외에도, 우리는 Watch 앱을 그 어느 때보다 쉽게 개발하고 사용할 수 있도록 많은 개선을 했습니다.

00:15:44.000 --> 00:15:50.000
watchOS 8을 통해 Apple Watch는 이제 잠자는 동안 호흡수를 측정할 수 있습니다.

00:15:50.000 --> 00:16:00.000
이를 통해 Sleep Details와 같은 앱은 호흡수 데이터를 표시하고 아침에 일어날 때 변화를 시각화할 수 있습니다.

00:16:00.000 --> 00:16:05.000
우리는 사지 차이가 있는 사람들을 위해 Apple Watch에 AssistiveTouch를 제공하게 되어 기쁩니다.

00:16:05.000 --> 00:16:14.000
우리가 행동을 수행하고 UI를 탐색하는 데 도움이 되는 사람의 손 제스처를 인식할 수 있기 때문에 이것은 정말 흥미롭다.

00:16:14.000 --> 00:16:20.000
우리는 또한 watchOS 8에 큰 접근성 텍스트 크기를 가져오고 있습니다.

00:16:20.000 --> 00:16:30.000
Watch 앱을 더 쉽게 접근할 수 있도록 하는 방법에 대해 자세히 알아보려면, 개발자 앱에서 "WatchOS를 위한 접근 가능한 경험 만들기"를 시청하세요.

00:16:30.000 --> 00:16:37.000
Watch 앱에 대한 단위 테스트 및 UI 테스트는 Xcode 12.5에 도입되었다.

00:16:37.000 --> 00:16:49.000
하지만 앱에 액세스할 수 있도록 하는 것은 테스트할 수 있는 것이므로, watchOS의 새로운 접근성 기능을 통해 앱에 더 쉽게 접근할 수 있도록 하는 것이 그 어느 때보다 좋습니다.

00:16:49.000 --> 00:17:01.000
watchOS 8은 또한 iOS에서 볼 수 있는 것처럼 스크롤 보기 상단에 큰 타이틀을 추가하여 장치 간에 더 일관된 느낌을 제공합니다.

00:17:01.000 --> 00:17:13.000
텍스트 입력은 watchOS 8에서 개선되었으며, 누군가가 앱당 스크리블 또는 받아쓰기를 선호하는지 기억하고, 텍스트를 입력하는 동안 입력 유형 간에 빠르게 액세스할 수 있습니다.

00:17:13.000 --> 00:17:23.000
이를 통해 훨씬 더 많은 텍스트를 쉽게 입력할 수 있으며, SwiftUI 텍스트 필드로 이 기능을 무료로 사용할 수 있습니다.

00:17:23.000 --> 00:17:30.000
새로운 검색 가능한 API를 사용하면 사용자 지정 제안으로 앱에 검색 필드를 쉽게 추가할 수 있습니다.

00:17:30.000 --> 00:17:36.000
고객은 검색 필드에서 제안을 사용할 수 있음을 나타내는 버튼을 보게 될 것이다.

00:17:36.000 --> 00:17:40.000
그들이 그것을 탭하면, 그들은 당신의 맞춤형 제안을 보게 될 것입니다.

00:17:40.000 --> 00:17:44.000
결과를 위해 맞춤형 UI를 제공할 수도 있습니다.

00:17:44.000 --> 00:17:53.000
개발자 앱에서 "SwiftUI의 공예 검색 경험" 비디오를 보고 더 많은 것을 배울 수 있습니다.

00:17:53.000 --> 00:18:03.000
목록은 이제 스와이프 작업을 지원하므로, 항목을 제거하는 것 외에도, 이제 즐겨찾기와 같은 사용자 지정 작업을 수행할 수 있습니다.

00:18:03.000 --> 00:18:18.000
버튼 역할은 시스템이 파괴적인 버튼과 같은 특정 버튼 유형을 제시하고 처리하는 방법을 알려주지만, 탭할 때 해당 버튼에 추가 햅틱을 제공하는 controlProminence 수정자도 포함합니다.

00:18:18.000 --> 00:18:30.000
그리고 SwiftUI Canvas API는 watchOS 8에서도 사용할 수 있습니다. 즉, Apple Watch에서 찾을 수 있는 놀라운 GPU를 사용하는 풍부한 프로그래밍 방식으로 그림을 그릴 수 있습니다.

00:18:30.000 --> 00:18:36.000
watchOS 8이 설치된 Apple Watch의 새로운 가능성에 대해 흥분해야 할 많은 이유가 있습니다.

00:18:36.000 --> 00:18:43.000
TimelineView는 사람의 손목이 내려가서 정보를 한 눈에 얻어야 할 때 UI를 업데이트하는 데 도움을 줄 수 있습니다.

00:18:43.000 --> 00:18:48.000
이것은 모든 앱이 채택해야 하는 것이므로, 먼저 확인하세요.

00:18:48.000 --> 00:18:58.000
앱의 합병증은 HealthKit 데이터와 블루투스 연결의 백그라운드 전송을 통해 업데이트된 정보를 얻을 수 있는 새로운 방법을 얻었습니다.

00:18:58.000 --> 00:19:04.000
이것은 합병증이 일부 사람들이 Watch 앱을 사용하는 주요 방법이라는 것을 더욱 뒷받침한다.

00:19:04.000 --> 00:19:09.000
한 눈에 더 많은 것을 제공할 수 있다면, 반드시 해야 합니다.

00:19:09.000 --> 00:19:15.000
지역 기반 사용자 알림은 Watch 앱에 대한 위치의 의미를 향상시켰다.

00:19:15.000 --> 00:19:23.000
이것들을 채택하면 고객이 앱에 계속 참여하도록 하는 놀라움과 기쁨의 순간을 추가할 수 있습니다.

00:19:23.000 --> 00:19:35.000
그리고 마지막으로, AssistiveTouch와 SwiftUI Canvas API와 같은 차세대 기능을 사용하면 Watch 앱을 그 어느 때보다 더 유용하고 몰입감 있게 만들 수 있습니다.

00:19:35.000 --> 00:19:38.000
네가 뭘 만드는지 보고 있을게.

00:19:38.000 --> 00:19:40.000
고마워.

00:19:40.000 --> 23:59:59.000
[음악].

