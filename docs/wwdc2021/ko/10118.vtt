WEBVTT

00:00:02.000 --> 00:00:11.000
안녕, 난 러스티야.

00:00:11.000 --> 00:00:19.000
저는 CloudKit 팀의 엔지니어이며, 새로운 CloudKit 개발자 도구와 새로운 CloudKit 스키마 언어를 소개하게 되어 기쁩니다.

00:00:19.000 --> 00:00:26.000
이 세션에서는 클라우드와 통합되는 애플리케이션에 통합 테스트가 어려울 수 있는 이유에 대해 이야기하겠습니다.

00:00:26.000 --> 00:00:30.000
그런 다음, CloudKit을 위한 새로운 명령줄 개발자 도구인 cktool을 시연하겠습니다.

00:00:30.000 --> 00:00:35.000
Xcode 내부에서 cktool을 사용하여 테스트 설정을 자동화하는 방법을 알게 될 것입니다.

00:00:35.000 --> 00:00:38.000
CloudKit의 새로운 선언적 스키마 언어에 대해 배우게 될 것입니다.

00:00:38.000 --> 00:00:40.000
그리고 나서, 나는 다음 단계로 마무리할 것이다.

00:00:40.000 --> 00:00:43.000
시작하자.

00:00:43.000 --> 00:00:50.000
클라우드 서비스에 의존하는 애플리케이션을 작성할 때, 애플리케이션과 의존하는 서비스 사이에 명시적인 계약이 있습니다.

00:00:50.000 --> 00:00:58.000
통합 테스트는 이러한 서비스와 상호 작용하는 방식을 검증하는 데 도움이 될 수 있지만, 이러한 통합 테스트의 설정을 올바르게 자동화하는 것은 몇 가지 이유로 어려울 수 있습니다.

00:00:58.000 --> 00:01:03.000
첫째, 앱이 사용하는 데이터 모델로 서버를 최신 상태로 유지하는 것이 항상 쉬운 것은 아닙니다.

00:01:03.000 --> 00:01:11.000
앱을 개발하는 동안 스키마를 반복할 때, 서버의 스키마가 테스트를 실행할 때 앱이 사용하는 스키마와 정확히 일치하는 것이 중요합니다.

00:01:11.000 --> 00:01:21.000
또한, 특히 테스트가 테스트의 일부로 해당 데이터를 수정하는 경우, 테스트가 실행될 때마다 클라우드에서 일관된 샘플 데이터 세트에 대해 테스트가 실행되고 있는지 확인하는 것은 어려울 수 있습니다.

00:01:21.000 --> 00:01:24.000
CloudKit 팀은 당신을 위해 이 모든 것을 더 쉽게 만들었습니다.

00:01:24.000 --> 00:01:41.000
방금 도입한 새로운 CloudKit 스키마 언어를 사용하면 애플리케이션 코드와 함께 파일에 CloudKit 스키마를 선언한 다음 버전 제어에서 확인하여 프로젝트의 다른 모든 변경 사항과 함께 변경 사항을 추적하고 항상 앱의 데이터 모델이 CloudKit 스키마와 일치하는지 확인할 수 있습니다.

00:01:41.000 --> 00:01:53.000
그리고 새로운 cktool 명령줄 개발자 도구를 사용하면 이 스키마 선언을 CloudKit 서버로 보내는 프로세스를 쉽게 자동화할 수 있으며, 테스트를 실행하기 직전에 서버에 일관된 샘플 데이터 세트를 만들 수 있습니다.

00:01:53.000 --> 00:01:56.000
내가 바로 들어가서 cktool을 사용할게.

00:01:56.000 --> 00:01:59.000
먼저, cktool은 Xcode 13과 함께 설치됩니다.

00:01:59.000 --> 00:02:04.000
Xcode 13을 설치하면 터미널에서 바로 cktool을 사용할 수 있습니다.

00:02:04.000 --> 00:02:07.000
Cktool은 xcrun으로 호출됩니다.

00:02:07.000 --> 00:02:08.000
그것은 몇 가지 명령을 제공한다.

00:02:08.000 --> 00:02:21.000
예를 들어, CloudKit 서버에 레코드를 만들고, 서버에 이미 존재하는 레코드를 쿼리하고, 새로운 스키마 언어 파일을 가져오고 내보내고, 도구 자체에 대한 권한을 관리할 수 있습니다.

00:02:21.000 --> 00:02:26.000
Cktool을 사용하기 전에, CloudKit의 인증에 대해 이해해야 할 몇 가지 사항이 있습니다.

00:02:26.000 --> 00:02:32.000
Cktool은 CloudKit 서버와 직접 통신하기 때문에, 먼저 도구의 승인을 받아야 합니다.

00:02:32.000 --> 00:02:41.000
스키마 가져오기와 같은 컨테이너 관리 기능을 수행하기 위해 cktool만 승인하도록 선택하거나, 컨테이너의 데이터에 액세스할 수 있도록 도구를 추가로 승인할 수 있습니다.

00:02:41.000 --> 00:02:44.000
CloudKit은 이 목적을 위해 두 가지 새로운 개념을 도입했다.

00:02:44.000 --> 00:02:49.000
첫 번째는 cktool이 CloudKit 컨테이너를 관리하는 데 사용하는 "관리 토큰"이라고 합니다.

00:02:49.000 --> 00:02:57.000
관리 토큰은 단일 개발자 계정에 연결되어 있으며 개발자가 여러 팀의 구성원인 경우 개발자 팀에서 사용할 수 있습니다.

00:02:57.000 --> 00:03:02.000
관리 토큰은 스키마 가져오기 및 내보내기와 같은 구성 사용 사례만을 위한 것입니다.

00:03:02.000 --> 00:03:05.000
이 토큰은 컨테이너의 데이터에 대한 액세스를 제공하지 않습니다.

00:03:05.000 --> 00:03:15.000
그래서, 우리는 또한 앱 컨테이너의 사용자 개인 데이터베이스 또는 앱 컨테이너의 공개 데이터베이스에 데이터를 쓸 수 있는 도구를 승인하는 데 사용할 수 있는 사용자 토큰을 도입했습니다.

00:03:15.000 --> 00:03:19.000
CloudKit 콘솔에서 관리 토큰과 사용자 토큰을 받을 수 있습니다.

00:03:19.000 --> 00:03:26.000
CloudKit 콘솔에 대한 자세한 내용은 또 다른 WWDC21 세션인 "Meet CloudKit Console"을 확인할 수 있습니다.

00:03:26.000 --> 00:03:36.000
이제 개발자 계정의 관리 토큰과 사용자 토큰을 모두 얻었으므로 macOS 키체인에 안전하게 저장할 도구에 추가할 수 있으며, 진행할 준비가 되었습니다.

00:03:36.000 --> 00:03:38.000
나는 이제 몇 가지 흥미로운 일을 시작할 수 있다.

00:03:38.000 --> 00:03:42.000
예를 들어, 나는 내 애플 개발자 팀 멤버십 목록을 요청할 것이다.

00:03:42.000 --> 00:03:45.000
그리고 나는 내가 속한 팀의 목록을 다시 얻는다. 좋아.

00:03:45.000 --> 00:03:52.000
이제 컨테이너에 데이터베이스 스키마가 정의되어 있고, 변경하기 전에 소스 코드 저장소에 커밋하고 싶다고 가정해 봅시다.

00:03:52.000 --> 00:03:54.000
Cktool을 사용하면, 그것은 하기 쉽다.

00:03:54.000 --> 00:04:08.000
이 내보내기 스키마 명령을 사용하여 개발 스키마를 "schema.ckdb"라는 파일로 끌어내릴 수 있습니다. 이 파일은 앞서 언급한 새로운 CloudKit 스키마 언어로 포맷되었으며, 잠시 후에 이 파일을 자세히 살펴볼 것입니다.

00:04:08.000 --> 00:04:11.000
Cktool을 사용하면 컨테이너에 데이터도 추가할 수 있습니다.

00:04:11.000 --> 00:04:21.000
여기, 이 샘플 북 레코드와 같이 JSON으로 표현된 샘플 값이 있다면, 이처럼 도구에 대한 입력으로 JSON을 사용하여 공용 데이터베이스에 레코드를 만들 수 있습니다.

00:04:21.000 --> 00:04:35.000
좋아요, 이제 도구가 어떻게 작동하는지에 대한 기본적인 이해가 되었으니, 저는 간단한 3단계 스크립트를 만들어 앱의 CloudKit 컨테이너의 개발 환경에서 모든 데이터를 삭제한 다음, 스키마 선언을 서버로 보내고, 마지막으로 테스트 데이터를 로드할 것입니다.

00:04:35.000 --> 00:04:47.000
그렇게 하면 Xcode에서 테스트 사전 조치의 일부로 이 스크립트를 실행할 수 있으며 CloudKit 컨테이너가 테스트를 실행할 때마다 애플리케이션이 사용하는 정확한 스키마와 함께 항상 일관된 상태에 있는지 확인할 수 있습니다.

00:04:47.000 --> 00:04:55.000
그래서, 여기 Xcode에서, 나는 내 프로젝트의 응용 프로그램에 대한 계획을 편집하고 테스트 단계에서 사전 작업을 선택할 것이다.

00:04:55.000 --> 00:04:58.000
이제, 나는 새로운 실행 스크립트 액션을 추가할 수 있다.

00:04:58.000 --> 00:05:05.000
스크립트가 내 프로젝트의 스키마 파일에 대한 경로를 가질 수 있도록 앱 대상에 대한 빌드 설정을 제공할 것입니다.

00:05:05.000 --> 00:05:20.000
바로 여기에 컨테이너를 재설정하기 위해 cktool 명령을 붙여넣은 다음, 하나는 내 애플리케이션 프로젝트의 파일에서 스키마를 가져오고, 마지막으로 하나는 컨테이너의 공용 데이터베이스에 예제 레코드를 만들 것입니다.

00:05:20.000 --> 00:05:27.000
이러한 명령은 동기적이기 때문에, 하나씩 실행되며, 무언가가 예상대로 진행되지 않을 경우를 대비하여 실패하면 실행이 중지됩니다.

00:05:27.000 --> 00:05:32.000
이 경우, 실제로 테스트를 실행하기 전에 사전 테스트 문제를 해결할 수 있습니다.

00:05:32.000 --> 00:05:34.000
그게 다야.

00:05:34.000 --> 00:05:39.000
이제, Xcode 테스트를 실행할 때, cktool은 실행되기 직전에 CloudKit 컨테이너를 준비할 것이다.

00:05:39.000 --> 00:05:40.000
완벽해.

00:05:40.000 --> 00:05:44.000
그래서, 만약 내가 내 애플리케이션의 데이터 모델을 변경해야 한다면?

00:05:44.000 --> 00:05:46.000
CloudKit 스키마 언어에 대해 더 이야기해 봅시다.

00:05:46.000 --> 00:05:51.000
사실, 제가 이전에 다운로드한 schema.ckdb 파일을 살펴봅시다.

00:05:51.000 --> 00:05:58.000
파일 안에는 내 스키마의 레코드 유형을 설명하는 강력한 방법인 새로운 CloudKit 스키마 언어가 있다.

00:05:58.000 --> 00:06:02.000
읽고 쓰기 쉽고, 내 응용 프로그램 코드와 함께 바로 여기 내 프로젝트에 포함시킬 수 있다.

00:06:02.000 --> 00:06:06.000
여기 스키마 섹션 안에는 레코드 유형이 있습니다.

00:06:06.000 --> 00:06:10.000
이것들은 CloudKit 콘솔의 내 컨테이너에 표시된 대로 레코드 유형을 정확히 반영합니다.

00:06:10.000 --> 00:06:15.000
각 레코드 유형에는 여러 필드가 있으며, 각 필드에는 이름과 데이터 유형이 있습니다.

00:06:15.000 --> 00:06:21.000
삼중 밑줄 필드 이름은 모든 레코드 유형에 대해 CloudKit에서 만드는 시스템 필드입니다.

00:06:21.000 --> 00:06:27.000
이 시스템 필드 아래에는 CloudKit에서 이 레코드 유형에 대한 사용자 지정 애플리케이션 데이터를 나타내는 사용자 지정 필드가 있습니다.

00:06:27.000 --> 00:06:35.000
CloudKit 콘솔에서 할 수 있는 것처럼 쿼리 가능, 검색 가능 또는 정렬 가능한 인덱스와 같은 필드에 대한 인덱스를 만들 수 있습니다.

00:06:35.000 --> 00:06:43.000
나는 CloudKit 스키마 언어에서 내 책 레코드 유형의 이 "제목" 사용자 지정 필드와 같이 필드의 데이터 유형 바로 뒤에 인덱스를 선언함으로써 이것을 한다.

00:06:43.000 --> 00:06:47.000
필드 정의 아래에는 레코드 유형의 보안 역할 설정이 있습니다.

00:06:47.000 --> 00:06:54.000
이것은 이 세 가지 내장 시스템 보안 역할 각각과 같이 각 명명된 보안 역할에 권한을 부여할 수 있는 곳입니다.

00:06:54.000 --> 00:07:02.000
"_Creator"는 기록을 만든 사용자만 포함하고, "_world"는 모든 사용자를 포함하며, "_icloud"는 인증된 사용자를 포함합니다.

00:07:02.000 --> 00:07:09.000
CloudKit 스키마 언어에서는 당신과 당신의 팀이 스키마 파일을 훨씬 더 쉽게 읽을 수 있도록 단일 및 다중 줄 주석을 모두 포함할 수 있습니다.

00:07:09.000 --> 00:07:14.000
파일이 처리될 때 CloudKit 서버에서 주석은 무시되므로, 원하는 곳에 자유롭게 주석을 넣을 수 있습니다.

00:07:14.000 --> 00:07:24.000
이제 CloudKit 스키마 언어는 개발자에게 스키마를 선언하고 수정할 수 있는 빠르고 유연한 방법을 제공하므로, CloudKit 스키마 진화에 대한 몇 가지 핵심 개념을 기억하는 것이 중요합니다.

00:07:24.000 --> 00:07:29.000
먼저, 컨테이너의 개발 환경에서 레코드 유형을 완전히 제어할 수 있습니다.

00:07:29.000 --> 00:07:37.000
개발 중 레코드 유형을 추가 및 제거할 수 있으며, 제한 없이 해당 레코드 유형 내부의 사용자 지정 필드를 추가하고 제거할 수 있습니다.

00:07:37.000 --> 00:07:44.000
물론, 새로운 레코드 유형은 항상 생산으로 승격될 수 있으며, 새로운 필드는 생산의 기존 레코드 유형에도 추가될 수 있다.

00:07:44.000 --> 00:07:55.000
하지만 일단 레코드 유형이 컨테이너의 생산 환경으로 승격되면, 삭제하거나 이름을 바꿀 수 없으며, 생산으로 승격된 레코드 유형 내의 사용자 지정 필드도 삭제하거나 이름을 바꿀 수 없습니다.

00:07:55.000 --> 00:08:03.000
그 이유는 CloudKit 서버가 이전 버전의 앱이 여전히 사용할 수 있는 레코드 유형과 필드를 항상 이해하도록 하기 위한 것입니다.

00:08:03.000 --> 00:08:12.000
이것은 컨테이너의 개발 환경에서 스키마 선언을 파괴적으로 변경할 수 있지만, 생산에 대한 이러한 파괴적인 변화를 촉진할 수 없다는 것을 의미합니다.

00:08:12.000 --> 00:08:18.000
프로덕션에서 인덱스를 추가하고 제거할 수 있으며, 보안 역할 설정도 수정할 수 있습니다.

00:08:18.000 --> 00:08:28.000
이러한 모든 스키마 프로모션 개념은 CloudKit에 새로운 것은 아니지만, 이 새로운 파일 기반 스키마 선언에서 얻을 수 있는 유연성은 이를 검토하고 이해하는 것이 중요하다는 것을 의미합니다.

00:08:28.000 --> 00:08:36.000
이제 cktool이 할 수 있는 일과 CloudKit 스키마 언어가 어떻게 작동하는지 이해했으므로, 자신의 프로젝트에서 둘 다 시도해 보는 것이 좋습니다.

00:08:36.000 --> 00:08:42.000
CloudKit 콘솔에서 관리 토큰과 사용자 토큰으로 cktool을 인증하고 명령을 탐색하세요.

00:08:42.000 --> 00:08:51.000
기존 CloudKit 스키마를 CloudKit 스키마 언어 파일로 내보내고 프로젝트에 추가하여 프로젝트의 나머지 부분과 함께 버전 제어에 확인하십시오.

00:08:51.000 --> 00:08:58.000
Cktool을 사용하여 통합 테스트를 위한 몇 가지 설정 단계를 작성하고, 스크립트를 Xcode 구성표에 테스트 사전 작업으로 추가하십시오.

00:08:58.000 --> 00:09:04.000
명령줄에서 CloudKit 컨테이너의 특정 요소를 관리하는 기능은 정말 강력할 수 있습니다.

00:09:04.000 --> 00:09:20.000
다른 모든 애플리케이션 코드와 함께 파일에 CloudKit 스키마 선언을 유지하면 개발 수명 주기 전반에 걸쳐 데이터 모델과 일관성을 유지하는 데 도움이 될 수 있으며, 이 모든 것을 하나로 묶어 통합 테스트의 클라우드 설정을 자동화하는 것이 훨씬 더 좋습니다.

00:09:20.000 --> 00:09:23.000
우리는 당신이 이 새로운 도구로 무엇을 하는지 알게 되어 기쁩니다.

00:09:23.000 --> 00:09:27.000
시간을 내어 CloudKit에 대해 더 알아보고 WWDC21에 관심을 가져주셔서 감사합니다.

00:09:27.000 --> 23:59:59.000
[음악].

