WEBVTT

00:00:02.000 --> 00:00:16.000
안녕하세요, 제 이름은 데이비드이고, 저는 여기 애플의 문서 도구 팀의 엔지니어입니다.

00:00:16.000 --> 00:00:24.000
이 세션에서는 DocC 문서 호스팅과 문서 빌드 자동화에 대해 배우게 됩니다.

00:00:24.000 --> 00:00:32.000
먼저, Xcode에서 문서를 구축하고 서버에서 구축된 문서 아카이브를 호스팅하는 방법에 대해 이야기하겠습니다.

00:00:32.000 --> 00:00:41.000
다음으로, 문서 빌드가 어떻게 작동하는지 그리고 어떻게 빌드 문서를 자동화할 수 있는지에 대해 더 자세히 알아보겠습니다.

00:00:41.000 --> 00:00:48.000
이 강연을 통해, 제 동료들과 제가 작업해온 프로젝트인 SlothCreator를 보여드리겠습니다.

00:00:48.000 --> 00:00:51.000
우리는 사람들이 시작할 수 있도록 웹사이트를 만들었다.

00:00:51.000 --> 00:01:00.000
그리고 이제, 우리는 Xcode의 새로운 문서 기능을 사용하여 웹사이트에서 바로 호스팅할 수 있는 문서 버전을 만드는 것에 대해 정말 기쁩니다.

00:01:00.000 --> 00:01:03.000
그것은 사람들이 훨씬 더 쉽게 시작할 수 있게 할 것이다.

00:01:03.000 --> 00:01:08.000
그래서 우리가 어떻게 그것을 성취할 수 있는지 봅시다.

00:01:08.000 --> 00:01:18.000
Xcode 13의 새로운 문서 기능을 사용하면 Swift 프레임워크, 라이브러리 및 패키지에 대한 문서를 정말 쉽게 작성할 수 있습니다.

00:01:18.000 --> 00:01:27.000
설정 없이 바로 사용을 시작한 다음 시간이 지남에 따라 추가 자료로 문서를 확장할 수 있습니다.

00:01:27.000 --> 00:01:34.000
그리고 개발자 문서 창에서 문서를 내보내는 것은 쉽습니다.

00:01:34.000 --> 00:01:46.000
내보낸 문서 아카이브를 다른 사람들과 공유하여 Xcode에서 문서를 가져오고 읽을 수 있도록 하거나, 온라인으로 문서 아카이브를 호스팅할 수 있습니다.

00:01:46.000 --> 00:02:01.000
Xcode의 문서와 기호에 대한 문서 작성에 대해 더 알고 싶다면, 제 동료 Victoria와 Ethan은 "Xcode에서 DocC 문서 만나기" 세션에서 그것에 대해 이야기합니다.

00:02:01.000 --> 00:02:07.000
이 프레젠테이션의 후반부에서는 명령줄에서 문서 작성을 자동화하는 방법에 대해 이야기하겠습니다.

00:02:07.000 --> 00:02:15.000
하지만 지금은 Xcode에서 서버의 호스트로 내보낸 문서 아카이브를 사용할 것입니다.

00:02:15.000 --> 00:02:25.000
문서 아카이브 자체는 Xcode에서 문서를 읽고 온라인으로 호스팅하기 위해 모든 데이터를 보관하는 컨테이너입니다.

00:02:25.000 --> 00:02:38.000
참조 문서와 기사, 풍부하고 인터랙티브한 튜토리얼을 모두 렌더링하는 데 사용되는 단일 페이지 Vue.js 웹 앱으로 구성되어 있습니다.

00:02:38.000 --> 00:02:44.000
문서 아카이브를 호스팅하기 위해 서버가 처리해야 하는 두 가지 유형의 요청이 있습니다.

00:02:44.000 --> 00:03:06.000
요청 URL이 /documentation/ 또는 /tutorials/로 시작하는 문서 및 튜토리얼 페이지에 대한 요청과 웹 앱에서 로드된 추가 파일 및 데이터에 대한 요청, 요청 URL이 문서 아카이브의 파일 중 하나의 상대 파일 경로와 일치하는 경우.

00:03:06.000 --> 00:03:14.000
페이지를 구성하는 요청의 예와 서버가 어떻게 응답해야 하는지 살펴봅시다.

00:03:14.000 --> 00:03:32.000
개발자가 호스팅된 문서를 읽고 브라우저가 페이지를 요청할 때, 요청이 /documentation/ 또는 /tutorials/로 시작하면 서버는 문서 아카이브에 있는 index.html 파일로 응답해야 합니다.

00:03:32.000 --> 00:03:43.000
그 파일은 브라우저가 나머지 웹 앱을 로드하도록 요청하는 문서 아카이브 내의 CSS와 자바스크립트를 참조합니다.

00:03:43.000 --> 00:03:52.000
그것이 로드되면, 웹 앱은 해당 페이지의 콘텐츠와 참조하는 이미지 또는 기타 미디어를 요청합니다.

00:03:52.000 --> 00:04:06.000
Index.html 파일에서 참조하는 파일과 웹 앱에서 로드하는 콘텐츠 및 미디어는 모두 문서 아카이브의 폴더 구조와 일치하는 요청 URL을 사용합니다.

00:04:06.000 --> 00:04:13.000
이제 호스팅 서버가 들어오는 요청에 어떻게 응답해야 하는지 보았으니, 데모에서 살펴봅시다.

00:04:13.000 --> 00:04:16.000
여러분 중 많은 사람들이 이미 웹사이트를 호스팅하는 서버를 가지고 있을 수 있습니다.

00:04:16.000 --> 00:04:23.000
우리 프로젝트의 경우, 우리는 아파치 서버를 사용하고 있지만, 사용자 지정 라우팅을 허용하는 모든 서버를 사용할 수 있습니다.

00:04:23.000 --> 00:04:26.000
이것은 SlothCreator에 관한 우리의 웹사이트입니다.

00:04:26.000 --> 00:04:33.000
우리는 페이지 중앙의 소개 텍스트 아래에 이 "문서 읽기" 버튼을 추가했지만, 버튼은 아직 작동하지 않습니다.

00:04:33.000 --> 00:04:36.000
그럼 그걸 고치자.

00:04:36.000 --> 00:04:43.000
저는 이미 문서 아카이브를 우리가 웹사이트를 호스팅하는 디렉토리에 복사하고 빈 .htaccess 파일을 추가했습니다.

00:04:43.000 --> 00:04:49.000
하지만 나는 그 안에 어떤 라우팅도 설정하지 않았어.

00:04:49.000 --> 00:04:59.000
제가 추가해야 할 두 가지 라우팅 규칙이 있습니다: 하나는 문서와 튜토리얼 페이지를 위한 것이고 다른 하나는 추가 파일과 데이터를 위한 것입니다.

00:04:59.000 --> 00:05:10.000
첫 번째 규칙의 경우, 내가 일치시키고 싶은 패턴은 첫 번째 경로 구성 요소로 "문서" 또는 "튜토리얼"로 시작하는 URL이다.

00:05:10.000 --> 00:05:19.000
이 패턴과 일치하는 모든 요청은 문서 아카이브 내의 index.html 파일로 다시 라우팅하고 싶습니다.

00:05:19.000 --> 00:05:27.000
마지막으로, 요청이 이 규칙과 일치하면 규칙 평가를 중단하기 위해 플래그로 규칙을 끝낼 것입니다.

00:05:27.000 --> 00:05:31.000
두 번째 규칙을 위해, 나는 그 패턴에 대해 더 분명하게 할 것이다.

00:05:31.000 --> 00:05:42.000
우리는 또한 이 서버로 웹사이트를 호스팅하고 있기 때문에, 웹사이트에 대한 요청을 문서 아카이브의 파일로 다시 라우팅하고 싶지 않습니다.

00:05:42.000 --> 00:05:51.000
문서 아카이브 내부를 살펴보면, 패턴으로 일치시킬 수 있는 소수의 최상위 파일과 폴더가 있다는 것을 알 수 있습니다.

00:05:51.000 --> 00:05:57.000
그래서 나는 그 모든 것과 일치하는 패턴을 추가할 것이다.

00:05:57.000 --> 00:06:11.000
이 경우, 요청 URL은 문서 아카이브에 있는 파일 중 하나에 대한 상대적인 파일 경로이므로, 요청을 일치하는 패턴으로 다시 라우팅하지만 SlothCreator.doccarchive로 접두사를 붙일 것입니다.

00:06:11.000 --> 00:06:17.000
그리고 이전과 마찬가지로, 나는 규칙 평가를 중단하기 위해 같은 깃발을 추가했다.

00:06:17.000 --> 00:06:29.000
이제 웹 페이지를 다시 로드하고 문서 링크를 클릭하면 서버가 이제 우리 웹사이트와 문서를 모두 호스팅한다는 것을 알 수 있습니다.

00:06:29.000 --> 00:06:39.000
주요 SlothCreator 페이지는 중요한 기호를 더 높은 수준의 작업과 관련된 주제로 그룹화합니다.

00:06:39.000 --> 00:06:50.000
그리고 그 그룹들 각각은 더 구체적인 주제로 상징과 관련이 있다.

00:06:50.000 --> 00:06:57.000
DocC는 다양한 프로젝트에 잘 맞도록 만들어진 깔끔한 디자인이 내장되어 있습니다.

00:06:57.000 --> 00:07:06.000
이것은 우리의 SlothCreator 문서와 같이 당신의 프로젝트에 대한 잘생기고 우아한 문서를 정말 쉽게 가질 수 있게 해준다.

00:07:06.000 --> 00:07:15.000
이제 웹사이트에서 문서 사본을 호스팅했으므로, 문서 아카이브를 자동으로 구축하고 업데이트하는 방법을 살펴봅시다.

00:07:15.000 --> 00:07:19.000
그렇게 하기 위해, 나는 xcodebuild를 호출하는 스크립트를 쓸 것이다.

00:07:19.000 --> 00:07:28.000
이것을 하는 스크립트가 있으면, 호스팅된 문서가 항상 최신 상태로 유지되도록 새로운 변경이 이루어질 때마다 실행할 수 있습니다.

00:07:28.000 --> 00:07:37.000
Xcode 13의 새로운 기능, xcodebuild의 새로운 docbuild 작업으로 명령줄에서 문서를 작성할 수 있습니다.

00:07:37.000 --> 00:07:47.000
Xcode 또는 xcodebuild에서 문서를 빌드할 때, 문서를 빌드하는 표준 빌드처럼 작동합니다.

00:07:47.000 --> 00:08:11.000
빌드하는 동안, 스위프트 컴파일러는 모든 공개 기호, 그들의 관계 및 인소스 문서 주석에 대한 자세한 정보를 수집하고 이를 심볼 그래프라는 파일로 문서 컴파일러에 전달하여 Xcode에서 문서를 읽고 온라인으로 호스팅하는 데 필요한 모든 데이터가 포함된 문서 아카이브를 생성합니다.

00:08:11.000 --> 00:08:28.000
대상에 프로젝트에 대한 추가 기사, 미디어 또는 튜토리얼이 포함된 관련 문서 카탈로그가 있는 경우, 문서 컴파일러는 문서 아카이브를 생성할 때 모든 콘텐츠를 기호 정보와 결합할 것입니다.

00:08:28.000 --> 00:08:48.000
문서 카탈로그에 대해 더 알고 싶다면, 제 동료 Bea와 Jack이 다양한 유형의 문서와 개발자에게 프로젝트에 대해 배울 수 있는 좋은 방법을 제공하기 위해 각 문서를 활용하는 방법에 대해 이야기하는 "Xcode에서 DocC 문서를 높이세요" 세션을 확인하세요.

00:08:48.000 --> 00:08:52.000
건물 문서는 당신의 목표에만 적용되는 것이 아닙니다.

00:08:52.000 --> 00:09:07.000
대상에 다른 Swift 프레임워크, 라이브러리 또는 패키지에 대한 종속성이 있는 경우, 동일한 프로세스가 모든 프로세스에 적용되어 프로젝트에 대한 모든 관련 문서를 한 곳에서 얻을 수 있습니다.

00:09:07.000 --> 00:09:18.000
스크립트로 호스팅된 문서를 구축하고 업데이트하는 것을 자동화하려고 하기 때문에, 명령줄의 xcodebuild는 그것에 완벽할 것입니다.

00:09:18.000 --> 00:09:27.000
Xcodebuild의 새로운 docbuild 작업은 기본 빌드 작업과 마찬가지로 작동하지만 문서도 빌드합니다.

00:09:27.000 --> 00:09:35.000
빌드 작업과 마찬가지로, 당신은 당신이 만들고 싶은 계획과 그것이 일부인 프로젝트 또는 작업 공간을 전달합니다.

00:09:35.000 --> 00:09:44.000
프로젝트, 작업 공간 또는 Swift 패키지가 포함된 디렉토리 내에서 xcodebuild를 호출하고 구성표만 전달할 수도 있습니다.

00:09:44.000 --> 00:09:55.000
프로젝트와 계획에 따라 sdk, 대상 또는 구성과 같은 다른 플래그를 전달하여 프로젝트 구축 방식을 사용자 정의할 수 있습니다.

00:09:55.000 --> 00:09:57.000
그렇게 할 필요는 없어.

00:09:57.000 --> 00:10:07.000
하지만 더 쉽게 따라갈 수 있도록, 빌드 제품과 빌드 문서가 작성될 사용자 지정 derivedDataPath를 지정할 것입니다.

00:10:07.000 --> 00:10:21.000
빌드가 완료되면, .doccarchive 파일 확장자를 사용하여 모든 빌드된 문서 아카이브를 찾고 각각을 다른 위치나 다른 기계에 복사할 수 있습니다.

00:10:21.000 --> 00:10:25.000
데모에서 그것을 살펴봅시다.

00:10:25.000 --> 00:10:28.000
이것은 우리가 이전에 호스팅한 문서입니다.

00:10:28.000 --> 00:10:38.000
관련 기호를 주제로 그룹화하여 개발자가 특정 작업의 핵심 유형을 쉽게 찾을 수 있도록 합니다.

00:10:38.000 --> 00:10:45.000
우리가 이 버전을 만든 이후로, 제 동료들은 Essentials 섹션에 나타나는 몇 가지 새로운 기사와 튜토리얼을 추가했습니다.

00:10:45.000 --> 00:10:54.000
그래서 지금은 최신 문서를 만들고 웹사이트를 업데이트하는 자동화 스크립트를 작성할 수 있는 좋은 시간이다.

00:10:54.000 --> 00:11:11.000
방금 보셨듯이, 우리는 xcodebuild의 docbuild 작업을 호출하여 문서를 만들고 문서 아카이브를 찾아 웹사이트를 호스팅하는 디렉토리에 복사하여 웹사이트를 업데이트합니다.

00:11:11.000 --> 00:11:18.000
Xcode의 계획 선택기에서 볼 수 있는 것과 같기 때문에 어떤 계획을 통과해야 하는지 이미 알고 있습니다.

00:11:18.000 --> 00:11:29.000
아직 Xcode를 열지 않았다면, 명령줄에서 xcodebuild -list를 실행하여 사용 가능한 모든 구성표를 나열할 수도 있습니다.

00:11:29.000 --> 00:11:42.000
다시 말하지만, 사용자 지정 derivedDataPath는 필요하지 않지만, 빌드된 문서가 작성되고 발견되는 곳을 더 쉽게 따라갈 수 있습니다.

00:11:42.000 --> 00:11:52.000
빌드가 완료되면, 모든 문서 아카이브를 찾아 각각을 우리가 웹사이트를 호스팅하는 디렉토리에 복사할 수 있습니다.

00:11:52.000 --> 00:12:02.000
그리고 그것이 끝나면, 나는 대본을 실행할 준비가 되었다.

00:12:02.000 --> 00:12:09.000
이제, 새로 고치면, 필수 섹션에서 추가된 기사와 튜토리얼을 볼 수 있습니다.

00:12:09.000 --> 00:12:13.000
이러한 최신 변경 사항으로, 우리의 문서는 더 완벽해 보인다.

00:12:13.000 --> 00:12:35.000
그리고 SlothCreator를 처음 접하는 사람들은 기사의 내용을 선호하든 튜토리얼 중 하나의 단계별 지침을 선호하든 시작하기에 좋은 장소를 가지고 있습니다.

00:12:35.000 --> 00:12:40.000
이제, 호스팅된 문서를 업데이트하는 것은 스크립트를 실행하는 것만큼 쉽습니다.

00:12:40.000 --> 00:12:51.000
그리고 우리가 지속적인 통합 서버에서 사후 병합 후크의 일부로 실행한다면, 호스팅된 문서가 항상 최신 상태로 유지되도록 할 수 있습니다.

00:12:51.000 --> 00:13:05.000
이 세션에서 이야기한 내용을 요약하자면, 문서 아카이브를 공유하거나 온라인으로 호스팅하여 Xcode에서 사용하기 시작하기 전에도 프레임워크 소비자에게 훌륭한 문서 경험을 제공할 수 있습니다.

00:13:05.000 --> 00:13:13.000
그리고 명령줄에 문서를 구축하면 자동화 워크플로우에 문서를 포함할 수 있습니다.

00:13:13.000 --> 00:13:25.000
DocC 문서에 대해 더 알고 싶다면, "Xcode에서 DocC 문서 만나기"는 Xcode의 새로운 문서 기능에 대한 환상적인 소개입니다.

00:13:25.000 --> 00:13:33.000
"Xcode에서 DocC 문서를 높이세요"는 DocC 카탈로그로 문서를 향상시키는 방법에 대해 자세히 설명합니다.

00:13:33.000 --> 00:13:43.000
그리고 "DocC를 사용하여 대화형 튜토리얼을 만드세요"는 아이디어를 구성하고 프로젝트를 위한 놀라운 튜토리얼을 만드는 방법을 자세히 설명합니다.

00:13:43.000 --> 00:13:44.000
봐줘서 고마워.

00:13:44.000 --> 23:59:59.000
[음악].

