WEBVTT

00:00:02.000 --> 00:00:10.000
안녕.

00:00:10.000 --> 00:00:14.000
제 이름은 애니이고, 저는 건강 기록 팀의 소프트웨어 엔지니어입니다.

00:00:14.000 --> 00:00:23.000
저는 오늘 제 동료 캐리와 함께 사람들이 HealthKit을 사용하여 검증 가능한 건강 기록을 공유할 수 있는 방법을 보여주기 위해 합류했습니다.

00:00:23.000 --> 00:00:33.000
검증 가능한 건강 기록에 뛰어들기 전에, iOS 11.3을 위해 2018년에 출시한 건강 기록 기능을 간단히 다시 소개하고 싶습니다.

00:00:33.000 --> 00:00:43.000
건강 기록을 통해 사용자는 제공자와 연결하고 임상 기록을 건강 앱에 안전하게 다운로드하여 쉽게 저장하고 시각화할 수 있습니다.

00:00:43.000 --> 00:00:51.000
이것은 모두 HL7의 Fast Healthcare Interoperability Resources 또는 FHIR과 같은 업계 표준을 기반으로 합니다.

00:00:51.000 --> 00:00:58.000
사용자 권한으로, 당신의 앱은 사용자가 HealthKit으로 다운로드한 이러한 건강 기록에 액세스할 수 있습니다.

00:00:58.000 --> 00:01:09.000
기존 건강 기록 API에 대한 자세한 내용은 WWDC 2018 비디오인 "HealthKit으로 건강 기록에 액세스"를 확인하여 자세히 알아보시기 바랍니다.

00:01:09.000 --> 00:01:23.000
iOS 15의 경우, 우리는 스마트 건강 카드 사양을 기반으로 구현된 건강 앱에서 검증 가능한 기록을 다운로드, 저장 및 공유할 수 있도록 건강 기록 작업을 활용하고 있습니다.

00:01:23.000 --> 00:01:33.000
검증 가능한 건강 기록이 무엇이며 현재 HealthKit으로 쿼리할 수 있는 건강 기록 데이터와 어떻게 다른지 살펴봅시다.

00:01:33.000 --> 00:01:43.000
첫째, 검증 가능한 건강 기록에는 환자 자원과 하나 이상의 임상 자원을 포함한 여러 FHIR 자원이 포함되어 있습니다.

00:01:43.000 --> 00:01:48.000
이 자원들은 우리가 스마트 건강 카드라고 부르는 것에 묶여 있다.

00:01:48.000 --> 00:02:02.000
실험실이나 의료 서비스 제공자와 같은 검증 가능한 건강 기록을 만드는 발행인 또는 기관은 이 SMART 건강 카드를 JSON 웹 서명 또는 JWS로 암호화로 서명합니다.

00:02:02.000 --> 00:02:12.000
마지막으로, 발행인은 환자와 임상 데이터에 대한 필요한 정보만 포함하도록 검증 가능한 건강 기록을 생성합니다.

00:02:12.000 --> 00:02:16.000
이 점들에 대한 더 명확한 그림을 얻기 위해, 예를 살펴봅시다.

00:02:16.000 --> 00:02:24.000
이 예를 들어, 그 기록에는 백신의 각 복용량에 대해 하나씩 두 개의 FHIR 예방접종 자원이 포함되어 있다.

00:02:24.000 --> 00:02:30.000
그것은 또한 누가 백신을 받았는지 확인하기 위한 FHIR 환자 자원을 포함한다.

00:02:30.000 --> 00:02:37.000
그런 다음 이러한 자원은 원시 형태로 다음과 같이 보이는 스마트 건강 카드로 결합됩니다.

00:02:37.000 --> 00:02:56.000
스마트 건강 카드 페이로드에는 건강 카드에서 기대할 수 있는 데이터 유형을 선언하는 URL이 포함된 유형과 FHIR 버전과 예방접종 및 환자 리소스가 포함된 번들 리소스를 포함하는 자격 증명 주제와 같은 정보가 포함됩니다.

00:02:56.000 --> 00:03:04.000
그런 다음 SMART Health Card는 헤더와 페이로드의 두 가지 구성 요소가 있는 JWS로 서명됩니다.

00:03:04.000 --> 00:03:21.000
JWS 헤더에는 JWS에 서명하는 데 사용되는 알고리즘, 발행인의 공개 키 중 서명에 사용된 것을 지정하는 공개 키 지문, 그리고 페이로드를 압축하는 데 사용되는 알고리즘이 있습니다.

00:03:21.000 --> 00:03:38.000
압축된 JWS 페이로드는 자격 증명 주제와 함께 발행인의 공개 키가 있는 발행인 URL, 발행일 및 선택적 만료일을 포함한 다른 청구 데이터를 포함합니다.

00:03:38.000 --> 00:03:42.000
원시 형태로, 이것은 검증 가능한 건강 기록의 모습이다.

00:03:42.000 --> 00:03:51.000
자세한 내용은 이 세션과 관련된 링크를 통해 SMART Health Card 사양을 방문하는 것이 좋습니다.

00:03:51.000 --> 00:03:59.000
이제 검증 가능한 건강 기록이 어떻게 생겼는지 검토했으니, 이 기록을 건강 앱으로 가져오는 방법을 보여드리겠습니다.

00:03:59.000 --> 00:04:03.000
한 가지 옵션은 기존 건강 기록 기능을 사용하는 것이다.

00:04:03.000 --> 00:04:10.000
사용자는 건강 기록 지원 공급자에 연결하여 확인 가능한 건강 기록을 건강 앱에 다운로드할 수 있습니다.

00:04:10.000 --> 00:04:20.000
이 옵션은 현재 미국, 영국 및 캐나다에 있는 건강 기록 기능을 사용할 수 있는 경우에만 사용할 수 있습니다.

00:04:20.000 --> 00:04:30.000
사용자는 또한 .smart-health-cards 확장자를 가진 파일을 다운로드하거나 스마트 건강 카드 파일에 내장된 QR 코드를 스캔할 수 있는 옵션이 있습니다.

00:04:30.000 --> 00:04:39.000
이것은 사용자가 세부 사항을 보고 이러한 기록을 다운로드할지 여부를 선택할 수 있는 건강 앱에 다음 시트를 표시합니다.

00:04:39.000 --> 00:04:42.000
이 두 가지 옵션은 국제적으로 이용 가능하다.

00:04:42.000 --> 00:04:47.000
마지막으로, HealthKit으로 이 데이터에 대한 액세스를 어떻게 요청할 수 있나요?

00:04:47.000 --> 00:05:00.000
우리는 새로운 HealthKit 쿼리인 HKVerifiableClinicalRecordQuery와 새로운 HKSample 서브클래스인 iOS 15용 HKVerifiableClinicalRecord를 소개합니다.

00:05:00.000 --> 00:05:10.000
다른 HKQuery 하위 클래스와 달리, 이 쿼리를 사용하려면 검증 가능한 건강 기록에 대한 HealthKit 액세스 권한을 요청해야 합니다.

00:05:10.000 --> 00:05:19.000
여전히 SDK의 공개 헤더에 액세스할 수 있지만, 결과 핸들러는 권한 없이 인증 거부 오류를 반환합니다.

00:05:19.000 --> 00:05:25.000
시작하는 방법에 대한 정보는 이 세션과 관련된 링크를 참조하십시오.

00:05:25.000 --> 00:05:36.000
쿼리와 샘플 클래스에 대해 더 깊이 파고들기 전에, 건강 기록에 익숙할 수 있는 것과 약간 다른 검증 가능한 건강 기록에 대한 승인을 살펴봅시다.

00:05:36.000 --> 00:05:47.000
첫째, 검증 가능한 건강 기록은 사용자가 앱과 공유할 유형이 아닌 개별 샘플을 선택하는 샘플별 인증 패턴을 관찰합니다.

00:05:47.000 --> 00:05:56.000
이러한 유형의 권한 부여는 사용자에게 데이터에 대한 보다 세분화된 제어를 제공하며 개인 정보를 보호하는 데 중요합니다.

00:05:56.000 --> 00:06:08.000
현재 HealthKit 인증 패턴은 두 단계로 구성됩니다: 먼저 읽고 공유할 유형에 대한 사용자 인증을 요청한 다음, 인증이 부여되면 샘플을 쿼리합니다.

00:06:08.000 --> 00:06:12.000
검증 가능한 건강 기록으로, 이 첫 번째 단계는 필요하지 않습니다.

00:06:12.000 --> 00:06:26.000
대신, HKVerifiableClinicalRecordQuery의 인스턴스가 생성되고 실행되면, 인증 시트가 제시되어 사용자가 앱과 공유할 개별 레코드를 선택할 수 있습니다.

00:06:26.000 --> 00:06:32.000
공유 후, 선택한 레코드는 쿼리의 결과 핸들러로 반환됩니다.

00:06:32.000 --> 00:06:37.000
게다가, 검증 가능한 건강 기록에 대한 허가는 일회성이다.

00:06:37.000 --> 00:06:44.000
이러한 기록을 타사 앱과 공유하는 것은 장기 액세스 권한을 설정하지 않습니다.

00:06:44.000 --> 00:06:56.000
HKVerifiableClinicalRecordQuery의 각 실행은 다음 인증 시트를 제시하고 사용자가 선택한 레코드를 결과 핸들러로 반환합니다.

00:06:56.000 --> 00:07:03.000
이제 승인을 검토했으니, HKVerifiableClinicalRecordQuery를 더 자세히 살펴봅시다.

00:07:03.000 --> 00:07:16.000
HKVerifiableClinicalRecordQuery를 초기화하려면, 먼저 이전에 검증 가능한 건강 기록에 존재하는 데이터 유형으로 정의한 레코드 유형의 문자열 배열을 제공해야 합니다.

00:07:16.000 --> 00:07:24.000
제공된 모든 기록 유형이 있는 기록만 승인 시트에 표시됩니다.

00:07:24.000 --> 00:07:32.000
다른 HealthKit 쿼리와 마찬가지로, 승인을 위해 샘플 세트를 추가로 필터링하기 위해 술어를 추가할 수 있는 옵션도 있습니다.

00:07:32.000 --> 00:07:40.000
우리는 날짜 간격 내에서 관련 날짜가 있는 기록에 대한 조건자를 만들기 위해 편의 생성자를 제공하고 있습니다.

00:07:40.000 --> 00:07:50.000
쿼리가 실행되고 사용자가 "한 번 공유"를 탭하면, 승인된 HKVerifiableClinicalRecords가 결과 핸들러에 반환됩니다.

00:07:50.000 --> 00:08:02.000
기록에는 주제와 발행인에 대한 기본 정보, 그리고 물론 당신이 확인하고 디코딩할 원시 데이터를 포함하는 JWS 속성이 포함되어 있습니다.

00:08:02.000 --> 00:08:18.000
이제 검증 가능한 건강 기록 기능과 API가 어떻게 생겼는지 살펴보았으므로, 테스트 데이터를 가져오고, API를 사용하여 기록을 요청하고, 기록의 JWS를 확인하는 방법을 안내할 Cary에게 넘겨줄 것입니다.

00:08:18.000 --> 00:08:19.000
고마워, 애니.

00:08:19.000 --> 00:08:20.000
안녕하세요, 여러분.

00:08:20.000 --> 00:08:23.000
제 이름은 캐리이고, 건강 기록 팀의 엔지니어이기도 합니다.

00:08:23.000 --> 00:08:27.000
오늘, 확인 가능한 건강 기록으로 작업하는 방법을 안내해 드리겠습니다.

00:08:27.000 --> 00:08:34.000
따라서 이 새로운 기능으로 작업을 시작하는 가장 좋은 방법은 일부 테스트 데이터를 HealthKit에 로드하는 것입니다.

00:08:34.000 --> 00:08:39.000
애니가 언급했듯이, 시작하기 위해 사용할 수 있는 세 가지 방법이 있습니다.

00:08:39.000 --> 00:08:49.000
미국, 캐나다 또는 영국에 있다면, 건강 앱의 기존 건강 기록 기능을 사용하여 공급자에게 연결하기만 하면 됩니다.

00:08:49.000 --> 00:09:00.000
우리가 추가한 또 다른 새로운 방법은 .smart-health-card 파일을 다운로드하는 것입니다. 그 예는 smarthealth.cards 사양 웹사이트에서 찾을 수 있습니다.

00:09:00.000 --> 00:09:04.000
세 번째 방법은 QR 코드를 스캔하는 것이다.

00:09:04.000 --> 00:09:06.000
그러니까 데이터 좀 가지러 가자.

00:09:06.000 --> 00:09:12.000
이 데모의 경우, 새로운 QR 코드 가져오기를 시도하는 것으로 시작할 수 있습니다.

00:09:12.000 --> 00:09:17.000
iOS 15를 실행하는 장치로 시작하고 이 QR 코드를 스캔할 것입니다.

00:09:17.000 --> 00:09:21.000
스캔하자마자, 건강 앱으로 직접 열라는 프롬프트가 표시됩니다.

00:09:21.000 --> 00:09:25.000
건강 앱으로 전환하면, 즉시 이 건강 카드를 가져오는 과정을 안내하기 시작할 것입니다.

00:09:25.000 --> 00:09:30.000
"건강에 추가" 옵션을 선택하면, 가져오기 프로세스가 완료됩니다.

00:09:30.000 --> 00:09:35.000
검색 탭으로 스크롤하여 예방접종 섹션에서 가져온 기록을 볼 수 있습니다.

00:09:35.000 --> 00:09:44.000
이 카테고리를 탭하면, 이제 백신이 있고 그 서명이 건강 앱에 의해 확인되었음을 알 수 있습니다.

00:09:44.000 --> 00:09:51.000
이제 건강 앱으로 서명된 기록을 가져왔으니, 자신의 앱에서 이러한 기록을 요청할 준비가 되었습니다.

00:09:51.000 --> 00:09:56.000
이제, 당신의 앱이 이 새로운 API에 어떻게 접근할 수 있는지에 대한 예를 살펴봅시다.

00:09:56.000 --> 00:09:58.000
먼저, HealthKit을 가져오는 것으로 시작할 것입니다.

00:09:58.000 --> 00:10:06.000
다음으로, 표준 HealthKit 인증 API를 사용했다면 이미 익숙할 수 있는 HealthStore를 만들 것입니다.

00:10:06.000 --> 00:10:12.000
또한 사용자가 공유할 데이터 유형을 지정하기 위해 레코드 유형 목록을 만들 것입니다.

00:10:12.000 --> 00:10:18.000
승인할 때, 이러한 레코드 유형과만 일치하는 공유할 데이터 목록이 표시됩니다.

00:10:18.000 --> 00:10:23.000
다음으로, 샘플을 공유할 유효한 날짜 범위를 지정하는 술어입니다.

00:10:23.000 --> 00:10:30.000
이 예에서, 당신은 지난 7일 동안 수행된 실험실이 요청되는 것을 볼 수 있습니다.

00:10:30.000 --> 00:10:39.000
그런 다음 구성된 recordTypes와 술어를 사용하여 쿼리를 만들고, 완성된을 사용하여 제시된 샘플이 앱과 공유되었는지 확인합니다.

00:10:39.000 --> 00:10:47.000
마지막으로, 쿼리를 실행하면 앱과 공유할 결과를 선택할 수 있는 인증 시트가 표시됩니다.

00:10:47.000 --> 00:10:51.000
이 대화는 이 방법이 실행될 때마다 제시될 것이다.

00:10:51.000 --> 00:10:57.000
이제 서명된 임상 데이터를 검색했으므로, 앱 내에서 서명을 확인하는 코드를 작성할 수 있습니다.

00:10:57.000 --> 00:11:03.000
검토하기 위해, 디지털 서명은 디지털 정보의 진위를 확인하는 수학적 방법이다.

00:11:03.000 --> 00:11:13.000
이 과정은 서버나 다른 모바일 장치와 같은 모든 장치에서 수행될 수 있지만, 앱 내에서 수행하는 방법을 살펴봅시다.

00:11:13.000 --> 00:11:16.000
네 가지 주요 단계를 사용하여 이것을 달성할 수 있습니다.

00:11:16.000 --> 00:11:20.000
먼저, 당신은 Codable을 사용하여 임상 데이터를 분석할 것입니다.

00:11:20.000 --> 00:11:24.000
둘째, 서명된 JSON 웹 토큰 페이로드의 압축을 해제할 것입니다.

00:11:24.000 --> 00:11:28.000
셋째, 당신은 그들의 웹사이트에서 발행인의 공개 키를 다운로드할 것입니다.

00:11:28.000 --> 00:11:32.000
그리고 마지막으로, 당신은 CryptoKit을 사용하여 서명을 확인할 것입니다.

00:11:32.000 --> 00:11:41.000
JSON 웹 서명 사양에 공식적으로 정의된 서명된 레코드의 데이터 모델을 정의하는 방법을 살펴보는 것으로 시작합시다.

00:11:41.000 --> 00:11:47.000
이 구조체는 세 가지 주요 부분으로 정의됩니다: 헤더, 페이로드 및 서명.

00:11:47.000 --> 00:11:56.000
Swift Codable을 사용하여 구문 분석을 수행할 수 있으며, 서명 확인 중에 사용하기 위해 헤더와 페이로드의 원래 표현을 유지해야 합니다.

00:11:56.000 --> 00:12:03.000
가장 중요한 것은, 컴팩트한 직렬화된 형태에서 JWS를 구문 분석하기 위해 이니셜라이저를 추가하는 것입니다.

00:12:03.000 --> 00:12:07.000
다음으로, JWS 헤더를 나타내는 데 사용되는 구조체가 생성됩니다.

00:12:07.000 --> 00:12:14.000
컴팩트한 직렬화에서 초기화하는 동안뿐만 아니라 서명 확인 과정에서도 이것이 필요할 것입니다.

00:12:14.000 --> 00:12:25.000
여기 헤더에서 지정된 서명 알고리즘, 공개 키 지문을 보관하는 데 사용되는 키 ID 필드 및 압축 알고리즘을 찾을 것으로 예상할 수 있습니다.

00:12:25.000 --> 00:12:31.000
공개 키 지문은 JWS에 서명하는 데 사용된 발행인의 키를 식별하는 데 사용됩니다.

00:12:31.000 --> 00:12:41.000
이 과정에는 ES256 서명 알고리즘과 DEF 압축 알고리즘이 필요하며, 둘 다 자사 Swift 라이브러리에서 지원됩니다.

00:12:41.000 --> 00:12:46.000
이제 컴팩트한 직렬화에서 JWS를 구문 분석하는 데 필요한 코드를 살펴봅시다.

00:12:46.000 --> 00:12:55.000
직렬화된 문자열을 구성 요소로 분할하는 것으로 시작하며, 각 조각은 Base64URL로 인코딩됩니다.

00:12:55.000 --> 00:13:05.000
헤더와 페이로드를 디코딩하는 JSONDecoder와 Base64URL을 만든 후, 헤더가 페이로드가 올바르게 압축되었음을 나타내는지 확인할 수 있습니다.

00:13:05.000 --> 00:13:15.000
압축을 확인한 후, 제공된 샘플 프로젝트에서 찾을 수 있는 유틸리티 방법을 사용하여 페이로드의 압축을 해제할 것입니다.

00:13:15.000 --> 00:13:20.000
당신이 필요한 다음 조각은 건강 카드 페이로드를 모델링하기 위한 구조체입니다.

00:13:20.000 --> 00:13:32.000
여기서 가장 중요한 두 부분은 키를 가져오는 데 사용할 수 있는 발행인의 웹 식별자를 보관하는 발행인 필드이며, 다른 하나는 모든 환자 데이터를 보관하는 VC 필드입니다.

00:13:32.000 --> 00:13:41.000
VC 필드를 구문 분석하고 내용을 분석하는 방법에 대한 자세한 내용은 WWDC 2020의 "타지 않고 FHIR 처리" 강연을 확인하세요.

00:13:41.000 --> 00:13:47.000
이제 JWS를 구문 분석하는 방법을 보았으니, 진위를 확인할 준비가 되었습니다.

00:13:47.000 --> 00:13:52.000
JWS 구조체에 검증 방법을 추가할 확장 프로그램을 만드는 것을 살펴봅시다.

00:13:52.000 --> 00:14:04.000
서명 키를 검색하기 위해 발행인의 웹사이트에 직접 연락할 것이기 때문에, Combine을 사용하여 이 과정의 비동기 측면을 도울 수 있으며, CryptoKit을 사용하여 서명 검증을 도울 수 있습니다.

00:14:04.000 --> 00:14:12.000
검증 방법 내에서, 당신은 항상 발행인의 웹 주소인 발행인의 식별자를 꺼내는 것으로 시작할 것입니다.

00:14:12.000 --> 00:14:20.000
여기서, URL이 개인적으로 신뢰하는 URL인지 확인하고 결과를 받아들이고 싶지 않은 URL인지 여부를 확인하기 위해 자신만의 방법을 추가할 수 있습니다.

00:14:20.000 --> 00:14:30.000
다음으로, 표준 .wellknown/jwks.json URL 경로를 추가하여 발행인의 키를 검색할 URL을 만들 것입니다.

00:14:30.000 --> 00:14:36.000
이 경로 접미사는 사양에 정의되어 있으며 모든 발행자에게 동일해야 합니다.

00:14:36.000 --> 00:14:46.000
이제 잘 알려진 URL을 구성했으므로, 발행인에 연결하고, 키를 다운로드하고, 서명 확인을 완료할 수 있습니다.

00:14:46.000 --> 00:14:54.000
발행인의 잘 알려진 jwk 엔드포인트에 연결할 URLSession dataTaskPublisher를 만들어 이 방법을 작성합니다.

00:14:54.000 --> 00:15:05.000
그런 다음 데이터에 매핑하고, jsonDecoder를 사용하여 JWK 집합으로 디코딩하고, 마지막으로 부울에 매핑하여 서명이 유효한지 여부를 나타낼 수 있습니다.

00:15:05.000 --> 00:15:12.000
최종 지도 블록 내에서 JWS 헤더가 나타내는 것에 따라 발행인의 키를 선택할 수 있습니다.

00:15:12.000 --> 00:15:17.000
마지막 작품은 CryptoKit을 사용하여 서명을 확인하는 것을 포함한다.

00:15:17.000 --> 00:15:27.000
JWS 사양에 따르면, 데이터의 서명된 부분은 Base64URL로 인코딩된 헤더와 페이로드를 일정 기간으로 연결하여 형성된다.

00:15:27.000 --> 00:15:39.000
다음으로, 이 강연과 함께 제공되는 샘플 프로젝트에서 찾을 수 있는 유틸리티 방법을 사용하여 다운로드한 JWK 키를 CryptoKit P256 서명 키로 변환할 것입니다.

00:15:39.000 --> 00:15:45.000
마지막으로, CryptoKit의 isValidSignature 방법을 사용하여 서명을 확인할 수 있습니다.

00:15:45.000 --> 00:15:52.000
이제 데이터 모델과 신뢰성을 확인하는 데 필요한 모든 논리가 정의되었기 때문에, 모든 것을 함께 모을 수 있습니다.

00:15:52.000 --> 00:16:01.000
새로운 API를 호출하는 방법에 대한 이전 예제를 살펴보면, 이 주석을 새로운 인증 방법에 대한 호출로 바꿀 수 있습니다.

00:16:01.000 --> 00:16:07.000
API는 선택한 모든 샘플의 목록을 반환하기 때문에, 목록에서 첫 번째 샘플을 선택할 수 있습니다.

00:16:07.000 --> 00:16:10.000
다음으로, 데이터에서 문자열로 구문 분석하세요.

00:16:10.000 --> 00:16:14.000
그런 다음 컴팩트한 직렬화 이니셜라이저를 사용하여 구문 분석하세요.

00:16:14.000 --> 00:16:19.000
마지막으로, 새로운 검증 방법을 호출하고, 방출된 부울 결과를 들어보세요.

00:16:19.000 --> 00:16:27.000
그리고 그렇게, 우리는 서명된 임상 데이터 조각을 가지고 발행인의 서명 키를 다운로드하고 이러한 기록의 서명을 검증하는 방법을 보았습니다.

00:16:27.000 --> 00:16:30.000
이제, 요약하기 위해 애니에게 돌려줄게.

00:16:30.000 --> 00:16:31.000
고마워, 캐리.

00:16:31.000 --> 00:16:38.000
마무리하기 전에, 저는 검증 가능한 건강 기록과 관련하여 사생활에 대해 이야기하고 싶습니다.

00:16:38.000 --> 00:16:46.000
바라건대, 저는 이 세션을 통해 검증 가능한 건강 기록 기능이 사용자 개인 정보를 염두에 두고 구축되었다는 것을 분명히 했습니다.

00:16:46.000 --> 00:16:56.000
우선, 스마트 건강 카드 사양은 발행인이 각 기록에 포함해야 하는 정보를 최소화하는 데이터 프로필을 사용합니다.

00:16:56.000 --> 00:17:08.000
건강 앱은 민감한 건강 데이터를 보호하도록 설계되었으므로, 휴대폰이 잠겨 있을 때, 건강 앱의 모든 건강 및 피트니스 데이터는 암호화되며, 여기에는 검증 가능한 건강 기록이 포함됩니다.

00:17:08.000 --> 00:17:20.000
검증 가능한 건강 기록에 접근하려면 이 민감한 건강 데이터가 오용되지 않도록 추가 의무가 있는 자격에 대한 신청서가 필요합니다.

00:17:20.000 --> 00:17:28.000
그리고 마지막으로, 사용자는 검증 가능한 건강 기록을 앱과 공유하는 방법을 추가로 제어할 수 있습니다.

00:17:28.000 --> 00:17:30.000
우리가 오늘 다룬 것을 검토해 봅시다.

00:17:30.000 --> 00:17:42.000
건강 기록 위에 구축된 iOS 15에서, 우리는 검증 가능한 기록을 건강 앱으로 가져오고 개발자가 새로운 API로 이 데이터를 읽을 수 있는 기능을 제공하고 있습니다.

00:17:42.000 --> 00:17:47.000
마무리하기 위해, 여기 당신이 다음에 할 수 있는 일이 있습니다.

00:17:47.000 --> 00:17:55.000
먼저, 검증 가능한 건강 데이터 생태계에 대해 자세히 알아보려면, SMART 건강 카드 사양을 확인하세요.

00:17:55.000 --> 00:18:00.000
테스트 기록을 건강 앱으로 가져와 직접 시도해 보세요.

00:18:00.000 --> 00:18:06.000
테스트 기록을 쿼리하고 확인하는 방법을 보여주는 샘플 앱을 다운로드하세요.

00:18:06.000 --> 00:18:14.000
그리고 마지막으로, 앱을 배송할 준비가 되면, 검증 가능한 건강 기록에 대한 HealthKit 액세스 권한을 요청하십시오.

00:18:14.000 --> 00:18:18.000
시청해 주셔서 감사합니다, 그리고 멋진 WWDC를 보내세요.

00:18:18.000 --> 23:59:59.000
[음악].

