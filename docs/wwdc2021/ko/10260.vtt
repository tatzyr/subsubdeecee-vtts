WEBVTT

00:00:02.000 --> 00:00:11.000
안녕하세요, 저는 마이클 옥스입니다.

00:00:11.000 --> 00:00:13.000
저는 UIKit 팀의 프레임워크 엔지니어입니다.

00:00:13.000 --> 00:00:17.000
iPad 키보드 내비게이션에 오신 것을 환영합니다.

00:00:17.000 --> 00:00:20.000
사람들은 아이패드와 함께 하드웨어 키보드를 사용하는 것을 좋아한다.

00:00:20.000 --> 00:00:28.000
Mac Catalyst와 iPadOS 15는 앱에서 키보드 탐색을 지원하는 강력한 API를 소개합니다.

00:00:28.000 --> 00:00:33.000
iPadOS에서 키보드로 앱을 탐색하는 것은 매우 친숙하게 느껴질 것이다.

00:00:33.000 --> 00:00:36.000
탭 키는 앱의 중요한 영역 사이를 탐색합니다.

00:00:36.000 --> 00:00:45.000
화살표 키는 영역 내에서 이동하며, iPadOS의 return 키 또는 Mac Catalyst의 스페이스 바를 사용하여 항목을 선택할 수 있습니다.

00:00:45.000 --> 00:00:50.000
앱이 이미 이러한 키 명령을 사용하고 있다면, 사용자 지정 명령은 더 이상 작동하지 않습니다.

00:00:50.000 --> 00:00:55.000
나중에 이 갈등을 해결하는 방법을 보여줄게.

00:00:55.000 --> 00:00:58.000
먼저, 작동하는 키보드 내비게이션을 보여드리겠습니다.

00:00:58.000 --> 00:01:06.000
사진에서 탭 키를 눌러 사이드바의 라이브러리 셀에서 오른쪽의 사진 그리드로 초점을 이동할 수 있습니다.

00:01:06.000 --> 00:01:13.000
이제 화살표 키를 사용하여 그리드의 사진 사이를 탐색할 수 있습니다.

00:01:13.000 --> 00:01:21.000
내가 찾고 있는 사진을 찾으면, return 키를 눌러 선택할 수 있습니다.

00:01:21.000 --> 00:01:30.000
iOS 15 SDK로 컴파일하면, 이 동작은 텍스트 필드, 텍스트 보기 및 사이드바에 대해 자동으로 활성화됩니다.

00:01:30.000 --> 00:01:35.000
또한 훌륭한 경험을 위해 다른 컬렉션, 테이블 및 사용자 지정 보기를 선택해야 합니다.

00:01:35.000 --> 00:01:39.000
잠시 후에 이걸 어떻게 하는지 보여줄게.

00:01:39.000 --> 00:01:44.000
이것이 흥미로운 기능이라는 것을 알고 있지만, 앱 키보드의 모든 요소를 탐색할 수 있도록 하지는 마세요.

00:01:44.000 --> 00:01:53.000
키보드 탐색은 사용자가 앱의 주요 기능에 액세스할 수 있도록 하기 위한 것이므로 텍스트 입력, 목록 및 컬렉션 보기에 중점을 둡니다.

00:01:53.000 --> 00:01:58.000
버튼, 분할된 컨트롤 및 스위치와 같은 컨트롤은 제쳐두세요.

00:01:58.000 --> 00:02:02.000
전체 키보드 액세스는 이미 이러한 컨트롤을 키보드로 탐색할 수 있게 해준다.

00:02:02.000 --> 00:02:08.000
전체 키보드 액세스에 대해 자세히 알아보려면 "iOS 앱에서 전체 키보드 액세스 지원"을 확인하세요.

00:02:08.000 --> 00:02:17.000
iPadOS의 키보드 내비게이션은 tvOS와 동일한 포커스 시스템을 사용합니다. 이전에 tvOS 앱을 작성한 적이 있다면, 많은 API가 친숙하게 느껴질 것입니다.

00:02:17.000 --> 00:02:23.000
그러나, 당신이 알아야 할 몇 가지 새로운 API와 행동 차이가 있습니다.

00:02:23.000 --> 00:02:30.000
일반적으로 포커스 시스템에 대해 더 알고 싶다면, "tvOS의 포커스 인터랙션"을 확인하세요.

00:02:30.000 --> 00:02:39.000
이 비디오에서는 앱에서 더 많은 콘텐츠를 집중할 수 있게 만드는 방법과 이러한 집중할 수 있는 항목의 모양을 사용자 정의하는 방법을 보여드리겠습니다.

00:02:39.000 --> 00:02:49.000
당신이 알아야 할 사이드바의 몇 가지 특별한 행동을 보여줄 것이며, 우리는 당신의 앱에서 구조를 정의하는 새로운 방법인 포커스 그룹에 대해 이야기할 것입니다.

00:02:49.000 --> 00:02:55.000
마지막에, 저는 당신이 익숙해져야 할 응답자 체인의 몇 가지 중요한 변화를 보여줄 것입니다.

00:02:55.000 --> 00:03:01.000
하지만 이제, UI에서 더 많은 요소를 집중할 수 있게 만드는 방법을 살펴봅시다.

00:03:01.000 --> 00:03:04.000
canBecomeFocused는 진실의 유일한 원천이다.

00:03:04.000 --> 00:03:08.000
그것은 UIFocusItem의 읽기 전용 속성이다.

00:03:08.000 --> 00:03:12.000
항목을 집중할 수 있도록 재정의하고 true를 반환하세요.

00:03:12.000 --> 00:03:16.000
이제, 당신은 궁금할지도 모릅니다, 초점 항목이 무엇인가요?

00:03:16.000 --> 00:03:24.000
포커스 시스템의 중추는 두 가지 프로토콜이다: UIFocusItem과 UIFocusEnvironment.

00:03:24.000 --> 00:03:28.000
FocusItems는 단순히 집중할 수 있는 항목이다.

00:03:28.000 --> 00:03:33.000
FocusEnvironments는 집중 가능한 항목의 계층 구조를 정의한다.

00:03:33.000 --> 00:03:42.000
UIView는 모든 뷰 자체에 초점을 맞출 수 있기 때문에 이 두 프로토콜을 모두 준수하지만, 초점을 맞출 수 있는 하위 뷰를 포함할 수도 있습니다.

00:03:42.000 --> 00:03:50.000
반면에 UIViewController는 비주얼 자체를 제공하지 않기 때문에 UIFocusEnvironment만 준수합니다.

00:03:50.000 --> 00:03:54.000
또한 자신의 객체에 두 프로토콜을 모두 구현할 수 있습니다.

00:03:54.000 --> 00:04:00.000
이를 통해 금속과 같은 다른 기술로 렌더링되는 콘텐츠에 초점을 맞출 수 있습니다.

00:04:00.000 --> 00:04:06.000
키보드 내비게이션의 가장 가능성이 높은 후보는 테이블이나 컬렉션 뷰의 셀이다.

00:04:06.000 --> 00:04:10.000
UIKit은 몇 가지 편리한 API를 제공하므로 서브클래스를 할 필요가 없습니다.

00:04:10.000 --> 00:04:17.000
세트를 사용하면 테이블이나 컬렉션 보기에서 초점을 맞출 수 있어 모든 셀에 초점을 맞출 수 있습니다.

00:04:17.000 --> 00:04:22.000
사이드바에서 allowsFocus는 기본적으로 참입니다.

00:04:22.000 --> 00:04:31.000
더 세밀한 제어를 위해, 대리인의 canFocusItemAt indexPath를 사용하여 각 셀의 초점성을 개별적으로 제어할 수 있습니다.

00:04:31.000 --> 00:04:38.000
이 두 방법 모두 canBecomeFocused를 재정의하지 않는 세포에만 영향을 미칠 것이다.

00:04:38.000 --> 00:04:43.000
초점 항목이 예상대로 작동하지 않는다면, 몇 가지 디버깅 도구를 사용할 수 있습니다.

00:04:43.000 --> 00:04:50.000
Lldb에서 UIFocusDebugger를 호출할 수 있습니다. CheckFocusability(항목:)를 확인하고 디버깅하려는 항목을 전달하세요.

00:04:50.000 --> 00:04:53.000
예를 들어, 당신이 집중할 수 있도록 노력하고 있는 관점.

00:04:53.000 --> 00:05:03.000
초점 시스템이 이 항목을 집중할 수 있다고 생각하지 않는 이유에 대한 설명을 제공할 것입니다.

00:05:03.000 --> 00:05:06.000
그래서, 우리는 당신의 UI를 집중할 수 있게 만드는 방법에 대해 이야기했습니다.

00:05:06.000 --> 00:05:10.000
집중된 아이템의 외관을 자세히 살펴봅시다.

00:05:10.000 --> 00:05:14.000
시스템 전체에서 일반적으로 볼 수 있는 두 가지 스타일이 있습니다.

00:05:14.000 --> 00:05:18.000
먼저, macOS의 초점 링과 유사한 헤일로 효과가 있다.

00:05:18.000 --> 00:05:22.000
사실, 이것은 Mac Catalyst에 대한 기본 효과이다.

00:05:22.000 --> 00:05:29.000
iPadOS에서는 UIFocusHaloEffect를 focusEffect 속성에 할당하여 이 효과를 사용할 수 있습니다.

00:05:29.000 --> 00:05:34.000
인수 없이 초기화되면, 시스템은 후광의 모양을 추론할 것이다.

00:05:34.000 --> 00:05:38.000
내용과 더 잘 일치하도록 모양을 사용자 정의할 수도 있습니다.

00:05:38.000 --> 00:05:48.000
예를 들어, 이미지가 둥근 모서리를 가지고 있다면, 후광은 둥근 모서리를 가지고 있어 외관과 일치해야 한다.

00:05:48.000 --> 00:05:56.000
UIFocusHaloEffect에는 둥근 rects를 위한 것을 포함하여 다양한 모양에 대한 많은 이니셜라이저가 있습니다.

00:05:56.000 --> 00:06:02.000
이 이니셜라이저를 사용하여 후광의 모양이 뷰의 내용 주위에 윤곽을 만드는지 확인하세요.

00:06:02.000 --> 00:06:07.000
헤일로 효과는 또한 뷰 계층 구조에서 위치를 제어할 수 있게 해준다.

00:06:07.000 --> 00:06:15.000
여기서 후광은 이미지의 배지 위에 렌더링되고 있지만, 후광이 이미지와 배지 사이에 있다면 더 좋아 보일 것이다.

00:06:15.000 --> 00:06:25.000
이미지 뷰를 referenceView로 지정함으로써, UIKit은 이미지 상단과 배지 아래에 후광을 렌더링합니다.

00:06:25.000 --> 00:06:31.000
참조 뷰는 뷰 계층 구조에서 후광의 상대적인 순서를 정의한다.

00:06:31.000 --> 00:06:36.000
헤일로 효과의 슈퍼뷰를 정의하는 컨테이너 뷰를 지정할 수도 있습니다.

00:06:36.000 --> 00:06:45.000
이것은 초점을 맞춘 항목의 직접적인 슈퍼뷰가 내용을 클리핑하는 경우 유용합니다.

00:06:45.000 --> 00:06:53.000
이 두 가지 모두 선택 사항이며, 추론된 외관이 당신이 기대하는 것이 아닌 경우에만 제공해야 합니다.

00:06:53.000 --> 00:07:00.000
컬렉션과 테이블 뷰의 셀은 이미지와 같이 완전히 불투명한 콘텐츠가 있을 때만 후광을 보여줘야 한다.

00:07:00.000 --> 00:07:05.000
다른 모든 경우에, 세포가 집중될 때, 그것은 강조된 것처럼 보여야 한다.

00:07:05.000 --> 00:07:14.000
이것은 배경이 앱의 색조 색상으로 바뀌어야 하며, 텍스트와 아이콘의 전경색은 좋은 대비를 위해 조정되어야 한다는 것을 의미합니다.

00:07:14.000 --> 00:07:18.000
이 하이라이트 모양은 UIFocusEffect로 사용할 수 없습니다.

00:07:18.000 --> 00:07:26.000
대신, iOS 14에 도입된 배경과 콘텐츠 구성을 사용할 때 자동으로 이 모양을 얻을 수 있습니다.

00:07:26.000 --> 00:07:30.000
이것들에 대해 더 알아보려면, "현대 셀 구성"을 보세요.

00:07:30.000 --> 00:07:37.000
배경과 콘텐츠 구성을 사용하지 않는 경우, 샘플 앱은 모든 경우에 올바른 색상을 얻는 방법을 보여줍니다.

00:07:37.000 --> 00:07:40.000
그거 꼭 확인해 봐.

00:07:40.000 --> 00:07:45.000
이제, 사용자 지정 모양을 적용하려면, 먼저 focusEffect 속성을 nil로 설정하세요.

00:07:45.000 --> 00:07:48.000
이것은 모든 시스템 스타일링을 뺀다.

00:07:48.000 --> 00:07:56.000
다음 재정의 didUpdateFocus (in: context withAnimationCoordinator :) 당신의 초점 항목에.

00:07:56.000 --> 00:08:01.000
다음에 초점을 맞춘 항목이 자기라면, 초점을 나타내기 위해 스타일링을 적용하세요.

00:08:01.000 --> 00:08:07.000
이전에 초점을 맞춘 항목이 자기라면, 초점이 맞지 않는 모습을 복원하세요.

00:08:07.000 --> 00:08:16.000
다음 또는 이전에 초점을 맞춘 항목이 이 환경과 관련이 있을 때만 didUpdateFocus(in: context)를 변경해야 합니다.

00:08:16.000 --> 00:08:26.000
이것은 이전에 초점을 맞춘 항목과 다음 초점을 맞춘 항목의 모든 조상 환경이 didUpdateFocus(in: context)에 대한 호출을 받기 때문입니다.

00:08:26.000 --> 00:08:30.000
그래서 모든 슈퍼뷰와 뷰 컨트롤러는 이 전화를 받을 것이다.

00:08:30.000 --> 00:08:37.000
이것은 부모가 자녀의 초점 변화에 반응할 수 있는 매우 유연한 구현을 가능하게 한다.

00:08:37.000 --> 00:08:44.000
이제 사이드바와 유사한 컨텍스트 변경 UI와 관련된 기능을 자세히 살펴봅시다.

00:08:44.000 --> 00:08:47.000
선택과 초점은 두 가지 다른 개념이다.

00:08:47.000 --> 00:08:56.000
그러나, 사이드바에서, 내가 초점을 움직일 때, 선택은 다음과 같다.

00:08:56.000 --> 00:09:05.000
마찬가지로, 새 셀을 탭하여 선택하면, 포커스도 새로 선택된 셀로 이동합니다.

00:09:05.000 --> 00:09:09.000
이것은 "선택은 초점을 따른다"라고 불린다.

00:09:09.000 --> 00:09:15.000
테이블이나 컬렉션 뷰에서 이 속성을 대부분의 셀에 대해 원하는 동작으로 설정하세요.

00:09:15.000 --> 00:09:24.000
개별 셀의 동작을 변경하려면, 대리인에 selectionFollowsFocus ForItemAtIndexPath를 구현하십시오.

00:09:24.000 --> 00:09:37.000
셀을 선택하면 같은 열에서 새 뷰 컨트롤러를 누르거나 경고를 표시하는 것과 같은 파괴적인 작업이 발생할 때 selectionFollowsFocus를 끕니다.

00:09:37.000 --> 00:09:44.000
예를 들어, 사진에서 "새 앨범"을 선택하면 앨범 이름을 묻는 경고가 표시됩니다.

00:09:44.000 --> 00:09:48.000
대리인을 사용할 때, 재산의 가치는 여전히 중요하다.

00:09:48.000 --> 00:09:58.000
selectionFollowsFocus를 컬렉션 보기의 전반적인 의도로 설정한 다음 대리인을 사용하여 개별 셀에 대한 특별한 동작을 표현하십시오.

00:09:58.000 --> 00:10:04.000
그 시스템은 올바른 행동을 선택할 때 두 가지 가치를 모두 고려할 것이다.

00:10:04.000 --> 00:10:11.000
이제, 앱에서 구조를 표현하는 키보드 탐색의 새로운 기능인 포커스 그룹을 살펴보겠습니다.

00:10:11.000 --> 00:10:22.000
UIKit은 계층 구조에서 포커스 그룹을 자동으로 추론하지만, 탭 키가 앱을 통해 포커스를 이동하는 방법을 사용자 정의하기 위해 명시적으로 선언할 수도 있습니다.

00:10:22.000 --> 00:10:25.000
tvOS는 방향 초점만 사용한다.

00:10:25.000 --> 00:10:33.000
Siri Remote에서 스와이프하거나 키보드의 화살표 키를 사용하여 모든 요소에 도달할 수 있습니다.

00:10:33.000 --> 00:10:42.000
반면에 iPadOS와 Mac Catalyst에는 키보드로 탐색하는 두 가지 방법이 있습니다: 화살표 키와 탭 키.

00:10:42.000 --> 00:10:49.000
tvOS와 달리, 화살표 키는 앱의 정의된 영역 내에서만 초점을 이동합니다.

00:10:49.000 --> 00:10:52.000
이 영역들은 포커스 그룹이라고 불린다.

00:10:52.000 --> 00:11:03.000
예를 들어, 위쪽 및 아래쪽 화살표 키를 사용하여 알림 목록을 탐색할 수 있습니다.

00:11:03.000 --> 00:11:11.000
목록을 탐색하려면 탭 키를 눌러 검색 필드에 초점을 맞춘 다음 탭을 다시 눌러 목록으로 이동할 수 있습니다.

00:11:11.000 --> 00:11:18.000
탭을 한 번 더 누르면, 포커스 루프가 알림으로 돌아갑니다.

00:11:18.000 --> 00:11:28.000
미리 알림, 검색 필드 및 목록은 각각 포커스 그룹이며, 탭 키는 그들 사이에서 초점을 이동합니다.

00:11:28.000 --> 00:11:33.000
초점이 그룹으로 이동하면, 그 그룹 내에서 집중할 항목을 선택합니다.

00:11:33.000 --> 00:11:39.000
그 항목은 그룹의 주요 항목이라고 불린다.

00:11:39.000 --> 00:11:42.000
그룹의 주요 항목은 바뀔 수 있다.

00:11:42.000 --> 00:11:46.000
예를 들어, 여기서 나는 두 번째 알림에 집중한다.

00:11:46.000 --> 00:11:59.000
포커스 시스템은 내가 이 그룹에서 전환할 때 이것을 기억하고, 내가 알림으로 돌아올 때, 이 항목이 이제 그룹의 주요 항목이기 때문에 초점은 다시 두 번째 항목으로 이동합니다.

00:11:59.000 --> 00:12:04.000
탭 키는 각 그룹의 주요 항목을 연결하고 그들 사이에서 초점을 이동합니다.

00:12:04.000 --> 00:12:08.000
이것은 탭 루프라고 불린다.

00:12:08.000 --> 00:12:12.000
일부 환경은 기본적으로 자체 포커스 그룹을 정의한다.

00:12:12.000 --> 00:12:19.000
여기에는 컬렉션 및 테이블 뷰와 같은 스크롤 보기와 텍스트 필드 및 텍스트 보기와 같은 텍스트 입력 클래스가 포함됩니다.

00:12:19.000 --> 00:12:27.000
환경이 자체 그룹을 정의하지 않으면, 부모 환경의 그룹, 일반적으로 슈퍼뷰 또는 뷰 컨트롤러를 상속합니다.

00:12:27.000 --> 00:12:33.000
예를 들어, 기본적으로, 모든 셀은 자동으로 컬렉션 뷰 그룹에 속한다.

00:12:33.000 --> 00:12:38.000
같은 그룹에 속함으로써, 화살표 키로 셀 사이를 탐색할 수 있습니다.

00:12:38.000 --> 00:12:44.000
포커스 그룹을 직접 정의하려면, 모든 뷰 또는 뷰 컨트롤러에 포커스 그룹 식별자를 할당하십시오.

00:12:44.000 --> 00:12:52.000
두 환경이 명시적으로 또는 상속에 의해 동일한 식별자를 공유할 때, 그들은 같은 그룹의 일부이다.

00:12:52.000 --> 00:12:58.000
그룹의 기본 항목을 사용자 정의하려면, 해당 항목에 포커스 그룹 우선 순위를 지정하십시오.

00:12:58.000 --> 00:13:02.000
이것은 항목이 그룹 내에서 얼마나 중요한지 정의한다.

00:13:02.000 --> 00:13:08.000
우선 순위가 가장 높은 눈에 보이는 항목은 그룹의 주요 항목이다.

00:13:08.000 --> 00:13:28.000
기본적으로, 시스템은 미리 정의된 우선 순위 중 하나를 할당합니다: 무시, 기본 우선 순위; 이전에 집중; 우선 순위 지정, 선택한 셀과 같은 항목보다 더 중요하다는 것을 나타냅니다; 그리고 현재 초점, 가능한 가장 높은 우선 순위입니다.

00:13:28.000 --> 00:13:35.000
항목의 우선 순위를 시스템에서 제공하는 우선 순위 이하로 낮출 수 없다는 것을 이해하는 것이 중요합니다.

00:13:35.000 --> 00:13:40.000
대신, 당신은 다른 항목의 우선 순위를 높여야 합니다.

00:13:40.000 --> 00:13:49.000
예를 들어, 셀에 .previouslyFocused보다 높은 우선 순위를 할당하면, 그 셀은 그 그룹의 마지막 초점 항목보다 더 중요해질 것이다.

00:13:49.000 --> 00:14:00.000
따라서 이 사용자 지정 셀과 이전에 초점을 맞춘 셀이 모두 보이더라도, 사용자 지정 셀은 우선 순위가 높기 때문에 주요 항목이 될 것입니다.

00:14:00.000 --> 00:14:04.000
그래서, 이제 당신은 당신의 아이템을 함께 그룹화하는 방법을 알게 되었습니다.

00:14:04.000 --> 00:14:07.000
다음으로, 이 그룹들이 어떻게 분류되는지에 집중합시다.

00:14:07.000 --> 00:14:10.000
여기서, 우리는 알림을 다시 본다.

00:14:10.000 --> 00:14:17.000
앞서 언급했듯이, 각 테이블과 컬렉션 뷰, 그리고 각 텍스트 필드는 자체 그룹을 정의합니다.

00:14:17.000 --> 00:14:29.000
전에 보았듯이, 탭 키를 계속 누를 때, 초점은 검색 필드에서 사이드바의 목록으로 이동한 다음 오른쪽의 알림으로 이동합니다.

00:14:29.000 --> 00:14:31.000
이것이 UIKit이 기본적으로 하는 것이다.

00:14:31.000 --> 00:14:44.000
그러나, 이런 종류의 컨테이너 뷰를 직접 구축했다면, 모든 그룹이 읽기 순서로 정렬되어 위에서 아래로 후행으로 이어지기 때문에 초점이 검색 필드에서 바로 알림으로 이동할 것입니다.

00:14:44.000 --> 00:14:50.000
포커스 시스템은 사이드바가 뚜렷한 열이라는 것을 모른다.

00:14:50.000 --> 00:14:56.000
검색 필드와 목록이 하나의 연속 블록으로 정렬되도록 하기 위해, 공통 상위 그룹에 넣을 수 있습니다.

00:14:56.000 --> 00:15:02.000
이것은 사이드바의 컨테이너 보기에서 포커스 그룹 식별자를 정의함으로써 이루어진다.

00:15:02.000 --> 00:15:14.000
이 새로운 그룹에는 포커스 가능한 항목이 직접 포함되어 있지 않지만, 탭 루프는 미리 알림 목록으로 이동하기 전에 검색 필드 그룹에서 목록 그룹으로 이동합니다.

00:15:14.000 --> 00:15:20.000
많은 표준 UIKit 프레젠테이션은 이미 이러한 중간 그룹을 제공한다.

00:15:20.000 --> 00:15:25.000
사용자 지정 컨테이너 보기의 경우, 공통 조상에 대한 자신만의 focusGroupIdentifier를 선언하십시오.

00:15:25.000 --> 00:15:30.000
포커스 그룹은 앱의 시각적 구조를 정의하는 쉬운 방법입니다.

00:15:30.000 --> 00:15:33.000
탭 루프에 대한 고정 주문을 정의할 필요가 없습니다.

00:15:33.000 --> 00:15:44.000
대신, 시스템은 포커스 그룹을 사용하여 읽기 방향, 레이아웃 및 가시성을 고려한 탭 루프 순서를 도출하여 일관된 경험을 제공합니다.

00:15:44.000 --> 00:15:48.000
앱에서 포커스 그룹을 사용자 정의할 때, UIFocusDebugger는 당신의 친구입니다.

00:15:48.000 --> 00:15:56.000
checkFocusGroupTree(환경:)를 호출하면 전달된 환경에서 시작하여 포커스 그룹 구조를 인쇄합니다.

00:15:56.000 --> 00:16:02.000
포커스 시스템 자체를 통과하여 현재 모든 그룹을 볼 수도 있습니다.

00:16:02.000 --> 00:16:07.000
이제, 이 텍스트 구조는 도움이 되지만, 디버깅 도구가 하나 더 있습니다.

00:16:07.000 --> 00:16:10.000
내가 포커스 그룹과 리마인더와 함께 보여준 스크린샷을 기억하니?

00:16:10.000 --> 00:16:13.000
당신은 실제로 당신의 앱에서 이것을 라이브로 얻을 수 있습니다.

00:16:13.000 --> 00:16:21.000
활성화되면, 포커스 루프 디버거는 옵션 키를 길게 누를 때 앱의 탭 루프 순서를 시각화합니다.

00:16:21.000 --> 00:16:26.000
그리고 옵션과 컨트롤을 누를 때, 포커스 그룹을 시각화할 수 있습니다.

00:16:26.000 --> 00:16:32.000
이 모드에서, 그룹의 주요 항목은 점선으로 표시됩니다.

00:16:32.000 --> 00:16:37.000
그것을 활성화하려면, Xcode에서 계획 설정으로 이동하여 "실행"을 선택한 다음 "인트"를 선택하십시오.

00:16:37.000 --> 00:16:45.000
그런 다음 실행 인수 -UIFocusLoopDebuggerEnabled YES를 추가하고, 그 앞에 대시를 두는 것을 잊지 마세요.

00:16:45.000 --> 00:16:50.000
이제, Xcode에서 앱을 실행할 때마다, 이 디버그 오버레이는 앱에서 바로 사용할 수 있습니다.

00:16:50.000 --> 00:16:54.000
이것은 iPadOS와 Mac Catalyst에 초점을 맞추는 기본 사항을 다룹니다.

00:16:54.000 --> 00:17:01.000
키보드 내비게이션을 다룰 주제가 하나 더 있는데, 그것은 응답자 체인이다.

00:17:01.000 --> 00:17:16.000
응답자 체인과 포커스 시스템 모두 키보드 입력을 다루기 때문에, UIKit은 이러한 시스템을 가능한 한 많이 동기화하여 집중된 항목이 항상 첫 번째 응답자 안에 있거나 첫 번째 응답자 자체인지 확인합니다.

00:17:16.000 --> 00:17:21.000
텍스트 필드와 컬렉션 뷰 셀이 있는 단순화된 뷰 계층 구조를 살펴봅시다.

00:17:21.000 --> 00:17:29.000
현재, 텍스트 필드는 솔리드 링으로 표시된 초점을 맞추고 있으며, 점선 링으로 표시된 첫 번째 응답자이기도 합니다.

00:17:29.000 --> 00:17:37.000
초점이 이 컬렉션 보기 셀로 이동하면, UIKit은 또한 첫 번째 응답자를 이 셀로 이동하려고 시도합니다.

00:17:37.000 --> 00:17:46.000
이 셀이 canBecomeFirstResponder에서 false를 반환하면, 시스템은 응답자 체인을 반복하여 true를 반환하는 응답자를 찾습니다.

00:17:46.000 --> 00:17:51.000
이 경우, 그 응답자는 셀의 뷰 컨트롤러이다.

00:17:51.000 --> 00:17:54.000
그 반대도 사실이라는 점에 유의하세요.

00:17:54.000 --> 00:18:01.000
첫 번째 응답자가 바뀌면, 초점 시스템은 그 응답자 내부에서 새로운 초점 가능한 항목을 찾으려고 시도할 것이다.

00:18:01.000 --> 00:18:11.000
첫 번째 응답자와 집중된 항목 사이의 이러한 관계를 통해, 주요 이벤트는 항상 집중된 항목으로 전달되고 거기에서 응답자 체인을 위로 이동합니다.

00:18:11.000 --> 00:18:14.000
이것은 흥미로운 새로운 행동을 가능하게 한다.

00:18:14.000 --> 00:18:22.000
예를 들어, 셀이 키 명령에 응답하고 집중되면, 키 명령이 해당 셀로 전달됩니다.

00:18:22.000 --> 00:18:26.000
이것을 사용하는 방법은, 샘플 앱을 살펴보세요.

00:18:26.000 --> 00:18:32.000
iPadOS 15용 앱을 업데이트할 때, becomeFirstResponder를 어디에 호출하는지 의식하세요.

00:18:32.000 --> 00:18:38.000
응답자 체인과 초점이 동기화되기 때문에, 첫 번째 응답자를 변경하면 초점이 업데이트됩니다.

00:18:38.000 --> 00:18:41.000
이것은 당신의 사용자에게 매우 방해가 될 수 있습니다.

00:18:41.000 --> 00:18:47.000
특히 초점 업데이트에 대한 응답으로 becomeFirstResponder를 호출하는 것을 피하는 것이 가장 좋습니다.

00:18:47.000 --> 00:18:51.000
포커스 시스템은 모든 앱에서 일관된 경험을 제공한다.

00:18:51.000 --> 00:18:55.000
이렇게 하려면, 특정 키 명령에 대한 우선 순위가 필요하다.

00:18:55.000 --> 00:19:03.000
앱이 탭이나 아래쪽 화살표와 같은 키 명령을 사용하는 경우, iOS 15 SDK로 컴파일할 때 해당 키 명령은 더 이상 작동하지 않습니다.

00:19:03.000 --> 00:19:08.000
이 키 명령이 자신만의 사용자 지정 키보드 내비게이션을 만드는 데 사용되는 경우, 그대로 둘 수 있습니다.

00:19:08.000 --> 00:19:13.000
그것은 이전 버전에서 작동할 것이며, iPadOS 15에서는 포커스 시스템이 인수할 것이다.

00:19:13.000 --> 00:19:16.000
그렇지 않으면, 이 키 명령을 다시 매핑하세요.

00:19:16.000 --> 00:19:26.000
이 키 명령을 계속 사용하고 싶다면, 키보드 탐색이 중단되지 않는지 확인한 다음, wantsPriorityOverSystemBehavior를 true로 설정하십시오.

00:19:26.000 --> 00:19:33.000
키보드 단축키 개선에 대해 더 알고 싶다면, "iPad 앱을 한 단계 끌어올리세요"를 확인하세요.

00:19:33.000 --> 00:19:47.000
pressesBegan, pressesChanged, pressesEnded 및 pressesCancelled를 구현하여 수동으로 프레스를 처리하는 경우, 이러한 모든 방법을 구현하고 처리하지 않는 프레스에 대해 매우 일관되게 호출하십시오.

00:19:47.000 --> 00:19:53.000
iPadOS 15와 Mac Catalyst의 키보드 내비게이션은 사용자를 위한 강력한 도구입니다.

00:19:53.000 --> 00:19:58.000
훌륭한 사용자 경험을 제공하기 위해 컬렉션과 테이블 뷰에 집중할 수 있도록 하세요.

00:19:58.000 --> 00:20:02.000
키보드 내비게이션과 충돌하지 않도록 키 명령을 업데이트하세요.

00:20:02.000 --> 00:20:11.000
또한, 훌륭한 검색 경험 구축, 사용자 지정 선택, 초점 가이드 등과 같은 몇 가지 기능을 더 보여주는 샘플 앱을 확인하세요.

00:20:11.000 --> 00:20:16.000
iPadOS 15에서 키보드 내비게이션으로 무엇을 만들고 있는지 빨리 보고 싶어요.

00:20:16.000 --> 00:20:17.000
봐줘서 고마워.

00:20:17.000 --> 23:59:59.000
[타격적인 음악].

