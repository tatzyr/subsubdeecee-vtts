WEBVTT

00:00:00.000 --> 00:00:14.000
안녕. 저는 애플 디자인 팀의 디자이너인 카밀 무셋입니다.

00:00:14.000 --> 00:00:22.000
이 세션에서는 앱에 오디오 및 햅틱 피드백을 추가하기 위한 실용적인 단계와 디자인 고려 사항을 안내해 드리겠습니다.

00:00:22.000 --> 00:00:32.000
역사적으로, 애니메이션, 사운드 및 햅틱을 포함한 풍부한 앱 경험을 제공하는 것은 디자인과 엔지니어링 관점에서 꽤 어려웠다.

00:00:32.000 --> 00:00:39.000
iPhone의 Core Haptics를 사용하면, 이제 실제처럼 보이고, 들리고, 느껴지는 마법의 순간을 더 쉽게 만들 수 있습니다.

00:00:39.000 --> 00:00:47.000
이러한 기술을 설명하고 연습하기 위해, 저는 HapticBounce라는 이전 코드 샘플 프로젝트에서 파생된 iOS 앱을 사용할 것입니다.

00:00:47.000 --> 00:00:56.000
미니 게임처럼 만들고 함께 잘 작동하는 시각, 사운드 및 햅틱을 디자인할 수 있는 캔버스를 제공하기 위해 몇 가지 추가 사항이 추가되었습니다.

00:00:56.000 --> 00:01:01.000
새로운 데모는 HapticRicochet이라고 불린다.

00:01:01.000 --> 00:01:09.000
햅틱리코쳇은 아이폰에서 살아나고 아이폰의 방향에 따라 움직이는 공의 이야기이다.

00:01:09.000 --> 00:01:18.000
공은 당신이 물리적 세계에서 기대하는 것처럼 오디오와 햅틱 피드백으로 전화기의 벽에서 굴러가고 튕겨진다.

00:01:18.000 --> 00:01:22.000
네가 공을 두드리면...

00:01:22.000 --> 00:01:23.000
그것은 더 큰 공으로 자란다.

00:01:23.000 --> 00:01:28.000
한 번 더 탭하면, 방패가 공에 추가됩니다.

00:01:28.000 --> 00:01:37.000
그 방패는 벽과 충돌할 때마다 손상되고 고갈되며, 궁극적으로 공이 폭발하고 죽는다.

00:01:37.000 --> 00:01:43.000
우리는 또한 배경의 아무 곳이나 탭하여 활성화하거나 비활성화하는 텍스처를 배경에 추가했습니다.

00:01:43.000 --> 00:01:55.000
이 세션에서, 나는 두 가지 메커니즘에만 집중할 것이다: 방패를 추가하고 롤링 텍스처를 가능하게 하는 것.

00:01:55.000 --> 00:01:59.000
내가 더 진행하기 전에, 의제를 검토해 보자.

00:01:59.000 --> 00:02:04.000
나는 먼저 우리가 애플 내에서 자주 사용하는 주요 오디오와 햅틱 디자인 원칙을 검토할 것이다.

00:02:04.000 --> 00:02:14.000
풍부한 멀티모달 피드백을 가능하게 하는 프레임워크인 Core Haptics에 대한 간략한 소개로 후속 조치를 취할 것입니다.

00:02:14.000 --> 00:02:26.000
세션의 핵심은 Xcode에서 HapticRicochet 프로젝트를 검토하고 방패와 롤링 텍스처 순간에 대한 피드백을 추가, 설계 및 개선하는 방법을 볼 것입니다.

00:02:26.000 --> 00:02:34.000
멀티모달 경험을 설계하는 것은 어려울 수 있지만, 잘 수행되면 사용자 경험을 진정으로 향상시킨다.

00:02:34.000 --> 00:02:38.000
그것은 마법적이고, 즐겁고, 딱 맞는 느낌이다.

00:02:38.000 --> 00:02:41.000
한 가지 예는 iOS의 손전등 버튼이다.

00:02:41.000 --> 00:02:50.000
그것은 시각적 애니메이션, 사운드 및 햅틱 피드백을 명확하고 정확하며 간결한 통합 경험으로 결합합니다.

00:02:50.000 --> 00:02:56.000
그것은 디자인과 엔지니어링 노력을 포함하는 반복적이고 창의적인 과정이다.

00:02:56.000 --> 00:03:07.000
일반적으로 당신은 햅틱을 듣기보다는 느낄 것이지만, 시연 목적으로, 우리는 이 햅틱을 소리로 변환하여 이 비디오에서 들을 수 있습니다.

00:03:07.000 --> 00:03:13.000
앱 경험에서 마법과 즐거움을 얻기 위해, 작업을 안내하는 세 가지 원칙이 있습니다.

00:03:13.000 --> 00:03:18.000
그들은 내부적으로 우리에게 유용했고, 나는 그들이 당신을 도울 수 있기를 바랍니다.

00:03:18.000 --> 00:03:25.000
그것들은 인과관계, 조화, 그리고 유용성이다.

00:03:25.000 --> 00:03:29.000
피드백이 유용하려면, 무엇이 그것을 일으켰는지 분명해야 한다.

00:03:29.000 --> 00:03:33.000
그것은 피드백의 출처나 원인을 명확하고 명백하게 만드는 것에 관한 것이다.

00:03:33.000 --> 00:03:39.000
가장 간단한 형태는 공이 벽과 전화기의 경계에 부딪힐 때 피드백을 받는 것이다.

00:03:39.000 --> 00:03:43.000
그것은 관련된 소리와 햅틱과의 충돌이다.

00:03:43.000 --> 00:03:49.000
마찬가지로, 햅틱 롤링 텍스처는 배경 비주얼이 표시될 때만 표시됩니다.

00:03:49.000 --> 00:03:54.000
당신은 그리드가 그 감각을 만들었다는 것을 이해합니다.

00:03:54.000 --> 00:04:05.000
우리의 두 번째 원칙인 조화는 우리의 감각이 일관성 있고, 일관성이 있으며, 주어진 경험을 만들기 위해 함께 일할 때 가장 잘 작동한다는 것을 강조한다.

00:04:05.000 --> 00:04:10.000
그것은 보이는 방식과 들리는 방식을 느껴야 한다.

00:04:10.000 --> 00:04:13.000
작은 공은 작게 느껴지고 작게 들려야 한다.

00:04:13.000 --> 00:04:20.000
큰 공은 진짜 여분의 질량을 가지고 있는 것처럼 들리고 더 무겁게 느껴져야 한다.

00:04:20.000 --> 00:04:27.000
우리의 세 번째 원칙인 유틸리티는 당신의 앱 경험에 명확한 가치를 제공하는 것입니다.

00:04:27.000 --> 00:04:30.000
할 수 있다고 해서 피드백을 추가하지 마세요.

00:04:30.000 --> 00:04:34.000
그것은 빠르게 압도적이고 불쾌해질 수 있다.

00:04:34.000 --> 00:04:41.000
공의 성장과 같은 앱에서 중요한 순간을 위해 햅틱과 오디오를 예약하세요.

00:04:41.000 --> 00:04:44.000
다음으로, Core Haptics를 검토해 봅시다.

00:04:44.000 --> 00:04:51.000
Core Haptics는 앱에 대한 맞춤형 햅틱과 오디오 피드백을 디자인할 수 있는 iPhone 및 iOS의 기술입니다.

00:04:51.000 --> 00:05:01.000
엔진, 플레이어, 패턴 및 이벤트의 네 가지 기본 요소를 중심으로 한 강력한 API입니다.

00:05:01.000 --> 00:05:03.000
그것들을 간략하게 검토해 봅시다.

00:05:03.000 --> 00:05:06.000
최고 수준의 요소는 엔진이다.

00:05:06.000 --> 00:05:10.000
그것은 전화기의 물리적 액추에이터에 대한 우리의 링크입니다.

00:05:10.000 --> 00:05:12.000
다음으로 우리는 선수가 있어.

00:05:12.000 --> 00:05:17.000
그것은 시작, 정지 및 일시 정지와 같은 재생 제어에 사용됩니다.

00:05:17.000 --> 00:05:20.000
그리고 우리는 패턴과 사건이 있다.

00:05:20.000 --> 00:05:23.000
패턴은 시간이 지남에 따라 일어나는 사건의 모음이다.

00:05:23.000 --> 00:05:27.000
이벤트는 경험을 지정하는 데 사용되는 빌딩 블록이다.

00:05:27.000 --> 00:05:29.000
많은 종류의 행사가 있다.

00:05:29.000 --> 00:05:33.000
가장 흔한 것들은 일시적이고 연속적이다.

00:05:33.000 --> 00:05:37.000
실질적으로, 여기 사건으로 만들어진 패턴의 구체적인 예가 있다.

00:05:37.000 --> 00:05:45.000
.Ahap 파일에 지정된 햅틱 패턴을 보기 위해 MacOS 12에서 사용할 수 있는 QuickLook Visualizer를 사용하고 있습니다.

00:05:45.000 --> 00:05:49.000
AHAP는 Apple Haptic Audio Pattern의 약자이다.

00:05:49.000 --> 00:05:51.000
다시 한 번 보자.

00:05:51.000 --> 00:05:59.000
파인더에서 .ahap 파일을 선택한 다음, 키보드의 스페이스 바를 누르세요.

00:05:59.000 --> 00:06:03.000
이제 패턴의 항목을 자세히 살펴봅시다.

00:06:03.000 --> 00:06:08.000
파란색의 첫 번째 사건은 일시적인 사건이다.

00:06:08.000 --> 00:06:14.000
오렌지색의 두 번째 행사는 연속적인 행사이다.

00:06:14.000 --> 00:06:16.000
그 패턴은 JSON 구문을 사용하고 있다.

00:06:16.000 --> 00:06:21.000
일시적인 이벤트는 이 코드에서 생성된다.

00:06:21.000 --> 00:06:25.000
이것은 코어 햅틱스에 대한 우리의 개요를 요약한다.

00:06:25.000 --> 00:06:29.000
더 자세한 정보는 온라인으로 문서를 확인하세요.

00:06:29.000 --> 00:06:35.000
이 세션의 연습을 위해, 우리는 로딩, 변경 및 플레이 패턴에 집중할 것입니다.

00:06:35.000 --> 00:06:37.000
Xcode와 HapticRicochet을 위한 시간이다.

00:06:37.000 --> 00:06:42.000
HapticRicochet-Start 폴더에서 프로젝트를 여세요.

00:06:42.000 --> 00:06:46.000
iPhone에서 프로젝트를 컴파일하고 실행할 수 있는지 확인하세요.

00:06:46.000 --> 00:06:49.000
시뮬레이터는 햅틱에서 작동하지 않는다.

00:06:49.000 --> 00:06:53.000
햅틱을 느끼려면 실제 iPhone 8 이상이 필요합니다.

00:06:53.000 --> 00:06:58.000
전화기가 음소거되지 않고 볼륨 레벨이 높은지 확인하세요.

00:06:58.000 --> 00:07:06.000
그 계획은 ViewController 파일과 .ahap, .wav 및 .png 자산 파일로 작업하는 것이다.

00:07:06.000 --> 00:07:10.000
게임과 모든 상호 작용에 익숙해지세요.

00:07:10.000 --> 00:07:15.000
공을 두드리고, 배경을 두드리고, 전화기를 기울일 수 있다는 것을 기억하세요.

00:07:15.000 --> 00:07:24.000
준비가 되면, 방패 변형에 뛰어들자.

00:07:24.000 --> 00:07:30.000
나는 조화 원리를 사용하여 방패 순간을 해부하고 디자인 세부 사항을 볼 것이다.

00:07:30.000 --> 00:07:38.000
시각적으로, 우리는 지속 시간이 500밀리초이고 오른쪽 상단에 이렇게 보이는 애니메이션이 있습니다.

00:07:38.000 --> 00:07:43.000
햅틱의 경우, 우리는 새로운 상태로의 변화를 강조하고 싶을 것이다.

00:07:43.000 --> 00:07:51.000
오디오의 경우, 우리는 에너지의 이득과 견고하고 보호되는 최종 상태를 전달하고 싶습니다.

00:07:51.000 --> 00:07:56.000
이 관행을 위해, 우리는 다른 자질을 전달하는 두 가지 다른 자산을 만들었습니다.

00:07:56.000 --> 00:08:00.000
우리는 그것들을 살펴보고 방패 경험에 가장 적합한 것이 무엇인지 볼 것이다.

00:08:00.000 --> 00:08:06.000
하지만 먼저, 우리가 방패에 대한 피드백을 어떻게 로드하고 재생하는지 살펴봅시다.

00:08:06.000 --> 00:08:10.000
기능적으로, 코드는 두 부분으로 나뉜다.

00:08:10.000 --> 00:08:18.000
우리는 먼저 빌딩 블록을 초기화하고, 두 번째로, 그 방패 변환을 재생하고 렌더링하는 기능을 초기화합니다.

00:08:18.000 --> 00:08:24.000
initializeShieldHaptics 함수에서, 나는 먼저 ShieldTransient 파일에서 패턴을 만든다.

00:08:24.000 --> 00:08:29.000
그런 다음 그 패턴으로 쉴드플레이어를 만드세요.

00:08:29.000 --> 00:08:33.000
피드백은 이 시점에서 플레이할 준비가 되어 있다.

00:08:33.000 --> 00:08:38.000
함수 쉴드는 변환이 렌더링될 준비가 되었을 때 호출된다.

00:08:38.000 --> 00:08:44.000
햅틱 및 오디오 피드백은 shieldPlayer에서 startPlayer를 호출하여 재생됩니다.

00:08:44.000 --> 00:08:48.000
그것은 우리가 프로젝트에서 자주 재사용하는 편의 기능이다.

00:08:48.000 --> 00:08:52.000
그런 다음 시각적 애니메이션이 재생됩니다.

00:08:52.000 --> 00:08:56.000
이제 ShieldTransient 자산을 살펴봅시다.

00:08:56.000 --> 00:09:00.000
그것은 우리가 햅틱과 오디오 피드백에 대해 가지고 있는 경험을 정의한다.

00:09:00.000 --> 00:09:08.000
햅틱은 이렇게 느껴야 한다: 그리고 오디오는 이렇게 들려야 한다: 나는 그 소리를 좋아한다.

00:09:08.000 --> 00:09:12.000
그것은 공에 대한 견고함과 보호의 이득처럼 느껴진다.

00:09:12.000 --> 00:09:14.000
다시 들어보자.

00:09:14.000 --> 00:09:17.000
문제는 햅틱과 소리가 정말 일치하지 않는다는 것이다.

00:09:17.000 --> 00:09:19.000
햅틱은 세 개의 과도기로 이루어져 있다...

00:09:19.000 --> 00:09:23.000
오디오가 지속적이고 점진적인 동안.

00:09:23.000 --> 00:09:26.000
두 감각 사이에는 조화가 없다.

00:09:26.000 --> 00:09:33.000
ShieldContinuous라고 불리는 대체 자산을 살펴봅시다.

00:09:33.000 --> 00:09:35.000
그것은 지속적인 햅틱 진행을 가지고 있다...

00:09:35.000 --> 00:09:38.000
그리고 부패하는 흔들리는 오디오.

00:09:38.000 --> 00:09:44.000
다시 말하지만, 나는 햅틱과 오디오가 실제로 일치하지 않는다는 것을 느끼고 들을 수 있다.

00:09:44.000 --> 00:09:46.000
하지만 난 햅틱이 좋아.

00:09:46.000 --> 00:09:50.000
방패를 얻기 위한 좋은 변화처럼 느껴진다.

00:09:50.000 --> 00:09:52.000
햅틱을 다시 들어보자.

00:09:52.000 --> 00:10:00.000
내 계획은 그 지속적인 햅틱 패턴을 사용하지만 첫 번째 자산의 소리를 사용하는 것이다.

00:10:00.000 --> 00:10:08.000
나는 두 개의 자산을 사용하고 첫 번째 패턴에서 내가 좋아하는 오디오를 가져다가 두 번째 연속 햅틱 패턴으로 사용할 것이다.

00:10:08.000 --> 00:10:11.000
내가 실제로 그걸 어떻게 하는지 보자.

00:10:11.000 --> 00:10:18.000
먼저 텍스트 편집기에서 ShieldContinuous.ahap 파일을 열고 파일 끝까지 스크롤합니다.

00:10:18.000 --> 00:10:26.000
햅틱으로 재생할 오디오 파일을 지정하는 이 이벤트를 볼 수 있습니다.

00:10:26.000 --> 00:10:31.000
오디오 파일의 파일 이름과 함께 EventType AudioCustom을 사용하고 있습니다.

00:10:31.000 --> 00:10:38.000
ParameterValue를 사용하여 볼륨을 지정하고 조정할 수 있습니다.

00:10:38.000 --> 00:10:49.000
선호하는 오디오를 사용하려면, 파일 참조를 ShieldB.wav에서 ShieldA.wav로 변경합니다.

00:10:49.000 --> 00:10:52.000
수정된 최종 자산은 다음과 같다.

00:10:52.000 --> 00:10:55.000
촉감...

00:10:55.000 --> 00:10:58.000
그리고 오디오는 일관성이 있어.

00:10:58.000 --> 00:11:01.000
그들은 서로를 지지하고 강화한다.

00:11:01.000 --> 00:11:05.000
결합된 오디오와 햅틱을 함께 들어봅시다.

00:11:05.000 --> 00:11:11.000
필요한 마지막 변화는 내가 방금 만든 최종 자산을 사용하는 것이다.

00:11:11.000 --> 00:11:23.000
InitializeShieldHaptics 기능으로 돌아가서 ShieldTransient를 사용하는 대신 ShieldContinuous 파일을 지정하고 로드합니다.

00:11:23.000 --> 00:11:26.000
Voilà! 여기 있어.

00:11:26.000 --> 00:11:29.000
나는 이제 장치에서 컴파일하고 실행한다.

00:11:29.000 --> 00:11:36.000
나는 딱 맞는 느낌의 조화로운 방패 변형으로 끝난다.

00:11:36.000 --> 00:11:43.000
햅틱, 오디오 및 시각은 공에 방패 보호의 추가를 전달하기 위해 함께 잘 작동하고 있다.

00:11:43.000 --> 00:11:49.000
다음으로, 앱에 롤링 텍스처를 추가하는 방법을 검토하겠습니다.

00:11:49.000 --> 00:11:55.000
햅틱리코쳇은 롤링 텍스처 없이 벽과의 충돌로 시작한다.

00:11:55.000 --> 00:12:03.000
배경을 탭하면, 물방울 무늬 질감이 나타나고, 공이 굴러갈 때 추가적인 햅틱 피드백을 받는다.

00:12:03.000 --> 00:12:09.000
우리는 앞으로 두 가지 문제를 겪고 해결할 것이며, 하나는 기술적인 성격이다.

00:12:09.000 --> 00:12:15.000
다른 하나는 경험의 디자인과 관련이 있다.

00:12:15.000 --> 00:12:22.000
initializeTextureHaptics 함수에서, 나는 먼저 텍스처 ahap 파일에서 패턴을 만든다.

00:12:22.000 --> 00:12:26.000
그런 다음 그 패턴으로 쉴드플레이어를 만듭니다.

00:12:26.000 --> 00:12:32.000
updateTexturePlayer 함수는 텍스처가 활성화된 모든 프레임에서 호출됩니다.

00:12:32.000 --> 00:12:37.000
우리는 공의 속도에 따라 햅틱의 강도를 업데이트하기 위해 그것을 사용합니다.

00:12:37.000 --> 00:12:40.000
결과를 봅시다.

00:12:40.000 --> 00:12:45.000
내가 알아차린 문제는 질감이 몇 초 후에 사라지는다는 것이다.

00:12:45.000 --> 00:12:50.000
난 그게 왜 이런 일이 일어나는지 알아.

00:12:50.000 --> 00:12:53.000
그 행동을 고치는 쉬운 방법이 있다.

00:12:53.000 --> 00:13:00.000
우리가 가진 문제는 .ahap 파일의 텍스처가 햅틱 콘텐츠가 2초밖에 없다는 것이다.

00:13:00.000 --> 00:13:05.000
그 행동을 바꾸고 끝없이 놀게 하는 방법이 있다.

00:13:05.000 --> 00:13:14.000
패턴 플레이어의 고급 변형은 일시 정지, 재개 및 기타 콜백과 같은 추가 기능을 제공합니다.

00:13:14.000 --> 00:13:21.000
HapticRicochet에서, 나는 루핑 기능을 위해서만 고급 패턴 플레이어를 사용할 것이다.

00:13:21.000 --> 00:13:24.000
이 변화를 통해 걸어봅시다.

00:13:24.000 --> 00:13:32.000
먼저 texturePlayer의 선언을 CHHapticAdvancedPatternPlayer 유형으로 수정합니다.

00:13:32.000 --> 00:13:38.000
그런 다음 같은 텍스처 파일을 사용할 것이지만, 이번에는 AdvancedPlayer를 만들 것입니다.

00:13:38.000 --> 00:13:43.000
이제 AdvancedPlayer에서 반복 동작을 활성화할 수 있습니다.

00:13:43.000 --> 00:13:47.000
좋은 점은 나머지 코드가 모두 동일하게 유지된다는 것이다.

00:13:47.000 --> 00:13:51.000
결과를 봅시다.

00:13:51.000 --> 00:14:00.000
롤링 텍스처는 이번에는 명백한 일시 정지나 솔기 없이 루프에서 재생됩니다.

00:14:00.000 --> 00:14:09.000
내가 다루고 싶은 두 번째 문제는 질감의 모양과 느낌과 관련이 있다.

00:14:09.000 --> 00:14:16.000
우리는 우리의 햅틱 패턴 자산이 2초에 걸쳐 거의 100개의 항목으로 꽤 밀도가 높다는 것을 알 수 있다.

00:14:16.000 --> 00:14:21.000
우리의 시각적 배경 질감은 몇 개의 점만 있는 매우 거칠다.

00:14:21.000 --> 00:14:29.000
나는 점 패턴이 더 조밀하다면 경험이 개선되고 더 현실적일 것이라고 생각한다.

00:14:29.000 --> 00:14:35.000
이 파일의 Fine 버전을 사용하도록 backgroundImage에 사용한 리소스 파일을 변경하겠습니다.

00:14:35.000 --> 00:14:39.000
앱을 실행하면, 새로운 밀도가 높은 텍스처가 사용될 것이다.

00:14:39.000 --> 00:14:41.000
한 번 보자.

00:14:41.000 --> 00:14:57.000
문제나 문제가 발생하면, 우리는 HapticRicochet-Final 폴더에 프로젝트의 최종 버전을 포함시켰습니다.

00:14:57.000 --> 00:15:06.000
이 세션 동안 우리가 만든 모든 변경 사항이 있으며, iPhone에서 컴파일하고 느낄 준비가 되어 있습니다.

00:15:06.000 --> 00:15:10.000
여전히 자신만의 햅틱 경험을 탐구하고 디자인할 수 있는 공간이 있습니다.

00:15:10.000 --> 00:15:18.000
나는 당신이 게임의 다른 변화를 살펴보고 그들 자신을 위한 새로운 햅틱과 사운드 피드백을 디자인하도록 초대합니다.

00:15:18.000 --> 00:15:26.000
요약하자면, 앱에서 훌륭한 멀티모달 경험을 디자인하도록 안내할 수 있는 오디오 및 햅틱 디자인 원칙을 소개했습니다.

00:15:26.000 --> 00:15:32.000
iOS에서 사용자 지정 피드백을 추가하기 위한 API인 Core Haptics의 기본 사항을 검토했습니다.

00:15:32.000 --> 00:15:39.000
나는 방패와 롤링 텍스처 역학에 초점을 맞춘 HapticRicochet 프로젝트를 사용하여 그것들을 실행했다.

00:15:39.000 --> 00:15:46.000
추가 정보와 리소스는 휴먼 인터페이스 지침과 개발자 문서를 참조하십시오.

00:15:46.000 --> 00:15:53.000
마지막으로, 코어 햅틱의 출시를 다루는 WWDC 2019 세션을 다시 방문할 수 있습니다.

00:15:53.000 --> 00:15:55.000
봐줘서 고마워.

00:15:55.000 --> 23:59:59.000
[타격적인 음악].

