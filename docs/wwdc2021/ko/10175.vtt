WEBVTT

00:00:02.000 --> 00:00:12.000
안녕하세요, WWDC에 오신 것을 환영합니다.

00:00:12.000 --> 00:00:23.000
제 이름은 App Store의 기술 프로그램 관리자인 Manjeet Chawla이며, 고객을 지원하고 환불을 처리하는 데 도움이 될 몇 가지 새로운 기능에 대해 이야기하게 되어 정말 기쁩니다.

00:00:23.000 --> 00:00:28.000
이것은 인앱 구매에 초점을 맞춘 3부작 시리즈의 세 번째 세션이다.

00:00:28.000 --> 00:00:39.000
그리고 아직 "Meet StoreKit 2" 또는 "서버에서 인앱 구매 관리"를 시청하지 않았다면, 전체 이야기를 얻을 수 있도록 이 세션을 살펴보는 것이 좋습니다.

00:00:39.000 --> 00:00:47.000
이 세션에서는 먼저 고객 지원과 고객에게 상황별 지원을 제공할 수 있는 방법에 대해 이야기하겠습니다.

00:00:47.000 --> 00:00:56.000
그리고 환불은 지원의 중요한 부분이기 때문에, 제 동료인 조는 환불 처리와 환불 절차를 알리고 개선하기 위한 새로운 서버 API에 대해 이야기할 것입니다.

00:00:56.000 --> 00:01:06.000
App Store에서 비즈니스가 성장함에 따라 확장 가능한 지원을 제공하는 고객 지원, 혜택 및 과제부터 시작합시다.

00:01:06.000 --> 00:01:23.000
앱이 자동 갱신 구독을 제공하든 소모품이나 비소모품과 같은 일회성 인앱 구매를 제공하든, 우리는 고객 지원 문제를 시기적절하고 효율적으로 해결할 수 있도록 새로운 StoreKit 및 App Store 서버 API를 도입하고 있습니다.

00:01:23.000 --> 00:01:44.000
그리고 지원을 제공하는 것 외에도, 이러한 API는 처음에 획득한 후 기존 고객과의 관계를 관리하고, 전반적인 유지율을 높이고, 고객 만족도를 향상시켜 더 높은 참여로 이어질 수 있으며, 장기 수익을 증가시키는 이탈을 줄이는 데 도움이 될 것입니다.

00:01:44.000 --> 00:01:52.000
오늘날, 고객이 인앱 구매에 도움이 필요한 경우, Apple 또는 개발자인 당신에게 연락할 수 있습니다.

00:01:52.000 --> 00:02:05.000
그리고 시나리오에 따라, 고객은 Apple의 셀프 서비스 웹사이트인 "문제 신고"를 사용하거나 전화, 이메일 또는 채팅을 통해 Apple 지원에 연락하여 문제를 해결할 수 있습니다.

00:02:05.000 --> 00:02:14.000
또는, 그들은 소셜 미디어, 포럼 또는 앱 내부의 라이브 채팅을 통해 당신에게 연락할 수도 있습니다.

00:02:14.000 --> 00:02:20.000
그리고 그들이 인앱 구매에 대해 당신에게 연락할 때, 그 문제는 이러한 시나리오 중 하나에 속할 수 있습니다.

00:02:20.000 --> 00:02:39.000
고객의 인앱 구매 또는 환불을 식별하는 것부터 서비스 문제 또는 중단에 대한 보상을 제공하거나 구독을 관리하거나 환불을 요청하는 데 이르기까지, 이러한 질문은 대부분의 지원 시나리오를 다루며, 각 시나리오를 더 자세히 살펴보겠습니다.

00:02:39.000 --> 00:02:46.000
첫 번째 시나리오부터 시작합시다. 고객이 지원을 위해 처음 연락했을 때 구매한 것을 어떻게 식별합니까?

00:02:46.000 --> 00:02:51.000
이제, App Store에서 콘텐츠를 구매했다면, 이미 이 이메일을 보았을 것입니다.

00:02:51.000 --> 00:02:58.000
오늘날, 고객이 인앱 구매를 할 때, 그들은 이메일을 통해 그 구매에 대한 송장을 받는다.

00:02:58.000 --> 00:03:03.000
이 송장에는 각 송장에 고유한 주문 ID가 포함되어 있습니다.

00:03:03.000 --> 00:03:10.000
그리고 고객은 이메일을 통해 또는 계정 설정에서 구매 내역을 확인하여 이에 액세스할 수 있습니다.

00:03:10.000 --> 00:03:25.000
그리고 이제 고객이 지원을 위해 연락하면 고객에게 송장의 주문 ID를 요청하고 새로운 서버 대 서버 API를 사용하여 고객이 제시한 송장에 대한 인앱 구매를 조회할 수 있습니다.

00:03:25.000 --> 00:03:32.000
송장을 검증하는 것 외에도, 이 API는 인앱 구매와 관련된 문제를 식별하는 데 도움을 줍니다.

00:03:32.000 --> 00:03:40.000
예를 들어, 송장에 App Store에서 이미 환불된 구매가 포함되어 있는 경우.

00:03:40.000 --> 00:03:44.000
이제, 이 API가 어떻게 작동하는지 살펴봅시다.

00:03:44.000 --> 00:04:01.000
이제 고객이 지원팀에 연락할 때, 고객에게 송장 주문 ID를 요청할 수 있으며, 서버는 송장 조회 API를 호출할 수 있으며, 이에 대응하여 App Store는 JWS 형식으로 서명된 해당 송장의 상태와 거래를 반환합니다.

00:04:01.000 --> 00:04:08.000
그리고 마지막으로, 이 정보를 사용하여, 당신은 올바른 인앱 구매에 대한 지원을 제공할 수 있습니다.

00:04:08.000 --> 00:04:20.000
서버에 이 API를 구현하려면, URL의 송장 주문 ID와 요청의 앱의 Apple ID로 조회 엔드포인트를 호출할 수 있습니다.

00:04:20.000 --> 00:04:29.000
응답에는 JWS 형식으로 서명된 송장에 대한 거래가 포함된 signedTransactions 객체가 포함되어 있습니다.

00:04:29.000 --> 00:04:35.000
각 거래의 페이로드를 디코딩하여 구매 세부 사항을 얻을 수 있습니다.

00:04:35.000 --> 00:04:39.000
이제, 새로운 상태 필드를 자세히 살펴봅시다.

00:04:39.000 --> 00:04:43.000
이 필드는 송장의 전반적인 상태를 식별합니다.

00:04:43.000 --> 00:04:59.000
가능한 값은 0이며, 이는 송장이 유효하고 이 주문 ID에 대한 거래가 포함되어 있음을 의미하며, 1, 주문 ID가 유효하지 않다는 것을 의미하며, 2, 송장이 유효하다는 것을 의미하지만 이 주문 ID에 대해 일치하는 거래가 발견되지 않았습니다.

00:04:59.000 --> 00:05:05.000
이제, 이 API의 응답을 어떻게 사용할 수 있는지에 대한 예를 검토해 봅시다.

00:05:05.000 --> 00:05:15.000
다음은 제품 ID 및 구매 날짜와 함께 각 고객의 인앱 구매에 대한 원본 거래 ID를 저장할 수 있는 샘플 고객 계정 데이터베이스입니다.

00:05:15.000 --> 00:05:25.000
이 API를 사용하면 고객이 문제에 대해 연락할 때 송장 주문 ID를 고객의 인앱 구매와 연결할 수 있습니다.

00:05:25.000 --> 00:05:36.000
예를 들어, 이 고객이 앱에서 동전을 구매하고 지원을 위해 연락하면, 구매한 동전의 송장 주문 ID를 저장할 수 있습니다.

00:05:36.000 --> 00:05:43.000
이제, 고객에 대한 원래 TransactionId가 있고 과거 환불을 조회하고 싶은 시나리오를 살펴보겠습니다.

00:05:43.000 --> 00:05:52.000
오늘날, 당신은 환불에 대한 알림을 받기 위해 verifyReceipt API 또는 App Store 서버 알림에 의존할 수 있습니다.

00:05:52.000 --> 00:06:02.000
그러나, 정전이 있었고 서버가 App Store에서 알림을 받지 못했다면, 이 고객의 과거 환불을 어떻게 조회합니까?

00:06:02.000 --> 00:06:14.000
우리는 앱 내에서 앱 내 구매에 대해 원래 거래 ID를 사용하여 고객의 환불된 거래를 조회하기 위해 새로운 서버 간 API를 도입하고 있습니다.

00:06:14.000 --> 00:06:23.000
이 API를 사용하면 언제든지 빠르고 쉽게 환불을 찾아 정전 또는 예정된 유지 보수를 처리할 수 있습니다.

00:06:23.000 --> 00:06:30.000
또한, 이 API는 앱에 대한 고객의 전체 환불 내역을 식별하는 데 도움이 될 수 있습니다.

00:06:30.000 --> 00:06:41.000
예를 들어, 앱이 구독과 소모품을 모두 제공하는 경우, 이 API는 모든 콘텐츠 유형에서 환불된 모든 거래를 반환합니다.

00:06:41.000 --> 00:06:53.000
서버에서 이 API를 구현하려면, URL의 원래 거래 ID와 요청 매개 변수의 앱의 Apple ID로 요청을 생성하십시오.

00:06:53.000 --> 00:06:59.000
응답에는 JWS 형식으로 서명된 환불된 거래 목록이 포함되어 있습니다.

00:06:59.000 --> 00:07:07.000
각 거래의 페이로드를 디코딩하여 구매에 필요한 모든 정보를 얻을 수 있습니다.

00:07:07.000 --> 00:07:22.000
따라서, 샘플 고객 계정 데이터베이스로 돌아가서, 이제 이 API에서 반환된 정보를 사용하여 원래 거래 ID를 사용하여 이 고객의 환불된 거래를 업데이트할 수 있습니다.

00:07:22.000 --> 00:07:27.000
이제, 서비스 문제가 있다는 것을 확인한 후, 고객에게 어떻게 보상하나요?

00:07:27.000 --> 00:07:30.000
오늘날, 고려해야 할 몇 가지 다른 옵션이 있다.

00:07:30.000 --> 00:07:38.000
게임의 경우, 가상 화폐나 콘텐츠의 형태로 어떤 형태의 인앱 보상을 제공할 수 있습니다.

00:07:38.000 --> 00:07:43.000
또는 구독의 경우, 다음 갱신 시 할인을 제공하고 싶을 수도 있습니다.

00:07:43.000 --> 00:07:47.000
그래서, 서비스 문제에 대해 구독자들에게 어떻게 보상하나요?

00:07:47.000 --> 00:08:01.000
iOS 14에서 우리는 제한된 시간 동안 할인 또는 무료로 구독을 제공하여 구독자를 획득, 유지 및 되찾을 수 있도록 구독 제안 코드라는 새로운 기능을 도입했습니다.

00:08:01.000 --> 00:08:07.000
온라인 또는 오프라인 채널을 사용하여 이러한 고유한 일회성 코드를 배포할 수 있습니다.

00:08:07.000 --> 00:08:16.000
그리고 고객 서비스 문제의 경우, 유지율을 개선하는 데 도움이 되는 문제에 대한 보상으로 제안 코드를 제공할 수 있습니다.

00:08:16.000 --> 00:08:21.000
당신은 또한 이것을 대체 구독을 제안할 기회로 사용할 수 있습니다.

00:08:21.000 --> 00:08:27.000
예를 들어, 더 낮은 가격에 더 많은 가치를 제공하는 더 긴 기간 계획.

00:08:27.000 --> 00:08:42.000
그리고 iOS 14 및 iPadOS 14 이상의 고객은 StoreKit에서 presentCodeRedemptionSheet API를 구현한 경우 일회성 코드 교환 URL을 통해 또는 앱 내에서 App Store에서 쿠폰 코드를 사용할 수 있습니다.

00:08:42.000 --> 00:08:47.000
이제, 앱 내의 샘플 코드 상환 흐름을 살펴봅시다.

00:08:47.000 --> 00:08:53.000
당신이 만들어야 하는 유일한 사용자 지정 UI는 상환 흐름을 시작하는 것입니다.

00:08:53.000 --> 00:08:57.000
이 UI를 제공할 수 있는 몇 가지 자연스러운 장소가 있다.

00:08:57.000 --> 00:09:06.000
예를 들어, 고객이 지원 에이전트와 채팅할 때 앱의 설정 화면이나 라이브 채팅 기능 내부에서.

00:09:06.000 --> 00:09:20.000
고객이 교환 버튼을 탭한 후, 시스템은 고객이 코드를 입력하고 제안을 사용할 수 있도록 여기에 표시된 것과 같은 일련의 코드 교환 화면을 자동으로 제공합니다.

00:09:20.000 --> 00:09:32.000
이제, 스포츠, 라이브 TV 또는 비디오와 같은 스트리밍 기반 앱에서 더 일반적일 수 있는 정전이 있거나 이벤트가 취소된 시나리오를 살펴봅시다.

00:09:32.000 --> 00:09:37.000
이러한 정전이나 취소된 이벤트의 경우, 어떻게 고객을 달래줄 수 있나요?

00:09:37.000 --> 00:09:46.000
우리는 유료 활성 구독의 갱신일을 연장하기 위해 자동 갱신 구독을 위한 새로운 서버 간 API를 도입하고 있습니다.

00:09:46.000 --> 00:09:57.000
이 API를 사용하면 추가 시간 동안 고객에게 무료 서비스를 제공할 수 있으며, 이는 일시적인 중단이나 서비스 문제에 대한 불만 완화책으로 사용될 수 있습니다.

00:09:57.000 --> 00:10:09.000
고객의 구독 갱신일을 1년에 두 번, 각각 최대 90일까지 이동할 수 있으므로 서비스 문제나 중단을 유연하게 해결할 수 있습니다.

00:10:09.000 --> 00:10:18.000
연장 기간은 85%의 수익금 비율을 받는 데 필요한 1년의 유료 서비스에 포함되지 않습니다.

00:10:18.000 --> 00:10:23.000
이제, 서버에서 이 API를 어떻게 구현할 수 있는지 봅시다.

00:10:23.000 --> 00:10:34.000
이 API에 대한 요청에는 고객의 구독에 대한 원본 거래 ID, 연장 기간(일) 및 연장 사유 코드가 필요합니다.

00:10:34.000 --> 00:10:51.000
응답에는 요청에서 전달된 거래 ID, 연장 갱신을 위한 웹 주문 라인 항목 ID, 요청이 성공했는지 여부를 나타내는 성공 플래그 및 요청이 성공한 경우 연장 유효일이 포함되어 있습니다.

00:10:51.000 --> 00:10:56.000
이제, 이 API를 사용할 수 있는 두 가지 시나리오를 살펴봅시다.

00:10:56.000 --> 00:11:12.000
첫 번째 시나리오에서, 고객이 서비스 문제나 정전에 대해 지원팀에 연락할 때, 이 API를 호출하여 고객을 달래줄 수 있으며, 이에 대응하여 App Store는 구독을 연장하고 이메일을 통해 고객에게 알립니다.

00:11:12.000 --> 00:11:33.000
또는 두 번째 시나리오, 예상치 못한 상황으로 인해 스포츠 경기가 취소되거나 라이브 스트리밍 이벤트가 중단되는 경우, 지원 팀은 이 API를 사전에 사용할 수 있으며, 이에 대응하여 App Store는 구독을 연장하고 이메일을 통해 고객에게 알립니다.

00:11:33.000 --> 00:11:42.000
이제, 고객이 구독을 관리하고 싶어하는 시나리오의 경우, 고객이 앱 내에서 바로 구독을 관리할 수 있도록 어떻게 할 수 있습니까?

00:11:42.000 --> 00:11:56.000
우리는 구독 관리 페이지를 표시하기 위해 새로운 StoreKit 2 API를 도입하여 고객을 App Store로 리디렉션하지 않고도 앱 내에서 바로 구독 관리 기능을 제공할 수 있습니다.

00:11:56.000 --> 00:12:08.000
선택적으로, 구독 관리 페이지를 보기 전에 저장 제안을 제시하거나 취소 이유를 얻기 위해 취소 후 종료 설문 조사를 제시할 수도 있습니다.

00:12:08.000 --> 00:12:16.000
그리고 이 API를 사용하면 샌드박스 환경에서 구독 구매 관리를 테스트할 수도 있습니다.

00:12:16.000 --> 00:12:20.000
이 API는 구현하기가 정말 간단하며, 한 줄의 코드가 필요합니다.

00:12:20.000 --> 00:12:28.000
StoreKit 2의 showManageSubscriptions() 메소드를 호출하여 구독 관리 페이지를 표시하기만 하면 됩니다.

00:12:28.000 --> 00:12:33.000
이제, 앱에서 샘플 관리 구독 UI를 살펴봅시다.

00:12:33.000 --> 00:12:38.000
계정 설정에서, 우리는 사용자가 구독을 관리할 수 있는 옵션을 추가할 수 있습니다.

00:12:38.000 --> 00:12:49.000
고객이 이 버튼을 탭하면, App Store는 현재 활성 구독 및 갱신 옵션과 함께 기존 구독 관리 페이지를 표시합니다.

00:12:49.000 --> 00:13:01.000
이것은 고객이 App Store의 계정 설정에서 구독 관리를 방문할 때 익숙한 것과 동일한 보기이며, 여기에서 구독을 보거나, 업그레이드하거나, 다운그레이드하거나, 취소할 수 있습니다.

00:13:01.000 --> 00:13:10.000
이제, 고객이 구독을 취소하도록 선택하면, 취소 세부 사항과 서비스 만료일이 포함된 확인 화면이 표시됩니다.

00:13:10.000 --> 00:13:22.000
그리고 사용자가 이 페이지에서 취할 수 있는 모든 조치에 대해, 서버는 App Store 서버 알림을 받게 되며, 새로운 StoreKit 2 API를 구현한 경우 앱이 알림을 받게 됩니다.

00:13:22.000 --> 00:13:31.000
마지막으로, 고객이 구매에 만족하지 않고 환불을 요청하고 싶다면, 도움을 받기 위해 앱을 떠날 필요가 없습니다.

00:13:31.000 --> 00:13:36.000
그렇다면, 어떻게 하면 고객이 앱 내에서 환불을 요청할 수 있도록 할 수 있을까요?

00:13:36.000 --> 00:13:47.000
우리는 이제 고객이 앱 내에서 직접 인앱 구매에 대한 환불을 요청할 수 있는 beginRefundRequest라는 새로운 StoreKit 2 API를 도입하고 있습니다.

00:13:47.000 --> 00:13:55.000
그리고 환불이 승인되면, 앱이 알림을 받고 서버는 App Store에서 환불 알림을 받습니다.

00:13:55.000 --> 00:14:02.000
또는 환불이 거부되면, 당신의 서버는 새로운 환불 거부 알림을 받습니다.

00:14:02.000 --> 00:14:11.000
그리고 처음으로, 이 API를 사용하여, 이제 앱 내에서 바로 샌드박스에서 환불을 시작하고 테스트할 수 있습니다.

00:14:11.000 --> 00:14:20.000
이 API를 구현하려면, 해당 구매에 대한 거래 ID로 beginRefundRequest 메소드를 호출하기만 하면 됩니다.

00:14:20.000 --> 00:14:26.000
그리고 요청이 제출된 후, do-catch 진술을 사용하여 오류를 처리할 수 있습니다.

00:14:26.000 --> 00:14:39.000
예를 들어, 이것이 이미 환불된 거래에 대한 중복 요청이거나 다른 이유로 요청이 실패한 경우, 오류 코드는 환불 요청의 상태를 반영합니다.

00:14:39.000 --> 00:14:43.000
여기 앱의 샘플 환불 요청 UI가 있습니다.

00:14:43.000 --> 00:14:48.000
도움말 페이지에는 이제 "환불 요청"에 대한 새로운 옵션이 있습니다.

00:14:48.000 --> 00:14:54.000
선택하면, 앱은 해당 고객이 환불을 요청할 수 있도록 구매를 표시합니다.

00:14:54.000 --> 00:15:09.000
그리고 전력 서지 구매가 예상대로 작동하지 않는 경우, 고객은 해당 구매를 탭하여 구매 세부 사항과 고객이 선택할 수 있는 이유 코드 목록이 포함된 환불 요청 시트를 호출할 수 있습니다.

00:15:09.000 --> 00:15:23.000
요청이 제출되면, 앱 내 확인 화면 외에도, App Store는 고객에게 Apple의 "문제 신고" 링크가 포함된 이메일을 보내 환불 상태를 확인할 수 있습니다.

00:15:23.000 --> 00:15:34.000
따라서, 새로운 API를 사용하면 이제 앱 내에서 그리고 다른 지원 채널에서 인앱 구매에 대한 문맥적이고 원활한 지원을 제공할 수 있습니다.

00:15:34.000 --> 00:15:47.000
좋은 지원을 제공하는 것은 전반적인 유지율을 높이고, 고객 만족도를 향상시켜 더 높은 참여로 이어지며, 궁극적으로 더 긍정적인 평가와 리뷰로 이어집니다.

00:15:47.000 --> 00:15:50.000
다시 말해서, 그것은 모두에게 더 나은 경험이다.

00:15:50.000 --> 00:16:02.000
이제, 우리는 새로운 환불 요청 API를 사용하여 고객에게 환불을 요청할 수 있는 방법을 제공하는 방법에 대해 이야기했지만, 요청을 시작한 후 발생하는 환불에는 더 많은 것이 있습니다.

00:16:02.000 --> 00:16:10.000
그래서, 나는 환불 처리와 환불 결정에 관한 새로운 기회에 대해 더 많이 이야기하기 위해 내 동료인 Joe를 초대할 것이다.

00:16:10.000 --> 00:16:12.000
고마워, 맨지트.

00:16:12.000 --> 00:16:16.000
안녕하세요, 제 이름은 조 마니이고, 저는 앱 스토어의 프로그램 매니저입니다.

00:16:16.000 --> 00:16:20.000
환불은 민감한 주제이며, 여기 App Store에서 우리는 그것을 진지하게 받아들입니다.

00:16:20.000 --> 00:16:26.000
그것은 적은 비율의 거래에 영향을 미치지만, 우리는 그것이 당신의 앱에 미치는 영향을 이해합니다.

00:16:26.000 --> 00:16:32.000
WWDC20에서 시작된 환불 알림에 대한 빠른 요약으로 시작하고 싶습니다.

00:16:32.000 --> 00:16:35.000
그럼, 우리가 환불을 어떻게 처리하는지에 대한 통찰력을 줄게.

00:16:35.000 --> 00:16:42.000
마지막으로, 우리는 당신이 환불 절차를 알리고 개선하는 데 도움이 될 새로운 기능에 대해 이야기할 것입니다.

00:16:42.000 --> 00:16:47.000
WWDC20에서, 우리는 REFUND라는 새로운 알림 유형을 발표했다.

00:16:47.000 --> 00:16:54.000
고객이 환불을 받은 후, App Store는 환불 알림을 서버로 보냅니다.

00:16:54.000 --> 00:17:01.000
App Store Connect에서 서버 URL을 구성했다면, 이미 환불 알림을 받고 있을 수 있습니다.

00:17:01.000 --> 00:17:08.000
서버가 이 알림을 받으면, 성공적인 HTTP 상태 코드 200으로 응답하십시오.

00:17:08.000 --> 00:17:14.000
그런 다음, 당신은 응답으로 환불을 위한 적절한 조치를 취할 수 있습니다.

00:17:14.000 --> 00:17:22.000
환불 알림이 시작된 이후, 우리는 당신의 피드백을 들을 기회가 있었고, 당신과 몇 가지 모범 사례를 공유하고 싶습니다.

00:17:22.000 --> 00:17:26.000
당신의 비즈니스 모델에 맞는 최고의 대응 전략을 찾으세요.

00:17:26.000 --> 00:17:38.000
예를 들어, 사용자가 게임 내 통화를 구매한 다음 환불을 요청하는 경우, 서버가 환불 알림을 받은 후 계정에서 잔액을 공제할 수 있습니다.

00:17:38.000 --> 00:17:46.000
구독의 경우, 구독이 환불되고 취소되면 서비스에 대한 액세스를 취소할 수 있습니다.

00:17:46.000 --> 00:17:52.000
대응 전략을 식별할 때 게임 디자인에 미치는 영향을 고려하세요.

00:17:52.000 --> 00:18:05.000
마케팅 및 홍보 도구를 사용하여 고객을 다시 참여시키고, 당신이 취한 모든 조치에 대해 커뮤니케이션 채널을 통해 고객에게 항상 명확한 메시지를 제공하십시오.

00:18:05.000 --> 00:18:11.000
동전을 게임 내 통화로 제공하는 앱의 샘플 환불 타임라인을 살펴봅시다.

00:18:11.000 --> 00:18:17.000
고객이 100개의 동전을 구매한 후, 그들은 즉시 당신의 게임 내에서 그 동전을 사용할 수 있습니다.

00:18:17.000 --> 00:18:25.000
고객이 새로운 요청 환불 API를 사용하거나 Apple 지원에 연락하여 환불을 요청하는 경우.

00:18:25.000 --> 00:18:33.000
그리고 환불이 승인되면, App Store는 환불을 발행하고, 서버에 환불 알림을 보내고, 고객에게도 알릴 것입니다.

00:18:33.000 --> 00:18:37.000
그리고 이것은 보통 48시간 이내에 일어난다.

00:18:37.000 --> 00:18:44.000
이제, 환불이 요청된 후 그리고 App Store가 결정을 내리기 전에 어떤 일이 일어나는지 살펴봅시다.

00:18:44.000 --> 00:18:51.000
높은 수준에서, 각 환불 요청은 결정을 내리기 위해 환불 결정 시스템을 통과할 것입니다.

00:18:51.000 --> 00:19:00.000
환불 결정 시스템에는 문제의 거래와 고객의 구매 및 환불 내역과 같은 기타 요인에 대한 정보가 포함되어 있습니다.

00:19:00.000 --> 00:19:12.000
이제, 우리는 당신이 환불 결정에 더 적극적인 역할을 하고 싶다는 소식을 들었기 때문에, 환불 절차를 개선하고 알려 줄 새로운 기능을 발표하게 되어 기쁩니다.

00:19:12.000 --> 00:19:20.000
새로운 소비 API를 사용하면 고객의 인앱 구매에 대한 정보를 App Store와 공유할 수 있습니다.

00:19:20.000 --> 00:19:33.000
고객이 소모품 인앱 구매에 대한 환불을 요청할 때, App Store는 소비 데이터로 응답할 수 있도록 CONSUMPTION-REQUEST라는 새로운 알림을 서버에 보냅니다.

00:19:33.000 --> 00:19:41.000
대부분의 경우, 고객은 구매한 직후에 콘텐츠를 소비하기 시작하며, 이 정보를 아는 것은 환불 결정 과정에 도움이 됩니다.

00:19:41.000 --> 00:19:50.000
소비 요청을 받은 후 12시간 동안 소비 정보를 App Store로 보내서 환불 결정을 알리는 데 사용할 수 있도록 하십시오.

00:19:50.000 --> 00:19:55.000
이제, 소비 데이터에 어떤 필드가 포함되어 있는지 살펴봅시다.

00:19:55.000 --> 00:20:03.000
소비 페이로드에는 다음과 같은 데이터 포인트가 포함되어 있으며, 각각은 환불 결정을 알리는 데 도움이 됩니다.

00:20:03.000 --> 00:20:09.000
먼저, 요청 URL에 인앱 구매의 원래 거래 ID를 포함합니다.

00:20:09.000 --> 00:20:22.000
Apple이 결정에 해당 데이터를 사용할 수 있도록 사용자가 요청된 소비 API 데이터를 Apple에 보내는 데 동의한 경우 customerConsented 필드를 "true"로 설정하십시오.

00:20:22.000 --> 00:20:24.000
소비 상태 분야는 중요하다.

00:20:24.000 --> 00:20:30.000
사용자가 인앱 구매를 부분적으로, 완전히 또는 전혀 소비하지 않았는지 나타내는 데 사용하세요.

00:20:30.000 --> 00:20:41.000
예를 들어, 앱에 물물교환이 있거나 한 계정에서 다른 계정으로 전송된 인앱 구매가 있는 교환 플랫폼이 있는 경우, 소비된 것으로 간주됩니다.

00:20:41.000 --> 00:20:47.000
소비 플랫폼 필드는 앱이 크로스 플랫폼인지 그리고 어디에서 소비되었는지 식별합니다.

00:20:47.000 --> 00:20:58.000
sampleContent 필드를 사용하여 사용자에게 무료 샘플이나 평가판을 제공했는지, 또는 사용자가 앱 내에서 유사한 인앱 구매를 받았는지 여부를 표시하십시오.

00:20:58.000 --> 00:21:09.000
또는, 이 필드를 사용하여 사용자가 구매하기 전에 인앱 구매와 예상 게임 플레이 또는 메커니즘에 대한 정보를 제공받았는지 여부를 나타냅니다.

00:21:09.000 --> 00:21:17.000
deliveryStatus 필드를 사용하여 인앱 구매가 고객에게 성공적으로 전달되었고 제대로 작동했음을 나타냅니다.

00:21:17.000 --> 00:21:20.000
appAccountToken은 StoreKit 2에 도입된 새로운 필드입니다.

00:21:20.000 --> 00:21:31.000
이것은 구매를 시작하고 구매를 위한 콘텐츠를 소비하는 앱의 사용자 계정과 관련된 UUID가 될 것입니다.

00:21:31.000 --> 00:21:43.000
나머지 필드에는 사용자가 계정을 얼마나 오래 가지고 있었는지, 앱에서 얼마나 많은 시간을 플레이했는지, 총 지출 및 계정의 현재 상태에 대한 정보가 포함됩니다.

00:21:43.000 --> 00:21:57.000
환불 요청의 경우, 세 가지 관련 App Store 서버 알림이 있습니다: 소모품 인앱 구매에 대한 환불 요청이 시작될 때 알려주는 새로운 소비-요청 알림.

00:21:57.000 --> 00:22:05.000
모든 콘텐츠 유형에 대해, 환불 알림은 고객에게 환불이 발행될 때 알려줍니다.

00:22:05.000 --> 00:22:15.000
그리고 모든 콘텐츠 유형에 대해, 환불 거부 알림은 스토어 키트 API를 사용하여 시작된 요청에 대한 환불이 거부되었을 때 알려줍니다.

00:22:15.000 --> 00:22:17.000
이제 환불 일정으로 돌아가자.

00:22:17.000 --> 00:22:28.000
고객이 소모품 인앱 구매에 대한 환불을 요청할 때, App Store 서버는 이제 서버에 소비 요청 알림을 보냅니다.

00:22:28.000 --> 00:22:36.000
서버는 12시간 이내에 소비 데이터를 App Store 서버로 다시 응답한 다음 의사 결정에 사용됩니다.

00:22:36.000 --> 00:22:50.000
승인되면, App Store는 환불 알림을 보낼 것이며, 서버가 HTTP OK 응답으로 응답한 후, 환불에 대한 적절한 조치를 취할 수 있습니다.

00:22:50.000 --> 00:22:56.000
그리고 소비 API는 오늘부터 생산과 샌드박스에서 테스트할 수 있습니다.

00:22:56.000 --> 00:23:02.000
이제 새로운 소비 API로 Apple에 정보를 보내는 것의 몇 가지 이점을 다루자.

00:23:02.000 --> 00:23:08.000
이러한 데이터 포인트를 얻는 것은 투명성을 높이고 전반적인 환불 절차를 개선하는 데 도움이 될 것이다.

00:23:08.000 --> 00:23:13.000
이것은 차례로 고객에게 더 나은 전반적인 결과를 제공합니다.

00:23:13.000 --> 00:23:22.000
또한, 새로운 환불 알림을 통해 고객에게 다가갈 수 있는 더 많은 기회를 갖게 되므로 전반적인 커뮤니케이션을 높일 수 있습니다.

00:23:22.000 --> 00:23:28.000
이제, 저는 그것을 제 동료인 Manjeet에게 다시 전달하여 우리가 다룬 모든 것에서 몇 가지 주요 요점을 공유하고 싶습니다.

00:23:28.000 --> 00:23:31.000
그래서, 우리는 오늘 많은 주제를 다루었다.

00:23:31.000 --> 00:23:34.000
이 세션의 주요 요점을 살펴보겠습니다.

00:23:34.000 --> 00:23:46.000
새로운 StoreKit API를 사용하면 이제 고객이 환불과 구독을 요청할 수 있도록 앱에 사용자 지정 도움말 UI를 구현할 수 있으며, 이는 앱 내에서 구독을 관리할 수 있는 방법입니다.

00:23:46.000 --> 00:23:53.000
새로운 서버 간 API를 구현하여 고객 지원 여정을 검토하고 최적화하십시오.

00:23:53.000 --> 00:24:00.000
예를 들어, 송장 조회 API를 사용하여 고객의 인앱 구매를 식별하고 검증하십시오.

00:24:00.000 --> 00:24:10.000
그리고 아직 하지 않았다면, App Store에서 환불, 소비 요청 및 기타 상태 업데이트 알림을 받을 수 있도록 서버를 설정하세요.

00:24:10.000 --> 00:24:17.000
환불 시 조치를 취하기 위해 앱의 비즈니스 모델에 가장 적합한 대응 전략을 식별하십시오.

00:24:17.000 --> 00:24:29.000
그리고 마지막으로, 이제 최신 소비 데이터를 보내 App Store의 소비 요청 알림에 응답하여 Apple의 환불 결정 시스템에 알릴 수 있습니다.

00:24:29.000 --> 00:24:32.000
그래서, 이것은 "고객을 지원하고 환불을 처리한다"였다.

00:24:32.000 --> 00:24:45.000
새로운 StoreKit 2 API에 대한 자세한 내용은 "Meet StoreKit 2"를 시청하고, 인앱 구매를 위한 서버 측 로직 구축에 대한 자세한 내용은 "서버에서 인앱 구매 관리"를 시청하십시오.

00:24:45.000 --> 00:24:49.000
오늘 들어주셔서 감사드리며, 나머지 WWDC를 즐기세요.

00:24:49.000 --> 23:59:59.000
[타격적인 음악].

