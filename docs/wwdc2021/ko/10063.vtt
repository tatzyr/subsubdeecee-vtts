WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:11.000
안녕!

00:00:11.000 --> 00:00:14.000
제 이름은 러셀이고, 저는 UIKit 팀의 엔지니어입니다.

00:00:14.000 --> 00:00:23.000
iOS 13에서 우리는 시트에 대한 세련된 외관을 도입하여 전화로 가져오고 보편적인 풀 투 옵스 제스처를 추가했습니다.

00:00:23.000 --> 00:00:33.000
이에 대해 자세히 알아보려면, iOS 13용 UI 현대화 비디오, 특히 9분 45초부터 시작하는 프레젠테이션에 대한 섹션을 시청하세요.

00:00:33.000 --> 00:00:43.000
iOS 15에서, 우리는 시트에 많은 사용자 지정 옵션을 추가하여 그 기반을 구축했으므로, 이제 전에 없던 재미있는 새로운 방식으로 사용할 수 있습니다.

00:00:43.000 --> 00:00:52.000
화면의 절반만 덮는 수직으로 크기 조정 가능한 시트를 만들 수 있는 중간 멈춤에 대한 지원을 추가했습니다.

00:00:52.000 --> 00:01:02.000
이제 디밍 뷰를 제거하여 시트가 표시되는 동안 사용자가 시트 뒤의 콘텐츠와 상호 작용할 수 있는 비모달 UI를 구축할 수 있습니다.

00:01:02.000 --> 00:01:10.000
다음으로, 나는 풍경의 휴대폰에서 전체 화면이 아닌 모양을 얻는 방법을 포함하여 몇 가지 새로운 시각적 옵션을 다룰 것이다.

00:01:10.000 --> 00:01:20.000
그리고 마지막으로, 일반 크기 클래스의 팝오버와 소형 크기 클래스의 맞춤형 시트 사이에 원활하게 적응하는 UI를 설정하는 방법을 보여드리겠습니다.

00:01:20.000 --> 00:01:26.000
이 모든 것을 탐구하기 위해, 우리는 디지털 엽서를 만들기 위한 샘플 앱을 만들었고, 이 비디오와 함께 사용할 수 있습니다.

00:01:26.000 --> 00:01:32.000
각 엽서에 대해 그림과 텍스트와 글꼴을 사용자 정의할 수 있습니다.

00:01:32.000 --> 00:01:36.000
이제, 내가 시트를 사용자 정의하기 전에, 먼저 하나를 얻어야 한다.

00:01:36.000 --> 00:01:48.000
시트는 UISheetPresentationController라는 새로운 UIPresentationController 서브클래스의 인스턴스이며, 모든 사용자 지정 옵션은 이 클래스의 속성으로 노출됩니다.

00:01:48.000 --> 00:01:56.000
이 클래스의 인스턴스를 얻는 일반적인 방법은 보기 컨트롤러에서 sheetPresentationController 속성을 제시하기 전에 읽는 것입니다.

00:01:56.000 --> 00:02:06.000
이 방법은 뷰 컨트롤러의 modalPresentationStyle이 기본적으로 양식 시트 또는 페이지 시트인 한 non-nil 인스턴스를 반환합니다.

00:02:06.000 --> 00:02:10.000
그런 다음 여기에서 인스턴스에 다양한 속성을 설정하여 사용자 정의할 수 있습니다.

00:02:10.000 --> 00:02:16.000
이것은 뷰 컨트롤러의 popoverPresentationController를 얻고 속성을 설정하는 것과 같은 패턴입니다.

00:02:16.000 --> 00:02:21.000
그리고 그것으로, 멈춤으로 뛰어들자.

00:02:21.000 --> 00:02:23.000
멈춤이 뭐야?

00:02:23.000 --> 00:02:32.000
멈춤은 시트가 자연적으로 놓여 있는 높이이며, 이것들은 완전히 확장된 시트 프레임의 일부로 정의된다.

00:02:32.000 --> 00:02:39.000
완전히 확장된 프레임은 iPhone과 iPad에서 시각화되며, 이전에 시트를 사용한 적이 있다면 친숙할 것입니다.

00:02:39.000 --> 00:02:51.000
우리는 iOS 15에서 두 개의 시스템 정의 디텐트를 노출했습니다: 시트의 전체 높이의 약 절반인 중간 디텐트와 완전히 확장된 시트의 높이인 큰 디텐트.

00:02:51.000 --> 00:02:58.000
시트가 지원할 멈춤을 지정하려면, 멈춤 속성에서 원하는 멈춤의 배열을 설정하기만 하면 됩니다.

00:02:58.000 --> 00:03:09.000
이 속성의 기본값은 큰 멈춤의 배열이기 때문에 전혀 설정하지 않으면 표준 전체 높이 시트를 얻을 수 있습니다.

00:03:09.000 --> 00:03:17.000
이것을 중간과 큰 멈춤의 배열로 설정하면, 중간과 큰 사이에서 크기를 조정할 수 있는 시트를 얻을 수 있습니다.

00:03:17.000 --> 00:03:27.000
하지만 이것을 중간 높이로 제시하고 전체 높이로 크기를 조정할 수 없는 시트를 제공하는 중간 멈춤의 배열로 설정할 수도 있습니다.

00:03:27.000 --> 00:03:29.000
이것을 샘플 앱에 적용해 봅시다.

00:03:29.000 --> 00:03:36.000
저는 표준 시트에서 시스템 이미지 선택기를 제공하기 위해 iOS 14 SDK를 대상으로 하는 몇 가지 코드로 시작합니다.

00:03:36.000 --> 00:03:46.000
버튼을 탭하면, 이 첫 번째 함수가 호출되어 이미지 선택기를 만들고, 선택자의 대리인을 self로 설정한 다음, 선택기를 제시합니다.

00:03:46.000 --> 00:03:57.000
그런 다음 이미지가 선택되면, 피커 didFinishPicking 위임 메서드가 호출되며, 이는 이미지 보기에서 선택한 이미지를 설정하고 피커를 해제합니다.

00:03:57.000 --> 00:03:58.000
실행하자.

00:03:58.000 --> 00:04:02.000
사진 버튼을 탭하면, 사진 선택기가 앱 전체를 커버합니다.

00:04:02.000 --> 00:04:05.000
최근에 내 여행이 매우 가상적이었다는 것을 알아둬.

00:04:05.000 --> 00:04:11.000
그리고 내가 사진을 고를 때, 사진 피커는 내가 엽서에서 고른 사진을 드러내며 무시한다.

00:04:11.000 --> 00:04:14.000
하지만 내가 다른 사진을 고르고 싶다면?

00:04:14.000 --> 00:04:16.000
나는 이 모든 흐름을 다시 겪어야 한다.

00:04:16.000 --> 00:04:21.000
그리고 내 사진 라이브러리와 엽서를 동시에 보여줄 수 있다면 정말 좋을 거야.

00:04:21.000 --> 00:04:24.000
그리고 중간 멈춤으로, 나는 할 수 있다.

00:04:24.000 --> 00:04:28.000
여기 이전과 같은 코드가 있지만 몇 가지 변경 사항이 있습니다.

00:04:28.000 --> 00:04:35.000
피커를 제시하기 전에, 나는 그것의 sheetPresentationController에 접근하고 멈춤쇠를 중간과 큰 것으로 설정한다.

00:04:35.000 --> 00:04:46.000
또한 피커에서 DidFinishPicking 대표 콜백에서, 나는 사진 선택기를 해제하는 줄을 제거했다. 왜냐하면 이제 나는 사진을 선택할 때 사진 피커가 해제하는 것을 원하지 않기 때문이다.

00:04:46.000 --> 00:04:54.000
이제 내가 이것을 실행하고 사진 버튼을 탭하면, 내 도서관은 절반 높이로 나타나고, 나는 사진을 고를 수 있고, 짜잔.

00:04:54.000 --> 00:04:57.000
나는 여전히 아래에 있는 도서관과 함께 내 엽서에서 그것을 볼 수 있다.

00:04:57.000 --> 00:05:02.000
그리고 다른 사진을 찍고 싶다면, 한 번의 탭만큼 간단합니다.

00:05:02.000 --> 00:05:10.000
또한, 내 멈춤 배열에는 큰 멈춤이 포함되어 있기 때문에, 막대를 드래그하여 이 시트의 크기를 전체 높이로 조정할 수 있습니다.

00:05:10.000 --> 00:05:16.000
또한, 스크롤 보기가 위로 스크롤되기 때문에, 스크롤 보기를 스크롤하면 시트도 확장됩니다.

00:05:16.000 --> 00:05:23.000
시스템 공유 시트와 같은 작업 시트의 경우, 이것은 목록 하단에 고급 작업을 점진적으로 공개하는 훌륭한 기능입니다.

00:05:23.000 --> 00:05:34.000
하지만 이 사진 라이브러리 예제의 경우, 막대에서 드래그하여 시트의 크기를 명시적으로 조정하지 않는 한 엽서가 항상 볼 수 있도록 시트를 확장하지 않는 것을 선호할 수 있습니다.

00:05:34.000 --> 00:05:43.000
이 대체 동작을 얻으려면, 하나의 추가 속성을 설정하기만 하면 됩니다: PrefersScrollingExpands- WhenScrolledToEdge.

00:05:43.000 --> 00:05:50.000
기본적으로 이 속성은 true이므로 false로 설정하면 스크롤이 시트를 확장하는 것을 방지합니다.

00:05:50.000 --> 00:05:59.000
이제 사진 선택기는 스크롤할 때 크기를 조정하지 않지만, 여전히 막대를 드래그하여 사진 라이브러리를 더 잘 볼 수 있습니다.

00:05:59.000 --> 00:06:04.000
하지만 이제 내가 사진을 탭했을 때, 무슨 일이 일어났는지는 분명하지 않다.

00:06:04.000 --> 00:06:12.000
이것은 사진을 탭하는 것이 사진 선택기를 무시한 이전 행동과는 대조적이며, 내 선택을 받았다는 것을 분명히 나타낸다.

00:06:12.000 --> 00:06:21.000
내가 원하는 것은 내 선택을 받았다는 것을 나타내고 내 선택을 엽서에 표시하기 위해 사진을 탭할 때 시트 크기를 중간 멈춤으로 조정하는 것이다.

00:06:21.000 --> 00:06:26.000
그리고 나는 선택된 멈춤쇠를 프로그래밍 방식으로 변경함으로써 이것을 달성할 수 있다.

00:06:26.000 --> 00:06:37.000
따라서 사진이 탭될 때마다 호출되는 이미지 선택기 위임 방법으로 돌아가면, 여기에 코드를 추가하여 sheetPresentationController를 가져오고 selectedDetentIdentifier를 medium로 설정할 수 있습니다.

00:06:37.000 --> 00:06:39.000
이거 해보자.

00:06:39.000 --> 00:06:44.000
내가 사진을 탭할 때 전환을 주목하세요.

00:06:44.000 --> 00:06:45.000
와!

00:06:45.000 --> 00:06:48.000
그 전환은 너무 빨라서, 나는 거의 눈썹을 잃을 뻔했다.

00:06:48.000 --> 00:06:50.000
그건 사실 전혀 애니메이션이 되지 않았어.

00:06:50.000 --> 00:06:56.000
속성 설정을 sheet.animateChanges 블록에 래핑하여 이 전환을 쉽게 애니메이션화할 수 있습니다.

00:06:56.000 --> 00:07:10.000
이것은 필요한 경우 표준 애니메이션 곡선으로 시트를 중간 멈춤쇠로 애니메이션화하고 루트 시트 스케일링 백업과 같은 스택의 다른 시트도 애니메이션화합니다.

00:07:10.000 --> 00:07:12.000
버터처럼 부드러워.

00:07:12.000 --> 00:07:18.000
한 가지 더 좋은 점은 흐리게 하는 뷰를 제거하여 선택한 사진을 풀 컬러로 보여주는 것입니다.

00:07:18.000 --> 00:07:24.000
그렇게 하기 위해, smallestUndimmed- DetentIdentifier라고 불리는 속성이 하나 더 있습니다.

00:07:24.000 --> 00:07:33.000
기본적으로 이 속성은 nil이며, 이는 모든 디텐트가 흐려진다는 것을 의미하지만, 디밍을 제거하려면 디밍을 원하지 않는 가장 작은 디텐트의 식별자로 설정하십시오.

00:07:33.000 --> 00:07:37.000
이 경우, 나는 그것을 중간으로 설정할 것이다.

00:07:37.000 --> 00:07:42.000
내가 피커를 불러올 때 미디엄 멈춤에 디밍이 없다는 것을 주목하세요.

00:07:42.000 --> 00:07:43.000
타다!

00:07:43.000 --> 00:07:48.000
하지만 큰 멈춤으로 크기를 조정하면 디밍은 여전히 희미해진다.

00:07:48.000 --> 00:08:02.000
디밍을 시각적으로 제거하는 것 이상으로, 이 속성은 이제 시트의 콘텐츠뿐만 아니라 시트 외부의 콘텐츠와도 상호 작용할 수 있기 때문에 고급 비모달 경험을 구축할 수 있습니다.

00:08:02.000 --> 00:08:15.000
이것은 글꼴 선택기에서 훨씬 더 심오합니다. 글꼴 선택기가 있는 동안 텍스트 범위를 선택하고, 해당 범위에 글꼴을 적용하고, 선택을 조정하고, 글꼴을 다시 적용할 수 있는 UI를 구축했습니다.

00:08:15.000 --> 00:08:20.000
이것이 어떻게 달성되는지에 대한 자세한 내용은 샘플 앱을 다운로드하세요.

00:08:20.000 --> 00:08:35.000
중간 높이 시트가 자동 키보드 회피를 지원한다는 점도 주목할 가치가 있으므로, 여기서 글꼴을 검색하면, 시트는 키보드를 설명하기 위해 자동으로 커지고, 키보드가 닫히면 시트가 자동으로 다시 축소됩니다.

00:08:35.000 --> 00:08:48.000
그래서 그것은 멈춤쇠에 대한 많은 정보였지만, 이제 저는 가로로 iPhone의 시트에 대한 새로운 옵션 모양부터 시작하여 시트에 대한 다른 새로운 시각적 사용자 지정 옵션에 관심을 돌리고 싶습니다.

00:08:48.000 --> 00:09:00.000
iOS 13에서 우리는 모든 시트를 가로로 전체 화면으로 만들었고, 이제 시트가 하단 가장자리의 화면에만 부착되는 대체 모양을 만들었습니다.

00:09:00.000 --> 00:09:06.000
이 새로운 모습을 얻으려면, prefersEdgeAttached- InCompactHeight를 true로 설정하기만 하면 됩니다.

00:09:06.000 --> 00:09:10.000
이제 이것을 설정하는 것만으로도 항상 안전한 영역만큼 넓은 시트를 얻을 수 있습니다.

00:09:10.000 --> 00:09:19.000
너비가 presentedViewControllers preferredContentSize를 따르는 시트를 원한다면, widthFollows- PreferredContentSize- WhenEdgeAttached를 true로 설정하십시오.

00:09:19.000 --> 00:09:27.000
이렇게 하면 시트의 기본 너비가 더 좁아지며, preferredContentSize를 설정하여 이 너비를 추가로 사용자 정의할 수 있습니다.

00:09:27.000 --> 00:09:31.000
이 부동산들 외에도, 당신이 원한다면 그래버를 보여줄 수 있는 부동산도 있습니다.

00:09:31.000 --> 00:09:43.000
그래버는 종종 필요하지 않지만, 스크롤이 시트의 크기를 조정하지 않을 때와 같이 시트의 크기를 조정할 수 있다는 것이 덜 명백한 경우, 그래버를 표시하는 것은 크기 조정의 유용한 지표가 될 수 있습니다.

00:09:43.000 --> 00:09:46.000
이제 시트의 모서리를 주목하세요.

00:09:46.000 --> 00:09:50.000
우리가 노출한 또 다른 옵션은 코너 반경을 사용자 정의할 수 있는 능력이다.

00:09:50.000 --> 00:09:55.000
만약 당신의 앱이 더 둥근 외관을 가지고 있다면, 당신은 그 미학을 일치시키고 싶을 수도 있습니다.

00:09:55.000 --> 00:10:05.000
시스템은 쌓인 모서리를 일관되게 유지하므로, 이 사진 선택기가 루트 시트를 뒤로 밀기 위해 확장되면, 루트 시트는 일치할 수 있는 더 큰 모서리를 가질 것입니다.

00:10:05.000 --> 00:10:16.000
마지막으로, iPad에서 멈춤쇠가 있는 시트를 만들 수 있지만, 종종 멈춤쇠와 같은 것들로 잠재적으로 사용자 정의된 컴팩트한 시트에 적응하는 대신 팝오버가 필요합니다.

00:10:16.000 --> 00:10:19.000
샘플 앱으로 이 접근 방식을 취합시다.

00:10:19.000 --> 00:10:24.000
iPad에서 이미지 선택기를 위한 팝오버를 얻으려면, 몇 가지 작은 수정을 해야 합니다.

00:10:24.000 --> 00:10:29.000
먼저, 피커의 modalPresentationStyle을 팝오버로 설정하겠습니다.

00:10:29.000 --> 00:10:40.000
그런 다음, sheetPresentationController를 잡는 대신, 이제 nil을 반환하기 때문에, modalPresentationStyle이 시트가 아니기 때문에, 나는 popoverPresentationController를 얻을 것이다.

00:10:40.000 --> 00:10:48.000
팝오버의 소스를 barButtonItem으로 설정한 다음, 팝오버에서 adaptiveSheet- PresentationController라는 새로운 속성을 잡을 것입니다.

00:10:48.000 --> 00:10:59.000
이 속성은 팝오버가 컴팩트한 크기 클래스에서 적응할 시트의 인스턴스를 반환한 다음, 이전에 시트에서 했던 것처럼 구성할 것입니다.

00:10:59.000 --> 00:11:07.000
이제 사진 버튼을 탭하면, 사진 선택기가 팝오버에 나타나고, 장면의 크기를 조정하면 중간 높이의 시트에 적응합니다.

00:11:07.000 --> 00:11:09.000
그건 작동해!

00:11:09.000 --> 00:11:14.000
그리고 내가 피커를 확장하고 사진을 선택하면-- 오, 안 돼!

00:11:14.000 --> 00:11:18.000
그것은 우리가 이전에 구현한 것처럼 자동으로 중간 높이로 크기가 조정되지 않았다.

00:11:18.000 --> 00:11:19.000
흠.

00:11:19.000 --> 00:11:23.000
피커 didFinishPicking 위임 방법으로 돌아가자.

00:11:23.000 --> 00:11:24.000
아!

00:11:24.000 --> 00:11:33.000
어댑티브 시트를 얻으려면, 여기 코드에서 popoverPresentationController의 adaptiveSheet- PresentationController를 읽어야 합니다.

00:11:33.000 --> 00:11:36.000
이제 내가 사진을 선택할 때 주목해.

00:11:36.000 --> 00:11:41.000
만세! 그것은 다시 중간 크기로 조정된다.

00:11:41.000 --> 00:11:50.000
이제, 저는 이전에 쉽게 만들 수 없었던 시트로 새로운 유형의 UI를 쉽게 만들 수 있는 많은 것들에 대해 이야기했습니다.

00:11:50.000 --> 00:11:56.000
중간 높이 시트나 비모달 경험의 혜택을 받을 수 있는 영역에 대한 자신의 앱을 검토하세요.

00:11:56.000 --> 00:12:02.000
오늘 앱에 절반 높이의 사용자 지정 카드가 있다면, 새로 향상된 UIKit 시트로 교체하세요.

00:12:02.000 --> 23:59:59.000
시청해 주셔서 감사합니다, 그리고 저는 당신이 시트로 만드는 모든 멋진 새로운 것들을 보기를 기대합니다.

