WEBVTT

00:00:01.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:10.000
안녕, 내 이름은 냇이야.

00:00:10.000 --> 00:00:13.000
그리고 나는 애플에서 게임 테크놀로지에서 일해.

00:00:13.000 --> 00:00:19.000
iOS, tvOS 및 macOS용 게임 입력에 대해 따라잡기 위해 올해 다시 참여해 주셔서 감사합니다.

00:00:19.000 --> 00:00:26.000
오늘, 저는 Apple 플랫폼에서 게임 입력을 처음 하는 사람이 어떻게 그리고 왜 그런지에 대한 간략한 요약으로 시작하겠습니다.

00:00:26.000 --> 00:00:32.000
다음으로, 나는 당신에게 새로운 유형의 가상 게임 컨트롤러를 보여줄 것이고, 우리는 함께 약간의 코드를 작성할 것입니다.

00:00:32.000 --> 00:00:37.000
마지막으로, 저는 더 많은 실제 물리적 컨트롤러에 대해 이야기하고 새로운 기능 중 일부를 통해 작업하고 싶습니다.

00:00:37.000 --> 00:00:40.000
그럼 우리의 검토부터 시작합시다.

00:00:40.000 --> 00:00:48.000
게임 컨트롤러 프레임워크의 목표는 Apple 플랫폼에서 모든 종류의 효율적이고 지연 시간이 짧은 입력에 대한 지원을 쉽게 추가할 수 있도록 하는 것입니다.

00:00:48.000 --> 00:01:01.000
일반적인 API를 통해 입력 하드웨어를 추상화함으로써, 게임 컨트롤러 프레임워크를 사용하면 입력이 어떻게 다시 매핑되었는지 또는 특정 컨트롤러, 키보드 또는 포인팅 장치 간의 차이점에 대해 걱정할 필요 없이 입력 코드를 한 번 작성할 수 있습니다.

00:01:01.000 --> 00:01:13.000
iOS, iPadOS 및 tvOS에서 플레이어는 시스템 전체 및 애플리케이션별 게임 컨트롤러 입력 리매핑을 만들 수 있으며, 이는 게임을 더 사용자 정의하고 접근하기 쉽게 만드는 데 도움이 됩니다.

00:01:13.000 --> 00:01:19.000
그리고 모든 플랫폼에서 플레이어가 들고 있는 특정 컨트롤러의 기호와 기능을 반영하도록 UI를 구축할 수 있습니다.

00:01:19.000 --> 00:01:27.000
그래서 당신의 플레이어가 팀 서클-스퀘어-트리앵글-크로스에 있든 A-B-X-Y 팀에 있든, 당신의 게임 UI는 그들에게 딱 맞을 것입니다.

00:01:27.000 --> 00:01:43.000
게임 컨트롤러 프레임워크의 기본 사항은 다양한 종류의 GCDevice 객체에 대한 알림에 반응하고 입력 상태를 위해 활성 장치를 폴링하거나 입력 상태 변경에 대한 알림을 받기 위해 값 변경 핸들러를 설정하는 것입니다.

00:01:43.000 --> 00:01:54.000
컨트롤러가 시스템에서 연결하거나 연결을 끊으면 GCController 개체가 생성되고 제거되며 GCControllerDidConnect 및 GCControllerDidDisconnect 알림이 전송됩니다.

00:01:54.000 --> 00:02:05.000
키보드가 연결되거나 분리될 때 GCKeyboard 개체와 GCMouse 개체가 장치를 연결하거나 분리할 때와 동일한 패턴입니다.

00:02:05.000 --> 00:02:12.000
예를 들어, GCController 객체가 연결되거나 연결이 끊어질 때를 알아내기 위해 관찰자를 추가하기만 하면 됩니다.

00:02:12.000 --> 00:02:21.000
그런 다음 입력 상태가 변경될 때 알리기 위해 변경 핸들러를 설정할지, 아니면 다른 곳에서 컨트롤러의 상태를 폴링할지 여부는 당신에게 달려 있습니다.

00:02:21.000 --> 00:02:26.000
이것은 컨트롤러, 키보드 또는 포인팅 장치이든 사용해야 하는 것과 동일한 패턴입니다.

00:02:26.000 --> 00:02:33.000
우리는 게임 컨트롤러를 지원하는 많은 훌륭한 새로운 게임과 컨트롤러를 잘 지원하는 게임에 대한 고객의 큰 관심을 보았습니다.

00:02:33.000 --> 00:02:37.000
그것이 우리가 사람들이 게임 컨트롤러를 지원하는 게임을 찾을 수 있도록 돕고 싶은 이유입니다.

00:02:37.000 --> 00:02:43.000
게임이 게임 컨트롤러를 지원한다는 것을 알게 되면, App Store에서 컨트롤러 지원 배지로 배지를 부착합니다.

00:02:43.000 --> 00:02:44.000
그건 작은 것 같아, 그렇지?

00:02:44.000 --> 00:02:50.000
하지만 그것은 선수들이 컨트롤러를 사용하는 것을 좋아한다면 찾고 있는 것이고, 나는 그것이 내가 찾는 배지라는 것을 알고 있다.

00:02:50.000 --> 00:02:55.000
그리고 우리는 항상 게임 컨트롤러와 잘 작동하는 앱을 큐레이팅하고 홍보하기 위해 노력하고 있습니다.

00:02:55.000 --> 00:03:00.000
게임 컨트롤러를 정말 빛나게 하는 앱을 발견할 때 게임을 위한 여러 섹션이 있습니다.

00:03:00.000 --> 00:03:07.000
나는 당신의 앱이 프로모션을 위해 선택될 것이라고 보장할 수 없지만, 당신이 컨트롤러로 훌륭한 일을 할 때, 플레이어들은 확실히 알아차릴 것입니다.

00:03:07.000 --> 00:03:10.000
그래서 여기 당신이 앱의 지원을 표시하기 위해 해야 할 모든 것이 있습니다.

00:03:10.000 --> 00:03:13.000
Xcode에서 게임 컨트롤러 기능을 추가하기만 하면 됩니다.

00:03:13.000 --> 00:03:22.000
이것은 애플리케이션의 Info.plist에 게임 컨트롤러 기능을 태그하며, App Store에 제출하기 전에 해야 할 모든 것입니다.

00:03:22.000 --> 00:03:30.000
당신의 게임에 이 기능이 있을 때, 우리는 또한 게임 컨트롤러 환경 설정 패널의 앱별 사용자 지정 섹션에 포함시키는 것을 알고 있습니다.

00:03:30.000 --> 00:03:36.000
플레이어는 원하는 대로 컨트롤을 조정할 수 있는 능력을 좋아하며, 게임의 접근성을 향상시킬 수 있는 좋은 방법입니다.

00:03:36.000 --> 00:03:44.000
입력 리매핑에 참여하기 위해 아무것도 할 필요는 없지만, 게임을 태그할 때, 플레이어는 특별히 사용자 정의할 수 있습니다.

00:03:44.000 --> 00:03:50.000
게임 컨트롤러 프레임워크를 채택할 때 무료로 얻을 수 있는 또 다른 훌륭한 기능은 스크린샷과 비디오 클립입니다.

00:03:50.000 --> 00:03:57.000
플레이어는 컨트롤러의 공유 버튼을 빠르게 터치하여 스크린샷을 캡처하거나 비디오 클립 녹화를 시작하고 중지할 수 있습니다.

00:03:57.000 --> 00:04:01.000
여기서 나는 Fox2를 하고 있어.

00:04:01.000 --> 00:04:10.000
공유 버튼을 두 번 탭하여 스크린샷을 캡처할 수 있습니다.

00:04:10.000 --> 00:04:16.000
스크린샷은 내 카메라 롤에 바로 도착하거나, macOS를 사용하는 경우 데스크톱에 도착하거나, AppleTV에서 내 휴대폰으로 AirDrop합니다.

00:04:16.000 --> 00:04:22.000
이제 공유 버튼을 길게 눌러 화면 녹화를 시작하고 중지하려면 어떻게 되는지 알 수 있습니다.

00:04:22.000 --> 00:04:32.000
조금 후에, 올해 우리가 추가한 새로운 유형의 게임 클립 녹화에 대한 소식이 있습니다.

00:04:32.000 --> 00:04:38.000
게임 광택 컨트롤러 지원을 제공하는 것에 대한 나의 마지막 조언은 UI에서 글리프를 적절하게 사용하는 것이다.

00:04:38.000 --> 00:04:43.000
이 힌트를 고려하여 버튼을 사용하여 재고를 표시하세요.

00:04:43.000 --> 00:04:47.000
MFi 또는 Xbox 컨트롤러에서, 우리는 Y 버튼을 보여줘야 한다.

00:04:47.000 --> 00:04:51.000
플레이스테이션 컨트롤러에서, 우리는 대신 삼각형을 보여주고 싶다.

00:04:51.000 --> 00:04:57.000
그것은 작은 것처럼 보일지 모르지만, 와우, 우리는 당신의 UI에 표시되는 잘못된 버튼 이름에 대한 피드백을 정말로 듣습니다.

00:04:57.000 --> 00:05:04.000
게임에 더 적합한 경우 위치 버튼 위치를 선택적으로 나타내는 다른 접근 방식을 고려할 수 있습니다.

00:05:04.000 --> 00:05:14.000
일부 플레이어, 특히 신규 및 젊은 플레이어는 당신이 그들에게 보여주고 있는 위치를 더 빨리 인식할 수 있으며 버튼 이름을 읽기 위해 내려다볼 필요가 없습니다.

00:05:14.000 --> 00:05:21.000
우리는 플레이어가 시스템 리매핑 UI에서 버튼을 다시 매핑했더라도 항상 올바른 글리프를 보여주는 것을 매우 쉽게 만들었습니다.

00:05:21.000 --> 00:05:37.000
예를 들어, 여기 다시 매핑 환경 설정에 표시된 것처럼 X 버튼을 누르는 것을 A 동작에 매핑하고 사용자에게 A 동작을 눌러 계속하도록 요청하고 싶다면, 개발자가 A 동작과 관련된 글리프를 요청할 때 실제로 X 글리프를 보여주고 싶습니다.

00:05:37.000 --> 00:05:46.000
이를 위해, 우리는 A 버튼의 sfSymbolsName을 쿼리한 다음, UIImage 시스템 이미지를 사용하여 표시할 이미지를 가져옵니다.

00:05:46.000 --> 00:05:49.000
이제 우리는 리매핑을 기반으로 올바른 글리프를 보여줄 것이다.

00:05:49.000 --> 00:05:51.000
그래서 그것은 나의 매우 빠른 요약이었다.

00:05:51.000 --> 00:05:58.000
더 자세한 정보가 필요하다면, 과거 WWDC 컨퍼런스의 게임 컨트롤러에 대한 다른 이야기를 확인하세요.

00:05:58.000 --> 00:06:04.000
그래서 지난 몇 년 동안, 우리는 iOS와 iPadOS에 게임을 가져오는 많은 개발자들과 이야기를 나눴습니다.

00:06:04.000 --> 00:06:13.000
많은 게임이 원래 게임 컨트롤러 입력을 중심으로 설계되었기 때문에, 두 개의 아날로그 스틱, 아마도 d-패드 또는 터치패드, 그리고 디지털 버튼 입력을 기대하고 있다.

00:06:13.000 --> 00:06:20.000
우리가 들은 것은 여러분 중 일부는 이 게임들에 대해 일관되고, 좋은 느낌, 멋진 터치 기반 입력을 만드는 데 어려움을 겪었다는 것입니다.

00:06:20.000 --> 00:06:27.000
우리는 당신의 터치 입력 처리 코드가 키보드, 마우스 및 게임 컨트롤러 입력 코드 경로와 다르다고 들었습니다.

00:06:27.000 --> 00:06:35.000
이 문제를 해결하기 위해, 기존의 모든 게임 컨트롤러 입력 코드와 호환되는 새로운 가상 화면 컨트롤러에 대해 말씀드리고 싶습니다.

00:06:35.000 --> 00:06:45.000
iPhone과 iPad를 위한 이 새로운 화면 컨트롤은 멋져 보이고, 손 크기에 걸쳐 그립 위치와 훌륭한 반응성과 느낌을 위해 신중하게 조정되었습니다.

00:06:45.000 --> 00:06:49.000
그것들은 당신의 애플리케이션에 쉽게 추가하고 게임 컨트롤러처럼 행동할 수 있습니다.

00:06:49.000 --> 00:07:03.000
자신만의 화면 오버레이 UI를 작성하고 터치 입력을 게임 입력 시스템으로 변환하는 대신, 이러한 화면 컨트롤은 게임 컨트롤러 프레임워크 GCController 객체처럼 코드에 표시되므로 입력 로직이 훨씬 더 일관성을 유지할 수 있습니다.

00:07:03.000 --> 00:07:13.000
그것들은 당신의 기호로 사용자 정의할 수 있으며, iOS와 iPadOS의 디자인 언어의 요소를 공유하면서 색상과 스타일과 통합됩니다.

00:07:13.000 --> 00:07:22.000
그들은 당신이 하나의 버튼, 세 개의 버튼 또는 d-패드와 여러 개의 버튼을 원하는지에 따라 다양한 레이아웃으로 조정됩니다.

00:07:22.000 --> 00:07:31.000
화면 컨트롤러의 핵심 원리는 왼쪽과 오른쪽 영역이 독립적으로 구성되고 레이아웃이 구성에 따라 결정된다는 것입니다.

00:07:31.000 --> 00:07:34.000
요소의 수동 배치는 지원되지 않습니다.

00:07:34.000 --> 00:07:42.000
측면별로, 구성은 0개에서 4개의 버튼과 썸스틱, d-패드 또는 터치패드 중 하나로 만들 수 있습니다.

00:07:42.000 --> 00:07:45.000
버튼과 막대기에 햅틱이 있다.

00:07:45.000 --> 00:07:48.000
그리고 마지막으로, 구성은 창조 시점에 고정된다.

00:07:48.000 --> 00:07:54.000
요소를 표시하고 숨길 수 있지만, 새로운 가상 컨트롤러를 만들지 않고는 추가하거나 제거할 수 없습니다.

00:07:54.000 --> 00:07:59.000
그래서 레이아웃을 선택하고 화면에 가상 게임 컨트롤러를 보여주기 위해 무엇을 하는지 살펴봅시다.

00:07:59.000 --> 00:08:07.000
먼저, 사용할 수 있는 모든 버튼과 조이스틱을 식별하는 GCControllerConfiguration을 만듭니다.

00:08:07.000 --> 00:08:10.000
그런 다음, 그 구성에서 가상 컨트롤러를 만듭니다.

00:08:10.000 --> 00:08:18.000
그런 다음, 사용자 지정 모양을 설정하거나 일부 요소를 숨기는 것과 같은 요소에 대한 구성을 선택적으로 수행할 수 있습니다.

00:08:18.000 --> 00:08:30.000
다음으로, 시스템에 컨트롤러를 연결하라고 말하면, 처리에 익숙한 것과 동일한 GCGameControllerDidConnect 알림을 트리거하고 GCController 객체를 제공합니다.

00:08:30.000 --> 00:08:39.000
그래서 내가 여기서 보여주고 있는 것과 같은 레이아웃을 얻기 위해 우리가 쓸 코드를 살펴봅시다: 왼쪽에 썸스틱, 오른쪽에 썸스틱, 오른쪽에 A와 B 버튼.

00:08:39.000 --> 00:08:41.000
그건 정말 쉬워.

00:08:41.000 --> 00:08:45.000
우리는 새로운 GCVirtualControllerConfiguration 객체를 만드는 것으로 시작합니다.

00:08:45.000 --> 00:08:47.000
그런 다음 우리는 우리가 원하는 요소를 확립한다.

00:08:47.000 --> 00:08:53.000
우리는 이전 사진과 마찬가지로 오른쪽에 두 개의 썸스틱과 두 개의 버튼을 원합니다.

00:08:53.000 --> 00:08:57.000
다음으로 우리는 그 구성을 사용하여 GCVirtualController 객체를 만들 것입니다.

00:08:57.000 --> 00:09:04.000
그리고 마지막으로 우리는 연결에 전화할 것입니다; 우리의 표준 GCControllerDidConnectNotification이 도착할 것입니다.

00:09:04.000 --> 00:09:06.000
그래서 그건 쉬웠어.

00:09:06.000 --> 00:09:11.000
하지만 이 사진에 있는 것처럼 이 버튼에 대한 우리만의 비주얼을 어떻게 설정하나요?

00:09:11.000 --> 00:09:16.000
이것은 GCVirtualController 요소 구성을 조정함으로써 쉽게 수행됩니다.

00:09:16.000 --> 00:09:26.000
회전 공격을 나타내기 위해 A 버튼을 변경하고 점프를 나타내기 위해 B 버튼을 설정한 이 레이아웃을 만들기 위해, BezierPath를 추가하기 위해 A 버튼의 구성을 조정하기만 하면 됩니다.

00:09:26.000 --> 00:09:30.000
그런 다음 BezierPath를 설정하기 위해 B 버튼을 설정했다.

00:09:30.000 --> 00:09:35.000
Config.hidden 속성을 사용하여 다른 버튼 요소를 표시하고 숨기는 것은 간단합니다.

00:09:35.000 --> 00:09:39.000
보시다시피, 이 컨트롤을 원하는 대로 사용자 정의하는 데 많은 시간이 걸리지 않습니다.

00:09:39.000 --> 00:09:44.000
좋아, 그럼 물리적 컨트롤러의 가상 세계가 아닌 세계로 돌아가자.

00:09:44.000 --> 00:09:48.000
플레이어가 선택할 수 있는 훌륭한 컨트롤러가 너무 많다.

00:09:48.000 --> 00:09:53.000
Made for iPhone, MFi 컨트롤러가 많이 있으며, 우리는 항상 새로운 것과 개선 사항을 봅니다.

00:09:53.000 --> 00:10:00.000
이제 L3/R3 썸스틱 트리거와 더 많은 시스템 버튼이 있는 독립형 SteelSeries Nimbus+는 정말 훌륭합니다.

00:10:00.000 --> 00:10:04.000
나는 또한 폼 피팅 Razer Kishi와 Backbone One의 열렬한 팬이다.

00:10:04.000 --> 00:10:09.000
이러한 유형의 폼 피팅 컨트롤러는 내 배낭에 보관해야 할 나의 새로운 가장 좋아하는 것이다.

00:10:09.000 --> 00:10:21.000
물론, MFi 컨트롤러 외에도, 우리는 모든 Apple 플랫폼에서 Sony DualShock 4와 Xbox One 컨트롤러를 지원하며, 플레이어는 작년에 추가한 Xbox Elite V2와 Xbox 적응형 컨트롤러 지원을 좋아합니다.

00:10:21.000 --> 00:10:29.000
우리는 방금 최신 세대의 콘솔 컨트롤러에 대한 iOS 14.5와 macOS 11.3에 지원을 추가했습니다.

00:10:29.000 --> 00:10:38.000
소니 듀얼센스 컨트롤러와 Xbox 시리즈 X 컨트롤러는 정말 멋진 느낌의 컨트롤러이며, 게임 컨트롤러 프레임워크를 사용할 때만 작동합니다.

00:10:38.000 --> 00:10:45.000
Xbox 시리즈 X 컨트롤러에는 새로운 전용 공유 버튼이 있으며, 듀얼센스에는 멋진 적응형 트리거 기술이 있습니다.

00:10:45.000 --> 00:10:49.000
잠시 시간을 내어 적응형 트리거와 그것들을 어떻게 사용할 수 있는지 알아봅시다.

00:10:49.000 --> 00:10:54.000
듀얼센스 적응형 트리거를 사용하면 강제 피드백을 사용하여 게임 몰입도를 향상시킬 수 있습니다.

00:10:54.000 --> 00:11:05.000
플레이어가 하는 일에 따라 방아쇠에 다양한 저항을 동적으로 적용함으로써, 당신은 긴장과 더 많은 감각에 있는 활 끈이나 새총을 당기는 느낌을 모방할 수 있습니다.

00:11:05.000 --> 00:11:08.000
나는 네가 이 방아쇠가 얼마나 좋은지 느낄 기회를 얻길 바라.

00:11:08.000 --> 00:11:12.000
게임 컨트롤러 프레임워크에서 적응형 트리거를 지원하는 방법은 정말 간단하다.

00:11:12.000 --> 00:11:18.000
먼저, 플레이어 컨트롤러의 물리적 입력 프로필이 듀얼센스인지 확인해야 합니다.

00:11:18.000 --> 00:11:24.000
다음으로, 메소드 호출로 당신이 하고 있는 적응형 트리거 효과를 설정하기만 하면 됩니다.

00:11:24.000 --> 00:11:32.000
정말 역동적인 효과를 만들고 싶다면, 적응형 트리거와 게임의 상태를 지속적으로 읽고 그에 따라 효과를 조정할 수 있습니다.

00:11:32.000 --> 00:11:39.000
예를 들어, 방아쇠를 더 세게 당기거나 플레이어가 밧줄을 더 큰 장력으로 당길 때 더 많은 저항을 가할 수 있습니다.

00:11:39.000 --> 00:11:46.000
마지막으로, 아이들이 방을 떠날 때 불을 끄라고 상기시키는 것처럼, 끝나면 적응형 트리거 효과를 꺼야 합니다.

00:11:46.000 --> 00:11:50.000
실제로 이것을 달성하는 방법을 보기 위해 빠른 코드 예제로 넘어갑시다.

00:11:50.000 --> 00:11:56.000
그래서 플레이어가 일부 목표물을 쓰러뜨리기 위해 새총을 발사할 수 있는 게임이 있다고 가정해 봅시다.

00:11:56.000 --> 00:12:01.000
플레이어는 왼쪽 방아쇠로 조준을 시작하고 오른쪽 방아쇠로 새총을 뒤로 당길 수 있다.

00:12:01.000 --> 00:12:05.000
우리는 플레이어가 새총을 뒤로 당길 때 적응형 트리거 효과를 추가하고 싶습니다.

00:12:05.000 --> 00:12:09.000
먼저, 우리는 플레이어의 컨트롤러가 듀얼센스인지 확인하고 싶을 것이다.

00:12:09.000 --> 00:12:15.000
우리 게임은 싱글 플레이어 게임이기 때문에, GCController.current를 확인하여 활성 컨트롤러를 얻을 수 있습니다.

00:12:15.000 --> 00:12:19.000
그 후, 우리는 듀얼센스의 올바른 적응형 트리거를 잡을 수 있다.

00:12:19.000 --> 00:12:25.000
이 예에서, 우리는 플레이어가 새총을 조준할 때만 저항력을 적용하고 싶을 것이다.

00:12:25.000 --> 00:12:31.000
우리는 방아쇠가 얼마나 멀리 당겨졌는지에 따라 적용된 저항의 강도를 동적으로 계산할 것이다.

00:12:31.000 --> 00:12:38.000
방아쇠가 완전히 뒤로 당겨지지 않았다면, 우리는 적응형 방아쇠에 피드백 효과를 적용할 것이다.

00:12:38.000 --> 00:12:42.000
피드백 효과는 방아쇠를 당길 때 손가락에 일정한 저항을 제공합니다.

00:12:42.000 --> 00:12:49.000
이제, 그렇지 않으면, 방아쇠가 완전히 뒤로 당겨졌다면, 우리는 저주파의 진동 효과를 적용할 것이다.

00:12:49.000 --> 00:12:56.000
이 효과는 방아쇠를 진동하게 하며, 그 새총을 뒤로 당기고 긴장시키기 위해 고군분투하는 느낌을 모방한다.

00:12:56.000 --> 00:13:01.000
마지막으로, 플레이어가 새총을 발사하면, 우리는 적응형 방아쇠를 끄고 싶다.

00:13:01.000 --> 00:13:06.000
오늘 대화의 마지막 주제는 게임 컨트롤러 공유 버튼을 통한 미디어 캡처에 관한 것입니다.

00:13:06.000 --> 00:13:11.000
작년에, 우리는 컨트롤러의 지정된 공유 버튼에 미디어 캡처 제스처를 도입했습니다.

00:13:11.000 --> 00:13:21.000
공유 버튼은 일반적으로 컨트롤러의 가장 왼쪽 상단에 있는 시스템 버튼에 매핑되지만, Xbox Series X와 같은 일부 컨트롤러에는 다른 곳에 공유라는 버튼이 있습니다.

00:13:21.000 --> 00:13:31.000
앞서 보여드린 바와 같이, 미디어 캡처를 위한 시스템 제스처는 카메라 롤의 스크린샷을 캡처하기 위해 두 번 누르고, ReplayKit 녹화를 시작하고 중지하기 위해 길게 누르는 것입니다.

00:13:31.000 --> 00:13:36.000
올해, 우리는 매우 멋진 새로운 유형의 미디어 캡처, 15초 하이라이트를 추가하고 있습니다.

00:13:36.000 --> 00:13:47.000
따라서 이제 녹음을 시작하고 중지하는 것을 기억해야 하는 대신, 플레이어는 자동 배경 버퍼링을 켜서 길게 누를 때마다 게임 플레이의 마지막 15초를 저장할 수 있습니다.

00:13:47.000 --> 00:13:55.000
ReplayKit 클립은 게이머들이 훌륭한 보스 전투, 놀라운 콤보 동작 또는 서사시적인 실패를 포착할 수 있는 멋진 방법입니다.

00:13:55.000 --> 00:14:08.000
더 긴 녹화를 시작하고 중지하거나 배경 녹화를 시작하는 자동 형태 중에서 선택하려면 15초 하이라이트를 저장할 수 있습니다. 게임 컨트롤러 환경 설정 패널에서 글로벌 또는 애플리케이션별 설정을 전환하기만 하면 됩니다.

00:14:08.000 --> 00:14:13.000
게임에서 중요한 포인트에 대한 자신의 하이라이트를 트리거하고 싶다면, 이를 위한 API가 있습니다.

00:14:13.000 --> 00:14:16.000
그것은 또한 15초 스냅샷을 트리거할 것이다.

00:14:16.000 --> 00:14:18.000
휴. 알았어.

00:14:18.000 --> 00:14:21.000
그래서 그것은 올해의 게임 입력 뉴스를 마무리한다.

00:14:21.000 --> 00:14:30.000
가기 전에, 앱별 사용자 지정을 위해 게임 컨트롤러 지원으로 앱을 태그하는 것을 잊지 마세요. 그러면 App Store가 앱을 올바르게 분류할 수 있습니다.

00:14:30.000 --> 00:14:35.000
우리는 당신이 게임에서 게임 컨트롤러, 키보드 및 마우스 입력을 어떻게 사용하는지 정말 기대하고 있습니다.

00:14:35.000 --> 00:14:45.000
게임 개발자와 게이머를 위한 기능에 대한 더 많은 프레젠테이션을 볼 준비가 되었다면, "ReplayKit으로 롤링 클립 발견"과 "Game Center의 새로운 기능"도 확인하세요.

00:14:45.000 --> 00:14:47.000
봐줘서 정말 고마워.

00:14:47.000 --> 00:14:48.000
우리는 곧 당신을 직접 다시 볼 수 있기를 바랍니다.

00:14:48.000 --> 00:14:53.000
현재로서는, 우리는 온라인으로 당신을 만나고 당신의 질문에 답하는 것을 돕기를 고대하고 있습니다.

00:14:53.000 --> 23:59:59.000
[쾌활한 음악].

