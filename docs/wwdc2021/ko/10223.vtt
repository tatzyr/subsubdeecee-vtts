WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
다니엘 사이크스-터너: 안녕하세요, 제 이름은 다니엘 사이크스-터너이고 접근성 엔지니어입니다.

00:00:14.000 --> 00:00:27.000
이 강연에서 제 동료 비라타와 저는 watchOS의 접근성 기능 중 일부와 개발자로서 이러한 기능을 사용하는 사람들을 지원하기 위해 시계 앱을 어떻게 구축할 수 있는지 살펴볼 것입니다.

00:00:27.000 --> 00:00:33.000
오늘의 강연에서, 당신은 먼저 watchOS의 접근성에 대해 소개할 것입니다.

00:00:33.000 --> 00:00:41.000
그런 다음 접근성 API를 살펴보고 다양한 유형의 시각적 접근성을 지원하기 위해 무엇을 할 수 있는지 보여드리겠습니다.

00:00:41.000 --> 00:00:50.000
그리고 마지막으로, 비라타는 시계에서 모터 접근성이 어떻게 작동하는지 그리고 그것을 지원하기 위해 무엇을 할 수 있는지 안내할 것입니다.

00:00:50.000 --> 00:00:54.000
watchOS에서 접근성을 시작합시다.

00:00:54.000 --> 00:00:59.000
접근성은 그들에게 가장 적합한 방식으로 장치를 사용하는 사람들에 관한 것이다.

00:00:59.000 --> 00:01:07.000
그리고 그것은 당신의 앱에 최고의 사용자 경험을 제공하기 위해 접근성을 고려해야 한다는 것을 의미합니다.

00:01:07.000 --> 00:01:13.000
Apple Watch에는 앱을 더 쉽게 사용할 수 있는 다양한 접근성 기능이 있습니다.

00:01:13.000 --> 00:01:27.000
예를 들어, VoiceOver와 같은 보조 기술은 시각 장애가 있는 사람들이 콘텐츠를 다시 읽는 동안 일련의 제스처와 탭을 사용하여 화면을 탐색하여 Apple Watch를 최대한 활용할 수 있게 해준다.

00:01:27.000 --> 00:01:34.000
그리고 올해 watchOS의 새로운 기능은 Apple Watch를 위해 특별히 재창조된 AssistiveTouch입니다.

00:01:34.000 --> 00:01:42.000
AssistiveTouch는 운동 장애가 있는 사람들이 화면을 전혀 터치할 필요 없이 Apple Watch를 사용할 수 있게 해준다.

00:01:42.000 --> 00:01:47.000
비라타는 나중에 이것이 어떻게 작동하는지 그리고 당신이 그것을 지원하기 위해 무엇을 할 수 있는지 보여줄 것입니다.

00:01:47.000 --> 00:01:59.000
watchOS는 또한 모션 감소, 굵은 텍스트, 그리고 올해 새로운 큰 접근성 텍스트 크기와 같은 여러 디스플레이 편의 시설을 제공합니다.

00:01:59.000 --> 00:02:03.000
watchOS의 시각적 접근성에 대해 이야기해 봅시다.

00:02:03.000 --> 00:02:14.000
올바른 API로 접근성을 지원하면 앱이 WatchKit 또는 SwiftUI로 작성되었는지 여부에 관계없이 VoiceOver가 사용자에게 올바르게 작동하도록 할 수 있습니다.

00:02:14.000 --> 00:02:17.000
이 강연은 SwiftUI의 접근성에 초점을 맞출 것이다.

00:02:17.000 --> 00:02:23.000
그러나, 여기서 배운 모든 원칙이 WatchKit에도 적용될 것이라는 것을 알아두세요.

00:02:23.000 --> 00:02:29.000
그리고 앱에 접근할 수 있도록 할 때, 합병증과 알림을 잊지 마세요.

00:02:29.000 --> 00:02:39.000
합병증과 동적 알림은 또한 앱에서 콘텐츠를 전달하는 또 다른 경로 역할을 하기 때문에 보조 기술을 지원해야 합니다.

00:02:39.000 --> 00:02:43.000
이제, 앱을 만들기 위해 새로운 것을 배우는 가장 좋은 방법이 아닌가요?

00:02:43.000 --> 00:02:52.000
운 좋게도 나는 집에서 식물을 재배하는 데 꽤 투자하게 되었기 때문에 그것들을 돌보는 데 도움이 되는 앱을 만들기로 결정했다.

00:02:52.000 --> 00:03:08.000
이제, 아직 끝나지 않았지만, 여기 메인 화면에는 다가오는 식물 관리 작업 일정을 포함하여 내 식물에 대한 모든 정보가 있습니다: 5일 안에 물을 주고, 7일 안에 수정하고, 중간 정도의 햇빛에 보관하세요.

00:03:08.000 --> 00:03:11.000
여기 목록에도 다른 식물이 몇 개 있어.

00:03:11.000 --> 00:03:18.000
그런 다음 각 식물에 대해, 물을 주거나 수정하는 것과 같은 작업을 기록하는 데 사용할 수 있는 두 개의 버튼이 있습니다.

00:03:18.000 --> 00:03:25.000
그리고 세포를 두드리면, 나는 급수와 수정 사이의 일수를 조정할 수 있다.

00:03:25.000 --> 00:03:30.000
이것은 유익한 앱이기 때문에, 각 셀에는 상당한 양의 텍스트가 포함되어 있다.

00:03:30.000 --> 00:03:38.000
여기서 저는 시스템 텍스트 크기가 기본 크기일 때 앱이 어떻게 생겼는지 보여주고 있습니다; 꽤 좋아 보입니다.

00:03:38.000 --> 00:03:52.000
하지만 왼쪽에 표시된 것처럼 시스템 텍스트 크기를 매우 작게 변경하면 버튼과 작업 목록 텍스트의 크기가 조정되는 동안 식물 이름 제목은 같은 크기로 유지된다는 것을 알 수 있습니다.

00:03:52.000 --> 00:04:03.000
그런 다음 오른쪽의 접근성 엑스트라 라지로 이동할 때, 작업 목록 텍스트 크기가 너무 커져서 잘렸고 더 이상 화면의 모든 정보에 맞지 않습니다.

00:04:03.000 --> 00:04:08.000
우리 앱이 어떻게 동적 유형을 더 잘 지원할 수 있는지 살펴봅시다.

00:04:08.000 --> 00:04:15.000
PlantView의 코드를 검사하면, 제목과 기타 콘텐츠가 있는 VStack이 있습니다.

00:04:15.000 --> 00:04:19.000
제 제목에 사용한 글꼴이 고정된 글꼴 크기를 사용하고 있다는 것을 주목하세요.

00:04:19.000 --> 00:04:23.000
그건 확실히 내 제목이 크기를 바꾸는 것을 막을 거야.

00:04:23.000 --> 00:04:29.000
고정된 글꼴 크기를 사용하는 대신, 제공된 11가지 텍스트 스타일 중 하나를 사용해야 합니다.

00:04:29.000 --> 00:04:34.000
왼쪽의 텍스트 스타일은 기본 시스템 텍스트 크기로 표시됩니다.

00:04:34.000 --> 00:04:40.000
그리고 가장 큰 텍스트 크기로 확장하면, 오른쪽에 있는 텍스트 스타일의 크기로 커진다.

00:04:40.000 --> 00:04:48.000
텍스트 스타일을 사용하면, 시스템은 시스템 텍스트 크기 설정으로 글꼴 크기를 자동으로 조정합니다.

00:04:48.000 --> 00:05:00.000
따라서 PlantView 코드를 다시 살펴보면, 제목 글꼴을 더 작은 크기의 제목을 위해 title3 텍스트 스타일로 변경하여 빠르고 쉽게 변경할 수 있습니다.

00:05:00.000 --> 00:05:04.000
다음으로 작업 목록에서 잘린 텍스트를 수정해 봅시다.

00:05:04.000 --> 00:05:16.000
내 PlantTaskLabel의 코드에서, 나는 텍스트가 한 줄로만 확장될 수 있는 HStack의 모든 것에 1의 lineLimit을 할당하고 있다.

00:05:16.000 --> 00:05:23.000
UI에 필요한 만큼의 라인으로 조정할 수 있는 유연성을 제공하려면, lineLimit을 지원해야 하는 최대 라인 수로 설정하십시오.

00:05:23.000 --> 00:05:28.000
또는 무제한의 줄을 허용하기 위해 제거하세요.

00:05:28.000 --> 00:05:29.000
이제 우리는 진전을 이루고 있어.

00:05:29.000 --> 00:05:36.000
하지만 UI는 확실히 더 크고 더 이상 잘림이 없지만, 그 과정에서 훨씬 더 붐비고 있다.

00:05:36.000 --> 00:05:40.000
그리고 화면의 정보를 읽는 것은 여전히 쉽지 않다.

00:05:40.000 --> 00:05:46.000
때때로 더 큰 텍스트 스타일을 위한 레이아웃은 다르게 구조화되어야 한다.

00:05:46.000 --> 00:05:54.000
그래서 레이아웃을 구축할 때, 나는 이것이 바뀔 때마다 업데이트를 받기 위해 sizeCategory에 환경 속성 래퍼를 만들 것이다.

00:05:54.000 --> 00:05:59.000
다음으로, 크기 범주에 따라 UI를 조정하기만 하면 됩니다.

00:05:59.000 --> 00:06:05.000
이 경우, 작업 목록의 텍스트는 extraExtraLarge 어딘가를 감싸기 시작합니다.

00:06:05.000 --> 00:06:10.000
그래서 만약 크기 카테고리가 이것보다 작다면, 나는 우리가 전에 본 PlantView를 사용할 것이다.

00:06:10.000 --> 00:06:19.000
하지만 그것이 더 크다면, 나는 각 라벨과 버튼을 쌓는 이 새로운 수직 식물 보기를 사용하여 훨씬 더 많은 성장 공간을 제공할 것이다.

00:06:19.000 --> 00:06:22.000
그게 훨씬 나아 보여.

00:06:22.000 --> 00:06:31.000
시계에 큰 접근성 텍스트 스타일이 도입됨에 따라, 우리는 더 많은 사람들이 동적 유형을 사용하는 것을 볼 것으로 예상합니다 - 그리고 당신은 그래야 합니다!

00:06:31.000 --> 00:06:37.000
Apple Watch를 설정하는 사람들을 위해, 이제 시작할 때 텍스트 크기를 사용자 정의할 수 있는 옵션이 표시됩니다.

00:06:37.000 --> 00:06:46.000
그리고 그들이 변경하지 않으면, 시계는 자동으로 전화기에서 사용되는 것과 가장 가까운 크기를 선택할 것이다.

00:06:46.000 --> 00:06:54.000
따라서 동적 유형을 요약하자면, 시계 앱이 더 큰 텍스트 크기로 잘 작동하도록 하는 세 가지 핵심 사항이 있습니다.

00:06:54.000 --> 00:07:00.000
먼저, 고정된 글꼴 크기가 아닌 텍스트 스타일을 항상 사용해야 합니다.

00:07:00.000 --> 00:07:05.000
둘째, 잘리지 않도록 텍스트를 래핑하세요.

00:07:05.000 --> 00:07:12.000
그리고 셋째, 필요한 경우, 콘텐츠가 너무 붐비면 수직으로 쌓인 레이아웃으로 전환하세요.

00:07:12.000 --> 00:07:23.000
이것은 큰 텍스트의 표면만 긁기 때문에, 게임을 실제로 강화하기 위해 "Dynamic Type으로 앱 구축"이라는 이야기를 확인하는 것이 좋습니다.

00:07:23.000 --> 00:07:31.000
그리고 훌륭한 시각적 경험을 만드는 것에 대해 더 알아보려면, "앱에 시각적으로 접근할 수 있도록 하세요"라는 강연을 확인하세요.

00:07:31.000 --> 00:07:34.000
그래, 시각적으로, 그건 잘 작동해.

00:07:34.000 --> 00:07:36.000
하지만 내가 시각적 사용자가 아니라면 어땠을까?

00:07:36.000 --> 00:07:43.000
VoiceOver를 켜고 그 경험이 어떤지 들어봅시다.

00:07:43.000 --> 00:07:46.000
음성 해설: WWDaisy.

00:07:46.000 --> 00:07:50.000
데이지, 이미지.

00:07:50.000 --> 00:07:53.000
드롭, 이미지.

00:07:53.000 --> 00:07:55.000
5일.

00:07:55.000 --> 00:07:58.000
잎, 이미지.

00:07:58.000 --> 00:08:01.000
7일.

00:08:01.000 --> 00:08:04.000
더 높은 밝기, 이미지.

00:08:04.000 --> 00:08:06.000
중간.

00:08:06.000 --> 00:08:10.000
드롭, 채우기, 버튼.

00:08:10.000 --> 00:08:14.000
잎, 채우기, 버튼.

00:08:14.000 --> 00:08:18.000
다니엘: 좋아, 그래서 확실히 우리가 할 수 있는 몇 가지 개선이 있어.

00:08:18.000 --> 00:08:22.000
첫 번째는 상호 작용할 수 있는 요소의 수를 줄이는 것이다.

00:08:22.000 --> 00:08:25.000
현재로서는, 이것은 다소 복잡한 견해이다.

00:08:25.000 --> 00:08:31.000
각 셀에는 네 개의 라벨, 네 개의 이미지, 두 개의 버튼이 있다.

00:08:31.000 --> 00:08:38.000
그리고 현재, 두 번째 식물에 가려면, 나는 첫 번째 식물 세포의 모든 항목을 지나쳐야 한다.

00:08:38.000 --> 00:08:49.000
또한 물, 비료, 햇빛에 대한 이미지 아이콘은 텍스트에 대한 별도의 요소로 읽혀졌고, 그들의 라벨은 우리의 맥락에도 의미가 없었다.

00:08:49.000 --> 00:08:57.000
마지막으로, 하단의 두 버튼은 사용되는 기호가 제공하는 기본 라벨을 사용하고 있었다.

00:08:57.000 --> 00:09:05.000
그래서 우리가 이야기한 첫 번째 문제는 내가 1번 공장에서 2번 공장으로 이동하기 위해 너무 많은 항목을 탐색해야 한다는 것이다.

00:09:05.000 --> 00:09:17.000
NavigationLink를 만들 때, 나는 각 요소의 접근성 상태를 이해하기 위해 아이들의 accessibilityElement 그룹을 .contain으로 지정함으로써 이것을 했다.

00:09:17.000 --> 00:09:26.000
하지만 이것이 좋아 보이기 때문에, 나는 이 줄을 제거할 것이고, NavigationLink는 아이들의 모든 접근성 정보를 자동으로 결합할 것이다.

00:09:26.000 --> 00:09:33.000
이제 셀은 단일 요소로 취급되며 판독된 내용은 "WWDaisy"이다. 5일.

00:09:33.000 --> 00:09:37.000
7일. 중간. 버튼."

00:09:37.000 --> 00:09:48.000
그 작업 목록은 여전히 약간의 작업이 필요하므로 다음으로, 각각에 더 나은 라벨을 부여하여 다가오는 식물 관리 작업에 대한 맥락을 제공합시다.

00:09:48.000 --> 00:09:51.000
라벨은 PlantTask에 의해 결정된다.

00:09:51.000 --> 00:09:59.000
그래서 내 PlantTaskLabel 구조체 안에서, 나는 각 식물 작업에 대해 다른 문자열을 반환하기 위해 접근성 라벨을 변경할 것이다.

00:09:59.000 --> 00:10:03.000
이것은 내가 버튼에 라벨을 붙이는 데 사용할 것과 같은 기술이다.

00:10:03.000 --> 00:10:10.000
이제 그 내용은 "WWDaisy"로 읽힌다. 5일 안에 물을 줘. 7일 안에 수정하기.

00:10:10.000 --> 00:10:13.000
중간 정도의 햇빛에 보관하세요. 버튼."

00:10:13.000 --> 00:10:23.000
그리고 물과 비료 버튼은 "로그 급수, 버튼"과 "로그 비료, 버튼"으로 읽혀질 것이다.

00:10:23.000 --> 00:10:29.000
지금까지, 많은 작업이 자동으로 이루어지며, 몇 가지 추가 수정자만 필요합니다.

00:10:29.000 --> 00:10:34.000
사실, SwiftUI를 사용하면 대부분의 접근성이 무료로 제공됩니다.

00:10:34.000 --> 00:10:36.000
당신은 아마 몇 줄의 코드를 작성할 것입니다.

00:10:36.000 --> 00:10:40.000
하지만 때때로, 당신은 사용자 지정 컨트롤을 구축해야 할 수도 있습니다.

00:10:40.000 --> 00:10:47.000
나는 내 식물의 급수와 비료 빈도를 조정할 수 있도록 맞춤형 카운터를 만들었다.

00:10:47.000 --> 00:10:50.000
한 번 보자.

00:10:50.000 --> 00:10:53.000
VoiceOver: 며칠 동안의 급수 빈도, 방향.

00:10:53.000 --> 00:10:56.000
제거, 버튼.

00:10:56.000 --> 00:10:59.000
여덟.

00:10:59.000 --> 00:11:03.000
추가, 버튼. 추가해.

00:11:03.000 --> 00:11:07.000
다니엘: 그래서 이것은 기술적으로 효과가 있지만, 이상적인 경험은 아니다.

00:11:07.000 --> 00:11:12.000
여기서 목표는 이 세 가지 항목을 하나의 접근 가능한 요소로 바꾸는 것이다.

00:11:12.000 --> 00:11:17.000
이를 위해, 저는 우리의 접근성 요소 수정자를 사용하는 것으로 시작하겠습니다.

00:11:17.000 --> 00:11:23.000
이것은 새로운 더 높은 수준의 요소를 만들 것이다; 하지만 이번에는 모든 아이들을 무시할 것이다.

00:11:23.000 --> 00:11:28.000
이것은 실제로 접근성 요소의 기본 동작이다.

00:11:28.000 --> 00:11:32.000
그래서 나는 같은 행동을 하기 위해 매개 변수를 비워 둘 수 있다.

00:11:32.000 --> 00:11:42.000
그리고 저는 아이들을 무시하고 있기 때문에, 이것은 자동으로 제공된 접근성 작업과 함께 추가 및 제거 버튼 라벨을 폐기합니다.

00:11:42.000 --> 00:11:53.000
대신, 나는 accessibilityAdjustableAction을 사용하여 사용자가 카운터에서 위아래로 스와이프하여 값을 늘리거나 감소할 수 있도록 할 것이다.

00:11:53.000 --> 00:11:59.000
그리고 이제 나는 하나의 요소만 가지고 있기 때문에, 작업 이름을 사용하여 하나의 라벨을 줄 것이다.

00:11:59.000 --> 00:12:05.000
이것은 "주수 주파수" 또는 "비료 주파수"로 끝날 것이다.

00:12:05.000 --> 00:12:08.000
마지막으로, 나는 그것에 가치를 부여할 것이다.

00:12:08.000 --> 00:12:18.000
accessibilityValue는 변경될 때마다 판독되는 반면, 라벨은 요소로 이동할 때만 판독됩니다.

00:12:18.000 --> 00:12:22.000
VoiceOver: 며칠 동안의 급수 빈도, 방향.

00:12:22.000 --> 00:12:27.000
급수 빈도. 8일. 조절 가능.

00:12:27.000 --> 00:12:28.000
9일.

00:12:28.000 --> 00:12:32.000
다니엘: 좋아. 그게 훨씬 더 잘 작동해.

00:12:32.000 --> 00:12:37.000
방금 보셨듯이, SwiftUI는 VoiceOver에서 시계 앱에 쉽게 접근할 수 있도록 했습니다.

00:12:37.000 --> 00:12:45.000
그리고 좋은 것은 이것이 SwiftUI이기 때문에 동일한 코드가 macOS와 iOS에서도 작동한다는 것입니다.

00:12:45.000 --> 00:12:54.000
SwiftUI로 환상적인 경험을 설계하는 것에 대해 자세히 알아보려면, "SwiftUI의 접근성"이라는 강연을 확인하세요.

00:12:54.000 --> 00:13:04.000
그리고 SwiftUI 접근성을 사용할 때 새로운 도구와 API에 대해 알아보려면, "SwiftUI 접근성: 기본을 넘어서"라는 강연을 확인하세요.

00:13:04.000 --> 00:13:14.000
이제, 시각적 접근성에서 넘어가기 전에, 저는 두 가지를 더 강조하고 싶습니다: 합병증과 알림.

00:13:14.000 --> 00:13:23.000
합병증은 앱의 트래픽이 많은 창이므로, 물론 접근 가능한 방식으로 정보를 제공해야 합니다.

00:13:23.000 --> 00:13:33.000
다양한 유형의 합병증이 있지만 대부분은 텍스트, 이미지 및 기호의 세 가지 구성 요소로 구성됩니다.

00:13:33.000 --> 00:13:43.000
텍스트는 VoiceOver에 의해 자동으로 선택되지만, 텍스트에 약어가 포함되어 있다면, 축약되지 않은 버전으로 접근성 라벨을 추가해야 합니다.

00:13:43.000 --> 00:13:52.000
여기서 우리는 약어인 "3월 9일 수요일"을 "3월 9일 수요일"의 전체 형태로 확장합니다.

00:13:52.000 --> 00:13:55.000
이미지 기반 합병증 또한 매우 흔하다.

00:13:55.000 --> 00:14:02.000
여기에도 접근성 라벨을 제공해야 합니다. 그렇지 않으면 이미지 이름이 대신 사용될 것입니다.

00:14:02.000 --> 00:14:10.000
"달"은 "달의 실시간 보기"만큼 묘사적이지 않다. 3분기."

00:14:10.000 --> 00:14:24.000
SF 기호와 같은 특정 아이콘은 "드롭, 채우기"와 같은 기본 접근성 라벨과 함께 제공될 수 있지만, 기호와 함께 제공되는 라벨이 당신에게 가장 적합한지 확인하십시오.

00:14:24.000 --> 00:14:28.000
"3일 동안의 물"은 나에게 훨씬 더 말이 된다.

00:14:28.000 --> 00:14:34.000
알림에 관해서는, 이것들은 앱이 사용자에게 많은 정보를 보낼 수 있는 또 다른 방법입니다.

00:14:34.000 --> 00:14:46.000
따라서 일부 알림은 상당히 간단하지만, 동적 알림과 같은 다른 알림은 복잡한 보기를 가질 수 있으므로 앱에 제공한 것과 동일한 접근성 지원이 필요합니다.

00:14:46.000 --> 00:14:53.000
그리고 이제 내가 너를 Virata에게 넘겨서 모터 접근성에 대해 말해줄게.

00:14:53.000 --> 00:14:54.000
비라타 인디영연: 음, 고마워, 다니엘.

00:14:54.000 --> 00:14:57.000
제 이름은 비라타 인디영연입니다.

00:14:57.000 --> 00:15:00.000
저는 접근성 팀의 엔지니어입니다.

00:15:00.000 --> 00:15:05.000
오늘, 저는 Apple Watch의 모터 접근성 지원에 대해 이야기하게 되어 매우 기쁩니다.

00:15:05.000 --> 00:15:12.000
하지만 프레젠테이션에 뛰어들기 전에, 우리의 새로운 기능을 간단히 살펴보겠습니다.

00:15:12.000 --> 00:15:27.000
화면을 터치하지 않고 손 제스처만 사용하여 시계 페이스에서 제어 센터로 이동하여 방해금지 버튼으로 이동한 다음 켤 수 있습니다.

00:15:27.000 --> 00:15:30.000
그건 그렇게 간단해.

00:15:30.000 --> 00:15:34.000
올해, 우리는 Apple Watch에 AssistiveTouch를 도입하게 되어 매우 기쁩니다.

00:15:34.000 --> 00:15:41.000
AssistiveTouch를 사용하면 Apple Watch가 켜져 있는 손만 사용하여 터치 없이 Apple Watch를 최대한 활용할 수 있습니다.

00:15:41.000 --> 00:15:47.000
사람들은 손 제스처나 손 동작을 사용하여 화면 주위에서 커서를 탐색할 수 있다.

00:15:47.000 --> 00:15:52.000
그들은 화면 콘텐츠에 따라 추가 기능에 접근할 수 있는 메뉴를 불러올 수 있다.

00:15:52.000 --> 00:15:57.000
어떤 사람들에게는 이것이 Apple Watch와 상호 작용할 수 있는 유일한 방법일 수 있다.

00:15:57.000 --> 00:16:08.000
사지 누락, 손이나 팔의 기능 상실과 같은 운동 장애가 있는 사람들을 위해, AssistiveTouch는 Apple Watch에서 제어하고 작업을 수행할 수 있는 더 많은 옵션을 가능하게 할 것이다.

00:16:08.000 --> 00:16:12.000
이제 사람들이 AssistiveTouch를 어떻게 사용할 수 있는지에 대한 예를 봅시다.

00:16:12.000 --> 00:16:16.000
AssistiveTouch를 사용하는 주요 방법은 손 제스처를 사용하는 것이다.

00:16:16.000 --> 00:16:31.000
사람들은 탭하기 위해 움켜쥐기, 액션 메뉴를 불러올기 위해 두 번 움켜쥐기, 다음 요소로 이동하기 위해 꼬집기, 이전 요소로 다시 이동하기 위해 두 번 꼬집기와 같은 다른 제스처를 수행할 수 있다.

00:16:31.000 --> 00:16:38.000
손 제스처를 사용할 수 없는 사람들을 위해, 대안은 손 동작을 사용하는 것이다.

00:16:38.000 --> 00:16:45.000
손목을 기울임으로써, 사람들은 화면 포인터를 이동하고 UI 요소와 상호 작용할 수 있다.

00:16:45.000 --> 00:16:56.000
iOS의 AssistiveTouch와 마찬가지로, Dwell Control을 사용하면 정해진 시간 동안 요소 위에 포인터를 놓아 작업을 수행할 수 있습니다.

00:16:56.000 --> 00:17:00.000
이제 AssistiveTouch가 어떻게 작동하는지에 대해 더 자세히 알아봅시다.

00:17:00.000 --> 00:17:06.000
AssistiveTouch는 두 가지 주요 기능으로 구성되어 있습니다: 커서와 액션 메뉴.

00:17:06.000 --> 00:17:10.000
AssistiveTouch를 켜면 화면에 커서가 나타납니다.

00:17:10.000 --> 00:17:17.000
커서는 왼쪽 상단에서 오른쪽 하단까지 한 번에 하나씩 화면의 각 요소에 초점을 맞출 것이다.

00:17:17.000 --> 00:17:21.000
커서는 추가 상호 작용을 위한 요소를 강조한다.

00:17:21.000 --> 00:17:28.000
집중된 요소에 대한 더 많은 작업을 위해, 시스템 또는 사용자 지정 작업을 수행하기 위해 작업 메뉴를 불러올 수 있습니다.

00:17:28.000 --> 00:17:39.000
AssistiveTouch 동작 메뉴에는 디지털 크라운 누르기, 스크롤 탐색, 제스처 상호 작용 등과 같은 장치를 제어할 수 있는 기본 시스템 동작이 함께 제공됩니다.

00:17:39.000 --> 00:17:43.000
이 메뉴에 사용자 지정 작업을 추가할 수도 있습니다.

00:17:43.000 --> 00:17:45.000
그래서 이제 우리는 AssistiveTouch가 어떻게 작동하는지 알고 있다.

00:17:45.000 --> 00:17:49.000
우리가 당신의 지원서에서 그것을 어떻게 지원할 수 있는지 살펴봅시다.

00:17:49.000 --> 00:17:52.000
우리는 다음 주제들을 검토할 것이다.

00:17:52.000 --> 00:17:57.000
먼저, 우리는 당신의 관점에서 초점을 맞출 수 있는 요소가 무엇이고 어떻게 수정할 수 있는지 배울 것입니다.

00:17:57.000 --> 00:18:03.000
그런 다음 커서 프레임과 프레임 크기를 변경할 수 있는 방법을 살펴보겠습니다.

00:18:03.000 --> 00:18:08.000
마지막으로, 우리는 작업 메뉴를 사용자 정의하는 방법에 대해 더 이야기할 것입니다.

00:18:08.000 --> 00:18:12.000
집중할 수 있는 요소부터 시작합시다.

00:18:12.000 --> 00:18:17.000
이 표는 AssistiveTouch가 집중할 수 있는 요소에 대한 일반적인 개요를 제공합니다.

00:18:17.000 --> 00:18:22.000
사용자 상호 작용에 반응하는 대화형 요소만 집중할 수 있다.

00:18:22.000 --> 00:18:31.000
SwiftUI는 사용자 상호 작용을 처리하기 위한 내장 제어 요소를 제공합니다. 이러한 요소는 상호 작용하고 집중할 수 있습니다.

00:18:31.000 --> 00:18:40.000
보기에, 버튼, 토글 또는 내비게이션링크가 있다면, 이러한 요소는 기본적으로 초점을 맞출 수 있습니다.

00:18:40.000 --> 00:18:49.000
실행 가능한 요소는 행동이 있거나 상호 작용하도록 정의되기 때문에 AssistiveTouch에 의해 초점을 맞출 수 있다.

00:18:49.000 --> 00:18:55.000
텍스트 요소는 탭 제스처 동작을 첨부하여 상호 작용하고 초점을 맞출 수 있습니다.

00:18:55.000 --> 00:19:00.000
요소에 접근성 액션을 추가할 수도 있습니다.

00:19:00.000 --> 00:19:11.000
버튼이나 조정 가능한 것과 같은 실행 가능한 특성을 갖도록 요소를 정의하면, 대화형으로 취급되며 AssistiveTouch에 의해 초점을 맞출 것입니다.

00:19:11.000 --> 00:19:14.000
몇몇 요소들은 초점을 맞출 수 없다.

00:19:14.000 --> 00:19:22.000
사용자 상호 작용에 반응하지 않는 라벨이나 텍스트와 같은 정적 요소는 AssistiveTouch로 초점을 맞출 수 없습니다.

00:19:22.000 --> 00:19:27.000
사용자 상호 작용이 비활성화된 요소도 초점을 맞출 수 없습니다.

00:19:27.000 --> 00:19:29.000
그럼 예를 들어 봅시다.

00:19:29.000 --> 00:19:36.000
이 보기에는 라벨 헤더, 음료 정보가 포함된 텍스트, 수락 및 취소 버튼 요소가 있습니다.

00:19:36.000 --> 00:19:42.000
두 개의 버튼만 초점을 맞출 수 있지만, 라벨과 텍스트는 그렇지 않다.

00:19:42.000 --> 00:19:45.000
이 보기의 코드를 살펴봅시다.

00:19:45.000 --> 00:19:52.000
탭 제스처는 메인 VStack에 부착되어 있으며, 이 보기를 탭하여 음료 상세 보기를 표시할 수 있음을 나타냅니다.

00:19:52.000 --> 00:19:59.000
그러나, VStack 내부의 정적 요소는 명시적으로 선언되지 않는 한 초점을 맞출 수 없다.

00:19:59.000 --> 00:20:03.000
여기서, 수락 및 취소 버튼만 초점을 맞출 수 있습니다.

00:20:03.000 --> 00:20:09.000
그렇다면 사용자가 음료 세부 보기를 보여주기 위해 보기를 탭할 수 있다는 것을 어떻게 알 수 있을까요?

00:20:09.000 --> 00:20:20.000
더 나은 사용자 경험을 제공하기 위해, 저는 음료 정보 텍스트 요소를 강조하여 상호 작용할 수 있고 탭을 수행할 수 있다는 것을 보여주고 싶습니다.

00:20:20.000 --> 00:20:25.000
이것은 accessibilityRespondsToUser 상호 작용 수정자에 "true"를 설정하여 수행할 수 있습니다.

00:20:25.000 --> 00:20:35.000
수정자를 적용한 후, 우리는 이제 이 보기에 세 가지 초점을 맞출 수 있는 요소가 있습니다: 음료 정보 텍스트, 수락 및 취소 버튼 요소.

00:20:35.000 --> 00:20:39.000
이제 AssistiveTouch 커서 프레임에 대해 더 알아봅시다.

00:20:39.000 --> 00:20:49.000
보시다시피, 집중된 요소는 AssistiveTouch가 요소가 다루기 힘든지 또는 작업을 수행할 수 있는지 강조하는 데 중요합니다.

00:20:49.000 --> 00:21:00.000
AssistiveTouch 커서 프레임은 요소의 탭 가능한 영역과 동일합니다. 탭 가능한 영역이 작은 요소는 작은 커서 프레임을 가지며 내부의 내용을 클립할 수 있습니다.

00:21:00.000 --> 00:21:08.000
우리는 클리핑을 방지하기 위해 패딩을 추가하고 테두리가 물체의 모양과 일치하도록 함으로써 이것을 더 깨끗하게 만들 수 있습니다.

00:21:08.000 --> 00:21:16.000
이 예에서, 줄임표 이미지가 있는 NavigationLink는 AssistiveTouch 커서의 작은 원으로 강조 표시됩니다.

00:21:16.000 --> 00:21:24.000
우리는 AssistiveTouch 커서 프레임을 변경하는 탭 가능한 영역의 크기를 늘림으로써 이것을 개선할 수 있습니다.

00:21:24.000 --> 00:21:32.000
contentShape 수정자의 경로를 제공함으로써, 탭 가능한 영역과 요소의 커서 프레임을 변경할 수 있습니다.

00:21:32.000 --> 00:21:40.000
이 NavigationLink의 경우, 탭 가능한 영역 모양을 요소 크기의 1.5배의 원으로 설정했습니다.

00:21:40.000 --> 00:21:48.000
결과적으로, AssistiveTouch 커서 프레임은 더 크고 화면에서 요소를 훨씬 쉽게 볼 수 있습니다.

00:21:48.000 --> 00:21:52.000
이제 AssistiveTouch 액션 메뉴를 살펴봅시다.

00:21:52.000 --> 00:21:59.000
AssistiveTouch 작업 메뉴는 작업 메뉴 목록에 표시하기 위해 보기에서 기본 시스템 작업과 사용자 지정 작업을 표시합니다.

00:21:59.000 --> 00:22:10.000
포커스 요소에 사용자 지정 작업이 있는 경우, 해당 작업의 우선 순위가 지정되고 목록의 시작 부분에 표시되므로 상호 작용하는 것이 더 편리합니다.

00:22:10.000 --> 00:22:16.000
요소가 조정 가능한 경우, 감소 및 증가 동작이 표시됩니다.

00:22:16.000 --> 00:22:25.000
접근성 그룹 요소에 사용자 지정 작업이 포함되어 있다면, 그룹 요소에 초점을 맞출 때 해당 작업이 표면화됩니다.

00:22:25.000 --> 00:22:31.000
이미 요소에 VoiceOver에 대한 사용자 지정 작업을 추가했다면, 훌륭합니다!

00:22:31.000 --> 00:22:35.000
이러한 작업은 AssistiveTouch 작업 메뉴에도 자동으로 표시됩니다.

00:22:35.000 --> 00:22:38.000
사용자 지정 작업은 아이콘으로 표시됩니다.

00:22:38.000 --> 00:22:43.000
기본 이미지는 사용자 지정 작업 이름의 첫 글자가 될 것이다.

00:22:43.000 --> 00:22:52.000
사용자 지정 작업 아이콘에 대한 이미지를 제공하려면, accessibilityAction 수정자에 이미지가 있는 라벨을 추가할 수 있습니다.

00:22:52.000 --> 00:22:54.000
음, 그게 우리 세션의 끝이야.

00:22:54.000 --> 00:22:58.000
이제 Apple Watch의 접근성 기능을 더 잘 이해할 수 있습니다.

00:22:58.000 --> 00:23:04.000
애플리케이션에 Dynamic Type, VoiceOver 및 AssistiveTouch 지원을 추가하는 것을 잊지 마세요.

00:23:04.000 --> 00:23:10.000
이러한 API를 사용하고 모든 사람이 watchOS 애플리케이션에 액세스할 수 있도록 하는 도구가 있습니다.

00:23:10.000 --> 00:23:14.000
음, 시간 내주셔서 감사드리며 남은 WWDC를 즐기세요!

00:23:14.000 --> 23:59:59.000
♪

