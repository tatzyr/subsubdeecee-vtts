WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 베이스 음악 연주 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Nikhil Palekar: 안녕하세요, 저는 Nikhil이고 CloudKit 팀의 엔지니어입니다.

00:00:12.000 --> 00:00:16.000
오늘, 저는 당신에게 CloudKit 콘솔을 소개하게 되어 기쁩니다.

00:00:16.000 --> 00:00:22.000
iCloud는 사용자 장치의 기능을 클라우드로 확장하기 위한 믿을 수 없을 정도로 강력한 서비스입니다.

00:00:22.000 --> 00:00:27.000
수백만 명의 사람들이 iCloud를 사용하여 사진, 파일 및 데이터를 안전하게 저장합니다.

00:00:27.000 --> 00:00:36.000
iCloud의 데이터베이스인 CloudKit은 마법 같은 경험을 위해 장치 간에 콘텐츠를 효율적이고 원활하게 동기화할 수 있습니다.

00:00:36.000 --> 00:00:43.000
그리고 클라우드 기반인 CloudKit 서비스는 developer.apple.com을 통해 온라인으로 관리됩니다.

00:00:43.000 --> 00:00:52.000
오늘, 애플리케이션이 CloudKit 서비스와 상호 작용하는 방식을 관리하는 데 도움이 되는 재설계된 대시보드 도구 세트인 CloudKit Console을 보여드리게 되어 기쁩니다.

00:00:52.000 --> 00:01:01.000
콘솔에서 CloudKit 데이터베이스에 액세스 및 관리하고 그 어느 때보다 쉽게 작업을 완료할 수 있는 새로운 인터페이스에서 원격 측정 및 로그를 볼 수 있습니다.

00:01:01.000 --> 00:01:14.000
콘솔 전반에 걸쳐, 콘텐츠는 다른 Apple 애플리케이션에 익숙한 것과 동일한 친숙한 구조를 따릅니다: 상단의 컨텍스트 및 계정 정보, 왼쪽의 탐색 및 속성, 중간의 세부 사항.

00:01:14.000 --> 00:01:19.000
이 새로운 레이아웃에서, 당신은 쉽게 기능을 선택한 다음, 세부 사항을 더 깊이 파고들 수 있습니다.

00:01:19.000 --> 00:01:24.000
새로운 데이터베이스 앱에서 몇 가지 기능을 살펴보는 것으로 시작합시다.

00:01:24.000 --> 00:01:35.000
CloudKit 데이터베이스를 처음 접하는 경우, 짧은 이야기는 CloudKit 데이터베이스가 사용 사례에 정의된 컨테이너 내에 존재하며 개발자는 개발과 생산이라는 두 가지 데이터베이스 환경을 사용한다는 것입니다.

00:01:35.000 --> 00:01:43.000
데이터베이스 스키마는 앱 개발자가 개발 중에 만든 변경 사항에 익숙해지면 개발에서 생산으로 승격됩니다.

00:01:43.000 --> 00:01:53.000
시작할 때, 적시 스키마 생성을 사용하거나 콘솔에서 데이터 모델을 정의하여 개발 데이터베이스를 빠르게 반복할 수 있습니다.

00:01:53.000 --> 00:02:01.000
준비가 되면, 스키마를 프로덕션에 배포할 수 있으며 CloudKit은 데이터베이스의 오래된 클라이언트를 깨뜨리지 않도록 업데이트의 무결성을 확인합니다.

00:02:01.000 --> 00:02:08.000
데이터베이스 앱을 실행하면, 개발자 팀이 소유한 컨테이너 목록을 볼 수 있습니다.

00:02:08.000 --> 00:02:13.000
다음에 콘솔을 시작할 때, 그것은 내가 마지막으로 방문한 컨테이너로 바로 데려다 줄 것이다.

00:02:13.000 --> 00:02:21.000
드롭다운에서 개발 환경을 선택했고, 이제 스키마 섹션에서 레코드 유형이 어떻게 정의되는지 살펴봅시다.

00:02:21.000 --> 00:02:24.000
레코드 유형은 CloudKit 데이터베이스에서 데이터 구조를 정의하는 데 사용됩니다.

00:02:24.000 --> 00:02:32.000
기존 레코드 유형 목록을 빠르게 볼 수 있으며, 클릭해서 필드와 인덱스에 대한 세부 사항을 볼 수 있습니다.

00:02:32.000 --> 00:02:34.000
필드를 추가하는 것은 간단하다.

00:02:34.000 --> 00:02:47.000
난 그냥 내 새 필드의 이름을 제공하고, 해당 유형을 선택해.

00:02:47.000 --> 00:02:51.000
콘솔에서 인덱스를 관리하는 것도 간단하다.

00:02:51.000 --> 00:03:00.000
이 페이지에서 기존 인덱스를 쉽게 보거나, 필드를 선택하고 세 가지 인덱스 유형 중 하나를 선택하여 클릭하여 새 인덱스를 만들 수 있습니다.

00:03:00.000 --> 00:03:05.000
여기서, 저는 저자 필드를 알파벳순으로 정렬하기 위해 정렬 가능한 인덱스를 추가하고 있습니다.

00:03:05.000 --> 00:03:11.000
그리고 제가 스키마를 관리하는 동안, 공개 데이터베이스의 보안 역할이 어떻게 관리되는지 간단히 살펴봅시다.

00:03:11.000 --> 00:03:18.000
이전에 CloudKit을 사용한 적이 있다면, 이미 보안 역할을 사용하여 공용 데이터베이스의 레코드에 대한 액세스를 관리하고 있을 수 있습니다.

00:03:18.000 --> 00:03:28.000
그리고 이제 그 어느 때보다 쉽게 정의하고 관리할 수 있는 새로운 UI가 있습니다.

00:03:28.000 --> 00:03:35.000
이제 앱에 대한 스키마가 정의되어 있으니, 콘솔을 사용하여 개발 중에 저장한 일부 데이터를 탐색해 봅시다.

00:03:35.000 --> 00:03:38.000
이 관점에서, 나는 기록을 만들거나 볼 수 있다.

00:03:38.000 --> 00:03:53.000
새로운 UI는 데이터베이스, 영역, 마지막으로 레코드 유형으로 시작하여 표시할 레코드를 검색하는 방법에 대한 컨텍스트를 선택하기 위한 왼쪽에서 오른쪽 흐름을 제공합니다.

00:03:53.000 --> 00:04:02.000
컨텍스트를 설정하면, 목록 보기에서 레코드를 볼 수 있고 세부 정보 보기에서 세부 사항을 볼 수 있습니다.

00:04:02.000 --> 00:04:11.000
요청을 수정해야 하는 경우, 새로운 쿼리 빌더를 사용하여 필터를 적용하여 원하는 정확한 레코드를 얻을 수 있습니다.

00:04:11.000 --> 00:04:21.000
그래서 제가 CloudKit에 새로운 레코드 유형을 쓰는 앱을 위한 기능을 구축하고 있다고 가정해 봅시다. 그리고 CloudKit이 개발 환경에서 실제로 받는 것을 확인하고 싶습니다.

00:04:21.000 --> 00:04:26.000
새로운 UI를 사용하면 쿼리를 한 번 설정하고 저장할 수 있습니다...

00:04:26.000 --> 00:04:40.000
...그리고 내 발전이 진행됨에 따라 다시 돌아와.

00:04:40.000 --> 00:04:45.000
콘솔 전체에 사용되는 URL은 또한 특정 기능을 직접 가리키도록 구성되어 있다.

00:04:45.000 --> 00:04:53.000
예를 들어, 레코드 보기에 빠르게 액세스하고 싶다면, 사파리 북마크에 직접 링크를 추가할 수 있습니다.

00:04:53.000 --> 00:05:01.000
새로운 콘솔을 사용하면 각 기능에서 친숙한 사용자 경험을 통해 데이터와 스키마를 빠르고 직관적으로 관리할 수 있습니다.

00:05:01.000 --> 00:05:08.000
이제 스키마를 만들고 개발에 저장된 올바른 데이터가 있음을 확인했으므로, 스키마를 생산 환경에 배포할 준비가 되었습니다.

00:05:08.000 --> 00:05:17.000
앞서, 저는 개발과 생산의 차이점을 언급했으므로, 콘솔이 어떻게 생산에 스키마를 더 쉽고 안전하게 배포할 수 있는지 보여드리겠습니다.

00:05:17.000 --> 00:05:24.000
"스케줄 변경 배포"를 클릭하면 프로덕션 배포에 적용될 변경 사항에 대한 깨끗하고 실행 가능한 보기를 볼 수 있습니다.

00:05:24.000 --> 00:05:33.000
여기서, 저는 이전 생산 스키마와 개발 환경에서 적용될 변경 사항 사이에 변경된 모든 것을 볼 수 있습니다.

00:05:33.000 --> 00:05:41.000
생산 변경 사항을 되돌릴 수 없기 때문에, 이 차이점 보기는 내가 의도한 변경 사항만 생산 환경에서 끝나는 것을 빠르게 확인할 수 있는 방법을 제공합니다.

00:05:41.000 --> 00:05:46.000
그것이 새로운 데이터베이스 앱의 기능을 위한 것이므로, 이제 원격 측정을 살펴봅시다.

00:05:46.000 --> 00:05:56.000
데이터베이스를 설정하고 스키마를 프로덕션으로 홍보한 후, 저는 앱이 CloudKit과 어떻게 상호 작용하는지 관찰하고 조사할 수 있는 개발자 수명 주기의 다음 부분으로 이동합니다.

00:05:56.000 --> 00:06:03.000
콘솔 내의 원격 측정 앱은 내 앱이 데이터베이스와 어떻게 상호 작용하는지에 대한 주요 지표를 보여주는 많은 차트를 제공합니다.

00:06:03.000 --> 00:06:11.000
요청 속도, 서버 대기 시간, 오류 수 및 평균 요청 크기는 모두 필요한 데이터를 찾는 데 도움이 되는 필터링 가능한 차트에 표시됩니다.

00:06:11.000 --> 00:06:20.000
이 차트는 시간이 지남에 따라 앱 동작이 바뀔 때를 식별하고 새 버전의 앱이 예상치 못한 방식으로 작동하는지에 대한 신호를 줄 수 있습니다.

00:06:20.000 --> 00:06:23.000
이제 로그 앱을 살펴봅시다.

00:06:23.000 --> 00:06:27.000
콘솔 내의 로그 앱은 내가 더 깊이 파고들 수 있게 해준다.

00:06:27.000 --> 00:06:33.000
CloudKit 데이터베이스의 자세한 로깅 출력을 보여 주므로 앱 요청이 실제로 어떻게 처리되었는지 확인할 수 있습니다.

00:06:33.000 --> 00:06:40.000
이 앱은 개발과 생산 모두에서 디버깅과 조사를 위한 훌륭한 도구입니다.

00:06:40.000 --> 00:06:45.000
우리는 당신이 앱을 개발하고 배송할 때 CloudKit 콘솔을 사용하는 것을 좋아할 것이라고 생각합니다.

00:06:45.000 --> 00:06:57.000
데이터베이스 앱에서 새로운 스키마 관리 및 쿼리 기능을 시도하고 CloudKit을 사용하는 방법에 대한 실행 가능한 정보를 제공하는 로그 및 원격 측정 앱의 새로운 계측을 검토하는 데 시간을 할애하기를 바랍니다.

00:06:57.000 --> 00:07:05.000
우리는 또한 developer.apple.com에서 새로운 문서와 GitHub에서 유용한 샘플 프로젝트를 갖게 되어 기쁩니다.

00:07:05.000 --> 00:07:11.000
마지막으로, 새로운 CloudKit 기능에 대해 배우고 싶다면, "CloudKit 탐색" 컬렉션을 검토하십시오.

00:07:11.000 --> 00:07:12.000
오늘 시간 내줘서 고마워.

00:07:12.000 --> 00:07:15.000
CloudKit Console을 만나는 것을 즐겼기를 바랍니다.

00:07:15.000 --> 23:59:59.000
♪

