WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
Souvik Banerjee:こんにちは、「DriverKitでドライバーをiPadに運んでください」へようこそ。

00:00:14.000 --> 00:00:19.000
私はSouvikです。今日はDriverKitのいくつかのエキサイティングな新しい開発について説明します。

00:00:19.000 --> 00:00:22.000
今日は3つのトピックについて話し合います。

00:00:22.000 --> 00:00:27.000
まず、DriverKitの概要を簡単に説明します。

00:00:27.000 --> 00:00:32.000
次に、AudioDriverKitのアップデートについて説明します。

00:00:32.000 --> 00:00:39.000
そして、あなたのドライバーをiPadに持ち込む方法から締めくくります。概要から始めましょう。

00:00:39.000 --> 00:00:45.000
2019年には、IOKitデバイスドライバの代替品であるDriverKitを導入しました。

00:00:45.000 --> 00:00:53.000
DriverKitは、ユーザースペースで実行される、より信頼性が高く安全なシステムを拡張する新しい方法をもたらしました。

00:00:53.000 --> 00:00:58.000
そして、あなたのプロセスはカーネルにないので、開発が簡単です。

00:00:58.000 --> 00:01:09.000
これらのドライバー拡張機能は、dextsとも呼ばれ、アプリにバンドルされており、Mac App Storeでアプリやドライバーを簡単に配布できます。

00:01:09.000 --> 00:01:17.000
人々は検索でドライバーを簡単に見つけることができ、ドライバーが不要になった場合は、アプリを削除してアンインストールできます。

00:01:17.000 --> 00:01:23.000
DriverKitを導入して以来、多くの新しいドライバーファミリーのサポートを追加しました。

00:01:23.000 --> 00:01:37.000
現在、USB、PCI、HIDなどのトランスポートに加えて、ネットワーキング、ブロックストレージ、シリアル、オーディオ、SCSIコントローラと周辺ドライバをサポートしています。

00:01:37.000 --> 00:01:54.000
DriverKitで構築できるドライバの種類の詳細については、WWDC 2021の「DriverKitでオーディオドライバを作成する」セッションと、WWDC 2020の「DriverKitでPCIおよびSCSIドライバをモダナイズする」セッションをご覧ください。

00:01:54.000 --> 00:02:01.000
次に、最近、強調したいAudioDriverKitにいくつかの新機能を追加しました。

00:02:01.000 --> 00:02:04.000
これらの機能の1つはリアルタイム操作です。

00:02:04.000 --> 00:02:11.000
リアルタイムのコールバックを登録できるAudioDriverKitの新機能を導入できることを嬉しく思います。

00:02:11.000 --> 00:02:16.000
このコールバックは、IO操作が発生するたびに呼び出されます。

00:02:16.000 --> 00:02:25.000
信号処理など、リアルタイムスレッド上のオーディオバッファを変更する必要がある場合は、このコールバックを使用できます。

00:02:25.000 --> 00:02:36.000
AudioDriverKitにリアルタイムコールバックを登録するには、IOUserAudioDeviceに設定するIOOperationHandlerブロックを宣言します。

00:02:36.000 --> 00:02:47.000
このブロックは、デバイスのIOUserAudioStreamバッファでIO操作が発生すると、リアルタイムのコンテキストから呼び出されます。

00:02:47.000 --> 00:02:53.000
ブロック内では、操作が何であるかを確認し、必要に応じてデータを変更することができます。

00:02:53.000 --> 00:02:59.000
最後に、SetIOOperationHandlerを呼び出すと、オーディオデバイスのブロックが設定されます。

00:02:59.000 --> 00:03:02.000
では、資格について話しましょう。

00:03:02.000 --> 00:03:11.000
AudioDriverKitを導入したとき、ドライバーで許可された任意のユーザークライアントアクセス権限を使用する必要がありました。

00:03:11.000 --> 00:03:17.000
macOS 12.1では、AudioDriverKit専用の新しい資格を導入しました。

00:03:17.000 --> 00:03:27.000
Allow-any-userclient-accessエンタイトルメントの代わりに、新しいオーディオファミリーエンタイトルメントを使用するようにオーディオドライバを更新してください。

00:03:27.000 --> 00:03:35.000
アプリがドライバーと通信できるようにしたい場合は、allow-any-userclient-accessの資格を保持できます。

00:03:35.000 --> 00:03:43.000
この新しい資格は開発のために公開されているので、リクエストを提出せずに今日から使い始めることができます。

00:03:43.000 --> 00:03:49.000
実際、すべてのDriverKitファミリーの資格が開発に使用できるようになりました。

00:03:49.000 --> 00:03:57.000
この配布資格をリクエストするには、developer.apple.comのシステム拡張機能ページにアクセスしてください。

00:03:57.000 --> 00:04:02.000
さて、iPadのDriverKitについてお話しできることを本当に楽しみにしています。

00:04:02.000 --> 00:04:06.000
専門家は、最高の仕事をするためにiPadをますます使用しています。

00:04:06.000 --> 00:04:11.000
しかし、多くはiPadでは使用できない外部ハードウェアに依存しています。

00:04:11.000 --> 00:04:17.000
そこで今日、DriverKitがiPadに登場することを発表できることを嬉しく思います。

00:04:17.000 --> 00:04:26.000
macOSのDriverKitは、安全で安全な方法でシステムを拡張することを可能にし、同じ技術をiPadに導入しています。

00:04:26.000 --> 00:04:39.000
実際、すでにMacのDriverKitでドライバーを作成している場合は、ドライバーを変更することなく、まったく同じドライバーをiPadに持ち込むことができます。

00:04:39.000 --> 00:04:45.000
USB、PCI、オーディオはiPadOS 16でサポートされます。

00:04:45.000 --> 00:04:54.000
これにより、初めてiPadのThunderboltオーディオインターフェイスと、さらに多くのデバイスが可能になります。

00:04:54.000 --> 00:04:57.000
これはM1チップのパワーで可能になりました。

00:04:57.000 --> 00:05:00.000
M1を搭載したすべてのiPadはDriverKitをサポートします。

00:05:00.000 --> 00:05:05.000
iPadOSのDriverKitはmacOSと同じです。

00:05:05.000 --> 00:05:13.000
これは、1つのDriverKitドライバを構築し、両方のプラットフォームで動作させることができ、ソースの変更を必要としないことを意味します。

00:05:13.000 --> 00:05:25.000
さらに、Xcode 14の新しいマルチプラットフォームアプリ機能を使用すると、MacとiPadの両方でドライバーを配信するための単一のアプリターゲットを簡単に作成できます。

00:05:25.000 --> 00:05:34.000
マルチプラットフォームアプリの詳細については、「Xcodeを使用してマルチプラットフォームアプリを開発する」セッションをチェックしてください。

00:05:34.000 --> 00:05:39.000
Xcodeは、DriverKitドライバの自動署名もサポートするようになりました。

00:05:39.000 --> 00:05:46.000
iPadOSでDriverKitを処理する方法を知っており、MacとiPadの両方にプロビジョニングできます。

00:05:46.000 --> 00:05:51.000
DriverKitドライバの手動署名を設定する必要がなくなりました。

00:05:51.000 --> 00:05:57.000
iPadOSアプリとドライバーは、macOSと同じようにApp Storeで配布できます。

00:05:57.000 --> 00:06:05.000
これは、アプリ内購入などの機能を活用し、ユーザーがドライバーを簡単に発見できることを意味します。

00:06:05.000 --> 00:06:12.000
既存のmacOSドライバとアプリをiPadに持ち込むのがどれほど簡単か見てみましょう。

00:06:12.000 --> 00:06:15.000
ここには、DriverKitSampleAppというアプリがあります。

00:06:15.000 --> 00:06:22.000
ラベルとボタン付きのSwiftUIビューがあり、ユーザーはドライバーをインストールできます。

00:06:22.000 --> 00:06:25.000
私たちのドライバーはNullDriverと呼ばれています。

00:06:25.000 --> 00:06:36.000
ドライバーが起動するとメッセージが出力され、タイマーが1秒ごとに起動し、timerCountと呼ばれるカウンタをインクリメントします。

00:06:36.000 --> 00:06:45.000
これをiPadアプリにするには、XcodeでDriverKitSampleAppターゲットを選択するだけです。

00:06:45.000 --> 00:06:51.000
そして、サポートされている目的地にiPadを追加します。

00:06:51.000 --> 00:06:59.000
これで、実行先をMacに接続したiPadに変更できます。

00:06:59.000 --> 00:07:02.000
これをiPadで実行してみましょう。

00:07:02.000 --> 00:07:04.000
これが私たちのiPadアプリです。

00:07:04.000 --> 00:07:09.000
Xcodeで見たビューのラベルとボタンがあります。

00:07:09.000 --> 00:07:15.000
Install Dextボタンをタップすると、設定に移動し、この新しいドライバーのリンクが表示されます。

00:07:15.000 --> 00:07:20.000
そのリンクをタップすると、このアプリにバンドルされているすべてのドライバーのリストが表示されます。

00:07:20.000 --> 00:07:24.000
その後、ヌルドライバーを有効にすることができます。

00:07:24.000 --> 00:07:27.000
だから、あなたはデモでいくつかのことに気づいたかもしれません。

00:07:27.000 --> 00:07:36.000
Null DriverはiPadOSアプリ内にバンドルされており、インストール後にシステムによって自動的に検出されます。

00:07:36.000 --> 00:07:43.000
macOSでは、SystemExtensionフレームワークを使用して、ユーザーにドライバのインストールを促す必要があります。

00:07:43.000 --> 00:07:48.000
iPadOSには、SystemExtensionsフレームワークはありません。

00:07:48.000 --> 00:07:54.000
Xcode内では、ドライバーがアプリに埋め込まれていることがわかります。

00:07:54.000 --> 00:08:02.000
ドライバーは低レベルのソフトウェアであり、特権があるため、実行する前にユーザーの承認を得る必要があります。

00:08:02.000 --> 00:08:10.000
macOSでは、ユーザーはセキュリティとプライバシーの環境設定に移動して、システム拡張を許可する必要があります。

00:08:10.000 --> 00:08:14.000
iPadOSでは、ドライバーの承認は設定アプリにあります。

00:08:14.000 --> 00:08:17.000
ドライバーの承認には2つのオプションがあります。

00:08:17.000 --> 00:08:25.000
ドライバーがインストールされているアプリが少なくとも1つある場合は、一般設定内にメニューがあり、利用可能なすべてのドライバーのリストが表示されます。

00:08:25.000 --> 00:08:29.000
各ドライバーはオンまたはオフを切り替えることができます。

00:08:29.000 --> 00:08:36.000
アプリに設定バンドルが含まれている場合は、アプリの設定内にドライバーリンクがあります。

00:08:36.000 --> 00:08:40.000
アプリは、設定でドライバーを有効にするようにユーザーに促す必要があります。

00:08:40.000 --> 00:08:48.000
macOSドライバープロジェクトをもう一度やり直して、アプリが設定でドライバーを有効にするようにユーザーに促す方法を見てみましょう。

00:08:48.000 --> 00:08:55.000
サポートされている目的地にiPadを追加することから始めます。

00:08:55.000 --> 00:09:07.000
SwiftUIビューにはドライバーをインストールするボタンがあり、ビューモデルにはSystemExtensionsフレームワークと対話するステートマシンがあります。

00:09:07.000 --> 00:09:25.000
このプロジェクトはMacとiPadの両方で構築されるため、Macのビューとビューモデルを維持したいと考えていますが、iPadで使用される新しいビューを作成したいと考えています。

00:09:25.000 --> 00:09:49.000
次に、ビルドフェーズとコンパイルソースに移動し、各ファイルのプラットフォームフィルターを変更して、iOSまたはmacOS用に条件付きでコンパイルすることができます。

00:09:49.000 --> 00:09:52.000
では、アプリに設定バンドルを追加しましょう。

00:09:52.000 --> 00:10:03.000
今のところ、デフォルトの設定例を使用しますが、後でアプリが使用できる実際の設定に変更できます。

00:10:03.000 --> 00:10:07.000
では、先ほど作成したiOSビューを確認しましょう。

00:10:07.000 --> 00:10:13.000
macOSビューをiOSビューにコピーして、出発点として使用できます。

00:10:13.000 --> 00:10:20.000
私たちのiOSビューはビューモデルを使用していないので、それを削除することができます。

00:10:20.000 --> 00:10:24.000
また、設定バンドルを開くためにボタンのアクションを変更する必要があります。

00:10:24.000 --> 00:10:40.000
これにより、ユーザーは設定に移動し、ドライバーを有効にすることができます。

00:10:40.000 --> 00:10:52.000
最後に、ボタンのテキストを変更して、ユーザーが設定でドライバーを有効にする必要があることを明確にします。

00:10:52.000 --> 00:10:55.000
これを実際に見てみましょう。

00:10:55.000 --> 00:11:01.000
設計したビューがあり、ボタンをタップすると設定バンドルに移動します。

00:11:01.000 --> 00:11:06.000
次に、ドライバーに入り、ヌルドライバーを有効にします。

00:11:06.000 --> 00:11:10.000
ドライバーはオンデマンドで起動することを心に留めておくことが重要です。

00:11:10.000 --> 00:11:17.000
設定でドライバーを有効にしましたが、ハードウェアデバイスがiPadに接続されている場合にのみ、ドライバーが起動します。

00:11:17.000 --> 00:11:23.000
ドライバの実行が開始されたら、Xcodeワイヤレスデバッグを使用してデバッガを添付できます。

00:11:23.000 --> 00:11:31.000
これを行うには、Xcodeのデバッグメニューに移動し、プロセスに添付してから、NullDriverプロセスを選択します。

00:11:31.000 --> 00:11:36.000
添付したら、ブレークポイントを設定したり、実行を一時停止したりできます。

00:11:36.000 --> 00:11:39.000
ここでは、タイマーにブレークポイントを設定しました。

00:11:39.000 --> 00:11:46.000
timerCountを印刷して、タイマーが何回呼び出されたかを確認します。

00:11:46.000 --> 00:11:54.000
デバッグが完了したら、Xcodeのデバッグメニューを使用してドライバープロセスから切り離します。

00:11:54.000 --> 00:11:57.000
だから今、私たちには運転手がいます。

00:11:57.000 --> 00:12:00.000
しかし、ドライバー自体はあまり役に立ちません。

00:12:00.000 --> 00:12:03.000
システムの残りの部分と通信する必要があります。

00:12:03.000 --> 00:12:07.000
AudioDriverKitのようないくつかのDriverKitフレームワークは、あなたのためにこれを処理します。

00:12:07.000 --> 00:12:17.000
しかし、ハードウェア用のカスタムコントロールパネルアプリを作成するなど、より高度なことをする必要がある場合は、アプリがドライバーと通信できるようにする必要があります。

00:12:17.000 --> 00:12:21.000
これは、ユーザークライアントが許可していることです。

00:12:21.000 --> 00:12:27.000
独自のインターフェイスを定義でき、アプリとドライバーの通信が可能になります。

00:12:27.000 --> 00:12:30.000
アプリはIOKit.frameworkを使用してユーザークライアントを開きます。

00:12:30.000 --> 00:12:38.000
これがどのように機能するかの例については、developer.apple.comのサンプルコードを参照してください。

00:12:38.000 --> 00:12:41.000
だから、私たちはアプリがドライバーと通信できることを知っています。

00:12:41.000 --> 00:12:43.000
しかし、セキュリティを念頭に置いておくことが重要です。

00:12:43.000 --> 00:12:50.000
ドライバーは特権を持っているので、すべてのアプリがドライバーと通信することを許可したくありません。

00:12:50.000 --> 00:13:01.000
macOSでは、アプリはドライバーキットのユーザークライアントアクセス権限を必要とし、値は許可されたドライバーバンドル識別子の配列です。

00:13:01.000 --> 00:13:07.000
iPadOSでは、ドライバーとのコミュニケーションという新しい資格を追加しました。

00:13:07.000 --> 00:13:11.000
これは、macOSユーザーのクライアント資格を置き換えます。

00:13:11.000 --> 00:13:18.000
この資格は、アプリにユーザークライアントをドライバーに開く機能を付与します。

00:13:18.000 --> 00:13:27.000
Communicates With Driversエンタイトルメントをアプリに手動で追加したい場合は、ここにXMLエンタイトルメント文字列があります。

00:13:27.000 --> 00:13:29.000
Xcodeからこのエンタイトルメントを追加することもできます。

00:13:29.000 --> 00:13:35.000
Xcodeでは、Signing and Capabilitiesに移動し、新しい機能を追加します。

00:13:35.000 --> 00:13:43.000
その後、「ドライバーとのコミュニケーション」を検索し、アプリに機能を追加できます。

00:13:43.000 --> 00:13:50.000
ユーザークライアントのもう1つのユースケースは、他の開発者のアプリがドライバーと対話できるようにすることです。

00:13:50.000 --> 00:13:59.000
したがって、この場合、アプリとドライバーがあり、他の開発者のアプリを含む他のアプリにサービスを提供したいとします。

00:13:59.000 --> 00:14:03.000
DriverKitユーザークライアントもこれをサポートしています。

00:14:03.000 --> 00:14:09.000
ドライバーと通信する必要がある各アプリは、ドライバーの資格との通信を必要とします。

00:14:09.000 --> 00:14:13.000
ドライバーには、サードパーティのユーザークライアントの資格を許可する必要があります。

00:14:13.000 --> 00:14:20.000
これにより、別のチーム識別子で構築されたアプリは、ユーザークライアントをドライバーに開くことができます。

00:14:20.000 --> 00:14:25.000
この資格がなければ、同じチームのアプリだけがドライバーと通信できます。

00:14:25.000 --> 00:14:34.000
「サードパーティのユーザークライアントを許可する」エンタイトルメントをドライバーに手動で追加する場合は、ここにXMLエンタイトルメント文字列があります。

00:14:34.000 --> 00:14:42.000
または、ドライバーの署名と機能に進んで、Xcodeからこの機能を追加することもできます。

00:14:42.000 --> 00:14:51.000
これらの新しいユーザークライアントの資格は開発のために公開されています。つまり、承認なしに今日からこれを使い始めることができます。

00:14:51.000 --> 00:14:56.000
配布のためにこれらの資格をリクエストするには、開発者のウェブサイトをご覧ください。

00:14:56.000 --> 00:15:01.000
DriverKitドライバは、アプリのアップデートにも重要な影響を及ぼします。

00:15:01.000 --> 00:15:07.000
アプリの自動更新により、ユーザーはアプリの最新バージョンを常に入手できます。

00:15:07.000 --> 00:15:12.000
ただし、ドライバを含むアプリの場合、更新プロセスは少し異なります。

00:15:12.000 --> 00:15:18.000
アプリのバージョン1をアプリストアで配布するとしましょう。

00:15:18.000 --> 00:15:26.000
次に、そのアプリとバンドルされたドライバをiPadにインストールし、設定でドライバを有効にします。

00:15:26.000 --> 00:15:38.000
ドライバーにハードウェアデバイスを接続すると、ドライバーが実行を開始し、ドライバーが実行を開始すると、アプリはユーザークライアントを使用してドライバーとの通信を開始できます。

00:15:38.000 --> 00:15:44.000
さて、アプリにバグを見つけて、バージョン2をApp Storeに提出したとします。

00:15:44.000 --> 00:15:52.000
アプリの自動更新のため、バージョン2のアプリが自動的にダウンロードされ、iPadにインストールされます。

00:15:52.000 --> 00:15:58.000
ドライバーの承認状態は更新によって維持されるため、ドライバーを再度承認する必要はありません。

00:15:58.000 --> 00:16:05.000
ただし、ハードウェアがまだ接続されており、バージョン1のドライバがまだ実行されていることに注意してください。

00:16:05.000 --> 00:16:11.000
ドライバーバージョン2はアプリのアップデートでダウンロードされましたが、起動しません。

00:16:11.000 --> 00:16:20.000
古いドライバはまだ実行中なので、バージョン2のアプリはバージョン1のドライバと通信する必要があるかもしれません。

00:16:20.000 --> 00:16:31.000
ハードウェアデバイスのプラグを抜くと、ドライバーの実行が停止するので、ドライバーバージョン1が完了し、ドライバーをバージョン2に更新できます。

00:16:31.000 --> 00:16:41.000
さて、デバイスを再度接続すると、バージョン2のドライバを起動し、アプリが新しいドライバと通信しています。

00:16:41.000 --> 00:16:47.000
要約：アプリは自動アプリアップデートでいつでも更新されます。

00:16:47.000 --> 00:16:51.000
デバイスのプラグを抜いた後、ドライバーが更新されます。

00:16:51.000 --> 00:16:55.000
そして、あなたのアプリは古いドライバーと通信するかもしれません。

00:16:55.000 --> 00:17:01.000
アプリとドライバーの準備ができたら、App Storeに提出できます。

00:17:01.000 --> 00:17:05.000
ドライバーは、DriverKitをサポートするデバイスでのみ実行できます。

00:17:05.000 --> 00:17:16.000
アプリがドライバーのみをインストールする場合など、アプリをこれらのデバイスに制限したい場合は、アプリのUIRequiredDeviceCapabilitiesにDriverKitを追加します。

00:17:16.000 --> 00:17:22.000
これにより、ユーザーがDriverKitをサポートしていないデバイスにアプリをインストールできなくなります。

00:17:22.000 --> 00:17:29.000
また、アプリとドライバーがハードウェアデバイスでどのように機能するかを示すビデオをApp Reviewに提出することをお勧めします。

00:17:29.000 --> 00:17:32.000
それがiPadのDriverKitです。

00:17:32.000 --> 00:17:42.000
M1でUSB、PCI、およびオーディオドライバをiPadに持ち込み、それらのドライバをApp Storeのアプリ内に配信できるようになりました。

00:17:42.000 --> 00:17:46.000
そして、すでにドライバーを持っているなら、それをiPadに持ち込むのは簡単です。

00:17:46.000 --> 00:17:53.000
開発者は、iPadでDriverKitを使用してみて、フィードバックアシスタントを使用してフィードバックを提供することをお勧めします。

00:17:53.000 --> 23:59:59.000
ご覧いただきありがとうございます。

