WEBVTT

00:00:00.000 --> 00:00:13.000
- 「Swift Playgroundsで最初のアプリを構築する」へようこそ。

00:00:13.000 --> 00:00:17.000
私はスウィフトプレイグラウンドチームのエンジニア、コレット・チャールトンです。

00:00:17.000 --> 00:00:21.000
- そして、私はスウィフトプレイグラウンドチームの別のエンジニア、コナー・ワカモです。

00:00:21.000 --> 00:00:31.000
- Swift Playgroundsは、Swiftでコーディングを学ぶための素晴らしいツールであり、今では物事をさらに一歩進めてアプリを構築することもできます!

00:00:31.000 --> 00:00:38.000
今日は、空白のテンプレートから始めて、Swift Playgroundsでアプリを構築することを順を追って説明します。

00:00:38.000 --> 00:00:48.000
次に、プレビューとコンソールを使用して問題をデバッグする方法を示し、最後にアプリをTestFlightに提出します。

00:00:48.000 --> 00:00:52.000
私たちのチームが本当に好きなのは、お茶を作って飲むことです。

00:00:52.000 --> 00:00:56.000
私たちはそれをとても愛しているので、そのためのアプリを作りたいと思っています。

00:00:56.000 --> 00:01:06.000
コナーと私は、ティータイムに役立つ小さなアプリを構築し、毎日飲むものを選ぶのに役立つお茶のリストを提供します。

00:01:06.000 --> 00:01:10.000
Swift PlaygroundsはMacとiPadでうまく機能します。

00:01:10.000 --> 00:01:17.000
今日はMacを持っているので、そこでこのアプリを作り始めるつもりです。 

00:01:17.000 --> 00:01:26.000
コーディングの初心者でも、経験豊富な開発者でも、Swift Playgroundsはさまざまなテンプレートと指導コンテンツを提供しています。

00:01:26.000 --> 00:01:37.000
ティーアプリでは、画面の左下隅にある空白のアプリテンプレートをクリックすることから始めます。

00:01:37.000 --> 00:01:42.000
テンプレートがわかったので、ダブルクリックして開きましょう。

00:01:42.000 --> 00:01:50.000
すごい。右側は、Hello Worldのテキストを示すライブインタラクティブプレビューです。

00:01:50.000 --> 00:01:55.000
コーディングを始める前に、アプリの設定を使ってアプリを少しカスタマイズしましょう。

00:01:55.000 --> 00:02:02.000
これを行うには、サイドバーの左上隅にあるアプリ設定ボタンをクリックします。

00:02:02.000 --> 00:02:08.000
ここでは、アプリ名やアクセントカラーなど、さまざまなプロジェクトプロパティをカスタマイズできます。

00:02:08.000 --> 00:02:17.000
カスタムまたはプレースホルダアプリのアイコン、機能、または目的文字列、およびbundleIDを追加することもできます。

00:02:17.000 --> 00:02:23.000
アプリの名前をティータイムに更新します。

00:02:23.000 --> 00:02:27.000
アクセントカラーを茶色にします。

00:02:27.000 --> 00:02:32.000
そして、プレースホルダアイコンをマグカップに更新します。

00:02:32.000 --> 00:02:44.000
すごい。重要な部分がなくなったので、テンプレートテキストを選択し、ライブラリからの最初のビューに置き換えて、コードを書き始めましょう。

00:02:44.000 --> 00:02:50.000
ライブラリは、プロジェクトツールバーのプラスボタンをクリックしてアクセスできます。

00:02:50.000 --> 00:02:59.000
さまざまなビュー、修飾子、SFシンボル、色の使いやすいスニペットが含まれています。

00:02:59.000 --> 00:03:11.000
リストビューを使用してお茶のリストを表示するので、検索フィールドにリストを入力し、クリックして挿入します。

00:03:11.000 --> 00:03:16.000
リストビューがわかったので、お茶のアイテムを追加しましょう。

00:03:16.000 --> 00:03:19.000
テキストをタイプし始めます...

00:03:19.000 --> 00:03:30.000
そして、リターンキーを使用して、インラインコード補完パネルからコード補完の提案を受け入れて挿入します。

00:03:30.000 --> 00:03:35.000
さて、今、私たちは1つのお茶を追加したリストビューを持っています。

00:03:35.000 --> 00:03:42.000
もう少し追加しましょう。

00:03:42.000 --> 00:03:46.000
待って、誤ってジャスミングリーンを2回追加してしまったようです。

00:03:46.000 --> 00:03:51.000
お茶の重複を避けるために、注文セットとして保管する必要があります。

00:03:51.000 --> 00:03:56.000
私たちにとって幸運なことに、Appleの迅速な収集パッケージはまさにそれを提供します。

00:03:56.000 --> 00:04:00.000
では、スウィフトコレクションパッケージをプロジェクトに追加しましょう。

00:04:00.000 --> 00:04:07.000
これを行うには、ファイルメニューを開き、[パッケージの追加]を選択します。

00:04:07.000 --> 00:04:17.000
まず、swift-collectionsパッケージのURLを入力してから、Returnキーを押します。

00:04:17.000 --> 00:04:23.000
パッケージがフェッチされた後、パッケージのバージョンとプロジェクトに追加できるその他の製品を見ることができます。

00:04:23.000 --> 00:04:31.000
このアプリでは、コレクションのみを選択し、[プロジェクトに追加]をクリックします。

00:04:31.000 --> 00:04:36.000
これで、パッケージの下のサイドバーにスウィフトコレクションがプロジェクトに追加されました。

00:04:36.000 --> 00:04:47.000
お茶のリストを格納するために、OrderedSet of Stringを作成しましょう。

00:04:47.000 --> 00:04:50.000
待って。私たちは問題を抱えているようです。

00:04:50.000 --> 00:04:54.000
問題のアイコンをクリックして見てみましょう。 

00:04:54.000 --> 00:04:57.000
スコープに設定されたタイプが見つかりません。

00:04:57.000 --> 00:05:00.000
ああ、何が問題なのかわかりました。

00:05:00.000 --> 00:05:03.000
私たちのプロジェクトでコレクションモジュールをインポートするのを忘れました。

00:05:03.000 --> 00:05:13.000
それをインポートして、問題は解決されるはずです。

00:05:13.000 --> 00:05:19.000
その問題を解決したので、リストビューを更新して、作成したばかりのコレクションを使用しましょう。

00:05:19.000 --> 00:05:43.000
これを行うには、ForEach Viewを使用します。

00:05:43.000 --> 00:05:49.000
さて、私たちはそれを持っています--私たちのお茶のコレクションから表示されているお茶のリスト。

00:05:49.000 --> 00:05:55.000
このプロジェクトに取り組んでいる中で、追加する機能に関するアイデアが増えています。

00:05:55.000 --> 00:06:02.000
私たちのアプリが口笛を吹くティーケトルを聞いて、いつ注ぐ時間かを知らせることができれば、とてもクールです。

00:06:02.000 --> 00:06:13.000
私は今これを実装するつもりはありませんが、私たちのアプリがマイクを使用する必要がある理由をユーザーに説明するために私たちが取る手順を歩きましょう。

00:06:13.000 --> 00:06:17.000
これを追加するには、アプリの設定に戻りましょう...

00:06:17.000 --> 00:06:20.000
そして、機能をクリックします。

00:06:20.000 --> 00:06:27.000
右上隅のプラスボタンを使用すると、プロジェクトに追加できる機能のリストが表示されます。

00:06:27.000 --> 00:06:31.000
マイクを見つけて、それをクリックして追加しましょう。

00:06:31.000 --> 00:06:38.000
目的の弦のために、「ティータイムはマイクを使って口笛を吹くティーケトルを聴きます」と書きます。

00:06:38.000 --> 00:06:44.000
追加をクリックし、アプリの設定を閉じます。

00:06:44.000 --> 00:06:53.000
さて、今日はたくさんのことをしました。プロジェクトと私が持っているクールなアイデアをコナーと共有することに興奮しています。

00:06:53.000 --> 00:06:57.000
共有iCloudフォルダに追加して、コナーと共有します。

00:06:57.000 --> 00:07:08.000
しかし、まず、マイアプリよりも良いファイル名を与えましょう。

00:07:08.000 --> 00:07:15.000
では、共有のiCloudフォルダにドラッグします。

00:07:15.000 --> 00:07:20.000
終わったので、アプリを完成させるためにコナーに渡します。

00:07:20.000 --> 00:07:23.000
ありがとう、コレット。私はiPadで物を拾うつもりです。

00:07:23.000 --> 00:07:29.000
iCloud共有フォルダを介してプロジェクトを共有しているため、プロジェクトのメインリストには表示されません。

00:07:29.000 --> 00:07:37.000
しかし、「場所」をタップすると、iCloudの他の場所から、またはサードパーティのドキュメントプロバイダーからプロジェクトにアクセスできます。

00:07:37.000 --> 00:07:42.000
私はすでに共有フォルダに入っているので、ティータイムをタップしてプロジェクトを開きます。

00:07:42.000 --> 00:07:47.000
私が行った変更は、自動的に共有プロジェクトに反映されます。

00:07:47.000 --> 00:07:53.000
コレットはとても良いエンジニアのようで、プロジェクトをiCloudにアップロードするだけで、いくつかの追加機能が追加されました!

00:07:53.000 --> 00:07:59.000
彼女はここにタブビューを実装したので、私たちはお茶のリストだけでなく、アシスタントも持っています。

00:07:59.000 --> 00:08:04.000
アシスタントタブをタップすると、それは少し裸骨ですが、それは仕事をします。

00:08:04.000 --> 00:08:09.000
私は推薦を求めることができます、そしてそれは私が飲むべきお茶をくれます。

00:08:09.000 --> 00:08:13.000
今日はジャスミングリーンを食べるべきだと思います。

00:08:13.000 --> 00:08:18.000
今、私はコレットがこれに少し余分なピザを与えるためにお茶を選ぶ楽しい新しい方法に取り組んでいたことを知っています。

00:08:18.000 --> 00:08:23.000
サイドバーを開いて探してみましょう。

00:08:23.000 --> 00:08:28.000
TeaWheelViewは有望そうなので、それをタップして開きましょう。

00:08:28.000 --> 00:08:31.000
私たちは、データの収集を取るビューを持っています。

00:08:31.000 --> 00:08:37.000
メインアプリの一部になる前にTeaWheelViewを試すことができるように、ビュープレビューを追加しましょう。

00:08:37.000 --> 00:08:42.000
ファイルの一番下までスクロールします...

00:08:42.000 --> 00:08:47.000
そして、私は「プレビュープロバイダー」と入力し始めます。

00:08:47.000 --> 00:08:56.000
Returnキーを押してコード補完の提案を受け入れ、TeaWheelView_Previewsと名付けます。

00:08:56.000 --> 00:09:03.000
ページドットがプレビューエリアの下部に表示されました。これは、Swift Playgroundsが私のプレビュープロバイダーを認識することを示しています。

00:09:03.000 --> 00:09:11.000
アプリのプレビューの下にある右のシェブロンをタップすると、アプリのプレビューの代わりにビュープレビューを使用できます。

00:09:11.000 --> 00:09:13.000
今は「こんにちは、世界！」と書いてあるだけです。

00:09:13.000 --> 00:09:16.000
では、TeaWheelViewを作成するためのコードを追加しましょう。

00:09:16.000 --> 00:09:29.000
まず、いくつかの項目を含む配列を静的プロパティとして追加して、プレビューで使用できるようにします。

00:09:29.000 --> 00:09:40.000
2つの角括弧の間に挿入ポイントを残し、閉じ括弧をドラッグして、いくつかのアイテムのプレースホルダを作成します。

00:09:40.000 --> 00:09:52.000
次に、プレースホルダをアイテムとして機能するいくつかの文字列に置き換えます。

00:09:52.000 --> 00:09:56.000
いくつかのアイテムがいくつかあるので、TeaWheelViewに追加しましょう。

00:09:56.000 --> 00:10:10.000
私はハロー、世界を選びます!例として、私のアイテムを表示するTeaWheelViewに置き換えてください。

00:10:10.000 --> 00:10:16.000
パディングも少し追加します。

00:10:16.000 --> 00:10:20.000
すごい！今、私たちのビュープレビューはホイールを示しており、それはなんて美しいホイールでしょう!

00:10:20.000 --> 00:10:26.000
私はそれを回転させることができます、そしてそれはそれが着地する場所に基づいて異なるアイテムを選びます。

00:10:26.000 --> 00:10:30.000
アシスタントタブに戻って、このホイールを追加しましょう。

00:10:30.000 --> 00:10:48.000
サイドバーを使用してAssistantTab Swiftファイルを開き、ボタンを削除して代わりにTeaWheelViewに置き換えます。

00:10:48.000 --> 00:10:55.000
TeaWheelViewはオプションで、ホイールの回転が止まったときに呼び出されるアクションクロージャーを取ります。

00:10:55.000 --> 00:11:08.000
それを使用して、最後に選んだお茶を選択したお茶に設定し、SwiftUIがアラートを表示することを知っているように、ショーピックアラートをtrueに設定します。

00:11:08.000 --> 00:11:12.000
オーケー、いいね！ここには車輪があるので、試してみましょう！！

00:11:12.000 --> 00:11:17.000
スワイプしてスピンします...そして、バイトのウーロンを飲むように言われました。

00:11:17.000 --> 00:11:22.000
もう一度スワイプします...

00:11:22.000 --> 00:11:24.000
そして、それはまだバイトのウーロンです。

00:11:24.000 --> 00:11:28.000
もう一度。

00:11:28.000 --> 00:11:31.000
うーん。何かが間違っているようです。

00:11:31.000 --> 00:11:36.000
車輪のさまざまな場所に着陸しているにもかかわらず、いつも私にバイトのウーロンを飲むように言っています。

00:11:36.000 --> 00:11:40.000
それは良いお茶ですが、私は少し多様性が欲しいです。

00:11:40.000 --> 00:11:45.000
ホイールビューに戻り、何が起こっているのかを把握してみましょう。 ホイールビューに戻ります。

00:11:45.000 --> 00:11:50.000
ホイールが回転して異なる場所に着地するので、何が間違っているのかは明らかではありません。

00:11:50.000 --> 00:12:02.000
ビュープレビューに印刷ステートメントを追加して、プレビューも壊れているかどうかを確認しましょう。

00:12:02.000 --> 00:12:05.000
今、私が車輪を回すとき...

00:12:05.000 --> 00:12:09.000
ソースエディタの左下にコンソールメッセージがポップアップ表示されます。

00:12:09.000 --> 00:12:11.000
アイテム1...

00:12:11.000 --> 00:12:15.000
項目1...項目1。

00:12:15.000 --> 00:12:21.000
はは！各スピンは私たちにアイテム1を与え、それは何かが正しく接続されていないことを示唆しています!

00:12:21.000 --> 00:12:28.000
毎回最初のものを与えてくれるので、プロジェクト全体の検索を使って最初に検索します。

00:12:28.000 --> 00:12:38.000
画面の左側にあるサイドバーの上部にある検索フィールドをタップし、「first」と入力してReturnキーを押します。

00:12:38.000 --> 00:12:42.000
その結果は有望に思えるので、私はそれをタップします。

00:12:42.000 --> 00:12:50.000
ああ、コレットはここにいくつかのデバッグコードを残したようで、正しい結果ではなく、毎回最初のアイテムを返しました。

00:12:50.000 --> 00:13:00.000
それを本当に素早く修正してから、もう一度スピンしましょう。

00:13:00.000 --> 00:13:01.000
項目2...

00:13:01.000 --> 00:13:03.000
項目4。

00:13:03.000 --> 00:13:05.000
すごい！今は機能しているようです。

00:13:05.000 --> 00:13:13.000
プレビューの下にある左のシェブロンをタップしてアプリのプレビューに戻すと、実際のアプリで試すことができます。

00:13:13.000 --> 00:13:18.000
私は車輪を回します、そしてそれは私にイングリッシュブレックファーストを食べるように言っています。

00:13:18.000 --> 00:13:20.000
だから今、私たちは働くアシスタントを持っています。

00:13:20.000 --> 00:13:33.000
すごい！アプリがすべてのサイズでうまく機能することを確認するために、画面の左上にある実行ボタンを押すことで、独自のウィンドウで実行できます。

00:13:33.000 --> 00:13:35.000
さて、すべてがここにあるようです。

00:13:35.000 --> 00:13:41.000
私はお茶のリストを持っています、そして私はここに車輪とすべてを持つアシスタントを持っています。

00:13:41.000 --> 00:13:52.000
ステータスバーの小さなSwiftアイコンをタップし、ポップアップするシートの「プロジェクトを表示」ボタンを選択すると、Swift Playgroundsのプロジェクトに戻ることができます。

00:13:52.000 --> 00:13:56.000
私はこのアプリを自分で、そして友人や家族と一緒にテストする準備ができています。

00:13:56.000 --> 00:14:02.000
Swift Playgroundsは、Swift Playgrounds内からTestFlightに直接提出できるため、テストが簡単になります!

00:14:02.000 --> 00:14:10.000
アプリの設定シートを表示して一番下までスクロールすると、「App Store Connectにアップロード」ボタンがあります。

00:14:10.000 --> 00:14:27.000
それをタップすると、Swift Playgroundsはアプリレコードを作成し、アプリをApp Store Connectにアップロードするすべてのハードワークを行い、TestFlightと最終的にはApp Storeで配布することができます。

00:14:27.000 --> 00:14:33.000
アプリがアップロードされたので、App Store Connectにアクセスして、ベータ版アプリレビューのために提出することができます。

00:14:33.000 --> 00:14:42.000
少し待った後、TestFlightアプリにアクセスして、iPhoneでもそこからインストールできます!

00:14:42.000 --> 00:14:46.000
「インストール」をタップしてティータイムをインストールします。

00:14:46.000 --> 00:14:50.000
インストールされたので、「開く」をタップして開きます。

00:14:50.000 --> 00:14:57.000
テストノートと、フィードバックの提供方法に関するこれらの指示をタップします。

00:14:57.000 --> 00:15:00.000
そして、あなたはそれを持っています - 私たちのアプリはiPhoneで実行されています。

00:15:00.000 --> 00:15:04.000
今日はどんなお茶を飲むべきですか？

00:15:04.000 --> 00:15:07.000
マットPのティーパーティーをしているようです。

00:15:07.000 --> 00:15:13.000
今日、コレットと私は、MacとiPadでSwift Playgroundsを使用してアプリを構築する方法を紹介しました。

00:15:13.000 --> 00:15:24.000
ライブラリとコード補完を使用して新しいコードを挿入し、iCloud共有フォルダを介してプロジェクトを共有し、ビュープレビューとコンソールを使用してコードの問題をデバッグしました。

00:15:24.000 --> 00:15:28.000
iPadから直接TestFlightにアプリを提出しました!

00:15:28.000 --> 00:15:33.000
うまくいけば、あなたは途中で1つか2つのことを学んだでしょう、そして私たちはあなたがSwift Playgroundsで構築するものを見るのが待ちきれません。

00:15:33.000 --> 23:59:59.000
ご覧いただきありがとうございます、そしてWWDCの残りの部分を楽しんでください!

