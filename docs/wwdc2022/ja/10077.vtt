WEBVTT

00:00:00.000 -> 00:00:09.000
♪ ♪

00:00:09.000 -> 00:00:23.000
トミー・ポーリー:こんにちは、私はトミー・ポーリーです。あなたのアプリやウェブサイトがAppleや業界全体の詐欺防止プロバイダーと協力して、CAPTCHAの必要性を減らす方法を共有することに興奮しています。

00:00:23.000 -> 00:00:42.000
今日は、プライベートアクセストークンと、詐欺防止のための強力なツールになる方法、操作するサーバーでプライベートアクセストークンのサポートを有効にする方法、およびこれらのトークンをアプリで使用する方法について説明します。

00:00:42.000 -> 00:00:49.000
プライベートアクセストークンを紹介するために、最初にCAPTCHAが使用される理由を説明することから始めます。

00:00:49.000 -> 00:01:00.000
ウェブサイトで新しいアカウントにサインアップした場合、または既存のアカウントでサインインしようとした場合、ある時点でこのようなCAPTCHAに遭遇した可能性があります。

00:01:00.000 -> 00:01:07.000
時には、CAPTCHAは押すだけのボタンですが、記入するのが難しい場合もあります。

00:01:07.000 -> 00:01:11.000
あなたはおそらくこれらによって中断されることを楽しんでいないでしょう。

00:01:11.000 -> 00:01:13.000
私は確かにしません。

00:01:13.000 -> 00:01:20.000
これらの経験が存在する理由は、不正行為を防ぐためです。

00:01:20.000 -> 00:01:25.000
サーバーを運営している場合は、詐欺に圧倒されたくありません。

00:01:25.000 -> 00:01:31.000
アカウントを作成したり、製品を購入したりしようとする試みは、正当なユーザーから来ています。

00:01:31.000 -> 00:01:36.000
しかし、他の試みは攻撃者やボットからのものかもしれません。

00:01:36.000 -> 00:01:45.000
残念ながら、CAPTCHAのような詐欺を防ぐための一般的なツールは、多くの場合、人々があなたのアプリやウェブサイトを使用することを難しくします。

00:01:45.000 -> 00:01:53.000
良い経験と詐欺の防止の間の適切なバランスを見つけることは困難です。

00:01:53.000 -> 00:01:58.000
CAPTCHAは、多くの場合、より遅く、より複雑なユーザーエクスペリエンスにつながります。

00:01:58.000 -> 00:02:04.000
攻撃を防ごうとすることで、貴重な顧客を失う可能性もあります。

00:02:04.000 -> 00:02:08.000
CAPTCHAはまた、プライバシーのリスクをもたらす可能性があります。

00:02:08.000 -> 00:02:20.000
クライアントが信頼され、より簡単なCAPTCHAを取得できるかどうかを判断するために、サーバーはIPアドレスを使用してクライアントを追跡またはフィンガープリントすることに依存することがよくあります。

00:02:20.000 -> 00:02:32.000
この種の追跡は、Safari、Mail Privacy Protection、およびiCloud Private Relayによって取られているインターネットプライバシーの方向性と矛盾しています。

00:02:32.000 -> 00:02:37.000
そして、CAPTCHAはアクセシビリティに深刻な問題を引き起こす可能性があります。

00:02:37.000 -> 00:02:46.000
ボットからのアクセスを阻止しようとすることで、障害や言葉の壁を持つ実際の人間もブロックします。

00:02:46.000 -> 00:02:48.000
もっといい方法があります。

00:02:48.000 -> 00:03:02.000
誰かが初めてあなたのウェブサイトとやり取りしている場合でも、Safariのようなアプリやブラウザを介してそれをロードしている場合、彼らはすでにボットが模倣するのが難しい多くのアクションを実行しています。

00:03:02.000 -> 00:03:12.000
まず、彼らはiPhone、iPad、またはMacを持っており、パスワード、Touch ID、またはFace IDでデバイスのロックを解除しました。

00:03:12.000 -> 00:03:16.000
彼らはほとんどの場合、Apple IDでデバイスにサインインしています。

00:03:16.000 -> 00:03:20.000
そして、彼らはコード署名されたアプリを立ち上げました。

00:03:20.000 -> 00:03:34.000
この情報は、CAPTCHAに頼ることなく、クライアントを追跡することでプライバシーを損なうことなく、サーバーが正当なクライアントを信頼し、詐欺を防ぐのに役立ちます。

00:03:34.000 -> 00:03:44.000
プライベートアクセストークンは、サーバーがクライアントを自動的に信頼することを可能にするもので、iOS 16とmacOS Venturaの新機能です。

00:03:44.000 -> 00:03:49.000
これらのトークンがどのように機能するかを説明する前に、それらを実際に示します。

00:03:49.000 -> 00:03:52.000
あなたはこれを気に入るはずです。

00:03:52.000 -> 00:03:55.000
フィナンシャルタイムズのウェブサイトの記事を読みたいです。

00:03:55.000 -> 00:03:58.000
私はこれらのシナモンバンズにとても興奮しています。

00:03:58.000 -> 00:04:09.000
そして、私は2つの異なる携帯電話にサイトをロードしました。1つはiOS 15を実行し、もう1つはプライベートアクセストークンをサポートするiOS 16を実行しています。

00:04:09.000 -> 00:04:17.000
iOS 15の携帯電話から、[サインイン]をクリックし、アカウントとパスワードを入力します。

00:04:17.000 -> 00:04:20.000
しかし、その後、私はCAPTCHAでヒットします。

00:04:20.000 -> 00:04:26.000
その記事を読む前に文字を入力する必要があります。

00:04:26.000 -> 00:04:36.000
プライベートアクセストークンをサポートするiOS 16の携帯電話でまったく同じことをすると、すぐに通り抜けます。

00:04:36.000 -> 00:04:44.000
これにより、多くの人、多くの時間を節約でき、顧客は信頼されることに感謝するでしょう。

00:04:44.000 -> 00:04:56.000
プライベートアクセストークンを使用すると、先ほど見たように、IETFプライバシーパスワーキンググループで標準化された技術を使用して、サーバーがCAPTCHAを回避できます。

00:04:56.000 -> 00:05:02.000
Appleは、これを可能にするために業界全体の企業と協力しています。

00:05:02.000 -> 00:05:11.000
このプロトコルを使用すると、サーバーは新しいHTTP認証方法であるPrivateTokenを使用してトークンを要求できます。

00:05:11.000 -> 00:05:21.000
これらのトークンは、RSAブラインド署名を使用して、クライアントが認証チェックに合格できたという事実を暗号的に署名します。

00:05:21.000 -> 00:05:35.000
これらの署名は「リンク不可」です。つまり、トークンを受け取るサーバーは有効であることしか確認できませんが、時間の経過とともにクライアントの身元を検出したり、クライアントを認識したりすることはできません。

00:05:35.000 -> 00:05:39.000
プロトコルの仕組みは次のとおりです。

00:05:39.000 -> 00:05:51.000
まず、iOSまたはmacOSクライアントがHTTP経由でサーバーにアクセスすると、サーバーはPrivateToken認証スキームを使用してチャレンジを送り返します。

00:05:51.000 -> 00:05:58.000
これは、サーバーから信頼されているトークン発行者を指定します。

00:05:58.000 -> 00:06:05.000
クライアントがトークンを取得する必要がある場合、iCloudテスターに連絡し、トークンリクエストを送信します。

00:06:05.000 -> 00:06:11.000
このトークンリクエストは「ブラインド」されているため、サーバーチャレンジにリンクすることはできません。

00:06:11.000 -> 00:06:23.000
テスターは、デバイスのSecure Enclaveに保存されている証明書を使用してデバイス認証を実行し、アカウントが良好な状態にあることを確認します。

00:06:23.000 -> 00:06:36.000
このテスターは、クライアントデバイスが通常のパターンに従っているかどうか、またはデバイスのファームの一部として侵害または使用されている可能性があるかどうかを認識するために、レート制限を実行することもできます。

00:06:36.000 -> 00:06:44.000
クライアントを検証できる場合、テスターは新しいトークンの要求を発行者に送信します。

00:06:44.000 -> 00:06:49.000
トークン発行者がリクエストを受け取ると、クライアントについて何も知りません。

00:06:49.000 -> 00:06:56.000
しかし、iCloudテスターを信頼しているので、トークンに署名します。

00:06:56.000 -> 00:07:06.000
その後、クライアントは署名されたトークンを受け取り、元のサーバーがそれを検証できるように「unblinding」と呼ばれるプロセスで変換します。

00:07:06.000 -> 00:07:11.000
そして最後に、クライアントは署名されたトークンをサーバーに提示します。

00:07:11.000 -> 00:07:19.000
サーバーは、このトークンが発行者によって署名されていることを確認できますが、トークンを使用してクライアントを識別または認識することはできません。

00:07:19.000 -> 00:07:26.000
では、サーバーでこの技術をどのように活用できますか?

00:07:26.000 -> 00:07:31.000
サーバーにプライベートアクセストークンを採用するには3つのステップがあります。

00:07:31.000 -> 00:07:34.000
まず、トークン発行者を選択する必要があります。

00:07:34.000 -> 00:07:42.000
第二に、クライアントを検証する場合、サーバーはHTTP認証の課題を送信する必要があります。

00:07:42.000 -> 00:07:48.000
そして第三に、サーバーはクライアントから送信されたトークンを検証する必要があります。

00:07:48.000 -> 00:07:55.000
選択したトークン発行者は、サーバーが検証するトークンに署名できる信頼できるプロバイダーです。

00:07:55.000 -> 00:08:06.000
これは、既存のCAPTCHAプロバイダー、Webホスティングサービス、またはCDNとも呼ばれるコンテンツ配信ネットワークである可能性があります。

00:08:06.000 -> 00:08:15.000
iOS 16とmacOS Venturaベータ版では、すでにテストを開始できるトークン発行者が2つあります。

00:08:15.000 -> 00:08:27.000
FastlyとCloudflareは、プライバシーパス標準を開発しており、すでに発行者サービスを利用可能にしている2つのCDNです。

00:08:27.000 -> 00:08:37.000
他のCAPTCHAプロバイダー、ウェブホスティングサービス、およびCDNも、Appleデバイスで動作するトークン発行者を実行できます。

00:08:37.000 -> 00:08:44.000
発行者は今年後半にregister.apple.comでサインアップできるようになります。

00:08:44.000 -> 00:08:56.000
特定のトークン発行者の使用が、クライアントがアクセスしているウェブサイトを特定する方法にならないことが重要です。これはプライバシーの問題になります。

00:08:56.000 -> 00:09:06.000
したがって、各トークン発行者は、少なくとも数百のサーバーで動作する大規模なサービスである必要があります。

00:09:06.000 -> 00:09:16.000
クライアントがサーバーにアクセスすると、PrivateTokenスキームでHTTP認証チャレンジを送信することでトークンを要求できます。

00:09:16.000 -> 00:09:35.000
これを行うには、2つのオプションがあります。既存のCAPTCHAまたは詐欺防止プロバイダーと協力して、チャレンジをスクリプトに組み込み、自動的に処理されるか、サーバーから直接これらのチャレンジを送信するかを選択できます。

00:09:35.000 -> 00:09:50.000
ウェブサイトの一部としてこれを行う場合、課題は、サイトに埋め込まれた別のサードパーティドメインではなく、メインURLのサブドメインであるファーストパーティドメインから来る必要があります。

00:09:50.000 -> 00:09:57.000
クライアントがトークンを返すときは、発行者の公開鍵を使用してトークンの有効性を確認する必要があります。

00:09:57.000 -> 00:10:05.000
また、クライアントがトークンを複数回提示しようとするリプレイ攻撃を防ぐためにチェックを強制することもできます。

00:10:05.000 -> 00:10:09.000
トークンは1回限りの使用を目的としています。

00:10:09.000 -> 00:10:23.000
以前にどのトークンが送信されたかを覚えておくか、トークンがチャレンジで送信された一意の値に署名することを要求することで、リプレイ攻撃を防ぐことができます。

00:10:23.000 -> 00:10:29.000
あなたのサイトは、この認証チャレンジに応答しないレガシークライアントと連携する必要があります。

00:10:29.000 -> 00:10:39.000
したがって、認証はメインページの読み込みをブロックするのではなく、クライアントを信頼するためのオプションの方法として扱われることが重要です。

00:10:39.000 -> 00:10:49.000
SafariとWebKitを介してアクセスされるWebサーバーは自動的に機能しますが、アプリ内でプライベートアクセストークンを直接使用することもできます。

00:10:49.000 -> 00:10:58.000
プライベートアクセストークンには、Apple IDがサインインしているデバイスでiOS 16またはmacOS Venturaが必要です。

00:10:58.000 -> 00:11:06.000
このApple IDは認証にのみ使用され、トークンを受け取るサーバーと共有されません。

00:11:06.000 -> 00:11:15.000
アプリ内では、WebKitまたはURLSessionを使用してHTTPを使用してサーバーに接続すると、トークンが利用できます。

00:11:15.000 -> 00:11:25.000
その後、アプリがフォアグラウンドにいる間にチャレンジを受け取るたびに、システムは自動的に認証としてトークンを送信します。

00:11:25.000 -> 00:11:32.000
URLSessionを使用している場合は、プライベートアクセストークンを機能させるために明示的に何もする必要はありません。

00:11:32.000 -> 00:11:41.000
URLSessionは、PrivateToken HTTP認証スキームを使用して課題に自動的に応答します。

00:11:41.000 -> 00:11:56.000
ただし、アプリがフォアグラウンドにない場合や、デバイスにApple IDがサインインしていない場合など、トークンの取得にエラーが発生した場合、アプリはトークンチャレンジを含む401 HTTPレスポンスを受け取ります。

00:11:56.000 -> 00:12:05.000
これにより、アプリはトークンチャレンジが受信されたことを知ることができ、ユースケースでエラーを正しく処理する機会が提供されます。

00:12:05.000 -> 00:12:13.000
プライベートアクセストークンが利用可能なときはいつでもCAPTCHAを避けることで、アプリやウェブサイトを誰にとってもより良い体験にしましょう。

00:12:13.000 -> 00:12:19.000
サーバーがトークンチャレンジを送信し、トークンを検証できるようにします。

00:12:19.000 -> 00:12:27.000
また、アプリでは、URLSessionまたはWebKitを使用して、プライベートアクセストークンを自動的にサポートします。

00:12:27.000 -> 23:59:59.000
あなたが構築するCAPTCHAフリーの体験を楽しみにしています。

