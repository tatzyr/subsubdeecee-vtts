WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:10.000
♪

00:00:10.000 -> 00:00:11.000
こんにちは、私はドンハオです。

00:00:11.000 -> 00:00:16.000
このセッションでは、Swift Chartsを使用して優れたデータビジュアライゼーションを構築する方法について詳しく学びます。

00:00:16.000 -> 00:00:21.000
言い換えれば、アプリのチャートで何ができるかの基準を引き上げます。

00:00:21.000 -> 00:00:26.000
優れたデータビジュアライゼーションにより、アプリがより有益で魅力的になります。

00:00:26.000 -> 00:00:31.000
私たちのアプリで素晴らしいチャートを構築するために、考慮すべきことがたくさんあります。

00:00:31.000 -> 00:00:38.000
もちろん、チャートが基礎となるデータを忠実に伝達し、誰もがアクセスできるようにしたいと考えています。

00:00:38.000 -> 00:00:41.000
しかし、アプリのチャートは真空状態ではありません。

00:00:41.000 -> 00:00:43.000
それらはアプリのユーザーインターフェースの一部です。

00:00:43.000 -> 00:00:47.000
ダークモードのようなローカリゼーションやOS機能をサポートする必要があります。

00:00:47.000 -> 00:00:57.000
チャートは、UIの残りの部分にシームレスにフィットする適切なレイアウトを持っている必要があります。ダイナミックタイプとデバイスの画面サイズをサポートする必要があります。

00:00:57.000 -> 00:01:04.000
また、チャートがすべてのプラットフォームで動作し、最高のルックアンドフィールのための素晴らしいアニメーションを持つことを望んでいます。

00:01:04.000 -> 00:01:15.000
Swift Chartsは、これらの基本的な機能の多くを自動的に処理するため、独自のデータを伝え、誰もがアクセスできるようにするための最高のチャートの構築に集中できます。

00:01:15.000 -> 00:01:21.000
Swift Chartsは、SwiftUIのように感じる宣言型構文を提供することで、これを実現します。

00:01:21.000 -> 00:01:30.000
少量のコードでチャートに欲しいものを指定すると、Swift Chartsは箱から出してすぐに素晴らしいチャートを自動的に生成します。

00:01:30.000 -> 00:01:37.000
スウィフトチャートは、カスタマイズオプションの豊富なセットも提供しているので、独自のアプリケーションに合わせてチャートのスタイルを設定できます。

00:01:37.000 -> 00:01:41.000
このセッションでは、スウィフトチャートをより深く理解するためのものです。

00:01:41.000 -> 00:01:48.000
まず、宣言型構文の基本的な構成要素であるマークとマークの構成について説明します。

00:01:48.000 -> 00:01:51.000
Apple製品でチャートを使用する例をいくつか紹介します。

00:01:51.000 -> 00:01:56.000
ご覧のとおり、さまざまなデータ、チャートタイプ、スタイルがあります。

00:01:56.000 -> 00:02:05.000
チャートの種類ごとに事前に構築されたコンポーネントを提供する代わりに、Swift Chartsは構成によってチャートを作成するというアイデアに基づいて構築されています。

00:02:05.000 -> 00:02:13.000
さまざまな方法で組み合わせることで、少数の基本的なビルディングブロックを提供し、幅広いチャートを作成できます。

00:02:13.000 -> 00:02:14.000
それがどのように機能するかをお見せしましょう。

00:02:14.000 -> 00:02:17.000
これを行うには、例が必要です。

00:02:17.000 -> 00:02:24.000
私のチームメイト全員がパンケーキが大好きなので、私たちはさまざまな種類のパンケーキを販売するフードトラックの注文を追跡するアプリを持っています。

00:02:24.000 -> 00:02:30.000
これは、過去30日間に配達されたパンケーキの数を示すチャートで、スタイル別に分類されています。

00:02:30.000 -> 00:02:33.000
これは棒グラフとして広く知られています。

00:02:33.000 -> 00:02:38.000
スウィフトチャートでは、6つの青い長方形のそれぞれをマークと見なします。

00:02:38.000 -> 00:02:43.000
マークは、データを表すグラフィカルな要素です。

00:02:43.000 -> 00:02:48.000
これは、過去30日間に販売されたカチャパの数を示すバーマークです。

00:02:48.000 -> 00:02:56.000
このチャートには6つのバーマークがあり、それぞれがパンケーキスタイルと対応する販売番号を示しています。

00:02:56.000 -> 00:02:59.000
これがコードでどのように書かれているか見てみましょう。

00:02:59.000 -> 00:03:06.000
ここでは、「最も売れたスタイル、カチャパ」のような説明的なタイトルと空のチャートを含むSwiftUIビューがあります。

00:03:06.000 -> 00:03:11.000
ここでのチャートタイプは、単一のチャートを定義するトップレベルビューです。

00:03:11.000 -> 00:03:16.000
他のビューを追加するのと同じように、SwiftUIアプリケーションにチャートを追加できます。

00:03:16.000 -> 00:03:19.000
残りの講演では、チャートの部分に焦点を当てます。

00:03:19.000 -> 00:03:22.000
チャートにマークを追加できます。

00:03:22.000 -> 00:03:26.000
ここでは、カチャパとその販売番号を示す単一のBarMarkがあります。

00:03:26.000 -> 00:03:29.000
これにより、単一のバーマークが付いたチャートになります。

00:03:29.000 -> 00:03:36.000
スクリーンショットに示すように、チャートはユーザーインターフェイスの残りの部分にうまくフィットし、優れたデフォルトスタイルを持っています。

00:03:36.000 -> 00:03:40.000
例えば、X軸でうまく丸みを帯びた数字。

00:03:40.000 -> 00:03:45.000
名前と販売が異なる別のバーマークを追加すると、2番目のバーになります。

00:03:45.000 -> 00:03:48.000
これを繰り返して、より多くのバーを追加できます。

00:03:48.000 -> 00:03:51.000
実際のアプリでは、おそらくこれらのマークをプログラムで生成します。

00:03:51.000 -> 00:04:00.000
これを行うには、チャートに構造体またはタプルの配列を提供し、ForEachを使用して各要素の値でバーマークを作成できます。

00:04:00.000 -> 00:04:07.000
ForEachがチャートの唯一のコンテンツである場合、この場合のように、チャートに直接データを入れることもできます。

00:04:07.000 -> 00:04:10.000
多くのSwiftUI修飾子はマークに使用できます。

00:04:10.000 -> 00:04:15.000
たとえば、.foregroundStyle修飾子でバーの色を設定できます。

00:04:15.000 -> 00:04:21.000
ここでは、名前付きアセットとしてXcodeで作成できる名前付き色に設定しています。

00:04:21.000 -> 00:04:25.000
チャートは誰でもアクセスできることが非常に重要です。

00:04:25.000 -> 00:04:32.000
デフォルトでは、チャートは自動生成されたアクセシビリティ要素を持つVoiceOverユーザーに公開されます。

00:04:32.000 -> 00:04:37.000
.accessibilityLabel と .accessibilityValue 修飾子でこれらをカスタマイズできます。

00:04:37.000 -> 00:04:45.000
たとえば、ラベルをパンケーキの名前に設定し、接尾辞「sold」で販売値を設定します。

00:04:45.000 -> 00:04:50.000
その結果、VoiceOverユーザー向けのカスタムエクスペリエンスが得られます。

00:04:50.000 -> 00:04:55.000
ボイスオーバー:カチャパ、916販売。Injera、850が販売されました。

00:04:55.000 -> 00:04:59.000
クレープ、802が販売されました。

00:04:59.000 -> 00:05:03.000
Donghao：私たちのアプリは、日々のパンケーキの配達も追跡します。

00:05:03.000 -> 00:05:08.000
ここでは、過去30日間に販売されたパンケーキの数を示すビューがあります。

00:05:08.000 -> 00:05:12.000
このチャートは、個々の日の詳細なビューを示しています。

00:05:12.000 -> 00:05:14.000
このチャートの作り方を見てみましょう。 

00:05:14.000 -> 00:05:17.000
ここには、日と売上のデータアレイがあります。

00:05:17.000 -> 00:05:21.000
その日は、その日の開始時に日付値で表されます。

00:05:21.000 -> 00:05:33.000
棒マークでデータを視覚化します。xは日を示し、ここでの単位パラメータは、日付値が暦日の期間を表し、yはその日の売上を示すことを意味します。

00:05:33.000 -> 00:05:38.000
右側に示すように、日々の売上を示す棒グラフが表示されます。

00:05:38.000 -> 00:05:41.000
棒グラフは、このデータを視覚化する唯一の方法ではありません。

00:05:41.000 -> 00:05:43.000
折れ線グラフを試してみましょう。

00:05:43.000 -> 00:05:48.000
私たちがしなければならない唯一の変更は、BarMarkをLineMarkに置き換えることです。

00:05:48.000 -> 00:05:54.000
宣言型構文を使用すると、Swiftチャートのチャートタイプを切り替えるのは非常に簡単です。

00:05:54.000 -> 00:05:57.000
前のチャートは、時間の経過時的な総売上高を示しています。

00:05:57.000 -> 00:06:07.000
しかし、フードトラックサービスは2つの都市で運営されており、平日ごとに2つの都市間の売上を比較して、どこに行くかを決定したいと思います。

00:06:07.000 -> 00:06:11.000
このチャートの線は、月曜日から日曜日までの売上を示しています。

00:06:11.000 -> 00:06:13.000
各線は都市を表しています。

00:06:13.000 -> 00:06:16.000
これがどのように構築されているか見てみましょう。

00:06:16.000 -> 00:06:25.000
さて、タプルの配列でここに定義された2つの都市のデータがあるとします。それぞれに都市名と平日の売上が含まれています。

00:06:25.000 -> 00:06:32.000
次に、以前に持っていた折れ線グラフを、系列データをループするForEachでラップできます。

00:06:32.000 -> 00:06:39.000
2つの都市を区別するために、.foregroundStyle(by:)修飾子を使用して、都市名で2つの行のスタイルを設定します。

00:06:39.000 -> 00:06:48.000
ご覧のとおり、スウィフトチャートは自動的に2つの都市の2つの色を選択し、線に色を付け、各色の意味を示す凡例を追加します。

00:06:48.000 -> 00:06:54.000
デフォルトの色は、区別しやすいシステム色に選択されます。

00:06:54.000 -> 00:07:01.000
色覚異常の人がチャートを読みやすくするために、線に記号を追加してさらに区別することができます。

00:07:01.000 -> 00:07:06.000
これは、city をデータとして .symbol(by:) 修飾子を追加することで実行できます。

00:07:06.000 -> 00:07:13.000
最後に、線をより滑らかに見せるために、線の補間方法として曲線を使用することができます。

00:07:13.000 -> 00:07:19.000
2つのシリーズの折れ線グラフがあっても、私たちはまだバーマークに戻って、それがどのように見えるかを見ることができます。

00:07:19.000 -> 00:07:27.000
マークタイプをBarMarkに変更し、バーに関係のない修飾子を削除すると、積み重ねられた棒グラフを取得します。

00:07:27.000 -> 00:07:31.000
毎月2つのバーがあるため、バーは自動的に積み重ねられます。

00:07:31.000 -> 00:07:39.000
積み重ねられた棒グラフは、2つの都市の総販売額を示すのに最適ですが、2つの都市を比較するにはあまり良くありません。

00:07:39.000 -> 00:07:46.000
比較しやすくするために、これを.position(by:)修飾子でグループ化された棒グラフに変えることができます。

00:07:46.000 -> 00:07:49.000
これまでのところ、私たちはバーマークとラインマークを見てきました。

00:07:49.000 -> 00:07:57.000
スウィフトチャートは、ポイントマーク、エリアマーク、ルールマーク、長方形マークなど、他のいくつかのマークタイプをサポートしています。

00:07:57.000 -> 00:08:00.000
これらのマークを組み合わせて、より複雑なチャートを作成できます。

00:08:00.000 -> 00:08:03.000
例を見てみましょう。

00:08:03.000 -> 00:08:07.000
毎月の1日の平均売上高を示す折れ線グラフから始めましょう。

00:08:07.000 -> 00:08:15.000
平均は便利ですが、より極端な値のアイデアを得るために、1日の最小売上高と最大売上高も見たいと考えています。

00:08:15.000 -> 00:08:18.000
これらの値をデータに追加することから始めましょう。

00:08:18.000 -> 00:08:23.000
データ配列の各要素に毎日の最小値と毎日の最大値を導入します。

00:08:23.000 -> 00:08:32.000
次に、xが月を表示し、yが1日の最小値から始まり、1日の最大値で終わるエリアマークで最小値と最大値を視覚化できます。

00:08:32.000 -> 00:08:39.000
このようにして、線付きの1日の平均値と、線の周りの面積を含む1日の最小値と最大値を示すチャートがあります。

00:08:39.000 -> 00:08:43.000
ラインプラスエリアは、この種のデータを視覚化する唯一の方法ではありません。

00:08:43.000 -> 00:08:47.000
他のマークタイプに簡単に切り替えて、より多くのデザインオプションを探索できます。

00:08:47.000 -> 00:08:49.000
たとえば、ここではBarMarkを使用しています。

00:08:49.000 -> 00:08:54.000
しかし、ラインはバーにはあまり合わないようです。

00:08:54.000 -> 00:08:58.000
ラインマークを2点の高さの長方形マークに変更しましょう。

00:08:58.000 -> 00:09:05.000
このようにして、長方形のマークは、平均値を示すバーの内側に水平線を作成します。

00:09:05.000 -> 00:09:08.000
これらのマークの幅を調整することもできます。

00:09:08.000 -> 00:09:20.000
ここでは、たとえば、幅を.6の比率に設定しています。これは、スクリーンショットでわかるように、バーと長方形の幅が月全体の幅の60%になることを意味します。

00:09:20.000 -> 00:09:25.000
最後に、すべての月の1日の平均売上高を表示するオプションが欲しいです。

00:09:25.000 -> 00:09:31.000
そのためには、まず前景スタイルをフェードグレー色に設定して強調します。

00:09:31.000 -> 00:09:35.000
次に、ForEachの外側にルールマークを追加し、yは平均値を表示します。

00:09:35.000 -> 00:09:38.000
これにより、水平ルールが追加されます。

00:09:38.000 -> 00:09:45.000
ルールが年間平均を表示していることを明確にするために、.annotation修飾子を使用してルールに注釈を追加できます。

00:09:45.000 -> 00:09:50.000
これにより、先頭の配置で、ルールマークの上部にテキストラベルが追加されます。

00:09:50.000 -> 00:09:54.000
構成によるビルディングチャートの例をいくつか議論しました。

00:09:54.000 -> 00:09:58.000
これらの基本的なマークを使用して組み合わせるには、さまざまな方法があります。

00:09:58.000 -> 00:10:12.000
ボックスプロット、マルチシリーズ折れ線グラフ、人口ピラミッド、レンジプロット、ストリームグラフ、マルチシリーズ散布図、ヒートマップ、さらにはベクトルフィールドのプロットのように。

00:10:12.000 -> 00:10:17.000
これらは、Swift Chartsで構築できる多種多様なチャートのほんの一例です。

00:10:17.000 -> 00:10:18.000
次のトピックに飛び込みましょう。

00:10:18.000 -> 00:10:21.000
マークプロパティでデータをプロットします。

00:10:21.000 -> 00:10:28.000
スウィフトチャートは、定量、名目、時間の3つの主要なタイプまたはデータをサポートしています。

00:10:28.000 -> 00:10:36.000
定量データは、販売された製品の数、部屋の温度、在庫の価格などの数値です。

00:10:36.000 -> 00:10:44.000
Swift Chartsは、Int、Float、DoubleなどのSwift数値型を定量データとして扱います。

00:10:44.000 -> 00:10:49.000
名目データ、またはカテゴリデータは、離散的なカテゴリまたはグループを表します。

00:10:49.000 -> 00:10:55.000
例えば、人の名前、大陸、または製品の種類。

00:10:55.000 -> 00:10:59.000
文字列またはカスタム文字列値の列挙型を公称データとして使用できます。

00:10:59.000 -> 00:11:03.000
時間データは、ポイントまたは時間間隔を表します。

00:11:03.000 -> 00:11:09.000
たとえば、特定の日の期間、またはトランザクションの正確な時刻。

00:11:09.000 -> 00:11:12.000
スウィフトチャートは「日付」を時間データとして扱います。

00:11:12.000 -> 00:11:18.000
チャートは、販売価値などの抽象データをマークのプロパティに変換することで機能します。

00:11:18.000 -> 00:11:25.000
X、Y、フォアグラウンドスタイルのプロパティでデータをプロットできるBarMarkを見てみましょう。

00:11:25.000 -> 00:11:35.000
この例では、xプロパティで定量的な販売価値をプロットし、yプロパティで名目である名前をプロットします。

00:11:35.000 -> 00:11:41.000
結果のチャートは、それぞれがXの売上とYの名前を示す水平バーで構成されています。

00:11:41.000 -> 00:11:50.000
名前と販売を交換して、名前がXにあり、販売がYにあるようにすると、代わりに垂直棒グラフを取得します。

00:11:50.000 -> 00:11:56.000
ご覧のとおり、BarMarkの動作は、XプロパティとYプロパティでプロットされたデータ型に依存します。

00:11:56.000 -> 00:12:01.000
バーの向きは、定量的特性がどこにあるかによって異なります。

00:12:01.000 -> 00:12:05.000
では、データをプロットするために使用される3つのプロパティすべてを含む別のチャートを見てみましょう。

00:12:05.000 -> 00:12:12.000
ここでは、X、Yのセールス、フォアグラウンドスタイルのシティで時間的な平日をプロットします。

00:12:12.000 -> 00:12:21.000
結果のチャートは積み重ねられた棒グラフで、X軸は平日を示し、Y軸は売上を示し、バーは都市ごとに色付けされます。

00:12:21.000 -> 00:12:26.000
スウィフトチャートには、データをプロットできる6つのマークタイプと6つのマークプロパティがあります。

00:12:26.000 -> 00:12:33.000
データは3種類のものになる可能性があるので、可能な組み合わせの広大な配列があることを覚えておいてください。

00:12:33.000 -> 00:12:40.000
これは、Swift Chartsが少数の基本的なビルディングブロックで幅広いチャートデザインをサポートすることを可能にするものです。

00:12:40.000 -> 00:12:50.000
Yでの販売など、マークプロパティでデータをプロットすると、Swift Chartsは抽象データをプロパティの適切な値に変換するマッピングを作成します。

00:12:50.000 -> 00:12:55.000
この場合、販売値を画面空間のY座標に変換します。

00:12:55.000 -> 00:13:02.000
「スケール」という用語を使用して、販売などの抽象データからのマッピングを参照し、Y位置などのプロパティをマークします。

00:13:02.000 -> 00:13:07.000
Scaleは、データ値を取り、プロパティ値を返す関数と考えることができます。

00:13:07.000 -> 00:13:14.000
たとえば、これは売上を受け取り、バーのY位置を返すyScale関数です。

00:13:14.000 -> 00:13:24.000
「スケール」という名前は、位置プロパティの場合、入力値を何らかの要因でスケーリングして合理的な画面座標に変換することが多いという事実に由来しています。

00:13:24.000 -> 00:13:31.000
マークプロパティを使用してデータをプロットすると、スケールが作成され、データを対応するマークプロパティに変換します。

00:13:31.000 -> 00:13:41.000
たとえば、このチャートには3つのスケールがあり、それぞれ平日をXに、売上をYに、都市をフォアグラウンドスタイルに変換します。

00:13:41.000 -> 00:13:48.000
デフォルトでは、Swift Chartsはデータから自動的にスケールを推測するので、箱から出して素晴らしいチャートを得ることができます。

00:13:48.000 -> 00:13:52.000
スケール修飾子を使用して、チャート内のスケールを設定できます。

00:13:52.000 -> 00:13:54.000
いくつかの例を見てみましょう。 いくつか見てみましょう。

00:13:54.000 -> 00:14:00.000
この例では、Yスケールは自動的に0から150と推測されます。

00:14:00.000 -> 00:14:08.000
ただし、現在の売上高がどのようなものであっても、常に一貫したYスケールを持つように、Yスケールを修正したいと考えています。

00:14:08.000 -> 00:14:13.000
Yスケールが常にゼロで始まり、200で終わるように変更しましょう。

00:14:13.000 -> 00:14:21.000
これを行うには、.chartYScale修飾子を使用し、スケールのドメインを0から200に設定できます。

00:14:21.000 -> 00:14:26.000
ご覧のとおり、軸はゼロから200になります。

00:14:26.000 -> 00:14:33.000
同様に、.chartForegroundStyleScale修飾子を使用して、2つの都市がフォアグラウンドスタイルにマッピングする方法を変更できます。

00:14:33.000 -> 00:14:36.000
今、私たちは2つの都市のための新しい色を持っています。

00:14:36.000 -> 00:14:40.000
これで、マークを構成し、マークプロパティでデータをプロットする方法がわかりました。

00:14:40.000 -> 00:14:44.000
スウィフトチャートが提供するより多くのカスタマイズオプションに飛び込みましょう。

00:14:44.000 -> 00:14:50.000
チャートは、軸、おそらく凡例、およびプロット領域で構成されています。

00:14:50.000 -> 00:14:53.000
斧と伝説は、チャートを解釈するのに役立ちます。

00:14:53.000 -> 00:14:56.000
プロット領域は、2つの軸の間の領域です。

00:14:56.000 -> 00:14:59.000
これは、マークでデータをプロットする場所です。

00:14:59.000 -> 00:15:02.000
これらの要素はすべて、Swiftチャートでカスタマイズ可能です。

00:15:02.000 -> 00:15:07.000
まず、軸と凡例をカスタマイズする方法に関するいくつかの例を見てみましょう。

00:15:07.000 -> 00:15:10.000
これは、毎月の総売上高を示すチャートです。

00:15:10.000 -> 00:15:16.000
カスタマイズなしで、Swift Chartsはうまく丸みを帯びた値を特徴とするデフォルトの軸を生成します。

00:15:16.000 -> 00:15:20.000
現在、X軸には四半期ごとのラベルが表示されています。

00:15:20.000 -> 00:15:24.000
毎月ラベルを表示するように変更し、単一文字の月ラベルを使用しましょう。

00:15:24.000 -> 00:15:32.000
まず、AxisMarksをコンテンツとして、X軸をカスタマイズするための.chartXAxis修飾子を追加することから始めます。

00:15:32.000 -> 00:15:37.000
パラメータのないAxisMarksは、デフォルトの軸を再作成します。

00:15:37.000 -> 00:15:40.000
軸の値を変更することから始めましょう。

00:15:40.000 -> 00:15:48.000
定期的なカレンダー間隔を持ちたいので、標準ライブラリのストライド関数と同様に、ストライド(by:)を使用できます。

00:15:48.000 -> 00:15:50.000
今、私たちは毎月のラベルを持っています。

00:15:50.000 -> 00:15:54.000
ただし、スクリーンショットに見られるように、デフォルトのラベルは混雑しすぎているように感じます。

00:15:54.000 -> 00:15:58.000
一部のラベルは、十分なスペースがないため、切り捨てられます。

00:15:58.000 -> 00:16:02.000
ラベルを1文字の形式に変更しましょう。

00:16:02.000 -> 00:16:10.000
これを行うには、AxisGridLine、AxisTick、AxisValueLabelなど、個々のコンポーネントから軸マークを構築しましょう。

00:16:10.000 -> 00:16:14.000
狭い月名を使用するようにラベルの形式を設定しましょう。

00:16:14.000 -> 00:16:17.000
今、私たちは毎月1通の手紙を持っています。

00:16:17.000 -> 00:16:23.000
結果ビルダーに渡された値パラメータは、現在の軸値に関する情報を提供します。

00:16:23.000 -> 00:16:28.000
これを使用して、軸マークの存在とスタイルを条件付きで決定できます。

00:16:28.000 -> 00:16:35.000
たとえば、ここでは、日付としての値が月の第1四半期であるかどうかをテストする条件があります。

00:16:35.000 -> 00:16:40.000
もしそうなら、各四半期の最初の月を異なる前景スタイルで強調することができます。

00:16:40.000 -> 00:16:44.000
そうでない場合は、ティックとラベルなしでグリッドラインのみを表示します。

00:16:44.000 -> 00:16:49.000
現在、クォーターを表示しているので、フォーマットをクォータースタイルに変更できます。

00:16:49.000 -> 00:16:59.000
先ほど行ったカスタマイズでは、四半期データを表示するよりユニークなX軸を取得し、サブグリッドラインは毎月表示されます。

00:16:59.000 -> 00:17:05.000
値に加えて、軸マークには、一般的な外観とスタイルを設定できる他のプロパティがあります。

00:17:05.000 -> 00:17:17.000
デフォルトの後縁ではなく、Y軸をチャートの前縁に表示させたいとします。位置パラメータを先頭に設定して、それらを前縁に移動することができます。

00:17:17.000 -> 00:17:24.000
スウィフトチャートは、軸と視覚化されるデータの種類に基づいて、軸マークのデフォルトのプリセットを提供します。

00:17:24.000 -> 00:17:27.000
プリセットパラメータを使用してデフォルトをオーバーライドできます。

00:17:27.000 -> 00:17:35.000
たとえば、ここではY軸の.extendedプリセットを使用して、ユーザーインターフェイスの残りの部分との視覚的なアライメントを支援しています。

00:17:35.000 -> 00:17:39.000
一部のチャートでは、軸を表示したくない場合があります。

00:17:39.000 -> 00:17:47.000
たとえば、ここでのトップセールスチャートの目的は、人々に簡単な概要を提供することなので、軸は本当に必要ではありません。

00:17:47.000 -> 00:17:51.000
.Hiddenをチャート軸修飾子に渡して、軸を非表示にすることができます。

00:17:51.000 -> 00:17:54.000
凡例の構成は軸に似ています。

00:17:54.000 -> 00:18:04.000
たとえば、最高の日と場所を強調するこのチャートでは、すでに不透明度を使用して最高の都市を強調しているため、自動的に生成された凡例を非表示にすることができます。

00:18:04.000 -> 00:18:09.000
これを行うには、パラメータとして.hiddenを持つ.chartLegend修飾子を追加できます。

00:18:09.000 -> 00:18:12.000
では、プロットエリアについて話しましょう。

00:18:12.000 -> 00:18:17.000
.chartPlotStyle修飾子を使用して、チャートのプロット領域を設定できます。

00:18:17.000 -> 00:18:24.000
末尾のクロージャでは、元のプロット領域を取り、変更されたプロット領域を返す関数を記述します。

00:18:24.000 -> 00:18:27.000
いくつかの例を見てみましょう。 ではいくつかの例を見てみましょう。

00:18:27.000 -> 00:18:32.000
場合によっては、プロットエリアに正確なサイズまたはアスペクト比を持ちたいと思うかもしれません。

00:18:32.000 -> 00:18:38.000
たとえば、この場合、プロット領域の高さは、チャート内のカテゴリの数によって駆動されることを望んでいます。

00:18:38.000 -> 00:18:45.000
これを達成するために、プロット領域に.frame修飾子を適用し、変更されたプロット領域を返すことができます。

00:18:45.000 -> 00:18:48.000
これにより、プロットエリアの高さが設定されます。

00:18:48.000 -> 00:18:52.000
修飾子を使用して、特別な視覚効果を実現することもできます。

00:18:52.000 -> 00:19:02.000
たとえば、このダークモードチャートでは、.background修飾子を使用して、不透明度が.2のピンクの背景を追加し、チャートを少し際立たせます。

00:19:02.000 -> 00:19:05.000
そして、同じピンク色の1ポイントの境界線を追加します。

00:19:05.000 -> 00:19:09.000
これにより、チャートにユニークな視覚効果が作成されます。

00:19:09.000 -> 00:19:17.000
セッションの前半では、XやYなどのプロパティをマークするためにデータ値をマッピングする関数であるスケールについて言及しました。

00:19:17.000 -> 00:19:23.000
Swift Chartsは、チャート内のXスケールとYスケールにアクセスできるChartProxyを提供します。

00:19:23.000 -> 00:19:34.000
ChartProxy の position(for:) メソッドを使用して、特定のデータ値の位置を取得するか、value(at:) メソッドを使用して、特定の位置でデータ値を取得できます。

00:19:34.000 -> 00:19:38.000
これにより、他のビューをチャートと調整できます。

00:19:38.000 -> 00:19:41.000
例を見てみましょう。 例を見てみましょう。

00:19:41.000 -> 00:19:43.000
私たちはこのインタラクティブなブラッシングビューを構築します。

00:19:43.000 -> 00:19:52.000
ここでは、ドラッグジェスチャーでチャートから間隔を選択すると、その間隔を使用して詳細ビューの行をフィルタリングします。

00:19:52.000 -> 00:19:56.000
.chartOverlayまたは.chartBackground修飾子からチャートプロキシオブジェクトを取得できます。

00:19:56.000 -> 00:20:04.000
これら2つの修飾子は、SwiftUIのオーバーレイと背景修飾子に似ていますが、チャートプロキシを提供します。

00:20:04.000 -> 00:20:09.000
この例を構築するには、以前と同じようにベースチャートを定義することから始めます。

00:20:09.000 -> 00:20:13.000
次に、チャートプロキシを提供する.chartOverlay修飾子を追加します。

00:20:13.000 -> 00:20:19.000
内部には、オーバーレイビューのジオメトリにアクセスできるジオメトリリーダーがあります。

00:20:19.000 -> 00:20:25.000
次に、SwiftUIのDragGestureに応答するように設定された長方形ビューがあります。

00:20:25.000 -> 00:20:32.000
ドラッグジェスチャーが発生すると、まず開始のx座標とチャートのプロット領域内の現在の位置を見つけます。

00:20:32.000 -> 00:20:39.000
これは、ジェスチャーによって提供された場所からプロット領域の原点を差し引くことによって行われます。

00:20:39.000 -> 00:20:51.000
これらの座標を取得したら、チャートプロキシを使用して対応する日付値を見つけ、最終的に現在の日付間隔を追跡するSwiftUI状態に設定できます。

00:20:51.000 -> 00:20:58.000
範囲状態では、チャートで長方形のマークを定義して、現在選択されている日付範囲を視覚化できます。

00:20:58.000 -> 00:21:05.000
この状態は、チャートの下の詳細ビューの内容をフィルタリングするなど、アプリケーションの他の部分を制御するためにも使用できます。

00:21:05.000 -> 00:21:09.000
これは、チャートプロキシがどのように機能するかを説明する簡単な例です。

00:21:09.000 -> 00:21:19.000
ロリポップのように見えるオーバーレイで選択した日と販売価値を示すこのインタラクティブなチャートなど、多くの興味深い機能を構築するために使用できます。

00:21:19.000 -> 00:21:27.000
このセッションでは、マークを作成してチャートを作成する方法、マークプロパティでデータをプロットする方法、チャートをカスタマイズする方法について議論しました。

00:21:27.000 -> 00:21:35.000
デザインセッションに行って、チャートで素晴らしいアプリ体験をデザインする方法と、効果的なチャートをデザインする方法について詳しく知ることができます。

00:21:35.000 -> 00:21:38.000
Swift Chartsでデータビジュアライゼーションを構築するのを気に入ると思います。

00:21:38.000 -> 00:21:39.000
見てくれてありがとう。

00:21:39.000 -> 23:59:59.000
♪

