WEBVTT

00:00:01.000 -> 00:00:14.000
コンラッド：私はコンラッド・カーレンです。今日はPDFKitの新機能について話します。

00:00:14.000 -> 00:00:15.000
これが私たちの議題です。

00:00:15.000 -> 00:00:30.000
まず、PDFKitを簡単に確認し、次に、ライブテキストやフォーム、画像からPDFページを作成する新しい方法、そして最後にオーバーレイビューなど、新機能を見てみましょう。

00:00:30.000 -> 00:00:34.000
PDFKitの仕組みを簡単に復習することから始めましょう。

00:00:34.000 -> 00:00:41.000
PDFKitは、アプリがPDFファイルを表示、編集、書き込むのに役立つフル機能のフレームワークです。

00:00:41.000 -> 00:00:54.000
iOS、macOS、Mac Catalystで利用でき、UIビューをアプリに統合できるラッパーであるUIViewRepresentableを使用してSwiftUIでも使用できます。

00:00:54.000 -> 00:01:00.000
PDFKitは、アプリに必要な機能のほとんどをカバーする4つのコアクラスで構成されています。

00:01:00.000 -> 00:01:05.000
PDFViewは、SwiftUIまたはInterface Builderを使用してレイアウトに含めるウィジェットです。

00:01:05.000 -> 00:01:13.000
PDFドキュメントの内容を表示し、ユーザーがナビゲートしたり、ズームレベルを設定したり、テキストをペーストボードにコピーしたりできます。

00:01:13.000 -> 00:01:16.000
PDFDocumentはPDFファイルを表します。

00:01:16.000 -> 00:01:20.000
PDFDocumentのサブクラスは一般的ではありませんが、常に使用します。

00:01:20.000 -> 00:01:24.000
それはPDFオブジェクトグラフのルート、または木の幹です。

00:01:24.000 -> 00:01:28.000
これらなしでは木はできません。

00:01:28.000 -> 00:01:32.000
各ドキュメントには、1つ以上のPDFPageオブジェクトが含まれています。

00:01:32.000 -> 00:01:38.000
ページはコンテンツをレンダリングし、そのページに固有のフォントや画像などのリソースを保存します。

00:01:38.000 -> 00:01:42.000
オブジェクトグラフの葉にはPDFAnnotationsがあります。

00:01:42.000 -> 00:01:43.000
これらはオプションです。

00:01:43.000 -> 00:01:50.000
PDFPageのコンテンツは編集を意図していませんが、注釈は本質的にインタラクティブであり、しばしば編集可能です。

00:01:50.000 -> 00:01:53.000
これらのオブジェクトのそれぞれは、私が今日カバーするもので役割を果たします。

00:01:53.000 -> 00:02:01.000
PDFKitの基礎の詳細については、以下のリンクにある素晴らしいプレゼンテーション「Introducing PDFKit」をチェックしてください。

00:02:01.000 -> 00:02:08.000
では、iOS 16とmacOS Venturaで導入された新機能について話しましょう。

00:02:08.000 -> 00:02:11.000
PDFKitはライブテキストをサポートするようになりました。

00:02:11.000 -> 00:02:16.000
写真とは異なり、テキストは多くの場合、タップしてコピーできる少量です。

00:02:16.000 -> 00:02:25.000
写真とは異なり、PDFでは、テキストを見ると、それは一般的にテキストであり、人々は特別なことを何もせずにそのように振る舞うことを期待しています。

00:02:25.000 -> 00:02:30.000
これで、ライブテキストを使用すると、このようなPDFドキュメントのテキストを選択して検索できます。

00:02:30.000 -> 00:02:34.000
スキャンされたビットマップで、テキストはまったくありません。

00:02:34.000 -> 00:02:36.000
もちろん、PDFは多くのページを持つことができます。

00:02:36.000 -> 00:02:47.000
PDFドキュメントを開くときに、PDFドキュメントのすべてのページでOCRをグラインドしたくないので、PDFKitは、各ページを操作するときにオンデマンドで行います。

00:02:47.000 -> 00:02:52.000
OCRは実施されているので、文書のコピーを作成する必要はありません。

00:02:52.000 -> 00:02:58.000
また、文書全体のテキストを保存することを選択した場合、保存時に保存するオプションがあります。

00:02:58.000 -> 00:03:02.000
ライブテキストに加えて、PDFKitはフォーム処理を改善しました。

00:03:02.000 -> 00:03:08.000
フォームフィールドを含むドキュメントは、組み込みのテキストフィールドが含まれていなくても自動的に認識されます。

00:03:08.000 -> 00:03:14.000
期待どおりに、これらのテキストフィールドをタップしてテキストを入力できます。

00:03:14.000 -> 00:03:20.000
次に、画像からPDFページを作成するための新しいAPIについて話しましょう。

00:03:20.000 -> 00:03:28.000
iOS 16とmacOS Venturaには、アプリが画像を入力としてPDFページを作成できる新しい柔軟なAPIがあります。

00:03:28.000 -> 00:03:32.000
アプリはCGImageRefを使用して画像を提供します。

00:03:32.000 -> 00:03:38.000
PDFKitは、あなたが提供したCGImageRefを受け取り、高品質のJPEGエンコーディングを使用して圧縮します。

00:03:38.000 -> 00:03:44.000
CGImageRefはCoreGraphicsのネイティブデータ型であるため、追加の変換は必要ありません。

00:03:44.000 -> 00:03:49.000
最も一般的なケースを処理するのに役立ついくつかのオプションがあります。

00:03:49.000 -> 00:03:52.000
MediaBoxはページのサイズを指定します。

00:03:52.000 -> 00:03:58.000
画像に正確にフィットするか、レターのような用紙サイズを選択できます。

00:03:58.000 -> 00:04:03.000
回転では、縦向きまたは横向きを指定できます。

00:04:03.000 -> 00:04:04.000
アップスケールIfSmaller。

00:04:04.000 -> 00:04:09.000
デフォルトでは、画像がMediaBoxよりも大きい場合、画像は収まるように縮小されます。

00:04:09.000 -> 00:04:18.000
UpscaleIfSmallerが指定されている場合、それは引き続き適用されますが、画像が小さい場合は、ページを埋めるためにアップスケールされます。

00:04:18.000 -> 00:04:28.000
そして今、多くの人が「PencilKitを使用してPDFページに描画するにはどうすればよいですか?」と尋ねた質問に答えるために、答えはオーバーレイビューを使用することです。

00:04:28.000 -> 00:04:37.000
以前は、PDFで追加の描画を行う唯一の方法は、PDFPageをサブクラス化し、描画方法をオーバーライドするか、カスタムPDFアノテーションを使用することでした。

00:04:37.000 -> 00:04:44.000
しかし、iOS 16とmacOS Venturaから、各PDFページの上に独自のビューをオーバーレイできるようになりました。

00:04:44.000 -> 00:04:50.000
これにより、アプリはPDFページの上部に表示されるライブで完全にインタラクティブなビューを作成できます。

00:04:50.000 -> 00:04:54.000
ビューのオーバーレイについて知っておくべき3つのことは次のとおりです。

00:04:54.000 -> 00:05:00.000
まず、新しいプロトコルを使用して、オーバーレイビューをPDFページにインストールします。

00:05:00.000 -> 00:05:06.000
保存するときは、コンテンツをPDFに組み込む必要があります。

00:05:06.000 -> 00:05:13.000
そして、保存といえば、PDFドキュメントを保存する際のベストプラクティスをいくつか取り上げます。

00:05:13.000 -> 00:05:17.000
PDFページにオーバーレイビューをインストールするのは簡単です。

00:05:17.000 -> 00:05:25.000
PDFには数千ページではないにしても数百ページを含めることができるため、PDFを開くときにそれらのすべてのページのビューを作成する方法はありません。

00:05:25.000 -> 00:05:28.000
そして、ユーザーが急速に前後にスクロールするとどうなりますか?

00:05:28.000 -> 00:05:31.000
いつビューを作成するか、どうすればわかりますか?

00:05:31.000 -> 00:05:38.000
幸いなことに、PDFKitはすでに、ユーザーがページをスクロールして表示する前にコンテンツをインテリジェントに準備するように設計されています。

00:05:38.000 -> 00:05:41.000
そのため、オーバーレイビューを依頼するタイミングを最もよく知っています。

00:05:41.000 -> 00:05:47.000
アプリは、新しいプロトコルを介して行われた要求に応答するだけです。

00:05:47.000 -> 00:05:51.000
PDFPageOverlayViewProviderは新しいプロトコルです。

00:05:51.000 -> 00:05:59.000
ちなみに、PDFKitPlatformViewは、プラットフォームに応じて、UIViewまたはNSViewの定義にすぎません。

00:05:59.000 -> 00:06:04.000
実装する必要がある最も重要な方法は、overlayViewForPageです。

00:06:04.000 -> 00:06:10.000
ビューのインスタンスを提供するだけで、PDFKitは適切な制約を適用してサイズをサイズ化します。

00:06:10.000 -> 00:06:14.000
また、ページの回転がゼロではない場合も回転します。

00:06:14.000 -> 00:06:16.000
次の2つのメソッドはオプションです。

00:06:16.000 -> 00:06:25.000
willDisplayOverlayViewは、独自のジェスチャーハンドラをインストールしたり、PDFKitのジェスチャハンドラとの失敗関係を設定したりするために使用できます。

00:06:25.000 -> 00:06:32.000
willEndDisplayingOverlayViewは、PDFKitがビューで終了したときに呼び出されます。おそらく、ページがスクロールアウトしたためです。

00:06:32.000 -> 00:06:37.000
ここでビューを解放できますが、この方法には別の重要な用途があります。

00:06:37.000 -> 00:06:44.000
ビューに描画しているものを表すデータがあると仮定すると、この方法を使用してそのデータを取得し、それを脇に置くことができます。

00:06:44.000 -> 00:06:53.000
PencilKitの例で行いますが、ビューデータが他の場所にある場合は、これを実装する必要はありません。

00:06:53.000 -> 00:06:57.000
この例では、これはプロバイダーとして使用しているクラスです。

00:06:57.000 -> 00:07:01.000
PDFPageOverlayViewProviderプロトコルを実装しています。

00:07:01.000 -> 00:07:05.000
これはiOSなので、PDFKitPlatformViewはUIViewです。

00:07:05.000 -> 00:07:09.000
地図を使用してPDFPageからUIViewに移動します。

00:07:09.000 -> 00:07:12.000
プレースホルダプロトコルメソッドは次のとおりです。

00:07:12.000 -> 00:07:15.000
次に、実装を見てみましょう。

00:07:15.000 -> 00:07:20.000
overlayViewForPageは、pageToViewマップをチェックして、指定されたページのビューがすでに作成されているかどうかを確認します。

00:07:20.000 -> 00:07:23.000
そうでない場合は、新しいビューが作成されます。

00:07:23.000 -> 00:07:28.000
いずれの場合も、ページから図面を取得し、それをキャンバスビューに設定します。

00:07:28.000 -> 00:07:32.000
これらの例では、PDFPageのサブクラスを使用しています。

00:07:32.000 -> 00:07:37.000
それは「描画」プロパティを追加するだけです。

00:07:37.000 -> 00:07:44.000
では、次の方法、WillEndDisplayingOverlayに焦点を当てましょう。

00:07:44.000 -> 00:07:46.000
willEndDisplayingOverlayViewはシンプルです。

00:07:46.000 -> 00:07:51.000
ビューから図面を取得し、カスタムページクラスに保存します。

00:07:51.000 -> 00:07:56.000
それをやったので、実際に見てみましょう。 

00:07:56.000 -> 00:08:07.000
通常、今年のこの時期に、私はメイン州で釣りをしていますが、代わりにWWDCにいるので、別の人が旅行で私の場所を取っています、そして私は彼に私のお気に入りのスポットのいくつかを見せるつもりです。

00:08:07.000 -> 00:08:12.000
オーバーレイビューでPencilKitを使用するこのアプリでそれを行います。

00:08:12.000 -> 00:08:16.000
このアプリは、私たちが今見たコードと、他のほとんどで構成されていません。

00:08:16.000 -> 00:08:21.000
画面上のオーバーレイビューを取得するためのコード全体は約30行です!

00:08:21.000 -> 00:08:25.000
だから、グランドレイクストリーム。これはダムプールです。

00:08:25.000 -> 00:08:28.000
そこにはいつもたくさんの魚がいます。それはほとんどの行動がある場所です。

00:08:28.000 -> 00:08:33.000
このトレイルを森の中を下り、釣りをすることで、ダムプールに行くことができます。

00:08:33.000 -> 00:08:41.000
あなたはそれらのすべてのものを釣ることができます、またはあなたはこの道を進み、ダムを越えて、この辺りを降りることができます。

00:08:41.000 -> 00:08:49.000
そこから、ここに釣りをしたり、島を回ったり、ここに降りたりすることができますが、何をするにしても、ここを通り過ぎないでください。

00:08:49.000 -> 00:08:52.000
水は深くて速くなります。

00:08:52.000 -> 00:08:58.000
それを避けて、ここに降りて、孵化場に来てください。

00:08:58.000 -> 00:09:04.000
孵化場の横を歩いて、このプールに入ってください。

00:09:04.000 -> 00:09:10.000
あなたはここをあちこちにキャストすることができます。これは素晴らしいスポットです。私はいつもここで魚を捕まえます。

00:09:10.000 -> 00:09:17.000
さて、ページにいくつかのマークがあるので、ズームとスクロールを練習しましょう。

00:09:17.000 -> 00:09:25.000
それがどれほど反応するかわかりますか?

00:09:25.000 -> 00:09:26.000
そして、私たちはそれを持っています。

00:09:26.000 -> 00:09:28.000
PDFKitのオーバーレイビュー。

00:09:28.000 -> 00:09:31.000
だから、これらのスケッチを持っているので、どのように保存しますか?

00:09:31.000 -> 00:09:34.000
これを行うには、PDFAnnotationクラスを使用します。

00:09:34.000 -> 00:09:43.000
保存時に達成したいことが2つあります。画面上の外観を忠実度の高いものにし、往復編集を行いたいと考えています。

00:09:43.000 -> 00:09:47.000
PDF注釈には、これを容易にするいくつかの機能があります。

00:09:47.000 -> 00:09:52.000
PDFアノテーションは、PDF描画コマンドのストリームである「外観ストリーム」を持つことができます。

00:09:52.000 -> 00:09:57.000
Quartz2Dを使用して描画できるほぼすべてのものは、外観ストリームに記録できます。

00:09:57.000 -> 00:10:02.000
他のものは画像にレンダリングでき、それを記録することができます。

00:10:02.000 -> 00:10:04.000
メタルを使用している場合、それが私たちのやり方です。

00:10:04.000 -> 00:10:11.000
また、PDF図面として記録されているため、Adobe Reader、Chromeなどで同じように見えます。

00:10:11.000 -> 00:10:14.000
PDF注釈は、PDFドキュメントに辞書として保存されます。

00:10:14.000 -> 00:10:19.000
つまり、カスタムデータを秘密鍵と値のペアで保存することもできます。

00:10:19.000 -> 00:10:22.000
では、コードがどのように見えるか見てみましょう。

00:10:22.000 -> 00:10:26.000
PDFAnnotationのサブクラスを作成することから始めます。

00:10:26.000 -> 00:10:29.000
これは、draw()メソッドをオーバーライドするために行います。

00:10:29.000 -> 00:10:36.000
PDFKitは、最後のスライドで言及した外観ストリームを保存すると、このメソッドを呼び出します。

00:10:36.000 -> 00:10:39.000
ドキュメントを保存するには、UIDocumentのコンテンツ()を上書きします。

00:10:39.000 -> 00:10:43.000
これは、後でコンテキストのために、関数の概要です。

00:10:43.000 -> 00:10:47.000
PDFDocumentのすべてのページをループします。

00:10:47.000 -> 00:10:51.000
次にループを具体化します。

00:10:51.000 -> 00:11:02.000
各ページで次のことを行います。カスタムクラスの注釈を作成します。図面をデータにエンコードします。データを注釈に追加します。

00:11:02.000 -> 00:11:11.000
次回、このドキュメントを開くと、value:forAnnotationKeyを使用して、保存された図面データを読み戻し、オーバーレイビューに入れることができます。

00:11:11.000 -> 00:11:15.000
最後に、ページに注釈を追加します。

00:11:15.000 -> 00:11:16.000
コンテンツ() オーバーライドに戻ります。

00:11:16.000 -> 00:11:26.000
ページに注釈を追加したので、PDFDocumentのdataRepresentation()を使用して結果を返します。

00:11:26.000 -> 00:11:31.000
コンテンツが注釈として保存されると、ドキュメントの受信者はドキュメントを移動したり、サイズを変更したり、削除したりできます。

00:11:31.000 -> 00:11:33.000
多くの場合、それはあなたが望むものです。

00:11:33.000 -> 00:11:38.000
しかし、時には、注釈をページの一部として「燃やしたい」ことがあります。

00:11:38.000 -> 00:11:44.000
iOS 16とmacOS Venturaには、これを簡単にする新しいPDFDocumentWriteOptionがあります。

00:11:44.000 -> 00:11:50.000
burnInAnnotationsOption = trueをセーブオプションに追加するだけで、それで行います。

00:11:50.000 -> 00:11:56.000
PDF書き込みオプションといえば、iOS 16とmacOS Venturaで利用可能になったものがいくつかあります。

00:11:56.000 -> 00:11:58.000
それらを見てみましょう。

00:11:58.000 -> 00:12:07.000
CoreGraphicsは常に最大限の忠実度でPDFに画像を保存するよう努めてきたため、画像はロスレス圧縮でフル解像度で保存されます。

00:12:07.000 -> 00:12:10.000
PDFが大判プリンターで印刷されるなら、それは素晴らしいことです。

00:12:10.000 -> 00:12:18.000
しかし、画面に表示され、その高忠実度の画像データはすべて非常に大きなファイルになる可能性が高いです。

00:12:18.000 -> 00:12:21.000
それに対処するために、次の2つのオプションを紹介します。

00:12:21.000 -> 00:12:25.000
saveAllImagesAsJPEGは、それが言うことだけを行います。

00:12:25.000 -> 00:12:31.000
画像がどのように作成されたかに関係なく、PDFにJPEGエンコーディングで保存されます。

00:12:31.000 -> 00:12:37.000
optimizeImagesForScreenは、画像を最大HiDPI画面解像度にダウンサンプリングします。

00:12:37.000 -> 00:12:41.000
これら2つのオプションは一緒に使用できます。

00:12:41.000 -> 00:12:46.000
createLinearizedPDFは、インターネット用に最適化された特別な種類のPDFを作成します。

00:12:46.000 -> 00:12:53.000
インターネットが登場する直前に最初に設計されたPDF形式は、ファイルの最後から読み取られます。

00:12:53.000 -> 00:12:57.000
つまり、何かが表示される前に、まず全体をダウンロードする必要があります。

00:12:57.000 -> 00:13:08.000
線形化されたPDFには、ファイルの先頭に最初のページを表示するために必要なものがすべて揃っているため、残りの部分が読み込まれている間、Webブラウザはそれをすばやく表示できます。

00:13:08.000 -> 00:13:14.000
これらのオプションは、PDFDocumentのdataRepresentationまたはwriteToURLメソッドに渡すことができます。

00:13:14.000 -> 00:13:25.000
そして、私たちはそれを持っています。PDFKitは強力でありながら使いやすく、今日のiOSとmacOSの多くのアプリで使用されており、現在はiOS 16とmacOS Venturaの新機能を備えています。

00:13:25.000 -> 00:13:28.000
あなたが彼らと何をするかを見てワクワクしています。

00:13:28.000 -> 00:13:32.000
詳細については、以下のセッションで追加情報を確認してください。

00:13:32.000 -> 00:13:33.000
見てくれてありがとう!

00:13:33.000 -> 23:59:59.000
。

