WEBVTT

00:00:00.000 --> 00:00:03.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:12.000
こんにちは、私はニックです。

00:00:12.000 --> 00:00:15.000
そして、私はフランクで、私たちはSwiftUIエンジニアです。

00:00:15.000 --> 00:00:19.000
今日は「SwiftUIの新機能」を取り上げます。

00:00:19.000 --> 00:00:28.000
SwiftUIは当社のオペレーティングシステムとともに成長しており、それぞれが互いの限界を押し広げています。

00:00:28.000 --> 00:00:34.000
私たちは、あなたがSwiftUIで作っているものに驚き、喜んでいます。

00:00:34.000 --> 00:00:38.000
私たちは、コミュニティからのフィードバックのすべての味を心に留めています。

00:00:38.000 --> 00:00:44.000
だからこそ、私たちは今年焦点を当てたことを共有することに特に興奮しています。

00:00:44.000 --> 00:00:47.000
今年のAPIで、私たちはより深く掘り下げました。

00:00:47.000 --> 00:00:50.000
私たちはより多くのカスタム体験を可能にしました。

00:00:50.000 --> 00:00:54.000
私たちはいくつかの驚くべき新しいグラフィカルテクニックを導入しました。

00:00:54.000 --> 00:01:01.000
私たちは新しいSwiftUIアプリ構造などを設計しました。

00:01:01.000 --> 00:01:07.000
SwiftUIは、プラットフォームの未来を反映したデザインと機能を構築することを可能にしました。

00:01:07.000 --> 00:01:14.000
古典的なアプリの再設計から、まったく新しい機能、深いシステム統合まで。

00:01:14.000 --> 00:01:20.000
Apple内でのこの包括的な採用は、SwiftUIの進化をさらに推し進めます。

00:01:20.000 --> 00:01:29.000
これらの新しいデザインや機能の多くは、SwiftUIがAppleでアプリを書く方法をどのように進化させたかによってのみ可能です。

00:01:29.000 --> 00:01:44.000
今日、私たちはこれらのAPIを祝い、SwiftUIの誕生日も祝います。フランクと私はパーティー計画委員会の幸運な共同議長です。

00:01:44.000 --> 00:01:49.000
パーティーのために計画した活動についてお話ししましょう。

00:01:49.000 --> 00:02:00.000
すべてのプラットフォームで楽しいデータビジュアライゼーションを作成できるSwift Chartsというまったく新しいフレームワークを紹介します。

00:02:00.000 --> 00:02:09.000
ナビゲーションと新しいウィンドウテクニックのためのSwiftUIのデータ駆動型、強く型付けされたモデルを披露します。

00:02:09.000 --> 00:02:16.000
フランクは、一連の新しいコントロールと既存のコントロールのより深いカスタマイズを案内します。

00:02:16.000 --> 00:02:24.000
その後、彼は私たちがTransferableプロトコルでSwiftUIの宇宙にエレガントに共有をもたらした方法を紹介します。

00:02:24.000 --> 00:02:31.000
最後に、気まぐれな新しいグラフィックAPIと高度な新しいレイアウトAPIで締めくくります。

00:02:31.000 --> 00:02:35.000
スウィフトチャートで行きましょう。

00:02:35.000 --> 00:02:42.000
スウィフトチャートは、美しい州主導のチャートを構築するための宣言的なフレームワークです。

00:02:42.000 --> 00:02:57.000
SwiftUIを素晴らしいものにする基本的な設計原則とデータをプロットするプロセスは、世界クラスのデータ視覚化フレームワークであるSwift Chartsを作成するために調和して構成されています。

00:02:57.000 --> 00:03:04.000
これは、フランクのパーティータスクの数をプロットした棒グラフで、パーティーを開始する前に完了する必要があります。

00:03:04.000 --> 00:03:11.000
Swift Chartsは、わずか数行のコードから壮大でカスタマイズ可能なチャートを構築しました。

00:03:11.000 --> 00:03:15.000
SwiftUIと同様に、Swift Chartsはインテリジェントなデフォルトを選択します。

00:03:15.000 --> 00:03:26.000
ここで、フレームワークはy軸の値に満足のいく丸い数字を選択し、バーマークのデフォルトの色を提供しました。

00:03:26.000 --> 00:03:33.000
SwiftUIを知っていれば、Swift Chartsの宣言的で状態主導の構文をすでに読むことができます。

00:03:33.000 --> 00:03:47.000
チャートは単なるビューであり、リストやテーブルと同じように宣言します。データを提供し、そのデータを使用してチャートコンテンツを構築します。

00:03:47.000 --> 00:04:07.000
このチャートでは、BarMarkを選択しましたが、LineMarkに切り替えてカテゴリごとにグループ化するためにフォアグラウンドスタイルを追加すると、Swift Chartsが各カテゴリの個々の線を描画し、チャートに自動的に凡例を追加するため、ストーリーをより多く見ることができます。

00:04:07.000 --> 00:04:10.000
これらのチャートに少し個性を与えるのは楽しいです。

00:04:10.000 --> 00:04:16.000
LineMarkのシンボル修飾子を使用して、ラインにポイントを追加できます。

00:04:16.000 --> 00:04:21.000
これらの修飾子は、SwiftUI修飾子と変わりません。

00:04:21.000 --> 00:04:25.000
チャート内でSwiftUIビューを使用することもできます。

00:04:25.000 --> 00:04:32.000
Listと同様に、Chartへのデータ引数は代わりにForEachに渡すことができます。

00:04:32.000 --> 00:04:41.000
これにより、RuleMarkのようにチャートビルダーにマークを追加して、毎日の目標を表示できます。

00:04:41.000 --> 00:04:56.000
SwiftUIの精神は、Swift Chartsがローカリゼーション、ダークモード、ダイナミックタイプを自動的に処理し、もちろんすべてのプラットフォームで機能するため、再び輝きます。

00:04:56.000 --> 00:05:01.000
独自のチャートを作成する方法を見たい場合は、「Hello Swift Charts」をチェックしてください。

00:05:01.000 --> 00:05:07.000
高度なプロット技術に興味がある場合は、「バーを上げる」セッションでフォローアップしてください。

00:05:07.000 --> 00:05:11.000
次に、ナビゲーションとウィンドウについて話しましょう。

00:05:11.000 --> 00:05:31.000
SwiftUIは、没入型のプッシュアンドポップナビゲーションスタック、広大で詳細豊富なスプリットビュー、強力なマルチウィンドウエクスペリエンスなど、最も一般的なアプリナビゲーションパターンをすでにサポートしています。

00:05:31.000 --> 00:05:37.000
今年、SwiftUIはこれら3つのパターンすべてに大きなアップデートがあります。

00:05:37.000 --> 00:05:40.000
スタックから始めましょう。

00:05:40.000 --> 00:05:51.000
SwiftUIは、プッシュアンドポップスタイルのナビゲーションをサポートするために、単にNavigationStackと呼ばれる新しいコンテナビューを導入しています。

00:05:51.000 --> 00:05:58.000
NavigationStackは、パーティー計画アプリのこの食品在庫リストのように、ルートコンテンツビューをラップします。

00:05:58.000 --> 00:06:06.000
予想通り、NavigationLinkやnavigationTitle()などの既存のAPIでうまく機能します。

00:06:06.000 --> 00:06:14.000
リンクを選択すると、SwiftUIは詳細ビューをスタックの上にプッシュします。

00:06:14.000 --> 00:06:25.000
私たちのアプリでは、各詳細ビューには、すばやく閲覧するための関連食品のリンクが含まれています。

00:06:25.000 --> 00:06:28.000
このアプローチはあなたが必要とするすべてかもしれません。

00:06:28.000 --> 00:06:35.000
しかし、見解を提示し、その提示された状態をプログラムで制御する新しい方法があります。

00:06:35.000 --> 00:06:43.000
ナビゲーションスタックの状態を制御する必要がある場合は、新しいデータ駆動型APIを採用してください。

00:06:43.000 --> 00:06:54.000
新しい navigationDestination() 修飾子を使用すると、ナビゲーションの宛先を特定のデータ型に関連付けることができます。

00:06:54.000 --> 00:07:04.000
そして今年、私たちはNavigationLinkに新しいパーティートリックを教えました。宛先ビューの代わりに、宛先を表す値を取ることができます。

00:07:04.000 --> 00:07:18.000
リンクをタップすると、SwiftUIは値のタイプを使用して正しい目的地を見つけ、以前と同じようにスタックにプッシュします。

00:07:18.000 --> 00:07:27.000
データを使用してスタックを駆動するようになったため、現在のナビゲーションパスを明示的な状態として表現することが可能です。

00:07:27.000 --> 00:07:35.000
この場合、ナビゲーションパスは単に私たちが訪れたすべての食料品の配列です。

00:07:35.000 --> 00:07:45.000
この状態に直接アクセスすることで、最初に選択した項目にすばやく戻るためのボタンを追加するのは簡単ではありません。

00:07:45.000 --> 00:07:50.000
ビューがスタックにプッシュされると、アイテムはselectedFoodItems配列に追加されます。

00:07:50.000 --> 00:08:00.000
ボタンのアクションでは、最初のアイテムを除いて、パスからすべてのアイテムを削除できます。

00:08:00.000 --> 00:08:07.000
そして、タップで、私たちはすぐに私たちが始めた場所に戻ります。

00:08:07.000 --> 00:08:13.000
では、複数列ナビゲーションの分割ビューについて話しましょう。

00:08:13.000 --> 00:08:20.000
複数列ナビゲーション用のNavigationSplitViewという別の新しいコンテナを導入しています。

00:08:20.000 --> 00:08:25.000
NavigationSplitViewは、2列と3列のレイアウトを宣言できます。

00:08:25.000 --> 00:08:37.000
パーティープランナーは、シンプルな2列のレイアウトを使用し、パーティー計画タスクのサイドバーリストと、選択したタスクでコンテンツを変更する詳細ビューをラップします。

00:08:37.000 --> 00:08:49.000
スプリットビューは、先ほど見た新しい値ベースのナビゲーションリンクでうまく機能し、リンクの値を使用してリストの選択を促進します。

00:08:49.000 --> 00:09:02.000
NavigationSplitViewは、小型のクラスやデバイスで自動的にスタックに崩壊し、アダプティブなマルチプラットフォームアプリを構築するための優れたツールになります。

00:09:02.000 --> 00:09:15.000
NavigationSplitViewとNavigationStackは連携するように設計されており、より複雑なナビゲーション構造を構築するために直接構成することができます。

00:09:15.000 --> 00:09:35.000
パーティープランナーアプリでこれを使用して、詳細列を独自の自己完結型のナビゲーションスタックに変換し、macOSのナビゲーションスタックの新しいサポートも示しています。

00:09:35.000 --> 00:09:45.000
さて、私たちは食べ物についてたくさん話しましたが、同僚のカートが「ナビゲーションのためのSwiftUI料理本」という講演で嵐を料理していると聞きました。

00:09:45.000 --> 00:09:51.000
ナビゲーションスタックとナビゲーション分割ビューの詳細については、それをチェックしてください。

00:09:51.000 --> 00:09:58.000
しかし、今のところ、箱の外に出て、新しいシーンAPIについて話しましょう。

00:09:58.000 --> 00:10:10.000
すでにWindowGroupに精通している可能性があります。これは、アプリのメインインターフェイスを構築するのに最適な方法であり、複数のウィンドウを生成して、アプリのデータに異なる視点を許可することができます。

00:10:10.000 --> 00:10:19.000
今年新しく、私たちはウィンドウを追加します。これは、あなたのアプリに単一のユニークなウィンドウを宣言します。

00:10:19.000 --> 00:10:26.000
ここでは、パーティーの総費用を示すパーティー予算ウィンドウを追加しました。

00:10:26.000 --> 00:10:34.000
デフォルトでは、ウィンドウは利用可能であり、アプリのウィンドウメニューでその名前を選択することで表示できます。

00:10:34.000 --> 00:10:43.000
しかし、コマンド0のキーボードショートカットを割り当ててウィンドウを開くことで、それをさらに簡単にすることができます。

00:10:43.000 --> 00:10:50.000
予算重視のパーティープランナーであり続けるために、このウィンドウも表示するアクション付きのツールバーボタンを追加します。

00:10:50.000 --> 00:11:00.000
環境アクションopenWindowを使用して、SwiftUIが管理する新しいウィンドウをプログラムで開くことができるようになりました。

00:11:00.000 --> 00:11:13.000
実際、今年は、デフォルトのサイズ、位置、サイズ変更などの修飾子を含む、一連の新しいウィンドウのカスタマイズを追加しました。

00:11:13.000 --> 00:11:19.000
パーティーの予算が邪魔になってほしくないので、デフォルトでは小さなコーナーウィンドウとして表示されます。

00:11:19.000 --> 00:11:27.000
しかし、その位置やサイズを調整すると、SwiftUIはアプリの起動時に自動的にそれを記憶します。

00:11:27.000 --> 00:11:40.000
新しいスタンドアロンウィンドウシーンは、Mac上のこのような小さな補助ウィンドウに最適ですが、Party Plannerはマルチプラットフォームアプリであり、より小さな画面のためのより良いデザインが必要です。

00:11:40.000 --> 00:11:47.000
たとえば、iOSでは、代わりにサイズ変更可能なシート内に予算を表示することを選択しました。

00:11:47.000 --> 00:11:51.000
これは、新しいpresentationDetents()修飾子で可能です。

00:11:51.000 --> 00:12:03.000
この場合、250ポイントとシステム定義の中高の2つの異なるサイズに固執するサイズ変更可能なシートを設定しました。

00:12:03.000 --> 00:12:12.000
今年は、SwiftUIベースのアプリをパワーアップするXcodeのマルチプラットフォームターゲットを使用して、プラットフォーム間を反復するのは簡単です。

00:12:12.000 --> 00:12:17.000
1つのターゲットを複数のプラットフォームに展開できます。

00:12:17.000 --> 00:12:23.000
Xcodeのツールバーにある通常のプルダウンメニューからプラットフォームを選択するだけです。

00:12:23.000 --> 00:12:31.000
「Xcodeの新機能」を見て、「Xcodeを使用してマルチプラットフォームアプリを開発する」で詳細を確認してください。

00:12:31.000 --> 00:12:36.000
最後の新しいシーンタイプでは、メニューバーに注意を向けることができます。

00:12:36.000 --> 00:12:44.000
macOS Venturaでは、SwiftUIで完全にMenuBarExtrasを構築できるようになりました!

00:12:44.000 --> 00:12:53.000
これらは、アプリケーション内の他のシーンタイプと一緒に定義でき、アプリの実行中は常にメニューバーに表示されます。

00:12:53.000 --> 00:12:57.000
または、MenuBarExtraだけでアプリ全体を構築できます!

00:12:57.000 --> 00:13:04.000
これらは、macOSで最もシンプルなアイデアにも命を吹き込むとても楽しい方法です。

00:13:04.000 --> 00:13:12.000
「SwiftUIアプリに複数のWindowsを持ち出す」には、すべての新しいシーンタイプと機能を活用する方法の詳細があります。

00:13:12.000 --> 00:13:18.000
ウィンドウをコントロールできたので、フランクに渡して、ウィンドウにコントロールを入れます。

00:13:18.000 --> 00:13:19.000
フランク：ありがとう、ニック！

00:13:19.000 --> 00:13:26.000
今年は、インタラクティブなコンテンツを構築するためのすべてのAPIでさまざまな機能強化が行われています。

00:13:26.000 --> 00:13:33.000
私たちはカバーすることがたくさんあるので、フォームの楽しい強化からこのパーティーを始めましょう。

00:13:33.000 --> 00:13:46.000
macOS Venturaには、ニックが案内してくれたナビゲーションスプリットビューとスタックを使用して構築された、合理化されたナビゲーション構造を特徴とする真新しいシステム設定アプリが付属しています。

00:13:46.000 --> 00:13:50.000
また、新鮮でモダンなインターフェーススタイルも備えています。

00:13:50.000 --> 00:14:02.000
設定インターフェイスはコントロールが重いため、このスタイルは、多くのコントロールを含むフォームを一貫性があり、よく整理された方法で提示するように特別に設計されました。

00:14:02.000 --> 00:14:06.000
また、パーティープランナーアプリ内でこの新しいデザインを採用しました。

00:14:06.000 --> 00:14:08.000
見てみましょう。 

00:14:08.000 --> 00:14:18.000
イベント詳細ビューには、さまざまな種類のコントロールがセクションにグループ化され、設定インターフェイスと同様の目的を果たしています。

00:14:18.000 --> 00:14:25.000
これにより、システム設定から新しいビジュアルスタイルを採用するのに最適な候補者になります。

00:14:25.000 --> 00:14:31.000
macOSの新しいグループ化されたformStyleを使用して、このデザインを有効にすることができます。

00:14:31.000 --> 00:14:42.000
また、SwiftUIの宣言型APIの柔軟性のおかげで、フォーム内のコンテンツとコントロールは自動的に新しいスタイルに適応します。

00:14:42.000 --> 00:14:54.000
たとえば、セクションはコンテンツをヘッダーの下に視覚的にグループ化し、コントロールはラベルと値を先頭と末尾に一貫して整列させます。

00:14:54.000 --> 00:15:05.000
一部のコントロールは、一貫したレイアウトとアライメントのために末尾のミニスイッチとして表示を切り替える方法など、視覚的な外観も適応させる場合があります。

00:15:05.000 --> 00:15:18.000
そして、フォーム自体は多くの視覚構造を提供するので、他のコントロールは軽量な視覚的な外観でこのコンテキストに適応し、ロールオーバーでより顕著なコントロールバッキングを明らかにします。

00:15:18.000 --> 00:15:32.000
SwiftUIを使用すると、新しいコントロールを構築したり、読み取り専用情報を表示したりできる新しいLabeledContentビューを使用して、他のタイプのコンテンツをこの新しいスタイルに簡単に調整できます。

00:15:32.000 --> 00:15:43.000
この場合、イベントの場所のテキストを表示し、SwiftUIは自動的にスタイルを調整し、そのテキストの選択を許可します。

00:15:43.000 --> 00:15:54.000
しかし、LabeledContentは、より多くのアドレス全体を表示するためにカスタムビューを使用したい場合など、あらゆる種類のビューをラップすることもできます。

00:15:54.000 --> 00:16:00.000
SwiftUIは、他のケースでもテキストにデフォルトのスタイルを適用することについてよりスマートになりました。

00:16:00.000 --> 00:16:10.000
コントロールのラベル内の複数のテキストを階層的にフォーマットし、タイトルと字幕を形成します。

00:16:10.000 --> 00:16:19.000
この新しいフォームデザインはmacOSで見栄えがしますが、この同じコードの多くをiOSバージョンのアプリと共有することもできます。

00:16:19.000 --> 00:16:37.000
iOSでもいくつかの改善されたデザインに気付くでしょう。これらのポップアップメニューピッカーは、macOSに触発されたビジュアルスタイルですが、タッチベースのインターフェイスに美しく収まるように最適化されたインタラクションと外観を備えています。

00:16:37.000 --> 00:16:53.000
もちろん、同じコードはiPadの大画面でうまく機能し、Macと一緒に、SwiftUIの宣言モデルが共有インターフェイスを構築するときにコードを共有するのにどのように役立ち、すべてのプラットフォームにパーティーをもたらすのに役立つかを見ることができます。

00:16:53.000 --> 00:16:59.000
もちろん、フォームスタイルだけでなく、コントロールも改善しています。

00:16:59.000 --> 00:17:06.000
それでは、Party Plannerアプリで使用している他の新しいコントロール機能のライトニングラウンドツアーに参加しましょう。

00:17:06.000 --> 00:17:10.000
iOSアプリの新しいアクティビティページから始めましょう。

00:17:10.000 --> 00:17:24.000
テキストフィールドは、新しい軸パラメータを使用して垂直に展開するように構成でき、テキストに合わせて高さを伸ばし、指定されている場合は高さを行制限に制限します。

00:17:24.000 --> 00:17:41.000
しかし、lineLimit修飾子は、最小限のスペースを予約し、より多くのコンテンツが追加されると拡張し、コンテンツが上限を超えるとスクロールするなど、より高度な動作もサポートするようになりました。

00:17:41.000 --> 00:17:55.000
テキストフィールドの下には、新しいMultiDatePickerコントロールの例もあり、連続しない日付選択をサポートし、週を通してパーティー活動を広めるのに役立ちます。

00:17:55.000 --> 00:18:01.000
この時点で、この講演のパーティーのテーマについて複雑な感情を抱いているかもしれません。

00:18:01.000 --> 00:18:08.000
素晴らしいニュースは、混合状態のコントロールを使用して、SwiftUIでそれらの感情を表現できるようになったことです!

00:18:08.000 --> 00:18:16.000
ここでは、単一の集約トグルに折りたたむことができるトグルのグループがあります。

00:18:16.000 --> 00:18:30.000
内側のトグルはそれぞれ単一のバインディングを取りますが、集約トグルは、その値がすべて一致しない場合、混合状態を表示するすべてのバインディングのコレクションを取ります。

00:18:30.000 --> 00:18:32.000
ピッカーは同じように働きます。

00:18:32.000 --> 00:18:38.000
この装飾テーマピッカーは、現在選択されている装飾を反映するように値を変更します。

00:18:38.000 --> 00:18:47.000
しかし、複数の装飾を選択すると、混合状態の指標を使用してすべてのテーマが表示されます。

00:18:47.000 --> 00:18:51.000
では、iOSアプリに戻りましょう。

00:18:51.000 --> 00:18:57.000
イベントハッシュタグを選択するためのボタンスタイルのトグルがいくつかあります。

00:18:57.000 --> 00:19:04.000
境界線付きのボタンスタイルを追加するだけで、各トグルを区別できます。

00:19:04.000 --> 00:19:15.000
このようなボタンスタイルは、トグル、メニュー、ピッカーなど、ボタンのような外観をサポートするすべてのコントロールに適用されるようになりました。

00:19:15.000 --> 00:19:20.000
ステッパーに進むと、その値の形式を提供できるようになりました。

00:19:20.000 --> 00:19:27.000
macOSでは、フォーマットされたステッパーは編集可能なフィールドにその値を表示します。

00:19:27.000 --> 00:19:33.000
また、ステッパーはwatchOSでも利用可能になりました。

00:19:33.000 --> 00:19:44.000
Apple Watchは、私のお気に入りの新機能の1つであるアクセシビリティクイックアクション、手を握りしめることでアクションを実行する別の方法です。

00:19:44.000 --> 00:19:59.000
クイックアクションは、ボタンを使用して他のUIアクションと同様に定義でき、表示可能なボタンと同等のクイックアクションの両方で同じコードを共有できます。

00:19:59.000 --> 00:20:08.000
さて、私たちは多くの異なるコントロールをカバーしましたが、もちろん、コントロールはインタラクティブ性の唯一のソースではありません。

00:20:08.000 --> 00:20:14.000
それでは、テーブルやリストなど、より大きなインタラクティブコンテナの新機能を見てみましょう。

00:20:14.000 --> 00:20:20.000
テーブルがiPadOSでサポートされていることを共有できることを嬉しく思います。

00:20:20.000 --> 00:20:32.000
予想通り、iPadOSのテーブルは、昨年macOS用に導入したのと同じTable APIを使用して定義されており、プラットフォーム間でコードを簡単に共有できます。

00:20:32.000 --> 00:20:45.000
招待状表には、iPadの大きなディスプレイを利用して、各人の名前、都市、招待状のステータスの3つの列が表示されます。

00:20:45.000 --> 00:20:58.000
しかし、この表は、iPhoneを含むコンパクトなサイズのクラスでも適切にレンダリングされ、小さな画面スペース内のプライマリ列のみが表示されます。

00:20:58.000 --> 00:21:02.000
コンテキストを切り替えて、macOSでこの表をチェックしてみましょう。

00:21:02.000 --> 00:21:03.000
すごく良さそうだね！

00:21:03.000 --> 00:21:11.000
しかし、コンテキストについて言えば、テーブル内で一般的なアクションを実行するためのコンテキストメニューをいくつか追加したいと思います。

00:21:11.000 --> 00:21:17.000
これは、新しい選択ベースのcontentMenu修飾子の仕事です。

00:21:17.000 --> 00:21:26.000
修飾子は選択タイプを取り、選択をサポートする互換性のあるテーブルまたはリスト内で有効になります。

00:21:26.000 --> 00:21:46.000
メニュービルダー内では、現在の選択のコレクションが与えられ、テーブルの空の領域をクリックするときなど、単一の選択された行、複数の選択された行、または選択されていない行で操作できる高度なコンテキストメニューを構築できます。

00:21:46.000 --> 00:21:52.000
コンテキストメニューは、テーブル内のアクションを直接表示し、スピードと効率性に最適です。

00:21:52.000 --> 00:21:57.000
しかし、私はまた、これらの行動をより発見可能にしたいと思います。

00:21:57.000 --> 00:22:12.000
見つけやすさを向上させる素晴らしい方法は、ツールバーのボタンとして一般的なアクションを表示することであり、iPadOSには、その余分なレベルの磨きを達成するのに役立つ新しく改良されたツールバーデザインがあります。

00:22:12.000 --> 00:22:28.000
iPadのツールバーは、macOSで利用可能な同じAPIである各ツールバーアイテムに明示的な識別子を提供することで、アプリが実装できるユーザーのカスタマイズと並べ替えをサポートできるようになりました。

00:22:28.000 --> 00:22:37.000
これらの識別子により、SwiftUIはアプリの起動時にカスタムツールバー設定を自動的に保存および復元できます。

00:22:37.000 --> 00:22:44.000
iPadOSでは、すべてのツールバー項目がカスタマイズを許可しているわけではないことに注意してください。

00:22:44.000 --> 00:22:58.000
カスタマイズ可能なアクションは、デフォルトでツールバーの中央、またはコンパクトサイズのクラスのオーバーフローメニューに表示される新しいsecondaryActionツールバーアイテムの配置を使用して設定されます。

00:22:58.000 --> 00:22:59.000
わかった！

00:22:59.000 --> 00:23:06.000
その言葉は広まっており、出席者数は指数関数的に増加しているようです。

00:23:06.000 --> 00:23:12.000
検索のサポートを追加して、テーブルがスケールを管理するのを手伝いましょう。

00:23:12.000 --> 00:23:17.000
SwiftUIはすでに検索可能な修飾子による基本的な検索をサポートしています。

00:23:17.000 --> 00:23:28.000
そして、今年の新しい検索フィールドは、より構造化された検索クエリを構築するのに役立つトークン化された入力と提案をサポートすることができます。

00:23:28.000 --> 00:23:43.000
結果のフィルタリングを支援するために、SwiftUIは、macOSのツールバーの下にあるスコープバーに表示され、iOSのナビゲーションバー内のセグメント化されたコントロールとして表示される検索スコープをサポートするようになりました。

00:23:43.000 --> 00:23:48.000
今年はiPadのSwiftUIで可能なことの表面を引っ掻いただけです。

00:23:48.000 --> 00:23:52.000
「SwiftUI on iPad」シリーズをチェックして、詳細をご覧ください。

00:23:52.000 --> 00:24:00.000
イベントの詳細とロジスティクスをもう少しコントロールできるようになったので、ニュースを共有し、人々をさらに興奮させましょう。

00:24:00.000 --> 00:24:09.000
他の人とコンテンツを共有したり、アプリケーション間でデータを共有したりすることは、多くのアプリの重要な部分です。

00:24:09.000 --> 00:24:16.000
これらの機能を利用すると、アプリを使用する人々のワークフローにさらに統合されます。

00:24:16.000 --> 00:24:22.000
今年は、それをさらに簡単にするためのエキサイティングな分野がいくつかあります。

00:24:22.000 --> 00:24:31.000
写真やビデオを選ぶための新しいマルチプラットフォームとプライバシー保護APIであるPhotosPickerから始めましょう。

00:24:31.000 --> 00:24:43.000
写真はパーティーの不可欠な部分であるため、撮影した写真に楽しい誕生日効果を追加する機能をパーティープランナーアプリに追加しました。

00:24:43.000 --> 00:24:57.000
新しいPhotoSPickerビューは、アプリのどこにでも配置でき、アクティベーション時に、ユーザーのライブラリから写真やビデオを選択するための標準の写真ピッキングUIが表示されます。

00:24:57.000 --> 00:25:07.000
PhotosPickerは、選択したアイテムにバインディングを取り、実際の写真とビデオデータへのアクセスを提供します。

00:25:07.000 --> 00:25:18.000
また、コンテンツの種類のフィルタリング、優先写真エンコーディングなど、追加の豊富な構成オプションもあります。

00:25:18.000 --> 00:25:22.000
これは私が今まで見た中で最もフォトジェニックなカップケーキです。

00:25:22.000 --> 00:25:25.000
しかし、カップケーキ1個では不十分です。

00:25:25.000 --> 00:25:29.000
先に進みながら特殊効果を適用しましょう。

00:25:29.000 --> 00:25:36.000
カスタマイズされた写真ができたので、新しいShareLink APIと共有する準備が整いました。

00:25:36.000 --> 00:25:43.000
各プラットフォームには、人々があなたのアプリからコンテンツを共有できるようにするための標準的なインターフェースがあります。

00:25:43.000 --> 00:25:50.000
watchOS 9では、ウォッチアプリ内から共有シートを表示することもできます。

00:25:50.000 --> 00:25:57.000
新しいShareLinkビューでは、アプリ内からそのシステム共有シートを表示できます。

00:25:57.000 --> 00:26:10.000
共有するコンテンツと共有シートで使用するプレビューを提供するだけで、標準の共有アイコンボタンが自動的に作成されます。

00:26:10.000 --> 00:26:15.000
タップすると、コンテンツを送信するための標準の共有シートが表示されます。

00:26:15.000 --> 00:26:23.000
共有リンクは、コンテキストメニューやプラットフォーム間など、適用されるコンテキストに適応します。

00:26:23.000 --> 00:26:37.000
PhotosPicker、ShareLinkなどはすべて、アプリケーション間でタイプがどのように転送されるかを説明するSwiftファーストの宣言的な方法である新しいTransferableプロトコルを利用しています。

00:26:37.000 --> 00:26:50.000
譲渡可能なタイプは、ドラッグアンドドロップなどのSwiftUI機能を強化するために使用され、他のアプリからパーティープランナーギャラリーに画像を簡単にドロップできます。

00:26:50.000 --> 00:26:58.000
これは、ペイロードタイプ、この場合は画像のみを受け入れる新しいdropDestination APIを利用します。

00:26:58.000 --> 00:27:07.000
完了ブロックは、ドロップ位置とともに受信した画像のコレクションを提供します。

00:27:07.000 --> 00:27:14.000
文字列や画像などの多くの標準タイプは、すでにTransferableに準拠しています。

00:27:14.000 --> 00:27:23.000
だから、私たちのアプリでボールを転がすのはあまり仕事ではありませんでしたが、あなたは簡単に物事をさらに進め、独自のカスタムタイプでTransferableを実装することができます。

00:27:23.000 --> 00:27:34.000
それを行う時が来たら、コンフォーマンスは、コード可能なサポートやカスタムコンテンツタイプを使用するなど、タイプに適した表現を宣言します。

00:27:34.000 --> 00:27:44.000
Transferable、その他の表現、高度なヒントやコツの詳細については、「Meet Transferable」トークをご覧ください。

00:27:44.000 --> 00:27:49.000
私たちがカップケーキを準備している間、ニックはすべての供給をレイアウトしていました。

00:27:49.000 --> 00:27:51.000
ニック、そっちはどう？

00:27:51.000 --> 00:27:53.000
ニック：もうすぐだ！

00:27:53.000 --> 00:27:59.000
私はこれらのパーティーホーンを完全にカスタムレイアウトで配置していますが、もう少し時間が必要です。

00:27:59.000 --> 00:28:02.000
まずはグラフィックについて話しましょう。

00:28:02.000 --> 00:28:08.000
ShapeStyleには、今年、豊かなグラフィカル効果を実現するための新しいAPIがあります。

00:28:08.000 --> 00:28:14.000
これらのAPIを使用して、このゲストカードにパーティーポップを与えます!

00:28:14.000 --> 00:28:21.000
色には、色から派生した微妙なグラデーションを追加する新しいグラデーションプロパティがあります。

00:28:21.000 --> 00:28:25.000
これらはシステムの色によく似合います。

00:28:25.000 --> 00:28:30.000
ShapeStyleはまた、新しいシャドウ修飾子を手に入れました。

00:28:30.000 --> 00:28:36.000
白い前景スタイルに追加すると、テキストとシンボルに影が追加されます。

00:28:36.000 --> 00:28:39.000
そして、この影の細部は注目に値します。

00:28:39.000 --> 00:28:47.000
ドロップシャドウは、カレンダーシンボルのすべての要素に適用されています。

00:28:47.000 --> 00:28:57.000
SFシンボルの全世界と新しいSwiftUI ShapeStyle拡張機能を使用すると、絶対にゴージャスなアイコンを作ることができます。

00:28:57.000 --> 00:29:03.000
さて、SFシンボルのグリッドをパーティーに持ち込む時が来ました。

00:29:03.000 --> 00:29:10.000
今年はいくつかの素晴らしい改善があるSwiftUIプレビューを使用して、すぐに反復します。

00:29:10.000 --> 00:29:17.000
プレビューは、常に複数の構成で同時にビューを表示する便利な方法でした。

00:29:17.000 --> 00:29:23.000
Xcode 14では、プレビューバリアントでこれをこれまで以上に簡単にしています。

00:29:23.000 --> 00:29:34.000
これにより、構成コードを書くことなく、同時に複数の外観、タイプサイズ、または向きでビューを開発できます。

00:29:34.000 --> 00:29:41.000
同じグラデーションを再度使用することも、楕円グラデーションとしてスタイル設定して、これらの画像に柔らかな輝きを与えることもできます。

00:29:41.000 --> 00:29:46.000
そして、暗くて明るい外観でそれをプレビューします。

00:29:46.000 --> 00:29:50.000
プレビューはデフォルトでライブモードで実行されるようになりました。

00:29:50.000 --> 00:29:57.000
少し踊らなければ素晴らしい誕生日パーティーにはなれないので、これらのSFシンボルを踊らせましょう。

00:29:57.000 --> 00:30:01.000
♪エレクトロニックダンスミュージック♪

00:30:01.000 --> 00:30:12.000
♪

00:30:12.000 --> 00:30:16.000
これらの陽気なアイコンは、深遠な何かを示しています。

00:30:16.000 --> 00:30:22.000
SwiftUIは、テキストと画像のアニメーションを次のレベルに引き上げました。

00:30:22.000 --> 00:30:26.000
そのテキストがスローモーションで再びアニメーション化されるのを見てみましょう。

00:30:26.000 --> 00:30:32.000
テキストは、重み、スタイル、さらにはレイアウトの間で美しくアニメーション化できるようになりました。

00:30:32.000 --> 00:30:40.000
そして、最良の部分:これは、SwiftUIの残りの部分で使用されているのと同じアニメーションAPIを利用します。

00:30:40.000 --> 00:30:49.000
では、UIプログラミングの私の絶対的なお気に入りの部分、適用されたジオメトリ、または私たちがそれをレイアウトと呼ぶものについて話しましょう。

00:30:49.000 --> 00:30:53.000
SwiftUIは、ビューをレイアウトする新しい方法を追加しました。

00:30:53.000 --> 00:30:59.000
グリッドは、2次元グリッドでビューを配置する新しいコンテナビューです。

00:30:59.000 --> 00:31:07.000
グリッドは、サブビューを前面に測定して、複数の列にまたがるセルを有効にし、行と列間の自動配置を有効にします。

00:31:07.000 --> 00:31:14.000
実際、あなたはすでに以前にグリッドを見ました。

00:31:14.000 --> 00:31:21.000
Grid、GridRow、およびgridCellColumns修飾子を使用すると、グリッドを断片的に構築できます。

00:31:21.000 --> 00:31:27.000
もちろん、SwiftUIのすべてのレイアウトと同様に、コンポジション用に構築されています。

00:31:27.000 --> 00:31:38.000
最初のリリースでSwiftUIのレイアウトモデルを導入し、最も一般的なレイアウトを実現するためのプリミティブなレイアウトタイプのツールボックスを提供しました。

00:31:38.000 --> 00:31:56.000
ほとんどの場合、これらの原始的なレイアウトタイプで仕事を成し遂げることができますが、時には、時には、その命令的なレイアウトコードが必要です：サイズ、minX、frame.origin.xマイナスframe.midXを2プラス3で割った値。

00:31:56.000 --> 00:32:03.000
新しいレイアウトプロトコルに手を伸ばす必要があるのは、このような時です。

00:32:03.000 --> 00:32:15.000
それにより、独自のファーストクラスのレイアウト抽象化を構築するために、SwiftUIのスタックとグリッドを実装するために使用した完全なパワーと柔軟性が得られます。

00:32:15.000 --> 00:32:21.000
レイアウトを使用して、私は誕生日パーティーのゲストのためにこのオーダーメイドの座席表レイアウトを構築しました。

00:32:21.000 --> 00:32:25.000
私たちのパーティーのゲストは列やポッドに座るべきですか?

00:32:25.000 --> 00:32:29.000
レイアウトの力で、私たちは選ぶ必要はありません。

00:32:29.000 --> 00:32:39.000
レイアウトプロトコルを使用すると、ビュー階層の特定のニーズに合わせて、あらゆる種類の効率的なレイアウトを構築できます。

00:32:39.000 --> 00:32:49.000
レイアウトを採用する方法やその他の新しい優れたレイアウトテクニックについては、「SwiftUIでカスタムレイアウトを作成する」セッションをチェックしてください。

00:32:49.000 --> 00:32:53.000
私は特にあなたのためにレイアウトの味を用意しました。

00:32:53.000 --> 00:33:01.000
新しいAnyLayoutタイプを使用すると、グリッドレイアウトと私が書いたカスタム散乱レイアウトを切り替えることができます。

00:33:01.000 --> 00:33:08.000
このセッションが終わりに近づくにつれて、1つの驚きが残っています:あなたは招待されています!

00:33:08.000 --> 00:33:10.000
♪

00:33:10.000 --> 00:33:17.000
あなたは今週私たちと一緒にSwiftUIの誕生日とすべての新しいAPIを祝うために招待されています。

00:33:17.000 --> 00:33:25.000
私たちが取り上げたAPIには多くの詳細が残っており、含める時間がなかったさらに多くのAPIがあります。

00:33:25.000 --> 00:33:29.000
パーティーを楽しんで、WWDC 2022を楽しんでください。

00:33:29.000 --> 00:33:36.000
そして、私たちはケーキを楽しむつもりです。

00:33:36.000 --> 00:33:38.000
♪インストゥルメンタルヒップホップ音楽♪

00:33:38.000 --> 23:59:59.000
♪

