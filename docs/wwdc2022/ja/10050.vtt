WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
こんにちは！私の名前はデヴォンです。

00:00:11.000 --> 00:00:15.000
私はwatchOSチームのエンジニアで、今日はiOSについて話します。

00:00:15.000 --> 00:00:21.000
そして、私はiOSのエンジニアであるグラハムです。今日はwatchOSについて話します。

00:00:21.000 --> 00:00:29.000
ロック画面のアクセサリウィジェットとwatchOSのコンプリケーションを書くことができるWidgetKitへのAPIの追加について話します。

00:00:29.000 --> 00:00:34.000
途中であなたを助けるためにSwiftUIへの追加とともに、両方を一緒に開発する方法を紹介します。

00:00:34.000 --> 00:00:41.000
ウィジェット、タイムライン、リロードに慣れていない場合は、以前のWidgetKitセッションを探すことをお勧めします。

00:00:41.000 --> 00:00:45.000
まず、合併症の歴史とそれらがどのように進化したかについて話します。

00:00:45.000 --> 00:00:51.000
次に、新しい環境でウィジェットやコンプリケーションを色付けするための新しいAPIについて話します。

00:00:51.000 --> 00:00:58.000
その後、グラハムは独自のウィジェットの作成を開始し、既存のウィジェット拡張機能をwatchOSに移動する方法をデモします。

00:00:58.000 --> 00:01:02.000
次に、グラハムはこれらの小さな景色を最大限に活用する方法を説明します。

00:01:02.000 --> 00:01:07.000
そして最後に、ウィジェットが表示される可能性のあるさまざまなプライバシー環境について説明します。

00:01:07.000 --> 00:01:14.000
コンプリケーションはwatchOSプラットフォームの重要な部分であり、文字盤にすばやく簡単にわかる情報を表示します。

00:01:14.000 --> 00:01:22.000
彼らはすぐにアクセス可能で価値の高い情報を伝え、タップするとアプリ内の関連する場所に移動します。

00:01:22.000 --> 00:01:26.000
watchOS 2では、ClockKitで独自のコンプリケーションを作成できるようになりました。

00:01:26.000 --> 00:01:30.000
それ以来、合併症は長い道のりを歩みてきました。

00:01:30.000 --> 00:01:37.000
watchOS 5では、グラフィックコンテンツと一連の新しいファミリーを備えた豊富なコンプリケーションが導入されました。

00:01:37.000 --> 00:01:48.000
SwiftUIコンプリケーションと複数のコンプリケーションがwatchOS 7で導入され、コンプリケーションを次のレベルに引き上げ、これまで以上に多くのオプションを提供することができました。

00:01:48.000 --> 00:01:58.000
今日、コンプリケーションはWidgetKitで再考され、リメイクされ、SwiftUIを採用し、ウィジェットの形でiOSに一目を見やすいコンプリケーション体験をもたらしました。

00:01:58.000 --> 00:02:11.000
iOS 16とwatchOS 9のWidgetKitを使用すると、両方のプラットフォームで見やすいウィジェットとコンプリケーションを構築できるため、コードを一度作成し、既存のホーム画面ウィジェットとインフラストラクチャを共有できます。

00:02:11.000 --> 00:02:18.000
これを行うには、既存のウィジェットファミリータイプに新しいウィジェットファミリを追加し、「アクセサリ」という単語の先頭を付けました。

00:02:18.000 --> 00:02:27.000
新しいアクセサリーRectangularファミリは、既存のClockKitグラフィックRectangularファミリと同様に、複数行のテキストまたは小さなグラフやチャートを表示するために使用できます。

00:02:27.000 --> 00:02:32.000
accessoryCircularファミリーは、簡単な情報、ゲージ、進捗状況のビューに最適です。

00:02:32.000 --> 00:02:37.000
このファミリーは、graphicCircular ClockKitファミリーにも取って代わります。

00:02:37.000 --> 00:02:45.000
まったく新しいアクセサリーインラインは、watchOSとiOSの時間以上の多くの顔に存在するテキストのみのスロットです。

00:02:45.000 --> 00:02:52.000
インラインスロットには多くのサイズがあり、後でそれらすべてを最大限に活用する方法について説明します。

00:02:52.000 --> 00:02:59.000
watchOSに特有の新しいaccessormentCornerファミリーは、ウィジェットコンテンツの小さな円とゲージとテキストを混ぜ合わせています。

00:02:59.000 --> 00:03:03.000
この講演では、iOSとwatchOSに共通する家族に焦点を当てています。

00:03:03.000 --> 00:03:11.000
この新しいwatchOSファミリーとコンプリケーション固有の機能の詳細については、「WidgetKitコンプリケーションでさらに進む」セッションをチェックしてください。

00:03:11.000 --> 00:03:14.000
色とレンダリングモードについて話しましょう。

00:03:14.000 --> 00:03:18.000
アクセサリーウィジェットがいくつかの異なる外観を取ることに気づいたかもしれません。

00:03:18.000 --> 00:03:25.000
システムは、アクセサリーファミリーウィジェットの外観を制御し、レンダリングスタイルに適応させるのに役立ついくつかのツールを提供しました。

00:03:25.000 --> 00:03:28.000
ウィジェットが表示される3つの異なるレンダリングモードがあります。

00:03:28.000 --> 00:03:34.000
ウィジェットは、フルカラー、アクセント、または鮮やかにすることができます。

00:03:34.000 --> 00:03:40.000
これら3つの異なるプレゼンテーションを表すために、WidgetRenderingModeタイプを導入しました。

00:03:40.000 --> 00:03:46.000
widgetRenderingModeキーパスを使用して、環境からこの値にアクセスできます。

00:03:46.000 --> 00:03:53.000
その後、条件付きでコンテンツを変更して、表示されるすべての場所で正しく見えるようにすることができます。

00:03:53.000 --> 00:03:58.000
watchOSのフルカラーモードでは、コンテンツは指定したとおりに表示されます。

00:03:58.000 --> 00:04:08.000
既存の多くのコンプリケーションは、ウェザーゲージのグラデーションやアクティビティリングの色など、フルカラーでカラフルな外観になります。

00:04:08.000 --> 00:04:13.000
アクセント付きレンダリングモードでは、ビューは2つのグループに分割され、独立して色付けされます。

00:04:13.000 --> 00:04:19.000
2つの着色グループは平らに着色されており、元の不透明度のみを保持しています。

00:04:19.000 --> 00:04:29.000
.widgetAccentable（）ビュー修飾子でビューをグループ化する方法をシステムに伝えるか、ウィジェットレンダリングモード環境値に基づいてコンテンツを切り替えて、平坦化されたときに完璧に見えるようにすることができます。

00:04:29.000 --> 00:04:35.000
システムはさまざまな方法でコンテンツを着色することができ、その一部は反転していることに注意してください。

00:04:35.000 --> 00:04:42.000
黒い背景にあるものもあれば、watchOS 9の新しいフルカラーの背景にあるものもあります。

00:04:42.000 --> 00:04:48.000
iOSの鮮やかなレンダリングモードでは、コンテンツは不飽和になり、ロック画面の背景に合わせて適切に着色されます。

00:04:48.000 --> 00:04:52.000
システムは、グレースケールコンテンツを素材の外観にマッピングします。

00:04:52.000 --> 00:04:57.000
この素材は、その背後にあるコンテンツに適応し、その環境にぴったりと表示されます。

00:04:57.000 --> 00:05:02.000
さらに、ロック画面は、鮮やかなレンダリングモードに色付きの色合いを与えるように設定できます。

00:05:02.000 --> 00:05:05.000
光源の色は、ほとんど不透明で明るくなります。

00:05:05.000 --> 00:05:12.000
一方、暗いソースの色は、その背後にある背景のあまり目立たないぼかしとして表示され、わずかな明るさしかありません。

00:05:12.000 --> 00:05:16.000
読みやすさを確保するために、このモードでは透明な色を使用しないでください。

00:05:16.000 --> 00:05:23.000
代わりに、読みやすさを維持しながら、目立たないコンテンツを表すために、暗い色または黒を使用してください。

00:05:23.000 --> 00:05:32.000
このニュアンスの一部を支援するために、この円形カレンダーのように、それらを必要とするウィジェットに一貫した背景を与えるために、AccessoryWidgetBackgroundビューも導入しました。

00:05:32.000 --> 00:05:38.000
ほとんどのアクセサリーウィジェットには背景がありませんが、一部のスタイルは1つで強化できます。

00:05:38.000 --> 00:05:46.000
背景ビューは、さまざまなウィジェットレンダリングモードで異なる外観を取り、顔やロック画面のスタイルを正しく表示するようにシステムによって調整されます。

00:05:46.000 --> 00:05:54.000
これは、フルカラーとアクセント付きの柔らかい透明なビューで、鮮やかな環境では黒で、低輝度と完全なぼかしになります。

00:05:54.000 --> 00:06:01.000
グラハムは、ロック画面とwatchOSのコンプリケーションのためのいくつかの新しいウィジェットを作り始めることにとても興奮しています - 私はそれを彼に渡します。

00:06:01.000 --> 00:06:02.000
またこんにちは!

00:06:02.000 --> 00:06:13.000
WWDC2020の「Widgets Code-along」からよく知っている人もいるかもしれない既存のアプリ、Emoji Rangersに新しいウィジェットファミリーのサポートを追加します。

00:06:13.000 --> 00:06:17.000
始める前に、既存のウィジェットフリーのプロジェクトを持っている人のためのメモ。

00:06:17.000 --> 00:06:26.000
iOSに既に存在し、watchOSに持ち込まれたウィジェット拡張ターゲットをプロジェクトに追加することで始めることができます。

00:06:26.000 --> 00:06:35.000
しかし、私はあなたの多くがすでにウィジェット付きのアプリを持っていることを知っているので、今日はそこから始めて、新しいウィジェットと合併症の追加について話しましょう。

00:06:35.000 --> 00:06:38.000
絵文字レンジャーズプロジェクトを継続します。

00:06:38.000 --> 00:06:46.000
このアプリは、私たちのお気に入りの絵文字レンジャーを追跡し、ホーム画面のウィジェットを使用して彼らの健康と充電時間を最新の状態に保ちます。

00:06:46.000 --> 00:06:51.000
私たちはすでにEmoji RangersをwatchOSに持ち込み、お気に入りのアプリを手首にもたらしました。

00:06:51.000 --> 00:06:59.000
今日は、新しいウィジェットファミリーをサポートしてEmoji Rangersを拡張し、ウィジェットの拡張機能を時計にもたらします。

00:06:59.000 --> 00:07:02.000
ウィジェットの拡張機能を時計に取り付けることから始めましょう。

00:07:02.000 --> 00:07:07.000
既存のiOSターゲットとコードを共有する新しいwatchOSターゲットを追加します。

00:07:07.000 --> 00:07:44.000
iOSウィジェットの拡張ターゲットを複製し、より良い名前を付け、バンドル識別子を時計アプリの接頭辞に変更し、watchOSをターゲットにし、新しい拡張機能を時計アプリに埋め込みます。

00:07:44.000 --> 00:07:53.000
今、私たちはwatchOSでコード構築を取得する必要があります - それに取りましょう。

00:07:53.000 --> 00:08:22.000
EmojiRangerWidgetコードをちらっと見ると、システムがコンテンツをリロードするときに使用されるタイムラインプロバイダー、SwiftUIを使用してさまざまなファミリーのコンテンツを生成するビュー、ウィジェット設定、Xcodeプレビュープロバイダーが表示されます。

00:08:22.000 --> 00:08:26.000
Emoji RangersアプリはすでにiOSのホーム画面ウィジェットをサポートしています。

00:08:26.000 --> 00:08:38.000
それはシステム中小の家族を提供し、ここでウィジェット構成で、私は新しい家族を追加するつもりです。

00:08:38.000 --> 00:08:55.000
システムファミリはウォッチでは利用できないため、プラットフォームマクロを使用してサポートされているファミリーを指定する必要があります。

00:08:55.000 --> 00:09:12.000
プレビュープロバイダーでは、新しいファミリーのプレビューを追加します。

00:09:12.000 --> 00:09:19.000
次に、watchOS用に正常に構築する前に、新しいIntentRecommendation APIを実装する必要があります。

00:09:19.000 --> 00:09:28.000
インテントはiOSのUIを編集するウィジェットで完全に設定可能ですが、watchOSでは、事前設定されたリストを提供する必要があります。

00:09:28.000 --> 00:09:46.000
IntentTimelineProviderの新しい推奨事項方法をオーバーライドすることで、それを行うことができます。

00:09:46.000 --> 00:09:47.000
今、私たちは成功裏に構築しています。

00:09:47.000 --> 00:09:56.000
プレビューを再開して、円形のウィジェットがどのように見えるか見てみましょう。

00:09:56.000 --> 00:10:01.000
小さなウィジェットでも意図されたコンテンツは、私たちの新しいフォームファクタにうまく収まりません。

00:10:01.000 --> 00:10:09.000
新しいウィジェットファミリーは、ホーム画面にあるiOSウィジェットよりも小さく、合併症の内容を考慮する必要があります。

00:10:09.000 --> 00:10:14.000
それでは、私たちの合併症を際立たせるために使用できるいくつかの新しい見解について話しましょう。

00:10:14.000 --> 00:10:16.000
景色に行きましょう。

00:10:16.000 --> 00:10:22.000
systemSmallやその他のウィジェットのコードを見ることができます。accessmentCircularケースのコードを追加しましょう。

00:10:22.000 --> 00:10:32.000
アバターだけで似合うと思います。

00:10:32.000 --> 00:10:37.000
これは、私たちのアプリへのクイックショートカットを提供しますが、ユーザーには情報を提供しません。

00:10:37.000 --> 00:10:46.000
エッジの周りにプログレスビューを追加しましょう。これにより、レンジャーがいつ再び戦闘の準備ができているかをユーザーに知らせることができます。

00:10:46.000 --> 00:10:53.000
問題は、このプログレスビューを最新の状態にアニメーション化することで、短時間連続して多くのタイムラインエントリが必要になります。

00:10:53.000 --> 00:10:57.000
代わりに、SwiftUIの新しい自動更新ProgressViewを使用できます。

00:10:57.000 --> 00:11:01.000
それは私たちのレンジャーが完全に癒される日付間隔を取ります。

00:11:01.000 --> 00:11:11.000
システムは進捗ビューを更新し続けます。つまり、ここで必要なのは1つのタイムラインエントリだけです。

00:11:11.000 --> 00:11:14.000
はるかに良いです。

00:11:14.000 --> 00:11:19.000
では、長方形のファミリーを追加してみましょう。

00:11:19.000 --> 00:11:25.000
長方形のプレビューを選択します。

00:11:25.000 --> 00:11:31.000
これにより、より多くのスペースが得られるので、コンプリケーションのスタイルで3行のビューを作ります。

00:11:31.000 --> 00:11:39.000
最初にキャラクターの名前、次にレベル、そして完全に癒されるまでの時間、自動更新の日付フィールドを使用します。

00:11:39.000 --> 00:11:59.000
キャラクターの名前を際立たせたいので、見出しのフォントスタイルを使用してテキストのサイズを調整し、その色を調整するwidgetAccentable修飾子を追加します。

00:11:59.000 --> 00:12:18.000
私たちの景色はここで鮮やかに素晴らしく見えます。今、時計の他のレンダリングモードでどのように見えるかを見てみましょう。

00:12:18.000 --> 00:12:22.000
キャラクターの名前がアクセントカラーにどのように表示されるかがわかります。

00:12:22.000 --> 00:12:30.000
ウィジェットやコンプリケーションを環境でくつろげるには、デフォルトのフォントパラメータを使用し、フォントスタイルを使用することが重要です。

00:12:30.000 --> 00:12:34.000
フォントのスタイルとサイズはiOSとwatchOSで異なります。

00:12:34.000 --> 00:12:40.000
iOSは通常のテキストデザインを使用し、watchOSはより重い重量の丸みを帯びたデザインを使用しています。

00:12:40.000 --> 00:12:43.000
ウィジェットやコンプリケーションは、他のウィジェットと隣接する画面上に置かれます。

00:12:43.000 --> 00:12:53.000
そして、彼らは一貫して見えるので、フォントスタイルのタイトル、見出し、本文、およびキャプションを使用することをお勧めします。

00:12:53.000 --> 00:13:04.000
Xcodeのプレビューは、アバターを追加する余地がまだ残っていることを示しています。

00:13:04.000 --> 00:13:11.000
これがiPhoneでどのように見えるか見てみましょう。

00:13:11.000 --> 00:13:13.000
それは素晴らしいですね！

00:13:13.000 --> 00:13:19.000
最後に、テキストの行とオプションで画像を表示する3番目のスタイル、accessアクセサリーインラインを追加しましょう。

00:13:19.000 --> 00:13:25.000
インラインアクセサリーは、システム定義のカラーリングとフォントに従って描画されることに注意してください。

00:13:25.000 --> 00:13:38.000
プレビューを選択しましょう。

00:13:38.000 --> 00:13:45.000
ヒーローの名前を見せて、カウントダウンを充電しましょう。

00:13:45.000 --> 00:13:47.000
このテキストは私たちの時計スロットには長すぎます。

00:13:47.000 --> 00:13:51.000
だから、今はViewThatFitsを見せるのに良い時期です。

00:13:51.000 --> 00:14:00.000
長いものから簡潔なものまで、複数のビューを提供でき、ViewThatFitsは切り捨てやクリッピングなしで利用可能なスペースに合った最初のコンテンツビューを選択します。

00:14:00.000 --> 00:14:19.000
テキストを短くしましょう。

00:14:19.000 --> 00:14:42.000
それでも、最短の時計スロットには長すぎるかもしれないので、名前のアバターを切り替えて3番目の選択肢を提供しましょう。

00:14:42.000 --> 00:14:49.000
それがどのように見えるか見てみましょう。

00:14:49.000 --> 00:14:54.000
詳細については、「SwiftUIでカスタムレイアウトを作成する」セッションを参照してください。

00:14:54.000 --> 00:14:56.000
すごい！

00:14:56.000 --> 00:15:02.000
絵文字レンジャーでさえプライバシーを楽しむのが好きなので、それについて話すためにデボンに返します。

00:15:02.000 --> 00:15:05.000
またこんにちは!プライバシーについて話しましょう。

00:15:05.000 --> 00:15:10.000
これまでのところ、この講演では、ウィジェットのアクティブな状態と合併症について議論しました。

00:15:10.000 --> 00:15:17.000
ただし、当社のプラットフォーム全体で、デバイスがコンテンツを編集しているのか、低輝度の状態にあるのかを検討する必要があります。

00:15:17.000 --> 00:15:25.000
iOSのロック画面では、デフォルトの動作は、デバイスがロックされている間でもコンテンツを表示することです。これは、ここのグリッドの左上のセルです。

00:15:25.000 --> 00:15:34.000
ただし、これは設定で設定可能であり、ユーザーは通知と同様に、ロックされたときにウィジェットを編集することを選択できます。

00:15:34.000 --> 00:15:38.000
watchOSでは、時計が着用されている限り、デバイスはロック解除されたままです。

00:15:38.000 --> 00:15:45.000
非アクティブの場合、時計は低輝度のプレゼンテーションと低い更新ケイデンスのコンテンツで、常にオンに移行します。

00:15:45.000 --> 00:15:52.000
デフォルトでは、コンテンツは左下の状態である低輝度で編集されません。

00:15:52.000 --> 00:15:59.000
ロック画面と同様に、ユーザーはこの常時オンの状態で編集するようにコンプリケーションコンテンツを設定できます。

00:15:59.000 --> 00:16:05.000
この状態では、コンテンツが編集と低輝度の両方に対応していることを確認する必要があります。

00:16:05.000 --> 00:16:09.000
一緒に、プラットフォームはここに示されている4つの州のそれぞれをカバーしています。

00:16:09.000 --> 00:16:14.000
これらすべての可能な状態を考慮し、合併症とウィジェットがすべてのケースでうまく機能することを確認してください。

00:16:14.000 --> 00:16:18.000
あなたがそれをどのようにできるかについて話しましょう。

00:16:18.000 --> 00:16:23.000
時計では、ウィジェットは常時表示エクスペリエンスをサポートする必要があります。

00:16:23.000 --> 00:16:28.000
\.isLuminanceReduced環境値を使用して、コンテンツを常時オンに適応させることができます。

00:16:28.000 --> 00:16:35.000
ClockKitから来ている場合は、1つだけでなく、すべてのタイムラインエントリに常時オンのコンテンツを準備できることに注意してください。

00:16:35.000 --> 00:16:43.000
常時オンの場合、時間相対的なテキストと進行状況のビューは、常時オンの低い更新ケイデンスをサポートするために、忠実度低下モードに変わります。

00:16:43.000 --> 00:16:52.000
このモードをサポートするには、環境値を使用して時間に敏感なコンテンツを削除し、より低い更新頻度に合わせてコンテンツを最適化します。

00:16:52.000 --> 00:16:54.000
では、編集について話しましょう。

00:16:54.000 --> 00:17:01.000
デフォルトでは、プライバシーモードには、TimelineProviderが作成したプレースホルダビューの編集済みバージョンが表示されます。

00:17:01.000 --> 00:17:10.000
機密性の高い要素や編集する必要のない要素がある場合は、.privacySensitive修飾子を使用して、編集するビューの一部のみをマークできます。

00:17:10.000 --> 00:17:16.000
この例では、ウィジェットで心拍数を編集しましたが、画像は未編集のままです。

00:17:16.000 --> 00:17:20.000
これで、ロック画面とWidgetKitの合併症のための素晴らしいウィジェットを作る準備が整いました。

00:17:20.000 --> 00:17:26.000
SwiftUIの新機能の詳細については、「SwiftUIでカスタムレイアウトを作成する」トークをチェックしてください。

00:17:26.000 --> 00:17:27.000
見てくれてありがとう。

00:17:27.000 --> 23:59:59.000
♪

