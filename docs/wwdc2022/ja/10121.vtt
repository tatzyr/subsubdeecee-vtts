WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:18.000
こんにちは、私はiOSシステムエクスペリエンスチームのエンジニアであるテジャです。このセッションでは、フォーカスフィルターを満たすことができます。

00:00:18.000 -> 00:00:24.000
フォーカスはiOS 15、macOS Monterey、watchOS 8で導入されました。

00:00:24.000 -> 00:00:31.000
これは、システム動作を一定期間設定することで、人々が重要なことに集中する方法です。

00:00:31.000 -> 00:00:39.000
フォーカスは、コントロールセンターに入り、システムフォーカスまたはカスタムフォーカスのいずれかから選択するだけで有効になります。

00:00:39.000 -> 00:00:45.000
フォーカスが有効になっている間は、通知の動作をカスタマイズできます。

00:00:45.000 -> 00:00:57.000
たとえば、ワークフォーカス中、誰かが同僚からの通知のみを許可するか、仕事に関連する選択したいくつかのアプリの通知のみを許可する場合があります。

00:00:57.000 -> 00:01:04.000
フォーカスごとに、システムの動作を設定および設定でスケジュールできます。

00:01:04.000 -> 00:01:10.000
iOS 16とmacOS Venturaは、フォーカスフィルターでフォーカス機能を強化します。

00:01:10.000 -> 00:01:15.000
まず、フォーカスフィルターとその振る舞いを紹介します。

00:01:15.000 -> 00:01:20.000
次に、アプリでフォーカスフィルターを定義する方法について説明します。

00:01:20.000 -> 00:01:25.000
その後、フォーカスフィルターで行動することの意味について説明します。

00:01:25.000 -> 00:01:31.000
そして最後に、あなたのアプリがシステムに追加のコンテキストを提供する方法について説明します。

00:01:31.000 -> 00:01:39.000
フォーカスフィルターは、現在有効になっているフォーカスに基づいてアプリの動作をカスタマイズする方法です。

00:01:39.000 -> 00:01:44.000
フォーカスフィルターを採用したシステムアプリの素晴らしい例がいくつかあります。

00:01:44.000 -> 00:01:53.000
カレンダーアプリを使用すると、フォーカスが有効になっているときにデフォルトで表示するカレンダーをフィルタリングできます。

00:01:53.000 -> 00:01:55.000
これが私のカレンダーの通常の姿です。

00:01:55.000 -> 00:02:01.000
そして、ご覧のとおり、私は仕事と個人的なカレンダーイベントが混在しています。

00:02:01.000 -> 00:02:08.000
パーソナルフォーカス中にカレンダーのフォーカスフィルターを設定して、個人のカレンダーのみを表示できます。

00:02:08.000 -> 00:02:13.000
フォーカスフィルターを設定した後、これが私のカレンダーの様子です。

00:02:13.000 -> 00:02:19.000
カレンダーは、これがフォーカスでフィルタリングされていることを示し、フィルタリングを切り替える方法を提供しました。

00:02:19.000 -> 00:02:26.000
今、私は個人的な時間を楽しもうとして、仕事のカレンダーに圧倒されることはありません。

00:02:26.000 -> 00:02:32.000
メールアプリの受信トレイは、フォーカス中に関連するメールボックスのみを表示するようにフィルタリングできます。

00:02:32.000 -> 00:02:40.000
メール通知もフィルタリングされ、関連する通知のみが目立つように表示されます。

00:02:40.000 -> 00:02:52.000
これは、ワークフォーカス中に仕事関連のメール通知のみを配信し、個人的なメール通知が私を中断するのを防ぐようにメールを設定することができることを意味します。

00:02:52.000 -> 00:02:56.000
アプリがフォーカスフィルターを実装したい理由はたくさんあります。

00:02:56.000 -> 00:03:04.000
おそらく、あなたのアプリは複数のアカウントを管理しており、フォーカスを特定のアカウントに関連付けるのが適切です。

00:03:04.000 -> 00:03:09.000
大量のデータを持つアプリは、フォーカスのためにコンテンツをフィルタリングする必要があるかもしれません。

00:03:09.000 -> 00:03:23.000
ユーザーが集中している間に気を散らさないようにしたい場合は、バッジ数、アプリ内アラート、および有効なフォーカスにとって顕著なものへの通知を減らすことによってこれを行うことができます。

00:03:23.000 -> 00:03:30.000
外観に関しては、アプリは有効なフォーカスに基づいてテーマやレイアウトを表示したい場合があります。

00:03:30.000 -> 00:03:41.000
基本的に、アプリがコンテキストに基づいて異なるコンテンツを表示できる場合は、フォーカスフィルターを使用してユーザーエクスペリエンスを強化できる場合があります。

00:03:41.000 -> 00:03:44.000
フォーカスフィルターの仕組みを説明しましょう。

00:03:44.000 -> 00:03:52.000
アプリは、フォーカスごとにユーザーがカスタマイズできるものを定義し、これはAppIntentを使用して行われます。

00:03:52.000 -> 00:03:57.000
システムは、フォーカスごとに設定できるものを公開します。

00:03:57.000 -> 00:04:05.000
AppIntentで定義されたプロパティを設定するUIは、フォーカス設定でフォーカスフィルターとして公開されます。

00:04:05.000 -> 00:04:15.000
ユーザーは、フォーカス設定に移動し、アプリのフォーカスフィルターを設定することで、特定の方法で動作するようにアプリを設定できます。

00:04:15.000 -> 00:04:21.000
では、フォーカスフィルターをコードベースに組み込む方法について説明します。

00:04:21.000 -> 00:04:24.000
フォーカスフィルターを定義するにはいくつかの部分があります。

00:04:24.000 -> 00:04:28.000
1つ目は、SetFocusFilterIntentの実装です。

00:04:28.000 -> 00:04:35.000
これは、アプリがフォーカスごとにカスタム設定を持つことに興味を持っていることをシステムに示します。

00:04:35.000 -> 00:04:38.000
2番目のステップは、アプリのパラメータを定義することです。

00:04:38.000 -> 00:04:44.000
これらは、ユーザーがアプリ内で設定できるものを表します。

00:04:44.000 -> 00:04:52.000
最後のステップは、フォーカスフィルターが正しいコンテンツでシステム設定に表示されるように、表示表現を設定することです。

00:04:52.000 -> 00:04:57.000
このようにして、ユーザーは何が設定されているかを認識できます。

00:04:57.000 -> 00:04:59.000
私はいくつかのコードに飛び込みます。

00:04:59.000 -> 00:05:07.000
最初にする必要があるのは、AppIntentsをインポートし、SetFocusFilterIntentを実装する構造体を定義することです。

00:05:07.000 -> 00:05:10.000
これがあなたのフォーカスフィルターです。

00:05:10.000 -> 00:05:17.000
タイトルと説明を設定すると、ユーザーがあなたのフォーカスが何であるかを発見するのに役立ちます。

00:05:17.000 -> 00:05:22.000
フォーカスフィルターは、設定のグリッドビューに表示されます。

00:05:22.000 -> 00:05:28.000
フォーカスフィルターが設定される前に、この外観でユーザーに表面化されます。

00:05:28.000 -> 00:05:40.000
ここのアイコンはアプリのアイコンで、プライマリテキストはアプリの名前で、セカンダリテキストはフォーカスフィルターで設定したタイトル変数と一致します。

00:05:40.000 -> 00:05:46.000
ユーザーがタップしてフィルターを設定すると、同じコンテンツが表示されます。

00:05:46.000 -> 00:05:54.000
今回は、追加のコンテキストのために、あなたが提供した説明文字列も含まれています。

00:05:54.000 -> 00:06:02.000
タイトルと説明の文字列はどちらも静的であり、アプリがインストールされた時点でシステムによって読み取られます。

00:06:02.000 -> 00:06:13.000
フォーカスフィルターを定義するときは、パラメータとして装飾された一連のプロパティを提供することで、人がカスタマイズできるものを指定する必要があります。

00:06:13.000 -> 00:06:17.000
パラメータを指定するときは、名前とデータ型を指定する必要があります。

00:06:17.000 -> 00:06:23.000
パラメータは、Bool、string、floatなどの標準データ型にすることができます。

00:06:23.000 -> 00:06:32.000
設定したいカスタムデータ型がある場合は、それをエンティティにすることができ、パラメータとして飾ることができます。

00:06:32.000 -> 00:06:38.000
エンティティとアプリインテントの詳細については、「アプリインテントに飛び込む」セッションをご覧ください。

00:06:38.000 -> 00:06:44.000
フォーカスフィルターを定義するときは、各パラメータのデータ型と名前のみを指定します。

00:06:44.000 -> 00:06:52.000
各フォーカス中に適用されるパラメータの値を設定するのはユーザー次第です。

00:06:52.000 -> 00:06:57.000
パラメータはオプションとしてマークできるため、設定する必要はありません。

00:06:57.000 -> 00:07:03.000
オプションではないパラメータは、デフォルト値を指定する必要があります。

00:07:03.000 -> 00:07:15.000
コードでは、フォーカスフィルターで必要なタイプの変数を定義し、パラメータとして装飾することで、パラメータまたはオプションのパラメータを指定します。

00:07:15.000 -> 00:07:23.000
ここでは、フォーカスフィルターが常にダークモードを使用するかどうかを表す必要なブールパラメータを作成しました。

00:07:23.000 -> 00:07:25.000
デフォルトをfalseに設定しました。

00:07:25.000 -> 00:07:33.000
また、このフォーカス中にユーザーのステータスメッセージを表すオプションの文字列パラメータも作成しました。

00:07:33.000 -> 00:07:44.000
最後に、私のアプリによって定義されたエンティティであるオプションのアカウントパラメータを含めました。特定のアカウントに関する情報が含まれています。

00:07:44.000 -> 00:07:54.000
これら3つのパラメータすべてに設定されているタイトルは、ユーザーにパラメータを記述するために設定に表示されます。

00:07:54.000 -> 00:08:02.000
フォーカス設定では、ユーザーがアプリのフォーカスフィルターを設定すると、先ほど示したものと同様のグリッドで表示されます。

00:08:02.000 -> 00:08:11.000
しかし、今回は、フィルターがすでに設定されているため、構成されたものを反映するためにコンテンツは動的です。

00:08:11.000 -> 00:08:14.000
ここのアイコンはまだあなたのアプリのアイコンです。

00:08:14.000 -> 00:08:24.000
プライマリテキストとセカンダリテキストは、FocusFilterIntentの表示表現プロパティを使用してカスタマイズできます。

00:08:24.000 -> 00:08:34.000
プライマリテキストは、アカウントの選択、ステータスの設定など、設定されたパラメータを表す必要があります。

00:08:34.000 -> 00:08:43.000
セカンダリテキストは、ワークアカウントやワーキングなど、パラメータが何に設定されているかを表す必要があります。

00:08:43.000 -> 00:08:49.000
私のコードでは、表示表現を動的に生成するように設定しました。

00:08:49.000 -> 00:08:59.000
アカウントとステータスはオプションのパラメータであるため、実際に設定されている場合にのみ、動的なプライマリテキストとセカンダリテキストに含まれます。

00:08:59.000 -> 00:09:09.000
alwaysUseDarkModeは必須のパラメータであるため、常にプライマリテキストとセカンダリテキストに含まれています。

00:09:09.000 -> 00:09:17.000
さて、フォーカスフィルターを定義したので、ユーザーはフォーカス設定に移動し、特定のフォーカスの特定の値をカスタマイズできます。

00:09:17.000 -> 00:09:20.000
しかし、あなたのアプリは誰かがカスタマイズしたものをどうやって知ることができますか?

00:09:20.000 -> 00:09:23.000
そして、あなたのアプリはどのようにそれに応じて自分自身を更新できますか?

00:09:23.000 -> 00:09:26.000
システムからの変更に対して行動しなければならない。

00:09:26.000 -> 00:09:36.000
フォーカスの変更が発生し、システムがアプリがこの変更について知ることが重要であると判断した場合、2つの方法のいずれかでこの情報を配信します。

00:09:36.000 -> 00:09:44.000
アプリが実行されている場合、それを実装している場合は、FocusFilterIntentでperformメソッドへの呼び出しを受け取ります。

00:09:44.000 -> 00:09:49.000
アプリが実行されていない場合は、スピンアップする拡張機能を実装できます。

00:09:49.000 -> 00:09:58.000
繰り返しますが、FocusFilterIntentで実行を実装している場合は、拡張機能で呼び出されます。

00:09:58.000 -> 00:10:06.000
実行はアプリまたは拡張機能のいずれかで呼び出される可能性があるため、すべてのアプリが拡張機能を必要とするわけではありません。

00:10:06.000 -> 00:10:18.000
通常、アプリがフォーカス遷移に応答して独自のビューを更新している場合は、アプリ内だけでパフォーマンスを実装するだけで十分です。

00:10:18.000 -> 00:10:29.000
アプリのウィジェット、通知、またはバッジをフォーカスの移行に基づいて変更する必要がある場合は、拡張機能の実装を検討することをお勧めします。

00:10:29.000 -> 00:10:37.000
基本的に、アプリが独自のビュー以外のものを更新したい場合は、拡張機能を実装する必要があります。

00:10:37.000 -> 00:10:47.000
このセッションの残りの部分では、「あなたのアプリ」を参照するかもしれませんが、このコンテキストに応じて、アプリまたは拡張機能のいずれかを意味する場合があります。

00:10:47.000 -> 00:11:02.000
フォーカスフィルターに応答するには、実行機能を実装し、設定を介して提供されたパラメータの入力された値にアクセスし、これらの値を使用してアプリのビューと動作を更新します。

00:11:02.000 -> 00:11:10.000
実行の実装は、システムがアプリがフォーカス遷移に応答する必要があると判断したときに呼び出されます。

00:11:10.000 -> 00:11:18.000
実行は、システムが以前に配信された値がもはや関連性がないと判断したときに呼び出されます。

00:11:18.000 -> 00:11:24.000
この場合、フォーカスフィルターパラメータはデフォルト値で設定されます。

00:11:24.000 -> 00:11:32.000
アプリのフォーカスフィルターで実行が呼び出されると、設定で設定されたものと一致するように、すべてのパラメータの値が入力されます。

00:11:32.000 -> 00:11:39.000
名前付きパラメータの値は、self.「パラメータの名前」を呼び出すことで読み取ることができます。

00:11:39.000 -> 00:11:46.000
この例では、実行の最後に、受信したデータでアプリを更新します。

00:11:46.000 -> 00:11:50.000
場合によっては、現在のフォーカスフィルターパラメータを照会する必要があるかもしれません。

00:11:50.000 -> 00:12:02.000
私の場合、私のフィルターはExampleChatAppFocusFilterと呼ばれているので、ExampleChatAppFocus Filter.currentにアクセスします。

00:12:02.000 -> 00:12:16.000
アプリがフォーカスフィルターで機能できるようになったので、次のステップは、アプリの動作がどのようにシステムに戻ったかについて追加のコンテキストを提供することで、ユーザーエクスペリエンスをさらに高めることです。

00:12:16.000 -> 00:12:22.000
追加のコンテキストを提供することで、アプリのビューの外でアプリの動作に影響を与えることができます。

00:12:22.000 -> 00:12:30.000
この例としては、通知のフィルタリングやアプリの通知バッジ数の設定などがあります。

00:12:30.000 -> 00:12:35.000
システム情報を提供する1つの方法は、App Contextオブジェクトを使用することです。

00:12:35.000 -> 00:12:41.000
これは、実行関数の結果の一部として返すことができるオブジェクトです。

00:12:41.000 -> 00:12:50.000
または、フォーカスフィルターでいつでもアプリコンテキストを返し、invalidateを呼び出すことでシステムに更新された値を強制的に取得することもできます。

00:12:50.000 -> 00:13:00.000
フォーカスフィルターがアクティブな場合、アプリは特定の通知がユーザーを中断すべきではないかどうかを判断するための追加のコンテキストを持つ場合があります。

00:13:00.000 -> 00:13:08.000
この情報を渡すには、アプリはAppContextでfilterPredicateプロパティを設定する必要があります。

00:13:08.000 -> 00:13:17.000
このフィルタ述語は、UNNotificationのfilterCriteriaと呼ばれる新しい文字列プロパティと連携して機能します。

00:13:17.000 -> 00:13:26.000
通知のフィルター基準がフィルター述語と一致しない場合、通知は消音されます。

00:13:26.000 -> 00:13:32.000
FocusFilterIntentからフィルター述語を設定するには、アプリコンテキストに含めます。

00:13:32.000 -> 00:13:46.000
デバイスでパーソナルフォーカスが有効になっており、ユーザーが個人アカウントのみが選択されるように設定したとします。この場合、フィルター述語を個人アカウントの識別子に設定します。

00:13:46.000 -> 00:13:53.000
受信通知が個人アカウントからのものでない場合は、ユーザーを中断すべきではありません。

00:13:53.000 -> 00:14:00.000
ここでは、この通知を設定するときに、filterCriteriaを作業アカウントの識別子に設定します。

00:14:00.000 -> 00:14:19.000
これは、この通知が仕事用アカウントに送信されていることを知っているためであり、アカウント識別子が個人アカウントの識別子とのみ一致する設定した述語と一致しないため、この通知が消音されることを期待しています。

00:14:19.000 -> 00:14:29.000
この例はローカル通知用ですが、リモート通知のJSONペイロードでフィルター基準を設定することもできます。

00:14:29.000 -> 00:14:39.000
システムに追加のコンテキストを提供するもう1つの方法は、現在有効になっているフォーカス中に重要なことを反映するようにアプリのバッジ数を更新することです。

00:14:39.000 -> 00:14:42.000
これにより、ユーザーの気を散らすのを防ぎます。

00:14:42.000 -> 00:14:47.000
この目的のために、UserNotificationsに新しいAPIがあります。

00:14:47.000 -> 00:14:57.000
UNUserNotificationCenterでは、新しいバッジ値を表す符号なし整数でsetBadgeCountを呼び出すだけです。

00:14:57.000 -> 00:15:02.000
これで、通知をフィルタリングしたり、バッジ数を設定したりするための追加のコンテキストを提供する方法を知っています。

00:15:02.000 -> 00:15:08.000
この機能の目標は、ユーザーが集中しているときに、ユーザーにとって最も関連性の高いものを表面化することです。

00:15:08.000 -> 00:15:16.000
フォーカスが有効になっているときに気晴らしを防ぐために、無関係なコンテンツを最小限に抑える必要がある場合があります。

00:15:16.000 -> 00:15:34.000
次のステップでは、アプリのどの部分がフォーカスフィルターの恩恵を受けるかを検討し、設定できるプロパティを決定し、これを処理するためにアプリと拡張機能を設定し、追加のコンテキストを提供するかどうかを評価してさらに一歩進めることをお勧めします。

00:15:34.000 -> 00:15:36.000
フォーカスフィルターはそれだけです!

00:15:36.000 -> 00:15:40.000
このセッションにご参加いただきありがとうございます。WWDCの残りの時間をお過ごしください。

00:15:40.000 -> 23:59:59.000
♪

