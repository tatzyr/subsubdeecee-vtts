WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:18.000
みなさん、こんにちは。私の名前はエリックです。Unityゲームにアクセシビリティを追加する方法を教えて嬉しいです。

00:00:18.000 --> 00:00:22.000
アクセシビリティとは、誰もが当社の製品を使用できるようにすることです。

00:00:22.000 --> 00:00:31.000
そして今日は、Unity開発者向けのAppleアクセシビリティプラグインで、アクセシブルなゲームに大きな飛躍を遂げました。

00:00:31.000 --> 00:00:37.000
私たちはあなたのゲームにアクセスできるようにするための3つのApple技術に焦点を当てます。

00:00:37.000 --> 00:00:43.000
VoiceOverは、視覚に障がいのあるユーザーや弱視のユーザーを支援するスクリーンリーダーです。

00:00:43.000 --> 00:00:51.000
画面上のアイテムを読み取り、ユーザーがコントロールを操作するためのカスタムジェスチャーを提供します。

00:00:51.000 --> 00:00:59.000
スイッチ制御は、低いモータ制御を持つ人がデバイスの相互作用のために外部スイッチを使用することを可能にします。

00:00:59.000 --> 00:01:07.000
そして、動的タイプは、人々が自分の読書能力に応じてテキストサイズを設定することを可能にします。

00:01:07.000 --> 00:01:17.000
開始するには、リポジトリのクローンを作成し、リポジトリのルートにあるビルドスクリプトを使用してすべてのAppleプラグインをビルドします。

00:01:17.000 --> 00:01:23.000
これにより、Unityプロジェクトに統合する準備ができているビルドフォルダが生成されます。

00:01:23.000 --> 00:01:30.000
最後に、Unity Package Managerを使用して、アクセシビリティプラグインを自分のプロジェクトに追加します。

00:01:30.000 --> 00:01:50.000
詳細については、リポジトリのドキュメントを見て、「プラグインとプレイ：UnityゲームプロジェクトにAppleフレームワークを追加する」と呼ばれるAppleのすべてのUnityプラグインに関するビデオをご覧ください。プラグインがわかったので、3つの分野をご案内します。

00:01:50.000 --> 00:01:53.000
まず、アクセシビリティ要素です。

00:01:53.000 --> 00:02:00.000
これにより、ゲームのVoiceOverやスイッチコントロールなどの支援技術にサポートを追加できます。

00:02:00.000 --> 00:02:03.000
次はダイナミックタイプです。

00:02:03.000 --> 00:02:10.000
ユーザーの好みに応じてテキストをスケーリングするのに役立つ、この使いやすいユーティリティを作成します。

00:02:10.000 --> 00:02:13.000
そしてUIの宿泊施設。

00:02:13.000 --> 00:02:18.000
これらは、他のユーザーの好みを読むのに役立つユーティリティです。

00:02:18.000 --> 00:02:22.000
アクセシビリティの要素から始めましょう。

00:02:22.000 --> 00:02:27.000
私はこの概念を説明するのに役立つシンプルなカードゲームを作りました。

00:02:27.000 --> 00:02:33.000
「フリップ」ボタンをタップして、ランダムなカードを2枚引く必要があることがわかります。

00:02:33.000 --> 00:02:44.000
しかし、VoiceOverは画面上のテキストを読み取りませんし、これらは現在画面上の単なるピクセルであるため、外部スイッチはボタンをタップしません。

00:02:44.000 --> 00:02:49.000
私たちは、システムが対話できるものを理解するのを助ける必要があります。

00:02:49.000 --> 00:02:57.000
アクセシビリティ要素は、支援技術が相互作用できるものを定義します。

00:02:57.000 --> 00:03:03.000
画面上のテキスト、カード、ボタンはアクセシビリティ要素でなければなりません。

00:03:03.000 --> 00:03:07.000
そして、各要素をラベルで記述することができます。

00:03:07.000 --> 00:03:14.000
VoiceOverは各ラベルを読み取るので、ユーザーは画面に何があるかを理解できます。

00:03:14.000 --> 00:03:21.000
また、ゲームが複数の言語をサポートしている場合は、これらのラベルもローカライズする必要があります。

00:03:21.000 --> 00:03:29.000
これで、VoiceOverは画面上にあるものを記述できますが、タップできるボタンがあることを認識しません。

00:03:29.000 --> 00:03:36.000
「特性」と呼ばれる別のプロパティを使用して、要素のタイプをシステムに通知できます。

00:03:36.000 --> 00:03:39.000
ここに「ボタン」の特性を追加する必要があります。

00:03:39.000 --> 00:03:48.000
これで、VoiceOverは「フリップボタン」と読み、外部スイッチがこのボタンを制御できます。

00:03:48.000 --> 00:03:53.000
テキスト要素に「静的テキスト」特性を追加することもできます。

00:03:53.000 --> 00:04:04.000
「静的テキスト」特性は、通常、VoiceOverがより良いテキストインタラクション体験を提供できるように、ラベルとテキスト領域に与えられます。

00:04:04.000 --> 00:04:11.000
そして、「ボタン」や「静的テキスト」以外にも、探索できる多くの特徴があります。

00:04:11.000 --> 00:04:15.000
では、カードにどのような特性を使うべきですか?

00:04:15.000 --> 00:04:21.000
さて、すべてのアクセシビリティ要素に特性を使用する必要はありません。

00:04:21.000 --> 00:04:25.000
私たちのカードには特徴は必要ありません。

00:04:25.000 --> 00:04:33.000
しかし、各カードには、VoiceOverが認識していない部分がまだあります。額面です。

00:04:33.000 --> 00:04:39.000
「値」と呼ばれる、これに使用できる別のプロパティがあります。

00:04:39.000 --> 00:04:51.000
各カードに「値」を追加すると、VoiceOverは「クラブの値3を持つカード1、クラブの値エースを持つカード2」と読みます。

00:04:51.000 --> 00:04:54.000
そして、それだけです。

00:04:54.000 --> 00:05:02.000
基本を理解したので、Unityを開いて、プロジェクトに追加する方法を見てみましょう。

00:05:02.000 --> 00:05:05.000
ここで私はこのゲームのUnityエディターにいます。

00:05:05.000 --> 00:05:11.000
私はすでにこのプロジェクトにAppleアクセシビリティプラグインを追加しました。

00:05:11.000 --> 00:05:19.000
まず、カメラ、ダイレクトライト、UIキャンバスなどの通常のシーンオブジェクトがあります。

00:05:19.000 --> 00:05:24.000
キャンバスの下には、2つのテキスト要素とボタンがあります。

00:05:24.000 --> 00:05:31.000
その後、カード用のゲームオブジェクトが2つあります。

00:05:31.000 --> 00:05:39.000
それぞれが2つのメッシュコンポーネントで構成されており、それぞれが両側のカードの前面と背面のテクスチャをレンダリングします。

00:05:39.000 --> 00:05:44.000
アクセシビリティ要素を定義することから始めましょう。

00:05:44.000 --> 00:05:50.000
これを行うには、このプラグインのアクセシビリティノードコンポーネントが必要です。

00:05:50.000 --> 00:05:57.000
アクセス可能な階層内のすべてのオブジェクトを選択します。

00:05:57.000 --> 00:06:06.000
そして、アクセシビリティノードコンポーネントを追加して、それらをアクセシビリティ要素にします。

00:06:06.000 --> 00:06:09.000
次に、ラベルを追加します。

00:06:09.000 --> 00:06:19.000
カードオブジェクトを選択し、右側の「アクセシビリティノード」コンポーネントに移動し、「ラベル」フィールドを見つけます。

00:06:19.000 --> 00:06:26.000
また、カスタムラベルを提供するために、ラベルフィールドのチェックボックスがチェックされていることを確認してください。

00:06:26.000 --> 00:06:31.000
次に、「カード1」と入力します。

00:06:31.000 --> 00:06:40.000
カード2も同様です。

00:06:40.000 --> 00:06:52.000
テキストとボタンにはラベルも必要ですが、Unity UIの標準コントロールを使用している場合は、明示的なアクセシビリティラベルを提供する必要はありません。

00:06:52.000 --> 00:06:57.000
プラグインにはすでにそれらのデフォルトの実装があります。

00:06:57.000 --> 00:07:02.000
次に、ボタンに特性を追加する必要があります。

00:07:02.000 --> 00:07:13.000
フリップボタンを選択し、「特性」を「なし」から「ボタン」に変更します。

00:07:13.000 --> 00:07:18.000
2つのテキスト要素を選択してください...

00:07:18.000 --> 00:07:23.000
そして、「特性」を「静的テキスト」に変更します。

00:07:23.000 --> 00:07:25.000
すごい。

00:07:25.000 --> 00:07:29.000
最後に、カードフェイスのアクセシビリティ値を設定する必要があります。

00:07:29.000 --> 00:07:37.000
カードはランダムに描画されるため、値を動的に設定するためのスクリプトを追加する必要があります。

00:07:37.000 --> 00:07:44.000
2枚のカードを選択し、AccessibleCardという新しいスクリプトを追加します。

00:07:44.000 --> 00:07:53.000
まず、私の他のCシャープファイルの1つで、私はすでにトランプと呼ばれるすべてのカードフェイスの列挙型を持っています。

00:07:53.000 --> 00:08:05.000
私の新しいAccessibleCardモノラルビヘイビアスクリプトでは、カードタイプの変数と、カードが上を向いているか下を向いているかのブール値があります。

00:08:05.000 --> 00:08:10.000
それでは、これらのカードにaccessibilityValueを追加しましょう。

00:08:10.000 --> 00:08:17.000
まず、accessibilityNodeコンポーネントをこのgameObjectに添付します。

00:08:17.000 --> 00:08:25.000
次に、accessibilityValueデリゲートをカードの額面を動的に返す関数に設定します。

00:08:25.000 --> 00:08:32.000
この機能内では、カードがカバーされている場合は、accessibilityValueの「カバー」を返します。

00:08:32.000 --> 00:08:41.000
または、カバーされていない場合は、すべてのカードフェイスを列挙し、「スペードのエース」のように、それぞれの説明を返します。

00:08:41.000 --> 00:08:44.000
そして、それだけです。

00:08:44.000 --> 00:08:48.000
では、私たちのプロジェクトを構築し、それを実際に見てみましょう。

00:08:48.000 --> 00:08:55.000
これが私たちのゲームです。VoiceOverをオンにしましょう。

00:08:55.000 --> 00:08:57.000
自動音声：VoiceOverがオン。エリックのゲーム。

00:08:57.000 --> 00:08:59.000
カード2、カバー。

00:08:59.000 --> 00:09:03.000
エリック：右にスワイプして次の要素に移動できます。

00:09:03.000 --> 00:09:07.000
自動音声:カード1、カバー。

00:09:07.000 --> 00:09:10.000
エリックのカードゲーム。

00:09:10.000 --> 00:09:14.000
カードをひっくり返す。

00:09:14.000 --> 00:09:16.000
フリップ。ボタン。

00:09:16.000 --> 00:09:23.000
エリック：5つのオブジェクトすべてがVoiceOverからアクセスできるようになりました。これは素晴らしいことです。

00:09:23.000 --> 00:09:28.000
VoiceOverがオンのときにボタンをタップするには、ダブルタップします。

00:09:28.000 --> 00:09:30.000
自動音声:フリップ。

00:09:30.000 --> 00:09:34.000
エリック：カードをもう一度確認しましょう。

00:09:34.000 --> 00:09:38.000
自動音声:カード1、クラブの2つ。

00:09:38.000 --> 00:09:40.000
カード2、クラブのエース。

00:09:40.000 --> 00:09:45.000
エリック：VoiceOverは、更新されたカードの文字盤を正しく読み取るようになりました。

00:09:45.000 --> 00:09:46.000
かっこいい。

00:09:46.000 --> 00:09:52.000
だから、私たちは今、それに恋をすることができる何百万人ものVoiceOverユーザーがゲームにアクセスできるようにしました。

00:09:52.000 --> 00:09:57.000
そして、外部スイッチコントロールを使用する人々も私たちのゲームをプレイすることができます。

00:09:57.000 --> 00:10:00.000
それがアクセシビリティの要素でした。

00:10:00.000 --> 00:10:04.000
次に、ダイナミックタイプについて話しましょう。

00:10:04.000 --> 00:10:11.000
テキストが小さすぎて読めないので、ゲームは多くの人にとってプレイするのが難しい場合があります。

00:10:11.000 --> 00:10:20.000
iOSとtvOSでは、誰もが設定で自分の読書能力に適したテキストサイズを選択できます。

00:10:20.000 --> 00:10:30.000
アクセシビリティプラグインを使用すると、この設定を読んで、ゲーム内のテキストが期待されるサイズで表示されていることを確認できます。

00:10:30.000 --> 00:10:36.000
ゲームの例を見て、ダイナミックタイプを使用する方法を見てみましょう。

00:10:36.000 --> 00:10:41.000
DynamicTextSize.csというモノラルビヘイビアスクリプトを作成します。

00:10:41.000 --> 00:10:47.000
開始関数で、まずデフォルトのテキストサイズを変数に格納します。

00:10:47.000 --> 00:10:57.000
次に、OnEnable関数内で、AccessibilitySettingsを使用して変更されたイベントの設定を購読します。onPreferredTextSizesChanged。

00:10:57.000 --> 00:11:03.000
これにより、ユーザーがテキスト設定を変更するとすぐにUIを更新できます。

00:11:03.000 --> 00:11:11.000
次に、settingsChanged関数内で、まずPreferredContentSizeMultiplierを読みます。

00:11:11.000 --> 00:11:18.000
次に、元のテキストサイズを掛けて、テキスト要素に割り当てます。

00:11:18.000 --> 00:11:25.000
Unity Editor内で、テキスト要素を持つすべてのゲームオブジェクトを選択します。

00:11:25.000 --> 00:11:32.000
そして、作成したばかりのDynamicTextSizeコンポーネントを追加します。

00:11:32.000 --> 00:11:37.000
今、私たちのゲームはすべてダイナミックタイプのサポートのために設定されています。

00:11:37.000 --> 00:11:45.000
アクションの結果を見る前に、まずあなたのゲームでダイナミックタイプをすばやくテストするトリックをお見せします。

00:11:45.000 --> 00:11:54.000
設定を開き、コントロールセンターを見つけます。

00:11:54.000 --> 00:12:02.000
テキストサイズが表示されるまで下にスクロールし、コントロールセンターに追加します。

00:12:02.000 --> 00:12:17.000
これで、コントロールセンターを開き、テキストサイズオプションを変更することで、テキストサイズをすばやく調整できます。

00:12:17.000 --> 00:12:24.000
素晴らしい - テキストサイズを変更すると、私たちのゲームはリアルタイムでフォントサイズを調整します。

00:12:24.000 --> 00:12:30.000
コントロールセンターに表示されているテキストのパーセンテージ値は、まさにその乗数から読んでいるものです。

00:12:30.000 --> 00:12:35.000
この設定は、テキスト以外のオブジェクトにも採用できます。

00:12:35.000 --> 00:12:45.000
たとえば、サイズが大きくなると、カードフェイスアセットをラージプリントに交換できます。

00:12:45.000 --> 00:12:50.000
まず、DynamicCardFacesというスクリプトを作成します。

00:12:50.000 --> 00:12:55.000
その後、以前と同じように、TextSizeChangedイベントを購読します。

00:12:55.000 --> 00:13:05.000
乗数を読む代わりに、コントロールセンタースライダーのティックにマッピングされたテキストサイズのカテゴリの列挙型を読みました。

00:13:05.000 --> 00:13:11.000
誰かがより大きなテキストサイズを選択するたびに、アセットを交換できます。

00:13:11.000 --> 00:13:17.000
そして、私は単に通常の素材と大きな印刷素材のどちらかを選択します。

00:13:17.000 --> 00:13:26.000
さて、本当に大きなサイズを選ぶと...

00:13:26.000 --> 00:13:36.000
ユーザーは、低視力の人にとってはるかに読みやすい素晴らしいカードの顔であるカードの大きな印刷版を見るでしょう。

00:13:36.000 --> 00:13:44.000
最後に、このプラグインでアクセスできるUIの宿泊施設設定についてお話ししたいと思います。

00:13:44.000 --> 00:13:48.000
最初の設定は透明性を下げることです。

00:13:48.000 --> 00:13:56.000
この設定をオンにすると、ぼかしや透明効果ではなく、背景が不透明になります。

00:13:56.000 --> 00:14:02.000
これらの効果がテキストを読みにくくする場合、読みやすさを向上させるのに役立ちます。

00:14:02.000 --> 00:14:10.000
この設定を確認するには、AccessibilitySettingsに電話してください。IsReduceTransparencyEnabled。

00:14:10.000 --> 00:14:13.000
次に、コントラストを増やす設定。

00:14:13.000 --> 00:14:24.000
スイッチが目立ちやすく、デバイス全体でコントロールを認識しやすくするダークグレーがあることに注目してください。

00:14:24.000 --> 00:14:37.000
AccessibilitySettingsを使用してこの設定をチェックすることで、これが有効になっている場合、自分のUIのコントラストを上げることができます。IsIncreaseContrastEnabled。

00:14:37.000 --> 00:14:40.000
次に、Reduce Motionの設定です。

00:14:40.000 --> 00:14:46.000
このカードフリップアニメーションのように、動きに敏感な人もいます。

00:14:46.000 --> 00:14:51.000
Reduce Motionが有効になっている場合は、そのアニメーションを削除する必要があります。

00:14:51.000 --> 00:14:55.000
これを行うためのコードを見てみましょう。

00:14:55.000 --> 00:15:00.000
CardControllerスクリプトには、このフリップ機能があります。

00:15:00.000 --> 00:15:05.000
まず、ユーザーの減速モーション設定がオンになっているかどうかを確認します。

00:15:05.000 --> 00:15:12.000
オンでない場合は、コルーチンを介してアニメーションを呼び出すことでカードを反転する必要があります。

00:15:12.000 --> 00:15:16.000
それ以外の場合は、回転を設定するだけで、アニメーションはありません。

00:15:16.000 --> 00:15:17.000
そして、それだけです。

00:15:17.000 --> 00:15:23.000
今、動きに敏感な人々は私たちのゲームを楽しむでしょう。

00:15:23.000 --> 00:15:33.000
要約すると、このセッションのリソースにリンクされているGitHubリポジトリを複製して、Apple Accessibilityプラグインを使い始めましょう。

00:15:33.000 --> 00:15:40.000
アクセシビリティ要素を追加して、人々があなたのゲームでVoiceOverとスイッチコントロールを使用できるようにします。

00:15:40.000 --> 00:15:44.000
ダイナミックタイプでテキストサイズを調整します。

00:15:44.000 --> 00:15:51.000
そして、誰もがあなたのゲームで素晴らしい体験をできるように、UIの宿泊施設を確認してください。

00:15:51.000 --> 00:15:53.000
参加してくれて本当にありがとう。

00:15:53.000 --> 23:59:59.000
私たちは、あなたが素晴らしいアクセシビリティ体験で誰もがゲームを利用できるようにする方法を楽しみにしています。

