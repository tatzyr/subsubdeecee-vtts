WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:14.000
こんにちは、私の名前はダニエルで、セキュリティエンジニアリングとアーキテクチャチームに所属しています。

00:00:14.000 -> 00:00:18.000
エンドポイントセキュリティの最新情報をお伝えします。

00:00:18.000 -> 00:00:23.000
エンドポイントセキュリティは、当社が提供するAPIであるため、Mac用のセキュリティ製品を構築できます。

00:00:23.000 -> 00:00:33.000
これはC APIであり、サードパーティのアンチウイルス、エンドポイントの検出と応答、およびデータ漏洩防止ソリューションに豊富なセキュリティイベントストリームを提供します。

00:00:33.000 -> 00:00:45.000
廃止されたKAuth KPI、サポートされていないMACカーネルフレームワーク、および廃止されたOpenBSM監査証跡に代わるものとして、macOS Catalinaにエンドポイントセキュリティを最初に導入しました。

00:00:45.000 -> 00:00:53.000
この機能をエンドポイントセキュリティAPIで利用可能にすることで、カーネル拡張機能を開発する必要性がなくなった。

00:00:53.000 -> 00:00:56.000
エンドポイントセキュリティの導入は大成功を収めています。

00:00:56.000 -> 00:01:02.000
私たちは、受け取った肯定的なフィードバックと、それが可能にしているセキュリティ製品に興奮しています。

00:01:02.000 -> 00:01:10.000
エンドポイントセキュリティの紹介については、WWDC 2020セッション「エンドポイントセキュリティアプリの構築」を参照してください。

00:01:10.000 -> 00:01:20.000
このセッションでは、macOS Venturaで追加された新しいイベント、ミュート機能の改善、およびesloggerと呼ばれる新しいユーティリティについて説明します。

00:01:20.000 -> 00:01:23.000
新しいイベントから始めましょう。

00:01:23.000 -> 00:01:28.000
macOS Montereyの時点で、Endpoint Securityは100以上のイベントタイプをサポートしています。

00:01:28.000 -> 00:01:36.000
これまで、これらのイベントは、プロセスのフォークやファイルを開くなど、カーネル内で発生する重要なイベントに焦点を当てていました。

00:01:36.000 -> 00:01:44.000
macOS Venturaでは、ユーザー空間で発生するセキュリティ関連のイベントを含むように、観測可能なイベントのセットを拡張しています。

00:01:44.000 -> 00:01:52.000
具体的には、認証、ログインとログアウト、GatekeeperのXProtectの可視性を追加しています。

00:01:52.000 -> 00:01:59.000
新しい認証イベントは、ユーザーがオペレーティングシステムに認証する状況をカバーしています。

00:01:59.000 -> 00:02:08.000
これには、ローカルユーザーアカウントへのログインだけでなく、管理者として操作を承認するなど、他の場所での認証も含まれます。

00:02:08.000 -> 00:02:14.000
これらのイベントは、通常、疑わしいアクセスパターンを観察したいセキュリティ製品によって使用されます。

00:02:14.000 -> 00:02:26.000
以前は、認証イベントを観察したい場合は、非推奨のOpenBSM監査証跡に頼らなければなりませんでした。これはもう必要なくなります。

00:02:26.000 -> 00:02:38.000
そして、監査相手と比較して、これらの新しいイベントは情報がはるかに豊富で、監査では利用できなかったApple Watchを使用した自動ロック解除の可視性も提供します。

00:02:38.000 -> 00:02:43.000
同様に、ユーザーセッションに可視性を追加しています。

00:02:43.000 -> 00:02:54.000
ログインイベントは、コンソールでローカルに、またはサポートされているリモートアクセス方法の1つを介してリモートで、誰かまたは何かがシステムにログオンする状況をカバーしています。

00:02:54.000 -> 00:03:00.000
これらのイベントは、OpenBSM監査証跡で利用可能なものを大幅に超えています。

00:03:00.000 -> 00:03:09.000
これにより、エンタープライズフリート全体の横方向の移動など、システムへのアクセスをより包括的に可視化できます。

00:03:09.000 -> 00:03:14.000
ゲートキーパーの使命の一部は、既知の悪意のあるソフトウェアを検出してブロックすることです。

00:03:14.000 -> 00:03:25.000
macOS Ventura以降、Endpoint Securityは、悪意のあるソフトウェアの検出と、悪意のあるソフトウェアを停止および削除するためのアクションの両方を可視化します。

00:03:25.000 -> 00:03:29.000
この情報は、以前は構造化された方法では利用できませんでした。

00:03:29.000 -> 00:03:33.000
エンドポイントセキュリティAPIを通じて利用可能になりました。

00:03:33.000 -> 00:03:42.000
これらの追加により、ほとんどのエンドポイントセキュリティクライアントは、非推奨のOpenBSM監査証跡に頼る必要がなくなります。

00:03:42.000 -> 00:03:49.000
監査証跡はmacOS Big Sur以降非推奨となり、macOSの将来のバージョンで削除される予定です。

00:03:49.000 -> 00:03:52.000
ミュートに移りましょう。

00:03:52.000 -> 00:03:59.000
macOS Catalina以降、監査トークンまたは実行可能イメージパスによるミュートプロセスをサポートしてきました。

00:03:59.000 -> 00:04:10.000
ミュートは、デッドロック、ハング、ウォッチドッグタイムアウトを防止し、エンドポイントセキュリティに基づいてソリューションのパフォーマンスへの影響を管理するための重要なツールです。

00:04:10.000 -> 00:04:21.000
昨年のmacOS Montereyでは、デフォルトで実行可能ファイルの小さなセットのいくつかのイベントタイプをミュートすることで、システムの不安定性の頻繁な原因に対処し始めました。

00:04:21.000 -> 00:04:28.000
ミュートを解除することは自由ですが、システムの安定性のためにミュートにしておくことをお勧めします。

00:04:28.000 -> 00:04:35.000
macOS Venturaでは、ターゲットパスに基づいてミュートを導入することで、ミュートをさらに一歩進めています。

00:04:35.000 -> 00:04:40.000
多くの実際のユースケースでは、これはミュートよりもメスのような精度を可能にします。

00:04:40.000 -> 00:04:49.000
アプリケーションが受信に興味がない特定のパスまたはパスプレフィックスに関連するファイルイベントをミュートできるようになりました。

00:04:49.000 -> 00:04:59.000
これは、ログファイルのイベントに興味がないときに、/var/logの下にターゲットパスを持つすべてのイベントをミュートする方法を示しています。

00:04:59.000 -> 00:05:09.000
2番目の例は、es_mute_path_eventsを使用して、/dev/nullなどの単一のファイルへの書き込みイベントのみをミュートする方法を示しています。

00:05:09.000 -> 00:05:14.000
さらに、ミュートロジックを反転させる可能性も導入しています。

00:05:14.000 -> 00:05:24.000
指定されたプロセス、実行可能パス、またはターゲットパスに基づいてイベントを抑制する代わりに、これら3種類のミュートのいずれかを反転できるようになりました。

00:05:24.000 -> 00:05:35.000
実際には、関心のあるプロセス、実行可能パス、またはターゲットパスを選択して、ミュートしたイベントを一致させるのではなく、一致するイベントのみを受信できるようになりました。

00:05:35.000 -> 00:05:42.000
たとえば、これにより、特定の永続性の場所に対してのみファイルイベントを選択できるようになりました。

00:05:42.000 -> 00:05:48.000
Es_invert_mutingを使用してターゲットパスのミュートを反転させる方法は次のとおりです。

00:05:48.000 -> 00:05:58.000
次に、ミュートセットから既存のターゲットパスを削除し、関心のあるターゲットパスプレフィックスを持つイベントのみを選択します。

00:05:58.000 -> 00:06:09.000
これにより、ミュート戦略が大幅に改善され、最終的にはエンドポイントセキュリティに基づく製品で優れたユーザーエクスペリエンスを簡単に提供できることを期待しています。

00:06:09.000 -> 00:06:12.000
そして最後に、esloggerを導入します。

00:06:12.000 -> 00:06:20.000
ネイティブクライアントを記述することなく、エンドポイントセキュリティイベントを提供する機能について多くの要求がありました。

00:06:20.000 -> 00:06:31.000
macOS Venturaから、OSに深い内省をもたらすコマンドラインユーティリティを介して、エンドポイントセキュリティのパワーを活用することができます。

00:06:31.000 -> 00:06:42.000
esloggerは、特定のイベントのエンドポイントセキュリティイベントストリームをタップし、JSON形式のイベントデータを標準出力または統合ロギングシステムに出力します。

00:06:42.000 -> 00:06:47.000
データは、ネイティブクライアントが使用するC表現と同じように構造化されています。

00:06:47.000 -> 00:06:54.000
esloggerは、エンドポイントセキュリティがmacOS Venturaでサポートする80のNOTIFYイベントをすべてサポートしています。

00:06:54.000 -> 00:07:09.000
エスロガーが、エンドポイントセキュリティクライアントに取り組んでいるエンジニアだけでなく、macOSでセキュリティ関連のイベントを可視化する必要があるセキュリティアナリストやその他のセキュリティ実務家にとっても役立つことを願っています。

00:07:09.000 -> 00:07:15.000
esloggerはOSに同梱されており、すでにエンドポイントセキュリティの資格があります。

00:07:15.000 -> 00:07:29.000
すべてのエンドポイントセキュリティクライアントと同様に、esloggerはスーパーユーザーとして実行する必要があり、ユーザーはTerminal.appやSSHなどのフルディスクアクセスの責任あるプロセスを承認する必要があります。

00:07:29.000 -> 00:07:33.000
Esloggerは、アプリケーションで使用されることを意図していません。

00:07:33.000 -> 00:07:37.000
その出力はソフトウェアアップデートで変更される場合があります。

00:07:37.000 -> 00:07:46.000
これは、エンドポイントセキュリティAPIとのネイティブインターフェイスと同じパフォーマンス特性または同じ機能セットを提供するものではありません。

00:07:46.000 -> 00:07:51.000
アプリケーションは引き続きネイティブにインターフェースします。

00:07:51.000 -> 00:07:56.000
邪魔にならないように、esloggerを使って新しいイベントのいくつかを探索しましょう。

00:07:56.000 -> 00:08:10.000
esloggerを使用して、openssh_loginおよび_logoutイベントを購読し、出力をファイルにリダイレクトすることで、SSHセッションの開始と終了を記録します。

00:08:10.000 -> 00:08:18.000
この他のタブでは、SSHを使用してローカルにログインし、再度ログアウトしています。

00:08:18.000 -> 00:08:28.000
最初のタブに戻って、私はエスロガーを中断しています。

00:08:28.000 -> 00:08:34.000
エンドポイントセキュリティのイベントデータを生のJSON形式で見てみましょう。

00:08:34.000 -> 00:08:42.000
JSONデータを扱う自分の好きな方法がある可能性が非常に高いです。

00:08:42.000 -> 00:08:46.000
ここでは、jqを使用してイベントをさらに調査します。

00:08:46.000 -> 00:08:52.000
これはたくさんの情報です。

00:08:52.000 -> 00:08:55.000
私はいくつかの興味深い分野にドリルダウンします。

00:08:55.000 -> 00:09:01.000
すべてのエンドポイントセキュリティイベントと同様に、それらを放出したプロセスに関する情報があります。

00:09:01.000 -> 00:09:15.000
両方のイベントがSSHデーモンによって発行されたことがわかります。

00:09:15.000 -> 00:09:22.000
たとえば、監査トークンを検査して、イベントを発したプロセスのPIDを収集することもできます。

00:09:22.000 -> 00:09:34.000
そして最後に、これらのイベントのイベント固有のフィールドを見てみましょう。

00:09:34.000 -> 00:09:44.000
これは私のユーザーアカウントへのSSHログインに成功し、その後ログアウトしたことがわかります。

00:09:44.000 -> 00:09:55.000
悪意のあるソフトウェアの動作を観察したい場合でも、検出アプローチをすばやくプロトタイプ化したい場合でも、この方法でエンドポイントセキュリティイベントを可視化する方法が大好きです。

00:09:55.000 -> 00:10:03.000
お客様のセキュリティソリューションが新しいイベントと改善されたミュート機能を利用することを楽しみにしています。

00:10:03.000 -> 00:10:06.000
WWDCにご参加いただきありがとうございます。

00:10:06.000 -> 23:59:59.000
♪

