WEBVTT

00:00:00.000 -> 00:00:09.000
♪ ♪

00:00:09.000 -> 00:00:11.000
ジェイク：こんにちは、私の名前はジェイクです。

00:00:11.000 -> 00:00:16.000
私はAVKitチームのエンジニアであり、素晴らしいビデオ再生体験の作成を歓迎します。

00:00:16.000 -> 00:00:30.000
iOSとiPadOS 16では、まったく新しいルックアンドフィールをもたらす完全に新しいメディアプレーヤーをゼロから構築し、コンテンツに焦点を当て、より広い範囲のアプリに収まるように設計されています。

00:00:30.000 -> 00:00:40.000
また、この新しいメディアプレーヤーの使用をさらに直感的でシームレスに感じさせる多くの斬新なインタラクションモデルを組み込んでおり、あなたはそれを気に入ると思います。

00:00:40.000 -> 00:00:45.000
このセッションでは、新しいシステムメディアプレーヤーを深く掘り下げます。

00:00:45.000 -> 00:00:49.000
素晴らしい再生体験をデザインする方法を学びます。

00:00:49.000 -> 00:00:54.000
macOSとiOSにいくつかのエキサイティングな新しいビジュアルインテリジェンス機能が登場します。

00:00:54.000 -> 00:01:02.000
新しいメディアプレーヤーに付属するまったく新しいインタースティシャル体験を紹介し、tvOSから持ち込む新しいAPIをいくつか紹介します。

00:01:02.000 -> 00:01:08.000
そして最後に、AVKitの新機能、選択可能な再生速度についていきます。

00:01:08.000 -> 00:01:19.000
tvOS 15.0では、システムプレーヤーを再設計し、まったく新しいルックアンドフィール、およびシステムプレーヤーに多くの新機能と使いやすさの改善をもたらしました。

00:01:19.000 -> 00:01:21.000
さて、私たちはあなたの要求を聞きました。

00:01:21.000 -> 00:01:25.000
嬉しいことに、iOSシステムプレーヤーも刷新しました。

00:01:25.000 -> 00:01:35.000
ネイティブメディアプレーヤーを完全に再設計し、tvOSプレーヤーのルックアンドフィールを採用しましたが、タッチファーストデバイス用に再考しました。

00:01:35.000 -> 00:01:44.000
私たちはクロムを全面的に削除し、インターフェースがより広い範囲のアプリ内でネイティブに感じられるようにし、プレイヤーにより現代的な感触をもたらしました。

00:01:44.000 -> 00:01:47.000
私たちが行った変更のいくつかを深く掘り下げてみましょう。

00:01:47.000 -> 00:01:54.000
まず、プレイ/一時停止とスキップコントロールを前面と中央に持ち込み、対話をさらに簡単にしました。

00:01:54.000 -> 00:02:03.000
また、スキップ間隔を15秒から10秒に調整し、連続したスキップでどれだけ遠くまでジャンプしたかを簡単に追跡できるようにしました。

00:02:03.000 -> 00:02:08.000
次に、タイムラインの使いやすさも大幅に改善しました。

00:02:08.000 -> 00:02:12.000
タイムラインの現在の位置を示すスライダーノブを取り外します。

00:02:12.000 -> 00:02:17.000
代わりに、タイムラインはスライダーに沿ってどこからでも対話できるようになりました。

00:02:17.000 -> 00:02:20.000
ドラッグは、現在のタイムマーカーで開始する必要がなくなりました。

00:02:20.000 -> 00:02:24.000
これにより、行きたい場所を正確に見つけやすくなります。

00:02:24.000 -> 00:02:30.000
また、ビデオアスペクトコントロールを、ズームジェスチャーへのより直感的なピンチに置き換えました。すぐにお見せします。

00:02:30.000 -> 00:02:37.000
そしてもちろん、新しいUIはポートレートコンテンツにも最適です。

00:02:37.000 -> 00:02:47.000
iPadOSでは、プレーヤーはキーボード、トラックパッド、マウス、ゲームコントローラーなどを完全にサポートし、システムにシームレスに統合されます!

00:02:47.000 -> 00:02:56.000
また、コンテンツやいくつかの一般的なインタラクションをさらに簡単かつ直感的にナビゲートするコントロールと対話する新しい方法もいくつか追加しました。

00:02:56.000 -> 00:02:58.000
これらを見てみましょう。 

00:02:58.000 -> 00:03:01.000
まず、ビデオの塗りつぶしの側面を変更する新しい方法を追加しました。

00:03:01.000 -> 00:03:05.000
ピンチジェスチャーを使用して、利用可能なズームレベルを移動できるようになりました。

00:03:05.000 -> 00:03:10.000
つまむと、ディスプレイの安全なエリア内にビデオがもたらされます。

00:03:10.000 -> 00:03:13.000
ピンチアウトすると、ビデオがズームインされ、ディスプレイが完全にいっぱいになります。

00:03:13.000 -> 00:03:19.000
次に、最も一般的なインタラクションの1つである再生/一時停止をストリーミングします。

00:03:19.000 -> 00:03:25.000
コントロールが非表示になっていても、ディスプレイの中央をタップしてビデオを再生および一時停止できるようになりました。

00:03:25.000 -> 00:03:29.000
そして最後に、メディアのタイムラインをナビゲートする新しい方法を追加しました。

00:03:29.000 -> 00:03:37.000
スクロールビューで私たち全員が知っていて愛しているのと同じインタラクションを使用して、ビデオのどこからでもタイムラインをスクロールできるようになりました。

00:03:37.000 -> 00:03:47.000
ビデオフレームをスクロールし始めると、インターフェイスが削除され、最も関連性の高いUIのみが残り、コンテンツに焦点が置かれます。

00:03:47.000 -> 00:03:50.000
また、tvOSプレーヤーからいくつかの新機能をもたらしました。

00:03:50.000 -> 00:03:59.000
AVPlayerViewControllerは、フルスクリーンUI内からコンテンツタイトル、サブタイトル、および説明をネイティブに表示することをサポートするようになりました。

00:03:59.000 -> 00:04:04.000
AVMetadataItemsを既存のAVKit APIに渡すことで、これらのそれぞれに文字列を提供できます。

00:04:04.000 -> 00:04:07.000
これがどのように行われるか見てみましょう。

00:04:07.000 -> 00:04:13.000
デフォルトでは、タイトル、サブタイトル、およびコンテンツの説明は、メディアのメタデータから引き出されます。

00:04:13.000 -> 00:04:20.000
ただし、必要に応じて、AVPlayerItemのexternalMetadata APIを使用して、メディア内の値をオーバーライドできます。

00:04:20.000 -> 00:04:30.000
タイトルは、識別子commonIdentifierTitleを使用してAVMetadataItemを作成し、playerItems externalMetadataプロパティに追加することで追加できます。

00:04:30.000 -> 00:04:35.000
タイトルは、UIの乱雑さを避けるために、短くて説明的であるべきです。

00:04:35.000 -> 00:04:44.000
同様に、ここでは、識別子.iTunesMetadataTrackSubtitleを持つAVMetadataItemを作成して、サブタイトルを追加しました。

00:04:44.000 -> 00:04:51.000
サブタイトルはコンテンツタイトルの上に表示され、コンテンツを説明するいくつかの単語でなければなりません。

00:04:51.000 -> 00:04:56.000
最後に、識別子.commonIdentifierDescriptionで説明を追加できます。

00:04:56.000 -> 00:05:00.000
これにより、タイトルとサブタイトルの右側にシェブロンが表示されます。

00:05:00.000 -> 00:05:06.000
タイトルを選択すると、コンテンツの説明を含む情報パネルが表示されます。

00:05:06.000 -> 00:05:11.000
説明は、コンテンツに関する詳細情報を含むいくつかの文章でなければなりません。

00:05:11.000 -> 00:05:15.000
どこでもタップすると、情報パネルが閉じます。

00:05:15.000 -> 00:05:26.000
最後に、新しい合理化されたタッチファーストインタラクションモデルと他の多くの改善により、まったく新しいルックアンドフィールでiOSシステムプレーヤーを刷新しました。

00:05:26.000 -> 00:05:42.000
アプリでAVPlayerViewControllerを使用すると、システムプレーヤーを完全にサポートできます。ピクチャーインピクチャー、SharePlay、ビジュアル分析、ネイティブカタリストサポート、新しいハードウェアと機能のサポートなどをサポートします。

00:05:42.000 -> 00:05:46.000
そしてもちろん、これらすべてをわずか数行のコードで入手できます。

00:05:46.000 -> 00:05:52.000
では、アプリで素晴らしい再生体験をデザインする方法について話しましょう。

00:05:52.000 -> 00:06:04.000
システムメディアプレーヤーの再設計に着手したとき、私たちは過去に構築したものや、他のプラットフォーム用に構築したものから一歩後退し、「何が良いユーザーエクスペリエンスになるのか」と自問しました。

00:06:04.000 -> 00:06:15.000
私たちはこのプロセスをあなたと共有したいと思いました。新しいプレーヤーをどのように設計したか、なぜ私たちが行った方法でそれらを設計したのか、そして私たちが考えることは素晴らしいメディア体験を定義します。

00:06:15.000 -> 00:06:20.000
私たちは、メディア体験を素晴らしいものにするものが3つあると思います。

00:06:20.000 -> 00:06:23.000
経験は直感的であるべきです。

00:06:23.000 -> 00:06:29.000
使ったことがなくても、簡単で、親しみやすく、自然に感じるはずです。

00:06:29.000 -> 00:06:35.000
アプリ内とシステムの両方で緊密に統合する必要があります。

00:06:35.000 -> 00:06:38.000
そして最後に、それはコンテンツフォワードであるべきです。

00:06:38.000 -> 00:06:46.000
結局のところ、人々はメディアを体験するためにそこにいて、あなたのアプリやデザインはそれを反映する必要があります。

00:06:46.000 -> 00:06:52.000
さて、あなたの経験を直感的にすることから始めて、これら3つを深く掘り下げてみましょう。

00:06:52.000 -> 00:06:59.000
多くの場合、アプリが直感的に感じると、その理由を指差すのが難しい場合があります。

00:06:59.000 -> 00:07:02.000
あなたはそれを見たときにそれを知っているだけです。

00:07:02.000 -> 00:07:06.000
では、実際にインターフェイスや体験を直感的に感じさせるものは何ですか?

00:07:06.000 -> 00:07:10.000
そして、あなたはそれのためにどのように設計することができますか?

00:07:10.000 -> 00:07:12.000
私たちはそれが親しみやすさから始まると思います。

00:07:12.000 -> 00:07:19.000
過去の経験を活かして、何か新しいことを理解できるとき、それは直感的です。

00:07:19.000 -> 00:07:29.000
それがどのように機能するかの説明を必要としない場合や、それがどのように機能するかについて考える必要がある場合、それは期待どおりに機能します。

00:07:29.000 -> 00:07:35.000
私たち一人一人が、テクノロジーと現実世界と日々交流する経験を構築しています。

00:07:35.000 -> 00:07:43.000
これらは両方とも経験的な親しみやすさの大きな源であり、多くの場合、新しいシステムメディアプレーヤーを設計する際に始めた場所です。

00:07:43.000 -> 00:07:53.000
直感を引き出す経験には多くの種類がありますが、私は2つに焦点を当てたいと思います。システムメディアプレーヤーを設計する際に最も頻繁に頼りにしていた2つです。

00:07:53.000 -> 00:07:57.000
プラットフォームのパラダイムと現実世界。

00:07:57.000 -> 00:08:02.000
1つ目は、毎日テクノロジーを使用した経験から来ています。

00:08:02.000 -> 00:08:08.000
テレビのリモコンを何年も使っていると、矢印キーが左右にフォーカスを移動することがわかります。

00:08:08.000 -> 00:08:13.000
同様に、タッチファーストデバイスの音量ボタンをタップすると、オーディオがミュートされます。

00:08:13.000 -> 00:08:17.000
これらの相互作用は、馴染みがあるので直感的に感じます。

00:08:17.000 -> 00:08:26.000
メディアエクスペリエンスでこれらのタイプの使い慣れたインタラクションを使用して、アプリをより直感的で魅力的で、さらには自然に使用できるようにすることができます。

00:08:26.000 -> 00:08:34.000
逆に、なじみのない、または予期せぬ相互作用を見つけることは混乱し、時にはイライラすることさえあります。

00:08:34.000 -> 00:08:41.000
システムプレーヤーでこのタイプのプラットフォームの親しみやすさを引き出した例をいくつか見てみましょう。

00:08:41.000 -> 00:08:46.000
これの素晴らしい例は、iOSシステムプレーヤーのプレゼンテーションと解雇モデルです。

00:08:46.000 -> 00:08:55.000
プレイヤーは下からプレゼンテーションをアニメーション化し、プレイヤーを押し戻すことで却下できる微妙なヒットを与えます。

00:08:55.000 -> 00:08:59.000
このモデルは、タッチファーストデバイスで広く使用されています。

00:08:59.000 -> 00:09:08.000
たとえば、ミュージックで現在再生中のUIは、下部のミニバーから表示され、インタラクティブなスワイプで下に却下することができます。

00:09:08.000 -> 00:09:16.000
しかし、場合によっては、テクノロジーの理解からではなく、日常生活から経験を引き出すかもしれません。

00:09:16.000 -> 00:09:20.000
これらのタイプの経験は現実世界から来ています。

00:09:20.000 -> 00:09:26.000
何百万年もの進化は、私たちが自然のプロセスに対する深い本能的な理解を深めるのに役立ちました。

00:09:26.000 -> 00:09:32.000
この理解を活用して、ソフトウェアで身近で直感的な体験を構築することができます。

00:09:32.000 -> 00:09:36.000
これの素晴らしい例は、iOSプレーヤーの新しいスクロールジェスチャーです。

00:09:36.000 -> 00:09:50.000
テーブルを横切っておもちゃの車を転がすのと同様に、ビデオをスワイプするたびに勢いがあり、タイムラインがゆっくりと停止するまで、直接的な相互作用を過ぎてタイムラインの動きを続けます。

00:09:50.000 -> 00:09:55.000
ここでの勢いだけで、現実世界の動く物体との関連性が構築されます。

00:09:55.000 -> 00:09:59.000
この関連付けは、相互作用の微妙な深さを発見するのに役立ちます。

00:09:59.000 -> 00:10:06.000
おもちゃの車と同じように、もっと強く押したり、数回連続して押したりすることで、より速くすることができます。

00:10:06.000 -> 00:10:10.000
そして、私がそれをつかむと、それは止まります。

00:10:10.000 -> 00:10:15.000
それは自然だから自然に感じます。

00:10:15.000 -> 00:10:21.000
そして、これについての最良の部分は、システムプレーヤーを使用すると、アプリが直感的に感じられることです。

00:10:21.000 -> 00:10:40.000
私たちが構築し、人々がシステムプレーヤーに持っている直感と習熟度を継承したすべての自然な相互作用、tvOS、iOS、およびmacOSユーザーがネイティブに理解する方法で最適化されたすべてのデザインパラダイム - これらはすべて、わずか数行のコードで得られます。

00:10:40.000 -> 00:10:55.000
直感的なデザインを構築することは、メディア体験を素晴らしいものにするための1つの側面ですが、人々が期待するすべての機能と統合ポイントがなければ、アプリは誤ってコンテンツから焦点を引き離す可能性があります。

00:10:55.000 -> 00:11:02.000
これは、素晴らしいメディア体験の2番目の重要な側面である緊密な統合につながります。

00:11:02.000 -> 00:11:11.000
エクスペリエンスが緊密に統合されている場合、人々が期待するすべての機能、機能、およびデバイスは機能するだけです。

00:11:11.000 -> 00:11:16.000
そして重要なことに、彼らは彼らの期待と一致する方法で働きます。

00:11:16.000 -> 00:11:21.000
人々が自分のデバイスを使用するにつれて、彼らはプラットフォームの機能に頼ることに慣れます。

00:11:21.000 -> 00:11:38.000
たとえば、コントロールセンターをプルダウンして、コンテンツが「再生中」コントロールに入力されているのを見たり、テレビ番組を見ながら通知に応答したりして、ビデオをピクチャ・イン・ピクチャにスムーズに継続したりします。

00:11:38.000 -> 00:11:46.000
この緊密なシステム統合をアプリに組み込むことは、体験をシームレスに感じさせるための鍵です。

00:11:46.000 -> 00:11:52.000
あなたのアプリはシステムのネイティブ部分のように感じるべきであり、私たちはそれを可能にするために必要なツールを提供するために懸命に働きます。

00:11:52.000 -> 00:12:10.000
これには、コンテンツを検索可能にするためのCoreSpotlight統合、コンテンツがシステムメディアUIに表示されるように情報を再生中、アプリがキーボードやテレビのリモコンで再生ボタンが押されているものに応答できるようにするMediaRemoteコマンドなどが含まれます。

00:12:10.000 -> 00:12:19.000
メディアをテレビアプリに直接統合し、さらに幅広い視聴者にコンテンツを配信する機能も提供します。

00:12:19.000 -> 00:12:26.000
アプリをネイティブに感じさせることに加えて、人々が愛するすべての機能を提供することが重要です。

00:12:26.000 -> 00:12:31.000
AirPlay、SharePlay、ピクチャ・イン・ピクチャなどの機能。

00:12:31.000 -> 00:12:38.000
私たちは、人々がこれらの機能を期待し、それらを提供することは、あなたのアプリを使用する際の経験を向上させると思います。

00:12:38.000 -> 00:12:43.000
人々は多くのデバイスとさらに多くの入力フォーマットであなたのアプリを使用します。

00:12:43.000 -> 00:12:50.000
これらすべてにサポートを提供することは、あなたの経験が誰もがアクセスできるようにする上で非常に重要です。

00:12:50.000 -> 00:12:59.000
これはtvOSで特に重要であり、利用可能なすべてのリモートをサポートすることは、誰もがあなたのアプリを使用できるようにするために不可欠です。

00:12:59.000 -> 00:13:03.000
これは、tvOSでシステムメディアプレーヤーを使用することを常に推奨する理由の1つです。

00:13:03.000 -> 00:13:12.000
アプリは、すべてのテレビリモコン、キーボード、トラックパッド、ゲームコントローラー、ヘッドフォンコントロールで流動的な体験を保証する必要があります。

00:13:12.000 -> 00:13:22.000
さらに、ディスプレイの丸みを帯びた角やノッチとの衝突を避けるために、アプリのUI要素が画面の安全な領域内に描画されていることを確認する必要があります。

00:13:22.000 -> 00:13:30.000
私たちは、これらすべての統合ポイント、機能、およびハードウェア構成のサポートを構築することが困難であることを認識しています。

00:13:30.000 -> 00:13:40.000
これが私たちがAVPlayerViewControllerを構築した理由なので、ほんの数行のコードで、あなたのアプリを使用している人は誰でも素晴らしいメディア体験を持つことができます。

00:13:40.000 -> 00:13:49.000
そして、これらすべてが、最後に、メディア体験を設計する上で最も重要な側面に私たちを導きます。コンテンツを前進させます。

00:13:49.000 -> 00:13:56.000
これはあなたのデザインの主な目標であるべきであり、私たちが素晴らしいメディア体験の決定的な側面を考慮しているものです。

00:13:56.000 -> 00:14:12.000
あなたのアプリが直感的に感じるとき、すべての統合ポイントと人々が期待するすべての機能がただ機能するとき、あなたはあなたのコンテンツに焦点を合わせ、他のすべてがバックグラウンドにフェードします。

00:14:12.000 -> 00:14:17.000
ただし、コンテンツを設計する際に留意すべきことがいくつかあります。

00:14:17.000 -> 00:14:23.000
インターフェイスとシステムの両方で、適切なメタデータをすべて提供してください。

00:14:23.000 -> 00:14:31.000
この情報を提供することは、メディアにコンテキストを与えるのに役立ち、システムがコントロールセンターとロック画面でより良い体験を提供できるようにします。

00:14:31.000 -> 00:14:41.000
これには、タイトルとサブタイトル、説明、サムネイル、シーズンとエピソードの情報、またはライブストリームの開始日と終了日などが含まれます。

00:14:41.000 -> 00:14:45.000
メディアは常に元のアスペクト比にしてください。

00:14:45.000 -> 00:14:50.000
これにより、システムはビデオを画面上の正しい位置に配置できます。

00:14:50.000 -> 00:14:57.000
あなたのコンテンツをレターボクシングは、このような経験につながる可能性があります。

00:14:57.000 -> 00:15:02.000
可能な限り、最新のメディア標準のサポートを含めるようにしてください。

00:15:02.000 -> 00:15:06.000
例えば、HDRやドルビーアトモス。

00:15:06.000 -> 00:15:17.000
そして最後に、できるだけ多くの人がメディアにアクセスできるように、複数の言語のオーディオトラックと字幕トラックを含めるようにしてください。

00:15:17.000 -> 00:15:24.000
講演のこのセクションから取り除くべきことが1つあるとすれば、コンテンツに集中する必要があるということです。

00:15:24.000 -> 00:15:32.000
私たちは、開発者としてその目標をできるだけ簡単にするために、AVPlayerViewControllerを通じて提供されるシステムメディアプレーヤーを構築しました。

00:15:32.000 -> 00:15:40.000
それでは、新しいビジュアルインテリジェンス機能から始めて、AVPlayerViewControllerに追加したいくつかの新機能について見ましょう。

00:15:40.000 -> 00:15:45.000
この例では、コードスニペットが入ったフレームでビデオが一時停止しています。

00:15:45.000 -> 00:15:48.000
コードスニペットを長押しすると選択されます。

00:15:48.000 -> 00:15:53.000
その後、それをコピーして遊び場に直接貼り付けて試すことができます。

00:15:53.000 -> 00:15:55.000
これはmacOSでもうまく機能します。

00:15:55.000 -> 00:16:01.000
同じコードにカーソルを合わせると、テキストが選択可能であることを示すIビームが表示されます。

00:16:01.000 -> 00:16:06.000
その後、カーソルを使用して強調表示するか、CMD + Aを使用してすべてを選択できます。

00:16:06.000 -> 00:16:10.000
この機能に合わせて新しいAPIを導入しています。

00:16:10.000 -> 00:16:19.000
iOSのAVPlayerViewControllerとmacOSのAVPlayerViewで利用可能なallowsVideoFrameAnalysisはこの機能を切り替えます。

00:16:19.000 -> 00:16:24.000
これは、新しいSDKにリンクするすべてのアプリに対して有効になります。

00:16:24.000 -> 00:16:33.000
allowsVideoFrameAnalysisはtrueに設定され、メディアが一時停止されると、AVKitは設定された期間後に現在のビデオフレームの分析を開始します。

00:16:33.000 -> 00:16:40.000
パフォーマンス上の理由から、またはFairPlayで保護されたコンテンツについては、スクロール中にフレームを分析しないことに注意してください。

00:16:40.000 -> 00:16:46.000
一般的に、人々はほとんどの状況でこの機能を期待すると思います。

00:16:46.000 -> 00:16:54.000
ただし、アプリケーションで適切なビジュアル分析を無効にしたい場合があります。

00:16:54.000 -> 00:17:05.000
たとえば、ビデオのコレクションビューなどのパフォーマンスクリティカルなアプリケーションや、スプラッシュスクリーンなどのビデオとの相互作用が期待されない場合などです。

00:17:05.000 -> 00:17:12.000
ビジュアルインテリジェンス機能セットをアプリに統合する方法の詳細については、VisionKitに関する関連講演を参照してください。

00:17:12.000 -> 00:17:18.000
次に、インタースティシャルに対して行ったいくつかの改善点を見てみましょう。

00:17:18.000 -> 00:17:23.000
これまで、インタースティシャルはtvOSのAVPlayerViewControllerでのみサポートされていました。

00:17:23.000 -> 00:17:28.000
さて、iOSにも同じレベルのサポートをもたらすことを発表できることを嬉しく思います。

00:17:28.000 -> 00:17:36.000
ストリーム内またはAVPlayerInterstitialEventsを通じてローカルで定義されたインタースティシャルは、タイムラインに沿ってマークされるようになりました。

00:17:36.000 -> 00:17:40.000
タイムラインがマーカーに当たると、インタースティシャルの再生を開始します。

00:17:40.000 -> 00:17:49.000
インタースティシャルがHLSプレイリスト内ですでに完全に定義されている場合は、この動作が自動的に表示されます。採用は必要ありません。

00:17:49.000 -> 00:17:56.000
そうでない場合、またはアプリにさらにカスタム動作が必要な場合は、新しいAPIも導入しています。

00:17:56.000 -> 00:18:01.000
AVInterstitialTimeRangeはtvOSからiOSに持ち込まれています。

00:18:01.000 -> 00:18:10.000
これらは、tvOSからも持ち込まれているAVPlayerItemプロパティ、interstitialTimeRangesに自動的に入力されます。

00:18:10.000 -> 00:18:17.000
HLSストリームを使用すると、ストリーム内のインタースティシャルごとにAVInterstitialTimeRangeが合成されます。

00:18:17.000 -> 00:18:26.000
AVFoundation APIを介してインタースティシャルイベントをローカルで作成する場合、AVPlayerInterstitialEventごとにAVInterstitialTimeRangeが合成されます。

00:18:26.000 -> 00:18:32.000
ただし、tvOSとは異なり、interstitialTimeRangesは読み取り専用プロパティです。

00:18:32.000 -> 00:18:38.000
インタースティシャルは、HLSストリーム内またはAVPlayerInterstitialEventsを通じて定義する必要があります。

00:18:38.000 -> 00:18:47.000
tvOSアプリからサポートを移行する人にとって、これは本質的にtranslatesPlayerInterstitialEventsをyesに設定することと同等です。

00:18:47.000 -> 00:18:52.000
また、tvOSから2つの委任方法も導入しています。

00:18:52.000 -> 00:18:57.000
これらは、インタースティシャルがいつ再生を開始したか終了したかを知るために使用できます。

00:18:57.000 -> 00:19:03.000
これらをAPIに使用して、iOSのプレロール広告のスキップボタンを追加する方法を見てみましょう。

00:19:03.000 -> 00:19:08.000
まず、プライマリメディアのプレーヤー用のAVPlayerInterstitialEventControllerを作成します。

00:19:08.000 -> 00:19:12.000
次に、インタースティシャルイベントを作成します。

00:19:12.000 -> 00:19:14.000
私たちはそれに対していくつかの制限を定義します。

00:19:14.000 -> 00:19:20.000
これらの制限は、インタースティシャル内での検索を防ぎ、インタースティシャルをスキップするのを防ぎます。

00:19:20.000 -> 00:19:24.000
次に、イベントコントローラーにインタースティシャルを追加します。

00:19:24.000 -> 00:19:33.000
そして最後に、新しいwillPresentInterstitialデリゲートコールバックを実装して、設定された間隔の後に広告スキップボタンを表示することができます。

00:19:33.000 -> 00:19:36.000
そして、ボタンが押されたら、インタースティシャルをキャンセルします。

00:19:36.000 -> 00:19:39.000
それはとても簡単です。

00:19:39.000 -> 00:19:49.000
この広告スキップボタンなど、AVPlayerViewControllerにカスタムUI要素を追加するときは、常にcontentOverlayViewのサブビューとして追加するようにしてください。

00:19:49.000 -> 00:20:02.000
インタースティシャルをHLSプレイリストに直接統合する方法、またはAVFoundationインタースティシャルAPIを使用する方法の詳細については、HLSダイナミックプレロールとミッドロールの探索に関する関連講演をご覧ください。

00:20:02.000 -> 00:20:09.000
次に、今年すべてのプラットフォームで追加した新機能について説明します。再生速度制御のネイティブサポートです。

00:20:09.000 -> 00:20:18.000
AVPlayerViewとAVPlayerViewControllerの両方が、追加した新しいAPIを使用して、オプションで再生速度メニューを表示できるようになりました。

00:20:18.000 -> 00:20:22.000
私たちはこれをmacOS、iOS、tvOSで利用できるようにしています。

00:20:22.000 -> 00:20:25.000
これがどのように見えるか見てみましょう。 

00:20:25.000 -> 00:20:29.000
tvOSでは、トランスポートバーに新しいコントロールが表示されます。

00:20:29.000 -> 00:20:35.000
コントロールを選択すると、選択可能な再生速度のリストが表示されます。

00:20:35.000 -> 00:20:39.000
iOSでは、このメニューはトランスポートコントロールのオーバーフローメニューに表示されます。

00:20:39.000 -> 00:20:45.000
同様に、macOSでは、コントロールがオーバーフローメニューに表示されます。

00:20:45.000 -> 00:20:55.000
新しいiOS、macOS、tvOS SDKにリンクするすべてのアプリは、追加の変更を必要とせず、この機能を自動的に取得します。

00:20:55.000 -> 00:21:05.000
ただし、ユースケースによっては、一部のアプリケーションでは、速度のリストを変更したり、プログラムで速度を選択したり、メニューを完全に無効にしたりしたい場合があります。

00:21:05.000 -> 00:21:11.000
これらのユースケースに対応するために、AVPlayerViewとAVPlayerViewControllerにいくつかの新しいAPIを追加しました。

00:21:11.000 -> 00:21:14.000
これらを見てみましょう。 

00:21:14.000 -> 00:21:20.000
まず、AVKitに新しいクラスを追加しました - AVPlaybackSpeed。

00:21:20.000 -> 00:21:27.000
AVPlaybackSpeedsは、再生UIでユーザーが選択可能な速度オプションを表し、3つのプロパティがあります。

00:21:27.000 -> 00:21:34.000
初期化時に定義されたレート値で、再生速度が選択されたときにプレーヤーに設定されます。

00:21:34.000 -> 00:21:45.000
アクセシビリティシステム内の再生速度を表すために使用されるローカライズされた名前 たとえば、2.5の速度は、「2.5倍の速度」のローカライズされた名前を使用する場合があります。

00:21:45.000 -> 00:21:47.000
そして、ローカライズされた数字の名前。

00:21:47.000 -> 00:22:01.000
この値はレートプロパティから合成され、再生速度メニューに表示される文字列になります。アプリにプレーヤーの外部にカスタム再生速度メニューが必要な場合は、この文字列を使用して速度を表します。

00:22:01.000 -> 00:22:08.000
最後に、AVPlaybackSpeedは、可能な限り使用すべきシステムのデフォルト速度のリストを定義します。

00:22:08.000 -> 00:22:17.000
AVPlaybackSpeedをAVPlayerViewとAVPlayerViewControllerの新しいAPIと組み合わせて使用して、この機能をアプリ内に合わせて調整できます。

00:22:17.000 -> 00:22:23.000
Speedsプロパティを使用すると、再生速度のカスタムリストを定義できます。

00:22:23.000 -> 00:22:29.000
デフォルトでは、このプロパティはAVPlaybackSpeed systemDefaultSpeedsリストに設定されます。

00:22:29.000 -> 00:22:32.000
これを空のリストに設定すると、メニューが非表示になります。

00:22:32.000 -> 00:22:37.000
選択した速度プロパティは、現在アクティブな速度を返します。

00:22:37.000 -> 00:22:44.000
そして最後に、selectSpeed機能を使用すると、現在の速度をプログラムで選択できます。

00:22:44.000 -> 00:22:50.000
この機能は、プレーヤーUI外の速度の明示的な選択に応じてのみ使用する必要があることに注意してください。

00:22:50.000 -> 00:22:54.000
選択した再生速度を暗黙的に上書きしないでください。

00:22:54.000 -> 00:22:58.000
例を見てみましょう。 例を見てみましょう。

00:22:58.000 -> 00:23:02.000
ここでは、AVPlayerViewControllerを作成し、それを提示しています。

00:23:02.000 -> 00:23:07.000
デフォルトでは、これはシステムが提供する再生速度のリストを使用します。

00:23:07.000 -> 00:23:15.000
AVPlaybackSpeedを作成し、AVPlayerViewControllerの速度リストに追加することで、メニューに新しい速度を追加できます。

00:23:15.000 -> 00:23:20.000
空の速度リストを設定することで、メニューを無効にすることもできます。

00:23:20.000 -> 00:23:23.000
それはそれと同じくらい簡単です。

00:23:23.000 -> 00:23:27.000
ただし、再生を開始するには、常にAVPlayer play()を呼び出す必要があります。

00:23:27.000 -> 00:23:34.000
選択したレートが1.0ではない可能性があるため、setRate:1.0を呼び出して再生を開始しないでください。

00:23:34.000 -> 00:23:38.000
それで、セッションを締めくくりたいと思います。

00:23:38.000 -> 00:23:41.000
私たちは新しく再設計されたiOSシステムプレーヤーを見ました。

00:23:41.000 -> 00:23:46.000
私たちは、あなたがあなた自身の素晴らしい再生体験をデザインする方法を聞きました。

00:23:46.000 -> 00:23:53.000
私たちはいくつかのクールな新しいビジュアルインテリジェンス機能を見て、新しいインタースティシャルと再生速度APIを調べました。

00:23:53.000 -> 00:23:58.000
私はあなたがセッションを楽しんだことを願っていますし、あなたのアプリでこれらの機能を見るのを楽しみにしています。

00:23:58.000 -> 23:59:59.000
会議の残りを楽しんでください。

