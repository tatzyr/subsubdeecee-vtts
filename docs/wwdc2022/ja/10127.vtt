WEBVTT

00:00:00.000 -> 00:00:03.000
♪(まろやかなインストゥルメンタルヒップホップ音楽) ♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:14.000
プラヴィーン・シャルマ:こんにちは。私の名前はプラヴィーンで、ここアップルのプロトタイピングチームの出身です。

00:00:14.000 -> 00:00:18.000
カイ・カン:こんにちは。私の名前はカイで、ビデオエンジニアリングチームの出身です。

00:00:18.000 -> 00:00:24.000
Praveen: 過去数年間、Appleは人々が自分のアプリに世界を持ち込むための強力な新しい方法を可能にしました。

00:00:24.000 -> 00:00:39.000
昨年、現実世界のオブジェクトの写真を撮るObject Captureを導入し、RealityKitのPhotogrammetry APIを使用して、アプリですぐに使用できる3Dモデルに変えました。

00:00:39.000 -> 00:00:54.000
オブジェクトキャプチャの前に、スペースの幾何学的構造を大まかに理解し、アプリで新しい拡張現実のユースケースを可能にするScene Reconstruction APIをリリースしました。

00:00:54.000 -> 00:01:01.000
今年は、RoomPlanと呼ばれるまったく新しいフレームワークを発表できることを非常に嬉しく思います。

00:01:01.000 -> 00:01:07.000
RoomPlanでは、LiDAR対応のiPhoneまたはiPadを使用して部屋をスキャンできます。

00:01:07.000 -> 00:01:15.000
アプリで使用できる部屋とその部屋を定義するオブジェクトのパラメトリック3Dモデルを生成します。

00:01:15.000 -> 00:01:21.000
RoomPlanのスキャン体験がどのようなものか見てみましょう。

00:01:21.000 -> 00:01:40.000
RoomPlanは、ARKitを搭載した洗練された機械学習アルゴリズムを使用して、壁、窓、開口部、ドア、および暖炉、ソファ、テーブル、キャビネットなどの部屋を定義するオブジェクトを検出します。

00:01:40.000 -> 00:01:52.000
RealityKitを使用してスキャンの進行状況をリアルタイムでレンダリングするRoomCaptureView APIを使用すると、スキャンエクスペリエンスをアプリに簡単に統合できます。

00:01:52.000 -> 00:02:04.000
また、スキャンが完了すると、RoomCaptureViewは最終的な後処理結果を表示しますが、ユースケースに最も適しています。

00:02:04.000 -> 00:02:14.000
初めて、機械学習とコンピュータビジョンアルゴリズムを実装する複雑さなしに、人々はまったく新しい方法で自分の部屋と対話できるようになりました。

00:02:14.000 -> 00:02:24.000
たとえば、インテリアデザインアプリは、壁の色の変化をプレビューし、部屋の再塗装に必要な塗料の量を正確に計算することができます。

00:02:24.000 -> 00:02:31.000
建築アプリにより、部屋のレイアウトの変更をリアルタイムで簡単にプレビューおよび編集できるようになりました。

00:02:31.000 -> 00:02:39.000
不動産アプリは、エージェントがリストのフロアプランと3Dモデルをシームレスにキャプチャできるようになりました。

00:02:39.000 -> 00:02:46.000
また、eコマースアプリは、物理的な空間での製品の視覚化を通じて顧客を引き付けることができます。

00:02:46.000 -> 00:02:56.000
これらは、RoomPlanが有効にするアプリケーションのほんの一例であり、RoomPlanをアプリに統合する方がいかに簡単かに驚かれることでしょう。

00:02:56.000 -> 00:02:57.000
見てみましょう。 

00:02:57.000 -> 00:03:01.000
RoomPlanを使用するには、主に2つの方法があります。

00:03:01.000 -> 00:03:08.000
1つ目は、RoomPlanをアプリにシームレスに統合できる、すぐに使えるスキャン体験です。

00:03:08.000 -> 00:03:18.000
2つ目は、アプリがスキャンからのライブパラメトリックデータを使用できるようにするデータAPIですが、ユースケースに最も適しています。

00:03:18.000 -> 00:03:30.000
これらのAPIの両方で、可能な限り最高のスキャン結果を達成するのに役立ついくつかのベストプラクティスをお勧めします。このプレゼンテーションの最後のセクションで説明します。

00:03:30.000 -> 00:03:38.000
まず、新しいRoomCaptureView APIを使用してアプリに持ち込むことができるスキャン体験について話しましょう。

00:03:38.000 -> 00:03:43.000
RoomCaptureViewは、アプリに簡単に配置できるUIViewサブクラスです。

00:03:43.000 -> 00:03:54.000
ワールドスペーススキャンフィードバック、リアルタイムルームモデル生成、コーチングとユーザーガイダンスのプレゼンテーションを処理します。

00:03:54.000 -> 00:04:01.000
RoomCaptureViewベースのスキャン中に提示されたデザイン要素を詳しく見てみましょう。

00:04:01.000 -> 00:04:13.000
アクティブなRoomCaptureViewセッション中に、アニメーションラインアウトラインは、壁、窓、開口部、ドア、および部屋を定義するオブジェクトをリアルタイムで検出しました。

00:04:13.000 -> 00:04:23.000
RoomCaptureViewの下部でリアルタイムで生成されたインタラクティブな3Dモデルは、スキャンの進捗状況の概要を一目で確認できます。

00:04:23.000 -> 00:04:29.000
最後に、テキストコーチングは、可能な限り最高のスキャン結果にあなたを導きます。

00:04:29.000 -> 00:04:35.000
4つの簡単なステップでRoomCaptureViewを使い始める方法を見てみましょう。

00:04:35.000 -> 00:04:40.000
まず、ViewControllerでRoomCaptureViewリファレンスを作成します。

00:04:40.000 -> 00:04:46.000
次に、RoomCaptureSession設定オブジェクトへの参照を作成します。

00:04:46.000 -> 00:04:54.000
第三に、スキャンセッションを開始し、設定をキャプチャセッションの実行機能に渡します。

00:04:54.000 -> 00:05:00.000
そして最後に、私たちのアプリケーションはキャプチャセッションにスキャンを停止するように指示します。

00:05:00.000 -> 00:05:14.000
オプションで、アプリはRoomCaptureViewDelegateプロトコルに準拠し、後処理された結果とそのプレゼンテーションをオプトアウトしたり、提示された後処理されたスキャン結果を処理したりできます。

00:05:14.000 -> 00:05:25.000
たとえば、提供されたCapturedRoomデータ構造体で利用可能なエクスポート関数を呼び出すことで、結果のUSDZをエクスポートできます。

00:05:25.000 -> 00:05:29.000
そして、RoomPlanをアプリに統合するのは簡単です。

00:05:29.000 -> 00:05:32.000
私たちは、あなたがこのAPIで何を作るかを見てとても興奮しています。

00:05:32.000 -> 00:05:39.000
今、私の同僚のカイは、RoomCaptureSessionとRoomPlanのデータAPIについて話します。

00:05:39.000 -> 00:05:40.000
カイ:ありがとう、プラヴィーン。

00:05:40.000 -> 00:05:55.000
このセクションでは、スキャン中の基礎となるデータ構造へのアクセスを提供し、スキャンエクスペリエンスのカスタム視覚化をゼロから構築するのに役立つデータAPIについて説明します。

00:05:55.000 -> 00:06:03.000
基本的なワークフローは、スキャン、プロセス、エクスポートの3つの部分で構成されています。

00:06:03.000 -> 00:06:13.000
スキャンについては、キャプチャセッションの設定と開始方法の基本、およびキャプチャプロセスの表示と監視について説明します。

00:06:13.000 -> 00:06:21.000
次に、スキャンしたデータがどのように処理され、最終モデルが提示のために受信されるかを見ていきます。

00:06:21.000 -> 00:06:32.000
最後に、USDワークフローでも使用できる出力USDファイルを生成およびエクスポートする方法について説明します。

00:06:32.000 -> 00:06:36.000
では、スキャンのステップを詳しく見てみましょう。

00:06:36.000 -> 00:06:43.000
RoomCaptureSession APIを使用してセッションを設定し、スキャンを続ける際に進捗状況を表示します。

00:06:43.000 -> 00:06:47.000
コードでお見せしましょう。

00:06:47.000 -> 00:06:50.000
これは例としてシンプルなRealityKitアプリです。

00:06:50.000 -> 00:06:56.000
まず、RoomPlanをSwiftプロジェクトにインポートするだけです。

00:06:56.000 -> 00:07:05.000
アプリのViewControllerでは、結果を視覚化し、RoomCaptureSessionインスタンスを開始するためのカスタムタイプを持つことができます。

00:07:05.000 -> 00:07:17.000
さらに、RoomCaptureSessionは、アプリがARビューで平面とオブジェクトバウンディングボックスを描画できるように、基礎となるARセッションにハンドルを提供します。

00:07:17.000 -> 00:07:20.000
RoomCaptureSessionはデリゲートパターンを採用しています。

00:07:20.000 -> 00:07:26.000
ViewControllerクラスでは、ViewController自体をcaptureSessionのデリゲートとして割り当てることができます。

00:07:26.000 -> 00:07:33.000
これにより、ViewControllerはRoomCaptureSessionからリアルタイムの更新を取得できます。

00:07:33.000 -> 00:07:39.000
これらの更新には、キャプチャ中に人々を導くための3Dモデルと指示が含まれています。

00:07:39.000 -> 00:07:48.000
これらの更新を取得するには、ViewControllerはRoomCaptureSessionDelegateプロトコルに準拠し、2つのメソッドを実装する必要があります。

00:07:48.000 -> 00:07:57.000
1つ目は、リアルタイムのCapturedRoomデータ構造を取得するためのcaptureSession(_ session: didUpdate room:)メソッドです。

00:07:57.000 -> 00:08:05.000
ビジュアライザーを使用して、3DモデルのARビューを更新し、進捗状況に関するリアルタイムのフィードバックを人々に提供できます。

00:08:05.000 -> 00:08:11.000
トークの後半で、CapturedRoomの構造について詳しく説明します。

00:08:11.000 -> 00:08:16.000
このメソッドは、キャプチャされた部屋の更新を検出したときに呼び出されます。

00:08:16.000 -> 00:08:21.000
2番目の方法は captureSession(_ session: didProvide instruction:)です。

00:08:21.000 -> 00:08:27.000
この方法は、リアルタイムのフィードバックを含む命令構造を提供します。

00:08:27.000 -> 00:08:33.000
あなたのビジュアライザーは、スキャン中に人々を導くために指示を使用することができます。

00:08:33.000 -> 00:08:37.000
このAPIが提供する手順を見てみましょう。 では、このAPI で説明します。

00:08:37.000 -> 00:08:53.000
これらの指示には、オブジェクトまでの距離、スキャン速度、部屋への照明調整、およびより多くのテクスチャを持つ部屋の特定の領域に焦点を当てることが含まれます。

00:08:53.000 -> 00:09:01.000
これらの指示は、リアルタイムのフィードバックで人々を導くために、スキャン中に提供されます。

00:09:01.000 -> 00:09:04.000
次に、プロセス部分に進みます。

00:09:04.000 -> 00:09:13.000
このセクションでは、RoomBuilderクラスを使用してスキャンデータを処理し、最終的な3Dモデルを生成します。

00:09:13.000 -> 00:09:21.000
キャプチャされたデータを処理するには、最初のステップは、ViewControllerクラスでRoomBuilderインスタンスを開始することです。

00:09:21.000 -> 00:09:32.000
次に、キャプチャプロセス後にセンサーデータを受信するために、アプリはcaptureSession(_ session: didEndWith data: error:)メソッドを実装する必要があります。

00:09:32.000 -> 00:09:45.000
RoomCaptureSessionが停止すると、アプリでstop()関数を呼び出すか、エラーが発生すると、この関数はCaptureRoomDataオブジェクトとオプションのエラーを返すために呼び出されます。

00:09:45.000 -> 00:09:55.000
最後に、キャプチャされたデータを処理するために、awaitキーワードでroomBuilderのasync roomModel(from:)メソッドを呼び出します。

00:09:55.000 -> 00:10:01.000
このメソッドは非同期に実行され、スキャンされたデータを処理し、最終的な3Dモデルを構築します。

00:10:01.000 -> 00:10:09.000
昨年のWWDCで導入したSwift async/await機能を利用しています。

00:10:09.000 -> 00:10:17.000
ほんの数秒以内に、モデルはアプリの最終プレゼンテーションで利用可能になります。

00:10:17.000 -> 00:10:26.000
それでは、CapturedRoomデータ構造の詳細と、それをエクスポートしてアプリで使用する方法を掘り下げてみましょう。

00:10:26.000 -> 00:10:32.000
トップレベルには、サーフェスとオブジェクトで構成されるCapturedRoomがあります。

00:10:32.000 -> 00:10:49.000
表面には、半径などの曲線を表すユニークな属性が含まれています。開始角度と終了角度。表面の4つの異なるエッジ。壁、開口部、窓、ドアの建築カテゴリ。

00:10:49.000 -> 00:10:56.000
オブジェクトには、テーブル、ベッド、ソファなどの家具カテゴリが含まれています。

00:10:56.000 -> 00:11:13.000
サーフェスとオブジェクトは、ディメンション、スキャンされたサーフェスまたはオブジェクトの3つのレベルの信頼性、3D変換マトリックス、一意の識別子など、いくつかの共通の属性を共有しています。

00:11:13.000 -> 00:11:17.000
それらがコードでどのように表現されているか見てみましょう。

00:11:17.000 -> 00:11:23.000
CapturedRoom構造は、部屋内の要素の完全にパラメトリックな表現です。

00:11:23.000 -> 00:11:31.000
壁、開口部、ドア、窓、部屋のオブジェクトを含む5つのプロパティが含まれています。

00:11:31.000 -> 00:11:41.000
最初の4つの要素については、2D平面建築構造を表す表面構造として表されます。

00:11:41.000 -> 00:11:47.000
右側には、先ほど説明したSurfaceのさまざまな特性を見ることができます。

00:11:47.000 -> 00:11:54.000
最後のプロパティは、部屋内の3Dオブジェクトの配列であり、それらは立方体として表されます。

00:11:54.000 -> 00:11:59.000
右側には、オブジェクトのさまざまなプロパティが表示されます。

00:11:59.000 -> 00:12:04.000
以下は、RoomPlanでサポートするオブジェクトタイプのリストです。

00:12:04.000 -> 00:12:12.000
これらには、ソファ、テーブル、椅子、ベッドなど、さまざまな一般的な家具タイプが含まれます。

00:12:12.000 -> 00:12:24.000
最後に、エクスポート機能を使用すると、このCapturedRoomを既存のワークフローのUSDまたはUSDZデータにエクスポートできます。

00:12:24.000 -> 00:12:40.000
以下は、Cinema 4DでUSD出力を直接開いて、部屋の階層データ構造、および各部屋の要素またはオブジェクトの寸法と場所を閲覧および編集する方法を示す例です。

00:12:40.000 -> 00:12:57.000
また、既存のUSDおよびUSDZワークフローを活用して、キャプチャされた部屋のレンダリングを不動産、電子商取引、ユーティリティ、インテリアデザインなどのさまざまなアプリケーションに追加することもできます。

00:12:57.000 -> 00:13:02.000
これまでのところ、スキャン体験と基礎となるRoomPlan APIを取り上げました。

00:13:02.000 -> 00:13:09.000
私たちは今、あなたがRoomPlanで良い結果を得るのを助けるためにいくつかのベストプラクティスを見ていきます。

00:13:09.000 -> 00:13:22.000
私たちは、良いスキャンを可能にする推奨条件、部屋を選択する際に注意すべき部屋の機能、および心に留めておくべきいくつかのスキャンと熱的考慮事項をカバーします。

00:13:22.000 -> 00:13:29.000
RoomPlan APIは、典型的な家庭で最も一般的な建築構造とオブジェクトをサポートしています。

00:13:29.000 -> 00:13:38.000
最大部屋サイズが30フィート×30フィートまたは約9×9メートルのシングル住宅の部屋に最適です。

00:13:38.000 -> 00:13:45.000
照明は、APIが鮮明なビデオストリームと優れたARトラッキングパフォーマンスを得るためにも重要です。

00:13:45.000 -> 00:13:54.000
夜間の家族のリビングルームに典型的なAPIを使用するには、最低50ルクス以上をお勧めします。

00:13:54.000 -> 00:14:02.000
ハードウェアの場合、RoomPlan APIはすべてのLiDAR対応iPhoneおよびiPad Proモデルでサポートされています。

00:14:02.000 -> 00:14:07.000
APIに課題をもたらす可能性のある特別な条件がいくつかあります。

00:14:07.000 -> 00:14:15.000
たとえば、フルハイトミラーとガラスは、LiDARセンサーが期待される出力を生成するための課題となります。

00:14:15.000 -> 00:14:20.000
高い天井でも、LiDARセンサーのスキャン範囲の制限を超える可能性があります。

00:14:20.000 -> 00:14:27.000
また、非常に暗い表面は、デバイスがスキャンするのが難しいかもしれません。

00:14:27.000 -> 00:14:31.000
より良いスキャン結果を得るためのいくつかの考慮事項があります。

00:14:31.000 -> 00:14:41.000
まず、高精度の要件を持つアプリケーションでは、スキャンする前に部屋を準備することで、スキャンの品質を向上させることができます。

00:14:41.000 -> 00:14:50.000
たとえば、カーテンを開けると、より多くの自然光が差し込み、窓の閉塞を減らすことができ、昼間のスキャンに最適です。

00:14:50.000 -> 00:14:57.000
ドアを閉じると、部屋の外の不要な領域をスキャンする可能性を減らすことができます。

00:14:57.000 -> 00:15:03.000
優れたスキャンモーションに従うことは、APIで優れたスキャン結果を達成するためにも非常に重要です。

00:15:03.000 -> 00:15:16.000
そのため、スキャン中にテクスチャ、距離、速度、照明条件に関するフィードバックを提供するために、ユーザー命令の委任方法を提供しています。

00:15:16.000 -> 00:15:21.000
もう一つ心に留めておくべきことは、デバイスのバッテリーとサーマルです。

00:15:21.000 -> 00:15:27.000
優れたスキャン体験を確保するために、RoomPlan APIで多くの最適化を行ってきました。

00:15:27.000 -> 00:15:34.000
それにもかかわらず、5分以上の繰り返しスキャンや単一の長いスキャンを避けるのが最善です。

00:15:34.000 -> 00:15:45.000
これらは疲労を引き起こすだけでなく、バッテリーを消耗させ、熱の問題を引き起こし、アプリのユーザーエクスペリエンスに影響を与える可能性があります。

00:15:45.000 -> 00:15:47.000
今日取り上げたことがたくさんあります。

00:15:47.000 -> 00:15:50.000
私たちは真新しいAPI、RoomPlanを導入しました。

00:15:50.000 -> 00:16:05.000
それはあなたの部屋をキャプチャするための直感的なスキャン体験、環境を理解するための強力な機械学習モデル、およびアプリに簡単に統合するための完全にパラメトリックなUSD出力フォーマットを提供します。

00:16:05.000 -> 00:16:13.000
新しいRoomPlanエクスペリエンスをより適切に設計および実装する方法に関するガイダンスについては、以下の関連講演をご覧ください。

00:16:13.000 -> 00:16:16.000
Praveen: アプリでRoomPlanを試す時が来ました。

00:16:16.000 -> 00:16:19.000
この新しいAPIで何を作成できるかを見るのが待ちきれません。

00:16:19.000 -> 00:16:21.000
カイ：見てくれてありがとう！

00:16:21.000 -> 23:59:59.000
♪

