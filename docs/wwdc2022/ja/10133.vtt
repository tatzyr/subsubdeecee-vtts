WEBVTT

00:00:01.000 -> 00:00:12.000
アン:こんにちは、ようこそ!

00:00:12.000 -> 00:00:15.000
私はアン・ヒッチコックで、watchOSのソフトウェアエンジニアです。

00:00:15.000 -> 00:00:20.000
今日は、watchOSで生産性アプリを作成する方法をお見せしたいと思います。

00:00:20.000 -> 00:00:28.000
watchOS 6でSwiftUIとIndependent Watchアプリが導入されて以来、Watchアプリでより多くのことを行うことができました。

00:00:28.000 -> 00:00:33.000
毎年、watchOSのSwiftUIはより多くの機能を獲得します。

00:00:33.000 -> 00:00:41.000
同時に、watchOSは、Watch用のまったく新しい種類のアプリを構築できるキーボードなどの新機能を手に入れました。

00:00:41.000 -> 00:00:49.000
やるべきことのリストを追跡するためのアプリを構築するために、これらの機能のいくつかをまとめる方法をお見せしたいと思います。

00:00:49.000 -> 00:01:00.000
新しいWatchアプリを作成し、表示するアイテムの簡単なリストを追加し、リストにアイテムを追加してから、アイテムを編集します。

00:01:00.000 -> 00:01:10.000
これらの機能を追加するにあたり、Watchアプリの一般的なアプリナビゲーション戦略と、正しいものを選択する方法について説明します。

00:01:10.000 -> 00:01:14.000
アイテムを友人と共有して、負荷を共有します。

00:01:14.000 -> 00:01:21.000
次に、アプリにチャートを追加して、生産性の傾向を見つけ、モチベーションを維持するのに役立ちます。

00:01:21.000 -> 00:01:28.000
また、デジタルクラウンを使用してチャートをスクロール可能にし、より大きなデータ範囲を表示します。

00:01:28.000 -> 00:01:32.000
新しいアプリを作成することから始めましょう。

00:01:32.000 -> 00:01:35.000
Xcodeで新しいプロジェクトを作成します。

00:01:35.000 -> 00:01:40.000
watchOSタブで、[アプリ]を選択し、[次へ]をクリックします。

00:01:40.000 -> 00:01:44.000
製品名を選択した後、いくつかの選択肢があります。

00:01:44.000 -> 00:01:52.000
最も重要なのは、Watchのみのアプリを作成するか、コンパニオンiOSアプリでWatchアプリを作成するかです。

00:01:52.000 -> 00:01:59.000
素晴らしいWatchアプリを作る理由と、コンパニオンiOSアプリが欲しいときについて話しましょう。

00:01:59.000 -> 00:02:08.000
素晴らしいウォッチアプリは、お気に入りのワークアウトをすばやく開始できるワークアウトのインターフェースのように、迅速なインタラクションを可能にします。

00:02:08.000 -> 00:02:14.000
誰も周りに立って、腕を上げて、タップして何かを見つけようとしたくありません。

00:02:14.000 -> 00:02:20.000
優れたWatchアプリを使用すると、重要な情報や機能に簡単にアクセスできます。

00:02:20.000 -> 00:02:24.000
グレートウォッチアプリは、アプリの本質的な目的に焦点を当てています。

00:02:24.000 -> 00:02:34.000
たとえば、天気アプリは、今日の予報、関連する現在の状況、および簡単な10日間の予報を表示します。

00:02:34.000 -> 00:02:42.000
人々が必要な情報や行動を簡単に見つけられるように、アプリの必需品に集中してください。

00:02:42.000 -> 00:02:47.000
優れたWatchアプリは、コンパニオンiPhoneとは独立して使用できるように設計されています。

00:02:47.000 -> 00:02:59.000
たとえば、連絡先アプリは携帯電話と同期しますが、Apple Watchの連絡先情報にアクセスするためにiPhoneが近くにある必要はありません。

00:02:59.000 -> 00:03:15.000
フィットネスアプリのように、Apple Watchでキャプチャされたデータの履歴記録の提供やトレンドの詳細な分析など、WatchアプリのコンパニオンiOSアプリが必要な場合は、多くの理由があります。

00:03:15.000 -> 00:03:24.000
私たちのアプリには、焦点を絞った機能セット、迅速なインタラクション、限られたデータがあるため、ウォッチのみのアプリを作成します。

00:03:24.000 -> 00:03:31.000
この時点で、作成されたターゲットについて数分を費やしたいと思います。

00:03:31.000 -> 00:03:47.000
過去にWatchアプリを構築した場合、プロジェクトにはWatchの2つのターゲットがあります。ストーリーボード、アセット、そしておそらくいくつかのローカリゼーション関連ファイルを含むWatchKit Appターゲットと、すべてのアプリコードを含むWatchKit Extensionターゲットです。

00:03:47.000 -> 00:03:57.000
これらのデュアルターゲットは、watchOSの初期の頃からの残り物であり、複数のウォッチターゲットにはもう正当な理由はありません。

00:03:57.000 -> 00:04:03.000
Xcode 14以降、新しいWatchアプリには単一のWatchアプリターゲットがあります。

00:04:03.000 -> 00:04:13.000
Watchアプリに関連付けられているすべてのコード、アセット、ローカリゼーション、Siri Intentおよびウィジェット拡張機能は、このターゲットに属します。

00:04:13.000 -> 00:04:19.000
素晴らしいニュースは、シングルターゲットのWatchアプリがwatchOS 7でサポートされていることです!

00:04:19.000 -> 00:04:29.000
最新のwatchOSを実行していない顧客をサポートしながら、プロジェクト構造を簡素化し、混乱や重複を減らすことができます。

00:04:29.000 -> 00:04:42.000
WatchKit Extensionターゲットを持つ既存のアプリがある場合、それは引き続き機能し、Xcodeを使用してアプリを更新し続け、App Storeを通じてアプリを公開することができます。

00:04:42.000 -> 00:04:52.000
SwiftUIライフサイクルを使用するWatchアプリをすでにお持ちの場合は、Xcode 14の移行ツールを使用して、単一のターゲットに簡単に移行できます。

00:04:52.000 -> 00:04:57.000
ターゲットを選択し、[エディタ]メニューから[設定の検証]を選択します。

00:04:57.000 -> 00:05:04.000
展開ターゲットがwatchOS 7以降の場合、ターゲットの折りたたみオプションが提供されます。

00:05:04.000 -> 00:05:20.000
まだ飛躍していない場合は、シングルターゲットウォッチアプリのシンプルさとSwiftUIのすべての機能を楽しむために、SwiftUIライフサイクルを使用するようにアプリを変換するプロセスを開始する良い機会です。

00:05:20.000 -> 00:05:24.000
Xcode 14で簡素化したのはターゲットだけではありません!

00:05:24.000 -> 00:05:34.000
また、単一の1024x1024ピクセルの画像のみを要求することで、アプリのアイコンを追加することがはるかに簡単になりました。

00:05:34.000 -> 00:05:39.000
アプリのアイコン画像は、すべてのWatchデバイスに表示されるように拡大縮小されます。

00:05:39.000 -> 00:05:50.000
ホーム画面、通知、およびiPhoneのWatchアプリのアプリの設定で、デバイスのアプリアイコンでテストしてください。

00:05:50.000 -> 00:05:55.000
必要に応じて、特定の小さいサイズのカスタム画像を追加できます。

00:05:55.000 -> 00:06:07.000
たとえば、アプリのアイコンに画像の詳細があり、より小さなサイズで失われる場合は、画像の詳細を削除して、それらのサイズの特定のアイコン画像を追加できます。

00:06:07.000 -> 00:06:12.000
それでは、タスク項目のリストを追加して、アプリにいくつかの機能を追加しましょう。

00:06:12.000 -> 00:06:16.000
タスクのリストのデータモデルを作成することから始めます。

00:06:16.000 -> 00:06:24.000
ListItem構造体は識別可能でハッシュ可能であり、表示する説明を与えます。

00:06:24.000 -> 00:06:30.000
次に、データを保存し、リスト項目の配列を公開するための簡単なモデルを作成します。

00:06:30.000 -> 00:06:37.000
最後に、ビューがモデルにアクセスできるように、モデルを環境オブジェクトとして追加します。

00:06:37.000 -> 00:06:41.000
それでは、データモデルを使ってSwiftUIでリストを作成しましょう。

00:06:41.000 -> 00:06:47.000
まだタスクがないので、これをプレビューすると空のリストが表示されます。

00:06:47.000 -> 00:06:50.000
私たちはそれについて何かをする必要があります。

00:06:50.000 -> 00:06:54.000
私たちは人々に彼らのリストにいくつかのタスクを追加する方法を与えるべきです。

00:06:54.000 -> 00:06:59.000
人々がタップして新しいアイテムをリストに追加できるボタンを追加したいと思います。

00:06:59.000 -> 00:07:12.000
watchOS 9で新しく追加されたテキストフィールドリンクは、ボタンからテキスト入力オプションを呼び出すことができ、アプリで自宅にいるように感じさせるいくつかのスタイリングオプションを提供します。

00:07:12.000 -> 00:07:20.000
単純な文字列でTextFieldLinkを作成するか、よりカスタムボタンにラベルを使用できます。

00:07:20.000 -> 00:07:30.000
foregroundColor、foregroundStyle、buttonStyleなどのビュー修飾子を使用して、ボタンの外観を変更します。

00:07:30.000 -> 00:07:39.000
AddItemLinkビューを作成して、アプリで使用しているTextFieldLinkのスタイリングと動作をカプセル化します。

00:07:39.000 -> 00:07:47.000
ボタンにカスタムラベルを使用し、誰かがテキストを入力すると、新しいアイテムをリストに追加します。

00:07:47.000 -> 00:07:57.000
TextFieldLinkを使用して新しいリスト項目を追加するボタンを追加することに決めたので、TextFieldLinkをどこに置くかを考える必要があります。

00:07:57.000 -> 00:08:02.000
Watchアプリでリストにアクションを追加する場合、いくつかのオプションがあります。

00:08:02.000 -> 00:08:11.000
ショートリストの主要なアクションには、リストの最後にあるボタン、ナビゲーションリンク、またはTextFieldLinkを使用します。

00:08:11.000 -> 00:08:21.000
リストの最後にアクションをアイテムとして追加することは、世界時計の都市のリストのようなアイテムの短いリストのプライマリアクションに適しています。

00:08:21.000 -> 00:08:31.000
ただし、アイテムの長いリストを予想する場合、人々はアクションを実行するたびにリストの最後までスクロールし続ける必要があります。

00:08:31.000 -> 00:08:37.000
リストが長い場合、一般的に使用されるアクションには、ツールバー項目を使用します。

00:08:37.000 -> 00:08:44.000
ツールバー項目を追加するには、ツールバー修飾子をリストに追加し、アクションビューをコンテンツとして使用します。

00:08:44.000 -> 00:08:50.000
これにより、自動ツールバー項目配置で単一のツールバー項目がリストに追加されます。

00:08:50.000 -> 00:08:55.000
私はいつもやることリストを短くしておくと思いたいのですが、そうしないとかなり確信しています。

00:08:55.000 -> 00:09:02.000
そのため、テキストフィールドのリンクをツールバー項目に入れて、簡単にアクセスできるようにします。

00:09:02.000 -> 00:09:05.000
少し時間を取って、私たちが成し遂げたことを復習しましょう。

00:09:05.000 -> 00:09:23.000
リストアイテムのモデルを作成し、環境オブジェクトとして保存し、アイテムを表示するリストを作成し、新しいアイテムを追加するためのテキストフィールドリンクを追加しました。

00:09:23.000 -> 00:09:28.000
説明だけでアイテムを作成するのは簡単ですが、あまり役に立ちません。

00:09:28.000 -> 00:09:37.000
アイテムを完了としてマークする必要があり、優先順位を設定したり、タスクの作業量の見積もりを追加したりする方法が必要な場合があります。

00:09:37.000 -> 00:09:40.000
これを行うには、詳細ビューを追加します。

00:09:40.000 -> 00:09:48.000
これを行う前に、SwiftUI on Watchのアプリナビゲーション構造のオプションを確認したいと思います。

00:09:48.000 -> 00:09:53.000
階層ナビゲーションは、リストと詳細の関係を持つビューに使用されます。

00:09:53.000 -> 00:10:02.000
watchOS 9以降、SwiftUI NavigationStackを使用して、このタイプのナビゲーション構造を持つインターフェースを作成します。

00:10:02.000 -> 00:10:09.000
ページベースのナビゲーションは、すべてのビューがピアであるフラットな構造のビューに使用されます。

00:10:09.000 -> 00:10:23.000
ページベースのナビゲーションの素晴らしい例は、ワークアウトアプリのワークアウト内ビューで、ワークアウト中にワークアウトコントロール、メトリクス、再生コントロールを簡単にスワイプできます。

00:10:23.000 -> 00:10:27.000
フルスクリーンアプリには、ディスプレイ全体を使用する単一のビューがあります。

00:10:27.000 -> 00:10:34.000
これは通常、ゲームなどのアプリや、単一のメインビューを持つ他のアプリに使用されます。

00:10:34.000 -> 00:10:48.000
フルスクリーンビューの場合は、ignosSafeArea修飾子を使用してコンテンツをディスプレイの端まで拡張し、非表示の可視性値を持つツールバー修飾子を使用してナビゲーションバーを非表示にします。

00:10:48.000 -> 00:10:52.000
モーダルシートは、現在のビューの上をスライドするフルスクリーンビューです。

00:10:52.000 -> 00:10:58.000
これは、現在のワークフローの一部として完了する必要がある重要なタスクに使用する必要があります。

00:10:58.000 -> 00:11:07.000
階層的なフローを使用するタイミングと、モーダルシートを使用するタイミングを区別することが重要です。

00:11:07.000 -> 00:11:16.000
メールは階層スタイルを使用してメッセージのリストを表示し、各メッセージまたはスレッドを詳細ビューとして表示します。

00:11:16.000 -> 00:11:23.000
メッセージの詳細から実行できるアクションがありますが、リストに戻る前にしなければならないことは何もありません。

00:11:23.000 -> 00:11:32.000
リストに戻り、新しいメッセージをタップすると、メールはモーダルシートを使用して新しいメッセージビューを表示します。

00:11:32.000 -> 00:11:40.000
続行する前に、新しいメッセージの詳細を入力するか、キャンセルする必要があるため、モーダルシートは正しい選択です。

00:11:40.000 -> 00:11:46.000
モーダルシートを表示するには、シートの表示状態を制御するプロパティを作成します。

00:11:46.000 -> 00:11:58.000
ユーザー インターフェイスのアクションに基づいてプロパティを設定し、プレゼンテーション状態プロパティが true の場合、シート修飾子を使用してカスタム モーダル シート コンテンツを表示します。

00:11:58.000 -> 00:12:04.000
カスタムツールバーアイテムをモーダルシートに追加するには、アイテムと一緒にツールバーを追加します。

00:12:04.000 -> 00:12:14.000
ツールバーアイテムは、confirmationAction、cancellationAction、破壊的アクションなどのモーダルプレースメントを使用する必要があることに注意してください。

00:12:14.000 -> 00:12:24.000
アイテムを編集しており、完了して完了をタップするまでこの単一のタスクに集中したいので、詳細ビューにモーダルシートを使用します。

00:12:24.000 -> 00:12:36.000
NavigationStackやプログラマティックナビゲーションの詳細など、SwiftUIのナビゲーションの詳細については、「ナビゲーション用のSwiftUIクックブック」をご覧ください。

00:12:36.000 -> 00:12:42.000
詳細ビューに移動する方法を決めたので、リスト項目の構造体を更新します。

00:12:42.000 -> 00:12:49.000
推定作業、作成日、完了日を保存する新しいプロパティがあります。

00:12:49.000 -> 00:12:53.000
人々にこれらの詳細を表示および編集する方法を提供しましょう。

00:12:53.000 -> 00:13:01.000
説明を編集するためのTextFieldと、タスクを完了または完了していないとしてマークするためのトグルを使用して詳細ビューを作成します。

00:13:01.000 -> 00:13:05.000
しかし、私たちは推定された仕事をどうするべきですか?

00:13:05.000 -> 00:13:11.000
値はすべて数値になり、有効な値の範囲を指定できます。

00:13:11.000 -> 00:13:16.000
watchOS 9以降、ステッパーを使用できます。

00:13:16.000 -> 00:13:23.000
ステッパーは、シーケンシャル値を編集するための詳細な制御を提供したい場合に最適なオプションです。

00:13:23.000 -> 00:13:29.000
値の範囲を指定し、オプションでステップを指定できます。

00:13:29.000 -> 00:13:36.000
ステッパーを使用して論理的に順番に編集することもできますが、必ずしも数値ではありません。

00:13:36.000 -> 00:13:42.000
たとえば、アイテムの推定ストレスレベルに注意したいかもしれません。

00:13:42.000 -> 00:13:58.000
ストレスレベルを示す絵文字の配列を作成し、ステッパーを作成し、ストレスレベルの絵文字配列で選択したインデックスに値をバインドし、範囲を絵文字インデックスの範囲に設定することができます。

00:13:58.000 -> 00:14:05.000
値をステップスルーすると、アイテムについて推定しているストレスレベルが増減します。

00:14:05.000 -> 00:14:12.000
WWDCセッションの準備は楽しいですが、素晴らしいWatchアプリの開発を皆さんと共有するのはパーティーです。

00:14:12.000 -> 00:14:24.000
リストにストレスの多いアイテムがある場合、またはリストにストレスを感じているアイテムがたくさんある場合は、リストのアイテムを友人と共有して助けを求めたいと思います。

00:14:24.000 -> 00:14:31.000
詳細ビューにボタンを追加して、共有シートを使用してアイテムを共有できるようにします。

00:14:31.000 -> 00:14:41.000
詳細ビューのボタンをタップしてアイテムを共有したり、友達のリストから選んで助けを求めたり、メッセージを編集したり、送信したりできるようにしたいです。

00:14:41.000 -> 00:14:49.000
これを行うには、watchOS 9のSwiftUIで利用可能な新しいツールを使用します：ShareLink。

00:14:49.000 -> 00:14:53.000
アイテムでShareLinkを作成することで、リストアイテムを共有できます。

00:14:53.000 -> 00:15:00.000
オプションで、メッセージの最初のテキストを件名とメッセージでカスタマイズできます。

00:15:00.000 -> 00:15:05.000
そして、誰かがアイテムを共有するときにシェアシートに表示するプレビューを提供します。

00:15:05.000 -> 00:15:13.000
ShareLinkを使用して、iOS、macOS、watchOSのSwiftUIアプリから共有できます。

00:15:13.000 -> 00:15:19.000
ShareLinkの詳細とオプションについては、「Meet Transferable」を必ずチェックしてください。

00:15:19.000 -> 00:15:29.000
アイテムをいつ完了したかを追跡し、物事を成し遂げるために助けを求めることができるようになったので、生産性を確認するためのチャートも追加したいと思います。

00:15:29.000 -> 00:15:37.000
私は単一のデータ系列と異なるデータ値を持っているので、棒グラフを使用することを選択しました。

00:15:37.000 -> 00:15:45.000
棒グラフは、一度に表示するデータ量を制限する限り、このデータをウォッチディスプレイに明確に表示します。

00:15:45.000 -> 00:15:50.000
まず、アプリのナビゲーション構造にチャートビューを追加することから始めます。

00:15:50.000 -> 00:15:58.000
アイテムリストとチャートの間にリストと詳細の関係がないため、ページベースのナビゲーション戦略を選択しました。

00:15:58.000 -> 00:16:03.000
誰かがいつでもリストとチャートの間をスワイプすることができます。

00:16:03.000 -> 00:16:12.000
リストとチャートにページベースのナビゲーションを追加するには、リストビューをカプセル化するためのItemList構造体を作成することから始めましょう。

00:16:12.000 -> 00:16:18.000
コンテンツビューのコンテンツ全体をこの新しいアイテムリストに移動しました。

00:16:18.000 -> 00:16:26.000
ここでアイテムリストをカプセル化すると、コンテンツビューにシンプルで読みやすいタブビューコードを持つことができます。

00:16:26.000 -> 00:16:31.000
また、チャートビューの構造体を作成する必要があります。

00:16:31.000 -> 00:16:39.000
チャートを作成する前にナビゲーション構造に集中できるように、一時的にプレースホルダを入れます。

00:16:39.000 -> 00:16:49.000
次に、アイテムリストとチャートの2つのタブを持つページスタイルのタブビューでコンテンツビューを設定します。

00:16:49.000 -> 00:16:54.000
ナビゲーション構造を設定したので、このチャートの作り方について話しましょう。

00:16:54.000 -> 00:17:04.000
SwiftUIキャンバスを使ってチャートを描くことは知っていますが、watchOS 9では、より簡単な答えがあります。スウィフトチャートです。

00:17:04.000 -> 00:17:14.000
Swift ChartsはiOS、macOS、tvOSでも利用できるので、SwiftUIを使用している場所ならどこでもチャートを再利用できます。

00:17:14.000 -> 00:17:21.000
チャート化したいデータを集約し、Swift Chartsに表示させます。

00:17:21.000 -> 00:17:25.000
チャートでは、日付までに完了したアイテムの数を表示したい。

00:17:25.000 -> 00:17:30.000
チャートの集計データを格納する構造体を作成します。

00:17:30.000 -> 00:17:36.000
次に、リスト項目データをチャートデータ要素に集約する小さな方法を作成します。

00:17:36.000 -> 00:17:44.000
表示するデータを指定し、データからシリーズを定義して、単純なチャートを表示します。

00:17:44.000 -> 00:17:51.000
日付をx値として使用し、完了したアイテムの数をy値として使用しています。

00:17:51.000 -> 00:18:00.000
ウォッチディスプレイで必要な外観を実現するために、チャートのchartXAxis修飾子を使用してx軸をカスタマイズしています。

00:18:00.000 -> 00:18:04.000
軸値ラベルのフォーマットスタイルを指定しています。

00:18:04.000 -> 00:18:10.000
縦のグリッド線もいらないので、AxisGridLineマークを省略しました。

00:18:10.000 -> 00:18:16.000
また、chartYAxis修飾子を使用してy軸をカスタマイズしています。

00:18:16.000 -> 00:18:20.000
Watchのチャートに似合うグリッドラインスタイルを指定します。

00:18:20.000 -> 00:18:29.000
軸値のラベルを整数としてフォーマットし、チャートの上部にクリップされないようにトップラベルを省略しています。

00:18:29.000 -> 00:18:40.000
Swift Chartsで達成できる素晴らしいことの詳細については、「Hello Swift Charts」と「Swift Charts: Raise the Bar」をご覧ください。

00:18:40.000 -> 00:18:50.000
私たちのチャートはかなり良さそうですが、もう少しデータを表示したいのですが、それでも素晴らしいウォッチエクスペリエンスを維持したいので、スクロール可能にします。

00:18:50.000 -> 00:19:05.000
これを達成するために、デジタルクラウンイベントのコールバックを設定できる新しいdigitalCrownRotation修飾子を使用し、チャートのカスタムスクロール動作を実装します。

00:19:05.000 -> 00:19:13.000
誰かがチャートをスクロールしながら状態を保存するプロパティを追加して、digitalCrownRotation修飾子を追加する準備をしましょう。

00:19:13.000 -> 00:19:21.000
highlightedDateIndexは、現在のスクロール位置のデータポイントのインデックスです。

00:19:21.000 -> 00:19:28.000
人がチャートをスクロールしているときに現在のクラウンの位置を表示できるように、クラウンオフセットを保存します。

00:19:28.000 -> 00:19:35.000
これは、クラウンが動いている間、データポイント上またはデータポイント間の中間値です。

00:19:35.000 -> 00:19:40.000
誰かがアクティブにスクロールしているかどうかを追跡するために、アイドル状態を保存します。

00:19:40.000 -> 00:19:48.000
この情報を使用して、クラウンスクロールが停止して開始すると、小さなアニメーションを追加します。

00:19:48.000 -> 00:19:56.000
値を格納するプロパティがわかったので、digitalCrownRotation修飾子を追加できます。

00:19:56.000 -> 00:20:01.000
抑取値を highlightedDateIndex プロパティにバインドします。

00:20:01.000 -> 00:20:09.000
機械的な用語では、デテントは、それを動かすのに十分な力が加えられるまで、ある位置に何かを保持するメカニズムです。

00:20:09.000 -> 00:20:15.000
例えば、車のドアを開けると、ドアが落ち着く「停止」の位置があります。

00:20:15.000 -> 00:20:19.000
私はもう少し強く押して、別の「停止」にドアをより広く開くことができます。

00:20:19.000 -> 00:20:26.000
それを閉じるには、「停止」から引き出すために抵抗を克服するのに十分な力強く引っ張る必要があります。

00:20:26.000 -> 00:20:30.000
そうでなければ、それはその休息位置に戻ります。

00:20:30.000 -> 00:20:33.000
これはデテントです。

00:20:33.000 -> 00:20:38.000
車のドアの停止は、このAPIのデテントを理解するのに役立ちます。

00:20:38.000 -> 00:20:44.000
デテントは、あなたの視界上の王冠の静止した切り欠位置です。

00:20:44.000 -> 00:21:00.000
onChangeコールバックのハンドラでは、クラウンがスクロールしていることを知っているので、isCrownIdleの値をfalseに設定し、クラウンオフセットの値を現在の値に設定して、スクロール中にチャート上の現在の位置を表示できるようにします。

00:21:00.000 -> 00:21:08.000
onIdleコールバックのハンドラで、isCrownIdleの値をtrueに設定します。

00:21:08.000 -> 00:21:12.000
これで、チャートをスクロールしながらクラウンの位置を表示できます。

00:21:12.000 -> 00:21:17.000
これを行うには、Swift ChartsのRuleMarkを使用できます。

00:21:17.000 -> 00:21:20.000
ルールマークはチャート上の直線です。

00:21:20.000 -> 00:21:29.000
水平線または垂直線を表示したり、しきい値を表示したり、傾斜線を表示したりできます。

00:21:29.000 -> 00:21:38.000
クラウンスクロールの現在の場所を表示するために、クラウンオフセット日付値でRuleMarkを作成します。

00:21:38.000 -> 00:21:45.000
これをもう少し良く見せるために、クラウンが動かなくなったら、クラウンの位置線をフェードさせたい。

00:21:45.000 -> 00:21:50.000
追加したisCrownIdleプロパティを使用してこれをアニメーション化するのは簡単です。

00:21:50.000 -> 00:21:57.000
RuleMarkのforegroundStyleで使用している色の不透明度を格納するプロパティを追加します。

00:21:57.000 -> 00:22:08.000
そして、チャートにonChange修飾子を追加して、isCrownIdle値が変更されたときにcrownPositionOpacity値の変更をアニメーション化します。

00:22:08.000 -> 00:22:14.000
次に、RuleMarkのforegroundStyleを更新して、不透明度を使用します。

00:22:14.000 -> 00:22:21.000
スクロール中にチャートのバーの横にある値を表示するには、BarMarkに注釈を追加できます。

00:22:21.000 -> 00:22:28.000
最後のバーになったら、アノテーションをバーの一番上端に配置します。

00:22:28.000 -> 00:22:33.000
それ以外の場合は、上部のトレーリング側に配置します。

00:22:33.000 -> 00:22:44.000
デジタルCrownRotation修飾子、SwiftチャートのRuleMark、シンプルなSwiftUIアニメーションだけで何を達成したかを見てみましょう。

00:22:44.000 -> 00:22:52.000
カスタムスクロール可能なチャートを作成するための最後のステップは、誰かがスクロールするにつれてチャートのデータ範囲を調整することです。

00:22:52.000 -> 00:22:56.000
可視範囲を格納するプロパティを作成します。

00:22:56.000 -> 00:23:01.000
chartData変数を作成して、範囲内のデータをチャートに提供します。

00:23:01.000 -> 00:23:10.000
highlightedDateIndexが変更されたら、メソッドを呼び出してchartDataRangeを確認し、必要に応じて更新します。

00:23:10.000 -> 00:23:17.000
誰かがデジタルクラウンを使用してチャートをスクロールすると、チャートはスクロールして利用可能なデータを表示します。

00:23:17.000 -> 00:23:23.000
これで、計画していたすべての機能の実装が完了しました。

00:23:23.000 -> 00:23:31.000
watchOS 9で利用可能な新しいSwiftUI機能の詳細については、「SwiftUIの新機能」をチェックしてください。

00:23:31.000 -> 00:23:39.000
Watchアプリや新しいWatchアプリの機能を計画する際には、素晴らしいWatchアプリ体験を作るものについて考えてください。

00:23:39.000 -> 00:23:47.000
アプリを設計している間は、アプリのナビゲーション戦略を検討して、アプリが簡単で直感的であることを確認してください。

00:23:47.000 -> 00:23:52.000
そして、よりシンプルで豊かな開発オプションのためにSwiftUIを使用してください。

00:23:52.000 -> 00:23:54.000
素晴らしいウォッチアプリを作り続けてください。

00:23:54.000 -> 00:23:59.000
そして、あなたのおかげで、そのためのアプリがあることを忘れないでください!

00:23:59.000 -> 23:59:59.000
。

