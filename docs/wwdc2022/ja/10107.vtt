WEBVTT

00:00:00.000 -> 00:00:14.000
リッチ・ギラム：こんにちは、私はリッチです。右から左に曲がるのを手伝うためにここにいます。

00:00:14.000 -> 00:00:22.000
だから、あなたはすでに最も一般的なヨーロッパ言語、最も一般的なアジア言語を含む多くの言語のアプリケーションをローカライズしました。

00:00:22.000 -> 00:00:25.000
そして今、あなたはそれをアラビア語とヘブライ語にローカライズしたい。

00:00:25.000 -> 00:00:35.000
これは良い選択です。アラビア語は私たちのプラットフォームで最も使用されている10の言語の1つですが、他の言語で開発する際には直面しないいくつかの課題をもたらします。

00:00:35.000 -> 00:00:44.000
それがこの話であり、アラビア語やヘブライ語などの言語にローカライズできるようにアプリケーションを開発する方法です。

00:00:44.000 -> 00:00:51.000
アラビア語とヘブライ語は、いわゆる「右から左への言語」の中で最も一般的に使用されています。なぜ彼らはこれと呼ばれるのですか?

00:00:51.000 -> 00:01:00.000
英語、フランス語、中国語、タイ語、および他の多くの言語は、その文字がこのように左から右に実行されるように書かれています。

00:01:00.000 -> 00:01:04.000
ヘブライ語では、文字はこのように右から左に実行されます。

00:01:04.000 -> 00:01:10.000
彼らはアラビア語で同じことをし、アラビア語では、文字も筆記体で結合されます。

00:01:10.000 -> 00:01:15.000
「サラーム」の4つの文字は、別々に書かれているとこのようになります。

00:01:15.000 -> 00:01:18.000
ところで、アラビア語とヘブライ語だけではありません。

00:01:18.000 -> 00:01:24.000
Appleは実際には15の右から左の言語のフォントとキーボードをサポートしています。

00:01:24.000 -> 00:01:26.000
これはヘブライ語のテキストの段落です。

00:01:26.000 -> 00:01:32.000
これは、数字の「数式と関数のヘルプ」ページのヘブライ語版からのものです。

00:01:32.000 -> 00:01:41.000
テキストが右側に並び、左側がぼろぼろで、最後の行を含む多くの行が左側に句読点があることに注意してください。

00:01:41.000 -> 00:01:43.000
この段落には数字もあります。

00:01:43.000 -> 00:01:45.000
数字はまだ左から右に続きます。

00:01:45.000 -> 00:01:50.000
これは、Numbersが250以上の機能をサポートしていることを示しています。

00:01:50.000 -> 00:02:01.000
別の段落を含めるように視野を広げると、これには英語の単語、iWorkとその構成アプリケーションの名前、Pages、Numbers、Keynoteがあることがわかります。

00:02:01.000 -> 00:02:05.000
これらはまた、ヘブライ語の段落でも左から右に書かれています。

00:02:05.000 -> 00:02:09.000
したがって、多くの段落では、テキストは双方向です。

00:02:09.000 -> 00:02:17.000
これはアラビア語とヘブライ語の固有の特性であり、それらがしばしば「ビディ」言語と呼ばれる理由です。

00:02:17.000 -> 00:02:22.000
視野をさらに広げると、ページ全体が右から左にレイアウトされていることがわかります。

00:02:22.000 -> 00:02:29.000
ここに表があり、テキストは画像の左側ではなく右側にあります。

00:02:29.000 -> 00:02:35.000
そして、Safariのウィンドウフレームを見るためにさらに広げると、コンテンツにとどまらないことがわかります。

00:02:35.000 -> 00:02:43.000
アラビア語とヘブライ語のテキストの行は右から始まり、左に進むので、他のUI要素が同じことをすることを期待するのは当然です。

00:02:43.000 -> 00:02:50.000
読者が物事が左から始まり、右に進むことを期待するように、アラビア語とヘブライ語の読者は反対を期待しています。

00:02:50.000 -> 00:03:00.000
ここでは、Safariのツールバーは右から左に実行され、右上隅に信号機のボタンがあり、ボタンは左に進んでいます。

00:03:00.000 -> 00:03:05.000
そして、画面全体を含めるように焦点を広げると、どこにでも広がっていることがわかります。

00:03:05.000 -> 00:03:10.000
これはNumbersのヘルプ画面で、Numbersのすべての要素も反転していることがわかります。

00:03:10.000 -> 00:03:12.000
サイドバーは左側にあります。

00:03:12.000 -> 00:03:16.000
タブバーは右から左に走っています。文書自体もひっくり返されます。

00:03:16.000 -> 00:03:21.000
そして、Macのメニューバーとドックも右から左に実行されます。

00:03:21.000 -> 00:03:27.000
このすべてを正しくすることは複雑になる可能性がありますが、素晴らしいニュースは、私たちがあなたのために重い作業のほとんどを行うということです。

00:03:27.000 -> 00:03:30.000
右から左へのほとんどのサポートは無料です。

00:03:30.000 -> 00:03:32.000
しかし、心に留めておくべきことがあります。

00:03:32.000 -> 00:03:41.000
だから、それが私たちが話すこと、システムがあなたのために何をするか、あなたがオプトインまたはオプトアウトする必要があるとき、そしてあなた自身の右から左へのサポートを実装するときに何を考えるべきかです。

00:03:41.000 -> 00:03:47.000
テキスト、画像、コントロールの向き、UIレイアウトについて話します。

00:03:47.000 -> 00:03:50.000
また、アラビア語での数字の表示についても説明します。

00:03:50.000 -> 00:03:57.000
そして最後に、あなたのアプリが右から左に正しく処理していることをテストする方法について少し話します。

00:03:57.000 -> 00:03:59.000
では、飛び込みましょう。

00:03:59.000 -> 00:04:04.000
まず、テキストの仕組みについてもう少し話し、いくつかの用語を紹介します。

00:04:04.000 -> 00:04:07.000
方向を書くという概念から始めましょう。

00:04:07.000 -> 00:04:16.000
すでに見たように、英語は左から右に書かれ、ヘブライ語は右から左に書かれています。

00:04:16.000 -> 00:04:21.000
しかし、それらを混ぜるとどうなりますか?

00:04:21.000 -> 00:04:38.000
このような多言語の文章がある場合、個々のコンポーネントはまだ執筆方向を維持しますが、これはこれらの文章のそれぞれが3つのコンポーネントで構成されていることを意味します。母国語のテキストの2つの別々のスニペットが1つのスニペットを別の言語で挟んでいます。

00:04:38.000 -> 00:04:44.000
段落の書き方について話すとき、私たちはこれらの個々のスニペットの順序について話しています。

00:04:44.000 -> 00:05:00.000
英語の文が左から右に書く方向にあると言うとき、それはこれらの3つのボックスが左から右に走るからであり、ヘブライ語の文が右から左に書く方向にあると言うとき、それはそれらの3つのボックスが右から左に走るからです。

00:05:00.000 -> 00:05:03.000
異なるが関連する概念は、テキストの配置です。

00:05:03.000 -> 00:05:09.000
左から右の言語を読むと、目はページの左側に行き、右に進みます。

00:05:09.000 -> 00:05:13.000
右から左の言語を読むと、それは逆です。

00:05:13.000 -> 00:05:18.000
したがって、テキストは右から左の言語で右側に整列されます。

00:05:18.000 -> 00:05:23.000
良いニュースは、ほとんどの場合、これらのことを心配する必要がないということです。

00:05:23.000 -> 00:05:38.000
CoreTextは、異なる方向のテキストが1行に混在している場合など、テキストの行または段落にすべての文字を適切に配置するだけでなく、すべてのUIフレームワークが書き込み方向と配置も自動的に設定します。

00:05:38.000 -> 00:05:44.000
すべてのUIウィジェットは、デフォルトで「自然なライティングディレクション」と「ナチュラルアライメント」と呼ばれるものです。

00:05:44.000 -> 00:05:50.000
テキストウィジェットの書き込み方向は、ユーザーのUI言語の通常の書き込み方向と一致するようにデフォルト設定されます。

00:05:50.000 -> 00:05:57.000
つまり、UIがヘブライ語またはアラビア語の場合、テキストウィジェットの書き込み方向はデフォルトで右から左になります。

00:05:57.000 -> 00:06:00.000
自然なアライメントは書き込み方向に従います。

00:06:00.000 -> 00:06:07.000
つまり、テキストウィジェットの書き込み方向が右から左の場合、右揃えになります。

00:06:07.000 -> 00:06:11.000
ほとんどの場合、これはあなたが望むものですが、デフォルトを上書きすることができます。

00:06:11.000 -> 00:06:15.000
これについては、コントロールオリエンテーションのセクションで詳しく説明します。

00:06:15.000 -> 00:06:19.000
今、あなたが遭遇する用語の小さなチャートを始めるのに良い時期のようです。

00:06:19.000 -> 00:06:28.000
ここで言っているのは、自然なアライメントは左から右の言語の左のアライメントに対応し、右から左の言語の右のアライメントに対応するということです。

00:06:28.000 -> 00:06:30.000
行くにつれて、このチャートに追加します。

00:06:30.000 -> 00:06:33.000
しかし、もちろん、それはあなたが心配しなければならないテキストだけではありません。

00:06:33.000 -> 00:06:40.000
反対方向に読まれるテキストを持つことは、テキスト以外のアプリケーションの要素に大きな影響を与えます。

00:06:40.000 -> 00:06:45.000
アイコンやその他の絵画要素にどのように影響するかについて話しましょう。

00:06:45.000 -> 00:06:49.000
これは英語とアラビア語のPagesツールバーです。

00:06:49.000 -> 00:06:52.000
ツールバーのアイコンのいくつかを詳しく見てみましょう。

00:06:52.000 -> 00:06:57.000
「ページを追加」ボタンや「メディア」ボタンなどの多くは、両方の言語で同じように見えます。

00:06:57.000 -> 00:07:05.000
これは、それらが対称的であるか、方向性が言語に結びついていないためであり、両方の言語でうまく見えるためです。

00:07:05.000 -> 00:07:11.000
「表示」ボタンや「ドキュメント」ボタンなどの他のボタンは、アラビア語のミラー画像に反転します。

00:07:11.000 -> 00:07:20.000
「表示」ボタンは、アラビア語でウィンドウの反対側に表示されるページサイドバーを表示するので、それを反映するためにアイコンを変更必要があります。

00:07:20.000 -> 00:07:27.000
「ドキュメント」ボタンは、ユーザーがアラビア語で書いている場合、ページが反対方向に回転することを示すように変更されます。

00:07:27.000 -> 00:07:30.000
また、アイコンが完全に変化する状況が発生する可能性があります。

00:07:30.000 -> 00:07:38.000
「テキストボックスを挿入」ボタンの文字は、ユーザーの言語を反映するために別の文字に変わります。

00:07:38.000 -> 00:07:42.000
もう一度、素晴らしいニュースは、これの多くがあなたのために処理されるということです。

00:07:42.000 -> 00:07:50.000
一般的にテキストを書く方向について考えるよりも、画像の向きについて少し考える必要がありますが、物事を正しくすることはかなり簡単です。

00:07:50.000 -> 00:07:54.000
これは、英語とアラビア語のMac Pagesの「表示」メニューです。

00:07:54.000 -> 00:07:57.000
「ルーラーを表示」アイコンが反転することに注意してください。

00:07:57.000 -> 00:08:02.000
右から左の言語では、垂直定規は右側にあります。

00:08:02.000 -> 00:08:08.000
定規アイコンのようなカスタム画像の場合、右から左への動作はXcodeイメージセットエディタで制御されます。

00:08:08.000 -> 00:08:13.000
あなたのイメージが左から右と右から左で同じであれば、特別なことをする必要はありません。

00:08:13.000 -> 00:08:22.000
このシステムは、アプリが開発言語とは反対の書き込み方向の言語で実行されているときに、アルゴリズム的に画像をミラーリングすることもできます。

00:08:22.000 -> 00:08:25.000
この機能は、Xcodeのイメージセットエディタで要求できます。

00:08:25.000 -> 00:08:32.000
サイドバーには、「方向」とマークされたコントロールがあります。これをクリックすると、4つの選択肢があるメニューが表示されます。

00:08:32.000 -> 00:08:41.000
UI言語に関係なく画像が同じ場合は、「固定」を選択します。アルゴリズムミラーリングが必要な場合は、「ミラー」オプションの1つを選択してオプトインします。

00:08:41.000 -> 00:08:45.000
どちらがあなたの開発言語の執筆方向に依存します。

00:08:45.000 -> 00:09:06.000
アルゴリズム的にミラーリングできない画像がある場合、UIの方向が変わったときに異なる動作をする複数の要素があるか、移動したくないシェーディングがある場合は、「両方」を選択し、3つの新しいウェルが画像セットエディタに追加され、左から右と右から左のコンテキストに使用する別々の画像を作成できます。

00:09:06.000 -> 00:09:12.000
しかし、ページツールバーのように、SFシンボルの画像を使用すると、物事はさらに簡単になります。

00:09:12.000 -> 00:09:14.000
ほとんどすべての作業があなたのために行われました。

00:09:14.000 -> 00:09:19.000
右から左の言語に変更する必要があるシンボルは、自動的に変更されます。

00:09:19.000 -> 00:09:22.000
例えば、この箇条書きリストのアイコンを考えてみましょう。

00:09:22.000 -> 00:09:30.000
多くの画像の場合、SFシンボルのサイドバーには、選択した画像のローカライズされたバージョンを示す「ローカリゼーション」セクションがあります。

00:09:30.000 -> 00:09:35.000
この場合、箇条書きリストのアイコンは左から右と右から左のバージョンが異なります。

00:09:35.000 -> 00:09:38.000
それは自動的にミラーリングされます。

00:09:38.000 -> 00:09:42.000
ローカリゼーション機能は、右から左への言語のミラーリングだけではありません。

00:09:42.000 -> 00:09:46.000
これは「テキストボックスを挿入」アイコンのローカリゼーションタブです。

00:09:46.000 -> 00:09:53.000
ラテン語とアラビア語のスクリプトだけでなく、他のさまざまな文字にもローカライズされたバージョンがあります。

00:09:53.000 -> 00:10:00.000
アラビア語のサポートにとって特に重要なケースの1つは、「ヘルプ」アイコンとしてよく使用される疑問符です。

00:10:00.000 -> 00:10:04.000
アラビア語では、疑問符はラテン語の疑問符の逆です。

00:10:04.000 -> 00:10:11.000
ヘルプアイコンにSFシンボルのアイコンを使用すると、余分な作業なしでこのバージョンを取得できます。

00:10:11.000 -> 00:10:17.000
慎重に考えなければならない画像の1つのクラスは、矢印やその他の方向指示器です。

00:10:17.000 -> 00:10:20.000
ここには4つの円の矢印のアイコンがあります。

00:10:20.000 -> 00:10:22.000
あなたは彼らが2つのペアになっていることに気づくでしょう。

00:10:22.000 -> 00:10:25.000
2つは左を指し、2つは右を指しています。

00:10:25.000 -> 00:10:35.000
左の2つだけを見ると、「arrow.backward.circle」と呼ばれていることがわかります。これは右から左に右を指すように反転します。

00:10:35.000 -> 00:10:41.000
もう1つは「arrow.left..circle」と呼ばれ、右から左に反転しません。

00:10:41.000 -> 00:10:48.000
SFシンボルは、右から左に反転させたい場合としたくないかもしれないアイコンで、全体を通してこの命名規則に従います。

00:10:48.000 -> 00:10:52.000
「前方」と「後方」のものは反転し、「左」と「右」のものは反転しません。

00:10:52.000 -> 00:11:06.000
「前方」または「後方」のアイデアを伝えるために矢印やその他の形状を使用している場合は、反転バージョンを使用し、矢印を使用して絶対的な方向を伝える場合は、反転しないバージョンを使用します。

00:11:06.000 -> 00:11:08.000
そして、「用語」チャートに行を追加しましょう。

00:11:08.000 -> 00:11:19.000
SFシンボルで画像を選択するときは、「左」と「右」は常にそれらの方向を指し、「前方」と「後方」はUI言語に応じて異なる方向を指すことを覚えておいてください。

00:11:19.000 -> 00:11:25.000
それでは、コントロールやその他のUIウィジェットが右から左にどのように処理されるかについて話しましょう。

00:11:25.000 -> 00:11:31.000
これは、図形のフォーマットインスペクタを示す英語とアラビア語のMac Keynoteサイドバーです。

00:11:31.000 -> 00:11:35.000
すべてが右から左に外観を反転させたことに注目してください。

00:11:35.000 -> 00:11:41.000
メニューインジケーターが右から左に左側に移動するポップアップメニューボタンがたくさんあります。

00:11:41.000 -> 00:11:45.000
いくつかのチェックボックスがあり、アラビア語では、チェックボックスはラベルの右側にあります。

00:11:45.000 -> 00:11:52.000
不透明度スライダーはアラビア語に変更され、最小値は右側に、最大値は左側にあります。

00:11:52.000 -> 00:11:56.000
そして、このインスペクターの他のすべてのコントロール全体で。

00:11:56.000 -> 00:11:59.000
素晴らしいニュースは、あなたが無料でこの行動を得ることです。

00:11:59.000 -> 00:12:06.000
すべてのUIフレームワークのすべての標準UIコントロールは、右から左の言語の外観を自動的に反転させます。

00:12:06.000 -> 00:12:12.000
しかし、これを望まないかもしれない状況や、それがどのように起こるかをある程度コントロールする必要がある状況があります。

00:12:12.000 -> 00:12:16.000
興味深いケースをいくつか見てみましょう。 

00:12:16.000 -> 00:12:21.000
テキストラベルとアイコンの両方が付いたボタンについて話しましょう。

00:12:21.000 -> 00:12:26.000
これは、「Move In」アニメーションのコントロールを示すKeynoteアニメーションインスペクタです。

00:12:26.000 -> 00:12:30.000
このインスペクタには、ラベルとアイコンの両方を備えた2つのボタンがあります。

00:12:30.000 -> 00:12:38.000
プレビューボタンの矢印はUI方向の変更で反転しますが、アニメーション方向メニューの矢印は反転しないことに注意してください。

00:12:38.000 -> 00:12:48.000
両方の裏面はUIの方向を持っていますが、方向制御がメニューではなくボタンのグループであれば、側面を変えたくないかもしれないとイメージすることができます。

00:12:48.000 -> 00:12:55.000
これを制御する方法を示すために、私はこれらの2つの例を小さなおもちゃのアプリケーションに分離しました。

00:12:55.000 -> 00:12:59.000
SwiftUIでそのUIを構築するためのコードは次のとおりです。

00:12:59.000 -> 00:13:01.000
ここに注意すべき興味深いことがいくつかあります。

00:13:01.000 -> 00:13:02.000
私たちはそれらを一度に1つずつ見ます。

00:13:02.000 -> 00:13:06.000
画像名から始めましょう。

00:13:06.000 -> 00:13:12.000
前に見たように、SFシンボルの画像では、反転するアイコンまたは反転しないアイコンを選択します。

00:13:12.000 -> 00:13:16.000
ここでは、「プレビュー」ボタンに「arrowtriangle.forward.fill」を使用しました。

00:13:16.000 -> 00:13:20.000
名前の「フォワード」は、右から左に反転することを示しています。

00:13:20.000 -> 00:13:24.000
方向ボタンには「arrow.left」と「arrow.right」を使用しました。

00:13:24.000 -> 00:13:29.000
名前の「左」と「右」は、右から左に反転しないことがわかります。

00:13:29.000 -> 00:13:33.000
AppKitまたはUIKitで作業している場合、これは同じように機能します。

00:13:33.000 -> 00:13:37.000
これは、Xcodeのストーリーボードエディタで「プレビュー」ボタンが選択されている私のアプリです。

00:13:37.000 -> 00:13:43.000
属性インスペクタの「画像」コントロールでボタンのアイコンを制御します。

00:13:43.000 -> 00:13:52.000
そして、コードでは、ボタンの「画像」プロパティでこれを設定すると、AppKitとUIKitの両方で基本的に同じように機能します。

00:13:52.000 -> 00:13:59.000
SwiftUIの例に戻ると、次の質問は、アイコンがラベルのどちら側に進むかをどのように制御するかです。

00:13:59.000 -> 00:14:02.000
これを行うには、ラベルスタイルを設定します。

00:14:02.000 -> 00:14:09.000
組み込みのTitleAndIconLabelStyleは、ユーザーの読み取り方向にラベルの前にアイコンを置きます。

00:14:09.000 -> 00:14:11.000
これは「左」ボタンに使用できます。

00:14:11.000 -> 00:14:17.000
他の2つのボタンでは、アイコンがユーザーの読み取り方向のラベルの後をたどるようにします。

00:14:17.000 -> 00:14:22.000
これを行うには、カスタムラベルスタイルが必要ですが、それはかなり簡単です。

00:14:22.000 -> 00:14:28.000
ラベルスタイルのmakeBody()メソッドは、HStackを作成し、タイトルとアイコンを追加するだけです。

00:14:28.000 -> 00:14:37.000
他のHStackと同様に、追加する順序は表示する順序を決定し、UIの方向に適した場合、順序は自動的に反転します。

00:14:37.000 -> 00:14:42.000
このテクニックは、ボタンだけでなく、ラベルを取ることができるあらゆるビューで機能します。

00:14:42.000 -> 00:14:47.000
もちろん、アイコンが「右」ボタンの側面を変えたくありません。

00:14:47.000 -> 00:14:51.000
UIの方向に関係なく、常に右側にあることを望みます。

00:14:51.000 -> 00:14:55.000
それは、このコードスニペットの最後の興味深いことに私たちをもたらします。

00:14:55.000 -> 00:15:01.000
SwiftUIのビューは、変更できるSwiftUI環境から方向性を拾います。

00:15:01.000 -> 00:15:09.000
これを行うには、ビューに「環境」修飾子を追加し、変更したいプロパティのキーと新しい値を与えます。

00:15:09.000 -> 00:15:19.000
ここでは、親から継承する可能性のある値に関係なく、常に左から右になるように、環境のlayoutDirectionプロパティをオーバーライドしています。

00:15:19.000 -> 00:15:25.000
このように環境を変更すると、ユーザーのUIの方向性に応答するすべてのSwiftUIビューで機能します。

00:15:25.000 -> 00:15:31.000
「左」ボタンと「右」ボタンを含むHStackに修飾子を適用したことに注意してください。

00:15:31.000 -> 00:15:46.000
ビューの環境に加えた変更は、その子ビューによって継承されるため、ここに置くと、HStackがボタンの順序を反転させるだけでなく、両方のボタンがラベルのレイアウトを反転させるのを防ぎます。

00:15:46.000 -> 00:15:57.000
そしてもちろん、「プレビュー」ボタンの親チェーンの何かに環境修飾子修飾子を適用していないので、私たちが望むように、必要に応じて反転します。

00:15:57.000 -> 00:16:13.000
要約すると、「左」ボタンは、組み込みのTitleAndIconLabelStyleを使用したため、左側にアイコンがあり、「プレビュー」ボタンと「右」ボタンは、IconOnRightLabelStyleと呼ばれるカスタムラベルスタイルを使用したため、右側にアイコンがあります。

00:16:13.000 -> 00:16:25.000
「左」ボタンと「右」ボタンは、それらを含むHStackに環境修飾子を追加し、レイアウトの方向を左から右に設定したため、ラベルの順序や内部配置を変更しません。

00:16:25.000 -> 00:16:32.000
「プレビュー」ボタンは、その修飾子がないため、ラベルの内部配置を逆にします。

00:16:32.000 -> 00:16:35.000
これはAppKitとUIKitでは動作が異なります。

00:16:35.000 -> 00:16:44.000
これらのフレームワークの両方で、ラベルに対するアイコンの位置は、Xcodeの属性インスペクタの「位置」コントロールで制御されます。

00:16:44.000 -> 00:16:53.000
このコントロールをクリックすると、メニューには、他のオプションの中でも、ラベルとアイコンを水平に揃える2つのオプションのペアがあることがわかります。

00:16:53.000 -> 00:17:03.000
「Leading」と「Left」があり、「Trailing」と「Right」があります。「Leading」と「Trailing」はUIの方向性に基づいて意味を変え、「Left」と「Right」は変わりません。

00:17:03.000 -> 00:17:07.000
AppKitでは、ボタンのimagePositionプロパティでこれを制御します。

00:17:07.000 -> 00:17:16.000
UIKitでは、ボタンの設定のimagePlacementプロパティです。つまり、最初にボタンの設定を設定する必要があるかもしれません。

00:17:16.000 -> 00:17:31.000
「プレビュー」ボタンのアイコンは、その位置を「トレーリング」に設定したため側面を変更し、「右」ボタンのアイコンは、その位置を「右」に設定したため、側面を変更しません。これにより、「用語」チャートの最後の行を埋めることもできます。

00:17:31.000 -> 00:17:35.000
「リード」と「トレーリング」という用語は、UIレイアウトについて議論するときによく出てきます。

00:17:35.000 -> 00:17:51.000
「前方」や「後方」のように、「左」や「右」とは対照的に使用されることがよくあります。何かの「先頭」エッジは、行の先頭または読者が読み始める画面またはウィンドウの側面に最も近いエッジで、左から左から右、右から右から左です。

00:17:51.000 -> 00:17:59.000
後縁は反対側で、行の終わりに最も近く、右は左から右、左は右から左です。

00:17:59.000 -> 00:18:08.000
ほとんどの場合、「左」と「右」の代わりにこれらを使用し、絶対的な方向に結びついているものにのみ「左」と「右」を保存します。

00:18:08.000 -> 00:18:10.000
別の興味深いケースを見てみましょう。

00:18:10.000 -> 00:18:16.000
これは、iPhoneのKeynote、英語、アラビア語のテキストフォーマットインスペクタの一部です。

00:18:16.000 -> 00:18:20.000
この特定のスクリーンショットには、4つのセグメント化されたコントロールがあります。

00:18:20.000 -> 00:18:30.000
上の2つ、インスペクタのページセレクタと標準の「ボールド/イタリック/アンダーライン」スタイルボタンは、UI言語に応じてセグメントの順序を逆にします。

00:18:30.000 -> 00:18:34.000
アラビア語を読まない場合は、ページセレクターで私を信頼する必要があります。

00:18:34.000 -> 00:18:40.000
私たちが見た他のコントロールと同様に、これはデフォルトです。この動作は無料で入手できます。

00:18:40.000 -> 00:18:45.000
他の2つのセグメント化されたコントロール、アライメントコントロールは、セグメントの順序を逆にしません。

00:18:45.000 -> 00:18:48.000
これは、彼らが物事を絶対的な方向に動かすからです。

00:18:48.000 -> 00:18:54.000
左アライメントは、それが行の始まりか終わりかに関係なく、左アライメントです。

00:18:54.000 -> 00:18:58.000
これらのコントロールが逆転するのを防ぐ方法を見てみましょう。

00:18:58.000 -> 00:19:01.000
私たちはすでにSwiftUIでこれを行う方法を知っています。

00:19:01.000 -> 00:19:06.000
環境のlayoutDirectionプロパティを左から右に変更する「環境」修飾子を適用するだけです。

00:19:06.000 -> 00:19:16.000
ここでは、このテクニックを使用して、アライメントコントロールが反転するのを防ぎますが、スタイルコントロールを通常どおり反転させています。

00:19:16.000 -> 00:19:18.000
UIKitでは、これは異なる方法で機能します。

00:19:18.000 -> 00:19:24.000
これは、セグメント化された制御動作をシミュレートするために設計されたXcodeのおもちゃのアプリケーションです。

00:19:24.000 -> 00:19:32.000
私は2つのセグメント化されたコントロールを持っています。1つは太字/イタリック/下線の動作を模倣し、もう1つはアライメントコントロールを模倣します。

00:19:32.000 -> 00:19:34.000
アライメントコントロールが選択されています。

00:19:34.000 -> 00:19:42.000
属性インスペクタには、「セマンティック」というラベルの付いたメニューがあります。そのメニューをクリックすると、5つの選択肢があります。

00:19:42.000 -> 00:19:46.000
このメニューは、セマンティックコンテンツ属性と呼ばれるものを制御します。

00:19:46.000 -> 00:19:55.000
これを使用して、これがどのような制御であるかを言い、システムはそれを使用して、UIの方向に基づいて外観を逆転させるかどうかを判断します。

00:19:55.000 -> 00:20:00.000
デフォルトは「Unspecified」で、コントロールの外観を反転させます。

00:20:00.000 -> 00:20:06.000
「再生」は、コントロールがメディア再生コントロールまたは再生コントロールのグループの一部であると言います。

00:20:06.000 -> 00:20:11.000
「空間」は、制御は空間制御またはそれらのグループの一部であると言います。

00:20:11.000 -> 00:20:16.000
空間制御は、空間内で物事を絶対的な方向に動かします。

00:20:16.000 -> 00:20:23.000
そして最後に、コントロールを常に左から右または右から左にレイアウトするように強制することができます。

00:20:23.000 -> 00:20:43.000
したがって、太字/イタリック/アンダーラインコントロールは、セマンティックコンテンツ属性が「未指定」に設定されているため、右から左にセグメントを反転し、セマンティックコンテンツ属性が「空間」に設定されているため、アライメントコントロールはセグメントを反転させません。これの素晴らしいところは、UISegmentedControlだけでは機能しないことです。

00:20:43.000 -> 00:20:50.000
すべてのUIViewにはセマンティックコンテンツ属性があり、そのコントロールの右から左へのすべての動作を制御します。

00:20:50.000 -> 00:21:02.000
サブコンポーネントを持つ標準のUIKitビューの場合、セマンティックコンテンツ属性は、そのビューのサブコンポーネントの位置がUI言語に基づいて反転するかどうかを決定します。

00:21:02.000 -> 00:21:05.000
AppKitでは、この種のやり方は異なります。

00:21:05.000 -> 00:21:21.000
すべてのNSControlsについて、Xcode属性インスペクタには「レイアウト」と「ミラー」とマークされた2つのメニューが含まれています。「レイアウト」メニューは、コントロールが左から右または右から左のレイアウトを使用するかどうかを表示するコントロールのuserInterfaceLayoutDirectionプロパティに対応します。

00:21:21.000 -> 00:21:24.000
通常、Interface Builderで作業するときはこれを変更しません。

00:21:24.000 -> 00:21:27.000
代わりに、「ミラー」メニューを使用します。

00:21:27.000 -> 00:21:42.000
「常に」に設定すると、ユーザーのUI言語が右から左にあるときにnibがロードされたときにuserInterfaceLayoutDirection、つまりコントロールのレイアウトが反転し、「Never」に設定すると、この動作を打ち負かし、レイアウトは同じままになります。

00:21:42.000 -> 00:21:48.000
この値を「Never」に設定することで、アライメントコントロールのレイアウトを同じに保ちます。

00:21:48.000 -> 00:21:57.000
Interface Builderで作業していない場合は、コントロールのuserInterfaceLayoutDirectionを左から右に直接設定することで、コードで同じことを達成します。

00:21:57.000 -> 00:22:12.000
ちなみに、userInterfaceLayoutDirectionはNSViewのプロパティですが、Interface BuilderではNSControlのインスタンスにのみ表示されるため、NSControlではないものを元に戻したい場合は、ここに示しているようなコードが必要です。

00:22:12.000 -> 00:22:15.000
先に進む前に、テキストについてもう少し話したいと思います。

00:22:15.000 -> 00:22:20.000
これは、Mac用iWorkの「ドキュメントパスワードの設定」ダイアログです。

00:22:20.000 -> 00:22:23.000
アラビア語版では、すべてが逆転していることがわかります。

00:22:23.000 -> 00:22:25.000
しかし、ラベルに何が起こったのかに注目してください。

00:22:25.000 -> 00:22:29.000
英語では、編集テキストフィールドに近づくように右揃えでした。

00:22:29.000 -> 00:22:32.000
アラビア語では、それらは左揃えです。

00:22:32.000 -> 00:22:38.000
言い換えれば、あなたが望むなら、自然なアライメント、後縁のアライメントの反対を持っています。

00:22:38.000 -> 00:22:42.000
MacのSwiftUIでこのレイアウトを取得するのはとても簡単です。

00:22:42.000 -> 00:22:45.000
フォームを使用して、テキストフィールドをまとめるだけです。

00:22:45.000 -> 00:22:51.000
しかし、私たちの例のように、ラベルの1つが複数行である場合、これは興味深いものになる可能性があります。

00:22:51.000 -> 00:22:56.000
最後のラベルを2行に展開すると、これになります。

00:22:56.000 -> 00:23:01.000
2つの1行のラベルは正しく右揃えされていますが、2行のラベルはそうではありません。

00:23:01.000 -> 00:23:04.000
問題は、一番下のラベルが本当に右揃えになっているということです。

00:23:04.000 -> 00:23:11.000
バウンディングボックスが右揃えになっているだけで、そのバウンディングボックス内の個々のテキスト行ではありません。

00:23:11.000 -> 00:23:17.000
最後のラベルにmultilineTextAlignment修飾子を追加することで、これを修正します。

00:23:17.000 -> 00:23:23.000
SwiftUIのテキスト配置は、1行以上の長さのテキストオブジェクトでのみ機能します。

00:23:23.000 -> 00:23:32.000
単一行のテキストオブジェクトの場合、境界ボックスはテキスト自体をしっかりと囲み、テキストオブジェクト全体を整列させることで整列します。

00:23:32.000 -> 00:23:45.000
また、テキストのバウンディングボックスを揃えるか、バウンディングボックス内の複数行のテキストを揃えるかにかかわらず、ユーザーのUIの方向に基づいて意味を変更する先頭と末尾の配置を選択できることに注意してください。

00:23:45.000 -> 00:23:55.000
UIの方向に関係なくアライメントを同じに保つために、環境修飾子を使用して、先ほど見たように環境のレイアウト方向を変更します。

00:23:55.000 -> 00:24:02.000
UIKitでは、テキストはデフォルトで自然に整列されますが、必要に応じて絶対方向の1つに変更できます。

00:24:02.000 -> 00:24:10.000
Interface Builderでは、コントロールはこのように見え、UILabelとUITextViewのtextAlignmentプロパティに対応します。

00:24:10.000 -> 00:24:16.000
点線の右端にあるボタンは、自然または最先端のアライメントを提供します。

00:24:16.000 -> 00:24:20.000
ラベルの配置は、ラベルのセマンティックコンテンツ属性に従います。

00:24:20.000 -> 00:24:28.000
他のボタンは、UIの方向やラベルのセマンティックコンテンツ属性に関係なく、左、右、または中央の配置を固定します。

00:24:28.000 -> 00:24:31.000
トレーリングエッジアライメントの設定は組み込まれていません。

00:24:31.000 -> 00:24:34.000
あなたはコードでそれをしなければなりません。

00:24:34.000 -> 00:24:36.000
AppKitでは、少し違います。

00:24:36.000 -> 00:24:44.000
まだアライメントコントロールがあり、基本的にUIKitと同じように動作しますが、userInterfaceLayoutDirectionとの対話方法は異なります。

00:24:44.000 -> 00:24:54.000
「ミラー」を「自動的に」に設定し、システムがuserInterfaceLayoutDirectionを右から左に設定すると、すべてのアライメント設定の意味が逆になります。

00:24:54.000 -> 00:25:03.000
したがって、「ミラー」が「自動的に」に設定されている場合、左のアライメントは本当に最先端のアライメントであり、右のアライメントは本当にトレーリングエッジのアライメントです。

00:25:03.000 -> 00:25:13.000
そこで、すべての標準UIウィジェットがユーザーの書き込み方向に合わせてレイアウトを自動的に反転する方法について話しましたが、必要に応じてそれを防ぐのはかなり簡単です。

00:25:13.000 -> 00:25:18.000
これは、画面上に個々のUIウィジェットを配置することにまで及びます。

00:25:18.000 -> 00:25:29.000
サブビューの配置を処理する標準ビューまたはビューコントローラーの1つを使用している場合、何もしなくても、必要に応じてレイアウトが自動的に反転します。

00:25:29.000 -> 00:25:34.000
テーブルビューとコレクションビューは、右から左の言語でも正しくスクロールを処理します。

00:25:34.000 -> 00:25:45.000
UINavigationControllerは、ユーザーの書き込み方向を反映するようにセグエアニメーションの方向を自動的に変更し、それに合わせて「戻る」ボタンも変更します。

00:25:45.000 -> 00:25:53.000
また、UIPageViewControllerは、ページングの方向とスワイプジェスチャーの意味を自動的に逆転させます。

00:25:53.000 -> 00:26:06.000
スタックビューを使用して子ビューを配置する場合を除いて、通常、これらのことを上書きしたくありませんが、すべてのビューはセマンティックコンテンツ属性を尊重し、サブビューのレイアウト方法を伝えるために使用します。

00:26:06.000 -> 00:26:13.000
標準のAppKitビューも同様で、テーブルビューとコレクションビューは右から左へのスクロールも処理します。

00:26:13.000 -> 00:26:21.000
ビューはすべて、サブビューのレイアウト方法を決定する際にuserInterfaceLayoutDirectionプロパティを尊重しますが、Interface Builderでは設定できません。

00:26:21.000 -> 00:26:24.000
あなたはコードでそれをしなければなりません。

00:26:24.000 -> 00:26:32.000
標準のSwiftUIビューは、環境のlayoutDirectionプロパティも反映しています。

00:26:32.000 -> 00:26:41.000
スタックビューとグリッドビューの代わりに自動レイアウトを使用してビューをレイアウトする場合、自動レイアウトはUIの方向を考慮して自動的に物事を逆転させます。

00:26:41.000 -> 00:26:53.000
水平方向の制約がある場合は、物事をリーディングエッジとトレーリングエッジに自動的に接続し、私たちが見たように、「リーディング」と「トレーリング」はUIの方向に応じて異なる意味を持ちます。

00:26:53.000 -> 00:26:58.000
ただし、必要に応じて、自動レイアウトの制約を絶対的な左右の方向に設定できます。

00:26:58.000 -> 00:27:06.000
これを行うには、制約の片側の方向をクリックし、ポップアップメニューで「言語の方向を尊重する」をオフにします。

00:27:06.000 -> 00:27:17.000
これにより、制約の両端の方向が「リード」と「トレーリング」から「左」と「右」に変わります。コードに自動レイアウトの制約を設定するには、さまざまな方法があります。

00:27:17.000 -> 00:27:19.000
これはそのうちの1つです。

00:27:19.000 -> 00:27:34.000
いくらやっても、覚えておくべきことは、UI言語の書き込み方向に関係なく、同じレイアウトの向きを本当に望む比較的まれな状況を除いて、「左」と「右」の代わりに「リード」と「トレーリング」を使用することです。

00:27:34.000 -> 00:27:37.000
さて、それはたくさん取り込むことだったので、一息ついてみましょう。

00:27:37.000 -> 00:27:45.000
主なポイントは、私たちがあなたのために右から左の言語を処理する作業のほとんどを行い、それを上書きする必要がある場合は、それを行う方法があるということです。

00:27:45.000 -> 00:27:48.000
用語のスライドをもう一度見てみましょう。

00:27:48.000 -> 00:27:58.000
「左」と「右」は常に左と右であり、他の用語は全体的なUIの方向に応じて意味を逆転させることを忘れないでください。

00:27:58.000 -> 00:28:04.000
締めくくる前に、もう1つの重要な問題を見てみましょう。それは数字の表示方法です。

00:28:04.000 -> 00:28:15.000
厳密には右から左の問題ではありませんが、多くの開発者にとって、アラビア語は英語で使用されているものとは異なる数字文字を使用してローカライズする最初の言語です。

00:28:15.000 -> 00:28:17.000
これらの数字はこんな感じです。

00:28:17.000 -> 00:28:27.000
数字にはさまざまな命名規則がありますが、ほとんどのヨーロッパ言語で使用されている数字を「ラテン」数字と呼び、アラビア語で使用される数字を「アラビア語-インド」数字と呼びます。

00:28:27.000 -> 00:28:30.000
独自の数字を持つ言語は他にもあります。

00:28:30.000 -> 00:28:36.000
これらはヒンディー語で使用されるデーヴァナーガリー語の数字です。ヒンディー語は異なる数字を使用する他の一般的な言語です。

00:28:36.000 -> 00:28:43.000
覚えておくべき重要なことの1つは、アラビア語もヒンディー語も常にネイティブの数字を使用していないことです。

00:28:43.000 -> 00:28:53.000
アラビア語の場合、国によって異なり、サウジアラビアなどの一部はネイティブ数字を使用し、アラブ首長国連邦などの他はラテン数字を使用します。

00:28:53.000 -> 00:28:57.000
個々のユーザーは、好みの数字を選択することもできます。

00:28:57.000 -> 00:29:05.000
ヒンディー語では、デフォルトでラテン数字を使用しますが、ユーザーは代わりにネイティブの数字を使用することを選択できます。

00:29:05.000 -> 00:29:09.000
あなたはすでに、このようなUI文字列を構築することは悪い考えであることを知っています。

00:29:09.000 -> 00:29:15.000
文字列はハードコード化されており、翻訳できず、メッセージは複数形などを処理するように変更されません。

00:29:15.000 -> 00:29:23.000
しかし、これが良くないもう一つの理由は、「peopleInChat」の値が常にラテン数字でレンダリングされることです。

00:29:23.000 -> 00:29:36.000
また、その解決策は、Stringで「ローカライズされた」initメソッドを使用することです。これは、アプリケーションのバンドル内の実際の文字列を検索し、stringsdictファイルがある場合は複数形を適切に処理します。

00:29:36.000 -> 00:29:39.000
素晴らしいニュースは、数字も正しく処理することです。

00:29:39.000 -> 00:29:47.000
ここでの「peopleInChat」補間の値は、ユーザーのロケールと設定の正しいローカライズされた数字でレンダリングされます。

00:29:47.000 -> 00:29:50.000
これは、SwiftUIのテキストビューでも正しく機能します。

00:29:50.000 -> 00:29:57.000
テキストビューの初期化子は、適切にローカライズされた数字で文字列の補間もレンダリングします。

00:29:57.000 -> 00:30:01.000
ユーザーに表示される文字列を構築するときは、常にString(localized:)を使用してください。

00:30:01.000 -> 00:30:12.000
+stringWithFormat:や数値を取るString init関数など、数値をフォーマットできるStringの他の多くのAPIは、常にラテン数字を使用します。

00:30:12.000 -> 00:30:17.000
注意すべきしわの1つは、このような数字を含む静的な文字列です。

00:30:17.000 -> 00:30:19.000
大したことじゃないの？

00:30:19.000 -> 00:30:23.000
あなたはそれを翻訳者に送り、彼らはそれを翻訳し、あなたはこれを手に入れます。

00:30:23.000 -> 00:30:33.000
これは多くの場所で正しいですが、サウジアラビアや他のいくつかの国では、これを見たいです。3に使用される文字を除いて、テキストは同じです。

00:30:33.000 -> 00:30:43.000
もちろん、アラビア語とインド数字を使用するアラビア語を話すロケールとラテン数字を使用するロケールを別々にローカライズすることもできますが、誰もそれをしないので、無駄になります。

00:30:43.000 -> 00:30:55.000
さらに悪いことに、アラビア語とヒンディー語の両方で、ユーザーは使用する数字を選択できるため、ロケールだけでなく、ユーザーの好みに基づいてローカリゼーションを選択する必要があります。

00:30:55.000 -> 00:31:04.000
解決策は、アラビア語またはヒンディー語のローカリゼーションを1つだけ持つことですが、コンパイル時に値を知っていても、実行時に番号を置き換えることです。

00:31:04.000 -> 00:31:10.000
Swiftでは、文字列補間を使用するだけでこれを行うことができます。

00:31:10.000 -> 00:31:16.000
数字と一緒に移動する他の要素がある場合、数字との相対的な配置も難しい場合があります。

00:31:16.000 -> 00:31:19.000
それはすべての権利から左の言語でさえ同じではありません。

00:31:19.000 -> 00:31:25.000
マイナス記号とパーセント記号は、アラビア語とヘブライ語の数字の異なる側面にあることに注意してください。

00:31:25.000 -> 00:31:28.000
実際、それは右から左への言語である必要はありません。

00:31:28.000 -> 00:31:34.000
左から右への言語であるトルコ語では、パーセント記号も左にあることに注意してください。

00:31:34.000 -> 00:31:41.000
そして、もちろん、ネイティブのアラビア語の数字を使用している場合は、まったく異なるパーセント記号を使用することを覚えておいてください。

00:31:41.000 -> 00:31:51.000
言い換えれば、パーセント記号、通貨記号、単位略語などを追加するようなことはしたくありません。

00:31:51.000 -> 00:31:56.000
代わりに、数値フォーマッタを使用して、パーセント記号、または通貨記号などを追加します。

00:31:56.000 -> 00:32:01.000
Swiftでは、これはすべての数値型のformatted()メソッドで簡単に行うことができます。

00:32:01.000 -> 00:32:21.000
この例のように、より大きな文字列の一部である場合、String(localized:)は、フォーマットされた番号、または他の文字列を含む実行時に文字列に置き換えられたものが、フォーマットされた番号の書き込み方向と周囲のメッセージがお互いを混乱させないようにするマークアップで囲まれていることを確認します。

00:32:21.000 -> 00:32:28.000
最後に、右から左に正しいことをしていることを確認するために、アプリをテストするためのヒントを1つ残したいと思います。

00:32:28.000 -> 00:32:34.000
アプリを右から左にテストするために、実行可能ファイルにアラビア語やヘブライ語のローカリゼーションがある必要はありません。

00:32:34.000 -> 00:32:38.000
開発言語で右から左への行動を実際にテストできます。

00:32:38.000 -> 00:32:42.000
これを行うには、Xcodeでスキームエディタを起動します。

00:32:42.000 -> 00:32:46.000
次に、[オプション]タブに移動し、[アプリ言語]メニューを探します。

00:32:46.000 -> 00:32:50.000
このメニューの下部には、たくさんの「疑似言語」オプションがあります。

00:32:50.000 -> 00:32:59.000
これらは、実際のローカリゼーションなしでローカリゼーションの問題をチェックできるように、さまざまな方法でUIを変換する偽の言語です。

00:32:59.000 -> 00:33:10.000
「右から左の疑似言語」オプションを選択して[実行]をクリックすると、アプリはまだ英語または開発言語のままになりますが、UIはすべて右から左に反転されます。

00:33:10.000 -> 00:33:11.000
そして、私が持っているのはそれだけです。

00:33:11.000 -> 00:33:21.000
右から左への言語のローカライズには、執筆方向の変化に関連するいくつかの問題に注意が必要ですが、システムはあなたのために重い作業のほとんどを行います。

00:33:21.000 -> 00:33:28.000
通常は絶対的な方向の周りに、この行動を選択したいと思うケースがあり、それは常に可能です。

00:33:28.000 -> 00:33:33.000
そして、すべての言語が数字をレンダリングするためにラテン数字を使用するわけではないことを覚えておいてください。

00:33:33.000 -> 00:33:38.000
これらのことを心に留めておいてください、そして物事を右から左にすることは難しくないはずです。

00:33:38.000 -> 23:59:59.000
。

