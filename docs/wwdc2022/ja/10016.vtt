WEBVTT

00:00:00.000 -> 00:00:09.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:09.000 -> 00:00:13.000
さて、こんにちは、そして「CarPlayでアプリからより多くのマイレージを引き出す」へようこそ。

00:00:13.000 -> 00:00:19.000
私の名前はアンドレです。今日のセッションを案内します。

00:00:19.000 -> 00:00:24.000
ご存知のように、CarPlayは車の中でiPhoneを使用するためのよりスマートで安全な方法です。

00:00:24.000 -> 00:00:30.000
今日のセッションは、あなたのアプリと、CarPlayでそれらを有効にする方法についてです。

00:00:30.000 -> 00:00:45.000
サポートされているアプリの種類を簡単に復習することから始めて、今年有効にするいくつかの新しいアプリの種類について話し、最後にアプリの開発をサポートするために利用可能にした新しいツールについて説明します。

00:00:45.000 -> 00:00:50.000
今日は、ナビゲーションアプリに固有の重要な新機能で締めくくります。

00:00:50.000 -> 00:00:55.000
これ以上苦労せずに、すぐにそれに入りましょう!

00:00:55.000 -> 00:01:00.000
CarPlayの最も基本的なことの1つは、ドライバー向けに作られていることです。

00:01:00.000 -> 00:01:06.000
積極的に運転している人は、アプリを構築する際に考慮すべき主なユーザーです。

00:01:06.000 -> 00:01:17.000
その結果、運転中に関連するユースケースのみを有効にし、運転中に行うべきではないユースケースを省略する必要があります。

00:01:17.000 -> 00:01:30.000
1回限りの設定、アプリへのサインイン、利用規約の閲覧など、運転前または運転後に行う方が良いので、アプリのCarPlay UIには表示されません。

00:01:30.000 -> 00:01:34.000
アプリがCarPlayに表示されるには、資格が必要であることに注意してください。

00:01:34.000 -> 00:01:42.000
利用可能にしたいアプリの種類に基づいて、Apple CarPlay開発者のウェブサイトで資格をリクエストできます。

00:01:42.000 -> 00:01:47.000
現在CarPlayでサポートしているアプリの種類は次のとおりです。

00:01:47.000 -> 00:01:59.000
これらは、ドライバーが運転中に実行したいと思う幅広いタスクをカバーしていますが、有効にしたい運転関連のアプリがさらにあると多くの人から聞いています。

00:01:59.000 -> 00:02:06.000
今年、燃料とドライビングタスクアプリの2つの新しいタイプをリストに追加することを発表できることを嬉しく思います。

00:02:06.000 -> 00:02:14.000
これらについては、すぐに詳しく説明しますが、まず、簡単なピットストップをして、テンプレートについて少し話しましょう。

00:02:14.000 -> 00:02:18.000
テンプレートは、CarPlayのアプリがUIを表示する方法です。

00:02:18.000 -> 00:02:25.000
アプリはデータを供給し、システムはあなたに代わって車両のディスプレイにUIを描画します。

00:02:25.000 -> 00:02:35.000
このテンプレートシステムは、アプリが採用するのが簡単で、アプリを道路に適したものにするなど、いくつかの利点があります。

00:02:35.000 -> 00:02:52.000
フォントサイズなどを心配する必要はありません。テンプレートは、UIの複雑さが低いことを確認するのに役立ち、最後に、アプリのUIはCarPlayの他のアプリと一致しているため、ユーザーは必要に応じて迅速にアクションを簡単に実行できます。

00:02:52.000 -> 00:03:04.000
同様に重要なことに、テンプレートは、画面のサイズや車で使用される入力デバイスの種類に関係なく、CarPlayをサポートするすべての車でアプリのUIがうまく機能することを確認します。

00:03:04.000 -> 00:03:16.000
あなたはまだ異なる構成でアプリをテストしたいと思うかもしれません、そして私たちはセッションの後半でテストについてもっと話しますが、テンプレートがあなたのためにほとんどの仕事の世話をすると言うだけで十分です。

00:03:16.000 -> 00:03:19.000
アプリを構築する際には、いくつかのテンプレートから選択できます。

00:03:19.000 -> 00:03:31.000
ボタンの配列を示すグリッドテンプレートから、テーブルを示すリストテンプレートまで、これらのテンプレートは、開発者としてもiOSユーザーとしても馴染みがあるはずです。

00:03:31.000 -> 00:03:39.000
最も重要なことは、CarPlay全体に表示されるので、CarPlayで運転しているユーザーに馴染みがあることです。

00:03:39.000 -> 00:03:43.000
直前に、CarPlayでサポートするさまざまな種類のアプリについて話しました。

00:03:43.000 -> 00:03:49.000
これらのテンプレートのいくつかは、他のものよりもそれらのタイプのいくつかに関連しています。

00:03:49.000 -> 00:03:55.000
このチャートは、どのタイプに応じて、アプリが使用できるテンプレートを理解するのに役立ちます。

00:03:55.000 -> 00:04:07.000
私はこれを読もうとすることはDMVの目の検査を受けるようなものであることを認識していますが、恐れないでください、あなたはオンラインの開発者ドキュメントでこの正確なチャートを見つけるでしょう。

00:04:07.000 -> 00:04:13.000
今ここで取り除くべきことは、あなたのアプリが使用できるテンプレートは、そのタイプに依存するということです。

00:04:13.000 -> 00:04:19.000
特定のアプリタイプに適切で適切なテンプレートのみが許可されます。

00:04:19.000 -> 00:04:26.000
テンプレートについて話したので、iOS 16で起動する新しいアプリの種類を詳しく見てみましょう。

00:04:26.000 -> 00:04:31.000
まず、新しいFuelingアプリの種類について話しましょう。

00:04:31.000 -> 00:04:37.000
覚えているかもしれませんが、iOS 14ではEV充電アプリのサポートを開始しました。

00:04:37.000 -> 00:04:48.000
これらのアプリは、EV充電器の場所を見つけるだけでなく、それ以上のことをします。たとえば、ユーザーが適切な充電ステーションに接続して起動するのに役立つ場合があります。

00:04:48.000 -> 00:04:56.000
多くの開発者から、この種の機能は電気自動車だけでなく、素晴らしいものだと聞いています。

00:04:56.000 -> 00:05:06.000
従来のガソリン対応車であろうと代替燃料車であろうと、この新しいカテゴリでは、給油アプリでCarPlayをサポートできます。

00:05:06.000 -> 00:05:17.000
多くのユーザーがナビゲーションアプリを使用して特定の場所を見つけて運転するため、給油アプリは単に場所を見つけるよりもCarPlay UIでより多くの機能を有効にする必要があります。

00:05:17.000 -> 00:05:22.000
アプリが有効にできることの素晴らしい例は、例えば、ガスポンプを起動することです。

00:05:22.000 -> 00:05:27.000
では、ドライビングタスクアプリケーションについて話しましょう。

00:05:27.000 -> 00:05:36.000
Driving Taskは、より幅広い種類の非常にシンプルなアプリを可能にするように設計された新しいタイプのCarPlayアプリです。

00:05:36.000 -> 00:05:49.000
これらのアプリの主な目的は、人々が運転中に行う必要があるタスクを可能にすることです。これは、運転中に実行するタスクだけでなく、実際にドライブに役立つタスクのためです。

00:05:49.000 -> 00:06:05.000
このタイプに該当するアプリの例には、カーアクセサリーの制御に役立つアプリ、運転または道路の状態と情報を提供するアプリ、ドライブの開始時と終了時のタスクを支援するアプリなどがあります。

00:06:05.000 -> 00:06:09.000
これらのより具体的な例を見てみましょう。 いくつか見てみましょう。

00:06:09.000 -> 00:06:16.000
まず、重要な道路情報をユーザーに知らせることができる道路状況アプリがあります。

00:06:16.000 -> 00:06:21.000
このアプリはCPPointOfInterestTemplateを使用して構築されました。

00:06:21.000 -> 00:06:31.000
このアプリを使用しているユーザーは運転中なので、このようなアプリは、ユーザーがいる場所の近くにある重要なアイテムの非常に短いリストを提供する必要があります。

00:06:31.000 -> 00:06:38.000
これは、ユーザーがドライブの前に完全なルート計画を行うのに役立つアプリを対象としていません。

00:06:38.000 -> 00:06:43.000
このアプリでは、ユーザーが場所を選択するときに表示されるものは次のとおりです。

00:06:43.000 -> 00:06:54.000
テキストのスペースは、この情報を目立たないようにするために意図的に制限されているため、ここで選択した言語で簡潔にする必要があります。

00:06:54.000 -> 00:07:01.000
次に、車のアクセサリーを制御するために設計されたアプリケーションを見てみましょう。この場合はトレーラーコントローラーです。

00:07:01.000 -> 00:07:12.000
このアプリは、CPInformationTemplateを使用して、接続されたアクセサリに関する基本情報と、ユーザーがアクションを実行するためのいくつかのボタンを提供します。

00:07:12.000 -> 00:07:17.000
この例では、これはCarPlayのアプリのUI全体であることに注意してください。

00:07:17.000 -> 00:07:20.000
他のスクリーンはありません!

00:07:20.000 -> 00:07:34.000
もちろん、このアプリには、ペアリングされたアクセサリを管理する機能など、他にも多くの機能がありますが、運転に不要な機能は、そのアプリのCarPlay UIには含まれていません。

00:07:34.000 -> 00:07:44.000
ユーザーは、車から出たときに、iPhoneのアプリのプライマリUIを使用して、運転以外のタスクを行うのが最善です。

00:07:44.000 -> 00:07:49.000
最後に、CPGridTemplateを使用したいくつかの例を見てみましょう。

00:07:49.000 -> 00:07:54.000
これは2つのボタンを持つ非常にシンプルなアプリです - それだけです!

00:07:54.000 -> 00:07:59.000
また、ユーザーは個人マイルまたはビジネスマイルとしてマイルを追跡できます。

00:07:59.000 -> 00:08:11.000
このアプリは、他の重要でないタスクを有効にすることなく、ユーザーが運転中に行う必要がある非常に簡単なタスクを可能にするため、新しい運転タスクアプリタイプに完全に適合します。

00:08:11.000 -> 00:08:14.000
シンプル、そして要点まで。

00:08:14.000 -> 00:08:23.000
このスタイルのUIが複数のタイプのアプリを提供できることを示すために、ほぼ同じUIを持つ別の例を次に示します。

00:08:23.000 -> 00:08:32.000
これは、CPGridTemplateを使用して、ユーザーが車内の乗員数を選択できるようにするエクスプレスレーン通行料トランスポンダーアプリです。

00:08:32.000 -> 00:08:40.000
それは前の例とまったく同じ目標を満たしており、もう一つの完璧なドライビングタスクアプリです。

00:08:40.000 -> 00:08:54.000
要約すると、ドライビングタスクアプリを設計する際には、運転中にユーザーが必要とする最小限の機能を提供し、数秒で達成できるタスクのみを有効にするシングルスクリーンアプリを作ることを検討してください。

00:08:54.000 -> 00:08:59.000
複雑またはまれなユースケースを有効にすることは避けるべきです。

00:08:59.000 -> 00:09:04.000
これの素晴らしい例は、初めてのセットアップまたは詳細な設定です。

00:09:04.000 -> 00:09:11.000
そして最後に、たとえそれが車に関連していても、運転中に必要のない機能をアプリに追加すべきではありません。

00:09:11.000 -> 00:09:13.000
台所の流し台、これはそうではありません。

00:09:13.000 -> 00:09:16.000
そして、それはドライビングタスクアプリでそれです。

00:09:16.000 -> 00:09:21.000
では、ギアを少しシフトして、CarPlayアプリをテストする方法について話しましょう。

00:09:21.000 -> 00:09:29.000
これを行うためのさまざまな方法を確認し、CarPlay Simulatorと呼ばれる新しいツールを紹介します。

00:09:29.000 -> 00:09:36.000
開発者として、CarPlay対応アプリをテストするためのいくつかの異なるツールを自由に利用できます。

00:09:36.000 -> 00:09:42.000
まず、CarPlayウィンドウが組み込まれているXcodeシミュレーターを使用できます。

00:09:42.000 -> 00:09:51.000
すでにXcodeシミュレータを使用してアプリの残りの部分をテストしている場合、これはCarPlay UIをすばやくテストするのに最適な方法です。

00:09:51.000 -> 00:10:00.000
第二に、実際のiPhoneでアプリをテストするために、もちろん、携帯電話を実際のCarPlay対応車両、またはアフターマーケットのヘッドユニットに接続することができます。

00:10:00.000 -> 00:10:14.000
最近まで、これは実際のiPhoneで実行されているアプリのCarPlay UIをテストする唯一の方法でしたが、今、あなたのお気に入りになるかもしれない3番目のオプションがあることを報告できてうれしいです - CarPlay Simulator!

00:10:14.000 -> 00:10:18.000
これをもっと詳しく見てみましょう。 

00:10:18.000 -> 00:10:20.000
それで、それは何ですか?

00:10:20.000 -> 00:10:27.000
CarPlay Simulatorは、CarPlay環境を複製するスタンドアロンのMacアプリケーションです。

00:10:27.000 -> 00:10:38.000
Appleの開発者Webサイトで「Additional Tools for Xcode」パッケージをダウンロードし、アプリを実行し、ケーブルを使用してiPhoneをMacに接続するだけです。

00:10:38.000 -> 00:10:44.000
CarPlayは携帯電話で起動し、実際の車に接続した場合と同じように実行されます。

00:10:44.000 -> 00:10:48.000
それで、大したことは何ですか、そしてなぜこれを使いたいのですか?

00:10:48.000 -> 00:10:51.000
まあ、いくつかの利点があります。

00:10:51.000 -> 00:11:00.000
まず第一に、CarPlay Simulatorを使用しているとき、CarPlayは実際の車と同じようにiPhoneで実行されています。

00:11:00.000 -> 00:11:10.000
これは、常に駐車場を行ったり来たりしたり、アフターマーケットのヘッドユニットを購入したりすることなく、携帯電話で実行されているアプリをテストできることを意味します。

00:11:10.000 -> 00:11:26.000
もう1つの大きな利点は、CarPlay Simulatorを使用しているときに携帯電話がMacに接続されているため、Xcodeでのデバッグでも、Instrumentsでパフォーマンスをチューニングする場合でも、Mac上の他のすべての素晴らしい開発者ツールを同時に使用できることです。

00:11:26.000 -> 00:11:34.000
同様に、iOS側では、アプリが実際のiPhoneで実行されているため、iPhoneの完全な機能にアクセスできます。

00:11:34.000 -> 00:11:43.000
一部のシナリオは、実際のCarPlayシステム、または現在のCarPlayシミュレータなしではテストできません。

00:11:43.000 -> 00:11:52.000
素晴らしい例は、ナビゲーションアプリの音声指示が、FMラジオのような車のネイティブオーディオソースと正しく混ざっていることをテストすることです。

00:11:52.000 -> 00:11:56.000
あなたは今、あなたの机の都合の良い時にこれをテストすることができます。

00:11:56.000 -> 00:12:06.000
最後になりましたが、CarPlay Simulatorを使用して、ディスプレイサイズが異なる車など、複数の異なる構成の車をテストすることもできます。

00:12:06.000 -> 00:12:10.000
CarPlay Simulatorが動作中どのように見えるか見てみましょう。

00:12:10.000 -> 00:12:11.000
だから、ここにあります。

00:12:11.000 -> 00:12:18.000
ご覧のとおり、接続されたiPhoneのCarPlayディスプレイは、いくつかのコントロールと並んでアプリ内に表示されます。

00:12:18.000 -> 00:12:22.000
これらのいくつかが何をするかを見てみましょう。

00:12:22.000 -> 00:12:31.000
画面の下部には、車内のさまざまなハードキーとノブコントロールをシミュレートするボタンがあります。

00:12:31.000 -> 00:12:38.000
CarPlayビューで直接クリックして、タッチスクリーン車両のタッチをシミュレートすることもできます。

00:12:38.000 -> 00:12:41.000
ウィンドウの上部には、いくつかのクイックコントロールがあります。

00:12:41.000 -> 00:12:55.000
制限UIボタンを使用すると、動いている車がCarPlayに画面上の特定のコンテンツを制限するように要求したときにシミュレートできます。たとえば、オーディオアプリのリストの内容を短縮できます。

00:12:55.000 -> 00:13:04.000
次の2つのボタンは、車がそれぞれUIとマップコンテンツの暗いまたは明るい外観を要求するときをシミュレートすることです。

00:13:04.000 -> 00:13:11.000
最後のボタンを使用すると、電話を切断してCarPlayに再接続することをすばやくシミュレートできます。

00:13:11.000 -> 00:13:22.000
このボタンを使用すると、携帯電話はMacに接続されたままになるため、Xcodeを使用してアプリでCarPlay再接続シナリオをデバッグできます。

00:13:22.000 -> 00:13:25.000
しかし、私がスキップした最初のボタンはどうですか?

00:13:25.000 -> 00:13:32.000
推測したように、これはより高度な機能を備えたセカンダリウィンドウをポップアップします。

00:13:32.000 -> 00:13:36.000
では、これらの高度な機能を見てみましょう。

00:13:36.000 -> 00:13:43.000
[一般]タブでは、メインのCarPlayディスプレイの表示サイズを選択できます。

00:13:43.000 -> 00:13:58.000
アプリケーションUIがテンプレートのみで構成されている場合は、異なるサイズを試して、UIが異なる車でどのように見えるかを見ることができますが、前に話したように、システムは関係なくすべてがうまく機能することを確認します。

00:13:58.000 -> 00:14:07.000
ただし、アプリがナビゲーションアプリの場合は、マップ描画コードが正しく機能するように、さまざまなサイズとアスペクト比を試すことが非常に重要です。

00:14:07.000 -> 00:14:10.000
アプリでテストするための推奨ディスプレイサイズをいくつか紹介します。

00:14:10.000 -> 00:14:14.000
「クラスター表示」タブを見てみましょう。

00:14:14.000 -> 00:14:20.000
ここでわかるように、インストルメントクラスターの2番目のディスプレイで車をシミュレートすることができます!

00:14:20.000 -> 00:14:30.000
ボックスをオンにして有効にし、セッションを再開するだけで、プライマリディスプレイの横にインストルメントクラスターの2番目のウィンドウが表示されます。

00:14:30.000 -> 00:14:34.000
繰り返しますが、これはナビゲーションアプリに最も関連しています。

00:14:34.000 -> 00:14:43.000
インストルメントクラスターディスプレイは、車のインストルメントクラスターの視野にドライバーの地図またはターンカードを表示するために使用されます。

00:14:43.000 -> 00:14:50.000
すぐにインストルメントクラスターについてもっとチャットしますが、それは新しいCarPlay Simulatorアプリのクイックツアーです。

00:14:50.000 -> 00:14:53.000
私たちは、あなたが私たちと同じくらい役に立つことを願っています!

00:14:53.000 -> 00:14:58.000
CarPlayがインストルメントクラスターにライブマップを描画する方法を見ました。

00:14:58.000 -> 00:15:00.000
しかし、あなたのナビゲーションアプリはどうですか?

00:15:00.000 -> 00:15:05.000
アプリにインストルメントクラスターのサポートを追加およびテストするにはどうすればよいですか?

00:15:05.000 -> 00:15:07.000
見てみましょう。 

00:15:07.000 -> 00:15:15.000
iOS 13では、ナビゲーションアプリをCarPlayダッシュボードに表示できるようにするためのAPIを追加したことを覚えているかもしれません。

00:15:15.000 -> 00:15:22.000
これを行うには、アプリのInfo.plistを編集してダッシュボードのサポートを宣言し、必要なデリゲートを実装しました。

00:15:22.000 -> 00:15:33.000
デリゲートは、ダッシュボードに表示されたり消えたりしたときにアプリに通知し、マップコンテンツを描画するためのUIWindowをアプリに渡します。

00:15:33.000 -> 00:15:35.000
それは簡単です。

00:15:35.000 -> 00:15:42.000
すでにこれを完了している場合は、まったく同じパターンに従うため、インストルメントクラスターのサポートを追加するという素晴らしいニュースがあります。

00:15:42.000 -> 00:15:49.000
私自身のナビゲーションテストアプリ、Space Roadsでこれをどのように行ったかを見てみましょう。

00:15:49.000 -> 00:15:59.000
Info.plistを編集して、インストルメントクラスターナビゲーションシーンのサポートを宣言し、必要なシーンセッションロールを追加しました。

00:15:59.000 -> 00:16:10.000
次に、CPTemplateApplicationInstrumentCluster SceneデリゲートとCPInstrumentClusterControllerDelegateを実装しました。

00:16:10.000 -> 00:16:20.000
これらは両方とも、コンテンツを描画するためのウィンドウを提供し、インストルメントクラスターの開始時と終了時に通知し、インストゥルメントクラスタービューを表示できるようにします。

00:16:20.000 -> 00:16:26.000
地図を車のインストルメントクラスターにライブで表示させるのに必要なのはそれだけです!

00:16:26.000 -> 00:16:34.000
これはすべてダッシュボードサポートの実装と非常によく似ていますが、インストルメントクラスターに固有の考慮事項がいくつかあります。

00:16:34.000 -> 00:16:40.000
まず第一に、インストルメントクラスターは、ユーザーがマップをズームインおよびズームアウトできるようにする場合があります。

00:16:40.000 -> 00:16:48.000
CPInstrumentClusterControllerDelegateを使用して、これをアプリに実装するのはあなたの責任です。

00:16:48.000 -> 00:16:57.000
同様に、アプリにコンパスや制限速度が含まれている場合、対応するデリゲートは、いつ描画するのが適切かをアプリに伝えます。

00:16:57.000 -> 00:17:05.000
最後に、インストルメントクラスタービューは、車のインストルメントクラスター内の他の要素によって部分的に隠されている可能性があることに注意してください。

00:17:05.000 -> 00:17:11.000
もちろん、iOSはすでにそのようなもの、安全な領域に対処するためのファーストクラスのメカニズムを持っています!

00:17:11.000 -> 00:17:28.000
ビューコントローラーのviewSafeAreaInsetsDidChangeをオーバーライドして、セーフエリアがいつ変更されるかを知り、クラスタービューのsafeAreaLayoutGuideを使用して、表示が保証されているビューの領域に重要なコンテンツを保持できます。

00:17:28.000 -> 00:17:36.000
たとえば、ユーザーの位置を示す青いルートラインがある場合は、重要な部分が安全なエリア内にあることを確認する必要があります。

00:17:36.000 -> 00:17:44.000
CarPlayアプリを構築する開発者として、いくつかの新機能を見て、アプリをテストするための新しいツールを見ました。

00:17:44.000 -> 00:17:47.000
それを実際に見てみましょう。 

00:17:47.000 -> 00:17:52.000
まず、私のMacでここから始めて、CarPlayシミュレーターをお見せします。

00:17:52.000 -> 00:18:02.000
アプリを実行していて、携帯電話を接続するだけです。

00:18:02.000 -> 00:18:05.000
そして、ほら、ここではCarPlayを実行しています。

00:18:05.000 -> 00:18:09.000
アプリをテストする際に、CarPlay Simulatorがどのように役立つか見てみましょう。

00:18:09.000 -> 00:18:18.000
アプリが主にテンプレートベースであっても、アプリ内のアートワークが明るい外観と暗い外観の両方でうまく機能することを確認できます。

00:18:18.000 -> 00:18:24.000
エクスプレスレーンアプリを実行させてください...

00:18:24.000 -> 00:18:30.000
また、ツールバーのボタンを使用して、明るい外観と暗い外観を切り替えることができます。

00:18:30.000 -> 00:18:35.000
私のアプリが両方のスタイルに異なるアートワークを提供していることに注目してください。

00:18:35.000 -> 00:18:38.000
素敵ですね。

00:18:38.000 -> 00:18:44.000
では、私が書いたナビゲーションテストアプリであるSpace Roadsに切り替えましょう。

00:18:44.000 -> 00:18:57.000
メイン構成パネルを使用して、マップ描画コードを別の画面サイズで試してみます。

00:18:57.000 -> 00:19:08.000
そして最後に、インストルメントクラスターディスプレイを有効にして、インストルメントクラスターのサポートをテストします。

00:19:08.000 -> 00:19:10.000
ここにあります。うまくいきます！

00:19:10.000 -> 00:19:18.000
以前、私はCarPlay Simulatorでアプリを完全にテストしたので、今では本物の車でうまく機能すると確信しています。

00:19:18.000 -> 00:19:20.000
やってみよう！だ！

00:19:20.000 -> 00:19:27.000
さて、ここで私たちは私の車の中にいます、そしてあなたが見ることができるように、私は私の携帯電話を車に接続し、CarPlayを実行しています。

00:19:27.000 -> 00:19:40.000
まず、接続されたトレーラーコントローラーアプリを実行してみて、テンプレートがノブ対応車両でアプリを機能させる方法をお見せしましょう。

00:19:40.000 -> 00:19:51.000
この特定の車両はタッチスクリーンとノブコントローラーの両方を備えていますが、多くのユーザーは運転中にノブコントローラーを使用するのが好きなので、ノブを使用してアプリがうまく機能することが重要です。

00:19:51.000 -> 00:20:03.000
ご覧のとおり、私はここで私のアプリのボタンに完全にアクセスできます、そして最高の部分は、私は特別なことをする必要はありませんでした - テンプレートは私のためにすべての仕事をしました!

00:20:03.000 -> 00:20:08.000
次に、私のナビゲーションアプリ「Space Roads」に切り替えましょう。

00:20:08.000 -> 00:20:10.000
アプリを起動します...

00:20:10.000 -> 00:20:14.000
そして、私たちはナビゲーションを開始します...

00:20:14.000 -> 00:20:16.000
そして、私はgoを押します。

00:20:16.000 -> 00:20:18.000
ブーム！

00:20:18.000 -> 00:20:24.000
私のアプリは、センターコンソールとインストルメントクラスターの両方でライブマップビューを表示するようになりました!

00:20:24.000 -> 00:20:29.000
ドライバーとして私の視界にライブマップがあるのは素晴らしいことです。

00:20:29.000 -> 00:20:33.000
あなたのナビゲーションアプリを使っているドライバーもきっと気に入ると思います。

00:20:33.000 -> 00:20:35.000
さて、それは私が今日あなたのために持っているすべてです。

00:20:35.000 -> 23:59:59.000
詳細については、developer.apple.com/carplayのCarPlay開発者ポータルを必ずチェックしてください。皆さん、ありがとうございます。♪♪

