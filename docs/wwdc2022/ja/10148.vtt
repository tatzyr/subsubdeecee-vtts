WEBVTT

00:00:00.000 -> 00:00:12.000
ジャスティン・レンネル:こんにちは、WWDCへようこそ。

00:00:12.000 -> 00:00:16.000
私の名前はジャスティンで、Apple Music開発チームのエンジニアです。

00:00:16.000 -> 00:00:22.000
今日は、Apple Music APIの使用の基礎に焦点を当てたMusicKitを紹介します。 を紹介します。

00:00:22.000 -> 00:00:29.000
このセッションでは、MusicKitクライアントフレームワークの概要と、それらがApple Music API Webサービスとどのように統合されるかを説明します。

00:00:29.000 -> 00:00:43.000
開発者としてアクセスする方法と、コンテンツとリソースのリクエスト、制限とページネーションを使用して大規模なリソースコレクションを操作する方法、検索エンドポイントでカタログ内のコンテンツを見つける方法など、Apple Music APIの使用に関する具体的な詳細について説明します。

00:00:43.000 -> 00:00:51.000
最後に、Apple Musicの購読者が利用できるいくつかのパーソナライズされた機能と、アプリでそれらへのアクセスを提供する方法について説明します。

00:00:51.000 -> 00:00:55.000
まず、MusicKitとApple Music APIの簡単な紹介から始めます。

00:00:55.000 -> 00:01:00.000
MusicKitは2017年にWWDCで初めて発表されました。

00:01:00.000 -> 00:01:07.000
それ以来、Apple Musicとの統合を容易にする改善を行い、追加機能のサポートを追加し続けています。

00:01:07.000 -> 00:01:12.000
MusicKitは、クライアントフレームワークとApple Music APIの組み合わせです。

00:01:12.000 -> 00:01:17.000
一緒に使用すると、アプリにApple Musicの機能を追加できます。

00:01:17.000 -> 00:01:28.000
カタログを検索したり、人気チャートを閲覧したりできる機能で、アーティスト、アルバム、プレイリストなど、Apple Musicのコンテンツを見つけて取得できます。

00:01:28.000 -> 00:01:41.000
ユーザーの同意を得て、MusicKitとApple Music APIを使用すると、加入者を認証して利用可能なコンテンツを再生し、音楽ライブラリ、推奨事項、最近再生した履歴などのパーソナライズされた機能にアクセスできます。

00:01:41.000 -> 00:01:48.000
MusicKitクライアントフレームワークは、加入者を認証し、デバイスで再生を開始および制御するために必要なAPIを提供します。

00:01:48.000 -> 00:01:59.000
クライアントフレームワークは、Appleプラットフォーム上のアプリ、JavaScriptを使用したWebアプリケーション、および利用可能なSDKを使用したAndroidアプリケーションで利用できます。

00:01:59.000 -> 00:02:04.000
AppleプラットフォームのMusicKitには、Apple Musicをアプリに統合するために必要なものがすべて揃っています。

00:02:04.000 -> 00:02:11.000
購読者は、アプリ内で認証またはサインアップして、再生を開始および制御し、他のパーソナライズされた機能にアクセスできます。

00:02:11.000 -> 00:02:19.000
利用可能なAPIは、リソースとページネーションのネイティブサポートにより、Apple Musicからコンテンツを検出してアクセスするための呼び出しを高速化します。

00:02:19.000 -> 00:02:28.000
Apple Music APIに直接アクセスしてリクエストすることについて、後で取り上げたトピックの多くは、Appleプラットフォーム上のMusicKitによって自動的に処理されます。

00:02:28.000 -> 00:02:42.000
Appleプラットフォーム用のアプリを書いている開発者は、これらのAPIの紹介のためのセッション「Meet MusicKit for Swift」と、より多くの機能のためのセッション「MusicKitでより多くのコンテンツを探索する」を見ることをお勧めします。

00:02:42.000 -> 00:02:47.000
ウェブ上のMusicKitを使用すると、JavaScriptを使用してApple Musicをアプリケーションに簡単に持ち込むことができます。

00:02:47.000 -> 00:02:55.000
Apple Musicのコンテンツを発見したり、購読者がサインインしてパーソナライズされた機能にアクセスしたり、ウェブサイトで直接コンテンツを再生したりすることができます。

00:02:55.000 -> 00:03:01.000
Apple Music APIへのフルアクセスにより、ユニークな音楽体験を生み出すことができます。

00:03:01.000 -> 00:03:06.000
MusicKitは、フル機能のメディアプレーヤーを含む組み込みのWebコンポーネントのコレクションを提供します。

00:03:06.000 -> 00:03:12.000
これらのコンポーネントにより、簡単に開始でき、エクスペリエンスに合わせて柔軟にカスタマイズできます。

00:03:12.000 -> 00:03:17.000
Android用MusicKitを使用すると、Apple MusicをAndroidアプリケーションに統合できます。

00:03:17.000 -> 00:03:27.000
Apple Musicの加入者の認証、コンテンツ再生の制御、Apple Music APIへのフルアクセスのサポートにより、豊かな音楽体験を構築できます。

00:03:27.000 -> 00:03:34.000
Apple Music APIは、発見機能とApple Musicカタログコンテンツへのアクセスを提供する一般的なJSONウェブサービスです。

00:03:34.000 -> 00:03:42.000
認証された加入者は、音楽ライブラリ、推奨事項、最近再生された履歴など、パーソナライズされた機能にアクセスできます。

00:03:42.000 -> 00:03:46.000
次に、アクセス方法を説明します。

00:03:46.000 -> 00:03:50.000
Apple Music APIにリクエストするには、開発者トークンが必要です。

00:03:50.000 -> 00:03:58.000
Appleプラットフォーム上のアプリケーションでは、アプリのMusicKitサービスを有効にすることで、自動トークン管理を利用できます。

00:03:58.000 -> 00:04:04.000
このサービスは、ここに示されているApple DeveloperポータルのApp IDセクションにあります。

00:04:04.000 -> 00:04:12.000
他のプラットフォーム上のアプリケーションでは、Apple DeveloperポータルでMusicKit開発者として登録することで、開発者トークンを入手できます。

00:04:12.000 -> 00:04:15.000
そこから、秘密鍵をリクエストしてダウンロードすることができます。

00:04:15.000 -> 00:04:20.000
JSON Webトークンを生成し、ダウンロードした秘密鍵で署名する必要があります。

00:04:20.000 -> 00:04:23.000
JSON Webトークンは2つの部分に分かれています。

00:04:23.000 -> 00:04:35.000
最初の部分は、ES256でなければならない署名アルゴリズム「alg」と、秘密鍵のダウンロードの一部として含まれているキー識別子「kid」を含む必須ヘッダーです。

00:04:35.000 -> 00:04:38.000
トークンの2番目の部分はクレームです。

00:04:38.000 -> 00:04:55.000
Apple Music APIには3つの必要なクレームがあります。発行者ID「iss」は、Apple DeveloperポータルのメンバーシップセクションにあるチームIDで、エポックからの秒数で表される「iat」時に発行され、有効期限は「exp」です。

00:04:55.000 -> 00:04:58.000
これは、発行された時間と同じ時間形式です。

00:04:58.000 -> 00:05:04.000
トークンは、発行されてから最大6か月後に有効期限が切れるように生成できます。

00:05:04.000 -> 00:05:11.000
ウェブアプリケーションの場合、あなたのウェブサイトにのみ有効なトークンを発行するオリジンクレームを提供することを奨励します。

00:05:11.000 -> 00:05:18.000
Apple Music APIへのすべてのリクエストに対して、有効な署名付きトークンを承認ヘッダーに提供する必要があります。

00:05:18.000 -> 00:05:23.000
Appleプラットフォーム上のアプリケーションでMusicKitサービスを有効にすると、これは自動的に行われます。

00:05:23.000 -> 00:05:29.000
ウェブ上のMusicKitは、Apple Music APIにリクエストを行うために生成したトークンで設定する必要があります。

00:05:29.000 -> 00:05:36.000
JSON Webトークンの生成の詳細については、Apple Music APIのドキュメントを参照してください。

00:05:36.000 -> 00:05:41.000
次に、Apple Music APIを使用してリソースをリクエストする方法を紹介します。

00:05:41.000 -> 00:05:46.000
リソースは、アーティスト、アルバム、曲、プレイリストなどのApple Musicコンテンツをモデル化します。

00:05:46.000 -> 00:05:49.000
それぞれに独自の対応するタイプがあります。

00:05:49.000 -> 00:05:56.000
リソースは、検索などの検出機能を介して、またはそれらの識別子を使用して、Apple Music APIエンドポイントから取得できます。

00:05:56.000 -> 00:06:02.000
以下は、識別子を使用してAPIからプレイリストリソースを取得するためのリクエストURLの例です。

00:06:02.000 -> 00:06:07.000
Apple Music APIはapi.music.apple.comでホストされています。

00:06:07.000 -> 00:06:13.000
URLのパスはRESTfulパターンを使用し、リソースまたは機能の場所を表します。

00:06:13.000 -> 00:06:18.000
場所の最初の要素は、現在バージョン1であるAPIのバージョンです。

00:06:18.000 -> 00:06:22.000
大幅な変更が導入されると、新しいバージョンが利用可能になる可能性があります。

00:06:22.000 -> 00:06:30.000
バージョンは、リソースの強化や新機能が利用可能になったとしても、既存の呼び出しとの下位互換性を維持します。

00:06:30.000 -> 00:06:37.000
Apple Musicカタログ内のリクエストについては、その場所の次のセクションは、取得する特定のカタログを表します。

00:06:37.000 -> 00:06:45.000
Apple Musicは世界的なストリーミングサービスであり、コンテンツはストアフロントと呼ばれる地域によって異なる場合があります。

00:06:45.000 -> 00:06:53.000
ストアフロントとコンテンツの可用性については、「Apple Music APIとのクロスリファレンスコンテンツ」というタイトルのセッションをご覧ください。

00:06:53.000 -> 00:07:10.000
この例では、米国の店頭のカタログからプレイリストを取得し、2文字の国コード「us」で示します。この場所の最後の部分は、そのタイプ「プレイリスト」とそれに続く識別子で表されるリソースのアイデンティティです。

00:07:10.000 -> 00:07:18.000
Apple Musicは多くの地域で利用可能であるため、オプションの言語タグクエリパラメータ「L」を使用してローカリゼーションのサポートが可能です。

00:07:18.000 -> 00:07:22.000
ここでは、英語の言語タグ「en-US」を指定しています。

00:07:22.000 -> 00:07:34.000
スペイン語でローカライズされたコンテンツを取得するには、タグ「es-MX」を指定できます。物事をシンプルに保つために、これらの例では言語タグを指定しません。その結果、ストアフロントのデフォルトのローカリゼーションになります。

00:07:34.000 -> 00:07:41.000
Apple Musicが利用可能なストアフロントとそのサポートされているローカリゼーションは、ストアフロントの参照エンドポイントにアクセスすることで見つけることができます。

00:07:41.000 -> 00:07:46.000
詳細については、Apple Music APIのドキュメントを参照してください。

00:07:46.000 -> 00:07:49.000
プレイリストのGETリクエストの作成について見てみましょう。

00:07:49.000 -> 00:07:54.000
これは、プレイリストリソースを含む「データ」配列を持つリソースコレクション応答を返します。

00:07:54.000 -> 00:07:59.000
リソースオブジェクトは、ID値とタイプでコンテンツのアイデンティティを示します。

00:07:59.000 -> 00:08:03.000
IDとタイプの組み合わせは、リソースの一意のアイデンティティを表します。

00:08:03.000 -> 00:08:08.000
href値は、リソースがフェッチされる可能性のあるAPI内の場所を示します。

00:08:08.000 -> 00:08:12.000
この場合、場所は私たちが要求したパスと同じであることに注意してください。

00:08:12.000 -> 00:08:17.000
コンテンツのメタデータ値は、リソースの属性マップにあります。

00:08:17.000 -> 00:08:24.000
このプレイリストキュレーターやトラックなど、他のリソースへの直接接続は、関係マップにあります。

00:08:24.000 -> 00:08:29.000
ここでは、プレイリストのメタデータ値を含む属性マップを詳しく見ていきます。

00:08:29.000 -> 00:08:39.000
プレイリストの名前、キュレーター名、説明属性を使用する右側のウィジェットで、これらの属性のいくつかを使用する例を見ていきます。

00:08:39.000 -> 00:08:46.000
playParamsは、コンテンツが加入者のためにストリーミング可能になったときを示す多くのリソースタイプの共通の属性です。

00:08:46.000 -> 00:08:53.000
これは、playParamsのないコンテンツが再生できないため、再生コントロールを有効にする必要があるかどうかを判断するために使用できます。

00:08:53.000 -> 00:09:05.000
アートワークは、画像の最大幅と高さの値と、画像を読み込めるURLを含む多くのリソースタイプのもう1つの一般的な属性です。

00:09:05.000 -> 00:09:10.000
Appleでは、開発者のフィードバックは非常に重要であり、すべての人のためのAPIとサービスを改善するのに役立ちます。

00:09:10.000 -> 00:09:15.000
今年は、最も要求された機能の1つを追加したことを発表できることを嬉しく思います。

00:09:15.000 -> 00:09:21.000
アーティストアートワークがApple Music APIで利用可能になり、プレーンなシルエットが過去のものになりました。

00:09:21.000 -> 00:09:27.000
すべての新規および既存のアプリは、アーティストリソースに追加されたアートワーク属性を探すことで、これらの画像のサポートを追加できます。

00:09:27.000 -> 00:09:31.000
アーティストアートワークは、他のコンテンツタイプのアートワークと同じように読み込むことができます。

00:09:31.000 -> 00:09:37.000
これは、先ほど見ていたプレイリストのアートワークURLの省略例です。

00:09:37.000 -> 00:09:42.000
アートワークのURLには、青で強調表示された「w」と「h」の高さトークンが含まれています。

00:09:42.000 -> 00:09:48.000
このURLを使用してアートワークをロードするには、これらのトークンをディスプレイに必要な解像度に置き換えてください。

00:09:48.000 -> 00:09:54.000
プレイリストのアートワークは正方形なので、幅と高さの両方で同じ解像度を使用します。

00:09:54.000 -> 00:10:02.000
400×400、300×300、200×200の解像度を要求する例を次に示します。

00:10:02.000 -> 00:10:09.000
各解像度で表示するための画像のスケールと、より小さな画像の場合はファイルサイズが縮小されます。

00:10:09.000 -> 00:10:15.000
すべてのリソースタイプには、そのリソースの共通または基本的なメタデータを表す一連のデフォルト属性があります。

00:10:15.000 -> 00:10:20.000
一部のリソースには、「拡張属性」と呼ばれる、フェッチされる可能性のある追加の属性があります。

00:10:20.000 -> 00:10:24.000
これらの拡張属性は、拡張クエリパラメータを使用して要求できます。

00:10:24.000 -> 00:10:29.000
例えば、Apple Musicのプレイリストのトラックは、曲かミュージックビデオのどちらかです。

00:10:29.000 -> 00:10:35.000
プレイリストに含まれるトラックの種類を知りたい場合は、trackTypes拡張属性をリクエストできます。

00:10:35.000 -> 00:10:41.000
拡張属性は、デフォルトの属性と一緒にリソースの属性マップに表示されます。

00:10:41.000 -> 00:10:49.000
プレイリストのトラックが曲ではなくミュージックビデオである場合は、再生ボタンをカスタマイズして視聴者に知らせるかもしれません。

00:10:49.000 -> 00:10:55.000
関係マップを見ると、このプレイリストから他のリソースへの直接接続がいくつか表示されます。

00:10:55.000 -> 00:11:00.000
多くのリソースには自動関係があり、コンテンツを直接要求するときに返されます。

00:11:00.000 -> 00:11:06.000
プレイリストの自動関係は、そのキュレーターとトラックです。

00:11:06.000 -> 00:11:11.000
関係は、このプレイリストのキュレーターなど、接続が何であるかを示すために名前が付けられています。

00:11:11.000 -> 00:11:18.000
関係を直接フェッチできるhrefの場所と、関連するリソースコレクションのデータ配列があります。

00:11:18.000 -> 00:11:25.000
プレイリストの場合、キュレーターの関係は自動的に関連します。つまり、関連するリソースのアイデンティティのみが表示されます。

00:11:25.000 -> 00:11:30.000
これにより、IDまたはhrefを使用してこのリソースに簡単にリンクできます。

00:11:30.000 -> 00:11:38.000
プレイリストにはすでにキュレーターの名前が属性として含まれているため、関連するキュレーターリソースに他のメタデータを含める必要がない場合があります。

00:11:38.000 -> 00:11:45.000
リソースのアイデンティティを使用して、キュレーターの名前をリンクにし、必要に応じてキュレーターに移動して追加のコンテンツを発見できるようにします。

00:11:45.000 -> 00:11:52.000
アートワークなどのプレイリストでキュレーターの追加情報を表示したい場合は、キュレーターのメタデータを取得する必要があります。

00:11:52.000 -> 00:11:58.000
Include パラメーターを使用して、関連するリソース メタデータの関係を指定します。

00:11:58.000 -> 00:12:04.000
一部のリソースタイプには、デフォルトでは含まれていない追加の関係があり、このパラメータで要求することもできます。

00:12:04.000 -> 00:12:09.000
関係を含めると、応答のサイズが大きくなり、アプリの速度に悪影響を及ぼす可能性があることに注意してください。

00:12:09.000 -> 00:12:16.000
関連するリソースから望まれる可能性のある多くの有用な値は、元のリソースの属性として直接見つけることができます。

00:12:16.000 -> 00:12:22.000
最高のパフォーマンスを得るには、応答に必要な関係とメタデータのみを含めることをお勧めします。

00:12:22.000 -> 00:12:30.000
リソースタイプとその利用可能な属性と関係に関する詳細情報は、Apple Music APIのドキュメントに記載されています。

00:12:30.000 -> 00:12:50.000
拡張属性、関係、およびビューと呼ばれる特別な関係の詳細については、「Apple Music APIでカタログを探索する」セッションをご覧ください。プレイリストの例の関係を再検討すると、プレイリストのトラックが自動的に含まれます。つまり、関連するトラックリソースの属性メタデータが応答に表示されます。

00:12:50.000 -> 00:12:58.000
関連するトラックの属性は、右側のウィジェットに表示されているアートワークやその他のメタデータを使用して、プレイリストのトラックリストを表示するために使用できます。

00:12:58.000 -> 00:13:04.000
前のセクションでは、カタログからプレイリストリソースとそのトラックを取得する例を示しました。

00:13:04.000 -> 00:13:09.000
このセクションでは、多数のリソースとの関係を処理する方法を説明します。

00:13:09.000 -> 00:13:13.000
関係の関連リソースは、そのデータ配列に表示されます。

00:13:13.000 -> 00:13:19.000
関連するリソースの数が少ない場合、すべてのリソースが1つの応答に表示されます。

00:13:19.000 -> 00:13:26.000
単一の応答に表示されるよりも多くの関連リソースとの関係は、ページと呼ばれる複数の部分でフェッチする必要があります。

00:13:26.000 -> 00:13:30.000
大きなプレイリストのトラック関係を例として使います。

00:13:30.000 -> 00:13:34.000
デフォルトでは、プレイリストの最初の100トラックのみが含まれています。

00:13:34.000 -> 00:13:41.000
プレイリストに100以上のトラックがある場合、追加のトラックは後続のページで取得する必要があります。

00:13:41.000 -> 00:13:45.000
以下は、100トラックを超えるプレイリストの応答例です。

00:13:45.000 -> 00:13:51.000
トラック関係のhrefとリソースの収集データは、先に見たように応答に表示されます。

00:13:51.000 -> 00:13:57.000
このプレイリストには応答に含まれていたよりも多くのトラックがあるため、次の場所がデータの兄弟として表示されます。

00:13:57.000 -> 00:14:03.000
次の場所は、コレクション内の残りのリソースをフェッチできる場所を表します。

00:14:03.000 -> 00:14:10.000
次の場所を取得すると、直接関係がフェッチされ、提供されたオフセットから始まる関係のリソース収集データが返されます。

00:14:10.000 -> 00:14:14.000
関係のデフォルトの制限は、各ページに適用されます。

00:14:14.000 -> 00:14:17.000
制限パラメータを指定することで、独自のページサイズを選択できます。

00:14:17.000 -> 00:14:25.000
ページサイズの制限は、ドキュメントにある特定の関係の最大ページサイズとの間ですることができます。

00:14:25.000 -> 00:14:34.000
関係のリソースコレクションに、ページで返されたリソースを超える追加のリソースが含まれている場合、次の場所は引き続きデータの兄弟として表示されます。

00:14:34.000 -> 00:14:38.000
リソースの収集が使い果たされると、次の場所は存在しません。

00:14:38.000 -> 00:14:42.000
次の場所は、リクエストに対して選択したページサイズを反映していないことに注意してください。

00:14:42.000 -> 00:14:48.000
デフォルトとは異なるページサイズを使用する場合は、各リクエストに制限パラメータを指定する必要があります。

00:14:48.000 -> 00:14:52.000
リソースコレクションに対するページへの応答から次の場所を常に使用してください。

00:14:52.000 -> 00:14:58.000
独自のオフセットを計算しようとすると、無効な場所の問題が発生したり、結果が重複したりする可能性があります。

00:14:58.000 -> 00:15:03.000
次のセクションでは、Apple Music APIを使用してApple Musicカタログのコンテンツを検索する方法を紹介します。

00:15:03.000 -> 00:15:09.000
Apple Music APIは、検索語を使用してカタログ内のコンテンツを見つける機能を提供します。

00:15:09.000 -> 00:15:15.000
検索要求は、/search を場所として、検索用語をパラメータとして、カタログリソース要求に似ています。

00:15:15.000 -> 00:15:24.000
制限を使用して、タイプパラメータと各タイプに含める結果の最大数を使用して、興味のあるコンテンツタイプを指定できます。

00:15:24.000 -> 00:15:29.000
要求された制限を超えてより多くの結果が見つかった場合、ページネーションを使用して検索を続行できます。

00:15:29.000 -> 00:15:33.000
「ポップ」という用語のアルバムや曲の検索に対する反応は次のとおりです。

00:15:33.000 -> 00:15:40.000
検索エンドポイントは、一致するコンテンツを持つ要求された各タイプのグループを含む結果オブジェクトを含む応答を返します。

00:15:40.000 -> 00:15:45.000
このリクエストでは、アルバムと曲のマッチが見つかりました。

00:15:45.000 -> 00:15:51.000
応答には、関連性に基づく結果グループの推奨順序を含むメタオブジェクトも含まれています。

00:15:51.000 -> 00:15:56.000
これは、一度に複数のコンテンツタイプを処理する検索エクスペリエンスを構築する場合に役立ちます。

00:15:56.000 -> 00:16:05.000
各結果グループには、結果がフェッチされた場所とhrefがあり、検索用語に関連するタイプの一致するリソースを含むリソース収集データ配列があります。

00:16:05.000 -> 00:16:12.000
結果グループのより多くの一致が利用可能な場合、グループには追加の一致がフェッチされる可能性のある次の場所が含まれます。

00:16:12.000 -> 00:16:18.000
次の場所を要求すると、オフセットから始めて、選択したタイプのより多くの結果が返されます。

00:16:18.000 -> 00:16:24.000
最後のセクションでは、Apple Music APIでパーソナライズされた機能へのアクセスについて説明します。

00:16:24.000 -> 00:16:29.000
Apple Music APIとMusicKitは、特定のユーザーにパーソナライズされた機能へのアクセスを提供します。

00:16:29.000 -> 00:16:39.000
これらの機能を使用すると、購読者が楽しむコンテンツを追加したり、新しいプレイリストを作成したりする機能など、Apple Musicライブラリのコンテンツを表示および検索するためのサポートを追加できます。

00:16:39.000 -> 00:16:43.000
パーソナライズされた推奨事項は、個々の音楽の好みに基づいて表面化することができます。

00:16:43.000 -> 00:16:52.000
そして、最近聴いた音楽を再発見して、中断したところから再開したり、まったく新しい体験を提供したりすることができます。

00:16:52.000 -> 00:16:56.000
パーソナライズされた機能は、Apple Musicをアクティブに購読している人が利用できます。

00:16:56.000 -> 00:17:04.000
これらの機能をサポートするには、まずMusicKitを使用してアプリでその人を認証し、音楽データにアクセスする許可を要求する必要があります。

00:17:04.000 -> 00:17:09.000
許可が付与されると、音楽ユーザートークンが利用可能になります。

00:17:09.000 -> 00:17:18.000
このトークンは、音楽ユーザートークンヘッダーのApple Music APIリクエストに追加され、パーソナライズされたデータへのアクセスを認証するために使用されます。

00:17:18.000 -> 00:17:23.000
音楽ユーザートークンは、アプリとユーザーが認証したデバイスに固有のものです。

00:17:23.000 -> 00:17:28.000
このトークンは、一度に1つのデバイスに対して許可が付与されるため、デバイス間で共有してはなりません。

00:17:28.000 -> 00:17:34.000
トークンは、人のサブスクリプションやパスワードの変更、またはアプリへのアクセスを取り消すと無効になる可能性があります。

00:17:34.000 -> 00:17:37.000
また、時間とともに期限切れになることもあります。

00:17:37.000 -> 00:17:42.000
認証は、再度サインインしてアプリの許可を与えるように促すことで更新できます。

00:17:42.000 -> 00:17:48.000
このトークンは、Appleプラットフォーム上のMusicKitとウェブ上のMusicKitによって自動的に管理されることに注意してください。

00:17:48.000 -> 00:17:51.000
詳細については、使用しているフレームワークのドキュメントを参照してください。

00:17:51.000 -> 00:18:08.000
今日のセッションでは、MusicKitとApple Music APIを使用してApple Musicをアプリに統合する方法、MusicKitクライアントフレームワークをサポートするプラットフォームを簡単に見て、Apple Music APIを使用してカタログのコンテンツにアクセスして見つける方法、および加入者が利用できるいくつかのパーソナライズされた機能を紹介しました。

00:18:08.000 -> 00:18:18.000
Appleプラットフォームでの今年のMusicKitのアップデートの詳細については、「MusicKitでより多くのコンテンツを探索する」セッションをチェックしてください。ご覧いただきありがとうございます。今年のWWDCの残りをお楽しみください。

00:18:18.000 -> 23:59:59.000
。

