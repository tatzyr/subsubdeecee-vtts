WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
オーウェン:こんにちは、あなたのiOSアプリをMacに持ち込むことを歓迎します。

00:00:14.000 --> 00:00:19.000
私の名前はオーウェンで、Mac Catalystのエンジニアです。

00:00:19.000 --> 00:00:39.000
変更なしでM1 MacでiOSアプリを出荷する場合でも、Mac Catalystでさらに進むことを考え始めている場合でも、さらに良くしたいCatalystアプリをすでに出荷している場合でも、アプリをMacで最高のものにするための新しいAPIとテクニックを共有することに興奮しています。

00:00:39.000 --> 00:00:49.000
しかし、まず、Mac Catalystで何が可能かを紹介する開発者が行った素晴らしい仕事のいくつかを披露したいです。

00:00:49.000 --> 00:01:00.000
Craftは、簡単に作成を開始し、美しいドキュメントを作成できる素晴らしいアプリで、App Storeの2021年のMac App of the Yearの受賞者です。

00:01:00.000 --> 00:01:10.000
そして、Mac Catalystのおかげで、この素晴らしい経験はデバイス間で利用できるので、あなたの次のアイデアが当たったときにいつでも準備ができています。

00:01:10.000 --> 00:01:23.000
DarkroomのスマートAI編集ツールは、写真のワークフローを合理化し、iPhoneやiPadで現場で編集を開始し、Mac Catalystアプリで自宅で仕上げることができます。

00:01:23.000 --> 00:01:36.000
優れたデザイン、革新性、創意工夫でApple Design Awardを受賞し、2018年からApp Store Editor's Choiceアプリとなっています。

00:01:36.000 --> 00:01:42.000
夜空は、あなたのコンピュータから直接宇宙を探索する素晴らしい方法です。

00:01:42.000 --> 00:01:51.000
星座について学び、月、惑星、衛星の詳細な3Dモデルで詳しく見ることができます。

00:01:51.000 --> 00:01:59.000
それは、そのデザインと息をのむようなビジュアルで複数のウェビー賞とロヴィ賞を受賞しています。

00:01:59.000 --> 00:02:15.000
Asphalt 9 - Legendsは爽快なハイオクタンレースシミュレーションであり、Apple Design Awardを受賞した唯一のレースゲームであり、アクションはMac Catalystバージョンで大画面でさらにエキサイティングです。

00:02:15.000 --> 00:02:23.000
さて、あなたのアプリのためにMacで素晴らしい体験を生み出すことができるすべての方法について説明します。

00:02:23.000 --> 00:02:35.000
既存のiOSアプリをMacに取り込む最も簡単な方法であるM1でiOSアプリをネイティブに実行するためのいくつかの新しいオプションから始めます。

00:02:35.000 --> 00:02:44.000
次に、XcodeでMac Catalystの実行先を追加し、変更点を説明します。

00:02:44.000 --> 00:02:53.000
新しいデスクトップクラスのiPad APIを採用すると、Catalystアプリが無料で得られる新しい動作を披露します。

00:02:53.000 --> 00:03:01.000
その後、新しいMac Catalyst APIで可能になったMac固有の改良を掘り下げます。

00:03:01.000 --> 00:03:09.000
M1を搭載したMac上のネイティブiOSアプリのいくつかの新しいオプションから始めます。

00:03:09.000 --> 00:03:14.000
あなたのiOSアプリは、Mac App StoreのM1 Macですでに利用可能です。

00:03:14.000 --> 00:03:22.000
オプトアウトしていない限り、アプリは「iPhoneとiPadのアプリ」タブの検索で見つかります。

00:03:22.000 --> 00:03:29.000
そして、Macでのアプリ体験を向上させることができるいくつかの新しい追加があります。

00:03:29.000 --> 00:03:38.000
Info plistに追加できる新しいキーが2つあり、iOSアプリをMacで起動する方法を指定できます。

00:03:38.000 --> 00:03:51.000
これらのキーはどのSDKバージョンにもバインドされておらず、macOS 12.1より前のiOSとMacでは無視されるため、恩恵を受けるアプリに追加しても安全です。

00:03:51.000 --> 00:04:03.000
最初のキー「UISupportsTrueScreenSizeOnMac」は、アプリが遭遇する可能性のあるさまざまなディスプレイ構成に備えていることを示しています。

00:04:03.000 --> 00:04:13.000
このようにして、アプリは互換性のあるiPadサイズではなく、真の画面サイズとピクセル密度を取得します。

00:04:13.000 --> 00:04:24.000
2番目のキー「UILaunchToFullScreenByDefaultOnMac」は、アプリが起動するとすぐにフルスクリーンモードに入ることを好むことをシステムに伝えます。

00:04:24.000 --> 00:04:35.000
これらの2つのキーは、特にゲームやマルチメディアアプリでうまく連携し、ピクセルパーフェクト、エッジツーエッジ、フルスクリーン体験を提供します。

00:04:35.000 --> 00:04:43.000
これらのキーは、受賞歴のあるSky:Children of the Lightによって採用され、すぐに没入型体験を提供します。

00:04:43.000 --> 00:04:52.000
ゲームが発売されるとすぐに、画面を豊かなディテールで満たすことで、美しい探検の世界にあなたを引き込みます。

00:04:52.000 --> 00:05:08.000
Macでのアプリ体験を向上させるもう1つの方法は、キーボード、マウス、トラックパッドの入力をiOSのマルチタッチジェスチャーとアプリが期待するデバイスの動きに自動的に変換するTouch Alternativesです。

00:05:08.000 --> 00:05:15.000
私たちはすでに、アプリストアで最も人気のあるゲームの多くに組み込みのタッチ代替サポートを追加しました。

00:05:15.000 --> 00:05:24.000
起動すると、タッチコントロールがキーボードとマウスまたはトラックパッドにどのように変換されるかを説明するチュートリアルが自動的に表示されます。

00:05:24.000 --> 00:05:35.000
たとえば、矢印キーを使用してウィンドウの中央からスワイプをシミュレートし、スペースバーを使用してタップを実行できます。

00:05:35.000 --> 00:05:48.000
自動タッチ代替を選択するには、アプリで「com.apple.uikit.inputalternatives.plist」という名前の新しいplistファイルを作成します。

00:05:48.000 --> 00:06:01.000
まず、「enabled」の文字列値を持つ「defaultEnablement」というキーを追加します。これは、Touch Alternativesがすぐにオンにする必要があることをシステムに伝えます。

00:06:01.000 --> 00:06:05.000
その下に、「requiredOnboarding」という別のキーを追加します。

00:06:05.000 --> 00:06:14.000
これは、アプリに最適なコントロールを決定したリストを含む配列です。

00:06:14.000 --> 00:06:27.000
タップ、チルト、ドラッグ、スワイプ、トラックパッドからの直接タッチ入力の5つの異なるコントロールオプションをオンボードする選択肢があります。

00:06:27.000 --> 00:06:41.000
Touch Alternativesを有効にすると、これらのコントロールはすべてアクティブになりますが、アプリにとって最も意味のあるコントロールを決定し、オンボーディングplistにハイライトしたいコントロールのみを追加する必要があります。

00:06:41.000 --> 00:06:50.000
これは、アプリがMacで実行されたときに検出され、最初の起動時に、それらのコントロールを強調するオンボーディングシートが表示されます。

00:06:50.000 --> 00:07:02.000
アプリの設定では、plistで指定された優先コントロールとすべてのコントロールの表示を切り替えることができます。

00:07:02.000 --> 00:07:09.000
もちろん、最良の選択肢は、キーボードとカーソルのサポートをアプリに直接実装することです。

00:07:09.000 --> 00:07:19.000
これにより、キーボードが接続されたiPadやMacを含むすべてのデバイスでアプリが正常に動作することを確認します。

00:07:19.000 --> 00:07:28.000
詳細については、「アプリでハードウェアキーボードをサポート」と「トラックパッドとマウス入力を処理」のビデオをご覧ください。

00:07:28.000 --> 00:07:35.000
今、私はすぐにMac Catalystアプリになるプロセスをカバーします。

00:07:35.000 --> 00:07:52.000
プロジェクト設定にMac Catalystの宛先を追加すると、アプリは自動的にすべてのMacで実行できる完全なMac Catalystアプリに変換され、Mac Catalyst APIを使用してさらにカスタマイズできます。

00:07:52.000 --> 00:08:04.000
また、ネイティブのAppKitスタイルのコントロールを提供し、アプリのコンテンツがネイティブスケールでレンダリングされるように、Mac用のインターフェイスを最適化することもできます。

00:08:04.000 --> 00:08:11.000
チームが取り組んでいるMarkdownデモアプリを使用して、新しいiPadの機能を強調します。

00:08:11.000 --> 00:08:18.000
最初にMacに持ち込んだとき、「Scaled to Match iPad」モードで実行されています。

00:08:18.000 --> 00:08:25.000
Optimize for Macに切り替えると、多くの変更が自動的に行われます。

00:08:25.000 --> 00:08:29.000
横に並べて比較すると、違いは明らかです。

00:08:29.000 --> 00:08:39.000
アプリがMac用に最適化されると、UINavigationBarは豊富なNSToolbarに変換され、ネイティブのAppKitコントロールが提供されます。

00:08:39.000 --> 00:08:43.000
この翻訳は、他のコントロールでも発生します。

00:08:43.000 --> 00:08:47.000
また、テキストサイズも調整されます。

00:08:47.000 --> 00:08:56.000
iPadのイディオムのテキストはiPadサイズでレンダリングされ、その後、元のサイズの77%に縮小されます。

00:08:56.000 --> 00:09:04.000
Macイディオムのテキストは、ピクセルパーフェクトスケールで行われるネイティブMacフォントレンダリングで処理されます。

00:09:04.000 --> 00:09:10.000
これは、テキストが常に鮮明に見えることを保証するので、私たちのアプリにとって理想的です。

00:09:10.000 --> 00:09:24.000
アプリがMac Catalystにオプトインした上で、それがどれほどうまく機能するかを確認し、iPadOS 16の新しいAPIによって提供される新しい自動Macの動作を深く掘り下げたい。

00:09:24.000 --> 00:09:37.000
「デスクトップクラスのiPadに会う」と「デスクトップクラスのiPadアプリを構築する」をすでに見ている場合は、iPadOS 16でアプリを強化するための多くの新しいツールについて学びました。

00:09:37.000 --> 00:09:43.000
そして、これらの新しいAPIは、ネイティブのMac表現に美しく変換されます。

00:09:43.000 --> 00:09:49.000
マークダウンアプリを見学し、これらの新しい行動のいくつかを強調します。

00:09:49.000 --> 00:09:55.000
コントロールとナビゲーションは、UINavigationBarからNSToolbarに移動します。

00:09:55.000 --> 00:10:01.000
また、ツールバーをまだ作成していない場合は、自動的に作成します。

00:10:01.000 --> 00:10:09.000
すでにCatalystで独自のNSToolbarを管理している場合は、邪魔にならないようにします。

00:10:09.000 --> 00:10:15.000
センターアイテムコントロールはNSToolbarItemsになります。

00:10:15.000 --> 00:10:32.000
ドキュメントベースのアプリの場合、ウィンドウタイトルにドキュメント名が表示され、アクセシビリティシステム設定で「ウィンドウタイトルアイコンを表示」が有効になっている場合、ファイルプロキシアイコンもMacで期待どおりに表示されます。

00:10:32.000 --> 00:10:42.000
また、ナビゲーションコントローラーを使用すると、戻るボタンやその他のナビゲーションコントロールもツールバーに持ち込まれます。

00:10:42.000 --> 00:10:53.000
さらに、ファイルメニューに新しいドキュメント中心のメニュー項目が表示されます。複製、移動、名前の変更、名前を付けてエクスポートします。

00:10:53.000 --> 00:11:07.000
これらのメニュー項目を有効にするには、レスポンダーチェーン内のオブジェクトがUIResponderの複製、移動、名前変更、およびエクスポート機能を上書きすることを確認します。

00:11:07.000 --> 00:11:13.000
アプリがこれらのファイルメニュー項目を必要としない場合は、UIMenuBuilderで削除する必要があります。

00:11:13.000 --> 00:11:20.000
アプリデリゲートにbuildMenuメソッドを実装して、アプリメニューを制御します。

00:11:20.000 --> 00:11:28.000
新しいドキュメントメニュー項目のUIMenuIdentifier値は.documentです。

00:11:28.000 --> 00:11:42.000
アプリに検索バーが含まれている場合、自動的にNSToolbarにも引き込まれ、最初にクリック時にバーに展開する検索ボタンとして表示されます。

00:11:42.000 --> 00:11:51.000
それをバックアップするUISearchTextFieldはNSToolbarItem内でホストされており、これはカスタムビューでも利用できます。

00:11:51.000 --> 00:12:00.000
検索候補メニューと検索スコープバーも、ネイティブのAppKitコントロールに変換されます。

00:12:00.000 --> 00:12:15.000
デスクトップクラスのiPad機能を採用することで無料で得られるすべての新しいMacの動作に加えて、マルチウィンドウとツールバーの動作を改善するために、いくつかの新しいCatalyst固有のAPIも追加しました。

00:12:15.000 --> 00:12:25.000
Markdownアプリをもう一度確認し、古いAPIと新しいAPIを組み合わせて、これらのMac固有の機能を追加します。

00:12:25.000 --> 00:12:33.000
既存のMac Catalyst APIから、アプリを本当に強化するいくつかを選びました。

00:12:33.000 --> 00:12:39.000
ネイティブコントロールと自動NSToolbarを取得するために、Macのイディオムを採用しました。

00:12:39.000 --> 00:12:53.000
カスタムポインタを追加したので、カスタムスプリットビューの中央にあるスライダーハンドルの上にマウスを移動すると、スプリットのサイズを変更できることを示す水平ダブル矢印にポインタが切り替わります。

00:12:53.000 --> 00:13:02.000
そして、UIApplicationSupportsPrintCommand plistキーで印刷サポートを追加しました。

00:13:02.000 --> 00:13:08.000
アプリを検討するときは、これらの機能をすべて追加する必要があると感じないでください。

00:13:08.000 --> 00:13:14.000
代わりに、作成するアプリの種類と、どの機能が最適かを考えてください。

00:13:14.000 --> 00:13:23.000
MacとMacのCatalystヒューマンインターフェースガイドラインをチェックして、使用している他のアプリでインスピレーションを探してください。

00:13:23.000 --> 00:13:28.000
これらの機能が実装されているため、アプリはすでに素晴らしい場所にいます。

00:13:28.000 --> 00:13:34.000
そして今、いくつかの新しいMac Catalyst APIで、私はさらに多くのことを行うことができます。

00:13:34.000 --> 00:13:46.000
アプリのウィンドウフレームとコントロールをカスタマイズしたり、NSToolbarにUIViewコンテンツを表示したり、ツールバーアイテムからポップオーバーを表示したりするための新しいオプションを追加しました。

00:13:46.000 --> 00:13:56.000
これらの新しいAPIを使用して、WindowsからMacでアプリをさらに改善します。

00:13:56.000 --> 00:14:02.000
Catalystアプリは、既存のUIWindowScene APIを使用して複数のウィンドウをサポートしています。

00:14:02.000 --> 00:14:22.000
また、macOS Venturaの新機能では、トラフィックライトウィンドウコントロールのスタイルを設定し、プログラムでウィンドウのサイズを変更して再配置し、特定のシーンでフルスクリーンを無効にすることで、アプリウィンドウをさらにカスタマイズできるAPIを追加しました。

00:14:22.000 --> 00:14:30.000
これらのツールを使用して、マークダウンアプリに機能を追加し、マークダウン構文で便利な補助パネルを表示します。

00:14:30.000 --> 00:14:41.000
このパネルは、新しいジオメトリ要求APIでサイズが小さくなり、最小化ボタンとズームボタンが無効になります。

00:14:41.000 --> 00:14:49.000
シーン作成時に、シーンデリゲートの「scene willConnectToセッション」メソッドで、目的のフレームを作成します。

00:14:49.000 --> 00:14:55.000
常にeffectiveGeometryから現在のフレームから始めるのは良い習慣です。

00:14:55.000 --> 00:15:05.000
シーンが作成される前に、これはCGRectNullに初期化され、その値はシステムが最初のシーン作成のために無視することを知っています。

00:15:05.000 --> 00:15:20.000
サイズを変更し、新しいUIWindowScene.macGeometryPreferencesオブジェクトを作成し、フレームをsystemFrame引数として渡すことで、シーンに新しいフレームを与えます。

00:15:20.000 --> 00:15:25.000
次に、scene.requestGeometryUpdate()メソッドを使用して更新を送信します。

00:15:25.000 --> 00:15:36.000
これは要求であるため、システムは新しいジオメトリを拒否する権利を留保します。その場合、詳細とともにエラーハンドラコールバックを呼び出します。

00:15:36.000 --> 00:15:52.000
ここに示すように、シーンwillConnectToSessionメソッドで完了すると、リクエストはアプリケーションの最初の起動に適用されますが、後の起動時にシステムによって実行される該当する状態の復元に取って代わられます。

00:15:52.000 --> 00:16:09.000
また、これは小さなヘルパーパネルであるため、新しいwindowScene windowingBehaviorsオブジェクトから最小化ボタンを無効にし、sizeRestrictionsの新しいプロパティからウィンドウをフルスクリーンにする機能も無効にします。

00:16:09.000 --> 00:16:16.000
この新しいMarkdownヒントウィンドウが表示されると、要求したサイズで表示されます。

00:16:16.000 --> 00:16:26.000
黄色の最小化と緑のズームウィンドウのコントロールボタンは無効になっており、赤い閉じるボタンのみが残ります。

00:16:26.000 --> 00:16:30.000
これらのオプションは、シーンの作成のためだけに予約されているわけではありません。

00:16:30.000 --> 00:16:44.000
シーンの生涯のいつでも、読み取り専用のeffectiveGeometryプロパティから現在のフレームを確認し、必要に応じて変更し、新しいジオメトリの更新をリクエストできます。

00:16:44.000 --> 00:16:53.000
これは、ウィンドウの原点を変更し、サイズを同じに保つ方法を示す別の例です。

00:16:53.000 --> 00:16:57.000
幾何学には2つの重要な側面を心に留めておく必要があります。

00:16:57.000 --> 00:17:10.000
まず、systemFrameはMacデスクトップ上のウィンドウのフレームを指示するため、systemFrameプロパティの1ポイントのサイズは常に1つのAppKitポイントのサイズです。

00:17:10.000 --> 00:17:16.000
アプリがMac用に最適化されている場合、これはUI要素と同じスケールです。

00:17:16.000 --> 00:17:24.000
ただし、アプリがiPadに合わせてスケーリングされている場合、77%のスケールファクターが異なります。

00:17:24.000 --> 00:17:31.000
第二に、座標空間の原点がメインディスプレイの左上隅です。

00:17:31.000 --> 00:17:41.000
複数のディスプレイがある場合、メインディスプレイはシステム表示設定のメニューバーを表示するものです。

00:17:41.000 --> 00:17:48.000
新しいMac Catalyst APIを使用すると、3つのウィンドウコントロールボタンのそれぞれの状態を制御できます。

00:17:48.000 --> 00:18:07.000
UIWindowSceneの新しいwindowingBehaviorsオブジェクトには、クローズ可能と小型化可能な2つのプロパティがあり、これらのそれぞれのウィンドウの動作を調整し、赤と黄色のウィンドウボタンを有効または無効にします。

00:18:07.000 --> 00:18:15.000
緑色のウィンドウボタンは、デスクトップ上のウィンドウのサイズ変更と、ウィンドウをフルスクリーンにすることの両方を処理します。

00:18:15.000 --> 00:18:31.000
sizeRestrictionsの新しいプロパティ「allowsFullScreen」でフルスクリーンを無効にするか、サイズ制限を使用して最小サイズと最大サイズを同じサイズに設定してサイズ変更を無効にすることができます。

00:18:31.000 --> 00:18:38.000
そして、両方を行うことで、緑色のボタンも無効になります。

00:18:38.000 --> 00:18:46.000
また、新しい「isFullScreen」プロパティを使用して、シーンが現在フルスクリーンであるかどうかを確認できます。

00:18:46.000 --> 00:18:50.000
では、Mac用のツールバーの改良に焦点を当てます。

00:18:50.000 --> 00:19:04.000
UINavigationBarからの自動変換に頼るか、アプリコードで独自のNSToolbarを管理するかにかかわらず、ツールバーのカスタマイズのための新しいオプションを追加しました。

00:19:04.000 --> 00:19:10.000
Mac Catalystの新機能として、UIViewsをNSToolbarにアイテムとして追加できます。

00:19:10.000 --> 00:19:16.000
現在の単語数を表示するアプリのカスタムUIViewを設計しました。

00:19:16.000 --> 00:19:26.000
また、クリックすると、段落数やセクション数、読書時間、翻訳などの追加の詳細を含むポップオーバーが表示されます。

00:19:26.000 --> 00:19:37.000
新しいデスクトップクラスのiPad APIを使用しているため、UIBarButtonアイテムのcustomViewプロパティは自動的にラップされ、ツールバーに追加されます。

00:19:37.000 --> 00:19:48.000
しかし、NSToolbarを独立して管理する場合は、NSUIViewToolbarItemと呼ばれる新しいNSToolbarItemサブクラスも追加しました。

00:19:48.000 --> 00:20:00.000
NSUIViewToolbarItemを使用して、他のNSToolbarItemと同様に、NSToolbarDelegateのitemForIdentifierメソッドからツールバーアイテムをインスタンス化できます。

00:20:00.000 --> 00:20:09.000
イニシャライザはUIViewをラップし、NSToolbarに挿入されます。

00:20:09.000 --> 00:20:16.000
NSToolbarは、ツールバーのカスタマイズモードに固有のツールバーアイテムインスタンスを期待しています。

00:20:16.000 --> 00:20:26.000
UINavigationBarから自動NSToolbarホスティングを使用している場合、ビューは自動的にツールバーのカスタマイズのためにシステムによって複製されます。

00:20:26.000 --> 00:20:43.000
ただし、独自のNSToolbarを管理する場合、デリゲートは同じUIViewインスタンスを再利用するのではなく、NSUIViewToolbarItemインスタンスごとにUIViewの一意のインスタンスを作成する必要があります。

00:20:43.000 --> 00:20:48.000
ツールバーの新しいアイテムで、ポップオーバーの動作を追加します。

00:20:48.000 --> 00:20:57.000
ツールバー項目のアクションで、ポップオーバービューコントローラーを作成し、そのソース項目をツールバー項目に設定します。

00:20:57.000 --> 00:21:01.000
それから私はポップオーバーを提示します。

00:21:01.000 --> 00:21:12.000
ポップオーバーコードを配置すると、ツールバー項目をクリックすると、ツールバー項目に固定されたポップオーバープレゼンテーションに追加の詳細が表示されます。

00:21:12.000 --> 00:21:24.000
Mac Catalystの他のコントロールと同様に、UINavigationBarの新しいプロパティpreferredBehavioralStyleを使用して、ナビゲーションバーの翻訳をオプトアウトできます。

00:21:24.000 --> 00:21:31.000
デフォルト値は自動ですが、.macに設定して翻訳を明示的に要求できます。

00:21:31.000 --> 00:21:39.000
.Padに設定すると、ナビゲーションバーが自動的に翻訳されなくなります。

00:21:39.000 --> 00:21:46.000
これらのオプションを使用すると、アプリのツールバーに新しいカスタマイズレイヤーを追加できます。

00:21:46.000 --> 00:21:53.000
私たちは、あなたがこれらの新しいツールを使用してアプリをさらに良くする方法を見てとても興奮しています。

00:21:53.000 --> 00:22:00.000
Mac App Storeで自動的にiPadアプリを使用すると、まったく新しいオーディエンスが利用できます。

00:22:00.000 --> 00:22:06.000
iPadアプリをアップロードしたら、Macで実行して、自分で試してみてください。

00:22:06.000 --> 00:22:19.000
または、Mac Catalystアプリになって次のレベルに引き上げ、iOS 16とmacOS Venturaの新しいAPIを使用して、アプリを最高のものにします。

00:22:19.000 --> 00:22:22.000
アプリをMacに持ち込むのは簡単です。

00:22:22.000 --> 00:22:28.000
私たちはあなたのハードワークを披露するのが大好きで、あなたが次に構築するものを試すのが待ちきれません。

00:22:28.000 --> 23:59:59.000
ありがとうございます。

