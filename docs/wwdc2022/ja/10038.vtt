WEBVTT

00:00:00.000 -> 00:00:09.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:09.000 -> 00:00:13.000
こんにちは、WWDCへようこそ。

00:00:13.000 -> 00:00:17.000
私はNikhilです。今日は、SKAdNetworkの変更点をお伝えします。

00:00:17.000 -> 00:00:23.000
未来に飛び込む前に、私たちがどこにいるのか、どうやってここにたどり着いたのかを思い出しましょう。

00:00:23.000 -> 00:00:32.000
Appleでは、プライバシーは基本的人権であり、その保護はここで行うすべてのことに織り込まれていると信じています。

00:00:32.000 -> 00:00:36.000
それが私たちがSKAdNetworkを作った理由です。

00:00:36.000 -> 00:00:41.000
SKAdNetworkは、Appleのプライバシー保護インストールアトリビューションシステムです。

00:00:41.000 -> 00:00:47.000
アトリビューションデータは、ユーザーのプライバシーを保護しながら広告主に送り返されます。

00:00:47.000 -> 00:00:56.000
SKAdNetworkには、広告ネットワーク、パブリッシャーアプリ、広告主アプリの3つのアクターが関与しています。

00:00:56.000 -> 00:01:00.000
また、SKAdNetwork内で一般的に使用される用語も定義しましょう。

00:01:00.000 -> 00:01:09.000
インプレッション：このディスカッションのコンテキストでのインプレッションは、パブリッシャーアプリからSKAdNetworkに入力されます。

00:01:09.000 -> 00:01:15.000
エンゲージメント: エンゲージメントは、ユーザーが広告主アプリと対話するときに発生します。

00:01:15.000 -> 00:01:21.000
広告主アプリは、コンバージョン値の更新の形でこれらのエンゲージメントをキャプチャします。

00:01:21.000 -> 00:01:26.000
そして最後に、ポストバックとも呼ばれるコンバージョン。

00:01:26.000 -> 00:01:31.000
ポストバックには、広告ネットワークに送信されるアトリビューションデータが含まれています。

00:01:31.000 -> 00:01:39.000
アトリビューションデータは、これが元の広告の成功した変換であったというシグナルを広告ネットワークに提供します。

00:01:39.000 -> 00:01:45.000
広告ネットワークは、広告主アプリの署名付きインプレッションを生成します。

00:01:45.000 -> 00:01:50.000
パブリッシャーアプリはこのインプレッションを使用し、この広告を表示します。

00:01:50.000 -> 00:01:54.000
その後、ユーザーは広告をタップしてアプリをインストールします。

00:01:54.000 -> 00:02:00.000
初めて起動すると、アプリはAPIを呼び出してコンバージョンを通知します。

00:02:00.000 -> 00:02:10.000
その後、アプリはこのAPIを繰り返し呼び出して、コンバージョン値を更新し、さまざまなレベルのエンゲージメントと広告のリターンをキャプチャできます。

00:02:10.000 -> 00:02:17.000
タイマーの有効期限が切れると、アトリビューションデータを含むポストバックを広告ネットワークに送信します。

00:02:17.000 -> 00:02:22.000
SKAdNetworkのバージョン履歴を簡単に見てみましょう。

00:02:22.000 -> 00:02:28.000
SKAdNetwork 2.0は、プライバシーを保護する広告アトリビューションを導入しました。

00:02:28.000 -> 00:02:34.000
2.2 パブリッシャーアプリがカスタム広告を表示できるようにしました。

00:02:34.000 -> 00:02:39.000
3.0は、非勝利のインプレッションのためのポストバックを追加しました。

00:02:39.000 -> 00:02:49.000
そして、iOS 15.0では、SKAdNetworkのすべてのバージョンの開発者向けのポストバックコピーを導入しました。

00:02:49.000 -> 00:02:59.000
SKAdNetworkの歴史の詳細については、WWDC 2021のセッション「プライバシー保護広告アトリビューションを満たす」を参照してください。

00:02:59.000 -> 00:03:05.000
さて、未来、SKAdNetwork 4.0について話しましょう。

00:03:05.000 -> 00:03:08.000
新機能を見てみましょう。 では、新機能を見てみましょう

00:03:08.000 -> 00:03:16.000
まず、広告主により多くのデータを提供するように設計されたAPIのいくつかの変更を検討します。

00:03:16.000 -> 00:03:20.000
これに続いて、物事の変換面を見ていきます。

00:03:20.000 -> 00:03:30.000
次に、ウェブ上の広告のアトリビューションに移り、SKAdNetworkのテスト可能性について話して締めくくります。

00:03:30.000 -> 00:03:38.000
階層IDとコンバージョン値は、SKAdNetwork 4.0に登場する最初の新機能です。

00:03:38.000 -> 00:03:44.000
新機能に飛び込む前に、群衆の匿名性を定義したいと思います。

00:03:44.000 -> 00:03:53.000
群衆の匿名性は、SKAdNetworkがアトリビューションデータを配信するプライバシー保護方法を指すために使用する用語です。

00:03:53.000 -> 00:04:00.000
インストールの数は、アプリを使用している人に保証されるプライバシーのレベルを決定します。

00:04:00.000 -> 00:04:06.000
下端では、ポストバックの広告主へのアトリビューションデータの送信が少なくなります。

00:04:06.000 -> 00:04:15.000
インストール数が少ない場合は、返送される追跡可能な情報を制限することで、プライバシーを保護するために追加の措置を講じます。

00:04:15.000 -> 00:04:23.000
カウントがスケールアップし、ユーザーの独自性が群衆に溶け込み始めると、より多くのデータを送り返します。

00:04:23.000 -> 00:04:32.000
最後に、カウントが最高層に達すると、プライバシーを維持しながら、最も多くのデータを送り返すことができます。

00:04:32.000 -> 00:04:41.000
SKAdNetwork 4.0では、プライバシー保護を維持しながら、より多くのデータを送信する方法があります。

00:04:41.000 -> 00:04:45.000
このため、キャンペーン識別子フィールドを変更しています。

00:04:45.000 -> 00:04:49.000
現在、これは2桁のフィールドです。

00:04:49.000 -> 00:04:56.000
このフィールドの範囲を4桁に増やし、名前をソース識別子に変更します。

00:04:56.000 -> 00:05:09.000
新しい名前は、キャンペーンを識別するためだけでなく、使用することを選択したものを表現できるとして、この分野についての私たちの考え方を反映しています。

00:05:09.000 -> 00:05:19.000
これは単一の数字ですが、3つの階層的な数字、2、3、4桁の数字として考えることをお勧めします。

00:05:19.000 -> 00:05:28.000
ソース識別子フィールドを階層的な数字のセットとして考えることは、異なる数字に意味を割り当てるのに役立ちます。

00:05:28.000 -> 00:05:42.000
例として、2桁は広告キャンペーンを表し、3桁はユーザーのバケット化された場所を表し、4桁は画面上の広告配置を表すことができます。

00:05:42.000 -> 00:05:56.000
あるいは、2桁は治療を表すことができ、3桁はバケットされた時刻を表すことができ、4桁は表示される広告のサイズを表すことができます。

00:05:56.000 -> 00:06:05.000
これらは単なる例であり、最終的に、私たちがここで望んでいたのは、あなたのニーズに最も合うようにこのフィールドをあなたに開放することでした。

00:06:05.000 -> 00:06:12.000
より多くのデータを提供するというテーマを継続して、変換値も変化しています。

00:06:12.000 -> 00:06:15.000
現在、これは6ビットの値です。

00:06:15.000 -> 00:06:25.000
SKAdNetwork 4.0では、きめ細かい値と粗い値の2つの変換値を導入しています。

00:06:25.000 -> 00:06:29.000
きめ細かい値は、今日の変換値と同じです。

00:06:29.000 -> 00:06:34.000
粗い粒の値は、3つの値のいずれかを想定できます。

00:06:34.000 -> 00:06:48.000
高42の変換値を考慮すると、高は粗い値であり、42は細かい値であり、粗い値を受け取るために必要なインストールカウントは、細かい値に必要なインストール数よりも低い。

00:06:48.000 -> 00:06:53.000
その結果、アプリは前者を後者よりもはるかに速く受け取ります。

00:06:53.000 -> 00:06:58.000
ただし、これらのうちの1つだけが広告主に送り返されることに注意してください。

00:06:58.000 -> 00:07:04.000
群衆の匿名性がこれらの新しい分野にどのように影響するかを見てみましょう。

00:07:04.000 -> 00:07:19.000
ソース識別子として5739の以前の例を使用して、群衆の匿名性のローエンドで、ソース識別子の2桁のコンポーネントを受け取ることが期待できます。この場合は39です。

00:07:19.000 -> 00:07:24.000
中レベルでは、3桁のコンポーネントを受け取ることが期待できます。

00:07:24.000 -> 00:07:31.000
そして、最高レベルでは、完全な4桁のソース識別子を受け取ることが期待できます。

00:07:31.000 -> 00:07:38.000
群衆の匿名性レベルが増加するにつれて、ソース識別子のより多くの桁が送り返されます。

00:07:38.000 -> 00:07:50.000
そして、コンバージョン値の高42の以前の例を取ると、群衆の匿名性のローエンドでは、ポストバックでコンバージョン値を受け取ることはありません。

00:07:50.000 -> 00:07:55.000
中レベルでは、粗い変換値を受け取ります。

00:07:55.000 -> 00:08:01.000
そして、最高レベルでは、ポストバックできめ細かいコンバージョン値を受け取ります。

00:08:01.000 -> 00:08:07.000
群衆の匿名性が高まるにつれて、変換値は変更を返しました。

00:08:07.000 -> 00:08:10.000
APIの変更を見てみましょう。 では、APIの変更を見てみましょう。

00:08:10.000 -> 00:08:23.000
SKAdImpressionのインスタンスを使用して広告を表示している場合は、SKADImpressionインスタンスに新しいsourceIdentifierプロパティを設定できます。

00:08:23.000 -> 00:08:33.000
辞書でインプレッションを設定する場合は、新しいソース識別子キーを使用してsourceIdentifier値を設定できます。

00:08:33.000 -> 00:08:47.000
アドバタイズされたアプリの場合、ここに示すように細かい変換値に加えて、粗い変換値を取るように変更された新しいupdatePostbackConversionValueメソッドを呼び出します。

00:08:47.000 -> 00:08:56.000
ポストバックのコンバージョン値を更新した後、完了ハンドラを使用してフォローアップタスクを実行することをお勧めします。

00:08:56.000 -> 00:09:02.000
新しい階層IDと変換値APIの採用に関する推奨事項をいくつか紹介します。

00:09:02.000 -> 00:09:08.000
インストールのプライバシーレベルに応じて、ソース識別子の異なる部分が返されます。

00:09:08.000 -> 00:09:14.000
インプレッションのソース識別子を作成するときは、これを考慮してください。

00:09:14.000 -> 00:09:20.000
粗い変換値は、細かい変換値よりもはるかに低い粒度です。

00:09:20.000 -> 00:09:25.000
彼らの価値観に意味をもたらすときは、これを考慮してください。

00:09:25.000 -> 00:09:29.000
変換値は増減する可能性があります。

00:09:29.000 -> 00:09:42.000
そして最後に、SKAdNetwork 4.0のポストバックを処理するためにサーバーに変更を加えるときは、新しいソース識別子と粗い変換値を解析できるようにします。

00:09:42.000 -> 00:09:51.000
これにより、階層IDとコンバージョン値の紹介が終わり、プライバシー保護を維持しながら、より多くのデータを広告主に提供します。

00:09:51.000 -> 00:09:57.000
アトリビューションフローの別の重要な分野、コンバージョンに焦点を当てましょう。

00:09:57.000 -> 00:10:03.000
SKAdNetworkは現在、単一のコンバージョンモデルを使用しています。

00:10:03.000 -> 00:10:09.000
インストール時から、コンバージョン値を更新して、さまざまなユーザーエンゲージメントをキャプチャします。

00:10:09.000 -> 00:10:15.000
そして、一定の時間が経過すると、ポストバックを広告ネットワークに送信します。

00:10:15.000 -> 00:10:18.000
例を見てみましょう。 例を見てみましょう。

00:10:18.000 -> 00:10:19.000
フードトラックを使いましょう。

00:10:19.000 -> 00:10:22.000
フードトラックは、あなたのフードトラックをコントロールできるようにします。

00:10:22.000 -> 00:10:27.000
独自のドーナツ配達体験をカスタマイズ、制御、作成します。

00:10:27.000 -> 00:10:33.000
フードトラックの開発者として、私は広告費の価値を知りたいです。

00:10:33.000 -> 00:10:41.000
この例として、ユーザーがフードトラックを起動すると、変換値を更新してこれをマークします。

00:10:41.000 -> 00:10:47.000
彼らが配達のために最初のバッチを受け取ったら、私は再び変換値を更新します。

00:10:47.000 -> 00:10:55.000
このドーナツのバッチは、熟成に一定の時間を必要とするため、ユーザーは待ちます。

00:10:55.000 -> 00:11:04.000
エージング時間のどこかで、コンバージョンは広告ネットワークとオプションで私の両方にポストバックの形で送信されます。

00:11:04.000 -> 00:11:16.000
しかし、ユーザーが最終的にドーナツを届けたとき、ポストバックがすでに送信されているため、これやそれ以上のユーザーの行動を測定する方法はありません。

00:11:16.000 -> 00:11:21.000
言い換えれば、再エンゲージメントは失われます。

00:11:21.000 -> 00:11:24.000
これが私たちが変えているものです。

00:11:24.000 -> 00:11:30.000
1つのポストバックから3つのポストバックに移行しています。

00:11:30.000 -> 00:11:36.000
ポストバックは明確な時間ウィンドウに結び付けられ、それらのウィンドウの最後に送信されます。

00:11:36.000 -> 00:11:39.000
前の例をもう一度見てみましょう。

00:11:39.000 -> 00:11:47.000
以前と同様に、ユーザーはフードトラックを開始し、配達のために最初のバッチをピックアップします。

00:11:47.000 -> 00:11:52.000
最初のポストバックの時間枠が経過し、私たちはそれを送信します。

00:11:52.000 -> 00:11:54.000
ユーザーはドーナツを配達します。

00:11:54.000 -> 00:12:01.000
以前は、これはキャプチャされなかったでしょうが、今、私たちは2番目のポストバックのタイムウィンドウにいます。

00:12:01.000 -> 00:12:05.000
これをキャプチャするためにコンバージョン値を更新します。

00:12:05.000 -> 00:12:10.000
2番目のポストバックのタイムウィンドウが過ぎ、私たちはそれを送信します。

00:12:10.000 -> 00:12:19.000
アプリのツールを使用して、ユーザーはまったく新しいドーナツレシピを作成し、新鮮なバッチを提供するために再び向かいます。

00:12:19.000 -> 00:12:24.000
3番目のウィンドウが経過し、3番目のポストバックが送信されます。

00:12:24.000 -> 00:12:30.000
変換の価値を測定し、これらの測定値をより頻繁に受け取る機会が増えています。

00:12:30.000 -> 00:12:37.000
複数のコンバージョンについて注意すべきいくつかのポイント：最初のポストバックのみが細かいコンバージョン値を取得します。

00:12:37.000 -> 00:12:42.000
追加のポストバックは、粗い変換値を運ぶことができます。

00:12:42.000 -> 00:12:47.000
勝者と開発者だけが追加のポストバックを受け取ります。

00:12:47.000 -> 00:12:53.000
次に、ウェブ上の広告のSKAdNetworkアトリビューションを確認しましょう。

00:12:53.000 -> 00:13:00.000
パブリッシャーアプリは、App Storeで製品ページを開く広告を表示することを知っています。

00:13:00.000 -> 00:13:10.000
App Storeは、ユーザーが依存するプライバシー保護を提供しながら、SKAdNetworkと連携してインストールをアトリビュートします。

00:13:10.000 -> 00:13:15.000
私たちは、ウェブページに表示される広告に同じプライバシーを拡張したいと考えています。

00:13:15.000 -> 00:13:18.000
これがどのように機能するかを見てみましょう。 

00:13:18.000 -> 00:13:22.000
ユーザーはSafariで広告のリンクをタップします。

00:13:22.000 -> 00:13:28.000
SafariはApp Storeを起動し、広告されたアプリの製品ページに着陸します。

00:13:28.000 -> 00:13:30.000
ここで2つのことが起こります。

00:13:30.000 -> 00:13:39.000
App Storeは広告ネットワークサーバーから広告インプレッションを取得し、ユーザーはアプリをインストールします。

00:13:39.000 -> 00:13:47.000
これに続いて、すべてが今日のように流れ、最終的にSKAdNetworkはポストバックを送信します。

00:13:47.000 -> 00:13:50.000
リンクがどのように構成されているかを見てみましょう。

00:13:50.000 -> 00:13:56.000
href部分には、宣伝されているアプリのApp Storeリンクが含まれています。

00:13:56.000 -> 00:14:03.000
attributionDestinationは、署名された広告インプレッションをどこから取得するかをAppleに伝えます。

00:14:03.000 -> 00:14:11.000
また、attributionSourceNonceは、広告ネットワークが返送する正確な広告インプレッションを見つけるのに役立ちます。

00:14:11.000 -> 00:14:18.000
このリンクは、ファーストパーティサイトと埋め込まれたクロスサイトiframeで提供できることに注意してください。

00:14:18.000 -> 00:14:22.000
URLの構築を詳しく見てみましょう。 

00:14:22.000 -> 00:14:28.000
アトリビューション先からeTLD+1コンポーネントを抽出します。

00:14:28.000 -> 00:14:34.000
これに、よく知られている修飾子とさらに2つのパスコンポーネントを追加します。

00:14:34.000 -> 00:14:42.000
これにより、署名されたインプレッションを取得するためにHTTP POSTリクエストを行うURLが表示されます。

00:14:42.000 -> 00:14:47.000
プロトコルと強調表示されたパスコンポーネントは固定されていることに注意してください。

00:14:47.000 -> 00:14:54.000
広告ネットワークは、ホストコンポーネントの価値を決定します。

00:14:54.000 -> 00:15:01.000
SKAdNetworkは、先ほど説明したように構築されたURLにHTTP POSTリクエストを行います。

00:15:01.000 -> 00:15:05.000
POST本文はJSONになります。

00:15:05.000 -> 00:15:10.000
Source_nonceは元の広告リンクと同じものとして認識されます。

00:15:10.000 -> 00:15:17.000
この値は、広告ネットワークが提供したい署名されたインプレッションを識別するために使用するものです。

00:15:17.000 -> 00:15:22.000
このPOSTリクエストから受け取ることを期待しているものを見てみましょう。

00:15:22.000 -> 00:15:28.000
これは署名された印象であり、SKAdNetworkが消費する準備ができています。

00:15:28.000 -> 00:15:31.000
インプレッションのソースドメインフィールドに注意してください。

00:15:31.000 -> 00:15:38.000
これは、アプリ駆動のSKAdNetworkフローのソースアプリIDのリンクアナログです。

00:15:38.000 -> 00:15:52.000
SKAdNetworkシステムへのこの新しいエントリの使用を開始する方法を見て、広告ネットワークは次のことを行う必要があります。リンクの一意に識別可能な部分とリンク自体を作成します。

00:15:52.000 -> 00:15:59.000
前に説明したように、構築された場所で署名されたインプレッションを提供できるエンドポイントを公開します。

00:15:59.000 -> 00:16:05.000
ポストバックサーバーを更新して、新しいオプションのソースドメインフィールドを解析して理解します。

00:16:05.000 -> 00:16:14.000
SKAdNetworkへのリンクを使用したいウェブページの場合は、広告ネットワークから提供された広告リンクを埋め込むだけです。

00:16:14.000 -> 00:16:19.000
これは、ウェブ上の広告のSKAdNetworkアトリビューションの紹介でした。

00:16:19.000 -> 00:16:28.000
私たちは、この機能がより広い広告エコシステム全体に採用されることに非常に興奮しています。

00:16:28.000 -> 00:16:34.000
次に、SKAdNetworkの実装をテストする方法について説明します。

00:16:34.000 -> 00:16:40.000
高レベルでは、SKAdNetworkはインプレッションとポストバックを扱います。

00:16:40.000 -> 00:16:49.000
開発者コミュニティとの協力から、インプレッションの側では、署名と設定が摩擦のポイントであったことを知っています。

00:16:49.000 -> 00:16:57.000
そして、ポストバックでは、テストに優しい方法でそれらを受け取り、検証することは改善のための領域でした。

00:16:57.000 -> 00:17:08.000
SKAdNetworkの開発者体験を向上させるために、Xcode 13.3でSKAdNetworkのテスト可能性の変更をリリースしました。

00:17:08.000 -> 00:17:19.000
これは、StoreKitTest内の単体テストフレームワークとして利用でき、多くの人がすでにStoreKit実装のさまざまな部分をテストするために使用しています。

00:17:19.000 -> 00:17:23.000
印象を検証することを見てみましょう。

00:17:23.000 -> 00:17:28.000
SKAdImpressionのインスタンスを作成して設定します。

00:17:28.000 -> 00:17:40.000
署名の生成に使用される秘密鍵の公開鍵のカウンターパートを提供し、SKAdTestSessionインスタンスでvalidateメソッドを呼び出します。

00:17:40.000 -> 00:17:49.000
これにより、インプレッションが検証され、インプレッションが誤って設定されている場合、または署名が無効な場合はエラーが発生します。

00:17:49.000 -> 00:17:53.000
テストするもう1つの主な領域は、ポストバックの受信です。

00:17:53.000 -> 00:17:54.000
ここには2つのステップがあります。

00:17:54.000 -> 00:17:59.000
ステップ1：テストセッションにテストポストバックを追加します。

00:17:59.000 -> 00:18:07.000
SKAdTestPostbackのインスタンスを作成し、ポストバックで必要な値で設定します。

00:18:07.000 -> 00:18:13.000
ポストバックが送信される場所であるため、ポストバックURLに特別な注意を支払います。

00:18:13.000 -> 00:18:18.000
これは、リモートまたはローカルサーバーを指す場合があります。

00:18:18.000 -> 00:18:25.000
次に、SKAdTestSessionのsetPostbacksメソッドを使用して、これをテストセッションに追加します。

00:18:25.000 -> 00:18:29.000
ステップ2は、実際にポストバックを送信することです。

00:18:29.000 -> 00:18:38.000
ここで行う必要があるのは、SKAdTestSessionのflushPostbacksメソッドを呼び出すだけで、ポストバックは途中でオフになります。

00:18:38.000 -> 00:18:47.000
SKAdTestSessionは、ポストバックの作成時に指定したサーバーにネットワーク経由でポストバックを送信することに注意してください。

00:18:47.000 -> 00:18:56.000
これらは、今年後半にSKAdNetworkのテスト可能性に登場するいくつかのことです。新しいソース識別子フィールドのサポート。

00:18:56.000 -> 00:18:59.000
細かい変換値と粗い変換値のサポート。

00:18:59.000 -> 00:19:03.000
複数のコンバージョンをテストするためのサポート。

00:19:03.000 -> 00:19:11.000
そして、それはXcode 13.3で最初に利用可能だったSKAdNetworkのテスト可能性の変更を簡単に見ることでした。

00:19:11.000 -> 00:19:19.000
今日は、階層IDと変換値について話し、より多くのデータをより早く入手することを目指しました。

00:19:19.000 -> 00:19:26.000
そして、複数のコンバージョンについて話し、より長い期間にわたる再エンゲージメントを測定することができます。

00:19:26.000 -> 00:19:36.000
次に、リンク駆動型のアトリビューションと、SKAdNetworkにブリッジを追加し、同じプライバシー保護をもたらす方法について話しました。

00:19:36.000 -> 00:19:42.000
そして、XcodeでのSKAdNetworkのテスト可能性について話して終わりました。

00:19:42.000 -> 00:19:47.000
そして、それはSKAdNetwork 4.0を通して私たちの旅を締めくくります。

00:19:47.000 -> 00:19:54.000
最後に、私たちが構築するすべてのものは、素晴らしい開発者コミュニティからのフィードバックによって推進されています。

00:19:54.000 -> 00:20:04.000
ユーザーのためのプライバシー第一の広告体験を構築するあなたの経験について聞くことは、信じられないほど充実し、謙虚でした。

00:20:04.000 -> 00:20:06.000
ありがとうございます。

00:20:06.000 -> 23:59:59.000
♪ ♪

