WEBVTT

00:00:00.000 --> 00:00:03.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
こんにちは、WWDCへようこそ。

00:00:12.000 --> 00:00:14.000
私の名前はケイシーです。

00:00:14.000 --> 00:00:18.000
あなたはすでにユニバーサルシーンの説明、またはUSDに出くわしたかもしれません。

00:00:18.000 --> 00:00:21.000
拡張現実でUSDファイルとやり取りした可能性があります。

00:00:21.000 --> 00:00:25.000
または、資産を他の形式から米ドルに変換した可能性があります。

00:00:25.000 --> 00:00:28.000
しかし、USDファイルの中に本当に何がありますか?

00:00:28.000 --> 00:00:36.000
USDはユニークな機能を備えた重要な技術なので、ボンネットの下を見て、一緒にUSDの基礎を探りましょう。

00:00:36.000 --> 00:00:50.000
USDとは何かを学び、いくつかの基本的なUSDの概念を紹介し、USDでシーンを構成する方法を学び、USDファイル形式を理解します。

00:00:50.000 --> 00:00:53.000
まず、米ドルとは何ですか?

00:00:53.000 --> 00:01:04.000
USDは、私たちが愛する複雑な映画を作成できるようにピクサーアニメーションスタジオによって開発され、映画、エンターテイメント、その他の業界で広く使用されています。

00:01:04.000 --> 00:01:10.000
それは設計によって拡張可能であり、協力的で重要なワークフロー技術として急速に浮上しています。

00:01:10.000 --> 00:01:22.000
これは、映画業界での数十年にわたる制作経験に基づいて構築されたオープンソースプロジェクトであり、ゲーム、シミュレーション、AR、製造、電子商取引にますます採用されています。

00:01:22.000 --> 00:01:30.000
USDには、シーンの説明仕様、API、レンダリングシステムの3つの中核的な側面があります。

00:01:30.000 --> 00:01:35.000
アプリケーションはAPIを使用してUSDと対話します。

00:01:35.000 --> 00:01:41.000
レンダリングシステムは、異なるレンダラーでシーンを視覚化するためのサポートを提供します。

00:01:41.000 --> 00:01:44.000
Appleには、米ドル用の複数の異なるレンダリングシステムがあります。

00:01:44.000 --> 00:01:50.000
詳細については、「USDツールとレンダリングを探索する」セッションをご覧ください。

00:01:50.000 --> 00:02:02.000
このセッションでは、シーンデータの記述方法、構成方法、ファイル形式での表現方法に関するシーン記述仕様に焦点を当てます。

00:02:02.000 --> 00:02:07.000
基本的に、これらのUSDファイルには、シーンがどのように見えるべきかを説明するデータが含まれています。

00:02:07.000 --> 00:02:12.000
レンダリングアプリケーションはデータを解釈し、画面上に画像を生成します。

00:02:12.000 --> 00:02:19.000
たとえば、昨年のWWDCセッションでは、このUSDシーンを作成し、Octaneでレンダリングしました。

00:02:19.000 --> 00:02:24.000
それでは、基本的な概念に飛び込み、レンダリングの背後にあるデータについて学びましょう。

00:02:24.000 --> 00:02:43.000
物事をシンプルにするために、テキストUSD表現を使用します。USDには、私たちが話したいクールな機能がたくさんありますが、時間のために、ステージ、プリム、レイヤーなど、USDでの作業中に最も一般的に遭遇する可能性のある重要な機能に焦点を当てます。

00:02:43.000 --> 00:02:45.000
ステージから始めましょう。

00:02:45.000 --> 00:02:48.000
私たちが劇場で演劇に出席していると想像してみてください。

00:02:48.000 --> 00:02:56.000
観客として、私たちは舞台を観察して俳優の演技を見て、環境、照明、小道具に気づきます。

00:02:56.000 --> 00:03:01.000
これは、ステージが米ドルでどのように機能するかの良いアナロジーです。

00:03:01.000 --> 00:03:10.000
ステージは、すべてのシーン要素が一緒になる階層的な方法でグラフィカルな情報を整理するシーングラフ、またはデータ構造です。

00:03:10.000 --> 00:03:18.000
ステージは、通常、シーン情報を含むファイルである1つ以上のレイヤーの構成です。

00:03:18.000 --> 00:03:24.000
一般的に、ステージはシーンの主要なコンテナオブジェクトであるプリムで構成されています。

00:03:24.000 --> 00:03:28.000
プリムには、シーン要素の階層を作成するために、他のプリムを含めることができます。

00:03:28.000 --> 00:03:30.000
例を見てみましょう。例を見てみましょう。

00:03:30.000 --> 00:03:38.000
左側にはサンプルのUSDレイヤーがあり、右側にはステージのプレビュービジュアル表現があります。

00:03:38.000 --> 00:03:43.000
球体と立方体の2つのプリムが見えます。

00:03:43.000 --> 00:03:48.000
各プリムには、ステージ上で表すものを定義する特定のタイプがあります。

00:03:48.000 --> 00:03:55.000
メッシュ、ライト、素材など、ステージを構成するさまざまな種類のプライムがあります。

00:03:55.000 --> 00:04:03.000
この例では、球プリムには「スフィア」というタイプがあり、キューブプリムには「キューブ」というタイプがあります。

00:04:03.000 --> 00:04:06.000
しかし、これは良い質問を提起します。

00:04:06.000 --> 00:04:10.000
USDはこれらのプリムタイプが何を意味するのかをどのように知っていますか?

00:04:10.000 --> 00:04:12.000
USDはスキーマの使用を通じてこれを知っています。

00:04:12.000 --> 00:04:16.000
スキーマは、ステージ上のプリムの役割を定義する構造化データです。

00:04:16.000 --> 00:04:22.000
それらは、幾何学、材料などの一般的なシーンの概念に意味を提供します。

00:04:22.000 --> 00:04:26.000
この例では、球体のスキーマ定義を次に示します。

00:04:26.000 --> 00:04:31.000
これは、すべての球が半径と境界ボックスの範囲を持っていることを定義します。

00:04:31.000 --> 00:04:38.000
既存のスキーマを使用すると、USDはシーンを記述するための組み込みタイプの豊富な基盤を提供します。

00:04:38.000 --> 00:04:41.000
カスタムスキーマを使用すると、米ドルをさらに拡張できます。

00:04:41.000 --> 00:04:47.000
独自のユースケースとワークフローのカスタムデータを表す独自のスキーマを提供できます。

00:04:47.000 --> 00:04:49.000
スキーマは視覚的な表現を持つ必要はありません。

00:04:49.000 --> 00:04:54.000
それらは、構造化された有意義な方法でステージで取得したいデータになることができます。

00:04:54.000 --> 00:04:59.000
たとえば、ここでは「WWDC」という新しいスキーマを作成しました。

00:04:59.000 --> 00:05:07.000
それはタイトルとそれに関連付けられた年を持つプリムを定義し、ここにはスキーマを使用する「WWDC22」と呼ばれるプリムがあります。

00:05:07.000 --> 00:05:12.000
年は2022年に設定され、タイトルは「Call to code」に設定されています。

00:05:12.000 --> 00:05:16.000
年とタイトルはプリムの「属性」と呼ばれます。

00:05:16.000 --> 00:05:18.000
プリムは多くの異なる属性を持つことができます。

00:05:18.000 --> 00:05:21.000
各属性には型と値があります。

00:05:21.000 --> 00:05:28.000
属性はデフォルト値を作成することもできるので、スキーマを使用するプリムで明示的に定義する必要はありません。

00:05:28.000 --> 00:05:34.000
Sphereスキーマに戻ると、半径属性と範囲属性のデフォルト値をどのように定義したかを確認できます。

00:05:34.000 --> 00:05:37.000
このレイヤーには、単一のスフィアプリムがあります。

00:05:37.000 --> 00:05:43.000
Radius属性は設定されていないため、Sphereスキーマから値を導き出します。デフォルトの半径は1です。

00:05:43.000 --> 00:05:47.000
ただし、明示して、radius属性を設定できます。

00:05:47.000 --> 00:05:52.000
この値はスキーマで設定された値のデフォルト値と一致するため、球は依然として同じように見えます。

00:05:52.000 --> 00:05:57.000
次に、2番目の球体を追加し、半径を0.5に設定しましょう。

00:05:57.000 --> 00:06:00.000
実際には他の球の半分の大きさであることがわかります。

00:06:00.000 --> 00:06:10.000
属性、プリム、およびステージには、シーンの一部に補助データを提供できる情報のキーと値のペアリングであるメタデータを含めることもできます。

00:06:10.000 --> 00:06:13.000
メタデータは、適用されるレベルで設定されます。

00:06:13.000 --> 00:06:19.000
ステージ全体とその中のすべてのプリムに影響を与えるメタデータは、ステージレベルで設定されます。

00:06:19.000 --> 00:06:23.000
単一のプリムに固有のメタデータは、プリムに設定されます。

00:06:23.000 --> 00:06:26.000
属性はメタデータを持つこともできます。

00:06:26.000 --> 00:06:30.000
たとえば、典型的なステージメタデータがあります。

00:06:30.000 --> 00:06:33.000
metersPerUnitは、シーンのスケール単位を定義します。

00:06:33.000 --> 00:06:41.000
upAxisは、X、Y、またはZ軸のどれがシーン内のカメラの上向きと見なされるかを定義します。

00:06:41.000 --> 00:06:46.000
ドキュメント文字列は、ワークフロー追跡の目的で有用なドキュメントを保存します。

00:06:46.000 --> 00:06:51.000
これらの基本を定義したので、すでにUSDを使い始めることができます。

00:06:51.000 --> 00:06:55.000
これらの概念だけでパンケーキシーンがどのように行われるか見てみましょう。

00:06:55.000 --> 00:07:00.000
私たちのレイヤーでは、「パンケーキ」と呼ばれるトランスフォームプリムを作成します。

00:07:00.000 --> 00:07:06.000
次に、パンケーキプリムの子である「Blueberry_01」と呼ばれる変換プリムを追加します。

00:07:06.000 --> 00:07:11.000
Blueberry_01プリムには、メッシュプリムが含まれています。

00:07:11.000 --> 00:07:17.000
メッシュプリムはブルーベリーのジオメトリを保持し、材料に結合します。

00:07:17.000 --> 00:07:21.000
他のプライムを追加して、残りの資産を完成させましょう。

00:07:21.000 --> 00:07:28.000
これは、これらの基本的な概念だけを使用して、完成したパンケーキシーンです。

00:07:28.000 --> 00:07:36.000
これらのファンダメンタルズは遠くまで行くことができますが、生産中心のプロジェクトでは、多くの異なるチームメンバーや組織と協力する必要があります。

00:07:36.000 --> 00:07:41.000
USDには、いわゆる「構成」でこのニーズに対処するための多くの機能があります。

00:07:41.000 --> 00:07:46.000
コンポジションは、シーンの説明の別々の単位からステージの作成を可能にします。

00:07:46.000 --> 00:07:53.000
これにより、コラボレーションと高速反復を可能にするシーンでの3D要素の効率的な再利用が可能になります。

00:07:53.000 --> 00:08:01.000
最も一般的なタイプのコンポジションについて、レイヤー、リファレンス、ペイロード、バリアントセットについて説明します。

00:08:01.000 --> 00:08:03.000
でも、楽しい方法でやりましょう。

00:08:03.000 --> 00:08:05.000
チェスのゲームが好きですか？

00:08:05.000 --> 00:08:07.000
チェスセットのシーンを作りましょう。

00:08:07.000 --> 00:08:14.000
シーンでは、チェスの駒を参照するカタログレイヤーのアセットのカタログを使用します。

00:08:14.000 --> 00:08:22.000
次に、チェス盤上のこれらのピースをレイアウトレイヤーに配置して、ChessSetレイヤーで表示可能な最終結果を取得します。

00:08:22.000 --> 00:08:35.000
チェスでは、まずチェスの駒を手に入れる必要があります。ポーン、ルーク、ビショップ、ナイト、クイーン、キングの6つの主要なピースがあります。

00:08:35.000 --> 00:08:40.000
オブジェクトキャプチャで作成されたこれらのアセットを使用して、完全なチェスセットを構築します。

00:08:40.000 --> 00:08:45.000
USDのコンセプトを使用して、私たちの作品をステージに持ち込むことから始めましょう。

00:08:45.000 --> 00:08:54.000
参照とは、ステージのプリムが、データをコピーせずに同じステージまたは別のレイヤーの別のプリムを参照する場合です。

00:08:54.000 --> 00:09:01.000
これにより、データの重複を最小限に抑え、異なる人やアプリケーションによってデータを別々に更新することができます。

00:09:01.000 --> 00:09:06.000
ポーン資産をシーンに参照しましょう。

00:09:06.000 --> 00:09:10.000
カタログレイヤーでは、「ポーン」と呼ばれるプリムを定義します。

00:09:10.000 --> 00:09:15.000
これまでのところ、データがないので、私たちのステージはまだ空です。

00:09:15.000 --> 00:09:19.000
次に、Pawn.usdaレイヤーへの参照を追加します。

00:09:19.000 --> 00:09:24.000
これにより、ポーンアセットがもたらされ、カタログレイヤーで見ることができます。

00:09:24.000 --> 00:09:28.000
しかし、USDは、参照するファイルからどのプリムを持ち込むべきかをどのように知っていますか？

00:09:28.000 --> 00:09:32.000
このプリムはdefaultPrimメタデータで指定できます。

00:09:32.000 --> 00:09:40.000
defaultPrimメタデータはステージで定義され、別のステージでこのシーンを使用するときに参照するプリムを指定します。

00:09:40.000 --> 00:09:44.000
常にUSD資産のdefaultPrimを作成することをお勧めします。

00:09:44.000 --> 00:09:48.000
ポーンアセットをチェックして、defaultPrimが作成されていることを確認しましょう。

00:09:48.000 --> 00:09:51.000
資産のステージレベルでdefaultPrimメタデータを確認できます。

00:09:51.000 --> 00:09:53.000
すごい。

00:09:53.000 --> 00:10:08.000
または、defaultPrimがオーサリングされていない場合、またはdefaultPrimとは異なるプリムを参照したい場合は、階層の任意の場所で、参照レイヤーでプリムへのパスを明示的に指定できます。

00:10:08.000 --> 00:10:12.000
USDのパスは、ステージ上の要素を識別するために使用されます。

00:10:12.000 --> 00:10:16.000
プリムパスは、プリムの一意の識別子です。

00:10:16.000 --> 00:10:19.000
例えば、このステージでは3つのプリムが見えます。

00:10:19.000 --> 00:10:23.000
ワールドプリムには/ワールドのプリムパスがあります。

00:10:23.000 --> 00:10:27.000
ポーンとナイトプリムは、世界のプリムの子供と考えられています。

00:10:27.000 --> 00:10:36.000
したがって、ポーンプリムへの道は/World/Pawnになり、ナイトプリムへの道は/World/Knightになります。

00:10:36.000 --> 00:10:44.000
それを念頭に置いて、ここでの参照でポーンプリムへのプリムパスを明示的に設定できます。

00:10:44.000 --> 00:10:49.000
より大きなシーンの場合、すべてのシーン情報を一度に読み込むのは費用がかかる場合があります。

00:10:49.000 --> 00:10:56.000
このため、USDは「ペイロード」と呼ばれるタイプの参照を持つステージへのシーンの説明の遅延ロードを可能にします。

00:10:56.000 --> 00:11:07.000
複雑なジオメトリなどの大きなデータセットや、小道具やキャラクターを表す他の大きなシーングラフを参照する場合は、ペイロードを使用することをお勧めします。

00:11:07.000 --> 00:11:14.000
代わりに、これらのアセット参照をペイロードに変換するので、チェスの駒のロードを延期することを選択できます。

00:11:14.000 --> 00:11:20.000
ペイロードをロードしないことを選択した場合、最初に開いたときにシーンが空のまま表示されます。

00:11:20.000 --> 00:11:24.000
ペイロードのロードを有効にすると、すべてのピースを再び見ることができます。

00:11:24.000 --> 00:11:28.000
今、私たちはシーンに私たちの作品を持っているので、私たちはチェスボードにそれらをレイアウトし始めることができます。

00:11:28.000 --> 00:11:33.000
レイヤーのUSDコンセプトを使用して、さらに別のレイヤーでこれを行うことができます。

00:11:33.000 --> 00:11:41.000
レイヤーを使用すると、PhotoshopやAffinity Photoなどの一般的な画像編集ソフトウェアパッケージと同様に、レイヤーを積み重ねることができます。

00:11:41.000 --> 00:11:49.000
別のレイヤーの上にあるレイヤーのプリムは、より強いと見なされ、下位レイヤーのデータを追加またはオーバーライドすることができます。

00:11:49.000 --> 00:11:58.000
ご覧のとおり、作品は現在間違った場所にありますが、心配しないでください。レイヤーを使用して他のレイヤーに非破壊的な変更を加えることができます。

00:11:58.000 --> 00:12:04.000
これは、カタログレイヤーを編集せずに作品を適切な位置に移動するのに最適です。

00:12:04.000 --> 00:12:12.000
これがどのようにできるか見てみましょう。最後のシーンとなるChessSetと呼ばれる新しいステージを作成することから始めます。

00:12:12.000 --> 00:12:15.000
レイヤーの上部に「サブレイヤー」と呼ばれるメタデータが含まれています。

00:12:15.000 --> 00:12:20.000
ここでは、カタログレイヤーで私たちの作品を持ってきます。

00:12:20.000 --> 00:12:27.000
次に、ピースを移動するために使用する新しいレイヤーLayout.usdaを作成します。

00:12:27.000 --> 00:12:31.000
このレイアウトレイヤーには、チェスの駒の位置が含まれます。

00:12:31.000 --> 00:12:34.000
シーン内の私たちの作品の位置をオーバーライドしましょう。

00:12:34.000 --> 00:12:37.000
Pawn_01から始めます。

00:12:37.000 --> 00:12:42.000
翻訳属性を変更して、ポーン資産の位置を変更します。

00:12:42.000 --> 00:12:46.000
これが私たちのシーンをどのように更新するかを見てみましょう。

00:12:46.000 --> 00:12:53.000
ここでは、レイアウトレイヤーなしで再びチェスセットがあるので、ポーンはまだ元の位置にあります。

00:12:53.000 --> 00:12:59.000
レイアウトレイヤーを追加すると、ポーンはチェス盤上の予想される位置に移動されました。

00:12:59.000 --> 00:13:04.000
他の作品にも同じことをして、正しい場所に移動しましょう。

00:13:04.000 --> 00:13:09.000
私たちは、ポーンを配置するのと同じように、他のチェスの駒を配置します。

00:13:09.000 --> 00:13:12.000
Pawn_02のやり方は次のとおりです。

00:13:12.000 --> 00:13:16.000
そして、再びPawn_03などのために。

00:13:16.000 --> 00:13:23.000
レイアウトレイヤーの変更を完了し、チェスの駒を正しい場所にセットしました。

00:13:23.000 --> 00:13:26.000
私たちはチェスセットの半分を作っています。

00:13:26.000 --> 00:13:35.000
レイヤーを使用してカタログレイヤーでアセットを持ち込み、オーバーライドを使用してレイアウトレイヤーでボードに配置します。

00:13:35.000 --> 00:13:39.000
残っているのは、相手側のためにピースを設定することだけです。

00:13:39.000 --> 00:13:43.000
注意すべき点の1つは、相手の駒は色が違うということです。

00:13:43.000 --> 00:13:50.000
新しい資産セットを作成する代わりに、別のUSDコンセプトであるvariantSetsを使用してチェスピース資産を更新できます。

00:13:50.000 --> 00:13:56.000
VariantSetは、ステージ上の個別の代替案の動的スワップを可能にします。

00:13:56.000 --> 00:14:03.000
バリアントセットに含まれるバリアントは、異なる材料、ジオメトリ、または米ドルで表現できるものなら何でもかまいません。

00:14:03.000 --> 00:14:08.000
ステージ上の異なるバリアントを切り替えることは非破壊的です。

00:14:08.000 --> 00:14:14.000
チェスの駒の異なる材料を切り替えるためにバリアントセットを設定します。

00:14:14.000 --> 00:14:21.000
ポーンアセットでは、「色」と呼ばれるバリアントセットを追加して、ポーンの異なる色を切り替えることができます。

00:14:21.000 --> 00:14:30.000
次に、バリアントセットに2つのバリアントを追加します。ダーク素材を使用したダークとライト素材を使用したライトです。

00:14:30.000 --> 00:14:38.000
最後に、デフォルトのバリアントを設定して、ポーンをステージにロードするときにどちらを使用するかを指定します。

00:14:38.000 --> 00:14:40.000
今、私たちはカタログレイヤーに戻ってきました。

00:14:40.000 --> 00:14:45.000
私たちはボード上のすべてのピースを設定しましたが、それらはすべて軽い素材を使用しています。

00:14:45.000 --> 00:14:49.000
これは、デフォルトのバリアントが軽い素材に設定されているためです。

00:14:49.000 --> 00:14:54.000
ポーンの1つの変種を暗い素材に変えましょう。

00:14:54.000 --> 00:14:56.000
バリアントをダークに設定しました。

00:14:56.000 --> 00:15:00.000
相手側のポーンの1つが暗くなっていることがわかります。

00:15:00.000 --> 00:15:04.000
この変更を他の作品にも適用しましょう。

00:15:04.000 --> 00:15:09.000
最後に、私たちはチェスセットを完成させました。

00:15:09.000 --> 00:15:15.000
シーンを最適化するために使用できるUSDのコンセプトがもう1つあります。シーングラフのインスタンス化です。

00:15:15.000 --> 00:15:27.000
シーングラフのインスタンス化により、ステージ上のシーングラフの一部を何度も再利用して、葉、家具、または私たちの場合はチェスの駒などの複数のものを含むものを表現できます。

00:15:27.000 --> 00:15:33.000
シーングラフのインスタンス化を使用すると、アプリケーションのメモリとパフォーマンスの両方が向上します。

00:15:33.000 --> 00:15:40.000
シーングラフのインスタンス化を使用するには、プリムまたはシーングラフの一部にインスタンスメタデータを指定できます。

00:15:40.000 --> 00:15:44.000
インスタンス化されているすべてのプリムは、同じシーングラフを共有するための候補です。

00:15:44.000 --> 00:15:48.000
私たちのシーンにプリムインスタンシングのサポートを追加しましょう。

00:15:48.000 --> 00:15:55.000
カタログファイルでは、チェスの駒のプリムにメタデータ「instanceable」を追加し、値をtrueに設定します。

00:15:55.000 --> 00:16:05.000
このメタデータを追加することで、USDはこれらの資産を、各プリムのデータを複製するのではなく、同じデータを共有する潜在的にインスタンス可能なプリムとして扱います。

00:16:05.000 --> 00:16:10.000
私たちのチェスセットはまだ同じように見えますが、今ではよりパフォーマンスが高く、メモリ効率が向上しています。

00:16:10.000 --> 00:16:12.000
これで、チェスセットは終わりです！

00:16:12.000 --> 00:16:17.000
それは素晴らしく見え、私たちは多くのUSD機能を行使しました。

00:16:17.000 --> 00:16:25.000
レイヤー化、参照、ペイロード、バリアントセットは、USDが定義する構成の種類のほんの一部です。

00:16:25.000 --> 00:16:32.000
一貫したシーン表現を確保するために、USDがシーングラフを構成する特定の強度の順序があります。

00:16:32.000 --> 00:16:40.000
構成と注文の頭字語LIVRPSの詳細については、ピクサーのUSDドキュメントで学ぶことができます。

00:16:40.000 --> 00:16:44.000
このセッションでは、USDファイルの中身について話しました。

00:16:44.000 --> 00:16:48.000
それでは、ファイル自体と、それらがディスクにどのように表示されるかについて話しましょう。

00:16:48.000 --> 00:16:51.000
USDファイルにはいくつかの種類があります。

00:16:51.000 --> 00:16:56.000
読み取り可能なASCIIテキストを含むUSDファイルには、拡張子が.usdaでした。

00:16:56.000 --> 00:16:59.000
このセッションでは、これらのファイルをずっと使用しています。

00:16:59.000 --> 00:17:07.000
よりコンパクトで効率的なバイナリ表現は、.usdc拡張子を持つクレート形式です。

00:17:07.000 --> 00:17:10.000
拡張子が.usdのファイルもあるかもしれません。

00:17:10.000 --> 00:17:15.000
これらは、ASCIIテキストまたはバイナリクレートファイルのいずれかです。

00:17:15.000 --> 00:17:27.000
最後に、USDには、.usdz拡張子を持つ非圧縮zipアーカイブに、複数のUSDファイルとテクスチャなどの関連する補助ファイルを含めることができるパッケージ形式があります。

00:17:27.000 --> 00:17:38.000
今日は、ステージ、レイヤー、プリム、スキーマ、属性、メタデータなど、USDの基本的な概念について学びました。

00:17:38.000 --> 00:17:48.000
これらの概念を使用してチェスセットを構築し、参照、ペイロード、defaultPrim、プリムパス、レイヤー、およびインスタンス化を利用しました。

00:17:48.000 --> 00:17:57.000
最後に、.usda、.usdc、.usd、.usdzのさまざまなUSDファイル形式について議論しました。

00:17:57.000 --> 00:18:05.000
ピクサーのUSDドキュメントでこれらの概念について詳しく学び、アプリケーションでUSDの機能を最大限に活用することをお勧めします。

00:18:05.000 --> 00:18:07.000
ありがとう！

00:18:07.000 --> 23:59:59.000
♪

