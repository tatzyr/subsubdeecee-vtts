WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:13.000
フランクリン・シュランズ：こんにちは、私の名前はフランクリンで、Swift-DocCチームのエンジニアです。

00:00:13.000 -> 00:00:24.000
同僚のイーサンと一緒に、さらに優れたドキュメントを作成するのに役立つ素晴らしい新しいツールが満載のXcode 14のSwift-DocCのツアーを提供することに興奮しています。

00:00:24.000 -> 00:00:31.000
昨年、Xcode 13でSwift-DocCを導入し、Swiftフレームワークを通じて開発者をガイドできるようにしました。

00:00:31.000 -> 00:00:48.000
Swift-DocCを使用すると、個々のAPIのリファレンスドキュメントから、これらのAPIを一緒に使用するためのより高いレベルのストーリーを提供する概念的な記事まで、タスクをユーザーに説明するステップバイステップのチュートリアルまで、包括的なコンテンツを書くことができます。

00:00:48.000 -> 00:00:54.000
今年、Xcode 14で、Swift-DocCはまったく新しいエキサイティングなワークフローのロックを解除します。

00:00:54.000 -> 00:01:02.000
フレームワークの文書化に加えて、チームと簡単にコラボレーションできるように、アプリプロジェクトもサポートできることを嬉しく思います。

00:01:02.000 -> 00:01:11.000
Swift-DocCを使用してObjective-CおよびC APIを文書化して、すべてのプロジェクトのAPIを一緒に記述できるようになりました。

00:01:11.000 -> 00:01:20.000
ウェブサイトへのコンテンツの公開は、GitHub Pagesのような静的ホスティング環境をすぐにサポートすることで、劇的に簡単になりました。

00:01:20.000 -> 00:01:28.000
そして、強力な新しいナビゲーションサイドバーのおかげで、開発者はこれまで以上に簡単にあなたのコンテンツを発見することができます。

00:01:28.000 -> 00:01:37.000
また、Swift-DocCは現在オープンソースプロジェクトであるため、これらの新機能はオープンソースコミュニティと緊密に協力して開発されました。

00:01:37.000 -> 00:01:44.000
このセッションでは、Swift-DocCとXcode 14でロック解除されるエキサイティングな新しいワークフローのツアーを行います。

00:01:44.000 -> 00:01:49.000
まず、プロジェクトのAPIをソースコードとインラインで文書化する方法を発見します。

00:01:49.000 -> 00:01:54.000
次に、コンテンツをウェブサイトにシームレスに公開することを見ていきます。

00:01:54.000 -> 00:01:59.000
そして最後に、ウェブ上で真新しいナビゲーションサイドバーを発見します。

00:01:59.000 -> 00:02:03.000
ドキュメントを書くことから始めましょう。

00:02:03.000 -> 00:02:06.000
優れたドキュメントは、あらゆるソフトウェアプロジェクトに不可欠です。

00:02:06.000 -> 00:02:15.000
プロジェクトが進化するにつれて、開発者が貢献する際に堅実な基準点を持つように、その機能とデザインを説明することが重要です。

00:02:15.000 -> 00:02:22.000
XcodeのSwift-DocCは、コードの開発に使用するのと同じツールを使用して、素晴らしいドキュメントを作成するために必要なツールを提供します。

00:02:22.000 -> 00:02:27.000
そして今年は、Swift-DocCをアプリプロジェクトに拡大することに興奮しています。

00:02:27.000 -> 00:02:29.000
すぐに飛び込みましょう。

00:02:29.000 -> 00:02:37.000
SwiftとObjective-Cの両方のソースファイルを含む、Slothyというチームと一緒に取り組んでいるアプリを文書化します。

00:02:37.000 -> 00:02:54.000
まだドキュメントを書いていない新しいプロジェクトでも、[製品]メニューを開いて[ドキュメントのビルド]を選択すると、Xcodeがドキュメントウィンドウが開き、Swift-DocCがAPI用に自動的に生成するスタブが表示されます。

00:02:54.000 -> 00:03:00.000
これは、貢献者がプロジェクトをナビゲートするのを助けるために、これらのページを埋めるための素晴らしい出発点を提供します。

00:03:00.000 -> 00:03:09.000
では、このコンテンツを私たちのアプリに貢献するための豊かで完全なガイドに変えるために、一歩一歩進みましょう。

00:03:09.000 -> 00:03:18.000
始めるのに良い場所は、各APIが個別にどのように機能するかを教え、そこからドキュメントカタログを使用してより高いレベルのコンテンツを提供することです。

00:03:18.000 -> 00:03:22.000
SlothViewというビューを説明することから始めましょう。

00:03:22.000 -> 00:03:28.000
このドキュメントをSwift-DocCに表示するには、3つのスラッシュを使用してコメントを開始します。

00:03:28.000 -> 00:03:31.000
次に、ビューの簡潔な要約を追加します。

00:03:31.000 -> 00:03:38.000
構築されたドキュメントページでは、これはビューの名前のすぐ下に目立つように表示されるテキストに変換されます。

00:03:38.000 -> 00:03:42.000
次に、追加の段落を使用して詳細を追加します。

00:03:42.000 -> 00:03:46.000
このコンテンツは、ページの概要セクションに表示されます。

00:03:46.000 -> 00:03:55.000
また、Swift-DocCのリンク構文を使用して、APIへの参照をアクティブなリンクに変換し、Pagesにすばやくジャンプして詳細を学習できます。

00:03:55.000 -> 00:04:01.000
DocCは、ビルド時にこれらのリンクを検証するので、期限切れになると警告が表示されます。

00:04:01.000 -> 00:04:09.000
最後に、このビューの使用方法の例を提供したい場合は、Markdownコードブロック構文を使用してコードリストを追加します。

00:04:09.000 -> 00:04:14.000
今、貢献者はこのビューの使い方を一目で知っています。

00:04:14.000 -> 00:04:21.000
ほんの数ステップで、私の見解のドキュメントは、このプロジェクトの貢献者にとってはるかに役に立ちます。

00:04:21.000 -> 00:04:24.000
次に、初期化子を文書化しましょう。

00:04:24.000 -> 00:04:27.000
繰り返しますが、要約を書くことから始めます。

00:04:27.000 -> 00:04:33.000
イニシャライザとメソッドの場合、各パラメータを個別に記述することをお勧めします。

00:04:33.000 -> 00:04:39.000
これを行うには、パラメータが何であるかの簡単な説明とともに、パラメータリスト項目を追加します。

00:04:39.000 -> 00:04:43.000
コンテンツが別のパラメータセクションにどのように表示されるかに注目してください。

00:04:43.000 -> 00:04:49.000
では、このプロジェクトで定義されているObjective-C APIを見てみましょう。

00:04:49.000 -> 00:04:56.000
Xcode 14の新機能で、Objective-Cコードを文書化するためのSwift-DocCの包括的なツールをもたらすことに興奮しています。

00:04:56.000 -> 00:05:07.000
あなたが知っていて愛しているのと同じおなじみのMarkdown構文と、Xcodeのソースエディタで更新されたサポートを使用して、すべてのプロジェクトのAPIを一緒に記述して整理できるようになりました。

00:05:07.000 -> 00:05:15.000
また、SwiftとObjective-Cの両方から呼び出すことができるコードには、コーディングしている言語でページを閲覧するための気の利いた言語トグルがあります。

00:05:15.000 -> 00:05:20.000
詳細については、以下にリンクされている開発者ドキュメントを確認してください。

00:05:20.000 -> 00:05:23.000
さて、これをSlothyプロジェクトに適用しましょう。

00:05:23.000 -> 00:05:27.000
SLOSoundクラスとその初期化子について説明します。

00:05:27.000 -> 00:05:37.000
このクラスはSwiftコードとObjective-Cコードの両方から使用できるため、Xcodeは言語トグルを表示し、使用している言語でコンテンツを閲覧できることに注意してください。

00:05:37.000 -> 00:05:45.000
Swiftコードに使用するのと同じMarkdown構文を使用して、クラスと初期化子を説明しましょう。

00:05:45.000 -> 00:05:47.000
素晴らしい、これははるかに良く見えます。

00:05:47.000 -> 00:05:53.000
要約、概要、および初期化子にはパラメータセクションを追加しました。

00:05:53.000 -> 00:05:55.000
そして、それは個々のAPIの説明を締めくくります。

00:05:55.000 -> 00:06:04.000
ソースコードにいくつかのドキュメントコメントを書くことで、私のプロジェクトに貢献する開発者は、そのAPIの使用方法をよりよく理解することができます。

00:06:04.000 -> 00:06:08.000
それでは、私たちのアプリのための素晴らしいトップレベルのページを作成することに焦点を当てましょう。

00:06:08.000 -> 00:06:17.000
これは貢献者が見る最初のページなので、アプリが何をし、どのように貢献するかについて素晴らしい紹介したいと思います。

00:06:17.000 -> 00:06:23.000
トップレベルのページをカスタマイズするには、まずドキュメントカタログを追加します。

00:06:23.000 -> 00:06:29.000
これを行うには、プロジェクトのソースフォルダを右クリックし、[新しいファイル]を選択します。

00:06:29.000 -> 00:06:32.000
次に、ドキュメントカタログを選択します。

00:06:32.000 -> 00:06:40.000
ドキュメントカタログは、ソースコードのドキュメントを補完し、追加のMarkdownファイルとメディアが含まれています。

00:06:40.000 -> 00:06:44.000
Xcodeは、アプリの最上位ページのファイルを自動的に追加します。

00:06:44.000 -> 00:06:48.000
アプリが何をするかの概要を記入しましょう。

00:06:48.000 -> 00:06:58.000
ソースコードのドキュメントコメントに使用するのと同じ構文を使用して、要約、概要、さらには画像のような埋め込み豊富なコンテンツを追加しました。

00:06:58.000 -> 00:07:01.000
素晴らしい、これははるかに魅力的に見えます。

00:07:01.000 -> 00:07:06.000
今、貢献者は、私のアプリが何であるかを一目で知っています。

00:07:06.000 -> 00:07:13.000
そして、それだけです!私はアプリのドキュメントを劇的に改善し、プロジェクトの貢献者に素晴らしい基準点を提供しました。

00:07:13.000 -> 00:07:23.000
彼らはプロジェクトの概要のためにトップレベルのページを閲覧し、各ページにジャンプして各APIに関する詳細情報を得ることができます。

00:07:23.000 -> 00:07:31.000
ドキュメントの作成と構築方法を見たので、貢献者が簡単に閲覧できるように、ウェブサイトに公開する時が来ました。

00:07:31.000 -> 00:07:33.000
あなたに、イーサン。

00:07:33.000 -> 00:07:35.000
イーサン・カスターズ:ありがとう、フランクリン。

00:07:35.000 -> 00:07:43.000
SlothCreatorと呼ばれるより一般的に便利なSwiftパッケージと並んで、モジュール式の方法でSlothyアプリを開発してきました。

00:07:43.000 -> 00:07:51.000
SlothCreatorをより多くの視聴者に公開して、ナマケモノ関連のアプリを作っている他の開発者がそれを利用できるようにすることは素晴らしいことだと思います。

00:07:51.000 -> 00:08:03.000
この取り組みの一環として、 SlothCreatorのドキュメントがウェブ上で簡単に共有できることを確認したいので、Swift-DocCの真新しいシンプルな公開ワークフローを歩きましょう。

00:08:03.000 -> 00:08:09.000
Xcodeでドキュメントを作成すると、Swift-DocCはドキュメントを含む静的バンドルを生成します。

00:08:09.000 -> 00:08:15.000
このバンドルはDocCアーカイブと呼ばれ、ドキュメント用のポータブルコンテナです。

00:08:15.000 -> 00:08:21.000
Xcodeのドキュメントウィンドウから直接エクスポートして、同僚に送信できます。

00:08:21.000 -> 00:08:26.000
アーカイブをダブルクリックするだけで、ドキュメントを開いて閲覧することができます。

00:08:26.000 -> 00:08:31.000
しかし、DocCアーカイブは、Xcodeでドキュメントを開くための単なるポータブルコンテナではありません。

00:08:31.000 -> 00:08:35.000
また、箱から出してすぐにフル機能のウェブサイトも含まれています。

00:08:35.000 -> 00:08:40.000
そして、Xcode 14の新機能で、DocCアーカイブもほとんどのウェブサーバーと直接互換性があります。

00:08:40.000 -> 00:08:44.000
これにより、ドキュメントをウェブに公開することがこれまで以上に簡単になります。

00:08:44.000 -> 00:08:53.000
ほとんどの場合、ビルドしたDocCアーカイブの内容をWebサーバーのルートにコピーするだけで、ドキュメントを展開できます。

00:08:53.000 -> 00:09:00.000
これはまた、DocCアーカイブがGitHub Pagesを含むほとんどのマネージドホスティングサービスと互換性があることを意味します。

00:09:00.000 -> 00:09:07.000
GitHub Pagesは、多くの開発者がGitHub.comに統合されたドキュメントをホストする一般的な方法です。

00:09:07.000 -> 00:09:14.000
そして、 SlothCreatorのソース管理にGitHubを使用しているので、ドキュメントもそこに公開することは理にかなっています。

00:09:14.000 -> 00:09:24.000
GitHubページの使用に精通している場合は、標準サーバーとは異なり、WebサイトはURLのルートパスではなく、特定のベースパスで公開されていることを知っているでしょう。

00:09:24.000 -> 00:09:33.000
この種のホスティングシナリオでは、互換性のあるDocCアーカイブを生成するために、追加のビルド設定でWebサイトのベースパスを指定する必要があります。

00:09:33.000 -> 00:09:46.000
これがどのように機能するのか、そしてGitHub Pagesのような特定のホスティングシナリオでのみこの設定が必要な理由を完全に理解するために、自分のドメインでホストされているDocCアーカイブのURLがどのように見えるかを見てみましょう。

00:09:46.000 -> 00:09:58.000
Slothyアプリのウェブサイト（slothy.example.com）がすでにあると仮定し、その既存のウェブサイトの一部として SlothCreatorのドキュメントを公開したいと思います。

00:09:58.000 -> 00:10:14.000
SlothCreator DocCアーカイブの内容をWebサーバーのルートにコピーするだけで、 SlothCreatorのリファレンスドキュメントがslothy.example.com/ documentation/slothcreatorに表示されます。

00:10:14.000 -> 00:10:20.000
SlothCreatorパッケージのチュートリアルは、近隣の「チュートリアル」パスにあります。

00:10:20.000 -> 00:10:24.000
ただし、この場合、独自のドメインに公開するつもりはありません。

00:10:24.000 -> 00:10:31.000
代わりに、GitHubリポジトリでドキュメントを保持するために、GitHub Pagesが提供するドメインに公開します。

00:10:31.000 -> 00:10:43.000
リポジトリ用のGitHub Pagesサイトを作成すると、そのウェブサイトのURLはルートパスではなく、リポジトリの名前に対応する特定のベースパスにあります。

00:10:43.000 -> 00:10:50.000
一般的には、username.github.ioのようなリポジトリ名をフォワードスラッシュします。

00:10:50.000 -> 00:10:56.000
リファレンスとチュートリアルのドキュメントパスは、そのベースパスに追加されます。

00:10:56.000 -> 00:11:05.000
このベースパスはリポジトリに固有であるため、GitHub Pagesに公開するためのDocCアーカイブを構築する前に、Swift-DocCにそれが何であるかを伝えることが重要です。

00:11:05.000 -> 00:11:10.000
このユースケースのためだけに、Xcode 14で公開されている新しいビルド設定があります。

00:11:10.000 -> 00:11:20.000
DocC Archive Hosting Base Path設定をGitHubリポジトリの名前に設定すると、将来のすべてのドキュメントビルドの準備が整います。

00:11:20.000 -> 00:11:23.000
これが実際にどのように機能するかを見てみましょう。

00:11:23.000 -> 00:11:29.000
ここでは、FranklinがSlothyアプリの依存関係として以前に示したSlothCreator Swiftパッケージを開きました。

00:11:29.000 -> 00:11:37.000
より広く使用するためにこのパッケージの公開に近づいているので、GitHub Pagesに準備したドキュメントを公開します。

00:11:37.000 -> 00:11:46.000
まず、マウスをXcodeのプロジェクトナビゲーターに移動し、SlothCreatorアイテムを選択して、フレームワークのプロジェクト設定を開きます。

00:11:46.000 -> 00:11:52.000
次に、 SlothCreator ターゲットを選択し、[ビルド設定] タブを開きます。

00:11:52.000 -> 00:12:00.000
この場合、Swift-DocC関連の設定を探しているので、DocCをフィルタリングしましょう。

00:12:00.000 -> 00:12:10.000
次に、DocC Archive Hosting Base Pathの設定をリポジトリの名前に設定します: sloth-creator。

00:12:10.000 -> 00:12:11.000
すごい！

00:12:11.000 -> 00:12:14.000
次に、ドキュメントを作成しましょう。

00:12:14.000 -> 00:12:21.000
マウスを製品メニューに移動し、ビルドドキュメントを選択します。

00:12:21.000 -> 00:12:28.000
Xcodeがプロジェクトのコンパイルとドキュメントの生成を完了すると、ドキュメントウィンドウが開きます。

00:12:28.000 -> 00:12:31.000
SlothCreatorのドキュメントのトップレベルのページです。

00:12:31.000 -> 00:12:34.000
先に進んで輸出しましょう。

00:12:34.000 -> 00:12:39.000
ドキュメントナビゲーターとSlothCreatorテクノロジーアイテムにマウスを移動します。

00:12:39.000 -> 00:12:44.000
次に、コンテキストメニューをクリックし、[エクスポート]を選択します。

00:12:44.000 -> 00:12:58.000
ドキュメントWebサイトを公開するようにGitHub Pagesを設定したので、リポジトリのルートにある「docs」という名前のディレクトリにエクスポートします。

00:12:58.000 -> 00:13:02.000
今、私は自分の変更をGitHubにコミットしてプッシュする必要があります。

00:13:02.000 -> 00:13:10.000
Xcodeのメインウィンドウに戻り、マウスをソースコントロールメニューに移動し、コミットを選択します。

00:13:10.000 -> 00:13:16.000
ドキュメントの内容があるドキュメントディレクトリを選択し、コミットメッセージを書きます。

00:13:16.000 -> 00:13:24.000
先に進んで変更を推し進めましょう。

00:13:24.000 -> 00:13:26.000
そして、それだけです。

00:13:26.000 -> 00:13:27.000
公開されたサイトをチェックしに行きましょう。

00:13:27.000 -> 00:13:33.000
GitHub.comでリポジトリを開きます。

00:13:33.000 -> 00:13:39.000
私はすでにREADMEにドキュメントサイトへのリンクを配置していたので、クリックするだけです。

00:13:39.000 -> 00:13:41.000
そして、私たちはここにいます。

00:13:41.000 -> 00:13:47.000
SlothCreatorのために取り組んだドキュメントがウェブ上で簡単にアクセスできることにとても興奮しています。

00:13:47.000 -> 00:13:53.000
これは、自分のプロジェクトで SlothCreatorを使用することに興味がある人にとって本当に役立つと思います。

00:13:53.000 -> 00:14:03.000
SlothCreatorのドキュメントを一度展開したので、リポジトリのドキュメントが変更されるときはいつでも展開を実行するように自動化を設定したいと思います。

00:14:03.000 -> 00:14:11.000
SlothCreatorをSwiftパッケージとしてリリースするので、新しいSwift-DocC Swift Package Managerプラグインはここで大きな助けになるでしょう。

00:14:11.000 -> 00:14:18.000
Swift-DocCプラグインを使用して、Swiftパッケージのドキュメントを構築するプロセスを本当に簡素化できます。

00:14:18.000 -> 00:14:29.000
プラグインのドキュメントは以下にリンクされており、GitHub Pagesやその他のホスティングサービスに自動ドキュメントの展開を設定するための素晴らしい出発点としてチェックすることをお勧めします。

00:14:29.000 -> 00:14:39.000
そしてもちろん、Swift-DocCは、Xcode 13で導入されたxcodebuild docbuildコマンドラインインターフェイスを使用して、Xcodeプロジェクトに対する優れたコマンドラインサポートを続けています。

00:14:39.000 -> 00:14:46.000
xcodebuildを使用してGitHub Pagesの展開を自動化する方法に関するドキュメントは、以下にリンクされています。

00:14:46.000 -> 00:14:53.000
今年、ウェブ上でSwift-DocCのまったく新しい強化されたブラウジングとナビゲーション体験をリリースできることに興奮しています。

00:14:53.000 -> 00:15:02.000
新しいナビゲーションサイドバーが、SlothCreatorドキュメントの読者がフレームワークが提供するものを探索するのにどのように役立つかを見てみましょう。

00:15:02.000 -> 00:15:08.000
SlothCreatorのGitHub Pagesサイトに戻り、ページの左側に新しいナビゲーションサイドバーがあります。

00:15:08.000 -> 00:15:15.000
マウスをCareScheduleアイテムに移動し、詳細表示三角形をクリックして展開します。

00:15:15.000 -> 00:15:21.000
これで、ページを完全に開くことなく、CareScheduleの子供として整理されたページを見ることができます。

00:15:21.000 -> 00:15:28.000
この場合、私はタイプの初期化子に直接ジャンプすることに興味があります。

00:15:28.000 -> 00:15:38.000
フレームワークをナビゲートし続け、FoodGeneratorやNalothFoodなどの他のアイテムを拡張し、最終的に小枝ページを開くことができます。

00:15:38.000 -> 00:15:47.000
ページ間を移動すると、ナビゲーションサイドバーの状態が一定のままになり、すでに訪問したページを追跡できます。

00:15:47.000 -> 00:15:52.000
これにより、私が本当に感謝しているフレームワークの自然な探求が可能になります。

00:15:52.000 -> 00:15:57.000
しかし、すでにSlothCreatorフレームワークに精通していて、特定のシンボルに関する情報を探している場合はどうなりますか?

00:15:57.000 -> 00:16:02.000
新しいナビゲーションサイドバーの下部にあるフィルターフィールドは、これに最適です。

00:16:02.000 -> 00:16:07.000
ナマケモノのエネルギーレベルを上げるのに役立つAPIに興味があります。

00:16:07.000 -> 00:16:15.000
マウスをナビゲーターの下部に移動し、フィルターバーを選択して「エネルギー」を挿入します。

00:16:15.000 -> 00:16:16.000
完璧！

00:16:16.000 -> 00:16:21.000
energyLevelプロパティに関するこのドキュメントは、まさに私が探していたものです。

00:16:21.000 -> 00:16:29.000
Xcode 14でSwift-DocCが提供する新しいブラウジング体験は、ドキュメントサイトを次のレベルに引き上げます。

00:16:29.000 -> 00:16:31.000
私たちはあなたがそれを試してみることにとても興奮しています。

00:16:31.000 -> 00:16:37.000
Swift-DocCのXcodeへの統合により、すべてのプロジェクトを文書化できるようになりました。

00:16:37.000 -> 00:16:47.000
これには、XcodeプロジェクトまたはSwiftパッケージとしてパッケージ化されているかどうかにかかわらず、アプリケーションおよびフレームワークターゲットのObjective-CおよびSwiftコードが含まれます。

00:16:47.000 -> 00:16:54.000
Xcode 14によって作成されたDocCアーカイブは、GitHub Pagesを含む一般的なホスティングサービスとすぐに互換性があります。

00:16:54.000 -> 00:17:00.000
これは、ドキュメントをさらに幅広いオーディエンスに配布するためのゲームチェンジャーです。

00:17:00.000 -> 00:17:05.000
そして最後に、Swift-DocCはウェブ上で強力な新しいナビゲーション体験を提供します。

00:17:05.000 -> 00:17:13.000
ナビゲーションサイドバーは、サイト上のドキュメントを探索して見つける新しい方法のロックを解除します。

00:17:13.000 -> 00:17:26.000
新しいSwift-DocCサイドバーと、その新機能を活用するためにドキュメントを作成する方法の詳細については、「Swift-DocCコンテンツの発見可能性を向上させる」セッションをご覧ください。

00:17:26.000 -> 00:17:39.000
また、ドキュメントをさらに進めるには、「DocCを使用してインタラクティブなチュートリアルを構築する」セッションをチェックして、アプリやフレームワークを通じて開発者を導くためのステップバイステップのウォークスルーを構築する方法を学んでください。

00:17:39.000 -> 00:17:44.000
私たちは、あなたがXcode 14で作成し、公開するすべてのドキュメントを見ることにとても興奮しています。

00:17:44.000 -> 00:17:46.000
ご覧いただきありがとうございます。

00:17:46.000 -> 23:59:59.000
♪

