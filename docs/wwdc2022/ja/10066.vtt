WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:11.000
Tarun Belagodu：こんにちは、Metal 3へようこそ。

00:00:11.000 --> 00:00:17.000
私の名前はタルン・ベラゴドゥで、メタルの進化の最新情報を共有します。

00:00:17.000 --> 00:00:19.000
まず、基本から始めましょう。

00:00:19.000 --> 00:00:24.000
Metalは、Appleの低オーバーヘッドグラフィックスとコンピューティングAPIです。

00:00:24.000 --> 00:00:31.000
これは、Apple製品の背後にある信じられないほど強力なGPUを駆動するための最速かつ最も効率的な方法であるように設計されています。

00:00:31.000 --> 00:00:48.000
GPUに送信されるコマンドをマルチスレッドで直接制御し、明示的なシェーダーコンパイルをサポートする豊富なシェーディング言語と、複雑なアプリケーションやゲームをデバッグしてプロファイリングするのに役立つ深く統合されたツールを提供します。

00:00:48.000 --> 00:00:58.000
導入以来、MetalはGPU駆動のレンダリング、機械学習、レイトレーシングに重点を置いて、多くの高度なグラフィックスとコンピューティング機能を追加してきました。

00:00:58.000 --> 00:01:05.000
Appleシリコンは、すべての新しいMacで信じられないほどのグラフィックス性能と効率性への道を開きます。

00:01:05.000 --> 00:01:08.000
そして、メタルはこれらの機能のロックを解除します。

00:01:08.000 --> 00:01:15.000
今年、メタルはメタル3で次のレベルに飛躍しています。

00:01:15.000 --> 00:01:25.000
Metal 3は、アプリやゲームがより速く実行され、素晴らしく見えるように、さらに高いパフォーマンスとレンダリング品質を可能にする強力な新機能セットです。

00:01:25.000 --> 00:01:28.000
迅速なリソースの読み込みから始めましょう。

00:01:28.000 --> 00:01:40.000
現代のゲームやアプリには厳しいアセットの読み込み要件があり、多くの小さなアセットリクエストをファイルからメタルリソースにすばやくストリーミングすることは、多くの場合、高品質のビジュアルの鍵です。

00:01:40.000 --> 00:01:47.000
しかし、既存のストレージAPIは、大規模な一括リクエスト用に設計されています。

00:01:47.000 --> 00:01:56.000
Metal 3の高速リソースロードを使用すると、グラフィックスやコンピューティングと同じ明示的なマルチスレッドコマンドモデルを使用して、多くの小さなロードを要求できます。

00:01:56.000 --> 00:02:03.000
各リクエストはコマンドであり、多くのコマンドを非同期送信のためにキューに入れることができます。

00:02:03.000 --> 00:02:11.000
追加の手順なしでメタルバッファとテクスチャに直接ロードされ、開発労力と転送時間の両方を節約できます。

00:02:11.000 --> 00:02:22.000
高速リソースロードにより、すでに知っているMetal同期プリミティブを使用して、GPU操作とロード操作を簡単に調整できます。

00:02:22.000 --> 00:02:26.000
テクスチャストリーミングシステムは、高速なリソース読み込みから本当に恩恵を受けています。

00:02:26.000 --> 00:02:29.000
例を見てみましょう。 例を見てみましょう。

00:02:29.000 --> 00:02:34.000
メタルスパーステクスチャは、アプリケーションがタイルの粒度でテクスチャをストリーミングすることを可能にします。

00:02:34.000 --> 00:02:44.000
メタルスパーステクスチャ上に構築されたテクスチャストリーミングシステムは、4つのステップで構成されています。まず、前のフレームからのフィードバックに基づいて何をロードするかを決定します。

00:02:44.000 --> 00:02:48.000
次に、ファイルストレージからタイルをロードします。

00:02:48.000 --> 00:02:52.000
第三に、ステージングエリアからスパーステクスチャにコピーします。

00:02:52.000 --> 00:02:56.000
そして最後に、あなたのフレームを描きます。

00:02:56.000 --> 00:03:04.000
読み込みとコピーに時間がかかるほど、アプリが低品質で描画する時間が長くなります。

00:03:04.000 --> 00:03:12.000
高速リソースロードは、ロードオーバーヘッドを最小限に抑え、ストレージハードウェアがキューにスループットを最大化するのに十分な要求があることを保証します。

00:03:12.000 --> 00:03:22.000
これにより、より速く、より一貫したパフォーマンスが得られ、高品質の描画により多くの時間を費やすことができます。

00:03:22.000 --> 00:03:28.000
迅速なリソースロードは、高品質のアセットストリーミングを実現するために書く必要があるコードを大幅に簡素化します。

00:03:28.000 --> 00:03:36.000
高速リソースロードの詳細については、「Metal 3でリソースをより速くロードする」セッションをご覧ください。

00:03:36.000 --> 00:03:44.000
次に、新しいオフラインコンパイルワークフローが、アプリの読み込み時間とスタッターを削減するのにどのように役立つかを説明します。

00:03:44.000 --> 00:03:53.000
シェーダーバイナリは、Metalパイプライン作成プロセスの一環としてアプリが実行されている間に伝統的に生成されるGPU固有のマシンコードです。

00:03:53.000 --> 00:04:01.000
これらのバイナリの生成は、通常、アプリの起動中にロード画面の後ろに隠される高価な操作です。

00:04:01.000 --> 00:04:06.000
しかし、時にはフレーム内で発生する必要があり、その結果、フレームレートのスタッターが発生します。

00:04:06.000 --> 00:04:18.000
これらのバイナリはMetalによってキャッシュされるため、コストを頻繁に支払うことはありませんが、そのコストはアプリの最初の起動時、またはバイナリが最初に必要なときにも観察されます。

00:04:18.000 --> 00:04:25.000
オフラインコンパイルでは、実行時にシェーダーバイナリ生成を排除できます。

00:04:25.000 --> 00:04:37.000
バイナリ生成をプロジェクトビルド時間に移行することで、ロード時にメタルパイプラインの作成に費やす時間を大幅に短縮し、それらのパイプラインがちょうど時間内に作成されたときにアプリのスタッターを減らすことができます。

00:04:37.000 --> 00:04:42.000
吃音を減らすことが何を意味するのかを詳しく見てみましょう。

00:04:42.000 --> 00:04:47.000
これは、エンコード中にMetalパイプライン状態オブジェクトを作成する必要があるゲームの例です。

00:04:47.000 --> 00:04:54.000
これはメタルがこれまでに見たことのないパイプラインであるため、必要なシェーダーバイナリを生成します。

00:04:54.000 --> 00:05:01.000
これは、フレームの残りの部分のエンコーディングを中断し、アプリがフレームレート目標を逃す長い操作です。

00:05:01.000 --> 00:05:07.000
これは一度しか起こりませんが、ユーザーがフレームの吃音に気づくだけで十分です。

00:05:07.000 --> 00:05:18.000
対照的に、オフラインコンパイルとは、すべてのパイプライン状態の作成が高速で、実行がスムーズになるように、シェーダーバイナリをビルド時に生成できることを意味します。

00:05:18.000 --> 00:05:22.000
オフラインコンパイルは、アプリの読み込み時間にも劇的な影響を与える可能性があります。

00:05:22.000 --> 00:05:25.000
例を見てみましょう。 例を見てみましょう。

00:05:25.000 --> 00:05:31.000
ほとんどのアプリは、専用のロードフェーズで金属パイプライン状態オブジェクトの大部分を作成します。

00:05:31.000 --> 00:05:34.000
そして、シェーダーバイナリは最初のロード時に生成されます。

00:05:34.000 --> 00:05:39.000
アプリがそのようなパイプラインをたくさん作成する場合、これはユーザーにとって長い待ち時間になる可能性があります。

00:05:39.000 --> 00:05:50.000
オフラインコンパイルでは、シェーダーバイナリ生成を再びプロジェクトビルド時間に移動できるため、ロード時間が短縮され、ユーザーをより迅速にアプリに誘導できます。

00:05:50.000 --> 00:05:55.000
オフラインコンパイルは、多くの複雑なパイプラインを持つアプリのゲームチェンジャーです。

00:05:55.000 --> 00:06:04.000
オフラインコンパイルやその他の改善の詳細については、「Metal 3でGPUバイナリをターゲットにして最適化する」セッションをチェックしてください。

00:06:04.000 --> 00:06:11.000
それでは、Metalアプリケーションにプラットフォームに最適化されたグラフィックエフェクトを提供するMetalFXに移りましょう。

00:06:11.000 --> 00:06:20.000
MetalFXアップスケーリングは、高性能なアップスケーリングとアンチエイリアスにより、より短い時間で高品質のグラフィックスをレンダリングするのに役立ちます。

00:06:20.000 --> 00:06:27.000
パフォーマンスを向上させるために、時間的または空間的アルゴリズムの組み合わせを選択できます。

00:06:27.000 --> 00:06:29.000
これが重要な理由です。

00:06:29.000 --> 00:06:39.000
Retina解像度は、アプリやゲームに活用してもらいたい鮮明なディテールを提供しますが、これらすべてのピクセルを生成すると、パフォーマンスにも影響する可能性があります。

00:06:39.000 --> 00:06:50.000
MetalFXアップスケーリングを使用すると、より低い解像度でピクセルを生成し、フレームワークがはるかに高いフレームレートで低コストで高品質で高解像度の画像を生成できます。

00:06:50.000 --> 00:06:56.000
MetalFXは、高性能で高品質のアップスケーリングを実現する強力なフレームワークです。

00:06:56.000 --> 00:07:03.000
MetalFXアップスケーリングの詳細については、「MetalFXアップスケーリングによるパフォーマンスの向上」セッションをご覧ください。

00:07:03.000 --> 00:07:09.000
次は、メタルの新しいフレキシブルジオメトリパイプライン、メッシュシェーダーです。

00:07:09.000 --> 00:07:18.000
従来のプログラム可能なグラフィックスパイプラインでは、シェーダーで頂点を変換し、固定機能ハードウェアによるラスタライズのためにプリミティブに組み立てることができます。

00:07:18.000 --> 00:07:25.000
ほとんどのアプリケーションでは十分ですが、淘汰などの一部のユースケースでは、プリミティブ全体にアクセスする必要があります。

00:07:25.000 --> 00:07:30.000
各頂点も独立して読み取られ、変換され、出力されます。

00:07:30.000 --> 00:07:35.000
そのため、ドローの途中で頂点やプリミティブを追加することはできません。

00:07:35.000 --> 00:07:39.000
高度なジオメトリ処理には、より多くの柔軟性が必要です。

00:07:39.000 --> 00:07:43.000
そして、伝統的に、それは計算パスでジオメトリを前処理することを意味していました。

00:07:43.000 --> 00:07:51.000
しかし、それには可変量の中間ジオメトリをデバイスメモリに保存する必要があり、予算を立てるのは難しいかもしれません。

00:07:51.000 --> 00:08:05.000
メタルメッシュシェーダーは、代替ジオメトリ処理パイプラインを導入し、従来の頂点ステージを柔軟な2段階モデルに置き換え、ジオメトリの階層処理を可能にします。

00:08:05.000 --> 00:08:13.000
第1段階では、オブジェクト全体を分析して、第2段階でジオメトリを拡張、縮小、または改良するかどうかを決定します。

00:08:13.000 --> 00:08:21.000
中間デバイスのメモリストレージを必要とせずに、レンダリングパスにコンピューティング機能を提供することでこれを実現します。

00:08:21.000 --> 00:08:30.000
メッシュシェーダーは、GPU主導のカリング、LOD選択、および手続き型ジオメトリ生成を実行するアプリに最適です。

00:08:30.000 --> 00:08:32.000
詳しく見てみましょう。 

00:08:32.000 --> 00:08:38.000
この例では、計算パスがサーフェスを評価し、そのジオメトリを生成します。

00:08:38.000 --> 00:08:44.000
そのジオメトリとその描画コマンドは、後のレンダリングパスで消費するためにデバイスメモリに書き込まれます。

00:08:44.000 --> 00:08:53.000
高い膨張係数と間接的なドローコールでは、必要なメモリの量を予測するのは難しい場合があります。

00:08:53.000 --> 00:09:00.000
メッシュシェーダーは、レンダリングパイプラインで2つの計算のようなステージをインラインで実行することで、効率を向上させます。

00:09:00.000 --> 00:09:07.000
オブジェクトステージは、入力を評価して、いくつのメッシュを生成する必要があるかを決定します。

00:09:07.000 --> 00:09:10.000
そして、メッシュステージは実際のジオメトリを生成します。

00:09:10.000 --> 00:09:20.000
これらのメッシュは、デバイスメモリへのラウンドトリップと頂点処理の必要性をバイパスして、ラスタライザーに直接送信されます。

00:09:20.000 --> 00:09:26.000
メッシュシェーダーを使用すると、アプリの効率的な手続き型ジオメトリ、カリング、およびLODingシステムを構築できます。

00:09:26.000 --> 00:09:34.000
メッシュシェーダーの詳細については、「メタルメッシュシェーダーでジオメトリを変換する」セッションをチェックしてください。

00:09:34.000 --> 00:09:39.000
メタル3はまた、レイトレーシングパイプラインに大幅なスピードアップをもたらします。

00:09:39.000 --> 00:09:45.000
加速構造の構築、交差、シェーディングからすべてが最適化されています。

00:09:45.000 --> 00:09:52.000
Metalはまた、アプリをさらに最適化するために、GPU駆動のレイトレーシングパイプラインのサポートを追加します。

00:09:52.000 --> 00:09:56.000
メタル3のレイトレーシングを以前に利用可能だったものと比較してみましょう。

00:09:56.000 --> 00:10:01.000
メタル3レイトレースは、CPUとGPUの時間を大幅に節約します。

00:10:01.000 --> 00:10:08.000
まず、加速構造はより短い時間で構築され、光線を描画してトレースするGPUの時間が増えます。

00:10:08.000 --> 00:10:16.000
第二に、レイトレーシングの新しい間接コマンドバッファサポートのおかげで、カリングなどのCPU操作をGPUに移行できます。

00:10:16.000 --> 00:10:24.000
最後に、Metal 3レイトレーシングは、プリミティブデータへの直接アクセスをサポートし、交差とシェーディングを合理化および最適化します。

00:10:24.000 --> 00:10:29.000
メタル3レイトレーシングは、以前よりも良く、より強力になり続けています。

00:10:29.000 --> 00:10:36.000
レイトレーシングの詳細については、「メタルレイトレーシングのパフォーマンスを最大化する」セッションをご覧ください。

00:10:36.000 --> 00:10:42.000
さて、Metal 3が機械学習の推論とトレーニングをどのように加速するかを紹介します。

00:10:42.000 --> 00:10:56.000
Metal 3には、機械学習を加速するための大きな改善があり、Macでのネットワークトレーニングを加速するための追加サポートと、グラフィックスおよびメディア処理アプリケーションにおけるML推論最適化の大幅な最適化があります。

00:10:56.000 --> 00:11:02.000
TensorFlowは、Mac上でGPUアクセラレーションされた機械学習のための一般的なフレームワークです。

00:11:02.000 --> 00:11:13.000
最近リリースされたMac Studioは、さまざまなネットワークで、CPUでのトレーニングと比較して、M1 Ultraで最大16倍のスピードアップを提供します。

00:11:13.000 --> 00:11:17.000
また、Metal 3は、多くの新しいTensorFlow操作を加速します。

00:11:17.000 --> 00:11:24.000
つまり、CPUとの同期が少なくなり、さらにスケーラブルなパフォーマンスを実現します。

00:11:24.000 --> 00:11:32.000
PyTorchは、最近Metalを使用してGPUアクセラレーションを獲得したネットワークトレーニングのためのもう一つの非常に人気のあるMLフレームワークです。

00:11:32.000 --> 00:11:39.000
また、M1 Ultraを搭載したMac Studioでは、CPUと比較して大幅なトレーニングスピードアップを実現できます。

00:11:39.000 --> 00:11:49.000
たとえば、BERTモデルを最大6.5倍速く、ResNet50を最大8.5倍速くトレーニングできます。

00:11:49.000 --> 00:11:55.000
Metalは、Appleシリコン全体でML推論を最適化し、パフォーマンスを最大化します。

00:11:55.000 --> 00:12:05.000
これは、BlackMagic DesignのDaVinci Resolveのような金属ベースの高性能ビデオおよび画像処理アプリケーションに特に役立ちます。

00:12:05.000 --> 00:12:13.000
DaVinci Resolveは、ワークフローで金属と機械学習を広範囲に使用するカラーグレーディングに焦点を当てたビデオ制作プラットフォームです。

00:12:13.000 --> 00:12:16.000
そして、結果は信じられないほどです。

00:12:16.000 --> 00:12:28.000
機械学習の加速に対するMetalのサポートにより、BlackMagic Designは編集とカラーグレーディングのワークフローとMLベースのツールのパフォーマンスを劇的に向上させました。

00:12:28.000 --> 00:12:35.000
機械学習のアップデートの詳細については、「Accelerate machine learning with Metal」セッションをご覧ください。

00:12:35.000 --> 00:12:41.000
それでは、先ほど説明したMetal 3の機能をサポートするハードウェアをお伝えします。

00:12:41.000 --> 00:13:03.000
Metal 3は、A13 BionicまたはM1チップ以降を搭載したiPhoneとiPad、および最新のAMDおよびIntel GPUを搭載したすべてのAppleシリコンMacシステムとMacシステムを含む、すべての最新のiOS、iPadOS、およびmacOSデバイスでサポートされています。

00:13:03.000 --> 00:13:12.000
また、特定のデバイスがMetal 3をサポートしているかどうかを調べるには、MetalデバイスのsupportsFamilyクエリを使用します。

00:13:12.000 --> 00:13:19.000
メタル3は機能以上のものです。また、高度な開発者ツールの包括的なセットも含まれています。

00:13:19.000 --> 00:13:20.000
今からいくつかお見せしましょう。

00:13:20.000 --> 00:13:30.000
Xcode 14のMetal Dependency Viewerを使用すると、レンダラー全体を視覚化したり、1回のパスにズームしたりすることがさらに簡単になります。

00:13:30.000 --> 00:13:44.000
また、GPU主導のパイプラインを採用したり、高速なリソースロードと同期したりしやすくするために、依存関係ビューアには、依存関係の分析と検証に役立つ同期エッジが含まれています。

00:13:44.000 --> 00:13:51.000
Xcode 14で改良された加速構造ビューアは、Metal 3の最適化されたレイトレーシングを最大限に活用するのに役立ちます。

00:13:51.000 --> 00:13:57.000
まず、シーン内の個々のプリミティブを強調表示できるようになりました。

00:13:57.000 --> 00:14:05.000
そして、プリミティブを選択すると、左側のアウトラインに関連付けられたプリミティブデータが表示されます。

00:14:05.000 --> 00:14:18.000
最後に、シーンにモーション情報がある場合、加速構造ビューアはさまざまな時点を視覚化できるようになりました。

00:14:18.000 --> 00:14:22.000
そして、それはXcode 14の開発者ツールのアップデートのいくつかを簡単に見るだけです。

00:14:22.000 --> 00:14:34.000
Dylibサポート、新しいリソースリスト、シェーダーエディタのファイルナビゲーション、カスタムバッファビューアレイアウトなど、他の多くの新機能があります。

00:14:34.000 --> 00:14:48.000
ツールとMetal 3の進歩を最大限に活用する方法の詳細については、高度なグラフィックス、ゲーム、プロアプリを構築するのに役立つこれらの他のセッションを必ずチェックしてください。

00:14:48.000 --> 00:15:19.000
今日は、パフォーマンスと品質を向上させるためのMetal 3の高度な機能を紹介しました。高品質のテクスチャストリーミングのための高速リソースロード。より短いロード時間とより少ないスタッタリングのためのオフラインコンパイル。より少ない時間で高解像度でレンダリングするMetalFXアップスケーリング。高度なジオメトリ処理のためのメッシュシェーダー。レイトレーシングのためのより高速な加速構造構築、交差、およびシェーディング。そしてより加速された機械学習

00:15:19.000 --> 00:15:28.000
最後に、GPU駆動のパイプラインやレイトレーシングなどの高度な機能を使用するのに役立つ高度なツールをいくつか紹介しました。

00:15:28.000 --> 00:15:34.000
新しいコードサンプルとドキュメントの詳細については、developer.apple.com/Metalをご覧ください。

00:15:34.000 --> 23:59:59.000
ご参加いただきありがとうございます。

