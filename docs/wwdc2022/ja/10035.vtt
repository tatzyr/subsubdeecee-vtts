WEBVTT

00:00:01.000 --> 00:00:12.000
エリック：こんにちは！WWDCへようこそ!

00:00:12.000 --> 00:00:13.000
私の名前はエリックです。

00:00:13.000 --> 00:00:16.000
私はマップチームのエンジニアです。

00:00:16.000 --> 00:00:23.000
今日は、同僚のYingxiuと一緒に、MapKitの新機能について調査します。

00:00:23.000 --> 00:00:31.000
Apple Mapsがまったく新しい地図と没入型のLook Around体験を導入してから3年が経ちました。

00:00:31.000 --> 00:00:42.000
もともと米国の支援を受けて開始されたまったく新しいマップとLook Aroundのカバレッジは、それ以来拡大しており、現在はカナダ、多くのヨーロッパ諸国、日本などが含まれています。

00:00:42.000 --> 00:00:57.000
昨年、アップルマップは、ターンレーン、横断歩道、自転車レーン、フェリービルディングのような美しく手作りされた3Dランドマークを特徴とする3Dシティエクスペリエンスを導入することで、物事を次のレベルに引き上げました。

00:00:57.000 --> 00:01:10.000
地図の追加の詳細により、これまで不可能だったコンテキストと精度を提供でき、3D地形標高の追加は、他の地図にはないレベルのリアリズムを提供します!

00:01:10.000 --> 00:01:20.000
今年、MapKitはAppleマップからの最新のイノベーションをアプリにもたらし、ユーザーが驚くべき詳細で世界を探索できるようにします。

00:01:20.000 --> 00:01:24.000
この講演では、いくつかの新しいMapKit機能について説明します。

00:01:24.000 --> 00:01:31.000
まず、まったく新しいマップを採用し、Map Configuration APIを使用して完全に活用することについて説明します。

00:01:31.000 --> 00:01:40.000
次に、コンテンツをマップとシームレスに統合できるように、オーバーレイAPIのさまざまな改善について説明します。

00:01:40.000 --> 00:01:49.000
また、新しいブレンドモードのサポートについても議論し、それを活用してマップコンテンツのプレゼンテーションをさらに強化する方法を紹介します。

00:01:49.000 --> 00:01:57.000
次に、新しいSelectable Map Features APIを採用することで、マップをよりインタラクティブにする方法について説明します。

00:01:57.000 --> 00:02:04.000
そして最後に、没入型のLook Around体験をアプリケーションに直接統合することについて説明します。

00:02:04.000 --> 00:02:13.000
カバーすべきことがたくさんあるので、まったく新しいマップを採用し、Map Configuration APIを使用するという最初のトピックに向かうときにシートベルトを締めます。

00:02:13.000 --> 00:02:20.000
iOS、macOS、またはtvOSアプリケーションでまったく新しいマップを採用することは、これ以上ないほど簡単です。

00:02:20.000 --> 00:02:30.000
新しいSDKでアプリを再コンパイルするだけで、3Dシティエクスペリエンスを含むまったく新しいAppleマップに自動的にオプトインされます。

00:02:30.000 --> 00:02:36.000
多くのアプリケーションでは、必要なのは簡単な再コンパイルだけです。

00:02:36.000 --> 00:02:41.000
もちろん、地図の表示をもっとコントロールする必要がある状況があるかもしれません。

00:02:41.000 --> 00:02:48.000
iOS 15では、マップの設定方法は、MKMapViewのさまざまなプロパティを介して行います。

00:02:48.000 --> 00:02:58.000
しかし、iOS 16では、これらのプロパティをソフト非推奨にしており、代替として新しいMap Configuration APIを導入しています。

00:02:58.000 --> 00:03:04.000
MKMapConfigurationは、新しいMap Configuration APIの中心クラスです。

00:03:04.000 --> 00:03:11.000
MKMapConfigurationは、3つの具体的なサブクラスを持つ抽象基本クラスです。

00:03:11.000 --> 00:03:16.000
画像マップの構成は、衛星スタイルの画像を表示するために使用されます。

00:03:16.000 --> 00:03:26.000
ハイブリッドマップ構成は、道路標識や興味のあるポイントなどのマップ機能を追加した画像ベースのマップを表示するために使用されます。

00:03:26.000 --> 00:03:31.000
標準のマップ構成は、完全にグラフィックベースのマップを表示するために使用されます。

00:03:31.000 --> 00:03:40.000
これら3つの地図構成は、既存の地図タイプに似ているので、聞き覚えがあるかもしれません。

00:03:40.000 --> 00:03:48.000
ベースマップ構成クラスは、フラットまたは現実的なelevationStyleプロパティをサポートしています。

00:03:48.000 --> 00:03:52.000
平らな標高スタイルは、地面が平らに見えることを意味します。

00:03:52.000 --> 00:03:57.000
橋や陸橋などの道路も平坦に見えます。

00:03:57.000 --> 00:04:00.000
フラットはデフォルトの標高スタイルです。

00:04:00.000 --> 00:04:08.000
現実的な標高スタイルは、地面の地形が丘や山などの現実世界の標高を再現することを意味します。

00:04:08.000 --> 00:04:13.000
道路は現実的な標高の詳細で描かれている。

00:04:13.000 --> 00:04:18.000
では、マップ設定のサブクラスを詳しく見てみましょう。

00:04:18.000 --> 00:04:28.000
画像マップの構成は、追加のマップ機能のない衛星画像のみを表示するため、他のプロパティはありません。

00:04:28.000 --> 00:04:37.000
ハイブリッドマップ構成には、ポイントオブインタレストカテゴリのフィルタリングと、トラフィックを表示するかどうかを制御するための追加のプロパティがあります。

00:04:37.000 --> 00:04:45.000
標準のマップ設定は、デフォルトまたはミュートのいずれかの強調スタイルプロパティをサポートしています。

00:04:45.000 --> 00:04:51.000
名前が示すように、特に明記されていない限り、これはデフォルトの強調スタイルです。

00:04:51.000 --> 00:05:02.000
ミュートされた強調スタイルは、地図の詳細のコントラストを柔らかくし、上部に表示したい追加のグラフィカル情報にもっと注意を払うことができます。

00:05:02.000 --> 00:05:12.000
標準マップ構成には、ポイントオブインタレストカテゴリのフィルタリングと、トラフィックを表示するかどうかを制御するための追加のプロパティもあります。

00:05:12.000 --> 00:05:18.000
そして、それは利用可能なマップ構成クラスとそのプロパティをまとめたものです。

00:05:18.000 --> 00:05:23.000
この新しいAPIは、サポートされているオプションの組み合わせのみを設定できることを保証します。

00:05:23.000 --> 00:05:27.000
また、マップの設定を原子的に変更することもできます。

00:05:27.000 --> 00:05:32.000
これは既存のAPIよりも大きな改善だと思います。

00:05:32.000 --> 00:05:42.000
先ほど説明したことを要約すると、新しいマップ構成クラスとMKMapTypeプロパティの対応を示す表があります。

00:05:42.000 --> 00:05:46.000
3Dシティエクスペリエンスを備えたまったく新しいマップには、互換性のあるハードウェアが必要です。

00:05:46.000 --> 00:05:53.000
iOSでは、新しいマップサポートにはA12ベースのiPhoneとiPad以降が必要です。

00:05:53.000 --> 00:05:59.000
macOSでは、新しいマップサポートにはM1ベースのコンピュータ以降が必要です。

00:05:59.000 --> 00:06:09.000
3Dシティエクスペリエンスが利用できない地域では、マップは自動的にフォールバックして、平坦な標高でまったく新しいマップを提示します。

00:06:09.000 --> 00:06:15.000
他のすべてのデバイスでは、まったく新しい地図は平らな標高で表示されます。

00:06:15.000 --> 00:06:22.000
M1 Macでは、Xcodeを使用すると、OSのバージョンを変更するだけで両方の体験をシミュレートできます。

00:06:22.000 --> 00:06:29.000
アプリがすべてのデバイスで見栄えを良くするために、両方を試してみることをお勧めします!

00:06:29.000 --> 00:06:35.000
3Dシティエクスペリエンスは、世界中の多くの大都市圏で利用できます。

00:06:35.000 --> 00:06:45.000
このリストに新しい都市を継続的に追加しているので、セッションノートにリンクされている機能可用性Webサイトの3Dシティエクスペリエンスセクションをチェックすることをお勧めします。

00:06:45.000 --> 00:06:52.000
これで、まったく新しいマップの採用とMap Configuration APIの使用に関するセクションは終了です。

00:06:52.000 --> 00:06:55.000
では、オーバーレイに飛び込みましょう。

00:06:55.000 --> 00:06:59.000
MapKitは何年もの間、いくつかのスタイリングオプションでオーバーレイをサポートしてきました。

00:06:59.000 --> 00:07:06.000
iOS 16では、既存のAPIを改善して、オーバーレイをマップとシームレスに統合できるようにしています。

00:07:06.000 --> 00:07:11.000
オーバーレイレベルの簡単な要約から始めましょう。

00:07:11.000 --> 00:07:17.000
オーバーレイは、道路の上とラベルの上の2つの異なるレベルでレンダリングできます。

00:07:17.000 --> 00:07:24.000
MapKitの多くのオーバーレイ挿入機能の1つを使用して、挿入時のレンダリングレベルを指定できます。

00:07:24.000 --> 00:07:29.000
上記のラベルは、ラベルを含むすべてのものの上にオーバーレイをレンダリングします。

00:07:29.000 --> 00:07:40.000
ラベルは重要なコンテキスト情報を提供するため、データがマップとまったくやり取りしたくないまれな場合にのみ、上記のラベルを使用することをお勧めします。

00:07:40.000 --> 00:07:52.000
あなたが達成しようとしているのは、コンテンツがマップに対して目立つことである場合は、ミュートされたマップ強調またはブレンドモードの使用を検討することをお勧めします。

00:07:52.000 --> 00:08:00.000
上記の道路は、オーバーレイが道路、土地被覆、または水域を含む地形の上に表示されることを意味します。

00:08:00.000 --> 00:08:06.000
ただし、ラベルの下に表示され、ある程度は木や建物が表示されます。

00:08:06.000 --> 00:08:07.000
それについては、すぐにもっと。

00:08:07.000 --> 00:08:11.000
上の道路は、iOS 16の新しいデフォルトモードになります。

00:08:11.000 --> 00:08:18.000
次に、iOS 16で導入する透明な建物と呼ばれる新機能について話しましょう。

00:08:18.000 --> 00:08:28.000
オーバーレイレベルが道路の上かラベルの上かにかかわらず、ピッチなしでトップダウンで見ると、オーバーレイは常に建物の上にレンダリングされます。

00:08:28.000 --> 00:08:35.000
しかし、ピッチマップと組み合わせて上記の道路を使用する際の体験にいくつかの改善を加えました。

00:08:35.000 --> 00:08:45.000
木や建物などの地上オブジェクトは、オーバーレイの上に表示されるときに自動的に透明でレンダリングされ、それらを完全に隠すことはありません。

00:08:45.000 --> 00:08:49.000
アルファ値は、マップのピッチ角度によって異なります。

00:08:49.000 --> 00:09:00.000
0ºピッチの角度で地図をトップダウンで表示することに戻ると、衝突する地面の物体は事実上視界から消え、オーバーレイが完全に見えます。

00:09:00.000 --> 00:09:04.000
透明な建物は、半透明のオーバーレイにも機能します。

00:09:04.000 --> 00:09:11.000
オーバーレイのアルファ値は、透明な建物のアルファ値と組み合わせるために追加されます。

00:09:11.000 --> 00:09:14.000
オーバーレイにもう1つの変更があります。

00:09:14.000 --> 00:09:23.000
現実的な地形を持つ地図にオーバーレイを追加すると、MapKitは自動的に地図を平らな表現に移行します。

00:09:23.000 --> 00:09:28.000
最後のオーバーレイを削除すると、マップは自動的にリアルに戻ります。

00:09:28.000 --> 00:09:35.000
このルールの注目すべき例外の1つは、MapKitの方向APIを介して供給されたオーバーレイです。

00:09:35.000 --> 00:09:39.000
これらのオーバーレイは自動的に地形に従います。

00:09:39.000 --> 00:09:42.000
そしてそれで、私はそれをYingxiuに引き渡すつもりです。

00:09:42.000 --> 00:09:45.000
Yingxiu:ありがとう、エリック。こんにちは！私はYingxiuです。

00:09:45.000 --> 00:09:47.000
私はマップチームのエンジニアです。

00:09:47.000 --> 00:09:56.000
新しいMapKit機能を実演し、更新されたAPIで美しいマップ体験を構築するのがいかに簡単かをお見せします。

00:09:56.000 --> 00:10:04.000
私は、ユーザーがサンフランシスコをツアーするためにスクーターを借りるのに役立つサンプルアプリを使用します。

00:10:04.000 --> 00:10:10.000
私たちのアプリは、このテーブルビューの行に示すように、多くの機能を提供しています。

00:10:10.000 --> 00:10:14.000
「オペレーティングエリア」を使用すると、ユーザーはスクーターをどこに持って行けるかを確認できます。

00:10:14.000 --> 00:10:19.000
「ライド」は、ゴールデンゲートブリッジを渡るツアーにユーザーを連れて行きます。

00:10:19.000 --> 00:10:28.000
「Explore」は、ウォーターフロント近くのアトラクションを探索するために使用できるサンフランシスコのダウンタウンのインタラクティブマップをユーザーに提供します。

00:10:28.000 --> 00:10:33.000
「ハイライト」では、必見の場所を詳しく見ることができます。

00:10:33.000 --> 00:10:36.000
このセッションでは、これらの機能を実装またはアップグレードします。

00:10:36.000 --> 00:10:42.000
始めましょう！

00:10:42.000 --> 00:10:54.000
まず、オペレーティングエリア機能を使用して、まったく新しいマップの採用がいかに簡単かを示し、次にオーバーレイに対して行った改善点をいくつか紹介します。

00:10:54.000 --> 00:10:57.000
私はすでにXcodeでプロジェクトを開いています。

00:10:57.000 --> 00:11:05.000
iOS 16 SDKでコンパイルして、どのように見えるか見てみましょう。

00:11:05.000 --> 00:11:06.000
着きました！

00:11:06.000 --> 00:11:09.000
私たちはすでにまったく新しい地図にオプトインしています。

00:11:09.000 --> 00:11:16.000
私たちは、これらの美しい照明や地形の丘の陰影効果を含む、豊富な詳細を持つマップビューを取得します。

00:11:16.000 --> 00:11:26.000
ズームインすると、建物や木々が見えます。

00:11:26.000 --> 00:11:29.000
...そしてランドマーク。

00:11:29.000 --> 00:11:37.000
では、ポリゴンオーバーレイを追加して、操作領域を視覚化しましょう。

00:11:37.000 --> 00:11:41.000
ここでは、すでに操作エリアのポリゴンデータの準備ができています。

00:11:41.000 --> 00:11:47.000
ビューが読み込まれたら、まず領域とカメラの境界を設定します。

00:11:47.000 --> 00:11:50.000
正しい領域を見るようにしてください。

00:11:50.000 --> 00:11:53.000
次に、オーバーレイを追加するだけです。

00:11:53.000 --> 00:11:57.000
それを構築し、それをチェックしましょう!

00:11:57.000 --> 00:12:01.000
ポリゴンオーバーレイはまっすぐ下に見ると不透明です。

00:12:01.000 --> 00:12:13.000
ズームインしてピッチングすると、建物が表示され始め、さらにピッチングするにつれて透明性が高まります。

00:12:13.000 --> 00:12:18.000
この効果は、オーバーレイレベルのAboveRoadsを使用する場合にのみ使用できます。

00:12:18.000 --> 00:12:25.000
透明な建物や木を活用したい場合は、正しいオーバーレイレベルを選択してください。

00:12:25.000 --> 00:12:30.000
オーバーレイは素晴らしく見えますが、ピッチングされていなくても地図を表示したいです。

00:12:30.000 --> 00:12:37.000
コードに戻って半透明にしましょう。 半透明にしましょう。

00:12:37.000 --> 00:12:44.000
アルファを0.8に変更しましょう。

00:12:44.000 --> 00:12:49.000
今、私たちは透明なオーバーレイを持っており、私はピッチングされていない場合でも道路や建物を見ることができます。

00:12:49.000 --> 00:12:55.000
ズームインして地図を投げても、透明度が上がります。

00:12:55.000 --> 00:12:57.000
これは素晴らしく見えます!

00:12:57.000 --> 00:12:59.000
ポリゴンオーバーレイは以上です。

00:12:59.000 --> 00:13:05.000
次に、現実的な地形を統合し、高架ルートラインを追加する方法を紹介したいと思います。

00:13:05.000 --> 00:13:14.000
これにより、ゴールデンゲートブリッジを渡るツアーである「ライド」機能が完成します。

00:13:14.000 --> 00:13:17.000
マップビューを設定することから始めましょう。

00:13:17.000 --> 00:13:26.000
コードの標高スタイルを変更することも、右側のInterface Builderインスペクタを開くこともできます。

00:13:26.000 --> 00:13:30.000
利用可能なマップビューの構成設定は次のとおりです。

00:13:30.000 --> 00:13:34.000
現実的な標高を選択しましょう。

00:13:34.000 --> 00:13:38.000
次に、ルートに取り組みましょう。

00:13:38.000 --> 00:13:44.000
この機能では、ユーザーがルート表示スイッチを切り替えたときにルートを表示したいと考えています。

00:13:44.000 --> 00:13:52.000
また、ルートに焦点を合わせるためにカメラをアニメーション化します。

00:13:52.000 --> 00:14:05.000
ゴールデンゲートブリッジを渡るルートを表示したいので、プレシディオパークのエントリを出発点として、バッテリースペンサーをエンドポイントとして使用します。

00:14:05.000 --> 00:14:16.000
マップビューが読み込まれたら、開始点と目的地点をマークする注釈を作成します。

00:14:16.000 --> 00:14:31.000
座標とタイトルを設定し、注釈配列に追加してから、マップビューに追加します。

00:14:31.000 --> 00:14:37.000
今、私たちはルートポリラインに集中することができます。

00:14:37.000 --> 00:14:45.000
通常のオーバーレイは地図を平らにしますが、MapKitのDirections APIによって返されたポリラインは現実的な地形を維持します。

00:14:45.000 --> 00:14:57.000
このアクション機能では、スイッチをオンにすると、上記で定義された座標でプレースマークを作成します。

00:14:57.000 --> 00:15:06.000
次に、送信元と宛先を含む方向要求を作成します。

00:15:06.000 --> 00:15:11.000
最後に、私たちは道順を要求します。

00:15:11.000 --> 00:15:21.000
フェッチ操作が成功したら、ルートポリラインをオーバーレイとして追加するだけです。

00:15:21.000 --> 00:15:22.000
わかった。

00:15:22.000 --> 00:15:29.000
それをコンパイルして、それがどのように見えるか見てみましょう!

00:15:29.000 --> 00:15:35.000
注釈が自動的に新しいグラデーションの外観にアップグレードされることに気づくでしょう。

00:15:35.000 --> 00:15:38.000
また、正しい標高でシームレスに表示されます。

00:15:38.000 --> 00:15:41.000
ショーのルートを切り替えると、カメラがピッチします。

00:15:41.000 --> 00:15:46.000
その後、あなたはそれらをよりよく見ることができます。

00:15:46.000 --> 00:15:50.000
ご覧のとおり、ルートラインは高架地形をたどります。

00:15:50.000 --> 00:15:54.000
これは、複雑な交差点をナビゲートするときに便利です。

00:15:54.000 --> 00:15:57.000
また、橋を渡る道をたどります。

00:15:57.000 --> 00:16:03.000
また、ルートが橋の柱を通して微妙にどのように見えるかに注目してください。

00:16:03.000 --> 00:16:11.000
最後に、地図が本当に傾斜しているとき、あなたはその前に立っている木々を通してルートショーを見ることができます。

00:16:11.000 --> 00:16:16.000
さて、見て、ルートラインの色は木がないここで洗い流されています。

00:16:16.000 --> 00:16:22.000
ズームアウトして、ここで何が起こっているのか見てみましょう。

00:16:22.000 --> 00:16:28.000
さて、ルートのこの部分はトンネルを通過するので、透明性を得ることができます。

00:16:28.000 --> 00:16:35.000
ElevationRealisticStyleと高架ルートライン機能は、A12ベースのiOSデバイスでサポートされています。

00:16:35.000 --> 00:16:44.000
古いiOSデバイスで同じアプリを実行すると、2Dマップで自動的に2Dルートを取得します。

00:16:44.000 --> 00:16:49.000
3D都市体験マップに高架ルートラインを追加するのはとても簡単です!

00:16:49.000 --> 00:16:51.000
それで、私はそれをエリックに返します。

00:16:51.000 --> 00:16:53.000
エリック:ありがとう、Yingxiu!

00:16:53.000 --> 00:16:57.000
ゴールデンゲートブリッジを渡るそのスクーターの乗り物は絶対に見事に見えます!

00:16:57.000 --> 00:17:02.000
だから、それはMapKitオーバーレイの新機能のほんの一部です。

00:17:02.000 --> 00:17:05.000
次に、ブレンドモードについて話しましょう。

00:17:05.000 --> 00:17:14.000
この新しいAPIを使用すると、オーバーレイのルックアンドフィールをより詳細に制御し、さまざまな新しい創造的な可能性を解き放ちます。

00:17:14.000 --> 00:17:21.000
多くの人がすでに写真編集アプリやAppleのCoreGraphics APIのブレンドモードに精通していると思います。

00:17:21.000 --> 00:17:28.000
ブレンド操作中、ブレンドモードで指定された一連の方程式に従って、2つのグラフィカルレイヤーが組み合わされます。

00:17:28.000 --> 00:17:35.000
では、MapKitのコンテキストでブレンドモードを使用する方法の例を見てみましょう。

00:17:35.000 --> 00:17:43.000
このシナリオでは、この地図の中央にあるサンフランシスコのプレシディオ国立公園のエリアを強調したいと思います。

00:17:43.000 --> 00:17:51.000
まず、プレシディオの形をした切り抜きで、マップエリア全体をカバーするオーバーレイを作成します。

00:17:51.000 --> 00:17:53.000
私はまだブレンドモードを使っていません。

00:17:53.000 --> 00:17:58.000
これは、大きな四角いドーナツの形をしたプレーンなオーバーレイです。

00:17:58.000 --> 00:18:04.000
次に、グレーの塗りつぶしで、色相ブレンドモードをオーバーレイに割り当てます。

00:18:04.000 --> 00:18:08.000
これにより、プレシディオの外側の地図が不飽和になります。

00:18:08.000 --> 00:18:16.000
次に、そのオーバーレイを複製し、ダークグレーの塗りつぶしでハードライトブレンドモードを割り当てます。

00:18:16.000 --> 00:18:20.000
これは、プレシディオ周辺の領域を暗くする効果があります。

00:18:20.000 --> 00:18:23.000
これはすでに素敵に見えますが、別のオーバーレイを追加しましょう。

00:18:23.000 --> 00:18:32.000
今回は、プレシディオの形をしたオーバーレイを追加し、黄色の塗りつぶしで彩度ブレンドモードを割り当てます。

00:18:32.000 --> 00:18:36.000
うわー、それは私がここで目指していた効果ではありません。

00:18:36.000 --> 00:18:38.000
色が明るすぎます。

00:18:38.000 --> 00:18:40.000
何か他のものを試してみましょう。

00:18:40.000 --> 00:18:44.000
グレーの塗りつぶしでカラーバーンブレンドモードを適用します。

00:18:44.000 --> 00:18:47.000
そこでは、それはもう少し微妙です。

00:18:47.000 --> 00:18:48.000
完璧！

00:18:48.000 --> 00:18:52.000
さて、いくつかのコードを見てみましょう。

00:18:52.000 --> 00:18:59.000
先ほど見たような効果を有効にするために、MKOverlayRendererにblendModeというプロパティを追加しました。

00:18:59.000 --> 00:19:06.000
オーバーレイレンダラーに目的のCoreGraphicsブレンドモードを設定するだけで完了です!

00:19:06.000 --> 00:19:09.000
前述のように、ブレンドモードは順序に依存します。

00:19:09.000 --> 00:19:21.000
スタックの下部にあるオーバーレイはマップとブレンドされ、2番目から最後のオーバーレイは前のブレンド操作の結果とブレンドされます。

00:19:21.000 --> 00:19:25.000
MapKitでは、オーバーレイの順序は挿入時に決定されます。

00:19:25.000 --> 00:19:35.000
MKMapViewの多くのオーバーレイ挿入機能の1つを使用して、絶対位置または相対位置のいずれかを使用できます。

00:19:35.000 --> 00:19:41.000
MapKitは幅広いブレンドモードをサポートしており、今日ではそれらすべてをカバーすることはできません。

00:19:41.000 --> 00:19:43.000
私はあなたがそれらを試してみることをお勧めします。

00:19:43.000 --> 00:19:45.000
そして、それはブレンドモードのためのものです!

00:19:45.000 --> 00:19:51.000
先ほど見たように、ブレンドモードはマップのスタイリングを制御する強力なツールです。

00:19:51.000 --> 00:20:00.000
地理的な地域を強調したり、地図を強調してコンテンツを目立たせたりするために使用できます。

00:20:00.000 --> 00:20:03.000
次に、選択可能な地図機能について話しましょう!

00:20:03.000 --> 00:20:09.000
これは非常に要求された機能であり、私はあなたにそれを見せることに本当に興奮しています!

00:20:09.000 --> 00:20:20.000
今日アプリでMapKitを使用している場合は、注釈を活用して都市、興味のある場所、または物理的なオブジェクトを表示している可能性があります。

00:20:20.000 --> 00:20:29.000
POIフィルタリングを使用していない限り、すでにAppleが提供する多くの同様の注釈を含む地図上にそれらの注釈を配置しています。

00:20:29.000 --> 00:20:35.000
これまで、ユーザーはあなたが提供した注釈としかやり取りできませんでした。

00:20:35.000 --> 00:20:39.000
iOS 16では、それを変えます。

00:20:39.000 --> 00:20:48.000
新しい選択可能なマップ機能APIを使用すると、ユーザーがマップ上の機能を選択できるようにするオプションが可能になります。

00:20:48.000 --> 00:21:03.000
選択可能な地図機能には、店舗、レストラン、ランドマークなどの興味のある場所、都市や州などの領土、山脈や湖などの物理的な特徴が含まれます。

00:21:03.000 --> 00:21:10.000
アプリで選択可能なマップ機能を採用するには、いくつかの簡単な手順を実行するだけです。

00:21:10.000 --> 00:21:14.000
まず、どの機能タイプを選択可能かを設定します。

00:21:14.000 --> 00:21:22.000
先ほど見たように、3つの主要な機能タイプがあり、それらのすべてがアプリのコンテキストでインタラクティブであることは意味をなさないかもしれません。

00:21:22.000 --> 00:21:33.000
ポイントオブインタレスト機能については、既存のフィルターAPIを使用して、どのポイントオブインタレストカテゴリが表示され、したがって選択可能かをさらに制限することもできます。

00:21:33.000 --> 00:21:38.000
次に、選択イベントを処理するためにMKMapViewデリゲートコールバックを実装します。

00:21:38.000 --> 00:21:42.000
これらのイベントは、あなたが選択した方法で自由に処理できます。

00:21:42.000 --> 00:21:50.000
選択した機能の表示方法を制御するか、選択イベントに応じて追加のUIを表示したい場合があります。

00:21:50.000 --> 00:21:57.000
第三に、アプリケーションのユーザーインターフェイスで追加の場所情報を要求して表示したいと思うでしょう。

00:21:57.000 --> 00:22:02.000
地図機能に埋め込まれた情報は、画面に表示されるものに限定されています。

00:22:02.000 --> 00:22:09.000
ユーザーが選択した場所に関するより多くのコンテキストを提供するには、追加情報をリクエストする必要があります。

00:22:09.000 --> 00:22:14.000
これらの各ステップの新しいAPIについて説明しましょう。

00:22:14.000 --> 00:22:23.000
新しいselectableMapFeaturesプロパティを使用して、どのマップ機能を選択可能かを設定することから始めます。

00:22:23.000 --> 00:22:29.000
興味のあるポイント、領土、物理的な特徴の任意の組み合わせを選択できます。

00:22:29.000 --> 00:22:41.000
選択可能なマップ機能を設定し、ユーザーがそれらの機能の1つをタップすると、選択動作をカスタマイズできる新しいデリゲートコールバックの受信が開始されます。

00:22:41.000 --> 00:22:46.000
最初に得られるコールバックは、新しいdidSelectアノテーションコールバックです。

00:22:46.000 --> 00:22:56.000
このコールバックは、すぐに取り上げる新しいリクエストAPIを使用して、マップアイテムに関する追加データをリクエストする絶好の機会です。

00:22:56.000 --> 00:23:00.000
2番目のコールバックは、既存のviewForアノテーションコールバックです。

00:23:00.000 --> 00:23:06.000
ここでは、選択した状態に表示されるビューをカスタマイズできます。

00:23:06.000 --> 00:23:13.000
これは既存のAPIですが、MapFeatureAnnotationという新しいタイプのアノテーションクラスを追加しました。

00:23:13.000 --> 00:23:19.000
このクラスは、ユーザーがマップ機能を選択すると、注釈のビューに渡されます。

00:23:19.000 --> 00:23:23.000
MapFeatureAnnotationにはいくつかのプロパティがあります。

00:23:23.000 --> 00:23:31.000
FeatureTypeプロパティを調べて、マップ機能が興味のあるポイント、テリトリー、または物理的な機能であるかどうかを判断できます。

00:23:31.000 --> 00:23:48.000
マップ機能が興味のあるポイントである場合、pointOfInterestCategoryプロパティはそのカテゴリが何であるかを知らせ、iconStyleプロパティを使用すると、背景色やアイコン画像自体など、アイコンに関する追加情報を取得できます。

00:23:48.000 --> 00:23:55.000
viewForアノテーションコールバックを使用してアノテーションビューをカスタマイズする方法の例を見てみましょう。

00:23:55.000 --> 00:24:02.000
マップアプリと同じ選択スタイルを実現したい場合は、nilを返すだけです。

00:24:02.000 --> 00:24:10.000
選択スタイルをカスタマイズしたい場合は、独自の注釈と同じように、annotationViewを返すことができます。

00:24:10.000 --> 00:24:13.000
markerAnnotationViewは素晴らしいオプションです。

00:24:13.000 --> 00:24:22.000
マップアプリと同じバルーンスタイルの形状、グラデーション処理を行い、独自の色やアイコンを選択できます。

00:24:22.000 --> 00:24:33.000
ここでの例では、機能のアイコンスタイルから得られた同じ画像を使用し、アプリケーションの色合いの色に合わせて色のみを変更することを選択しました。

00:24:33.000 --> 00:24:40.000
完全にカスタムにしたい場合は、作成した注釈ビューのサブクラスを提供できます。

00:24:40.000 --> 00:24:46.000
先ほど見たように、機能アノテーションを使用して、選択した機能に関する視覚的な情報を取得できます。

00:24:46.000 --> 00:24:57.000
機能アノテーションを新しいMKMapItemRequest APIに渡すことで、選択した機能のマップ項目を取得することもできます。

00:24:57.000 --> 00:25:07.000
このマップ項目には、住所、名前、電話番号、URLなど、場所に関する追加のメタデータが含まれています。

00:25:07.000 --> 00:25:17.000
マップ項目は、ユーザーがMapKitでは利用できない追加のメタデータを表示したい場合は、マップアプリにパンチアウトする機能も提供します。

00:25:17.000 --> 00:25:20.000
そして今、私は再びそれをYingxiuに引き渡します。

00:25:20.000 --> 00:25:22.000
Yingxiu:ありがとう、エリック。

00:25:22.000 --> 00:25:26.000
エリックは、選択可能なマップ機能を案内しました。

00:25:26.000 --> 00:25:33.000
そのAPIを活用するのがいかに簡単かをお見せします。

00:25:33.000 --> 00:25:36.000
そのために、Explore機能を実装します。

00:25:36.000 --> 00:25:41.000
私たちは、ユーザーがウォーターフロントの近くのいくつかの興味深い場所を探索できるようにしたいと考えています。

00:25:41.000 --> 00:25:45.000
POIをタップすると、注釈が表示されるはずです。

00:25:45.000 --> 00:25:52.000
タップされた場所にカメラアニメーションを実行し、下から情報カードを表示します。

00:25:52.000 --> 00:26:00.000
まず、地図上で興味のあるポイントをフィルタリングし、ツアーとは無関係なカテゴリを削除しましょう。

00:26:00.000 --> 00:26:07.000
コードにフィルターを適用するだけでなく、Interface Builderインスペクタでも適用できます。

00:26:07.000 --> 00:26:13.000
マップビューを選択し、右側のインスペクタに移動しましょう。

00:26:13.000 --> 00:26:18.000
ここでは、除外フィルターを行います。

00:26:18.000 --> 00:26:33.000
空港、レンタカー、病院、ランドリーなど、望まないカテゴリを選択します。

00:26:33.000 --> 00:26:42.000
今、私たちはマップビューで興味のあるポイントだけを望んでいるはずです。

00:26:42.000 --> 00:26:45.000
選択可能なマップ機能を有効にするのはとても簡単です。

00:26:45.000 --> 00:26:54.000
必要なのは、目的の選択可能な機能のオプションセットを指定することだけです。

00:26:54.000 --> 00:27:10.000
このサンプルアプリの範囲では、興味のあるポイントを使用するだけですが、選択可能な物理的な機能と領域もサポートしていることに注意してください。

00:27:10.000 --> 00:27:19.000
既存のデリゲートメソッドmapView viewForAnnotationを使用して、機能アノテーションのビューを作成できます。

00:27:19.000 --> 00:27:26.000
ここでは、今のところゼロを返します... 

00:27:26.000 --> 00:27:30.000
MapKitが提供するデフォルトのグラデーションアノテーションを使用するには。

00:27:30.000 --> 00:27:35.000
私たちは後でそれをカスタマイズするために戻ってきます。

00:27:35.000 --> 00:27:46.000
アノテーションが選択された状態にある場合は、新しいデリゲートメソッドmapView didSelectAnnotationを通じて通知されます。

00:27:46.000 --> 00:27:53.000
この機能を使用して、カメラのアニメーションを実行し、選択した機能を拡大しましょう。

00:27:53.000 --> 00:28:04.000
まず、アノテーションをfeatureAnnotationにキャストし、それを使ってマップアイテムリクエストを作成しましょう。

00:28:04.000 --> 00:28:11.000
これは、機能アノテーションで追加の場所情報を取得するための新しいAPIです。

00:28:11.000 --> 00:28:19.000
リクエストを発行しましょう。

00:28:19.000 --> 00:28:27.000
フェッチ操作が成功したら、マップアイテムにアニメーション化します。

00:28:27.000 --> 00:28:34.000
カメラのアニメーションが完了したら、フィーチャーアイテムから詳細を取得し、情報カードに表示します。

00:28:34.000 --> 00:28:41.000
それをコンパイルして、それがどのように見えるかを見てください。

00:28:41.000 --> 00:28:47.000
ウォーターフロントの面白い場所をチェックしてみましょう。

00:28:47.000 --> 00:28:49.000
グラデーションアノテーションが表示されます。

00:28:49.000 --> 00:28:51.000
カメラはタブの場所にアニメーション化されます。

00:28:51.000 --> 00:28:54.000
その後、情報カードが表示されます。

00:28:54.000 --> 00:28:55.000
これは博物館です。

00:28:55.000 --> 00:28:57.000
これがURLです。

00:28:57.000 --> 00:28:59.000
興味があればチェックできます。

00:28:59.000 --> 00:29:03.000
そして、私たちは完全な住所を取得します。

00:29:03.000 --> 00:29:14.000
それがランドマークであれば、私たちはこの美しい図像を得るでしょう。

00:29:14.000 --> 00:29:22.000
では、コードに戻り、選択状態の注釈をカスタマイズしましょう。

00:29:22.000 --> 00:29:26.000
nilの代わりに、MarkerAnnotationViewを作成しましょう。

00:29:26.000 --> 00:29:34.000
最初にアノテーションをfeatureAnnotationにキャストするので、そこから特定のデータを使用してビューをカスタマイズできます。

00:29:34.000 --> 00:29:42.000
私たちのコーポレートアイデンティティに沿って、注釈を紫っぽい色で染めましょう。

00:29:42.000 --> 00:29:47.000
注釈グリフをカスタマイズすることもできます。

00:29:47.000 --> 00:29:52.000
SelectedGlyphImageは、選択された状態の注釈用です。

00:29:52.000 --> 00:29:54.000
GlyphImageはより小さいです。

00:29:54.000 --> 00:29:59.000
これは、未選択状態の注釈のグリフです。

00:29:59.000 --> 00:30:08.000
未選択状態から選択状態へのスムーズな移行のために、同じグリフを割り当てることをお勧めします。

00:30:08.000 --> 00:30:13.000
featureAnnotationから得たアイコンスタイルの画像を使おう。

00:30:13.000 --> 00:30:17.000
MKIconStyleはiOS16の新しいクラスです。

00:30:17.000 --> 00:30:22.000
選択したPOIの図像と色情報があります。

00:30:22.000 --> 00:30:29.000
コンパイルして、アプリでどのように見えるかを確認してください。

00:30:29.000 --> 00:30:30.000
どうぞ！

00:30:30.000 --> 00:30:40.000
今、私たちは会社の色に一致する注釈を持っていますが、それでもAppleの図像を使用しています。

00:30:40.000 --> 00:30:46.000
それが、選択可能なマップ機能を有効にし、独自のアプリで注釈をカスタマイズする方法です!

00:30:46.000 --> 00:30:49.000
それで、私はそれをエリックに返します。

00:30:49.000 --> 00:30:50.000
エリック:ありがとう、Yingxiu!

00:30:50.000 --> 00:30:57.000
先ほど見たように、Selectable Map Features APIを使用すると、ユーザーはまったく新しい方法で地図と対話できます。

00:30:57.000 --> 00:31:14.000
MapFeatureAnnotationクラスは、MapViewデリゲートコールバックと組み合わせて、選択のルックアンドフィールをカスタマイズできますが、MapItemRequestを使用すると、マップアイテムに機能を解決できるため、選択したマップ機能に関する追加情報にアクセスできます。

00:31:14.000 --> 00:31:18.000
次に、周りを見回すことについて話しましょう!

00:31:18.000 --> 00:31:24.000
マップアプリはiOS 13でLook Aroundを導入し、人々はそれを絶対に愛しています。

00:31:24.000 --> 00:31:27.000
Look Aroundを使用して、場所の本当の感覚を得ることができます。

00:31:27.000 --> 00:31:37.000
Look Around画像は、信じられないほどのレベルのディテールを提供し、3Dモデルを活用して、他の地図にはないレベルのリアリズムを提供します。

00:31:37.000 --> 00:31:44.000
Look Aroundは、これらの都市や国全体を含む世界中の多くの場所で利用可能です!

00:31:44.000 --> 00:31:54.000
新しい地域のサポートを継続的に追加しているので、セッションノートにリンクされている機能可用性WebサイトのLook Aroundセクションをチェックすることをお勧めします。

00:31:54.000 --> 00:32:03.000
iOS 16では、Look AroundをMapKitに導入し、それを採用するには3つの簡単なステップしかかかりません。

00:32:03.000 --> 00:32:08.000
まず、目的の場所でデータが利用可能かどうかを確認する必要があります。

00:32:08.000 --> 00:32:18.000
Look Aroundがターゲット地域で利用可能であっても、すべての場所が通りから見えるわけではないため、Look Around画像が常に利用できるとは限りません。

00:32:18.000 --> 00:32:27.000
Look Aroundデータが利用可能かどうかを決定したら、そのデータをLook Around View ControllerまたはLook Around Snapshotterに渡す必要があります。

00:32:27.000 --> 00:32:35.000
そして最後に、Look Aroundデータが利用可能な場合は、Look Aroundプレビューを表示するようにアプリのUIを更新する必要があります。

00:32:35.000 --> 00:32:41.000
これら3つの簡単なタスクを達成するために使用する新しいAPIを見てみましょう。

00:32:41.000 --> 00:32:46.000
Look Aroundプレビューを表示しようとする最初のステップは、データの可用性を確認することです。

00:32:46.000 --> 00:32:54.000
このためには、iOS 16で導入する新しいクラスであるLookAroundSceneRequestを作成する必要があります。

00:32:54.000 --> 00:33:00.000
座標またはマップ項目のいずれかを使用して、新しいインスタンスを初期化できます。

00:33:00.000 --> 00:33:04.000
次に、そのシーンプロパティを取得する必要があります。

00:33:04.000 --> 00:33:07.000
これはオプションの非同期プロパティです。

00:33:07.000 --> 00:33:11.000
データが利用可能な場合は、シーンインスタンスが戻ってきます。

00:33:11.000 --> 00:33:15.000
データが利用できない場合は、代わりにnilが返されます。

00:33:15.000 --> 00:33:20.000
また、リクエストに問題が発生した場合は、エラーがスローされます。

00:33:20.000 --> 00:33:23.000
Look Around Sceneは、プロパティのない不透明なオブジェクトです。

00:33:23.000 --> 00:33:30.000
これは、要求された場所のLook Around画像の可用性を保証するトークンとして機能します。

00:33:30.000 --> 00:33:46.000
Look Aroundシーンのインタラクティブなプレビューを表示するには、シーンを新しいLook Around View Controllerインスタンスにinitパラメータとして渡すか、既存のインスタンスの読み取り書き込みシーンプロパティに割り当てるだけです。

00:33:46.000 --> 00:34:00.000
または、静的画像だけが必要な場合は、シーンをinitパラメータとして新しいLook Around View Snapshotterインスタンスに渡し、その後スナップショット非同期プロパティを取得することもできます。

00:34:00.000 --> 00:34:13.000
Look Aroundビューコントローラーは、Look Around画像の小さな静的プレビューをできるだけ簡単に埋め込むように設計されています。ユーザーはタップしてフルスクリーンのLook Aroundインタラクティブセッションに入ることができます。

00:34:13.000 --> 00:34:20.000
そして今、私たちはそれをもう一度Yingxiuに引き渡して、彼女がそれをすべてまとめるのがいかに簡単かを私たちに示すことができます。

00:34:20.000 --> 00:34:22.000
Yingxiu:ありがとう、エリック。

00:34:22.000 --> 00:34:27.000
エリックは、MapKitにやってくる没入型のLook Around体験サポートを見せてくれました。

00:34:27.000 --> 00:34:32.000
サンプルアプリに統合するのがいかに簡単かをお見せします。

00:34:32.000 --> 00:34:36.000
そのために、最後の機能であるハイライトに進みます。

00:34:36.000 --> 00:34:44.000
ユーザーは必見の場所の現実的なビューを得ることができます。

00:34:44.000 --> 00:34:50.000
画面上部のセグメントコントロールバーには、すでにサンフランシスコのランドマーク名がいくつかあります。

00:34:50.000 --> 00:34:57.000
ユーザーがそのうちの1つをタップすると、タップされた場所にカメラアニメーションを実行したいと考えています。

00:34:57.000 --> 00:35:04.000
また、左下にLook aroundプレビューを表示し、ユーザーはフルスクリーンに展開できます。

00:35:04.000 --> 00:35:06.000
やりましょう！

00:35:06.000 --> 00:35:22.000
まず、Look Aroundプレビューのコンテナビューを追加する必要があります。

00:35:22.000 --> 00:35:27.000
サイズ検査官に行きましょう。

00:35:27.000 --> 00:35:37.000
位置とサイズを与えましょう。

00:35:37.000 --> 00:35:48.000
最初にこのプレビューを非表示にしたいので、属性インスペクタを開いて非表示をチェックしましょう。

00:35:48.000 --> 00:36:00.000
次に、Look Aroundビューコントローラーを作成する必要があります...

00:36:00.000 --> 00:36:09.000
そして、それをコンテナビューに埋め込みます。

00:36:09.000 --> 00:36:15.000
他のセグエと同じように、識別子を与える必要があります。

00:36:15.000 --> 00:36:27.000
それを「presentLookAroundEmbedded」と呼びましょう。

00:36:27.000 --> 00:36:44.000
そして、後で可視性を更新できるように、それをコードにインポートします。

00:36:44.000 --> 00:36:53.000
「プレビュー」と名付けましょう。

00:36:53.000 --> 00:36:56.000
ここでは、すでにLookAroundViewControllerが宣言されています。

00:36:56.000 --> 00:37:04.000
Prepare関数でインスタンスを取得するだけです。

00:37:04.000 --> 00:37:12.000
セグエ識別子が一致していることを確認してください。

00:37:12.000 --> 00:37:24.000
次に、セグメント制御機能で、ランドマーク名でローカル検索を作成します。

00:37:24.000 --> 00:37:35.000
リクエストが成功すると、次のカメラアニメーションとLook Aroundシーン検索で使用されるマップアイテムを取得します。

00:37:35.000 --> 00:37:44.000
カメラアニメーションの場合、まず新しいAPIでカメラを作成する必要があります。

00:37:44.000 --> 00:37:47.000
マップアイテムを見ているマップカメラ。

00:37:47.000 --> 00:37:56.000
ビューサイズにマップビューのフレームサイズを使用し、許可ピッチをtrueに設定しましょう。

00:37:56.000 --> 00:38:02.000
これにより、ランドマークへのピッチビューと他の場所へのトップダウンビューが得られます。

00:38:02.000 --> 00:38:07.000
新しいカメラを割り当てます。それでおそれ。

00:38:07.000 --> 00:38:15.000
カメラのアニメーションが完成したら、Look Aroundのプレビューを表示します。

00:38:15.000 --> 00:38:20.000
まず、Look Aroundデータがこのマップ項目で利用可能かどうかを判断する必要があります。

00:38:20.000 --> 00:38:25.000
これを行うには、新しいLookAroundSceneRequestクラスを使用する必要があります。

00:38:25.000 --> 00:38:29.000
リクエストを作成して、マップアイテムを渡しましょう。

00:38:29.000 --> 00:38:36.000
次に、リクエストを実行します。

00:38:36.000 --> 00:38:43.000
シーンリクエストが成功したら、シーンをLookAroundViewControllerに割り当てるだけです。

00:38:43.000 --> 00:38:53.000
エラーがないが、シーンのnilを取得する場合は、Look Aroundデータがリクエストされた場所で利用できないことを意味します。

00:38:53.000 --> 00:38:57.000
最後に、プレビューを表示することを忘れないでください。

00:38:57.000 --> 00:39:04.000
アプリでどのように見えるか見てみましょう!

00:39:04.000 --> 00:39:08.000
フェリービルディングで試してみましょう。

00:39:08.000 --> 00:39:09.000
ほら。

00:39:09.000 --> 00:39:18.000
フェリービルディングはランドマークなので、この素晴らしいキュレーションされたカメラがヒーローアングルにフレーミングされ、Look Aroundプレビューが表示されます。

00:39:18.000 --> 00:39:23.000
別の場所、ドラゴンゲートで試してみましょう。

00:39:23.000 --> 00:39:29.000
ドラゴンゲートはランドマークではないので、トップダウンビューが表示されます。

00:39:29.000 --> 00:39:34.000
プレビューをタップしてフルスクリーンに入りましょう。

00:39:34.000 --> 00:39:42.000
インタラクティブなビューなので、ナビゲートできます。

00:39:42.000 --> 00:39:51.000
私はまた、ルックアラウンドフルスクリーンビューで店舗のためのこれらの美しいアイコンとラベルを取得します。

00:39:51.000 --> 00:39:56.000
あなた自身のアプリで没入型のLook Around体験を追加するのはとても簡単です。

00:39:56.000 --> 00:39:58.000
それで、私はそれをエリックに返します。

00:39:58.000 --> 00:40:00.000
エリック:ありがとう、Yingxiu!

00:40:00.000 --> 00:40:03.000
Look AroundのInterface Builderのサポートは、それをとても簡単に見せます!

00:40:03.000 --> 00:40:19.000
そのため、今日、まったく新しいマップと新しいマップ構成APIの自動採用、オーバーレイの新しい動作と進歩から、選択可能なマップ機能やLook Aroundサポートなどのまったく新しい機能まで、多くのトピックを取り上げました。

00:40:19.000 --> 00:40:28.000
アプリの地図体験を次のレベルに引き上げるために使用できる多くのことに同意すると思いますし、あなたがそれで何を成し遂げるかを見るのが待ちきれません。

00:40:28.000 --> 00:40:32.000
私が行く前に、あなたに残したいことがいくつかあります。

00:40:32.000 --> 00:40:46.000
いつものように、あなたのフィードバックは、私たちが次に焦点を当てることに優先順位を付けるのに役立ちますので、フィードバックアシスタントを使用して、バグレポートとアプリに最も役立つ機能を送信してください。

00:40:46.000 --> 00:40:52.000
さらに、先ほど説明したことを組み込むために、既存のサンプルの多くを更新しました。

00:40:52.000 --> 00:40:55.000
私たちはあなたがそれらをチェックアウトすることをお勧めします。

00:40:55.000 --> 00:41:00.000
そして最後に、あなたが見てみたいと思う新しいREST APIのセットを発表しました。

00:41:00.000 --> 00:41:10.000
これらのAPIは、ジオコーディング、ETA決定などの一般的な呼び出しをサーバーに移動したい人にとって本当に役立つと思います。

00:41:10.000 --> 00:41:17.000
詳細については、「Meet Apple Maps Server APIs」というタイトルのセッションを必ずチェックしてください。

00:41:17.000 --> 00:41:20.000
マップチームを代表して、見てくれてありがとう...

00:41:20.000 --> 00:41:22.000
両方:そして、素晴らしいWWDCを!

00:41:22.000 --> 23:59:59.000
。

