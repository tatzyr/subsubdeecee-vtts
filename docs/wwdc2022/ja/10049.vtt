WEBVTT

00:00:00.000 --> 00:00:05.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:16.000
こんにちは、「WKWebViewの新機能」へようこそ。WebKitチームのエンジニア、アレックス・クリステンセンです。

00:00:16.000 --> 00:00:23.000
私たちは忙しく、今年はアプリで使用できる新しいウェブ技術をたくさん追加しました。 

00:00:23.000 --> 00:00:29.000
しかし、始める前に、アプリケーションに適した技術を使用していることを確認しましょう。

00:00:29.000 --> 00:00:40.000
アプリ内でブラウザのような体験をしたいし、深いカスタマイズを必要としない場合は、間違いなくSFSafariViewControllerを使用したいと思うでしょう。

00:00:40.000 --> 00:00:51.000
アプリがまだ非推奨のUIWebViewを使用している場合は、今がより速く、より応答性の高いWKWebViewに移行する時です。

00:00:51.000 --> 00:00:56.000
UIWebViewは今後のリリースで削除されます。

00:00:56.000 --> 00:01:02.000
WKWebViewは、ウェブコンテンツと対話するアプリケーションを書くために使用するAPIです。

00:01:02.000 --> 00:01:09.000
CSSベースのUIに使用したり、JavaScriptでアプリの一部を書いたりできます。

00:01:09.000 --> 00:01:14.000
アプリにバインドされたドメインを使用して、独自のウェブコンテンツとやり取りしている可能性があります。

00:01:14.000 --> 00:01:17.000
また、独自のブラウザを開発しているかもしれません。

00:01:17.000 --> 00:01:25.000
アプリケーションが何であれ、よりリッチなWebアプリケーションを作成できるように、常に新しい機能を追加しています。

00:01:25.000 --> 00:01:41.000
今年WKWebViewで利用可能な新機能には、Webコンテンツと対話する新しい方法、コンテンツブロッカーの新機能、暗号化されたメディア、リモートWebインスペクタの使用の4つのカテゴリがあります。

00:01:41.000 --> 00:01:47.000
まず、ウェブコンテンツと対話するための新しいAPIを取り上げます。

00:01:47.000 --> 00:02:01.000
iOS 16では、アプリがウェブコンテンツと対話できる3つの新しい方法があります。フルスクリーンAPIの使用、新しいCSSビューポートユニットの使用、検索インタラクションの使用です。

00:02:01.000 --> 00:02:03.000
フルスクリーンから始めましょう。

00:02:03.000 --> 00:02:15.000
長年にわたり、JavaScriptはビデオやキャンバスゲームなどのHTML要素をブラウザでフルスクリーンにすることができ、今ではアプリでもそれを行うことができます。

00:02:15.000 --> 00:02:19.000
簡単な例が電話でどのように見えるかは次のとおりです。

00:02:19.000 --> 00:02:26.000
JavaScriptはフルスクリーンで要求でき、ユーザーまたはJavaScriptはフルスクリーンを終了できます。

00:02:26.000 --> 00:02:39.000
アプリで必要なのは、WKPreferences .isElementFullscreenEnabledをtrueに設定し、webkitRequestFullscreenなどのフルスクリーンAPIを使用するWebコンテンツをロードするだけです。

00:02:39.000 --> 00:02:55.000
箱から出してすぐに機能しますが、アプリのトランジションをカスタマイズしたい場合は、WKWebView.fullscreenStateの値を観察できます。これは、Webコンテンツがフルスクリーンになったり、戻ってきたりしたときにアプリに知らせます。

00:02:55.000 --> 00:03:01.000
そして、アプリでWebKitのフルスクリーンAPIを使用するのはそれだけです。

00:03:01.000 --> 00:03:08.000
また、動的ビューポートサイズに従ってWebコンテンツをレイアウトできるようにするための新しいCSSユニットもあります。

00:03:08.000 --> 00:03:14.000
これらの新しいCSSユニットには、svh、lvh、dvhなどが含まれます。

00:03:14.000 --> 00:03:22.000
これにより、Web開発者は、最小、最大、および動的なビューポートサイズに基づいてレイアウトを変更できます。

00:03:22.000 --> 00:03:28.000
これがあなたのアプリでどのように使用できるかを知るために、Safariが何をするかを見てみましょう。

00:03:28.000 --> 00:03:35.000
Safariで最初にページを開くと、下部にウェブページのホストといくつかのボタンが表示されます。

00:03:35.000 --> 00:03:41.000
スクロールすると、ボタンが邪魔にならないようにスライドすると、ビューポートのサイズが大きくなります。

00:03:41.000 --> 00:03:49.000
Svh、lvh、およびdvhは、ビューポートのこれらの異なるサイズを測定するための有用な単位を提供します。

00:03:49.000 --> 00:03:59.000
アプリがWKWebViewのビューポートを変更する場合は、ビューポートのサイズ範囲を事前にWebKitに通知する必要があります。

00:03:59.000 --> 00:04:10.000
Swiftでは、1つの関数呼び出しは、このWebコンテンツがアプリで正しくレイアウトできるように、最大と最小のエッジインセットをWebKitに通知します。

00:04:10.000 --> 00:04:17.000
また、iOS 16のWKWebViewでの検索インタラクションのサポートも導入しています。

00:04:17.000 --> 00:04:24.000
多くのWKWebViewアプリケーションは大量のテキストをロードし、ユーザーはこのテキストを検索したいと考えています。

00:04:24.000 --> 00:04:38.000
WKWebView .findInteractionEnabledをtrueに設定すると、ユーザーは使い慣れたUIとCommand-Fなどのショートカットを使用して、開いているページのテキストを検索できます。

00:04:38.000 --> 00:04:55.000
この機能を有効にするために必要なのは、その1行のコードだけですが、WKWebView .findInteractionを介してUIFindInteractionオブジェクトにアクセスして、検索パネルを表示および終了したり、プログラムで次または前の結果に移動したりすることもできます。

00:04:55.000 --> 00:04:59.000
試してみて、アプリで何ができるか見てみましょう。

00:04:59.000 --> 00:05:08.000
コンテンツブロックについては、Safariでコンテンツブロッカーを実装するために使用されるAPIであるWKContentRuleListに新しい機能を追加しました。

00:05:08.000 --> 00:05:14.000
ここでは、ウィキペディアがサンプルサイトのiframeに埋め込まれています。

00:05:14.000 --> 00:05:24.000
以前は、要求されるURLとトップフレームURLで正規表現を実行して、ロードをブロックするか、他のアクションを実行するかを決定できました。

00:05:24.000 --> 00:05:33.000
しかし、時々、あなたが本当に望んでいたのは、特定のルールが特定のiframe内の負荷にのみ適用されることでした。

00:05:33.000 --> 00:05:39.000
これで、現在のフレームのURLで正規表現を実行できます。

00:05:39.000 --> 00:05:47.000
ウィキペディアを含むフレームからのみ、画像をブロックするルールを書くつもりです。

00:05:47.000 --> 00:05:52.000
これを行うには、このようにJSONにif-frame-urlを追加します。

00:05:52.000 --> 00:05:58.000
次に、以前と同じようにJSONをコンパイルし、WKWebViewConfigurationに適用します。

00:05:58.000 --> 00:06:06.000
その後、正規表現は、要求を行うフレームのURLで実行されます。

00:06:06.000 --> 00:06:14.000
このブロッキングルールは、if-frame-url正規表現に一致するフレームからのリクエストにのみ適用されます。

00:06:14.000 --> 00:06:20.000
ここでは、ウィキペディアのiframe内の画像の読み込みをブロックしていることがわかります。

00:06:20.000 --> 00:06:33.000
コンテンツブロッカーの実装を真剣に考えているなら、宣言的なNetRequestにいくつかの新しい可能性を含むSafari拡張機能に関するWWDCセッションをチェックしてください。

00:06:33.000 --> 00:06:38.000
iPadOS 16のWKWebViewのもう1つの新機能は、暗号化されたメディアです。

00:06:38.000 --> 00:06:49.000
暗号化されたメディア拡張機能とメディアソース拡張APIを使用するコンテンツがある場合は、iPadOSのアプリで使用できます。

00:06:49.000 --> 00:06:57.000
これは、AppleTV+のようなプレミアムコンテンツがある場合、macOSと同様にiPadOSで動作することを意味します。

00:06:57.000 --> 00:07:11.000
アプリにウェブブラウザの資格がある場合、リモートウェブインスペクタはiOSのSafariと同じように本番アプリで動作します。コードを追加したり変更したりする必要はありません。

00:07:11.000 --> 00:07:17.000
サードパーティのブラウザでWebインスペクタを有効にするには、Safariと同じプロセスです。

00:07:17.000 --> 00:07:29.000
まず、iOSデバイスのSafari設定でWebインスペクタをオンにしてから、MacのSafariの[詳細設定]で[開発]メニューを有効にする必要があります。

00:07:29.000 --> 00:07:36.000
携帯電話をMacに接続し、macOSのSafariの開発メニューでデバイスを探します。

00:07:36.000 --> 00:07:40.000
Webインスペクタには、Webコンテンツをデバッグするための多くのツールがあります。

00:07:40.000 --> 00:07:48.000
DOMを探索したり、JavaScriptの実行を実行およびデバッグしたり、ページ読み込みのタイムラインを表示したりできます。

00:07:48.000 --> 00:07:57.000
ウェブサイトがある場合は、リモートWebインスペクタを使用して、iOSのサードパーティブラウザで自分で検査してデバッグできます。

00:07:57.000 --> 00:08:02.000
これらは、今年のWKWebViewへの主な新しいAPIの追加です。

00:08:02.000 --> 00:08:06.000
それらを試してみて、彼らがあなたのアプリで何ができるかを見てください。

00:08:06.000 --> 00:08:17.000
アプリケーションに最適なAPIを使用することを忘れないでください。WKWebViewでできないことがある場合は、フィードバックアシスタントを使用して機能リクエストを提出してください。

00:08:17.000 --> 00:08:23.000
私たちは、私たちが得る機能要求を読み、あなたの入力に基づいて開発に優先順位を付けます。

00:08:23.000 --> 00:08:34.000
「Safari Web拡張機能の新機能」をチェックすることを忘れないでください。また、Webプラットフォームへの追加については、「SafariとWebKitの新機能」をチェックすることを忘れないでください。

00:08:34.000 --> 00:08:37.000
見てくれてありがとう、そしてWWDCの残りの部分を楽しんでください。

00:08:37.000 --> 23:59:59.000
♪ ♪

