WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:13.000
こんにちは！私はジャスティンで、写真チームのエンジニアです。

00:00:13.000 -> 00:00:18.000
今日は、システムフォトピッカーに対して行った改善点についてお話ししたいと思います。

00:00:18.000 -> 00:00:24.000
システムフォトピッカーは、ほとんどのアプリがiOSで写真やビデオにアクセスするための最良の方法です。

00:00:24.000 -> 00:00:29.000
ピッカーはプロセスを使い果たしたので、アプリはそれを使用するためにライブラリへのアクセスを要求する必要はありません。

00:00:29.000 -> 00:00:33.000
直感的なUIと使いやすいAPIを備えています。

00:00:33.000 -> 00:00:43.000
PHPicker APIに精通していない場合は、前年のWWDCセッションで詳しく説明しました。

00:00:43.000 -> 00:00:50.000
今日のセッションでは、ピッカーに追加した新機能の概要から始めます。

00:00:50.000 -> 00:00:56.000
次に、ピッカーが現在サポートしている追加のプラットフォームとフレームワークについて説明します。

00:00:56.000 -> 00:00:59.000
よし、飛び込もう。

00:00:59.000 -> 00:01:06.000
ピッカーは、導入以来、画像、ビデオ、Live Photos間のフィルタリングをサポートしています。

00:01:06.000 -> 00:01:11.000
ただし、一部のアプリにはその他の要件がある可能性があることを理解しています。

00:01:11.000 -> 00:01:17.000
たとえば、スクリーンショットステッチアプリは、ピッカーにスクリーンショットのみを表示したいと考えています。

00:01:17.000 -> 00:01:23.000
今年追加した新しいスクリーンショットフィルターで可能になりました。

00:01:23.000 -> 00:01:31.000
スクリーンショットに加えて、画面録画やスローモーションビデオなどの他のアセットタイプを追加しました。

00:01:31.000 -> 00:01:38.000
PHAsset.PlaybackStyleを使用して新しいフィルターを作成する方法もあります。

00:01:38.000 -> 00:01:45.000
シネマティックビデオ、デプスエフェクト写真、バースト以外は、すべての新しいフィルターがバックポートされます。

00:01:45.000 -> 00:01:53.000
アプリがiOS 15をターゲットにしている場合、iOS 16 SDKでコンパイルしている限り、引き続き使用できます。

00:01:53.000 -> 00:02:00.000
複合フィルターの場合、既存の「any」に加えて、「all」と「not」も使用します。

00:02:00.000 -> 00:02:04.000
彼らはまた、iOS 15にバックポートされています。

00:02:04.000 -> 00:02:06.000
いくつかのコード例を見てみましょう。

00:02:06.000 -> 00:02:12.000
ビデオやLive Photosを表示するには、それらを「any」と組み合わせることができます。

00:02:12.000 -> 00:02:17.000
または、スクリーンショットのみを表示したい場合があります。

00:02:17.000 -> 00:02:25.000
スクリーンショットなしですべての画像を表示するには、「すべて」と「しない」を使用して画像とスクリーンショットのフィルターを組み合わせることができます。

00:02:25.000 -> 00:02:32.000
そして最後の例では、iOS 16をターゲットにしている場合は、.cinematicVideosフィルターを使用できます。

00:02:32.000 -> 00:02:37.000
次に、ハーフハイトピッカーに関連する改善について話しましょう。

00:02:37.000 -> 00:02:47.000
iOS 15では、UIKitには、ピッカーをハーフハイトモードで表示するために使用できる新しいUISheetPresentationController APIがあります。

00:02:47.000 -> 00:02:50.000
それはすでに多くの場合でうまく機能します。

00:02:50.000 -> 00:03:00.000
しかし、選択したアセットを調整し、それらの変更をピッカーに反映させるためにカスタムUIを実装したい人もいるかもしれません。

00:03:00.000 -> 00:03:07.000
iOS 16では、アセット識別子を使用してアセットの選択を解除できます。

00:03:07.000 -> 00:03:16.000
ここに示すように、deselectAssetsが呼び出された後、2枚目の写真はピッカーで選択されなくなりました。

00:03:16.000 -> 00:03:21.000
また、moveAssetメソッドを呼び出してアセットを並べ替えることもできます。

00:03:21.000 -> 00:03:27.000
今、私たちはすべての新しいピッカー機能に精通しています。プラットフォームのサポートについて話しましょう。

00:03:27.000 -> 00:03:33.000
現在、システムフォトピッカーはiOSとiPadOSのアプリでのみ使用できます。

00:03:33.000 -> 00:03:41.000
今年は、macOSとwatchOSの2つの追加プラットフォームにフォトピッカーを導入します。

00:03:41.000 -> 00:03:46.000
iPadOSピッカーも、iPad用の新しいデザインで更新されています。

00:03:46.000 -> 00:03:49.000
まず、新しいiPadのUIを見てみましょう。

00:03:49.000 -> 00:03:55.000
ピッカーは、より大きなiPadディスプレイを利用するためのサイドバーを表示するようになりました。

00:03:55.000 -> 00:03:59.000
サイドバーでは、異なるコレクション間のナビゲーションを高速化できます。

00:03:59.000 -> 00:04:08.000
しかし、分割画面モードのように十分なスペースがない場合は、既存のコンパクトピッカーUIにフォールバックします。

00:04:08.000 -> 00:04:11.000
次に、macOS。

00:04:11.000 -> 00:04:16.000
macOSピッカーには、Macスタイルのコントロールを備えたサイドバーもあります。

00:04:16.000 -> 00:04:30.000
また、iOSピッカーと同様に、複数選択、グリッドの流動的なズームをサポートし、人や場所などを検索できる強力な検索機能を備えています。

00:04:30.000 -> 00:04:34.000
新しいピッカーUIはNSOpenPanelでも利用可能です。

00:04:34.000 -> 00:04:43.000
それを使用して、システムフォトライブラリからアセットを選択し、iCloud写真に保存されているアセットも含めて初めて選択できます。

00:04:43.000 -> 00:04:49.000
あなたのアプリは、採用作業をしなくても、新しいUIを無料で入手できます。

00:04:49.000 -> 00:04:54.000
NSOpenPanelピッカーではドラッグアンドドロップがサポートされています。

00:04:54.000 -> 00:05:00.000
iOS、iPadOS、macOSの標準ピッカーでもサポートされています。

00:05:00.000 -> 00:05:08.000
アプリがいくつかの画像やビデオだけを選択する必要がある場合は、NSOpenPanel APIが必要なものすべてです。

00:05:08.000 -> 00:05:15.000
ただし、フォトライブラリ内の選択したファイルは、いつでもシステムによって削除される可能性があることを覚えておいてください。

00:05:15.000 -> 00:05:23.000
長期的に可用性を確保する必要がある場合は、アプリが管理する場所にコピーする必要があります。

00:05:23.000 -> 00:05:32.000
メディア中心のmacOSアプリでは、最高のユーザーエクスペリエンスのために、新しい写真ピッカーをデフォルトにすることをお勧めします。

00:05:32.000 -> 00:05:42.000
ただし、アプリは、NSOpenPanel APIを使用してファイルシステムからアセットを選択する別の方法を提供する必要があります。

00:05:42.000 -> 00:05:50.000
場合によっては、顧客はフォトライブラリの外でアセットを選択したいと思うかもしれません。

00:05:50.000 -> 00:05:55.000
最後になりましたが、watchOSについて話しましょう。

00:05:55.000 -> 00:06:01.000
初めて、新しいAPIを使用して時計に保存されている画像にアクセスできます。

00:06:01.000 -> 00:06:10.000
watchOSピッカーもiOSやmacOSピッカーのようにプロセスを使い果たしているので、それを使用するためにライブラリへのアクセスを要求する必要はありません。

00:06:10.000 -> 00:06:17.000
iOSピッカーに似たUIを持っていますが、小さな画面用に最適化されています。

00:06:17.000 -> 00:06:21.000
グリッドまたはコレクションで写真を閲覧できます。

00:06:21.000 -> 00:06:29.000
選択順序を表示するようにピッカーを設定したり、選択制限を指定したりできます。

00:06:29.000 -> 00:06:36.000
ただし、iOSやmacOSとは異なり、watchOSピッカーには画像のみが表示されます。

00:06:36.000 -> 00:06:43.000
デバイスに500枚以上の画像がある場合、最新の500枚のみが表示されます。

00:06:43.000 -> 00:06:48.000
「PHPickerViewControllerはUIKitベースです。

00:06:48.000 -> 00:06:52.000
macOSやwatchOSのアプリでどのように使用できますか?

00:06:52.000 -> 00:07:00.000
推測したように、新しいピッカーAPIがAppKitとSwiftUIで利用可能になりました。

00:07:00.000 -> 00:07:03.000
まず、AppKit APIを見てみましょう。

00:07:03.000 -> 00:07:07.000
実際、それはUIKit APIと非常によく似ています。

00:07:07.000 -> 00:07:13.000
同じPHPickerConfigurationタイプとそのプロパティにアクセスできます。

00:07:13.000 -> 00:07:23.000
わずかな違いがあります。PHPickerViewControllerは、AppKitアプリのNSViewControllerサブクラスです。

00:07:23.000 -> 00:07:31.000
AppKitベースのPHPickerの導入により、レガシーメディアライブラリブラウザから離れる時が来ました。

00:07:31.000 -> 00:07:35.000
PHPickerははるかに強力です。

00:07:35.000 -> 00:07:43.000
UIKitとAppKitの両方のアプリを同時に作業している場合は、メンテナンスも簡単です。

00:07:43.000 -> 00:07:49.000
最後に、SwiftUI APIについて話す時間です。

00:07:49.000 -> 00:07:53.000
セッションの冒頭で見たiOSピッカーを覚えていますか？

00:07:53.000 -> 00:07:58.000
ほんの数行のSwiftUIコードで表示できます。

00:07:58.000 -> 00:08:10.000
さらに重要なのは、iOS、iPadOS、macOS、watchOSなど、ピッカーがサポートするすべてのプラットフォームでSwiftUI PhotosPicker APIにアクセスできることです。

00:08:10.000 -> 00:08:20.000
ピッカーは、プラットフォーム、アプリの構成、および利用可能な画面スペースに応じて、最適なレイアウトを自動的に選択します。

00:08:20.000 -> 00:08:29.000
ピッカーUIがどうあるべきかを心配する必要がないので、アプリをより良くすることに集中できます。

00:08:29.000 -> 00:08:38.000
デモで新しいAPIを詳しく見る前に、まず選択した写真やビデオを読み込む方法について話し合う必要があります。

00:08:38.000 -> 00:08:45.000
SwiftUIバインディングを通じて受け取る選択には、プレースホルダオブジェクトのみが含まれています。

00:08:45.000 -> 00:08:50.000
実際の資産データをオンデマンドで読み込む必要があります。

00:08:50.000 -> 00:08:54.000
一部の資産データはすぐに読み込まれないことを覚えておいてください。

00:08:54.000 -> 00:09:08.000
ピッカーがiCloud写真からデータをダウンロードしようとしたが、デバイスがインターネットに接続されていない場合など、エラーが発生した場合、ロード操作も失敗する可能性があります。

00:09:08.000 -> 00:09:21.000
ビデオなどの大きなファイルの中には、ダウンロードに時間がかかるものもあるため、ブロッキングローディングインジケーターではなく、アイテムごとのインラインローディングUIを表示することをお勧めします。

00:09:21.000 -> 00:09:29.000
PhotosPickerは、アプリと拡張機能間でデータを転送するための新しいSwiftUIプロトコルであるTransferableを使用しています。

00:09:29.000 -> 00:09:44.000
Transferable経由でSwiftUI Imageを直接読み込むことができますが、高度なユースケースでは、転送可能なプロトコルに準拠した独自のモデルオブジェクトを定義して、ロードするデータの種類を完全に制御する必要があります。

00:09:44.000 -> 00:09:50.000
Transferableの詳細については、「Meet Transferable」セッションをご覧ください。

00:09:50.000 -> 00:10:03.000
アプリが同時に多くのアイテム、またはビデオなどの大きなアセットを処理する必要がある場合、すべてをメモリに同時に読み込むことは不可能かもしれません。

00:10:03.000 -> 00:10:11.000
メモリ使用量を減らすために、FileTransferRepresentationを使用して、選択したアセットをファイルとして読み込むことができます。

00:10:11.000 -> 00:10:19.000
アセットをファイルとしてロードするときは、アプリがライフサイクルを管理する責任があることを覚えておいてください。

00:10:19.000 -> 00:10:27.000
ファイルは、受信時に常にアプリディレクトリにコピーし、不要になったときに削除する必要があります。

00:10:27.000 -> 00:10:30.000
はい、デモの時間です！

00:10:30.000 -> 00:10:34.000
私はすでにアカウントのプロフィールページを表示するこのデモアプリを設定しました。

00:10:34.000 -> 00:10:39.000
現在、プロフィール画像は単なるプレースホルダアイコンです。

00:10:39.000 -> 00:10:45.000
PhotosPicker APIを使用してプロフィール画像を変更するための編集ボタンを追加したい。

00:10:45.000 -> 00:10:56.000
プロファイル画像ビューは、ビューモデルで定義された画像状態にすでに応答できるため、ピッカーの選択を受信したときに画像状態を更新するだけです。

00:10:56.000 -> 00:11:01.000
まず、ビューモデルに移動し、新しいimageSelectionプロパティを追加しましょう。

00:11:01.000 -> 00:11:07.000
選択バインディングとしてPhotosPicker APIに渡されます。

00:11:07.000 -> 00:11:19.000
これで、プロフィール画像ビューに戻り、ピッカーを表示するオーバーレイボタンを追加できます。

00:11:19.000 -> 00:11:24.000
さて、少し立ち止まって、今追加したコードを見てみましょう。

00:11:24.000 -> 00:11:33.000
定義したばかりの選択バインディングを指定して、PhotosPickerビューを追加し、画像のみを表示するように設定しました。

00:11:33.000 -> 00:11:39.000
PhotosPickerのラベルは、円の背景を持つ単なる鉛筆グリフです。

00:11:39.000 -> 00:11:42.000
私たちは、これまでに持っているものを見るために構築し、実行することができます。

00:11:42.000 -> 00:11:46.000
編集ボタンをタップしてピッカーを表示できます。

00:11:46.000 -> 00:11:52.000
画像をタップするとピッカーが自動的に閉じますが、プロフィール画像は更新されません。

00:11:52.000 -> 00:11:53.000
どうして？

00:11:53.000 -> 00:11:57.000
画像の選択と画像の状態を接続する必要があります。

00:11:57.000 -> 00:11:59.000
では、そうしましょう。

00:11:59.000 -> 00:12:04.000
ビューモデルに戻り、設定された画像選択に応答できます。

00:12:04.000 -> 00:12:08.000
画像選択がnilの場合、画像の状態を空に設定します。

00:12:08.000 -> 00:12:12.000
それ以外の場合は、画像の読み込みを開始します。

00:12:12.000 -> 00:12:17.000
まだloadTransferableメソッドを実装していないため、コンパイラエラーが発生しています。

00:12:17.000 -> 00:12:23.000
直しましょう。

00:12:23.000 -> 00:12:25.000
実装はとても簡単です。

00:12:25.000 -> 00:12:34.000
リクエストがまだ最新のものである場合は、完了ハンドラに応答し、画像の状態を更新するだけです。

00:12:34.000 -> 00:12:37.000
ビルドして実行して、実際に見てみましょう。

00:12:37.000 -> 00:12:43.000
編集ボタンをタップして画像を選択できます。

00:12:43.000 -> 00:12:46.000
すごい！期待どおりに動作します。

00:12:46.000 -> 00:12:52.000
実際、このプロジェクトはすでにmacOSでも実行するように設定されています。

00:12:52.000 -> 00:12:56.000
追加したばかりのコードはmacOSで自動的に機能しますか？

00:12:56.000 -> 00:12:59.000
構築して実行して見つけましょう。

00:12:59.000 -> 00:13:01.000
コンパイルします！

00:13:01.000 -> 00:13:07.000
ピッカーを開いて画像を選択すると、アプリに反映されます。

00:13:07.000 -> 00:13:09.000
デモはそれだけです。

00:13:09.000 -> 00:13:17.000
iOSとmacOSでデモを見たばかりですが、同じコードがwatchOSでも機能します。

00:13:17.000 -> 00:13:23.000
しかし、心に留めておくべきことがいくつかあります。

00:13:23.000 -> 00:13:28.000
watchOSピッカーは、シンプルなフローと短いインタラクション用に設計されています。

00:13:28.000 -> 00:13:31.000
画像はデバイスのサイズに基づいてスケーリングされます。

00:13:31.000 -> 00:13:36.000
通常、それらはペアリングされたiPhoneから同期されます。

00:13:36.000 -> 00:13:46.000
しかし、ファミリー設定では、自分のiPhoneを持っていない家族がApple Watchの機能と利点を楽しむことができます。

00:13:46.000 -> 00:13:55.000
デバイスがファミリー設定モードの場合、ピッカーを使用してiCloudフォトの最新の1000枚の画像を選択できます。

00:13:55.000 -> 00:13:59.000
ピッカーはインターネットからいくつかの画像をダウンロードする必要があるかもしれません。

00:13:59.000 -> 00:14:06.000
その場合、閉じる前に読み込みUIがピッカーに表示されます。

00:14:06.000 -> 00:14:15.000
あなたが行く前に、私たちはシステムフォトピッカーをほとんどのアプリが写真やビデオにアクセスするための最良の方法にすることにコミットしていると言いたいだけです。

00:14:15.000 -> 00:14:20.000
まだカスタムピッカーを使用している場合は、それに切り替えることを本当にお勧めします。

00:14:20.000 -> 00:14:23.000
ありがとう、そして素晴らしいWWDCを!

00:14:23.000 -> 23:59:59.000
♪

