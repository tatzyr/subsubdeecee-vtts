WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 -> 00:00:10.000
♪

00:00:10.000 -> 00:00:12.000
こんにちは、私の名前はジョナサンです。

00:00:12.000 -> 00:00:18.000
macOS開発者は、悪意のあるソフトウェアから顧客を保護するために、公証人サービスにソフトウェアを提出します。

00:00:18.000 -> 00:00:27.000
昨年、notarytool CLIまたはコマンドラインインターフェイスを使用して、公証のためにアプリを提出するためのより迅速で簡単な方法を導入しました。

00:00:27.000 -> 00:00:36.000
今年は、公証人サービスとのやり取りを大幅に改善し、パフォーマンスと柔軟性を擁護し続けることに興奮しています。

00:00:36.000 -> 00:00:39.000
このセッションでは、3つの主要なトピックについて話します。

00:00:39.000 -> 00:00:47.000
まず、公証のためのaltoolの使用からnotarytoolの使用への移行のための重要な期限を通過します。

00:00:47.000 -> 00:00:57.000
次に、今後のXcode 14とのXcode統合の改善について議論し、notarytoolの提出速度をXcodeにもたらします。

00:00:57.000 -> 00:01:11.000
そして最後に、公証人サービスと対話するための柔軟な新しい方法、REST APIについて話します。これにより、アップロードできる場所を拡大し、ステータスを確認し、提出をレビューすることができます。

00:01:11.000 -> 00:01:18.000
昨年、私たちは公証のためのアルトールの代替品であるnotarytoolを導入しました。

00:01:18.000 -> 00:01:25.000
この講演の後半では、XcodeがXcode 14で更新されたバックエンドに移行することについて説明します。

00:01:25.000 -> 00:01:37.000
altoolとXcode 13を介した公証のための移行パスで、これらの古い方法で公証の日没日を2023年秋に発表します。

00:01:37.000 -> 00:01:47.000
altoolからnotarytoolへの移行については、昨年のプレゼンテーション「Macアプリのより迅速で簡単な公証」を参照してください。

00:01:47.000 -> 00:01:57.000
いくつかの詳細を強調するために、notarytool CLIは、Xcode 13にバンドルされているものを含め、2023年秋の締め切りを過ぎても引き続き機能します。

00:01:57.000 -> 00:02:02.000
しかし、いつものように、最新の改善と修正を受け取るために更新することをお勧めします。

00:02:02.000 -> 00:02:09.000
Xcode 13 UIを使用して公証人サービスにアップロードすると、その期限を過ぎると機能しなくなります。

00:02:09.000 -> 00:02:17.000
Xcode 14のパフォーマンスの向上についてはご期待ください。しかし、ワークフローは変更されないことが期待できます。

00:02:17.000 -> 00:02:23.000
最後に、あらゆる形態のアルトールの公証は2023年秋に機能しなくなります。

00:02:23.000 -> 00:02:30.000
繰り返しになりますが、notarytoolへの移行の詳細については、昨年のWWDCプレゼンテーションを参照してください。

00:02:30.000 -> 00:02:34.000
次に、Xcode 14の公証の変更について触れます。

00:02:34.000 -> 00:02:44.000
昨年導入したnotarytool CLIと同じ信頼性の高いバックエンドを使用するように、Xcodeに組み込まれた公証サポートを移行しました。

00:02:44.000 -> 00:02:53.000
このため、昨年発表したのと同じ約4倍のパフォーマンス向上をXcode 14にもたらします。

00:02:53.000 -> 00:03:01.000
最良の部分は、更新に加えて、このパフォーマンスの向上を受けるためにプロジェクトの設定やワークフローを変更する必要がないことです。

00:03:01.000 -> 00:03:08.000
このプレゼンテーションの最後のトピックについては、新しいサービス、公証人向けのREST APIを発表できることを嬉しく思います。

00:03:08.000 -> 00:03:14.000
この新しいサービスにより、さらに多くの場所で公証人サービスとより柔軟にやり取りすることができます。

00:03:14.000 -> 00:03:21.000
いくつかの重要な概念を詳しく見るために、この新しいAPIは、公証人サービスへのより柔軟なインターフェースを可能にすることを目的としています。

00:03:21.000 -> 00:03:27.000
JSONベースのWebサービスとして、統合はほとんどの言語でかなりシンプルであるべきです。

00:03:27.000 -> 00:03:38.000
このAPIを使用すると、現在macOSを実行していない可能性のある場所である継続的インテグレーションサーバーなど、インターネット接続のある場所からどこからでも提出物をアップロードできます。

00:03:38.000 -> 00:03:48.000
さらに、このAPIでは、提出履歴や過去の提出の詳細の取得など、公証人サービスとの他のやり取りもサポートされています。

00:03:48.000 -> 00:03:58.000
REST APIを導入する私たちの目標は、より多くのプラットフォームからの公証のためのソフトウェアの提出をサポートし、自動化されたシステムで公証人とのより簡単なやり取りを可能にすることです。

00:03:58.000 -> 00:04:07.000
これは、Linuxベースの継続的インテグレーションなど、現在実行できない現在の提出方法、Xcode、notarytoolを補完します。

00:04:07.000 -> 00:04:13.000
たとえば、展開パイプラインが配布前に公証人に申請書を提出したいとします。

00:04:13.000 -> 00:04:18.000
この新しいAPIといくつかの基本的なスクリプトを使用すると、プロセスを簡単に自動化できます。

00:04:18.000 -> 00:04:22.000
飛び込む前に、重要なトピックの1つは認証です。

00:04:22.000 -> 00:04:30.000
他のApp Store Connect APIと同様に、JSON WebトークンまたはJWTを使用してAPIで認証できます。

00:04:30.000 -> 00:04:38.000
認証または私が表示しようとしているコードの詳細については、以下にリンクされているREST APIドキュメントをご覧ください。

00:04:38.000 -> 00:04:44.000
これらのスニペットでは、有効なJWTがトークン変数として関数に渡されていると仮定します。

00:04:44.000 -> 00:04:49.000
Pythonで公証人にファイルを提出する例を見てみましょう。

00:04:49.000 -> 00:04:53.000
この同じ基本的なフローは、他のプログラミング言語で適用できます。

00:04:53.000 -> 00:04:57.000
公証人にファイルをアップロードするには、主に2つのステップがあります。

00:04:57.000 -> 00:05:01.000
最初のステップは、ファイルをアップロードしたいことを公証人に知らせることです。

00:05:01.000 -> 00:05:07.000
これには、名前やSHA-256などのファイルに関する基本的な情報が含まれています。

00:05:07.000 -> 00:05:15.000
応答には、ファイルをアップロードするために必要な情報と、パイプラインを通じて送信を追跡するためのIDが含まれています。

00:05:15.000 -> 00:05:21.000
2番目のステップは、実際にAmazon S3経由で公証のためにファイルをアップロードします。

00:05:21.000 -> 00:05:23.000
お気に入りのS3 SDKを入手する必要があります。

00:05:23.000 -> 00:05:27.000
この例では、boto3ライブラリを使用します。

00:05:27.000 -> 00:05:34.000
ここでは、前の呼び出しで返された一時的な資格情報を使用して、クライアントを認証して作成します。

00:05:34.000 -> 00:05:40.000
次に、クライアントを使用して、最初のステップの応答で指定されたバケットとオブジェクトにファイルをアップロードします。

00:05:40.000 -> 00:05:45.000
アップロードされると、提出は公証パイプラインを通じて続行されます。

00:05:45.000 -> 00:05:50.000
このプロセスは、ほとんどの提出物で15分以内に完了するはずです。

00:05:50.000 -> 00:05:56.000
アップロード後、配布前に公証人サービスが提出物を正常に処理したことを確認する必要があります。

00:05:56.000 -> 00:05:59.000
大まかに言えば、これには2つのアプローチがあります。

00:05:59.000 -> 00:06:04.000
最初で最も簡単なのは、同じAPIを介して結果をチェックすることです。

00:06:04.000 -> 00:06:08.000
もう1つのオプションは、notarytoolで導入されたWebhookサポートです。

00:06:08.000 -> 00:06:12.000
まず、APIのアプローチを見てみましょう。

00:06:12.000 -> 00:06:29.000
公証人への提出のステータスを確認するのは非常に簡単です。アップロードプロセス中に受け取った提出IDでリクエストを行うことができます。応答の一部は提出の現在のステータスであり、公証人が処理を完了するまで「進行中」のままです。

00:06:29.000 -> 00:06:36.000
ステータスは、AcceptedやInvalidなどの提出の最終状態に移行します。

00:06:36.000 -> 00:06:43.000
提出が完了したら、APIを使用してこのアップロードの公証ログを取得できます。

00:06:43.000 -> 00:06:49.000
これらのエンドポイントの詳細については、Notary REST APIのドキュメントを参照してください。

00:06:49.000 -> 00:06:53.000
次に、あなたのステータスを取得するための2番目のアプローチ、ウェブフックについて説明します。

00:06:53.000 -> 00:07:02.000
Webhookワークフローでは、プロセスはほぼ同じですが、今回はアップロードする最初のリクエストでWebhook URLを提供します。

00:07:02.000 -> 00:07:07.000
フォーマットの詳細は、公証人REST APIのドキュメントに記載されています。

00:07:07.000 -> 00:07:12.000
以前と同様に、これはあなたの提出物を分析するために公証人サービスをトリガーします。

00:07:12.000 -> 00:07:19.000
自動分析が終了すると、チケットが作成され、最終的なステータスが保存されます。

00:07:19.000 -> 00:07:23.000
完了すると、公証人サービスは提供されたWebhook URLに呼び出します。

00:07:23.000 -> 00:07:32.000
この呼び出しの内容には、提出ID、チームID、およびそれが私たちから来たことを確認するための署名が含まれます。

00:07:32.000 -> 00:07:35.000
その通知を受け取ったら、次に何をするかを選択できます。

00:07:35.000 -> 00:07:42.000
たとえば、元の送信者に通知したり、自動配布パイプラインを開始したりできます。

00:07:42.000 -> 00:07:51.000
Notarytoolで待つことと比較して、これは公証後のアクションを自動化するシステムからファイルをアップロードするシステムを切り離すことができます。

00:07:51.000 -> 00:08:01.000
この新しいREST APIが、macOS用のソフトウェアを構築するための継続的インテグレーションシステムやその他のツールとのより多くの統合への扉を開くことに興奮しています。

00:08:01.000 -> 00:08:11.000
最後に、もう1つのリマインダーとして、Xcode 14、notarytool、またはREST APIを直接使用に移行する期限は2023年の秋です。

00:08:11.000 -> 00:08:20.000
最後に、展開パイプラインでnotarytoolをまだ使用できない場合は、今日notary REST APIを試して自動化を開始するチャンスです。

00:08:20.000 -> 00:08:23.000
以下のドキュメントへのリンクを見つけることができます。 

00:08:23.000 -> 23:59:59.000
ありがとう、そしてあなたがWWDC22の残りの部分を楽しむことを願っています♪

