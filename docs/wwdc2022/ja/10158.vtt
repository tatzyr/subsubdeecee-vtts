WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:15.000
こんにちは、こんにちは！

00:00:15.000 --> 00:00:17.000
私はポールで、SFシンボルアプリに取り組んでいます。

00:00:17.000 --> 00:00:21.000
今日は、SFシンボルの真新しい機能、可変色について話します。

00:00:21.000 --> 00:00:30.000
可変色のシンボルをプロジェクトに持ち込む方法と、SFシンボルアプリがすべてのステップでどのように役立つかについて説明します。

00:00:30.000 --> 00:00:34.000
まず、システムが提供するSFシンボルの可変色を見ていきます。

00:00:34.000 --> 00:00:37.000
それがどのように機能し、いつ使用するかについて説明します。

00:00:37.000 --> 00:00:43.000
次に、可変色を独自のカスタムシンボルに取り込む方法について説明します。

00:00:43.000 --> 00:00:55.000
始める前に、SFシンボルを初めて使用する場合、または復習したい場合は、昨年のセッション「SFシンボル3アプリを探索する」を見て、プロジェクトのシンボルを見つけて整理する方法の詳細を確認することをお勧めします。

00:00:55.000 --> 00:01:06.000
そして、まだしていない場合は、SFシンボルのビジュアルデザインと今日表示するさまざまなレンダリングモードの概要については、タリアの講演「SFシンボル4の新機能」をご覧ください。

00:01:06.000 --> 00:01:09.000
さて、可変色について話しましょう。

00:01:09.000 --> 00:01:17.000
可変色は、パーセンテージ値を使用してシンボルの外観に影響を与えることができるSFシンボルの新機能です。

00:01:17.000 --> 00:01:26.000
このパーセンテージ値を変更することで、信号強度や進行状況など、時間の経過とともに変化する可能性のある値を反映したシンボルを簡単に作成できます。

00:01:26.000 --> 00:01:33.000
可変色がどのように機能するかを見る最善の方法は、SFシンボルアプリにジャンプして、システムにそれ自体を語らせることだと思います。

00:01:33.000 --> 00:01:42.000
今年のSFシンボルアプリでは、レンダリングインスペクタに新しいプレビューエリアを追加し、すべてのレンダリングモードでシンボルを一目で見ることができます。

00:01:42.000 --> 00:01:48.000
さまざまな表現をクリックして、レンダリングモードを切り替えることもできます。

00:01:48.000 --> 00:01:51.000
ピッカーに新しい自動オプションもあります。

00:01:51.000 --> 00:01:59.000
このオプションを使用すると、各シンボルは独自の好みのレンダリングモードを選択できます。これは、ここのプレビュー領域で選択されています。

00:01:59.000 --> 00:02:08.000
たとえば、このsquare.and.arrow.upシンボルはモノクロを好みますが、これらのiPhoneシンボルは階層を好みます。

00:02:08.000 --> 00:02:12.000
カラーコントロールの下には、可変色の新しいコントロールセットがあります。

00:02:12.000 --> 00:02:19.000
そして、可変色をサポートするシンボルの新しいカテゴリがあり、実験を始めるのに最適な場所です。

00:02:19.000 --> 00:02:26.000
このスピーカーシンボルを選択し、マルチカラーに切り替えて、ギャラリービューに切り替えて詳しく見てみましょう。

00:02:26.000 --> 00:02:34.000
まず、このボタンをクリックして可変色をオンにし、スライダーをずっと下に引いて、使用しているパーセンテージを減らします。

00:02:34.000 --> 00:02:38.000
パーセンテージの値が減少するにつれて、シンボルの一部が暗くなるのを見ることができます。

00:02:38.000 --> 00:02:44.000
そして、スライダーを引き戻すと、シンボルのそれらの部分がすべての色を取り戻します。

00:02:44.000 --> 00:02:50.000
プレビューエリアに目を光らせておくと、4つのレンダリングモードすべてでこれが起こっていることがわかります。

00:02:50.000 --> 00:02:58.000
また、グリッドビューに戻すと、変数カテゴリのすべてのシンボルが変更に反応していることがわかります。

00:02:58.000 --> 00:03:02.000
それで、私たちは可変色について何を学びましたか?

00:03:02.000 --> 00:03:09.000
まず、可変色は、SFシンボルで利用可能なすべてのレンダリングモードで使用できます。

00:03:09.000 --> 00:03:17.000
可変色をサポートするすべてのシステムシンボルは、モノクロ、階層、パレット、マルチカラーモードでサポートしています。

00:03:17.000 --> 00:03:23.000
第二に、シンボルのいくつの部分が可変色の影響を受けるかについてのルールはありません。

00:03:23.000 --> 00:03:27.000
影響を受けるシンボルには1つのレイヤーしかないものもあれば、何十ものものものものものもあります。

00:03:27.000 --> 00:03:34.000
いずれにせよ、可変色はパーセンテージを使用して制御されるため、これについて心配する必要はありません。

00:03:34.000 --> 00:03:37.000
パーセンテージで合格するだけで大丈夫です。

00:03:37.000 --> 00:03:39.000
では、システムはこれらのパーセンテージをどのように解釈しますか?

00:03:39.000 --> 00:03:44.000
特定のレイヤーに可変色がいつ適用されるかを知るにはどうすればよいですか?

00:03:44.000 --> 00:03:52.000
さて、SFシンボルの残りの部分と同様に、私たちはあなたのアプリがAppleプラットフォームで自宅のように感じられるように可変色を設計しました。

00:03:52.000 --> 00:03:58.000
そして、それはあなたがよく知っているかもしれないシステムレベルの指標の動作からインスピレーションを得たことを意味します。

00:03:58.000 --> 00:04:01.000
例として、このマイクのシンボルを見てみましょう。

00:04:01.000 --> 00:04:08.000
マイクの左側にある4つの点は、それぞれ可変色に参加する別々のレイヤーにあります。

00:04:08.000 --> 00:04:14.000
したがって、パーセンテージ値が特定のしきい値を超えると、各ドットがアクティブになります。

00:04:14.000 --> 00:04:20.000
これらのしきい値は、0から100%の間で均等に間隔をあけられています。

00:04:20.000 --> 00:04:25.000
ゼロパーセントは、レイヤーがアクティブにされない特殊なケースです。

00:04:25.000 --> 00:04:29.000
ゼロパーセントを超える値は、最初のドットをアクティブにします。

00:04:29.000 --> 00:04:34.000
26%以上で、2番目のドットもアクティブになります。

00:04:34.000 --> 00:04:37.000
11%以上で3番目の点がアクティブになります。

00:04:37.000 --> 00:04:42.000
そして、76から100%まで、4つの点をすべてアクティブにします。

00:04:42.000 --> 00:04:49.000
したがって、可変色のシンボルは、正確にゼロパーセントで視覚的に空に見えるだけです。

00:04:49.000 --> 00:04:56.000
この動作は、Wi-Fi強度やバッテリー残量などのシステムレベルの指標で確認できます。

00:04:56.000 --> 00:05:02.000
可変カラーシンボルは、100%未満の値で視覚的に完全に表示され始めます。

00:05:02.000 --> 00:05:07.000
この動作は、明るさや音量などのシステムレベルのインジケータで確認できます。

00:05:07.000 --> 00:05:20.000
さて、この次のシンボルには、可変色を使用する3つのレイヤーがあります。つまり、レイヤー間のしきい値は33.3333や666.6667パーセントのような厄介な値に落ちる可能性があります。

00:05:20.000 --> 00:05:29.000
丸めエラーでシンボルが予期しない方法で表示されたくなかったし、コードに入力した有効桁数を心配してほしくなかった。

00:05:29.000 --> 00:05:41.000
したがって、レイヤー間のしきい値は最も近いパーセンテージポイントに四捨五入され、その四捨五入された値を1つの完全なパーセンテージポイント上回るまで、次のレイヤーをアクティブにしません。

00:05:41.000 --> 00:05:52.000
したがって、最初のしきい値では、33.3%が33%に切り下げるので、2番目の層は34%で1パーセントポイント高く活性化します。

00:05:52.000 --> 00:06:04.000
最終的なしきい値は66.7%から67%までラウンドされるため、最後のレイヤーは68%よりも1パーセントポイント高くアクティブになります。

00:06:04.000 --> 00:06:08.000
もちろん、システムが提供するシンボルは物語の半分にすぎません。

00:06:08.000 --> 00:06:21.000
SFシンボルアプリを使用すると、独自のカスタムシンボルを作成して注釈を付けることができ、さらに良いことに、システムによって提供されるシンボルと同じくらい柔軟で強力なカスタムシンボルを作ることができます。

00:06:21.000 --> 00:06:23.000
柔軟でパワフルとはどういう意味ですか?

00:06:23.000 --> 00:06:33.000
さて、システムが提供するSFシンボルは9つの異なる重みで利用でき、これらの9つの重みのそれぞれは3つの異なるスケールで利用できます。

00:06:33.000 --> 00:06:41.000
これらの27のバリアントのそれぞれは、可変色の有無にかかわらず、4つのレンダリングモードで利用できます。

00:06:41.000 --> 00:06:45.000
それは216の可能な構成です。

00:06:45.000 --> 00:06:51.000
幸いなことに、それはあなたがカスタムシンボルを216回描く必要があるという意味ではありません。

00:06:51.000 --> 00:06:56.000
昨年、シンボルの描画プロセスを合理化するために、可変テンプレートを導入しました。

00:06:56.000 --> 00:07:08.000
この種のテンプレートを使用する場合、ウェイトとスケールの27の異なる組み合わせを描画する代わりに、3つだけ描画するだけで、システムは他の24を自動的に生成できます。

00:07:08.000 --> 00:07:16.000
カスタムシンボルを描画した後、「注釈」と呼ばれるプロセスを通じて、さまざまなレンダリングモードを採用できます。

00:07:16.000 --> 00:07:28.000
昨年、シンボルに階層とパレットのレンダリングモードを採用したい場合は、カスタムシンボルを異なるレイヤーに分割し、各レイヤーに階層レベルを割り当てました。

00:07:28.000 --> 00:07:38.000
シンボルにマルチカラーレンダリングモードを採用したい場合は、カスタムシンボルを再び異なるレイヤーに分割し、各レイヤーに色を割り当てました。

00:07:38.000 --> 00:07:46.000
これは、利用可能なすべてのレンダリングモードをサポートするために、2つの別々のレイヤー構造を管理する必要がありました。

00:07:46.000 --> 00:07:50.000
今年は、統一された注釈でワークフローを合理化します。

00:07:50.000 --> 00:07:57.000
統一された注釈は、シンボルに単一層構造を使用し、すべてのレンダリングモードでその構造を共有します。

00:07:57.000 --> 00:08:05.000
したがって、シンボルを複数回レイヤーに分割する代わりに、一度だけ行う必要があります。

00:08:05.000 --> 00:08:15.000
また、階層、パレット、マルチカラーに対する以前のコントロールに加えて、モノクロレンダリングモードでシンボルがどのように見えるかを制御できるようになりました。

00:08:15.000 --> 00:08:22.000
そしてもちろん、統一された注釈では、シンボルに可変色を追加できます。

00:08:22.000 --> 00:08:27.000
それでは、統一された注釈を知るために、カスタムシンボルの注釈付けに取り組みましょう。

00:08:27.000 --> 00:08:33.000
昨年、私は同じ部屋にいなくても、家族が一緒にカードゲームをプレイできるようにアプリに取り組んでいました。

00:08:33.000 --> 00:08:37.000
その数ヶ月後、私は新しい強迫観念を発見しました:パズルキューブ!

00:08:37.000 --> 00:08:42.000
だから今年は、私の問題を解決する練習に役立つアプリを作りたいです。

00:08:42.000 --> 00:08:46.000
デスクトップで作ったカスタムパズルキューブのシンボルがあります。なぜなら、ここで作ったものです。

00:08:46.000 --> 00:08:49.000
アプリにドラッグして、新しいカスタムシンボルを作ります。

00:08:49.000 --> 00:08:57.000
このシンボルは、システムが提供するキューブシンボルをベースにし、パズルキューブの詳細の一部を残したことに気づきました。

00:08:57.000 --> 00:09:02.000
これは、小さなサイズや異なる重量でも、シンボルがはっきりと出くわすのに役立ちます。

00:09:02.000 --> 00:09:04.000
さて、以前からこのプレビューエリアを覚えていますか?

00:09:04.000 --> 00:09:08.000
カスタムシンボルに注釈を付けるときに特に便利です。

00:09:08.000 --> 00:09:15.000
注釈を変更すると、カスタムシンボルがさまざまなレンダリングモードでどのように見えるかが一目でわかります。

00:09:15.000 --> 00:09:25.000
また、ここをクリックするか、ピッカーで別のオプションを選択してレンダリングモードを切り替えると、リストの注釈コントロールがそれに応じて変化します。

00:09:25.000 --> 00:09:30.000
モノクロはかなり良さそうですが、階層モードで深みを加えましょう。

00:09:30.000 --> 00:09:35.000
そのモードに切り替えて、キューブの上部と側面を新しいレイヤーに引っ張ります。

00:09:35.000 --> 00:09:42.000
これらの新しいレイヤーは、あまり目立たない二次レベルと三次レベルに自動的に切り替わることがわかります。

00:09:42.000 --> 00:09:46.000
これは私のシンボルにもう少し深みと視覚的な興味を与えます。

00:09:46.000 --> 00:09:53.000
そして、私たちが作成した階層アノテーションは、パレットレンダリングモードをサポートするためにも使用されることを覚えておいてください。

00:09:53.000 --> 00:09:58.000
だから、私はちょうど1つの価格で2つの新しいレンダリングモードを手に入れました。

00:09:58.000 --> 00:10:02.000
では、マルチカラーモードに切り替えて、このシンボルに色を付けましょう。

00:10:02.000 --> 00:10:09.000
マルチカラーモードに切り替えると、階層モードで分離したのと同じレイヤーがまだ表示されることに注意してください。

00:10:09.000 --> 00:10:17.000
統一された注釈では、1つのレンダリングモードでレイヤー構造に加えられた変更が他のすべてのモードに実行されることを忘れないでください。

00:10:17.000 --> 00:10:25.000
前面を赤く、上面を青く、側面を黄色にしましょう。

00:10:25.000 --> 00:10:27.000
さて、これはかなり素晴らしく見えます。

00:10:27.000 --> 00:10:34.000
しかし、パズルキューブを解くことを学ぶ上で最も重要な部分は、練習、練習、そしてより多くの練習です。

00:10:34.000 --> 00:10:41.000
だから、私はキューブシンボルをタイマーとして使用し、練習により多くの時間を費やすにつれて色で塗りつぶしたいと思っています。

00:10:41.000 --> 00:10:45.000
その解決策は可変色です。

00:10:45.000 --> 00:10:51.000
前面のこれらの別々の作品は、私たちのタイマーのためにいくつかの可変色を追加するのに最適な場所のように見えます。

00:10:51.000 --> 00:10:55.000
これらの各ピースを別のレイヤーに分けましょう。

00:10:55.000 --> 00:10:59.000
レイヤーリストでこれらを並べ替えている順序に注目してください。

00:10:59.000 --> 00:11:08.000
最初に記入したいレイヤーは一番下に行き、最後に埋めたいレイヤーは一番上に行きます。

00:11:08.000 --> 00:11:15.000
次に、これらのレイヤーをすべて選択し、このボタンをクリックすると、すべてのレイヤーで可変色を有効にします。

00:11:15.000 --> 00:11:16.000
そして、それだけです!

00:11:16.000 --> 00:11:20.000
可変色スライダーを動かして、何が起こるか見てみましょう。

00:11:20.000 --> 00:11:26.000
すべての異なるレンダリングモードで何が起こっているかを確認するために、プレビューエリアに目を光らせておくことを忘れないでください。

00:11:26.000 --> 00:11:34.000
可変色で使用されるパーセンテージを変更すると、前面がすべてのレンダリングモードで色を調整することがわかります。

00:11:34.000 --> 00:11:36.000
それが統一された注釈の力です。

00:11:36.000 --> 00:11:41.000
1つのレンダリングモードでの編集は、他のレンダリングモードに実行できるからです。

00:11:41.000 --> 00:11:47.000
多くの場合、4つのレンダリングモードすべてで素晴らしい結果を得るには、1回か2回作業するだけで済みます。

00:11:47.000 --> 00:11:52.000
そして、物事が少しトリッキーな状況では、SFシンボルアプリはまだあなたをカバーしています。

00:11:52.000 --> 00:11:56.000
もっと複雑な記号を見てみましょう。 

00:11:56.000 --> 00:12:05.000
これは再び私のキューブシンボルですが、今回は、システムライブラリの多くの.circle.fillシンボルのように、円の内側に設定されています。

00:12:05.000 --> 00:12:08.000
さて、私はすでにこのシンボルに注釈を付け始めました。

00:12:08.000 --> 00:12:13.000
ここでは、円と立方体の部分を異なる層に分けたことがわかります。

00:12:13.000 --> 00:12:23.000
私のシンボルはマルチカラーモードと階層モードでは素晴らしく見えますが、モノクロでは、キューブとその背後にある円の間にはあまりコントラストがありません。

00:12:23.000 --> 00:12:33.000
シンボル内のすべてのパスが1つのレイヤーにあるとき、キューブパスはサークルパスに穴を開け、モノクロで素晴らしく見えました。

00:12:33.000 --> 00:12:40.000
しかし、円を独自のレイヤーに移動したので、キューブパスは穴を作成しなくなりました。

00:12:40.000 --> 00:12:45.000
代わりに、彼らは固体の円の上に固体の立方体を作成します。

00:12:45.000 --> 00:12:48.000
だから、私たちはそれをあまりよく見ることができません。

00:12:48.000 --> 00:12:54.000
幸いなことに、ここで私たちを助けることができる統一された注釈の新機能があります。

00:12:54.000 --> 00:12:59.000
消去を選択して、レイヤーがその背後にあるレイヤーに穴を開けるようにすることができます。

00:12:59.000 --> 00:13:01.000
それはずっと良く見えます。

00:13:01.000 --> 00:13:03.000
では、可変色をもう一度追加しましょう。

00:13:03.000 --> 00:13:13.000
今回は、前面のすべての部分を選択し、コンテキストメニューから「新しいレイヤーに分割」を選択します。

00:13:13.000 --> 00:13:18.000
次に、このボタンを使用して可変色を再度オンにします。

00:13:18.000 --> 00:13:20.000
そして、私は終わりました!

00:13:20.000 --> 00:13:31.000
ちなみに、パスはシンボルテンプレートに表示される順序を使用して分割されるため、描画中にシンボルのパスの順序に注意を払うと、後で時間を節約できます。

00:13:31.000 --> 00:13:35.000
つまり、一言で言えば統一された注釈です。

00:13:35.000 --> 00:13:39.000
これは、カスタムシンボルに注釈を付けるための高速で強力な方法です。

00:13:39.000 --> 00:13:44.000
すべてのレンダリングモードに適用されるレイヤー構造を1つ作成します。

00:13:44.000 --> 00:13:49.000
モノクロレンダリングモードでシンボルの外観を制御できるようになりました。

00:13:49.000 --> 00:13:53.000
シンボル内の個々のレイヤーに可変色を追加できます。

00:13:53.000 --> 00:14:06.000
レイヤーのzオーダーは、渡されたパーセンテージが増加するにつれて入力する順序を決定し、各レイヤーに使用されるしきい値はゼロから100%の間で均等に間隔をあけます。

00:14:06.000 --> 00:14:15.000
また、レイヤー構造の一部であるため、レイヤーが可変色を選択すると、この設定はすべてのレンダリングモードで共有されます。

00:14:15.000 --> 00:14:23.000
また、統一された注釈には2つの新しいレイヤーオプションがあり、新しい共有レイヤー構造での作業が容易になります。

00:14:23.000 --> 00:14:28.000
レイヤーを消去に設定すると、そのレイヤーの形状を使用して、その背後にあるレイヤーを消去します。

00:14:28.000 --> 00:14:38.000
これは、プラス、マイナス、またはその他の形状のバッジを持つモノクロや階層記号のような状況で本当に便利です。

00:14:38.000 --> 00:14:44.000
そして最後に、レイヤーをHiddenに設定すると、特定のレンダリングモードから除外されます。

00:14:44.000 --> 00:14:54.000
レイヤーがすべてのレンダリングモードで本当に使用できない状況にある場合は、このオプションを使用して、そのレイヤーを特定のモードにのみ適用できます。

00:14:54.000 --> 00:14:59.000
これらの新機能はすべて、新しいテンプレート形式である4.0でサポートされています。

00:14:59.000 --> 00:15:10.000
SFシンボルアプリからシンボルをエクスポートしてXcodeにインポートするときは、4.0テンプレートをエクスポートしてモノクロレンダリングを制御し、可変色を使用するようにしてください。

00:15:10.000 --> 00:15:17.000
昨年注釈したカスタムシンボルがすでにある場合は、統一された注釈を使用するように自動的に更新されます。

00:15:17.000 --> 00:15:24.000
階層的および多色の注釈は、余分な作業を必要とせずに持ち込まれます。

00:15:24.000 --> 00:15:32.000
また、以前のプラットフォームをサポートする必要がある場合は、以前の3.0および2.0形式はまだ使用できます。

00:15:32.000 --> 00:15:35.000
締めくくる前に、もう一つやりたいことがあります。

00:15:35.000 --> 00:15:44.000
パズルキューブの解き方を学ぶのはとても楽しかったですが、これまでの一番いいところは、娘が私がパズルを解くのを見て、私も学びたかったことです。

00:15:44.000 --> 00:15:50.000
だから当然のことながら、私は彼女に私のアプリを使って彼女の練習を手伝ってもらいたいです。

00:15:50.000 --> 00:15:55.000
さて、彼女はこの秋に幼稚園を始めるので、私たちは彼女を少しゆっくり始めるつもりです。

00:15:55.000 --> 00:16:00.000
しかし、これは可変色のシンボルが本当に輝く場所です。

00:16:00.000 --> 00:16:03.000
タイマーUIをこのように設計できます。

00:16:03.000 --> 00:16:13.000
テキストと数字は説明的で役に立ちますが、まだ学んでいる、またはテキストを読むことができない彼女のような人にとっては威圧的かもしれません。

00:16:13.000 --> 00:16:22.000
しかし、彼女が持っているものと同じように見えるパズルキューブを見て、時間が経つにつれて色で満たされるのを見るのは、フレンドリーで直感的です。

00:16:22.000 --> 00:16:35.000
タイマーコードを変更する必要はありません。私がする必要があるのは、使用しているシンボルの名前を変更し、より大きなキューブシンボルに使用したのと同じパーセンテージ値を渡し続けることだけで、SFシンボルが残りを処理します。

00:16:35.000 --> 00:16:37.000
そして、それがシンボルの力です。

00:16:37.000 --> 00:16:42.000
彼らは私たちが言語とテキストを超越した方法でアイデアを伝えることを可能にします。

00:16:42.000 --> 00:16:45.000
彼らは私たちのアプリをより包括的にする方法を与えてくれます。

00:16:45.000 --> 00:16:56.000
そして、システムが提供するシンボルとカスタムシンボルの両方の可変色は、進行状況、信号強度、時間などの概念に対してさらに表現力を与えます。

00:16:56.000 --> 00:17:00.000
そのすべては、3つの図面と1つの統一された注釈から。

00:17:00.000 --> 00:17:01.000
それはかなり素晴らしいです。

00:17:01.000 --> 00:17:06.000
そして、私は付け加えるかもしれませんが、それはパズルキューブを解くよりもずっと簡単です。

00:17:06.000 --> 23:59:59.000
♪

