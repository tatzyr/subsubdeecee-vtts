WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
こんにちは、私の名前はアンダースです。

00:00:12.000 --> 00:00:15.000
このビデオでは、Swiftパッケージプラグインを使い始める方法を紹介します。

00:00:15.000 --> 00:00:18.000
SwiftパッケージはXcode 11で導入されました。

00:00:18.000 --> 00:00:21.000
彼らは、ライブラリをソースコードとして配布する素晴らしい方法を提供します。

00:00:21.000 --> 00:00:31.000
Xcode 14は、このアプローチを開発ワークフローに拡張し、プラグインを使用して、ビルド中にソースコードを生成したり、リリースタスクを自動化したりすることができます。

00:00:31.000 --> 00:00:45.000
まず、パッケージプラグインとは何か、どのように機能するかを見てから、Xcode 14がサポートする2種類のパッケージプラグイン、コマンドプラグインとビルドツールプラグインについて詳しく説明します。

00:00:45.000 --> 00:00:48.000
まず第一に、プラグインとは何ですか?

00:00:48.000 --> 00:00:54.000
パッケージプラグインは、SwiftパッケージまたはXcodeプロジェクトでアクションを実行できるSwiftスクリプトです。

00:00:54.000 --> 00:00:58.000
プラグインは、Xcodeが特にこの目的のために提供するAPIを使用します。

00:00:58.000 --> 00:01:01.000
パッケージプラグインはSwiftパッケージとして実装されています。

00:01:01.000 --> 00:01:09.000
パッケージは、ライブラリや実行可能ファイルと一緒にプラグインを提供するか、パッケージはプラグインの提供のみに集中できます。

00:01:09.000 --> 00:01:16.000
パッケージプラグインは複数のソースファイルを使用して実装でき、Swiftパッケージは複数のプラグインを定義できます。

00:01:16.000 --> 00:01:25.000
高度に専門化されたプラグインは、それを提供するパッケージに非公開にすることができ、その場合、そのパッケージ内でのみ利用可能です。

00:01:25.000 --> 00:01:32.000
しかし、汎用プラグインは、パッケージ製品として定義することで、他のパッケージで利用できるようにすることができます。

00:01:32.000 --> 00:01:39.000
これにより、他のパッケージも、パッケージが別のパッケージからライブラリを使用する方法と同様の方法で使用できます。

00:01:39.000 --> 00:01:45.000
しかし、ライブラリとは異なり、プラグインへの依存はランタイムコンテンツをアプリに持ち込むことはありません。

00:01:45.000 --> 00:01:52.000
代わりに、自分のマシンまたはビルドオートメーションで動作する開発ツールにアクセスできます。

00:01:52.000 --> 00:01:55.000
では、パッケージプラグインは何ができますか?

00:01:55.000 --> 00:02:03.000
さて、Xcode 14には、コマンドプラグインとビルドツールプラグインの2種類のパッケージプラグインがあります。

00:02:03.000 --> 00:02:08.000
コマンドプラグインは、いつでも実行できるカスタムアクションを実装します。

00:02:08.000 --> 00:02:15.000
ソースコードフォーマッタやリンターを実行したり、開発ワークフローの一部として他のタスクを実行したりできます。

00:02:15.000 --> 00:02:24.000
これには、Gitの履歴に基づいてソースファイルの貢献者リストや著作権の日付を更新すること、または今日行うべき任意のスクリプトがあるかもしれない他のことが含まれます。

00:02:24.000 --> 00:02:29.000
必要に応じて、コマンドプラグインはパッケージ内のファイルを変更する許可を求めることができます。

00:02:29.000 --> 00:02:32.000
そして、それはコードの書式設定に特に便利です。

00:02:32.000 --> 00:02:35.000
すべてのコマンドプラグインが書き込み許可を必要とするわけではありません。

00:02:35.000 --> 00:02:42.000
一部のコマンドでは、変更を加えることなく、レポートを作成したり、コードに関するメトリクスを計算したりできます。

00:02:42.000 --> 00:02:45.000
ビルドツールプラグインは、ビルドシステムの依存関係グラフを拡張します。

00:02:45.000 --> 00:02:51.000
ビルドの一部としてソースコードやリソースを生成するのに特に便利です。

00:02:51.000 --> 00:03:00.000
一度にパッケージ全体またはプロジェクトに対して呼び出されるコマンドプラグインとは異なり、ビルドツールプラグインは、それらを必要とする各ターゲットに適用されます。

00:03:00.000 --> 00:03:04.000
Xcodeでコマンドプラグインを使用することを見てみましょう。 では、Xcodeでコマンドプラグインを使用することを見てみましょう。

00:03:04.000 --> 00:03:09.000
これは、さまざまな種類の幾何学的形状を示す小さなiOSアプリです。

00:03:09.000 --> 00:03:13.000
アプリプロジェクトとローカルパッケージで構成されています。

00:03:13.000 --> 00:03:19.000
このパッケージは、アプリのコアデータ型とロジックを提供するライブラリを実装しています。

00:03:19.000 --> 00:03:31.000
他の人が使用できるように、パッケージを独自のリポジトリに分割することを考えています。その一環として、このパッケージのコードをコミットしたすべての人をリストするコントリビューターファイルを作成したいと思います。

00:03:31.000 --> 00:03:33.000
私はこれを行うためのカスタムスクリプトを書くことができます。

00:03:33.000 --> 00:03:41.000
しかし、私はコードを扱うためのいくつかの便利なプラグインを提供するパッケージを知っています、そしてそれは私が望むことを正確に行うプラグインを持っていると思います。

00:03:41.000 --> 00:03:51.000
これらのプラグインにアクセスするには、別のパッケージのライブラリが必要な場合と同じことをします。ローカルパッケージのマニフェストにパッケージの依存関係を追加します。

00:03:51.000 --> 00:03:59.000
マニフェストを保存すると、Xcodeはリモートパッケージを取得し、パッケージの依存関係セクションに表示されます。

00:03:59.000 --> 00:04:05.000
Xcodeは、コードをフォーマットするための一般的なツールであるSwiftFormatもフェッチしたことに気づきました。

00:04:05.000 --> 00:04:12.000
これは、ユーティリティパッケージのコマンドプラグインの1つがSwiftFormatに依存しているためです。

00:04:12.000 --> 00:04:18.000
この依存関係を追加したので、パッケージが提供するプラグインコマンドにアクセスできます。

00:04:18.000 --> 00:04:25.000
コマンドを適用したいパッケージのコンテキストメニューを使用します。

00:04:25.000 --> 00:04:35.000
現在、メニューには3つの新しいコマンドがあります。1つはSwiftFormatを使用してソースコードを再フォーマットするためのもので、他の2つは特別なアクションを提供します。

00:04:35.000 --> 00:04:43.000
そのうちの1つは、Gitのコミット履歴に基づいてコントリビューターリストを生成または更新し、もう1つはソースファイルの著作権の日付を更新します。

00:04:43.000 --> 00:04:48.000
真ん中のコマンドは、まさに私が望むことをします。

00:04:48.000 --> 00:04:55.000
パッケージでプラグインコマンドを呼び出すと、Xcodeでは、プラグインに渡すターゲットを選択できます。

00:04:55.000 --> 00:04:58.000
この場合、パッケージ全体でそれを呼び出します。

00:04:58.000 --> 00:05:05.000
そして、プラグインがカスタム引数を取る場合、私はここでもそれらを渡すことができます。

00:05:05.000 --> 00:05:12.000
実行をクリックすると、プラグインがファイルシステムを変更するので、Xcodeはそれについて警告します。

00:05:12.000 --> 00:05:19.000
プラグインの作者が私のコードを変更したい理由を見ることができますが、プラグインの実装も覗いてみたい。

00:05:19.000 --> 00:05:25.000
だから私はCommandを表示を選択し、Xcodeは私をコードに連れて行きます。

00:05:25.000 --> 00:05:35.000
このプラグインがやっていることは安全なので、もう一度コマンドを呼び出して、今回はRunを選択します。

00:05:35.000 --> 00:05:40.000
このプラグインの選択を覚えておくようにXcodeに伝えます。

00:05:40.000 --> 00:05:50.000
この特定のプラグインは、Git履歴を使用して、コントリビューターの名前を示すファイルリストを生成しますが、コマンドプラグインができることには多くの柔軟性があります。

00:05:50.000 --> 00:05:56.000
Xcodeでコマンドプラグインを使用したので、プラグインが内部でどのように機能するかを詳しく見てみましょう。

00:05:56.000 --> 00:06:01.000
パッケージプラグインは、必要なときにコンパイルされ、実行されるSwiftスクリプトです。

00:06:01.000 --> 00:06:05.000
各プラグインは別々のプロセスとして実行されます。

00:06:05.000 --> 00:06:12.000
プラグインは、ソースファイルを含む入力パッケージの蒸留表現にアクセスできます。

00:06:12.000 --> 00:06:16.000
プラグインは、パッケージの依存関係に関する情報も取得します。

00:06:16.000 --> 00:06:20.000
多くのプラグインは、作業の一環としてコマンドラインツールを呼び出します。

00:06:20.000 --> 00:06:28.000
プラグインは、ファイルやディレクトリを作成したり、Foundationなどの標準ライブラリを使用して他のアクションを実行したりすることもできます。

00:06:28.000 --> 00:06:37.000
プラグインは、ネットワークアクセスを防止し、ビルド出力ディレクトリなど、ファイルシステム内のいくつかの場所にしか書き込むことができないサンドボックスで実行されます。

00:06:37.000 --> 00:06:42.000
しかし、コマンドプラグインは、パッケージソースディレクトリ内のファイルも変更する許可を求めることができます。

00:06:42.000 --> 00:06:47.000
ユーザーが承認した場合、サンドボックスはそれらの場所への書き込みを許可するように設定されています。

00:06:47.000 --> 00:06:51.000
プラグインは結果をXcodeに送り返すこともできます。

00:06:51.000 --> 00:06:59.000
警告やエラーを発する可能性があり、ビルドツールプラグインは、ビルド中にXcodeが実行するためのツール呼び出しを定義できます。

00:06:59.000 --> 00:07:04.000
すべてのパッケージプラグインは、Xcodeが提供するPackagePluginモジュールのAPIを使用します。

00:07:04.000 --> 00:07:10.000
このAPIを使用すると、プラグインは入力パッケージにアクセスし、必要に応じて結果をXcodeに返すことができます。

00:07:10.000 --> 00:07:16.000
プラグインを実装するメインソースファイルは、メインエントリポイントも定義します。

00:07:16.000 --> 00:07:22.000
これは、プラグインのタイプに一致するプロトコルに準拠したクラスまたは構造体である必要があります。

00:07:22.000 --> 00:07:28.000
Xcodeが呼び出す特定のエントリポイント関数は、それがどのようなプラグインであるかによって異なります。

00:07:28.000 --> 00:07:33.000
PackagePlugin APIの詳細については、「Swiftパッケージプラグインの作成」ビデオをご覧ください。

00:07:33.000 --> 00:07:37.000
以前は、コマンドプラグインを使用してパッケージに変更を加えました。

00:07:37.000 --> 00:07:41.000
コマンドプラグインの詳細をもう少し見てみましょう。 いくつか見てみましょう。

00:07:41.000 --> 00:07:44.000
コマンドプラグインは開発ワークフローを拡張します。

00:07:44.000 --> 00:07:48.000
それらはビルド中ではなく、パッケージに直接適用されます。

00:07:48.000 --> 00:07:55.000
すべてのコマンドプラグインがファイルシステムを変更するわけではありません。ファイルの変更を伴わない便利なアクションがあります。

00:07:55.000 --> 00:08:01.000
しかし、コマンドがファイルシステムに書き込む場合は、プラグインを実装するパッケージのマニフェストでそれを宣言する必要があります。

00:08:01.000 --> 00:08:06.000
これにより、Xcodeはプラグインを実行する前にユーザーに許可を求めます。

00:08:06.000 --> 00:08:12.000
プラグインは通常非常に小さく、実際の作業を行うために他のツールに依存することがよくあります。

00:08:12.000 --> 00:08:17.000
以前、プラグインの1つがすべての実際の作業にSwiftFormatを使用していることがわかりました。

00:08:17.000 --> 00:08:26.000
ツールパッケージへの依存関係は、バイナリまたはソースコードのいずれかです。Xcodeは、コマンドが呼び出される前に、必要なツールをソースから構築します。

00:08:26.000 --> 00:08:31.000
プラグインは、依存しているツールとは異なるパッケージで提供できることに注意してください。

00:08:31.000 --> 00:08:40.000
コマンドプラグインの実装では、メインタイプはCommandPluginプロトコルに準拠し、プラグインはperformCommandエントリポイントを実装します。

00:08:40.000 --> 00:08:45.000
このエントリポイントは、ユーザーから提供されたコンテキストとカスタム引数を取ります。

00:08:45.000 --> 00:08:49.000
コマンドプラグインを呼び出す別の方法を見てみましょう。

00:08:49.000 --> 00:08:58.000
以前と同じプロジェクトを使用する予定ですが、先ほどSourceCodeUtilitiesパッケージへの依存関係を追加したため、ターミナルで同じプラグインを呼び出すことができます。

00:08:58.000 --> 00:09:05.000
まず、コマンドプラグインを適用したいパッケージなので、ディレクトリをCoreLibsパッケージに変更します。

00:09:05.000 --> 00:09:10.000
Swift Package Manager 5.6には、プラグイン用の新しいサブコマンドがあります。

00:09:10.000 --> 00:09:14.000
「Swift package plugin --List」と入力して、利用可能なプラグインを確認します。

00:09:14.000 --> 00:09:18.000
これは、Xcodeのメニューと同じプラグインを示しています。

00:09:18.000 --> 00:09:23.000
このコマンドラインでは、各コマンドには、実行に使用する動詞も表示されます。

00:09:23.000 --> 00:09:30.000
Xcodeで行ったように、貢献者リストを再生成するために動詞を使用します。

00:09:30.000 --> 00:09:34.000
このプラグインは、ファイルを作成するため、ファイルシステムに書き込む許可が必要です。

00:09:34.000 --> 00:09:40.000
これを許可するために「はい」と入力すると、プラグインはコントリビューターリストを実行して更新できます。

00:09:40.000 --> 00:09:46.000
また、プラグインが尋ねることなくファイルシステムに書き込むことを可能にするパッケージマネージャオプションを使用することもできます。

00:09:46.000 --> 00:09:52.000
これは、CIシステムやその他のビルドオートメーションから呼び出す場合に特に便利です。

00:09:52.000 --> 00:09:57.000
しかし、そのオプションを使用する前に、プラグインが何をしているのかを必ず知ってください。

00:09:57.000 --> 00:10:02.000
Xcodeと同様に、コマンドラインの引数をプラグインに渡すことができます。

00:10:02.000 --> 00:10:07.000
プラグインのアクション動詞の後の引数は、プラグインに渡されます。

00:10:07.000 --> 00:10:13.000
この場合、実行中のプラグインからのより多くの出力を見るために冗長なフラグを渡します。

00:10:13.000 --> 00:10:17.000
各コマンドプラグインは、サポートする引数を定義します。

00:10:17.000 --> 00:10:22.000
今まで、私たちは主にコマンドプラグインについて話してきました。

00:10:22.000 --> 00:10:25.000
しかし、ビルドツールプラグインについて言いたいことがいくつかあります。

00:10:25.000 --> 00:10:31.000
コマンドプラグインとは異なり、ビルドツールプラグインはすぐには機能しません。

00:10:31.000 --> 00:10:38.000
代わりに、パッケージがビルドされたときにXcodeが後で実行するためのビルドツールの呼び出しを作成して返します。

00:10:38.000 --> 00:10:46.000
これらのツールの呼び出しのそれぞれには、実行するコマンドラインがあり、いつ実行するかをXcodeに指示する入力と出力もあります。

00:10:46.000 --> 00:10:52.000
ビルドツールプラグインは、ビルド中またはビルド前に実行されるコマンドを定義できます。

00:10:52.000 --> 00:10:56.000
すぐに違いを見てみましょう。 では、その違いを見てみましょう

00:10:56.000 --> 00:11:04.000
ビルドツールプラグインによって返されるコマンドは、通常、出力をビルドディレクトリに書き込むように構成されているため、増分ビルド間で持続します。

00:11:04.000 --> 00:11:13.000
また、プラグイン自体と同様に、ビルドツールプラグインによって定義されたコマンドは、ネットワークアクセスやパッケージへの変更を防ぐサンドボックスで実行されます。

00:11:13.000 --> 00:11:24.000
ビルドツールプラグインの実装では、メインタイプはBuildToolPluginプロトコルに準拠し、プラグインはcreateBuildCommandsエントリポイントを実装します。

00:11:24.000 --> 00:11:30.000
このエントリポイントは、ビルドコマンドを作成するためのコンテキストとターゲットを取ります。

00:11:30.000 --> 00:11:35.000
パッケージがビルドされたときに実行するカスタムビルドコマンドを返します。

00:11:35.000 --> 00:11:40.000
ビルドツールプラグインが返すことができる基本的なビルドコマンドには2種類あります。

00:11:40.000 --> 00:11:48.000
通常のビルドコマンドは、入力パスと出力パスを指定し、出力が欠落しているとき、または入力が変更された場合にのみ実行されます。

00:11:48.000 --> 00:11:56.000
プリビルドコマンドは、ビルドが開始される前に実行され、出力の名前が事前に不明な場合に使用できます。

00:11:56.000 --> 00:12:02.000
プリビルドコマンドは、すべてのビルドの前に実行されるため、変更がないときはできるだけ作業を少なくする必要があります。

00:12:02.000 --> 00:12:07.000
ビルドコマンドとプリビルドコマンドは、ソースコードやリソースを生成するのに最適です。

00:12:07.000 --> 00:12:12.000
では、Xcodeはどのビルドツールプラグインをパッケージターゲットに適用するかをどのように知っていますか?

00:12:12.000 --> 00:12:21.000
SwiftPM 5.6以降では、ターゲットが望むビルドツールプラグインをリストするパッケージマニフェストに新しいプラグインパラメータがあります。

00:12:21.000 --> 00:12:33.000
このパラメータは、ターゲットが必要とするビルドツールプラグインを指定し、それが依存するランタイムライブラリと同様に、それらのプラグインは同じパッケージまたは別のパッケージのいずれかにすることができます。

00:12:33.000 --> 00:12:34.000
Xcodeに戻りましょう。 

00:12:34.000 --> 00:12:38.000
ビルドツールプラグインを使用するようにジオメトリアプリを設定します。

00:12:38.000 --> 00:12:46.000
この特定のケースでは、コアライブラリターゲットのいくつかのデータファイルに基づいてSwiftコードを生成するカスタムコマンドラインツールがあります。

00:12:46.000 --> 00:12:54.000
具体的な詳細は重要ではありませんが、私が最終的にしたいのは、各データに対して生成されたタイプセーフなSwiftアクセサです。

00:12:54.000 --> 00:13:01.000
データファイルに加えて、カスタムツールを使用して、リポジトリにチェックインしたソースコードを生成しています。

00:13:01.000 --> 00:13:09.000
私はこのツールを手動で実行して、Swiftラッパーコードを再生成し、データファイルが変更されるたびに変更をコミットしています。

00:13:09.000 --> 00:13:11.000
しかし、ビルドツールプラグインで、私はもっとうまくやることができます。

00:13:11.000 --> 00:13:19.000
ビルド中にコードを生成し、生成されたコードをリポジトリに保存する必要がなくなります。

00:13:19.000 --> 00:13:33.000
プラグインにアクセスするには、パッケージマニフェストに移動し、使用したいソースジェネレータプラグインを提供するパッケージへの依存関係を追加します。

00:13:33.000 --> 00:13:42.000
私のパッケージのターゲットは、そのパッケージで定義されたビルドツールプラグインにアクセスできるようになりました。

00:13:42.000 --> 00:13:52.000
次に、プラグインを使用する必要があるターゲットに移動し、その定義にプラグインパラメータを追加します。

00:13:52.000 --> 00:13:59.000
これは、そのパッケージから特定のビルドツールを私のターゲットに適用したいことをXcodeに伝えます。

00:13:59.000 --> 00:14:03.000
これで、生成されたソースファイルをリポジトリから削除できます。

00:14:03.000 --> 00:14:11.000
ビルド中に必要に応じて作成または更新されます。

00:14:11.000 --> 00:14:14.000
そこで、それははるかにきれいです。

00:14:14.000 --> 00:14:22.000
そして今、アプリを構築して実行すると、ビルドツールプラグインは、データファイルが変更されるたびにコード生成ツールを呼び出すようにXcodeに指示します。

00:14:22.000 --> 00:14:28.000
生成されたコードは、他のビルドファイルと一緒にビルドフォルダに保存され、リポジトリを清潔に保ちます。

00:14:28.000 --> 00:14:33.000
このビデオでは、Swiftパッケージプラグインとは何か、どのように機能するかについて話しました。

00:14:33.000 --> 00:14:40.000
コマンドプラグインとビルドツールプラグインの類似点と相違点について話し合いました。

00:14:40.000 --> 00:14:47.000
どちらのタイプのプラグインでも、さまざまなランダムなスクリプトを、パッケージ内のより構造化された種類の拡張性に置き換えることができます。

00:14:47.000 --> 00:14:56.000
ビルドツールプラグインを使用すると、ビルドシステムを拡張してソースとリソースを生成したり、ビルドの一部として他のカスタム作業を実行したりできます。

00:14:56.000 --> 00:15:01.000
コマンドプラグインを使用すると、カスタムアクションで一般的な開発タスクを自動化できます。

00:15:01.000 --> 00:15:08.000
それらは特定のワークフローに合わせて調整されているかもしれないし、さまざまなケースに役立つように書かれているかもしれない。

00:15:08.000 --> 00:15:15.000
独自のパッケージプラグインを作成する方法を学ぶには、「Swiftパッケージプラグインの作成」ビデオを必ずチェックしてください。

00:15:15.000 --> 00:15:19.000
WWDC 2022の残りの部分を見て楽しんでくれてありがとう。

00:15:19.000 --> 23:59:59.000
♪

