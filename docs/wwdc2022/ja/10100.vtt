WEBVTT

00:00:00.000 -> 00:00:09.000
♪ ♪

00:00:09.000 -> 00:00:19.000
こんにちは、私はWebKitチームのエンジニアであるDevin Roussoです。今日、SafariのWeb Inspectorの拡張機能を作成するエキサイティングな新しい機会を皆さんと共有するためにここにいます。

00:00:19.000 -> 00:00:24.000
Web Inspectorは、AppleのすべてのプラットフォームでWebコンテンツをデバッグするための主要な開発者ツールです。

00:00:24.000 -> 00:00:35.000
すでにWebサイトをデバッグするための多くの機能が組み込まれていますが、一般的な開発者ツールに組み込むのが難しいWeb開発の分野がしばしばあります。

00:00:35.000 -> 00:00:41.000
人気のあるJavaScriptライブラリをデバッグしているか、作業内容にもっと具体的なものが必要なのかもしれません。

00:00:41.000 -> 00:00:47.000
Web Inspectorの拡張機能は、これらの個人的なワークフローシナリオのための素晴らしいソリューションです。

00:00:47.000 -> 00:00:56.000
クロスブラウザのWeb拡張機能とDevTools APIを利用することで、Safari 16のWebインスペクタに独自のタブを追加できるようになりました。

00:00:56.000 -> 00:01:02.000
動作中のWeb Inspector拡張機能を簡単に見てから、独自の拡張機能を構築する方法を紹介します。

00:01:02.000 -> 00:01:07.000
まず、Safariの拡張機能環境設定を開きます。

00:01:07.000 -> 00:01:10.000
そして、Web Inspector拡張機能を有効にします。

00:01:10.000 -> 00:01:15.000
次に、Safariの拡張機能の設定を閉じて、ページを調べます。

00:01:15.000 -> 00:01:19.000
開発メニュー「Webインスペクタを表示」から行います。

00:01:19.000 -> 00:01:28.000
Webインスペクタでは、要素タブのような多くの組み込みタブだけでなく、有効にしたばかりのWebインスペクタ拡張機能のタブも見ることができます。

00:01:28.000 -> 00:01:34.000
ただし、この拡張機能を有効にしたばかりなので、まず現在検査されているページを操作する許可を与える必要があります。

00:01:34.000 -> 00:01:42.000
Webインスペクタ以外の他の拡張機能と同じ許可期間オプションを持っているので、とりあえず1日のアクセスを許可しましょう。

00:01:42.000 -> 00:01:45.000
このオープングラフ拡張機能は、私がこのセッションで構築するものです。

00:01:45.000 -> 00:01:54.000
これは、ほとんどのウェブサイトがメッセージやその他のソーシャルメディアサイトのリンクプレビューで使用するためにページに置く一般的なソーシャルメディアメタデータを表示します。

00:01:54.000 -> 00:02:00.000
Web Inspector拡張機能で何ができるかを簡単に見たので、それらがどのように構築されているかについて話しましょう。

00:02:00.000 -> 00:02:07.000
他のSafari Web拡張機能と同様に、Web Inspector拡張機能はApp Storeのアプリを介して配布されます。

00:02:07.000 -> 00:02:15.000
独自のWeb Inspector拡張機能を構築するには、MacとiOSアプリを構築するためのAppleのアプリ作成ツールであるXcodeが必要です。

00:02:15.000 -> 00:02:21.000
Xcodeには、新しいSafari拡張アプリの作成を開始するのに役立つプロジェクトテンプレートも付属しています。

00:02:21.000 -> 00:02:28.000
別のブラウザ用に作成した既存のWeb拡張機能がすでにある場合は、Xcodeのバンドルされた変換ツールを使用することもできます。

00:02:28.000 -> 00:02:37.000
ターミナルからsafari-web-extension-converterを実行し、manifest.jsonファイルを含む拡張機能のディレクトリへのパスを渡すだけです。

00:02:37.000 -> 00:02:43.000
その後、ビルドして実行する準備ができている拡張機能の完全なアプリプロジェクトが作成されます。

00:02:43.000 -> 00:02:51.000
このツールの詳細については、WWDC 2020のMeet Safari Web Extensionsとオンラインドキュメントをご覧ください。

00:02:51.000 -> 00:03:03.000
そこで今日は、Web Inspector拡張機能の基本的な構造について説明し、その拡張機能のコードを最適に評価する方法をカバーし、ユーザーのためのいくつかの優れたベストプラクティスについて説明します。

00:03:03.000 -> 00:03:06.000
始めましょう。

00:03:06.000 -> 00:03:18.000
Web Inspector拡張機能は、他のSafari Web拡張機能と同様に、ツールバーアイコン、背景ページ、コンテンツスクリプトなどで構成されていますが、専用のdevtools背景ページもあります。

00:03:18.000 -> 00:03:21.000
それが実際にどのように機能するかを見てみましょう。

00:03:21.000 -> 00:03:30.000
典型的なSafari Web拡張機能の構造は、名前、アイコン、説明など、拡張機能に関する基本的な詳細を宣言するマニフェストファイルから始まります。

00:03:30.000 -> 00:03:43.000
拡張機能のすべての舞台裏のロジックを処理するための背景ページを宣言することができ、また、ユーザーが訪問したWebページに機能を注入するために使用されるコンテンツスクリプトを宣言することもできます。

00:03:43.000 -> 00:03:47.000
Web Inspectorの拡張機能の場合、他のいくつかのページがミックスに入ります。

00:03:47.000 -> 00:03:54.000
まず、Web Inspector拡張機能の舞台裏ロジックに必要なdevtoolsの背景ページがあります。

00:03:54.000 -> 00:04:01.000
このページでは、ユニークなdevtools APIにアクセスでき、コンテンツスクリプトAPIの限られたセットのみアクセスできます。

00:04:01.000 -> 00:04:08.000
このdevtoolsバックグラウンドページから、Webインスペクタに表示されるdevtoolsタブページを作成できます。

00:04:08.000 -> 00:04:11.000
しかし、それはすべて単一のWebインスペクタのためのものです。

00:04:11.000 -> 00:04:21.000
複数のWebインスペクタがある場合、それぞれにこの同じdevtools背景ページの独自のインスタンスがあり、関連するWebインスペクタが開いている間は生き残ります。

00:04:21.000 -> 00:04:27.000
そのため、各devtoolsタブページの複数のインスタンスがある場合もあります。

00:04:27.000 -> 00:04:34.000
この構造が実際にどのように見えるかを見て、Open Graph Web Inspector拡張機能の構築を始めましょう。

00:04:34.000 -> 00:04:41.000
Xcodeで新しいプロジェクトを作成することから始めます。

00:04:41.000 -> 00:04:45.000
私が作成するプロジェクトタイプは、Safari拡張機能アプリです。

00:04:45.000 -> 00:04:52.000
本当に必要なのはmacOSだけですが、将来iOS機能を追加したい場合に備えて、マルチプラットフォームではそのままにしておきます。

00:04:52.000 -> 00:04:56.000
この名前を「Open Graph」と名付け、残りのデフォルトを維持します。

00:04:56.000 -> 00:05:03.000
使用しているApple開発者アカウントに基づいて、チームとバンドルの識別子を選択する必要があることに注意してください。

00:05:03.000 -> 00:05:07.000
そして最後に、これをデスクトップに保存します。

00:05:07.000 -> 00:05:12.000
今、私は一般的なSafari Web Extensionプロジェクトを持っており、変更する準備ができています。

00:05:12.000 -> 00:05:18.000
私は最初に、すべてのWeb拡張子のルート設定ファイルであるmanifest.jsonファイルに連れて行かれます。

00:05:18.000 -> 00:05:26.000
マニフェストファイルは、ローカリゼーション、画像、ページ、スクリプト、スタイルなど、拡張機能を構成する他のリソースを参照します。

00:05:26.000 -> 00:05:42.000
Web Inspector拡張機能では、背景ページ、コンテンツスクリプト、ポップアップなど、これらのファイルの一部を必要としないので、マニフェストとプロジェクト全体から削除します。

00:05:42.000 -> 00:05:46.000
さて、これをWeb Inspectorの拡張機能にしましょう。

00:05:46.000 -> 00:05:55.000
これを行うには、マニフェストにdevtoolsの背景ページを追加し、それに対応するファイルと、その中で使用するJavaScriptファイルを作成する必要があります。

00:05:55.000 -> 00:06:01.000
私はファイル-新規-ファイルに行くつもりです...

00:06:01.000 -> 00:06:12.000
そして、下にスクロールして空のファイルテンプレートを見つけます。

00:06:12.000 -> 00:06:20.000
マニフェストで使用した名前と一致するように、このファイルを「devtools_background.html」と呼びます。

00:06:20.000 -> 00:06:31.000
場所はすでに私の他のリソースと正しいターゲットの一部のすぐ隣に設定されているので、ここで何も変更する必要はありません。

00:06:31.000 -> 00:06:40.000
JavaScriptファイルで同じ手順をもう一度繰り返します...

00:06:40.000 -> 00:06:48.000
...私は「devtools_background.js」と呼びます。

00:06:48.000 -> 00:06:54.000
最後に、devtoolsの背景ページにJavaScriptファイルを含める必要があります。

00:06:54.000 -> 00:07:02.000
このページは、Webインスペクタが開いたときに作成され、Webインスペクタに表示されるカスタムタブを作成する責任があります。

00:07:02.000 -> 00:07:11.000
ほとんどの場合、タブを作成して、必要に応じて、先ほど見た権限が他の場所ではなく、インラインでユーザーに表示されるようにしたいと考えています。

00:07:11.000 -> 00:07:15.000
このdevtoolsパネル作成APIは、3つの簡単な引数を取ります。

00:07:15.000 -> 00:07:18.000
1つ目はタブの名前です。

00:07:18.000 -> 00:07:24.000
そのために、ローカリゼーションメソッドを使用して、拡張機能のローカライズされた名前を検索しています。

00:07:24.000 -> 00:07:26.000
次の引数は、使用するアイコンパスです。

00:07:26.000 -> 00:07:33.000
これは、ユーザーがユーザーインターフェイスをズームすることを選択した場合、任意のサイズにスムーズにスケーリングするためのベクトル画像である必要があることに注意してください。

00:07:33.000 -> 00:07:40.000
しかし、このアイコンを使用するには、拡張機能に必要な他のすべてのアイコンとともに、それが私のプロジェクトの一部であることを確認する必要があります。

00:07:40.000 -> 00:07:44.000
「画像」フォルダのアイコンは、依然としてプロジェクトテンプレートのデフォルトです。

00:07:44.000 -> 00:07:50.000
では、これらをプロジェクトから削除しましょう。

00:07:50.000 -> 00:07:57.000
そして、私が以前に作成したいくつかのアイコンに置き換えてください...

00:07:57.000 -> 00:08:04.000
...Devtoolsタブを作成するときに使用しようとしている「logo.svg」を含む。

00:08:04.000 -> 00:08:10.000
これがここに来たので、devtoolsの背景スクリプトに戻ります。

00:08:10.000 -> 00:08:14.000
3番目の引数は、Webインスペクタのタブで使用されるHTMLです。

00:08:14.000 -> 00:08:26.000
そして、さっきの画像と同じように、使用する前にこのページを作成する必要があります。

00:08:26.000 -> 00:08:36.000
私がAPIに与えた名前と一致するように、この名前を「devtools_tab.html」と名付けます。

00:08:36.000 -> 00:08:55.000
ただし、devtoolsの背景ページとは異なり、このdevtoolsタブページは実際にユーザーに表示されるため、今回はJavaScriptとCSSファイルの両方を作成します。

00:08:55.000 -> 00:09:03.000
JavaScriptファイルに「devtools_tab.js」という名前を付けます...

00:09:03.000 -> 00:09:08.000
...そしてCSSファイル「devtools_tab.css」。

00:09:08.000 -> 00:09:15.000
この構造をすでに設定しているのは素晴らしいことですが、今のところ、物事が正しく機能していることを確認するために、通常の「Hello World」を追加するだけです。

00:09:15.000 -> 00:09:25.000
しかし、心配しないでください、私たちは少し後でこれを深く掘り下げます。なぜなら、まず、この拡張機能が一貫した外観を持っていることを確認するために、まだいくつかのアイコンを置き換える必要があります。

00:09:25.000 -> 00:09:31.000
まず、デフォルトの大きなアイコンを置き換える必要があります...

00:09:31.000 -> 00:09:35.000
...それを削除することで...

00:09:35.000 -> 00:09:41.000
...そして、私の大きなアイコンをその場所にドラッグします。

00:09:41.000 -> 00:09:50.000
ただし、この大きなアイコンはアプリの一部であるため、適切なターゲットに追加する必要があります。

00:09:50.000 -> 00:09:59.000
残りのアイコンはすべてアセットカタログ、特にAppIconセットの一部です。

00:09:59.000 -> 00:10:03.000
これらのアイコンはすでに用意したので、貼り付けます。

00:10:03.000 -> 00:10:09.000
それで、デフォルトのアイコンをすべて置き換えたと思うので、今から拡張機能を実行します。

00:10:09.000 -> 00:10:20.000
プロジェクトが初めて構築されるときに数秒かかる場合があることに注意してください。

00:10:20.000 -> 00:10:21.000
そして、それはそこにあります!

00:10:21.000 -> 00:10:27.000
このUIのほとんどはXcodeテンプレートからのものですが、デフォルトのアイコンではなく、アイコンが正しく表示されています。

00:10:27.000 -> 00:10:39.000
Safari拡張アプリを少なくとも1回起動したら、Safariがそれを拾うためにアプリがもう実行される必要がないので、それを閉じることができます。

00:10:39.000 -> 00:10:47.000
しかし、Safariでそれを見る前に、これはローカルに構築された未署名のアプリであるため、開発メニューで未署名の拡張機能を許可する必要があります。

00:10:47.000 -> 00:10:53.000
今、Safariの拡張機能の環境設定で、私はグラフを開くことができます。私はそれをオンにします。

00:10:53.000 -> 00:10:59.000
Safariタブを開いてapple.comを参照して、拡張機能を試すことができます。

00:10:59.000 -> 00:11:04.000
そして、すでに私のアイコンがツールバーにあることがわかります。

00:11:04.000 -> 00:11:06.000
そして、私の拡張タブがタブバーになりました。

00:11:06.000 -> 00:11:12.000
切り替えると、先ほど見たのと同じ許可プロンプトが表示されます。

00:11:12.000 -> 00:11:16.000
この許可プロンプトは、拡張機能で許可が必要な場合に自動的に表示されます。

00:11:16.000 -> 00:11:21.000
さっきと同じように、私は1日それを許可します。

00:11:21.000 -> 00:11:25.000
そして、先ほどdevtoolsタブページに追加した「Hello World」があります。

00:11:25.000 -> 00:11:30.000
これらは、Safari 16用のWeb Inspector拡張機能を作成する方法の基本です。

00:11:30.000 -> 00:11:31.000
要約しましょう。

00:11:31.000 -> 00:11:36.000
devtoolsの背景ページを宣言し、Xcodeプロジェクトに追加しました。

00:11:36.000 -> 00:11:41.000
そこから、Webインスペクタで新しいタブを作成して、カスタムツールを表示することができました。

00:11:41.000 -> 00:11:45.000
そして最後に、拡張機能に必要な許可を検討し始めました。

00:11:45.000 -> 00:11:54.000
Webインスペクタ拡張機能の場合、これは多くの場合、検査されたページのコードの評価に帰着し、通常はWebインスペクタ内に表示するためのデータを抽出します。

00:11:54.000 -> 00:11:58.000
Web拡張機能には、すでにコードを評価するさまざまな方法があります。

00:11:58.000 -> 00:12:05.000
Web Inspectorの拡張機能には、検査されたページ内のスクリプトを評価するための好ましい方法である別のAPIがあります。

00:12:05.000 -> 00:12:10.000
このAPIを見て、OpenGraph拡張機能に使用する方法を見てみましょう。

00:12:10.000 -> 00:12:17.000
検査されたウィンドウでJavaScriptを評価するためのこのdevtools拡張APIは、迅速な結果を得るための最良の方法です。

00:12:17.000 -> 00:12:22.000
拡張機能が実行されているWebインスペクタに関連付けられているページを自動的にターゲットにします。

00:12:22.000 -> 00:12:27.000
ユーザーは同時に複数のページを検査する可能性があることを覚えておいてください。

00:12:27.000 -> 00:12:32.000
このAPIには、適切な結果を得るのに役立つ便利なオプションもいくつかあります。

00:12:32.000 -> 00:12:39.000
デフォルトでは、このAPIに与えられた式は、検査されたページのメインフレームのコンテキストで評価されます。

00:12:39.000 -> 00:12:45.000
ただし、frameURLオプションを使用して、別のフレーム内で評価を指定できます。

00:12:45.000 -> 00:12:51.000
これは、拡張機能がページ内の多くの可能なサブフレームの1つからデータを抽出する必要がある場合に必要です。

00:12:51.000 -> 00:12:59.000
OpenGraph拡張機能では、メインフレームについて心配するだけで済みますが、Web Inspector拡張機能のスクリプトを評価する際には、これを念頭に置いておくことをお勧めします。

00:12:59.000 -> 00:13:05.000
拡張機能でこの機能を使用して、検査されたページからデータを取得して表示する方法を見てみましょう。

00:13:05.000 -> 00:13:18.000
先ほど追加したプレースホルダ「Hello World」を、実際にCSSとJavaScriptファイルをロードするHTMLに置き換えることから始めます。

00:13:18.000 -> 00:13:24.000
次に、基本的なCSSを追加して、devtoolsタブに素敵なスタイルを与えます。

00:13:24.000 -> 00:13:36.000
devtoolsタブがWebインスペクタの残りの部分に収まることを確認したいので、devtoolsタブをWebインスペクタの残りの部分の外観に一致させるルート「color-scheme」プロパティを宣言しました。

00:13:36.000 -> 00:13:44.000
私はシステムフォントファミリを使用し、フォントサイズを継承し、より重要なテキストの色を一致させています。

00:13:44.000 -> 00:13:53.000
機能に関しては、ページにopengraphのメタデータがない場合に備えて、テキストを追加することから始めます。

00:13:53.000 -> 00:14:00.000
Web拡張機能の他の場所と同じように、WebインスペクタでWeb拡張機能のローカライズされた文字列を使用できることに注意してください。

00:14:00.000 -> 00:14:07.000
しかし、そのためには、同じローカライズされた文字列識別子をローカライズされた文字列ファイルに追加する必要があります。

00:14:07.000 -> 00:14:18.000
次に、強力なdevtools inspectedWindow eval APIに提供するJavaScriptを作成します。これにより、検査されたページで評価できます。

00:14:18.000 -> 00:14:30.000
この場合、検査されたページのDOMで一般的なopengraphメタデータ、特にタイトル、説明を照会したいです。

00:14:30.000 -> 00:14:41.000
...と画像、および検査されたページのドキュメントの現在の準備状態は、それをすべてまとめて、戻り値を介してdevtoolsページに送り返します。

00:14:41.000 -> 00:14:54.000
それが完了したら、これらのプロパティのそれぞれに対応するHTML要素をつかみ、収集されたデータを表示するように設定できます。

00:14:54.000 -> 00:15:00.000
そして、文書がまだ準備ができていない場合は、短い遅延の後にもう一度試すことができます。

00:15:00.000 -> 00:15:15.000
また、検査されたページがナビゲートするたびにこれをすべてやり直したいので、Navigatedにdevtoolsネットワークのリスナーを追加します。

00:15:15.000 -> 00:15:26.000
これはすべて素晴らしく見えるので、私はそれをテストするためにもう一度構築します。

00:15:26.000 -> 00:15:35.000
これで、Webインスペクタを開くか、すでに開いているWebインスペクタでナビゲートするたびに、すべてのページのオープングラフのタイトル、説明、画像を見ることができます。

00:15:35.000 -> 00:15:41.000
そして、それは多くの新しくて強力なWebインスペクタ拡張APIのいくつかを使用する方法の簡単な例です。

00:15:41.000 -> 00:15:44.000
私のOpenGraph拡張機能はとてもうまくいっています。

00:15:44.000 -> 00:15:50.000
Web Inspector拡張機能のdevtoolsタブページが、検査されたページで評価できるようになりました。

00:15:50.000 -> 00:15:57.000
結果データを取り、それを処理して、すばやくアクセスできるようにユーザーフレンドリーな形式で表示することができます。

00:15:57.000 -> 00:16:02.000
では、Web Inspector拡張機能を作成する際に、優れたユーザーエクスペリエンスを実現する素晴らしい方法は何ですか?

00:16:02.000 -> 00:16:07.000
常にdevtoolsの背景ページからdevtoolsタブページを作成します。

00:16:07.000 -> 00:16:15.000
このようにして、ユーザーはこれらのタブがWebインスペクタのどこに表示されるかを確認でき、適切な許可プロンプトがインラインで表示されます。

00:16:15.000 -> 00:16:22.000
特定のホスト権限を要求する代わりに、activeTab権限を使用して、Web Inspector拡張機能を可能な限りターゲットにしておくようにしてください。

00:16:22.000 -> 00:16:30.000
また、CSS color-scheme プロパティまたは Web 拡張 devtools テーマ API を使用して、Web インスペクタの全体的なテーマと一致するようにしてください。

00:16:30.000 -> 00:16:39.000
そこで今日は、Web Inspector拡張機能を使用してまったく新しいデバッグツールを作成する方法を紹介し、そうしながら心に留めておくべきいくつかの素晴らしいベストプラクティスを取り上げました。

00:16:39.000 -> 00:16:48.000
詳しく見たい場合は、このセッションの関連リソースでOpenGraph Web Inspector拡張機能をダウンロードしてください。

00:16:48.000 -> 00:16:58.000
私たちはあなたの考えを聞くことにとても興味がありますので、フィードバックアシスタントを使用してバグや機能のリクエストを提出するか、Safari開発者フォーラムで私たちとチャットしてください。

00:16:58.000 -> 00:17:05.000
また、Web拡張機能の未来を形作るために、WebExtensionsコミュニティグループへの参加も検討してください。

00:17:05.000 -> 00:17:13.000
また、今年の新機能の詳細については、Safari Web Extensionsの新機能とオンラインでのドキュメントを確認してください。

00:17:13.000 -> 00:17:19.000
Webインスペクタ内でカスタムツールを作成する素晴らしい新しい機能について学ぶことを楽しんだことを本当に願っています。

00:17:19.000 -> 00:17:26.000
私たちは、あなたが作成する素晴らしいWebインスペクタ拡張機能を見るのが待ちきれず、あなたが可能なことの限界を押し広げるすべての方法を楽しみにしています。

00:17:26.000 -> 23:59:59.000
聞いてくれて本当にありがとう、そして私はあなたがWWDCの素晴らしい残りを持っていることを願っています。♪ ♪

