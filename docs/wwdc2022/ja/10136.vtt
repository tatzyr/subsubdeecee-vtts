WEBVTT

00:00:00.000 --> 00:00:03.000
♪インストゥルメンタルヒップホップ音楽♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:21.000
こんにちは、私はドミニクです。SwiftUIで有益で楽しいチャートを作成するためのAppleの新しいフレームワークであるSwift Chartsを紹介できることを嬉しく思います。

00:00:21.000 --> 00:00:28.000
データは私たちを取り囲み、世界を理解し、より良い決定を下すための前例のないリソースを提供します。

00:00:28.000 --> 00:00:32.000
しかし、データだけではほとんど役に立たない。

00:00:32.000 --> 00:00:35.000
データを有用なものにするには、それを理解する必要があります。

00:00:35.000 --> 00:00:45.000
適切に設計され、アクセス可能なデータの視覚化は、複雑なデータを明確に伝え、データを理解と知識に変えることができます。

00:00:45.000 --> 00:00:51.000
アップルでは、ビジュアライゼーションのベストプラクティスの研究に何年も費やしました。

00:00:51.000 --> 00:01:12.000
チャートは、ある時間範囲の株価の傾向や変動、最後のトレーニング中の心拍数、夕方に日が涼しくなるときなどのデータに関する追加の有用なコンテキストを示すときに最もよく機能することを学びました。

00:01:12.000 --> 00:01:18.000
これらは、チャートを使用するすべてのプラットフォームで多くの例のほんの一部です。

00:01:18.000 --> 00:01:27.000
今日は、アプリで有益で楽しいチャートを作成できるように、新しいフレームワークを紹介することに興奮しています。

00:01:27.000 --> 00:01:31.000
スウィフトチャートに挨拶してください。

00:01:31.000 --> 00:01:37.000
Swift Chartsは、Appleがデザインしたチャートを作成するための柔軟なフレームワークです。

00:01:37.000 --> 00:01:45.000
SwiftUIと同じ宣言型構文を使用しているので、Swift Chartsの言語はすでに知っています。

00:01:45.000 --> 00:01:53.000
だから今日は、Swift Chartsで有益で、アクセスしやすく、楽しい視覚化を作りましょう。

00:01:53.000 --> 00:02:00.000
チームでは、ポップアップパンケーキフードトラックがアプリで売上を追跡するのを手伝っています。

00:02:00.000 --> 00:02:16.000
トラックは、カチャパ、インヘラ、クレープ、ジャンビン、ドーサ、アメリカンパンケーキなど、国際的に様々な甘くておいしいパンケーキを提供しています。

00:02:16.000 --> 00:02:23.000
フードトラックは、過去30日間にこれらのスタイルで4500以上のパンケーキを提供しました。

00:02:23.000 --> 00:02:32.000
カチャパは最も人気があり、アプリはすでにタイトルに最も重要な情報を示しています。

00:02:32.000 --> 00:02:38.000
6つのパンケーキの詳細な内訳を示すチャートを追加しましょう。

00:02:38.000 --> 00:02:45.000
Swift Chartsでこの視覚化を行うには、SwiftUIと同じ宣言型構文を使用できます。

00:02:45.000 --> 00:02:50.000
スウィフトチャートでは、コンポジションでチャートを作成します。

00:02:50.000 --> 00:03:00.000
棒グラフの主な構成要素は、データ内の各項目の視覚的要素であるバーです。

00:03:00.000 --> 00:03:05.000
スウィフトチャートは、これらの視覚的要素を「マーク」と呼んでいます。

00:03:05.000 --> 00:03:08.000
Xcodeに飛び込んでこのチャートを作りましょう。

00:03:08.000 --> 00:03:11.000
チャートを追加することから始めます。

00:03:11.000 --> 00:03:16.000
バーを作成するには、チャート内にバーマークを追加します。

00:03:16.000 --> 00:03:23.000
カチャパの数のバーを表示するには、名前と売上を設定する必要があります。

00:03:23.000 --> 00:03:33.000
パンケーキの名前の値から派生するバーのx位置を設定しました。この場合は「カチャパ」です。

00:03:33.000 --> 00:03:42.000
.Value factoryメソッドの最初の引数は値の説明であり、2番目の引数は値自体です。

00:03:42.000 --> 00:03:45.000
そして今、私たちはプレビューで単一のバーを取得します。

00:03:45.000 --> 00:03:56.000
Y属性で記述される各バーの高さは、販売されたカチャパの数（916）で設定する必要があります。

00:03:56.000 --> 00:04:03.000
バーの位置や高さを直接設定していないことを示すために、.valueを使用します。

00:04:03.000 --> 00:04:17.000
スウィフトチャートは、バーだけでなく、バーの長さの意味を示すx軸とy軸のバーのラベルも自動的に作成します。

00:04:17.000 --> 00:04:24.000
トラックが850を販売したインジェラの2番目のバーを追加しましょう。

00:04:24.000 --> 00:04:30.000
今、個々のマークを作成し、それらがアプリに表示されるのを見るのはクールです。

00:04:30.000 --> 00:04:35.000
ただし、通常、構造体の配列などのコレクションによって駆動されるチャートを作成したいと考えています。

00:04:35.000 --> 00:04:46.000
パンケーキの販売に構造体を追加することから始めます。

00:04:46.000 --> 00:04:55.000
それは文字列である名前と、トラックが売ったパンケーキの数を持っています。

00:04:55.000 --> 00:05:04.000
私たちはそれを繰り返したいので、それを識別可能にします...

00:05:04.000 --> 00:05:12.000
...そして、名前を返すID計算されたプロパティを定義します。

00:05:12.000 --> 00:05:17.000
これで、パンケーキの配列としてデータセットを作成できます。

00:05:17.000 --> 00:05:22.000
外部データソースからこれをロードできますが、ここではコードで定義します。

00:05:22.000 --> 00:05:27.000
カチャパとインジェラのほかに、クレープも加えます。

00:05:27.000 --> 00:05:30.000
ForEachで駆動する棒グラフデータを作成できます。

00:05:30.000 --> 00:05:37.000
まず、2番目のバーを外します。

00:05:37.000 --> 00:05:45.000
そして、私たちが今する必要があるのは、ForEachでBarMarkを繰り返すことだけです。

00:05:45.000 --> 00:05:54.000
ループ内の変数の名前として「要素」を選択します。

00:05:54.000 --> 00:06:02.000
その後、xにelement.nameを使用できます...

00:06:02.000 --> 00:06:07.000
...そしてyのelement.sales。

00:06:07.000 --> 00:06:19.000
ForEachがチャートの唯一のコンテンツである場合、データをチャート初期化子に直接入力することもできます。

00:06:19.000 --> 00:06:28.000
ジャンビン、ドーサ、アメリカンパンケーキの残りの3つのエントリを追加できるようになりました。

00:06:28.000 --> 00:06:33.000
配列にエントリを追加すると、チャートに新しいバーマークが追加されます。

00:06:33.000 --> 00:06:38.000
最後に、ラベルが互いに近づきつつあることがわかります。

00:06:38.000 --> 00:06:45.000
Xとyを交換することで、チャートを転置し、各バーのラベルにより多くのスペースを与えます。

00:06:45.000 --> 00:06:52.000
Swift Chartsフレームワークは、チャートを美しくするために適切な軸スタイルを自動的に選択します。

00:06:52.000 --> 00:06:56.000
そして、私たちはSwift Chartsで最初のデータ視覚化を行いました。

00:06:56.000 --> 00:07:18.000
また、Xcodeの新しいバリアント機能を使用すると、このチャートはダークモードで美しく見え、さまざまなフォントサイズ、デバイスサイズ、向きに適応し、アクセシビリティをサポートしていることがわかります。

00:07:18.000 --> 00:07:24.000
視覚的な表現でデータにアクセスするには、見ることができる必要があります。

00:07:24.000 --> 00:07:33.000
スウィフトチャートは、誰もが人気のあるパンケーキの詳細を探索できるように、ビジュアライゼーションのデータをVoiceOverに公開します。

00:07:33.000 --> 00:07:39.000
VoiceOverでチャートをナビゲートすると、販売されたパンケーキの名前と数が聞こえます。

00:07:39.000 --> 00:07:43.000
ボイスオーバー:カチャパ、916。インジェラ、850。クレープ、802。

00:07:43.000 --> 00:07:51.000
Jian Ping、753。ドーサ、654。アメリカ人、618。

00:07:51.000 --> 00:07:58.000
ドミニク：そしてもちろん、このチャートは、ソニフィケーションを含め、2021年にAppleが発表したオーディオグラフ機能をサポートしています。

00:07:58.000 --> 00:08:01.000
VoiceOver: チャートについて説明してください。チャートの詳細。

00:08:01.000 --> 00:08:03.000
オーディオグラフを再生します。

00:08:03.000 --> 00:08:11.000
完了。

00:08:11.000 --> 00:08:17.000
ドミニク：スウィフトチャートを使用して、有益でアクセスしやすいチャートをフードトラックアプリに追加しました。

00:08:17.000 --> 00:08:23.000
チャートは、トラックが各スタイルで販売したパンケーキの数を示しています。

00:08:23.000 --> 00:08:31.000
各スタイルのパンケーキの要約に加えて、フードトラックには1日あたりの売上データもあります。

00:08:31.000 --> 00:08:36.000
トラックはクパチーノとサンフランシスコに駐車できます。

00:08:36.000 --> 00:08:40.000
私たちは、フードトラックが週の異なる日に駐車する場所を知るのを助けたいです。

00:08:40.000 --> 00:08:48.000
この質問に答えるために、データを2つの都市の時系列として視覚化しましょう。

00:08:48.000 --> 00:08:55.000
異なるデザインを探索するのがどれほど簡単かを見るために、チャートの3つの反復を行います。

00:08:55.000 --> 00:09:00.000
クパチーノの棒グラフを作ることから始めます。

00:09:00.000 --> 00:09:06.000
次に、サンフランシスコのデータを追加し、ピッカーを追加します。

00:09:06.000 --> 00:09:11.000
そして最後に、データを1つのマルチシリーズ折れ線グラフにまとめます。

00:09:11.000 --> 00:09:18.000
週の1日に販売されたパンケーキの平均数を示す棒グラフから始めましょう。

00:09:18.000 --> 00:09:27.000
販売データには、平日が日付として保存され、トラックが整数として販売されたパンケーキの数が格納されています。

00:09:27.000 --> 00:09:33.000
クパチーノのデータは、変数cupertinoDataにあります。

00:09:33.000 --> 00:09:38.000
以前と同様に、BarMarkでチャートを作り始めます。

00:09:38.000 --> 00:09:45.000
日付の日から派生するバーのx位置を設定しました...

00:09:45.000 --> 00:09:52.000
...そして、販売から得られる高さ。

00:09:52.000 --> 00:09:59.000
これにより、クパチーノの1日あたりの販売データを示すチャートの最初の反復が得られます。

00:09:59.000 --> 00:10:04.000
2回目の反復では、サンフランシスコのデータを追加しましょう。

00:10:04.000 --> 00:10:11.000
このチャートを使用して、パンケーキトラックが平日に駐車する場所を決めるのを手伝いたいです。

00:10:11.000 --> 00:10:15.000
サンフランシスコの販売データはsfData変数にあります。

00:10:15.000 --> 00:10:20.000
2つの都市を切り替えて、各都市の棒グラフを見たい。

00:10:20.000 --> 00:10:26.000
状態変数、都市を追加することから始めます。

00:10:26.000 --> 00:10:35.000
そして、都市のSwiftUIピッカーをビューに追加します。

00:10:35.000 --> 00:10:48.000
都市変数を介して2つの都市の売上サマリーを切り替えるには、データ変数のスイッチステートメントを追加します。

00:10:48.000 --> 00:10:59.000
そして、私たちが今しなければならないのは、クパチーノのデータを、クパチーノとサンフランシスコの2つを切り替えるものに置き換えることだけです。

00:10:59.000 --> 00:11:03.000
トグルを切り替えると、チャートは2つの都市を切り替えます。

00:11:03.000 --> 00:11:21.000
Swift ChartsはSwiftUIアニメーションで動作するため、トランジションをeaseInOutでアニメーション化するように指定すると、2つの都市を切り替えるとバーがアニメーション化され、一度に1つの場所しか表示されません。

00:11:21.000 --> 00:11:25.000
これにより、私たちのアプリは正しいルックアンドフィールが得られます。

00:11:25.000 --> 00:11:31.000
最後の反復として、両方のシリーズを折れ線グラフで表示します。

00:11:31.000 --> 00:11:36.000
この折れ線グラフを作成するには、以前からクパチーノの棒グラフから始めます。

00:11:36.000 --> 00:11:41.000
クパチーノとサンフランシスコのデータは一連のシリーズです。

00:11:41.000 --> 00:11:46.000
シリーズ構造には、都市と販売データがあります。

00:11:46.000 --> 00:11:53.000
両方のシリーズを見せる前に、クパチーノのデータに焦点を当てましょう。

00:11:53.000 --> 00:11:57.000
チャートでは、系列データをループできます。

00:11:57.000 --> 00:12:03.000
チャートイニシャライザはForEachのように機能することを忘れないでください。

00:12:03.000 --> 00:12:12.000
その後、クパチーノの特定のデータをシリーズの販売データに置き換えることができます。

00:12:12.000 --> 00:12:19.000
2つの都市のデータを区別するために、バーの色を都市から導き出したい。

00:12:19.000 --> 00:12:27.000
このために、シリーズの都市から派生するフォアグラウンドスタイルを設定します。

00:12:27.000 --> 00:12:33.000
色が表す都市を示すために、スウィフトチャートはチャートの下に凡例を作成します。

00:12:33.000 --> 00:12:37.000
次に、2番目の場所のデータを追加します。

00:12:37.000 --> 00:12:47.000
プレビューでわかるように、スウィフトチャートは自動的にサンフランシスコの色を選択し、チャートに両方の都市のバーが表示されます。

00:12:47.000 --> 00:12:55.000
チャートは特定のコンテキストのデータを表示し、データや質問が変化するにつれてビジュアライゼーションを変更する必要があるかもしれません。

00:12:55.000 --> 00:13:02.000
スウィフトチャートを使用すると、チャートをすばやく変更して、さまざまなデザインを簡単に探索できます。

00:13:02.000 --> 00:13:10.000
積み重ねられた棒グラフは、1日あたりの総平均売上高を示すのに最適です。しかし、2つの都市を比較したい場合はどうなりますか?

00:13:10.000 --> 00:13:14.000
点表や折れ線グラフの方が良いかもしれません。

00:13:14.000 --> 00:13:25.000
マークタイプをBarMarkからPointMarkに変更してポイントとして販売されたパンケーキを表示したり、ラインマークを変更してデータを折れ線グラフとして表示したりします。

00:13:25.000 --> 00:13:33.000
折れ線グラフは、各曜日の2つの都市を比較できるため、販売データに適しています。

00:13:33.000 --> 00:13:35.000
チャートは複数のマークを組み合わせることができます。

00:13:35.000 --> 00:13:44.000
たとえば、ポイントマークを追加できます。

00:13:44.000 --> 00:13:56.000
シリーズを色なしで微分可能にするために、シンボルを都市から派生するように設定します。

00:13:56.000 --> 00:14:01.000
今、各ポイントは、その色とシンボルで都市を示しています。

00:14:01.000 --> 00:14:09.000
線にポイントを表示するのが一般的であるため、Swift Chartsには、シンボル修飾子をLineMarkに適用する省略形があります。

00:14:09.000 --> 00:14:13.000
ポイントのスタイルは線に適応します。

00:14:13.000 --> 00:14:15.000
このチャートは素晴らしいです。

00:14:15.000 --> 00:14:19.000
週を通しての販売動向を簡単に比較できます。

00:14:19.000 --> 00:14:24.000
日曜日のサンフランシスコの売り上げが特に高いことがわかります。

00:14:24.000 --> 00:14:31.000
スウィフトチャートは、わずか数分で多くのデザインを反復することを非常に簡単にしました。

00:14:31.000 --> 00:14:43.000
最後に、Swift Chartsが迅速に簡単に反復できると同時に、チャートをアプリのユニークなスタイルにシームレスに統合するのに十分な柔軟性をどのように行うかを見てみましょう。

00:14:43.000 --> 00:14:50.000
スウィフトチャートでは、マークのプロパティを持つマークの構成によってチャートを構築します。

00:14:50.000 --> 00:14:57.000
パンケーキアプリでは、3つの異なるマークと4つのマークプロパティを持つチャートを作成しました。

00:14:57.000 --> 00:15:05.000
たとえば、xとyのプロパティを持つバーマークとして簡単な棒グラフを作成しました。

00:15:05.000 --> 00:15:18.000
また、ポイントを持つチャートや、xとyのプロパティを持つラインマークを使用した折れ線グラフなど、デザインをすばやく探索するためにマークを変更しました。

00:15:18.000 --> 00:15:27.000
また、フォアグラウンドスタイルなどのプロパティを追加して、折れ線グラフに複数の系列を表示できることもわかりました。

00:15:27.000 --> 00:15:30.000
そして、チャートは1つのマークを持つ必要はありません。

00:15:30.000 --> 00:15:40.000
点と線を組み合わせて、2つのマークプロパティで同じ値を示しました。

00:15:40.000 --> 00:15:46.000
スウィフトチャートは、今日使用したよりもさらに多くのマークとマークプロパティをサポートしています。

00:15:46.000 --> 00:15:51.000
また、拡張可能で、カスタムマークを追加できます。

00:15:51.000 --> 00:16:02.000
マークとマークのプロパティは、スウィフトチャートが少数の宣言的な構成要素で幅広いチャートデザインを表現することを可能にするものです。

00:16:02.000 --> 00:16:09.000
これらのビルディングブロックを組み合わせて、アプリ用の優れたデータビジュアライゼーションを作成する方法はたくさんあります。

00:16:09.000 --> 00:16:16.000
SwiftUIですでにできることと一緒に、可能性は本当に無限大です。

00:16:16.000 --> 00:16:26.000
そして、今日お見せしたように、ダークモード、さまざまなデバイスの画面サイズ、ダイナミックタイプ、VoiceOver、オーディオグラフを無料でサポートできます。

00:16:26.000 --> 00:16:31.000
さらに、Swift Chartsはハイコントラストモードをサポートしています。

00:16:31.000 --> 00:16:37.000
そして最後に、Swift Chartsはロケール間で機能し、マルチプラットフォームです。

00:16:37.000 --> 00:16:41.000
同じコードのチャートは、すべてのAppleプラットフォームで機能します。

00:16:41.000 --> 00:16:47.000
また、同じカスタマイズがどこでも機能するので、各プラットフォームに合わせてチャートを調整できます。

00:16:47.000 --> 00:16:57.000
今日は、Swift ChartsがSwiftUIの強力な構成構文を使用して、より少ないコードでより多くのチャートを作成できる方法を紹介しました。

00:16:57.000 --> 00:17:05.000
Swift Chartsは、豊富なカスタマイズオプションも提供しているため、アプリケーションに合わせてチャートのスタイルを設定できます。

00:17:05.000 --> 00:17:13.000
そして、新しい領域をチャート化し、チャートを作成する方法がわかったので、ドキュメントとバーを上げるフォローアップトークでそれをカスタマイズする方法を学ぶことができます。

00:17:13.000 --> 23:59:59.000
♪

