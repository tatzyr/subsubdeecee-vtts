WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:12.000
ブレイディ・エイドソン:こんにちは。私の名前はブレイディ・エイドソンです。

00:00:12.000 --> 00:00:15.000
私はWebKitアーキテクチャチームのエンジニアです。

00:00:15.000 --> 00:00:19.000
Safariでウェブプッシュを紹介できることを嬉しく思います。

00:00:19.000 --> 00:00:24.000
Webプッシュを使用すると、Webアプリケーションのユーザーにリモートで通知を送信できます。

00:00:24.000 --> 00:00:30.000
ここでは、画面の右上にwebkit.orgからの通知が表示されます。

00:00:30.000 --> 00:00:34.000
通知をクリックすると、WebKitのブログ投稿が新しいウィンドウで開きます。

00:00:34.000 --> 00:00:43.000
これがどのように機能するかについて他の詳細に入る前に、私はあなたの多くが持っていることを知っているいくつかの質問に事前に答えたいと思います。

00:00:43.000 --> 00:00:47.000
ウェブプッシュは、macOS Venturaから始まるMac Safariでサポートされています。

00:00:47.000 --> 00:00:53.000
そして、ウェブプッシュは来年iOSとiPadOSに登場します。

00:00:53.000 --> 00:00:59.000
AppleのSafariプッシュ通知は、かなり長い間、Mac Safariユーザーにリーチするためのオプションでした。

00:00:59.000 --> 00:01:08.000
引き続き機能しますが、今日はWebプッシュのサポートを追加したことを発表できることを嬉しく思います。これは本当にWebプッシュです!

00:01:08.000 --> 00:01:13.000
他のブラウザで実装されているのと同じ、さまざまなウェブ標準の組み合わせ。

00:01:13.000 --> 00:01:25.000
これらの標準については後で詳しく説明しますが...最も重要なことは、アプリケーションをWeb標準にコーディングした場合、Safariで動作するように変更する必要がないことです。

00:01:25.000 --> 00:01:30.000
もちろん、ブラウザの検出でSafariを除外すると、その前にいくつかの作業があります。

00:01:30.000 --> 00:01:37.000
今、ブラウザの検出から機能の検出に切り替えるのに最適な時期であり、これは常にベストプラクティスでした。

00:01:37.000 --> 00:01:48.000
私たちは、すべてのMacとiOSデバイスでネイティブプッシュを強化するのと同じAppleプッシュ通知サービスを使用していますが、Safariユーザーに到達するためにApple Developerアカウントは必要ありません。

00:01:48.000 --> 00:01:57.000
Webプッシュに新しいエンドポイントURLを使用しています。これは、意図せずにSafariを除外するために行っている可能性のある別のことをもたらします。

00:01:57.000 --> 00:02:05.000
サーバー上のプッシュエンドポイントを厳密に管理する場合は、push.apple.comの任意のサブドメインからのURLを許可するようにしてください。

00:02:05.000 --> 00:02:10.000
これらの重要な質問への回答を超えて、より詳細に入りましょう。

00:02:10.000 --> 00:02:15.000
まず、SafariのWebプッシュ体験をユーザーの観点から見ていきます。

00:02:15.000 --> 00:02:23.000
次に、許可を求めることから、通知センターでエントリのクリックを処理することまで、Webプッシュフロー全体について説明します。

00:02:23.000 --> 00:02:29.000
最後に、既存のウェブアプリにウェブプッシュを追加するために必要なものを見ていきます。

00:02:29.000 --> 00:02:32.000
しかし、まず、Mac Safariのユーザーエクスペリエンス。

00:02:32.000 --> 00:02:36.000
そして、私はそれをデモでカバーするより良い方法を考えることはできません。

00:02:36.000 --> 00:02:39.000
これがmacOS VenturaのSafariです。

00:02:39.000 --> 00:02:43.000
このブラウザタブでwebkit.orgを開いています。

00:02:43.000 --> 00:02:49.000
WebKitオープンソースプロジェクトを最新の状態に保つ必要があり、Web Pushはそれを行うための素晴らしい方法です。

00:02:49.000 --> 00:02:56.000
Webkit.orgは、ユーザーがユーザーのジェスチャーで尋ねることなく、プッシュする許可を要求することはできません。

00:02:56.000 --> 00:03:01.000
だから、ここでこのベル型のボタンをクリックして、通知を購読します。

00:03:01.000 --> 00:03:07.000
ここに表示されているのは、システム通知プロンプトです。他のアプリケーションで表示されるものと同じです。

00:03:07.000 --> 00:03:11.000
この場合、それはwebkit.orgの代理です。

00:03:11.000 --> 00:03:15.000
「許可する」をクリックすると、準備完了です。

00:03:15.000 --> 00:03:23.000
Webkit.orgは、新しいブログ投稿とソースコードリポジトリへの新しいコミットについて通知を受けるオプションを提供しています。

00:03:23.000 --> 00:03:31.000
すべてのコミットについて通知を受けることは、重要な仕事から気をそらすことを知っていますが、私は絶対に新しいブログ投稿について通知を受けたいです。

00:03:31.000 --> 00:03:33.000
だから、今そのボックスにチェックを入れます。

00:03:33.000 --> 00:03:39.000
偶然にも、誰かがWeb Pushに関するWebKitのブログ記事を公開したに違いない。

00:03:39.000 --> 00:03:44.000
この通知は他のものと同じように見え、webkit.orgに起因しています。

00:03:44.000 --> 00:03:50.000
クリックしてアクティベートすると、Safariで開くブログ記事があります。

00:03:50.000 --> 00:03:56.000
ユーザーがウェブサイトに許可を与えると、その許可を管理します。

00:03:56.000 --> 00:04:07.000
macOSユーザーとして、私はシステム設定内で通知設定を管理することに慣れており、そこでwebkit.orgの通知を設定できます。

00:04:07.000 --> 00:04:12.000
他のアプリやサービスで見つけるのと同じリッチ構成です。

00:04:12.000 --> 00:04:18.000
Safariユーザーとして、私はSafariの設定内からウェブサイトの設定を管理することに慣れています。

00:04:18.000 --> 00:04:24.000
また、webkit.orgの許可のオン/オフを切り替えることもできます。

00:04:24.000 --> 00:04:28.000
そして、それがMac SafariのユーザーにとってWeb Pushの仕組みです。

00:04:28.000 --> 00:04:32.000
先に進む前に、そのデモで取り上げたいくつかのことを繰り返したいと思います。

00:04:32.000 --> 00:04:38.000
まず、ユーザーが要求していないサブスクリプションリクエストによってスパムされることを望んでいません。

00:04:38.000 --> 00:04:44.000
したがって、ウェブサイトは、マウスクリックまたはキーストロークに応じてのみプッシュサブスクリプションを要求することができます。

00:04:44.000 --> 00:04:50.000
ウェブサイトがユーザーに通知を表示する権限を持つと、ユーザーはその権限を制御します。

00:04:50.000 --> 00:04:54.000
Safariの環境設定またはシステム設定で管理することを選択できます。

00:04:54.000 --> 00:04:58.000
そして、彼らが両方でそれを管理した場合、設定は同期したままになります。

00:04:58.000 --> 00:05:09.000
最後に、さまざまな種類のイベントの通知を提供する場合は、他のアプリと同様に、Webアプリ内の通知タイプのきめ細かなコントロールを提供することがベストプラクティスです。

00:05:09.000 --> 00:05:14.000
ウェブプッシュの動作を見たので、各ステップで何が起こっているのかを掘り下げてみましょう。

00:05:14.000 --> 00:05:17.000
すでにこれに精通している人もいます。

00:05:17.000 --> 00:05:25.000
しかし、Web Pushを初めて利用する人のために、私はステップバイステップで、途中で関連する標準とドキュメントを参照します。

00:05:25.000 --> 00:05:30.000
最初に起こることは、ユーザーがブラウザのタブであなたのウェブサイトを訪問することです。

00:05:30.000 --> 00:05:33.000
Safariで開いているwebkit.orgです。

00:05:33.000 --> 00:05:37.000
タブで開いているので、サービスワーカーをインストールできます。

00:05:37.000 --> 00:05:45.000
サービスワーカーは、現在開いているブラウザタブとは別に、ドメイン全体に代わって動作するJavaScriptの単位です。

00:05:45.000 --> 00:05:52.000
サービスワーカースクリプトがインストールされると、ウェブアプリはプッシュサブスクリプションをリクエストする資格があります。

00:05:52.000 --> 00:05:56.000
すでに述べたように、この要求はユーザーのジェスチャーに関連付けられている必要があります。

00:05:56.000 --> 00:06:04.000
Webkit.orgは、ユーザーのジェスチャー要件を満たすこのベル型のボタンをクリックするときに許可を要求します。

00:06:04.000 --> 00:06:09.000
サイトがプッシュサブスクリプションを要求すると、ユーザーにこのシステムプロンプトが表示されます。

00:06:09.000 --> 00:06:15.000
ここでは、あなたのウェブサイトにこの強力な能力を付与するための最後の呼び出しを行うことができます。

00:06:15.000 --> 00:06:18.000
ユーザーがリクエストを拒否する可能性があります。

00:06:18.000 --> 00:06:21.000
あなたのJavaScriptはそれを処理する準備ができているはずです。

00:06:21.000 --> 00:06:26.000
しかし、ユーザーが許可を与えると仮定すると、JavaScriptはPushSubscriptionオブジェクトを取り戻します。

00:06:26.000 --> 00:06:32.000
これには、サーバーがこのブラウザでこのユーザーにプッシュメッセージを送信するために必要なすべてが含まれます。

00:06:32.000 --> 00:06:36.000
使用する正確なURLエンドポイントなどの情報。

00:06:36.000 --> 00:06:42.000
このPushSubscriptionペイロードを、ウェブアプリに最適な方法でサーバーに送り返します。

00:06:42.000 --> 00:06:49.000
多くの一般的なサーバーパッケージには、サブスクリプションを管理するためのWebプッシュサポートがあります。または、独自のサブスクリプションをロールできます。

00:06:49.000 --> 00:06:56.000
サーバーが知っているURLエンドポイントにプッシュメッセージを実際に送信する方法とタイミングにも同じことが関係します。

00:06:56.000 --> 00:07:00.000
いつそうすべきかは言えません。それはあなたとあなたのウェブサイト次第です。

00:07:00.000 --> 00:07:05.000
しかし、あなたがそのプッシュメッセージを送ることに決めたら、私は次に何が起こるかを手伝うことができます。

00:07:05.000 --> 00:07:09.000
プッシュにはインストールされたサービスワーカーが必要であることを覚えていますか?

00:07:09.000 --> 00:07:18.000
サーバーがプッシュメッセージを送信し、Safariがそれを受信すると、Safariはサービスワーカーをスリープ解除し、JavaScriptプッシュイベントを送信します。

00:07:18.000 --> 00:07:25.000
通知センターでユーザーに通知を表示することは、プッシュイベントを処理する際の要件です。

00:07:25.000 --> 00:07:32.000
プッシュイベントを受信し、通知を表示すると、Webサイトが現在ブラウザタブで開いている場合に発生します。

00:07:32.000 --> 00:07:36.000
また、ウェブサイトが現在ブラウザのタブで開いていない場合にも発生します。

00:07:36.000 --> 00:07:43.000
macOS VenturaのSafariの場合、これはSafariが現在実行されていない場合でも発生します。

00:07:43.000 --> 00:07:53.000
最後のステップ: ユーザーがその通知をクリックすると、Notificationclickイベントがサービスワーカーに送信され、適切に応答できます。

00:07:53.000 --> 00:07:59.000
たとえば、その通知に関連付けられたURLに新しいウィンドウを開きます。

00:07:59.000 --> 00:08:09.000
私たちのベルトの下でウェブプッシュフローを理解して、実際に既存のウェブアプリにウェブプッシュサポートを追加することで、さらに詳細に入る時が来ました。

00:08:09.000 --> 00:08:17.000
webkit.orgに加えて、Browser PetsはSafariとWebKitチームにとって最もミッションクリティカルな内部ツールです。

00:08:17.000 --> 00:08:27.000
部門の全員がSafariでお気に入りのWebKittensとPupsを最新の状態に保つことは、常にBrowser Petsのミッションステートメントであり、Web Pushはそれをこれまで以上に簡単にしました。

00:08:27.000 --> 00:08:36.000
内部のBrowserPetsドメインには、ページの読み込みを高速化し、複数のタブ間で同期するためのServiceWorkerスクリプトがすでに登録されています。

00:08:36.000 --> 00:08:40.000
高いレベルでは、ServiceWorkerスクリプトはこんな感じです。

00:08:40.000 --> 00:08:51.000
エンジニアがタブのブラウザペットページにアクセスすると、このJavaScriptの抜粋は、サービスワーカースクリプトがすでに登録されているかどうかを判断するか、必要に応じて登録します。

00:08:51.000 --> 00:08:57.000
ベストプラクティスとして以前に述べた、ここで機能検出を練習していることに注意してください。

00:08:57.000 --> 00:09:03.000
サービスワーカーの前提条件が処理されたので、プッシュを購読する準備が整いました。

00:09:03.000 --> 00:09:10.000
明示的なユーザージェスチャーなしでは、プッシュサブスクリプションをリクエストできないことを覚えておいてください。

00:09:10.000 --> 00:09:16.000
ボタンのオンクリックハンドラに応答してこのスクリプトを実行することは、その要件を満たす多くの方法の1つです。

00:09:16.000 --> 00:09:22.000
ユーザーがそのボタンをクリックすると、プッシュサブスクリプションをリクエストするコードが表示されます。

00:09:22.000 --> 00:09:24.000
これらの各点について詳しく説明します。

00:09:24.000 --> 00:09:29.000
まず、プッシュサブスクリプションのリクエストを設定する必要があります。

00:09:29.000 --> 00:09:36.000
そのために重要な部分は、私たちのサーバーがAppleのプッシュサーバーに自分自身を識別するために使用する公開鍵です。

00:09:36.000 --> 00:09:41.000
ここでは、他のブラウザと同じように、VAPIDと呼ばれる標準技術を使用しています。

00:09:41.000 --> 00:09:51.000
ここではVAPIDの複雑な詳細については説明しませんが、サーバーのセットアップに最適なソリューションに役立つリソースがウェブ上にあります。

00:09:51.000 --> 00:09:56.000
VAPIDキーセットで、サブスクリプションリクエストを設定する準備が整いました。

00:09:56.000 --> 00:10:03.000
プッシュを常にユーザーに表示することを約束することを明示的に述べていることに注意してください。

00:10:03.000 --> 00:10:13.000
JavaScript Push APIの標準は、オプションでプッシュに応答してサイレントJavaScriptランタイムに対応していますが、ほとんどのブラウザはそれをサポートしていません。

00:10:13.000 --> 00:10:16.000
Safariはそれをサポートしていません。

00:10:16.000 --> 00:10:20.000
そして、ほとんどのウェブサイトと同様に、ブラウザペットはそれを必要としません。

00:10:20.000 --> 00:10:23.000
次に、プッシュする許可を要求します。

00:10:23.000 --> 00:10:30.000
このJavaScriptの行は、ユーザーが承認または拒否するための許可プロンプトを表示します。

00:10:30.000 --> 00:10:40.000
ユーザーがすべてのSafariチームメンバーがブラウザペットに対して行う許可を付与すると仮定すると、ブラウザでこのユーザーに到達する方法の詳細が記載されたPushSubscriptionオブジェクトが提供されます。

00:10:40.000 --> 00:10:47.000
URLエンドポイントや、トランジット用のプッシュメッセージを暗号化するために使用されるキーなど。

00:10:47.000 --> 00:10:51.000
最後に、これらすべての詳細をサーバーに送信する必要があります。

00:10:51.000 --> 00:10:57.000
前述のように、この詳細は正確なアプリケーションによって異なります。

00:10:57.000 --> 00:11:04.000
当社のBrowserPetsサーバーはWordPressを使用しており、すでに標準のWebプッシュをサポートするプラグインがいくつかあります。

00:11:04.000 --> 00:11:12.000
同じことがバックエンドにも当てはまる可能性が高く、ほぼすべてのセットアップに適したソリューションを見つけるのに役立つリソースがウェブ上にあります。

00:11:12.000 --> 00:11:16.000
次に、サービスワーカーのJavaScriptコードに戻る必要があります。

00:11:16.000 --> 00:11:20.000
プッシュイベントから始めて、いくつかの新しいイベントを処理する必要があります。

00:11:20.000 --> 00:11:28.000
プッシュメッセージがブラウザペットサーバーからこのブラウザに送信されると、このサービスワーカーにプッシュイベントが送信されます。

00:11:28.000 --> 00:11:35.000
そのイベントには、サーバーから送信されたデータにアクセスする複数の方法を持つPushMessageDataオブジェクトが含まれています。

00:11:35.000 --> 00:11:39.000
ここではJSONアクセサーを使用します。

00:11:39.000 --> 00:11:45.000
私たちがプッシュを購読したとき、私たちのJavaScriptは彼らが常にユーザーに表示されることを約束したことを覚えていますか?

00:11:45.000 --> 00:11:50.000
つまり、各プッシュに応答して、常にプラットフォームのネイティブ通知を表示する必要があります。

00:11:50.000 --> 00:11:55.000
プッシュイベントハンドラでできるだけ早くこれを行うのが最善です。

00:11:55.000 --> 00:12:02.000
URLを使用したアクションの設定など、通知を設定するためにJSONブロブから必要なものをすべて引き出しています。

00:12:02.000 --> 00:12:05.000
それはすぐに役に立つでしょう。 

00:12:05.000 --> 00:12:09.000
通知が表示されたら、クリックしたユーザーを処理する必要があります。

00:12:09.000 --> 00:12:13.000
サービスワーカースクリプトが処理するもう1つのイベント。

00:12:13.000 --> 00:12:21.000
このnotificationclickハンドラでは、BrowserPetsは新しいウィンドウを開くためにクリックされた通知からURLを取ります。

00:12:21.000 --> 00:12:24.000
注意してください：これは非常に一般的なパターンです。

00:12:24.000 --> 00:12:28.000
これは、Webプッシュをサポートするために書く必要があるJavaScriptのすべてです。

00:12:28.000 --> 00:12:31.000
もちろん、開発中に助けてもらうのが最善です。

00:12:31.000 --> 00:12:35.000
いつものように、そこでウェブインスペクタが登場します。

00:12:35.000 --> 00:12:45.000
ブラウザタブで開いているWebサイトのデバッグを支援することに加えて、Webインスペクタはサービスワーカーインスタンスを検査し、イベントハンドラにブレークポイントを設定することもできます。

00:12:45.000 --> 00:12:55.000
これらすべてを組み合わせると、プッシュを購読するJavaScriptと、プッシュイベントと通知イベントを処理するサービスワーカーコードを検査およびデバッグできます。

00:12:55.000 --> 00:13:04.000
さらに、Appleプッシュ通知サーバーは、プッシュメッセージを公開しようとしたときに何か問題が発生した場合、人間が読めるエラーを表示します。

00:13:04.000 --> 00:13:08.000
詳細については、このセッションに関連するリンクを確認してください。

00:13:08.000 --> 00:13:17.000
また、ユーザーのプライバシーと電力使用量に関して、そのコードを書いている間に出てきたいくつかの点についても詳しく説明したいと思います。

00:13:17.000 --> 00:13:24.000
重要なのは、私がこれを言ったのはこれが初めてではありません。プッシュを購読するには、ユーザーのジェスチャーが必要です。

00:13:24.000 --> 00:13:34.000
Webプラットフォームの他の特権機能と同様に、ユーザーが実際にWebプッシュを有効にするように要求することは、ユーザーの信頼にとって正しいことです。

00:13:34.000 --> 00:13:42.000
プッシュサブスクリプションをリクエストする方法のコードを示したときに述べたように、プッシュがユーザーに表示されることを約束する必要があります。

00:13:42.000 --> 00:13:48.000
プッシュイベントを処理することは、JavaScriptがサイレントバックグラウンドランタイムを取得するための招待状ではありません。

00:13:48.000 --> 00:13:53.000
そうすることは、ユーザーの信頼とユーザーのバッテリー寿命の両方を侵害することになります。

00:13:53.000 --> 00:13:59.000
プッシュイベントを処理するときは、実際には通知センターに通知を投稿する必要があります。

00:13:59.000 --> 00:14:07.000
他のブラウザはすべて、プッシュをユーザーに表示させるという約束に違反することに対する対策を持っており、Safariもそうです。

00:14:07.000 --> 00:14:16.000
macOS Venturaのベータビルドでは、通知をタイムリーに投稿できなかった3つのプッシュイベントの後、サイトのプッシュサブスクリプションは取り消されます。

00:14:16.000 --> 00:14:19.000
許可ワークフローをもう一度実行する必要があります。

00:14:19.000 --> 00:14:21.000
それだけ。

00:14:21.000 --> 00:14:29.000
私たちはWeb Pushをサポートすることを心から誇りに思っており、どのサイトでもApple Developerアカウントが不要で使用できることに興奮しています。

00:14:29.000 --> 00:14:41.000
無意識のうちにSafariを除外しないように、標準にコーディングし、機能検出を使用している限り、ユーザーはすでにmacOS VenturaのSafari 16でWebプッシュの恩恵を受けることができます。

00:14:41.000 --> 00:14:48.000
いつものように、今年はSafariとWebKitに他の多くの新しいものを追加しました。そのセッションをチェックして詳細を確認してください。

00:14:48.000 --> 00:14:50.000
ご覧いただきありがとうございます。

00:14:50.000 --> 23:59:59.000
WWDC 2022の素晴らしい残りをお過ごしください。

