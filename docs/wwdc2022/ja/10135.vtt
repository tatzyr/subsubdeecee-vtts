WEBVTT

00:00:01.000 --> 00:00:11.000
ヤン・ライ・ガニョン：こんにちは、私の名前はヤンです。

00:00:11.000 --> 00:00:13.000
私はコアBluetoothエンジニアです。

00:00:13.000 --> 00:00:18.000
今日は、Apple WatchのBluetoothデバイスのタイムリーなアラートについてお話ししたいと思います。

00:00:18.000 --> 00:00:26.000
まず、watchOSアプリがバックグラウンドにある間にコンプリケーションを更新する方法を確認します。

00:00:26.000 --> 00:00:32.000
次に、watchOSアプリでタイムリーなアラートを聞く方法について説明します。

00:00:32.000 --> 00:00:39.000
また、watchOS 9で周辺機器を発見できる新しい方法も見ます。

00:00:39.000 --> 00:00:47.000
最後に、Bluetoothアクセサリの設計に役立つベストプラクティスと推奨事項を提供します。

00:00:47.000 --> 00:00:54.000
最初のトピックに飛び込みましょう。watchOSアプリのバックグラウンドでコンプリケーションを更新する方法。

00:00:54.000 --> 00:01:03.000
昨年、watchOS 8では、バックグラウンドアプリの更新中にBluetoothアクセサリのコンプリケーションを更新する方法を導入しました。

00:01:03.000 --> 00:01:12.000
これは、現在の気温を示すこの例のように、定期的に更新できるデータに最適です。

00:01:12.000 --> 00:01:21.000
簡単な復習として、昨年のwatchOSでは、コンプリケーションを更新し、バックグラウンドで定期的に実行されるバックグラウンドアプリのリフレッシュを使用することができます。

00:01:21.000 --> 00:01:30.000
バックグラウンドアプリの更新が行われるたびに、アプリはBluetooth周辺機器に再接続し、データを取得し、周辺機器から切断することができます。

00:01:30.000 --> 00:01:37.000
これの詳細については、「BluetoothデバイスをApple Watchに接続する」というビデオをご覧ください。

00:01:37.000 --> 00:01:43.000
しかし、ユーザーが知りたいBluetooth周辺機器で時間に敏感なイベントが発生した場合はどうなりますか?

00:01:43.000 --> 00:01:52.000
watchOS 9では、Bluetoothアクセサリからのアラートをバックグラウンドで聞く方法を導入しています。

00:01:52.000 --> 00:01:54.000
これがその仕組みです。

00:01:54.000 --> 00:02:00.000
アプリの実行中にデバイスを接続し、特性の監視を開始します。

00:02:00.000 --> 00:02:09.000
アプリの実行が停止すると、Core Bluetoothはお客様に代わってデバイスへの接続を維持し、特性の変更を聞き続けます。

00:02:09.000 --> 00:02:15.000
デバイスがその特性の値を変更すると、アプリはそのイベントを処理するためのランタイムを取得します。

00:02:15.000 --> 00:02:20.000
たとえば、ローカル通知を投稿したり、ネットワークリクエストを送信したりできます。

00:02:20.000 --> 00:02:26.000
これは、ユーザーが気にする時間に敏感な情報をユーザーに提供することを目的としています。

00:02:26.000 --> 00:02:29.000
食品温度計を持っているとしましょう。

00:02:29.000 --> 00:02:35.000
オーブンから食べ物を取り出す必要があるときに警告を受けるために、希望の調理温度を設定できます。

00:02:35.000 --> 00:02:46.000
温度が所望の温度に近づくと、温度計は特性の値を変更し、アプリは食べ物がほぼ準備ができているというローカル通知を投稿します。

00:02:46.000 --> 00:02:51.000
食事が終わったら、希望の通知が届きます。

00:02:51.000 --> 00:02:58.000
そして、気温が上昇し続けると、最後の通知が届きます。

00:02:58.000 --> 00:03:03.000
まず、バックグラウンドモードの設定方法を確認しましょう。

00:03:03.000 --> 00:03:10.000
WatchアプリのInfo.plistでUIBackgroundModesにBluetooth-centralを追加します。

00:03:10.000 --> 00:03:19.000
Xcodeでは「必要なバックグラウンドモード」と呼ばれ、「アプリはCoreBluetoothを使用して通信する」を追加する必要があります。

00:03:19.000 --> 00:03:29.000
これらのInfo.plistエントリは、バックグラウンド実行を中央として使用したい場合、iOS用のアプリと同じであることに注意してください。

00:03:29.000 --> 00:03:38.000
iOSの「署名機能」に頼るのではなく、watchApp info.plistを手動で編集する必要があります。

00:03:38.000 --> 00:03:40.000
コードを見てみましょう。 

00:03:40.000 --> 00:03:46.000
すでに接続されていると仮定すると、GATTサービスを見つけて、GATTの特性を発見しました。

00:03:46.000 --> 00:03:53.000
didDiscoverCharacteristicForコールバックを取得します。

00:03:53.000 --> 00:03:58.000
コールバック内では、値が変更されるたびに通知を受け取ることを決定できます。

00:03:58.000 --> 00:04:08.000
これはwatchOS 8と同じAPIですが、アプリがバックグラウンドにある間も機能するという違いがあります。

00:04:08.000 --> 00:04:17.000
次に、didUpdateValueForで特性の値の変更を処理するためにデリゲートメソッドを実装します。

00:04:17.000 --> 00:04:27.000
特性が変更されたら、ここにローカル通知を投稿したり、ネットワークリクエストを送信したり、アプリにとって理にかなっているものなら何でもできます。

00:04:27.000 --> 00:04:37.000
このメソッドはフォアグラウンドとバックグラウンドの両方で呼び出されるので、両方のケースで正しいアクションを実行するようにしてください。

00:04:37.000 --> 00:04:42.000
さて、あなたが考慮する必要があるいくつかの状況について話しましょう。

00:04:42.000 --> 00:04:45.000
まず、Bluetoothの再接続のトピックについて。

00:04:45.000 --> 00:04:51.000
デバイスが通信範囲外になると、タイムアウト後にBluetooth接続が切断されます。

00:04:51.000 --> 00:05:00.000
これが発生した場合、アプリは再接続を試みるために「connectPeripheral」を呼び出すためのバックグラウンドランタイムを一時的に取得します。

00:05:00.000 --> 00:05:03.000
これはiOSで起こることと同じです。

00:05:03.000 --> 00:05:09.000
デバイスが再び範囲内になるとすぐに、Core Bluetoothはそれに再接続します。

00:05:09.000 --> 00:05:12.000
さて、いくつかの制限について話しましょう。

00:05:12.000 --> 00:05:19.000
これらの制限は、Apple Watchユーザーにとって最適なバッテリー寿命を維持するために重要です。

00:05:19.000 --> 00:05:30.000
デバイスがBluetooth範囲の端にあり、バックグラウンドBLE接続中に繰り返し切断されると、再接続範囲が縮小されます。

00:05:30.000 --> 00:05:35.000
これは、Apple Watchに近いデバイスのみが再接続されることを意味します。

00:05:35.000 --> 00:05:43.000
これらの制限は24時間のローリングウィンドウでカウントされ、ユーザーがアプリで操作するたびにリセットされます。

00:05:43.000 --> 00:05:50.000
もう1つの制限は、タイムリーなアラートのバックグラウンドランタイムの機会の数に関するものです。

00:05:50.000 --> 00:05:56.000
ユーザーにとって重要なことが起こったときに変化する特性のみを監視します。

00:05:56.000 --> 00:06:03.000
デバイスから定期的なデータを収集する必要がある場合は、バックグラウンドアプリの更新で行う必要があります。

00:06:03.000 --> 00:06:12.000
アプリが制限を超えようとしていると、通知LeGattNearBackgroundNotificationLimitが投稿されます。

00:06:12.000 --> 00:06:20.000
アプリがそのエラーを監視し、ユーザーがwatchOSアプリとやり取りしていないことに気づくのは良い習慣です。

00:06:20.000 --> 00:06:34.000
このアラートが重要な場合は、ネットワーク要求やBluetooth周辺機器のUIの変更など、ユーザーと通信する別の方法を見つける適切な時期かもしれません。

00:06:34.000 --> 00:06:45.000
制限を超えると、LeGattExceededBackgroundNotificationLimitという通知が投稿されます。

00:06:45.000 --> 00:06:57.000
この時点以降、アプリはバックグラウンドランタイムを受信しなくなり、バックグラウンド接続がなく、バックグラウンドアプリの更新のみがあるwatchOS 8の動作に戻ります。

00:06:57.000 --> 00:07:03.000
これら2つの通知は、GATT通知アップデートのエラーフィールドで取得できます。

00:07:03.000 --> 00:07:11.000
バックグラウンドBLE接続の場合、カウントダウンするのではなく、エラーを使用して制限に達したときに知ることをお勧めします。

00:07:11.000 --> 00:07:16.000
watchOS 9の場合、バックグラウンドランタイムの制限は5に設定されています。

00:07:16.000 --> 00:07:21.000
これらの制限は両方とも、ユーザーがアプリを操作するたびにリセットされます。

00:07:21.000 --> 00:07:28.000
また、アプリとのユーザーインタラクションがなかった場合に備えて、制限に達してから24時間後にリセットされます。

00:07:28.000 --> 00:07:33.000
注：これらの制限は、BluetoothバックグラウンドLE接続にのみ適用されます。

00:07:33.000 --> 00:07:41.000
これらの制限に関係なく、コンプリケーションがアクティブなウォッチフェイスにある場合、バックグラウンドアプリの更新は引き続き行われます。

00:07:41.000 --> 00:07:45.000
各イベントを処理する時間は非常に短いです。

00:07:45.000 --> 00:07:52.000
非常に複雑な処理を行うのに十分な時間がないかもしれませんが、重要なことが起こっていることをユーザーに警告するのに十分です。

00:07:52.000 --> 00:07:59.000
最後に、バックグラウンドでタイムリーなアラートを聞くには、Apple Watch Series 6以降が必要です。

00:07:59.000 --> 00:08:03.000
アラートを聞くことは、バックグラウンドでできることだけではありません。

00:08:03.000 --> 00:08:09.000
watchOS 9では、アプリがバックグラウンドにある間に周辺機器を検出できます。

00:08:09.000 --> 00:08:17.000
Bluetooth医療機器と、そこからタイムリーなアラートを検出するwatchOSアプリを持っているとしましょう。

00:08:17.000 --> 00:08:24.000
電力を節約するために、周辺機器は深刻な状態を検出するまで宣伝しません。

00:08:24.000 --> 00:08:30.000
したがって、デバイスとApple Watchの間にはまだ接続がありません。

00:08:30.000 --> 00:08:37.000
ここでは、watchOSアプリは医療機器から一意のサービスUUIDをスキャンします。

00:08:37.000 --> 00:08:43.000
今、医療機器が何かが深刻であることを検出すると、広告を開始します。

00:08:43.000 --> 00:08:49.000
Apple Watchはこの周辺機器を発見し、バックグラウンドでアプリを起動します。

00:08:49.000 --> 00:08:54.000
その後、アプリは検出された状態をユーザーに警告することができます。

00:08:54.000 --> 00:09:05.000
仕組みは次のとおりです。Watchアプリは周辺機器のスキャンを開始し、Core Bluetoothはバックグラウンドでスキャンを続けます。

00:09:05.000 --> 00:09:15.000
ペリフェラルの広告が検出されると、アプリにはバックグラウンドランタイムが与えられ、接続を開始できます。

00:09:15.000 --> 00:09:18.000
これを実現するためにコードに飛び込みましょう。

00:09:18.000 --> 00:09:26.000
APIはwatchOS 8から変更されていませんが、アプリがバックグラウンドであってもスキャンは尊重されます。

00:09:26.000 --> 00:09:32.000
監視したいサービスUUIDで「scanForPeripherals」を呼び出します。

00:09:32.000 --> 00:09:38.000
アプリがフォアグラウンドにある間はこれを行うことができ、アプリがバックグラウンドにある間は継続されます。

00:09:38.000 --> 00:09:46.000
「allowDuplicatesKey」オプションを要求すると、アプリがフォアグラウンドにある場合にのみ利用可能になることに注意してください。

00:09:46.000 --> 00:09:48.000
さて、いくつかの制限について話しましょう。

00:09:48.000 --> 00:09:54.000
アプリの起動の間にアプリにバックグラウンドランタイムが与えられる回数には制限があります。

00:09:54.000 --> 00:10:00.000
この制限は、GATT特性が変更されたときに以前に見たバックグラウンドランタイムと組み合わされます。

00:10:00.000 --> 00:10:06.000
また、バックグラウンドで周辺機器をスキャンするには、Apple Watch Series 6以降が必要です。

00:10:06.000 --> 00:10:15.000
要約すると、時計がバックグラウンドでスキャンしている間、限られた数のBluetoothサービスUUIDをスキャンできるようになりました。

00:10:15.000 --> 00:10:23.000
では、これらの機能を最大限に活用するためにアクセサリーを設計する方法について話しましょう。

00:10:23.000 --> 00:10:30.000
Bluetoothアクセサリを設計する際に考慮する必要があるパワートレードオフがあります。

00:10:30.000 --> 00:10:39.000
消費電力が懸念される場合は、デバイスが深い睡眠に入り、アラートが発生したときにのみ関連情報を宣伝できるトポロジを選択する必要があります。

00:10:39.000 --> 00:10:49.000
トレードオフは、タイムリーなアラートのたびにBluetooth検出時間で余分なレイテンシがありますが、より多くの電力を節約できます。

00:10:49.000 --> 00:10:54.000
これは、医療機器の例で提供されるトポロジです。

00:10:54.000 --> 00:11:07.000
一方、タイムリーなアラートに低レイテンシが必要なが、電力がそれほど心配でない場合は、バックグラウンドLE接続の使用を検討し、GATT表示でアラートを送信することができます。

00:11:07.000 --> 00:11:12.000
アプリごとにBluetooth接続は2つに制限があることに注意してください。

00:11:12.000 --> 00:11:17.000
これは、温度センサーの例で見たトポロジーです。

00:11:17.000 --> 00:11:32.000
ユーザーがタイムリーなアラートで最高の体験をするために、タイムクリティカルなデータと非タイムクリティカルなデータをフィルタリングするために、周辺機器にできるだけ多くの処理とインテリジェンスを追加することを検討してください。

00:11:32.000 --> 00:11:41.000
温度の例に戻ると、すべての温度を送信する代わりに、関連するイベントまたは温度が変化したときにのみを送信できます。

00:11:41.000 --> 00:11:56.000
このアプローチの利点は、タイムクリティカルなイベントを定期的なデータから適切に分離すると、周辺機器とApple Watchユーザーの両方が電力を節約し、全体的により良い体験が得られることです。

00:11:56.000 --> 00:12:01.000
デバイスが切断されたら、接続を再確立するための広告をお勧めします。

00:12:01.000 --> 00:12:12.000
広告間隔は、再接続に必要な速度、バッテリー寿命など、Bluetooth周辺機器の要件によって異なります。

00:12:12.000 --> 00:12:17.000
アクセサリーガイドラインでは、使用できるいくつかの異なる値を提供しています。

00:12:17.000 --> 00:12:27.000
たとえば、デバイスのバッテリーに制約がある場合は、1022.5ミリ秒の値を使用できます。

00:12:27.000 --> 00:12:36.000
別の例：20ミリ秒の速度で広告を出すと、理想的な条件で1秒以内に検出できるはずです。

00:12:36.000 --> 00:12:44.000
この高い広告率が重要なイベントが発生する間のみ使用できるように設計できます。

00:12:44.000 --> 00:12:48.000
では、接続間隔について話しましょう。

00:12:48.000 --> 00:12:58.000
デバイスがバックグラウンドで接続されたままのトポロジを選択した場合は、少なくとも150ミリ秒などの長い接続間隔を使用することを強くお勧めします。

00:12:58.000 --> 00:13:04.000
これにより、周辺機器のバッテリーを節約し、Apple Watchで最高のユーザーエクスペリエンスを提供します。

00:13:04.000 --> 00:13:09.000
Bluetooth 5.3は、接続サブレーティングとともにApple Watchに搭載されます。

00:13:09.000 --> 00:13:19.000
これにより、Bluetooth周辺機器がアイドル状態の状態で接続間隔を増やし、より低いレイテンシが必要なときにすぐに小さな接続間隔に変更することができます。

00:13:19.000 --> 00:13:24.000
これは、プラットフォーム間の違いを示す表です。

00:13:24.000 --> 00:13:28.000
これらは、Bluetooth Low Energyで現在サポートされている構成です。

00:13:28.000 --> 00:13:35.000
昨年、新しいバックグラウンド実行モードとして、watchOSのバックグラウンドアプリの更新を導入しました。

00:13:35.000 --> 00:13:44.000
今年は、シリーズ6以上を所有している場合は、今日説明したように、タイムリーなアラートでバックグラウンド実行を改善しました。

00:13:44.000 --> 00:13:46.000
見てくれてありがとう!

00:13:46.000 --> 23:59:59.000
。

