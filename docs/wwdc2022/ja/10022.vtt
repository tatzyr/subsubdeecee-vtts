WEBVTT

00:00:00.000 -> 00:00:09.000
♪ ♪

00:00:09.000 -> 00:00:11.000
こんにちは、ようこそ。

00:00:11.000 -> 00:00:15.000
私はカメラソフトウェアエンジニアリングチームのブラッド・フォードです。

00:00:15.000 -> 00:00:27.000
このセッションでは、macOS用の最新のカメラドライバアーキテクチャであり、DALプラグインの代替品であるCoreMedia IOを使用したカメラ拡張機能を紹介します。

00:00:27.000 -> 00:00:35.000
DALプラグインは、Macや仮想カメラに接続するハードウェア用のカメラドライバーを作成できる技術です。

00:00:35.000 -> 00:00:40.000
彼らはmacOS 10.7以来、非常に長い間存在しています。

00:00:40.000 -> 00:00:51.000
DALプラグインは、macOSをリッチメディアプラットフォームとして拡張する力を提供し、優れたサードパーティのカメラ製品のサポートをプロや消費者に提供します。

00:00:51.000 -> 00:00:56.000
それはMac、Macを作るものの一部です。

00:00:56.000 -> 00:00:58.000
しかし、DALプラグインにはいくつかの問題があります。

00:00:58.000 -> 00:01:08.000
信頼できないコードをアプリのプロセスに直接ロードし、プラグインにバグがある場合のクラッシュやマルウェア攻撃に対して脆弱になります。

00:01:08.000 -> 00:01:16.000
このため、FaceTime、QuickTime Player、PhotoBoothなどのAppleアプリでは動作しません。

00:01:16.000 -> 00:01:26.000
また、これらのアプリが意図的にライブラリの検証を無効にしたり、ユーザーがシステムの整合性保護をオフにしたりしない限り、多くのサードパーティのカメラアプリでは動作しません。

00:01:26.000 -> 00:01:33.000
これらのいずれも、システムの安全性を低下させ、安定性を低下させるため、推奨される慣行ではありません。

00:01:33.000 -> 00:01:35.000
開発も難しいです。

00:01:35.000 -> 00:01:43.000
彼らは2011年頃のC APIと、あなたが学ぶためのC++ヘルパークラスの厚いSDKを持っています。

00:01:43.000 -> 00:01:47.000
その上、それらはまばらに文書化されています。

00:01:47.000 -> 00:01:50.000
アップグレードの時間です。

00:01:50.000 -> 00:02:03.000
macOS 12.3は、カメラ拡張機能と呼ばれるDALプラグインの徹底的に現代的な代替品を導入します...ユーザーのセキュリティを第一に考えるアーキテクチャです。

00:02:03.000 -> 00:02:05.000
それがどのように機能するかを学びましょう。

00:02:05.000 -> 00:02:09.000
まず、技術の概要を説明します。

00:02:09.000 -> 00:02:13.000
次に、カメラ拡張機能をゼロから構築する方法を紹介します。

00:02:13.000 -> 00:02:18.000
次に、APIの主なクラスと機能を紹介します。

00:02:18.000 -> 00:02:24.000
CoreMedia IO拡張機能を出力デバイスとして使用する方法を説明します。

00:02:24.000 -> 00:02:28.000
そして最後に、DALプラグインの廃止計画をカバーします。

00:02:28.000 -> 00:02:31.000
始めましょう。

00:02:31.000 -> 00:02:41.000
CoreMedia IO拡張機能とも呼ばれるカメラ拡張機能は、カメラドライバをパッケージ化してMacアプリケーションに配信する新しい方法です。

00:02:41.000 -> 00:02:42.000
彼らは安全です。

00:02:42.000 -> 00:02:50.000
拡張コードは、サンドボックス化され、ロールユーザーとして実行される独自のデーモンプロセスにコードオフされます。

00:02:50.000 -> 00:02:56.000
拡張機能が提供するすべてのバッファは、アプリに配信される前に検証されます。

00:02:56.000 -> 00:02:57.000
彼らは速いです。

00:02:57.000 -> 00:03:05.000
フレームワークは、パフォーマンスに重点を置いて、拡張プロセスとアプリの間のIPCレイヤーを処理します。

00:03:05.000 -> 00:03:11.000
このフレームワークは、複数の同時クライアントにバッファを配信することもできます。

00:03:11.000 -> 00:03:12.000
彼らは現代的です。

00:03:12.000 -> 00:03:18.000
拡張機能は、SwiftまたはObjective-cのいずれかで記述できます。

00:03:18.000 -> 00:03:19.000
それらはシンプルです。

00:03:19.000 -> 00:03:25.000
学ぶべきいくつかのクラスと、起動して実行するために実装するいくつかのプロトコルがあります。

00:03:25.000 -> 00:03:29.000
フレームワークはボイラープレートコードを処理します。

00:03:29.000 -> 00:03:31.000
それらは展開が簡単です。

00:03:31.000 -> 00:03:36.000
App Storeでアプリとして出荷できます。

00:03:36.000 -> 00:03:45.000
また、カメラ拡張機能は、既存のAVFoundationキャプチャAPIと100%下位互換性があります。

00:03:45.000 -> 00:03:52.000
カメラ拡張機能は、Appleアプリを含むすべてのカメラアプリの内蔵カメラと同じように表示されます。

00:03:52.000 -> 00:03:58.000
カメラ拡張機能がFaceTimeカメラピッカーにどのように表示されるかの例を次に示します。

00:03:58.000 -> 00:04:02.000
カメラ拡張機能でどのような体験を構築できますか?

00:04:02.000 -> 00:04:05.000
3つの一般的な用途を研究しましょう。

00:04:05.000 -> 00:04:30.000
最も簡単な用途は、カラーバーを表示するカメラ、ユニークなテストパターン、さまざまなフレームレートまたは解像度でプログラムで生成された画像、またはA / V同期をテストするためにムービー内のフレームなどの事前にレンダリングされたコンテンツをストリーミングするカメラなど、ソフトウェアのみのカメラです。

00:04:30.000 -> 00:04:39.000
2番目のユースケースは、Macに物理的に接続したり、ワイヤレスで発見したりする予定のカメラのドライバです。

00:04:39.000 -> 00:04:44.000
カメラエクステンションは、ホットプラグとアンプラグを完全にサポートしています。

00:04:44.000 -> 00:04:47.000
ハードウェアに対処するには、いくつかの選択肢があります。

00:04:47.000 -> 00:04:55.000
好ましい方法は、完全にユーザースペースで実行されるDriverKit Extension、またはDEXTを使用することです。

00:04:55.000 -> 00:05:03.000
ハードウェアをカーネルレベルでアドレス指定する必要がある場合は、レガシーIOVideoFamily kextパスを使用できます。

00:05:03.000 -> 00:05:14.000
Kextは本質的に安全性が低く、システムの不安定性に寄与する可能性があるため、新しいkextコードの開発は推奨されません。

00:05:14.000 -> 00:05:21.000
Appleは、USBビデオクラス、またはUVCカメラにクラス準拠の拡張機能を提供しています。

00:05:21.000 -> 00:05:26.000
UVC仕様に準拠したカメラに最適です。

00:05:26.000 -> 00:05:44.000
ただし、非標準プロトコルを使用し、UVC仕様以外の追加機能を備えたUSBカメラをサポートする必要がある場合は、AppleのUVC拡張機能を上書きするカメラ拡張機能を作成し、特定の製品とベンダーIDを請求できます。

00:05:44.000 -> 00:05:55.000
それについてもっと知りたい場合は、developer.apple.comの「デフォルトのUSBビデオクラス拡張機能の上書き」というタイトルの記事を参照してください。

00:05:55.000 -> 00:06:05.000
最小限のDEXTバンドルを作成する方法と、Info.plistでオーバーライドする必要があるIOKitPersonalitiesキーについて説明します。

00:06:05.000 -> 00:06:12.000
3番目の一般的な用途は、ソフトウェアとハードウェアのハイブリッドであるクリエイティブカメラです。

00:06:12.000 -> 00:06:26.000
拡張機能は、Macに接続された別の物理カメラからビデオストリームにアクセスし、それらのバッファにエフェクトを適用し、新しいカメラストリームとしてクライアントに送信します。

00:06:26.000 -> 00:06:37.000
または、複数のカメラからビデオストリームにアクセスし、それらを合成し、アプリに送信するクリエイティブなカメラ。

00:06:37.000 -> 00:06:44.000
このようなクリエイティブなカメラは、コンフィギュレーションアプリを使用して合成を制御したり、フィルターをパラメータ化したりするかもしれません。

00:06:44.000 -> 00:06:49.000
クリエイティブなカメラの可能性は本当に無限大です。

00:06:49.000 -> 00:06:56.000
主なユースケースを探ったので、CoreMedia IO Extensionの解剖学を見てみましょう。

00:06:56.000 -> 00:07:00.000
まず「CoreMedia IO」の部分。

00:07:00.000 -> 00:07:07.000
CoreMedia IOは、カメラドライバを公開または発見するための低レベルのフレームワークです。

00:07:07.000 -> 00:07:15.000
レガシーDAL APIとそれに代わる新しいカメラ拡張APIが含まれていることをすでに知っています。

00:07:15.000 -> 00:07:25.000
しかし、アプリ開発者がシステム上のカメラを見つけて検査するための低レベルのC APIの強力なセットも含まれています。

00:07:25.000 -> 00:07:29.000
さて、その「拡張」部分はどうですか?

00:07:29.000 -> 00:07:38.000
CoreMedia IO拡張機能は、macOS Catalinaで最初に登場したSystemExtensionsフレームワークの上に構築されています。

00:07:38.000 -> 00:07:41.000
使い捨てのインストーラーが不要になります。

00:07:41.000 -> 00:07:45.000
代わりに、アプリ内で拡張機能を出荷します。

00:07:45.000 -> 00:07:49.000
拡張機能の実行可能ファイルはアプリバンドル内にあります。

00:07:49.000 -> 00:08:01.000
SystemExtensionsフレームワークを呼び出すことで、アプリはシステム上のすべてのユーザーの拡張機能をインストール、アップグレード、またはダウングレードできます。

00:08:01.000 -> 00:08:03.000
そして、アンインストールは簡単です。

00:08:03.000 -> 00:08:10.000
アプリを削除すると、SystemExtensionsフレームワークはすべてのユーザーのカメラ拡張機能をアンインストールします。

00:08:10.000 -> 00:08:19.000
この配信メカニズムは、App Storeでの使用が承認されており、カメラ拡張機能を幅広い視聴者に簡単に展開できます。

00:08:19.000 -> 00:08:31.000
システム拡張フレームワークの詳細については、developer.apple.com/documentation/systemextensionsでドキュメントをお読みください。

00:08:31.000 -> 00:08:40.000
そして、「System Extensions and DriverKit」というタイトルのWWDC 2019のビデオを必ずチェックしてください。

00:08:40.000 -> 00:08:44.000
カメラエクステンションの技術概要については、それだけです。

00:08:44.000 -> 00:08:46.000
さて、実際に1つを構築しましょう。

00:08:46.000 -> 00:08:53.000
これは、数分でカメラ拡張機能を稼働させる方法の簡単なデモです。

00:08:53.000 -> 00:08:58.000
私はXcodeでExampleCamと呼ばれる単一のウィンドウmacOSアプリケーションを作成しました。

00:08:58.000 -> 00:09:03.000
この時点で、私は数行のコードを追加しただけです。

00:09:03.000 -> 00:09:07.000
App Delegateは変更されません。

00:09:07.000 -> 00:09:19.000
メインストーリーボードには、インストール用と拡張機能をアンインストール用の2つのボタンと、ステータスを表示するテキストフィールドを追加しました。

00:09:19.000 -> 00:09:28.000
ViewControllerクラスでは、インストールボタンとアンインストールボタンを接続するためにIBActionsを追加しました。

00:09:28.000 -> 00:09:40.000
これらの関数は、アプリのバンドル内にある拡張機能を有効または無効にするために、OSSystemExtensionRequestsを作成します。

00:09:40.000 -> 00:09:50.000
下部には、ステータスを記録するOSSystemExtensionRequestDelegate関数の骨格実装を追加しました。

00:09:50.000 -> 00:10:00.000
アプリのエンタイトルメントファイルには、通常のApp Sandbox=YESがあり、AppGroupを定義します。

00:10:00.000 -> 00:10:09.000
ここに新しいキーを1つ追加しただけです。「システム拡張機能」キーは、アプリがシステム拡張機能をインストールする場合に必要です。

00:10:09.000 -> 00:10:27.000
この時点で、アプリを実行して[拡張機能のインストール]ボタンをクリックすると、アプリがまだ存在しないバンドル内の拡張機能を探しているため、致命的なエラーが発生します。

00:10:27.000 -> 00:10:44.000
システム拡張機能を作成して埋め込むには、File、New、Targetに移動し、macOSの下で、システム拡張機能がある一番下までスクロールします。

00:10:44.000 -> 00:11:01.000
次に、「カメラ拡張機能」を選択し、次にヒットし、名前を付けます。「拡張機能」を選択します。「アプリケーションに埋め込まれた」が設定されていることを確認してから、[完了]をクリックします。

00:11:01.000 -> 00:11:06.000
新しい拡張フォルダの中で、私は4つの新しいファイルを取得します。

00:11:06.000 -> 00:11:15.000
Info.plistは、MachServiceNameを定義することで、CMIOExtensionとして識別します。

00:11:15.000 -> 00:11:17.000
これは重要な情報です。

00:11:17.000 -> 00:11:25.000
CoreMedia IOのregisterassistantは、それが存在しない限り、あなたの拡張機能を起動しません。

00:11:25.000 -> 00:11:32.000
私たちがここにいる間に、システム拡張機能の使用説明をしましょう。

00:11:32.000 -> 00:11:37.000
エンタイトルメントファイルは、アプリがサンドボックス化されていることを示しています。

00:11:37.000 -> 00:11:47.000
そして、検証に合格するためには、拡張機能のアプリグループにMachServiceNameの接頭辞が付けられていることを確認する必要があります。

00:11:47.000 -> 00:11:56.000
だから、私はそれをアプリ拡張機能から拡張機能の資格ファイルにコピーして貼り付けます。

00:11:56.000 -> 00:11:59.000
そして、それだけです。

00:11:59.000 -> 00:12:05.000
Main.swiftファイルは、拡張機能のエントリポイントとして機能し、サービスを開始します。

00:12:05.000 -> 00:12:12.000
そして、ExtensionProvider.swiftファイルは、完全に機能するカメラを提供します。

00:12:12.000 -> 00:12:22.000
純粋なソフトウェアカメラを作成するために必要なすべて、DeviceSource、StreamSource、ProviderSourceが含まれています。

00:12:22.000 -> 00:12:26.000
悪くない小さなテンプレート。

00:12:26.000 -> 00:12:48.000
このファイルでは、「SampleCapture」を検索し、「ExampleCam」に置き換えて、カメラの名前、モデル、メーカーがすべて適切な名前を持つようにします。

00:12:48.000 -> 00:12:57.000
それでおそれ。コンパイルして実行しましょう。

00:12:57.000 -> 00:13:04.000
インストールボタンを押すと、失敗します。

00:13:04.000 -> 00:13:09.000
なぜなら、システム拡張機能は/Applicationsに存在するアプリによってのみインストールできるからです。

00:13:09.000 -> 00:13:26.000
動かしてもう一度やってみましょう。

00:13:26.000 -> 00:13:30.000
今回は成功します。

00:13:30.000 -> 00:13:45.000
システム設定で認証して、ブロックされた拡張機能のインストールを許可するように求められます。そこでは、プライバシーとセキュリティを見つけ、[許可]ボタンをクリックします。

00:13:45.000 -> 00:13:53.000
パスワードで認証すると、結果が「エラーなし」で0に変わったことがわかります。

00:13:53.000 -> 00:14:05.000
Systemextensionsctlリストツールを使用すると、成功したことを確認し、システムで1つの拡張機能がアクティブになりました。

00:14:05.000 -> 00:14:10.000
今、私は任意のカメラアプリを開いて、私の作品を見つけて賞賛することができます。

00:14:10.000 -> 00:14:13.000
FaceTimeを起動しましょう。

00:14:13.000 -> 00:14:16.000
ExampleCamはカメラピッカーに表示されます。

00:14:16.000 -> 00:14:28.000
70年代の古いポンゲームのように見え、毎秒60フレームでフレームを上下に移動する水平の白い線を描いています。

00:14:28.000 -> 00:14:37.000
カメラを取り除くために、私がしなければならないのはアプリを削除することだけです。

00:14:37.000 -> 00:14:49.000
システムから、アプリを削除して拡張機能もアンインストールしていることを確認するように求められます。

00:14:49.000 -> 00:14:54.000
ExampleCamのデモは、ソフトウェアカメラをゼロから作るのがいかに簡単かを示しています。

00:14:54.000 -> 00:15:02.000
では、そのソフトウェアカメラをクリエイティブなカメラに変えて、ノッチを上げましょう。

00:15:02.000 -> 00:15:06.000
私はこの2番目の例をCIFilterCamと呼んでいます。

00:15:06.000 -> 00:15:15.000
CIはCoreImageの略で、静止画やビデオに適用できるあらゆる種類のエフェクトフィルターを備えたフレームワークです。

00:15:15.000 -> 00:15:24.000
CIFilterCamを作成するには、ExampleCamシェルから始めましたが、アプリをコンフィギュレーションアプリとインストーラーにすることにしました。

00:15:24.000 -> 00:15:32.000
カメラピッカーボタン、フィルターピッカーボタン、エフェクトバイパスボタンを追加しました。

00:15:32.000 -> 00:15:36.000
また、ライブビデオプレビューのビューも追加しました。

00:15:36.000 -> 00:15:43.000
これは、フィルターカメラが何をしているかを示すために、AVCaptureVideoPreviewLayerに裏打ちされた標準ビューです。

00:15:43.000 -> 00:16:02.000
バイパスボタンのチェックを外すと、カラーエフェクトからディストーションフィルターまで、さまざまなフィルターがビデオに適用されるのを見ることができます。

00:16:02.000 -> 00:16:06.000
私はバンプの歪みに少し偏っています。

00:16:06.000 -> 00:16:15.000
これらを内蔵のFaceTimeカメラ、またはMacに取り付けられている物理カメラに適用できます。

00:16:15.000 -> 00:16:22.000
近くにiPhoneを連係カメラとして設定しています。

00:16:22.000 -> 00:16:29.000
それを使おう。

00:16:29.000 -> 00:16:32.000
CIFilterCamアプリは、それ自体は特別なものではありません。

00:16:32.000 -> 00:16:34.000
ただのエフェクトカメラアプリ。

00:16:34.000 -> 00:16:43.000
しかし、本当に面白いのは、アプリがすべてのアプリが使用できる仮想フィルターカメラのフロントエンドであることに気づいたときです。

00:16:43.000 -> 00:16:50.000
FaceTimeとPhotoBoothを起動し、両方がCIFilterCamに向けられていることを確認します。

00:16:50.000 -> 00:16:59.000
現在、設定アプリでフィルターを変更すると、CIFilterCamを使用するすべてのアプリが連携して変更されます。

00:16:59.000 -> 00:17:06.000
異なるソースカメラを選択すると、すべてのカメラアプリが変更を拾います。

00:17:06.000 -> 00:17:20.000
アプリ内のすべてのボタンをクリックすると、フィルターカム拡張子への単純なプロパティ呼び出しに変換され、「ねえ、拡張子、このカメラを使用してください」または「ねえ、拡張子、この他のフィルターを使用してください」と伝えます。

00:17:20.000 -> 00:17:25.000
または、この他のフィルター。

00:17:25.000 -> 00:17:31.000
または、この他のフィルター。

00:17:31.000 -> 00:17:37.000
拡張機能内でハードウェアカメラを実行するためのサポートには、macOS Venturaが必要です。

00:17:37.000 -> 00:17:49.000
また、別のカメラを使用することを示す、拡張機能のエンタイトルメントファイルにcom.apple.security.device.cameraキーを追加する必要があります。

00:17:49.000 -> 00:18:01.000
また、カメラを使用するため、ユーザーは拡張機能に許可を与えるように求められますので、Info.plistにNSCameraUsageDescriptionを提供する必要があります。

00:18:01.000 -> 00:18:05.000
これは、カメラ拡張機能を構築するための基本を締めくくります。

00:18:05.000 -> 00:18:10.000
では、APIに移りましょう。

00:18:10.000 -> 00:18:18.000
スタックの下部には、ファーストパーティまたはサードパーティのカメラ拡張機能ごとに1つずつ、デーモンプロセスがあります。

00:18:18.000 -> 00:18:29.000
カメラアプリのプロセス内には、IPCを介してカメラ拡張機能と話すプライベートフレームワークコードから始まり、いくつかのレイヤーがあります。

00:18:29.000 -> 00:18:38.000
1つのレベルアップは、CoreMedia IO ExtensionコールをレガシーDALプラグインコールに変換する別のプライベートレイヤーです。

00:18:38.000 -> 00:18:45.000
再び、DALプラグインを公開するパブリックCoreMedia IO APIを見つけます。

00:18:45.000 -> 00:18:52.000
このインターフェイスのクライアントにとって、CoreMedia IO拡張機能とDALプラグインの間に違いはありません。

00:18:52.000 -> 00:18:55.000
すべてがDALプラグインのように見えます。

00:18:55.000 -> 00:19:01.000
そして最後に、一番上にあるのは、CoreMedia IOのクライアントであるAVFoundationです。

00:19:01.000 -> 00:19:07.000
DALプラグインをAVCaptureDevicesとして再発行します。

00:19:07.000 -> 00:19:12.000
これを従来のDALプラグインアーキテクチャと対比してください。

00:19:12.000 -> 00:19:22.000
DALプラグインにはデーモンピースが含まれている場合と含まれていない場合がありますが、それらはすべて、CoreMedia IOフレームワークによってアプリプロセスで直接ロードされたコードを実行します。

00:19:22.000 -> 00:19:25.000
これにより、アプリはマルウェアに対して脆弱になります。

00:19:25.000 -> 00:19:30.000
カメラ拡張機能は、この攻撃ベクトルを完全に削除します。

00:19:30.000 -> 00:19:36.000
拡張機能はアプリをサンドボックス化する必要があります。そうしないと、実行が許可されません。

00:19:36.000 -> 00:19:50.000
Appleのregisterassistantserviceは、CMIOExtensionMachServiceNameで識別し、_cmiodalassistantsと呼ばれるロールユーザーアカウントとして起動します。

00:19:50.000 -> 00:19:54.000
Sandboxdは、カスタムサンドボックスプロファイルをプロセスに適用します。

00:19:54.000 -> 00:19:59.000
カメラのユースケースに合わせて調整されています。

00:19:59.000 -> 00:20:06.000
カスタムサンドボックスプロファイルを使用すると、期待される一般的なハードウェアインターフェイスを介して通信できます。

00:20:06.000 -> 00:20:17.000
USB、Bluetooth、WiFi - クライアントとして、ポートを開くサーバーではなく、さらにはFirewire。

00:20:17.000 -> 00:20:24.000
また、拡張機能は独自のコンテナとtmpから読み書きできます。

00:20:24.000 -> 00:20:29.000
カメラ拡張サンドボックスプロファイルは、通常のアプリよりもロックダウンされています。

00:20:29.000 -> 00:20:51.000
できないことの例としては、フォーク、exec'ing、またはposixが子プロセスを生成したり、ウィンドウサーバーにアクセスしたり、フォアグラウンドユーザーアカウントに接続したり、グローバル名前空間に独自のmachサービスを登録したりします。

00:20:51.000 -> 00:21:04.000
拡張機能の開発時に、正当なキャプチャケースに対してサンドボックスが制限的すぎる場合は、フィードバックアシスタントを通じてフィードバックを提供してください。制限の緩和を慎重に検討します。

00:21:04.000 -> 00:21:12.000
以前のアーキテクチャ図は、バッファをアプリレイヤーに直接渡すカメラ拡張機能のデーモンプロセスを示しました。

00:21:12.000 -> 00:21:17.000
実際には、もう1つのセキュリティ層が関係しています。

00:21:17.000 -> 00:21:23.000
デーモンとアプリの間には、registerassistantserviceと呼ばれるプロキシサービスがあります。

00:21:23.000 -> 00:21:29.000
透明性、同意、および管理ポリシーを実施します。

00:21:29.000 -> 00:21:35.000
アプリが初めてカメラを使用しようとすると、システムはユーザーに大丈夫かどうかを尋ねます。

00:21:35.000 -> 00:21:40.000
その同意は、内蔵カメラだけでなく、すべてのカメラに対して付与される必要があります。

00:21:40.000 -> 00:21:43.000
プロキシサービスは、お客様に代わってこの同意を処理します。

00:21:43.000 -> 00:21:50.000
ユーザーがカメラへのアクセスを拒否した場合、プロキシはバッファがそのアプリに行くのを停止します。

00:21:50.000 -> 00:22:04.000
また、アトリビューションも処理します。特定のカメラが特定のアプリで使用されていることをシステムに知らせるため、デーモンによって消費される電力は、カメラを使用しているアプリに起因する可能性があります。

00:22:04.000 -> 00:22:13.000
CoreMedia IO拡張機能には、プロバイダー、デバイス、ストリームの4つの主要なクラスがあります。

00:22:13.000 -> 00:22:22.000
プロバイダーにはデバイスがあり、デバイスにはストリームがあり、3つともプロパティを持つことができます。

00:22:22.000 -> 00:22:35.000
これら3つの主要なクラスのそれぞれは、ソース、それぞれ ProviderSource、DeviceSource、およびStreamSourceを提供することによって作成します。

00:22:35.000 -> 00:22:39.000
ExtensionProviderは最低レベルのオブジェクトです。

00:22:39.000 -> 00:22:45.000
ホットプラグイベントなど、必要に応じてデバイスを追加および削除できます。

00:22:45.000 -> 00:22:54.000
接続しようとすると、クライアントのプロセスが通知されるため、デバイスの公開を特定のアプリに制限する機会が得られます。

00:22:54.000 -> 00:23:01.000
また、プロパティの実装については、プロバイダーのソースオブジェクトを参照します。

00:23:01.000 -> 00:23:05.000
拡張機能の主なエントリポイントは、以下がどのように見えるかです。

00:23:05.000 -> 00:23:16.000
CMIOExtensionProviderSourceプロトコルに準拠し、ExtensionProviderを作成する独自のExtensionProviderSourceを作成します。

00:23:16.000 -> 00:23:25.000
サービスを開始するには、プロバイダークラスメソッドstartServiceを呼び出し、プロバイダーインスタンスを渡します。

00:23:25.000 -> 00:23:32.000
ExtensionProviderは、拡張機能の存続期間中変更されない2つの読み取り専用プロパティを実装しています。

00:23:32.000 -> 00:23:36.000
メーカーとプロバイダーの名前。

00:23:36.000 -> 00:23:40.000
これらは両方ともひもです。

00:23:40.000 -> 00:23:44.000
次はCMIOExtensionDeviceです。

00:23:44.000 -> 00:23:48.000
ストリームを管理し、必要に応じて追加または削除します。

00:23:48.000 -> 00:23:57.000
お使いのデバイスは複数のストリームを表示できますが、AVFoundationは最初の入力ストリーム以外のすべてを無視していることに注意してください。

00:23:57.000 -> 00:24:11.000
デバイスを作成するときは、デバイスソース、ローカライズされた名前、UUIDとしてのデバイスID、およびオプションでレガシーID文字列を提供します。

00:24:11.000 -> 00:24:16.000
これらのプロパティは、AVFoundationまで浸透します。

00:24:16.000 -> 00:24:23.000
デバイスのlocalizedNameは、AVCaptureDeviceのlocalizedNameになります。

00:24:23.000 -> 00:24:34.000
指定されたデバイスIDは、レガシーDeviceIDも提供しない限り、AVCaptureDeviceのuniqueIdentifierになります。

00:24:34.000 -> 00:24:44.000
DALプラグインをモダナイズし、以前に出荷したuniqueIdentifierとの下位互換性を維持する必要がある場合にのみ、これを提供する必要があります。

00:24:44.000 -> 00:24:52.000
レガシーデバイスIDを提供すると、AVCaptureDeviceはそれを一意の識別子として使用します。

00:24:52.000 -> 00:25:08.000
CMIOExtensionDevice を使用して CMIOExtensionDevice を作成します。これは、オプションで deviceModel などの他のプロパティを実装できます。これは、同じモデルのすべてのカメラで同じである必要があります。

00:25:08.000 -> 00:25:16.000
isSuspendedは、プライバシーアイリスがある場合など、デバイスが一時停止状態に入る可能性がある場合に実装する必要があります。

00:25:16.000 -> 00:25:24.000
Appleのラップトップの内蔵カメラは、クラムシェルが閉じられると停止状態になります。

00:25:24.000 -> 00:25:33.000
デバイスのトランスポートタイプは、USB、Bluetooth、Firewireなど、接続方法を明らかにします。

00:25:33.000 -> 00:25:40.000
最後に、マイクがカメラと物理的にペアリングされている場合は、リンクされたデバイスとして公開できます。

00:25:40.000 -> 00:25:44.000
これらのプロパティはすべて読み取り専用です。

00:25:44.000 -> 00:25:52.000
次は、CMIOExtensionで重い作業を行う、非常に重要なCMIOExtensionStreamです。

00:25:52.000 -> 00:26:01.000
ビデオフォーマットを公開し、有効なフレームレートを定義し、アクティブなフォーマットを設定します。

00:26:01.000 -> 00:26:11.000
ホストタイムクロックなどの標準クロックを使用するか、生成する各バッファのタイミングを駆動するために独自のカスタムクロックを提供します。

00:26:11.000 -> 00:26:18.000
そして最も重要なことは、サンプルバッファをクライアントに送信することです。

00:26:18.000 -> 00:26:24.000
拡張ストリームソースは、CMIOExtensionStreamFormatsを公開します。

00:26:24.000 -> 00:26:28.000
それらはAVCaptureDeviceFormatsになります。

00:26:28.000 -> 00:26:35.000
クライアントは、アクティブなフォーマットインデックスを読み書きして、アクティブなフォーマットを変更することができます。

00:26:35.000 -> 00:26:39.000
フレーム持続時間は、最大フレームレートに相当します。

00:26:39.000 -> 00:26:46.000
そして、最大フレーム持続時間は、最小フレームレートと同じです。

00:26:46.000 -> 00:26:51.000
DALプラグインの世界は、DALコントロールと呼ばれる4番目のインターフェースを公開しています。

00:26:51.000 -> 00:27:00.000
プラグイン開発者は、これらを使用して、自動露出、明るさ、シャープネス、パン、ズームなどの機能を公開します。

00:27:00.000 -> 00:27:08.000
強力ですが、一貫性なく実装されているため、アプリ開発者がそれらを使用することは困難です。

00:27:08.000 -> 00:27:13.000
CMIOExtensionアーキテクチャでは、DALコントロールの交換は提供していません。

00:27:13.000 -> 00:27:17.000
代わりに、すべてが財産です。

00:27:17.000 -> 00:27:23.000
プロバイダー、デバイス、およびストリームレベルで多くの標準プロパティについてすでに学習しました。

00:27:23.000 -> 00:27:32.000
CIFilterCamのデモで行ったように、独自のカスタムプロパティを作成してアプリレイヤーに伝播することもできます。

00:27:32.000 -> 00:27:41.000
CoreMedia IOのCプロパティインターフェイスは、C構造体を使用して、プロパティのセレクタ、スコープ、および要素を識別します。

00:27:41.000 -> 00:27:45.000
これらはその住所と見なされます。

00:27:45.000 -> 00:27:53.000
セレクタは、カスタムのcustなど、4文字のコードとしてのプロパティの名前です。

00:27:53.000 -> 00:28:00.000
スコープはグローバル、入力、または出力にすることができ、要素は任意の数値にすることができます。

00:28:00.000 -> 00:28:03.000
主な要素は常にゼロです。

00:28:03.000 -> 00:28:12.000
CMIOExtensionsを使用すると、プロパティアドレス要素をカスタムプロパティ名にコーディングすることで、プロパティを旧世界にブリッジできます。

00:28:12.000 -> 00:28:24.000
まず、文字4cc_、次にセレクタ、スコープ、要素をアンダースコアで区切られた4つの文字コードとして。

00:28:24.000 -> 00:28:30.000
この方法を使用すると、任意の文字列またはデータ値をアプリレイヤーに通信できます。

00:28:30.000 -> 00:28:41.000
AVFoundationはカスタムプロパティでは動作しないため、構成アプリがカスタムプロパティと連携する必要がある場合は、CoreMedia IO C APIに固執する必要があります。

00:28:41.000 -> 00:28:44.000
それが私たちのAPIのハイレベルな見方です。

00:28:44.000 -> 00:28:49.000
では、出力デバイスについて話しましょう。

00:28:49.000 -> 00:29:01.000
DALプラグインのあまり知られていない機能は、カメラ（出力デバイス）の反対を提示する能力であり、それを提供するのではなく、アプリからビデオをリアルタイムで消費します。

00:29:01.000 -> 00:29:04.000
これはCoreMedia IOの「O」部分です。

00:29:04.000 -> 00:29:07.000
入力と出力。

00:29:07.000 -> 00:29:11.000
出力デバイスは、プロビデオの世界では一般的です。

00:29:11.000 -> 00:29:25.000
いくつかの一般的な用途は、ビデオ信号が外部レコーダーに送信されるプリントツーテープ、またはSDI入力を備えたプロデッキなどのリアルタイムプレビュー監視です。

00:29:25.000 -> 00:29:31.000
注意すべき重要なことの1つは、出力デバイスにはAVFoundation APIと同等のものがないことです。

00:29:31.000 -> 00:29:39.000
出力デバイスにフレームを送信するには、CoreMedia IO C APIを直接使用する必要があります。

00:29:39.000 -> 00:29:47.000
CMIOExtensionストリームは、ソースまたはシンクのいずれかの方向で作成されます。

00:29:47.000 -> 00:29:50.000
シンクストリームはアプリからデータを消費します。

00:29:50.000 -> 00:29:56.000
クライアントは、サンプルバッファを単純なキューに挿入することで、シンクストリームをフィードします。

00:29:56.000 -> 00:30:09.000
これは、拡張機能のconsumeSampleBuffer呼び出しに変換され、そのバッファを消費したら、notifyScheduledOutputChangedで通知します。

00:30:09.000 -> 00:30:13.000
出力デバイスに固有のストリームプロパティがいくつかあります。

00:30:13.000 -> 00:30:23.000
主に、キューのサイジング、開始前にバッファリングするフレーム数、およびすべてのデータが消費されたときのシグナリングを扱います。

00:30:23.000 -> 00:30:28.000
さて、その日の5番目と最後のトピックです。

00:30:28.000 -> 00:30:36.000
プレゼンテーションの前半で、私はDALプラグインアーキテクチャのこの図を示し、その多くのセキュリティ問題を強調しました。

00:30:36.000 -> 00:30:43.000
私たちはカメラ拡張機能でこれらの欠点に対処し、その継続的な開発に全力を尽くしています。

00:30:43.000 -> 00:30:46.000
彼らは前進する道です。

00:30:46.000 -> 00:30:49.000
では、それはDALプラグインにとってどういう意味ですか?

00:30:49.000 -> 00:30:53.000
それは終わりが近いことを意味します。

00:30:53.000 -> 00:31:01.000
macOS 12.3以降、DALプラグインはすでに廃止されているため、ビルド時にコンパイル警告が表示されます。

00:31:01.000 -> 00:31:04.000
それは良いスタートですが、それだけでは不十分です。

00:31:04.000 -> 00:31:11.000
レガシーDALプラグインの読み込みが許可されている限り、カメラアプリは依然として危険にさらされます。

00:31:11.000 -> 00:31:26.000
セキュリティの脆弱性に完全に対処し、すべてのユーザーにとってシステムをより堅牢にするために、macOS Venturaの次のメジャーリリースでDALプラグインを完全に無効にする予定です。

00:31:26.000 -> 00:31:28.000
これはあなたにとってどういう意味ですか?

00:31:28.000 -> 00:31:30.000
さて、メッセージが明確であることを願っています。

00:31:30.000 -> 00:31:38.000
現在DALプラグインを維持している場合は、今がカメラ拡張機能へのコードの移植を開始する時です。

00:31:38.000 -> 00:31:41.000
そして、どのような摩擦に遭遇したか教えてください。

00:31:41.000 -> 00:31:45.000
私たちはこれらの問題に対処し、豊富な機能セットを提供することを熱望しています。

00:31:45.000 -> 00:31:48.000
私たちはあなたと一緒に働くことを本当に楽しみにしています。

00:31:48.000 -> 00:31:53.000
これで、macOS用のカメラ拡張機能に関する今日のプレゼンテーションは終了です。

00:31:53.000 -> 00:31:58.000
あなたがMacにもたらす新鮮で創造的なカメラ体験を見るのが待ちきれません。

00:31:58.000 -> 23:59:59.000
そして、あなたがそれを楽しんでいることを願っています。

