WEBVTT

00:00:01.000 -> 00:00:11.000
アーネスト:こんにちは、ようこそ。

00:00:11.000 -> 00:00:15.000
私の名前はアーネストで、ScreenCaptureKitチームのソフトウェアエンジニアです。

00:00:15.000 -> 00:00:25.000
過去数年間、私たちは皆、しばしば画面共有を伴うリモートコラボレーションにより依存してきました。

00:00:25.000 -> 00:00:40.000
その上、OBS Studioのような録画アプリケーションを使用したストリーミングゲームプレイ、およびコンテンツ作成全体は、人々の教育とエンターテイメントのための継続的に成長している分野です。

00:00:40.000 -> 00:00:48.000
これを念頭に置いて、パフォーマンスと堅牢なスクリーンキャプチャに対する開発者のニーズを満たすフレームワークを作成しました。

00:00:48.000 -> 00:00:51.000
ScreenCaptureKitに会いましょう!

00:00:51.000 -> 00:01:00.000
ScreenCaptureKitは、アプリケーションの画面共有体験を作成するのに役立つように設計された、macOSのまったく新しいフレームワークです。

00:01:00.000 -> 00:01:10.000
ScreenCaptureKitは、開発者がアプリケーションのニーズに合わせて制御およびトグルを使用して、キャプチャするコンテンツを選択できるAPIを提供します。

00:01:10.000 -> 00:01:15.000
また、すべてのフィルターとコントロールをその場で更新できます。

00:01:15.000 -> 00:01:27.000
このフレームワークは、グローバルなセーフガードでプライバシーを念頭に置きながら、ディスプレイのネイティブ解像度とフレームレートまで高品質とパフォーマンスを提供します。

00:01:27.000 -> 00:01:32.000
このセッションでは、ScreenCaptureKitフレームワークを使い始めるお手伝いをします。

00:01:32.000 -> 00:01:40.000
基本を説明したら、より高度なトピックについては「ScreenCaptureKitを次のレベルに引き上げる」をご覧ください。

00:01:40.000 -> 00:01:45.000
まず、フレームワークの主な機能について説明します。 フレームワークの主な機能について説明します。

00:01:45.000 -> 00:01:51.000
次に、APIの概要で主要なScreenCaptureKit構造について説明します。

00:01:51.000 -> 00:01:56.000
次に、フィルターと設定でストリームを設定する方法を紹介します。

00:01:56.000 -> 00:02:03.000
そして最後に、ビデオとオーディオのサンプルをアプリケーションにストリーミングする方法を説明します。

00:02:03.000 -> 00:02:07.000
ScreenCaptureKitの主な機能から始めましょう。

00:02:07.000 -> 00:02:13.000
ScreenCaptureKitでは、共有またはフィルタリングするコンテンツの種類を指定できます。

00:02:13.000 -> 00:02:25.000
ディスプレイ、アプリケーション、ウィンドウ、およびそれに付随するオーディオの任意の組み合わせから画面コンテンツをキャプチャできます。

00:02:25.000 -> 00:02:44.000
ScreenCaptureKitは、ピクセルフォーマット、色空間、フレームレート、解像度、オーディオ側ではサンプルレートやチャンネル数などのコントロールなど、さまざまな開発者コントロールをサポートしています。

00:02:44.000 -> 00:02:54.000
また、これらのフィルタと構成はすべてその場で調整できるため、アプリケーション設計の柔軟性が向上します。

00:02:54.000 -> 00:03:13.000
また、ディスプレイのネイティブ解像度とフレームレートまで最大48kHzのステレオとビデオサンプルのオーディオサンプルを提供するために、ScreenCaptureKitはパフォーマンスに焦点を当てており、既存のキャプチャ方法よりも低いCPUオーバーヘッドでMac GPUのパワーを活用します。

00:03:13.000 -> 00:03:23.000
もちろん、ScreenCaptureKitはプライバシーを念頭に置いて構築されており、フレームワークを使用するすべてのアプリケーションにグローバルなプライバシー保護を提供します。

00:03:23.000 -> 00:03:34.000
フレームワークは、ビデオおよびオーディオコンテンツをキャプチャする前に同意を必要とし、選択はシステム環境設定の画面録画プライバシー設定に保存されます。

00:03:34.000 -> 00:03:41.000
ScreenCaptureKitが何であるかを見たので、APIで最も重要な概念をいくつか紹介します。

00:03:41.000 -> 00:03:45.000
ScreenCaptureKitフレームワークはSCStreamを中心としています。

00:03:45.000 -> 00:03:58.000
SCStreamは、startやstopなどの制御メソッドを処理し、SCShareableContent、SCContentFilter、SCStreamConfigurationとともに作成されます。

00:03:58.000 -> 00:04:04.000
これらのオブジェクトは、キャプチャするコンテンツとキャプチャ方法を決定します。

00:04:04.000 -> 00:04:13.000
作成して開始すると、メディアサンプルはSCStreamOutputプロトコルを介してアプリケーションに配信されます。

00:04:13.000 -> 00:04:17.000
それについては後で詳しく説明します。

00:04:17.000 -> 00:04:24.000
では、APIを使用してアプリケーションでストリームを設定する方法を紹介します。

00:04:24.000 -> 00:04:30.000
ストリームを設定するときに慣れ親しんだいオブジェクトは次のとおりです。

00:04:30.000 -> 00:04:37.000
これらは、キャプチャするものと、キャプチャの品質とパフォーマンスを決定するオブジェクトです。

00:04:37.000 -> 00:04:44.000
最初に入りたいのはSCShareableContentです。

00:04:44.000 -> 00:04:52.000
このデスクトップには、ウィンドウ、アプリケーション、およびディスプレイ自体があります。

00:04:52.000 -> 00:05:01.000
ScreenCaptureKitには、共有したいコンテンツを構築するために使用できる、これらのそれぞれに対応するクラスがあります。

00:05:01.000 -> 00:05:05.000
まず、SCDisplayを見てみましょう。 見てみましょう。

00:05:05.000 -> 00:05:19.000
ScreenCaptureKitは、ディスプレイ識別子とサイズプロパティの幅と高さを含む読み取り専用プロパティを使用して、ディスプレイをSCDisplaysに分類します。

00:05:19.000 -> 00:05:29.000
ディスプレイ内には、多くの異なる実行中のアプリケーションがあり、これらのそれぞれが対応するSCRunningApplicationを持つことになります。

00:05:29.000 -> 00:05:41.000
SCRunningApplicationsには、バンドル識別子、アプリケーション名、プロセス識別子などのアプリケーションレベルの情報の読み取り専用プロパティがあります。

00:05:41.000 -> 00:05:49.000
この例では、KeynoteとSafari用のSCRunningApplicationがあります。

00:05:49.000 -> 00:05:53.000
そしてもちろん、これらのアプリケーションにはウィンドウがあります。

00:05:53.000 -> 00:06:08.000
これらのウィンドウには、ウィンドウID、フレーム、タイトル、ウィンドウが画面上にあるか最小化されているかなど、ウィンドウを定義する読み取り専用プロパティを持つ対応するSCWindowがあります。

00:06:08.000 -> 00:06:12.000
SCWindowには、独自のアプリケーションもあります。

00:06:12.000 -> 00:06:22.000
この場合、両方のSafari SCWindowsは同じSafari所有アプリケーションを持つことになります。

00:06:22.000 -> 00:06:32.000
SCWindows、SCRunningApplications、およびSCDisplaysが組み合わさって、SCShareableContentで共有できるコンテンツを提供します。

00:06:32.000 -> 00:06:41.000
デバイス上のすべての共有可能なコンテンツのリストを取得するか、特定のパラメータを指定することができます。

00:06:41.000 -> 00:06:49.000
人々が共有したいものを選択できるように、画面上にあるすべてのアプリケーションとウィンドウを一覧表示したいとします。

00:06:49.000 -> 00:06:54.000
さて、ScreenCaptureKitにはそのためのシンプルなAPIがあります。

00:06:54.000 -> 00:07:00.000
この短いコードスニペットは、developer.apple.comで入手可能なキャプチャサンプルコードからのものです。

00:07:00.000 -> 00:07:12.000
画面上にあるウィンドウのみが、関連するSCWindows、SCApplications、SCDisplaysを含むSCShareableContentで返されます。

00:07:12.000 -> 00:07:18.000
そして、共有可能なコンテンツができ、フィルターを作成できます。

00:07:18.000 -> 00:07:37.000
SCContentFiltersには、主に2つのタイプがあります。複数のディスプレイを移動する際にウィンドウをキャプチャする表示に依存しないウィンドウフィルターと、特定のウィンドウとアプリケーションを含めるか除外するオプションを持つ表示依存フィルターです。

00:07:37.000 -> 00:07:43.000
ここでの簡単な注意点は、オーディオキャプチャはアプリケーションレベルでのみフィルタリングできるということです。

00:07:43.000 -> 00:07:53.000
フィルタが何であるかを示すために、いくつかの例を紹介します。基調講演ウィンドウの共有にしか興味がないと想像してみてください。

00:07:53.000 -> 00:08:00.000
ディスプレイ間を移動するウィンドウをキャプチャする、ディスプレイに依存しないウィンドウフィルターを選択します。

00:08:00.000 -> 00:08:07.000
ディスプレイ上のすべてのコンテンツを共有したい場合でも、除外したい特定のコンテンツがあるかもしれません。

00:08:07.000 -> 00:08:16.000
たとえば、独自のキャプチャアプリケーションを除外することで、ミラーのホール効果を回避したいと思うでしょう。

00:08:16.000 -> 00:08:24.000
また、特定のウィンドウやアプリケーションに機密情報がある可能性があり、それをキャプチャからも除外したいと思うでしょう。

00:08:24.000 -> 00:08:34.000
これらのシナリオはすべてSCContentFilterによって処理されるので、コードに飛び込んでこれを行う方法を見てみましょう。

00:08:34.000 -> 00:08:38.000
これは私が以前に示したコードスニペットです。

00:08:38.000 -> 00:08:46.000
共有可能なコンテンツが照会された後、コードはキャプチャサンプルアプリと同じbundleIdentifierを持つアプリケーションを探します。

00:08:46.000 -> 00:08:54.000
次に、表示依存コンテンツフィルタは、ストリームからアプリを除外します。

00:08:54.000 -> 00:09:02.000
コンテンツフィルターに加えて、ScreenCaptureKitはストリームごとに調整できる品質とパフォーマンスのコントロールを提供します。

00:09:02.000 -> 00:09:08.000
これらのコントロールはSCStreamConfigurationで設定できます。

00:09:08.000 -> 00:09:16.000
ビデオコントロールの一部には、出力解像度、フレームレート、およびマウスカーソルを表示するかどうかが含まれます。

00:09:16.000 -> 00:09:23.000
オーディオ側では、オーディオを有効にしたり、サンプルレートを変更したり、チャンネル数を調整したりできます。

00:09:23.000 -> 00:09:29.000
これらのパラメータが機能する可能性のあるいくつかのシナリオを案内します。

00:09:29.000 -> 00:09:43.000
メモやスプレッドシートなど、テキストの明瞭さが重要な低モーション画面コンテンツを共有する場合は、キャプチャの出力解像度を毎秒10フレームで4kに設定します。

00:09:43.000 -> 00:09:48.000
また、コンテンツにはオーディオがないため、オーディオを無効にしておくことができます。

00:09:48.000 -> 00:10:04.000
しかし、最近の休暇のビデオを共有するなど、ハイモーションコンテンツの場合、出力解像度を1080pに下げ、1秒あたりのフレーム数を60に増やすことで、解像度よりもフレームレートを優先する必要があります。

00:10:04.000 -> 00:10:10.000
また、カーソルの動きが気を散らす可能性があるため、カーソルを非表示にすることをお勧めします。

00:10:10.000 -> 00:10:16.000
また、より没入感のある体験のために、オーディオキャプチャを有効にすることもできます。

00:10:16.000 -> 00:10:24.000
これらのコントロールはすべて、SCStreamConfigurationのさまざまなプロパティで設定できます。

00:10:24.000 -> 00:10:29.000
ハイモーションコンテンツを共有するための1つの可能な構成を次に示します。

00:10:29.000 -> 00:10:34.000
このコードサンプルでは、キャプチャの出力解像度が1080pに設定されています。

00:10:34.000 -> 00:10:42.000
次に、毎秒60フレームでキャプチャするために、最小フレーム間隔を1/60に設定します。

00:10:42.000 -> 00:10:47.000
そして最後に、ストリーム設定はカーソルを非表示にします。

00:10:47.000 -> 00:11:00.000
オーディオ側では、まずcaptsAudioをtrueに設定してオーディオを有効にし、次にサンプルレートを48kHzに設定し、チャンネル数を2に設定します。

00:11:00.000 -> 00:11:09.000
SCContentFilterとSCStreamConfigurationを使用すると、アプリケーションのニーズに合わせてスクリーンキャプチャを設定するために必要な情報があります。

00:11:09.000 -> 00:11:15.000
一緒にSCStreamを作成できるようになりました。

00:11:15.000 -> 00:11:18.000
概要に戻りましょう。

00:11:18.000 -> 00:11:23.000
目的のフィルタと設定でストリームを初期化する必要があります。

00:11:23.000 -> 00:11:29.000
また、エラーを処理するためにオプションのデリゲートを渡すこともできます。

00:11:29.000 -> 00:11:38.000
設定が完了したら、スタートキャプチャを呼び出すことができ、ScreenCaptureKitは利用可能なときにサンプルをSCStreamに提供します。

00:11:38.000 -> 00:11:43.000
フィルターと設定を作成すると、コードでストリームを開始するのは簡単です。

00:11:43.000 -> 00:11:47.000
お見せしましょう。

00:11:47.000 -> 00:11:54.000
もう一度、必要なフィルタと設定で、SCStreamオブジェクトを初期化できます。

00:11:54.000 -> 00:12:01.000
キャプチャサンプルプロジェクトでは、selfはエラー処理デリゲートとして渡されます。

00:12:01.000 -> 00:12:06.000
SCStreamが作成されると、startCaptureを呼び出すことができます。

00:12:06.000 -> 00:12:16.000
ストリームを初期化して開始したら、次のステップはメディアサンプルをアプリケーションに取得することです。

00:12:16.000 -> 00:12:22.000
オーディオとビデオのサンプルは、CMSampleBuffersの形でアプリケーションに送信されます。

00:12:22.000 -> 00:12:32.000
ストリームからこれらのメディアサンプルを取得するには、SCStreamOutputプロトコルを実装するオブジェクトをストリームに追加する必要があります。

00:12:32.000 -> 00:12:38.000
ストリーム出力を追加するときは、ハンドラーキューを指定することもできます。

00:12:38.000 -> 00:12:47.000
これは、サンプルを余分なディスパッチを必要とせずに特定のキューで配信したい場合に便利です。

00:12:47.000 -> 00:12:54.000
キューを指定しない場合、デフォルトのキューが使用されます。

00:12:54.000 -> 00:13:02.000
ストリームが開始され、出力が追加されると、ScreenCaptureKitは新しいサンプルが利用可能になったときにコールバックを提供します。

00:13:02.000 -> 00:13:09.000
では、メディアサンプルをコードで入手する方法を紹介します。

00:13:09.000 -> 00:13:17.000
これは、新しいメディアサンプルが利用可能になったときに呼び出されるSCStreamOutputProtocolの実装です。

00:13:17.000 -> 00:13:25.000
ScreenCaptureKitは、これらのサンプルをCMSampleBuffersとして提供し、ストリームとサンプルタイプを提供します。

00:13:25.000 -> 00:13:32.000
サンプルバッファハンドラを実装した後、streamOutputを追加するだけです。

00:13:32.000 -> 00:13:44.000
そして、必要な形式で、必要なコンテンツを含むストリームからのメディアサンプルがアプリケーションに配信されます。

00:13:44.000 -> 00:13:53.000
ScreenCaptureKitはCMSampleBuffersの形でサンプルを提供するので、その使い方について少し話しましょう。

00:13:53.000 -> 00:13:58.000
ビデオ側では、CMSampleBufferはIOSurfaceにバックアップされています。

00:13:58.000 -> 00:14:06.000
ScreenCaptureKitは、SCStreamFrameInfoのCMSampleBufferへの添付ファイルも提供します。

00:14:06.000 -> 00:14:12.000
この添付ファイルは、あなたが受け取っているビデオサンプルに関する情報を提供します。

00:14:12.000 -> 00:14:15.000
ストリームの現在の状態のフレームステータスを確認します。

00:14:15.000 -> 00:14:19.000
完全なフレームステータスは、新しいビデオフレームがあることを示します。

00:14:19.000 -> 00:14:26.000
アイドルフレームステータスは、ビデオサンプルが変更されていないことを意味するので、新しいIOSurfaceはありません。

00:14:26.000 -> 00:14:35.000
それ以外の場合、提供されるサンプルはCMSampleBufferと同じなので、既存のCMSampleBufferユーティリティを使用できます。

00:14:35.000 -> 00:14:41.000
ScreenCaptureKitには、フィルタリングされた画面のオーディオとビデオコンテンツを取得するのに役立つAPIが含まれています。

00:14:41.000 -> 00:14:48.000
さらに、このフレームワークは、アプリケーションのニーズに合わせてさまざまな開発者コントロールを提供します。

00:14:48.000 -> 00:14:56.000
また、あなたが作成するさまざまなスクリーンキャプチャ体験を始めるために、いくつかの基本についても取り上げました。

00:14:56.000 -> 00:15:06.000
ScreenCaptureKitのリリースにより、古いキャプチャフレームワークCGDisplayStreamとCGWindowListは今後廃止されます。

00:15:06.000 -> 00:15:11.000
このScreenCaptureKitの紹介で、あなたが私と同じくらい興奮していることを願っています!

00:15:11.000 -> 00:15:18.000
より高度なトピックを見る準備ができたら、「ScreenCaptureKitを次のレベルに引き上げる」に進んでください。

00:15:18.000 -> 00:15:20.000
見てくれてありがとう!

00:15:20.000 -> 23:59:59.000
。

