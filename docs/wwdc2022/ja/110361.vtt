WEBVTT

00:00:00.000 -> 00:00:15.000
スージー：こんにちは、「Xcode Cloudの高速で信頼性の高いテストを承認」へようこそ。

00:00:15.000 -> 00:00:18.000
私はスージーで、XCTestに取り組んでいます。

00:00:18.000 -> 00:00:24.000
このセッションでは、Xcode Cloudのテストを開始する最も効果的な方法を共有します。

00:00:24.000 -> 00:00:30.000
私たちのチームは、すべての開発者にとって強力なツールとなるようにXcode Cloudを設計しました。

00:00:30.000 -> 00:00:34.000
実際、私たちはXcode自体をテストするためにそれを使用し、私はそれが大好きです。

00:00:34.000 -> 00:00:41.000
Xcode Cloudの私のお気に入りの機能の1つは、特定のテストスイートを大幅に広げる機能です。

00:00:41.000 -> 00:01:10.000
クラウドで実行するほとんどのテストを設定することで、iPhone、iPad、Apple Watch、Apple TV、Macなどの多様なプラットフォームを活用し、さまざまなテストプラン構成を実行するために、さまざまなオペレーティングシステムのバージョンを実行するなど、複数の宛先でテストを実行する実用的な方法ができ、アドレスやスレッドサニタイザーなどのランタイム分析ツールが可能になります。

00:01:10.000 -> 00:01:16.000
このような徹底的なテストスイートに合格したら、コードが出荷の準備ができていると確信できます。

00:01:16.000 -> 00:01:27.000
テストをXcode Cloudにオフロードすることで、開発者のコード、コンパイル、テストのデスクトップサイクルに影響を与えることなく、より広範なテストを実行できます。

00:01:27.000 -> 00:01:34.000
この拡張されたテストスイートでは、信頼性の低いテストが増える可能性があります。

00:01:34.000 -> 00:01:37.000
この状況は管理できなくなる可能性があります。

00:01:37.000 -> 00:01:42.000
そのため、信頼性を確保することが不可欠です。

00:01:42.000 -> 00:01:53.000
信頼性に加えて、このような多数のテストも、継続的インテグレーションプロセスへの影響を制限するために効率的に実行する必要があります。

00:01:53.000 -> 00:01:55.000
まず、信頼性について取り上げましょう。

00:01:55.000 -> 00:02:00.000
Food Truckを使用してXcode Cloudのより信頼性の高いテストを作成する方法を実演します。

00:02:00.000 -> 00:02:06.000
フードトラックは、タップとスワイプをおいしいドーナツに変換するアプリです。

00:02:06.000 -> 00:02:15.000
Xcode Cloudでテストスイートを実行することで、すべてのAppleプラットフォームが私のお気に入りのドーナツ、スプリンクル付きチョコレートの注文をサポートしていることを検証することができます。

00:02:15.000 -> 00:02:21.000
Xcodeクラウドワークフローの各改善が特定され、実証されます。

00:02:21.000 -> 00:02:36.000
Xcode Cloudワークフローを使い始める方法の詳細については、「Meet Xcode Cloud」をご覧ください。より信頼性の高いテストを作成するための最初のステップは、各テストのセットアップと解体が徹底されていることを確認することです。

00:02:36.000 -> 00:02:43.000
Xcode Cloudで実行されるテストは、開発者の当初の仮定を満たさない可能性のある新しいシミュレータを利用します。

00:02:43.000 -> 00:02:50.000
テストコードで時々見られるいくつかのデバイス構成の仮定を特定しましょう。

00:02:50.000 -> 00:02:54.000
特定のテストは、特定の日時に依存する場合があります。

00:02:54.000 -> 00:02:58.000
たとえば、サーバーは別のタイムゾーンで実行されている可能性があります。

00:02:58.000 -> 00:03:02.000
テストはタイムゾーンに固有であることを避けるべきです。

00:03:02.000 -> 00:03:09.000
数値の書式設定や言語の方向性などのロケールベースの値は、予期しない結果につながる可能性があります。

00:03:09.000 -> 00:03:14.000
シミュレータのロケールを明示的に設定することで、この問題を回避してください。

00:03:14.000 -> 00:03:21.000
もう1つの問題のある仮定は、インターネットアクセスなどの特定のデバイスの許可に依存していることです。

00:03:21.000 -> 00:03:28.000
単体テストでデバイスの権限をモックし、UIテストでアラートハンドラを使用するのが最善です。

00:03:28.000 -> 00:03:32.000
最後に、いくつかのテストはプリロードされたデータに依存します。

00:03:32.000 -> 00:03:37.000
たとえば、テストでは、空のドキュメントディレクトリがあることを期待できます。

00:03:37.000 -> 00:03:46.000
シミュレータを明示的に設定することは時々最も簡単な選択ですが、テストのセットアップ方法を強化することは一般的により堅牢です。

00:03:46.000 -> 00:03:50.000
例えば、フードトラックはメニューファイルに依存します。

00:03:50.000 -> 00:03:58.000
セットアップ機能でトラックオブジェクトをインスタンス化する一環として、ドーナツメニュー項目を含む模擬データファイルを生成します。

00:03:58.000 -> 00:04:08.000
後続のテストの準備のためにティアダウン方法に頼るのではなく、セットアップ方法ですべての状態の準備を確立することをお勧めします。

00:04:08.000 -> 00:04:15.000
多くの場合、読み取り専用ファイルはリポジトリにチェックインし、後でテストでアクセスできます。

00:04:15.000 -> 00:04:26.000
ただし、これらのファイルを構築する必要がある場合、Xcode Cloudは、複数のテストがアクセスできるようにファイルを一度生成できるカスタムビルドスクリプトの実行をサポートしています。

00:04:26.000 -> 00:04:34.000
スクリプトの設定方法の詳細については、「高度なXcode Cloudワークフローをカスタマイズする」をご覧ください。

00:04:34.000 -> 00:04:38.000
これにより、適切なシミュレータのセットアップが終了します。

00:04:38.000 -> 00:04:43.000
それでは、前提条件を満たさないテストの処理方法を取り上げましょう。

00:04:43.000 -> 00:04:52.000
XCTSkipは、XCTest Runnerに現在のテストの実行を中止し、スキップとしてマークするように指示するエラーです。

00:04:52.000 -> 00:04:58.000
これは、まだサポートされていないOSバージョンまたはデバイスタイプをバイパスするために使用できます。

00:04:58.000 -> 00:05:06.000
また、環境変数を設定して、ステージングまたは本番環境に固有のテストをスキップすることで、XCTSkipを活用することもできます。

00:05:06.000 -> 00:05:12.000
環境変数を使用してテストフローを制御する方法を見てみましょう。

00:05:12.000 -> 00:05:22.000
環境変数は、デバイス上のXCTestテストランナーアプリとxcodebuildを実行しているテストホストの両方にパラメータを提供できます。

00:05:22.000 -> 00:05:29.000
Xcode Cloudでは、TEST_RUNNER_の接頭辞が付いた環境変数がXCTestテストランナーに渡されます。

00:05:29.000 -> 00:05:35.000
このプレフィックスは、変数がコードで利用可能になる前に削除されます。

00:05:35.000 -> 00:05:48.000
たとえば、BASE_URLという名前のテストコードの変数は、TEST_RUNNER_BASE_URLという名前の環境変数として渡されます。

00:05:48.000 -> 00:05:51.000
テスト計画には、テストコードと同じ形式が必要です。

00:05:51.000 -> 00:05:56.000
つまり、TEST_RUNNER_プレフィックスを追加しません。

00:05:56.000 -> 00:06:00.000
環境変数は、テストコードのどこでも参照できます。

00:06:00.000 -> 00:06:08.000
たとえば、XCTSkipと一緒に使用して、本番環境にいるときに実際にドーナツを注文するためのテストをスキップすることができます。

00:06:08.000 -> 00:06:11.000
もちろん、お腹が空いていない限り。

00:06:11.000 -> 00:06:22.000
テストプランやXcodeクラウドユーザーインターフェイスなど、複数の場所で環境変数を再定義すると、予期しない結果につながる可能性があることを覚えておくことが重要です。

00:06:22.000 -> 00:06:31.000
この特定のケースでは、Xcode Cloudの環境変数は、プロジェクトのテスト計画で指定されているものよりも優先されます。

00:06:31.000 -> 00:06:41.000
テストコード内で環境変数を参照しているので、Xcode Cloudユーザーインターフェイスでその値を設定できます。

00:06:41.000 -> 00:06:48.000
これを行うには、クラウドレポートに移動し、フードトラックをControlキーを押しながらクリックします。

00:06:48.000 -> 00:06:57.000
ワークフロー内の環境変数を編集するには、コンテキストメニューで「ワークフローの管理」を選択します。

00:06:57.000 -> 00:07:03.000
統合ワークフローを具体的に編集しているので、ダブルクリックします。

00:07:03.000 -> 00:07:19.000
これで、サイドバーで「環境」を選択し、シートの中央の「環境変数」の下に、変数の名前と値を追加できます。

00:07:19.000 -> 00:07:28.000
Xcodeクラウドワークフローで環境変数を設定する代わりに、代わりにテストプラン内で設定できます。

00:07:28.000 -> 00:07:31.000
この例では、まだテスト計画はありません。

00:07:31.000 -> 00:07:43.000
テストプランを有効にするには、スキームエディタを開き、サイドバーで「テスト」を選択し、「テストプランを使用するように変換」をクリックします。

00:07:43.000 -> 00:07:47.000
さて、今、私が「フードトラック」と呼んだテスト計画があります。

00:07:47.000 -> 00:07:54.000
環境変数を追加するには、テストプランをクリックしてエディタを開く必要があります。

00:07:54.000 -> 00:07:58.000
上部付近では、「テスト」と「設定」のどちらかを選択できます。

00:07:58.000 -> 00:08:02.000
「設定」を選択しましょう。

00:08:02.000 -> 00:08:10.000
次に、「引数」セクションで、「環境変数」をクリックして変数を追加します。

00:08:10.000 -> 00:08:18.000
変数の名前と値を入力できるポップアップが表示されます。

00:08:18.000 -> 00:08:21.000
今、私たちのテストは本番環境ではスキップされます。

00:08:21.000 -> 00:08:28.000
テストのスキップの詳細については、「XCTSkip your tests」をご覧ください。

00:08:28.000 -> 00:08:36.000
XCTSkipを制御するための環境変数の使用について説明したので、期待のタイムアウトについて話しましょう。

00:08:36.000 -> 00:08:41.000
予期しないタイムアウトにより、テストが失敗する可能性があります。

00:08:41.000 -> 00:08:48.000
たとえば、これは遅いサーバーや過度に不安なユーザーインターフェイステストの結果である可能性があります。

00:08:48.000 -> 00:08:59.000
いずれかの問題を解決するための1つのアプローチは、インタラクションが終了するのに十分な時間があるように、XCTestExpectationのタイムアウトを増やすことです。

00:08:59.000 -> 00:09:07.000
この例では、OrderDonutのタイムアウトを5秒から10秒に増やして、サーバーが応答する時間を増やします。

00:09:07.000 -> 00:09:16.000
通常、代わりにアプリとテストコードのタイムアウト処理の両方をasync/awaitに置き換えるのが望ましい。

00:09:16.000 -> 00:09:24.000
このアプローチにより、タイムアウトなしで待機コールが終了するまでテストを一時停止できます。

00:09:24.000 -> 00:09:29.000
時間に依存するテストを解決したので、テストスイート内でテストの失敗を処理しましょう。

00:09:29.000 -> 00:09:37.000
たとえば、メンテナンスのためにダウンしているステージング環境内のサービスに依存するテストがあります。

00:09:37.000 -> 00:09:42.000
このテストを無効にしたりスキップしたりする代わりに、XCTExpectFailureを使用できます。

00:09:42.000 -> 00:09:56.000
XCTExpectFailureを使用すると、テストは正常に実行され、結果は次のように変換されます。テストの失敗は予想される失敗として報告され、スイート内の失敗したテストは合格として報告されます。

00:09:56.000 -> 00:10:02.000
このアプローチは、予想される障害によって発生するノイズを排除します。

00:10:02.000 -> 00:10:06.000
例えば、testOrderDonutは失敗しています。

00:10:06.000 -> 00:10:15.000
ドーナツの注文を提供するサービスが現在メンテナンス中であることを知っているので、XCTExpectFailureにここに呼び出しを追加しました。

00:10:15.000 -> 00:10:23.000
XCTExpectFailureの詳細については、「XCTestで予想される失敗を受け入れる」をご覧ください。

00:10:23.000 -> 00:10:31.000
予想される失敗を宣言したので、テストの繰り返しを活用してコードを実証し、信頼性の低いコードを診断しましょう。

00:10:31.000 -> 00:10:42.000
テストの繰り返しは、最初の失敗、最初の成功、または統計結果を待つために同じテストを複数回実行するツールです。

00:10:42.000 -> 00:10:55.000
たとえば、私たちのデスクでは、コードをチェックインする前に、最初のアプリとテストコードの信頼性を確認するために、新しいコードとテストケースを複数回繰り返し実行します。

00:10:55.000 -> 00:11:00.000
testOrderDonutの成功率が80%しかないことを検出することができました。

00:11:00.000 -> 00:11:02.000
えっと、ああ！

00:11:02.000 -> 00:11:08.000
障害が存在することを知って、私たちは今、バグをローカルで診断するためにrepeat-until-failureモードを使用しています。

00:11:08.000 -> 00:11:13.000
これは、テストの繰り返しを利用する別の方法です。

00:11:13.000 -> 00:11:24.000
信頼性の低い外部サービスに依存するテストでは、失敗の再試行の繰り返しポリシーを活用して、テストが成功することを確認することをお勧めします。

00:11:24.000 -> 00:11:30.000
テストの再試行は強力なアプローチですが、可能であれば外部サービスをモックすることが望ましいです。

00:11:30.000 -> 00:11:36.000
モックサービスの利点には、決定論的な信頼性とスピードが含まれます。

00:11:36.000 -> 00:11:46.000
依存関係を嘲笑する方法を学ぶには、「テストのヒントとコツ」をご覧ください。テストの繰り返しを有効にする方法を探ってみましょう。

00:11:46.000 -> 00:11:56.000
テストプランでテストの繰り返しを有効にするには、テストプランエディタに戻り、「設定」を選択します。

00:11:56.000 -> 00:12:04.000
次に、「テスト実行」セクションの下に、テストの繰り返しモードを選択するポップアップがあります。

00:12:04.000 -> 00:12:13.000
この場合、主に信頼性の低い外部サービスを回避するために使用される「失敗のやり直し」を選択します。

00:12:13.000 -> 00:12:16.000
これで、テスト繰り返しモードが有効になりました。

00:12:16.000 -> 00:12:24.000
テストの繰り返しを活用する方法の詳細については、「テストの繰り返しで信頼性の低いコードを診断する」を参照してください。

00:12:24.000 -> 00:12:30.000
そこで、テストの信頼性を向上させるために使用できるさまざまなツールを調べました。

00:12:30.000 -> 00:12:36.000
品質テストの作成の詳細については、「失敗するテストを書く」を参照してください。

00:12:36.000 -> 00:12:40.000
私たちのテストが信頼できるようになったので、それらを速く実行させましょう!

00:12:40.000 -> 00:12:44.000
より迅速な結果を達成するために、多くの設定オプションが存在します。

00:12:44.000 -> 00:12:51.000
テストスイートの実行にかかる時間を短縮するために、できる限りのことをしましょう。

00:12:51.000 -> 00:12:56.000
パフォーマンスを向上させるために使用するテクニックの1つは、テストを複数のテストプランに分割することです。

00:12:56.000 -> 00:13:00.000
時には、2つで十分です。

00:13:00.000 -> 00:13:10.000
プルリクエストの各オープンまたは更新の一部として検証するために、削減されたテストセットを特定できます。

00:13:10.000 -> 00:13:23.000
たとえば、単一のプラットフォームのユーザーインターフェイステストの重要なサブセットと一緒にユニットテストを実行できます。

00:13:23.000 -> 00:13:32.000
サポートされているすべてのプラットフォームでテストのフルセットはまだ実行できますが、現在はバックグラウンドで実行され、プルリクエストをブロックしません。

00:13:32.000 -> 00:13:40.000
このアプローチにより、継続的な統合プロセスをタイムリーに保ちながら、テストや新しいプラットフォームを追加することができます。

00:13:40.000 -> 00:13:43.000
選択した一連のテストを実行するためのワークフローを設定しましょう。

00:13:43.000 -> 00:13:51.000
この例では、すでに「プルリクエスト」と呼ばれる新しいテストプランを作成し、テストプランエディタで開いています。

00:13:51.000 -> 00:13:55.000
上部付近では、「テスト」と「構成」のどちらかを選択できます。

00:13:55.000 -> 00:14:01.000
「テスト」を選択しましょう。

00:14:01.000 -> 00:14:07.000
ここでは、プルリクエストを検証するテストのサブセットを選択しました。

00:14:07.000 -> 00:14:21.000
次に、「プルリクエスト」テスト計画を実行するためのワークフローを設定するために、テストをスキップするための環境変数を追加したときと同じように、Xcode Cloud Manage Workflowsに戻ります。

00:14:21.000 -> 00:14:28.000
新しいワークフローを作成するには、「ワークフローの管理」シートの左下にある「追加」ボタンをクリックします。

00:14:28.000 -> 00:14:34.000
簡単にするために、ワークフローに「プルリクエスト」という名前を付け、開始条件を選択しましょう。

00:14:34.000 -> 00:14:39.000
このワークフローは、テストに失敗したチェックインを防ぎたいと考えています。

00:14:39.000 -> 00:14:48.000
サイドバーの「開始条件」の右側にある「追加」ボタンをクリックします。

00:14:48.000 -> 00:14:51.000
開始条件のオプションを示すメニューが表示されます。

00:14:51.000 -> 00:14:56.000
私たちの場合は、「プルリクエストの変更」を選択します。

00:14:56.000 -> 00:15:00.000
これで、プルリクエストの開始条件があります。

00:15:00.000 -> 00:15:05.000
テストを実行するには、フードトラックアプリを最初に構築する必要があります。

00:15:05.000 -> 00:15:08.000
これを行うには、ビルドアクションを追加する必要があります。

00:15:08.000 -> 00:15:14.000
再びサイドバーの「開始条件」の下で、アクションを追加しましょう。

00:15:14.000 -> 00:15:24.000
「アクション」の横にある「追加」ボタンをクリックし、コンテキストメニューから「ビルド」を選択します。

00:15:24.000 -> 00:15:29.000
アプリを構築するアクションが実行されたので、テストを実行するために別のアクションを追加します。

00:15:29.000 -> 00:15:36.000
再びアクションの追加をクリックしますが、今回は「テスト」を選択します。

00:15:36.000 -> 00:15:39.000
素晴らしい、私たちにはテストアクションがあります。

00:15:39.000 -> 00:15:42.000
実行するテストプランを選択しましょう。

00:15:42.000 -> 00:15:46.000
シートの中央には、テスト用のドロップダウンがあります。

00:15:46.000 -> 00:15:53.000
ここでは、「プルリクエスト」テストプランを選択できます。

00:15:53.000 -> 00:15:54.000
すごい！

00:15:54.000 -> 00:15:58.000
これで、ワークフローはプルリクエストでテストプランを実行するように構成されています。

00:15:58.000 -> 00:16:05.000
完全なテストスイートをスケジュール通りに実行する2番目のワークフローを作成するには、同様の手順に従うことができます。

00:16:05.000 -> 00:16:15.000
ただし、今回は開始条件を「ブランチのスケジュール中」に選択し、ワークフローを設定してフルスイートテストプランを実行します。

00:16:15.000 -> 00:16:22.000
Xcode Cloudで設定されたワークフローと、関連するテストプランの両方を実行しています。

00:16:22.000 -> 00:16:28.000
テスト計画の詳細については、「Xcodeでのテスト」をご覧ください。

00:16:28.000 -> 00:16:32.000
これで、プルリクエストとスケジュールされたワークフローテストセットを作成しました。

00:16:32.000 -> 00:16:37.000
スピードのためにできるもう1つの改善点は、テストを同時に実行することです。

00:16:37.000 -> 00:16:43.000
デフォルトでは、Xcode Cloudはプラットフォームを並行してテストします。

00:16:43.000 -> 00:16:52.000
さらに、Xcodeがターゲットとテストオブジェクトのクラスレベルで並行してテストを実行できるようにすることができます。

00:16:52.000 -> 00:17:04.000
Xcodeで並列テスト実行を有効にするには、再度テストプランエディタに移動し、「テスト」を選択します。

00:17:04.000 -> 00:17:11.000
次に、「フードトラックテスト」テストバンドルの右側にある「オプション」ボタンをクリックします。

00:17:11.000 -> 00:17:16.000
オプションの1つにより、可能な限り「並行して実行」することができます。

00:17:16.000 -> 00:17:23.000
サーバーに十分なコアがある場合、複数のターゲットとテストオブジェクトクラスを同時に実行できます。

00:17:23.000 -> 00:17:29.000
では、このオプションを有効にして、テストスイートのターンアラウンドタイムを改善しましょう。

00:17:29.000 -> 00:17:33.000
今、私たちのテストは並行して実行するように設定されています。

00:17:33.000 -> 00:17:39.000
テストは、並列実行を利用するために独立して実行するように設計する必要があることに注意してください。

00:17:39.000 -> 00:17:47.000
適切なセットアップと分解は、信頼性の高いテストケースの動作に不可欠です。

00:17:47.000 -> 00:17:52.000
テストが並行して実行されているので、暴走テストに注意を向ける時が来ました。

00:17:52.000 -> 00:17:56.000
暴走テストは、タイムリーに終わらないテストです。

00:17:56.000 -> 00:18:03.000
いくつかの例には、無限ループや、障害が発生したサーバーを無期限に待つことが含まれます。

00:18:03.000 -> 00:18:07.000
テスト計画で実行時間手当を設定することで、これらのテストを停止できます。

00:18:07.000 -> 00:18:15.000
実行時間許容量は、タイムアウトエラーで失敗する前にテストが実行される秒数を指定します。

00:18:15.000 -> 00:18:23.000
これにより、テストスイートが個々のテストで立ち往生するのを防ぎます。

00:18:23.000 -> 00:18:26.000
この場合、5回目のテストは何らかの理由で立ち往生しました。

00:18:26.000 -> 00:18:33.000
実行時間手当を設定することで、この暴走テストは最終的に停止され、失敗としてマークされました。

00:18:33.000 -> 00:18:38.000
その後、XCTestテストランナーは、スイートで次のテストを実行し続けました。

00:18:38.000 -> 00:18:44.000
テスト計画の実行時間枠を設定しましょう。

00:18:44.000 -> 00:18:53.000
実行時間枠を設定するには、テストプランエディタに移動し、「構成」を選択します。

00:18:53.000 -> 00:19:00.000
「テスト実行」カテゴリでは、「テストタイムアウト」を有効にし、待機する秒数を指定できます。

00:19:00.000 -> 00:19:05.000
デフォルトは600秒であることに注意してください。

00:19:05.000 -> 00:19:12.000
最大実行時間手当を設定した後、1回の暴走テストでテストワークフローが中断されなくなります。

00:19:12.000 -> 00:19:19.000
たとえば、一晩のテストスイートは時間通りに完了し、有用な結果の完全なセットを提供できるようになりました。

00:19:19.000 -> 00:19:26.000
イェーイ！私たちはついにそれらの暴走テストを中止したので、次の改善に進むことができます。

00:19:26.000 -> 00:19:34.000
覚えているかもしれませんが、テストの繰り返しを活用して、外部サービスに依存するテストの信頼性を高めることができました。

00:19:34.000 -> 00:19:41.000
失敗時に再試行するようにテスト計画を設定し、十分な繰り返し値を選択しました。

00:19:41.000 -> 00:19:47.000
ただし、これらの繰り返しは、テストスイートの実行にかかる時間を増やすことができます。

00:19:47.000 -> 00:19:54.000
不必要な繰り返しは無駄であり、テストの繰り返し値をより低い数に最適化したいと思うかもしれません。

00:19:54.000 -> 00:20:01.000
さらに、プルリクエストワークフローから問題のあるテストを完全に削除することを検討してください。

00:20:01.000 -> 00:20:05.000
これを行う方法を見てみましょう。 

00:20:05.000 -> 00:20:11.000
テストプランエディタのテスト繰り返し設定に戻りましょう。

00:20:11.000 -> 00:20:16.000
以前は、テストの繰り返しモードを「失敗時に再試行」に設定しました。

00:20:16.000 -> 00:20:20.000
これで、「最大テストの繰り返し」の値を調整できます。

00:20:20.000 -> 00:20:29.000
たとえば、5%の時間で失敗する外部サーバーに依存するテストに対して、最大10回の試行を許可することを選択したかもしれません。

00:20:29.000 -> 00:20:32.000
ほとんどの場合、私たちは最初の試みで成功します。

00:20:32.000 -> 00:20:39.000
ただし、同じテストに無関係なバグがある場合は、毎回失敗し、10回の試行すべてを使用します。

00:20:39.000 -> 00:20:45.000
たぶん3回の試みで十分で、より良い選択でしょう。

00:20:45.000 -> 00:20:55.000
パフォーマンスを向上させるために再試行を減らしたいが、以前は、場合によっては信頼性を向上させるために再試行を増やすことを推奨していたことに注意してください。

00:20:55.000 -> 00:21:02.000
そのため、この最小限に選択された値は、これらのテストを確実に実行するのに十分でなければなりません。

00:21:02.000 -> 00:21:07.000
これにより、より迅速な結果が得られるための設定が終了します。

00:21:07.000 -> 00:21:14.000
より速いテスト結果を得るためのより詳細な説明については、「より速いテスト結果を得る」をチェックしてください。

00:21:14.000 -> 00:21:19.000
要約すると、Xcode Cloudのテストを開始する最も効果的な方法を取り上げました。

00:21:19.000 -> 00:21:28.000
私たちは、無関係な失敗を回避し、コードの変更を迅速に検証できるように、信頼性と高速の両方をテストすることに焦点を当てました。

00:21:28.000 -> 00:21:32.000
ありがとう、そして私はあなたがWWDCの残りの部分を楽しむことを願っています!

00:21:32.000 -> 23:59:59.000
。

