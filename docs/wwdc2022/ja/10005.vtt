WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップヒップミュージック♪

00:00:03.000 -> 00:00:09.000
♪

00:00:09.000 -> 00:00:13.000
こんにちは、WWDCへようこそ。

00:00:13.000 -> 00:00:16.000
私の名前はカリムで、HealthKitのエンジニアです。

00:00:16.000 -> 00:00:29.000
HealthKitフレームワークは、素晴らしい健康体験を構築するための基盤を提供し、Apple Watchには、あなたのために物事を監視する多くの健康と安全機能が満載されています。

00:00:29.000 -> 00:00:38.000
最も人気のあるものの1つは睡眠追跡であり、より詳細な睡眠データをキャプチャするために更新しています。

00:00:38.000 -> 00:00:44.000
今年はHealthKitに他の素晴らしい追加もあります。

00:00:44.000 -> 00:00:51.000
Swift asyncでデータのクエリを容易にするために、APIを強化しました。

00:00:51.000 -> 00:00:57.000
私たちは、より豊かなワークアウト表現でワークアウトを改善しています。

00:00:57.000 -> 00:01:07.000
また、物理的な処方箋のデジタルコピーを含む、視力処方箋を保存するためのサポートを追加しています。

00:01:07.000 -> 00:01:14.000
これらすべてのアップデートと、あなたのアプリがそれらをどのように活用できるかについてもっとお話しできることを嬉しく思います。

00:01:14.000 -> 00:01:17.000
始めましょう！

00:01:17.000 -> 00:01:33.000
睡眠は、私たちの体と心が充電することを可能にする不可欠な機能であり、私はApple Watchを使用して睡眠スケジュールを管理し、睡眠を理解し、改善するのに役立つ洞察を得るのが大好きです。

00:01:33.000 -> 00:01:41.000
今年は、睡眠段階を導入することで、睡眠追跡をさらに良くしています。

00:01:41.000 -> 00:01:53.000
Apple Watchは、あなたが眠っているときに通過するすべての異なる睡眠段階を自動的に追跡し、このデータは健康アプリからアクセスでき、HealthKitに保存されます。

00:01:53.000 -> 00:02:01.000
もちろん、アプリは睡眠段階のデータを読み取って保存することができます。

00:02:01.000 -> 00:02:12.000
Apple Watchまたはアプリによって保存された睡眠データは、識別子sleepAnalysisでカテゴリサンプルによってHealthKitで表されます。

00:02:12.000 -> 00:02:20.000
レム、コア、ディープの3つの睡眠段階をサポートします。

00:02:20.000 -> 00:02:31.000
睡眠データをHealthKitに保存するときは、特定の睡眠段階で連続した期間ごとに1つのサンプルを作成する必要があります。

00:02:31.000 -> 00:02:35.000
睡眠サンプル値の列挙型はこんな感じです。

00:02:35.000 -> 00:03:09.000
米国睡眠医学アカデミーまたはAASMのスコアリングモデルのステージ1と2に対応するsleepeCoreから始めて、睡眠ステージを表す3つのケースを追加します。AASMスコアリングモデルのステージ3に対応するsleepingDeep。そして最後に、急速な眼球運動ステージに対応するsleepeREM。

00:03:09.000 -> 00:03:24.000
スリープステージを追加したので、sleepingUnspecifiedを支持してスリープケースを廃止しています。これは、ユーザーがスリープ状態にあるが、スリープステージが指定されていないことを示しています。

00:03:24.000 -> 00:03:32.000
更新された睡眠サンプル列挙型により、HealthKitから睡眠段階データを保存して読み取ることができるようになりました。

00:03:32.000 -> 00:03:38.000
特定の段階の睡眠サンプルを読みやすくするために、新しい述語を追加しました。

00:03:38.000 -> 00:03:44.000
REM段階で睡眠サンプルを読みたいとしましょう。

00:03:44.000 -> 00:03:52.000
まず、sleepREMを値として新しい述語ForSamplesメソッドを使用して述語を作成します。

00:03:52.000 -> 00:03:55.000
これで、クエリの作成を開始できます。

00:03:55.000 -> 00:04:02.000
sleepAnalysisサンプルタイプと睡眠段階の述語を使用してクエリの述語を作成します。

00:04:02.000 -> 00:04:07.000
そして、このクエリ述語を使用して、クエリを作成できるようになりました。

00:04:07.000 -> 00:04:13.000
クエリを実行すると、REMステージの睡眠サンプルの配列が返されます。

00:04:13.000 -> 00:04:28.000
ただし、未指定を含むすべての睡眠段階のサンプルを読むことに興味がある場合は、述語を構築するときに新しい.allAsleepValuesを使用するようにアプリを更新することが重要です。

00:04:28.000 -> 00:04:36.000
昨年からHealthKitを見ていない場合、クエリのためのこの短い構文は、あなたにはなじみがないように見えるかもしれません。

00:04:36.000 -> 00:04:44.000
iOS 15.4以降、Swift asyncをサポートするようにクエリAPIを更新しました。

00:04:44.000 -> 00:04:54.000
クエリはHealthKitの不可欠な部分であり、Swift非同期サポートにより、より簡潔な構文で使いやすくなっています。

00:04:54.000 -> 00:05:03.000
クエリを使用すると、HealthKitからさまざまなデータを読み取ったり、述語を使用して結果をフィルタリングしたり、新しいデータが入ってくるのを監視したりできます。

00:05:03.000 -> 00:05:08.000
すべてのクエリはHKQueryのサブクラスです。

00:05:08.000 -> 00:05:20.000
一定期間に消費された総カロリーを知ることに興味があるなら、これらの計算統計を取得するための素晴らしいクエリはHKStatisticsCollectionQueryです。

00:05:20.000 -> 00:05:27.000
最初の結果を取得するには、クエリのinitialResultsHandlerクロージャを設定します。

00:05:27.000 -> 00:05:36.000
また、更新を見ることに興味がある場合は、statisticsUpdateHandlerのクロージャをさらに設定します。

00:05:36.000 -> 00:05:41.000
クエリが開始されると、これらのクロージャは結果とともに呼び出されます。

00:05:41.000 -> 00:05:46.000
Swift asyncのおかげで、私たちはこれをさらにシンプルにしています。

00:05:46.000 -> 00:05:56.000
各クエリには一致するクエリ記述子が追加されるようになったため、HKStatisticsCollectionQueryはHKStatisticsCollectionQuery記述子になります。

00:05:56.000 -> 00:06:02.000
Async result(for:) メソッドを呼び出すだけで、最初の結果が得られます。

00:06:02.000 -> 00:06:16.000
一方、最初の結果を取得し、更新を監視したい場合は、results(for:)を呼び出し、ループスルーして結果を読み取ることができるAsyncSequenceを返します。

00:06:16.000 -> 00:06:24.000
HealthKitは、ワークアウトや消費カロリーなどの関連指標を追跡するのに最適です。

00:06:24.000 -> 00:06:32.000
今週消費したカロリーを調べるには、統計収集クエリ記述子を使用できます。

00:06:32.000 -> 00:06:38.000
まず、カロリーサンプルと一致する述語でクエリ記述子を作成します。

00:06:38.000 -> 00:06:44.000
合計合計が欲しいので、cumativeSumオプションを使用します。

00:06:44.000 -> 00:06:50.000
今週のデータに興味があるので、この日曜日をアンカーデートとして使います。

00:06:50.000 -> 00:06:58.000
そして最後に、カロリーの合計を1週間の間隔で計算したいです。

00:06:58.000 -> 00:07:07.000
クエリ記述子を作成したら、healthStoreオブジェクトでresult(for:)を呼び出すだけです。

00:07:07.000 -> 00:07:13.000
返されたstatisticsCollectionオブジェクトは、現在のデータのスナップショットを提供します。

00:07:13.000 -> 00:07:25.000
しかし、カロリーの変化に合わせてライブ更新が必要な場合は、結果(for:)を呼び出して、返された非同期シーケンスをループして結果を読み取るのと同じくらい簡単です。

00:07:25.000 -> 00:07:32.000
更新の監視が終わったら、ループから抜け出すだけで、クエリが停止します。

00:07:32.000 -> 00:07:36.000
では、ワークアウトについて話しましょう。

00:07:36.000 -> 00:07:48.000
HealthKitは、カジュアルな自転車に乗る場合でも、レースで限界まで自分自身をプッシュする場合でも、ワークアウトとそのすべての関連指標を節約するのに最適な場所です。

00:07:48.000 -> 00:07:53.000
そして、多くの場合、ワークアウトには複数の異なる活動が含まれる場合があります。

00:07:53.000 -> 00:08:05.000
インターバルトレーニングで同じ運動を繰り返したり、水泳、サイクリング、ランニングを含むトライアスロンレースに参加したりすることができます。

00:08:05.000 -> 00:08:19.000
これらのタイプのワークアウトと各アクティビティの関連統計をキャプチャできるように、iOS 16とwatchOS 9のワークアウトAPIを更新しています。

00:08:19.000 -> 00:08:24.000
これは私が最近行ったスイムバイクランニングワークアウトのタイムラインです。

00:08:24.000 -> 00:08:34.000
私は水泳から始め、その後、トレーニングのサイクリング部分の準備に少し時間をかけ、最終的に走りました。

00:08:34.000 -> 00:08:41.000
各アクティビティはHKWorkoutActivityオブジェクトで表されます。

00:08:41.000 -> 00:08:49.000
各ワークアウトアクティビティは、アクティビティタイプを含む独自のワークアウト構成で作成されます。

00:08:49.000 -> 00:08:56.000
ワークアウトアクティビティには、アクティビティ中に発生したイベントのリストがあります。

00:08:56.000 -> 00:09:08.000
また、各アクティビティの統計を読むことができます。これは、特定のアクティビティ中に何が起こったのかを分析することだけに興味がある場合に最適です。

00:09:08.000 -> 00:09:16.000
私のタイムラインに戻ると、私の3つのアクティビティは適切なアクティビティタイプで設定されています。

00:09:16.000 -> 00:09:19.000
活動は時間内に重複することはできません。

00:09:19.000 -> 00:09:27.000
また、各活動の間に移行期間がある可能性があるため、連続している必要はありません。

00:09:27.000 -> 00:09:39.000
移行期間中に何が起こったかを分析することに興味がある場合は、トランジションタイプでトランジションごとにHKWorkoutActivityを作成できます。

00:09:39.000 -> 00:09:47.000
これらのアクティビティはすべて、outworkActivitiesプロパティの下のHKWorkoutオブジェクトで保存されます。

00:09:47.000 -> 00:10:04.000
HKWorkoutBuilderを使用してHealthKitにワークアウトを追加する場合、アクティビティの追加は、ワークアウト構成、開始日と終了日、オプションのメタデータを含むHKWorkoutActivityオブジェクトを作成するのと同じくらい簡単です。

00:10:04.000 -> 00:10:10.000
そして、ワークアウトビルダーでaddWorkoutActivityを呼び出すだけです。

00:10:10.000 -> 00:10:21.000
Apple Watchでは、ワークアウトセッションを使用してスイムバイクランニングのワークアウトを追跡し、関連するワークアウトビルダーを使用してワークアウトをHealthKitに保存できます。

00:10:21.000 -> 00:10:23.000
私のワークアウトのタイムラインに戻りましょう。

00:10:23.000 -> 00:10:31.000
Apple Watchでこのワークアウトを追跡するには、ワークアウトセッションとビルダーを設定する必要があります。

00:10:31.000 -> 00:10:38.000
私はswimBikeRunタイプでワークアウト設定を作成することから始めます。

00:10:38.000 -> 00:10:43.000
次に、設定を使用してHKWorkoutSessionを作成します。

00:10:43.000 -> 00:10:53.000
ワークアウトの開始時に、セッションでstartActivityを呼び出し、関連するワークアウトビルダーでstartCollectionを呼び出します。

00:10:53.000 -> 00:11:05.000
セッションとビルダーの準備ができたので、水泳トレーニングの構成と開始日でbeginNewActivityメソッドを使用して最初のアクティビティを追加できます。

00:11:05.000 -> 00:11:15.000
各アクティビティの開始時に、ワークアウトビルダーのデータソースを更新して、興味のあるデータタイプのみを収集する必要があります。

00:11:15.000 -> 00:11:21.000
これは水泳活動なので、水泳距離を集めたいです。

00:11:21.000 -> 00:11:28.000
アクティビティの最後に、終了日を記載してendCurrentActivityを呼び出します。

00:11:28.000 -> 00:11:40.000
水泳からサイクリングへの移行期間の分析に興味があるので、水泳が終わったらすぐに新しい移行活動を開始します。

00:11:40.000 -> 00:11:53.000
繰り返しますが、これはアクティビティの始まりであるため、もはや関連性がないため、スイミング距離の収集を無効にするためにビルダーデータソースを更新します。

00:11:53.000 -> 00:11:58.000
サイクリングが始まる直前に移行活動を終了します。

00:11:58.000 -> 00:12:03.000
ワークアウトの残りのアクティビティを同じように追跡できます。

00:12:03.000 -> 00:12:10.000
ワークアウトの終了時に、セッションを終了すると、ランニングアクティビティも終了します。

00:12:10.000 -> 00:12:16.000
その後、HKWorkoutオブジェクトを保存して返すワークアウトビルダーを完成させることができます。

00:12:16.000 -> 00:12:29.000
返されたワークアウトを使用して、totalEnergyBurnedやtotalDistanceなどの関連するメトリックの一部を読み、ワークアウトの概要をアプリに表示できます。

00:12:29.000 -> 00:12:35.000
しかし、この小さなプロパティセットはもはや十分ではありません。

00:12:35.000 -> 00:12:43.000
totalSwimmingStrokeCountはすべてのトレーニングに関連するものではなく、一部のトレーニングはより多くの指標を収集する場合があります。

00:12:43.000 -> 00:12:56.000
あらゆる種類のワークアウトのメトリクスを読みやすくするために、特定の数量タイプの統計を返す新しい方法を支持して、これらのプロパティを廃止しています。

00:12:56.000 -> 00:13:08.000
リマインダーとして、この方法はHKWorkoutActivityでも利用でき、活動中に起こったことだけに集中することができます。

00:13:08.000 -> 00:13:20.000
これらの統計は、HKWorkoutBuilderまたはHKLiveWorkoutBuilderを使用している場合にのみ、ワークアウトで収集されたサンプルから自動的に計算されます。

00:13:20.000 -> 00:13:32.000
このより豊かなワークアウト表現に加えて、分析や視覚化を推進する際に興味のあるワークアウトのみを照会するのに役立つ新しい述語セットもあります。

00:13:32.000 -> 00:13:42.000
例を挙げると、これは各活動の平均心拍数を含む私の最近のトレーニングのリストです。

00:13:42.000 -> 00:13:50.000
平均心拍数が150を超える高強度のアクティビティでワークアウトを見つけたいです。

00:13:50.000 -> 00:14:00.000
まず、ワークアウト活動に作用する新しい述語ForWorkoutActivitiesメソッドを使用して述語を作成することから始めます。

00:14:00.000 -> 00:14:05.000
平均心拍数を毎分150拍以上にしたい。

00:14:05.000 -> 00:14:13.000
次に、ワークアウトを照会したいので、心拍数述語をワークアウト述語の中にラップします。

00:14:13.000 -> 00:14:17.000
次に、その述語を使用してクエリを作成します。

00:14:17.000 -> 00:14:26.000
そして、クエリ記述子の結果（for：healthStore）メソッドを呼び出して、述語に一致するワークアウトのリストを取得します。

00:14:26.000 -> 00:14:31.000
そして、それは私が興味を持っているトレーニングだけを照会することができる方法です。

00:14:31.000 -> 00:14:36.000
私の最近のトレーニングの1つは、4つのランニング間隔で構成されていました。

00:14:36.000 -> 00:14:42.000
HKWorkoutActivityを使用することは、これらの間隔をキャプチャするのに最適な方法です。

00:14:42.000 -> 00:14:50.000
インターバルワークアウトのすべてのアクティビティがワークアウトと同じアクティビティタイプであることを確認する必要があります。

00:14:50.000 -> 00:14:57.000
したがって、ランニングワークアウトの場合、すべてのアクティビティは.runningタイプで設定されます。

00:14:57.000 -> 00:15:04.000
ワークアウトアクティビティを使用して間隔を追跡する利点の1つは、各間隔の統計を取得できることです。

00:15:04.000 -> 00:15:14.000
これらのアップデートにより、ワークアウトには、その活動とそれらを取り巻くコンテキストのより包括的な画像が含まれるようになりました。

00:15:14.000 -> 00:15:33.000
さらに豊かな画像を提供するために、Apple Watch Series 6、SE、およびそれ以降で自動的に収集される新しいランニングメトリック、つまりランニングストライドの長さやワット単位の電力などのメトリックを導入しています。

00:15:33.000 -> 00:15:37.000
水泳トレーニングでは、SWOLFスコアを追加しています。

00:15:37.000 -> 00:15:45.000
これは、特定の長さで撮影されたストロークの数と、その長さを泳ぐのにかかった時間として定義されます。

00:15:45.000 -> 00:15:55.000
このスコアは、Apple Watchに記録された水泳トレーニングのラップイベントとセグメントイベントごとに計算されます。

00:15:55.000 -> 00:16:09.000
これらの指標はワークアウトを豊かにし、パフォーマンスをよりよく理解することができますが、ワークアウトが終了した後に記録されるもう1つの重要な指標は、心拍数の回復です。

00:16:09.000 -> 00:16:23.000
これは、運動後に心拍数がどれくらい速く下がるかの推定値であり、ストレス後に心臓がどのように回復するかを理解し、潜在的な健康上の問題を明らかにするために使用できます。

00:16:23.000 -> 00:16:28.000
iOS 16では、新しいカーディオリカバリーデータタイプを導入しています。

00:16:28.000 -> 00:16:37.000
ヘルスアプリからアクセスでき、アプリはこのデータをHealthKitで読み取り、保存することができます。

00:16:37.000 -> 00:16:46.000
心拍数の回復は、識別子.heartRateRecoveryOneMinuteを持つ数量タイプです。

00:16:46.000 -> 00:16:54.000
各心拍数回復サンプルに関する追加のコンテキスト情報をメタデータとして追加できます。

00:16:54.000 -> 00:17:03.000
最近のスイムバイクランニングワークアウトで、私は自分自身を限界まで押し上げ、心拍数の回復率を観察しました。

00:17:03.000 -> 00:17:08.000
トレーニングを完了するのに約3時間半かかりました。

00:17:08.000 -> 00:17:14.000
走っているとき、毎分184拍の最大心拍数に達しました。

00:17:14.000 -> 00:17:20.000
そして、トレーニングの1分後、私の心拍数は50拍下がりました。

00:17:20.000 -> 00:17:33.000
Apple WatchでHKLiveWorkoutBuilderを使用すると、心拍数の回復サンプルと周囲のコンテキストがワークアウト後に自動的にHealthKitに保存されます。

00:17:33.000 -> 00:17:42.000
それ以外の場合は、心拍数回復サンプルを保存するために、.heartRateRecoveryOneMinuteタイプで数量サンプルを作成します。

00:17:42.000 -> 00:17:50.000
心拍数はトレーニングの1分間に50拍下がったので、サンプルの量として設定しました。

00:17:50.000 -> 00:17:54.000
サンプルの開始日と終了日も設定しました。

00:17:54.000 -> 00:18:03.000
次に、回復テストタイプから始めて、追加のコンテキスト情報をメタデータ辞書に入れます。

00:18:03.000 -> 00:18:09.000
私のトレーニングは全面的な努力だったので、テストタイプは.maxExerciseです。

00:18:09.000 -> 00:18:15.000
私のワークアウトはswimBikeRunだったので、それをアクティビティタイプとして設定しました。

00:18:15.000 -> 00:18:23.000
また、HeartRateRecoveryActivity期間キーを使用して、ワークアウト期間を追加することもできます。

00:18:23.000 -> 00:18:32.000
最後に、トレーニング中に観察された最大心拍数を追加します。これは毎分184拍でした。

00:18:32.000 -> 00:18:39.000
これらのアップデートにより、スイムバイクラン、インターバルトレーニングの追跡がこれまで以上に簡単になりました。

00:18:39.000 -> 00:18:52.000
さらに、新しい指標の導入は、ワークアウトのより包括的な画像と、時間の経過とともに進捗状況を評価する新しい方法を提供します。

00:18:52.000 -> 00:19:03.000
活動とフィットネスはすべての人に影響を与えるものですが、ビジョンなど、私たちの多くに触れる健康の他の側面があります。

00:19:03.000 -> 00:19:17.000
実際、Vision Council of Americaによると、米国の成人の約75%が処方眼鏡やコンタクトレンズによる視力矯正に依存しています。

00:19:17.000 -> 00:19:27.000
しかし、これらの処方箋は失うのが簡単で、処方眼鏡やコンタクトレンズを注文するときに持っていなければならないもう1つのことです。

00:19:27.000 -> 00:19:31.000
だから、それらを私たちの電話に入れましょう。

00:19:31.000 -> 00:19:39.000
iOS 16以降、アプリはHealthKitでメガネとコンタクトの処方箋を保存できるようになりました。

00:19:39.000 -> 00:19:45.000
視力処方箋は、visionPrescriptionTypeのサンプルです。

00:19:45.000 -> 00:19:54.000
サンプルの開始日は処方箋の発行日に対応し、終了日は有効期限に対応します。

00:19:54.000 -> 00:20:02.000
オプションで、物理的な処方箋のデジタルコピーをサンプルに添付できます。

00:20:02.000 -> 00:20:10.000
メガネまたはコンタクトの処方箋サンプルは、HKVisionPrescriptionのサブクラスです。

00:20:10.000 -> 00:20:20.000
メガネの場合はHKGlassesPrescriptionサブクラスを使用し、連絡先の場合はHKContactsPrescriptionサブクラスを使用します。

00:20:20.000 -> 00:20:29.000
各メガネ処方箋は、2つのメガネレンズ仕様オブジェクトを使用して作成されます。各目に1つずつ。

00:20:29.000 -> 00:20:36.000
同様に、コンタクト処方箋は2つのコンタクトレンズ仕様オブジェクトで作成されます。

00:20:36.000 -> 00:20:42.000
では、老眼鏡の処方箋をHealthKitに保存しましょう。

00:20:42.000 -> 00:20:48.000
最初のステップは、各目のHKGlassesLensSpecificationを作成することです。

00:20:48.000 -> 00:20:54.000
頂点距離やプリズムなどのいくつかのパラメータはオプションです。

00:20:54.000 -> 00:21:00.000
同じように正しいアイレンズの仕様を作成できます。

00:21:00.000 -> 00:21:09.000
次に、右目と左目のレンズの仕様で眼鏡の処方箋サンプルを作成します。

00:21:09.000 -> 00:21:16.000
この処方箋は私の老眼鏡用なので、説明に追加します。

00:21:16.000 -> 00:21:20.000
それから、私は処方箋でヘルスストアのセーブに電話します。

00:21:20.000 -> 00:21:25.000
そして、私の処方箋はHealthKitに保存されました。

00:21:25.000 -> 00:21:31.000
私もその写真を撮ったので、保存したばかりのサンプルに添付したいと思います。

00:21:31.000 -> 00:21:37.000
添付ファイルはHKAttachmentオブジェクトで表されます。

00:21:37.000 -> 00:21:43.000
HKAttachmentStoreを使用して、添付ファイルを保存して読みます。

00:21:43.000 -> 00:21:50.000
処方箋に添付できるのは、静的な画像またはPDFファイルのみです。

00:21:50.000 -> 00:22:01.000
撮影した写真を処方箋サンプルに添付するには、healthStoreを使用してHKAttachmentStoreオブジェクトを作成することから始めます。

00:22:01.000 -> 00:22:07.000
次に、処方箋サンプルでaddAttachment(to:)を呼び出します。

00:22:07.000 -> 00:22:09.000
添付ファイルの名前を設定しました。

00:22:09.000 -> 00:22:13.000
ここにPNGファイルを添付します。 添付します。

00:22:13.000 -> 00:22:17.000
そして最後に、ファイルのURLを渡します。

00:22:17.000 -> 00:22:30.000
添付したばかりの処方箋には、レンズの仕様だけでなく、私のフルネームや生年月日などの機密情報が含まれています。

00:22:30.000 -> 00:22:40.000
HealthKitの中核的な原則の1つは、プライバシーを保護し、共有するデータを常に管理できるようにすることです。

00:22:40.000 -> 00:22:52.000
添付ファイルを含む処方箋で意図したよりも多くのデータを簡単に共有できるため、処方箋の新しい承認モデルを導入しています。

00:22:52.000 -> 00:22:57.000
読み取り許可は、処方箋オブジェクトごとに個別に付与されます。

00:22:57.000 -> 00:23:07.000
ユーザーは、アプリへのアクセスを許可する処方箋を正確に選択し、いつでも選択を更新できます。

00:23:07.000 -> 00:23:14.000
ビジョン処方オブジェクトの承認を要求するための新しいAPIがあります。

00:23:14.000 -> 00:23:22.000
他のデータタイプと同様に、クエリを使用して、アプリがアクセスできる処方箋を読むことができます。

00:23:22.000 -> 00:23:27.000
特定の処方箋にしか興味がない場合は、述語を使用できます。

00:23:27.000 -> 00:23:37.000
承認を要求するには、visionTypeを使用してhealthStoreのrequestPerObjectRead Authorizationメソッドを呼び出すだけです。

00:23:37.000 -> 00:23:48.000
そうすると、常にアプリに承認プロンプトが表示され、述語に一致するすべての処方箋のリストが表示されます。

00:23:48.000 -> 00:23:56.000
最高のユーザーエクスペリエンスを確保するために、適切なコンテキストで承認を求めていることを確認してください。

00:23:56.000 -> 00:24:05.000
これらは、より良い健康とフィットネス体験を提供するためにアプリを強化するためにHealthKitに追加した新しいもののほんの一部です。

00:24:05.000 -> 00:24:09.000
あなたが次に何を作るかを見るのが待ちきれません。

00:24:09.000 -> 00:24:17.000
素晴らしいWWDCをお過ごしください。ご不明な点がございましたら、開発者フォーラムで喜んでお手伝いします。

00:24:17.000 -> 23:59:59.000
♪

