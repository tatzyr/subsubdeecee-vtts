WEBVTT

00:00:01.000 -> 00:00:12.000
ラム：こんにちは。私の名前はラムです。

00:00:12.000 -> 00:00:15.000
私はアカウントエクスペリエンスチームのエンジニアです。

00:00:15.000 -> 00:00:22.000
同僚のパトリックと一緒に、アプリのAppleでのサインイン体験を強化する方法について話します。

00:00:22.000 -> 00:00:29.000
AppleでサインインがiOS 13で導入されて以来、人々は速くて簡単なアカウント設定とサインインが大好きです。

00:00:29.000 -> 00:00:37.000
わずか数行のコードで、フォームやパスワードなしで、ワンタップのアカウント設定をすばやく有効にできます。

00:00:37.000 -> 00:00:46.000
すべてのAppleアカウントでサインインは、ユーザーのApple IDを保護するためにすでに使用されている強力な2要素認証によって保護されています。

00:00:46.000 -> 00:00:52.000
ユーザーと通信する必要がある場合は、Appleでサインインすると、機能するメールアドレスが提供されます。

00:00:52.000 -> 00:00:56.000
追加の検証は必要ありません。

00:00:56.000 -> 00:01:01.000
Appleでサインインすると、ユーザーが実際に実在する可能性がどの程度あるかを示す指標も提供されます。

00:01:01.000 -> 00:01:04.000
これは詐欺と戦うのに役立ちます。

00:01:04.000 -> 00:01:11.000
また、Appleでサインインすると、仕事や学校で使用している管理対象のApple IDなど、どこでも機能します。

00:01:11.000 -> 00:01:20.000
アプリを職場や学校のアカウントと統合する方法の詳細については、「Discover Sign in with Apple at Work &amp; School」のセッションをご覧ください。

00:01:20.000 -> 00:01:27.000
このセッションでは、Appleでサインインのエクスペリエンスを強化し、合理化する方法について説明します。

00:01:27.000 -> 00:01:34.000
まず、アプリの既存の資格情報をチェックすることで、アカウントの重複を防ぐ方法について説明します。

00:01:34.000 -> 00:01:47.000
次に、Apple IDの資格情報を深く掘り下げてから、資格情報の変更を監視する方法のいくつかについて話し、アカウントの削除などのシナリオを処理する方法について説明します。

00:01:47.000 -> 00:01:54.000
そして最後に、パトリックはウェブやその他のプラットフォームでAppleとサインインを統合する方法について議論します。

00:01:54.000 -> 00:01:56.000
始めましょう。

00:01:56.000 -> 00:02:07.000
Appleでサインインは、従来のユーザー名とパスワードベースの認証に代わる便利で安全な代替手段ですが、ユーザーはパスワードでロック解除されたアカウントを持っている可能性があります。

00:02:07.000 -> 00:02:14.000
したがって、ユーザーがすでに自分のために働くアカウントを持っている場合は、アプリの2番目のアカウントを作成しないことが重要です。

00:02:14.000 -> 00:02:20.000
サインイン中に正しい決定を下すために誰かを導く方法を探ります。

00:02:20.000 -> 00:02:24.000
これは、Appleでサインインを使用するサンプルアプリ「Juice」です。

00:02:24.000 -> 00:02:28.000
ソースコードは、このビデオの関連リンクで見つけることができます。

00:02:28.000 -> 00:02:36.000
Juiceには、従来のメールとパスワードを使用するか、Appleでサインインを使用してサインインできます。

00:02:36.000 -> 00:02:43.000
ユーザーがすでにこれらの資格情報のいずれかを持っている場合は、適切なアカウントにサインインするのに役立ちます。

00:02:43.000 -> 00:02:52.000
まず、既存のパスワード資格情報がログイン画面のキーボードに表示されるように、パスワードの自動入力を実装してください。

00:02:52.000 -> 00:02:57.000
このようにして、ユーザーはワンタップで資格情報を自動入力できます。

00:02:57.000 -> 00:03:03.000
また、パスワードベースのアカウントをAppleでサインインするようにアップグレードするようにユーザーに提供する必要があります。

00:03:03.000 -> 00:03:11.000
アップグレードすると、ユーザーはセキュリティが組み込まれたアカウントを取得し、覚えておくべきパスワードが1つ少なくなります。

00:03:11.000 -> 00:03:16.000
これは、アカウント認証変更拡張機能を使用して実装されます。

00:03:16.000 -> 00:03:25.000
拡張機能ベースのAPIは、ユーザーがAppleでサインインを使用してサインインする方法をアップグレードするためのシームレスなエクスペリエンスを提供します。

00:03:25.000 -> 00:03:36.000
ユーザーのアカウントのセキュリティアップグレードの提供の詳細については、「Appleでサインインを最大限に活用する」と「ワンタップアカウントのセキュリティアップグレード」のドキュメントをご覧ください。

00:03:36.000 -> 00:03:44.000
パスワードの自動入力を提供することとは別に、アプリが起動するとすぐに既存の資格情報を提示することで、さらに一歩進むことができます。

00:03:44.000 -> 00:03:50.000
このようにして、ユーザーはログイン画面に到達する前でも、適切なアカウントを使用してサインインできます。

00:03:50.000 -> 00:03:54.000
認証サービスAPIは、この方法で本当に柔軟です。

00:03:54.000 -> 00:04:04.000
ユーザーがAppleの資格情報でサインインを作成できるようにするだけでなく、APIはパスワードベースの資格情報を含む既存の資格情報を提示することもできます。

00:04:04.000 -> 00:04:06.000
これを採用するのは本当に簡単です。

00:04:06.000 -> 00:04:10.000
これを達成する方法について、いくつかのコードをお調べしましょう。

00:04:10.000 -> 00:04:16.000
すでに認証サービスAPIを使用している場合、このコードは非常によく知られているはずです。

00:04:16.000 -> 00:04:29.000
まず、ASAuthorizationControllerのインスタンスを作成し、承認要求配列にASAuthorizationAppleIDProviderとASAuthorizationPasswordProviderの両方を含めます。

00:04:29.000 -> 00:04:34.000
次に、インターフェイスの表示に役立つデリゲートとオブジェクトを設定する必要があります。

00:04:34.000 -> 00:04:43.000
そして最後に、承認コントローラーのoptionImmediatelyAvailableCredentialsオプションを使用してperformRequestsを呼び出す必要があります。

00:04:43.000 -> 00:04:46.000
このオプションはiOS 16で新しく設定されています。

00:04:46.000 -> 00:04:52.000
これは、デバイスですぐに利用可能な資格情報のみが必要であることをシステムに伝えます。

00:04:52.000 -> 00:04:56.000
これは、アプリの起動時に呼び出されることを特に意図しています。

00:04:56.000 -> 00:05:01.000
以前のiOSバージョンをサポートしたい場合は、performRequestsを使用できます。

00:05:01.000 -> 00:05:06.000
これを行うと、既存の資格情報のリストが表示されます。

00:05:06.000 -> 00:05:15.000
ユーザーは、既存のAppleクレデンシャルでサインインするか、既存のパスワードクレデンシャルのいずれかを選択できるようになりました。

00:05:15.000 -> 00:05:24.000
ユーザーが資格情報を選択すると、システムはASAuthorizationControllerデリゲートでdidCompleteWithAuthorizationを呼び出します。

00:05:24.000 -> 00:05:29.000
ユーザーがAppleアカウントでサインインを選択した場合は、appleIDCredentialを続行します。

00:05:29.000 -> 00:05:35.000
ユーザーがパスワードベースのアカウントを選択した場合は、返されたpasswordCredentialでサインインします。

00:05:35.000 -> 00:05:42.000
ユーザーが既存の資格情報を持っていない場合、APIはAppleアカウントでサインインを作成するユーザーを提示しません。

00:05:42.000 -> 00:05:46.000
代わりに、システムはdidCompleteWithErrorを呼び出します。

00:05:46.000 -> 00:05:50.000
このようなシナリオでは、標準的なログインフローを表示することに戻る必要があります。

00:05:50.000 -> 00:05:57.000
ちなみに、同じ認証サービスAPIは、パスキーでもシームレスに機能します。

00:05:57.000 -> 00:06:05.000
パスワードを置き換える次世代認証技術であるパスキーの詳細については、セッション「パスキーに会う」をチェックしてください。

00:06:05.000 -> 00:06:11.000
ほんの数行のコードで、サインイン体験を最大限に活用できます。

00:06:11.000 -> 00:06:19.000
これで、ユーザーが適切なアカウントを選択するのを手伝うことができ、うまくいけば、システムで重複したアカウントが作成されるのを防ぐことができます。

00:06:19.000 -> 00:06:24.000
次に、Apple IDの資格情報について深く掘り下げたいと思います。

00:06:24.000 -> 00:06:34.000
ご存知のように、Appleでサインインを使用して認証が成功した後に得られる応答は、ASAuthorizationAppleIDCredentialオブジェクトです。

00:06:34.000 -> 00:06:43.000
user、fullName、email、realUserStatus、identityToken、authorizationCodeなどの値が含まれています。

00:06:43.000 -> 00:06:45.000
それぞれを簡単に説明します。

00:06:45.000 -> 00:06:49.000
ユーザーは一意で安定した識別子です。

00:06:49.000 -> 00:06:54.000
これは、開発者チームのすべてのアプリで同じ識別子です。

00:06:54.000 -> 00:06:58.000
これを使用して、システム内のユーザーを一意に識別します。

00:06:58.000 -> 00:07:01.000
必要な場合にのみ、フルネームを尋ねるべきです。

00:07:01.000 -> 00:07:05.000
要求された場合、ユーザーは好きな名前を共有できます。

00:07:05.000 -> 00:07:09.000
ユーザーとコミュニケーションを取りたい場合は、メールを尋ねる必要があります。

00:07:09.000 -> 00:07:14.000
要求された場合、ユーザーはメールアドレスを共有する2つのオプションがあります。

00:07:14.000 -> 00:07:19.000
1つの選択肢は、Apple IDに関連付けられたメールを共有することです。

00:07:19.000 -> 00:07:23.000
もう1つのオプションは、「メールを非表示にする」機能を使用することです。

00:07:23.000 -> 00:07:27.000
これにより、受信トレイにルーティングされる非表示のメールアドレスが作成されます。

00:07:27.000 -> 00:07:31.000
双方向リレーなので、返信も処理できます。

00:07:31.000 -> 00:07:38.000
どのオプションが選択されているかに関係なく、メールアドレスは以前にAppleによって確認されており、すぐに使用できます。

00:07:38.000 -> 00:07:48.000
また、すべてのアカウントに電子メールが関連付けられているわけではないので、要求した場合でも、電子メールに価値がないシナリオを処理する準備をしてください。

00:07:48.000 -> 00:07:53.000
RealUserStatusは、ユーザーが実在する可能性を示す高い信頼度の高い指標です。

00:07:53.000 -> 00:08:01.000
ユーザーのプライバシーを維持しながら、デバイス上の機械学習、アカウント履歴、およびハードウェア認証を使用して計算されます。

00:08:01.000 -> 00:08:04.000
realUserStatusには3つのタイプがあります。

00:08:04.000 -> 00:08:08.000
「おそらく本物」とは、ユーザーが実在の人物のように見えることを意味します。

00:08:08.000 -> 00:08:15.000
CAPTCHAのような追加の不正検証チェックをスキップするなど、このユーザーに最高の体験を提供します。

00:08:15.000 -> 00:08:20.000
「不明」とは、ユーザーが実在の人物であるかどうかをシステムが判断していない場合です。

00:08:20.000 -> 00:08:27.000
追加の検証手順を必要とする情報が限られているアカウントと同様に、このユーザーを信頼してください。

00:08:27.000 -> 00:08:31.000
ユーザーはまだ本物である可能性があるので、アプリの使用をブロックしないでください。

00:08:31.000 -> 00:08:37.000
そして最後に、「サポートされていない」とは、システムがこの決定ができないことを意味します。

00:08:37.000 -> 00:08:47.000
fullName、email、realUserStatusなどのプロパティは、アカウントが初めて作成されたときにのみ返されることを呼びかける必要があります。

00:08:47.000 -> 00:08:59.000
その後のサインイン時に返されないので、システムでアカウントが作成されたことを確認できるまで、フルネームやメールなどのプロパティを安全にキャッシュしてください。

00:08:59.000 -> 00:09:07.000
identityTokenは、ユーザー情報を含むアプリサーバーが必要とするほとんどのデータを含むJSONウェブトークンです。

00:09:07.000 -> 00:09:11.000
これは認証に対する業界標準のアプローチです。

00:09:11.000 -> 00:09:26.000
JSON Webトークン（JWT）は、base-64 URLエンコードされたヘッダー、base-64 URLエンコードされたペイロード、およびAppleによって署名された署名の3つの部分で構成されています。

00:09:26.000 -> 00:09:35.000
応答が改ざんされておらず、実際にApple IDサーバーからのものであることを確認するために、Appleの公開鍵で署名を確認する必要があります。

00:09:35.000 -> 00:09:40.000
また、アプリサーバーがトークンの有効性をチェックすることも同様に重要です。

00:09:40.000 -> 00:09:58.000
ペイロードをデコードしたら、発行者がappleid.apple.comであることを確認し、オーディエンスフィールドがアプリのバンドル識別子であることを確認し、有効期限のタイムスタンプが現在の時刻よりも大きいことを確認して、トークンが有効であることを確認してください。

00:09:58.000 -> 00:10:01.000
件名はユーザー識別子になります。

00:10:01.000 -> 00:10:06.000
ユーザーのメールアドレスを要求した場合は、それも含まれます。

00:10:06.000 -> 00:10:09.000
realUserStatusを見つけることもできます。

00:10:09.000 -> 00:10:15.000
値は「unsupported」の場合は0、「unknown」の場合は1、「おそらく現実」の場合は2になります。

00:10:15.000 -> 00:10:22.000
そして最後に、ノンスが承認要求の作成前に生成されたものと同じであることを確認します。

00:10:22.000 -> 00:10:32.000
ノンスの詳細と、リプレイ攻撃を軽減するための承認プロセスを保護する方法については、「Appleでサインインを最大限に活用する」セッションをご覧ください。

00:10:32.000 -> 00:10:40.000
AuthorizationCodeは、リフレッシュトークンと引き換えにApple IDサーバーを提供できる短命のシングルユーストークンです。

00:10:40.000 -> 00:10:46.000
お使いのシステムがすでにOAuth 2.0のようなオープンスタンダードを使用している場合、これはおなじみかもしれません。

00:10:46.000 -> 00:10:53.000
更新トークンを生成するには、認証/トークンエンドポイントにポストリクエストを送信する必要があります。

00:10:53.000 -> 00:10:59.000
クライアントIDとクライアントシークレットを、受け取ったばかりの承認コードとともに渡します。

00:10:59.000 -> 00:11:05.000
クライアントシークレットの作成方法の詳細な説明は、Apple Developerのドキュメントに記載されています。

00:11:05.000 -> 00:11:14.000
応答では、リフレッシュトークン、アクセストークン、および以前に受け取ったものと同様の新しいIDトークンを取得します。

00:11:14.000 -> 00:11:22.000
期限切れのアクセストークンがある場合は、リフレッシュトークンを使用して、同じエンドポイントを使用して新しいアクセストークンを取得できます。

00:11:22.000 -> 00:11:27.000
また、無効になるまで同じリフレッシュトークンを使い続けることもできます。

00:11:27.000 -> 00:11:35.000
トークンの検証に失敗した場合、またはユーザーのセッションの周りに変更がある場合、リフレッシュトークンは無効になる可能性があります。

00:11:35.000 -> 00:11:42.000
ユーザーセッションといえば、次は、資格情報状態に関する変更の処理と監視について話します。

00:11:42.000 -> 00:11:48.000
IDトークンを確認した後、アプリはユーザーセッションを管理する責任があります。

00:11:48.000 -> 00:11:52.000
ユーザーセッションの変更をトリガーできるさまざまなシナリオがあります。

00:11:52.000 -> 00:12:01.000
たとえば、ユーザーは設定からアプリでApple IDの使用を停止したり、デバイスからサインアウトしたりできます。

00:12:01.000 -> 00:12:10.000
セッションの変更を適切に処理するには、ASAuthorizationAppleIDProviderのgetCredentialState(forUserID:)を呼び出します。

00:12:10.000 -> 00:12:18.000
このAPIは、アプリが起動するとすぐに、または状態を確認したい任意の時点で呼び出すことをお勧めします。

00:12:18.000 -> 00:12:25.000
また、資格情報が取り消されたときにアプリに通知されるように、credentialRevokedNotificationも観察する必要があります。

00:12:25.000 -> 00:12:32.000
状態の変化を観察した場合は、別のユーザーがサインインし、現在のユーザーをアプリからサインアウトしたと仮定する必要があります。

00:12:32.000 -> 00:12:37.000
アプリサーバーをお持ちの場合は、サーバー間通知を購読する必要があります。

00:12:37.000 -> 00:12:42.000
サーバーは、ユーザーとそのアカウントに関する重要な更新を受け取ります。

00:12:42.000 -> 00:12:59.000
次のシナリオで、通知はアプリの各グループに送信されます。ユーザーがメール転送設定を無効にまたは有効にしたとき、ユーザーがアプリでApple IDの使用を停止したとき、またはユーザーがApple IDを完全に削除したとき。

00:12:59.000 -> 00:13:06.000
通知の受信を開始するには、まずApple DeveloperポータルにエンドポイントURLを登録する必要があります。

00:13:06.000 -> 00:13:09.000
すべてのイベントは同じエンドポイントURLに到着します。

00:13:09.000 -> 00:13:14.000
イベントは、Appleによって署名されたJSONウェブトークンとして送信されます。

00:13:14.000 -> 00:13:23.000
メール転送が無効になっている場合、JWTのペイロードで、電子メールが無効なイベントを受け取ります。

00:13:23.000 -> 00:13:29.000
ユーザーがアプリでApple IDの使用を停止すると、同意が取り消されるイベントが表示されます。

00:13:29.000 -> 00:13:34.000
このイベントを受け取ったときに、アクティブなユーザーセッションを無効にすることが重要です。

00:13:34.000 -> 00:13:39.000
また、ユーザーがApple IDを削除すると、アカウント削除イベントが表示されます。

00:13:39.000 -> 00:13:46.000
繰り返しになりますが、アクティブなユーザーセッションを無効にし、プロセスに従ってアカウントを更新してください。

00:13:46.000 -> 00:13:49.000
では、アカウントの削除に集中したいと思います。

00:13:49.000 -> 00:13:55.000
アカウントは私たちのアイデンティティの一部であり、私たちは最も個人的でプライベートなデータの一部を管理するためにそれらを使用します。

00:13:55.000 -> 00:14:01.000
誰かが自分のアカウントを削除したいかもしれないし、あなたのアプリでこれをサポートする必要があります。

00:14:01.000 -> 00:14:09.000
アプリからアカウントの削除を開始する方法を提供する必要があり、削除プロセス全体を管理するのはあなたの責任です。

00:14:09.000 -> 00:14:17.000
ユーザー情報を保存するアプリサーバーがある場合、通常、アプリはユーザーアカウントを削除するようにサーバーに通知します。

00:14:17.000 -> 00:14:22.000
これで、削除プロセスの一部としてAppleとのサインインを含めることができます。

00:14:22.000 -> 00:14:29.000
これは、サーバーがアプリに関連付けられたアカウントを削除するために使用できる新しいRESTエンドポイントを使用して行われます。

00:14:29.000 -> 00:14:32.000
このAPIを簡単に説明させてください。

00:14:32.000 -> 00:14:40.000
アカウントを削除するには、有効な更新トークンまたは有効なアクセストークンのいずれかが必要です。

00:14:40.000 -> 00:14:46.000
どちらのトークンも持っていない場合は、認証/トークンエンドポイントを使用して生成できます。

00:14:46.000 -> 00:14:53.000
いずれかのトークンを取得したら、必要なパラメータでauth/revokeエンドポイントを使用できます。

00:14:53.000 -> 00:14:58.000
リフレッシュトークンを使用する場合は、トークンタイプをREFRESH_TOKENに設定します。

00:14:58.000 -> 00:15:04.000
アクセストークンを使用して削除する場合は、トークンタイプをACCESS_TOKENに設定します。

00:15:04.000 -> 00:15:12.000
応答が成功すると、トークンとユーザーのアクティブなセッションは即座に無効になります。

00:15:12.000 -> 00:15:21.000
削除されると、アプリに戻り、Appleでサインインを使用するユーザーは、アプリで最初にアカウントを作成したときと同様の体験になります。

00:15:21.000 -> 00:15:30.000
それに伴い、私はサインアウトして同僚のパトリックに渡して、ウェブやその他のプラットフォームでAppleでサインインを使用する方法について話し合います。

00:15:30.000 -> 00:15:31.000
パトリック:ありがとう、ラム!

00:15:31.000 -> 00:15:37.000
人々は、AppleでサインインがAppleのすべてのプラットフォームでシームレスに機能する方法が大好きです。

00:15:37.000 -> 00:15:38.000
しかし、それはそこで止まりません。

00:15:38.000 -> 00:15:43.000
Appleでサインインは、ウェブやその他のプラットフォームでもシームレスに機能します。

00:15:43.000 -> 00:15:50.000
ウェブやその他のプラットフォームをサポートするために、Appleでサインインのエクスペリエンスを強化する方法について話し合いましょう。

00:15:50.000 -> 00:15:55.000
Ramが以前にあなたに紹介したJuiceという既存のiOSアプリがあります。

00:15:55.000 -> 00:16:00.000
ウェブに拡大することで、さらに多くのユーザーにJuiceをお届けしたいと考えています。

00:16:00.000 -> 00:16:05.000
似たようなアプリをグループ化する方法について話し合うことから始めましょう。

00:16:05.000 -> 00:16:11.000
ユーザーエクスペリエンスを合理化するために、関連するアプリをグループ化することをお勧めします。

00:16:11.000 -> 00:16:18.000
関連するアプリをグループ化することで、ユーザーはアプリと情報を共有するために一度だけ同意を得る必要があります。

00:16:18.000 -> 00:16:26.000
たとえば、アプリはiOSとmacOSで利用可能かもしれませんが、プラットフォームごとに異なるバンドル識別子を使用します。

00:16:26.000 -> 00:16:29.000
これらのアプリをグループ化することをお勧めします。

00:16:29.000 -> 00:16:35.000
Appleでサインインを使用すると、プライマリアプリとして設定したアプリのアプリアイコンが表示されます。

00:16:35.000 -> 00:16:42.000
あなたのウェブサイトでAppleとのサインインをサポートするためにサービスIDを設定する方法を発見しましょう。

00:16:42.000 -> 00:16:51.000
まず、Apple Developer Portalにログインし、「証明書、識別子、プロファイル」に移動します。

00:16:51.000 -> 00:16:56.000
サービスIDの横にあるラジオボタンを選択し、「続行」をクリックします。

00:16:56.000 -> 00:16:59.000
サービスの説明を入力してください。

00:16:59.000 -> 00:17:04.000
サービスの一意の識別子を入力し、[続行]をクリックします。

00:17:04.000 -> 00:17:10.000
「Appleでサインイン」の横にあるチェックボックスをクリックし、[設定]ボタンをクリックします。

00:17:10.000 -> 00:17:17.000
Web認証設定画面で、ドロップダウンメニューからプライマリアプリIDを選択します。

00:17:17.000 -> 00:17:24.000
次に、あなたのウェブサイトがAppleでサインインをサポートするために使用するドメインとサブドメインを入力します。

00:17:24.000 -> 00:17:32.000
最後に、承認が成功した後、ユーザーをアプリまたはウェブサイトにリダイレクトするために、AppleのリダイレクトURLを入力します。

00:17:32.000 -> 00:17:33.000
それでおそれ！

00:17:33.000 -> 00:17:38.000
ウェブサイトでAppleとのサインインをサポートするようにサービスIDを設定しました。

00:17:38.000 -> 00:17:43.000
あなたのウェブサイトがAppleでサインインをサポートしていることを示すためのボタンが必要です。

00:17:43.000 -> 00:17:50.000
Appleは、Appleボタン画像でサインインを生成するための高度に構成可能なボタンAPIを提供しています。

00:17:50.000 -> 00:17:56.000
これを使用して、選択したボタンをカスタマイズし、アプリやウェブサイトに埋め込みます。

00:17:56.000 -> 00:18:04.000
Apple JSでサインインは、ウェブ上でAppleとサインインの統合をさらに簡単にするシンプルなJavascriptフレームワークです。

00:18:04.000 -> 00:18:10.000
アプリケーションまたはWebサイトでは、Apple JavaScriptフレームワークでサインインを含めることから始めます。

00:18:10.000 -> 00:18:21.000
このシンプルなAPIを使用すると、ユーザーを認証し、1つのシンプルなDIVで作成できる「Appleでサインイン」ボタンなど、さまざまなアセットを取得できます。

00:18:21.000 -> 00:18:28.000
ボタンのプロパティを変更することで、アプリやウェブサイトに合わせてボタンをカスタマイズすることもできます。

00:18:28.000 -> 00:18:37.000
たとえば、現在のプロパティでは、境界線とデフォルトのコーナー半径が付いた白い「Appleでサインイン」ボタンが表示されます。

00:18:37.000 -> 00:18:42.000
データカラープロパティを変更することで、ボタンの別の背景色を選択できます。

00:18:42.000 -> 00:18:49.000
データ型を「継続」に変更すると、ボタンのテキストが更新され、「Appleと継続」と表示されます。

00:18:49.000 -> 00:18:56.000
または、データモードプロパティをロゴのみに設定することで、ロゴのみのボタンを作成することもできます。

00:18:56.000 -> 00:19:02.000
Apple JavascriptボタンAPIでサインインすると、さらにカスタマイズ可能なプロパティが提供されます。

00:19:02.000 -> 00:19:08.000
「Appleでサインイン」ボタンのリソースを参照して、これらの多くのオプションを簡単に設定できます。

00:19:08.000 -> 00:19:16.000
REST APIを使用してAppleでサインインボタンを生成したい場合は、Apple IDボタンエンドポイントの1つを使用してボタンを生成できます。

00:19:16.000 -> 00:19:22.000
中央揃え、左揃え、ロゴボタンには別々のエンドポイントがあります。

00:19:22.000 -> 00:19:25.000
クエリパラメータを使用してボタンをカスタマイズできます。

00:19:25.000 -> 00:19:30.000
このリクエストの例では、境界線付きの白い「Appleでサインイン」ボタンをカスタマイズします。

00:19:30.000 -> 00:19:34.000
カスタマイズボタンでPNG画像として返信が届きます。

00:19:34.000 -> 00:19:41.000
Appleでサインインボタンをパーソナライズしたので、ユーザーを認証する時が来ました。

00:19:41.000 -> 00:19:46.000
必要なパラメータを含む承認リクエストをAppleに送信する必要があります。

00:19:46.000 -> 00:19:52.000
これらは、ユーザーに正常にログインするために必要なパラメータです。

00:19:52.000 -> 00:19:59.000
すでにAppleプラットフォームでAppleでサインインを実装しているので、これらのパラメータは非常によく知られています。

00:19:59.000 -> 00:20:01.000
まず、「clientID」を設定する必要があります。

00:20:01.000 -> 00:20:08.000
これは、アプリまたはWebサイトのApple Developer Portalで作成したサービスIDになります。

00:20:08.000 -> 00:20:13.000
次に、アプリやウェブサイトに電子メールや名前が必要な場合は、「スコープ」パラメータを入力します。

00:20:13.000 -> 00:20:19.000
複数のスコープをリクエストする場合は、スペースを使用して各スコープを分離します。

00:20:19.000 -> 00:20:23.000
必要なデータのみを要求することが重要です。

00:20:23.000 -> 00:20:35.000
「redirectURI」パラメータは、Apple Developer Portalで以前に登録したURLを追加し、Webサイトでユーザーをどこに誘導するかをAppleに通知する場所です。

00:20:35.000 -> 00:20:40.000
リクエストを保護するために「state」と「nonce」を追加することもできます。

00:20:40.000 -> 00:20:51.000
そして最後に、「usePopup」パラメータを使用すると、ログイン画面を別のポップアップウィンドウに表示するか、既存のウィンドウをApple Sign in Webサイトにリダイレクトするかを選択できます。

00:20:51.000 -> 00:20:59.000
誰かがSafariを使用している場合、このようなネイティブ画面が表示され、あなたのウェブサイトにサインインするための一流の体験を提供します。

00:20:59.000 -> 00:21:08.000
Apple IDサーバーが承認要求を処理した後、承認の結果を含むDOMイベントを受け取ります。

00:21:08.000 -> 00:21:16.000
成功応答を処理するには、「AppleIDSignInOnSuccess」のイベントリスナーを追加します。

00:21:16.000 -> 00:21:23.000
失敗応答を処理するには、「AppleIDSignInOnFailure」のイベントリスナーを追加します。

00:21:23.000 -> 00:21:33.000
承認が成功した場合、承認コード、IDトークン、および要求された場合のユーザー情報を含む応答を受け取ります。

00:21:33.000 -> 00:21:37.000
これは、Appleのプラットフォームですでに慣れている応答に似ています。

00:21:37.000 -> 00:21:47.000
REST APIを使用してApple IDサーバーと直接統合したい場合は、必要なパラメータを使用して承認エンドポイントに承認要求を指示します。

00:21:47.000 -> 00:21:56.000
承認が成功すると、承認コード、IDトークン、およびユーザー情報を含む応答が表示されます。

00:21:56.000 -> 00:22:00.000
これは、Appleのプラットフォームですでに慣れている反応と非常によく似ています。

00:22:00.000 -> 00:22:01.000
それでおそれ！

00:22:01.000 -> 00:22:05.000
あなたのウェブサイトでAppleでサインインを成功裏に採用しました!

00:22:05.000 -> 00:22:12.000
最後に、Appleでサインインを実装する際に留意すべきいくつかの重要なことを強調したいと思います。

00:22:12.000 -> 00:22:19.000
アプリがアカウントベースの重要な機能を必要としない限り、ログインせずにアプリを使用できるようにします。

00:22:19.000 -> 00:22:29.000
たとえば、ユーザーがApple Payを使用してアイテムを購入することを許可し、購入が完了した後、オプションで購入をアカウントに関連付けることを提案することができます。

00:22:29.000 -> 00:22:39.000
既存のユーザーに、ユーザー名とパスワードの認証からAppleでサインインに切り替えることで、アカウントのセキュリティをアップグレードする機能を提供します。

00:22:39.000 -> 00:22:44.000
ユーザーを識別するために一意の識別子が必要な場合は、名前や電子メールを収集しないでください。

00:22:44.000 -> 00:22:50.000
また、Appleでサインインしてメールを収集する場合は、ユーザーの選択を尊重するようにしてください。

00:22:50.000 -> 00:22:54.000
追加のメールの入力を求めてはいけません。

00:22:54.000 -> 00:23:00.000
アプリやウェブサイトが利用可能なすべてのプラットフォームでAppleでサインインを実装することが重要です。

00:23:00.000 -> 00:23:06.000
ユーザーは複数のプラットフォームを使用する可能性があり、どこでもAppleでサインインを使用することを期待しています。

00:23:06.000 -> 00:23:11.000
私たちはあなたのアプリでAppleでサインインで何をするかを見て本当に興奮しており、あなたのフィードバックを楽しみにしています。

00:23:11.000 -> 00:23:14.000
ご覧いただきありがとうございます、そしてWWDCの残りの部分を楽しんでください!

00:23:14.000 -> 23:59:59.000
。

