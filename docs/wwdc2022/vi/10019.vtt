WEBVTT

00:00:00.000 --> 00:00:03.000
♪ nhạc cụ hip hop ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
Xin chào, tôi là Alejandro.

00:00:11.000 --> 00:00:13.000
Tôi là một kỹ sư trong nhóm CreateML.

00:00:13.000 --> 00:00:19.000
Hôm nay tôi sẽ nói về một API hoàn toàn mới để xây dựng các mô hình học máy bằng cách sử dụng các thành phần.

00:00:19.000 --> 00:00:23.000
Tạo ML cung cấp một API đơn giản để đào tạo các mô hình học máy.

00:00:23.000 --> 00:00:31.000
Nó dựa trên một tập hợp các nhiệm vụ được hỗ trợ như phân loại hình ảnh, phân loại âm thanh, v.v.

00:00:31.000 --> 00:00:36.000
Tại WWDC 2021, chúng tôi đã trình bày hai cuộc nói chuyện tuyệt vời về khuôn khổ Create ML.

00:00:36.000 --> 00:00:39.000
Hãy chắc chắn kiểm tra những thứ đó nếu bạn chưa có.

00:00:39.000 --> 00:00:42.000
Nhưng tôi muốn nói về việc vượt ra ngoài các nhiệm vụ được xác định trước.

00:00:42.000 --> 00:00:48.000
Điều gì sẽ xảy ra nếu bạn muốn tùy chỉnh một nhiệm vụ cho vấn đề cụ thể của mình ngoài những gì Create ML cung cấp?

00:00:48.000 --> 00:00:51.000
Hoặc nếu bạn muốn xây dựng một loại nhiệm vụ khác thì sao?

00:00:51.000 --> 00:00:56.000
Sử dụng các thành phần, giờ đây bạn có thể soạn các nhiệm vụ theo những cách mới và sáng tạo.

00:00:56.000 --> 00:00:58.000
Hãy đào sâu vào.

00:00:58.000 --> 00:01:03.000
Tôi sẽ bắt đầu bằng cách chia nhỏ một nhiệm vụ ML và giải thích từng thành phần làm gì.

00:01:03.000 --> 00:01:07.000
Sau đó, tôi sẽ nói về cách bạn có thể ghép các thành phần lại với nhau.

00:01:07.000 --> 00:01:10.000
Tiếp theo là một ví dụ về nhiệm vụ hình ảnh tùy chỉnh.

00:01:10.000 --> 00:01:13.000
Sau đó, tôi sẽ nói về các nhiệm vụ dạng bảng.

00:01:13.000 --> 00:01:16.000
Và tôi sẽ kết thúc với các chiến lược triển khai.

00:01:16.000 --> 00:01:23.000
Hãy để tôi bắt đầu bằng cách khám phá bên trong một nhiệm vụ học máy để bạn hiểu những gì diễn ra và cách nó hoạt động.

00:01:23.000 --> 00:01:27.000
Bằng cách này, khi chúng ta bắt đầu xây dựng các nhiệm vụ tùy chỉnh, bạn biết tôi đang nói về cái gì.

00:01:27.000 --> 00:01:31.000
Tôi sẽ sử dụng một trình phân loại hình ảnh làm ví dụ.

00:01:31.000 --> 00:01:36.000
Trình phân loại hình ảnh sử dụng danh sách các hình ảnh được gắn nhãn để đào tạo một mô hình.

00:01:36.000 --> 00:01:41.000
Trong ví dụ này, tôi có hình ảnh của mèo và chó với nhãn tương ứng của chúng.

00:01:41.000 --> 00:01:45.000
Nhưng hãy khám phá cách hình ảnh được chuyển đổi ở mỗi bước.

00:01:45.000 --> 00:01:50.000
Để làm điều đó, tôi sẽ mở rộng nhiệm vụ phân loại hình ảnh để xem có gì bên trong.

00:01:50.000 --> 00:01:53.000
Về mặt khái niệm, một trình phân loại hình ảnh rất đơn giản.

00:01:53.000 --> 00:01:56.000
Nó bao gồm một trình trích xuất tính năng và một trình phân loại.

00:01:56.000 --> 00:02:02.000
Nhưng phần quan trọng là các thành phần Create ML cho phép bạn truy cập vào các thành phần này một cách độc lập.

00:02:02.000 --> 00:02:07.000
Bạn có thể thêm, xóa hoặc chuyển đổi các thành phần để soạn các tác vụ mới.

00:02:07.000 --> 00:02:10.000
Tôi sẽ đại diện cho các thành phần dưới dạng hộp.

00:02:10.000 --> 00:02:12.000
Mũi tên đại diện cho luồng dữ liệu.

00:02:12.000 --> 00:02:18.000
Hãy phóng to bước đầu tiên của trình phân loại hình ảnh: trích xuất tính năng.

00:02:18.000 --> 00:02:25.000
Nói chung, các trình trích xuất tính năng làm giảm kích thước của đầu vào bằng cách chỉ giữ lại các phần thú vị - các tính năng.

00:02:25.000 --> 00:02:31.000
Trong trường hợp hình ảnh, một trình trích xuất tính năng tìm kiếm các mẫu trong hình ảnh.

00:02:31.000 --> 00:02:39.000
Tạo ML sử dụng Vision Feature Print, đây là một trình trích xuất tính năng hình ảnh tuyệt vời được cung cấp bởi Vision Framework.

00:02:39.000 --> 00:02:42.000
Bây giờ, hãy nói về phần thứ hai: bộ phân loại.

00:02:42.000 --> 00:02:47.000
Một trình phân loại sử dụng một tập hợp các ví dụ để học cách phân loại.

00:02:47.000 --> 00:02:54.000
Một số triển khai phổ biến là hồi quy logistic, cây được tăng cường và mạng lưới thần kinh.

00:02:54.000 --> 00:03:02.000
Vì vậy, việc đào tạo một trình phân loại hình ảnh bắt đầu bằng các hình ảnh được chú thích, chuyển đến các tính năng được chú thích và kết thúc bằng trình phân loại.

00:03:02.000 --> 00:03:05.000
Nhưng tại sao chúng ta lại muốn phá vỡ nó thành nhiều mảnh?

00:03:05.000 --> 00:03:08.000
Lý do là chúng tôi muốn mở rộng các khả năng.

00:03:08.000 --> 00:03:12.000
Có thể bạn muốn thực hiện một số tiền xử lý bằng cách tăng độ tương phản.

00:03:12.000 --> 00:03:19.000
Hoặc có thể bạn muốn bình thường hóa tất cả các hình ảnh để chúng có độ sáng đồng đều trước khi bạn trích xuất các tính năng.

00:03:19.000 --> 00:03:22.000
Hoặc có thể bạn muốn thử một trình trích xuất tính năng khác.

00:03:22.000 --> 00:03:25.000
Hoặc có thể bạn muốn thử một trình phân loại khác.

00:03:25.000 --> 00:03:27.000
Khả năng là vô tận.

00:03:27.000 --> 00:03:30.000
Đây chỉ là một vài trong số các lựa chọn.

00:03:30.000 --> 00:03:37.000
Đó là lý do tại sao chúng tôi đã thêm hỗ trợ cho các thành phần ML trong macOS, iOS, iPadOS và tvOS.

00:03:37.000 --> 00:03:46.000
Hy vọng của chúng tôi là bạn có thể soạn thảo các mô hình mới bằng cách sử dụng một số thành phần mà chúng tôi cung cấp cùng với các thành phần của riêng bạn hoặc thậm chí các thành phần được xây dựng bởi những người khác trong cộng đồng.

00:03:46.000 --> 00:03:49.000
Và bạn có thể tận dụng nó trên tất cả các nền tảng của chúng tôi.

00:03:49.000 --> 00:03:54.000
Đây là một số thành phần được tích hợp trong Tạo Thành phần ML.

00:03:54.000 --> 00:03:58.000
Nhưng hãy để tôi lùi lại một bước và giới thiệu một số khái niệm.

00:03:58.000 --> 00:04:02.000
Có hai loại thành phần: máy biến áp và máy ước tính.

00:04:02.000 --> 00:04:07.000
Máy biến áp chỉ đơn giản là một loại có thể thực hiện một số chuyển đổi.

00:04:07.000 --> 00:04:10.000
Nó định nghĩa một loại đầu vào và một loại đầu ra.

00:04:10.000 --> 00:04:17.000
Ví dụ, một trình trích xuất tính năng hình ảnh lấy một hình ảnh đầu vào và tạo ra một mảng các tính năng có hình dạng.

00:04:17.000 --> 00:04:21.000
Mặt khác, một người ước tính cần học hỏi từ dữ liệu.

00:04:21.000 --> 00:04:27.000
Nó lấy ví dụ đầu vào, thực hiện một số xử lý và sản xuất một máy biến áp.

00:04:27.000 --> 00:04:30.000
Chúng tôi gọi quá trình này là "phù hợp".

00:04:30.000 --> 00:04:41.000
Tuyệt vời. Với những khái niệm đó, hãy để tôi nói về cách Tạo Thành phần ML cho phép bạn xây dựng một trình phân loại hình ảnh từ các thành phần riêng lẻ của nó bằng cách sử dụng bố cục.

00:04:41.000 --> 00:04:44.000
Đây là một trình phân loại hình ảnh sử dụng các thành phần.

00:04:44.000 --> 00:04:50.000
Nó có ImageFeaturePrint là trình trích xuất tính năng và LogisticRegressionClassifier làm trình phân loại.

00:04:50.000 --> 00:04:58.000
Bất kể một thành phần là máy biến áp hay công cụ ước tính, bạn kết hợp chúng bằng cách sử dụng phương pháp nối thêm.

00:04:58.000 --> 00:05:02.000
Và đây là nơi các thành phần cung cấp khả năng không giới hạn.

00:05:02.000 --> 00:05:09.000
Bạn có thể sử dụng mạng nơ-ron được kết nối đầy đủ như một bộ phân loại thay vì hồi quy logistic với một thay đổi đơn giản.

00:05:09.000 --> 00:05:13.000
Hoặc bạn có thể sử dụng trình trích xuất tính năng tùy chỉnh trong mô hình CoreML.

00:05:13.000 --> 00:05:19.000
Ví dụ, mô hình ResNet-50 không đầu mà bạn có thể tìm thấy trong thư viện mô hình.

00:05:19.000 --> 00:05:25.000
Khi soạn thảo hai thành phần, đầu ra của thành phần đầu tiên phải khớp với đầu vào của thành phần thứ hai.

00:05:25.000 --> 00:05:32.000
Trong trường hợp phân loại hình ảnh của chúng tôi, đầu ra của trình trích xuất tính năng là một mảng có hình dạng, từ khung CoreML.

00:05:32.000 --> 00:05:36.000
Đó cũng là đầu vào của một bộ phân loại hồi quy logistic.

00:05:36.000 --> 00:05:41.000
Nếu bạn gặp lỗi trình biên dịch khi sử dụng phương thức nối thêm, đây là điều đầu tiên cần kiểm tra.

00:05:41.000 --> 00:05:44.000
Đảm bảo rằng các loại phù hợp.

00:05:44.000 --> 00:05:48.000
Nhưng hãy để tôi làm rõ một điểm quan trọng xung quanh sự phù hợp.

00:05:48.000 --> 00:05:53.000
Tôi đã nói trước đó rằng lắp đặt là quá trình chuyển từ máy ước tính sang máy biến áp.

00:05:53.000 --> 00:05:57.000
Hãy nhìn vào điều này từ quan điểm của một công cụ ước tính sáng tác.

00:05:57.000 --> 00:06:05.000
Khi công cụ ước tính sáng tác của bạn có cả máy biến áp và công cụ ước tính, như trong trường hợp phân loại hình ảnh, chỉ các phần công cụ ước tính mới được lắp.

00:06:05.000 --> 00:06:14.000
Nhưng các máy biến áp là một phần quan trọng của quy trình vì chúng được sử dụng để cung cấp các tính năng chính xác cho phương pháp được trang bị của công cụ ước tính.

00:06:14.000 --> 00:06:15.000
Đây là mã.

00:06:15.000 --> 00:06:24.000
Trình phân loại hình ảnh cần một tập hợp các tính năng được chú thích trong đó các tính năng là hình ảnh và chú thích là chuỗi.

00:06:24.000 --> 00:06:28.000
Chúng ta sẽ nói về việc tải các tính năng khi chúng ta đi vào bản demo.

00:06:28.000 --> 00:06:32.000
Khi tôi có dữ liệu, tôi có thể gọi phương thức phù hợp.

00:06:32.000 --> 00:06:37.000
Điều này trả lại mô hình đã được đào tạo, một máy biến áp.

00:06:37.000 --> 00:06:44.000
Và điều quan trọng cần lưu ý là các loại được sử dụng khi lắp có liên quan nhưng khác với các loại máy biến áp kết quả.

00:06:44.000 --> 00:06:49.000
Đặc biệt, các loại được sử dụng trong phương pháp phù hợp luôn là bộ sưu tập.

00:06:49.000 --> 00:06:55.000
Và trong trường hợp các công cụ ước tính có giám sát, các tính năng phải bao gồm các chú thích.

00:06:55.000 --> 00:07:03.000
Tạo các thành phần ML sử dụng loại Tính năng được chú thích để thể hiện một tính năng cùng với chú thích của nó.

00:07:03.000 --> 00:07:06.000
Một khi tôi có mô hình, tôi có thể đưa ra dự đoán.

00:07:06.000 --> 00:07:11.000
Không có vấn đề gì nếu đó là một mô hình tôi vừa lắp, hoặc nếu tôi đang tải các thông số từ một đĩa.

00:07:11.000 --> 00:07:15.000
API giống nhau trong cả hai trường hợp.

00:07:15.000 --> 00:07:20.000
Vì tôi đang đào tạo một người phân loại, kết quả là một phân phối phân loại.

00:07:20.000 --> 00:07:25.000
Sự phân bố bao gồm xác suất cho mỗi nhãn.

00:07:25.000 --> 00:07:30.000
Trong trường hợp này, tôi chỉ đang in nhãn có khả năng nhất cho hình ảnh.

00:07:30.000 --> 00:07:37.000
Phương pháp phù hợp cũng cung cấp một cơ chế để quan sát các sự kiện đào tạo, bao gồm các chỉ số xác thực.

00:07:37.000 --> 00:07:43.000
Trong ví dụ này, tôi đang chuyển dữ liệu xác thực và in độ chính xác xác thực.

00:07:43.000 --> 00:07:48.000
Lưu ý rằng chỉ những người ước tính được giám sát mới cung cấp các chỉ số xác thực.

00:07:48.000 --> 00:07:56.000
Khi bạn đào tạo một mô hình, bạn có thể lưu các thông số đã học, để sử dụng lại sau này hoặc để triển khai cho một ứng dụng.

00:07:56.000 --> 00:07:58.000
Bạn làm điều này bằng cách sử dụng phương pháp viết.

00:07:58.000 --> 00:08:02.000
Sau đó, bạn có thể đọc bằng phương pháp đọc.

00:08:02.000 --> 00:08:04.000
Và đó là thành phần.

00:08:04.000 --> 00:08:06.000
Đây là nơi nó trở nên thú vị.

00:08:06.000 --> 00:08:13.000
Hãy để tôi nói về việc viết một nhiệm vụ mới, một thứ mà Create ML đã không hỗ trợ cho đến bây giờ.

00:08:13.000 --> 00:08:17.000
Điều gì sẽ xảy ra nếu bạn muốn đào tạo một người mẫu để ghi điểm hình ảnh?

00:08:17.000 --> 00:08:23.000
Giả sử bạn có ảnh trái cây, nhưng thay vì phân loại trái cây, bạn muốn đánh giá nó.

00:08:23.000 --> 00:08:26.000
Cho nó điểm dựa trên độ chín của nó.

00:08:26.000 --> 00:08:30.000
Để làm điều này, bạn cần thực hiện hồi quy thay vì phân loại.

00:08:30.000 --> 00:08:37.000
Vì vậy, hãy để tôi viết một bộ hồi quy hình ảnh cho điểm số cho hình ảnh của chuối dựa trên độ chín.

00:08:37.000 --> 00:08:43.000
Tôi sẽ cho mỗi hình ảnh một giá trị độ chín từ một đến 10.

00:08:43.000 --> 00:08:47.000
Bộ hồi quy hình ảnh rất giống với bộ phân loại hình ảnh.

00:08:47.000 --> 00:08:54.000
Sự khác biệt duy nhất là công cụ ước tính của chúng tôi sẽ là một bộ hồi quy thay vì một bộ phân loại.

00:08:54.000 --> 00:08:58.000
Như bạn có thể đã đoán, điều này sẽ dễ dàng.

00:08:58.000 --> 00:09:01.000
Để làm mới bộ nhớ của bạn, đây là trình phân loại hình ảnh của chúng tôi.

00:09:01.000 --> 00:09:04.000
Và đây là một bộ hồi quy hình ảnh.

00:09:04.000 --> 00:09:09.000
Tôi đã thay thế bộ phân loại hồi quy logistic bằng bộ hồi quy tuyến tính.

00:09:09.000 --> 00:09:15.000
Sự thay đổi đơn giản này cũng thay đổi đầu vào dự kiến sang phương pháp phù hợp.

00:09:15.000 --> 00:09:17.000
Trước đây, nó mong đợi hình ảnh và nhãn hiệu.

00:09:17.000 --> 00:09:20.000
Bây giờ, nó mong đợi hình ảnh và điểm số.

00:09:20.000 --> 00:09:22.000
Nhưng đủ về các khái niệm rồi.

00:09:22.000 --> 00:09:28.000
Hãy để tôi giới thiệu cái này với một số mã thực tế.

00:09:28.000 --> 00:09:31.000
Hãy để tôi chỉ cho bạn cách viết một bộ hồi quy hình ảnh tùy chỉnh.

00:09:31.000 --> 00:09:38.000
Tôi sẽ bắt đầu bằng cách xác định một cấu trúc ImageRegressor để gói gọn mã.

00:09:38.000 --> 00:09:42.000
Tôi có một thư mục với hình ảnh chuối ở các mức độ chín khác nhau.

00:09:42.000 --> 00:09:48.000
Tôi sẽ bắt đầu bằng cách xác định URL đó.

00:09:48.000 --> 00:09:51.000
Bước tiếp theo là thêm một phương thức tàu hỏa.

00:09:51.000 --> 00:09:56.000
Đây là nơi bạn sử dụng dữ liệu đào tạo để tạo ra một mô hình.

00:09:56.000 --> 00:10:05.000
Tôi sẽ sử dụng từ khóa "some" trên loại trả về để loại trả về không thay đổi khi tôi thêm hoặc sửa đổi các bước trong công cụ ước tính đã soạn.

00:10:05.000 --> 00:10:07.000
Bây giờ, tôi sẽ xác định công cụ ước tính.

00:10:07.000 --> 00:10:14.000
Nó chỉ đơn giản là trình trích xuất tính năng với bộ hồi quy tuyến tính được thêm vào.

00:10:14.000 --> 00:10:17.000
Và bây giờ, tôi cần tải các hình ảnh đào tạo với điểm số của chúng.

00:10:17.000 --> 00:10:24.000
Tôi có thể sử dụng AnnotatedFiles, đây là một bộ sưu tập các tính năng được chú thích có chứa URL và nhãn chuỗi.

00:10:24.000 --> 00:10:29.000
Nó cung cấp một trình khởi tạo tiện lợi phù hợp với nhu cầu của tôi.

00:10:29.000 --> 00:10:34.000
Các tệp của tôi bao gồm một cái tên, theo sau là dấu gạch ngang, theo sau là giá trị độ chín.

00:10:34.000 --> 00:10:41.000
Vì vậy, tôi sẽ chỉ định rằng dấu phân cách là dấu gạch ngang và chú thích nằm ở chỉ mục: 1 trong số các thành phần tên tệp.

00:10:41.000 --> 00:10:46.000
Tôi cũng sẽ chỉ yêu cầu các tệp hình ảnh bằng cách sử dụng đối số loại.

00:10:46.000 --> 00:10:49.000
Bây giờ tôi đã có URL, tôi cần tải các hình ảnh.

00:10:49.000 --> 00:10:56.000
Tôi có thể sử dụng phương pháp mapFeatures và ImageReader để làm điều này.

00:10:56.000 --> 00:11:01.000
Tôi cũng cần chuyển đổi điểm số từ chuỗi sang giá trị dấu phẩy động.

00:11:01.000 --> 00:11:08.000
Tôi có thể sử dụng phương pháp mapAnnotations để làm điều này.

00:11:08.000 --> 00:11:12.000
Và với điều đó, tôi có dữ liệu đào tạo.

00:11:12.000 --> 00:11:15.000
Nhưng tôi muốn đặt một số trong số đó sang một bên để xác nhận.

00:11:15.000 --> 00:11:17.000
Tôi có thể sử dụng phương pháp randomSplit để làm điều này.

00:11:17.000 --> 00:11:25.000
Tôi sẽ giữ 80 phần trăm để đào tạo và sử dụng phần còn lại để xác nhận.

00:11:25.000 --> 00:11:29.000
Bây giờ, tôi đã sẵn sàng để phù hợp.

00:11:29.000 --> 00:11:33.000
Và tôi sẽ lưu các thông số đã đào tạo để tôi có thể triển khai vào ứng dụng của mình.

00:11:33.000 --> 00:11:40.000
Tôi sẽ chọn một địa điểm để lưu vào.

00:11:40.000 --> 00:11:44.000
Và tôi sẽ gọi phương thức viết.

00:11:44.000 --> 00:11:50.000
Cuối cùng, tôi sẽ trả lại máy biến áp.

00:11:50.000 --> 00:11:55.000
Đây là bản chất của việc xác định và đào tạo một mô hình bằng cách sử dụng các thành phần.

00:11:55.000 --> 00:12:03.000
Tôi đã xác định công cụ ước tính sáng tác của mình, tôi đã tải dữ liệu đào tạo của mình, tôi đã gọi phương thức phù hợp và tôi đã sử dụng ghi để lưu các tham số.

00:12:03.000 --> 00:12:05.000
Nhưng có một số điều tôi có thể cải thiện.

00:12:05.000 --> 00:12:12.000
Để bắt đầu, tôi đang chuyển một tập dữ liệu xác thực nhưng không quan sát thấy lỗi xác thực, vì vậy tôi sẽ làm điều đó.

00:12:12.000 --> 00:12:21.000
Phương pháp phù hợp có một trình xử lý sự kiện mà bạn có thể sử dụng để thu thập số liệu.

00:12:21.000 --> 00:12:26.000
Hiện tại, tôi sẽ chỉ in cả giá trị lỗi tối đa đào tạo và xác thực.

00:12:26.000 --> 00:12:33.000
Tôi cũng muốn sai số tuyệt đối trung bình cho mô hình cuối cùng.

00:12:33.000 --> 00:12:44.000
Tôi tính toán điều đó bằng cách áp dụng máy biến áp được trang bị cho các tính năng xác thực và sau đó chuyển nó cùng với điểm số thực tế cho hàm meanAbsoluteError.

00:12:44.000 --> 00:12:49.000
Tôi đã chạy cái này nhưng tôi không nhận được một mô hình tuyệt vời - lỗi rất cao.

00:12:49.000 --> 00:12:52.000
Điều này là do tôi không có nhiều hình ảnh về chuối.

00:12:52.000 --> 00:12:57.000
Tôi nên có nhiều hình ảnh hơn, nhưng trước khi làm điều đó, tôi có thể thử tăng cường tập dữ liệu của mình.

00:12:57.000 --> 00:13:00.000
Tôi có thể xoay và chia tỷ lệ hình ảnh của mình để có thêm ví dụ.

00:13:00.000 --> 00:13:05.000
Để làm điều này, tôi sẽ viết một phương pháp mới lấy một hình ảnh được chú thích và tăng cường nó.

00:13:05.000 --> 00:13:13.000
Nó trả về một mảng các hình ảnh được chú thích.

00:13:13.000 --> 00:13:20.000
Lần tăng cường đầu tiên tôi sẽ làm là xoay vòng.

00:13:20.000 --> 00:13:26.000
Tôi sẽ chọn ngẫu nhiên một góc giữa -pi và pi và sử dụng nó để xoay hình ảnh.

00:13:26.000 --> 00:13:31.000
Tôi cũng sẽ làm một thang đo ngẫu nhiên.

00:13:31.000 --> 00:13:39.000
Và tôi sẽ trả lại ba hình ảnh: bản gốc, hình xoay và hình thu nhỏ.

00:13:39.000 --> 00:13:49.000
Bây giờ tôi đã có chức năng tăng cường của mình, tôi sẽ sử dụng nó để tăng cường hình ảnh đào tạo của mình bằng cách sử dụng flatMap.

00:13:49.000 --> 00:13:53.000
Mỗi phần tử trong tập dữ liệu của tôi sẽ được chuyển đổi thành một mảng.

00:13:53.000 --> 00:13:59.000
FlatMap làm phẳng mảng mảng đó thành một mảng duy nhất, đó là những gì tôi cần cho phương pháp được trang bị.

00:13:59.000 --> 00:14:04.000
Lưu ý rằng việc tăng cường chỉ áp dụng khi phù hợp, không áp dụng khi thực hiện dự đoán.

00:14:04.000 --> 00:14:07.000
Được rồi, điều này làm tăng độ chính xác của tôi.

00:14:07.000 --> 00:14:12.000
Nhưng hãy để tôi nói về một cải tiến nữa sẽ làm cho mô hình của tôi thậm chí còn tốt hơn.

00:14:12.000 --> 00:14:16.000
Tôi muốn sử dụng khung Vision để cắt các hình ảnh thành đối tượng nổi bật.

00:14:16.000 --> 00:14:19.000
Đây là một trong những hình ảnh trong dữ liệu đào tạo của tôi.

00:14:19.000 --> 00:14:23.000
Ai đó đang cầm chuối với các loại trái cây khác trong nền.

00:14:23.000 --> 00:14:27.000
Người mẫu có thể bị nhầm lẫn bởi các đối tượng khác trong ảnh.

00:14:27.000 --> 00:14:33.000
Sử dụng Vision framework API, tôi có thể tự động cắt hình ảnh thành đối tượng nổi bật nhất.

00:14:33.000 --> 00:14:38.000
Để làm điều này, vui lòng xem cuộc nói chuyện về Tầm nhìn từ WWDC 2019.

00:14:38.000 --> 00:14:46.000
Tôi có thể dễ dàng áp dụng chuyển đổi này cho tất cả các hình ảnh của mình, cả khi lắp và khi nhận được dự đoán nếu tôi viết một máy biến áp tùy chỉnh.

00:14:46.000 --> 00:14:47.000
Để tôi chỉ cho bạn cách làm.

00:14:47.000 --> 00:14:53.000
Điều duy nhất tôi cần làm để phù hợp với giao thức máy biến áp là thực hiện phương pháp được áp dụng.

00:14:53.000 --> 00:14:57.000
Và trong trường hợp này, tôi muốn nó chụp một hình ảnh và trả lại một hình ảnh.

00:14:57.000 --> 00:15:06.000
Tôi sẽ không đi sâu vào mã này, ngoại trừ việc nói rằng nếu tôi không nhận được một đối tượng nổi bật, tôi sẽ chỉ trả lại hình ảnh gốc.

00:15:06.000 --> 00:15:16.000
Bây giờ tôi đã có máy biến áp tùy chỉnh của mình, tôi sẽ thêm nó vào bộ hồi quy hình ảnh của mình.

00:15:16.000 --> 00:15:28.000
Tôi chỉ cần sử dụng máy biến áp tùy chỉnh của mình trước khi trích xuất tính năng.

00:15:28.000 --> 00:15:37.000
Bây giờ sự nổi lút là một phần trong định nghĩa nhiệm vụ của tôi, nó sẽ được sử dụng để cắt mọi hình ảnh đào tạo và nó cũng sẽ được sử dụng khi suy luận.

00:15:37.000 --> 00:15:42.000
Đây là một trong những lợi thế của việc chia sẻ định nghĩa nhiệm vụ giữa đào tạo và suy luận.

00:15:42.000 --> 00:15:46.000
Trước khi chúng ta chuyển sang nhiệm vụ tiếp theo, hãy để tôi nêu bật một số điểm quan trọng.

00:15:46.000 --> 00:15:50.000
Sử dụng các thành phần, bây giờ tôi có thể tạo các tác vụ tùy chỉnh.

00:15:50.000 --> 00:15:53.000
Tôi đã làm điều này bằng cách sử dụng phương pháp nối thêm.

00:15:53.000 --> 00:16:01.000
Tôi đã sử dụng AnnotatedFiles để tải các tệp của mình với tên tệp được chú thích, nhưng bạn cũng có thể tải các tệp được chú thích bởi các thư mục.

00:16:01.000 --> 00:16:08.000
Tôi đã ánh xạ URL đến hình ảnh bằng ImageReader và ánh xạ các chú thích từ chuỗi đến các giá trị.

00:16:08.000 --> 00:16:15.000
Tôi đã sử dụng randomSplit để đặt sang một tập dữ liệu xác thực và tôi đã lưu các tham số đã đào tạo để sử dụng sau này.

00:16:15.000 --> 00:16:20.000
Sau đó, tôi đã thêm các tăng cường và xác định một máy biến áp tùy chỉnh để cải thiện mô hình của mình.

00:16:20.000 --> 00:16:23.000
Nhưng điều này không chỉ hiệu quả với hình ảnh.

00:16:23.000 --> 00:16:28.000
Tôi sẽ chuyển số và nói về một loại nhiệm vụ khác: nhiệm vụ dạng bảng.

00:16:28.000 --> 00:16:30.000
Đây là những nhiệm vụ sử dụng dữ liệu dạng bảng.

00:16:30.000 --> 00:16:35.000
Dữ liệu dạng bảng được đặc trưng bởi có nhiều tính năng của các loại khác nhau.

00:16:35.000 --> 00:16:39.000
Nó có thể bao gồm cả dữ liệu số cũng như dữ liệu phân loại.

00:16:39.000 --> 00:16:42.000
Một ví dụ phổ biến là dữ liệu định giá nhà.

00:16:42.000 --> 00:16:48.000
Bạn có những thứ như diện tích và tuổi tác, nhưng cũng có những thứ như khu phố, loại tòa nhà, v.v.

00:16:48.000 --> 00:16:53.000
Và bạn muốn học cách dự đoán một giá trị; ví dụ, giá bán.

00:16:53.000 --> 00:16:58.000
Vào năm 2021, chúng tôi đã giới thiệu khung TabularData.

00:16:58.000 --> 00:17:06.000
Bây giờ bạn có thể sử dụng khung TabularData cùng với Create ML Components để xây dựng và đào tạo các trình phân loại và hồi quy dạng bảng.

00:17:06.000 --> 00:17:09.000
Tôi cũng đề xuất buổi nói chuyện công nghệ trên TabularData.

00:17:09.000 --> 00:17:15.000
Đó là một phần giới thiệu tuyệt vời về khám phá dữ liệu, mà bạn có thể sẽ cần khi xây dựng một nhiệm vụ dạng bảng.

00:17:15.000 --> 00:17:17.000
Hãy đi sâu vào.

00:17:17.000 --> 00:17:23.000
Khi xử lý dữ liệu dạng bảng, mỗi cột của bảng sẽ có một loại tính năng khác nhau.

00:17:23.000 --> 00:17:32.000
Và bạn có thể muốn xử lý từng cột khác nhau, dựa trên loại thông tin mà nó chứa; sự phân bố, phạm vi giá trị và các yếu tố khác.

00:17:32.000 --> 00:17:36.000
Tạo các thành phần ML cho phép bạn làm điều này bằng cách sử dụng ColumnSelector.

00:17:36.000 --> 00:17:38.000
Đây là một ví dụ.

00:17:38.000 --> 00:17:42.000
Tôi đã đề cập đến giá nhà, nhưng những thứ đó thật nực cười.

00:17:42.000 --> 00:17:44.000
Thay vào đó tôi sẽ dùng giá bơ.

00:17:44.000 --> 00:17:47.000
Tôi có bảng giá bơ này.

00:17:47.000 --> 00:17:52.000
Tôi muốn xây dựng một bộ hồi quy dạng bảng để dự đoán giá bơ dựa trên điều này.

00:17:52.000 --> 00:18:01.000
Nó chứa các cột với dữ liệu số như túi, năm và khối lượng và các cột với dữ liệu phân loại như loại và khu vực.

00:18:01.000 --> 00:18:06.000
Một số bộ hồi quy được hưởng lợi từ việc thể hiện tốt hơn các giá trị này.

00:18:06.000 --> 00:18:11.000
Ví dụ, đây là sự phân bố các giá trị âm lượng trong tập dữ liệu.

00:18:11.000 --> 00:18:17.000
Nó gần với phân phối bình thường, nhưng với các giá trị lớn tập trung vào khoảng 15.000.

00:18:17.000 --> 00:18:23.000
Tôi nghĩ đây là một ví dụ tuyệt vời về tập dữ liệu có thể được hưởng lợi từ việc chuẩn hóa.

00:18:23.000 --> 00:18:27.000
Vì vậy, điều đầu tiên tôi muốn làm là bình thường hóa những giá trị này.

00:18:27.000 --> 00:18:35.000
Để làm điều này, tôi có thể chuyển tên cột mà tôi muốn chuẩn hóa cho ColumnSelector và sau đó sử dụng bộ chia tỷ lệ tiêu chuẩn.

00:18:35.000 --> 00:18:37.000
Đây là mã.

00:18:37.000 --> 00:18:39.000
Đầu tiên tôi tạo một bộ chọn cột.

00:18:39.000 --> 00:18:42.000
Sau đó tôi chuyển tên cột mà tôi muốn chia tỷ lệ.

00:18:42.000 --> 00:18:47.000
Tất cả các cột phải chứa cùng một loại phần tử; trong trường hợp này, Double.

00:18:47.000 --> 00:18:50.000
Sau đó tôi mở gói các tùy chọn.

00:18:50.000 --> 00:18:53.000
Tôi có thể làm điều này bởi vì tôi biết không có giá trị nào bị thiếu.

00:18:53.000 --> 00:18:56.000
Nhưng tôi cũng có thể sử dụng một imputer để thay thế các giá trị bị thiếu.

00:18:56.000 --> 00:19:01.000
Và sau đó tôi thêm StandardScaler vào unwrapper.

00:19:01.000 --> 00:19:08.000
Vì vậy, tôi bắt đầu với bảng này, nơi số lượng túi lên tới hàng chục nghìn và khối lượng lên tới hàng trăm nghìn.

00:19:08.000 --> 00:19:16.000
Và sau khi chia tỷ lệ các cột đó, tôi kết thúc với các giá trị hiện có độ lớn gần bằng một, điều này có thể cải thiện hiệu suất của mô hình của tôi.

00:19:16.000 --> 00:19:24.000
Cụ thể hơn, các giá trị của tôi bây giờ có giá trị trung bình bằng 0 và độ lệch chuẩn là một.

00:19:24.000 --> 00:19:34.000
Đây là một ví dụ tương tự, nhưng trong ví dụ này, tôi đang chọn các cột loại và vùng, thuộc loại chuỗi và thực hiện mã hóa một lần.

00:19:34.000 --> 00:19:42.000
Mã hóa một nóng đề cập đến việc mã hóa dữ liệu phân loại bằng cách sử dụng một mảng để chỉ ra sự hiện diện của từng danh mục.

00:19:42.000 --> 00:19:47.000
Trong ví dụ này, tôi có ba loại: Đồng, Bạc và Vàng.

00:19:47.000 --> 00:19:54.000
Mỗi người nhận được một vị trí duy nhất trong mảng, được biểu thị bằng một vị trí ở vị trí đó.

00:19:54.000 --> 00:20:01.000
Một giải pháp thay thế là sử dụng bộ mã hóa thứ tự, cung cấp một số liên tiếp cho mỗi danh mục.

00:20:01.000 --> 00:20:07.000
Sử dụng bộ mã hóa một nóng khi chỉ có một vài danh mục và một bộ mã hóa thứ tự nếu không.

00:20:07.000 --> 00:20:17.000
Bây giờ hãy để tôi kết hợp tất cả những điều này lại với nhau và xây dựng một bộ hồi quy dạng bảng.

00:20:17.000 --> 00:20:25.000
Như trước đây, tôi sẽ bắt đầu tạo một cấu trúc và xác định URL dữ liệu và URL tham số.

00:20:25.000 --> 00:20:32.000
Tôi cũng muốn xác định ID cột cho cột mà tôi muốn dự đoán: giá cả.

00:20:32.000 --> 00:20:41.000
Tôi sẽ xác định nhiệm vụ của mình một cách riêng biệt để tôi có thể sử dụng nó cả từ phương pháp tàu hỏa và phương pháp dự đoán.

00:20:41.000 --> 00:20:46.000
Như tôi đã đề cập, tôi sẽ bình thường hóa âm lượng.

00:20:46.000 --> 00:20:53.000
Sau đó, tôi sẽ sử dụng bộ hồi quy cây tăng cường để dự đoán giá cả.

00:20:53.000 --> 00:21:01.000
Nó lấy tên của cột chú thích - cũng là cột của các dự đoán kết quả - và nó lấy tên của cả ba cột tính năng.

00:21:01.000 --> 00:21:03.000
Tôi sẽ bắt đầu với ba cột này.

00:21:03.000 --> 00:21:13.000
Sau đó, tôi sẽ kết hợp các phần bằng cách sử dụng phương pháp nối thêm và trả lại nhiệm vụ.

00:21:13.000 --> 00:21:20.000
Bây giờ tôi đã có định nghĩa nhiệm vụ của mình, tôi sẽ thêm một phương pháp đào tạo như trước đây.

00:21:20.000 --> 00:21:26.000
Và như trước đây, tôi muốn đảm bảo rằng loại trả lại không phụ thuộc vào chi tiết cụ thể của mô hình của tôi.

00:21:26.000 --> 00:21:32.000
Bước đầu tiên là tải tệp CSV vào khung dữ liệu.

00:21:32.000 --> 00:21:35.000
Tôi đang sử dụng khung TabularData để làm điều này.

00:21:35.000 --> 00:21:43.000
Và như trước đây, tôi muốn tách một số dữ liệu để xác thực.

00:21:43.000 --> 00:21:50.000
Tôi sẽ chuyển các bộ dữ liệu đào tạo và xác thực sang phương pháp phù hợp.

00:21:50.000 --> 00:21:59.000
Tôi cũng sẽ báo cáo lỗi xác thực như trước đây và tôi sẽ lưu các thông số đã đào tạo để sử dụng sau.

00:21:59.000 --> 00:22:04.000
Cuối cùng, tôi sẽ trả lại máy biến áp.

00:22:04.000 --> 00:22:09.000
Khi tôi có một máy biến áp được đào tạo, tôi có thể sử dụng nó để đưa ra dự đoán giá trên các khung dữ liệu.

00:22:09.000 --> 00:22:17.000
Tôi sẽ viết một phương pháp dự đoán để làm điều này.

00:22:17.000 --> 00:22:24.000
Tôi sẽ bắt đầu bằng cách tải mô hình từ định nghĩa nhiệm vụ và URL tham số.

00:22:24.000 --> 00:22:35.000
Tôi cần đảm bảo khung dữ liệu tôi sử dụng để dự đoán có các cột tôi đã sử dụng làm tính năng: loại, vùng và âm lượng.

00:22:35.000 --> 00:22:38.000
Giá trị dự đoán sẽ nằm trong cột giá.

00:22:38.000 --> 00:22:44.000
Tôi sẽ sử dụng ID cột mà tôi đã xác định ở trên cùng.

00:22:44.000 --> 00:22:46.000
Và điều đó kết thúc hồi quy dạng bảng của tôi.

00:22:46.000 --> 00:22:56.000
Tôi có một phương pháp đào tạo, mà tôi chỉ cần gọi một lần để tạo ra các thông số đã đào tạo của mình và một phương pháp dự đoán trả về giá bơ, dự đoán dựa trên loại, khu vực và khối lượng bơ.

00:22:56.000 --> 00:22:59.000
Đó là tất cả những gì tôi cần để sử dụng cái này trong ứng dụng của mình.

00:22:59.000 --> 00:23:03.000
Dưới đây là một số điều cần ghi nhớ khi thực hiện các nhiệm vụ dạng bảng.

00:23:03.000 --> 00:23:07.000
Bạn có thể sử dụng các thao tác ColumnSelector để xử lý các cột cụ thể.

00:23:07.000 --> 00:23:19.000
Điều đáng chú ý là các trình phân loại và hồi quy cây đều là dạng bảng, nhưng bạn cũng có thể sử dụng công cụ ước tính không phải bảng, chẳng hạn như trình hồi quy tuyến tính, trong tác vụ dạng bảng bằng AnnotatedFeatureProvider.

00:23:19.000 --> 00:23:22.000
Vui lòng tham khảo tài liệu.

00:23:22.000 --> 00:23:29.000
Khi thực hiện dự đoán, hãy xây dựng một khung dữ liệu với các cột cần thiết, đảm bảo sử dụng đúng loại.

00:23:29.000 --> 00:23:34.000
Bây giờ bạn đã biết cách xây dựng một nhiệm vụ tùy chỉnh, hãy nói về việc triển khai.

00:23:34.000 --> 00:23:38.000
Cho đến nay, tôi đã sử dụng cùng một API để đào tạo và suy luận.

00:23:38.000 --> 00:23:43.000
Tôi muốn chỉ ra rằng khi sử dụng Create ML Components, mô hình của bạn là mã của bạn.

00:23:43.000 --> 00:23:48.000
Bạn cần định nghĩa nhiệm vụ, ngay cả khi tải các tham số đã đào tạo từ một tệp.

00:23:48.000 --> 00:23:55.000
Điều này hữu ích trong một số tình huống, nhưng đôi khi bạn có thể muốn sử dụng Core ML để triển khai.

00:23:55.000 --> 00:23:58.000
Khi sử dụng Core ML, bạn để lại mã phía sau.

00:23:58.000 --> 00:24:01.000
Mô hình được thể hiện đầy đủ bằng một tệp mô hình.

00:24:01.000 --> 00:24:05.000
Nếu tất cả các bạn đã sẵn sàng sử dụng Core ML, đây có thể là một quy trình làm việc tốt.

00:24:05.000 --> 00:24:08.000
Và nó có ưu điểm là các hoạt động tensor được tối ưu hóa.

00:24:08.000 --> 00:24:12.000
Nhưng có một số cân nhắc bạn nên ghi nhớ.

00:24:12.000 --> 00:24:15.000
Không phải tất cả các hoạt động đều được hỗ trợ trong Core ML.

00:24:15.000 --> 00:24:19.000
Cụ thể, máy biến áp và công cụ ước tính tùy chỉnh không được hỗ trợ.

00:24:19.000 --> 00:24:24.000
Và Core ML chỉ hỗ trợ một vài loại như hình ảnh và mảng có hình dạng.

00:24:24.000 --> 00:24:30.000
Nếu bạn đang sử dụng các loại tùy chỉnh, bạn có thể cần chuyển đổi chúng trong ứng dụng của mình khi sử dụng mô hình Core ML.

00:24:30.000 --> 00:24:33.000
Đây là cách bạn có thể xuất máy biến áp của mình dưới dạng mô hình Core ML.

00:24:33.000 --> 00:24:39.000
Nếu máy biến áp của bạn chứa các hoạt động không được hỗ trợ, điều này sẽ gây ra lỗi.

00:24:39.000 --> 00:24:46.000
Nếu bạn muốn gắn bó với việc triển khai định nghĩa nhiệm vụ của mình cùng với các thông số đã được đào tạo, bạn nên cân nhắc gói chúng trong gói Swift.

00:24:46.000 --> 00:24:51.000
Bằng cách này, bạn có thể cung cấp các phương pháp đơn giản để tải các tham số và thực hiện dự đoán.

00:24:51.000 --> 00:24:58.000
Để biết thêm thông tin về tài nguyên gói Swift, hãy xem bài nói chuyện về gói Swift từ WWDC 2020.

00:24:58.000 --> 00:24:59.000
Đó là tất cả những gì tôi có.

00:24:59.000 --> 00:25:04.000
Điều chính cần nhớ là bây giờ bạn có thể tạo các tác vụ tùy chỉnh với bố cục.

00:25:04.000 --> 00:25:06.000
Khả năng là vô tận.

00:25:06.000 --> 00:25:08.000
Tôi mong chờ được thấy những gì bạn xây dựng.

00:25:08.000 --> 00:25:20.000
Để biết các kỹ thuật nâng cao hơn, bao gồm các tác vụ âm thanh và video, hãy xem "Sẽ các mô hình nâng cao với Tạo Thành phần ML", nơi đồng nghiệp David của tôi sẽ trình bày các tác vụ tùy chỉnh nâng cao hơn.

00:25:20.000 --> 00:25:24.000
Cảm ơn bạn và tận hưởng phần còn lại của WWDC 2022!

00:25:24.000 --> 23:59:59.000
♪

