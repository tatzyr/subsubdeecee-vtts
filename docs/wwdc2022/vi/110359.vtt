WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Nhạc cụ hip hop êm dịu ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
Xin chào, tên tôi là Anders.

00:00:12.000 --> 00:00:15.000
Trong video này, tôi sẽ chỉ cho bạn cách bắt đầu với các plugin gói Swift.

00:00:15.000 --> 00:00:18.000
Các gói Swift đã được giới thiệu trong Xcode 11.

00:00:18.000 --> 00:00:21.000
Họ cung cấp một cách tuyệt vời để phân phối thư viện dưới dạng mã nguồn.

00:00:21.000 --> 00:00:31.000
Xcode 14 mở rộng cách tiếp cận này cho quy trình phát triển của bạn, cho phép bạn sử dụng các plugin để làm những việc như tạo mã nguồn trong quá trình xây dựng hoặc tự động hóa các tác vụ phát hành của mình.

00:00:31.000 --> 00:00:45.000
Chúng ta sẽ bắt đầu bằng cách xem xét các plugin gói là gì và chúng hoạt động như thế nào, sau đó nói chi tiết hơn về hai loại plugin gói mà Xcode 14 hỗ trợ: plugin lệnh và plugin công cụ xây dựng.

00:00:45.000 --> 00:00:48.000
Vậy trước hết, plugin là gì?

00:00:48.000 --> 00:00:54.000
Plugin gói là một tập lệnh Swift có thể thực hiện các hành động trên gói Swift hoặc dự án Xcode.

00:00:54.000 --> 00:00:58.000
Một plugin sử dụng API mà Xcode cung cấp đặc biệt cho mục đích này.

00:00:58.000 --> 00:01:01.000
Các plugin gói được triển khai dưới dạng các gói Swift.

00:01:01.000 --> 00:01:09.000
Một gói có thể cung cấp các plugin cùng với các thư viện và tệp thực thi, hoặc một gói chỉ có thể tập trung vào việc cung cấp các plugin.

00:01:09.000 --> 00:01:16.000
Một plugin gói có thể được triển khai bằng cách sử dụng nhiều tệp nguồn và một gói Swift có thể xác định nhiều hơn một plugin.

00:01:16.000 --> 00:01:25.000
Một plugin chuyên dụng cao có thể là riêng tư cho gói cung cấp nó và trong trường hợp đó, nó chỉ có sẵn trong gói đó.

00:01:25.000 --> 00:01:32.000
Nhưng một plugin có mục đích chung có thể được cung cấp cho các gói khác bằng cách xác định nó là một sản phẩm gói.

00:01:32.000 --> 00:01:39.000
Điều đó cũng cho phép các gói khác sử dụng nó, theo cách tương tự như cách một gói có thể sử dụng thư viện từ một gói khác.

00:01:39.000 --> 00:01:45.000
Nhưng không giống như thư viện, sự phụ thuộc vào plugin không đưa nội dung thời gian chạy vào ứng dụng của bạn.

00:01:45.000 --> 00:01:52.000
Thay vào đó, nó cho phép bạn truy cập các công cụ phát triển chạy trên máy của riêng bạn hoặc trong tự động hóa xây dựng của bạn.

00:01:52.000 --> 00:01:55.000
Vậy một gói plugin có thể làm gì?

00:01:55.000 --> 00:02:03.000
Chà, trong Xcode 14 có hai loại plugin gói: plugin lệnh và plugin công cụ xây dựng.

00:02:03.000 --> 00:02:08.000
Các plugin lệnh thực hiện các hành động tùy chỉnh mà bạn có thể chạy bất cứ khi nào bạn muốn.

00:02:08.000 --> 00:02:15.000
Họ có thể chạy các trình định dạng mã nguồn hoặc linters, hoặc họ có thể thực hiện các tác vụ khác như một phần của quy trình phát triển của bạn.

00:02:15.000 --> 00:02:24.000
Điều đó có thể bao gồm cập nhật danh sách người đóng góp hoặc ngày bản quyền trong các tệp nguồn dựa trên lịch sử Git hoặc những thứ khác mà bạn có thể có các tập lệnh tùy ý để làm ngay hôm nay.

00:02:24.000 --> 00:02:29.000
Nếu cần, một plugin lệnh có thể yêu cầu quyền sửa đổi các tệp trong một gói.

00:02:29.000 --> 00:02:32.000
Và điều đó đặc biệt hữu ích cho việc định dạng mã.

00:02:32.000 --> 00:02:35.000
Không phải tất cả các plugin lệnh đều cần quyền ghi.

00:02:35.000 --> 00:02:42.000
Một số lệnh có thể tạo báo cáo hoặc tính toán số liệu về mã của bạn mà không cần thực hiện bất kỳ thay đổi nào.

00:02:42.000 --> 00:02:45.000
Các plugin công cụ xây dựng mở rộng biểu đồ phụ thuộc của hệ thống xây dựng.

00:02:45.000 --> 00:02:51.000
Chúng đặc biệt hữu ích cho việc tạo mã nguồn hoặc tài nguyên như một phần của bản dựng.

00:02:51.000 --> 00:03:00.000
Không giống như các plugin lệnh, được gọi cho toàn bộ gói hoặc dự án tại một thời điểm, các plugin công cụ xây dựng được áp dụng cho từng mục tiêu cần chúng.

00:03:00.000 --> 00:03:04.000
Hãy xem xét việc sử dụng một plugin lệnh trong Xcode.

00:03:04.000 --> 00:03:09.000
Đây là một ứng dụng iOS nhỏ hiển thị nhiều loại hình dạng hình học khác nhau.

00:03:09.000 --> 00:03:13.000
Nó bao gồm một dự án ứng dụng và một gói cục bộ.

00:03:13.000 --> 00:03:19.000
Gói triển khai một thư viện cung cấp các loại dữ liệu cốt lõi và logic cho ứng dụng.

00:03:19.000 --> 00:03:31.000
Tôi đang nghĩ đến việc tách gói thành kho lưu trữ riêng của nó để những người khác có thể sử dụng nó và như một phần của việc này, tôi muốn tạo một tệp đóng góp liệt kê tất cả những người đã cam kết mã của gói này.

00:03:31.000 --> 00:03:33.000
Tôi có thể viết một kịch bản tùy chỉnh để làm điều này.

00:03:33.000 --> 00:03:41.000
Nhưng tôi biết một gói cung cấp một số plugin hữu ích để làm việc với mã và tôi nghĩ nó có một plugin thực hiện chính xác những gì tôi muốn.

00:03:41.000 --> 00:03:51.000
Để có quyền truy cập vào các plugin đó, tôi sẽ làm điều tương tự như thể tôi cần một thư viện từ một gói khác: Tôi sẽ thêm một phụ thuộc gói vào bản kê khai của gói cục bộ của mình.

00:03:51.000 --> 00:03:59.000
Khi tôi lưu bản kê khai, Xcode tìm nạp gói từ xa và nó xuất hiện trong phần Phụ thuộc gói.

00:03:59.000 --> 00:04:05.000
Tôi nhận thấy rằng Xcode cũng đã tìm nạp SwiftFormat, đây là một công cụ phổ biến để định dạng mã.

00:04:05.000 --> 00:04:12.000
Điều này là do một trong những plugin lệnh trong gói tiện ích lần lượt phụ thuộc vào SwiftFormat.

00:04:12.000 --> 00:04:18.000
Bây giờ tôi đã thêm sự phụ thuộc này, tôi có quyền truy cập vào bất kỳ lệnh plugin nào mà gói cung cấp.

00:04:18.000 --> 00:04:25.000
Tôi sử dụng trình đơn ngữ cảnh trên gói mà tôi muốn áp dụng lệnh.

00:04:25.000 --> 00:04:35.000
Bây giờ có ba lệnh mới trong menu; một là để định dạng lại mã nguồn bằng SwiftFormat và hai lệnh khác cung cấp các hành động chuyên biệt.

00:04:35.000 --> 00:04:43.000
Một trong số họ tạo hoặc cập nhật danh sách người đóng góp dựa trên lịch sử cam kết trong Git và một người khác cập nhật ngày bản quyền trong các tệp nguồn của tôi.

00:04:43.000 --> 00:04:48.000
Lệnh ở giữa đó thực hiện chính xác những gì tôi muốn.

00:04:48.000 --> 00:04:55.000
Khi tôi gọi lệnh plugin trên gói của mình, Xcode cho phép tôi chọn mục tiêu nào của nó để chuyển đến plugin.

00:04:55.000 --> 00:04:58.000
Trong trường hợp này, tôi sẽ gọi nó trên toàn bộ gói.

00:04:58.000 --> 00:05:05.000
Và nếu plugin nhận các đối số tùy chỉnh, tôi cũng có thể chuyển chúng ở đây.

00:05:05.000 --> 00:05:12.000
Tôi nhấp vào Chạy, và vì plugin sẽ sửa đổi hệ thống tệp, Xcode cảnh báo tôi về điều đó.

00:05:12.000 --> 00:05:19.000
Tôi có thể thấy lý do đã nêu của tác giả plugin muốn sửa đổi mã của tôi, nhưng tôi cũng muốn xem qua việc triển khai plugin.

00:05:19.000 --> 00:05:25.000
Vì vậy, tôi chọn Hiển thị lệnh và Xcode đưa tôi đến mã.

00:05:25.000 --> 00:05:35.000
Những gì plugin này đang làm là an toàn, vì vậy tôi sẽ gọi lại lệnh và lần này, tôi sẽ chọn Chạy.

00:05:35.000 --> 00:05:40.000
Tôi sẽ bảo Xcode nhớ lựa chọn của tôi cho plugin này.

00:05:40.000 --> 00:05:50.000
Plugin cụ thể này sử dụng lịch sử Git để tạo danh sách tệp hiển thị tên của những người đóng góp, nhưng có rất nhiều sự linh hoạt trong những gì plugin lệnh có thể làm.

00:05:50.000 --> 00:05:56.000
Bây giờ chúng ta đã sử dụng một plugin lệnh trong Xcode, chúng ta hãy xem xét kỹ hơn cách các plugin hoạt động dưới mui xe.

00:05:56.000 --> 00:06:01.000
Các plugin gói là các tập lệnh Swift được biên dịch và chạy khi cần thiết.

00:06:01.000 --> 00:06:05.000
Mỗi plugin chạy như một quy trình riêng biệt.

00:06:05.000 --> 00:06:12.000
Các plugin có quyền truy cập vào biểu diễn chắt lọc của gói đầu vào, bao gồm các tệp nguồn của nó.

00:06:12.000 --> 00:06:16.000
Một plugin cũng nhận được thông tin về bất kỳ sự phụ thuộc nào của gói.

00:06:16.000 --> 00:06:20.000
Nhiều plugin gọi các công cụ dòng lệnh như một phần của công việc thực hiện công việc của họ.

00:06:20.000 --> 00:06:28.000
Các plugin cũng có thể tạo các tệp và thư mục, và có thể thực hiện các hành động khác bằng cách sử dụng các thư viện tiêu chuẩn như Foundation.

00:06:28.000 --> 00:06:37.000
Một plugin chạy trong hộp cát ngăn chặn truy cập mạng và chỉ cho phép ghi đến một vài nơi trong hệ thống tệp, chẳng hạn như thư mục đầu ra xây dựng.

00:06:37.000 --> 00:06:42.000
Nhưng các plugin lệnh có thể yêu cầu quyền sửa đổi các tệp trong thư mục nguồn gói.

00:06:42.000 --> 00:06:47.000
Nếu người dùng chấp thuận, hộp cát được cấu hình để cho phép ghi vào các vị trí đó.

00:06:47.000 --> 00:06:51.000
Plugin cũng có thể gửi kết quả trở lại Xcode.

00:06:51.000 --> 00:06:59.000
Nó có thể phát ra cảnh báo và lỗi, và các plugin công cụ xây dựng có thể xác định các lệnh gọi công cụ để Xcode chạy trong quá trình xây dựng.

00:06:59.000 --> 00:07:04.000
Tất cả các plugin gói đều sử dụng API từ mô-đun PackagePlugin do Xcode cung cấp.

00:07:04.000 --> 00:07:10.000
API này cho phép plugin truy cập gói đầu vào và nếu thích hợp, trả lại kết quả cho Xcode.

00:07:10.000 --> 00:07:16.000
Tệp nguồn chính triển khai plugin cũng xác định điểm vào chính.

00:07:16.000 --> 00:07:22.000
Đây phải là một lớp hoặc một cấu trúc phù hợp với giao thức phù hợp với loại plugin.

00:07:22.000 --> 00:07:28.000
Chức năng điểm vào cụ thể mà Xcode gọi phụ thuộc vào loại plugin đó.

00:07:28.000 --> 00:07:33.000
Bạn có thể tìm hiểu thêm về PackagePlugin API trong video "Tạo plugin Gói Swift".

00:07:33.000 --> 00:07:37.000
Trước đó, chúng tôi đã sử dụng một plugin lệnh để thực hiện các thay đổi đối với gói của mình.

00:07:37.000 --> 00:07:41.000
Hãy xem xét thêm một số chi tiết cụ thể của các plugin lệnh.

00:07:41.000 --> 00:07:44.000
Các plugin lệnh mở rộng quy trình phát triển.

00:07:44.000 --> 00:07:48.000
Chúng được áp dụng trực tiếp cho một gói, không phải trong quá trình xây dựng.

00:07:48.000 --> 00:07:55.000
Không phải tất cả các plugin lệnh đều sửa đổi hệ thống tệp - có những hành động hữu ích không liên quan đến việc thay đổi bất kỳ tệp nào.

00:07:55.000 --> 00:08:01.000
Nhưng nếu một lệnh muốn ghi vào hệ thống tệp, nó phải khai báo rằng trong bản kê khai của gói triển khai plugin.

00:08:01.000 --> 00:08:06.000
Điều này khiến Xcode yêu cầu người dùng cho phép trước khi để plugin chạy.

00:08:06.000 --> 00:08:12.000
Các plugin thường khá nhỏ và thường phụ thuộc vào các công cụ khác để thực hiện công việc thực tế.

00:08:12.000 --> 00:08:17.000
Trước đó, chúng tôi đã thấy rằng một trong những plugin sử dụng SwiftFormat cho tất cả các công việc thực tế.

00:08:17.000 --> 00:08:26.000
Sự phụ thuộc vào các gói công cụ có thể là mã nhị phân hoặc mã nguồn - Xcode sẽ xây dựng bất kỳ công cụ cần thiết nào từ nguồn trước khi lệnh được gọi.

00:08:26.000 --> 00:08:31.000
Lưu ý rằng plugin có thể được cung cấp bởi một gói khác với công cụ mà nó dựa vào.

00:08:31.000 --> 00:08:40.000
Trong việc triển khai các plugin lệnh, loại chính phù hợp với giao thức CommandPlugin và plugin triển khai điểm vào performCommand.

00:08:40.000 --> 00:08:45.000
Điểm vào này có ngữ cảnh và bất kỳ đối số tùy chỉnh nào do người dùng cung cấp.

00:08:45.000 --> 00:08:49.000
Hãy xem xét một cách khác để gọi các plugin lệnh.

00:08:49.000 --> 00:08:58.000
Tôi sẽ sử dụng cùng một dự án như trước đây và vì tôi đã thêm sự phụ thuộc vào gói SourceCodeUtilities trước đó, tôi có thể gọi các plugin tương tự trong Terminal.

00:08:58.000 --> 00:09:05.000
Đầu tiên tôi sẽ thay đổi thư mục thành gói CoreLibs, vì đó là gói mà tôi muốn áp dụng plugin lệnh cho.

00:09:05.000 --> 00:09:10.000
Swift Package Manager 5.6 có một lệnh con mới cho các plugin.

00:09:10.000 --> 00:09:14.000
Tôi sẽ gõ "plugin gói nhanh --Danh sách" để xem những plugin nào có sẵn.

00:09:14.000 --> 00:09:18.000
Điều này hiển thị các plugin tương tự như trong menu trong Xcode.

00:09:18.000 --> 00:09:23.000
Ở đây trên dòng lệnh, mỗi lệnh cũng hiển thị động từ nên được sử dụng để chạy nó.

00:09:23.000 --> 00:09:30.000
Tôi sẽ sử dụng động từ để tái tạo danh sách người đóng góp, như tôi đã làm trong Xcode.

00:09:30.000 --> 00:09:34.000
Plugin này muốn quyền ghi vào hệ thống tệp, vì nó sẽ tạo một tệp.

00:09:34.000 --> 00:09:40.000
Tôi gõ "có" để cho phép điều này, và plugin có thể chạy và cập nhật danh sách người đóng góp.

00:09:40.000 --> 00:09:46.000
Tôi cũng có thể đã sử dụng tùy chọn trình quản lý gói cho phép plugin ghi vào hệ thống tệp mà không cần hỏi.

00:09:46.000 --> 00:09:52.000
Điều này đặc biệt hữu ích nếu bạn đang gọi nó từ hệ thống CI hoặc tự động hóa xây dựng khác.

00:09:52.000 --> 00:09:57.000
Nhưng hãy chắc chắn rằng bạn biết plugin đang làm gì trước khi sử dụng tùy chọn đó.

00:09:57.000 --> 00:10:02.000
Cũng giống như trong Xcode, tôi có thể chuyển các đối số dòng lệnh cho plugin.

00:10:02.000 --> 00:10:07.000
Bất kỳ đối số nào sau động từ hành động của plugin sẽ được chuyển đến plugin.

00:10:07.000 --> 00:10:13.000
Trong trường hợp này, tôi chuyển một lá cờ dài dòng để xem thêm đầu ra từ plugin khi nó chạy.

00:10:13.000 --> 00:10:17.000
Mỗi plugin lệnh xác định những đối số mà nó hỗ trợ.

00:10:17.000 --> 00:10:22.000
Cho đến bây giờ, chúng ta chủ yếu nói về các plugin lệnh.

00:10:22.000 --> 00:10:25.000
Nhưng có một vài điều nữa để nói về các plugin công cụ xây dựng.

00:10:25.000 --> 00:10:31.000
Không giống như plugin lệnh, plugin công cụ xây dựng không thực hiện công việc của nó ngay lập tức.

00:10:31.000 --> 00:10:38.000
Thay vào đó, nó tạo và trả về các lệnh gọi công cụ xây dựng để Xcode chạy sau khi gói được xây dựng.

00:10:38.000 --> 00:10:46.000
Mỗi lời gọi công cụ đó có một dòng lệnh để chạy, và nó cũng có đầu vào và đầu ra cho Xcode biết khi nào nên chạy nó.

00:10:46.000 --> 00:10:52.000
Các plugin công cụ xây dựng có thể xác định các lệnh chạy trong quá trình xây dựng hoặc trước khi xây dựng.

00:10:52.000 --> 00:10:56.000
Chúng ta sẽ xem xét sự khác biệt trong một phút nữa.

00:10:56.000 --> 00:11:04.000
Các lệnh được trả về bởi các plugin công cụ xây dựng thường được cấu hình để ghi đầu ra của chúng vào thư mục xây dựng, vì vậy chúng tồn tại giữa các bản dựng gia tăng.

00:11:04.000 --> 00:11:13.000
Và giống như bản thân các plugin, các lệnh được xác định bởi plugin công cụ xây dựng chạy trong hộp cát ngăn chặn truy cập mạng và bất kỳ thay đổi nào đối với gói.

00:11:13.000 --> 00:11:24.000
Trong việc triển khai plugin công cụ xây dựng, loại chính phù hợp với giao thức BuildToolPlugin và plugin triển khai điểm vào createBuildCommands.

00:11:24.000 --> 00:11:30.000
Điểm vào này lấy một ngữ cảnh và mục tiêu để tạo ra các lệnh xây dựng cho.

00:11:30.000 --> 00:11:35.000
Nó trả về bất kỳ lệnh xây dựng tùy chỉnh nào sẽ chạy khi gói được xây dựng.

00:11:35.000 --> 00:11:40.000
Có hai loại lệnh xây dựng cơ bản mà một plugin công cụ xây dựng có thể trả về.

00:11:40.000 --> 00:11:48.000
Các lệnh xây dựng thông thường chỉ định đường dẫn đầu vào và đầu ra, và chỉ chạy khi đầu ra bị thiếu hoặc đầu vào đã thay đổi.

00:11:48.000 --> 00:11:56.000
Các lệnh xây dựng trước chạy trước khi bắt đầu xây dựng và có thể được sử dụng khi tên của các đầu ra không được biết trước thời hạn.

00:11:56.000 --> 00:12:02.000
Các lệnh xây dựng trước chạy trước mỗi bản dựng, vì vậy chúng nên đảm bảo thực hiện càng ít công việc càng tốt khi không có thay đổi.

00:12:02.000 --> 00:12:07.000
Các lệnh xây dựng và các lệnh xây dựng trước rất tốt để tạo mã nguồn hoặc tài nguyên.

00:12:07.000 --> 00:12:12.000
Vậy làm thế nào để Xcode biết plugin công cụ xây dựng nào để áp dụng cho mục tiêu gói?

00:12:12.000 --> 00:12:21.000
Trong SwiftPM 5.6 trở lên, có một tham số plugin mới trong bản kê khai gói liệt kê các plugin công cụ xây dựng mà mục tiêu muốn.

00:12:21.000 --> 00:12:33.000
Tham số này chỉ định bất kỳ plugin công cụ xây dựng nào cần thiết cho mục tiêu và cũng giống như với bất kỳ thư viện thời gian chạy nào mà nó phụ thuộc vào, những plugin đó có thể nằm trong cùng một gói hoặc trong một gói khác.

00:12:33.000 --> 00:12:34.000
Hãy quay lại Xcode.

00:12:34.000 --> 00:12:38.000
Tôi sẽ cấu hình ứng dụng hình học của mình để sử dụng plugin công cụ xây dựng.

00:12:38.000 --> 00:12:46.000
Trong trường hợp cụ thể này, tôi có một công cụ dòng lệnh tùy chỉnh tạo mã Swift dựa trên một số tệp dữ liệu trong mục tiêu Thư viện cốt lõi của tôi.

00:12:46.000 --> 00:12:54.000
Các chi tiết cụ thể không quan trọng, nhưng những gì tôi muốn kết thúc là các bộ truy cập Swift an toàn kiểu được tạo cho từng phần dữ liệu.

00:12:54.000 --> 00:13:01.000
Ngoài các tệp dữ liệu của mình, tôi đã sử dụng một công cụ tùy chỉnh để tạo mã nguồn mà tôi đã kiểm tra vào kho lưu trữ của mình.

00:13:01.000 --> 00:13:09.000
Tôi đã chạy thủ công công cụ này để tạo lại mã trình bao bọc Swift và cam kết các thay đổi bất cứ khi nào tệp dữ liệu của tôi thay đổi.

00:13:09.000 --> 00:13:11.000
Nhưng với plugin công cụ xây dựng, tôi có thể làm tốt hơn.

00:13:11.000 --> 00:13:19.000
Tôi có thể tạo mã trong quá trình xây dựng và tránh phải giữ mã đã tạo trong kho lưu trữ của mình.

00:13:19.000 --> 00:13:33.000
Để có quyền truy cập vào plugin, tôi vào bản kê khai gói và thêm sự phụ thuộc vào gói cung cấp plugin trình tạo nguồn mà tôi muốn sử dụng.

00:13:33.000 --> 00:13:42.000
Các mục tiêu trong gói của tôi hiện có quyền truy cập vào bất kỳ plugin công cụ xây dựng nào được xác định trong gói đó.

00:13:42.000 --> 00:13:52.000
Bây giờ tôi đi đến mục tiêu cần sử dụng plugin và tôi thêm tham số plugin vào định nghĩa của nó.

00:13:52.000 --> 00:13:59.000
Điều này cho Xcode biết rằng nó muốn áp dụng một công cụ xây dựng cụ thể từ gói đó cho mục tiêu của tôi.

00:13:59.000 --> 00:14:03.000
Bây giờ tôi có thể đi và xóa các tệp nguồn được tạo đó khỏi kho lưu trữ của mình.

00:14:03.000 --> 00:14:11.000
Chúng sẽ được tạo hoặc cập nhật khi cần thiết trong quá trình xây dựng.

00:14:11.000 --> 00:14:14.000
Ở đó, nó sạch hơn nhiều.

00:14:14.000 --> 00:14:22.000
Và bây giờ khi tôi xây dựng và chạy ứng dụng của mình, plugin công cụ xây dựng của tôi yêu cầu Xcode gọi công cụ tạo mã của tôi bất cứ khi nào tệp dữ liệu của tôi thay đổi.

00:14:22.000 --> 00:14:28.000
Mã được tạo sẽ được lưu trữ cùng với các tệp xây dựng khác trong thư mục xây dựng của tôi, giữ cho kho lưu trữ của tôi sạch sẽ.

00:14:28.000 --> 00:14:33.000
Trong video này, chúng ta đã nói về các plugin gói Swift là gì và chúng hoạt động như thế nào.

00:14:33.000 --> 00:14:40.000
Chúng tôi đã thảo luận về một số điểm tương đồng và khác biệt giữa plugin lệnh và plugin công cụ xây dựng.

00:14:40.000 --> 00:14:47.000
Cả hai loại plugin đều cho phép bạn thay thế nhiều tập lệnh ngẫu nhiên bằng một loại mở rộng có cấu trúc hơn trong các gói của bạn.

00:14:47.000 --> 00:14:56.000
Các plugin công cụ xây dựng cho phép bạn mở rộng hệ thống xây dựng để tạo nguồn và tài nguyên hoặc thực hiện các công việc tùy chỉnh khác như một phần của bản dựng của bạn.

00:14:56.000 --> 00:15:01.000
Các plugin lệnh cho phép bạn tự động hóa các tác vụ phát triển phổ biến với các hành động tùy chỉnh.

00:15:01.000 --> 00:15:08.000
Chúng có thể được điều chỉnh cho phù hợp với một quy trình làm việc cụ thể hoặc có thể được viết để hữu ích trong nhiều trường hợp khác nhau.

00:15:08.000 --> 00:15:15.000
Để tìm hiểu cách tạo plugin gói của riêng bạn, hãy nhớ xem video "Tạo plugin gói Swift".

00:15:15.000 --> 00:15:19.000
Cảm ơn vì đã xem và tận hưởng phần còn lại của WWDC 2022.

00:15:19.000 --> 23:59:59.000
♪

