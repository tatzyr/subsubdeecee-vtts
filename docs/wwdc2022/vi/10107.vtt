WEBVTT

00:00:00.000 --> 00:00:14.000
Rich Gillam: Xin chào, tôi là Rich, và tôi ở đây để giúp bạn đưa nó từ phải sang trái.

00:00:14.000 --> 00:00:22.000
Vì vậy, bạn đã bản địa hóa đơn đăng ký của mình cho một loạt các ngôn ngữ, bao gồm các ngôn ngữ châu Âu phổ biến nhất, các ngôn ngữ châu Á phổ biến nhất.

00:00:22.000 --> 00:00:25.000
Và bây giờ bạn muốn bản địa hóa nó cho tiếng Ả Rập và tiếng Do Thái.

00:00:25.000 --> 00:00:35.000
Đây là một lựa chọn tốt; tiếng Ả Rập là một trong mười ngôn ngữ được sử dụng nhiều nhất trên nền tảng của chúng tôi, nhưng nó mang theo một số thách thức mà bạn không gặp phải khi phát triển cho các ngôn ngữ khác.

00:00:35.000 --> 00:00:44.000
Đó là những gì cuộc nói chuyện này nói về, làm thế nào để phát triển ứng dụng của bạn để nó có thể được bản địa hóa sang các ngôn ngữ như tiếng Ả Rập và tiếng Do Thái.

00:00:44.000 --> 00:00:51.000
Tiếng Ả Rập và tiếng Do Thái được sử dụng phổ biến nhất trong cái gọi là "ngôn ngữ từ phải sang trái". Tại sao họ được gọi như thế này?

00:00:51.000 --> 00:01:00.000
Tiếng Anh, tiếng Pháp, tiếng Trung, tiếng Thái và nhiều ngôn ngữ khác được viết sao cho các ký tự của chúng chạy từ trái sang phải như thế này.

00:01:00.000 --> 00:01:04.000
Trong tiếng Do Thái, các ký tự chạy từ phải sang trái như thế này.

00:01:04.000 --> 00:01:10.000
Họ làm điều tương tự trong tiếng Ả Rập, và trong tiếng Ả Rập, các ký tự cũng được nối chữ thảo.

00:01:10.000 --> 00:01:15.000
Bốn chữ cái trong "salaam" trông như thế này khi chúng được viết riêng.

00:01:15.000 --> 00:01:18.000
Nhân tiện, nó không chỉ là tiếng Ả Rập và tiếng Do Thái.

00:01:18.000 --> 00:01:24.000
Apple thực sự có hỗ trợ phông chữ và bàn phím cho 15 ngôn ngữ từ phải sang trái.

00:01:24.000 --> 00:01:26.000
Đây là một đoạn văn bản tiếng Do Thái.

00:01:26.000 --> 00:01:32.000
Cái này là từ phiên bản tiếng Do Thái của trang "Trợ giúp Công thức &amp; Chức năng" cho Số.

00:01:32.000 --> 00:01:41.000
Lưu ý rằng văn bản được căn chỉnh ở bên phải và rách rưới ở bên trái, và nhiều dòng, bao gồm cả dòng cuối cùng, có dấu câu ở phía bên trái.

00:01:41.000 --> 00:01:43.000
Cũng có một con số trong đoạn này.

00:01:43.000 --> 00:01:45.000
Con số vẫn đi từ trái sang phải.

00:01:45.000 --> 00:01:50.000
Cái này cho chúng ta biết rằng Numbers hỗ trợ hơn 250 chức năng.

00:01:50.000 --> 00:02:01.000
Nếu chúng ta mở rộng tầm nhìn của mình để bao gồm một đoạn văn khác, chúng ta thấy rằng đoạn này có một số từ tiếng Anh, tên của iWork và các ứng dụng cấu thành của nó, Pages, Numbers và Keynote.

00:02:01.000 --> 00:02:05.000
Chúng cũng được viết từ trái sang phải, ngay cả trong một đoạn tiếng Do Thái.

00:02:05.000 --> 00:02:09.000
Vì vậy, đối với nhiều đoạn văn, văn bản là hai chiều.

00:02:09.000 --> 00:02:17.000
Đây là một thuộc tính vốn có của tiếng Ả Rập và tiếng Do Thái, và đó là lý do tại sao chúng cũng thường được gọi là ngôn ngữ "bidi".

00:02:17.000 --> 00:02:22.000
Nếu chúng ta mở rộng tầm nhìn của mình hơn nữa, chúng ta sẽ thấy toàn bộ trang được bố trí từ phải sang trái.

00:02:22.000 --> 00:02:29.000
Chúng tôi có một bảng ở đây, và văn bản ở bên phải của hình ảnh thay vì bên trái của chúng.

00:02:29.000 --> 00:02:35.000
Và nếu chúng ta mở rộng nó hơn nữa để xem khung cửa sổ của Safari, chúng ta thấy rằng nó không dừng lại ở nội dung.

00:02:35.000 --> 00:02:43.000
Các dòng văn bản tiếng Ả Rập và tiếng Do Thái bắt đầu ở bên phải và tiến sang bên trái, vì vậy thật tự nhiên khi mong đợi các yếu tố giao diện người dùng khác cũng làm như vậy.

00:02:43.000 --> 00:02:50.000
Giống như độc giả mong đợi mọi thứ bắt đầu từ bên trái và tiến tới bên phải, độc giả Ả Rập và Do Thái mong đợi điều ngược lại.

00:02:50.000 --> 00:03:00.000
Vì vậy, ở đây, thanh công cụ của Safari chạy từ phải sang trái với các nút đèn giao thông ở góc trên bên phải và các nút chuyển sang trái.

00:03:00.000 --> 00:03:05.000
Và nếu chúng ta mở rộng trọng tâm của mình để bao gồm toàn bộ màn hình, chúng ta sẽ thấy rằng nó mở rộng ở mọi nơi.

00:03:05.000 --> 00:03:10.000
Đây là màn hình trợ giúp của Numbers và chúng tôi thấy rằng tất cả các yếu tố trong Numbers cũng đã bị lật.

00:03:10.000 --> 00:03:12.000
Thanh bên ở bên trái.

00:03:12.000 --> 00:03:16.000
Thanh tab chạy từ phải sang trái. Ngay cả bản thân tài liệu cũng bị lật.

00:03:16.000 --> 00:03:21.000
Và thanh menu Mac và dock cũng chạy từ phải sang trái.

00:03:21.000 --> 00:03:27.000
Làm đúng tất cả những điều này có thể phức tạp, nhưng tin tuyệt vời là chúng tôi thực hiện hầu hết các công việc nặng nhọc cho bạn.

00:03:27.000 --> 00:03:30.000
Hầu hết hỗ trợ từ phải sang trái đều miễn phí.

00:03:30.000 --> 00:03:32.000
Nhưng có những điều cần ghi nhớ.

00:03:32.000 --> 00:03:41.000
Vì vậy, đó là những gì chúng ta sẽ nói về, những gì hệ thống làm cho bạn, khi bạn cần chọn tham gia hoặc không tham gia và những gì cần suy nghĩ khi triển khai hỗ trợ từ phải sang trái của riêng bạn.

00:03:41.000 --> 00:03:47.000
Chúng ta sẽ nói về văn bản, hình ảnh, hướng điều khiển và bố cục giao diện người dùng.

00:03:47.000 --> 00:03:50.000
Chúng tôi cũng sẽ đề cập đến việc hiển thị các con số bằng tiếng Ả Rập.

00:03:50.000 --> 00:03:57.000
Và cuối cùng, chúng ta sẽ nói một chút về cách kiểm tra xem ứng dụng của bạn có đang xử lý từ phải sang trái một cách chính xác hay không.

00:03:57.000 --> 00:03:59.000
Vậy chúng ta hãy đi sâu vào.

00:03:59.000 --> 00:04:04.000
Đầu tiên, chúng ta sẽ nói thêm một chút về cách văn bản hoạt động và giới thiệu một số thuật ngữ.

00:04:04.000 --> 00:04:07.000
Hãy bắt đầu với khái niệm về hướng viết.

00:04:07.000 --> 00:04:16.000
Như chúng ta đã thấy, tiếng Anh được viết từ trái sang phải, và tiếng Do Thái được viết từ phải sang trái.

00:04:16.000 --> 00:04:21.000
Nhưng điều gì sẽ xảy ra nếu chúng ta trộn chúng?

00:04:21.000 --> 00:04:38.000
Nếu bạn có một câu đa ngôn ngữ như thế này, các thành phần riêng lẻ vẫn giữ nguyên hướng viết của chúng, nhưng điều này có nghĩa là mỗi câu này hiện bao gồm ba thành phần: Hai đoạn văn bản riêng biệt bằng ngôn ngữ mẹ đẻ kẹp một đoạn văn bản bằng một ngôn ngữ khác.

00:04:38.000 --> 00:04:44.000
Khi chúng ta nói về hướng viết của một đoạn văn, chúng ta đang nói về thứ tự của các đoạn riêng lẻ này.

00:04:44.000 --> 00:05:00.000
Khi chúng ta nói câu tiếng Anh có hướng viết từ trái sang phải, đó là vì ba hộp này chạy từ trái sang phải và khi chúng ta nói câu tiếng Do Thái có hướng viết từ phải sang trái, đó là vì ba hộp đó chạy từ phải sang trái.

00:05:00.000 --> 00:05:03.000
Một khái niệm khác nhưng có liên quan là căn chỉnh văn bản.

00:05:03.000 --> 00:05:09.000
Nếu bạn đọc một ngôn ngữ từ trái sang phải, mắt bạn sẽ hướng về phía bên trái của trang và tiến tới bên phải.

00:05:09.000 --> 00:05:13.000
Nếu bạn đọc ngôn ngữ từ phải sang trái, thì ngược lại.

00:05:13.000 --> 00:05:18.000
Vì vậy, văn bản được căn chỉnh ở phía bên phải bằng ngôn ngữ từ phải sang trái.

00:05:18.000 --> 00:05:23.000
Tin tốt là hầu hết thời gian, bạn không phải lo lắng về một trong hai điều này.

00:05:23.000 --> 00:05:38.000
CoreText không chỉ quan tâm đến việc sắp xếp tất cả các ký tự đúng cách trên một dòng hoặc đoạn văn bản, bao gồm cả khi văn bản của các hướng khác nhau được trộn lẫn trên một dòng, mà tất cả các khung giao diện người dùng của chúng tôi cũng tự động đặt hướng viết và căn chỉnh.

00:05:38.000 --> 00:05:44.000
Tất cả các tiện ích giao diện người dùng mặc định là "hướng viết tự nhiên" và "căn chỉnh tự nhiên".

00:05:44.000 --> 00:05:50.000
Hướng viết của tiện ích văn bản mặc định khớp với hướng viết bình thường cho ngôn ngữ giao diện người dùng của người dùng.

00:05:50.000 --> 00:05:57.000
Đó là, nếu giao diện người dùng của bạn bằng tiếng Do Thái hoặc tiếng Ả Rập, hướng viết của các tiện ích văn bản của bạn mặc định là từ phải sang trái.

00:05:57.000 --> 00:06:00.000
Căn chỉnh tự nhiên theo hướng viết.

00:06:00.000 --> 00:06:07.000
Đó là, nếu hướng viết của tiện ích văn bản từ phải sang trái, nó cũng sẽ được căn chỉnh sang phải.

00:06:07.000 --> 00:06:11.000
Hầu hết thời gian, đây là những gì bạn muốn, nhưng bạn có thể ghi đè các mặc định.

00:06:11.000 --> 00:06:15.000
Chúng ta sẽ nói nhiều hơn về điều này trong phần về định hướng kiểm soát.

00:06:15.000 --> 00:06:19.000
Bây giờ có vẻ là thời điểm tốt để bắt đầu một biểu đồ nhỏ về các thuật ngữ mà bạn sẽ gặp phải.

00:06:19.000 --> 00:06:28.000
Những gì chúng tôi đang nói ở đây là căn chỉnh tự nhiên tương ứng với căn chỉnh trái trong ngôn ngữ từ trái sang phải và căn chỉnh phải bằng ngôn ngữ từ phải sang trái.

00:06:28.000 --> 00:06:30.000
Chúng tôi sẽ thêm vào biểu đồ này khi chúng tôi tiếp tục.

00:06:30.000 --> 00:06:33.000
Nhưng tất nhiên, đó không chỉ là tin nhắn mà bạn phải lo lắng.

00:06:33.000 --> 00:06:40.000
Có văn bản được đọc theo hướng ngược lại có ảnh hưởng sâu sắc đến các yếu tố trong ứng dụng của bạn ngoài văn bản.

00:06:40.000 --> 00:06:45.000
Hãy nói về cách nó có thể ảnh hưởng đến các biểu tượng và các yếu tố hình ảnh khác.

00:06:45.000 --> 00:06:49.000
Đây là thanh công cụ Pages bằng tiếng Anh và tiếng Ả Rập.

00:06:49.000 --> 00:06:52.000
Chúng ta hãy xem xét kỹ hơn một số biểu tượng trên thanh công cụ.

00:06:52.000 --> 00:06:57.000
Nhiều nút, chẳng hạn như nút "Thêm trang" và "Phương tiện", trông giống nhau trong cả hai ngôn ngữ.

00:06:57.000 --> 00:07:05.000
Điều này là do chúng đối xứng hoặc vì tính định hướng của chúng không bị ràng buộc với ngôn ngữ và chúng trông ổn trong cả hai ngôn ngữ.

00:07:05.000 --> 00:07:11.000
Các nút khác, chẳng hạn như nút "Xem" và "Tài liệu", lật sang hình ảnh phản chiếu của chúng bằng tiếng Ả Rập.

00:07:11.000 --> 00:07:20.000
Nút "Xem" hiển thị thanh bên Trang, xuất hiện ở phía đối diện của cửa sổ bằng tiếng Ả Rập, vì vậy biểu tượng phải thay đổi để phản ánh điều đó.

00:07:20.000 --> 00:07:27.000
Nút "Tài liệu" thay đổi để hiển thị rằng nếu người dùng đang viết bằng tiếng Ả Rập, các trang sẽ quay theo hướng ngược lại.

00:07:27.000 --> 00:07:30.000
Và bạn có thể có những tình huống mà biểu tượng thay đổi hoàn toàn.

00:07:30.000 --> 00:07:38.000
Chữ cái trên nút "Chèn hộp văn bản" thay đổi thành một chữ cái khác để phản ánh ngôn ngữ của người dùng.

00:07:38.000 --> 00:07:42.000
Một lần nữa, tin tuyệt vời là rất nhiều điều này được xử lý cho bạn.

00:07:42.000 --> 00:07:50.000
Bạn phải suy nghĩ về định hướng hình ảnh nhiều hơn một chút so với bạn thường nghĩ về hướng viết văn bản, nhưng làm cho mọi thứ đúng khá đơn giản.

00:07:50.000 --> 00:07:54.000
Đây là menu "Xem" trong Mac Pages bằng tiếng Anh và tiếng Ả Rập.

00:07:54.000 --> 00:07:57.000
Lưu ý rằng biểu tượng "Hiển thị Thước kẻ" tự đảo ngược.

00:07:57.000 --> 00:08:02.000
Trong các ngôn ngữ từ phải sang trái, thước thẳng đứng nằm ở phía bên tay phải.

00:08:02.000 --> 00:08:08.000
Đối với một hình ảnh tùy chỉnh như biểu tượng thước kẻ, hành vi từ phải sang trái được kiểm soát trong trình chỉnh sửa bộ hình ảnh Xcode.

00:08:08.000 --> 00:08:13.000
Nếu hình ảnh của bạn giống nhau ở từ trái sang phải và từ phải sang trái, bạn không cần phải làm bất cứ điều gì đặc biệt.

00:08:13.000 --> 00:08:22.000
Hệ thống cũng có thể phản chiếu hình ảnh của bạn theo thuật toán cho bạn khi ứng dụng của bạn đang chạy bằng ngôn ngữ có hướng viết ngược lại với ngôn ngữ phát triển của bạn.

00:08:22.000 --> 00:08:25.000
Bạn có thể yêu cầu tính năng này trong trình chỉnh sửa bộ hình ảnh của Xcode.

00:08:25.000 --> 00:08:32.000
Trong thanh bên, bạn sẽ tìm thấy một điều khiển được đánh dấu "Hướng". Nếu bạn nhấp vào cái này, bạn sẽ nhận được một thực đơn với bốn lựa chọn.

00:08:32.000 --> 00:08:41.000
Nếu hình ảnh của bạn giống nhau bất kể ngôn ngữ giao diện người dùng, bạn chọn "Đã sửa". Nếu bạn muốn phản chiếu thuật toán, bạn chọn tham gia bằng cách chọn một trong các tùy chọn "Lỗi".

00:08:41.000 --> 00:08:45.000
Cái nào phụ thuộc vào hướng viết của ngôn ngữ phát triển của bạn.

00:08:45.000 --> 00:09:06.000
Nếu bạn có một hình ảnh mà bạn không thể phản chiếu theo thuật toán, hoặc nó có nhiều yếu tố hoạt động khác nhau khi giao diện người dùng thay đổi hướng hoặc bạn có bóng mà bạn không muốn di chuyển, bạn chọn "Cả hai" và ba giếng mới được thêm vào trình chỉnh sửa bộ hình ảnh, cho phép bạn tạo các hình ảnh riêng biệt để sử dụng cho các

00:09:06.000 --> 00:09:12.000
Nhưng nếu bạn sử dụng hình ảnh từ Biểu tượng SF, như thanh công cụ Trang đã làm, mọi thứ thậm chí còn dễ dàng hơn.

00:09:12.000 --> 00:09:14.000
Hầu như tất cả công việc đã được thực hiện cho bạn.

00:09:14.000 --> 00:09:19.000
Các ký hiệu cần thay đổi từ phải sang ngôn ngữ trái sẽ tự động làm như vậy.

00:09:19.000 --> 00:09:22.000
Ví dụ, hãy xem xét biểu tượng danh sách dấu đầu dòng này.

00:09:22.000 --> 00:09:30.000
Đối với nhiều hình ảnh, thanh bên của Biểu tượng SF có phần "bản địa hóa" hiển thị các phiên bản bản địa hóa của hình ảnh bạn đã chọn.

00:09:30.000 --> 00:09:35.000
Trong trường hợp này, biểu tượng danh sách dấu đầu dòng có các phiên bản khác nhau từ trái sang phải và phải sang trái.

00:09:35.000 --> 00:09:38.000
Nó phản chiếu tự động.

00:09:38.000 --> 00:09:42.000
Tính năng bản địa hóa có thể vượt ra ngoài việc chỉ phản chiếu các ngôn ngữ từ phải sang trái.

00:09:42.000 --> 00:09:46.000
Đây là tab bản địa hóa cho biểu tượng "chèn hộp văn bản".

00:09:46.000 --> 00:09:53.000
Nó có các phiên bản bản địa hóa không chỉ cho các chữ viết Latinh và Ả Rập, mà còn cho nhiều phiên bản khác nữa.

00:09:53.000 --> 00:10:00.000
Một trường hợp đặc biệt quan trọng đối với sự hỗ trợ của tiếng Ả Rập là dấu chấm hỏi, thường được sử dụng như một biểu tượng "trợ giúp".

00:10:00.000 --> 00:10:04.000
Trong tiếng Ả Rập, dấu chấm hỏi là mặt trái của dấu chấm hỏi Latinh.

00:10:04.000 --> 00:10:11.000
Sử dụng các biểu tượng từ Biểu tượng SF để trợ giúp các biểu tượng giúp bạn có được phiên bản này mà không cần thêm bất kỳ công việc nào.

00:10:11.000 --> 00:10:17.000
Một loại hình ảnh bạn phải suy nghĩ cẩn thận là mũi tên và các chỉ báo định hướng khác.

00:10:17.000 --> 00:10:20.000
Ở đây chúng ta có bốn biểu tượng mũi tên trong một vòng tròn.

00:10:20.000 --> 00:10:22.000
Bạn sẽ nhận thấy chúng có hai cặp.

00:10:22.000 --> 00:10:25.000
Bạn có hai chỉ sang trái và hai chỉ sang phải.

00:10:25.000 --> 00:10:35.000
Nếu chúng ta chỉ nhìn vào hai điểm bên trái, bạn sẽ thấy cái đó được gọi là "arrow.backward.circle." Cái này lật để chỉ từ phải sang phải sang trái.

00:10:35.000 --> 00:10:41.000
Cái còn lại được gọi là "arrow.left..circle" và KHÔNG lật từ phải sang trái.

00:10:41.000 --> 00:10:48.000
SF Symbols tuân theo quy ước đặt tên này xuyên suốt với các biểu tượng mà bạn có thể muốn hoặc không muốn lật từ phải sang trái.

00:10:48.000 --> 00:10:52.000
Những cái "tiến" và "lùi" lật, và những cái "trái" và "phải" thì không.

00:10:52.000 --> 00:11:06.000
Nếu bạn đang sử dụng mũi tên hoặc hình dạng khác để truyền đạt ý tưởng "tiến" hoặc "lùi", bạn muốn sử dụng các phiên bản lật và nếu bạn đang sử dụng mũi tên để truyền đạt hướng tuyệt đối, bạn muốn sử dụng các phiên bản không lật.

00:11:06.000 --> 00:11:08.000
Và hãy thêm một hàng vào biểu đồ "Thuật ngữ" của chúng tôi.

00:11:08.000 --> 00:11:19.000
Khi chọn hình ảnh trong Biểu tượng SF, hãy nhớ rằng "trái" và "phải" luôn chỉ các hướng đó và "tiến" và "lùi" theo các hướng khác nhau tùy thuộc vào ngôn ngữ giao diện người dùng.

00:11:19.000 --> 00:11:25.000
Bây giờ hãy nói về cách các điều khiển và các tiện ích giao diện người dùng khác được xử lý từ phải sang trái.

00:11:25.000 --> 00:11:31.000
Đây là thanh bên Mac Keynote bằng tiếng Anh và tiếng Ả Rập hiển thị trình kiểm tra định dạng cho một hình dạng.

00:11:31.000 --> 00:11:35.000
Lưu ý rằng mọi thứ đã lật ngược diện mạo của nó từ phải sang trái.

00:11:35.000 --> 00:11:41.000
Chúng tôi có rất nhiều nút menu bật lên trong đó chỉ báo menu di chuyển sang bên trái từ phải sang trái.

00:11:41.000 --> 00:11:45.000
Chúng tôi có một vài hộp kiểm, trong đó trong tiếng Ả Rập, hộp kiểm ở bên phải nhãn.

00:11:45.000 --> 00:11:52.000
Thanh trượt độ mờ đã thay đổi đối với tiếng Ả Rập để mức tối thiểu ở bên phải và mức tối đa ở bên trái.

00:11:52.000 --> 00:11:56.000
Và cứ như vậy trong tất cả các điều khiển khác trong thanh tra này.

00:11:56.000 --> 00:11:59.000
Tin tuyệt vời là bạn có được hành vi này miễn phí.

00:11:59.000 --> 00:12:06.000
Tất cả các điều khiển giao diện người dùng tiêu chuẩn trong tất cả các khung giao diện người dùng của chúng tôi tự động đảo ngược giao diện của chúng cho các ngôn ngữ từ phải sang trái.

00:12:06.000 --> 00:12:12.000
Tuy nhiên, có những tình huống mà bạn có thể không muốn điều này hoặc nơi bạn cần kiểm soát cách nó xảy ra.

00:12:12.000 --> 00:12:16.000
Hãy cùng xem xét một vài trường hợp thú vị.

00:12:16.000 --> 00:12:21.000
Hãy nói về các nút có cả nhãn văn bản và biểu tượng trên đó.

00:12:21.000 --> 00:12:26.000
Đây là trình kiểm tra hoạt hình Keynote hiển thị các điều khiển cho hoạt hình "Di chuyển vào".

00:12:26.000 --> 00:12:30.000
Thanh tra này có hai nút với cả nhãn và biểu tượng.

00:12:30.000 --> 00:12:38.000
Lưu ý rằng mũi tên trên nút Xem trước lật với sự thay đổi theo hướng giao diện người dùng, nhưng mũi tên trên menu hướng hoạt hình thì không.

00:12:38.000 --> 00:12:48.000
Cả hai mặt đều lật theo hướng giao diện người dùng, nhưng nếu điều khiển hướng là một nhóm các nút thay vì menu, bạn có thể hình ảnh có thể không muốn nó thay đổi bên.

00:12:48.000 --> 00:12:55.000
Để chỉ ra cách kiểm soát điều này, tôi đã tách hai ví dụ đó thành một ứng dụng đồ chơi nhỏ.

00:12:55.000 --> 00:12:59.000
Đây là mã để xây dựng giao diện người dùng đó trong SwiftUI.

00:12:59.000 --> 00:13:01.000
Có một vài điều thú vị cần lưu ý ở đây.

00:13:01.000 --> 00:13:02.000
Chúng ta sẽ xem xét từng cái một.

00:13:02.000 --> 00:13:06.000
Hãy bắt đầu với tên hình ảnh.

00:13:06.000 --> 00:13:12.000
Như chúng ta đã thấy trước đây, đối với hình ảnh từ Biểu tượng SF, bạn chọn một biểu tượng đảo ngược hoặc một biểu tượng không.

00:13:12.000 --> 00:13:16.000
Ở đây chúng tôi đã sử dụng "arrowtriangle.forward.fill" cho nút "Xem trước".

00:13:16.000 --> 00:13:20.000
"Chuyển tiếp" trong tên cho bạn biết rằng nó lật từ phải sang trái.

00:13:20.000 --> 00:13:24.000
Chúng tôi đã sử dụng "arrow.left" và "arrow.right" cho các nút hướng.

00:13:24.000 --> 00:13:29.000
"Trên trái" và "phải" trong tên cho bạn biết rằng họ không lật từ phải sang trái.

00:13:29.000 --> 00:13:33.000
Nếu bạn đang làm việc trong AppKit hoặc UIKit, điều này cũng hoạt động theo cùng một cách.

00:13:33.000 --> 00:13:37.000
Đây là ứng dụng của tôi trong trình chỉnh sửa bảng phân cảnh của Xcode với nút "Xem trước" được chọn.

00:13:37.000 --> 00:13:43.000
Bạn điều khiển biểu tượng của nút bằng điều khiển "Hình ảnh" trong trình kiểm tra Thuộc tính.

00:13:43.000 --> 00:13:52.000
Và trong mã, bạn đặt cái này với thuộc tính "hình ảnh" của nút và về cơ bản nó hoạt động theo cùng một cách trong cả AppKit và UIKit.

00:13:52.000 --> 00:13:59.000
Quay trở lại ví dụ SwiftUI của chúng tôi, câu hỏi tiếp theo là cách bạn kiểm soát phía nào của nhãn mà biểu tượng tiếp tục.

00:13:59.000 --> 00:14:02.000
Bạn làm điều này bằng cách thiết lập một kiểu nhãn.

00:14:02.000 --> 00:14:09.000
TitleAndIconLabelStyle tích hợp đặt biểu tượng trước nhãn theo hướng đọc của người dùng.

00:14:09.000 --> 00:14:11.000
Chúng ta có thể sử dụng cái này cho nút "Trái".

00:14:11.000 --> 00:14:17.000
Đối với hai nút còn lại, chúng tôi muốn biểu tượng đi theo nhãn theo hướng đọc của người dùng.

00:14:17.000 --> 00:14:22.000
Để làm điều này, bạn cần một kiểu nhãn tùy chỉnh, nhưng điều đó khá dễ thực hiện.

00:14:22.000 --> 00:14:28.000
Phương thức makeBody() của kiểu nhãn của bạn chỉ cần tạo một HStack và thêm tiêu đề và biểu tượng vào đó.

00:14:28.000 --> 00:14:37.000
Như với bất kỳ HStack nào, thứ tự bạn thêm chúng sẽ xác định thứ tự chúng hiển thị và thứ tự động đảo ngược khi thích hợp với hướng giao diện người dùng.

00:14:37.000 --> 00:14:42.000
Kỹ thuật này hoạt động trên bất kỳ chế độ xem nào có thể lấy Nhãn, không chỉ các nút.

00:14:42.000 --> 00:14:47.000
Tất nhiên, bạn không muốn biểu tượng thay đổi hai bên trên nút "Phải".

00:14:47.000 --> 00:14:51.000
Bạn muốn nó luôn ở bên phải bất kể hướng giao diện người dùng.

00:14:51.000 --> 00:14:55.000
Điều đó đưa chúng ta đến điều thú vị cuối cùng trong đoạn mã này.

00:14:55.000 --> 00:15:01.000
Các chế độ xem trong SwiftUI nhận định hướng của chúng từ môi trường SwiftUI mà bạn có thể sửa đổi.

00:15:01.000 --> 00:15:09.000
Bạn làm điều này bằng cách thêm công cụ sửa đổi "môi trường" vào chế độ xem và cung cấp cho nó chìa khóa và giá trị mới cho tài sản bạn muốn thay đổi.

00:15:09.000 --> 00:15:19.000
Ở đây chúng tôi đang ghi đè thuộc tính layoutDirection của môi trường để luôn từ trái sang phải bất kể giá trị nào chúng tôi có thể kế thừa từ cha mẹ của mình.

00:15:19.000 --> 00:15:25.000
Thay đổi môi trường theo cách này hoạt động trên tất cả các chế độ xem SwiftUI đáp ứng hướng giao diện người dùng của người dùng.

00:15:25.000 --> 00:15:31.000
Lưu ý rằng chúng tôi đã áp dụng công cụ sửa đổi cho HStack có chứa các nút "Trái" và "Phải".

00:15:31.000 --> 00:15:46.000
Bất kỳ thay đổi nào bạn thực hiện đối với môi trường của chế độ xem đều được kế thừa bởi các chế độ xem con của nó, vì vậy việc đặt nó ở đây không chỉ ngăn HStack đảo ngược thứ tự của các nút mà còn giữ cho cả hai nút không đảo ngược bố cục nhãn của chúng.

00:15:46.000 --> 00:15:57.000
Và tất nhiên, chúng tôi đã không áp dụng công cụ sửa đổi môi trường của mình cho bất kỳ thứ gì trong chuỗi mẹ cho nút "Xem trước", vì vậy nó vẫn đảo ngược khi thích hợp, giống như chúng tôi muốn.

00:15:57.000 --> 00:16:13.000
Vì vậy, tóm lại, nút "Trái" có biểu tượng ở bên trái vì chúng tôi đã sử dụng TitleAndIconLabelStyle tích hợp sẵn, và các nút "Xem trước" và "Phải" có biểu tượng của chúng ở bên phải vì chúng tôi đã sử dụng kiểu nhãn tùy chỉnh mà chúng tôi gọi là IconOnRightLabelStyle.

00:16:13.000 --> 00:16:25.000
Các nút "Trái" và "Phải" không thay đổi thứ tự hoặc cách sắp xếp bên trong nhãn của chúng vì chúng tôi đã thêm công cụ sửa đổi môi trường vào HStack có chứa chúng, đặt hướng bố cục từ trái sang phải.

00:16:25.000 --> 00:16:32.000
Nút "Xem trước" đảo ngược sự sắp xếp bên trong của nhãn vì nó không có công cụ sửa đổi đó.

00:16:32.000 --> 00:16:35.000
Điều này hoạt động khác nhau trong AppKit và UIKit.

00:16:35.000 --> 00:16:44.000
Trong cả hai khuôn khổ đó, vị trí của biểu tượng liên quan đến nhãn được kiểm soát bằng điều khiển "Vị trí" trong trình kiểm tra Thuộc tính của Xcode.

00:16:44.000 --> 00:16:53.000
Nếu bạn nhấp vào điều khiển này, bạn sẽ thấy rằng menu có, trong số các tùy chọn khác, hai cặp tùy chọn căn chỉnh nhãn và biểu tượng theo chiều ngang.

00:16:53.000 --> 00:17:03.000
Bạn có "Lãnh đạo" và "Trái", và bạn có "Truyền" và "Phải". "Lãnh đạo" và "Truyền" thay đổi ý nghĩa của chúng dựa trên hướng giao diện người dùng, và "Trái" và "Phải" thì không.

00:17:03.000 --> 00:17:07.000
Trong AppKit, bạn kiểm soát điều này bằng thuộc tính imagePosition của nút.

00:17:07.000 --> 00:17:16.000
Trong UIKit, đó là thuộc tính imagePlacement trên cấu hình của nút, điều đó có nghĩa là bạn cần đặt cấu hình nút của mình trước.

00:17:16.000 --> 00:17:31.000
Biểu tượng trên nút "Xem trước" thay đổi hai bên vì chúng tôi đặt vị trí của nó thành "Truyền" và biểu tượng trên nút "Phải" không thay đổi hai bên vì chúng tôi đặt vị trí của nó thành "Phải". Điều này cũng cho phép chúng tôi điền vào hàng cuối cùng trong biểu đồ "thuật ngữ" của mình.

00:17:31.000 --> 00:17:35.000
Các thuật ngữ "dẫn đầu" và "dấu bẫy" sẽ xuất hiện rất nhiều khi thảo luận về bố cục giao diện người dùng.

00:17:35.000 --> 00:17:51.000
Giống như "tiến" và "lùi", bạn sẽ thường thấy chúng được sử dụng trái ngược với "trái" và "phải". Cạnh "dẫn đầu" của một cái gì đó là cạnh gần nhất với đầu dòng hoặc bên cạnh màn hình hoặc cửa sổ nơi người đọc sẽ bắt đầu đọc, từ trái sang phải và phải cho phải sang phải.

00:17:51.000 --> 00:17:59.000
Cạnh sau là phía đối diện, gần cuối dòng nhất, từ phải từ trái sang phải và từ trái sang phải sang trái.

00:17:59.000 --> 00:18:08.000
Hầu hết thời gian, bạn muốn sử dụng những thứ này thay vì "trái" và "phải", chỉ lưu "trái" và "phải" cho những thứ gắn liền với một hướng tuyệt đối.

00:18:08.000 --> 00:18:10.000
Hãy xem xét một trường hợp thú vị khác.

00:18:10.000 --> 00:18:16.000
Đây là một phần của trình kiểm tra định dạng văn bản trong Keynote trên iPhone, bằng tiếng Anh và tiếng Ả Rập.

00:18:16.000 --> 00:18:20.000
Ảnh chụp màn hình đặc biệt này có bốn điều khiển được phân đoạn.

00:18:20.000 --> 00:18:30.000
Hai cái trên cùng, bộ chọn trang cho trình kiểm tra và các nút kiểu "in đậm/italic/ gạch chân" tiêu chuẩn, đảo ngược thứ tự các phân đoạn của chúng tùy thuộc vào ngôn ngữ giao diện người dùng.

00:18:30.000 --> 00:18:34.000
Nếu bạn không đọc tiếng Ả Rập, bạn sẽ phải tin tưởng tôi trên bộ chọn trang.

00:18:34.000 --> 00:18:40.000
Như với các điều khiển khác mà chúng tôi đã xem xét, đây là mặc định; bạn nhận được hành vi này miễn phí.

00:18:40.000 --> 00:18:45.000
Hai điều khiển phân đoạn còn lại, các điều khiển căn chỉnh, không đảo ngược thứ tự của các phân đoạn của chúng.

00:18:45.000 --> 00:18:48.000
Điều này là do họ di chuyển mọi thứ theo những hướng tuyệt đối.

00:18:48.000 --> 00:18:54.000
Căn chỉnh bên trái là căn chỉnh bên trái bất kể đó là đầu hay cuối dòng.

00:18:54.000 --> 00:18:58.000
Hãy xem cách chúng ta giữ cho các điều khiển này không đảo ngược.

00:18:58.000 --> 00:19:01.000
Chúng tôi đã biết cách làm điều này trong SwiftUI.

00:19:01.000 --> 00:19:06.000
Bạn chỉ cần áp dụng công cụ sửa đổi "môi trường" thay đổi thuộc tính layoutDirection của môi trường từ trái sang phải.

00:19:06.000 --> 00:19:16.000
Ở đây, chúng tôi đang sử dụng kỹ thuật này để giữ cho điều khiển căn chỉnh không tự đảo ngược, nhưng để điều khiển kiểu tự đảo ngược như bình thường.

00:19:16.000 --> 00:19:18.000
Trong UIKit, cái này hoạt động khác.

00:19:18.000 --> 00:19:24.000
Đây là một ứng dụng đồ chơi trong Xcode được thiết kế để mô phỏng hành vi điều khiển được phân đoạn đó.

00:19:24.000 --> 00:19:32.000
Tôi có hai điều khiển được phân đoạn, một điều khiển bắt chước hành vi in đậm/italic/ gạch chân và một điều khiển thứ hai bắt chước điều khiển căn chỉnh.

00:19:32.000 --> 00:19:34.000
Điều khiển căn chỉnh được chọn.

00:19:34.000 --> 00:19:42.000
Trong trình kiểm tra thuộc tính, bạn sẽ tìm thấy một menu có nhãn "Ngữ nghĩa". Nếu bạn nhấp vào menu đó, bạn sẽ có năm lựa chọn.

00:19:42.000 --> 00:19:46.000
Trình đơn này kiểm soát một thứ gọi là thuộc tính nội dung ngữ nghĩa.

00:19:46.000 --> 00:19:55.000
Bạn sử dụng điều này để cho biết đây là loại điều khiển nào và hệ thống sử dụng điều đó để xác định xem nó có đảo ngược giao diện của nó hay không dựa trên hướng giao diện người dùng.

00:19:55.000 --> 00:20:00.000
Mặc định là "Không xác định", khiến điều khiển đảo ngược giao diện của nó.

00:20:00.000 --> 00:20:06.000
"Phát lại" cho biết điều khiển là điều khiển phát lại phương tiện hoặc là một phần của nhóm điều khiển phát lại.

00:20:06.000 --> 00:20:11.000
"Không gian" nói rằng điều khiển là một điều khiển không gian hoặc một phần của một nhóm chúng.

00:20:11.000 --> 00:20:16.000
Các điều khiển không gian di chuyển mọi thứ xung quanh trong không gian theo các hướng tuyệt đối.

00:20:16.000 --> 00:20:23.000
Và cuối cùng, bạn có thể buộc điều khiển luôn tự đặt mình từ trái sang phải hoặc từ phải sang trái.

00:20:23.000 --> 00:20:43.000
Vì vậy, điều khiển in đậm/italic/ gạch chân đảo ngược các phân đoạn của nó từ phải sang trái vì thuộc tính nội dung ngữ nghĩa của nó được đặt thành "Không xác định" và điều khiển căn chỉnh không đảo ngược các phân đoạn của nó vì thuộc tính nội dung ngữ nghĩa của nó được đặt thành "Không gian". Điều tuyệt vời về điều này là nó không chỉ hoạt động cho UISegmentedControl.

00:20:43.000 --> 00:20:50.000
Tất cả UIViews đều có thuộc tính nội dung ngữ nghĩa và nó kiểm soát tất cả hành vi từ phải sang trái của điều khiển đó.

00:20:50.000 --> 00:21:02.000
Đối với bất kỳ chế độ xem UIKit tiêu chuẩn nào có các thành phần con, thuộc tính nội dung ngữ nghĩa sẽ xác định xem vị trí của các thành phần con của chế độ xem đó có đảo ngược dựa trên ngôn ngữ giao diện người dùng hay không.

00:21:02.000 --> 00:21:05.000
Trong AppKit, bạn làm điều này khác đi.

00:21:05.000 --> 00:21:21.000
Đối với tất cả NSControls, trình kiểm tra thuộc tính Xcode chứa hai menu được đánh dấu "B bố cục" và "Gương". Trình đơn "Bố cục" tương ứng với thuộc tính userInterfaceLayoutDirection của điều khiển, cho biết điều khiển nên sử dụng bố cục từ trái sang phải hay từ phải sang trái.

00:21:21.000 --> 00:21:24.000
Bạn thường không thay đổi điều này khi làm việc trong Trình tạo Giao diện.

00:21:24.000 --> 00:21:27.000
Thay vào đó, bạn sử dụng menu "Gương".

00:21:27.000 --> 00:21:42.000
Đặt nó thành "Luôn luôn" khiến userInterfaceLayoutDirection, và do đó bố cục của điều khiển, bị lật khi ngòi được tải khi ngôn ngữ giao diện người dùng của người dùng từ phải sang trái và đặt nó thành "Không bao giờ" đánh bại hành vi này, giữ nguyên bố cục.

00:21:42.000 --> 00:21:48.000
Bạn giữ nguyên bố cục của điều khiển căn chỉnh bằng cách đặt giá trị này thành "Không bao giờ".

00:21:48.000 --> 00:21:57.000
Nếu bạn không làm việc trong Trình tạo giao diện, bạn sẽ hoàn thành điều tương tự trong mã bằng cách đặt trực tiếp userInterfaceLayoutDirection của điều khiển từ trái sang phải.

00:21:57.000 --> 00:22:12.000
Nhân tiện, userInterfaceLayoutDirection là một thuộc tính trên NSView, nhưng chỉ xuất hiện trong Trình tạo giao diện trên các phiên bản của NSControl, vì vậy nếu bạn muốn đảo ngược thứ gì đó không phải là NSControl, bạn cần mã như chúng tôi đang hiển thị ở đây.

00:22:12.000 --> 00:22:15.000
Trước khi chúng ta tiếp tục, tôi muốn nói về văn bản nhiều hơn một chút.

00:22:15.000 --> 00:22:20.000
Đây là hộp thoại "Đặt mật khẩu tài liệu" trong iWork cho Mac.

00:22:20.000 --> 00:22:23.000
Trong phiên bản tiếng Ả Rập, bạn sẽ thấy mọi thứ đã đảo ngược.

00:22:23.000 --> 00:22:25.000
Nhưng chú ý những gì đã xảy ra với các nhãn hiệu.

00:22:25.000 --> 00:22:29.000
Trong tiếng Anh, chúng được căn chỉnh bên phải để chúng gần với các trường văn bản chỉnh sửa.

00:22:29.000 --> 00:22:32.000
Trong tiếng Ả Rập, chúng được căn trái.

00:22:32.000 --> 00:22:38.000
Nói cách khác, bạn có sự đối lập với sự liên kết tự nhiên, sự liên kết cạnh sau, nếu bạn muốn.

00:22:38.000 --> 00:22:42.000
Có được bố cục này trong SwiftUI trên Mac thật dễ dàng một cách tầm thường.

00:22:42.000 --> 00:22:45.000
Chỉ cần sử dụng Biểu mẫu để tập hợp các trường văn bản lại với nhau.

00:22:45.000 --> 00:22:51.000
Nhưng điều này có thể trở nên thú vị nếu, như trong ví dụ của chúng tôi, một trong những nhãn là nhiều dòng.

00:22:51.000 --> 00:22:56.000
Nếu chúng ta mở rộng nhãn cuối cùng đó thành hai dòng, chúng ta sẽ nhận được điều này.

00:22:56.000 --> 00:23:01.000
Hai nhãn một dòng được căn chỉnh chính xác, nhưng nhãn hai dòng thì không.

00:23:01.000 --> 00:23:04.000
Vấn đề là, nhãn dưới cùng thực sự được căn chỉnh đúng.

00:23:04.000 --> 00:23:11.000
Chỉ là hộp giới hạn của nó được căn chỉnh bên phải, không phải các dòng văn bản riêng lẻ trong hộp giới hạn đó.

00:23:11.000 --> 00:23:17.000
Bạn khắc phục điều này bằng cách thêm công cụ sửa đổi multilineTextAlignment vào nhãn cuối cùng.

00:23:17.000 --> 00:23:23.000
Căn chỉnh văn bản trong SwiftUI chỉ phát huy tác dụng trên các đối tượng văn bản dài hơn một dòng.

00:23:23.000 --> 00:23:32.000
Đối với các đối tượng văn bản một dòng, hộp giới hạn của chúng bao bọc chặt chẽ chính văn bản và bạn căn chỉnh nó bằng cách căn chỉnh toàn bộ đối tượng văn bản.

00:23:32.000 --> 00:23:45.000
Cũng lưu ý rằng cho dù bạn đang căn chỉnh hộp giới hạn của văn bản hay nhiều dòng văn bản bên trong hộp giới hạn, bạn có thể lựa chọn căn chỉnh đầu và cuối, điều này thay đổi ý nghĩa dựa trên hướng giao diện người dùng của người dùng.

00:23:45.000 --> 00:23:55.000
Để giữ nguyên căn chỉnh bất kể hướng giao diện người dùng, bạn sử dụng công cụ sửa đổi môi trường để thay đổi hướng bố cục của môi trường như chúng ta đã thấy trước đó.

00:23:55.000 --> 00:24:02.000
Trong UIKit, văn bản được căn chỉnh tự nhiên theo mặc định, nhưng bạn có thể thay đổi nó thành một trong những hướng tuyệt đối khi cần thiết.

00:24:02.000 --> 00:24:10.000
Trong Trình tạo Giao diện, điều khiển trông như thế này và tương ứng với thuộc tính textAlignment trên UILabel và UITextView.

00:24:10.000 --> 00:24:16.000
Nút ở ngoài cùng bên phải với đường chấm chấm cho bạn sự liên kết tự nhiên hoặc cạnh trước.

00:24:16.000 --> 00:24:20.000
Sự liên kết của nhãn sẽ tuân theo thuộc tính nội dung ngữ nghĩa của nhãn.

00:24:20.000 --> 00:24:28.000
Các nút khác cung cấp cho bạn căn chỉnh trái, phải hoặc trung tâm cố định bất kể hướng giao diện người dùng hoặc thuộc tính nội dung ngữ nghĩa của nhãn.

00:24:28.000 --> 00:24:31.000
Không có cài đặt tích hợp cho sự liên kết cạnh sau.

00:24:31.000 --> 00:24:34.000
Bạn phải làm điều đó bằng mã.

00:24:34.000 --> 00:24:36.000
Trong AppKit, nó hơi khác một chút.

00:24:36.000 --> 00:24:44.000
Bạn vẫn có điều khiển căn chỉnh và về cơ bản nó hoạt động giống như trong UIKit, nhưng cách nó tương tác với userInterfaceLayoutDirection thì khác.

00:24:44.000 --> 00:24:54.000
Nếu bạn đặt "Gương" thành "Tự động" và hệ thống đặt userInterfaceLayoutDirection từ phải sang trái, ý nghĩa của tất cả các cài đặt căn chỉnh sẽ đảo ngược.

00:24:54.000 --> 00:25:03.000
Vì vậy, nếu "Gương" được đặt thành "Tự động", căn chỉnh bên trái thực sự là căn chỉnh cạnh đầu và căn chỉnh bên phải thực sự là căn chỉnh cạnh sau.

00:25:03.000 --> 00:25:13.000
Vì vậy, chúng tôi đã nói về cách tất cả các tiện ích giao diện người dùng tiêu chuẩn tự động đảo ngược bố cục của chúng để phù hợp với hướng viết của người dùng, nhưng khá dễ dàng để ngăn chặn điều đó khi cần thiết.

00:25:13.000 --> 00:25:18.000
Điều này mở rộng đến việc sắp xếp các tiện ích giao diện người dùng riêng lẻ trên màn hình.

00:25:18.000 --> 00:25:29.000
Nếu bạn đang sử dụng một trong những chế độ xem tiêu chuẩn hoặc bộ điều khiển chế độ xem xử lý vị trí của các chế độ xem phụ của chúng, tất cả chúng sẽ tự động đảo ngược bố cục của chúng khi cần thiết mà bạn không cần phải làm gì cả.

00:25:29.000 --> 00:25:34.000
Chế độ xem bảng và chế độ xem bộ sưu tập cũng xử lý việc cuộn chính xác bằng ngôn ngữ từ phải sang trái.

00:25:34.000 --> 00:25:45.000
UINavigationController tự động thay đổi hướng hoạt ảnh segue của nó để phản ánh hướng viết của người dùng và thay đổi nút "quay lại" để phù hợp với nó.

00:25:45.000 --> 00:25:53.000
Và UIPageViewController tự động đảo ngược hướng phân trang và ý nghĩa của các cử chỉ vuốt cũng tự động.

00:25:53.000 --> 00:26:06.000
Bạn thường sẽ không muốn ghi đè những thứ này, ngoại trừ khi bạn đang sử dụng chế độ xem ngăn xếp để định vị chế độ xem con, nhưng tất cả các chế độ xem đều tôn trọng thuộc tính nội dung ngữ nghĩa của chúng và sử dụng nó để cho chúng biết cách bố trí chế độ xem con của chúng.

00:26:06.000 --> 00:26:13.000
Điều tương tự cũng xảy ra với các chế độ xem AppKit tiêu chuẩn và một lần nữa, chế độ xem bảng và bộ sưu tập cũng xử lý việc cuộn từ phải sang trái.

00:26:13.000 --> 00:26:21.000
Tất cả các chế độ xem đều tôn vinh thuộc tính userInterfaceLayoutDirection của họ trong việc xác định cách bố trí các chế độ xem con của họ, mặc dù Trình tạo giao diện không cho phép bạn đặt nó.

00:26:21.000 --> 00:26:24.000
Bạn phải làm điều đó bằng mã.

00:26:24.000 --> 00:26:32.000
Các chế độ xem SwiftUI tiêu chuẩn cũng phản ánh thuộc tính layoutDirection của môi trường.

00:26:32.000 --> 00:26:41.000
Nếu bạn đang sử dụng Bố cục Tự động thay vì chế độ xem ngăn xếp và lưới để bố trí chế độ xem của mình, Bố cục Tự động cũng tự động đảo ngược mọi thứ để tính đến hướng giao diện người dùng.

00:26:41.000 --> 00:26:53.000
Nếu bạn có các ràng buộc theo chiều ngang, bạn sẽ thấy rằng chúng tự động kết nối mọi thứ với các cạnh đầu và cuối, và như chúng ta đã thấy, "dẫn đầu" và "dấu" có ý nghĩa khác nhau tùy thuộc vào hướng giao diện người dùng.

00:26:53.000 --> 00:26:58.000
Tuy nhiên, bạn có thể đặt các ràng buộc Bố cục Tự động thành các hướng trái và phải tuyệt đối, nếu bạn cần.

00:26:58.000 --> 00:27:06.000
Bạn làm điều này bằng cách nhấp vào hướng cho một bên của ràng buộc và tắt "Tôn trọng hướng ngôn ngữ" trong menu bật lên.

00:27:06.000 --> 00:27:17.000
Điều đó sẽ thay đổi hướng của cả hai đầu của ràng buộc từ "dẫn đầu" và "dấu" sang "trái" và "phải". Có rất nhiều cách khác nhau để thiết lập các ràng buộc Bố cục Tự động trong mã.

00:27:17.000 --> 00:27:19.000
Đây là một trong số họ.

00:27:19.000 --> 00:27:34.000
Khá nhiều cách bạn làm điều đó, điều cần nhớ là sử dụng "dẫn đầu" và "dấu" thay vì "trái" và "phải", ngoại trừ trong những tình huống tương đối hiếm khi bạn thực sự muốn có cùng một hướng bố cục bất kể hướng viết của ngôn ngữ giao diện người dùng.

00:27:34.000 --> 00:27:37.000
Được rồi, đó là rất nhiều thứ để tiếp nhận, vì vậy chúng ta hãy hít thở.

00:27:37.000 --> 00:27:45.000
Bài học rút ra chính là chúng tôi thực hiện hầu hết công việc xử lý ngôn ngữ từ phải sang trái cho bạn và khi bạn cần ghi đè nó, có nhiều cách để làm điều đó.

00:27:45.000 --> 00:27:48.000
Hãy xem thêm một lần nữa vào trang trình bày thuật ngữ của chúng tôi.

00:27:48.000 --> 00:27:58.000
Hãy nhớ rằng "trái" và "phải" luôn là trái và phải và các thuật ngữ khác đảo ngược ý nghĩa của chúng tùy thuộc vào hướng giao diện người dùng tổng thể.

00:27:58.000 --> 00:28:04.000
Trước khi chúng ta kết thúc, chúng ta hãy xem xét một vấn đề quan trọng hơn và đó là cách hiển thị các con số.

00:28:04.000 --> 00:28:15.000
Đây không hoàn toàn là vấn đề từ phải sang trái, nhưng đối với nhiều nhà phát triển, tiếng Ả Rập là ngôn ngữ đầu tiên họ sẽ bản địa hóa để sử dụng các ký tự chữ số khác với các ký tự được sử dụng trong tiếng Anh.

00:28:15.000 --> 00:28:17.000
Đây là những chữ số đó trông như thế nào.

00:28:17.000 --> 00:28:27.000
Có rất nhiều quy ước đặt tên khác nhau cho các chữ số, nhưng tôi sẽ gọi những cái được sử dụng với hầu hết các ngôn ngữ châu Âu là chữ số "Latin" và những cái được sử dụng với các chữ số "Ả Rập-Indic" trong tiếng Ả Rập.

00:28:27.000 --> 00:28:30.000
Có những ngôn ngữ khác có chữ số riêng.

00:28:30.000 --> 00:28:36.000
Đây là những chữ số Devanagari được sử dụng với tiếng Hindi; tiếng Hindi là ngôn ngữ phổ biến khác sử dụng các chữ số khác nhau.

00:28:36.000 --> 00:28:43.000
Một điều quan trọng cần lưu ý là cả tiếng Ả Rập và tiếng Hindi đều không sử dụng chữ số bản địa của chúng.

00:28:43.000 --> 00:28:53.000
Đối với tiếng Ả Rập, nó phụ thuộc vào quốc gia, với một số, chẳng hạn như Ả Rập Xê Út, sử dụng các chữ số bản địa và những người khác, chẳng hạn như Các Tiểu vương quốc Ả Rập Thống nhất, sử dụng các chữ số Latinh.

00:28:53.000 --> 00:28:57.000
Người dùng cá nhân cũng có thể chọn các chữ số ưa thích của họ.

00:28:57.000 --> 00:29:05.000
Đối với tiếng Hindi, chúng tôi sử dụng các chữ số Latinh theo mặc định, nhưng người dùng có thể chọn sử dụng các chữ số gốc thay thế.

00:29:05.000 --> 00:29:09.000
Bạn đã biết rằng việc xây dựng các chuỗi giao diện người dùng như thế này là một ý tưởng tồi.

00:29:09.000 --> 00:29:15.000
Chuỗi được mã hóa cứng và không thể dịch được, tin nhắn không thay đổi để xử lý số nhiều, v.v.

00:29:15.000 --> 00:29:23.000
Nhưng một lý do khác khiến điều này không tốt là giá trị của "peopleInChat" sẽ luôn được hiển thị bằng các chữ số Latinh.

00:29:23.000 --> 00:29:36.000
Bạn có thể cũng đã biết rằng giải pháp cho điều đó là sử dụng phương thức init "được bản địa hóa" trên String, phương thức này sẽ tra cứu chuỗi thực tế trong gói ứng dụng của bạn và xử lý số nhiều đúng cách nếu bạn có tệp stringsdict.

00:29:36.000 --> 00:29:39.000
Tin tuyệt vời là nó cũng xử lý các con số một cách chính xác.

00:29:39.000 --> 00:29:47.000
Giá trị của phép nội suy "peopleInChat" ở đây sẽ được hiển thị với các chữ số được bản địa hóa chính xác cho ngôn ngữ và tùy chọn của người dùng.

00:29:47.000 --> 00:29:50.000
Điều này cũng hoạt động đúng với chế độ xem văn bản trong SwiftUI.

00:29:50.000 --> 00:29:57.000
Trình khởi tạo chế độ xem văn bản cũng sẽ hiển thị bất kỳ nội suy chuỗi nào với các chữ số được bản địa hóa đúng cách.

00:29:57.000 --> 00:30:01.000
Luôn sử dụng String(localized:) khi xây dựng các chuỗi hiển thị của người dùng.

00:30:01.000 --> 00:30:12.000
Nhiều API khác trên Chuỗi có thể định dạng số, bao gồm +stringWithFormat: và hàm String init nhận một số, luôn sử dụng các chữ số Latinh.

00:30:12.000 --> 00:30:17.000
Một nếp nhăn cần lưu ý là các chuỗi tĩnh có chứa các chữ số, chẳng hạn như cái này.

00:30:17.000 --> 00:30:19.000
Vấn đề lớn là gì?

00:30:19.000 --> 00:30:23.000
Bạn gửi nó cho các dịch giả, họ dịch nó, và bạn nhận được cái này.

00:30:23.000 --> 00:30:33.000
Điều này đúng ở rất nhiều nơi, nhưng ở Ả Rập Xê Út và một số quốc gia khác, bạn muốn xem điều này. Văn bản giống nhau ngoại trừ ký tự được sử dụng cho 3.

00:30:33.000 --> 00:30:43.000
Tất nhiên, bạn có thể có các bản địa hóa riêng biệt cho các ngôn ngữ nói tiếng Ả Rập sử dụng các chữ số Ả Rập-Indic và các chữ số sử dụng các chữ số Latinh, nhưng không ai làm điều đó, và điều đó thật lãng phí.

00:30:43.000 --> 00:30:55.000
Tệ hơn nữa, trong cả tiếng Ả Rập và tiếng Hindi, người dùng có thể chọn các chữ số họ muốn sử dụng, vì vậy bạn sẽ phải chọn bản địa hóa dựa trên sở thích của người dùng, không chỉ trên ngôn ngữ của họ.

00:30:55.000 --> 00:31:04.000
Giải pháp là vẫn chỉ có một bản địa hóa tiếng Ả Rập hoặc tiếng Hindi, nhưng thay thế số trong thời gian chạy, mặc dù bạn biết giá trị tại thời điểm biên dịch.

00:31:04.000 --> 00:31:10.000
Trong Swift, bạn chỉ có thể sử dụng phép nội suy chuỗi để thực hiện việc này.

00:31:10.000 --> 00:31:16.000
Nếu bạn có các yếu tố khác đi kèm với một con số, vị trí của chúng so với con số cũng có thể là một thách thức.

00:31:16.000 --> 00:31:19.000
Nó thậm chí không giống nhau cho tất cả các ngôn ngữ từ phải sang trái.

00:31:19.000 --> 00:31:25.000
Lưu ý rằng dấu trừ và dấu phần trăm nằm ở các mặt khác nhau của số trong tiếng Ả Rập và tiếng Do Thái.

00:31:25.000 --> 00:31:28.000
Trên thực tế, nó hoàn toàn không nhất thiết phải là ngôn ngữ từ phải sang trái.

00:31:28.000 --> 00:31:34.000
Lưu ý rằng trong tiếng Thổ Nhĩ Kỳ, là ngôn ngữ từ trái sang phải, dấu phần trăm cũng ở bên trái.

00:31:34.000 --> 00:31:41.000
Và, tất nhiên, hãy nhớ rằng nếu bạn đang sử dụng các chữ số Ả Rập bản địa, chúng sẽ sử dụng một biểu tượng phần trăm hoàn toàn khác.

00:31:41.000 --> 00:31:51.000
Nói cách khác, bạn thực sự không muốn làm điều này, nơi bạn đang thêm dấu phần trăm, hoặc ký hiệu tiền tệ, chữ viết tắt đơn vị hoặc bất cứ điều gì cho chính bạn.

00:31:51.000 --> 00:31:56.000
Thay vào đó, hãy sử dụng trình định dạng số để thêm ký hiệu phần trăm, hoặc ký hiệu tiền tệ, hoặc bất cứ thứ gì.

00:31:56.000 --> 00:32:01.000
Trong Swift, điều này rất dễ thực hiện với phương thức formatted() trên tất cả các loại số.

00:32:01.000 --> 00:32:21.000
Nếu đó là một phần của chuỗi lớn hơn, như trong ví dụ này, String(localized:) cũng sẽ đảm bảo rằng số được định dạng - hoặc bất kỳ thứ gì khác được thay thế vào chuỗi trong thời gian chạy, bao gồm các chuỗi khác, được bao quanh bằng đánh dấu sẽ giữ cho hướng viết của số được định dạng và thông báo xung quanh không làm rối tung nhau

00:32:21.000 --> 00:32:28.000
Cuối cùng, tôi muốn để lại cho bạn một mẹo để kiểm tra ứng dụng của bạn để đảm bảo rằng bạn đang làm điều đúng đắn từ phải sang trái.

00:32:28.000 --> 00:32:34.000
Bạn không cần phải có bản địa hóa tiếng Ả Rập hoặc tiếng Do Thái trong tệp thực thi của mình để kiểm tra ứng dụng của bạn từ phải sang trái.

00:32:34.000 --> 00:32:38.000
Bạn thực sự có thể kiểm tra hành vi từ phải sang trái trong ngôn ngữ phát triển của mình.

00:32:38.000 --> 00:32:42.000
Để làm điều này, hãy đưa trình chỉnh sửa sơ đồ lên Xcode.

00:32:42.000 --> 00:32:46.000
Bây giờ hãy chuyển đến tab Tùy chọn và tìm menu "Ngôn ngữ ứng dụng".

00:32:46.000 --> 00:32:50.000
Ở cuối menu này là một loạt các tùy chọn "ngôn ngữ giả".

00:32:50.000 --> 00:32:59.000
Đây là những ngôn ngữ giả mạo biến đổi giao diện người dùng của bạn theo nhiều cách khác nhau để cho phép bạn kiểm tra các vấn đề bản địa hóa mà không cần bản địa hóa thực tế.

00:32:59.000 --> 00:33:10.000
Chọn tùy chọn "Ngôn ngữ giả từ phải sang trái" và nhấp vào Chạy, và ứng dụng của bạn sẽ vẫn bằng tiếng Anh hoặc bất kỳ ngôn ngữ phát triển nào của bạn, nhưng tất cả giao diện người dùng sẽ được lật từ phải sang trái.

00:33:10.000 --> 00:33:11.000
Và đó là tất cả những gì tôi có.

00:33:11.000 --> 00:33:21.000
Bản địa hóa cho các ngôn ngữ từ phải sang trái liên quan đến việc chú ý đến một số vấn đề liên quan đến sự thay đổi hướng viết, nhưng hệ thống thực hiện hầu hết các công việc nặng nhọc cho bạn.

00:33:21.000 --> 00:33:28.000
Có những trường hợp, thường là xung quanh các hướng tuyệt đối, nơi bạn có thể muốn chọn hành vi này và điều đó luôn có thể xảy ra.

00:33:28.000 --> 00:33:33.000
Và hãy nhớ rằng không phải tất cả các ngôn ngữ đều sử dụng chữ số Latinh để hiển thị các con số.

00:33:33.000 --> 00:33:38.000
Hãy ghi nhớ những điều này, và sẽ không khó để đưa mọi thứ từ phải sang trái.

00:33:38.000 --> 23:59:59.000
.

