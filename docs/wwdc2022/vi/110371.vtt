WEBVTT

00:00:00.000 --> 00:00:12.000
- Xin chào. Tôi là Jake, một nhà thiết kế trong nhóm Xcode.

00:00:12.000 --> 00:00:16.000
Phát triển ứng dụng đa nền tảng đang được đưa lên cấp độ tiếp theo trong Xcode 14.

00:00:16.000 --> 00:00:29.000
Một mục tiêu ứng dụng duy nhất hiện có thể hỗ trợ nhiều điểm đến hơn trên nhiều nền tảng, tất cả trong khi vẫn duy trì một cơ sở mã chung duy nhất, chia sẻ cài đặt theo mặc định và cho phép các cách mới để điều kiện hóa khi cần thiết.

00:00:29.000 --> 00:00:36.000
Đầu tiên, chúng tôi sẽ đề cập đến mục tiêu ứng dụng đa nền tảng là gì và trong trường hợp nào nó hoạt động tốt nhất.

00:00:36.000 --> 00:00:47.000
Tiếp theo, chúng tôi sẽ sửa đổi dự án của mình để hỗ trợ nhiều điểm đến và nền tảng, sau đó chúng tôi sẽ cập nhật dự án của mình để xây dựng và chạy trên nền tảng mới.

00:00:47.000 --> 00:00:52.000
Chúng tôi sẽ đảm bảo ứng dụng của chúng tôi trông tuyệt vời trên mỗi nền tảng được hỗ trợ...

00:00:52.000 --> 00:00:57.000
Và cuối cùng chúng tôi sẽ tích hợp Xcode Cloud với các thay đổi dự án của chúng tôi.

00:00:57.000 --> 00:01:02.000
Đầu tiên, hãy hiểu kỹ thuật nào chúng tôi muốn sử dụng để cho phép ứng dụng của chúng tôi hỗ trợ nhiều nền tảng.

00:01:02.000 --> 00:01:10.000
Trước Xcode 14, nếu bạn muốn ứng dụng của mình hỗ trợ iOS và macOS, bạn sẽ cần hai mục tiêu riêng biệt.

00:01:10.000 --> 00:01:22.000
Điều này thật tuyệt vời nếu dự án của bạn cần các cơ sở mã khác nhau đáng kể, chia sẻ rất ít cài đặt giữa các nền tảng khác nhau hoặc nếu mỗi mục tiêu ứng dụng phụ thuộc nhiều vào các công nghệ cơ bản khác nhau.

00:01:22.000 --> 00:01:29.000
Nếu đó vẫn là trường hợp với dự án của bạn ngày hôm nay, đặt cược tốt nhất của bạn là tiếp tục sử dụng các mục tiêu riêng biệt cho từng nền tảng.

00:01:29.000 --> 00:01:37.000
Trong Xcode 14, một mục tiêu ứng dụng duy nhất có thể tuyên bố hỗ trợ cho nhiều điểm đến như iPhone, iPad, Mac và Apple TV.

00:01:37.000 --> 00:01:45.000
Điều này thật tuyệt vời cho một ứng dụng sử dụng cơ sở mã chung và chia sẻ hầu hết các cài đặt của nó trên tất cả các điểm đến trong khi vẫn cho phép tùy chỉnh khi cần thiết.

00:01:45.000 --> 00:01:49.000
Hãy cùng xem các ứng dụng đa nền tảng hoạt động như thế nào trong Xcode 14.

00:01:49.000 --> 00:01:58.000
Nếu chúng ta đang bắt đầu lại từ đầu, một cách tuyệt vời để bắt đầu là sử dụng mẫu ứng dụng đa nền tảng mới, được cải tiến khi tạo một dự án mới trong Xcode.

00:01:58.000 --> 00:02:08.000
Mẫu ứng dụng đa nền tảng sử dụng SwiftUI cho vòng đời và giao diện của nó, điều này bắt đầu chúng ta với một mục tiêu được định cấu hình theo mặc định để hỗ trợ iPhone, iPad và Mac.

00:02:08.000 --> 00:02:11.000
Đây là một cấu hình tuyệt vời cho các dự án mới.

00:02:11.000 --> 00:02:22.000
Bởi vì chúng tôi đang sử dụng SwiftUI, chúng tôi có quyền truy cập vào bộ tính năng đầy đủ của SDK của mỗi nền tảng, cho phép tạo ra các ứng dụng mới tuyệt vời tận dụng những gì mỗi nền tảng cung cấp.

00:02:22.000 --> 00:02:32.000
Các dự án hiện tại cũng có thể tuyên bố hỗ trợ cho nhiều điểm đến trong mục tiêu ứng dụng của họ và sử dụng SwiftUI để có quyền truy cập vào toàn bộ sức mạnh của SDK của mỗi nền tảng.

00:02:32.000 --> 00:02:37.000
Hãy cùng xem cách thêm điểm đến Mac vào ứng dụng iOS hiện có.

00:02:37.000 --> 00:02:42.000
Tôi đang xây dựng một ứng dụng Food Truck, và nó hoạt động tốt trên iPhone và iPad.

00:02:42.000 --> 00:02:48.000
Tôi khá hài lòng với ứng dụng iOS này, và bây giờ tôi muốn mang nó đến Mac và nắm lấy nền tảng và các tính năng của nó.

00:02:48.000 --> 00:02:54.000
Hãy cùng xem dự án của chúng ta trông như thế nào trong Xcode.

00:02:54.000 --> 00:03:00.000
Nếu chúng ta xem xét mục tiêu ứng dụng của tôi, chúng ta có thể thấy danh sách tất cả các điểm đến mà ứng dụng của tôi hỗ trợ.

00:03:00.000 --> 00:03:05.000
Bạn có thể thấy tôi đã có một điểm đến Mac - Được thiết kế cho iPad.

00:03:05.000 --> 00:03:09.000
Điều này cho phép các máy tính Mac với Apple silicon chạy ứng dụng iOS chưa được sửa đổi của tôi.

00:03:09.000 --> 00:03:15.000
Đây là một cách tuyệt vời để bắt đầu hỗ trợ Mac, nhưng tôi muốn đưa hỗ trợ Mac của mình lên một tầm cao mới.

00:03:15.000 --> 00:03:20.000
Có thể nói, hãy thêm trải nghiệm "Được thiết kế cho Mac".

00:03:20.000 --> 00:03:26.000
Chúng tôi có thể dễ dàng chỉnh sửa danh sách các điểm đến được hỗ trợ và thêm điểm đến Mac vào ứng dụng của mình.

00:03:26.000 --> 00:03:36.000
Có một vài lựa chọn cho các điểm đến Mac: Mac, Mac Catalyst và Designed cho iPad, cái cuối cùng chuyển sang màu xám, vì ứng dụng của tôi đã hỗ trợ nó.

00:03:36.000 --> 00:03:41.000
Lựa chọn giữa Mac và Mac Catalyst chủ yếu phụ thuộc vào công nghệ mà chúng tôi quan tâm nhất khi sử dụng.

00:03:41.000 --> 00:03:52.000
Nếu ứng dụng của chúng tôi sử dụng nhiều UIKit hoặc Bảng phân cảnh ở cốt lõi của ứng dụng, Mac Catalyst sẽ là một cách tuyệt vời để chuyển đổi ứng dụng iPad hiện có của chúng tôi thành một ứng dụng Mac tương thích.

00:03:52.000 --> 00:03:59.000
Tuy nhiên, ứng dụng của chúng tôi sử dụng SwiftUI, điều này làm cho "tùy chọn Mac" trở thành lựa chọn tốt nhất để tạo ra ứng dụng Mac của chúng tôi.

00:03:59.000 --> 00:04:07.000
Chúng tôi sẽ có được giao diện Mac tuyệt vời ngay lập tức, với toàn bộ sức mạnh của macOS SDK mà không có bất kỳ giới hạn nào.

00:04:07.000 --> 00:04:14.000
Có nghĩa là, chúng tôi sẽ có quyền tự do sử dụng UIKit trong ứng dụng iOS và AppKit trong ứng dụng macOS của chúng tôi, nếu chúng tôi muốn sự linh hoạt đó.

00:04:14.000 --> 00:04:19.000
Với tất cả những điều đó trong tâm trí, hãy chọn Mac, lựa chọn tốt nhất để làm việc với SwiftUI.

00:04:19.000 --> 00:04:26.000
Khi tôi đưa ra lựa chọn của mình, Xcode sẽ cảnh báo tôi về một số thay đổi cần thiết để chuẩn bị cho dự án của tôi để hỗ trợ Mac.

00:04:26.000 --> 00:04:32.000
Trong trường hợp này, Xcode sẽ cập nhật mục tiêu của tôi để chỉ bao gồm các phụ thuộc và khuôn khổ được hỗ trợ trên Mac.

00:04:32.000 --> 00:04:40.000
Điều quan trọng cần lưu ý là Xcode sẽ không thay đổi mã của tôi, vì vậy nếu tôi đang gọi API không khả dụng trên Mac, tôi sẽ cần tự giải quyết những vấn đề đó.

00:04:40.000 --> 00:04:45.000
Khi tôi chọn tùy chọn Mac của mình, nó sẽ được thêm vào danh sách các điểm đến được hỗ trợ của tôi.

00:04:45.000 --> 00:04:50.000
Hoàn toàn hợp lệ khi có nhiều hơn một điểm đến Mac khi tôi đang phát triển trong Xcode.

00:04:50.000 --> 00:04:57.000
Điều này đặc biệt hữu ích nếu tôi đang chuyển từ "Mac Catalyst" hoặc "Được thiết kế cho iPad" sang một ứng dụng Mac đầy đủ.

00:04:57.000 --> 00:05:02.000
Điều này có nghĩa là tôi có thể tiếp tục thử nghiệm từng sản phẩm Mac của mình trong Xcode.

00:05:02.000 --> 00:05:07.000
Và tôi không nhất thiết bị giới hạn trong một lựa chọn duy nhất khi phát triển ứng dụng của mình.

00:05:07.000 --> 00:05:19.000
Tuy nhiên, nếu tôi xuất bản ứng dụng Mac gốc của mình lên App Store, ứng dụng Designed for iPad của tôi sẽ không còn khả dụng cho khách hàng của tôi nữa, vì vậy Xcode cung cấp một cách nhanh chóng để xóa điểm đến này.

00:05:19.000 --> 00:05:24.000
Nhưng tôi sẽ cân nhắc việc xóa điểm đến này khi tôi hài lòng với trải nghiệm Mac gốc của mình.

00:05:24.000 --> 00:05:33.000
Cho dù tôi đang bắt đầu lại từ đầu hay thêm một điểm đến mới vào một ứng dụng hiện có, việc sử dụng một mục tiêu duy nhất trong Xcode cho phép tôi chia sẻ mã và xây dựng cài đặt theo mặc định.

00:05:33.000 --> 00:05:40.000
Có thể có những trường hợp tôi muốn tùy chỉnh một cài đặt riêng lẻ, như tên hiển thị ứng dụng của tôi hoặc phiên bản triển khai tối thiểu.

00:05:40.000 --> 00:05:45.000
Chúng ta hãy xem cách thực hiện điều đó trong trình chỉnh sửa mục tiêu được cải thiện trong Xcode 14.

00:05:45.000 --> 00:05:50.000
Nhiều cài đặt mục tiêu ứng dụng hiện bao gồm một cách để điều kiện hóa giá trị của nó.

00:05:50.000 --> 00:05:57.000
Trên các cài đặt được hỗ trợ, tôi có thể hiển thị một trình chỉnh sửa cho phép tôi đặt giá trị mặc định cho mỗi cấu hình xây dựng trong dự án của mình.

00:05:57.000 --> 00:06:04.000
Tôi có một cấu hình Beta tùy chỉnh mà tôi đã thêm vào, cũng như các cấu hình Gỡ lỗi và Phát hành tiêu chuẩn đi kèm với các dự án Xcode mới.

00:06:04.000 --> 00:06:11.000
Tôi muốn đặt cho ứng dụng của mình một tên hiển thị khác khi được xây dựng với cấu hình beta, vì vậy tôi có thể chỉnh sửa tên ngay tại đây.

00:06:11.000 --> 00:06:19.000
Khi tôi nhập, chúng ta sẽ thấy tên hiển thị của ứng dụng trong Xcode đã được thay thế bằng cách đọc tất cả các giá trị có thể có mà tên hiển thị hiện có thể có.

00:06:19.000 --> 00:06:25.000
Nếu cần, tôi cũng có thể thêm một điều kiện, cho phép tôi chỉ định một giá trị dựa trên SDK nào đang được sử dụng.

00:06:25.000 --> 00:06:32.000
Điều này cho phép tôi nói đặt một tên cụ thể cho cấu hình beta khi xây dựng cho Mac.

00:06:32.000 --> 00:06:35.000
Được rồi, tôi nghĩ chúng ta đã hoàn thành các chỉnh sửa mà chúng ta muốn thực hiện trong tab Chung.

00:06:35.000 --> 00:06:42.000
Hãy cùng xem tab Ký và Khả năng để biết bất kỳ thay đổi nào khác mà chúng tôi cần thực hiện.

00:06:42.000 --> 00:06:47.000
Tin tốt là, với tính năng Đăng nhập Tự động được bật, không có bước bổ sung nào để thực hiện.

00:06:47.000 --> 00:06:53.000
Khi tôi thêm điểm đến Mac của mình, Giấy chứng nhận ký và Hồ sơ cung cấp cần thiết cho Mac đã được tạo thay mặt tôi.

00:06:53.000 --> 00:07:05.000
Cả hai sản phẩm ứng dụng iOS và macOS của tôi đều sử dụng cùng một mã định danh gói theo mặc định, điều này thật tuyệt vời, bởi vì điều đó có nghĩa là khi tôi xuất bản chúng lên App Store, chúng sẽ được cung cấp cho Universal Purchase.

00:07:05.000 --> 00:07:10.000
Vì vậy, những người mua ứng dụng iOS của tôi cũng sẽ tự động nhận được ứng dụng Mac của tôi.

00:07:10.000 --> 00:07:14.000
Ứng dụng của tôi cũng sử dụng các khả năng như thông báo đẩy.

00:07:14.000 --> 00:07:21.000
Bất kỳ khả năng nào tôi đang sử dụng cho ứng dụng iOS của mình có thể áp dụng cho ứng dụng macOS của tôi đều được áp dụng mà không cần làm thêm công việc nào từ tôi.

00:07:21.000 --> 00:07:25.000
Chúng thậm chí còn được kết hợp thành một tệp quyền lợi duy nhất.

00:07:25.000 --> 00:07:31.000
Bây giờ chúng tôi đã thêm hỗ trợ cho nhiều điểm đến vào ứng dụng của mình, mục tiêu tiếp theo của chúng tôi là xây dựng nó.

00:07:31.000 --> 00:07:38.000
Việc gặp sự cố khi xây dựng ứng dụng cho một điểm đến mới là điều bình thường, đặc biệt nếu có liên quan đến SDK mới, như hỗ trợ Mac mới của chúng tôi.

00:07:38.000 --> 00:07:41.000
Vì vậy, chúng ta hãy xem xét một số vấn đề phổ biến này.

00:07:41.000 --> 00:07:44.000
Một số khuôn khổ không có sẵn cho tất cả các nền tảng.

00:07:44.000 --> 00:07:49.000
Chúng tôi sẽ cần đảm bảo rằng chúng tôi không nhập hoặc liên kết bất kỳ khuôn khổ không khả dụng nào.

00:07:49.000 --> 00:08:00.000
Hãy nhớ rằng Xcode sẽ không thay đổi mã của chúng tôi khi thêm hỗ trợ cho một điểm đến mới, vì vậy chúng tôi sẽ cần điều chỉnh mã của mình dựa trên SDK, tương tự như cách chúng tôi điều kiện hóa cài đặt ứng dụng của mình.

00:08:00.000 --> 00:08:02.000
Điều này cũng đúng với API.

00:08:02.000 --> 00:08:06.000
Một số tính năng được đánh dấu là không khả dụng dựa trên SDK mà chúng tôi đang xây dựng.

00:08:06.000 --> 00:08:14.000
Swift cung cấp một cách để điều kiện hóa các phần mã của chúng tôi để chỉ bao gồm các tính năng có sẵn cho SDK mà chúng tôi đang xây dựng.

00:08:14.000 --> 00:08:20.000
Xcode cũng cho phép chúng tôi chỉ định xem một tệp riêng lẻ có nên được biên dịch khi xây dựng cho một số SDK hay không.

00:08:20.000 --> 00:08:24.000
Nếu tôi xây dựng dự án của mình ngay bây giờ...

00:08:24.000 --> 00:08:26.000
Tôi không thấy bất kỳ vấn đề gì.

00:08:26.000 --> 00:08:32.000
Đó là bởi vì tôi vẫn có một điểm đến được chọn trên thanh công cụ của mình sử dụng iOS SDK.

00:08:32.000 --> 00:08:40.000
Tôi sẽ cần chọn "Mac Mac của tôi" từ danh sách để xây dựng dựa trên macOS SDK.

00:08:40.000 --> 00:08:45.000
Việc xây dựng hiện đang tiết lộ một số vấn đề mới và như chúng tôi mong đợi, chúng chủ yếu liên quan đến tính khả dụng.

00:08:45.000 --> 00:08:51.000
Trong một trong những tệp của tôi, tôi đang nhập ARKit, tệp này không khả dụng trên Mac.

00:08:51.000 --> 00:08:58.000
Tôi có thể gói câu lệnh nhập này trong #if canImport để điều kiện hóa nó.

00:08:58.000 --> 00:09:06.000
Điều này rất hữu ích nếu tôi không muốn quản lý danh sách các nền tảng đã biết mà một khuôn khổ có sẵn và chỉ cần nói nếu nó không có sẵn, đừng bao gồm nó.

00:09:06.000 --> 00:09:15.000
Tuy nhiên, tôi vẫn đang sử dụng ARKit trong suốt tệp này, vì vậy đôi khi sẽ có ý nghĩa hơn khi điều kiện hóa toàn bộ tệp cho SDK.

00:09:15.000 --> 00:09:24.000
Nếu chúng ta điều hướng trở lại mục tiêu của mình và chuyển đến tab Giai đoạn Xây dựng, tôi có thể tìm kiếm tệp của mình...

00:09:24.000 --> 00:09:35.000
Và chỉ định nó chỉ nên được biên dịch cho iOS.

00:09:35.000 --> 00:09:45.000
Sau khi xây dựng, một khi tôi đã thực hiện những thay đổi đó, Xcode báo cáo một vấn đề mới - một khuôn khổ có sẵn trên Mac, SwiftUI, có một tính năng được đánh dấu là không khả dụng.

00:09:45.000 --> 00:09:54.000
Cụ thể, tôi đang sử dụng EditMode trên iOS để cho phép người dùng chỉnh sửa và chọn nội dung trong Bảng và Danh sách, nhưng trên macOS EditMode không tồn tại!

00:09:54.000 --> 00:10:01.000
Người dùng đã có thể tự do chọn và chỉnh sửa các hàng nội dung trên Mac, vì vậy hãy đảm bảo mã này chỉ chạy trên iOS.

00:10:01.000 --> 00:10:07.000
Tôi có thể điều chỉnh tài sản môi trường của mình và bất kỳ nơi nào tôi đang sử dụng Chế độ chỉnh sửa bên dưới.

00:10:07.000 --> 00:10:14.000
Bây giờ, tôi cần đảm bảo rằng bất kỳ nơi nào tôi đang sử dụng thuộc tính này cũng đều bị điều kiện hóa, như công cụ sửa đổi onChange này.

00:10:14.000 --> 00:10:19.000
Tôi có thể bọc toàn bộ công cụ sửa đổi trong điều kiện "if os".

00:10:19.000 --> 00:10:28.000
Và cuối cùng, tôi đang sử dụng chế độ xem EditButton trên thanh công cụ, cũng chỉ dành cho iOS.

00:10:28.000 --> 00:10:33.000
Được rồi, hãy thử chạy ứng dụng của chúng tôi.

00:10:33.000 --> 00:10:37.000
À! Nó sống! Ứng dụng của chúng tôi hiện được xây dựng và chạy trên Mac!

00:10:37.000 --> 00:10:42.000
Chỉ vì ứng dụng của chúng tôi hiện đang được xây dựng và chạy trên nền tảng mới của chúng tôi không có nghĩa là công việc của chúng tôi đã hoàn thành.

00:10:42.000 --> 00:10:49.000
Sẽ có những trường hợp bạn muốn tinh chỉnh trải nghiệm ứng dụng của mình cho những gì người dùng trên nền tảng mới của bạn mong đợi.

00:10:49.000 --> 00:10:53.000
Ngoài ra, việc cắt giảm các tính năng chỉ dành cho iOS của chúng tôi không phải là kết thúc hành trình của chúng tôi.

00:10:53.000 --> 00:10:56.000
Bây giờ chúng tôi có tất cả các tính năng của macOS SDK để chơi.

00:10:56.000 --> 00:11:03.000
Bây giờ tôi thấy ứng dụng của mình đang chạy trên Mac, tôi nhận thấy một điều kỳ quặc về ứng dụng của mình mà không cảm thấy tự nhiên trong bối cảnh mới của nó.

00:11:03.000 --> 00:11:07.000
Những chiếc bánh rán này trong chế độ xem lưới này có vẻ quá lớn!

00:11:07.000 --> 00:11:10.000
Đó là bởi vì các mục lưới của chúng tôi được thiết kế để chạm vào.

00:11:10.000 --> 00:11:19.000
Những tình huống như thế này phát sinh khi bạn khai báo kích thước điểm cho một phần tử giao diện người dùng hoặc tùy chỉnh điều khiển chỉ với một nền tảng duy nhất trong tâm trí.

00:11:19.000 --> 00:11:27.000
Trên Mac, chúng tôi không cần phải làm cho các nút hoặc hình thu nhỏ của mình quá lớn, vì chúng tôi có một thiết bị trỏ chính xác hơn nhiều.

00:11:27.000 --> 00:11:33.000
Đây là một trường hợp tuyệt vời để điều kiện hóa một hằng số trong dự án của chúng tôi để thay đổi dựa trên SDK mà chúng tôi đang xây dựng.

00:11:33.000 --> 00:11:41.000
Khi chúng tôi đưa ứng dụng của mình lên các nền tảng khác, điều quan trọng là phải xem xét lại nhiều lựa chọn này với kỳ vọng của nền tảng mới của chúng tôi.

00:11:41.000 --> 00:11:45.000
Hãy xem xét việc chỉ định một giá trị khác dựa trên SDK mà chúng tôi đang xây dựng.

00:11:45.000 --> 00:11:52.000
Một kỹ thuật tôi thường sử dụng là tạo một hằng số thành một thuộc tính được tính toán và sử dụng "#if os" để điều kiện hóa những gì được trả về.

00:11:52.000 --> 00:11:58.000
Hãy chuyển đổi cái này thành một thuộc tính được tính toán và trả về những gì trước đây là một hằng số...

00:11:58.000 --> 00:12:11.000
Nhưng chỉ trả về giá trị đó trên iOS.

00:12:11.000 --> 00:12:21.000
À, 80 cảm thấy có kích thước tự nhiên hơn nhiều.

00:12:21.000 --> 00:12:29.000
Bây giờ, đối với việc sử dụng macOS SDK, có một tính năng mới thú vị trong SwiftUI cho phép chúng tôi thêm phần tử giao diện người dùng của riêng mình vào Thanh menu.

00:12:29.000 --> 00:12:34.000
Tôi có một chế độ xem tóm tắt cho ứng dụng của mình mà tôi muốn cho phép người dùng của mình truy cập nhanh chóng và dễ dàng.

00:12:34.000 --> 00:12:41.000
Hãy đi đến khai báo Ứng dụng của tôi, và ở đây, tôi có thể thêm một Cảnh mới cho Menu Bar Extra của mình.

00:12:41.000 --> 00:12:48.000
Tuy nhiên, lưu ý rằng vì đây là tính năng chỉ dành cho macOS, tôi cần điều kiện hóa nó cho macOS SDK.

00:12:48.000 --> 00:12:54.000
Hãy xây dựng và chạy và xem qua.

00:12:54.000 --> 00:12:57.000
À tuyệt, biểu tượng xe tải của tôi hiện đang hiển thị trên thanh menu.

00:12:57.000 --> 00:13:03.000
Tuyệt vời, bây giờ người dùng Mac của tôi có thể xem nhanh thông tin hôm nay ngay từ thanh menu của họ.

00:13:03.000 --> 00:13:09.000
Khi chúng tôi sử dụng SwiftUI, chúng tôi có quyền truy cập vào SDK đầy đủ của từng nền tảng và có thể sử dụng các tính năng tuyệt vời của nó.

00:13:09.000 --> 00:13:18.000
Điều quan trọng cần lưu ý là khi chúng tôi đưa ứng dụng của mình lên các nền tảng khác, chúng tôi thường sẽ cần xem xét lại nhiều lựa chọn trong quá khứ khi làm việc trong bối cảnh nền tảng mới của chúng tôi.

00:13:18.000 --> 00:13:22.000
SwiftUI đưa kỳ vọng nền tảng trực tiếp vào API.

00:13:22.000 --> 00:13:27.000
Nhiều yếu tố giao diện sẽ có được giao diện tự động trông tuyệt vời trên mỗi nền tảng.

00:13:27.000 --> 00:13:38.000
Ngược lại, điều đó có nghĩa là chúng ta có thể mất kiểu dáng tự động đó khi chúng ta tùy chỉnh nhiều các điều khiển và các phần khác của giao diện người dùng, vì vậy chúng ta nên luôn kiểm tra kỹ giao diện người dùng của mình trông tuyệt vời ở mọi nơi.

00:13:38.000 --> 00:13:45.000
Tất cả những gì đã nói, khi chúng tôi xây dựng ứng dụng thú vị của mình, chúng tôi nên đảm bảo rằng chúng tôi đang tuân theo các phương pháp hay nhất được đặt ra bởi các nguyên tắc giao diện con người.

00:13:45.000 --> 00:13:56.000
Bây giờ chúng tôi hài lòng với những thay đổi cục bộ đối với ứng dụng của mình, đã đến lúc lưu trữ các sản phẩm ứng dụng của chúng tôi và tải chúng lên App Store Connect, điều mà chúng tôi có thể thực hiện từ Xcode hoặc tự động hóa nó với Xcode Cloud.

00:13:56.000 --> 00:14:02.000
Khi chúng tôi đã sẵn sàng, chúng tôi có thể chia sẻ ứng dụng với những người thử nghiệm nội bộ và bên ngoài trên TestFlight và phát hành nó lên App Store.

00:14:02.000 --> 00:14:05.000
Chúng tôi sẽ cần lưu trữ các sản phẩm của mình để tải chúng lên App Store Connect.

00:14:05.000 --> 00:14:10.000
Chỉ vì chúng tôi có một mục tiêu duy nhất không có nghĩa là chúng tôi chỉ có một sản phẩm duy nhất.

00:14:10.000 --> 00:14:15.000
Chúng tôi sẽ cần lưu trữ cho từng nền tảng và tải chúng lên riêng lẻ.

00:14:15.000 --> 00:14:22.000
Nếu bạn đang xây dựng và lưu trữ cục bộ, bạn sẽ cần chọn một điểm đến có SDK mà bạn muốn tạo kho lưu trữ.

00:14:22.000 --> 00:14:32.000
Nếu tôi muốn tạo ứng dụng macOS của mình, tôi sẽ cần chọn "Mac của tôi" từ danh sách các điểm đến, nếu không tôi sẽ chọn một thiết bị iOS để tạo ứng dụng iOS của mình.

00:14:32.000 --> 00:14:39.000
Khi tôi đã chọn một điểm đến, tôi có thể chọn "Lưu trữ sản phẩm" để tạo kho lưu trữ.

00:14:39.000 --> 00:14:45.000
Khi kho lưu trữ của tôi hoàn tất, tôi có thể sử dụng cửa sổ Organizer trong Xcode để tải chúng lên App Store Connect.

00:14:45.000 --> 00:14:51.000
Nếu tôi đang sử dụng Xcode Cloud, tôi có thể thêm các hành động vào quy trình làm việc của mình để xây dựng, kiểm tra và lưu trữ các sản phẩm của mình.

00:14:51.000 --> 00:15:00.000
Trong danh sách các hành động trong quy trình làm việc của mình, tôi có thể tạo các mục mới để xây dựng, kiểm tra, phân tích và lưu trữ từng sản phẩm của mình.

00:15:00.000 --> 00:15:03.000
Trong trường hợp này, tôi có một ứng dụng iOS và một ứng dụng macOS.

00:15:03.000 --> 00:15:17.000
Tôi có thể tiến thêm một bước nữa và bao gồm chuẩn bị triển khai để tự động tải ứng dụng của mình lên App Store Connect và tôi thậm chí có thể gửi những bản dựng đó đến nhóm TestFlight nội bộ của mình ngay lập tức và bắt đầu nhận phản hồi về những thay đổi nóng hổi.

00:15:17.000 --> 00:15:28.000
Tóm lại, Xcode 14 đưa phát triển ứng dụng đa nền tảng lên một tầm cao mới với các mục tiêu ứng dụng được sắp xếp hợp lý hiện có thể hỗ trợ nhiều điểm đến hơn trên nhiều nền tảng.

00:15:28.000 --> 00:15:34.000
Với một mục tiêu ứng dụng duy nhất, bạn có thể duy trì một cơ sở mã chung và các cài đặt được chia sẻ theo mặc định.

00:15:34.000 --> 00:15:43.000
Như đã được chứng minh, chúng tôi có thể điều chỉnh các cài đặt và mã của mình dựa trên nhu cầu của mình, cho phép chúng tôi tùy chỉnh ứng dụng của mình để phù hợp nhất với mong đợi của nền tảng.

00:15:43.000 --> 00:15:44.000
Phần còn lại là tùy thuộc vào bạn.

00:15:44.000 --> 00:15:50.000
Để tìm hiểu thêm về các tính năng và cải tiến mới trong Xcode năm nay, hãy xem "Có gì mới trong Xcode."

00:15:50.000 --> 23:59:59.000
Tôi nóng lòng muốn xem bạn mang đến những ý tưởng đáng kinh ngạc nào cho cuộc sống với sức mạnh của Xcode và SwiftUI.

