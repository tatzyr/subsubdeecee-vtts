WEBVTT

00:00:00.000 --> 00:00:03.000
♪ nhạc cụ hip hop ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:12.000
Xin chào, tôi là Nick.

00:00:12.000 --> 00:00:15.000
Và tôi là Franck, và chúng tôi là kỹ sư SwiftUI.

00:00:15.000 --> 00:00:19.000
Hôm nay, chúng ta sẽ đề cập đến "Có gì mới trong SwiftUI."

00:00:19.000 --> 00:00:28.000
SwiftUI đang phát triển cùng với các hệ điều hành của chúng tôi, mỗi hệ điều hành đều đẩy giới hạn của hệ điều hành khác.

00:00:28.000 --> 00:00:34.000
Chúng tôi tiếp tục ngạc nhiên và vui mừng bởi những gì bạn đang làm với SwiftUI.

00:00:34.000 --> 00:00:38.000
Chúng tôi ghi nhớ tất cả các hương vị phản hồi từ cộng đồng.

00:00:38.000 --> 00:00:44.000
Đó là lý do tại sao chúng tôi đặc biệt vui mừng được chia sẻ những gì chúng tôi đã tập trung vào năm nay.

00:00:44.000 --> 00:00:47.000
Với API năm nay, chúng tôi đã đi sâu hơn.

00:00:47.000 --> 00:00:50.000
Chúng tôi đã tạo ra nhiều trải nghiệm tùy chỉnh hơn có thể.

00:00:50.000 --> 00:00:54.000
Chúng tôi đã giới thiệu một số kỹ thuật đồ họa mới tuyệt vời.

00:00:54.000 --> 00:01:01.000
Chúng tôi đã kiến trúc một cấu trúc ứng dụng SwiftUI mới và hơn thế nữa.

00:01:01.000 --> 00:01:07.000
SwiftUI cho phép chúng tôi xây dựng các thiết kế và tính năng phản ánh tương lai của các nền tảng của chúng tôi.

00:01:07.000 --> 00:01:14.000
Từ việc thiết kế lại các ứng dụng cổ điển đến các tính năng hoàn toàn mới đến tích hợp hệ thống sâu.

00:01:14.000 --> 00:01:20.000
Việc áp dụng toàn diện này trong Apple tiếp tục thúc đẩy sự phát triển của SwiftUI.

00:01:20.000 --> 00:01:29.000
Nhiều thiết kế và tính năng mới này chỉ có thể thực hiện được vì SwiftUI đã phát triển cách chúng tôi viết ứng dụng tại Apple như thế nào.

00:01:29.000 --> 00:01:44.000
Hôm nay chúng tôi đang kỷ niệm các API này, Và chúng tôi cũng đang kỷ niệm sinh nhật của SwiftUI, Franck và tôi là những đồng chủ tịch may mắn của ủy ban lập kế hoạch tiệc tùng.

00:01:44.000 --> 00:01:49.000
Để tôi kể cho bạn nghe về các hoạt động mà chúng tôi đã lên kế hoạch cho bữa tiệc.

00:01:49.000 --> 00:02:00.000
Tôi sẽ giới thiệu cho bạn một khuôn khổ hoàn toàn mới được gọi là Biểu đồ Swift cho phép bạn tạo ra các hình ảnh trực quan hóa dữ liệu thú vị trên tất cả các nền tảng của chúng tôi.

00:02:00.000 --> 00:02:09.000
Tôi sẽ giới thiệu mô hình dựa trên dữ liệu, được nhập mạnh mẽ của SwiftUI để điều hướng và các kỹ thuật cửa sổ mới.

00:02:09.000 --> 00:02:16.000
Franck sẽ đưa bạn qua một bộ điều khiển mới và các tùy chỉnh sâu hơn của các điều khiển hiện có.

00:02:16.000 --> 00:02:24.000
Sau đó, anh ấy sẽ chỉ cho bạn cách chúng tôi đã đưa việc chia sẻ một cách tao nhã vào vũ trụ SwiftUI với giao thức Transferable.

00:02:24.000 --> 00:02:31.000
Cuối cùng, tôi sẽ kết thúc với các API đồ họa mới kỳ lạ và các API bố cục mới nâng cao.

00:02:31.000 --> 00:02:35.000
Hãy bắt đầu với Swift Charts.

00:02:35.000 --> 00:02:42.000
Swift Charts là một khuôn khổ khai báo để xây dựng các biểu đồ theo định hướng nhà nước tuyệt đẹp.

00:02:42.000 --> 00:02:57.000
Các nguyên tắc thiết kế cơ bản làm cho SwiftUI trở nên tuyệt vời và quá trình vẽ biểu đồ dữ liệu đã được sáng tác hài hòa để tạo ra Biểu đồ Swift - một khuôn khổ trực quan hóa dữ liệu đẳng cấp thế giới.

00:02:57.000 --> 00:03:04.000
Đây là biểu đồ thanh vẽ biểu đồ số lượng nhiệm vụ của bữa tiệc Franck và tôi cần hoàn thành trước khi bữa tiệc có thể bắt đầu.

00:03:04.000 --> 00:03:11.000
Swift Charts đã xây dựng một biểu đồ tuyệt vời, có thể tùy chỉnh chỉ từ một vài dòng mã.

00:03:11.000 --> 00:03:15.000
Giống như SwiftUI, Swift Charts chọn các mặc định thông minh.

00:03:15.000 --> 00:03:26.000
Ở đây, khung đã chọn các số tròn thỏa mãn cho các giá trị trục y và cung cấp màu mặc định cho các dấu thanh.

00:03:26.000 --> 00:03:33.000
Nếu bạn biết SwiftUI, bạn đã có thể đọc cú pháp khai báo, dựa trên trạng thái của Biểu đồ Swift.

00:03:33.000 --> 00:03:47.000
Biểu đồ chỉ là một số Chế độ xem và bạn khai báo nó giống như bạn làm danh sách và bảng - bằng cách cung cấp dữ liệu và sau đó xây dựng nội dung biểu đồ với dữ liệu đó.

00:03:47.000 --> 00:04:07.000
Đối với biểu đồ này, tôi đã chọn BarMark, nhưng nếu tôi chuyển sang LineMark và thêm kiểu tiền cảnh vào nhóm theo danh mục, tôi có thể xem thêm câu chuyện khi Biểu đồ Swift vẽ các dòng riêng lẻ cho từng danh mục và tự động thêm chú giải vào biểu đồ.

00:04:07.000 --> 00:04:10.000
Thật thú vị khi tạo cho những biểu đồ này một chút cá tính.

00:04:10.000 --> 00:04:16.000
Tôi có thể thêm điểm vào dòng bằng công cụ sửa đổi biểu tượng trên LineMark.

00:04:16.000 --> 00:04:21.000
Những công cụ sửa đổi này không khác gì công cụ sửa đổi SwiftUI.

00:04:21.000 --> 00:04:25.000
Bạn thậm chí có thể sử dụng chế độ xem SwiftUI trong một biểu đồ.

00:04:25.000 --> 00:04:32.000
Giống như Danh sách, đối số dữ liệu cho Biểu đồ thay vào đó có thể được chuyển đến ForEach.

00:04:32.000 --> 00:04:41.000
Điều này cho phép thêm nhiều dấu hiệu hơn vào trình tạo Biểu đồ, như RuleMark để hiển thị mục tiêu hàng ngày của chúng tôi.

00:04:41.000 --> 00:04:56.000
Tinh thần của SwiftUI tỏa sáng một lần nữa, khi Swift Charts xử lý bản địa hóa, Chế độ tối và Loại động tự động, và tất nhiên, hoạt động trên tất cả các nền tảng của chúng tôi.

00:04:56.000 --> 00:05:01.000
Nếu bạn muốn xem cách tạo biểu đồ của riêng mình, hãy xem "Hello Swift Charts".

00:05:01.000 --> 00:05:07.000
Nếu bạn quan tâm đến các kỹ thuật vẽ cốt truyện nâng cao, hãy theo dõi nó với phiên "Nâng thanh".

00:05:07.000 --> 00:05:11.000
Tiếp theo, hãy nói về điều hướng và cửa sổ.

00:05:11.000 --> 00:05:31.000
SwiftUI đã hỗ trợ các mẫu điều hướng ứng dụng phổ biến nhất, chẳng hạn như ngăn xếp điều hướng đẩy và bật nhập vai; chế độ xem phân chia mở rộng, giàu chi tiết; và trải nghiệm đa cửa sổ mạnh mẽ.

00:05:31.000 --> 00:05:37.000
Năm nay, SwiftUI có những cập nhật lớn cho cả ba mẫu này.

00:05:37.000 --> 00:05:40.000
Hãy bắt đầu với các ngăn xếp.

00:05:40.000 --> 00:05:51.000
SwiftUI đang giới thiệu một chế độ xem vùng chứa mới, được gọi đơn giản là NavigationStack, để hỗ trợ điều hướng kiểu push-and-pop.

00:05:51.000 --> 00:05:58.000
NavigationStack kết thúc chế độ xem nội dung gốc, như danh sách kiểm kê thực phẩm này cho ứng dụng lập kế hoạch bữa tiệc của chúng tôi.

00:05:58.000 --> 00:06:06.000
Như bạn mong đợi, nó hoạt động tốt với các API hiện có như NavigationLink và navigationTitle().

00:06:06.000 --> 00:06:14.000
Khi chúng tôi chọn một liên kết, SwiftUI đẩy chế độ xem chi tiết của nó lên trên ngăn xếp.

00:06:14.000 --> 00:06:25.000
Trong ứng dụng của chúng tôi, mỗi chế độ xem chi tiết chứa nhiều liên kết hơn cho các mặt hàng thực phẩm liên quan để duyệt nhanh.

00:06:25.000 --> 00:06:28.000
Cách tiếp cận này có thể là tất cả những gì bạn cần.

00:06:28.000 --> 00:06:35.000
Nhưng có một cách mới để trình bày quan điểm và có quyền kiểm soát theo chương trình đối với trạng thái được trình bày đó.

00:06:35.000 --> 00:06:43.000
Nếu bạn cần kiểm soát trạng thái của ngăn xếp điều hướng, hãy áp dụng các API dựa trên dữ liệu mới.

00:06:43.000 --> 00:06:54.000
Công cụ sửa đổi navigationDestination() mới cho phép chúng tôi liên kết các điểm đến điều hướng với các loại dữ liệu cụ thể.

00:06:54.000 --> 00:07:04.000
Và năm nay, chúng tôi đã dạy NavigationLink một thủ thuật tiệc tùng mới: thay vì chế độ xem điểm đến, nó có thể lấy một giá trị đại diện cho một điểm đến.

00:07:04.000 --> 00:07:18.000
Khi nhấn vào một liên kết, SwiftUI sẽ sử dụng loại giá trị của nó để tìm đúng điểm đến và đẩy nó vào ngăn xếp, giống như trước đây.

00:07:18.000 --> 00:07:27.000
Bởi vì bây giờ chúng tôi sử dụng dữ liệu để điều khiển ngăn xếp của mình, có thể biểu diễn đường dẫn điều hướng hiện tại dưới dạng trạng thái rõ ràng.

00:07:27.000 --> 00:07:35.000
Trong trường hợp này, đường dẫn điều hướng chỉ đơn giản là một mảng của tất cả các mặt hàng thực phẩm mà chúng tôi đã ghé thăm.

00:07:35.000 --> 00:07:45.000
Với quyền truy cập trực tiếp vào trạng thái này, không thể dễ dàng hơn để thêm một nút để nhanh chóng quay lại mục được chọn đầu tiên.

00:07:45.000 --> 00:07:50.000
Khi các chế độ xem được đẩy lên ngăn xếp, các mục được thêm vào mảng FoodItems đã chọn.

00:07:50.000 --> 00:08:00.000
Trong hành động của nút, chúng ta chỉ có thể xóa tất cả các mục khỏi đường dẫn ngoại trừ mục đầu tiên.

00:08:00.000 --> 00:08:07.000
Và chỉ với một cú chạm, chúng tôi đã trở lại ngay nơi chúng tôi bắt đầu.

00:08:07.000 --> 00:08:13.000
Bây giờ hãy nói về các chế độ xem phân chia để điều hướng nhiều cột.

00:08:13.000 --> 00:08:20.000
Chúng tôi đang giới thiệu một vùng chứa mới khác có tên NavigationSplitView để điều hướng nhiều cột.

00:08:20.000 --> 00:08:25.000
NavigationSplitView có thể khai báo bố bố cục hai và ba cột.

00:08:25.000 --> 00:08:37.000
Party Planner sử dụng bố cục hai cột đơn giản, bao bọc danh sách thanh bên của các nhiệm vụ lập kế hoạch nhóm của chúng tôi và chế độ xem chi tiết thay đổi nội dung của nó với nhiệm vụ đã chọn.

00:08:37.000 --> 00:08:49.000
Chế độ xem phân tách hoạt động tốt với Liên kết điều hướng dựa trên giá trị mới mà chúng tôi đã thấy trước đó, sử dụng giá trị của liên kết để thúc đẩy lựa chọn danh sách.

00:08:49.000 --> 00:09:02.000
NavigationSplitView sẽ tự động thu gọn thành một ngăn xếp trên các lớp hoặc thiết bị có kích thước nhỏ hơn, làm cho nó trở thành một công cụ tuyệt vời để xây dựng các ứng dụng thích ứng, đa nền tảng.

00:09:02.000 --> 00:09:15.000
NavigationSplitView và NavigationStack được thiết kế để hoạt động cùng nhau và có thể được cấu tạo trực tiếp để xây dựng các cấu trúc điều hướng phức tạp hơn.

00:09:15.000 --> 00:09:35.000
Chúng tôi sử dụng điều này trong ứng dụng Party Planner để biến cột chi tiết thành ngăn xếp điều hướng khép kín của riêng nó, điều này cũng cho thấy sự hỗ trợ mới cho ngăn xếp điều hướng trên macOS.

00:09:35.000 --> 00:09:45.000
Chà, chúng ta đã nói rất nhiều về đồ ăn, nhưng tôi nghe nói rằng đồng nghiệp Curt của tôi đang chuẩn bị một cơn bão trong bài nói chuyện của anh ấy, "Sách dạy nấu ăn SwiftUI để điều hướng."

00:09:45.000 --> 00:09:51.000
Kiểm tra nó để tìm hiểu thêm về ngăn xếp điều hướng và chế độ xem phân chia điều hướng.

00:09:51.000 --> 00:09:58.000
Nhưng bây giờ, hãy bước ra khỏi hộp và nói về các API cảnh mới.

00:09:58.000 --> 00:10:10.000
Bạn có thể đã quen thuộc với WindowGroup, đây là một cách tuyệt vời để xây dựng giao diện chính của ứng dụng của bạn và có thể tạo nhiều cửa sổ để cho phép các quan điểm khác nhau vào dữ liệu ứng dụng của bạn.

00:10:10.000 --> 00:10:19.000
Mới trong năm nay, chúng tôi sẽ thêm cửa sổ, mà - bạn đoán nó - khai báo một cửa sổ duy nhất, duy nhất cho ứng dụng của bạn.

00:10:19.000 --> 00:10:26.000
Ở đây, tôi đã thêm một cửa sổ Ngân sách Đảng hiển thị tổng chi phí của bữa tiệc.

00:10:26.000 --> 00:10:34.000
Theo mặc định, cửa sổ có sẵn và có thể được hiển thị bằng cách chọn tên của nó trong menu Cửa sổ của ứng dụng.

00:10:34.000 --> 00:10:43.000
Nhưng chúng ta có thể làm điều đó dễ dàng hơn bằng cách chỉ định một phím tắt Command-0 để mở cửa sổ.

00:10:43.000 --> 00:10:50.000
Để đảm bảo rằng tôi vẫn là một người lập kế hoạch bữa tiệc có ý thức về ngân sách, tôi sẽ thêm một nút thanh công cụ với một hành động cũng hiển thị cửa sổ này.

00:10:50.000 --> 00:11:00.000
Sử dụng hành động môi trường openWindow, bây giờ tôi có thể mở các cửa sổ mới do SwiftUI quản lý theo chương trình.

00:11:00.000 --> 00:11:13.000
Trên thực tế, chúng tôi đã thêm toàn bộ tùy chỉnh cửa sổ mới trong năm nay, bao gồm các công cụ sửa đổi cho kích thước mặc định, vị trí, khả năng thay đổi kích thước và hơn thế nữa.

00:11:13.000 --> 00:11:19.000
Tôi không muốn ngân sách của đảng cản trở, vì vậy theo mặc định, nó xuất hiện dưới dạng một cửa sổ góc nhỏ.

00:11:19.000 --> 00:11:27.000
Nhưng nếu tôi điều chỉnh vị trí hoặc kích thước của nó, SwiftUI sẽ tự động ghi nhớ điều đó trên các lần khởi chạy ứng dụng.

00:11:27.000 --> 00:11:40.000
Cảnh cửa sổ độc lập mới rất phù hợp với các cửa sổ phụ nhỏ như cửa sổ này trên Mac, nhưng Party Planner là một ứng dụng đa nền tảng và chúng tôi cần một thiết kế tốt hơn cho màn hình nhỏ hơn.

00:11:40.000 --> 00:11:47.000
Ví dụ, trên iOS, chúng tôi đã chọn hiển thị ngân sách của mình trong một trang tính có thể thay đổi kích thước thay thế.

00:11:47.000 --> 00:11:51.000
Điều này có thể thực hiện được với công cụ sửa đổi presentationDetents() mới.

00:11:51.000 --> 00:12:03.000
Trong trường hợp này, tôi đã cấu hình một tấm có thể thay đổi kích thước dính vào hai kích thước khác nhau: một ở 250 điểm và một ở chiều cao trung bình do hệ thống xác định.

00:12:03.000 --> 00:12:12.000
Thật đơn giản để lặp lại giữa các nền tảng trong năm nay với các mục tiêu đa nền tảng trong Xcode cung cấp năng lượng cho các ứng dụng dựa trên SwiftUI của bạn.

00:12:12.000 --> 00:12:17.000
Một mục tiêu có thể được triển khai cho nhiều nền tảng.

00:12:17.000 --> 00:12:23.000
Chỉ cần chọn nền tảng của bạn từ trình đơn kéo xuống thông thường trên thanh công cụ của Xcode.

00:12:23.000 --> 00:12:31.000
Xem "Có gì mới trong Xcode" và theo dõi nó với "Sử dụng Xcode để phát triển một ứng dụng đa nền tảng" để tìm hiểu thêm.

00:12:31.000 --> 00:12:36.000
Đối với loại cảnh mới cuối cùng, chúng ta có thể chuyển sự chú ý của mình sang thanh menu.

00:12:36.000 --> 00:12:44.000
Với macOS Ventura, giờ đây bạn có thể xây dựng MenuBarExtras hoàn toàn trong SwiftUI!

00:12:44.000 --> 00:12:53.000
Chúng có thể được xác định cùng với các loại cảnh khác trong ứng dụng của bạn và sẽ luôn được hiển thị trong thanh menu trong khi ứng dụng của bạn đang chạy.

00:12:53.000 --> 00:12:57.000
Hoặc, bạn có thể xây dựng toàn bộ ứng dụng chỉ bằng MenuBarExtra!

00:12:57.000 --> 00:13:04.000
Đây là một cách thú vị để đưa ngay cả những ý tưởng đơn giản nhất vào cuộc sống trên macOS.

00:13:04.000 --> 00:13:12.000
"Mang nhiều cửa sổ vào ứng dụng SwiftUI của bạn" có nhiều chi tiết hơn về cách tận dụng tất cả các loại cảnh và tính năng mới.

00:13:12.000 --> 00:13:18.000
Bây giờ chúng ta đã có quyền kiểm soát cửa sổ, tôi sẽ chuyển nó cho Franck, để đặt các điều khiển trong cửa sổ.

00:13:18.000 --> 00:13:19.000
Franck: Cảm ơn, Nick!

00:13:19.000 --> 00:13:26.000
Năm nay, chúng tôi có nhiều cải tiến trên tất cả các API của mình để xây dựng nội dung tương tác.

00:13:26.000 --> 00:13:33.000
Chúng ta có rất nhiều thứ để giải quyết, vì vậy hãy bắt đầu bữa tiệc này với một số cải tiến thú vị cho các biểu mẫu.

00:13:33.000 --> 00:13:46.000
macOS Ventura đi kèm với một ứng dụng Cài đặt Hệ thống hoàn toàn mới, có cấu trúc điều hướng được sắp xếp hợp lý, được xây dựng bằng cách sử dụng chế độ xem phân chia điều hướng và các ngăn xếp mà Nick vừa hướng dẫn chúng tôi.

00:13:46.000 --> 00:13:50.000
Nó cũng thể hiện phong cách giao diện mới mẻ và hiện đại.

00:13:50.000 --> 00:14:02.000
Giao diện cài đặt có nhiều điều khiển, vì vậy phong cách này được thiết kế đặc biệt để trình bày các biểu mẫu chứa nhiều điều khiển một cách nhất quán và được tổ chức tốt.

00:14:02.000 --> 00:14:06.000
Chúng tôi cũng đã áp dụng thiết kế mới này trong ứng dụng Party Planner của chúng tôi.

00:14:06.000 --> 00:14:08.000
Hãy cùng xem nào.

00:14:08.000 --> 00:14:18.000
Chế độ xem Chi tiết Sự kiện của chúng tôi cũng có nhiều loại điều khiển khác nhau được nhóm thành các phần, phục vụ mục đích tương tự như giao diện cài đặt.

00:14:18.000 --> 00:14:25.000
Điều này làm cho nó trở thành một ứng cử viên tuyệt vời để áp dụng phong cách hình ảnh mới từ Cài đặt Hệ thống.

00:14:25.000 --> 00:14:31.000
Bạn có thể kích hoạt thiết kế này bằng cách sử dụng formStyle được nhóm mới trên macOS.

00:14:31.000 --> 00:14:42.000
Và nhờ tính linh hoạt của các API khai báo của SwiftUI, nội dung và các điều khiển trong biểu mẫu sẽ tự động thích ứng với phong cách mới.

00:14:42.000 --> 00:14:54.000
Ví dụ, các phần sẽ nhóm nội dung của chúng một cách trực quan bên dưới tiêu đề của chúng; và các điều khiển sẽ liên tục căn chỉnh nhãn và giá trị của chúng với các cạnh đầu và cuối.

00:14:54.000 --> 00:15:05.000
Một số điều khiển cũng có thể điều chỉnh giao diện trực quan của chúng, chẳng hạn như cách chuyển đổi hiển thị dưới dạng công tắc nhỏ theo sau để bố cục và căn chỉnh nhất quán.

00:15:05.000 --> 00:15:18.000
Và vì bản thân hình thức cung cấp rất nhiều cấu trúc trực quan, các điều khiển khác thích ứng với bối cảnh này với giao diện trực quan nhẹ hơn và tiết lộ các hỗ trợ điều khiển nổi bật hơn khi chuyển đổi.

00:15:18.000 --> 00:15:32.000
SwiftUI giúp dễ dàng căn chỉnh các loại nội dung khác theo phong cách mới này, sử dụng chế độ xem LabeledContent mới, có thể được sử dụng để xây dựng các điều khiển mới hoặc thậm chí chỉ hiển thị một số thông tin chỉ đọc.

00:15:32.000 --> 00:15:43.000
Trong trường hợp này, chúng tôi đang hiển thị một số văn bản cho vị trí của sự kiện và SwiftUI tự động điều chỉnh kiểu dáng và cho phép lựa chọn văn bản đó.

00:15:43.000 --> 00:15:54.000
Nhưng LabeledContent cũng có thể bao bọc bất kỳ loại chế độ xem nào, chẳng hạn như nếu chúng tôi muốn sử dụng chế độ xem tùy chỉnh để hiển thị nhiều địa chỉ hơn.

00:15:54.000 --> 00:16:00.000
SwiftUI giờ đây cũng thông minh hơn trong việc áp dụng kiểu dáng mặc định cho văn bản trong các trường hợp khác.

00:16:00.000 --> 00:16:10.000
Nó sẽ định dạng theo thứ bậc nhiều đoạn văn bản trong nhãn của điều khiển để tạo thành tiêu đề và phụ đề.

00:16:10.000 --> 00:16:19.000
Thiết kế biểu mẫu mới này trông rất tuyệt trên macOS, nhưng chúng tôi cũng có thể chia sẻ rất nhiều mã tương tự này với phiên bản iOS của ứng dụng của chúng tôi.

00:16:19.000 --> 00:16:37.000
Bạn cũng sẽ nhận thấy một số thiết kế được cải tiến trên iOS, như những bộ chọn menu bật lên này với phong cách trực quan lấy cảm hứng từ macOS, nhưng với các tương tác và giao diện của chúng được tối ưu hóa để phù hợp đẹp mắt trong giao diện dựa trên cảm ứng.

00:16:37.000 --> 00:16:53.000
Tất nhiên, cùng một mã hoạt động tốt trên màn hình lớn hơn của iPad và cùng với Mac, bạn có thể thấy mô hình khai báo của SwiftUI giúp bạn chia sẻ mã như thế nào khi xây dựng giao diện được chia sẻ, giúp bạn đưa bữa tiệc đến mọi nền tảng.

00:16:53.000 --> 00:16:59.000
Tất nhiên, chúng tôi cũng đang cải thiện các biện pháp kiểm soát ngoài các kiểu hình thức.

00:16:59.000 --> 00:17:06.000
Vì vậy, hãy tham quan xung quanh một số tính năng điều khiển mới khác mà chúng tôi đang sử dụng trong ứng dụng Party Planner.

00:17:06.000 --> 00:17:10.000
Hãy bắt đầu với trang Hoạt động Mới trong ứng dụng iOS của chúng tôi.

00:17:10.000 --> 00:17:24.000
Các trường văn bản có thể được cấu hình để mở rộng theo chiều dọc bằng cách sử dụng tham số trục mới, tăng chiều cao của chúng để phù hợp với văn bản và, nếu được chỉ định, giới hạn chiều cao của chúng đến giới hạn dòng.

00:17:24.000 --> 00:17:41.000
Nhưng công cụ sửa đổi lineLimit hiện cũng hỗ trợ các hành vi nâng cao hơn, như đặt trước một lượng không gian tối thiểu và mở rộng khi nhiều nội dung được thêm vào, sau đó cuộn khi nội dung vượt quá giới hạn trên.

00:17:41.000 --> 00:17:55.000
Bên dưới các trường văn bản của chúng tôi, chúng tôi cũng thấy một ví dụ về điều khiển MultiDatePicker mới, hỗ trợ lựa chọn ngày không liền kề để giúp chúng tôi truyền bá các hoạt động tiệc tùng trong suốt cả tuần.

00:17:55.000 --> 00:18:01.000
Bây giờ tại thời điểm này, có lẽ bạn đang có một số cảm xúc lẫn lộn về chủ đề bữa tiệc cho buổi nói chuyện này.

00:18:01.000 --> 00:18:08.000
Tin tuyệt vời là bây giờ bạn có thể thể hiện những cảm xúc đó trong SwiftUI, sử dụng các điều khiển trạng thái hỗn hợp!

00:18:08.000 --> 00:18:16.000
Ở đây chúng tôi có một nhóm các nút chuyển đổi có thể được thu gọn thành một chuyển đổi tổng hợp duy nhất.

00:18:16.000 --> 00:18:30.000
Mỗi nút chuyển đổi bên trong lấy một ràng buộc duy nhất trong khi Toggle tổng hợp nhận một tập hợp tất cả các ràng buộc hiển thị trạng thái hỗn hợp nếu tất cả các giá trị của chúng không khớp.

00:18:30.000 --> 00:18:32.000
Pickers hoạt động theo cùng một cách.

00:18:32.000 --> 00:18:38.000
Bộ chọn chủ đề trang trí này thay đổi giá trị của nó để phản ánh trang trí hiện đang được chọn.

00:18:38.000 --> 00:18:47.000
Nhưng nếu chúng ta chọn nhiều đồ trang trí, nó sẽ hiển thị các chủ đề cho tất cả chúng bằng cách sử dụng chỉ báo trạng thái hỗn hợp.

00:18:47.000 --> 00:18:51.000
Bây giờ, hãy quay lại ứng dụng iOS của chúng ta.

00:18:51.000 --> 00:18:57.000
Chúng tôi có một vài nút chuyển đổi kiểu nút để chọn thẻ bắt đầu bằng # sự kiện.

00:18:57.000 --> 00:19:04.000
Chúng tôi có thể giúp phân biệt từng nút chuyển đổi bằng cách chỉ cần thêm một kiểu nút viền.

00:19:04.000 --> 00:19:15.000
Các kiểu nút như thế này bây giờ sẽ áp dụng cho bất kỳ điều khiển nào hỗ trợ giao diện giống như nút, bao gồm nút chuyển đổi, menu và bộ chọn.

00:19:15.000 --> 00:19:20.000
Chuyển sang bước, bây giờ bạn có thể cung cấp một định dạng cho giá trị của nó.

00:19:20.000 --> 00:19:27.000
Trên macOS, một bước được định dạng sẽ hiển thị giá trị của nó trong một trường có thể chỉnh sửa.

00:19:27.000 --> 00:19:33.000
Và các bước hiện cũng có sẵn trên watchOS.

00:19:33.000 --> 00:19:44.000
Apple Watch có một trong những tính năng mới yêu thích của tôi: Hành động nhanh về khả năng truy cập, một cách thay thế để thực hiện các hành động bằng cách nắm chặt tay bạn.

00:19:44.000 --> 00:19:59.000
Hành động nhanh có thể được xác định giống như bất kỳ hành động giao diện người dùng nào khác, sử dụng một nút, cho phép chúng tôi chia sẻ cùng một mã cho cả các nút hiển thị và Hành động nhanh tương đương của chúng.

00:19:59.000 --> 00:20:08.000
Được rồi, chúng tôi chỉ đề cập đến rất nhiều điều khiển khác nhau, nhưng tất nhiên, điều khiển không phải là nguồn tương tác duy nhất.

00:20:08.000 --> 00:20:14.000
Vì vậy, chúng ta hãy xem có gì mới với các thùng chứa tương tác lớn hơn, như bảng và danh sách.

00:20:14.000 --> 00:20:20.000
Tôi rất vui được chia sẻ rằng các bảng hiện được hỗ trợ trên iPadOS.

00:20:20.000 --> 00:20:32.000
Như bạn mong đợi, các bảng trên iPadOS được xác định bằng cách sử dụng cùng một API Bảng mà chúng tôi đã giới thiệu năm ngoái cho macOS, giúp dễ dàng chia sẻ mã giữa các nền tảng.

00:20:32.000 --> 00:20:45.000
Bảng Lời mời của chúng tôi hiển thị ba cột cho tên, thành phố và trạng thái lời mời của mỗi người, tận dụng màn hình lớn của iPad.

00:20:45.000 --> 00:20:58.000
Nhưng bảng này cũng sẽ hiển thị một cách thích hợp trong các lớp kích thước nhỏ gọn, bao gồm cả trên iPhone, chỉ hiển thị cột chính trong không gian màn hình nhỏ hơn.

00:20:58.000 --> 00:21:02.000
Hãy chuyển đổi ngữ cảnh và kiểm tra bảng này trên macOS.

00:21:02.000 --> 00:21:03.000
Nó trông thật tuyệt!

00:21:03.000 --> 00:21:11.000
Nhưng nói về ngữ cảnh, tôi muốn thêm một số menu ngữ cảnh để thực hiện các hành động phổ biến trong bảng.

00:21:11.000 --> 00:21:17.000
Đây là một công việc cho công cụ sửa đổi contentMenu dựa trên lựa chọn mới.

00:21:17.000 --> 00:21:26.000
Công cụ sửa đổi lấy một loại lựa chọn và sẽ được bật trong bất kỳ bảng hoặc danh sách tương thích nào hỗ trợ lựa chọn.

00:21:26.000 --> 00:21:46.000
Trong trình tạo menu, bạn được cung cấp một bộ sưu tập các lựa chọn hiện tại, cho phép bạn xây dựng các menu ngữ cảnh nâng cao có thể hoạt động trên một hàng được chọn duy nhất, nhiều hàng đã chọn hoặc thậm chí không có hàng nào được chọn, chẳng hạn như khi nhấp vào khu vực trống của bảng.

00:21:46.000 --> 00:21:52.000
Các menu ngữ cảnh tiết lộ các hành động trực tiếp trong bảng, điều này rất tốt cho tốc độ và hiệu quả.

00:21:52.000 --> 00:21:57.000
Nhưng tôi cũng muốn làm cho những hành động này dễ khám phá hơn.

00:21:57.000 --> 00:22:12.000
Một cách tuyệt vời để cải thiện khả năng khám phá là hiển thị các hành động phổ biến dưới dạng các nút trên thanh công cụ và iPadOS có thiết kế thanh công cụ mới và được cải tiến để giúp đạt được mức độ đánh bóng cao hơn.

00:22:12.000 --> 00:22:28.000
Thanh công cụ iPad hiện có thể hỗ trợ tùy chỉnh và sắp xếp lại người dùng, mà ứng dụng của bạn có thể triển khai bằng cách cung cấp số nhận dạng rõ ràng cho từng mục trên thanh công cụ, cùng một API có sẵn trên macOS.

00:22:28.000 --> 00:22:37.000
Những số nhận dạng này cho phép SwiftUI tự động lưu và khôi phục cấu hình thanh công cụ tùy chỉnh trên các lần khởi chạy ứng dụng.

00:22:37.000 --> 00:22:44.000
Lưu ý rằng trên iPadOS, không phải tất cả các mục trên thanh công cụ đều cho phép tùy chỉnh.

00:22:44.000 --> 00:22:58.000
Các hành động có thể tùy chỉnh được cấu hình bằng cách sử dụng vị trí mục thanh công cụ secondaryAction mới, hiển thị ở giữa thanh công cụ theo mặc định hoặc trong menu tràn trong các lớp kích thước nhỏ gọn.

00:22:58.000 --> 00:22:59.000
Được rồi!

00:22:59.000 --> 00:23:06.000
Từ ngữ đang lan truyền khắp nơi và có vẻ như số lượng người tham dự đang tăng theo cấp số nhân.

00:23:06.000 --> 00:23:12.000
Hãy giúp bảng của chúng tôi quản lý tỷ lệ bằng cách thêm hỗ trợ cho tìm kiếm.

00:23:12.000 --> 00:23:17.000
SwiftUI đã hỗ trợ tìm kiếm cơ bản với công cụ sửa đổi có thể tìm kiếm.

00:23:17.000 --> 00:23:28.000
Và mới trong năm nay, các trường tìm kiếm có thể hỗ trợ các đầu vào và đề xuất được mã hóa để giúp xây dựng các truy vấn tìm kiếm có cấu trúc hơn.

00:23:28.000 --> 00:23:43.000
Để giúp lọc kết quả, SwiftUI hiện hỗ trợ phạm vi tìm kiếm, xuất hiện trong thanh phạm vi bên dưới thanh công cụ trên macOS và dưới dạng điều khiển được phân đoạn trong thanh điều hướng trên iOS.

00:23:43.000 --> 00:23:48.000
Chúng tôi chỉ làm xước bề mặt của những gì có thể với SwiftUI trên iPad trong năm nay.

00:23:48.000 --> 00:23:52.000
Kiểm tra loạt bài "SwiftUI trên iPad" và tìm hiểu thêm.

00:23:52.000 --> 00:24:00.000
Bây giờ chúng ta đã kiểm soát nhiều hơn một chút đối với các chi tiết sự kiện và hậu cần, hãy chia sẻ tin tức và khiến mọi người phấn khích hơn nữa.

00:24:00.000 --> 00:24:09.000
Chia sẻ nội dung với những người khác, cũng như chia sẻ dữ liệu giữa các ứng dụng là những phần thiết yếu của nhiều ứng dụng.

00:24:09.000 --> 00:24:16.000
Tận dụng các tính năng này giúp ứng dụng của bạn được tích hợp nhiều hơn vào quy trình làm việc của những người sử dụng chúng.

00:24:16.000 --> 00:24:22.000
Năm nay chúng tôi có một vài lĩnh vực thú vị để làm cho điều đó trở nên dễ dàng hơn.

00:24:22.000 --> 00:24:31.000
Hãy bắt đầu với PhotosPicker, một API đa nền tảng và bảo vệ quyền riêng tư mới để chọn ảnh và video.

00:24:31.000 --> 00:24:43.000
Vì ảnh là một phần thiết yếu của bất kỳ bữa tiệc nào, tôi đã thêm một tính năng vào ứng dụng Party Planner để thêm hiệu ứng sinh nhật vui nhộn vào ảnh đã được chụp.

00:24:43.000 --> 00:24:57.000
Chế độ xem PhotosPicker mới có thể được đặt ở bất kỳ đâu trong ứng dụng của bạn và khi kích hoạt, sẽ trình bày giao diện người dùng chọn ảnh tiêu chuẩn để chọn ảnh hoặc video từ thư viện của người dùng.

00:24:57.000 --> 00:25:07.000
PhotosPicker liên kết với một mục đã chọn, cung cấp quyền truy cập vào dữ liệu ảnh và video thực tế.

00:25:07.000 --> 00:25:18.000
Nó cũng có các tùy chọn cấu hình phong phú bổ sung, chẳng hạn như lọc loại nội dung, mã hóa ảnh ưa thích và hơn thế nữa.

00:25:18.000 --> 00:25:22.000
Đây là chiếc bánh cupcake ăn ảnh nhất mà tôi từng thấy.

00:25:22.000 --> 00:25:25.000
Nhưng một chiếc bánh cupcake là không đủ.

00:25:25.000 --> 00:25:29.000
Hãy áp dụng hiệu ứng đặc biệt khi chúng ta tiếp tục.

00:25:29.000 --> 00:25:36.000
Bây giờ chúng tôi đã có ảnh tùy chỉnh của mình, chúng tôi đã sẵn sàng chia sẻ nó với ShareLink API mới.

00:25:36.000 --> 00:25:43.000
Mỗi nền tảng có một giao diện tiêu chuẩn để cho phép mọi người chia sẻ nội dung từ ứng dụng của bạn.

00:25:43.000 --> 00:25:50.000
Với watchOS 9, giờ đây bạn cũng có thể trình bày bảng chia sẻ từ bên trong các ứng dụng đồng hồ của mình.

00:25:50.000 --> 00:25:57.000
Chế độ xem ShareLink mới cho phép trình bày bảng chia sẻ hệ thống đó từ bên trong ứng dụng của bạn.

00:25:57.000 --> 00:26:10.000
Bạn có thể chỉ cần cung cấp cho nó nội dung cần chia sẻ và bản xem trước để sử dụng trong bảng chia sẻ và nó sẽ tự động tạo nút biểu tượng chia sẻ tiêu chuẩn.

00:26:10.000 --> 00:26:15.000
Khi nhấn, nó trình bày bảng chia sẻ tiêu chuẩn để gửi nội dung.

00:26:15.000 --> 00:26:23.000
Chia sẻ các liên kết thích ứng với ngữ cảnh mà chúng được áp dụng, chẳng hạn như trong các menu ngữ cảnh và trên các nền tảng.

00:26:23.000 --> 00:26:37.000
PhotosPicker, ShareLink, và nhiều hơn nữa tất cả đều tận dụng giao thức Transferable mới, một cách khai báo Swift đầu tiên để mô tả cách các loại được chuyển qua các ứng dụng.

00:26:37.000 --> 00:26:50.000
Các loại có thể chuyển đổi được sử dụng để cung cấp năng lượng cho các tính năng SwiftUI như kéo và thả, giúp dễ dàng thả hình ảnh từ các ứng dụng khác vào thư viện Party Planner.

00:26:50.000 --> 00:26:58.000
Điều này sử dụng dropDestination API mới, chấp nhận một loại tải trọng, trong trường hợp này, chỉ là một hình ảnh.

00:26:58.000 --> 00:27:07.000
Khối hoàn thành cung cấp một bộ sưu tập các hình ảnh nhận được cùng với vị trí thả.

00:27:07.000 --> 00:27:14.000
Nhiều loại tiêu chuẩn, chẳng hạn như chuỗi và hình ảnh, đã phù hợp với Transferable.

00:27:14.000 --> 00:27:23.000
Vì vậy, không có nhiều công sức để làm cho quả bóng lăn trong ứng dụng của chúng tôi, nhưng bạn có thể dễ dàng đưa mọi thứ đi xa hơn và triển khai Chuyển nhượng trong các loại tùy chỉnh của riêng bạn.

00:27:23.000 --> 00:27:34.000
Khi đến lúc làm điều đó, sự phù hợp của bạn khai báo các biểu diễn phù hợp với loại của bạn, chẳng hạn như sử dụng hỗ trợ Codable và loại nội dung tùy chỉnh.

00:27:34.000 --> 00:27:44.000
Để tìm hiểu thêm về Transferable, các đại diện khác, và các mẹo và thủ thuật nâng cao, hãy xem bài nói chuyện "Gặp gỡ Transferable".

00:27:44.000 --> 00:27:49.000
Trong khi chúng tôi đang chuẩn bị bánh nướng nhỏ, Nick đã bố trí tất cả các nguồn cung cấp.

00:27:49.000 --> 00:27:51.000
Nick, ở đó thế nào rồi?

00:27:51.000 --> 00:27:53.000
Nick: Gần xong rồi!

00:27:53.000 --> 00:27:59.000
Tôi đang sắp xếp những chiếc sừng tiệc này theo cách bố trí hoàn toàn tùy chỉnh, nhưng tôi sẽ cần thêm một chút thời gian.

00:27:59.000 --> 00:28:02.000
Hãy nói về đồ họa trước.

00:28:02.000 --> 00:28:08.000
ShapeStyle có các API mới để đạt được các hiệu ứng đồ họa phong phú trong năm nay.

00:28:08.000 --> 00:28:14.000
Chúng tôi sẽ sử dụng các API này để cung cấp cho thẻ khách mời này một số bữa tiệc nổi bật!

00:28:14.000 --> 00:28:21.000
Màu sắc có một thuộc tính gradient mới bổ sung một gradient tinh tế có nguồn gốc từ màu sắc.

00:28:21.000 --> 00:28:25.000
Những thứ này trông tuyệt vời với màu sắc hệ thống.

00:28:25.000 --> 00:28:30.000
ShapeStyle cũng có một công cụ sửa đổi bóng mới.

00:28:30.000 --> 00:28:36.000
Thêm nó vào kiểu tiền cảnh màu trắng thêm bóng cho văn bản và biểu tượng.

00:28:36.000 --> 00:28:39.000
Và chi tiết của cái bóng này thật đáng chú ý.

00:28:39.000 --> 00:28:47.000
Bóng đổ đã được áp dụng cho mọi yếu tố của biểu tượng Lịch.

00:28:47.000 --> 00:28:57.000
Với toàn bộ thế giới của Biểu tượng SF và các tiện ích mở rộng SwiftUI ShapeStyle mới, bạn có thể tạo một số biểu tượng hoàn toàn tuyệt đẹp.

00:28:57.000 --> 00:29:03.000
Bây giờ, đã đến lúc mang lưới Biểu tượng SF đó đến bữa tiệc.

00:29:03.000 --> 00:29:10.000
Chúng tôi sẽ lặp lại nhanh chóng về nó bằng cách sử dụng SwiftUI Previews, có một số cải tiến tuyệt vời trong năm nay.

00:29:10.000 --> 00:29:17.000
Xem trước luôn là một cách thuận tiện để xem chế độ xem trong nhiều cấu hình cùng một lúc.

00:29:17.000 --> 00:29:23.000
Với Xcode 14, chúng tôi đang làm điều này dễ dàng hơn bao giờ hết với các biến thể xem trước.

00:29:23.000 --> 00:29:34.000
Những điều này cho phép bạn phát triển chế độ xem của mình trong nhiều lần xuất hiện, kích thước loại hoặc hướng cùng một lúc mà không cần viết bất kỳ mã cấu hình nào.

00:29:34.000 --> 00:29:41.000
Chúng ta có thể sử dụng cùng một gradient đó một lần nữa, hoặc chúng ta có thể tạo kiểu cho nó như một gradient hình elip để tạo cho những hình ảnh này một ánh sáng dịu nhẹ.

00:29:41.000 --> 00:29:46.000
Và xem trước nó trong diện mạo tối và sáng.

00:29:46.000 --> 00:29:50.000
Bản xem trước hiện chạy ở chế độ trực tiếp theo mặc định.

00:29:50.000 --> 00:29:57.000
Đó không thể là một bữa tiệc sinh nhật tuyệt vời nếu không có một chút khiêu vũ, vì vậy hãy bắt những Biểu tượng SF này nhảy múa.

00:29:57.000 --> 00:30:01.000
♪ Nhạc khiêu vũ điện tử ♪

00:30:01.000 --> 00:30:12.000
♪

00:30:12.000 --> 00:30:16.000
Những biểu tượng vui vẻ đó thể hiện điều gì đó sâu sắc.

00:30:16.000 --> 00:30:22.000
SwiftUI đã đưa hình ảnh động văn bản và hình ảnh lên một tầm cao mới.

00:30:22.000 --> 00:30:26.000
Hãy xem lại hoạt ảnh văn bản đó trong chuyển động chậm.

00:30:26.000 --> 00:30:32.000
Văn bản bây giờ có thể được hoạt hình đẹp mắt giữa trọng lượng, kiểu dáng và thậm chí cả bố cục.

00:30:32.000 --> 00:30:40.000
Và phần hay nhất: điều này tận dụng lợi thế của các API hoạt hình tương tự được sử dụng trong suốt phần còn lại của SwiftUI.

00:30:40.000 --> 00:30:49.000
Hãy kết thúc bằng cách nói về phần yêu thích tuyệt đối của tôi về lập trình giao diện người dùng, hình học ứng dụng - hay như chúng ta gọi nó, Bố cục.

00:30:49.000 --> 00:30:53.000
SwiftUI đã thêm những cách mới để bố trí các lượt xem.

00:30:53.000 --> 00:30:59.000
Lưới là một chế độ xem vùng chứa mới sắp xếp các chế độ xem trong lưới hai chiều.

00:30:59.000 --> 00:31:07.000
Lưới sẽ đo các chế độ xem phụ của nó ở phía trước để cho phép các ô trải dài trên nhiều cột và cho phép căn chỉnh tự động trên các hàng và cột.

00:31:07.000 --> 00:31:14.000
Trên thực tế, bạn đã xem qua lưới điện trước đó.

00:31:14.000 --> 00:31:21.000
Sử dụng Grid, GridRow và công cụ sửa đổi gridCellColumns, bạn có thể xây dựng một lưới từng phần.

00:31:21.000 --> 00:31:27.000
Tất nhiên, giống như tất cả các bố cục trong SwiftUI, chúng được xây dựng để bố cục.

00:31:27.000 --> 00:31:38.000
Chúng tôi đã giới thiệu mô hình bố cục của SwiftUI với bản phát hành đầu tiên, cung cấp một hộp công cụ gồm các loại bố cục nguyên thủy để đạt được một số bố cục phổ biến nhất.

00:31:38.000 --> 00:31:56.000
Hầu hết thời gian, bạn có thể hoàn thành công việc với các loại bố cục nguyên thủy này, nhưng đôi khi, đôi khi, bạn muốn mã bố cục bắt buộc đó: kích thước, minX, frame.origin.x trừ frame.midX chia cho 2 cộng 3.

00:31:56.000 --> 00:32:03.000
Đó là những lúc như thế này khi bạn nên tiếp cận với giao thức Bố cục mới.

00:32:03.000 --> 00:32:15.000
Với nó, bạn có toàn bộ sức mạnh và tính linh hoạt mà chúng tôi đã sử dụng để triển khai các ngăn xếp và lưới của SwiftUI để xây dựng các trừu tượng bố cục hạng nhất của riêng bạn.

00:32:15.000 --> 00:32:21.000
Sử dụng Bố cục, tôi đã xây dựng bố cục biểu đồ chỗ ngồi đặt làm riêng này cho các vị khách trong bữa tiệc sinh nhật của chúng tôi.

00:32:21.000 --> 00:32:25.000
Khách dự tiệc của chúng ta nên ngồi thành hàng hay nhóm?

00:32:25.000 --> 00:32:29.000
Với sức mạnh của Bố cục, chúng ta không cần phải lựa chọn.

00:32:29.000 --> 00:32:39.000
Sử dụng giao thức Bố cục, bạn có thể xây dựng tất cả các loại bố cục hiệu quả, phù hợp với nhu cầu cụ thể của hệ thống phân cấp chế độ xem của bạn.

00:32:39.000 --> 00:32:49.000
Để tìm hiểu cách áp dụng Bố cục và về các kỹ thuật bố cục mới, tuyệt vời khác, hãy xem phiên "Sáp bố cục tùy chỉnh với SwiftUI".

00:32:49.000 --> 00:32:53.000
Tôi đã chuẩn bị một hương vị của Bố cục đặc biệt cho bạn.

00:32:53.000 --> 00:33:01.000
Sử dụng loại AnyLayout mới, tôi có thể chuyển đổi giữa bố cục Grid và bố cục phân tán tùy chỉnh mà tôi đã viết.

00:33:01.000 --> 00:33:08.000
Khi phiên họp này sắp kết thúc, vẫn còn một điều bất ngờ: Bạn được mời!

00:33:08.000 --> 00:33:10.000
♪

00:33:10.000 --> 00:33:17.000
Bạn được mời tổ chức sinh nhật SwiftUI và tất cả các API mới với chúng tôi trong tuần này.

00:33:17.000 --> 00:33:25.000
Còn rất nhiều chi tiết để khám phá trong các API mà chúng tôi đã đề cập và thậm chí nhiều API hơn mà chúng tôi không có thời gian để đưa vào.

00:33:25.000 --> 00:33:29.000
Tận hưởng bữa tiệc, và tận hưởng WWDC 2022.

00:33:29.000 --> 00:33:36.000
Và chúng ta sẽ thưởng thức một ít bánh.

00:33:36.000 --> 00:33:38.000
♪ nhạc cụ hip hop ♪

00:33:38.000 --> 23:59:59.000
♪

