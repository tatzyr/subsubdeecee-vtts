WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Nhạc hip-hop nhạc cụ êm dịu ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:11.000
Xin chào, tôi là Donghao.

00:00:11.000 --> 00:00:16.000
Trong phiên này, chúng ta sẽ tìm hiểu thêm về cách xây dựng trực quan hóa dữ liệu tuyệt vời với Biểu đồ Swift.

00:00:16.000 --> 00:00:21.000
Nói cách khác, chúng tôi sẽ nâng cao tiêu chuẩn về những gì bạn có thể làm với các biểu đồ trong ứng dụng của mình.

00:00:21.000 --> 00:00:26.000
Một trực quan hóa dữ liệu tuyệt vời làm cho ứng dụng của bạn nhiều thông tin hơn và hấp dẫn hơn.

00:00:26.000 --> 00:00:31.000
Để xây dựng một biểu đồ tuyệt vời trong các ứng dụng của chúng tôi, có rất nhiều điều cần xem xét.

00:00:31.000 --> 00:00:38.000
Tất nhiên, chúng tôi muốn các biểu đồ của mình truyền đạt trung thực dữ liệu cơ bản và mọi người đều có thể truy cập được.

00:00:38.000 --> 00:00:41.000
Nhưng các biểu đồ trong một ứng dụng không tồn tại trong chân không.

00:00:41.000 --> 00:00:43.000
Chúng là một phần của giao diện người dùng của ứng dụng.

00:00:43.000 --> 00:00:47.000
Chúng tôi phải hỗ trợ bản địa hóa và các tính năng hệ điều hành như Chế độ tối.

00:00:47.000 --> 00:00:57.000
Một biểu đồ phải có bố cục phù hợp phù hợp với phần còn lại của giao diện người dùng; nó sẽ hỗ trợ Loại động và kích thước màn hình thiết bị.

00:00:57.000 --> 00:01:04.000
Chúng tôi cũng sẽ muốn các biểu đồ hoạt động trên tất cả các nền tảng và có hình ảnh động tuyệt vời để có giao diện tốt nhất.

00:01:04.000 --> 00:01:15.000
Swift Charts tự động xử lý rất nhiều tính năng cơ bản này cho bạn, vì vậy bạn có thể tập trung nhiều hơn vào việc xây dựng các biểu đồ tốt nhất để truyền đạt dữ liệu độc đáo của mình và giúp mọi người có thể truy cập được.

00:01:15.000 --> 00:01:21.000
Swift Charts đạt được điều này bằng cách cung cấp cho bạn một cú pháp khai báo giống như SwiftUI.

00:01:21.000 --> 00:01:30.000
Bạn chỉ định những gì bạn muốn trong một biểu đồ với một lượng mã nhỏ và Swift Charts sẽ tự động tạo ra một biểu đồ tuyệt vời ngay lập tức.

00:01:30.000 --> 00:01:37.000
Swift Charts cũng cung cấp một bộ tùy chọn tùy chỉnh phong phú, vì vậy bạn có thể tạo kiểu biểu đồ để phù hợp với ứng dụng độc đáo của mình.

00:01:37.000 --> 00:01:41.000
Phiên này là để giúp bạn hiểu sâu hơn về Biểu đồ Swift.

00:01:41.000 --> 00:01:48.000
Chúng ta sẽ bắt đầu bằng cách bao gồm các khối xây dựng cơ bản của cú pháp khai báo: dấu và thành phần của dấu.

00:01:48.000 --> 00:01:51.000
Đây là một số ví dụ mà chúng tôi sử dụng biểu đồ trong các sản phẩm của Apple.

00:01:51.000 --> 00:01:56.000
Như bạn có thể thấy, có rất nhiều loại dữ liệu, loại biểu đồ và kiểu dáng.

00:01:56.000 --> 00:02:05.000
Thay vì cung cấp một thành phần dựng sẵn cho từng loại biểu đồ, Swift Charts được xây dựng dựa trên ý tưởng tạo biểu đồ theo bố cục.

00:02:05.000 --> 00:02:13.000
Nó cung cấp một số lượng nhỏ các khối xây dựng cơ bản bằng cách kết hợp chúng theo nhiều cách khác nhau, bạn có thể tạo ra một loạt các biểu đồ.

00:02:13.000 --> 00:02:14.000
Để tôi chỉ cho bạn cách nó hoạt động.

00:02:14.000 --> 00:02:17.000
Để làm điều đó, tôi sẽ cần một ví dụ.

00:02:17.000 --> 00:02:24.000
Tất cả các đồng đội của tôi đều thích bánh kếp, vì vậy chúng tôi đang có một ứng dụng để theo dõi các đơn đặt hàng cho một xe bán thực phẩm bán nhiều loại bánh kếp khác nhau.

00:02:24.000 --> 00:02:30.000
Đây là biểu đồ cho thấy số lượng bánh kếp được giao trong 30 ngày qua, được chia nhỏ theo kiểu dáng.

00:02:30.000 --> 00:02:33.000
Đây được biết đến rộng rãi như một biểu đồ thanh.

00:02:33.000 --> 00:02:38.000
Trong Biểu đồ Swift, chúng tôi coi mỗi trong số sáu hình chữ nhật màu xanh lam là một dấu hiệu.

00:02:38.000 --> 00:02:43.000
Dấu hiệu là một yếu tố đồ họa đại diện cho dữ liệu.

00:02:43.000 --> 00:02:48.000
Đây là một dấu thanh hiển thị số lượng cachapas được bán trong 30 ngày qua.

00:02:48.000 --> 00:02:56.000
Trong biểu đồ này, chúng tôi có sáu dấu thanh, mỗi dấu hiển thị kiểu bánh kếp và số bán hàng tương ứng.

00:02:56.000 --> 00:02:59.000
Hãy xem cái này được viết bằng mã như thế nào.

00:02:59.000 --> 00:03:06.000
Ở đây chúng tôi có chế độ xem SwiftUI bao gồm tiêu đề mô tả như "Phong cách được bán nhiều nhất, Cachapa" và biểu đồ trống.

00:03:06.000 --> 00:03:11.000
Loại biểu đồ ở đây là chế độ xem cấp cao nhất xác định một biểu đồ duy nhất.

00:03:11.000 --> 00:03:16.000
Bạn có thể thêm biểu đồ trong ứng dụng SwiftUI của mình giống như thêm bất kỳ chế độ xem nào khác.

00:03:16.000 --> 00:03:19.000
Trong phần còn lại của cuộc nói chuyện, chúng ta sẽ tập trung vào phần biểu đồ.

00:03:19.000 --> 00:03:22.000
Bạn có thể thêm dấu vào biểu đồ.

00:03:22.000 --> 00:03:26.000
Ở đây chúng tôi có một BarMark duy nhất hiển thị cachapa và số lượng bán hàng của nó.

00:03:26.000 --> 00:03:29.000
Điều này tạo ra một biểu đồ với một dấu thanh duy nhất.

00:03:29.000 --> 00:03:36.000
Như được hiển thị trong ảnh chụp màn hình, biểu đồ phù hợp với phần còn lại của giao diện người dùng và có phong cách mặc định tuyệt vời.

00:03:36.000 --> 00:03:40.000
Ví dụ, các số được làm tròn độc đáo trong trục X.

00:03:40.000 --> 00:03:45.000
Nếu bạn thêm một dấu thanh khác với tên và doanh số khác, bạn sẽ nhận được một thanh thứ hai.

00:03:45.000 --> 00:03:48.000
Bạn có thể lặp lại điều này để thêm nhiều thanh hơn.

00:03:48.000 --> 00:03:51.000
Trong một ứng dụng thực tế, chúng tôi có thể sẽ tạo ra những dấu hiệu này theo chương trình.

00:03:51.000 --> 00:04:00.000
Bạn có thể làm như vậy bằng cách cung cấp một mảng các cấu trúc hoặc bộ cho biểu đồ và sử dụng ForEach để tạo các dấu thanh với các giá trị từ mỗi phần tử.

00:04:00.000 --> 00:04:07.000
Nếu ForEach là nội dung duy nhất trong biểu đồ, như trong trường hợp này, bạn cũng có thể đưa dữ liệu trực tiếp vào biểu đồ.

00:04:07.000 --> 00:04:10.000
Nhiều công cụ sửa đổi SwiftUI có sẵn cho các nhãn hiệu.

00:04:10.000 --> 00:04:15.000
Ví dụ, bạn có thể đặt màu của các thanh bằng công cụ sửa đổi .foregroundStyle.

00:04:15.000 --> 00:04:21.000
Ở đây chúng tôi đang đặt nó thành một màu được đặt tên, có thể được tạo trong Xcode như một tài sản được đặt tên.

00:04:21.000 --> 00:04:25.000
Điều rất quan trọng là biểu đồ có thể truy cập được cho tất cả mọi người.

00:04:25.000 --> 00:04:32.000
Theo mặc định, biểu đồ sẽ được hiển thị cho người dùng VoiceOver với các yếu tố khả năng truy cập được tạo tự động.

00:04:32.000 --> 00:04:37.000
Bạn có thể tùy chỉnh những thứ này với công cụ sửa đổi .accessibilityLabel và .accessibilityValue.

00:04:37.000 --> 00:04:45.000
Ví dụ ở đây, chúng tôi đặt nhãn thành tên của chiếc bánh kếp và giá trị cho doanh số bán hàng với hậu tố "đã bán".

00:04:45.000 --> 00:04:50.000
Kết quả là, chúng tôi có được trải nghiệm tùy chỉnh cho người dùng VoiceOver.

00:04:50.000 --> 00:04:55.000
VoiceOver: Cachapa, 916 đã bán. Injera, 850 đã bán.

00:04:55.000 --> 00:04:59.000
Crêpe, 802 đã bán.

00:04:59.000 --> 00:05:03.000
Donghao: Ứng dụng của chúng tôi cũng theo dõi việc giao bánh kếp trong nhiều ngày.

00:05:03.000 --> 00:05:08.000
Ở đây, chúng tôi có một cái nhìn cho thấy số lượng bánh kếp được bán trong 30 ngày qua.

00:05:08.000 --> 00:05:12.000
Biểu đồ đưa ra một cái nhìn chi tiết về từng ngày riêng lẻ.

00:05:12.000 --> 00:05:14.000
Hãy xem cách tạo biểu đồ này.

00:05:14.000 --> 00:05:17.000
Ở đây, chúng tôi có một mảng dữ liệu với ngày và doanh số bán hàng.

00:05:17.000 --> 00:05:21.000
Ngày được biểu thị bằng giá trị Ngày vào đầu ngày.

00:05:21.000 --> 00:05:33.000
Chúng tôi trực quan hóa dữ liệu với các dấu thanh, trong đó x hiển thị ngày và tham số đơn vị ở đây có nghĩa là các giá trị Ngày đại diện cho thời lượng của một ngày dương lịch và y hiển thị doanh số trong ngày.

00:05:33.000 --> 00:05:38.000
Như bạn thấy ở bên phải, chúng tôi nhận được một biểu đồ thanh hiển thị doanh số bán hàng trong những ngày qua.

00:05:38.000 --> 00:05:41.000
Biểu đồ thanh không phải là cách duy nhất để hình dung dữ liệu này.

00:05:41.000 --> 00:05:43.000
Hãy thử một biểu đồ đường.

00:05:43.000 --> 00:05:48.000
Thay đổi duy nhất mà chúng tôi phải thực hiện là thay thế BarMark bằng LineMark.

00:05:48.000 --> 00:05:54.000
Với cú pháp khai báo, rất dễ dàng để chuyển đổi giữa các loại biểu đồ trong Biểu đồ Swift.

00:05:54.000 --> 00:05:57.000
Biểu đồ trước đó cho thấy tổng doanh số bán hàng theo thời gian.

00:05:57.000 --> 00:06:07.000
Nhưng dịch vụ xe tải thực phẩm đã hoạt động ở hai thành phố và chúng tôi rất muốn so sánh doanh số bán hàng giữa hai thành phố vào mỗi ngày trong tuần, để giúp chúng tôi quyết định đi đâu.

00:06:07.000 --> 00:06:11.000
Các dòng trong biểu đồ này cho thấy doanh số bán hàng từ Thứ Hai đến Chủ Nhật.

00:06:11.000 --> 00:06:13.000
Mỗi dòng đại diện cho một thành phố.

00:06:13.000 --> 00:06:16.000
Hãy xem cái này được xây dựng như thế nào.

00:06:16.000 --> 00:06:25.000
Bây giờ giả sử chúng ta có dữ liệu của hai thành phố được xác định ở đây với một mảng các bộ, mỗi bộ chứa tên thành phố và doanh số của các ngày trong tuần.

00:06:25.000 --> 00:06:32.000
Sau đó, chúng ta có thể bọc biểu đồ đường mà chúng ta đã có trước đó bằng một ForEach lặp lại dữ liệu chuỗi.

00:06:32.000 --> 00:06:39.000
Để phân biệt hai thành phố, chúng tôi sử dụng công cụ sửa đổi .foregroundStyle(by:) để tạo kiểu cho hai dòng theo tên thành phố.

00:06:39.000 --> 00:06:48.000
Như bạn có thể thấy, Biểu đồ Swift tự động chọn hai màu cho hai thành phố, tô màu các đường và sau đó thêm chú giải để chỉ ra ý nghĩa của mỗi màu.

00:06:48.000 --> 00:06:54.000
Các màu mặc định được chọn là màu hệ thống dễ phân biệt.

00:06:54.000 --> 00:07:01.000
Để làm cho biểu đồ dễ đọc hơn cho những người bị mù màu, chúng ta có thể thêm các biểu tượng vào các dòng để phân biệt chúng hơn nữa.

00:07:01.000 --> 00:07:06.000
Điều này có thể được thực hiện bằng cách thêm công cụ sửa đổi .symbol(by:) với thành phố làm dữ liệu.

00:07:06.000 --> 00:07:13.000
Cuối cùng, để làm cho các đường trông mượt mà hơn, chúng ta có thể sử dụng một đường cong làm phương pháp nội suy cho các đường.

00:07:13.000 --> 00:07:19.000
Ngay cả với biểu đồ đường hai chuỗi, chúng ta vẫn có thể quay lại vạch và xem nó trông như thế nào.

00:07:19.000 --> 00:07:27.000
Thay đổi loại đánh dấu thành BarMark và xóa các công cụ sửa đổi không liên quan đến các thanh, chúng tôi nhận được một biểu đồ thanh xếp chồng lên nhau.

00:07:27.000 --> 00:07:31.000
Các thanh được tự động xếp chồng lên nhau vì bây giờ chúng tôi có hai thanh cho mỗi tháng.

00:07:31.000 --> 00:07:39.000
Mặc dù biểu đồ thanh xếp chồng lên nhau rất phù hợp để hiển thị tổng giá trị bán hàng cho hai thành phố, nhưng nó không tốt lắm khi so sánh giữa hai thành phố.

00:07:39.000 --> 00:07:46.000
Để dễ so sánh hơn, chúng ta có thể biến nó thành biểu đồ thanh được nhóm lại với công cụ sửa đổi .position(by:).

00:07:46.000 --> 00:07:49.000
Cho đến nay, chúng tôi đã thấy các dấu thanh và dấu dòng.

00:07:49.000 --> 00:07:57.000
Biểu đồ Swift hỗ trợ một vài loại dấu khác bao gồm dấu điểm, dấu khu vực, dấu quy tắc và dấu hình chữ nhật.

00:07:57.000 --> 00:08:00.000
Bạn có thể kết hợp các dấu hiệu này để xây dựng các biểu đồ phức tạp hơn.

00:08:00.000 --> 00:08:03.000
Hãy xem một ví dụ.

00:08:03.000 --> 00:08:07.000
Hãy bắt đầu với một biểu đồ đường hiển thị doanh số trung bình hàng ngày cho mỗi tháng.

00:08:07.000 --> 00:08:15.000
Mặc dù mức trung bình rất hữu ích, chúng tôi cũng muốn xem doanh số hàng ngày tối thiểu và tối đa để có ý tưởng về các giá trị cực đoan hơn.

00:08:15.000 --> 00:08:18.000
Hãy bắt đầu bằng cách thêm những giá trị này vào dữ liệu.

00:08:18.000 --> 00:08:23.000
Chúng tôi giới thiệu tối thiểu hàng ngày và tối đa hàng ngày cho từng phần tử trong mảng dữ liệu.

00:08:23.000 --> 00:08:32.000
Sau đó, chúng ta có thể hình dung tối thiểu và tối đa bằng dấu diện tích, trong đó x đang hiển thị tháng và y bắt đầu ở mức tối thiểu hàng ngày và kết thúc ở mức tối đa hàng ngày.

00:08:32.000 --> 00:08:39.000
Bằng cách này, chúng tôi có một biểu đồ hiển thị các giá trị trung bình hàng ngày với một đường thẳng, và các giá trị tối thiểu và tối đa hàng ngày với diện tích xung quanh đường thẳng.

00:08:39.000 --> 00:08:43.000
Một đường cộng với khu vực không phải là cách duy nhất để hình dung loại dữ liệu này.

00:08:43.000 --> 00:08:47.000
Bạn có thể dễ dàng chuyển sang các loại nhãn hiệu khác để khám phá thêm các tùy chọn thiết kế.

00:08:47.000 --> 00:08:49.000
Ví dụ, ở đây chúng tôi đang sử dụng BarMark.

00:08:49.000 --> 00:08:54.000
Tuy nhiên, đường dây dường như không phù hợp lắm với các thanh.

00:08:54.000 --> 00:08:58.000
Hãy thay đổi dấu dòng thành Dấu chữ nhật, với chiều cao là hai điểm.

00:08:58.000 --> 00:09:05.000
Bằng cách này, dấu hình chữ nhật tạo ra các đường ngang bên trong các thanh hiển thị giá trị trung bình.

00:09:05.000 --> 00:09:08.000
Bạn cũng có thể điều chỉnh độ rộng của những dấu hiệu này.

00:09:08.000 --> 00:09:20.000
Ở đây, ví dụ, chúng tôi đang đặt chiều rộng với tỷ lệ .6 Điều này có nghĩa là chiều rộng của các thanh và hình chữ nhật sẽ bằng 60 phần trăm chiều rộng của cả tháng, như bạn có thể thấy trong ảnh chụp màn hình.

00:09:20.000 --> 00:09:25.000
Cuối cùng, chúng tôi muốn có một tùy chọn để hiển thị doanh số trung bình hàng ngày trong tất cả các tháng.

00:09:25.000 --> 00:09:31.000
Để làm như vậy, trước tiên chúng tôi đặt kiểu tiền cảnh thành màu xám nhạt dần để nhấn mạnh chúng.

00:09:31.000 --> 00:09:35.000
Sau đó, chúng tôi thêm một dấu quy tắc bên ngoài ForEach, với y hiển thị giá trị trung bình.

00:09:35.000 --> 00:09:38.000
Điều này thêm một quy tắc nằm ngang.

00:09:38.000 --> 00:09:45.000
Để làm rõ rằng quy tắc đang hiển thị mức trung bình hàng năm, chúng ta có thể thêm chú thích vào quy tắc bằng cách sử dụng công cụ sửa đổi .annotation.

00:09:45.000 --> 00:09:50.000
Điều này thêm một nhãn văn bản ở đầu dấu quy tắc, với sự liên kết hàng đầu.

00:09:50.000 --> 00:09:54.000
Chúng tôi đã thảo luận một vài ví dụ về việc xây dựng biểu đồ theo thành phần.

00:09:54.000 --> 00:09:58.000
Có nhiều cách khác nhau để sử dụng và kết hợp các nhãn hiệu cơ bản này.

00:09:58.000 --> 00:10:12.000
Giống như biểu đồ hộp, biểu đồ đường nhiều chuỗi, kim tự tháp dân số, biểu đồ phạm vi, biểu đồ dòng, biểu đồ phân tán nhiều chuỗi, bản đồ nhiệt hoặc thậm chí là biểu đồ của trường vectơ.

00:10:12.000 --> 00:10:17.000
Đây chỉ là một số ví dụ về nhiều biểu đồ khác nhau mà bạn có thể xây dựng với Biểu đồ Swift.

00:10:17.000 --> 00:10:18.000
Hãy đi sâu vào chủ đề tiếp theo.

00:10:18.000 --> 00:10:21.000
Vẽ đồ thị dữ liệu với các thuộc tính đánh dấu.

00:10:21.000 --> 00:10:28.000
Biểu đồ Swift hỗ trợ ba loại hoặc dữ liệu chính: định lượng, danh nghĩa và thời gian.

00:10:28.000 --> 00:10:36.000
Dữ liệu định lượng là một giá trị số, chẳng hạn như số lượng sản phẩm được bán, nhiệt độ của một căn phòng hoặc giá của một cổ phiếu.

00:10:36.000 --> 00:10:44.000
Biểu đồ Swift coi các loại số Swift như Int, Float và Double là dữ liệu định lượng.

00:10:44.000 --> 00:10:49.000
Dữ liệu danh nghĩa, hoặc dữ liệu phân loại, đại diện cho các danh mục hoặc nhóm rời rạc.

00:10:49.000 --> 00:10:55.000
Ví dụ, tên của một người, một lục địa hoặc loại sản phẩm.

00:10:55.000 --> 00:10:59.000
Bạn có thể sử dụng một chuỗi hoặc một enum có giá trị chuỗi tùy chỉnh làm dữ liệu danh nghĩa.

00:10:59.000 --> 00:11:03.000
Dữ liệu thời gian đại diện cho một điểm hoặc khoảng thời gian.

00:11:03.000 --> 00:11:09.000
Ví dụ, thời lượng của một ngày cụ thể hoặc thời gian chính xác của một giao dịch.

00:11:09.000 --> 00:11:12.000
Biểu đồ Swift coi "Ngày" là dữ liệu thời gian.

00:11:12.000 --> 00:11:18.000
Biểu đồ hoạt động bằng cách chuyển đổi dữ liệu trừu tượng, như giá trị bán hàng, thành các thuộc tính của nhãn hiệu.

00:11:18.000 --> 00:11:25.000
Chúng ta hãy xem BarMark, có thể vẽ biểu đồ dữ liệu với các thuộc tính X, Y và Foreground Style.

00:11:25.000 --> 00:11:35.000
Trong ví dụ này, chúng tôi vẽ biểu đồ giá trị bán hàng, là định lượng, với thuộc tính x và tên, là danh nghĩa, với thuộc tính y.

00:11:35.000 --> 00:11:41.000
Biểu đồ kết quả bao gồm các thanh ngang, mỗi thanh hiển thị Doanh số bán hàng trên X và Tên trên Y.

00:11:41.000 --> 00:11:50.000
Nếu chúng ta hoán đổi Tên và Bán hàng, chẳng hạn như Tên nằm trên X và Bán hàng trên Y, thay vào đó chúng ta sẽ nhận được biểu đồ thanh dọc.

00:11:50.000 --> 00:11:56.000
Như bạn có thể thấy, hành vi của BarMark phụ thuộc vào kiểu dữ liệu được vẽ với các thuộc tính X và Y của nó.

00:11:56.000 --> 00:12:01.000
Định hướng của thanh phụ thuộc vào vị trí của tính chất định lượng.

00:12:01.000 --> 00:12:05.000
Bây giờ, hãy xem xét một biểu đồ khác với cả ba thuộc tính được sử dụng để vẽ biểu đồ dữ liệu.

00:12:05.000 --> 00:12:12.000
Ở đây chúng tôi vẽ biểu đồ Ngày trong tuần, theo thời gian, với X, Bán hàng với Y và Thành phố với Phong cách Tiền cảnh.

00:12:12.000 --> 00:12:21.000
Biểu đồ kết quả là biểu đồ thanh xếp chồng lên nhau, trong đó trục X hiển thị Ngày trong tuần, trục Y hiển thị Doanh số bán hàng và các thanh được tô màu theo thành phố.

00:12:21.000 --> 00:12:26.000
Biểu đồ Swift có sáu loại đánh dấu và sáu thuộc tính đánh dấu mà bạn có thể vẽ biểu đồ dữ liệu.

00:12:26.000 --> 00:12:33.000
Hãy nhớ rằng dữ liệu có thể thuộc ba loại, vì vậy có rất nhiều sự kết hợp có thể có.

00:12:33.000 --> 00:12:40.000
Đây là những gì cho phép Swift Charts hỗ trợ một loạt các thiết kế biểu đồ với một số lượng nhỏ các khối xây dựng cơ bản.

00:12:40.000 --> 00:12:50.000
Khi bạn vẽ dữ liệu với thuộc tính mark, ví dụ: bán hàng với Y, Swift Charts tạo ra một ánh xạ chuyển đổi dữ liệu trừu tượng thành một giá trị thích hợp của thuộc tính.

00:12:50.000 --> 00:12:55.000
Trong trường hợp này, nó sẽ chuyển đổi giá trị Bán hàng thành tọa độ Y trong không gian màn hình.

00:12:55.000 --> 00:13:02.000
Chúng tôi sử dụng thuật ngữ "quy mô" để chỉ ánh xạ từ dữ liệu trừu tượng, như bán hàng, để đánh dấu tài sản, như vị trí Y.

00:13:02.000 --> 00:13:07.000
Bạn có thể nghĩ về Scale như một hàm nhận giá trị dữ liệu và trả về một giá trị thuộc tính.

00:13:07.000 --> 00:13:14.000
Ví dụ, đây là một hàm yScale nhận doanh số bán hàng và trả về vị trí Y của thanh.

00:13:14.000 --> 00:13:24.000
Cái tên "tỷ lệ" xuất phát từ thực tế là đối với các thuộc tính vị trí, chúng tôi thường chia tỷ lệ giá trị đầu vào theo một số yếu tố nào đó để chuyển đổi nó thành một tọa độ màn hình hợp lý.

00:13:24.000 --> 00:13:31.000
Khi bạn vẽ biểu đồ dữ liệu với các thuộc tính đánh dấu, một tỷ lệ được tạo ra để chuyển đổi dữ liệu thành thuộc tính đánh dấu tương ứng.

00:13:31.000 --> 00:13:41.000
Ví dụ, trong biểu đồ này, chúng tôi có ba thang đo, mỗi thang đo lần lượt chuyển đổi Weekday thành X, Sales thành Y và City to Foreground Style.

00:13:41.000 --> 00:13:48.000
Theo mặc định, Biểu đồ Swift tự động suy ra tỷ lệ từ dữ liệu, vì vậy bạn sẽ có được một biểu đồ đẹp ngay lập tức.

00:13:48.000 --> 00:13:52.000
Bạn có thể sử dụng các công cụ sửa đổi tỷ lệ để định cấu hình tỷ lệ trong biểu đồ.

00:13:52.000 --> 00:13:54.000
Hãy cùng xem xét một vài ví dụ.

00:13:54.000 --> 00:14:00.000
Trong ví dụ này, thang đo Y được tự động suy ra là từ 0 đến 150.

00:14:00.000 --> 00:14:08.000
Tuy nhiên, chúng tôi muốn sửa thang đo Y để bất kể doanh số bán hàng hiện tại trông như thế nào, chúng tôi luôn có thang đo Y nhất quán.

00:14:08.000 --> 00:14:13.000
Hãy thay đổi nó sao cho thang Y luôn bắt đầu từ 0 và kết thúc ở 200.

00:14:13.000 --> 00:14:21.000
Để làm như vậy, chúng ta có thể sử dụng công cụ sửa đổi .chartYScale và đặt miền của thang đo từ 0 đến 200.

00:14:21.000 --> 00:14:26.000
Bây giờ, như bạn có thể thấy, trục đi từ 0 đến 200.

00:14:26.000 --> 00:14:33.000
Tương tự, chúng ta có thể thay đổi cách hai thành phố ánh xạ thành kiểu tiền cảnh bằng cách sử dụng công cụ sửa đổi .chartForegroundStyleScale.

00:14:33.000 --> 00:14:36.000
Bây giờ chúng tôi có màu sắc mới cho hai thành phố.

00:14:36.000 --> 00:14:40.000
Bây giờ chúng ta đã biết cách soạn các dấu và dữ liệu đồ thị với các thuộc tính dấu.

00:14:40.000 --> 00:14:44.000
Hãy đi sâu vào các tùy chọn tùy chỉnh hơn mà Swift Charts cung cấp.

00:14:44.000 --> 00:14:50.000
Một biểu đồ bao gồm các trục, có thể là một huyền thoại và một khu vực cốt truyện.

00:14:50.000 --> 00:14:53.000
Rìu và truyền thuyết giúp chúng ta diễn giải biểu đồ.

00:14:53.000 --> 00:14:56.000
Khu vực lô đất là khu vực giữa hai trục.

00:14:56.000 --> 00:14:59.000
Đây là nơi chúng tôi vẽ biểu đồ dữ liệu với các dấu hiệu.

00:14:59.000 --> 00:15:02.000
Tất cả các yếu tố này đều có thể tùy chỉnh trong Biểu đồ Swift.

00:15:02.000 --> 00:15:07.000
Trước tiên chúng ta hãy xem một vài ví dụ về cách tùy chỉnh rìu và truyền thuyết.

00:15:07.000 --> 00:15:10.000
Đây là biểu đồ hiển thị tổng doanh thu hàng tháng.

00:15:10.000 --> 00:15:16.000
Không có tùy chỉnh, Biểu đồ Swift tạo ra một trục mặc định có các giá trị được làm tròn độc đáo.

00:15:16.000 --> 00:15:20.000
Ngay bây giờ, trục X hiển thị nhãn cho mỗi quý.

00:15:20.000 --> 00:15:24.000
Hãy thay đổi nó để hiển thị nhãn mỗi tháng và sử dụng nhãn tháng một chữ cái.

00:15:24.000 --> 00:15:32.000
Chúng ta sẽ bắt đầu bằng cách thêm một công cụ sửa đổi .chartXAxis để tùy chỉnh trục X, với AxisMarks làm nội dung.

00:15:32.000 --> 00:15:37.000
AxisMarks không có tham số tạo lại trục mặc định.

00:15:37.000 --> 00:15:40.000
Hãy bắt đầu bằng cách thay đổi các giá trị trục.

00:15:40.000 --> 00:15:48.000
Vì chúng ta muốn có các khoảng thời gian lịch đều đặn, chúng ta có thể sử dụng stride(by:), tương tự như hàm stride từ thư viện tiêu chuẩn.

00:15:48.000 --> 00:15:50.000
Bây giờ chúng tôi có một nhãn hiệu cho mỗi tháng.

00:15:50.000 --> 00:15:54.000
Tuy nhiên, các nhãn mặc định cảm thấy quá đông đúc, như bạn thấy trong ảnh chụp màn hình.

00:15:54.000 --> 00:15:58.000
Một số nhãn bị cắt ngắn vì chúng tôi không có đủ không gian cho chúng.

00:15:58.000 --> 00:16:02.000
Hãy thay đổi nhãn để sử dụng định dạng một chữ cái.

00:16:02.000 --> 00:16:10.000
Để làm như vậy, hãy xây dựng các dấu trục từ các thành phần riêng lẻ, bao gồm AxisGridLine, AxisTick và AxisValueLabel.

00:16:10.000 --> 00:16:14.000
Hãy đặt định dạng của nhãn để sử dụng tên tháng hẹp.

00:16:14.000 --> 00:16:17.000
Bây giờ chúng tôi có một lá thư cho mỗi tháng.

00:16:17.000 --> 00:16:23.000
Tham số giá trị được truyền vào trình tạo kết quả cung cấp thông tin về giá trị trục hiện tại.

00:16:23.000 --> 00:16:28.000
Bạn có thể sử dụng điều này để xác định có điều kiện sự tồn tại và kiểu của các dấu trục.

00:16:28.000 --> 00:16:35.000
Ví dụ, ở đây chúng tôi có một điều kiện kiểm tra xem giá trị như một ngày có phải là quý đầu tiên của một tháng hay không.

00:16:35.000 --> 00:16:40.000
Nếu có, chúng ta có thể làm nổi bật tháng đầu tiên của mỗi quý với một phong cách tiền cảnh khác nhau.

00:16:40.000 --> 00:16:44.000
Nếu không, chúng tôi chỉ hiển thị một đường lưới, không có đánh dấu và nhãn.

00:16:44.000 --> 00:16:49.000
Vì chúng tôi hiện đang hiển thị các quý, chúng tôi có thể thay đổi định dạng thành kiểu quý.

00:16:49.000 --> 00:16:59.000
Với các tùy chỉnh mà chúng tôi vừa thực hiện, chúng tôi nhận được một trục X độc đáo hơn hiển thị dữ liệu quý, với các đường lưới con hiển thị hàng tháng.

00:16:59.000 --> 00:17:05.000
Ngoài các giá trị, các dấu trục có các thuộc tính khác cho phép bạn định cấu hình giao diện và kiểu dáng chung.

00:17:05.000 --> 00:17:17.000
Giả sử chúng ta muốn trục Y xuất hiện ở cạnh trước của biểu đồ thay vì cạnh sau mặc định, chúng ta có thể đặt tham số vị trí thành hàng đầu để di chuyển chúng đến cạnh trước.

00:17:17.000 --> 00:17:24.000
Biểu đồ Swift cung cấp cài đặt trước mặc định cho các dấu trục dựa trên trục và loại dữ liệu được hiển thị.

00:17:24.000 --> 00:17:27.000
Bạn có thể ghi đè mặc định bằng cách sử dụng tham số đặt trước.

00:17:27.000 --> 00:17:35.000
Ví dụ, ở đây chúng tôi đang sử dụng cài đặt trước .extended cho trục Y để giúp căn chỉnh trực quan với phần còn lại của giao diện người dùng.

00:17:35.000 --> 00:17:39.000
Trong một số biểu đồ, bạn có thể không muốn hiển thị trục.

00:17:39.000 --> 00:17:47.000
Ví dụ, mục đích của biểu đồ bán hàng hàng đầu ở đây là cung cấp cho mọi người một cái nhìn tổng quan ngắn gọn, vì vậy các trục không thực sự cần thiết.

00:17:47.000 --> 00:17:51.000
Bạn có thể chuyển .hidden vào các công cụ sửa đổi trục biểu đồ để ẩn một trục.

00:17:51.000 --> 00:17:54.000
Cấu hình huyền thoại tương tự như trục.

00:17:54.000 --> 00:18:04.000
Ví dụ, trong biểu đồ này làm nổi bật ngày và vị trí tốt nhất, chúng tôi đã sử dụng độ mờ để làm nổi bật thành phố tốt nhất, vì vậy chúng tôi có thể ẩn huyền thoại được tạo tự động.

00:18:04.000 --> 00:18:09.000
Để làm như vậy, chúng ta có thể thêm công cụ sửa đổi .chartLegend với .hidden làm tham số.

00:18:09.000 --> 00:18:12.000
Bây giờ hãy nói về khu vực lô đất.

00:18:12.000 --> 00:18:17.000
Bạn có thể sử dụng công cụ sửa đổi .chartPlotStyle để định cấu hình khu vực biểu đồ của biểu đồ.

00:18:17.000 --> 00:18:24.000
Trong phần đóng cuối, chúng tôi sẽ viết một hàm lấy diện tích lô ban đầu và trả về một khu vực lô đã sửa đổi.

00:18:24.000 --> 00:18:27.000
Hãy xem một vài ví dụ.

00:18:27.000 --> 00:18:32.000
Trong một số trường hợp, chúng tôi có thể muốn khu vực lô đất có kích thước hoặc tỷ lệ khung hình chính xác.

00:18:32.000 --> 00:18:38.000
Ví dụ, trong trường hợp này, chúng tôi muốn chiều cao của khu vực lô đất được điều khiển bởi số lượng danh mục trong biểu đồ.

00:18:38.000 --> 00:18:45.000
Để đạt được điều này, chúng ta có thể áp dụng công cụ sửa đổi .frame cho khu vực lô và trả về khu vực lô đã sửa đổi.

00:18:45.000 --> 00:18:48.000
Điều này sẽ thiết lập chiều cao của diện tích lô đất.

00:18:48.000 --> 00:18:52.000
Chúng ta cũng có thể sử dụng các công cụ sửa đổi để đạt được hiệu ứng hình ảnh đặc biệt.

00:18:52.000 --> 00:19:02.000
Ví dụ, trong biểu đồ Chế độ tối này, chúng tôi sử dụng công cụ sửa đổi .background để thêm nền màu hồng với độ mờ đục là .2 để làm cho biểu đồ nổi bật một chút.

00:19:02.000 --> 00:19:05.000
Và sau đó thêm đường viền 1-pt có cùng màu hồng.

00:19:05.000 --> 00:19:09.000
Điều này tạo ra một hiệu ứng hình ảnh độc đáo cho biểu đồ.

00:19:09.000 --> 00:19:17.000
Trước đó trong phiên, chúng tôi đã đề cập đến tỷ lệ, là các hàm ánh xạ các giá trị dữ liệu để đánh dấu các thuộc tính như X và Y.

00:19:17.000 --> 00:19:23.000
Swift Charts cung cấp ChartProxy cho phép bạn truy cập thang đo X và Y trong biểu đồ.

00:19:23.000 --> 00:19:34.000
Bạn có thể sử dụng phương thức ChartProxy's position(for:) để lấy vị trí cho một giá trị dữ liệu nhất định hoặc sử dụng phương thức value(at:) để lấy giá trị dữ liệu tại một vị trí nhất định.

00:19:34.000 --> 00:19:38.000
Điều này cho phép bạn phối hợp các chế độ xem khác với biểu đồ.

00:19:38.000 --> 00:19:41.000
Hãy xem xét một ví dụ.

00:19:41.000 --> 00:19:43.000
Chúng tôi sẽ xây dựng chế độ xem đánh răng tương tác này.

00:19:43.000 --> 00:19:52.000
Tại đây bạn có thể chọn một khoảng thời gian từ biểu đồ bằng cử chỉ kéo và khoảng thời gian đó sau đó sẽ được sử dụng để lọc các hàng trong chế độ xem chi tiết.

00:19:52.000 --> 00:19:56.000
Chúng ta có thể lấy một đối tượng proxy biểu đồ từ các công cụ sửa đổi .chartOverlay hoặc .chartBackground.

00:19:56.000 --> 00:20:04.000
Hai công cụ sửa đổi này tương tự như công cụ sửa đổi lớp phủ và nền của SwiftUI, nhưng chúng cung cấp cho bạn một proxy biểu đồ.

00:20:04.000 --> 00:20:09.000
Để xây dựng ví dụ này, chúng ta sẽ bắt đầu bằng cách xác định biểu đồ cơ sở giống như trước đây.

00:20:09.000 --> 00:20:13.000
Sau đó, chúng tôi thêm một công cụ sửa đổi .chartOverlay cung cấp cho chúng tôi proxy biểu đồ.

00:20:13.000 --> 00:20:19.000
Bên trong, chúng tôi có một trình đọc hình học cho phép chúng tôi truy cập vào hình học của chế độ xem lớp phủ.

00:20:19.000 --> 00:20:25.000
Sau đó, chúng tôi có chế độ xem Hình chữ nhật được định cấu hình để phản hồi DragGesture của SwiftUI.

00:20:25.000 --> 00:20:32.000
Khi cử chỉ kéo xảy ra, trước tiên chúng ta tìm tọa độ x của điểm bắt đầu và các vị trí hiện tại bên trong khu vực biểu đồ của biểu đồ.

00:20:32.000 --> 00:20:39.000
Điều này được thực hiện bằng cách trừ đi nguồn gốc của khu vực lô đất khỏi các vị trí được cung cấp bởi các cử chỉ.

00:20:39.000 --> 00:20:51.000
Khi chúng ta có các tọa độ này, chúng ta có thể sử dụng proxy biểu đồ để tìm các giá trị Ngày tương ứng và cuối cùng đặt nó thành trạng thái SwiftUI theo dõi khoảng thời gian ngày hiện tại.

00:20:51.000 --> 00:20:58.000
Với trạng thái phạm vi, sau đó chúng ta có thể xác định một dấu hình chữ nhật trong biểu đồ để hình dung phạm vi ngày hiện được chọn.

00:20:58.000 --> 00:21:05.000
Trạng thái này cũng có thể được sử dụng để kiểm soát các phần khác trong ứng dụng của bạn, ví dụ, để lọc nội dung của chế độ xem chi tiết bên dưới biểu đồ.

00:21:05.000 --> 00:21:09.000
Đây là một ví dụ đơn giản để minh họa cách hoạt động của proxy biểu đồ.

00:21:09.000 --> 00:21:19.000
Bạn có thể sử dụng nó để xây dựng nhiều tính năng thú vị, ví dụ, biểu đồ tương tác này hiển thị ngày đã chọn và giá trị bán hàng với lớp phủ trông giống như kẹo mút.

00:21:19.000 --> 00:21:27.000
Trong phiên này, chúng tôi đã thảo luận về cách tạo biểu đồ bằng cách tạo dấu; cách vẽ dữ liệu với các thuộc tính dấu và cách tùy chỉnh biểu đồ.

00:21:27.000 --> 00:21:35.000
Bạn có thể đến các phiên thiết kế để tìm hiểu thêm về cách thiết kế trải nghiệm ứng dụng tuyệt vời với biểu đồ và cách thiết kế biểu đồ hiệu quả.

00:21:35.000 --> 00:21:38.000
Chúng tôi nghĩ rằng bạn sẽ thích xây dựng trực quan hóa dữ liệu với Swift Charts.

00:21:38.000 --> 00:21:39.000
Cảm ơn vì đã xem.

00:21:39.000 --> 23:59:59.000
♪

