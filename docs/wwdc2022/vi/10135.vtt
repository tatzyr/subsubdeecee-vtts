WEBVTT

00:00:01.000 --> 00:00:11.000
Yann Ly-Gagnon: Xin chào. tên tôi là Yann.

00:00:11.000 --> 00:00:13.000
Tôi là một kỹ sư Bluetooth cốt lõi.

00:00:13.000 --> 00:00:18.000
Hôm nay, tôi muốn nói chuyện với bạn về các cảnh báo kịp thời cho các thiết bị Bluetooth của bạn trên Apple Watch.

00:00:18.000 --> 00:00:26.000
Đầu tiên, chúng tôi sẽ xem xét cách cập nhật một biến chứng trong khi Ứng dụng watchOS của bạn ở chế độ nền.

00:00:26.000 --> 00:00:32.000
Sau đó, chúng tôi sẽ đi sâu vào cách lắng nghe thông báo kịp thời trên Ứng dụng watchOS của bạn.

00:00:32.000 --> 00:00:39.000
Chúng tôi cũng sẽ thấy những cách mới để bạn có thể khám phá các thiết bị ngoại vi trên watchOS 9.

00:00:39.000 --> 00:00:47.000
Cuối cùng, chúng tôi sẽ cung cấp các phương pháp và đề xuất tốt nhất để giúp bạn thiết kế phụ kiện Bluetooth của mình.

00:00:47.000 --> 00:00:54.000
Hãy chuyển sang chủ đề đầu tiên của chúng ta: cách cập nhật một biến chứng trong nền cho Ứng dụng watchOS của bạn.

00:00:54.000 --> 00:01:03.000
Năm ngoái, trong watchOS 8, chúng tôi đã giới thiệu một cách để cập nhật các biến chứng với phụ kiện Bluetooth của bạn trong quá trình làm mới ứng dụng Background.

00:01:03.000 --> 00:01:12.000
Điều này rất tốt cho dữ liệu có thể được cập nhật định kỳ, như trong ví dụ này cho tôi thấy nhiệt độ không khí hiện tại.

00:01:12.000 --> 00:01:21.000
Để làm mới nhanh chóng, năm ngoái watchOS cho phép bạn cập nhật sự phức tạp của mình và sử dụng làm mới ứng dụng Nền, chạy định kỳ trong nền.

00:01:21.000 --> 00:01:30.000
Bất cứ khi nào việc làm mới ứng dụng Background diễn ra, nó cho phép ứng dụng của bạn kết nối lại với thiết bị ngoại vi Bluetooth của bạn, truy xuất dữ liệu và sau đó ngắt kết nối khỏi thiết bị ngoại vi của bạn.

00:01:30.000 --> 00:01:37.000
Để biết thêm chi tiết về điều này, hãy xem video có tên "Kết nối các thiết bị Bluetooth với Apple Watch."

00:01:37.000 --> 00:01:43.000
Nhưng điều gì sẽ xảy ra nếu một sự kiện nhạy cảm với thời gian xảy ra trên thiết bị ngoại vi Bluetooth của bạn mà người dùng muốn biết?

00:01:43.000 --> 00:01:52.000
Trong watchOS 9, chúng tôi đang giới thiệu một cách để nghe các cảnh báo từ các phụ kiện Bluetooth của bạn trong nền.

00:01:52.000 --> 00:01:54.000
Đây là cách nó hoạt động.

00:01:54.000 --> 00:02:00.000
Bạn sẽ kết nối thiết bị của mình khi ứng dụng của bạn đang chạy và bắt đầu theo dõi một đặc điểm.

00:02:00.000 --> 00:02:09.000
Khi ứng dụng của bạn ngừng chạy, Core Bluetooth sẽ thay mặt bạn duy trì kết nối với thiết bị của bạn và tiếp tục lắng nghe những thay đổi đối với đặc tính của bạn.

00:02:09.000 --> 00:02:15.000
Khi thiết bị của bạn thay đổi giá trị của đặc tính đó, ứng dụng của bạn sẽ có thời gian chạy để xử lý sự kiện đó.

00:02:15.000 --> 00:02:20.000
Ví dụ, bạn có thể đăng thông báo cục bộ hoặc gửi yêu cầu mạng.

00:02:20.000 --> 00:02:26.000
Điều này nhằm cung cấp cho người dùng thông tin nhạy cảm về thời gian mà họ quan tâm.

00:02:26.000 --> 00:02:29.000
Giả sử tôi có một nhiệt kế thực phẩm.

00:02:29.000 --> 00:02:35.000
Tôi có thể đặt nhiệt độ nấu mong muốn để được cảnh báo khi nào tôi nên lấy thức ăn ra khỏi lò.

00:02:35.000 --> 00:02:46.000
Khi nhiệt độ đạt đến nhiệt độ mong muốn, nhiệt kế sẽ thay đổi giá trị của một đặc tính và ứng dụng đăng thông báo cục bộ rằng thực phẩm gần như đã sẵn sàng.

00:02:46.000 --> 00:02:51.000
Khi đồ ăn xong, tôi nhận được thông báo mong muốn.

00:02:51.000 --> 00:02:58.000
Và nếu nhiệt độ tiếp tục tăng, tôi sẽ nhận được một thông báo cuối cùng.

00:02:58.000 --> 00:03:03.000
Đầu tiên, hãy xem lại cách cấu hình các chế độ Nền.

00:03:03.000 --> 00:03:10.000
Thêm Bluetooth-central vào UIBackgroundModes trong Info.plist của ứng dụng Đồng hồ của bạn.

00:03:10.000 --> 00:03:19.000
Trong Xcode, nó được gọi là "Chế độ nền bắt buộc" và bạn nên thêm "Ứng dụng giao tiếp bằng CoreBluetooth."

00:03:19.000 --> 00:03:29.000
Lưu ý rằng các mục nhập Info.plist đó giống như ứng dụng của bạn dành cho iOS nếu bạn muốn sử dụng thực thi nền làm trung tâm.

00:03:29.000 --> 00:03:38.000
Bạn sẽ cần chỉnh sửa watchApp info.plist của mình theo cách thủ công và không dựa vào "Khả năng ký" của iOS.

00:03:38.000 --> 00:03:40.000
Hãy nhìn vào mã.

00:03:40.000 --> 00:03:46.000
Giả sử bạn đã kết nối, bạn đã tìm thấy một dịch vụ GATT và vừa phát hiện ra một đặc tính GATT.

00:03:46.000 --> 00:03:53.000
Bạn sẽ nhận được cuộc gọi lại didDiscoverCharacteristicFor.

00:03:53.000 --> 00:03:58.000
Bên trong cuộc gọi lại, bạn có thể quyết định nhận thông báo mỗi khi giá trị thay đổi.

00:03:58.000 --> 00:04:08.000
Đây là API giống như trong watchOS 8, với sự khác biệt là nó cũng sẽ hoạt động trong khi ứng dụng của bạn ở chế độ nền.

00:04:08.000 --> 00:04:17.000
Sau đó triển khai phương thức đại diện để xử lý các thay đổi đối với giá trị của đặc tính với didUpdateValueFor.

00:04:17.000 --> 00:04:27.000
Khi đặc điểm thay đổi, bạn có thể đăng thông báo cục bộ tại đây, gửi yêu cầu mạng hoặc bất cứ điều gì có ý nghĩa đối với ứng dụng của bạn.

00:04:27.000 --> 00:04:37.000
Phương pháp này sẽ được gọi cả ở phía trước và phía sau, vì vậy hãy đảm bảo bạn thực hiện hành động chính xác trong cả hai trường hợp.

00:04:37.000 --> 00:04:42.000
Bây giờ, hãy nói về một số tình huống bạn cần cân nhắc.

00:04:42.000 --> 00:04:45.000
Đầu tiên, về chủ đề kết nối lại Bluetooth.

00:04:45.000 --> 00:04:51.000
Nếu thiết bị của bạn nằm ngoài phạm vi, kết nối Bluetooth sẽ ngắt kết nối sau một thời gian chờ.

00:04:51.000 --> 00:05:00.000
Nếu điều này xảy ra, ứng dụng của bạn sẽ nhanh chóng có thời gian chạy nền để gọi "connectPeripheral" để thử kết nối lại.

00:05:00.000 --> 00:05:03.000
Điều này cũng giống như những gì xảy ra trên iOS.

00:05:03.000 --> 00:05:09.000
Ngay khi thiết bị hoạt động trở lại, Core Bluetooth sẽ kết nối lại với nó.

00:05:09.000 --> 00:05:12.000
Bây giờ, hãy nói về một số giới hạn.

00:05:12.000 --> 00:05:19.000
Những giới hạn này rất quan trọng để duy trì thời lượng pin tối ưu cho người dùng Apple Watch.

00:05:19.000 --> 00:05:30.000
Nếu thiết bị của bạn ở rìa của phạm vi Bluetooth và liên tục ngắt kết nối trong khi ở kết nối Background BLE, phạm vi kết nối lại sẽ bị giảm.

00:05:30.000 --> 00:05:35.000
Điều này có nghĩa là chỉ những thiết bị gần Apple Watch mới kết nối lại.

00:05:35.000 --> 00:05:43.000
Những giới hạn đó được tính trên cửa sổ quay 24 giờ và được đặt lại bất cứ khi nào người dùng tương tác trên Ứng dụng của bạn.

00:05:43.000 --> 00:05:50.000
Một hạn chế khác là liên quan đến số lượng cơ hội thời gian chạy nền cho các cảnh báo kịp thời.

00:05:50.000 --> 00:05:56.000
Chỉ giám sát các đặc điểm sẽ thay đổi khi có điều gì đó quan trọng đối với người dùng xảy ra.

00:05:56.000 --> 00:06:03.000
Nếu bạn cần thu thập dữ liệu định kỳ từ thiết bị của mình, điều này nên được thực hiện với việc làm mới ứng dụng Nền.

00:06:03.000 --> 00:06:12.000
Khi ứng dụng của bạn sắp vượt quá giới hạn, thông báo LeGattNearBackgroundNotificationLimit sẽ được đăng.

00:06:12.000 --> 00:06:20.000
Ứng dụng của bạn nên theo dõi lỗi đó và nhận ra rằng người dùng không tương tác với ứng dụng watchOS.

00:06:20.000 --> 00:06:34.000
Nếu cảnh báo này quan trọng, đây có thể là thời điểm thích hợp để tìm một cách khác để giao tiếp với người dùng của bạn, chẳng hạn như thông qua yêu cầu mạng hoặc thay đổi giao diện người dùng trên thiết bị ngoại vi Bluetooth của bạn.

00:06:34.000 --> 00:06:45.000
Sau khi vượt quá giới hạn, thông báo có tên LeGattExceededBackgroundNotificationLimit sẽ được đăng.

00:06:45.000 --> 00:06:57.000
Sau thời điểm này, ứng dụng của bạn sẽ không còn nhận được thời gian chạy nền và sẽ quay trở lại hành vi watchOS 8, nơi sẽ không có kết nối nền và chỉ làm mới ứng dụng nền.

00:06:57.000 --> 00:07:03.000
Bạn có thể truy xuất hai thông báo đó trong trường lỗi của Cập nhật Thông báo GATT.

00:07:03.000 --> 00:07:11.000
Đối với kết nối BLE nền, chúng tôi khuyên bạn nên sử dụng lỗi để biết khi nào đạt đến giới hạn thay vì đếm ngược.

00:07:11.000 --> 00:07:16.000
Đối với watchOS 9, giới hạn thời gian chạy nền được đặt thành 5.

00:07:16.000 --> 00:07:21.000
Cả hai giới hạn này đều được đặt lại bất cứ khi nào người dùng tương tác với ứng dụng của bạn.

00:07:21.000 --> 00:07:28.000
Họ cũng đặt lại 24 giờ sau khi đạt đến giới hạn trong trường hợp không có tương tác người dùng với ứng dụng của bạn.

00:07:28.000 --> 00:07:33.000
Lưu ý: Những giới hạn này chỉ áp dụng cho các kết nối Bluetooth Background LE.

00:07:33.000 --> 00:07:41.000
Việc làm mới ứng dụng nền sẽ tiếp tục xảy ra nếu biến chứng của bạn nằm trên mặt đồng hồ đang hoạt động, bất kể những giới hạn này.

00:07:41.000 --> 00:07:45.000
Lượng thời gian bạn xử lý mỗi sự kiện rất ngắn.

00:07:45.000 --> 00:07:52.000
Có thể không có đủ thời gian để thực hiện quá trình xử lý cực kỳ phức tạp, nhưng đủ để cảnh báo người dùng điều gì đó quan trọng đang xảy ra.

00:07:52.000 --> 00:07:59.000
Cuối cùng, việc lắng nghe các cảnh báo kịp thời trong nền yêu cầu Apple Watch Series 6 trở lên.

00:07:59.000 --> 00:08:03.000
Lắng nghe các cảnh báo không phải là điều duy nhất bạn có thể làm trong nền.

00:08:03.000 --> 00:08:09.000
Trong watchOS 9, bạn có thể khám phá các thiết bị ngoại vi trong khi ứng dụng của bạn ở chế độ nền.

00:08:09.000 --> 00:08:17.000
Giả sử tôi có một thiết bị y tế Bluetooth và một ứng dụng watchOS phát hiện mọi cảnh báo kịp thời từ nó.

00:08:17.000 --> 00:08:24.000
Để tiết kiệm năng lượng, thiết bị ngoại vi không quảng cáo cho đến khi nó phát hiện ra một tình trạng nghiêm trọng.

00:08:24.000 --> 00:08:30.000
Do đó, chưa có kết nối giữa thiết bị và Apple Watch.

00:08:30.000 --> 00:08:37.000
Tại đây, Ứng dụng watchOS sẽ quét UUID Dịch vụ duy nhất từ thiết bị y tế.

00:08:37.000 --> 00:08:43.000
Bây giờ, khi thiết bị y tế phát hiện ra điều gì đó nghiêm trọng, nó bắt đầu quảng cáo.

00:08:43.000 --> 00:08:49.000
Apple Watch phát hiện ra thiết bị ngoại vi này và khởi chạy ứng dụng trong nền.

00:08:49.000 --> 00:08:54.000
Ứng dụng sau đó có thể cảnh báo người dùng về tình trạng được phát hiện.

00:08:54.000 --> 00:09:05.000
Đây là cách nó hoạt động: Ứng dụng Watch sẽ bắt đầu quét các thiết bị ngoại vi và Core Bluetooth sẽ tiếp tục quét trong nền.

00:09:05.000 --> 00:09:15.000
Khi quảng cáo của thiết bị ngoại vi được phát hiện, ứng dụng sẽ được cung cấp thời gian chạy nền và có thể bắt đầu kết nối.

00:09:15.000 --> 00:09:18.000
Hãy đi sâu vào mã để biến điều này thành hiện thực.

00:09:18.000 --> 00:09:26.000
API không thay đổi từ watchOS 8, nhưng việc quét sẽ được tôn trọng ngay cả khi ứng dụng ở chế độ nền.

00:09:26.000 --> 00:09:32.000
Gọi "scanForPeripherals" với dịch vụ UUID mà bạn muốn xem.

00:09:32.000 --> 00:09:38.000
Bạn có thể làm điều này trong khi ứng dụng của bạn ở phía trước và nó sẽ tiếp tục trong khi ứng dụng ở chế độ nền.

00:09:38.000 --> 00:09:46.000
Lưu ý rằng nếu bạn yêu cầu tùy chọn "allowDuplicatesKey", nó sẽ chỉ khả dụng khi ứng dụng ở phía trước.

00:09:46.000 --> 00:09:48.000
Bây giờ, hãy nói về một số giới hạn.

00:09:48.000 --> 00:09:54.000
Có giới hạn về số lần ứng dụng của bạn sẽ được cung cấp thời gian chạy nền giữa các lần khởi chạy ứng dụng.

00:09:54.000 --> 00:10:00.000
Giới hạn này được kết hợp với thời gian chạy nền mà chúng ta đã thấy trước đây khi đặc tính GATT thay đổi.

00:10:00.000 --> 00:10:06.000
Ngoài ra, việc quét các thiết bị ngoại vi trong nền yêu cầu Apple Watch Series 6 trở lên.

00:10:06.000 --> 00:10:15.000
Tóm lại, bây giờ chúng ta có thể quét một số lượng hạn chế dịch vụ Bluetooth UUID trong khi đồng hồ đang quét ở chế độ nền.

00:10:15.000 --> 00:10:23.000
Bây giờ hãy nói về cách thiết kế phụ kiện của bạn để tận dụng tối đa các tính năng này.

00:10:23.000 --> 00:10:30.000
Có một sự đánh đổi năng lượng mà bạn cần cân nhắc khi thiết kế phụ kiện Bluetooth của mình.

00:10:30.000 --> 00:10:39.000
Nếu mức tiêu thụ điện năng là một mối quan tâm, bạn nên chọn cấu trúc liên kết nơi thiết bị của bạn có thể ngủ sâu và chỉ quảng cáo thông tin liên quan khi cảnh báo xảy ra.

00:10:39.000 --> 00:10:49.000
Sự đánh đổi là, bạn sẽ có thêm độ trễ với thời gian khám phá Bluetooth ở mỗi cảnh báo kịp thời, nhưng bạn sẽ có thể tiết kiệm nhiều năng lượng hơn.

00:10:49.000 --> 00:10:54.000
Đây là cấu trúc liên kết được cung cấp trong ví dụ với thiết bị y tế.

00:10:54.000 --> 00:11:07.000
Mặt khác, nếu bạn cần độ trễ thấp cho các cảnh báo kịp thời của mình, nhưng sức mạnh không quá đáng lo ngại, bạn có thể cân nhắc sử dụng kết nối Background LE và gửi cảnh báo của mình với các chỉ báo GATT.

00:11:07.000 --> 00:11:12.000
Lưu ý rằng có giới hạn hai kết nối Bluetooth cho mỗi ứng dụng.

00:11:12.000 --> 00:11:17.000
Đây là cấu trúc liên kết mà chúng ta đã thấy trong ví dụ về cảm biến nhiệt độ.

00:11:17.000 --> 00:11:32.000
Để người dùng của bạn có trải nghiệm tốt nhất với các cảnh báo kịp thời, hãy cân nhắc thêm càng nhiều xử lý và trí thông minh trên thiết bị ngoại vi của bạn để lọc dữ liệu quan trọng về thời gian so với không quan trọng về thời gian.

00:11:32.000 --> 00:11:41.000
Quay trở lại ví dụ nhiệt độ của chúng tôi, thay vì truyền mọi nhiệt độ, bạn chỉ có thể gửi các sự kiện liên quan hoặc khi nhiệt độ thay đổi.

00:11:41.000 --> 00:11:56.000
Lợi ích của cách tiếp cận này là, nếu bạn tách biệt đúng các sự kiện quan trọng về thời gian khỏi dữ liệu định kỳ, cả thiết bị ngoại vi của bạn và người dùng Apple Watch sẽ tiết kiệm năng lượng, do đó trải nghiệm tổng thể tốt hơn.

00:11:56.000 --> 00:12:01.000
Khi thiết bị của bạn ngắt kết nối, chúng tôi khuyên bạn nên thiết lập lại kết nối.

00:12:01.000 --> 00:12:12.000
Khoảng thời gian quảng cáo phụ thuộc vào yêu cầu của thiết bị ngoại vi Bluetooth của bạn, chẳng hạn như tốc độ cần kết nối lại, thời lượng pin, v.v.

00:12:12.000 --> 00:12:17.000
Trong hướng dẫn phụ kiện, chúng tôi cung cấp một vài giá trị khác nhau mà bạn có thể sử dụng.

00:12:17.000 --> 00:12:27.000
Ví dụ, nếu thiết bị của bạn bị hạn chế pin, bạn có thể sử dụng giá trị 1022,5 mili giây.

00:12:27.000 --> 00:12:36.000
Một ví dụ khác: nếu bạn quảng cáo với tốc độ 20 mili giây, nó sẽ cho phép phát hiện trong vòng một giây trong điều kiện lý tưởng.

00:12:36.000 --> 00:12:44.000
Bạn có thể thiết kế sao cho tỷ lệ quảng cáo cao này chỉ có thể được sử dụng khi một sự kiện quan trọng xảy ra.

00:12:44.000 --> 00:12:48.000
Bây giờ hãy nói về khoảng thời gian kết nối.

00:12:48.000 --> 00:12:58.000
Nếu bạn chọn cấu trúc liên kết nơi thiết bị của bạn vẫn được kết nối trong nền, chúng tôi thực sự khuyên bạn nên sử dụng khoảng thời gian kết nối dài, chẳng hạn như ít nhất 150 mili giây.

00:12:58.000 --> 00:13:04.000
Điều này sẽ cho phép tiết kiệm pin trên thiết bị ngoại vi của bạn và cung cấp trải nghiệm người dùng tốt nhất trên Apple Watch.

00:13:04.000 --> 00:13:09.000
Bluetooth 5.3 đang đến với Apple Watch, cùng với xếp hạng phụ kết nối.

00:13:09.000 --> 00:13:19.000
Điều này sẽ cho phép tăng khoảng thời gian kết nối trong khi thiết bị ngoại vi Bluetooth không hoạt động và nhanh chóng thay đổi thành khoảng kết nối nhỏ hơn khi bạn cần độ trễ thấp hơn.

00:13:19.000 --> 00:13:24.000
Đây là bảng hiển thị sự khác biệt giữa các nền tảng.

00:13:24.000 --> 00:13:28.000
Đây là những cấu hình hiện được hỗ trợ cho Bluetooth Low Energy.

00:13:28.000 --> 00:13:35.000
Năm ngoái chúng tôi đã giới thiệu làm mới ứng dụng Background cho watchOS như một chế độ thực thi nền mới.

00:13:35.000 --> 00:13:44.000
Năm nay, nếu bạn sở hữu Series 6 trở lên, chúng tôi đã cải thiện việc thực hiện nền với các cảnh báo kịp thời như chúng tôi đã mô tả ngày hôm nay.

00:13:44.000 --> 00:13:46.000
Cảm ơn vì đã xem!

00:13:46.000 --> 23:59:59.000
.

