WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Nhạc hip-hop nhạc cụ êm dịu ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:15.000
Xin chào, tôi là Garrett, một kỹ sư trong nhóm Trải nghiệm Xác thực.

00:00:15.000 --> 00:00:23.000
Và trong video này, tôi rất hào hứng khi nói về mật khẩu, một công nghệ xác thực thế hệ tiếp theo.

00:00:23.000 --> 00:00:28.000
Nhưng trước tiên, tôi cần nói về công nghệ xác thực ngày nay: mật khẩu.

00:00:28.000 --> 00:00:33.000
Bạn có thể đã quen với việc đăng nhập vào gần như mọi ứng dụng và trang web với chúng.

00:00:33.000 --> 00:00:37.000
Mật khẩu thực sự khó sử dụng một cách an toàn.

00:00:37.000 --> 00:00:45.000
Tất cả chúng ta đều biết rằng chúng ta phải tạo mật khẩu mạnh, duy nhất cho mọi tài khoản, nhưng không nhiều người thực sự làm vậy.

00:00:45.000 --> 00:00:55.000
Khi bạn đang thiết kế các ứng dụng và trang web của mình, có sự cân bằng liên tục giữa việc giữ an toàn cho tài khoản và thiết kế trải nghiệm tốt.

00:00:55.000 --> 00:01:06.000
Và ngay cả khi các ứng dụng và trang web của bạn làm mọi thứ đúng, các vấn đề như lừa đảo và tái sử dụng mật khẩu vẫn có thể dẫn đến xâm phạm tài khoản.

00:01:06.000 --> 00:01:16.000
Trong macOS Monterey và iOS 15, chúng tôi đã công bố bản xem trước của nhà phát triển về giải pháp - mật khẩu - và nhận được rất nhiều phản hồi tuyệt vời.

00:01:16.000 --> 00:01:23.000
Trong macOS Ventura và iOS 16, chúng tôi rất vui mừng được cung cấp mật khẩu cho mọi người.

00:01:23.000 --> 00:01:26.000
Bây giờ là lúc để nhận nuôi chúng.

00:01:26.000 --> 00:01:42.000
Với mật khẩu, không chỉ trải nghiệm người dùng tốt hơn mật khẩu, mà còn toàn bộ các loại vấn đề bảo mật, như thông tin đăng nhập yếu và được sử dụng lại, rò rỉ thông tin xác thực và lừa đảo, cũng không thể thực hiện được nữa.

00:01:42.000 --> 00:01:45.000
Và chúng rất dễ sử dụng.

00:01:45.000 --> 00:01:47.000
Để tôi chỉ cho bạn.

00:01:47.000 --> 00:01:51.000
Hãy bắt đầu với ứng dụng demo yêu thích của chúng tôi, Shiny.

00:01:51.000 --> 00:01:59.000
Ứng dụng này cho phép tôi xem một bức ảnh dễ thương mỗi ngày và có quy trình đăng nhập dựa trên mật khẩu điển hình.

00:01:59.000 --> 00:02:04.000
Tôi có thể nhấn vào trường tên người dùng và thấy đề xuất Tự động điền cho tài khoản của mình.

00:02:04.000 --> 00:02:08.000
Tôi sẽ chọn cái đó, đăng nhập.

00:02:08.000 --> 00:02:12.000
Sau đó, tôi có thể điền mật khẩu của mình.

00:02:12.000 --> 00:02:20.000
Sau đó, tôi đợi một chút cho đến khi tin nhắn SMS đến cùng với mã một lần của tôi.

00:02:20.000 --> 00:02:22.000
Nó đây rồi.

00:02:22.000 --> 00:02:25.000
Và cuối cùng, tôi đã đăng nhập.

00:02:25.000 --> 00:02:33.000
Phải mất một vài bước, nhưng với sự trợ giúp của AutoFill và trình quản lý mật khẩu của tôi, tôi đã có thể đến đó.

00:02:33.000 --> 00:02:37.000
Bây giờ tôi đã đăng nhập, tôi sẽ thêm mật khẩu vào tài khoản này.

00:02:37.000 --> 00:02:41.000
Quản lý tài khoản, Thêm mật khẩu.

00:02:41.000 --> 00:02:45.000
Ở đây, tôi nhận được bảng hệ thống để tạo mật khẩu.

00:02:45.000 --> 00:02:47.000
Tiếp tục.

00:02:47.000 --> 00:02:48.000
Xong rồi!

00:02:48.000 --> 00:03:06.000
Chỉ trong vài thao tác, thiết bị của tôi đã tạo ra một cặp khóa độc đáo, mạnh về mặt mật mã cho tài khoản của tôi và lưu trữ nó trong Chuỗi khóa iCloud của tôi, vì vậy nó sẽ đồng bộ hóa và hoạt động trên tất cả các thiết bị của tôi chạy macOS Ventura và iOS 16.

00:03:06.000 --> 00:03:11.000
Bây giờ tôi đã có một mật khẩu, hãy để tôi cho bạn thấy nó dễ sử dụng như thế nào.

00:03:11.000 --> 00:03:18.000
Tôi sẽ đăng xuất, và tôi quay lại cùng một biểu mẫu đăng nhập mà tôi đã sử dụng trước đó.

00:03:18.000 --> 00:03:21.000
Tôi sẽ tập trung vào trường tên người dùng như trước đây.

00:03:21.000 --> 00:03:28.000
Bây giờ tôi đã lưu mật khẩu cho tài khoản của mình, nó sẽ hiển thị trong thanh QuickType.

00:03:28.000 --> 00:03:31.000
Tất cả những gì tôi phải làm là nhấn vào nó và tôi đã đăng nhập.

00:03:31.000 --> 00:03:34.000
Một bước.

00:03:34.000 --> 00:03:42.000
Khi lưu mật khẩu, tôi không phải đưa ra mật khẩu mới hoặc cố gắng đáp ứng bất kỳ yêu cầu phức tạp nào.

00:03:42.000 --> 00:03:52.000
Mỗi mật khẩu được tạo bởi hệ thống và đảm bảo mạnh mẽ và chỉ được sử dụng cho một tài khoản duy nhất.

00:03:52.000 --> 00:04:00.000
Và khi tôi đăng nhập bằng nó, nó có thể được hiển thị trong các luồng đăng nhập hiện có mà tôi đã quen và đó là một lần nhấn để sử dụng.

00:04:00.000 --> 00:04:10.000
Và hệ thống sẽ chỉ xử lý việc cho phép tôi sử dụng nó trong ứng dụng hoặc trang web chính xác, với khả năng chống lừa đảo tích hợp mạnh mẽ.

00:04:10.000 --> 00:04:14.000
Tất nhiên, mật khẩu cũng hoạt động trên web.

00:04:14.000 --> 00:04:17.000
Tôi đang ở đây trên trang web của Shiny trong Safari.

00:04:17.000 --> 00:04:27.000
Cũng giống như trên điện thoại của tôi, khi tôi tập trung vào trường tên người dùng, mật khẩu của tôi đã ở đó và sẵn sàng để sử dụng, nhờ vào Chuỗi khóa iCloud.

00:04:27.000 --> 00:04:30.000
Tất cả những gì tôi phải làm là Touch ID và tôi đã đăng nhập.

00:04:30.000 --> 00:04:32.000
Thế là xong.

00:04:32.000 --> 00:04:37.000
Việc triển khai mật khẩu của Apple được xây dựng trên các tiêu chuẩn mở.

00:04:37.000 --> 00:04:49.000
Chúng tôi đã làm việc với các nhà cung cấp nền tảng khác trong Liên minh FIDO để đảm bảo rằng việc triển khai mật khẩu tương thích với đa nền tảng và có thể hoạt động trên càng nhiều thiết bị càng tốt.

00:04:49.000 --> 00:04:57.000
Sau khi nâng cấp tài khoản của mình để sử dụng mật khẩu, tôi vẫn có thể đăng nhập vào nó trên PC của bạn tôi.

00:04:57.000 --> 00:05:05.000
Tất nhiên, PC của bạn tôi không có mật khẩu được lưu cục bộ, nhưng tôi vẫn có thể nhập tên người dùng của mình ở đây.

00:05:05.000 --> 00:05:11.000
Khi tôi nhấn Đăng nhập, tôi nhận được một tờ đề nghị cho phép tôi sử dụng điện thoại của mình.

00:05:11.000 --> 00:05:16.000
Sau đó tôi nhận được một mã QR. Hãy để tôi quét cái đó.

00:05:16.000 --> 00:05:22.000
Điện thoại của tôi nhận ra rằng mã QR này là để đăng nhập bằng mật khẩu.

00:05:22.000 --> 00:05:29.000
Khi tôi chọn tùy chọn này, điện thoại và trình duyệt của tôi kết nối an toàn với nhau.

00:05:29.000 --> 00:05:34.000
Bây giờ tôi chỉ có thể Tiếp tục, và tôi đã đăng nhập.

00:05:34.000 --> 00:05:43.000
Trải nghiệm đăng nhập đa nền tảng này là một tính năng hệ thống hạng nhất là một phần của các tiêu chuẩn đằng sau khóa mật khẩu.

00:05:43.000 --> 00:05:49.000
Nhìn bề ngoài, nó có vẻ cực kỳ đơn giản, nhưng đây không chỉ là mã QR.

00:05:49.000 --> 00:06:07.000
Đằng sau hậu trường, các thiết bị đang thực hiện thỏa thuận khóa cục bộ, chứng minh sự gần gũi, thiết lập kênh giao tiếp được mã hóa đầu cuối, tất cả để cho phép bạn đăng nhập theo cách dễ dàng nhưng vẫn duy trì khả năng chống lừa đảo mạnh mẽ của khóa mật khẩu.

00:06:07.000 --> 00:06:14.000
Nó hoạt động rất tốt khi cho phép tôi đăng nhập an toàn vào tài khoản của mình trên bất kỳ thiết bị nào.

00:06:14.000 --> 00:06:22.000
Một tính năng quan trọng khác để thay thế mật khẩu là khả năng chia sẻ tài khoản giữa hai hoặc nhiều người.

00:06:22.000 --> 00:06:28.000
Để chia sẻ mật khẩu với người khác, tôi có thể sử dụng AirDrop.

00:06:28.000 --> 00:06:35.000
Đối tác của tôi và tôi cũng có một tài khoản cho Shiny mà chúng tôi chia sẻ, mà tôi đã nâng cấp để sử dụng mật khẩu.

00:06:35.000 --> 00:06:43.000
Với mật khẩu, thông tin xác thực không phải là thứ tôi có thể nhập, nhưng tôi vẫn có thể chia sẻ nó với những người mà tôi tin tưởng.

00:06:43.000 --> 00:06:48.000
Trên điện thoại của tôi, tôi sẽ mở chi tiết tài khoản.

00:06:48.000 --> 00:06:54.000
Đây là tất cả các tài khoản của tôi, sử dụng cả mật khẩu và mật khẩu.

00:06:54.000 --> 00:06:58.000
Tôi có thể nhấn vào tài khoản được chia sẻ của chúng tôi để xem thêm chi tiết.

00:06:58.000 --> 00:07:04.000
Tại đây, tôi có thể nhận được một số thông tin về mật khẩu đã lưu của mình hoặc thêm ghi chú vào tài khoản này.

00:07:04.000 --> 00:07:08.000
Tôi cũng có thể chia sẻ mật khẩu của mình.

00:07:08.000 --> 00:07:09.000
Đây là điện thoại của đối tác của tôi.

00:07:09.000 --> 00:07:14.000
Tôi sẽ tiếp tục và chọn cái đó.

00:07:14.000 --> 00:07:19.000
Bây giờ đối tác của tôi cũng có mật khẩu.

00:07:19.000 --> 00:07:25.000
Và đó là cách dễ dàng để sử dụng mật khẩu ở mọi nơi.

00:07:25.000 --> 00:07:29.000
Tôi vừa trải qua trải nghiệm sử dụng mật khẩu.

00:07:29.000 --> 00:07:36.000
Tiếp theo, tôi sẽ nói về mật khẩu là gì và một số hướng dẫn giao diện khi sử dụng chúng.

00:07:36.000 --> 00:07:52.000
Sau đó, tôi sẽ chỉ cho bạn cách bạn có thể tích hợp mật khẩu vào các luồng đăng nhập hiện có trong các ứng dụng và trang web của mình, bằng cách tận dụng tính năng Tự động điền, tiếp theo là một số tùy chọn bổ sung có thể hợp lý hóa hơn nữa quy trình đăng nhập của bạn.

00:07:52.000 --> 00:08:04.000
Sau đó, tôi sẽ đi sâu vào một số chi tiết kỹ thuật hơn về cách hoạt động của khóa mật khẩu và cuối cùng, thảo luận về khóa mật khẩu và xác thực đa yếu tố.

00:08:04.000 --> 00:08:07.000
Đầu tiên, thiết kế cho passkeys.

00:08:07.000 --> 00:08:15.000
Khi nói về mật khẩu, đầu tiên và quan trọng nhất, mật khẩu là sự thay thế cho mật khẩu.

00:08:15.000 --> 00:08:23.000
Chúng đăng nhập nhanh hơn, dễ sử dụng hơn và an toàn hơn rất nhiều.

00:08:23.000 --> 00:08:29.000
Dưới đây là một số hướng dẫn về cách tham khảo mật khẩu trong các ứng dụng và trang web của bạn.

00:08:29.000 --> 00:08:33.000
"Passkey" là một thuật ngữ chung chung, có thể nhìn thấy của người dùng.

00:08:33.000 --> 00:08:45.000
Video này tập trung vào việc triển khai của Apple, nhưng như tôi vừa chỉ cho bạn, các nền tảng chính khác đã bắt đầu xây dựng sự hỗ trợ của riêng họ cho mật khẩu.

00:08:45.000 --> 00:08:49.000
"Mật khẩu" cũng là một danh từ phổ biến, như "mật khẩu".

00:08:49.000 --> 00:08:54.000
Trong tiếng Anh, điều này có nghĩa là nó viết thường và được số nhiều như "mật khẩu".

00:08:54.000 --> 00:09:03.000
Tôi có một mật khẩu cho tài khoản của mình và tôi có thể vào Cài đặt để xem tất cả các tài khoản của mình bằng mật khẩu.

00:09:03.000 --> 00:09:15.000
Trên các nền tảng của Apple, bạn cũng có thể sử dụng SF Symbol person.key.badge và biến thể .fill để cung cấp biểu tượng phù hợp với hệ thống.

00:09:15.000 --> 00:09:24.000
Khi nói đến việc cung cấp mật khẩu trong các ứng dụng và trang web của bạn, bạn không cần phải thiết kế toàn bộ giao diện mới.

00:09:24.000 --> 00:09:30.000
Trường tên người dùng là điểm trung tâm cho hầu hết các đăng nhập ứng dụng và trang web ngày nay.

00:09:30.000 --> 00:09:40.000
Khá nhiều người đều biết cách sử dụng nó, và nhiều ứng dụng và trang web đã tận dụng nó để điều chỉnh trải nghiệm đăng nhập cho mỗi tài khoản.

00:09:40.000 --> 00:09:45.000
Bây giờ trường tên người dùng có một tính năng lớn khác.

00:09:45.000 --> 00:09:55.000
Trong khi mật khẩu mang đến các mô hình mới về cách đăng nhập hoạt động, quá trình chuyển đổi khỏi mật khẩu cũng cần phải trơn tru và dễ dàng.

00:09:55.000 --> 00:10:10.000
Bây giờ bạn có thể trình bày các khóa mật khẩu bằng cách sử dụng Tự động điền như một tính năng hạng nhất, cho phép bạn thả chúng ngay vào các luồng đăng nhập hiện có của mình, trong một giao diện quen thuộc và mọi người biết cách sử dụng.

00:10:10.000 --> 00:10:15.000
Trình bày mật khẩu với AutoFill là cách chính bạn nên sử dụng chúng.

00:10:15.000 --> 00:10:25.000
Tuy nhiên, để sử dụng nâng cao hơn, các nền tảng của Apple cũng có một loạt các tùy chọn giao diện người dùng bổ sung để đăng nhập bằng mật khẩu.

00:10:25.000 --> 00:10:30.000
Đây là cách bắt đầu sử dụng mật khẩu và trình bày chúng bằng Tự động điền.

00:10:30.000 --> 00:10:37.000
Mật mã được xây dựng trên WebAuthentication - hoặc tiêu chuẩn WebAuthn - và sử dụng mật mã khóa công khai.

00:10:37.000 --> 00:10:46.000
Thay vì có một từ hoặc chuỗi có thể đánh máy, các cặp khóa mật mã duy nhất được tạo cho mọi tài khoản.

00:10:46.000 --> 00:10:52.000
Bạn sẽ cần áp dụng WebAuthn trên mặt sau máy chủ của mình để thực hiện đăng nhập mật khẩu.

00:10:52.000 --> 00:10:59.000
Bất kỳ triển khai máy chủ WebAuthn tiêu chuẩn nào cũng phải hoạt động với mật khẩu.

00:10:59.000 --> 00:11:08.000
Trong các ứng dụng trên nền tảng Apple, mật khẩu là một phần của họ ASAuthorization API trong khuôn khổ AuthenticationServices.

00:11:08.000 --> 00:11:17.000
Đây là API của chúng tôi để làm việc với tất cả các loại thông tin đăng nhập khác nhau, bao gồm mật khẩu, khóa bảo mật và Đăng nhập bằng Apple.

00:11:17.000 --> 00:11:30.000
Chúng tôi cũng đã thêm một vài phương pháp mới mà bạn có thể sử dụng, như hỗ trợ Tự động điền, để làm cho API này linh hoạt hơn và cho phép bạn phù hợp liền mạch với các luồng đăng nhập hiện tại của mình.

00:11:30.000 --> 00:11:39.000
Để bắt đầu sử dụng mật khẩu trong ứng dụng của bạn, trước tiên, bạn sẽ cần thiết lập các miền liên quan, sử dụng dịch vụ thông tin xác thực web.

00:11:39.000 --> 00:11:47.000
Bạn có thể tìm thêm thông tin chi tiết về điều đó trong các video "Giới thiệu Tự động điền mật khẩu cho ứng dụng" và "Có gì mới trong Liên kết chung".

00:11:47.000 --> 00:11:54.000
Trong giao diện ứng dụng của bạn, hãy đảm bảo trường tên người dùng của bạn đang sử dụng tên người dùng textContentTtype.

00:11:54.000 --> 00:11:59.000
Điều này cho phép hệ thống biết nơi đưa ra các đề xuất mật khẩu.

00:11:59.000 --> 00:12:05.000
Khi điều đó được định cấu hình, đây là mã cần thiết để bắt đầu yêu cầu mật khẩu được hỗ trợ Tự động điền.

00:12:05.000 --> 00:12:09.000
Nó chỉ là một vài bước đơn giản khi bạn phá vỡ nó.

00:12:09.000 --> 00:12:16.000
Như với bất kỳ yêu cầu WebAuthn nào, trước tiên bạn sẽ cần tìm nạp thử thách từ máy chủ của mình.

00:12:16.000 --> 00:12:19.000
Sau đó tạo nhà cung cấp và yêu cầu.

00:12:19.000 --> 00:12:28.000
ASAuthorizationPlatformPublicKey CredentialProvider là ASAuthorizationProvider để làm việc với các yêu cầu mật khẩu.

00:12:28.000 --> 00:12:38.000
Trong các thuật ngữ WebAuthn, các xác nhận được sử dụng khi đăng nhập, vì vậy ở đây, tôi đang tạo một yêu cầu xác nhận để đăng nhập bằng một mật khẩu hiện có.

00:12:38.000 --> 00:12:42.000
ASAuthorizationController là thứ thực sự xử lý yêu cầu.

00:12:42.000 --> 00:12:50.000
Tạo một phiên bản với yêu cầu mật khẩu và định cấu hình đại diện và trình bày của nóContextProvider.

00:12:50.000 --> 00:12:56.000
Và cuối cùng, hãy gọi performAutoFillAssistedRequests để bắt đầu yêu cầu.

00:12:56.000 --> 00:13:05.000
Trong khi yêu cầu này đang chạy trong ứng dụng của bạn, bất cứ khi nào trường tên người dùng được tập trung, hệ thống sẽ cung cấp các mật khẩu có sẵn trong thanh QuickType.

00:13:05.000 --> 00:13:15.000
Đảm bảo bắt đầu yêu cầu này sớm trong vòng đời xem của bạn trước khi trường tên người dùng được tập trung, vì vậy các phím mật khẩu đã sẵn sàng khi bàn phím xuất hiện.

00:13:15.000 --> 00:13:26.000
Khi một mục từ thanh QuickType được chọn, Face ID được gọi, sau đó bạn sẽ nhận được cuộc gọi lại ASAuthorizationController Delegate để hoàn tất đăng nhập.

00:13:26.000 --> 00:13:29.000
Không có gì thực sự được điền vào trường văn bản của bạn.

00:13:29.000 --> 00:13:37.000
Khi ủy quyền thành công cho bất kỳ loại thông tin xác thực nào, bạn sẽ nhận được cuộc gọi lại didCompleteWithAuthorization.

00:13:37.000 --> 00:13:41.000
Điều đầu tiên bạn nên làm là kiểm tra loại thông tin xác thực mà bạn có.

00:13:41.000 --> 00:13:50.000
Trong trường hợp đăng nhập passkey, nó sẽ là ASAuthorizationPlatformPublicKey CredentialAssertion.

00:13:50.000 --> 00:13:55.000
Đối tượng xác nhận sẽ chứa các trường cần thiết để xác minh đăng nhập ở mặt sau của bạn.

00:13:55.000 --> 00:14:01.000
Bạn nên đọc các giá trị, xác minh chúng với máy chủ của mình và hoàn tất đăng nhập.

00:14:01.000 --> 00:14:04.000
Các yêu cầu mật khẩu được hỗ trợ tự động điền rất mạnh mẽ.

00:14:04.000 --> 00:14:11.000
Với sự thay đổi mã nhỏ đó, quy trình đăng nhập ứng dụng của bạn giờ đây cung cấp rất nhiều tính linh hoạt.

00:14:11.000 --> 00:14:19.000
Tất nhiên, trường hợp chính là chọn đề xuất mật khẩu từ thanh QuickType để đăng nhập nhanh chóng bằng mật khẩu đó.

00:14:19.000 --> 00:14:24.000
Đây là điều bạn nên mong đợi xảy ra thường xuyên nhất.

00:14:24.000 --> 00:14:26.000
Tuy nhiên, có những lựa chọn khác.

00:14:26.000 --> 00:14:33.000
Mã tôi vừa cho bạn xem cũng cho phép đăng nhập mật khẩu từ các thiết bị gần đó mà không cần thay đổi thêm.

00:14:33.000 --> 00:14:43.000
Bạn có thể nhấn vào biểu tượng phím để hiển thị chế độ xem liệt kê tất cả các mật khẩu và mật khẩu có sẵn và truy cập tùy chọn đăng nhập bằng thiết bị gần đó.

00:14:43.000 --> 00:14:47.000
Sau đó, bạn có thể thực hiện đăng nhập mật khẩu đa thiết bị.

00:14:47.000 --> 00:14:55.000
Trong cả hai trường hợp, nếu mật khẩu được sử dụng, bạn sẽ nhận được cùng một cuộc gọi lại ASAuthorizationController Delegate.

00:14:55.000 --> 00:14:59.000
Không có gì đặc biệt bạn cần làm để hỗ trợ điều này.

00:14:59.000 --> 00:15:05.000
Nếu người dùng chưa có bất kỳ mật khẩu nào, họ chỉ có thể sử dụng biểu mẫu đăng nhập của bạn như họ đã quen.

00:15:05.000 --> 00:15:11.000
Họ sẽ nhận được đề xuất mật khẩu trong thanh QuickType hoặc họ chỉ có thể nhập vào các trường.

00:15:11.000 --> 00:15:21.000
Nếu một mục mật khẩu được chọn, thông tin xác thực sẽ vẫn được điền vào các trường văn bản của bạn và bạn có thể hủy yêu cầu đang chạy.

00:15:21.000 --> 00:15:30.000
Chúng tôi đã thiết kế API này để cho phép bạn thả nó ngay vào quy trình đăng nhập hiện tại của mình và làm cho nó cực kỳ dễ dàng cho người dùng của bạn.

00:15:30.000 --> 00:15:46.000
Nếu ai đó đã nâng cấp lên sử dụng mật khẩu quyết định nhập tên người dùng của họ thay vì sử dụng đề xuất Tự động điền, bạn nên hủy yêu cầu Tự động điền và sử dụng ASAuthorizationController để trình bày bảng đăng nhập mật khẩu phương thức.

00:15:46.000 --> 00:15:53.000
Từ đây, nó vẫn chỉ là một cú chạm và bạn sẽ nhận được cùng một cuộc gọi lại ASAuthorizationController Delegate.

00:15:53.000 --> 00:15:56.000
Đây là mã từ trước.

00:15:56.000 --> 00:16:07.000
Để chuyển điều này từ yêu cầu Tự động điền sang yêu cầu phương thức, chỉ cần hoán đổi lệnh gọi phương thức performAutoFillAssistedRequests này với lệnh gọi performRequests().

00:16:07.000 --> 00:16:16.000
Điều này sẽ trình bày một bảng phương thức với tất cả các mật khẩu có sẵn cũng như tùy chọn sử dụng mật khẩu từ một thiết bị gần đó.

00:16:16.000 --> 00:16:22.000
Đó là những thay đổi mã duy nhất bạn cần trong ứng dụng của mình để hỗ trợ mật khẩu.

00:16:22.000 --> 00:16:28.000
Nền tảng web cũng hỗ trợ cả yêu cầu mật khẩu hỗ trợ AutoFill và phương thức.

00:16:28.000 --> 00:16:36.000
Trên web, mật khẩu được sử dụng thông qua WebAuthn API tiêu chuẩn, cũng được sử dụng cho các khóa bảo mật.

00:16:36.000 --> 00:16:54.000
Cũng giống như trong các ứng dụng, việc áp dụng các yêu cầu hỗ trợ Tự động điền cho phép đăng nhập nhanh chóng chỉ bằng Touch ID, truy cập tất cả các mật khẩu và mật khẩu có sẵn của bạn hoặc sử dụng mật khẩu từ thiết bị gần đó, tất cả đều có rất ít mã.

00:16:54.000 --> 00:17:10.000
Trước hết, hãy đảm bảo chú thích trường tên người dùng của bạn trên trang web của bạn bằng cả tên người dùng và mã thông báo chi tiết tự động hoàn thành webauthn, để cả đề xuất mật khẩu và mật khẩu đều được hiển thị đúng nơi.

00:17:10.000 --> 00:17:16.000
Sau khi hoàn tất, đây là đăng nhập WebAuthn điển hình, trong JavaScript.

00:17:16.000 --> 00:17:22.000
Trong WebAuthn, các yêu cầu kiểu AutoFill được gọi bằng cách sử dụng hòa giải có điều kiện.

00:17:22.000 --> 00:17:29.000
Bạn nên bắt đầu bằng cách sử dụng tính năng phát hiện JavaScript tiêu chuẩn để kiểm tra xem nó có khả dụng hay không.

00:17:29.000 --> 00:17:33.000
Nếu có, bạn có thể tiến hành đưa ra yêu cầu của mình.

00:17:33.000 --> 00:17:40.000
Cũng giống như với API gốc, bạn sẽ bắt đầu bằng cách thực hiện yêu cầu bằng cách sử dụng thử thách được tìm nạp từ máy chủ của bạn.

00:17:40.000 --> 00:17:47.000
Để biến nó thành một yêu cầu hỗ trợ Tự động điền, hãy thêm tham số hòa giải: "có điều kiện" vào các tùy chọn của bạn.

00:17:47.000 --> 00:17:53.000
Sau đó, sử dụng navigator.credentials .get để bắt đầu yêu cầu.

00:17:53.000 --> 00:17:56.000
Cuộc gọi .get trả về một lời hứa.

00:17:56.000 --> 00:18:04.000
Nếu nó được giải quyết, bạn sẽ nhận được một đối tượng xác nhận, bạn có thể gửi lại cho máy chủ của mình để xác minh, sau đó hoàn tất đăng nhập.

00:18:04.000 --> 00:18:15.000
Giống như trong các ứng dụng, nếu ai đó nhập thủ công tên người dùng cho tài khoản bằng mật khẩu, bạn nên sử dụng API để trình bày bảng đăng nhập phương thức.

00:18:15.000 --> 00:18:22.000
Để chuyển sang yêu cầu phương thức, tất cả những gì bạn cần làm là xóa tham số hòa giải: "có điều kiện".

00:18:22.000 --> 00:18:29.000
Một điều cần lưu ý khi sử dụng WebAuthn là cách các nền tảng của Apple xử lý xác minh người dùng - hoặc UV.

00:18:29.000 --> 00:18:39.000
UV là một trường Boolean trong phản hồi WebAuthn cho biết liệu trình xác thực có cố gắng xác minh rằng người dùng hiện tại là chủ sở hữu của thiết bị hay không.

00:18:39.000 --> 00:18:47.000
Trên các thiết bị Apple, giá trị của một chỉ ra rằng sinh trắc học, hoặc mật khẩu hoặc mật mã đã được sử dụng.

00:18:47.000 --> 00:18:55.000
Các nền tảng của Apple sẽ luôn yêu cầu tia cực tím cho mật khẩu khi sinh trắc học có sẵn, vì vậy bạn không phải lo lắng về điều đó.

00:18:55.000 --> 00:19:02.000
Khi thực hiện các yêu cầu WebAuthn, có một tùy chọn để chỉ định yêu cầu xác minh người dùng.

00:19:02.000 --> 00:19:06.000
Giá trị mặc định là userVerification: "preferred".

00:19:06.000 --> 00:19:14.000
Luôn sử dụng giá trị mặc định để tránh tạo ra trải nghiệm xấu trên các thiết bị không có sinh trắc học.

00:19:14.000 --> 00:19:18.000
Đây là một số ghi chú bổ sung để sử dụng mật khẩu trên web.

00:19:18.000 --> 00:19:25.000
Khi bạn thực hiện các yêu cầu hỗ trợ Tự động điền, bạn nên thực hiện chúng sớm trong vòng đời trang, giống như trong các ứng dụng.

00:19:25.000 --> 00:19:32.000
Đối với các yêu cầu WebAuthn phương thức, bạn nên kích hoạt chúng từ sự kiện cử chỉ người dùng, chẳng hạn như nhấp vào nút.

00:19:32.000 --> 00:19:44.000
Một yêu cầu phương thức có thể được kích hoạt một lần cho mỗi trang tải bên ngoài sự kiện cử chỉ người dùng, nhưng WebKit có thể giới hạn các cuộc gọi tiếp theo trên trang đó nếu bạn làm như vậy.

00:19:44.000 --> 00:19:52.000
Yêu cầu Tự động điền không phải là phương thức, vì vậy chúng không yêu cầu cử chỉ người dùng và có thời gian chờ lâu hơn nhiều.

00:19:52.000 --> 00:19:58.000
Cuối cùng, mật khẩu đang thay thế trình xác thực nền tảng kế thừa của Safari.

00:19:58.000 --> 00:20:08.000
Thông tin đăng nhập hiện tại sẽ vẫn hoạt động và vẫn bị ràng buộc với thiết bị mà chúng được tạo, nhưng thông tin đăng nhập nền tảng mới sẽ được tạo dưới dạng mật khẩu.

00:20:08.000 --> 00:20:17.000
Chúng có thể được phân biệt với thông tin đăng nhập kế thừa trong quá trình đăng ký, vì mật khẩu sẽ không cung cấp tuyên bố chứng thực.

00:20:17.000 --> 00:20:19.000
Đó là mật khẩu và Tự động điền.

00:20:19.000 --> 00:20:26.000
Tiếp theo, tôi sẽ xem xét một số tính năng nền tảng bổ sung có thể hợp lý hóa hơn nữa trải nghiệm đăng nhập của bạn.

00:20:26.000 --> 00:20:34.000
Ngoài việc đăng nhập được hỗ trợ Tự động điền, ASAuthorization API cung cấp nhiều tính năng hữu ích hơn.

00:20:34.000 --> 00:20:39.000
Tôi sẽ đề cập đến ba tính năng bổ sung của API và khi nào bạn có thể muốn sử dụng chúng.

00:20:39.000 --> 00:20:43.000
Bắt đầu với danh sách cho phép mật khẩu.

00:20:43.000 --> 00:20:52.000
Khi trình bày bảng mật khẩu phương thức sau khi nhập tên người dùng, có thể có mật khẩu cho nhiều tài khoản được lưu trên thiết bị.

00:20:52.000 --> 00:20:56.000
Tất cả các mật khẩu có sẵn sẽ được hiển thị trong trang tính theo mặc định.

00:20:56.000 --> 00:21:05.000
Bạn có thể sử dụng danh sách cho phép mật khẩu để hạn chế mật khẩu nào được hiển thị trong trang tính, để chỉ cung cấp tài khoản phù hợp.

00:21:05.000 --> 00:21:10.000
Để thêm danh sách cho phép vào yêu cầu phương thức, trước tiên bạn sẽ cần tên người dùng.

00:21:10.000 --> 00:21:17.000
Bạn có thể sử dụng tên người dùng đó để tìm nạp danh sách ID thông tin xác thực phù hợp và biến nó thành danh sách cho phép.

00:21:17.000 --> 00:21:22.000
ID thông tin xác thực là một mã định danh duy nhất cho mật khẩu.

00:21:22.000 --> 00:21:28.000
Máy chủ Webauthn nên có cách tra cứu ID thông tin xác thực cho một tên người dùng nhất định.

00:21:28.000 --> 00:21:32.000
Từ đây, chỉ cần tiến hành yêu cầu của bạn như trước đây.

00:21:32.000 --> 00:21:42.000
Bây giờ, trên thiết bị của tôi có ba tài khoản Shiny sử dụng mật khẩu, trang tính chỉ cung cấp một tài khoản duy nhất mà tôi đang cố gắng sử dụng.

00:21:42.000 --> 00:21:54.000
Khi thực hiện các yêu cầu phương thức, bạn nên sử dụng danh sách cho phép khi bạn có thêm ngữ cảnh về tài khoản mà người dùng đang cố gắng đăng nhập, chẳng hạn như nếu họ đã nhập tên người dùng của họ.

00:21:54.000 --> 00:22:02.000
Tiếp theo, tôi sẽ đề cập đến những gì xảy ra khi bạn thực hiện yêu cầu mật khẩu phương thức nếu không có mật khẩu nào được lưu trên thiết bị hiện tại.

00:22:02.000 --> 00:22:08.000
Điều này cũng áp dụng nếu bạn sử dụng danh sách cho phép và không có mật khẩu nào được lưu khớp với danh sách đó.

00:22:08.000 --> 00:22:23.000
Theo mặc định, khi bạn thực hiện yêu cầu mật khẩu phương thức, nếu không có mật khẩu phù hợp, bảng mật khẩu sẽ được hiển thị và sẽ ngay lập tức hiển thị mã QR để đăng nhập bằng mật khẩu từ thiết bị gần đó.

00:22:23.000 --> 00:22:30.000
Điều này cung cấp sự linh hoạt nhất khi đăng nhập và là lựa chọn tốt nhất khi bạn biết mật khẩu đang được sử dụng.

00:22:30.000 --> 00:22:39.000
Nhưng có một tùy chọn mới trong API để ưu tiên thông tin đăng nhập có sẵn ngay lập tức và im lặng quay lại với lệnh gọi lại đại diện nếu không có.

00:22:39.000 --> 00:22:47.000
Điều này có thể được sử dụng để nhanh chóng cung cấp thông tin đăng nhập hiện có khi có thể, thậm chí trước khi hiển thị biểu mẫu đăng nhập truyền thống.

00:22:47.000 --> 00:22:56.000
Yêu cầu phương thức này sử dụng các tùy chọn mặc định sẽ quay lại hiển thị mã QR nếu không có mật khẩu phù hợp trên thiết bị hiện tại.

00:22:56.000 --> 00:23:07.000
Nếu bạn sử dụng tùy chọn preferImmediately AvailableCredentials, thay vì nhận mã QR, bạn sẽ nhận được một cuộc gọi lại đại diện với một lỗi.

00:23:07.000 --> 00:23:23.000
Nếu bạn nhận được ASAuthorizationError với mã bị hủy, điều đó có nghĩa là người dùng đã nhìn thấy trang tính và loại bỏ nó theo cách thủ công, hoặc bạn đã vượt qua preferImmediately AvailableCredentials và không có thông tin đăng nhập nào có sẵn ngay lập tức.

00:23:23.000 --> 00:23:28.000
Những gì bạn làm từ đây phụ thuộc vào bối cảnh mà bạn gọi điều này.

00:23:28.000 --> 00:23:40.000
Ví dụ: nếu bạn đang sử dụng tùy chọn này như một cách để kiểm tra thông tin đăng nhập cục bộ trước khi hiển thị biểu mẫu đăng nhập thông thường của mình, đây là nơi sẽ kích hoạt hiển thị biểu mẫu của bạn.

00:23:40.000 --> 00:23:48.000
Nếu có ít nhất một thông tin xác thực phù hợp trên thiết bị, bảng phương thức đầy đủ sẽ được hiển thị bất kể các tùy chọn được sử dụng.

00:23:48.000 --> 00:24:06.000
Đảm bảo rằng bạn cũng đang sử dụng các yêu cầu hỗ trợ Tự động điền hoặc yêu cầu phương thức với dự phòng mặc định ở đâu đó trong ứng dụng của bạn, để vẫn có thể truy cập tùy chọn đăng nhập bằng thiết bị gần đó nếu không có mật khẩu trên thiết bị hiện tại.

00:24:06.000 --> 00:24:13.000
Tính năng cuối cùng của ASAuthorization API mà tôi sẽ đề cập đến là thực hiện các yêu cầu thông tin xác thực kết hợp.

00:24:13.000 --> 00:24:21.000
Trong ví dụ này, ứng dụng đã yêu cầu mật khẩu, mật khẩu và Đăng nhập bằng Apple.

00:24:21.000 --> 00:24:29.000
Thiết bị của tôi tình cờ có ba thông tin đăng nhập khác nhau cho ba tài khoản khác nhau được lưu, vì vậy tất cả chúng đều được trình bày ở đây.

00:24:29.000 --> 00:24:34.000
Nhưng một kịch bản có nhiều khả năng hơn là ai đó sẽ chỉ có một tài khoản duy nhất.

00:24:34.000 --> 00:24:40.000
Trong trường hợp đó, cùng một yêu cầu thông tin xác thực kết hợp này sẽ chỉ cung cấp một tài khoản trong trang tính.

00:24:40.000 --> 00:24:47.000
Thêm các loại thông tin xác thực bổ sung vào yêu cầu ASAuthorization hiện có thực sự dễ dàng.

00:24:47.000 --> 00:24:56.000
Bạn chỉ cần tạo nhà cung cấp và yêu cầu cho các loại yêu cầu bổ sung, sau đó chuyển những yêu cầu mới đó đến bộ điều khiển của bạn.

00:24:56.000 --> 00:25:02.000
Bây giờ, bảng phương thức sẽ cung cấp bất kỳ thông tin xác thực nào có sẵn từ bất kỳ loại thông tin xác thực nào trong số này.

00:25:02.000 --> 00:25:07.000
Bạn sẽ nhận được cùng một cuộc gọi lại đại diện bất kể loại thông tin xác thực nào được sử dụng.

00:25:07.000 --> 00:25:15.000
Bạn nên kiểm tra loại thông tin xác thực bạn nhận được và hoàn tất đăng nhập phù hợp với loại thông tin xác thực đó.

00:25:15.000 --> 00:25:21.000
Vì vậy, điều đó bao gồm một vài tính năng nâng cao hơn của họ API ASAuthorization.

00:25:21.000 --> 00:25:29.000
Bây giờ, tôi sẽ tìm hiểu thêm một số chi tiết kỹ thuật về cách chìa khóa mật khẩu thực sự hoạt động và điều gì khiến chúng trở nên an toàn như vậy.

00:25:29.000 --> 00:25:44.000
Khi bạn đăng nhập bằng mật khẩu ngày hôm nay, nói chung những gì thực sự xảy ra là sau khi bạn nhập mật khẩu đó, nó sẽ được băm và muối, và giá trị bị xáo trộn kết quả được gửi đến máy chủ, nơi lưu trữ nó.

00:25:44.000 --> 00:25:51.000
Sau đó, nếu bạn có thể tạo ra cùng một giá trị muối băm, bạn được phép vào tài khoản.

00:25:51.000 --> 00:25:59.000
Điều này có nghĩa là máy chủ chịu trách nhiệm lưu trữ nguồn gốc mật khẩu này của bạn, mật khẩu này rất có giá trị đối với những kẻ tấn công.

00:25:59.000 --> 00:26:06.000
Nếu họ có thể lấy nó, có thể tìm ra mật khẩu của bạn là gì và có quyền truy cập vào tài khoản của bạn.

00:26:06.000 --> 00:26:10.000
Tuy nhiên, mật khẩu hoạt động rất khác nhau.

00:26:10.000 --> 00:26:16.000
Thay vì có một chuỗi duy nhất, có thể đánh máy, mật khẩu thực sự là một cặp khóa liên quan.

00:26:16.000 --> 00:26:23.000
Các khóa này được tạo bởi các thiết bị của bạn, an toàn và duy nhất, cho mọi tài khoản.

00:26:23.000 --> 00:26:27.000
Một cái là công khai và được lưu trữ trên máy chủ.

00:26:27.000 --> 00:26:33.000
Cái còn lại là riêng tư và vẫn ở trên thiết bị của bạn ngay cả khi đăng nhập.

00:26:33.000 --> 00:26:36.000
Khóa công khai không phải là bí mật.

00:26:36.000 --> 00:26:40.000
Nó cũng công khai như tên người dùng của bạn.

00:26:40.000 --> 00:26:44.000
Khóa riêng tư là thứ cần thiết để thực sự đăng nhập.

00:26:44.000 --> 00:26:50.000
Máy chủ không bao giờ biết khóa riêng tư của bạn là gì và các thiết bị của bạn giữ nó an toàn.

00:26:50.000 --> 00:26:57.000
Khi bạn đăng nhập, máy chủ sẽ gửi cho thiết bị của bạn một thử thách sử dụng một lần.

00:26:57.000 --> 00:27:07.000
WebAuthn cho phép nhiều thuật toán phản hồi thử thách khác nhau, nhưng mật khẩu trên nền tảng Apple sử dụng ES256 tiêu chuẩn.

00:27:07.000 --> 00:27:14.000
Chỉ có khóa riêng tư của bạn mới có khả năng tạo ra một giải pháp hợp lệ cho thách thức đối với tài khoản của bạn.

00:27:14.000 --> 00:27:23.000
Thiết bị của bạn tạo ra giải pháp này - được gọi là chữ ký - cục bộ và chỉ gửi giải pháp trở lại máy chủ.

00:27:23.000 --> 00:27:28.000
Khóa riêng tư của bạn vẫn được giữ bí mật và chỉ trên các thiết bị của bạn.

00:27:28.000 --> 00:27:34.000
Sau đó, máy chủ xác thực giải pháp bằng khóa công khai của bạn.

00:27:34.000 --> 00:27:39.000
Nếu giải pháp mà thiết bị của bạn cung cấp là hợp lệ, bạn đã đăng nhập!

00:27:39.000 --> 00:27:47.000
Khóa công khai có thể được sử dụng để kiểm tra xem một giải pháp có hợp lệ hay không nhưng không thể tự tạo ra giải pháp.

00:27:47.000 --> 00:27:55.000
Điều này có nghĩa là máy chủ có thể chắc chắn rằng bạn có khóa riêng phù hợp mà không cần biết khóa riêng tư thực sự là gì.

00:27:55.000 --> 00:28:06.000
Và vì máy chủ không biết bất kỳ khóa riêng tư nào, đó là mục tiêu ít giá trị hơn đối với những kẻ tấn công, bởi vì không có thông tin đăng nhập người dùng nào bị rò rỉ.

00:28:06.000 --> 00:28:13.000
Tất cả mật mã và bảo vệ khóa này hoàn toàn minh bạch và được thực hiện bởi các thiết bị.

00:28:13.000 --> 00:28:17.000
Khách hàng của bạn không bao giờ phải biết hay nghĩ về nó.

00:28:17.000 --> 00:28:23.000
Theo quan điểm của họ, chìa khóa mật khẩu cực kỳ đơn giản và chỉ hoạt động, ở mọi nơi.

00:28:23.000 --> 00:28:30.000
Mật khẩu cũng có thể được sử dụng để đăng nhập trên các thiết bị một cách an toàn, chống lừa đảo.

00:28:30.000 --> 00:28:33.000
Đây là cách nó hoạt động.

00:28:33.000 --> 00:28:34.000
Có hai thiết bị ở đây.

00:28:34.000 --> 00:28:44.000
Khách hàng, đó là thiết bị hoặc trình duyệt web nơi tôi đang đăng nhập và trình xác thực, là thiết bị có mật khẩu của tôi.

00:28:44.000 --> 00:28:49.000
Đầu tiên, khách hàng hiển thị mã QR mà trình xác thực quét.

00:28:49.000 --> 00:28:56.000
Mã QR này chứa một URL mã hóa một cặp khóa mã hóa sử dụng một lần.

00:28:56.000 --> 00:29:04.000
Sau đó, trình xác thực tạo ra một quảng cáo Bluetooth chứa thông tin định tuyến cho máy chủ chuyển tiếp mạng.

00:29:04.000 --> 00:29:13.000
Sàn giao dịch cục bộ này cho phép chọn máy chủ và chia sẻ thông tin định tuyến, nhưng cũng phục vụ hai chức năng bổ sung.

00:29:13.000 --> 00:29:25.000
Nó thực hiện một thỏa thuận khóa ngoài băng tần mà máy chủ không thể nhìn thấy, vì vậy mọi thứ đi qua mạng đều được mã hóa đầu cuối và máy chủ không thể đọc bất cứ thứ gì.

00:29:25.000 --> 00:29:31.000
Nó cũng đưa ra một tuyên bố mạnh mẽ rằng hai thiết bị này ở gần nhau về mặt vật lý.

00:29:31.000 --> 00:29:47.000
Điều đó có nghĩa là mã QR được gửi qua email hoặc được tạo trên trang web giả mạo sẽ không hoạt động, bởi vì kẻ tấn công từ xa sẽ không thể nhận được quảng cáo Bluetooth và hoàn tất trao đổi cục bộ.

00:29:47.000 --> 00:29:49.000
Vậy đó là phần địa phương.

00:29:49.000 --> 00:29:57.000
Khi trao đổi cục bộ và thỏa thuận khóa đã xảy ra, hai thiết bị sẽ kết nối với máy chủ chuyển tiếp do điện thoại chọn.

00:29:57.000 --> 00:30:09.000
Từ đó, họ thực hiện một hoạt động FIDO CTAP tiêu chuẩn, được mã hóa bằng các khóa từ trước đó, vì vậy máy chủ chuyển tiếp không thể nhìn thấy bất cứ điều gì đang diễn ra.

00:30:09.000 --> 00:30:14.000
Toàn bộ quá trình này được thực hiện bởi thiết bị và trình duyệt web.

00:30:14.000 --> 00:30:19.000
Trang web không liên quan đến bất kỳ thời điểm nào trong giao tiếp giữa các thiết bị.

00:30:19.000 --> 00:30:28.000
Đăng nhập đa nền tảng trên nhiều thiết bị là một tính năng hệ thống chỉ hoạt động ở bất cứ nơi nào có thể sử dụng mật khẩu.

00:30:28.000 --> 00:30:37.000
Vì vậy, đó là một cái nhìn kỹ thuật hơn về cách các chốt mật khẩu hoạt động và cách chúng có thể đảm bảo bảo mật mạnh mẽ như vậy, ngay cả trên các thiết bị.

00:30:37.000 --> 00:30:40.000
Tiếp theo, xác thực đa yếu tố.

00:30:40.000 --> 00:30:46.000
Một cách phổ biến để suy nghĩ về xác thực ngày nay là về các yếu tố.

00:30:46.000 --> 00:30:55.000
Các yếu tố khác nhau mạnh hay yếu chống lại các loại tấn công khác nhau và kết hợp các yếu tố có thể cung cấp phạm vi bảo hiểm tập thể tốt hơn.

00:30:55.000 --> 00:30:59.000
Nhưng với mật khẩu, bạn không cần phải suy nghĩ như vậy nữa.

00:30:59.000 --> 00:31:04.000
Đây là một số phương pháp phổ biến nhất được sử dụng để đăng nhập ngày nay.

00:31:04.000 --> 00:31:08.000
Mật khẩu trong đầu bạn dễ bị tổn thương bởi hầu hết mọi thứ.

00:31:08.000 --> 00:31:20.000
Trình quản lý mật khẩu rất giỏi trong việc tạo các chuỗi duy nhất, có độ entropy cao, có thể có các biện pháp bảo vệ cục bộ chống lại hành vi trộm cắp thiết bị và đưa ra một số gợi ý về lừa đảo.

00:31:20.000 --> 00:31:29.000
Thêm tin nhắn SMS hoặc mã dựa trên thời gian có thể giúp chống trộm cắp hoặc lừa đảo trong một số trường hợp nhưng cũng không thực sự giải quyết được.

00:31:29.000 --> 00:31:36.000
Tuy nhiên, với mật khẩu, mỗi mật khẩu là một cặp khóa duy nhất do thiết bị tạo ra.

00:31:36.000 --> 00:31:42.000
Trên các thiết bị của Apple, chúng được xây dựng trên nền tảng bảo vệ thiết bị cục bộ vững chắc.

00:31:42.000 --> 00:31:48.000
Mật khẩu cũng loại bỏ hoàn toàn yếu tố con người khỏi lừa đảo.

00:31:48.000 --> 00:31:55.000
Và chúng không thể bị rò rỉ bởi một ứng dụng hoặc máy chủ trang web, bởi vì các máy chủ không có khóa riêng tư.

00:31:55.000 --> 00:32:05.000
Thêm các yếu tố vào luồng đăng nhập dựa trên mật khẩu có ý nghĩa, vì chúng cùng nhau có thể bảo vệ chống lại nhiều loại tấn công hơn là chỉ mật khẩu.

00:32:05.000 --> 00:32:12.000
Nhưng chỉ riêng mật khẩu đã bảo vệ chống lại nhiều thứ hơn đến nỗi nó không cần các yếu tố bổ sung.

00:32:12.000 --> 00:32:16.000
Tôi đang mong chờ một tương lai không có mật khẩu.

00:32:16.000 --> 00:32:20.000
Đây là cách bạn có thể bắt đầu biến điều đó thành hiện thực.

00:32:20.000 --> 00:32:26.000
Trước hết, bạn sẽ cần áp dụng WebAuthn trên máy chủ của mình, nếu bạn chưa làm như vậy.

00:32:26.000 --> 00:32:32.000
Mật khẩu sẽ hoạt động với bất kỳ triển khai máy chủ WebAuthn tiêu chuẩn nào.

00:32:32.000 --> 00:32:38.000
Khi máy chủ của bạn đã sẵn sàng hoạt động, hãy áp dụng API mới của chúng tôi trong các ứng dụng và trang web của bạn.

00:32:38.000 --> 00:32:50.000
Các yêu cầu mật khẩu được hỗ trợ tự động điền có thể được gửi ngay vào luồng đăng nhập hiện tại của bạn, ngoài ra chúng tôi cũng có một loạt các tùy chọn giao diện người dùng nâng cao hơn, nếu bạn cần.

00:32:50.000 --> 00:32:56.000
Và cuối cùng, chuyển đổi người dùng của bạn khỏi mật khẩu.

00:32:56.000 --> 00:33:05.000
Mật khẩu là một giải pháp tiêu chuẩn công nghiệp cho vấn đề tiện lợi và bảo mật của việc đăng nhập an toàn vào các ứng dụng và trang web.

00:33:05.000 --> 00:33:18.000
Bằng cách hướng dẫn khách hàng của bạn nhập mật khẩu và tránh xa mật khẩu, bạn có thể cung cấp cho họ trải nghiệm đăng nhập cực kỳ nhanh chóng và thuận tiện trong khi nâng cao thanh bảo mật cho mọi người.

00:33:18.000 --> 00:33:19.000
Cảm ơn bạn.

00:33:19.000 --> 23:59:59.000
♪

