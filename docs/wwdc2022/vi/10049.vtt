WEBVTT

00:00:00.000 --> 00:00:05.000
♪ nhạc cụ hip hop ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:16.000
Xin chào, và chào mừng đến với "Có gì mới trong WKWebView" Tôi là Alex Christensen, một kỹ sư trong nhóm WebKit.

00:00:16.000 --> 00:00:23.000
Chúng tôi đã bận rộn và chúng tôi đã thêm rất nhiều công nghệ web mới để bạn sử dụng trong các ứng dụng của mình trong năm nay.

00:00:23.000 --> 00:00:29.000
Tuy nhiên, trước khi chúng tôi bắt đầu, hãy đảm bảo rằng bạn đang sử dụng công nghệ phù hợp cho ứng dụng của mình.

00:00:29.000 --> 00:00:40.000
Nếu bạn muốn có trải nghiệm giống như trình duyệt bên trong ứng dụng của mình và không cần tùy chỉnh sâu, bạn chắc chắn sẽ muốn sử dụng SFSafariViewController.

00:00:40.000 --> 00:00:51.000
Nếu ứng dụng của bạn vẫn sử dụng UIWebView bị phản đối, bây giờ là lúc để chuyển sang WKWebView nhanh hơn và nhạy hơn.

00:00:51.000 --> 00:00:56.000
UIWebView sẽ bị xóa trong bản phát hành trong tương lai.

00:00:56.000 --> 00:01:02.000
WKWebView là API được sử dụng để viết một ứng dụng tương tác với nội dung web.

00:01:02.000 --> 00:01:09.000
Bạn có thể sử dụng nó cho giao diện người dùng dựa trên CSS hoặc viết một số ứng dụng của bạn bằng JavaScript.

00:01:09.000 --> 00:01:14.000
Bạn có thể đang tương tác với nội dung web của riêng mình bằng cách sử dụng các miền gắn trên ứng dụng.

00:01:14.000 --> 00:01:17.000
Bạn cũng có thể đang phát triển trình duyệt của riêng mình.

00:01:17.000 --> 00:01:25.000
Dù ứng dụng của bạn là gì, chúng tôi liên tục bổ sung các khả năng mới để cho phép bạn tạo các ứng dụng web phong phú hơn.

00:01:25.000 --> 00:01:41.000
Các tính năng mới có sẵn cho WKWebView năm nay có bốn loại: cách mới để tương tác với nội dung web, khả năng mới cho trình chặn nội dung, phương tiện được mã hóa và sử dụng Trình kiểm tra web từ xa.

00:01:41.000 --> 00:01:47.000
Đầu tiên, chúng tôi sẽ đề cập đến các API mới để tương tác với nội dung web.

00:01:47.000 --> 00:02:01.000
Có ba cách mới mà ứng dụng của bạn có thể tương tác với nội dung web trong iOS 16: sử dụng API toàn màn hình, sử dụng các đơn vị khung nhìn CSS mới và sử dụng các tương tác tìm kiếm.

00:02:01.000 --> 00:02:03.000
Hãy bắt đầu với toàn màn hình.

00:02:03.000 --> 00:02:15.000
Trong nhiều năm nay, JavaScript đã có thể tạo các phần tử HTML, như video hoặc trò chơi canvas, toàn màn hình trong trình duyệt và bây giờ chúng cũng có thể làm điều đó trong ứng dụng của bạn.

00:02:15.000 --> 00:02:19.000
Đây là một ví dụ đơn giản trông như thế nào trên điện thoại.

00:02:19.000 --> 00:02:26.000
JavaScript có thể yêu cầu toàn màn hình, sau đó người dùng hoặc JavaScript có thể thoát toàn màn hình.

00:02:26.000 --> 00:02:39.000
Tất cả những gì bạn cần làm trong ứng dụng của mình là đặt WKPreferences .isElementFullscreenEnabled to true và tải nội dung web sử dụng API toàn màn hình như webkitRequestFullscreen.

00:02:39.000 --> 00:02:55.000
Nó hoạt động khá tốt ngay lập tức, nhưng nếu bạn muốn tùy chỉnh các chuyển tiếp trong ứng dụng của mình, bạn có thể quan sát giá trị của WKWebView.fullscreenState, điều này sẽ cho ứng dụng của bạn biết khi nội dung web trở nên toàn màn hình hoặc quay trở lại.

00:02:55.000 --> 00:03:01.000
Và đó là tất cả những gì cần sử dụng API toàn màn hình của WebKit trong ứng dụng của bạn.

00:03:01.000 --> 00:03:08.000
Chúng tôi cũng có các đơn vị CSS mới để cho phép nội dung web được bố trí theo kích thước khung nhìn động.

00:03:08.000 --> 00:03:14.000
Các đơn vị CSS mới này bao gồm svh, lvh, dvh và nhiều đơn vị khác.

00:03:14.000 --> 00:03:22.000
Chúng cho phép các nhà phát triển web sửa đổi bố cục dựa trên kích thước khung nhìn nhỏ nhất, lớn nhất và động.

00:03:22.000 --> 00:03:28.000
Hãy cùng xem Safari làm gì để có ý tưởng về cách sử dụng điều này trong ứng dụng của bạn.

00:03:28.000 --> 00:03:35.000
Khi bạn lần đầu tiên mở một trang trong Safari, bạn sẽ thấy máy chủ lưu trữ trang web và một số nút ở dưới cùng.

00:03:35.000 --> 00:03:41.000
Khi bạn cuộn, khung nhìn tăng kích thước khi các nút trượt ra khỏi đường đi.

00:03:41.000 --> 00:03:49.000
Svh, lvh và dvh cung cấp các đơn vị hữu ích để đo các kích thước khác nhau này của khung nhìn.

00:03:49.000 --> 00:03:59.000
Nếu ứng dụng của bạn thay đổi khung nhìn của WKWebView, thì bạn nên thông báo trước cho WebKit phạm vi kích thước khung nhìn là gì.

00:03:59.000 --> 00:04:10.000
Trong Swift, một cuộc gọi hàm thông báo cho WebKit về các cài đặt cạnh tối đa và tối thiểu để cho phép nội dung web này được bố trí chính xác trong ứng dụng của bạn.

00:04:10.000 --> 00:04:17.000
Chúng tôi cũng đang giới thiệu hỗ trợ cho Tìm tương tác trong WKWebView trong iOS 16.

00:04:17.000 --> 00:04:24.000
Nhiều ứng dụng WKWebView tải rất nhiều văn bản và người dùng muốn tìm kiếm văn bản này.

00:04:24.000 --> 00:04:38.000
Nếu bạn đặt WKWebView .findInteractionEnabled thành true, thì người dùng của bạn sẽ có thể sử dụng giao diện người dùng quen thuộc và các phím tắt như Command-F để tìm kiếm văn bản trên trang đang mở.

00:04:38.000 --> 00:04:55.000
Một dòng mã đó là tất cả những gì bạn cần để bật tính năng này, nhưng bạn cũng có thể truy cập đối tượng UIFindInteraction thông qua WKWebView .findInteraction để thực hiện những việc như trình bày và bỏ qua bảng Tìm hoặc chuyển sang kết quả tiếp theo hoặc trước đó theo chương trình.

00:04:55.000 --> 00:04:59.000
Hãy dùng thử và xem nó có thể làm gì trong ứng dụng của bạn.

00:04:59.000 --> 00:05:08.000
Để chặn nội dung, chúng tôi đã thêm một khả năng mới vào WKContentRuleList, API được sử dụng để triển khai các trình chặn nội dung trong Safari.

00:05:08.000 --> 00:05:14.000
Ở đây, chúng tôi có Wikipedia được nhúng trong một iframe trên một trang web ví dụ.

00:05:14.000 --> 00:05:24.000
Trước đây, bạn có thể chạy các biểu thức chính quy trên URL được yêu cầu và URL khung trên cùng, để quyết định chặn tải hay thực hiện các hành động khác.

00:05:24.000 --> 00:05:33.000
Tuy nhiên, đôi khi, những gì bạn thực sự muốn là một quy tắc nhất định chỉ áp dụng cho các tải bên trong một số iframe nhất định.

00:05:33.000 --> 00:05:39.000
Bây giờ bạn có thể chạy các biểu thức chính quy trên URL của khung hiện tại.

00:05:39.000 --> 00:05:47.000
Chúng tôi sẽ viết một quy tắc để chặn hình ảnh nhưng chỉ từ các khung có chứa Wikipedia.

00:05:47.000 --> 00:05:52.000
Để làm điều này, chúng tôi thêm if-frame-url vào JSON như thế này.

00:05:52.000 --> 00:05:58.000
Sau đó, bạn biên dịch JSON như trước đây và áp dụng nó vào Cấu hình WKWebView.

00:05:58.000 --> 00:06:06.000
Biểu thức chính quy sau đó chạy trên URL của khung đang thực hiện yêu cầu.

00:06:06.000 --> 00:06:14.000
Quy tắc chặn này bây giờ sẽ chỉ áp dụng cho các yêu cầu từ các khung phù hợp với biểu thức chính quy if-frame-url.

00:06:14.000 --> 00:06:20.000
Ở đây chúng ta thấy rằng nó đã chặn tải hình ảnh bên trong iframe Wikipedia.

00:06:20.000 --> 00:06:33.000
Nếu bạn nghiêm túc về việc triển khai trình chặn nội dung, bạn nên xem phiên WWDC về Tiện ích mở rộng Safari bao gồm một số khả năng mới trong declarativeNetRequest.

00:06:33.000 --> 00:06:38.000
Một khả năng mới khác trong WKWebView trong iPadOS 16 là phương tiện được mã hóa.

00:06:38.000 --> 00:06:49.000
Nếu bạn có nội dung sử dụng Tiện ích mở rộng phương tiện được mã hóa và API tiện ích mở rộng nguồn phương tiện, bây giờ bạn có thể sử dụng nó trong các ứng dụng của mình trên iPadOS.

00:06:49.000 --> 00:06:57.000
Điều này có nghĩa là nếu bạn có nội dung cao cấp như AppleTV+, nó sẽ hoạt động trên iPadOS như trong macOS.

00:06:57.000 --> 00:07:11.000
Nếu ứng dụng của bạn có quyền trình duyệt web, thì Remote Web Inspector sẽ chỉ hoạt động với ứng dụng sản xuất của bạn như trên Safari trên iOS; không cần thêm hoặc thay đổi bất kỳ mã nào.

00:07:11.000 --> 00:07:17.000
Để kích hoạt Trình kiểm tra web trong trình duyệt của bên thứ ba, quy trình này giống như với Safari.

00:07:17.000 --> 00:07:29.000
Trước tiên, bạn sẽ cần bật Trình kiểm tra web trong cài đặt Safari trên thiết bị iOS, sau đó bật menu Phát triển trong Cài đặt nâng cao trong Safari trên máy Mac của bạn.

00:07:29.000 --> 00:07:36.000
Gắn điện thoại của bạn vào Mac và tìm kiếm thiết bị của bạn trong menu Phát triển của Safari trên macOS.

00:07:36.000 --> 00:07:40.000
Web Inspector có nhiều công cụ để gỡ lỗi nội dung web.

00:07:40.000 --> 00:07:48.000
Bạn có thể khám phá DOM, chạy và gỡ lỗi thực thi JavaScript, xem các mốc thời gian tải trang của bạn và hơn thế nữa.

00:07:48.000 --> 00:07:57.000
Nếu bạn có một trang web, bây giờ bạn có thể tự kiểm tra và gỡ lỗi nó trong các trình duyệt của bên thứ ba trên iOS, sử dụng Remote Web Inspector.

00:07:57.000 --> 00:08:02.000
Đó là những bổ sung API mới chính cho WKWebView trong năm nay.

00:08:02.000 --> 00:08:06.000
Hãy thử chúng và xem chúng có thể làm gì trong ứng dụng của bạn.

00:08:06.000 --> 00:08:17.000
Hãy nhớ sử dụng các API tốt nhất cho ứng dụng của bạn và nếu có điều gì đó bạn không thể làm với WKWebView, vui lòng gửi yêu cầu tính năng bằng Trợ lý phản hồi.

00:08:17.000 --> 00:08:23.000
Chúng tôi đọc các yêu cầu tính năng mà chúng tôi nhận được và ưu tiên phát triển dựa trên đầu vào của bạn.

00:08:23.000 --> 00:08:34.000
Đừng quên kiểm tra "Có gì mới trong Tiện ích mở rộng web Safari", và để biết thêm các bổ sung cho nền tảng web, hãy nhớ kiểm tra "Có gì mới trong Safari và WebKit".

00:08:34.000 --> 00:08:37.000
Cảm ơn vì đã xem, và tận hưởng phần còn lại của WWDC.

00:08:37.000 --> 23:59:59.000
♪ ♪

