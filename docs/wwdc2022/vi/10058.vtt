WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
Raj Ramamurthy: Xin chào, và chào mừng đến với "SwiftUI trên iPad: Tổ chức giao diện của bạn."

00:00:14.000 --> 00:00:17.000
Tôi là Raj, và tôi làm việc trên SwiftUI.

00:00:17.000 --> 00:00:25.000
iPadOS 16 có một số bản cập nhật để cho phép xây dựng các ứng dụng chuyên nghiệp, hiệu quả hơn với các tính năng phong phú.

00:00:25.000 --> 00:00:34.000
Trong phiên này, tôi sẽ thảo luận một vài trong số chúng và nói về việc tổ chức giao diện của các ứng dụng SwiftUI của bạn để tỏa sáng trên iPad.

00:00:34.000 --> 00:00:38.000
Để bắt đầu, tôi sẽ đưa bạn đi tham quan các danh sách và bảng.

00:00:38.000 --> 00:00:44.000
Sau đó, tôi sẽ nói về mô hình lựa chọn SwiftUI và cách tích hợp lựa chọn với các menu.

00:00:44.000 --> 00:00:50.000
Cuối cùng, tôi sẽ thảo luận về cách cấu trúc điều hướng ứng dụng của bạn cho iPad bằng cách sử dụng chế độ xem phân tách.

00:00:50.000 --> 00:00:52.000
Nhưng khoan đã, còn nhiều nữa.

00:00:52.000 --> 00:00:55.000
Đây thực sự là phiên đầu tiên của loạt bài gồm hai phần.

00:00:55.000 --> 00:01:01.000
Trong phần thứ hai, đồng nghiệp Harry của tôi tham quan các thanh công cụ, tiêu đề và hơn thế nữa.

00:01:01.000 --> 00:01:10.000
Harry bao gồm một số bổ sung thực sự quan trọng đưa các ứng dụng SwiftUI iPad lên một tầm cao mới, vì vậy hãy đảm bảo xem cả hai phiên.

00:01:10.000 --> 00:01:14.000
Hãy bắt đầu với danh sách và bảng biểu.

00:01:14.000 --> 00:01:18.000
Gần đây tôi đã tham gia một vài câu lạc bộ sách, nhưng tôi đang chạy khá chậm.

00:01:18.000 --> 00:01:20.000
Thật khó để tìm một nơi yên tĩnh để đọc.

00:01:20.000 --> 00:01:26.000
Vì vậy, để giúp tôi tập trung vào việc đọc của mình, tôi đã bắt đầu làm việc trên một ứng dụng để tìm những nơi yên tĩnh thần thoại này.

00:01:26.000 --> 00:01:30.000
Một nơi yên tĩnh giống như một ốc đảo đọc sách, nơi các trang chỉ bay.

00:01:30.000 --> 00:01:35.000
Và ứng dụng này giúp tôi theo dõi tất cả những nơi yên tĩnh mà tôi đã tìm thấy.

00:01:35.000 --> 00:01:42.000
Tôi đã xây dựng ứng dụng cho iPhone, nhưng tôi nghĩ sẽ là một bài tập thú vị để cập nhật nó cho iPad để thực sự tận dụng màn hình lớn hơn.

00:01:42.000 --> 00:01:48.000
Bằng cách làm cho ứng dụng tốt hơn cho iPad, tôi cũng sẽ tiến xa hơn khi cuối cùng tôi mang nó đến Mac.

00:01:48.000 --> 00:01:54.000
Tôi sẽ không đề cập đến Mac một cách rõ ràng trong phiên này, nhưng nhiều API được hiển thị cũng áp dụng trên macOS.

00:01:54.000 --> 00:01:58.000
Đây là danh sách tất cả những nơi yên tĩnh mà tôi đã tìm thấy cho đến nay.

00:01:58.000 --> 00:02:02.000
Danh sách này là một nơi tuyệt vời để bắt đầu với việc cập nhật ứng dụng.

00:02:02.000 --> 00:02:04.000
Tôi đã bắt đầu làm việc trên phiên bản iPad.

00:02:04.000 --> 00:02:08.000
Nó không tệ, nhưng nó không tận dụng lợi thế của màn hình lớn hơn.

00:02:08.000 --> 00:02:12.000
Có khá nhiều không gian bị lãng phí và mật độ thông tin thấp.

00:02:12.000 --> 00:02:21.000
Rất may, trong iPadOS 16, có một giải pháp tuyệt vời cho các loại kịch bản dày đặc thông tin này: bảng nhiều cột.

00:02:21.000 --> 00:02:24.000
Hãy để tôi cho bạn thấy chúng trông như thế nào.

00:02:24.000 --> 00:02:29.000
Đây là chế độ xem "Tất cả các địa điểm" sau khi áp dụng SwiftUI API cho các bảng nhiều cột.

00:02:29.000 --> 00:02:33.000
Tôi sẽ hướng tới ảnh chụp màn hình này trong vài phút tới.

00:02:33.000 --> 00:02:42.000
Các bảng nhiều cột trong SwiftUI lần đầu tiên được giới thiệu trong macOS Monterey và bắt đầu từ iPadOS 16, cùng một bảng API hiện có sẵn cho iPad.

00:02:42.000 --> 00:02:48.000
Cũng giống như trên Mac, các bảng trên iPad hỗ trợ nhiều cột và sắp xếp.

00:02:48.000 --> 00:02:55.000
Cùng với việc giới thiệu các bảng trên iPad, SwiftUI hiện hỗ trợ các phần trong bảng trên iPad và Mac.

00:02:55.000 --> 00:03:07.000
Hướng dẫn chung xung quanh các bảng từ phiên trước "SwiftUI trên Mac: Xây dựng các nguyên tắc cơ bản" vẫn áp dụng trên iPad, vì vậy tôi mời bạn xem phiên đó nếu bạn chưa xem.

00:03:07.000 --> 00:03:10.000
Hãy xây dựng bảng được hiển thị trước đó, bắt đầu từ danh sách iPhone.

00:03:10.000 --> 00:03:15.000
Đây là mã cho danh sách địa điểm từ trước đó.

00:03:15.000 --> 00:03:18.000
Đầu tiên, tôi sẽ chuyển từ một danh sách sang một bảng.

00:03:18.000 --> 00:03:21.000
Các bảng có cấu trúc khác với danh sách.

00:03:21.000 --> 00:03:26.000
Thay vì trình tạo chế độ xem, các bảng chấp nhận trình tạo cột.

00:03:26.000 --> 00:03:29.000
Cột đầu tiên tôi sẽ thêm là cho tên của địa điểm.

00:03:29.000 --> 00:03:35.000
Cột yêu cầu tên cho tiêu đề của nó và trình tạo chế độ xem để tạo chế độ xem cho từng phần tử trong bộ sưu tập.

00:03:35.000 --> 00:03:41.000
Tôi cũng đã chỉ định một đường dẫn khóa giá trị, điều này sẽ rất quan trọng sau này khi tôi thêm sắp xếp vào bảng.

00:03:41.000 --> 00:03:45.000
Chú ý mức độ tương tự của trình tạo chế độ xem với cấu trúc dựa trên danh sách.

00:03:45.000 --> 00:03:50.000
Trên thực tế, tôi thậm chí có thể sử dụng lại loại PlaceCell từ trước.

00:03:50.000 --> 00:04:00.000
Trong các lớp kích thước nhỏ gọn, các bảng chỉ hiển thị cột đầu tiên của chúng, điều đó có nghĩa là bàn của tôi vẫn trông tuyệt vời trên iPhone và trong slide trên iPad.

00:04:00.000 --> 00:04:03.000
Bạn có thể nhận thấy rằng điều này tương tự như một danh sách về ngoại hình.

00:04:03.000 --> 00:04:12.000
Nhưng tôi không chỉ thay thế bảng bằng một danh sách, bởi vì việc sử dụng lại bảng cho phép giữ nguyên vị trí cuộn và lựa chọn khi chuyển đổi giữa các lớp kích thước.

00:04:12.000 --> 00:04:23.000
Nói chung, hãy đảm bảo sử dụng cột đầu tiên để có giao diện nhỏ gọn cụ thể và luôn đảm bảo rằng bạn đang thử nghiệm các ứng dụng iPad của mình trong nhiều môi trường khác nhau, như trượt qua.

00:04:23.000 --> 00:04:25.000
Được rồi, tiếp tục đi.

00:04:25.000 --> 00:04:28.000
Tôi sẽ thêm các cột cho sự thoải mái và mức độ tiếng ồn.

00:04:28.000 --> 00:04:36.000
Đối với các cột chỉ có nội dung văn bản, TableColumn cung cấp một API tiện lợi cho phép tôi bỏ qua trình tạo chế độ xem khi giá trị của tôi trỏ đến một chuỗi.

00:04:36.000 --> 00:04:42.000
Và trong trường hợp này, tôi biết mức độ thoải mái sẽ không cần nhiều chỗ, vì vậy tôi đã áp dụng một chiều rộng cố định.

00:04:42.000 --> 00:04:45.000
Tôi cũng có thể thêm sắp xếp vào bảng bằng cách sử dụng bộ so sánh.

00:04:45.000 --> 00:04:48.000
Tôi sẽ tạo một số trạng thái để lưu trữ các bộ so sánh.

00:04:48.000 --> 00:04:53.000
Trạng thái ở đây là một mảng vì nó đại diện cho tất cả các bộ so sánh cho bảng.

00:04:53.000 --> 00:05:00.000
Và đặt giá trị ban đầu thành bộ so sánh tên cho phép bảng xuất hiện được sắp xếp khi nó được hiển thị lần đầu tiên.

00:05:00.000 --> 00:05:06.000
Tiếp theo, tôi sẽ chuyển một ràng buộc đến trạng thái của mình vào bảng để kết nối mọi thứ.

00:05:06.000 --> 00:05:12.000
Bởi vì mỗi cột chỉ định giá trị của chúng như một đường dẫn chính đến một trường có thể so sánh được, chúng có thể sắp xếp theo mặc định.

00:05:12.000 --> 00:05:18.000
Và bây giờ bàn hoàn toàn có thể sắp xếp theo tên, mức độ thoải mái và tiếng ồn.

00:05:18.000 --> 00:05:20.000
Lưu ý rằng bảng không tự xử lý việc sắp xếp.

00:05:20.000 --> 00:05:22.000
Điều đó tùy thuộc vào tôi.

00:05:22.000 --> 00:05:27.000
Tôi có thể sử dụng công cụ sửa đổi onChange để sắp xếp dữ liệu khi thứ tự sắp xếp thay đổi.

00:05:27.000 --> 00:05:30.000
Được rồi, chúng ta hãy lấy nó để quay một vòng.

00:05:30.000 --> 00:05:37.000
Bảng trông tuyệt vời, hiển thị tất cả dữ liệu địa điểm và thực sự tận dụng màn hình lớn hơn.

00:05:37.000 --> 00:05:43.000
Không giống như trên Mac, các bảng trên iPad không cuộn theo chiều ngang, vì vậy điều quan trọng là phải giới hạn số lượng cột.

00:05:43.000 --> 00:05:47.000
Điều này đảm bảo rằng tất cả các cột có thể được hiển thị cùng một lúc.

00:05:47.000 --> 00:05:49.000
Mỗi cột hiển thị nhãn của nó trong tiêu đề.

00:05:49.000 --> 00:05:52.000
Và nhấn vào nhãn sẽ sắp xếp cột đó.

00:05:52.000 --> 00:05:57.000
Tôi thậm chí có thể sắp xếp theo mức độ tiếng ồn.

00:05:57.000 --> 00:06:03.000
Và khi trượt qua, bảng thu gọn thành một cột duy nhất đại diện cho tất cả thông tin ở định dạng cô đọng hơn.

00:06:03.000 --> 00:06:07.000
Bây giờ tôi đã cập nhật danh sách vào một bảng, hãy đi sâu vào lựa chọn.

00:06:07.000 --> 00:06:14.000
Trong phần này, tôi sẽ xem xét mô hình lựa chọn SwiftUI và thảo luận về việc tích hợp lựa chọn với các menu.

00:06:14.000 --> 00:06:18.000
Trên đường đi, tôi sẽ tăng cường bảng địa điểm với chức năng phong phú.

00:06:18.000 --> 00:06:22.000
Nhưng trước tiên, tôi sẽ nói về cách lựa chọn hoạt động trong SwiftUI.

00:06:22.000 --> 00:06:27.000
SwiftUI bao gồm một API mạnh mẽ để quản lý danh sách và lựa chọn bảng.

00:06:27.000 --> 00:06:30.000
Đây là một sơ đồ với một danh sách chứa một vài hàng.

00:06:30.000 --> 00:06:32.000
Mỗi hàng có một thẻ.

00:06:32.000 --> 00:06:37.000
Các thẻ này là các giá trị duy nhất cho mỗi hàng giúp danh sách quản lý lựa chọn.

00:06:37.000 --> 00:06:41.000
Trong sơ đồ này, các thẻ được hiển thị trong các vòng tròn màu xanh lá cây.

00:06:41.000 --> 00:06:45.000
Cùng với thẻ, cũng có một số trạng thái giữ lựa chọn.

00:06:45.000 --> 00:06:48.000
Đây là loại giữ các giá trị thẻ.

00:06:48.000 --> 00:06:54.000
Ví dụ, với nhiều lựa chọn, đây là một tập hợp chứa các thẻ cho mỗi hàng đã chọn.

00:06:54.000 --> 00:06:58.000
Công việc của danh sách là phối hợp giữa thẻ trong mỗi hàng và trạng thái lựa chọn.

00:06:58.000 --> 00:07:02.000
Và nó thực hiện điều này thông qua ràng buộc lựa chọn của nó.

00:07:02.000 --> 00:07:09.000
Vì vậy, khi một hàng được chọn, chẳng hạn như hàng số hai ở đây, danh sách sẽ thêm nó vào tập hợp thông qua ràng buộc lựa chọn.

00:07:09.000 --> 00:07:20.000
Và tương tự, nếu một số phần khác của ứng dụng thay đổi bộ theo chương trình, hãy thêm ba phần như được hiển thị ở đây, danh sách sẽ chọn nó vì ràng buộc lựa chọn thay đổi.

00:07:20.000 --> 00:07:24.000
Mô hình chung này giống nhau trên iOS và macOS.

00:07:24.000 --> 00:07:29.000
Vì vậy, có hai phần để lựa chọn: một thẻ và một số trạng thái.

00:07:29.000 --> 00:07:32.000
Tiếp theo, tôi muốn nói về việc thẻ đến từ đâu.

00:07:32.000 --> 00:07:40.000
Thẻ chỉ là một giá trị cho chế độ xem trong vùng chứa có thể lựa chọn được sử dụng để theo dõi xem chế độ xem đó có được chọn hay không.

00:07:40.000 --> 00:07:45.000
Trong nhiều trường hợp, SwiftUI có thể tự động tổng hợp các thẻ thay mặt bạn.

00:07:45.000 --> 00:07:49.000
Các thẻ tương tự như số nhận dạng, nhưng không hoàn toàn giống nhau.

00:07:49.000 --> 00:07:55.000
Khi sử dụng ForEach, SwiftUI sẽ tự động lấy thẻ cho chế độ xem từ danh tính rõ ràng của nó.

00:07:55.000 --> 00:08:00.000
Và các bảng sẽ sử dụng mã định danh giá trị hàng của chúng làm thẻ lựa chọn.

00:08:00.000 --> 00:08:04.000
Trong ứng dụng địa điểm, điều đó có nghĩa là loại định danh của cấu trúc địa điểm sẽ được sử dụng.

00:08:04.000 --> 00:08:11.000
Để biết thêm thông tin về danh tính rõ ràng, hãy xem "Demystify SwiftUI."

00:08:11.000 --> 00:08:14.000
Để gắn thẻ chế độ xem theo cách thủ công, hãy sử dụng công cụ sửa đổi thẻ.

00:08:14.000 --> 00:08:16.000
Đây là những gì ForEach làm dưới mui xe.

00:08:16.000 --> 00:08:19.000
Công cụ sửa đổi thẻ có giá trị Hashable.

00:08:19.000 --> 00:08:27.000
Tuy nhiên, khi sử dụng công cụ sửa đổi thẻ, hãy cẩn thận - điều quan trọng là tất cả các chế độ xem trong vùng chứa có thể lựa chọn phải chia sẻ cùng một loại thẻ.

00:08:27.000 --> 00:08:31.000
Nếu không, SwiftUI có thể không biết cách chọn chế độ xem.

00:08:31.000 --> 00:08:35.000
Lưu ý rằng nếu bạn sử dụng công cụ sửa đổi ID, nó sẽ không đặt thẻ.

00:08:35.000 --> 00:08:40.000
Vậy đó là tổng quan về các thẻ. Hãy mang lại sơ đồ từ trước đó.

00:08:40.000 --> 00:08:47.000
Bây giờ tôi đã giải thích phần thẻ của sơ đồ này, tôi muốn tập trung vào nửa còn lại của phương trình chọn lọc: trạng thái lựa chọn.

00:08:47.000 --> 00:08:52.000
Trong ví dụ trước, tôi đã sử dụng một tập hợp, nhưng cũng có những lựa chọn khác.

00:08:52.000 --> 00:08:56.000
Bạn có thể sử dụng các cấu trúc dữ liệu này để thể hiện sự lựa chọn.

00:08:56.000 --> 00:09:06.000
SwiftUI hỗ trợ lựa chọn đơn, mới trong macOS Ventura, lựa chọn bắt buộc cho thanh bên macOS và nhiều lựa chọn.

00:09:06.000 --> 00:09:11.000
iPadOS 16 cũng giới thiệu nhiều lựa chọn nhẹ.

00:09:11.000 --> 00:09:18.000
Bây giờ, với một bàn phím được gắn vào, bạn không cần phải vào chế độ chỉnh sửa để chọn nhiều hàng, điều này giúp tránh phương thức.

00:09:18.000 --> 00:09:24.000
Khi sử dụng bàn phím, bạn có thể sử dụng các phím tắt phổ biến như shift và command để mở rộng và sửa đổi lựa chọn.

00:09:24.000 --> 00:09:26.000
Và điều này hoạt động tốt với con trỏ.

00:09:26.000 --> 00:09:29.000
Đây là bảng địa điểm trông như thế nào sau khi áp dụng lựa chọn.

00:09:29.000 --> 00:09:36.000
Trong ví dụ này, tôi có một bàn phím và bàn di chuột kèm theo, vì vậy các hàng không được thụt lề, nhưng chúng vẫn được chọn.

00:09:36.000 --> 00:09:42.000
Tuy nhiên, khi sử dụng cảm ứng, tôi vẫn cần vào chế độ chỉnh sửa, chế độ này được tăng tốc bằng cách sử dụng chảo hai ngón tay.

00:09:42.000 --> 00:09:45.000
SwiftUI hỗ trợ cử chỉ này một cách tự động.

00:09:45.000 --> 00:09:50.000
Nói về chế độ chỉnh sửa, có một số cập nhật với lựa chọn đơn lẻ và chế độ chỉnh sửa.

00:09:50.000 --> 00:09:56.000
Trong iOS 16, lựa chọn danh sách trên iPhone và iPad không còn yêu cầu chế độ chỉnh sửa khi chọn một hàng duy nhất.

00:09:56.000 --> 00:10:01.000
Và điều này cực kỳ hữu ích để phối hợp với các API điều hướng được cập nhật.

00:10:01.000 --> 00:10:08.000
Với tất cả các bản cập nhật này, điều đó đưa chúng ta đến bảng này, được xây dựng dựa trên bảng trước đó bằng cách thêm một cột mới cho chế độ chỉnh sửa.

00:10:08.000 --> 00:10:12.000
Chế độ chỉnh sửa chỉ được yêu cầu khi sử dụng nhiều lựa chọn mà không có bàn phím.

00:10:12.000 --> 00:10:16.000
Vì vậy, với điều đó, tôi sẽ cập nhật bảng địa điểm để hỗ trợ lựa chọn.

00:10:16.000 --> 00:10:22.000
Tôi có thể dễ dàng thêm lựa chọn vào bảng địa điểm bằng cách thêm một số trạng thái để lưu trữ lựa chọn.

00:10:22.000 --> 00:10:27.000
Sau khi tạo trạng thái, tôi sẽ chuyển một ràng buộc đến trình khởi tạo bảng.

00:10:27.000 --> 00:10:34.000
Bảng xác nhận rằng loại lựa chọn của nó khớp với số nhận dạng hàng của nó, vì vậy tôi đã sử dụng loại ID địa điểm làm loại lựa chọn.

00:10:34.000 --> 00:10:38.000
Vì tôi muốn nhiều lựa chọn, tôi đã sử dụng một tập hợp cho trạng thái lựa chọn.

00:10:38.000 --> 00:10:44.000
Bảng tự động gắn thẻ các hàng của nó, vì vậy tôi không cần phải tự gắn thẻ bất cứ thứ gì.

00:10:44.000 --> 00:10:46.000
Và bây giờ tôi có thể chọn các hàng trong bảng.

00:10:46.000 --> 00:10:49.000
Nhưng tôi chưa thực sự làm bất cứ điều gì với sự lựa chọn.

00:10:49.000 --> 00:10:56.000
Tôi nghĩ sẽ thật tuyệt nếu thêm một nút cho phép tôi thêm các địa điểm đã chọn vào hướng dẫn mà tôi có thể chia sẻ với những người khác trong câu lạc bộ sách của mình.

00:10:56.000 --> 00:10:59.000
Đây là mã để thêm nút thanh công cụ.

00:10:59.000 --> 00:11:03.000
Nếu có một lựa chọn không trống, nút sẽ hiển thị ngay bây giờ.

00:11:03.000 --> 00:11:12.000
Tôi cũng đã thêm một nút chỉnh sửa, bổ sung cho hỗ trợ lựa chọn nhẹ hiện có, nhưng nó cung cấp khả năng vào và ra khỏi chế độ chỉnh sửa khi không có bàn phím.

00:11:12.000 --> 00:11:21.000
Một ứng dụng iPad tốt tỏa sáng cả khi có và không có bàn phím, vì vậy điều quan trọng là phải cung cấp các điều khiển để vào và ra khỏi chế độ chỉnh sửa.

00:11:21.000 --> 00:11:22.000
Chúng tôi đang đến đó.

00:11:22.000 --> 00:11:28.000
Bây giờ chúng tôi có một nút hiển thị khi chúng tôi chọn các hàng cũng như một nút để vào và thoát khỏi chế độ chỉnh sửa.

00:11:28.000 --> 00:11:33.000
Vui lòng đảm bảo xem phiên thứ hai trong loạt bài này để biết thêm thông tin về thanh công cụ.

00:11:33.000 --> 00:11:36.000
Tôi khá hài lòng với nút thanh công cụ ở đây, nhưng chúng ta có thể làm được nhiều hơn thế.

00:11:36.000 --> 00:11:41.000
Đối với các hành động về lựa chọn, đó là một thực hành tuyệt vời để giữ cho chúng dễ dàng truy cập nhất có thể.

00:11:41.000 --> 00:11:50.000
Đó là lý do tại sao trong iOS 16, iPadOS 16 và macOS Ventura, SwiftUI bổ sung hỗ trợ cho các menu ngữ cảnh nhiều lựa chọn.

00:11:50.000 --> 00:11:57.000
Các menu ngữ cảnh nhiều lựa chọn cho phép trình bày trình đơn ngữ cảnh hoạt động trên một tập hợp các số nhận dạng đã chọn.

00:11:57.000 --> 00:12:02.000
Hãy kiểm tra giải phẫu của bảng này để hiểu thêm.

00:12:02.000 --> 00:12:05.000
Các menu ngữ cảnh dựa trên mục có ba biến thể.

00:12:05.000 --> 00:12:10.000
Đầu tiên, bạn có thể hiển thị menu trên nhiều mục, chẳng hạn như lựa chọn ở trên cùng.

00:12:10.000 --> 00:12:15.000
Bạn cũng có thể hiển thị menu ngữ cảnh trên một mục riêng lẻ.

00:12:15.000 --> 00:12:21.000
Và cuối cùng, bạn có thể hiển thị một trình đơn ngữ cảnh trên một khu vực trống, nơi không có nội dung.

00:12:21.000 --> 00:12:25.000
Hãy thêm hỗ trợ cho điều này vào bảng địa điểm của chúng tôi.

00:12:25.000 --> 00:12:30.000
Tôi đã bỏ qua một số chi tiết từ các ví dụ mã trước đó để chúng ta có thể tập trung vào menu ngữ cảnh.

00:12:30.000 --> 00:12:34.000
Tôi đã thêm công cụ sửa đổi contextMenu mới lấy một loại lựa chọn.

00:12:34.000 --> 00:12:43.000
Điều này cần khớp với loại lựa chọn của danh sách hoặc bảng, vì vậy vì tôi đang sử dụng bảng, tôi sẽ sử dụng loại PlaceID.

00:12:43.000 --> 00:12:49.000
Việc đóng cửa được thông qua một tập hợp các mục để hoạt động, vì vậy nếu nó trống, tôi biết menu dành cho khu vực trống.

00:12:49.000 --> 00:12:52.000
Tôi nghĩ một nút để thêm một địa điểm mới sẽ hoạt động tốt cho khu vực trống.

00:12:52.000 --> 00:12:58.000
Bằng cách đó, khi tôi đang di chuyển và tìm một nơi yên tĩnh mới để đọc, tôi có thể thêm nó một cách nhanh chóng.

00:12:58.000 --> 00:13:05.000
Lưu ý rằng nếu trình tạo chế độ xem cho tập hợp các mục trống không phân giải thành chế độ xem, SwiftUI sẽ không hiển thị menu trên khu vực trống.

00:13:05.000 --> 00:13:08.000
Tiếp theo, hãy xử lý một lựa chọn duy nhất.

00:13:08.000 --> 00:13:13.000
Nếu bộ chỉ có một mục duy nhất, tôi biết thực đơn đang được hiển thị cho một địa điểm duy nhất.

00:13:13.000 --> 00:13:21.000
Và đối với cả một và nhiều lựa chọn, tôi muốn có thể thêm những địa điểm này vào hướng dẫn, vì vậy tôi sẽ thêm một chế độ xem khác vào menu.

00:13:21.000 --> 00:13:23.000
Hãy kiểm tra tiến độ của chúng ta.

00:13:23.000 --> 00:13:25.000
Đây là hỗ trợ menu ngữ cảnh mới đang hoạt động.

00:13:25.000 --> 00:13:29.000
Nhấp vào khu vực trống sẽ hiển thị một mục menu để thêm một địa điểm mới.

00:13:29.000 --> 00:13:33.000
Chọn một hàng duy nhất hiển thị một trình đơn ngữ cảnh chỉ cho hàng đó.

00:13:33.000 --> 00:13:38.000
Và tôi có thể mở rộng lựa chọn bằng bàn phím, tạo ra điểm nhấn màu xanh này.

00:13:38.000 --> 00:13:45.000
Sau đó, tôi có thể kích hoạt menu ngữ cảnh trên nhiều hàng, cho phép tôi dễ dàng thêm địa điểm vào hướng dẫn.

00:13:45.000 --> 00:13:50.000
Cái bàn này bây giờ trông khá hấp dẫn, vì vậy tôi nghĩ đã đến lúc thêm một số cấu trúc xung quanh nó.

00:13:50.000 --> 00:13:52.000
Để làm điều đó, tôi sẽ cần một cái nhìn phân chia.

00:13:52.000 --> 00:13:55.000
Điều hướng là một phần cơ bản của trải nghiệm iPad.

00:13:55.000 --> 00:14:04.000
Và chế độ xem phân chia là một cách tuyệt vời để tránh phương thức trên màn hình lớn hơn của iPad bằng cách hiển thị thêm thông tin cùng một lúc mà không cần phải đi sâu vào.

00:14:04.000 --> 00:14:09.000
Trong phần này, tôi sẽ đề cập đến một số cập nhật cho SwiftUI xung quanh điều hướng và chia nhỏ chế độ xem.

00:14:09.000 --> 00:14:16.000
Trong các phần trước, tôi đã tạo bảng địa điểm và thêm các tính năng phong phú như chế độ lựa chọn và chỉnh sửa.

00:14:16.000 --> 00:14:18.000
Nhưng tôi nghĩ ứng dụng địa điểm đang thiếu một số cấu trúc.

00:14:18.000 --> 00:14:25.000
Vì vậy, trong phần này, tôi sẽ xây dựng nền tảng cho cấu trúc ứng dụng của chúng tôi bằng cách tận dụng chế độ xem phân chia điều hướng.

00:14:25.000 --> 00:14:32.000
Mới trong iPadOS 16 và macOS Ventura, SwiftUI đã cải thiện hỗ trợ chia chế độ xem với loại NavigationSplitView.

00:14:32.000 --> 00:14:41.000
SwiftUI hỗ trợ hai hoặc ba chế độ xem phân chia cột và có nhiều kiểu để kiểm soát phức tạp cách hiển thị các cột.

00:14:41.000 --> 00:14:48.000
Tôi sẽ không đề cập đầy đủ về cách trình bày nội dung điều hướng trong phiên này, vì vậy, tôi mời bạn xem sách dạy nấu ăn SwiftUI để điều hướng.

00:14:48.000 --> 00:14:53.000
Curt có khá nhiều công thức nấu ăn để nấu một số trải nghiệm điều hướng thực sự ngon miệng.

00:14:53.000 --> 00:14:56.000
Thay vào đó, tôi sẽ tập trung nhiều hơn vào các quan điểm phân chia.

00:14:56.000 --> 00:15:00.000
Đây là một sơ đồ cho thấy chế độ xem phân chia hai cột trên iPad.

00:15:00.000 --> 00:15:07.000
Trong SwiftUI, cột đầu được gọi là cột thanh bên và cột cuối được gọi là cột chi tiết.

00:15:07.000 --> 00:15:10.000
Chú ý cách các cột được cân bằng cạnh nhau ở đây.

00:15:10.000 --> 00:15:13.000
Trong bối cảnh, SwiftUI cung cấp điều này theo mặc định.

00:15:13.000 --> 00:15:19.000
Tuy nhiên, trong bức chân dung, thanh bên ẩn đi, chỉ hiển thị cột chi tiết.

00:15:19.000 --> 00:15:27.000
Nhấn vào nút thanh bên sẽ hiển thị thanh bên, xuất hiện trên cột chi tiết, làm mờ nó bên dưới.

00:15:27.000 --> 00:15:37.000
Nói chung, chế độ xem phân chia hai cột sẽ chỉ hiển thị cột chi tiết khi không gian bị hạn chế, bởi vì cột chi tiết thường hiển thị thông tin quan trọng hơn cột thanh bên.

00:15:37.000 --> 00:15:48.000
Nếu bạn muốn tùy chỉnh hành vi này, bạn luôn có thể thích cột chi tiết với kiểu chế độ xem phân chia điều hướng chi tiết nổi bật hoặc cân bằng trọng số với kiểu NavigationSplitView cân bằng.

00:15:48.000 --> 00:15:53.000
NavigationSplitView cũng hỗ trợ bố cục ba cột.

00:15:53.000 --> 00:15:59.000
Với ba cột, có một cột bổ sung giữa thanh bên và chi tiết được gọi là cột nội dung.

00:15:59.000 --> 00:16:02.000
Nếu bạn đến từ UIKit, bạn có thể biết đây là cột bổ sung.

00:16:02.000 --> 00:16:09.000
Trong phong cảnh, nội dung và cột chi tiết được hiển thị và thanh bên có thể được chuyển đổi.

00:16:09.000 --> 00:16:16.000
Sau khi nhấn vào nút thanh công cụ, cột chi tiết trượt ra khỏi đường đi, nhường chỗ cho thanh bên và nội dung.

00:16:16.000 --> 00:16:23.000
Trong dọc, chỉ có cột chi tiết được hiển thị và nhấn vào nút thanh công cụ sẽ hiển thị nội dung.

00:16:23.000 --> 00:16:26.000
Từ đó, nhấn lại sẽ hiển thị thanh bên.

00:16:26.000 --> 00:16:31.000
Thanh bên và nội dung đều phủ lên chi tiết.

00:16:31.000 --> 00:16:40.000
Nói chung, tôi khuyên bạn nên gắn bó với kiểu tự động cho chế độ xem phân chia ba cột vì nó tận dụng tốt nhất không gian có sẵn và chuyên dùng cho các màn hình lớn hơn.

00:16:40.000 --> 00:16:46.000
Cũng giống như chế độ xem phân chia hai cột, chế độ xem phân chia ba cột thu gọn thành một ngăn xếp trong các lớp kích thước nhỏ gọn.

00:16:46.000 --> 00:16:51.000
Bây giờ tôi đã đề cập đến những điều cơ bản về chế độ xem phân chia, đã đến lúc thêm một cái vào ứng dụng địa điểm.

00:16:51.000 --> 00:16:53.000
Đây là chế độ xem nội dung.

00:16:53.000 --> 00:16:56.000
Tôi đã tạo một NavigationSplitView với hai cột ở đây.

00:16:56.000 --> 00:17:00.000
Cột đầu tiên là cột thanh bên và cột thứ hai là cột chi tiết.

00:17:00.000 --> 00:17:10.000
Cột chi tiết được điền bởi các liên kết từ cột thanh bên, nhưng nếu không có gì được hiển thị, trình giữ chỗ có "chọn một địa điểm" sẽ được hiển thị thay thế.

00:17:10.000 --> 00:17:13.000
Đây là ảnh chụp màn hình của trình giữ chỗ. Nó khá tuyệt.

00:17:13.000 --> 00:17:20.000
Điều này đang sử dụng kiểu tự động, hiển thị thanh bên ở chế tạo ngang, ẩn nó khỏi con đường trong chân dung.

00:17:20.000 --> 00:17:24.000
Nhấn vào một hàng trong thanh bên sẽ trình bày hàng đó trong cột chi tiết.

00:17:24.000 --> 00:17:28.000
Và khi sử dụng slide over, các cột sẽ tự động thu gọn.

00:17:28.000 --> 00:17:38.000
Đây chỉ là phần nổi của tảng băng trôi - có rất nhiều bổ sung điều hướng thú vị, bao gồm hỗ trợ tốt hơn cho việc khôi phục trạng thái, liên kết sâu và thậm chí kiểm soát lập trình phong phú hơn.

00:17:38.000 --> 00:17:44.000
Một lần nữa, tôi khuyến khích bạn xem phiên sách dạy nấu ăn điều hướng để biết thêm.

00:17:44.000 --> 00:17:50.000
Tôi đã tích hợp một số tính năng iPad tuyệt vời vào ứng dụng và tôi rất hào hứng khi tìm một số địa điểm yên bình để đọc.

00:17:50.000 --> 00:17:53.000
Hy vọng rằng tôi sẽ sớm bắt kịp câu lạc bộ sách của mình.

00:17:53.000 --> 00:18:05.000
Trong phiên này, tôi đã đề cập đến cách tận dụng các bảng để hiển thị dữ liệu phong phú, cách quản lý các tương tác lựa chọn phức tạp và cách tránh phương thức với chế độ xem phân chia.

00:18:05.000 --> 00:18:11.000
Đảm bảo kiểm tra các phiên liên quan và tinh chỉnh các ứng dụng SwiftUI của bạn để tận dụng sức mạnh của iPad.

00:18:11.000 --> 00:18:13.000
Cảm ơn bạn.

00:18:13.000 --> 23:59:59.000
♪ ♪

