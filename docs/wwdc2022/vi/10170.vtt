WEBVTT

00:00:00.000 --> 00:00:03.000
♪ (Nhạc hip-hop nhạc cụ Melo) ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
Xin chào, tên tôi là Michael Sumner.

00:00:11.000 --> 00:00:15.000
Tôi là một kỹ sư phần mềm làm việc trên Siri và App Intents.

00:00:15.000 --> 00:00:22.000
Trong phiên này, tôi muốn nói chuyện với bạn về việc tạo các phím tắt ứng dụng cho ứng dụng của bạn, sử dụng khung Ý định ứng dụng mới.

00:00:22.000 --> 00:00:28.000
Tôi sẽ bắt đầu với một cái nhìn tổng quan về Phím tắt Ứng dụng là gì và chúng liên quan đến Ý định Ứng dụng như thế nào.

00:00:28.000 --> 00:00:34.000
Sau đó, tôi sẽ hướng dẫn tạo một phím tắt ứng dụng trong Swift và thêm một tham số.

00:00:34.000 --> 00:00:41.000
Cuối cùng, tôi sẽ đề cập đến cách làm cho phím tắt ứng dụng của bạn có thể phát hiện được, để người dùng có thể hưởng lợi từ công việc khó khăn của bạn.

00:00:41.000 --> 00:00:46.000
Hãy bắt đầu với khung App Intents và App Shortcuts.

00:00:46.000 --> 00:00:53.000
Mọi người sử dụng các phím tắt để tạo quy trình làm việc nhiều bước với các ứng dụng của bạn có thể được sử dụng từ ứng dụng Phím tắt và từ Siri.

00:00:53.000 --> 00:01:02.000
Cho đến bây giờ, trước tiên ai đó phải thiết lập một phím tắt thông qua nút Thêm vào Siri hoặc ứng dụng Phím tắt trước khi họ có thể sử dụng ý định của bạn.

00:01:02.000 --> 00:01:08.000
Chúng tôi rất vui mừng được giới thiệu App Shortcuts, không yêu cầu thiết lập người dùng.

00:01:08.000 --> 00:01:12.000
Điều này giúp mọi người được hưởng lợi từ các phím tắt của bạn dễ dàng hơn bao giờ hết.

00:01:12.000 --> 00:01:19.000
Bằng cách tích hợp với Phím tắt ứng dụng, ý định từ ứng dụng của bạn sẽ có sẵn ngay khi ứng dụng của bạn được cài đặt.

00:01:19.000 --> 00:01:24.000
Điều này giúp ai đó dễ dàng khám phá và sử dụng chức năng của ứng dụng của bạn.

00:01:24.000 --> 00:01:31.000
Họ không còn cần phải truy cập ứng dụng Phím tắt hoặc sử dụng nút Thêm vào Siri để thiết lập bất cứ thứ gì.

00:01:31.000 --> 00:01:38.000
Phím tắt ứng dụng, giống như các phím tắt do người dùng tạo, có thể được chạy từ ứng dụng Phím tắt, Spotlight và Siri.

00:01:38.000 --> 00:01:44.000
Điều này cung cấp cho mọi người nhiều cách để khám phá và tương tác với ứng dụng của bạn từ nhiều nơi khác nhau trong hệ thống.

00:01:44.000 --> 00:01:52.000
Ví dụ, khi tìm kiếm trong Spotlight, phím tắt ứng dụng của bạn sẽ được hiển thị ngay trong kết quả tìm kiếm để dễ dàng truy cập.

00:01:52.000 --> 00:02:03.000
Bằng cách triển khai Phím tắt ứng dụng, người dùng của bạn sẽ có thể tương tác với ứng dụng của bạn trong các tương tác nhanh chóng, nhẹ nhàng giúp họ dễ dàng hoàn thành nhiệm vụ và đang trên con đường của mình.

00:02:03.000 --> 00:02:13.000
Nhóm của tôi đang làm việc trên một ứng dụng - Thiền - giúp người dùng thiền bằng cách hướng dẫn họ thông qua một bộ lời nhắc âm thanh và âm thanh để giúp họ tập trung vào những gì quan trọng.

00:02:13.000 --> 00:02:22.000
Hôm nay, để bắt đầu thiền, người dùng phải khởi chạy ứng dụng, đăng nhập và tìm phiên thiền mà họ muốn chạy.

00:02:22.000 --> 00:02:30.000
Bằng cách tích hợp với Phím tắt ứng dụng, người dùng của tôi có thể nhanh chóng truy cập các tính năng này từ mọi nơi chỉ bằng cách hỏi Siri.

00:02:30.000 --> 00:02:43.000
Và bằng cách bắt đầu một phiên nhanh hơn, người dùng có thể tích hợp thiền vào thói quen hàng ngày của họ, vào buổi sáng trước khi làm việc hoặc buổi tối để giúp thư giãn sau một ngày dài.

00:02:43.000 --> 00:02:51.000
Được rồi, chúng ta hãy đi sâu vào mã cần thiết để tạo Ý định ứng dụng và biến nó thành lối tắt ứng dụng.

00:02:51.000 --> 00:02:57.000
Không giống như các phím tắt trước đây, Phím tắt ứng dụng được xây dựng với khung Ý định ứng dụng mới.

00:02:57.000 --> 00:03:05.000
App Intents là một khuôn khổ mới, chỉ dành cho Swift được xây dựng từ đầu để giúp xây dựng ý định tuyệt vời nhanh hơn và dễ dàng hơn.

00:03:05.000 --> 00:03:12.000
Với App Intents, mọi thứ được xác định ngay trong mã nguồn Swift của bạn, thay vì một tệp siêu dữ liệu riêng biệt.

00:03:12.000 --> 00:03:20.000
Điều này loại bỏ bất kỳ bước tạo mã nào và cho phép bạn tập trung mà không cần chuyển đổi ngữ cảnh giữa trình chỉnh sửa nguồn và trình chỉnh sửa siêu dữ liệu.

00:03:20.000 --> 00:03:24.000
Chúng cũng dễ dàng hơn để xem xét mã hóa và giải quyết xung đột hợp nhất.

00:03:24.000 --> 00:03:35.000
Để xây dựng App Shortcuts, bạn sẽ cần viết một AppShortcutsProvider liệt kê các cụm từ và siêu dữ liệu khác cần thiết để biến App Intent của bạn thành một phím tắt chính thức.

00:03:35.000 --> 00:03:44.000
Và lưu ý rằng vì những thứ này được thiết lập mà không có bất kỳ tương tác nào của người dùng, bạn sẽ cần bao gồm tên ứng dụng của mình trong cụm từ kích hoạt.

00:03:44.000 --> 00:03:49.000
Ý định được định nghĩa là các cấu trúc Swift, triển khai giao thức AppIntent.

00:03:49.000 --> 00:03:58.000
Một ý định cơ bản chỉ có hai yêu cầu - một tiêu đề, được sử dụng để hiển thị ý định của bạn trong ứng dụng Phím tắt và một phương pháp được gọi là thực hiện.

00:03:58.000 --> 00:04:03.000
Phương pháp thực hiện là nơi bạn chạy logic ý định của mình và trả về kết quả.

00:04:03.000 --> 00:04:08.000
Ngoài ra, bạn có thể kích hoạt lời nhắc cho người dùng và chờ phản hồi của họ.

00:04:08.000 --> 00:04:14.000
Với mục đích này, tôi sẽ bắt đầu buổi thiền mặc định bằng cách sử dụng Dịch vụ Thiền của ứng dụng.

00:04:14.000 --> 00:04:21.000
Bởi vì phương thức thực hiện không đồng bộ, tôi có thể chạy mã không đồng bộ để bắt đầu phiên của mình.

00:04:21.000 --> 00:04:25.000
Khi phiên đã bắt đầu, tôi sẽ trả lại một hộp thoại được hiển thị cho người dùng.

00:04:25.000 --> 00:04:32.000
Và nếu ứng dụng của bạn được bản địa hóa, bạn sẽ muốn bản địa hóa chuỗi này trong tất cả các ngôn ngữ của mình.

00:04:32.000 --> 00:04:39.000
Cho đến nay, với những gì tôi đã xây dựng, StartMeditationIntent sẽ xuất hiện trong ứng dụng Phím tắt khi tạo một phím tắt.

00:04:39.000 --> 00:04:45.000
Một người dùng có động lực có thể thực hiện ý định này và tạo một phím tắt sẽ bắt đầu một phiên.

00:04:45.000 --> 00:04:51.000
Trong phím tắt này, tôi cũng đã thêm ý định thứ hai để bật Tiêu điểm.

00:04:51.000 --> 00:04:56.000
Theo mặc định, Ý định ứng dụng của tôi được hiển thị bằng cách sử dụng tiêu đề mà tôi đã chỉ định trong mã nguồn của mình.

00:04:56.000 --> 00:05:04.000
Để tùy chỉnh kết xuất cho hành động của bạn, hãy đảm bảo thêm một bản tóm tắt tham số vào Ý định ứng dụng của bạn.

00:05:04.000 --> 00:05:10.000
Tóm tắt tham số cho phép bạn tùy chỉnh giao diện ý định của mình, cũng như hiển thị các giá trị nội tuyến.

00:05:10.000 --> 00:05:14.000
Tuy nhiên, ý định này hoạt động tuyệt vời như một lối tắt.

00:05:14.000 --> 00:05:20.000
Lý tưởng nhất, ai đó sẽ có thể thực hiện ý định của tôi mà không cần phải viết một phím tắt nào cả.

00:05:20.000 --> 00:05:31.000
Bằng cách tạo một phím tắt ứng dụng, tôi có thể thực hiện bước thiết lập này thay mặt cho người dùng, vì vậy họ có thể bắt đầu sử dụng ý định của tôi ngay sau khi ứng dụng được cài đặt.

00:05:31.000 --> 00:05:35.000
Bây giờ tôi đã viết một ý định, tôi sẽ tạo một phím tắt ứng dụng cho nó.

00:05:35.000 --> 00:05:43.000
Tương tự như một ý định, Phím tắt ứng dụng được xác định trong mã Swift, bằng cách triển khai giao thức AppShortcutsProvider.

00:05:43.000 --> 00:05:50.000
Để triển khai giao thức, tôi sẽ chỉ cần tạo một getter duy nhất trả về tất cả các phím tắt ứng dụng mà tôi muốn thiết lập cho người dùng.

00:05:50.000 --> 00:05:55.000
Lưu ý rằng tổng cộng, ứng dụng của bạn có thể có tối đa 10 phím tắt ứng dụng.

00:05:55.000 --> 00:06:00.000
Tuy nhiên, hầu hết các ứng dụng chỉ cần một số ít.

00:06:00.000 --> 00:06:05.000
Vì vậy, tôi sẽ tạo một AppShortcut duy nhất cho StartMeditationIntent của mình.

00:06:05.000 --> 00:06:08.000
Để bắt đầu, tôi sẽ chuyển một ví dụ về ý định của mình.

00:06:08.000 --> 00:06:14.000
Nếu trình khởi tạo ý định của tôi lấy các tham số, tôi có thể chỉ định các giá trị ở đây.

00:06:14.000 --> 00:06:20.000
Thứ hai, tôi sẽ tạo một mảng các cụm từ nói sẽ gọi AppShortcut của tôi từ Siri.

00:06:20.000 --> 00:06:27.000
Bạn sẽ nhận thấy rằng thay vì viết tên ứng dụng của tôi trực tiếp vào chuỗi, tôi đã sử dụng mã thông báo .applicationName đặc biệt.

00:06:27.000 --> 00:06:35.000
Điều này cho phép Siri không chỉ chèn tên chính của ứng dụng của tôi mà còn bất kỳ từ đồng nghĩa tên ứng dụng nào mà tôi đã định cấu hình.

00:06:35.000 --> 00:06:42.000
Bởi vì người dùng có thể nói các cụm từ khác nhau để bắt đầu thiền định, tôi sẽ cung cấp thêm một vài cụm từ thay thế ở đây.

00:06:42.000 --> 00:06:48.000
Nếu ứng dụng của bạn được bản địa hóa, bạn cũng sẽ cần bản địa hóa các cụm từ này.

00:06:48.000 --> 00:06:55.000
Tuyệt vời. Vì vậy, bây giờ khi ai đó muốn hòa giải, họ chỉ cần ở lại với Siri, "Bắt đầu thiền."

00:06:55.000 --> 00:07:00.000
Siri sẽ gọi StartMeditationIntent và nói hộp thoại mà tôi đã trả về.

00:07:00.000 --> 00:07:08.000
Ngoài ra, nếu ai đó tìm kiếm ứng dụng của tôi trong Spotlight, họ sẽ thấy Phím tắt ứng dụng đầu tiên mà tôi đã liệt kê trong mã của mình.

00:07:08.000 --> 00:07:14.000
Khi người dùng nhấn vào kết quả, phím tắt sẽ chạy ngay lập tức mà không cần khởi chạy ứng dụng.

00:07:14.000 --> 00:07:19.000
Điều quan trọng cần lưu ý là nếu ý định của bạn kích hoạt khởi chạy ứng dụng, nó sẽ không được hiển thị trong Spotlight.

00:07:19.000 --> 00:07:28.000
Vì vậy, chỉ với một lượng mã rất nhỏ, giờ đây tôi đã làm cho người dùng của tôi thiền với ứng dụng của tôi trở nên đơn giản hơn rất nhiều.

00:07:28.000 --> 00:07:33.000
Nhưng ngay bây giờ, Siri hiển thị chế độ xem mặc định bất cứ khi nào chạy ý định của tôi.

00:07:33.000 --> 00:07:40.000
Điều này ổn, nhưng tôi thực sự muốn hiển thị cho người dùng nhiều thông tin hơn khi họ chạy phím tắt ứng dụng của tôi.

00:07:40.000 --> 00:07:47.000
Để làm điều này, tôi sẽ cần triển khai chế độ xem tùy chỉnh mà Siri có thể hiển thị bất cứ khi nào ý định của tôi được chạy.

00:07:47.000 --> 00:07:54.000
Các chế độ xem trong khung App Intents được xây dựng bằng SwiftUI và tận dụng công nghệ xem giống như các tiện ích.

00:07:54.000 --> 00:08:01.000
Điều này có nghĩa là bạn, với tư cách là một nhà phát triển, không cần phải xây dựng một tiện ích mở rộng giao diện người dùng riêng biệt cho chế độ xem tùy chỉnh của mình.

00:08:01.000 --> 00:08:05.000
Thay vào đó, bạn có thể chỉ cần trả lại chế độ xem khi chạy ý định của mình.

00:08:05.000 --> 00:08:10.000
Điều quan trọng là phải suy nghĩ về những hạn chế cụ thể mà điều này mang lại cho quan điểm của bạn.

00:08:10.000 --> 00:08:17.000
Cũng giống như các tiện ích, chế độ xem App Intent tùy chỉnh không thể bao gồm những thứ như tương tác hoặc hoạt ảnh.

00:08:17.000 --> 00:08:21.000
Đảm bảo tính đến điều này khi thiết kế giao diện người dùng của bạn.

00:08:21.000 --> 00:08:31.000
App Intents hỗ trợ hiển thị giao diện người dùng tùy chỉnh ở ba giai đoạn: xác nhận giá trị, xác nhận ý định và sau khi ý định kết thúc.

00:08:31.000 --> 00:08:36.000
Đối với ứng dụng của tôi, tôi sẽ trả lại chế độ xem tùy chỉnh khi kết thúc ý định của mình.

00:08:36.000 --> 00:08:44.000
Nếu bạn đang sử dụng những lời nhắc khác này, hãy chắc chắn suy nghĩ về cách bạn có thể tích hợp giao diện người dùng tùy chỉnh ở các bước đó.

00:08:44.000 --> 00:08:48.000
Cuối cùng, như tôi đã đề cập, việc hiển thị giao diện người dùng tùy chỉnh rất dễ dàng.

00:08:48.000 --> 00:08:52.000
Bạn chỉ cần trả lại quan điểm của mình từ ý định của mình.

00:08:52.000 --> 00:08:55.000
Được rồi, đã đến lúc nhảy vào một số mã.

00:08:55.000 --> 00:08:57.000
Thêm chế độ xem tùy chỉnh thật dễ dàng.

00:08:57.000 --> 00:09:01.000
Như tôi đã đề cập, tôi sẽ chỉ trả lại chế độ xem cùng với hộp thoại của mình.

00:09:01.000 --> 00:09:06.000
Khung App Intents sẽ đảm nhận việc trình bày quan điểm của tôi bên trong đoạn mã Siri.

00:09:06.000 --> 00:09:14.000
Hãy nhớ rằng các chế độ xem của bạn sẽ được hiển thị cùng với các chế độ xem Siri khác, như tiêu đề đoạn mã hoặc các nút xác nhận.

00:09:14.000 --> 00:09:19.000
Vì vậy, bạn sẽ muốn thiết kế đoạn mã của mình cảm thấy như ở nhà bên trong Siri.

00:09:19.000 --> 00:09:26.000
Tiếp theo, hãy kiểm tra cách tôi có thể mở rộng lối tắt ứng dụng để bao gồm các tham số.

00:09:26.000 --> 00:09:32.000
Trong lần thực hiện trước đây của tôi, tôi đã chọn bắt đầu buổi thiền mặc định.

00:09:32.000 --> 00:09:39.000
Nhưng ứng dụng của tôi bao gồm nhiều loại phiên tuyệt vời và người dùng sẽ muốn bắt đầu một phiên cụ thể mà họ có trong đầu.

00:09:39.000 --> 00:09:45.000
Lý tưởng nhất, người dùng của tôi sẽ có thể chỉ định phiên họ muốn bắt đầu khi chạy ý định của tôi.

00:09:45.000 --> 00:09:54.000
Để hỗ trợ các trường hợp sử dụng này, tôi sẽ cần mở rộng ý định của mình bằng cách thêm một tham số ghi lại phiên mà người dùng muốn chạy.

00:09:54.000 --> 00:09:58.000
Để thêm một tham số, trước tiên tôi cần xác định loại của tham số.

00:09:58.000 --> 00:10:03.000
Tôi sẽ tạo một cấu trúc MeditationSession có thông tin liên quan cho một phiên.

00:10:03.000 --> 00:10:10.000
Tôi sẽ bao gồm một cái tên, và tôi sẽ cung cấp cho nó một trường định danh, có thể là UUID.

00:10:10.000 --> 00:10:16.000
Để sử dụng cấu trúc này làm tham số cho ý định của mình, tôi cũng cần triển khai giao thức AppEntity.

00:10:16.000 --> 00:10:27.000
Triển khai giao thức AppEntity cho khung App Intents về loại của tôi và cho phép tôi chỉ định thông tin bổ sung, như cách thực thể được hiển thị.

00:10:27.000 --> 00:10:32.000
Giao thức thực thể yêu cầu loại của tôi có một mã định danh mà tôi đã cung cấp.

00:10:32.000 --> 00:10:37.000
Tôi cũng có thể sử dụng các loại khác, như số nguyên hoặc chuỗi.

00:10:37.000 --> 00:10:41.000
Tôi cũng cần cung cấp một số thông tin về cách hiển thị thực thể của mình.

00:10:41.000 --> 00:10:46.000
Điều này sẽ được sử dụng trong ứng dụng Phím tắt và những nơi khác mà thực thể của tôi được hiển thị.

00:10:46.000 --> 00:10:49.000
Cuối cùng, tôi cần kết nối một truy vấn mặc định.

00:10:49.000 --> 00:10:55.000
Tôi sẽ gọi truy vấn của mình là MeditationSessionQuery, và tôi sẽ triển khai nó tiếp theo.

00:10:55.000 --> 00:11:01.000
Để làm việc với thực thể của tôi, khung App Intents cần có khả năng tra cứu các thực thể của tôi dựa trên số nhận dạng của chúng.

00:11:01.000 --> 00:11:11.000
Để thực hiện điều này, giao thức EntityQuery chỉ xác định một yêu cầu: một hàm nhận số nhận dạng và trả về các thực thể phù hợp.

00:11:11.000 --> 00:11:16.000
Tôi sẽ triển khai chức năng này bằng cách tra cứu các phiên trong Trình quản lý phiên của mình.

00:11:16.000 --> 00:11:21.000
Tiếp theo, tôi sẽ cập nhật StartMeditationIntent của mình để thêm một tham số.

00:11:21.000 --> 00:11:25.000
Các thông số rất đơn giản; chúng chỉ là một thuộc tính bình thường trên cấu trúc của tôi.

00:11:25.000 --> 00:11:31.000
Nhưng để nói với App Intents về tham số của tôi, tôi cũng cần thêm trình bao bọc thuộc tính @Parameter.

00:11:31.000 --> 00:11:37.000
Trình bao bọc thuộc tính này cho phép App Intents biết rằng thuộc tính phiên là một phần trong ý định của tôi.

00:11:37.000 --> 00:11:44.000
Tôi cũng có thể chỉ định siêu dữ liệu bổ sung trong trình bao bọc thuộc tính Tham số, như tên hiển thị.

00:11:44.000 --> 00:11:50.000
Bây giờ tôi đã thêm một tham số vào ý định của mình, tôi cần hỏi người dùng họ muốn chạy phiên nào.

00:11:50.000 --> 00:11:58.000
Khung App Intents có hỗ trợ mạnh mẽ để hỏi người dùng các câu hỏi tiếp theo để thu thập các giá trị cho các thông số ý định của tôi.

00:11:58.000 --> 00:12:02.000
Những lời nhắc này sẽ được hiển thị ở bất cứ nơi nào ý định của tôi được chạy.

00:12:02.000 --> 00:12:07.000
Khi chạy từ Siri, Siri sẽ nói ra các câu hỏi và yêu cầu người dùng nói câu trả lời.

00:12:07.000 --> 00:12:14.000
Trong Spotlight và ứng dụng Phím tắt, người dùng sẽ được trình bày với cùng một lời nhắc trong giao diện người dùng điều khiển bằng cảm ứng.

00:12:14.000 --> 00:12:19.000
App Intents hỗ trợ ba loại lời nhắc giá trị.

00:12:19.000 --> 00:12:23.000
Định hướng yêu cầu người dùng chọn từ một danh sách cố định.

00:12:23.000 --> 00:12:32.000
Định hướng rất tuyệt vời để trình bày cho người dùng khi bạn có một bộ tùy chọn cố định nhỏ cho một tham số trong ý định của mình.

00:12:32.000 --> 00:12:37.000
Lời nhắc giá trị cho phép bạn yêu cầu người dùng cung cấp một giá trị mở.

00:12:37.000 --> 00:12:42.000
Đây là những thứ tuyệt vời cho các loại như chuỗi hoặc số nguyên, có thể lấy bất kỳ giá trị nào.

00:12:42.000 --> 00:12:53.000
Cuối cùng, xác nhận yêu cầu người dùng xác minh một giá trị cụ thể và có thể hữu ích nếu bạn muốn kiểm tra lại với người dùng rằng bạn hiểu ý định của họ.

00:12:53.000 --> 00:13:00.000
Nhắc nhở các giá trị là một cách tuyệt vời để làm cho ý định linh hoạt hơn và cho phép bạn thu thập thêm thông tin từ người dùng.

00:13:00.000 --> 00:13:06.000
Nhưng chúng cũng làm chậm cuộc trò chuyện và có thể làm người dùng thất vọng nếu bạn sử dụng chúng quá thường xuyên.

00:13:06.000 --> 00:13:15.000
Để biết thêm thông tin chi tiết về việc thiết kế ý định tuyệt vời, hãy xem phiên có tiêu đề "Thiết kế lối tắt ứng dụng" từ Lynn.

00:13:15.000 --> 00:13:25.000
Được rồi, bây giờ tôi đã thêm tham số phiên vào StartMeditationIntent, tôi sẽ tiếp tục và thêm logic vào phương pháp thực hiện của mình để nhắc nhở giá trị này.

00:13:25.000 --> 00:13:30.000
Trong ứng dụng của tôi, tôi có một số lượng nhỏ các phiên cố định mà người dùng có thể chạy.

00:13:30.000 --> 00:13:38.000
Nếu phiên chưa được chỉ định, tôi sẽ truy xuất danh sách từ Trình quản lý phiên của mình và trình bày định hướng cho người dùng.

00:13:38.000 --> 00:13:46.000
Sử dụng biểu diễn hiển thị cho mỗi phiên của tôi, App Intents sẽ định dạng các phiên thành các mục danh sách và hiển thị chúng cho người dùng.

00:13:46.000 --> 00:13:51.000
Khi người dùng chọn một cái, mặt hàng đã chọn sẽ được trả lại cho tôi.

00:13:51.000 --> 00:13:56.000
Tôi sẽ chuyển phiên đã chọn cho Dịch vụ Thiền định của mình, phiên này sẽ bắt đầu phiên.

00:13:56.000 --> 00:14:01.000
Sau đó tôi có thể trả lại một hộp thoại để cho người dùng biết rằng ý định đã bắt đầu.

00:14:01.000 --> 00:14:11.000
Vì người dùng đã cung cấp một phiên, bạn nên đặt tên của phiên trong hộp thoại để người dùng biết rằng chúng tôi hiểu yêu cầu của họ.

00:14:11.000 --> 00:14:19.000
Tuyệt vời, vì vậy bây giờ khi người dùng của tôi nói, "Bắt đầu Thiền", ứng dụng của tôi có thể nhắc người dùng về phiên cụ thể mà họ muốn chạy.

00:14:19.000 --> 00:14:26.000
Tuy nhiên, như tôi đã đề cập trước đây, người dùng thích các tương tác Siri nhanh chóng và đi vào trọng tâm.

00:14:26.000 --> 00:14:35.000
Lý tưởng nhất, tôi có thể để người dùng của mình nói với Siri phiên họ muốn chạy trong cụm từ đầu tiên, thay vì trong một câu hỏi tiếp theo.

00:14:35.000 --> 00:14:37.000
Chà, tôi có tin tốt.

00:14:37.000 --> 00:14:43.000
App Shortcuts có hỗ trợ mở rộng các cụm từ kích hoạt với các tham số được xác định trước.

00:14:43.000 --> 00:14:52.000
Bằng cách triển khai các cụm từ được tham số hóa, ứng dụng của tôi có thể hỗ trợ các câu nói như "Bắt đầu thiền định êm dịu" hoặc "Bắt đầu thiền đi bộ".

00:14:52.000 --> 00:15:00.000
Các tham số rất tuyệt vời khi bạn có một tập hợp cố định các giá trị tham số nổi tiếng mà bạn có thể chỉ định cho Siri trước thời hạn.

00:15:00.000 --> 00:15:04.000
Đối với ứng dụng của tôi, tôi sẽ sử dụng tên phiên của mình.

00:15:04.000 --> 00:15:07.000
Các thông số không dành cho các giá trị kết thúc mở.

00:15:07.000 --> 00:15:13.000
Ví dụ, không thể thu thập một chuỗi tùy ý từ người dùng trong câu nói ban đầu.

00:15:13.000 --> 00:15:22.000
Vì vậy, ứng dụng của tôi không thể hỗ trợ một cụm từ như "Tìm kiếm nhật ký của tôi cho X", trong đó X có thể là bất kỳ đầu vào nào từ người dùng.

00:15:22.000 --> 00:15:27.000
Thay vào đó, các giá trị tham số được chỉ định trước thời hạn, khi ứng dụng của bạn đang chạy.

00:15:27.000 --> 00:15:30.000
Hãy thực hiện một số cụm từ được tham số hóa.

00:15:30.000 --> 00:15:35.000
Để triển khai các cụm từ được tham số hóa trong ứng dụng của mình, tôi cần thực hiện một vài thay đổi.

00:15:35.000 --> 00:15:45.000
Đầu tiên, tôi sẽ cập nhật truy vấn cho SessionEntity của mình để triển khai phương thức suggestedResults() để trả về danh sách các thực thể cho phím tắt được tham số hóa của tôi.

00:15:45.000 --> 00:15:51.000
Thứ hai, tôi sẽ cần thông báo cho khung App Intents khi danh sách SessionEntities có sẵn đã thay đổi.

00:15:51.000 --> 00:15:56.000
Điều này cho phép khung App Intents tạo các cụm từ phím tắt mới để sử dụng trong Siri.

00:15:56.000 --> 00:16:03.000
Tôi sẽ làm điều này bằng cách cập nhật lớp mô hình ứng dụng của mình để thông báo khung App Intents bất cứ khi nào danh sách phiên của tôi thay đổi.

00:16:03.000 --> 00:16:12.000
Cuối cùng, tôi sẽ thêm một số cụm từ mới vào Phím tắt ứng dụng của mình để tham chiếu đến tham số phiên trên StartMeditationIntent của tôi.

00:16:12.000 --> 00:16:18.000
Vì vậy, trước tiên, tôi sẽ cập nhật MeditationSessionQuery bằng cách triển khai chức năng Thực thể được đề xuất.

00:16:18.000 --> 00:16:25.000
Khung App Intents sử dụng các phiên được trả về từ chức năng này để tạo các phím tắt được tham số hóa.

00:16:25.000 --> 00:16:34.000
Điều quan trọng cần lưu ý là mặc dù phương pháp này là tùy chọn, nhưng nếu tôi không triển khai phương pháp này, tôi sẽ không nhận được bất kỳ phím tắt được tham số hóa nào cả.

00:16:34.000 --> 00:16:42.000
Thứ hai, tôi sẽ cần cập nhật lớp mô hình ứng dụng của mình để thông báo cho khung App Intents bất cứ khi nào danh sách các phiên của tôi thay đổi.

00:16:42.000 --> 00:16:48.000
Trong ứng dụng của tôi, tôi không thường xuyên xuất bản các loại phiên mới mà tôi tìm nạp từ máy chủ trong nền.

00:16:48.000 --> 00:16:56.000
Tôi sẽ cập nhật SessionModel của mình để gọi phương thức updateAppShortcutParameters() bất cứ khi nào tôi nhận được các phiên mới.

00:16:56.000 --> 00:17:01.000
Phương pháp này được cung cấp bởi khung App Intents; bạn không cần phải tự triển khai nó.

00:17:01.000 --> 00:17:09.000
Khi được gọi, App Intents sẽ gọi truy vấn của thực thể của bạn để thu thập danh sách các tham số cho các cụm từ phím tắt của bạn.

00:17:09.000 --> 00:17:15.000
Cuối cùng, tôi sẽ thêm các cụm từ mới cho Phím tắt ứng dụng của mình bao gồm đường dẫn khóa phiên theo ý định của tôi.

00:17:15.000 --> 00:17:21.000
Khung App Intents sẽ kết hợp cụm từ này với tất cả các phiên được trả về từ truy vấn của tôi.

00:17:21.000 --> 00:17:29.000
Văn bản được sử dụng cho mỗi giá trị được lấy từ thuộc tính tiêu đề trên biểu diễn hiển thị của SessionEntity.

00:17:29.000 --> 00:17:35.000
Cũng giống như trước đây, tôi sẽ muốn bao gồm một vài cách khác nhau mà người dùng có thể diễn đạt Phím tắt ứng dụng của tôi.

00:17:35.000 --> 00:17:41.000
Điều này đảm bảo trải nghiệm mượt mà hơn nếu người dùng không nhớ cụm từ ưa thích của bạn.

00:17:41.000 --> 00:17:48.000
Được rồi, bây giờ tôi có một Phím tắt ứng dụng tuyệt vời, đầy đủ tính năng và tôi không thể chờ đợi người dùng của mình dùng thử.

00:17:48.000 --> 00:17:55.000
Nhưng để điều đó xảy ra, tôi cần làm một số công việc để giúp người dùng khám phá Lối tắt mới của tôi.

00:17:55.000 --> 00:17:59.000
Điều đầu tiên tôi muốn nói đến là chọn những cụm từ tuyệt vời.

00:17:59.000 --> 00:18:03.000
Các cụm từ tuyệt vời cho Phím tắt Ứng dụng rất ngắn và đáng nhớ.

00:18:03.000 --> 00:18:12.000
Người dùng sẽ có rất nhiều ứng dụng trên điện thoại của họ hỗ trợ Phím tắt ứng dụng; và trên thực tế, người dùng có thể gặp khó khăn trong việc nhớ chính xác cách diễn đạt các phím tắt của họ.

00:18:12.000 --> 00:18:17.000
Vì vậy, nếu có thể, hãy giữ các cụm từ của bạn ngắn gọn và đi vào trọng tâm.

00:18:17.000 --> 00:18:25.000
Dọc theo những dòng này, nếu tên ứng dụng của bạn có thể được sử dụng như một danh từ hoặc động từ, hãy cân nhắc sử dụng nó theo cách đó trong cụm từ của bạn.

00:18:25.000 --> 00:18:31.000
Trong ứng dụng của tôi, tôi đã sử dụng Thiền như một danh từ, để cụm từ này có thể ngắn gọn và đáng nhớ.

00:18:31.000 --> 00:18:36.000
Cuối cùng, từ đồng nghĩa tên ứng dụng có thể giúp ích rất nhiều cho người dùng của bạn.

00:18:36.000 --> 00:18:44.000
Nếu người dùng gọi ứng dụng của bạn là thứ gì đó khác với tên hiển thị của ứng dụng, bạn sẽ muốn xem xét thêm một từ đồng nghĩa tên ứng dụng cho nó.

00:18:44.000 --> 00:18:48.000
iOS 11 đã thêm hỗ trợ cho các từ đồng nghĩa tên ứng dụng.

00:18:48.000 --> 00:18:53.000
Nếu bạn chưa tạo một cái, bây giờ có thể là thời điểm tuyệt vời để làm điều đó.

00:18:53.000 --> 00:18:58.000
Điều tiếp theo tôi muốn nói đến là Mẹo Siri và liên kết Phím tắt.

00:18:58.000 --> 00:19:07.000
Bởi vì Phím tắt Ứng dụng không yêu cầu bất kỳ thiết lập người dùng nào, khả năng khám phá là rất quan trọng để người dùng tìm và sử dụng Phím tắt Ứng dụng của bạn.

00:19:07.000 --> 00:19:13.000
Với Phím tắt Ứng dụng, người dùng không còn cần nút Thêm vào Siri để thêm Phím tắt của bạn nữa.

00:19:13.000 --> 00:19:14.000
Nó đã được thêm vào rồi!

00:19:14.000 --> 00:19:20.000
Tuy nhiên, chúng tôi không muốn mất đi những lợi ích khả năng khám phá mà nút Thêm vào Siri cung cấp.

00:19:20.000 --> 00:19:24.000
Với ý nghĩ đó, chúng tôi đã tạo ra một chế độ xem Mẹo Siri mới.

00:19:24.000 --> 00:19:29.000
Chế độ xem này hoạt động tốt ở bất cứ nơi nào bạn có thể đã sử dụng nút Thêm vào Siri trong quá khứ.

00:19:29.000 --> 00:19:34.000
Chế độ xem Mẹo có sẵn trong cả SwiftUI và UIKit.

00:19:34.000 --> 00:19:40.000
Và chúng tôi đã cung cấp một số kiểu dáng để Mẹo trông tuyệt vời trong bất kỳ ứng dụng nào.

00:19:40.000 --> 00:19:45.000
Mẹo Siri được đặt tốt nhất theo ngữ cảnh, khi chúng có liên quan đến nội dung trên màn hình.

00:19:45.000 --> 00:19:52.000
Nếu người dùng vừa đặt hàng trong ứng dụng của bạn, hãy cân nhắc hiển thị Mẹo cho Phím tắt của bạn cung cấp trạng thái đơn hàng.

00:19:52.000 --> 00:20:00.000
Mẹo Siri nên được đặt một cách chu đáo, khi bạn cảm thấy người dùng có khả năng tương tác với Phím tắt ứng dụng của bạn trong tương lai gần.

00:20:00.000 --> 00:20:03.000
Mẹo Siri cũng hỗ trợ sa thải.

00:20:03.000 --> 00:20:09.000
Chế độ xem bao gồm một nút loại bỏ và sẽ kích hoạt đóng tùy chỉnh trong mã của bạn khi được nhấn.

00:20:09.000 --> 00:20:16.000
Bạn sẽ muốn xóa chế độ xem khỏi bố cục của mình và cân nhắc không hiển thị lại cho đến khi bạn cảm thấy nó có liên quan.

00:20:16.000 --> 00:20:22.000
Cuối cùng, chúng tôi cũng đã bao gồm một ShortcutsLink mới sẽ khởi chạy vào danh sách các Shortcuts từ ứng dụng của bạn.

00:20:22.000 --> 00:20:30.000
Yếu tố mới này rất tuyệt nếu ứng dụng của bạn có nhiều Phím tắt ứng dụng và bạn muốn cho phép người dùng khám phá tất cả chúng.

00:20:30.000 --> 00:20:36.000
Bây giờ, điều tuyệt vời về Phím tắt ứng dụng là chúng có sẵn ngay sau khi ứng dụng của bạn được cài đặt.

00:20:36.000 --> 00:20:44.000
Ngay cả trước khi ứng dụng được khởi chạy lần đầu tiên, người dùng có thể xem và chạy Phím tắt của bạn từ Spotlight, Siri và ứng dụng Phím tắt.

00:20:44.000 --> 00:20:48.000
Bạn có thể cần phải tính đến điều này khi xây dựng Phím tắt ứng dụng của mình.

00:20:48.000 --> 00:20:55.000
Ví dụ: nếu ứng dụng của bạn yêu cầu quy trình đăng nhập, người dùng có thể chưa đăng nhập trước khi chạy ý định của bạn.

00:20:55.000 --> 00:21:01.000
Ý định của bạn sẽ thất bại một cách duyên dáng với một thông báo lỗi giải thích cho người dùng rằng họ cần đăng nhập.

00:21:01.000 --> 00:21:12.000
Thứ hai, các cụm từ được tham số hóa cho Phím tắt Ứng dụng của bạn sẽ không khả dụng cho đến khi ứng dụng của bạn được khởi chạy và thông báo cho khung Ý định Ứng dụng rằng bạn có các giá trị tham số mới.

00:21:12.000 --> 00:21:21.000
Nếu Phím tắt Ứng dụng của bạn không chứa bất kỳ cụm từ không được tham số hóa nào, người dùng sẽ không thấy Phím tắt Ứng dụng của bạn cho đến khi họ khởi chạy ứng dụng của bạn lần đầu tiên.

00:21:21.000 --> 00:21:27.000
Bạn có thể cân nhắc thêm một vài cụm từ không được tham số hóa để tránh vấn đề này.

00:21:27.000 --> 00:21:35.000
Ngoài ra, Siri đã thêm hỗ trợ cho các cụm từ như, "Tôi có thể làm gì ở đây?" Và "Tôi có thể làm gì với Thiền?"

00:21:35.000 --> 00:21:41.000
Siri sẽ tự động thu thập và đề xuất bất kỳ cụm từ Phím tắt Ứng dụng nào và thay mặt bạn trình bày chúng.

00:21:41.000 --> 00:21:46.000
Ứng dụng của bạn không cần phải làm bất cứ điều gì bổ sung để chức năng này hoạt động.

00:21:46.000 --> 00:21:55.000
Cuối cùng, trong cả Siri và ứng dụng Phím tắt, thứ tự Hiển thị Phím tắt Ứng dụng của bạn được xác định bởi thứ tự mà bạn liệt kê Phím tắt Ứng dụng trong mã nguồn của mình.

00:21:55.000 --> 00:22:02.000
Bạn sẽ muốn xem xét đặt các Phím tắt Ứng dụng tốt nhất và hữu ích nhất của mình lên hàng đầu, để chúng được chú ý nhiều nhất.

00:22:02.000 --> 00:22:09.000
Tương tự, cụm từ đầu tiên bạn liệt kê trong mảng cụm từ sẽ được coi là cụm từ chính cho Phím tắt ứng dụng đó.

00:22:09.000 --> 00:22:18.000
Cụm từ chính được sử dụng làm nhãn trên ô Phím tắt và nó được hiển thị khi người dùng yêu cầu Siri trợ giúp với ứng dụng của bạn.

00:22:18.000 --> 00:22:24.000
Được rồi, chúng tôi đã đề cập rất nhiều về khung App Intents và App Shortcuts.

00:22:24.000 --> 00:22:27.000
Tôi muốn để lại cho bạn hai suy nghĩ quan trọng.

00:22:27.000 --> 00:22:40.000
Đầu tiên, Phím tắt ứng dụng giúp người dùng dễ dàng sử dụng ứng dụng của bạn từ mọi nơi trong hệ thống, vì vậy hãy nghĩ về các trường hợp sử dụng tốt nhất trong ứng dụng của bạn phù hợp với mô hình nhẹ hơn này.

00:22:40.000 --> 00:22:46.000
Thứ hai, một khi bạn đã triển khai Phím tắt ứng dụng, người dùng sẽ không biết về nó trừ khi bạn nói với họ!

00:22:46.000 --> 00:22:50.000
Hãy suy nghĩ kỹ về cách làm cho Phím tắt Ứng dụng của bạn có thể khám phá được.

00:22:50.000 --> 00:22:59.000
Xem xét các địa điểm trong ứng dụng của bạn nơi bạn có thể hiển thị Mẹo Siri, cũng như các vị trí ngoài sản phẩm, như trang web hoặc đăng nhập trong cửa hàng của bạn.

00:22:59.000 --> 00:23:05.000
Chúng tôi nóng lòng muốn xem tất cả các Phím tắt ứng dụng tuyệt vời mà bạn tạo với khung Ý định ứng dụng mới.

00:23:05.000 --> 00:23:12.000
Để tìm hiểu sâu hơn về thiết kế, cũng như khuôn khổ Ý định ứng dụng, hãy chắc chắn kiểm tra các cuộc nói chuyện khác trong tuần này.

00:23:12.000 --> 00:23:15.000
Cảm ơn, và chúc bạn có một WWDC tuyệt vời.

00:23:15.000 --> 23:59:59.000
♪

