WEBVTT

00:00:01.000 --> 00:00:09.000
♪ nhạc cụ hip hop ♪

00:00:09.000 --> 00:00:12.000
Xin chào, tên tôi là John, và tôi là một kỹ sư trong nhóm Xcode Cloud.

00:00:12.000 --> 00:00:15.000
Và tôi là Jo Lynn, một nhà thiết kế trong nhóm Xcode Cloud.

00:00:15.000 --> 00:00:23.000
Hôm nay chúng ta sẽ xem xét một số tính năng của Xcode Cloud cực kỳ hữu ích khi bạn sử dụng Xcode Cloud như một phần của nhóm, cho dù đó là nhóm 5 hay 500 người.

00:00:23.000 --> 00:00:30.000
Và tôi sẽ chia sẻ một số tính năng khác và các phương pháp hay nhất hoạt động tốt khi bạn sử dụng Xcode Cloud như một phần của nhóm.

00:00:30.000 --> 00:00:35.000
Trong phiên của chúng tôi hôm nay, chúng tôi sẽ đi vào chi tiết về một số chủ đề cũng được đề cập trong một số phiên khác.

00:00:35.000 --> 00:00:43.000
Nếu bạn muốn tìm hiểu thêm về webhooks và các chủ đề quy trình làm việc nâng cao khác, hãy xem phiên "Tùy chỉnh quy trình làm việc Xcode Cloud nâng cao của bạn".

00:00:43.000 --> 00:01:01.000
Trong phiên này, chúng tôi sẽ xem xét cách chúng tôi có thể tích hợp Xcode Cloud vào các công cụ và công nghệ hiện có của bạn mà bạn sử dụng hàng ngày, dễ dàng quản lý các phụ thuộc mã của bạn và giới thiệu các phương pháp hay nhất của Xcode Cloud để giúp bạn thiết lập quy trình làm việc để liên tục xây dựng, kiểm tra và phân phối các

00:01:01.000 --> 00:01:02.000
Hãy bắt đầu nào.

00:01:02.000 --> 00:01:06.000
Khi nói đến việc tích hợp Xcode Cloud vào các công cụ hiện có của bạn, chúng tôi có một vài lựa chọn.

00:01:06.000 --> 00:01:10.000
Webhooks cho phép tích hợp dễ dàng với các công cụ và dịch vụ hỗ trợ chúng.

00:01:10.000 --> 00:01:20.000
Bạn có thể kết nối webhook trong App Store Connect bằng cách cho Xcode Cloud biết URL nào để gửi webhook đến và bạn sẽ bắt đầu thấy những webhook đó xuất hiện ngay lập tức.

00:01:20.000 --> 00:01:34.000
API của chúng tôi cũng cho phép một lượng lớn khả năng hiển thị vào các bản dựng của bạn, cho phép bạn thực hiện những việc như dễ dàng tạo bảng điều khiển xây dựng, trích xuất các tạo tác xây dựng của bạn hoặc, trong ví dụ của chúng tôi hôm nay, tích hợp thông tin xây dựng vào phần mềm hiện có của bạn.

00:01:34.000 --> 00:01:46.000
Chúng tôi đã xây dựng một loạt các tính năng mới cho ứng dụng xe tải thực phẩm của mình, nhưng chúng tôi cũng đã tìm thấy các lỗi mới và bây giờ chúng tôi có một nhóm người làm việc trên ứng dụng cùng nhau, chúng tôi cảm thấy khó hiểu ai đang làm việc trên cái gì.

00:01:46.000 --> 00:01:52.000
Để giải quyết vấn đề này, chúng tôi đã quyết định sử dụng trình theo dõi sự cố để theo dõi tất cả công việc đang diễn ra trong ứng dụng của chúng tôi.

00:01:52.000 --> 00:01:55.000
Nếu bạn đang sử dụng trình theo dõi sự cố, bạn thường có chế độ xem như thế này.

00:01:55.000 --> 00:02:06.000
Một quy trình làm việc phổ biến với trình theo dõi vấn đề là tạo một vé, yêu cầu các nhà thiết kế và nhà phát triển làm việc trên vé đó và cuối cùng, đóng nó sau khi tính năng hoặc lỗi hoàn tất.

00:02:06.000 --> 00:02:12.000
Có thông tin xây dựng thực tế được hiển thị trong trình theo dõi vấn đề của chúng tôi sẽ giúp ích rất nhiều trong việc kết nối tất cả các dấu chấm lại với nhau.

00:02:12.000 --> 00:02:14.000
Hãy xem chúng ta có thể làm điều đó như thế nào bây giờ.

00:02:14.000 --> 00:02:23.000
Kế hoạch của chúng tôi ở đây là tạo ra một dịch vụ dựa trên Swift On Server rất đơn giản sẽ xử lý mọi thứ chúng tôi cần để tích hợp trình theo dõi vấn đề của mình với Xcode Cloud.

00:02:23.000 --> 00:02:29.000
Để tăng tốc độ phát triển, chúng tôi sẽ sử dụng khung web Vapor, cho phép chúng tôi tập trung vào việc viết mã xử lý webhook.

00:02:29.000 --> 00:02:32.000
Dòng chảy cơ bản sẽ trông giống như thế này.

00:02:32.000 --> 00:02:35.000
Một webhook sẽ đến từ Xcode Cloud đến máy chủ của chúng tôi.

00:02:35.000 --> 00:02:43.000
Chúng tôi sẽ đọc webhook đó và kiểm tra xem thông báo cam kết được viết bởi người cam kết có một chuỗi nhất định trong đó ánh xạ đến một vấn đề trong trình theo dõi của chúng tôi hay không.

00:02:43.000 --> 00:02:48.000
Nếu có, chúng tôi sẽ nhấn Xcode Cloud API để thu thập thêm thông tin về bản dựng.

00:02:48.000 --> 00:02:56.000
Sau đó, chúng tôi sẽ xây dựng một nhận xét mà chúng tôi có thể đăng lên trình theo dõi vấn đề của mình có chứa thông tin mà chúng tôi quan tâm.

00:02:56.000 --> 00:03:01.000
Sau đó, chúng tôi sẽ gọi một API trên trình theo dõi vấn đề của mình, điều này sẽ lưu thông báo chống lại vấn đề của chúng tôi.

00:03:01.000 --> 00:03:04.000
Đầu tiên, chúng ta hãy xem tài liệu Xcode Cloud API.

00:03:04.000 --> 00:03:08.000
Tất cả Xcode Cloud API đều nằm trong App Store Connect API.

00:03:08.000 --> 00:03:17.000
Nếu chúng tôi đã thiết lập mã thông báo xác thực cho App Store Connect API, chúng tôi đã có mọi thứ chúng tôi cần để truy cập dữ liệu Xcode Cloud của mình.

00:03:17.000 --> 00:03:22.000
Mở bộ sưu tập Build Runs, chúng ta có thể thấy một số điểm cuối cho phép chúng ta tương tác với các bản dựng của mình.

00:03:22.000 --> 00:03:29.000
Bạn có thể gọi một điểm cuối để tạo một bản dựng, hủy một bản dựng hoặc nhận thêm thông tin về một bản dựng cụ thể.

00:03:29.000 --> 00:03:36.000
Ví dụ: nếu bạn muốn xây dựng một bảng điều khiển để hiển thị trạng thái của các bản dựng của mình, điểm cuối Ci_Build_Runs phải là tất cả những gì chúng tôi cần gọi.

00:03:36.000 --> 00:03:40.000
Tiếp theo, hãy xem bộ sưu tập Hiện vật trong tài liệu.

00:03:40.000 --> 00:03:46.000
Đối với quy trình làm việc của chúng tôi, chúng tôi muốn giữ các tạo tác xây dựng của mình bên ngoài Xcode Cloud và API phải có mọi thứ chúng tôi cần để làm điều đó.

00:03:46.000 --> 00:03:52.000
Đầu tiên, chúng ta có thể lấy ID tạo tác từ điểm cuối hành động xây dựng, điểm cuối này sẽ trả về tất cả các tạo tác được tạo ra cho một hành động nhất định.

00:03:52.000 --> 00:04:00.000
Sau đó, chúng ta có thể gọi ci_artifact, điều này sẽ cung cấp cho chúng ta URL mà chúng ta cần để tải xuống tạo tác của mình trong thuộc tính downloadUrl.

00:04:00.000 --> 00:04:09.000
Hãy bắt đầu bằng cách tải xuống thông số kỹ thuật openAPI từ tài liệu App Store Connect và xem qua những gì chúng tôi cần để tạo ứng dụng khách của mình cho API.

00:04:09.000 --> 00:04:12.000
Hãy tạo một thư mục mới nơi chúng ta có thể tạo mã khách hàng của mình.

00:04:12.000 --> 00:04:14.000
Tôi sẽ gọi cho xcodecloud-client này.

00:04:14.000 --> 00:04:17.000
Bây giờ chúng ta cần tải xuống công cụ dòng lệnh cho trình tạo của chúng ta.

00:04:17.000 --> 00:04:27.000
Có rất nhiều cách để làm điều này trên trang web openAPI và đối với phiên của chúng tôi, tôi đã thiết lập nó. Hãy sao chép thông số kỹ thuật openAPI mà chúng tôi vừa nhận được từ app_store_connect_API vào thư mục của chúng tôi.

00:04:27.000 --> 00:04:36.000
Tuyệt vời, bây giờ chúng ta có thể gọi trình tạo openAPI và yêu cầu nó tạo một ứng dụng khách nhanh chóng cho API của chúng ta.

00:04:36.000 --> 00:04:39.000
Trong khi máy phát điện đang chạy, chúng ta có thể nhanh chóng nói về những gì nó đang làm.

00:04:39.000 --> 00:04:45.000
Đặc tả openAPI được tạo thành từ thông tin về tất cả các đường dẫn và mô hình tạo nên API của chúng tôi.

00:04:45.000 --> 00:04:55.000
Trình tạo đang đi qua từng đường dẫn API và tạo mã Swift có thể nói chuyện với đường dẫn cụ thể đó, với một đối tượng nhanh được nhập mạnh.

00:04:55.000 --> 00:05:01.000
Trong hầu hết các trường hợp, điều này có nghĩa là bạn không phải thực hiện bất kỳ mã hóa hoặc giải mã JSON nào.

00:05:01.000 --> 00:05:06.000
Tuyệt vời, trình tạo của chúng tôi đã hoàn thành, vì vậy chúng ta hãy xem nhanh các tệp mà nó đã tạo ra.

00:05:06.000 --> 00:05:09.000
Thuận tiện, mã khách hàng là một gói Swift.

00:05:09.000 --> 00:05:13.000
Điều này làm cho nó thực sự dễ dàng để đưa vào máy chủ webhook của chúng tôi sẽ cập nhật trình theo dõi vấn đề của chúng tôi.

00:05:13.000 --> 00:05:19.000
Bây giờ chúng ta có thể cam kết mã của mình vào một kho lưu trữ git mới và sau đó chúng ta có thể tham chiếu nó dưới dạng một gói Swift.

00:05:19.000 --> 00:05:24.000
Bây giờ chúng ta đã có mọi thứ chúng ta cần để nói chuyện với API của mình, hãy thiết lập webhook của chúng ta.

00:05:24.000 --> 00:05:29.000
Trong App Store Connect, chúng tôi có thể đăng ký webhook của mình để cho máy chủ của chúng tôi biết mỗi khi bản dựng hoàn tất.

00:05:29.000 --> 00:05:44.000
Để làm điều đó, hãy truy cập sản phẩm của bạn trong App Store Connect, chuyển đến cài đặt và điều hướng đến webhooks.

00:05:44.000 --> 00:05:46.000
Và tôi sẽ dán URL cho máy chủ của chúng tôi.

00:05:46.000 --> 00:05:49.000
Điều này sẽ cho Xcode Cloud biết nơi gửi webhooks.

00:05:49.000 --> 00:05:55.000
Với thiết lập móc nối web của chúng tôi, điều duy nhất còn lại cần làm là viết mã để xử lý chúng, vì vậy hãy bắt đầu với điều đó.

00:05:55.000 --> 00:06:00.000
Đầu tiên chúng ta phải xác định một cấu trúc phù hợp với các trường mà chúng ta quan tâm từ webhook của mình.

00:06:00.000 --> 00:06:09.000
Webhook sẽ chứa thông tin về bản dựng cụ thể đang được thực hiện, cũng như từng hành động đang được thực hiện, vì vậy hãy giữ chúng trong cấu trúc tải trọng webhook của chúng tôi.

00:06:09.000 --> 00:06:14.000
Tiếp theo, chúng ta phải tạo mã để Vapor định tuyến chính xác các webhook đến chức năng của chúng ta.

00:06:14.000 --> 00:06:19.000
Chúng tôi sẽ xác định một hàm chạy trên yêu cầu đăng bài đến đường dẫn webhook.

00:06:19.000 --> 00:06:28.000
Bên trong chức năng này, tất cả những gì chúng ta cần làm để chuyển đổi tải trọng JSON đến thành một đối tượng Swift được nhập mạnh là giải mã nó, vì vậy chúng tôi cũng sẽ thêm mã đó.

00:06:28.000 --> 00:06:37.000
Tuyệt vời, bây giờ tất cả những gì chúng ta cần làm là gọi Xcode Cloud API để biết thêm một chút thông tin về bản dựng vừa hoàn thành để chúng ta có thể đưa nó vào trang theo dõi vấn đề của mình.

00:06:37.000 --> 00:06:43.000
Tải trọng webhook chứa rất nhiều thông tin về bản dựng vừa chạy và những hành động nào đã thành công hay thất bại.

00:06:43.000 --> 00:06:47.000
Chúng ta có thể dừng lại ở đó, nhưng hãy đưa nó lên cấp độ tiếp theo.

00:06:47.000 --> 00:06:53.000
Tôi nghĩ sẽ thật tuyệt vời nếu chúng ta cũng bao gồm thông tin về những vấn đề được tìm thấy trong mỗi hành động.

00:06:53.000 --> 00:07:03.000
Chúng tôi có thể viết một hàm mở rộng cho CiBuildActionsAPI cung cấp cho chúng tôi khả năng dễ dàng trả lại các vấn đề mà chúng tôi quan tâm cho một hành động cụ thể.

00:07:03.000 --> 00:07:12.000
Trong tiện ích mở rộng này, chúng tôi sẽ viết một hàm lấy ID hành động xây dựng làm tham số và trả về tất cả các vấn đề được tìm thấy cho một hành động cụ thể.

00:07:12.000 --> 00:07:16.000
Tôi đã có cái này trong dự án của mình, nhưng hãy điền vào phần còn lại của mã của chúng tôi.

00:07:16.000 --> 00:07:21.000
Chúng tôi chỉ muốn trình xử lý webhook của chúng tôi chạy nếu việc xây dựng hoàn tất, vì vậy hãy đề phòng điều đó.

00:07:21.000 --> 00:07:24.000
Tiếp theo chúng ta có thể bắt đầu làm việc trên chuỗi bình luận của mình.

00:07:24.000 --> 00:07:32.000
Tôi nghĩ sẽ thật tuyệt nếu có số bản dựng, hàm băm cam kết, cũng như tác giả trong chuỗi này.

00:07:32.000 --> 00:07:37.000
Bây giờ chúng ta hãy xem qua từng hành động và gọi hàm mở rộng của chúng ta để nhận các vấn đề cho mỗi hành động.

00:07:37.000 --> 00:07:47.000
Hãy chuyển tất cả những điều này cho trình theo dõi vấn đề của chúng tôi ngay bây giờ.

00:07:47.000 --> 00:07:52.000
Với tất cả thông tin này, tôi nghĩ điều này sẽ giúp chúng tôi cập nhật trình theo dõi vấn đề với các bản dựng của mình.

00:07:52.000 --> 00:07:54.000
Và chúng ta đã hoàn thành!

00:07:54.000 --> 00:08:03.000
Tại thời điểm này, chúng tôi muốn lưu trữ mã máy chủ của mình tại URL mà chúng tôi đã cung cấp cho Xcode Cloud cho các webhooks và chúng tôi sẽ bắt đầu thấy thông tin xây dựng Xcode Cloud trong trình theo dõi vấn đề của mình.

00:08:03.000 --> 00:08:06.000
Hãy có một bản tóm tắt nhanh về những gì chúng ta đã học được cho đến nay.

00:08:06.000 --> 00:08:12.000
Xcode Cloud có một API tuyệt vời mà bạn có thể sử dụng để tích hợp sâu hơn với quy trình phát triển hiện tại của mình.

00:08:12.000 --> 00:08:20.000
Bạn có thể sử dụng API đó cùng với webhooks để kết nối tất cả các dấu chấm với nhau và tích hợp các công cụ và công nghệ hiện có của bạn với Xcode Cloud.

00:08:20.000 --> 00:08:24.000
Tiếp theo, đây là Jo để nói về các tính năng khác và các phương pháp hay nhất.

00:08:24.000 --> 00:08:25.000
Jo: Cảm ơn, John!

00:08:25.000 --> 00:08:34.000
Xcode Cloud được thiết kế để tích hợp với các công cụ và dịch vụ dành cho nhà phát triển Apple mà bạn sử dụng để tạo các ứng dụng và khuôn khổ.

00:08:34.000 --> 00:08:41.000
Tuy nhiên, dự án Xcode của bạn có thể yêu cầu các phụ thuộc bổ sung hoặc các công cụ bên ngoài để biên dịch mã của bạn.

00:08:41.000 --> 00:08:45.000
Xcode Cloud hoạt động tốt với Swift Package Manager.

00:08:45.000 --> 00:08:53.000
Nó hỗ trợ các phụ thuộc gói Swift mà không yêu cầu bất kỳ cấu hình bổ sung nào, nếu kho lưu trữ của gói có thể truy cập công khai.

00:08:53.000 --> 00:09:05.000
Bạn cũng có thể làm cho Xcode Cloud hoạt động với các trình quản lý phụ thuộc của bên thứ ba như Cocoapods và Carthage, nhưng bạn sẽ phải làm thêm một chút công việc bằng cách sử dụng các tập lệnh xây dựng tùy chỉnh.

00:09:05.000 --> 00:09:15.000
Bạn có thể tham khảo tài liệu Xcode để được hướng dẫn về cách cung cấp các phụ thuộc cho Xcode Cloud.

00:09:15.000 --> 00:09:26.000
Khi chúng tôi đã thêm gói Swift của mình và đẩy các thay đổi để bắt đầu quy trình làm việc, chúng tôi có thể chuyển đến tab đám mây của Trình điều hướng báo cáo và xem trạng thái của bản dựng mới nhất của chúng tôi.

00:09:26.000 --> 00:09:31.000
Chọn Nhật ký để xem nhật ký xây dựng chi tiết.

00:09:31.000 --> 00:09:36.000
Chúng ta sẽ thấy rằng Xcode Cloud đã tự động giải quyết các phụ thuộc một cách kỳ diệu.

00:09:36.000 --> 00:09:50.000
Sau khi Xcode Cloud đã hoàn thành thành công bản dựng đầu tiên, bạn nên lên kế hoạch cho các bước tiếp theo để tinh chỉnh thực hành tích hợp và phân phối liên tục của mình để đảm bảo rằng ứng dụng hoặc khuôn khổ của bạn luôn ở trạng thái có thể gửi được.

00:09:50.000 --> 00:10:05.000
Trong phần này, tôi sẽ nói về cách bạn có thể sử dụng Xcode Cloud với SwiftLint để phân tích mã tĩnh, cách hạn chế chỉnh sửa quy trình làm việc của bạn và giá trị của việc định cấu hình nhiều điều kiện bắt đầu.

00:10:05.000 --> 00:10:14.000
SwiftLint là một công cụ linter mã nguồn mở thực thi các quy tắc và quy ước hướng dẫn phong cách thường được cộng đồng Swift chấp nhận.

00:10:14.000 --> 00:10:20.000
Nó thực hiện phân tích mã tĩnh để cải thiện chất lượng mã của bạn và ngăn chặn các hành vi xấu.

00:10:20.000 --> 00:10:27.000
Chúng tôi nhận thấy rằng SwiftLint là một cách tuyệt vời để giữ cho cơ sở mã của nhóm bạn nhất quán, đặc biệt là khi làm việc với các nhóm lớn hơn.

00:10:27.000 --> 00:10:33.000
Những gì chúng tôi sẽ chỉ ra bây giờ là cách tích hợp SwiftLint với Xcode Cloud bằng cách sử dụng tập lệnh xây dựng tùy chỉnh.

00:10:33.000 --> 00:10:41.000
Chúng tôi muốn Xcode Cloud chạy công cụ SwiftLint sau khi nó sao chép mã nguồn của chúng tôi từ kho lưu trữ chính của nhóm.

00:10:41.000 --> 00:10:51.000
Trong trình điều hướng Dự án, tôi đã thêm tập lệnh post_clone vào thư mục ci_scripts vào dự án Food Truck của mình.

00:10:51.000 --> 00:10:59.000
Môi trường xây dựng Xcode Cloud bao gồm Homebrew và đó là những gì chúng tôi đang sử dụng ở đây để cài đặt SwiftLint.

00:10:59.000 --> 00:11:02.000
Trên dòng này, chúng tôi đang thực hiện SwiftLint.

00:11:02.000 --> 00:11:16.000
Một điều cần nhớ là tập lệnh thực thi trong thư mục ci_scripts, vì vậy chúng tôi phải yêu cầu SwiftLint chạy trong biến môi trường ci_workspace, biến này trỏ đến kho lưu trữ của chúng tôi.

00:11:16.000 --> 00:11:19.000
Hãy kiểm tra kết quả phân tích mã.

00:11:19.000 --> 00:11:24.000
Có vẻ như SwiftLint đã tìm thấy một loạt các vi phạm, 15 trong số đó nghiêm trọng.

00:11:24.000 --> 00:11:42.000
Vì đây là lần đầu tiên chúng tôi tích hợp các công cụ của mình, tôi sẽ tạm thời hủy kích hoạt quy trình làm việc này để chúng tôi có thể thảo luận với phần còn lại trong nhóm trước, đưa ra thỏa thuận về phong cách và quy ước mã hóa, sau đó quyết định với tư cách là một nhóm những vấn đề mà chúng tôi muốn khắc phục.

00:11:42.000 --> 00:11:46.000
Bạn có thể hủy kích hoạt quy trình làm việc trong Xcode từ menu Quản lý quy trình làm việc.

00:11:46.000 --> 00:11:57.000
Làm như vậy sẽ ngăn các điều kiện bắt đầu hoạt động và chỉ có thể bắt đầu xây dựng thủ công.

00:11:57.000 --> 00:12:04.000
Bây giờ quy trình phân tích mã tĩnh của chúng tôi đã bị vô hiệu hóa, chúng tôi có thể tập trung vào việc khắc phục các sự cố mà chúng tôi muốn khắc phục.

00:12:04.000 --> 00:12:07.000
Sau đó chúng ta có thể quay lại và kích hoạt quy trình làm việc này.

00:12:07.000 --> 00:12:13.000
Nhóm của chúng tôi đã phát triển nhanh chóng và chúng tôi muốn đưa ra những lựa chọn có ý thức về cấu hình quy trình làm việc.

00:12:13.000 --> 00:12:21.000
Bởi vì tôi chịu trách nhiệm duy trì và quản lý tất cả quy trình làm việc của nhóm chúng tôi, tôi không muốn các thành viên trong nhóm thực hiện các thay đổi không chủ ý đối với quy trình làm việc.

00:12:21.000 --> 00:12:23.000
Điều đó mất rất nhiều thời gian để hoàn tác.

00:12:23.000 --> 00:12:29.000
Để ngăn chặn những thay đổi không chủ ý, bạn có thể hạn chế ai có thể chỉnh sửa quy trình làm việc của mình.

00:12:29.000 --> 00:12:35.000
Chọn quy trình làm việc, sau đó chọn Hạn chế Chỉnh sửa từ trình đơn ngữ cảnh.

00:12:35.000 --> 00:12:47.000
Bất kỳ ai trong nhóm đều có thể sử dụng hoặc chạy quy trình làm việc này, nhưng chỉ quản trị viên, chủ tài khoản và người quản lý ứng dụng mới có thể thực thi một hạn chế, điều này khiến nó chỉ họ mới có thể chỉnh sửa được.

00:12:47.000 --> 00:12:51.000
Một quy trình làm việc trong đó việc chỉnh sửa bị hạn chế sẽ có biểu tượng 'chìa khóa'.

00:12:51.000 --> 00:12:59.000
Điều này có nghĩa là nó đã bị khóa và chỉ có thể được chỉnh sửa bởi bạn và những người dùng quản trị khác.

00:12:59.000 --> 00:13:06.000
Thay vào đó, nếu bạn thấy biểu tượng 'khóa', điều này có nghĩa là nó đã bị khóa bởi quản trị viên và bạn không thể chỉnh sửa.

00:13:06.000 --> 00:13:13.000
Tính năng này giúp bạn dễ dàng quản lý quyền truy cập cho các quy trình làm việc phức tạp, đặc biệt nếu bạn là thành viên của một nhóm lớn.

00:13:13.000 --> 00:13:18.000
Chúng tôi vừa học được cách tạm dừng hoặc khóa quy trình làm việc của mình dễ dàng như thế nào.

00:13:18.000 --> 00:13:22.000
Bây giờ hãy nói về quản lý và bảo trì quy trình làm việc.

00:13:22.000 --> 00:13:30.000
Tôi muốn chạy các bài kiểm tra tương tự và lưu trữ các hành động bất cứ khi nào tôi thực hiện yêu cầu kéo hoặc khi tôi hợp nhất chi nhánh của mình.

00:13:30.000 --> 00:13:33.000
Cách tốt nhất để làm như vậy là thông qua nhiều điều kiện bắt đầu.

00:13:33.000 --> 00:13:41.000
Điều này cải thiện việc duy trì quy trình làm việc vì nó làm giảm số lượng quy trình làm việc mà bạn sẽ cần tạo và quản lý.

00:13:41.000 --> 00:14:01.000
Để minh họa, trong ví dụ này, tôi muốn khởi động một bản dựng với các điều kiện sau: nếu có những thay đổi trong nhánh chính hoặc nhánh phát hành, hoặc nếu có một bản dựng theo lịch trình cho nhánh chính, thì hãy chạy cùng một bộ lưu trữ và hành động kiểm tra cũng như triển khai cho TestFlight để kiểm tra nội bộ.

00:14:01.000 --> 00:14:10.000
Thay vì tạo 3 quy trình làm việc, sau đó quản lý chúng và giữ chúng đồng bộ, tôi sẽ tạo một quy trình làm việc duy nhất chỉ định tất cả các điều kiện bắt đầu trong một lần.

00:14:10.000 --> 00:14:17.000
Điều này cải thiện khả năng quản lý, đặc biệt là khi nhóm có nhiều quy trình làm việc để duy trì.

00:14:17.000 --> 00:14:20.000
Cấu hình các điều kiện bắt đầu trong Xcode thật dễ dàng.

00:14:20.000 --> 00:14:28.000
Từ trình chỉnh sửa quy trình làm việc, chọn loại điều kiện bắt đầu từ menu nút +.

00:14:28.000 --> 00:14:35.000
Xcode Cloud trong App Store Connect cung cấp trải nghiệm dựa trên web đầy đủ tính năng.

00:14:35.000 --> 00:14:46.000
Mọi thứ tôi vừa làm trong Xcode để định cấu hình quy trình làm việc của chúng tôi, từ việc hủy kích hoạt nó và khóa nó, đến thiết lập nhiều điều kiện bắt đầu, cũng có sẵn từ AppStoreConnect.

00:14:46.000 --> 00:15:03.000
Xcode Cloud là một dịch vụ tích hợp và phân phối mạnh mẽ, liên tục được tích hợp ngay trong Xcode giúp các nhóm phát triển ở mọi quy mô và có thể dễ dàng tích hợp với các công cụ và quy trình hiện có của bạn để giúp bạn cung cấp các ứng dụng chất lượng cao cho người dùng của mình.

00:15:03.000 --> 00:15:09.000
Đối với những người tham gia Xcode Cloud beta, chúng tôi thực sự đánh giá cao phản hồi của bạn và mong muốn được nghe thêm.

00:15:09.000 --> 00:15:13.000
Chúng tôi hy vọng những tính năng này có thể giúp bạn tinh chỉnh thực hành tích hợp và phân phối liên tục của nhóm mình.

00:15:13.000 --> 00:15:16.000
Cảm ơn bạn đã xem, và chúc bạn có một WWDC tuyệt vời!

00:15:16.000 --> 23:59:59.000
♪ nhạc cụ hip hop ♪

