WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Nhạc hip-hop nhạc cụ êm dịu ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
Xin chào, tên tôi là Mindy và tôi là một kỹ sư trong nhóm Ảnh.

00:00:14.000 --> 00:00:20.000
Hôm nay, tôi sẽ xem xét cách truy cập lịch sử thay đổi Ảnh trong ứng dụng của bạn.

00:00:20.000 --> 00:00:29.000
PhotoKit cung cấp một bộ API phong phú để truy cập và cập nhật ảnh, video và album được lưu trữ trong thư viện ảnh.

00:00:29.000 --> 00:00:45.000
PhotoKit được thiết kế cho các ứng dụng yêu cầu mức độ truy cập và tích hợp Ảnh sâu để quản lý hoặc chỉnh sửa ảnh, máy ảnh tùy chỉnh hoặc ứng dụng cung cấp cho mọi người cách duyệt thư viện ảnh của họ theo một cách độc đáo.

00:00:45.000 --> 00:00:54.000
Những loại ứng dụng này có thể muốn theo dõi cách thư viện ảnh thay đổi theo thời gian để phản ánh chặt chẽ trải nghiệm Ảnh.

00:00:54.000 --> 00:01:02.000
Giả sử tôi đã tạo một ứng dụng đi bộ đường dài xã hội cho phép mọi người chia sẻ và chỉnh sửa ảnh về các chuyến đi bộ đường dài với bạn bè.

00:01:02.000 --> 00:01:13.000
Khi ai đó khởi chạy ứng dụng, ứng dụng sẽ thu thập ảnh từ dấu thời gian bắt đầu và kết thúc của bài tập đi bộ đường dài mới nhất của họ để tạo ảnh ghép về trải nghiệm của họ trên núi.

00:01:13.000 --> 00:01:18.000
Các ảnh ghép luôn đồng bộ với các ảnh đã chọn từ thư viện ảnh.

00:01:18.000 --> 00:01:25.000
Ví dụ, nếu ai đó nhận được ảnh đi bộ đường dài từ một người bạn, ứng dụng sẽ tạo ảnh ghép mới bằng cách sử dụng các bản cập nhật này.

00:01:25.000 --> 00:01:37.000
Cho đến nay, để ứng dụng phát hiện ra các tài sản mới được chèn và các thay đổi đối với ảnh ghép đi bộ đường dài trước đó, ứng dụng sẽ cần thực hiện một loạt các tìm nạp.

00:01:37.000 --> 00:01:46.000
Để xác định nội dung nào đã được chèn vào, ứng dụng có thể tìm nạp nội dung với ngày được tạo muộn hơn ngày ra mắt ứng dụng cuối cùng.

00:01:46.000 --> 00:01:50.000
Việc xác định cập nhật và xóa tài sản phức tạp hơn.

00:01:50.000 --> 00:02:06.000
Ứng dụng sẽ cần lấy lại mọi tài sản trong mỗi ảnh ghép và kiểm tra ngày sửa đổi để xác định cập nhật tài sản, nhưng điều này có thể mang lại kết quả dương tính giả, vì ngày sửa đổi tài sản có thể được đặt bởi các hoạt động xử lý Ảnh nội bộ.

00:02:06.000 --> 00:02:16.000
Việc Xóa trong thư viện ảnh khó theo dõi hơn, vì tất cả các tài sản được theo dõi cần được tìm nạp và phân biệt đối với các tài sản không được trả lại cùng với tìm nạp.

00:02:16.000 --> 00:02:28.000
Tổng cộng, điều này có nghĩa là có ba kiểm tra riêng biệt cần được thực hiện mỗi khi ứng dụng được khởi chạy, điều này có thể đặc biệt tốn kém nếu ứng dụng hiển thị số lượng lớn tài sản.

00:02:28.000 --> 00:02:38.000
Thay vì thực hiện các tìm nạp và kiểm tra các kết quả không chắc chắn khác nhau, điều gì sẽ xảy ra nếu có cách để biết chính xác điều gì đã thay đổi trong một lệnh gọi API thống nhất?

00:02:38.000 --> 00:02:42.000
Chà, tôi rất vui khi nói rằng chúng tôi đã làm được điều đó!

00:02:42.000 --> 00:02:50.000
API lịch sử thay đổi mới cho phép một cách dễ dàng hơn để theo dõi các bản cập nhật ngoại tuyến cho thư viện ảnh.

00:02:50.000 --> 00:02:58.000
Lịch sử thay đổi bao gồm một dòng thời gian của các thay đổi như chèn, cập nhật và xóa vào thư viện ảnh.

00:02:58.000 --> 00:03:07.000
Trong dòng thời gian ví dụ này, có nhiều thay đổi về nội dung, album và thư mục trong lịch sử thay đổi trong ba ngày qua.

00:03:07.000 --> 00:03:17.000
Sử dụng dòng thời gian này, làm thế nào bạn có thể xác định những thay đổi nào đã xảy ra trong hai ngày qua hoặc lần cuối cùng bạn khởi chạy ứng dụng của mình?

00:03:17.000 --> 00:03:25.000
Bây giờ bạn có thể sử dụng mã thông báo thay đổi liên tục đại diện cho trạng thái của thư viện ảnh tại một thời điểm nhất định.

00:03:25.000 --> 00:03:37.000
Mã thông báo này có thể được duy trì trong suốt quá trình khởi chạy ứng dụng và nó có thể được sử dụng để tìm nạp các thay đổi đối với thư viện ảnh đã xảy ra kể từ mã thông báo đó, bao gồm các thay đổi ứng dụng của bên thứ ba.

00:03:37.000 --> 00:03:45.000
Lưu ý rằng nếu ứng dụng của bạn ở chế độ thư viện giới hạn, chỉ những thay đổi đối với các đối tượng PhotoKit do người dùng chọn sẽ được trả về.

00:03:45.000 --> 00:03:55.000
Mã thông báo thay đổi này là cục bộ của thiết bị và rẻ để truy cập từ một thay đổi liên tục hoặc phiên bản thư viện ảnh bất cứ lúc nào.

00:03:55.000 --> 00:04:06.000
API mới này có sẵn trên mọi nền tảng hỗ trợ PhotoKit: macOS, iOS, iPadOS và tvOS.

00:04:06.000 --> 00:04:14.000
Khi ứng dụng của bạn đang chạy và hoạt động với thư viện ảnh, bạn có thể lưu trữ mã thông báo thay đổi liên tục trong ứng dụng.

00:04:14.000 --> 00:04:21.000
Sau đó, bạn có thể sử dụng mã thông báo để tìm nạp các thay đổi thư viện ảnh đã xảy ra kể từ đó.

00:04:21.000 --> 00:04:33.000
Đối với mỗi thay đổi liên tục, bạn có thể lấy chi tiết thay đổi cho ba loại đối tượng Ảnh: tài sản, bộ sưu tập tài sản và danh sách bộ sưu tập.

00:04:33.000 --> 00:04:36.000
Vậy cái này trông như thế nào trong mã?

00:04:36.000 --> 00:04:42.000
Trước tiên, bạn sử dụng mã thông báo thay đổi được lưu trữ cuối cùng để tìm nạp các thay đổi liên tục.

00:04:42.000 --> 00:04:53.000
Tiếp theo, bạn liệt kê thông qua các thay đổi liên tục và lấy chi tiết thay đổi - trong trường hợp này, loại "tài sản" - cho mỗi đối tượng thay đổi liên tục.

00:04:53.000 --> 00:05:04.000
Những chi tiết thay đổi này cung cấp thông tin về số nhận dạng cục bộ nào đã được cập nhật, xóa và chèn vào thư viện ảnh kể từ mã thông báo thay đổi.

00:05:04.000 --> 00:05:10.000
Sau khi xử lý những thay đổi này, bạn có thể lưu trữ mã thông báo thay đổi cuối cùng để sử dụng trong tương lai.

00:05:10.000 --> 00:05:18.000
Hãy so sánh và đối chiếu API lịch sử liên tục mới với các API quan sát thay đổi hiện có.

00:05:18.000 --> 00:05:28.000
PHChanges xử lý các kết quả tìm nạp đang hoạt động, trong bộ nhớ và được sử dụng để ghi lại các thay đổi trực tiếp vào thư viện ảnh trong khi ứng dụng của bạn đang chạy.

00:05:28.000 --> 00:05:38.000
Mặt khác, lịch sử liên tục ghi lại các thay đổi lâu dài đối với thư viện ảnh và có thể được sử dụng để báo cáo các thay đổi từ khi ứng dụng của bạn không hoạt động.

00:05:38.000 --> 00:05:45.000
Bạn có thể sử dụng cả hai hoặc một trong hai API này tùy thuộc vào yêu cầu của ứng dụng của bạn.

00:05:45.000 --> 00:05:55.000
Quay trở lại ví dụ ứng dụng đi bộ đường dài, bây giờ tôi muốn sử dụng API lịch sử liên tục để theo dõi các thay đổi nội dung nhằm tạo và cập nhật ảnh ghép đi bộ đường dài.

00:05:55.000 --> 00:06:02.000
Đầu tiên, tôi sẽ sử dụng mã thông báo thay đổi được lưu trữ cuối cùng và tìm nạp các thay đổi liên tục.

00:06:02.000 --> 00:06:13.000
Tiếp theo, tôi sẽ lặp lại các thay đổi liên tục, lấy chi tiết thay đổi tài sản có liên quan và xử lý các số nhận dạng được chèn, cập nhật và xóa.

00:06:13.000 --> 00:06:25.000
Bây giờ tôi cần xác định các thay đổi thư viện ảnh hưởng đến ứng dụng từ lịch sử thay đổi, vì ứng dụng không cần tất cả thông tin được trả về từ việc tìm nạp các thay đổi.

00:06:25.000 --> 00:06:38.000
Điều quan trọng là ứng dụng phải biết nội dung nào đã được thêm vào thư viện ảnh cho các bài tập đi bộ đường dài mới và các nội dung được cập nhật và xóa được tham chiếu trong các ảnh ghép đi bộ đường dài trước đó.

00:06:38.000 --> 00:06:47.000
Tôi đã xác định được ba bộ số nhận dạng cục bộ tài sản được chèn, cập nhật và xóa từ việc liệt kê thông qua các thay đổi liên tục.

00:06:47.000 --> 00:06:51.000
Làm cách nào để cập nhật ứng dụng để phản ánh điều này?

00:06:51.000 --> 00:07:08.000
Sử dụng bộ Mã định danh được chèn, tôi có thể xác định tài sản nào đã được thêm vào giữa các dấu thời gian đi bộ đường dài bằng cách tìm nạp các tài sản được chèn và kiểm tra ngày tạo của chúng so với mỗi ngày bắt đầu và ngày kết thúc đi bộ đường dài.

00:07:08.000 --> 00:07:20.000
Các tài sản được cập nhật hiện có thể đã được áp dụng các điều chỉnh, vì vậy tôi có thể sử dụng API hasAdjustments mới để kiểm tra xem tôi có cần vẽ lại tài sản trong giao diện người dùng hay không.

00:07:20.000 --> 00:07:27.000
Tôi có thể sử dụng số nhận dạng cục bộ tài sản đã xóa để xác định ảnh ghép nào cần được tạo lại.

00:07:27.000 --> 00:07:36.000
Bây giờ tôi đã xử lý tất cả các thay đổi thư viện ảnh ngoại tuyến và ứng dụng của tôi đã được cập nhật.

00:07:36.000 --> 00:07:42.000
Đây là một vài điều bạn nên ghi nhớ khi sử dụng API lịch sử thay đổi mới.

00:07:42.000 --> 00:07:49.000
Đầu tiên, xác định những thay đổi nào quan trọng đối với bạn và ứng dụng của bạn, và chỉ kiểm tra những thay đổi đó.

00:07:49.000 --> 00:07:59.000
Cân nhắc thực hiện một yêu cầu tìm nạp lớn các tài sản được cập nhật và chèn vào thay vì nhiều yêu cầu nhỏ hơn để cải thiện hiệu suất.

00:07:59.000 --> 00:08:12.000
Thư viện ảnh có thể thay đổi rất nhiều do hoạt động xử lý và đồng bộ hóa dưới mui xe, vì vậy bạn có thể kết thúc việc liệt kê thông qua một số lượng lớn các thay đổi, đặc biệt nếu ứng dụng của bạn không được khởi chạy thường xuyên.

00:08:12.000 --> 00:08:20.000
Bởi vì điều này, chúng tôi khuyên bạn nên yêu cầu thay đổi lịch sử trên một chuỗi nền để không chặn giao diện người dùng.

00:08:20.000 --> 00:08:25.000
Có hai loại lỗi có thể xảy ra khi tìm nạp lịch sử liên tục.

00:08:25.000 --> 00:08:33.000
Nếu mã thông báo thay đổi cũ hơn lịch sử thay đổi có sẵn, lỗi mã thông báo thay đổi đã hết hạn sẽ được trả về.

00:08:33.000 --> 00:08:44.000
Trong một số trường hợp, không thể dựa vào thay đổi liên tục để tái tạo lại hoàn toàn các thay đổi đã xảy ra và sẽ trả về lỗi không có chi tiết thay đổi.

00:08:44.000 --> 00:08:54.000
Trong những trường hợp này, chúng tôi khuyên bạn nên tìm nạp lại các đối tượng được theo dõi trong thư viện ảnh để đảm bảo ứng dụng của bạn được cập nhật.

00:08:54.000 --> 00:09:01.000
Trước khi chúng ta kết thúc, có thêm một vài API PhotoKit mới mà tôi muốn chia sẻ với bạn.

00:09:01.000 --> 00:09:08.000
PhotoKit hiện hỗ trợ truy cập các video điện ảnh theo loại phụ phương tiện và album thông minh.

00:09:08.000 --> 00:09:11.000
Cũng có hai mã lỗi mới.

00:09:11.000 --> 00:09:23.000
Nếu gói thư viện ảnh nằm trong thư mục gốc đồng bộ của Nhà cung cấp tệp trên macOS, thư viện có thể bị hỏng và lỗi sẽ được trả về khi cố gắng thực hiện các thay đổi.

00:09:23.000 --> 00:09:31.000
Nếu không thể tìm thấy tài nguyên tài sản do sự cố mạng, yêu cầu tài nguyên bây giờ sẽ trả về lỗi mạng.

00:09:31.000 --> 00:09:35.000
Vui lòng kiểm tra tài liệu dành cho nhà phát triển để biết tất cả các bản cập nhật mới nhất.

00:09:35.000 --> 00:09:44.000
Cuối cùng, hãy chắc chắn kiểm tra phiên năm nay trên trình chọn Ảnh, vì đây là cách dễ nhất để làm việc và truy cập Ảnh.

00:09:44.000 --> 00:09:51.000
Chúng tôi rất vui khi bạn sử dụng API lịch sử thay đổi mới và tất cả các tính năng mới tuyệt vời trong PhotoKit.

00:09:51.000 --> 00:09:52.000
Cảm ơn bạn!

00:09:52.000 --> 23:59:59.000
♪

