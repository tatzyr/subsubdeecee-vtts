WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:13.000
Jeff Nadeau: Xin chào, và chào mừng đến với Có gì mới trong AppKit.

00:00:13.000 --> 00:00:21.000
Tôi là Jeff Nadeau, một kỹ sư trong nhóm AppKit, và tôi ở đây để chia sẻ những điều mới nhất và tuyệt vời nhất trong việc xây dựng các ứng dụng cho macOS Ventura.

00:00:21.000 --> 00:00:33.000
Chưa bao giờ là khoảng thời gian thú vị hơn đối với Mac, giữa hiệu suất và hiệu quả của Apple Silicon, sức mạnh của macOS và hệ sinh thái ứng dụng phong phú hơn bao giờ hết.

00:00:33.000 --> 00:00:42.000
Các ứng dụng của bạn là một phần quan trọng của câu chuyện đó và chúng tôi đang tiếp tục thúc đẩy AppKit tiến lên để bạn có thể tiếp tục xây dựng các ứng dụng tốt nhất.

00:00:42.000 --> 00:00:57.000
Tôi sẽ đề cập đến nhiều chủ đề khác nhau, bắt đầu với Trình quản lý sân khấu, chuyển sang Tùy chọn, tiếp theo là các điều khiển, Biểu tượng SF và chia sẻ.

00:00:57.000 --> 00:01:00.000
Tôi sẽ bắt đầu với Stage Manager.

00:01:00.000 --> 00:01:07.000
Trình quản lý sân khấu dọn dẹp các cửa sổ không hoạt động trong không gian làm việc của bạn trong khi cửa sổ đang hoạt động của bạn chiếm vị trí trung tâm.

00:01:07.000 --> 00:01:15.000
Để có quy trình làm việc nâng cao hơn, bạn cũng có thể kéo các cửa sổ lại với nhau thành các bộ hoán đổi vào và ra như một nhóm.

00:01:15.000 --> 00:01:19.000
Điều này có tác động đến cách các cửa sổ ứng dụng của bạn thể hiện bản thân.

00:01:19.000 --> 00:01:29.000
Người quản lý sân khấu đang cố gắng giữ cho không gian làm việc gọn gàng, vì vậy khi một cửa sổ mới được trình bày, các cửa sổ hiện có sẽ thoát khỏi sân khấu để nhường chỗ.

00:01:29.000 --> 00:01:33.000
Đó là những gì bạn muốn cho các cửa sổ "chính", như tài liệu của bạn.

00:01:33.000 --> 00:01:43.000
Các cửa sổ phụ trợ như bảng điều khiển, cửa sổ bật lên, cài đặt và các cửa sổ khác sẽ tiếp tục xuất hiện phía trên các cửa sổ hiện có.

00:01:43.000 --> 00:01:51.000
NSWindow đã có rất nhiều API có thể giúp bạn xác định hành vi bạn muốn cho một cửa sổ cụ thể.

00:01:51.000 --> 00:02:03.000
Theo mặc định, Trình quản lý sân khấu sẽ không hoán đổi các cửa sổ khác nếu bạn trình bày bảng điều khiển nổi, cửa sổ phương thức hoặc cửa sổ có thanh công cụ kiểu tùy chọn.

00:02:03.000 --> 00:02:07.000
Trình quản lý sân khấu cũng tôn trọng bộ sưu tập Hành vi của cửa sổ của bạn.

00:02:07.000 --> 00:02:19.000
OptionSet này xác định cách cửa sổ của bạn hoạt động trong không gian và toàn màn hình, và giờ đây nó cũng giúp Trình quản lý giai đoạn hiểu rằng một cửa sổ được coi là phụ trợ hoặc nổi.

00:02:19.000 --> 00:02:31.000
Nếu collectionBehavior của cửa sổ bao gồm các tùy chọn phụ trợ, moveToActiveSpace, cố định hoặc thoáng qua, thì nó sẽ không thay thế cửa sổ đang hoạt động ở giai đoạn trung tâm.

00:02:31.000 --> 00:02:42.000
Bằng cách thiết lập các cửa sổ của bạn với các hành vi thu thập phù hợp, bạn có thể đảm bảo rằng chúng hoạt động tốt trong mọi ngữ cảnh, cho dù đó là không gian máy tính để bàn, toàn màn hình hay bây giờ trong Trình quản lý giai đoạn.

00:02:42.000 --> 00:02:46.000
Tiếp theo, tôi muốn đề cập đến một số thay đổi quan trọng đối với Tùy chọn.

00:02:46.000 --> 00:02:57.000
Trong macOS Ventura, ứng dụng System Preferences đã có một giao diện hoàn toàn mới, với sơ đồ điều hướng được làm mới và thiết kế trực quan hoàn toàn mới.

00:02:57.000 --> 00:03:05.000
Để phù hợp với trải nghiệm cài đặt trên các hệ điều hành khác của chúng tôi, chúng tôi cũng đã đổi tên ứng dụng thành Cài đặt hệ thống.

00:03:05.000 --> 00:03:08.000
Những thay đổi này cũng mở rộng cho ứng dụng của bạn.

00:03:08.000 --> 00:03:14.000
Ví dụ, bạn có thể có một gói ngăn tùy chọn xuất hiện trong ứng dụng Tùy chọn Hệ thống ngày hôm nay.

00:03:14.000 --> 00:03:18.000
Bạn cũng có thể có một khu vực cài đặt bên trong ứng dụng của mình.

00:03:18.000 --> 00:03:26.000
Ngoài ra còn có một hệ thống thiết kế mới cho các biểu mẫu giàu kiểm soát có thể phù hợp hoàn hảo cho các giao diện cài đặt hoặc trình kiểm tra.

00:03:26.000 --> 00:03:32.000
Nếu bạn gửi một gói prefpane tùy chỉnh, nó sẽ tiếp tục hoạt động với ứng dụng Cài đặt mới.

00:03:32.000 --> 00:03:41.000
Khung tùy chỉnh của bạn sẽ xuất hiện trong thanh bên và ứng dụng sẽ tải gói của bạn và trình bày giao diện người dùng cài đặt của bạn giống như trong Monterey trở về trước.

00:03:41.000 --> 00:03:48.000
Để phù hợp với ứng dụng Cài đặt Hệ thống mới được đổi tên, chúng tôi cũng đã đổi tên tùy chọn trong ứng dụng thành "cài đặt".

00:03:48.000 --> 00:03:57.000
Để giúp bạn bắt đầu, một khi bạn xây dựng dựa trên SDK mới nhất, AppKit sẽ tự động cập nhật tên của mục menu "Tùy chọn", trong menu ứng dụng của bạn.

00:03:57.000 --> 00:04:07.000
Tuy nhiên, bạn có thể đang sử dụng từ "Tùy chọn" ở một số nơi khác, như tiêu đề cửa sổ, nhãn mô tả hoặc các điều khiển khác xung quanh ứng dụng của bạn.

00:04:07.000 --> 00:04:12.000
Tìm kiếm thông qua văn bản bản địa hóa của bạn để tìm những địa điểm cũng cần cập nhật.

00:04:12.000 --> 00:04:23.000
Ví dụ, cửa sổ cài đặt của TextEdit từng được gọi là "tùy chọn" và chúng tôi đã chọn đổi tên cửa sổ đó thành Cài đặt để phù hợp với phần còn lại của hệ thống.

00:04:23.000 --> 00:04:29.000
Ứng dụng Cài đặt Hệ thống cũng sử dụng kiểu giao diện mới để trình bày tất cả các tùy chọn cấu hình của nó.

00:04:29.000 --> 00:04:40.000
Giao diện cài đặt thường nặng về điều khiển, vì vậy phong cách này được thiết kế để trình bày các biểu mẫu chứa nhiều điều khiển một cách rõ ràng và được tổ chức tốt.

00:04:40.000 --> 00:04:54.000
Vì bản thân biểu mẫu cung cấp rất nhiều cấu trúc trực quan, nhiều điều khiển hệ thống thích ứng với bối cảnh này bằng cách vẽ với trọng lượng hình ảnh thấp hơn, đồng thời tiết lộ các mặt sau điều khiển nổi bật hơn khi chuyển đổi.

00:04:54.000 --> 00:05:00.000
Nếu bạn muốn viết các giao diện sử dụng thiết kế mới này, SwiftUI làm cho nó cực kỳ dễ dàng.

00:05:00.000 --> 00:05:06.000
Đặt các điều khiển của bạn vào chế độ xem Biểu mẫu, và sau đó áp dụng kiểu biểu mẫu "insetGrouped".

00:05:06.000 --> 00:05:16.000
SwiftUI lo phần còn lại: phong cách trực quan, hành vi cuộn và bố cục của biểu mẫu đều được áp dụng tự động.

00:05:16.000 --> 00:05:22.000
Nếu bạn chưa bắt đầu với SwiftUI, đây là một cơ hội tuyệt vời để thử.

00:05:22.000 --> 00:05:30.000
Cửa sổ Cài đặt thường là một khu vực độc lập trong giao diện ứng dụng của bạn, vì vậy đây là nơi hoàn hảo để thực hiện một số áp dụng gia tăng.

00:05:30.000 --> 00:05:37.000
Chúng tôi thậm chí đã tạo một video về việc sử dụng SwiftUI và AppKit cùng nhau, đây là một nơi tuyệt vời để tìm hiểu thêm.

00:05:37.000 --> 00:05:42.000
Tiếp theo, tôi muốn chia sẻ một số cập nhật cho các điều khiển của chúng tôi.

00:05:42.000 --> 00:05:49.000
Chúng tôi có rất nhiều cải tiến kiểm soát thú vị để chia sẻ, bắt đầu với một điều khiển mới có tên NSComboButton.

00:05:49.000 --> 00:06:02.000
Chúng tôi cũng đã cập nhật NSColorWell, thực hiện một số cải tiến cho NSToolbar API, điều chỉnh thiết kế của NSAlert và cải thiện hiệu suất của NSTableView.

00:06:02.000 --> 00:06:05.000
Đầu tiên, NSComboButton.

00:06:05.000 --> 00:06:13.000
NSComboButton là tất cả về việc kết hợp một hành động nút ngay lập tức và một menu cho các tùy chọn bổ sung.

00:06:13.000 --> 00:06:23.000
Trong bối cảnh điều khiển ngày nay, theo truyền thống, bạn sẽ sử dụng một nút để thực hiện một số hành động ngay lập tức hoặc bạn sẽ sử dụng nút kéo xuống để hiển thị menu với nhiều tùy chọn.

00:06:23.000 --> 00:06:33.000
NSComboButton kết hợp cả hai yếu tố thành một điều khiển duy nhất, kết hợp một hành động chính và một menu kéo xuống với nhau.

00:06:33.000 --> 00:06:44.000
Thiết kế này thường được sử dụng cho các trường hợp sử dụng như trường hợp này trong Mail, trong đó thư mục dự đoán chỉ cách một cú nhấp chuột, nhưng bạn vẫn có thể truy cập menu để gửi tin nhắn của mình ở bất cứ đâu.

00:06:44.000 --> 00:06:53.000
Trước đây, bạn có thể đã lắp ráp một cái gì đó như thế này bằng cách sử dụng API điều khiển được phân đoạn, nhưng bây giờ có một điều khiển chuyên dụng cho nó.

00:06:53.000 --> 00:07:00.000
NSComboButton có hai phong cách, quyết định cả ngoại hình và hành vi của nút.

00:07:00.000 --> 00:07:08.000
Kiểu mặc định được gọi là "split" và nó bao gồm một phần mũi tên riêng biệt chỉ dành cho menu.

00:07:08.000 --> 00:07:13.000
Phong cách thứ hai, "thống nhất", trông giống như một cái nút thông thường hơn nhiều.

00:07:13.000 --> 00:07:20.000
Phong cách này thực hiện hành động chính của nó khi nhấp chuột và nó sẽ hiển thị menu của nó nếu bạn nhấp và giữ.

00:07:20.000 --> 00:07:21.000
Và đó là NSComboButton.

00:07:21.000 --> 00:07:27.000
Chúng tôi cũng có một số bản cập nhật mới tuyệt vời cho NSColorWell, bắt đầu với giao diện hoàn toàn mới.

00:07:27.000 --> 00:07:37.000
Thay cho vẻ ngoài gradient vuông cổ điển, màu sắc đã áp dụng một phong cách mới gợi nhớ đến các viền nút khác trên toàn hệ thống.

00:07:37.000 --> 00:07:44.000
Sự thay đổi này hoàn toàn tự động, vì vậy bạn không cần phải thực hiện bất kỳ việc áp dụng nào để có được vẻ ngoài hiện đại này.

00:07:44.000 --> 00:07:55.000
Tuy nhiên, chúng tôi biết rằng chọn màu là một phần quan trọng của các ứng dụng sáng tạo và chuyên nghiệp, vì vậy chúng tôi đã tiến thêm một bước và giới thiệu hai phong cách mới cho NSColorWell.

00:07:55.000 --> 00:08:11.000
Đầu tiên là một phong cách tối thiểu, hiển thị mũi tên tiết lộ khi cuộn qua và cung cấp trải nghiệm chọn màu nhanh chóng bằng cách hiển thị cửa sổ bật lên để chọn ngay lập tức từ bảng màu, với tùy chọn đột phá vào Bảng điều khiển NSColor đầy đủ.

00:08:11.000 --> 00:08:22.000
Theo mặc định, nó sử dụng lưới màu tiêu chuẩn hệ thống, nhưng bạn có thể tùy chỉnh những gì xuất hiện ở đây nếu bạn có một giao diện người dùng hoặc bảng màu khác trong tâm trí.

00:08:22.000 --> 00:08:27.000
Thứ hai là một phong cách mở rộng, mà bạn có thể nhận ra từ các ứng dụng iWork.

00:08:27.000 --> 00:08:43.000
Phong cách này kết hợp cả hai mô hình tương tác: giếng bên trái có cùng mũi tên hiển thị và cửa sổ bật lên để chọn nhanh, trong khi nút bên phải kéo bảng điều khiển đầy đủ lên để chọn màu chi tiết hơn.

00:08:43.000 --> 00:08:49.000
Và cùng với đó, NSColorWell hiện cung cấp ba cách khác nhau để chọn màu.

00:08:49.000 --> 00:09:02.000
Bạn có thể truy cập các kiểu này bằng cách sử dụng thuộc tính colorWellStyle mới trên NSColorWell, có các trường hợp cho từng kiểu: mặc định, mở rộng và tối thiểu.

00:09:02.000 --> 00:09:08.000
NSColorWell cũng đã đạt được một cặp mục tiêu và hành động mới cho "hành động kéo xuống" của nó.

00:09:08.000 --> 00:09:15.000
Hành động này xác định điều gì sẽ xảy ra khi bạn nhấp vào phần kéo xuống của giếng màu tối thiểu hoặc mở rộng.

00:09:15.000 --> 00:09:22.000
Theo mặc định, các thuộc tính này là nil, biểu thị rằng NSColorWell nên sử dụng cửa sổ bật lên tiêu chuẩn hệ thống.

00:09:22.000 --> 00:09:32.000
Tuy nhiên, bạn có thể tùy chỉnh hành động này và sử dụng nó để trình bày cửa sổ bật lên tùy chỉnh của riêng mình, Hoặc thậm chí bạn có thể trình bày một giao diện chọn khác, như menu.

00:09:32.000 --> 00:09:35.000
Và đó là NSColorWell mới.

00:09:35.000 --> 00:09:40.000
Nó có một diện mạo hoàn toàn mới và hai cách mới để nhanh chóng chọn màu sắc.

00:09:40.000 --> 00:09:51.000
Tiếp theo, một số tin tức về NSToolbar, nơi chúng tôi đã thực hiện nhiều cải tiến API để giúp bạn kiểm soát tốt hơn việc tùy chỉnh và tăng tính linh hoạt cho bố cục của mình.

00:09:51.000 --> 00:09:59.000
Trên mặt trận tùy chỉnh, chúng tôi đã thêm hai phương thức ủy quyền mới để giúp bạn kiểm soát tốt hơn khả năng tùy chỉnh thanh công cụ của mình.

00:09:59.000 --> 00:10:03.000
Đầu tiên là "toolbarImmovableItemIdentifiers".

00:10:03.000 --> 00:10:16.000
Nếu bạn triển khai phương pháp này để trả về một tập hợp các số nhận dạng mặt hàng, những mục đó sẽ không thể di chuyển hoặc tháo rời bởi người dùng và chúng sẽ không hoạt ảnh khi bạn vào chế độ tùy chỉnh.

00:10:16.000 --> 00:10:23.000
Ví dụ, ứng dụng Thư muốn nút Bộ lọc luôn xuất hiện ở đây, phía trên danh sách tin nhắn.

00:10:23.000 --> 00:10:29.000
Sử dụng API này, họ có thể ngăn nó bị di chuyển ra khỏi vị trí này.

00:10:29.000 --> 00:10:35.000
Phương pháp thứ hai được gọi là "toolbar itemIdentifier canBeInsertedAt."

00:10:35.000 --> 00:10:43.000
Phương thức đại diện này cung cấp cho bạn quyền phủ quyết đối với bất kỳ việc sắp xếp lại, chèn hoặc xóa cụ thể nào khỏi thanh công cụ.

00:10:43.000 --> 00:10:56.000
Bạn có thể sử dụng nó để thực hiện bộ quy tắc tùy chỉnh của riêng mình - ví dụ: bạn có thể tạo một mục thanh công cụ được phép trong một phần của thanh công cụ, nhưng nó không được phép trong một phần khác.

00:10:56.000 --> 00:11:03.000
Bây giờ bạn có thể chỉ định nhiều mục được căn giữa cho thanh công cụ của mình bằng cách sử dụng thuộc tính centeredItemIdentifiers mới.

00:11:03.000 --> 00:11:12.000
Nếu thanh công cụ của bạn có thể tùy chỉnh, các mục trong bộ này vẫn có thể được thêm hoặc xóa khỏi thanh công cụ, nhưng chúng chỉ có thể được sắp xếp lại trong nhóm trung tâm.

00:11:12.000 --> 00:11:23.000
Trong ví dụ này, tất cả các công cụ chỉnh sửa ảnh dính vào nhau ở giữa thanh công cụ bất kể có bao nhiêu mục được đặt trong phần đầu và cuối.

00:11:23.000 --> 00:11:39.000
Khi thanh công cụ của bạn được tùy chỉnh theo cách bạn thích, bạn không muốn các mục thay đổi xung quanh và điều đó có thể khó khăn đối với các mục thanh công cụ thay đổi ý nghĩa dựa trên một số trạng thái khác, như nút Tắt tiếng và Bật tiếng trong Thư, nút này sẽ chuyển đổi khi bạn nhấp vào nó.

00:11:39.000 --> 00:11:48.000
Vì các nhãn có kích thước khác nhau, các mục khác trên thanh công cụ phải thay đổi để phù hợp với sự thay đổi.

00:11:48.000 --> 00:11:59.000
Trong một tình huống như thế này, bạn có thể sử dụng thuộc tính possibleLabels mới trên NSToolbarItem để cung cấp một tập hợp các chuỗi được bản địa hóa mà bạn sẽ sử dụng cho mục đó.

00:11:59.000 --> 00:12:08.000
NSToolbar sẽ tự động định cỡ mục để phù hợp với nhãn dài nhất, vì vậy bố cục của bạn vẫn giữ nguyên ngay cả khi mục được cấu hình lại.

00:12:08.000 --> 00:12:12.000
Tiếp theo, cập nhật thiết kế cho các cảnh báo.

00:12:12.000 --> 00:12:20.000
Cảnh báo trên macOS sử dụng bố cục nhỏ gọn, được tối ưu hóa cho một lượng nhỏ văn bản kèm theo một vài lựa chọn rõ ràng.

00:12:20.000 --> 00:12:24.000
Và nói chung, đó là một cách tuyệt vời để tập hợp một cảnh báo.

00:12:24.000 --> 00:12:35.000
Cảnh báo hoạt động tốt nhất với văn bản ngắn hơn: bạn có thể truyền đạt thông điệp của mình trực tiếp hơn và mọi người có nhiều khả năng đọc những gì bạn đã viết trước khi vượt qua cảnh báo.

00:12:35.000 --> 00:12:50.000
Tuy nhiên, đôi khi bạn thực sự không thể rút ngắn mô tả của mình, đặc biệt nếu bạn cần truyền đạt điều gì đó phức tạp và tinh tế, như cảnh báo Tiện ích Đĩa này, điều này truyền tải một lựa chọn thực sự quan trọng về dữ liệu hệ thống tệp của bạn.

00:12:50.000 --> 00:12:54.000
Bố cục nhỏ gọn không phải là tối ưu cho tình huống này.

00:12:54.000 --> 00:13:01.000
Đối với những trường hợp này, chúng tôi đã điều chỉnh NSAlert để cung cấp bố cục rộng hơn phù hợp với văn bản dài hơn.

00:13:01.000 --> 00:13:09.000
Sự thích nghi này xảy ra tự động cho các cảnh báo trong đó văn bản thông tin quá dài để vừa vặn thoải mái với kích thước nhỏ gọn.

00:13:09.000 --> 00:13:16.000
Chúng tôi cũng sẽ sử dụng kiểu này nếu bạn có chế độ xem phụ kiện quá lớn để vừa với cửa sổ cảnh báo nhỏ gọn.

00:13:16.000 --> 00:13:22.000
Ứng dụng của bạn không cần chọn tham gia hành vi này - nó được áp dụng tự động trên toàn hệ thống.

00:13:22.000 --> 00:13:33.000
Điều quan trọng cần lưu ý là bố cục được xác định tại thời điểm bạn trình bày cảnh báo, vì vậy cảnh báo sẽ không hoán đổi kiểu nếu bạn sửa đổi nó khi nó đã ở trên màn hình.

00:13:33.000 --> 00:13:43.000
Bạn vẫn nên đặt mục tiêu giảm độ dài văn bản cảnh báo của mình bất cứ khi nào có thể, nhưng bản cập nhật thiết kế này sẽ cải thiện trải nghiệm người dùng cho những trường hợp bạn không thể.

00:13:43.000 --> 00:13:47.000
Tiếp theo, một tính năng mới quan trọng của NSTableView.

00:13:47.000 --> 00:13:56.000
NSTableView được thiết kế để xử lý hiệu quả một số lượng rất lớn các hàng, bằng cách lười biếng điền và sử dụng lại các chế độ xem khi bạn cuộn.

00:13:56.000 --> 00:14:11.000
Tuy nhiên, đối với các bảng mà mỗi hàng có thể có chiều cao khác nhau, đó có thể là một thách thức, bởi vì để cung cấp trải nghiệm cuộn tốt, bảng cần biết tổng chiều cao của nó và vị trí của mỗi hàng trong vùng cuộn.

00:14:11.000 --> 00:14:19.000
Trong lịch sử, NSTableView thực hiện điều này bằng cách định cỡ tất cả các hàng trong bảng, điều này có thể ảnh hưởng đến thời gian tải ban đầu.

00:14:19.000 --> 00:14:27.000
Trong macOS Ventura, NSTableView đạt được những mục tiêu đó trong khi cung cấp hiệu suất tốt hơn nhiều.

00:14:27.000 --> 00:14:39.000
Thay vì háo hức tính toán chiều cao cho mỗi hàng, NSTableView hiện lười biếng tính toán chiều cao hàng dựa trên hàng nào nằm trong hoặc gần khung nhìn cuộn.

00:14:39.000 --> 00:14:48.000
Đối với các hàng chưa được đo, NSTableView sử dụng chiều cao ước tính đang chạy dựa trên chiều cao hàng mà nó đã được đo.

00:14:48.000 --> 00:15:02.000
Khi bạn cuộn qua bảng, NSTableView yêu cầu chiều cao hàng khi cần thiết, thay thế chiều cao ước tính bằng các phép đo thực, đồng thời đảm bảo duy trì vị trí cuộn chính xác.

00:15:02.000 --> 00:15:07.000
Tối ưu hóa này cải thiện đáng kể thời gian tải cho các bảng rất lớn.

00:15:07.000 --> 00:15:18.000
Sự thay đổi làm thay đổi thời gian của các cuộc gọi đại diện như "chế độ xem bảng: chiều cao của hàng", vì vậy bạn không nên đưa ra giả định về thời điểm NSTableView sẽ yêu cầu chiều cao hàng từ bạn.

00:15:18.000 --> 00:15:28.000
Tối ưu hóa này áp dụng cho cả chế độ xem Danh sách của NSTableView và SwiftUI và nó được sử dụng tự động cho tất cả các ứng dụng trên macOS Ventura mà không cần áp dụng.

00:15:28.000 --> 00:15:32.000
Và đó là hiệu suất NSTableView.

00:15:32.000 --> 00:15:35.000
Tiếp theo, một số cập nhật về Biểu tượng SF.

00:15:35.000 --> 00:15:45.000
macOS Ventura bao gồm SF Symbols 4, bổ sung hơn 450 hình ảnh biểu tượng mới bao gồm tất cả các loại đối tượng.

00:15:45.000 --> 00:15:58.000
Những biểu tượng mới này bao gồm vòng nguyệt quế, tất cả các loại đồ vật gia đình, biểu tượng tiền tệ từ khắp nơi trên thế giới và thậm chí nhiều biểu tượng liên quan đến thể thao.

00:15:58.000 --> 00:16:07.000
Với một danh mục gồm hàng nghìn biểu tượng, có khả năng SF Symbols bao gồm một biểu tượng được thiết kế chuyên nghiệp cho bất kỳ ý tưởng nào mà bạn muốn thể hiện.

00:16:07.000 --> 00:16:08.000
Nhưng chúng tôi vẫn chưa dừng lại ở đó.

00:16:08.000 --> 00:16:14.000
SF Symbols 4 cũng bao gồm một số tính năng mới để nâng cao hơn nữa biểu tượng của bạn.

00:16:14.000 --> 00:16:21.000
Tóm lại, hình ảnh biểu tượng hỗ trợ một số chế độ kết xuất mà bạn có thể chọn tùy thuộc vào thiết kế của mình.

00:16:21.000 --> 00:16:41.000
Có đơn sắc, sử dụng một màu duy nhất; phân cấp, sử dụng các độ mờ khác nhau của một màu để nhấn mạnh các phần nhất định của biểu tượng; bảng màu, cho phép bạn chỉ định các màu riêng biệt cho từng phần của biểu tượng; và nhiều màu, sử dụng các màu được thiết kế trực tiếp vào tác phẩm nghệ thuật biểu tượng.

00:16:41.000 --> 00:16:53.000
Những lựa chọn này cung cấp cho bạn sự linh hoạt để nhận ra nhiều kiểu dáng khác nhau, nhưng chúng tôi cũng muốn hình ảnh biểu tượng trông đẹp nhất ngay khi ra khỏi hộp mà không cần phải áp dụng bất kỳ cấu hình nào.

00:16:53.000 --> 00:16:59.000
Đó là lý do tại sao chúng tôi đã giới thiệu một tính năng mới cho các biểu tượng trong macOS Ventura: chế độ kết xuất ưa thích.

00:16:59.000 --> 00:17:09.000
Với chế độ kết xuất ưa thích, các biểu tượng có thể chỉ định kiểu kết xuất mà chúng thích và trong thời gian chạy AppKit sẽ tự động sử dụng kiểu đó.

00:17:09.000 --> 00:17:18.000
Điều này rất tốt cho các biểu tượng như AirPods Pro, thích phong cách phân cấp để tăng độ rõ nét của những chi tiết đẹp đó.

00:17:18.000 --> 00:17:28.000
Tất nhiên, nếu bạn có một thiết kế khác trong đầu, bạn luôn có thể sử dụng đối tượng NSImageSymbolConfiguration để chọn phong cách ưa thích của mình.

00:17:28.000 --> 00:17:38.000
Một số biểu tượng không chỉ đại diện cho một khái niệm, chúng còn có nghĩa là truyền đạt một số giá trị hoặc số lượng, như cường độ tín hiệu Wi-Fi hoặc âm lượng âm thanh của bạn.

00:17:38.000 --> 00:17:44.000
Đối với những trường hợp như thế này, chúng tôi đã giới thiệu một loại biểu tượng mới mà chúng tôi gọi là "biểu tượng biến đổi".

00:17:44.000 --> 00:17:56.000
Với một biểu tượng biến đổi, bạn cung cấp một giá trị dấu phẩy động trực tiếp cho NSImage và biểu tượng nhúng các ngưỡng số để quyết định cách mỗi đường dẫn sẽ thay đổi dựa trên giá trị đó.

00:17:56.000 --> 00:17:58.000
Đây là API.

00:17:58.000 --> 00:18:02.000
Các ký hiệu biến được tạo bằng cách sử dụng trình khởi tạo mới.

00:18:02.000 --> 00:18:11.000
Nó tương tự như trình khởi tạo hình ảnh biểu tượng hiện có, với việc bổ sung một tham số giá trị, là một số dấu phẩy động giữa 0 và 1.

00:18:11.000 --> 00:18:19.000
Nếu hình ảnh biểu tượng không xác định bất kỳ ngưỡng biến nào, giá trị này sẽ bị bỏ qua và biểu tượng sẽ vẽ như bình thường.

00:18:19.000 --> 00:18:26.000
Nếu có, bạn sẽ thấy các đường dẫn biểu tượng được vẽ khác nhau dựa trên giá trị bạn đã cung cấp.

00:18:26.000 --> 00:18:41.000
Mỗi biểu tượng biến có thể đại diện cho một giá trị theo cách độc đáo của riêng nó và bằng cách cung cấp giá trị đó ở cấp API, bạn có quyền truy cập vào tất cả các biến thể đó mà không cần phải biết chi tiết tốt về cách tạo biểu tượng.

00:18:41.000 --> 00:18:50.000
Các biểu tượng biến đổi hoạt động tuyệt vời khi kết hợp với các kiểu kết xuất như màu bảng màu và nhiều màu, vì vậy bạn có thể điều chỉnh chúng cho phù hợp với hầu hết mọi thiết kế.

00:18:50.000 --> 00:19:05.000
Cuối cùng, tôi muốn đề cập đến một số bản cập nhật lớn để Chia sẻ macOS Ventura nâng cao trải nghiệm chia sẻ trên Mac, giới thiệu các tính năng như những người được đề xuất và những cách mới để mời và quản lý những người mà bạn đang cộng tác.

00:19:05.000 --> 00:19:13.000
Có một số API mới mà bạn có thể áp dụng để ứng dụng của bạn tận dụng tối đa những cải tiến này.

00:19:13.000 --> 00:19:18.000
Bản cập nhật nổi bật nhất cho trải nghiệm chia sẻ là cửa sổ bật lên chia sẻ mới.

00:19:18.000 --> 00:19:28.000
Điều này thay thế menu chia sẻ hiện có bằng giao diện phong phú bao gồm nhiều thông tin hơn về tài liệu bạn đang chia sẻ và các tính năng quen thuộc như những người được đề xuất.

00:19:28.000 --> 00:19:42.000
Nó hỗ trợ tất cả các API và phương thức đại diện giống như trình chọn trước đó, vì vậy bạn vẫn có thể làm những việc như lọc danh sách các dịch vụ chia sẻ hoặc chèn các dịch vụ tùy chỉnh của riêng bạn vào bộ chọn.

00:19:42.000 --> 00:19:52.000
Nếu bạn đang chia sẻ URL tệp, NSSharingServicePicker có thể tự động điền tiêu đề với biểu tượng, tên và siêu dữ liệu khác về tệp.

00:19:52.000 --> 00:20:03.000
Nhưng nếu bạn đang chia sẻ một loại tùy chỉnh thay vào đó, bạn có thể điều chỉnh các mục của mình với một giao thức mới mà NSSharingServicePicker sẽ sử dụng để yêu cầu thông tin đó.

00:20:03.000 --> 00:20:08.000
Giao thức được gọi là NSPreviewRepresentableActivityItem.

00:20:08.000 --> 00:20:21.000
Các loại phù hợp phải có khả năng trả lại mục cơ bản để chia sẻ, như NSItemProvider và họ có thể tùy chọn trả về tiêu đề, nhà cung cấp hình ảnh và nhà cung cấp biểu tượng.

00:20:21.000 --> 00:20:32.000
Để thuận tiện, có một lớp phù hợp trong AppKit được gọi là NSPreviewRepresentingActivityItem mà bạn có thể sử dụng để đóng gói một mục chia sẻ hiện có với siêu dữ liệu của nó.

00:20:32.000 --> 00:20:44.000
Bạn có thể cung cấp trực tiếp từng tham số hình ảnh dưới dạng NSImage hoặc bạn có thể sử dụng NSItemProvider nếu nó quá tốn nhiều hiệu suất để tạo ra những hình ảnh đó ngay từ đầu.

00:20:44.000 --> 00:20:57.000
Bộ chọn chia sẻ mới rất tuyệt vời để bắt đầu chia sẻ từ một nơi nào đó như nút thanh công cụ, nhưng đôi khi bạn muốn bắt đầu chia sẻ từ menu, như thanh menu chính hoặc menu ngữ cảnh cho chế độ xem đã chọn bên trong ứng dụng của mình.

00:20:57.000 --> 00:21:06.000
Trước đây, bạn có thể đã xây dựng menu của riêng mình để xử lý việc này, bằng cách liệt kê các dịch vụ chia sẻ và sau đó xây dựng các mục menu cho từng dịch vụ.

00:21:06.000 --> 00:21:13.000
Mặc dù điều đó có hiệu quả, nhưng nó bỏ qua bộ chọn tiêu chuẩn, vì vậy bây giờ bạn đang bỏ lỡ tất cả các tính năng mới đó.

00:21:13.000 --> 00:21:20.000
Trong macOS Ventura, NSSharingServicePicker có thể tạo một "standardShareMenuItem" cho bạn.

00:21:20.000 --> 00:21:24.000
Bạn có thể thêm mục tiêu chuẩn vào bất kỳ menu nào để dễ dàng bắt đầu chia sẻ.

00:21:24.000 --> 00:21:34.000
Sau khi được chọn, mục menu triệu tập cửa sổ bật lên chia sẻ và đối với các menu ngữ cảnh, nó thậm chí sẽ neo cửa sổ bật lên vào cùng một chế độ xem đã tạo ra menu.

00:21:34.000 --> 00:21:40.000
Có rất nhiều hỗ trợ mới để quản lý cộng tác trong macOS Ventura.

00:21:40.000 --> 00:21:52.000
Với một số áp dụng bổ sung, các mục có thể chia sẻ của bạn cũng có thể trở thành lời mời cộng tác, mà người dùng có thể bắt đầu thông qua bộ chọn chia sẻ, kéo và thả vào Tin nhắn hoặc thậm chí qua FaceTime.

00:21:52.000 --> 00:22:00.000
Bạn có thể chia sẻ nội dung bằng CloudKit hoặc iCloud Drive, hoặc bạn có thể kết nối luồng lời mời với máy chủ cộng tác của riêng bạn.

00:22:00.000 --> 00:22:06.000
Bây giờ đây là một chủ đề thực sự lớn, vì vậy chúng tôi đã thực hiện một vài video để giải thích nó sâu hơn nhiều.

00:22:06.000 --> 00:22:12.000
Chúng là thứ không thể bỏ qua nếu ứng dụng của bạn hỗ trợ cộng tác hay bạn muốn bắt đầu với việc thêm nó.

00:22:12.000 --> 00:22:19.000
Khi bạn bắt đầu với macOS Ventura, hãy đảm bảo rằng bạn đang thiết lập cửa sổ của mình để hoạt động tốt nhất với Trình quản lý sân khấu.

00:22:19.000 --> 00:22:27.000
Sau đó, hãy xem xét thiết kế của bạn có thể được hưởng lợi như thế nào từ các cải tiến kiểm soát như NSComboButton và NSColorWell.

00:22:27.000 --> 00:22:33.000
Cải thiện biểu tượng của bạn bằng cách sử dụng các biểu tượng và tính năng mới nhất của Biểu tượng SF.

00:22:33.000 --> 00:22:43.000
Và cuối cùng, để cộng tác, hãy áp dụng các API mới nhất để bạn tận dụng tối đa trải nghiệm chia sẻ mới của macOS Ventura.

00:22:43.000 --> 23:59:59.000
Cảm ơn rất nhiều vì đã xem, và cảm ơn vì đã tiếp tục xây dựng các ứng dụng Mac tuyệt vời.

