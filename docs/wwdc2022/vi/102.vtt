WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:22.000
♪ ♪

00:00:22.000 --> 00:00:27.000
Susan Prescott: Chào mừng đến với Nền tảng Liên bang cho WWDC 2022.

00:00:27.000 --> 00:00:40.000
Chúng tôi luôn hào hứng với WWDC vì đây là cơ hội để chúng tôi kết nối với tất cả các bạn, chia sẻ một số tin tức về những gì chúng tôi đang làm và hiểu rõ hơn những gì bạn cần từ nền tảng nhà phát triển của chúng tôi.

00:00:40.000 --> 00:00:43.000
Những gì bạn làm với tư cách là nhà phát triển thật tuyệt vời.

00:00:43.000 --> 00:00:51.000
Bạn biến đổi ý tưởng của mình, những thứ của trí tưởng tượng, để đưa trải nghiệm của người dùng lên một tầm cao mới.

00:00:51.000 --> 00:00:55.000
Và chúng tôi muốn giúp bạn đưa ý tưởng của mình đi xa hơn nữa.

00:00:55.000 --> 00:01:09.000
Trong Bài phát biểu chính, chúng ta đã nói về một số khả năng mới trên iPhone, iPad, Mac, Apple Watch và Apple TV, và sức mạnh đáng kinh ngạc của Apple silicon để giúp đưa ngay cả những ý tưởng tham vọng nhất vào cuộc sống.

00:01:09.000 --> 00:01:13.000
Chúng ta có rất nhiều thứ để trang trải ngày hôm nay. Hãy bắt đầu với một số cập nhật.

00:01:13.000 --> 00:01:24.000
Đầu năm nay, chúng tôi đã mở Trung tâm Nhà phát triển Apple hoàn toàn mới, một nơi được thiết kế để bạn kết nối và cộng tác với các kỹ sư và nhà thiết kế Apple ngay tại Apple Park.

00:01:24.000 --> 00:01:36.000
Và mùa thu năm ngoái, hàng ngàn bạn từ khắp nơi trên thế giới đã tham dự các buổi nói chuyện công nghệ trực tuyến mới của chúng tôi, với hàng trăm phiên trực tiếp có nguồn gốc từ 11 quốc gia và bằng năm ngôn ngữ.

00:01:36.000 --> 00:01:46.000
Đối với chúng tôi, một trong những phần hay nhất của loạt bài Tech Talk là các cuộc họp 1-1, đây là cơ hội tuyệt vời để nghe về những gì bạn đang làm và chia sẻ một số lời khuyên và hướng dẫn.

00:01:46.000 --> 00:01:59.000
Mùa thu năm ngoái, Swift Playgrounds 4 đã vận chuyển với sức mạnh để xây dựng các ứng dụng và gửi chúng trực tiếp đến App Store và hỗ trợ SwiftUI, làm cho nó trở thành một công cụ đáng kinh ngạc để thử nghiệm và tạo mẫu giao diện người dùng.

00:01:59.000 --> 00:02:02.000
Và tất nhiên, có Xcode Cloud.

00:02:02.000 --> 00:02:07.000
Chúng tôi đã xây dựng Xcode Cloud để giúp bạn xây dựng các ứng dụng tốt hơn nhanh hơn và dễ dàng hơn.

00:02:07.000 --> 00:02:14.000
Đó là một dịch vụ tích hợp và phân phối liên tục được tích hợp ngay trong Xcode và được lưu trữ trên Đám mây.

00:02:14.000 --> 00:02:18.000
Xcode Cloud hỗ trợ phát triển cho tất cả các nền tảng của Apple.

00:02:18.000 --> 00:02:24.000
Nó tích hợp với TestFlight và App Store Connect cũng như mọi nhà cung cấp kiểm soát nguồn dựa trên git chính.

00:02:24.000 --> 00:02:30.000
Nó thậm chí còn có REST APIs để giúp kết nối với các khía cạnh khác trong quy trình phát triển của bạn.

00:02:30.000 --> 00:02:34.000
Nó được xây dựng với bảo mật tiên tiến để bảo vệ bạn và các dự án của bạn.

00:02:34.000 --> 00:02:41.000
Và tôi rất vui khi nói rằng Xcode Cloud có sẵn bắt đầu từ hôm nay.

00:02:41.000 --> 00:02:49.000
Chúng tôi nghĩ rằng gần như mọi nhóm phát triển đều có thể hưởng lợi từ Đám mây Xcode và chúng tôi đã định giá nó để các nhà phát triển thuộc mọi quy mô có thể truy cập được.

00:02:49.000 --> 00:02:59.000
Chúng tôi cung cấp đăng ký miễn phí 25 giờ mỗi tháng cho tất cả các thành viên Chương trình Nhà phát triển Apple cho đến cuối năm 2023!

00:02:59.000 --> 00:03:06.000
Và bạn sẽ có thể đăng ký bất kỳ cấp độ đăng ký Xcode Cloud nào trong ứng dụng Nhà phát triển vào cuối mùa hè này.

00:03:06.000 --> 00:03:10.000
Hôm nay chúng ta sẽ nói về ba chủ đề lớn.

00:03:10.000 --> 00:03:19.000
Đầu tiên, chúng tôi muốn chia sẻ thêm về tầm nhìn của chúng tôi để phát triển cho các nền tảng Apple, nơi chúng tôi đang ở với nền tảng của mình và nơi chúng tôi đang hướng tới.

00:03:19.000 --> 00:03:26.000
Sau đó, chúng tôi sẽ chia sẻ một số cách mới hấp dẫn mà ứng dụng của bạn có thể tích hợp với trải nghiệm hệ thống trên nền tảng Apple.

00:03:26.000 --> 00:03:34.000
Và cuối cùng, chúng ta sẽ thảo luận về một số API mới mạnh mẽ và chỉ cho bạn cách chúng có thể cho phép bạn làm những việc tham vọng hơn nữa với các ứng dụng của mình.

00:03:34.000 --> 00:03:39.000
Hãy bắt đầu với tầm nhìn cho nền tảng nhà phát triển của chúng tôi và cách nó đang phát triển.

00:03:39.000 --> 00:03:49.000
Josh ở đây để cho bạn biết tất cả về nó., Josh Shaffer: Một nền tảng nhà phát triển tuyệt vời cung cấp sự tích hợp chặt chẽ giữa ngôn ngữ lập trình, khuôn khổ và công cụ.

00:03:49.000 --> 00:03:57.000
Khi cả ba bổ sung đầy đủ cho nhau, chúng ta có thể đảm bảo rằng những điều bình thường là dễ dàng, và ngay cả những điều không phổ biến cũng có thể xảy ra.

00:03:57.000 --> 00:04:03.000
Bây giờ, làm đúng điều đó rút ngắn con đường xây dựng một ứng dụng tuyệt vời và nó mang lại lợi ích cho tất cả mọi người.

00:04:03.000 --> 00:04:08.000
Khách hàng có được trải nghiệm nhất quán, như cuộn luôn mang lại cảm giác hoàn hảo.

00:04:08.000 --> 00:04:13.000
Và bạn có thể tập trung thời gian và công sức của mình vào những gì làm cho ứng dụng của bạn trở nên độc đáo.

00:04:13.000 --> 00:04:20.000
Nhưng các thiết kế phát triển, tiến bộ phần cứng và những gì đã từng tiên tiến trở thành đường cơ sở được mong đợi.

00:04:20.000 --> 00:04:28.000
Ngôn ngữ Objective-C, khung AppKit &amp; UIKit và Trình tạo giao diện đã trao quyền cho các thế hệ nhà phát triển.

00:04:28.000 --> 00:04:37.000
Những công nghệ này được xây dựng cho nhau và sẽ tiếp tục phục vụ tốt cho chúng ta trong một thời gian dài sắp tới, nhưng theo thời gian, những sự trừu tượng mới trở nên cần thiết.

00:04:37.000 --> 00:04:50.000
Trong một thời gian, bạn đã thấy chúng tôi làm việc chăm chỉ để xác định thế hệ ngôn ngữ, khuôn khổ và công cụ tích hợp tiếp theo: Swift, SwiftUI và Xcode Previews.

00:04:50.000 --> 00:04:59.000
Tích hợp chặt chẽ trong một nền tảng phát triển như thế này đòi hỏi cả ba phần phải được thiết kế và phát triển cùng nhau, cả lái xe và điều khiển lẫn nhau.

00:04:59.000 --> 00:05:05.000
Các nhà xây dựng kết quả Swift được lấy cảm hứng từ cấu trúc bố cục của SwiftUI.

00:05:05.000 --> 00:05:10.000
Các chế độ xem khai báo của SwiftUI đã được kích hoạt bởi các loại giá trị Swift.

00:05:10.000 --> 00:05:15.000
Và Xcode Previews được thiết kế đặc biệt cho và được kích hoạt bởi cả hai.

00:05:15.000 --> 00:05:20.000
Bây giờ, kết quả là nền tảng phát triển tốt nhất mà chúng tôi từng xây dựng.

00:05:20.000 --> 00:05:31.000
Và năm nay, Swift, SwiftUI và Xcode đều có những bản cập nhật tuyệt vời đưa tầm nhìn này đi xa hơn và giúp bạn dễ dàng xây dựng các ứng dụng tuyệt vời cho tất cả các nền tảng của chúng tôi.

00:05:31.000 --> 00:05:34.000
Và tất cả bắt đầu với Swift.

00:05:34.000 --> 00:05:40.000
Bây giờ Ben từ nhóm Swift sẽ cho bạn biết tất cả về những gì tiếp theo.

00:05:40.000 --> 00:05:49.000
♪ ♪

00:05:49.000 --> 00:05:53.000
Ben Cohen: Swift nhanh, hiện đại và an toàn.

00:05:53.000 --> 00:05:59.000
Nó kết hợp tốc độ của một ngôn ngữ được đánh máy mạnh mẽ, với cú pháp biểu cảm dễ đọc và viết.

00:05:59.000 --> 00:06:03.000
Và thiết kế của nó loại bỏ toàn bộ các loại lỗi lập trình.

00:06:03.000 --> 00:06:08.000
Swift là ngôn ngữ tuyệt đối tốt nhất để xây dựng ứng dụng trên các thiết bị của chúng tôi.

00:06:08.000 --> 00:06:25.000
Swift cũng là nguồn mở, với một cộng đồng những người đóng góp tuyệt vời được tổ chức tại swift.org, hỗ trợ lẫn nhau thông qua các sáng kiến như Đa dạng trong Swift và Chương trình Cố vấn Swift, và thúc đẩy ngôn ngữ với các nhóm làm việc về các chủ đề như Swift trên máy chủ và khả năng tương tác C++.

00:06:25.000 --> 00:06:38.000
Trong năm qua, Swift thậm chí còn trở nên tốt hơn, với những cải tiến đồng thời, nâng cấp để làm cho mã Swift dễ đọc và viết hơn, công cụ giúp bạn tùy chỉnh quy trình làm việc của mình và những cải tiến tuyệt vời dưới mui xe.

00:06:38.000 --> 00:06:42.000
Nó bắt đầu vào năm ngoái, với sự ra đời của Swift Concurrency.

00:06:42.000 --> 00:06:53.000
Swift Concurrency đã đơn giản hóa đáng kể việc đọc và viết mã chạy song song và đã thành công lớn, với hơn 40.000 ứng dụng trong App Store áp dụng nó chỉ trong năm đầu tiên.

00:06:53.000 --> 00:07:04.000
Bởi vì đây là một cải tiến cơ bản và quan trọng đối với cơ sở mã ứng dụng của bạn, giờ đây có thể triển khai mã với Swift Concurrency cho tất cả các hệ điều hành được phát hành trong ba năm qua.

00:07:04.000 --> 00:07:08.000
Swift Concurrency cũng giới thiệu các chuỗi không đồng bộ.

00:07:08.000 --> 00:07:15.000
Năm nay, có một gói mã nguồn mở mới mang lại sự đồng thời cho bộ thuật toán trình tự hiện có phong phú của Swift.

00:07:15.000 --> 00:07:18.000
Nó được gọi là thuật toán không đồng bộ.

00:07:18.000 --> 00:07:28.000
Ví dụ, trong khi giao thức trình tự của Swift hỗ trợ thuật toán zip để kết hợp hai chuỗi, các thuật toán không đồng bộ mang đến một phiên bản để nén hai chuỗi không đồng bộ lại với nhau.

00:07:28.000 --> 00:07:39.000
Bởi vì các chuỗi không đồng bộ được tích hợp trực tiếp vào ngôn ngữ Swift, chúng sử dụng các cấu trúc quen thuộc như các vòng lặp 'cho', nhờ cú pháp không đồng bộ/chờ đợi, trông giống như mã đường thẳng thông thường.

00:07:39.000 --> 00:07:46.000
Bạn cũng có thể sử dụng mẫu thử/bắt quen thuộc để xử lý những thứ như lỗi mạng do truyền dữ liệu không đồng bộ qua mạng.

00:07:46.000 --> 00:07:52.000
Một điều quan trọng về các chuỗi không đồng bộ là cách chúng cung cấp các giá trị dữ liệu theo thời gian.

00:07:52.000 --> 00:08:07.000
Swift hiện bao gồm một bộ loại đồng hồ mới để biểu diễn các đơn vị thời gian và các thuật toán không đồng bộ được xây dựng dựa trên chúng để cung cấp nhiều thuật toán dựa trên thời gian, như điều tiết ở đây, có thể giúp làm chậm các bản cập nhật từ một chuỗi.

00:08:07.000 --> 00:08:14.000
Mô hình đồng thời của Swift được thiết kế để làm cho mã không đồng bộ dễ dàng và an toàn để viết như mã đồng bộ của bạn.

00:08:14.000 --> 00:08:17.000
Một phần lớn trong đó là mô hình diễn viên của Swift.

00:08:17.000 --> 00:08:23.000
Các diễn viên cho phép bạn cô lập dữ liệu của mình bằng cách sử dụng mã thực thi đồng thời, an toàn luồng.

00:08:23.000 --> 00:08:31.000
Swift ngăn bạn vô tình chia sẻ trạng thái đó giữa các luồng song song, xác định nguồn lỗi chính.

00:08:31.000 --> 00:08:35.000
Giao tiếp giữa các diễn viên rất dễ dàng và hiệu quả thông qua async/await.

00:08:35.000 --> 00:08:41.000
Giờ đây, Swift đưa ý tưởng cô lập diễn viên đi xa hơn với các diễn viên phân tán.

00:08:41.000 --> 00:08:46.000
Các tác nhân phân tán có thể giao tiếp qua nhiều quy trình hoặc thiết bị.

00:08:46.000 --> 00:09:02.000
Từ khóa "phân tán" đánh dấu các tác nhân và phương thức này có thể được truy cập từ xa, cho dù đó là giữa các quy trình riêng biệt trên máy Mac của bạn, ngang hàng giữa các thiết bị khác nhau hay từ thiết bị nói chuyện với phụ trợ của bạn được viết bằng Swift trên Máy chủ.

00:09:02.000 --> 00:09:13.000
Giống như các diễn viên giúp Swift bảo vệ dữ liệu trạng thái của bạn khỏi các điều kiện chủng tộc, các diễn viên phân tán giúp Swift cung cấp chúng bên ngoài quy trình của bạn, sử dụng cơ chế vận chuyển có thể cắm được.

00:09:13.000 --> 00:09:23.000
Trình biên dịch Swift sau đó có thể thực hiện các kiểm tra giúp đảm bảo hành vi chính xác trong môi trường phân tán, cho phép bạn quay lại làm việc trên các tính năng mà bạn quan tâm.

00:09:23.000 --> 00:09:33.000
Các diễn viên phân tán và các tính năng đồng thời khác cho thấy mã Swift có thể dễ đọc và ghi như thế nào khi các cải tiến được tạo ra sâu trong cú pháp.

00:09:33.000 --> 00:09:38.000
Để cho bạn biết thêm về các cải tiến khả năng sử dụng trong Swift, đây là Ken.

00:09:38.000 --> 00:09:42.000
Ken Orr: Chuỗi là một trong những tính năng quan trọng nhất của bất kỳ ngôn ngữ lập trình nào.

00:09:42.000 --> 00:09:46.000
Nhưng đối phó với các chuỗi có thể là một nguồn thất vọng phổ biến.

00:09:46.000 --> 00:09:53.000
Tại một số thời điểm trong hành trình của nhà phát triển, họ có thể thấy mình cần trích xuất thông tin từ một chuỗi như thế này.

00:09:53.000 --> 00:09:59.000
Viết mã để phân tích chuỗi rất dễ bị sai, với nhiều chi tiết để theo dõi.

00:09:59.000 --> 00:10:03.000
Và mã kết quả - thật khó để đọc và sửa đổi.

00:10:03.000 --> 00:10:06.000
Biểu thức chính quy là một giải pháp mạnh mẽ cho thách thức này.

00:10:06.000 --> 00:10:14.000
Chúng cho phép bạn mô tả mẫu mà bạn mong đợi sẽ thấy trong chuỗi của mình và chỉ định phần thông tin nào bạn muốn nắm bắt.

00:10:14.000 --> 00:10:24.000
Năm nay, Swift đang mang lại một cải tiến lớn cho trải nghiệm của nhà phát triển xung quanh các biểu thức chính quy, bắt đầu với một biểu thức chính quy mới theo nghĩa đen.

00:10:24.000 --> 00:10:29.000
Chúng được tích hợp trực tiếp vào ngôn ngữ, cho phép trình biên dịch Swift kiểm tra tính chính xác.

00:10:29.000 --> 00:10:34.000
Và chúng mở khóa sức mạnh của hệ thống kiểu Swift khi bạn trích xuất thông tin bằng biểu thức chính quy.

00:10:34.000 --> 00:10:39.000
Và họ tận dụng tối đa sự hỗ trợ Unicode tốt nhất của Swift.

00:10:39.000 --> 00:10:41.000
Hãy cùng xem nào.

00:10:41.000 --> 00:10:46.000
Tôi đang làm việc trên một ứng dụng có tên Food Truck tổ chức mọi thứ từ nhận đơn đặt hàng đến theo dõi doanh số bán hàng.

00:10:46.000 --> 00:10:49.000
Và một số đơn đặt hàng đến dưới dạng chuỗi, được đóng gói với dữ liệu.

00:10:49.000 --> 00:10:57.000
Bây giờ, các biểu thức chính quy là hoàn hảo để trích xuất các chi tiết tôi muốn và không có nơi nào tốt hơn để thử nghiệm chúng hơn ở đây trong Sân chơi.

00:10:57.000 --> 00:11:00.000
Tôi sẽ bắt đầu bằng cách tạo ra một regex theo nghĩa đen.

00:11:00.000 --> 00:11:08.000
Bây giờ tôi sẽ gõ biểu thức và rút ra ai đã đặt hàng, loại bánh rán và số lượng bánh rán.

00:11:08.000 --> 00:11:14.000
Bây giờ, khi tôi gõ, regex được đánh dấu cú pháp, điều này giúp tôi xác nhận biểu thức của mình là chính xác.

00:11:14.000 --> 00:11:16.000
Bây giờ tôi sẽ thử nó.

00:11:16.000 --> 00:11:21.000
Sử dụng chuỗi thứ tự từ phía trên và tìm kiếm kết quả khớp đầu tiên của regex.

00:11:21.000 --> 00:11:28.000
Bây giờ, khi tôi chạy Playground, tôi có thể thấy với kết quả nội tuyến chính xác những phần nào của chuỗi thứ tự mà regex khớp.

00:11:28.000 --> 00:11:31.000
Và ở đây, nó chỉ tìm thấy những gì tôi đang tìm kiếm.

00:11:31.000 --> 00:11:34.000
Hỗ trợ regex mới của Swift không dừng lại ở đây.

00:11:34.000 --> 00:11:46.000
Khi các ký tự trở nên phức tạp hơn, như cái này khớp với các phần của tệp nhật ký, Swift cung cấp một cách thậm chí còn tốt hơn để tạo ra các mẫu này - các trình tạo regex.

00:11:46.000 --> 00:11:50.000
Và thật dễ dàng để chuyển đổi một nghĩa đen thành một người xây dựng.

00:11:50.000 --> 00:11:55.000
Bây giờ tôi có mã, và điều đó giúp việc đọc và thay đổi dễ dàng hơn.

00:11:55.000 --> 00:11:58.000
Tôi có thể đơn giản hóa cái này nhiều hơn nữa.

00:11:58.000 --> 00:12:06.000
Ở đây, nơi tôi đang tìm kiếm một chữ số hex, tôi sẽ sử dụng .hexDigit CharacterClass mới, giúp làm cho ý định của tôi rõ ràng hơn.

00:12:06.000 --> 00:12:14.000
Bây giờ, cú pháp trình tạo giúp tôi tạo và mở rộng các biểu thức của mình dễ dàng hơn rất nhiều và nhận được kết quả mà tôi đang tìm kiếm.

00:12:14.000 --> 00:12:19.000
Và đó là trải nghiệm mạnh mẽ, mới của nhà phát triển xung quanh các biểu thức chính quy trong Swift.

00:12:19.000 --> 00:12:28.000
Ben: Ngoài cú pháp chuỗi, Swift cũng ngày càng dễ đọc và viết hơn thông qua các cải tiến đối với một tính năng ngôn ngữ được gọi là generics.

00:12:28.000 --> 00:12:36.000
Các tính năng sức mạnh chung của Swift mà bạn sử dụng hàng ngày, như loại Mảng, chứa bất kỳ loại phần tử nào, từ chuỗi đến các loại tùy chỉnh của riêng bạn.

00:12:36.000 --> 00:12:42.000
Mã chung sử dụng khái niệm về loại giữ chỗ để thay thế cho một loại khác sẽ được xác định sau này.

00:12:42.000 --> 00:12:50.000
Bằng cách loại bỏ các giả định về các loại cụ thể, bạn có thể rõ ràng hơn về mục đích của mã của mình và giúp việc sử dụng lại dễ dàng hơn.

00:12:50.000 --> 00:12:54.000
Nhưng điều này cũng có thể làm cho mã của bạn khó đọc hơn.

00:12:54.000 --> 00:13:03.000
Ví dụ, nếu bạn muốn xử lý một bộ sưu tập bài hát chung như một tham số chức năng, bạn sẽ phải viết khá nhiều mã để thể hiện ý định của mình.

00:13:03.000 --> 00:13:12.000
Bây giờ trong Swift, việc viết một hàm chấp nhận một số bộ sưu tập các bài hát cũng dễ dàng như sử dụng từ khóa 'some' để nói với Swift về tham số.

00:13:12.000 --> 00:13:15.000
Bạn nhận được cùng một ý nghĩa, nhưng với ít mã hơn.

00:13:15.000 --> 00:13:28.000
Trong các trường hợp khác, bạn có thể cần hành vi năng động hơn, như với mảng danh sách phát của thư viện nhạc này, có thể cần chứa các loại bộ sưu tập bài hát khác nhau - bộ bài hát hoặc mảng bài hát.

00:13:28.000 --> 00:13:31.000
Đó là nơi mà từ khóa 'bất kỳ' mới có thể giúp ích.

00:13:31.000 --> 00:13:38.000
Từ khóa 'bất kỳ' nào được tích hợp ngay trong Swift và cho phép bạn thể hiện một loại có thể chứa bất kỳ bộ sưu tập bài hát nào.

00:13:38.000 --> 00:13:41.000
Và nó cũng hoạt động liền mạch với các chức năng chung.

00:13:41.000 --> 00:13:48.000
Bằng cách áp dụng cú pháp quen thuộc và sử dụng các từ khóa tự nhiên hơn, việc viết mã chung trong Swift chưa bao giờ dễ dàng hơn thế.

00:13:48.000 --> 00:13:55.000
Cũng quan trọng như các tính năng được tích hợp trong ngôn ngữ Swift là các công cụ được xây dựng xung quanh nó.

00:13:55.000 --> 00:14:04.000
Trình quản lý gói Swift giúp bạn dễ dàng quản lý các phụ thuộc của ứng dụng và tận dụng các gói tuyệt vời được xuất bản bởi các nhà phát triển trên toàn thế giới.

00:14:04.000 --> 00:14:15.000
Cho đến nay, các nhà phát triển đó đã xuất bản hàng nghìn gói Swift, cung cấp mã để trợ giúp mọi thứ từ xác thực và dịch vụ web đến quản lý dữ liệu và các thành phần giao diện người dùng có thể tái sử dụng.

00:14:15.000 --> 00:14:23.000
Và năm nay, Trình quản lý gói Swift đang khuếch đại các cách bạn có thể tạo và xây dựng mã với các Plugin gói hoàn toàn mới.

00:14:23.000 --> 00:14:29.000
Plugin là các gói Swift mà bạn có thể thêm vào dự án của mình dễ dàng như bất kỳ phụ thuộc nào khác.

00:14:29.000 --> 00:14:37.000
Chúng tự động tải xuống và xây dựng trên một thanh toán mới, ngoại trừ thay vì là mã trong ứng dụng của bạn, chúng là mã giúp xây dựng ứng dụng của bạn.

00:14:37.000 --> 00:14:44.000
Các plugin gói có thể được gọi từ dòng lệnh hoặc trong Xcode, như một phần của giai đoạn xây dựng hoặc theo yêu cầu của bạn.

00:14:44.000 --> 00:14:51.000
Chúng chạy trong môi trường hộp cát nhắc bạn cho phép trước khi đọc hoặc sửa đổi mã của bạn.

00:14:51.000 --> 00:14:54.000
Có vô số khả năng để mở rộng quy trình làm việc của bạn với Gói Plugins.

00:14:54.000 --> 00:15:05.000
Bạn có thể sử dụng chúng để xơ vải và định dạng mã của mình để phù hợp với hướng dẫn phong cách nhóm với các gói như SwiftLint hoặc SwiftFormat hoặc tự động tạo mã nguồn tại thời điểm xây dựng với các công cụ như Sourcery.

00:15:05.000 --> 00:15:08.000
Bất cứ điều gì giúp bạn hoàn thành công việc.

00:15:08.000 --> 00:15:13.000
Ken: Package Plugins là một cách tuyệt vời để mở rộng Xcode, chỉ bằng cách viết một chút Swift.

00:15:13.000 --> 00:15:14.000
Và bạn có thể làm điều đó theo hai cách.

00:15:14.000 --> 00:15:20.000
Với các plugin lệnh mà bạn sử dụng theo yêu cầu và với các plugin xây dựng cho bất cứ khi nào dự án của bạn xây dựng.

00:15:20.000 --> 00:15:26.000
Bây giờ, trở lại đây trong ứng dụng Food Truck của chúng tôi, đây là mã cho một plugin lệnh mà tôi đã tạo.

00:15:26.000 --> 00:15:30.000
Nhóm của tôi có một tính thẩm mỹ mã độc đáo.

00:15:30.000 --> 00:15:33.000
Chúng tôi thích nhập khẩu của chúng tôi được sắp xếp theo thứ tự độ dài chuỗi.

00:15:33.000 --> 00:15:35.000
Ngắn nhất đến dài nhất.

00:15:35.000 --> 00:15:43.000
Và vì Package Plugins là tất cả về tùy chỉnh và kiểm soát, chúng tôi đã tạo ra một plugin lệnh sử dụng SwiftFormat để giải quyết vấn đề đó.

00:15:43.000 --> 00:15:48.000
Nó tìm thấy tất cả các tệp được sửa đổi cục bộ, và sau đó nó sắp xếp nhập khẩu của chúng.

00:15:48.000 --> 00:15:52.000
Bây giờ, đây là một tệp tôi đã chỉnh sửa với một số nhập chưa được phân loại ở trên cùng.

00:15:52.000 --> 00:15:55.000
Tôi sẽ sử dụng lệnh trên toàn bộ dự án.

00:15:55.000 --> 00:15:59.000
Tôi có thể chọn bất kỳ số lượng mục tiêu nào. Tôi sẽ chạy nó trên mọi thứ.

00:15:59.000 --> 00:16:01.000
Và tôi có thể xem lại mã của plugin nếu tôi muốn.

00:16:01.000 --> 00:16:03.000
Tôi đã sẵn sàng. Tôi sẽ chạy lệnh.

00:16:03.000 --> 00:16:07.000
Và sau đó, cứ như vậy, plugin hoạt động trên các tệp của tôi.

00:16:07.000 --> 00:16:12.000
Nó tìm thấy tất cả các tệp nguồn được sửa đổi cục bộ, và sau đó nó sắp xếp chúng theo thứ tự độ dài.

00:16:12.000 --> 00:16:15.000
Với các plugin, bạn có thể vượt ra ngoài việc chỉ định dạng.

00:16:15.000 --> 00:16:21.000
Bạn có thể tạo mã nguồn, làm việc với git, thậm chí hiển thị các lỗi và cảnh báo tùy chỉnh của riêng bạn.

00:16:21.000 --> 00:16:25.000
Tôi có một plugin khác để đảm bảo mã của tôi được ghi chép đầy đủ.

00:16:25.000 --> 00:16:30.000
Đó là một plugin xây dựng và nó dựa trên gói SwiftLint mã nguồn mở.

00:16:30.000 --> 00:16:36.000
Vì vậy, bây giờ khi tôi xây dựng, tôi có thể dễ dàng nhìn thấy tất cả các vị trí trong mã của mình, nơi tôi cần thêm tài liệu.

00:16:36.000 --> 00:16:42.000
Và các plugin xây dựng mở rộng đến Xcode Cloud, nơi chúng chạy như một phần của mọi bản dựng.

00:16:42.000 --> 00:16:52.000
Với các plugin gói Swift, nhóm của tôi và tôi có thể tạo các lệnh của riêng mình, tùy chỉnh các bản dựng cục bộ và trong Xcode Cloud, sau đó chia sẻ các plugin đó với những người khác.

00:16:52.000 --> 00:16:55.000
Tất cả đều sử dụng sức mạnh của một vài dòng Swift.

00:16:55.000 --> 00:17:00.000
Và đó là một cái nhìn nhanh về cách Package Plugins có thể nâng cấp quy trình phát triển của bạn.

00:17:00.000 --> 00:17:04.000
Ben: Cuối cùng, Swift có một số thay đổi ấn tượng.

00:17:04.000 --> 00:17:06.000
Xây dựng các dự án Swift nhanh hơn bao giờ hết.

00:17:06.000 --> 00:17:11.000
Nhờ những nỗ lực song song hóa mới, thời gian liên kết nhanh gấp đôi.

00:17:11.000 --> 00:17:21.000
Và thời gian chạy đồng thời Swift hiện được tích hợp chặt chẽ hơn với hệ điều hành để đảm bảo tốt hơn mức độ ưu tiên cho các tác vụ không đồng bộ của bạn, giúp các ứng dụng của bạn luôn hiệu quả và phản hồi nhanh.

00:17:21.000 --> 00:17:33.000
Cuối cùng, thời gian khởi chạy cho các ứng dụng được viết bằng Swift nhanh hơn đáng kể trên iOS 16, với các ứng dụng như Lyft hoặc Airbnb khởi chạy nhanh gần gấp đôi nhờ cải tiến trình liên kết động.

00:17:33.000 --> 00:17:44.000
Với những cải tiến dưới mui xe này, khả năng mới trong công cụ, cú pháp phát triển dễ đọc và viết hơn và cải tiến tính đồng thời, chưa bao giờ có thời điểm tốt hơn để phát triển trong Swift.

00:17:44.000 --> 00:17:49.000
Swift là ngôn ngữ tuyệt đối tốt nhất để xây dựng ứng dụng trên các thiết bị của chúng tôi.

00:17:49.000 --> 00:17:53.000
Nhưng một ngôn ngữ chỉ là một phần của những gì bạn cần để xây dựng các ứng dụng tốt nhất của mình.

00:17:53.000 --> 00:17:57.000
Bạn phải ghép nối một ngôn ngữ với khung giao diện người dùng mạnh mẽ.

00:17:57.000 --> 00:17:59.000
Và Eliza sẽ nói với bạn nhiều hơn.

00:17:59.000 --> 00:18:08.000
Eliza Block: Một khung giao diện người dùng mạnh mẽ cung cấp các tính năng trừu tượng giúp dễ dàng mô tả giao diện của bạn, điền dữ liệu và cập nhật nó.

00:18:08.000 --> 00:18:10.000
Nó nên mở rộng quy mô tốt với sự phức tạp.

00:18:10.000 --> 00:18:16.000
Và nó nên được thiết kế cho nền tảng bạn đang nhắm mục tiêu, cho phép bạn truy cập đầy đủ vào sức mạnh của thiết bị.

00:18:16.000 --> 00:18:21.000
Khung giao diện người dùng của bạn sẽ giúp bạn làm cho ứng dụng của mình trở nên quen thuộc và trực quan.

00:18:21.000 --> 00:18:28.000
Nó sẽ giúp dễ dàng tạo các điều khiển tiêu chuẩn và các mẫu tương tác gốc, với các tùy chọn để tùy chỉnh nâng cao.

00:18:28.000 --> 00:18:36.000
Và nó cần phải có một API biểu cảm cho phép bạn nhanh chóng tạo mẫu ý tưởng của mình và xem kết quả trên một loạt các thiết bị.

00:18:36.000 --> 00:18:39.000
SwiftUI cung cấp tất cả những điều này và hơn thế nữa.

00:18:39.000 --> 00:18:44.000
Giống như Swift, Swift UI được thiết kế với ý kiến mạnh mẽ về cách tốt nhất để xây dựng ứng dụng.

00:18:44.000 --> 00:18:48.000
Nó có một cú pháp khai báo dễ đọc và dễ viết.

00:18:48.000 --> 00:18:53.000
Bạn mô tả giao diện của bạn trông như thế nào, thay vì cách xây dựng nó.

00:18:53.000 --> 00:18:59.000
Và điều này để lại chỗ cho SwiftUI cung cấp các mặc định thông minh cho từng nền tảng.

00:18:59.000 --> 00:19:09.000
SwiftUI tự động cập nhật giao diện của bạn với những thay đổi đối với mô hình dữ liệu cơ bản, vì vậy giao diện người dùng ứng dụng của bạn không bao giờ kết thúc ở trạng thái không nhất quán.

00:19:09.000 --> 00:19:17.000
SwiftUI xử lý tất cả các chi tiết này cho bạn, vì vậy bạn có thể tập trung thời gian và năng lượng của mình vào những gì làm cho ứng dụng của bạn trở nên độc đáo.

00:19:17.000 --> 00:19:21.000
Viết một khung giao diện người dùng mới là một công việc lớn.

00:19:21.000 --> 00:19:27.000
Kể từ khi được giới thiệu, chúng tôi đã liên tục mở rộng phạm vi bảo hiểm API của SwiftUI, được hướng dẫn bởi phản hồi của bạn.

00:19:27.000 --> 00:19:39.000
Năm nay, chúng tôi đã giúp việc áp dụng SwiftUI từng bước trong các ứng dụng hiện có của bạn trở nên dễ dàng hơn và chúng tôi đã thực hiện một số cải tiến thú vị về sức mạnh và tính linh hoạt của nó, bắt đầu với điều hướng ứng dụng.

00:19:39.000 --> 00:19:46.000
Với SwiftUI, luôn dễ dàng tạo ra các loại hệ thống phân cấp điều hướng phổ biến được tìm thấy trong nhiều ứng dụng.

00:19:46.000 --> 00:19:52.000
Và năm nay, SwiftUI đang mở rộng hỗ trợ đó với API điều hướng hoàn toàn mới.

00:19:52.000 --> 00:19:59.000
API điều hướng mới giúp bạn dễ dàng thể hiện phong cách điều hướng phù hợp nhất với nhu cầu của ứng dụng của bạn.

00:19:59.000 --> 00:20:10.000
Với khả năng kiểm soát lập trình mạnh mẽ đối với việc trình bày các chế độ xem ứng dụng của bạn, bạn có thể dễ dàng lưu và khôi phục lựa chọn, và thậm chí thay thế toàn bộ nội dung của ngăn xếp điều hướng.

00:20:10.000 --> 00:20:21.000
Điều này thực sự hữu ích khi xử lý các hành vi quan trọng như thiết lập trạng thái khởi chạy ứng dụng của bạn, quản lý quá trình chuyển đổi giữa các lớp kích thước và phản hồi các liên kết sâu.

00:20:21.000 --> 00:20:27.000
SwiftUI cũng có những cải tiến lớn khi kiểm soát bố cục giao diện ứng dụng của bạn.

00:20:27.000 --> 00:20:34.000
Bố cục của nhiều giao diện ứng dụng có thể được mô tả bằng cách sử dụng mô hình ngăn xếp các phần tử ngang hoặc dọc của SwiftUI.

00:20:34.000 --> 00:20:40.000
Và trong khi mô hình này hoạt động cho nhiều bố cục phổ biến, đôi khi bạn cần một cái gì đó linh hoạt hơn.

00:20:40.000 --> 00:20:48.000
Năm nay, chúng tôi sẽ thêm một Grid API mới, giúp dễ dàng bố trí một tập hợp các chế độ xem được căn chỉnh trên nhiều hàng và cột.

00:20:48.000 --> 00:20:54.000
Và bạn có thể tiến xa hơn nữa bố cục của mình với API bố cục tùy chỉnh hoàn toàn mới.

00:20:54.000 --> 00:20:59.000
API bố cục tùy chỉnh cung cấp cho bạn sự linh hoạt để xây dựng bất kỳ loại bố cục nào bạn muốn.

00:20:59.000 --> 00:21:08.000
Ví dụ: bạn có thể tạo bố cục luồng trong đó các chế độ xem của bạn được sắp xếp giống như nội dung của một tờ báo, gói sang cột tiếp theo khi cần thêm không gian.

00:21:08.000 --> 00:21:14.000
Hoặc bạn có thể tạo một bố cục xuyên tâm vẽ quan điểm của bạn trong một vòng tròn, giống như các con số trên mặt đồng hồ.

00:21:14.000 --> 00:21:22.000
API bố cục tùy chỉnh giúp bạn dễ dàng sử dụng lại logic bố cục của mình, giúp mã xem của bạn đơn giản và dễ đọc hơn.

00:21:22.000 --> 00:21:27.000
SwiftUI tiếp tục phát triển để cung cấp nhiều loại yếu tố giao diện hơn.

00:21:27.000 --> 00:21:32.000
Giống như một nửa trang tính, xác định các chế độ xem phụ trượt phía trên chế độ xem chính.

00:21:32.000 --> 00:21:37.000
Đây là những điều tuyệt vời để cung cấp quyền truy cập nhanh vào thông tin trên màn hình nhỏ hơn.

00:21:37.000 --> 00:21:45.000
Và SwiftUI hiện hỗ trợ Share Sheets, vì vậy ứng dụng của bạn có thể dễ dàng tận dụng tất cả các tiện ích mở rộng Share có sẵn trên thiết bị của người dùng.

00:21:45.000 --> 00:21:53.000
Hỗ trợ Share Sheet được hỗ trợ bởi giao thức Transferable mới, giới thiệu API loại an toàn để chuyển dữ liệu ứng dụng.

00:21:53.000 --> 00:22:03.000
Chúng tôi cũng đã giúp việc áp dụng SwiftUI từng bước trong các ứng dụng hiện có của bạn dễ dàng hơn với một ô chế độ xem bộ sưu tập đặc biệt có thể lưu trữ các chế độ xem SwiftUI.

00:22:03.000 --> 00:22:10.000
Nếu bạn đã có chế độ xem bộ sưu tập trong ứng dụng UIKit của mình, bây giờ bạn có thể viết các ô tùy chỉnh bằng cú pháp khai báo của SwiftUI.

00:22:10.000 --> 00:22:19.000
Các ô này được tích hợp chặt chẽ với UIKit, hỗ trợ các hành động vuốt, nền ô và tất cả các tính năng khác của UICollectionView.

00:22:19.000 --> 00:22:27.000
Hôm nay chúng tôi cũng giới thiệu một khuôn khổ hoàn toàn mới bổ sung cho SwiftUI và sẽ cho phép bạn thể hiện nhiều giao diện hơn nữa.

00:22:27.000 --> 00:22:29.000
Đây là Jo để cho bạn biết thêm.

00:22:29.000 --> 00:22:31.000
Jo Arreaza-Taylor: Thế giới ngày nay chứa đầy dữ liệu.

00:22:31.000 --> 00:22:35.000
Dữ liệu để giúp hiểu, đưa ra quyết định và nhìn thấy những quan điểm mới.

00:22:35.000 --> 00:22:45.000
Một hình ảnh trực quan hóa dữ liệu được thiết kế tốt và có thể truy cập có thể truyền đạt sự phức tạp đến người dùng của bạn theo cách cảm thấy rõ ràng và tự nhiên, trao quyền cho họ khi họ di chuyển trong ngày.

00:22:45.000 --> 00:22:54.000
Giống như giúp thể hiện xu hướng thay đổi về sức khỏe của họ, làm nổi bật sự tiến bộ của họ đối với các mục tiêu cá nhân và chuẩn bị cho họ những gì sắp xảy ra.

00:22:54.000 --> 00:23:00.000
Hôm nay, chúng tôi giới thiệu một khuôn khổ mới để giúp trao quyền cho người dùng của bạn mở khóa dữ liệu trong ứng dụng của bạn.

00:23:00.000 --> 00:23:03.000
Xin chào Swift Charts.

00:23:03.000 --> 00:23:12.000
Swift Charts là một khung biểu đồ có khả năng tùy biến cao được xây dựng trên SwiftUI giúp dễ dàng tạo ra các hình ảnh trực quan tuyệt đẹp.

00:23:12.000 --> 00:23:20.000
Nó sử dụng cú pháp khai báo giống như SwiftUI để giúp dễ dàng đọc và viết mã truyền tải thông tin trực quan.

00:23:20.000 --> 00:23:35.000
Biểu đồ Swift cho phép bạn tùy chỉnh trình bày thông tin để phù hợp nhất với nhu cầu của ứng dụng của bạn để tạo mọi thứ từ biểu đồ đường và thanh đến các ví dụ phức tạp hơn như bản đồ nhiệt và biểu đồ luồng, và nhiều, nhiều loại khác.

00:23:35.000 --> 00:23:46.000
Và bởi vì Swift Charts được xây dựng trên SwiftUI, các biểu đồ có sự hỗ trợ tuyệt vời cho các tính năng trợ năng, như trải nghiệm VoiceOver tuyệt vời, vượt trội, dễ dàng tùy chỉnh.

00:23:46.000 --> 00:23:53.000
Được xây dựng trên SwiftUI cũng có nghĩa là bạn có thể tạo hiệu ứng động cho các biểu đồ của mình, để giúp bạn cung cấp cho ứng dụng của mình giao diện phù hợp.

00:23:53.000 --> 00:23:57.000
Và tất nhiên, Swift Charts hoạt động tốt trên tất cả các thiết bị của chúng tôi.

00:23:57.000 --> 00:24:05.000
Eliza: Quay lại ứng dụng Food Truck của chúng tôi, đây là Biểu đồ Swift mới tuyệt đẹp trong khu vực xem trước được thiết kế lại hoàn toàn của Xcode.

00:24:05.000 --> 00:24:09.000
Tôi cũng đang sử dụng chế độ xem bảng SwiftUI nhiều cột mới.

00:24:09.000 --> 00:24:12.000
Hãy để tôi chỉ cho bạn cách xây dựng biểu đồ này dễ dàng như thế nào.

00:24:12.000 --> 00:24:17.000
Và khi tôi cuộn, hãy xem các tiêu đề có cấu trúc mới tuyệt vời trong trình chỉnh sửa nguồn.

00:24:17.000 --> 00:24:21.000
Họ làm cho nó thực sự dễ dàng để thấy bạn đang ở đâu trong hồ sơ.

00:24:21.000 --> 00:24:22.000
Đây là mã cho biểu đồ.

00:24:22.000 --> 00:24:26.000
Bây giờ, đây thực sự là một biểu đồ thanh xếp chồng lên nhau, nhưng bạn thực sự không thể nói được.

00:24:26.000 --> 00:24:31.000
Hãy để mỗi chiếc bánh rán sử dụng màu riêng của nó.

00:24:31.000 --> 00:24:38.000
Có lẽ sẽ dễ dàng hơn để xem bánh rán so sánh như thế nào nếu chúng ta đặt các thanh cạnh nhau.

00:24:38.000 --> 00:24:43.000
Tôi thích cách tôi có thể thực hiện tất cả những thay đổi lớn này chỉ với một vài công cụ sửa đổi đơn giản.

00:24:43.000 --> 00:24:45.000
Chúng tôi cũng có thể tùy chỉnh kiểu dáng.

00:24:45.000 --> 00:24:48.000
Hãy làm cho các thanh phản ánh màu bánh rán.

00:24:48.000 --> 00:24:53.000
Và chúng ta thậm chí có thể thêm chú thích vào các thanh bằng một công cụ sửa đổi khác.

00:24:53.000 --> 00:24:54.000
Trông thật tuyệt.

00:24:54.000 --> 00:24:59.000
Các bản xem trước hiện đang hoạt động theo mặc định, vì vậy tôi có thể tương tác ngay lập tức với chế độ xem của mình.

00:24:59.000 --> 00:25:01.000
Tôi sẽ thay đổi thứ tự sắp xếp.

00:25:01.000 --> 00:25:07.000
Xem cách các thanh hoạt hình đẹp mắt, với Swift Charts thực hiện tất cả các công việc nặng nhọc.

00:25:07.000 --> 00:25:09.000
Hãy tìm nạp thêm dữ liệu.

00:25:09.000 --> 00:25:13.000
Biểu đồ và bảng đều tự động cập nhật khi mô hình của tôi thay đổi.

00:25:13.000 --> 00:25:17.000
Biểu đồ thậm chí còn tính toán lại trục Y của nó để phản ánh tổng số mới.

00:25:17.000 --> 00:25:19.000
Để tôi cho bạn xem thêm một biểu đồ nữa.

00:25:19.000 --> 00:25:22.000
Tôi đã đưa ra một biểu đồ đường mà chúng ta có thể thêm vào chế độ xem.

00:25:22.000 --> 00:25:25.000
Tôi sẽ chuyển sang việc triển khai.

00:25:25.000 --> 00:25:29.000
Biểu đồ đường với Biểu đồ Swift có một số tùy chọn thực sự thú vị.

00:25:29.000 --> 00:25:32.000
Chúng ta có thể thêm biểu tượng cho mỗi chiếc bánh rán.

00:25:32.000 --> 00:25:34.000
Chúng ta có thể chú thích các dòng.

00:25:34.000 --> 00:25:38.000
Chúng ta thậm chí có thể làm phẳng các đường cong với nhiều chiến lược nội suy khác nhau.

00:25:38.000 --> 00:25:41.000
Hãy sử dụng catmullRom.

00:25:41.000 --> 00:25:45.000
Cuối cùng, tôi sẽ ghi đè lên kiểu tỷ lệ biểu đồ bằng cách cung cấp bản đồ của riêng mình.

00:25:45.000 --> 00:25:49.000
Điều đó sẽ làm cho biểu đồ của tôi phù hợp hơn với bảng màu của ứng dụng.

00:25:49.000 --> 00:25:50.000
Thực sự tốt.

00:25:50.000 --> 00:25:56.000
Khu vực xem trước được thiết kế lại giúp dễ dàng hơn bao giờ hết để xem chế độ xem của tôi trông như thế nào trong các môi trường khác nhau.

00:25:56.000 --> 00:26:01.000
Bằng cách nhấn nút này trong khung vẽ, tôi có thể thấy chế độ xem của mình ở chế độ Tối và Sáng.

00:26:01.000 --> 00:26:07.000
Tôi thậm chí có thể xem bố cục của mình theo mọi hướng giao diện, tất cả mà không cần thêm một bản xem trước bổ sung nào.

00:26:07.000 --> 00:26:10.000
Hãy phóng to phong cảnh.

00:26:10.000 --> 00:26:13.000
Có vẻ như giao diện người dùng của tôi không hoàn toàn phù hợp ở đây.

00:26:13.000 --> 00:26:17.000
Một vài điều khiển nằm ngoài màn hình và các biểu đồ có tỷ lệ khung hình khó xử.

00:26:17.000 --> 00:26:21.000
Hãy xem chúng ta đang mô tả bố cục này ở đâu.

00:26:21.000 --> 00:26:25.000
Những quan điểm này ở đây nằm trong một Vstack ngầm.

00:26:25.000 --> 00:26:31.000
Năm nay có một số API mới mạnh mẽ trong SwiftUI có thể tạo ra các bố cục linh hoạt hơn.

00:26:31.000 --> 00:26:40.000
Ở đây, tôi sẽ sử dụng ViewThatFits để chuyển đổi giữa ngăn xếp dọc và ngang, tùy thuộc vào không gian có sẵn.

00:26:40.000 --> 00:26:42.000
Điều đó có vẻ tốt hơn nhiều.

00:26:42.000 --> 00:26:46.000
Hãy kết nối cái này để chúng ta có thể điều hướng đến nó từ màn hình chính.

00:26:46.000 --> 00:26:51.000
Tôi đang sử dụng chế độ xem phân chia điều hướng mới của SwiftUI, điều này làm cho điều này thực sự dễ dàng.

00:26:51.000 --> 00:27:00.000
Chế độ xem phân chia có một thanh bên để theo dõi lựa chọn và NavigationStack thay đổi nội dung của nó khi lựa chọn thanh bên thay đổi.

00:27:00.000 --> 00:27:05.000
Tôi sẽ nhảy vào thanh bên và thêm liên kết điều hướng cho chế độ xem Donut Champion của chúng tôi.

00:27:05.000 --> 00:27:08.000
Và sau đó, chúng ta có thể thử nó trong bản xem trước tương tác.

00:27:08.000 --> 00:27:15.000
Tôi muốn xem chế độ xem phân chia của mình ở chế độ ngang, vì vậy tôi sẽ sử dụng cài đặt khung vẽ mới để xoay bản xem trước trực tiếp.

00:27:15.000 --> 00:27:17.000
Hoạt động tốt.

00:27:17.000 --> 00:27:25.000
Tôi hài lòng với giao thức này trên iPad, nhưng bây giờ tôi rất muốn mang nó lên Mac và chỉ cần một vài cú nhấp chuột để làm điều đó.

00:27:25.000 --> 00:27:31.000
Tôi muốn tận dụng tối đa Mac SDK, vì vậy tôi sẽ sử dụng bản địa.

00:27:31.000 --> 00:27:39.000
Chỉ với một mục tiêu duy nhất hỗ trợ ứng dụng của tôi, tôi có thể chia sẻ gần như tất cả mã của mình và SwiftUI làm cho ứng dụng của tôi trông tuyệt vời trên mỗi nền tảng.

00:27:39.000 --> 00:27:42.000
Tôi cũng có thể dễ dàng thêm các tính năng dành riêng cho thiết bị.

00:27:42.000 --> 00:27:45.000
Đối với ứng dụng Mac của tôi, hãy thêm một thanh menu bổ sung.

00:27:45.000 --> 00:27:52.000
Đó là những biểu tượng nhỏ hữu ích ở góc trên bên phải màn hình của bạn, như Wi-Fi và Spotlight.

00:27:52.000 --> 00:27:55.000
SwiftUI có một API mới cho việc này.

00:27:55.000 --> 00:27:57.000
Tôi chỉ thêm nó vào phần thân ứng dụng của mình.

00:27:57.000 --> 00:28:02.000
Bây giờ hãy chạy cái này cho Mac.

00:28:02.000 --> 00:28:06.000
Chế độ xem Donut Champion của chúng tôi trông tuyệt vời trên Mac ngay khi ra khỏi hộp.

00:28:06.000 --> 00:28:08.000
Và đây là thanh menu bổ sung đó.

00:28:08.000 --> 00:28:10.000
Điều đó sẽ rất hữu ích.

00:28:10.000 --> 00:28:15.000
Và đó là một cái nhìn nhanh về Biểu đồ Swift và chỉ một vài cải tiến đến với SwiftUI và Xcode.

00:28:15.000 --> 00:28:17.000
Và bây giờ trở lại với Josh.

00:28:17.000 --> 00:28:23.000
Josh: Chúng tôi đang tiếp tục mở rộng việc áp dụng SwiftUI trên các ứng dụng và giao diện hệ thống của chúng tôi.

00:28:23.000 --> 00:28:29.000
Ví dụ, các tiện ích Màn hình Khóa mới của iOS được thiết kế từ đầu bằng SwiftUI.

00:28:29.000 --> 00:28:32.000
Ứng dụng Font Book mới đã được viết lại hoàn toàn với nó.

00:28:32.000 --> 00:28:38.000
Và thiết kế hiện đại, hướng tới tương lai của ứng dụng Cài đặt Hệ thống macOS mới được xây dựng bằng cách sử dụng nó.

00:28:38.000 --> 00:28:45.000
Swift và SwiftUI được thiết kế ngay từ đầu để cung cấp một ngôn ngữ mẹ đẻ và API duy nhất cho tất cả các nền tảng của Apple.

00:28:45.000 --> 00:28:48.000
Bạn có thể học chúng một lần và áp dụng chúng ở mọi nơi.

00:28:48.000 --> 00:29:11.000
Cho dù tầm nhìn của bạn là cung cấp quyền truy cập nhanh vào thông tin trong nháy mắt trên Apple Watch, các công cụ năng suất trên MacBook Pro và iPad, trải nghiệm mới trên iPhone hay một cách mới để thư giãn với Apple TV, Swift, SwiftUI và Xcode cung cấp nền tảng phát triển tích hợp thế hệ tiếp theo để giúp bạn xây dựng ứng dụng cho tất cả các

00:29:11.000 --> 00:29:16.000
Bây giờ, nếu bạn có một ứng dụng hiện có, thật dễ dàng để áp dụng các công nghệ mới này từng bước.

00:29:16.000 --> 00:29:23.000
Và nếu bạn chưa quen với nền tảng của chúng tôi hoặc nếu bạn đang bắt đầu một ứng dụng hoàn toàn mới, cách tốt nhất để xây dựng một ứng dụng là với Swift và SwiftUI.

00:29:23.000 --> 00:29:26.000
Bây giờ, tất nhiên đó mới chỉ là sự khởi đầu.

00:29:26.000 --> 00:29:32.000
Chúng tôi cũng đang tiếp tục phát triển trải nghiệm người dùng trên các nền tảng của mình để cung cấp cho bạn nhiều cách hơn để thu hút người dùng của mình.

00:29:32.000 --> 00:29:36.000
Và để nói với bạn nhiều hơn, đây là Sebastien.

00:29:36.000 --> 00:29:41.000
Sebastien Marineau-Mes: Bây giờ, các ứng dụng là về việc biến ý tưởng, mã và API thành trải nghiệm người dùng.

00:29:41.000 --> 00:29:45.000
Và các ứng dụng tốt nhất là những ứng dụng có thể gặp gỡ người dùng ở nơi họ đang ở thời điểm hiện tại.

00:29:45.000 --> 00:29:54.000
Chúng tôi đã tạo ra các cách để giúp bạn đưa trải nghiệm người dùng vượt ra ngoài các ứng dụng của mình và xây dựng nó vào trải nghiệm hệ thống trên các thiết bị Apple.

00:29:54.000 --> 00:29:59.000
Hành trình này bắt đầu với các tiện ích mở rộng, tích hợp với Bảng chia sẻ và bàn phím tùy chỉnh.

00:29:59.000 --> 00:30:06.000
Và gần đây hơn, nó bao gồm khả năng ứng dụng của bạn hiển thị thông tin chính trên Màn hình chính bằng cách sử dụng các tiện ích.

00:30:06.000 --> 00:30:15.000
Bây giờ, năm nay, có một số cách mới để ứng dụng của bạn tích hợp với trải nghiệm hệ thống trên các nền tảng của chúng tôi và nó thực sự bắt đầu với Màn hình khóa, có bản cập nhật lớn nhất từ trước đến nay.

00:30:15.000 --> 00:30:23.000
Nó tưởng tượng lại màn hình khóa trông như thế nào và nó hoạt động như thế nào, và nó mang đến cho ý tưởng và ứng dụng của bạn một nơi khác để thu hút người dùng.

00:30:23.000 --> 00:30:34.000
Và để nói với bạn nhiều hơn, đây là Robert.

00:30:34.000 --> 00:30:40.000
Robert Dhaene: Khi tưởng tượng lại Màn hình khóa, chúng tôi bắt đầu làm cho nó trở nên cá nhân và đẹp hơn, đồng thời cải thiện tiện ích hàng ngày.

00:30:40.000 --> 00:30:46.000
Là một phần của điều này, chúng tôi biết rằng chúng tôi cần mang sức mạnh của các vật dụng đến Màn hình khóa hoàn toàn mới.

00:30:46.000 --> 00:30:53.000
Widgets là một cách đáng kinh ngạc để nâng cao thông tin chính từ ứng dụng của bạn và hiển thị nó ở nơi mọi người có thể xem nhanh.

00:30:53.000 --> 00:30:59.000
Chúng giúp dễ dàng truy cập thông tin phong phú, kịp thời ngay từ Màn hình chính.

00:30:59.000 --> 00:31:07.000
Màn hình khóa là thứ đầu tiên bạn nhìn thấy mỗi khi nhận iPhone và nó luôn là nơi để kiểm tra ngày giờ và tìm kiếm các tin nhắn chính.

00:31:07.000 --> 00:31:14.000
Khi nghĩ về định dạng tốt nhất để hiển thị nhiều thông tin hơn ở đây, chúng tôi không cần phải tìm kiếm cảm hứng thiết kế xa.

00:31:14.000 --> 00:31:23.000
Các biến chứng trên Apple Watch đã cung cấp thông tin có thể xem qua, phù hợp và cập nhật, được trình bày đẹp mắt ngay khi người dùng cần.

00:31:23.000 --> 00:31:28.000
Ngôn ngữ thiết kế tự nhiên mở rộng sang iOS và cảm thấy như ở nhà trên Màn hình khóa mới.

00:31:28.000 --> 00:31:39.000
Vì vậy, sử dụng WidgetKit, chúng tôi đã đưa một số thiết kế tương tự vào các tiện ích trên Màn hình khóa, bao gồm Circular, hiển thị một hình ảnh nhỏ, thước đo hoặc một vài ký tự văn bản.

00:31:39.000 --> 00:31:45.000
Các vật dụng hình tròn rất tuyệt vời để hiển thị xem bạn đã hoạt động đủ hôm nay hay bạn cần ra ngoài chạy bộ.

00:31:45.000 --> 00:31:51.000
Hình chữ nhật cung cấp một khung vẽ lớn để hiển thị những thứ như dự báo thời tiết sắp tới.

00:31:51.000 --> 00:32:03.000
Inline cung cấp một cách mạnh mẽ để truyền tải thông tin với một lượng nhỏ văn bản và Biểu tượng SF phía trên đồng hồ trên iPhone, bên cạnh chuỗi ngày do hệ thống cung cấp, chẳng hạn như Thứ Hai ngày 6.

00:32:03.000 --> 00:32:13.000
Và nhân tiện, tất cả các tiện ích này hoạt động trên cả iOS và watchOS vì bắt đầu từ watchOS 9, các biến chứng cũng được cung cấp bởi WidgetKit.

00:32:13.000 --> 00:32:20.000
Lần đầu tiên, bạn có thể sử dụng cùng một mã để tạo dữ liệu có thể xem qua trên cả hai nền tảng.

00:32:20.000 --> 00:32:29.000
WidgetKit tự động quản lý sự khác biệt của nền tảng cho bạn, sử dụng phông chữ hệ thống thích hợp theo mặc định và tô màu các tiện ích trên Màn hình khóa để dễ đọc tối đa.

00:32:29.000 --> 00:32:39.000
Để chỉ cho bạn cách sử dụng WidgetKit để tạo các tiện ích cho Màn hình khóa trên iPhone và các biến chứng trên Apple Watch bằng cùng một mã, tôi sẽ giao nó cho Michael.

00:32:39.000 --> 00:32:44.000
Michael Kent: Xây dựng các tiện ích trên Màn hình khóa iPhone và các biến chứng trên Apple Watch thực sự dễ dàng với WidgetKit.

00:32:44.000 --> 00:32:50.000
Nếu bạn đã tạo các tiện ích Màn hình chính, bạn đã ở gần hết chặng đường, bao gồm cả cách dữ liệu và dòng thời gian của bạn được cập nhật.

00:32:50.000 --> 00:32:57.000
Trong ứng dụng Food Truck của chúng tôi, chúng tôi đã có một tiện ích systemSmall mà người dùng có thể thêm vào Màn hình chính của họ để xem họ đã điền bao nhiêu đơn đặt hàng trong hạn ngạch của mình ngày hôm nay.

00:32:57.000 --> 00:33:01.000
Loại thông tin này sẽ rất tuyệt khi hiển thị trên Màn hình khóa hoặc trong một biến chứng trên mặt đồng hồ.

00:33:01.000 --> 00:33:05.000
Hãy bắt đầu bằng cách xây dựng gia đình Circular.

00:33:05.000 --> 00:33:09.000
Trước tiên chúng tôi sẽ tuyên bố hỗ trợ cho nó trong mảng Gia đình được hỗ trợ của chúng tôi.

00:33:09.000 --> 00:33:12.000
Bạn sẽ nhận thấy rằng chúng tôi đang sử dụng một số điều kiện nền tảng ở đây.

00:33:12.000 --> 00:33:20.000
Điều này là do chúng tôi muốn tiện ích này tiếp tục hỗ trợ macOS và iOS với systemSmall, nhưng gia đình đó không khả dụng trên watchOS.

00:33:20.000 --> 00:33:24.000
Sau đó, chúng tôi sẽ thêm một trường hợp để xác định chế độ xem của nó.

00:33:24.000 --> 00:33:31.000
Hãy sử dụng thước đo hiển thị số lượng đơn đặt hàng hiện tại từ 0 đến hạn ngạch hàng ngày để người dùng có thể nhanh chóng xem nhanh tiến trình của họ.

00:33:31.000 --> 00:33:37.000
Chúng tôi sẽ hiển thị số lượng đơn hàng hiện tại dưới dạng văn bản ở giữa, cùng với biểu tượng bánh rán. Ở đó.

00:33:37.000 --> 00:33:40.000
Hãy cùng xem điều này trong Bản xem trước Xcode ngay bây giờ.

00:33:40.000 --> 00:33:44.000
Tuyệt vời! Cảm giác đó ngay tại nhà trên Màn hình khóa.

00:33:44.000 --> 00:33:52.000
Để hiển thị chi tiết hơn một chút trong nháy mắt, chúng tôi cũng có thể thêm hỗ trợ cho gia đình hình chữ nhật.

00:33:52.000 --> 00:33:59.000
Đối với chế độ xem này, chúng tôi sẽ tạo VStack, bắt đầu bằng tiêu đề cho dữ liệu được hiển thị và cùng biểu tượng bánh rán đó.

00:33:59.000 --> 00:34:04.000
Bằng cách sử dụng kiểu Tiêu đề cho phông chữ, chúng ta sẽ có được một cách xử lý trông tuyệt vời trên cả hai nền tảng.

00:34:04.000 --> 00:34:07.000
Và chúng tôi sẽ đảm bảo rằng nó xuất hiện với công cụ sửa đổi widgetAccentable.

00:34:07.000 --> 00:34:18.000
Vì gia đình hình chữ nhật cho chúng tôi thêm một chút không gian, chúng tôi sẽ hiển thị một thước đo phân đoạn tùy chỉnh thú vị và hiển thị số lượng đơn đặt hàng hiện tại ngoài hạn ngạch hàng ngày cho nhãn của thước đo.

00:34:18.000 --> 00:34:22.000
Nhìn lại khung vẽ, chúng ta cũng có thể thấy tiện ích hình chữ nhật trong các bản xem trước.

00:34:22.000 --> 00:34:25.000
Tôi thực sự thích thước đo đó.

00:34:25.000 --> 00:34:32.000
Bây giờ chúng ta hãy xem tiện ích này sẽ xuất hiện như một biến chứng hình tròn trên mặt đồng hồ như thế nào.

00:34:32.000 --> 00:34:41.000
Chà, được rồi, mọi thứ đều ở đó, nhưng đối với các biến chứng, chúng ta cũng cần xem xét chế độ kết xuất đầy đủ màu sắc, đây là chế độ mặc định trong Bản xem trước Xcode.

00:34:41.000 --> 00:34:46.000
Hãy làm điều đó bằng cách thêm một tông màu vào mỗi đồng hồ đo của chúng tôi.

00:34:46.000 --> 00:34:51.000
Và một màu nền trước cho tiêu đề hình chữ nhật.

00:34:51.000 --> 00:35:05.000
Để có một chút pop đầy đủ màu sắc, chúng ta có thể kiểm tra chế độ kết xuất với thuộc tính môi trường để thay thế biểu tượng bánh rán bằng biểu tượng cảm xúc bánh rán trên cả chế độ xem hình tròn và hình chữ nhật.

00:35:05.000 --> 00:35:06.000
Điều đó trông thực sự tuyệt vời!

00:35:06.000 --> 00:35:12.000
Với giao diện người dùng biến thể mới trong bản xem trước, chúng tôi có thể thay đổi màu sắc mà chúng tôi đang xem trước mà không cần mã nào cả.

00:35:12.000 --> 00:35:15.000
Hoặc thậm chí nhìn vào một vài cái cùng một lúc.

00:35:15.000 --> 00:35:23.000
Và vì chúng tôi đã sử dụng khoảng cách mặc định, kiểu phông chữ hệ thống và thích nghi với chế độ kết xuất, các chế độ xem giống nhau nhìn ngay tại nhà trên cả Màn hình khóa và mặt đồng hồ.

00:35:23.000 --> 00:35:30.000
Thật dễ dàng để tạo một tiện ích trên Màn hình khóa hoàn toàn mới trong iOS 16 và một sự phức tạp tuyệt vời trong watchOS 9, tất cả đều có cùng một mã.

00:35:30.000 --> 00:35:34.000
Nhưng đây không phải là cách duy nhất chúng tôi mang sức mạnh của WidgetKit lên Màn hình khóa.

00:35:34.000 --> 00:35:36.000
Đây là Matt để cho bạn biết thêm.

00:35:36.000 --> 00:35:40.000
Matt Shepherd: Với WidgetKit, bạn có thể cung cấp cho mọi người quyền truy cập vào thông tin có thể xem được.

00:35:40.000 --> 00:35:46.000
Nhưng còn những khoảnh khắc khi họ cần cập nhật trực tiếp, thông tin gắn liền với một hoạt động hoặc một sự kiện mà họ quan tâm ngay bây giờ thì sao?

00:35:46.000 --> 00:35:51.000
Vì điều đó, chúng tôi đang làm việc trên một cái gì đó mới mà chúng tôi gọi là Hoạt động Trực tiếp.

00:35:51.000 --> 00:35:56.000
Các hoạt động trực tiếp giúp bạn dễ dàng cập nhật những điều đang diễn ra trong thời gian thực, ngay từ Màn hình khóa.

00:35:56.000 --> 00:36:06.000
Những thứ như điểm số mới nhất từ một trò chơi, tiến trình chia sẻ chuyến đi hoặc tập luyện, ngay trên Màn hình khóa và luôn được cập nhật.

00:36:06.000 --> 00:36:09.000
Cũng giống như với các tiện ích, bạn tạo Hoạt động Trực tiếp với WidgetKit.

00:36:09.000 --> 00:36:14.000
Sự khác biệt là, bạn cập nhật bản trình bày và trạng thái Hoạt động Trực tiếp của mình trong thời gian thực.

00:36:14.000 --> 00:36:19.000
Vì chúng được xây dựng bằng SwiftUI, bạn thậm chí có thể tạo hiệu ứng động cho các bản cập nhật của mình từ trạng thái này sang trạng thái khác.

00:36:19.000 --> 00:36:25.000
Những cập nhật này đảm bảo Hoạt động Trực tiếp của bạn có thông tin mới nhất khi người dùng chọn xem qua nó.

00:36:25.000 --> 00:36:30.000
Các hoạt động trực tiếp sẽ có sẵn bắt đầu từ bản cập nhật lên iOS 16 vào cuối năm nay.

00:36:30.000 --> 00:36:33.000
Vì vậy, đó là những cập nhật cho Màn hình khóa hoàn toàn mới.

00:36:33.000 --> 00:36:39.000
Chúng tôi nghĩ rằng chúng sẽ là một cách tuyệt vời để giúp bạn cung cấp cho mọi người nhiều thông tin hơn trong nháy mắt trong những khoảnh khắc họ cần nó nhất.

00:36:39.000 --> 00:36:42.000
Tiếp theo, hãy nói về một cách hoàn toàn mới để nâng cao trải nghiệm hợp tác.

00:36:42.000 --> 00:36:45.000
Để nói với bạn nhiều hơn, đây là Pierre.

00:36:45.000 --> 00:36:50.000
Pierre de Fillipis: Cộng tác là một phần quan trọng trong những gì mọi người làm trên iOS, iPadOS và macOS.

00:36:50.000 --> 00:36:58.000
Và điều đó phần lớn là do sự phong phú đáng kinh ngạc của các ứng dụng mà nhiều người trong số các bạn đã xây dựng, để hỗ trợ các nhóm đang cộng tác trên mọi khoảng cách.

00:36:58.000 --> 00:37:06.000
Có sự hợp tác cho công việc, như một lộ trình sản phẩm trong Airtable, và cũng có sự hợp tác để vui chơi, như tìm ngôi nhà mơ ước của bạn ở Redfin.

00:37:06.000 --> 00:37:11.000
Cho dù đó là cho công việc hay giải trí, sự hợp tác thường bắt đầu bằng một cuộc trò chuyện.

00:37:11.000 --> 00:37:18.000
Và với API cộng tác tin nhắn mới, bạn có thể đưa trải nghiệm cộng tác hiện có của ứng dụng của mình vào Tin nhắn và FaceTime.

00:37:18.000 --> 00:37:27.000
Khi người dùng chia sẻ liên kết đến nội dung trong ứng dụng của bạn, API giúp bạn dễ dàng đánh dấu liên kết đó là hợp tác, cho phép trải nghiệm liền mạch.

00:37:27.000 --> 00:37:34.000
Chúng tôi cung cấp số nhận dạng bạn cần để bạn có thể cấp quyền truy cập cho người nhận ngay lập tức khi họ nhấn vào liên kết để tham gia.

00:37:34.000 --> 00:37:37.000
Và tất nhiên, điều này hoạt động mà không ảnh hưởng đến quyền riêng tư.

00:37:37.000 --> 00:37:41.000
Danh tính tin nhắn và danh tính ứng dụng vẫn ở chế độ riêng tư và không được chia sẻ.

00:37:41.000 --> 00:37:47.000
Và phần tốt nhất là, bạn có thể làm điều này với các công nghệ hiện có mà ứng dụng của bạn rất có thể đã sử dụng.

00:37:47.000 --> 00:37:54.000
Với một đối tượng, người dùng của bạn có thể bắt đầu cộng tác theo hai cách thuận tiện mà họ đã quen thuộc.

00:37:54.000 --> 00:38:07.000
Một, Bảng chia sẻ, đã được cập nhật để đặt sự cộng tác ở phía trước và trung tâm, và hai, kéo và thả, nơi bạn có thể chia sẻ nội dung bạn muốn cộng tác bằng cách kéo trực tiếp vào cuộc trò chuyện Tin nhắn.

00:38:07.000 --> 00:38:14.000
Và một khi cuộc trò chuyện được bắt đầu, bạn thậm chí có thể đăng thông báo về cập nhật nội dung ngay trong cuộc trò chuyện Tin nhắn.

00:38:14.000 --> 00:38:21.000
Với một vài dòng mã, người dùng của bạn có thể quay lại cộng tác trong ứng dụng của bạn chỉ bằng một lần nhấn vào Tin nhắn.

00:38:21.000 --> 00:38:28.000
Và với cửa sổ bật lên cộng tác, người dùng của bạn có thể quay lại cuộc trò chuyện trong Tin nhắn hoặc FaceTime ngay từ ứng dụng của bạn.

00:38:28.000 --> 00:38:33.000
Vì vậy, với API cộng tác tin nhắn, ứng dụng của bạn thực sự được đan xen vào kết cấu của Tin nhắn và FaceTime.

00:38:33.000 --> 00:38:42.000
Chúng tôi quan tâm đến việc cung cấp cho người dùng của bạn các công cụ giao tiếp mạnh mẽ để bạn có thể tập trung vào các công cụ cộng tác mạnh mẽ mà bạn cung cấp trong ứng dụng của mình.

00:38:42.000 --> 00:38:54.000
Vì vậy, điều này sẽ tăng cấp độ cộng tác trên iOS, iPadOS và macOS, tạo ra trải nghiệm nhất quán bắt nguồn sâu sắc từ kết nối giữa những người cộng tác, cho dù là cho công việc hay giải trí.

00:38:54.000 --> 00:38:59.000
Tiếp theo là Ari, người sẽ cho bạn biết về một khuôn khổ mới được gọi là App Intents.

00:38:59.000 --> 00:39:09.000
Ari Weinstein: Tôi rất vui được nói với bạn về khung App Intents, giúp các tính năng của ứng dụng của bạn có sẵn cho hệ thống, để mọi người có thể sử dụng chúng tự động thông qua Siri và Phím tắt.

00:39:09.000 --> 00:39:11.000
Mọi người thích sử dụng Phím tắt với ứng dụng của họ.

00:39:11.000 --> 00:39:18.000
Họ để họ hoàn thành công việc thật nhanh, chỉ bằng cách hỏi Siri, hoặc bằng cách nhanh chóng nhấn vào một phím tắt trên Màn hình chính.

00:39:18.000 --> 00:39:25.000
Và thật tuyệt vời khi thấy cách mọi người phối lại khả năng của ứng dụng thành các phần chức năng hoàn toàn mới với các phím tắt tùy chỉnh.

00:39:25.000 --> 00:39:29.000
Ngày nay, mọi người phải thêm các phím tắt theo cách thủ công trước khi họ có thể sử dụng chúng.

00:39:29.000 --> 00:39:35.000
Chúng tôi đang làm điều này tự động trong iOS 16 với khung App Intents mới.

00:39:35.000 --> 00:39:46.000
App Intents hoạt động cùng với Phím tắt để tạo thành Phím tắt Ứng dụng, mọi người có thể sử dụng với Siri ngay lập tức mà không cần phải thiết lập bất cứ thứ gì trước, như, "Này, Siri, dọn dẹp nhà bếp bằng Roomba."

00:39:46.000 --> 00:39:48.000
Nhưng nó không chỉ là Siri.

00:39:48.000 --> 00:40:06.000
Các phím tắt ứng dụng cung cấp cho người dùng của bạn một hàng ghế đầu cho các tính năng của ứng dụng của bạn trên toàn hệ thống, như trong Spotlight, nơi bất cứ khi nào mọi người tìm kiếm ứng dụng của bạn, các phím tắt của bạn cũng hiển thị và các phím tắt của bạn sẽ được đề xuất ngay bên dưới đề xuất ứng dụng mà không cần áp dụng bất kỳ

00:40:06.000 --> 00:40:12.000
Các phím tắt của bạn cũng xuất hiện ngay lập tức trong ứng dụng Phím tắt, nơi mọi người có thể chạy chúng chỉ bằng một cú chạm.

00:40:12.000 --> 00:40:17.000
App Intents là bước tiếp theo cho khung SiriKit Intents mà chúng tôi đã giới thiệu trong iOS10.

00:40:17.000 --> 00:40:31.000
Nếu bạn áp dụng Intents để tích hợp với Widgets hoặc miền như phương tiện hoặc nhắn tin, bạn nên tiếp tục sử dụng khung SiriKit Intents, nhưng đối với các nhà phát triển xây dựng ý định tùy chỉnh cho Siri và Phím tắt, bạn nên tiếp tục và nâng cấp lên App Intents.

00:40:31.000 --> 00:40:38.000
Bạn có thể dễ dàng nâng cấp lên App Intents trong Xcode bằng cách nhấn nút Chuyển đổi trong tệp định nghĩa ý định của bạn.

00:40:38.000 --> 00:40:43.000
Xcode sẽ tạo mã nguồn App Intents tương đương, và sau đó bạn điền vào chỗ trống với mã xử lý ý định của mình.

00:40:43.000 --> 00:40:52.000
Khung App Intents thực sự dễ phát triển vì nó được thiết kế từ đầu cho Swift và nó yêu cầu ít mã hơn nhiều.

00:40:52.000 --> 00:41:00.000
Mã Swift mà bạn viết là nguồn duy nhất của sự thật, Không có tệp định nghĩa ý định riêng biệt hoặc tạo mã để giữ đồng bộ.

00:41:00.000 --> 00:41:02.000
Và mã rất dễ thêm vào dự án của bạn.

00:41:02.000 --> 00:41:05.000
Bạn không cần phải tìm hiểu lại cơ sở mã của mình.

00:41:05.000 --> 00:41:10.000
Ngay cả khi bạn có mã Objective-C, bạn có thể sử dụng nó với App Intents bằng cách gói nó bằng Swift.

00:41:10.000 --> 00:41:16.000
Ý định của ứng dụng đại diện cho điều mà mọi người có thể làm bên trong ứng dụng của bạn và nó có thể làm điều đó từ bên ngoài ứng dụng của bạn.

00:41:16.000 --> 00:41:21.000
Bạn có thể xác định một ý định và thêm một phím tắt ứng dụng chỉ trong một vài dòng mã.

00:41:21.000 --> 00:41:23.000
Hãy cùng nhau thử xem.

00:41:23.000 --> 00:41:32.000
Quay lại ứng dụng Food Truck, tôi có chế độ xem biểu đồ tuyệt vời này cho phép tôi xem năm chiếc bánh rán bán chạy nhất trong một khoảng thời gian nhất định, như hôm nay hoặc tuần này.

00:41:32.000 --> 00:41:41.000
Tôi muốn hiển thị điều này cho Siri và Phím tắt để mọi người kéo nó lên siêu nhanh, vì vậy trước tiên, trong Xcode, tôi sẽ chuyển đến một tệp Swift mới.

00:41:41.000 --> 00:41:45.000
Tôi sẽ nhập khung App Intents và SwiftUI.

00:41:45.000 --> 00:41:51.000
Sau đó, tôi xác định ý định bằng cách xác định một cấu trúc phù hợp với giao thức AppIntent.

00:41:51.000 --> 00:41:53.000
Tôi sẽ cho nó một tiêu đề.

00:41:53.000 --> 00:41:57.000
Và tôi sẽ thêm một tham số cho khung thời gian của các xu hướng để xem xét.

00:41:57.000 --> 00:42:01.000
Điều này sử dụng enum khung thời gian đã được xác định trong cơ sở mã của tôi.

00:42:01.000 --> 00:42:11.000
Tôi cần mở rộng nó để phù hợp với giao thức AppEnum để chúng ta có thể trích xuất các tên có thể đọc được của con người cho từng trường hợp enum, như "hôm nay" và "tuần này".

00:42:11.000 --> 00:42:15.000
Tiếp theo, về mục đích, tôi sẽ thực hiện phương pháp thực hiện.

00:42:15.000 --> 00:42:19.000
Ở đây, tôi trả về một kết quả bao gồm chế độ xem biểu đồ SwiftUI.

00:42:19.000 --> 00:42:22.000
Tôi cũng có thể bao gồm một cuộc đối thoại hoặc giá trị đầu ra.

00:42:22.000 --> 00:42:30.000
Tôi muốn mọi người có thể sử dụng ý định này một cách tự động mà không cần thiết lập, vì vậy tôi sẽ xác định một phím tắt ứng dụng.

00:42:30.000 --> 00:42:34.000
Điều này bao gồm cụm từ mà mọi người có thể nói với Siri để sử dụng ý định này.

00:42:34.000 --> 00:42:47.000
Cụm từ này phải bao gồm tên ứng dụng như một biến số và tôi đã bao gồm tham số khung thời gian để mọi người có thể nói "Xu hướng xe tải thực phẩm cho ngày hôm nay" hoặc "Xu hướng xe tải thực phẩm cho tuần này".

00:42:47.000 --> 00:42:50.000
Điều cuối cùng tôi cần làm là làm cho điều này có thể phát hiện được cho người dùng của tôi.

00:42:50.000 --> 00:43:03.000
Mọi người cần xem cụm từ này vào một lúc nào đó, để họ biết phải nói gì với Siri, vì vậy tôi sẽ chuyển sang tệp cho chế độ xem Top 5 Donuts mà chúng tôi đã xem cách đây một giây và tôi sẽ thêm mẹo Siri.

00:43:03.000 --> 00:43:07.000
Bây giờ tôi có thể xây dựng và chạy ứng dụng và chuyển sang điện thoại của mình.

00:43:07.000 --> 00:43:11.000
Hãy thử xem nào.

00:43:11.000 --> 00:43:19.000
Tôi có thể thấy phím tắt hiện xuất hiện trong ứng dụng Phím tắt, với các biến thể cho mỗi giá trị tham số và tôi có thể chạy một phím tắt chỉ bằng cách nhấn vào nó.

00:43:19.000 --> 00:43:26.000
Và tôi có thể chạy chúng từ Siri chỉ bằng cách nói cụm từ, "Xu hướng xe tải thực phẩm cho ngày hôm nay."

00:43:26.000 --> 00:43:32.000
Hoặc tôi có thể nói, "xu hướng xe tải thực phẩm cho tuần này."

00:43:32.000 --> 00:43:40.000
Khi mọi người ở chế độ xem Top Five của ứng dụng của tôi, họ sẽ thấy mẹo này mà chúng tôi đã thêm ở dưới cùng, vì vậy họ biết phải nói gì với Siri để yêu cầu tính năng này.

00:43:40.000 --> 00:43:48.000
Cuối cùng, mọi người có thể nhanh chóng truy cập những thứ này trong Spotlight khi họ tìm kiếm ứng dụng, như thế này.

00:43:48.000 --> 00:43:50.000
Nó cực kỳ hữu ích.

00:43:50.000 --> 00:43:58.000
App Intents sẽ giúp việc cung cấp chức năng ứng dụng của bạn dễ dàng hơn bao giờ hết trong suốt trải nghiệm hệ thống trên tất cả các nền tảng này.

00:43:58.000 --> 00:44:04.000
Tiếp theo, Ricky sẽ cho chúng tôi biết về một số cập nhật lớn cho các công nghệ xác thực.

00:44:04.000 --> 00:44:08.000
Ricky Mondello: Miễn là chúng ta có thể nhớ, chúng ta đã tạo và sử dụng mật khẩu.

00:44:08.000 --> 00:44:14.000
Nhưng mật khẩu có vấn đề nghiêm trọng, như lừa đảo, tái sử dụng trên các tài khoản và rò rỉ trang web.

00:44:14.000 --> 00:44:18.000
Tin tốt là cùng nhau chúng ta có thể giải quyết những vấn đề này.

00:44:18.000 --> 00:44:21.000
Và chúng ta có thể làm điều này hôm nay với Passkeys.

00:44:21.000 --> 00:44:27.000
Mật khẩu sẽ hợp lý hóa các luồng xác thực của bạn và giải quyết các vấn đề bảo mật hàng đầu bằng mật khẩu.

00:44:27.000 --> 00:44:30.000
Mật khẩu được thiết kế cực kỳ dễ sử dụng.

00:44:30.000 --> 00:44:37.000
Giao diện sử dụng giao diện người dùng kiểu Autofill quen thuộc và FaceID và TouchID để xác minh sinh trắc học.

00:44:37.000 --> 00:44:45.000
Những yếu tố này tạo ra sự chuyển đổi liền mạch khỏi mật khẩu, đồng thời mang lại sự gia tăng sâu sắc về bảo mật.

00:44:45.000 --> 00:44:48.000
Hãy kiểm tra Passkeys đang hoạt động.

00:44:48.000 --> 00:44:52.000
Khi thiết lập tài khoản bằng mật khẩu, tôi không cần tạo mật khẩu.

00:44:52.000 --> 00:44:57.000
Tôi sẽ nhập tên người dùng và lưu mật khẩu vào Chuỗi khóa iCloud của mình.

00:44:57.000 --> 00:45:02.000
Điều này sẽ đồng bộ hóa mật khẩu này một cách an toàn với tất cả các thiết bị Apple khác của tôi.

00:45:02.000 --> 00:45:06.000
Và nếu tôi đăng xuất, đăng nhập lại thật dễ dàng.

00:45:06.000 --> 00:45:09.000
Chỉ cần Face ID, và tôi tham gia.

00:45:09.000 --> 00:45:21.000
Bởi vì mật khẩu được xây dựng dựa trên các tiêu chuẩn công nghiệp mở mà các nền tảng đang áp dụng, tôi có thể sử dụng mật khẩu mà tôi vừa tạo trên iPhone của mình để đăng nhập vào trang web Food Truck trên PC của bạn tôi.

00:45:21.000 --> 00:45:39.000
Trên trang web, tôi sẽ nhập tên người dùng của mình, gửi và chọn tùy chọn đăng nhập bằng điện thoại, quét mã QR, để iPhone và PC kết nối an toàn và tôi đã đăng nhập.

00:45:39.000 --> 00:45:42.000
Trong Safari trên máy Mac của tôi, việc đăng nhập thậm chí còn dễ dàng hơn.

00:45:42.000 --> 00:45:49.000
Mật khẩu của tôi đã ở đây, nhờ vào Chuỗi khóa iCloud và tôi có thể đăng nhập trực tiếp từ trường tên người dùng của trang web.

00:45:49.000 --> 00:45:53.000
Thật dễ dàng để tích hợp mật khẩu vào các luồng đăng nhập hiện có.

00:45:53.000 --> 00:45:59.000
Ví dụ, trường tên người dùng của trang web này cho phép tôi đăng nhập bằng mật khẩu hoặc mật khẩu.

00:45:59.000 --> 00:46:05.000
Nếu tôi nhập tên người dùng cho tài khoản dựa trên mật khẩu, tôi có thể nhanh chóng đăng nhập.

00:46:05.000 --> 00:46:10.000
Với mật khẩu, thiết bị thực hiện công việc khó khăn và nó luôn an toàn.

00:46:10.000 --> 00:46:19.000
Khi tạo mật khẩu, thiết bị sẽ tạo ra một khóa duy nhất dành riêng cho trang web hoặc ứng dụng mà nó được tạo và bảo vệ nó đằng sau sinh trắc học.

00:46:19.000 --> 00:46:22.000
Không thể có một mật khẩu yếu.

00:46:22.000 --> 00:46:25.000
Nó không thể bị lãng quên, tái sử dụng hoặc đoán được.

00:46:25.000 --> 00:46:32.000
Mật mã dựa trên mật mã khóa công khai, điều này làm cho việc rò rỉ thông tin xác thực từ các máy chủ trở thành dĩ vãng.

00:46:32.000 --> 00:46:40.000
Thay vì lưu trữ mật khẩu muối, băm, có thể bị rò rỉ và bị bẻ khóa, máy chủ của bạn chỉ giữ một khóa công khai.

00:46:40.000 --> 00:46:45.000
Các khóa công khai được thiết kế để thực sự công khai và hoàn toàn không có giá trị đối với tin tặc.

00:46:45.000 --> 00:46:49.000
Điều này làm giảm đáng kể rủi ro của bạn với tư cách là chủ sở hữu trang web.

00:46:49.000 --> 00:46:59.000
Với mật khẩu - và điểm này rất lớn - lừa đảo thông tin xác thực như chúng ta biết ngày nay đã biến mất, loại bỏ lỗ hổng bảo mật số một mà người dùng phải đối mặt.

00:46:59.000 --> 00:47:08.000
Mật khẩu về bản chất được liên kết với trang web hoặc ứng dụng mà chúng được thiết lập, vì vậy người dùng không bao giờ có thể bị lừa sử dụng mật khẩu của họ trên trang web sai.

00:47:08.000 --> 00:47:18.000
Và không giống như mật khẩu, không thể nhập hoặc sao chép mật khẩu vào một trang web giả mạo thuyết phục, hoặc thậm chí đưa bất cứ thứ gì cho ai đó đang nhìn qua vai bạn.

00:47:18.000 --> 00:47:23.000
Khi bạn kết hợp tất cả lại với nhau, những gì chúng ta đang nói ở đây là một kỷ nguyên mới của bảo mật tài khoản.

00:47:23.000 --> 00:47:27.000
Mang mật khẩu vào ứng dụng và trang web của bạn chỉ mất vài bước.

00:47:27.000 --> 00:47:33.000
Đầu tiên, bạn sẽ dạy phụ trợ tài khoản của mình lưu trữ các khóa công khai và đưa ra các thách thức xác thực.

00:47:33.000 --> 00:47:42.000
Sau đó, trên trang web và trong ứng dụng của bạn, bạn sẽ cung cấp mật khẩu cho người dùng và áp dụng API để tạo mật khẩu mới và đăng nhập bằng nó.

00:47:42.000 --> 00:47:53.000
Mật khẩu dựa trên tiêu chuẩn Xác thực Web, hoặc WebAuthn, đây là một nỗ lực hợp tác trong toàn ngành từ cả nhà cung cấp nền tảng và chủ sở hữu dịch vụ.

00:47:53.000 --> 00:47:59.000
Bản thân tiêu chuẩn đã trưởng thành và được ghi chép đầy đủ, và các chốt mật khẩu vừa vặn với nó như một chiếc găng tay.

00:47:59.000 --> 00:48:02.000
Tất cả những điều này đã sẵn sàng để bạn xây dựng ngay bây giờ.

00:48:02.000 --> 00:48:11.000
Bảo mật thế hệ tiếp theo, trải nghiệm người dùng liền mạch và thiết kế hoạt động đẹp mắt cùng với mật khẩu trong quá trình chuyển đổi.

00:48:11.000 --> 00:48:12.000
Trở lại với bạn, Sebastien.

00:48:12.000 --> 00:48:19.000
Sebastien: Bạn vừa thấy một vài cách mới nhất mà bạn có thể tích hợp các ứng dụng của mình với trải nghiệm hệ thống trên tất cả các nền tảng của chúng tôi.

00:48:19.000 --> 00:48:30.000
Và ngoài những điểm tích hợp đó, có rất nhiều API và khuôn khổ mới trên tất cả các nền tảng của chúng tôi mở ra nhiều khả năng hơn cho bạn và ứng dụng của bạn trong năm nay.

00:48:30.000 --> 00:48:35.000
Và tôi muốn hướng dẫn bạn một vài lần trước khi đi sâu vào một số người khác chi tiết hơn.

00:48:35.000 --> 00:48:38.000
Hãy bắt đầu với iPadOS.

00:48:38.000 --> 00:48:46.000
Với iPadOS 16, bạn sẽ có thể tạo ra các ứng dụng iPad mạnh mẽ nhất từ trước đến nay, với trải nghiệm nhất quán, giống như máy tính để bàn.

00:48:46.000 --> 00:49:01.000
Có trải nghiệm tìm và thay thế liền mạch cho chế độ xem văn bản giao diện người dùng mà ứng dụng của bạn tự động nhận được, cũng như cập nhật thanh điều hướng, thanh công cụ, menu tài liệu, giúp người dùng của bạn dễ dàng quản lý tài liệu và tùy chỉnh trải nghiệm của họ.

00:49:01.000 --> 00:49:11.000
Để kích hoạt các ứng dụng iPad mạnh mẽ hơn nữa với phần cứng được kết nối, DriverKit đến với iPad, giúp mở khóa sức mạnh đáng kinh ngạc của chip M1.

00:49:11.000 --> 00:49:22.000
Đó là cùng một API có sẵn trên Mac ngày nay, cho phép bạn dễ dàng cung cấp hỗ trợ cho các thiết bị USB, âm thanh và PCI của mình cho một đối tượng thậm chí còn lớn hơn.

00:49:22.000 --> 00:49:28.000
Hiện tại, watchOS đang tạo ra những cơ hội mới cho các ứng dụng thông qua việc tích hợp sâu hơn với các dịch vụ hệ thống.

00:49:28.000 --> 00:49:42.000
Khung CallKit trong watchOS 9 bao gồm chế độ nền IP Voiceover mới cho phép các ứng dụng thực hiện cuộc gọi thoại trực tiếp từ Apple Watch, với trải nghiệm người dùng quen thuộc giống như âm thanh FaceTime và cuộc gọi điện thoại.

00:49:42.000 --> 00:49:51.000
Và các thiết bị y tế được kết nối Bluetooth nhận được kết nối và phân phối dữ liệu mạnh mẽ hơn, cho phép cảnh báo kịp thời khi phát hiện tình trạng nguy kịch.

00:49:51.000 --> 00:50:02.000
Giờ đây, tvOS 16 cung cấp cho bạn những cách mới để tạo trải nghiệm kết nối giữa các ứng dụng của bạn trên Apple TV và các ứng dụng iPhone, iPad hoặc Apple Watch trên các thiết bị gần đó.

00:50:02.000 --> 00:50:16.000
Vì vậy, một bài tập có thể sử dụng dữ liệu chuyển động từ Apple Watch hoặc bạn có thể sử dụng iPhone hoặc iPad làm bộ điều khiển tùy chỉnh cho các trò chơi theo lượt của mình và tvOS quản lý việc khám phá và kết nối thiết bị cho bạn, vì vậy ứng dụng của bạn thậm chí không cần phải chạy trên thiết bị khác.

00:50:16.000 --> 00:50:23.000
Trên thực tế, nếu ứng dụng của bạn chưa được cài đặt, người dùng sẽ tự động được nhắc tải xuống ngay từ App Store.

00:50:23.000 --> 00:50:27.000
Bây giờ, đối với Điện thoại và iPad, có những công cụ mới cho các nhà quảng cáo.

00:50:27.000 --> 00:50:34.000
Chúng tôi biết rằng quảng cáo hiệu quả rất quan trọng đối với nhiều doanh nghiệp của bạn, đó là lý do tại sao chúng tôi tạo ra SKAdNetwork.

00:50:34.000 --> 00:50:45.000
Đó là một API giúp các mạng quảng cáo và nhà quảng cáo đo lường hiệu suất của các chiến dịch mà không cần theo dõi người dùng và chúng tôi rất vui khi thấy nhiều mạng quảng cáo của bên thứ ba áp dụng nó.

00:50:45.000 --> 00:50:59.000
Bây giờ, chúng tôi đã nghe phản hồi từ các mạng quảng cáo và nhà phát triển, và năm nay, chúng tôi đã thực hiện một số cải tiến cho SKAdNetwork phản ánh một số yêu cầu lớn nhất và cung cấp cho bạn sự linh hoạt hơn đáng kể, tất cả mà không ảnh hưởng đến quyền riêng tư của người dùng.

00:50:59.000 --> 00:51:07.000
Giờ đây, trên iPhone và iPad, có những tính năng thú vị mới sử dụng tính năng quét AR và LiDAR với ScanKit và RoomPlan.

00:51:07.000 --> 00:51:13.000
Các API này cho phép các ứng dụng của bạn tạo ra các mô hình phòng tham số 3D phong phú ở định dạng USD và USDZ.

00:51:13.000 --> 00:51:29.000
Vì vậy, bạn có thể tạo ra nhiều quy trình làm việc và trải nghiệm khác nhau, từ kiến trúc và thiết kế, đến bán lẻ và khách sạn, và các mô hình bao gồm phân loại đồ nội thất cho các danh mục như ghế sofa, tủ, TV, và vâng, thậm chí cả bồn rửa nhà bếp.

00:51:29.000 --> 00:51:39.000
Bây giờ, năm ngoái, chúng tôi đã giới thiệu Focus cho iPhone, iPad, Mac và Apple Watch, và cùng với nó, các cách để ứng dụng của bạn quản lý thông báo dựa trên Focus của người dùng.

00:51:39.000 --> 00:51:43.000
Và năm nay, Focus tiến xa hơn với các bộ lọc Focus.

00:51:43.000 --> 00:51:50.000
Chúng được xây dựng dựa trên Ý định ứng dụng và bộ lọc Tiêu điểm cho phép bạn điều chỉnh nội dung ứng dụng của mình dựa trên trọng tâm hiện tại của người dùng.

00:51:50.000 --> 00:51:58.000
Vì vậy, ví dụ, một ứng dụng có thể tạo bộ lọc Focus để chỉ hiển thị các tài khoản công việc khi người dùng ở trong Work Focus của họ.

00:51:58.000 --> 00:52:01.000
Và những ví dụ đó thực sự chỉ làm trầy xước bề mặt.

00:52:01.000 --> 00:52:11.000
Trên diện rộng ở mọi cấp độ, có các công cụ và API mới với sức mạnh mà bạn cần để đưa ứng dụng của mình đi xa hơn bao giờ hết và tạo ra các ứng dụng và trải nghiệm hoàn toàn mới.

00:52:11.000 --> 00:52:18.000
Vì vậy, tiếp theo, chúng ta hãy đi sâu hơn một chút bắt đầu với Metal, một công nghệ thực sự đưa mọi thứ lên một tầm cao mới.

00:52:18.000 --> 00:52:21.000
Và để nói với bạn nhiều hơn, chúng ta hãy đến với Sarah.

00:52:21.000 --> 00:52:29.000
♪ ♪

00:52:29.000 --> 00:52:36.000
Sarah Clawson: Metal là API đồ họa và tính toán mạnh mẽ giúp bạn tạo ra các trò chơi tuyệt vời và các ứng dụng chuyên nghiệp cho nền tảng Apple.

00:52:36.000 --> 00:52:46.000
Metal giúp bạn dễ dàng tận dụng các GPU đột phá của Apple và hệ thống bộ nhớ thống nhất hiện đang trải rộng trên các dòng sản phẩm iPhone, iPad và Mac mới nhất được vận chuyển bằng silicon của Apple.

00:52:46.000 --> 00:52:58.000
Và năm nay, chúng tôi sẽ giới thiệu Metal 3, với các tính năng mới mạnh mẽ giúp bạn hiển thị đồ họa nhập vai với tốc độ khung hình cao hơn và cho phép các cấp độ hiệu suất tính toán mới.

00:52:58.000 --> 00:53:07.000
Ví dụ, bạn sẽ nhận được mức tăng hiệu suất lớn cho khung học máy, PyTorch, hiện đang sử dụng phụ trợ Metal mới để cho phép đào tạo ML với GPU.

00:53:07.000 --> 00:53:17.000
Và lĩnh vực trọng tâm lớn nhất là chơi game, bắt đầu với việc tải trò chơi, một yếu tố quan trọng đối với trải nghiệm chơi game có thể ảnh hưởng đến thời gian khởi chạy và tải các cấp độ mới.

00:53:17.000 --> 00:53:26.000
Các trò chơi hiện đại mang lại trải nghiệm chơi game phong phú bằng cách cung cấp tài sản chất lượng cao và việc tải các tài sản này nhanh chóng từ bộ nhớ đến GPU có thể là một thách thức.

00:53:26.000 --> 00:53:37.000
Thông thường, các trò chơi sẽ ẩn tải tài sản phía sau màn hình tải và một kỹ thuật để khởi chạy trò chơi nhanh hơn là tải và vẽ phiên bản chất lượng thấp hơn cho đến khi có hình ảnh chất lượng cao.

00:53:37.000 --> 00:53:43.000
Đây không phải là một trải nghiệm chơi game lý tưởng vì người dùng nhìn thấy đồ họa chất lượng thấp hơn lâu hơn.

00:53:43.000 --> 00:54:01.000
Metal 3 giới thiệu khả năng tải tài nguyên nhanh với API Metal IO tận dụng kiến trúc bộ nhớ thống nhất của Apple GPU để giảm thiểu chi phí tải và đảm bảo rằng bộ lưu trữ SSD tốc độ cao đi kèm với mọi máy Mac silicon của Apple có đủ yêu cầu trong hàng đợi để tối đa hóa thông lượng.

00:54:01.000 --> 00:54:09.000
API mới này cung cấp hiệu suất nhanh hơn và nhất quán hơn để dành nhiều thời gian hơn để vẽ với chất lượng lý tưởng.

00:54:09.000 --> 00:54:15.000
Ngoài việc di chuyển tài nguyên từ bộ nhớ sang bộ nhớ, tải trò chơi cũng là về việc biên dịch đổ bóng.

00:54:15.000 --> 00:54:24.000
Shaders luôn cần được biên dịch cho cấu hình phần cứng độc đáo của người dùng và với nhiều hoán vị phần cứng PC, điều này thường phải được thực hiện trong thời gian chạy.

00:54:24.000 --> 00:54:31.000
Việc biên soạn trong trò chơi này có thể ảnh hưởng đến trải nghiệm của người chơi gây ra các khung hình bị rớt, tốc độ khung hình chậm hơn và tải lâu hơn.

00:54:31.000 --> 00:54:37.000
Ngược lại, Apple silicon và Metal 3 được thiết kế cùng nhau để hỗ trợ tất cả các thiết bị của Apple.

00:54:37.000 --> 00:54:49.000
Và bây giờ, với việc biên dịch đổ bóng ngoại tuyến, bạn có thể tạo các tệp nhị phân đổ bóng GPU tại thời điểm xây dựng dự án, cho phép bạn loại bỏ việc biên dịch đổ bóng trong trò chơi để giảm thời gian tải và cải thiện hiệu suất kết xuất.

00:54:49.000 --> 00:55:01.000
Một khía cạnh quan trọng khác của trò chơi là cung cấp nội dung phong phú, chi tiết và một cách để tăng độ trung thực trực quan của đồ họa trò chơi của bạn là tạo ra các mắt lưới hình học phức tạp hơn nhiều.

00:55:01.000 --> 00:55:08.000
Theo truyền thống, điều này được thực hiện với một đường chuyền tính toán sẽ đánh giá bề mặt và tạo ra hình học được sử dụng trong một đường chuyền kết xuất sau này.

00:55:08.000 --> 00:55:13.000
Thách thức là điều này có thể gây ra độ trễ và chiếm một lượng bộ nhớ không thể đoán trước.

00:55:13.000 --> 00:55:22.000
Metal 3 giới thiệu một Mesh Shading API mới, cung cấp cho bạn quyền kiểm soát chính xác đối với một đường ống xử lý hình học được tối ưu hóa từ một lần kết xuất duy nhất.

00:55:22.000 --> 00:55:33.000
Bộ đổ bóng đối tượng quyết định tạo ra bao nhiêu mắt lưới và bộ đổ bóng lưới tạo ra hình học thực tế được gửi trực tiếp đến bộ định giá, tránh bị ngắt đến bộ nhớ thiết bị và tăng hiệu suất.

00:55:33.000 --> 00:55:43.000
Các game thủ cũng muốn xem những hình ảnh tuyệt đẹp này ở tốc độ khung hình cao nhất có thể, nhưng việc hiển thị đồ họa tiên tiến ở độ phân giải cực cao có thể tốn hàng mili giây quý giá.

00:55:43.000 --> 00:55:47.000
Tăng quy mô MetalFX giúp bạn hiển thị đồ họa nhập vai trong thời gian ngắn hơn trên mỗi khung hình.

00:55:47.000 --> 00:55:49.000
Đây là cách nó hoạt động.

00:55:49.000 --> 00:55:56.000
Trước đây, bạn sẽ hiển thị toàn bộ khung hình của mình ở độ phân giải gốc, nhưng thời gian kết xuất GPU có thể không đạt đến thời gian khung hình mục tiêu.

00:55:56.000 --> 00:56:07.000
Bây giờ, bạn có thể hiển thị cùng một cảnh phức tạp ở độ phân giải thấp hơn để đáp ứng thời gian khung mục tiêu và sử dụng khung MetalFX để thực hiện khử răng cưa thời gian và nâng cấp lên độ phân giải mục tiêu.

00:56:07.000 --> 00:56:13.000
Với các tính năng được tối ưu hóa của Apple silicon và Metal 3, chơi game chưa bao giờ đẹp đến thế trên Mac.

00:56:13.000 --> 00:56:15.000
Và các nhà phát triển đồng ý.

00:56:15.000 --> 00:56:23.000
Các studio trò chơi hàng đầu có kế hoạch đưa tựa game của họ lên Mac, như Grid Legends, tận dụng Apple silicon để giúp bạn đạt được tốc độ tối đa.

00:56:23.000 --> 00:56:31.000
Hoặc Resident Evil Village, sử dụng các tính năng như nâng cấp MetalFX để cung cấp những cảnh đẹp đến ám ảnh ở độ phân giải cao nhất.

00:56:31.000 --> 00:56:37.000
Và No Man's Sky, tận dụng Metal 3 để khám phá thế giới phong phú, mở rộng trên cả Mac và iPad.

00:56:37.000 --> 00:56:44.000
Metal 3 thật đáng kinh ngạc, với các tính năng để tăng hiệu suất ứng dụng của bạn và cung cấp trải nghiệm chơi game tuyệt vời.

00:56:44.000 --> 00:56:49.000
Bây giờ để cho chúng tôi biết thêm về hướng MapKit đang hướng tới, đây là Kathy.

00:56:49.000 --> 00:57:00.000
Kathy Lin: Cho dù bạn đang điều hướng đến một nhà hàng yêu thích, lên kế hoạch cho kỳ nghỉ tiếp theo hay chỉ kiểm tra xem xe bán đồ ăn yêu thích của bạn đậu ở đâu trên bản đồ, chúng tôi dựa vào thiết bị của mình hơn bao giờ hết để giúp chúng tôi khám phá thế giới xung quanh.

00:57:00.000 --> 00:57:11.000
MapKit là cách tốt nhất để giúp người dùng khám phá và điều hướng thế giới với các dịch vụ định vị và lập bản đồ phong phú và linh hoạt, được cung cấp bởi Apple Maps và có sẵn miễn phí cho các nhà phát triển.

00:57:11.000 --> 00:57:21.000
Với MapKit, bạn có thể hiển thị hình ảnh bản đồ hoặc vệ tinh trong ứng dụng của mình, tìm và gọi các điểm quan tâm, thêm chú thích và lớp phủ, nhận chỉ đường và hơn thế nữa.

00:57:21.000 --> 00:57:26.000
MapKit được cung cấp bởi bản đồ hoàn toàn mới của chúng tôi, được xây dựng từ đầu bởi Apple.

00:57:26.000 --> 00:57:32.000
Nó cung cấp chi tiết và độ chính xác được cải thiện, đồng thời có thể mang lại các dịch vụ lập bản đồ và định vị hữu ích cho ứng dụng của bạn.

00:57:32.000 --> 00:57:42.000
Với iOS 16, chúng tôi đang xây dựng trên bản đồ này để giới thiệu bản cập nhật lớn nhất từ trước đến nay cho MapKit, bắt đầu bằng việc cung cấp Trải nghiệm Thành phố 3D cho tất cả các nhà phát triển.

00:57:42.000 --> 00:57:54.000
Người dùng ứng dụng của bạn sẽ có thể xem các chi tiết đáng kinh ngạc, như độ cao 3D, làn đường rẽ, lối băng qua đường và làn đường dành cho xe đạp, và các địa danh 3D thủ công tuyệt vời như Cầu Cổng Vàng hoặc Tòa nhà Phà.

00:57:54.000 --> 00:58:01.000
Chi tiết bổ sung của bản đồ cho phép bạn cung cấp ngữ cảnh và độ chính xác chưa từng có trước đây.

00:58:01.000 --> 00:58:07.000
Ví dụ, bạn có thể chỉ ra rằng một điểm thú vị nằm giữa lối băng qua đường và nơi làn đường dành cho xe đạp bắt đầu.

00:58:07.000 --> 00:58:12.000
Không có bản đồ kỹ thuật số nào khác cho phép bạn làm điều đó và chúng tôi đã làm cho nó cực kỳ dễ thực hiện.

00:58:12.000 --> 00:58:20.000
Để cho bạn thấy nhiều hơn, hãy tạo ra một trải nghiệm giúp người dùng dễ dàng tìm thấy nơi xe bán đồ ăn yêu thích của họ đang đậu bằng cách sử dụng các chi tiết của bản đồ mới.

00:58:20.000 --> 00:58:25.000
Chế độ xem bản đồ như thế này sẽ tự động có được Trải nghiệm Thành phố 3D ở nơi có sẵn.

00:58:25.000 --> 00:58:28.000
Chỉ cần chọn iOS 16 làm mục tiêu triển khai.

00:58:28.000 --> 00:58:35.000
Tiếp theo, tôi có thể sử dụng chi tiết đặc biệt của bản đồ để minh họa vị trí chính xác của xe bán đồ ăn.

00:58:35.000 --> 00:58:42.000
MapKit có các điều khiển mạnh mẽ cho phép chúng tôi định vị máy ảnh trong không gian 3D để tạo ra một cái nhìn chính xác về bản đồ.

00:58:42.000 --> 00:58:48.000
Ở đây, tôi có thể chọn khoảng cách chúng ta muốn phóng to bằng cách đặt khoảng cách tọa độ trung tâm của máy ảnh thành 600 mét.

00:58:48.000 --> 00:58:57.000
Bằng cách điều chỉnh cao độ và hướng và nghiêng máy ảnh thành 3D, bạn có thể thấy các chi tiết tuyệt vời và hữu ích như làn đường rẽ, lối băng qua đường và thậm chí cả cây cối.

00:58:57.000 --> 00:59:00.000
Theo mặc định, độ cao sẽ được làm phẳng.

00:59:00.000 --> 00:59:11.000
Để giúp người dùng hiểu địa hình mà họ sẽ gặp phải, tôi có thể chỉ định Cấu hình ưa thích với Kiểu độ cao 'thực tế' để bao gồm độ cao 3D.

00:59:11.000 --> 00:59:24.000
Khi thêm chú thích hoặc dòng tuyến đường có nguồn gốc từ API Chỉ đường của MapKit, MapKit sẽ tự động xử lý độ cao và sẽ điều chỉnh chú thích hoặc dòng tuyến đường bằng cách đặt nó lên trên địa hình 3D.

00:59:24.000 --> 00:59:29.000
Làm hoạt hình tiêu đề máy ảnh bằng cách thêm một cái xoay chậm thực sự làm cho chế độ xem bản đồ trở nên sống động.

00:59:29.000 --> 00:59:34.000
Khi người dùng chuyển sang Chế độ tối, bản đồ sẽ điều chỉnh cùng với phần còn lại của giao diện người dùng.

00:59:34.000 --> 00:59:39.000
Chúng tôi rất vui mừng được cung cấp trải nghiệm nhập vai này cho các nhà phát triển với iOS 16.

00:59:39.000 --> 00:59:52.000
Ngoài ra, chúng tôi cũng đang mang đến một tính năng Apple Maps phổ biến khác cho MapKit, Look Around, đây là một cách tuyệt vời để khám phá thế giới ở cấp độ mặt đất, với nhiếp ảnh 3D độ phân giải cao và hoạt ảnh mượt mà.

00:59:52.000 --> 00:59:57.000
Người dùng có thể chỉ cần nhấn để di chuyển xuống phố.

00:59:57.000 --> 01:00:03.000
Tôi có thể thêm bản xem trước Nhìn xung quanh tĩnh ngay bên dưới bản đồ bằng cách thả vào Bộ điều khiển chế độ xem và chỉ định một MapItem.

01:00:03.000 --> 01:00:07.000
Chế độ xem Nhìn xung quanh tự động đóng khung vị trí một cách chính xác.

01:00:07.000 --> 01:00:20.000
Khi người dùng nhấn vào bản xem trước, tôi có thể chọn cung cấp chế độ xem Nhìn xung quanh toàn màn hình, nơi người dùng có thể xem địa chỉ, ngày hình ảnh được thu thập và họ có thể nhấn để di chuyển tự do để hiểu rõ hơn về môi trường xung quanh.

01:00:20.000 --> 01:00:28.000
Có thêm một khả năng mới, được yêu cầu cao mà chúng tôi đang giới thiệu cho MapKit trong iOS 16 - API Máy chủ Apple Maps.

01:00:28.000 --> 01:00:44.000
API máy chủ bản đồ là RESTful và hỗ trợ bốn trong số các chức năng được sử dụng nhiều nhất của MapKit: Geocode, biến một lat/long thành một địa chỉ; Reverse Geocode, làm ngược lại - nó biến một địa chỉ thành tọa độ GPS; Tìm kiếm; và Thời gian đến ước tính.

01:00:44.000 --> 01:00:51.000
API Máy chủ Bản đồ mới của chúng tôi là một cách tuyệt vời để làm cho các dịch vụ phụ trợ của riêng bạn phong phú hơn và hiệu quả hơn.

01:00:51.000 --> 01:01:02.000
Tất nhiên, MapKit được xây dựng từ đầu trên cùng một nền tảng quyền riêng tư như Apple Maps và không liên kết dữ liệu của người dùng với danh tính của họ hoặc lưu giữ lịch sử về nơi họ đã đến.

01:01:02.000 --> 01:01:05.000
Và đó là một cái nhìn nhanh về những gì mới với MapKit trong iOS 16.

01:01:05.000 --> 01:01:10.000
Bây giờ đối với thời tiết, hoặc ít nhất là cách bạn có thể xây dựng nó vào ứng dụng của mình, đây là Novall.

01:01:10.000 --> 01:01:25.000
Novall Khan: Hôm nay chúng tôi đã thông báo rằng chúng tôi sẽ đưa ứng dụng Thời tiết lên iPad và Mac, đồng thời giới thiệu các tính năng mới mạnh mẽ, bao gồm thông báo thời tiết khắc nghiệt, chế độ xem chi tiết phong phú và dự báo nhiệt độ và lượng mưa hàng giờ trong mười ngày.

01:01:25.000 --> 01:01:38.000
Và có tất cả các loại trải nghiệm khác trên các thiết bị và nền tảng của Apple trở nên tốt hơn nhờ dữ liệu thời tiết mà chúng tôi cung cấp - từ việc yêu cầu Siri dự báo hôm nay, đến định tuyến lại điều hướng xung quanh lũ lụt.

01:01:38.000 --> 01:01:42.000
Tất cả những điều đó được xây dựng trên dịch vụ Apple Weather của chúng tôi.

01:01:42.000 --> 01:01:51.000
Apple Weather cung cấp dự báo thời tiết toàn cầu đẳng cấp thế giới bằng cách sử dụng các mô hình khí tượng có độ phân giải cao kết hợp với các thuật toán dự đoán và học máy.

01:01:51.000 --> 01:02:00.000
Apple Weather cung cấp thời tiết hiện tại, dự báo hàng giờ 10 ngày, dự báo hàng ngày và thời tiết lịch sử để bạn có thể đánh giá xu hướng dữ liệu.

01:02:00.000 --> 01:02:07.000
Cảnh báo thời tiết khắc nghiệt và lượng mưa từng phút cũng có sẵn cho một số quốc gia trên thế giới.

01:02:07.000 --> 01:02:15.000
Dự báo có 10 ngày nhiệt độ từng giờ, lượng mưa, dự báo chỉ số UV và hơn thế nữa.

01:02:15.000 --> 01:02:19.000
Và tất cả dữ liệu này có sẵn cho bạn thông qua WeatherKit.

01:02:19.000 --> 01:02:25.000
WeatherKit là một Swift API gốc cho tất cả các nền tảng của Apple và một REST API bạn có thể sử dụng từ bất cứ đâu.

01:02:25.000 --> 01:02:33.000
Các API này cung cấp các dự báo thời tiết chính xác, siêu địa phương, để giúp người dùng của bạn luôn an toàn, được thông báo và chuẩn bị.

01:02:33.000 --> 01:02:39.000
Hãy để tôi chỉ cho bạn cách dễ dàng để có được thông tin thời tiết thông qua API Swift tuyệt vời của WeatherKit trong một bản demo nhanh.

01:02:39.000 --> 01:02:42.000
Hãy xem lại ứng dụng Food Truck của chúng tôi.

01:02:42.000 --> 01:02:48.000
Để đảm bảo khách hàng của tôi không bị mắc mưa, ứng dụng của tôi được thiết lập để giới thiệu một chỗ đậu xe có bầu trời quang đãng.

01:02:48.000 --> 01:02:50.000
Để tôi chỉ cho bạn cách tôi có thể biết được thời tiết.

01:02:50.000 --> 01:02:53.000
Ở đây tôi có một danh sách các điểm đỗ xe an toàn.

01:02:53.000 --> 01:02:58.000
Tôi đã thêm khả năng WeatherKit trong Xcode và tất cả những gì cần làm là một vài dòng mã.

01:02:58.000 --> 01:03:01.000
Với Swift Concurrency, việc yêu cầu thời tiết rất đơn giản.

01:03:01.000 --> 01:03:06.000
Chúng tôi gọi thời tiết (cho:) trên WeatherService và vượt qua một địa điểm.

01:03:06.000 --> 01:03:18.000
Sau đó, tôi có thể lấy dữ liệu liên quan mà tôi cần cho ứng dụng của mình, như điều kiện, lượng mưa và mây che phủ.

01:03:18.000 --> 01:03:28.000
Bây giờ tôi đã có dữ liệu tôi cần cho từng điểm đỗ xe của mình, khi tôi chạy ứng dụng của mình, chế độ xem tùy chỉnh của tôi đã được cập nhật để đề xuất một vị trí có bầu trời quang đãng.

01:03:28.000 --> 01:03:33.000
Có tất cả các cách bạn có thể sử dụng dữ liệu thời tiết để làm cho trải nghiệm trong ứng dụng của bạn tốt hơn.

01:03:33.000 --> 01:03:43.000
Bạn có thể sử dụng dự báo thời tiết để giúp bạn kiểm kê hàng tồn kho, dự đoán rằng bánh rán nhân kem của bạn sẽ là một đơn đặt hàng phổ biến vào một ngày nóng nực, vì vậy bạn nên dự trữ kem.

01:03:43.000 --> 01:03:48.000
Đó là tất cả những gì cần thiết để có được thời tiết cho xe bán đồ ăn của chúng tôi, và còn rất nhiều điều để khám phá với WeatherKit.

01:03:48.000 --> 01:04:00.000
Để phù hợp với cam kết của Apple về quyền riêng tư, vị trí chỉ được sử dụng để cung cấp dự báo thời tiết, không liên quan đến bất kỳ thông tin nhận dạng cá nhân nào và không bao giờ được chia sẻ hoặc bán.

01:04:00.000 --> 01:04:08.000
Quyền riêng tư là trách nhiệm chung và thông qua WeatherKit, bạn có thể nhận được dữ liệu thời tiết chính xác trong khi bảo vệ quyền riêng tư của người dùng.

01:04:08.000 --> 01:04:18.000
Bởi vì chúng tôi muốn giúp bạn dễ dàng bắt đầu với WeatherKit, chúng tôi đã bao gồm 500.000 cuộc gọi API thời tiết (cho: vị trí) mỗi tháng trong tư cách thành viên Chương trình Nhà phát triển Apple của bạn.

01:04:18.000 --> 01:04:24.000
Những người bạn cần nhiều hơn sẽ có thể mua thêm các cấp dịch vụ ngay trong ứng dụng dành cho nhà phát triển, bắt đầu từ mùa thu này.

01:04:24.000 --> 01:04:31.000
Vì vậy, đó là WeatherKit, dự báo thời tiết chính xác, siêu địa phương được cung cấp bởi dịch vụ Thời tiết của Apple.

01:04:31.000 --> 01:04:35.000
Chúng tôi đang bắt đầu với bản beta và nó hiện có sẵn trên tất cả các nền tảng.

01:04:35.000 --> 01:04:40.000
Có rất nhiều cách sáng tạo mà bạn có thể sử dụng WeatherKit trong các ứng dụng của mình.

01:04:40.000 --> 01:04:44.000
Và bây giờ đây là Ryan để cung cấp cho chúng tôi một số quan điểm về những gì ứng dụng của bạn có thể thấy với Live Text.

01:04:44.000 --> 01:04:50.000
Ryan Dixon: Người dùng của chúng tôi rất yêu thích Live Text và chúng tôi đã nghe từ nhiều bạn rằng bạn cũng muốn mang nó đến ứng dụng của mình.

01:04:50.000 --> 01:04:57.000
Vì vậy, năm nay, chúng tôi đang mở rộng VisionKit với hai API mới cho phép bạn làm điều đó.

01:04:57.000 --> 01:05:13.000
Live Text API mở ra khả năng phân tích nội dung hình ảnh, cho phép người dùng tương tác với văn bản và mã QR được tìm thấy trong ảnh và khung hình video bị tạm dừng, đồng thời cung cấp các hành động nhanh chóng để người dùng của bạn chỉ cần thực hiện hành động trên dữ liệu liên quan.

01:05:13.000 --> 01:05:19.000
Nó tuyệt vời cho bất kỳ ứng dụng nào hiển thị phương tiện trực quan, như Apollo cho Reddit hoặc Vimeo.

01:05:19.000 --> 01:05:23.000
Và Data Scanner API mở ra khả năng phân tích nguồn cấp dữ liệu camera trực tiếp.

01:05:23.000 --> 01:05:27.000
Nó đơn giản hóa đáng kể việc nhập văn bản và mã vạch cho người dùng.

01:05:27.000 --> 01:05:35.000
Tất cả những gì bạn cần làm là thêm bất kỳ lớp phủ hoặc điều khiển tùy chỉnh nào để điều chỉnh trải nghiệm camera trực tiếp theo nhu cầu của ứng dụng của bạn.

01:05:35.000 --> 01:05:46.000
Điều này đặc biệt hữu ích cho các ứng dụng tiêu dùng dựa trên mã QR hoặc ứng dụng doanh nghiệp được xây dựng để quản lý hàng tồn kho, dịch vụ nhận và đóng gói và các ki-ốt tại điểm bán hàng.

01:05:46.000 --> 01:05:55.000
Cả hai API Live Text và Data Scanner đều hỗ trợ phát hiện tự động chín ngôn ngữ, bao gồm cả việc bổ sung tiếng Nhật và tiếng Hàn trong năm nay.

01:05:55.000 --> 01:06:02.000
Các API VisionKit này sẽ mang lại nhiều năm đổi mới thị giác máy tính cho ứng dụng của bạn chỉ với một vài dòng mã.

01:06:02.000 --> 01:06:04.000
Đây là Jenny để chỉ cho bạn cách làm.

01:06:04.000 --> 01:06:08.000
Jenny Chen: Để cho bạn xem bản demo, chúng tôi quay lại ứng dụng Food Truck bật lên đáng tin cậy của mình.

01:06:08.000 --> 01:06:18.000
Chúng tôi đang thực hiện một chương trình khuyến mãi trong đó nếu người dùng đăng ảnh lên kênh xã hội có đăng ký bằng thẻ bắt đầu bằng #freedonut và địa chỉ của họ trên ứng dụng, chúng tôi sẽ lái xe đến địa chỉ của họ và giao bánh rán miễn phí cho họ.

01:06:18.000 --> 01:06:20.000
Chúng tôi sẽ đi đến nguồn cấp dữ liệu bánh rán xã hội của chúng tôi.

01:06:20.000 --> 01:06:26.000
Chúng tôi muốn thêm Văn bản Trực tiếp vào hình ảnh để trình điều khiển có thể trích xuất văn bản để lấy địa chỉ giao hàng.

01:06:26.000 --> 01:06:29.000
Đây là nơi các API Văn bản Trực tiếp mới hoạt động.

01:06:29.000 --> 01:06:36.000
Tôi có thể dễ dàng thêm ImageInteraction lên trên chế độ xem của mình và điều đó sẽ thêm nút Văn bản Trực tiếp với hỗ trợ hành động nhanh chóng cho nó.

01:06:36.000 --> 01:06:44.000
Mặc dù nút Văn bản Trực tiếp thường nằm ở phía dưới bên phải, tôi đã có nút trái tim trong ứng dụng của mình, vì vậy tôi có thể điều chỉnh vị trí bằng cách sử dụng các cài đặt tùy chỉnh.

01:06:44.000 --> 01:06:50.000
Tôi cũng có thể đặt cấu hình nút để tùy chỉnh kiểu nút để nó phù hợp với ứng dụng của tôi hơn.

01:06:50.000 --> 01:07:00.000
Bây giờ tôi đã thêm nó vào, tôi có thể nhấn vào nút Văn bản trực tiếp, chọn văn bản hoặc sử dụng các hành động nhanh để dễ dàng lấy địa chỉ.

01:07:00.000 --> 01:07:08.000
Tôi thích rằng người dùng không cần phải học một mô hình tương tác mới, vì nó cung cấp sự dễ sử dụng tương tự với trải nghiệm Văn bản Trực tiếp.

01:07:08.000 --> 01:07:10.000
Giao diện người dùng nhất quán và quen thuộc.

01:07:10.000 --> 01:07:17.000
Nó cảm thấy được tích hợp với hệ điều hành, nhưng tôi vẫn có thể điều chỉnh vị trí ngay cả khi tôi có giao diện người dùng tùy chỉnh của riêng mình.

01:07:17.000 --> 01:07:25.000
Tất nhiên, giống như bất kỳ ứng dụng giao hàng tốt nào, chúng tôi cũng muốn cung cấp dịch vụ tốt nhất cho khách hàng của mình và đảm bảo rằng chúng tôi đang cung cấp cho mọi người những chiếc bánh rán phù hợp.

01:07:25.000 --> 01:07:29.000
Vì vậy, chúng tôi theo dõi các đơn đặt hàng bánh rán của mình thông qua mã QR.

01:07:29.000 --> 01:07:36.000
Sử dụng API Máy quét Dữ liệu mới, tôi có thể dễ dàng thêm nó như là bước đầu tiên của bất kỳ tương tác khách hàng nào.

01:07:36.000 --> 01:07:46.000
Ngay bây giờ, nút đó không làm gì cả, nhưng tôi có thể dễ dàng khởi tạo một đối tượng DataScanner mới để tìm kiếm văn bản, mã QR hoặc mã vạch mà sau đó tôi có thể nhập vào ứng dụng của mình.

01:07:46.000 --> 01:07:53.000
Chỉ với một vài dòng mã, tôi có thể hiển thị máy ảnh, chỉ định rằng tôi muốn mã QR và bắt đầu quét!

01:07:53.000 --> 01:07:58.000
Khi trình điều khiển nhấn vào mã QR, tôi muốn cho thấy rằng quá trình quét là một thành công.

01:07:58.000 --> 01:08:03.000
Tôi sẽ thêm trình xử lý đại diện trong Xcode...

01:08:03.000 --> 01:08:10.000
...Và khi nhấn, hiển thị cảnh báo cho người dùng rằng quá trình quét đã thành công để tôi có thể tiếp tục và bắt đầu đặt hàng bánh rán.

01:08:10.000 --> 01:08:20.000
Bây giờ khi tôi chạy ứng dụng, điều này sẽ hiển thị bộ điều khiển chế độ xem với chế độ xem camera và tôi có thể thấy hướng dẫn và chế độ xem ô tô sáng mã QR.

01:08:20.000 --> 01:08:26.000
Khi tôi nhấn vào mã QR, tôi có thể thấy quá trình quét của mình đã thành công và đơn đặt hàng bánh rán đã được xác nhận.

01:08:26.000 --> 01:08:30.000
Và với điều đó, việc giao hàng #freedonut của tôi đang trên đường đến.

01:08:30.000 --> 01:08:39.000
Với VisionKit, các API Máy quét Dữ liệu và Văn bản Trực tiếp mới dễ dàng cho phép bạn mang những khả năng thị giác mạnh mẽ này vào ứng dụng của mình.

01:08:39.000 --> 01:08:41.000
Và bây giờ, trở lại với Susan.

01:08:41.000 --> 01:08:44.000
Susan: Đây là thời điểm thú vị để xây dựng ứng dụng.

01:08:44.000 --> 01:08:49.000
Xcode Cloud hiện đã sẵn sàng để giúp bạn xây dựng các ứng dụng tốt hơn nhanh hơn.

01:08:49.000 --> 01:08:57.000
Với Swift và SwiftUI, việc chuyển đổi ý tưởng của bạn thành các ứng dụng hoạt động trên nền tảng Apple trở nên dễ dàng hơn bao giờ hết.

01:08:57.000 --> 01:09:02.000
Có những cách mới thú vị để các ứng dụng của bạn đưa ý tưởng của bạn sâu hơn vào trải nghiệm hệ thống.

01:09:02.000 --> 01:09:07.000
Các tiện ích Màn hình Khóa và Hoạt động Trực tiếp đưa ứng dụng của bạn lên Màn hình Khóa.

01:09:07.000 --> 01:09:13.000
Cộng tác tin nhắn giúp người dùng của bạn kết nối và cộng tác cực kỳ dễ dàng.

01:09:13.000 --> 01:09:17.000
Và App Intents giúp tích hợp ứng dụng của bạn với Siri.

01:09:17.000 --> 01:09:27.000
Có các API hoàn toàn mới và các bản cập nhật chính cho các API hiện có, như WeatherKit, MapKit, Live Text và Metal.

01:09:27.000 --> 01:09:29.000
Và đó không phải là kết thúc của câu chuyện.

01:09:29.000 --> 01:09:39.000
Đây là một WWDC lớn khác trong năm nay, với 175 phiên, hàng trăm phòng thí nghiệm và các hoạt động Phòng chờ Kỹ thuật số diễn ra cả tuần.

01:09:39.000 --> 01:09:44.000
Chúng tôi rất nóng lòng được kết nối với bạn trong tuần này, và quan trọng hơn, tuần này là dành cho bạn.

01:09:44.000 --> 01:09:47.000
Chúng tôi rất háo hức để xem những gì bạn tạo ra tiếp theo.

01:09:47.000 --> 01:09:49.000
Cảm ơn bạn!

01:09:49.000 --> 01:10:06.000
♪ ♪

01:10:06.000 --> 01:10:25.000
.

01:10:25.000 --> 01:10:43.000
.

01:10:43.000 --> 01:11:02.000
.

01:11:02.000 --> 01:11:20.000
.

01:11:20.000 --> 01:11:39.000
.

01:11:39.000 --> 01:11:57.000
.

01:11:57.000 --> 01:12:16.000
.

01:12:16.000 --> 01:12:34.000
.

01:12:34.000 --> 01:12:53.000
.

01:12:53.000 --> 01:13:11.000
.

01:13:11.000 --> 01:13:30.000
.

01:13:30.000 --> 01:13:49.000
.

01:13:49.000 --> 01:14:08.000
.

01:14:08.000 --> 01:14:26.000
.

01:14:26.000 --> 01:14:45.000
.

01:14:45.000 --> 01:15:03.000
.

01:15:03.000 --> 23:59:59.000
.

