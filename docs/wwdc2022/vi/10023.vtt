WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Nhạc hip-hop nhạc cụ êm dịu ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
Xin chào! Tôi là Justin, và tôi là một kỹ sư trong nhóm Ảnh.

00:00:13.000 --> 00:00:18.000
Hôm nay, tôi muốn nói về một số cải tiến mà chúng tôi đã thực hiện cho hệ thống chọn Ảnh.

00:00:18.000 --> 00:00:24.000
Hệ thống chọn ảnh là cách tốt nhất để hầu hết các ứng dụng truy cập ảnh và video trên iOS.

00:00:24.000 --> 00:00:29.000
Bộ chọn hết quy trình, vì vậy ứng dụng của bạn không cần yêu cầu bất kỳ quyền truy cập thư viện nào để sử dụng nó.

00:00:29.000 --> 00:00:33.000
Nó có giao diện người dùng trực quan và API dễ sử dụng.

00:00:33.000 --> 00:00:43.000
Nếu bạn không quen thuộc với PHPicker API, bạn có thể xem các phiên WWDC của những năm trước của chúng tôi, nơi chúng tôi đã nói sâu về nó.

00:00:43.000 --> 00:00:50.000
Trong phiên hôm nay, tôi sẽ bắt đầu với tổng quan về các tính năng mới mà chúng tôi đã thêm vào bộ chọn.

00:00:50.000 --> 00:00:56.000
Sau đó, tôi sẽ nói về các nền tảng và khuôn khổ bổ sung mà bộ chọn hiện hỗ trợ.

00:00:56.000 --> 00:00:59.000
Được rồi, chúng ta hãy đi sâu vào.

00:00:59.000 --> 00:01:06.000
Bộ chọn hỗ trợ lọc giữa hình ảnh, video và Ảnh trực tiếp kể từ khi được giới thiệu.

00:01:06.000 --> 00:01:11.000
Tuy nhiên, chúng tôi hiểu rằng một số ứng dụng của bạn có thể có một số yêu cầu khác.

00:01:11.000 --> 00:01:17.000
Ví dụ, một ứng dụng khâu ảnh chụp màn hình chỉ muốn hiển thị ảnh chụp màn hình trong bộ chọn.

00:01:17.000 --> 00:01:23.000
Bây giờ có thể với bộ lọc ảnh chụp màn hình mới mà chúng tôi đã thêm vào trong năm nay.

00:01:23.000 --> 00:01:31.000
Ngoài ảnh chụp màn hình, chúng tôi đã thêm các loại nội dung khác như bản ghi màn hình và video chuyển động chậm.

00:01:31.000 --> 00:01:38.000
Ngoài ra còn có một cách để bạn tạo một bộ lọc mới bằng cách sử dụng PHAsset.PlaybackStyle.

00:01:38.000 --> 00:01:45.000
Ngoài các video Điện ảnh, ảnh hiệu ứng độ sâu và ảnh chụp liên tục, tất cả các bộ lọc mới đều được chuyển ngược.

00:01:45.000 --> 00:01:53.000
Nếu ứng dụng của bạn đang nhắm mục tiêu iOS 15, bạn vẫn có thể sử dụng chúng miễn là bạn đang biên dịch với iOS 16 SDK.

00:01:53.000 --> 00:02:00.000
Đối với các bộ lọc phức hợp, ngoài "bất kỳ" hiện có, bây giờ bạn cũng sử dụng "tất cả" và "không".

00:02:00.000 --> 00:02:04.000
Chúng cũng được chuyển ngược sang iOS 15.

00:02:04.000 --> 00:02:06.000
Hãy xem xét một số ví dụ mã.

00:02:06.000 --> 00:02:12.000
Để hiển thị video và Ảnh trực tiếp, bạn có thể kết hợp chúng với "bất kỳ".

00:02:12.000 --> 00:02:17.000
Hoặc bạn có thể chỉ muốn hiển thị ảnh chụp màn hình.

00:02:17.000 --> 00:02:25.000
Để hiển thị tất cả các hình ảnh không có ảnh chụp màn hình, bạn có thể kết hợp các bộ lọc hình ảnh và ảnh chụp màn hình bằng cách sử dụng "tất cả" và "không".

00:02:25.000 --> 00:02:32.000
Và ví dụ cuối cùng, bạn có thể sử dụng bộ lọc .cinematicVideos nếu bạn đang nhắm mục tiêu iOS 16.

00:02:32.000 --> 00:02:37.000
Tiếp theo, hãy nói về những cải tiến liên quan đến bộ chọn nửa chiều cao.

00:02:37.000 --> 00:02:47.000
Trong iOS 15, UIKit có một UISheetPresentationController API mới mà bạn có thể sử dụng để trình chọn ở chế độ nửa chiều cao.

00:02:47.000 --> 00:02:50.000
Nó đã hoạt động tốt trong nhiều trường hợp.

00:02:50.000 --> 00:03:00.000
Nhưng một số bạn có thể muốn triển khai giao diện người dùng tùy chỉnh để điều chỉnh các tài sản đã chọn và những thay đổi đó được phản ánh lại trong bộ chọn.

00:03:00.000 --> 00:03:07.000
Trong iOS 16, bạn có thể bỏ chọn tài sản bằng cách sử dụng số nhận dạng tài sản của chúng.

00:03:07.000 --> 00:03:16.000
Như được hiển thị ở đây, ảnh thứ hai không còn được chọn trong bộ chọn sau khi deselectAssets được gọi.

00:03:16.000 --> 00:03:21.000
Bạn cũng có thể gọi phương thức moveAsset để sắp xếp lại tài sản.

00:03:21.000 --> 00:03:27.000
Bây giờ chúng ta đã quen thuộc với tất cả các tính năng chọn mới, hãy nói về hỗ trợ nền tảng.

00:03:27.000 --> 00:03:33.000
Hiện tại, hệ thống chọn Ảnh chỉ có thể được sử dụng bởi các ứng dụng iOS và iPadOS.

00:03:33.000 --> 00:03:41.000
Năm nay, chúng tôi sẽ đưa bộ chọn Ảnh lên hai nền tảng bổ sung: macOS và watchOS.

00:03:41.000 --> 00:03:46.000
Bộ chọn iPadOS cũng được cập nhật với thiết kế mới chỉ dành cho iPad.

00:03:46.000 --> 00:03:49.000
Trước tiên chúng ta hãy xem giao diện người dùng iPad mới.

00:03:49.000 --> 00:03:55.000
Bộ chọn bây giờ hiển thị một thanh bên để tận dụng màn hình iPad lớn hơn.

00:03:55.000 --> 00:03:59.000
Thanh bên cho phép điều hướng nhanh hơn giữa các bộ sưu tập khác nhau.

00:03:59.000 --> 00:04:08.000
Nhưng nếu không có đủ dung lượng, như ở chế độ Split Screen, chúng ta sẽ quay trở lại giao diện người dùng chọn nhỏ gọn hiện có.

00:04:08.000 --> 00:04:11.000
Tiếp theo, macOS.

00:04:11.000 --> 00:04:16.000
Bộ chọn macOS cũng có một thanh bên với các điều khiển kiểu Mac.

00:04:16.000 --> 00:04:30.000
Và cũng giống như bộ chọn iOS, nó hỗ trợ nhiều lựa chọn, phóng to mượt mà trong lưới và có tính năng tìm kiếm mạnh mẽ cho phép bạn tìm kiếm những thứ như con người, địa điểm và hơn thế nữa.

00:04:30.000 --> 00:04:34.000
Giao diện người dùng chọn mới cũng có sẵn trong NSOpenPanel.

00:04:34.000 --> 00:04:43.000
Bạn có thể sử dụng nó để chọn tài sản từ thư viện ảnh hệ thống và lần đầu tiên, bao gồm cả những tài sản được lưu trữ trong Ảnh iCloud.

00:04:43.000 --> 00:04:49.000
Ứng dụng của bạn sẽ nhận được giao diện người dùng mới miễn phí mà không cần thực hiện bất kỳ công việc nhận con nuôi nào.

00:04:49.000 --> 00:04:54.000
Kéo và thả được hỗ trợ trong bộ chọn NSOpenPanel.

00:04:54.000 --> 00:05:00.000
Nó cũng được hỗ trợ trong bộ chọn tiêu chuẩn trên iOS, iPadOS và macOS.

00:05:00.000 --> 00:05:08.000
Nếu ứng dụng của bạn chỉ cần chọn một vài hình ảnh hoặc video, NSOpenPanel API có thể là tất cả những gì bạn cần.

00:05:08.000 --> 00:05:15.000
Nhưng hãy nhớ rằng các tệp được chọn trong thư viện ảnh có thể bị hệ thống xóa bất cứ lúc nào.

00:05:15.000 --> 00:05:23.000
Bạn nên sao chép chúng vào một vị trí do ứng dụng của bạn quản lý nếu bạn cần đảm bảo tính khả dụng của chúng trong thời gian dài.

00:05:23.000 --> 00:05:32.000
Đối với các ứng dụng macOS tập trung vào phương tiện truyền thông, chúng tôi khuyến khích bạn mặc định chọn Ảnh mới để có trải nghiệm người dùng tốt nhất.

00:05:32.000 --> 00:05:42.000
Tuy nhiên, ứng dụng của bạn vẫn nên cung cấp một cách thay thế để chọn tài sản từ hệ thống tệp bằng cách sử dụng NSOpenPanel API.

00:05:42.000 --> 00:05:50.000
Đôi khi khách hàng của bạn vẫn có thể muốn chọn tài sản bên ngoài thư viện ảnh của họ.

00:05:50.000 --> 00:05:55.000
Cuối cùng nhưng không kém phần quan trọng, hãy nói về watchOS.

00:05:55.000 --> 00:06:01.000
Lần đầu tiên, bạn có thể truy cập vào hình ảnh được lưu trữ trên đồng hồ bằng API mới.

00:06:01.000 --> 00:06:10.000
Bộ chọn watchOS cũng hết quy trình, như bộ chọn iOS và macOS, vì vậy bạn không cần yêu cầu bất kỳ quyền truy cập thư viện nào để sử dụng nó.

00:06:10.000 --> 00:06:17.000
Nó có giao diện người dùng tương tự như bộ chọn iOS nhưng được tối ưu hóa cho màn hình nhỏ hơn.

00:06:17.000 --> 00:06:21.000
Bạn có thể duyệt ảnh của mình trong lưới hoặc theo bộ sưu tập.

00:06:21.000 --> 00:06:29.000
Bạn có thể định cấu hình bộ chọn để hiển thị thứ tự lựa chọn, cũng như chỉ định giới hạn lựa chọn.

00:06:29.000 --> 00:06:36.000
Tuy nhiên, không giống như iOS và macOS, chỉ có hình ảnh sẽ được hiển thị trong bộ chọn watchOS.

00:06:36.000 --> 00:06:43.000
Nếu thiết bị có hơn 500 hình ảnh, chỉ 500 hình ảnh gần đây nhất sẽ được hiển thị.

00:06:43.000 --> 00:06:48.000
Bạn có thể tự hỏi, "PHPickerViewController dựa trên UIKit.

00:06:48.000 --> 00:06:52.000
Làm thế nào tôi có thể sử dụng nó cho ứng dụng macOS hoặc watchOS của mình?"

00:06:52.000 --> 00:07:00.000
Như bạn có thể đoán, các API chọn mới hiện có sẵn trong AppKit và SwiftUI.

00:07:00.000 --> 00:07:03.000
Trước tiên chúng ta hãy xem qua AppKit API.

00:07:03.000 --> 00:07:07.000
Trên thực tế, nó rất giống với UIKit API.

00:07:07.000 --> 00:07:13.000
Bạn có quyền truy cập vào cùng một loại Cấu hình PHPicker và các thuộc tính của nó.

00:07:13.000 --> 00:07:23.000
Chỉ có một sự khác biệt nhỏ: PHPickerViewController là một lớp con NSViewController cho các ứng dụng AppKit.

00:07:23.000 --> 00:07:31.000
Với sự ra đời của PHPicker dựa trên AppKit, đã đến lúc rời khỏi trình duyệt thư viện phương tiện kế thừa.

00:07:31.000 --> 00:07:35.000
PHPicker mạnh hơn rất nhiều.

00:07:35.000 --> 00:07:43.000
Nó cũng dễ bảo trì hơn nếu bạn đang làm việc trên cả hai ứng dụng UIKit và AppKit cùng một lúc.

00:07:43.000 --> 00:07:49.000
Cuối cùng, đã đến lúc nói về SwiftUI API.

00:07:49.000 --> 00:07:53.000
Bạn có nhớ bộ chọn iOS mà bạn đã thấy ở đầu phiên không?

00:07:53.000 --> 00:07:58.000
Nó có thể được trình bày chỉ với một vài dòng mã SwiftUI.

00:07:58.000 --> 00:08:10.000
Quan trọng hơn, bạn có quyền truy cập vào SwiftUI PhotosPicker API trên tất cả các nền tảng được người chọn hỗ trợ: iOS, iPadOS, macOS và watchOS.

00:08:10.000 --> 00:08:20.000
Bộ chọn sẽ tự động chọn bố cục tốt nhất tùy thuộc vào nền tảng, cấu hình ứng dụng của bạn và không gian màn hình khả dụng.

00:08:20.000 --> 00:08:29.000
Bạn không cần phải lo lắng về giao diện người dùng chọn nên là gì, vì vậy bạn chỉ có thể tập trung vào việc làm cho ứng dụng của mình tốt hơn.

00:08:29.000 --> 00:08:38.000
Trước khi chúng ta xem xét chi tiết API mới thông qua bản demo, trước tiên chúng ta nên nói về cách tải ảnh và video đã chọn.

00:08:38.000 --> 00:08:45.000
Lựa chọn bạn nhận được thông qua ràng buộc SwiftUI chỉ chứa các đối tượng giữ chỗ.

00:08:45.000 --> 00:08:50.000
Bạn vẫn cần tải dữ liệu tài sản thực tế theo yêu cầu.

00:08:50.000 --> 00:08:54.000
Hãy nhớ rằng một số dữ liệu tài sản sẽ không được tải ngay lập tức.

00:08:54.000 --> 00:09:08.000
Thao tác tải cũng có thể thất bại nếu gặp lỗi, ví dụ, khi bộ chọn đang cố gắng tải xuống dữ liệu từ iCloud Photos nhưng thiết bị không được kết nối với internet.

00:09:08.000 --> 00:09:21.000
Một số tệp lớn như video có thể mất nhiều thời gian để tải xuống, vì vậy chúng tôi khuyên bạn nên hiển thị giao diện người dùng tải nội tuyến cho mỗi mục thay vì chỉ báo chặn tải.

00:09:21.000 --> 00:09:29.000
PhotosPicker sử dụng Transferable, đây là một giao thức SwiftUI mới để truyền dữ liệu giữa các ứng dụng và tiện ích mở rộng.

00:09:29.000 --> 00:09:44.000
Bạn có thể tải SwiftUI Image thông qua Transferable trực tiếp, nhưng đối với các trường hợp sử dụng nâng cao, bạn nên xác định các đối tượng mô hình của riêng mình phù hợp với giao thức Transferable để kiểm soát hoàn toàn loại dữ liệu bạn muốn tải.

00:09:44.000 --> 00:09:50.000
Để biết thêm thông tin về Transferable, bạn có thể xem phiên "Gặp gỡ Transferable".

00:09:50.000 --> 00:10:03.000
Nếu ứng dụng của bạn cần xử lý nhiều mục cùng một lúc hoặc các tài sản lớn như video, có thể không khả thi để tải mọi thứ vào bộ nhớ cùng một lúc.

00:10:03.000 --> 00:10:11.000
Để giảm mức sử dụng bộ nhớ, bạn có thể sử dụng FileTransferRepresentation để tải các tài sản đã chọn dưới dạng tệp.

00:10:11.000 --> 00:10:19.000
Khi tải tài sản dưới dạng tệp, hãy nhớ rằng ứng dụng của bạn chịu trách nhiệm quản lý vòng đời của chúng.

00:10:19.000 --> 00:10:27.000
Các tệp phải luôn được sao chép vào thư mục ứng dụng của bạn khi nhận và xóa khi chúng không còn cần thiết nữa.

00:10:27.000 --> 00:10:30.000
Được rồi, đã đến lúc cho bản demo!

00:10:30.000 --> 00:10:34.000
Tôi đã thiết lập ứng dụng demo này hiển thị trang hồ sơ tài khoản.

00:10:34.000 --> 00:10:39.000
Ngay bây giờ hình ảnh hồ sơ chỉ là một biểu tượng giữ chỗ.

00:10:39.000 --> 00:10:45.000
Chúng tôi muốn thêm một nút chỉnh sửa để thay đổi hình ảnh hồ sơ bằng cách sử dụng PhotosPicker API.

00:10:45.000 --> 00:10:56.000
Chế độ xem hình ảnh hồ sơ đã có thể phản hồi trạng thái hình ảnh được xác định trong mô hình chế độ xem của chúng tôi, vì vậy chúng tôi chỉ cần cập nhật trạng thái hình ảnh khi nhận được lựa chọn bộ chọn.

00:10:56.000 --> 00:11:01.000
Đầu tiên, hãy đi đến mô hình xem của chúng tôi và thêm một thuộc tính imageSelection mới.

00:11:01.000 --> 00:11:07.000
Nó sẽ được chuyển đến PhotosPicker API dưới dạng ràng buộc lựa chọn.

00:11:07.000 --> 00:11:19.000
Bây giờ chúng ta có thể quay lại chế độ xem hình ảnh hồ sơ của mình và thêm nút lớp phủ để hiển thị bộ chọn.

00:11:19.000 --> 00:11:24.000
Được rồi, hãy tạm dừng một chút và xem mã chúng tôi vừa thêm vào.

00:11:24.000 --> 00:11:33.000
Chúng tôi đã thêm chế độ xem PhotosPicker, cung cấp cho nó ràng buộc lựa chọn mà chúng tôi vừa xác định và định cấu hình nó để chỉ hiển thị hình ảnh.

00:11:33.000 --> 00:11:39.000
Nhãn của PhotosPicker chỉ là một glyph bút chì với nền hình tròn.

00:11:39.000 --> 00:11:42.000
Chúng ta có thể xây dựng và chạy để xem những gì chúng ta có cho đến nay.

00:11:42.000 --> 00:11:46.000
Tôi có thể nhấn vào nút chỉnh sửa để hiển thị bộ chọn.

00:11:46.000 --> 00:11:52.000
Nhấn vào một hình ảnh sẽ tự động đóng bộ chọn, nhưng hình ảnh hồ sơ không được cập nhật.

00:11:52.000 --> 00:11:53.000
Tại sao?

00:11:53.000 --> 00:11:57.000
Chúng ta vẫn cần kết nối lựa chọn hình ảnh và trạng thái hình ảnh.

00:11:57.000 --> 00:11:59.000
Vì vậy, hãy làm điều đó.

00:11:59.000 --> 00:12:04.000
Chúng ta có thể quay lại mô hình chế độ xem và phản hồi lựa chọn hình ảnh đã được đặt.

00:12:04.000 --> 00:12:08.000
Chúng tôi đặt trạng thái hình ảnh thành trống nếu lựa chọn hình ảnh là số không.

00:12:08.000 --> 00:12:12.000
Nếu không, chúng tôi bắt đầu tải hình ảnh.

00:12:12.000 --> 00:12:17.000
Chúng tôi đang thấy lỗi trình biên dịch vì chúng tôi chưa triển khai phương thức loadTransferable.

00:12:17.000 --> 00:12:23.000
Hãy sửa nó.

00:12:23.000 --> 00:12:25.000
Việc thực hiện rất đơn giản.

00:12:25.000 --> 00:12:34.000
Chúng tôi chỉ cần trả lời trình xử lý hoàn thành và cập nhật trạng thái hình ảnh nếu yêu cầu vẫn là yêu cầu gần đây nhất.

00:12:34.000 --> 00:12:37.000
Hãy xây dựng và chạy để xem nó hoạt động.

00:12:37.000 --> 00:12:43.000
Tôi có thể nhấn vào nút chỉnh sửa và chọn một hình ảnh.

00:12:43.000 --> 00:12:46.000
Tuyệt vời! Nó hoạt động như mong đợi.

00:12:46.000 --> 00:12:52.000
Trên thực tế, dự án cũng đã được thiết lập để chạy trên macOS.

00:12:52.000 --> 00:12:56.000
Mã tôi vừa thêm có tự động hoạt động trên macOS không?

00:12:56.000 --> 00:12:59.000
Hãy xây dựng và chạy để tìm hiểu.

00:12:59.000 --> 00:13:01.000
Nó biên dịch!

00:13:01.000 --> 00:13:07.000
Tôi có thể mở bộ chọn, chọn một hình ảnh và nó được phản ánh trong ứng dụng.

00:13:07.000 --> 00:13:09.000
Đó là nó cho bản demo.

00:13:09.000 --> 00:13:17.000
Bạn vừa xem bản demo trên iOS và macOS, nhưng mã tương tự cũng sẽ hoạt động trên watchOS.

00:13:17.000 --> 00:13:23.000
Tuy nhiên, có một vài điều cần ghi nhớ.

00:13:23.000 --> 00:13:28.000
Bộ chọn watchOS được thiết kế cho các luồng đơn giản và tương tác ngắn.

00:13:28.000 --> 00:13:31.000
Hình ảnh được chia tỷ lệ dựa trên kích thước thiết bị.

00:13:31.000 --> 00:13:36.000
Thông thường, chúng được đồng bộ hóa từ iPhone được ghép nối.

00:13:36.000 --> 00:13:46.000
Tuy nhiên, Thiết lập Gia đình cho phép các thành viên gia đình bạn không có iPhone riêng tận hưởng các tính năng và lợi ích của Apple Watch.

00:13:46.000 --> 00:13:55.000
Nếu một thiết bị ở chế độ Thiết lập Gia đình, 1000 hình ảnh gần đây nhất trong Ảnh iCloud có thể được chọn bằng bộ chọn.

00:13:55.000 --> 00:13:59.000
Người chọn có thể cần tải xuống một số hình ảnh từ internet.

00:13:59.000 --> 00:14:06.000
Và nếu đúng như vậy, một giao diện người dùng đang tải sẽ được hiển thị trong bộ chọn trước khi đóng.

00:14:06.000 --> 00:14:15.000
Trước khi bạn đi, tôi chỉ muốn nói rằng chúng tôi cam kết làm cho hệ thống chọn Ảnh trở thành cách tốt nhất để hầu hết các ứng dụng truy cập ảnh và video.

00:14:15.000 --> 00:14:20.000
Chúng tôi thực sự khuyến khích bạn chuyển sang nó nếu bạn vẫn đang sử dụng bộ chọn tùy chỉnh.

00:14:20.000 --> 00:14:23.000
Cảm ơn bạn, và chúc bạn có một WWDC tuyệt vời!

00:14:23.000 --> 23:59:59.000
♪

