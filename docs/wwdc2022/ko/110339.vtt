WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:12.000
안녕하세요, 여러분. 저는 엘리엇 가너입니다.

00:00:12.000 --> 00:00:23.000
저는 인터넷 기술 팀의 엔지니어이며, 오늘은 네트워크 프레임워크와 새로운 동반자 프레임워크인 DeviceDiscoveryUI를 사용하여 장치 간 경험을 구축하는 방법에 대해 논의할 것입니다.

00:00:23.000 --> 00:00:30.000
우리는 교차 장치 연결과 그것이 당신의 앱을 어떻게 개선할 수 있는지에 대해 배우는 것으로 시작할 것입니다.

00:00:30.000 --> 00:00:39.000
우리는 네트워크 프레임워크와 페어링된 새로운 프레임워크인 DeviceDiscoveryUI가 어떻게 가능한 한 간단하게 연결할 수 있는지 살펴볼 것입니다.

00:00:39.000 --> 00:00:55.000
새로운 시스템 장치 선택기를 사용하여 장치를 검색하는 방법과 네트워크 프레임워크를 사용하여 해당 장치에 연결하는 방법을 포함하여 DeviceDiscoveryUI를 사용하도록 앱을 업데이트하는 방법에 대한 코드 예제를 살펴보겠습니다.

00:00:55.000 --> 00:00:58.000
그럼 교차 장치 연결부터 시작합시다.

00:00:58.000 --> 00:01:07.000
주변 장치에 연결하고 데이터를 교환하는 것은 종종 앱 내에서 원활하고 통합된 경험을 구축하는 데 필수적입니다.

00:01:07.000 --> 00:01:13.000
피트니스와 명상 앱은 종종 코치가 움직임을 시연할 수 있는 큰 화면에서 가장 잘 작동합니다.

00:01:13.000 --> 00:01:20.000
사람들은 Apple Watch에서 수집된 심박수, 칼로리 소모 및 운동 데이터를 보는 혜택을 받는다.

00:01:20.000 --> 00:01:33.000
마찬가지로, 게임 경험은 연결된 iPhone의 입력과 동작으로 더 몰입할 수 있거나, 두 번째 화면 경험을 인근 iPad로 확장하여 강화할 수 있습니다.

00:01:33.000 --> 00:01:43.000
게임, 피트니스 및 웰빙 앱과 같은 이러한 모든 경험은 모두 안정적이고 사용하기 쉬운 교차 장치 연결에 대한 필요성을 공유합니다.

00:01:43.000 --> 00:01:46.000
그리고 그것은 모두 장치를 발견하는 것으로 시작된다.

00:01:46.000 --> 00:01:57.000
그 발견을 시작하기 위해, 우리는 주변 장치의 안전하고 개인 정보를 보존하는 발견을 제공하는 새로운 프레임워크인 DeviceDiscoveryUI를 도입하고 있습니다.

00:01:57.000 --> 00:02:12.000
iOS 16의 새로운 기능인 DeviceDiscoveryUI는 네트워크 프레임워크와 페어링하여 Apple TV 앱과 주변 iPhone, iPad 및 Apple Watch 간의 장치 간 연결을 가능하게 합니다.

00:02:12.000 --> 00:02:19.000
DeviceDiscoveryUI는 주변 장치를 쉽게 발견할 수 있도록 시스템 UI를 제공합니다.

00:02:19.000 --> 00:02:24.000
장치가 발견되면, 앱은 해당 장치에 대한 연결을 쉽게 열 수 있습니다.

00:02:24.000 --> 00:02:32.000
이 연결은 시스템 UI를 사용하여 설정되었기 때문에, 로컬 네트워크 액세스 권한 관리에 대해 걱정할 필요가 없습니다.

00:02:32.000 --> 00:02:42.000
그리고 시스템이 이 연결을 안전하게 설정하기 때문에, 플랫폼이 전송된 데이터를 암호화하기 때문에 더 이상 자신의 키 교환을 구현할 필요가 없습니다.

00:02:42.000 --> 00:02:45.000
여기서 우리는 시스템 UI가 작동하는 것을 볼 수 있다.

00:02:45.000 --> 00:02:55.000
왼쪽에는 앱이 장치 간 연결로 무엇을 하는지 설명하는 필수 사용 설명 문자열과 함께 앱의 아이콘이 표시됩니다.

00:02:55.000 --> 00:02:59.000
오른쪽에는 발견된 장치 목록이 있습니다.

00:02:59.000 --> 00:03:08.000
일부 앱은 특정 플랫폼에서만 사용할 수 있기 때문에, 플랫폼별로 발견된 장치를 필터링할 수 있습니다.

00:03:08.000 --> 00:03:15.000
"아담의 아이폰"을 선택하면, 시스템은 해당 장치 간의 연결을 만들 수 있는 권한을 요청합니다.

00:03:15.000 --> 00:03:21.000
이 명시적인 사용자 동의로, 당신은 더 이상 전체 로컬 네트워크에 대한 액세스를 요청할 필요가 없습니다.

00:03:21.000 --> 00:03:29.000
그리고 권한이 부여되면, 들어오는 연결을 처리하기 위해 선택한 장치에서 앱이 실행됩니다.

00:03:29.000 --> 00:03:35.000
이것은 연결을 설정하기 전에 더 이상 두 장치에서 앱을 실행할 필요가 없다는 것을 의미합니다.

00:03:35.000 --> 00:03:44.000
"Joe's Apple Watch"에 대한 권한이 부여되면, 시스템은 즉시 앱을 실행하여 두 장치가 연결할 수 있도록 합니다.

00:03:44.000 --> 00:03:49.000
그리고 앱이 그 장치에 설치되어 있지 않다면, 시스템은 사람들을 App Store로 데려갈 것을 제안합니다.

00:03:49.000 --> 00:03:54.000
그렇게 하면 그들은 즉시 앱을 다운로드하고 새로운 기능을 사용할 수 있습니다.

00:03:54.000 --> 00:03:57.000
watchOS에서 어떻게 보이는지는 다음과 같습니다.

00:03:57.000 --> 00:04:04.000
버튼을 탭하면 App Store에서 앱 페이지가 즉시 실행되어 빠르고 쉽게 다운로드할 수 있습니다.

00:04:04.000 --> 00:04:13.000
이제 DeviceDiscoveryUI가 앱을 위해 무엇을 할 수 있는지 논의했으므로, 이 새로운 프레임워크를 채택하는 방법을 살펴봅시다.

00:04:13.000 --> 00:04:18.000
이전 세션에서, 우리는 네트워크 프레임워크를 사용하여 Tic-Tac-Toe 앱을 만들었습니다.

00:04:18.000 --> 00:04:26.000
오늘 우리는 주변 장치를 검색하고 연결하기 위해 DeviceDiscoveryUI를 사용하도록 업데이트할 것입니다.

00:04:26.000 --> 00:04:31.000
이전 반복에서, 우리 앱은 iOS 기기 간의 게임 플레이만 지원했습니다.

00:04:31.000 --> 00:04:41.000
그래서 시작하기 위해, 우리는 유니버설 구매를 위한 프로젝트를 업데이트하고 모두 동일한 번들 ID를 공유하는 tvOS와 watchOS 대상을 추가했습니다.

00:04:41.000 --> 00:04:49.000
그리고 우리는 다른 플레이어와 경쟁하는 대신 장치를 사용하여 TV에서 AI와 대결할 수 있도록 앱을 변경했습니다.

00:04:49.000 --> 00:05:00.000
다음으로, 우리는 새로운 Tic-Tac-Toe 애플리케이션 서비스를 선언하기 위해 tvOS 애플리케이션과 다른 플랫폼 모두에서 Info.plist를 추가해야 합니다.

00:05:00.000 --> 00:05:05.000
마지막으로, 우리는 새로운 장치 선택기를 제시하고 결과 엔드포인트를 사용하여 연결을 만들 것입니다.

00:05:05.000 --> 00:05:14.000
이제 Xcode로 전환하여 새로운 Info.plist 키가 무엇인지, 그리고 앱에 어떻게 추가해야 하는지 보여드리겠습니다.

00:05:14.000 --> 00:05:22.000
tvOS에서, 우리 앱은 어떤 애플리케이션 서비스를 발견해야 하는지, 그리고 그 서비스가 어떤 플랫폼을 지원하는지 시스템에 알려야 합니다.

00:05:22.000 --> 00:05:28.000
그렇게 하려면, 우리는 새로운 "응용 프로그램 서비스" Info.plist를 추가해야 합니다.

00:05:28.000 --> 00:05:32.000
이 사전은 두 개의 다른 배열 중 하나에 매핑될 것이다.

00:05:32.000 --> 00:05:40.000
tvOS에서, 우리는 앱이 발견한 모든 애플리케이션 서비스를 포함하는 "찾아보기" 배열을 선언해야 합니다.

00:05:40.000 --> 00:05:44.000
각 항목은 다른 애플리케이션 서비스를 나타낸다.

00:05:44.000 --> 00:05:48.000
우리의 첫 번째 항목은 Tic-Tac-Toe 애플리케이션 서비스를 나타냅니다.

00:05:48.000 --> 00:05:55.000
이 서비스가 지원하는 서비스 식별자, 사용 설명 및 플랫폼이 포함된 사전입니다.

00:05:55.000 --> 00:06:00.000
서비스 식별자는 우리 서비스의 이름인 "TicTacToe"입니다.

00:06:00.000 --> 00:06:08.000
사용 설명은 앱이 다른 로컬 장치에 액세스해야 하는 이유를 설명하기 위해 장치 선택기에 표시될 문자열입니다.

00:06:08.000 --> 00:06:11.000
마지막으로, 우리는 플랫폼 지원을 받습니다.

00:06:11.000 --> 00:06:18.000
이 배열에는 서비스가 지원하는 플랫폼이 포함되어 있으며, 시스템은 그에 따라 발견된 장치를 필터링할 것이다.

00:06:18.000 --> 00:06:24.000
여기에서 저희 서비스가 iOS, iPadOS 및 watchOS 장치를 지원한다는 것을 알 수 있습니다.

00:06:24.000 --> 00:06:31.000
우리는 이미 iOS와 iPadOS에 사용되는 Info.plist를 해당 "애플리케이션 서비스" 사전으로 업데이트했습니다.

00:06:31.000 --> 00:06:35.000
이제 우리는 watchOS의 plist를 업데이트할 것이다.

00:06:35.000 --> 00:06:38.000
이번에는 "광고" 배열을 선언합니다.

00:06:38.000 --> 00:06:47.000
DeviceDiscoveryUI는 실행되지 않을 때 앱을 실행하기 때문에, 시스템은 이 배열을 사용하여 어떤 서비스를 광고할지 알 수 있습니다.

00:06:47.000 --> 00:06:52.000
"광고" 배열의 항목은 "TicTacToe" 서비스 식별자만 필요합니다.

00:06:52.000 --> 00:06:59.000
서비스 식별자가 tvOS Info.plist에 선언된 모든 플랫폼에 대해 동일한지 확인하십시오.

00:06:59.000 --> 00:07:08.000
이제 Tic-Tac-Toe가 애플리케이션 서비스를 검색하고 광고하도록 구성되었으므로, 실제로 장치 선택기 UI를 표시하도록 합시다.

00:07:08.000 --> 00:07:10.000
우리의 사용 설명은 왼쪽에 나타난다.

00:07:10.000 --> 00:07:18.000
우리는 이 문자열이 활성화되어 있는지 확인하고 사람들에게 장치를 연결하고 싶은 이유와 어떤 데이터를 공유하고 있는지 알려줍니다.

00:07:18.000 --> 00:07:23.000
Tic-Tac-Toe의 경우, 우리는 연결된 장치를 컨트롤러로 사용하여 게임을 하고 있습니다.

00:07:23.000 --> 00:07:40.000
Xcode로 돌아가서, DeviceDiscoveryUI는 주변 장치를 수동으로 탐색할 필요성을 대체하고 연결을 확보하기 때문에, 더 이상 필요하지 않기 때문에 PeerBrowser 파일과 NWParameters에 대한 암호 확장자를 제거할 수 있습니다.

00:07:40.000 --> 00:07:48.000
이제, 우리는 주변 장치에 어떻게 연결하고 싶은지 설명하기 위한 매개 변수가 필요합니다.

00:07:48.000 --> 00:08:00.000
첫째, 우리는 NWParameters에서 새로운 편의 이니셜라이저인 applicationService를 사용하여 이러한 종류의 로컬 연결에 필요한 모든 것을 제공합니다.

00:08:00.000 --> 00:08:10.000
다음으로, 우리는 변경 없이 게임플레이 액션을 전달하기 위해 기존 프레이머를 사용할 수 있으며, 이러한 매개 변수의 프로토콜 스택에 간단히 추가할 수 있습니다.

00:08:10.000 --> 00:08:13.000
이제, 우리는 장치 선택기를 만들고 보여줄 준비가 되었습니다.

00:08:13.000 --> 00:08:21.000
장치 선택기는 우리의 애플리케이션이 근처의 iPhone, iPad 및 Apple Watch를 발견하는 방법입니다.

00:08:21.000 --> 00:08:26.000
먼저, 장치 선택기가 현재 장치에서 지원되는지 확인해야 합니다.

00:08:26.000 --> 00:08:34.000
그렇게 하기 위해, 우리는 선택기와 함께 사용할 탐색 설명자와 매개 변수로 isSupported 함수를 호출합니다.

00:08:34.000 --> 00:08:40.000
그것이 사실로 돌아온다고 가정하면, 우리는 계속해서 장치 선택기를 만들 수 있다.

00:08:40.000 --> 00:08:55.000
우리는 이전에 만든 매개 변수와 .applicationService 유형의 탐색 설명자로 장치 선택기를 인스턴스화하여 Info.plist에서 정의한 애플리케이션 서비스의 이름을 지정합니다.

00:08:55.000 --> 00:09:00.000
이제 장치 선택기가 만들어졌으므로, 우리는 뷰 컨트롤러를 제시해야 합니다.

00:09:00.000 --> 00:09:07.000
장치 선택기는 항상 전체 화면 모달 보기로 표시되어야 합니다.

00:09:07.000 --> 00:09:12.000
다음으로, 우리는 피커의 비동기 엔드포인트 속성에 접근해야 합니다.

00:09:12.000 --> 00:09:21.000
연결이 확인되고 원격 장치에서 애플리케이션이 실행되면, 우리는 NWEndpoint를 받게 될 것이며, 실행은 계속될 것입니다.

00:09:21.000 --> 00:09:31.000
이제 우리의 애플리케이션이 NWEndpoint를 받았으므로, 이전 Tic-Tac-Toe 버전에서 했던 것처럼 선택한 장치에 연결하는 데 사용할 수 있습니다.

00:09:31.000 --> 00:09:37.000
우리는 장치 선택기에 제공된 연결을 열 때 동일한 매개 변수를 사용할 것입니다.

00:09:37.000 --> 00:09:44.000
매개 변수를 제외하고, 이 장치에 대한 연결을 여는 것은 이전과 정확히 동일하게 보입니다.

00:09:44.000 --> 00:09:54.000
선택한 장치로 이동하면, 애플리케이션이 실행되면, NWListener를 만들어 애플리케이션이 시스템에 한 약속을 즉시 이행해야 합니다.

00:09:54.000 --> 00:10:03.000
NWListener는 해당 애플리케이션 서비스에 대한 들어오는 연결을 수락하기 위해 앱이 시작되는 즉시 생성되어야 합니다.

00:10:03.000 --> 00:10:14.000
NWListener는 이전과 정확히 동일한 매개 변수로 생성되어야 하며, Info.plist의 식별자를 사용하여 리스너에 애플리케이션 서비스를 설정해야 합니다.

00:10:14.000 --> 00:10:23.000
TV가 이 장치에 대한 연결을 열면, 우리가 설정한 청취자는 이전과 마찬가지로 새로운 연결 핸들러에서 그 연결을 받게 될 것입니다.

00:10:23.000 --> 00:10:29.000
그래서 이제 연결이 제대로 설정되었으므로, 우리는 애플리케이션 상태 전환을 처리해야 한다.

00:10:29.000 --> 00:10:37.000
애플리케이션이 백그라운드가 되면, 연결은 ECONNABORTED 관련 오류와 함께 실패한 상태로 전환됩니다.

00:10:37.000 --> 00:10:45.000
장치 간의 통신을 계속하고 싶다면, TV에서 동일한 엔드포인트로 새로운 연결을 설정합니다.

00:10:45.000 --> 00:10:54.000
일단 시작되면, 이 새로운 연결은 준비 상태로 유지되며 앱이 선택한 장치에서 재개되면 준비 상태로 이동합니다.

00:10:54.000 --> 00:11:01.000
그 장치에서, 새로운 연결은 동일한 NWListener로 전달될 것이며 우리의 활동을 재개하는 데 사용될 수 있습니다.

00:11:01.000 --> 00:11:02.000
그리고 그게 다야.

00:11:02.000 --> 00:11:07.000
DeviceDiscoveryUI로 마이그레이션하기 위해 해야 할 모든 것이 이제 완료되었습니다.

00:11:07.000 --> 00:11:09.000
우리 게임이 작동하는 걸 보자.

00:11:09.000 --> 00:11:19.000
이 앱은 TV에서 실행되며, 우리는 장치 선택기를 표시하기 위해 상대 찾기를 누릅니다.

00:11:19.000 --> 00:11:22.000
우리가 장치를 선택할 때, 그것은 허가를 묻는다.

00:11:22.000 --> 00:11:32.000
승인되면, 앱은 게임 세션에 즉시 시작됩니다.

00:11:32.000 --> 00:11:43.000
이제, 우리는 보드에 이모티콘을 배치하여 TV를 상대로 플레이할 수 있습니다.

00:11:43.000 --> 00:11:45.000
좋아.

00:11:45.000 --> 00:11:49.000
그리고 그것이 장치를 Apple TV에 연결하는 것이 얼마나 쉬운지이다.

00:11:49.000 --> 00:11:57.000
Tic-Tac-Toe는 개발자 웹사이트에서 사용할 수 있으므로, 오늘 논의한 모든 코드를 다운로드하고 탐색할 수 있습니다.

00:11:57.000 --> 00:12:01.000
질문이 있다면, 개발자 포럼에 게시하세요.

00:12:01.000 --> 00:12:07.000
원활한 장치 간 경험을 제공하기 위해 앱에 DeviceDiscoveryUI를 채택하는 것을 고려하십시오.

00:12:07.000 --> 00:12:10.000
그리고 우리에게 피드백을 주세요.

00:12:10.000 --> 00:12:14.000
우리는 장치 간 통신이 필수적인 경험이라는 것을 알고 있다.

00:12:14.000 --> 00:12:17.000
DeviceDiscoveryUI는 개발자 피드백에 대한 응답으로 만들어졌습니다.

00:12:17.000 --> 00:12:25.000
우리는 당신과 함께 이러한 기능을 구축하고 싶으므로, DeviceDiscoveryUI에서 보고 싶은 모든 것에 대해 피드백 어시스턴트에 보고서를 제출하십시오.

00:12:25.000 --> 00:12:31.000
우리는 당신의 앱을 더 좋게 만들기 위해 이 기술을 함께 개선하게 되어 기쁩니다.

00:12:31.000 --> 23:59:59.000
저와 함께 해주셔서 정말 감사드리며, 멋진 WWDC 2022를 보내십시오.

