WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
드류 하스: 안녕. 제 이름은 드류 하스이고, 접근성 팀의 엔지니어입니다.

00:00:14.000 --> 00:00:19.000
저는 접근 가능한 단일 앱 모드 경험을 만드는 방법에 대해 이야기하기 위해 왔습니다.

00:00:19.000 --> 00:00:28.000
단일 앱 모드를 사용하면 개발자로서 iOS 및 iPadOS 장치에서 특정 동작을 제한하여 사용자에게 정말 독특한 방식으로 서비스를 제공할 수 있습니다.

00:00:28.000 --> 00:00:33.000
즉, 이러한 모드를 사용하면 장치를 단일 앱으로 잠글 수 있습니다.

00:00:33.000 --> 00:00:39.000
모드에 따라, 제한은 시스템이나 앱에 의해 시작됩니다.

00:00:39.000 --> 00:00:46.000
이것은 제한된 상태와 무제한 상태 사이의 타이밍을 제어할 수 있기 때문에 좋습니다.

00:00:46.000 --> 00:00:54.000
또한 자동 잠금이 활성화되었는지 여부와 같은 단일 앱 모드 위에 추가 제한을 적용할 수 있습니다.

00:00:54.000 --> 00:00:57.000
접근성 사용 사례를 고려하는 것을 잊지 맙시다.

00:00:57.000 --> 00:01:06.000
접근성 기능에 의존하는 사람들이 장치가 제한되어 있더라도 사용할 수 있도록 켤 수 있도록 해야 합니다.

00:01:06.000 --> 00:01:11.000
이것은 당신의 앱이 보조 기술을 사용하는 사람들에게 포괄적이라는 것을 보장합니다.

00:01:11.000 --> 00:01:15.000
저는 언제 단일 앱 모드를 사용해야 하는지에 대한 몇 가지 예에 대해 이야기하고 싶습니다.

00:01:15.000 --> 00:01:21.000
고객이 레스토랑이나 행사에서 음식이나 음료를 주문하는 앱을 개발하고 있다고 가정해 봅시다.

00:01:21.000 --> 00:01:29.000
또는 환자가 정보를 작성하기 위해 의료진이 공유하는 장치를 취급하는 의료 사무실에서 사용될 앱.

00:01:29.000 --> 00:01:33.000
또는 심지어 교실에서 학생들을 위한 시험을 용이하게 하는 데 도움이 되는 앱.

00:01:33.000 --> 00:01:40.000
이것들은 모두 단일 앱 모드 제한이 사용자에게 집중된 환경을 만드는 데 도움이 되는 시나리오입니다.

00:01:40.000 --> 00:01:45.000
그리고 코드를 작성하지 않았더라도 앱이 단일 앱 모드에서 사용될 수 있다는 것을 알고 있었나요?

00:01:45.000 --> 00:01:53.000
맞습니다, Guided Access는 사용자가 모든 앱을 단일 앱 모드로 전환할 수 있는 접근성 기능입니다.

00:01:53.000 --> 00:02:01.000
먼저, 가이드 액세스에 대해 이야기하고 사람들이 이 모드에서 앱을 사용할 때 고려해야 할 몇 가지 고려 사항을 살펴볼 것입니다.

00:02:01.000 --> 00:02:08.000
다음으로, 특정 API와 프레임워크를 채택하여 앱 내에서 프로그래밍 방식으로 시작하는 단일 앱 모드에 대해 이야기하겠습니다.

00:02:08.000 --> 00:02:15.000
그리고 마지막으로, 우리는 단일 앱 모드에서 특별히 사용하도록 설계된 접근성 API를 제공합니다.

00:02:15.000 --> 00:02:22.000
이 API를 사용하여 특정 접근성 기능을 켜거나 끄면 원활하고 접근 가능한 경험을 만들 수 있습니다.

00:02:22.000 --> 00:02:25.000
Guided Access와 함께 먼저 다이빙을 합시다.

00:02:25.000 --> 00:02:32.000
가이드 액세스를 시작하려면, 먼저 접근성 설정에서 켜져 있는지 확인한 다음, 잠그고 싶은 앱을 여세요.

00:02:32.000 --> 00:02:37.000
접근성 단축키를 수행하려면 측면 버튼을 세 번 클릭하세요.

00:02:37.000 --> 00:02:42.000
이것은 시스템 제한을 구성하는 가이드 액세스 작업 공간을 보여줍니다.

00:02:42.000 --> 00:02:45.000
그런 다음 시작을 눌러 시작하세요.

00:02:45.000 --> 00:02:48.000
이제 그 장치는 제한된 상태에 있다.

00:02:48.000 --> 00:02:53.000
그것은 가장 앞쪽에 있는 앱에 잠겨 있으며, 옵션 메뉴에서 구성한 제한이 적용됩니다.

00:02:53.000 --> 00:02:59.000
이것은 인지 장애가 있는 사람들을 위한 가이드 경험을 만드는 데 도움이 된다.

00:02:59.000 --> 00:03:04.000
Guided Access를 종료하려면, 접근성 단축키를 다시 실행하기만 하면 됩니다.

00:03:04.000 --> 00:03:16.000
옵션 메뉴를 사용하면 터치 상호 작용, 디스플레이 모션 및 소프트웨어 키보드뿐만 아니라 볼륨 버튼 및 잠자기/깨우기 버튼과 같은 하드웨어 버튼 이벤트를 제한할 수 있습니다.

00:03:16.000 --> 00:03:32.000
이러한 방식으로 통제된 환경을 갖는 것은 인지 장애가 있는 사람들에게 특히 도움이 되지만, 이 기능은 접근성 사용자부터 이러한 장치 제한에 쉽게 접근할 수 있는 어린 아이들의 부모에 이르기까지 다양한 사용자가 즐길 수 있습니다.

00:03:32.000 --> 00:03:34.000
여기가 네가 들어오는 곳이야!

00:03:34.000 --> 00:03:41.000
UIAccessibility API를 사용하면 가이드 액세스 중에 앱의 경험을 맞춤화하기 위해 사용자 지정 제한을 만들 수 있습니다.

00:03:41.000 --> 00:03:50.000
인지 장애가 있는 사람이 옵션을 잃거나 압도당할 수 있는 앱의 영역을 제한하거나 조정할 수 있는 기회를 사용하세요.

00:03:50.000 --> 00:03:54.000
저는 인지 접근성에 대한 몇 가지 디자인 고려 사항을 공유하고 싶습니다.

00:03:54.000 --> 00:04:02.000
이것들은 가능하다면 항상 따라야 하는 원칙이지만, 특히 가이드 액세스 중에 앱에서 따라야 합니다.

00:04:02.000 --> 00:04:04.000
첫 번째는 실수를 용서하는 것이다.

00:04:04.000 --> 00:04:16.000
계정 정보나 결제 정보를 삭제하거나 수정하는 것과 같은 중요하거나 되돌릴 수 없는 작업을 수행하기 전에 사용자에게 경고하여 오류가 발생하기 전에 오류를 완화하십시오.

00:04:16.000 --> 00:04:24.000
모든 사람이 같은 속도로 정보를 처리하는 것은 아니기 때문에 앱의 특정 것들에 대해 행동하기 위해 타이밍에 대한 의존도를 줄이는 것을 목표로 해야 합니다.

00:04:24.000 --> 00:04:31.000
시간제 알림을 사용하거나 짧은 시간 초과 후 자동으로 작업을 수행하면 앱을 사용하기가 더 어려워집니다.

00:04:31.000 --> 00:04:40.000
그리고 당신은 항상, 항상, 사용자에게 결제하기 전에 확인할 수 있는 기회를 주어야 하며, 여기에는 원탭으로 구매할 수 있는 앱이 포함됩니다.

00:04:40.000 --> 00:04:46.000
이러한 고려 사항으로 앱을 디자인하는 것은 접근성 사용자의 독립성을 촉진합니다.

00:04:46.000 --> 00:04:48.000
나는 너에게 예시를 보여주고 싶어.

00:04:48.000 --> 00:04:54.000
저는 사람들이 일주일 동안 얼마나 많이 읽었는지 추적할 수 있도록 도와주는 Reading Observatory라는 앱을 개발하고 있습니다.

00:04:54.000 --> 00:05:02.000
내 앱의 홈페이지는 읽기 진행 상황을 보여주며 두 개의 버튼이 있습니다: 계정 설정과 계속 읽기 버튼.

00:05:02.000 --> 00:05:08.000
가이드 액세스가 활성화되어 있는 동안 계정 설정 버튼을 잠그는 앱에 대한 사용자 지정 제한을 추가했습니다.

00:05:08.000 --> 00:05:19.000
이것은 내 앱에 이 제한에 따라 독특한 경험을 제공하여 사용자가 의도하지 않은 변경을 할 수 있는 계정 설정과 같은 다른 곳에서 길을 잃는 것을 방지합니다.

00:05:19.000 --> 00:05:27.000
이것은 또한 누군가가 갇힐 수 있는 횟수를 줄이고 읽는 내 앱의 주요 목적을 가지고 다시 정상 궤도에 오르는 데 도움이 필요할 것이다.

00:05:27.000 --> 00:05:33.000
이렇게 하려면, 먼저 AppDelegate를 UIGuidedAccessRestrictionDelegate 프로토콜에 준수하십시오.

00:05:33.000 --> 00:05:39.000
식별자 배열을 제공하여 Guided Access에 각 제한에 대해 알려야 합니다.

00:05:39.000 --> 00:05:41.000
난 하나밖에 없어.

00:05:41.000 --> 00:05:49.000
또한 각각에 대한 사용자 대면 제목과 추가 세부 사항을 제공해야 하는 경우 선택적 설명을 제공해야 합니다.

00:05:49.000 --> 00:05:52.000
이 문자열들은 옵션 메뉴에 나타날 것이다.

00:05:52.000 --> 00:06:00.000
마지막으로, 제한을 전환할 때 콜백을 받기 위해 guidedAccessRestriction (withIdentifier:didChange:) 메소드를 구현하십시오.

00:06:00.000 --> 00:06:13.000
이것은 앱이 특정 버튼에 대한 사용자 상호 작용을 끄거나 이전 디자인 원칙 중 일부를 도입하는 것과 같은 제한을 수용할 수 있는 논리를 수행하기 위한 알림을 게시할 수 있는 곳입니다.

00:06:13.000 --> 00:06:21.000
UIAccessibility에서 guidedAccessRestrictionState(forIdentifier:)를 호출하여 언제든지 사용자 지정 제한이 활성화되었는지 확인하십시오.

00:06:21.000 --> 00:06:32.000
모든 시스템이 제공하는 제한과 사용자 지정 앱 기반 제한은 가이드 액세스를 매우 구성 가능하게 만들기 때문에 환상적인 접근성 기능입니다.

00:06:32.000 --> 00:06:36.000
가이드 액세스는 접근성 설정에서 찾을 수 있습니다.

00:06:36.000 --> 00:06:41.000
다른 단일 앱 모드를 사용하면 장치에서 제한된 세션을 프로그래밍 방식으로 입력할 수 있습니다.

00:06:41.000 --> 00:06:48.000
그들은 Guided Access와 유사점을 공유하지만, 주요 차이점은 당신이 프로그래밍 방식으로 이 모드로 들어가고 있다는 것입니다.

00:06:48.000 --> 00:06:54.000
이것은 단일 앱 모드 세션을 설정, 시작 및 사용자 정의하기 위해 이야기할 것이 많다는 것을 의미합니다.

00:06:54.000 --> 00:06:57.000
이전의 각 시나리오를 기억하시나요?

00:06:57.000 --> 00:07:07.000
테스트 환경에서 의료 사무실에서 레스토랑 키오스크로 사용되는 iPad - 단일 앱 모드는 이러한 모든 상황에 적합한 솔루션입니다.

00:07:07.000 --> 00:07:14.000
각각은 약간 다른 요구를 가질 수 있지만, 그들은 모두 장치를 단일 앱으로 잠그는 이점을 누릴 수 있다.

00:07:14.000 --> 00:07:21.000
이것은 사람들이 집에 가기 위해 스와이프하거나, 설정에서 물건을 수정하거나, 심지어 사파리에서 무언가를 찾는 것을 방지합니다.

00:07:21.000 --> 00:07:28.000
이것들 각각을 살펴보고 우리가 필요한 제한 사항에 따라 단일 앱 모드를 추천하겠습니다.

00:07:28.000 --> 00:07:32.000
첫 번째 모드는 가장 기본적이며, 배포하기 가장 쉽다.

00:07:32.000 --> 00:07:35.000
그것은 단순히 단일 앱 모드라고 불린다.

00:07:35.000 --> 00:07:42.000
이것은 당신이 거의 영구적으로 단일 앱에 머물려고 하는 장치가 있을 때 올바른 해결책입니다.

00:07:42.000 --> 00:07:48.000
재부팅 후에도 앱 내 잠겨 있으며, 유지 보수를 위해 수동 개입이 필요하지 않습니다.

00:07:48.000 --> 00:07:51.000
참여도가 낮은 접근 방식에 좋습니다.

00:07:51.000 --> 00:07:52.000
하지만 몇 가지 고려 사항!

00:07:52.000 --> 00:07:55.000
그 장치는 감독되어야 한다.

00:07:55.000 --> 00:08:04.000
감독 도구를 사용하면 대량의 장치를 한 번에 단일 앱 모드로 잠글 수 있으므로, 많은 장치로 작업하는 경우 매우 확장 가능한 솔루션입니다.

00:08:04.000 --> 00:08:11.000
Apple Configurator를 사용하면 단일 앱 모드로 전환하는 것을 포함하여 다양한 방법으로 감독되는 장치를 관리할 수 있습니다.

00:08:11.000 --> 00:08:19.000
감독되는 장치를 선택한 다음, 고급에서 단일 앱 모드 시작을 선택하세요.

00:08:19.000 --> 00:08:22.000
마지막으로 해야 할 일은 앱을 선택하는 것입니다.

00:08:22.000 --> 00:08:28.000
일단 그렇게 하면, 그것은 자동으로 실행되고, 전경에 고정될 것이다.

00:08:28.000 --> 00:08:30.000
이 모드를 종료하는 다른 방법은 없습니다.

00:08:30.000 --> 00:08:38.000
제가 언급했듯이, 관리 소프트웨어를 통해 단일 앱 모드를 종료하지 않는 한 재부팅 후에도 이 앱에 잠긴 상태로 유지됩니다.

00:08:38.000 --> 00:08:45.000
자율 단일 앱 모드는 제한된 상태가 자주 들어가고 나가는 상황에 더 적합합니다.

00:08:45.000 --> 00:08:52.000
예를 들어, 새로운 환자가 iPad에 정보를 입력한 다음 직원에게 다시 건네주는 의료 사무실에서.

00:08:52.000 --> 00:08:55.000
이것은 제한 사이에 수동 개입이 있다는 것을 의미한다.

00:08:55.000 --> 00:09:01.000
당신의 앱은 단일 API 메소드 호출을 사용하여 이 작업을 자체적으로 수행할 수 있습니다.

00:09:01.000 --> 00:09:14.000
다시 말하지만, 고려 사항 - 장치를 감독해야 하며, 이 API를 사용하려는 앱은 장치의 구성 프로필에 나열되도록 허용해야 합니다. 그렇지 않으면 권한이 없기 때문에 잠금 요청이 실패할 것입니다.

00:09:14.000 --> 00:09:21.000
강력한 방법은 UIAccessibility의 requestGuidedAccessSession(enabled:complet ionHandler:)입니다.

00:09:21.000 --> 00:09:23.000
야, 그거 친숙해 보여! 그치?

00:09:23.000 --> 00:09:27.000
이 API는 Guided Access의 뿌리를 바로 활용합니다.

00:09:27.000 --> 00:09:32.000
당신은 본질적으로 이 코드로 프로그래밍 방식으로 이 기능을 입력하고 종료하고 있습니다.

00:09:32.000 --> 00:09:33.000
그거 멋지지 않아?

00:09:33.000 --> 00:09:38.000
그것은 가이드 액세스가 다른 단일 앱 모드가 존재할 수 있는 기초 역할을 하기 때문이다.

00:09:38.000 --> 00:09:40.000
네가 그걸 몰랐다고 장담해!

00:09:40.000 --> 00:09:43.000
이 코드가 어떻게 작동하는지 봅시다.

00:09:43.000 --> 00:09:48.000
내가 준비되면 전화할 이 모드에 들어가고 나가는 방법이 각각 있어.

00:09:48.000 --> 00:09:57.000
그들은 우리가 제한된 상태에 들어갈 때 새로운 환자 가입 시트를 시작한 다음 종료 시 정보를 보관하는 것과 같은 다른 작업을 수행하고 있습니다.

00:09:57.000 --> 00:10:02.000
물론, 당신은 무언가 잘못되었는지 알기 위해 완료 핸들러의 결과를 적절하게 다루고 싶을 것입니다.

00:10:02.000 --> 00:10:08.000
그렇다면, 당신은 사용자에게 경고를 주고 그들이 다시 시도할 수 있도록 경험을 계속하는 것을 보류하고 싶을 수도 있습니다.

00:10:08.000 --> 00:10:16.000
UIAccessibility에서 isGuidedAccessEnabled를 호출하여 언제든지 자율 단일 앱 모드가 활성화되어 있는지 확인하십시오.

00:10:16.000 --> 00:10:23.000
또한 이 모드에 들어가거나 나갈 때 추가 코드를 트리거하기 위해 guidedAccessStatusDidChangeNotification을 관찰하십시오.

00:10:23.000 --> 00:10:36.000
그리고 이 API를 사용하려는 앱은 앱의 번들 ID를 자율 단일 앱 모드에 허용된 애플리케이션으로 나열하는 것을 포함하여 적절한 감독과 관리가 있어야 한다는 것을 기억하십시오.

00:10:36.000 --> 00:10:38.000
그리고 마지막으로, 평가 모드.

00:10:38.000 --> 00:10:45.000
이것은 앱이 테스트 중에 특정 기능을 제한함으로써 불공정한 이점을 방지하는 것을 목표로 하는 올바른 모드입니다.

00:10:45.000 --> 00:10:54.000
자동 수정, 맞춤법 검사 및 단일 앱 모드 잠금을 끄면 응시자가 외부 메모나 리소스에 액세스할 수 없습니다.

00:10:54.000 --> 00:11:02.000
최근에 이러한 프레임워크는 자동 평가 구성 프레임워크를 도입했을 때 iOS와 macOS용으로 통합되었습니다!

00:11:02.000 --> 00:11:10.000
이를 사용하려면, 이전 모드처럼 장치를 감독할 필요는 없지만, 앱에 대한 평가 자격을 위해 Apple에 신청해야 합니다.

00:11:10.000 --> 00:11:15.000
자격 신청에 대한 자세한 정보는 개발자 문서에서 찾을 수 있습니다.

00:11:15.000 --> 00:11:25.000
제 동료 Josh는 수많은 코드 예제와 문서 리소스를 포함하여 자동 평가 구성 프레임워크를 사용하는 방법을 설명하는 환상적인 WWDC 세션을 가지고 있습니다.

00:11:25.000 --> 00:11:27.000
가서 확인해 보세요.

00:11:27.000 --> 00:11:37.000
어떤 단일 앱 모드 솔루션이 당신에게 적합한지 알게 되거나, 이미 작동하는 솔루션이 있다면, 보조 기술을 사용하는 사람들이 당신의 앱을 사용한다는 것을 명심하세요.

00:11:37.000 --> 00:11:42.000
이 경험에 접근할 수 있도록 하기 위해 취해야 할 추가 단계가 있을 수 있습니다.

00:11:42.000 --> 00:11:51.000
레스토랑 키오스크로 사용되는 iPad의 고전적인 예에서, 맹인 고객이 주문하러 온다는 것을 고려해 봅시다.

00:11:51.000 --> 00:11:55.000
장치가 단일 앱 모드로 고정되어 있다면, 우리는 문제가 있다.

00:11:55.000 --> 00:12:00.000
이 고객을 위해 설정을 열고, 접근성으로 이동하고, VoiceOver를 켤 수 없습니다.

00:12:00.000 --> 00:12:03.000
그래서 넌 뭘 할 수 있어?

00:12:03.000 --> 00:12:10.000
Apple Configurator 및 기타 장치 관리 소프트웨어는 단일 앱 모드 옵션을 구성하는 데 도움을 줍니다.

00:12:10.000 --> 00:12:29.000
몇 가지 접근성 기능을 항상 활성화할 수 있으며, "트리플 클릭" 메뉴라고도 하는 접근성 단축키는 사용자가 VoiceOver, Zoom, Invert Colors, AssistiveTouch 및 Voice Control과 같은 접근성 기능을 빠르게 전환할 수 있도록 구성할 수 있습니다.

00:12:29.000 --> 00:12:39.000
이러한 기능이 항상 켜져 있거나 접근성 단축키에 할당될 때, 이러한 기술에 의존하는 사람들이 앱을 탐색하는 동안 사용할 수 있도록 합니다.

00:12:39.000 --> 00:12:44.000
이것을 설정하는 것은 꽤 쉽기 때문에, 그렇게 할 수 있는 기회를 놓치지 마세요.

00:12:44.000 --> 00:12:48.000
하지만 이러한 옵션은 단일 앱 모드로 들어가기 전에 구성해야 합니다.

00:12:48.000 --> 00:12:51.000
그래서 싱글 앱 모드는 어때?

00:12:51.000 --> 00:12:57.000
UIAccessibility에서 API를 사용하여 특정 접근성 기능을 코드로 직접 전환하세요.

00:12:57.000 --> 00:13:07.000
그것은 접근성 단축키로 기능을 전환하는 것에 대한 훌륭한 대안이며, 이는 장치가 하드웨어 버튼을 차단하는 키오스크 인클로저에 둘러싸여 있을 때 유용합니다.

00:13:07.000 --> 00:13:16.000
접근성 기능을 쉽게 끌 수 있도록 이 API를 만들었으므로, 사용자 간의 하우스키핑 및 재설정 상태를 수행할 수 있습니다.

00:13:16.000 --> 00:13:20.000
이렇게 하려면, UIAccessibility에서 configureForGuidedAccess를 호출하세요.

00:13:20.000 --> 00:13:25.000
호환 가능한 접근성 기능과 활성화 여부에 관계없이 통과해야 합니다.

00:13:25.000 --> 00:13:32.000
이것은 줌, 보이스오버, 색상 반전, 보조 터치 및 그레이스케일에서 작동합니다.

00:13:32.000 --> 00:13:43.000
따라서 앱에 가이드 액세스에 대한 사용자 지정 제한이 있든 단일 앱 모드에 대한 전체 경험을 구축하든, 액세스할 수 있도록 하는 방법을 아는 것이 중요합니다.

00:13:43.000 --> 00:13:52.000
잘못된 종류의 제한은 사용하기에 덜 접근하기 때문에, 항상 앱을 사용하는 장애가 있는 사람의 경험을 고려하십시오.

00:13:52.000 --> 00:13:57.000
접근 가능한 단일 앱 모드 경험을 만드는 데 필요한 API를 보여드렸습니다.

00:13:57.000 --> 23:59:59.000
이제 가서 훌륭하고 접근하기 쉬운 것을 만드세요!

