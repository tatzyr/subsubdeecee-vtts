WEBVTT

00:00:00.000 --> 00:00:09.000
♪ 기악 힙합 음악 ♪

00:00:09.000 --> 00:00:13.000
안녕하세요, WWDC에 오신 것을 환영합니다.

00:00:13.000 --> 00:00:17.000
저는 Nikhil이고 오늘 SKAdNetwork에 오는 변화를 당신과 공유하겠습니다.

00:00:17.000 --> 00:00:23.000
미래로 뛰어들기 전에, 우리가 어디에 있고 어떻게 여기에 왔는지 기억합시다.

00:00:23.000 --> 00:00:32.000
애플에서, 우리는 사생활이 기본적인 인권이며 그것을 보호하는 것은 우리가 여기서 하는 모든 일에 짜여져 있다고 믿습니다.

00:00:32.000 --> 00:00:36.000
그것이 우리가 SKAdNetwork를 만든 이유이다.

00:00:36.000 --> 00:00:41.000
SKAdNetwork는 Apple의 개인 정보 보호 설치 속성 시스템입니다.

00:00:41.000 --> 00:00:47.000
어트리뷰션 데이터는 사용자의 개인 정보를 유지하면서 광고주에게 다시 전송됩니다.

00:00:47.000 --> 00:00:56.000
SKAdNetwork는 광고 네트워크, 게시자 앱 및 광고주 앱의 세 가지 배우를 포함한다.

00:00:56.000 --> 00:01:00.000
또한 SKAdNetwork 내에서 일반적으로 사용되는 몇 가지 용어를 정의해 봅시다.

00:01:00.000 --> 00:01:09.000
인상: 이 토론의 맥락에서 인상은 게시자 앱에서 SKAdNetwork로 입력됩니다.

00:01:09.000 --> 00:01:15.000
참여: 참여는 사용자가 광고주 앱과 상호 작용할 때 발생합니다.

00:01:15.000 --> 00:01:21.000
광고주 앱은 전환 가치 업데이트의 형태로 이러한 참여를 포착합니다.

00:01:21.000 --> 00:01:26.000
그리고 마지막으로, 포스트백이라고도 불리는 전환.

00:01:26.000 --> 00:01:31.000
포스트백에는 광고 네트워크로 전송되는 속성 데이터가 포함되어 있습니다.

00:01:31.000 --> 00:01:39.000
어트리뷰션 데이터는 광고 네트워크에 이것이 원래 광고의 성공적인 전환이었다는 신호를 제공한다.

00:01:39.000 --> 00:01:45.000
광고 네트워크는 광고주 앱에 대한 서명된 인상을 생성합니다.

00:01:45.000 --> 00:01:50.000
게시자 앱은 이 인상을 사용하고 이 광고를 표시합니다.

00:01:50.000 --> 00:01:54.000
그런 다음 사용자는 광고를 탭하고 앱을 설치합니다.

00:01:54.000 --> 00:02:00.000
처음 출시되었을 때, 앱은 변환 신호를 보내기 위해 API를 호출합니다.

00:02:00.000 --> 00:02:10.000
그런 다음 앱은 이 API를 반복적으로 호출하여 전환 값을 업데이트하고 다양한 수준의 참여와 소비된 광고 수익을 포착할 수 있습니다.

00:02:10.000 --> 00:02:17.000
타이머가 만료되면, 우리는 어트리뷰션 데이터가 포함된 포스트백을 광고 네트워크로 보냅니다.

00:02:17.000 --> 00:02:22.000
SKAdNetwork의 버전 기록을 빠르게 살펴보세요.

00:02:22.000 --> 00:02:28.000
SKAdNetwork 2.0은 개인 정보 보호 광고 어트리뷰션을 도입했다.

00:02:28.000 --> 00:02:34.000
2.2 게시자 앱이 사용자 지정 광고를 표시할 수 있도록 활성화되었습니다.

00:02:34.000 --> 00:02:39.000
3.0은 수상하지 못한 노출에 대한 포스트백을 추가했다.

00:02:39.000 --> 00:02:49.000
그리고 iOS 15.0에서, 우리는 모든 버전의 SKAdNetwork에 대한 개발자를 위한 포스트백 사본을 도입했습니다.

00:02:49.000 --> 00:02:59.000
SKAdNetwork의 역사에 대한 자세한 내용은 WWDC 2021의 "개인 정보 보호 광고 속성 충족" 세션을 참조하십시오.

00:02:59.000 --> 00:03:05.000
이제 SKAdNetwork 4.0의 미래에 대해 이야기해 봅시다.

00:03:05.000 --> 00:03:08.000
새로운 기능을 살펴봅시다.

00:03:08.000 --> 00:03:16.000
우리는 광고주에게 더 많은 데이터를 제공하도록 설계된 API에 대한 몇 가지 변경 사항을 살펴보는 것으로 시작할 것입니다.

00:03:16.000 --> 00:03:20.000
이에 따라, 우리는 사물의 전환 측면을 살펴볼 것이다.

00:03:20.000 --> 00:03:30.000
그런 다음 웹에서 광고의 어트리뷰션으로 넘어가고, SKAdNetwork 테스트 가능성에 대해 이야기함으로써 마무리할 것입니다.

00:03:30.000 --> 00:03:38.000
계층적 ID와 변환 값은 SKAdNetwork 4.0에 도입되는 첫 번째 새로운 기능입니다.

00:03:38.000 --> 00:03:44.000
새로운 기능에 뛰어들기 전에, 나는 군중의 익명성을 정의하고 싶다.

00:03:44.000 --> 00:03:53.000
군중 익명성은 SKAdNetwork가 귀속 데이터를 제공하는 개인 정보 보호 방식을 지칭하기 위해 사용하는 용어입니다.

00:03:53.000 --> 00:04:00.000
설치 횟수는 앱을 사용하는 사람에게 보장된 개인 정보 보호 수준을 결정합니다.

00:04:00.000 --> 00:04:06.000
하단에서, 우리는 포스트백에서 광고주에게 더 적은 어트리뷰션 데이터를 보냅니다.

00:04:06.000 --> 00:04:15.000
설치 수가 낮을 때, 우리는 추적 가능한 정보를 제한하여 개인 정보를 보호하기 위해 추가 조치를 취합니다.

00:04:15.000 --> 00:04:23.000
카운트가 확장되고 사용자의 독창성이 군중과 섞이기 시작함에 따라, 우리는 더 많은 데이터를 다시 보냅니다.

00:04:23.000 --> 00:04:32.000
마지막으로, 카운트가 가장 높은 계층에 도달함에 따라, 우리는 여전히 프라이버시를 유지하면서 가장 많은 데이터를 다시 보낼 수 있다.

00:04:32.000 --> 00:04:41.000
SKAdNetwork 4.0에서는 개인 정보 보호를 유지하면서 더 많은 데이터를 보낼 수 있는 방법이 있습니다.

00:04:41.000 --> 00:04:45.000
이를 위해, 우리는 캠페인 식별자 필드를 변경하고 있습니다.

00:04:45.000 --> 00:04:49.000
현재, 이것은 2자리 필드이다.

00:04:49.000 --> 00:04:56.000
우리는 이 필드의 범위를 4자리 숫자로 늘리고 소스 식별자로 이름을 바꿀 것입니다.

00:04:56.000 --> 00:05:09.000
새로운 이름은 캠페인 식별만을 위한 것이 아니라 당신이 사용하기로 선택한 모든 것을 나타낼 수 있는 이 분야에 대한 우리의 사고 방식을 반영합니다.

00:05:09.000 --> 00:05:19.000
이것은 단일 숫자이지만, 우리는 그것에 대해 세 개의 계층적 숫자, 2, 3, 4자리 숫자로 생각하는 것을 권장합니다.

00:05:19.000 --> 00:05:28.000
소스 식별자 필드를 계층적 숫자 집합으로 생각하는 것은 다른 숫자에 의미를 부여하는 데 도움이 된다.

00:05:28.000 --> 00:05:42.000
예를 들어, 2자리는 광고 캠페인을 나타낼 수 있고, 3자리는 사용자의 버킷 위치를 나타낼 수 있으며, 4자리는 화면의 광고 배치를 나타낼 수 있다.

00:05:42.000 --> 00:05:56.000
또는, 2자리는 치료를 의미할 수 있고, 3자리는 하루 중 버킷 시간을 나타낼 수 있으며, 4자리는 표시된 광고의 크기를 의미할 수 있습니다.

00:05:56.000 --> 00:06:05.000
이것들은 단순히 예시이며, 궁극적으로 우리가 여기서 원했던 것은 당신의 필요에 가장 잘 맞는 이 분야를 당신에게 개방하는 것이었습니다.

00:06:05.000 --> 00:06:12.000
더 많은 데이터를 제공한다는 주제를 계속하면서, 전환 값도 변화하고 있다.

00:06:12.000 --> 00:06:15.000
현재 이것은 6비트 값이다.

00:06:15.000 --> 00:06:25.000
SKAdNetwork 4.0을 통해, 우리는 두 가지 변환 값을 도입하고 있습니다: 미세한 값과 거친 값.

00:06:25.000 --> 00:06:29.000
미세한 값은 오늘날의 전환 값과 같다.

00:06:29.000 --> 00:06:34.000
거친 값은 세 가지 값 중 하나를 가정할 수 있다.

00:06:34.000 --> 00:06:48.000
높은 값이 거친 값이고 42가 미세한 값인 높은 42의 변환 값을 고려할 때, 거친 값을 받는 데 필요한 설치 수는 미세한 값에 필요한 것보다 낮습니다.

00:06:48.000 --> 00:06:53.000
결과적으로, 앱은 전자를 후자보다 훨씬 빨리 받을 것이다.

00:06:53.000 --> 00:06:58.000
그러나, 이들 중 하나만 광고주에게 다시 보내질 것이라는 점에 유의하십시오.

00:06:58.000 --> 00:07:04.000
군중의 익명성이 이 새로운 분야에 어떤 영향을 미치는지 살펴봅시다.

00:07:04.000 --> 00:07:19.000
5739의 이전 예를 소스 식별자로 사용하여, 군중 익명성의 낮은 끝에서, 당신은 소스 식별자의 2자리 구성 요소를 받을 것으로 예상할 수 있으며, 이 경우 39입니다.

00:07:19.000 --> 00:07:24.000
중간 수준에서, 당신은 3자리 구성 요소를 받을 것으로 예상할 수 있습니다.

00:07:24.000 --> 00:07:31.000
그리고 최고 수준에서, 당신은 전체 4자리 소스 식별자를 다시 받을 것으로 예상할 수 있습니다.

00:07:31.000 --> 00:07:38.000
군중 익명성 수준이 증가함에 따라, 소스 식별자의 더 많은 숫자가 다시 전송됩니다.

00:07:38.000 --> 00:07:50.000
그리고 전환 값에 대한 높은 42의 이전 예를 들자면, 군중 익명성의 낮은 끝에서, 당신은 포스트백에서 전환 값을 받지 못할 것입니다.

00:07:50.000 --> 00:07:55.000
중간 수준에서, 당신은 거친 변환 값을 받게 될 것입니다.

00:07:55.000 --> 00:08:01.000
그리고 최고 수준에서, 당신은 포스트백에서 세밀한 전환 값을 받게 될 것입니다.

00:08:01.000 --> 00:08:07.000
군중의 익명성이 증가함에 따라, 전환 값은 변화를 반환했다.

00:08:07.000 --> 00:08:10.000
API 변경 사항을 살펴봅시다.

00:08:10.000 --> 00:08:23.000
SKAdImpression 인스턴스를 사용하여 광고를 표시하는 경우, SKAdImpression 인스턴스에서 새 sourceIdentifier 속성을 설정할 수 있습니다.

00:08:23.000 --> 00:08:33.000
사전을 통해 인상을 설정하는 경우, 새로운 소스 식별자 키를 사용하여 sourceIdentifier 값을 설정할 수 있습니다.

00:08:33.000 --> 00:08:47.000
광고된 앱의 경우, 여기에 표시된 바와 같이 미세한 변환 값 외에도 거친 변환 값을 취하도록 변경된 새로운 updatePostbackConversionValue 메서드를 호출할 것입니다.

00:08:47.000 --> 00:08:56.000
포스트백의 변환 값을 업데이트한 후 완료 핸들러를 사용하여 후속 작업을 수행하는 것이 좋습니다.

00:08:56.000 --> 00:09:02.000
다음은 새로운 계층 ID와 변환 값 API를 채택하는 것에 대한 몇 가지 권장 사항입니다.

00:09:02.000 --> 00:09:08.000
소스 식별자의 다른 부분은 설치의 개인 정보 보호 수준에 따라 반환됩니다.

00:09:08.000 --> 00:09:14.000
노출에 대한 소스 식별자를 구성할 때 이것을 고려하세요.

00:09:14.000 --> 00:09:20.000
거친 변환 값은 미세한 변환 값보다 훨씬 낮은 세분이다.

00:09:20.000 --> 00:09:25.000
그들의 가치에 의미를 부여할 때 이것을 고려하세요.

00:09:25.000 --> 00:09:29.000
변환 값은 증가하거나 감소할 수 있다.

00:09:29.000 --> 00:09:42.000
그리고 마지막으로, SKAdNetwork 4.0 포스트백을 처리하기 위해 서버를 변경할 때, 새로운 소스 식별자와 거친 변환 값을 구문 분석할 수 있도록 하십시오.

00:09:42.000 --> 00:09:51.000
그것은 계층적 ID와 전환 값에 대한 소개를 마무리하며, 개인 정보 보호를 유지하면서 광고주에게 더 많은 데이터를 제공합니다.

00:09:51.000 --> 00:09:57.000
속성 흐름의 또 다른 중요한 영역인 전환에 집중합시다.

00:09:57.000 --> 00:10:03.000
SKAdNetwork는 오늘날 단일 변환 모델을 사용한다.

00:10:03.000 --> 00:10:09.000
설치 시점부터, 우리는 다양한 사용자 참여를 포착하기 위해 전환 값을 업데이트합니다.

00:10:09.000 --> 00:10:15.000
그리고 일정 시간이 지나면, 우리는 포스트백을 광고 네트워크로 보냅니다.

00:10:15.000 --> 00:10:18.000
예를 들어 봅시다.

00:10:18.000 --> 00:10:19.000
푸드 트럭을 사용하자.

00:10:19.000 --> 00:10:22.000
푸드 트럭은 당신이 푸드 트럭을 통제할 수 있게 해준다.

00:10:22.000 --> 00:10:27.000
자신만의 독특한 도넛 배달 경험을 커스터마이징하고, 제어하고, 만드세요.

00:10:27.000 --> 00:10:33.000
푸드 트럭의 개발자로서, 나는 내 광고 지출의 가치를 알고 싶다.

00:10:33.000 --> 00:10:41.000
예를 들어, 사용자가 푸드 트럭을 시작할 때, 나는 이것을 표시하기 위해 변환 값을 업데이트할 것이다.

00:10:41.000 --> 00:10:47.000
그들이 배달을 위해 첫 번째 배치를 픽업하면, 나는 전환 값을 다시 업데이트한다.

00:10:47.000 --> 00:10:55.000
이 도넛 배치는 노화에 일정 시간이 필요하기 때문에, 사용자는 기다린다.

00:10:55.000 --> 00:11:04.000
노화 시간 어딘가에, 전환은 광고 네트워크와 선택적으로 나에게 포스트백 형태로 전송된다.

00:11:04.000 --> 00:11:16.000
그러나, 사용자가 마침내 도넛을 배달할 때, 나는 포스트백이 이미 전송되었기 때문에 이것이나 더 이상의 사용자 행동을 측정할 방법이 없을 것이다.

00:11:16.000 --> 00:11:21.000
다시 말해서, 재참여는 사라졌다.

00:11:21.000 --> 00:11:24.000
이게 우리가 바꾸고 있는 거야.

00:11:24.000 --> 00:11:30.000
우리는 하나의 포스트백에서 세 개의 포스트백으로 이동하고 있다.

00:11:30.000 --> 00:11:36.000
포스트백은 명확한 시간 창에 묶여 있으며 그 창의 끝에 보내진다.

00:11:36.000 --> 00:11:39.000
이전 예시를 다시 살펴봅시다.

00:11:39.000 --> 00:11:47.000
이전과 마찬가지로, 사용자는 푸드 트럭을 시작하고 배달을 위해 첫 번째 배치를 픽업합니다.

00:11:47.000 --> 00:11:52.000
첫 번째 포스트백의 시간 창이 경과하고 우리는 그것을 보낸다.

00:11:52.000 --> 00:11:54.000
사용자는 도넛을 배달한다.

00:11:54.000 --> 00:12:01.000
이전에, 이것은 포착되지 않았을 것이지만, 이제 우리는 두 번째 포스트백의 시간 창에 있는 우리 자신을 발견한다.

00:12:01.000 --> 00:12:05.000
우리는 이것을 포착하기 위해 변환 값을 업데이트합니다.

00:12:05.000 --> 00:12:10.000
두 번째 포스트백의 타임 윈도우가 지나가고 우리는 그것을 보낸다.

00:12:10.000 --> 00:12:19.000
앱의 도구를 사용하여, 사용자는 새로운 도넛 레시피를 만든 다음 신선한 배치를 배달하기 위해 다시 나간다.

00:12:19.000 --> 00:12:24.000
세 번째 창이 사라지고 세 번째 포스트백이 발송됩니다.

00:12:24.000 --> 00:12:30.000
전환의 가치를 측정하고 이러한 측정을 더 자주 받을 수 있는 더 많은 기회가 있다.

00:12:30.000 --> 00:12:37.000
여러 전환에 대해 주목해야 할 몇 가지 사항: 첫 번째 포스트백만 훌륭한 전환 값을 얻을 수 있습니다.

00:12:37.000 --> 00:12:42.000
추가 포스트백은 거친 변환 값을 전달할 수 있다.

00:12:42.000 --> 00:12:47.000
승자와 개발자만이 추가 포스트백을 받게 될 것이다.

00:12:47.000 --> 00:12:53.000
다음으로, 웹 광고에 대한 SKAdNetwork 속성을 검토해 봅시다.

00:12:53.000 --> 00:13:00.000
우리는 게시자 앱이 App Store에서 제품 페이지를 여는 광고를 보여준다는 것을 알고 있습니다.

00:13:00.000 --> 00:13:10.000
App Store는 차례로 SKAdNetwork와 협력하여 사용자가 의존하는 개인 정보 보호를 제공하면서 설치 속성을 부여합니다.

00:13:10.000 --> 00:13:15.000
우리는 웹 페이지에 표시된 광고에 동일한 개인 정보를 확장하고 싶습니다.

00:13:15.000 --> 00:13:18.000
이것이 어떻게 작동하는지 살펴봅시다.

00:13:18.000 --> 00:13:22.000
사용자는 사파리에서 광고 링크를 탭합니다.

00:13:22.000 --> 00:13:28.000
사파리는 앱 스토어를 시작하고 광고된 앱의 제품 페이지에 도착합니다.

00:13:28.000 --> 00:13:30.000
여기서 두 가지 일이 일어난다.

00:13:30.000 --> 00:13:39.000
App Store는 광고 네트워크 서버에서 광고 노출을 가져오고, 사용자는 앱을 설치합니다.

00:13:39.000 --> 00:13:47.000
이에 따라, 모든 것이 오늘날처럼 흐르고, 결국 SKAdNetwork는 포스트백을 보낸다.

00:13:47.000 --> 00:13:50.000
링크가 어떻게 구성되어 있는지 살펴봅시다.

00:13:50.000 --> 00:13:56.000
Href 부분에는 광고되는 앱에 대한 App Store 링크가 포함되어 있습니다.

00:13:56.000 --> 00:14:03.000
attributionDestination은 Apple에게 서명된 광고 노출을 어디서 가져와야 하는지 알려줍니다.

00:14:03.000 --> 00:14:11.000
그리고 attributionSourceNonce는 광고 네트워크가 다시 보낼 정확한 광고 노출을 찾는 데 도움을 준다.

00:14:11.000 --> 00:14:18.000
이 링크는 당사자 사이트와 내장된 크로스 사이트 iframe에서 제공될 수 있습니다.

00:14:18.000 --> 00:14:22.000
URL 구성을 자세히 살펴봅시다.

00:14:22.000 --> 00:14:28.000
우리는 귀속 대상에서 eTLD+1 구성 요소를 추출합니다.

00:14:28.000 --> 00:14:34.000
이를 위해, 우리는 잘 알려진 한정자와 두 개의 경로 구성 요소를 더 추가합니다.

00:14:34.000 --> 00:14:42.000
이것은 우리가 서명된 인상을 얻기 위해 HTTP POST 요청을 할 URL을 제공합니다.

00:14:42.000 --> 00:14:47.000
프로토콜과 강조 표시된 경로 구성 요소는 고정되어 있습니다.

00:14:47.000 --> 00:14:54.000
광고 네트워크인 당신은 호스트 구성 요소의 가치를 결정합니다.

00:14:54.000 --> 00:15:01.000
SKAdNetwork는 방금 논의한 대로 구성된 URL에 HTTP POST 요청을 할 것이다.

00:15:01.000 --> 00:15:05.000
POST 본문은 JSON이 될 것이다.

00:15:05.000 --> 00:15:10.000
당신은 source_nonce를 원본 광고 링크와 같은 것으로 인식할 것입니다.

00:15:10.000 --> 00:15:17.000
이 값은 광고 네트워크가 제공하고자 하는 서명된 인상을 식별하는 데 사용할 것이다.

00:15:17.000 --> 00:15:22.000
이 POST 요청에서 우리가 무엇을 받을 것으로 기대하는지 살펴봅시다.

00:15:22.000 --> 00:15:28.000
이것은 SKAdNetwork가 소비할 준비가 된 서명된 인상이다.

00:15:28.000 --> 00:15:31.000
인상의 소스 도메인 필드에 주목하세요.

00:15:31.000 --> 00:15:38.000
이것은 앱 기반 SKAdNetwork 흐름에서 소스 앱 ID의 링크 아날로그입니다.

00:15:38.000 --> 00:15:52.000
SKAdNetwork 시스템에 대한 이 새로운 항목을 사용하는 방법을 살펴보면, 광고 네트워크는 다음을 수행해야 합니다: 링크의 고유하게 식별 가능한 부분과 링크 자체를 만드세요.

00:15:52.000 --> 00:15:59.000
우리가 전에 논의한 것처럼 건설된 장소에서 서명된 인상을 제공할 수 있는 엔드포인트를 노출하세요.

00:15:59.000 --> 00:16:05.000
새로운 선택적 소스 도메인 필드를 구문 분석하고 이해하기 위해 포스트백 서버를 업데이트하세요.

00:16:05.000 --> 00:16:14.000
SKAdNetwork에 대한 링크를 사용하려는 웹 페이지의 경우, 광고 네트워크에서 제공하는 광고 링크를 삽입하기만 하면 됩니다.

00:16:14.000 --> 00:16:19.000
그것은 웹 광고에 대한 SKAdNetwork 어트리뷰션에 대한 소개였다.

00:16:19.000 --> 00:16:28.000
우리는 이 기능이 더 넓은 광고 생태계 전반에 걸쳐 채택되는 것을 보게 되어 매우 기쁩니다.

00:16:28.000 --> 00:16:34.000
다음으로, 우리는 당신이 SKAdNetwork 구현을 테스트할 수 있는 방법을 살펴볼 것입니다.

00:16:34.000 --> 00:16:40.000
높은 수준에서, SKAdNetwork는 노출과 포스트백을 다룬다.

00:16:40.000 --> 00:16:49.000
개발자 커뮤니티와 협력함으로써 우리는 인상 측면에서 서명과 구성이 마찰의 지점이었다는 것을 알고 있습니다.

00:16:49.000 --> 00:16:57.000
그리고 포스트백과 함께, 테스트 친화적인 방식으로 그것들을 받고 검증하는 것은 개선의 영역이었다.

00:16:57.000 --> 00:17:08.000
SKAdNetwork의 개발자 경험을 개선하기 위해, 우리는 Xcode 13.3에서 SKAdNetwork 테스트 가능성 변경 사항을 출시했습니다.

00:17:08.000 --> 00:17:19.000
이것은 많은 사람들이 이미 StoreKit 구현의 다양한 부분을 테스트하기 위해 사용하고 있는 StoreKitTest 내의 단위 테스트 프레임워크로 사용할 수 있습니다.

00:17:19.000 --> 00:17:23.000
인상을 검증하는 것을 살펴봅시다.

00:17:23.000 --> 00:17:28.000
SKAdImpression의 인스턴스를 만들고 구성합니다.

00:17:28.000 --> 00:17:40.000
서명을 생성하는 데 사용되는 개인 키의 공개 키 대응을 제공한 다음, SKAdTestSession 인스턴스에서 유효성 검사 방법을 호출합니다.

00:17:40.000 --> 00:17:49.000
이것은 당신의 인상을 검증하고 인상이 잘못 구성되었거나 서명이 유효하지 않은 경우 오류가 발생합니다.

00:17:49.000 --> 00:17:53.000
테스트해야 할 또 다른 주요 영역은 포스트백 영수증이다.

00:17:53.000 --> 00:17:54.000
여기 두 단계가 있어.

00:17:54.000 --> 00:17:59.000
1단계: 테스트 세션에 테스트 포스트백을 추가하세요.

00:17:59.000 --> 00:18:07.000
SKAdTestPostback의 인스턴스를 만들고 포스트백에서 원하는 값으로 구성할 것입니다.

00:18:07.000 --> 00:18:13.000
포스트백이 전송되는 곳이기 때문에, 포스트백 URL에 특별한 메모를 하세요.

00:18:13.000 --> 00:18:18.000
이것은 원격 또는 로컬 서버를 가리킬 수 있다.

00:18:18.000 --> 00:18:25.000
그런 다음 SKAdTestSession의 setPostbacks 방법을 사용하여 이것을 테스트 세션에 추가할 것입니다.

00:18:25.000 --> 00:18:29.000
2단계는 실제로 포스트백을 보내는 것이다.

00:18:29.000 --> 00:18:38.000
여기서 해야 할 일은 SKAdTestSession에서 flushPostbacks 메소드를 호출하는 것뿐입니다. 그러면 포스트백이 꺼질 것입니다.

00:18:38.000 --> 00:18:47.000
SKAdTestSession은 포스트백을 작성할 때 지정한 서버로 네트워크를 통해 포스트백을 보냅니다.

00:18:47.000 --> 00:18:56.000
이것들은 올해 말에 SKAdNetwork 테스트 가능성에 대한 몇 가지 사항입니다: 새로운 소스 식별자 필드에 대한 지원.

00:18:56.000 --> 00:18:59.000
미세하고 거친 변환 값을 지원합니다.

00:18:59.000 --> 00:19:03.000
다중 변환 테스트 지원.

00:19:03.000 --> 00:19:11.000
그리고 그것은 Xcode 13.3에서 처음 사용할 수 있었던 SKAdNetwork 테스트 가능성 변경 사항을 빠르게 살펴보는 것이었다.

00:19:11.000 --> 00:19:19.000
오늘, 우리는 당신에게 더 많은 데이터를 더 빨리 얻기 위해 계층적 ID와 변환 값에 대해 이야기했습니다.

00:19:19.000 --> 00:19:26.000
그리고 나서 우리는 당신이 더 오랜 기간 동안 재참여를 측정할 수 있도록 여러 전환에 대해 이야기했습니다.

00:19:26.000 --> 00:19:36.000
그런 다음 우리는 링크 기반 어트리뷰션과 SKAdNetwork에 다리를 추가하고 동일한 개인 정보 보호를 제공하는 방법에 대해 이야기했습니다.

00:19:36.000 --> 00:19:42.000
그리고 우리는 Xcode에서 SKAdNetwork 테스트 가능성에 대해 이야기함으로써 끝냈다.

00:19:42.000 --> 00:19:47.000
그리고 그것은 SKAdNetwork 4.0을 통한 우리의 여정을 마무리한다.

00:19:47.000 --> 00:19:54.000
마지막으로, 우리가 만드는 모든 것은 놀라운 개발자 커뮤니티의 피드백에 의해 주도됩니다.

00:19:54.000 --> 00:20:04.000
사용자를 위한 개인 정보 보호 우선 광고 경험을 구축하는 당신의 경험에 대해 듣는 것은 믿을 수 없을 정도로 만족스럽고 겸손했습니다.

00:20:04.000 --> 00:20:06.000
고마워.

00:20:06.000 --> 23:59:59.000
♪ ♪

