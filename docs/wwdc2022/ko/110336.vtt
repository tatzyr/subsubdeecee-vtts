WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:15.000
안녕하세요, 여러분, 제 이름은 MaryAshley Etefia이고, 저는 Screen Time의 소프트웨어 엔지니어입니다.

00:00:15.000 --> 00:00:23.000
COVID-19 유행병은 디지털 건강 및 생산성 자원에 대한 증가하는 수요에 대응하기 위해 우리 산업에 많은 압력을 가했다.

00:00:23.000 --> 00:00:31.000
유행병은 사회의 균형에 대한 필요성을 강화시켰고 모든 사람이 자신의 공간을 성공적으로 관리할 수 있는 능력을 시험했다.

00:00:31.000 --> 00:00:40.000
작년에, 우리는 사용자가 자녀와 장치의 관계를 관리할 수 있도록 새로운 앱을 구축할 수 있는 모든 스크린 타임 API를 소개했습니다.

00:00:40.000 --> 00:00:45.000
우리는 여러분 모두가 우리 제품을 사용한 창의적이고 생산적인 방법을 보게 되어 매우 기뻤습니다.

00:00:45.000 --> 00:00:49.000
당신이 다르게 생각하는 우리의 문화를 받아들이는 것을 보는 것은 우리를 흥분시킨다.

00:00:49.000 --> 00:00:53.000
우리는 또한 작년에 받은 피드백에 매우 감사드립니다.

00:00:53.000 --> 00:01:01.000
iOS 16의 ScreenTime API의 새로운 기능을 소개하기 전에, 먼저 iOS 15 릴리스의 몇 가지 하이라이트를 요약하고 싶습니다.

00:01:01.000 --> 00:01:09.000
작년의 스크린 타임 API는 세 가지 새로운 프레임워크를 도입했습니다: 가족 제어, 관리 설정 및 장치 활동.

00:01:09.000 --> 00:01:15.000
iOS 15에서, 이러한 프레임워크는 유해 콘텐츠 차단 앱에 새로운 기능을 도입했습니다.

00:01:15.000 --> 00:01:18.000
당신의 기억을 떠올리게 하기 위해, 세 가지 모두를 빠르게 살펴봅시다.

00:01:18.000 --> 00:01:23.000
Family Controls는 Screen Time API에 대한 액세스를 승인하기 때문에 본질적으로 게이트웨이입니다.

00:01:23.000 --> 00:01:33.000
이 프레임워크를 사용하면 유해 콘텐츠 차단 앱의 제거를 방지할 수 있으며, 앱과 웹사이트를 식별하는 데 사용되는 불투명한 토큰을 제공하여 사용자 개인 정보를 보호할 수 있습니다.

00:01:33.000 --> 00:01:43.000
ManagedSettings를 사용하면 앱은 스크린 타임과 마찬가지로 제한을 적용하고, 웹 트래픽을 필터링하고, 활동을 보호할 수 있지만, 앱의 브랜딩과 기능으로 사용자 정의할 수 있습니다.

00:01:43.000 --> 00:01:52.000
장치 활동 프레임워크를 사용하면 타이밍 창의 시작과 끝뿐만 아니라 앱이나 웹사이트의 사용이 임계값을 초과할 때마다 코드를 실행할 수 있습니다.

00:01:52.000 --> 00:01:56.000
이 세 가지 프레임워크 각각은 iOS 16에서 몇 가지 흥미진진한 새로운 업데이트를 했다.

00:01:56.000 --> 00:02:04.000
이러한 업데이트는 API를 더 쉽게 사용할 수 있게 할 뿐만 아니라 사용자의 경험을 향상시킬 것입니다.

00:02:04.000 --> 00:02:08.000
데모 애플리케이션인 Worklog를 사용하여 세부 사항을 안내해 드리겠습니다.

00:02:08.000 --> 00:02:16.000
Worklog는 특정 사용 지표가 충족될 때까지 특정 앱에 대한 액세스를 제한함으로써 새로운 전문가에게 좋은 습관을 장려합니다.

00:02:16.000 --> 00:02:25.000
이 iPhone의 소유자인 Aniyah가 iOS 16의 ScreenTime API를 사용하여 자신에게 이러한 제한을 부과할 수 있는 방법을 보여주고 싶습니다.

00:02:25.000 --> 00:02:27.000
가족 통제부터 시작합시다.

00:02:27.000 --> 00:02:35.000
iOS 15에서 기억한다면, 가족 컨트롤은 iCloud 인증을 통해서만 자녀 장치를 인증할 수 있었습니다.

00:02:35.000 --> 00:02:43.000
iOS 16에서 Family Controls는 이제 자신의 장치에서 독립 사용자를 승인할 수 있음을 알려드리게 되어 기쁩니다.

00:02:43.000 --> 00:02:50.000
이 새로운 인증 방법은 스크린 타임 API를 사용하여 자녀 보호 앱 이상을 구축할 수 있음을 의미합니다.

00:02:50.000 --> 00:02:57.000
기존 유해 콘텐츠 차단 권한 부여와 달리, 개별 권한 부여는 장치당 원하는 수의 앱에서 사용할 수 있습니다.

00:02:57.000 --> 00:03:06.000
또한, 개별 승인은 보호자 통제 사용 사례가 아니기 때문에, iCloud 로그아웃 및 앱 삭제에 대한 암묵적인 제한은 적용되지 않습니다.

00:03:06.000 --> 00:03:09.000
새로운 인증을 사용하는 방법을 살펴봅시다.

00:03:09.000 --> 00:03:14.000
앱이 시작할 때 가장 먼저 해야 할 일은 FamilyControls에 대한 승인을 요청하는 것입니다.

00:03:14.000 --> 00:03:20.000
워크로그가 처음 시작될 때 이 요청을 하기 위해 공유 인증 센터를 사용할 것입니다.

00:03:20.000 --> 00:03:26.000
요청으로 인해 인증 상태를 업데이트하거나 오류가 발생할 수 있습니다.

00:03:26.000 --> 00:03:32.000
이 앱은 이전에 이 iPhone에서 실행된 적이 없기 때문에, requestAuthorization은 경고와 함께 Aniyah의 승인을 요청할 것입니다.

00:03:32.000 --> 00:03:40.000
허용을 탭하면 사용자에게 Face ID, Touch ID 또는 장치 암호로 인증하여 계속하라는 메시지가 표시됩니다.

00:03:40.000 --> 00:03:48.000
사용자가 성공적으로 인증되면, requestAuthorization을 다시 호출하면 다시 경고가 표시되지 않고 대신 자동으로 성공합니다.

00:03:48.000 --> 00:03:54.000
앱이 가족 제어로 승인되면, 앱의 설정에 두 개의 스위치가 추가됩니다.

00:03:54.000 --> 00:04:01.000
스크린 타임에 하나, 스크린 타임 액세스 목록이 있는 앱 아래에 하나, 그리고 스크린 타임 제한으로 표시된 앱 설정에 하나.

00:04:01.000 --> 00:04:07.000
부모와 개인 사용자는 이러한 스위치 중 하나를 통해 Family Controls에서 앱의 인증을 해제하도록 선택할 수 있습니다.

00:04:07.000 --> 00:04:17.000
보시다시피, 새로운 개인 인증을 사용하는 것은 부모의 통제 인증을 사용하는 것만큼 간단하며, 우리는 비동기 사용을 통해 둘 다에 몇 가지 좋은 개선을 했습니다.

00:04:17.000 --> 00:04:20.000
이제, 관리 설정의 새로운 변경 사항을 살펴봅시다.

00:04:20.000 --> 00:04:27.000
관리 설정은 특히 관리 설정 스토어를 사용할 때 개발자가 훨씬 더 쉽게 사용할 수 있도록 개편되었습니다.

00:04:27.000 --> 00:04:34.000
익숙하지 않은 사람들을 위해, 관리 설정 저장소는 현재 사용자나 장치에 설정을 적용하는 데이터 저장소입니다.

00:04:34.000 --> 00:04:39.000
iOS 15에서는 프로세스당 하나의 관리 설정 스토어만 가질 수 있습니다.

00:04:39.000 --> 00:04:44.000
또한, 앱과 장치 활동 확장에는 다른 관리 설정 저장소가 있어야 했습니다.

00:04:44.000 --> 00:04:48.000
이것은 장치 활동에 대한 응답으로 설정을 변경하는 것을 어렵게 만들었다.

00:04:48.000 --> 00:04:56.000
이제 iOS 16에서는 프로세스당 최대 50개의 관리 설정 저장소를 만들 수 있으며, 각 저장소는 고유한 이름을 가지고 있습니다.

00:04:56.000 --> 00:05:02.000
이러한 명명된 상점은 또한 앱과 모든 앱 확장 프로그램 간에 자동으로 공유됩니다.

00:05:02.000 --> 00:05:07.000
또한, 이제 주어진 명명된 저장소의 모든 설정을 한 번에 제거할 수 있습니다.

00:05:07.000 --> 00:05:10.000
워크로그가 명명된 상점을 어떻게 사용하는지 보여주고 싶습니다.

00:05:10.000 --> 00:05:18.000
Worklog가 처음 출시되고 Aniyah의 장치가 성공적으로 승인되면, 우리는 Gaming ManagedSettingsStore를 만듭니다.

00:05:18.000 --> 00:05:25.000
이 상점에는 게임 제한이 포함될 것이며, Worklog의 경우 모든 게임 웹사이트에 대한 차폐가 포함됩니다.

00:05:25.000 --> 00:05:33.000
Worklog에는 또한 앱이 처음 출시되자마자 소셜 미디어 앱과 웹사이트를 보호하는 "소셜"이라는 이름의 상점이 있다.

00:05:33.000 --> 00:05:44.000
그러나 Worklog를 사용할 때 Aniyah는 저녁 허용 버튼을 클릭하여 오후 5시에서 8시 사이에만 소셜 미디어를 허용하는 장치 활동 일정을 만들 수 있습니다.

00:05:44.000 --> 00:05:49.000
오후 5시가 되면, 우리의 장치 활동 모니터는 해당 이름의 상점을 제한 해제합니다.

00:05:49.000 --> 00:05:56.000
타이밍 윈도우가 오후 8시에 끝나면, 우리는 Aniyah의 장치에서 소셜 미디어 앱과 웹사이트에 제한을 다시 적용합니다.

00:05:56.000 --> 00:06:00.000
이제, 여러분 중 몇몇은 "우리 게임 스토어가 게임 웹사이트를 제한하지 않았나요?"라고 궁금해할 수도 있습니다.

00:06:00.000 --> 00:06:05.000
"게임 스토어의 설정과 충돌하는 소셜 스토어의 모든 설정을 지우지 않을 건가요?"

00:06:05.000 --> 00:06:07.000
대답은 아니오입니다.

00:06:07.000 --> 00:06:13.000
가장 제한적인 설정은 항상 승리하므로, 게임 웹사이트는 여전히 Aniyah의 장치에서 제한될 것이다.

00:06:13.000 --> 00:06:20.000
우리는 이 새로운 이름의 상점들이 매우 강력하며 관리되는 설정을 사용하여 앱을 훨씬 더 쉽게 개발할 수 있을 것이라고 생각합니다.

00:06:20.000 --> 00:06:22.000
하지만 우리는 아직 끝나지 않았어.

00:06:22.000 --> 00:06:26.000
우리는 또한 장치 활동 프레임워크에 매우 흥미로운 기능을 추가했습니다.

00:06:26.000 --> 00:06:35.000
iOS 15에서 장치 활동을 통해 앱은 타이밍 창의 시작과 끝뿐만 아니라 앱과 웹사이트의 사용 임계값에 응답할 수 있었습니다.

00:06:35.000 --> 00:06:45.000
iOS 16에서 장치 활동에는 앱이 SwiftUI를 사용하여 완전히 사용자 지정 사용 보고서를 만들 수 있는 새로운 보고 서비스가 있습니다.

00:06:45.000 --> 00:06:53.000
사용 데이터는 사용자에게 표시되는 데이터와 화면에 렌더링되는 방식을 사용자 정의할 수 있는 새로운 확장 지점에 제공됩니다.

00:06:53.000 --> 00:07:02.000
이러한 장치 활동 보고서를 사용하면 최종 사용자에게 완전한 개인 정보를 제공하는 동시에 사용자 경험을 완전히 사용자 정의할 수 있습니다.

00:07:02.000 --> 00:07:08.000
Worklog에서 DeviceActivityReport.Context와 DeviceActivityFilter를 설정하는 것을 볼 수 있습니다.

00:07:08.000 --> 00:07:17.000
DeviceActivityReport.Context는 DeviceActivity 데이터를 기반으로 어떤 유형의 뷰를 그릴지 보고서에 알려주는 사용자 정의 가능한 유형으로 생각할 수 있습니다.

00:07:17.000 --> 00:07:23.000
DeviceActivityFilter를 지정하여 보고서 컨텍스트의 타이밍 창을 사용자 정의할 수 있습니다.

00:07:23.000 --> 00:07:32.000
그런 다음 장면에 무엇을 나타낼지 알려주기 위해 DeviceActivityReportScene 내부의 장치 활동 보고서 컨텍스트의 정의를 설정할 것입니다.

00:07:32.000 --> 00:07:40.000
우리의 콘텐츠는 사용자 지정 구성인 PieChartView.Configuration과 이 보고서의 결과 SwiftUI 뷰를 정의합니다.

00:07:40.000 --> 00:07:49.000
그런 다음, makeConfiguration 내부에서, 우리는 원형 차트 보기의 구성을 수화하기 위해 Aniyah의 DeviceActivity Data를 매핑할 것입니다.

00:07:49.000 --> 00:07:56.000
프레임워크는 새로운 사용 데이터를 가져올 때마다 makeConfiguration을 호출하므로 직접 호출할 필요가 없습니다.

00:07:56.000 --> 00:08:05.000
여기에서 PieChartView.Configuration이 Aniyah의 장치 활동 데이터로 보기를 제공하여 원형 차트 보기의 보기 모델 역할을 하는 방법을 볼 수 있습니다.

00:08:05.000 --> 00:08:12.000
마지막으로, 우리는 DeviceActivityReport 확장 프로그램의 본문에 정의하여 사용자 지정 SwiftUI 보고서를 렌더링할 수 있습니다.

00:08:12.000 --> 00:08:19.000
Worklog를 위해 만든 파이 차트 보고서는 장치 활동 보고서를 사용자 정의할 수 있는 흥미로운 방법 중 하나일 뿐입니다.

00:08:19.000 --> 00:08:24.000
이것으로 iOS 16의 스크린 타임 API의 새로운 기능에 대한 브리핑을 마칩니다.

00:08:24.000 --> 00:08:34.000
보시다시피, 스크린 타임 API는 우리가 처음 출시한 것과 동일한 보안하면서도 개인 정보 보호 방식으로 핵심 제한 및 장치 활동 모니터링과 같은 기능을 계속 지원합니다.

00:08:34.000 --> 00:09:01.000
요약하자면, 독립 사용자는 이제 장치당 여러 타사 애플리케이션을 승인하는 옵션으로 Family Controls로 인증할 수 있으며, 관리 설정 저장소는 이제 앱과 앱 확장 간에 설정을 로컬로 공유하며, 결과적으로 이제 애플리케이션에서 여러 개의 명명된 저장소를 관리할 수 있으며, 마지막으로 장치 활동 프레임워크는 사용자에게 사용 데이터를 공개하고 사용자 정의할 수 있는 새로운 개인 정보 보호 UI를 도입하고 있습니다.

00:09:01.000 --> 00:09:07.000
우리는 이러한 새로운 개선 사항과 추가 사항이 당신의 애플리케이션에 참여할 수 있는 사용자의 양을 넓힐 것이라고 믿습니다.

00:09:07.000 --> 00:09:13.000
이 새로운 릴리스에 영감을 주셔서 감사드리며 디지털 건강 및 생산성 공간에 대한 향후 기여에 감사드립니다.

00:09:13.000 --> 00:09:18.000
우리는 당신이 스크린 타임 API를 사용하는 새롭고 흥미로운 방법을 빨리 보고 싶습니다.

00:09:18.000 --> 00:09:25.000
우리는 당신이 가진 모든 피드백을 환영하며 사용자뿐만 아니라 사용자가 이 기술에 더 쉽게 접근할 수 있도록 계속 노력할 것입니다.

00:09:25.000 --> 23:59:59.000
고마워.

