WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
안녕하세요, WWDC에 오신 것을 환영합니다.

00:00:12.000 --> 00:00:14.000
제 이름은 케이시입니다.

00:00:14.000 --> 00:00:18.000
당신은 이미 유니버설 장면 설명 또는 USD를 접했을 수도 있습니다.

00:00:18.000 --> 00:00:21.000
증강 현실에서 USD 파일과 상호 작용했을 수도 있습니다.

00:00:21.000 --> 00:00:25.000
또는 자산을 다른 형식에서 USD로 변환했을 수도 있습니다.

00:00:25.000 --> 00:00:28.000
하지만 USD 파일 안에는 정말 무엇이 있나요?

00:00:28.000 --> 00:00:36.000
USD는 독특한 기능을 가진 중요한 기술이므로, 후드 아래를 살펴보고 USD의 기본을 함께 탐구해 봅시다.

00:00:36.000 --> 00:00:50.000
우리는 USD가 무엇인지 배우고, 몇 가지 기본적인 USD 개념을 소개하고, USD로 장면을 구성하는 방법을 배우고, USD 파일 형식을 이해할 것입니다.

00:00:50.000 --> 00:00:53.000
먼저, USD가 뭐야?

00:00:53.000 --> 00:01:04.000
USD는 픽사 애니메이션 스튜디오가 우리가 사랑하는 복잡한 영화를 만들 수 있도록 개발했으며, 영화, 엔터테인먼트 및 기타 산업 전반에 걸쳐 널리 사용됩니다.

00:01:04.000 --> 00:01:10.000
그것은 설계에 의해 확장 가능하며 협업, 핵심 워크플로우 기술로 빠르게 부상하고 있다.

00:01:10.000 --> 00:01:22.000
그것은 영화 산업에서 수십 년간의 제작 경험을 바탕으로 구축된 오픈 소스 프로젝트이며 게임, 시뮬레이션, AR, 제조 및 전자 상거래에 점점 더 많이 채택되고 있다.

00:01:22.000 --> 00:01:30.000
USD에는 세 가지 핵심 측면이 있습니다: 장면 설명 사양, API 및 렌더링 시스템.

00:01:30.000 --> 00:01:35.000
당신의 애플리케이션은 API를 사용하여 USD와 상호 작용합니다.

00:01:35.000 --> 00:01:41.000
렌더링 시스템은 다른 렌더러로 장면을 시각화할 수 있도록 지원합니다.

00:01:41.000 --> 00:01:44.000
애플은 USD를 위한 여러 가지 렌더링 시스템을 가지고 있다.

00:01:44.000 --> 00:01:50.000
"USD 도구 및 렌더링 탐색" 세션을 확인하여 자세히 알아보세요.

00:01:50.000 --> 00:02:02.000
이 세션에서, 우리는 장면 데이터가 어떻게 설명되는지, 어떻게 구성되는지, 그리고 파일 형식으로 어떻게 표현되는지를 명시하는 장면 설명 사양에 중점을 둡니다.

00:02:02.000 --> 00:02:07.000
기본적으로, 이 USD 파일에는 장면이 어떻게 보여야 하는지 설명하는 데이터가 포함되어 있다.

00:02:07.000 --> 00:02:12.000
렌더링 애플리케이션은 데이터를 해석하고 화면에 이미지를 생성합니다.

00:02:12.000 --> 00:02:19.000
예를 들어, 작년 WWDC 세션에서, 우리는 이 USD 장면을 만들고 옥탄으로 렌더링했습니다.

00:02:19.000 --> 00:02:24.000
이제 기본 개념에 뛰어들고 렌더링 뒤에 있는 데이터에 대해 알아봅시다.

00:02:24.000 --> 00:02:43.000
일을 단순하게 유지하기 위해, 우리는 텍스트 USD 표현을 사용할 것입니다. USD는 우리가 이야기하고 싶은 많은 멋진 기능을 가지고 있지만, 시간을 위해, 우리는 무대, 프라임 및 레이어와 같은 USD로 작업하는 동안 가장 일반적으로 접할 수 있는 필수 기능에 초점을 맞출 것입니다.

00:02:43.000 --> 00:02:45.000
무대부터 시작하자.

00:02:45.000 --> 00:02:48.000
우리가 극장에서 연극에 참석하고 있다고 상상해 보세요.

00:02:48.000 --> 00:02:56.000
관객으로서, 우리는 배우들의 공연을 보고, 환경, 조명 및 소품을 알아차리기 위해 무대를 관찰합니다.

00:02:56.000 --> 00:03:01.000
이것은 무대가 USD로 어떻게 작동하는지에 대한 좋은 비유이다.

00:03:01.000 --> 00:03:10.000
단계는 모든 장면 요소가 함께 모이는 계층적인 방식으로 그래픽 정보를 구성하는 장면 그래프 또는 데이터 구조이다.

00:03:10.000 --> 00:03:18.000
무대는 일반적으로 장면 정보가 포함된 파일인 하나 이상의 레이어의 구성이다.

00:03:18.000 --> 00:03:24.000
일반적으로, 무대는 장면의 주요 컨테이너 객체인 프라임으로 구성되어 있다.

00:03:24.000 --> 00:03:28.000
프림은 장면 요소의 계층 구조를 만들기 위해 다른 프림을 포함할 수 있다.

00:03:28.000 --> 00:03:30.000
예시를 확인해 봅시다.

00:03:30.000 --> 00:03:38.000
왼쪽에는 샘플 USD 레이어가 있고 오른쪽에는 무대의 미리보기 시각적 표현을 볼 수 있습니다.

00:03:38.000 --> 00:03:43.000
우리는 두 개의 프림을 본다: 구체와 큐브.

00:03:43.000 --> 00:03:48.000
각 프라임은 무대에서 무엇을 나타내는지 정의하는 특정 유형을 가지고 있다.

00:03:48.000 --> 00:03:55.000
메쉬, 조명 및 재료와 같은 무대를 구성하는 다양한 유형의 프라임이 있습니다.

00:03:55.000 --> 00:04:03.000
이 예에서, 구 prim은 "구"라는 유형을 가지고 있고, 큐브 prim은 "Cube"라는 유형을 가지고 있다.

00:04:03.000 --> 00:04:06.000
하지만 이것은 좋은 질문을 불러일으킨다.

00:04:06.000 --> 00:04:10.000
USD는 이 prim 유형이 무엇을 의미하는지 어떻게 알 수 있나요?

00:04:10.000 --> 00:04:12.000
USD는 스키마를 사용하여 이것을 알고 있다.

00:04:12.000 --> 00:04:16.000
스키마는 무대에서 프라임의 역할을 정의하는 구조화된 데이터이다.

00:04:16.000 --> 00:04:22.000
그들은 기하학, 재료 등과 같은 일반적인 장면 개념에 의미를 제공한다.

00:04:22.000 --> 00:04:26.000
이 예에서, 여기 구체의 스키마 정의가 있습니다.

00:04:26.000 --> 00:04:31.000
그것은 모든 구가 반경과 경계 상자 범위를 가지고 있다고 정의한다.

00:04:31.000 --> 00:04:38.000
기존 스키마로, USD는 당신의 장면을 설명할 수 있는 내장 유형의 풍부한 기반을 제공합니다.

00:04:38.000 --> 00:04:41.000
사용자 지정 스키마를 사용하면 USD를 더 확장할 수 있습니다.

00:04:41.000 --> 00:04:47.000
자신만의 사용 사례와 워크플로우를 위한 사용자 지정 데이터를 나타내는 자신만의 스키마를 제공할 수 있습니다.

00:04:47.000 --> 00:04:49.000
스키마는 시각적 표현을 가질 필요가 없다.

00:04:49.000 --> 00:04:54.000
그것들은 단지 당신이 체계적이고 의미 있는 방식으로 무대에서 갖고 싶은 데이터가 될 수 있습니다.

00:04:54.000 --> 00:04:59.000
예를 들어, 여기서, 저는 "WWDC"라는 새로운 스키마를 만들었습니다.

00:04:59.000 --> 00:05:07.000
그것은 제목과 그것과 관련된 연도를 가진 프라임을 정의하며, 여기에 스키마를 사용하는 "WWDC22"라고 불리는 프라임이 있다.

00:05:07.000 --> 00:05:12.000
그것은 2022년으로 설정되었고 제목은 "Call to code"로 설정되어 있다.

00:05:12.000 --> 00:05:16.000
연도와 제목은 프라임의 "속물"이라고 불린다.

00:05:16.000 --> 00:05:18.000
프림은 다양한 속성을 가질 수 있다.

00:05:18.000 --> 00:05:21.000
각 속성에는 유형과 값이 있다.

00:05:21.000 --> 00:05:28.000
속성은 또한 기본값을 작성할 수 있으므로 스키마를 사용하는 prim에서 명시적으로 정의할 필요가 없습니다.

00:05:28.000 --> 00:05:34.000
Sphere 스키마로 돌아가서, 반경과 범위 속성에 대한 기본값을 어떻게 정의했는지 알 수 있습니다.

00:05:34.000 --> 00:05:37.000
이 층에는 단일 구형 프림이 있다.

00:05:37.000 --> 00:05:43.000
Radius 속성이 설정되지 않았기 때문에, Sphere 스키마에서 값을 도출합니다: 1의 기본 반경.

00:05:43.000 --> 00:05:47.000
하지만 우리는 명시적일 수 있고, 반경 속성을 설정할 수 있다.

00:05:47.000 --> 00:05:52.000
이 값은 스키마에 설정된 값의 기본값과 일치하기 때문에 구체는 여전히 동일하게 보입니다.

00:05:52.000 --> 00:05:57.000
이제 두 번째 구를 추가하고 반경을 0.5로 설정해 봅시다.

00:05:57.000 --> 00:06:00.000
우리는 그것이 실제로 다른 구의 절반 크기라는 것을 알 수 있다.

00:06:00.000 --> 00:06:10.000
속성, 프라임 및 단계는 또한 장면의 일부에 대한 보조 데이터를 제공할 수 있는 정보의 키-값 페어링인 메타데이터를 포함할 수 있다.

00:06:10.000 --> 00:06:13.000
메타데이터는 적용되는 수준으로 설정됩니다.

00:06:13.000 --> 00:06:19.000
전체 단계와 그 안의 모든 프라임에 영향을 미치는 메타데이터는 단계 수준에서 설정됩니다.

00:06:19.000 --> 00:06:23.000
단일 프라임에 특정한 메타데이터는 프라임에 설정되어 있다.

00:06:23.000 --> 00:06:26.000
속성은 또한 메타데이터를 가질 수 있다.

00:06:26.000 --> 00:06:30.000
예를 들어, 여기에 전형적인 단계 메타데이터가 있습니다.

00:06:30.000 --> 00:06:33.000
metersPerUnit은 장면의 스케일 단위를 정의한다.

00:06:33.000 --> 00:06:41.000
upAxis는 X, Y 또는 Z 축 중 어느 축이 장면에서 카메라의 상승 방향으로 간주되는지 정의합니다.

00:06:41.000 --> 00:06:46.000
문서 문자열은 워크플로우 추적 목적으로 유용한 문서를 저장합니다.

00:06:46.000 --> 00:06:51.000
이제 우리가 이러한 기본 사항을 정의했으므로, 우리는 이미 USD를 사용하기 시작할 수 있다.

00:06:51.000 --> 00:06:55.000
이러한 개념만으로 팬케이크 장면을 어떻게 할 수 있는지 봅시다.

00:06:55.000 --> 00:07:00.000
우리 층에서, 우리는 "팬케이크"라고 불리는 변형 프림을 만든다.

00:07:00.000 --> 00:07:06.000
그런 다음 팬케이크 프림의 자식인 "블루베리_01"이라는 변환 프림을 추가합니다.

00:07:06.000 --> 00:07:11.000
블루베리_01 프림 안에, 우리는 메쉬 프림을 포함한다.

00:07:11.000 --> 00:07:17.000
메쉬 프림은 블루베리의 기하학을 유지하고 재료에 결합한다.

00:07:17.000 --> 00:07:21.000
다른 프라임스를 추가하여 나머지 자산을 완성합시다.

00:07:21.000 --> 00:07:28.000
여기 이러한 기본 개념만 사용하여 완성된 팬케이크 장면이 있습니다.

00:07:28.000 --> 00:07:36.000
이러한 기본은 당신을 멀리 데려다 줄 수 있지만, 생산 중심 프로젝트에서 우리는 다양한 팀원 및 조직과 협력해야 합니다.

00:07:36.000 --> 00:07:41.000
USD는 "구성"이라고 불리는 것에서 이러한 요구를 해결할 수 있는 많은 특징을 가지고 있다.

00:07:41.000 --> 00:07:46.000
구성은 장면 설명의 별도의 단위에서 무대를 만들 수 있게 해준다.

00:07:46.000 --> 00:07:53.000
이를 통해 협업과 빠른 반복을 가능하게 하는 장면에서 3D 요소를 효율적으로 재사용할 수 있습니다.

00:07:53.000 --> 00:08:01.000
우리는 가장 일반적인 구성 유형에 대해 논의할 것입니다: 레이어링, 참조, 페이로드 및 변형 세트.

00:08:01.000 --> 00:08:03.000
하지만 재밌는 방식으로 하자.

00:08:03.000 --> 00:08:05.000
체스 게임을 하고 싶으세요?

00:08:05.000 --> 00:08:07.000
체스 세트 장면을 만들자.

00:08:07.000 --> 00:08:14.000
그 장면에서, 우리는 우리의 체스 조각을 참조할 카탈로그 레이어의 자산 카탈로그를 사용할 것이다.

00:08:14.000 --> 00:08:22.000
그런 다음 체스세트 레이어로 볼 수 있는 최종 결과를 얻기 위해 체스판에 이 조각들을 레이아웃 레이어로 배열할 것입니다.

00:08:22.000 --> 00:08:35.000
우리는 먼저 체스에서 체스 조각을 얻어야 하며, 여섯 개의 주요 조각이 있습니다: 폰, 루크, 비숍, 기사, 여왕, 그리고 왕.

00:08:35.000 --> 00:08:40.000
우리는 오브젝트 캡처로 만든 이 자산을 사용하여 완전한 체스 세트를 만들 것입니다.

00:08:40.000 --> 00:08:45.000
USD 개념, 참조를 사용하여 우리의 작품을 무대로 가져오는 것으로 시작합시다.

00:08:45.000 --> 00:08:54.000
참조는 한 단계의 프림이 데이터를 복사하지 않고 같은 단계 또는 다른 계층의 다른 프림을 언급할 때이다.

00:08:54.000 --> 00:09:01.000
이것은 데이터의 중복을 최소화하고 다른 사람과 애플리케이션에 의해 데이터를 별도로 업데이트할 수 있게 해준다.

00:09:01.000 --> 00:09:06.000
우리의 전당포 자산을 우리 장면에 참조합시다.

00:09:06.000 --> 00:09:10.000
카탈로그 레이어에서, 우리는 "Pawn"이라는 prim을 정의합니다.

00:09:10.000 --> 00:09:15.000
지금까지는 데이터가 없기 때문에 우리의 무대는 여전히 비어 있다.

00:09:15.000 --> 00:09:19.000
다음으로, 우리는 Pawn.usda 레이어에 대한 참조를 추가합니다.

00:09:19.000 --> 00:09:24.000
이것은 폰 자산을 가져오고, 우리는 카탈로그 레이어에서 그것을 볼 수 있다.

00:09:24.000 --> 00:09:28.000
하지만 USD는 당신이 참조하는 파일에서 어떤 prim을 가져와야 하는지 어떻게 알 수 있나요?

00:09:28.000 --> 00:09:32.000
우리는 defaultPrim 메타데이터로 이 prim을 지정할 수 있습니다.

00:09:32.000 --> 00:09:40.000
defaultPrim 메타데이터는 무대에서 정의되며 다른 무대에서 이 장면을 사용할 때 어떤 prim을 참조해야 하는지 지정합니다.

00:09:40.000 --> 00:09:44.000
우리는 항상 USD 자산에 대한 defaultPrim을 작성하는 것이 좋습니다.

00:09:44.000 --> 00:09:48.000
defaultPrim이 작성되었는지 확인하기 위해 폰 자산을 확인해 봅시다.

00:09:48.000 --> 00:09:51.000
우리는 자산의 단계 수준에서 defaultPrim 메타데이터를 볼 수 있습니다.

00:09:51.000 --> 00:09:53.000
좋아.

00:09:53.000 --> 00:10:08.000
또는, defaultPrim이 작성되지 않았거나 defaultPrim과 다른 prim을 참조하려는 경우, 계층의 어느 곳에서나 참조 계층에서 prim에 대한 경로를 명시적으로 지정할 수 있습니다.

00:10:08.000 --> 00:10:12.000
USD의 경로는 무대의 요소를 식별하는 데 사용된다.

00:10:12.000 --> 00:10:16.000
프림 경로는 프림의 고유 식별자이다.

00:10:16.000 --> 00:10:19.000
예를 들어, 이 단계에서 우리는 세 개의 프라임스를 본다.

00:10:19.000 --> 00:10:23.000
세계는 /세계의 기본 경로를 가지고 있다.

00:10:23.000 --> 00:10:27.000
폰과 나이트 프림은 세계 프림의 아이들로 여겨진다.

00:10:27.000 --> 00:10:36.000
따라서 Pawn prim로 가는 길은 /World/Pawn이 될 것이고, Knight prim로 가는 길은 /World/Knight가 될 것이다.

00:10:36.000 --> 00:10:44.000
이를 염두에 두고, 우리는 여기서 참조할 때 Pawn prim에 대한 prim 경로를 명시적으로 설정할 수 있습니다.

00:10:44.000 --> 00:10:49.000
더 큰 장면의 경우, 모든 장면 정보를 한 번에 로드하는 것은 비쌀 수 있다.

00:10:49.000 --> 00:10:56.000
이를 위해, USD는 "페이로드"라고 불리는 참조 유형으로 무대에 장면 설명을 연기할 수 있다.

00:10:56.000 --> 00:11:07.000
복잡한 기하학과 같은 큰 데이터 세트나 소품이나 캐릭터를 나타내는 다른 큰 장면 그래프를 참조할 때 페이로드를 사용하는 것이 좋습니다.

00:11:07.000 --> 00:11:14.000
우리는 대신 이러한 자산 참조를 페이로드로 변환할 것이므로, 체스 조각의 로딩을 연기하도록 선택할 수 있습니다.

00:11:14.000 --> 00:11:20.000
페이로드를 로드하지 않기로 선택하면, 처음 열었을 때 장면이 비어 있는 것처럼 보입니다.

00:11:20.000 --> 00:11:24.000
일단 우리가 페이로드의 로딩을 활성화하면, 우리는 모든 조각을 다시 볼 수 있다.

00:11:24.000 --> 00:11:28.000
이제 우리는 현장에 우리의 조각들을 가지고 있기 때문에, 우리는 그것들을 체스판에 놓기 시작할 수 있다.

00:11:28.000 --> 00:11:33.000
우리는 USD의 레이어링 개념을 사용하여 또 다른 레이어에서 이것을 할 수 있다.

00:11:33.000 --> 00:11:41.000
레이어링을 사용하면 Photoshop 또는 Affinity Photo와 같은 인기 있는 이미지 편집 소프트웨어 패키지와 유사하게 레이어를 쌓을 수 있습니다.

00:11:41.000 --> 00:11:49.000
다른 레이어 위에 있는 레이어의 프림은 더 강한 것으로 간주되며 하위 레이어에서 데이터를 추가하거나 재정의할 수 있습니다.

00:11:49.000 --> 00:11:58.000
보시다시피, 조각들은 현재 잘못된 위치에 있지만 걱정하지 마세요, 우리는 레이어링을 사용하여 다른 레이어를 비파괴적으로 수정할 수 있습니다.

00:11:58.000 --> 00:12:04.000
이것은 카탈로그 레이어를 편집하지 않고도 조각을 올바른 위치로 옮기기에 완벽합니다.

00:12:04.000 --> 00:12:12.000
이것이 어떻게 이루어질 수 있는지 봅시다. 우리는 우리의 마지막 장면이 될 ChessSet이라는 새로운 무대를 만드는 것으로 시작합니다.

00:12:12.000 --> 00:12:15.000
레이어 상단에 "하위 레이어"라고 불리는 메타데이터가 포함되어 있습니다.

00:12:15.000 --> 00:12:20.000
여기서 우리는 카탈로그 레이어와 함께 우리의 작품을 가져옵니다.

00:12:20.000 --> 00:12:27.000
다음으로, 우리는 조각을 옮기는 데 사용하는 새로운 레이어인 Layout.usda를 만듭니다.

00:12:27.000 --> 00:12:31.000
이 레이아웃 레이어는 우리의 체스 조각의 위치를 포함할 것이다.

00:12:31.000 --> 00:12:34.000
장면에서 우리 조각의 위치를 재정의합시다.

00:12:34.000 --> 00:12:37.000
우리는 Pawn_01로 시작할 것이다.

00:12:37.000 --> 00:12:42.000
우리는 번역 속성을 변경하여 전당포 자산의 위치를 수정합니다.

00:12:42.000 --> 00:12:46.000
이것이 어떻게 우리의 장면을 업데이트하는지 확인해 봅시다.

00:12:46.000 --> 00:12:53.000
여기서 우리는 레이아웃 레이어 없이 체스 세트를 다시 가지고 있으므로, 폰은 여전히 원래 위치에 있다.

00:12:53.000 --> 00:12:59.000
레이아웃 레이어를 추가하면, 폰은 체스판에서 예상 위치로 이동되었다.

00:12:59.000 --> 00:13:04.000
다른 조각들도 똑같이 하고 그것들을 올바른 위치로 옮기자.

00:13:04.000 --> 00:13:09.000
우리는 폰을 배치하는 것과 같은 방식으로 다른 체스 조각을 배치한다.

00:13:09.000 --> 00:13:12.000
우리가 Pawn_02를 위해 그것을 한 방법은 다음과 같습니다.

00:13:12.000 --> 00:13:16.000
그리고 다시 Pawn_03, 그리고 그 등.

00:13:16.000 --> 00:13:23.000
우리는 레이아웃 레이어의 변경을 마쳤고, 이제 체스 조각을 올바른 위치에 놓았습니다.

00:13:23.000 --> 00:13:26.000
우리는 체스 세트의 절반을 만들었다.

00:13:26.000 --> 00:13:35.000
우리는 레이어를 사용하여 카탈로그 레이어로 자산을 가져오고 오버라이드를 사용하여 레이아웃 레이어와 함께 보드에 배치합니다.

00:13:35.000 --> 00:13:39.000
남은 것은 상대방을 위해 조각을 준비하는 것뿐이다.

00:13:39.000 --> 00:13:43.000
주목해야 할 한 가지는 우리 상대의 조각들이 다른 색이라는 것이다.

00:13:43.000 --> 00:13:50.000
새로운 자산 세트를 만드는 대신, 우리는 다른 USD 개념인 변형 세트를 사용하여 체스 조각 자산을 업데이트할 수 있습니다.

00:13:50.000 --> 00:13:56.000
VariantSets는 무대에서 개별 대안의 동적 스왑을 허용합니다.

00:13:56.000 --> 00:14:03.000
변형 세트에 포함된 변형은 다른 재료, 기하학 또는 USD로 나타낼 수 있는 모든 것이 될 수 있습니다.

00:14:03.000 --> 00:14:08.000
무대에서 다른 변형 사이를 전환하는 것은 비파괴적이다.

00:14:08.000 --> 00:14:14.000
우리는 체스 조각의 다른 재료 사이를 전환하기 위해 변형 세트를 설정할 것이다.

00:14:14.000 --> 00:14:21.000
폰 자산에서, 우리는 폰의 다른 색상 사이를 전환할 수 있도록 "색상"이라는 변형 세트를 추가합니다.

00:14:21.000 --> 00:14:30.000
이제 우리는 변형 세트에 두 가지 변형을 추가합니다: 어두운 물질을 사용하는 어둠과 밝은 물질을 사용하는 빛.

00:14:30.000 --> 00:14:38.000
마지막으로, 우리는 폰을 무대에 로드할 때 사용할 것을 지정하기 위해 기본 변형을 설정했습니다.

00:14:38.000 --> 00:14:40.000
이제, 우리는 카탈로그 레이어로 돌아왔습니다.

00:14:40.000 --> 00:14:45.000
우리는 보드에 모든 조각을 설치했지만, 그들은 모두 가벼운 재료를 사용하고 있다.

00:14:45.000 --> 00:14:49.000
그것은 기본 변형이 가벼운 재료로 설정되어 있기 때문이다.

00:14:49.000 --> 00:14:54.000
폰 중 하나의 변형을 어두운 물질로 바꾸자.

00:14:54.000 --> 00:14:56.000
우리는 변형을 다크로 설정했다.

00:14:56.000 --> 00:15:00.000
우리는 상대편의 폰 중 하나가 이제 어둡다는 것을 알 수 있다.

00:15:00.000 --> 00:15:04.000
이 변화를 다른 조각에도 적용합시다.

00:15:04.000 --> 00:15:09.000
마침내, 우리는 체스 세트를 완성했다.

00:15:09.000 --> 00:15:15.000
장면을 최적화하는 데 사용할 수 있는 USD 개념이 하나 더 있습니다: 장면 그래프 인스턴스화.

00:15:15.000 --> 00:15:27.000
장면 그래프 인스턴스를 사용하면 무대에서 장면 그래프의 일부를 여러 번 재사용하여 단풍, 가구 또는 우리의 경우 체스 조각과 같은 것 중 하나 이상을 포함하는 모든 것을 나타낼 수 있습니다.

00:15:27.000 --> 00:15:33.000
씬 그래프 인스턴싱을 사용하면 애플리케이션의 메모리와 성능 향상을 모두 제공합니다.

00:15:33.000 --> 00:15:40.000
씬 그래프 인스타킹을 사용하려면, 프라임 또는 씬 그래프의 일부에 인스턴스 메타데이터를 지정할 수 있습니다.

00:15:40.000 --> 00:15:44.000
인스턴스된 모든 프라임은 동일한 장면 그래프를 공유할 수 있는 후보이다.

00:15:44.000 --> 00:15:48.000
우리 장면에서 prim instancing에 대한 지원을 추가합시다.

00:15:48.000 --> 00:15:55.000
카탈로그 파일에서, 우리는 체스 조각 프라임에 메타데이터 "인스턴스 가능"을 추가하고 값을 true로 설정할 것입니다.

00:15:55.000 --> 00:16:05.000
이 메타데이터를 추가함으로써, USD는 이제 이러한 자산을 각 프라임에 대한 데이터를 복제하는 대신 동일한 데이터를 공유하는 잠재적으로 인스턴스 가능한 프라임으로 취급할 것이다.

00:16:05.000 --> 00:16:10.000
우리의 체스 세트는 여전히 똑같아 보이지만 지금은 더 성능이 뛰어나고 메모리 효율적이다.

00:16:10.000 --> 00:16:12.000
그리고 이것으로, 우리는 체스 세트를 끝냈어!

00:16:12.000 --> 00:16:17.000
그것은 멋져 보이고, 우리는 많은 USD 기능을 행사했다.

00:16:17.000 --> 00:16:25.000
레이어링, 참조, 페이로드 및 변형 세트는 USD가 정의하는 구성 유형 중 일부일 뿐입니다.

00:16:25.000 --> 00:16:32.000
USD가 일관된 장면 표현을 보장하기 위해 장면 그래프를 구성하는 특정 강도 순서가 있습니다.

00:16:32.000 --> 00:16:40.000
구성과 주문 약어 LIVRPS에 대한 자세한 정보는 픽사의 USD 문서에서 배울 수 있습니다.

00:16:40.000 --> 00:16:44.000
이 세션에서, 우리는 USD 파일 안에 있는 것에 대해 이야기했다.

00:16:44.000 --> 00:16:48.000
이제 파일 자체와 디스크에 어떻게 나타날 수 있는지에 대해 이야기해 봅시다.

00:16:48.000 --> 00:16:51.000
USD 파일에는 몇 가지 유형이 있습니다.

00:16:51.000 --> 00:16:56.000
읽을 수 있는 ASCII 텍스트가 포함된 USD 파일은 .usda 확장자를 가지고 있다.

00:16:56.000 --> 00:16:59.000
우리는 이 세션 내내 이 파일들을 사용해 왔다.

00:16:59.000 --> 00:17:07.000
더 작고 효율적인 이진 표현은 .usdc 확장자를 가진 상자 형식이다.

00:17:07.000 --> 00:17:10.000
.Usd 확장자를 가진 파일이 있을 수도 있습니다.

00:17:10.000 --> 00:17:15.000
이것들은 ASCII 텍스트 또는 이진 상자 파일일 수 있다.

00:17:15.000 --> 00:17:27.000
마지막으로, USD는 .usdz 확장자를 가진 압축되지 않은 zip 아카이브에 여러 USD 파일과 텍스처와 같은 관련 보조 파일을 포함할 수 있는 패키징 형식을 가지고 있습니다.

00:17:27.000 --> 00:17:38.000
오늘 우리는 USD의 기본 개념 중 일부에 대해 배웠습니다: 단계, 레이어, 프라임, 스키마, 속성 및 메타데이터.

00:17:38.000 --> 00:17:48.000
우리는 이러한 개념을 사용하여 체스 세트를 만들고 참조, 페이로드, 디폴트프림, 프림 경로, 레이어링 및 인스턴싱을 사용했습니다.

00:17:48.000 --> 00:17:57.000
그리고 마지막으로, 우리는 다른 USD 파일 형식에 대해 논의했습니다: .usda, .usdc, .usd, 그리고 .usdz.

00:17:57.000 --> 00:18:05.000
픽사의 USD 문서를 통해 이러한 개념에 대해 자세히 알아보고 애플리케이션에서 USD의 기능을 최대한 활용하는 것이 좋습니다.

00:18:05.000 --> 00:18:07.000
고마워!

00:18:07.000 --> 23:59:59.000
♪

