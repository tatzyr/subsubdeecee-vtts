WEBVTT

00:00:00.000 --> 00:00:09.000
♪ 기악 힙합 음악 ♪

00:00:09.000 --> 00:00:14.000
안녕하세요, 저는 ShazamKit 팀의 엔지니어인 Neil Foley입니다.

00:00:14.000 --> 00:00:22.000
2021년에 우리는 ShazamKit을 도입하여 Shazam의 방대한 녹음된 음악 카탈로그와 오디오를 일치시킬 수 있습니다.

00:00:22.000 --> 00:00:31.000
우리는 또한 사용자 지정 카탈로그 매칭을 도입하여 개발자에게 자신의 오디오를 일치시키고 동기화된 경험을 제공할 수 있는 기능을 제공했습니다.

00:00:31.000 --> 00:00:37.000
이제 우리는 대규모로 사용자 지정 카탈로그 작업을 간소화하는 몇 가지 중요한 업데이트가 있습니다.

00:00:37.000 --> 00:00:46.000
이 세션에서, 저는 서명, 카탈로그 및 미디어 항목과 같은 기존 ShazamKit 개념을 사용할 것입니다.

00:00:46.000 --> 00:00:57.000
아직 익숙하지 않다면, WWDC21의 "ShazamKit 탐색"과 "ShazamKit으로 사용자 지정 오디오 경험 만들기" 강연을 확인하세요.

00:00:57.000 --> 00:01:04.000
하지만 빠른 개요로, ShazamKit을 사용하면 오디오를 일치시킬 수 있는 특별한 형식으로 변환할 수 있습니다.

00:01:04.000 --> 00:01:07.000
우리는 이 서명들을 부른다.

00:01:07.000 --> 00:01:13.000
서명은 메타데이터가 포함된 미디어 항목과 결합하여 참조 서명을 형성할 수 있습니다.

00:01:13.000 --> 00:01:19.000
그리고 참조 서명은 우리가 사용자 지정 카탈로그라고 부르는 파일에 함께 저장할 수 있습니다.

00:01:19.000 --> 00:01:29.000
이제 우리 모두가 따라잡았으니, 대규모로 맞춤형 카탈로그를 만드는 과정을 안내하고, 훌륭한 카탈로그를 만들기 위한 몇 가지 팁과 요령에 대해 이야기하겠습니다.

00:01:29.000 --> 00:01:39.000
오늘날의 사용자 지정 카탈로그 워크플로우에서, 일치시키고 싶은 소량의 콘텐츠가 있다면, 사용자 지정 카탈로그로 작업하는 것은 간단한 작업이 될 수 있습니다.

00:01:39.000 --> 00:01:42.000
이 단계를 따르기만 하면 됩니다.

00:01:42.000 --> 00:01:47.000
ShazamKit이 허용하는 형식으로 오디오를 녹음하세요.

00:01:47.000 --> 00:01:52.000
서명 생성기를 사용하여 서명으로 변환하세요.

00:01:52.000 --> 00:01:57.000
메타데이터로 주석을 낸 다음, 사용자 지정 카탈로그에 저장하세요.

00:01:57.000 --> 00:02:00.000
그리고 그게 다야, 당신은 Shazam 경험을 제공할 수 있습니다.

00:02:00.000 --> 00:02:06.000
하지만 그 단계들 중 일부는 어려울 수 있으며, 특히 오디오 프로그래밍에 익숙하지 않다면 더욱 그렇습니다.

00:02:06.000 --> 00:02:12.000
샘플 속도와 버퍼를 다루는 것은 가장 경험이 많은 개발자에게도 까다로울 수 있다.

00:02:12.000 --> 00:02:21.000
그리고 TV 쇼의 10개 시즌처럼 Shazamable로 만들고 싶은 방대한 양의 콘텐츠가 있으면 어떻게 되나요?

00:02:21.000 --> 00:02:25.000
이 작업 흐름은 고통스러울 수 있다.

00:02:25.000 --> 00:02:30.000
그리고 만약 당신이 많은 양의 콘텐츠를 가지고 있다면, 그것은 빠르게 관리할 수 없게 될 수 있습니다.

00:02:30.000 --> 00:02:44.000
이 워크플로우를 스스로 개선할 생각이라면, 오디오를 서명으로 변환하기 위한 코드를 작성해야 할 것이며, 미디어 항목을 로드하고 연결할 더 많은 코드를 작성해야 하며, 콘텐츠를 변경할 때마다 작업을 반복해야 할 것입니다.

00:02:44.000 --> 00:02:48.000
이것은 당신이 오디오를 일치시키고 싶을 때 큰 투자입니다.

00:02:48.000 --> 00:02:56.000
그리고 ShazamKit과 콘텐츠를 동기화하려면, 무엇을 언제 표시해야 하는지 알아내기 위해 복잡한 논리가 필요합니다.

00:02:56.000 --> 00:03:01.000
이 워크플로우를 간소화하는 ShazamKit에 몇 가지 훌륭한 개선 사항을 소개하겠습니다.

00:03:01.000 --> 00:03:03.000
하지만 먼저 빠른 데모입니다.

00:03:03.000 --> 00:03:11.000
여기 알렉스가 2021년에 시연한 수학 퀴즈와 화면 수업을 동기화하는 FoodMath 앱이 있습니다.

00:03:11.000 --> 00:03:21.000
최신 ShazamKit 기능으로 업데이트했고, FoodMath 비디오를 재생하여 어떻게 동기화되는지 볼 것입니다.

00:03:21.000 --> 00:03:24.000
26초로 건너뛰세요.

00:03:24.000 --> 00:03:29.000
2, 3개의 녹색 사과.

00:03:29.000 --> 00:03:31.000
총 몇 개의 사과가 있나요?

00:03:31.000 --> 00:03:34.000
네 타이머가 시작해... 지금.

00:03:34.000 --> 00:03:41.000
알았어, 시간이 다 와. 네가 어떻게 했는지 보자.

00:03:41.000 --> 00:03:45.000
56초로 건너뛰세요.

00:03:45.000 --> 00:03:51.000
오늘, 약간의 양념을 하기 위해, 내가 가게에 갔을 때, 빨간 사과 2개로 시작했어...

00:03:51.000 --> 00:03:55.000
그리고 나는 초록색 사과 두 개를 샀어.

00:03:55.000 --> 00:03:58.000
이번에는 총 몇 개의 사과를 먹었어?

00:03:58.000 --> 00:04:07.000
네 타이머가 시작해... 지금.

00:04:07.000 --> 00:04:09.000
알았어, 시간이 다 와.

00:04:09.000 --> 00:04:11.000
잘 작동하는 것 같아.

00:04:11.000 --> 00:04:17.000
비디오와 동기화된 풍부한 콘텐츠가 있고 내가 "지금"이라고 말했을 때, 메뉴는 정확히 적절한 시간에 나타났다.

00:04:17.000 --> 00:04:22.000
또한, 콘텐츠가 더 이상 관련이 없을 때, 그것은 큐에서 바로 사라졌다.

00:04:22.000 --> 00:04:23.000
하지만 그건 어떻게 작동해?

00:04:23.000 --> 00:04:26.000
코드를 살펴봅시다.

00:04:26.000 --> 00:04:27.000
그냥 간단한 루프가 있어.

00:04:27.000 --> 00:04:33.000
그것은 우리가 이전에 사용했던 대리 콜백 대신 세션에서 AsyncSequence를 사용합니다.

00:04:33.000 --> 00:04:38.000
시퀀스는 일치, 일치 없음 또는 오류를 나타내는 열거형을 반환합니다.

00:04:38.000 --> 00:04:44.000
나는 경기에만 관심이 있어서, 루프를 그 경우로 제한했다.

00:04:44.000 --> 00:04:52.000
그리고 디스플레이 결과를 만들기 위해, 나는 미디어 항목을 내가 필요한 콘텐츠로 줄인다.

00:04:52.000 --> 00:04:58.000
실제로 앱에서 볼 수 있는 것은 많지 않으며, 우리가 만든 matchResult에 의해 구동되는 SwiftUI 뷰만 있습니다.

00:04:58.000 --> 00:05:03.000
복잡한 논리나 타이밍 코드는 없으며 완벽하게 동기화됩니다.

00:05:03.000 --> 00:05:08.000
그래서 질문은 남아 있습니다, 어떻게 그렇게 잘 동기화되나요?

00:05:08.000 --> 00:05:13.000
FoodMaths의 비밀은 경험을 이끄는 풍부한 맞춤형 카탈로그이다.

00:05:13.000 --> 00:05:24.000
ShazamKit을 보완하기 위해 만든 간단한 도구로 카탈로그를 만들었고, 자신의 앱에서 풍부한 경험을 만드는 데 사용할 수도 있습니다.

00:05:24.000 --> 00:05:32.000
Shazam CLI는 macOS 13의 일부로 제공되며 콘텐츠를 쉽게 동기화하는 방법을 제공합니다.

00:05:32.000 --> 00:05:37.000
사용자 지정 카탈로그를 만드는 것과 관련된 반복적인 작업 중 일부를 자동화하는 데 도움이 될 수 있습니다.

00:05:37.000 --> 00:05:41.000
내가 방금 보여줬던 맞춤 카탈로그를 업데이트하자.

00:05:41.000 --> 00:05:45.000
또 다른 데모를 할 시간이야.

00:05:45.000 --> 00:05:52.000
여기 FoodMath 비디오 파일이 포함된 폴더가 있고, 여기 같은 폴더에 있는 내 터미널이 있습니다.

00:05:52.000 --> 00:06:02.000
CLI를 사용하여 서명 명령을 사용하여 비디오를 서명으로 변환할 것입니다.

00:06:02.000 --> 00:06:11.000
비디오 파일을 입력으로 전달하고 서명 출력을 지정합니다.

00:06:11.000 --> 00:06:13.000
알았어. 저기 우리 서명이 있어.

00:06:13.000 --> 00:06:18.000
이제 저는 이 서명을 미디어 항목과 결합하여 맞춤 카탈로그를 만들고 싶습니다.

00:06:18.000 --> 00:06:33.000
CLI는 내가 여기에 복사할 미디어 항목을 설명하기 위해 간단한 쉼표로 구분된 파일을 허용합니다.

00:06:33.000 --> 00:06:38.000
그것은 내 콘텐츠를 동기화하는 데 필요한 모든 것을 설명한다.

00:06:38.000 --> 00:06:47.000
여기가 제가 제목을 지정한 곳이고, 방정식을 위해 정의한 사용자 지정 JSON 필드가 있습니다.

00:06:47.000 --> 00:06:50.000
헤더는 미디어 항목 속성에 매핑됩니다.

00:06:50.000 --> 00:07:02.000
매핑에 대한 자세한 내용은 도움말 플래그로 사용자 지정 카탈로그 생성 명령을 실행하십시오.

00:07:02.000 --> 00:07:07.000
그것은 csv 헤더와 미디어 항목 속성 간의 관계를 설명한다.

00:07:07.000 --> 00:07:12.000
이제 나는 그것들을 사용자 지정 카탈로그로 결합하고 싶다.

00:07:12.000 --> 00:07:19.000
그래서 나는 생성 명령을 실행할 것이다.

00:07:19.000 --> 00:07:28.000
나는 서명 파일과 csv 파일을 전달하고 카탈로그를 출력한다.

00:07:28.000 --> 00:07:30.000
좋아, 이제 우리는 카탈로그를 가지고 있어.

00:07:30.000 --> 00:07:37.000
흥미롭게도, 나는 최신 FoodMath 에피소드에 일찍 접근할 수 있어서, 그것을 우리의 카탈로그 파일에 추가하고 싶다.

00:07:37.000 --> 00:07:44.000
여기에 파일을 복사할게.

00:07:44.000 --> 00:07:51.000
여기 우리의 새로운 에피소드를 위한 미디어 항목이 있습니다.

00:07:51.000 --> 00:08:02.000
업데이트할 비디오, 새로운 미디어 및 카탈로그를 전달하는 업데이트 명령을 실행할 것입니다.

00:08:02.000 --> 00:08:05.000
좋아, 우리는 카탈로그를 업데이트했어.

00:08:05.000 --> 00:08:20.000
그것은 카탈로그를 만드는 방법에 대한 간략한 개요이지만, 당신이 저와 같다면, 당신은 정말로 이것을 스크립팅하고 싶을 것입니다.

00:08:20.000 --> 00:08:27.000
FoodMath 앱에는 실제로 꽤 많은 새로운 에피소드가 있으며, 이 카탈로그에 모두 추가하고 싶습니다.

00:08:27.000 --> 00:08:33.000
나는 모든 에피소드 폴더를 반복하고 사용자 지정 카탈로그로 결합하는 정말 간단한 스크립트를 작성했습니다.

00:08:33.000 --> 00:08:49.000
내가 지금 실행할게.

00:08:49.000 --> 00:08:50.000
우리가 간다.

00:08:50.000 --> 00:09:00.000
우리는 이제 모든 FoodMath 에피소드를 나타내는 하나의 카탈로그를 가지고 있으며 스크립트는 카탈로그 안에 있는 내용을 자세히 설명하기 위해 디스플레이 명령을 사용했습니다.

00:09:00.000 --> 00:09:02.000
난 우리가 모든 걸 가지고 있다고 생각해.

00:09:02.000 --> 00:09:05.000
Foodmath 프로젝트는 이미 우리의 새로운 카탈로그를 참조하고 있다.

00:09:05.000 --> 00:09:11.000
그래서 우리가 수학을 즐길 수 있도록 만들고 실행하자.

00:09:11.000 --> 00:09:14.000
30초로 건너뛰세요.

00:09:14.000 --> 00:09:16.000
총 몇 개의 사과가 있나요?

00:09:16.000 --> 00:09:19.000
네 타이머가 시작해... 지금.

00:09:19.000 --> 00:09:28.000
알았어, 시간이 다 와. 네가 어떻게 했는지 보자.

00:09:28.000 --> 00:09:30.000
난 그 남자가 좋아. 그건 멋진 에피소드야.

00:09:30.000 --> 00:09:37.000
새로운 에피소드는 어때? 그거 해보자.

00:09:37.000 --> 00:09:41.000
15초로 건너뛰세요.

00:09:41.000 --> 00:09:49.000
수년에 걸쳐, 나는 과카몰리를 정말 맛있게 만드는 것을 탐구했고, 내가 가장 좋아하는 과카몰리 레시피를 적었다.

00:09:49.000 --> 00:09:51.000
아보카도 4개가 필요해.

00:09:51.000 --> 00:09:53.000
내일 내 친구가 방문할 거야.

00:09:53.000 --> 00:09:57.000
그래서 우리 둘을 위해, 나는 그 부분의 절반만 만들면 돼.

00:09:57.000 --> 00:09:59.000
아보카도가 몇 개나 필요해?

00:09:59.000 --> 00:10:02.000
타이머가 시작된다...지금.

00:10:02.000 --> 00:10:12.000
맞아. 너는 아보카도 두 개가 필요해.

00:10:12.000 --> 00:10:16.000
이 과카몰리를 함께 만들자.

00:10:16.000 --> 00:10:30.000
이거 한 번 해보자.

00:10:30.000 --> 00:10:40.000
음. 그건 훌륭해졌어. 네가 즐거운 시간을 보냈길 바라 그리고 다음에 보자.

00:10:40.000 --> 00:10:41.000
오!

00:10:41.000 --> 00:10:43.000
그들은 새로운 호스트가 있어. 흥미롭네.

00:10:43.000 --> 00:10:48.000
어쨌든, 나는 한 번에 풍부한 동기화 경험을 만들었다.

00:10:48.000 --> 00:10:51.000
Shazam CLI는 풍부한 명령 세트를 지원합니다.

00:10:51.000 --> 00:10:54.000
그것들을 검토해 보자.

00:10:54.000 --> 00:10:58.000
오디오 트랙이 있는 모든 미디어 파일에서 서명을 만들 수 있습니다.

00:10:58.000 --> 00:11:03.000
서명과 미디어 항목을 결합하여 사용자 지정 카탈로그를 만들 수 있습니다.

00:11:03.000 --> 00:11:06.000
카탈로그의 내용을 표시할 수 있습니다.

00:11:06.000 --> 00:11:11.000
서명과 미디어 항목을 모두 추가, 제거 및 내보냅니다.

00:11:11.000 --> 00:11:18.000
다음으로, CLI가 FoodMath 비디오에서 서명을 어떻게 만들었는지에 대해 알아보세요.

00:11:18.000 --> 00:11:26.000
SHSignatureGenerator에는 이제 모든 플랫폼에서 사용할 수 있는 method signatureFromAsset이 있습니다.

00:11:26.000 --> 00:11:31.000
이 방법을 사용하면, 더 이상 미디어에서 오디오 버퍼를 수동으로 가져올 필요가 없습니다.

00:11:31.000 --> 00:11:37.000
오디오 트랙이 있는 AVAsset을 전달하기만 하면 서명으로 바꿀 수 있습니다.

00:11:37.000 --> 00:11:44.000
자산에 여러 트랙이 있다면, 서명이 모든 것을 캡처할 수 있도록 함께 섞일 것입니다.

00:11:44.000 --> 00:11:51.000
좋아, 이제 미디어를 대표하는 서명이 생겼으니, 어떻게 콘텐츠를 정확하게 동기화할 수 있을까?

00:11:51.000 --> 00:11:54.000
나는 Timed MediaItem API를 사용했다.

00:11:54.000 --> 00:12:01.000
미디어 항목에 시간 범위를 첨부하면 언제 시작하고 언제 끝나는지 쉽게 지정할 수 있습니다.

00:12:01.000 --> 00:12:08.000
미디어 항목은 또한 서명의 하나 이상의 부분을 대상으로 하는 여러 시간 범위를 가질 수 있다.

00:12:08.000 --> 00:12:13.000
노래의 합창을 목표로 하는 미디어 항목이 있다고 상상해 보세요.

00:12:13.000 --> 00:12:16.000
노래하는 각 장소의 시간 범위를 추가할 수 있습니다.

00:12:16.000 --> 00:12:23.000
시간 범위를 지정하는 것은 그들이 언제 시작하고 언제 끝나는지 알림을 받는 경우에만 유용합니다.

00:12:23.000 --> 00:12:30.000
ShazamKit은 시작할 때와 끝날 때 시간 범위와 동기화된 매치 콜백을 제공합니다.

00:12:30.000 --> 00:12:40.000
서명은 많은 미디어 항목을 포함할 수 있으므로, 이 콜백은 특정 시점에 범위에 있는 미디어 항목만 포함합니다.

00:12:40.000 --> 00:12:49.000
콜백과 순서로 미디어 항목이 반환되는 몇 가지 간단한 규칙이 있으므로, 검토해 봅시다.

00:12:49.000 --> 00:12:54.000
시간 범위를 벗어난 미디어 아이템은 반환되지 않을 것이다.

00:12:54.000 --> 00:13:01.000
그들의 시간 범위 내의 미디어 아이템은 반환될 것이며, 가장 최근의 이벤트가 먼저 올 것이다.

00:13:01.000 --> 00:13:09.000
그리고 마지막으로, 시간 범위가 없는 미디어 아이템은 항상 마지막으로 반환되지만, 주문되지 않을 것이다.

00:13:09.000 --> 00:13:15.000
시간 범위가 없는 미디어 항목은 전체 참조 서명에 적용되는 글로벌 정보를 저장할 수 있는 좋은 장소가 될 수 있습니다.

00:13:15.000 --> 00:13:20.000
내 FoodMath 예시에서, 나는 에피소드의 이름을 저장하기 위해 그것을 사용했다.

00:13:20.000 --> 00:13:25.000
다른 미디어 항목이 범위 내에 없을 때 나타납니다.

00:13:25.000 --> 00:13:37.000
마지막으로, 모든 미디어 항목에 시간 범위가 있고 그 중 어느 것도 범위에 속하지 않는 경우, ShazamKit은 항상 기본 일치 정보가 있는 미디어 항목을 반환합니다.

00:13:37.000 --> 00:13:46.000
이렇게 하면 예측된 CurrentMatch 오프셋과 frequencySkew와 같은 중요한 속성을 항상 얻을 수 있습니다.

00:13:46.000 --> 00:13:49.000
그리고 코드에서도, 그것은 쉽다.

00:13:49.000 --> 00:13:55.000
타임 미디어 항목은 timeRanges 미디어 항목 속성을 지정하여 생성됩니다.

00:13:55.000 --> 00:13:58.000
그것은 스위프트 범위의 배열이다.

00:13:58.000 --> 00:14:02.000
또한 timeRanges 속성을 사용하여 다시 읽을 수 있습니다.

00:14:02.000 --> 00:14:08.000
그리고 Objective-C 프로그래머의 경우, 대체품으로 새로운 SHRange 클래스가 있습니다.

00:14:08.000 --> 00:14:16.000
이제 그것들을 만드는 방법을 보았으니, 훌륭한 맞춤형 카탈로그를 만들기 위한 몇 가지 팁과 요령을 살펴봅시다.

00:14:16.000 --> 00:14:21.000
하나의 미디어에 대해 많은 작은 서명을 만들지 마세요.

00:14:21.000 --> 00:14:34.000
서명은 그것이 나타내는 미디어에 대한 일대일 매핑이므로, 노래나 비디오에서 당신이 가지고 있는 각 오디오 조각에 대해 전체 기간 동안 하나의 서명을 만드세요.

00:14:34.000 --> 00:14:42.000
더 긴 서명은 ShazamKit이 오디오 피크와 일치할 수 있는 더 많은 기회를 제공하여 더 나은 정확도를 제공합니다.

00:14:42.000 --> 00:14:50.000
또한 여러 참조 서명과 중복되는 쿼리 서명 문제를 피할 수 있습니다.

00:14:50.000 --> 00:14:55.000
새로운 Timed MediaItem API를 사용하면 동기화된 콘텐츠를 개별 영역으로 타겟팅할 수 있습니다.

00:14:55.000 --> 00:15:01.000
오디오를 여러 개의 서명으로 나눌 필요가 없습니다.

00:15:01.000 --> 00:15:06.000
나는 우리가 하나의 미디어를 가지고 있지만, 여러 미디어 항목이 있는 예를 보여주었다.

00:15:06.000 --> 00:15:12.000
하지만 우리가 Shazamable로 만들고 싶은 엄청난 양의 콘텐츠가 있다면 어떻게 해야 할까요?

00:15:12.000 --> 00:15:14.000
우리가 그걸 어떻게 나눠야 해?

00:15:14.000 --> 00:15:20.000
사용자 지정 카탈로그에서 콘텐츠를 분할할 때 해야 할 절충안이 있습니다.

00:15:20.000 --> 00:15:30.000
각 미디어 자산에 대한 개별 카탈로그를 만드는 경우, 올바른 카탈로그를 로드할 수 있도록 어떤 오디오가 재생되고 있는지 알아야 합니다.

00:15:30.000 --> 00:15:39.000
그리고 그것들을 모두 하나의 카탈로그에 넣으면, 더 큰 다운로드를 하고 더 많은 메모리를 사용할 수 있지만, 더 많은 오디오를 일치시킬 수 있습니다.

00:15:39.000 --> 00:15:44.000
우리의 조언은 당신이 만든 카탈로그 파일을 집중적으로 유지하는 것입니다.

00:15:44.000 --> 00:15:51.000
예를 들어, 음악 트랙 또는 전체 앨범별 카탈로그이지만, 아티스트의 전체 음반은 아닙니다.

00:15:51.000 --> 00:15:56.000
물건을 분리한다는 것은 런타임에 무엇을 로드할지 결정할 수 있다는 것을 의미합니다.

00:15:56.000 --> 00:16:02.000
사용자 지정 카탈로그 추가 API로 할 수 있습니다.

00:16:02.000 --> 00:16:06.000
시도해 보고 사용 사례에 도움이 되는지 확인해 보세요.

00:16:06.000 --> 00:16:25.000
같은 소리를 내는 여러 오디오 자산이 있다면, 항상 같은 인트로 음악으로 시작하는 쇼가 있고, 각 에피소드에 대한 사용자 지정 경험이나 다른 트랙에서 샘플링된 노래를 제공하고 싶다면, 주파수 왜곡을 차별화 요소로 사용하는 것을 고려해 볼 수 있습니다.

00:16:25.000 --> 00:16:30.000
비동 오디오는 녹음에서 주파수를 높이거나 낮추는 것이다.

00:16:30.000 --> 00:16:40.000
이렇게 하면 오디오가 어떻게 들리는지에 영향을 미치지만, 충분히 적게 하면 ShazamKit에서는 알 수 있지만 평균적인 인간의 귀에서는 알 수 없습니다.

00:16:40.000 --> 00:16:54.000
그래서 우리가 오디오 녹음을 한다면, 그것으로부터 사용자 지정 카탈로그를 만든 다음, 약간 이동된 주파수로 다시 재생하세요: ShazamKit은 여전히 오디오와 일치할 것이며, 또한 frequencySkew 속성을 통해 왜곡 양을 보고할 것입니다.

00:16:54.000 --> 00:16:58.000
코드에서 그것을 하는 방법은 다음과 같습니다.

00:16:58.000 --> 00:17:08.000
인간의 귀에 눈에 띄거나 ShazamKit에서 인식할 수 없는 변화 없이 오디오를 왜곡할 수 있는 양에는 한계가 있습니다.

00:17:08.000 --> 00:17:17.000
왜곡을 5% 미만으로 유지하는 것은 안전해야 하며 여러 왜곡된 녹음을 구별할 수 있는 충분한 공간을 제공해야 한다.

00:17:17.000 --> 00:17:21.000
이것을 실제로 활용하려면, frequencySkew 범위를 사용하세요.

00:17:21.000 --> 00:17:27.000
미디어 항목은 지정된 스큐 범위 내에 있는 경우에만 반환됩니다.

00:17:27.000 --> 00:17:33.000
범위는 오디오가 원본과 얼마나 다른지 백분율로 지정합니다.

00:17:33.000 --> 00:17:41.000
0의 값은 오디오가 왜곡되지 않았음을 나타내고 .01의 값은 1%의 왜곡을 나타냅니다.

00:17:41.000 --> 00:17:48.000
frequencySkewRanges 속성을 사용하여 미디어 항목의 속성에 액세스할 수 있습니다.

00:17:48.000 --> 00:17:56.000
앱에서 작동하도록 하는 단계를 검토하겠습니다: 먼저 원본 오디오 녹음의 참조 서명을 만드세요.

00:17:56.000 --> 00:18:03.000
그런 다음 미디어 항목을 가지고 주파수 왜곡으로 3~4%로 제한하세요.

00:18:03.000 --> 00:18:05.000
이것을 사용자 지정 카탈로그 안에 넣으세요.

00:18:05.000 --> 00:18:13.000
이제 3~4퍼센트 왜곡된 오디오를 재생하면 미디어 항목이 반환됩니다.

00:18:13.000 --> 00:18:18.000
범위를 벗어나 왜곡되지 않은 오디오를 재생하면 미디어 항목이 반환되지 않습니다.

00:18:18.000 --> 00:18:22.000
그건 주파수 왜곡이야.

00:18:22.000 --> 00:18:29.000
올해 ShazamKit에 대한 흥미진진한 업데이트를 보았으니, 놀라운 동기화 경험을 할 준비가 되었습니다.

00:18:29.000 --> 00:18:35.000
그러니 이 모범 사례를 기억하세요: 먼저, 미디어 자산당 하나의 서명을 만드세요.

00:18:35.000 --> 00:18:41.000
ShazamKit과 더 간단한 생성 파이프라인에서 더 나은 정확성을 얻을 수 있습니다.

00:18:41.000 --> 00:18:46.000
SHSignatureGenerators signatureFromAsset으로 서명을 만드세요.

00:18:46.000 --> 00:18:54.000
그것은 다양한 미디어를 수용합니다. 즉, 더 이상 낮은 수준의 오디오 세부 사항을 다룰 필요가 없습니다.

00:18:54.000 --> 00:19:00.000
새로운 Timed MediaItem API로 관심 영역에 동기화된 콘텐츠를 타겟팅하세요.

00:19:00.000 --> 00:19:05.000
그것은 뛰어난 정확도와 간단한 API를 결합합니다.

00:19:05.000 --> 00:19:10.000
그리고 마지막으로 Shazam CLI가 사용자 지정 카탈로그를 만드는 방식을 간소화하도록 하세요.

00:19:10.000 --> 00:19:20.000
그것은 방대한 양의 미디어를 다루는 번거로움을 없애고 대신 만들고 싶은 훌륭한 경험에 집중할 수 있도록 설계되었습니다.

00:19:20.000 --> 00:19:27.000
ShazamKit의 최신 업데이트를 즐겼기를 바라며, 모든 것을 Shazamable으로 만드는 것을 보게 되어 기쁩니다.

00:19:27.000 --> 00:19:32.000
우리가 논의한 모든 정보와 문서에 대한 링크는 이 세션에 첨부되어 있습니다.

00:19:32.000 --> 23:59:59.000
참여해줘서 고마워. 나머지 WWDC22를 즐기세요. ♪ ♪

