WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:13.000
안녕! 제 이름은 자레드이고, 저는 여기 애플의 소프트웨어 엔지니어입니다.

00:00:13.000 --> 00:00:19.000
오늘 저는 올해 iOS, iPadOS 및 macOS에 도입할 새로운 프레임워크에 대해 이야기하고 싶습니다.

00:00:19.000 --> 00:00:27.000
이 새로운 프레임워크는 배경 자산이라고 불리며, 우리는 그것이 우리 모두가 알고 사랑하는 앱의 사용자 경험을 크게 풍요롭게 할 것이며, 더 중요한 것은 당신이 개발하는 것입니다.

00:00:27.000 --> 00:00:32.000
시작하기 위해, 저는 당신에게 새로운 배경 자산 프레임워크를 소개할 것입니다.

00:00:32.000 --> 00:00:36.000
그 후에, 앱에 새로운 프레임워크를 채택하는 방법을 보여드리겠습니다.

00:00:36.000 --> 00:00:41.000
이것은 확장과 그것이 제공하는 새로운 기능에 대한 간략한 개요로 이어질 것이다.

00:00:41.000 --> 00:00:45.000
그러면 우리는 몇 가지 모범 사례와 우리가 배운 모든 것을 끝낼 것이다.

00:00:45.000 --> 00:00:48.000
시작하기 전에, 우리가 여기서 해결하려고 하는 것에 대해 이야기해 봅시다.

00:00:48.000 --> 00:00:50.000
진실은, 기다리는 것은 재미가 없다는 것이다.

00:00:50.000 --> 00:00:58.000
우리가 소프트웨어를 사용하는 사람들에게 기다리라고 요청할 때마다, 우리는 좌절감을 증가시키고 앱이 제공하기를 원하는 경험을 빼앗고 있다.

00:00:58.000 --> 00:01:03.000
예를 들어, 얼마나 자주 그 완벽한 앱을 찾기 위해 App Store를 끝없이 탐색하는 것을 발견했나요?

00:01:03.000 --> 00:01:06.000
넌 마침내 그걸 찾았어, 그리고 오 정말 완벽해 보여!

00:01:06.000 --> 00:01:08.000
그런 다음 GET 버튼을 누르세요.

00:01:08.000 --> 00:01:12.000
매 순간, 당신의 흥분 수준이 증가합니다.

00:01:12.000 --> 00:01:19.000
그러면 곧 네트워크 연결이나 앱의 크기에 따라 앱이 다운로드될 때 기다려야 할 수도 있다는 것을 알게 될 것입니다.

00:01:19.000 --> 00:01:31.000
그런 다음 몇 초 동안 기다린 후, 당신은 휴대폰을 내려놓고, 커피 한 잔을 마시고, 마음 챙김을 연습하고 인내심을 마스터하는 것의 이점에 대해 가장 좋아하는 책을 읽는 자신을 발견하게 됩니다.

00:01:31.000 --> 00:01:35.000
그리고 나서 몇 시간이 지나고, 당신은 마침내 전화를 받았습니다.

00:01:35.000 --> 00:01:41.000
하루 종일 사용하기를 기다렸던 완벽한 앱에 뛰어들 준비가 되었을 때 흥분 수준이 높아집니다.

00:01:41.000 --> 00:01:45.000
앱을 실행하고 즉시 인사하기 위해: 더 많은 다운로드.

00:01:45.000 --> 00:01:46.000
헷갈려.

00:01:46.000 --> 00:01:48.000
넌 하루 종일 핸드폰에서 떨어져 있었어.

00:01:48.000 --> 00:01:51.000
왜 이 앱은 이제 당신을 더 오래 기다리게 만드나요?

00:01:51.000 --> 00:01:55.000
앱이 설치된 후 이 앱을 자동으로 다운로드할 수 없었나요?

00:01:55.000 --> 00:02:00.000
인터넷 연결이 느린 사람에게, 이것은 그들이 앱을 닫고 제거하는 것을 좌절시킬 수 있다.

00:02:00.000 --> 00:02:03.000
진실은, 이것은 우리 중 누구도 갖고 싶어하는 경험이 아니라는 것이다.

00:02:03.000 --> 00:02:07.000
우리는 이것이 당신의 잘못이 아니라는 것을 알고 있으며, 우리가 이 경험을 훨씬 더 좋게 만들 수 있다고 믿습니다!

00:02:07.000 --> 00:02:11.000
이것이 우리가 올해 당신에게 배경 자산을 소개하게 된 것을 자랑스럽게 생각하는 이유입니다.

00:02:11.000 --> 00:02:15.000
이 프레임워크는 앱의 사용자 경험을 풍부하게 할 수 있도록 개발되었습니다.

00:02:15.000 --> 00:02:19.000
당신의 앱이 출시되는 순간, 그것은 경이로운 첫인상을 제공하고 있습니다!

00:02:19.000 --> 00:02:23.000
배경 자산은 기존 워크플로우에 유연하게 대처할 수 있도록 설계되었습니다.

00:02:23.000 --> 00:02:31.000
여러분 중 많은 사람들이 이미 복잡한 자산 관리 시스템을 개발했으며, 우리는 이 새로운 프레임워크가 이미 개발한 솔루션에 쉽게 맞기를 원했습니다.

00:02:31.000 --> 00:02:38.000
우리는 또한 당신이 App Store에 추가로 제출할 필요 없이 업데이트된 콘텐츠를 앱에 푸시할 수 있기를 원한다는 것을 알고 있습니다.

00:02:38.000 --> 00:02:43.000
앱이 이미 출시된 후 게임이나 다른 앱이 추가 콘텐츠를 필요로 하는 것은 드문 일이 아닙니다.

00:02:43.000 --> 00:02:47.000
업데이트된 아트 텍스처나 게임 레벨 데이터의 버그 수정을 생각해 보세요.

00:02:47.000 --> 00:02:52.000
백그라운드 자산은 앱의 수명 주기 밖에서 자산을 예약하고 업데이트할 수 있는 기능을 제공합니다.

00:02:52.000 --> 00:02:58.000
우리는 첫 번째 앱 출시 전이나 앱이 밤새 업데이트될 때마다 자산이 존재하는 것이 중요하다고 생각합니다.

00:02:58.000 --> 00:03:03.000
그래서 우리는 앱이 출시될 때까지 콘텐츠가 존재할 수 있도록 하는 메커니즘을 만들기 위해 노력했습니다.

00:03:03.000 --> 00:03:08.000
그리고 마지막으로, 프레임워크를 채택하는 것이 더 쉬울수록, 우리는 당신이 앱에서 그것을 사용하도록 더 많이 장려할 수 있습니다.

00:03:08.000 --> 00:03:13.000
우리는 큰 자산을 사전 다운로드해야 하는 모든 곳에서 배경 자산을 사용하기를 원합니다.

00:03:13.000 --> 00:03:20.000
그렇게 하면, 우리는 당신의 앱이 콘텐츠를 사용하기 전에 대기하고 진행률 표시줄을 보여주는 시간을 최소화할 수 있습니다.

00:03:20.000 --> 00:03:23.000
그래서 당신은 이 새로운 프레임워크가 이 문제를 해결하는 데 어떻게 도움이 되는지 궁금할 것입니다.

00:03:23.000 --> 00:03:30.000
음, 가능한 한 확장하기 위해, 우리는 백그라운드에서 콘텐츠를 다운로드할 수 있는 새로운 앱 확장 프로그램을 만들었습니다.

00:03:30.000 --> 00:03:36.000
이 새로운 확장 프로그램은 우리 플랫폼의 다른 확장 프로그램이 사용하는 강력한 앱 확장 기술 위에 구축되었습니다.

00:03:36.000 --> 00:03:40.000
이것은 앱의 수명 주기 밖에서 코드를 실행할 수 있는 기회를 제공한다.

00:03:40.000 --> 00:03:45.000
예를 들어, 확장 프로그램은 사용자가 앱을 처음 설치하지만 아직 실행하지 않을 때마다 실행됩니다.

00:03:45.000 --> 00:03:49.000
확장 프로그램은 또한 앱이 백그라운드에서 자동으로 업데이트될 때마다 실행됩니다.

00:03:49.000 --> 00:03:56.000
이것은 사용자가 업데이트된 후 애플리케이션을 열기 전에 콘텐츠를 예약하고 다운로드할 수 있도록 하는 데 도움이 됩니다.

00:03:56.000 --> 00:04:03.000
마지막으로, 확장은 백그라운드에서 주기적으로 실행되므로 업데이트된 자산을 확인하고 시간이 지남에 따라 주기적으로 일정을 잡을 수 있습니다.

00:04:03.000 --> 00:04:10.000
유의하는 것이 중요하지만, 그 연장 런타임은 수명이 짧기 때문에, 모든 작업은 서둘러 연장에 의해 예약되어야 합니다.

00:04:10.000 --> 00:04:14.000
다운로드가 빠르게 예약되지 않으면, 시스템은 확장을 종료할 수 있습니다.

00:04:14.000 --> 00:04:20.000
주기적으로 실행되는 확장 기능의 빈도가 앱 사용에 따라 물러날 것이라는 점을 아는 것도 중요합니다.

00:04:20.000 --> 00:04:25.000
앱이 많이 사용되지 않는다면, 확장 프로그램은 덜 빈번한 런타임을 받게 될 것입니다.

00:04:25.000 --> 00:04:27.000
그래서 그것은 새로운 배경 자산 프레임워크에 대한 개요이다.

00:04:27.000 --> 00:04:32.000
앱이 시작될 때까지 자산을 사용할 수 있도록 하는 데 필요한 도구를 제공합니다.

00:04:32.000 --> 00:04:38.000
이것은 앱이 설치되거나 업데이트될 때마다 사용자가 앱을 실행하기 전에 실행되는 확장 프로그램으로 이루어집니다.

00:04:38.000 --> 00:04:43.000
이제, 백그라운드 자산 프레임워크를 프로젝트에 채택하고 시작하는 것을 살펴봅시다!

00:04:43.000 --> 00:04:49.000
프레임워크 내의 다운로드 관리자는 백그라운드 자산 시스템 서비스와 통신하는 데 사용되는 주요 수단이다.

00:04:49.000 --> 00:04:52.000
관리자는 앱 전체에서 사용할 수 있는 싱글톤 객체입니다.

00:04:52.000 --> 00:04:57.000
관리자를 사용하면 전경이나 백그라운드에서 자산 다운로드를 예약할 수 있습니다.

00:04:57.000 --> 00:05:03.000
애플리케이션이 실행되기 전에 시작되었을 수 있는 현재 비행 중인 다운로드를 검색할 수도 있습니다.

00:05:03.000 --> 00:05:04.000
다운로드도 취소할 수 있습니다.

00:05:04.000 --> 00:05:10.000
이것은 그들이 이미 예정되어 있거나 다운로드 중이고 원래 요청한 자산이 더 이상 필요하지 않은 경우에 유용합니다.

00:05:10.000 --> 00:05:24.000
우리는 또한 확장과 애플리케이션이 동시에 기존 다운로드를 예약하거나 수정하지 않도록 앱과 확장 프로그램 간의 독점 액세스를 관리하기 위한 동기화 메커니즘을 도입했습니다.

00:05:24.000 --> 00:05:27.000
나는 너에게 보여줄 예시가 있어, 하지만 지금은, 이것에 대해서는 나중에 더 많이!

00:05:27.000 --> 00:05:31.000
백그라운드 자산을 사용하기 시작하는 것이 얼마나 쉬운지 살펴봅시다.

00:05:31.000 --> 00:05:34.000
API의 몇 가지 기본 사항을 안내하는 것으로 시작하겠습니다.

00:05:34.000 --> 00:05:39.000
그런 다음 이 모든 것을 앱 확장 프로그램에 연결하는 방법을 보여줌으로써 나중에 후속 조치를 취하겠습니다.

00:05:39.000 --> 00:05:43.000
시작하려면, 백그라운드 자산 프레임워크 모듈을 가져올 것입니다.

00:05:43.000 --> 00:05:48.000
그런 다음, 원격 자산이 위치한 위치를 가리키는 URL을 정의하는 것만큼 쉽습니다.

00:05:48.000 --> 00:05:53.000
그런 다음 확장 프로그램과 앱이 모두 구성원인 앱 그룹 컨테이너를 정의하여 후속 조치를 취합니다.

00:05:53.000 --> 00:05:59.000
같은 그룹에 앱과 확장 프로그램이 있으면 다운로드 중과 완료 후 자산을 관리할 수 있습니다.

00:05:59.000 --> 00:06:05.000
아직 앱 그룹에 익숙하지 않다면, Xcode 14의 서명 및 기능 섹션에서 쉽게 추가할 수 있습니다.

00:06:05.000 --> 00:06:12.000
그것들은 두 개 이상의 애플리케이션이 동일한 리소스 또는 이 경우 앱과 확장 프로그램에 액세스할 수 있는 강력한 기능입니다.

00:06:12.000 --> 00:06:15.000
다음으로 해야 할 일은 다운로드 객체를 만드는 것입니다.

00:06:15.000 --> 00:06:19.000
백그라운드 자산 프레임워크는 다양한 유형의 다운로드 객체를 지원하도록 설계되었습니다.

00:06:19.000 --> 00:06:25.000
그러나, 이 예에서, 우리는 가장 일반적인 것에 초점을 맞출 것이다: BAURLDownload.

00:06:25.000 --> 00:06:30.000
즉시, 이니셜라이저가 URL과 앱 그룹 식별자를 받아들인다는 것을 알게 될 것입니다.

00:06:30.000 --> 00:06:35.000
이 정보는 우리가 다운로드하는 것과 결과 파일이 어디에서 끝날지 시스템에 알려줍니다.

00:06:35.000 --> 00:06:37.000
그것은 또한 식별자가 필요하다.

00:06:37.000 --> 00:06:43.000
이 식별자를 사용하여 앱의 여러 실행과 확장 프로그램 내에서 다운로드를 추적할 수 있습니다.

00:06:43.000 --> 00:06:48.000
엔진은 동일한 식별자로 하나 이상의 다운로드를 예약할 수 없습니다.

00:06:48.000 --> 00:06:51.000
그러므로, 당신은 이 식별자를 독특하게 만들어야 합니다.

00:06:51.000 --> 00:06:56.000
다음으로, 우리는 BADownloaderManager 공유 객체에 대한 참조를 얻을 것이다.

00:06:56.000 --> 00:06:59.000
다운로드 관리자는 백그라운드 자산에 대한 단일 인터페이스입니다.

00:06:59.000 --> 00:07:03.000
그것은 당신이 다운로드를 관찰하고, 취소하고, 예약할 수 있게 해준다.

00:07:03.000 --> 00:07:08.000
그런 다음 BADownloadManagerDelegate 프로토콜을 준수하는 대리인에게 약한 참조를 전달할 것입니다.

00:07:08.000 --> 00:07:15.000
나는 곧 이 프로토콜에 대해 더 자세히 알아보겠지만, 지금 알아야 할 가장 중요한 부분은 예약된 다운로드에 대한 메시지를 받는다는 것이다.

00:07:15.000 --> 00:07:19.000
남은 유일한 일은 다운로드 관리자에게 다운로드 일정을 잡아달라고 요청하는 것이다.

00:07:19.000 --> 00:07:22.000
어떤 이유로든 다운로드를 예약할 수 없다면, 오류가 발생합니다.

00:07:22.000 --> 00:07:27.000
백그라운드에서 다운로드를 예약하는 것 외에도, 우리는 또한 전경 다운로드를 위한 API를 제공합니다.

00:07:27.000 --> 00:07:34.000
전경에서 실행하면 우선 순위가 높아지을 뿐만 아니라 다운로드를 즉시 시작할 수 있습니다.

00:07:34.000 --> 00:07:38.000
이것은 URLSession 내에서 기본 세션 구성을 사용하는 것과 유사합니다.

00:07:38.000 --> 00:07:43.000
우리는 당신의 앱이 백그라운드에서 확장 프로그램에 의해 예정된 다운로드를 포그라운드로 홍보할 수 있도록 이 API를 제공합니다.

00:07:43.000 --> 00:07:51.000
명심해야 할 한 가지: 포그라운드 다운로드를 수행하는 것은 확장 프로그램 내에서 사용할 수 없습니다; 앱에서만 시작할 수 있습니다.

00:07:51.000 --> 00:07:58.000
확장 프로그램은 UI를 제시하지 않으며, 사용자가 실행되고 있다는 것을 알아차리지 못하기 때문에, 확장 프로그램은 백그라운드에서만 다운로드를 예약할 수 있습니다.

00:07:58.000 --> 00:08:06.000
앱이 기존 백그라운드 다운로드를 포그라운드로 홍보하고 싶다면, 관리자에서 현재 활성화된 다운로드 목록을 가져와서 쉽게 수행할 수 있습니다.

00:08:06.000 --> 00:08:12.000
반환된 목록에는 현재 예정된 모든 다운로드가 포함되어 있으며, 여기에는 비행 중 다운로드가 포함되거나 스케줄러에 대기열에 있을 수 있습니다.

00:08:12.000 --> 00:08:17.000
다음으로, 앱은 startForegroundDownload를 호출하여 프로모션 프로세스를 시작할 수 있습니다.

00:08:17.000 --> 00:08:22.000
다운로드가 이미 전경에 있다면, 이 방법을 호출하는 것은 효과적으로 아무것도 하지 않을 것이다.

00:08:22.000 --> 00:08:31.000
그러나, 다운로드가 백그라운드인 경우, 먼저 일시 중지된 다음, 이 시점까지 이미 다운로드된 콘텐츠를 다시 다운로드할 필요 없이 전경에서 재개됩니다.

00:08:31.000 --> 00:08:39.000
함께, 이것은 백그라운드 자산을 사용하여 백그라운드에서 예정된 다운로드를 포그라운드로 홍보하는 것이 얼마나 쉬운지에 대한 효과적이고 간단한 삽화를 제공합니다.

00:08:39.000 --> 00:08:41.000
그건 정말 그렇게 간단해!

00:08:41.000 --> 00:08:46.000
다운로드 관리자는 백그라운드 다운로드를 예약하고 모니터링하는 데 사용되는 기본 인터페이스입니다.

00:08:46.000 --> 00:08:51.000
이러한 다운로드 객체는 시스템에 의해 처리되기 때문에, 당신은 위임 객체에서 메시지를 받게 될 것입니다.

00:08:51.000 --> 00:08:52.000
이제 대표단을 살펴보자.

00:08:52.000 --> 00:08:58.000
대리인은 확장 프로그램이나 앱에 의해 예약된 모든 다운로드에 대한 메시지를 받습니다.

00:08:58.000 --> 00:09:02.000
예정된 수많은 다운로드가 있다면, 그들 모두에 대해 콜백을 받게 될 것이다.

00:09:02.000 --> 00:09:07.000
이것은 다운로드 객체의 고유 식별자를 사용하여 그것들을 구별하는 곳입니다.

00:09:07.000 --> 00:09:12.000
당신의 앱은 대리인이 BADownloadManager에 설정되는 순간 콜백을 받기 시작할 것입니다.

00:09:12.000 --> 00:09:14.000
콜백은 시스템에 의해 대기열에 있지 않습니다.

00:09:14.000 --> 00:09:21.000
앱이 위임 방법 중 하나를 처리하지 않거나 위임자가 설정되지 않은 경우, 확장 프로그램은 메시지를 처리하기 위해 깨어날 것입니다.

00:09:21.000 --> 00:09:29.000
즉, 앱 내에서 BADownloadManager에 대리인을 설정하지 않은 경우 확장 프로그램이 메시지를 보낼 것으로 예상해야 합니다.

00:09:29.000 --> 00:09:37.000
앱이 현재 사용자에게 표시되는 포그라운드에 있고 대리인이 설정된 경우, 콜백이 앱으로 전송되고 확장 프로그램은 깨어나지 않습니다.

00:09:37.000 --> 00:09:41.000
확장 프로그램은 앱이 위임 콜백을 처리하지 않는 경우에만 깨어납니다.

00:09:41.000 --> 00:09:46.000
다운로드가 완료되거나 실패하고 앱이 이 메시지를 처리하지 않으면, 확장 프로그램이 깨어날 것입니다.

00:09:46.000 --> 00:09:50.000
명심하세요, 확장은 모든 유형의 콜백에 대해 깨어나지 않습니다.

00:09:50.000 --> 00:09:57.000
BADownloadManagerDelegate와 BADownloaderExtension 프로토콜 간의 공통 인터페이스를 공유하는 콜백만.

00:09:57.000 --> 00:10:02.000
다운로드 성공 또는 실패는 대리인과 프로토콜 간의 공통 인터페이스의 예이다.

00:10:02.000 --> 00:10:11.000
앱 확장 프로그램에는 깨어나게 하는 자체 진입점이 있지만, 확장 프로그램이 현재 실행 중인 경우 BADownloadManager를 사용하고 대리인을 설정할 수 있습니다.

00:10:11.000 --> 00:10:16.000
이를 통해 앱과 확장 프로그램 모두 대표단에게 중복 메시지를 받을 수 있습니다.

00:10:16.000 --> 00:10:19.000
확장은 위임 메시지를 처리하기 위해 깨어나지 않는다는 것을 명심하세요.

00:10:19.000 --> 00:10:24.000
그들은 BADownloaderExtension 프로토콜에 정의된 확장 진입점에서만 일어난다.

00:10:24.000 --> 00:10:27.000
다운로드 관리자의 대리인을 위한 프로토콜을 살펴봅시다.

00:10:27.000 --> 00:10:31.000
첫 번째 기능은 다운로드가 시작될 때마다 메시지를 받는 것이다.

00:10:31.000 --> 00:10:35.000
이것은 장치가 마침내 특정 다운로드를 예약하기로 선택했을 때 추적하는 데 유용합니다.

00:10:35.000 --> 00:10:38.000
다운로드가 일시 중지되면 알림을 받을 수도 있습니다.

00:10:38.000 --> 00:10:45.000
일시 정지의 예는 확장 프로그램이 백그라운드에서 다운로드를 시작한 다음 앱이 포그라운드로 홍보하도록 요청하는 경우입니다.

00:10:45.000 --> 00:10:50.000
이 프로모션 기간 동안 재개되기 전에 다운로드가 일시 중지되는 작은 창이 있을 것이다.

00:10:50.000 --> 00:10:56.000
다운로드 관리자는 또한 전경에서 다운로드될 때 다운로드의 활성 진행 상황을 모니터링할 수 있습니다.

00:10:56.000 --> 00:11:04.000
우리는 또한 도전 요청에 응답하는 메커니즘을 제공하며, 이는 연결의 진위를 검증하거나 연결을 승인하기 위한 자격 증명을 제공하는 데 유용합니다.

00:11:04.000 --> 00:11:08.000
가장 중요한 기능은 실패하거나 완료된 다운로드를 처리하는 것이다.

00:11:08.000 --> 00:11:12.000
다운로드가 실패하면, 일정을 다시 잡거나 원인을 결정해야 할 수도 있습니다.

00:11:12.000 --> 00:11:17.000
성공적인 다운로드를 위해, 시스템은 운영 체제에서 관리하는 위치에 파일을 배치했습니다.

00:11:17.000 --> 00:11:21.000
장치가 공간이 부족하면, 시스템은 당신을 위해 파일을 삭제할 것입니다.

00:11:21.000 --> 00:11:26.000
시스템이 제공한 위치에 파일을 두는 것이 좋습니다.

00:11:26.000 --> 00:11:33.000
반드시 필요한 경우에만 파일을 옮기고 나중에 원본 파일을 삭제하지 않는 한 파일을 복제하지 마십시오.

00:11:33.000 --> 00:11:40.000
이미 잘 알고 계시겠지만, 다운로드 관리자의 대리인을 위한 프로토콜은 앱이나 확장 프로그램이 예약한 다운로드와 관련된 메시지를 받기 위한 것입니다.

00:11:40.000 --> 00:11:44.000
그것은 우리를 다음 주제로 이끄는 당신의 확장의 진입점이 아닙니다.

00:11:44.000 --> 00:11:49.000
이제 우리는 배경 자산의 가장 흥미로운 부분인 확장을 살펴볼 것입니다!

00:11:49.000 --> 00:11:54.000
확장 프로그램을 사용하면 사용자가 앱을 시작하기 전에 자산의 다운로드를 예약할 수 있습니다.

00:11:54.000 --> 00:12:01.000
이를 통해 최소한의 대기 시간으로 앱에서 최상의 경험을 제공하기 위해 자산이 제자리에 있고 갈 준비가 되었는지 확인할 수 있습니다.

00:12:01.000 --> 00:12:05.000
앞서 논의한 바와 같이, 우리는 새로운 앱 확장 프로그램을 도입하고 있습니다.

00:12:05.000 --> 00:12:09.000
이 확장 프로그램은 기존 프로젝트 내부의 Xcode 내에서 만들 수 있습니다.

00:12:09.000 --> 00:12:13.000
빠른 알림으로, 확장 프로그램은 앱이 설치되거나 업데이트될 때마다 실행됩니다.

00:12:13.000 --> 00:12:18.000
앱에 대한 변경 사항이 항상 최신 자산을 가질 수 있도록 유연성을 제공합니다.

00:12:18.000 --> 00:12:22.000
확장 프로그램은 또한 사용자가 앱을 얼마나 자주 사용하는지에 따라 주기적으로 실행됩니다.

00:12:22.000 --> 00:12:28.000
누군가가 당신의 앱을 매일 사용한다면, 시스템은 이 동작을 배우고 확장 프로그램은 더 자주 실행될 것입니다.

00:12:28.000 --> 00:12:33.000
그러나, 앱이 실행되지 않으면, 이 정기적인 점검의 빈도는 가라앉을 것이다.

00:12:33.000 --> 00:12:40.000
새로운 확장 프로그램은 또한 짧은 수명 주기와 좁은 샌드박스를 가지고 있어 사용이 자산을 다운로드하는 것으로 제한되도록 합니다.

00:12:40.000 --> 00:12:45.000
확장에서 빠른 결정을 내리고 백그라운드 자산 프레임워크로 확장을 제한하는 것이 좋습니다.

00:12:45.000 --> 00:12:51.000
확장 프로그램을 탐색하기 전에, 확장 프로그램을 시작하기 전에 만들어야 할 몇 가지 구성이 있습니다.

00:12:51.000 --> 00:12:56.000
이러한 변경 사항은 또한 App Store에서 배포를 위해 앱을 승인하기 위한 요구 사항입니다.

00:12:56.000 --> 00:13:01.000
앱의 정보 속성 목록에서 몇 개의 추가 키를 정의해야 합니다.

00:13:01.000 --> 00:13:05.000
이 키는 확장 프로그램의 Info.plist에 배치되어서는 안 되며, 앱의 키는 삽입되어야 합니다.

00:13:05.000 --> 00:13:08.000
첫 번째 키는 BAInitialDownloadRestrictions입니다.

00:13:08.000 --> 00:13:12.000
이것은 확장에 적용될 제한을 지정할 사전입니다.

00:13:12.000 --> 00:13:17.000
이러한 제한 사항은 앱 리뷰에 의해 검토되므로, 가능한 한 정확하도록 노력하십시오.

00:13:17.000 --> 00:13:21.000
이제, 사전 안의 각 개별 키를 파헤쳐봅시다.

00:13:21.000 --> 00:13:23.000
첫 번째 제한은 다운로드 허용량이다.

00:13:23.000 --> 00:13:30.000
이것은 바이트로 표시되며 초기 앱 설치 중에 확장 프로그램 내에서 요청하는 최대 다운로드 크기입니다.

00:13:30.000 --> 00:13:37.000
이 크기는 각 개별 파일의 크기가 아니라 다운로드를 요청하는 모든 파일의 합계와 관련이 있습니다.

00:13:37.000 --> 00:13:41.000
다음 항목은 문자열로 표시되는 도메인 배열을 사용하는 도메인 AllowList입니다.

00:13:41.000 --> 00:13:48.000
도메인 AllowList는 접두사 와일드카드를 지원하며 확장자가 다운로드할 수 있는 호스트 이름 목록을 가져옵니다.

00:13:48.000 --> 00:13:57.000
DownloadAllowance 및 AllowList와 같은 BAInitialDownloadRestrictions의 키는 첫 번째 앱 설치 후에만 시행된다는 점에 유의하는 것이 중요합니다.

00:13:57.000 --> 00:14:01.000
앱이 실행될 때마다, 이러한 제한은 더 이상 시행되지 않습니다.

00:14:01.000 --> 00:14:09.000
Info.plist의 루트에 있는 마지막 필수 키는 앱이 이러한 자산에 대한 추가 저장소에 필요한 최대 크기입니다.

00:14:09.000 --> 00:14:15.000
우리는 당신이 압축된 자산을 다운로드하고 싶을 것으로 예상하므로, 이 값은 최종 추출된 압축되지 않은 크기여야 합니다.

00:14:15.000 --> 00:14:19.000
여기에 배치된 번호는 앱을 다운로드하기 전에 App Store에 표시됩니다.

00:14:19.000 --> 00:14:25.000
이제 하우스키핑을 살펴보았으니, 확장에 대한 진입점에 대해 더 자세히 이야기해 봅시다.

00:14:25.000 --> 00:14:30.000
프로토콜에서 정의한 기능은 앱이 아닌 시스템에 의해 호출됩니다.

00:14:30.000 --> 00:14:39.000
애플리케이션이 확장 프로그램과 대화하는 다른 앱 확장 프로그램과 달리, 백그라운드 다운로드 확장은 시스템에 의해 중개됩니다.

00:14:39.000 --> 00:14:43.000
시스템이 확장의 수명 주기를 유지하고 있기 때문에, 그것은 일시적인 서비스로 간주되어야 한다.

00:14:43.000 --> 00:14:50.000
프로토콜 내부의 기능이 호출될 때마다, 그곳에서 수행되는 작업을 최소한으로 유지하는 것이 중요합니다.

00:14:50.000 --> 00:14:53.000
연장은 출시된 후 꽤 빨리 종료될 것이다.

00:14:53.000 --> 00:14:58.000
이곳은 감압이나 시간이 걸릴 수 있는 다른 복잡한 작업을 시작할 수 있는 곳이 아니다.

00:14:58.000 --> 00:15:07.000
확장 프로그램 작업의 가장 큰 부분 중 하나는 앱에서 사용할 수 있는 모든 BackgroundAssets API도 확장 프로그램 내에서 사용할 수 있다는 것입니다.

00:15:07.000 --> 00:15:10.000
유일한 예외는 ForegroundDownload API입니다.

00:15:10.000 --> 00:15:14.000
이것은 당신이 앱에서 하는 것처럼 BADownloadManager를 사용할 것이라는 것을 의미합니다.

00:15:14.000 --> 00:15:25.000
사실, 앱과 확장 프로그램 모두에서 자산을 예약하고 관리하기 위해 동일한 코드를 사용하는 무언가를 만들 수 있는 능력을 발견할 가능성이 높습니다.

00:15:25.000 --> 00:15:30.000
또한, 확장 프로그램을 만들 때, 둘 다 공통 앱 그룹에 있는지 확인하는 것이 중요합니다.

00:15:30.000 --> 00:15:36.000
앱과 확장 프로그램에서 콘텐츠를 읽고 쓸 수 있도록 동일한 그룹 식별자를 사용하고 싶을 것입니다.

00:15:36.000 --> 00:15:41.000
이제 확장 프로그램을 준수할 다운로더 확장 프로토콜을 살펴봅시다.

00:15:41.000 --> 00:15:45.000
가장 먼저 알게 될 것은 다운로드 관리자 위임 프로토콜과 얼마나 비슷해 보이는지입니다.

00:15:45.000 --> 00:15:51.000
앞서 언급했듯이, BADownloadManager를 사용하고 확장 프로그램 내에서 대리인을 구성할 수 있습니다.

00:15:51.000 --> 00:15:55.000
그러나, 오직 이 진입점만이 실제로 연장을 깨울 수 있다.

00:15:55.000 --> 00:15:59.000
첫 번째 기능은 애플리케이션이 처음 설치될 때마다 호출됩니다.

00:15:59.000 --> 00:16:02.000
그 앱은 아직 출시되지 않았지만, 당신의 확장 프로그램은 출시되었습니다.

00:16:02.000 --> 00:16:09.000
이것은 앱이 출시되면 최고의 경험을 제공하는 데 필요한 다운로드 일정을 잡을 수 있는 완벽한 기회입니다.

00:16:09.000 --> 00:16:14.000
초기 앱 설치 중에 다운로드 제한이 적용된다는 것을 기억하는 것도 중요합니다.

00:16:14.000 --> 00:16:22.000
Info.plist에서 정의한 BADownloadRestrictions 키를 참조하여 최대 허용 다운로드 크기와 허용 도메인을 알고 싶습니다.

00:16:22.000 --> 00:16:25.000
이 다음 기능은 App Store가 앱을 업데이트할 때마다 호출됩니다.

00:16:25.000 --> 00:16:31.000
사용자가 앱 스위처에서 앱을 종료하지 않는 한, 새로 업데이트된 확장 프로그램이 깨어나고 작업 일정을 시작할 수 있습니다.

00:16:31.000 --> 00:16:40.000
checkForUpdates 기능은 시스템에 의해 주기적으로 깨어나는 확장 프로그램에 대한 지원을 제공하므로 백그라운드 다운로드가 필요한 업데이트를 확인할 수 있습니다.

00:16:40.000 --> 00:16:44.000
이 기능은 사용자가 앱을 사용하는 빈도에 따라 시스템에 의해 호출됩니다.

00:16:44.000 --> 00:16:48.000
우리는 또한 인증 챌린지 요청에 대한 응답을 지원합니다.

00:16:48.000 --> 00:16:53.000
그래서 당신이 다운로드하는 파일이 신뢰할 수 있는 출처에서 왔는지 더 잘 제한하고 확인할 수 있습니다.

00:16:53.000 --> 00:16:57.000
마지막으로, 대리인과 마찬가지로, 다운로드가 실패했거나 성공했는지 알게 될 것입니다.

00:16:57.000 --> 00:17:02.000
백그라운드DownloadDidFail 함수에서 반환된 오류가 없다는 것을 알 수 있습니다.

00:17:02.000 --> 00:17:07.000
오류는 반환된 BADownload 객체 내부의 변수에서 상태와 함께 검색할 수 있습니다.

00:17:07.000 --> 00:17:13.000
확장 프로그램이 다운로드 예정이 아니더라도 마지막 세 가지 기능을 호출할 수 있다는 점에 유의하는 것도 중요합니다.

00:17:13.000 --> 00:17:19.000
앱이 다운로드를 예약했지만 백그라운드가 되지 않았다면, 확장 프로그램은 다운로드 서비스를 제공할 것으로 예상됩니다.

00:17:19.000 --> 00:17:28.000
이제 앱과 확장 프로그램에서 BADownloaderManager를 사용하는 방법을 이해했으므로, 앱과 확장 프로그램이 동시에 실행되는 경우 그것이 무엇을 의미하는지 생각하기 시작해야 합니다.

00:17:28.000 --> 00:17:35.000
예를 들어, 시스템이 주기적으로 업데이트를 확인하기 위해 확장 프로그램을 깨울 때라고 결정했다고 가정해 봅시다.

00:17:35.000 --> 00:17:48.000
그리고 물론, 확장 프로그램은 이 검사를 위해 네트워크에 액세스해야 하기 때문에, BADownloaderManager를 사용하여 카탈로그 또는 사용 가능한 업데이트된 자산 목록을 제공하는 다른 유형의 메타데이터의 다운로드를 예약할 것입니다.

00:17:48.000 --> 00:17:55.000
예를 들어, 파일이 우리가 다운로드해야 하는 큰 멀티 기가바이트 자산 목록이 포함된 작은 100KB 카탈로그라고 가정해 봅시다.

00:17:55.000 --> 00:18:03.000
확장 프로그램은 예정된 다운로드가 언제 완료되거나 실패했는지 알아야 하기 때문에, 다운로드 관리자에 대리인을 첨부할 것입니다.

00:18:03.000 --> 00:18:14.000
다운로드 관리자의 대리인은 어떤 더 큰 자산을 예약할지 결정하기 위해 작은 파일을 다운로드하기 때문에 확장 진입점에 사용되며, 확장 진입점은 즉시 호출되는 것이 보장되지 않습니다.

00:18:14.000 --> 00:18:18.000
다운로드가 완료된 후, 확장 프로그램은 대리인을 통해 이 메시지를 받습니다.

00:18:18.000 --> 00:18:23.000
확장자는 이제 카탈로그 파일에 액세스할 수 있으며 다운로드한 파일로 무엇을 할 것인지 선택해야 합니다.

00:18:23.000 --> 00:18:28.000
확장자가 카탈로그의 어떤 자산을 장치에 다운로드해야 하는지 결정하기 위해 파일을 읽을 것이라고 상상할 수 있습니다.

00:18:28.000 --> 00:18:32.000
그런 다음 확장은 더 큰 자산의 배경 다운로드를 예약할 수 있다.

00:18:32.000 --> 00:18:37.000
이제 다운로드한 파일이 더 이상 필요하지으므로, 확장자는 파일을 삭제해야 합니다.

00:18:37.000 --> 00:18:42.000
이것이 적절해 보이지만, 확장 프로그램이 실행되는 동안 앱이 실행되고 자체 BADownloadManager를 만들면 어떻게 되나요?

00:18:42.000 --> 00:18:44.000
음, 한 번 보자!

00:18:44.000 --> 00:18:48.000
앱이 실행되고 콘텐츠가 업데이트되었는지 즉시 알고 싶어합니다.

00:18:48.000 --> 00:18:54.000
아마도 버전 번호는 그들의 자산이 최신 상태인지 결정하기 위해 상담하는 앱 그룹에 저장될 것이다.

00:18:54.000 --> 00:19:05.000
새로운 카탈로그가 다운로드를 완료하기 전에 앱이 출시되었기 때문에, 관리자로부터 현재 다운로드를 가져오고 카탈로그의 다운로드가 현재 비행 중이라는 것을 깨닫고 대리인에서 완료될 때까지 기다릴 것입니다.

00:19:05.000 --> 00:19:06.000
하지만 우리는 문제가 있어.

00:19:06.000 --> 00:19:13.000
확장 프로그램과 앱 모두 다운로드 관리자에 연결된 각 대표단에서 다운로드 완료 메시지를 받게 됩니다.

00:19:13.000 --> 00:19:16.000
이것은 우리가 다운로드 중인 파일에 대한 데이터 경쟁이 있다는 것을 의미한다.

00:19:16.000 --> 00:19:21.000
앱과 확장 프로그램 모두 동시에 파일을 읽고 삭제하려고 시도할 것이다; 이것은 좋지 않다.

00:19:21.000 --> 00:19:26.000
이것은 당신의 앱이나 확장자가 파일을 읽으려고 시도할 수 있고 누락될 수 있다는 것을 의미합니다.

00:19:26.000 --> 00:19:33.000
이것은 앱 내의 두 스레드에 대해 생각하는 것과 비슷한 방식으로 앱과 확장 프로그램에 대해 생각해야 한다는 것을 의미합니다.

00:19:33.000 --> 00:19:38.000
운 좋게도, 백그라운드 자산은 앱과 확장을 동기화할 수 있는 방법을 제공합니다.

00:19:38.000 --> 00:19:39.000
지금 그것에 대해 얘기하자!

00:19:39.000 --> 00:19:44.000
백그라운드 자산으로 앱과 확장 프로그램을 동기화하는 것은 매우 간단합니다.

00:19:44.000 --> 00:19:49.000
우리가 현재 보고 있는 것은 다운로드가 완료되었을 때 다운로드 관리자의 위임 기능입니다.

00:19:49.000 --> 00:19:55.000
앱이나 확장자가 액세스할 수 있는 파일에 대한 로컬 경로가 포함된 URL이 제공됩니다.

00:19:55.000 --> 00:19:59.000
이 예에서, 우리는 이 파일의 상호 배제를 보장할 것이다.

00:19:59.000 --> 00:20:05.000
다음으로, 우리는 다운로드 관리자에 대한 참조를 잡고 완료 핸들러를 사용하는 withExclusiveControl 기능을 사용합니다.

00:20:05.000 --> 00:20:13.000
완료 핸들러 범위 내에서 실행되는 모든 코드는 독점적인 제어가 필요한 다른 호출과 상호 배타적임을 보장합니다.

00:20:13.000 --> 00:20:21.000
즉, 앱이 완료 핸들러에서 반환되지 않은 동안 확장 프로그램이 ExclusiveControl으로 호출하면 확장 프로그램이 기다립니다.

00:20:21.000 --> 00:20:23.000
이것은 다른 방향으로도 적용된다.

00:20:23.000 --> 00:20:30.000
확장이 먼저 독점적인 제어를 획득하면, 앱은 확장이 종료되거나 범위를 종료하여 제어를 해제할 때까지 기다릴 것이다.

00:20:30.000 --> 00:20:35.000
명심해야 할 중요한 것은 독점적인 통제를 얻는 것이 실패할 수 있다는 것이다.

00:20:35.000 --> 00:20:40.000
이런 일이 일어날 가능성은 극히 낮지만, 그럴 경우, 당신의 코드는 그것을 처리해야 합니다.

00:20:40.000 --> 00:20:45.000
함수에서 제공하는 오류가 nil이 아닌지 확인하여 독점적인 제어를 획득할 수 없는지 감지할 수 있습니다.

00:20:45.000 --> 00:20:51.000
이 시점부터, 당신은 당신의 앱이나 확장 프로그램이 컨텍스트 내에서 독점적인 접근 권한을 가지고 있다는 것을 보장합니다.

00:20:51.000 --> 00:20:58.000
그래서 우리의 이전 예시를 바탕으로, 당신이 원한다면, 파일의 내용을 읽은 다음 정리하는 것이 이제 완벽하게 유효합니다.

00:20:58.000 --> 00:21:07.000
다른 앱이나 확장 프로그램이 독점적인 통제에 들어갈 기회를 얻었을 때 당신이 이미 파일을 처리했다는 것을 알고 있다는 것을 알고 있어야 합니다.

00:21:07.000 --> 00:21:12.000
이것을 달성할 수 있는 한 가지 방법은 먼저 파일이 존재하는지 확인하거나 데이터베이스나 plist에 쓰는 것이다.

00:21:12.000 --> 00:21:19.000
이미 잘 알고 계시겠지만, 백그라운드 다운로더 확장 프로그램은 앱의 대규모 자산 다운로드를 수집하고 예약하기 위한 것입니다.

00:21:19.000 --> 00:21:24.000
런타임은 수명이 짧기 때문에, 연장 내에서 수행된 작업을 최소한으로 유지하십시오.

00:21:24.000 --> 00:21:30.000
또한 둘 다 서로 다운로드한 파일에 액세스할 수 있도록 공유 앱 그룹 내에 확장 프로그램과 앱을 배치해야 합니다.

00:21:30.000 --> 00:21:34.000
그리고 마지막으로, 확장은 당신의 앱이 아닌 시스템에 의해 중개됩니다.

00:21:34.000 --> 00:21:41.000
이제 기본 배경 다운로드 확장 프로그램을 개발하는 방법을 알았으므로, 앱에 배경 자산을 구현하는 데 필요한 모든 것을 갖추고 있습니다.

00:21:41.000 --> 00:21:43.000
이제, 우리가 배운 것을 검토해 봅시다.

00:21:43.000 --> 00:21:52.000
다운로드 관리자는 앱과 확장 프로그램 간의 다운로드를 조정하고 예약하는 데 사용되므로 두 곳 모두에서 다운로드 관리자를 사용해야 합니다.

00:21:52.000 --> 00:21:55.000
앱이 포그라운드에 없더라도 확장 프로그램이 실행됩니다.

00:21:55.000 --> 00:22:01.000
이것은 앱 설치, 업데이트 또는 시스템에 의해 결정된 간격으로 주기적으로 발생할 수 있습니다.

00:22:01.000 --> 00:22:08.000
앱이 실행되고 백그라운드에서 다운로드되고 있던 콘텐츠가 지금 대기 중인 경우, 즉시 해당 다운로드를 포그라운드로 홍보하십시오.

00:22:08.000 --> 00:22:11.000
확장 프로그램은 백그라운드에서만 다운로드를 예약할 수 있습니다.

00:22:11.000 --> 00:22:17.000
앱을 전경으로 홍보함으로써, 콘텐츠가 가능한 한 빨리 도착할 수 있도록 합니다.

00:22:17.000 --> 00:22:23.000
다운로드 관리자에 대한 독점적인 접근이 필요한 경우, 독점적인 제어 API를 사용하세요.

00:22:23.000 --> 00:22:27.000
이렇게 하면 앱이나 확장 프로그램만 해당 창 내에서 런타임을 가질 수 있습니다.

00:22:27.000 --> 00:22:34.000
이것은 매우 유용하므로 컨테이너에 액세스하거나 다운로드를 관리할 때 앱을 경주하는 확장 프로그램에 대해 생각할 필요가 없습니다.

00:22:34.000 --> 00:22:39.000
이 프레젠테이션에서 취해야 할 것이 있다면, 기다리는 것이 열악한 앱 경험을 초래한다는 것입니다.

00:22:39.000 --> 00:22:45.000
기다리는 작업이 진행되는 동안 앱을 사용할 수 있도록 하여 대기 시간을 최소화하세요.

00:22:45.000 --> 00:22:51.000
앱에서 대기를 최소화할 수 있는 방법 중 하나는 기본 백그라운드 다운로드 확장과 함께 새로운 백그라운드 자산 프레임워크를 채택하는 것입니다.

00:22:51.000 --> 00:22:57.000
이것은 앱이 실행되기 전에 앱이 모든 콘텐츠를 준비할 수 있도록 하는 데 도움이 됩니다.

00:22:57.000 --> 00:23:08.000
확장을 테스트하고 진입점을 시뮬레이션하는 방법을 포함하여 이 프레젠테이션에 포함되지 않았을 수 있는 추가 정보가 포함된 문서도 확인하십시오.

00:23:08.000 --> 00:23:12.000
우리는 당신과 배경 자산을 공유하게 되어 정말 기쁘고, 당신의 피드백을 소중하게 생각합니다.

00:23:12.000 --> 00:23:17.000
피드백 어시스턴트를 사용하여 당신에게 효과가 있는 것과 우리가 개선하고 싶은 것을 알려주세요.

00:23:17.000 --> 00:23:23.000
이것은 새로운 틀이며 우리는 파종하는 동안 조정할 기회가 있다.

00:23:23.000 --> 00:23:28.000
우리는 당신이 흥미로울 수 있다고 생각하는 몇 가지 추가 세션이 있으며 당신이 그것들을 확인하는 것이 좋습니다.

00:23:28.000 --> 00:23:33.000
"HTTP3로 네트워킹 가속화"는 백그라운드 자산과 잘 어울리는 환상적인 세션이다.

00:23:33.000 --> 00:23:46.000
또한, 다른 세션을 확인하는 것이 좋습니다: "주문형 리소스 소개" 프레젠테이션은 콘텐츠가 Apple에서 호스팅하고 요청에 따라 파일이 다운로드되는 배경 자산의 대안을 다룹니다.

00:23:46.000 --> 00:23:49.000
이 두 세션 모두 정말 매력적이고 제공할 것이 많다.

00:23:49.000 --> 00:23:55.000
저와 함께 시간을 보내주셔서 감사드리며, Apple의 모든 사람들을 대신하여 환상적인 WWDC를 보내시길 바랍니다!

00:23:55.000 --> 23:59:59.000
♪

