WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:14.000
오웬: 안녕하세요, iOS 앱을 Mac으로 가져오는 것을 환영합니다.

00:00:14.000 --> 00:00:19.000
제 이름은 오웬이고, 저는 맥 카탈리스트 엔지니어입니다.

00:00:19.000 --> 00:00:39.000
변경 없이 M1 Mac에서 iOS 앱을 출시하든, Mac Catalyst로 더 나아가는 것에 대해 생각하기 시작했든, 더 좋게 만들고 싶은 Catalyst 앱을 이미 출시하든, Mac에서 앱을 최고로 만들기 위해 새로운 API와 기술을 공유하게 되어 기쁩니다.

00:00:39.000 --> 00:00:49.000
하지만 먼저, 저는 Mac Catalyst로 가능한 것을 보여주는 개발자들이 한 놀라운 작업 중 일부를 자랑하고 싶습니다.

00:00:49.000 --> 00:01:00.000
Craft는 쉽게 작성하고 아름다운 문서를 제작할 수 있는 놀라운 앱이며, App Store의 2021년 올해의 Mac 앱 수상자입니다.

00:01:00.000 --> 00:01:10.000
그리고 Mac Catalyst 때문에, 이 훌륭한 경험은 모든 장치에서 사용할 수 있으므로, 다음 아이디어가 떠 오를 때 항상 준비되어 있습니다.

00:01:10.000 --> 00:01:23.000
다크룸의 스마트 AI 편집 도구는 사진 워크플로우를 간소화하고, iPhone 또는 iPad의 현장에서 편집을 시작하고 Mac Catalyst 앱으로 집에서 마무리할 수 있습니다.

00:01:23.000 --> 00:01:36.000
뛰어난 디자인, 혁신 및 독창성으로 Apple Design Award를 수상했으며, 2018년부터 App Store Editor's Choice 앱으로 선정되었습니다.

00:01:36.000 --> 00:01:42.000
밤하늘은 컴퓨터에서 바로 우주를 탐험할 수 있는 놀라운 방법입니다.

00:01:42.000 --> 00:01:51.000
별자리에 대해 배우고, 달, 행성 및 위성의 상세한 3D 모델로 자세히 살펴볼 수 있습니다.

00:01:51.000 --> 00:01:59.000
그것은 디자인과 숨막히는 비주얼로 여러 웨비와 로비 상을 수상했다.

00:01:59.000 --> 00:02:15.000
아스팔트 9 - 레전드는 짜릿한 고옥탄 레이싱 시뮬레이션이며, 애플 디자인 어워드를 수상한 유일한 레이싱 게임이며, 액션은 맥 카탈리스트 버전으로 큰 화면에서 훨씬 더 흥미롭다.

00:02:15.000 --> 00:02:23.000
이제, 저는 당신이 당신의 앱을 위해 Mac에서 훌륭한 경험을 만들 수 있는 모든 방법에 대해 알아볼 것입니다.

00:02:23.000 --> 00:02:35.000
기존 iOS 앱을 Mac으로 가져올 수 있는 가장 쉬운 방법인 M1에서 iOS 앱을 기본적으로 실행하기 위한 몇 가지 새로운 옵션으로 시작하겠습니다.

00:02:35.000 --> 00:02:44.000
그런 다음 Xcode에서 Mac Catalyst 실행 대상을 추가하고 변경 사항을 살펴보겠습니다.

00:02:44.000 --> 00:02:53.000
새로운 데스크톱급 iPad API를 채택하면 Catalyst 앱이 무료로 얻을 수 있는 새로운 행동을 보여줄 것입니다.

00:02:53.000 --> 00:03:01.000
그런 다음 새로운 Mac Catalyst API로 가능해진 Mac 전용 개선 사항을 파헤치세요.

00:03:01.000 --> 00:03:09.000
M1이 설치된 Mac의 기본 iOS 앱에 대한 몇 가지 새로운 옵션으로 시작하겠습니다.

00:03:09.000 --> 00:03:14.000
iOS 앱은 이미 Mac App Store의 M1 Mac에서 사용할 수 있습니다.

00:03:14.000 --> 00:03:22.000
옵트아웃하지 않은 한, 앱은 "아이폰 및 아이패드 앱" 탭 아래의 검색에서 찾을 수 있습니다.

00:03:22.000 --> 00:03:29.000
그리고 Mac에서 앱 경험을 개선할 수 있는 몇 가지 새로운 추가 사항이 있습니다.

00:03:29.000 --> 00:03:38.000
iOS 앱이 Mac에서 어떻게 실행되어야 하는지 지정할 수 있는 정보 목록에 추가할 수 있는 두 가지 새로운 키가 있습니다.

00:03:38.000 --> 00:03:51.000
이 키는 SDK 버전에 구속되지 않으며, macOS 12.1 이전의 iOS와 Mac에서 무시되므로 도움이 될 모든 앱에 추가하는 것이 안전합니다.

00:03:51.000 --> 00:04:03.000
첫 번째 키인 "UISupportsTrueScreenSizeOnMac"은 앱이 발생할 수 있는 다양한 디스플레이 구성을 위해 준비되었음을 나타냅니다.

00:04:03.000 --> 00:04:13.000
이렇게 하면, 당신의 앱은 호환 가능한 iPad 크기가 아닌 실제 화면 크기와 픽셀 밀도를 얻습니다.

00:04:13.000 --> 00:04:24.000
두 번째 키인 "UILaunchToFullScreenByDefaultOnMac"은 앱이 시작되자마자 전체 화면 모드로 들어가는 것을 선호한다는 것을 시스템에 알려줍니다.

00:04:24.000 --> 00:04:35.000
이 두 키는 특히 게임과 멀티미디어 앱에서 함께 잘 작동하며, 픽셀 완벽, 에지 투 에지, 전체 화면 경험을 제공합니다.

00:04:35.000 --> 00:04:43.000
이 열쇠들은 즉시 몰입형 경험을 제공하기 위해 수상 경력에 빛나는 Sky: Children of the Light에 의해 채택되었다.

00:04:43.000 --> 00:04:52.000
게임이 출시되자마자, 화면을 풍부한 디테일로 채워 아름다운 탐험의 세계로 끌어들입니다.

00:04:52.000 --> 00:05:08.000
Mac에서 앱 경험을 개선하는 또 다른 방법은 키보드, 마우스 및 트랙패드 입력을 iOS 멀티터치 제스처와 앱에서 기대하는 장치 모션으로 자동으로 변환하는 터치 대안을 사용하는 것입니다.

00:05:08.000 --> 00:05:15.000
우리는 이미 앱 스토어에서 가장 인기 있는 많은 게임에 대한 내장 터치 대체 지원을 추가했습니다.

00:05:15.000 --> 00:05:24.000
실행되면, 그들은 터치 컨트롤이 키보드와 마우스 또는 트랙패드로 변환되는 방법을 설명하는 튜토리얼을 자동으로 보여줍니다.

00:05:24.000 --> 00:05:35.000
예를 들어, 화살표 키를 사용하여 창 중앙에서 스와이프를 시뮬레이션하고 스페이스바를 사용하여 탭을 수행할 수 있습니다.

00:05:35.000 --> 00:05:48.000
자동 터치 대안을 선택하려면, 앱에 "com.apple.uikit.inputalternatives.plist"라는 새 plist 파일을 만드세요.

00:05:48.000 --> 00:06:01.000
먼저, "enabled"의 문자열 값으로 "defaultEnablement"라는 키를 추가하여 시스템에 터치 대안이 즉시 켜져 있어야 한다고 알려줍니다.

00:06:01.000 --> 00:06:05.000
그 아래에, "requiredOnboarding"이라는 또 다른 키를 추가하세요.

00:06:05.000 --> 00:06:14.000
이것은 앱에 가장 적합하다고 결정한 컨트롤의 목록이 포함된 배열입니다.

00:06:14.000 --> 00:06:27.000
트랙패드에서 탭, 틸트, 드래그, 스와이프 및 직접 터치 입력의 다섯 가지 제어 옵션을 선택할 수 있습니다.

00:06:27.000 --> 00:06:41.000
터치 대안이 활성화되면, 이러한 모든 컨트롤이 활성화되지만, 여전히 앱에 가장 적합한 것을 결정하고, 온보딩 목록에 강조 표시하고 싶은 컨트롤만 추가해야 합니다.

00:06:41.000 --> 00:06:50.000
이것은 앱이 Mac에서 실행될 때 감지되며, 첫 번째 실행 시 해당 컨트롤을 강조하는 온보딩 시트가 표시됩니다.

00:06:50.000 --> 00:07:02.000
앱 설정에서, 사람들은 plist에 지정된 선호하는 컨트롤과 모든 컨트롤을 표시하는 것 사이에서 전환할 수 있습니다.

00:07:02.000 --> 00:07:09.000
물론, 가장 좋은 옵션은 앱에서 직접 키보드와 커서 지원을 구현하는 것입니다.

00:07:09.000 --> 00:07:19.000
이렇게 하면 키보드가 연결된 iPad와 Mac을 포함한 모든 장치에서 앱이 잘 작동하도록 할 수 있습니다.

00:07:19.000 --> 00:07:28.000
자세한 내용은 "앱에서 하드웨어 키보드 지원" 및 "트랙패드 및 마우스 입력 처리" 비디오를 시청하세요.

00:07:28.000 --> 00:07:35.000
이제 나는 맥 카탈리스트 앱이 되는 과정을 빠르게 다룰 것이다.

00:07:35.000 --> 00:07:52.000
프로젝트 설정에서 Mac Catalyst 대상을 추가하면 앱이 모든 Mac에서 실행할 수 있는 전체 Mac Catalyst 앱으로 자동으로 변환되며 Mac Catalyst API를 사용하여 추가로 사용자 정의할 수 있습니다.

00:07:52.000 --> 00:08:04.000
또한 네이티브 AppKit 스타일의 컨트롤을 제공하고 앱 콘텐츠가 네이티브 규모로 렌더링되도록 하는 Mac용 인터페이스를 최적화할 수 있습니다.

00:08:04.000 --> 00:08:11.000
나는 팀이 새로운 iPad 기능을 강조하기 위해 작업해 온 마크다운 데모 앱을 사용할 것이다.

00:08:11.000 --> 00:08:18.000
내가 그것을 Mac으로 처음 가져왔을 때, 그것은 "iPad와 일치하도록 확장" 모드에서 실행되고 있다.

00:08:18.000 --> 00:08:25.000
Mac용 최적화로 전환하면, 많은 변경 사항이 자동으로 발생합니다.

00:08:25.000 --> 00:08:29.000
나란히 비교했을 때, 그 차이는 명백하다.

00:08:29.000 --> 00:08:39.000
앱이 Mac에 최적화되면, UINavigationBar는 풍부한 NSToolbar로 변환되어 기본 AppKit 컨트롤을 제공합니다.

00:08:39.000 --> 00:08:43.000
이 번역은 다른 통제에서도 일어난다.

00:08:43.000 --> 00:08:47.000
그리고 텍스트 크기도 조정됩니다.

00:08:47.000 --> 00:08:56.000
iPad 관용구의 텍스트는 iPad 크기로 렌더링된 다음, 원래 크기의 77%로 축소됩니다.

00:08:56.000 --> 00:09:04.000
Mac 관용구의 텍스트는 픽셀 완벽한 규모로 발생하는 기본 Mac 글꼴 렌더링으로 처리됩니다.

00:09:04.000 --> 00:09:10.000
이것은 텍스트가 항상 선명하게 보이도록 하기 때문에 우리 앱에 이상적입니다.

00:09:10.000 --> 00:09:24.000
앱이 Mac Catalyst를 선택하면서, 얼마나 잘 작동하는지 확인하고, iPadOS 16의 새로운 API에서 제공하는 새로운 자동 Mac 동작에 대해 더 깊이 들어가고 싶습니다.

00:09:24.000 --> 00:09:37.000
이미 "데스크톱 클래스 iPad 만나기"와 "데스크톱 클래스 iPad 앱 만들기"를 본 적이 있다면, iPadOS 16으로 앱을 향상시키는 많은 새로운 도구에 대해 배웠습니다.

00:09:37.000 --> 00:09:43.000
그리고 이 새로운 API는 네이티브 Mac 표현으로 아름답게 변환됩니다.

00:09:43.000 --> 00:09:49.000
나는 마크다운 앱을 둘러보고, 이러한 새로운 행동 중 일부를 강조할 것이다.

00:09:49.000 --> 00:09:55.000
컨트롤과 내비게이션은 UINavigationBar에서 NSToolbar로 이동합니다.

00:09:55.000 --> 00:10:01.000
그리고 만약 당신이 이미 도구 모음을 만들지 않았다면, 우리는 당신에게 자동으로 하나를 제공합니다.

00:10:01.000 --> 00:10:09.000
만약 당신이 이미 Catalyst에서 자신의 NSToolbar를 관리하고 있다면, 우리는 당신을 방해하지 않는다.

00:10:09.000 --> 00:10:15.000
중앙 항목 컨트롤은 NSToolbarItems가 됩니다.

00:10:15.000 --> 00:10:32.000
문서 기반 앱의 경우, 창 제목은 문서 이름을 표시하며, 접근성 시스템 설정에서 "창 제목 아이콘 표시"가 활성화되면 파일 프록시 아이콘도 Mac에서 기대하는 대로 나타납니다.

00:10:32.000 --> 00:10:42.000
그리고 내비게이션 컨트롤러를 사용하는 경우, 뒤로 버튼과 다른 내비게이션 컨트롤도 도구 모음으로 옮겨집니다.

00:10:42.000 --> 00:10:53.000
또한, 파일 메뉴에서 새로운 문서 중심 메뉴 항목을 얻을 수 있습니다: 복제, 이동, 이름 바꾸기 및 다른 이름으로 내보내기.

00:10:53.000 --> 00:11:07.000
이러한 메뉴 항목을 활성화하려면, 응답자 체인의 일부 개체가 UIResponder의 중복, 이동, 이름 바꾸기 및 내보내기 기능을 재정의하도록 하십시오.

00:11:07.000 --> 00:11:13.000
앱에 이러한 파일 메뉴 항목이 필요하지 않다면, UIMenuBuilder로 제거해야 합니다.

00:11:13.000 --> 00:11:20.000
앱 메뉴를 제어하기 위해 앱 대리인에 buildMenu 메소드를 구현하세요.

00:11:20.000 --> 00:11:28.000
새로운 문서 메뉴 항목의 UIMenuIdentifier 값은 .document입니다.

00:11:28.000 --> 00:11:42.000
앱에 검색 표시줄이 포함된 경우, 자동으로 NSToolbar로 끌어가며, 먼저 클릭 시 표시줄로 확장되는 검색 버튼으로 표시됩니다.

00:11:42.000 --> 00:11:51.000
그것을 뒷받침하는 UISearchTextField는 NSToolbarItem 내부에서 호스팅되며, 사용자 지정 보기에도 사용할 수 있습니다.

00:11:51.000 --> 00:12:00.000
검색 제안 메뉴와 검색 범위 표시줄도 네이티브 AppKit 컨트롤로 변환됩니다.

00:12:00.000 --> 00:12:15.000
데스크톱급 iPad 기능을 채택하여 무료로 얻을 수 있는 모든 새로운 Mac 동작 외에도, 다중 창 및 도구 모음 동작을 개선하기 위해 몇 가지 새로운 Catalyst 전용 API를 추가했습니다.

00:12:15.000 --> 00:12:25.000
마크다운 앱을 한 번 더 살펴보고, 오래된 API와 새로운 API를 혼합하여 이러한 Mac 관련 기능을 추가할 것입니다.

00:12:25.000 --> 00:12:33.000
기존 Mac Catalyst API에서, 저는 앱을 정말 향상시키는 몇 가지를 선택했습니다.

00:12:33.000 --> 00:12:39.000
나는 기본 컨트롤과 자동 NSToolbar를 얻기 위해 Mac 관용구를 채택했다.

00:12:39.000 --> 00:12:53.000
사용자 지정 포인터를 추가하여 사용자 지정 분할 보기 중간에 있는 슬라이더 핸들 위로 마우스를 이동하면 분할 크기를 조정할 수 있음을 나타내는 수평 이중 화살표로 포인터가 전환됩니다.

00:12:53.000 --> 00:13:02.000
그리고 UIApplicationSupportsPrintCommand plist 키로 인쇄 지원을 추가했습니다.

00:13:02.000 --> 00:13:08.000
앱을 고려할 때, 이러한 모든 기능을 추가할 필요가 없다고 생각하지 마세요.

00:13:08.000 --> 00:13:14.000
대신, 당신이 만든 앱의 유형과 어떤 기능이 가장 잘 작동하는지 생각해 보세요.

00:13:14.000 --> 00:13:23.000
Mac 및 Mac Catalyst 휴먼 인터페이스 지침을 확인하고, 사용하는 다른 앱에서 영감을 찾으세요.

00:13:23.000 --> 00:13:28.000
이러한 기능이 구현됨에 따라, 앱은 이미 멋진 위치에 있다.

00:13:28.000 --> 00:13:34.000
그리고 이제 새로운 Mac Catalyst API로, 나는 더 많은 것을 할 수 있다.

00:13:34.000 --> 00:13:46.000
앱 창 프레임과 컨트롤을 사용자 정의하고, NSToolbar에 UIView 콘텐츠를 표시하고, 도구 모음 항목의 팝오버를 표시하기 위한 새로운 옵션을 추가했습니다.

00:13:46.000 --> 00:13:56.000
저는 이 새로운 API를 사용하여 Windows를 시작으로 Mac에서 앱을 더욱 개선할 것입니다.

00:13:56.000 --> 00:14:02.000
Catalyst 앱은 기존 UIWindowScene API를 사용하여 여러 창을 지원합니다.

00:14:02.000 --> 00:14:22.000
그리고 macOS Ventura의 새로운 기능, 우리는 트래픽 라이트 창 컨트롤의 스타일을 설정하고, 프로그래밍 방식으로 창의 크기를 조정하고 재배치하고, 특정 장면에 대해 전체 화면을 비활성화하여 앱 창을 더욱 사용자 정의할 수 있도록 API를 추가했습니다.

00:14:22.000 --> 00:14:30.000
이 도구를 사용하여 마크다운 앱에 기능을 추가하여 마크다운 구문이 있는 유용한 보조 패널을 보여줄 것입니다.

00:14:30.000 --> 00:14:41.000
이 패널은 새로운 지오메트리 요청 API로 크기가 더 작아질 것이며, 최소화 및 확대/축소 버튼이 비활성화됩니다.

00:14:41.000 --> 00:14:49.000
장면 생성 시, 내 장면 위임의 "scene willConnectTo 세션" 방법에서, 나는 원하는 프레임을 만든다.

00:14:49.000 --> 00:14:55.000
항상 effectiveGeometry에서 현재 프레임으로 시작하는 것이 좋습니다.

00:14:55.000 --> 00:15:05.000
장면이 생성되기 전에, 이것은 시스템이 초기 장면 생성을 위해 무시할 수 있는 값인 CGRectNull로 초기화됩니다.

00:15:05.000 --> 00:15:20.000
크기를 수정한 다음, 새로운 UIWindowScene.macGeometryPreferences 객체를 만들고 프레임을 systemFrame 인수로 전달하여 내 장면에 새로운 프레임을 제공합니다.

00:15:20.000 --> 00:15:25.000
그런 다음 scene.requestGeometryUpdate() 메서드를 사용하여 업데이트를 제출합니다.

00:15:25.000 --> 00:15:36.000
이것은 요청이기 때문에, 시스템은 새로운 지오메트리를 거부할 권리를 보유하며, 이 경우 세부 사항과 함께 오류 핸들러 콜백을 호출할 것이다.

00:15:36.000 --> 00:15:52.000
여기에 표시된 것처럼 장면 willConnectToSession 방법에서 완료되면, 요청은 애플리케이션의 첫 번째 실행에 적용되지만, 이후 실행 시 시스템에서 수행한 적용 가능한 상태 복원으로 대체됩니다.

00:15:52.000 --> 00:16:09.000
그리고 이것은 작은 도우미 패널이기 때문에, 나는 또한 새로운 windowScene windowingBehaviors 객체에서 최소화 버튼과 sizeRestrictions의 새로운 속성에서 창을 전체 화면으로 만들 수 있는 기능을 비활성화합니다.

00:16:09.000 --> 00:16:16.000
이 새로운 마크다운 힌트 창이 표시되면, 우리가 요청한 크기로 나타납니다.

00:16:16.000 --> 00:16:26.000
노란색 최소화 및 녹색 줌 창 제어 버튼은 비활성화되어 빨간색 닫기 버튼만 남깁니다.

00:16:26.000 --> 00:16:30.000
이 옵션들은 장면 제작만을 위한 것이 아니다.

00:16:30.000 --> 00:16:44.000
장면의 수명 중 언제든지 읽기 전용 effectiveGeometry 속성에서 현재 프레임을 확인하고, 필요한 대로 수정하고, 새로운 지오메트리 업데이트를 요청할 수 있습니다.

00:16:44.000 --> 00:16:53.000
다음은 창의 크기를 동일하게 유지하면서 창의 원점을 수정하는 방법을 보여주는 또 다른 예입니다.

00:16:53.000 --> 00:16:57.000
명심해야 할 기하학의 두 가지 중요한 측면이 있다.

00:16:57.000 --> 00:17:10.000
첫째, systemFrame은 Mac 데스크톱의 창 프레임을 지시하기 때문에, systemFrame 속성의 한 지점의 크기는 항상 한 AppKit 지점의 크기입니다.

00:17:10.000 --> 00:17:16.000
앱이 Mac에 최적화되어 있다면, 이것은 UI 요소와 같은 규모입니다.

00:17:16.000 --> 00:17:24.000
그러나, 당신의 앱이 iPad와 일치하도록 확장된다면, 77%의 배율로 다를 것입니다.

00:17:24.000 --> 00:17:31.000
둘째, 좌표 공간의 원초는 메인 디스플레이의 왼쪽 상단 모서리이다.

00:17:31.000 --> 00:17:41.000
여러 개의 디스플레이가 있는 경우, 메인 디스플레이는 시스템 디스플레이 설정에서 메뉴 표시줄을 보여주는 디스플레이입니다.

00:17:41.000 --> 00:17:48.000
새로운 Mac Catalyst API를 사용하면 세 개의 창 제어 버튼 각각의 상태를 제어할 수 있습니다.

00:17:48.000 --> 00:18:07.000
UIWindowScene의 새로운 windowingBehaviors 객체는 닫을 수 있고 소형화할 수 있는 두 가지 속성을 가지고 있으며, 이는 이러한 각각의 창 동작을 조정하고 빨간색과 노란색 창 버튼을 활성화하거나 비활성화합니다.

00:18:07.000 --> 00:18:15.000
녹색 창 버튼은 데스크톱에서 창의 크기를 조정하고 창을 전체 화면으로 전환합니다.

00:18:15.000 --> 00:18:31.000
크기 제한, "allowsFullScreen"의 새 속성으로 전체 화면을 비활성화하거나 크기 제한을 사용하고 최소 및 최대 크기를 동일한 크기로 설정하여 크기 조정을 비활성화할 수 있습니다.

00:18:31.000 --> 00:18:38.000
그리고 둘 다 함으로써, 녹색 버튼도 비활성화됩니다.

00:18:38.000 --> 00:18:46.000
그리고 새로운 "isFullScreen" 속성으로 장면이 현재 전체 화면인지 확인할 수 있습니다.

00:18:46.000 --> 00:18:50.000
이제, 나는 Mac용 도구 모음을 다듬는 데 집중할 것이다.

00:18:50.000 --> 00:19:04.000
UINavigationBar의 자동 변환에 의존하든 앱 코드에서 자신의 NSToolbar를 관리하든 도구 모음 사용자 지정을 위한 새로운 옵션을 추가했습니다.

00:19:04.000 --> 00:19:10.000
Mac Catalyst의 새로운 기능인 UIViews는 NSToolbar에 항목으로 추가할 수 있습니다.

00:19:10.000 --> 00:19:16.000
현재 단어 수를 보여주는 앱을 위한 사용자 지정 UIView를 디자인했습니다.

00:19:16.000 --> 00:19:26.000
그리고 클릭하면 단락과 섹션 수, 읽기 시간 및 번역과 같은 추가 세부 사항이 있는 팝오버를 제공합니다.

00:19:26.000 --> 00:19:37.000
새로운 데스크톱급 iPad API를 사용하고 있기 때문에 UIBarButton 항목의 customView 속성이 자동으로 래핑되어 도구 모음에 추가됩니다.

00:19:37.000 --> 00:19:48.000
하지만 NSToolbar를 독립적으로 관리한다면, NSUIViewToolbarItem이라는 새로운 NSToolbarItem 하위 클래스도 추가했습니다.

00:19:48.000 --> 00:20:00.000
다른 NSToolbarItem과 마찬가지로 NSUIViewToolbarItem을 사용하여 NSToolbarDelegate의 itemForIdentifier 메소드에서 도구 모음 항목을 인스턴스화할 수 있습니다.

00:20:00.000 --> 00:20:09.000
이니셜라이저는 UIView를 래핑한 다음 NSToolbar에 삽입됩니다.

00:20:09.000 --> 00:20:16.000
NSToolbar는 도구 모음 사용자 지정 모드에 대한 고유한 도구 모음 항목 인스턴스를 기대합니다.

00:20:16.000 --> 00:20:26.000
UINavigationBar에서 자동 NSToolbar 호스팅을 사용하는 경우, 보기는 도구 모음 사용자 지정을 위해 시스템에 의해 자동으로 복제됩니다.

00:20:26.000 --> 00:20:43.000
그러나, 자신의 NSToolbar를 관리하는 경우, 대리인은 동일한 UIView 인스턴스를 재사용하는 대신 각 NSUIViewToolbarItem 인스턴스에 대해 UIView의 고유한 인스턴스를 만들어야 합니다.

00:20:43.000 --> 00:20:48.000
도구 모음에 있는 새 항목으로, 나는 팝오버 동작을 추가할 것이다.

00:20:48.000 --> 00:20:57.000
내 도구 모음 항목의 작업에서, 나는 팝오버 뷰 컨트롤러를 만들고, 소스 항목을 내 도구 모음 항목으로 설정합니다.

00:20:57.000 --> 00:21:01.000
그리고 나서 나는 팝오버를 발표한다.

00:21:01.000 --> 00:21:12.000
팝오버 코드를 제자리에 둔 상태에서, 도구 모음 항목을 클릭하면 도구 모음 항목에 고정된 팝오버 프레젠테이션에 추가 세부 사항이 표시됩니다.

00:21:12.000 --> 00:21:24.000
Mac Catalyst의 다른 컨트롤과 마찬가지로, UINavigationBar의 새로운 속성 preferredBehavioralStyle을 사용하여 탐색 모음 번역을 거부할 수 있습니다.

00:21:24.000 --> 00:21:31.000
기본값은 자동이지만, 번역을 명시적으로 요청하려면 .mac으로 설정할 수 있습니다.

00:21:31.000 --> 00:21:39.000
그리고 .pad로 설정하면, 내비게이션 바는 더 이상 자동으로 번역되지 않습니다.

00:21:39.000 --> 00:21:46.000
이러한 옵션을 사용하면 앱의 도구 모음에 새로운 사용자 지정 레이어를 추가할 수 있습니다.

00:21:46.000 --> 00:21:53.000
우리는 당신이 이 새로운 도구를 사용하여 앱을 더 좋게 만드는 방법을 보게 되어 매우 기쁩니다.

00:21:53.000 --> 00:22:00.000
Mac App Store에서 자동으로 iPad 앱을 사용하면 완전히 새로운 청중이 이용할 수 있습니다.

00:22:00.000 --> 00:22:06.000
iPad 앱을 업로드할 때, Mac에서 실행하고 직접 시도해 보세요.

00:22:06.000 --> 00:22:19.000
또는 Mac Catalyst 앱이 되어 한 단계 끌어올리고, iOS 16과 macOS Ventura의 새로운 API를 사용하여 앱을 최고로 만드세요.

00:22:19.000 --> 00:22:22.000
앱을 Mac으로 가져오는 것은 쉽습니다.

00:22:22.000 --> 00:22:28.000
우리는 당신의 노력을 보여주는 것을 좋아하며 당신이 다음에 만드는 것을 빨리 해보고 싶습니다.

00:22:28.000 --> 23:59:59.000
고마워.

