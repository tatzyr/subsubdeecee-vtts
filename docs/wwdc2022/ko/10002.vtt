WEBVTT

00:00:00.000 --> 00:00:14.000
Benjamin Poulain: 안녕하세요, 그리고 가상화에 관한 세션에 오신 것을 환영합니다.

00:00:14.000 --> 00:00:17.000
이게 우리가 오늘 함께 할 일이야.

00:00:17.000 --> 00:00:24.000
Apple 실리콘에서 가상 머신 내에서 macOS와 Linux를 어떻게 실행할 수 있는지 알아보겠습니다.

00:00:24.000 --> 00:00:28.000
이 세션이 끝날 때까지, 당신은 당신의 Mac에서도 똑같이 할 수 있을 것입니다.

00:00:28.000 --> 00:00:33.000
이것은 조금 야심찬 것처럼 보일지 모르지만, 우리와 함께 있고, 우리는 함께 할 것이다.

00:00:33.000 --> 00:00:35.000
여기 오늘 우리의 안건이 있습니다.

00:00:35.000 --> 00:00:43.000
우리는 가상화 기술에 대한 개요부터 시작할 것이며, 가상화 프레임워크를 사용하여 가상 머신을 구축하는 방법을 알아볼 것입니다.

00:00:43.000 --> 00:00:47.000
그런 다음 우리는 macOS에 대해 자세히 알아볼 것이다.

00:00:47.000 --> 00:00:51.000
우리는 가상 Mac을 어떻게 설정하고 macOS를 설치할 수 있는지 볼 것입니다.

00:00:51.000 --> 00:00:56.000
그리고 마지막으로, 우리는 이번에는 리눅스에 대한 두 번째 심층 조사를 할 것이다.

00:00:56.000 --> 00:01:01.000
우리는 전체 리눅스 배포판과 몇 가지 멋진 새로운 기능을 실행하는 방법을 볼 것입니다.

00:01:01.000 --> 00:01:03.000
개요부터 시작합시다.

00:01:03.000 --> 00:01:08.000
우리는 먼저 가상화를 가능하게 하는 스택을 살펴볼 것이다.

00:01:08.000 --> 00:01:10.000
모든 것은 하드웨어에서 시작된다.

00:01:10.000 --> 00:01:16.000
애플 실리콘은 CPU와 메모리의 가상화를 가능하게 하는 특별한 하드웨어를 가지고 있다.

00:01:16.000 --> 00:01:20.000
이것은 당신이 하나의 SoC 위에서 여러 운영 체제를 실행할 수 있다는 것을 의미합니다.

00:01:20.000 --> 00:01:24.000
다음으로, 우리는 이 하드웨어를 활용하기 위해 소프트웨어가 필요하다.

00:01:24.000 --> 00:01:27.000
그리고 이것은 macOS 커널에 바로 내장되어 있다.

00:01:27.000 --> 00:01:30.000
더 이상 커널 확장이나 KEXT를 작성할 필요가 없습니다.

00:01:30.000 --> 00:01:33.000
그건 모두 내장되어 있어.

00:01:33.000 --> 00:01:37.000
애플리케이션에서 이러한 기능을 사용하려면, 하이퍼바이저 프레임워크를 사용할 수 있습니다.

00:01:37.000 --> 00:01:43.000
하이퍼바이저 프레임워크는 CPU와 메모리를 가상화할 수 있는 저수준 API입니다.

00:01:43.000 --> 00:01:50.000
하지만, 그것은 낮은 수준의 프레임워크이기 때문에, 가상 환경의 모든 세부 사항을 작성해야 합니다.

00:01:50.000 --> 00:01:53.000
종종, 우리는 전체 운영 체제를 실행하고 싶다.

00:01:53.000 --> 00:01:58.000
이를 위해, 가상화 프레임워크인 더 높은 수준의 API가 있다.

00:01:58.000 --> 00:02:08.000
가상화 프레임워크를 사용하면 Apple Silicon과 Intel 모두에서 Apple Silicon 또는 Linux에서 macOS를 실행하는 가상 머신을 만들 수 있습니다.

00:02:08.000 --> 00:02:11.000
오늘, 우리의 세션은 가상화 프레임워크에 초점을 맞출 것이다.

00:02:11.000 --> 00:02:14.000
가상화 프레임워크를 사용할 때, 우리는 두 종류의 객체를 다룰 것이다.

00:02:14.000 --> 00:02:17.000
첫 번째 종류는 구성 객체이다.

00:02:17.000 --> 00:02:20.000
그들은 우리의 가상 머신의 모든 속성을 정의한다.

00:02:20.000 --> 00:02:22.000
두 번째 종류는 가상 머신 객체이다.

00:02:22.000 --> 00:02:27.000
그 객체들은 가상 머신과 그들과 상호 작용하는 방법을 추상화한다.

00:02:27.000 --> 00:02:31.000
우리는 구성을 살펴보는 것부터 시작할 것이다.

00:02:31.000 --> 00:02:34.000
구성은 하드웨어를 정의한다.

00:02:34.000 --> 00:02:38.000
구성을 만드는 것은 Apple Store에서 Mac을 구성하는 것과 같다.

00:02:38.000 --> 00:02:42.000
우리는 얼마나 많은 CPU를 원하는지, 얼마나 많은 메모리인지, 어떤 종류의 장치를 원하는지 정의합니다.

00:02:42.000 --> 00:02:45.000
우리는 간단한 구성에서 시작할 수 있다.

00:02:45.000 --> 00:02:47.000
우리는 디스플레이를 추가할 수 있고, 콘텐츠를 볼 수 있다.

00:02:47.000 --> 00:02:50.000
우리는 키보드를 추가할 수 있고, 타이핑할 수 있다.

00:02:50.000 --> 00:02:53.000
우리는 트랙패드를 추가할 수 있으며, UI와 상호 작용할 수 있습니다.

00:02:53.000 --> 00:02:57.000
가상 머신을 구성하는 것은 바로 그런 것이다.

00:02:57.000 --> 00:03:01.000
하지만 우리가 가상 머신을 다루고 있기 때문에, 우리는 이것을 코드로 할 것이다.

00:03:01.000 --> 00:03:05.000
스위프트에서 어떻게 구성을 작성할 수 있는지 봅시다.

00:03:05.000 --> 00:03:07.000
하드웨어를 정의하는 것은 매우 간단하다.

00:03:07.000 --> 00:03:12.000
우리는 VZVirtualMachineConfiguration 유형의 객체로 시작합니다.

00:03:12.000 --> 00:03:15.000
이것은 모든 구성의 루트 객체이다.

00:03:15.000 --> 00:03:19.000
다음으로, 우리는 우리 기계가 얼마나 많은 CPU를 가져야 하는지 정의한다.

00:03:19.000 --> 00:03:22.000
여기서 우리는 네 개의 CPU를 준다.

00:03:22.000 --> 00:03:24.000
그런 다음, 우리는 얼마나 많은 메모리를 원하는지 설정했다.

00:03:24.000 --> 00:03:28.000
이 경우, 우리는 4기가바이트의 메모리를 제공한다.

00:03:28.000 --> 00:03:31.000
마지막으로, 우리는 우리 기계가 가질 장치를 정의한다.

00:03:31.000 --> 00:03:38.000
이 예에서, 우리는 단일 저장 장치, 부팅할 디스크, 그리고 마우스와 같은 포인팅 장치를 설정합니다.

00:03:38.000 --> 00:03:40.000
사용 가능한 많은 장치가 있다.

00:03:40.000 --> 00:03:44.000
당신이 설정한 것은 당신이 해결하고 싶은 문제에 달려 있습니다.

00:03:44.000 --> 00:03:46.000
이제 우리는 구성을 보았다.

00:03:46.000 --> 00:03:53.000
CPU, 메모리 및 장치를 추가하는 VZVirtualMachineConfiguration으로 시작합니다.

00:03:53.000 --> 00:03:58.000
다음으로, 우리는 가상 머신 객체를 살펴볼 것이다.

00:03:58.000 --> 00:04:00.000
Mac을 구성한 후, 우편으로 받습니다.

00:04:00.000 --> 00:04:03.000
포장을 풀고 시작할 시간이다.

00:04:03.000 --> 00:04:08.000
하지만 우리는 가상 머신을 다루고 있기 때문에, 우리는 코드로 그것을 해야 한다.

00:04:08.000 --> 00:04:11.000
스위프트에서 어떻게 할 수 있는지 봅시다.

00:04:11.000 --> 00:04:16.000
먼저, 우리는 구성에서 VZVirtualMachine의 인스턴스를 만들 것입니다.

00:04:16.000 --> 00:04:20.000
VZVirtualMachine은 가상 하드웨어의 인스턴스를 추상화한다.

00:04:20.000 --> 00:04:23.000
이제 우리는 가상 머신을 가지고 있으므로, 우리는 그것을 작동할 수 있다.

00:04:23.000 --> 00:04:27.000
예를 들어, 이 경우, 우리는 그것을 시작하기 위해 start()를 호출합니다.

00:04:27.000 --> 00:04:30.000
우리는 종종 가상 머신과 상호 작용하고 싶을 것이다.

00:04:30.000 --> 00:04:33.000
이를 위해, 우리는 우리를 도울 다른 물건들이 있다.

00:04:33.000 --> 00:04:39.000
예를 들어, 가상 디스플레이를 보여주고 싶다면, VZVirtualMachineView 유형의 객체를 사용할 수 있습니다.

00:04:39.000 --> 00:04:41.000
우리는 뷰를 만드는 것으로 시작한다.

00:04:41.000 --> 00:04:47.000
그런 다음 가상 머신을 뷰의 virtualMachine 속성으로 설정하면 준비가 완료됩니다.

00:04:47.000 --> 00:04:51.000
이제 우리는 이 VZVirtualMachineView 객체를 NSView처럼 사용할 수 있습니다.

00:04:51.000 --> 00:04:56.000
우리는 그것을 앱에 통합하여 가상 머신의 내용을 볼 수 있습니다.

00:04:56.000 --> 00:05:00.000
마무리하자면, 우리는 구성을 보았다.

00:05:00.000 --> 00:05:08.000
구성은 CPU, 메모리 및 장치를 정의하는 VZVirtualMachineConfiguration으로 시작합니다.

00:05:08.000 --> 00:05:13.000
구성에서, 우리는 가상 머신을 만들고, 가상 머신 객체를 사용할 것이다.

00:05:13.000 --> 00:05:23.000
우리는 VM 자체를 추상화하는 VZVirtualMachine, 콘텐츠를 표시하는 VZVirtualMachineView를 보았고, VM을 사용하는 데 도움이 될 수 있는 다른 객체가 있습니다.

00:05:23.000 --> 00:05:29.000
우리는 그 구성이 우리가 가상 머신을 정의하는 방식에 많은 유연성을 제공한다는 것을 보았다.

00:05:29.000 --> 00:05:33.000
불행히도, 한 세션에서 다루기에는 너무 많은 기능이 있다.

00:05:33.000 --> 00:05:37.000
이 세션에서, 우리는 핵심 역량 중 일부를 살펴볼 것이다.

00:05:37.000 --> 00:05:42.000
다른 모든 것에 대해, 우리는 문서를 가지고 있으며, 나는 당신이 그것을 확인하도록 초대합니다.

00:05:42.000 --> 00:05:46.000
개요에서, 우리는 방금 가상 머신을 만드는 방법을 보았다.

00:05:46.000 --> 00:05:50.000
이제 우리가 어떻게 전체 운영 체제를 실행할 수 있는지 살펴볼 때입니다.

00:05:50.000 --> 00:05:52.000
그리고 우리는 macOS로 시작할 것이다.

00:05:52.000 --> 00:05:56.000
가상화 프레임워크는 Apple 실리콘에서 macOS를 지원합니다.

00:05:56.000 --> 00:06:03.000
우리가 애플 실리콘에 가상화 프레임워크를 구축했을 때, 우리는 macOS와 가상화 프레임워크를 함께 개발했습니다.

00:06:03.000 --> 00:06:08.000
이것이 우리에게 주는 것은 가상 머신 내에서 macOS를 실행할 때 놀라운 효율성이다.

00:06:08.000 --> 00:06:16.000
여기 우리가 보게 될 것이 있습니다: 먼저, 우리는 가상 머신을 가상 Mac으로 바꾸는 데 필요한 것을 살펴볼 것입니다.

00:06:16.000 --> 00:06:20.000
그런 다음 가상 Mac에 macOS를 설치하는 단계를 살펴볼 것입니다.

00:06:20.000 --> 00:06:25.000
다음으로, 우리는 macOS를 위한 몇 가지 특별한 장치를 보게 될 것이다.

00:06:25.000 --> 00:06:34.000
그리고 마지막으로, 우리는 호스트 시스템과 가상 Mac 간에 파일을 공유하는 매우 중요한 사용 사례를 살펴볼 것입니다.

00:06:34.000 --> 00:06:36.000
구성부터 시작합시다.

00:06:36.000 --> 00:06:40.000
우리는 전에 일반적인 가상 머신을 만드는 방법을 보았다.

00:06:40.000 --> 00:06:45.000
이제 우리는 가상 머신을 Mac으로 만들 특별한 속성을 추가하고 싶습니다.

00:06:45.000 --> 00:06:49.000
그래서 우리는 어떻게 가상 Mac을 만드나요?

00:06:49.000 --> 00:06:51.000
먼저, 우리는 특별한 플랫폼을 정의할 것이다.

00:06:51.000 --> 00:06:57.000
플랫폼은 특정 유형의 가상 머신의 모든 속성을 보유하는 객체이다.

00:06:57.000 --> 00:07:02.000
가상 Mac 하드웨어에 고유한 세 가지 속성이 있습니다.

00:07:02.000 --> 00:07:04.000
먼저, 우리는 하드웨어 모델을 가지고 있다.

00:07:04.000 --> 00:07:09.000
하드웨어 모델은 우리가 원하는 가상 Mac의 버전을 지정합니다.

00:07:09.000 --> 00:07:11.000
둘째, 보조 창고가 있다.

00:07:11.000 --> 00:07:16.000
보조 저장소는 시스템에서 사용하는 비휘발성 메모리의 한 형태이다.

00:07:16.000 --> 00:07:19.000
그리고 셋째, 기계 식별자가 있다.

00:07:19.000 --> 00:07:26.000
기계 식별자는 실제 Mac에 고유한 일련 번호가 있는 것처럼 기계를 나타내는 고유 번호입니다.

00:07:26.000 --> 00:07:34.000
일단 우리가 플랫폼을 갖게 되면, 우리는 하드웨어를 설명할 모든 부분을 가지고 있지만, macOS를 부팅하는 방법인 한 조각이 더 필요합니다.

00:07:34.000 --> 00:07:39.000
이를 위해, 우리는 특별한 부트 로더인 macOS 부트 로더를 사용할 것입니다.

00:07:39.000 --> 00:07:43.000
스위프트에서 이 모든 것을 어떻게 하는지 봅시다.

00:07:43.000 --> 00:07:44.000
우리는 이전과 같은 기지에서 시작한다.

00:07:44.000 --> 00:07:48.000
이 코드는 우리가 개요에서 본 것이다.

00:07:48.000 --> 00:07:52.000
그런 다음 우리는 VZMacPlatformConfiguration을 만듭니다.

00:07:52.000 --> 00:07:56.000
이것은 가상 Mac을 위한 우리의 플랫폼 객체입니다.

00:07:56.000 --> 00:07:58.000
우리는 이 Mac을 위한 하드웨어 모델이 필요하다.

00:07:58.000 --> 00:08:01.000
여기서 우리는 이전에 저장한 것을 사용한다.

00:08:01.000 --> 00:08:06.000
가상 머신에서 보조 저장소는 로컬 파일 시스템의 파일에 의해 백업됩니다.

00:08:06.000 --> 00:08:09.000
여기서, 우리는 파일 URL에서 보조 저장소를 초기화합니다.

00:08:09.000 --> 00:08:15.000
고유 식별자의 경우, 우리는 이전에 저장한 것에서 VZMacMachineIdentifier를 초기화합니다.

00:08:15.000 --> 00:08:19.000
새로운 설치를 위해, 우리는 또한 새로운 식별자를 만들 수 있습니다.

00:08:19.000 --> 00:08:23.000
우리는 세 가지 속성을 모두 설정했다. 우리 플랫폼은 준비됐어.

00:08:23.000 --> 00:08:27.000
우리가 해야 할 일은 그것을 구성 객체에 설정하는 것뿐이다.

00:08:27.000 --> 00:08:31.000
이것은 우리에게 하드웨어를 준다. 다음으로 우리는 그것을 부팅할 방법이 필요하다.

00:08:31.000 --> 00:08:36.000
그렇게 하기 위해, 우리는 VZMacBootLoader로 부트 로더를 설정했습니다.

00:08:36.000 --> 00:08:38.000
이제 우리 기계는 부팅할 준비가 되었다.

00:08:38.000 --> 00:08:43.000
우리가 지금까지 한 일은 가상 Mac을 정의하고 그것을 시작하는 방법이다.

00:08:43.000 --> 00:08:48.000
하지만 우리는 여전히 소프트웨어를 설치해야 하며, 이는 우리를 설치로 이끈다.

00:08:48.000 --> 00:08:51.000
macOS 설치는 세 단계로 이루어집니다.

00:08:51.000 --> 00:08:56.000
먼저, 설치하려는 macOS 버전으로 복원 이미지를 다운로드해야 합니다.

00:08:56.000 --> 00:09:01.000
그런 다음 우리는 그 버전의 macOS와 호환되는 구성을 만들어야 합니다.

00:09:01.000 --> 00:09:07.000
그리고 마지막으로, 우리는 호환 가능한 가상 머신에 복원 이미지를 설치할 것입니다.

00:09:07.000 --> 00:09:10.000
그래서 먼저, 우리는 복원 이미지를 다운로드해야 합니다.

00:09:10.000 --> 00:09:16.000
개발자 웹사이트에서 복원 이미지를 다운로드할 수 있지만, 가상화도 도움이 될 수 있습니다.

00:09:16.000 --> 00:09:25.000
VZMacOSRestoreImage.latestSupported를 호출하여 최신 안정 버전의 macOS에 대한 복원 이미지 개체를 얻을 수 있습니다.

00:09:25.000 --> 00:09:29.000
이 객체에는 파일을 다운로드하는 데 사용할 수 있는 URL 속성이 있습니다.

00:09:29.000 --> 00:09:35.000
그런 다음 우리는 다운로드한 macOS 버전과 호환되는 가상 머신을 만들고 싶습니다.

00:09:35.000 --> 00:09:37.000
가상화는 또한 여기서 우리를 도울 수 있다.

00:09:37.000 --> 00:09:42.000
우리는 구성 요구 사항에 대해 복원 이미지 개체를 요청할 수 있습니다.

00:09:42.000 --> 00:09:47.000
복원 이미지가 현재 시스템에서 실행될 수 있다면, 우리는 요구 사항을 나열하는 객체를 얻는다.

00:09:47.000 --> 00:09:53.000
요구 사항에서, 우리는 이 버전의 macOS를 실행하는 데 필요한 하드웨어 모델을 얻을 수 있습니다.

00:09:53.000 --> 00:09:55.000
우리는 이전에 하드웨어 모델을 복원하는 방법을 보았다.

00:09:55.000 --> 00:09:59.000
이것이 우리가 새로운 것을 얻는 방법이다.

00:09:59.000 --> 00:10:03.000
요구 사항은 또한 두 가지 유용한 특성을 포함한다.

00:10:03.000 --> 00:10:11.000
이 객체는 이 버전의 macOS를 실행하는 데 얼마나 많은 CPU와 얼마나 많은 메모리가 필요한지 알려줄 수 있다.

00:10:11.000 --> 00:10:14.000
마지막으로, 우리는 설치를 시작할 준비가 되었습니다.

00:10:14.000 --> 00:10:18.000
우리는 구성에서 새로운 가상 머신을 만드는 것으로 시작합니다.

00:10:18.000 --> 00:10:20.000
그런 다음 우리는 설치 프로그램을 만듭니다.

00:10:20.000 --> 00:10:28.000
설치 프로그램은 우리가 만든 호환 가능한 가상 머신과 우리가 다운로드한 복원 이미지의 경로라는 두 가지 인수를 받습니다.

00:10:28.000 --> 00:10:33.000
이제 우리는 install()를 호출할 수 있으며, voilà, 우리는 macOS를 실행할 준비가 되었습니다.

00:10:33.000 --> 00:10:41.000
이제 가상 Mac을 설정하고 macOS를 설치할 수 있으므로, Mac을 위한 몇 가지 특수 장치를 살펴봅시다.

00:10:41.000 --> 00:10:44.000
첫 번째 멋진 기능은 GPU 가속이다.

00:10:44.000 --> 00:10:50.000
우리는 GPU 기능을 가상 Mac에 노출시키는 그래픽 장치를 만들었습니다.

00:10:50.000 --> 00:10:56.000
이것은 당신이 가상 머신에서 메탈을 실행할 수 있고, macOS에서 훌륭한 그래픽 성능을 얻을 수 있다는 것을 의미합니다.

00:10:56.000 --> 00:10:59.000
어떻게 설치하는지 보자.

00:10:59.000 --> 00:11:02.000
우리는 그래픽 장치 구성을 만드는 것으로 시작합니다.

00:11:02.000 --> 00:11:06.000
여기서, 우리는 VZMacGraphicsDeviceConfiguration을 사용할 것이다.

00:11:06.000 --> 00:11:08.000
다음으로, 우리는 그것을 전시하고 싶다.

00:11:08.000 --> 00:11:13.000
우리는 크기와 픽셀 밀도를 정의하여 디스플레이를 설정했습니다.

00:11:13.000 --> 00:11:15.000
이제 우리의 장치 구성이 준비되었습니다.

00:11:15.000 --> 00:11:18.000
평소와 같이, 우리는 그것을 주요 구성 객체에 설정했다.

00:11:18.000 --> 00:11:23.000
우리는 그것을 가상 머신의 그래픽 장치로 설정했다.

00:11:23.000 --> 00:11:26.000
다음으로, 우리는 Mac과 상호 작용하기 위한 새로운 장치를 가지고 있다.

00:11:26.000 --> 00:11:31.000
macOS Ventura에서, 우리는 가상 Mac에 Mac 트랙패드 지원을 추가하고 있습니다.

00:11:31.000 --> 00:11:37.000
새로운 트랙패드를 사용하면 회전, 핀치 투 줌과 같은 제스처를 사용할 수 있습니다.

00:11:37.000 --> 00:11:40.000
이 새로운 장치는 macOS에서 새로운 드라이버를 사용한다.

00:11:40.000 --> 00:11:45.000
그래서 그것을 사용하려면, 호스트 시스템과 가상 머신 모두에서 macOS 13이 필요합니다.

00:11:45.000 --> 00:11:48.000
어떻게 설치하는지 보자.

00:11:48.000 --> 00:11:50.000
그건 아주 쉬워.

00:11:50.000 --> 00:11:54.000
우리는 VZMacTrackpadConfiguration 유형의 새로운 객체를 만듭니다.

00:11:54.000 --> 00:11:58.000
그런 다음 우리는 그것을 가상 머신의 포인팅 장치로 설정합니다.

00:11:58.000 --> 00:12:03.000
이제 우리가 가상 Mac에서 뷰를 사용할 때, 우리는 제스처를 사용할 수 있습니다.

00:12:03.000 --> 00:12:11.000
마지막으로, 호스트 시스템과 가상 머신 간에 파일을 공유하는 우리 중 많은 사람들의 일반적인 사용 사례를 살펴봅시다.

00:12:11.000 --> 00:12:16.000
macOS 12에서, 우리는 리눅스에서 파일을 공유하기 위해 Virtio 파일 시스템 장치를 도입했습니다.

00:12:16.000 --> 00:12:20.000
macOS Ventura에서, 우리는 macOS에 대한 지원을 추가하고 있습니다.

00:12:20.000 --> 00:12:23.000
이제 가상 머신과 공유하고 싶은 폴더를 선택할 수 있습니다.

00:12:23.000 --> 00:12:29.000
호스트 시스템에서 변경한 모든 변경 사항은 가상 머신에 즉시 반영되며 그 반대의 경우도 마찬가지입니다.

00:12:29.000 --> 00:12:32.000
어떻게 설치하는지 보자.

00:12:32.000 --> 00:12:37.000
먼저, 우리는 공유하고 싶은 디렉토리로 VZShareDirectory를 만듭니다.

00:12:37.000 --> 00:12:39.000
그런 다음 우리는 공유 객체를 만듭니다.

00:12:39.000 --> 00:12:43.000
여기서 우리는 VZSingleDirectoryShare를 사용하여 단일 디렉토리를 공유할 것입니다.

00:12:43.000 --> 00:12:48.000
VZMultipleDirectoryShare를 사용하여 여러 디렉토리를 공유할 수도 있습니다.

00:12:48.000 --> 00:12:51.000
이제 우리가 몫을 가졌으니, 우리는 장치를 만들어야 한다.

00:12:51.000 --> 00:12:54.000
하지만 우리는 뭔가 특별한 것을 시작할 거야.

00:12:54.000 --> 00:12:56.000
파일 시스템 장치는 태그로 식별됩니다.

00:12:56.000 --> 00:13:03.000
macOS Ventura에서, 우리는 가상 머신에 이 장치를 자동 마운트하도록 알려주는 특별한 태그를 추가했습니다.

00:13:03.000 --> 00:13:07.000
여기서, 우리는 이 특별한 태그인 macOSGuestAutomountTag를 가져간다.

00:13:07.000 --> 00:13:11.000
그런 다음 우리는 장치를 만들고 특별한 태그를 사용합니다.

00:13:11.000 --> 00:13:15.000
우리는 우리가 구성한 단일 디렉토리에서 공유를 설정했다.

00:13:15.000 --> 00:13:19.000
그리고 마지막으로, 우리는 평소와 같이 구성에 장치를 추가합니다.

00:13:19.000 --> 00:13:23.000
마지막으로, 데모에서 모든 것을 함께 살펴봅시다.

00:13:23.000 --> 00:13:26.000
우리는 기본 구성에서 시작한다.

00:13:26.000 --> 00:13:33.000
우리는 CPU, 메모리, 키보드 및 디스크만 있는 VZVirtualMachineConfiguration을 가지고 있습니다.

00:13:33.000 --> 00:13:35.000
우리는 가상 맥을 원해.

00:13:35.000 --> 00:13:39.000
그렇게 하려면, 우리는 플랫폼을 설정하는 것으로 시작해야 한다.

00:13:39.000 --> 00:13:43.000
우리는 그것을 하기 위해 위에 정의된 createMacPlatform을 사용할 것이다.

00:13:43.000 --> 00:13:46.000
가상 Mac의 두 번째 부분은 부트 로더이다.

00:13:46.000 --> 00:13:50.000
우리는 macOS를 부팅하는 방법을 아는 부트 로더가 필요합니다.

00:13:50.000 --> 00:13:55.000
그것을 얻기 위해, 우리는 플랫폼의 부트 로더를 VZMacOSBootLoader()로 설정했습니다.

00:13:55.000 --> 00:13:58.000
다음으로, 우리는 장치를 설정하고 싶습니다.

00:13:58.000 --> 00:14:00.000
우리는 가속화된 그래픽을 원한다.

00:14:00.000 --> 00:14:04.000
그것을 얻기 위해, 우리는 VZMacGraphicsConfiguration을 설정할 것이다.

00:14:04.000 --> 00:14:12.000
우리는 객체를 만들고, 디스플레이 크기와 픽셀 밀도를 정의하고, 구성에 추가합니다.

00:14:12.000 --> 00:14:14.000
다음으로, 우리는 새로운 트랙패드를 사용하고 싶다.

00:14:14.000 --> 00:14:19.000
포인팅 장치를 VZMacTrackpadConfiguration으로 설정하기만 하면 됩니다.

00:14:19.000 --> 00:14:20.000
그게 다야.

00:14:20.000 --> 00:14:24.000
이제, 우리는 VM을 시작할 수 있지만, 그 위에 체리를 추가하자.

00:14:24.000 --> 00:14:27.000
우리는 디렉토리를 어떻게 공유할 수 있는지 보았다.

00:14:27.000 --> 00:14:29.000
여기서 하자.

00:14:29.000 --> 00:14:32.000
우리는 파일 시스템 장치 구성을 만드는 것으로 시작합니다.

00:14:32.000 --> 00:14:37.000
여기서, 우리는 macOS에 자동 마운트하기 위해 특별한 태그를 사용합니다.

00:14:37.000 --> 00:14:38.000
그리고 나서 우리는 우리의 몫을 정의한다.

00:14:38.000 --> 00:14:42.000
여기서 우리는 파일 시스템의 경로에서 단일 디렉토리 공유를 사용합니다.

00:14:42.000 --> 00:14:47.000
여기서, 우리는 지금 편집하고 있는 이 프로젝트를 공유할 것이다.

00:14:47.000 --> 00:14:51.000
우리는 구성에 장치를 추가하고, 우리는 끝났다.

00:14:51.000 --> 00:14:55.000
모든 게 준비됐어. 우리는 앱을 실행합니다.

00:14:55.000 --> 00:15:01.000
Mac 그래픽 장치를 구성했기 때문에, VZVirtualMachineView는 콘텐츠를 표시할 수 있습니다.

00:15:01.000 --> 00:15:04.000
이게 네가 여기 창문에서 보는 거야.

00:15:04.000 --> 00:15:08.000
그리고 여기 있어. 우리는 처음부터 macOS를 구성했습니다.

00:15:08.000 --> 00:15:11.000
우리는 공유 디렉토리와 우리가 지금 편집하고 있던 프로젝트를 볼 수 있다.

00:15:11.000 --> 00:15:14.000
마지막으로, 우리는 리눅스에 눈을 돌릴 것이다.

00:15:14.000 --> 00:15:20.000
가상화 프레임워크는 macOS Big Sur에서 처음부터 Linux를 지원해 왔다.

00:15:20.000 --> 00:15:26.000
macOS Ventura에서, 우리는 꽤 멋진 새로운 기능을 추가했고, 그 중 일부를 당신과 공유하고 싶습니다.

00:15:26.000 --> 00:15:33.000
먼저, 우리는 가상 머신에 완전히 수정되지 않은 전체 리눅스 배포판을 어떻게 설치할 수 있는지 볼 것이다.

00:15:33.000 --> 00:15:37.000
그런 다음 우리는 리눅스의 UI를 보여주기 위해 추가하고 있는 새로운 장치를 살펴볼 것이다.

00:15:37.000 --> 00:15:44.000
그리고 마지막으로, 우리는 로제타 2를 활용하여 가상 머신에서 리눅스 바이너리를 실행하는 방법을 살펴볼 것입니다.

00:15:44.000 --> 00:15:47.000
설치부터 시작합시다.

00:15:47.000 --> 00:15:52.000
물리적 컴퓨터에 리눅스를 설치하고 싶다면, 설치 프로그램과 함께 ISO 파일을 다운로드하는 것으로 시작할 것입니다.

00:15:52.000 --> 00:15:55.000
그러면 우리는 ISO로 플래시 드라이브를 지울 것이다.

00:15:55.000 --> 00:15:59.000
그리고 마지막으로, 우리는 드라이브를 컴퓨터에 꽂고 부팅할 것이다.

00:15:59.000 --> 00:16:03.000
가상 머신을 다룰 때, 우리는 같은 흐름을 겪을 것이다.

00:16:03.000 --> 00:16:07.000
하지만 물리적 USB 드라이브를 사용하는 대신, 우리는 가상 드라이브를 사용할 것이다.

00:16:07.000 --> 00:16:10.000
그게 어떻게 작동하는지 보자.

00:16:10.000 --> 00:16:14.000
우리는 다운로드한 ISO 파일의 경로에서 URL을 만드는 것으로 시작합니다.

00:16:14.000 --> 00:16:18.000
그런 다음 파일에서 디스크 이미지 첨부 파일을 만듭니다.

00:16:18.000 --> 00:16:24.000
디스크 이미지 첨부 파일은 장치에 연결할 수 있는 저장소를 나타냅니다.

00:16:24.000 --> 00:16:28.000
다음으로, 우리는 가상 저장 장치를 구성합니다.

00:16:28.000 --> 00:16:35.000
이 경우, 우리는 USB 스토리지를 원하기 때문에 VZUSBMassStorageDeviceConfiguration을 사용합니다.

00:16:35.000 --> 00:16:39.000
마지막으로, 언제나처럼, 우리는 기본 구성에 장치를 추가합니다.

00:16:39.000 --> 00:16:45.000
여기서, USB 장치는 우리가 리눅스를 설치할 메인 디스크인 다른 저장 장치 옆에 나타납니다.

00:16:45.000 --> 00:16:50.000
이제 우리는 USB 드라이브를 가지고 있지만, 그것에서 부팅할 방법이 필요하다.

00:16:50.000 --> 00:16:54.000
macOS Ventura에서는 EFI에 대한 지원을 추가했습니다.

00:16:54.000 --> 00:16:58.000
EFI는 ARM과 인텔 하드웨어를 모두 부팅하기 위한 업계 표준이다.

00:16:58.000 --> 00:17:02.000
우리는 가상 머신에 동일한 지원을 제공하고 있다.

00:17:02.000 --> 00:17:05.000
EFI는 부팅 발견 메커니즘을 가지고 있다.

00:17:05.000 --> 00:17:09.000
이것이 허용하는 것은 우리의 USB 드라이브에서 설치 프로그램을 발견하는 것이다.

00:17:09.000 --> 00:17:13.000
EFI는 부팅할 수 있는 각 드라이브를 살펴본다.

00:17:13.000 --> 00:17:16.000
그것은 설치자를 찾아서 거기서 시작할 것이다.

00:17:16.000 --> 00:17:19.000
설치 프로그램 자체는 EFI에게 다음에 어떤 드라이브를 사용할지 알려줄 것이다.

00:17:19.000 --> 00:17:23.000
설치 후, EFI는 리눅스 배포판을 시작할 수 있다.

00:17:23.000 --> 00:17:26.000
코드에서 EFI를 설정하는 방법을 봅시다.

00:17:26.000 --> 00:17:31.000
먼저, 우리는 VZEFIBootLoader 유형의 부트 로더를 만듭니다.

00:17:31.000 --> 00:17:35.000
EFI는 부츠 사이에 정보를 저장하기 위해 비휘발성 메모리가 필요하다.

00:17:35.000 --> 00:17:38.000
이것은 EFI 변수 저장소라고 불린다.

00:17:38.000 --> 00:17:42.000
가상 머신을 사용하면 파일 시스템의 파일로 그러한 저장소를 백업할 수 있습니다.

00:17:42.000 --> 00:17:46.000
여기서, 우리는 처음부터 새로운 가변 상점을 만듭니다.

00:17:46.000 --> 00:17:47.000
이제 EFI가 준비되었습니다.

00:17:47.000 --> 00:17:51.000
구성에서 부트 로더로 설정하기만 하면 됩니다.

00:17:51.000 --> 00:17:57.000
다음으로, 우리는 리눅스 VM, 그래픽을 위한 새로운 기능을 살펴볼 것이다.

00:17:57.000 --> 00:18:01.000
macOS Ventura에서 Virtio GPU 2D에 대한 지원을 추가했습니다.

00:18:01.000 --> 00:18:08.000
Virtio GPU 2D는 Linux가 호스트 macOS에 표면을 제공할 수 있는 반가상화 장치이다.

00:18:08.000 --> 00:18:14.000
리눅스는 콘텐츠를 렌더링하고, 렌더링된 프레임을 가상화 프레임워크에 제공하여 이를 표시할 수 있다.

00:18:14.000 --> 00:18:21.000
이제 macOS와 마찬가지로 VZVirtualMachineView로 앱에서 이 콘텐츠를 표시할 수 있습니다.

00:18:21.000 --> 00:18:24.000
어떻게 설치하는지 보자.

00:18:24.000 --> 00:18:28.000
장치를 설정하는 것은 우리가 macOS를 위해 했던 것과 비슷하다.

00:18:28.000 --> 00:18:32.000
우리는 VZVirtioGraphicsDeviceConfiguration을 만드는 것으로 시작합니다.

00:18:32.000 --> 00:18:36.000
우리는 가상 디스플레이의 크기를 정의해야 한다.

00:18:36.000 --> 00:18:39.000
Virtio 용어로, 가상 디스플레이는 "스캔아웃"이다.

00:18:39.000 --> 00:18:44.000
그래서 우리는 디스플레이의 크기로 하나의 스캔아웃을 만듭니다.

00:18:44.000 --> 00:18:49.000
마지막으로, 우리는 새로운 장치를 구성의 그래픽 장치로 설정했습니다.

00:18:49.000 --> 00:18:54.000
이제 우리의 VM은 VZVirtualMachineView로 콘텐츠를 표시할 준비가 되었습니다.

00:18:54.000 --> 00:18:58.000
다음으로, 데모에서 모든 것을 함께 봅시다.

00:18:58.000 --> 00:19:00.000
우리는 우리가 중단한 곳에서 시작한다.

00:19:00.000 --> 00:19:03.000
Mac과 관련된 코드를 삭제해 봅시다.

00:19:03.000 --> 00:19:05.000
그럼 우리가 부팅하고 있는 디스크를 바꾸자.

00:19:05.000 --> 00:19:09.000
우리는 맥 드라이브에서 리눅스 드라이브로 경로를 바꿀 것이다.

00:19:09.000 --> 00:19:12.000
다음으로, 우리는 부트 로더가 필요합니다.

00:19:12.000 --> 00:19:16.000
우리는 VZEFIBootLoader로 EFI를 설정했습니다.

00:19:16.000 --> 00:19:19.000
우리는 먼저 EFI 부트 로더 객체를 만듭니다.

00:19:19.000 --> 00:19:22.000
그런 다음 파일에서 변수 저장소를 로드합니다.

00:19:22.000 --> 00:19:27.000
그리고 마지막으로, 우리는 구성에서 EFI를 부트 로더로 설정했습니다.

00:19:27.000 --> 00:19:31.000
이제 우리는 부팅할 수 있지만, UI를 보여주는 것이 좋을 것이다.

00:19:31.000 --> 00:19:35.000
Virtio GPU를 구성에 추가합시다.

00:19:35.000 --> 00:19:40.000
우리는 단순히 VZVirtioGraphicsDeviceConfiguration 유형의 그래픽 장치를 만듭니다.

00:19:40.000 --> 00:19:43.000
그런 다음 우리는 가상 디스플레이의 크기로 스캔아웃을 정의합니다.

00:19:43.000 --> 00:19:49.000
그리고 우리는 구성에서 Virtio GPU를 그래픽 장치로 설정했습니다.

00:19:49.000 --> 00:19:53.000
마지막 터치는 마우스를 작동시키는 것이다.

00:19:53.000 --> 00:19:58.000
우리는 가상 USB 화면 좌표 포인터 장치를 사용하며, 리눅스에 마우스가 있을 것입니다.

00:19:58.000 --> 00:20:01.000
그게 다야. 우리는 그 프로젝트를 운영할 수 있어.

00:20:01.000 --> 00:20:04.000
EFI는 디스크를 보고 부팅 가능한 것을 발견한다.

00:20:04.000 --> 00:20:10.000
그런 다음 리눅스는 Virtio GPU 장치를 통해 UI의 내용을 보여준다.

00:20:10.000 --> 00:20:12.000
그리고 우리는 마우스를 사용하여 리눅스와 상호 작용할 수 있다.

00:20:12.000 --> 00:20:20.000
마지막으로, 우리는 리눅스 내부의 로제타 2 기술을 어떻게 활용할 수 있는지 볼 것이다.

00:20:20.000 --> 00:20:29.000
우리 중 많은 사람들에게, 우리는 Mac에서 서비스를 개발하는 것을 좋아하지만, 작업이 준비되면, 우리가 만드는 바이너리는 x86 서버에서 실행해야 할 수도 있습니다.

00:20:29.000 --> 00:20:35.000
X86 명령 에뮬레이션은 이것에 대해 훌륭했지만, 우리는 더 잘할 수 있다.

00:20:35.000 --> 00:20:40.000
macOS Ventura에서, 우리는 로제타 2의 힘을 리눅스 바이너리로 가져오고 있다.

00:20:40.000 --> 00:20:46.000
로제타 2가 하는 일은 가상 머신 내부의 리눅스 x86-64 바이너리를 번역하는 것입니다.

00:20:46.000 --> 00:20:53.000
즉, 좋아하는 ARM Linux 배포판을 실행할 수 있으며, x86-64 앱은 Rosetta와 함께 실행할 수 있습니다.

00:20:53.000 --> 00:20:54.000
그리고 그건 빨라.

00:20:54.000 --> 00:21:00.000
그것은 우리가 Mac에서 사용해 온 것과 같은 기술이며, 이는 우리가 놀라운 성능을 가지고 있다는 것을 의미합니다.

00:21:00.000 --> 00:21:03.000
그걸 어떻게 사용하는지 보자.

00:21:03.000 --> 00:21:07.000
먼저, 우리는 로제타에 대한 리눅스 접근 권한을 부여해야 한다.

00:21:07.000 --> 00:21:11.000
이를 위해, 우리는 macOS에서 본 것과 동일한 파일 공유 기술을 사용합니다.

00:21:11.000 --> 00:21:18.000
폴더를 공유하는 대신, 우리는 특별한 종류의 객체인 VZLinuxRosettaDirectoryShare를 사용합니다.

00:21:18.000 --> 00:21:24.000
그런 다음 공유 장치를 만들고 Rosetta 디렉토리 공유를 설정합니다.

00:21:24.000 --> 00:21:28.000
마지막으로, 우리는 평소와 같이 구성에 장치를 설정했습니다.

00:21:28.000 --> 00:21:32.000
이제 우리의 가상 머신은 로제타를 사용할 준비가 되었습니다.

00:21:32.000 --> 00:21:36.000
다음으로, 리눅스가 그것을 어떻게 활용할 수 있는지 봅시다.

00:21:36.000 --> 00:21:41.000
리눅스에서, 우리는 파일 시스템에 공유 디렉토리를 마운트하는 것으로 시작합니다.

00:21:41.000 --> 00:21:46.000
우리가 리눅스에서 보는 것은 애플리케이션을 번역할 수 있는 로제타 바이너리이다.

00:21:46.000 --> 00:21:53.000
그런 다음 update-binfmts를 사용하여 시스템에 Rosetta를 사용하여 x86-64 바이너리를 처리하도록 말할 수 있습니다.

00:21:53.000 --> 00:21:55.000
이 명령을 기억하는 것에 대해 걱정하지 마세요.

00:21:55.000 --> 00:21:58.000
그건 모두 문서에 있어.

00:21:58.000 --> 00:22:00.000
이제 리눅스가 준비됐어.

00:22:00.000 --> 00:22:07.000
출시된 모든 x86-64 바이너리는 로제타에 의해 번역될 것이다.

00:22:07.000 --> 00:22:11.000
리눅스 섹션을 끝내기 전에, 모든 것을 함께 봅시다.

00:22:11.000 --> 00:22:15.000
여기, 우리는 처음부터 완전한 리눅스 배포판을 설치했습니다.

00:22:15.000 --> 00:22:18.000
우리는 Virtio GPU 2D로 UI를 보여줄 수 있다.

00:22:18.000 --> 00:22:22.000
VM 내에서, 우리는 로제타와 함께 PHP 서버를 실행한다.

00:22:22.000 --> 00:22:27.000
그리고 우리는 macOS 호스트에서 연결할 수 있습니다.

00:22:27.000 --> 00:22:31.000
우리는 가상 머신을 만드는 것이 그 어느 때보다 간단하다는 것을 보았다.

00:22:31.000 --> 00:22:37.000
가상화 프레임워크를 사용하면 단 몇 줄의 코드로 가상 머신을 실행할 수 있습니다.

00:22:37.000 --> 00:22:42.000
우리는 또한 가상 머신이 macOS에서 터무니없이 빠르다는 것을 보았다.

00:22:42.000 --> 00:22:47.000
가상화에 대해 자세히 알아보려면, 코드 샘플과 문서를 확인하도록 초대합니다.

00:22:47.000 --> 00:22:51.000
그리고 팀을 대표하여, 우리는 당신이 이 기술로 다음에 무엇을 할지 빨리 보고 싶습니다.

00:22:51.000 --> 23:59:59.000
.

