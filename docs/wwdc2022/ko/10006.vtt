WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:12.000
안녕하세요, 여러분! 제 이름은 안쿠르 소니입니다.

00:00:12.000 --> 00:00:16.000
저는 여기 애플의 지도 서비스 팀의 엔지니어링 매니저입니다.

00:00:16.000 --> 00:00:21.000
오늘, 우리는 지도 개발자 생태계에 오는 몇 가지 흥미진진한 새로운 기능을 살펴볼 것입니다.

00:00:21.000 --> 00:00:23.000
그럼 시작하자.

00:00:23.000 --> 00:00:28.000
우리의 지도 앱은 전 세계 Apple 고객에게 다양한 최종 사용자 경험을 제공합니다.

00:00:28.000 --> 00:00:38.000
우리는 개발자들이 MapKit 및 MapKit JS 제품을 통해 앱과 웹사이트를 위한 아름다운 지리적 위치 경험을 만들 수 있도록 지원합니다.

00:00:38.000 --> 00:00:43.000
그러나, 우리의 애플 지도 개발자 제안은 항상 매우 고객 중심적이었다.

00:00:43.000 --> 00:00:47.000
우리는 당신의 모든 훌륭한 피드백을 주의 깊게 들었습니다.

00:00:47.000 --> 00:00:54.000
당신은 성능이나 전력을 손상시키지 않으면서 MapKit에서 자신의 데이터를 보강할 수 있는 방법을 원했습니다.

00:00:54.000 --> 00:01:01.000
그래서 우리의 생태계를 완성하기 위해, 우리는 Apple Maps Server API를 소개하게 되어 기쁩니다.

00:01:01.000 --> 00:01:12.000
우리는 네 개의 새로운 서버 API를 도입하고 있습니다: 지오코딩, 리버스 지오코딩, 검색, 예상 도착 시간 - 또는 ETA.

00:01:12.000 --> 00:01:20.000
이 API는 지도를 애플리케이션에 통합하는 동안 다양한 사용 사례를 해결하는 데 도움이 될 것입니다.

00:01:20.000 --> 00:01:26.000
지오코딩 API를 사용하면 주소를 지리적 좌표 위도와 경도로 변환할 수 있습니다.

00:01:26.000 --> 00:01:33.000
마찬가지로, 리버스 지오코딩을 사용하면 그 반대를 할 수 있습니다 -- 지리적 좌표에서 주소로 이동하세요.

00:01:33.000 --> 00:01:43.000
검색 API를 사용하면 사용자에게 검색 문자열을 입력하여 비즈니스, 관심 지점 등과 같은 장소를 찾을 수 있습니다.

00:01:43.000 --> 00:01:47.000
어쩌면 당신은 자신의 데이터 중 일부를 오버레이하여 사용자에게 제시하고 싶을 수도 있습니다.

00:01:47.000 --> 00:01:56.000
ETA API를 사용하면 고객이 비즈니스가 얼마나 멀리 떨어져 있는지 알 수 있도록 돕거나 가장 가까운 매장을 찾기 위해 몇 가지 계산을 할 수 있습니다.

00:01:56.000 --> 00:02:00.000
가능성은 무궁무진해!

00:02:00.000 --> 00:02:05.000
우리는 당신이 세 가지 중요한 이유로 서버 API를 좋아할 것이라고 생각합니다.

00:02:05.000 --> 00:02:13.000
이제 MapKit, MapKit JS 및 새로운 Apple Maps Server API를 활용하여 원활한 경험을 제공할 수 있습니다.

00:02:13.000 --> 00:02:18.000
이것은 당신의 애플리케이션 아키텍처를 단순화하여 완전한 Apple Maps 스택을 제공할 것입니다.

00:02:18.000 --> 00:02:20.000
이것은 당신의 삶을 훨씬 더 쉽게 만들 것입니다.

00:02:20.000 --> 00:02:21.000
물론, 그건 나에게 도움이 됐어.

00:02:21.000 --> 00:02:24.000
하지만 이봐, 난 편파적이야!

00:02:24.000 --> 00:02:27.000
다음 이점은 네트워크 통화를 줄이는 것이다.

00:02:27.000 --> 00:02:38.000
많은 경우, 우리는 iPhone, iPad, 웹사이트 등과 같은 사용자의 장치에서 반복적이고 중복된 요청을 하는 상황에 처해 있습니다.

00:02:38.000 --> 00:02:44.000
아마도 당신은 다른 사용자 장치에서 실행되는 앱에서 같은 주소를 반복해서 찾고 있을 것입니다.

00:02:44.000 --> 00:02:48.000
이것은 많은 네트워크 호출과 대역폭 낭비를 야기한다.

00:02:48.000 --> 00:02:58.000
이 일반적인 작업을 서버에 위임하고 서버 API를 사용하여 백엔드에서 한 번만 수행하면 애플리케이션이 대역폭을 덜 소비하는 데 도움이 됩니다.

00:02:58.000 --> 00:03:09.000
이것의 좋은 부작용은 이제 일부 처리가 Apple Maps Server API를 사용하여 서버에 위임되기 때문에 애플리케이션도 전력 효율적이라는 것입니다.

00:03:09.000 --> 00:03:12.000
이제 이 API들 중 일부를 스핀으로 가져가자.

00:03:12.000 --> 00:03:17.000
우리가 당신의 매장 로케이터 애플리케이션을 위해 이 연락처 카드를 만들고 있다고 가정해 봅시다.

00:03:17.000 --> 00:03:22.000
여기서 우리는 주소와 고객 위치와의 거리가 있는 세 개의 매장을 볼 수 있다.

00:03:22.000 --> 00:03:29.000
이 예에서, 우리는 고객이 그들의 위치를 제공했다고 가정할 것이다.

00:03:29.000 --> 00:03:32.000
지금은, 이 연락처 카드 중 하나를 만드는 데 집중합시다.

00:03:32.000 --> 00:03:41.000
우리는 이 주소들이 만화 서점의 위치를 저장하고 제공하는 서버에 있다고 가정할 것이다.

00:03:41.000 --> 00:03:47.000
이것을 구축하는 방법에는 여러 가지가 있지만, 잠시 동안, 우리가 이 새로운 서버 API를 가지고 있지 않다고 가정해 봅시다.

00:03:47.000 --> 00:03:49.000
기본 건축은 어떻게 생겼을까요?

00:03:49.000 --> 00:03:52.000
당신의 고객 애플리케이션은 이 데이터를 어떻게 얻을 수 있을까요?

00:03:52.000 --> 00:03:58.000
이 다이어그램에서, 우리의 애플리케이션은 상점 주소 목록을 얻기 위해 서버에 전화를 걸고 있다.

00:03:58.000 --> 00:04:04.000
백엔드 서버는 클라이언트 장치에 상점 주소 목록을 반환합니다.

00:04:04.000 --> 00:04:13.000
이 예제에는 서버 API가 없기 때문에, 이제 클라이언트 애플리케이션은 연락처 카드를 구축하기 위해 주소에 대한 다양한 작업을 수행해야 합니다.

00:04:13.000 --> 00:04:20.000
단일 작업을 수행하기 위해, 고객은 다양한 백엔드 서비스에 여러 번 전화를 걸어야 할 수도 있습니다.

00:04:20.000 --> 00:04:29.000
여기서 클라이언트 앱이 MapKit 또는 MapKit JS를 사용하여 Apple Maps Server에 직접 전화를 걸고 있다는 것을 알 수 있습니다.

00:04:29.000 --> 00:04:36.000
고객과 백엔드 사이의 이러한 잡담은 애플리케이션의 성능과 규모에 부정적인 영향을 미칠 수 있다.

00:04:36.000 --> 00:04:47.000
일반적으로 대기 시간이 높은 셀룰러 네트워크를 통해 이러한 방식으로 개별 요청을 사용하는 것은 비효율적이며 연결이 끊어지거나 불완전한 요청이 발생할 수 있습니다.

00:04:47.000 --> 00:04:58.000
각 요청은 병렬로 수행될 수 있지만, 애플리케이션은 실패 가능성을 높이기 위해 별도의 연결에서 각 요청에 대한 데이터를 전송, 대기 및 처리해야 합니다.

00:04:58.000 --> 00:05:02.000
마지막으로, 당신은 클라이언트에 대한 모든 응답을 병합해야 할 것입니다.

00:05:02.000 --> 00:05:07.000
그리고 이 모든 전화가 일어나는 동안, 당신은 사용자에게 스피너를 보여주고 있습니다.

00:05:07.000 --> 00:05:12.000
게다가, 클라이언트 장치는 이러한 추가 통화를 위해 더 많은 대역폭과 전력을 사용하고 있다.

00:05:12.000 --> 00:05:14.000
그건 좋은 사용자 경험이 아니야.

00:05:14.000 --> 00:05:20.000
이제, Apple Maps Server API에 액세스할 수 있는 모델 아키텍처를 살펴봅시다.

00:05:20.000 --> 00:05:27.000
클라이언트와 서비스 간의 채팅을 줄이기 위해 백엔드 서버를 게이트웨이로 사용할 수 있습니다.

00:05:27.000 --> 00:05:34.000
이전과 마찬가지로, 여기서 우리는 당신의 고객으로부터 표시할 상점 목록을 요청합니다.

00:05:34.000 --> 00:05:39.000
다음으로, 우리는 서버로부터 지오코딩을 요청한다.

00:05:39.000 --> 00:05:45.000
그런 다음 Apple Maps Server에서 각 API에 대한 응답을 받습니다.

00:05:45.000 --> 00:05:52.000
만화책 서버는 각 서비스의 응답을 결합하고 애플리케이션에 응답을 보냅니다.

00:05:52.000 --> 00:06:02.000
이 패턴은 애플리케이션이 백엔드 서비스에 대한 요청 수를 줄이고 대기 시간이 많은 네트워크를 통해 애플리케이션 성능을 향상시킬 수 있습니다.

00:06:02.000 --> 00:06:07.000
요약하자면, 당신의 고객은 상점 목록을 얻기 위해 서버에 한 번 전화를 걸습니다.

00:06:07.000 --> 00:06:16.000
그런 다음 서버는 사용자에게 가장 적합한 응답을 구성하기 위해 적절한 API 호출을 하기 위해 무거운 작업을 수행합니다.

00:06:16.000 --> 00:06:19.000
그래서 여기서 우리의 사례 연구 예시로 돌아가자.

00:06:19.000 --> 00:06:24.000
우리는 지오코딩과 ETA API를 사용하여 상점까지의 거리를 얻을 것입니다.

00:06:24.000 --> 00:06:33.000
우리는 지오코드 API를 사용하여 상점 주소의 위도와 경도를 찾을 수 있으며, 나중에 ETA 계산에 사용할 것입니다.

00:06:33.000 --> 00:06:42.000
이 예에서, 먼저, 우리는 만화책 가게의 주소와 URL을 인코딩할 것이다.

00:06:42.000 --> 00:06:50.000
다음으로, 우리는 지오코드 API를 사용하고 이 URL로 인코딩된 주소를 쿼리 매개 변수로 전달할 것입니다.

00:06:50.000 --> 00:06:55.000
우리는 당분간 인증 세부 사항을 건너뛰고 몇 개의 슬라이드로 돌아올 것입니다.

00:06:55.000 --> 00:07:01.000
응답에서, 당신은 반환된 주소의 위도와 경도를 볼 수 있습니다.

00:07:01.000 --> 00:07:06.000
우리는 고객 주소의 위도와 경도를 찾기 위해 같은 과정을 반복할 것입니다.

00:07:06.000 --> 00:07:10.000
이것은 나중에 ETA 계산에 사용될 것이다.

00:07:10.000 --> 00:07:13.000
보시다시피, 응답에 더 많은 필드가 있습니다.

00:07:13.000 --> 00:07:18.000
아래의 리소스 섹션에 자세한 문서를 연결하겠습니다.

00:07:18.000 --> 00:07:26.000
이제 Geocode API에서 얻은 데이터로 ETA API의 출발지와 목적지를 설정할 수 있습니다.

00:07:26.000 --> 00:07:34.000
내가 전에 언급했듯이, 우리는 기원 위도, 경도 및 목적지 위도, 경도를 가지고 있다.

00:07:34.000 --> 00:07:38.000
필요한 경우 여기에서 최대 10개의 목적지를 지정할 수 있습니다.

00:07:38.000 --> 00:07:47.000
우리는 그것을 ETA API에서 원본과 URL로 인코딩된 대상 쿼리 매개 변수로 제공할 것입니다.

00:07:47.000 --> 00:07:53.000
API에 대한 응답은 제공된 각 목적지에 대해 하나씩 ETA 목록입니다.

00:07:53.000 --> 00:07:58.000
이 경우, 우리는 하나의 목적지를 제공했기 때문에 하나만 가지고 있다.

00:07:58.000 --> 00:08:04.000
예를 들어, 우리는 상점까지의 거리를 계산하기 위해 distanceMeters에 관심이 있습니다.

00:08:04.000 --> 00:08:12.000
이것으로, 우리는 필요한 모든 조각을 가지고 있습니다: 상점 주소와 사용자가 당신의 상점에 도달할 수 있는 거리.

00:08:12.000 --> 00:08:19.000
또한 매장 시간과 같은 자신의 매장 정보로 이 데이터를 보강하거나 오버레이하도록 선택할 수 있습니다.

00:08:19.000 --> 00:08:25.000
이런 식으로, 당신은 다른 서버 API를 활용하여 애플리케이션을 구축할 수 있습니다.

00:08:25.000 --> 00:08:29.000
다른 API의 경우, 이 이야기 아래에 링크된 문서를 참조하십시오.

00:08:29.000 --> 00:08:33.000
우리가 이야기하지 않은 중요한 부분 중 하나는 인증이다.

00:08:33.000 --> 00:08:37.000
모든 Apple Maps Server API가 인증되었습니다.

00:08:37.000 --> 00:08:41.000
MapKit JS를 사용하고 있다면, 당신은 이미 반쯤 거기에 있습니다.

00:08:41.000 --> 00:08:47.000
Apple Maps Server API는 MapKit JS와 동일한 메커니즘을 사용하여 인증합니다.

00:08:47.000 --> 00:08:51.000
먼저, 개발자 계정에서 개인 키를 다운로드할 수 있습니다.

00:08:51.000 --> 00:08:56.000
그런 다음 이 개인 키를 사용하여 JWT 형식으로 지도 인증 토큰을 생성합니다.

00:08:56.000 --> 00:09:00.000
아래에 링크된 것을 생성하는 방법에 대한 자세한 문서가 있습니다.

00:09:00.000 --> 00:09:06.000
그런 다음 토큰 API를 사용하여 이 지도 인증 토큰을 교환하여 지도 액세스 토큰을 얻을 수 있습니다.

00:09:06.000 --> 00:09:13.000
우리는 백엔드에서 지도 인증 토큰을 인증하고 지도 액세스 토큰을 다시 보낼 것입니다.

00:09:13.000 --> 00:09:18.000
이것은 JWT 형식이며 모든 API 상호 작용에 사용될 것이다.

00:09:18.000 --> 00:09:25.000
이 액세스 토큰은 여기서 강조 표시된 프로세스를 반복하여 30분마다 새로 고쳐야 합니다.

00:09:25.000 --> 00:09:35.000
이제 인증 흐름이 어떻게 생겼는지 보았으므로, 여기에 토큰 API를 사용하여 액세스 토큰을 가져오는 방법에 대한 간단한 예가 있습니다.

00:09:35.000 --> 00:09:39.000
우리는 여기서 토큰 API를 사용하고 있습니다.

00:09:39.000 --> 00:09:43.000
우리는 지도 인증 토큰을 헤더로 전달하고 있습니다.

00:09:43.000 --> 00:09:48.000
API에 액세스하는 데 사용할 수 있는 지도 액세스 토큰을 다시 받게 될 것입니다.

00:09:48.000 --> 00:09:55.000
이것은 JWT 형식이 될 것이며 expiry, issuedAt 등과 같은 표준 필드를 가질 것이다.

00:09:55.000 --> 00:10:01.000
편의를 위해, expiresInSeconds 필드는 토큰이 얼마나 오래 유효한지 보여줍니다.

00:10:01.000 --> 00:10:04.000
이 경우, 30분입니다.

00:10:04.000 --> 00:10:10.000
지도 인증 토큰은 지도 액세스 토큰과 같지 않다는 것을 명심하세요.

00:10:10.000 --> 00:10:18.000
서버 API에 액세스하기 위해 30분 길이의 지도 액세스 토큰을 얻기 위해 지도 인증 토큰을 교환합니다.

00:10:18.000 --> 00:10:24.000
지도 액세스 토큰과의 API 상호 작용이 어떻게 생겼는지 간단히 살펴봅시다.

00:10:24.000 --> 00:10:29.000
우리는 서버 API 호출과 함께 지도 액세스 토큰을 전달할 것입니다.

00:10:29.000 --> 00:10:34.000
그것은 우리가 몇 슬라이드 전에 본 것처럼 API 호출에 헤더로 추가되었다.

00:10:34.000 --> 00:10:37.000
애플 지도 서버는 지도 액세스 토큰의 유효성을 검사할 것이다.

00:10:37.000 --> 00:10:44.000
검증이 성공하면, Apple Maps Server는 API 응답으로 응답할 것이다.

00:10:44.000 --> 00:10:50.000
이제 API와 인증을 다뤘으니, 사용 제한에 대해 이야기하겠습니다.

00:10:50.000 --> 00:10:55.000
큰 힘에는 큰 책임이 있으므로, 할당량을 현명하게 사용하세요.

00:10:55.000 --> 00:11:01.000
얼마나 많은 API 호출을 할 수 있는지에 대한 일일 상한선이 있으며, 그것은 큽니다!

00:11:01.000 --> 00:11:05.000
당신은 하루에 총 25,000건의 서비스 통화 할당량을 받게 될 것입니다.

00:11:05.000 --> 00:11:11.000
MapKit JS와 서버 API를 통해 서비스를 호출하는 것은 동일한 할당량을 사용한다는 것을 명심하세요.

00:11:11.000 --> 00:11:14.000
더 필요하시면, 저희에게 연락해 주세요.

00:11:14.000 --> 00:11:18.000
그래서, 이 모든 것을 어떻게 추적하나요?

00:11:18.000 --> 00:11:23.000
지도 개발자 대시보드에서 사용 통계를 볼 수 있습니다.

00:11:23.000 --> 00:11:24.000
MapKit JS를 사용하는 사람 있나요?

00:11:24.000 --> 00:11:27.000
이것은 당신에게 매우 친숙해 보일 것입니다.

00:11:27.000 --> 00:11:34.000
서버 API 사용은 서비스로 분류되며, 여기에서 강조 표시된 것을 볼 수 있습니다.

00:11:34.000 --> 00:11:50.000
25,000개 이상의 서버 API 호출을 의미하는 일일 할당량을 초과하면, 우리는 새로운 서비스 호출을 거부하기 시작하고 HTTP 상태 429로 응답할 것이며, 이는 너무 많은 요청을 의미합니다.

00:11:50.000 --> 00:11:55.000
그러한 시나리오에서 앱 경험이 우아하게 저하되도록 해야 합니다.

00:11:55.000 --> 00:12:07.000
드문 시나리오에서, 서비스가 비정상적인 양의 요청을 할 때 - 아마도 코드나 인프라의 일부 버그 때문일 수 있습니다 - HTTP 상태 429도 얻을 수 있습니다.

00:12:07.000 --> 00:12:13.000
HTTP 429를 받을 때, 요청을 반복하지 않는 것이 중요합니다.

00:12:13.000 --> 00:12:18.000
더 나은 접근 방식은 시도 사이에 지연이 증가하면서 재시도하는 것이다.

00:12:18.000 --> 00:12:21.000
이 접근 방식은 기하급수적인 백오프로 알려져 있다.

00:12:21.000 --> 00:12:24.000
그래서, 우리는 오늘 무엇을 배웠나요?

00:12:24.000 --> 00:12:27.000
우리는 네 개의 새로운 서버 API를 출시하고 있습니다.

00:12:27.000 --> 00:12:33.000
이 API는 지오코딩, 리버스 지오코딩, 검색 및 ETA입니다.

00:12:33.000 --> 00:12:42.000
MapKit 및 MapKit JS와 함께 이러한 API를 사용하면 Apple Maps 스택을 사용하여 앱을 더 잘 설계하는 데 도움이 될 것입니다.

00:12:42.000 --> 00:12:51.000
Apple Maps Server API를 사용하여 해당 작업을 백엔드 서버에 위임하여 중복되고 반복적인 통화를 최적화할 수 있습니다.

00:12:51.000 --> 00:12:58.000
이 API의 일일 할당량은 25,000이며 MapKit JS 서비스 사용과 공유됩니다.

00:12:58.000 --> 00:13:01.000
그리고 그것은 당신을 위한 새로운 Apple Maps Server API입니다.

00:13:01.000 --> 00:13:07.000
여기에 언급된 다른 세션과 아래에 링크된 자세한 문서를 확인하세요.

00:13:07.000 --> 00:13:10.000
우리는 당신이 그것들을 어떻게 활용하는지 보기를 기대합니다.

00:13:10.000 --> 00:13:11.000
고마워!

00:13:11.000 --> 23:59:59.000
♪

