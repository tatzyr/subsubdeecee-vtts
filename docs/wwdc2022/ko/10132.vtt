WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:14.000
안녕하세요, 제 이름은 민디이고 저는 사진 팀의 엔지니어입니다.

00:00:14.000 --> 00:00:20.000
오늘, 저는 당신의 앱에서 사진 변경 기록에 액세스하는 방법을 살펴볼 것입니다.

00:00:20.000 --> 00:00:29.000
PhotoKit은 사진 라이브러리에 저장된 사진, 비디오 및 앨범에 액세스하고 업데이트하기 위한 풍부한 API 세트를 제공합니다.

00:00:29.000 --> 00:00:45.000
PhotoKit은 사진, 사용자 지정 카메라 또는 사람들이 독특한 방식으로 사진 라이브러리를 탐색할 수 있는 방법을 제공하는 앱을 관리하거나 편집하기 위해 깊은 수준의 사진 액세스 및 통합이 필요한 앱을 위해 설계되었습니다.

00:00:45.000 --> 00:00:54.000
이러한 유형의 응용 프로그램은 사진 경험을 면밀히 반영하기 위해 시간이 지남에 따라 사진 라이브러리가 어떻게 변하는지 모니터링할 수 있습니다.

00:00:54.000 --> 00:01:02.000
사람들이 친구들과 하이킹 여행 사진을 공유하고 편집할 수 있는 소셜 하이킹 앱을 만들었다고 가정해 봅시다.

00:01:02.000 --> 00:01:13.000
누군가가 앱을 실행하면, 앱은 최신 하이킹 운동의 시작과 끝 타임스탬프에서 사진을 수집하여 산에서의 경험의 콜라주를 생성합니다.

00:01:13.000 --> 00:01:18.000
콜라주는 사진 라이브러리에서 선택한 사진과 동기화됩니다.

00:01:18.000 --> 00:01:25.000
예를 들어, 누군가가 친구로부터 하이킹 사진을 받으면, 앱은 이러한 업데이트를 사용하여 새로운 콜라주를 생성할 것이다.

00:01:25.000 --> 00:01:37.000
지금까지, 앱이 새로 삽입된 자산과 이전 하이킹 콜라주에 대한 변경 사항을 발견하려면, 앱은 일련의 가져오기를 수행해야 합니다.

00:01:37.000 --> 00:01:46.000
어떤 자산이 삽입되었는지 결정하기 위해, 앱은 마지막 앱 출시 날짜보다 늦게 생성된 날짜로 자산을 가져올 수 있습니다.

00:01:46.000 --> 00:01:50.000
자산 업데이트와 삭제를 결정하는 것은 더 까다롭다.

00:01:50.000 --> 00:02:06.000
이 앱은 모든 콜라주에서 모든 자산을 다시 가져오고 자산 업데이트를 결정하기 위해 수정 날짜를 확인해야 하지만, 자산 수정 날짜는 내부 사진 처리 활동에 의해 설정될 수 있기 때문에 거짓 긍정을 불러올 수 있습니다.

00:02:06.000 --> 00:02:16.000
사진 라이브러리의 삭제는 추적된 모든 자산을 가져오기와 함께 반환되지 않은 자산에 대해 가져와야 하기 때문에 추적하기가 더 어렵습니다.

00:02:16.000 --> 00:02:28.000
전체적으로, 이것은 앱이 실행될 때마다 수행해야 하는 세 가지 별도의 검사가 있다는 것을 의미하며, 앱이 많은 양의 자산을 표시하는 경우 특히 비용이 많이 들 수 있습니다.

00:02:28.000 --> 00:02:38.000
불확실한 결과에 대해 다른 가져오기와 검사를 수행하는 대신, 하나의 통합 API 호출에서 무엇이 변경되었는지 정확히 알 수 있는 방법이 있다면 어떨까요?

00:02:38.000 --> 00:02:42.000
음, 나는 우리가 그걸 했다고 말하게 되어 신나!

00:02:42.000 --> 00:02:50.000
새로운 변경 기록 API를 사용하면 사진 라이브러리의 오프라인 업데이트를 더 쉽게 추적할 수 있습니다.

00:02:50.000 --> 00:02:58.000
변경 기록은 사진 라이브러리에 대한 삽입, 업데이트 및 삭제와 같은 변경 사항의 타임라인으로 구성됩니다.

00:02:58.000 --> 00:03:07.000
이 예시 타임라인에는 지난 3일 동안의 변경 내역에 다양한 자산, 앨범 및 폴더 변경 사항이 있습니다.

00:03:07.000 --> 00:03:17.000
이 타임라인을 사용하여, 지난 이틀 동안 어떤 변화가 일어났는지, 아니면 앱을 마지막으로 실행했는지 어떻게 알 수 있나요?

00:03:17.000 --> 00:03:25.000
이제 주어진 시점에서 사진 라이브러리의 상태를 나타내는 지속적인 변경 토큰을 사용할 수 있습니다.

00:03:25.000 --> 00:03:37.000
이 토큰은 앱 실행 전반에 걸쳐 유지될 수 있으며, 타사 앱 변경을 포함하여 해당 토큰 이후 발생한 사진 라이브러리의 변경 사항을 가져오는 데 사용할 수 있습니다.

00:03:37.000 --> 00:03:45.000
앱이 제한된 라이브러리 모드에 있는 경우, 사용자가 선택한 PhotoKit 개체에 대한 변경 사항만 반환됩니다.

00:03:45.000 --> 00:03:55.000
이 변경 토큰은 장치에 로컬이며 언제든지 지속적인 변경 또는 사진 라이브러리 인스턴스에서 액세스할 수 있습니다.

00:03:55.000 --> 00:04:06.000
이 새로운 API는 PhotoKit을 지원하는 모든 플랫폼에서 사용할 수 있습니다: macOS, iOS, iPadOS 및 tvOS.

00:04:06.000 --> 00:04:14.000
앱이 실행되고 사진 라이브러리로 작업할 때, 앱 내에 영구 변경 토큰을 저장할 수 있습니다.

00:04:14.000 --> 00:04:21.000
나중에, 토큰을 사용하여 그 이후로 발생한 사진 라이브러리 변경 사항을 가져올 수 있습니다.

00:04:21.000 --> 00:04:33.000
각 지속적인 변경에 대해, 세 가지 유형의 사진 개체에 대한 변경 세부 사항을 얻을 수 있습니다: 자산, 자산 수집 및 수집 목록.

00:04:33.000 --> 00:04:36.000
그래서 이것은 코드에서 어떻게 생겼나요?

00:04:36.000 --> 00:04:42.000
먼저 마지막으로 저장된 변경 토큰을 사용하여 지속적인 변경 사항을 가져옵니다.

00:04:42.000 --> 00:04:53.000
다음으로, 지속적인 변경 사항을 열거하고 각 영구 변경 객체에 대한 변경 세부 사항(이 경우 "자산" 유형)을 가져옵니다.

00:04:53.000 --> 00:05:04.000
이러한 변경 세부 사항은 변경 토큰 이후 사진 라이브러리에 업데이트, 삭제 및 삽입된 로컬 식별자에 대한 정보를 제공합니다.

00:05:04.000 --> 00:05:10.000
이러한 변경 사항을 처리한 후, 향후 사용을 위해 마지막 변경 토큰을 저장할 수 있습니다.

00:05:10.000 --> 00:05:18.000
새로운 영구 히스토리 API를 기존 변경 관찰자 API와 비교하고 대조해 봅시다.

00:05:18.000 --> 00:05:28.000
PHChanges는 활성 인메모리 가져오기 결과를 처리하며 앱이 실행되는 동안 사진 라이브러리에 대한 실시간 변경 사항을 기록하는 데 사용됩니다.

00:05:28.000 --> 00:05:38.000
반면에, 영구적인 기록은 사진 라이브러리에 대한 장기간의 변경 사항을 기록하며, 앱이 활성화되지 않을 때의 변경 사항을 보고하는 데 사용할 수 있습니다.

00:05:38.000 --> 00:05:45.000
앱의 요구 사항에 따라 이 API 둘 중 하나를 사용할 수 있습니다.

00:05:45.000 --> 00:05:55.000
하이킹 앱 예제로 돌아가서, 이제 지속적인 히스토리 API를 사용하여 하이킹 콜라주를 만들고 업데이트하기 위해 자산 변경 사항을 추적하고 싶습니다.

00:05:55.000 --> 00:06:02.000
먼저, 마지막으로 저장된 변경 토큰을 사용하고 지속적인 변경 사항을 가져올 것입니다.

00:06:02.000 --> 00:06:13.000
다음으로, 지속적인 변경 사항을 반복하고, 관련 자산 변경 세부 사항을 잡고, 삽입, 업데이트 및 삭제된 식별자를 처리할 것입니다.

00:06:13.000 --> 00:06:25.000
이제 변경 내역에서 앱에 영향을 미치는 라이브러리 변경 사항을 식별해야 합니다. 앱에는 변경 사항을 가져오는 데 반환된 모든 정보가 필요하지 않기 때문입니다.

00:06:25.000 --> 00:06:38.000
앱이 새로운 하이킹 운동을 위해 사진 라이브러리에 어떤 자산이 추가되었는지, 그리고 이전 하이킹 콜라주에서 참조된 자산을 업데이트하고 삭제했는지 아는 것이 중요합니다.

00:06:38.000 --> 00:06:47.000
나는 이미 지속적인 변경을 통해 열거하는 세 세트의 삽입, 업데이트 및 삭제된 자산 로컬 식별자를 확인했다.

00:06:47.000 --> 00:06:51.000
이것을 반영하기 위해 앱을 업데이트하려면 어떻게 해야 하나요?

00:06:51.000 --> 00:07:08.000
삽입된 식별자 세트를 사용하여 삽입된 자산을 가져오고 각 하이킹 시작 및 종료 날짜에 대한 생성 날짜를 확인하여 하이킹 타임스탬프 사이에 어떤 자산이 추가되었는지 결정할 수 있습니다.

00:07:08.000 --> 00:07:20.000
업데이트된 자산은 이제 조정이 적용될 수 있으므로, 새로운 hasAdjustments API를 사용하여 UI에서 자산을 다시 그려야 하는지 확인할 수 있습니다.

00:07:20.000 --> 00:07:27.000
삭제된 자산 로컬 식별자를 사용하여 어떤 콜라주를 재생성해야 하는지 결정할 수 있습니다.

00:07:27.000 --> 00:07:36.000
이제 저는 모든 오프라인 사진 라이브러리 변경 사항을 처리했고 제 앱은 최신 상태입니다.

00:07:36.000 --> 00:07:42.000
다음은 새로운 변경 내역 API를 사용할 때 명심해야 할 몇 가지 사항입니다.

00:07:42.000 --> 00:07:49.000
먼저, 어떤 변경 사항이 당신과 당신의 앱에 중요한지 결정하고, 그 변경 사항만 확인하세요.

00:07:49.000 --> 00:07:59.000
성능을 개선하기 위해 여러 개의 작은 요청 대신 업데이트되고 삽입된 자산에 대한 하나의 큰 가져오기 요청을 수행하는 것을 고려하십시오.

00:07:59.000 --> 00:08:12.000
사진 라이브러리는 후드 아래의 처리 및 동기화 활동으로 인해 많이 변경될 수 있으므로, 특히 앱이 자주 실행되지 않는 경우 많은 양의 변경 사항을 열거할 수 있습니다.

00:08:12.000 --> 00:08:20.000
이 때문에, UI를 차단하지 않도록 백그라운드 스레드의 변경 기록을 요청하는 것이 좋습니다.

00:08:20.000 --> 00:08:25.000
지속적인 기록을 가져올 때 발생할 수 있는 두 가지 유형의 오류가 있습니다.

00:08:25.000 --> 00:08:33.000
변경 토큰이 사용 가능한 변경 내역보다 오래된 경우, 만료된 변경 토큰 오류가 반환됩니다.

00:08:33.000 --> 00:08:44.000
경우에 따라, 발생한 변경 사항을 완전히 재구성하기 위해 지속적인 변경에 의존할 수 없으며, 변경 세부 사항을 사용할 수 없는 오류를 반환합니다.

00:08:44.000 --> 00:08:54.000
이러한 경우, 앱이 최신 상태인지 확인하기 위해 사진 라이브러리에서 추적된 개체를 다시 가져오는 것이 좋습니다.

00:08:54.000 --> 00:09:01.000
마무리하기 전에, 당신과 공유하고 싶은 몇 가지 새로운 PhotoKit API가 더 있습니다.

00:09:01.000 --> 00:09:08.000
PhotoKit은 이제 미디어 하위 유형과 스마트 앨범별로 영화 비디오에 액세스할 수 있도록 지원합니다.

00:09:08.000 --> 00:09:11.000
또한 두 개의 새로운 오류 코드가 있다.

00:09:11.000 --> 00:09:23.000
사진 라이브러리 번들이 macOS의 파일 제공자 동기화 루트 디렉토리에 있는 경우, 라이브러리가 손상될 수 있으며, 변경을 수행하려고 할 때 오류가 반환됩니다.

00:09:23.000 --> 00:09:31.000
네트워크 문제로 인해 자산 자원을 찾을 수 없는 경우, 자원 요청은 이제 네트워크 오류를 반환합니다.

00:09:31.000 --> 00:09:35.000
모든 최신 업데이트는 개발자 문서를 확인하세요.

00:09:35.000 --> 00:09:44.000
마지막으로, 사진으로 작업하고 액세스하는 가장 쉬운 방법이기 때문에 사진 선택기에서 올해의 세션을 확인하십시오.

00:09:44.000 --> 00:09:51.000
우리는 당신이 새로운 변경 기록 API와 PhotoKit의 모든 훌륭한 새로운 기능을 사용하게 되어 매우 기쁩니다.

00:09:51.000 --> 00:09:52.000
고마워!

00:09:52.000 --> 23:59:59.000
♪

