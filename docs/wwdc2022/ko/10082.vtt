WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:15.000
안녕하세요 여러분, 제 이름은 존 크로우슨이고, 저는 여기 애플의 성능 도구 팀의 소프트웨어 엔지니어입니다.

00:00:15.000 --> 00:00:24.000
이 강연에서, Xcode와 온디바이스 중단 감지를 사용하여 앱에서 중단을 추적할 수 있는 몇 가지 새로운 도구를 소개하게 되어 기쁩니다.

00:00:24.000 --> 00:00:32.000
앱 개발 프로세스의 여러 단계를 방문할 때 가이드가 되어 각 단계에서 어떤 도구가 가장 도움이 되기를 고려하겠습니다.

00:00:32.000 --> 00:00:38.000
이 이야기는 네 개의 섹션으로 나뉜다: 먼저, 내가 다룰게, 교수형은 뭐야?

00:00:38.000 --> 00:00:49.000
그런 다음, 앱을 개발하는 동안, 앱을 베타 테스트하는 동안, 그리고 앱을 출시한 후 중단을 발견하고 진단하는 데 도움이 되는 도구를 제시할 것입니다.

00:00:49.000 --> 00:00:52.000
시작하자!

00:00:52.000 --> 00:01:00.000
우리 팀이 개발하고 있는 새로운 앱에 대해 말씀드리고 싶습니다: 특별히 도넛을 판매하는 푸드 트럭을 관리하는 데 도움이 될 푸드 트럭.

00:01:00.000 --> 00:01:07.000
제가 만든 도넛 종류 중 몇 가지를 소개해 드리겠습니다.

00:01:07.000 --> 00:01:11.000
허, 내 도넛 목록을 스크롤하는 데 정말 오랜 시간이 걸렸어.

00:01:11.000 --> 00:01:15.000
그 앱은 지연되었고 내 손길에 반응하지 않을 것이다.

00:01:15.000 --> 00:01:20.000
애플에서, 우리는 이 무반응의 시기를 "행"이라고 부른다.

00:01:20.000 --> 00:01:26.000
앱의 메인 스레드는 사용자 상호 작용을 처리하고 보기 콘텐츠를 업데이트할 책임이 있습니다.

00:01:26.000 --> 00:01:39.000
메인 스레드가 작업을 하거나 다른 스레드 또는 시스템 리소스를 기다리느라 바쁠 때 중단이 보고되어 보기 콘텐츠 업데이트가 최소 250밀리초 이상 지연됩니다.

00:01:39.000 --> 00:01:46.000
메인 스레드는 중단이 해결될 때까지 새로운 사용자 상호 작용을 처리할 수 없습니다.

00:01:46.000 --> 00:01:51.000
사용자에게는 앱이 완전히 멈춘 것처럼 보인다.

00:01:51.000 --> 00:01:56.000
반응형 앱을 만드는 것은 긍정적인 사용자 경험을 제공하는 데 매우 중요하다.

00:01:56.000 --> 00:02:08.000
지속적으로 반응하지 않는 앱은 사용자가 강제로 앱을 종료하고, 다른 앱으로 전환하고, 경우에 따라 앱을 삭제하고 부정적인 리뷰를 작성하는 결과를 초래할 수 있습니다.

00:02:08.000 --> 00:02:15.000
이 때문에, 앱에서 중단되는 것을 추적하는 것은 사용자 기반을 확보하고 유지하는 데 매우 중요합니다.

00:02:15.000 --> 00:02:21.000
반응형 경험을 제공하면 사람들이 앱을 즐겁게 사용할 수 있습니다.

00:02:21.000 --> 00:02:32.000
중단과 그 원인, 그리고 코드에서 중단을 제거하는 전략에 대한 자세한 정보는 2021년부터 "앱에서 중단을 이해하고 제거" 토크를 확인하세요.

00:02:32.000 --> 00:02:36.000
앱 개발 과정은 세 단계로 나눌 수 있다.

00:02:36.000 --> 00:02:41.000
먼저, Xcode를 사용하여 책상에서 최신 앱 버전을 개발하세요.

00:02:41.000 --> 00:02:46.000
그런 다음, 앱을 테스트하고 Xcode 없이 베타 환경에서 피드백을 수집하세요.

00:02:46.000 --> 00:02:53.000
예를 들어, 장치에 개발 서명되거나 TestFlight를 통해 배포된 앱 버전이 있을 수 있습니다.

00:02:53.000 --> 00:02:57.000
마지막으로, App Store에서 최신 앱 버전을 출시하세요.

00:02:57.000 --> 00:03:07.000
가장 적극적인 개발자에게도 새로운 중단 문제는 모든 단계에서 발생할 수 있으므로, 각 단계에서 문제를 해결할 수 있는 도구를 아는 것이 중요합니다.

00:03:07.000 --> 00:03:14.000
iOS 16과 Xcode 14 이전에, 우리는 앱에서 중단을 발견하고 진단하는 데 도움이 되는 두 가지 도구를 제공했습니다.

00:03:14.000 --> 00:03:26.000
MetricKit은 베타 또는 공개 릴리스 앱에서 개별 사용자로부터 집계되지 않은 중단률 메트릭 및 진단 보고서를 수집하는 것을 지원하는 프레임워크입니다.

00:03:26.000 --> 00:03:32.000
Xcode Organizer는 공개 릴리스 앱의 사용자로부터 집계된 중단률 메트릭을 제공합니다.

00:03:32.000 --> 00:03:43.000
특히 앱을 개발하거나 어떤 소스 코드로 인해 공개 출시 중단률 메트릭이 상승했는지 이해하려고 할 때 격차가 있습니다.

00:03:43.000 --> 00:03:50.000
iOS 16과 Xcode 14에서, 우리는 몇 가지 새로운 도구를 소개하느라 바빴습니다.

00:03:50.000 --> 00:03:55.000
우리가 그것들을 더 자세히 다루기 전에 그들 각각을 간략하게 소개합시다.

00:03:55.000 --> 00:04:04.000
Xcode의 스레드 성능 검사기는 적극적으로 추적하지 않고 앱을 디버깅하는 동안 중단을 유발하는 스레딩 문제에 대해 경고합니다.

00:04:04.000 --> 00:04:10.000
Xcode의 도구는 이제 앱을 추적하는 동안 감지하고 라벨이 멈니다.

00:04:10.000 --> 00:04:24.000
온디바이스 중단 감지는 Xcode 또는 추적을 사용하지 않고 중단 감지를 제공하며, 개발 서명 또는 TestFlight 앱을 사용하는 동안 실시간 중단 알림을 제공하고 진단을 지원합니다.

00:04:24.000 --> 00:04:33.000
그리고 마지막으로, Xcode의 주최자는 이제 현장 사용자로부터 집계된 중단 진단을 제공하는 중단 보고서를 지원합니다.

00:04:33.000 --> 00:04:43.000
이제 중단이 무엇인지와 발생할 수 있는 다른 단계를 알았으니, Xcode로 앱을 개발하는 동안 중단을 추적하는 방법을 다루겠습니다.

00:04:43.000 --> 00:04:58.000
Xcode 14에서 새로운 스레드 성능 검사기 도구는 앱의 메인 스레드에서 우선 순위 반전과 UI가 아닌 작업을 감지할 때 Xcode Issue Navigator에서 알려줍니다. 둘 다 중단의 일반적인 원인입니다.

00:04:58.000 --> 00:05:06.000
나는 이제 내가 만든 도넛을 스크롤할 때 푸드 트럭 앱에서 이전에 관찰한 중단을 진단하기 위해 Xcode로 돌아왔다.

00:05:06.000 --> 00:05:16.000
앱을 빌드하고 실행하고 사용자 상호 작용을 반복했을 때, 스레드 성능 검사기 도구는 우선 순위 반전으로 인한 중단 위험을 경고했습니다.

00:05:16.000 --> 00:05:22.000
이것은 우선순위가 높은 스레드가 우선순위가 낮은 스레드와 동기화하려고 시도했다는 것을 의미합니다.

00:05:22.000 --> 00:05:30.000
이것은 우리가 알아차리고 있는 중단이 다른 낮은 우선순위 스레드에서 기다리는 메인 스레드로 인해 발생한다는 것을 나타낼 수 있습니다.

00:05:30.000 --> 00:05:40.000
앱의 메인 스레드에서 우선 순위 반전과 비UI 작업을 감지하려면, 적절한 계획의 진단 섹션에서 스레드 성능 검사기 도구를 활성화하십시오.

00:05:40.000 --> 00:05:51.000
스레드 성능 검사기 경고는 내 행의 잠재적인 범인을 발견하는 데 도움이 되었지만, 더 분류하기 위해, 나는 다른 스레드가 중단 기간 동안 무엇을 하고 있었는지 알고 싶을 것이다.

00:05:51.000 --> 00:05:56.000
더 깊이 파고들기 위해 다른 도구를 사용합시다.

00:05:56.000 --> 00:06:04.000
타임 프로파일러 도구는 통화 스택을 제공하여 앱의 각 스레드가 시간이 지남에 따라 무엇을 하고 있었는지 알 수 있는 기능을 제공합니다.

00:06:04.000 --> 00:06:12.000
Xcode 14의 새로운 기능, 시간 프로파일러는 또한 중단을 감지하고 해당 프로세스 트랙에서 직접 레이블을 지정합니다.

00:06:12.000 --> 00:06:28.000
푸드 트럭 앱에서 시간 프로파일러를 사용하여 도넛을 스크롤할 때 중단이 발생하는지 확인하고, 메인 스레드의 우선 순위 반전으로 인해 발생했는지 확인하고, 우선 순위가 낮은 스레드가 무엇을 했는지 파악하여 메인 스레드를 기다리게 할 것입니다.

00:06:28.000 --> 00:06:31.000
저는 Xcode의 제품 &gt; 프로필 메뉴에서 시작합니다.

00:06:31.000 --> 00:06:37.000
이것은 출시를 위한 앱을 만들고 앱을 타겟팅하기 위해 이미 설정된 인스트루먼트를 실행합니다.

00:06:37.000 --> 00:06:49.000
타임 프로파일러 템플릿을 실행하고 푸드 트럭 앱에서 문제가 있는 사용자 상호 작용의 흔적을 기록하기 시작합니다.

00:06:49.000 --> 00:06:53.000
나는 타임라인에서 걸림이 감지되고 라벨이 붙는 것을 본다.

00:06:53.000 --> 00:06:58.000
중단 기간은 또한 문제의 심각성을 평가하는 데 도움이 되도록 명시되어 있다.

00:06:58.000 --> 00:07:11.000
다음으로, 중단 기간 동안 시간 필터를 만드는 중단 간격을 세 번 클릭하고 하단의 세부 보기에서 선택한 시간 간격에서 발생하는 이벤트로만 정보를 필터링할 수 있습니다.

00:07:11.000 --> 00:07:17.000
그것은 또한 다른 트랙에서 이 기간 동안 무슨 일이 일어났는지 더 쉽게 볼 수 있게 해준다.

00:07:17.000 --> 00:07:31.000
내가 가장 먼저 알아차린 것은 메인 스레드가 중단 간격 동안 CPU 사용량이 거의 없다는 것입니다. 즉, 메인 스레드가 너무 많은 작업을 하고 있었기 때문이 아니라 다른 스레드에서 기다리고 있었기 때문에 응답하지 않았다는 것을 의미합니다.

00:07:31.000 --> 00:07:37.000
이것은 이전 스레드 성능 검사기 우선 순위 반전 경고와 일치합니다.

00:07:37.000 --> 00:07:42.000
다음으로, 나는 중단하는 동안 CPU 사용량이 많은 작업자 스레드를 본다.

00:07:42.000 --> 00:07:46.000
이것은 메인 스레드가 기다리고 있는 스레드일 가능성이 높다.

00:07:46.000 --> 00:07:53.000
다음 단계는 행 중에 작업자 스레드가 무엇을 하고 있었는지 조사하고 우선 순위 반전을 해결하는 것입니다.

00:07:53.000 --> 00:08:00.000
Instruments의 중단 감지 및 라벨링은 앱을 프로파일링하는 동안 발생하는 중단을 표면화할 수 있는 좋은 방법입니다.

00:08:00.000 --> 00:08:06.000
Time Profiler 및 CPU Profiler 도구에서 기본적으로 사용할 수 있습니다.

00:08:06.000 --> 00:08:15.000
다른 악기와 함께 표면 행을 위해 추적 문서에 추가할 수 있는 새로운 독립형 행 트레이싱 도구도 있습니다.

00:08:15.000 --> 00:08:24.000
중단 감지 및 라벨링 외에도, 특정 응답하지 않는 기간을 찾기 위해 중단 기간 임계값을 구성할 수 있습니다.

00:08:24.000 --> 00:08:30.000
당신은 이제 Xcode를 사용하여 책상에서 걸려 있는 것을 발견하고 진단하는 방법을 배웠습니다.

00:08:30.000 --> 00:08:39.000
개발 중 훌륭한 테스트 범위에도 불구하고, 베타 및 공개 릴리스 환경은 고려하지 않은 코드 경로에서 중단을 발견할 가능성이 높습니다.

00:08:39.000 --> 00:08:45.000
다음으로, 앱이 베타 환경에 배포되면 중단을 추적하는 방법을 소개하겠습니다.

00:08:45.000 --> 00:08:53.000
저는 이제 App Store Connect를 통해 Food Truck 앱의 빌드를 TestFlight에 배포했으며 개인 장치에 다운로드됩니다.

00:08:53.000 --> 00:09:00.000
나는 항상 강력한 네트워크 연결이 없는 곳을 포함하여 마을 주변에서 도넛을 판매할 때 앱을 테스트할 것이다.

00:09:00.000 --> 00:09:08.000
하지만 내 장치가 Xcode에 연결되어 있지 않으면 중단을 어떻게 발견하고 진단하나요?

00:09:08.000 --> 00:09:21.000
이러한 조건에서 중단을 계속 모니터링하기 위해, iOS 16은 개발자 설정에서 장치 내 중단 감지를 도입하여 실시간 중단 알림과 지원 진단을 제공합니다.

00:09:21.000 --> 00:09:25.000
이것은 개발 서명 또는 TestFlight 앱에서 사용할 수 있습니다.

00:09:25.000 --> 00:09:28.000
주문을 판매하기 시작할 시간이다.

00:09:28.000 --> 00:09:38.000
현재 주문을 열려고 할 때, 이번에는 3초 이상 내 앱이 중단되었다는 장치 중단 감지 알림을 받습니다.

00:09:38.000 --> 00:09:42.000
내가 Xcode로 개발할 때 왜 이 걸 눈치채지 못했는지 궁금해.

00:09:42.000 --> 00:09:49.000
자세한 내용을 보려면 온디바이스 중단 감지 도구에서 제공하는 진단 정보를 사용해야 합니다.

00:09:49.000 --> 00:09:58.000
앱을 개발용으로 설정하면, 설정 &gt; 개발자 &gt; 중단 감지를 열고 스위치를 전환하여 이 기능을 활성화할 수 있습니다.

00:09:58.000 --> 00:10:03.000
행 임계값 설정을 사용하면 감지할 최소 중단 기간을 구성할 수 있습니다.

00:10:03.000 --> 00:10:10.000
가장 짧은 중단 임계값은 250밀리초이며 500밀리초 이상으로 부딪힐 수 있다.

00:10:10.000 --> 00:10:20.000
긴 중단은 더 높은 사용자 영향을 미치는 경향이 있지만, 더 짧은 중단은 특히 연속적으로 발생하는 경우 상황에 따라 경험을 방해할 수 있다.

00:10:20.000 --> 00:10:24.000
앱을 설치한 후, 모니터링되는 앱 목록에 표시됩니다.

00:10:24.000 --> 00:10:30.000
마지막 섹션은 당신이 경고를 받은 중단에 대해 사용 가능한 로그의 연대순 목록을 보여줍니다.

00:10:30.000 --> 00:10:39.000
이러한 진단은 최선의 노력이며 성능 오버헤드를 최소화하기 위해 낮은 우선 순위로 백그라운드에서 처리된다는 점에 유의하십시오.

00:10:39.000 --> 00:10:44.000
이것은 특히 시스템이 바쁜 경우 처리가 더 오래 걸릴 수 있다는 것을 의미합니다.

00:10:44.000 --> 00:10:50.000
다행히도, 새로운 진단을 사용할 수 있게 되면 수동 알림이 표시됩니다.

00:10:50.000 --> 00:10:58.000
마을 주변에서 도넛을 판매하는 동안 앱에서 주문을 열었을 때 감지된 중단에 대한 진단을 살펴봅시다.

00:10:58.000 --> 00:11:03.000
나는 텍스트 기반 행 로그와 감지된 행을 위한 테일스핀을 모두 받았다.

00:11:03.000 --> 00:11:10.000
텍스트 기반 행 로그는 정보가 적지만, 한 눈에 행을 이해할 수 있다.

00:11:10.000 --> 00:11:21.000
더 깊은 조사를 위해, 예를 들어 프로세스 내에서 스레드 상호 작용을 보거나 시스템 리소스의 사용을 식별하기 위해 Instruments에서 테일스핀을 여십시오.

00:11:21.000 --> 00:11:30.000
우선, 공유 버튼을 사용하여 텍스트 기반 중단 로그를 Mac으로 보내서 상징화하여 더 큰 화면에서 볼 수 있습니다.

00:11:30.000 --> 00:11:42.000
내가 전송하고 상징화한 텍스트 기반 행 로그의 발췌문을 보는 것에서, 나는 행하는 동안 네트워크에 대한 동기 요청을 수행하는 것을 알고 있는 메인 스레드의 메소드를 호출하고 있다는 것을 알 수 있다.

00:11:42.000 --> 00:11:51.000
Xcode와 강력한 네트워크 연결로 책상에서 애플리케이션을 테스트할 때, 네트워크에서 데이터를 요청할 때 지연이 없을 수 있습니다.

00:11:51.000 --> 00:12:00.000
그러나, 네트워크 연결이 제한된 곳에서 앱을 테스트할 때, 요청이 더 오래 걸리고 중단됩니다.

00:12:00.000 --> 00:12:10.000
이러한 다양한 실제 조건에서 앱의 베타 버전을 테스트하는 것이 중요하며, 온디바이스 중단 감지를 통해 장치만 사용하여 중단을 모니터링할 수 있습니다.

00:12:10.000 --> 00:12:22.000
이 시점에서, 저는 개발 및 베타 단계에서 사용 가능한 도구를 사용하여 중단을 발견하고 진단했으며, App Store에서 고객이 푸드 트럭 앱을 사용할 수 있도록 할 준비가 되었습니다.

00:12:22.000 --> 00:12:35.000
이제 앱이 고객의 손에, 다양한 OS 버전, 장치 및 이전 테스트에서 복제할 수 없었던 다른 실제 조건에서 중단을 추적하는 방법을 제시하겠습니다.

00:12:35.000 --> 00:12:46.000
Xcode 14의 새로운 기능인 Xcode Organizer는 고객 장치에서 집계된 중단 진단을 제공하기 위해 중단 보고서를 지원합니다.

00:12:46.000 --> 00:12:57.000
수집된 데이터는 앱 분석 공유에 동의한 고객으로부터 온 것이며, 중단으로 이어진 메인 스레드 스택 추적에 대한 정보가 포함되어 있습니다.

00:12:57.000 --> 00:13:03.000
행 보고서는 Xcode Organizer의 왼쪽 탐색에서 사용할 수 있습니다.

00:13:03.000 --> 00:13:09.000
비슷한 스택 추적이 수집되면, 그것들은 단일 서명을 형성하기 위해 함께 그룹화된다.

00:13:09.000 --> 00:13:14.000
목록에서, 서명은 사용자 영향에 따라 정렬되어 표시됩니다.

00:13:14.000 --> 00:13:18.000
각 서명에 대해, 몇 개의 샘플 행 로그를 찾을 수 있습니다.

00:13:18.000 --> 00:13:28.000
각 중단 로그에는 중단, 중단 기간, 로그가 시작된 장치 및 OS 버전을 담당하는 코드를 포함하는 메인 스레드 스택 추적이 포함되어 있습니다.

00:13:28.000 --> 00:13:39.000
각 서명은 또한 서명이 얼마나 많은 행 로그를 담당했는지에 대한 집계 통계와 OS 버전 및 장치별 로그 내역을 제공합니다.

00:13:39.000 --> 00:13:45.000
고객에게 가장 큰 영향을 미치는 걸림을 식별하려면, 최고의 서명에 세심한 주의를 기울이세요.

00:13:45.000 --> 00:13:53.000
이 경우, 최고 서명은 이 릴리스에서 중단 시간의 21%를 책임진다.

00:13:53.000 --> 00:14:02.000
기호 정보와 함께 앱을 App Store에 제출했기 때문에, 중단 보고서는 소스 코드에 있는 것과 같은 이름의 모든 기능을 보여줍니다.

00:14:02.000 --> 00:14:15.000
이 메인 스레드의 호출 스택의 기능을 검사함으로써, 나는 이 중단이 상당한 기간 동안 차단되는 것으로 알려진 메인 스레드의 디스크에서 파일을 동기적으로 읽음으로써 발생했다고 추론할 수 있다.

00:14:15.000 --> 00:14:23.000
고객에게 가장 큰 영향을 미치는 성능 문제를 해결하는 것이 중요하며, 주최자는 이를 식별하는 훌륭한 도구입니다.

00:14:23.000 --> 00:14:33.000
각 앱 출시 후 이 데이터를 확인하여 이전 중단이 해결되었는지 확인하고 나타날 수 있는 새로운 중단을 해결하십시오.

00:14:33.000 --> 00:14:39.000
App Store Connect REST API를 통해 동일한 중단 보고서 데이터를 검색할 수도 있습니다.

00:14:39.000 --> 00:14:45.000
이것은 성능 데이터를 자신의 시스템과 통합하거나 추가 분석을 실행하는 데 도움이 될 수 있습니다.

00:14:45.000 --> 00:14:54.000
전력 및 성능 API 사용에 대해 자세히 알아보려면 "전력 및 성능 API로 트렌드 식별" 비디오를 확인하는 것이 좋습니다.

00:14:54.000 --> 00:15:02.000
Xcode 13.2에 추가되어, 이제 앱에서 전력 및 성능 지표를 모니터링할 때 알림을 받을 수 있습니다.

00:15:02.000 --> 00:15:10.000
Xcode Organizer의 회귀 보기 오른쪽 상단에 있는 알림 버튼을 클릭하여 알림을 활성화하는 것이 좋습니다.

00:15:10.000 --> 00:15:14.000
이것은 앱의 중단률의 급격한 상승을 경고할 것입니다.

00:15:14.000 --> 00:15:21.000
2021년부터 "앱의 전력 및 성능 회귀 진단" 토크에서 성능 회귀에 대해 자세히 알아보세요.

00:15:21.000 --> 00:15:30.000
Xcode Organizer에서의 경험을 개선하기 위해, 기호 정보와 함께 App Store에 앱을 빌드하고 제출하는 것이 좋습니다.

00:15:30.000 --> 00:15:36.000
이 기호 정보는 앱의 기능 이름을 Xcode Organizer의 보고서에 추가하는 데 사용됩니다.

00:15:36.000 --> 00:15:40.000
이것은 스택 추적을 훨씬 이해하기 쉽게 만든다.

00:15:40.000 --> 00:15:47.000
또한 스택 추적의 함수 이름에서 Xcode 소스 편집기의 함수 정의까지 원클릭 탐색을 가능하게 합니다.

00:15:47.000 --> 00:15:55.000
추출된 정보는 기능과 방법, 소스 코드 파일의 이름과 경로, 줄 번호 정보로 제한됩니다.

00:15:55.000 --> 00:16:02.000
제한된 기호 정보는 안전하게 저장되며 절대 공유되지 않는다는 점에 유의하는 것이 중요합니다.

00:16:02.000 --> 00:16:03.000
공상적인

00:16:03.000 --> 00:16:09.000
당신은 이제 개발 과정의 각 단계에서 중단을 발견하고 진단하는 방법을 알고 있습니다.

00:16:09.000 --> 00:16:16.000
앞으로, 발견, 진단 및 수정은 개발 과정의 가능한 가장 빠른 단계에서 중단됩니다.

00:16:16.000 --> 00:16:22.000
악기를 사용하여 새로운 기능을 사전에 프로파일링하는 것을 포함하여 도움을 줄 수 있는 도구를 사용하세요.

00:16:22.000 --> 00:16:28.000
스레드 성능 검사기와 온디바이스 중단 감지를 활성화해야 합니다.

00:16:28.000 --> 00:16:38.000
각 릴리스 후, Xcode Organizer를 사용하여 고객에게 가장 큰 영향을 미치는 중단을 해결하고 이전 앱 버전의 중단이 해결되었는지 확인하십시오.

00:16:38.000 --> 00:16:48.000
회귀 알림이 전력 및 성능 문제의 첫 번째 징후가 될 수 있는 회귀된 성능 지표에 대해 사전에 경고할 수 있습니다.

00:16:48.000 --> 00:16:55.000
그리고 마지막으로, Xcode Organizer의 유용성을 향상시키기 위해 기호 정보와 함께 App Store에 앱을 빌드하고 제출하세요.

00:16:55.000 --> 00:17:02.000
이 단계를 따르면, 당신의 앱은 최상의 사용자 경험을 제공하기 위해 훨씬 더 나은 성능을 가질 것입니다.

00:17:02.000 --> 00:17:05.000
WWDC에서 놀아줘서 고마워!

00:17:05.000 --> 23:59:59.000
♪

