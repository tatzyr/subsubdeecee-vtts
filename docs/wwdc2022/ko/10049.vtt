WEBVTT

00:00:00.000 --> 00:00:05.000
♪ 기악 힙합 음악 ♪

00:00:05.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:16.000
안녕하세요, "WKWebView의 새로운 기능"에 오신 것을 환영합니다. 저는 WebKit 팀의 엔지니어인 Alex Christensen입니다.

00:00:16.000 --> 00:00:23.000
우리는 바빴고, 올해 앱에서 사용할 수 있는 새로운 웹 기술을 많이 추가했습니다.

00:00:23.000 --> 00:00:29.000
하지만 시작하기 전에, 당신이 당신의 애플리케이션에 적합한 기술을 사용하고 있는지 확인해 봅시다.

00:00:29.000 --> 00:00:40.000
앱 내에서 브라우저와 같은 경험을 원하고, 깊은 사용자 지정이 필요하지 않다면, SFSafariViewController를 사용하고 싶을 것입니다.

00:00:40.000 --> 00:00:51.000
앱이 여전히 더 이상 사용되지 않는 UIWebView를 사용하는 경우, 이제 더 빠르고 반응이 빠른 WKWebView로 마이그레이션할 때입니다.

00:00:51.000 --> 00:00:56.000
UIWebView는 향후 릴리스에서 제거될 것이다.

00:00:56.000 --> 00:01:02.000
WKWebView는 웹 콘텐츠와 상호 작용하는 애플리케이션을 작성하는 데 사용하는 API입니다.

00:01:02.000 --> 00:01:09.000
CSS 기반 UI에 사용하거나 자바스크립트로 앱을 작성할 수 있습니다.

00:01:09.000 --> 00:01:14.000
앱 바운드 도메인을 사용하여 자신의 웹 콘텐츠와 상호 작용할 수 있습니다.

00:01:14.000 --> 00:01:17.000
당신은 또한 당신만의 브라우저를 개발하고 있을 수도 있습니다.

00:01:17.000 --> 00:01:25.000
당신의 애플리케이션이 무엇이든, 우리는 당신이 더 풍부한 웹 애플리케이션을 만들 수 있도록 끊임없이 새로운 기능을 추가하고 있습니다.

00:01:25.000 --> 00:01:41.000
올해 WKWebView에서 사용할 수 있는 새로운 기능은 네 가지 범주로 나뉩니다: 웹 콘텐츠와 상호 작용하는 새로운 방법, 콘텐츠 차단기를 위한 새로운 기능, 암호화된 미디어 및 원격 웹 인스펙터 사용.

00:01:41.000 --> 00:01:47.000
먼저, 우리는 웹 콘텐츠와 상호 작용하기 위한 새로운 API를 다룰 것입니다.

00:01:47.000 --> 00:02:01.000
앱이 iOS 16에서 웹 콘텐츠와 상호 작용할 수 있는 세 가지 새로운 방법이 있습니다: 전체 화면 API 사용, 새로운 CSS 뷰포트 단위 사용, 찾기 상호 작용 사용.

00:02:01.000 --> 00:02:03.000
전체 화면으로 시작합시다.

00:02:03.000 --> 00:02:15.000
수년 동안, 자바스크립트는 비디오나 캔버스 게임과 같은 HTML 요소를 브라우저에서 전체 화면으로 만들 수 있었고, 이제 앱에서도 그렇게 할 수 있습니다.

00:02:15.000 --> 00:02:19.000
전화기에서 보이는 간단한 예는 다음과 같습니다.

00:02:19.000 --> 00:02:26.000
자바스크립트는 전체 화면을 요청할 수 있으며, 사용자 또는 자바스크립트는 전체 화면을 종료할 수 있습니다.

00:02:26.000 --> 00:02:39.000
앱에서 해야 할 일은 WKPreferences .isElementFullscreenEnabled를 true로 설정하고 webkitRequestFullscreen과 같은 전체 화면 API를 사용하는 웹 콘텐츠를 로드하는 것입니다.

00:02:39.000 --> 00:02:55.000
그것은 즉시 꽤 잘 작동하지만, 앱에서 전환을 사용자 정의하고 싶다면, 웹 콘텐츠가 전체 화면이 되거나 돌아올 때 앱을 알려주는 WKWebView.fullscreenState의 값을 관찰할 수 있습니다.

00:02:55.000 --> 00:03:01.000
그리고 그것이 앱에서 WebKit의 전체 화면 API를 사용하는 전부입니다.

00:03:01.000 --> 00:03:08.000
우리는 또한 동적 뷰포트 크기에 따라 웹 콘텐츠를 배치할 수 있는 새로운 CSS 장치가 있습니다.

00:03:08.000 --> 00:03:14.000
이 새로운 CSS 유닛은 svh, lvh, dvh 등을 포함한다.

00:03:14.000 --> 00:03:22.000
그들은 웹 개발자들이 가장 작고, 가장 크고, 역동적인 뷰포트 크기를 기반으로 레이아웃을 수정할 수 있게 해준다.

00:03:22.000 --> 00:03:28.000
이것이 당신의 앱에서 어떻게 사용될 수 있는지에 대한 아이디어를 얻기 위해 사파리가 무엇을 하는지 살펴봅시다.

00:03:28.000 --> 00:03:35.000
사파리에서 페이지를 처음 열면, 웹 페이지 호스트와 하단에 몇 개의 버튼이 표시됩니다.

00:03:35.000 --> 00:03:41.000
스크롤할 때, 버튼이 미끄러지면 뷰포트의 크기가 커집니다.

00:03:41.000 --> 00:03:49.000
Svh, lvh 및 dvh는 이러한 다양한 크기의 뷰포트를 측정하는 데 유용한 단위를 제공합니다.

00:03:49.000 --> 00:03:59.000
앱이 WKWebView의 뷰포트를 변경하는 경우, 뷰포트 크기 범위가 무엇인지 WebKit에 미리 알려야 합니다.

00:03:59.000 --> 00:04:10.000
스위프트에서, 하나의 함수 호출은 이 웹 콘텐츠가 앱에서 올바르게 배치될 수 있도록 WebKit에 최대 및 최소 에지 삽입을 알려줍니다.

00:04:10.000 --> 00:04:17.000
우리는 또한 iOS 16의 WKWebView에서 상호 작용 찾기에 대한 지원을 도입하고 있습니다.

00:04:17.000 --> 00:04:24.000
많은 WKWebView 애플리케이션은 많은 텍스트를 로드하며, 사용자는 이 텍스트를 검색하고 싶어 한다.

00:04:24.000 --> 00:04:38.000
WKWebView .findInteractionEnabled를 true로 설정하면, 사용자는 친숙한 UI와 Command-F와 같은 단축키를 사용하여 열린 페이지의 텍스트를 검색할 수 있습니다.

00:04:38.000 --> 00:04:55.000
한 줄의 코드가 기능을 켜는 데 필요한 전부이지만, WKWebView .findInteraction을 통해 UIFindInteraction 객체에 액세스하여 찾기 패널을 제시하고 해제하거나 프로그래밍 방식으로 다음 또는 이전 결과로 이동할 수도 있습니다.

00:04:55.000 --> 00:04:59.000
그것을 시도하고 앱에서 무엇을 할 수 있는지 보세요.

00:04:59.000 --> 00:05:08.000
콘텐츠 차단을 위해, 우리는 사파리에서 콘텐츠 차단기를 구현하는 데 사용되는 API인 WKContentRuleList에 새로운 기능을 추가했습니다.

00:05:08.000 --> 00:05:14.000
여기, 우리는 예시 사이트의 iframe에 위키피디아가 내장되어 있습니다.

00:05:14.000 --> 00:05:24.000
이전에는 요청되는 URL과 상단 프레임 URL에서 정규식을 실행하여 로드를 차단할지 아니면 다른 작업을 수행할지 결정할 수 있었습니다.

00:05:24.000 --> 00:05:33.000
하지만, 때때로, 당신이 정말로 원했던 것은 특정 규칙이 특정 iframe 내부의 로드에만 적용되는 것이었습니다.

00:05:33.000 --> 00:05:39.000
이제 현재 프레임의 URL에서 정규 표현식을 실행할 수 있습니다.

00:05:39.000 --> 00:05:47.000
우리는 위키피디아가 포함된 프레임에서만 이미지를 차단하는 규칙을 작성할 것이다.

00:05:47.000 --> 00:05:52.000
이렇게 하기 위해, 우리는 다음과 같이 JSON에 if-frame-url을 추가합니다.

00:05:52.000 --> 00:05:58.000
그런 다음 이전과 같이 JSON을 컴파일하고 WKWebViewConfiguration에 적용합니다.

00:05:58.000 --> 00:06:06.000
그런 다음 정규 표현식은 요청을 하는 프레임의 URL에서 실행됩니다.

00:06:06.000 --> 00:06:14.000
이 차단 규칙은 이제 if-frame-url 정규 표현식과 일치하는 프레임의 요청에만 적용됩니다.

00:06:14.000 --> 00:06:20.000
여기서 우리는 그것이 위키피디아 iframe 내부의 이미지 로드를 차단했다는 것을 알 수 있다.

00:06:20.000 --> 00:06:33.000
콘텐츠 차단기를 구현하는 것에 대해 진지하게 생각한다면, declarativeNetRequest의 새로운 가능성을 포함하는 사파리 확장에 대한 WWDC 세션을 확인해야 합니다.

00:06:33.000 --> 00:06:38.000
iPadOS 16의 WKWebView의 또 다른 새로운 기능은 암호화된 미디어이다.

00:06:38.000 --> 00:06:49.000
암호화된 미디어 확장 및 미디어 소스 확장 API를 사용하는 콘텐츠가 있다면, 이제 iPadOS의 앱에서 사용할 수 있습니다.

00:06:49.000 --> 00:06:57.000
즉, AppleTV+와 같은 프리미엄 콘텐츠가 있다면, macOS에서와 마찬가지로 iPadOS에서 작동할 것입니다.

00:06:57.000 --> 00:07:11.000
앱에 웹 브라우저 권한이 있는 경우, 원격 웹 인스펙터는 iOS의 Safari에 있는 것처럼 프로덕션 앱과 함께 작동합니다. 코드를 추가하거나 변경할 필요가 없습니다.

00:07:11.000 --> 00:07:17.000
타사 브라우저에서 웹 인스펙터를 활성화하려면, 이 과정은 사파리와 동일합니다.

00:07:17.000 --> 00:07:29.000
먼저 iOS 기기의 Safari 설정에서 웹 인스펙터를 켠 다음, Mac의 Safari의 고급 설정에서 개발 메뉴를 활성화해야 합니다.

00:07:29.000 --> 00:07:36.000
휴대폰을 Mac에 부착하고 macOS의 Safari 개발 메뉴에서 장치를 찾으세요.

00:07:36.000 --> 00:07:40.000
웹 인스펙터에는 웹 콘텐츠를 디버깅하기 위한 많은 도구가 있다.

00:07:40.000 --> 00:07:48.000
DOM을 탐색하고, 자바스크립트 실행을 실행 및 디버깅하고, 페이지 로딩의 타임라인을 볼 수 있습니다.

00:07:48.000 --> 00:07:57.000
웹사이트가 있다면, 이제 원격 웹 인스펙터를 사용하여 iOS의 타사 브라우저에서 직접 검사하고 디버깅할 수 있습니다.

00:07:57.000 --> 00:08:02.000
그것들은 올해 WKWebView에 추가된 주요 새로운 API이다.

00:08:02.000 --> 00:08:06.000
그것들을 시험해 보고 그들이 당신의 앱에서 무엇을 할 수 있는지 보세요.

00:08:06.000 --> 00:08:17.000
애플리케이션에 가장 적합한 API를 사용하는 것을 잊지 말고, WKWebView로 할 수 없는 일이 있다면, 피드백 어시스턴트를 사용하여 기능 요청을 제출하십시오.

00:08:17.000 --> 00:08:23.000
우리는 우리가 받는 기능 요청을 읽고 당신의 입력에 따라 개발의 우선 순위를 정합니다.

00:08:23.000 --> 00:08:34.000
"Safari 웹 확장 프로그램의 새로운 기능"을 확인하는 것을 잊지 말고, 웹 플랫폼에 더 많은 추가 사항을 보려면 "Safari와 WebKit의 새로운 기능"을 확인하는 것을 잊지 마세요.

00:08:34.000 --> 00:08:37.000
시청해 주셔서 감사드리며, 나머지 WWDC를 즐기세요.

00:08:37.000 --> 23:59:59.000
♪ ♪

