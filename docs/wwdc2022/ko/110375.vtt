WEBVTT

00:00:01.000 --> 00:00:09.000
♪ 기악 힙합 음악 ♪

00:00:09.000 --> 00:00:12.000
안녕하세요, 제 이름은 존이고, 저는 Xcode Cloud 팀의 엔지니어입니다.

00:00:12.000 --> 00:00:15.000
그리고 저는 Xcode Cloud 팀의 디자이너인 Jo Lynn입니다.

00:00:15.000 --> 00:00:23.000
오늘 우리는 5명으로 구성된 팀이든 500명으로 구성된 팀이든 팀의 일원으로 Xcode Cloud를 사용할 때 매우 유용한 Xcode Cloud의 몇 가지 기능을 살펴볼 것입니다.

00:00:23.000 --> 00:00:30.000
그리고 저는 당신이 팀의 일원으로 Xcode Cloud를 사용할 때 잘 작동하는 다른 기능과 모범 사례를 공유할 것입니다.

00:00:30.000 --> 00:00:35.000
오늘 세션에서, 우리는 다른 세션에서도 다루는 몇 가지 주제에 대해 자세히 살펴볼 것입니다.

00:00:35.000 --> 00:00:43.000
웹훅 및 기타 고급 워크플로우 주제에 대해 더 알고 싶다면, "고급 Xcode 클라우드 워크플로우 사용자 정의" 세션을 확인하세요.

00:00:43.000 --> 00:01:01.000
이 세션에서는 Xcode Cloud를 매일 사용하는 기존 도구와 기술에 통합하고, 코드 종속성을 쉽게 관리하고, 앱을 지속적으로 구축, 테스트 및 배포할 수 있는 워크플로우를 설정하는 데 도움이 되는 Xcode Cloud 모범 사례를 선보이는 방법을 살펴보겠습니다.

00:01:01.000 --> 00:01:02.000
시작하자.

00:01:02.000 --> 00:01:06.000
Xcode Cloud를 기존 도구에 통합할 때, 몇 가지 옵션이 있습니다.

00:01:06.000 --> 00:01:10.000
웹훅은 이를 지원하는 도구 및 서비스와 쉽게 통합할 수 있게 해준다.

00:01:10.000 --> 00:01:20.000
Xcode Cloud에 웹훅을 보낼 URL을 알려서 App Store Connect에서 웹훅을 연결할 수 있으며, 해당 웹훅이 바로 들어오는 것을 보기 시작해야 합니다.

00:01:20.000 --> 00:01:34.000
우리의 API는 또한 빌드에 대한 많은 가시성을 허용하여 빌드 대시보드를 쉽게 만들거나, 빌드 아티팩트를 추출하거나, 오늘날 우리의 예에서 빌드 정보를 기존 소프트웨어에 통합하는 것과 같은 작업을 수행할 수 있습니다.

00:01:34.000 --> 00:01:46.000
우리는 푸드 트럭 앱을 위한 많은 새로운 기능을 구축해 왔지만, 새로운 버그도 찾고 있으며, 이제 앱에서 함께 작업하는 사람들이 있기 때문에, 누가 무엇을 작업하고 있는지 이해하기가 어렵다는 것을 알게 되었습니다.

00:01:46.000 --> 00:01:52.000
이 문제를 해결하기 위해, 우리는 문제 추적기를 사용하여 앱에서 진행 중인 모든 작업을 추적하기로 결정했습니다.

00:01:52.000 --> 00:01:55.000
문제 추적기를 사용하고 있다면, 종종 이와 같은 견해를 가질 수 있습니다.

00:01:55.000 --> 00:02:06.000
이슈 트래커의 일반적인 워크플로우는 티켓을 만들고, 디자이너와 개발자가 해당 티켓에서 작업하도록 하고, 마지막으로 기능이나 버그가 완료되면 닫는 것입니다.

00:02:06.000 --> 00:02:12.000
문제 추적기에 실제 빌드 정보를 표시하는 것은 모든 점을 함께 연결하는 데 큰 도움이 될 것입니다.

00:02:12.000 --> 00:02:14.000
우리가 지금 그것을 어떻게 할 수 있는지 살펴봅시다.

00:02:14.000 --> 00:02:23.000
여기서 우리의 계획은 문제 추적기를 Xcode Cloud와 통합하는 데 필요한 모든 것을 처리하는 매우 간단한 Swift On Server 기반 서비스를 만드는 것입니다.

00:02:23.000 --> 00:02:29.000
개발 속도를 높이기 위해, 우리는 웹훅 처리 코드를 작성하는 데 집중할 수 있는 Vapor 웹 프레임워크를 사용할 것입니다.

00:02:29.000 --> 00:02:32.000
기본적인 흐름은 이렇게 보일 것이다.

00:02:32.000 --> 00:02:35.000
웹훅은 Xcode Cloud에서 우리 서버로 올 것이다.

00:02:35.000 --> 00:02:43.000
우리는 그 웹훅을 읽고 커밋터가 작성한 커밋 메시지에 트래커의 문제에 매핑되는 특정 문자열이 있는지 확인할 것입니다.

00:02:43.000 --> 00:02:48.000
만약 그렇다면, 우리는 Xcode Cloud API를 눌러 빌드에 대한 더 많은 정보를 수집할 것입니다.

00:02:48.000 --> 00:02:56.000
그런 다음 우리는 우리가 관심 있는 정보가 포함된 이슈 트래커에 게시할 수 있는 댓글을 구성할 것입니다.

00:02:56.000 --> 00:03:01.000
그런 다음 문제 추적기에서 API를 호출하여 문제에 대한 메시지를 저장할 것입니다.

00:03:01.000 --> 00:03:04.000
먼저, Xcode Cloud API 문서를 살펴봅시다.

00:03:04.000 --> 00:03:08.000
모든 Xcode Cloud API는 App Store Connect API 아래에 있습니다.

00:03:08.000 --> 00:03:17.000
App Store Connect API에 대한 인증 토큰을 이미 설정했다면, Xcode Cloud 데이터에 액세스하는 데 필요한 모든 것을 이미 갖추고 있습니다.

00:03:17.000 --> 00:03:22.000
빌드 실행 컬렉션을 열면 빌드와 상호 작용할 수 있는 몇 가지 엔드포인트를 볼 수 있습니다.

00:03:22.000 --> 00:03:29.000
엔드포인트를 호출하여 빌드를 만들거나, 빌드를 취소하거나, 특정 빌드에 대한 자세한 정보를 얻을 수 있습니다.

00:03:29.000 --> 00:03:36.000
예를 들어, 빌드 상태를 표시하기 위해 대시보드를 만들고 싶다면, Ci_Build_Runs 엔드포인트가 우리가 호출해야 할 전부여야 합니다.

00:03:36.000 --> 00:03:40.000
다음으로, 문서에서 유물 컬렉션을 살펴봅시다.

00:03:40.000 --> 00:03:46.000
워크플로우를 위해, 우리는 Xcode Cloud 외부에 빌드 아티팩트를 유지하고자 하며, API는 우리가 그것을 하는 데 필요한 모든 것을 갖추고 있어야 합니다.

00:03:46.000 --> 00:03:52.000
먼저, 빌드 액션 엔드포인트에서 아티팩트 ID를 얻을 수 있으며, 이는 주어진 액션에 대해 생성된 모든 아티팩트를 반환합니다.

00:03:52.000 --> 00:04:00.000
그런 다음 ci_artifact를 호출하면 downloadUrl 속성에서 아티팩트를 다운로드하는 데 필요한 URL을 얻을 수 있습니다.

00:04:00.000 --> 00:04:09.000
App Store Connect 문서에서 openAPI 사양을 다운로드하는 것으로 시작하고, API를 위한 클라이언트를 만드는 데 필요한 것을 살펴봅시다.

00:04:09.000 --> 00:04:12.000
클라이언트 코드를 만들 수 있는 새 디렉토리를 만들어 봅시다.

00:04:12.000 --> 00:04:14.000
나는 이것을 xcodecloud-client라고 부를 거야.

00:04:14.000 --> 00:04:17.000
이제 우리는 발전기를 위한 명령줄 도구를 다운로드해야 합니다.

00:04:17.000 --> 00:04:27.000
openAPI 웹사이트에서 이것을 할 수 있는 많은 방법이 있으며, 세션을 위해 이미 설정했습니다. app_store_connect_API에서 방금 받은 openAPI 사양을 디렉토리에 복사합시다.

00:04:27.000 --> 00:04:36.000
좋아요, 이제 우리는 openAPI 생성기를 호출하고 API를 위한 신속한 클라이언트를 만들라고 말할 수 있습니다.

00:04:36.000 --> 00:04:39.000
발전기가 작동하는 동안, 우리는 그것이 무엇을 하고 있는지에 대해 빠르게 이야기할 수 있다.

00:04:39.000 --> 00:04:45.000
openAPI 사양은 API를 구성하는 모든 경로와 모델에 대한 정보로 구성되어 있습니다.

00:04:45.000 --> 00:04:55.000
생성기는 각 API 경로를 거치고 강력한 형식의 스위프트 객체로 특정 경로와 대화할 수 있는 스위프트 코드를 생성합니다.

00:04:55.000 --> 00:05:01.000
대부분의 경우, 이것은 JSON 인코딩이나 디코딩을 할 필요가 없다는 것을 의미합니다.

00:05:01.000 --> 00:05:06.000
좋아요, 우리 발전기가 끝났으니, 만든 파일을 빠르게 살펴봅시다.

00:05:06.000 --> 00:05:09.000
편리하게, 클라이언트 코드는 스위프트 패키지이다.

00:05:09.000 --> 00:05:13.000
이를 통해 문제 추적기를 업데이트할 웹훅 서버에 쉽게 포함할 수 있습니다.

00:05:13.000 --> 00:05:19.000
이제 우리는 코드를 새로운 git 저장소에 커밋할 수 있으며, 이를 Swift 패키지로 참조할 수 있습니다.

00:05:19.000 --> 00:05:24.000
이제 API와 이야기하는 데 필요한 모든 것을 얻었으니, 웹훅을 설정합시다.

00:05:24.000 --> 00:05:29.000
App Store Connect에서 빌드가 완료될 때마다 서버에 알려주는 웹훅을 등록할 수 있습니다.

00:05:29.000 --> 00:05:44.000
그렇게 하려면, App Store Connect에서 제품으로 이동하고, 설정으로 이동하고, 웹훅으로 이동하세요.

00:05:44.000 --> 00:05:46.000
그리고 우리 서버의 URL을 붙여넣을게.

00:05:46.000 --> 00:05:49.000
이것은 Xcode Cloud가 웹훅을 어디로 보낼지 알려줄 것이다.

00:05:49.000 --> 00:05:55.000
우리의 웹 훅 설정으로, 남은 유일한 일은 그것들을 처리할 코드를 작성하는 것이므로, 그것을 시작합시다.

00:05:55.000 --> 00:06:00.000
먼저 우리는 웹훅에서 관심 있는 필드와 일치하는 구조자를 정의해야 합니다.

00:06:00.000 --> 00:06:09.000
웹훅에는 실행 중인 특정 빌드와 수행되는 각 작업에 대한 정보가 포함되어 있으므로 웹훅 페이로드 구조체에 보관합시다.

00:06:09.000 --> 00:06:14.000
다음으로, 우리는 Vapor가 들어오는 웹훅을 우리의 기능으로 올바르게 라우팅할 수 있도록 코드를 만들어야 합니다.

00:06:14.000 --> 00:06:19.000
우리는 웹훅 경로에 대한 포스트 요청에서 실행되는 함수를 정의할 것입니다.

00:06:19.000 --> 00:06:28.000
이 함수 내에서, 들어오는 JSON 페이로드를 강력한 형식의 스위프트 객체로 변환하기 위해 우리가 해야 할 일은 그것을 디코딩하는 것이므로, 우리는 또한 그 코드도 추가할 것입니다.

00:06:28.000 --> 00:06:37.000
좋아요, 이제 우리가 해야 할 일은 Xcode Cloud API를 호출하여 방금 완료된 빌드에 대한 더 많은 정보를 얻기만 하면 문제 추적기 페이지에 포함시킬 수 있습니다.

00:06:37.000 --> 00:06:43.000
웹훅 페이로드에는 방금 실행된 빌드와 어떤 작업이 성공했거나 실패했는지에 대한 많은 정보가 포함되어 있습니다.

00:06:43.000 --> 00:06:47.000
우리는 아마 거기서 멈출 수 있겠지만, 다음 단계로 넘어가자.

00:06:47.000 --> 00:06:53.000
나는 우리가 각 행동에서 어떤 문제가 발견되었는지에 대한 정보를 포함한다면 놀라울 것이라고 생각한다.

00:06:53.000 --> 00:07:03.000
특정 작업에 대해 관심 있는 문제를 쉽게 반환할 수 있는 CiBuildActionsAPI에 확장 함수를 작성할 수 있습니다.

00:07:03.000 --> 00:07:12.000
이 확장에서, 우리는 빌드 작업 ID를 매개 변수로 취하고 특정 작업에 대해 발견된 모든 문제를 반환하는 함수를 작성할 것입니다.

00:07:12.000 --> 00:07:16.000
나는 이미 내 프로젝트에 이것을 가지고 있지만, 나머지 코드를 작성해 봅시다.

00:07:16.000 --> 00:07:21.000
우리는 빌드가 완료되면 웹훅 핸들러가 실행되기를 원하므로, 그것을 방지합시다.

00:07:21.000 --> 00:07:24.000
다음으로 우리는 코멘트 문자열 작업을 시작할 수 있습니다.

00:07:24.000 --> 00:07:32.000
이 문자열에 빌드 번호, 커밋 해시, 그리고 저자가 있으면 좋을 것 같아요.

00:07:32.000 --> 00:07:37.000
이제 각 작업을 살펴보고 확장 기능을 호출하여 각 작업에 대한 문제를 해결해 봅시다.

00:07:37.000 --> 00:07:47.000
이제 이 모든 것을 이슈 트래커에 전달합시다.

00:07:47.000 --> 00:07:52.000
이 모든 정보로, 나는 이것이 우리가 이슈 추적기를 우리의 빌드와 함께 최신 상태로 유지하는 데 도움이 될 것이라고 생각한다.

00:07:52.000 --> 00:07:54.000
그리고 우리는 끝났어!

00:07:54.000 --> 00:08:03.000
이 시점에서, 우리는 웹훅을 위해 Xcode Cloud에 제공한 URL에서 서버 코드를 호스팅하고 싶고, 이슈 추적기에서 Xcode Cloud 빌드 정보를 보기 시작해야 합니다.

00:08:03.000 --> 00:08:06.000
우리가 지금까지 배운 것에 대해 간략하게 요약해 봅시다.

00:08:06.000 --> 00:08:12.000
Xcode Cloud는 기존 개발 워크플로우와 더 깊이 통합하는 데 사용할 수 있는 훌륭한 API를 갖추고 있습니다.

00:08:12.000 --> 00:08:20.000
웹훅과 함께 해당 API를 사용하여 모든 점을 연결하고 기존 도구와 기술을 Xcode Cloud와 통합할 수 있습니다.

00:08:20.000 --> 00:08:24.000
다음으로, 다른 기능과 모범 사례에 대해 이야기할 조가 있습니다.

00:08:24.000 --> 00:08:25.000
조: 고마워, 존!

00:08:25.000 --> 00:08:34.000
Xcode Cloud는 앱과 프레임워크를 만드는 데 사용하는 Apple 개발자 도구 및 서비스와 통합되도록 설계되었습니다.

00:08:34.000 --> 00:08:41.000
그러나, Xcode 프로젝트는 코드를 컴파일하기 위해 추가 종속성이나 외부 도구가 필요할 수 있습니다.

00:08:41.000 --> 00:08:45.000
Xcode Cloud는 Swift Package Manager와 잘 작동합니다.

00:08:45.000 --> 00:08:53.000
패키지의 저장소에 공개적으로 액세스할 수 있는 경우 추가 구성 없이 Swift 패키지 종속성을 지원합니다.

00:08:53.000 --> 00:09:05.000
Xcode Cloud가 Cocoapods 및 Carthage와 같은 타사 종속성 관리자와 함께 작동하도록 할 수도 있지만, 사용자 지정 빌드 스크립트를 사용하여 약간의 추가 작업을 해야 합니다.

00:09:05.000 --> 00:09:15.000
Xcode Cloud에서 종속성을 사용할 수 있도록 하는 방법에 대한 지침은 Xcode 문서를 참조할 수 있습니다.

00:09:15.000 --> 00:09:26.000
스위프트 패키지를 추가하고 워크플로우를 시작하기 위해 변경 사항을 푸시하면, 보고서 네비게이터의 클라우드 탭으로 이동하여 최신 빌드 상태를 볼 수 있습니다.

00:09:26.000 --> 00:09:31.000
자세한 빌드 로그를 보려면 로그를 선택하세요.

00:09:31.000 --> 00:09:36.000
우리는 Xcode Cloud가 종속성을 자동으로 해결했다는 것을 알게 될 것이다.

00:09:36.000 --> 00:09:50.000
Xcode Cloud가 첫 번째 빌드를 성공적으로 완료한 후, 앱이나 프레임워크가 항상 배송 가능한 상태에 있는지 확인하기 위해 지속적인 통합 및 제공 관행을 개선하기 위한 다음 단계를 계획해야 합니다.

00:09:50.000 --> 00:10:05.000
이 섹션에서는 정적 코드 분석을 위해 SwiftLint와 함께 Xcode Cloud를 사용하는 방법, 워크플로우에서 편집을 제한하는 방법, 여러 시작 조건을 구성하는 가치에 대해 이야기하겠습니다.

00:10:05.000 --> 00:10:14.000
스위프트린트는 스위프트 커뮤니티가 일반적으로 인정하는 스타일 가이드 규칙과 규칙을 시행하는 오픈 소스 린터 도구입니다.

00:10:14.000 --> 00:10:20.000
코드 품질을 개선하고 나쁜 관행을 방지하기 위해 정적 코드 분석을 수행합니다.

00:10:20.000 --> 00:10:27.000
우리는 SwiftLint가 특히 더 큰 팀과 작업할 때 팀의 코드베이스를 일관되게 유지하는 좋은 방법이라는 것을 발견했습니다.

00:10:27.000 --> 00:10:33.000
우리가 지금 보여줄 것은 사용자 지정 빌드 스크립트를 사용하여 SwiftLint를 Xcode Cloud와 통합하는 방법입니다.

00:10:33.000 --> 00:10:41.000
우리는 Xcode Cloud가 팀의 기본 저장소에서 소스 코드를 복제한 후 SwiftLint 도구를 실행하기를 원합니다.

00:10:41.000 --> 00:10:51.000
프로젝트 네비게이터에서, 나는 이미 내 ci_scripts 폴더에 post_clone 스크립트를 내 푸드 트럭 프로젝트에 추가했다.

00:10:51.000 --> 00:10:59.000
Xcode Cloud 빌드 환경에는 Homebrew가 포함되어 있으며, 이것이 우리가 SwiftLint를 설치하기 위해 사용하고 있는 것입니다.

00:10:59.000 --> 00:11:02.000
이 라인에서, 우리는 SwiftLint를 실행하고 있다.

00:11:02.000 --> 00:11:16.000
기억해야 할 한 가지는 스크립트가 ci_scripts 디렉토리 내에서 실행되므로 SwiftLint에게 저장소를 가리키는 ci_workspace 환경 변수 내에서 실행하라고 말해야 한다는 것입니다.

00:11:16.000 --> 00:11:19.000
코드 분석 결과를 확인해 봅시다.

00:11:19.000 --> 00:11:24.000
스위프트린트가 많은 위반을 발견한 것 같은데, 그 중 15개는 심각하다.

00:11:24.000 --> 00:11:42.000
우리가 도구를 통합하는 것은 이번이 처음이기 때문에, 나는 이 워크플로우를 일시적으로 비활성화하여 나머지 팀원들과 먼저 논의하고, 코딩 스타일과 관습에 대한 합의를 도출한 다음, 어떤 문제를 해결하고 싶은지 팀으로 결정할 것입니다.

00:11:42.000 --> 00:11:46.000
워크플로우 관리 메뉴에서 Xcode의 워크플로우를 비활성화할 수 있습니다.

00:11:46.000 --> 00:11:57.000
그렇게 하면 시작 조건이 작동을 멈추고, 수동 빌드만 시작할 수 있습니다.

00:11:57.000 --> 00:12:04.000
이제 정적 코드 분석 워크플로우가 비활성화되었으므로, 우리는 해결하고 싶은 문제를 해결하는 데 집중할 수 있습니다.

00:12:04.000 --> 00:12:07.000
그러면 우리는 돌아와서 이 워크플로우를 활성화할 수 있다.

00:12:07.000 --> 00:12:13.000
우리 팀은 빠르게 성장하고 있으며, 워크플로우 구성에 대해 의식적인 선택을 하고 싶습니다.

00:12:13.000 --> 00:12:21.000
저는 우리 팀의 모든 워크플로우를 유지하고 관리할 책임이 있기 때문에, 팀원들이 의도치 않게 워크플로우를 변경하는 것을 원하지 않습니다.

00:12:21.000 --> 00:12:23.000
그것은 취소하는 데 많은 시간이 걸린다.

00:12:23.000 --> 00:12:29.000
의도하지 않은 변경을 방지하기 위해, 워크플로우를 편집할 수 있는 사람을 제한할 수 있습니다.

00:12:29.000 --> 00:12:35.000
워크플로우를 선택한 다음, 상황에 맞는 메뉴에서 편집 제한을 선택하세요.

00:12:35.000 --> 00:12:47.000
팀의 누구나 이 워크플로우를 사용하거나 실행할 수 있지만, 관리자, 계정 소유자 및 앱 관리자만 제한을 시행할 수 있으므로 그들만 편집할 수 있습니다.

00:12:47.000 --> 00:12:51.000
편집이 제한된 워크플로우에는 '키' 기호가 있을 것이다.

00:12:51.000 --> 00:12:59.000
이것은 그것이 잠겨 있고 당신과 다른 관리 사용자만 편집할 수 있다는 것을 의미합니다.

00:12:59.000 --> 00:13:06.000
대신 '잠금' 기호가 보이면, 관리자가 잠겼고 편집할 수 없다는 것을 의미합니다.

00:13:06.000 --> 00:13:13.000
이 기능을 사용하면 특히 대규모 팀의 일원인 경우 복잡한 워크플로우에 대한 액세스를 쉽게 관리할 수 있습니다.

00:13:13.000 --> 00:13:18.000
우리는 방금 워크플로우를 일시 중지하거나 잠그는 것이 얼마나 쉬운지 배웠습니다.

00:13:18.000 --> 00:13:22.000
이제 워크플로우 관리 및 유지 보수에 대해 이야기해 봅시다.

00:13:22.000 --> 00:13:30.000
풀 리퀘스트를 하거나 브랜치를 병합할 때마다 동일한 테스트와 아카이브 작업을 실행하고 싶습니다.

00:13:30.000 --> 00:13:33.000
그렇게 하는 가장 좋은 방법은 여러 시작 조건을 통과하는 것이다.

00:13:33.000 --> 00:13:41.000
이것은 당신이 만들고 관리해야 할 워크플로우의 수를 줄이기 때문에 워크플로우의 유지 보수를 향상시킵니다.

00:13:41.000 --> 00:14:01.000
설명하기 위해, 이 예에서, 저는 다음과 같은 조건을 감안할 때 빌드를 시작하고 싶습니다: 메인 브랜치 또는 릴리스 브랜치에 변경 사항이 있거나 메인 브랜치에 대한 예약된 빌드가 있는 경우, 동일한 아카이브 및 테스트 작업 세트를 실행하고 내부 테스트를 위해 TestFlight에 배포하십시오.

00:14:01.000 --> 00:14:10.000
3개의 워크플로우를 만든 다음 관리하고 동기화하는 대신, 한 번에 모든 시작 조건을 지정하는 단일 워크플로우를 만들 것입니다.

00:14:10.000 --> 00:14:17.000
이것은 특히 팀이 유지해야 할 워크플로우가 많을 때 관리 용이성을 향상시킨다.

00:14:17.000 --> 00:14:20.000
Xcode에서 시작 조건을 구성하는 것은 쉽다.

00:14:20.000 --> 00:14:28.000
워크플로우 편집기에서 + 버튼 메뉴에서 시작 조건의 유형을 선택하세요.

00:14:28.000 --> 00:14:35.000
App Store Connect의 Xcode Cloud는 완전한 기능을 갖춘 웹 기반 경험을 제공합니다.

00:14:35.000 --> 00:14:46.000
워크플로우를 비활성화하고 잠그는 것부터 여러 시작 조건을 설정하는 것까지 Xcode에서 워크플로우를 구성하기 위해 방금 한 모든 것은 AppStoreConnect에서도 사용할 수 있습니다.

00:14:46.000 --> 00:15:03.000
Xcode Cloud는 Xcode에 내장된 강력하고 지속적인 통합 및 전달 서비스로, 모든 규모의 개발 팀을 돕고 기존 도구 및 프로세스와 쉽게 통합하여 사용자에게 고품질 앱을 제공할 수 있습니다.

00:15:03.000 --> 00:15:09.000
Xcode Cloud 베타 참가자들에게, 우리는 당신의 피드백에 정말 감사드리며 더 많은 것을 듣기를 기대합니다.

00:15:09.000 --> 00:15:13.000
우리는 이러한 기능이 팀의 지속적인 통합 및 전달 관행을 개선하는 데 도움이 되기를 바랍니다.

00:15:13.000 --> 00:15:16.000
시청해 주셔서 감사합니다, 그리고 멋진 WWDC를 보내세요!

00:15:16.000 --> 23:59:59.000
♪ 기악 힙합 음악 ♪

