WEBVTT

00:00:00.000 --> 00:00:09.000
♪ 기악 힙합 음악 ♪

00:00:09.000 --> 00:00:13.000
안녕하세요, 제 이름은 아담이고, 저는 개발자 경험 팀의 매니저입니다.

00:00:13.000 --> 00:00:17.000
그리고 저는 Xcode 클라우드 팀의 엔지니어인 사산입니다.

00:00:17.000 --> 00:00:28.000
이 세션에서는 기존 워크플로우를 검토하고 새로운 Xcode Cloud Usage 대시보드를 강조하여 Xcode Cloud를 최대한 활용하는 방법을 보여드리겠습니다.

00:00:28.000 --> 00:00:44.000
그런 다음, 우리는 기존 프로젝트 사용을 보면서 배운 것을 어떻게 사용할 수 있는지 살펴보고, 더 최적화하고, 프로젝트의 새로운 Watch OS 앱 버전을 개발하기 시작할 것입니다. 시작하기 전에 Xcode Cloud에 대한 간략한 개요를 해 봅시다.

00:00:44.000 --> 00:00:55.000
WWDC 2021에서, 우리는 Xcode에 내장되어 있고 Apple 개발자를 위해 특별히 설계된 지속적인 통합 및 제공 서비스인 Xcode Cloud를 발표했습니다.

00:00:55.000 --> 00:01:06.000
Xcode Cloud를 사용하면 코드를 개발 및 유지하고 테스터와 사용자에게 앱을 제공하는 데 도움이 되는 표준 소프트웨어 개발 관행인 지속적인 통합 및 전달을 채택할 수 있습니다.

00:01:06.000 --> 00:01:23.000
Xcode Cloud는 사용자 개인 정보를 보호하면서 앱을 구축하고, 자동화된 테스트를 병렬로 실행하고, 테스터에게 앱을 제공하고, 사용자 피드백을 보고 관리하는 데 도움이 되는 클라우드 기반 도구를 통합하여 고품질 앱의 개발 및 제공을 가속화합니다.

00:01:23.000 --> 00:01:36.000
처음으로 Xcode Cloud 설정에 대해 더 알고 싶다면, Holly와 Geoff가 첫 번째 워크플로우 설정에 대해 더 자세히 설명하는 WWDC 2021의 "Meet Xcode Cloud"를 확인하세요.

00:01:36.000 --> 00:01:43.000
이제, 기존 워크플로우를 살펴보고 Xcode Cloud에서 푸드 트럭 앱을 구축해 봅시다.

00:01:43.000 --> 00:01:49.000
이것은 App Store Connect의 Xcode Cloud 대시보드이며, Food Truck 프로젝트의 최근 빌드에 대한 개요를 제공합니다.

00:01:49.000 --> 00:01:59.000
우리는 최근에 컴패니언 watchOS 앱을 추가하기로 결정했기 때문에, 푸드 트럭 운영자는 새로운 주문이 들어올 때마다 휴대폰에 손을 뻗을 필요 없이 시계에서 들어오는 주문을 빠르게 받을 수 있습니다.

00:01:59.000 --> 00:02:11.000
Xcode Cloud에서 새로운 watchOS 앱 구축을 시작하기 전에, 현재 워크플로우와 프로젝트가 완전히 최적화되어 가능한 한 빨리 원하는 빌드 및 테스트 결과를 얻고자 합니다.

00:02:11.000 --> 00:02:17.000
우리는 여기서 시간과 자원을 절약할 수 있는 몇 가지 방법이 있을 수 있다고 생각한다.

00:02:17.000 --> 00:02:25.000
이러한 최적화 중 일부를 어디에서 시작할 수 있는지 더 잘 이해하기 위해, 빌드 세부 사항 개요를 자세히 살펴봅시다.

00:02:25.000 --> 00:02:29.000
먼저, 우리는 오전 9시 15분에 건설을 시작했다는 것을 알아차렸다.

00:02:29.000 --> 00:02:33.000
그리고 결과를 완성하고 제시하는 데 14분이 걸렸다.

00:02:33.000 --> 00:02:38.000
우리는 또한 사용과 관련된 시간이 있다는 것을 알 수 있는데, 이 경우에는 32분이다.

00:02:38.000 --> 00:02:43.000
이것은 14분 빌드의 모든 작업이 완료되는 데 걸린 총 시간입니다.

00:02:43.000 --> 00:02:49.000
사용법 옆에, 이 빌드에 대한 작업 분포를 볼 수 있는 옵션이 표시됩니다.

00:02:49.000 --> 00:02:57.000
각 동작은 각각의 사용과 함께 분리되며, 총 32분은 하단에 표시됩니다.

00:02:57.000 --> 00:03:02.000
이 사용 분포는 우리가 최적화를 할 수 있는 장소에 대한 아이디어를 제공한다.

00:03:02.000 --> 00:03:13.000
하지만 우리가 그것에 도달하기 전에, Xcode Cloud가 이러한 작업을 수행하는 방법과 빌드 기간과 사용량의 차이점을 좀 더 자세히 살펴봅시다.

00:03:13.000 --> 00:03:18.000
각 빌드는 워크플로우 설정에 따라 일련의 작업으로 나뉩니다.

00:03:18.000 --> 00:03:26.000
Xcode Cloud가 각 작업을 분석, 아카이브, 빌드 및 테스트와 같은 여러 병렬 작업으로 나누는 방법을 볼 수 있습니다.

00:03:26.000 --> 00:03:38.000
이러한 작업은 병렬로 수행되기 때문에 빌드 기간은 가장 오래 실행되는 작업과 같습니다. 이 경우 워크플로우에서 구성한 테스트는 완료하는 데 14분이 걸렸습니다.

00:03:38.000 --> 00:03:49.000
이제, 사용량을 계산할 때, 이러한 각 동작은 순서대로 관찰될 때 빌드의 총 계산 사용량을 제공합니다. 이 경우 32분입니다.

00:03:49.000 --> 00:03:55.000
그리고 그것이 Xcode Cloud가 주어진 빌드의 빌드 기간과 사용량을 계산하는 방법입니다.

00:03:55.000 --> 00:04:00.000
이제, App Store Connect의 Xcode Cloud Usage 대시보드를 살펴봅시다!

00:04:00.000 --> 00:04:09.000
맨 위에는 사용된 총 비율을 포함하여 Truck to Table 팀의 월간 주기가 시작된 이래로 사용 개요가 있습니다.

00:04:09.000 --> 00:04:17.000
또한, 우리는 우리 팀의 현재 주기에서 사용할 수 있는 나머지 계산과 함께 총 사용량이 분 단위로 표시되는 것을 볼 수 있습니다.

00:04:17.000 --> 00:04:29.000
이 아래에서, 우리는 지난 30일 동안 백분율 증가 또는 감소와 함께 생성된 빌드 및 전체 사용량에 따라 분류된 우리 팀의 사용 동향 전용 영역을 볼 수 있습니다.

00:04:29.000 --> 00:04:38.000
다른 기간 동안의 사용량을 보고 싶다면, 트렌드 섹션의 상단 오른쪽 모서리에 있는 기간을 변경하여 그렇게 할 수 있습니다.

00:04:38.000 --> 00:04:48.000
페이지 조금 더 내려가면, 위에서 선택한 기간 동안 현재 Xcode Cloud를 사용하는 각 제품의 총 사용량을 볼 수 있습니다.

00:04:48.000 --> 00:04:55.000
좋아요, 전체 사용량 내역을 볼 수 있도록 푸드 트럭을 선택합시다.

00:04:55.000 --> 00:05:02.000
여기서 우리는 팀 관점에서 동일한 트렌드를 보는 것으로 시작하지만, 이제 푸드 트럭 프로젝트에만 해당됩니다.

00:05:02.000 --> 00:05:06.000
페이지 조금 더 내려가면, 우리는 각 워크플로우에 대한 사용 통계를 볼 수 있습니다.

00:05:06.000 --> 00:05:14.000
한 눈에, 나는 릴리스 워크플로우에서 이것이 몇 가지 최적화를 시작하기에 훌륭한 장소가 될 것이라는 것을 알 수 있다.

00:05:14.000 --> 00:05:21.000
이제, 나는 그것을 Sasan에게 넘길 것이다. Sasan은 빌드 세부 사항과 컴퓨팅 사용량을 관찰한 후, 우리가 프로젝트를 최적화할 수 있는 몇 가지 방법을 보여줄 것이다.

00:05:21.000 --> 00:05:23.000
어떻게 됐는지 보여줘, 사산.

00:05:23.000 --> 00:05:24.000
사산: 고마워, 아담.

00:05:24.000 --> 00:05:29.000
푸드 트럭 프로젝트를 사용하여 Xcode Cloud를 사용할 때 몇 가지 모범 사례를 다루도록 합시다.

00:05:29.000 --> 00:05:34.000
이를 통해 새로운 watchOS 앱에서 빠르게 반복을 시작할 수 있습니다.

00:05:34.000 --> 00:05:38.000
워크플로우는 시작 조건을 사용하여 빌드를 시작할 시기를 정의합니다.

00:05:38.000 --> 00:05:44.000
워크플로우를 위한 변경 사항에 대해서만 빌드가 시작되도록 시작 조건을 구성하는 것이 중요합니다.

00:05:44.000 --> 00:05:50.000
이 관행을 푸드 트럭 프로젝트의 출시 워크플로우에 어떻게 적용할 수 있는지 봅시다.

00:05:50.000 --> 00:05:59.000
하지만 먼저, 더 자세한 정보는 "Explore Xcode Cloud Workflows"를 확인하는 것이 좋습니다.

00:05:59.000 --> 00:06:03.000
나는 아담이 이전에 Xcode에서 우리에게 보여준 것과 같은 빌드를 가지고 있다.

00:06:03.000 --> 00:06:09.000
시작하려면, 편집기 창에서 릴리스 워크플로우를 열겠습니다.

00:06:09.000 --> 00:06:19.000
내비게이션 패널에서 워크플로우를 마우스 오른쪽 버튼으로 클릭하고 워크플로우 편집을 선택합니다.

00:06:19.000 --> 00:06:26.000
편집기 창에서 시작 조건 섹션을 포함하여 워크플로우를 구성하는 모든 구성 가능한 섹션을 볼 수 있습니다.

00:06:26.000 --> 00:06:30.000
우리는 때때로 예정된 빌드에 새로운 변경 사항이 포함되어 있지 않다는 것을 발견했다.

00:06:30.000 --> 00:06:36.000
그것을 해결하기 위해, 기존의 예정된 시작 조건을 대체하기 위해 지점 변경에 대한 새로운 시작 조건을 추가합시다.

00:06:36.000 --> 00:06:40.000
이것은 우리가 중복 커밋을 만들지 않도록 할 것이다.

00:06:40.000 --> 00:06:48.000
더하기 버튼에서 지점 변경을 선택합니다.

00:06:48.000 --> 00:06:55.000
이제 예정된 시작 조건을 삭제하려면, 그것을 선택하고 휴지통 아이콘을 클릭하겠습니다.

00:06:55.000 --> 00:06:59.000
브랜치 변경 시작 조건은 새 커밋이 원격 브랜치로 푸시될 때마다 실행됩니다.

00:06:59.000 --> 00:07:02.000
기본적으로, 소스 브랜치는 모든 브랜치로 구성되어 있다.

00:07:02.000 --> 00:07:08.000
이것은 저장소의 모든 지점을 변경하면 이 워크플로우가 빌드를 시작할 수 있다는 것을 의미합니다.

00:07:08.000 --> 00:07:17.000
우리의 릴리스 워크플로우가 철저하게 구성되어 있기 때문에, 릴리스 브랜치에 대한 빌드만 시작할 수 있도록 이것을 제한하고 싶습니다.

00:07:17.000 --> 00:07:26.000
사용자 지정 브랜치를 클릭하면 사용자 지정 브랜치를 지정해야 한다는 것을 즉시 알 수 있습니다.

00:07:26.000 --> 00:07:33.000
더하기 버튼을 클릭하고 지점 이름을 입력합니다.

00:07:33.000 --> 00:07:37.000
편집자는 내가 정확한 지점 이름이나 접두사 중에서 선택할 수 있게 해줄 것이다.

00:07:37.000 --> 00:07:46.000
이 경우, 우리는 여러 릴리스 브랜치가 있다는 것을 알고 있으므로 "릴리스"로 시작하는 브랜치를 선택할 것입니다.

00:07:46.000 --> 00:07:52.000
다음으로, 릴리스 브랜치에서 빌드를 시작할 수 있는 파일과 폴더를 지정하고 싶습니다.

00:07:52.000 --> 00:07:56.000
내 목표는 문서 폴더가 수정될 때 빌드를 시작하지 않는 것이다.

00:07:56.000 --> 00:08:01.000
이 폴더에는 개발 문서만 포함되어 있으므로 건너뛰는 것이 안전합니다.

00:08:01.000 --> 00:08:05.000
파일 및 폴더 옵션의 경우, 사용자 지정 조건을 선택합니다.

00:08:05.000 --> 00:08:12.000
빌드 시작 드롭다운을 선택하고 빌드를 시작하지 마세요를 선택합니다.

00:08:12.000 --> 00:08:18.000
새로운 조건을 추가하려면 더하기 버튼을 클릭하세요.

00:08:18.000 --> 00:08:27.000
모든 폴더를 선택하고 선택을 선택하여 제외할 폴더를 지정할 것입니다.

00:08:27.000 --> 00:08:29.000
마지막으로, 이것은 파일 선택기를 열 것이다.

00:08:29.000 --> 00:08:35.000
이제 문서 폴더를 선택하고 열기를 클릭할 수 있습니다.

00:08:35.000 --> 00:08:43.000
마무리하기 위해, 나는 내 변경 사항을 유지하기 위해 저장을 클릭할 것이다.

00:08:43.000 --> 00:08:53.000
이제 릴리스 접두사가 있는 브랜치로만 제한하고 문서 폴더의 변경 사항을 무시하여 시작할 때 시작 조건을 더 선택적으로 구성했습니다.

00:08:53.000 --> 00:08:57.000
워크플로우는 또한 사전 정의된 작업을 사용하여 빌드를 실행하는 방법을 정의합니다.

00:08:57.000 --> 00:09:03.000
작업을 통해 변경 사항을 분석, 보관, 구축 및 테스트할 수 있습니다.

00:09:03.000 --> 00:09:08.000
테스트 작업의 중요한 구성 요소 중 하나는 테스트 목적지를 선택하는 것이다.

00:09:08.000 --> 00:09:15.000
결과가 빠르게 전달되도록 하기 위해, 테스트 제품이 구축되면 각 목적지가 병렬로 실행될 것이다.

00:09:15.000 --> 00:09:20.000
테스트를 위해 간결한 시뮬레이터 목적지 세트를 선택하고 있는지 확인하고 싶습니다.

00:09:20.000 --> 00:09:28.000
빌드 속도를 높이는 것 외에도, 이것은 또한 유사한 장치에서 실패할 수 있는 테스트의 소음을 줄이는 데 도움이 된다.

00:09:28.000 --> 00:09:31.000
Xcode Cloud는 권장 목적지에 대한 별칭을 제공합니다.

00:09:31.000 --> 00:09:38.000
이것들은 화면 크기의 단면을 나타내는 엄선된 시뮬레이터 목록입니다.

00:09:38.000 --> 00:09:46.000
릴리스 워크플로우를 다시 방문하여 iOS 테스트 작업을 위한 합리적인 시뮬레이터 대상 세트를 어떻게 선택할 수 있는지 봅시다.

00:09:46.000 --> 00:09:52.000
테스트 iOS 동작을 선택한 후, 우리는 다양한 테스트 목적지가 있다는 것을 알 수 있습니다.

00:09:52.000 --> 00:09:56.000
테스트 목적지를 제거하려면, 각각을 선택하고 마이너스 버튼을 클릭하세요.

00:09:56.000 --> 00:10:12.000
그런 다음 마지막 항목의 드롭다운 메뉴를 클릭하고 추천 iPhone을 선택하겠습니다.

00:10:12.000 --> 00:10:22.000
다시 한 번, 변경 사항을 유지하기 위해 저장을 클릭하겠습니다.

00:10:22.000 --> 00:10:30.000
나는 이제 우리가 회귀를 도입하면 명확한 신호를 제공하는 데 도움이 될 일련의 테스트 목적지를 가지고 있다.

00:10:30.000 --> 00:10:36.000
앞서 논의했듯이, Xcode Cloud는 저장소에 새로운 변경 사항을 푸시할 때 워크플로우를 실행할 것입니다.

00:10:36.000 --> 00:10:42.000
때때로, 당신은 커밋되는 변화의 유형에 따라 CI에서 건물을 건너뛰고 싶을 수도 있습니다.

00:10:42.000 --> 00:10:44.000
우리는 그것을 할 수 있는 능력을 추가했다.

00:10:44.000 --> 00:10:48.000
Xcode에서 살펴봅시다.

00:10:48.000 --> 00:10:55.000
Xcode Cloud에서 커밋을 건너뛰려면, 커밋 메시지 끝에 "ci skip"를 추가하기만 하면 됩니다.

00:10:55.000 --> 00:11:01.000
이제, 원격으로 푸시할 때, Xcode Cloud는 이 이벤트를 무시하는 것을 알게 될 것입니다.

00:11:01.000 --> 00:11:07.000
여기에 표시된 ci 건너뛰기 태그의 정확한 형식을 사용하고 있는지 확인하세요.

00:11:07.000 --> 00:11:11.000
각 작업에 대해, 사용자 지정 스크립트는 여러 지점에서 실행됩니다.

00:11:11.000 --> 00:11:21.000
사용되지 않는 종속성을 정리하고 신뢰할 수 없는 것으로 알려진 API 요청을 탄력적으로 재시도하면 빌드가 빠르고 일관되게 완료될 수 있습니다.

00:11:21.000 --> 00:11:30.000
사용자 지정 스크립트 및 기타 고급 사용자 지정에 대한 자세한 내용은 "고급 Xcode 클라우드 워크플로우 사용자 지정"을 확인하세요.

00:11:30.000 --> 00:11:35.000
테스트를 위해, 당신은 벗겨지고 신뢰할 수 없는 테스트가 빠르게 수정되도록 해야 합니다.

00:11:35.000 --> 00:11:40.000
플래키 테스트가 실패하면, 본능은 즉시 빌드를 다시 시도하는 것이다.

00:11:40.000 --> 00:11:45.000
테스트 스위트의 신뢰성에 따라, 이것은 많은 재시도 빌드를 초래할 수 있습니다.

00:11:45.000 --> 00:11:50.000
신뢰할 수 있는 시험을 작성하는 데 더 많은 시간을 할애하세요.

00:11:50.000 --> 00:11:58.000
효과적으로 수행하는 방법에 대한 자세한 내용은 다른 세션인 "Xcode Cloud에 대한 빠르고 신뢰할 수 있는 테스트 작성자"를 확인하세요.

00:11:58.000 --> 00:12:03.000
지금까지 우리는 몇 가지 모범 사례를 논의하고 푸드 트럭 프로젝트에 적용했습니다.

00:12:03.000 --> 00:12:10.000
이전 빌드와 업데이트된 워크플로우의 빌드를 비교하여 이러한 변경 사항이 어떤 영향을 미쳤는지 봅시다.

00:12:10.000 --> 00:12:14.000
이것은 모범 사례를 적용한 후 시작된 빌드입니다.

00:12:14.000 --> 00:12:22.000
아담이 우리에게 보여준 이전 빌드와 비교했을 때, 지속 시간은 1분 감소했지만 사용량은 4분 감소했다.

00:12:22.000 --> 00:12:26.000
우리가 전반적으로 좋은 개선을 한 것 같다.

00:12:26.000 --> 00:12:31.000
영향을 더 잘 이해하기 위해 사용 대시보드로 돌아가 봅시다.

00:12:31.000 --> 00:12:42.000
단일 빌드의 영향을 즉시 보는 것이 어려울 수 있기 때문에, 우리는 다른 워크플로우 중 하나인 통합 워크플로우에 모범 사례를 적용했습니다.

00:12:42.000 --> 00:12:45.000
우리는 모범 사례를 적용하여 한동안 빌드를 실행해 왔습니다.

00:12:45.000 --> 00:12:51.000
우리는 사용량이 감소하고 있기 때문에 우리의 변화가 효과적이었다는 것을 알 수 있다.

00:12:51.000 --> 00:13:00.000
이것은 우리가 이제 더 많은 워크플로우를 추가하고 watchOS 앱 개발을 시작하기 위해 더 많은 빌드를 시작할 수 있다는 것을 의미합니다.

00:13:00.000 --> 00:13:09.000
사용 대시보드를 사용하면 기존 프로젝트와 워크플로우에 동일한 모범 사례를 계속 적용하여 Xcode Cloud를 최대한 활용할 수 있습니다.

00:13:09.000 --> 00:13:16.000
대규모 팀을 위한 Xcode Cloud를 관리하는 방법에 대한 자세한 내용은 팀을 위한 Deep Dive into Xcode Cloud를 확인하세요.

00:13:16.000 --> 00:13:18.000
우리는 당신이 우리의 세션을 즐겼기를 바랍니다.

00:13:18.000 --> 00:13:23.000
아담: 봐줘서 고마워.

00:13:23.000 --> 23:59:59.000
♪ 기악 힙합 음악 ♪

