WEBVTT

00:00:00.000 --> 00:00:15.000
수지: 안녕하세요, "Xcode Cloud에 대한 빠르고 신뢰할 수 있는 테스트 작성자"에 오신 것을 환영합니다.

00:00:15.000 --> 00:00:18.000
저는 수지이고, XCTest에서 일하고 있습니다.

00:00:18.000 --> 00:00:24.000
이 세션에서, 저는 Xcode Cloud 테스트를 시작하는 가장 효과적인 방법을 공유할 것입니다.

00:00:24.000 --> 00:00:30.000
우리 팀은 Xcode Cloud를 모든 개발자를 위한 강력한 도구로 설계했습니다.

00:00:30.000 --> 00:00:34.000
사실, 우리는 Xcode 자체를 테스트하기 위해 그것을 사용하며, 나는 그것을 좋아한다.

00:00:34.000 --> 00:00:41.000
Xcode Cloud에서 내가 가장 좋아하는 기능 중 하나는 주어진 테스트 제품군을 실질적으로 확장할 수 있는 능력이다.

00:00:41.000 --> 00:01:10.000
클라우드에서 실행되도록 대부분의 테스트를 구성함으로써, 이제 iPhone, iPad, Apple Watch, Apple TV 및 Mac과 같은 다양한 플랫폼을 활용하고 다양한 테스트 계획 구성을 실행하여 주소 및 스레드 소독제와 같은 런타임 분석 도구를 허용하는 다양한 운영 체제 버전을 실행하는 것을 포함하여 여러 대상에서 테스트를 실행할 수 있는 실용적인 방법을 사용할 수 있습니다.

00:01:10.000 --> 00:01:16.000
일단 우리가 그러한 철저한 테스트 스위트를 통과하면, 우리는 코드가 배송될 준비가 되었다고 확신할 수 있다.

00:01:16.000 --> 00:01:27.000
테스트를 Xcode Cloud로 오프로드하면 개발자의 데스크톱 코드, 컴파일 및 테스트 주기에 영향을 미치지 않고 더 광범위한 테스트를 실행할 수 있습니다.

00:01:27.000 --> 00:01:34.000
이제 확장된 테스트 제품군으로, 신뢰할 수 없는 테스트의 수가 증가할 가능성이 있다.

00:01:34.000 --> 00:01:37.000
이 상황은 관리할 수 없게 될 수 있다.

00:01:37.000 --> 00:01:42.000
따라서, 신뢰성을 보장하는 것은 필수적이다.

00:01:42.000 --> 00:01:53.000
신뢰성 외에도, 이러한 많은 수의 테스트는 지속적인 통합 프로세스에 미치는 영향을 제한하기 위해 효율적으로 실행되어야 한다.

00:01:53.000 --> 00:01:55.000
먼저 신뢰성을 다루자.

00:01:55.000 --> 00:02:00.000
나는 푸드 트럭을 사용하여 Xcode Cloud에 대한 더 신뢰할 수 있는 테스트를 작성하는 방법을 보여줄 것이다.

00:02:00.000 --> 00:02:06.000
푸드 트럭은 탭과 스와이프를 맛있는 도넛으로 변환하는 앱이다.

00:02:06.000 --> 00:02:15.000
Xcode Cloud에서 테스트 스위트를 실행함으로써, 우리는 모든 Apple 플랫폼이 내가 가장 좋아하는 도넛, 스프링클이 있는 초콜릿 주문을 지원하는지 확인할 수 있습니다.

00:02:15.000 --> 00:02:21.000
Xcode 클라우드 워크플로우의 각 개선 사항이 확인되고 시연될 것입니다.

00:02:21.000 --> 00:02:36.000
Xcode Cloud 워크플로우를 시작하는 방법에 대한 자세한 내용은 "Meet Xcode Cloud"를 시청하세요. 더 신뢰할 수 있는 테스트를 작성하는 첫 번째 단계는 각 테스트의 설정과 해체가 철저하도록 하는 것이다.

00:02:36.000 --> 00:02:43.000
Xcode Cloud에서 실행되는 테스트는 개발자의 원래 가정을 충족시키지 못할 수 있는 새로운 시뮬레이터를 사용합니다.

00:02:43.000 --> 00:02:50.000
때때로 테스트 코드에서 볼 수 있는 많은 장치 구성 가정을 식별해 봅시다.

00:02:50.000 --> 00:02:54.000
특정 테스트는 특정 날짜와 시간에 의존할 수 있습니다.

00:02:54.000 --> 00:02:58.000
예를 들어, 서버는 다른 시간대에서 실행되고 있을 수 있다.

00:02:58.000 --> 00:03:02.000
시험은 시간대에 특정한 것을 피해야 한다.

00:03:02.000 --> 00:03:09.000
숫자 서식 및 언어 방향성과 같은 로케일 기반 값은 예상치 못한 결과로 이어질 수 있다.

00:03:09.000 --> 00:03:14.000
시뮬레이터의 로케일을 명시적으로 설정하여 이 문제를 피하세요.

00:03:14.000 --> 00:03:21.000
또 다른 문제가 되는 가정은 인터넷 접속과 같은 특정 장치 권한에 의존하는 것이다.

00:03:21.000 --> 00:03:28.000
단위 테스트에서 장치 권한을 모의하고 UI 테스트에서 경고 핸들러를 사용하는 것이 가장 좋습니다.

00:03:28.000 --> 00:03:32.000
마지막으로, 일부 테스트는 사전 로드된 데이터에 의존한다.

00:03:32.000 --> 00:03:37.000
예를 들어, 테스트는 빈 문서 디렉토리를 가질 것으로 예상할 수 있다.

00:03:37.000 --> 00:03:46.000
시뮬레이터를 명시적으로 구성하는 것이 때때로 가장 쉬운 선택이지만, 테스트의 설정 방법을 향상시키는 것은 일반적으로 더 강력하다.

00:03:46.000 --> 00:03:50.000
예를 들어, 푸드 트럭은 메뉴 파일에 따라 다릅니다.

00:03:50.000 --> 00:03:58.000
설정 기능에서 트럭 객체를 인스턴스화하는 일환으로, 우리는 도넛 메뉴 항목이 포함된 모의 데이터 파일을 생성합니다.

00:03:58.000 --> 00:04:08.000
후속 테스트를 준비하기 위해 분해 방법에 의존하는 대신, 설정 방법에서 모든 상태 준비를 설정하는 것이 좋습니다.

00:04:08.000 --> 00:04:15.000
많은 경우, 읽기 전용 파일은 저장소에 체크인하고 나중에 테스트를 통해 액세스할 수 있습니다.

00:04:15.000 --> 00:04:26.000
그러나 이러한 파일을 구성해야 할 때, Xcode Cloud는 여러 테스트에 액세스할 수 있도록 파일을 한 번 생성할 수 있는 사용자 지정 빌드 스크립트 실행을 지원합니다.

00:04:26.000 --> 00:04:34.000
스크립트를 구성하는 방법에 대한 자세한 내용은 "고급 Xcode Cloud 워크플로우 사용자 지정"을 참조하십시오.

00:04:34.000 --> 00:04:38.000
그것은 적절한 시뮬레이터 설정을 마무리한다.

00:04:38.000 --> 00:04:43.000
이제, 전제 조건을 충족하지 못하는 테스트를 처리하는 방법을 알아봅시다.

00:04:43.000 --> 00:04:52.000
XCTSkip은 XCTest Runner에게 현재 테스트 실행을 중단하고 건너뛴 것으로 표시하도록 지시하는 오류입니다.

00:04:52.000 --> 00:04:58.000
이것은 아직 지원되지 않는 OS 버전이나 장치 유형을 우회하는 데 사용될 수 있습니다.

00:04:58.000 --> 00:05:06.000
스테이징 또는 프로덕션 환경과 관련된 테스트를 건너뛰도록 환경 변수를 설정하여 XCTSkip을 활용할 수도 있습니다.

00:05:06.000 --> 00:05:12.000
환경 변수를 사용하여 테스트 흐름을 제어하는 방법을 살펴봅시다.

00:05:12.000 --> 00:05:22.000
환경 변수는 장치의 XCTest 테스트 러너 앱과 xcodebuild를 실행하는 테스트 호스트 모두에 매개 변수를 제공할 수 있습니다.

00:05:22.000 --> 00:05:29.000
Xcode Cloud에서 TEST_RUNNER_로 시작하는 환경 변수는 XCTest 테스트 러너로 전달됩니다.

00:05:29.000 --> 00:05:35.000
이 접두사는 코드에서 변수를 사용할 수 있게 되기 전에 제거될 것입니다.

00:05:35.000 --> 00:05:48.000
예를 들어, BASE_URL이라는 테스트 코드의 변수는 TEST_RUNNER_BASE_URL이라는 환경 변수로 전달됩니다.

00:05:48.000 --> 00:05:51.000
테스트 계획은 테스트 코드와 같은 형식을 요구한다.

00:05:51.000 --> 00:05:56.000
즉, 우리는 TEST_RUNNER_ 접두사를 추가하지 않습니다.

00:05:56.000 --> 00:06:00.000
환경 변수는 테스트 코드의 어느 곳에서나 참조될 수 있다.

00:06:00.000 --> 00:06:08.000
예를 들어, 우리가 생산 환경에 있을 때 실제로 도넛을 주문하기 위한 테스트를 건너뛰기 위해 XCTSkip과 함께 사용할 수 있습니다.

00:06:08.000 --> 00:06:11.000
물론, 네가 배고프지 않다면.

00:06:11.000 --> 00:06:22.000
테스트 계획과 Xcode 클라우드 사용자 인터페이스와 같은 여러 장소에서 환경 변수를 재정의하면 예상치 못한 결과를 초래할 수 있다는 것을 명심하는 것이 중요합니다.

00:06:22.000 --> 00:06:31.000
이 특별한 경우, Xcode Cloud의 환경 변수는 프로젝트의 테스트 계획에 명시된 것보다 우선합니다.

00:06:31.000 --> 00:06:41.000
이제 테스트 코드 내에서 환경 변수를 참조하고 있으므로 Xcode 클라우드 사용자 인터페이스에서 값을 설정할 수 있습니다.

00:06:41.000 --> 00:06:48.000
이렇게 하려면, 클라우드 보고서로 이동하고, 푸드 트럭을 control-클릭하세요.

00:06:48.000 --> 00:06:57.000
워크플로우 내에서 환경 변수를 편집하려면, 컨텍스트 메뉴에서 "워크플로우 관리"를 선택합니다.

00:06:57.000 --> 00:07:03.000
우리는 특히 통합 워크플로우를 편집하고 있으므로, 두 번 클릭할 것입니다.

00:07:03.000 --> 00:07:19.000
이제 사이드바에서 "환경"을 선택할 수 있으며, 시트 중간에 "환경 변수" 아래에 변수의 이름과 값을 추가할 수 있습니다.

00:07:19.000 --> 00:07:28.000
Xcode 클라우드 워크플로우에서 환경 변수를 설정하는 대신, 대신 테스트 계획 내에서 설정할 수 있습니다.

00:07:28.000 --> 00:07:31.000
이 예시에서, 우리는 아직 시험 계획이 없다.

00:07:31.000 --> 00:07:43.000
테스트 계획을 활성화하려면, 계획 편집기를 열고, 사이드바에서 "테스트"를 선택한 다음, "테스트 계획 사용으로 변환"을 클릭하세요.

00:07:43.000 --> 00:07:47.000
좋아, 이제 우리는 내가 "푸드 트럭"이라고 부르는 시험 계획이 있어.

00:07:47.000 --> 00:07:54.000
환경 변수를 추가하려면, 편집기를 열기 위해 테스트 계획을 클릭해야 합니다.

00:07:54.000 --> 00:07:58.000
상단 근처에서, 우리는 "테스트"와 "구성" 중에서 선택할 수 있습니다.

00:07:58.000 --> 00:08:02.000
"구성"을 선택합시다.

00:08:02.000 --> 00:08:10.000
이제, "논쟁" 섹션에서, 우리는 "환경 변수"를 클릭하여 변수를 추가할 것입니다.

00:08:10.000 --> 00:08:18.000
변수의 이름과 값을 입력할 수 있는 팝업이 나타날 것이다.

00:08:18.000 --> 00:08:21.000
이제 우리의 테스트는 생산 환경에서 건너뛸 것이다.

00:08:21.000 --> 00:08:28.000
시험 건너뛰기에 대해 더 알아보려면, "XCTSkip your tests"를 보세요.

00:08:28.000 --> 00:08:36.000
이제 XCTSkip을 제어하기 위해 환경 변수를 활용하는 것에 대해 다루었으니, 기대 시간 초과에 대해 이야기해 봅시다.

00:08:36.000 --> 00:08:41.000
예상치 못한 시간 초과로 인해 테스트가 실패할 수 있습니다.

00:08:41.000 --> 00:08:48.000
예를 들어, 이것은 느린 서버나 지나치게 불안한 사용자 인터페이스 테스트의 결과일 수 있다.

00:08:48.000 --> 00:08:59.000
두 문제 중 하나를 해결하기 위한 한 가지 방법은 상호 작용을 완료할 충분한 시간을 가질 수 있도록 XCTestExpectation 시간 초과를 늘리는 것입니다.

00:08:59.000 --> 00:09:07.000
이 예에서, 우리는 서버가 더 많은 응답 시간을 가질 수 있도록 OrderDonut 시간 초과를 5초에서 10초로 늘렸습니다.

00:09:07.000 --> 00:09:16.000
일반적으로 앱과 테스트 코드 타임아웃 처리를 비동기/대기로 대체하는 것이 좋습니다.

00:09:16.000 --> 00:09:24.000
이 접근 방식은 대기 통화가 시간 초과 없이 완료될 때까지 테스트를 일시 중지할 수 있게 해준다.

00:09:24.000 --> 00:09:29.000
우리는 시간에 따른 테스트를 해결했으니, 테스트 스위트 내에서 테스트 실패를 처리합시다.

00:09:29.000 --> 00:09:37.000
예를 들어, 우리는 유지 보수를 위해 다운된 준비 환경 내의 서비스에 의존하는 테스트가 있습니다.

00:09:37.000 --> 00:09:42.000
우리는 이 테스트를 비활성화하거나 건너뛰는 대신 XCTExpectFailure를 사용할 수 있습니다.

00:09:42.000 --> 00:09:56.000
XCTExpectFailure를 사용하면 테스트가 정상적으로 실행되고 결과는 다음과 같이 변환됩니다: 테스트의 실패는 이제 예상 실패로 보고되며, 제품군 내에서 실패한 테스트는 통과로 보고됩니다.

00:09:56.000 --> 00:10:02.000
이 접근 방식은 예상되는 실패로 인해 발생하는 소음을 제거합니다.

00:10:02.000 --> 00:10:06.000
예를 들어, testOrderDonut는 실패하고 있다.

00:10:06.000 --> 00:10:15.000
도넛을 주문하는 서비스가 현재 유지 보수 중이라는 것을 알고 있으므로 XCTExpectFailure에 전화를 추가했습니다.

00:10:15.000 --> 00:10:23.000
XCTExpectFailure에 대해 자세히 알아보려면 "XCTest에서 예상되는 실패를 포용하세요"를 시청하세요.

00:10:23.000 --> 00:10:31.000
이제 예상 실패를 선언했으므로, 테스트 반복을 활용하여 코드를 입증하고 신뢰할 수 없는 코드를 진단해 봅시다.

00:10:31.000 --> 00:10:42.000
테스트 반복은 첫 번째 실패, 첫 번째 성공 또는 통계 결과를 기다리는 동일한 테스트를 여러 번 실행하는 도구입니다.

00:10:42.000 --> 00:10:55.000
예를 들어, 우리 책상에서, 우리는 코드를 확인하기 전에 초기 앱과 테스트 코드 신뢰성을 확인하기 위해 반복하여 새로운 코드와 테스트 사례를 여러 번 실행합니다.

00:10:55.000 --> 00:11:00.000
우리는 testOrderDonut의 성공률이 80%에 불과하다는 것을 감지할 수 있었다.

00:11:00.000 --> 00:11:02.000
어-오!

00:11:02.000 --> 00:11:08.000
실패가 존재한다는 것을 알고, 우리는 이제 실패까지 반복 모드를 사용하여 로컬로 버그를 진단합니다.

00:11:08.000 --> 00:11:13.000
이것은 시험 반복을 활용하는 또 다른 방법이다.

00:11:13.000 --> 00:11:24.000
신뢰할 수 없는 외부 서비스에 의존하는 테스트의 경우, 테스트가 성공할 수 있는지 확인하기 위해 실패 반복 재시도 정책을 활용할 수 있습니다.

00:11:24.000 --> 00:11:30.000
테스트를 재시도하는 것은 강력한 접근 방식이지만, 가능하면 외부 서비스를 조롱하는 것이 바람직하다.

00:11:30.000 --> 00:11:36.000
모의 서비스의 장점은 결정적인 신뢰성과 속도를 포함한다.

00:11:36.000 --> 00:11:46.000
의존성을 조롱하는 방법을 배우려면, "테스트 팁과 트릭"을 보세요. 시험 반복을 어떻게 활성화할 수 있는지 살펴봅시다.

00:11:46.000 --> 00:11:56.000
시험 계획에서 시험 반복을 활성화하려면, 시험 계획 편집기로 돌아가서 "구성"을 선택하세요.

00:11:56.000 --> 00:12:04.000
그런 다음, "테스트 실행" 섹션 아래에 테스트 반복 모드를 선택할 수 있는 팝업이 있습니다.

00:12:04.000 --> 00:12:13.000
이 경우, 우리는 주로 신뢰할 수 없는 외부 서비스를 해결하는 데 사용되는 "실패에 대한 재시도"를 선택할 것입니다.

00:12:13.000 --> 00:12:16.000
이제 우리는 테스트 반복 모드를 활성화했습니다.

00:12:16.000 --> 00:12:24.000
테스트 반복 활용에 대한 자세한 내용은 "테스트 반복으로 신뢰할 수 없는 코드 진단"을 참조하십시오.

00:12:24.000 --> 00:12:30.000
그래서 우리는 테스트 신뢰성을 향상시키는 데 사용할 수 있는 다양한 도구를 검토했습니다.

00:12:30.000 --> 00:12:36.000
품질 테스트 작성에 대한 자세한 내용은 "실패할 테스트 작성"을 보세요.

00:12:36.000 --> 00:12:40.000
이제 우리의 테스트가 신뢰할 수 있으니, 빠르게 실행되도록 합시다!

00:12:40.000 --> 00:12:44.000
더 빠른 결과를 얻기 위해 많은 구성 옵션이 존재한다.

00:12:44.000 --> 00:12:51.000
테스트 스위트를 실행하는 데 걸리는 시간을 줄이기 위해 우리가 할 수 있는 일을 합시다.

00:12:51.000 --> 00:12:56.000
우리가 성능을 향상시키기 위해 사용하는 한 가지 기술은 테스트를 여러 테스트 계획으로 나누는 것이다.

00:12:56.000 --> 00:13:00.000
가끔, 두 개면 충분해.

00:13:00.000 --> 00:13:10.000
풀 리퀘스트에 대한 각 오픈 또는 업데이트의 일부로 확인하기 위해 축소된 테스트 세트를 식별할 수 있습니다.

00:13:10.000 --> 00:13:23.000
예를 들어, 우리는 단일 플랫폼에 대한 사용자 인터페이스 테스트의 주요 하위 집합과 함께 단위 테스트를 실행할 수 있습니다.

00:13:23.000 --> 00:13:32.000
지원되는 모든 플랫폼에서 전체 테스트 세트를 실행할 수 있지만, 지금은 백그라운드에서 풀 리퀘스트를 차단하지 않습니다.

00:13:32.000 --> 00:13:40.000
이 접근 방식을 통해 지속적인 통합 프로세스를 적시에 유지하면서 테스트와 새로운 플랫폼을 추가할 수 있습니다.

00:13:40.000 --> 00:13:43.000
선택된 테스트 세트를 실행하기 위한 워크플로우를 설정해 봅시다.

00:13:43.000 --> 00:13:51.000
이 예에서, 우리는 이미 "풀 요청"이라는 새로운 테스트 계획을 만들었고, 테스트 계획 편집기에서 열 수 있습니다.

00:13:51.000 --> 00:13:55.000
상단 근처에서 우리는 "테스트"와 "구성" 중에서 선택할 수 있습니다.

00:13:55.000 --> 00:14:01.000
"테스트"를 선택합시다.

00:14:01.000 --> 00:14:07.000
여기서 우리는 풀 리퀘스트에 대해 검증할 테스트의 하위 집합을 선택했습니다.

00:14:07.000 --> 00:14:21.000
이제 "풀 요청" 테스트 계획을 실행하기 위해 워크플로우를 설정하기 위해, 테스트를 건너뛰기 위한 환경 변수를 추가했을 때와 마찬가지로 Xcode 클라우드 관리 워크플로우로 돌아갈 것입니다.

00:14:21.000 --> 00:14:28.000
새로운 워크플로우를 만들려면, "워크플로 관리" 시트의 왼쪽 하단에 있는 "추가" 버튼을 클릭할 것입니다.

00:14:28.000 --> 00:14:34.000
단순화를 위해, 워크플로우의 이름을 "풀 리퀘스트"라고 지정하고 시작 조건을 선택합시다.

00:14:34.000 --> 00:14:39.000
우리는 이 워크플로우가 실패한 테스트로 체크인을 방지하기를 바랍니다.

00:14:39.000 --> 00:14:48.000
사이드바의 "시작 조건" 오른쪽에 있는 "추가" 버튼을 클릭할 것입니다.

00:14:48.000 --> 00:14:51.000
시작 조건 옵션을 보여주는 메뉴가 나타날 것이다.

00:14:51.000 --> 00:14:56.000
우리의 경우, 우리는 "요청 변경"을 선택할 것입니다.

00:14:56.000 --> 00:15:00.000
이제 풀 리퀘스트 시작 조건이 있습니다.

00:15:00.000 --> 00:15:05.000
테스트를 실행하려면 푸드 트럭 앱을 먼저 구축해야 합니다.

00:15:05.000 --> 00:15:08.000
이것을 하기 위해, 우리는 빌드 액션을 추가해야 한다.

00:15:08.000 --> 00:15:14.000
다시 사이드바의 "시작 조건" 아래에 작업을 추가해 봅시다.

00:15:14.000 --> 00:15:24.000
"작업" 옆에 있는 "추가" 버튼을 클릭한 다음 컨텍스트 메뉴에서 "빌드"를 선택합니다.

00:15:24.000 --> 00:15:29.000
이제 앱을 빌드하는 작업이 있기 때문에, 테스트를 실행하기 위해 다른 작업을 추가할 것입니다.

00:15:29.000 --> 00:15:36.000
다시 우리는 작업 추가를 클릭할 것이지만, 이번에는 "테스트"를 선택할 것이다.

00:15:36.000 --> 00:15:39.000
좋아, 우리는 테스트 액션이 있어.

00:15:39.000 --> 00:15:42.000
실행할 테스트 계획을 선택합시다.

00:15:42.000 --> 00:15:46.000
시트 중간에, 테스트를 위한 드롭다운이 있다.

00:15:46.000 --> 00:15:53.000
여기서 우리는 "풀 요청" 테스트 계획을 선택할 수 있습니다.

00:15:53.000 --> 00:15:54.000
멋져!

00:15:54.000 --> 00:15:58.000
이제 우리의 워크플로우는 풀 리퀘스트에 대한 테스트 계획을 실행하도록 구성되어 있습니다.

00:15:58.000 --> 00:16:05.000
일정에 따라 전체 테스트 스위트를 실행할 두 번째 워크플로우를 만들려면, 비슷한 단계를 따를 수 있습니다.

00:16:05.000 --> 00:16:15.000
그러나 이번에는 시작 조건을 "지점 일정"으로 선택한 다음 전체 제품군 테스트 계획을 실행하도록 워크플로우를 설정하십시오.

00:16:15.000 --> 00:16:22.000
우리는 Xcode Cloud에서 두 워크플로우를 구성하고 관련 테스트 계획을 실행하고 있습니다.

00:16:22.000 --> 00:16:28.000
테스트 계획에 대해 자세히 알아보려면, "Xcode에서 테스트"를 확인하세요.

00:16:28.000 --> 00:16:32.000
이제 우리는 풀 리퀘스트와 예정된 워크플로우 테스트 세트를 만들었습니다.

00:16:32.000 --> 00:16:37.000
우리가 속도를 위해 할 수 있는 또 다른 개선은 테스트를 동시에 실행하는 것이다.

00:16:37.000 --> 00:16:43.000
기본적으로, Xcode Cloud는 플랫폼을 병렬로 테스트합니다.

00:16:43.000 --> 00:16:52.000
또한, Xcode가 대상 및 테스트 객체 클래스 수준에서 병렬로 테스트를 실행할 수 있도록 할 수 있습니다.

00:16:52.000 --> 00:17:04.000
Xcode에서 병렬 테스트 실행을 활성화하려면, 우리는 다시 테스트 계획 편집기로 가서 "테스트"를 선택할 것입니다.

00:17:04.000 --> 00:17:11.000
그런 다음, "푸드 트럭 테스트" 테스트 번들의 오른쪽에 있는 "옵션" 버튼을 클릭하세요.

00:17:11.000 --> 00:17:16.000
옵션 중 하나는 가능하면 "병렬로 실행"할 수 있게 해준다.

00:17:16.000 --> 00:17:23.000
서버에 충분한 코어를 사용할 수 있다면, 여러 대상과 테스트 객체 클래스를 동시에 실행할 수 있습니다.

00:17:23.000 --> 00:17:29.000
따라서 테스트 스위트 처리 시간을 개선하기 위해 이 옵션을 활성화합시다.

00:17:29.000 --> 00:17:33.000
이제 우리의 테스트는 병렬로 실행되도록 구성되어 있다.

00:17:33.000 --> 00:17:39.000
테스트는 병렬 실행을 활용하기 위해 독립적으로 실행되도록 설계되어야 합니다.

00:17:39.000 --> 00:17:47.000
적절한 설정과 분해는 신뢰할 수 있는 테스트 케이스 동작에 필수적이다.

00:17:47.000 --> 00:17:52.000
우리의 테스트가 병렬로 실행됨에 따라, 폭주 테스트에 관심을 돌릴 때입니다.

00:17:52.000 --> 00:17:56.000
폭주 테스트는 적시에 끝나지 않는 테스트이다.

00:17:56.000 --> 00:18:03.000
몇 가지 예로는 무한 루프 또는 실패한 서버를 무기한으로 기다리는 것이 있다.

00:18:03.000 --> 00:18:07.000
우리는 시험 계획에서 실행 시간 수당을 설정하여 이러한 테스트를 중단할 수 있습니다.

00:18:07.000 --> 00:18:15.000
실행 시간 허용량은 시간 초과 오류로 실패하기 전에 테스트가 실행될 수 있는 초 수를 지정합니다.

00:18:15.000 --> 00:18:23.000
이것은 테스트 스위트가 개별 테스트에 갇히는 것을 방지합니다.

00:18:23.000 --> 00:18:26.000
이 경우, 다섯 번째 시험은 어떤 이유로 멈췄다.

00:18:26.000 --> 00:18:33.000
실행 시간 허용량을 설정함으로써, 이 폭주 테스트는 결국 중단되었고 실패로 표시되었다.

00:18:33.000 --> 00:18:38.000
그런 다음 XCTest Test Runner는 제품군에서 다음 테스트를 계속 실행했다.

00:18:38.000 --> 00:18:44.000
테스트 계획에 대한 실행 시간 허용량을 구성해 봅시다.

00:18:44.000 --> 00:18:53.000
실행 시간 허용량을 설정하려면, 우리는 테스트 계획 편집기로 가서 "구성"을 선택할 것입니다.

00:18:53.000 --> 00:19:00.000
"테스트 실행" 카테고리에서, 우리는 "테스트 타임아웃"을 활성화하고 기다릴 초 수를 지정할 수 있습니다.

00:19:00.000 --> 00:19:05.000
기본값은 600초입니다.

00:19:05.000 --> 00:19:12.000
최대 실행 시간 허용량을 구성한 후, 단일 폭주 테스트는 더 이상 테스트 워크플로우를 방해하지 않을 것입니다.

00:19:12.000 --> 00:19:19.000
예를 들어, 야간 테스트 스위트는 이제 제시간에 완료하고 유용한 결과의 전체 세트를 제공할 수 있습니다.

00:19:19.000 --> 00:19:26.000
야호! 우리는 마침내 그 폭주 테스트를 중단했고, 그래서 우리는 다음 개선으로 넘어갈 수 있다.

00:19:26.000 --> 00:19:34.000
기억하시겠지만, 우리는 외부 서비스에 의존하는 테스트의 신뢰성을 높이기 위해 테스트 반복을 활용할 수 있었습니다.

00:19:34.000 --> 00:19:41.000
우리는 실패 시 재시도하도록 테스트 계획을 구성하고 충분한 반복 값을 선택했습니다.

00:19:41.000 --> 00:19:47.000
그러나, 이러한 반복은 테스트 스위트를 실행하는 데 걸리는 시간을 더할 수 있다.

00:19:47.000 --> 00:19:54.000
불필요한 반복은 낭비이며 테스트 반복 값을 더 낮은 숫자로 최적화하고 싶을 수도 있습니다.

00:19:54.000 --> 00:20:01.000
게다가, 풀 리퀘스트 워크플로우에서 문제가 있는 테스트를 완전히 제거하는 것을 고려할 수 있습니다.

00:20:01.000 --> 00:20:05.000
우리가 이것을 어떻게 할 수 있는지 살펴봅시다.

00:20:05.000 --> 00:20:11.000
테스트 계획 편집기에서 테스트 반복 구성으로 돌아가 봅시다.

00:20:11.000 --> 00:20:16.000
이전에 우리는 테스트 반복 모드를 "실패에 대한 재시도"로 설정했습니다.

00:20:16.000 --> 00:20:20.000
이제 우리는 "최대 테스트 반복" 값을 조정할 수 있습니다.

00:20:20.000 --> 00:20:29.000
예를 들어, 우리는 5%의 시간에 실패하는 외부 서버에 의존하는 테스트에 대해 최대 10번의 시도를 허용하도록 선택했을 수 있습니다.

00:20:29.000 --> 00:20:32.000
대부분의 경우, 우리는 첫 번째 시도에서 성공할 것이다.

00:20:32.000 --> 00:20:39.000
그러나, 같은 테스트에 관련 없는 버그가 있다면, 매번 실패하고 10번의 시도를 모두 사용할 것이다.

00:20:39.000 --> 00:20:45.000
아마도 3번의 시도가 충분하고 더 나은 선택일 것이다.

00:20:45.000 --> 00:20:55.000
우리는 성능을 개선하기 위해 재시도를 줄이고 싶어하지만, 이전에는 어떤 경우에는 신뢰성을 개선하기 위해 재시도를 늘리는 것을 권장했습니다.

00:20:55.000 --> 00:21:02.000
따라서, 이 최소한으로 선택된 값은 이러한 테스트를 안정적으로 실행하기에 충분해야 한다.

00:21:02.000 --> 00:21:07.000
그것은 더 빠른 결과를 위해 구성을 마무리한다.

00:21:07.000 --> 00:21:14.000
더 빠른 테스트 결과를 얻는 것에 대해 더 자세히 알아보려면, "테스트 결과를 더 빨리 받으세요"를 확인하세요.

00:21:14.000 --> 00:21:19.000
요약하자면, 우리는 Xcode Cloud에 대한 테스트를 시작하는 가장 효과적인 방법을 다루었습니다.

00:21:19.000 --> 00:21:28.000
우리는 당신이 관련 없는 실패를 피하고 코드 변경을 빠르게 확인할 수 있도록 신뢰할 수 있고 빠르게 테스트를 구성하는 데 중점을 두었습니다.

00:21:28.000 --> 00:21:32.000
고마워, 그리고 남은 WWDC를 즐기길 바라!

00:21:32.000 --> 23:59:59.000
.

