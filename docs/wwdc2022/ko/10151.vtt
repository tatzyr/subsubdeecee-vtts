WEBVTT

00:00:00.000 --> 00:00:09.000
♪ ♪

00:00:09.000 --> 00:00:18.000
안녕하세요 여러분, 제 이름은 에릭이고, 유니티 게임에 접근성을 추가하는 방법을 알려드리게 되어 기쁩니다.

00:00:18.000 --> 00:00:22.000
접근성은 모든 사람이 우리 제품을 사용할 수 있도록 하는 것이다.

00:00:22.000 --> 00:00:31.000
그리고 오늘은 유니티 개발자를 위한 애플 접근성 플러그인으로 접근 가능한 게임을 위한 큰 도약을 의미합니다.

00:00:31.000 --> 00:00:37.000
우리는 당신의 게임에 접근할 수 있도록 하기 위한 세 가지 Apple 기술에 초점을 맞출 것입니다.

00:00:37.000 --> 00:00:43.000
VoiceOver는 시각 장애가 있거나 시력이 낮은 사용자를 돕는 화면 판독기입니다.

00:00:43.000 --> 00:00:51.000
화면의 항목을 읽고 사용자가 컨트롤과 상호 작용할 수 있는 사용자 지정 제스처를 제공합니다.

00:00:51.000 --> 00:00:59.000
모터 제어가 낮은 사람이 장치 상호 작용을 위해 외부 스위치를 사용할 수 있는 스위치 제어.

00:00:59.000 --> 00:01:07.000
그리고 사람들이 읽기 능력에 따라 텍스트 크기를 설정할 수 있는 동적 유형.

00:01:07.000 --> 00:01:17.000
시작하려면, 저장소를 복제하고 저장소의 루트에 있는 빌드 스크립트를 사용하여 모든 Apple의 플러그인을 빌드하십시오.

00:01:17.000 --> 00:01:23.000
이렇게 하면 유니티 프로젝트에 통합할 준비가 된 빌드 폴더가 생성됩니다.

00:01:23.000 --> 00:01:30.000
마지막으로, 유니티 패키지 관리자를 사용하여 자신의 프로젝트에 접근성 플러그인을 추가하세요.

00:01:30.000 --> 00:01:50.000
자세한 내용은 저장소의 문서를 보고 "플러그인 및 플레이: 유니티 게임 프로젝트에 Apple 프레임워크 추가"라는 모든 Apple의 유니티 플러그인에 대한 비디오를 보세요. 이제 플러그인이 생겼으니 세 가지 영역을 안내해 드리겠습니다.

00:01:50.000 --> 00:01:53.000
첫 번째는 접근성 요소이다.

00:01:53.000 --> 00:02:00.000
이를 통해 게임의 VoiceOver 또는 Switch Control과 같은 보조 기술에 대한 지원을 추가할 수 있습니다.

00:02:00.000 --> 00:02:03.000
다음은 동적 유형입니다.

00:02:03.000 --> 00:02:10.000
우리는 사용자 선호도에 따라 텍스트를 확장하는 데 도움이 되는 사용하기 쉬운 유틸리티를 만듭니다.

00:02:10.000 --> 00:02:13.000
그리고 UI 숙박 시설.

00:02:13.000 --> 00:02:18.000
이것들은 다른 사용자 선호도를 읽는 데 도움이 되는 유틸리티입니다.

00:02:18.000 --> 00:02:22.000
접근성 요소부터 시작합시다.

00:02:22.000 --> 00:02:27.000
나는 이 개념을 설명하기 위해 간단한 카드 게임을 만들었다.

00:02:27.000 --> 00:02:33.000
두 장의 무작위 카드를 뽑기 위해 "플립" 버튼을 눌러야 한다는 것을 알 수 있습니다.

00:02:33.000 --> 00:02:44.000
그러나 VoiceOver는 화면의 텍스트를 읽지 않으며 외부 스위치는 현재 화면의 픽셀에 불과하기 때문에 버튼을 탭하지 않습니다.

00:02:44.000 --> 00:02:49.000
우리는 시스템이 상호 작용할 수 있는 것을 이해하도록 도와야 한다.

00:02:49.000 --> 00:02:57.000
접근성 요소는 보조 기술이 상호 작용할 수 있는 것들을 정의한다.

00:02:57.000 --> 00:03:03.000
화면의 텍스트, 카드 및 버튼은 접근성 요소여야 합니다.

00:03:03.000 --> 00:03:07.000
그리고 우리는 라벨로 각 요소를 설명할 수 있다.

00:03:07.000 --> 00:03:14.000
VoiceOver는 사용자가 화면에 무엇이 있는지 이해할 수 있도록 각 라벨을 읽을 것이다.

00:03:14.000 --> 00:03:21.000
그리고 게임이 여러 언어를 지원한다면, 우리는 이 라벨도 현지화해야 한다.

00:03:21.000 --> 00:03:29.000
이제 VoiceOver는 화면에 있는 것을 설명할 수 있지만, 탭할 수 있는 버튼이 있다는 것을 인식하지 못합니다.

00:03:29.000 --> 00:03:36.000
우리는 요소의 유형을 시스템에 알리기 위해 "속물"이라는 또 다른 속성을 사용할 수 있다.

00:03:36.000 --> 00:03:39.000
우리는 여기에 "버튼" 특성을 추가해야 한다.

00:03:39.000 --> 00:03:48.000
이제 VoiceOver는 "플립 버튼"을 읽을 것이며, 외부 스위치가 이 버튼을 제어할 수 있습니다.

00:03:48.000 --> 00:03:53.000
우리는 또한 텍스트 요소에 "정적 텍스트" 특성을 추가할 수 있습니다.

00:03:53.000 --> 00:04:04.000
"정적 텍스트" 특성은 일반적으로 라벨과 텍스트 영역에 주어지므로 VoiceOver가 더 나은 텍스트 상호 작용 경험을 제공할 수 있습니다.

00:04:04.000 --> 00:04:11.000
그리고 당신이 탐구할 수 있는 "버튼"과 "정적 텍스트" 외에도 더 많은 특성이 있습니다.

00:04:11.000 --> 00:04:15.000
그래서 우리는 카드에 어떤 특성을 사용해야 하나요?

00:04:15.000 --> 00:04:21.000
음, 우리는 모든 접근성 요소에 특성을 사용할 필요가 없습니다.

00:04:21.000 --> 00:04:25.000
우리 카드는 어떤 특성도 필요하지 않아.

00:04:25.000 --> 00:04:33.000
그러나, VoiceOver가 알지 못하는 각 카드의 일부가 여전히 있다: 액면가.

00:04:33.000 --> 00:04:39.000
우리가 이것에 사용할 수 있는 "가치"라고 불리는 또 다른 속성이 있다.

00:04:39.000 --> 00:04:51.000
각 카드에 "가치"를 추가하면, VoiceOver는 이제 "클럽의 가치 3이 있는 카드 1, 클럽의 가치 에이스가 있는 카드 2"를 읽을 것입니다.

00:04:51.000 --> 00:04:54.000
그리고 그게 다야.

00:04:54.000 --> 00:05:02.000
이제 기본을 이해했으니, 유니티를 열어 우리 프로젝트에 추가하는 방법을 알아봅시다.

00:05:02.000 --> 00:05:05.000
여기 저는 이 게임을 위한 유니티 에디터에 있습니다.

00:05:05.000 --> 00:05:11.000
저는 이미 이 프로젝트에 Apple 접근성 플러그인을 추가했습니다.

00:05:11.000 --> 00:05:19.000
먼저 우리는 카메라, 직사광선, UI 캔버스와 같은 일반적인 장면 물체를 가지고 있습니다.

00:05:19.000 --> 00:05:24.000
캔버스 아래에는 두 개의 텍스트 요소와 버튼이 있습니다.

00:05:24.000 --> 00:05:31.000
그 후, 우리는 카드를 위한 두 개의 게임 객체를 가지고 있다.

00:05:31.000 --> 00:05:39.000
각각은 두 개의 메쉬 구성 요소로 구성되어 있으며, 각각은 각 면의 카드의 전면 및 후면 텍스처를 렌더링합니다.

00:05:39.000 --> 00:05:44.000
접근성 요소를 정의하는 것부터 시작합시다.

00:05:44.000 --> 00:05:50.000
이렇게 하려면, 이 플러그인의 접근성 노드 구성 요소가 필요합니다.

00:05:50.000 --> 00:05:57.000
계층 구조에서 접근할 수 있는 모든 객체를 선택하세요.

00:05:57.000 --> 00:06:06.000
그리고 접근성 노드 구성 요소를 추가하여 접근성 요소를 만드세요.

00:06:06.000 --> 00:06:09.000
다음으로, 우리는 라벨을 추가합니다.

00:06:09.000 --> 00:06:19.000
카드 개체를 선택하고, 오른쪽의 "접근성 노드" 구성 요소로 이동한 다음, "라벨" 필드를 찾으세요.

00:06:19.000 --> 00:06:26.000
그리고 사용자 지정 라벨을 제공하기 위해 라벨 필드 확인란이 선택되어 있는지 확인하세요.

00:06:26.000 --> 00:06:31.000
그런 다음 "카드 1"을 입력합니다.

00:06:31.000 --> 00:06:40.000
그리고 카드 2도 마찬가지야.

00:06:40.000 --> 00:06:52.000
텍스트와 버튼도 라벨이 필요하지만, 유니티 UI의 표준 컨트롤을 사용하는 경우 명시적인 접근성 라벨을 제공할 필요가 없습니다.

00:06:52.000 --> 00:06:57.000
플러그인은 이미 그것들을 위한 기본 구현을 가지고 있다.

00:06:57.000 --> 00:07:02.000
다음으로, 우리는 버튼에 특성을 추가해야 합니다.

00:07:02.000 --> 00:07:13.000
플립 버튼을 선택하고 "특전"을 "없음"에서 "버튼"으로 변경하세요.

00:07:13.000 --> 00:07:18.000
두 개의 텍스트 요소를 선택하세요...

00:07:18.000 --> 00:07:23.000
그리고 "특성"을 "정적 텍스트"로 바꾸세요.

00:07:23.000 --> 00:07:25.000
좋아.

00:07:25.000 --> 00:07:29.000
마지막으로, 우리는 카드 페이스에 대한 접근성 값을 설정해야 합니다.

00:07:29.000 --> 00:07:37.000
카드가 무작위로 그려지기 때문에, 값을 동적으로 설정하기 위해 스크립트를 추가해야 합니다.

00:07:37.000 --> 00:07:44.000
두 카드를 선택하고 AccessibleCard라는 새 스크립트를 추가하세요.

00:07:44.000 --> 00:07:53.000
먼저, 내 다른 C Sharp 파일 중 하나에서, 나는 이미 Playing Card라고 불리는 모든 카드 얼굴에 대한 열거형을 가지고 있다.

00:07:53.000 --> 00:08:05.000
내 새로운 AccessibleCard 모노 동작 스크립트에는 카드 유형에 대한 변수와 카드가 위 또는 아래를 향하고 있는지에 대한 부울이 있습니다.

00:08:05.000 --> 00:08:10.000
이제 이 카드에 접근성 가치를 추가해 봅시다.

00:08:10.000 --> 00:08:17.000
먼저, 우리는 이 게임오브젝트에 접근성 노드 구성 요소를 첨부합니다.

00:08:17.000 --> 00:08:25.000
다음으로, accessibilityValue 대리자를 카드 액면가를 동적으로 반환하는 함수로 설정하세요.

00:08:25.000 --> 00:08:32.000
이 기능 내에서, 카드가 덮여 있다면, 우리는 접근성 값에 대한 "덮인"을 반환합니다.

00:08:32.000 --> 00:08:41.000
또는 포함되지 않은 경우, 우리는 모든 카드 면을 열거하고 "스페이드의 에이스"와 같은 각각에 대한 설명을 반환할 것입니다.

00:08:41.000 --> 00:08:44.000
그리고 그게 다야.

00:08:44.000 --> 00:08:48.000
이제 우리의 프로젝트를 구축하고 그것이 실제로 실행되는지 봅시다.

00:08:48.000 --> 00:08:55.000
여기 우리 게임이 있어. VoiceOver를 켜자.

00:08:55.000 --> 00:08:57.000
자동 음성: VoiceOver가 켜져 있습니다. 에릭의 게임.

00:08:57.000 --> 00:08:59.000
카드 2, 커버.

00:08:59.000 --> 00:09:03.000
에릭: 다음 요소로 이동하려면 오른쪽으로 스와이프할 수 있습니다.

00:09:03.000 --> 00:09:07.000
자동 음성: 카드 1, 커버.

00:09:07.000 --> 00:09:10.000
에릭의 카드 게임.

00:09:10.000 --> 00:09:14.000
카드를 뒤집어.

00:09:14.000 --> 00:09:16.000
뒤집어. 버튼.

00:09:16.000 --> 00:09:23.000
에릭: 이제 VoiceOver를 통해 다섯 가지 물체에 모두 접근할 수 있다는 것을 알 수 있습니다. 정말 멋집니다.

00:09:23.000 --> 00:09:28.000
VoiceOver가 켜져 있을 때 버튼을 탭하려면, 두 번 탭하세요.

00:09:28.000 --> 00:09:30.000
자동 음성: 뒤집기.

00:09:30.000 --> 00:09:34.000
에릭: 카드를 다시 확인해 봅시다.

00:09:34.000 --> 00:09:38.000
자동 음성: 카드 1, 두 클럽.

00:09:38.000 --> 00:09:40.000
카드 2, 클럽의 에이스.

00:09:40.000 --> 00:09:45.000
에릭: VoiceOver는 이제 업데이트된 카드 면을 올바르게 읽습니다.

00:09:45.000 --> 00:09:46.000
멋지다.

00:09:46.000 --> 00:09:52.000
그래서 우리는 이제 사랑에 빠질 수 있는 수백만 명의 VoiceOver 사용자가 게임에 접근할 수 있도록 했습니다.

00:09:52.000 --> 00:09:57.000
그리고 외부 스위치 컨트롤을 사용하는 사람들도 우리의 게임을 할 수 있다.

00:09:57.000 --> 00:10:00.000
그래서 그것은 접근성 요소였다.

00:10:00.000 --> 00:10:04.000
다음으로, 동적 유형에 대해 이야기해 봅시다.

00:10:04.000 --> 00:10:11.000
텍스트가 너무 작아서 읽을 수 없기 때문에 많은 사람들이 게임을 하기 어려울 수 있다.

00:10:11.000 --> 00:10:20.000
iOS와 tvOS에서는 누구나 설정에서 읽기 능력에 적합한 텍스트 크기를 선택할 수 있습니다.

00:10:20.000 --> 00:10:30.000
접근성 플러그인을 사용하면 이 설정을 읽고 게임의 텍스트가 예상 크기로 표시되는지 확인할 수 있습니다.

00:10:30.000 --> 00:10:36.000
동적 유형을 어떻게 사용할 수 있는지 알아보기 위해 게임 예시를 살펴봅시다.

00:10:36.000 --> 00:10:41.000
DynamicTextSize.cs라는 모노 동작 스크립트를 만드세요.

00:10:41.000 --> 00:10:47.000
시작 함수에서, 먼저 기본 텍스트 크기를 변수에 저장하세요.

00:10:47.000 --> 00:10:57.000
그런 다음 OnEnable 기능 내에서 AccessibilitySettings를 사용하여 변경된 이벤트 설정을 구독하십시오. onPreferredTextSizesChanged.

00:10:57.000 --> 00:11:03.000
이를 통해 사용자가 텍스트 설정을 변경하자마자 UI를 업데이트할 수 있습니다.

00:11:03.000 --> 00:11:11.000
다음으로, settingsChanged 함수 내에서, 먼저 PreferredContentSizeMultiplier를 읽으십시오.

00:11:11.000 --> 00:11:18.000
그런 다음 원본 텍스트 크기를 곱하여 텍스트 요소에 다시 할당하세요.

00:11:18.000 --> 00:11:25.000
유니티 편집기에서 텍스트 요소가 있는 모든 게임 개체를 선택하세요.

00:11:25.000 --> 00:11:32.000
그리고 우리가 방금 만든 DynamicTextSize 구성 요소를 추가하세요.

00:11:32.000 --> 00:11:37.000
이제 우리의 게임은 모두 동적 유형 지원을 위해 준비되었습니다.

00:11:37.000 --> 00:11:45.000
결과를 보기 전에, 먼저 게임에서 동적 유형을 빠르게 테스트할 수 있는 트릭을 보여드리겠습니다.

00:11:45.000 --> 00:11:54.000
설정을 열고, 제어 센터를 찾으세요.

00:11:54.000 --> 00:12:02.000
텍스트 크기가 보일 때까지 아래로 스크롤하고, 제어 센터에 추가하세요.

00:12:02.000 --> 00:12:17.000
이제 제어 센터를 열고 텍스트 크기 옵션을 변경하여 텍스트 크기를 빠르게 조정할 수 있습니다.

00:12:17.000 --> 00:12:24.000
좋아요-텍스트 크기를 변경하면서, 우리 게임은 실시간으로 글꼴 크기를 조정합니다.

00:12:24.000 --> 00:12:30.000
제어 센터에 표시된 텍스트 백분율 값은 정확히 우리가 그 승수에서 읽고 있는 것이다.

00:12:30.000 --> 00:12:35.000
텍스트가 아닌 객체에서도 이 설정을 채택할 수 있습니다.

00:12:35.000 --> 00:12:45.000
예를 들어, 크기가 커지면 카드 페이스 자산을 대형 프린트로 바꿀 수 있습니다.

00:12:45.000 --> 00:12:50.000
먼저 나는 DynamicCardFaces라는 스크립트를 만든다.

00:12:50.000 --> 00:12:55.000
그럼 이전과 마찬가지로, TextSizeChanged 이벤트를 구독하세요.

00:12:55.000 --> 00:13:05.000
승수를 읽는 대신, 나는 제어 센터 슬라이더의 틱에 매핑된 텍스트 크기 범주의 열거형을 읽었다.

00:13:05.000 --> 00:13:11.000
누군가가 더 큰 텍스트 크기를 선택할 때마다 자산을 바꿀 수 있다.

00:13:11.000 --> 00:13:17.000
그리고 나는 단순히 일반 재료와 큰 인쇄물 중 하나를 선택한다.

00:13:17.000 --> 00:13:26.000
이제 우리가 정말 큰 사이즈를 선택한다면...

00:13:26.000 --> 00:13:36.000
사용자는 시력이 낮은 사람들이 훨씬 쉽게 읽을 수 있는 훌륭한 카드 얼굴인 대형 인쇄 버전의 카드를 볼 수 있습니다.

00:13:36.000 --> 00:13:44.000
마지막으로, 이 플러그인으로 액세스할 수 있는 UI 숙박 설정에 대해 이야기하고 싶습니다.

00:13:44.000 --> 00:13:48.000
첫 번째 설정은 투명성을 줄이는 것이다.

00:13:48.000 --> 00:13:56.000
이 설정이 켜져 있으면, 배경은 흐림이나 투명한 효과 대신 불투명하게 변합니다.

00:13:56.000 --> 00:14:02.000
그 효과가 텍스트를 읽기 어렵게 만들 때 가독성을 향상시키는 데 도움이 될 수 있다.

00:14:02.000 --> 00:14:10.000
이 기본 설정을 확인하려면, 접근성 설정에 전화하세요. IsReduceTransparencyEnabled.

00:14:10.000 --> 00:14:13.000
다음으로, 대비 증가 설정.

00:14:13.000 --> 00:14:24.000
스위치가 어떻게 눈에 띄는 데 도움이 되는 더 어두운 회색을 가지고 있는지 주목하여 전체 장치에서 컨트롤을 더 쉽게 인식할 수 있도록 합니다.

00:14:24.000 --> 00:14:37.000
접근성 설정을 사용하여 이 설정을 확인하여 활성화되면 UI의 대비를 높일 수 있습니다. IncreaseContrastEnabled.

00:14:37.000 --> 00:14:40.000
다음으로, 동작 감소 설정.

00:14:40.000 --> 00:14:46.000
어떤 사람들은 이 카드 플립 애니메이션에서처럼 움직임에 민감하다.

00:14:46.000 --> 00:14:51.000
Reduce Motion이 활성화되면 그 애니메이션을 제거해야 합니다.

00:14:51.000 --> 00:14:55.000
이것을 하기 위한 코드를 살펴봅시다.

00:14:55.000 --> 00:15:00.000
카드 컨트롤러 스크립트에는 이 플립 기능이 있습니다.

00:15:00.000 --> 00:15:05.000
먼저 우리는 사용자의 감소 동작 설정이 켜져 있는지 확인합니다.

00:15:05.000 --> 00:15:12.000
켜져 있지 않다면, 우리는 코루틴을 통해 애니메이션을 호출하여 카드를 뒤집어야 한다.

00:15:12.000 --> 00:15:16.000
그렇지 않으면 우리는 그냥 회전을 설정하고, 애니메이션은 없다.

00:15:16.000 --> 00:15:17.000
그리고 그게 다야.

00:15:17.000 --> 00:15:23.000
이제 움직임에 민감한 사람들은 우리의 게임을 즐길 것이다.

00:15:23.000 --> 00:15:33.000
요약하자면, 이 세션의 리소스에 연결된 GitHub 저장소를 복제하여 Apple 접근성 플러그인을 시작하세요.

00:15:33.000 --> 00:15:40.000
사람들이 당신의 게임에서 VoiceOver와 Switch Control을 사용할 수 있도록 접근성 요소를 추가하세요.

00:15:40.000 --> 00:15:44.000
동적 유형으로 텍스트 크기를 조정하세요.

00:15:44.000 --> 00:15:51.000
그리고 모든 사람이 당신의 게임으로 좋은 경험을 할 수 있도록 UI 숙박 시설을 확인하세요.

00:15:51.000 --> 00:15:53.000
나와 함께 해줘서 정말 고마워.

00:15:53.000 --> 23:59:59.000
우리는 당신이 훌륭한 접근성 경험을 가진 모든 사람들이 어떻게 게임을 이용할 수 있는지 보기를 기대합니다.

