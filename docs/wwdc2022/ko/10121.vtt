WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:18.000
안녕하세요, 저는 iOS 시스템 경험 팀의 엔지니어인 테자입니다. 이 세션에서는 포커스 필터를 만나게 될 것입니다.

00:00:18.000 --> 00:00:24.000
포커스는 iOS 15, macOS Monterey 및 watchOS 8에 도입되었다.

00:00:24.000 --> 00:00:31.000
그것은 사람들이 일정 기간 동안 시스템 동작을 구성함으로써 중요한 것에 집중할 수 있는 방법이다.

00:00:31.000 --> 00:00:39.000
포커스는 단순히 제어 센터로 이동하여 시스템 포커스 또는 사용자 지정 포커스 중에서 선택하여 활성화됩니다.

00:00:39.000 --> 00:00:45.000
포커스가 활성화되는 동안, 알림 동작을 사용자 정의할 수 있습니다.

00:00:45.000 --> 00:00:57.000
예를 들어, Work Focus 동안, 누군가는 동료의 알림만 허용하거나 업무와 관련된 몇 가지 앱에 대한 알림만 허용할 수 있습니다.

00:00:57.000 --> 00:01:04.000
각 초점에 대해 설정에서 시스템 동작을 구성하고 예약할 수 있습니다.

00:01:04.000 --> 00:01:10.000
iOS 16과 macOS Ventura는 포커스 필터로 포커스 기능을 향상시킵니다.

00:01:10.000 --> 00:01:15.000
포커스 필터와 그들이 어떻게 행동하는지 소개하는 것으로 시작하겠습니다.

00:01:15.000 --> 00:01:20.000
그런 다음, 앱에서 포커스 필터를 정의하는 방법을 살펴볼게.

00:01:20.000 --> 00:01:25.000
그 후, 나는 포커스 필터에서 행동하는 것이 무엇을 의미하는지 다룰 것이다.

00:01:25.000 --> 00:01:31.000
그리고 마지막으로, 당신의 앱이 어떻게 시스템에 추가 컨텍스트를 제공할 수 있는지 다루겠습니다.

00:01:31.000 --> 00:01:39.000
포커스 필터는 누군가가 현재 활성화된 포커스를 기반으로 앱 동작을 사용자 정의할 수 있는 방법입니다.

00:01:39.000 --> 00:01:44.000
포커스 필터를 채택한 시스템 앱의 몇 가지 훌륭한 예가 있습니다.

00:01:44.000 --> 00:01:53.000
캘린더 앱을 사용하면 포커스가 활성화되었을 때 기본적으로 표시되어야 하는 캘린더를 필터링할 수 있습니다.

00:01:53.000 --> 00:01:55.000
이게 내 달력이 보통 보이는 거야.

00:01:55.000 --> 00:02:01.000
그리고 보시다시피, 저는 업무와 개인 달력 행사가 섞여 있습니다.

00:02:01.000 --> 00:02:08.000
개인 포커스 중에 내 개인 달력만 표시하도록 캘린더에 대한 포커스 필터를 구성할 수 있습니다.

00:02:08.000 --> 00:02:13.000
포커스 필터를 설정한 후, 내 달력은 이렇게 생겼다.

00:02:13.000 --> 00:02:19.000
달력은 이것이 포커스에 의해 필터링되고 필터링을 전환하는 방법을 제공했다고 표시했다.

00:02:19.000 --> 00:02:26.000
이제 나는 개인적인 시간을 즐기려고 할 때 내 업무 일정에 압도당하지 않을 것이다.

00:02:26.000 --> 00:02:32.000
메일 앱의 받은 편지함은 포커스 중에 관련 사서함만 표시하도록 필터링할 수 있습니다.

00:02:32.000 --> 00:02:40.000
메일 알림은 또한 관련 알림만 눈에 띄게 표시하도록 필터링됩니다.

00:02:40.000 --> 00:02:52.000
이것은 내가 Work Focus 동안 업무 관련 메일 알림만 전달하도록 Mail을 설정하고 개인 메일 알림이 나를 방해하는 것을 방지할 수 있다는 것을 의미한다.

00:02:52.000 --> 00:02:56.000
앱이 포커스 필터를 구현하고 싶어하는 데는 여러 가지 이유가 있습니다.

00:02:56.000 --> 00:03:04.000
아마도 당신의 앱은 여러 계정을 관리하며, 포커스를 특정 계정과 연결하는 것이 적절할 것입니다.

00:03:04.000 --> 00:03:09.000
많은 양의 데이터가 있는 앱은 포커스를 위해 콘텐츠를 필터링해야 할 수도 있습니다.

00:03:09.000 --> 00:03:23.000
사용자가 집중하는 동안 산만해지는 것을 방지하도록 돕고 싶다면, 배지 수, 앱 내 알림 및 활성화된 포커스에 두드러진 것에 대한 알림을 줄임으로써 이것을 할 수 있습니다.

00:03:23.000 --> 00:03:30.000
외관과 관련하여, 앱은 활성화된 포커스를 기반으로 테마나 레이아웃을 표면화할 수 있습니다.

00:03:30.000 --> 00:03:41.000
기본적으로, 앱이 상황에 따라 다른 콘텐츠를 표면화할 수 있다면, 포커스 필터를 사용하여 사용자 경험을 향상시킬 수 있습니다.

00:03:41.000 --> 00:03:44.000
포커스 필터가 어떻게 작동하는지 설명하겠습니다.

00:03:44.000 --> 00:03:52.000
앱은 포커스당 사용자가 사용자 정의할 수 있는 것을 정의하며, 이는 AppIntent를 사용하여 수행됩니다.

00:03:52.000 --> 00:03:57.000
그 시스템은 포커스당 구성할 수 있는 것을 노출할 것이다.

00:03:57.000 --> 00:04:05.000
AppIntent에 의해 정의된 속성을 구성하는 UI는 포커스 설정에서 포커스 필터로 노출됩니다.

00:04:05.000 --> 00:04:15.000
사용자는 포커스 설정으로 이동하고 앱의 포커스 필터를 구성하여 특정 방식으로 작동하도록 앱을 구성할 수 있습니다.

00:04:15.000 --> 00:04:21.000
이제, 포커스 필터를 코드베이스에 통합하는 방법을 살펴볼 것입니다.

00:04:21.000 --> 00:04:24.000
포커스 필터를 정의하는 몇 가지 부분이 있습니다.

00:04:24.000 --> 00:04:28.000
첫 번째는 SetFocusFilterIntent를 구현하는 것이다.

00:04:28.000 --> 00:04:35.000
이것은 당신의 앱이 포커스당 사용자 지정 설정에 관심이 있다는 것을 시스템에 나타냅니다.

00:04:35.000 --> 00:04:38.000
두 번째 단계는 앱의 매개 변수를 정의하는 것입니다.

00:04:38.000 --> 00:04:44.000
이것들은 사용자가 앱 내에서 구성할 수 있는 것을 나타낼 것이다.

00:04:44.000 --> 00:04:52.000
마지막 단계는 디스플레이 표현을 설정하여 포커스 필터가 올바른 콘텐츠로 시스템 설정에 나타나도록 하는 것입니다.

00:04:52.000 --> 00:04:57.000
이렇게 하면, 사용자는 무엇이 구성되어 있는지 알 수 있다.

00:04:57.000 --> 00:04:59.000
내가 몇 가지 코드에 뛰어들게.

00:04:59.000 --> 00:05:07.000
가장 먼저 해야 할 일은 AppIntents를 가져오고 SetFocusFilterIntent를 구현하는 구조를 정의하는 것입니다.

00:05:07.000 --> 00:05:10.000
이것은 당신의 포커스 필터입니다.

00:05:10.000 --> 00:05:17.000
제목과 설명을 설정하면 사용자가 당신의 초점이 무엇인지 발견하는 데 도움이 될 것입니다.

00:05:17.000 --> 00:05:22.000
포커스 필터는 설정의 그리드 보기에 나타납니다.

00:05:22.000 --> 00:05:28.000
포커스 필터가 구성되기 전에, 이 모양으로 사용자에게 표면화될 것입니다.

00:05:28.000 --> 00:05:40.000
여기 아이콘은 앱의 아이콘이고, 기본 텍스트는 앱의 이름이며, 보조 텍스트는 포커스 필터에서 설정한 제목 변수와 일치합니다.

00:05:40.000 --> 00:05:46.000
사용자가 필터를 구성하기 위해 탭하면, 동일한 콘텐츠가 표시됩니다.

00:05:46.000 --> 00:05:54.000
이번에, 시스템은 추가 컨텍스트를 위해 당신이 제공한 설명 문자열도 포함합니다.

00:05:54.000 --> 00:06:02.000
제목과 설명 문자열은 모두 정적이며, 앱이 설치될 때 시스템에서 읽습니다.

00:06:02.000 --> 00:06:13.000
포커스 필터를 정의할 때, 매개 변수로 장식된 일련의 속성을 제공하여 사람이 사용자 정의할 수 있는 것을 지정해야 합니다.

00:06:13.000 --> 00:06:17.000
매개 변수를 지정할 때, 이름과 데이터 유형을 지정해야 합니다.

00:06:17.000 --> 00:06:23.000
매개 변수는 Bool, string, float 등과 같은 표준 데이터 유형일 수 있습니다.

00:06:23.000 --> 00:06:32.000
구성하고 싶은 사용자 지정 데이터 유형이 있다면, 매개 변수로 장식할 수 있는 엔티티로 만들 수 있습니다.

00:06:32.000 --> 00:06:38.000
엔티티와 앱 인텐트에 대해 자세히 알아보려면, "Dive into App Intents" 세션을 시청하세요.

00:06:38.000 --> 00:06:44.000
포커스 필터를 정의할 때, 각 매개 변수의 데이터 유형과 이름만 지정합니다.

00:06:44.000 --> 00:06:52.000
각 포커스 동안 적용될 매개 변수의 값을 구성하는 것은 사용자에게 달려 있습니다.

00:06:52.000 --> 00:06:57.000
매개 변수는 선택 사항으로 표시될 수 있으며, 이는 구성할 필요가 없다는 것을 의미합니다.

00:06:57.000 --> 00:07:03.000
선택 사항이 아닌 매개 변수는 기본값을 제공해야 합니다.

00:07:03.000 --> 00:07:15.000
코드에서 포커스 필터에서 원하는 유형의 변수를 정의하고 매개 변수로 장식하여 매개 변수 또는 선택적 매개 변수를 지정합니다.

00:07:15.000 --> 00:07:23.000
여기서, 저는 포커스 필터가 항상 다크 모드를 사용해야 하는지 여부를 나타내는 필수 Bool 매개 변수를 만들었습니다.

00:07:23.000 --> 00:07:25.000
기본값을 false로 설정했습니다.

00:07:25.000 --> 00:07:33.000
나는 또한 이 포커스 동안 사용자의 상태 메시지를 나타내는 선택적 문자열 매개 변수를 만들었습니다.

00:07:33.000 --> 00:07:44.000
마지막으로, 저는 제 앱에 의해 정의된 엔티티인 선택적 계정 매개 변수를 포함했습니다. 여기에는 특정 계정에 대한 정보가 포함되어 있습니다.

00:07:44.000 --> 00:07:54.000
이 세 가지 매개 변수 모두에 설정된 제목은 사용자에게 매개 변수를 설명하기 위해 설정에 표시됩니다.

00:07:54.000 --> 00:08:02.000
포커스 설정에서, 사용자가 앱의 포커스 필터를 구성하면, 내가 이전에 보여준 것과 비슷한 그리드로 표시됩니다.

00:08:02.000 --> 00:08:11.000
하지만 이번에는 필터가 이미 구성되었기 때문에, 콘텐츠는 구성된 것을 반영하기 위해 동적이다.

00:08:11.000 --> 00:08:14.000
여기 아이콘은 여전히 앱의 아이콘입니다.

00:08:14.000 --> 00:08:24.000
기본 텍스트와 보조 텍스트는 FocusFilterIntent의 디스플레이 표현 속성을 사용하여 사용자 정의할 수 있습니다.

00:08:24.000 --> 00:08:34.000
기본 텍스트는 계정 선택, 상태 설정 등과 같이 구성된 매개 변수를 나타내야 합니다.

00:08:34.000 --> 00:08:43.000
보조 텍스트는 작업 계정이나 작업과 같은 매개 변수가 구성된 것을 나타내야 합니다.

00:08:43.000 --> 00:08:49.000
내 코드에서, 나는 디스플레이 표현이 동적으로 생성되도록 설정했다.

00:08:49.000 --> 00:08:59.000
계정과 상태는 선택적 매개 변수이기 때문에, 실제로 설정된 경우에만 동적 기본 및 보조 텍스트에 포함됩니다.

00:08:59.000 --> 00:09:09.000
alwaysUseDarkMode는 필수 매개 변수이기 때문에, 항상 기본 및 보조 텍스트에 포함되어 있습니다.

00:09:09.000 --> 00:09:17.000
좋아요, 이제 포커스 필터를 정의했으므로 사용자는 포커스 설정으로 이동하여 특정 포커스에 대한 특정 값을 사용자 정의할 수 있습니다.

00:09:17.000 --> 00:09:20.000
하지만 당신의 앱은 누군가가 무엇을 사용자 정의했는지 어떻게 알 수 있나요?

00:09:20.000 --> 00:09:23.000
그리고 당신의 앱은 어떻게 그에 따라 업데이트할 수 있나요?

00:09:23.000 --> 00:09:26.000
그것은 시스템의 변화에 따라 행동해야 한다.

00:09:26.000 --> 00:09:36.000
포커스 변경이 발생하고 시스템이 앱이 이 변경 사항에 대해 아는 것이 중요하다고 판단하면, 두 가지 방법 중 하나로 이 정보를 제공할 것입니다.

00:09:36.000 --> 00:09:44.000
앱이 실행 중인 경우, 구현한 경우 FocusFilterIntent에서 수행 방법에 대한 호출을 받게 됩니다.

00:09:44.000 --> 00:09:49.000
앱이 실행되고 있지 않다면, 회전할 확장 프로그램을 구현할 수 있습니다.

00:09:49.000 --> 00:09:58.000
다시 말하지만, FocusFilterIntent에서 수행을 구현했다면, 그것은 당신의 확장에서 호출될 것입니다.

00:09:58.000 --> 00:10:06.000
성능은 앱이나 확장 프로그램에서 호출될 수 있기 때문에, 모든 앱에 확장이 필요한 것은 아닙니다.

00:10:06.000 --> 00:10:18.000
일반적으로, 앱이 포커스 전환에 대한 응답으로 자체 보기만 업데이트하는 경우, 앱에서만 실행하면 충분합니다.

00:10:18.000 --> 00:10:29.000
앱의 위젯, 알림 또는 배지가 포커스 전환에 따라 변경되어야 하는 경우, 확장 프로그램을 구현하는 것을 고려할 수 있습니다.

00:10:29.000 --> 00:10:37.000
기본적으로, 앱이 자체 보기 이외의 것을 업데이트하고 싶다면, 확장 프로그램을 구현해야 합니다.

00:10:37.000 --> 00:10:47.000
이 세션의 나머지 기간 동안, 나는 "당신의 앱"을 참조할 수 있지만, 그것은 이 문맥에 따라 당신의 앱이나 확장을 의미할 수 있습니다.

00:10:47.000 --> 00:11:02.000
포커스 필터에 응답하려면, 수행 기능을 구현하고, 설정을 통해 제공된 매개 변수에 대한 채워진 값에 액세스한 다음, 이러한 값을 사용하여 앱의 보기와 동작을 업데이트하십시오.

00:11:02.000 --> 00:11:10.000
시스템이 앱이 포커스 전환에 응답해야 한다고 결정할 때 수행 구현이 호출됩니다.

00:11:10.000 --> 00:11:18.000
Perform은 또한 시스템이 이전에 전달된 값이 더 이상 관련이 없다고 결정할 때 호출됩니다.

00:11:18.000 --> 00:11:24.000
이 경우, 포커스 필터 매개 변수는 기본값으로 구성됩니다.

00:11:24.000 --> 00:11:32.000
앱의 포커스 필터에서 수행이 호출되면, 모든 매개 변수의 값이 설정에서 구성된 것과 일치하도록 채워집니다.

00:11:32.000 --> 00:11:39.000
명명된 매개 변수의 값은 self." 매개 변수의 이름을 호출하여 읽을 수 있습니다.

00:11:39.000 --> 00:11:46.000
이 예에서, 공연이 끝날 때, 나는 내가 받은 데이터로 앱을 업데이트한다.

00:11:46.000 --> 00:11:50.000
때때로, 현재 포커스 필터 매개 변수를 쿼리해야 할 수도 있습니다.

00:11:50.000 --> 00:12:02.000
제 경우, 제 필터가 ExampleChatAppFocusFilter라고 불리기 때문에, 저는 ExampleChatAppFocus Filter.current에 액세스합니다.

00:12:02.000 --> 00:12:16.000
이제 앱이 포커스 필터에서 작동할 수 있게 되었으므로, 다음 단계는 앱 동작이 어떻게 시스템으로 다시 변경되었는지에 대한 추가 컨텍스트를 제공하여 사용자 경험을 더욱 발전시키는 것입니다.

00:12:16.000 --> 00:12:22.000
추가 컨텍스트를 제공함으로써, 앱의 보기 밖에서 앱 행동에 영향을 미칠 수 있습니다.

00:12:22.000 --> 00:12:30.000
이것의 예로는 알림 필터링과 앱의 알림 배지 수를 설정하는 것이 있습니다.

00:12:30.000 --> 00:12:35.000
시스템 정보를 제공할 수 있는 한 가지 방법은 앱 컨텍스트 객체를 사용하는 것입니다.

00:12:35.000 --> 00:12:41.000
이것은 수행 함수의 결과로 반환될 수 있는 객체이다.

00:12:41.000 --> 00:12:50.000
또는 포커스 필터에서 언제든지 앱 컨텍스트를 반환하고 무효화를 호출하여 시스템이 업데이트된 값을 얻도록 할 수 있습니다.

00:12:50.000 --> 00:13:00.000
포커스 필터가 활성화되면, 앱은 특정 알림이 사용자를 방해해서는 안 되는지 결정하는 추가 컨텍스트를 가질 수 있습니다.

00:13:00.000 --> 00:13:08.000
이 정보를 전달하려면, 앱은 AppContext에서 filterPredicate 속성을 설정해야 합니다.

00:13:08.000 --> 00:13:17.000
이 필터 조건자는 UNNotification의 filterCriteria라는 새로운 문자열 속성과 함께 작동합니다.

00:13:17.000 --> 00:13:26.000
알림의 필터 기준이 필터 조건과 일치하지 않으면 알림이 음소거됩니다.

00:13:26.000 --> 00:13:32.000
FocusFilterIntent에서 필터 조건자를 설정하려면, 앱 컨텍스트에 포함시키세요.

00:13:32.000 --> 00:13:46.000
장치에 개인 포커스가 활성화되어 있고 사용자가 개인 계정만 선택되도록 설정했다고 가정해 봅시다. 이 경우 필터 조건자를 개인 계정의 식별자로 설정했습니다.

00:13:46.000 --> 00:13:53.000
수신 알림이 개인 계정에서 온 것이 아니라면, 사용자를 방해해서는 안 됩니다.

00:13:53.000 --> 00:14:00.000
여기서, 이 알림을 구성할 때, filterCriteria를 작업 계정의 식별자로 설정했습니다.

00:14:00.000 --> 00:14:19.000
이것은 이 알림이 업무용 계정으로 전송되고 있다는 것을 알고 있기 때문이며, 계정 식별자가 개인 계정의 식별자와만 일치하는 방금 설정한 조건자와 일치하지 않기 때문에 이 알림이 음소거될 것으로 예상하기 때문입니다.

00:14:19.000 --> 00:14:29.000
이 예제는 로컬 알림을 위한 것이지만 원격 알림의 JSON 페이로드에서 필터 기준을 설정할 수도 있습니다.

00:14:29.000 --> 00:14:39.000
시스템에 추가 컨텍스트를 제공하는 또 다른 방법은 현재 활성화된 포커스 동안 중요한 것을 반영하기 위해 앱의 배지 수를 업데이트하는 것입니다.

00:14:39.000 --> 00:14:42.000
이것은 사용자의 산만함을 방지합니다.

00:14:42.000 --> 00:14:47.000
이 목적을 위해 UserNotifications에 새로운 API가 있습니다.

00:14:47.000 --> 00:14:57.000
UNUserNotificationCenter에서는 새 배지 값을 나타내는 부호 없는 정수로 setBadgeCount를 호출하기만 하면 됩니다.

00:14:57.000 --> 00:15:02.000
이제 알림을 필터링하거나 배지 수를 설정하기 위해 추가 컨텍스트를 제공하는 방법을 알고 있습니다.

00:15:02.000 --> 00:15:08.000
기억하세요, 이 기능의 목표는 사용자가 집중할 때 가장 관련이 있는 것을 표면화하는 것입니다.

00:15:08.000 --> 00:15:16.000
때때로 이것은 포커스가 활성화되었을 때 주의 산만함을 방지하기 위해 관련 없는 콘텐츠를 최소화해야 한다.

00:15:16.000 --> 00:15:34.000
다음 단계를 위해, 앱의 어떤 부분이 포커스 필터의 혜택을 받을지 고려하고, 구성할 수 있는 속성을 결정하고, 이를 처리하기 위해 앱과 확장을 설정한 다음, 추가 컨텍스트를 제공할지 여부를 평가하여 한 걸음 더 나아가는 것이 좋습니다.

00:15:34.000 --> 00:15:36.000
그게 포커스 필터를 위한 거야!

00:15:36.000 --> 00:15:40.000
이 세션에 참여해 주셔서 감사드리며 남은 WWDC에서 즐거운 시간 보내십시오.

00:15:40.000 --> 23:59:59.000
♪

