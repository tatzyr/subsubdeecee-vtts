WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 음악 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
안녕! 제 이름은 데본입니다.

00:00:11.000 --> 00:00:15.000
저는 watchOS 팀의 엔지니어이며, 오늘은 iOS에 대해 이야기할 것입니다.

00:00:15.000 --> 00:00:21.000
그리고 저는 iOS의 엔지니어인 그레이엄이고, 오늘은 watchOS에 대해 이야기할 것입니다.

00:00:21.000 --> 00:00:29.000
잠금 화면용 액세서리 위젯과 watchOS용 컴플리케이션을 작성할 수 있는 WidgetKit의 API 추가에 대해 이야기할 것입니다.

00:00:29.000 --> 00:00:34.000
우리는 당신이 그 과정에서 당신을 돕기 위해 SwiftUI에 대한 추가와 함께 둘 다 어떻게 개발할 수 있는지 보여줄 것입니다.

00:00:34.000 --> 00:00:41.000
위젯, 타임라인 및 리로딩에 익숙하지 않다면, 이전 WidgetKit 세션을 찾는 것이 좋습니다.

00:00:41.000 --> 00:00:45.000
먼저, 우리는 합병증의 역사와 그들이 어떻게 진화했는지에 대해 이야기할 것이다.

00:00:45.000 --> 00:00:51.000
그런 다음, 우리는 새로운 환경에서 위젯과 합병증을 색칠하기 위한 새로운 API에 대해 이야기할 것입니다.

00:00:51.000 --> 00:00:58.000
그 후, 그레이엄은 자신만의 위젯을 만들고 기존 위젯 확장 프로그램을 watchOS로 옮기는 방법을 시연할 것입니다.

00:00:58.000 --> 00:01:02.000
다음으로, 그레이엄은 이 작은 전망을 최대한 활용하는 방법을 안내할 것입니다.

00:01:02.000 --> 00:01:07.000
그리고 마지막으로, 우리는 당신의 위젯이 나타날 수 있는 다양한 개인 정보 보호 환경에 대해 이야기할 것입니다.

00:01:07.000 --> 00:01:14.000
합병증은 시계 페이스에 빠르고 눈길을 수 있는 정보를 제공하는 watchOS 플랫폼의 핵심 부분이다.

00:01:14.000 --> 00:01:22.000
그들은 즉시 접근 가능하고 가치 있는 정보를 전달하며 탭하면 앱의 관련 위치로 이동합니다.

00:01:22.000 --> 00:01:26.000
watchOS 2에서 ClockKit을 사용하면 자신만의 컴플리케이션을 만들 수 있습니다.

00:01:26.000 --> 00:01:30.000
그 이후로 합병증은 먼 길을 왔다.

00:01:30.000 --> 00:01:37.000
watchOS 5에는 그래픽 콘텐츠와 새로운 제품군과 함께 풍부한 합병증이 도입되었다.

00:01:37.000 --> 00:01:48.000
SwiftUI 합병증과 여러 합병증이 watchOS 7에 도입되어 합병증을 한 단계 끌어올리고 그 어느 때보다 더 많은 옵션을 제공할 수 있었습니다.

00:01:48.000 --> 00:01:58.000
오늘날, 합병증은 WidgetKit으로 재창조되고 재구성되었으며, SwiftUI를 수용하고 위젯의 형태로 iOS에 한눈에 볼 수 있는 합병증 경험을 제공합니다.

00:01:58.000 --> 00:02:11.000
iOS 16 및 watchOS 9의 WidgetKit을 사용하면 두 플랫폼 모두에서 멋진 위젯과 컴플리케이션을 구축할 수 있으므로 코드를 한 번 작성하고 기존 홈 화면 위젯과 인프라를 공유할 수 있습니다.

00:02:11.000 --> 00:02:18.000
이를 위해, 우리는 "액세서리"라는 단어가 접두사인 기존 WidgetFamily 유형에 새로운 위젯 패밀리를 추가했습니다.

00:02:18.000 --> 00:02:27.000
새로운 액세서리 직사각형 패밀리는 기존 ClockKit 그래픽 직사각형 패밀리와 유사하게 여러 줄의 텍스트 또는 작은 그래프와 차트를 표시하는 데 사용할 수 있습니다.

00:02:27.000 --> 00:02:32.000
액세서리 원형 제품군은 간략한 정보, 게이지 및 진행 상황에 적합합니다.

00:02:32.000 --> 00:02:37.000
이 제품군은 또한 graphicCircular ClockKit 제품군을 대체합니다.

00:02:37.000 --> 00:02:45.000
완전히 새로운 액세서리 인라인은 watchOS의 많은 얼굴과 iOS의 시간 이상에 존재하는 텍스트 전용 슬롯입니다.

00:02:45.000 --> 00:02:52.000
인라인 슬롯은 다양한 크기로 제공되며, 우리는 나중에 그것들을 최대한 활용하는 방법에 대해 이야기할 것입니다.

00:02:52.000 --> 00:02:59.000
watchOS와 관련된 새로운 액세서리 코너 제품군은 위젯 콘텐츠의 작은 원과 게이지 및 텍스트를 혼합합니다.

00:02:59.000 --> 00:03:03.000
이 강연은 iOS와 watchOS 사이의 공통적인 가족에 초점을 맞추고 있다.

00:03:03.000 --> 00:03:11.000
이 새로운 watchOS 제품군과 컴플리케이션 관련 기능에 대한 자세한 내용은 "WidgetKit 컴플리케이션으로 더 알아보기" 세션을 확인하세요.

00:03:11.000 --> 00:03:14.000
색상과 렌더링 모드에 대해 이야기해 봅시다.

00:03:14.000 --> 00:03:18.000
당신은 액세서리 위젯이 몇 가지 다른 모습을 보인다는 것을 눈치챘을 것입니다.

00:03:18.000 --> 00:03:25.000
이 시스템은 액세서리 제품군 위젯의 모양을 제어하며, 렌더링 스타일에 적응하는 데 도움이 되는 몇 가지 도구를 제공했습니다.

00:03:25.000 --> 00:03:28.000
위젯이 표시될 수 있는 세 가지 렌더링 모드가 있습니다.

00:03:28.000 --> 00:03:34.000
위젯은 풀 컬러, 악센트 또는 생동감이 있을 수 있습니다.

00:03:34.000 --> 00:03:40.000
우리는 이 세 가지 다른 프레젠테이션을 나타내기 위해 WidgetRenderingMode 유형을 도입했습니다.

00:03:40.000 --> 00:03:46.000
widgetRenderingMode 키 경로를 사용하여 환경에서 이 값에 액세스할 수 있습니다.

00:03:46.000 --> 00:03:53.000
그 후, 콘텐츠가 나타나는 모든 곳에서 올바르게 보이도록 조건부로 콘텐츠를 변경할 수 있습니다.

00:03:53.000 --> 00:03:58.000
watchOS의 풀 컬러 모드에서, 당신의 콘텐츠는 당신이 지정한 대로 정확하게 표시됩니다.

00:03:58.000 --> 00:04:08.000
기존의 많은 합병증은 날씨 게이지의 그라디언트나 활동 링의 색상과 같이 풀 컬러로 다채로운 모습을 취한다.

00:04:08.000 --> 00:04:13.000
악센트가 있는 렌더링 모드에서, 당신의 견해는 두 그룹으로 나뉘고 독립적으로 색칠됩니다.

00:04:13.000 --> 00:04:19.000
두 채색 그룹은 납작하게 채색되어 있으며, 원래의 불투명함만을 보존한다.

00:04:19.000 --> 00:04:29.000
.widgetAccentable() 뷰 수정자로 뷰를 그룹화하는 방법을 시스템에 알려주거나, 플랫할 때 완벽하게 보이도록 위젯 렌더링 모드 환경 값을 기반으로 콘텐츠를 전환할 수 있습니다.

00:04:29.000 --> 00:04:35.000
시스템은 여러 가지 방법으로 콘텐츠를 색칠할 수 있으며, 그 중 일부는 반전되어 있습니다.

00:04:35.000 --> 00:04:42.000
일부는 검은색 배경에 있는 반면, 다른 일부는 watchOS 9의 새로운 풀 컬러 배경에 있습니다.

00:04:42.000 --> 00:04:48.000
iOS의 생생한 렌더링 모드에서, 당신의 콘텐츠는 불포화되고 잠금 화면 배경에 적절하게 채색됩니다.

00:04:48.000 --> 00:04:52.000
시스템은 당신의 그레이스케일 콘텐츠를 물질적 모양에 매핑합니다.

00:04:52.000 --> 00:04:57.000
이 자료는 그 뒤에 있는 내용에 적응할 수 있으며, 그 환경에서 바로 나타난다.

00:04:57.000 --> 00:05:02.000
또한, 잠금 화면은 생생한 렌더링 모드에 컬러 색조를 제공하도록 구성할 수 있습니다.

00:05:02.000 --> 00:05:05.000
광원 색상은 대부분 불투명하고 밝아진다.

00:05:05.000 --> 00:05:12.000
다른 쪽 끝에서, 어두운 소스 색상은 그 뒤에 있는 배경의 덜 눈에 띄는 흐림으로 나타나며, 약간의 밝기만 있다.

00:05:12.000 --> 00:05:16.000
가독성을 보장하기 위해, 이 모드에서 투명한 색상을 사용하지 마세요.

00:05:16.000 --> 00:05:23.000
대신, 가독성을 유지하면서 덜 눈에 띄는 콘텐츠를 나타내기 위해 더 어두운 색이나 검은색을 사용하세요.

00:05:23.000 --> 00:05:32.000
이 뉘앙스의 일부를 돕기 위해, 우리는 또한 이 원형 달력과 같이 필요한 위젯에 일관된 배경을 제공하기 위해 AccessoryWidgetBackground 뷰를 도입했습니다.

00:05:32.000 --> 00:05:38.000
대부분의 액세서리 위젯에는 배경이 없지만, 일부 스타일은 배경으로 향상시킬 수 있습니다.

00:05:38.000 --> 00:05:46.000
배경 보기는 다양한 위젯 렌더링 모드에서 다른 모습을 취하며 얼굴이나 잠금 화면의 스타일에 맞게 보이도록 시스템에 의해 조정됩니다.

00:05:46.000 --> 00:05:54.000
이것은 풀 컬러와 악센트의 부드러운 투명 뷰이며, 활기찬 환경에서는 검은색으로, 낮은 밝기와 완전한 흐림을 초래합니다.

00:05:54.000 --> 00:06:01.000
그레이엄은 잠금 화면과 watchOS의 합병증을 위한 새로운 위젯을 만들기 시작하게 되어 매우 기쁩니다. 저는 그것을 그에게 넘겨줄 것입니다.

00:06:01.000 --> 00:06:02.000
또 안녕!

00:06:02.000 --> 00:06:13.000
여러분 중 일부는 WWDC2020의 "Widgets Code-along"에서 익숙할 수 있는 기존 앱인 Emoji Rangers에 새로운 위젯 제품군에 대한 지원을 추가할 것입니다.

00:06:13.000 --> 00:06:17.000
시작하기 전에, 기존 위젯이 없는 프로젝트를 가진 사람들을 위한 메모.

00:06:17.000 --> 00:06:26.000
iOS에 이미 존재하고 watchOS로 가져온 위젯 확장 대상을 프로젝트에 추가하여 시작할 수 있습니다.

00:06:26.000 --> 00:06:35.000
하지만 저는 여러분 중 많은 사람들이 이미 위젯이 있는 앱을 가지고 있다는 것을 알고 있으므로, 오늘은 거기서 시작하여 새로운 위젯과 합병증을 추가하는 것에 대해 이야기합시다.

00:06:35.000 --> 00:06:38.000
우리는 이모티콘 레인저스 프로젝트를 계속할 것이다.

00:06:38.000 --> 00:06:46.000
이 앱은 우리가 가장 좋아하는 이모티콘 레인저를 추적하고 홈 화면 위젯을 사용하여 건강과 재충전 시간을 최신 상태로 유지합니다.

00:06:46.000 --> 00:06:51.000
우리는 이미 이모티콘 레인저스를 watchOS로 가져왔고, 우리가 가장 좋아하는 앱을 손목에 가져왔습니다.

00:06:51.000 --> 00:06:59.000
오늘 우리는 새로운 위젯 제품군을 지원하고 시계에 위젯 확장을 제공하여 이모티콘 레인저스를 확장할 것입니다.

00:06:59.000 --> 00:07:02.000
시계에 위젯 확장을 시작하는 것부터 시작합시다.

00:07:02.000 --> 00:07:07.000
우리는 기존 iOS 대상과 코드를 공유하는 새로운 watchOS 대상을 추가할 것입니다.

00:07:07.000 --> 00:07:44.000
우리는 iOS 위젯 확장 대상을 복제하고, 더 나은 이름을 부여하고, 번들 식별자를 시계 앱의 접두사로 변경하고, watchOS를 대상으로 하고, 시계 앱에 새로운 확장을 삽입할 것입니다.

00:07:44.000 --> 00:07:53.000
이제 우리는 watchOS에서 코드 구축을 해야 합니다 - 그렇게 합시다.

00:07:53.000 --> 00:08:22.000
EmojiRangerWidget 코드를 살펴보면 시스템이 콘텐츠를 다시 로드할 때 사용되는 타임라인 공급자, SwiftUI를 사용하여 다른 제품군에 대한 콘텐츠를 생성하는 보기, 위젯 구성 및 Xcode 미리보기 공급자를 볼 수 있습니다.

00:08:22.000 --> 00:08:26.000
이모티콘 레인저스 앱은 이미 iOS 홈 화면 위젯을 지원합니다.

00:08:26.000 --> 00:08:38.000
그것은 시스템 중소 가족을 제공하며, 여기 위젯 구성에서 새로운 가족을 추가할 것입니다.

00:08:38.000 --> 00:08:55.000
시계에서 시스템 패밀리를 사용할 수 없기 때문에, 지원되는 가족을 지정하기 위해 플랫폼 매크로를 사용해야 합니다.

00:08:55.000 --> 00:09:12.000
미리보기 공급자에서, 나는 새로운 가족을 위한 미리보기를 추가할 것이다.

00:09:12.000 --> 00:09:19.000
다음으로, watchOS를 위해 성공적으로 빌드하기 전에 새로운 IntentRecommendation API를 구현해야 합니다.

00:09:19.000 --> 00:09:28.000
의도는 iOS의 UI를 편집하는 위젯에서 완전히 구성할 수 있지만, watchOS에서는 사전 구성된 목록을 제공해야 합니다.

00:09:28.000 --> 00:09:46.000
우리는 IntentTimelineProvider의 새로운 추천 방법을 무시함으로써 그것을 할 수 있다.

00:09:46.000 --> 00:09:47.000
이제 우리는 성공적으로 짓고 있다.

00:09:47.000 --> 00:09:56.000
미리보기를 재개하고 원형 위젯이 어떻게 생겼는지 봅시다.

00:09:56.000 --> 00:10:01.000
작은 위젯을 위한 콘텐츠는 우리의 새로운 폼 팩터에 잘 맞지 않습니다.

00:10:01.000 --> 00:10:09.000
새로운 위젯 제품군은 홈 화면에 있는 iOS 위젯보다 작으며, 합병증의 내용을 고려해야 합니다.

00:10:09.000 --> 00:10:14.000
이제 우리의 합병증을 돋보이게 하기 위해 사용할 수 있는 몇 가지 새로운 견해에 대해 이야기해 봅시다.

00:10:14.000 --> 00:10:16.000
경치로 가자.

00:10:16.000 --> 00:10:22.000
우리는 systemSmall 및 기타 위젯에 대한 코드를 볼 수 있습니다; accessoryCircular 케이스에 대한 코드를 추가합시다.

00:10:22.000 --> 00:10:32.000
아바타만 있으면 좋을 것 같아.

00:10:32.000 --> 00:10:37.000
이것은 우리 앱에 대한 빠른 단축키를 제공하지만 사용자에게 어떠한 정보도 제공하지 않습니다.

00:10:37.000 --> 00:10:46.000
사용자에게 레인저가 언제 다시 싸울 준비가 될지에 대한 아이디어를 줄 수 있는 가장자리 주변에 진행 상황 보기를 추가합시다.

00:10:46.000 --> 00:10:53.000
이 진행 상황 보기를 현재로 애니메이션화하는 데 문제가 있습니다. 짧은 연속으로 많은 타임라인 항목이 필요합니다.

00:10:53.000 --> 00:10:57.000
대신, 우리는 SwiftUI의 새로운 자동 업데이트 ProgressView를 사용할 수 있습니다.

00:10:57.000 --> 00:11:01.000
그것은 우리의 레인저가 완전히 치유될 날짜 간격이 걸린다.

00:11:01.000 --> 00:11:11.000
그 시스템은 우리의 진행 상황을 계속 업데이트할 것이며, 이는 우리가 여기에 하나의 타임라인 항목만 필요하다는 것을 의미한다는 것을 의미한다.

00:11:11.000 --> 00:11:14.000
훨씬 나아.

00:11:14.000 --> 00:11:19.000
이제 직사각형 가족을 추가해 봅시다.

00:11:19.000 --> 00:11:25.000
우리는 직사각형 미리보기를 선택할 것이다.

00:11:25.000 --> 00:11:31.000
이것은 우리에게 더 많은 공간을 제공하므로, 우리는 합병증 스타일로 세 줄 보기를 만들 것이다.

00:11:31.000 --> 00:11:39.000
먼저 캐릭터의 이름, 그 다음 레벨, 그리고 완전히 치유될 때까지의 시간, 우리는 자동 업데이트 날짜 필드를 사용할 것입니다.

00:11:39.000 --> 00:11:59.000
캐릭터의 이름이 눈에 띄기를 원하기 때문에, 헤드라인의 글꼴 스타일을 사용하여 텍스트의 크기를 조정하고, 색상을 조정할 widgetAccentable 수정자를 추가할 것입니다.

00:11:59.000 --> 00:12:18.000
우리의 전망은 활기차게 보입니다. 이제 시계의 다른 렌더링 모드에서 어떻게 보이는지 봅시다.

00:12:18.000 --> 00:12:22.000
캐릭터의 이름이 악센트 색상을 어떻게 나타내는지 볼 수 있습니다.

00:12:22.000 --> 00:12:30.000
위젯과 합병증이 그들의 환경에서 편안함을 느끼도록 하려면, 기본 글꼴 매개 변수를 사용하고 글꼴 스타일을 사용하는 것이 중요합니다.

00:12:30.000 --> 00:12:34.000
글꼴 스타일과 크기는 iOS와 watchOS 간에 다릅니다.

00:12:34.000 --> 00:12:40.000
iOS는 일반 텍스트 디자인을 사용하는 반면, watchOS는 더 무거운 무게의 둥근 디자인을 사용합니다.

00:12:40.000 --> 00:12:43.000
당신의 위젯과 합병증은 다른 것들과 인접한 화면에 있을 것입니다.

00:12:43.000 --> 00:12:53.000
그래서 그들은 일관되게 보이기 때문에, 글꼴 스타일 제목, 헤드라인, 본문 및 캡션을 사용하는 것이 좋습니다.

00:12:53.000 --> 00:13:04.000
Xcode의 미리보기는 우리가 여전히 아바타를 추가할 수 있는 공간이 남아 있다는 것을 보여준다.

00:13:04.000 --> 00:13:11.000
이게 아이폰에서 어떻게 보이는지 보자.

00:13:11.000 --> 00:13:13.000
그거 멋지다!

00:13:13.000 --> 00:13:19.000
마지막으로, 텍스트 한 줄과 선택적으로 이미지를 표시하는 세 번째 스타일인 accessoryInline을 추가해 봅시다.

00:13:19.000 --> 00:13:25.000
인라인 액세서리는 시스템 정의 색상과 글꼴에 따라 그려집니다.

00:13:25.000 --> 00:13:38.000
미리보기를 선택하자.

00:13:38.000 --> 00:13:45.000
우리 영웅의 이름과 충전 카운트다운을 보여주자.

00:13:45.000 --> 00:13:47.000
이 텍스트는 우리의 시계 슬롯에 너무 길다.

00:13:47.000 --> 00:13:51.000
그래서 지금이 당신에게 ViewThatFits를 보여줄 좋은 시간입니다.

00:13:51.000 --> 00:14:00.000
나는 긴 것부터 간결한 것까지 여러 뷰를 제공할 수 있으며, ViewThatFits는 잘림이나 클리핑 없이 사용 가능한 공간에 맞는 첫 번째 콘텐츠 뷰를 선택할 것이다.

00:14:00.000 --> 00:14:19.000
텍스트를 짧게 하자.

00:14:19.000 --> 00:14:42.000
심지어 가장 짧은 시계 슬롯에는 너무 길 수 있으므로, 이름의 아바타를 바꿔서 세 번째 대안을 제공합시다.

00:14:42.000 --> 00:14:49.000
그게 어떻게 생겼는지 보자.

00:14:49.000 --> 00:14:54.000
이에 대한 자세한 내용은 "SwiftUI로 사용자 지정 레이아웃 구성" 세션을 참조하십시오.

00:14:54.000 --> 00:14:56.000
멋져!

00:14:56.000 --> 00:15:02.000
이모티콘 레인저스조차도 사생활을 즐기는 것을 좋아하기 때문에, 나는 그것에 대해 이야기하기 위해 그것을 데본에게 돌려줄 것이다.

00:15:02.000 --> 00:15:05.000
또 안녕! 사생활에 대해 얘기하자.

00:15:05.000 --> 00:15:10.000
지금까지 이 강연에서, 우리는 당신의 위젯과 합병증의 활성 상태에 대해 논의했습니다.

00:15:10.000 --> 00:15:17.000
그러나, 우리의 플랫폼 전반에 걸쳐, 당신은 장치가 콘텐츠를 편집하고 있는지 아니면 저휘도 상태인지 고려해야 합니다.

00:15:17.000 --> 00:15:25.000
iOS 잠금 화면에서 기본 동작은 장치가 잠겨 있는 동안에도 콘텐츠를 보여주는 것이며, 이는 여기 그리드의 왼쪽 상단 셀입니다.

00:15:25.000 --> 00:15:34.000
그러나, 이것은 설정에서 구성할 수 있으며, 사용자는 알림과 마찬가지로 잠겨 있을 때 위젯을 편집하도록 선택할 수 있습니다.

00:15:34.000 --> 00:15:38.000
watchOS에서, 시계가 착용되는 한 장치는 잠금 해제된 상태로 유지됩니다.

00:15:38.000 --> 00:15:45.000
비활성 상태일 때, 시계는 낮은 휘도 프레젠테이션의 콘텐츠와 낮은 업데이트 케이던스와 함께 상시 켜진 상태로 전환됩니다.

00:15:45.000 --> 00:15:52.000
기본적으로, 당신의 콘텐츠는 왼쪽 하단의 상태인 낮은 휘도로 편집되지 않습니다.

00:15:52.000 --> 00:15:59.000
잠금 화면과 마찬가지로, 사용자는 이 상시 상태에서 편집되도록 컴플리케이션 콘텐츠를 구성할 수 있습니다.

00:15:59.000 --> 00:16:05.000
이 상태에서, 당신은 당신의 콘텐츠가 편집과 낮은 휘도 모두에 준비되어 있는지 확인해야 합니다.

00:16:05.000 --> 00:16:09.000
함께, 플랫폼은 여기에 표시된 네 개의 주 각각을 다룹니다.

00:16:09.000 --> 00:16:14.000
이러한 모든 가능한 상태를 고려하고 모든 경우에 합병증과 위젯이 잘 작동하는지 확인하십시오.

00:16:14.000 --> 00:16:18.000
네가 그걸 어떻게 할 수 있는지 얘기해 보자.

00:16:18.000 --> 00:16:23.000
시계에서, 당신의 위젯은 상시표시형 디스플레이 경험을 지원해야 합니다.

00:16:23.000 --> 00:16:28.000
\.isLuminanceReduced 환경 값으로 콘텐츠를 상시 조정할 수 있습니다.

00:16:28.000 --> 00:16:35.000
ClockKit에서 오는 경우, 이제 하나뿐만 아니라 모든 타임라인 항목에 대해 상시 콘텐츠를 준비할 수 있습니다.

00:16:35.000 --> 00:16:43.000
항상 켜져 있을 때, 시간 관련 텍스트와 진행 보기는 항상 켜져 있는 낮은 업데이트 케이던스를 지원하기 위해 감소된 충실도 모드로 바뀝니다.

00:16:43.000 --> 00:16:52.000
이 모드를 지원하려면, 환경 값을 사용하여 시간에 민감한 콘텐츠를 제거하고 더 낮은 업데이트 빈도로 콘텐츠를 최적화하십시오.

00:16:52.000 --> 00:16:54.000
이제 편집에 대해 이야기해 봅시다.

00:16:54.000 --> 00:17:01.000
기본적으로 개인 정보 보호 모드는 TimelineProvider가 만든 자리 표시자의 편집된 버전을 표시합니다.

00:17:01.000 --> 00:17:10.000
민감한 요소와 편집할 필요가 없는 요소가 있는 경우, .privacySensitive 수정자를 사용하여 편집할 뷰의 일부만 표시할 수 있습니다.

00:17:10.000 --> 00:17:16.000
이 예에서, 우리는 위젯에서 심박수를 편집했지만 이미지를 편집하지 않은 상태로 두었습니다.

00:17:16.000 --> 00:17:20.000
이제 잠금 화면과 WidgetKit 합병증을 위한 멋진 위젯을 만들 준비가 되었습니다.

00:17:20.000 --> 00:17:26.000
SwiftUI의 새로운 기능에 대한 자세한 내용은 "SwiftUI로 사용자 지정 레이아웃 구성" 토크를 확인하세요.

00:17:26.000 --> 00:17:27.000
봐줘서 고마워.

00:17:27.000 --> 23:59:59.000
♪

