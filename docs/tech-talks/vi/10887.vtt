WEBVTT

00:00:01.000 --> 00:00:05.000
David Wendland: Xin chào mọi người, tôi là David Wendland, một người ủng hộ kỹ thuật thương mại cho App Store.

00:00:05.000 --> 00:00:10.000
Tôi rất vui khi được ở đây hôm nay, hầu như, để chia sẻ những gì cả nhóm của chúng tôi đang làm.

00:00:10.000 --> 00:00:15.000
Trước khi bắt đầu, tôi muốn các đồng nghiệp ở Cupertino của tôi giới thiệu bản thân.

00:00:15.000 --> 00:00:21.000
Manjeet Chawla: Xin chào, tên tôi là Manjeet Chawla, và tôi là quản lý chương trình kỹ thuật cho App Store.

00:00:21.000 --> 00:00:23.000
Joe Mani: Xin chào, tôi là Joe.

00:00:23.000 --> 00:00:26.000
Tôi là quản lý chương trình cho App Store.

00:00:26.000 --> 00:00:34.000
David: Ba chúng tôi hôm nay sẽ giới thiệu cho bạn một loạt ba phần có tiêu đề "Hỗ trợ khách hàng với StoreKit 2 và App Store Server API."

00:00:34.000 --> 00:00:44.000
Chúng tôi sẽ tập trung vào cách khung StoreKit 2 và khả năng của App Store Server API có thể cải thiện việc mua hàng trong ứng dụng, hỗ trợ khách hàng và xử lý hoàn tiền.

00:00:44.000 --> 00:00:52.000
Ba phần này chúng tôi hy vọng sẽ cung cấp cho bạn thông tin chi tiết, cách tiếp cận và lợi ích cần xem xét khi lập kế hoạch nâng cao ứng dụng và trải nghiệm khách hàng của bạn.

00:00:52.000 --> 00:00:59.000
Tôi sẽ bắt đầu mua hàng trong ứng dụng bằng cách bắt đầu với tổng quan về sự ra mắt vào mùa thu của chúng tôi và có gì mới từ máy khách đến máy chủ đến hộp cát.

00:00:59.000 --> 00:01:07.000
Và sau đó tôi sẽ đề cập đến một số cách tiếp cận triển khai để xem xét để giúp bạn lập chiến lược và ưu tiên lộ trình của mình khi tìm cách tích hợp các bản cập nhật này.

00:01:07.000 --> 00:01:09.000
Hãy bắt đầu với những gì mới.

00:01:09.000 --> 00:01:18.000
Với iOS 15, chúng tôi đã quay trở lại thời điểm bắt đầu và tạo ra một khuôn khổ hoàn toàn mới và được cải tiến để đơn giản hóa việc triển khai máy khách với StoreKit 2.

00:01:18.000 --> 00:01:27.000
Điều này mang lại nhiều chức năng hơn trên thiết bị, thông tin trạng thái được cải thiện và bây giờ các giao dịch sử dụng định dạng JWS để tăng cường bảo mật.

00:01:27.000 --> 00:01:35.000
Ngoài ra, chúng tôi đã giới thiệu ba tính năng độc lập để cung cấp nhiều dịch vụ hơn cho khách hàng trực tiếp trong ứng dụng của bạn.

00:01:35.000 --> 00:01:42.000
Từ phía máy chủ, chúng tôi đã thực hiện một bản cập nhật đáng kể cho Thông báo Máy chủ App Store hiện có với sự ra mắt của Phiên bản 2.

00:01:42.000 --> 00:01:49.000
Điều này đã mở rộng đáng kể số lượng các sự kiện mua hàng được hỗ trợ và cũng sử dụng định dạng JWS mới.

00:01:49.000 --> 00:01:53.000
Cuối cùng, chúng tôi đã phát hành một bộ tính năng với API Máy chủ App Store của chúng tôi.

00:01:53.000 --> 00:02:02.000
Nó có một loạt các điểm cuối để hỗ trợ các khả năng khác nhau, từ việc truy xuất lịch sử mua hàng của khách hàng hoặc cung cấp cho bạn trạng thái đăng ký hiện tại của người đăng ký.

00:02:02.000 --> 00:02:10.000
Các khả năng khác bao gồm nhiều kịch bản quản lý khách hàng mà các đồng nghiệp của tôi, Manjeet và Joe, sẽ sớm đề cập đến.

00:02:10.000 --> 00:02:15.000
Danh sách cập nhật mở rộng năm nay minh họa việc chúng tôi tiếp tục đầu tư vào việc mua hàng trong ứng dụng với StoreKit.

00:02:15.000 --> 00:02:24.000
Nhìn chung, những thứ này cải thiện bảo mật, giảm độ phức tạp và giúp kiểm tra mua hàng trong ứng dụng trong Sandbox và Xcode dễ dàng hơn.

00:02:24.000 --> 00:02:37.000
Khi chúng tôi nhìn vào nền tảng của mình, với các tính năng như Touch ID và Face ID, chúng tôi sử dụng sinh trắc học an toàn và xác thực không ma sát để cho phép khách hàng mua hàng an toàn và thuận tiện trên hơn 1,5 tỷ thiết bị.

00:02:37.000 --> 00:02:44.000
App Store hiện có 600 triệu khách truy cập hàng tuần trên 175 mặt tiền cửa hàng, bằng hơn 40 ngôn ngữ.

00:02:44.000 --> 00:02:57.000
Bạn có thể điều chỉnh các mức giá trên mỗi lãnh thổ và năm tới chúng tôi sẽ mở rộng số lượng các mức giá được hỗ trợ lên hơn 500, cung cấp cho bạn nhiều lựa chọn giá hơn và cung cấp các mức giá phù hợp cho từng loại tiền tệ và thị trường.

00:02:57.000 --> 00:03:08.000
Với 45 loại tiền tệ được hỗ trợ trên 195 phương thức thanh toán, chúng tôi làm việc để giúp khách hàng của mình sử dụng phương thức thanh toán ưa thích của họ thuận tiện hơn và khả năng xếp chồng chúng.

00:03:08.000 --> 00:03:18.000
Trong khi chúng tôi tiếp tục những cải tiến nền tảng này, bây giờ tôi muốn tìm hiểu về StoreKit 2 và nêu bật những lợi ích và cải tiến chính của nó so với StoreKit ban đầu để bạn xem xét.

00:03:18.000 --> 00:03:27.000
Khi chúng tôi xem xét một tính năng chính của StoreKit 2, nó sẽ tự động đồng bộ hóa các giao dịch mua hàng trong ứng dụng mới trên tất cả các thiết bị của khách hàng.

00:03:27.000 --> 00:03:31.000
Điều này cho phép bạn cung cấp trải nghiệm nhất quán và đáng tin cậy trong ứng dụng của mình.

00:03:31.000 --> 00:03:40.000
Khung này hỗ trợ xác thực mua hàng trên thiết bị và được sắp xếp hợp lý so với khung trước đó, vì vậy bạn không phải phụ thuộc hoàn toàn vào xác thực mua hàng phía máy chủ.

00:03:40.000 --> 00:03:46.000
Tất cả các giao dịch được ký bằng JWS, để bạn có thể xác minh tính xác thực của từng giao dịch.

00:03:46.000 --> 00:03:55.000
Và khuôn khổ cung cấp thông tin trạng thái quyền lợi trên thiết bị, giúp giảm độ phức tạp để bạn có thể đảm bảo quyền truy cập quyền thích hợp.

00:03:55.000 --> 00:04:04.000
Và tính năng mới với iOS 15 là appAccountToken, cho phép bạn đặt tài khoản trong ứng dụng đã bắt đầu mua hàng và trả lại với các giao dịch đã hoàn thành.

00:04:04.000 --> 00:04:10.000
Ngoài ra, có một số tính năng StoreKit 2 độc lập độc đáo có thể hoạt động cùng với khung StoreKit ban đầu.

00:04:10.000 --> 00:04:21.000
Vì vậy, ứng dụng của bạn ngày nay sử dụng StoreKit gốc với iOS 15 cũng có thể thêm các tính năng StoreKit 2 độc lập này để cung cấp trải nghiệm trong ứng dụng thường xảy ra bên ngoài ứng dụng của bạn.

00:04:21.000 --> 00:04:23.000
Đầu tiên là showManageSubscriptions.

00:04:23.000 --> 00:04:27.000
Điều này cho phép người đăng ký quản lý đăng ký của họ mà không cần rời khỏi ứng dụng của bạn.

00:04:27.000 --> 00:04:36.000
Sau đó, chúng tôi đã bắt đầuRefundRequest, nơi bạn có thể trình bày các giao dịch cho khách hàng mà họ có thể bắt đầu yêu cầu hoàn tiền từ bên trong ứng dụng của bạn.

00:04:36.000 --> 00:04:42.000
Và với điều này, trong Sandbox, điều này cho phép bạn kiểm tra và mô phỏng khoản hoàn lại từ đang chờ xử lý đến được phê duyệt hoặc bị từ chối.

00:04:42.000 --> 00:04:48.000
Chúng tôi cũng đã giới thiệu một khả năng giúp việc kiểm tra tính đủ điều kiện ưu đãi giới thiệu của khách hàng dễ dàng hơn.

00:04:48.000 --> 00:04:56.000
Điều này rất quan trọng vì bạn muốn đảm bảo khi bán một ưu đãi, chẳng hạn như dùng thử miễn phí, rằng khi họ hoàn tất giao dịch mua, trên thực tế họ sẽ được cung cấp ưu đãi.

00:04:56.000 --> 00:05:04.000
Với StoreKit 2, việc kiểm tra này có thể nhanh chóng được thực hiện bằng phương thức isEligibleForIntroOffer và chuyển ID nhóm đăng ký.

00:05:04.000 --> 00:05:11.000
Điều này kiểm tra xem họ đã từng sử dụng bất kỳ loại ưu đãi giới thiệu nào cho bất kỳ đăng ký nào trong nhóm đăng ký đó chưa.

00:05:11.000 --> 00:05:17.000
Ngoài ra, bạn cũng nên bán ưu đãi giới thiệu chỉ khi nó được StoreKit trả lại.

00:05:17.000 --> 00:05:23.000
Điều đó sẽ đến từ Product.SubscriptionOffer, nơi nó sẽ trả lại chi tiết ưu đãi giới thiệu nếu có.

00:05:23.000 --> 00:05:29.000
Nếu không, thì nó sẽ không được StoreKit trả lại, do đó ngăn bạn bán một đề nghị không có sẵn.

00:05:29.000 --> 00:05:38.000
Vì vậy, điều quan trọng là điều này không được mã hóa cứng và thay vào đó, ứng dụng của bạn tận dụng StoreKit, sử dụng ngày bắt đầu và ngày kết thúc được định cấu hình trong App Store Connect.

00:05:38.000 --> 00:05:47.000
Bây giờ tôi muốn di chuyển về phía máy chủ và thảo luận về các tính năng của API Máy chủ App Store, nơi các yêu cầu được thực hiện từ máy chủ đến máy chủ mà không có bất kỳ sự tương tác nào của khách hàng.

00:05:47.000 --> 00:05:48.000
Chúng ta sẽ bắt đầu với trạng thái đăng ký.

00:05:48.000 --> 00:05:52.000
Điều này cung cấp trạng thái đăng ký của khách hàng với ứng dụng của bạn.

00:05:52.000 --> 00:06:01.000
Và nếu bạn có nhiều dịch vụ đăng ký, thì bạn sẽ có trạng thái quyền lợi cho mỗi đăng ký, mỗi trạng thái được đại diện bởi một ID giao dịch gốc duy nhất.

00:06:01.000 --> 00:06:17.000
Một phần tuyệt vời của trạng thái đăng ký là nó chỉ trả về giao dịch đã ký JWS hiện tại cho mỗi đăng ký, vì vậy không cần logic trên máy chủ của bạn để phân tích lịch sử giao dịch của khách hàng, cố gắng xác định giao dịch hiện tại của họ hoặc sản phẩm nào sẽ được cấp quyền.

00:06:17.000 --> 00:06:30.000
Bây giờ nếu bạn là nhà cung cấp dịch vụ đa nền tảng, bạn có thể sử dụng dịch vụ này để nhận trạng thái hiện tại bất cứ lúc nào, từ máy chủ đến máy chủ, mà không cần chạy ứng dụng của bạn và tất cả những gì bạn cần là ID giao dịch ban đầu của khách hàng; không còn biên lai ứng dụng nữa.

00:06:30.000 --> 00:06:33.000
Đây là một số phương pháp hay nhất mà chúng tôi đề xuất.

00:06:33.000 --> 00:06:40.000
Điều quan trọng là bạn luôn lưu trữ ID giao dịch gốc duy nhất trong cơ sở dữ liệu của mình sau mỗi lần mua hoặc khôi phục giao dịch.

00:06:40.000 --> 00:06:50.000
Giá trị này đại diện cho mỗi ưu đãi đăng ký, điều này rất quan trọng để theo dõi vòng đời đăng ký từ khi mua ban đầu đến gia hạn, đến vấn đề thanh toán và khôi phục, hoặc nâng cấp và hạ cấp.

00:06:50.000 --> 00:06:56.000
ID này được sử dụng với máy khách và API máy chủ, cùng với thông báo máy chủ.

00:06:56.000 --> 00:07:01.000
Cuối cùng, trạng thái đăng ký chỉ nên được sử dụng từ máy chủ đến máy chủ như một phương pháp bảo mật tốt nhất.

00:07:01.000 --> 00:07:07.000
Nếu bạn cần kiểm tra trạng thái trực tiếp từ ứng dụng của mình, thì khung StoreKit 2 có giải pháp của bạn.

00:07:07.000 --> 00:07:16.000
Tính năng tiếp theo với API máy chủ là lịch sử mua hàng trong ứng dụng, nơi bạn có thể truy xuất, từ máy chủ đến máy chủ, lịch sử giao dịch đầy đủ và mới nhất cho khách hàng.

00:07:16.000 --> 00:07:29.000
Lịch sử sẽ bao gồm tất cả các gói không tiêu dùng, đăng ký không gia hạn, đăng ký tự động gia hạn và bất kỳ giao dịch mua hàng tiêu hao chưa hoàn thành nào và tất cả sẽ an toàn, các giao dịch đã ký JWS.

00:07:29.000 --> 00:07:43.000
Bây giờ, có lịch sử giao dịch và tất cả các ID giao dịch ban đầu sẽ hữu ích khi triển khai startRequest API, vì bạn sẽ cần hiển thị các giao dịch để khách hàng lựa chọn để bắt đầu yêu cầu hoàn tiền.

00:07:43.000 --> 00:07:54.000
Đối với các giao dịch mua trong ứng dụng không đăng ký trong các ứng dụng sử dụng StoreKit gốc, bạn có thể tránh xa verifyReceipt và sử dụng API này để xác thực các giao dịch mua thành công hoặc kiểm tra các bản cập nhật trong trường hợp ngừng hoạt động.

00:07:54.000 --> 00:08:02.000
Đối với các phương pháp hay nhất của nó, một số khách hàng có thể có nhiều giao dịch mua, vì vậy phản hồi sẽ chứa tối đa 20 giao dịch cùng một lúc.

00:08:02.000 --> 00:08:06.000
Khi có các giao dịch bổ sung, hãy đảm bảo sử dụng trường hasMore.

00:08:06.000 --> 00:08:12.000
Khi đúng, hãy sử dụng mã thông báo sửa đổi trong phản hồi đó và yêu cầu tiếp theo của bạn để có được trang giao dịch tiếp theo đó.

00:08:12.000 --> 00:08:17.000
Lặp lại cho đến khi trường hasMore trả về false và lưu mã thông báo sửa đổi đó cho tương lai.

00:08:17.000 --> 00:08:26.000
Điều đó sẽ giúp bạn nhanh chóng truy xuất các giao dịch mới nhất của khách hàng, sử dụng mã thông báo sửa đổi đã ghi lại đó để bạn không phải phân trang lại.

00:08:26.000 --> 00:08:32.000
Một phương pháp hay nhất quan trọng khác là sử dụng finishTransaction sau khi sản phẩm hoặc dịch vụ đã được giao.

00:08:32.000 --> 00:08:38.000
Các giao dịch chưa hoàn thành sẽ vẫn nằm trong hàng đợi và giúp ứng dụng của bạn theo dõi các giao dịch mua cần được giao cho khách hàng của bạn.

00:08:38.000 --> 00:08:42.000
Điều này rất quan trọng trong trường hợp có bất kỳ sự gián đoạn nào trên thiết bị.

00:08:42.000 --> 00:08:53.000
Đề xuất cuối cùng liên quan đến các giao dịch được hoàn lại hoặc thu hồi là nếu bạn muốn nhận thông tin cập nhật về những giao dịch này một cách nhanh chóng và hiệu quả nhất có thể, thì hãy xem thông báo của máy chủ Phiên bản 2.

00:08:53.000 --> 00:08:57.000
Những thứ này hiệu quả hơn nhiều so với việc bỏ phiếu bất kỳ API nào của chúng tôi.

00:08:57.000 --> 00:08:59.000
Bây giờ hãy nhìn vào thông báo máy chủ của chúng tôi.

00:08:59.000 --> 00:09:05.000
Chúng được gửi trực tiếp gần thời gian thực đến máy chủ của bạn để biết các sự kiện mua hàng chính và thay đổi trạng thái.

00:09:05.000 --> 00:09:14.000
Năm nay, chúng tôi đã tinh chỉnh đáng kể tính năng này với Phiên bản 2 để làm cho chúng hiệu quả hơn, dễ sử dụng hơn và cung cấp độ chi tiết hơn.

00:09:14.000 --> 00:09:18.000
Chúng tôi đã tăng gấp đôi số lượng sự kiện được hỗ trợ, nâng tổng số đó lên 28 sự kiện độc đáo!

00:09:18.000 --> 00:09:25.000
Với Phiên bản 2, chúng tôi chỉ gửi một thông báo duy nhất cho mỗi sự kiện, vì vậy bạn có thể thực hiện các hành động cụ thể khi nhận được.

00:09:25.000 --> 00:09:31.000
Và những thông báo này cũng áp dụng cho các thành viên trong gia đình có quyền truy cập thông qua Chia sẻ trong gia đình để mua hàng trong ứng dụng.

00:09:31.000 --> 00:09:40.000
Và đối với bất kỳ giao hàng thông báo thất bại nào, chúng tôi sẽ thử lại tối đa năm lần trong khoảng thời gian bảy ngày, để tính đến bất kỳ sự cố ngừng hoạt động nào.

00:09:40.000 --> 00:09:46.000
Và tất nhiên, Phiên bản 2 có sẵn trong Sandbox, vì vậy bạn có thể phát triển an toàn trong môi trường thử nghiệm của chúng tôi.

00:09:46.000 --> 00:09:55.000
Đối với một số phương pháp hay nhất, khi nhận được các thông báo này, điều quan trọng là phải phản hồi bằng Mã phản hồi HTTP 200 khi nó được nhận thành công.

00:09:55.000 --> 00:10:01.000
Điều này cho chúng tôi biết rằng bạn đã nhận được thông báo và bạn không cần chúng tôi gửi lại.

00:10:01.000 --> 00:10:07.000
Nếu máy chủ của bạn trả về lỗi hoặc không phản hồi, App Store sẽ gửi lại cùng một tải trọng thông báo.

00:10:07.000 --> 00:10:13.000
Trong mỗi thông báo là Ngày đã ký; bạn có thể biết chính xác khi nào thông báo ban đầu đó được gửi.

00:10:13.000 --> 00:10:23.000
Và bạn có thể xác thực tính xác thực của các thông báo đã nhận bằng cách sử dụng thông tin giao dịch đã ký JWS, vì vậy bạn có thể tự tin rằng những thông báo này đã được ký bởi App Store.

00:10:23.000 --> 00:10:29.000
Và hãy chắc chắn tận dụng khả năng mới để cung cấp URL máy chủ duy nhất cho hộp cát và các sự kiện sản xuất.

00:10:29.000 --> 00:10:33.000
Và như một phương pháp hay nhất cuối cùng, hãy áp dụng các bản cập nhật thông báo ngay lập tức.

00:10:33.000 --> 00:10:37.000
Một số sự kiện nhạy cảm về thời gian, chẳng hạn như nâng cấp hoặc hoàn tiền.

00:10:37.000 --> 00:10:41.000
Do đó, việc xử lý những thứ này trong thời gian gần như thực có thể có lợi.

00:10:41.000 --> 00:10:47.000
Và bản cập nhật cuối cùng của chúng tôi để tóm tắt cho bạn là các bản cập nhật của chúng tôi trong App Store Connect để giúp thử nghiệm mua hàng trong ứng dụng trong Sandbox.

00:10:47.000 --> 00:10:52.000
Bạn sẽ tìm thấy các tính năng này có thể truy cập được trong tab Người dùng &amp; Truy cập bên dưới Trình kiểm tra Sandbox.

00:10:52.000 --> 00:10:58.000
Như bạn có thể đã biết, trong Sandbox hôm nay, đăng ký gia hạn với tốc độ nhanh để hỗ trợ thử nghiệm.

00:10:58.000 --> 00:11:06.000
Bây giờ chúng tôi đã thêm khả năng làm chậm hoặc tăng tốc độ gia hạn đó trên Sandbox Apple ID, giống như bạn có thể với thử nghiệm StoreKit trong Xcode.

00:11:06.000 --> 00:11:12.000
Điều này sẽ hữu ích cho các tình huống khi bạn cần thêm thời gian để thực hiện các hành động giữa các lần gia hạn.

00:11:12.000 --> 00:11:18.000
Để giúp thử nghiệm trên các mặt tiền cửa hàng khác nhau, bây giờ bạn có thể thay đổi mặt tiền cửa hàng cho ID Apple Sandbox bất cứ lúc nào.

00:11:18.000 --> 00:11:33.000
Và để mở rộng hơn nữa việc sử dụng một Sandbox Apple ID duy nhất, bây giờ bạn có thể xóa lịch sử mua hàng của các đăng ký tự động gia hạn và hàng không tiêu dùng, ví dụ, cho phép bạn mua nội dung hoặc đổi các ưu đãi giới thiệu nhiều lần.

00:11:33.000 --> 00:11:44.000
Bây giờ chúng tôi đã đề cập đến một số lợi ích và phương pháp hay nhất của StoreKit 2 và Server API, hãy xem lại một số cách tiếp cận để bạn xem xét khi chuẩn bị tích hợp các tính năng và khả năng này vào ứng dụng hoặc máy chủ của mình.

00:11:44.000 --> 00:11:51.000
Khi chúng tôi nghĩ về việc mua hàng trong ứng dụng, chúng tôi chủ yếu nghĩ về việc cho phép khách hàng mua hàng của họ và xử lý các thay đổi trạng thái.

00:11:51.000 --> 00:12:02.000
Để làm điều này, bạn phải chọn cách tiếp cận trên thiết bị - nơi bạn thực hiện tất cả cục bộ mà không có bất kỳ phụ trợ máy chủ nào - hoặc bạn tận dụng API phục vụ đến máy chủ, nơi máy chủ của bạn là nguồn gốc của sự thật.

00:12:02.000 --> 00:12:03.000
Hãy bắt đầu với thiết bị.

00:12:03.000 --> 00:12:12.000
Đây là nơi khung StoreKit 2 cung cấp cho ứng dụng của bạn khả năng quản lý hoàn toàn các giao dịch mua trong ứng dụng và thay đổi trạng thái trên thiết bị mà không yêu cầu máy chủ.

00:12:12.000 --> 00:12:17.000
Điều này có thể rất hữu ích cho các doanh nghiệp nhỏ và những doanh nghiệp không có phụ trợ máy chủ hiện có.

00:12:17.000 --> 00:12:23.000
Để làm điều này, bạn bắt đầu với ba phần chức năng cốt lõi này của StoreKit 2 để hỗ trợ quy trình mua hàng.

00:12:23.000 --> 00:12:30.000
Ứng dụng của bạn sẽ sử dụng Sản phẩm để truy xuất các sản phẩm có sẵn của bạn và các chi tiết của nó để thúc đẩy việc bán hàng trong ứng dụng của bạn.

00:12:30.000 --> 00:12:34.000
Điều này đảm bảo nó luôn chính xác và đồng bộ với App Store.

00:12:34.000 --> 00:12:45.000
Và bây giờ với StoreKit 2, bạn sẽ có VerificationResult và PurchaseResult, cùng nhau được sử dụng để xác thực tính xác thực của giao dịch sau khi mua hàng thành công hoặc khôi phục giao dịch.

00:12:45.000 --> 00:12:52.000
Một lợi ích chính khác của khung StoreKit 2 là khả năng cập nhật ứng dụng của bạn cho bất kỳ giao dịch nào.

00:12:52.000 --> 00:13:00.000
Khách hàng có thể có nhiều thiết bị và với Transaction.updates, ứng dụng của bạn sẽ được giữ đồng bộ bất kể giao dịch bắt nguồn từ thiết bị nào.

00:13:00.000 --> 00:13:16.000
Với phương pháp currentEntitlement, ứng dụng của bạn có thể nhanh chóng nhận được trạng thái ngay lập tức cho các giao dịch mua của khách hàng, vì vậy bạn có thể cấp ngay các sản phẩm đó cho khách hàng - tất cả mà không yêu cầu họ đăng nhập hoặc thực hiện Khôi phục Mua hàng, vì bạn có các chi tiết giao dịch mới nhất.

00:13:16.000 --> 00:13:26.000
Cuối cùng, chúng tôi hiểu tầm quan trọng của việc nhận thông tin đăng ký tự động gia hạn trên thiết bị, không chỉ về bản thân sản phẩm mà còn về trạng thái của người đăng ký hiện tại và thời gian gia hạn sắp tới của họ.

00:13:26.000 --> 00:13:29.000
Đối với điều đó, chúng tôi có Product.SubscriptionInfo.

00:13:29.000 --> 00:13:40.000
Vì vậy, với sáu chức năng cốt lõi mà tôi vừa đề cập, bạn có thể tận dụng StoreKit 2 trên iOS 15 và giảm hoặc loại bỏ sự phụ thuộc của bạn vào máy chủ để mang lại trải nghiệm khách hàng tốt nhất.

00:13:40.000 --> 00:13:55.000
Bây giờ, khi chúng ta nghĩ về kiến trúc từ máy chủ đến máy chủ, điều này rất quan trọng đối với các dịch vụ đa nền tảng hoặc đa ứng dụng, nơi khách hàng mong muốn truy cập dịch vụ của họ một cách đáng tin cậy và hệ thống của bạn được yêu cầu cập nhật trạng thái mua hàng của họ bất cứ lúc nào trong thời gian thực.

00:13:55.000 --> 00:14:04.000
Thông thường trong thiết lập này, bạn có máy chủ của mình là nguồn gốc của sự thật, nơi nó trực tuyến 24/7 để nhận và kiểm tra các bản cập nhật với App Store bất cứ lúc nào.

00:14:04.000 --> 00:14:07.000
Nhưng hãy nhìn vào luồng này từ quan điểm của ứng dụng của bạn.

00:14:07.000 --> 00:14:17.000
Ở đây chúng tôi có thiết bị của khách hàng và giả sử ứng dụng của bạn đang chạy bằng cách sử dụng khung StoreKit ban đầu để bắt đầu mua hàng và sử dụng máy chủ App Store verifyReceipt để xác thực mua hàng.

00:14:17.000 --> 00:14:26.000
Điều này có nghĩa là ứng dụng của bạn gửi biên lai ứng dụng được mã hóa Base64 đến máy chủ của bạn sau sự kiện mua hoặc khôi phục, và sau đó nó được gửi đến máy chủ verifyReceipt.

00:14:26.000 --> 00:14:39.000
App Store sẽ phản hồi các giao dịch của khách hàng, trong đó bây giờ máy chủ của bạn sẽ cần phân tích cú pháp qua các giao dịch đó để đánh giá và xác định trạng thái và những hành động cần được thực hiện phía máy chủ hoặc trong ứng dụng của bạn.

00:14:39.000 --> 00:14:41.000
Bây giờ, bạn có thể đã tự hỏi mình câu hỏi này.

00:14:41.000 --> 00:14:48.000
Tin tốt là không, App Store Server API không phụ thuộc vào việc ứng dụng của bạn áp dụng toàn bộ khung StoreKit 2.

00:14:48.000 --> 00:14:56.000
Điều này có nghĩa là bạn có thể tận dụng chức năng mới có sẵn với API Máy chủ App Store ngay lập tức, tất cả trong khi ứng dụng của bạn tiếp tục sử dụng StoreKit gốc.

00:14:56.000 --> 00:14:59.000
Hãy cùng xem qua cách bạn có thể làm điều này.

00:14:59.000 --> 00:15:02.000
Với cùng một thiết kế đó, bạn sẽ cần thực hiện hai thay đổi chính.

00:15:02.000 --> 00:15:06.000
Đầu tiên, chúng tôi sẽ cập nhật ứng dụng của bạn để truy xuất ID giao dịch gốc.

00:15:06.000 --> 00:15:10.000
Thứ hai, bạn sẽ cập nhật máy chủ của mình để sử dụng API Máy chủ App Store.

00:15:10.000 --> 00:15:18.000
Hai thay đổi này cho phép ứng dụng của bạn sử dụng StoreKit gốc hoặc StoreKit 2, giúp bạn dễ dàng hỗ trợ phiên bản ứng dụng mới nhất trên bất kỳ phiên bản iOS nào.

00:15:18.000 --> 00:15:26.000
Để thực hiện thay đổi đầu tiên đó và bắt đầu sử dụng original_transaction_ID trong tương lai, bạn sẽ thay thế logic của mình để truy xuất biên lai ứng dụng Base64.

00:15:26.000 --> 00:15:30.000
Để làm điều này, bạn có thể đã sử dụng phương pháp URL nhận ứng dụng.

00:15:30.000 --> 00:15:35.000
Hãy tiếp tục và thay thế nó bằng thuộc tính này để đăng ký tự động gia hạn.

00:15:35.000 --> 00:15:39.000
Và đối với các loại mua hàng trong ứng dụng khác, bạn sẽ sử dụng thuộc tính tương tự này.

00:15:39.000 --> 00:15:43.000
Bây giờ hãy cập nhật máy chủ của bạn để sử dụng API Máy chủ App Store.

00:15:43.000 --> 00:15:47.000
Bạn sẽ thay đổi từ /verifyReceipt thành /History hoặc /SubscriptionStatus URL.

00:15:47.000 --> 00:15:53.000
Các yêu cầu sẽ sử dụng JWT để ủy quyền và bạn sẽ sử dụng ID giao dịch gốc trong tương lai.

00:15:53.000 --> 00:16:04.000
Với những thay đổi đã hoàn thành này, bạn không còn logic quyền lợi để duy trì trên máy chủ của mình và giờ đây bạn có thể sử dụng các giao dịch đã ký JWS an toàn và đã loại bỏ nhu cầu lưu trữ biên lai ứng dụng.

00:16:04.000 --> 00:16:12.000
Vì vậy, nếu ứng dụng của bạn hỗ trợ các phiên bản iOS cũ hơn, điều này sẽ cung cấp cho bạn một con đường để tận dụng những gì App Store Server API cung cấp.

00:16:12.000 --> 00:16:18.000
Bây giờ trước đó, chúng tôi đã đề cập đến cách StoreKit 2 và API máy chủ xử lý việc xác định trạng thái đăng ký cho bạn.

00:16:18.000 --> 00:16:24.000
Bây giờ như một phương pháp hay nhất, ứng dụng của bạn phải luôn xác định trạng thái người đăng ký khi khởi chạy ứng dụng.

00:16:24.000 --> 00:16:28.000
Khi trạng thái được xác định, nó có thể được lưu trữ cục bộ và cập nhật khi cần thiết.

00:16:28.000 --> 00:16:35.000
Tôi muốn xem xét ngắn gọn năm trạng thái mà chúng tôi trở lại và các hành động bạn cần thực hiện cho mỗi trạng thái, cùng với một số cơ hội để xem xét.

00:16:35.000 --> 00:16:42.000
Bây giờ cần lưu ý, một khách hàng mới sẽ không có bất kỳ trạng thái nào trong số này và đó cũng là trạng thái mà ứng dụng của bạn cần quản lý.

00:16:42.000 --> 00:16:48.000
Bắt đầu với trạng thái Hoạt động, điều này có nghĩa là dịch vụ nên được cung cấp cho khách hàng cho đến ngày hết hạn.

00:16:48.000 --> 00:16:55.000
Bây giờ nếu bạn cung cấp nhiều cấp độ dịch vụ, một cơ hội có thể là đưa ra ưu đãi nâng cấp trong ứng dụng bằng cách sử dụng các ưu đãi khuyến mại.

00:16:55.000 --> 00:17:00.000
Lưu ý rằng các ưu đãi như vậy nên được điều chỉnh cho phù hợp với khách hàng dựa trên lịch sử đăng ký trước đây của họ.

00:17:00.000 --> 00:17:04.000
Bây giờ khi đăng ký đã được khuấy hoàn toàn, bạn sẽ có trạng thái Hết hạn.

00:17:04.000 --> 00:17:09.000
Không cần cung cấp dịch vụ và bạn có thể bán ưu đãi đăng ký hiện tại của mình.

00:17:09.000 --> 00:17:15.000
Tùy chọn, bạn có thể tận dụng các ưu đãi khuyến mại hoặc mã ưu đãi đăng ký để trình bày ưu đãi giành lại lợi.

00:17:15.000 --> 00:17:24.000
Nếu họ đăng ký lại trong vòng 60 ngày kể từ ngày hết hạn, những ngày dịch vụ được thanh toán tích lũy hiện tại của họ sẽ tiếp tục hướng tới tỷ lệ tiền thu được 85 phần trăm.

00:17:24.000 --> 00:17:26.000
Tiếp theo là thời gian thử lại thanh toán.

00:17:26.000 --> 00:17:32.000
Tất cả chúng ta đều gặp vấn đề về thanh toán theo thời gian; thẻ tín dụng có thể hết hạn hoặc tín dụng cửa hàng có thể được tiêu thụ.

00:17:32.000 --> 00:17:39.000
Những đăng ký này dự kiến sẽ tự động gia hạn, nhưng do vấn đề về phương thức thanh toán của chúng, chúng rơi vào cái mà chúng tôi gọi là thời gian thử lại thanh toán.

00:17:39.000 --> 00:17:47.000
Trong khi đăng ký đã hết hạn và không có dịch vụ nào cần được cung cấp, khách hàng cũng không cần đăng ký lại; họ chỉ cần giải quyết vấn đề thanh toán của mình.

00:17:47.000 --> 00:17:55.000
Chúng tôi sẽ tự động cố gắng thử lại và khôi phục đăng ký trong tối đa 60 ngày thông qua các giao tiếp khách hàng khác nhau mà không cần bất kỳ hành động nào của nhà phát triển.

00:17:55.000 --> 00:18:05.000
Nhưng với tin nhắn trong ứng dụng, bạn có thể trực tiếp cảnh báo khách hàng về vấn đề thanh toán của họ và cung cấp lời kêu gọi hành động có giá trị có thể liên kết sâu khách hàng với trang thông tin thanh toán của họ để giải quyết.

00:18:05.000 --> 00:18:14.000
Tiếp theo là thời gian ân hạn, liên quan đến việc thử lại thanh toán nhưng chỉ áp dụng cho người đăng ký của bạn nếu bạn đã chọn tham gia Thời gian ân hạn thanh toán của App Store trong App Store Connect.

00:18:14.000 --> 00:18:20.000
Đối với trạng thái này, bạn sẽ tiếp tục cung cấp dịch vụ mà không bị gián đoạn cho đến khi hết thời gian ân hạn.

00:18:20.000 --> 00:18:25.000
Nếu chúng tôi khôi phục người đăng ký trong thời gian ân hạn của họ, họ sẽ giữ lại chu kỳ thanh toán ban đầu của họ.

00:18:25.000 --> 00:18:31.000
Do đó, họ không bị gián đoạn trong dịch vụ và nhà cung cấp tránh mọi ngày có thể lập hóa đơn bị mất.

00:18:31.000 --> 00:18:37.000
Bây giờ giống như thử thanh toán lại, bạn cũng muốn cung cấp cùng một tin nhắn trong ứng dụng để cảnh báo họ về vấn đề thanh toán của họ.

00:18:37.000 --> 00:18:42.000
Cuối cùng, khi bạn thấy trạng thái Đã thu hồi, điều này áp dụng cho đăng ký có thể chia sẻ gia đình.

00:18:42.000 --> 00:18:51.000
Những thành viên trong gia đình này không còn được hưởng dịch vụ hoặc nội dung đó nữa, vì vậy quyền truy cập có thể bị thu hồi và bạn có thể cung cấp hàng hóa để mua lại những khách hàng này.

00:18:51.000 --> 00:18:59.000
Trong phần cuối cùng của tôi, tôi muốn đi sâu vào một số cách tiếp cận triển khai để bạn cân nhắc khi sử dụng Thông báo Máy chủ App Store.

00:18:59.000 --> 00:19:05.000
Khi bạn nhìn vào tất cả các sự kiện được hỗ trợ này, bạn có thể thấy có khá nhiều sự kiện và một số có thể áp dụng hoặc không áp dụng cho doanh nghiệp của bạn.

00:19:05.000 --> 00:19:09.000
Nhiều loại là một phần của vòng đời đăng ký, trong khi những loại khác áp dụng cho tất cả các loại mua hàng trong ứng dụng.

00:19:09.000 --> 00:19:18.000
Nếu bạn không cung cấp đăng ký, thì cách tiếp cận triển khai của bạn đơn giản hơn, vì đăng ký phức tạp hơn và bạn có thể tránh được nhiều sự kiện đơn giản là không áp dụng.

00:19:18.000 --> 00:19:22.000
Nhưng hãy xem lại các giai đoạn triển khai khác nhau này để bạn cân nhắc.

00:19:22.000 --> 00:19:28.000
Chúng tôi đã chia nó thành ba: bắt đầu, hỗ trợ vòng đời và hành động dựa trên những hiểu biết sâu sắc.

00:19:28.000 --> 00:19:37.000
Khi áp dụng Phiên bản 2, giai đoạn bắt đầu này áp dụng cho tất cả mọi người, bất kể mô hình kinh doanh của bạn hoặc nếu bạn có hoặc chưa áp dụng thông báo Phiên bản 1.

00:19:37.000 --> 00:19:41.000
Bước đầu tiên sẽ là bật Phiên bản 2 trong App Store Connect.

00:19:41.000 --> 00:19:45.000
Bạn sẽ tìm thấy tính năng này trong Thông tin ứng dụng, có tiêu đề "Thông báo máy chủ cửa hàng ứng dụng".

00:19:45.000 --> 00:19:50.000
Và với các bản cập nhật mùa thu, bây giờ bạn có thể chọn các URL dành riêng cho Sandbox và sản xuất.

00:19:50.000 --> 00:19:54.000
Bạn có thể thêm URL đó và chọn phiên bản nào để nhận.

00:19:54.000 --> 00:20:03.000
Và nếu bạn đã nhận được Phiên bản 1, chúng tôi khuyên bạn chỉ nên bật Phiên bản 2 trong Sandbox để cho phép phát triển trước khi cho phép sản xuất.

00:20:03.000 --> 00:20:11.000
Bây giờ chúng tôi đã bật Phiên bản 2, chúng tôi muốn xem xét mức độ ưu tiên, vì vậy hãy đánh giá thông báo nào cần hỗ trợ đầu tiên dựa trên mô hình kinh doanh và cách sử dụng của bạn.

00:20:11.000 --> 00:20:18.000
Để giúp đỡ, bạn nên tập trung vào các sự kiện quan trọng, khối lượng lớn áp dụng nhiều nhất cho doanh nghiệp và lộ trình của bạn.

00:20:18.000 --> 00:20:21.000
Một sự kiện áp dụng cho tất cả các loại giao dịch mua trong ứng dụng là hoàn tiền.

00:20:21.000 --> 00:20:27.000
Bạn nhận được một thông báo HOÀN TIỀN duy nhất cho mỗi giao dịch được hoàn lại cho khách hàng.

00:20:27.000 --> 00:20:31.000
Cách bạn xử lý những sự kiện đó sẽ tùy thuộc vào chính sách và mô hình kinh doanh của bạn.

00:20:31.000 --> 00:20:43.000
Bây giờ, đối với các doanh nghiệp dựa trên đăng ký, bốn thông báo này áp dụng cho các sự kiện chính trong hành trình đăng ký, từ mua ban đầu hoặc đăng ký lại đến gia hạn thành công hoặc thất bại khi hết hạn.

00:20:43.000 --> 00:20:51.000
Bằng cách ưu tiên hành động trên năm loại thông báo này, có nghĩa là bạn sẽ có hỗ trợ cho phần lớn các sự kiện mà bạn có thể nhận được.

00:20:51.000 --> 00:20:56.000
Giai đoạn đầu tiên đó cung cấp một nền tảng vững chắc và cho phép bạn tối đa hóa lợi nhuận của mình.

00:20:56.000 --> 00:21:01.000
Bây giờ bạn có thể tìm cách hoàn thành hỗ trợ của mình cho tất cả các loại thông báo trong giai đoạn tiếp theo này.

00:21:01.000 --> 00:21:07.000
Chỉ còn lại một vài thông báo dựa trên đăng ký, trong khi những thông báo khác phụ thuộc vào việc áp dụng tính năng.

00:21:07.000 --> 00:21:08.000
Hãy xem lại.

00:21:08.000 --> 00:21:13.000
Hai loại này áp dụng cho tất cả các ứng dụng dựa trên đăng ký, DID_CHANGE_RENEWAL_STATUS và tùy chọn.

00:21:13.000 --> 00:21:17.000
Đây là những điều quan trọng để xác định khách hàng hủy hoặc thay đổi mức độ dịch vụ của họ.

00:21:17.000 --> 00:21:21.000
Khi xem xét các loại còn lại này, chúng phụ thuộc vào cách sử dụng của bạn.

00:21:21.000 --> 00:21:26.000
Vì vậy, GRACE_PERIOD_EXPIRED đã được áp dụng nếu bạn đã bật Thời gian ân hạn thanh toán trong App Store Connect.

00:21:26.000 --> 00:21:32.000
RENEWAL_EXTENDED được gửi nếu bạn đã gia hạn gia hạn của người đăng ký với API Máy chủ App Store.

00:21:32.000 --> 00:21:38.000
Và REVOKE áp dụng nếu các sản phẩm đã được bật cho Chia sẻ trong gia đình để mua hàng trong ứng dụng.

00:21:38.000 --> 00:21:44.000
ƯU ĐÃI ĐƯỢC ĐỔI áp dụng khi sử dụng mã ưu đãi đăng ký hoặc ưu đãi khuyến mại.

00:21:44.000 --> 00:21:49.000
Và PRICE_INCREASE được gửi nếu giá của đăng ký tự động gia hạn đã được tăng lên.

00:21:49.000 --> 00:21:52.000
Và sau đó chúng tôi có REFUND_DECLINED và CONSUMPTION_REQUEST.

00:21:52.000 --> 00:21:57.000
Joe sẽ đề cập đến những điều này chuyên sâu trong phần của anh ấy về việc xử lý tiền hoàn lại.

00:21:57.000 --> 00:22:01.000
Cuối cùng, chúng ta có thể chuyển sang giai đoạn hành động dựa trên những hiểu biết sâu sắc.

00:22:01.000 --> 00:22:06.000
Đến thời điểm này, bạn hiện đang nhận và hành động đối với tất cả các sự kiện liên quan đến doanh nghiệp của mình.

00:22:06.000 --> 00:22:17.000
Điều này đảm bảo dịch vụ của bạn biết trạng thái hiện tại của tất cả các đăng ký của khách hàng hoặc bất kỳ thay đổi quyền truy cập nào đối với hàng tiêu dùng đã mua, hàng không phải hàng tiêu dùng hoặc đăng ký không gia hạn.

00:22:17.000 --> 00:22:32.000
Với đăng ký, các thông báo sau xác định khách hàng ở một trạng thái rất cụ thể, do đó cho phép doanh nghiệp của bạn thực hiện các hành động chủ động cụ thể, nơi bạn có thể xác định và thu hút, giữ chân và giành lại người đăng ký một cách thông minh.

00:22:32.000 --> 00:22:44.000
Dưới đây là một số loại thông báo ví dụ nơi bạn có thể xác định các sự kiện chính trong cửa sổ cơ hội tương tác với khách hàng của mình, cung cấp tin nhắn trong ứng dụng chủ động hoặc trình bày các ưu đãi đăng ký phù hợp.

00:22:44.000 --> 00:22:48.000
Hãy xem xét một ví dụ: một khách hàng hủy đăng ký của họ.

00:22:48.000 --> 00:22:54.000
Trong trường hợp này, giả sử người đăng ký đã mua đăng ký hàng tháng vào ngày 25 tháng 11.

00:22:54.000 --> 00:22:59.000
Sau đó vào ngày 5 tháng 12, người đăng ký đã chọn hủy với 20 ngày còn lại trong kỳ hiện tại của họ.

00:22:59.000 --> 00:23:06.000
Đây là khoảng thời gian lưu của chúng tôi, từ khi người đăng ký hủy cho đến khi đăng ký sẽ hết hạn và tự nguyện rời đi.

00:23:06.000 --> 00:23:21.000
Bây giờ khi hành động hủy bỏ đó xảy ra, trạng thái tự động gia hạn được đặt thành sai, ngay lập tức kích hoạt App Store gửi thông báo DID_CHANGE_RENEWAL_STATUS với loại phụ AUTO_RENEW_DISABLED, cảnh báo bạn trong thời gian thực khi bắt đầu khoảng thời gian lưu.

00:23:21.000 --> 00:23:28.000
Cửa sổ cơ hội này cho phép dịch vụ của bạn trình bày các ưu đãi lưu hàng hóa hoặc tin nhắn trong ứng dụng phù hợp trước khi hết hạn.

00:23:28.000 --> 00:23:34.000
Điều quan trọng là các ưu đãi như vậy được điều chỉnh và có tiêu chí đủ điều kiện cho từng nhóm khách hàng.

00:23:34.000 --> 00:23:36.000
Điều này kết thúc phần của tôi.

00:23:36.000 --> 00:23:39.000
Bây giờ tôi muốn giới thiệu đồng nghiệp của tôi, Manjeet.

00:23:39.000 --> 00:23:45.000
Manjeet: Cảm ơn, Dave! Tên tôi là Manjeet Chawla, và tôi là quản lý chương trình kỹ thuật tại App Store.

00:23:45.000 --> 00:23:53.000
Bây giờ, Dave đã nói về cách bạn có thể sử dụng StoreKit 2 và App Store Server API để cải thiện việc mua hàng trong ứng dụng.

00:23:53.000 --> 00:23:58.000
Bây giờ, hãy xem lại những API giống hệt nhau đó từ góc độ hỗ trợ khách hàng.

00:23:58.000 --> 00:24:08.000
Tôi sẽ nói về một số tình huống hỗ trợ phổ biến mà khách hàng phải đối mặt ngày hôm nay với việc mua hàng trong ứng dụng và các phương pháp hay nhất để tận dụng các API này cho các tình huống đó.

00:24:08.000 --> 00:24:16.000
Nhưng trước khi tôi nói về hỗ trợ khách hàng, hãy hiểu việc cung cấp hỗ trợ ảnh hưởng như thế nào đến việc quản lý khách hàng tổng thể của bạn.

00:24:16.000 --> 00:24:25.000
Bạn có thể đang dựa vào các công cụ và hệ thống CRM khác nhau như mua lại, phân tích, hỗ trợ khách hàng và các kênh truyền thông tiếp thị khác nhau.

00:24:25.000 --> 00:24:34.000
Và việc cung cấp hỗ trợ giúp khách hàng của bạn hài lòng và tương tác với sản phẩm và cải thiện mối quan hệ khách hàng tổng thể và sự hài lòng của bạn.

00:24:34.000 --> 00:24:43.000
Bây giờ chúng tôi biết khách hàng liên hệ với bạn để được trợ giúp và App Store đã tạo ra các công cụ để bạn cung cấp hỗ trợ và giải quyết các vấn đề một cách hiệu quả.

00:24:43.000 --> 00:24:53.000
Và hôm nay, tôi sẽ nói về năm công cụ hỗ trợ khách hàng mới để hỗ trợ bạn với các câu hỏi trên tất cả các kênh hỗ trợ của bạn bắt đầu bằng ID đơn hàng tra cứu.

00:24:53.000 --> 00:25:04.000
Ngày nay, khi khách hàng mua hàng trong ứng dụng, họ sẽ nhận được biên lai được gửi đến ID Apple của họ và họ cũng có thể truy cập biên lai này bất cứ lúc nào bằng cách xem lịch sử mua hàng trong Cài đặt tài khoản.

00:25:04.000 --> 00:25:18.000
Và bây giờ, khi khách hàng liên hệ với bạn, nhóm hỗ trợ của bạn có thể yêu cầu khách hàng cung cấp ID đơn hàng trên biên lai này và gọi API Máy chủ App Store mới để tra cứu các giao dịch mua trong ứng dụng của khách hàng cho biên lai đó bằng cách sử dụng ID đơn đặt hàng.

00:25:18.000 --> 00:25:27.000
Bạn cũng có thể sử dụng API này để xác thực tính xác thực của biên lai và liên kết các giao dịch trong biên lai đó với khách hàng.

00:25:27.000 --> 00:25:32.000
Ngoài ra, bạn có thể sử dụng API này để xác định bất kỳ vấn đề nào trong quá trình mua hàng.

00:25:32.000 --> 00:25:46.000
Ví dụ: nếu giao dịch chứa bất kỳ giao dịch mua nào đã được App Store hoàn trả hoặc thu hồi, bạn có thể xem revocationDate và revocationReason trong phản hồi để biết thêm chi tiết về việc hoàn tiền.

00:25:46.000 --> 00:25:54.000
Và một khi bạn triển khai API này, bạn sẽ có thể tra cứu các giao dịch mua lịch sử cho ID đơn hàng khi khách hàng liên hệ với bạn để được hỗ trợ.

00:25:54.000 --> 00:26:01.000
Để có các phương pháp hay nhất, hãy lưu trữ original_transaction_id cho tất cả các giao dịch mua trong ứng dụng trong cơ sở dữ liệu tài khoản khách hàng.

00:26:01.000 --> 00:26:10.000
Và khi khách hàng liên hệ với bạn để được hỗ trợ, bạn có thể dễ dàng sử dụng API này để tra cứu và liên kết các giao dịch mua của khách hàng trong cơ sở dữ liệu tài khoản của bạn.

00:26:10.000 --> 00:26:21.000
Bạn thậm chí có thể tích hợp API này với các kênh hỗ trợ khách hàng hiện tại của mình như điện thoại, email hoặc web để cung cấp trải nghiệm hỗ trợ nhất quán cho khách hàng của bạn.

00:26:21.000 --> 00:26:25.000
Tiếp theo, hãy nói về Tra cứu Hoàn tiền.

00:26:25.000 --> 00:26:35.000
Trong WWDC20, App Store đã giới thiệu thông báo hoàn tiền để thông báo cho máy chủ của bạn mỗi khi khách hàng được hoàn tiền thành công cho giao dịch mua trong ứng dụng.

00:26:35.000 --> 00:26:43.000
Tra cứu hoàn tiền là một API máy chủ App Store hoàn toàn mới cho phép bạn tra cứu tất cả các giao dịch được hoàn tiền cho khách hàng.

00:26:43.000 --> 00:26:52.000
API này cho phép bạn xử lý sự cố máy chủ hoặc lên lịch bảo trì bằng cách tra cứu tiền hoàn lại bất cứ lúc nào một cách nhanh chóng và dễ dàng.

00:26:52.000 --> 00:26:59.000
Ngoài ra, bạn có thể xác định toàn bộ lịch sử hoàn tiền của khách hàng trên tất cả các loại mua hàng trong ứng dụng của họ.

00:26:59.000 --> 00:27:11.000
Bạn cũng có thể sử dụng API này để theo dõi bất kỳ sự tăng đột biến nào trong hoạt động hoàn tiền hoặc đáng ngờ và nó có thể phản hồi các vấn đề phân phối nội dung có thể dẫn đến hoàn tiền.

00:27:11.000 --> 00:27:23.000
Để có các phương pháp hay nhất, nếu bạn đang lưu trữ original_transaction_id cho mỗi lần mua hàng trong ứng dụng trong cơ sở dữ liệu tài khoản khách hàng, bạn có thể sử dụng bất kỳ_transaction_id ban đầu nào của họ để tra cứu các khoản hoàn lại trước đây của họ.

00:27:23.000 --> 00:27:31.000
Và bạn có thể khắc phục bất kỳ sự cố phân phối nội dung nào cho khách hàng có thể dẫn đến hoàn lại tiền bằng cách sử dụng API Tra cứu hoàn tiền.

00:27:31.000 --> 00:27:36.000
Bây giờ hãy chuyển số để nói cụ thể về các đăng ký tự động gia hạn.

00:27:36.000 --> 00:27:46.000
Ví dụ, một kịch bản xảy ra sự cố ngừng hoạt động hoặc một sự kiện đã bị hủy bỏ có thể phổ biến hơn đối với các ứng dụng dựa trên phát trực tuyến như thể thao, truyền hình trực tiếp hoặc video.

00:27:46.000 --> 00:27:51.000
Đối với những sự cố ngừng hoạt động hoặc các sự kiện bị hủy này, làm thế nào bạn có thể xoa dịu khách hàng?

00:27:51.000 --> 00:28:02.000
Bây giờ bạn có thể sử dụng API Máy chủ Mở rộng Gia hạn mới để gia hạn ngày gia hạn cho đăng ký hoạt động trả phí và cung cấp cho khách hàng dịch vụ miễn phí thêm thời gian.

00:28:02.000 --> 00:28:11.000
Bạn có thể sử dụng API này để xử lý sự cố ngừng hoạt động tạm thời và cũng để cung cấp sự xoa dịu; ví dụ, khi khách hàng có trải nghiệm tồi tệ với dịch vụ.

00:28:11.000 --> 00:28:22.000
Lưu ý rằng bạn có thể gia hạn ngày gia hạn đăng ký của khách hàng hai lần trong vòng một năm - mỗi lần, tối đa 90 ngày - bất kể thời hạn đăng ký thực tế.

00:28:22.000 --> 00:28:31.000
Cũng lưu ý, thời gian gia hạn này không được tính vào một năm dịch vụ trả phí cần thiết để nhận được tỷ lệ tiền thu được 85 phần trăm.

00:28:31.000 --> 00:28:38.000
Để biết các phương pháp hay nhất, hãy lưu trữ original_transaction_id để xác định các đăng ký mà bạn muốn gia hạn ngày gia hạn.

00:28:38.000 --> 00:28:46.000
Xác định thời gian gia hạn phù hợp nhất với mô hình kinh doanh của bạn và hiển thị tin nhắn trong ứng dụng khi bạn gia hạn đăng ký của khách hàng.

00:28:46.000 --> 00:28:57.000
Và bởi vì chỉ có thể có hai phần mở rộng cho mỗi khách hàng trong một năm, bạn có thể muốn duy trì tiêu chí đủ điều kiện cho những khách hàng đủ điều kiện gia hạn của mình.

00:28:57.000 --> 00:29:05.000
Và luôn liên kết với các nhóm kinh doanh và tiếp thị của bạn để cung cấp thông điệp nhất quán trên tất cả các kênh giao tiếp của bạn.

00:29:05.000 --> 00:29:14.000
Bây giờ hãy thảo luận về một kịch bản khác mà bạn có thể muốn bồi thường cho khách hàng bằng cách giảm giá một lần cho đăng ký của họ.

00:29:14.000 --> 00:29:26.000
Trong iOS 14, App Store đã giới thiệu mã ưu đãi đăng ký để giúp bạn có được, giữ chân và giành lại người đăng ký bằng cách cung cấp đăng ký giảm giá hoặc miễn phí trong thời gian giới hạn.

00:29:26.000 --> 00:29:32.000
Bạn có thể phân phối các mã duy nhất, một lần này bằng cách sử dụng các kênh trực tuyến hoặc ngoại tuyến.

00:29:32.000 --> 00:29:38.000
Và đối với các vấn đề dịch vụ khách hàng, bạn có thể cung cấp các mã một lần này để bồi thường cho vấn đề dịch vụ.

00:29:38.000 --> 00:29:49.000
Bạn cũng có thể sử dụng điều này như một cơ hội để đề xuất một tùy chọn đăng ký thay thế; ví dụ, một gói có thời hạn dài hơn cung cấp nhiều giá trị hơn với mức giá thấp hơn.

00:29:49.000 --> 00:30:03.000
Khách hàng trên iOS 14 và iPadOS 14 trở lên có thể đổi mã ưu đãi trên App Store thông qua URL đổi mã một lần hoặc trong ứng dụng nếu bạn đã triển khai presentCodeRedemptionSheet API trong StoreKit.

00:30:03.000 --> 00:30:16.000
Bây giờ, để có các phương pháp hay nhất, hãy cung cấp quy trình đổi quà bên trong ứng dụng để khách hàng đổi mã cùng với tin nhắn và mô tả trong ứng dụng được tùy chỉnh cho mã ưu đãi để giúp khách hàng đưa ra quyết định sáng suốt.

00:30:16.000 --> 00:30:29.000
Và sử dụng điều này trong các kênh hỗ trợ khách hàng hiện tại của bạn như điện thoại, email, web hoặc thậm chí trong ứng dụng của bạn, ví dụ: khi khách hàng đang trò chuyện với nhóm hỗ trợ của bạn trong phiên trò chuyện trực tiếp.

00:30:29.000 --> 00:30:38.000
Bây giờ, nếu bạn đang phân phối các mã này trên các kênh tiếp thị kỹ thuật số như email, mỗi mã sẽ có một URL đổi quà được liên kết với mã được điền sẵn.

00:30:38.000 --> 00:30:47.000
Bạn sẽ có thể sử dụng một URL duy nhất để liên kết sâu liền mạch khách hàng từ email của bạn vào quy trình đổi quà xảy ra trên App Store.

00:30:47.000 --> 00:31:05.000
URL này bao gồm hai giá trị: ID, đại diện cho ID ứng dụng của bạn, vì vậy nó sẽ tĩnh cho mỗi ứng dụng của bạn; và giá trị thứ hai là mã, nơi bạn sẽ tự động điền URL với giá trị chữ và số duy nhất của người đăng ký.

00:31:05.000 --> 00:31:12.000
Bây giờ, nếu URL đó được nhúng trong một email, thì việc nhấn vào nó sẽ đưa người dùng vào App Store để hoàn tất giao dịch.

00:31:12.000 --> 00:31:25.000
Một số điều cần lưu ý: người đăng ký ở đây không bao giờ nhìn thấy mã trong luồng này và khi hoàn thành, đó sẽ là một giao dịch bên ngoài khác mà ứng dụng của bạn sẽ cần thực hiện khi khách hàng khởi chạy lại ứng dụng.

00:31:25.000 --> 00:31:31.000
Tiếp theo, hãy đề cập đến một kịch bản mà khách hàng muốn quản lý đăng ký của họ.

00:31:31.000 --> 00:31:40.000
Trong StoreKit 2, chúng tôi đã ra mắt API quản lý đăng ký mới cho phép bạn hiển thị các đăng ký quản lý hiện có ngay trong ứng dụng.

00:31:40.000 --> 00:31:48.000
Hỗ trợ quản lý đăng ký trong ứng dụng có nghĩa là khách hàng có thể nâng cấp, hạ cấp hoặc hủy đăng ký mà không cần rời khỏi ứng dụng của bạn.

00:31:48.000 --> 00:31:57.000
Điều này cũng cung cấp cho bạn một nơi tự nhiên để cung cấp trợ giúp cho các vấn đề phổ biến của người đăng ký và đưa ra các ưu đãi thay thế để khách hàng cân nhắc.

00:31:57.000 --> 00:32:07.000
Và bạn có thể sử dụng cơ hội này để trình bày ưu đãi lưu được cá nhân hóa trước khi họ thấy trang quản lý đăng ký; ví dụ: nếu mức độ tương tác của họ thấp.

00:32:07.000 --> 00:32:14.000
Hoặc bạn thậm chí có thể trình bày một cuộc khảo sát xuất cảnh nếu họ hủy để biết thêm chi tiết về việc hủy bỏ.

00:32:14.000 --> 00:32:15.000
Bây giờ cho các phương pháp hay nhất.

00:32:15.000 --> 00:32:24.000
Sử dụng StoreKit APIs cho phép bạn trình bày trải nghiệm nhất quán giúp mọi người quản lý hoặc hủy đăng ký của họ mà không cần rời khỏi ứng dụng của bạn.

00:32:24.000 --> 00:32:30.000
Cân nhắc tạo ra trải nghiệm theo ngữ cảnh có thương hiệu để bổ sung cho giao diện người dùng quản lý do hệ thống cung cấp.

00:32:30.000 --> 00:32:41.000
Ví dụ: bạn có thể cung cấp một cấp cao cấp phổ biến để cung cấp các đề xuất được cá nhân hóa hoặc các gói thay thế dựa trên sở thích hoặc cách sử dụng của khách hàng.

00:32:41.000 --> 00:32:49.000
Và xem lại trải nghiệm quản lý đăng ký tổng thể của bạn vì nó liên quan đến hành trình hỗ trợ khách hàng trên tất cả các kênh khác nhau của bạn.

00:32:49.000 --> 00:32:56.000
Bây giờ, chúng ta hãy xem một giao diện người dùng Quản lý Đăng ký mẫu trong ứng dụng của bạn.

00:32:56.000 --> 00:32:59.000
Để người dùng quản lý đăng ký của họ.

00:32:59.000 --> 00:33:08.000
Và khi khách hàng nhấn vào nút này, App Store sẽ hiển thị trang Quản lý Đăng ký hiện có với đăng ký hiện đang hoạt động và các tùy chọn gia hạn.

00:33:08.000 --> 00:33:19.000
Đây là cùng một chế độ xem mà khách hàng quen thuộc khi họ truy cập Quản lý đăng ký trong Cài đặt tài khoản trong App Store, nơi họ có thể xem, nâng cấp, hạ cấp hoặc hủy đăng ký của mình.

00:33:19.000 --> 00:33:27.000
Bây giờ, nếu khách hàng chọn hủy đăng ký của họ, họ sẽ thấy màn hình xác nhận với chi tiết hủy và ngày hết hạn dịch vụ.

00:33:27.000 --> 00:33:38.000
Và đối với bất kỳ hành động nào mà người dùng có thể thực hiện trên trang này, bạn sẽ nhận được Thông báo Máy chủ App Store và ứng dụng của bạn sẽ được thông báo nếu bạn đã triển khai khung StoreKit 2.

00:33:38.000 --> 00:33:46.000
Vì vậy, với các công cụ hỗ trợ khách hàng mới mà tôi đã đề cập hôm nay, hãy nói về lợi ích của việc cung cấp hỗ trợ bằng cách sử dụng các API này.

00:33:46.000 --> 00:33:54.000
Giờ đây, bạn có thể cải thiện trải nghiệm khách hàng tổng thể của mình bằng cách cung cấp hỗ trợ theo ngữ cảnh và liền mạch cho các giao dịch mua trong ứng dụng ngay trong ứng dụng.

00:33:54.000 --> 00:34:05.000
Điều này làm tăng khả năng giữ chân tổng thể và cải thiện sự hài lòng của khách hàng dẫn đến mức độ tương tác cao hơn và cuối cùng là xếp hạng và đánh giá tích cực hơn cho ứng dụng của bạn.

00:34:05.000 --> 00:34:11.000
Bây giờ, tôi muốn mời đồng nghiệp Joe của tôi nói về việc xử lý hoàn tiền.

00:34:11.000 --> 00:34:18.000
Joe: Cảm ơn, Manjeet, vì đã cung cấp các phương pháp hay nhất và các trường hợp sử dụng cho các công cụ hỗ trợ khách hàng mới đã được ra mắt.

00:34:18.000 --> 00:34:23.000
Xin chào mọi người, tên tôi là Joe Mani, và tôi là quản lý chương trình tại App Store.

00:34:23.000 --> 00:34:34.000
Hoàn tiền là một chủ đề nhạy cảm và App Store đã tạo ra các công cụ để bạn hiểu tác động của việc hoàn tiền đối với các ứng dụng của mình và cách bạn có thể tận dụng các công cụ này để cải thiện trải nghiệm khách hàng của mình.

00:34:34.000 --> 00:34:41.000
Tôi muốn nhấn mạnh những lợi ích của việc sử dụng các công cụ này và cung cấp một thông điệp toàn diện xung quanh việc xử lý hoàn tiền.

00:34:41.000 --> 00:34:46.000
Năm vừa qua, chúng tôi đã tung ra hai công cụ mới có tác động đến việc hoàn tiền.

00:34:46.000 --> 00:34:51.000
Đầu tiên, hãy để chúng tôi thảo luận về startRefundRequest API.

00:34:51.000 --> 00:34:58.000
App Store đã Báo cáo Sự cố và Bộ phận Hỗ trợ của Apple đã thiết lập các đường dẫn để khách hàng yêu cầu hoàn lại tiền.

00:34:58.000 --> 00:35:09.000
Hiện tại trong iOS 15, App Store đã giới thiệu API startRefundRequest mới trong khuôn khổ StoreKit 2 để khách hàng yêu cầu hoàn lại tiền cho các giao dịch mua trong ứng dụng.

00:35:09.000 --> 00:35:13.000
Có nhiều lợi ích để bạn triển khai startRefundRequest API.

00:35:13.000 --> 00:35:19.000
Hầu hết các bạn đang nghe đều có một khách hàng đã yêu cầu hoàn lại tiền cho giao dịch mua trong ứng dụng của bạn.

00:35:19.000 --> 00:35:28.000
API startRefundRequest mới cho phép bạn cung cấp chức năng tương tự mà không cần phải chuyển hướng khách hàng và cung cấp hỗ trợ trong ứng dụng.

00:35:28.000 --> 00:35:38.000
Nếu bạn nhận thức được vấn đề tiềm ẩn với giao dịch mua trong ứng dụng của mình, bạn có thể sử dụng API này để giúp khách hàng khắc phục sự cố và giải quyết nhanh hơn.

00:35:38.000 --> 00:35:47.000
Trong iOS 15, App Store đã tạo hai thông báo bổ sung cụ thể để bạn có thể biết liệu khoản tiền hoàn lại đã được chấp thuận hay từ chối.

00:35:47.000 --> 00:35:54.000
Nếu việc hoàn tiền được chấp thuận, ứng dụng của bạn sẽ được thông báo và máy chủ của bạn nhận được thông báo HOÀN TIỀN từ App Store.

00:35:54.000 --> 00:35:59.000
Nếu việc hoàn tiền bị từ chối, máy chủ của bạn sẽ nhận được thông báo REFUND_DECLINED mới.

00:35:59.000 --> 00:36:06.000
Lưu ý rằng khách hàng sẽ phải sử dụng iOS 15 trở lên để sử dụng chức năng này.

00:36:06.000 --> 00:36:08.000
Hãy thảo luận về các phương pháp hay nhất.

00:36:08.000 --> 00:36:16.000
Lưu trữ ID giao dịch gốc và lưu ý rằng hầu hết các yêu cầu hoàn tiền xảy ra trong vòng 30 ngày kể từ ngày mua.

00:36:16.000 --> 00:36:27.000
Bạn có thể cung cấp tin nhắn trong ứng dụng được xây dựng tùy chỉnh tạo ra trải nghiệm khách hàng phù hợp ngay cả khi bạn có thể gặp tình huống khiến khách hàng thất vọng và yêu cầu hoàn lại tiền.

00:36:27.000 --> 00:36:33.000
Bạn có thể linh hoạt hiển thị thông tin theo ngữ cảnh về các giao dịch mua trước đây cho khách hàng.

00:36:33.000 --> 00:36:47.000
Khi khách hàng chọn một giao dịch để được hoàn tiền, bạn có thể gọi API hiển thị bảng yêu cầu hoàn tiền nơi khách hàng có thể chọn từ danh sách các mã lý do, phù hợp với những gì họ sẽ thấy trong Báo cáo sự cố của Apple.

00:36:47.000 --> 00:36:57.000
Đối với các đăng ký có thể tự động gia hạn, bạn có thể xác định các chiến lược duy trì để giữ cho khách hàng của mình tham gia vào ứng dụng của bạn vì việc hoàn lại tiền thành công sẽ hủy đăng ký.

00:36:57.000 --> 00:37:05.000
Bây giờ chúng ta đã xem xét startRefundRequest, hãy nói về những gì xảy ra sau đó và cách bạn có thể tham gia nhiều hơn.

00:37:05.000 --> 00:37:23.000
App Store đã giới thiệu một API máy chủ mới mang đến cho bạn cơ hội giúp thông báo và cải thiện quy trình hoàn tiền bằng cách gửi thông tin tiêu dùng cho Apple về giao dịch mua trong ứng dụng tiêu hao của khách hàng, chẳng hạn như liệu họ có tiêu thụ một mặt hàng trước khi yêu cầu hoàn lại tiền hay không.

00:37:23.000 --> 00:37:30.000
Ở mức cao, mỗi yêu cầu hoàn tiền sẽ thông qua hệ thống quyết định hoàn tiền của chúng tôi để đưa ra quyết định.

00:37:30.000 --> 00:37:39.000
Hệ thống quyết định hoàn tiền bao gồm thông tin về giao dịch đang được đề cập và các yếu tố khác như lịch sử mua hàng và hoàn tiền của khách hàng.

00:37:39.000 --> 00:37:45.000
Trước khi Apple đưa ra quyết định, App Store sẽ gửi cho máy chủ của bạn thông báo CONSUMPTION_REQUEST.

00:37:45.000 --> 00:37:53.000
Máy chủ của bạn gửi dữ liệu tiêu thụ trở lại App Store để phản hồi thông báo này, điều này có thể ảnh hưởng đến quyết định hoàn tiền.

00:37:53.000 --> 00:38:01.000
Tải trọng tiêu thụ bao gồm một số lĩnh vực và tôi muốn thảo luận về ba trong số các lĩnh vực chính ngày hôm nay.

00:38:01.000 --> 00:38:07.000
Với Tiêu dùng, bạn có thể dễ dàng cho chúng tôi biết liệu giao dịch mua trong ứng dụng đã được tiêu thụ đầy đủ, một phần hay chưa.

00:38:07.000 --> 00:38:18.000
Ví dụ: nếu ứng dụng của bạn có một nền tảng trao đổi có trao đổi hoặc nếu một ứng dụng trong ứng dụng đã được chuyển từ tài khoản này sang tài khoản khác, nó được coi là đã tiêu thụ.

00:38:18.000 --> 00:38:26.000
Với việc phân phối nội dung, bạn có thể đã gặp sự cố ngừng hoạt động hoặc không thể giao các giao dịch mua trong ứng dụng và bạn có thể muốn hoàn lại tiền cho khách hàng.

00:38:26.000 --> 00:38:29.000
Bây giờ bạn có thể chỉ cần cung cấp mặt hàng chưa được giao.

00:38:29.000 --> 00:38:46.000
Với appAccountToken, được ra mắt trong StoreKit 2, chúng tôi đang sử dụng định dạng UUID tiêu chuẩn được liên kết với tài khoản người dùng ứng dụng mà bạn tạo đang bắt đầu mua hàng và tiêu thụ nội dung để mua hàng, điều này có thể giúp xác định người bán lại.

00:38:46.000 --> 00:38:54.000
Đối với các phương pháp hay nhất, hầu hết các yêu cầu hoàn tiền xảy ra trong vòng 30 ngày, vì vậy hãy lưu trữ dữ liệu tiêu thụ cho các giao dịch của bạn cho phù hợp.

00:38:54.000 --> 00:39:03.000
Lưu trữ_transaction_ID gốc cho mỗi giao dịch mua trong ứng dụng tiêu hao để bạn có thể tìm thấy giao dịch mà Apple đang yêu cầu dữ liệu.

00:39:03.000 --> 00:39:12.000
Để đảm bảo Apple kết hợp dữ liệu của bạn để ra quyết định, hãy phản hồi trong vòng 12 giờ sau khi nhận được thông báo yêu cầu tiêu thụ.

00:39:12.000 --> 00:39:19.000
Vui lòng gửi tải trọng cập nhật trong vòng 12 giờ đó nếu có bất kỳ thay đổi nào sau yêu cầu ban đầu.

00:39:19.000 --> 00:39:26.000
Đảm bảo bạn đã nhận được sự đồng ý của khách hàng trước khi gửi dữ liệu tiêu thụ được yêu cầu đến App Store.

00:39:26.000 --> 00:39:35.000
Và cuối cùng, trong tải trọng tiêu thụ, tất cả các trường đều không bắt buộc và vui lòng xem lại tài liệu của Apple mà các trường nào có thể được đánh dấu là không được khai báo.

00:39:35.000 --> 00:39:40.000
Để tóm tắt phiên hôm nay, tôi muốn cung cấp một danh sách kiểm tra các hành động chính.

00:39:40.000 --> 00:39:53.000
Đối với các bước tiếp theo để áp dụng và triển khai các tính năng này, bạn có thể bắt đầu định cấu hình và cho phép máy chủ của mình nhận Thông báo Máy chủ App Store bằng cách nhập URL vào App Store Connect và bật Phiên bản 2 trong Sandbox.

00:39:53.000 --> 00:40:02.000
Đối với các công cụ hỗ trợ khách hàng của bạn, hãy tích hợp trong các kênh hỗ trợ hiện có của bạn, đó là hỗ trợ qua điện thoại, email, web hoặc trong ứng dụng.

00:40:02.000 --> 00:40:14.000
Đối với ứng dụng của bạn, hãy xác định các thay đổi của khách hàng trong iOS 15 với StoreKit 2 cần thiết để hỗ trợ startRefundRequest mới, isEligibleforIntroOffer và showManageSubcriptions API.

00:40:14.000 --> 00:40:28.000
Cuối cùng, hãy chắc chắn tận dụng các bản cập nhật thử nghiệm Sandbox để tận dụng tối đa ID Apple Sandbox của bạn, như thay đổi mặt tiền cửa hàng, xóa lịch sử mua hàng, hoàn lại tiền thử nghiệm và điều chỉnh tỷ lệ gia hạn đăng ký.

00:40:28.000 --> 23:59:59.000
Điều này kết thúc bài thuyết trình và cảm ơn bạn rất nhiều vì đã tham gia cùng chúng tôi hôm nay và tìm hiểu thêm về việc hỗ trợ khách hàng với StoreKit 2 và App Store Server API.

