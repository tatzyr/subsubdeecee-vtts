WEBVTT

00:00:00.000 --> 00:00:05.000
Deena Khattab: 안녕하세요, 저는 Apple Design 팀의 디자이너인 Deena Khattab입니다.

00:00:05.000 --> 00:00:09.000
나중에, 나는 내 동료 제니퍼와 매튜와 합류할 것이다.

00:00:09.000 --> 00:00:20.000
우리는 Apple Watch Series 7을 위한 디자인 과정에 대해 이야기하게 되어 정말 기쁘지만, 시작하기 전에 새로운 것을 빠르게 살펴봅시다.

00:00:20.000 --> 00:00:28.000
Apple Watch Series 7은 41mm와 45mm의 두 가지 새로운 크기로 제공됩니다.

00:00:28.000 --> 00:00:34.000
두 시계 모두 그 어느 때보다 더 큰 활성 콘텐츠 영역을 특징으로 한다.

00:00:34.000 --> 00:00:46.000
41mm는 176 x 215포인트이고, 45mm는 198 x 242포인트이다.

00:00:46.000 --> 00:00:55.000
Apple Watch Series 7의 디스플레이는 미묘한 랩어라운드 효과를 특징으로 하는 가장자리를 구부러진다.

00:00:55.000 --> 00:01:01.000
화면 주변의 베젤은 그 어느 때보다 얇고 눈에 잘 띄지 않는다.

00:01:01.000 --> 00:01:08.000
게다가, 화면은 이전 장치보다 모서리 반경이 더 크다.

00:01:08.000 --> 00:01:17.000
이러한 주요 하드웨어 차이점을 염두에 두고, 우리는 UI를 형성하기 위한 세 가지 유용한 디자인 원칙을 확인했습니다.

00:01:17.000 --> 00:01:21.000
시리즈 7은 우리가 본 것 중 가장 큰 콘텐츠 영역을 가지고 있다.

00:01:21.000 --> 00:01:30.000
우리는 향상된 유용성을 위해 추가 공간을 최대한 활용하기 위해 UI 구성 요소를 확대했습니다.

00:01:30.000 --> 00:01:38.000
우리는 시계 앱에서 더 명확한 계층 구조를 만들기 위해 타이포그래피와 색상을 면밀히 조사했습니다.

00:01:38.000 --> 00:01:43.000
Apple Watch는 항상 가볍고 눈길을 수 있는 경험에 관한 것이었다.

00:01:43.000 --> 00:01:51.000
우리는 한 눈에 더 나은 장소 감각을 제공하기 위해 내비게이션과 길 찾기를 살펴보았다.

00:01:51.000 --> 00:01:59.000
요약하자면, Apple Watch Series 7용 앱은 더 크고, 더 선명하고, 더 눈에 띄어야 합니다.

00:01:59.000 --> 00:02:09.000
다음 섹션에서 Jenn은 업데이트된 UI 요소를 사용하여 자신의 앱에서 이러한 원칙을 구현하는 방법에 대해 이야기할 것입니다.

00:02:09.000 --> 00:02:14.000
제니퍼 패튼: 고마워, 디나. 레이아웃 여백부터 시작합시다.

00:02:14.000 --> 00:02:22.000
모서리가 너무 구부러져 있기 때문에, 콘텐츠가 들어오고 내려가서 모서리에 잘 맞아야 한다.

00:02:22.000 --> 00:02:29.000
상태 표시줄은 화면 하단의 더 높은 스크롤 클리어런스 마진과 일치하여 키가 커집니다.

00:02:29.000 --> 00:02:39.000
그리고 활성 디스플레이 영역과 하드웨어 케이스 사이의 더 작은 베젤로, 우리는 화면 가장자리에 가까운 콘텐츠에 대해 식별하고 있었다.

00:02:39.000 --> 00:02:47.000
레이아웃 마진은 시리즈 7에서 관대하여 콘텐츠에 숨을 쉴 수 있는 충분한 공간을 제공한다.

00:02:47.000 --> 00:02:49.000
매튜 쿤스: 고마워, 제니퍼.

00:02:49.000 --> 00:02:51.000
안녕, 내 이름은 매튜야.

00:02:51.000 --> 00:02:58.000
watchOS에서 마진을 효과적으로 사용할 수 있는 방법의 예로 주식을 사용합시다.

00:02:58.000 --> 00:03:04.000
먼저, 이미 적용된 여백을 제거합시다.

00:03:04.000 --> 00:03:08.000
보시다시피, 이 레이아웃에는 몇 가지 문제가 있습니다.

00:03:08.000 --> 00:03:11.000
좀 더 자세히 살펴보자.

00:03:11.000 --> 00:03:16.000
첫 번째 문제는 현재 주가에 대한 텍스트이다.

00:03:16.000 --> 00:03:19.000
그것은 디스플레이의 가장자리에 매우 가깝다.

00:03:19.000 --> 00:03:25.000
이것은 Apple Watch Series 7의 랩어라운드 디스플레이에 문제가 될 수 있습니다.

00:03:25.000 --> 00:03:33.000
두 번째 문제는 디스플레이 모서리에 의해 잘린 나스닥 텍스트이다.

00:03:33.000 --> 00:03:39.000
게다가, 우리는 내비게이션 바의 앞 가장자리에 대한 텍스트 정렬을 잃었습니다.

00:03:39.000 --> 00:03:44.000
SwiftUI 코드로 이러한 문제를 어떻게 해결할 수 있는지 봅시다.

00:03:44.000 --> 00:03:49.000
여기 간단한 VStack인 주식 레이아웃의 스니펫이 있습니다.

00:03:49.000 --> 00:03:55.000
먼저, .scenePadding 수정자를 사용하여 현재 가격 보기의 레이아웃을 조정할 수 있습니다.

00:03:55.000 --> 00:04:00.000
이 수정자는 레이아웃 여백에 대한 시스템 정의 패딩을 적용합니다.

00:04:00.000 --> 00:04:06.000
보시다시피, 이것은 현재 가격 보기의 레이아웃을 해결합니다.

00:04:06.000 --> 00:04:13.000
아래의 나스닥 텍스트에 동일한 .scenePadding 수정자를 사용합시다.

00:04:13.000 --> 00:04:22.000
그리고 다시 한번, 이것은 우리의 레이아웃 문제를 해결하고 우리가 찾고 있던 정렬을 복원합니다.

00:04:22.000 --> 00:04:27.000
우리가 날짜 차트에 수정자를 적용하지 않았다는 점에 유의하세요.

00:04:27.000 --> 00:04:33.000
이 차트와 같은 일부 콘텐츠는 디스플레이의 가장자리로 가기에 완벽하게 좋습니다.

00:04:33.000 --> 00:04:44.000
디스플레이 가장자리에 의해 왜곡되거나 잘릴 수 있는 텍스트 콘텐츠에 대해서만 .scenePadding 수정자를 사용하여 보존하십시오.

00:04:44.000 --> 00:04:56.000
제니퍼: 우리는 올해 앱을 더 눈에 잘 띄게 만들고, 더 나은 장소 감각을 제공하며, 앱 내에서 더 명확한 계층 구조를 확립하기 위해 watchOS에 큰 타이틀을 도입했습니다.

00:04:56.000 --> 00:05:02.000
스크롤 테이블 보기는 iOS의 큰 제목과 비슷한 큰 제목을 얻을 것이다.

00:05:02.000 --> 00:05:06.000
제목은 스크롤의 상태 표시줄로 전환됩니다.

00:05:06.000 --> 00:05:10.000
루트 레벨과 서브뷰는 큰 제목을 얻을 것이다.

00:05:10.000 --> 00:05:20.000
설정은 명확한 장소 감각을 정의하기 위해 앱에서 얼마나 큰 타이틀을 사용할 수 있는지에 대한 좋은 예입니다.

00:05:20.000 --> 00:05:39.000
스크롤하지 않는 고정 보기에서, 우리는 뷰의 제목을 콘텐츠 영역과 상태 표시줄로 가져오거나, 필요하지 않은 곳에서 완전히 제거하여 뒤로 버튼 탐색에서 뷰의 제목을 분리할 수 있는 타이머와 같은 기회를 모색했습니다.

00:05:39.000 --> 00:05:50.000
우리는 또한 이 세계 시계 세부 예시와 같이 상태 표시줄이 여전히 제목 정보를 위한 최고의 장소인 고정 보기를 가지고 있습니다.

00:05:50.000 --> 00:06:03.000
큰 타이틀은 특히 시리즈 7에서 사용할 수 있는 더 큰 활성 콘텐츠 영역에서 영감을 받았지만 이전 40mm 및 44mm 장치에서도 잘 작동합니다.

00:06:03.000 --> 00:06:08.000
매튜: SwiftUI를 사용하면 앱에 큰 타이틀을 쉽게 구성할 수 있습니다.

00:06:08.000 --> 00:06:18.000
기본적으로 watchOS 8에서는 모든 내비게이션 타이틀이 크고 응용 프로그램 악센트 색상으로 착색됩니다.

00:06:18.000 --> 00:06:27.000
특정 보기에서 큰 제목을 원하지 않는다면, .navigationBarTitleDisplayMode 수정자를 사용할 수 있습니다.

00:06:27.000 --> 00:06:39.000
이 수정자를 적용한 후, 계층 구조의 후속 보기는 위의 보기의 표시 모드를 상속합니다.

00:06:39.000 --> 00:06:47.000
제니퍼: 색상은 길 찾기, 정보 계층 구조 및 앱의 성격을 알리는 데 도움을 주기 위한 것입니다.

00:06:47.000 --> 00:06:54.000
이 마음챙김 예시에서, 청록색은 앱의 정체성과 경험을 강화한다.

00:06:54.000 --> 00:07:05.000
우리는 시스템 틸을 앱 키 색상으로 사용하고 더 음소거된 효과를 만들기 위해 시스템 그레이 플래터 배경색을 뒤로 밀었습니다.

00:07:05.000 --> 00:07:08.000
목록 보기 앱은 시계에서 일반적이다.

00:07:08.000 --> 00:07:19.000
이 메일 예에서, 파란색 배경을 사용하면 비슷한 탐색 패턴을 사용하는 다른 앱이 아닌 메일 앱에 있다는 것을 강요합니다.

00:07:19.000 --> 00:07:28.000
이 예에서, 밝은 노란색 플래터는 운동과 같은 다른 회전목마 내비게이션 앱과 팁을 시각적으로 차별화합니다.

00:07:28.000 --> 00:07:35.000
그것은 또한 우리의 모든 플랫폼에서 팁 경험의 연속성을 강화한다.

00:07:35.000 --> 00:07:40.000
매튜: 자산 카탈로그에서 애플리케이션의 악센트 색상을 구성할 수 있습니다.

00:07:40.000 --> 00:07:46.000
여기서 색상을 설정한 후, 모든 내비게이션 바는 자동으로 이 색상을 사용합니다.

00:07:46.000 --> 00:07:53.000
악센트 색상 구성에 대한 자세한 정보는 개발자 문서에서 찾을 수 있습니다.

00:07:53.000 --> 00:08:00.000
또한, .accentColor 수정자를 사용하여 SwiftUI에서 색상을 쉽게 사용할 수 있습니다.

00:08:00.000 --> 00:08:09.000
메일에서, 우리는 listItemTint를 애플리케이션의 악센트 색상으로 30% 불투명도로 설정했습니다.

00:08:09.000 --> 00:08:17.000
제니퍼: 우리는 또한 시리즈 7 시계를 디자인하는 동안 버튼과 버튼 모양을 면밀히 살펴보았다.

00:08:17.000 --> 00:08:19.000
현재 버튼 시스템은 이렇게 생겼다.

00:08:19.000 --> 00:08:30.000
스크롤 뷰에서 볼 수 있는 둥근 직사각형 버튼이 있으며, 스크롤하지 않는 고정 뷰에서만 볼 수 있는 고정된 버튼 세트가 있습니다.

00:08:30.000 --> 00:08:37.000
그것들은 화면 하단에 고정되어 있으며 화면의 모양을 보완하기 위한 것이다.

00:08:37.000 --> 00:08:44.000
시리즈 7의 경우, 우리는 스크롤과 비스크롤 버튼의 동일한 기본 시스템을 확장했습니다.

00:08:44.000 --> 00:08:57.000
우리는 일반적인 보조 버튼 색 구성표로 단순화했고, 나란히 버튼은 분할 로젠지 모양에서 나란히 알약 모양으로 전환하고 있다.

00:08:57.000 --> 00:09:01.000
다음은 업데이트된 앱의 버튼의 몇 가지 예입니다.

00:09:01.000 --> 00:09:11.000
왼쪽의 알람 목록의 기본 스크롤 버튼과 오른쪽의 UIPickerView의 나란히 버튼.

00:09:11.000 --> 00:09:15.000
이 고정된 버튼 모양을 자세히 살펴봅시다.

00:09:15.000 --> 00:09:21.000
우리는 시리즈 7의 버튼 모양을 만드는 데 큰 주의를 기울였다.

00:09:21.000 --> 00:09:26.000
다음은 간단한 알약 모양을 사용하는 것이 어떻게 생겼는지에 대한 예입니다.

00:09:26.000 --> 00:09:33.000
하단에 있는 버튼의 평평한 평면이 어떻게 디스플레이의 곡률과 긴장감을 만드는지 보세요?

00:09:33.000 --> 00:09:37.000
그리고 여기 만들어진 단추 모양이 있습니다.

00:09:37.000 --> 00:09:39.000
내가 다시 할게.

00:09:39.000 --> 00:09:53.000
변화는 미묘하지만, 디스플레이 자체의 모양에서 버튼의 모양을 도출하면 이러한 버튼이 화면 하단에 고정되어 시계의 하드웨어와 조화를 이룰 수 있습니다.

00:09:53.000 --> 00:09:58.000
업데이트된 버튼은 프리 시리즈 7 장치로도 돌아갈 것이다.

00:09:58.000 --> 00:10:07.000
버튼의 높이는 동일하게 유지되므로, 기존 UI에 이러한 새로운 버튼을 채택하기 위해 레이아웃을 업데이트할 필요가 없습니다.

00:10:07.000 --> 00:10:14.000
매튜: 새로운 Apple Watch Series 7 룩으로 SwiftUI의 모든 버튼을 업데이트했습니다.

00:10:14.000 --> 00:10:20.000
대부분의 경우, 이것은 자동으로 발생하며 앱에서 변경이 필요하지 않습니다.

00:10:20.000 --> 00:10:25.000
그렇긴 하지만, 몇 가지를 염두에 두는 것이 중요하다.

00:10:25.000 --> 00:10:34.000
여기에서 볼 수 있는 취소 버튼과 같은 버튼을 정의할 때, SwiftUI는 당신을 대신하여 몇 가지 기본 수정자를 적용하고 있습니다.

00:10:34.000 --> 00:10:44.000
watchOS의 버튼은 기본적으로 테두리 버튼 스타일과 자동 테두리 모양을 사용합니다.

00:10:44.000 --> 00:10:49.000
자동 테두리 모양은 문맥에 따라 테두리 모양이 바뀌는 것을 의미합니다.

00:10:49.000 --> 00:10:53.000
스크롤 뷰 밖에서, 모양은 캡슐이다.

00:10:53.000 --> 00:10:58.000
예를 들어, 이 취소 및 시작 버튼.

00:10:58.000 --> 00:11:02.000
스크롤 보기에서, 버튼은 둥근 직사각형 모양을 가지고 있다.

00:11:02.000 --> 00:11:06.000
예를 들어, 알람 추가 버튼.

00:11:06.000 --> 00:11:11.000
게다가, 테두리가 있는 두드러진이라고 불리는 대체 버튼 스타일이 있다.

00:11:11.000 --> 00:11:17.000
이 스타일은 우리가 알람에서 하는 버튼에 응용 프로그램 악센트 색상을 적용합니다.

00:11:17.000 --> 00:11:25.000
이것은 버튼에 당신의 관심을 즉시 끄는 더 뚜렷한 모습을 제공합니다.

00:11:25.000 --> 00:11:30.000
디나: 다음 섹션에서, 우리는 타이포그래피 업데이트에 대해 논의할 것입니다.

00:11:30.000 --> 00:11:44.000
시리즈 7은 시리즈 6과 동일한 기본 유형 크기를 사용합니다: 40mm와 41mm의 경우 대형, 44mm와 45mm의 경우 엑스트라 라지 사이즈입니다.

00:11:44.000 --> 00:11:51.000
결과적으로, 우리는 이전 장치보다 더 많은 문자 수를 얻는다.

00:11:51.000 --> 00:11:57.000
우리는 또한 세 가지 더 큰 유형 크기를 추가하여 접근성을 개선하기 위해 유형을 사용했습니다.

00:11:57.000 --> 00:12:02.000
여기 기본 유형 크기의 메일 앱이 있습니다: 엑스트라 라지.

00:12:02.000 --> 00:12:10.000
그리고 여기 새로운 AX1, AX2, AX3에 있습니다.

00:12:10.000 --> 00:12:17.000
시계에 더 큰 유형을 사용하고자 하는 사람들을 돕기 위해, 우리는 스마트 유형 제안을 추가했습니다.

00:12:17.000 --> 00:12:28.000
설정 흐름에서, 휴대폰은 이제 큰 유형 설정이 구현되었는지 여부를 식별하고 새 시계에 유사한 유형 크기를 제안합니다.

00:12:28.000 --> 00:12:34.000
이 기능을 사용하면 처음부터 원하는 유형 크기를 더 쉽게 사용할 수 있습니다.

00:12:34.000 --> 00:12:41.000
타이포그래피에 초점을 맞추면서, SF 기호로 텍스트 라벨을 보완하는 것이 좋습니다.

00:12:41.000 --> 00:12:52.000
목록 보기 기반 탐색이 있는 앱의 경우, 메일 및 전화와 같은 애플리케이션의 악센트 색상에 설명된 기호를 사용하는 것이 좋습니다.

00:12:52.000 --> 00:12:58.000
이것은 크로스 플랫폼 일관성과 접근성에 도움이 된다.

00:12:58.000 --> 00:13:04.000
가능한 경우 플랫폼 전반에 걸쳐 심볼 스타일과 색상을 정렬하세요.

00:13:04.000 --> 00:13:12.000
SF 심볼에 대한 자세한 내용은 WWDC21에서 이 회담을 확인하세요.

00:13:12.000 --> 00:13:20.000
다음으로, 우리는 Apple Watch Series 7의 새로운 키보드와 텍스트 입력 기능을 강조할 것입니다.

00:13:20.000 --> 00:13:26.000
더 큰 활성 화면 영역 때문에, 우리는 전체 키보드를 추가했다.

00:13:26.000 --> 00:13:32.000
시계를 위해 특별히 설계된 이 키보드의 경우, 우리는 키 주위에 테두리를 그리지 않습니다.

00:13:32.000 --> 00:13:39.000
이것은 탭 대상을 놓칠 수 있다는 느낌을 피하면서 스와이프하여 타이핑하는 것을 장려합니다.

00:13:39.000 --> 00:13:48.000
타이핑을 위한 사용 가능한 공간을 극대화하기 위해, 우리는 키보드에서 텍스트 필드로 삭제 키를 꺼냈다.

00:13:48.000 --> 00:14:00.000
또한, 키보드를 사용하면 비밀번호 및 이중 인증과 같은 특정 사용 사례에 대한 자동 완성 유형을 사용자 정의할 수 있습니다.

00:14:00.000 --> 00:14:05.000
키보드 지원과 함께, 우리는 텍스트 입력 기능을 개선했습니다.

00:14:05.000 --> 00:14:11.000
왼쪽과 오른쪽 액세서리는 SF 기호를 사용하여 사용자 정의할 수 있습니다.

00:14:11.000 --> 00:14:20.000
탭 가능성을 강조하기 위해 두 기호 모두에 응용 프로그램의 악센트 색상을 사용하는 것이 좋습니다.

00:14:20.000 --> 00:14:27.000
입력 필드 자리 표시자 텍스트와 제안된 목록 제목에 설명 단어를 사용하세요.

00:14:27.000 --> 00:14:40.000
키보드와 텍스트 입력에 대한 자세한 정보와 응용 프로그램에서 가장 잘 사용하는 방법은 이 WWDC21 회담을 확인하세요.

00:14:40.000 --> 00:14:52.000
우리는 장면 패딩, 자동 버튼 모양 및 계층적 탐색을 통해 새로운 디스플레이의 잠재력을 최대한 활용하는 방법을 보여주었습니다.

00:14:52.000 --> 23:59:59.000
시리즈 7 디자인에 대한 더 많은 리소스를 보려면 WWDC21의 "watchOS 8의 새로운 기능"과 "SwiftUI의 새로운 기능"을 확인하세요.

