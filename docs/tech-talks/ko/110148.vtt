WEBVTT

00:00:01.000 --> 00:00:07.000
존 데이비스: 안녕하세요, 저는 사파리와 웹킷 팀의 웹 기술 전도사인 존 데이비스입니다.

00:00:07.000 --> 00:00:13.000
iOS용 Safari 확장 프로그램을 구축하고 배포하는 방법에 대한 가이드가 되어 기쁩니다.

00:00:13.000 --> 00:00:16.000
이제, iOS를 위한 몇 가지 다른 유형의 확장 프로그램이 있습니다.

00:00:16.000 --> 00:00:25.000
우리는 몇 년 동안 iOS에 콘텐츠 차단기가 있었고, 그것은 리소스 로드를 차단하는 강력한 규칙을 구성할 수 있는 확장 유형입니다.

00:00:25.000 --> 00:00:28.000
하지만 저는 사파리 웹 확장 프로그램에 대해 말씀드리기 위해 왔습니다.

00:00:28.000 --> 00:00:36.000
그것들은 작년에 macOS Big Sur에서 소개되었고 이번 가을에 우리는 그것들을 iOS 15와 iPadOS 15로 가져왔다.

00:00:36.000 --> 00:00:44.000
그것은 다른 브라우저에서 작동하는 웹 기술을 사용하는 확장의 일종이며, 우리 사용자들은 그것들을 사랑하고 있다.

00:00:44.000 --> 00:00:49.000
그것은 App Store에서 가장 인기 있는 카테고리이며, 다른 앱과 마찬가지로 설치가 쉽습니다.

00:00:49.000 --> 00:00:54.000
그리고 그것은 사파리 웹 확장 프로그램이 앱과 함께 배포되기 때문이다.

00:00:54.000 --> 00:00:58.000
그리고 그것은 당신이 App Store에 있는 것의 이점을 얻는다는 것을 의미합니다.

00:00:58.000 --> 00:01:12.000
사용자는 확장 프로그램을 발견할 수 있으며, 확장 프로그램을 쉽게 판매할 수 있습니다. 인앱 결제와 같은 강력한 기능을 활용하여 확장 프로그램의 고급 기능을 잠금 해제하거나 TestFlight를 사용하여 베타 프로그램을 실행할 수도 있습니다.

00:01:12.000 --> 00:01:18.000
하지만 아마도 당신은 "그건 다 괜찮고 좋아요, 존, 하지만 저는 앱 개발자가 아니라 웹 개발자입니다."라고 말하고 있을 것입니다.

00:01:18.000 --> 00:01:21.000
음, 나도! 그리고 그들은 나에게 너의 가이드가 되어달라고 부탁했어.

00:01:21.000 --> 00:01:27.000
그래서 저는 당신이 Xcode를 배우는 것을 돕기 위해 여기에 있으며, 우리는 처음부터 새로운 프로젝트를 구축할 것입니다.

00:01:27.000 --> 00:01:38.000
또한 사파리의 개인 정보 보호 권한 모델과 앱 검토 과정을 통해 항해하는 몇 가지 팁과 함께 확장 프로그램을 제출하는 방법에 대해 다룰 것입니다.

00:01:38.000 --> 00:01:42.000
그러니 Xcode로 작업을 시작합시다.

00:01:42.000 --> 00:01:47.000
그리고 그렇게 하려면, App Store에서 다운로드하여 설치해야 합니다.

00:01:47.000 --> 00:01:53.000
나는 App Store를 시작할 것이고, 검색에서 "Xcode"를 입력할 것이고 그것은 바로 나타난다.

00:01:53.000 --> 00:01:57.000
그런 다음 가져오기 버튼을 클릭한 다음 설치를 클릭하기만 하면 됩니다.

00:01:57.000 --> 00:02:05.000
이제, 시간이 좀 걸릴 상당한 양의 다운로드이지만, 실행할 수 있게 되면, Xcode는 명령줄 도구를 설치하라는 메시지를 표시할 것입니다.

00:02:05.000 --> 00:02:12.000
설치를 건너뛰었다면, 나중에 터미널의 명령줄에서 쉽게 할 수 있습니다.

00:02:12.000 --> 00:02:19.000
"Xcode-select"를 입력하고 설치 플래그를 추가하기만 하면 설치 프로세스가 시작됩니다.

00:02:19.000 --> 00:02:31.000
이제, 제 환경은 갈 준비가 되었기 때문에, 지금은 이 명령을 실행하지 않을 것이지만, 사파리 웹 확장 변환기라는 중요한 도구가 포함되어 있기 때문에 설치했는지 확인하고 싶을 것입니다.

00:02:31.000 --> 00:02:41.000
다른 브라우저용 웹 확장 프로그램을 작성했거나 iOS에서 Safari를 지원하여 업그레이드하려는 macOS의 Safari용 웹 확장 프로그램을 작성한 경우 유용합니다.

00:02:41.000 --> 00:02:53.000
이제 내 문서 폴더에 간단한 데모 웹 확장 프로그램이 있고 이 hello-world 확장 프로그램은 다른 브라우저용으로 작성되었으며, 팝업에 "Hello World" 메시지를 표시합니다.

00:02:53.000 --> 00:02:57.000
이제 변환기 도구를 사용하여 iOS에서 작동하도록 업그레이드할 수 있습니다.

00:02:57.000 --> 00:03:03.000
터미널에서 Xcode에서와 같이 "xc"를 입력하기만 하면 됩니다. 그러면 "xcrun"이 됩니다.

00:03:03.000 --> 00:03:08.000
그리고 "safari-web-extension-converter"와 프로젝트로 가는 길.

00:03:08.000 --> 00:03:14.000
macOS에서 Safari용으로 작성된 확장 프로그램이 있다면, 변환기 도구를 사용하여 업그레이드할 수도 있습니다.

00:03:14.000 --> 00:03:24.000
"Xcrun safari-web-extension-converter"를 입력하고 재구축 프로젝트 플래그와 macOS 확장 경로를 추가하기만 하면 됩니다.

00:03:24.000 --> 00:03:33.000
하지만 Hello World 확장 프로그램에서 실행할 때 변환기 도구가 실제로 무엇을 하는지 봅시다.

00:03:33.000 --> 00:03:36.000
그리고 Return을 누르면, 그 과정이 시작됩니다.

00:03:36.000 --> 00:03:44.000
그리고 그것이 실제로 하고 있는 것은 우리의 확장 프로그램을 iOS와 macOS용으로 컴파일하고 실행할 수 있는 앱 프로젝트로 감싸는 것이다.

00:03:44.000 --> 00:03:53.000
이제, 잠시 터미널로 다시 전환하면서, iOS 확장 프로그램에 영구적이지 않은 배경 페이지가 필요하다는 것을 보여주는 경고가 있는 이 메모를 지적하고 싶습니다.

00:03:53.000 --> 00:04:02.000
이것은 기본적으로 확장 프로그램이 iOS에서 작동하는지 확인하기 위해 확인해야 할 일의 할 일 목록을 제공하기 때문에 실제로 정말 훌륭합니다.

00:04:02.000 --> 00:04:04.000
Xcode로 돌아가자.

00:04:04.000 --> 00:04:06.000
이 확장은 거의 준비되었다.

00:04:06.000 --> 00:04:11.000
백그라운드 스크립트는 이미 비영구적인 방식으로 실행되도록 설정되어 있다.

00:04:11.000 --> 00:04:14.000
우리는 사파리에게 그런 식으로 실행하라고 말해야 한다.

00:04:14.000 --> 00:04:21.000
그래서 이것을 iOS에서 작동시키기 위해 내가 해야 할 일은 매니페스트 파일을 편집하는 것이다.

00:04:21.000 --> 00:04:30.000
그리고 백그라운드 섹션에서, 나는 false 값으로 영구 키를 추가할 것이다.

00:04:30.000 --> 00:04:31.000
그리고 그게 다야!

00:04:31.000 --> 00:04:34.000
이것을 시뮬레이터에서 실행해 봅시다.

00:04:34.000 --> 00:04:38.000
나는 빌드 타겟 메뉴를 사용하고 iPhone 13 Pro를 선택할 것이다.

00:04:38.000 --> 00:04:46.000
이제, 저는 이미 많은 시뮬레이터를 설치했지만, 테스트하고 싶은 시뮬레이터를 다운로드하려면 추가 시뮬레이터를 사용해야 할 수도 있습니다.

00:04:46.000 --> 00:04:52.000
그래서 나는 iPhone 13 Pro를 선택하고 빌드 및 실행 버튼을 클릭할 것이다; 재생 버튼처럼 보이는 것.

00:04:52.000 --> 00:04:55.000
그리고 이것은 우리의 앱을 만들고 시뮬레이터에서 실행할 것이다.

00:04:55.000 --> 00:04:58.000
상태 표시줄의 오른쪽 상단에서 상태를 볼 수 있습니다.

00:04:58.000 --> 00:05:07.000
이제 시뮬레이터로 전환하면 앱이 설치되고 실행될 때까지 기다려야 합니다.

00:05:07.000 --> 00:05:24.000
일단 실행되면, 설정 앱으로 전환하고, 사파리 섹션을 찾고, 확장 프로그램을 탭한 다음, Hello World 확장 프로그램을 켤 수 있습니다.

00:05:24.000 --> 00:05:26.000
이제 우리는 사파리에서 시도해 볼 수 있어.

00:05:26.000 --> 00:05:30.000
사파리를 실행하고 Aa 메뉴를 탭하세요.

00:05:30.000 --> 00:05:35.000
거기서, 당신은 Hello World 확장 프로그램을 찾을 수 있고, 나는 그것을 탭할 수 있고, 허가를 요청하는 메시지가 표시됩니다.

00:05:35.000 --> 00:05:39.000
나중에 그것에 대해 더 이야기하겠지만, 지금은 하루 동안 허용을 선택할 것이다.

00:05:39.000 --> 00:05:40.000
그리고 여기 우리가 간다.

00:05:40.000 --> 00:05:43.000
"안녕하세요 세계!" 팝업 메시지.

00:05:43.000 --> 00:05:49.000
그리고 그것은 당신이 다른 브라우저를 위해 작성된 웹 확장 프로그램을 변환하는 것이 얼마나 쉬운지입니다.

00:05:49.000 --> 00:05:59.000
그래서 나는 오픈 그래프 메타데이터의 미리보기를 만드는 프로젝트에 대한 아이디어가 있었다; 트위터와 같은 소셜 미디어 사이트에서 미리보기를 보여주는 데 사용되는 것과 동일한 메타데이터.

00:05:59.000 --> 00:06:04.000
당신은 이 멋진 이미지, 제목, 그리고 웹 페이지에 대한 설명을 얻을 수 있습니다.

00:06:04.000 --> 00:06:08.000
그래서, 저는 팝업을 사용하여 그 데이터를 미리 볼 수 있는 확장 프로그램을 만들고 싶습니다.

00:06:08.000 --> 00:06:13.000
그래서 그게 우리가 오늘 만들 거야.

00:06:13.000 --> 00:06:18.000
그러니 Xcode에서 새로운 프로젝트를 만드는 것으로 시작합시다.

00:06:18.000 --> 00:06:27.000
멀티플랫폼에서 사파리 확장 앱을 선택하고 다음을 클릭하세요.

00:06:27.000 --> 00:06:32.000
제품 이름을 위해 나는 "Open Graph Preview"를 사용할 것이다.

00:06:32.000 --> 00:06:38.000
그것은 이미 내 팀을 채웠고 역 도메인 규칙을 사용하는 조직 식별자를 가지고 있다.

00:06:38.000 --> 00:06:43.000
나는 그 언어를 스위프트로 남겨두고 다음을 클릭할 것이다.

00:06:43.000 --> 00:06:58.000
이제 프로젝트를 저장할 장소를 요청하고 있습니다 -- 데스크톱은 잘 작동할 것입니다 -- 그리고 저는 "Mac에서 Git 저장소 만들기"를 활성화된 상태로 둘 것입니다 -- 저는 버전 제어가 내장되어 있는 것을 좋아합니다 -- 그리고 생성을 클릭할 것입니다.

00:06:58.000 --> 00:07:02.000
그리고 이것은 템플릿에서 우리를 위한 프로젝트를 생성할 것이다.

00:07:02.000 --> 00:07:09.000
이제, 더 나아가기 전에, Xcode에 대한 간략한 개요를 드리겠습니다.

00:07:09.000 --> 00:07:18.000
창의 왼쪽에는 당신을 위해 조직된 프로젝트의 모든 자원이 있는 내비게이션 사이드바가 있습니다.

00:07:18.000 --> 00:07:29.000
중앙에는 네비게이터 사이드바에서 선택한 파일의 기본 편집기가 있으며 오른쪽에는 편집 중인 파일에 따라 변경되는 인스펙터 사이드바가 있습니다.

00:07:29.000 --> 00:07:38.000
우리는 검사관 사이드바가 필요하지 않을 거야. 그래서 나는 우리가 작업할 수 있는 공간이 조금 더 있도록 그것을 숨길 거야.

00:07:38.000 --> 00:07:46.000
이제 새로운 사파리 웹 확장 프로젝트를 구성하는 파일을 살펴보고, 네비게이터 사이드바 상단에 프로젝트 파일이 있습니다.

00:07:46.000 --> 00:07:53.000
그것을 선택하면, 메인 편집기가 프로젝트의 구성 옵션 화면으로 열립니다.

00:07:53.000 --> 00:07:58.000
이제 그 아래에는 공유(앱) 폴더가 있으며, 여기에는 앱 실행 화면에 대한 리소스가 있습니다.

00:07:58.000 --> 00:08:05.000
리소스 폴더 옆에 있는 펼침 삼각형을 클릭하면, 웹 리소스일 뿐이라는 것을 알 수 있습니다.

00:08:05.000 --> 00:08:13.000
사실, 편집할 수 있는 HTML 파일일 뿐이며, 템플릿은 마크업, 스타일 및 스크립트를 쉽게 사용자 정의할 수 있도록 설정합니다.

00:08:13.000 --> 00:08:18.000
공유(확장) 폴더에는 확장을 위한 모든 리소스가 있습니다.

00:08:18.000 --> 00:08:27.000
그런 다음 리소스 폴더를 확장하면, 웹 확장자에 대한 모든 친숙한 파일을 볼 수 있습니다.

00:08:27.000 --> 00:08:34.000
매니페스트, 배경 스크립트, 콘텐츠 스크립트 및 팝업 파일이 여기에 있습니다.

00:08:34.000 --> 00:08:49.000
iOS(앱) 및 macOS(앱) 폴더에는 플랫폼별 리소스가 있으며, 그 아래에 iOS(확장) 및 macOS(확장) 폴더에는 해당 플랫폼에 대한 확장 전용 리소스가 있습니다.

00:08:49.000 --> 00:08:58.000
우리는 이 프로젝트를 위해 그들에 대해 걱정할 필요가 없기 때문에, 우리의 모든 작업이 공유(확장) 파일에 있을 것이기 때문에 나는 그것들을 치울 것이다.

00:08:58.000 --> 00:09:03.000
그리고 매니페스트 파일에서 시작합시다.

00:09:03.000 --> 00:09:14.000
그리고 템플릿이 프로젝트 정보에서 이름과 설명을 작성하는 것을 포함하여 시작하는 데 필요한 모든 것을 제공한다는 것을 알 수 있습니다.

00:09:14.000 --> 00:09:24.000
그 아래에, 그것은 몇 가지 기본 아이콘을 지정합니다; 당신은 당신의 프로젝트를 위해 당신만의 아이콘을 제공하는 것을 기억하고 싶을 것입니다.

00:09:24.000 --> 00:09:32.000
그리고 여기서, 그것은 배경 스크립트를 제공하며, 비지속적인 방식으로 배경 스크립트를 실행하도록 이미 설정되어 있다는 것을 알 수 있습니다.

00:09:32.000 --> 00:09:49.000
이제, 이 프로젝트의 경우, 우리는 실제로 배경 스크립트가 필요하지 않을 것이므로, 매니페스트 파일에서 이 항목을 제거하고 배경 스크립트 자체를 제거하고 휴지통으로 옮길 것입니다.

00:09:49.000 --> 00:09:57.000
다음으로, 콘텐츠 스크립트를 설정하고, 여기에 자바스크립트 파일과 주입할 수 있는 웹사이트의 도메인 패턴을 선언하는 곳입니다.

00:09:57.000 --> 00:10:11.000
이제, 저는 이 도구가 사용자가 사용하고자 하는 모든 사이트에서 사용할 수 있기를 원하므로, 실제로 모든 도메인과 일치할 수 있도록 "example.com"을 별표로 변경할 것입니다.

00:10:11.000 --> 00:10:25.000
그 아래에는 브라우저 작업 섹션을 선언하고 여기서 "팝업" 파일과 기본 도구 모음 아이콘 세트를 정의합니다. 다시 말하지만, 프로젝트를 위해 자신의 것을 제공하는 것을 기억하고 싶을 것입니다.

00:10:25.000 --> 00:10:31.000
그리고 마지막으로, 우리는 우리가 사용할 권한으로 activeTab을 추가할 권한 키를 가지고 있습니다.

00:10:31.000 --> 00:10:33.000
왜 activeTab이야?

00:10:33.000 --> 00:10:37.000
네가 물어봐서 정말 기뻐.

00:10:37.000 --> 00:10:42.000
확장이 사용할 수 있는 다른 권한에 대해 빠르게 살펴봅시다.

00:10:42.000 --> 00:10:47.000
사파리의 확장 모델은 사용자가 제어할 수 있도록 설정되어 있다.

00:10:47.000 --> 00:10:54.000
사용자 상호 작용 없이는 작동하지 않으므로, 사용자를 훈련시키는 데 도움을 주기 위해 처음 사용할 때 배지가 부착됩니다.

00:10:54.000 --> 00:11:04.000
권한은 웹사이트마다 부여되며, 이는 웹사이트 권한이 사용자가 제어할 수 있는 Safari의 설정과 기본 설정에 표시된다는 것을 의미합니다.

00:11:04.000 --> 00:11:08.000
이제, 볼 수 있는 네 가지 재미있는 허가가 있다.

00:11:08.000 --> 00:11:10.000
각각을 살펴보자.

00:11:10.000 --> 00:11:14.000
첫 번째 유형의 권한은 스크립트 주입 권한이다.

00:11:14.000 --> 00:11:25.000
이를 통해 일치 키에 나열된 웹사이트의 도메인을 기반으로 사용자가 탐색하는 페이지에 자바스크립트와 스타일 시트를 삽입할 수 있습니다.

00:11:25.000 --> 00:11:33.000
스크립트를 주입하는 확장은 사용자가 탐색하는 웹사이트가 일치 키의 패턴과 일치할 때 도구 모음에 배지가 부여됩니다.

00:11:33.000 --> 00:11:37.000
사용자는 확장 프로그램을 클릭하여 활성화해야 합니다.

00:11:37.000 --> 00:11:42.000
그리고 그것은 항상 거기에 앉아서 사용자가 활성화되기를 기다리고 있다.

00:11:42.000 --> 00:11:45.000
다음 유형의 권한은 암시적 권한이다.

00:11:45.000 --> 00:11:50.000
이제, 매니페스트 파일에 선언된 몇 가지 다른 유형의 암시적 권한이 있습니다.

00:11:50.000 --> 00:11:57.000
내가 여기서 강조한 첫 번째는 민감하지 않으며, 추가 권한이 필요하지 않습니다.

00:11:57.000 --> 00:12:06.000
그리고 두 번째 유형은 웹사이트 식별 데이터가 있기 때문에 민감한 권한이며, 이것은 우리가 사용자 개인 정보를 보호하는 방법 중 하나입니다.

00:12:06.000 --> 00:12:10.000
API를 호출하면, 데이터와 함께 콜백을 기다립니다.

00:12:10.000 --> 00:12:17.000
사용자는 확장 프로그램과 상호 작용한 후 메시지가 표시되며, 응답하는 데 약 1분이 걸릴 것이다.

00:12:17.000 --> 00:12:21.000
그들이 그것을 승인하면, 콜백이 이행되고 데이터가 다시 전달된다.

00:12:21.000 --> 00:12:26.000
그들이 이미 승인한 모든 것은 즉시 성취된다.

00:12:26.000 --> 00:12:34.000
다음 유형의 권한은 명시적 권한이며, 이는 확장 자체가 권한을 요청하기 때문에 명시적입니다.

00:12:34.000 --> 00:12:42.000
프롬프트는 항상 모달 방식으로 표시되며, 사용자가 아닌 권한을 요청하는 확장 자체이기 때문에 배지가 부여되지 않습니다.

00:12:42.000 --> 00:12:45.000
그리고 마지막 유형의 권한은 활성 탭 권한입니다.

00:12:45.000 --> 00:12:50.000
이것은 경고를 피하고 싶다면, 활성 탭이 답인 특별한 경우입니다.

00:12:50.000 --> 00:12:57.000
사용자는 도구 모음을 통해 확장 프로그램과 상호 작용해야 하며, Mac에서는 키보드 단축키나 상황에 맞는 메뉴를 사용할 수 있습니다.

00:12:57.000 --> 00:13:03.000
이것은 현재 탭의 현재 도메인에 대한 탭 권한을 부여합니다.

00:13:03.000 --> 00:13:07.000
그리고 그게 우리가 오늘 사용하고 싶은 거야.

00:13:07.000 --> 00:13:10.000
이제 콘텐츠 스크립트 코딩으로 넘어가자.

00:13:10.000 --> 00:13:14.000
그리고 콘텐츠 스크립트 템플릿은 메시지를 보내고 듣도록 설정되어 있습니다.

00:13:14.000 --> 00:13:19.000
이제, 우리는 콘텐츠 스크립트에서 메시지를 보낼 필요는 없지만, 하나를 들어야 할 것이다.

00:13:19.000 --> 00:13:34.000
콘텐츠 스크립트가 가장 먼저 필요한 것은 사용자가 탐색하고 있는 페이지에서 오픈 그래프 메타데이터를 가져오는 것이며, 간단한 DOM API를 사용하여 OG 제목, 설명 및 이미지에 적합한 메타 태그를 찾을 수 있습니다.

00:13:34.000 --> 00:13:47.000
이제 확장 프로그램이 작동하는 방식으로, 사용자는 확장 프로그램을 탭하여 팝업을 열고 현재 페이지의 오픈 그래프 데이터에 대한 콘텐츠 스크립트를 요청하는 팝업 스크립트의 작업이 될 것입니다.

00:13:47.000 --> 00:13:54.000
그래서 이 청취자 콜백에서, 우리는 마법의 단어가 있는 메시지를 듣고 싶습니다.

00:13:54.000 --> 00:14:01.000
이제, 우리가 마법의 단어 없이 메시지를 받는다면, 우리는 아무것도 하지 않을 것이다.

00:14:01.000 --> 00:14:03.000
사실, 우리는 여기서 무효로 돌아갈 것이다.

00:14:03.000 --> 00:14:10.000
하지만 우리가 마법의 단어로 메시지를 받으면, 우리는 메타 태그에서 데이터를 다시 보낼 것이다.

00:14:10.000 --> 00:14:13.000
그리고 그것이 우리가 콘텐츠 스크립트에서 해야 할 전부이다.

00:14:13.000 --> 00:14:19.000
그럼 팝업 설정으로 넘어가자, 그러면 팝업 HTML 파일에서 시작할 거야.

00:14:19.000 --> 00:14:25.000
스타일 시트를 볼 수 있으며 팝업을 위한 자바스크립트가 바로 여기에 포함되어 있습니다.

00:14:25.000 --> 00:14:27.000
그래서 웹 개발자들의 경우, 당신은 바로 집처럼 느껴질 것입니다.

00:14:27.000 --> 00:14:37.000
이제 이 파일의 마크업을 위해 제목과 설명 및 이미지 미리보기를 위한 자리 표시자 요소를 설정하기만 하면 됩니다.

00:14:37.000 --> 00:14:49.000
그래서 이제 우리는 제목, 설명, 그리고 이미지에 대한 자리 표시자 요소가 있습니다.

00:14:49.000 --> 00:14:55.000
다음으로, 팝업 스타일 시트를 약간 조정할 것입니다.

00:14:55.000 --> 00:15:04.000
여기, 모든 플랫폼에서 멋지게 보이도록 몇 가지 사소한 조정만 하면 됩니다.

00:15:04.000 --> 00:15:12.000
그리고 마지막으로, 공간을 채우고 종횡비를 유지하기 위해 이미지가 반응형 디자인 레이아웃을 설정하기만 하면 됩니다.

00:15:12.000 --> 00:15:24.000
마지막으로, 우리는 팝업 스크립트를 편집하여 확장의 핵심에 있으며, 먼저 팝업 HTML 파일에서 정의한 자리 표시자 요소에 대한 참조를 잡아야 합니다.

00:15:24.000 --> 00:15:32.000
다음으로, 우리는 콘텐츠 스크립트로 메시지를 보내야 하며, 그렇게 하려면 활성 탭을 쿼리해야 합니다.

00:15:32.000 --> 00:15:40.000
따라서 현재 창에서 활성 탭을 쿼리하려면 tabs.query API를 사용할 것입니다.

00:15:40.000 --> 00:15:48.000
그리고 tabs.query API에서, 우리는 현재 창의 활성 탭으로 필터링할 것입니다.

00:15:48.000 --> 00:15:53.000
올바른 탭이 있으면, 이제 메시지를 보낼 수 있습니다.

00:15:53.000 --> 00:16:04.000
그리고 메시지를 보낼 때, 우리는 현재 탭 ID와 물론 우리의 마법의 단어를 전달할 것이다.

00:16:04.000 --> 00:16:10.000
그런 다음 응답을 받으면 자리 표시자 요소를 데이터로 업데이트하기만 하면 됩니다.

00:16:10.000 --> 00:16:12.000
그게 다야!

00:16:12.000 --> 00:16:16.000
이제, 시뮬레이터에서 확장 프로그램을 실행해 봅시다.

00:16:16.000 --> 00:16:21.000
다시 말하지만, 대상 메뉴에서 iPhone 13 Pro 시뮬레이터를 선택하겠습니다.

00:16:21.000 --> 00:16:28.000
빌드 및 실행 버튼을 클릭하여 프로세스를 시작하고 시뮬레이터로 전환하여 앱이 실행될 때까지 기다릴 것입니다.

00:16:28.000 --> 00:16:33.000
일단 출시되면, 설정 앱에서 새로운 확장 프로그램을 활성화할 수 있습니다.

00:16:33.000 --> 00:16:38.000
그럼 설정으로 전환하고 사파리로 스크롤합시다.

00:16:38.000 --> 00:16:48.000
그런 다음 탭하고 확장을 탭하면 그래프 미리보기 열기에서 켤 수 있습니다.

00:16:48.000 --> 00:16:56.000
이제 사파리를 실행하고 Aa 메뉴를 탭하겠습니다.

00:16:56.000 --> 00:16:59.000
그리고 메뉴에는 오픈 그래프 미리보기가 있습니다.

00:16:59.000 --> 00:17:04.000
이제, 이것을 탭하면, 콘텐츠 스크립트에 대한 허가 요청을 받는다.

00:17:04.000 --> 00:17:06.000
나는 하루 동안 허용을 선택할 것이다.

00:17:06.000 --> 00:17:11.000
그리고 빙고, 우리는 이 페이지의 오픈 그래프 데이터의 미리보기를 가지고 있습니다.

00:17:11.000 --> 00:17:15.000
이제 다른 페이지에서 시도해 봅시다.

00:17:15.000 --> 00:17:20.000
다시 Aa 메뉴에서, 나는 그래프 미리보기 열기를 탭하고 하루 동안 허용할 것이다.

00:17:20.000 --> 00:17:23.000
그리고 거기에 우리는 그것을 가지고 있지만, 그것은 옳지 않다.

00:17:23.000 --> 00:17:26.000
우리는 깨진 이미지를 가져서는 안 된다.

00:17:26.000 --> 00:17:30.000
그래서 여기서 무슨 일이 일어나고 있는지 알아내기 위해, 나는 사파리에서 웹 인스펙터를 사용할 수 있다.

00:17:30.000 --> 00:17:39.000
활성화하지 않았다면, 사파리 환경 설정으로 이동하여 고급 탭에서 메뉴 표시줄에서 개발 메뉴 표시를 활성화하세요.

00:17:39.000 --> 00:17:45.000
그런 다음 개발 메뉴에서 시뮬레이터의 콘텐츠에 대한 웹 인스펙터를 선택할 수 있습니다.

00:17:45.000 --> 00:17:50.000
그리고 내가 그렇게 할 때, 나는 이미지가 로드되지 않았다는 것을 쉽게 알 수 있다.

00:17:50.000 --> 00:17:55.000
그래서 만약 URL이 틀렸다면, 그것은 아마도 콘텐츠에서 나온 것일 것이다.

00:17:55.000 --> 00:18:06.000
그래서 webkit.org를 위한 또 다른 웹 인스펙터를 열어봅시다.

00:18:06.000 --> 00:18:10.000
이제 og 메타 태그 데이터를 검색할 수 있습니다.

00:18:10.000 --> 00:18:18.000
그리고 여기서 나는 우리가 제목을 가지고 있고, 설명이 있다는 것을 알 수 있어 - 아, 하지만 우리는 이미지를 놓치고 있어.

00:18:18.000 --> 00:18:19.000
그리고 그게 지금 일어나고 있는 일이야.

00:18:19.000 --> 00:18:22.000
우리는 처리하지 않는 정의되지 않은 사례가 있다.

00:18:22.000 --> 00:18:30.000
그래서 Xcode로 돌아가서, 우리가 해야 할 일은 정의되지 않은 경우를 처리하는 것뿐입니다.

00:18:30.000 --> 00:18:33.000
이제 나는 이것을 다시 실행해 볼 수 있다.

00:18:33.000 --> 00:18:48.000
빌드 및 실행 버튼을 클릭하면, 교체를 클릭하여 시뮬레이터에서 교체하고, 시뮬레이터에서 실행되면, 사파리로 다시 점프하여 다시 시도할 수 있습니다.

00:18:48.000 --> 00:18:53.000
Aa 메뉴에서, 나는 오픈 그래프 미리보기와 빙고를 선택할 것이다.

00:18:53.000 --> 00:18:55.000
완벽해!

00:18:55.000 --> 00:19:04.000
그것은 제목과 설명을 보여주지만, 우리는 그것이 이미지가 있는 페이지에서 작동하는지 확인해야 한다.

00:19:04.000 --> 00:19:07.000
완벽해!

00:19:07.000 --> 00:19:15.000
음, 시뮬레이터에서 작동하도록 하는 것은 여러 장치에서 테스트할 수 있는 좋은 방법이지만, 실제 장치에서 테스트하는 것은 항상 좋은 생각이다.

00:19:15.000 --> 00:19:18.000
그래서 나는 아이폰을 가지고 있어.

00:19:18.000 --> 00:19:27.000
Xcode로 돌아가서, 나는 대상 메뉴를 선택하고 iPhone을 선택할 것이다.

00:19:27.000 --> 00:19:39.000
이제 이 장치에서 구축하고 실행하고 실행해 봅시다.

00:19:39.000 --> 00:19:45.000
장치에서 실행되고 실행된 후, 설정에서 활성화해야 합니다.

00:19:45.000 --> 00:19:48.000
그럼 설정 앱으로 다시 전환해 봅시다.

00:19:48.000 --> 00:19:54.000
사파리와 확장과 오픈 그래프 미리보기에서, 우리는 그것을 켤 것이다.

00:19:54.000 --> 00:19:59.000
이제, 사파리를 다시 실행하면, Aa 메뉴를 탭하겠습니다.

00:19:59.000 --> 00:20:05.000
그리고 나는 확장 프로그램을 보고 탭할 수 있고, 하루 동안 허용할 수 있다.

00:20:05.000 --> 00:20:08.000
그리고 그건 완벽하게 작동해.

00:20:08.000 --> 00:20:14.000
우리가 모든 케이스가 작동하는지 확인하기 위해 몇 개의 다른 페이지에서 이것을 시도해 봅시다.

00:20:14.000 --> 00:20:21.000
여기 developer.apple.com에서는 apple.com 도메인의 일부이기 때문에 추가 허가를 요청하지 않았습니다.

00:20:21.000 --> 00:20:27.000
Webkit.org에서 시도해 봅시다.

00:20:27.000 --> 00:20:36.000
그리고 여기서 우리는 Aa 메뉴를 다시 탭하고 그래프 미리보기를 열면 다른 웹사이트이기 때문에 다시 표시됩니다.

00:20:36.000 --> 00:20:38.000
완벽해.

00:20:38.000 --> 00:20:42.000
그리고 이미지가 있는 게시물에 하나 더.

00:20:42.000 --> 00:20:46.000
우리는 Aa를 탭하고 그래프 미리보기를 열 것이다.

00:20:46.000 --> 00:20:49.000
완벽해!

00:20:49.000 --> 00:20:50.000
그래서, 훌륭해.

00:20:50.000 --> 00:20:59.000
이제 우리의 앱과 확장 프로그램이 시뮬레이터와 실제 장치에서 작동하기 때문에, 나는 우리가 이것을 App Store에 제출할 준비가 되었다고 말하고 싶다.

00:20:59.000 --> 00:21:03.000
먼저, 제출하기 전에 처리해야 할 빠른 세부 사항이 있습니다.

00:21:03.000 --> 00:21:10.000
프로젝트 설정에서 iOS 앱 대상을 선택하고 앱 카테고리를 설정해야 합니다.

00:21:10.000 --> 00:21:13.000
나는 개발자 도구를 선택할 것이다.

00:21:13.000 --> 00:21:19.000
다음으로, 제품 메뉴에서 아카이브를 선택하세요.

00:21:19.000 --> 00:21:27.000
그리고 빌드 프로세스와 유사하게, 상태 표시줄의 오른쪽에서 진행 상황을 볼 수 있습니다.

00:21:27.000 --> 00:21:33.000
준비가 되면, 제출할 준비가 된 빌드 아카이브를 선택하고, 앱 배포 버튼을 클릭하세요.

00:21:33.000 --> 00:21:39.000
어시스턴트에서 배포 방법에서 App Store Connect를 선택하고 다음을 클릭합니다.

00:21:39.000 --> 00:21:44.000
목적지의 경우, 업로드를 남기고 다음을 클릭하겠습니다.

00:21:44.000 --> 00:21:52.000
그리고 앱 레코드를 준비하기 위해 App Store Connect와 통신하기 시작할 것이다.

00:21:52.000 --> 00:22:00.000
여기서 이름을 검토하고 내 SKU가 내 App Store Connect 계정의 다른 앱에 사용되는 SKU 중에서 고유한지 확인할 수 있습니다.

00:22:00.000 --> 00:22:06.000
이제 다음 버튼을 클릭하면 검토를 위해 앱 기록을 준비하기 시작합니다.

00:22:06.000 --> 00:22:10.000
하지만, 먼저, 그것이 요구할 몇 가지 유통 옵션이 있다.

00:22:10.000 --> 00:22:15.000
이것들은 모두 매우 도움이 되기 때문에, 나는 그것들을 남겨두고 다음을 클릭할 것이다.

00:22:15.000 --> 00:22:22.000
그리고 저는 확실히 자동으로 서명을 관리하고 다음을 클릭하고 싶습니다.

00:22:22.000 --> 00:22:28.000
이제 우리는 앱 콘텐츠와 확장 콘텐츠를 검토할 기회를 갖게 될 것입니다.

00:22:28.000 --> 00:22:35.000
우리가 그것에 만족하면, 나는 업로드를 클릭할 것이다.

00:22:35.000 --> 00:22:41.000
업로드가 완료되기를 기다리는 동안, App Store Review를 통과하기 위한 몇 가지 팁을 빠르게 살펴봅시다.

00:22:41.000 --> 00:22:49.000
먼저, 프로젝트에 사용된 모든 코드와 콘텐츠, 이미지 또는 기타 자산을 소유하고 있는지 확인하세요.

00:22:49.000 --> 00:22:55.000
호출된 API 또는 자바스크립트 프레임워크에 대한 권한이 있거나 증명할 수 있는지 확인하세요.

00:22:55.000 --> 00:23:03.000
또한 사용자 지정 아이콘을 제공하고 앱에 고유한 이름을 사용하는 것을 기억하고 싶을 것입니다. App Store에서 눈에 띄는 데 도움이 됩니다.

00:23:03.000 --> 00:23:05.000
그리고 이모티콘으로 웹을 장식하지 마세요.

00:23:05.000 --> 00:23:11.000
추천을 받는 최고의 웹 확장 프로그램은 사용자에게 유용한 것을 제공한다.

00:23:11.000 --> 00:23:19.000
그리고 다른 브라우저에 대한 웹 결제 또는 기부에 대한 코드가 있다면, App Store 검토를 위해 비활성화해야 합니다.

00:23:19.000 --> 00:23:24.000
확장 프로그램의 선행 판매는 App Store에서 쉽고 매우 인기가 있다.

00:23:24.000 --> 00:23:28.000
그 업로드 과정을 확인해 봅시다.

00:23:28.000 --> 00:23:30.000
업로드가 성공적으로 완료되었습니다.

00:23:30.000 --> 00:23:31.000
좋아.

00:23:31.000 --> 00:23:38.000
이제 Safari에서 App Store Connect에 로그인하고 내 앱을 클릭하여 생성된 새 앱 기록을 볼 수 있습니다.

00:23:38.000 --> 00:23:43.000
그리고 Open Graph Preview를 클릭하면 App Store에 대한 추가 정보를 제공할 수 있습니다.

00:23:43.000 --> 00:23:47.000
앱에 대한 미리보기 이미지를 제공하고 싶을 것입니다.

00:23:47.000 --> 00:23:53.000
그리고 프로모션 텍스트에서 이 릴리스의 새로운 기능에 대한 설명 정보를 제공해야 합니다.

00:23:53.000 --> 00:24:02.000
설명에서, 당신은 이 확장 프로그램이 당신의 사용자를 위해 무엇을 하는지에 대한 완전한 설명을 제공하고 싶을 것이며, 그런 다음 몇 가지 키워드를 제공할 수도 있습니다.

00:24:02.000 --> 00:24:06.000
100자 제한에 유의하세요; 정확해야 합니다.

00:24:06.000 --> 00:24:12.000
또한 사용자가 확장 프로그램에 대한 지원을 받을 수 있는 페이지에 대한 URL을 제공하고 싶을 것입니다.

00:24:12.000 --> 00:24:16.000
그리고 선택적으로, 마케팅 페이지의 주소를 포함할 수 있습니다.

00:24:16.000 --> 00:24:21.000
그런 다음 업로드 도구를 사용하여 앱에 대한 올바른 업로드를 선택할 수 있습니다.

00:24:21.000 --> 00:24:31.000
그리고 모든 것을 작성하면, 검토를 위해 제출 버튼을 클릭하여 앱 검토 프로세스를 시작할 수 있습니다.

00:24:31.000 --> 00:24:36.000
그리고 그것이 사파리 웹 확장 프로그램을 만들고 제출하는 것이 얼마나 쉬운지이다.

00:24:36.000 --> 00:24:45.000
iOS와 MacOS 모두에 대한 확장 프로그램을 제출하고 이 세션과 관련된 리소스를 확인하는 것이 좋습니다.

00:24:45.000 --> 00:24:48.000
그리고 반드시 피드백을 제출하세요; 우리는 당신의 의견을 듣고 싶습니다.

00:24:48.000 --> 00:24:54.000
피드백 어시스턴트를 사용하여 버그를 제출하거나 기능 요청을 할 수 있습니다.

00:24:54.000 --> 23:59:59.000
그리고 봐줘서 고마워.

