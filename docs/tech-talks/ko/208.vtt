WEBVTT

00:00:02.000 --> 00:00:06.000
ClockKit 프레임워크를 사용하면 시계 화면에 앱의 데이터를 표시할 수 있습니다.

00:00:06.000 --> 00:00:09.000
이 영역들은 합병증이라고 불린다.

00:00:09.000 --> 00:00:17.000
합병증은 손목을 올릴 때마다 사람들이 가장 좋아하는 앱에 연결하고 하루 종일 정보를 얻을 수 있는 좋은 방법입니다.

00:00:17.000 --> 00:00:22.000
합병증은 또한 앱에 빠르게 접근하기 위해 탭할 수 있습니다.

00:00:22.000 --> 00:00:36.000
Apple Watch Series 4를 사용하면 ClockKit에 새로운 컴플리케이션 기능을 추가하여 새로운 인포그래프 및 인포그래프 모듈러 시계 페이스를 위한 매력적인 풀 컬러 컴플리케이션을 만들 수 있습니다.

00:00:36.000 --> 00:00:43.000
인포그래프 시계 페이스에서, 이 새로운 합병증은 놀라운 새로운 디스플레이의 모서리까지 확장될 수 있다.

00:00:43.000 --> 00:00:53.000
인포그래프 모듈러 시계 페이스에서, 이제 시계 페이스 중간에 더 많은 앱의 정보를 풀 컬러로 표시할 수 있습니다.

00:00:53.000 --> 00:00:56.000
합병증은 가족으로 나뉜다.

00:00:56.000 --> 00:00:59.000
이것들은 정보가 화면에 어떻게 표시되는지 결정한다.

00:00:59.000 --> 00:01:10.000
Apple Watch Series 4에는 그래픽 코너, 그래픽 원형, 그래픽 베젤 및 그래픽 직사각형의 네 가지 새로운 제품군을 추가했습니다.

00:01:10.000 --> 00:01:19.000
각 컴플리케이션 패밀리는 시스템 정의 템플릿을 사용하여 여기에서 볼 수 있는 그래픽 원형 패밀리와 같이 정보가 어떻게 배치되는지 결정합니다.

00:01:19.000 --> 00:01:24.000
데이터를 표시하기 위해 선택할 수 있는 많은 템플릿이 있습니다.

00:01:24.000 --> 00:01:37.000
컴플리케이션 패밀리 템플릿은 각각 텍스트에서 이미지, 완전히 새로운 게이지에 이르기까지 ClockKit 프레임워크의 데이터 제공자 클래스의 다양한 조합으로 구성됩니다.

00:01:37.000 --> 00:01:45.000
인포그래프와 인포그래프 모듈러 시계 페이스의 경우, 우리는 새로운 풀 컬러 이미지 공급자와 새로운 게이지 공급자를 추가했습니다.

00:01:45.000 --> 00:01:47.000
이것들에 대해 배워봅시다.

00:01:47.000 --> 00:01:50.000
첫 번째는 완전히 새로운 게이지 공급자이다.

00:01:50.000 --> 00:02:00.000
게이지 공급자를 사용하면 사용 중인 컴플리케이션 템플릿 제품군에 따라 다른 방식으로 완료된 진행 상황 또는 범위 내의 값을 사용자에게 표시할 수 있습니다.

00:02:00.000 --> 00:02:09.000
또한 시간 간격 게이지를 사용하여 타이머 합병증과 함께 여기에서 볼 수 있듯이 변경되는 값을 자동으로 애니메이션화할 수 있습니다.

00:02:09.000 --> 00:02:17.000
게이지 공급자를 사용하면 단일 색상을 제공하거나 게이지를 따라 그라디언트 색상을 지정하여 그라디언트를 제공할 수 있습니다.

00:02:17.000 --> 00:02:27.000
또한 데이터가 진행됨에 따라 색상이나 그라디언트가 게이지를 채울지 또는 범위이고 값을 나타내기 위해 링을 사용하는지 여부를 지정할 수 있습니다.

00:02:27.000 --> 00:02:29.000
다음으로, 우리는 이미지 제공자가 있다.

00:02:29.000 --> 00:02:43.000
이미지 공급자를 사용하면 기존 시계 페이스에 사용할 수 있는 착색 가능한 이미지 또는 단색 이미지를 표시할 수 있으며, 이제 인포그래프 및 인포그래프 모듈러 시계 페이스, 풀 컬러 이미지를 표시할 수 있습니다.

00:02:43.000 --> 00:02:48.000
마지막으로, 다양한 템플릿에서 텍스트를 사용할 수 있는 텍스트 제공자가 있습니다.

00:02:48.000 --> 00:02:59.000
그것들은 텍스트, 날짜, 시간, 시간 범위, 심지어 두 날짜 또는 시간 사이의 자동 카운트다운 또는 카운트업을 표시하는 데 사용할 수 있습니다.

00:02:59.000 --> 00:03:10.000
소수의 컴플리케이션 패밀리 템플릿에서, 이제 각각 고유한 색조 색상을 가진 여러 텍스트 공급자를 함께 사용하여 하나의 다목적 문자열을 만들 수 있습니다.

00:03:10.000 --> 00:03:17.000
앱이 다른 데이터에 대한 특정 브랜딩을 가지고 있다면 이것은 정말 유용할 수 있습니다.

00:03:17.000 --> 00:03:34.000
이제 게이지, 이미지 및 텍스트 공급자에 익숙해졌으니, 인포그래프 및 인포그래프 모듈러 워치 페이스에서 사용할 수 있는 새로운 그래픽 컴플리케이션 패밀리 템플릿을 살펴보고 공급자를 결합하여 다양한 방식으로 데이터를 표시하는 방법을 알아봅시다.

00:03:34.000 --> 00:03:38.000
첫 번째 새로운 컴플리케이션 패밀리 템플릿은 그래픽 코너이다.

00:03:38.000 --> 00:03:42.000
이것은 인포그래프 시계 페이스에서 사용할 수 있습니다.

00:03:42.000 --> 00:03:48.000
이 템플릿은 전에 없던 더 많은 콘텐츠를 허용하기 위해 디스플레이 모서리를 따라 곡선을 이룬다.

00:03:48.000 --> 00:03:54.000
그래픽 코너 템플릿에는 사용할 수 있는 몇 가지 다양한 공급자 조합이 있습니다.

00:03:54.000 --> 00:04:04.000
텍스트가 있는 게이지 제공자, 이미지가 있는 게이지 제공자, 텍스트 제공자 세트, 이미지가 있는 텍스트 제공자를 사용할 수 있습니다.

00:04:04.000 --> 00:04:08.000
그리고 마지막으로, 당신은 그 자체로 풀 컬러 이미지를 사용할 수 있습니다.

00:04:08.000 --> 00:04:16.000
이제, 다른 코너 합병증과의 일관성을 위해, 디스플레이 주위를 구부릴 공급자를 사용하는 것이 좋습니다.

00:04:16.000 --> 00:04:24.000
좋아요, 텍스트와 함께 게이지 제공자를 사용하는 그래픽 코너 컴플리케이션을 만드는 방법에 대한 코드 예제를 살펴봅시다.

00:04:24.000 --> 00:04:28.000
날씨 앱과 비슷한 것을 만들어 봅시다.

00:04:28.000 --> 00:04:33.000
먼저, 우리는 텍스트 색조 색상에 대한 몇 가지 값을 얻기 위해 디자이너와 협력해야 합니다.

00:04:33.000 --> 00:04:39.000
이 예에서, 우리는 우리의 최고, 최저, 그리고 현재 온도를 보여주는 텍스트가 있다.

00:04:39.000 --> 00:04:44.000
우리는 또한 색상이 그라디언트를 구성하는 값의 배열이 필요할 것이다.

00:04:44.000 --> 00:04:46.000
여기서, 우리는 세 가지 색을 사용할 것이다.

00:04:46.000 --> 00:04:51.000
하나는 낮은 것을 위한 것이고, 하나는 중간을 위한 것이고, 하나는 높은 것을 위한 것이다.

00:04:51.000 --> 00:05:04.000
watchOS는 색상 간의 그라디언트를 처리하므로, 우리가 제공해야 하는 유일한 추가 정보는 각 색상이 게이지를 따라 위치해야 하는 위치를 표현하는 값의 배열입니다.

00:05:04.000 --> 00:05:10.000
이제 우리는 모든 가치를 가지고 있기 때문에, 그래픽 코너 컴플리케이션 템플릿을 만들어야 합니다.

00:05:10.000 --> 00:05:19.000
우리는 게이지 제공자와 텍스트 제공자로 코너 컴플리케이션을 만들 것이므로, GraphicCornerGaugeText 템플릿의 인스턴스를 만들 것입니다.

00:05:19.000 --> 00:05:25.000
템플릿 인스턴스를 만들면, 게이지 공급자부터 시작하여 공급자를 만들어야 합니다.

00:05:25.000 --> 00:05:28.000
여기서 우리는 CLKSimpleGaugeProvider를 사용하고 있습니다.

00:05:28.000 --> 00:05:37.000
스타일은 게이지의 값 주위에 링을 표시하는 링이 될 수 있으며, 게이지 내에서 진행 상황을 채우고 싶다면 채우기가 될 수 있습니다.

00:05:37.000 --> 00:05:39.000
여기서 우리는 반지 스타일을 사용할 것이다.

00:05:39.000 --> 00:05:50.000
다음으로, 우리는 게이지 색상을 이전에 만든 그라데이션 색상과 게이지 색상 위치로 설정하여 게이지를 따라 색상이 어디에 있는지 정의합니다.

00:05:50.000 --> 00:05:53.000
마지막으로, 우리는 채우기 분수를 설정해야 한다.

00:05:53.000 --> 00:05:58.000
이것은 게이지의 현재 값을 설정하고 데이터에 따라 동적이어야 합니다.

00:05:58.000 --> 00:06:08.000
다음으로, 우리는 코너 템플릿의 게이지 제공자 속성을 설정하고 각각에 대한 색조 색상으로 코드에서 이전에 만든 템플릿에 대한 다양한 텍스트 제공자를 설정합니다.

00:06:08.000 --> 00:06:14.000
남은 것은 타임라인 항목을 만들기 위해 완성된 템플릿을 전달하는 것뿐입니다.

00:06:14.000 --> 00:06:15.000
이거 멋져 보여.

00:06:15.000 --> 00:06:24.000
색상 사이의 그라디언트가 시스템에 의해 처리되는 것을 볼 수 있으며, 링 스타일 게이지 공급자는 현재 값의 링에 있습니다.

00:06:24.000 --> 00:06:33.000
다음으로, 인포그래프와 인포그래프 모듈러 시계 페이스 모두에서 사용할 수 있는 그래픽 원형 컴플리케이션 패밀리 템플릿을 살펴보겠습니다.

00:06:33.000 --> 00:06:43.000
그래픽 원형 템플릿은 게이지 제공자와 텍스트 제공자를 결합하여 범위 끝에 값이 있는 개방형 게이지를 표시할 수 있는 기능을 제공합니다.

00:06:43.000 --> 00:06:54.000
또한 열린 게이지로 중앙 텍스트 값 아래에 텍스트가 있는 템플릿을 만들 수 있으며, 열린 게이지로 중앙 텍스트 아래에 풀 컬러 이미지 공급자를 사용할 수 있습니다.

00:06:54.000 --> 00:07:00.000
닫힌 게이지를 사용하면 게이지나 텍스트 안에 풀 컬러 이미지를 제공할 수 있습니다.

00:07:00.000 --> 00:07:07.000
그리고 마지막으로, 풀 컬러 이미지를 사용하여 합병증의 전체 영역을 나타낼 수 있습니다.

00:07:07.000 --> 00:07:13.000
이전 예에서, 우리는 날씨 데이터를 나타내는 그래픽 코너 컴플리케이션을 만들었습니다.

00:07:13.000 --> 00:07:21.000
이제, 같은 데이터를 가지고 텍스트가 있는 열린 게이지를 사용하여 그래픽 원형 컴플리케이션을 만들어 봅시다.

00:07:21.000 --> 00:07:30.000
우리가 사용할 텍스트 제공자, 그라데이션 색상 및 그라데이션 색상 위치는 그래픽 코너 컴플리케이션에서 사용한 것과 동일합니다.

00:07:30.000 --> 00:07:37.000
주요 차이점은 그래픽 원형 오픈 게이지 범위 텍스트 템플릿을 인스턴스화해야 한다는 것입니다.

00:07:37.000 --> 00:07:40.000
우리는 지난번에 했던 것처럼 게이지 공급자를 만들 것이다.

00:07:40.000 --> 00:07:50.000
한 가지 추가 변경 사항은 템플릿의 중앙 텍스트 공급자 속성을 설정하는 것입니다. 그래픽 원형 템플릿에서 이것은 외부 텍스트 공급자였습니다.

00:07:50.000 --> 00:07:51.000
그리고 그게 다야.

00:07:51.000 --> 00:07:54.000
이제 우리는 그래픽 원형 합병증이 있다.

00:07:54.000 --> 00:07:59.000
하지만 우리가 그래픽 원형 합병증으로 할 수 있는 더 많은 것이 있다.

00:07:59.000 --> 00:08:04.000
인포그래프 시계 페이스에는 그래픽 베젤이라는 또 다른 가족이 있다.

00:08:04.000 --> 00:08:12.000
이것은 그래픽 원형 합병증을 활용하고 시간 베젤 내에서 텍스트를 감싸기 위해 텍스트 제공자를 추가합니다.

00:08:12.000 --> 00:08:16.000
먼저, 우리는 그래픽 원형 템플릿을 만드는 것으로 시작합니다.

00:08:16.000 --> 00:08:21.000
이 예시에서, 우리는 마지막 예시에서 방금 만든 것을 사용할 것이다.

00:08:21.000 --> 00:08:28.000
그래픽 원형 템플릿이 구성되면, GraphicBezelCircularText 템플릿의 인스턴스를 만듭니다.

00:08:28.000 --> 00:08:34.000
이것은 구성된 그래픽 원형 템플릿과 베젤 텍스트에 대한 텍스트 제공자가 필요합니다.

00:08:34.000 --> 00:08:38.000
여기서, 우리는 예시를 위한 몇 가지 값을 하드코딩하고 있습니다.

00:08:38.000 --> 00:08:44.000
마지막으로, 컴플리케이션 타임라인 항목을 위해 구성된 베젤 템플릿을 전달해야 합니다.

00:08:44.000 --> 00:08:48.000
여기 완성된 그래픽 베젤 컴플리케이션이 있습니다.

00:08:48.000 --> 00:08:53.000
텍스트는 베젤을 따라 자동으로 휘어지고 대문자로 표시됩니다.

00:08:53.000 --> 00:08:59.000
베젤 텍스트는 잘리기 전에 베젤의 거의 180도를 채울 수 있다.

00:08:59.000 --> 00:09:07.000
컴플리케이션 제품군에 마지막으로 추가된 것은 인포그래프 모듈러 시계 페이스에서 사용할 수 있는 그래픽 직사각형입니다.

00:09:07.000 --> 00:09:13.000
이 제품군에는 시계 화면의 중앙을 채우는 풀 컬러 이미지를 만들 수 있는 템플릿이 있습니다.

00:09:13.000 --> 00:09:16.000
이 템플릿에는 텍스트 제공자도 포함되어 있습니다.

00:09:16.000 --> 00:09:23.000
이 이미지는 매우 시각적이어야 하며 표시된 정보를 전달하기 위해 텍스트에 의존하지 않아야 합니다.

00:09:23.000 --> 00:09:30.000
그래픽 직사각형 템플릿은 또한 여러 텍스트 공급자를 활용하여 보다 전통적인 구성을 허용합니다.

00:09:30.000 --> 00:09:40.000
또한 헤더 텍스트 옆에 이미지를 사용할 수 있으며 세 번째 텍스트 줄 대신 게이지 공급자를 표시하는 템플릿을 사용할 수도 있습니다.

00:09:40.000 --> 00:09:44.000
이것은 진행 상황을 전달하기에 좋다.

00:09:44.000 --> 00:09:51.000
헤더 텍스트와 그 아래에 큰 풀 컬러 이미지를 제공하는 그래픽 직사각형 컴플리케이션을 만들어 봅시다.

00:09:51.000 --> 00:09:56.000
먼저, 우리는 그래픽 직사각형 대형 이미지 템플릿을 인스턴스화해야 합니다.

00:09:56.000 --> 00:09:59.000
다음 단계는 헤더 텍스트로 텍스트 제공자를 만드는 것입니다.

00:09:59.000 --> 00:10:05.000
다시 말하지만, 이것은 여러 텍스트 제공자로 구성된 텍스트 제공자가 될 수 있다.

00:10:05.000 --> 00:10:10.000
마지막으로, 우리는 데이터의 이미지로 풀 컬러 이미지 제공자를 만듭니다.

00:10:10.000 --> 00:10:20.000
새로운 인포그래프와 인포그래프 모듈러 워치 페이스의 합병증을 만들 때 명심해야 할 몇 가지 핵심 사항은 업데이트 기회가 동일하게 유지된다는 것입니다.

00:10:20.000 --> 00:10:37.000
24시간마다 50개의 보장된 합병증 푸시 업데이트가 있으며, 앱이 백그라운드 앱 새로 고침을 이용하거나 그 사람의 Apple Watch에서 가장 최근에 사용된 앱에 있는 경우 매 시간마다 업데이트할 수 있습니다.

00:10:37.000 --> 00:10:53.000
그래픽 원형 및 그래픽 직사각형 패밀리를 활용할 때, 데이터를 얻고, 처리하고, 이미지를 렌더링하는 동안 잠재적인 CPU와 업데이트 시간 임계값이 있다는 것을 알고 있으므로 이 작업을 빠르게 수행하십시오.

00:10:53.000 --> 00:11:01.000
풀 컬러 이미지 제공자의 경우, 접근성 라벨 속성을 사용하여 VoiceOver를 사용하는 사람들에게 의미 있는 정보를 제공하십시오.

00:11:01.000 --> 00:11:15.000
이것은 이미지만 사용하는 그래픽 원형 템플릿과 많은 데이터를 표현할 수 있는 그래픽 직사각형 대형 이미지 템플릿뿐만 아니라 동반 텍스트가 없기 때문에 특히 중요합니다.

00:11:15.000 --> 00:11:26.000
ClockKit 프레임워크를 사용하여 새로운 그래픽 컴플리케이션을 만드는 방법에 대한 자세한 내용은 developer.apple.com의 Apple 개발자 문서를 참조하십시오.

00:11:26.000 --> 00:11:36.000
휴먼 인터페이스 지침의 watchOS 스케치 및 포토샵 리소스도 Apple Watch Series 4 및 watchOS 5용으로 업데이트되었습니다.

00:11:36.000 --> 23:59:59.000
또한, 그래픽 컴플리케이션 패밀리의 각 템플릿의 크기 사양은 여기에 나와 있으며 developer.apple.com의 휴먼 인터페이스 지침에서도 찾을 수 있습니다.

