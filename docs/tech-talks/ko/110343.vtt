WEBVTT

00:00:01.000 --> 00:00:04.000
TestFlight를 시작하는 것을 환영합니다.

00:00:04.000 --> 00:00:08.000
저는 Aneesha이고 App Store 제품 관리 팀에서 일하고 있습니다.

00:00:08.000 --> 00:00:13.000
저는 개발자 도구 제품 관리 팀의 동료 제롬과 합류했습니다.

00:00:13.000 --> 00:00:17.000
우리는 이 프레젠테이션에서 TestFlight에 대해 더 많이 공유하게 되어 기쁩니다.

00:00:17.000 --> 00:00:24.000
오늘의 의제를 위해, 우리는 테스트의 중요성에 대한 간략한 개요와 TestFlight에 대한 소개로 시작할 것입니다.

00:00:24.000 --> 00:00:32.000
그런 다음 빌드를 배포하고, 테스터를 추가하고, 피드백을 보는 방법을 포함하여 TestFlight를 사용하는 방법을 공유할 것입니다.

00:00:32.000 --> 00:00:35.000
그럼 뛰어들자.

00:00:35.000 --> 00:00:39.000
테스트는 고품질 앱 경험을 만드는 데 필수적이다.

00:00:39.000 --> 00:00:50.000
그것은 당신의 팀이 코드를 반복하고 피드백을 통합하여 App Store에서 고객에게 훌륭한 앱과 경험을 제공할 수 있도록 하는 과정입니다.

00:00:50.000 --> 00:01:01.000
App Store는 170개 이상의 지역에서 15억 개 이상의 장치와 40개 이상의 언어로 제공됩니다.

00:01:01.000 --> 00:01:12.000
그것은 사람들이 당신의 앱을 발견할 수 있는 큰 기회이며, 또한 다양한 장치, 언어 및 접근성 요구 사항을 가진 수많은 다른 사람들입니다.

00:01:12.000 --> 00:01:20.000
앱을 테스트함으로써, 전 세계 App Store 사용자에게 훌륭한 경험을 제공하고 있는지 확인할 수 있습니다.

00:01:20.000 --> 00:01:26.000
그리고 테스트 노력을 지원하기 위해, Apple은 앱을 테스트하는 데 도움이 되는 광범위한 도구 세트를 제공합니다.

00:01:26.000 --> 00:01:37.000
예를 들어, Xcode를 사용하여 XCTest로 단위 및 UI 테스트를 작성한 다음 Xcode Cloud를 사용하여 각 코드 변경 후 테스트를 자동화할 수 있습니다.

00:01:37.000 --> 00:01:46.000
시뮬레이터로 다른 장치와 OS에서 코드를 수동으로 테스트하고 Instruments를 사용하여 앱의 성능을 테스트할 수 있습니다.

00:01:46.000 --> 00:01:52.000
오늘 우리는 TestFlight에 대한 심층 조사를 할 것이다.

00:01:52.000 --> 00:02:04.000
TestFlight는 개인 정보 보호 친화적인 방식으로 실제 사람들의 피드백을 수집하는 데 도움이 되는 Apple의 도구이므로 App Store에서 사람들이 좋아할 세계적 수준의 앱과 게임을 만들 수 있습니다.

00:02:04.000 --> 00:02:13.000
TestFlight를 사용하면 앱이 App Store에서 실행되기 전에 피드백을 받을 수 있으며 이 정보를 사용하여 그에 따라 앱을 업데이트할 수 있습니다.

00:02:13.000 --> 00:02:21.000
TestFlight는 Apple Developer Program 멤버십의 일부로 포함되어 있으며 우리가 제공하는 가장 인기 있는 개발자 도구 중 하나입니다.

00:02:21.000 --> 00:02:30.000
TestFlight를 사용하면 모든 Apple 플랫폼에 앱을 배포할 수 있으며 테스트 경험을 최적화하기 위해 만들어졌습니다.

00:02:30.000 --> 00:02:38.000
높은 수준에서, TestFlight를 사용하면 앱의 빌드를 업로드하고, 테스터를 추가하고, 지속적으로 피드백을 받을 수 있습니다.

00:02:38.000 --> 00:02:48.000
이를 통해 테스터 피드백을 빠르고 쉽게 받아 결정을 알리고 App Store에 게시할 세계적 수준의 앱과 게임을 개발할 수 있습니다.

00:02:48.000 --> 00:02:52.000
다음으로, TestFlight를 사용하는 방법에 대한 예를 더 자세히 살펴봅시다.

00:02:52.000 --> 00:02:55.000
제롬이 우리를 시작하게 할 거야.

00:02:55.000 --> 00:02:58.000
TestFlight 사용에 대해 이야기해 봅시다.

00:02:58.000 --> 00:03:07.000
그리고 이것을 설명하기 위해, 우리가 처음으로 App Store에서 출시할 새로운 푸드 트럭 앱을 준비하고 있다고 상상해 봅시다.

00:03:07.000 --> 00:03:13.000
시작하려면, 먼저 빌드를 업로드하고 테스트를 준비해야 합니다.

00:03:13.000 --> 00:03:26.000
우리가 다룰 빌드를 업로드하는 데는 세 가지 주요 단계가 있습니다. App Store Connect에 업로드하고, 테스트 세부 사항을 추가하고, 테스트 정보를 추가하는 것입니다.

00:03:26.000 --> 00:03:30.000
우리는 먼저 Xcode를 사용하여 App Store Connect에 업로드할 것입니다.

00:03:30.000 --> 00:03:37.000
그러니 배포를 준비하기 위해 Xcode를 열고 앱의 아카이브를 만들어 봅시다.

00:03:37.000 --> 00:03:42.000
그렇게 하기 위해, 우리는 먼저 앱을 만들고 싶은 아키텍처를 선택할 것이다.

00:03:42.000 --> 00:03:50.000
여기, 모든 iOS 장치 arm64와 제품 상단 메뉴에서 아카이브를 선택하세요.

00:03:50.000 --> 00:03:59.000
그런 다음 TestFlight로 보내려는 앱과 빌드 버전을 선택하고 오른쪽에 있는 앱 배포 버튼을 클릭하세요.

00:03:59.000 --> 00:04:09.000
TestFlight 빌드의 경우, 내부 및 외부 테스터와 빌드를 공유할 수 있도록 배포 방법으로 App Store Connect를 선택할 것입니다.

00:04:09.000 --> 00:04:16.000
우리는 나중에 테스터 유형에 대한 더 많은 정보를 공유할 것이므로, 지금은 다음을 클릭합시다.

00:04:16.000 --> 00:04:22.000
빌드를 App Store Connect로 자동으로 보내려면 업로드를 선택할 것입니다.

00:04:22.000 --> 00:04:29.000
업로드하기 전에, Xcode의 다음을 클릭하여 앱 레코드를 만드세요.

00:04:29.000 --> 00:04:34.000
우리는 거의 빌드를 제출하지 않고, 몇 번의 클릭만 더 하면 됩니다.

00:04:34.000 --> 00:04:45.000
App Store가 Xcode의 충돌 주최자에 전달하기 전에 충돌 보고서에 기호 이름을 추가할 수 있도록 앱을 업로드할 때 기호 파일을 포함하는 것이 좋습니다.

00:04:45.000 --> 00:04:54.000
또한 Xcode의 배포 도우미가 앱에 유효한 빌드 번호가 있는지 여부를 감지할 수 있도록 버전 및 빌드 번호 관리를 선택할 것입니다.

00:04:54.000 --> 00:05:04.000
우리 앱에 이전에 사용했던 것과 같은 유효하지 않은 번호가 있는 경우, 어시스턴트는 유효한 번호로 자동으로 증가시킬 수 있는 옵션을 제공할 것입니다.

00:05:04.000 --> 00:05:08.000
기본적으로, 자동 서명 관리가 선택됩니다.

00:05:08.000 --> 00:05:13.000
Xcode는 우리를 위해 프로필과 인증서를 관리할 수 있습니다.

00:05:13.000 --> 00:05:19.000
그리고 우리가 이것을 마친 후, Xcode는 우리의 빌드를 App Store Connect에 업로드합니다.

00:05:19.000 --> 00:05:25.000
앱이 업로드되면, 이제 TestFlight를 사용하여 테스트할 준비가 되었습니다.

00:05:25.000 --> 00:05:31.000
Xcode를 사용하여 빌드를 업로드할 때, 명심해야 할 몇 가지 모범 사례가 있습니다.

00:05:31.000 --> 00:05:38.000
TestFlight를 사용하려면 배포 방법을 App Store Connect로 설정해야 합니다.

00:05:38.000 --> 00:05:41.000
버전과 빌드 번호를 염두에 두세요.

00:05:41.000 --> 00:05:49.000
새 빌드를 업로드할 때, 항상 이전 빌드보다 큰 숫자로 빌드 문자열을 지정해야 합니다.

00:05:49.000 --> 00:05:52.000
인증서와 프로필이 최신 상태인지 확인하세요.

00:05:52.000 --> 00:05:55.000
이것은 업로드 문제의 일반적인 이유이다.

00:05:55.000 --> 00:06:01.000
정보가 정확한지 확인하는 한 가지 쉬운 방법은 Xcode가 서명을 관리하도록 하는 것입니다.

00:06:01.000 --> 00:06:04.000
우리는 테스트를 위해 빌드를 준비하기 위해 해야 할 두 가지가 더 있다.

00:06:04.000 --> 00:06:10.000
Aneesha는 우리가 테스트 정보를 추가하는 방법과 테스트를 시작하는 방법을 공유할 것이다.

00:06:10.000 --> 00:06:18.000
테스트 세부 사항을 추가하려면, 먼저 App Store Connect로 이동하여 빌드를 볼 것입니다.

00:06:18.000 --> 00:06:25.000
TestFlight에 액세스하려면, App Store Connect 앱 페이지를 열고 상단의 TestFlight 섹션을 클릭하세요.

00:06:25.000 --> 00:06:33.000
앱 페이지의 TestFlight 섹션에서 App Store Connect 모바일 앱을 통해 TestFlight에 액세스할 수도 있습니다.

00:06:33.000 --> 00:06:39.000
이제 우리는 푸드 트럭 앱의 TestFlight 섹션에서 업로드된 빌드를 볼 수 있습니다.

00:06:39.000 --> 00:06:45.000
TestFlight에 업로드된 모든 빌드는 만료되기 전 90일 동안 활성화됩니다.

00:06:45.000 --> 00:06:51.000
90일 이상 계속 테스트하고 싶다면, 추가 빌드를 업로드하기만 하면 됩니다.

00:06:51.000 --> 00:06:58.000
여기서 상태와 만료 시점을 포함하여 새로 업로드된 빌드의 세부 사항을 볼 수 있습니다.

00:06:58.000 --> 00:07:03.000
우리는 테스트를 추가하기 위해 빌드를 클릭할 것입니다.

00:07:03.000 --> 00:07:11.000
테스트 세부 사항을 추가하면 테스터가 앱을 테스트할 때 무엇을 주의해야 하는지 알 수 있어 더 가치 있는 피드백을 얻을 수 있습니다.

00:07:11.000 --> 00:07:16.000
계속해서 이 빌드를 위해 몇 가지를 추가합시다.

00:07:16.000 --> 00:07:20.000
이 앱을 출시하는 것은 이번이 처음이므로 언급합시다.

00:07:20.000 --> 00:07:27.000
그리고 우리는 또한 사용자가 푸드 트럭의 디자인을 변경할 수 있도록 허용하기 시작했기 때문에 테스트 세부 사항에서도 언급합시다.

00:07:27.000 --> 00:07:36.000
테스터가 앱을 테스트하러 갈 때 가장 먼저 보는 것이기 때문에 빌드와 관련된 테스트 세부 사항을 작성하는 것이 중요합니다.

00:07:36.000 --> 00:07:39.000
좋아 보인다, 이제 우리는 세이브를 눌렀다.

00:07:39.000 --> 00:07:45.000
다음은 테스트 세부 사항을 추가할 때 명심해야 할 몇 가지 모범 사례입니다.

00:07:45.000 --> 00:07:49.000
빌드별로 테스트 세부 사항을 업데이트하세요.

00:07:49.000 --> 00:07:58.000
테스트 세부 사항은 빌드와 관련이 있기 때문에, 이것은 테스터에게 어떻게 의미 있는 피드백을 제공할 수 있는지 말할 수 있는 기회입니다.

00:07:58.000 --> 00:08:03.000
테스트 세부 사항을 생각해 낼 때, 간단하게 유지하는 것이 좋습니다.

00:08:03.000 --> 00:08:09.000
짧은 문장이나 총알을 사용하여 읽을 수 있게 하고 잠재적인 테스터를 끌어들일 수 있습니다.

00:08:09.000 --> 00:08:15.000
또한 테스트할 특정 기능이나 알아야 할 알려진 문제를 불러내야 합니다.

00:08:15.000 --> 00:08:21.000
이것은 테스터들이 무엇을 탐구해야 하는지 이해하고 그들의 노력에 집중할 수 있도록 도와준다.

00:08:21.000 --> 00:08:29.000
마지막으로, 테스터와 빌드를 공유하기 전에 앱에 대한 테스트 정보를 추가해야 합니다.

00:08:29.000 --> 00:08:37.000
그렇게 하기 위해, 우리는 일반 정보 아래의 시험 정보 섹션을 클릭할 것입니다.

00:08:37.000 --> 00:08:41.000
베타 앱 설명과 이메일 주소를 추가해야 합니다.

00:08:41.000 --> 00:08:54.000
베타 앱 설명은 TestFlight 앱의 테스터에게 표시되며 이메일을 통해 전송된 테스터 피드백은 여기에 입력한 피드백 이메일 주소로 이동합니다.

00:08:54.000 --> 00:09:03.000
그리고 지금은 필요하지 않지만, 외부 테스터에게 앱을 배포하기 전에 베타 앱 검토 정보 섹션을 작성해야 합니다.

00:09:03.000 --> 00:09:12.000
우리는 앱당 테스트 정보 페이지를 한 번만 업데이트하고 정보가 변경되면 다시 업데이트하면 됩니다.

00:09:12.000 --> 00:09:18.000
그리고 그것으로, 우리의 빌드는 테스트를 시작할 준비가 되었다.

00:09:18.000 --> 00:09:24.000
테스트를 위해 빌드를 업로드하고 구성하면, 이제 테스터를 추가할 수 있습니다.

00:09:24.000 --> 00:09:29.000
TestFlight에 내부 및 외부의 두 가지 유형의 테스터를 추가할 수 있습니다.

00:09:29.000 --> 00:09:36.000
우리 앱은 여전히 상당히 새롭기 때문에, 우리 팀 내의 몇몇 사람들로부터 피드백을 받는 것으로 시작합시다.

00:09:36.000 --> 00:09:40.000
우리는 그것들을 내부 테스터로 앱에 추가할 것입니다.

00:09:40.000 --> 00:09:43.000
내부 테스터에 대해 조금 더 알아봅시다.

00:09:43.000 --> 00:09:53.000
내부 테스터는 App Store Connect 팀의 일부이며 최대 100명의 팀원을 앱의 내부 테스터로 지정할 수 있습니다.

00:09:53.000 --> 00:10:05.000
각 내부 테스터는 최대 30개의 장치에서 빌드를 설치하고 테스트할 수 있으며, 이 테스터는 팀의 일원이기 때문에 모든 새 빌드를 자동으로 배포하도록 선택할 수 있습니다.

00:10:05.000 --> 00:10:10.000
내부 테스터를 추가하려면, 먼저 내부 그룹을 만들어야 합니다.

00:10:10.000 --> 00:10:21.000
그렇게 하기 위해, 우리는 App Store Connect의 TestFlight 섹션으로 가서 내부 테스트 옆에 있는 더하기 버튼을 클릭하여 새로운 내부 테스트 그룹을 만들 것입니다.

00:10:21.000 --> 00:10:26.000
그룹은 반복 가능한 테스트 프로세스를 만들 수 있기 때문에 강력한 도구입니다.

00:10:26.000 --> 00:10:34.000
우리는 그룹 이름을 추가하고 자동 배포 활성화 버튼을 선택한 다음 생성을 클릭할 것입니다.

00:10:34.000 --> 00:10:37.000
이제 우리는 내부 그룹이 있다.

00:10:37.000 --> 00:10:44.000
우리가 자동 배포 활성화를 선택했기 때문에, 우리의 빌드는 이미 이 그룹에 추가되었습니다.

00:10:44.000 --> 00:10:52.000
앞으로, 이 내부 그룹은 하나씩 추가하지 않고도 업로드한 모든 빌드에 자동으로 액세스할 수 있습니다.

00:10:52.000 --> 00:11:01.000
우리 그룹이 만들어졌기 때문에, 이제 테스터를 추가해야 하므로 테스터 옆에 있는 파란색 더하기 버튼을 클릭하여 누구를 추가할 수 있는지 봅시다.

00:11:01.000 --> 00:11:11.000
관리자, 앱 관리자, 개발자 또는 마케팅 역할을 하는 모든 App Store Connect 팀원은 우리가 추가할 수 있는 테스터로 여기에 나타날 것입니다.

00:11:11.000 --> 00:11:15.000
우리는 앱당 총 100명의 내부 테스터를 추가할 수 있습니다.

00:11:15.000 --> 00:11:22.000
제롬, 멜리사 그리고 나를 선택하고 우리를 이 그룹에 추가하자.

00:11:22.000 --> 00:11:25.000
이제 우리는 내부 그룹의 테스터입니다.

00:11:25.000 --> 00:11:32.000
상태 열에서, 당신은 우리가 초대되었다는 것을 알게 될 것입니다.

00:11:32.000 --> 00:11:37.000
내가 테스터를 추가한 후, 그들은 우리의 푸드 트럭 앱을 테스트하기 위한 이메일 초대장을 받게 될 것이다.

00:11:37.000 --> 00:11:42.000
이메일에는 TestFlight에서 앱을 볼 수 있는 링크가 포함되어 있습니다.

00:11:42.000 --> 00:11:52.000
테스터가 TestFlight 앱을 열어 초대를 수락하고 푸드 트럭 앱을 설치할 때, 가장 먼저 보는 것은 테스트할 내용 섹션입니다.

00:11:52.000 --> 00:11:56.000
이 섹션에는 빌드를 설정할 때 추가한 테스트 세부 사항이 포함되어 있습니다.

00:11:56.000 --> 00:12:04.000
그래서 앱이 설치되기 전에도, 우리는 테스터들이 귀중한 피드백을 제공하는 방법을 이해할 수 있도록 도울 기회가 있었습니다.

00:12:04.000 --> 00:12:07.000
테스터는 또한 앱에 대한 자세한 내용을 볼 수 있습니다.

00:12:07.000 --> 00:12:15.000
예를 들어, TestFlight의 테스트 정보 섹션에 추가한 베타 앱 설명.

00:12:15.000 --> 00:12:23.000
제롬과 멜리사가 초대를 받고 푸드 트럭 앱을 설치하면, 우리는 첫 번째 테스터가 있습니다.

00:12:23.000 --> 00:12:29.000
우리의 앱이 일부 테스터의 손에 있기 때문에, 지금은 TestFlight에서 피드백이 어떻게 작동하는지 볼 수 있는 좋은 시기입니다.

00:12:29.000 --> 00:12:33.000
테스터는 여러 가지 방법으로 피드백을 제출할 수 있다.

00:12:33.000 --> 00:12:38.000
먼저, 피드백 제출 버튼이 있는 TestFlight 앱을 통해.

00:12:38.000 --> 00:12:46.000
이러한 방식으로 제출된 피드백은 앱의 테스트 정보 섹션에서 지정한 이메일로 전송됩니다.

00:12:46.000 --> 00:12:50.000
테스터는 또한 앱을 테스트하는 동안 스크린샷을 찍을 수 있습니다.

00:12:50.000 --> 00:12:56.000
스크린샷 미리보기에서 테스터는 더 많은 정보를 제공하기 위해 마크업을 편집하고 추가할 수 있습니다.

00:12:56.000 --> 00:13:03.000
이 방법을 통해 테스터는 스크린샷과 의견을 TestFlight에 직접 공유할 수 있습니다.

00:13:03.000 --> 00:13:07.000
푸드 트럭 앱이 충돌하면, 테스터는 충돌 보고서를 제출할 수 있습니다.

00:13:07.000 --> 00:13:14.000
그들은 보고서를 보내고 충돌의 맥락에 대한 피드백을 추가하는 데 동의할 수 있다.

00:13:14.000 --> 00:13:20.000
그룹의 페이지는 우리 앱에 대한 테스터 참여와 피드백에 대한 요약을 얻을 수 있는 좋은 장소입니다.

00:13:20.000 --> 00:13:28.000
상태 열을 보면, 우리는 제롬과 멜리사 둘 다 우리의 빌드를 설치했고 그들이 그것을 테스트하고 있다는 것을 알 수 있다.

00:13:28.000 --> 00:13:37.000
테스터의 세션, 충돌 및 피드백 수와 빌드당 발생한 세션 및 충돌 수를 볼 수 있습니다.

00:13:37.000 --> 00:13:42.000
우리가 조사해야 할 몇 가지 충돌과 피드백이 있는 것 같으니, 그렇게 하러 가자.

00:13:42.000 --> 00:13:48.000
먼저 왼쪽의 피드백 섹션 아래의 충돌 페이지로 갑시다.

00:13:48.000 --> 00:13:55.000
여기서 우리는 테스터가 제출한 모든 충돌을 볼 수 있으며 표에 요약된 충돌 세부 사항을 빠르게 볼 수 있습니다.

00:13:55.000 --> 00:14:01.000
그런 다음 상단의 필터를 사용하여 플랫폼, 빌드 또는 장치별 충돌을 볼 수 있습니다.

00:14:01.000 --> 00:14:12.000
시간대, 배터리 백분율 및 연결 유형과 같은 것을 포함하여 제롬이 제출한 충돌 보고서의 세부 사항을 보려면 이 충돌을 선택할 수 있습니다.

00:14:12.000 --> 00:14:19.000
이러한 세부 사항은 이 앱이 왜 충돌했는지 이해하려고 할 때 정말 유용할 수 있습니다.

00:14:19.000 --> 00:14:26.000
마찬가지로, 우리는 스크린샷 페이지로 이동하여 테스터가 제공한 스크린샷 피드백을 볼 수 있습니다.

00:14:26.000 --> 00:14:34.000
충돌 피드백과 마찬가지로, 장치, 빌드 및 OS 버전과 같은 필드로 필터링하여 피드백의 하위 집합을 볼 수 있습니다.

00:14:34.000 --> 00:14:39.000
이것은 우리가 다음 빌드에 만들 수 있는 변경 사항을 알리는 데 도움이 될 수 있다.

00:14:39.000 --> 00:14:43.000
우리는 또한 더 면밀히 검사하기 위해 스크린샷을 선택할 수 있습니다.

00:14:43.000 --> 00:14:57.000
스크린샷 세부 정보 보기에서 오른쪽 상단 모서리에 있는 다운로드 버튼이 있는 이미지를 장치에 다운로드할 수 있으며 Xcode에서 열기 버튼을 사용하여 Xcode Organizer에서 열 수도 있습니다.

00:14:57.000 --> 00:15:04.000
Xcode Organizer에서, 우리는 선택한 스크린샷과 푸드 트럭 앱의 다른 시각적 피드백과 충돌을 볼 수 있습니다.

00:15:04.000 --> 00:15:14.000
여기서 나는 내 개발팀에 메모를 쓸 수 있고 우리가 그것들을 다룰 때 피드백이 해결되었다고 표시할 수 있다.

00:15:14.000 --> 00:15:19.000
그것을 보세요, 우리는 TestFlight로 첫 번째 테스트를 거쳤습니다.

00:15:19.000 --> 00:15:23.000
우리의 내부 테스터들은 우리에게 통합할 수 있는 정말 훌륭한 피드백을 주었다.

00:15:23.000 --> 00:15:29.000
기억하세요, TestFlight는 또한 당신의 테스트 요구를 확장하고 지원하도록 설계되었습니다.

00:15:29.000 --> 00:15:34.000
그러니 테스트 청중을 확장하고 우리 팀 외부의 테스터들과 앱을 공유합시다.

00:15:34.000 --> 00:15:40.000
그렇게 하기 위해, 우리는 빌드에 외부 테스터를 추가할 것입니다.

00:15:40.000 --> 00:15:46.000
외부 테스터는 앱 베타 테스트에 초대한 팀 외부의 모든 테스터입니다.

00:15:46.000 --> 00:15:51.000
앱당 최대 10,000명의 외부 테스터를 초대할 수 있습니다.

00:15:51.000 --> 00:16:00.000
그리고 외부 테스터와 함께, 초대할 수 있는 두 가지 방법이 있습니다; 초대 또는 공개 링크 그리고 우리는 곧 그 두 가지 차이점에 대해 다룰 것입니다.

00:16:00.000 --> 00:16:06.000
외부 테스터와의 테스트를 시작하기 전에, 앱 리뷰에 빌드를 제출하십시오.

00:16:06.000 --> 00:16:12.000
이것은 TestFlight를 테스터가 테스트에 참여할 수 있는 안전하고 신뢰할 수 있는 장소로 유지합니다.

00:16:12.000 --> 00:16:20.000
마지막으로 명심해야 할 것은, TestFlight에서 테스터는 비용을 들이지 않고 앱 내 구매 경험을 테스트할 수 있다는 것입니다.

00:16:20.000 --> 00:16:26.000
이것은 그들이 가게에 출시되기 전에 이러한 경험을 개선하는 데 정말 도움이 될 수 있습니다.

00:16:26.000 --> 00:16:33.000
빌드가 앱 검토를 거치면, 외부 그룹을 만들고 테스터를 추가할 수 있습니다.

00:16:33.000 --> 00:16:42.000
내부 테스트에서 했던 것처럼, 우리는 외부 테스트 섹션 옆에 있는 파란색 더하기 버튼을 클릭하여 새 그룹을 만들 것입니다.

00:16:42.000 --> 00:16:45.000
우리 앱을 테스트하기 위해 몇몇 요리사들을 초대합시다.

00:16:45.000 --> 00:16:51.000
우리는 계속해서 이 그룹 셰프 테스터에게 전화한 다음 만들기를 클릭할 것입니다.

00:16:51.000 --> 00:16:57.000
모든 외부 그룹의 경우, 테스터 그룹이 액세스하고 싶은 빌드를 수동으로 추가해야 합니다.

00:16:57.000 --> 00:17:05.000
이 그룹의 대부분의 섹션은 내부 그룹과 비슷하지만 Public Link라는 새로운 섹션이 있다는 것을 알 수 있습니다.

00:17:05.000 --> 00:17:11.000
공개 링크는 이메일 외에도 외부 테스터에게 앱을 배포하는 또 다른 방법입니다.

00:17:11.000 --> 00:17:17.000
이메일 초대와 달리, 공개 링크를 사용하여 그들을 초대하기 위해 테스터의 이메일이 필요하지 않습니다.

00:17:17.000 --> 00:17:26.000
대신, 등록 제한이 있는 특정 링크를 생성하고 링크를 클릭하는 사람은 누구나 등록하고 앱의 테스터가 될 수 있습니다.

00:17:26.000 --> 00:17:32.000
소셜 채널이나 이메일 캠페인과 같이 원하는 대로 링크를 공유하도록 선택할 수 있습니다.

00:17:32.000 --> 00:17:38.000
일단 등록되면, 이 테스터는 피드백을 제공할 때 익명을 유지할 수 있는 옵션이 있습니다.

00:17:38.000 --> 00:17:42.000
셰프 테스터를 위한 공개 링크를 만들어 봅시다.

00:17:42.000 --> 00:17:47.000
그렇게 하기 위해, 우리는 공개 링크 활성화 버튼을 선택할 것입니다.

00:17:47.000 --> 00:17:55.000
활성화를 다시 클릭하여 이 그룹에 대한 공개 링크를 만들고 싶은지 확인한 다음 테스터 제한을 설정합니다.

00:17:55.000 --> 00:18:00.000
이것은 이 링크를 사용하여 등록할 수 있는 최대 인원수입니다.

00:18:00.000 --> 00:18:04.000
이 한도를 최대 10,000까지 낮게 설정할 수 있습니다.

00:18:04.000 --> 00:18:07.000
우리는 100부터 시작할 거야.

00:18:07.000 --> 00:18:11.000
더 작은 테스터 그룹으로 시작한 다음 확장하는 것이 항상 좋다.

00:18:11.000 --> 00:18:18.000
그리고 걱정하지 마세요, 그룹을 만들고 테스트가 진행되면 언제든지 제한을 편집할 수 있습니다.

00:18:18.000 --> 00:18:25.000
제한 설정을 클릭하면, 테스터를 초대하는 데 사용할 수 있는 URL이 있습니다.

00:18:25.000 --> 00:18:31.000
나는 사람들이 우리의 푸드 트럭 앱을 테스트하도록 초대하기 위해 내 소셜 미디어에 링크를 공유할 것이다.

00:18:31.000 --> 00:18:42.000
누군가가 링크를 클릭하면, 아직 다운로드하지 않았다면 TestFlight를 다운로드하도록 안내된 다음 푸드 트럭 앱을 다운로드할 수 있습니다.

00:18:42.000 --> 00:18:52.000
외부 테스터가 제공한 피드백은 내부 테스터 피드백 및 충돌과 같은 장소에 나타나므로 우리는 이미 무엇을 해야 할지, 어떻게 사용하여 앱을 개선하는지 알고 있습니다.

00:18:52.000 --> 00:19:04.000
이 정보와 진단을 사용하여 푸드 트럭 앱을 개선하고 몇 차례의 테스트를 더 거치면, 우리는 그것을 App Store에 게시할 준비가 되었습니다.

00:19:04.000 --> 00:19:14.000
테스트를 위해 TestFlight를 사용했기 때문에, 우리의 빌드는 이미 App Store Connect에 업로드되어 있으므로 App Store에 게시하기 위해 제출하는 데 몇 가지 단계가 필요할 것입니다.

00:19:14.000 --> 00:19:20.000
우리는 App Store Connect의 App Store 탭으로 가서 페이지의 세부 사항을 완료할 것입니다.

00:19:20.000 --> 00:19:25.000
다시 말하지만, 우리는 이미 빌드를 TestFlight에 업로드했기 때문에, 다시 업로드할 필요가 없습니다.

00:19:25.000 --> 00:19:30.000
대신, 메시지가 나타나면 드롭다운 메뉴에서 빌드를 선택할 것입니다.

00:19:30.000 --> 00:19:37.000
완료되면, 검토를 위해 제출을 클릭할 것이고 그게 다야.

00:19:37.000 --> 00:19:41.000
기억하세요, 테스트는 완료된 경험이 아닙니다.

00:19:41.000 --> 00:19:48.000
앱이 App Store에 게시된 후에도 지속적인 개발 주기의 일부로 모범 사례입니다.

00:19:48.000 --> 00:19:57.000
TestFlight를 테스트 및 출시 프로세스에 통합하는 것을 고려할 때, 우리는 당신의 테스트 노력을 더욱 쉽게 할 수 있는 추가적인 방법을 공유하고 싶었습니다.

00:19:57.000 --> 00:20:02.000
그것을 위해, 나는 그것을 제롬에게 돌려줄 것이다.

00:20:02.000 --> 00:20:10.000
올해 우리는 또한 TestFlight와 App Store Connect, Xcode Cloud에 앱을 업로드하는 더 쉬운 방법을 도입했습니다.

00:20:10.000 --> 00:20:19.000
Xcode Cloud는 Apple 개발자를 위해 Xcode 및 디자인에 내장된 지속적인 통합 및 제공 서비스입니다.

00:20:19.000 --> 00:20:33.000
앱을 구축하고, 자동화된 테스트를 병렬로 실행하고, 테스터에게 앱을 제공하는 데 도움이 되는 클라우드 기반 도구를 통합하여 고품질 앱의 개발과 전달을 가속화합니다.

00:20:33.000 --> 00:20:36.000
그것은 TestFlight의 완벽한 동반자이다.

00:20:36.000 --> 00:20:46.000
Xcode Cloud는 Xcode Cloud에 어떤 작업을 수행하고 언제 수행해야 하는지 알려주는 구성인 워크플로우와 함께 작동합니다.

00:20:46.000 --> 00:20:50.000
푸드 트럭을 위한 워크플로우를 만들어 봅시다.

00:20:50.000 --> 00:20:53.000
이것은 기본 워크플로우입니다.

00:20:53.000 --> 00:21:05.000
워크플로우는 시작 조건, 빌드 환경, 수행할 작업 세트 및 배포 및 알림과 같은 사후 작업으로 구성되어 있습니다.

00:21:05.000 --> 00:21:13.000
기본적으로 사후 작업이 없으므로 워크플로우를 편집하고 TestFlight 배포를 위한 사후 작업을 추가합시다.

00:21:13.000 --> 00:21:20.000
먼저, 아카이브 작업에서, 저는 TestFlight 빌드를 위한 배포 준비를 변경할 것입니다.

00:21:20.000 --> 00:21:27.000
이 워크플로우가 내부 배포에만 사용되기를 원하므로 내부 테스트 전용 옵션을 선택하겠습니다.

00:21:27.000 --> 00:21:35.000
외부 테스트나 App Store를 위해 빌드를 준비하고 싶다면, TestFlight와 App Store 옵션을 선택할 것입니다.

00:21:35.000 --> 00:21:41.000
그런 다음 포스트 액션 더하기 기호를 클릭하고 아카이브 단계 후에 하고 싶은 것을 선택할 수 있습니다.

00:21:41.000 --> 00:21:46.000
이 경우, TestFlight 내부 테스트.

00:21:46.000 --> 00:21:55.000
그런 다음 이 워크플로우를 위한 특정 테스터 그룹을 선택하고, 여기서 우리가 이전에 만든 QA 팀을 선택하고 추가를 클릭합니다.

00:21:55.000 --> 00:22:07.000
내 워크플로우가 내 시작 조건에 의해 트리거되면, Xcode Cloud는 내 앱을 빌드하고 자동으로 App Store Connect에 업로드하고 내 QA 팀은 TestFlight의 새로운 빌드에 대한 알림을 받게 될 것이다.

00:22:07.000 --> 00:22:11.000
난 그냥 저장을 클릭하고 그게 다야.

00:22:11.000 --> 00:22:19.000
Xcode Cloud는 Xcode와 TestFlight 앱 바로 옆에 있는 App Store Connect에서 직접 액세스할 수 있습니다.

00:22:19.000 --> 00:22:26.000
Xcode Cloud와 워크플로우에 대한 자세한 내용은 WWDC 비디오를 확인할 수 있습니다.

00:22:26.000 --> 00:22:33.000
TestFlight를 지속적인 개발 주기에 통합할 때, 명심해야 할 몇 가지 사항이 있습니다.

00:22:33.000 --> 00:22:36.000
작게 시작한 다음, 확장하세요.

00:22:36.000 --> 00:22:47.000
앱을 크게 변경하거나 새로운 기능을 도입하는 경우, 모든 10,000명의 테스터에게 배포하기 전에 이러한 변경 사항을 테스트할 수 있도록 시간이 지남에 따라 테스터를 추가하는 것을 고려하십시오.

00:22:47.000 --> 00:22:56.000
기억하세요, 외부 테스터는 또한 당신의 잠재적인 사용자이므로 당신은 그들의 경험을 염두에 두고 싶습니다.

00:22:56.000 --> 00:23:04.000
각 빌드와 테스트로 무엇을 달성하고 싶은지 알면, 더 원활한 테스트 프로세스를 만드는 데 도움이 될 것입니다.

00:23:04.000 --> 00:23:14.000
그룹을 사용하여 반복 가능한 테스트 프로세스를 만들고, 그룹은 테스터를 관리하고 빌드를 빠르게 배포할 수 있는 좋은 방법입니다.

00:23:14.000 --> 00:23:22.000
그룹을 설정하고 테스터를 추가하면, 테스트 주기를 시작하고 테스터와 새 빌드를 더 빨리 공유할 수 있습니다.

00:23:22.000 --> 00:23:27.000
그리고 마지막으로, 개발 과정에서 Xcode Cloud를 사용해 보세요.

00:23:27.000 --> 00:23:36.000
이를 통해 TestFlight 워크플로우를 자동화하고 출시 사이의 시간을 줄여 앱의 전반적인 품질을 향상시킬 수 있습니다.

00:23:36.000 --> 00:23:46.000
이 프레젠테이션이 TestFlight를 사용하여 테스터를 참여시키고 베타 앱에 대한 귀중한 피드백을 얻는 방법을 더 잘 이해하는 데 도움이 되었기를 바랍니다.

00:23:46.000 --> 23:59:59.000
TestFlight, 문서 링크 등에 대한 자세한 내용은 Apple 개발자 웹사이트를 확인하세요.

