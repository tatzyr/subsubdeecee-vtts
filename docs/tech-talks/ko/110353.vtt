WEBVTT

00:00:00.000 --> 00:00:03.000
안녕하세요, 제 이름은 팀 치엔입니다.

00:00:03.000 --> 00:00:09.000
저는 여기 Apple의 MapKit 팀의 엔지니어이며, MapKit JS에서 일하고 있습니다.

00:00:09.000 --> 00:00:22.000
오늘 저는 MapKit JS를 웹 애플리케이션과 통합할 때 최상의 경험을 제공하기 위해 사용할 수 있는 몇 가지 흥미로운 새로운 기능에 대해 이야기할 것입니다.

00:00:22.000 --> 00:00:31.000
2018년에 MapKit JS가 도입된 이후, 우리는 매년 새로운 기능을 추가하기 위해 끊임없이 노력해 왔습니다.

00:00:31.000 --> 00:00:52.000
그것으로, MapKit JS는 icloud.com의 내 찾기 서버와 같은 많은 웹사이트와 DuckDuckGo와 같은 제3자 웹사이트, 그리스의 부동산 검색 웹사이트와 같은 많은 웹사이트에 통합된 Apple의 웹 오퍼링의 필수 불가결한 부분이 되었습니다.

00:00:52.000 --> 00:00:59.000
이 웹사이트가 지도 기능을 현지화하는 MapKit JS의 기능을 활용하고 있다는 것을 알게 될 것입니다.

00:00:59.000 --> 00:01:08.000
우리는 간단한 포함 및 초기화로 모든 웹 애플리케이션에서 MapKit JS를 매우 쉽게 채택할 수 있도록 했습니다.

00:01:08.000 --> 00:01:18.000
그러나, 우리는 당신에게 애플리케이션의 성능을 최적화하는 방식으로 MapKit JS를 채택할 수 있는 유연성을 제공하고자 합니다.

00:01:18.000 --> 00:01:41.000
그래서 올해부터, 우리는 성능에 눈을 돌리고 당신의 페이지를 더 반응적이고, 더 빠르게 로드할 수 있으며, 더 많은 제어를 제공하도록 설계된 방식으로, 필요할 때 필요한 기능만 포함할 수 있도록 하는 방법을 살펴보았습니다.

00:01:41.000 --> 00:02:05.000
오늘, 저는 고성능 MapKit JS 로딩을 위한 새로운 마크업, 필요에 따라 추가 MapKit JS 라이브러리를 로드하는 기능, 그리고 마지막으로 애플리케이션이 사용자에게 원하는 지도 기능을 표시하는 새로운 방법을 포함하여 그렇게 할 수 있는 세 가지 새로운 기능을 소개하게 되어 기쁩니다.

00:02:05.000 --> 00:02:16.000
이제 이러한 새로운 기능이 어떻게 웹 애플리케이션을 개선할 수 있는지 보여주기 위해, 동료 해적들을 위한 대화형 보물 지도를 만들고 있다고 가정해 봅시다.

00:02:16.000 --> 00:02:20.000
당신은 MapKit JS의 기본 구현을 채택했습니다.

00:02:20.000 --> 00:02:34.000
그러나, 형편없는 해적선 Wi-Fi를 통해 이 페이지를 볼 때 로드하는 데 너무 오래 걸리고 사용자는 지도가 나타날 때까지 너무 오래 기다려야 하며, 당신의 배를 참을성이 없게 만듭니다.

00:02:34.000 --> 00:02:41.000
따라서 반란을 방지하기 위해, 새로운 고성능 MapKit JS 로딩 마크업을 사용할 수 있습니다.

00:02:41.000 --> 00:02:50.000
웹 앱을 조정하는 데 사용할 추가 속성으로 확장된 마크업에 대한 기본 구현을 바꿉니다.

00:02:50.000 --> 00:03:02.000
첫째, MapKit JS는 이제 시작할 수 있는 최소한의 코드만 포함하는 새로운 자바스크립트 번들 market.core.js를 제공합니다.

00:03:02.000 --> 00:03:08.000
다음으로, 우리는 MapKit JS에게 필요한 기능의 하위 집합을 알리고 싶습니다.

00:03:08.000 --> 00:03:16.000
여기서, 우리는 대화형 지도를 보여주기 위한 최소 기능 세트인 지도 라이브러리만 지정합니다.

00:03:16.000 --> 00:03:28.000
우리는 MapKit JS가 비동기 속성을 사용하여 페이지 로드를 차단하는 것을 방지하고 로딩이 완료되면 데이터 콜백 속성으로 지정된 콜백을 호출할 것입니다.

00:03:28.000 --> 00:03:39.000
MapKit JS는 더 이상 페이지 로딩을 차단하지 않기 때문에, 웹 앱은 처음으로 인터페이스를 평가하기 전에 준비 상태를 주장해야 합니다.

00:03:39.000 --> 00:03:48.000
예를 들어, MapKit JS가 준비되면 MapKit 인터페이스로 해결되는 비동기 함수가 있습니다.

00:03:48.000 --> 00:03:55.000
항상 그렇듯이, MapKit JS는 로드되자마자 글로벌 윈도우 객체에서 사용할 수 있습니다.

00:03:55.000 --> 00:04:02.000
MapKit 객체가 정의되지 않은 경우, MapKit JS가 아직 로드되지 않았음을 의미합니다.

00:04:02.000 --> 00:04:07.000
게다가, 우리는 초기 라이브러리가 로드되었는지 확인하고 싶습니다.

00:04:07.000 --> 00:04:14.000
우리가 데이터 라이브러리의 속성을 사용하여 마크업에서 지도 라이브러리를 요청했다는 것을 기억하세요.

00:04:14.000 --> 00:04:22.000
두 테스트 중 하나에 실패하면 데이터 콜백 속성을 사용하는 콜백 세트가 호출되지 않았음을 의미합니다.

00:04:22.000 --> 00:04:31.000
여기서 우리는 콜백을 비동기 함수에 대한 약속으로 변환하고 약속 해결 직후 콜백을 정리합니다.

00:04:31.000 --> 00:04:37.000
그것으로, 우리는 MapKit JS가 이 기능이 돌아올 때 롤할 준비가 되었음을 보장했습니다.

00:04:37.000 --> 00:04:40.000
이제, 구문으로 돌아가세요.

00:04:40.000 --> 00:04:56.000
브라우저가 MapKit JS CDN으로 가는 모든 요청에 대해 단일 HTTP/2 연결을 재사용할 수 있는 교차 출처 속성을 포함하여 고성능 마크업에는 몇 가지 다른 유용한 속성이 있습니다.

00:04:56.000 --> 00:05:03.000
우리는 또한 MapKit JS가 그렇게 할 기회가 있는 즉시 초기화되기를 바랍니다.

00:05:03.000 --> 00:05:07.000
우리는 마크업에 초기 토큰을 설정함으로써 그것을 달성할 수 있다.

00:05:07.000 --> 00:05:18.000
그것을 합치면 우리는 페이지가 더 빨리 로드될 것이지만, 우리는 아직 거기에 있지 않다.

00:05:18.000 --> 00:05:30.000
우리는 지도 라이브러리만 요청했기 때문에, 해적선과 보물을 지도에 다시 넣을 수 있도록 주석 라이브러리를 로드해야 합니다.

00:05:30.000 --> 00:05:34.000
그리고 그것이 우리의 두 번째 최적화가 유용한 곳이다.

00:05:34.000 --> 00:05:40.000
MapKit 다운로드만을 위한 새로운 방법이 제공됩니다.

00:05:40.000 --> 00:05:44.000
필요에 따라 추가 라이브러리를 비동기적으로 로드합니다.

00:05:44.000 --> 00:05:51.000
그리고 로드하는 라이브러리에 다른 라이브러리가 필요한 경우, 자동으로 처리됩니다.

00:05:51.000 --> 00:05:54.000
그리고 여기 작동하고 있어.

00:05:54.000 --> 00:06:01.000
주석 라이브러리를 로드하려면 MapKit 다운로드 방법을 호출하기만 하면 됩니다.

00:06:01.000 --> 00:06:09.000
로드 이벤트에 대한 리스너를 추가한 다음, 호출될 때 주석을 추가하세요.

00:06:09.000 --> 00:06:13.000
그리고 물론, 당신은 주석보다 더 많은 것을 로드할 수 있습니다.

00:06:13.000 --> 00:06:20.000
예를 들어, 서비스는 검색 및 지오코더와 같은 모든 서비스 API를 포함한다.

00:06:20.000 --> 00:06:26.000
전체 지도는 MapKit 지도 클래스에서 사용할 수 있는 모든 기능을 로드합니다.

00:06:26.000 --> 00:06:36.000
그리고 여기에는 기본 지도, 오버레이, 주석 및 사용자 위치 표시가 포함됩니다.

00:06:36.000 --> 00:06:45.000
그리고 GeoJSON은 GeoJSON 가져오기를 로드합니다.

00:06:45.000 --> 00:06:52.000
이제, 이것은 좋은 로딩 경험이지만, 우리는 이것보다 훨씬 더 잘할 수 있다.

00:06:52.000 --> 00:07:00.000
이것은 우리가 오늘 소개할 세 번째 기능입니다: 우선 순위가 지정된 지도 시작.

00:07:00.000 --> 00:07:11.000
새로운 로드 우선 순위 속성으로, 우리는 MapKit JS에게 야생 해적에게 더 나은 출발점을 제공하기 위해 관심 지점을 더 빨리 보여주도록 지시할 수 있습니다.

00:07:11.000 --> 00:07:19.000
로드 우선 순위를 설정할 때, 사용자가 필요로 하는 최고의 경험을 제공해야 합니다.

00:07:19.000 --> 00:07:24.000
세 가지 로드 우선 순위 옵션이 있습니다.

00:07:24.000 --> 00:07:32.000
관심 지점은 MapKit 지도에 주석을 달기 전에도 지도 라벨과 관심 지점을 더 빨리 표시하도록 지시합니다.

00:07:32.000 --> 00:07:40.000
반면에, 토지 커버는 토지 커버, 도로 및 국경에만 서비스를 제공할 것이다.

00:07:40.000 --> 00:07:55.000
이러한 옵션은 시작 중 회전이나 뷰포트의 정확한 지도 영역과 같은 일부 지도 동작을 방해하기 때문에, 없음으로 설정하여 로드 우선 순위를 완전히 끌 수 있습니다.

00:07:55.000 --> 00:07:59.000
그리고 이것이 실제로 보이는 모습입니다.

00:07:59.000 --> 00:08:05.000
지도 생성자 옵션에서 로드 우선 순위를 사용하여 원하는 우선 순위를 지정하기만 하면 됩니다.

00:08:05.000 --> 00:08:15.000
여기서 우리는 MapKit 지도에 관심 지점을 먼저 보여달라고 요청합니다.

00:08:15.000 --> 00:08:19.000
이제 그것은 훨씬 더 나은 로딩 경험이다.

00:08:19.000 --> 00:08:27.000
오늘, 우리는 당신의 애플리케이션의 지도 로드 경험을 개선하기 위해 설계된 세 가지 새로운 기능을 도입했습니다.

00:08:27.000 --> 00:08:36.000
우리는 당신이 MapKit JS를 통합하면서 전반적인 사용자 경험이 원활하고 손상되지 않도록 보장할 수 있다고 믿습니다.

00:08:36.000 --> 00:08:44.000
기존 애플리케이션의 경우, 각각 고유한 이점을 가져올 것이기 때문에 이러한 새로운 기능을 점진적으로 채택할 수 있습니다.

00:08:44.000 --> 00:08:50.000
아래에 표시된 자세한 문서와 지도 서버 API 세션을 확인하세요.

00:08:50.000 --> 00:08:55.000
우리는 당신이 이 새로운 기능을 어떻게 활용하는지 보기를 기대합니다.

00:08:55.000 --> 23:59:59.000
고마워.

