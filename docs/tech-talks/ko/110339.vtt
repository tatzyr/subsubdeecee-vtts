WEBVTT

00:00:00.000 --> 00:00:05.000
안녕하세요, 제 이름은 냇 브라운이고, 저는 애플에서 게임 기술을 연구하는 엔지니어 팀을 관리합니다.

00:00:05.000 --> 00:00:14.000
오늘 저는 당신의 애플리케이션과 게임에서 주요 실시간 그래픽 통계를 보고 수집하기 위한 헤드업 디스플레이에 대해 말씀드리고자 합니다.

00:00:14.000 --> 00:00:16.000
메탈 퍼포먼스 HUD를 살펴봅시다.

00:00:16.000 --> 00:00:24.000
활성화되면, 애플리케이션의 오른쪽 상단 모서리에 오버레이로 표시됩니다.

00:00:24.000 --> 00:00:32.000
그 목적은 당신과 당신의 테스터가 잠재적인 성능 문제를 쉽게 발견하고 나중에 분석을 위해 몇 가지 기본 정보를 기록할 수 있도록 돕는 것입니다.

00:00:32.000 --> 00:00:51.000
HUD는 기존 디버깅 및 성능 분석 도구를 보완하는 것이 아니라, 재현하기 어려운 성능 문제와 그래픽 결함을 더 빠르게 재현, 분석 및 수정하는 데 도움이 되는 스크린샷과 로그만으로 품질 보증 팀과 고객으로부터 유용한 정보를 얻을 수 있도록 도와줍니다.

00:00:51.000 --> 00:00:55.000
HUD가 어떤 데이터를 보여주고 수집할 수 있는지 살펴봅시다.

00:00:55.000 --> 00:01:05.000
HUD의 상단 라인은 GPU와 디스플레이, 사용 중인 장치, 대상 해상도 및 디스플레이의 스케일링 상태에 대한 정보를 보여줍니다.

00:01:05.000 --> 00:01:10.000
HUD는 당신이 디스플레이의 직접 경로 또는 복합 경로에 있는지 보여줍니다.

00:01:10.000 --> 00:01:18.000
직접 경로는 드로어블을 제시할 때와 화면에 나타날 때 사이에 버퍼링이 가장 적고 새로 고침 간격이 가장 적습니다.

00:01:18.000 --> 00:01:27.000
합성될 때, 시스템 UI 요소 또는 화면을 겹치는 추가 레이어로 인해 추가 버퍼링 및 표시 대기 시간이 있을 수 있습니다.

00:01:27.000 --> 00:01:32.000
또한 사용 중인 물리적 디스플레이의 최대 재생률을 볼 수 있습니다.

00:01:32.000 --> 00:01:41.000
가변 재생률 디스플레이의 경우, 디스플레이의 최소 재생률도 볼 수 있으므로 사용 가능한 재생률 범위를 볼 수 있습니다.

00:01:41.000 --> 00:01:55.000
다음으로, 실시간 데이터의 첫 번째 열은 헤르츠 또는 초당 프레임의 순간 프레임 속도, 사전 시간 또는 밀리초 단위의 프레임 시간 또는 프레임 간격으로도 알려진 선물 사이의 시간을 보여줍니다.

00:01:55.000 --> 00:02:02.000
그리고 마지막으로, 프레임 간격으로 완료된 GPU 작업의 양도 밀리초 단위로 측정되었다.

00:02:02.000 --> 00:02:11.000
두 번째 열은 지난 1초 반 동안 프레임에서 보낸 프레임 속도, 프레임 간격 및 GPU 시간의 가장 낮은 값에 대한 더 많은 정보를 보여줍니다.

00:02:11.000 --> 00:02:17.000
이 낮은 값이 평균에서 크게 벗어났을 때 HUD는 빨간색으로 강조 표시된다.

00:02:17.000 --> 00:02:32.000
HUD의 마지막 숫자 데이터 열은 마지막 1.5초 동안 가장 높은 순간 프레임 속도, 마지막 1.5초 동안 가장 큰 단일 프레임 시간, 그리고 마지막 1.5초의 프레임 간격에서 수행된 작업의 밀리초 단위로 가장 높은 GPU 비용을 보여줍니다.

00:02:32.000 --> 00:02:38.000
평균에 비해 비정상적으로 높은 프레임 간격과 GPU 시간은 여기서 다시 한 번 빨간색으로 강조 표시됩니다.

00:02:38.000 --> 00:02:50.000
HUD 하단의 마지막 섹션은 시간이 지남에 따라 잠재적인 누출을 발견하는 데 도움이 되는 프로세스 및 GPU 메모리 소비 정보와 현재 간격과 GPU 소요된 시간의 이중선 그래프를 보여줍니다.

00:02:50.000 --> 00:03:04.000
이 정보의 목적은 귀하와 귀하의 테스터가 놓칠 수 있는 일시적인 프레임 드롭을 발견하고 고급 Xcode 및 Instruments 도구를 사용하여 더 깊은 테스트, 디버깅 및 성능 튜닝을 격리할 수 있도록 돕는 것입니다.

00:03:04.000 --> 00:03:07.000
그래서 메탈 퍼포먼스 HUD를 어떻게 켜나요?

00:03:07.000 --> 00:03:16.000
개발자들이 이러한 형태의 데이터 수집과 상호 작용하고 자동화하기를 원하는 많은 방법이 있다는 것을 알고 있기 때문에 그것을 할 수 있는 많은 다른 방법이 있다는 것을 알게 되면 놀랄 것입니다.

00:03:16.000 --> 00:03:22.000
첫 번째는 iOS, macOS 또는 tvOS용으로 개발하는 동안 Xcode 14에서 바로 나온 것입니다.

00:03:22.000 --> 00:03:34.000
진단 탭 아래의 실행 계획에서 그래픽 개요 보기를 선택하여 HUD를 켜고 로그 그래픽 개요를 선택하여 시스템 로그에 대한 로깅 데이터를 활성화하는 옵션을 볼 수 있습니다.

00:03:34.000 --> 00:03:44.000
iOS와 tvOS에서 장치를 Xcode에 연결하고 개발을 위해 활성화한 경우, 개발자 설정을 사용하여 HUD를 켜고 로깅할 수 있습니다.

00:03:44.000 --> 00:03:50.000
설정 &gt; 개발자 설정으로 이동하여 아래로 스크롤하여 HUD를 활성화하고 선택적으로 로깅하세요.

00:03:50.000 --> 00:04:01.000
iOS와 tvOS에서 HUD는 자신의 애플리케이션에 대해서만 표시되고 로깅을 수행합니다. 즉, Xcode를 통해 또는 TestFlight를 사용하여 설치한 애플리케이션입니다.

00:04:01.000 --> 00:04:06.000
macOS에서는 환경 변수를 통해 Xcode 외부에서 HUD를 활성화할 수 있습니다.

00:04:06.000 --> 00:04:20.000
MTL_HUD_ENABLED 환경 변수를 1로 설정하여 HUD를 표시하고 MTL_HUD_LOGGING_ENABLED 환경 변수를 1로 설정하여 로깅을 트리거하십시오.

00:04:20.000 --> 00:04:25.000
유용할 수 있는 또 다른 옵션은 애플리케이션의 사용자 기본값을 사용하는 것입니다.

00:04:25.000 --> 00:04:38.000
macOS, iOS 및 tvOS에서는 표준 사용자 기본값에서 MetalForceHudEnabled 키를 true로 설정할 수 있으며 HUD가 표시되고 애플리케이션의 후속 실행을 위해 로깅이 발생합니다.

00:04:38.000 --> 00:04:44.000
macOS에서는 모든 금속 기반 애플리케이션에 대한 HUD 쇼를 갖도록 글로벌 값을 설정할 수 있습니다.

00:04:44.000 --> 00:04:49.000
마지막으로, MetalHUDEnabled 키를 Info.plist에 추가하여 항상 HUD를 활성화할 수 있습니다.

00:04:49.000 --> 00:04:59.000
이제 HUD가 활성화되면 CAMetalLayer developerHUDProperties 사전을 사용하여 HUD를 표시 및 숨기고 로깅을 활성화 및 비활성화할 수 있습니다.

00:04:59.000 --> 00:05:02.000
모드 키를 기본값으로 설정하면 HUD가 표시됩니다.

00:05:02.000 --> 00:05:04.000
열쇠를 지우면 HUD가 숨겨진다.

00:05:04.000 --> 00:05:07.000
로깅 키를 기본값으로 설정하면 로깅이 활성화됩니다.

00:05:07.000 --> 00:05:10.000
이 키를 지우면 로깅이 비활성화됩니다.

00:05:10.000 --> 00:05:20.000
HUD를 표시하고 숨기기 위해 내부 빌드에서 테스터에게 UI 토글을 제공하려면 Info.plist 키를 추가하고 이 API를 사용할 수 있습니다.

00:05:20.000 --> 00:05:23.000
이제 Metal Performance HUD 로그가 무엇인지 살펴봅시다.

00:05:23.000 --> 00:05:32.000
초당 한 번 정도 Metal Performance HUD는 수집 중인 데이터를 요약하여 시스템 로그에 데이터를 기록하므로 자신만의 방식으로 분석할 수 있습니다.

00:05:32.000 --> 00:05:38.000
콘솔 애플리케이션을 실행하고 스트링 메탈-HUD로 출력을 필터링하기만 하면 됩니다.

00:05:38.000 --> 00:05:43.000
각 결과 라인은 스트링 메탈-HUD로 시작할 것이다.

00:05:43.000 --> 00:05:47.000
다음은 첫 번째 프레임 번호, 그 다음은 예상 프레임 누락의 수입니다.

00:05:47.000 --> 00:05:49.000
이 경우, 아무도 놓치지 않았다.

00:05:49.000 --> 00:05:51.000
다음으로, 프로세스 메모리 사용.

00:05:51.000 --> 00:05:55.000
여기는 56.05 메가바이트입니다.

00:05:55.000 --> 00:06:00.000
그 후에는 각 프레임의 현재 간격과 GPU 시간이 밀리초입니다.

00:06:00.000 --> 00:06:12.000
이 모든 데이터는 오프라인에서 분석하거나 게임플레이를 캡처한 비디오와 연관시켜 추가 디버깅 및 최적화에 집중할 수 있는 위치에 대한 훨씬 더 정확한 통찰력을 제공하는 데 유용할 수 있습니다.

00:06:12.000 --> 00:06:15.000
오늘 Metal Performance HUD에 대해 배우는 것을 즐겼기를 바랍니다.

00:06:15.000 --> 00:06:17.000
HUD를 사용하여 게임의 성능을 시각화하세요.

00:06:17.000 --> 00:06:23.000
미묘한 성능 문제를 발견하고 악기와 같은 고급 도구를 사용할 위치를 선택하는 데 도움이 될 것입니다.

00:06:23.000 --> 00:06:30.000
모든 Apple 플랫폼에서 쉽게 활성화할 수 있으며, 사용자 지정 분석을 위해 기록한 데이터를 캡처할 수도 있습니다.

00:06:30.000 --> 00:06:35.000
게임과 그래픽 애플리케이션을 최적화하는 데 유용하기를 진심으로 바랍니다.

00:06:35.000 --> 00:06:40.000
피드백이 있다면, feedbackassistant.apple.com을 통해 보내주세요.

00:06:40.000 --> 23:59:59.000
나와 함께 해줘서 고마워.

