WEBVTT

00:00:01.000 --> 00:00:09.000
앱을 iOS 11 SDK에 연결하는 것은 iPhone X의 슈퍼 레티나 디스플레이를 활용하기 위해 해야 할 유일한 일입니다.

00:00:09.000 --> 00:00:19.000
앱이 주로 표준 UIKit 컨트롤을 기반으로 하고 자동 레이아웃을 사용하는 경우, 대부분의 작업이 UIKit에 의해 수행되기 때문에 상태가 좋습니다.

00:00:19.000 --> 00:00:27.000
사용자 지정 컨트롤을 사용하거나, 자동 레이아웃을 사용하지 않거나, 많은 게임처럼 사용자 지정 전체 화면 앱이라면, 걱정하지 마세요.

00:00:27.000 --> 00:00:35.000
당신이 해야 할 일이 있을 수 있지만, 어렵지 않으며 새로운 안전 구역 레이아웃 가이드와 같은 도구에 내장된 많은 지원이 있습니다.

00:00:35.000 --> 00:00:43.000
두 경우 모두, 특히 풍경에서 앱을 철저히 테스트하여 모든 것이 올바르게 보이는지 확인하고 싶을 것입니다.

00:00:43.000 --> 00:00:54.000
최신 버전의 Xcode에는 iPhone X에 대한 시뮬레이터 지원이 포함되어 있어 대부분의 레이아웃 변경, 특히 안전 영역 존중과 관련된 조정을 할 수 있습니다.

00:00:54.000 --> 00:01:02.000
메탈을 사용하는 앱이나 전면 카메라와 같은 하드웨어 기능과 같은 일부 앱의 경우 실제 장치를 사용해야 할 수도 있습니다.

00:01:02.000 --> 00:01:05.000
새로운 iPhone X 시뮬레이터를 간단히 살펴봅시다.

00:01:05.000 --> 00:01:11.000
다른 iPhone 또는 iPad 시뮬레이터와 마찬가지로, 많은 내장 시스템 앱에 액세스할 수 있습니다.

00:01:11.000 --> 00:01:18.000
이것은 iPhone X에서 다양한 UIKit 구성 요소가 어떻게 작동하는지에 대한 예를 볼 수 있는 좋은 방법입니다.

00:01:18.000 --> 00:01:27.000
예를 들어, 파일 앱은 통합 검색 표시줄이나 큰 탐색 표시줄 제목과 같은 많은 최신 iOS 11 API를 보여줍니다.

00:01:27.000 --> 00:01:34.000
그리고 iCloud Drive에 액세스할 수 있는 시뮬레이터에서 iCloud 계정에 로그인할 수 있다는 것을 잊지 마세요.

00:01:34.000 --> 00:01:40.000
이것은 파일을 정말 쉽게 전송하거나 사진과 같은 콘텐츠를 시뮬레이터로 테스트할 수 있게 해준다.

00:01:40.000 --> 00:01:47.000
또 다른 좋은 예는 iPhone X에서 테이블 뷰가 어떻게 작동하는지 보여주는 연락처 앱입니다.

00:01:47.000 --> 00:01:58.000
가장자리에서 가장자리로 가는 섹션 헤더와 같은 동작을 볼 수 있는 시뮬레이터를 가로로 회전해야 하지만, 테이블 내용은 안전 영역에 따라 들여쓰기된 상태로 유지됩니다.

00:01:58.000 --> 00:02:01.000
우리는 나중에 테이블 뷰에 대해 더 이야기할 것이다.

00:02:01.000 --> 00:02:05.000
내가 작업하는 앱인 WWDC 앱으로 넘어가자.

00:02:05.000 --> 00:02:12.000
나는 그것을 iPhone X로 옮기는 데 약간의 시간을 보냈고, 내가 마주친 몇 가지 레이아웃 문제와 그것들을 어떻게 해결했는지 공유하고 싶다.

00:02:12.000 --> 00:02:16.000
WWDC 앱은 실제로 꽤 전형적인 실제 앱이다.

00:02:16.000 --> 00:02:22.000
그것은 수년 동안 존재해 왔으며 해마다 다양한 엔지니어들에 의해 작업되어 왔다.

00:02:22.000 --> 00:02:30.000
많은 표준 컨트롤과 자동 레이아웃을 사용하지만, 사용자 지정 보기도 있으며, 앱의 이전 부분은 대신 수동 레이아웃을 합니다.

00:02:30.000 --> 00:02:36.000
나는 그것을 사용하여 iPhone X를 위해 업데이트해야 하는 세 가지 영역을 강조할 것이다.

00:02:36.000 --> 00:02:41.000
Xcode 9에서 프로젝트를 열고 기본 SDK를 iOS 11로 설정하는 것으로 시작했습니다.

00:02:41.000 --> 00:02:44.000
그래서 우리는 모두 기본 해상도로 실행할 준비가 되었다.

00:02:44.000 --> 00:02:55.000
앱으로 이 작업을 수행할 때, 전체 iPhone X 해상도로 실행되는 것을 볼 수 없다면, Launch Storyboard를 구성했는지 다시 확인하십시오. 그것도 필요하기 때문입니다.

00:02:55.000 --> 00:02:59.000
좋아, 우리의 초기 보기는 비디오 탭이고, 이것은 꽤 좋아 보인다.

00:02:59.000 --> 00:03:07.000
이것은 올해 표준 탐색 모음 및 도구 모음 컨트롤과 함께 자동 레이아웃과 함께 UICollectionView를 사용하는 모든 새로운 코드였습니다.

00:03:07.000 --> 00:03:14.000
그래서 나는 UIKit이 나를 위해 대부분의 일을 하고 있기 때문에 대부분의 인터페이스가 올바르게 배치된다는 사실에 정말 놀라지 않는다.

00:03:14.000 --> 00:03:17.000
우리가 자동 레이아웃을 사용하지 않는 한 곳은 뉴스 탭에 있습니다.

00:03:17.000 --> 00:03:19.000
그거 한 번 보자.

00:03:19.000 --> 00:03:24.000
이 보기는 UI의 수동 레이아웃을 하고 있음에도 불구하고 실제로 꽤 좋아 보인다.

00:03:24.000 --> 00:03:36.000
자동 레이아웃을 직접 사용하지는 않지만, 레이아웃을 수행하는 코드는 레이아웃 마진 삽입에 주의를 기울이고 있으며, UIKit은 안전 영역을 존중하기 위해 자동으로 조정하고 있습니다.

00:03:36.000 --> 00:03:43.000
내가 마주친 첫 번째 문제는 여기 뉴스 탭에 있으며, 전체 화면 사진 뷰어에 있습니다.

00:03:43.000 --> 00:03:49.000
이 특정 보기는 자동 레이아웃을 사용하지만, 페이지 컨트롤은 화면 하단에서 너무 멀리 떨어져 있다.

00:03:49.000 --> 00:03:53.000
그것은 홈 인디케이터에 들어가고 있다.

00:03:53.000 --> 00:04:03.000
여기서 문제는 페이지 컨트롤의 하단 제약이 전체 화면이며 홈 표시기 뒤에 있는 슈퍼뷰에 상대적이라는 것이다.

00:04:03.000 --> 00:04:10.000
슈퍼뷰로 제한하는 대신, 우리가 해야 할 일은 페이지 컨트롤을 하단의 안전 영역 레이아웃 가이드로 제한하는 것입니다.

00:04:10.000 --> 00:04:14.000
지금 그 변화를 만들자.

00:04:14.000 --> 00:04:22.000
Xcode에서 이 인터페이스를 열었지만, 제약 조건을 조정하기 전에 이 xib 파일에서 안전 영역 레이아웃 가이드를 활성화해야 합니다.

00:04:22.000 --> 00:04:31.000
Xcode 9 이전에 생성된 스토리보드와 xibs는 안전 영역 레이아웃 가이드가 자동으로 켜지지 않습니다.

00:04:31.000 --> 00:04:38.000
문서 관리자로 가서 안전 지역 레이아웃 가이드 사용 확인란을 선택하세요.

00:04:38.000 --> 00:04:50.000
여기서 주목해야 할 한 가지는 iOS 스토리보드의 경우, 이것을 켜면 장면의 상단 및 하단 레이아웃 가이드와 선행 및 후행 가장자리와 관련된 제약이 자동으로 업그레이드된다는 것입니다.

00:04:50.000 --> 00:04:56.000
따라서 이것을 껠 후 자동 레이아웃 제약 조건을 검토하고 테스트해야 합니다.

00:04:56.000 --> 00:05:00.000
이제 페이지 컨트롤의 하단 제약 조건을 선택할 수 있습니다.

00:05:00.000 --> 00:05:04.000
그리고 이 제약에 대한 속성 검사기를 보세요.

00:05:04.000 --> 00:05:11.000
여기서 우리는 제약이 슈퍼뷰의 하단 가장자리에 연결되어 있다는 것을 알 수 있으며, 그것이 제어를 너무 낮게 유지하는 것이다.

00:05:11.000 --> 00:05:22.000
슈퍼뷰 대신, 이것을 안전 영역에 연결하도록 변경하면, iPhone X에서 페이지 표시기가 자동으로 홈 표시기 위로 이동합니다.

00:05:22.000 --> 00:05:30.000
내가 지금 빌드하고 실행할 때, 페이지 컨트롤은 올바른 위치에 있으며, 이것은 세로와 가로 모두에서 작동합니다.

00:05:30.000 --> 00:05:35.000
내가 찾은 두 번째 이슈로 넘어가자, 비디오 탭에서 끝났어.

00:05:35.000 --> 00:05:42.000
다시 한 번, 상황이 꽤 좋아 보이지만, 내가 검색 필드를 꺼내면, 음, 그건 옳지 않아 보인다.

00:05:42.000 --> 00:05:45.000
이것을 연락처 앱의 모습과 비교해 봅시다.

00:05:45.000 --> 00:05:47.000
여기서 몇 가지가 잘못된 것 같아.

00:05:47.000 --> 00:05:52.000
검색 표시줄 배경의 색상이 맞지 않고, 크기도 약간 다르다.

00:05:52.000 --> 00:05:56.000
그리고 내가 가로로 회전하면, 여기도 보이지 않는 것을 볼 수 있다.

00:05:56.000 --> 00:06:01.000
검색 필드와 취소 버튼은 모두 화면의 둥근 모서리에 의해 잘리고 있다.

00:06:01.000 --> 00:06:07.000
이것은 안전 구역에 주의를 기울이는 것이 정말 중요한 전형적인 예이다.

00:06:07.000 --> 00:06:14.000
이 검색 필드에서, WWDC 앱이 하는 일은 UI 검색 컨트롤러를 명시적으로 제시하는 것이다.

00:06:14.000 --> 00:06:23.000
이제 iOS 11에서 검색 표시줄은 탐색 표시줄과 통합될 수 있으며, 이는 연락처에서 본 것처럼 올바른 프레젠테이션을 제공할 것입니다.

00:06:23.000 --> 00:06:26.000
코드를 보고 변경해 봅시다.

00:06:26.000 --> 00:06:29.000
여기 우리의 검색 컨트롤러를 보여주는 코드가 있습니다.

00:06:29.000 --> 00:06:30.000
나는 두 가지 변화를 만들 거야.

00:06:30.000 --> 00:06:37.000
먼저, 검색 컨트롤러를 제시하는 대신, 이 뷰 컨트롤러의 UINavigationItem에 넘겨줄 것입니다.

00:06:37.000 --> 00:06:43.000
그리고 두 번째로, 나는 검색 컨트롤러의 isActive 속성을 true로 설정할 것이다.

00:06:43.000 --> 00:06:47.000
이렇게 하면 내비게이션 바가 활성화되고 편집을 시작할 수 있습니다.

00:06:47.000 --> 00:06:56.000
이전 버전의 iOS의 기존 동작을 유지하면서 iOS 11에서만 가용성 지원을 사용할 수 있습니다.

00:06:56.000 --> 00:06:58.000
그것이 어떻게 보이는지 보기 위해 만들고 달려가자.

00:06:58.000 --> 00:06:59.000
훨씬 나아.

00:06:59.000 --> 00:07:03.000
이것은 iOS 11의 검색 필드의 올바른 프레젠테이션처럼 보입니다.

00:07:03.000 --> 00:07:06.000
그리고 풍경에서? 굉장해.

00:07:06.000 --> 00:07:14.000
이제 검색 표시줄은 안전 구역에 잘 맞고 있으며, 이 모든 것은 내비게이션 표시줄에 의해 자동으로 관리되고 있습니다.

00:07:14.000 --> 00:07:22.000
내비게이션 바가 있는 UI에 검색 표시줄이 있다면, iOS 11에서도 비슷한 변경을 하고 싶을 것입니다.

00:07:22.000 --> 00:07:26.000
이제 제가 작업해야 했던 앱의 세 번째 부분을 살펴봅시다.

00:07:26.000 --> 00:07:30.000
여기 일정 탭에서, 우리는 UITableView를 사용하고 있습니다.

00:07:30.000 --> 00:07:36.000
초상화의 레이아웃은 꽤 좋아 보이지만, 제대로 보이지 않는 검색 표시줄의 또 다른 사례가 있습니다.

00:07:36.000 --> 00:07:45.000
이것은 헤더 뷰로 테이블 뷰에 삽입되지만, 대신 탐색 표시줄과 통합하기 위해 이전과 동일한 변경 사항을 적용할 수 있습니다.

00:07:45.000 --> 00:07:52.000
뷰 컨트롤러의 탐색 항목에 검색 컨트롤러를 설정하고 활성 상태를 적절하게 설정하겠습니다.

00:07:52.000 --> 00:07:53.000
짓고 달리자.

00:07:53.000 --> 00:07:55.000
이거 멋져 보여.

00:07:55.000 --> 00:08:02.000
가로로 회전하면 검색 필드가 괜찮아 보이고 대부분의 UI는 안전 영역을 존중하는 것처럼 보입니다.

00:08:02.000 --> 00:08:10.000
하지만 자세히 살펴보면, 우리는 테이블 섹션 헤더에 사용자 지정 배경색을 사용하며, 그것은 잘못된 것처럼 보입니다.

00:08:10.000 --> 00:08:15.000
색상은 연락처 앱에서 하는 것처럼 화면 가장자리까지 확장되어야 합니다.

00:08:15.000 --> 00:08:23.000
코드를 보면, 앱이 헤더 보기의 contentView에서 배경색을 설정하고 있다는 것을 알 수 있습니다.

00:08:23.000 --> 00:08:30.000
그것은 합리적인 일처럼 보이며, 사실, iPhone X 이외의 iPhone에서 잘 작동합니다.

00:08:30.000 --> 00:08:32.000
그래서 여기서 뭐가 문제야?

00:08:32.000 --> 00:08:39.000
무슨 일이 일어나고 있는지 이해하기 위해, 우리는 테이블 뷰가 iPhone X에서 어떻게 배치되는지에 대한 세부 사항을 살펴볼 필요가 있다.

00:08:39.000 --> 00:08:45.000
이것을 설명하기 위해, Xcode에서 정말 유용한 View Hierarchy Debugger부터 시작합시다.

00:08:45.000 --> 00:08:48.000
여기 우리가 보고 있던 관점이 있어.

00:08:48.000 --> 00:08:56.000
오른쪽 하단에서, 테이블 뷰 자체를 제외한 모든 뷰를 숨기기 위해 보이는 뷰 범위를 조정할 수 있습니다.

00:08:56.000 --> 00:08:59.000
테이블 뷰는 화면의 전체 크기가 될 것이다.

00:08:59.000 --> 00:09:04.000
이제 테이블 뷰의 셀을 포함하도록 보이는 범위를 조정할 것입니다.

00:09:04.000 --> 00:09:07.000
세포가 가장자리에서 가장자리로 어떻게 확장되는지 주목하세요.

00:09:07.000 --> 00:09:16.000
나는 그것을 강조하기 위해 하나를 선택하고, 그것이 어디에 있을지 설명하기 위해 이 보기 위에 안전 구역을 오버레이할 것이다.

00:09:16.000 --> 00:09:22.000
이제 나는 그림에 더 많은 뷰를 끌어들이기 위해 가시 범위를 계속 확장할 것이다.

00:09:22.000 --> 00:09:28.000
우리가 지금 보고 있는 것은 셀의 콘텐츠 보기가 안전 영역에 자동으로 삽입되었다는 것이다.

00:09:28.000 --> 00:09:39.000
그래서 이것은 테이블 셀의 크기, 가장자리에서 가장자리로 가는 것, 그리고 삽입된 셀의 콘텐츠 뷰 사이에 불일치를 일으킨다.

00:09:39.000 --> 00:09:43.000
나는 여기에 관련된 몇 가지 견해를 강조할 것이다.

00:09:43.000 --> 00:09:49.000
하지만 이제 이 그림은 조금 바빠지고 있으니, 이것을 단순화하고 이 견해에 라벨을 붙이자.

00:09:49.000 --> 00:09:55.000
기본적으로, 표 셀은 콘텐츠 뷰를 삽입하여 안전 영역 안에 있게 합니다.

00:09:55.000 --> 00:09:59.000
그 괴롭히는 행동은 당신이 통제할 수 있는 것이다.

00:09:59.000 --> 00:10:05.000
Xcode에서, Content View Insets to Safe Area 확인란을 사용할 수 있습니다.

00:10:05.000 --> 00:10:09.000
코드에서도 설정할 수 있는 해당 속성이 있습니다.

00:10:09.000 --> 00:10:19.000
확인란을 선택 해제하면, 콘텐츠 보기가 삽입되지 않으며, 콘텐츠 보기는 이제 가장자리에서 가장자리로 이동합니다.

00:10:19.000 --> 00:10:30.000
여기서 마지막 요점은 콘텐츠 보기의 설정에 관계없이, 콘텐츠 보기의 레이아웃 여백은 기본적으로 안전 영역에 계속 상대적이라는 것입니다.

00:10:30.000 --> 00:10:38.000
콘텐츠 보기 설정과 유사하게, 이러한 레이아웃 마진의 동작을 제어할 수 있는 속성이 있습니다.

00:10:38.000 --> 00:10:47.000
내가 마지막에 언급할 문서와 WWDC 비디오에서 이것과 다른 마진 관련 옵션에 대한 자세한 내용을 얻을 수 있습니다.

00:10:47.000 --> 00:10:57.000
좋아, 이제 테이블 뷰가 안전 영역과 관련하여 셀을 어떻게 배치하는지 보았으니, 헤더 뷰에서 배경색을 설정했던 코드로 돌아가자.

00:10:57.000 --> 00:11:04.000
우리는 안전 영역에 삽입된 콘텐츠 보기에서만 설정하고 있다는 것을 알 수 있습니다.

00:11:04.000 --> 00:11:08.000
이 시점에서, 우리가 이 문제를 해결할 수 있는 몇 가지 다른 방법이 있다.

00:11:08.000 --> 00:11:21.000
그 중 하나는 콘텐츠 뷰를 안전 영역에 설정하는 테이블 뷰의 기본 동작을 비활성화하는 것이지만, 그렇게 하면 콘텐츠 뷰의 다른 모든 것에도 영향을 미칠 것이며, 우리는 이 유용한 기본 동작을 잃게 될 것입니다.

00:11:21.000 --> 00:11:36.000
대신, 여기서 가장 좋은 해결책은 삽입된 콘텐츠 보기와 달리 안전 영역 삽입물에 관계없이 셀의 전체 너비에 걸쳐 있는 배경 보기의 배경 색상을 설정하는 것입니다.

00:11:36.000 --> 00:11:51.000
그 변화와 함께, 우리가 만들고 실행할 때, 우리는 헤더 배경 색상이 가장자리에서 가장자리로 가지 않는 이것에서 색상이 전체 테이블에 걸쳐 있지만 콘텐츠 보기는 전혀 변경되지 않는 이것으로 이동합니다.

00:11:51.000 --> 00:11:55.000
그게 훨씬 나아 보여.

00:11:55.000 --> 00:12:01.000
그것들은 iPhone X용 WWDC 앱을 업데이트하는 동안 발생한 문제의 세 가지 예입니다.

00:12:01.000 --> 00:12:06.000
그들은 고치는 것이 어렵지 않았고, 대부분 풍경과 관련이 있었다.

00:12:06.000 --> 00:12:08.000
몇 가지 빠른 알림.

00:12:08.000 --> 00:12:16.000
iOS 11 SDK에 연결하고 Launch Storyboard를 포함하면 앱의 전체 화면 기본 해상도를 사용할 수 있습니다.

00:12:16.000 --> 00:12:27.000
그리고 세로에서 몇 가지 문제를 볼 수 있지만, 대부분은 가로에 있을 가능성이 매우 높으므로 왼쪽과 오른쪽으로 회전된 인터페이스로 모든 UI를 테스트해야 합니다.

00:12:27.000 --> 00:12:30.000
안전 구역을 존중함으로써 대부분의 문제를 피할 수 있습니다.

00:12:30.000 --> 00:12:44.000
자동 레이아웃과 safeAreaLayoutGuides는 많은 레이아웃 문제를 자동으로 처리하지만, 수동 레이아웃을 수행하는 경우 안전 영역 삽입물에 액세스할 수 있으며 필요한 모든 계산을 할 수 있습니다.

00:12:44.000 --> 00:12:48.000
이 정보는 UIView 클래스를 통해 사용할 수 있습니다.

00:12:48.000 --> 00:12:53.000
화면 하단의 홈 표시기를 방해하지 않는 것도 중요합니다.

00:12:53.000 --> 00:13:06.000
홈 표시기와 iPhone X용 디자인의 다른 많은 측면에 대한 자세한 내용은 앱을 이 새로운 화면으로 가져오는 데 중요한 세부 사항이 많은 iPhone X용 디자인 비디오를 시청하십시오.

00:13:06.000 --> 00:13:24.000
또한 WWDC 2017에서 안전 영역 레이아웃 가이드를 소개하고, 중요한 제스처 처리 변경 사항, 통합 검색 표시줄 지원과 같은 새로운 iOS 11 기능을 활용하는 방법에 대해 이야기한 몇 가지 주요 비디오가 있었습니다.

00:13:24.000 --> 00:13:31.000
그리고 물론, 당신은 항상 developer.apple.com 또는 개발자 포럼에서 더 많은 정보를 얻을 수 있습니다.

00:13:31.000 --> 23:59:59.000
고마워!

