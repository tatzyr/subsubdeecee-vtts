WEBVTT

00:00:01.000 --> 00:00:07.000
ジョン・デイビス：こんにちは、SafariとWebKitチームのウェブテクノロジーエバンジェリスト、ジョン・デイビスです。

00:00:07.000 --> 00:00:13.000
iOS用のSafari拡張機能を構築して展開する方法についてのあなたのガイドになることに興奮しています。

00:00:13.000 --> 00:00:16.000
さて、iOS用の拡張機能にはいくつかの種類があります。

00:00:16.000 --> 00:00:25.000
数年前からiOSにコンテンツブロッカーがありましたが、これはリソースの負荷をブロックするための強力なルールを設定できる一種の拡張機能です。

00:00:25.000 --> 00:00:28.000
しかし、私はSafariのウェブ拡張機能についてあなたに話すためにここにいます。

00:00:28.000 --> 00:00:36.000
それらは昨年macOS Big Surで導入され、この秋、私たちはそれらをiOS 15とiPadOS 15に持ち込みました。

00:00:36.000 --> 00:00:44.000
これは、他のブラウザで動作するウェブ技術を使用する一種の拡張機能であり、私たちのユーザーはそれらを愛しています。

00:00:44.000 --> 00:00:49.000
App Storeで最も人気のあるカテゴリで、他のアプリと同様に簡単にインストールできます。

00:00:49.000 --> 00:00:54.000
それは、Safariのウェブ拡張機能がアプリで配布されているからです。

00:00:54.000 --> 00:00:58.000
そして、それはあなたがApp Storeにいることのメリットを得ることを意味します。

00:00:58.000 --> 00:01:12.000
ユーザーは拡張機能を発見でき、拡張機能を事前に簡単に販売できます。アプリ内支払いなどの強力な機能を利用して、拡張機能の高度な機能のロックを解除したり、TestFlightを使用してベータプログラムを実行したりすることもできます。

00:01:12.000 --> 00:01:18.000
しかし、あなたは「それはすべて順調で良いことですが、私はウェブ開発者であり、アプリ開発者ではありません」と言っているのかもしれません。

00:01:18.000 --> 00:01:21.000
まあ、私も！そして、彼らは私にあなたのガイドになるように頼んだ。

00:01:21.000 --> 00:01:27.000
だから私はあなたがXcodeを学ぶのを手伝うためにここにいます、そして私たちはゼロから新しいプロジェクトを構築するつもりです。

00:01:27.000 --> 00:01:38.000
また、Safariのプライバシー保護許可モデルと、そのアプリレビュープロセスを通過するためのヒントとともに、拡張機能の提出方法についても触れます。

00:01:38.000 --> 00:01:42.000
では、Xcodeで作業を始めましょう。

00:01:42.000 --> 00:01:47.000
これを行うには、App Storeからダウンロードしてインストールする必要があります。

00:01:47.000 --> 00:01:53.000
App Storeを起動し、検索で「Xcode」と入力すると、すぐに出てきます。

00:01:53.000 --> 00:01:57.000
そして、[取得]ボタンをクリックし、[インストール]をクリックするだけです。

00:01:57.000 --> 00:02:05.000
今、それはしばらく時間がかかるかなりのダウンロードですが、起動できるようになると、Xcodeはコマンドラインツールをインストールするように促します。

00:02:05.000 --> 00:02:12.000
インストールをスキップした場合は、後でターミナルのコマンドラインから簡単に実行できます。

00:02:12.000 --> 00:02:19.000
「Xcode-select」と入力してインストールフラグを追加するだけで、インストールプロセスが開始されます。

00:02:19.000 --> 00:02:31.000
今、私の環境は準備ができているので、今はこのコマンドを実行しませんが、Safari Web拡張コンバータと呼ばれる重要なツールが含まれているため、インストールされていることを確認する必要があります。

00:02:31.000 --> 00:02:41.000
別のブラウザ用のウェブ拡張機能や、iOSのSafariをサポートしてアップグレードしたいmacOSのSafari用に書いたウェブ拡張機能を書いた場合に便利です。

00:02:41.000 --> 00:02:53.000
今、私はドキュメントフォルダに簡単なデモWeb拡張機能を持っており、このhello-world拡張機能は別のブラウザ用に書かれており、単にポップアップに「Hello World」メッセージが表示されます。

00:02:53.000 --> 00:02:57.000
これで、コンバーターツールを使用して、iOSで動作するようにアップグレードできます。

00:02:57.000 --> 00:03:03.000
ターミナルでは、Xcodeのように「xc」と入力するだけで、「xcrun」です。

00:03:03.000 --> 00:03:08.000
そして、「safari-web-extension-converter」とプロジェクトへの道筋。

00:03:08.000 --> 00:03:14.000
macOSでSafari用に書かれた拡張機能がある場合は、コンバーターツールを使用してアップグレードすることもできます。

00:03:14.000 --> 00:03:24.000
「Xcrun safari-web-extension-converter」と入力し、rebuild-projectフラグとそれに続くmacOS拡張機能へのパスを追加するだけです。

00:03:24.000 --> 00:03:33.000
しかし、Hello World拡張機能で実行すると、コンバータツールが何をするかを実際に見てみましょう。

00:03:33.000 --> 00:03:36.000
リターンを押すと、プロセスが開始されます。

00:03:36.000 --> 00:03:44.000
そして、それが実際にやっていることは、拡張機能をiOSとmacOS用にコンパイルして実行できるアプリプロジェクトにまとめることです。

00:03:44.000 --> 00:03:53.000
さて、しばらくターミナルに切り替えて、iOS拡張機能に非永続的な背景ページが必要であることを示す警告があるこのメモを指摘したいと思います。

00:03:53.000 --> 00:04:02.000
これは、基本的に、拡張機能がiOSで機能することを確認するために確認する必要があるもののやることリストを提供しているので、実際には本当に素晴らしいです。

00:04:02.000 --> 00:04:04.000
Xcodeに戻りましょう。 

00:04:04.000 --> 00:04:06.000
この拡張機能はほぼ準備ができています。

00:04:06.000 --> 00:04:11.000
バックグラウンドスクリプトは、非永続的な方法で実行するようにすでに設定されています。

00:04:11.000 --> 00:04:14.000
Safariにそのように実行するように伝える必要があります。

00:04:14.000 --> 00:04:21.000
だから、これをiOSで機能させるために必要なのは、マニフェストファイルを編集することだけです。

00:04:21.000 --> 00:04:30.000
そして、バックグラウンドセクションでは、falseの値を持つ永続キーを追加します。

00:04:30.000 --> 00:04:31.000
そして、それだけです!

00:04:31.000 --> 00:04:34.000
シミュレーターでこれを実行してみましょう。

00:04:34.000 --> 00:04:38.000
ビルドターゲットメニューを使用して、iPhone 13 Proを選択します。

00:04:38.000 --> 00:04:46.000
今、私はすでに多くのシミュレータをインストールしていますが、テストしたいものをダウンロードするには、追加のシミュレータを追加する必要があるかもしれません。

00:04:46.000 --> 00:04:52.000
だから私はiPhone 13 Proを選択し、ビルドと実行ボタンをクリックします。再生ボタンのように見えるものです。

00:04:52.000 --> 00:04:55.000
そして、これは私たちのアプリを構築し、シミュレーターで起動します。

00:04:55.000 --> 00:04:58.000
ステータスバーの右上にあるステータスを確認できます。

00:04:58.000 --> 00:05:07.000
さて、シミュレーターに切り替えて、アプリがインストールされて起動するまで待つ必要があります。

00:05:07.000 --> 00:05:24.000
起動したら、設定アプリに切り替えて、Safariセクションを見つけて、拡張機能をタップして、Hello World拡張機能をオンにすることができます。

00:05:24.000 --> 00:05:26.000
今、私たちはSafariでそれを試すことができます。

00:05:26.000 --> 00:05:30.000
Safariを起動し、Aaメニューをタップします。

00:05:30.000 --> 00:05:35.000
そこには、Hello World拡張機能があり、私はそれをタップすることができ、許可を求められます。

00:05:35.000 --> 00:05:39.000
それについては後で詳しく説明しますが、今のところは「Allow For One Day」を選択します。

00:05:39.000 --> 00:05:40.000
そして、私たちはそこに行きます。

00:05:40.000 --> 00:05:43.000
「ハローワールド！」ポップアップのメッセージ。

00:05:43.000 --> 00:05:49.000
そして、それはあなたが別のブラウザのために書かれたウェブ拡張機能を変換するのがどれほど簡単かです。

00:05:49.000 --> 00:05:59.000
そこで、Open Graphメタデータのプレビューを構築するプロジェクトのアイデアがありました。Twitterのようなソーシャルメディアサイトでプレビューを表示するために使用されるのと同じメタデータです。

00:05:59.000 --> 00:06:04.000
この素敵な画像、タイトル、ウェブページの説明が表示されます。

00:06:04.000 --> 00:06:08.000
だから、ポップアップを使ってそのデータをプレビューできる拡張機能を構築したいと思います。

00:06:08.000 --> 00:06:13.000
だから、それが私たちが今日構築しようとしているものです。

00:06:13.000 --> 00:06:18.000
では、Xcodeで新しいプロジェクトを作成することから始めましょう。

00:06:18.000 --> 00:06:27.000
マルチプラットフォームの下のSafari拡張機能アプリを選択し、[次へ]をクリックします。

00:06:27.000 --> 00:06:32.000
製品名には「Open Graph Preview」を使用します。

00:06:32.000 --> 00:06:38.000
すでに私のチームが記入し、逆ドメイン規約を使用して組織識別子が入力されています。

00:06:38.000 --> 00:06:43.000
言語をSwiftのままにして、[次へ]をクリックします。

00:06:43.000 --> 00:06:58.000
今、それはプロジェクトを保存する場所を求めています - デスクトップは正常に動作します - そして、私は「MacでGitリポジトリを作成する」を有効にしておくつもりです - 私はバージョン管理が組み込まれているのが大好きです - そして、私は作成をクリックします。

00:06:58.000 --> 00:07:02.000
そして、これはテンプレートから私たちのためにプロジェクトを生成します。

00:07:02.000 --> 00:07:09.000
さて、先に進む前に、Xcodeの概要を簡単に説明しましょう。

00:07:09.000 --> 00:07:18.000
ウィンドウの左側には、プロジェクトのすべてのリソースが整理されたナビゲーションサイドバーがあります。

00:07:18.000 --> 00:07:29.000
中央には、ナビゲーターサイドバーから選択したファイルのメインエディタがあり、右側には、編集中のファイルに基づいて変更されるインスペクタサイドバーがあります。

00:07:29.000 --> 00:07:38.000
検査官のサイドバーは必要ありませんので、もう少し作業するスペースがあるように、先に進んで隠します。

00:07:38.000 --> 00:07:46.000
それでは、新しいSafariウェブ拡張プロジェクトを構成するファイルを見てみましょう。ナビゲーターサイドバーの上部にプロジェクトファイルがあります。

00:07:46.000 --> 00:07:53.000
それを選択すると、メインエディタがプロジェクトの設定オプション画面に開きます。

00:07:53.000 --> 00:07:58.000
その下には共有(アプリ)フォルダがあり、これにはアプリの起動画面のリソースがあります。

00:07:58.000 --> 00:08:05.000
リソースフォルダの横にある詳細表示三角形をクリックすると、単なるウェブリソースであることがわかります。

00:08:05.000 --> 00:08:13.000
実際、編集できるHTMLファイルに過ぎず、テンプレートはマークアップ、スタイル、スクリプトを簡単にカスタマイズできるように設定します。

00:08:13.000 --> 00:08:18.000
共有(拡張機能)フォルダには、拡張機能のすべてのリソースがあります。

00:08:18.000 --> 00:08:27.000
そして、リソースフォルダを展開すると、Web拡張機能のすべての使い慣れたファイルが表示されます。

00:08:27.000 --> 00:08:34.000
マニフェストは、バックグラウンドスクリプト、コンテンツスクリプト、ポップアップファイルです。

00:08:34.000 --> 00:08:49.000
iOS（アプリ）フォルダとmacOS（アプリ）フォルダにはプラットフォーム固有のリソースがあり、その下にiOS（拡張機能）フォルダとmacOS（拡張機能）フォルダには、それらのプラットフォームの拡張機能固有のリソースがあります。

00:08:49.000 --> 00:08:58.000
このプロジェクトのためにそれらを心配する必要はないので、すべての作業が共有（拡張機能）ファイルになるので、先に進んでそれらを片付けます。

00:08:58.000 --> 00:09:03.000
そして、マニフェストファイルから始めましょう。

00:09:03.000 --> 00:09:14.000
また、テンプレートには、プロジェクト情報から名前と説明を記入するなど、始めるために必要なすべてが用意されていることがわかります。

00:09:14.000 --> 00:09:24.000
その下に、いくつかのデフォルトのアイコンが指定されています。プロジェクトに独自のアイコンを提供することを忘れないでください。

00:09:24.000 --> 00:09:32.000
そして、ここでは、バックグラウンドスクリプトを提供し、非永続的な方法でバックグラウンドスクリプトを実行するようにすでに設定されていることがわかります。

00:09:32.000 --> 00:09:49.000
さて、このプロジェクトでは、実際にはバックグラウンドスクリプトを必要としないので、先に進んでマニフェストファイルからこのエントリを削除し、先に進んでバックグラウンドスクリプト自体を削除し、それをゴミ箱に移動します。

00:09:49.000 --> 00:09:57.000
次に、コンテンツスクリプトを設定し、ここでJavaScriptファイルと注入できるWebサイトのドメインパターンを宣言します。

00:09:57.000 --> 00:10:11.000
さて、このツールをユーザーが使用したいどのサイトでも使用できるようにしたいので、実際にここで「example.com」をアスタリスクに変更して、任意のドメインと一致できるようにします。

00:10:11.000 --> 00:10:25.000
その下に、ブラウザのアクションセクションを宣言し、ここでは「ポップアップ」ファイルを定義し、次にデフォルトのツールバーアイコンのセットを定義します。繰り返しになりますが、プロジェクトに独自のアイコンを提供することを忘れないでください。

00:10:25.000 --> 00:10:31.000
そして最後に、アクセス許可キーがあり、使用するアクセス許可としてactiveTabを追加します。

00:10:31.000 --> 00:10:33.000
なぜactiveTabなのか？

00:10:33.000 --> 00:10:37.000
あなたが尋ねてくれてとてもうれしいです。

00:10:37.000 --> 00:10:42.000
拡張機能が使用できるさまざまな権限を簡単に見てみましょう。

00:10:42.000 --> 00:10:47.000
Safariの拡張機能は、ユーザーがコントロールできるように設定されています。

00:10:47.000 --> 00:10:54.000
最初にユーザーインタラクションなしでは機能しないので、ユーザーを訓練するために最初の使用時にバッジが付きます。

00:10:54.000 --> 00:11:04.000
許可はウェブサイトごとに付与されます。つまり、ウェブサイトの許可は、ユーザーが制御するためのSafariの設定と設定に表示されます。

00:11:04.000 --> 00:11:08.000
今、見る許可の4つの楽しい味があります。

00:11:08.000 --> 00:11:10.000
それぞれに目を通しましょう。

00:11:10.000 --> 00:11:14.000
最初のタイプの権限は、スクリプトインジェクション権限です。

00:11:14.000 --> 00:11:25.000
これにより、マッチキーにリストされているウェブサイトのドメインに基づいて、ユーザーが閲覧しているページにJavaScriptやスタイルシートを注入することができます。

00:11:25.000 --> 00:11:33.000
ユーザーが閲覧しているWebサイトがマッチキーのパターンと一致すると、スクリプトを注入する拡張機能がツールバーにバッジされます。

00:11:33.000 --> 00:11:37.000
ユーザーは拡張機能をクリックして有効にする必要があります。

00:11:37.000 --> 00:11:42.000
そして、それは常にそこに座って、ユーザーによって有効になるのを待っています。

00:11:42.000 --> 00:11:45.000
次のタイプの許可は暗黙の許可です。

00:11:45.000 --> 00:11:50.000
これで、マニフェストファイルで宣言された暗黙のアクセス許可にはいくつかの種類があります。

00:11:50.000 --> 00:11:57.000
私がここで強調した最初のものは非センシティブで、追加の特権を必要としません。

00:11:57.000 --> 00:12:06.000
そして、2番目のタイプは、ウェブサイト識別データを持っているため、機密性の高い許可であり、これはユーザーのプライバシーを保護する方法の1つです。

00:12:06.000 --> 00:12:10.000
APIを呼び出すと、データとのコールバックを待ちます。

00:12:10.000 --> 00:12:17.000
ユーザーは拡張機能と対話した後にプロンプトが表示され、応答するのに約1分かかります。

00:12:17.000 --> 00:12:21.000
彼らがそれを承認すると、コールバックが満たされ、データが返されます。

00:12:21.000 --> 00:12:26.000
彼らがすでに承認したものはすべて、すぐに満たされます。

00:12:26.000 --> 00:12:34.000
次のタイプの許可は明示的な許可であり、拡張機能自体が許可を要求しているため、これは明示的です。

00:12:34.000 --> 00:12:42.000
プロンプトは常にモーダルに表示され、ユーザーではなく、許可を要求する拡張機能自体であるため、バッジはありません。

00:12:42.000 --> 00:12:45.000
そして、最後のタイプのパーミッションは、アクティブなタブパーミッションです。

00:12:45.000 --> 00:12:50.000
これは、アラートを避けたい場合は、アクティブなタブが答えである特別なケースです。

00:12:50.000 --> 00:12:57.000
ユーザーはツールバーを介して拡張機能を操作する必要があるか、Macではキーボードショートカットまたはコンテキストメニューを使用できます。

00:12:57.000 --> 00:13:03.000
これにより、現在のタブの現在のドメインのタブ権限が付与されます。

00:13:03.000 --> 00:13:07.000
そして、それは私たちが今日使いたいものです。

00:13:07.000 --> 00:13:10.000
では、コンテンツスクリプトのコーディングに移りましょう。

00:13:10.000 --> 00:13:14.000
また、コンテンツスクリプトテンプレートは、メッセージを送信およびリッスンするように設定されています。

00:13:14.000 --> 00:13:19.000
これで、コンテンツスクリプトからメッセージを送信する必要はありませんが、メッセージを聞く必要があります。

00:13:19.000 --> 00:13:34.000
コンテンツスクリプトが最初に行う必要があるのは、ユーザーが閲覧しているページからOpen Graphメタデータを取得することです。簡単なDOM APIを使用して、OGタイトル、説明、画像に適したメタタグを見つけることができます。

00:13:34.000 --> 00:13:47.000
さて、拡張機能の仕組みでは、ユーザーは拡張機能をタップしてポップアップを開き、現在のページからOpen Graphデータをコンテンツスクリプトに尋ねるのがポップアップスクリプトの仕事になります。

00:13:47.000 --> 00:13:54.000
だから、このリスナーコールバックでは、魔法の言葉のメッセージを聞きたいです。

00:13:54.000 --> 00:14:01.000
さて、魔法の言葉のないメッセージを受け取ったら、私たちは何もしません。

00:14:01.000 --> 00:14:03.000
実際、私たちはここで無効に戻ります。

00:14:03.000 --> 00:14:10.000
しかし、マジックワードのメッセージを受け取ったら、メタタグからデータを送り返します。

00:14:10.000 --> 00:14:13.000
そして、コンテンツスクリプトで行う必要があるのはそれだけです。

00:14:13.000 --> 00:14:19.000
では、ポップアップの設定に移り、ポップアップHTMLファイルから始めましょう。

00:14:19.000 --> 00:14:25.000
スタイルシートとポップアップのJavaScriptがここに含まれています。

00:14:25.000 --> 00:14:27.000
だから、ウェブ開発者にとって、あなたは家にいるように感じるでしょう。

00:14:27.000 --> 00:14:37.000
さて、このファイルのマークアップのために、タイトルと説明と画像のプレビューのためにいくつかのプレースホルダ要素を設定する必要があります。

00:14:37.000 --> 00:14:49.000
これで、タイトル、説明、画像のプレースホルダ要素があります。

00:14:49.000 --> 00:14:55.000
次に、ポップアップのスタイルシートにいくつかの調整を行います。

00:14:55.000 --> 00:15:04.000
ここでは、すべてのプラットフォームで見栄えを良くするために、いくつかの小さな調整を行うだけです。

00:15:04.000 --> 00:15:12.000
そして最後に、スペースを埋め、アスペクト比を維持するために、画像のレスポンシブデザインレイアウトを設定する必要があります。

00:15:12.000 --> 00:15:24.000
最後に、ポップアップスクリプトを編集することで拡張機能の中心にたどり着き、まずポップアップHTMLファイルで定義したプレースホルダ要素への参照を取得する必要があります。

00:15:24.000 --> 00:15:32.000
次に、コンテンツスクリプトにメッセージを送信し、そのためにはアクティブなタブを照会する必要があります。

00:15:32.000 --> 00:15:40.000
したがって、現在のウィンドウでアクティブなタブを照会するには、tabs.query APIを使用します。

00:15:40.000 --> 00:15:48.000
そして、tabs.query APIでは、現在のウィンドウのアクティブなタブでフィルタリングします。

00:15:48.000 --> 00:15:53.000
正しいタブができたら、メッセージを送信できます。

00:15:53.000 --> 00:16:04.000
そして、メッセージを送信する際に、現在のタブIDと、もちろん魔法の言葉を渡します。

00:16:04.000 --> 00:16:10.000
次に、応答を受け取ったら、プレースホルダ要素をデータで更新するだけです。

00:16:10.000 --> 00:16:12.000
それでおそれ！

00:16:12.000 --> 00:16:16.000
では、シミュレーターで拡張機能を実行してみましょう。

00:16:16.000 --> 00:16:21.000
繰り返しになりますが、ターゲットメニューから、iPhone 13 Proシミュレーターを選択します。

00:16:21.000 --> 00:16:28.000
ビルドと実行ボタンをクリックしてプロセスを開始し、シミュレータに切り替えて、アプリが起動するのを待ちます。

00:16:28.000 --> 00:16:33.000
起動したら、設定アプリで新しい拡張機能を有効にすることができます。

00:16:33.000 --> 00:16:38.000
では、設定に切り替えてSafariにスクロールしましょう。

00:16:38.000 --> 00:16:48.000
次に、それをタップして拡張機能をタップし、Open Graph Previewでオンに切り替えることができます。

00:16:48.000 --> 00:16:56.000
では、Safariを起動して、Aaメニューをタップします。

00:16:56.000 --> 00:16:59.000
そして、メニューにはOpen Graph Previewがあります。

00:16:59.000 --> 00:17:04.000
今、これをタップすると、コンテンツスクリプトの許可リクエストが表示されます。

00:17:04.000 --> 00:17:06.000
「1日を許可する」を選択します。

00:17:06.000 --> 00:17:11.000
そしてビンゴ、このページのオープングラフデータのプレビューがあります。

00:17:11.000 --> 00:17:15.000
では、別のページで試してみましょう。

00:17:15.000 --> 00:17:20.000
再びAaメニューから、「グラフプレビューを開く」をタップし、「1日許可」をタップします。

00:17:20.000 --> 00:17:23.000
そして、私たちはそれを持っていますが、それは全く正しくありません。

00:17:23.000 --> 00:17:26.000
私たちは壊れたイメージを持つべきではありません。

00:17:26.000 --> 00:17:30.000
だから、ここで何が起こっているのかを把握するために、私はSafariでウェブインスペクタを使用することができます。

00:17:30.000 --> 00:17:39.000
有効にしていない場合は、Safariの環境設定に移動し、[詳細設定]タブでメニューバーの[開発表示]メニューを有効にします。

00:17:39.000 --> 00:17:45.000
次に、開発メニューから、シミュレータのコンテンツのWebインスペクタを選択できます。

00:17:45.000 --> 00:17:50.000
そして、それを行うと、画像が読み込まれなかったことが簡単にわかります。

00:17:50.000 --> 00:17:55.000
したがって、URLが間違っている場合、それはおそらくコンテンツから来ています。

00:17:55.000 --> 00:18:06.000
では、webkit.org用の別のWebインスペクタを開きましょう。

00:18:06.000 --> 00:18:10.000
これで、ogメタタグデータを検索できます。

00:18:10.000 --> 00:18:18.000
そして、ここにはタイトルがあり、説明があることがわかります-ああ、でも画像が欠けています。

00:18:18.000 --> 00:18:19.000
そして、それが起こっていることです。

00:18:19.000 --> 00:18:22.000
処理していない未定義のケースがあります。

00:18:22.000 --> 00:18:30.000
だから、Xcodeに戻って、私たちがする必要があるのは、その未定義のケースを処理することだけです。

00:18:30.000 --> 00:18:33.000
これで、これをもう一度実行してみます。

00:18:33.000 --> 00:18:48.000
[ビルドと実行]ボタンをクリックすると、[置換]をクリックしてシミュレータで置き換え、シミュレータで起動したら、Safariに戻ってもう一度試すことができます。

00:18:48.000 --> 00:18:53.000
Aaメニューから、Open Graph Previewとビンゴを選択します。

00:18:53.000 --> 00:18:55.000
完璧！

00:18:55.000 --> 00:19:04.000
タイトルと説明が表示されますが、画像があるページで動作することを確認する必要があります。

00:19:04.000 --> 00:19:07.000
完璧！

00:19:07.000 --> 00:19:15.000
まあ、シミュレータで動作させることは、多くのデバイスでテストするのに最適な方法ですが、実際のデバイスでテストすることは常に良い考えです。

00:19:15.000 --> 00:19:18.000
だから私はiPhoneを手元に持っています。

00:19:18.000 --> 00:19:27.000
Xcodeに戻って、ターゲットメニューを選択し、iPhoneを選択します。

00:19:27.000 --> 00:19:39.000
では、このデバイスでビルドして実行して起動しましょう。

00:19:39.000 --> 00:19:45.000
デバイスで実行して起動したら、設定で有効にする必要があります。

00:19:45.000 --> 00:19:48.000
では、設定アプリに戻りましょう。

00:19:48.000 --> 00:19:54.000
Safariと拡張機能とOpen Graph Previewで、オンに切り替えます。

00:19:54.000 --> 00:19:59.000
さて、Safariをもう一度起動して、Aaメニューをタップします。

00:19:59.000 --> 00:20:05.000
そして、私は拡張機能を見て、それをタップし、1日を許可することができます。

00:20:05.000 --> 00:20:08.000
そして、それは完璧に動作します。

00:20:08.000 --> 00:20:14.000
すべてのケースが機能していることを確認するために、他のいくつかのページでこれを試してみましょう。

00:20:14.000 --> 00:20:21.000
ここdeveloper.apple.comでは、apple.comドメインの一部であるため、追加の許可を求めませんでした。

00:20:21.000 --> 00:20:27.000
Webkit.orgで試してみましょう。

00:20:27.000 --> 00:20:36.000
そして、ここでもう一度Aaメニューをタップし、グラフプレビューを開くと、これは別のウェブサイトであるため、再びプロンプトが表示されます。

00:20:36.000 --> 00:20:38.000
完璧。

00:20:38.000 --> 00:20:42.000
そして、画像付きの投稿にもう1つ。

00:20:42.000 --> 00:20:46.000
Aaをタップし、グラフプレビューを開きます。

00:20:46.000 --> 00:20:49.000
完璧！

00:20:49.000 --> 00:20:50.000
だから、素晴らしい。

00:20:50.000 --> 00:20:59.000
アプリと拡張機能がシミュレータと実際のデバイスで動作している今、私たちはこれをApp Storeに提出する準備ができていると思います。

00:20:59.000 --> 00:21:03.000
まず、提出する前に注意すべき簡単な詳細があります。

00:21:03.000 --> 00:21:10.000
プロジェクト設定で、iOSアプリのターゲットを選択し、必ずアプリカテゴリを設定してください。

00:21:10.000 --> 00:21:13.000
開発者ツールを選択します。

00:21:13.000 --> 00:21:19.000
次に、[製品] メニューから [アーカイブ] を選択します。

00:21:19.000 --> 00:21:27.000
また、ビルドプロセスと同様に、ステータスバーの右側に進捗状況が表示されます。

00:21:27.000 --> 00:21:33.000
準備ができたら、提出する準備ができているビルドアーカイブを選択し、[アプリの配布]ボタンをクリックします。

00:21:33.000 --> 00:21:39.000
アシスタントから、配布方法の下でApp Store Connectを選択し、[次へ]をクリックします。

00:21:39.000 --> 00:21:44.000
目的地については、アップロードを残して[次へ]をクリックします。

00:21:44.000 --> 00:21:52.000
そして、アプリレコードを準備するためにApp Store Connectと通信し始めます。

00:21:52.000 --> 00:22:00.000
ここでは、名前を確認し、App Store Connectアカウントの他のアプリで使用されるSKUの中でSKUが一意であることを確認することができます。

00:22:00.000 --> 00:22:06.000
次に、[次へ]ボタンをクリックすると、レビューのためにアプリレコードの準備が始まります。

00:22:06.000 --> 00:22:10.000
しかし、まず、それが求めるいくつかの配布オプションがあります。

00:22:10.000 --> 00:22:15.000
これらはすべて非常に役立つので、私はそれらを残して[次へ]をクリックします。

00:22:15.000 --> 00:22:22.000
そして、私は間違いなく署名を自動的に管理し続け、[次へ]をクリックしたいです。

00:22:22.000 --> 00:22:28.000
これで、アプリのコンテンツと拡張機能のコンテンツを確認する機会があります。

00:22:28.000 --> 00:22:35.000
満足したら、[アップロード]をクリックします。

00:22:35.000 --> 00:22:41.000
アップロードが完了するのを待っている間、App Storeのレビューを通過するためのヒントを簡単に見てみましょう。

00:22:41.000 --> 00:22:49.000
まず、すべてのコードと、プロジェクトで使用されるコンテンツ、画像、またはその他の資産を所有していることを確認してください。

00:22:49.000 --> 00:22:55.000
呼び出されるAPIまたはJavaScriptフレームワークの許可を持っているか、または証明できることを確認してください。

00:22:55.000 --> 00:23:03.000
また、カスタムアイコンを提供し、アプリに一意の名前を使用することを忘れないでください。App Storeで目立つようにしましょう。

00:23:03.000 --> 00:23:05.000
そして、絵文字でウェブを飾らないでください。

00:23:05.000 --> 00:23:11.000
最高のウェブ拡張機能 - 特集されるもの - は、ユーザーに役立つものを提供します。

00:23:11.000 --> 00:23:19.000
また、別のブラウザのウェブ支払いや寄付のコードがある場合は、App Storeレビューのために無効にする必要があります。

00:23:19.000 --> 00:23:24.000
拡張機能の先行販売は簡単で、App Storeで非常に人気があります。

00:23:24.000 --> 00:23:28.000
そのアップロードプロセスを確認しましょう。

00:23:28.000 --> 00:23:30.000
アップロードは正常に完了しました。

00:23:30.000 --> 00:23:31.000
すごい。

00:23:31.000 --> 00:23:38.000
Safariでは、App Store Connectにログインし、My Appsをクリックすると、作成された新しいアプリレコードを見ることができます。

00:23:38.000 --> 00:23:43.000
そして、Open Graph Previewをクリックすると、App Storeの追加情報を提供できます。

00:23:43.000 --> 00:23:47.000
アプリにいくつかのプレビュー画像を提供したいと思うでしょう。

00:23:47.000 --> 00:23:53.000
そして、プロモーションテキストの下で、このリリースの新機能に関する説明的な情報を提供する必要があります。

00:23:53.000 --> 00:24:02.000
説明の下で、この拡張機能がユーザーに何をするかの完全な説明を提供し、いくつかのキーワードを指定することもできます。

00:24:02.000 --> 00:24:06.000
100文字の制限に注意してください。正確である必要があります。

00:24:06.000 --> 00:24:12.000
また、ユーザーが拡張機能のサポートを受けることができるページ専用のURLも提供したいと思うでしょう。

00:24:12.000 --> 00:24:16.000
また、オプションで、マーケティングページのアドレスを含めることもできます。

00:24:16.000 --> 00:24:21.000
次に、アップロードツールを使用して、アプリの正しいアップロードを選択します。

00:24:21.000 --> 00:24:31.000
そして、それをすべて記入したら、[レビューのために提出]ボタンをクリックして、アプリレビュープロセスを開始できます。

00:24:31.000 --> 00:24:36.000
そして、Safariのウェブ拡張機能を構築して提出するのは簡単です。

00:24:36.000 --> 00:24:45.000
iOSとMacOSの両方の拡張機能を提出し、このセッションに関連するリソースをチェックすることをお勧めします。

00:24:45.000 --> 00:24:48.000
そして、必ずフィードバックを提出してください。ご連絡をお待ちしております。

00:24:48.000 --> 00:24:54.000
フィードバックアシスタントを使用して、バグを提出したり、機能のリクエストを行うことができます。

00:24:54.000 --> 23:59:59.000
そして、見てくれてありがとう。

