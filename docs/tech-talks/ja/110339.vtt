WEBVTT

00:00:00.000 --> 00:00:05.000
こんにちは、私の名前はナット・ブラウンで、アップルでゲーム技術に取り組んでいるエンジニアのチームを管理しています。

00:00:05.000 --> 00:00:14.000
今日は、アプリケーションやゲームで主要なリアルタイムのグラフィック統計を見て収集するためのヘッドアップディスプレイについてお話ししたいと思います。

00:00:14.000 --> 00:00:16.000
メタルパフォーマンスHUDを見てみましょう。 メタルパフォーマンスHUDを見てみましょう。

00:00:16.000 --> 00:00:24.000
有効にすると、アプリケーションの右上隅にオーバーレイとして表示されます。

00:00:24.000 --> 00:00:32.000
その目的は、あなたとあなたのテスターが潜在的なパフォーマンスの問題を簡単に発見し、後で分析するためにいくつかの基本的な情報を記録するのを助けることです。

00:00:32.000 --> 00:00:51.000
HUDは、既存のデバッグおよびパフォーマンス分析ツールを補完するものであり、代替するものではなく、スクリーンショットとログだけで品質保証チームや顧客から有用な情報を得るのに役立ち、再現が困難なパフォーマンスの問題やグラフィックスの不具合をより迅速に再現、分析、修正するのに役立ちます。

00:00:51.000 --> 00:00:55.000
HUDが表示し、収集できるデータを見てみましょう。

00:00:55.000 --> 00:01:05.000
HUDの一番上の行には、GPUとディスプレイ、使用されているデバイス、ターゲットとする解像度、ディスプレイのスケーリング状態に関する情報が表示されます。

00:01:05.000 --> 00:01:10.000
HUDは、ディスプレイの直接パスまたは複合パスにいるかどうかを示します。

00:01:10.000 --> 00:01:18.000
ダイレクトパスは、ドローableを表示してから画面に表示されるまでの間、バッファリングが最も少なく、更新間隔が最も少ないです。

00:01:18.000 --> 00:01:27.000
合成されている場合、システムUI要素または画面に重なる独自の追加レイヤーにより、追加のバッファリングと表示遅延が発生する場合があります。

00:01:27.000 --> 00:01:32.000
また、使用されている物理ディスプレイの最大リフレッシュレートも表示されます。

00:01:32.000 --> 00:01:41.000
可変リフレッシュレートディスプレイの場合、ディスプレイの最小リフレッシュレートも表示されるため、利用可能な可能なリフレッシュレート範囲が表示されます。

00:01:41.000 --> 00:01:55.000
次に、リアルタイムデータの最初の列には、ヘルツ単位の瞬間フレームレートまたはフレーム/秒、次にプリタイム、またはプレゼント間の時間（フレーム時間またはフレーム間隔（ミリ秒単位）とも呼ばれる）が表示されます。

00:01:55.000 --> 00:02:02.000
そして最後に、フレーム間隔で完了したGPU作業の量もミリ秒単位で測定されました。

00:02:02.000 --> 00:02:11.000
2番目の列には、フレームレートの最低値、フレーム間隔、および過去1秒半にわたってフレームに費やされたGPU時間に関する詳細情報が表示されます。

00:02:11.000 --> 00:02:17.000
この低い値が平均から大幅に逸脱した場合、HUDは赤で強調表示されます。

00:02:17.000 --> 00:02:32.000
HUDの数値データの最後の列は、最後の1秒半で最も高い瞬間フレームレート、最後の1秒半で最大のシングルフレーム時間、最後の1秒半のフレーム間隔で行われた作業のミリ秒で最も高いGPUコストを示しています。

00:02:32.000 --> 00:02:38.000
平均と比較して異常に高いフレーム間隔とGPU時間が、ここで再び赤で強調表示されます。

00:02:38.000 --> 00:02:50.000
HUDの下部にある最後のセクションには、時間の経過とともに潜在的なリークを見つけるのに役立つプロセスとGPUメモリ消費情報と、現在の間隔とGPU時間の2行グラフが表示されます。

00:02:50.000 --> 00:03:04.000
この情報の目的は、あなたとあなたのテスターが見逃す可能性のある一時的なフレームドロップを見つけ、より高度なXcodeとInstrumentsツールを使用して、より深いテスト、デバッグ、およびパフォーマンスチューニングを分離するのに役立ちます。

00:03:04.000 --> 00:03:07.000
では、どのようにメタルパフォーマンスHUDをオンにしますか?

00:03:07.000 --> 00:03:16.000
さて、開発者がこの形式のデータ収集と対話し、自動化したい多くの方法があることを知っているので、それを行うにはさまざまな方法があることを知って驚くかもしれません。

00:03:16.000 --> 00:03:22.000
1つ目は、iOS、macOS、またはtvOS用に開発している間、Xcode 14から右です。

00:03:22.000 --> 00:03:34.000
[診断] タブの [実行] スキームには、[グラフィックスの概要を表示] を選択して HUD をオンにし、[ログ グラフィックスの概要を表示] を選択してシステム ログにデータをログに有効にするオプションが表示されます。

00:03:34.000 --> 00:03:44.000
iOSとtvOSでは、デバイスをXcodeに接続し、開発のために有効にした場合は、開発者設定を使用してHUDとロギングをオンにすることができます。

00:03:44.000 --> 00:03:50.000
「設定」&gt;「開発者設定」に移動し、下にスクロールしてHUDを有効にし、オプションでロギングするだけです。

00:03:50.000 --> 00:04:01.000
iOSとtvOSでは、HUDは独自のアプリケーションのロギングのみを表示して実行します。つまり、XcodeまたはTestFlightを使用してインストールしたアプリケーションです。

00:04:01.000 --> 00:04:06.000
macOSでは、環境変数を使用してXcodeの外部でHUDを有効にすることができます。

00:04:06.000 --> 00:04:20.000
MTL_HUD_ENABLED環境変数を1に設定してHUDを表示し、MTL_HUD_LOGGING_ENABLED環境変数を1に設定してロギングをトリガーします。

00:04:20.000 --> 00:04:25.000
役に立つかもしれないもう1つのオプションは、アプリケーションのユーザーデフォルトを使用することです。

00:04:25.000 --> 00:04:38.000
macOS、iOS、tvOSでは、標準ユーザーのデフォルトでMetalForceHudEnabledキーをtrueに設定すると、HUDが表示され、その後のアプリケーションの起動時にロギングが行われます。

00:04:38.000 --> 00:04:44.000
macOSでは、すべてのMetalベースのアプリケーションにHUDを表示するグローバル値を設定できます。

00:04:44.000 --> 00:04:49.000
最後に、MetalHUDEnabledキーをInfo.plistに追加して、常にHUDを有効にすることができます。

00:04:49.000 --> 00:04:59.000
HUDが有効になっている場合、CAMetalLayer developerHUDProperties辞書を使用してHUDを表示および非表示にし、ロギングを有効または無効にすることができます。

00:04:59.000 --> 00:05:02.000
モードキーをデフォルトに設定すると、HUDが表示されます。

00:05:02.000 --> 00:05:04.000
キーをクリアするとHUDが非表示になります。

00:05:04.000 --> 00:05:07.000
ロギングキーをデフォルトに設定すると、ロギングが有効になります。

00:05:07.000 --> 00:05:10.000
このキーをクリアすると、ロギングが無効になります。

00:05:10.000 --> 00:05:20.000
内部ビルドのUIトグルをテスターに提供してHUDを表示および非表示にしたい場合は、Info.plistキーを追加してこのAPIを使用できます。

00:05:20.000 --> 00:05:23.000
それでは、Metal Performance HUDのログを見てみましょう。

00:05:23.000 --> 00:05:32.000
毎秒約1回、Metal Performance HUDは、収集しているデータを要約してシステムログにデータを書き込むので、独自の方法で分析できます。

00:05:32.000 --> 00:05:38.000
コンソールアプリケーションを起動し、ストリングメタルHUDで出力をフィルタリングするだけです。

00:05:38.000 --> 00:05:43.000
結果の各行は、ストリングメタルHUDで始まります。

00:05:43.000 --> 00:05:47.000
次に、最初のフレーム番号、次に推定フレームミスの数が表示されます。

00:05:47.000 --> 00:05:49.000
この場合、どれも見逃されませんでした。

00:05:49.000 --> 00:05:51.000
次に、プロセスメモリの使用量。

00:05:51.000 --> 00:05:55.000
ここでは56.05メガバイトです。

00:05:55.000 --> 00:06:00.000
その後、各フレームの現在間隔とGPU時間（ミリ秒単位）です。

00:06:00.000 --> 00:06:12.000
このデータはすべて、オフラインで分析したり、ゲームプレイをキャプチャしたビデオと関連付けたりして、追加のデバッグと最適化に焦点を合わせる場所についてさらに正確な洞察を提供するのに役立つかもしれません。

00:06:12.000 --> 00:06:15.000
今日、メタルパフォーマンスHUDについて楽しく学んでいただければ幸いです。

00:06:15.000 --> 00:06:17.000
HUDを使用して、ゲームのパフォーマンスを視覚化します。

00:06:17.000 --> 00:06:23.000
微妙なパフォーマンスの問題を発見し、インストゥルメントのようなより高度なツールを使用する場所を選択するのに役立ちます。

00:06:23.000 --> 00:06:30.000
すべてのAppleプラットフォームで簡単に有効にでき、独自のカスタム分析のために記録したデータをキャプチャすることもできます。

00:06:30.000 --> 00:06:35.000
ゲームやグラフィックアプリケーションの最適化に役立つことを本当に願っています。

00:06:35.000 --> 00:06:40.000
フィードバックがある場合は、必ずfeedbackassistant.apple.comから送信してください。

00:06:40.000 --> 23:59:59.000
参加してくれてありがとう。

