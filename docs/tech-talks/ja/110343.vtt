WEBVTT

00:00:01.000 --> 00:00:04.000
TestFlightの開始へようこそ。

00:00:04.000 --> 00:00:08.000
私はAneeshaで、App Storeの製品管理チームで働いています。

00:00:08.000 --> 00:00:13.000
同僚のジェロームが開発者ツール製品管理チームに加わりました。

00:00:13.000 --> 00:00:17.000
このプレゼンテーションでTestFlightについてもっと共有できることを嬉しく思います。

00:00:17.000 --> 00:00:24.000
今日の議題では、テストの重要性の簡単な概要とTestFlightの紹介から始めます。

00:00:24.000 --> 00:00:32.000
次に、ビルドの配布方法、テスターの追加方法、フィードバックの表示方法など、TestFlightの使用方法を共有します。

00:00:32.000 --> 00:00:35.000
では、飛び込みましょう。

00:00:35.000 --> 00:00:39.000
テストは、高品質のアプリ体験を作成するために不可欠です。

00:00:39.000 --> 00:00:50.000
これは、チームがコードを反復し、フィードバックを組み込むことができるプロセスであり、App Storeで優れたアプリやエクスペリエンスを顧客に提供できます。

00:00:50.000 --> 00:01:01.000
App Storeは、170以上の地域で15億台以上のデバイスと40以上の言語で利用できます。

00:01:01.000 --> 00:01:12.000
これは、人々があなたのアプリを発見する大きな機会であり、さまざまなデバイス、言語、アクセシビリティのニーズを持つさまざまな人々でもあります。

00:01:12.000 --> 00:01:20.000
アプリをテストすることで、世界中のApp Storeユーザーに素晴らしい体験を提供していることを確認できます。

00:01:20.000 --> 00:01:26.000
そして、あなたのテスト活動をサポートするために、Appleはアプリのテストに役立つ広範なツールセットを提供しています。

00:01:26.000 --> 00:01:37.000
たとえば、Xcodeを使用してXCTestでユニットテストとUIテストを作成し、Xcode Cloudを使用して各コード変更後にテストを自動化できます。

00:01:37.000 --> 00:01:46.000
シミュレータを使用して、さまざまなデバイスやOSでコードを手動でテストし、Instrumentsを使用してアプリのパフォーマンステストを行うことができます。

00:01:46.000 --> 00:01:52.000
今日はTestFlightを深く掘り下げます。

00:01:52.000 --> 00:02:04.000
TestFlightは、App Storeの人々が愛する世界クラスのアプリやゲームを作成できるように、プライバシーに配慮した方法で実際の人々からフィードバックを収集するのに役立つAppleのツールです。

00:02:04.000 --> 00:02:13.000
TestFlightを使用すると、アプリがApp Storeで公開される前からフィードバックを得て、この情報を使用してそれに応じてアプリを更新できます。

00:02:13.000 --> 00:02:21.000
TestFlightは、Apple Developer Programのメンバーシップの一部として含まれており、当社が提供する最も人気のある開発者ツールの1つです。

00:02:21.000 --> 00:02:30.000
TestFlightを使用すると、すべてのAppleプラットフォームにアプリを配布することができ、テスト体験を最適化するために特別に構築されています。

00:02:30.000 --> 00:02:38.000
高レベルでは、TestFlightを使用すると、アプリのビルドをアップロードしたり、テスターを追加したり、継続的にフィードバックを得たりできます。

00:02:38.000 --> 00:02:48.000
これにより、テスターのフィードバックを迅速かつ簡単に取得して決定を通知し、App Storeで公開する世界クラスのアプリやゲームを開発するのに役立ちます。

00:02:48.000 --> 00:02:52.000
次に、TestFlightの使用方法の例を詳しく説明しましょう。

00:02:52.000 --> 00:02:55.000
ジェロームは私たちを始めるつもりです。

00:02:55.000 --> 00:02:58.000
TestFlightの使用について話しましょう。

00:02:58.000 --> 00:03:07.000
そして、これを説明するために、App Storeで初めてリリースされる新しいフードトラックアプリを準備していると想像してみましょう。

00:03:07.000 --> 00:03:13.000
始めるには、まずビルドをアップロードしてテストの準備をする必要があります。

00:03:13.000 --> 00:03:26.000
カバーするビルドのアップロードには、App Store Connectへのアップロード、テストの詳細の追加、テスト情報の追加など、3つの主要なステップがあります。

00:03:26.000 --> 00:03:30.000
まず、Xcodeを使ってApp Store Connectにアップロードします。

00:03:30.000 --> 00:03:37.000
では、Xcodeを開いて、アプリのアーカイブを作成して、配布の準備をしましょう。

00:03:37.000 --> 00:03:42.000
そのために、まずアプリを構築したいアーキテクチャを選択します。

00:03:42.000 --> 00:03:50.000
ここでは、任意のiOSデバイスarm64で、製品のトップメニューからアーカイブを選択します。

00:03:50.000 --> 00:03:59.000
次に、TestFlightに送信するアプリとビルドバージョンを選択し、右側のアプリ配布ボタンをクリックします。

00:03:59.000 --> 00:04:09.000
TestFlightビルドでは、内部テスターと外部テスターの両方とビルドを共有できるように、配布方法としてApp Store Connectを選択します。

00:04:09.000 --> 00:04:16.000
テスターの種類については後で詳しく説明しますので、とりあえず「次へ」をクリックしましょう。

00:04:16.000 --> 00:04:22.000
アップロードを選択して、ビルドをApp Store Connectに自動的に送信します。

00:04:22.000 --> 00:04:29.000
アップロードする前に、Xcodeの横にあるアプリレコードを作成してください。

00:04:29.000 --> 00:04:34.000
私たちはほとんどビルドを提出せず、あと数回クリックするだけです。

00:04:34.000 --> 00:04:45.000
App StoreがXcodeのクラッシュオーガナイザーに配信する前にクラッシュレポートにシンボル名を追加できるように、アプリをアップロードするときにシンボルファイルを含めることをお勧めします。

00:04:45.000 --> 00:04:54.000
また、Xcodeの配布アシスタントがアプリに有効なビルド番号があるかどうかを検出できるように、Manage VersionとBuild Numberも選択します。

00:04:54.000 --> 00:05:04.000
アプリに以前に使用したような無効な番号がある場合、アシスタントは有効な番号に自動的にインクリメントするオプションを提供します。

00:05:04.000 --> 00:05:08.000
デフォルトでは、署名の自動管理が選択されます。

00:05:08.000 --> 00:05:13.000
Xcodeは私たちのプロフィールと証明書を管理することができ、これは素晴らしいことです。

00:05:13.000 --> 00:05:19.000
そして、これを終えた後、Xcodeは私たちのビルドをApp Store Connectにアップロードします。

00:05:19.000 --> 00:05:25.000
アプリがアップロードされると、TestFlightを使用してテストする準備が整いました。

00:05:25.000 --> 00:05:31.000
Xcodeを使用してビルドをアップロードする場合、心に留めておくべきベストプラクティスがいくつかあります。

00:05:31.000 --> 00:05:38.000
TestFlightを使用するには、必ず配布方法をApp Store Connectに設定してください。

00:05:38.000 --> 00:05:41.000
バージョンとビルド番号に注意してください。

00:05:41.000 --> 00:05:49.000
新しいビルドをアップロードするときは、常に前のビルドよりも大きい数値を持つビルド文字列を指定する必要があります。

00:05:49.000 --> 00:05:52.000
証明書とプロファイルが最新であることを確認してください。

00:05:52.000 --> 00:05:55.000
これはアップロードの問題の一般的な理由です。

00:05:55.000 --> 00:06:01.000
情報が正しいことを確認する簡単な方法の1つは、Xcodeが署名を管理できるようにすることです。

00:06:01.000 --> 00:06:04.000
テストのためにビルドを準備するために、さらに2つのことを行う必要があります。

00:06:04.000 --> 00:06:10.000
Aneeshaは、テスト情報の追加方法とテストの開始方法を共有します。

00:06:10.000 --> 00:06:18.000
テストの詳細を追加するには、まずApp Store Connectにアクセスしてビルドを表示します。

00:06:18.000 --> 00:06:25.000
TestFlightにアクセスするには、App Store Connectアプリページを開き、上部のTestFlightセクションをクリックします。

00:06:25.000 --> 00:06:33.000
アプリページのTestFlightセクションにあるApp Store ConnectモバイルアプリからTestFlightにアクセスすることもできます。

00:06:33.000 --> 00:06:39.000
これで、フードトラックアプリのTestFlightセクションにアップロードされたビルドが表示されます。

00:06:39.000 --> 00:06:45.000
TestFlightにアップロードされたすべてのビルドは、有効期限が切れるまで90日間アクティブです。

00:06:45.000 --> 00:06:51.000
90日を超えてテストを続けたい場合は、追加のビルドをアップロードするだけです。

00:06:51.000 --> 00:06:58.000
ここでは、ステータスや有効期限など、新しくアップロードされたビルドの詳細が表示されます。

00:06:58.000 --> 00:07:03.000
ビルドをクリックして、テストの詳細を追加します。

00:07:03.000 --> 00:07:11.000
テストの詳細を追加すると、テスターがアプリをテストするときに何に注意を払うべきかを知るのに役立ち、より価値のあるフィードバックを得るのに役立ちます。

00:07:11.000 --> 00:07:16.000
先に進んで、このビルドのためにいくつか追加しましょう。

00:07:16.000 --> 00:07:20.000
このアプリをリリースするのは初めてなので、それについて言及しましょう。

00:07:20.000 --> 00:07:27.000
また、ユーザーがフードトラックのデザインを変更できるようにし始めたばかりなので、テストの詳細でも言及しましょう。

00:07:27.000 --> 00:07:36.000
テスターがアプリをテストするときに最初に見るものであるため、ビルドに固有のテストの詳細を記入することは重要です。

00:07:36.000 --> 00:07:39.000
良さそうですね、今、私たちは保存を押しました。

00:07:39.000 --> 00:07:45.000
テストの詳細を追加する際に留意すべきベストプラクティスをいくつか紹介します。

00:07:45.000 --> 00:07:49.000
ビルドごとにテストの詳細を更新します。

00:07:49.000 --> 00:07:58.000
テストの詳細はビルドに関連付けられているため、これはテスターに有意義なフィードバックを提供する方法を伝える機会です。

00:07:58.000 --> 00:08:03.000
テストの詳細を思いつくときは、シンプルに保つことをお勧めします。

00:08:03.000 --> 00:08:09.000
短い文章や箇条書きを使って読みやすくし、潜在的なテスターを引き付けてみてください。

00:08:09.000 --> 00:08:15.000
また、テストする特定の機能や、注意すべき既知の問題を呼び出す必要があります。

00:08:15.000 --> 00:08:21.000
これは、テスターが何を探求すべきかを理解し、努力に集中するのに役立ちます。

00:08:21.000 --> 00:08:29.000
最後に、ビルドをテスターと共有する前に、アプリのテスト情報を追加する必要があります。

00:08:29.000 --> 00:08:37.000
これを行うには、一般情報の「テスト情報」セクションをクリックします。

00:08:37.000 --> 00:08:41.000
ベータ版アプリの説明とメールアドレスを追加する必要があります。

00:08:41.000 --> 00:08:54.000
ベータアプリの説明は、TestFlightアプリからテスターに表示され、電子メールで送信されたテスターのフィードバックは、ここに入力したフィードバックメールアドレスに送られます。

00:08:54.000 --> 00:09:03.000
そして、今は必須ではありませんが、外部テスターにアプリを配布する前に、ベータアプリのレビュー情報セクションに記入する必要があります。

00:09:03.000 --> 00:09:12.000
テスト情報ページは、アプリごとに1回だけ更新し、情報が変更された場合はもう一度更新する必要があります。

00:09:12.000 --> 00:09:18.000
そして、それで、私たちのビルドはテストを開始する準備ができています。

00:09:18.000 --> 00:09:24.000
ビルドがアップロードされ、テスト用に構成されているため、テスターを追加できるようになりました。

00:09:24.000 --> 00:09:29.000
TestFlightには、内部と外部の2種類のテスターを追加できます。

00:09:29.000 --> 00:09:36.000
私たちのアプリはまだかなり新しいので、チーム内の数人からフィードバックを得ることから始めましょう。

00:09:36.000 --> 00:09:40.000
内部テスターとしてアプリに追加します。

00:09:40.000 --> 00:09:43.000
内部テスターについてもう少し学びましょう。

00:09:43.000 --> 00:09:53.000
内部テスターはApp Store Connectチームの一員であり、最大100人のチームメンバーをアプリの内部テスターとして指定できます。

00:09:53.000 --> 00:10:05.000
各内部テスターは、最大30台のデバイスでビルドをインストールしてテストすることができ、これらのテスターはチームの一員であるため、すべての新しいビルドを自動的に配布することを選択できます。

00:10:05.000 --> 00:10:10.000
内部テスターを追加するには、まず内部グループを作成する必要があります。

00:10:10.000 --> 00:10:21.000
これを行うには、App Store ConnectのTestFlightセクションに移動し、内部テストの横にあるプラスボタンをクリックして、新しい内部テストグループを作成します。

00:10:21.000 --> 00:10:26.000
グループは、反復可能なテストプロセスを作成できるため、強力なツールです。

00:10:26.000 --> 00:10:34.000
グループ名を追加し、[自動配布を有効にする] ボタンがチェックされたままにして、[作成] をクリックします。

00:10:34.000 --> 00:10:37.000
今、私たちは内部グループを持っています。

00:10:37.000 --> 00:10:44.000
自動配布を有効にするため、ビルドはすでにこのグループに追加されています。

00:10:44.000 --> 00:10:52.000
今後、この内部グループは、1つずつ追加することなく、アップロードしたすべてのビルドに自動的にアクセスできます。

00:10:52.000 --> 00:11:01.000
グループが作成されたので、テスターを追加する必要があるので、テスターの横にある青いプラスボタンをクリックして、誰を追加できるかを確認しましょう。

00:11:01.000 --> 00:11:11.000
管理者、アプリマネージャー、開発者、またはマーケティングの役割を持つすべてのApp Store Connectチームメンバーは、追加できるテスターとしてここに表示されます。

00:11:11.000 --> 00:11:15.000
アプリごとに最大100人の内部テスターを追加できます。

00:11:15.000 --> 00:11:22.000
ジェローム、メリッサ、そして私を選んで、このグループに追加しましょう。

00:11:22.000 --> 00:11:25.000
今、私たちは社内グループのテスターです。

00:11:25.000 --> 00:11:32.000
ステータス欄には、私たちが招待されたことがわかります。

00:11:32.000 --> 00:11:37.000
テスターを追加すると、フードトラックアプリをテストするための招待メールが届きます。

00:11:37.000 --> 00:11:42.000
メールには、TestFlightで私たちのアプリを見るためのリンクが含まれています。

00:11:42.000 --> 00:11:52.000
テスターがTestFlightアプリを開いて招待を受け入れ、フードトラックアプリをインストールすると、最初に表示されます。

00:11:52.000 --> 00:11:56.000
このセクションには、ビルドの設定時に追加したテストの詳細が含まれています。

00:11:56.000 --> 00:12:04.000
そのため、アプリがインストールされる前から、テスターが貴重なフィードバックを提供する方法を理解するのを助ける機会がありました。

00:12:04.000 --> 00:12:07.000
テスターは、アプリの詳細を表示することもできます。

00:12:07.000 --> 00:12:15.000
たとえば、TestFlightのテスト情報セクションに追加したベータアプリの説明です。

00:12:15.000 --> 00:12:23.000
ジェロームとメリッサが私たちの招待を受けてフードトラックアプリをインストールすると、最初のテスターがいます。

00:12:23.000 --> 00:12:29.000
私たちのアプリが一部のテスターの手に渡った今、フィードバックがTestFlightでどのように機能するかを見るのに良い機会です。

00:12:29.000 --> 00:12:33.000
テスターは複数の方法でフィードバックを提出できます。

00:12:33.000 --> 00:12:38.000
まず、フィードバックの送信ボタンを備えたTestFlightアプリを介して。

00:12:38.000 --> 00:12:46.000
この方法で提出されたフィードバックは、アプリのテスト情報セクションで指定したメールに送信されます。

00:12:46.000 --> 00:12:50.000
テスターは、アプリのテスト中にスクリーンショットを撮ることもできます。

00:12:50.000 --> 00:12:56.000
スクリーンショットのプレビューでは、テスターはマークアップを編集して追加して詳細情報を提供できます。

00:12:56.000 --> 00:13:03.000
この方法では、テスターはスクリーンショットとコメントをTestFlightに直接共有するオプションがあります。

00:13:03.000 --> 00:13:07.000
フードトラックアプリがクラッシュした場合、テスターはクラッシュレポートを提出できます。

00:13:07.000 --> 00:13:14.000
彼らはレポートを送信し、クラッシュのコンテキストに関するフィードバックを追加することに同意することができます。

00:13:14.000 --> 00:13:20.000
グループのページは、私たちのアプリのテスターエンゲージメントとフィードバックの概要を得るのに最適な場所です。

00:13:20.000 --> 00:13:28.000
ステータス列を見ると、ジェロームとメリッサの両方が私たちのビルドをインストールし、それをテストしていることがわかります。

00:13:28.000 --> 00:13:37.000
テスターによるセッション、クラッシュ、フィードバックの数、ビルドごとに帰属するセッションとクラッシュの数を確認できます。

00:13:37.000 --> 00:13:42.000
調査すべきいくつかのクラッシュとフィードバックがあるようですので、それをやりましょう。

00:13:42.000 --> 00:13:48.000
まず、左側のフィードバックセクションの下にあるクラッシュページに行きましょう。

00:13:48.000 --> 00:13:55.000
ここでは、テスターが提出したすべてのクラッシュを確認し、表にまとめられたクラッシュの詳細をすばやく確認できます。

00:13:55.000 --> 00:14:01.000
その後、上部のフィルターを使用して、プラットフォーム、ビルド、またはデバイスごとにクラッシュを表示できます。

00:14:01.000 --> 00:14:12.000
このクラッシュを選択すると、タイムゾーン、バッテリーパーセンテージ、接続タイプなど、ジェロームが提出したクラッシュレポートの詳細を確認できます。

00:14:12.000 --> 00:14:19.000
これらの詳細は、このアプリがクラッシュした理由を理解しようとすると、本当に役に立ちます。

00:14:19.000 --> 00:14:26.000
同様に、スクリーンショットページに移動して、テスターから提供されたスクリーンショットのフィードバックを表示できます。

00:14:26.000 --> 00:14:34.000
クラッシュフィードバックと同様に、デバイス、ビルド、OSバージョンなどのフィールドでフィルタリングして、フィードバックのサブセットを表示できます。

00:14:34.000 --> 00:14:39.000
これは、次のビルドに加える可能性のある変更を知らせるのに役立ちます。

00:14:39.000 --> 00:14:43.000
スクリーンショットを選択して、より綿密に検査することもできます。

00:14:43.000 --> 00:14:57.000
スクリーンショットの詳細ビューから、右上隅のダウンロードボタンで画像をデバイスにダウンロードし、Xcodeで開くボタンを使用してXcodeオーガナイザーで開くこともできます。

00:14:57.000 --> 00:15:04.000
Xcodeオーガナイザーでは、選択したスクリーンショットと、フードトラックアプリのその他の視覚的なフィードバックとクラッシュを見ることができます。

00:15:04.000 --> 00:15:14.000
ここでは、開発チームにメモを書き、フィードバックに対処するにつれてフィードバックが解決されたことをマークすることができます。

00:15:14.000 --> 00:15:19.000
それを見て、私たちはTestFlightでの最初のテストラウンドを通過しました。

00:15:19.000 --> 00:15:23.000
私たちの内部テスターは、私たちに組み込むためにいくつかの本当に素晴らしいフィードバックを与えました。

00:15:23.000 --> 00:15:29.000
TestFlightは、テストニーズを拡張してサポートするように設計されていることを覚えておいてください。

00:15:29.000 --> 00:15:34.000
では、テストオーディエンスを拡大し、チーム外のテスターとアプリを共有しましょう。

00:15:34.000 --> 00:15:40.000
これを行うには、外部テスターをビルドに追加します。

00:15:40.000 --> 00:15:46.000
外部テスターは、アプリのベータテストに招待するチーム外のテスターです。

00:15:46.000 --> 00:15:51.000
アプリごとに最大10,000人の外部テスターを招待できます。

00:15:51.000 --> 00:16:00.000
そして、外部テスターでは、招待する2つの方法があります。招待またはパブリックリンクで、すぐにこれらの両方の違いに触れます。

00:16:00.000 --> 00:16:06.000
外部テスターとのテストを開始する前に、ビルドをApp Reviewに提出してください。

00:16:06.000 --> 00:16:12.000
これにより、TestFlightはテスターがテストに参加するための安全で信頼できる場所になります。

00:16:12.000 --> 00:16:20.000
最後に覚えておくべきことは、TestFlightでは、テスターは料金を発生させることなくアプリ内購入体験をテストできます。

00:16:20.000 --> 00:16:26.000
これは、彼らが店でライブになる前に、これらの経験を改善するのに本当に役立ちます。

00:16:26.000 --> 00:16:33.000
ビルドがアプリレビューを通過したら、外部グループを作成し、テスターの追加を開始できます。

00:16:33.000 --> 00:16:42.000
内部テストと同様に、外部テストセクションの横にある青いプラスボタンをクリックして、新しいグループを作成します。

00:16:42.000 --> 00:16:45.000
私たちのアプリをテストするために何人かのシェフを招待しましょう。

00:16:45.000 --> 00:16:51.000
先に進み、このグループのシェフテスターに電話して、[作成]をクリックします。

00:16:51.000 --> 00:16:57.000
すべての外部グループについて、テスターのグループがアクセスするビルドを手動で追加する必要があります。

00:16:57.000 --> 00:17:05.000
このグループのほとんどのセクションは内部グループに似ていますが、パブリックリンクと呼ばれる新しいセクションがあることがわかります。

00:17:05.000 --> 00:17:11.000
パブリックリンクは、電子メールに加えて、外部テスターにアプリを配布する別の方法です。

00:17:11.000 --> 00:17:17.000
電子メールの招待とは異なり、公開リンクを使用して招待するためにテスターの電子メールは必要ありません。

00:17:17.000 --> 00:17:26.000
代わりに、登録制限のある特定のリンクを生成し、リンクをクリックした人は誰でも登録してアプリのテスターになることができます。

00:17:26.000 --> 00:17:32.000
ソーシャルチャネルやメールキャンペーンなど、好きなようにリンクを共有することを選択できます。

00:17:32.000 --> 00:17:38.000
登録すると、これらのテスターはフィードバックを提供する際に匿名性を維持するオプションがあります。

00:17:38.000 --> 00:17:42.000
シェフテスターのための公開リンクを作成しましょう。

00:17:42.000 --> 00:17:47.000
これを行うには、[パブリックリンクを有効にする]ボタンを選択します。

00:17:47.000 --> 00:17:55.000
もう一度[有効にする]をクリックして、このグループの公開リンクを作成することを確認し、テスターの制限を設定します。

00:17:55.000 --> 00:18:00.000
これは、このリンクを使用して登録できる最大人数です。

00:18:00.000 --> 00:18:04.000
この制限は1まで低く、最大10,000まで設定できます。

00:18:04.000 --> 00:18:07.000
私たちは100から始めるつもりです。

00:18:07.000 --> 00:18:11.000
テスターの小さなグループから始めて、拡大することは常に良いことです。

00:18:11.000 --> 00:18:18.000
そして、心配しないでください。グループを作成してテストが進行したら、いつでも制限を編集できます。

00:18:18.000 --> 00:18:25.000
[制限の設定]をクリックすると、テスターを招待するために使用できるURLが表示されます。

00:18:25.000 --> 00:18:31.000
ソーシャルメディアでリンクを共有して、フードトラックアプリをテストするように人々を招待します。

00:18:31.000 --> 00:18:42.000
誰かがリンクをクリックすると、まだダウンロードしていない場合はTestFlightをダウンロードするように指示され、その後、フードトラックアプリをダウンロードできます。

00:18:42.000 --> 00:18:52.000
外部テスターから提供されたフィードバックは、内部テスターのフィードバックやクラッシュと同じ場所に表示されるため、何をすべきか、アプリを改善するためにそれをどのように使用するかをすでに知っています。

00:18:52.000 --> 00:19:04.000
この情報と診断を使用してフードトラックアプリを改善し、さらに数回のテストを経たら、App Storeに公開する準備が整いました。

00:19:04.000 --> 00:19:14.000
テストにTestFlightを使用したため、ビルドはすでにApp Store Connectにアップロードされているため、App Storeで公開するために提出するにはいくつかの手順が必要です。

00:19:14.000 --> 00:19:20.000
App Store ConnectのApp Storeタブに移動し、ページの詳細を記入します。

00:19:20.000 --> 00:19:25.000
繰り返しになりますが、すでにビルドをTestFlightにアップロードしているので、再度アップロードする必要はありません。

00:19:25.000 --> 00:19:30.000
代わりに、プロンプトが表示されたら、ドロップダウンメニューからビルドを選択します。

00:19:30.000 --> 00:19:37.000
完了したら、[レビューのために送信] をクリックし、それだけです。

00:19:37.000 --> 00:19:41.000
テストは1つの経験ではないことを覚えておいてください。

00:19:41.000 --> 00:19:48.000
これは、アプリがApp Storeで公開された後でも、継続的な開発サイクルの一部としてのベストプラクティスです。

00:19:48.000 --> 00:19:57.000
TestFlightをテストおよびリリースプロセスに組み込むことを検討する際には、テスト作業をさらに簡単にするための追加の方法を共有したいと考えました。

00:19:57.000 --> 00:20:02.000
そのために、私はそれをジェロームに返します。

00:20:02.000 --> 00:20:10.000
今年は、アプリをTestFlightとApp Store Connect、Xcode Cloudにアップロードする簡単な方法も導入しました。

00:20:10.000 --> 00:20:19.000
Xcode Cloudは、Xcodeに組み込まれた継続的な統合および配信サービスであり、Apple開発者向けに特別に設計されています。

00:20:19.000 --> 00:20:33.000
アプリを構築し、自動テストを並行して実行し、テスターにアプリを提供するのに役立つクラウドベースのツールをまとめることで、高品質のアプリの開発と配信を加速します。

00:20:33.000 --> 00:20:36.000
それはTestFlightの完璧なコンパニオンです。

00:20:36.000 --> 00:20:46.000
Xcode Cloudは、どのアクションを実行するか、いつ実行するかをXcode Cloudに指示する構成であるワークフローで動作します。

00:20:46.000 --> 00:20:50.000
フードトラックのワークフローを作りましょう。

00:20:50.000 --> 00:20:53.000
これはデフォルトのワークフローです。

00:20:53.000 --> 00:21:05.000
ワークフローは、開始条件、ビルド環境、実行するアクションのセット、および展開や通知などのポストアクションで構成されています。

00:21:05.000 --> 00:21:13.000
デフォルトでは、ポストアクションはありませんので、ワークフローを編集し、TestFlight展開のためのポストアクションを追加しましょう。

00:21:13.000 --> 00:21:20.000
まず、アーカイブアクションで、TestFlightビルドの展開準備を変更します。

00:21:20.000 --> 00:21:27.000
このワークフローを内部展開にのみ使用したいので、内部テストのみのオプションを選択します。

00:21:27.000 --> 00:21:35.000
外部テストやApp Store用にビルドを準備したい場合は、TestFlightとApp Storeのオプションを選択します。

00:21:35.000 --> 00:21:41.000
その後、ポストアクションプラス記号をクリックして、アーカイブステップの後にやりたいことを選択できます。

00:21:41.000 --> 00:21:46.000
その場合、TestFlightの内部テスト。

00:21:46.000 --> 00:21:55.000
次に、このワークフローの特定のテスターグループを選択し、先ほど作成したQAチームで[追加]をクリックします。

00:21:55.000 --> 00:22:07.000
私のワークフローが私の開始条件によってトリガーされると、Xcode Cloudは私のアプリを構築し、自動的にApp Store Connectにアップロードし、私のQAチームにTestFlightの新しいビルドが通知されます。

00:22:07.000 --> 00:22:11.000
保存をクリックするだけで、それだけです。

00:22:11.000 --> 00:22:19.000
Xcode Cloudは、Xcodeから直接アクセスでき、TestFlightアプリのすぐ横にあるApp Store Connectからもアクセスできます。

00:22:19.000 --> 00:22:26.000
Xcode Cloudとワークフローの詳細については、WWDCのビデオをご覧ください。

00:22:26.000 --> 00:22:33.000
TestFlightを継続的な開発サイクルに組み込む際に、心に留めておくべきことがいくつかあります。

00:22:33.000 --> 00:22:36.000
小さく始めて、それから拡大します。

00:22:36.000 --> 00:22:47.000
アプリに大きな変更を加えたり、新機能を導入したりする場合は、10,000人のテスター全員に配布する前にこれらの変更をテストできるように、時間の経過とともにテスターを追加することを検討してください。

00:22:47.000 --> 00:22:56.000
外部テスターも潜在的なユーザーであるため、彼らの経験に留意したいことを覚えておいてください。

00:22:56.000 --> 00:23:04.000
各ビルドとテストで達成したいことを知ることは、よりスムーズなテストプロセスを作成するのに役立ちます。

00:23:04.000 --> 00:23:14.000
グループを使用して反復可能なテストプロセスを作成します。グループはテスターを管理し、ビルドをすばやく配布するのに最適な方法です。

00:23:14.000 --> 00:23:22.000
グループを設定してテスターを追加すると、テストサイクルを開始し、新しいビルドをテスターとより迅速に共有できます。

00:23:22.000 --> 00:23:27.000
そして最後に、開発プロセスでXcode Cloudを試してみてください。

00:23:27.000 --> 00:23:36.000
これは、TestFlightのワークフローを自動化するのに役立ち、リリース間の時間を短縮し、アプリの全体的な品質を向上させることができます。

00:23:36.000 --> 00:23:46.000
このプレゼンテーションが、TestFlightを使用してテスターを巻き込み、ベータアプリに関する貴重なフィードバックを得る方法をよりよく理解するのに役立ったことを願っています。

00:23:46.000 --> 23:59:59.000
TestFlight、ドキュメントへのリンクなどの詳細については、Apple開発者のウェブサイトをご覧ください。

