WEBVTT

00:00:00.000 --> 00:00:03.000
こんにちは、私の名前はティム・チェンです。

00:00:03.000 --> 00:00:09.000
私はAppleのMapKitチームのエンジニアで、MapKit JSに取り組んでいます。

00:00:09.000 --> 00:00:22.000
今日は、MapKit JSをWebアプリケーションと統合する際に可能な限り最高の体験を提供するために使用できるいくつかのエキサイティングな新機能について説明します。

00:00:22.000 --> 00:00:31.000
2018年にMapKit JSが導入されて以来、私たちは毎年新機能の追加に精力的に取り組んできました。

00:00:31.000 --> 00:00:52.000
それにより、MapKit JSはAppleのウェブ提供の不可欠な部分となり、icloud.comの独自のFind Myサーバーのような多くのウェブサイト、DuckDuckGoのようなサードパーティのウェブサイト、ギリシャの不動産検索ウェブサイトに統合されています。

00:00:52.000 --> 00:00:59.000
このウェブサイトは、マップ機能をローカライズするMapKit JSの機能を利用していることに気づくでしょう。

00:00:59.000 --> 00:01:08.000
簡単なインクルードと初期化により、あらゆるWebアプリケーションでMapKit JSを非常に簡単に採用できるようにしました。

00:01:08.000 --> 00:01:18.000
ただし、アプリケーションのパフォーマンスを最適化する方法でMapKit JSを採用する柔軟性を提供したいと考えています。

00:01:18.000 --> 00:01:41.000
今年から、パフォーマンスに目を向け、ページをより応答性が高く、読み込みを高速化し、より多くの制御を提供するように設計された方法で、必要なときに必要な機能のみを含めることができる方法を検討しました。

00:01:41.000 --> 00:02:05.000
今日は、高性能MapKit JSロード用の新しいマークアップ、追加のMapKit JSライブラリをオンデマンドでロードする機能、そして最後に、アプリケーションがユーザーに提示する目的のマップ機能を通知する新しい方法など、3つの新機能を紹介します。

00:02:05.000 --> 00:02:16.000
さて、これらの新機能がどのようにウェブアプリケーションを改善できるかを実証するために、仲間の海賊のためのインタラクティブな宝の地図を構築しているとしましょう。

00:02:16.000 --> 00:02:20.000
MapKit JSのデフォルト実装を採用しました。

00:02:20.000 --> 00:02:34.000
しかし、お粗末な海賊船のWi-Fiでこのページを表示すると、読み込みに時間がかかりすぎて、ユーザーはマップが表示されるまで待ちすぎなければならず、あなたの船員はせっかちになります。

00:02:34.000 --> 00:02:41.000
したがって、反乱を防ぐために、新しい高性能MapKit JSロードマークアップを使用できます。

00:02:41.000 --> 00:02:50.000
デフォルトの実装を拡張されたマークアップと、ウェブアプリの調整に使用する追加のプロパティと交換します。

00:02:50.000 --> 00:03:02.000
まず、MapKit JSは、始めるための最小量のコードのみを含む新しいJavaScriptバンドルmarket.core.jsを提供しています。

00:03:02.000 --> 00:03:08.000
次に、MapKit JSに必要な機能のサブセットを知らせたいと思います。

00:03:08.000 --> 00:03:16.000
ここでは、インタラクティブマップを表示するための最小機能セットであるマップライブラリのみを指定します。

00:03:16.000 --> 00:03:28.000
MapKit JSが非同期属性を使用してページの読み込みをブロックするのを防ぎ、読み込みが終了したときにデータコールバック属性で指定されたコールバックを呼び出します。

00:03:28.000 --> 00:03:39.000
MapKit JSはページの読み込みをブロックしなくなったため、ウェブアプリは初めてインターフェイスを評価する前に、その準備を主張する必要があります。

00:03:39.000 --> 00:03:48.000
例として、MapKit JSの準備が整ったときにMapKitインターフェイスに解決される非同期関数があります。

00:03:48.000 --> 00:03:55.000
いつものように、MapKit JSは、ロードされるとすぐにグローバルウィンドウオブジェクトで利用できます。

00:03:55.000 --> 00:04:02.000
MapKitオブジェクトが未定義の場合、MapKit JSがまだロードされていないことを意味します。

00:04:02.000 --> 00:04:07.000
さらに、初期ライブラリがロードされているかどうかを確認したい。

00:04:07.000 --> 00:04:14.000
データライブラリの属性を使用して、マークアップでマップライブラリを要求したことを思い出してください。

00:04:14.000 --> 00:04:22.000
2つのテストのいずれかに失敗すると、データコールバック属性を使用したコールバックセットが呼び出されていないことを意味します。

00:04:22.000 --> 00:04:31.000
ここでは、コールバックを非同期関数の約束に変換し、約束解決の直後にコールバックをクリーンアップします。

00:04:31.000 --> 00:04:37.000
これにより、この機能が戻ったときにMapKit JSがロールする準備ができていることを保証します。

00:04:37.000 --> 00:04:40.000
さて、構文に戻ります。

00:04:40.000 --> 00:04:56.000
高性能マークアップには、ブラウザがMapKit JS CDNに行くすべての要求に対して単一のHTTP/2接続を再利用できるようにするクロスオリジン属性など、他にもいくつかの有用な属性があります。

00:04:56.000 --> 00:05:03.000
また、MapKit JSは、機会があればすぐに初期化したいと考えています。

00:05:03.000 --> 00:05:07.000
マークアップに最初のトークンを設定することで、それを達成できます。

00:05:07.000 --> 00:05:18.000
それをつなぎ合わせると、ページの読み込みがさらに速くなりますが、まだそこにはありません。

00:05:18.000 --> 00:05:30.000
地図ライブラリだけを頼んだので、海賊船や宝物を地図に戻すには、注釈ライブラリをロードする必要があります。

00:05:30.000 --> 00:05:34.000
そして、それが私たちの2番目の最適化が役に立つところです。

00:05:34.000 --> 00:05:40.000
そのMapKitのダウンロードのためだけに新しい方法が提供されています。

00:05:40.000 --> 00:05:44.000
オンデマンドで追加のライブラリを非同期にロードします。

00:05:44.000 --> 00:05:51.000
また、ロードしたライブラリに別のライブラリが必要な場合は、自動的に処理されます。

00:05:51.000 --> 00:05:54.000
そして、ここでそれは行動しています。

00:05:54.000 --> 00:06:01.000
MapKitダウンロードメソッドを呼び出して、注釈ライブラリを読み込むだけです。

00:06:01.000 --> 00:06:09.000
ロードイベントのリスナーを追加し、呼び出されたときにアノテーションを追加します。

00:06:09.000 --> 00:06:13.000
そしてもちろん、注釈以上のものをロードすることができます。

00:06:13.000 --> 00:06:20.000
たとえば、サービスは検索やジオコーダなどのすべてのサービスAPIを網羅しています。

00:06:20.000 --> 00:06:26.000
フルマップは、MapKitマップクラスで利用可能なすべての機能をロードします。

00:06:26.000 --> 00:06:36.000
これには、基本的な地図、オーバーレイ、注釈、ユーザーの位置表示が含まれます。

00:06:36.000 --> 00:06:45.000
そして、GeoJSONはGeoJSONインポーターをロードします。

00:06:45.000 --> 00:06:52.000
さて、これは良いローディング体験ですが、私たちはこれよりもさらに良いことができます。

00:06:52.000 --> 00:07:00.000
これは、今日紹介する3番目の機能です。優先マップのスタートアップです。

00:07:00.000 --> 00:07:11.000
新しいロード優先プロパティを使用すると、MapKit JSに興味のあるポイントを早く表示するように指示して、野生の海賊に有利なスタートを切ることができます。

00:07:11.000 --> 00:07:19.000
負荷優先度を設定するときは、ユーザーが必要とする最高のエクスペリエンスに応える必要があります。

00:07:19.000 --> 00:07:24.000
利用可能な3つの負荷優先オプションがあります。

00:07:24.000 --> 00:07:32.000
興味のあるポイントは、注釈を付ける前であっても、地図ラベルと興味のあるポイントを早く表示するようにMapKitマップに指示します。

00:07:32.000 --> 00:07:40.000
一方、土地被覆は、土地被覆、道路、国境のみにサービスを提供します。

00:07:40.000 --> 00:07:55.000
これらのオプションは、ビューポートの回転や正確なマップ領域など、起動時にいくつかのマップ動作に干渉するので、noneに設定することで、ロード優先度を完全にオフにすることができます。

00:07:55.000 --> 00:07:59.000
そして、これが実際にどのように見えるかです。

00:07:59.000 --> 00:08:05.000
マップコンストラクタオプションでロード優先度を使用して、目的の優先度を指定するだけです。

00:08:05.000 --> 00:08:15.000
ここでは、MapKitマップに最初に興味のあるポイントを表示するように依頼します。

00:08:15.000 --> 00:08:19.000
今、それはさらに良いローディング体験です。

00:08:19.000 --> 00:08:27.000
本日、アプリケーションのマップロードエクスペリエンスを向上させるために設計された3つの新機能を導入しました。

00:08:27.000 --> 00:08:36.000
私たちは、全体的なユーザーエクスペリエンスがシームレスで損なわれないようにしながら、MapKit JSを統合できると信じています。

00:08:36.000 --> 00:08:44.000
既存のアプリケーションでは、それぞれが独自の利益をもたらすため、これらの新機能を徐々に採用してください。

00:08:44.000 --> 00:08:50.000
以下に示す詳細なドキュメントとMaps Server APIセッションを必ず確認してください。

00:08:50.000 --> 00:08:55.000
これらの新機能をどのように活用するかを楽しみにしています。

00:08:55.000 --> 23:59:59.000
ありがとうございます。

