WEBVTT

00:00:00.000 --> 00:00:05.000
Deena Khattab: こんにちは、Apple Designチームのデザイナー、Deena Khattabです。

00:00:05.000 --> 00:00:09.000
後で、同僚のジェニファーとマシューが参加します。

00:00:09.000 --> 00:00:20.000
Apple Watch Series 7の設計プロセスについて話すことに本当に興奮していますが、始める前に、何が新しいのかを簡単に見てみましょう。

00:00:20.000 --> 00:00:28.000
Apple Watch Series 7には、41mmと45mmの2つの新しいサイズがあります。

00:00:28.000 --> 00:00:34.000
どちらの時計も、これまで以上に大きなアクティブコンテンツエリアを備えています。

00:00:34.000 --> 00:00:46.000
41mmは176×215ポイント、45mmは198×242ポイントです。

00:00:46.000 --> 00:00:55.000
Apple Watch Series 7のディスプレイは端をカーブし、微妙なラップアラウンド効果が特徴です。

00:00:55.000 --> 00:01:01.000
画面の周りのベゼルは、かつてないほど薄く、見えにくくなっています。

00:01:01.000 --> 00:01:08.000
さらに、画面は以前のデバイスよりも角の半径が大きいです。

00:01:08.000 --> 00:01:17.000
これらの重要なハードウェアの違いを念頭に置いて、UIを形作るための3つの有用な設計原則を特定しました。

00:01:17.000 --> 00:01:21.000
シリーズ7には、私たちが監視した中で最大のコンテンツエリアがあります。

00:01:21.000 --> 00:01:30.000
使いやすさを向上させるために追加のスペースを最大限に活用するために、UIコンポーネントを拡大しました。

00:01:30.000 --> 00:01:38.000
時計アプリでより明確な階層を作成するために、タイポグラフィと色を綿密に調べました。

00:01:38.000 --> 00:01:43.000
Apple Watchは常に軽量で目を見やすい体験でした。

00:01:43.000 --> 00:01:51.000
私たちは、一目でより良い場所の感覚を提供するために、ナビゲーションとウェイファインディングを調べました。

00:01:51.000 --> 00:01:59.000
要約すると、Apple Watch Series 7のアプリは、より大きく、より明確で、より目を見やすいはずです。

00:01:59.000 --> 00:02:09.000
次のセクションでは、ジェンは、更新されたUI要素を使用して、これらの原則を自分のアプリに具現化する方法について説明します。

00:02:09.000 --> 00:02:14.000
ジェニファー・パットン:ありがとう、ディーナ。レイアウトの余白から始めましょう。

00:02:14.000 --> 00:02:22.000
コーナーが非常に湾曲しているため、コンテンツはコーナーにうまく収まるように入ったり降りたりする必要があります。

00:02:22.000 --> 00:02:29.000
ステータスバーは背が高く、画面の下部にある背の高いスクロールクリアランスマージンと一致します。

00:02:29.000 --> 00:02:39.000
そして、アクティブなディスプレイエリアとハードウェアケーシングの間の小さなベゼルで、私たちは画面の端に近いコンテンツについて識別していました。

00:02:39.000 --> 00:02:47.000
レイアウトマージンはシリーズ7で寛大で、コンテンツに十分な呼吸の余地を与えます。

00:02:47.000 --> 00:02:49.000
マシュー・クワンス:ありがとう、ジェニファー。

00:02:49.000 --> 00:02:51.000
こんにちは、私の名前はマシューです。

00:02:51.000 --> 00:02:58.000
watchOSでマージンを効果的に使用する方法の例として、株式を使ってみましょう。

00:02:58.000 --> 00:03:04.000
まず、すでに適用されている余白を削除しましょう。

00:03:04.000 --> 00:03:08.000
ご覧のとおり、このレイアウトにはいくつかの問題があります。

00:03:08.000 --> 00:03:11.000
詳しく見てみましょう。 

00:03:11.000 --> 00:03:16.000
最初の問題は、現在の株価のテキストです。

00:03:16.000 --> 00:03:19.000
ディスプレイの端に非常に近いです。

00:03:19.000 --> 00:03:25.000
これは、Apple Watch Series 7のラップアラウンドディスプレイに問題がある可能性があります。

00:03:25.000 --> 00:03:33.000
2番目の問題は、ディスプレイの隅にクリップされたナスダックのテキストです。

00:03:33.000 --> 00:03:39.000
さらに、ナビゲーションバーの最先端へのテキストの配置を失いました。

00:03:39.000 --> 00:03:44.000
SwiftUIコードでこれらの問題を解決する方法を見てみましょう。

00:03:44.000 --> 00:03:49.000
ここには、シンプルなVStackである株式レイアウトのスニペットがあります。

00:03:49.000 --> 00:03:55.000
まず、.scenePadding修飾子を使用して、現在の価格ビューのレイアウトを調整できます。

00:03:55.000 --> 00:04:00.000
この修飾子は、レイアウトマージンにシステム定義のパディングを適用します。

00:04:00.000 --> 00:04:06.000
ご覧のとおり、これにより現在の価格ビューのレイアウトが解決されます。

00:04:06.000 --> 00:04:13.000
以下のナスダックのテキストで同じ.scenePadding修飾子を使いましょう。

00:04:13.000 --> 00:04:22.000
そしてもう一度、これは私たちのレイアウトの問題を解決し、私たちが探していたアライメントを回復します。

00:04:22.000 --> 00:04:27.000
日チャートに修飾子を適用しなかったことに注意してください。

00:04:27.000 --> 00:04:33.000
このチャートのような一部のコンテンツは、ディスプレイの端に行くのにまったく問題ありません。

00:04:33.000 --> 00:04:44.000
.scenePadding修飾子を使用して、ディスプレイの端で歪んだりクリップされたりするテキストコンテンツにのみ保存してみてください。

00:04:44.000 --> 00:04:56.000
ジェニファー：今年は、アプリをより見やすくし、より良い場所の感覚を提供し、アプリ内でより明確な階層を確立するために、大きなタイトルをwatchOSに持ち込みました。

00:04:56.000 --> 00:05:02.000
スクロールテーブルビューは、iOSの大きなタイトルと同様に、この大きなタイトルを取得します。

00:05:02.000 --> 00:05:06.000
タイトルはスクロール時にステータスバーに移行します。

00:05:06.000 --> 00:05:10.000
ルートレベルとサブビューは大きなタイトルを取得します。

00:05:10.000 --> 00:05:20.000
設定は、明確な場所の感覚を定義するためにアプリで大きなタイトルを使用する方法の素晴らしい例です。

00:05:20.000 --> 00:05:39.000
スクロールしない固定ビューでは、タイマーのような機会を探して、ビューのタイトルをコンテンツ領域とステータスバーから持ち込んだり、不要な場所で完全に削除したり、戻るボタンのナビゲーションからビューのタイトルを離婚したりしました。

00:05:39.000 --> 00:05:50.000
また、この世界時計の詳細例のように、ステータスバーが依然としてタイトル情報に最適な場所である固定ビューもあります。

00:05:50.000 --> 00:06:03.000
大規模なタイトルは、特にシリーズ7で利用可能なより大きなアクティブコンテンツエリアに触発されましたが、以前の40および44 mmデバイスでもうまく機能します。

00:06:03.000 --> 00:06:08.000
マシュー：SwiftUIを使用すると、アプリの大きなタイトルを簡単に設定できます。

00:06:08.000 --> 00:06:18.000
watchOS 8のデフォルトでは、すべてのナビゲーションタイトルは大きく、アプリケーションのアクセントカラーで着色されています。

00:06:18.000 --> 00:06:27.000
特定のビューに大きなタイトルを付けたくない場合は、.navigationBarTitleDisplayMode修飾子を使用できます。

00:06:27.000 --> 00:06:39.000
この修飾子を適用すると、階層内の後続のビューは、上記のビューの表示モードを継承します。

00:06:39.000 --> 00:06:47.000
ジェニファー:カラーは、ウェイファインディング、情報階層、アプリの個性を示すことを目的としています。

00:06:47.000 --> 00:06:54.000
このマインドフルネスの例では、ティールカラーがアプリのアイデンティティと体験を強化します。

00:06:54.000 --> 00:07:05.000
システムティールをアプリのキーカラーとして使用し、システムグレーのプラッターの背景色を押し戻して、よりミュートされた効果を作成します。

00:07:05.000 --> 00:07:08.000
リストビューアプリはウォッチで一般的です。

00:07:08.000 --> 00:07:19.000
このメールの例では、青い背景を使用すると、同様のナビゲーションパターンを使用する別のアプリではなく、メールアプリにいることを強制します。

00:07:19.000 --> 00:07:28.000
この例では、明るい黄色のプラッターは、ワークアウトのような他のカルーセルナビゲーションアプリとヒントを視覚的に区別します。

00:07:28.000 --> 00:07:35.000
また、すべてのプラットフォームでTipsエクスペリエンスの継続性を強化します。

00:07:35.000 --> 00:07:40.000
マシュー：アセットカタログでアプリケーションのアクセントカラーを設定できます。

00:07:40.000 --> 00:07:46.000
ここで色を設定すると、すべてのナビゲーションバーが自動的にこの色を使用します。

00:07:46.000 --> 00:07:53.000
アクセントカラーの設定の詳細については、開発者ドキュメントを参照してください。

00:07:53.000 --> 00:08:00.000
さらに、.accentColor修飾子を使用することで、SwiftUIで自分で色を簡単に使用できます。

00:08:00.000 --> 00:08:09.000
メールでは、listItemTintをアプリケーションのアクセントカラーを30%の不透明度に設定します。

00:08:09.000 --> 00:08:17.000
ジェニファー：シリーズ7の時計のデザイン中に、ボタンやボタンの形も詳しく調べました。

00:08:17.000 --> 00:08:19.000
現在のボタンシステムはこんな感じです。

00:08:19.000 --> 00:08:30.000
スクロールビューに見られる丸みを帯びた長方形のボタンがあり、スクロールしない固定ビューでしか見られないピン留めされたボタンのセットがあります。

00:08:30.000 --> 00:08:37.000
それらは画面の下部に固定され、画面の形状を補完することを目的としています。

00:08:37.000 --> 00:08:44.000
シリーズ7では、スクロールボタンと非スクロールボタンの同じ基本システムを拡張しました。

00:08:44.000 --> 00:08:57.000
一般的なセカンダリボタンの配色に簡素化し、サイドバイサイドボタンはスプリットロゼンジ形状からサイドバイサイドピル形状に切り替えています。

00:08:57.000 --> 00:09:01.000
更新されたアプリのボタンの例をいくつか紹介します。

00:09:01.000 --> 00:09:11.000
左側のアラームリストのプライマリスクロールボタンと右側のUIPickerViewのサイドバイサイドボタン。

00:09:11.000 --> 00:09:15.000
これらのピン留めされたボタンの形を詳しく見てみましょう。

00:09:15.000 --> 00:09:21.000
シリーズ7のボタンの形を作るのに細心の注意を払いました。

00:09:21.000 --> 00:09:26.000
これは、単純な錠剤の形を使用することがどのように見えるかの例です。

00:09:26.000 --> 00:09:33.000
下部のボタンの平らな面がディスプレイの曲率でどのように張力を作り出すかを見てください。

00:09:33.000 --> 00:09:37.000
そして、これが細工されたボタンの形です。

00:09:37.000 --> 00:09:39.000
もう一度やります。

00:09:39.000 --> 00:09:53.000
変更は微妙ですが、ディスプレイ自体の形状からボタンの形状を導き出すことで、これらのボタンは画面の下部に固定され、時計のハードウェアと調和します。

00:09:53.000 --> 00:09:58.000
更新されたボタンは、プレシリーズ7デバイスにも戻ります。

00:09:58.000 --> 00:10:07.000
ボタンの高さは同じままなので、既存のUIにこれらの新しいボタンを採用するためにレイアウトの更新は必要ありません。

00:10:07.000 --> 00:10:14.000
マシュー：新しいApple Watch Series 7の外観でSwiftUIのすべてのボタンを更新しました。

00:10:14.000 --> 00:10:20.000
ほとんどの場合、これは自動的に行われ、アプリで変更は必要ありません。

00:10:20.000 --> 00:10:25.000
そうは言っても、いくつかのことを念頭に置いておくことが重要です。

00:10:25.000 --> 00:10:34.000
ここに示されているキャンセルボタンのようなボタンを定義すると、SwiftUIはあなたに代わっていくつかのデフォルトの修飾子を適用しています。

00:10:34.000 --> 00:10:44.000
watchOSのボタンは、デフォルトでボーダーボタンスタイルと自動ボーダーシェイプを使用します。

00:10:44.000 --> 00:10:49.000
自動境界線形状は、コンテキストに基づいて境界線形状が変更されることを意味します。

00:10:49.000 --> 00:10:53.000
スクロールビューの外側では、形状はカプセルです。

00:10:53.000 --> 00:10:58.000
たとえば、これらのキャンセルボタンとスタートボタン。

00:10:58.000 --> 00:11:02.000
スクロールビューでは、ボタンは丸みを帯びた長方形の形をしています。

00:11:02.000 --> 00:11:06.000
例えば、アラームの追加ボタン。

00:11:06.000 --> 00:11:11.000
さらに、ボーダード・ス prominentと呼ばれる代替ボタンスタイルがあります。

00:11:11.000 --> 00:11:17.000
このスタイルは、アラームで行うボタンにアプリケーションのアクセントカラーを適用します。

00:11:17.000 --> 00:11:25.000
これにより、ボタンがより顕著な外観が生まれ、すぐにあなたの注意を引きます。

00:11:25.000 --> 00:11:30.000
ディーナ：この次のセクションでは、タイポグラフィの更新について説明します。

00:11:30.000 --> 00:11:44.000
シリーズ7は、シリーズ6と同じデフォルトタイプサイズを使用します。40mmと41mmの場合は大、44mmと45mmの場合は特大です。

00:11:44.000 --> 00:11:51.000
その結果、以前のデバイスよりも多くの文字数を獲得します。

00:11:51.000 --> 00:11:57.000
また、3つの大きなタイプサイズを追加することで、アクセシビリティを向上させるためにタイプを使用しました。

00:11:57.000 --> 00:12:02.000
これがデフォルトのタイプサイズのメールアプリです:特大。

00:12:02.000 --> 00:12:10.000
そして、これは新しいAX1、AX2、AX3にあります。

00:12:10.000 --> 00:12:17.000
時計でより大きなタイプを使用したい人を助けるために、スマートタイプの提案を追加しました。

00:12:17.000 --> 00:12:28.000
セットアップフローでは、携帯電話は大きなタイプ設定が実装されているかどうかを識別し、新しい時計に同様のタイプサイズを提案します。

00:12:28.000 --> 00:12:34.000
この機能により、最初からお好みのタイプサイズを簡単に使用できます。

00:12:34.000 --> 00:12:41.000
タイポグラフィに焦点を当てながら、SFシンボルでテキストラベルを補完することをお勧めします。

00:12:41.000 --> 00:12:52.000
リストビューベースのナビゲーションを備えたアプリの場合は、メールや電話などのアプリケーションのアクセントカラーでアウトラインシンボルを使用することをお勧めします。

00:12:52.000 --> 00:12:58.000
これは、クロスプラットフォームの一貫性とアクセシビリティに役立ちます。

00:12:58.000 --> 00:13:04.000
可能な限り、シンボルのスタイルと色をプラットフォーム間で調整します。

00:13:04.000 --> 00:13:12.000
SFシンボルの詳細については、WWDC21からのこれらの講演をチェックしてください。

00:13:12.000 --> 00:13:20.000
次に、Apple Watch Series 7の新しいキーボードとテキスト入力機能を強調します。

00:13:20.000 --> 00:13:26.000
アクティブな画面領域が大きいため、フルキーボードを追加しました。

00:13:26.000 --> 00:13:32.000
時計用に特別に設計されたこのキーボードでは、キーの周りに境界線を描画しません。

00:13:32.000 --> 00:13:39.000
これにより、タップターゲットを見逃す可能性があるという感覚を避けながら、スワイプして入力することが促進されます。

00:13:39.000 --> 00:13:48.000
入力可能なスペースを最大化するために、削除キーをキーボードからテキストフィールドに引き出しました。

00:13:48.000 --> 00:14:00.000
さらに、キーボードでは、パスワードや2要素認証などの特定のユースケースの自動入力タイプをカスタマイズできます。

00:14:00.000 --> 00:14:05.000
キーボードのサポートに加えて、テキスト入力の機能を改善しました。

00:14:05.000 --> 00:14:11.000
左右のアクセサリーは、SFシンボルを使用してカスタマイズできます。

00:14:11.000 --> 00:14:20.000
タップ性を強調するために、両方のシンボルにアプリケーションのアクセントカラーを使用することをお勧めします。

00:14:20.000 --> 00:14:27.000
入力フィールドのプレースホルダテキストと提案されたリストのタイトルに説明的な単語を使用してください。

00:14:27.000 --> 00:14:40.000
キーボードとテキスト入力の詳細、およびアプリケーションでの最適な使用方法については、これらのWWDC21トークをチェックしてください。

00:14:40.000 --> 00:14:52.000
シーンパディング、自動ボタン形状、階層ナビゲーションで、新しいディスプレイの可能性を最大限に活用する方法を紹介しました。

00:14:52.000 --> 23:59:59.000
シリーズ7の設計に関するその他のリソースについては、WWDC21の「watchOS 8の新機能」と「SwiftUIの新機能」をチェックしてください。

