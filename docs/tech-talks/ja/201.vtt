WEBVTT

00:00:01.000 --> 00:00:09.000
iOS 11 SDKに対してアプリをリンクすることは、iPhone Xの超網膜ディスプレイを利用するために必要な唯一のことです。

00:00:09.000 --> 00:00:19.000
アプリが主に標準のUIKitコントロールに基づいており、自動レイアウトを使用している場合は、ほとんどの作業がUIKitによって行われるため、良好な状態です。

00:00:19.000 --> 00:00:27.000
カスタムコントロールを使用している場合、または自動レイアウトを使用していない場合、または多くのゲームのようにカスタムフルスクリーンアプリである場合は、心配しないでください。

00:00:27.000 --> 00:00:35.000
あなたがやるべき仕事があるかもしれませんが、それは難しくなく、新しいセーフエリアレイアウトガイドのようなツールで多くのサポートが組み込まれています。

00:00:35.000 --> 00:00:43.000
いずれの場合も、特にランドスケープでアプリを徹底的にテストして、すべてが正しく見えることを確認する必要があります。

00:00:43.000 --> 00:00:54.000
Xcodeの最新バージョンには、iPhone Xのシミュレータサポートが含まれており、ほとんどのレイアウトの変更、特にセーフエリアの尊重に関する調整を行うことができます。

00:00:54.000 --> 00:01:02.000
メタルを使用するアプリや、フロントカメラなどのハードウェア機能など、一部のアプリでは、実際のデバイスを使用する必要がある場合があります。

00:01:02.000 --> 00:01:05.000
新しいiPhone Xシミュレーターを簡単に見てみましょう。

00:01:05.000 --> 00:01:11.000
他のiPhoneやiPadシミュレーターと同様に、多くの組み込みシステムアプリにアクセスできます。

00:01:11.000 --> 00:01:18.000
これは、iPhone XでさまざまなUIKitコンポーネントがどのように動作するかの例を見るのに最適な方法です。

00:01:18.000 --> 00:01:27.000
たとえば、ファイルアプリは、統合された検索バーや大きなナビゲーションバーのタイトルなど、動作中の最新のiOS 11 APIの多くを表示します。

00:01:27.000 --> 00:01:34.000
また、シミュレーターでiCloudアカウントにサインインして、iCloud Driveにアクセスできることを忘れないでください。

00:01:34.000 --> 00:01:40.000
これにより、ファイルを転送したり、写真などのコンテンツをシミュレーターにテストしたりすることが本当に簡単になります。

00:01:40.000 --> 00:01:47.000
もう1つの良い例は、iPhone Xでテーブルビューがどのように動作するかを示す連絡先アプリです。

00:01:47.000 --> 00:01:58.000
シミュレータを横向きに回転させると、セクションヘッダーなどの動作が端から端まで見られますが、テーブルの内容はセーフエリアに従ってインデントされたままです。

00:01:58.000 --> 00:02:01.000
テーブルビューについては、後で詳しく説明します。

00:02:01.000 --> 00:02:05.000
私が取り組んでいるアプリ、WWDCアプリに移りましょう。

00:02:05.000 --> 00:02:12.000
私はそれをiPhone Xに移すのに少し時間を費やしましたが、私が遭遇したいくつかのレイアウトの問題と、それらをどのように修正したかを共有したいと思います。

00:02:12.000 --> 00:02:16.000
WWDCアプリは、実際にはかなり典型的な現実世界のアプリです。

00:02:16.000 --> 00:02:22.000
それは何年も前から存在しており、毎年さまざまなエンジニアによって取り組んできました。

00:02:22.000 --> 00:02:30.000
多くの標準コントロールと自動レイアウトを使用していますが、カスタムビューもあり、アプリの古い部分は代わりに手動レイアウトを行います。

00:02:30.000 --> 00:02:36.000
iPhone X用にアップデートする必要がある3つの異なる領域を強調するために使用します。

00:02:36.000 --> 00:02:41.000
Xcode 9でプロジェクトを開き、Base SDKをiOS 11に設定することから始めました。

00:02:41.000 --> 00:02:44.000
だから、私たちは皆、ネイティブ解像度で実行する準備ができています。

00:02:44.000 --> 00:02:55.000
アプリでこれを行う場合、iPhone Xのフル解像度で実行されていない場合は、Launch Storyboardを設定していることを再確認してください。

00:02:55.000 --> 00:02:59.000
さて、私たちの最初のビューはビデオタブで、これはかなり良さそうです。

00:02:59.000 --> 00:03:07.000
これは、標準のナビゲーションバーとツールバーコントロールとともに、自動レイアウト付きのUICollectionViewを使用した今年のすべての新しいコードでした。

00:03:07.000 --> 00:03:14.000
だから、UIKitが私のためにほとんどの仕事をしているので、ほとんどのインターフェイスが正しくレイアウトされていることには本当に驚きません。

00:03:14.000 --> 00:03:17.000
自動レイアウトを使用しない場所の1つは、ニュースタブにあります。

00:03:17.000 --> 00:03:19.000
それを見てみましょう。それを見てみましょう。

00:03:19.000 --> 00:03:24.000
このビューは、UIの手動レイアウトを行っているにもかかわらず、実際にはかなり良く見えます。

00:03:24.000 --> 00:03:36.000
私たちは自動レイアウトを直接使用していませんが、レイアウトを行うコードはレイアウトマージンインセットに注意を払っており、UIKitはセーフエリアを尊重するようにそれらを自動的に調整しています。

00:03:36.000 --> 00:03:43.000
私が遭遇した最初の問題は、ニュースタブにあり、フルスクリーンの写真ビューアにあります。

00:03:43.000 --> 00:03:49.000
この特定のビューは自動レイアウトを使用していますが、ページコントロールは画面下部に遠すぎます。

00:03:49.000 --> 00:03:53.000
ホームインジケーターに走っています。

00:03:53.000 --> 00:04:03.000
ここでの問題は、ページコントロールの下部制約が、フルスクリーンでホームインジケーターの後ろにあるスーパービューに相対的であることです。

00:04:03.000 --> 00:04:10.000
スーパービューに制限するのではなく、ページコントロールを下部のセーフエリアレイアウトガイドに制限する必要があります。

00:04:10.000 --> 00:04:14.000
今、その変化をしましょう。

00:04:14.000 --> 00:04:22.000
Xcodeでこのインターフェイスを開きましたが、制約を調整する前に、このxibファイルでセーフエリアレイアウトガイドを有効にする必要があります。

00:04:22.000 --> 00:04:31.000
Xcode 9より前に作成されたストーリーボードとxibsでは、セーフエリアのレイアウトガイドが自動的にオンになることはありません。

00:04:31.000 --> 00:04:38.000
[ドキュメント] インスペクタに移動し、[セーフ エリア レイアウト ガイドを使用] チェックボックスを選択します。

00:04:38.000 --> 00:04:50.000
ここで注意すべきことの1つは、iOSのストーリーボードの場合、これをオンにすると、シーンの上部と下部のレイアウトガイド、および前縁と後縁に結びついた制約が自動的にアップグレードされるということです。

00:04:50.000 --> 00:04:56.000
したがって、これをオンにした後、必ず自動レイアウトの制約を確認してテストしてください。

00:04:56.000 --> 00:05:00.000
これで、ページコントロールの一番下の制約を選択できます。

00:05:00.000 --> 00:05:04.000
そして、この制約の属性インスペクタを見てください。

00:05:04.000 --> 00:05:11.000
ここでは、制約がスーパービューの下端に接続されており、それがコントロールをあまりにも下に保っていることがわかります。

00:05:11.000 --> 00:05:22.000
スーパービューの代わりに、これをセーフエリアに接続するように変更すると、iPhone Xではページインジケーターが自動的にホームインジケーターの上に移動します。

00:05:22.000 --> 00:05:30.000
今ビルドして実行すると、ページコントロールは適切な場所にあり、これはポートレートとランドスケープの両方で機能します。

00:05:30.000 --> 00:05:35.000
私が見つけた2番目の問題に移りましょう。これは「ビデオ」タブにあります。

00:05:35.000 --> 00:05:42.000
繰り返しになりますが、物事はかなり良さそうに見えますが、検索フィールドを持ち出すと、まあ、それはあまり正しく見えません。

00:05:42.000 --> 00:05:45.000
これを連絡先アプリのルックスと比較してみましょう。

00:05:45.000 --> 00:05:47.000
ここではいくつかのことが間違っているように見えます。

00:05:47.000 --> 00:05:52.000
検索バーの背景の色が正しくなく、サイズが少しずれています。

00:05:52.000 --> 00:05:56.000
そして、私が風景に回転すると、私は物事がここでも正しく見えないことがわかります。

00:05:56.000 --> 00:06:01.000
検索フィールドとキャンセルボタンは、どちらも画面の丸みを帯びた角によってクリップされています。

00:06:01.000 --> 00:06:07.000
これは、セーフエリアに注意を払うことが本当に重要な典型的な例です。

00:06:07.000 --> 00:06:14.000
この検索フィールドでは、WWDCアプリが行っていることは、UI検索コントローラーを明示的に提示することです。

00:06:14.000 --> 00:06:23.000
iOS 11では、検索バーをナビゲーションバーと統合することができ、連絡先で見たような適切なプレゼンテーションを提供します。

00:06:23.000 --> 00:06:26.000
コードを見て、その変更を加えましょう。

00:06:26.000 --> 00:06:29.000
これが私たちの検索コントローラーを提示するコードです。

00:06:29.000 --> 00:06:30.000
私は2つの変更を加えるつもりです。

00:06:30.000 --> 00:06:37.000
まず、検索コントローラーを提示する代わりに、このビューコントローラーのUINavigationItemに渡します。

00:06:37.000 --> 00:06:43.000
次に、検索コントローラーのisActiveプロパティをtrueに設定します。

00:06:43.000 --> 00:06:47.000
これにより、ナビゲーションバーがアクティブになり、編集が開始されます。

00:06:47.000 --> 00:06:56.000
可用性サポートを使用して、古いバージョンのiOSの既存の動作を維持しながら、iOS 11でのみこれを行うことができることに注意してください。

00:06:56.000 --> 00:06:58.000
それがどのように見えるかを見るために構築して実行しましょう。

00:06:58.000 --> 00:06:59.000
はるかに良いです。

00:06:59.000 --> 00:07:03.000
これは、iOS 11の検索フィールドの正しい表示のように見えます。

00:07:03.000 --> 00:07:06.000
そして、風景の中で?素晴らしい。そして

00:07:06.000 --> 00:07:14.000
今、検索バーはセーフエリアにうまく収まっており、これはすべてナビゲーションバーによって自動的に管理されています。

00:07:14.000 --> 00:07:22.000
ナビゲーションバー付きのUIに検索バーがある場合は、間違いなくiOS 11で同様の変更を加えたいです。

00:07:22.000 --> 00:07:26.000
それでは、私が取り組む必要があったアプリの3番目の部分を見てみましょう。

00:07:26.000 --> 00:07:30.000
スケジュールタブでは、UITableViewを使用しています。

00:07:30.000 --> 00:07:36.000
ポートレートのレイアウトはかなり良さそうですが、正しく見えない検索バーの別のケースがあります。

00:07:36.000 --> 00:07:45.000
これはたまたまヘッダービューとしてテーブルビューに挿入されますが、代わりに以前と同じ変更を適用してナビゲーションバーと統合することができます。

00:07:45.000 --> 00:07:52.000
ビューコントローラーのナビゲーション項目に検索コントローラーを設定し、アクティブ状態を適切に設定します。

00:07:52.000 --> 00:07:53.000
構築して実行しましょう。

00:07:53.000 --> 00:07:55.000
これは素晴らしく見えます。

00:07:55.000 --> 00:08:02.000
横向きに回転すると、検索フィールドは問題なく見え、ほとんどのUIは安全な領域を尊重しているように見えます。

00:08:02.000 --> 00:08:10.000
しかし、よく見ると、テーブルセクションのヘッダーにカスタム背景色を使用しますが、それは間違っているように見えます。

00:08:10.000 --> 00:08:15.000
色は、連絡先アプリのように、画面の端まで伸びている必要があります。

00:08:15.000 --> 00:08:23.000
コードを見ると、アプリがヘッダービューのcontentViewに背景色を設定していることがわかります。

00:08:23.000 --> 00:08:30.000
それは合理的なことのように思えますが、実際、iPhone X以外のiPhoneでは問題なく動作します。

00:08:30.000 --> 00:08:32.000
では、ここでの問題は何ですか?

00:08:32.000 --> 00:08:39.000
何が起こっているのかを理解するには、テーブルビューがiPhone Xで物事をどのようにレイアウトするかの詳細を見る必要があります。

00:08:39.000 --> 00:08:45.000
これを説明するために、Xcodeの本当に便利なView Hierarchyデバッガから始めましょう。

00:08:45.000 --> 00:08:48.000
これが私たちが見ていた景色です。

00:08:48.000 --> 00:08:56.000
右下では、表示ビュー範囲を調整して、テーブルビュー自体以外のすべてのビューを非表示にすることができます。

00:08:56.000 --> 00:08:59.000
テーブルビューは画面のフルサイズになります。

00:08:59.000 --> 00:09:04.000
次に、テーブルビューのセルを含むように可視範囲を調整します。

00:09:04.000 --> 00:09:07.000
細胞が端から端までどのように伸びているかに注目してください。

00:09:07.000 --> 00:09:16.000
私はそれを強調表示するために1つを選択し、それがどこにあるかを説明するために、このビューの上にセーフエリアをオーバーレイします。

00:09:16.000 --> 00:09:22.000
今、私はより多くのビューを画像に引き込むために可視範囲を拡張し続けます。

00:09:22.000 --> 00:09:28.000
私たちが今見ているのは、セルのコンテンツビューが自動的にセーフエリアに挿入されているということです。

00:09:28.000 --> 00:09:39.000
したがって、これはテーブルセルのサイズ、端から端まで続くセルのサイズと、挿入されたセルのコンテンツビューとの間に不一致を引き起こします。

00:09:39.000 --> 00:09:43.000
ここに関係している見解のいくつかを強調します。

00:09:43.000 --> 00:09:49.000
しかし、今、この写真は少し忙しくなっているので、これを単純化し、これらのビューにラベルを付けましょう。

00:09:49.000 --> 00:09:55.000
デフォルトでは、テーブルセルはコンテンツビューを挿入し、セーフエリア内にあります。

00:09:55.000 --> 00:09:59.000
そのsetting行動は、あなたがコントロールできるものです。

00:09:59.000 --> 00:10:05.000
Xcodeでは、コンテンツビューインセットをセーフエリアにチェックボックスを使用できます。

00:10:05.000 --> 00:10:09.000
コードで設定できる対応するプロパティもあります。

00:10:09.000 --> 00:10:19.000
チェックボックスをオフにすると、コンテンツビューは挿入されず、コンテンツビューは端から端へと移動します。

00:10:19.000 --> 00:10:30.000
ここでの最後のポイントは、コンテンツビューの設定に関係なく、コンテンツビューのレイアウトマージンはデフォルトでセーフエリアに対して引き続き相対的であるということです。

00:10:30.000 --> 00:10:38.000
コンテンツビューの設定と同様に、これらのレイアウトマージンの動作を制御できるプロパティがあります。

00:10:38.000 --> 00:10:47.000
これと他のマージン関連のオプションの詳細については、最後に言及するドキュメントとWWDCビデオで入手できます。

00:10:47.000 --> 00:10:57.000
さて、テーブルビューがセーフエリアに関してセルをどのように配置するかを見たので、ヘッダービューの背景色を設定していたコードに戻りましょう。

00:10:57.000 --> 00:11:04.000
セーフエリアに挿入されているコンテンツビューでのみ設定していることがわかります。

00:11:04.000 --> 00:11:08.000
この時点で、この問題を解決するにはいくつかの異なる方法があります。

00:11:08.000 --> 00:11:21.000
そのうちの1つは、コンテンツビューをセーフエリアに設定するというテーブルビューのデフォルトの動作を無効にすることですが、そうすると、コンテンツビューの他のすべてにも影響し、この有用なデフォルトの動作が失われます。

00:11:21.000 --> 00:11:36.000
代わりに、ここでの最善の解決策は、背景ビューの背景色を設定することです。これは、挿入コンテンツビューとは異なり、セーフエリアの挿入に関係なく、セルの全幅にまたがります。

00:11:36.000 --> 00:11:51.000
その変更により、ビルドして実行すると、ヘッダーの背景色が端から端まで行かないこの場所から、色がテーブル全体にまたがるが、コンテンツビューがまったく変更されないこのようになります。

00:11:51.000 --> 00:11:55.000
それはずっと良く見えます。

00:11:55.000 --> 00:12:01.000
これらは、iPhone X用のWWDCアプリをアップデートする際に遭遇した問題の3つの例です。

00:12:01.000 --> 00:12:06.000
それらは修正が難しくなく、ほとんどがランドスケープビューに関係していました。

00:12:06.000 --> 00:12:08.000
いくつかの簡単なリマインダー。

00:12:08.000 --> 00:12:16.000
iOS 11 SDKとリンクし、Launch Storyboardを含めると、アプリのフルスクリーンネイティブ解像度が可能になります。

00:12:16.000 --> 00:12:27.000
また、ポートレートでいくつかの問題が発生する可能性がありますが、大部分は横向きである可能性が高いので、インターフェイスを左と右の両方に回転させて、すべてのUIをテストしてください。

00:12:27.000 --> 00:12:30.000
セーフエリアを尊重することで、ほとんどの問題を回避できます。

00:12:30.000 --> 00:12:44.000
自動レイアウトとsafeAreaLayoutGuidesは、多くのレイアウトの課題を自動的に処理しますが、手動レイアウトを行っている場合は、セーフエリアインセットにアクセスでき、必要な計算を行うことができます。

00:12:44.000 --> 00:12:48.000
この情報は、UIViewクラスを介して入手できます。

00:12:48.000 --> 00:12:53.000
また、画面下部のホームインジケーターに干渉しないことも重要です。

00:12:53.000 --> 00:13:06.000
ホームインジケーターとiPhone X用のデザインの他の多くの側面の詳細については、アプリをこの新しい画面に持ち込むための重要な詳細がたくさんあるiPhone X用のデザインビデオを必ずご覧ください。

00:13:06.000 --> 00:13:24.000
また、WWDC 2017では、セーフエリアのレイアウトガイドを紹介し、重要なジェスチャー処理の変更、統合検索バーサポートなどの新しいiOS 11機能を活用する方法について話しました。

00:13:24.000 --> 00:13:31.000
もちろん、developer.apple.comまたは開発者フォーラムでより多くの情報をいつでも入手できます。

00:13:31.000 --> 23:59:59.000
ありがとう！

