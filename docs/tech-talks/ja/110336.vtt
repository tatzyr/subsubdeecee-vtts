WEBVTT

00:00:03.000 --> 00:00:08.000
こんにちは。私の名前はケイティです。Apple Payと注文追跡の実装に関するこのセッションへようこそ。

00:00:08.000 --> 00:00:10.000
今日の議題を見てみましょう。 では。

00:00:10.000 --> 00:00:14.000
まず、Apple Payを使い始めるために必要な基本を説明します。

00:00:14.000 --> 00:00:19.000
次に、支払いリクエストを作成し、支払いシートの変更に対応する方法を紹介します。

00:00:19.000 --> 00:00:23.000
ユーザーが注文を追跡できるように、支払いフローの最後に注文の詳細を追加することもできます。

00:00:23.000 --> 00:00:28.000
注文の詳細により、Walletは注文されたパッケージを取得でき、構築方法を紹介します。

00:00:28.000 --> 00:00:31.000
最後に、注文を更新する方法を紹介します。

00:00:31.000 --> 00:00:33.000
では、始めましょう。

00:00:33.000 --> 00:00:36.000
Apple Payは、簡単で安全でプライベートな支払い方法です。

00:00:36.000 --> 00:00:42.000
ウェブサイトやアプリの開発者であれば、Apple Payを使ってコンバージョンとユーザーエクスペリエンスを向上させることができます。

00:00:42.000 --> 00:00:44.000
始めるために作成する2つの必須項目があります。

00:00:44.000 --> 00:00:50.000
1つ目は、支払いを受け入れることができるマーチャントとしてあなたを一意に識別する識別子です。

00:00:50.000 --> 00:00:54.000
1つを作成するには、Apple Developerポータルの識別子セクションに進んでください。

00:00:54.000 --> 00:00:58.000
従来のフォーマットは、「マーチャント」という単語で始まる逆DNSです。

00:00:58.000 --> 00:01:02.000
スパイシーな新しいマーチャント識別子を使用して、支払い処理証明書を作成します。

00:01:02.000 --> 00:01:09.000
非常に簡潔に言えば、Apple Payは登録されたマーチャント識別子と公開証明書で各ペイロードを暗号化します。

00:01:09.000 --> 00:01:13.000
このペイロードは、あなたの側で復号化して処理することができます。

00:01:13.000 --> 00:01:16.000
その後、支払いが成功したか失敗したかを返すことができます。

00:01:16.000 --> 00:01:19.000
支払いの処理の詳細については、支払いサービスプロバイダーに相談してください。

00:01:19.000 --> 00:01:24.000
アプリとウェブサイト間でApple Payを設定するには、さまざまな手順があります。

00:01:24.000 --> 00:01:32.000
アプリで使用するためにApple Payを設定するには、Xcodeの[署名と機能]タブに移動し、Apple Pay機能の下にマーチャント識別子を追加するだけです。

00:01:32.000 --> 00:01:37.000
ウェブサイトを構築していて、そこでApple Payを設定したい場合は、いくつかの追加の手順が必要です。

00:01:37.000 --> 00:01:44.000
Apple Payトランザクションを処理するドメインを登録する必要があります。これは、Apple Developerポータルの識別子セクションで行うことができます。

00:01:44.000 --> 00:01:51.000
そこにいる間に、以前に作成したマーチャント識別子にリンクされたApple PayマーチャントID証明書を作成できます。

00:01:51.000 --> 00:01:55.000
この証明書は、Apple Payサーバーにセッションを認証するために使用されます。

00:01:55.000 --> 00:02:04.000
アプリやウェブを統合する場合でも、eコマースプラットフォームや決済サービスプロバイダーで作業している場合は、これらの手順の一部を簡素化する可能性があるため、特定の指示を確認してください。

00:02:04.000 --> 00:02:07.000
では、Apple Payを実際に実装する方法を見てみましょう。

00:02:07.000 --> 00:02:14.000
Apple Pay関連のコンテンツを表示する前に、ユーザーが現在の設定で支払いを行うことができるかどうかを確認する必要があります。

00:02:14.000 --> 00:02:21.000
機能は、3Dセキュアカードやクレジットカードやデビットカードなど、シートが現在受け入れることができる支払いの種類を示します。

00:02:21.000 --> 00:02:26.000
後で、支払い要求を設定するときに受け入れる機能を指定します。

00:02:26.000 --> 00:02:33.000
現在利用可能なカードがない場合は、ユーザーがさらにカードを追加できることを念頭に置いて、ユーザーがすでに利用可能なネットワークを確認できます。

00:02:33.000 --> 00:02:38.000
ユーザーが支払いができることがわかったので、Apple Payボタンを表示する時が来ました。

00:02:38.000 --> 00:02:43.000
ユーザーが実行する必要があるアクションに合わせて、最適なアクション呼び出しとボタンタイプを選択してください。

00:02:43.000 --> 00:02:49.000
Apple Payボタンを目立つように、折り目の上、そして最初の支払いオプションとして表示します。

00:02:49.000 --> 00:02:53.000
Apple Payボタンは完全にローカライズされており、ユーザーの設定にも適応できます。

00:02:53.000 --> 00:03:02.000
UIKitを使用してアプリにApple Payボタンを表示するには、まず、ボタンの種類とスタイルを指定してPKPaymentButtonを作成します。

00:03:02.000 --> 00:03:08.000
タイプは、支払いの種類を説明しています。例えば、Apple Payで寄付するか、Apple Payで続行します。

00:03:08.000 --> 00:03:12.000
このスタイルは、明るいか暗いかなど、ボタンの外観を制御します。

00:03:12.000 --> 00:03:16.000
ボタンの自動スタイルを使用して、ユーザーの設定に基づいて動的に変更します。

00:03:16.000 --> 00:03:20.000
ウェブでは、JavaScriptのApple Payボタンを使用してください。

00:03:20.000 --> 00:03:25.000
1つを追加するには、まず、コンテンツ配信ネットワークのWebページにボタンスクリプトをロードします。

00:03:25.000 --> 00:03:31.000
JavaScript Apple Payボタンでは、タイプ、スタイル、ローカリゼーションを指定することもできます。

00:03:31.000 --> 00:03:35.000
CSSを使用して、ボタンの寸法をさらにカスタマイズすることもできます。

00:03:35.000 --> 00:03:39.000
支払いシートが何を期待するかを知るために、支払い要求を作成する必要があります。

00:03:39.000 --> 00:03:43.000
アプリでは、PKPaymentRequestを作成することでそれを行うことができます。

00:03:43.000 --> 00:03:55.000
ニーズに応じてリクエストで設定できるフィールドはたくさんありますが、必須項目には、以前に作成したマーチャント識別子、受け入れることができる支払いの種類、支払いの国と通貨コードが含まれます。

00:03:55.000 --> 00:03:58.000
支払いを受け入れるネットワークを指定します。

00:03:58.000 --> 00:04:03.000
これは、Apple Payとコバッチカードの優先ネットワークを選択するように、優先順に行う必要があります。

00:04:03.000 --> 00:04:07.000
最後に、要約項目はこの取引の一部として含まれています。

00:04:07.000 --> 00:04:10.000
要約項目を詳しく見てみましょう。

00:04:10.000 --> 00:04:17.000
これを行うには、あなたがオンラインペット用品ショップを運営し、顧客にApple Payで注文をチェックアウトする機能を提供したいと想像できます。

00:04:17.000 --> 00:04:23.000
これらの要約項目は、顧客が選択した項目の総費用から割引を差し引いたもので構成されています。

00:04:23.000 --> 00:04:26.000
彼らは顧客にコストを分解するのに役立つはずです。

00:04:26.000 --> 00:04:32.000
最後の要約項目は常に合計であり、この合計のラベルは支払いを受け取る会社でなければなりません。

00:04:32.000 --> 00:04:36.000
ここの配列には少なくとも1つの項目が設定されている必要があります。

00:04:36.000 --> 00:04:39.000
これで、支払いシートを表示する準備が整いました。

00:04:39.000 --> 00:04:46.000
まず、PKPayment AuthorizationViewControllerを作成し、先ほど設定したリクエストを送信します。

00:04:46.000 --> 00:04:50.000
あなたは、返されたviewControllerの提示を担当しています。

00:04:50.000 --> 00:04:53.000
さて、私たちが設定しているこのデリゲートを見てみましょう。

00:04:53.000 --> 00:05:03.000
PKPaymentAuthorization ViewControllerDelegateは、ユーザーが新しい電子メールアドレスを選択したときやトランザクションを承認するときなど、シートが変更を伝える方法です。

00:05:03.000 --> 00:05:14.000
適切な変更に対応する必要があります。ただし、常に支払いシートを却下する責任があり、これを処理するためにpaymentAuthorizationViewControll erDidFinishを実装する必要があります。

00:05:14.000 --> 00:05:21.000
問題を解決するのに役立つ有用な説明を添えて、常にできるだけ早くユーザーにエラーを返すようにしてください。

00:05:21.000 --> 00:05:29.000
たとえば、ユーザーの新しい配送先住所に問題がある場合は、PKPaymentRequest ShippingContactUpdateの一部としてエラーを返す必要があります。

00:05:29.000 --> 00:05:37.000
didAuthorizePaymentは、ユーザーが詳細に満足し、Face ID、Touch ID、またはパスコードを使用して取引を進めるときに呼び出されます。

00:05:37.000 --> 00:05:43.000
自分で送信されたPKPaymentを処理するか、支払い処理業者に渡す必要があります。

00:05:43.000 --> 00:05:47.000
適切な結果でハンドラーを呼び出す必要があります。

00:05:47.000 --> 00:05:52.000
iOS 16では、SwiftUIでApple Payボタンを簡単に作成する機能を導入しました。

00:05:52.000 --> 00:06:01.000
Apple Payで支払うボタンを作成するときに支払い要求を渡すだけで、ユーザーがボタンを操作すると支払いシートが自動的に表示されます。

00:06:01.000 --> 00:06:05.000
ボタンのタイプ、およびオプションでスタイルも設定できます。

00:06:05.000 --> 00:06:10.000
支払い承認の変更は、前のスライドで見た代理人に似ています。

00:06:10.000 --> 00:06:13.000
ユーザーの更新に対応する方法を見てみましょう。

00:06:13.000 --> 00:06:25.000
ユーザーが支払いを承認したばかりで、支払い承認フェーズの変更により、アプリにこのアプリが通知され、支払い情報をサーバーに送信し、支払いの処理を依頼します。

00:06:25.000 --> 00:06:33.000
サーバーの結果が成功を示しているかどうかを確認し、サーバーから返されたエラーを処理し、適切なエラーで結果ハンドラを呼び出すことを確認します。

00:06:33.000 --> 00:06:39.000
サーバーの結果が成功を示している場合は、適切な承認結果で支払いを完了します。

00:06:39.000 --> 00:06:46.000
返送する結果には、支払いを処理しようとしたときに起こったことが含まれている必要があります。たとえば、住所が無効な場合などです。

00:06:46.000 --> 00:06:50.000
ほとんどの場合、支払いは成功または失敗します。

00:06:50.000 --> 00:06:55.000
支払いが失敗した場合は、重要度順に1つ以上のエラーを返すこともできます。

00:06:55.000 --> 00:06:58.000
それはユーザーに表示され、再度取引を試みることができます。

00:06:58.000 --> 00:07:03.000
この承認結果には、オプションで注文の詳細を含めることができ、まもなく検討します。

00:07:03.000 --> 00:07:06.000
それでは、ウェブ上でこれを行う方法を見てみましょう。

00:07:06.000 --> 00:07:11.000
W3C支払いリクエストAPIは、ウェブ上で支払いを処理できるオープンスタンダードです。

00:07:11.000 --> 00:07:29.000
PaymentRequestオブジェクトを作成し、Apple Payが利用可能であることを指定できる方法、合計や配送方法などのトランザクションに関する情報を含む詳細、およびユーザーに提供したい情報を指定するオプションを入力できます。

00:07:29.000 --> 00:07:35.000
サーバーでマーチャント検証を完了する必要があるため、新しいマーチャントセッションを作成し、完全な機能に渡します。

00:07:35.000 --> 00:07:43.000
ネイティブと同様に、ユーザーが支払いシートで行うインタラクションに応答することができ、ユーザーが認証したときに支払い応答を処理する必要があります。

00:07:43.000 --> 00:07:47.000
皆さんがApple Payと統合したので、私たちは実際に注文を作り始めることができます。

00:07:47.000 --> 00:07:50.000
iOS 16では、注文追跡を導入しました。

00:07:50.000 --> 00:07:55.000
顧客は、ウォレットアプリ内から注文の詳細と追跡情報を確認できるようになりました。

00:07:55.000 --> 00:08:04.000
彼らは、いつ注文を受け取ることができるか、注文が配達されたかどうか、問題があったかどうか、または通知を受け取ったかどうかを即座に知ることができます。

00:08:04.000 --> 00:08:10.000
ペットショップのビジネスをApple Payとうまく統合したので、注文の追跡を追加することもできます。

00:08:10.000 --> 00:08:12.000
やり方を見てみましょう。

00:08:12.000 --> 00:08:16.000
注文を始めるのは、Apple Payの設定に似ていることに気付くでしょう。

00:08:16.000 --> 00:08:23.000
開発者ポータルの識別子セクションに戻り、注文タイプ識別子を作成します。

00:08:23.000 --> 00:08:28.000
これにより、組織は注文情報を提供するエンティティとして識別されます。

00:08:28.000 --> 00:08:36.000
マーチャント識別子と同様に、今回は「順序」という単語の前に、同様の逆DNSスタイルの命名スキームを使用することをお勧めします。

00:08:36.000 --> 00:08:42.000
次に、開発者ポータルの証明書セクションから注文タイプID証明書を作成します。

00:08:42.000 --> 00:08:48.000
証明書を使用して、注文パッケージを作成し、注文を更新し、通知を送信します。

00:08:48.000 --> 00:08:54.000
それを設定したので、Apple Payの購入フロー内からWalletに注文を追加できます。

00:08:54.000 --> 00:09:00.000
これを行うには、以前から認識すべき簡単な支払い処理フローを振り返ってみましょう。

00:09:00.000 --> 00:09:03.000
私たちはあなたのサーバーが処理のために支払い情報を送信していることをすでに知っています。

00:09:03.000 --> 00:09:08.000
支払いが正常に処理された場合、サーバーは注文を作成する必要があります。

00:09:08.000 --> 00:09:14.000
返送した結果の注文追跡をサポートするには、作成した注文に関する詳細も含める必要があります。

00:09:14.000 --> 00:09:19.000
これらの注文の詳細により、デバイスはサーバーから注文を非同期に要求できます。

00:09:19.000 --> 00:09:23.000
その後、サーバーは注文パッケージをデバイスに回し、ウォレットに表示されます。

00:09:23.000 --> 00:09:30.000
とりあえず、PKPaymentの承認結果の一部として返品する必要がある注文の詳細を詳しく見てみましょう。

00:09:30.000 --> 00:09:33.000
注文の詳細は4つのフィールドで構成されています。

00:09:33.000 --> 00:09:37.000
注文タイプ識別子は、単に以前に作成したものです。

00:09:37.000 --> 00:09:43.000
注文を識別する方法を生成する必要がありますが、注文タイプ識別子の範囲内で一意である必要があります。

00:09:43.000 --> 00:09:47.000
ウェブサービスのURLを含めてください。

00:09:47.000 --> 00:09:51.000
最後に、サーバーは安全な認証トークンを生成する必要があります。

00:09:51.000 --> 00:09:54.000
これは、ユーザーのデバイスとサーバーの間で共有された秘密です。

00:09:54.000 --> 00:10:00.000
デバイスは、注文パッケージをリクエストするときに、このトークンを使用して自分自身を認証します。

00:10:00.000 --> 00:10:05.000
この例は当初、先ほど見た通常の支払い承認フローと非常によく似ています。

00:10:05.000 --> 00:10:07.000
注文の詳細を追加しましょう。

00:10:07.000 --> 00:10:19.000
まず、serverResultからそれらを取得し、PKPaymentOrderDetailsオブジェクトを作成し、注文タイプID、注文ID、WebサービスURL、および認証トークンを設定します。

00:10:19.000 --> 00:10:23.000
これをPKPaymentの承認結果に割り当てます。

00:10:23.000 --> 00:10:29.000
ウェブ上では、W3C支払いリクエストAPIを使用して注文の詳細を追加するのも簡単です。

00:10:29.000 --> 00:10:33.000
以前と同様に、サーバーの結果から注文の詳細を抽出します。

00:10:33.000 --> 00:10:38.000
これらの注文の詳細と、支払いを完了したデータを返します。

00:10:38.000 --> 00:10:44.000
注文の詳細がデバイスに返送された後、それらの詳細はユーザーの各デバイス間で同期されます。

00:10:44.000 --> 00:10:49.000
各デバイスは、サーバーから注文パッケージを要求し、注文の詳細を提供します。

00:10:49.000 --> 00:10:54.000
注文の詳細と一緒に送信したトークンと照合して、認証トークンを確認します。

00:10:54.000 --> 00:10:59.000
認証トークンが一致すれば、注文パッケージをデバイスに返送します。

00:10:59.000 --> 00:11:03.000
これで、注文はそのデバイスのウォレットに表示する準備が整いました。

00:11:03.000 --> 00:11:09.000
デバイスが要求するとすぐに利用可能になるように、できるだけ早く注文を修理する必要があります。

00:11:09.000 --> 00:11:16.000
サーバーが注文を返さなかった場合、デバイスは指数関数的なバックオフで複数の再試行を試みます。

00:11:16.000 --> 00:11:22.000
私たちは今、この注文パッケージが何度も参照されているのを見てきましたが、それは正確に何で構成されていますか?

00:11:22.000 --> 00:11:25.000
注文は注文パッケージとして配布されます。

00:11:25.000 --> 00:11:29.000
彼らには、あなたの注文をユーザーに表示し、それがあなたからであることを証明するために必要なすべてが含まれています。

00:11:29.000 --> 00:11:38.000
注文パッケージには、注文、ロゴなどの画像、注文の各アイテムのインライン画像を説明するJSON辞書が含まれています。

00:11:38.000 --> 00:11:43.000
画像の作成に関するガイダンスについては、ヒューマンインターフェースガイドラインと紹介ソースを参照してください。

00:11:43.000 --> 00:11:47.000
また、文字列ファイルなどのローカライズされたリソースも含めます。

00:11:47.000 --> 00:11:51.000
合計注文サイズに目を光らせ、関連するもののみを含めてください。

00:11:51.000 --> 00:11:56.000
このコンテンツはすべて、「マニフェスト」と呼ばれる別のJSON辞書に記載されています。

00:11:56.000 --> 00:11:58.000
あなたはそれを目次のように考えることができます。

00:11:58.000 --> 00:12:02.000
注文パッケージ内のすべてのファイルへの参照が含まれています。

00:12:02.000 --> 00:12:11.000
エントリのキーは相対ファイルパスであり、値は解析で使用されるものとは異なるチェックサムであるファイルのSHA256チェックサムです。

00:12:11.000 --> 00:12:15.000
今、私たちがする必要があるのは、その真正性を証明するためにパッケージに署名することです。

00:12:15.000 --> 00:12:20.000
署名は、注文パッケージが信頼できるソースであるあなたから発信されたことを確認します。

00:12:20.000 --> 00:12:26.000
これは、パースと同じ、マニフェストの切り離された暗号メッセージ署名です。

00:12:26.000 --> 00:12:36.000
注文タイプID証明書とApple Worldwide Developer Relations Intermediate証明書に関連付けられた秘密鍵でマニフェストに署名し、証明書の更新されたバージョンを使用することを確認してください。

00:12:36.000 --> 00:12:42.000
注文の作成を完了するには、パッケージを圧縮し、ファイル拡張子を注文に変更するだけです。

00:12:42.000 --> 00:12:45.000
さあ、注文を更新する時が来ました。

00:12:45.000 --> 00:12:53.000
注文情報は時間の経過とともに変化することがよくあります。たとえば、顧客が以前に作成したペットグッズの注文が進行中です。

00:12:53.000 --> 00:12:59.000
自動更新をサポートすることで、この更新を迅速かつ安全に顧客に配信できます。

00:12:59.000 --> 00:13:07.000
あなたの顧客は今、ウォレットにペット用品の注文を持っており、注文は更新のサポートを示しているので、デバイスはあなたのウェブサービスに登録されます。

00:13:07.000 --> 00:13:15.000
後で、顧客の注文が配達されるようになったので、サーバーは登録情報を使用して登録されたすべてのデバイスに通知します。

00:13:15.000 --> 00:13:21.000
お客様のデバイスがプッシュ通知を受信すると、サーバーから注文を求められます。

00:13:21.000 --> 00:13:25.000
その後、サーバーは更新された注文パッケージをデバイスに返します。

00:13:25.000 --> 00:13:32.000
基本的な注文フローの仕組みがわかったので、注文の更新をサポートするために必要な正確な手順を分解しましょう。

00:13:32.000 --> 00:13:36.000
まず、注文の更新をサポートしていることを示します。

00:13:36.000 --> 00:13:43.000
注文が更新をサポートしていることをWalletに伝えるのはとても簡単です。注文パッケージに2つの情報を含めるだけです。

00:13:43.000 --> 00:13:47.000
order.jsonに、ご希望のwebServiceURLを追加します。

00:13:47.000 --> 00:13:51.000
これは、注文の詳細で提供したものと同じです。

00:13:51.000 --> 00:13:57.000
また、注文の更新を要求するときに、ウォレットがその真正性を証明するために使用するauthenticationTokenフィールドを追加します。

00:13:57.000 --> 00:14:02.000
デバイスが登録から自分自身を追加または削除するように要求するときは、管理する必要があります。

00:14:02.000 --> 00:14:07.000
サーバーは、登録情報の追加または削除を処理できる必要があります。

00:14:07.000 --> 00:14:11.000
注文の更新に登録したデバイスを見つけることができる必要があります。

00:14:11.000 --> 00:14:15.000
これにより、注文を更新するときにサーバーがこれらのデバイスに通知できるようになります。

00:14:15.000 --> 00:14:23.000
また、サーバーは、どの更新された注文がそのデバイスに関連するかをサーバーが把握できるように、デバイスが登録した注文を見つけることができる必要があります。

00:14:23.000 --> 00:14:26.000
この情報を構造化するにはさまざまな方法があります。

00:14:26.000 --> 00:14:35.000
1つの方法は、デバイス用と注文用の2つのエンティティと、登録用の多対多の関係を持つリレーショナルデータベースを使用することです。

00:14:35.000 --> 00:14:40.000
注文が更新されると、サーバーは登録されたデバイスに通知する必要があります。

00:14:40.000 --> 00:14:50.000
したがって、サーバーは、保存された登録情報に基づいて関連するデバイスを入手し、プッシュトークンを使用して各デバイスにプッシュ通知を送信する必要があります。

00:14:50.000 --> 00:14:54.000
注文タイプIDはプッシュトピックとして倍増し、ペイロードは空である必要があります。

00:14:54.000 --> 00:14:59.000
注文タイプID証明書を使用して、APNsと通信できます。

00:14:59.000 --> 00:15:08.000
通知についてもう1つ注意すべきことは、注文パッケージに列挙型プロパティの変更通知を設定して、注文通知の配信方法をカスタマイズできることです。

00:15:08.000 --> 00:15:16.000
利用可能なオプションは有効になっており、常に注文更新通知を送信し、デフォルト値です。

00:15:16.000 --> 00:15:26.000
ウォレットが通知を複製したくない場合は、ユーザーが注文パッケージにリストしたアプリをインストールしている場合、通知を送信しないdisableIfAppInstalledを設定します。

00:15:26.000 --> 00:15:32.000
登録されたデバイスはそれぞれ、サーバーが提供する新しい注文パッケージを要求します。

00:15:32.000 --> 00:15:38.000
デバイスがプッシュ通知を受信すると、プッシュ通知が空であるため、どの注文が変更されたかはまだわかりません。

00:15:38.000 --> 00:15:44.000
サーバーと一緒に、デバイスは最後にリクエストしてからどの注文が変更されたかを把握します。

00:15:44.000 --> 00:15:50.000
サーバーが保存した登録情報を使用して、関連する注文を検索し、IDを返します。

00:15:50.000 --> 00:15:58.000
更新時間を追跡し、応答に変更タグを含めて、将来のリクエストによって返される注文IDの数を制限します。

00:15:58.000 --> 00:16:01.000
たとえば、タイムスタンプを使用できます。

00:16:01.000 --> 00:16:03.000
値はデバイスに対して不透明です。

00:16:03.000 --> 00:16:08.000
デバイスは、次回変更を要求するときに変更タグを提供します。

00:16:08.000 --> 00:16:13.000
最後に、デバイスは、サーバーが示した注文ごとに最新のパッケージを要求します。

00:16:13.000 --> 00:16:16.000
今日は多くのことを取り上げました。

00:16:16.000 --> 00:16:19.000
可能な限り最高の顧客体験を提供するために、これらの慣行に従ってください。

00:16:19.000 --> 00:16:26.000
Apple Payを実装するときは、製品またはカートのページにApple Payボタンを表示して、エクスプレスチェックアウトを提供します。

00:16:26.000 --> 00:16:31.000
ユーザーは、支払いシートで配送オプションと住所を直接選択し、何も入力せずにチェックアウトできます。

00:16:31.000 --> 00:16:38.000
注文追跡を実装するときは、顧客の好みに関する知識を使用して、関連するローカリゼーションのみを提供します。

00:16:38.000 --> 00:16:43.000
さらに、注文パッケージのサイズを小さく保つために、含める資産の数に注意してください。

00:16:43.000 --> 00:16:48.000
注文を更新するときは、更新を登録したデバイスに速やかに通知してください。

00:16:48.000 --> 00:16:51.000
ウォレット内の注文は、注文の実際の状態と一致する必要があります。

00:16:51.000 --> 00:16:58.000
注文追跡とApple Payボタンの表示については、ヒューマンインターフェースガイドラインも必ず確認してください。

00:16:58.000 --> 00:17:02.000
今日は、建物を通じてApple Payの実装を開始し、注文を更新することを取り上げました。

00:17:02.000 --> 00:17:12.000
この講演は、Apple Payと注文追跡の実装を紹介することを目的としていますが、セッションノートにリンクされているドキュメントをチェックして詳細を掘り下げる必要があります。

00:17:12.000 --> 00:17:16.000
さらに、最新のWWDCビデオもチェックできます。

00:17:16.000 --> 00:17:19.000
今日はお時間をいただきありがとうございました。

00:17:19.000 --> 23:59:59.000
そして、残りの一日を楽しんでください。

