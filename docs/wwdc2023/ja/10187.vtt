WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
ベン：こんにちは、私はベン・トランブルです。SwiftDataを紹介することに興奮しています。

00:00:15.000 --> 00:00:21.000
SwiftDataは、データモデリングと管理のための強力なフレームワークであり、最新のSwiftアプリを強化します。

00:00:21.000 --> 00:00:31.000
SwiftUIと同様に、外部ファイル形式のないコードに完全に焦点を当て、Swiftの新しいマクロシステムを使用してシームレスなAPIエクスペリエンスを作成します。

00:00:31.000 --> 00:00:38.000
SwiftDataは、シームレスなAPIエクスペリエンスを作成するために、新しいSwift言語マクロによって提供される表現力に依存しています。

00:00:38.000 --> 00:00:45.000
また、SwiftUIと自然に統合され、CloudKitやウィジェットなどの他のプラットフォーム機能と連携します。

00:00:45.000 --> 00:01:05.000
このセッションでは、新しい@Modelマクロと、Swiftコードから直接データをモデル化するその機能を見て、SwiftDataでデータを取得および変更することを紹介し、最後にSwiftDataとシームレスに連携する他のプラットフォームフレームワークの概要を説明します。

00:01:05.000 --> 00:01:09.000
では、@Modelについて詳しく見ていきます。

00:01:09.000 --> 00:01:15.000
@Modelは、Swiftコードからモデルのスキーマを定義するのに役立つ新しいSwiftマクロです。

00:01:15.000 --> 00:01:21.000
SwiftDataスキーマは通常のSwiftコードですが、必要に応じて、追加のメタデータでプロパティに注釈を付けることができます。

00:01:21.000 --> 00:01:27.000
このスキーマを使用して、SwiftDataはモデルオブジェクトに強力な機能を追加します。

00:01:27.000 --> 00:01:32.000
@Modelでクラスを飾るのと同じくらい簡単で、スキーマが生成されます。

00:01:32.000 --> 00:01:39.000
SwiftDataのモデルは、アプリケーションのスキーマの真実の源であり、永続性の経験を促進します。

00:01:39.000 --> 00:01:45.000
この経験の一部は、クラスの保存されたプロパティを変換し、それらを永続的なプロパティに変換します。

00:01:45.000 --> 00:01:49.000
モデルに@Modelを追加すると、可能性の世界が開かれます。

00:01:49.000 --> 00:01:55.000
SwiftDataは、値タイプのプロパティをネイティブに適応させ、すぐに属性として使用します。

00:01:55.000 --> 00:02:00.000
これらのプロパティには、string、int、floatなどの基本的な値タイプが含まれます。

00:02:00.000 --> 00:02:08.000
また、コレクションを含む、構造体、列挙型、コーダブル型など、より複雑な値型も含めることができます。

00:02:08.000 --> 00:02:11.000
SwiftDataは、参照型を関係としてモデル化します。

00:02:11.000 --> 00:02:17.000
モデルタイプとモデルタイプの関係とコレクションの間にリンクを作成できます。

00:02:17.000 --> 00:02:22.000
@Modelは、タイプに保存されているすべてのプロパティを変更します。

00:02:22.000 --> 00:02:27.000
プロパティのメタデータを使用して、SwiftDataがスキーマを構築する方法に影響を与えることができます。

00:02:27.000 --> 00:02:31.000
@Attributeを使用すると、一意性の制約を追加できます。

00:02:31.000 --> 00:02:36.000
@Relationshipを使用して、逆の選択を制御し、削除伝播ルールを指定できます。

00:02:36.000 --> 00:02:40.000
これらは、モデル間のリンクの動作を変更します。

00:02:40.000 --> 00:02:46.000
トランジェントマクロに特定のプロパティを含めないようにSwiftDataに指示できます。

00:02:46.000 --> 00:02:48.000
これは前回の旅行の例です。

00:02:48.000 --> 00:02:54.000
保存されたプロパティにメタデータを追加して、SwiftDataのスキーマ生成を調整します。

00:02:54.000 --> 00:02:59.000
名前に@Attributeを追加し、一意であることを指定できます。

00:02:59.000 --> 00:03:10.000
また、@Relationshipとのバケットリスト関係を飾り、この旅行が削除されるたびに関連するバケットリストアイテムをすべて削除するようにSwift Dataに指示することもできます。

00:03:10.000 --> 00:03:16.000
SwiftDataモデリングの詳細については、「SwiftDataでスキーマをモデル化する」セッションをチェックしてください。

00:03:16.000 --> 00:03:27.000
次に、モデルタイプと、操作の駆動に使用する2つの重要なオブジェクト、SwiftDataのModelContainerとModelContextで作業する方法について説明します。

00:03:27.000 --> 00:03:31.000
モデルコンテナは、モデルタイプの永続的なバックエンドを提供します。

00:03:31.000 --> 00:03:38.000
スキーマを指定するだけでデフォルト設定を使用するか、設定と移行オプションでカスタマイズできます。

00:03:38.000 --> 00:03:44.000
保存するモデルタイプのリストを指定するだけで、モデルコンテナを作成できます。

00:03:44.000 --> 00:03:58.000
コンテナをさらにカスタマイズしたい場合は、設定を使用してURL、CloudKit、グループコンテナ識別子、および移行オプションを変更できます。コンテナを設定すると、モデルコンテキストでデータを取得して保存する準備が整います。

00:03:58.000 --> 00:04:07.000
また、SwiftUIのビューとシーン修飾子を使用してコンテナを設定し、ビューの環境で自動的に確立することもできます。

00:04:07.000 --> 00:04:13.000
モデルコンテキストは、モデルへのすべての変更を観察し、それらを操作するための多くのアクションを提供します。

00:04:13.000 --> 00:04:20.000
これらは、更新の追跡、データの取得、変更の保存、さらにはそれらの変更の取り消しのためのインターフェースです。

00:04:20.000 --> 00:04:27.000
SwiftUIでは、通常、モデルコンテナを作成した後、ビューの環境からmodelContextを取得します。

00:04:27.000 --> 00:04:38.000
ビュー階層の外では、モデルコンテナに共有メインアクターバインドコンテキストの提供を依頼することも、特定のモデルコンテナの新しいコンテキストをインスタンス化することもできます。

00:04:38.000 --> 00:04:43.000
コンテキストができたら、データを取得する準備が整いました。

00:04:43.000 --> 00:04:53.000
SwiftDataは、述語やフェッチ記述子などの新しいSwiftネイティブ型と、Swiftのネイティブソート記述子の大幅な改善の恩恵を受けています。

00:04:53.000 --> 00:05:00.000
iOS 17の新機能で、述語はネイティブのSwiftタイプで動作し、強く型付けされた構築にSwiftマクロを使用します。

00:05:00.000 --> 00:05:03.000
これは、NSPredicateの完全にタイプチェックされた最新の代替品です。

00:05:03.000 --> 00:05:08.000
オートコンプリートのようなXcodeのサポートにより、述語の実装も簡単です。

00:05:08.000 --> 00:05:12.000
サンプルトリップアプリの述語を構築する例をいくつか紹介します。

00:05:12.000 --> 00:05:17.000
まず、目的地がニューヨークであるすべての旅行を指定できます。

00:05:17.000 --> 00:05:29.000
誕生日に関する旅行だけに絞り込むことができ、過去の冒険とは対照的に、将来計画された旅行にのみ興味を持っていることを指定できます。

00:05:29.000 --> 00:05:38.000
フェッチに興味のある旅行を決定したら、新しいFetchDescriptorタイプを使用して、それらの旅行を取得するようにModelContextに指示できます。

00:05:38.000 --> 00:05:52.000
FetchDescriptorと協力して、Swift SortDescriptorはネイティブのSwiftタイプとキーパスをサポートするためのいくつかのアップデートを取得しており、SortDescriptorを使用して、フェッチされたトリップを整理する順序を指定できます。

00:05:52.000 --> 00:05:56.000
FetchDescriptorは、SwiftDataクエリを調整する他の多くの方法を提供します。

00:05:56.000 --> 00:06:07.000
述語とソートに加えて、関連するオブジェクトをプリフェッチに指定したり、結果数を制限したり、結果から未保存の変更を除外したりできます。

00:06:07.000 --> 00:06:15.000
SwiftDataはまた、ModelContextを使用してこれらの操作を推進することで、データの作成、削除、変更を容易にします。

00:06:15.000 --> 00:06:25.000
他のSwiftクラスと同様にモデルオブジェクトを作成した後、それらをコンテキストに挿入し、変更の追跡や永続性などのSwiftData機能の使用を開始できます。

00:06:25.000 --> 00:06:37.000
永続的なオブジェクトを削除することは、ModelContextに削除をマークするように指示するのと同じくらい簡単で、ModelContextに保存して永続的なコンテナにコミットするように依頼することで、これらの変更やその他の保留中の変更を保存できます。

00:06:37.000 --> 00:06:43.000
モデルオブジェクトのプロパティ値を変更するのは、通常と同じようにプロパティセッターを使用するのと同じくらい簡単です。

00:06:43.000 --> 00:06:52.000
モデルマクロは、保存されたプロパティを変更して、ModelContextが変更を自動的に追跡し、次の保存操作に含めるのに役立ちます。

00:06:52.000 --> 00:07:01.000
SwiftDataコンテナとコンテキストとその操作の推進の詳細については、「Dive Deeper into SwiftData」セッションをチェックしてください。

00:07:01.000 --> 00:07:07.000
SwiftDataはSwiftUIを念頭に置いて構築されており、それらを一緒に使用するのは簡単ではありません。

00:07:07.000 --> 00:07:11.000
SwiftUIは、SwiftDataを使い始める最も簡単な方法です。

00:07:11.000 --> 00:07:21.000
SwiftDataコンテナの設定、データの取得、ビューの更新の推進など、これらのフレームワークを直接統合するAPIを構築しました。

00:07:21.000 --> 00:07:27.000
新しいSwiftUIシーンとビュー修飾子は、SwiftDataアプリケーションの構築を開始する最も簡単な方法です。

00:07:27.000 --> 00:07:34.000
SwiftUIを使用すると、データストアを設定したり、オプションを変更したり、取り消しを有効にしたり、自動保存を切り替えたりできます。

00:07:34.000 --> 00:07:38.000
SwiftUIは、その環境でモデルコンテキストを伝播します。

00:07:38.000 --> 00:07:43.000
設定したら、データの使用を開始する最も簡単な方法は、新しい@Queryプロパティラッパーです。

00:07:43.000 --> 00:07:48.000
データベースに保存されているものを1行のコードで簡単に読み込んでフィルタリングできます。

00:07:48.000 --> 00:07:53.000
SwiftDataは、モデル化されたプロパティのまったく新しい観測可能な機能をサポートしています。

00:07:53.000 --> 00:07:58.000
SwiftUIは、観察されたプロパティの変更を自動的に更新します。

00:07:58.000 --> 00:08:04.000
SwiftUIとSwiftDataは、魅力的で強力なアプリを構築するために協力しています。

00:08:04.000 --> 00:08:10.000
これらのフレームワークを一緒に使用する方法については、「SwiftDataでアプリを構築する」セッションをご覧ください。

00:08:10.000 --> 00:08:17.000
SwiftDataは、Swiftの機能に対する一流のサポートで設計された、データ管理の強力な新しいソリューションです。

00:08:17.000 --> 00:08:21.000
Swiftの新しいマクロシステムを使用して、コードに完全に集中します。

00:08:21.000 --> 00:08:27.000
@Modelを使用してスキーマを設定し、モデルコンテナで永続性エクスペリエンスを設定します。

00:08:27.000 --> 00:08:34.000
永続性、取り消しとやり直し、iCloud同期、ウィジェット開発などを簡単に有効にできます。

00:08:34.000 --> 00:08:40.000
SwiftUIのシームレスな統合を活用して、すぐにアプリにSwiftDataを構築し始めましょう。

00:08:40.000 --> 00:08:44.000
SwiftDataで構築するものを見るのが楽しみで、ご覧いただきありがとうございます。

00:08:44.000 --> 23:59:59.000
♪ ♪

