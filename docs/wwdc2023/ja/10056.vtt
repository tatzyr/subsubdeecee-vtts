WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
マイケル:こんにちは、ようこそ。

00:00:11.000 --> 00:00:18.000
私はマイケル・オクスです。このビデオでは、より良いドキュメント中心のアプリを構築する方法について話します。

00:00:18.000 --> 00:00:23.000
ドキュメント中心のアプリは、特にiPadの生産性ツールの大きな部分を占めています。

00:00:23.000 --> 00:00:26.000
ドキュメント中心のアプリには3つのタイプがあります。

00:00:26.000 --> 00:00:42.000
ファイルアプリなどのドキュメントの閲覧を許可するもの、クイックルックなどのコンテンツの表示を許可するもの、Pages、Keynote、Numbersなどのコンテンツの編集や作成も許可するもの。

00:00:42.000 --> 00:00:50.000
このビデオは、ビューアとエディタアプリの改善に焦点を当てていますが、議論されたコンテンツの一部はブラウザアプリにも適用されます。

00:00:50.000 --> 00:00:58.000
iPadOS 17では、アプリで多数の機能を自動的に有効にする新しいビューコントローラーが導入されています。

00:00:58.000 --> 00:01:07.000
iPadOS 16で導入されたデスクトップクラスのiPad APIと、既存のドキュメント中心のAPIとうまく連携します。

00:01:07.000 --> 00:01:10.000
この新しいビューコントローラーは、モジュラー方式で構築されています。

00:01:10.000 --> 00:01:16.000
あなたは素晴らしいシステムのデフォルトを取得しますが、個々の動作をカスタマイズできます。

00:01:16.000 --> 00:01:27.000
デスクトップクラスのiPad APIに追いつくには、WWDC22の「デスクトップクラスのiPadに出会う」と「デスクトップクラスのiPadアプリを構築する」をチェックしてください。

00:01:27.000 --> 00:01:34.000
SwiftUI開発のために、DocumentGroupは追加のコードなしでこれらすべての機能をサポートするようになりました。

00:01:34.000 --> 00:01:48.000
このSwiftUI側の詳細については、WWDC20の「SwiftUIでドキュメントベースのアプリを構築する」とWWDC22の「iPadのSwiftUI：ツールバー、タイトルなどを追加する」をチェックしてください。

00:01:48.000 --> 00:01:51.000
UIKitでは、機能はオプトインです。

00:01:51.000 --> 00:01:56.000
UIDocumentViewControllerは、コンテンツビューコントローラーの新しい基本クラスです。

00:01:56.000 --> 00:02:01.000
UIDocumentと連携して、ナビゲーションバーを自動的に設定します。

00:02:01.000 --> 00:02:07.000
これにより、共有、ドキュメントのドラッグ、取り消しとやり直しのサポートなどの機能が可能になります。

00:02:07.000 --> 00:02:10.000
また、自動名前変更もサポートしています。

00:02:10.000 --> 00:02:18.000
このビデオでは、UIDocumentの使い方と、UIDocumentViewControllerでドキュメントを提示する方法を学びます。

00:02:18.000 --> 00:02:24.000
次に、どの機能が組み込まれているか、さらにカスタマイズする方法について説明します。

00:02:24.000 --> 00:02:32.000
最後に、UIDocumentを利用するために既存のアプリを移行するためのベストプラクティスをいくつか探ります。

00:02:32.000 --> 00:02:36.000
まず、ドキュメントを作成します。

00:02:36.000 --> 00:02:40.000
すべてのドキュメントベースのアプリのコアはUIDocumentです。

00:02:40.000 --> 00:02:46.000
これは、アプリがサポートするファイルタイプごとにサブクラス化されることを意図した抽象基本クラスです。

00:02:46.000 --> 00:02:49.000
すべてのUIDocumentsはURLによってバックアップされています。

00:02:49.000 --> 00:02:57.000
ディスク上のファイルは最も一般的ですが、データベースとカスタムURLスキームを使用してドキュメントを保存して読み込むこともできます。

00:02:57.000 --> 00:03:04.000
UIDocumentのロードとセーブ操作は非同期であり、必要に応じて長い読み取りおよび書き込み操作を可能にします。

00:03:04.000 --> 00:03:12.000
このため、UIDocumentはスレッドセーフであり、ロックとキューを介してアクセスを調整します。

00:03:12.000 --> 00:03:25.000
UIDocumentサブクラスを実装する場合、ドキュメントのロードと保存、およびドキュメントのコンテンツへのアクセスを提供するという2つの主な責任があります。

00:03:25.000 --> 00:03:29.000
読み込みと保存は、すべてのドキュメントで非常によく似ています。

00:03:29.000 --> 00:03:35.000
コンテンツへのアクセスは、ドキュメントの種類とアプリでの使用方法により具体的です。

00:03:35.000 --> 00:03:47.000
たとえば、マークダウンエディタのドキュメントモデルは、単一のテキストプロパティしか持つ場合があります。または、ドキュメントの個々の部分を更新できるより複雑なインターフェイスを公開する可能性があります。

00:03:47.000 --> 00:03:53.000
コンテンツへのアクセスについてもっと話す前に、読み込みと保存について話しましょう。

00:03:53.000 --> 00:03:58.000
シンプルなファイルベースのドキュメントの場合、オーバーライドできる便利な方法が2つあります。

00:03:58.000 --> 00:04:05.000
ドキュメントが開くと、ファイルの内容とともに「loadFromContents:ofType:」が呼び出されます。

00:04:05.000 --> 00:04:12.000
ドキュメントが保存されているときに、ドキュメントの現在のコンテンツを取得するために「contentsForType:」が呼び出されます。

00:04:12.000 --> 00:04:19.000
ドキュメントの内容は、通常のファイルのデータオブジェクト、または他のすべてのファイルのFileWrapperです。

00:04:19.000 --> 00:04:26.000
ファイルタイプとその仕組みの詳細については、Tech Talkの「Uniform Type Identifiers -- a reinduction」をご覧ください。

00:04:26.000 --> 00:04:32.000
たとえば、このドキュメントは通常のマークダウンファイルを扱っているため、データオブジェクトを期待しています。

00:04:32.000 --> 00:04:43.000
さて、完全な制御が必要な場合は、「saveToURL:forSaveOperation:」と「readFromURL:」をオーバーライドすると、URLへのフルアクセスが可能になり、すべての読み書きがあなたに残されます。

00:04:43.000 --> 00:04:51.000
これは、ドキュメントをデータベースに保存したい場合や、ドキュメントの読み書きに特別な要件がある場合に最適です。

00:04:51.000 --> 00:04:58.000
保存操作は非同期ですが、メソッドが戻るまでに読み取りが完了することが期待されることに注意してください。

00:04:58.000 --> 00:05:02.000
そして、これがドキュメントの読み込みと保存のすべてです。

00:05:02.000 --> 00:05:06.000
それでは、文書の内容にアクセスする方法があることを確認しましょう。

00:05:06.000 --> 00:05:12.000
ドキュメントのコンテンツへのアクセスを提供する簡単な方法は、そのコンテンツのプロパティを追加することです。

00:05:12.000 --> 00:05:18.000
この例では、完全なマークダウン文字列を含む単一のテキストプロパティを追加します。

00:05:18.000 --> 00:05:24.000
このプロパティは、前のスライドで説明したように、ドキュメントを最初に読み込むときに設定されます。

00:05:24.000 --> 00:05:29.000
アプリは、ユーザーがドキュメントを編集するたびにこのテキストを更新できます。

00:05:29.000 --> 00:05:37.000
UIDocumentがいつ保存する必要があるかを知るには、プロパティが更新されるたびに「updateChangeCount:」を呼び出します。

00:05:37.000 --> 00:05:47.000
「updateChangeCount:」を呼び出すと、UIDocumentはドキュメントをニーズ保存としてマークし、適切なタイミングで自動的に保存できます。

00:05:47.000 --> 00:05:53.000
次に、新しいUIDocumentViewControllerでドキュメントを提示します。

00:05:53.000 --> 00:06:01.000
UIDocumentと同様に、UIDocumentViewControllerもサブクラス化される抽象的な基本クラスです。

00:06:01.000 --> 00:06:10.000
ドキュメントの開始、保存、および終了を管理し、関連するドキュメントからの情報をナビゲーション項目に入力します。

00:06:10.000 --> 00:06:18.000
これには、タイトル、ナビゲーション項目のタイトルメニュー、UIDocumentPropertiesオブジェクト、および名前変更デリゲートが含まれます。

00:06:18.000 --> 00:06:24.000
UIDocumentViewControllerは、取り消しややり直しなどの一般的なアクションのキーコマンドも提供します。

00:06:24.000 --> 00:06:30.000
UIDocumentViewControllerサブクラスを実装する方法を見てみましょう。

00:06:30.000 --> 00:06:33.000
サブクラスによってオーバーライドされるように設計された2つのメソッドがあります。

00:06:33.000 --> 00:06:43.000
ビューコントローラーに関連付けられたドキュメントが開かれたとき、またはすでに開いているドキュメントがビューコントローラーに割り当てられたとき、「documentDidOpen」が呼び出されます。

00:06:43.000 --> 00:06:49.000
ビューコントローラーのビューを入力して、この方法でドキュメントの内容を表示します。

00:06:49.000 --> 00:06:56.000
「documentDidOpen」が呼び出されてから、ビューコントローラーのビューが読み込まれるときの間には、タイミング保証がないことに注意してください。

00:06:56.000 --> 00:07:05.000
堅牢なコードを書くための良いアプローチは、独自のメソッドでビュー設定を移動し、「documentDidOpen」と「viewDidLoad」の両方から呼び出すことです。

00:07:05.000 --> 00:07:13.000
ビューを設定する前に、ビューが読み込まれ、ドキュメントが開いているかどうかを確認してください。

00:07:13.000 --> 00:07:17.000
オーバーライドする2番目の方法は「navigationItemDidUpdate」です。

00:07:17.000 --> 00:07:24.000
UIDocumentViewControllerがナビゲーション項目に変更を加えるたびに、このメソッドを呼び出します。

00:07:24.000 --> 00:07:27.000
そこにナビゲーションアイテムのカスタマイズを追加します。

00:07:27.000 --> 00:07:35.000
「UIDocumentViewController」は、可能な限り変更を永続化するために、変更を最小限に抑えるために最善の努力をします。

00:07:35.000 --> 00:07:39.000
UIDocumentViewControllerは「undoRedoItemGroup」も提供しています。

00:07:39.000 --> 00:07:48.000
取り消しボタンとやり直しボタンを表示したい場合は、このグループをナビゲーションバーに入れ、ドキュメントに取り消しマネージャーが割り当てられていることを確認してください。

00:07:48.000 --> 00:08:00.000
UIDocumentViewControllerは、取り消しマネージャーの可用性に応じて、このグループの「非表示」プロパティを変更し、必要に応じてグループ内のボタンを有効または無効にします。

00:08:00.000 --> 00:08:03.000
UIDocumentViewControllerは自動的にドキュメントを開いたり閉じたりします。

00:08:03.000 --> 00:08:11.000
ただし、ビューコントローラの外部からドキュメントにアクセスする必要がある場合は、「openDocumentWithCompletionHandler」を呼び出します。

00:08:11.000 --> 00:08:21.000
UIDocumentViewControllerは、「documentDidOpen」を呼び出すなど、必要なすべてのコールバックを行い、準備ができたら完了ハンドラを呼び出します。

00:08:21.000 --> 00:08:26.000
最後になりましたが、UIDocumentViewControllerはドキュメントプロパティを提供します。

00:08:26.000 --> 00:08:32.000
このプロパティは、常にビューコントローラーに関連付けられたドキュメントを参照します。

00:08:32.000 --> 00:08:36.000
初期化中にドキュメントを提供できますが、完全にオプションです。

00:08:36.000 --> 00:08:42.000
ビューコントローラに関連付けられたドキュメントがない場合、自動的に空の状態が表示されます。

00:08:42.000 --> 00:08:47.000
空の状態の設定の詳細については、「UIKitの新機能」をチェックしてください。

00:08:47.000 --> 00:08:53.000
さらに、UIDocumentViewControllerはアプリのルートビューコントローラーとして使用できます。

00:08:53.000 --> 00:09:03.000
階層にブラウザビューコントローラーがない場合、UIDocumentViewControllerはドキュメントピッカーを開くナビゲーションバーにドキュメントボタンを置きます。

00:09:03.000 --> 00:09:15.000
これには、アプリのinfo.plistで関連するファイルタイプのキー「UIDocumentClass」を宣言し、そのファイルタイプに一致するUIDocumentサブクラスに設定する必要があります。

00:09:15.000 --> 00:09:27.000
iPadOS 17では、UIDocumentは「UINavigationItemRenameDelegate」に準拠しており、ユーザーがタイトルメニューから名前の変更を呼び出すと、基礎となるファイルの変更を単独で処理します。

00:09:27.000 --> 00:09:38.000
UIDocumentViewControllerを使用している場合は、自動的に名前の変更を設定します。それ以外の場合は、ドキュメントをナビゲーションアイテムの名前変更デリゲートとして手動で設定できます。

00:09:38.000 --> 00:09:43.000
これらは、iPadOS 17で素晴らしいドキュメント中心のアプリを作成するために必要なすべての部分です。

00:09:43.000 --> 00:09:48.000
次に、既存のアプリを移行する方法。

00:09:48.000 --> 00:09:55.000
新しいUIDocumentViewControllerを使用するためのアプリの移行は簡単で、3つのステップしか必要としません。

00:09:55.000 --> 00:09:59.000
まず、コンテンツビューコントローラーの基本クラスを更新します。

00:09:59.000 --> 00:10:04.000
次に、既存のコードを新しいコールバックに移動します。

00:10:04.000 --> 00:10:08.000
そして第三に、不要になったコードを削除します。

00:10:08.000 --> 00:10:15.000
デスクトップクラスのiPadアプリのビデオで使用しているマークダウンエディタの例を変換する方法を見てみましょう。

00:10:15.000 --> 00:10:17.000
あなたがそれに慣れていないなら、心配しないでください。

00:10:17.000 --> 00:10:22.000
まず、既存のコードの関連部分を順を追って説明します。

00:10:22.000 --> 00:10:35.000
したがって、ここでは、上部にビューコントローラの定義、それが定義するドキュメントプロパティ、および最初のドキュメントを設定し、ドキュメントにコールバックを追加するinitメソッドがあります。

00:10:35.000 --> 00:10:41.000
まず、基本クラスをUIDocumentViewControllerに変更します。

00:10:41.000 --> 00:10:52.000
このクラスはUIDocumentViewControllerを継承しているため、プロパティ「document」が別のタイプのスーパークラスにすでに存在するため、コンパイラエラーが発生します。

00:10:52.000 --> 00:10:57.000
そのプロパティの名前を「markdownDocument」のようなより具体的なものに変更します。

00:10:57.000 --> 00:11:06.000
次に、このビューコントローラで使用される特定のドキュメントクラスに汎用ドキュメントプロパティをキャストする計算プロパティにします。

00:11:06.000 --> 00:11:09.000
このコードの最後のビットは初期化子です。

00:11:09.000 --> 00:11:15.000
まだ必要な唯一のコードは、ドキュメントにコールバックを割り当てることです。

00:11:15.000 --> 00:11:24.000
ドキュメントはこのビューコントローラの存続期間中に変更できるため、ドキュメントが変更されるたびに実行するようにこれを移動します。

00:11:24.000 --> 00:11:29.000
これを行う簡単な方法は、ドキュメントプロパティをオーバーライドし、didSetコールバックを追加することです。

00:11:29.000 --> 00:11:36.000
素晴らしい、基本クラスが最新になったので、新しいコールバックを処理する必要があります。

00:11:36.000 --> 00:11:42.000
「viewDidLoad」では、ナビゲーションバーにボタンを追加し、ツールバーのカスタマイズを許可するように設定します。

00:11:42.000 --> 00:11:49.000
UIDocumentViewControllerの場合、これを新しいコールバック「navigationItemDidUpdate」に移動します。

00:11:49.000 --> 00:11:55.000
次に、私たちのクラスにはすでに「didOpenDocument」というメソッドがあります。

00:11:55.000 --> 00:11:58.000
これは、UIDocumentViewControllerもほとんど持っているものです。

00:11:58.000 --> 00:12:05.000
メソッドの名前を変更し、ドキュメントがオプションになったという事実を調整するだけです。

00:12:05.000 --> 00:12:10.000
さて、次に私たち全員が最も楽しんでいる部分：コードの削除。

00:12:10.000 --> 00:12:17.000
エディタビューコントローラは「UINavigationItemRenameDelegate」に準拠していますが、もう必要ありません。

00:12:17.000 --> 00:12:20.000
UIDocumentは、すべての名前を自動的に変更します。

00:12:20.000 --> 00:12:30.000
したがって、デリゲート定義、すべてのコードを含むデリゲートメソッド、および「renameDelegate」の割り当てを削除します。

00:12:30.000 --> 00:12:35.000
次に、さらにいくつかのナビゲーションアイテムのカスタマイズを削除できます。

00:12:35.000 --> 00:12:44.000
「スタイル」と「バックアクション」の両方がドキュメントビューコントローラーによって自動的に設定されるため、これを完全に取り除くことができます。

00:12:44.000 --> 00:12:51.000
UIDocumentPropertiesオブジェクトを作成するために使用される「updateDocumentProperties」メソッドもあります。

00:12:51.000 --> 00:12:53.000
このメソッドはさまざまな場所から呼び出されます。

00:12:53.000 --> 00:12:55.000
しかし、私たちはもうそれを必要としません。

00:12:55.000 --> 00:13:03.000
UIDocumentViewControllerは私たちのためにこれらすべてを行っているので、それとそのすべてのコールサイトを削除することができます。

00:13:03.000 --> 00:13:05.000
そして、やるべきことはそれだけです。

00:13:05.000 --> 00:13:09.000
エディタービューコントローラーは現在、アプリに固有の機能のみを処理しています。

00:13:09.000 --> 00:13:16.000
ドキュメント管理の基本的なタスクやナビゲーションバーのデフォルト設定を管理する必要がなくなりました。

00:13:16.000 --> 00:13:22.000
代わりに、アプリのユニークな重要な要素である部分に集中することができます。

00:13:22.000 --> 00:13:30.000
ドキュメント中心のアプリを次のレベルに引き上げ、ユーザーに素晴らしい体験を提供するために知っておくべきことはこれだけです。

00:13:30.000 --> 00:13:33.000
UIDocumentを使用するようにデータモデルを変換します。

00:13:33.000 --> 00:13:39.000
次に、コンテンツビューコントローラーを新しいUIDocumentViewController基本クラスを使用するように変換します。

00:13:39.000 --> 00:13:46.000
その後、ビューコントローラーを調べて、不要になったすべてのコードを削除します。

00:13:46.000 --> 00:13:47.000
見てくれてありがとう。

00:13:47.000 --> 23:59:59.000
♪ ♪

