WEBVTT

00:00:00.000 -> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:03.000 -> 00:00:10.000
♪

00:00:10.000 -> 00:00:12.000
エティエンヌ・セゴンザック:こんにちは!私たちのセッションへようこそ。

00:00:12.000 -> 00:00:16.000
私はサファリチームのエンジニア、エティエンヌ・セゴンザックです。

00:00:16.000 -> 00:00:19.000
そして、チームメイトのティム・ホートンが加わりました。

00:00:19.000 -> 00:00:24.000
空間コンピューティングのための新しいSafariを紹介したいと思います。

00:00:24.000 -> 00:00:31.000
ウェブを新しいプラットフォームに持ち込むのは毎年ではないので、このセッションは私たちにとって大きな意味があります。

00:00:31.000 -> 00:00:34.000
私たちは可能な限り最高のブラウザを構築するために細心の注意を払いました。

00:00:34.000 -> 00:00:37.000
そして、ウェブはこの新しいデバイスで本当に輝いています。

00:00:37.000 -> 00:00:40.000
それでは、Safariの動作を見ることから始めましょう。

00:00:40.000 -> 00:00:44.000
ティム・ホートン:ありがとう、エティエンヌ!さあ行こう！

00:00:44.000 -> 00:00:51.000
xrOSでSafariを初めて開くと、iPadやMacで慣れ親しんだSafariと同じように、見覚えがあることに気づくでしょう。

00:00:51.000 -> 00:00:53.000
類似点は肌の深さ以上のものです。

00:00:53.000 -> 00:00:59.000
これは本当に、下に同じWebKitエンジンを備えたSafariと、このプラットフォームのためのいくつかの思慮深い追加です。

00:00:59.000 -> 00:01:06.000
すべてのWebサイトは、Web標準の広範なサポートのおかげで、箱から出してすぐに美しく機能します。

00:01:06.000 -> 00:01:07.000
ウェブの閲覧は簡単です。

00:01:07.000 -> 00:01:13.000
リンクをたどるには、手を差し伸べてページに触れるか、単にリンクを見て一緒に指をタップすることができます。

00:01:13.000 -> 00:01:18.000
リンクを見ている間、Safariは穏やかなハイライトを与え、自信を持ってナビゲートするのに役立ちます。

00:01:18.000 -> 00:01:24.000
Safariを使用すると、このプラットフォームのパワーを最大限に活用する方法がすぐに見つかります。

00:01:24.000 -> 00:01:35.000
たとえば、タブの概要は拡張ディスプレイ用に完全に再設計され、タブの切り替えがこれまで以上に楽しくなっています。

00:01:35.000 -> 00:01:44.000
プラットフォームの複数のウィンドウのサポートにより、これまでにないマルチタスクを行い、ウェブサイトやその他のアプリで自分を囲み、好きなように配置することができます。

00:01:44.000 -> 00:01:51.000
私は特に、究極のウェブ開発体験のためにMacバーチャルディスプレイでこれを使うのが好きです。

00:01:51.000 -> 00:01:56.000
そして、お気に入りのウェブビデオをフルスクリーンに持ち込むと、本当に焦点が当てられます。

00:01:56.000 -> 00:02:01.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:02:01.000 -> 00:02:06.000
こんにちは。Safariチームのソフトウェアエンジニア、Kendall Bagleyです。

00:02:06.000 -> 00:02:13.000
ご存知のようにウェブをこのプラットフォームに持ち込みましたが、まだ覚えておくべきベストプラクティスがありますので、それらのいくつかについて聞くためにエティエンヌに戻りましょう。

00:02:13.000 -> 00:02:15.000
エティエンヌ:ありがとう、ティム。

00:02:15.000 -> 00:02:17.000
私はタブの概要が大好きです!

00:02:17.000 -> 00:02:22.000
そして驚くべきことは、これらのウェブサイトのすべてが箱から出して機能することです。

00:02:22.000 -> 00:02:31.000
レスポンシブデザインのおかげで、彼らはiPhoneであなたの手のひらにいることから、部屋全体を埋めることに適応することができます。

00:02:31.000 -> 00:02:38.000
ウェブサイトを徐々に強化するためにすでに使用しているテクニックは、このプラットフォームに引き続き適用されます。

00:02:38.000 -> 00:02:47.000
CSSビューポートユニットでレイアウトを設計し、メディアとコンテナクエリでウィンドウのサイズ変更に反応する必要があります。

00:02:47.000 -> 00:02:53.000
グラフィックの場合は、特にUI要素の場合、SVGを優先してください。

00:02:53.000 -> 00:02:58.000
これにより、ウィンドウが近い場合でも、可能な限り最高のレンダリングが保証されます。

00:02:58.000 -> 00:03:11.000
また、ビットマップアセットを使用する必要がある場合、devicePixelRatioとレスポンシブ画像は、画像の読み込みとキャンバスレンダリングに推奨される解像度を反映します。

00:03:11.000 -> 00:03:27.000
今日は、この新しい体験の中核となる自然な相互作用について学び、このプラットフォーム用にウェブサイトを最適化し、ウェブ上の3Dコンテンツのユニークな機会を検討する際に興奮します。

00:03:27.000 -> 00:03:33.000
直接的および間接的なジェスチャーをもう少し深く掘り下げてみましょう。

00:03:33.000 -> 00:03:40.000
このデバイスの主な入力モデルは、目と手のジェスチャーの融合によって駆動されます。

00:03:40.000 -> 00:03:44.000
ティムのデモで見たように、それはとても自然なことです。

00:03:44.000 -> 00:03:49.000
周りを見回したり、指を叩いたり、つまんだりするだけです。

00:03:49.000 -> 00:03:57.000
ピンチが始まると、あなたの目はHTMLターゲットを見つけ、ポインターダウンイベントを配置するために使用されます。

00:03:57.000 -> 00:04:07.000
ジェスチャー中、pointermoveイベントは手の動きに従うのに役立ち、リリース時にポインターアップが送信されます。

00:04:07.000 -> 00:04:11.000
人差し指で手を伸ばして、ページに直接触れることもできます。

00:04:11.000 -> 00:04:19.000
指がウィンドウと交差すると、手の位置だけでポインタダウンイベントが送信されます。

00:04:19.000 -> 00:04:29.000
Pointermoveイベントは以前と同じように動きを追跡し、指がウィンドウとの交差が止まるとポインタアップが送信されます。

00:04:29.000 -> 00:04:35.000
もちろん、簡単なインタラクションのために低レベルのポインタイベントを心配する必要はありません。

00:04:35.000 -> 00:04:42.000
Safariは依然としてクリックイベントをトリガーし、スクロールとスクロールのスナップは期待どおりに機能します。

00:04:42.000 -> 00:04:48.000
メディアクエリに関しては、このプライマリ入力モデルはタッチスクリーンに似ています。

00:04:48.000 -> 00:04:52.000
ポインタは粗く、ホバリングをサポートしていません。

00:04:52.000 -> 00:04:58.000
しかし、トラックパッドやキーボードはBluetooth経由で接続できることを覚えておいてください。

00:04:58.000 -> 00:05:04.000
ページを見回している間、なぜホバースタイルがトリガーされないのか疑問に思うかもしれません。

00:05:04.000 -> 00:05:09.000
これは、このデバイスには視覚的なフィードバックを提供する新しい方法が付属しているからです。

00:05:09.000 -> 00:05:14.000
ユーザーが要素を見ると、タップする前に強調表示されます。

00:05:14.000 -> 00:05:21.000
したがって、あなたのウェブサイトもSafari自体も、ユーザーがどこを見ているのかを知る必要はありません。

00:05:21.000 -> 00:05:25.000
このシステムは、私たちがインタラクティブリージョンと呼ぶものに基づいています。

00:05:25.000 -> 00:05:33.000
これらは、アクセス可能なマークアップとCSSのスタイリングに基づいて、SafariのWebKitエンジンによって自動的に生成されます。

00:05:33.000 -> 00:05:41.000
ボタン、リンク、メニュー、または対応するARIAロールを持つ要素は自動的に強調表示されます。

00:05:41.000 -> 00:05:47.000
カスタムスタイルがある場合でも、入力フィールドやフォーム要素にも同じことが言えます。

00:05:47.000 -> 00:05:56.000
しかし、必ずカーソルを使用してください: ポインタ; 他のHTML要素については、何かがインタラクティブであることを示したい場合は。

00:05:56.000 -> 00:05:59.000
それがどのように機能するか見てみましょう!

00:05:59.000 -> 00:06:06.000
ここでは、ファイルリストUIを構築しており、リスト内のアイテムのカスタム要素があります。

00:06:06.000 -> 00:06:09.000
カーソルを追加します: それらをハイライト可能にするためのポインタ。

00:06:09.000 -> 00:06:22.000
しかし、このカスタム要素は内部的にdivを使用しており、カーソルプロパティは継承されるため、アイコンとラベルは独自の領域を取得し、別々にハイライトします。

00:06:22.000 -> 00:06:28.000
ポインタイベントの設定：これらの内部divのどれも私が物事を片付けるのに役立ちません。

00:06:28.000 -> 00:06:32.000
WebKitは、個別に強調表示する必要がないことを知っています。

00:06:32.000 -> 00:06:40.000
また、常に同じイベントターゲットを取得するため、イベント処理コードを簡素化します。

00:06:40.000 -> 00:06:51.000
CSS border-radiusプロパティを使用して、要素のすべてのコーナー、またはいくつかのコーナーにのみ半径を追加することで、ハイライトを形作ることもできます。

00:06:51.000 -> 00:06:59.000
完璧な円を作ることもできますが、各要素の視覚的なスタイルを一致させることが重要です。

00:06:59.000 -> 00:07:02.000
ねえティム、私たちが取り組んでいたウェブサイトを覚えていますか？

00:07:02.000 -> 00:07:05.000
インタラクティブな地域を絞り込む必要があるのだろうか。

00:07:05.000 -> 00:07:12.000
ティム：ええ、彼らが今どのように見えるか見てみましょう

00:07:12.000 -> 00:07:17.000
デバイスを持っていなくても、xrOSシミュレーターを使用してハイライト領域をデバッグできます。

00:07:17.000 -> 00:07:24.000
ウィンドウの周りでマウスカーソルを移動すると、見ている場所がシミュレートされ、クリックするとタップがシミュレートされます。

00:07:24.000 -> 00:07:29.000
シミュレーターでSafariを開いて、私のウェブサイトのハイライトを美しくするために何ができるか見てみましょう。

00:07:29.000 -> 00:07:34.000
このページを見て最初に気づいたのは、ナビゲーションバーのボタンがまったくハイライトされないことです!

00:07:34.000 -> 00:07:41.000
エティエンヌが、SafariがカーソルCSSプロパティを使用して、要素がインタラクティブと見なされるべきかどうかを判断すると述べたことを思い出すかもしれません。

00:07:41.000 -> 00:07:50.000
これらのボタンもmacOS Safariでハンドカーソルを取得できないことを知っているので、それが問題かもしれないという予感がしますが、Web Inspectorでチェックすることもできます。

00:07:50.000 -> 00:07:56.000
それについてもっと知りたい場合は、「Safari開発者機能の再発見」セッションをご覧ください。

00:07:56.000 -> 00:08:01.000
Webインスペクタを使用して、この誤ったグローバルカーソルスタイルを見つけました。

00:08:01.000 -> 00:08:10.000
それを削除して、リンクをデフォルトのカーソルを持つリンクにしましょう:ポインタスタイル。

00:08:10.000 -> 00:08:11.000
ねえ、すごい！

00:08:11.000 -> 00:08:14.000
今、私たちはハイライトを得ますが、それは少し見当違いのようです。

00:08:14.000 -> 00:08:17.000
実際には、それは私のウェブサイトの間違いを明らかにしています。

00:08:17.000 -> 00:08:20.000
macOSでも、テキストだけが実際にインタラクティブです。

00:08:20.000 -> 00:08:24.000
ボタン自体をクリックしようとすると、リンクをたどることはありません。

00:08:24.000 -> 00:08:29.000
だから、私たちはウェブサイトで間違いを見つけ、それを修正することで、このプラットフォームでの外観を改善することもできます!

00:08:29.000 -> 00:08:32.000
私には全面的な勝利のように思えます。

00:08:32.000 -> 00:08:43.000
テキストだけでなく、ボタン全体をリンクの一部にします。

00:08:43.000 -> 00:08:49.000
それがうまくいったかどうか見てみましょう。

00:08:49.000 -> 00:08:51.000
私にはずっと良く見えます!

00:08:51.000 -> 00:08:55.000
これで、ボタン全体がインタラクティブになり、ハイライトがエリア全体をカバーしています。

00:08:55.000 -> 00:08:59.000
よく見ると、角が整列していないことに気付くでしょう。

00:08:59.000 -> 00:09:05.000
Safariのハイライトはデフォルトでは半径が小さいですが、インタラクティブな要素に境界半径がある場合は、それを考慮に入れます。

00:09:05.000 -> 00:09:11.000
直しましょう。

00:09:11.000 -> 00:09:17.000
インタラクティブな要素に同じ境界半径を追加するだけです。

00:09:17.000 -> 00:09:18.000
完璧！

00:09:18.000 -> 00:09:21.000
今、ボタンは私たちが望むように強調表示されます。

00:09:21.000 -> 00:09:25.000
そのうちの1つをタップしましょう。

00:09:25.000 -> 00:09:28.000
ああ、それらのスコアはiPadに比べてちょっと速いです。

00:09:28.000 -> 00:09:33.000
修正すべきことがもっとあると思いますが、後でそれに戻ります。

00:09:33.000 -> 00:09:37.000
とりあえず、エティエンヌに戻って、あなたのウェブサイトにできるいくつかの最適化について聞いてみましょう。

00:09:37.000 -> 00:09:38.000
エティエンヌ：ありがとう、ティム！

00:09:38.000 -> 00:09:43.000
このプラットフォームを最適化する際には、いくつかのことを心に留めておく必要があります。

00:09:43.000 -> 00:09:49.000
昔Retinaディスプレイを導入したとき、ピクセルの概念はもう少し抽象的になりました。

00:09:49.000 -> 00:10:01.000
ウェブ開発者やデザイナーとして、私たちはCSSピクセルで作業し、必要な数のデバイスピクセルを使用してユーザーエージェントをハードウェアに適応させます。

00:10:01.000 -> 00:10:05.000
今日、スクリーンの概念はもう少し抽象的になりつつあります。

00:10:05.000 -> 00:10:10.000
フルスクリーン化をリクエストする場合、目標は単一の要素に集中することです。

00:10:10.000 -> 00:10:16.000
ページの残りの部分は消え、同時にウィンドウはデフォルトのサイズにサイズ変更されます。

00:10:16.000 -> 00:10:29.000
このデフォルトのサイズは、画面の寸法としてJavaScriptにも報告されるため、フルスクリーンでウィンドウと画面のサイズが一致することを期待しているウェブサイトは引き続き機能します。

00:10:29.000 -> 00:10:33.000
しかし、このプラットフォームではフルスクリーンウィンドウのサイズを変更できることを覚えておいてください。

00:10:33.000 -> 00:10:39.000
また、報告された画面の寸法よりも大きくなることさえできます。

00:10:39.000 -> 00:10:50.000
スクロールとアニメーションに関しては、いつものように、特にすべてのアニメーションが可能な限り最高のフレームレートをターゲットにするこのデバイスでは、パフォーマンスが重要です。

00:10:50.000 -> 00:10:56.000
パッシブスクロールイベントリスナーは、アニメーションがスクロールに干渉するのを防ぎます。

00:10:56.000 -> 00:11:02.000
また、requestAnimationFrameを使用する場合は、各フレーム間の経過時間を常に測定します。

00:11:02.000 -> 00:11:08.000
ウェブインスペクタのタイムラインは、パフォーマンスの問題を特定するのにも役立ちます。

00:11:08.000 -> 00:11:14.000
Web Inspectorの技術トークで、それらについて詳しく知ることができます。

00:11:14.000 -> 00:11:20.000
requestAnimationFrameといえば、ここでの私のアニメーションは少しびくびくしています。

00:11:20.000 -> 00:11:24.000
そのランタイムは、animate()を呼び出す周波数に依存します。

00:11:24.000 -> 00:11:30.000
そして、この周波数は、デバイスに応じて高くなるか低くなる可能性があります。

00:11:30.000 -> 00:11:38.000
代わりにすべきことは、各更新の間の時間を測定し、これを使用してアニメーションの進行状況を計算することです。

00:11:38.000 -> 00:11:46.000
それは十分にシンプルで、私のアニメーションをrequestAnimationFrameのリフレッシュレートから独立させます。

00:11:46.000 -> 00:11:49.000
それがスコアアニメーションの問題だったと思います！

00:11:49.000 -> 00:11:51.000
ティム：そうそう、もう直したよ。

00:11:51.000 -> 00:11:55.000
デバイスで動作するかどうか見てみましょう。

00:11:55.000 -> 00:12:01.000
それははるかに良く見えます、そして今、それは遅いまたは速い任意のフレームレートを持つデバイスに対して将来性があります。

00:12:01.000 -> 00:12:05.000
ティーウェアはすべてウェブサイト上でかなり素敵に見えますが、私たちはさらに進むことができます。

00:12:05.000 -> 00:12:13.000
彼らが本当にあなたのテーブルでどのように見えるかを見たい場合は、クイックルックを利用してウェブサイトを調整し、それを現実にするのは非常に簡単です。

00:12:13.000 -> 00:12:25.000
iOSのARクイックルックと同様に、画像の周りにUSDZファイルを参照するアンカーを追加するだけで、シンプルな画像を魔法のクイックルック体験に変えます。

00:12:25.000 -> 00:12:28.000
すごい！今、私はどれが収まるか本当にわかります。

00:12:28.000 -> 00:12:30.000
エティエンヌ、どの茶器を選びますか？

00:12:30.000 -> 00:12:34.000
エティエンヌ：最高のマッチを見つけるために、キッチンで試してみる必要があると思います。

00:12:34.000 -> 00:12:37.000
しかし、これは印象的です。

00:12:37.000 -> 00:12:41.000
デモは本当に素晴らしかったです。ナビゲートするのが速くて楽しかったです。

00:12:41.000 -> 00:12:45.000
そして、クイックルックは本当に物事を全く別の次元にもたらしました。

00:12:45.000 -> 00:12:49.000
あなたのウェブサイトに3Dコンテンツを統合する方法を見てみましょう。

00:12:49.000 -> 00:12:54.000
AR Quick LookはもともとiOS 12で導入されました。

00:12:54.000 -> 00:13:06.000
必要なのは、3Dモデルのプレビューを表示するために使用できる特別な属性と画像タグを持つUSDZファイルを指すリンクだけです。

00:13:06.000 -> 00:13:20.000
この正確なセットアップはxrOSで動作し、RealityKitの高度な照明とレンダリングの恩恵を受けながら、ユーザーに3Dオブジェクトを自分のスペースに置く簡単な方法を提供します。

00:13:20.000 -> 00:13:27.000
詳細を知りたい場合は、「USDエコシステムを探索する」を必ず見てください。

00:13:27.000 -> 00:13:35.000
同じ線に沿って、HTMLモデル要素は潜在的なW3C標準として提案されています。

00:13:35.000 -> 00:13:42.000
ページ内のARクイックルック、または3Dオブジェクトの画像タグのように考えてください。

00:13:42.000 -> 00:13:52.000
完全なステレオスコピックビューと環境照明まで、すべてのデバイスで可能な限り最高のレンダリングが得られます。

00:13:52.000 -> 00:14:06.000
まったく新しい要素を導入することは大きなステップなので、3Dオブジェクトのソースとユーザーインタラクションを有効または無効にするための属性を指定する簡単な方法から簡単に始めています。

00:14:06.000 -> 00:14:09.000
JavaScript APIは少し豊かです。

00:14:09.000 -> 00:14:13.000
カメラ、アニメーションなどにアクセスできます。

00:14:13.000 -> 00:14:14.000
面白そう？

00:14:14.000 -> 00:14:22.000
最新のSafariを実行している場合は、どのプラットフォームでもモデル要素機能フラグを有効にできます。

00:14:22.000 -> 00:14:33.000
そして、物事をさらに進めたい場合は、ウェブ上で完全に没入型のシーンを構築するためのW3C標準であるWebXRの開発者プレビューをチェックしてください。

00:14:33.000 -> 00:14:41.000
WebXRはWebGLに基づいており、多くの一般的なWebGLライブラリにはすでにサポートが組み込まれています。

00:14:41.000 -> 00:14:49.000
3Dシーンのコードがある場合は、WebXRセッションをリクエストすることで、完全に没入型にすることができます。

00:14:49.000 -> 00:14:52.000
マウスやトラックパッドでパンするようなものではありません。

00:14:52.000 -> 00:14:56.000
あなたは文字通り現場の中に運ばれるでしょう。

00:14:56.000 -> 00:14:59.000
あなたはそれを信じるためにそれを試さなければなりません。

00:14:59.000 -> 00:15:06.000
xrOSでは、Safariの高度な設定でWebXR機能フラグを見つけることができます。

00:15:06.000 -> 00:15:08.000
そして、これはほんの始まりに過ぎません。

00:15:08.000 -> 00:15:13.000
没入型ウェブに関しては、探求すべきことがたくさんあります。

00:15:13.000 -> 00:15:19.000
CSS変換やポインタイベントなどの技術は、この新しいプラットフォームで進化するに違いありません。

00:15:19.000 -> 00:15:26.000
これが、AppleがW3Cウェブ標準の定義と開発に積極的に関与している理由です。

00:15:26.000 -> 00:15:30.000
そして、インプットを提供する機会があります。

00:15:30.000 -> 00:15:34.000
あなたの考えと楽しみにしていることをお知らせください。お聞かせください。

00:15:34.000 -> 00:15:39.000
今日から新しい3D体験の実験を始めることができます。

00:15:39.000 -> 00:15:45.000
また、インタラクティブな地域はxrOSシミュレータで簡単に確認できます。

00:15:45.000 -> 00:15:50.000
バグが見つかった場合、フィードバックアシスタントはすべてのプラットフォームで利用できます。

00:15:50.000 -> 00:15:59.000
そして、HTML、JavaScript、またはCSSに関連するものについては、WebKitバグトラッカーはbugs.webkit.orgにあります。

00:15:59.000 -> 00:16:08.000
CSSといえば、今年はSafariに多くの新機能がありますので、「CSSの新機能」をお見逃しなく。

00:16:08.000 -> 00:16:09.000
皆さん、ご参加いただきありがとうございます!

00:16:09.000 -> 00:16:12.000
ティム:そして、没入型ウェブでお会いしましょう!

00:16:12.000 -> 23:59:59.000
♪

