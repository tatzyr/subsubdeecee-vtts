WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
シルパ・チラッケル：こんにちは、私の名前はシルパです。

00:00:11.000 --> 00:00:12.000
ライアン・ゴルベック:そして、私はライアンです。

00:00:12.000 --> 00:00:17.000
Shilpa：今日は、Xcode 15で取り組んできたすべてをお見せできることをとても楽しみにしています。

00:00:17.000 --> 00:00:19.000
ライアン：Xcodeはあなたの開発経験の中心です。

00:00:19.000 --> 00:00:28.000
Xcodeでは、開発ワークフローのすべての側面を1か所にまとめ、単一のツールに集中しながら、アプリを簡単かつ楽しく構築できます。

00:00:28.000 --> 00:00:38.000
今日は、Xcode 15で今年の多くの改善点について触れます。編集、ナビゲート、共有から、アプリのテスト、デバッグ、配布まで。

00:00:38.000 --> 00:00:41.000
Shilpa：Xcodeの新機能を表示する前に、それをダウンロードする必要があります。

00:00:41.000 --> 00:00:46.000
そして、Xcodeのリリースバージョンを入手する最善の方法は、Mac App Storeからです。

00:00:46.000 --> 00:00:52.000
これにより、常に最新バージョンのツールを使用し、最新の機能を活用できることが保証されます。

00:00:52.000 --> 00:00:59.000
昨年、時計とテレビシミュレーターをオプションでダウンロードすることで、より簡単に開始できるようにしました。

00:00:59.000 --> 00:01:11.000
今年は、iOSやAppleの新しい空間コンピューティングプラットフォームなど、すべてのシミュレータをダウンロードできるようにすることで、さらに進んでおり、ニーズに合わせてXcodeを設定できます。

00:01:11.000 --> 00:01:17.000
これで、Xcodeを入手すると、より小さくなり、すべてのシミュレータを入手する前でもコードを書きやすくなります。

00:01:17.000 --> 00:01:26.000
または、最新のベータ版など、開発者のウェブサイトからXcodeをダウンロードする必要がある場合は、含めるシミュレータを事前に選択できます。

00:01:26.000 --> 00:01:31.000
Xcodeを手に入れたので、すぐに飛び込んで、ソースエディタの新機能を見てみましょう。

00:01:31.000 --> 00:01:36.000
コード補完は、より速く、より少ない間違いで必要なコードにたどり着くのに役立ちます。

00:01:36.000 --> 00:01:39.000
Xcode 15では、ずっと賢くなります。

00:01:39.000 --> 00:01:40.000
見てみましょう。 

00:01:40.000 --> 00:01:44.000
完了は新しい情報源を活用します。

00:01:44.000 --> 00:01:46.000
ここには裏庭の鳥がいます。

00:01:46.000 --> 00:01:52.000
まず、新しいファイルを作成し、PlantSummaryRowと名付けます。

00:01:52.000 --> 00:01:57.000
必要なインポートステートメントを追加します。

00:01:57.000 --> 00:02:07.000
さて、新しい構造体を作成すると、完了はタイプ名のPlantSummaryRowを提案します。それは私が作成したファイルの名前だからです。

00:02:07.000 --> 00:02:15.000
このファイルの実装を完了させてください。

00:02:15.000 --> 00:02:17.000
実装は終わりました。

00:02:17.000 --> 00:02:20.000
いくつかの完了の提示方法も改善されました。

00:02:20.000 --> 00:02:26.000
デフォルトの引数を持つ関数を呼び出すとき、必要なパラメータを正確に取得するのは難しい場合があります。

00:02:26.000 --> 00:02:32.000
あなたが望むものを選ぶのを助けるために、デフォルトの引数のすべての可能な順列を見ることができます。

00:02:32.000 --> 00:02:37.000
このVStackにフレーム修飾子を追加し、キーボードの右矢印を押します。

00:02:37.000 --> 00:02:43.000
必要なもの、この場合は幅を選択します。

00:02:43.000 --> 00:02:49.000
そして、完了はより多くのコンテキスト認識を持ち、あなたが書いているコードについてさらに良い提案を提供します。

00:02:49.000 --> 00:03:01.000
VStackに戻ると、修飾子を追加するためにドットを入力すると、Xcodeがこのビューで最も頻繁に使用される修飾子の1つであることを知っているので、パディングはトップの提案です。

00:03:01.000 --> 00:03:08.000
しかし、テキストに修飾子を追加すると、トップの提案としてフォントを取得します。

00:03:08.000 --> 00:03:12.000
これらのエディタの提案は、周囲のコードも考慮します。

00:03:12.000 --> 00:03:14.000
私はすでにこのテキストのフォントを変更しました。

00:03:14.000 --> 00:03:23.000
別の修飾子を追加したい場合、テキストで作業するときに同じ修飾子を2回使用したくないので、一番上の提案は太字です。

00:03:23.000 --> 00:03:25.000
これは別の例です。

00:03:25.000 --> 00:03:29.000
このファイルでは、CLLocationを使って鳥がどこにいるかを調べています。

00:03:29.000 --> 00:03:38.000
私はすでに緯度で入力したように、これらの2つのプロパティは一般的に一緒にペアになっているので、今、それは経度を示唆します。

00:03:38.000 --> 00:03:43.000
これはすべて、より良いトップの提案があり、より安全なコードをより速く入力できることを意味します。

00:03:43.000 --> 00:03:47.000
ねえライアン、資産カタログにも電力補完をもたらすと聞きました。

00:03:47.000 --> 00:03:49.000
もう少し教えていただけますか?

00:03:49.000 --> 00:03:50.000
ライアン：もちろん、シルパ。

00:03:50.000 --> 00:03:53.000
カラーと画像のアセットは現在、Swiftシンボルによってバックアップされています。

00:03:53.000 --> 00:03:55.000
これは、コードを完了できるようになったことを意味します。

00:03:55.000 --> 00:03:58.000
私のアセットカタログには、いくつかのカスタムカラーと画像があります。

00:03:58.000 --> 00:04:05.000
Xcode 15はそれぞれのシンボルを自動的に生成し、文字列名を使用する代わりにコードでこれらを参照できます。

00:04:05.000 --> 00:04:18.000
このイメージの名前をMultipleCloudsに変更してプロジェクトを構築すると、このアセットを使用する別のファイルで問題が発生します。

00:04:18.000 --> 00:04:23.000
そして、CodeCompleteを使って修正できます。

00:04:23.000 --> 00:04:29.000
これらのシンボルは私にタイプの安全性を与えてくれるので、実行時に不思議なことに色や画像が欠落していることを心配する必要はありません。

00:04:29.000 --> 00:04:34.000
また、Xcode 15は、カタログのパワーと柔軟性をローカリゼーション体験にももたらします。

00:04:34.000 --> 00:04:41.000
文字列カタログは、ローカリゼーションを1か所にまとめ、それらを一元的に確認および更新する方法を提供します。

00:04:41.000 --> 00:04:47.000
開始するには、[編集] &gt; [文字列カタログに変換] を選択して、プロジェクトを文字列カタログを使用するように変換できます。

00:04:47.000 --> 00:04:53.000
これにより、移行できるすべてのストーリーボード、.strings、および.stringsdictファイルを示すシートが表示されます。

00:04:53.000 --> 00:04:59.000
そして、一度移行すると、すべての翻訳が1つのエディタに整理されます。

00:04:59.000 --> 00:05:05.000
左側のサイドバーでは、サポートしている各言語の翻訳の進捗状況を確認できます。

00:05:05.000 --> 00:05:07.000
そして、最新の状態に保つのは簡単です。

00:05:07.000 --> 00:05:10.000
すべての文字列は、ビルドするたびにソースから直接引き出されます。

00:05:10.000 --> 00:05:18.000
新しい文字列が追加または削除されると、エディタは影響を受ける言語に注釈を付け、関連する文字列にバッジを付けます。

00:05:18.000 --> 00:05:23.000
セッション「ストリングカタログを発見する」に移動して、今日から移行を始めましょう。

00:05:23.000 --> 00:05:26.000
Shilpa、今年のドキュメントのXcodeの新機能は何ですか？

00:05:26.000 --> 00:05:27.000
シルパ:たくさん。

00:05:27.000 --> 00:05:30.000
明確で簡潔なコードは、ドキュメントでさらに良くなります。

00:05:30.000 --> 00:05:38.000
将来の自分やAPIの消費者に何かを説明しているかどうかにかかわらず、優れたドキュメントを書くことが重要です。

00:05:38.000 --> 00:05:41.000
そして、素晴らしいドキュメントは素晴らしいプレゼンテーションに値します。

00:05:41.000 --> 00:05:47.000
Xcode 15には美しい新しいスタイリングと間隔があり、ドキュメントが読みやすくなっています。

00:05:47.000 --> 00:05:52.000
しかし、最大の改善点は、ドキュメントのリアルタイムプレビューを表示する新しいアシスタントです。

00:05:52.000 --> 00:06:04.000
ドキュメントの作成中に、[エディタ] &gt; [アシスタント] を選択し、ジャンプバーの [ドキュメント プレビュー] を選択して、アシスタントを表示できます。

00:06:04.000 --> 00:06:08.000
ソースエディタに入力すると、プレビューがリアルタイムで更新されます。

00:06:08.000 --> 00:06:13.000
これは、私のドキュメントが完全に構築されたドキュメントアーカイブでどのように見えるかを正確に示します。

00:06:13.000 --> 00:06:17.000
実際にどのように使用できるかを示すコード例を追加します。

00:06:17.000 --> 00:06:28.000
「この初期化子を使用して、特定の鳥の画像を表示する」と書くことから始めます。

00:06:28.000 --> 00:06:33.000
次に、コード例を貼り付けます。

00:06:33.000 --> 00:06:39.000
この例にはUIが含まれているため、結果のビューがどのように見えるかのスクリーンショットを追加します。

00:06:39.000 --> 00:06:45.000
ドキュメントカタログに含めたので、BirdIconという名前の画像を参照できます。

00:06:45.000 --> 00:06:51.000
新しいドキュメントのプレビューは、ドキュメントがあなたが望むように正確に提示されていることを確認するのに非常に役立ちます。

00:06:51.000 --> 00:06:59.000
あなたが私のようにドキュメントを書くことに情熱を持っているなら、詳細については、「Swift-DocCで豊富なドキュメントを作成する」セッションをご覧ください。

00:06:59.000 --> 00:07:05.000
ドキュメントと同じくらい重要なのは、コードが簡潔で理解しやすいものであることです。

00:07:05.000 --> 00:07:09.000
今年のSwiftの新機能は、強力な新しい言語機能であるSwiftマクロです。

00:07:09.000 --> 00:07:14.000
マクロは、より表現力豊かなAPIを作り、繰り返されるコードを排除するのに役立ちます。

00:07:14.000 --> 00:07:22.000
また、Xcodeの統合により、マクロを完全に可視化できるため、マクロで生成されたコードをアプリ内の他のすべてのコードと同様に扱うことができます。

00:07:22.000 --> 00:07:25.000
マクロはSDKのSwiftパッケージの一部です。

00:07:25.000 --> 00:07:36.000
現在、Swift標準ライブラリ、基盤、新しいSwiftデータフレームワークなど、多くのApple独自のフレームワークでマクロの力を活用しています。

00:07:36.000 --> 00:07:39.000
また、自分のマクロパッケージを作成して他の人と共有することもできます。

00:07:39.000 --> 00:07:51.000
パッケージを作成するには、Command-Shift-Aを押すだけでXcodeのすべてのメニューオプションにアクセスできる新機能であるクイックアクションを使用します。

00:07:51.000 --> 00:07:56.000
新しいマクロパッケージには、私が始めるための素晴らしい例が付属しています。

00:07:56.000 --> 00:07:59.000
私はすでにマクロパッケージEnumHelperを作成しました。

00:07:59.000 --> 00:08:03.000
EnumHelper内では、CaseDetectionをマクロとして実装しました。

00:08:03.000 --> 00:08:07.000
マクロの美しさは、通常のSwiftコードを生成することです。

00:08:07.000 --> 00:08:10.000
それは包み込み、彼らが提供するコードをきちんと隠します。

00:08:10.000 --> 00:08:21.000
しかし、マクロが何をしているのかを見たい場合や、マクロ生成コードでデバッグしたいときは、クイックアクションの助けを借りてマクロを展開できます。

00:08:21.000 --> 00:08:26.000
デバッグする必要がある場合は、マクロ内のコードにブレークポイントを設定することもできます。

00:08:26.000 --> 00:08:33.000
「Swiftマクロで展開する」セッションを見て、Swiftマクロのより深い技術的理解を得てください。

00:08:33.000 --> 00:08:40.000
この新しい知識を装備し、セッション「Swiftマクロを書く」でゼロからいくつかのマクロを書くために一緒にコーディングすることができます。

00:08:40.000 --> 00:08:44.000
マクロ、プレビューを活用しているXcodeの別の領域を探りましょう。

00:08:44.000 --> 00:08:49.000
マクロの助けを借りて、新しいプレビューAPIはシンプルで覚えやすいです。

00:08:49.000 --> 00:08:52.000
#Previewと入力してプレビューを追加します。

00:08:52.000 --> 00:08:56.000
アカウント画面をプレビューしたい。

00:08:56.000 --> 00:09:02.000
アプリの詳細列にはさまざまな状態があり、別のプレビューを作成することで表示できます。

00:09:02.000 --> 00:09:05.000
私はこれらのシナリオの両方を見ることができます。

00:09:05.000 --> 00:09:07.000
しかし今、私はUIに2つのプレビューを持っています。

00:09:07.000 --> 00:09:15.000
それらを区別するために、タイトル「プレースホルダビュー」を追加します。

00:09:15.000 --> 00:09:17.000
しかし、待ってください、さらに改善があります。

00:09:17.000 --> 00:09:21.000
UIKitとAppKitにプレビューをお届けします。

00:09:21.000 --> 00:09:29.000
そのため、古いFood Truckアプリでも、UIViewControllerのプレビューを追加し、SwiftUIと同じくらい速く反復することができます。

00:09:29.000 --> 00:09:32.000
では、プレビュー付きのウィジェットの開発を見てみましょう。

00:09:32.000 --> 00:09:41.000
このAPIでは、時間ベースのウィジェットを構築するための新しいワークフローも導入されています。

00:09:41.000 --> 00:09:44.000
キャンバスには、すべてのエントリを表示する新しい領域があります。

00:09:44.000 --> 00:09:50.000
そして、それらをナビゲートすると、ウィジェットのトランジションがどのようにアニメーション化されるかがわかります。

00:09:50.000 --> 00:09:58.000
「XcodeプレビューでプログラマティックUIを構築する」セッションをチェックして、プロジェクトに新しいエキサイティングなプレビュー機能を採用する方法を学んでください。

00:09:58.000 --> 00:10:01.000
ライアンに返して、ナビゲーションの改善について話します。

00:10:01.000 --> 00:10:03.000
ライアン:ありがとう、シルパ。

00:10:03.000 --> 00:10:09.000
プロジェクトが成長するにつれて、より複雑になり、タスク中に参照したいランドマークを追跡することが困難になります。

00:10:09.000 --> 00:10:13.000
助けるために、Xcode 15はブックマークナビゲーターを導入しています。

00:10:13.000 --> 00:10:17.000
ソースコントロールナビゲーターのすぐ隣をクリックして開きます。

00:10:17.000 --> 00:10:21.000
ドキュメントを追加する必要があるコードの場所にブックマークを追加しています。

00:10:21.000 --> 00:10:24.000
このファイルにもう1つ追加したいのですが、簡単にできます。

00:10:24.000 --> 00:10:28.000
この場所を右クリックして「ブックマーク」を選択します。

00:10:28.000 --> 00:10:36.000
ブックマークは、その場所のプレビューとともにナビゲーターに表示されますが、クリックして別の説明を入力することで、この表示を変更できます。

00:10:36.000 --> 00:10:42.000
Xcodeは、私の説明でコードの行に注釈を付け、私が何をしたいのかを簡単に見て覚えておくことができます。

00:10:42.000 --> 00:10:47.000
私のブックマークのリストは増え始めていますが、好きなように並べ替えてグループ化することで管理できます。

00:10:47.000 --> 00:10:51.000
ドキュメント関連のブックマークをすべてグループ化したいです。

00:10:51.000 --> 00:11:00.000
興味のあるものを選択し、セカンダリクリックでコンテキストメニューを開き、選択から新しいグループを選択します。

00:11:00.000 --> 00:11:04.000
これにより、ドキュメントを追加する場所を呼び出す新しいグループが作成されます。

00:11:04.000 --> 00:11:09.000
ブックマークは私のコードの素晴らしいリマインダーですが、ToDoリストとしても使用できます。

00:11:09.000 --> 00:11:12.000
左側をクリックすると、完了としてマークできます。

00:11:12.000 --> 00:11:18.000
または、コンテキストメニューで[ブックマークの削除]を選択すると、完全に削除できます。

00:11:18.000 --> 00:11:21.000
これにより、エディタのブックマークの注釈が削除されます。

00:11:21.000 --> 00:11:24.000
しかし、私がブックマークできるのはコードの行だけではありません。

00:11:24.000 --> 00:11:27.000
ブックマークは、検索クエリを追跡するための素晴らしい方法でもあります。

00:11:27.000 --> 00:11:37.000
Xcode 15の前に、私はコードにTo-Doを追加しましたが、それらを見つけるのが難しいので、私はすでにそれらすべてを見つけるためにクエリをブックマークしました。

00:11:37.000 --> 00:11:39.000
しかし、私は任意の検索クエリをブックマークすることができます。

00:11:39.000 --> 00:11:43.000
コード内のすべてのビュー修飾子の便利なリストを保持したい。

00:11:43.000 --> 00:11:53.000
新しいConforming Typesクエリを使用して、viewModifierプロトコルへのすべての適合性を検索します。

00:11:53.000 --> 00:12:00.000
次に、結果を右クリックし、ブックマーク検索「viewModifier」を選択することで、このクエリをブックマークできます。

00:12:00.000 --> 00:12:04.000
私のクエリはブックマークナビゲーターで入手できます。

00:12:04.000 --> 00:12:11.000
クエリの結果が変更された場合は、ブックマークの横にある更新ボタンを1回クリックするだけでリストを更新できます。

00:12:11.000 --> 00:12:17.000
Xcode 15の新しいブックマークナビゲーターは、あなたの仕事を追跡するので、手元のタスクに集中する必要はありません。

00:12:17.000 --> 00:12:20.000
開発のもう一つの重要な部分は、あなたの仕事を共有することです。

00:12:20.000 --> 00:12:28.000
特に同僚と共有するコミットを作成する場合、変更をまとめることは、変更自体と同じくらい重要です。

00:12:28.000 --> 00:12:36.000
Xcode 15では、新しい変更ナビゲーターとコミットエディタが導入され、すべての変更を確認するのに最適な方法です。

00:12:36.000 --> 00:12:38.000
私はプロジェクトにドキュメントを追加することに取り組んできました。

00:12:38.000 --> 00:12:42.000
ソースコントロールナビゲーターでこれらの変更を確認できます。

00:12:42.000 --> 00:12:47.000
最初に気付くのは、各ファイルのステータスのレポートと表示の改善です。

00:12:47.000 --> 00:12:52.000
私のステージの変更は、ファイル名の横にアイコンとして表示されます。

00:12:52.000 --> 00:12:57.000
これらの変更の確認を開始したいので、コミットされていない変更項目をクリックして、コミットエディタを起動します。

00:12:57.000 --> 00:13:04.000
1つのスクロールビューですべての変更を確認できるようになりました。

00:13:04.000 --> 00:13:07.000
各セクションには、周囲のコードを理解するのに十分なコンテキストが表示されます。

00:13:07.000 --> 00:13:12.000
そして、もっと見たい場合は、ドラッグハンドルを使ってより多くのファイルを公開することができます。

00:13:12.000 --> 00:13:18.000
各変更はソースエディタでも表示され、慣れている注釈やコントロールにアクセスできます。

00:13:18.000 --> 00:13:22.000
レビュー中に、BirdsNavigationStackファイルに問題があることに気づきました。

00:13:22.000 --> 00:13:29.000
ドキュメントにタイプミスをしたように見えますが、ビューを離れることなく修正できます。

00:13:29.000 --> 00:13:32.000
Xcodeは私の変更を処理し、問題を削除します。

00:13:32.000 --> 00:13:38.000
私の編集はまた、変更バーにステージングされていないとすぐに表示されます。

00:13:38.000 --> 00:13:48.000
ステータスインジケーターは、BirdsNavigationStackにステージングとアンステージの両方の変更があることを強調しています。

00:13:48.000 --> 00:13:56.000
次のコミットに修正を含めたいので、修正の横にある変更バーをクリックして「ステージ変更」を選択してステージングします。

00:13:56.000 --> 00:14:00.000
また、デバッグに使用していたログステートメントを誤ってステージングしたことに気づきました。

00:14:00.000 --> 00:14:03.000
変更バーをもう一度使用して、この変更を解除します。

00:14:03.000 --> 00:14:08.000
これらのステージングコントロールは使いやすく、Xcode全体に統合されています。

00:14:08.000 --> 00:14:09.000
変更を確認する準備はできています。

00:14:09.000 --> 00:14:21.000
まず、コミットメッセージボックスに説明を追加し、コミットボタンをクリックします。

00:14:21.000 --> 00:14:26.000
Xcodeはコミットを作成し、コミットビューアですぐに開き、含まれていたものを要約します。

00:14:26.000 --> 00:14:35.000
そして最後に、私は自分のコミットをチームメイトと共有することができます。

00:14:35.000 --> 00:14:44.000
コミットの横にあるステータスインジケーターをクリックし、[プッシュ]を選択し、プロンプトに従います。

00:14:44.000 --> 00:14:48.000
これらのソースコントロール機能は、Xcode 15に集中するための大きな改善です。

00:14:48.000 --> 00:14:51.000
しかし、ねえ、シルパ、テストにも役立つ新機能があると思います。

00:14:51.000 --> 00:14:53.000
それらについて教えていただけますか?

00:14:53.000 --> 00:14:57.000
シルパ:確かに、ライアン、テストは高品質のアプリを出荷する上で重要な部分です。

00:14:57.000 --> 00:15:02.000
これにより、回帰をすばやくキャッチし、複雑さが増すにつれてアプリの品質を維持できます。

00:15:02.000 --> 00:15:10.000
テストは今年、より効率的にするためにSwiftでゼロから書き換えられた更新されたテストナビゲーターから始めて、いくつかの大きな改善が行われました。

00:15:10.000 --> 00:15:16.000
テスト結果をリアルタイムで実行または報告すると、Xcodeが45%高速になりました。

00:15:16.000 --> 00:15:22.000
テストナビゲーターはテスト計画を中心に整理されているので、気になるテストを見つけやすくなります。

00:15:22.000 --> 00:15:28.000
フィルターを使用して、予想される障害など、任意の結果タイプに基づいてテストを見つけることもできます。

00:15:28.000 --> 00:15:36.000
XcodeまたはXcode Cloudでテストを実行すると、テストレポートは結果を調べるのに役立ち、次にどこに焦点を合わせるべきかを示します。

00:15:36.000 --> 00:15:40.000
これは、テスト実行全体の高レベルの要約から始まります。

00:15:40.000 --> 00:15:44.000
これには、結果のパターンベースの分析であるInsightsが含まれます。

00:15:44.000 --> 00:15:47.000
テストセクションでは、テストがどのように実行されたかを理解できます。

00:15:47.000 --> 00:15:54.000
さまざまなデバイスや構成でどれだけのテストに合格し、失敗したかを簡単に把握できます。

00:15:54.000 --> 00:16:00.000
Insightsは、テスト結果を分析して、以前は見るのが難しかった可能性のある関連する障害を特定します。

00:16:00.000 --> 00:16:09.000
また、スイート全体が結果を返すのに時間がかかる可能性のあるテスト実行を警告します。

00:16:09.000 --> 00:16:11.000
2番目の洞察が私に目立ちます。

00:16:11.000 --> 00:16:14.000
アカウントボタンをタップしようとしたときにテストに失敗しました。

00:16:14.000 --> 00:16:16.000
私はこれをさらに調査したい。

00:16:16.000 --> 00:16:26.000
概要から、結果タイプ、実行先、およびテスト計画設定のフィルタを使用して、すべてのテスト実行を表示するテストリストに移動できます。

00:16:26.000 --> 00:16:31.000
テストでは、同じエラーメッセージで複数の言語でアカウントボタンをタップできませんでした。

00:16:31.000 --> 00:16:40.000
詳細については、個々のクラスを見るか、個々のテスト方法の新しい専用のテスト詳細ビューに移動します。

00:16:40.000 --> 00:16:51.000
テストの詳細ビューには、すべての実行の内訳や専用のパフォーマンス指標タブなど、結果データを探索するさまざまな方法のタブが含まれています。

00:16:51.000 --> 00:16:56.000
UIテストの失敗をデバッグすることは、新しいオートメーションエクスプローラーでこれまで以上に楽しいです。

00:16:56.000 --> 00:17:02.000
エクスプローラーはインタラクティブなので、テストの再生を見たり、タイムラインをスクラブしたりできます。

00:17:02.000 --> 00:17:04.000
タッチまたはマウスのイベントがビデオにオーバーレイされます。

00:17:04.000 --> 00:17:10.000
失敗の時点で、テストがアカウントボタンのタップに失敗したときのように、アプリのUI階層を調べることができます。

00:17:10.000 --> 00:17:15.000
これにより、UIテストの失敗の修正がずっと簡単になります。

00:17:15.000 --> 00:17:21.000
詳細な調査については、「Xcodeテストレポートで失敗をより速く修正する」セッションを見て、詳細を確認してください。

00:17:21.000 --> 00:17:23.000
ライアンに戻って、デバッグについて話しましょう。

00:17:23.000 --> 00:17:25.000
ライアン：テストとデバッグは密接に関連しています。

00:17:25.000 --> 00:17:28.000
彼らは両方とも高品質のアプリを作ることについてです。

00:17:28.000 --> 00:17:33.000
また、デバッグは今年も、XcodeへのOSLogの統合から始めて、いくつかの大きな改善を受けます。

00:17:33.000 --> 00:17:36.000
OSLogは、ランタイム情報をキャプチャするための優れたツールです。

00:17:36.000 --> 00:17:41.000
ログ出力を整理しておく、構造化されたカスタマイズ可能なロギングメカニズムを提供します。

00:17:41.000 --> 00:17:52.000
また、Xcode 15のコンソールでは、サブシステムカテゴリや重大度などのログデータの複雑なフィルタリングを実行する機能など、OSLogを完全にサポートしています。

00:17:52.000 --> 00:17:54.000
ログのプレゼンテーションはこれまで以上にきれいです。

00:17:54.000 --> 00:17:59.000
焦点はログコンテンツにあり、余分なデータはきれいに隠されています。

00:17:59.000 --> 00:18:08.000
各ログエントリの背景色は、その重大度を示し、重要なメッセージのログ出力の長いストリームを簡単にスキャンできます。

00:18:08.000 --> 00:18:12.000
また、メタデータフィールドはデフォルトでは非表示になっていますが、数回クリックするだけです。

00:18:12.000 --> 00:18:15.000
見たいフィールドだけを選択できます。

00:18:15.000 --> 00:18:19.000
また、特定のものを探しているときは、フィルターフィールドで検索を絞り込むことができます。

00:18:19.000 --> 00:18:24.000
メタデータまたはログの全文をフィルタリングできます。

00:18:24.000 --> 00:18:30.000
そして、私が本当に好きな機能は、ログエントリからそれを作成したコード行に直接ジャンプすることができます。

00:18:30.000 --> 00:18:35.000
セッション「構造化ロギングによるデバッグ」で、これらのロギング機能について詳しく説明します。

00:18:35.000 --> 00:18:38.000
最後に、配布について話しましょう。

00:18:38.000 --> 00:18:44.000
配布とは、アプリを世界に、チームメイト、ベータテスター、そしてユーザーに公開することです。

00:18:44.000 --> 00:18:48.000
そして、Xcode 15には、このプロセスをより簡単かつ安全にするためのいくつかの改善点があります。

00:18:48.000 --> 00:18:51.000
Xcode Cloudから始めましょう。

00:18:51.000 --> 00:18:54.000
Xcode Cloudは、アプリを配布するのに最適な方法です。

00:18:54.000 --> 00:19:00.000
ビルドバージョニング、アプリの署名、配布プロファイルなどを自動的に管理します。

00:19:00.000 --> 00:19:03.000
今年、Xcode Cloudはあなたのためにさらに2つの詳細を処理します。

00:19:03.000 --> 00:19:06.000
まず、TestFlightテストの詳細。

00:19:06.000 --> 00:19:11.000
Xcode Cloudは、ソースコードのすぐ横にテストノートを含めるためのサポートを追加します。

00:19:11.000 --> 00:19:18.000
これらは配布のためにTestFlightビルドに自動的に添付されるため、メモはアプリのすぐ横にテスターに表示されます。

00:19:18.000 --> 00:19:22.000
第二に、Xcode CloudはMacアプリの公証をサポートするようになりました。

00:19:22.000 --> 00:19:28.000
ワークフローに公証後のアクションを追加するだけで、あとはXcode Cloudが行います。

00:19:28.000 --> 00:19:34.000
ビルドが完了すると、アプリは自動的に公証され、ホッチキスで留められ、ダウンロードする準備が整います。

00:19:34.000 --> 00:19:36.000
アプリの公証は、ユーザーにとって不可欠です。

00:19:36.000 --> 00:19:39.000
それはあなたのアプリが改ざんされていないことを彼らに知らせます。

00:19:39.000 --> 00:19:45.000
しかし、あなたが依存しているSDKとフレームワークの整合性を信頼できることも同様に重要です。

00:19:45.000 --> 00:19:50.000
この保証を提供するために、XcodeはXCFrameworksの署名検証を導入しています。

00:19:50.000 --> 00:19:56.000
作成者はフレームワークの内容にデジタル署名することができ、これらの署名はXcodeで確認できます。

00:19:56.000 --> 00:19:59.000
フレームワークインスペクタには新しい署名スライスがあります。

00:19:59.000 --> 00:20:02.000
誰がフレームワークを作成し、署名したかを正確に教えてくれます。

00:20:02.000 --> 00:20:04.000
そして、Xcodeはこのアイデンティティを覚えているでしょう。

00:20:04.000 --> 00:20:12.000
したがって、フレームワークを更新するときに変更された場合は、問題に関する明確な警告が表示されますが、それ以上のものがあります。

00:20:12.000 --> 00:20:16.000
著者は、フレームワークにプライバシーマニフェストを含めることができます。

00:20:16.000 --> 00:20:21.000
このマニフェストは、フレームワークが機密データをどのように使用し、保護するかを正確に詳述しています。

00:20:21.000 --> 00:20:29.000
プライバシーマニフェストはフレームワークにバンドルされているため、署名されたパッケージの一部でもあり、その内容が著者から直接来たことを信頼できます。

00:20:29.000 --> 00:20:34.000
Xcodeを使用して、すべてのマニフェストをアプリの完全なプライバシーレポートにまとめることができます。

00:20:34.000 --> 00:20:36.000
これは私が生成したレポートです。

00:20:36.000 --> 00:20:44.000
このレポートは、App Store Connectでプライバシー栄養ラベルを簡単に記入できるように設計されており、ユーザーに正確な情報を提供するようにしています。

00:20:44.000 --> 00:20:52.000
また、Appleはプライバシーに影響を与えるSDKと協力して、すべての重要な依存関係がこの貴重な情報を提供するようにしています。

00:20:52.000 --> 00:21:00.000
「デジタル署名でアプリの依存関係を確認する」と「プライバシーマニフェストを使い始める」のセッションで、これらのトピックをより深く取り上げます。

00:21:00.000 --> 00:21:04.000
プライバシーマニフェストは、アプリをユーザーに配布する際の優れたツールです。

00:21:04.000 --> 00:21:10.000
バグ修正や新しい機能ブランチに取り組んでいるときは、チームメイトとチームメイトだけにアプリを配布したいと考えています。

00:21:10.000 --> 00:21:15.000
そのため、Xcode 15はTestFlightの内部テスト配布オプションをサポートするようになりました。

00:21:15.000 --> 00:21:21.000
TestFlightの内部ビルドはチームのみが利用できるため、誤って顧客にリリースすることはできません。

00:21:21.000 --> 00:21:23.000
それらは簡単に作成できます。

00:21:23.000 --> 00:21:30.000
App Store Connectを通じてアプリを配布する場合は、「TestFlight内部テスト」オプションを選択するだけです。

00:21:30.000 --> 00:21:32.000
しかし、実際にはこれよりもさらに簡単です。

00:21:32.000 --> 00:21:37.000
Xcodeは現在、最も一般的な配布方法と推奨設定のセットをバンドルしています。

00:21:37.000 --> 00:21:40.000
ステップ1、TestFlight内部のみを含む、これらの新しいオプションのいずれかを選択します。

00:21:40.000 --> 00:21:43.000
ステップ2、[配布]をクリックすると完了です。

00:21:43.000 --> 00:21:46.000
ステップ3はありません。

00:21:46.000 --> 00:21:52.000
また、App Store Connectを通じて配信する場合は、ビルドステータスに関するデスクトップ通知も届きます。

00:21:52.000 --> 00:21:55.000
そのため、アプリをテストする準備ができたら、すぐに通知されます。

00:21:55.000 --> 00:22:03.000
これらのアップデートにより、アプリの反復と配布が簡単になり、チームメイト、テスター、ユーザーとの緊密な連携がスムーズかつ迅速になります。

00:22:03.000 --> 00:22:09.000
「XcodeとXcode Cloudで配布を簡素化する」というセッションを見て、これらの機能の探索を始めましょう。

00:22:09.000 --> 00:22:12.000
まあ、それはXcode 15の新機能の簡単な概要でした。

00:22:12.000 --> 00:22:19.000
入手が簡単で、使用が速く、開発をより集中し、スムーズで、楽しくするための多くの改善があります。

00:22:19.000 --> 00:22:23.000
Shilpa：Xcode 15をダウンロードして、これらのクールな新機能を試し始めることができます。

00:22:23.000 --> 00:22:25.000
見てくれてありがとう。

00:22:25.000 --> 23:59:59.000
♪

