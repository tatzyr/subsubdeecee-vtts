WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
ポール：こんにちは。

00:00:11.000 --> 00:00:15.000
私はポールで、SFシンボルアプリに取り組んでいます。

00:00:15.000 --> 00:00:24.000
導入以来、SFシンボルは、Appleプラットフォームの見た目と感触を大きくする大きな部分を占めています。

00:00:24.000 --> 00:00:32.000
シンボルは一貫しています。Appleのプラットフォームには何千ものシンボルが組み込まれており、共通のビジュアルデザインと行動を共有しています。

00:00:32.000 --> 00:00:36.000
彼らはアプリやインターフェースをすぐに身近に感じさせることができます。

00:00:36.000 --> 00:00:50.000
シンボルはカスタマイズ可能です。ニーズに合った組み込みシンボルがない場合は、SFシンボルアプリを使用して、システムが提供するものと同じ強力な機能を備えた独自のシンボルを作成できます。

00:00:50.000 --> 00:00:53.000
そしてもちろん、シンボルは表現力豊かです。

00:00:53.000 --> 00:00:58.000
シンボルは、少量の画面の不動産で複雑な概念を伝えることができます。

00:00:58.000 --> 00:01:01.000
彼らは言語を超越した方法でアイデアを伝えることができます。

00:01:01.000 --> 00:01:06.000
そして、彼らはあなたのアプリをより生き生きと遊び心のある気分にさせることができます。

00:01:06.000 --> 00:01:13.000
そして今、SFシンボル5で、シンボルはアニメーションで表現力の全く新しい次元を獲得しています。

00:01:13.000 --> 00:01:17.000
そして、SFシンボルアプリは、この新しい次元を探求するのに役立ちます。

00:01:17.000 --> 00:01:45.000
今日は、SFシンボルアプリを使用して新しいアニメーション効果をテストドライブする方法、新しいカスタムシンボルを作成し、既存のカスタムシンボルを更新して、すべての新しいアニメーション機能と完璧に機能するようにする方法、独自のカスタムシンボルに基づいて使い慣れた認識可能なシンボルを作成する新しい方法、そして最後に、古いプラットフォームでもアプリで使用しているシンボルが素晴らしく見えるようにする方法について説明します。

00:01:45.000 --> 00:01:51.000
それでは、SFシンボルアプリを起動して、いくつかの例を見てみましょう。

00:01:51.000 --> 00:01:55.000
ツアーの最初の停留所は、ここサイドバーの新しいタブです。

00:01:55.000 --> 00:02:02.000
これはアニメーションインスペクタであり、ご想像のとおり、新しいアニメーション効果をプレビューするために使用できます。

00:02:02.000 --> 00:02:05.000
より良い外観を得るために、ギャラリービューに切り替えましょう。

00:02:05.000 --> 00:02:13.000
そして、内蔵スピーカーシンボルの1つをつかんで実験します。

00:02:13.000 --> 00:02:17.000
このポップアップボタンから新しいアニメーション効果を選択できます。

00:02:17.000 --> 00:02:19.000
バウンスアニメーションは始めるのに最適な場所です。

00:02:19.000 --> 00:02:33.000
プレビューボタンを押すと、メインギャラリービュー、その下のシンボル行、サイドバーのプレビュー領域でアニメーションが再生されるので、すべての異なるレンダリングモードで見ることができます。

00:02:33.000 --> 00:02:38.000
プレビューボタンの周りには、アニメーションを設定するためのコントロールが表示されます。

00:02:38.000 --> 00:02:51.000
シンボルが上向きにバウンスするか下向きにバウンスするか、シンボルのレイヤーを別々にバウンスするか、シンボル全体を一度にバウンスするかなどのオプションを選択できます。

00:02:51.000 --> 00:02:58.000
これらの設定の一部を変更すると、プレビュー領域の下のラベルが「自動」から「変更」に変更されました。

00:02:58.000 --> 00:03:03.000
アプリのコードを書くときは、すべてのアニメーションタイプにデフォルト設定が付属しています。

00:03:03.000 --> 00:03:11.000
SFシンボルアプリを起動すると、これらのデフォルト設定が事前に選択され、ここに「自動」という単語が表示されます。

00:03:11.000 --> 00:03:18.000
デフォルト以外のものに切り替えると、ここに「変更済み」という単語が表示され、設定を変更したことを知らせます。

00:03:18.000 --> 00:03:23.000
ここに表示されるリセットボタンをクリックして、デフォルトに戻ることができます。

00:03:23.000 --> 00:03:37.000
気に入った設定を見つけたら、コードで直接指定したい場合は、このボタンをクリックして、SwiftまたはObjective-C APIに必要なエフェクトの名前をコピーできます。

00:03:37.000 --> 00:03:41.000
しかし、新しいアニメーションのチェックに戻りましょう。

00:03:41.000 --> 00:03:47.000
このスピーカーシンボルは、可変色もサポートしています。

00:03:47.000 --> 00:03:53.000
では、可変カラーアニメーションを試してみましょう。

00:03:53.000 --> 00:04:01.000
累積オプションを選択すると、可変カラーレイヤーが徐々にアクティブになり、すべて一緒にフェードアウトします。

00:04:01.000 --> 00:04:06.000
Iterativeを選択すると、一度に1つのレイヤーのみがアクティブになります。

00:04:06.000 --> 00:04:13.000
そして、反転オプションをオンにして、この設定がどのように異なる感覚を生み出すかを確認できます。

00:04:13.000 --> 00:04:16.000
だから、新しいアニメーション効果を簡単に見てみましょう。

00:04:16.000 --> 00:04:24.000
システムが提供するSFシンボルを使用してプレビューしてきましたが、いつものように、組み込みのシンボルはストーリーの半分にすぎません。

00:04:24.000 --> 00:04:31.000
アプリにカスタムシンボルがある場合、SFシンボルアプリは、アニメーションの脚光を浴びる準備ができていることを確認するのに役立ちます。

00:04:31.000 --> 00:04:38.000
今、私は娘と一緒にパズルキューブを解く練習をするのに役立つアプリに取り組んでいたときの昨年からいくつかのカスタムシンボルを持っています。

00:04:38.000 --> 00:04:46.000
今年、私はスピードキューブを卒業したので、キューブを解くのにかかる時間を追跡するためにアプリを更新したいです。

00:04:46.000 --> 00:04:51.000
昨年のカスタムシンボルをつかんで、アニメーションの準備を始めましょう。

00:04:51.000 --> 00:04:54.000
これが去年作った3x3のキューブシンボルです。

00:04:54.000 --> 00:05:11.000
階層レンダリングとマルチカラーレンダリングのために注釈を付け、可変色を適用できるように前面を異なるレイヤーに分割しました。

00:05:11.000 --> 00:05:18.000
私のシンボルは可変色なので、箱から出してすぐに可変色のアニメーションをサポートしています。

00:05:18.000 --> 00:05:22.000
これをローディングインジケーターに使用できます。

00:05:22.000 --> 00:05:26.000
他のアニメーションを見てみましょう。 ではいくつかのアニメーションを見てみましょう。

00:05:26.000 --> 00:05:29.000
パルスは、私の解決タイマーが一時停止されたときに最適です。

00:05:29.000 --> 00:05:37.000
しかし、プレビューボタンを押すと、バイレイヤー設定が選択されているにもかかわらず、シンボル全体が脈打っています。

00:05:37.000 --> 00:05:44.000
ここの注釈リストには、By Layer設定を使用しているときにどのレイヤーをパルスするかを指定できる新しいコントロールがあります。

00:05:44.000 --> 00:05:49.000
私のシンボルのレイヤーのどれもマークされていない場合、シンボル全体が脈動します。

00:05:49.000 --> 00:05:57.000
では、前面を構成するすべてのレイヤーをパルスにマークし、もう一度プレビューしてみましょう。

00:05:57.000 --> 00:05:59.000
それが私たちが望む行動です。

00:05:59.000 --> 00:06:02.000
私のタイマーが一時停止すると、これは素晴らしく見えるでしょう。

00:06:02.000 --> 00:06:07.000
他のすべてのアニメーションはモーションを使用しているので、次に確認する必要があります。

00:06:07.000 --> 00:06:21.000
SFシンボルアプリのバージョン4以前からエクスポートされたシンボルがある場合、またはXcode 14と互換性があるようにエクスポートされている場合は、モーション情報は含まれず、常にアプリでシンボル全体として移動します。

00:06:21.000 --> 00:06:29.000
しかし、Xcode 15で使用するために、このバージョンのSFシンボルアプリバージョン5からエクスポートするとどうなるか見てみましょう。

00:06:29.000 --> 00:06:35.000
バウンスアニメーションに戻り、パズルキューブのシンボルで再生します。

00:06:35.000 --> 00:06:37.000
それはたくさんの動きです!

00:06:37.000 --> 00:06:42.000
デフォルトでは、By Layerが選択されている場合、シンボル内のすべてのレイヤーは独立して移動します。

00:06:42.000 --> 00:06:47.000
今、私はシンボルアニメーションにかなり興奮していますが、これはあまりにも良いことかもしれません。

00:06:47.000 --> 00:06:51.000
注釈の新機能でこれを修正できます。

00:06:51.000 --> 00:06:56.000
これで、すべてのサブレイヤーを一緒にアニメーション化できるレイヤーのグループを作成できます。

00:06:56.000 --> 00:07:04.000
前面を構成するすべてのレイヤーを選択し、新しいレイヤーグループに追加します。

00:07:04.000 --> 00:07:14.000
レイヤーグループ内では、すべてのレイヤーはまだ独自の注釈と設定を保持していますが、今ではすべて一緒に移動しています。

00:07:14.000 --> 00:07:21.000
今は動きが少なくなっていますが、キューブの異なる部分が別々に動くのはまだ少し奇妙に見えます。

00:07:21.000 --> 00:07:34.000
では、シンボルのすべてのレイヤーを元に戻して選択し、それらをすべて1つのグループに追加しましょう。

00:07:34.000 --> 00:07:36.000
それはこのシンボルの精神と一致します。

00:07:36.000 --> 00:07:43.000
キューブの異なる面は実際には別々に移動せず、この図面では実際には異なるレベルの深さではありません。

00:07:43.000 --> 00:07:52.000
これらすべてのレイヤーをグループ化することで、コードがレイヤーごとに要求した場合でも、キューブが常に単一のユニットとしてアニメーション化されるようにしました。

00:07:52.000 --> 00:08:00.000
最終的には、カスタムシンボルを個別に見て、それぞれに適したモーショングループを決定する必要があります。

00:08:00.000 --> 00:08:06.000
さて、先ほど述べたように、シンボルの強みの1つは一貫性と親しみやすさです。

00:08:06.000 --> 00:08:11.000
これは、カスタムシンボルで作業する際に覚えておくべき重要な概念です。

00:08:11.000 --> 00:08:13.000
これは私が昨年取り組んでいた別のカスタムシンボルです。

00:08:13.000 --> 00:08:17.000
それは私のパズルキューブですが、それは満たされた円の上に置かれています。

00:08:17.000 --> 00:08:22.000
この円形のエンクロージャは、SFシンボルの一般的なデザイン要素です。

00:08:22.000 --> 00:08:28.000
組み込みライブラリには、このビデオシンボルのように、同様の円形処理を使用するシンボルがたくさんあります。

00:08:28.000 --> 00:08:41.000
そして、円形の境界線やスラッシュやバッジのような修飾子など、SFシンボルのレパートリー全体にこの種の再利用可能なデザインパターンの他の多くの例があります。

00:08:41.000 --> 00:08:49.000
これらの治療の一貫性は、SFシンボルを即座に認識し、身近にする重要なものの1つです。

00:08:49.000 --> 00:08:55.000
カスタムシンボルは、その親しみやすさのすべての利点を得るために、これらの治療法を一致させようとする必要があります。

00:08:55.000 --> 00:08:59.000
では、カスタムシンボルがシステムと一致していることを確認するにはどうすればよいですか?

00:08:59.000 --> 00:09:07.000
さて、私はシステムシンボルのライブラリを見て、同様のシンボルの例を見つけ、その新しい図面をベースにすることができます。

00:09:07.000 --> 00:09:22.000
そして、シンボルが異なるレンダリングモードのそれぞれでどのように注釈付けされるか、レイヤーによってアニメーション化されたときにどのように動くか、どのように脈打つのか、そしてこのエンクロージャでその可変色設定がどのように変化するかを見ることができました。

00:09:22.000 --> 00:09:30.000
そして、他のエンクロージャ、スラッシュ、バッジなど、他の一般的なデザインパターンでも同じことができます。

00:09:30.000 --> 00:09:33.000
しかし、それは覚えておくべきことがたくさんあります。

00:09:33.000 --> 00:09:39.000
そして、私はむしろ私のパズルキューブの最上層を解決する最速の方法を覚えておくためにその精神的な空間を使いたいです。

00:09:39.000 --> 00:09:51.000
SFシンボルの目標の1つは、一貫性のある使い慣れた体験を提供するために、カスタムシンボルがシステムが提供するシンボルと一緒にできるだけ簡単に収まるようにすることです。

00:09:51.000 --> 00:09:57.000
だから、今年はシンボルコンポーネントを紹介することにとても興奮しています。

00:09:57.000 --> 00:10:05.000
シンボルコンポーネントは、システムが提供するSFシンボルのように見え、感じるアートワークと動作を提供します。

00:10:05.000 --> 00:10:16.000
カスタムシンボルの1つを取り、シンボルコンポーネントと組み合わせると、すぐに、組み込みの友人のように見え、感じる新しいシンボルが手になります。

00:10:16.000 --> 00:10:20.000
いくつかのコンポーネントを私の信頼できるパズルキューブシンボルと組み合わせて、それらがどのように機能するかを見てみましょう。

00:10:20.000 --> 00:10:27.000
まず、カスタムシンボルのコンテキストメニューを表示し、シンボルとコンポーネントを組み合わせることを選択します。

00:10:27.000 --> 00:10:33.000
表示されるシートでは、コンポーネントのライブラリを見て、使用したいものを選択できます。

00:10:33.000 --> 00:10:38.000
エンクロージャ、バッジ、スラッシュコンポーネントがあります。

00:10:38.000 --> 00:10:45.000
スラッシュ、バッジプラス、サークル、サークルフィルから始めます。

00:10:45.000 --> 00:10:47.000
そして、それだけです。

00:10:47.000 --> 00:10:51.000
これらの新しいシンボルが私のカスタムシンボルライブラリに登場していることがわかりますが、すでに見栄えがします。

00:10:51.000 --> 00:10:55.000
プラスバッジはマルチカラーに正しく着色されています。

00:10:55.000 --> 00:11:02.000
スラッシュはすでにその背後にあるパズルキューブとは別にアニメーション化されています。

00:11:02.000 --> 00:11:12.000
そして、.circle.fillバージョンは、階層モードでプライマリレイヤーを使用するようにすでに設定されていますが、その背後にある円を通してモノクロで消去されます。

00:11:12.000 --> 00:11:17.000
そして、それは私の可変色の設定さえ保持しました。

00:11:17.000 --> 00:11:28.000
ベースシンボルの外観とデザインに応じて、追加の調整を行うこともできます。これは、通常アノテーションコントロールがあるサイドバーで行うことができます。

00:11:28.000 --> 00:11:38.000
たとえば、視覚的なアーティファクトを避けるためにバッジの位置を少し押したり、シンボルの反対側に移動したりすることもできます。

00:11:38.000 --> 00:11:47.000
または、スラッシュの長さを変更して、シンボルが十分にカバーされていることを確認することもできます。

00:11:47.000 --> 00:11:53.000
今、あなたはまた、あなたの新しいシンボルがシンボルがサポートするさまざまなスケールとウェイトのすべてで素晴らしく見えることを確認したいと思うでしょう。

00:11:53.000 --> 00:11:58.000
3つのスケールと9つのウェイトで、合計27の異なるバリエーションがあります。

00:11:58.000 --> 00:12:08.000
しかし、良いニュースは、シンボルコンポーネントがあなたのためにほとんどの作業を処理する可変テンプレートによって供給されているということです。

00:12:08.000 --> 00:12:18.000
可変テンプレートはSFシンボル3で導入されました。小規模で3つの図面を提供するだけで済みます。超軽量、レギュラー、ブラックウェイト用にそれぞれ1つずつです。

00:12:18.000 --> 00:12:29.000
その後、各図面で使用したベジェパスで互換性がある限り、システムは図面を混在させて残りの24の可能なバリアントを作成できます。

00:12:29.000 --> 00:12:34.000
そして、あなたが私に尋ねるなら、3の価格で27のシンボルを得ることはかなり大きな取引です。

00:12:34.000 --> 00:12:42.000
シンボルコンポーネントは同じように機能します。スモール+ウルトラライト、スモール+レギュラー、スモール+ブラックのバリエーションを制御できます。

00:12:42.000 --> 00:12:50.000
ギャラリービューの上部にプレビューのセットがあるので、3つの異なる重みでシンボルを表示し、それらをすばやく切り替えることができます。

00:12:50.000 --> 00:13:00.000
多くの場合、このスラッシュを長くしたときのように、レギュラーウェイトを調整するだけで、変更はウルトラライトとブラックに引き継がれます。

00:13:00.000 --> 00:13:13.000
しかし、エンクロージャのオーバーラップなどの問題が発生した場合、またはシンボルの形状に異なるアライメントが必要な場合は、超軽量またはブラックウェイトのオーバーライドチェックボックスをクリックして、追加の調整を行うことができます。

00:13:13.000 --> 00:13:17.000
密閉されたキューブのスケールを少し下げて、もう少し呼吸の余地を与えます。

00:13:17.000 --> 00:13:24.000
このシステムは、セミボールドのような重みの間に自動的に作成するときに、これらの新しい調整を考慮に入れます。

00:13:24.000 --> 00:13:29.000
そして実際、システムはこのようなエンクロージャの舞台裏でさらに多くの作業を行っています。

00:13:29.000 --> 00:13:50.000
ベースシンボルがエンクロージャに収まるように縮小されると、システムはベースシンボルの可変テンプレートを使用して重量補償を適用し、サイズが減少するにつれてシンボルの重量と厚さを増やしています。これは、より大きく、囲まれていないバージョンとそれを取り巻く円の両方と一貫性を保つのに役立ちます。

00:13:50.000 --> 00:14:00.000
また、シンボルコンポーネントの他の多くの部分と同様に、囲まれたシンボルの重みをさらに微調整して、最終的な視覚的な結果を得ることができます。

00:14:00.000 --> 00:14:03.000
そして、それがシンボルコンポーネントの強力な方法です。

00:14:03.000 --> 00:14:14.000
これらは、システムが提供するSFシンボルのレパートリーに一致する動作とアートワークを使用して、既存のカスタムシンボルに基づいて新しいシンボルを作成するための迅速かつ簡単な方法です。

00:14:14.000 --> 00:14:22.000
シンボルコンポーネントは、必要に応じて重量補償を適用できるように、可変テンプレートから作られたカスタムシンボルと連携する必要があることを忘れないでください。

00:14:22.000 --> 00:14:30.000
これはまた、変数テンプレートにある可能性のある個々のバリアントのオーバーライドが、コンポーネントと組み合わせると無視されることを意味します。

00:14:30.000 --> 00:14:37.000
そして最後に、コンポーネントを使用して作成されたシンボルから編集可能なテンプレートをエクスポートできないことに注意してください。

00:14:37.000 --> 00:14:45.000
シンボルコンポーネントは、調整後に図面を処理するように設計されているため、手動で編集する必要はありません。

00:14:45.000 --> 00:14:50.000
今年のSFシンボルアプリには40以上のコンポーネントが含まれています。

00:14:50.000 --> 00:14:54.000
締めくくる前に、考慮すべき重要な分野がもう1つあります。

00:14:54.000 --> 00:15:04.000
新機能を採用する際には、アプリを使用している多くの人々が古いプラットフォーム上にあり、素晴らしいアプリ内体験に値することを覚えておくことも重要です。

00:15:04.000 --> 00:15:17.000
SFシンボルアプリ内のエクスペリエンスを再設計し、アプリがサポートするすべてのプラットフォームでシンボルの外観と動作を確実にできるようにしました。古いものでも。

00:15:17.000 --> 00:15:27.000
編集可能なテンプレートをエクスポートしてシンボルの形状と構造を変更すると、以前にテンプレートに表示されていた塗りつぶされた図形ではなく、ワイヤーフレームビューが表示されます。

00:15:27.000 --> 00:15:37.000
動きに最適化されたシンボルには、感嘆符バッジの周りのこの余分な境界線のように、レンダリング中に他の図形の一部を消去するために使用される図形が含まれることがよくあります。

00:15:37.000 --> 00:15:49.000
描画段階でシンボルを構成する図形に焦点を当て、アプリでシンボルに注釈を付けるまで待って、どの図形が色を描き、どの図形が消去されるかをマークする方が良いことがわかりました。

00:15:49.000 --> 00:15:53.000
テンプレートのこのワイヤーフレームスタイルは、まさにそれを行うのに役立ちます。

00:15:53.000 --> 00:15:57.000
テンプレートをエクスポートするときに、新しい互換性ピッカーもあります。

00:15:57.000 --> 00:16:02.000
デフォルトでは、最新かつ最高のシンボルを取得し、その多くは動きのために再描画されています。

00:16:02.000 --> 00:16:09.000
しかし、古いプラットフォームをターゲットにしている場合、SFシンボルアプリはそのプラットフォームにより適したテンプレートを提供します。

00:16:09.000 --> 00:16:24.000
たとえば、iOS 15とmacOS Montereyに対応するSFシンボル3をターゲットにしている場合、モーションに使用するレイヤー構造がSFシンボル3で完全にサポートされていなかったため、モーション用に最適化されていないよりシンプルな図面を取得します。

00:16:24.000 --> 00:16:38.000
また、iOS 14とmacOS Big Surに対応するSFシンボル2をターゲットにしている場合は、SFシンボル3で可変テンプレートが導入されたため、自動的に静的テンプレートを取得します。

00:16:38.000 --> 00:16:41.000
カスタムシンボルに注釈を付けるときにも同じ概念が適用されます。

00:16:41.000 --> 00:16:46.000
デフォルトでは、アプリが提供するすべての注釈機能にアクセスできます。

00:16:46.000 --> 00:16:52.000
しかし、特定のプラットフォームをターゲットにするようにシンボルを設定することができ、アプリはシンボルの準備ができていることを確認するのに役立ちます。

00:16:52.000 --> 00:17:05.000
たとえば、SFシンボル3以前を選択した場合、モノクロアノテーションはSFシンボル4までカスタマイズできなかったため、シンボルのモノクロアノテーションを編集できなくなります。

00:17:05.000 --> 00:17:12.000
そして最後に、シンボルをXcode用にエクスポートする準備ができたら、使用するXcodeのバージョンをアプリに伝えるだけです。

00:17:12.000 --> 00:17:22.000
アプリは、エクスポートするのに最適なファイル形式を選択し、古いプラットフォームをターゲットとするアプリにコンパイルされたときにファイルが正しく動作することを確認するのに役立ちます。

00:17:22.000 --> 00:17:28.000
だから、SFシンボルアプリでアニメーションの準備ができているシンボルを作成するのがどれほど簡単で速いかです。

00:17:28.000 --> 00:17:36.000
アニメーションインスペクタ、新しい注釈機能、シンボルコンポーネント、互換性チェックを使用すると、数回クリックするだけです。

00:17:36.000 --> 00:17:39.000
実際には、スピードキュービングを学んだ私の経験によく似ています。

00:17:39.000 --> 00:17:53.000
考慮すべき多くの角度、多くの異なる可動部分があり、管理すべき情報のトンのように思えますが、適切なツールがあれば、その速さに驚かれることでしょう...

00:17:53.000 --> 00:17:54.000
それはすべて一緒に来るだけです。

00:17:54.000 --> 00:17:56.000
見てくれてありがとう。

00:17:56.000 --> 23:59:59.000
♪ ♪

