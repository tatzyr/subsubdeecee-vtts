WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:11.000
イーサン：こんにちは！

00:00:11.000 -> 00:00:15.000
そして、「Swift-DocCで豊富なドキュメントを作成する」へようこそ。

00:00:15.000 -> 00:00:18.000
私はSwift-DocCチームのエンジニア、イーサンです。

00:00:18.000 -> 00:00:31.000
Xcode 15は、Swift-DocCドキュメントにすべての新機能をもたらし、ドキュメントを際立たせるだけでなく、アプリやフレームワークについて読者に教えるためのより効果的なツールを提供します。

00:00:31.000 -> 00:00:40.000
また、Xcode 15の新しいドキュメントプレビューエディタを使用すると、ソースエディタを離れることなくドキュメントを反復できます。

00:00:40.000 -> 00:00:42.000
あなたにそれを見せるのが待ちきれません。

00:00:42.000 -> 00:00:46.000
Swift-DocCの簡単な概要から始めましょう。

00:00:46.000 -> 00:00:58.000
Swift-DocCは、Xcodeに直接統合されたドキュメントコンパイラで、ソースコードと一緒にプロジェクトの豊富なドキュメントを作成して公開することができます。

00:00:58.000 -> 00:01:10.000
直接インソースに書かれたドキュメントコメントとスタンドアロンのMarkdownファイルを組み合わせて、高レベルの概念コンテンツと詳細な技術ドキュメントの両方を作成します。

00:01:10.000 -> 00:01:20.000
このドキュメントは、静的Webホスティングソリューションとすぐに互換性があり、GitHub PagesやNetlifyなどのサービスに簡単に公開できます。

00:01:20.000 -> 00:01:30.000
もちろん、ドキュメントはXcodeの組み込みドキュメントウィンドウにも表示され、クイックヘルプを使用してXcodeのソースエディタに統合されます。

00:01:30.000 -> 00:01:38.000
これは、あなたが書いたドキュメントが、あなたの側で追加の作業なしで、あなたのソースコードにアクセスできる人なら誰でも自動的に利用できることを意味します。

00:01:38.000 -> 00:01:47.000
Xcode 13でのSwift-DocCのリリース以来、Swift-DocCプロジェクトはオープンソース化されており、現在はオープンで開発されています。

00:01:47.000 -> 00:01:59.000
Swiftコミュニティと協力して、Swift、Objective-C、または2つの組み合わせで書かれたアプリとフレームワークの両方のサポートを含む、すべてのプロジェクトを文書化するためのサポートを追加しました。

00:01:59.000 -> 00:02:05.000
Xcode 15は、Swift-DocCドキュメントを書く経験をまったく新しいレベルに引き上げます。

00:02:05.000 -> 00:02:15.000
ドキュメントプレビューエディタは、入力時にドキュメントのレンダリングされたバージョンのリアルタイムビューを提供し、キーストロークごとにフィードバックを提供します。

00:02:15.000 -> 00:02:30.000
また、グリッドベースのレイアウト、ビデオサポート、カスタムページアイコン、さらには完全にカスタムテーマなどのまったく新しいオーサリング機能により、プロジェクトを本当に支持する真にオーダーメイドのドキュメントを作成できます。

00:02:30.000 -> 00:02:35.000
このセッションでは、Swift-DocCのより高度な機能に焦点を当てます。

00:02:35.000 -> 00:02:45.000
したがって、Swift-DocCについて初めて学ぶ場合は、まず「XcodeでDocCドキュメントを見る」と「XcodeでDocCドキュメントを昇格する」を見ることをお勧めします。

00:02:45.000 -> 00:02:57.000
これらの2つのセッションでは、今日のドキュメントを改善するフレームワークを紹介し、新しいプロジェクトに最初のドキュメントを追加するプロセスを案内します。

00:02:57.000 -> 00:03:05.000
今日から、Xcode 15のDocumentation Previewエディタでドキュメントを書くための新しいワークフローを取り上げます。

00:03:05.000 -> 00:03:13.000
新しいSwift-DocC機能を活用して、フレームワークの既存のドキュメントを強化するため、新しいエディタを使用します。

00:03:13.000 -> 00:03:21.000
次に、Webバージョンが既存のWebサイトで自宅で見えるように、ドキュメントのカスタムテーマを作成します。

00:03:21.000 -> 00:03:31.000
最後に、ドキュメントをウェブに公開した後、Xcode 15を搭載したすべてのSwift-DocCウェブサイトに登場するまったく新しいナビゲーション機能を見学します。

00:03:31.000 -> 00:03:34.000
すぐに飛び込みましょう。

00:03:34.000 -> 00:03:41.000
ここ数年、チームメイトと私はSlothCreatorと呼ばれるSwiftパッケージに取り組んできました。

00:03:41.000 -> 00:03:48.000
SlothCreatorは、iOSアプリにインポートし、小さなナマケモノをカタログ化、カスタマイズ、表示するために使用できるフレームワークです。

00:03:48.000 -> 00:03:55.000
SlothCreatorをより多くのiOSアプリで使用したいので、ドキュメントを改善する方法を検討しています。

00:03:55.000 -> 00:03:59.000
Xcode 15で SlothCreator Swiftパッケージを開きました。

00:03:59.000 -> 00:04:02.000
ドキュメントの現状を評価することから始めましょう。

00:04:02.000 -> 00:04:08.000
マウスを製品メニューに移動し、[ドキュメントのビルド]を選択します。

00:04:08.000 -> 00:04:15.000
Xcodeは、そのドキュメントと一緒に私のプロジェクトを構築し、ドキュメントウィンドウを開きます。

00:04:15.000 -> 00:04:22.000
これは、Swift-DocC専用のドキュメントを書いていなくても、自分のプロジェクトで試すことができるものです。

00:04:22.000 -> 00:04:34.000
Swift-DocCは、あなたが書いたかもしれないドキュメントのコメントを含め、プロジェクト内の関連するAPIのページを自動的に作成するので、ドキュメントがすぐに使えることに驚くかもしれません。

00:04:34.000 -> 00:04:50.000
さらに良いことに、ビルドドキュメントを選択すると、Xcodeはプロジェクトのすべての依存関係のドキュメントも生成するため、たとえば SlothCreatorなどのサードパーティのライブラリに依存する場合、これらも表示されます。

00:04:50.000 -> 00:04:53.000
SlothCreatorのトップレベルのドキュメントページです。

00:04:53.000 -> 00:04:59.000
それは要約文から始まり、フレームワークが何であるかの概要から始まります。

00:04:59.000 -> 00:05:02.000
トピックセクションまで少しページを下にスクロールします。

00:05:02.000 -> 00:05:08.000
トピックは、ドキュメントのさまざまなページを論理グループに整理するために使用されます。

00:05:08.000 -> 00:05:14.000
まず、フレームワークへの新規参入者のための入門ドキュメントを含むEssentialsがあります。

00:05:14.000 -> 00:05:21.000
次に、ナマケモノの作成、ナマケモノの世話や餌付けなどに役立つシンボルを含むグループがあります。

00:05:21.000 -> 00:05:28.000
よく整理されたトピックグループは、プロジェクトの発見可能でアクセス可能なドキュメントを作成するための鍵です。

00:05:28.000 -> 00:05:38.000
読者がドキュメントを簡単に閲覧するのに役立つ高度なテクニックについて学ぶために、「Swift-DocCコンテンツの発見可能性を向上させる」を見ることをお勧めします。

00:05:38.000 -> 00:05:41.000
ナマケモノ構造のドキュメントを開きましょう。

00:05:41.000 -> 00:05:45.000
私は今それをクリックします。

00:05:45.000 -> 00:05:58.000
ナマケモノは、関連するページへのインラインリンク、私が始めるためのコード例、および関連するシンボルを発見するのに役立つよく整理されたトピックグループを含む良い概要で本当によく文書化されています。

00:05:58.000 -> 00:06:02.000
戻るボタンを使用して、 SlothCreatorのトップレベルのページに戻ります。

00:06:02.000 -> 00:06:04.000
そして、私はページを下にスクロールし続けます。

00:06:04.000 -> 00:06:07.000
私はここで物事がどのように整理されているかに本当に満足しています。

00:06:07.000 -> 00:06:14.000
しかし、ページの一番下には、実際に今まで見たことのないシンボル、SwiftUIモジュールが表示されています。

00:06:14.000 -> 00:06:21.000
さて、このシンボルは、Xcode 15の新しいSwift-DocC機能、拡張機能のサポートのために表示されていることがわかりました。

00:06:21.000 -> 00:06:27.000
Xcode 15では、他のフレームワークに属するタイプに対して行う拡張を文書化できるようになりました。

00:06:27.000 -> 00:06:36.000
拡張機能は、元のソースコードにアクセスできない可能性のあるタイプに機能を追加できる強力なSwift言語機能です。

00:06:36.000 -> 00:06:42.000
たとえば、SwiftUIのViewプロトコルを拡張して、アプリの追加機能を含めることができます。

00:06:42.000 -> 00:06:47.000
これで、これらの拡張シンボルをアプリやフレームワークの残りの部分と一緒に文書化できます。

00:06:47.000 -> 00:06:56.000
この新機能は、コミュニティの貢献によって完全に推進され、Swift-DocCとSwiftコンパイラの両方で調整された変更が含まれていました。

00:06:56.000 -> 00:07:01.000
SlothCreatorのドキュメントを改善するために、ここでそれをどのように活用できるか見てみましょう。

00:07:01.000 -> 00:07:05.000
今すぐSwiftUI拡張モジュールをクリックします。

00:07:05.000 -> 00:07:11.000
SlothCreatorはSwiftUIの画像構造を拡張したので、ここに拡張機能として表示されています。

00:07:11.000 -> 00:07:17.000
画像ページを開くと、追加された初期化子が表示されます。

00:07:17.000 -> 00:07:25.000
この初期化子のドキュメントは基本が正しいですが、先ほど見たナマケモノ構造と同じ品質ではないようです。

00:07:25.000 -> 00:07:27.000
私はそれを改善したい。

00:07:27.000 -> 00:07:36.000
マウスをプロジェクトナビゲーターに移動し、ImageExtensionsファイルを選択して、拡張機能を含むSwiftファイルを開きます。

00:07:36.000 -> 00:07:40.000
そして、プロジェクトナビゲーターを閉じます。

00:07:40.000 -> 00:07:46.000
これがナマケモノベースの画像初期化子の宣言です。

00:07:46.000 -> 00:07:54.000
宣言の真上には、先頭の3つのスラッシュで定義されたシンボルのドキュメントコメントがあります。

00:07:54.000 -> 00:08:05.000
この初期化子にいくつかのドキュメントを追加したいのですが、Xcode 15でドキュメントを書く最善の方法は、新しいドキュメントプレビューエディタです。

00:08:05.000 -> 00:08:13.000
ドキュメンテーションプレビューアシスタントエディタを有効にするには、まずエディタオプションメニューを選択します。

00:08:13.000 -> 00:08:16.000
次に、アシスタント項目を選択します。

00:08:16.000 -> 00:08:21.000
アシスタントエディターのジャンプバーをクリックして、アシスタントモードを選択します。

00:08:21.000 -> 00:08:25.000
最後に、ドキュメントプレビューを選択します。

00:08:25.000 -> 00:08:27.000
そして、そこにあります。

00:08:27.000 -> 00:08:35.000
ドキュメントプレビューは、Swiftソースファイル、Objective-Cヘッダーファイル、およびドキュメントMarkdownファイル間を移動する際にアクティブのままになります。

00:08:35.000 -> 00:08:51.000
SlothCreatorで試してみましょう。

00:08:51.000 -> 00:08:52.000
すごい。

00:08:52.000 -> 00:08:56.000
ディスカッションセクションを作成することから始めます。

00:08:56.000 -> 00:09:02.000
Swift-DocCは、ドキュメントコメントの最初の行をページの要約文または要約文として使用します。

00:09:02.000 -> 00:09:05.000
次の段落はディスカッションセクションとして使用されます。

00:09:05.000 -> 00:09:15.000
私はあなたにそれを書きます...「この初期化子を使用して、特定のナマケモノの画像表現を表示します。」

00:09:15.000 -> 00:09:22.000
入力すると、ドキュメントのプレビューがリアルタイムで更新され、シンボルのドキュメントのレンダリングされたバージョンが表示されます。

00:09:22.000 -> 00:09:27.000
次に、この初期化子を実際にどのように使用できるかを示すコード例を追加したいと思います。

00:09:27.000 -> 00:09:34.000
Markdownのフェンスで囲まれたコードブロック構文を使用してコードブロックを作成することから始めます。

00:09:34.000 -> 00:09:40.000
シンタックスハイライトに使用するソース言語として「スウィフト」を指定します。

00:09:40.000 -> 00:09:45.000
そして、私のコード例を貼り付けます。

00:09:45.000 -> 00:09:50.000
この例は、氷のナマケモノの画像をレンダリングするSwiftUIビューを作成する方法を示しています。

00:09:50.000 -> 00:09:57.000
そして、この例にはUIが含まれているので、結果のビューがどのように見えるかのスクリーンショットをここに含めるのが良いと思います。

00:09:57.000 -> 00:10:01.000
私はすでにデスクトップに1つ用意しました。

00:10:01.000 -> 00:10:08.000
しかし、実際に私のドキュメントのスクリーンショットを使用するには、まず SlothCreatorのドキュメントカタログに画像を追加する必要があります。

00:10:08.000 -> 00:10:20.000
ドキュメントカタログは、Markdownファイル、画像、ビデオの形式で追加のドキュメントコンテンツを提供するために、SwiftパッケージまたはXcodeプロジェクトに追加できるファイルのディレクトリです。

00:10:20.000 -> 00:10:24.000
これは、より長いフォームの記事やチュートリアルを置く場所です。

00:10:24.000 -> 00:10:29.000
追加した画像やビデオは、ドキュメントのコメントから参照できます。

00:10:29.000 -> 00:10:43.000
プロジェクトナビゲーターを展開すると、SlothCreatorがすでにドキュメントカタログを持っていることがわかりますので、スクリーンショットのライトモードとダークモードの両方のバージョンをドラッグするだけです。

00:10:43.000 -> 00:10:49.000
私はドキュメントカタログの好きな場所に画像を配置することができ、Swift-DocCはそれらを見つけるでしょう。

00:10:49.000 -> 00:10:56.000
これにより、カタログの整理方法の柔軟性が得られ、構造化は私と私のチームにとって最も理にかなっています。

00:10:56.000 -> 00:11:02.000
次に、ページに画像を含めたい場合は、その画像をベースファイル名で参照するだけです。

00:11:02.000 -> 00:11:10.000
また、ドキュメントカタログに含まれる画像やその他のファイルは、ドキュメント専用であることに注意することも重要です。

00:11:10.000 -> 00:11:16.000
たとえば、アプリに画像を含める場合は、アセットカタログを使用します。

00:11:16.000 -> 00:11:19.000
これで、ドキュメントにスクリーンショットを追加する準備が整いました。

00:11:19.000 -> 00:11:26.000
Markdownの画像構文を使用し、代替テキストとしての説明と画像のファイル名の両方を提供します。

00:11:26.000 -> 00:11:29.000
ここでベースファイル名を使用したばかりであることに注意してください。

00:11:29.000 -> 00:11:34.000
DocCは、適切なライトモードとダークモードのバージョンを自動的に把握します。

00:11:34.000 -> 00:11:39.000
いくつかの結論テキストでドキュメントを仕上げます。

00:11:39.000 -> 00:11:41.000
いいね。

00:11:41.000 -> 00:11:48.000
ドキュメントプレビューエディタは、このシンボルの広範なドキュメントを作成するのを簡単で楽しくしました。

00:11:48.000 -> 00:11:54.000
次に、トップレベルのページのトピックグループに入れて、この方法をよりよく整理したいと思います。

00:11:54.000 -> 00:12:01.000
プロジェクトナビゲーターを起動し、ドキュメントカタログで「SlothCreator」Markdownファイルを選択します。

00:12:01.000 -> 00:12:07.000
ドキュメントプレビューエディタには、SlothCreatorのトップレベルページのレンダリングされたコンテンツが表示されるようになりました。

00:12:07.000 -> 00:12:13.000
プレビューエディタを使用して、DocCの構文がどのように機能するかをよりよく理解する方法が本当に好きです。

00:12:13.000 -> 00:12:20.000
たとえば、トピックグループは、第2レベルのトピック見出しの下の第3レベルの見出しによって定義されていることがわかります。

00:12:20.000 -> 00:12:27.000
ページをトピックグループに配置するには、これらの第3レベルの見出しの1つの下にリスト項目を作成し、ページにリンクします。

00:12:27.000 -> 00:12:31.000
拡張されたSwiftUIイメージタイプのために今これをやります。

00:12:31.000 -> 00:12:40.000
画像拡張機能はユーザーインターフェイスにナマケモノを表示するために使用されるため、ナマケモノビュートピックグループのナマケモノのレンダリングに関連する他のシンボルに属していると思います。

00:12:40.000 -> 00:12:42.000
そこにリンクします。

00:12:42.000 -> 00:12:48.000
コードの完了は、タイプへの参照を提供することで、私を助けます。

00:12:48.000 -> 00:12:55.000
素晴らしい、今、SlothCreatorの画像拡張機能のドキュメントは十分に文書化され、よく整理されています。

00:12:55.000 -> 00:13:04.000
SlothCreatorのドキュメントを最初に公開して以来、フレームワークの基礎のいくつかを示すサンプルコードプロジェクトを求めるフィードバックを受け取りました。

00:13:04.000 -> 00:13:10.000
これに対処するために、SlothCreatorに依存するSlothyという小さなアプリをまとめました。

00:13:10.000 -> 00:13:18.000
私の同僚はすでに、新しいSlothyサンプルにリンクするSlothCreatorのメインドキュメントに含めたい記事の大まかなドラフトをまとめました。

00:13:18.000 -> 00:13:20.000
調べてみましょう。

00:13:20.000 -> 00:13:36.000
SlothCreatorのドキュメントカタログに記事のラフドラフトを追加することから始めます。

00:13:36.000 -> 00:13:39.000
ここのコンテンツはすでに本当に素晴らしいです。

00:13:39.000 -> 00:13:47.000
サンプルアプリのさまざまな機能を案内し、アプリのスクリーンショットや、サンプルをダウンロードできるリポジトリへのリンクも含まれています。

00:13:47.000 -> 00:13:49.000
しかし、私はそれを改善できると思います。

00:13:49.000 -> 00:13:53.000
幸いなことに、いくつかの新しいSwift-DocC機能がこれを可能にします。

00:13:53.000 -> 00:13:57.000
Swift-DocCのオーサリング構文は、Markdownの上に構築されています。

00:13:57.000 -> 00:14:06.000
Markdownに精通している場合は、自宅でリンク、画像、太字とイタリックのテキスト、さらには表でコンテンツをフォーマットする必要があります。

00:14:06.000 -> 00:14:17.000
Swift-DocCは、ドキュメントの専用機能を活用できるディレクティブを使用して、その基本Markdown構文を拡張します。

00:14:17.000 -> 00:14:25.000
私は今、これらのディレクティブのいくつかを使用して、Slothyサンプルコードの記事を磨くつもりですが、これらのディレクティブは創造的に使用することを意図していることに注意してください。

00:14:25.000 -> 00:14:30.000
それらを使用するための1つの正しい方法や、それらを使用するための1つの正しい種類のページさえありません。

00:14:30.000 -> 00:14:39.000
プロジェクトのドキュメントをわかりやすく、より魅力的で、よりエキサイティングにするために、これらのディレクティブを独自の方法で使用する方法を考えてください。

00:14:39.000 -> 00:14:46.000
記事のレイアウトに飛び込んで編集する前に、その具体的な問題を特定することから始めたいと思います。

00:14:46.000 -> 00:14:52.000
そうすれば、これらの新しい指令のいくつかを採用するにつれて、実際に改善していると確信できます。

00:14:52.000 -> 00:14:55.000
私にとって最初に際立っているのは、際立っていないことです。

00:14:55.000 -> 00:15:04.000
このページは、私の読者にとって特に興味深いと思われるサンプルコードがあるにもかかわらず、他の記事と同じスタイルです。

00:15:04.000 -> 00:15:11.000
そして、その点で、この記事が行っている最も重要なことは、そのサンプルコードのソースリポジトリにリンクすることです。

00:15:11.000 -> 00:15:17.000
それにもかかわらず、サンプルコードリンクは識別して発見するのが非常に困難です。

00:15:17.000 -> 00:15:20.000
記事の本文内容に移ります。

00:15:20.000 -> 00:15:24.000
このコンテンツは、2つの画像と段落のペアを中心に構築されています。

00:15:24.000 -> 00:15:28.000
各段落には、説明している関連する画像があります。

00:15:28.000 -> 00:15:30.000
ここには2つの問題があります。

00:15:30.000 -> 00:15:34.000
まず、画像は段落と明確に関連付けられていません。

00:15:34.000 -> 00:15:38.000
そして第二に、画像はあまりにも多くのスペースを奪っています。

00:15:38.000 -> 00:15:45.000
ここの画像は、それぞれの段落にアクセントを付けることを目的としていますが、それ自体はあまり面白くありません。

00:15:45.000 -> 00:15:50.000
最後に、ページの下部には、 SlothCreatorのローカリゼーションサポートを説明するセクションがあります。

00:15:50.000 -> 00:15:55.000
ここでは、3つの異なる言語で同じスクリーンショットの3つの異なるバージョンがあります。

00:15:55.000 -> 00:16:05.000
しかし、それらは垂直に積み重ねられているだけなので、両方ともローカリゼーション段落とのすべての関連性を失い、視覚的にあまりにも多くのスペースを奪っています。

00:16:05.000 -> 00:16:10.000
Swift-DocCを使ってこれら4つの問題を解決する方法を見てみましょう。

00:16:10.000 -> 00:16:13.000
記事の本文内容から始めましょう。

00:16:13.000 -> 00:16:18.000
画像と段落のペアの正しい解決策は、それらをグリッドに配置することだと思います。

00:16:18.000 -> 00:16:25.000
これにより、画像よりも段落の重要性がより強調され、それぞれの段落に画像を添付することができます。

00:16:25.000 -> 00:16:30.000
Swift-DocCのグリッドは、柔軟な行と列として定義されています。

00:16:30.000 -> 00:16:35.000
2つの列を含む行を定義することから始めます。

00:16:35.000 -> 00:16:44.000
次に、段落を最初の列に、画像を2番目の列に配置します。

00:16:44.000 -> 00:16:53.000
画像が関連する段落に添付されるようになったのは気に入っていますが、この場合、段落は画像よりも優先されるべきだと思います。

00:16:53.000 -> 00:16:56.000
段落を含む列のサイズを大きくしましょう。

00:16:56.000 -> 00:17:03.000
最初の列にsizeパラメータを追加し、デフォルトの値よりも大きい値を指定することで、これを行うことができます。

00:17:03.000 -> 00:17:07.000
サイズパラメータは、特定の列のスパンを設定するために使用されます。

00:17:07.000 -> 00:17:13.000
3つのサイズを提供してみます。

00:17:13.000 -> 00:17:18.000
私の最初の列は現在、4列のグリッドの3列にまたがっています。

00:17:18.000 -> 00:17:20.000
それは少し大きすぎるようです。

00:17:20.000 -> 00:17:25.000
2つのサイズはいかがですか？

00:17:25.000 -> 00:17:27.000
テキストと画像のバランスは素晴らしく見えます。

00:17:27.000 -> 00:17:29.000
完璧。

00:17:29.000 -> 00:17:39.000
2番目の段落と画像のペアで同じ設定を試してみましょう。

00:17:39.000 -> 00:17:43.000
これは間違いなく改善ですが、ページは少しバランスが崩れています。

00:17:43.000 -> 00:17:50.000
画像と段落をひっくり返してみましょう。

00:17:50.000 -> 00:17:51.000
素敵。

00:17:51.000 -> 00:17:54.000
この記事は今、本当に集まっています。

00:17:54.000 -> 00:18:02.000
ローカリゼーションセクションで特定した問題は、画像が垂直スペースを取りすぎて、コンテキストが失われていることです。

00:18:02.000 -> 00:18:09.000
タブナビゲーターはここで完璧なソリューションであり、複数の要素を1つにまとめることができます。

00:18:09.000 -> 00:18:12.000
試してみましょう。

00:18:12.000 -> 00:18:18.000
3つのタブを持つタブナビゲーターの初期構造を作成します。

00:18:18.000 -> 00:18:27.000
タブナビゲータは、任意の数の子タブディレクティブを含むTabNavigatorディレクティブによって定義されます。

00:18:27.000 -> 00:18:31.000
各タブは、その名前をパラメータとして提供します。

00:18:31.000 -> 00:18:43.000
3つの画像をそれぞれのタブ内に配置します。

00:18:43.000 -> 00:18:53.000
今、私の読者は各タブをクリックして、興味のあるスクリーンショットにアクセスできます。

00:18:53.000 -> 00:19:00.000
物事をさらに一歩進めるために、読者を本当に惹きつけ、サンプルに興奮させる簡単なビデオを追加したいと思います。

00:19:00.000 -> 00:19:09.000
Swift-DocCには、私が今挿入するこれのためのビデオディレクティブがあります。

00:19:09.000 -> 00:19:19.000
ビデオが再生される前に表示されるポスター画像、ビデオ自体、および説明を提供します。

00:19:19.000 -> 00:19:20.000
いいね。

00:19:20.000 -> 00:19:23.000
紹介セクションに移りましょう。

00:19:23.000 -> 00:19:30.000
私が最初に気づいた問題の1つは、サンプルのソースコードリポジトリにアクセスするためのリンクを見つけるのがどれほど難しいかです。

00:19:30.000 -> 00:19:35.000
Swift-DocCには、このために正確に設計された行動を促すディレクティブがあります。

00:19:35.000 -> 00:19:40.000
まず、ページの上部にメタデータコンテナディレクティブを追加します。

00:19:40.000 -> 00:19:45.000
メタデータディレクティブは、ページに直接レンダリングされない追加情報を指定するために使用されます。

00:19:45.000 -> 00:19:53.000
この場合、ページにアクションの呼びかけを添付したいと思います。

00:19:53.000 -> 00:19:57.000
アクションの呼び出しに宛先URLと目的を提供しました。

00:19:57.000 -> 00:19:59.000
私が「リンク」の目的を使用したことに注目してください。

00:19:59.000 -> 00:20:10.000
あるいは、このリンクが直接ダウンロードにつながる場合は「ダウンロード」を使用できますが、この場合はソースリポジトリにリンクしているので、「リンク」がより良い選択です。

00:20:10.000 -> 00:20:16.000
最後に、この記事をSlothCreatorのドキュメントの他の記事とは異なるものとして目立たせたい。

00:20:16.000 -> 00:20:21.000
読者がこのページにサンプルコードが含まれていることを見逃さないようにしたい。

00:20:21.000 -> 00:20:26.000
Swift-DocCは、サンプルコードを含む記事を特別にサポートしていることが判明しました。

00:20:26.000 -> 00:20:33.000
「サンプルコード」引数を持つPageKindディレクティブを提供することで、私のページの種類がサンプルコードであることを指定します。

00:20:33.000 -> 00:20:41.000
レンダリングされたページには、「サンプルコード」のタイトル見出しと、サンプルコード記事として目立つようにカーリーブレースページアイコンが追加されました。

00:20:41.000 -> 00:20:48.000
今日、Swift-DocCには、PageKindディレクティブでサポートされている「記事」と「サンプルコード」の2つのサポートされている値しか持ってません。

00:20:48.000 -> 00:21:05.000
興味深い他のデフォルトページの種類について聞きたいです。Swift-DocCはオープンソースプロジェクトであるため、Swiftフォーラムは、この種のことや、DocCがドキュメントのニーズをよりよく満たす方法についてのフィードバックやアイデアについて話し合うのに最適な場所です。

00:21:05.000 -> 00:21:11.000
アプリで SlothCreatorを使用することに興味がある開発者は、この記事に本当に興奮すると思います。

00:21:11.000 -> 00:21:13.000
それは魅力的で、思慮深く、楽しいです。

00:21:13.000 -> 00:21:21.000
私は彼らがそれを見つけることを確認したいので、SlothCreatorのトップレベルのページに戻って、それにリンクする目立つ場所を見つけましょう。

00:21:21.000 -> 00:21:24.000
まず、新しい記事をトピックグループにキュレーションします。

00:21:24.000 -> 00:21:40.000
この場合、SlothCreatorフレームワークへの新規参入者がSlothyサンプルに興味を持つことを期待しているので、Essentialsグループが最も適切だと思います。

00:21:40.000 -> 00:21:47.000
これは良いスタートですが、私は物事をさらに一歩進めて、ページのより一般的なトピックセクションの上にこの記事を特集したいと思います。

00:21:47.000 -> 00:21:50.000
リンクディレクティブはこれに最適です。

00:21:50.000 -> 00:21:58.000
注目のセクションを作成し、リンクディレクティブを挿入します。

00:21:58.000 -> 00:22:01.000
リンクはページを強調表示するのに最適な方法です。

00:22:01.000 -> 00:22:05.000
カード画像とページの説明をより高度な方法で含めるために使用できます。

00:22:05.000 -> 00:22:14.000
リンクディレクティブは、トピックグループのように、リンクのレンダリング方法を定義するビジュアルスタイルパラメータと、その本文内のリンクのリストを受け入れます。

00:22:14.000 -> 00:22:24.000
Slothyのサンプルにリンクします。

00:22:24.000 -> 00:22:38.000
リンクは、デフォルトのトピックセクションのようにレンダリングされる基本的なリストから、詳細なグリッドまで、多くのビジュアルスタイルをサポートしています。

00:22:38.000 -> 00:22:44.000
グリッドスタイルは素晴らしいと思いますが、ここにSlothyサンプルを表すカスタム画像を含めたいと思います。

00:22:44.000 -> 00:22:46.000
SlothyのMarkdownに戻りましょう。

00:22:46.000 -> 00:22:54.000
Slothyの記事をグリッドベースのリンクセクションでのプレゼンテーションに最適なものにするには、メタデータにページ画像を提供する必要があります。

00:22:54.000 -> 00:23:01.000
今それをやりましょう。

00:23:01.000 -> 00:23:11.000
Slothyの記事がカードとしてレンダリングされるたびにこの画像が使用されるように「カード」の目的を指定し、画像のソースと説明を代替テキストとして提供します。

00:23:11.000 -> 00:23:20.000
SlothCreatorのトップレベルのページに戻ると、Slothyはカスタムページ画像でレンダリングされるようになりました。

00:23:20.000 -> 00:23:31.000
「ナマケモノを使い始める」の記事も特集します。

00:23:31.000 -> 00:23:36.000
最後の仕上げとして、トップレベルのページにも追加のメタデータを追加します。

00:23:36.000 -> 00:23:40.000
以前と同じようにメタデータディレクティブを作成することから始めます。

00:23:40.000 -> 00:23:48.000
そして、ページ画像を提供します。

00:23:48.000 -> 00:23:52.000
今回は「カード」ではなく「アイコン」の目的を指定します。

00:23:52.000 -> 00:24:00.000
したがって、この画像は、ページのナビゲーションサイドバーや紹介セクションなど、ページのアイコンがレンダリングされる場所ならどこでも使用されます。

00:24:00.000 -> 00:24:09.000
最後に、カスタムページの色を設定します。

00:24:09.000 -> 00:24:23.000
デフォルトでは、トップレベルのページは青色を使用しますが、Swift-DocCは黄色、紫、オレンジなどの多くの標準標準色を提供します。

00:24:23.000 -> 00:24:35.000
SlothCreatorは一般的にグリーンをアクセントカラーとして使用しているので、ここでも使用することで、よりまとまりのある体験を生み出すのが良いと思います。

00:24:35.000 -> 00:24:36.000
うわー。

00:24:36.000 -> 00:24:41.000
SlothCreatorのドキュメントは、わずか短時間で長い道のりを歩みました。

00:24:41.000 -> 00:24:51.000
行と列、タブナビゲーター、ビデオなどのレイアウトディレクティブを使用して、このサンプルコード記事のフローをより良くし、読者を引き付けることができました。

00:24:51.000 -> 00:24:58.000
CallToActionやPageKindなどのメタデータディレクティブを使用して、余分なレベルの磨きを加えました。

00:24:58.000 -> 00:25:08.000
そして、リンクディレクティブで注目のコンテンツを高め、PageColorとPageImageディレクティブでトップレベルのページにブランディングを追加することで、すべてを結びつけました。

00:25:08.000 -> 00:25:12.000
SlothCreatorの更新されたドキュメントを共有できることを本当に楽しみにしています。

00:25:12.000 -> 00:25:22.000
しかし、その新しいリリースをウェブに公開する前に、カスタムテーマで SlothCreatorのドキュメントのオンラインプレゼンテーションを最適化しましょう。

00:25:22.000 -> 00:25:26.000
SlothCreatorのドキュメントは、より大きな製品ウェブサイトの一部として公開されています。

00:25:26.000 -> 00:25:34.000
ドキュメントサイトが同じカラーパレットとフォントのセットを使用して製品サイトと視覚的に一致していることを確認したい。

00:25:34.000 -> 00:25:39.000
Swift-DocCのカスタムテーマでそれを達成する方法を見てみましょう。

00:25:39.000 -> 00:25:50.000
Swift-DocCは、ドキュメントサイトの特定の展開で、色、境界線、アイコン、フォントなどの視覚的なスタイリングがどのようにレンダリングされるかを完全にカスタマイズすることをサポートしています。

00:25:50.000 -> 00:26:01.000
これらのカスタマイズは、ドキュメントカタログに含める特別なJSONファイルで行われ、ドキュメントサイトを他のオンラインプレゼンスとよりよく統合することができます。

00:26:01.000 -> 00:26:08.000
Swift-DocCのテーマツールを使用して、特定の企業スタイルに合わせたり、マーケティングサイトや個人ブログによりよく適合したりすることができます。

00:26:08.000 -> 00:26:15.000
ただし、テーマ化は、作成したいすべてのドキュメントのカスタマイズに適したツールではありません。

00:26:15.000 -> 00:26:26.000
たとえば、 SlothCreator のサンプル コード ページで行ったように、特定のページの外観をカスタマイズすることに興味がある場合は、カスタム テーマではなく、そのページでディレクティブを使用する必要があります。

00:26:26.000 -> 00:26:30.000
テーマのカスタマイズはサイト全体であり、ページ固有ではありません。

00:26:30.000 -> 00:26:36.000
また、Swift-DocCのテーマは意図的に展開に固有であることに注意することも重要です。

00:26:36.000 -> 00:26:46.000
したがって、Xcodeでドキュメントを開くと、ドキュメントは引き続きXcodeテーマでレンダリングされ、そこに提示された残りのすべてのドキュメントと一緒に見栄えが良くなります。

00:26:46.000 -> 00:26:55.000
これは、Xcodeでの読書体験にどのように影響するかを心配することなく、サイトのWebプレゼンスにカスタムテーマを集中できることを意味します。

00:26:55.000 -> 00:27:04.000
しかし、それはまた、カスタマイズをXcodeとウェブの両方に表示したい場合は、ディレクティブを使用する方が良いことを意味します。

00:27:04.000 -> 00:27:07.000
SlothCreatorのカスタムテーマをチェックしてみましょう。

00:27:07.000 -> 00:27:19.000
Swift-DocCのテーマは、プロジェクトのドキュメントカタログに配置する特定の名前「theme-settings.json」のJSONファイルによって定義されます。

00:27:19.000 -> 00:27:23.000
テーマ設定ファイルで行うカスタマイズにはさまざまな種類があります。

00:27:23.000 -> 00:27:28.000
SlothCreatorのために、私はサイトの色とフォントをカスタマイズするつもりです。

00:27:28.000 -> 00:27:35.000
これらのカスタマイズは、それぞれ「カラー」セクションと「タイポグラフィ」セクションに配置されます。

00:27:35.000 -> 00:27:40.000
SlothCreatorは、マーケティング資料全体で特定の色合いの緑色を使用しています。

00:27:40.000 -> 00:27:45.000
私はすでにPageColorディレクティブを使用して、SlothCreatorのトップレベルのページカラーを緑色に設定しました。

00:27:45.000 -> 00:27:52.000
これで、緑の特定の色合いを「標準緑」の色変数を使用して、私が望むものに設定することができます。

00:27:52.000 -> 00:28:02.000
そして、SlothCreatorは深刻なナマケモノの専門家を対象としたかなり深刻なフレームワークであるため、オンラインドキュメントでセリフフォントを使用したいと思います。

00:28:02.000 -> 00:28:07.000
「Html-font」タイポグラフィ変数でそれを行うことができます。

00:28:07.000 -> 00:28:12.000
もちろん、これらのカスタマイズは、Swift-DocCテーマで可能なことの始まりにすぎません。

00:28:12.000 -> 00:28:18.000
さらに進めることに興味があるなら、Swift-DocCのドキュメントを読むことをお勧めします。

00:28:18.000 -> 00:28:29.000
「Theme-settings.json」ファイルを設定したので、ドキュメントカタログに追加します。

00:28:29.000 -> 00:28:42.000
SlothCreatorのソースコントロールリポジトリは、新しいコミットをプッシュするたびに「xcodebuild」コマンドラインツールを使用して SlothCreatorのドキュメントを構築および展開する継続的な統合ですでに構成されています。

00:28:42.000 -> 00:28:48.000
これは、ドキュメントがフレームワークの最新の変更で常に最新であることを保証する優れたワークフローです。

00:28:48.000 -> 00:28:55.000
独自のプロジェクトに同様のワークフローを設定することに興味がある場合は、XcodeのドキュメントのSwift-DocCセクションをチェックしてください。

00:28:55.000 -> 00:28:59.000
私たちがまとめたこれらの変更を公開することに本当に興奮しています。

00:28:59.000 -> 00:29:03.000
ウェブサイトの新しい展開をトリガーするために、今すぐコミットしてプッシュしましょう。

00:29:03.000 -> 00:29:10.000
Xcodeウィンドウの左上隅にマウスを移動し、ソースコントロールナビゲーターをアクティブにします。

00:29:10.000 -> 00:29:27.000
すべての変更をステージングし、コミットメッセージを追加し、コミットし、プッシュします。

00:29:27.000 -> 00:29:29.000
今、私はSlothCreatorのウェブサイトを開きます。

00:29:29.000 -> 00:29:32.000
SlothCreatorの製品サイトのホームページはこちらです。

00:29:32.000 -> 00:29:36.000
SlothCreatorのブランディングに合った特定のフォントと色を使用します。

00:29:36.000 -> 00:29:40.000
「ドキュメントを読む」ボタンをクリックします。

00:29:40.000 -> 00:29:43.000
そして、これがSlothCreatorのドキュメントです。

00:29:43.000 -> 00:29:48.000
ウェブサイトのバージョンには、独特のフォントと緑の色合いで、私たちが適用したカスタムテーマがあります。

00:29:48.000 -> 00:29:55.000
また、私たちが設定したカスタムアイコンと、真新しいSlothyサンプルコード記事を含む魅力的な特集セクションもあります。

00:29:55.000 -> 00:29:58.000
「サンプルコードを見る」リンクで開きます。

00:29:58.000 -> 00:30:01.000
この記事がどうなったかに本当に満足しています。

00:30:01.000 -> 00:30:11.000
そしてもちろん、Swift-DocCのウェブサイトには引き続き優れたナビゲーションサイドバーが付属しているため、 SlothCreatorのトピックセクションで整理したページを簡単にナビゲートできます。

00:30:11.000 -> 00:30:20.000
上部にはEssentialsグループがあり、Slothyサンプルコード記事と「Getting Started」記事とSloth structを配置しました。

00:30:20.000 -> 00:30:25.000
左側の開示三角形をクリックして、ナマケモノ構造体を展開します。

00:30:25.000 -> 00:30:31.000
これにより、構造体の子を閲覧することができ、もちろん、これらのシンボルはトピックグループでもよく整理されています。

00:30:31.000 -> 00:30:34.000
先ほど文書化した画像初期化子を確認しましょう。

00:30:34.000 -> 00:30:42.000
ナマケモノビューセクションまでスクロールし、画像拡張シンボルを展開し、初期化子をクリックします。

00:30:42.000 -> 00:30:44.000
そして、私たちはここにいます。

00:30:44.000 -> 00:30:54.000
ナビゲーションサイドバーが、ドキュメントの著者として、私のプロジェクトのAPIを実際にガイドする開発者のための直感的なブラウジング体験を作成する方法が大好きです。

00:30:54.000 -> 00:31:02.000
しかし、時にはドキュメントリーダーとして、私は私が探しているページを正確に知っていて、それにまっすぐにジャンプする簡単な方法が必要です。

00:31:02.000 -> 00:31:10.000
Xcode 15で構築されたSwift-DocCウェブサイトには、ページ間を簡単にジャンプできる新しいクイックナビゲーション機能があります。

00:31:10.000 -> 00:31:17.000
Swift-DocCクイックナビゲーションは、すべてのSwift-DocCウェブサイトに持ち込むことに本当に興奮しているもう一つのコミュニティ主導の取り組みです。

00:31:17.000 -> 00:31:25.000
XcodeのOpen Quickly機能と同様に、キーボードショートカットを有効にして名前を入力するだけで、ページに直接ジャンプできます。

00:31:25.000 -> 00:31:26.000
試してみましょう。

00:31:26.000 -> 00:31:32.000
Shift-Command-Oを押して、クイックナビゲーションを有効にします。

00:31:32.000 -> 00:31:38.000
SlothCreatorのドキュメントのすべてのページをすぐにフィルタリングし始めることができます。

00:31:38.000 -> 00:31:46.000
たとえば、入門記事を探している場合は、「start」と入力するだけです。

00:31:46.000 -> 00:31:47.000
そして、そこにあります。

00:31:47.000 -> 00:31:54.000
右側にドキュメントのプレビューもあります。

00:31:54.000 -> 00:31:58.000
Enterキーを押してページに移動します。

00:31:58.000 -> 00:32:02.000
しかし、多分私は異なるナマケモノの力が何であるかを思い出させる必要があります。

00:32:02.000 -> 00:32:09.000
Shift-Command-Oをもう一度押して、「power」と入力します。

00:32:09.000 -> 00:32:13.000
これがPowerPicker、そして「パワー」プロパティです。

00:32:13.000 -> 00:32:16.000
ああ、ここにあります、パワー列挙型です。

00:32:16.000 -> 00:32:23.000
今回は「もっと見る」リンクでページを開きます。

00:32:23.000 -> 00:32:27.000
そして、ちょうどそのように、私は利用可能なすべてのナマケモノの力について読むことができます。

00:32:27.000 -> 00:32:36.000
新しいクイックナビゲーションポップオーバーと既存のナビゲーションサイドバーの両方で、Swift-DocCはドキュメントの閲覧を本当に素晴らしい経験にします。

00:32:36.000 -> 00:32:43.000
Xcode 15のSwift-DocCには、真にユニークなドキュメントWebサイトを作成するための強力な新しいツールが付属しています。

00:32:43.000 -> 00:32:46.000
新しいドキュメンテーションプレビューエディタを試してみてください。

00:32:46.000 -> 00:32:51.000
さまざまなページレイアウトを探索し、それらがリアルタイムでどのようにレンダリングされるかを知ることができます。

00:32:51.000 -> 00:33:00.000
行と列、リンク、PageImageなどの新しいディレクティブを使用すると、プロジェクトを際立たせ、擁護するドキュメントを作成できます。

00:33:00.000 -> 00:33:09.000
また、ドキュメントのWebバージョンをプロジェクトのブランディングや既存のオンラインプレゼンスとよりよく統合するために、カスタムテーマを追加する必要があるかどうかを検討してください。

00:33:09.000 -> 00:33:16.000
Swift-DocCの最新情報を入手するには、WWDC22の「Swift-DocCの新機能」セッションをチェックしてください。

00:33:16.000 -> 00:33:26.000
このセッションでは、Xcode 14に同梱されている新しい公開ワークフローについて詳しく説明し、GitHubページなどの静的ホスティングサービスに公開する方法を正確に説明します。

00:33:26.000 -> 00:33:36.000
また、ステップバイステップのチュートリアルでドキュメントをさらに進めることに興味がある場合は、「DocCを使用してインタラクティブなチュートリアルを構築する」を見ることをお勧めします。

00:33:36.000 -> 00:33:43.000
Swift-DocCとXcode 15で設計して公開したドキュメントを見るのがとても楽しみです。

00:33:43.000 -> 00:33:46.000
どうもありがとうございます。

00:33:46.000 -> 23:59:59.000
♪ ♪

