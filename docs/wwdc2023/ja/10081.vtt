WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:15.000
こんにちは、私の名前はユジンで、RealityKitチームのエンジニアです。

00:00:15.000 --> 00:00:24.000
今日は、空間コンピューティングアプリを強化するために使用できるRealityKitの新機能を紹介します。

00:00:24.000 --> 00:00:32.000
2019年にRealityKitをリリースして以来、アプリが豊富な機能セットを使用して素晴らしい体験を生み出すのを見てきました。

00:00:32.000 --> 00:00:42.000
現在、空間コンピューティングは、ポータル、パーティクルエミッタ、RealityViewアタッチメントなど、RealityKitにさらに多くの機能を追加します。

00:00:42.000 --> 00:01:03.000
「RealityKitで空間体験を構築する」と題されたセッションでは、RealityKitの基本的な構成要素について学びました。コンテナオブジェクトであるエンティティ、エンティティの特定の動作を定義するコンポーネント、エンティティとコンポーネントの両方に作用して機能を追加するシステムです。

00:01:03.000 --> 00:01:09.000
SwiftUIとRealityKitの架け橋として機能するRealityView APIを取り上げました。

00:01:09.000 --> 00:01:15.000
また、RealityKitシーンにインタラクション、アニメーション、空間オーディオを追加する方法も示しました。

00:01:15.000 --> 00:01:21.000
まだ見ていない場合は、そのセッションをチェックすることを強くお勧めします。

00:01:21.000 --> 00:01:29.000
このセッションでは、アプリをさらに魅力的で没入感のあるものにするのに役立つRealityKitの新機能について説明します。

00:01:29.000 --> 00:01:38.000
まず、RealityViewの添付ファイルを使用して、SwiftUIビューをRealityKitコンテンツに埋め込む方法を学びます。

00:01:38.000 --> 00:01:43.000
次に、RealityKitシーン内でビデオ再生を追加する方法を見ていきます。

00:01:43.000 --> 00:01:49.000
次に、ポータルを使用して代替世界への窓を開く方法を学びます。

00:01:49.000 --> 00:01:56.000
パーティクルエミッターAPIを使用して、視覚効果でシーンを強化する方法について説明します。

00:01:56.000 --> 00:02:05.000
最後に、RealityKitのアンカーを使用して、壁などの現実世界の場所に3Dコンテンツを添付する方法を学びます。

00:02:05.000 --> 00:02:08.000
RealityViewの添付ファイルから始めましょう。

00:02:08.000 --> 00:02:14.000
添付ファイルは、SwiftUIコンテンツをRealityKitシーンに埋め込むのに便利な方法です。

00:02:14.000 --> 00:02:21.000
このサンプルアプリでは、添付ファイルを使用して、地球と月のモデルの下にテキストラベルを付けました。

00:02:21.000 --> 00:02:27.000
また、月が私たちの海の潮汐にどのように影響するかを説明する見解を添付しました。

00:02:27.000 --> 00:02:30.000
これをコードで作る方法を見てみましょう。

00:02:30.000 --> 00:02:35.000
アプリ内では、RealityViewを使って地球モデルをレンダリングしています。

00:02:35.000 --> 00:02:40.000
RealityViewは、RealityKitエンティティを追加できるビューです。

00:02:40.000 --> 00:02:46.000
レンダリング、アニメーション化、シミュレートするには、エンティティをRealityViewに追加する必要があります。

00:02:46.000 --> 00:02:52.000
ここでは、地球のエンティティをロードし、RealityViewのコンテンツに追加するだけです。

00:02:52.000 --> 00:02:56.000
それでは、添付ファイルを使用するようにRealityViewを変更しましょう。

00:02:56.000 --> 00:03:02.000
添付ファイルは、RealityKitコンテンツに関連する特定の場所に配置できるビューです。

00:03:02.000 --> 00:03:05.000
添付ファイルの設定には2つの部分があります。

00:03:05.000 --> 00:03:11.000
まず、RealityViewのmakeクロージャに追加されたパラメータがあります。

00:03:11.000 --> 00:03:16.000
次に、RealityViewに追加された添付ファイルビュービルダーがあります。

00:03:16.000 --> 00:03:19.000
最初に添付ファイルビュービルダーをカバーしましょう。

00:03:19.000 --> 00:03:25.000
ここでは、RealityKitコンテンツに追加したいSwiftUIビューを提供できます。

00:03:25.000 --> 00:03:30.000
この例では、地球にラベルを付けるためのテキストビューを追加しました。

00:03:30.000 --> 00:03:39.000
また、ビューがエンティティとしてmakeクロージャに配信されたときに後で識別できるように、ビューにタグ修飾子を追加します。

00:03:39.000 --> 00:03:42.000
このタグは任意のハッシュ可能な値にすることができます。

00:03:42.000 --> 00:03:46.000
ここでは、文字列earth_labelを使用しました。

00:03:46.000 --> 00:03:54.000
RealityViewのmakeクロージャでは、添付ファイルパラメータには、エンティティとして表現されるビューが含まれています。

00:03:54.000 --> 00:04:05.000
ビューをエンティティ形式で取得するには、添付ファイルでエンティティ(for:)を呼び出し、ビュービルダーのearth_labelで提供したのと同じタグを渡します。

00:04:05.000 --> 00:04:13.000
その結果、他のエンティティと同様に、RealityKitコンテンツに追加できるビューアタッチメントエンティティが得られます。

00:04:13.000 --> 00:04:23.000
ラベルを地球の下に表示するために、添付ファイルを地球エンティティの子として追加し、少し下に配置します。

00:04:23.000 --> 00:04:29.000
それぞれに異なるタグを使用して追加したい他のすべての添付ファイルに対してこのプロセスを繰り返すことができます。

00:04:29.000 --> 00:04:32.000
Xcodeで見てみましょう。 では見てみましょう。

00:04:32.000 --> 00:04:37.000
サンプルアプリでは、RealityViewに3つの添付ファイルを追加します。

00:04:37.000 --> 00:04:40.000
まず、地球の下にラベルを追加します。

00:04:40.000 --> 00:04:44.000
私も月のために同じことをします。

00:04:44.000 --> 00:04:50.000
最後に、潮汐における月の軌道の役割を説明する短い段落を追加します。 

00:04:50.000 --> 00:04:55.000
SwiftUIのglassBackgroundEffectを使ってこれをスタイリングしました。

00:04:55.000 --> 00:05:01.000
RealityViewを閉じる際に、対応するエンティティをコンテンツに追加します。

00:05:01.000 --> 00:05:06.000
まず、地球の下にアースアタッチメントを追加します。

00:05:06.000 --> 00:05:08.000
私は月のために同じことをします。

00:05:08.000 --> 00:05:14.000
最後に、コンテナエンティティの左側に潮汐説明器を配置します。

00:05:14.000 --> 00:05:23.000
アプリをビルドして実行すると、作成した添付ファイルがモデルの横に表示されます。

00:05:23.000 --> 00:05:27.000
添付ファイルのデータフローをまとめましょう。

00:05:27.000 --> 00:05:32.000
添付ファイルは、RealityViewの添付ファイルビュービルダーから始まります。

00:05:32.000 --> 00:05:37.000
ここでは、RealityKitシーンに追加したいSwiftUIビューを提供できます。

00:05:37.000 --> 00:05:46.000
RealityViewのmakeクロージャでは、添付ファイルをエンティティとして戻し、それをシーンに追加できます。

00:05:46.000 --> 00:05:50.000
また、更新クロージャ内のエンティティを更新することもできます。

00:05:50.000 --> 00:05:56.000
このクロージャは、SwiftUIビューの状態に変更があったときに呼び出されます。

00:05:56.000 --> 00:06:02.000
これを使用して、RealityViewで動的に変化するコンテンツに対応できます。

00:06:02.000 --> 00:06:10.000
添付ファイルのより詳細な使用方法については、「XcodeでReality Composer Proのコンテンツを使用する」セッションをチェックしてください。

00:06:10.000 --> 00:06:17.000
RealityViewの添付ファイルは、他のUI要素のテキストコンテンツをシーンに追加する便利な方法です。

00:06:17.000 --> 00:06:22.000
さらに、アプリにビデオを追加して、より魅力的にすることもできます。

00:06:22.000 --> 00:06:27.000
これを行うには、VideoPlayerComponentを使用しましょう。

00:06:27.000 --> 00:06:36.000
ビデオプレーヤーコンポーネントは、3Dシーン内にビデオコンテンツを埋め込むために使用されるRealityKitの新しいコンポーネントタイプです。

00:06:36.000 --> 00:06:43.000
リマインダーとして、コンポーネントはエンティティにアタッチできる特定の動作を定義します。

00:06:43.000 --> 00:06:50.000
VideoPlayerComponentを使用してビデオを再生するには、まずリソースバンドルからビデオファイルをロードします。

00:06:50.000 --> 00:06:54.000
次に、それを使用してAVPlayerインスタンスを作成します。

00:06:54.000 --> 00:06:59.000
これで、VideoPlayerComponentを作成できるようになりました。

00:06:59.000 --> 00:07:09.000
VideoPlayerComponentをエンティティにアタッチすると、ビデオのアスペクト比に一致する長方形のメッシュが自動的に生成されます。

00:07:09.000 --> 00:07:19.000
この動作は、SwiftUIのVideoPlayerやCore AnimationのAVPlayerLayerなど、既存のビデオプレーヤーAPIに似ています。

00:07:19.000 --> 00:07:31.000
ただし、RealityKitは3Dフレームワークであるため、ビデオはメッシュを持つエンティティとして表現されるため、3D空間に移動して配置できます。

00:07:31.000 --> 00:07:43.000
AV Foundationでサポートされているすべてのビデオフォーマットは、2DビデオフォーマットやMV-HEVCを使用した3Dビデオなど、VideoPlayerComponentで動作します。

00:07:43.000 --> 00:07:51.000
最後に、VideoPlayerComponentは、AVPlayerを通じて提供されるキャプションを自動的に表示します。

00:07:51.000 --> 00:08:03.000
3Dビデオを含む独自のビデオコンテンツを作成する方法の詳細については、「空間体験のためのビデオコンテンツを提供する」というタイトルのセッションをチェックしてください。

00:08:03.000 --> 00:08:12.000
RealityKitシーンにビデオを追加するには、まずビデオアセットのURLを使用してAVPlayerItemを作成します。

00:08:12.000 --> 00:08:15.000
次に、AVPlayerを作成します。

00:08:15.000 --> 00:08:23.000
エンティティでは、作成したばかりのAVPlayerで初期化されたVideoPlayerComponentを追加します。

00:08:23.000 --> 00:08:30.000
VideoPlayerComponentは、私のビデオのアスペクト比に基づいてサイズのメッシュを自動的に生成します。

00:08:30.000 --> 00:08:37.000
RealityKitは現実世界のユニットで動作するため、デフォルトでは、ビデオの高さは1メートルになります。

00:08:37.000 --> 00:08:41.000
ビデオを別のサイズにするには、エンティティをスケーリングできます。

00:08:41.000 --> 00:08:50.000
私の場合、ビデオの高さを40センチにしたいので、エンティティスケールに0.4を掛けます。

00:08:50.000 --> 00:08:52.000
最後に、ビデオを再生する準備が整いました。

00:08:52.000 --> 00:08:59.000
現在のアイテムをAVPlayerItemに設定し、AVPlayerでプレイを呼び出します。

00:08:59.000 --> 00:09:03.000
このコードでアプリを再構築して実行しましょう。

00:09:03.000 --> 00:09:08.000
アプリに「詳細」ボタンを追加しました。これにより、ビデオエンティティがシーンに追加されます。

00:09:08.000 --> 00:09:15.000
ボタンをクリックすると、不透明度コンポーネントとfromToByAnimationを使用してビデオをフェードインします。

00:09:15.000 --> 00:09:24.000
私たちのビデオコンテンツのために、私は地球の上昇潮に対する月の重力の役割を説明する短いクリップを用意しました。

00:09:24.000 --> 00:09:25.000
見てみましょう。 

00:09:25.000 --> 00:09:28.000
月は私たちの惑星を周回します。

00:09:28.000 --> 00:09:43.000
その重力は、私たちの海に強力な力を及ぼし、月の球体に向かってわずかに膨らみます。&lt; VideoPlayerComponentは、キャプションのシステム全体の設定を尊重します。

00:09:43.000 --> 00:09:49.000
アクセシビリティセクションの下にある設定アプリでそれらをオンにしましょう。

00:09:49.000 --> 00:10:08.000
そして、1日2回、終わりのないサイクルで、地球と月のこの絶え間ない相互作用によって、潮が上がったり下がったりします。&lt; VideoPlayerComponentは、パススルー着色もサポートしています。

00:10:08.000 --> 00:10:14.000
この機能を有効にすると、パススルーコンテンツはビデオの色に合わせて調整されます。

00:10:14.000 --> 00:10:21.000
これは、このプラットフォームのテレビアプリ内で映画やテレビ番組を見るときに使用されるのと同じ治療法です。

00:10:21.000 --> 00:10:28.000
パススルーティンティングを使用するには、isPassthroughTintingEnabledプロパティをtrueに設定できます。

00:10:28.000 --> 00:10:39.000
また、VideoPlayerEventsを購読して、コンテンツタイプ、表示モード、ビデオサイズなど、VideoPlayerComponentのプロパティが変更されたときに通知を受け取ることもできます。

00:10:39.000 --> 00:10:48.000
イベントを購読するには、RealityViewsコンテンツの購読機能を呼び出し、イベントの種類とエンティティを指定できます。

00:10:48.000 --> 00:10:53.000
イベントハンドラクロージャ内のイベントに応答できます。

00:10:53.000 --> 00:10:58.000
VideoPlayerComponentは、私たちの3Dシーンへの素晴らしい追加です。

00:10:58.000 --> 00:11:06.000
これまでのところ、私たちのアプリは地球と月のモデルを備えていますが、宇宙を背景に提示したいと思います。

00:11:06.000 --> 00:11:15.000
宇宙空間で月の軌道を明らかにする部屋に魔法の窓を作ることができれば、かなりクールだと思います。

00:11:15.000 --> 00:11:19.000
ポータルを使用してシーンをレンダリングできます。

00:11:19.000 --> 00:11:26.000
ポータルは、メッシュサーフェスを通して見える別の世界への開口部を作成します。

00:11:26.000 --> 00:11:32.000
この世界内のエンティティは別々の照明を使用し、ポータルのジオメトリによってマスクされています。

00:11:32.000 --> 00:11:36.000
この例は、RealityKitの3つの異なる機能を示しています。

00:11:36.000 --> 00:11:41.000
まず、ポータルは宇宙空間でシーンをレンダリングするために使用されます。

00:11:41.000 --> 00:11:45.000
次に、パーティクル効果を使用してポータルの縁を飾ります。

00:11:45.000 --> 00:11:50.000
最後に、アンカーは、私たちの部屋の壁にポータルを配置するために使用されます。

00:11:50.000 --> 00:11:53.000
ポータルから始めましょう。

00:11:53.000 --> 00:11:56.000
ポータルを作るには、まず世界を作らなければならない。

00:11:56.000 --> 00:12:02.000
これを行うには、Worldコンポーネントを持つエンティティをシーンに追加します。

00:12:02.000 --> 00:12:06.000
このコンポーネントは、そのエンティティツリーを別の世界に属しているとマークします。

00:12:06.000 --> 00:12:11.000
世界のエンティティは、ポータルサーフェスを介してのみ表示されます。

00:12:11.000 --> 00:12:17.000
私たちの世界にコンテンツを追加するには、世界のエンティティの子としてエンティティを添付することができます。

00:12:17.000 --> 00:12:27.000
ここでは、空、地球、月のモデルと、世界内部の照明を定義するImageBasedLightを追加します。

00:12:27.000 --> 00:12:33.000
世界の実体のすべての子孫は、この世界の中にのみ現れます。

00:12:33.000 --> 00:12:35.000
次に、ポータルを作ります。

00:12:35.000 --> 00:12:38.000
これを行うには、モデルコンポーネントを持つエンティティを追加します。

00:12:38.000 --> 00:12:43.000
モデルコンポーネントには、メッシュと材料の2つのプロパティが含まれています。

00:12:43.000 --> 00:12:49.000
メッシュの場合、ポータルの表面として機能する円形の平面を生成します。

00:12:49.000 --> 00:12:55.000
素材については、メッシュをポータルとして表示するために、新しいポータル素材を割り当てます。

00:12:55.000 --> 00:13:03.000
ポータルを世界と接続するには、エンティティにポータルコンポーネントを追加し、そのターゲットプロパティを世界のエンティティに設定します。

00:13:03.000 --> 00:13:11.000
これにより、ポータルは私たちの世界の中のコンテンツを明らかにするためのマスクとして機能することができます。

00:13:11.000 --> 00:13:14.000
これがコードでどのように見えるか見てみましょう。

00:13:14.000 --> 00:13:21.000
RealityViewでは、makeWorldとmakePortalを実装する2つの関数に呼び出しを追加しました。

00:13:21.000 --> 00:13:28.000
makeWorld機能では、ワールドエンティティを作成し、ポータルのコンテンツを入力します。

00:13:28.000 --> 00:13:35.000
makePortal関数では、ポータルを作成し、作成したばかりの世界にリンクします。

00:13:35.000 --> 00:13:39.000
最後に、これらのエンティティの両方をRealityViewのコンテンツに追加します。

00:13:39.000 --> 00:13:43.000
これらの各機能について掘り下げてみましょう。

00:13:43.000 --> 00:13:50.000
makeWorld関数内で、エンティティを作成し、WorldComponentを添付します。

00:13:50.000 --> 00:13:55.000
次に、ImageBasedLightとして使用するEnvironmentResourceをロードします。

00:13:55.000 --> 00:14:02.000
ImageBasedLightコンポーネントとImageBasedLight ReceiverComponentを使用して、これを世界に適用します。

00:14:02.000 --> 00:14:11.000
RealityKitの画像ベースの照明の詳細については、セッション「空間コンピューティングのためのレンダリングを探る」をチェックしてください。

00:14:11.000 --> 00:14:14.000
次に、私たちのコンテンツを世界に埋めます。

00:14:14.000 --> 00:14:20.000
地球、月、空のモデルをロードし、子供の頃に世界に追加します。

00:14:20.000 --> 00:14:26.000
これらのエンティティは世界の子供であるため、ポータルを通じてのみ表示されます。

00:14:26.000 --> 00:14:29.000
makePortal関数に移りましょう。

00:14:29.000 --> 00:14:32.000
ポータルを作るには、まずメッシュが必要です。

00:14:32.000 --> 00:14:36.000
エンティティのモデルコンポーネントを作成して作成します。

00:14:36.000 --> 00:14:44.000
ポータルを円形にするために、同じ寸法と半分の大きさのコーナー半径を持つ平面を生成します。

00:14:44.000 --> 00:14:49.000
また、ModelComponentの素材として使用するPortalMaterialも作成します。

00:14:49.000 --> 00:14:57.000
最後に、以前に作成したワールドエンティティで初期化されたポータルコンポーネントも添付します。

00:14:57.000 --> 00:15:04.000
これにより、ポータルと世界がリンクされるため、メッシュを通して世界のコンテンツを見ることができます。

00:15:04.000 --> 00:15:09.000
次に、ポータルの縁を粒子効果で飾りましょう。

00:15:09.000 --> 00:15:14.000
これを行うには、RealityKitで提供されているParticleEmitterComponentを使用できます。

00:15:14.000 --> 00:15:24.000
粒子エミッタは、火花、雪、インパクト効果など、RealityKitのさまざまな視覚効果を表すために使用できます。

00:15:24.000 --> 00:15:38.000
パーティクルエミッタは、Reality Composer Proを介して、またはParticleEmitterComponentを介してRealityKitを使用して実行時に作成できます。ここでは、Reality Composer Proを使用してパーティクルアセットを準備しました。

00:15:38.000 --> 00:15:42.000
これを使用して、以前に作成したポータルを飾ることができます。

00:15:42.000 --> 00:15:49.000
これをシーンにロードし、RealityKitを使用して実行時にパーティクルプロパティを変更しましょう。

00:15:49.000 --> 00:15:56.000
時間の経過とともにパーティクルを更新するために、ParticleTransitionSystemというカスタムシステムを作成しました。

00:15:56.000 --> 00:16:03.000
ここでは、EntityQueryを使用して、ParticleEmitterComponentを持つエンティティを検索します。

00:16:03.000 --> 00:16:10.000
システムアップデート内では、クエリを実行し、結果のエンティティを反復します。

00:16:10.000 --> 00:16:16.000
各エンティティで、次に実装する関数updateParticlesを呼び出します。

00:16:16.000 --> 00:16:25.000
RealityKitのカスタムシステムの詳細については、「RealityKitで空間体験を構築する」セッションをご覧ください。

00:16:25.000 --> 00:16:32.000
updateParticles関数内では、まずエンティティからParticleEmitterComponentを取得します。

00:16:32.000 --> 00:16:39.000
ParticleEmitterComponentには、粒子の外観と挙動のさまざまな側面を制御する多くの特性が含まれています。

00:16:39.000 --> 00:16:51.000
ここでは、エンティティのスケールに基づいてlifeSpanとvortexStrengthプロパティを設定し、エンティティのサイズが大きくなるにつれて、パーティクルがポータルの周りをより速く回転し始めます。

00:16:51.000 --> 00:16:56.000
最後に、コンポーネントをエンティティに割り当てて変更を適用しましょう。

00:16:56.000 --> 00:16:58.000
そして、私たちは準備万端です。

00:16:58.000 --> 00:17:06.000
パーティクルエミッタのすべての異なる特性について学ぶには、セッション「Meet Reality Composer Pro」をチェックしてください。

00:17:06.000 --> 00:17:10.000
アプリに最後の仕上げを追加するのはほぼ終わりました。

00:17:10.000 --> 00:17:14.000
最後に、ポータルを部屋の壁に取り付けましょう。

00:17:14.000 --> 00:17:19.000
これを行うには、RealityKitでアンカーを使用できます。

00:17:19.000 --> 00:17:27.000
アンカーは、壁、床、または頭や手に関連する場所にコンテンツを配置するために使用できます。

00:17:27.000 --> 00:17:32.000
RealityKitのアンカーは、.continuousと.onceの2つのトラッキングモードをサポートしています。

00:17:32.000 --> 00:17:40.000
連続追跡モードを使用する場合、アンカーエンティティは、頭が動くときなど、時間の経過とともにアンカーと一緒に移動します。

00:17:40.000 --> 00:17:47.000
一度追跡モードを使用する場合、アンカーエンティティは一度配置された後は移動しません。

00:17:47.000 --> 00:17:54.000
エンティティがアンカーになったときに聞くには、RealityKitでAnchoredStateChangedイベントを購読できます。

00:17:54.000 --> 00:18:06.000
親エンティティにアンカーを使用して3Dコンテンツを配置できますが、アンカー自体の明示的な変換は、ユーザーのプライバシーを保護するためにアプリには表示されないことに注意してください。

00:18:06.000 --> 00:18:11.000
アンカー変換にアクセスするには、ARKitを使用する必要があります。

00:18:11.000 --> 00:18:18.000
これの詳細については、「空間コンピューティングのためのARKitに会う」というセッションをチェックしてください。

00:18:18.000 --> 00:18:23.000
アプリでアンカーを使用するには、まず没入型スペースを使用するようにアプリを変更する必要があります。

00:18:23.000 --> 00:18:30.000
没入型スペースは、アプリがウィンドウの外でコンテンツをレンダリングできる特別なタイプのコンテナです。

00:18:30.000 --> 00:18:35.000
これを行うには、SwiftUIシーンにImmersiveSpaceを追加できます。

00:18:35.000 --> 00:18:40.000
また、.immersionStyle修飾子を追加し、混合に設定します。

00:18:40.000 --> 00:18:46.000
ImmersiveSpace内では、RealityViewを使用して、アンカーされるコンテンツを配置できます。

00:18:46.000 --> 00:18:53.000
Immersive Spacesの詳細については、「SwiftUIでウィンドウを越える」セッションをチェックしてください。

00:18:53.000 --> 00:18:59.000
RealityView内では、アンカーエンティティをポータルのコンテナとして使用できます。

00:18:59.000 --> 00:19:06.000
コンテンツをアンカーしたいサーフェスのタイプの仕様でアンカーエンティティを初期化します。

00:19:06.000 --> 00:19:13.000
私たちの場合、最小サイズが1メートル×1メートルの垂直壁を探しています。

00:19:13.000 --> 00:19:20.000
仕様に一致するアンカーが見つかった場合、RealityKitは自動的にコンテンツを壁に貼り付けます。

00:19:20.000 --> 00:19:22.000
そして、私たちはついに終わりました。

00:19:22.000 --> 00:19:28.000
アプリを実行すると、壁に取り付けられたポータルを取得します。

00:19:28.000 --> 00:19:37.000
ポータルやパーティクルからアンカーやアタッチメントまで、RealityKitは没入型体験を構築できる多くの機能を提供します。

00:19:37.000 --> 00:19:41.000
このセッションで取りまとめたことをすべてまとめましょう。

00:19:41.000 --> 00:19:51.000
RealityViewの添付ファイルを使用すると、SwiftUIコンテンツをエンティティ階層内に埋め込むことができ、UI要素を3D要素と一緒に配置できます。

00:19:51.000 --> 00:20:00.000
VideoPlayerComponent、ポータル、パーティクルエフェクトを使用すると、RealityKitでシーンを強化するために動的要素を追加できます。

00:20:00.000 --> 00:20:08.000
最後に、アンカーを使用すると、床や壁などの現実世界の表面に3Dコンテンツを取り付けることができます。

00:20:08.000 --> 00:20:17.000
セッション「RealityKitで空間体験を構築する」では、エンティティ、コンポーネント、RealityViewなどの重要な概念について説明しています。

00:20:17.000 --> 00:20:28.000
セッション「XcodeでReality Composer Proコンテンツを扱う」では、Reality Composer ProとRealityKitを使用して没入型アプリを構築するプロセスを説明します。

00:20:28.000 --> 00:20:32.000
RealityKitでこれらの新機能を使って作成するすべてのものを見るのが待ちきれません。

00:20:32.000 --> 00:20:34.000
ご覧いただきありがとうございます。

00:20:34.000 --> 23:59:59.000
♪

