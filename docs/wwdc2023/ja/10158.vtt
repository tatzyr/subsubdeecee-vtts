WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:12.000
ジェイコブ:こんにちは、私はジェイコブです。

00:00:12.000 --> 00:00:18.000
私たちが構築するUIは、どこでも変化と動きで、よりダイナミックに成長し続けています。

00:00:18.000 --> 00:00:19.000
人々はこれが大好きです。

00:00:19.000 --> 00:00:29.000
インターフェイスをより生き生きと感じさせ、何が起こっているのかを理解しやすくし、UIとのやり取りに楽しさをもたらします。

00:00:29.000 --> 00:00:33.000
そして、これらのダイナミックな相互作用を作るために一緒に来るものがたくさんあります。

00:00:33.000 --> 00:00:37.000
あるシーンから別のシーンに移動するトランジションがあります。

00:00:37.000 --> 00:00:41.000
そして、デバイスと直接やり取りするジェスチャーがあります。

00:00:41.000 --> 00:00:48.000
そして最後に、画面上のオブジェクトが視覚的なプロパティを移動、成長、または変更するアニメーションがあります。

00:00:48.000 --> 00:00:53.000
これらはすべて連携し、流動的でインタラクティブなUIを作るのに役立ちます。

00:00:53.000 --> 00:00:58.000
今日は、素晴らしいアニメーションの構築を深く掘り下げます。

00:00:58.000 --> 00:01:05.000
アニメーションの違いは微妙かもしれませんが、アニメーションがちょうどいいとき、ユーザーはそれを感じることができます。

00:01:05.000 --> 00:01:11.000
だから、あなたのアプリのアニメーションをエレガントで自然に感じさせる方法をあなたと共有したいと思います。

00:01:11.000 --> 00:01:19.000
そして、私たちは強力で、汎用性があり、さらには楽しい1つのツールに焦点を当ててそれを行うつもりです:スプリング!

00:01:19.000 --> 00:01:23.000
スプリングがアニメーションに適している理由について議論することから始めます。

00:01:23.000 --> 00:01:27.000
次に、スプリングの仕組みの詳細について説明します。

00:01:27.000 --> 00:01:31.000
そして最後に、アプリでスプリングを使用する方法について話します。

00:01:31.000 --> 00:01:34.000
では、なぜスプリングはアニメーションに役立つのでしょうか?

00:01:34.000 --> 00:01:39.000
それに答えるには、一歩下がって、何が素晴らしいアニメーションを作るのかを議論する必要があります。

00:01:39.000 --> 00:01:44.000
いくつかのアニメーションがあるコンテキストを調べてみましょう。簡単なトグルです。

00:01:44.000 --> 00:01:48.000
このトグルに集中しましょう。

00:01:48.000 --> 00:01:55.000
私たちはいくつかの理由でアニメーションを使用していますが、最も重要なことの1つは、より良い継続性を与えてくれることです。

00:01:55.000 --> 00:02:03.000
オブジェクトが1つの場所で始まり、突然別の場所に現れた場合、それは耳障りに感じられ、時には混乱することがあります。

00:02:03.000 --> 00:02:12.000
物体が1つの場所から次の場所に移動するのを見ると、はるかに自然に感じます。

00:02:12.000 --> 00:02:14.000
しかし、それはポジションだけではありません。

00:02:14.000 --> 00:02:19.000
物体の速度が突然変化すると、それも不自然に感じます。

00:02:19.000 --> 00:02:26.000
たとえば、ここでは、トグルのノブは速度のジャンプで開始および終了し、正しく感じません。

00:02:26.000 --> 00:02:32.000
したがって、私たちが持っている1つの目標は、アニメーションを連続した位置と速度にすることです。

00:02:32.000 --> 00:02:37.000
いくつかのアニメーションタイプを見て、その要件でどのように行うかを見てみましょう。

00:02:37.000 --> 00:02:48.000
そして、私たちのトグルは完全なアニメーションの便利な例ですが、ノブの動きだけに焦点を当てたいので、1つのアニメーションで何が起こっているのかを簡単に見ることができます。

00:02:48.000 --> 00:02:51.000
イージーインとアウトを見ることから始めましょう。

00:02:51.000 --> 00:02:59.000
これはベジェ曲線アニメーションの一種で、その動きは曲線と持続時間の組み合わせによって定義されることを意味します。

00:02:59.000 --> 00:03:04.000
この物体の動きを見ると、突然のジャンプがあるようには感じません。

00:03:04.000 --> 00:03:11.000
これが事実であることを確認するために、このアニメーションの動きのチャートを調べることもできます。

00:03:11.000 --> 00:03:16.000
これらのチャートのいくつかを見ていきますので、それが何を示しているかについて話し合いましょう。

00:03:16.000 --> 00:03:26.000
水平軸は時間を表し、下線はアニメーションの初期位置を示し、上線はターゲット位置を示します。

00:03:26.000 --> 00:03:32.000
そして、アニメーションを繰り返し再生すると、この曲線を繰り返し進みます。

00:03:32.000 --> 00:03:35.000
では、アニメーションをもう一度始めましょう。

00:03:35.000 --> 00:03:42.000
チャートの曲線にジャンプがないことに注意してください。つまり、その位置は連続的です。

00:03:42.000 --> 00:03:53.000
また、速度も表示するようにチャートを更新すると、速度にもジャンプがないことを確認できるため、速度も連続しています。

00:03:53.000 --> 00:04:02.000
代わりにリニアアニメーションの動きを見ると、アニメーションの開始と終了時に鋭い角と速度のジャンプがあります。

00:04:02.000 --> 00:04:19.000
リニアアニメーションは、繰り返し回転インジケーターなど、いくつかの場所で特殊なツールとして役立ちますが、それ以外の場合は、一般的に場違いに感じるこの非物理的な行動を持つ動きのために、特にそれらを使用することに注意する必要があります。

00:04:19.000 --> 00:04:23.000
次に、春のアニメーションの連続性を確認しましょう。

00:04:23.000 --> 00:04:28.000
私たちが望むように、これには連続的な位置と速度もあります。

00:04:28.000 --> 00:04:38.000
これまでのところ、イージーインとアウトと春のアニメーションが最良の選択肢ですが、アニメーションが静止位置から始まるケースのみを見てきました。

00:04:38.000 --> 00:04:44.000
ジェスチャーをアニメーションと一緒に使うとどうなるか調べてみましょう。

00:04:44.000 --> 00:04:51.000
可動式ノブをiPadに持って行き、指でドラッグしましょう。

00:04:51.000 --> 00:04:55.000
この2つのポジションのいずれかに落とすことができます。

00:04:55.000 --> 00:05:03.000
しかし、その間のどこかでジェスチャーを終了し、ノブを片側に投げることもできます。

00:05:03.000 --> 00:05:15.000
簡単なインとアウトアニメーションで、それは最後までアニメーション化しますが、ジェスチャーが終了するとその動きは停止します。

00:05:15.000 --> 00:05:22.000
このタイプのアニメーションは事前に指定された曲線にすぎないため、初期速度を表す方法はありません。

00:05:22.000 --> 00:05:32.000
ノブを2次元の任意の位置にドラッグできるようにすると、これはさらに悪化します。

00:05:32.000 --> 00:05:36.000
もう一度やってみましょう、でも春のアニメーションで。

00:05:36.000 --> 00:05:48.000
春はどんな初期速度でも始めることができるので、ジェスチャーが終わるところでアニメーションが拾う自然な感覚を得ます。

00:05:48.000 --> 00:05:57.000
そして、これは2次元のドラッグにも最適です。

00:05:57.000 --> 00:06:05.000
SwiftUIは、ジェスチャーがプロパティを変更するときはいつでも速度を自動的に追跡するので、余分な作業なしでこの動作を得ることができます。

00:06:05.000 --> 00:06:15.000
したがって、スプリングは、静的ケースと初期速度のケースの両方で連続性を維持する唯一のタイプのアニメーションです。

00:06:15.000 --> 00:06:20.000
私たちが調べることができるスプリングの次の利点は、その動きの形です。

00:06:20.000 --> 00:06:28.000
春の動きを聞くと、このようなことを考えているかもしれません。

00:06:28.000 --> 00:06:32.000
しかし、春のアニメーションは弾力のあるアニメーションを意味するだけではありません。

00:06:32.000 --> 00:06:39.000
スプリングがバウンスを持つことができるのは事実であり、それは素晴らしいツールになる可能性がありますが、それは私たちがスプリングを使用する主な理由ではありません。

00:06:39.000 --> 00:06:46.000
後で、バウンス付きのスプリングを使用するのが理にかなっているときを見ていきますが、バウンスのないスプリングも素晴らしいです!

00:06:46.000 --> 00:06:51.000
これらのタイプの非弾力性スプリングは、iOSのアニメーションで使用されています。

00:06:51.000 --> 00:06:56.000
だから、それがバウンスだけではないなら、春の動きの何がそんなに良いのですか?

00:06:56.000 --> 00:07:02.000
シンプルな春のアニメーションをもう一度見て、アニメーションがどのように終わるかに注目しましょう。

00:07:02.000 --> 00:07:05.000
それは非常にゆっくりと徐々に休むようになる。

00:07:05.000 --> 00:07:09.000
オブジェクトが突然行われたとき、単一のポイントはありません。

00:07:09.000 --> 00:07:15.000
これは、これが動いて停止していた物体であるかどうか、私たちが期待するもののように感じます。

00:07:15.000 --> 00:07:19.000
そして、このバージョンが私たちにとってより自然に感じるのには理由があります。

00:07:19.000 --> 00:07:29.000
春のアニメーションは、物理的な世界で春に取り付けられた物体の挙動に基づいているので、それが動くのを見ると、私たちの目にはより自然で信憑性を感じます。

00:07:29.000 --> 00:07:36.000
今、あなたはスプリングでアニメーション化する異なるプロパティが異なる時間に終了することができると聞いたことがあるかもしれませんが、それは本当です。

00:07:36.000 --> 00:07:40.000
タイミングカーブアニメーションに慣れているなら、これは奇妙に感じるかもしれません。

00:07:40.000 --> 00:07:43.000
すべてのアニメーションを同時に開始および停止したくありませんか?

00:07:43.000 --> 00:07:45.000
答えはノーです!

00:07:45.000 --> 00:07:50.000
私たちは、アニメーションが私たちが慣れている物理的な世界の物体の動きのように感じることを望んでいます。

00:07:50.000 --> 00:07:59.000
そして一般的に、これらは摩擦によって減速されるため、自分の時間に開始および停止するため、これらの時間は通常完璧に並んでいません。

00:07:59.000 --> 00:08:05.000
実際、マルチプロパティアニメーションのためにさらに進むことは時々有用です。

00:08:05.000 --> 00:08:09.000
これはiOSで起動するアプリのアニメーションです。

00:08:09.000 --> 00:08:26.000
一見すると、それは単一の均一なアニメーションのように見えるかもしれませんが、アニメーションを遅くすると、異なるスプリング、異なる開始時間、異なる終了時間が一緒になって、信じられないほど自然に感じるアニメーションを形成することがわかります。

00:08:26.000 --> 00:08:35.000
スプリングがアニメーションに最適なツールである理由がわかったので、スプリングがどのように機能し、どのように使用するのが最善かを理解するために、スプリングをより詳しく調べましょう。

00:08:35.000 --> 00:08:41.000
スプリングアニメーションを使用する場合は、スプリングに取り付けられたオブジェクトの動きでモデリングしています。

00:08:41.000 --> 00:08:56.000
物理学に戻ると、この動きは3つの特性によって定義されます。オブジェクトの質量、スプリングの剛性、およびシステムの減衰です。これは、周囲によってオブジェクトにどれだけの摩擦が適用されるかの尺度です。

00:08:56.000 --> 00:09:09.000
次に、アニメーションの初期位置をオブジェクトの初期位置として使用し、アニメーションのターゲット位置を使用して、オブジェクトが引っ張られるスプリングの静止位置を定義します。

00:09:09.000 --> 00:09:14.000
その後、オブジェクトを解放してアニメーションを開始できます。

00:09:14.000 --> 00:09:24.000
スプリングシステムを定義するために使用するプロパティは、発生する動きのタイプを決定し、それらを変更すると、結果のアニメーションが変更されます。

00:09:24.000 --> 00:09:33.000
したがって、スプリングアニメーションを作成するときは、質量、剛性、減衰のこれらの同じ特性を使用して、使用するスプリングの種類を設定できます。

00:09:33.000 --> 00:09:40.000
しかし、これらは物理的なシステムをモデル化する自然な方法ですが、春のアニメーションを定義するにはあまり直感的ではありません。

00:09:40.000 --> 00:09:48.000
ここには質量のある実際の物体や剛性のあるバネはなく、曲線を変えるためにこれらの値を作るのは簡単ではありません。

00:09:48.000 --> 00:09:54.000
そのため、理解しやすく、作業しやすいスプリングを設定する新しい方法を洗練してきました。

00:09:54.000 --> 00:09:59.000
持続時間とバウンスの2つのパラメータのみを使用します。

00:09:59.000 --> 00:10:03.000
これらはあなたが期待することを行い、持続時間を増やすとアニメーションに時間がかかります。

00:10:03.000 --> 00:10:07.000
そして、バウンスを増やすと、アニメーションにバウンスが追加されます。

00:10:07.000 --> 00:10:13.000
そして、私たちはAppleの設計とエンジニアリングの取り組みを通じてこれらを普遍的に採用しています。

00:10:13.000 --> 00:10:18.000
したがって、スプリングをサポートするすべてのフレームワークがそれらを使用します。

00:10:18.000 --> 00:10:22.000
これらのスプリングパラメータで遊ぶと、曲線にさまざまな種類の図形を見ることができます。

00:10:22.000 --> 00:10:29.000
バウンスが0より大きい場合、ターゲットをオーバーシュートする弾力のあるスプリングが得られる。

00:10:29.000 --> 00:10:36.000
バウンスが0の場合、この滑らかな曲線を取得し、長い尾が徐々に目標に向かっています。

00:10:36.000 --> 00:10:38.000
そして、もう1つのタイプの春もあります。

00:10:38.000 --> 00:10:50.000
これはそれほど一般的ではありませんが、負のバウンス値では、長い尾が徐々に目標に近づいているスプリングを得ることができますが、それは0のバウンスで得られるものよりも少し平らです。

00:10:50.000 --> 00:10:55.000
スプリングの物理学では、これらはアンダーダンピング、クリティカルダンピング、オーバーダンピングスプリングと呼ばれます。

00:10:55.000 --> 00:11:00.000
しかし、私はそれらを弾力があり、滑らかで、平らだと考えるのが好きです。

00:11:00.000 --> 00:11:17.000
そして、お気づきかもしれませんが、これらのバウンス値はパーセントなので、バウンシースプリングは最大100%のバウンス値を持ち、平坦化されたスプリングは0から-100%の間のバウンス値を持っています。今、私はこれらのスプリングをもう少し掘り下げたいです。

00:11:17.000 --> 00:11:23.000
スプリングは時々少し威圧的に見え、その動きは理解するのが難しいように見えることがあります。

00:11:23.000 --> 00:11:28.000
しかし、何が起こっているのかを分解すると、実際にはいくつかの簡単なことを組み合わせるだけです。

00:11:28.000 --> 00:11:37.000
私にとって、これらの曲線の背後にある数学を理解できることは、春をより親しみやすく感じさせるのに役立つので、私もそれをあなたと共有したいと思います。

00:11:37.000 --> 00:11:41.000
しかし、数学があなたの頭を回転させるだけなら、心配しないでください、それは完全にオプションです。

00:11:41.000 --> 00:11:45.000
私たちはあなたのためにこの数学のすべてを実装します。

00:11:45.000 --> 00:11:47.000
では、弾力のある曲線から始めましょう。

00:11:47.000 --> 00:11:55.000
この春のオーバーシュートは、より複雑な種類の正弦波または正弦波のように振動していることに気付くかもしれません。

00:11:55.000 --> 00:12:07.000
そして、この春のバウンスを最大値の100%まで上げると、それがまさにコサイン波の挙動であり、前後に振動していることがわかります。

00:12:07.000 --> 00:12:18.000
これの物理的な解釈は、摩擦が作用しないバネであるため、減速することなく永遠に振動し、実際に目標位置に到達することはないということです。

00:12:18.000 --> 00:12:26.000
予想通り、この数学は非常に簡単です:それは単なるコサイン曲線であり、時間は期間で割られます。

00:12:26.000 --> 00:12:32.000
したがって、このバウンス値の場合、期間は曲線の期間に正確に対応します。

00:12:32.000 --> 00:12:40.000
バウンスを減らすと、スプリングに摩擦や減衰を加えることに物理的に相当し、それが進むにつれて遅くなります。

00:12:40.000 --> 00:12:43.000
そして、私たちはまだそれらの振動を持っています。

00:12:43.000 --> 00:12:51.000
実際、以前からのコサイン曲線はまだそこにあり、上に重ねて描くとより明確になります。

00:12:51.000 --> 00:12:57.000
これは以前と同じ方程式で、定数が異なり、水平方向に少しシフトしています。

00:12:57.000 --> 00:13:03.000
したがって、これは曲線の弾力性を説明していますが、明らかに何か他のものも必要です。

00:13:03.000 --> 00:13:09.000
元の曲線では、振動のサイズは時間の経過とともに小さくなったり、減衰したりしています。

00:13:09.000 --> 00:13:11.000
そして、それが欠けている部分です。

00:13:11.000 --> 00:13:15.000
この追加曲線は指数減衰曲線です。

00:13:15.000 --> 00:13:22.000
そして、それは私たちの動きの最後の部分であり、私たちに休むという緩やかな感覚を与える部分です。

00:13:22.000 --> 00:13:30.000
したがって、複雑な曲線のように見えたのは、減衰コサインまたはサイン波と呼ばれるこれら2つのコンポーネントの産物です。

00:13:30.000 --> 00:13:41.000
それはかなり満足のいくものですが、チャートをよく見ると、少し奇妙に思えるかもしれないことが1つあります。なぜ私たちのコサイン曲線は今、最初にこのディップを持っているのですか?

00:13:41.000 --> 00:13:45.000
これは、先ほど説明した速度の維持に関連しています。

00:13:45.000 --> 00:13:51.000
この基本ケースでは、最初に0の速度を維持する必要があることを覚えておいてください。

00:13:51.000 --> 00:13:58.000
したがって、2つの成分曲線の積の速度は0前後で平坦でなければなりません。

00:13:58.000 --> 00:14:02.000
しかし、私たちの減衰曲線は上向きの傾きから始まることに注意してください。

00:14:02.000 --> 00:14:08.000
コサイン曲線をフラットに開始すると、初期速度も上向きになります。

00:14:08.000 --> 00:14:16.000
だから、私たちのコサイン曲線は、減衰でキャンセルし、私たちにフラットなスタートを与えるために、下向きから始めなければなりません。

00:14:16.000 --> 00:14:27.000
そして、これは、正しいスタートを与えるために私たちのコサイン曲線で異なるシフトとスケールを使用することによって、スプリングが任意の初期速度を一致させることができる方法です。

00:14:27.000 --> 00:14:36.000
この初期速度は、先に説明したように、ジェスチャーが終了し、アニメーションに手渡すときの速度から来ることができます。

00:14:36.000 --> 00:14:39.000
そして、この最初の速度がどこから来ることができる別の場所があります。

00:14:39.000 --> 00:14:42.000
iPadで調べてみましょう。

00:14:42.000 --> 00:14:48.000
ここでは、タップしてノブを動かし、ターゲット位置にノブの暗い画像を表示できます。

00:14:48.000 --> 00:14:53.000
また、何が起こっているのかを簡単に追跡できるように、より遅いスプリングを使用します。

00:14:53.000 --> 00:15:00.000
アニメーションがまだ終了していない間に、新しいターゲット値に変わる新しいアニメーションが始まることがあります。

00:15:00.000 --> 00:15:18.000
それが起こると、春のアニメーションは、新しい目的地への初期速度として再ターゲット化されたときの速度を使用し、この同じ速度の保存は、この種の中断を滑らかで自然に感じさせます。

00:15:18.000 --> 00:15:22.000
だから、それが速度保存と弾力のあるスプリングの仕組みです。

00:15:22.000 --> 00:15:38.000
さて、バウンスを減らすと、振動はどんどん遠くなり、バウンスが0になるまで、振動は完全になくなり、直線が下がって消えて、減衰で乗算されます。

00:15:38.000 --> 00:15:41.000
したがって、これらの方程式はさらに単純です。

00:15:41.000 --> 00:15:51.000
線の基本的な方程式が必要で、それに同じ指数関数を掛けて、結果の曲線が得られます。

00:15:51.000 --> 00:16:00.000
負のバウンスを持つスプリングである平坦な曲線は、非常に同様に機能しますが、線の代わりに2つの指数関数を一緒に追加します。

00:16:00.000 --> 00:16:12.000
このタイプのスプリングはあまり一般的ではありませんが、指数関数的な減衰で表されるという事実は、スクロールビューで起こるような減衰速度のモデリングに役立ちます。

00:16:12.000 --> 00:16:19.000
アニメーションにスプリングを使用するときに疑問に思うかもしれないことの1つは、春のアニメーションが実際に終了するまでにどれくらいの時間がかかりますか?

00:16:19.000 --> 00:16:22.000
私たちが見たように、その質問は少し微妙です。

00:16:22.000 --> 00:16:29.000
スプリングの指数関数的な減衰は、技術的には、より小さく、より小さな動きで永遠に動き続けることを意味します。

00:16:29.000 --> 00:16:39.000
もちろん、春のアニメーションが永遠に続くことを望んでいないので、UIに顕著な変化をもたらさなくなったときに、それを削除する時間を選択する必要があります。

00:16:39.000 --> 00:16:45.000
春のアニメーションが削除するのに十分なほど終了するまでの時間は、セトリング期間と呼ばれます。

00:16:45.000 --> 00:16:51.000
このセトリング期間は、スプリングを設定するための期間パラメータとは異なります。

00:16:51.000 --> 00:17:07.000
セトリング期間は多くの異なる要因に依存するため、少し予測できない可能性がありますが、期間パラメータは、春の他のパラメータが変化しても、予測可能で動き回らないように選択される知覚期間です。

00:17:07.000 --> 00:17:13.000
その予測不可能な性質のため、ユーザー向けの変更のセトリング期間を待つべきではありません。

00:17:13.000 --> 00:17:24.000
スプリングがほぼ完了したときにUIの変更を行う場合は、SwiftUIで新しい完了ハンドラーサポートを使用できます。SwiftUIでは、セトリング期間の代わりに知覚期間を使用します。

00:17:24.000 --> 00:17:29.000
スプリングの仕組みがすべてわかったので、コードでの使用について話し合いましょう。

00:17:29.000 --> 00:17:40.000
スプリングはアニメーションに最適なツールであるため、SwiftUIのデフォルトのアニメーションとして使用しているため、withAnimationを呼び出すだけでスプリングから始めることができます。

00:17:40.000 --> 00:17:45.000
また、アニメーションにスプリングを明示的に使用しやすくしました。

00:17:45.000 --> 00:17:51.000
iOSで使用されているスプリング値に基づいて、いくつかのスプリングプリセットを組み込みました。

00:17:51.000 --> 00:17:58.000
どのスプリングパラメータを使用するかわからない場合、これらは気持ちの良いものを得るための素晴らしい方法です。

00:17:58.000 --> 00:18:03.000
アニメーションが必要なときにプリセットを直接使用することで、これらをコードで使用できます。

00:18:03.000 --> 00:18:13.000
しかし、春のアニメーションを使用する重要な部分は、必要な正確なコンテキストに合わせてチューニングすることなので、これらのプリセットは調整可能な出発点としても使用できます。

00:18:13.000 --> 00:18:25.000
プリセットを取り、その期間が異なるように指定するか、追加する余分なバウンスの相対量を指定することで、多かれ少なかれバウンスを与えることができます。

00:18:25.000 --> 00:18:30.000
これらのプリセットは、アプリにスプリングを導入し始めるのに最適な方法です。

00:18:30.000 --> 00:18:37.000
しかし、さらに進みたい場合は、.springアニメーションで完全にカスタムスプリングを作ることもできます。

00:18:37.000 --> 00:18:42.000
これにより、スプリングの持続時間とバウンスを完全に指定できます。

00:18:42.000 --> 00:18:48.000
そして、これらのバウンス値は-1.0から1.0の範囲です。

00:18:48.000 --> 00:18:56.000
これらの同じパラメータを使用して、UIKitとCore Animationで春のアニメーションを作成することもできます。

00:18:56.000 --> 00:19:00.000
さらに進みたい場合は、使用できる別の新しいスプリングツールがあります。

00:19:00.000 --> 00:19:07.000
SwiftUIにSpringモデルタイプを追加しました。これにより、パラメータを含むスプリングの表現を作成できます。

00:19:07.000 --> 00:19:12.000
これにより、パラメータを指定するさまざまな方法間でパラメータをプログラムで変換できます。

00:19:12.000 --> 00:19:22.000
また、質量、剛性、減衰などの一連のパラメータを使用してスプリングモデルを作成し、スプリングアニメーションとして直接使用することもできます。

00:19:22.000 --> 00:19:32.000
しかし、本当に自分で変換したい場合は、バウンスと持続時間の値から質量、剛性、減衰に変換する3つの方程式があります。

00:19:32.000 --> 00:19:38.000
パラメータの変換に加えて、スプリングモデルを使用して独自の高度なスプリングビヘイビアを構築できます。

00:19:38.000 --> 00:19:44.000
春にメソッドを呼び出すと、内蔵の春の評価数学を自分で取得できます。

00:19:44.000 --> 00:19:49.000
たとえば、値を呼び出すと、スプリングの位置を取得できます。

00:19:49.000 --> 00:19:56.000
春が向かっている目標と、それを評価したい時間を通過するだけです。

00:19:56.000 --> 00:20:04.000
また、速度法で同じ入力を使用して、時間の経過とともにスプリングの速度を評価することもできます。

00:20:04.000 --> 00:20:13.000
これにより、独自のコードでスプリングを簡単に使用でき、シミュレーションや、このセッションのようなチャートの値を取得するのに便利です。

00:20:13.000 --> 00:20:17.000
これを使用して、独自のカスタムアニメーションを作成することもできます。

00:20:17.000 --> 00:20:25.000
スプリングモデルを呼び出すだけで、入力または出力を変更して、スプリングアニメーションにカスタマイズを適用できます。

00:20:25.000 --> 00:20:32.000
Explore SwiftUIアニメーションをチェックして、カスタムアニメーションの作成の詳細を学んでください。

00:20:32.000 --> 00:20:37.000
最後に議論したいことは、スプリングに使用するパラメータを選択する方法です。

00:20:37.000 --> 00:20:46.000
アニメーションに最適な値を選択するには、一般的に、好きなペースを与える持続時間値を見つけることから始めるのが最善です。

00:20:46.000 --> 00:20:55.000
それを決めたら、このアニメーションにどのようなキャラクターと感情が欲しいかを選択するために、バウンスの量を調整し始めることができます。

00:20:55.000 --> 00:20:59.000
異なるバウンス値が質的に異なると感じることがわかります。

00:20:59.000 --> 00:21:03.000
0のバウンスは、スムーズで緩やかな変化のように感じます。

00:21:03.000 --> 00:21:11.000
約15%のような小さなバウンスは、まだあまり弾力を感じませんが、長い尾はもう少し活発に感じます。

00:21:11.000 --> 00:21:17.000
そして、30%のようなより大きなバウンス値のために、あなたはいくつかの顕著な弾力性を感じ始めます。

00:21:17.000 --> 00:21:22.000
さらに進むと、かなり極端な量の弾力性を得ることができます。

00:21:22.000 --> 00:21:30.000
しかし、UI要素には誇張されすぎていると感じる可能性があるため、約0.4よりも高い値を使用することには注意する必要があります。

00:21:30.000 --> 00:21:33.000
では、実際にどのバウンス値を使うべきですか?

00:21:33.000 --> 00:21:40.000
わからない場合は、バウンス0のスプリングを使用してください。これは、バウンスを指定しない場合にも得られるものです。

00:21:40.000 --> 00:21:45.000
これにより、最も汎用性の高い素晴らしい汎用スプリングが得られます。

00:21:45.000 --> 00:21:51.000
その後、アニメーションをもう少し遊び心のある感じにしたい場合は、バウンスを追加し始めることができます。

00:21:51.000 --> 00:21:59.000
バウンスは、ジェスチャーの最後に使用される場合など、アニメーションをより物理的に感じさせたい場合にも意味があります。

00:21:59.000 --> 00:22:02.000
そして、あなたが心に留めておくべきことの1つは一貫性です。

00:22:02.000 --> 00:22:04.000
あなたのアプリがどのようなキャラクターを持っているか考えてみてください。

00:22:04.000 --> 00:22:07.000
それは深刻ですか、それとも遊び心がありますか?

00:22:07.000 --> 00:22:10.000
それはリラックスした気分になるべきですか、それともテンポが速いと感じるべきですか?

00:22:10.000 --> 00:22:16.000
それは、その周りのUIの感覚と一致していると感じる春の値を選択するのに役立ちます。

00:22:16.000 --> 00:22:20.000
だから、それはアニメーションにスプリングを使用する簡単なツアーです。

00:22:20.000 --> 00:22:24.000
春は素晴らしいアニメーションを作るために跳ね返る必要がないことを覚えておいてください。

00:22:24.000 --> 00:22:33.000
素晴らしい出発点である新しいスプリングプリセットのセットもありますが、さらに進む必要があるときに持続時間とバウンスを使用してカスタマイズできます。

00:22:33.000 --> 00:22:44.000
そして最も重要なことは、スプリングが持つすべてのユニークな利点を見た後、あなたのアプリを流動的で楽しい気分にさせるために春のアニメーションを使用することに興奮していることを願っています。

00:22:44.000 --> 00:22:45.000
ありがとうございます。

00:22:45.000 --> 23:59:59.000
♪ ♪

