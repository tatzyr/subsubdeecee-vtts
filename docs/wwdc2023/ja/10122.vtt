WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
ジャン=イヴ：「ウェブのメディアフォーマットを探る」へようこそ。

00:00:14.000 --> 00:00:28.000
私はWebKitエンジニアのJean-Yves Avenardです。今日は、画像とビデオに焦点を当ててSafariでサポートされているメディアフォーマットについて紹介し、Safari 17で利用可能ないくつかの新技術を紹介します。

00:00:28.000 --> 00:00:38.000
私たちはいくつかの新しい画像フォーマットのサポートを追加しており、最も一般的に見られるものについて少しプレゼンテーションした後、あなたのサイトに適したものを選ぶのを手伝うつもりです。

00:00:38.000 --> 00:00:45.000
次に、Safari 17に実装したまったく新しい技術でMSEを最適化する方法をご案内します。

00:00:45.000 --> 00:00:57.000
最後に、メディアソース拡張機能を使用してビデオにAirPlayサポートを追加する方法を紹介します。長年にわたり、3つのフォーマットが最も広く使用されています。

00:00:57.000 --> 00:01:09.000
それらはすべてのブラウザでサポートされており、簡単に作成および展開できますが、技術は過去10年間で大きな進歩を遂げており、新しい優れたフォーマットが利用可能になりました。

00:01:09.000 --> 00:01:13.000
既存のフォーマットはGIF、JPEG、PNGです。

00:01:13.000 --> 00:01:16.000
それらをもっと詳しく見てみましょう。

00:01:16.000 --> 00:01:28.000
GIF、または私の出生国で適切に言うように、「ジーフ」は、36年前に導入されたフォーマットで、シンプルなアニメーション、ミーム、ソーシャルメディアコンテンツに最適です。

00:01:28.000 --> 00:01:33.000
一度に8ビットの色に制限されているフルカラーパレットはサポートしていません。

00:01:33.000 --> 00:01:41.000
ロスレス形式であるため、ファイルサイズは非常に大きくなるため、より大きなアニメーションには適していません。

00:01:41.000 --> 00:01:45.000
それから、30年以上前に導入されたJPEGがあります。

00:01:45.000 --> 00:01:56.000
優れた機能はプログレッシブロードで、完全にロードされる前に画像の一部を見ることができ、ネットワーク速度が特に高速ではなかったときに特に便利です。

00:01:56.000 --> 00:02:01.000
色とディテールの多い写真やその他の画像に最適です。

00:02:01.000 --> 00:02:02.000
それは非可逆形式です。

00:02:02.000 --> 00:02:06.000
これは、圧縮プロセス中に一部の画像データが失われることを意味します。

00:02:06.000 --> 00:02:12.000
圧縮により、ファイルサイズが小さくなり、読み込み時間が短縮されました。

00:02:12.000 --> 00:02:17.000
GIFには非常に多くの制限があり、PNGは26年前に作成されました。

00:02:17.000 --> 00:02:24.000
PNGは透明性をサポートしているため、画像を互いに重ね合わせるのに便利です。

00:02:24.000 --> 00:02:33.000
単色の広い領域を持つ画像、ロゴなどのシャープなテキスト、またはWebKit Javascriptのリスフィッシュのようなイラストに最適です。

00:02:33.000 --> 00:02:40.000
それはロスレスで、JPEGと同様に圧縮されないので、色の多い大きな画像にはあまり適していません。

00:02:40.000 --> 00:02:49.000
GIFのように、それは置き換えるように設計されており、アニメーションをサポートしていますが、野生ではめったに見たことがありません。

00:02:49.000 --> 00:02:56.000
これらのフォーマットを使用することで、使用しているウェブブラウザに関係なく、すべてのユーザーにリーチできます。

00:02:56.000 --> 00:03:07.000
Safari 17は、レガシーフォーマットに加えて使用したいと思う追加の4つの超近代的なフォーマットをサポートしており、それが最も理にかなっていると思います。

00:03:07.000 --> 00:03:14.000
彼らは素晴らしく、ほとんどすべて交換可能ですが、それぞれが他のものよりも重要な利点を持っています。

00:03:14.000 --> 00:03:19.000
WebPがSafari 14とmacOS Big Surに追加されました。

00:03:19.000 --> 00:03:29.000
これは、高度な圧縮アルゴリズムを使用して、画質を犠牲にすることなく、より小さなファイルサイズを実現する最新の画像フォーマットです。

00:03:29.000 --> 00:03:37.000
WebPファイルは通常、以前の画像形式よりも小さく、ウェブサイトのパフォーマンスと読み込み時間を改善するのに役立ちます。

00:03:37.000 --> 00:03:47.000
WebPでは、ビデオのような品質でアニメーションを行うことができるので、サイズや色の欠如のためにGIFを使用するのは悪い考えです。

00:03:47.000 --> 00:03:58.000
Safari 17へのエキサイティングな追加は、高い圧縮率と画質を提供するように設計された新しい画像フォーマットであるJPEG-XLです。

00:03:58.000 --> 00:04:09.000
JPEG-XLは、「モジュラーエントロピーコーディング」と呼ばれる新しい圧縮アルゴリズムを使用しており、圧縮比の調整をより柔軟にしています。

00:04:09.000 --> 00:04:19.000
JPEGのような遅い接続で提供される可能性のある画像に適しているため、ユーザーは画像全体が完全に読み込まれる前に何かを見ることができます。

00:04:19.000 --> 00:04:34.000
JPEG-XLの主な特徴は、可逆変換できることです。つまり、既存のJPEGファイルからJPEG-XLへのデータ損失が発生しず、サイズを最大60%大幅に削減できることです。

00:04:34.000 --> 00:04:41.000
これは比較的新しいフォーマットなので、すべてのデバイスやブラウザで広くサポートされているわけではないかもしれません。

00:04:41.000 --> 00:04:51.000
AVIFは、AV1ビデオコーデックを使用して、画質を犠牲にすることなく高い圧縮率を実現するもう1つのモダンな画像フォーマットです。

00:04:51.000 --> 00:05:00.000
すべてのブラウザで広くサポートされており、ライブ写真に適しており、最大12ビットの色深度をサポートしています。

00:05:00.000 --> 00:05:04.000
また、最も幅広いサポートがあり、フォールバックとして含める必要があります。

00:05:04.000 --> 00:05:09.000
AVIFはJPEGよりも最大10倍小さくすることができます。

00:05:09.000 --> 00:05:15.000
Safari 17では、HEIFとも呼ばれるHEICのサポートを追加しました。

00:05:15.000 --> 00:05:22.000
これは、HEVCビデオコーデック圧縮アルゴリズムを使用して小さなファイルサイズを実現する画像形式です。

00:05:22.000 --> 00:05:30.000
しかし、他のプラットフォームでは広くサポートされていないため、おそらく代替フォーマットとして使用したいと思うでしょう。

00:05:30.000 --> 00:05:40.000
これは、iPhoneとiPadが写真を保存するために使用するフォーマットなので、変換なしでiPhoneからアップロードされた写真を直接処理できます。

00:05:40.000 --> 00:05:53.000
アプリ内でWKWebViewを使用して画像を表示する場合は、ハードウェアが加速され、迅速かつ効率的にレンダリングできるため、これは使用すべき形式です。

00:05:53.000 --> 00:06:02.000
しかし、JPEG-XL、AVIF、HEICの主な利点の1つは、広色域とHDRの両方をサポートすることです。

00:06:02.000 --> 00:06:12.000
何十億もの色をサポートする大きな色域により、より多くの色をファイルに保存し、画面に表示できます。

00:06:12.000 --> 00:06:21.000
HDRを使用すると、暗闇がどれほど暗くなり、明るさがどれほど明るくなり、どのくらいの光を取り込むことができるかをよりよく定義できます。

00:06:21.000 --> 00:06:34.000
一緒に、あなたは屋外の風景、またはコントラストの多い非常に明るいシーンにより多くの活気を得るか、またはそれらの美しく複雑な肌のトーンの完璧なレンダリングを持っています。

00:06:34.000 --> 00:06:45.000
あなたのウェブサイトが広く展開されているすべてのウェブブラウザをサポートし続けたいので、今後数年間、GIF、JPEG、PNGを提供する必要があるでしょう。

00:06:45.000 --> 00:06:55.000
ただし、これらの余分なフォーマットを提供することで、互換性を保ちながら、サイトの読み込みを高速化し、帯域幅を少なくすることができます。

00:06:55.000 --> 00:06:57.000
あなたは本当に選ぶ必要はありません。

00:06:57.000 --> 00:06:59.000
やり方をお見せしましょう。

00:06:59.000 --> 00:07:09.000
JPEG-XL画像で画像要素を宣言することは、それをサポートしていない古いブラウザやブラウザが壊れた画像を取得することを意味します。

00:07:09.000 --> 00:07:19.000
HTMLのピクチャ要素を使用すると、代替ソースを指定でき、ブラウザはサポートする形式を選択できます。

00:07:19.000 --> 00:07:26.000
最高のパフォーマンスを提供するフォーマットを優先して、複数の代替ソースを提供することもできます。

00:07:26.000 --> 00:07:31.000
ブラウザは、利用可能なフォーマットのリストを上から下まで見ます。

00:07:31.000 --> 00:07:35.000
したがって、ここでは、サポートされている場合は、最初にHEICを使用します。

00:07:35.000 --> 00:07:43.000
一致するものが見つからない場合、または途中でデコードが失敗した場合は、画像要素のソースのURLが選択されます。

00:07:43.000 --> 00:07:55.000
これは、ユーザーエージェントの文字列を見たり、ユーザーが使用するブラウザを心配したりすることなく、デバイスのサポートに関係なく、人々に適切なフォーマットを提供するのがいかに簡単かです。

00:07:55.000 --> 00:07:59.000
選ぶ必要はありません。お選びくださいブラウザにやらせてください。

00:07:59.000 --> 00:08:10.000
使用できる最新の画像フォーマットと、いつ使用するかがわかったので、ビデオを見てみましょう。具体的には、アダプティブストリーミングビデオに飛び込みましょう。

00:08:10.000 --> 00:08:19.000
ウェブサイトでのビデオプレゼンテーションの進化は魅力的なものであり、ウェブの初期の頃から長い道のりを歩んできました。

00:08:19.000 --> 00:08:25.000
ここでは、ウェブサイトでのビデオプレゼンテーションの進化における重要なマイルストーンをいくつか紹介します。

00:08:25.000 --> 00:08:31.000
ウェブの初期には、技術的な制限により、ビデオはウェブサイトで一般的に使用されていませんでした。

00:08:31.000 --> 00:08:35.000
ウェブサイトは主にテキストと静止画像で構成されていました。

00:08:35.000 --> 00:08:43.000
2000年代初頭、FlashやQuickTimeなどのブラウザプラグインは、ウェブサイトにビデオを追加する一般的な方法として登場しました。

00:08:43.000 --> 00:08:53.000
そして2010年にHTML5が導入され、これらのプラグインを必要とせずにWebページに直接ビデオを埋め込むことが可能になりました。

00:08:53.000 --> 00:09:02.000
これにより、ウェブサイトにビデオを追加することが容易になり、ビデオコンテンツの表示と再生方法の柔軟性と制御が高まりました。

00:09:02.000 --> 00:09:05.000
そして、WebKitはこの革命の最前線にいました。

00:09:05.000 --> 00:09:14.000
モバイルデバイスの台頭に伴い、ウェブサイトが小さな画面にビデオコンテンツを表示できることがますます重要になりました。

00:09:14.000 --> 00:09:21.000
これは、ウェブサイトがさまざまな画面サイズと向きに適応できるようにする新しい技術の開発につながりました。

00:09:21.000 --> 00:09:25.000
HTTPライブストリーミングは2009年にAppleによって導入されました。

00:09:25.000 --> 00:09:40.000
HLSの主な機能の1つは、ユーザーのインターネット接続速度とデバイス機能に基づいて可能な限り最高のビデオ品質の配信を可能にするアダプティブビットレートストリーミングのサポートです。

00:09:40.000 --> 00:09:50.000
HLSのアダプティブストリーミングは、ビデオコンテンツを通常2秒から10秒の長さの小さなチャンクまたはセグメントに分割することで機能します。

00:09:50.000 --> 00:10:02.000
各セグメントは複数のビットレートでエンコードされ、これらの異なるビットレートバージョンは、M3U8マルチバリアントプレイリストの形式でマニフェストファイルを介してクライアントに提供されます。

00:10:02.000 --> 00:10:07.000
HLSは、最適なバリアントを選択する際に素晴らしい仕事をしています。

00:10:07.000 --> 00:10:11.000
使い方はとても簡単で、エンドユーザーにとって最良のソリューションです。

00:10:11.000 --> 00:10:19.000
残念ながら、デスクトップでは、すべてのブラウザにHLSのサポートが含まれていたわけではありませんが、今日でもSafariのみがサポートしています。

00:10:19.000 --> 00:10:30.000
ウェブ開発者は、メディアデータの選択と転送、デスクトップでDRMedコンテンツを再生する機能など、より多くの制御と柔軟性を望んでいました。

00:10:30.000 --> 00:10:36.000
そして2013年、メディアソース拡張機能がW3C機関によって発行されました。

00:10:36.000 --> 00:10:53.000
Safari 8は、他のブラウザとともに、すぐにサポートを追加しました。メディアソース拡張機能（MSE）は、バッファリングと解決を管理するためのWebページにより多くの制御と責任を与えることによって、アダプティブストリーミングを可能にする低レベルのツールキットです。

00:10:53.000 --> 00:10:57.000
全体として、MSEはウェブ開発者にとってゲームチェンジャーでした。

00:10:57.000 --> 00:11:05.000
ウェブ上での高品質のストリーミング体験の開発を可能にし、現在最も使用されているウェブビデオ技術です。

00:11:05.000 --> 00:11:07.000
MSEにはいくつかの欠点があります。

00:11:07.000 --> 00:11:15.000
バッファレベル、ネットワークアクセスのタイミングと量、メディアバリアントの選択の管理は特に得意ではありません。

00:11:15.000 --> 00:11:23.000
これらの非効率性は、現代の汎用コンピュータのような比較的強力なデバイスではほとんど重要ではありません。

00:11:23.000 --> 00:11:35.000
モバイルデバイスの電力使用量はHLSネイティブプレーヤーよりもはるかに高かったため、MSEでは必要なバッテリー節約を達成できなかったため、MSEはiPhoneでは利用できませんでした。

00:11:35.000 --> 00:11:42.000
さまざまなサイトのすべてのテストは、MSEを可能にすることがバッテリー寿命の回帰につながることを証明しました。

00:11:42.000 --> 00:11:56.000
機能が狭いデバイスや、接続がせいぜい不安定なデバイスでは、MediaSource APIでHLSと同じ品質の再生を達成することも難しい場合があります。

00:11:56.000 --> 00:12:07.000
この理由の1つは、MSEがメディアデータのストリーミングに対するほとんどの制御をユーザーエージェントからページで実行されているアプリケーションに転送したことです。

00:12:07.000 --> 00:12:23.000
この制御の転送は、非効率性のポイントを追加し、ページは、最も安いネットワーク接続パスを求めるかもしれないように、ユーザーエージェントと同じレベルの知識や目標を持っておらず、これは通常、はるかに高い電力使用量につながりました。

00:12:23.000 --> 00:12:34.000
そして今年は、これらの欠点に対処したいと考え、MSEが提供する柔軟性とHLSの効率を組み合わせる方法を見つけるために懸命に働きました。

00:12:34.000 --> 00:12:45.000
そして、私は最高のMSEとHLSを素晴らしいものにする要素、マネージドメディアソースAPIを組み合わせたこの新しい技術を紹介できることを非常に嬉しく思います。

00:12:45.000 --> 00:12:54.000
「管理された」MediaSourceは、MediaSourceとその関連オブジェクトに対するより多くの制御がブラウザに渡されたものです。

00:12:54.000 --> 00:13:09.000
これにより、メディアウェブサイトの作成者は、制約された機能デバイスでストリーミングメディアの再生を簡単にサポートでき、ユーザーエージェントは利用可能なメモリとネットワーク機能の変更に対応できます。

00:13:09.000 --> 00:13:12.000
古いMSEの違いをいくつか見てみましょう。

00:13:12.000 --> 00:13:19.000
マネージドメディアソースは、より多くのメディアデータをバッファリングするのに良い時期をウェブページに伝えることで、電力使用量を減らすことができます。

00:13:19.000 --> 00:13:29.000
バッファリングしていない場合、セルラーモデムは長期間低電力状態になり、バッテリー寿命が延びます。

00:13:29.000 --> 00:13:40.000
システムが低メモリ状態になると、マネージドメディアソースは、未使用または放棄されたバッファリングされたメモリをインテリジェントにクリアし、ページをより効率的にします。

00:13:40.000 --> 00:13:49.000
マネージドメディアソースは、バッファリングがいつ開始および停止するかを追跡するため、低バッファとフルバッファ状態を検出するページのジョブがはるかに簡単になります。

00:13:49.000 --> 00:13:52.000
ブラウザはあなたのためにそれを行います。

00:13:52.000 --> 00:13:58.000
これらの改善により、Safariは5Gモデムを介してメディアリクエストを送信できます。

00:13:58.000 --> 00:14:07.000
これにより、サイトは超高速の5Gネットワークを使用して、電力使用への影響を最小限に抑えながら、信じられないほど迅速にメディアデータをロードすることができます。

00:14:07.000 --> 00:14:18.000
また、ライブショーを再生する必要がある場合は、マネージドメディアソースが自動的に検出し、利用可能な場合はLTEまたは4Gに切り替えて、バッテリー寿命を延ばします。

00:14:18.000 --> 00:14:20.000
あなたはまだ運転席にいます。

00:14:20.000 --> 00:14:26.000
どの解像度を取得するか、各セグメントをどのようにダウンロードするか、どこからダウンロードするかをまだ制御できます。

00:14:26.000 --> 00:14:32.000
マネージドメディアソースはヒントのみを提供し、MSEのより効率的なバージョンを提供します。

00:14:32.000 --> 00:14:44.000
ManagedMediaSourceを使用することで、帯域幅とバッテリー寿命を節約し、ユーザーはiPhoneだけでなく、iPadやMacでもビデオをより長く視聴できます。

00:14:44.000 --> 00:14:49.000
MSEからマネージドメディアソースへの移行がいかに簡単かをお見せしましょう。

00:14:49.000 --> 00:14:57.000
ビデオプレーヤーをMSEからマネージドメディアソースに移行するのは簡単で、ほんの数ステップで済みます。

00:14:57.000 --> 00:15:05.000
ここでは、MSE開発をテストするために過去に複数回使用した非常にシンプルなHTMLページを開きます。

00:15:05.000 --> 00:15:11.000
ビデオ要素を作成し、12秒のデータをロードしてから再生します。

00:15:11.000 --> 00:15:17.000
すべてのロジックは、実際には含まれているユーティリティファイルmediasource.jsで発生します。

00:15:17.000 --> 00:15:22.000
それを見てみましょう、特にrunWithMSEメソッドを見てみましょう。

00:15:22.000 --> 00:15:31.000
RunwithMSEは、ページが読み込まれるのを待ち、ビデオ要素を作成し、MediaSourceオブジェクトに添付し、HTMLの本文に追加します。

00:15:31.000 --> 00:15:35.000
まず、マネージドメディアソースが利用可能であることを確認する必要があります。

00:15:35.000 --> 00:15:43.000
これは、ManagedMediaSourceオブジェクトが定義されているドキュメントをチェックし、そうでない場合はMSEの使用にフォールバックすることで簡単に実行できます。

00:15:43.000 --> 00:15:48.000
次に、MediaSourceへの呼び出しをManagedMediaSource自体に置き換えます。

00:15:48.000 --> 00:16:05.000
もう1つの方法は、私の意見では、MediaSource自体を次のようにオーバーライドすることです。メソッドgetMediaSource（）を定義し、MediaSourceシムを設定します。

00:16:05.000 --> 00:16:12.000
そして今、MediaSourceを参照しているときはいつでも、実際には代わりにManagedMediaSourceを使用します。

00:16:12.000 --> 00:16:17.000
マネージドメディアソースは、常に古いMSEよりも最初の選択肢であるべきです。

00:16:17.000 --> 00:16:22.000
さて、私のHTMLページに戻ります。

00:16:22.000 --> 00:16:28.000
SourceBuffer（ManagedSourceBuffer）を作成した後、2つのイベントハンドラを追加します。

00:16:28.000 --> 00:16:38.000
Startstreamingは、新しいコンテンツの取得を開始し、管理対象のsourceBufferに追加する必要があるときにプレイヤーに通知します。

00:16:38.000 --> 00:16:44.000
そして、プレイヤーが新しいデータの取得を停止する必要があるときに伝えるために「エンドストリーミング」イベントを処理するためのものです。

00:16:44.000 --> 00:16:51.000
ユーザーエージェントは現在、十分なデータを持っていると判断し、低電力モードに入ることができます。

00:16:51.000 --> 00:16:56.000
このデモンストレーションでは、エンドストリーミングイベントハンドラは単なるプレースホルダです。

00:16:56.000 --> 00:17:03.000
MSEとは異なり、sourceBufferはデータを追加するときだけでなく、いつでもコンテンツを立ち退かせる可能性があります。

00:17:03.000 --> 00:17:16.000
MSEでは、バッファリングされた範囲が新しいデータを追加するときにのみ増加すると仮定することは決して良い考えではありませんでした。これにより、再生が停止し、MSE仕様は定期的にチェックすることを奨励しました。

00:17:16.000 --> 00:17:29.000
したがって、どのデータが追い出されたかを確認する必要があるbufferedchangeイベントのイベントハンドラを追加する必要があります。

00:17:29.000 --> 00:17:47.000
マネージドメディアソースイベントのガイダンスに従い、要素から要求された場合にのみデータを追加すると、iPhoneとiPadで5G速度にアクセスでき、ユーザーはより高い解像度、より短いリバッファー時間、および可能な限り最高のバッテリー寿命にアクセスできます。

00:17:47.000 --> 00:17:54.000
これで、Safari 17で利用可能な新しいManagedMediaSourceを使用して、アダプティブストリーミングを処理する準備が整いました。

00:17:54.000 --> 00:18:01.000
しかし、あなたが気にしているのはAppleデバイスだけなら、代わりにHLSを使う方が理にかなっているでしょう。

00:18:01.000 --> 00:18:08.000
ユーザーが続けたいと思うことがもう1つあります。お気に入りのテレビにAirPlayする機能です。

00:18:08.000 --> 00:18:14.000
ネイティブHLSを使用する大きな利点の1つは、AirPlayの自動サポートでした。

00:18:14.000 --> 00:18:21.000
AirPlayを使用すると、ソファに座っている間、携帯電話から大きなAirPlayデバイスにビデオを移動できます。

00:18:21.000 --> 00:18:30.000
Airplayには送信できるURLが必要ですが、これはMSEには存在しません。これにより、私たちも解決したい問題が発生しました。

00:18:30.000 --> 00:18:38.000
先ほど適切な画像形式を選択する際に、代替ソースを追加する方法を画像要素で示しました。

00:18:38.000 --> 00:18:41.000
ビデオ要素は同じメカニズムを提供します。

00:18:41.000 --> 00:18:55.000
HTTPライブストリーミングプレイリストをビデオの子ソース要素に追加するだけで、ユーザーがコンテンツをAirPlayすると、Safariはマネージドメディアソースから切り替え、AirPlayデバイスでHLSストリームを再生します。

00:18:55.000 --> 00:19:03.000
Safariは自動的にビデオプレーヤーのコントロールにAirPlayアイコンを追加し、ユーザーがビデオをAirPlayできるようにします。

00:19:03.000 --> 00:19:16.000
これがあまりにも複雑に聞こえる場合は、利用可能なときにマネージドメディアソースを自動的にサポートし、すべてのハードワークを行うHLS.jsなどのフレームワークを使用できます。

00:19:16.000 --> 00:19:26.000
ビデオの処理にHLS.jsを使用することは、HLSをネイティブにサポートしていないものでも、すべてのWebブラウザで非常に簡単で使用できます。

00:19:26.000 --> 00:19:31.000
まず、いつものようにHTMLファイルにビデオ要素を作成する必要があります。

00:19:31.000 --> 00:19:36.000
まず、HLSがブラウザでネイティブにサポートされているかどうかを確認します。

00:19:36.000 --> 00:19:41.000
もしそうなら、ビデオソース属性をマニフェストURLに直接設定できます。

00:19:41.000 --> 00:19:52.000
そうでない場合は、HLS.jsが実行できるかどうかを確認し、実行できる場合は、HLS.jsライブラリの新しいインスタンスを作成し、ID「my-video」でビデオ要素に添付します。

00:19:52.000 --> 00:19:57.000
次に、HLSプレイリストファイル、この場合はmy-video.m3u8をロードします。

00:19:57.000 --> 00:19:59.000
それでおそれ。

00:19:59.000 --> 00:20:05.000
これらの手順では、ほとんどのブラウザでHLSビデオを再生できるはずです。

00:20:05.000 --> 00:20:15.000
マネージドMSEを設計する際には、誤って何も取り残されることはなく、ユーザーが過去と同じレベルの機能を引き続き取得できるようにしたかったのです。

00:20:15.000 --> 00:20:23.000
したがって、Mac、iPad、iPhoneでマネージドMSEを有効にするには、プレイヤーはAirPlayソースの代替手段を提供する必要があります。

00:20:23.000 --> 00:20:35.000
それなしではManaged MSEにアクセスできますが、Remote Playback APIからメディア要素のdisableRemotePlaybackを呼び出すことで、AirPlayを明示的に無効にする必要があります。

00:20:35.000 --> 00:20:36.000
そして、それだけです。

00:20:36.000 --> 00:20:44.000
マネージドMSEは、SharePlay、空間化されたオーディオ、HDRなど、昨年追加したのと同じ優れたテクノロジーをすべてサポートしています。

00:20:44.000 --> 00:20:52.000
マネージドMSEは、macOSとiPad OSのSafari 17で、iPhoneの実験的なフラグの後ろで利用できます。

00:20:52.000 --> 00:20:56.000
私たちはこれがついにiPhoneに登場することにとても興奮しています。

00:20:56.000 --> 00:21:02.000
新しい画像フォーマットを試して、マネージドメディアソースを試してみてください。

00:21:02.000 --> 00:21:06.000
Safariでサイトを必ずテストしてください。

00:21:06.000 --> 00:21:17.000
また、Safari Technology Previewを隔週でリリースし、最新の新機能が利用可能になり、エンドユーザーに届く前にテストできます。

00:21:17.000 --> 00:21:29.000
積極的に開発されたすべてのプログラムと同様に、不具合やバグは時々発生し、それらに遭遇した場合にbugs.webkit.orgに報告していただければ幸いです。

00:21:29.000 --> 00:21:32.000
コメントや提案を提出することもできます。

00:21:32.000 --> 00:21:34.000
私たちはいつも聞いています。

00:21:34.000 --> 00:21:40.000
SafariのCSSの新機能については、「CSSの新機能」で学ぶことができます。

00:21:40.000 --> 00:21:48.000
そして、「Safari開発者機能の再発見」をチェックして、マネージドメディアソースを試すために機能フラグをオンにする方法について学んでください。

00:21:48.000 --> 00:21:50.000
ご覧いただきありがとうございます。

00:21:50.000 --> 23:59:59.000
♪ ♪

