WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:03.000 --> 00:00:10.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:10.000 --> 00:00:15.000
こんにちは！「共有スペースのためにiPadとiPhoneのアプリを強化する」へようこそ。

00:00:15.000 --> 00:00:16.000
私の名前はジョン・マークです。

00:00:16.000 --> 00:00:20.000
私はプラットフォーム互換性エンジニアです。

00:00:20.000 --> 00:00:31.000
ほとんどのiPadとiPhoneアプリは、すでに行ったハードワークを活用し、Appleの最新プラットフォームで動作させ、変更なしでうまく動作します。

00:00:31.000 --> 00:00:44.000
始めたばかりの場合は、まず「共有スペースでiPadとiPhoneアプリを実行する」を見て、システムの組み込み動作、機能の違い、テスト設定について学んでください。

00:00:44.000 --> 00:00:52.000
このビデオでは、iPadやiPhoneのアプリを素晴らしいアプリから、この新しいプラットフォームでくつろげるアプリに強化する方法について説明します。

00:00:52.000 --> 00:01:01.000
新しいインタラクション、ビジュアルアピアランスの変更、およびアプリが期待するメディア録画と再生機能を確認します。

00:01:01.000 --> 00:01:05.000
このプラットフォームでのインタラクションは楽しく、身近に感じます。

00:01:05.000 --> 00:01:10.000
重要な要素の1つは、新しい自然な入力技術です。

00:01:10.000 --> 00:01:15.000
タップを使用すると、人々はボタンを見て、指を一緒にタップして対話することができます。

00:01:15.000 --> 00:01:24.000
タップして切り替えたり、タップしたり、長押ししたり、スワイプしたりしてスライダーを操作したり、ボタンをタップしたりできます。

00:01:24.000 --> 00:01:31.000
直接タッチするには、アプリに手を差し伸べ、1本の指でスペース内のボタンをタッチする必要があります。

00:01:31.000 --> 00:01:40.000
インタラクション方法に関係なく、ボタンはインタラクションの精度に役立つ継続的な視覚的フィードバックを提供します。

00:01:40.000 --> 00:01:44.000
このビデオでは、カーソルは人が見ている場所を表しています。

00:01:44.000 --> 00:01:50.000
ボタンを見るとき、ハイライトホバー効果はコントロールの色を着色し、フォーカスがどこにあるかを理解するのに役立ちます。

00:01:50.000 --> 00:01:55.000
このリストを見ながら、各項目がハイライトされていることに注意してください。

00:01:55.000 --> 00:02:02.000
そのハイライトは左または右の焦点に続くので、何が起こっているのかは明らかです。

00:02:02.000 --> 00:02:07.000
ホバー効果は、人々がどこを見ているかを知らせるためにコントロールに存在します。

00:02:07.000 --> 00:02:11.000
非アクティブなコントロールはホバー効果を受けません。

00:02:11.000 --> 00:02:15.000
システムコントロールは、これらすべてのホバー効果を処理します。

00:02:15.000 --> 00:02:20.000
標準のコントロールのみを使用している場合は、ここで変更することなくロックンロールする準備ができています。

00:02:20.000 --> 00:02:26.000
カスタムコントロールを構築する場合、ホバーエフェクトにはチューニングが必要になる場合があります。

00:02:26.000 --> 00:02:31.000
以下は、iPadのカードベースのインターフェースを備えたアプリの例です。

00:02:31.000 --> 00:02:37.000
各カードには、写真、タイトル、日付、メニューボタンが含まれています。

00:02:37.000 --> 00:02:40.000
これはシミュレーターで実行されている同じアプリです。

00:02:40.000 --> 00:02:44.000
メニューボタンはシステムコントロールなので、すでに期待どおりに機能しています。

00:02:44.000 --> 00:02:51.000
ただし、各カードは.onTap修飾子を備えた単純なVStackであるため、ホバー効果を受け取りません。

00:02:51.000 --> 00:02:58.000
そのカード全体がタップターゲットであるため、利用可能なインタラクションがあることを人々に知らせるためにホバー効果が必要です。

00:02:58.000 --> 00:03:02.000
それを修正するためにそれらのカードの1つに集中しましょう。

00:03:02.000 --> 00:03:10.000
ボタンのようなシステムコントロールは、ホバー効果を自動的に受け取るので、ここでメニューとして使用されるボタンにはすでにホバー効果があります。

00:03:10.000 --> 00:03:16.000
ただし、この例では、カード全体をクリックして詳細を表示します。

00:03:16.000 --> 00:03:25.000
VStackに.hoverEffectを追加することで、カード全体がインタラクションの更新に利用可能になり、タップ可能であることを人々に知らせます。

00:03:25.000 --> 00:03:32.000
多くのカスタムビデオプレーヤーはヒットターゲットを最適化しているので、人々は彼らと対話するためにそれほど正確である必要はありません。

00:03:32.000 --> 00:03:42.000
iPadのカスタムビデオプレーヤーのこの例では、タップターゲットは、スキップフォワードボタンとスキップバックボタンのシンボルよりも大幅に大きくなっています。

00:03:42.000 --> 00:03:49.000
ここの境界線のボックスは、人々が対話できるタップターゲットのサイズを示しています。

00:03:49.000 --> 00:03:56.000
シミュレータでは、ホバー効果がこれらのタップターゲットを強調表示し、エリア全体にタップ可能な領域が表示されます。

00:03:56.000 --> 00:04:02.000
共有スペースの同じ例では、ホバー効果のある非表示の属性が表示されるようになりました。

00:04:02.000 --> 00:04:09.000
この外見の変化は真実を暴露しているが、正しいとは感じない。

00:04:09.000 --> 00:04:18.000
例を拡大すると、既存のタップ動作を外観を減らして維持するには、.contentShape修飾子にカスタム形状を追加します。

00:04:18.000 --> 00:04:29.000
カスタムシェイプを使用することで、アプリはタップ可能な領域よりも小さくなる.contentShape修飾子に原点とサイズを提供できます。

00:04:29.000 --> 00:04:34.000
このビデオでは、ボタンを直接見ている人にはホバー効果が表示されます。

00:04:34.000 --> 00:04:43.000
そして、この変更により、ホバー効果の範囲外をタップすると、iPadとiPhoneの経験からの期待と一致します。

00:04:43.000 --> 00:04:45.000
完全な例でシミュレータに戻ります。

00:04:45.000 --> 00:04:52.000
このカスタムシェイプでは、ホバー効果はボタンだけに表示されますが、ボタンの外側をタップすることができます。

00:04:52.000 --> 00:04:54.000
素晴らしい！

00:04:54.000 --> 00:05:03.000
ほとんどの場合、システムコントロールのホバー効果はうまく機能します。しかし、ホバー効果をカスタマイズする機能は強力です。

00:05:03.000 --> 00:05:12.000
新しいホバーエフェクトAPIを使用すると、アプリはカスタムボタン、カスタムシェイプのホバーエフェクトを作成したり、必要に応じてコントロールをオプトアウトしたりできます。

00:05:12.000 --> 00:05:14.000
それを行う方法を調べてみましょう。

00:05:14.000 --> 00:05:20.000
.buttonStyleは、アプリ内のすべてのボタンにカスタムスタイルを一貫して適用するのに最適な方法です。

00:05:20.000 --> 00:05:25.000
カスタムスタイリングを適用すると、ホバー効果をオフにします。

00:05:25.000 --> 00:05:32.000
カスタム .buttonStyle ボタンでホバー効果を再度有効にするには、.hoverEffect() 修飾子をアプリ要素に追加します。

00:05:32.000 --> 00:05:37.000
これがカスタムボタンスタイルの私のシンプルなボタンです。

00:05:37.000 --> 00:05:46.000
カスタムボタンスタイルを見ると、ここでは、カスタムスタイリングでボタンにホバー効果を追加するために.hoverEffect修飾子を追加する必要があります。

00:05:46.000 --> 00:05:49.000
多くのアプリには、楽しくてカスタムインターフェースがあります。

00:05:49.000 --> 00:05:58.000
この養蜂アプリの例では、ボタンはハニカムであり、各ハニカムセルは独自のタップターゲットです。

00:05:58.000 --> 00:06:05.000
カスタムシェイプボタンを実装するアプリは、ホバー効果をレンダリングする方法をシステムに通知する必要があります。

00:06:05.000 --> 00:06:17.000
ここのフレーム幅は、形状が占める領域よりも大きいため、デフォルトのシステムが提供するホバー効果は、形状に無制限のボタンフレーム全体をカバーしています。

00:06:17.000 --> 00:06:24.000
カスタムシェイプを.contentShape修飾子に渡すことで、ホバーエフェクトはボタンの境界にトリミングされます。

00:06:24.000 --> 00:06:26.000
ここにそれを付け加えましょう。

00:06:26.000 --> 00:06:34.000
人々が個々のボタンを見ると、ホバー効果がボタンの形状のジオメトリにトリトリムされるので、今では完璧です。

00:06:34.000 --> 00:06:40.000
アプリの状態のために無効になっているシステムコントロールは、自動的にホバー効果を取得しません。

00:06:40.000 --> 00:06:46.000
アプリが特定のインターフェイス要素を強調したい場合は、個々のアイテムをオプトアウトできます。

00:06:46.000 --> 00:06:53.000
人々は、ホバー効果がシステム全体で明らかで一貫していることを期待しているので、控えめにオフにする必要があります。

00:06:53.000 --> 00:07:00.000
このシステムは、各手が別々のタッチであるため、最大2つの同時入力を受け入れます。

00:07:00.000 --> 00:07:08.000
カスタムジェスチャーリコグナイザもサポートされていますが、自然な入力期待でスムーズに実行するために更新する必要があるかもしれません。

00:07:08.000 --> 00:07:15.000
ゲーム、または迅速または同時入力を必要とする他のアプリは、ゲームコントローラーをサポートする必要があります。

00:07:15.000 --> 00:07:19.000
iPadとiPhoneのアプリは、長い間、ゲームコントローラーのサポートを示すことができました。

00:07:19.000 --> 00:07:25.000
このプラットフォームでは、追加の入力方法にとってさらに重要です。

00:07:25.000 --> 00:07:35.000
GCSupports ControllerUserInteractionをInfo.plistに含め、ゲームコントローラー機能を追加することで、アプリの製品ページにバッジを追加します。

00:07:35.000 --> 00:07:46.000
これにより、App Storeを使用してゲームを見つける人々とのコミュニケーションが改善され、すべてのプラットフォームでゲームコントローラーの可用性がさらに明確になります。

00:07:46.000 --> 00:07:55.000
App Storeのゲームコントローラーとゲームの詳細については、ビデオ「ゲームコントローラーの進歩」と「空間コンピューティングのための素晴らしいゲームを構築する」をご覧ください。

00:07:55.000 --> 00:08:01.000
このプラットフォームで実行されているiPadとiPhoneのアプリは、iPadのライトモードの外観と一致します。

00:08:01.000 --> 00:08:03.000
ほとんどの場合、それは素晴らしく見えます。

00:08:03.000 --> 00:08:10.000
システム標準のコントロール、レイアウト、色を使用している場合、ここには新しい仕事はありません。

00:08:10.000 --> 00:08:20.000
このシステムは、動的コンテンツスケーリングを使用してレンダリングを最適化するため、すべての画像とテキストは、どの距離からでも、どの角度でも常にシャープです。

00:08:20.000 --> 00:08:26.000
最高の体験を提供するために、ベクターベースのコンテンツを使用してください。

00:08:26.000 --> 00:08:32.000
iPadとiPhoneのプロンプトはモーダルに表示されるので、続行する前にプロンプトを操作する必要があります。

00:08:32.000 --> 00:08:37.000
この新しいプラットフォームでは、プロンプトはモーダルに表示されません。

00:08:37.000 --> 00:08:45.000
位置情報の許可を求める、Appleでサインイン、OAuthなどのプロンプトは、続行する前に処理する必要はありません。

00:08:45.000 --> 00:08:49.000
これらのインターフェースは、独自のクロムとウィンドウ体験を生み出します。

00:08:49.000 --> 00:08:57.000
アプリは、プロンプトが表示されるケースを認識して処理する必要がありますが、すぐにキャンセルや成功コールバックは得られない場合があります。

00:08:57.000 --> 00:09:03.000
コンテンツをキャプチャ、共有、投稿することは、自分自身を表現するための素晴らしい方法です。

00:09:03.000 --> 00:09:07.000
このプラットフォームでは、アプリが知っておくべきいくつかの違いがあります。

00:09:07.000 --> 00:09:11.000
複数の外部カメラと内部カメラがあります。

00:09:11.000 --> 00:09:15.000
ただし、これらのカメラの多くはアプリでは使用できません。

00:09:15.000 --> 00:09:23.000
ディスカバリーセッションを使用して、使用できるカメラとマイクを検出することが重要です。

00:09:23.000 --> 00:09:31.000
アプリが優れたキャプチャ体験を確実にするために、AVCaptureDeviceディスカバリーセッションを使用してハードウェアの可用性を確認します。

00:09:31.000 --> 00:09:38.000
さらに、他のプラットフォームと同様に、使用前に許可を求める必要があります。

00:09:38.000 --> 00:09:48.000
最後に、特定のハードウェアやソフトウェアのバージョンに言及することなく、使用を人々に知らせるために、承認プロンプト文字列を一般化します。

00:09:48.000 --> 00:09:55.000
アプリがカメラとマイクの可用性を要求すると、iPadやiPhoneとは異なる値が返されることを期待します。

00:09:55.000 --> 00:10:00.000
マイクを照会すると、アプリは単一の.frontロケーションマイクを受け取ります。

00:10:00.000 --> 00:10:04.000
カメラを照会するとき、アプリは2つのカメラを見つけます。

00:10:04.000 --> 00:10:09.000
.Backカメラは、カメラグリフのない黒いカメラフレームを返します。

00:10:09.000 --> 00:10:14.000
これは、バックカメラの可用性を想定したアプリをサポートする機能しないカメラです。

00:10:14.000 --> 00:10:19.000
フロントカメラを照会するとき、アプリは単一のコンポジットカメラを見つけます。

00:10:19.000 --> 00:10:28.000
デバイスに空間ペルソナが見つからない場合、カメラフレームはアプリに戻りません。

00:10:28.000 --> 00:10:36.000
AVRoutePickerViewとPicture in Pictureは、このプラットフォームでは利用できません。これは、システムが提供するプレーヤーに反映されています。

00:10:36.000 --> 00:10:42.000
カスタムプレーヤーを実装するアプリは、これらのコントロールを表示する前に、両方の可用性を確認する必要があります。

00:10:42.000 --> 00:10:45.000
最後に、このプラットフォームは一度削除されるとロックされます。

00:10:45.000 --> 00:10:55.000
バックグラウンドオーディオを利用するアプリは、デバイスがロックされているときにこのバックグラウンドモードがなくなり、完全に停止されるため、この違いを考慮する必要があります。

00:10:55.000 --> 00:11:01.000
メディアをインポートするアプリは、キャプチャハードウェアが利用できない場合は、代替ソースを考慮する必要があります。

00:11:01.000 --> 00:11:09.000
iCloudやドキュメントやフォトピッカーなどのコンテンツピッカーなどのオプションは、優れた選択肢です。

00:11:09.000 --> 00:11:18.000
さらに、VisionKitのVNDocumentCameraViewControllerを使用するアプリは、近くのデバイスのContinuity Cameraで自動的にキャプチャします。

00:11:18.000 --> 00:11:25.000
これらの代替案は、既存のiPadおよびiPhoneアプリにさらに多くのメディアインポートオプションをもたらします。

00:11:25.000 --> 00:11:29.000
iPadとiPhoneのアプリは、この新しいプラットフォームでうまく動作します。

00:11:29.000 --> 00:11:32.000
ホバーエフェクトがすべてのインタラクティブコントロールに追加されていることを確認してください。

00:11:32.000 --> 00:11:38.000
ゲームの場合は、コントローラーのサポートを追加して、プレイヤーが引き続き素晴らしい体験をできるようにします。

00:11:38.000 --> 00:11:46.000
最後に、使用前に可用性を確認して、カメラとマイクの存在に関する仮定を確認してください。

00:11:46.000 --> 00:11:51.000
これで、この新しいプラットフォーム用にiPadとiPhoneのアプリを最適化する方法がわかりました。

00:11:51.000 --> 00:11:55.000
共有スペースであなたのアプリを使うのを楽しみにしています。

00:11:55.000 --> 23:59:59.000
♪

