WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
クリス:こんにちは、私はクリスです。すぐに、ジェイソンが参加します。

00:00:14.000 --> 00:00:20.000
「XcodeとXcode Cloudでディストリビューションを簡素化」へようこそ。

00:00:20.000 --> 00:00:25.000
開発者として、私たちは最高の仕事を共有する前に反復する必要があります。

00:00:25.000 --> 00:00:38.000
本当に洗練されたアプリを作るには、アプリをすばやく簡単に構築し、テストし、配布し、フィードバックを得て、そのフィードバックを統合できる必要があります。

00:00:38.000 --> 00:00:41.000
幸いなことに、私たちはその仕事に適したツールを持っています。

00:00:41.000 --> 00:00:47.000
TestFlightを使用して、チーム、友人、家族にアプリを提供することから始めることができます。

00:00:47.000 --> 00:00:57.000
準備ができたら、アプリをApp Storeに提出するか、アプリをAppleに公証して顧客と直接共有することができます。

00:00:57.000 --> 00:01:02.000
もちろん、これらのチャネルに配布するための優れたツールがあります。Xcodeを使用できます。

00:01:02.000 --> 00:01:11.000
Xcodeオーガナイザーウィンドウにより、新しい合理化されたオプションを使用してワンクリックで配布することがこれまで以上に簡単になりました。

00:01:11.000 --> 00:01:15.000
そして、Xcode Cloudを使って努力を強化することができます。

00:01:15.000 --> 00:01:23.000
Xcode Cloudを使用すると、コードの変更をプッシュするたびにアプリの構築と共有を自動化するワークフローを作成できます。

00:01:23.000 --> 00:01:28.000
今日は、TestFlightでテスターにアプリを送信する方法を紹介します。

00:01:28.000 --> 00:01:32.000
その後、ジェイソンはMacで顧客のために公証を使用する方法を紹介します。

00:01:32.000 --> 00:01:36.000
始めましょう。

00:01:36.000 --> 00:01:39.000
私は「裏庭の鳥」プロジェクトを開いています。

00:01:39.000 --> 00:01:44.000
私は異なるアクセントカラーで実験しているgitブランチに取り組んでいます。

00:01:44.000 --> 00:01:48.000
これらの新しい赤い色をTestFlightで私のチームと共有したいと思います。

00:01:48.000 --> 00:01:52.000
そうするための最初のステップは、「アーカイブ」を作成することです。

00:01:52.000 --> 00:01:54.000
しかし、アーカイブとは何ですか?

00:01:54.000 --> 00:01:57.000
アーカイブはアプリの記録です。

00:01:57.000 --> 00:02:01.000
これは、アプリの最適化されたリリースビルドのためのコンテナです。

00:02:01.000 --> 00:02:07.000
これには、ローカルシンボリック化のためのデバッグシンボル、または「dSYM」が含まれています。

00:02:07.000 --> 00:02:13.000
アーカイブの内容は、選択した目的地に応じて最終的に再パッケージ化されます。

00:02:13.000 --> 00:02:15.000
では、どのようにアーカイブしますか?

00:02:15.000 --> 00:02:20.000
非常にシンプルで、製品メニューアーカイブを使用します。

00:02:20.000 --> 00:02:24.000
そして、私は現在、iPhoneシミュレーターが選択されていることに注意してください。

00:02:24.000 --> 00:02:33.000
Xcodeはスマートなことを行い、任意のiOSデバイスで実行するために必要なすべてのCPUアーキテクチャで私のアーカイブを構築します。

00:02:33.000 --> 00:02:39.000
Xcodeがアーカイブを作成した後、次のステップは「アプリの配布」ボタンをクリックすることです。

00:02:39.000 --> 00:02:44.000
Xcode 15の新機能では、いくつかの合理化されたオプションのいずれかから選択できます。

00:02:44.000 --> 00:02:51.000
これらのオプションのいずれかを選択すると、ワンクリックでアプリを簡単にアップロードまたはエクスポートできます。

00:02:51.000 --> 00:02:56.000
それでは、これらの合理化されたオプションのそれぞれを探りましょう。

00:02:56.000 --> 00:03:05.000
「TestFlightとApp Store」オプションを使用すると、TestFlightの全機能とApp Storeに送信できます。

00:03:05.000 --> 00:03:09.000
または、新しい「TestFlight内部のみ」オプションを使用することもできます。

00:03:09.000 --> 00:03:14.000
この種のビルドはチームと共有できますが、App Storeに送信することはできません。

00:03:14.000 --> 00:03:20.000
これは、開発ブランチを反復している間にフィードバックを得るのに最適です。

00:03:20.000 --> 00:03:25.000
アプリの最適化されたビルドをエクスポートしたい場合は、デバッグオプションを使用できます。

00:03:25.000 --> 00:03:33.000
このビルドは、チームの登録済みデバイスにインストールすることも、リリーステストオプションを使用することもできます。

00:03:33.000 --> 00:03:37.000
このオプションは、App Storeで署名されている方法と同様に、アプリに署名します。

00:03:37.000 --> 00:03:42.000
このビルドは、チームの登録済みデバイスにインストールできます。

00:03:42.000 --> 00:03:46.000
これらの合理化された各オプションは、推奨設定を使用します。

00:03:46.000 --> 00:03:51.000
これらの推奨される設定には、自動署名を使用してアプリに再署名することが含まれます。

00:03:51.000 --> 00:03:54.000
設定は必要ありません。

00:03:54.000 --> 00:03:59.000
サーバー側のクラッシュログシンボネーション用のアプリシンボルを埋め込む。

00:03:59.000 --> 00:04:03.000
アプリのビルド番号を自動インクリメントして、App Storeの準備をします。

00:04:03.000 --> 00:04:07.000
そして、Swift埋め込みディリブからシンボル情報を削除します。

00:04:07.000 --> 00:04:10.000
これにより、アプリが小さくなります。

00:04:10.000 --> 00:04:15.000
合理化されたオプションとして利用できないものが必要な場合は、いつでも「カスタム」を選択できます。

00:04:15.000 --> 00:04:20.000
「カスタム」では、推奨される設定以上のものから選択できます。

00:04:20.000 --> 00:04:24.000
さて、私はこのビルドを私のチームのメンバーに送る準備ができています。

00:04:24.000 --> 00:04:36.000
私はいくつかの変更をすばやく試しているだけで、このビルドをApp Storeに公開したくないので、「TestFlight内部のみ」オプションを選択して「配布」をクリックします。

00:04:36.000 --> 00:04:39.000
そして、それだけです。私は何の質問にも答える必要はありません。

00:04:39.000 --> 00:04:44.000
Xcodeは正しいことをするだけです。

00:04:44.000 --> 00:04:54.000
Xcodeはアプリを再パッケージ化し、シンボルを含めて再署名し、TestFlightにアップロードしています。

00:04:54.000 --> 00:04:58.000
そして、ちょうどそのように、アプリがアップロードされます。

00:04:58.000 --> 00:05:06.000
その後、私のアプリがアップロードされて処理された後、アプリがテストする準備ができていることを知らせるこの素敵な新しい通知を受け取ります。

00:05:06.000 --> 00:05:11.000
ビルドの処理が完了したら、SafariでApp Store Connectに行くことができます。

00:05:11.000 --> 00:05:18.000
そこから、TestFlightのアプリ「Backyard Birds」にアクセスして、テストの詳細を編集できます。

00:05:18.000 --> 00:05:24.000
私のチームがデバイスでTestFlightを使用すると、この新しいビルドで何をテストするかについてすべて読むことができます。

00:05:24.000 --> 00:05:28.000
そして、彼らはTestFlightを使って、テキストフィードバック付きのスクリーンショットを私に送ることができます。

00:05:28.000 --> 00:05:33.000
後でXcodeオーガナイザーウィンドウでそのフィードバックを表示できます。

00:05:33.000 --> 00:05:39.000
Xcodeオーガナイザーの「フィードバック」タブで、ジェイソンがメッセージ付きのスクリーンショットを送ってくれました。

00:05:39.000 --> 00:05:42.000
彼は赤い色のボタンをあまり気にしていないようだ。

00:05:42.000 --> 00:05:47.000
ああ、いや、それは良くない。私たちはもっとやるべき仕事があると思います。

00:05:47.000 --> 00:05:49.000
私たちは多くのことを成し遂げました。

00:05:49.000 --> 00:05:56.000
Xcodeを使用してアプリのビルドをアーカイブし、ワンクリックでTestFlightにアップロードしました。

00:05:56.000 --> 00:06:01.000
私たちはチームに何をテストするかについていくつかのメモを与え、いくつかのフィードバックを受け取りました。

00:06:01.000 --> 00:06:05.000
私たちは素晴らしいアプリを構築し、洗練する途中です。

00:06:05.000 --> 00:06:09.000
アプリの構築と配布は、ジャグリングするのに大変です。

00:06:09.000 --> 00:06:15.000
Xcode Cloudは配布のタスクを自動化し、開発に集中できるようにします。

00:06:15.000 --> 00:06:20.000
Xcode Cloudは、Appleによって構築された継続的インテグレーションおよび配信サービスです。

00:06:20.000 --> 00:06:24.000
それはAppleの開発者のために特別に設計されています。

00:06:24.000 --> 00:06:36.000
Xcode Cloudを設定して、機能ブランチに変更を送信し、そのビルドをTestFlightに送信し、テスト内容に関するメモを含めるときにビルドを自動的に作成するように設定したいと思います。

00:06:36.000 --> 00:06:40.000
これらすべてを行うには、Xcodeクラウドワークフローを使用できます。

00:06:40.000 --> 00:06:43.000
私はすでに私たちのアプリのワークフローを追加しました。

00:06:43.000 --> 00:06:47.000
それを編集してTestFlightのサポートを追加します。

00:06:47.000 --> 00:06:51.000
まず、統合メニューを使用してワークフローを管理します。

00:06:51.000 --> 00:06:56.000
アーカイブアクションを編集して、TestFlightのサポートを追加します。

00:06:56.000 --> 00:07:01.000
そして、ワークフローにポストアクションを追加して、ビルドを内部テスターのグループに送信します。

00:07:01.000 --> 00:07:03.000
飛び込みましょう。

00:07:03.000 --> 00:07:10.000
新しい統合メニューとワークフローの管理をクリックすることから始めます。

00:07:10.000 --> 00:07:20.000
以前に取り組んでいた「内部フィードバック」ワークフローを選択し、ギアボタンを使用してワークフローを編集します。

00:07:20.000 --> 00:07:28.000
私は以前、文字列「features/」で始まるブランチで変更が発生するたびに開始するようにこのワークフローを設定しました。

00:07:28.000 --> 00:07:33.000
これには、私が取り組んでいる accent_color 機能ブランチが含まれます。

00:07:33.000 --> 00:07:37.000
TestFlightへのデプロイを開始するには、アーカイブアクションを編集します。

00:07:37.000 --> 00:07:42.000
さて、私はプロトタイピングしている機能のためにこのワークフローを指定しました。

00:07:42.000 --> 00:07:49.000
私はこれらのビルドがApp Storeに行くことに興味がないので、「TestFlight（内部テストのみ）」を選択します。

00:07:49.000 --> 00:07:53.000
これらのビルドは、私のチームの選ばれたメンバーとのみ共有したい。

00:07:53.000 --> 00:07:58.000
これを行うには、TestFlight内部ポストアクションを追加します。

00:07:58.000 --> 00:08:01.000
そして、これらの新機能に興味を持っているTestFlightグループを追加します。

00:08:01.000 --> 00:08:04.000
私は彼らを「羽の鳥」と呼びました。

00:08:04.000 --> 00:08:10.000
私は「追加」「保存」します...

00:08:10.000 --> 00:08:12.000
そして「完了」。

00:08:12.000 --> 00:08:15.000
今、私たちはすべてセットアップされ、行く準備ができています。

00:08:15.000 --> 00:08:22.000
この accent_colorブランチに変更をプッシュするたびに、新しいビルドが「Birds of a Feather」グループに送信されます。

00:08:22.000 --> 00:08:26.000
アクセントの色を調整して、変更をプッシュしてみましょう。

00:08:26.000 --> 00:08:40.000
アクセントカラーを赤から紫に変更し、シミュレーターでビルドして実行してチェックしようと思います。

00:08:40.000 --> 00:08:42.000
紫色のボタンは私にはもっと良く見えます。

00:08:42.000 --> 00:08:45.000
ジェイソンが同意することを祈ろう。

00:08:45.000 --> 00:08:52.000
これらの変更をプッシュするには、統合メニューを使用して[コミット]をクリックします。

00:08:52.000 --> 00:08:55.000
変更されたファイルを確認できるようになりました。

00:08:55.000 --> 00:09:00.000
この最初のファイル「Contents.json」では、アクセントの色を赤から紫に変更しました。

00:09:00.000 --> 00:09:02.000
それは理にかなっています。

00:09:02.000 --> 00:09:05.000
カスタムビルドスクリプトにも取り組んでいます。

00:09:05.000 --> 00:09:14.000
このスクリプトは、Xcode Cloudがgitコミットメッセージを収集し、TestFlight上のビルドのテスト詳細として含めるために使用されます。

00:09:14.000 --> 00:09:15.000
これは超かっこいい。

00:09:15.000 --> 00:09:20.000
Xcode Cloudは、テストするもののメモを自動的に更新できるようになりました。

00:09:20.000 --> 00:09:28.000
これの設定方法の詳細については、「アプリのベータリリースでテスター向けのメモを含める」の開発者ドキュメントをご覧ください。

00:09:28.000 --> 00:09:32.000
このドキュメントには、私が使用しているビルドスクリプトが記載されています。

00:09:32.000 --> 00:09:37.000
「ボタンが紫色になりました」というコミットメッセージを追加します。

00:09:37.000 --> 00:09:40.000
それは私が何を変えたかを私のチームに明確にするでしょう。

00:09:40.000 --> 00:09:44.000
「Stage All」ボタンをクリックして、これらすべての変更をステージングします。

00:09:44.000 --> 00:09:47.000
「コミット」ドロップダウンボタンを使用してコミットしてプッシュします。

00:09:47.000 --> 00:09:53.000
そして、プッシュをクリックしてリモートリポジトリにアップロードします。

00:09:53.000 --> 00:09:54.000
それでおそれ。

00:09:54.000 --> 00:10:00.000
そのプッシュにより、Xcode Cloudはアーカイブされ、TestFlightにデプロイされています。

00:10:00.000 --> 00:10:04.000
後で、レポートナビゲーターでビルドを確認できます。

00:10:04.000 --> 00:10:09.000
「内部フィードバック」ワークフローで最新のビルドを選択します。

00:10:09.000 --> 00:10:16.000
そして、ありがたいことに、アーカイブアクションとTestFlight内部テストポストアクションは成功しました。

00:10:16.000 --> 00:10:23.000
デバイスでTestFlightのビルドをチェックすると、「ボタンが紫色になりました」という便利なテストノートが含まれています。

00:10:23.000 --> 00:10:25.000
そして、ここには何がありますか?

00:10:25.000 --> 00:10:28.000
ジェイソンはオーガナイザーウィンドウにフィードバックを送りました。

00:10:28.000 --> 00:10:30.000
彼は新しい紫色のボタンが好きなようだ。

00:10:30.000 --> 00:10:33.000
さて、私たちはそれらを保つことができると思います。

00:10:33.000 --> 00:10:37.000
素晴らしい。私たちは今、理想的なセットアップを持っています。

00:10:37.000 --> 00:10:46.000
Xcode Cloudの助けを借りて、この機能ブランチに変更をプッシュすると、チームはテストに関する有用な情報を含む私のアプリの新しいビルドを受け取ります。

00:10:46.000 --> 00:10:51.000
フィードバックを継続的に統合し、改善を展開できるようになりました。

00:10:51.000 --> 00:10:57.000
私は今、開発に集中し、可能な限り最高の結果を出荷するために解放されています。

00:10:57.000 --> 00:11:03.000
さて、XcodeとXcode Cloudを使用してTestFlightでアプリを配布することについて多くのことを学びました。

00:11:03.000 --> 00:11:07.000
今、ジェイソンは公証の使用についてすべて教えてくれます。

00:11:07.000 --> 00:11:08.000
ジェイソン:ありがとう、クリス。

00:11:08.000 --> 00:11:16.000
App StoreはAppleの顧客にリーチするのに最適な方法ですが、Macアプリを直接ホストして販売したい場合は、アプリを公証してもらうことができます。

00:11:16.000 --> 00:11:23.000
アプリを公証することで、ソフトウェアの安全性がAppleによって検証されたことをユーザーに確信できます。

00:11:23.000 --> 00:11:27.000
では、公証はどのように機能しますか?

00:11:27.000 --> 00:11:34.000
まず、アプリのアーカイブを作成し、それをAppleの公証人サービスにアップロードし、そこで悪意のあるコンテンツがスキャンされます。

00:11:34.000 --> 00:11:41.000
そのプロセスが完了すると、公証人サービスはチケットを生成し、アプリにホッチキスで留めることができます。

00:11:41.000 --> 00:11:46.000
これで、公証されたアプリを顧客に配布する準備が整いました。

00:11:46.000 --> 00:11:52.000
アプリが初めて起動されると、macOSはアプリがAppleによってチェックされたことを確認します。

00:11:52.000 --> 00:11:57.000
これは、ステープルされたチケットと公証人サービスに手を差し伸べることによって提供されたチケットの両方を調べることによって行われます。

00:11:57.000 --> 00:12:09.000
公証の詳細については、前年のWWDCセッション「All About Notarization」と「Macアプリの公証の新機能」をご覧ください。

00:12:09.000 --> 00:12:13.000
Xcodeからアプリを公証するには、まずアーカイブを作成してください。

00:12:13.000 --> 00:12:28.000
クリスが先に示したように、ウィンドウ、オーガナイザーでオーガナイザーウィンドウを開き、アプリアーカイブを選択し、[アプリの配布]をクリックすることで、新しい合理化された配布オプションにアクセスできます。

00:12:28.000 --> 00:12:32.000
直接配布オプションはアプリを公証します。

00:12:32.000 --> 00:12:36.000
これまでのところ、私は公証にXcodeを使用しています。

00:12:36.000 --> 00:12:43.000
今年は、このプロセスを自動化するために、Xcode Cloudに公証のサポートを追加しました。

00:12:43.000 --> 00:12:51.000
公証ワークフローを設定した後、Xcode Cloudは設定された開始条件に基づいて自動的にビルドを開始します。

00:12:51.000 --> 00:12:56.000
公証されたアプリの準備ができたら、Xcode Cloudから直接ダウンロードできます。

00:12:56.000 --> 00:13:00.000
私はすでにMacアプリのリリースワークフローを設定しました。

00:13:00.000 --> 00:13:06.000
変更がリリースブランチにプッシュされるたびに、自動テストが実行され、アーカイブが作成されます。

00:13:06.000 --> 00:13:10.000
アプリを公証するためにワークフローも更新します。

00:13:10.000 --> 00:13:17.000
管理者とアプリマネージャーだけが公証するワークフローを設定できるので、正しい権限を持っていることを確認してください。

00:13:17.000 --> 00:13:25.000
公証にXcode Cloudを使用するので、[キャンセル]をクリックしてオーガナイザーウィンドウを閉じます。

00:13:25.000 --> 00:13:32.000
まず、サイドバーのレポートナビゲーターの「クラウド」タブに移動します。

00:13:32.000 --> 00:13:41.000
macOSリリースのワークフローを編集するには、それをサブクリックし、ワークフローの編集を選択します。

00:13:41.000 --> 00:13:45.000
アーカイブアクションがすでに設定されていることに気付くでしょう。

00:13:45.000 --> 00:13:52.000
プラスと公証をクリックして、新しい公証ポストアクションを追加しましょう。

00:13:52.000 --> 00:14:00.000
この追加ステップを反映するために、ワークフローの説明を更新します。

00:14:00.000 --> 00:14:01.000
そして、それだけです。

00:14:01.000 --> 00:14:07.000
[保存]をクリックして、これらの変更をワークフローに保存します。

00:14:07.000 --> 00:14:15.000
私たちのMacアプリは、特に新しい紫色のボタンで素晴らしい状態にあると思うので、更新されたワークフローを使用して公証プロセスを開始する準備ができています。

00:14:15.000 --> 00:14:22.000
ワークフローをセカンダリクリックして[ビルドの開始]を選択することで、それを行うことができます。

00:14:22.000 --> 00:14:30.000
リリースブランチを選択し、[ビルドの開始]をクリックしてビルドをキューに入れます。

00:14:30.000 --> 00:14:39.000
テストとアーカイブのアクションがキューに入れられていることに気づき、それらが完了すると、新しく追加されたNotarizeポストアクションが実行されます。

00:14:39.000 --> 00:14:46.000
Xcode Cloudがビルドを処理している間、ビルドレポートを詳しく見てみましょう。

00:14:46.000 --> 00:14:54.000
Xcode Cloudのビルドが進行中の場合、ビルドの概要には、このビルドで発生するすべての要約が表示されます。

00:14:54.000 --> 00:15:07.000
その間に何か他のものに取り組みたい場合は、レポートナビゲーターの[クラウド]タブに、実行中のすべてのビルドのステータスが表示され、詳細な結果に移動できます。

00:15:07.000 --> 00:15:10.000
ビルドのステータスを確認しましょう。

00:15:10.000 --> 00:15:11.000
素晴らしい！

00:15:11.000 --> 00:15:15.000
私たちの新しい公証ポストアクションは正常に完了しました。

00:15:15.000 --> 00:15:20.000
「公証アプリのダウンロード」をクリックしてダウンロードを開始します。

00:15:20.000 --> 00:15:31.000
ダウンロードが完了したら、[公証されたアプリを表示]をクリックすると、ダウンロードしたアーカイブが表示され、解凍して公証されたアプリが表示されます。

00:15:31.000 --> 00:15:35.000
これで、ユーザーと共有する準備が整いました。

00:15:35.000 --> 00:15:42.000
今日は、アプリの最高のバージョンを確実に提供するために、さまざまなツールを使用する方法を紹介しました。

00:15:42.000 --> 00:15:48.000
Xcodeの新しい合理化された配布オプションを使用すると、アプリをすばやくアップロードできます。

00:15:48.000 --> 00:15:57.000
TestFlight内部配布は、変更を反復する素晴らしい方法であり、限られたオーディエンスがアプリを試して貴重なフィードバックを提供できるようにします。

00:15:57.000 --> 00:16:07.000
Xcode Cloudワークフローは、配信プロセスを自動化し、Macアプリの公証をサポートすることで、App Store外での配信をさらに簡単にするのに役立ちます。

00:16:07.000 --> 00:16:16.000
アプリ配信のこれらの機能強化により、貴重な時間を節約できると思うので、最高のものに集中し、素晴らしいアプリを構築することができます。

00:16:16.000 --> 00:16:18.000
ご覧いただきありがとうございます。

00:16:18.000 --> 23:59:59.000
♪ ♪

