WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
ラズバン：こんにちは！

00:00:11.000 --> 00:00:21.000
私はWebKit Developer ExperienceチームのエンジニアであるRazvanです。今年Web Inspectorに対して行った新機能と改善点についてお話しします。

00:00:21.000 --> 00:00:34.000
Web InspectorはmacOSのSafariの一部であり、Webサイト、Webアプリ、Web拡張機能、またはホーム画面のWebアプリのすべてのリソースとアクティビティを検査できる強力なツールセットを提供します。

00:00:34.000 --> 00:00:55.000
新しいタイポグラフィ検査ツール、ユーザー設定をエミュレートする方法、イベントリスナーとスクロールコンテナを使用した要素の新しいバッジ、ブレークポイントの強化によりJavaScriptデバッグエクスペリエンスを改善しました。

00:00:55.000 --> 00:00:59.000
以前にWebインスペクタを使用したことがない場合は、有効にする必要があります。

00:00:59.000 --> 00:01:04.000
Safariの設定ウィンドウを開き、[詳細設定]タブに切り替えます。

00:01:04.000 --> 00:01:09.000
下部には、「ウェブ開発者向けの機能を表示」の設定があります。

00:01:09.000 --> 00:01:12.000
これを有効にするには、チェックボックスをクリックしてください。

00:01:12.000 --> 00:01:16.000
開発メニューがメニューバーで利用可能になりました。

00:01:16.000 --> 00:01:28.000
Webインスペクタを開くには、「Webインスペクタを表示」というメニュー項目を使用するか、任意のWebページでキーボードショートカットOption + Command + Iを押すことができます。

00:01:28.000 --> 00:01:45.000
今年は、デバイス上のWebコンテンツをペアリングして検査する合理化された方法、シミュレータでWebページを開く簡単な方法、更新されたレスポンシブデザインモードなど、Safariのすべての開発者機能に多くの改善を行いました。

00:01:45.000 --> 00:01:52.000
詳細については、今年のWWDCの「Safari開発者機能の再発見」というタイトルのこのセッションをご覧ください。

00:01:52.000 --> 00:01:58.000
Webインスペクタが有効になったので、タイポグラフィ検査のための新しいツールを見ることから始めましょう。

00:01:58.000 --> 00:02:06.000
ウェブ開発者は、カスタムフォントを使用して、読みやすく目立つタイプで美しいコンテンツを作成します。

00:02:06.000 --> 00:02:10.000
しかし、ウェブ上でタイポグラフィを正しく取得することは必ずしも簡単ではありません。

00:02:10.000 --> 00:02:14.000
まず、適切なフォントファイルをロードする必要があります。

00:02:14.000 --> 00:02:19.000
ブラウザでサポートされている形式で、適切な機能を備えている必要があります。

00:02:19.000 --> 00:02:25.000
そして、それが表す書かれた言語の文字の正しいグリフを含める必要があります。

00:02:25.000 --> 00:02:31.000
次に、フォントが画面上でレンダリングする方法に影響を与える多くのCSSプロパティがあります。

00:02:31.000 --> 00:02:39.000
そして、それらのほとんどはカスケードを通じて継承可能であり、時には「どのフォントフェイスが実際に使用されたか」のような混乱につながります。

00:02:39.000 --> 00:02:44.000
または「なぜこれが大胆なのですか?」または「このスタイルは本当にイタリック体ですか？」

00:02:44.000 --> 00:02:49.000
Web Inspectorは、多くのタイポグラフィ検査ツールを支援できます。

00:02:49.000 --> 00:02:55.000
フォントパネルの「要素」タブの「詳細」サイドバーで見つけることができます。

00:02:55.000 --> 00:03:04.000
使用されるプライマリフォントの名前など、選択した要素で使用されるフォントのプロパティと機能を示します。

00:03:04.000 --> 00:03:09.000
これを参照して、期待していたフォントが実際に使用されたかどうかをすばやく確認できます。

00:03:09.000 --> 00:03:13.000
これはプライマリフォントのみを識別することを覚えておいてください。

00:03:13.000 --> 00:03:22.000
選択したノードにプライマリフォントにグリフがない文字が含まれている場合、フォールバックフォントが使用されます。

00:03:22.000 --> 00:03:33.000
次に、フォントパネルには、フォントサイズ、スタイル、重量、ストレッチなどの基本的なフォントプロパティの概要が表示されます。

00:03:33.000 --> 00:03:38.000
サポートされているフォント機能のプロパティとその使用値を示すセクションもあります。

00:03:38.000 --> 00:03:53.000
これらは、フォントがサポートするものに応じて、合字、小文字の代わりに小文字、特別な数値スタイル、その他多くの書体の特別な側面を切り替えます。

00:03:53.000 --> 00:03:59.000
今年の新機能、フォントパネルには、合成太字または斜めスタイルの警告が表示されます。

00:03:59.000 --> 00:04:04.000
合成スタイルとは何ですか?例としてイタリック体を取りましょう。

00:04:04.000 --> 00:04:11.000
イタリックスタイルは、多くの場合、通常のアップライトスタイルのものとは別で、独自のフォントファイルで提供されます。

00:04:11.000 --> 00:04:18.000
適切なイタリックスタイルが欠落している場合、WebKitはそのための人工的な表現を生成します。

00:04:18.000 --> 00:04:26.000
通常のアップライトフォントスタイル上でアルゴリズムを実行し、個々のグリフを歪んで斜めのスタイルを生成します。

00:04:26.000 --> 00:04:30.000
これは合成斜めと呼ばれています。

00:04:30.000 --> 00:04:34.000
フォントデザイナーは、イタリックスタイルを作成するときに多くの注意を払います。

00:04:34.000 --> 00:04:44.000
多くの場合、これらはアップライトスタイルの傾斜バージョンではなく、代わりに筆記体であり、特定の美学を伝えるために特別に設計されています。

00:04:44.000 --> 00:04:51.000
グリフのストロークが人工的に厚くなる合成太字でも同様のことが起こります。

00:04:51.000 --> 00:04:54.000
すべてのフォントがこれをサポートしているわけではないことを覚えておいてください。

00:04:54.000 --> 00:05:00.000
Webインスペクタは、合成太字または斜めが使用されたときに警告を表示するようになりました。

00:05:00.000 --> 00:05:07.000
フォントパネルの基本プロパティセクションで、合成された重みまたはスタイルの横に表示されます。

00:05:07.000 --> 00:05:12.000
この警告は、予想されるフォントファイルがロードされなかったというヒントになる可能性があります。

00:05:12.000 --> 00:05:19.000
しかし、時には、フォントファイルがあなたが要求した正確な値をサポートしていないかもしれません。

00:05:19.000 --> 00:05:22.000
そこで可変フォントが役立ちます。

00:05:22.000 --> 00:05:24.000
可変フォントとは何ですか?

00:05:24.000 --> 00:05:38.000
簡単に言えば、重量、幅、傾斜など、フォントの複数のスタイルバリエーションを生成するために必要なすべての情報を1つのファイルに含めることができるフォント形式です。

00:05:38.000 --> 00:05:46.000
また、サポートされている各スタイルについて、可変フォントは、静的フォントファイル内のいくつかの離散値と比較して、値のスペクトルを提供します。

00:05:46.000 --> 00:05:53.000
これにより、コンテンツに適した正確なスタイルをより柔軟に選択できます。

00:05:53.000 --> 00:05:56.000
可変フォントはさらに有能です。

00:05:56.000 --> 00:06:08.000
フォントデザイナーは、ストロークの厚さ、グリフの曲線、文字の幅など、フォントのほぼすべての側面を構成可能にすることができます。

00:06:08.000 --> 00:06:12.000
可能性は本当に広大です。

00:06:12.000 --> 00:06:18.000
設定可能な可変フォントのすべての側面は、バリエーション軸として表現されます。

00:06:18.000 --> 00:06:26.000
どれが利用可能かを知るには、フォントのドキュメントを読むか、この情報を明らかにする特別なツールを使用する必要があります。

00:06:26.000 --> 00:06:28.000
ウェブインスペクタはここで助けることができます。

00:06:28.000 --> 00:06:37.000
可変フォントを使用する要素を検査すると、フォントパネルにサポートされているバリエーション軸のリストが表示されます。

00:06:37.000 --> 00:06:59.000
それぞれについて、その軸タグ - 4文字の識別子 - オプションの軸ラベル、サポートされている最小値と最大値、および現在の値、またはCSSで指定されていない場合のデフォルト値が表示されます。

00:06:59.000 --> 00:07:08.000
今年は、バリエーション軸の値を編集し、検査されたページで結果をライブで確認するためのインタラクティブなコントロールを追加しました。

00:07:08.000 --> 00:07:12.000
これにより、フォントスタイルがちょうどいいまで微調整できる素晴らしい方法が得られます。

00:07:12.000 --> 00:07:15.000
お見せしましょう。

00:07:15.000 --> 00:07:19.000
これは私が旅行写真ブログのために構築しているウェブページです。

00:07:19.000 --> 00:07:27.000
私はフォトギャラリーとラベルによるナビゲーションで、私が望むようにレイアウトを持っていますが、タイトルの外観についてはまだわかりません。

00:07:27.000 --> 00:07:34.000
右クリックして見出し要素を検査します。

00:07:34.000 --> 00:07:39.000
フォントパネルでは、これが可変フォントを使用していることがわかります。

00:07:39.000 --> 00:07:45.000
私は私が遊ぶことができる利用可能なバリエーション軸のためのこれらのコントロールを持っているので、私は言うことができます。

00:07:45.000 --> 00:07:50.000
たとえば、重量軸のスライダーをドラッグできます。

00:07:50.000 --> 00:07:58.000
これにより、検査されたページでタイトルのフォントの重みがすぐに変更されます。

00:07:58.000 --> 00:08:05.000
対応するCSSフォントの重みプロパティがスタイルパネルにどのように書き込まれるかに注目してください。

00:08:05.000 --> 00:08:10.000
静的フォントは、100単位の重みのためにいくつかのフォント面を持つだけです。

00:08:10.000 --> 00:08:15.000
しかし、可変フォントでは、変動軸の範囲内で任意の値を選択できます。

00:08:15.000 --> 00:08:24.000
また、幅のバリエーション軸を試して、これがどのように広くまたは狭く見えるかを見てみましょう。

00:08:24.000 --> 00:08:35.000
軸値の入力フィールドを入力することも、ArrowUpキーまたはArrowDownキーを長押しして、正確な単位で値を変更することもできます。

00:08:35.000 --> 00:08:38.000
私はこのわずかに凝縮されたバージョンが好きです。

00:08:38.000 --> 00:08:43.000
もう少し大胆にしたいのですが、この幅を保ちたいです。

00:08:43.000 --> 00:08:48.000
この可変フォントは、フォントのグレードを変更するためのカスタムバリエーション軸も提供します。

00:08:48.000 --> 00:08:59.000
このためにスライダーをドラッグすると、重量軸を変更したときのように位置をシフトすることなく、個々の文字が所定の位置で厚くなることに注意してください。

00:08:59.000 --> 00:09:02.000
これは素敵ですね。

00:09:02.000 --> 00:09:13.000
これらの変更をプロジェクトに統合するには、スタイルパネルまたは変更パネルから新しいCSSプロパティをコピーできます。

00:09:13.000 --> 00:09:18.000
タイポグラフィを検査する方法と、可変フォントでフォントスタイルを微調整する方法を見てきました。

00:09:18.000 --> 00:09:28.000
それでは、Webインスペクタの別の新機能に移りましょう。これにより、ユーザーの好みをエミュレートして、構築しているコンテンツがユーザーのニーズに適応していることを確認できます。

00:09:28.000 --> 00:09:52.000
すべてのApple製品は、内蔵のスクリーンリーダー、VoiceOver、ディスプレイ設定などを制御するmacOSのアクセシビリティ設定など、人々がニーズや好みに適応するようにデバイスを構成できるさまざまな設定を提供しています。モーションの低下、カラーコントラストの増加、カラーフィルターなどを制御します。

00:09:52.000 --> 00:09:56.000
人々が自分のデバイスで行う最も人気のあることの1つは、ウェブを閲覧することです。

00:09:56.000 --> 00:10:01.000
したがって、すべての人を歓迎するために努力するウェブサイトやウェブアプリを構築することは理にかなっています。

00:10:01.000 --> 00:10:09.000
これを行うには、他の人がユーザー設定を設定するのと同じようにウェブを体験する必要がある場合があります。

00:10:09.000 --> 00:10:17.000
動きの縮小の好みでウェブサイトをテストするには、macOSのアクセシビリティ設定に移動し、そこに設定することができます。

00:10:17.000 --> 00:10:23.000
しかし、それはSafariやあなたのウェブサイトだけでなく、システム全体に影響します。

00:10:23.000 --> 00:10:28.000
あなたがしばしば望むのは、テストしているページのためだけに設定することです。

00:10:28.000 --> 00:10:35.000
それを支援するために、ユーザー設定をエミュレートする新しいツールをWebインスペクタに導入しました。

00:10:35.000 --> 00:10:40.000
[要素] タブの新しいアイコンをクリックすると、[ユーザー設定のオーバーライド] ポップオーバーが表示されます。

00:10:40.000 --> 00:10:48.000
ここでは、Webインスペクタが開いている間に、検査されたページのユーザー設定を上書きするための一連のトグルを見つけることができます。

00:10:48.000 --> 00:10:57.000
これらの設定は、Webページのスタイルと動作を適応させるために使用できるCSSメディア機能にマッピングされます。

00:10:57.000 --> 00:11:04.000
たとえば、カラースキームの好みは、CSSのprefers-color-schemeメディア機能にマップされます。

00:11:04.000 --> 00:11:11.000
使用方法は次のとおりです。デフォルトのライトカラースキームに要素のスタイルを設定できます。

00:11:11.000 --> 00:11:19.000
次に、prefers-color-schemeメディア機能を使用して、暗い配色が好ましいかどうかを確認し、スタイルを更新します。

00:11:19.000 --> 00:11:24.000
ユーザー設定オーバーライドポップオーバーを使用して、ページがどのように適応するかを確認してください。

00:11:24.000 --> 00:11:29.000
外観セクションで、配色設定をダークにオーバーライドします。

00:11:29.000 --> 00:11:34.000
アイコンは、オーバーライドが適用されたことを示すために色が変わります。

00:11:34.000 --> 00:11:41.000
オーバーライドがアクティブで、Webインスペクタが開いている間は、暗い配色のスタイルが適用されます。

00:11:41.000 --> 00:11:45.000
このカラースキームのコントロールは、以前はスタンドアロンのボタンでした。

00:11:45.000 --> 00:11:51.000
ポップオーバーで設定オーバーライドの他のコントロールに加わるようになりました。

00:11:51.000 --> 00:11:56.000
次に、縮小モーションの好みをオーバーライドする方法を紹介します。

00:11:56.000 --> 00:12:00.000
この次のセクションでは、動きの多いアニメーションが表示されます。

00:12:00.000 --> 00:12:05.000
これに敏感な場合は、このビデオの次の3分間をスキップすることをお勧めします。

00:12:05.000 --> 00:12:14.000
私のページに戻ると、写真をクリックして拡大すると実行されるこれらのアニメーションは、おそらく少し多すぎます。

00:12:14.000 --> 00:12:21.000
一部の人々は、特にz軸で起こるとき、迅速かつ突然の動きでアニメーションによって混乱する可能性があります。

00:12:21.000 --> 00:12:25.000
吐き気や頭痛などの不快感を引き起こす可能性があります。

00:12:25.000 --> 00:12:29.000
これは間違いなく彼らにとって歓迎すべき経験ではありません。

00:12:29.000 --> 00:12:35.000
人々は、ウェブサイトやウェブアプリに適応させたいことを知らせるために、自分のデバイスで動きを減らすための好みを設定することができます。

00:12:35.000 --> 00:12:38.000
私たちウェブ開発者はそれを尊重すべきです。

00:12:38.000 --> 00:12:43.000
これは、prefers-reduced-motion CSSメディア機能が便利な場所です。

00:12:43.000 --> 00:12:47.000
アニメーションが装飾用の場合は、削除できます。

00:12:47.000 --> 00:12:52.000
しかし、いくつかのアニメーションは、インターフェイスで意味を伝えるのに役立つことを覚えておいてください。

00:12:52.000 --> 00:12:55.000
それらを削除すると、使いやすさに影響を与える可能性があります。

00:12:55.000 --> 00:13:03.000
より遅く、より微妙なフェードアニメーションは、変化を伝え、人々のニーズを満たすためにまだうまく機能するかもしれません。

00:13:03.000 --> 00:13:05.000
私のウェブページでその変更を試してみましょう。

00:13:05.000 --> 00:13:14.000
まず、写真を調べて、Webインスペクタの「要素」タブで図要素を選択します。

00:13:14.000 --> 00:13:20.000
これにより、スタイルパネルに一致するすべてのCSSルールが明らかになります。

00:13:20.000 --> 00:13:24.000
これは、アニメーションを多くの動きで設定するCSSプロパティです。

00:13:24.000 --> 00:13:27.000
それは今、みんなのために走っています。

00:13:27.000 --> 00:13:36.000
次に、このCSSルールのソースコードの場所をクリックして、スタイルシートで定義されている場所にジャンプします。

00:13:36.000 --> 00:13:43.000
これにより、ソースパネルが開き、変更したいアニメーションがあるCSSルールのすぐ隣に配置されます。

00:13:43.000 --> 00:13:48.000
先ほど準備したこのコードブロックのコメントを解除します。

00:13:48.000 --> 00:13:52.000
これは、prefers-reduced-motion CSSメディア機能によって保護されています。

00:13:52.000 --> 00:14:02.000
ここでは、写真をズームするアニメーションではなく、アニメーションをフェードに変更し、アニメーションの持続時間も増やして、突然感じないようにします。

00:14:02.000 --> 00:14:08.000
次に、ページ上の画像をもう一度クリックして、それがどのように見えるかを確認します。

00:14:08.000 --> 00:14:12.000
ああ！それはまだ同じアニメーションを実行します。

00:14:12.000 --> 00:14:18.000
それは、fers-reduced-motionメディア機能によって守られた新しいアニメーションを定義したからです。

00:14:18.000 --> 00:14:23.000
しかし、ページは依然としてオフに設定されているこの設定のデフォルトのシステム値を尊重しています。

00:14:23.000 --> 00:14:26.000
それを調整しましょう。

00:14:26.000 --> 00:14:28.000
[要素] タブに戻ります。

00:14:28.000 --> 00:14:34.000
ここでは、ユーザー設定オーバーライドポップオーバーを開きます。

00:14:34.000 --> 00:14:41.000
アクセシビリティセクションで、ポップアップメニューを開いて、「動きを減らす」のユーザー設定を上書きします。

00:14:41.000 --> 00:14:48.000
システムのデフォルト値から変更し、オンに設定します。

00:14:48.000 --> 00:14:53.000
さて、私のページの写真をもう一度クリックします。

00:14:53.000 --> 00:14:57.000
そして、見てください。写真はゆっくりと視界に消えていく。

00:14:57.000 --> 00:14:59.000
混乱させる動きはもうありません。

00:14:59.000 --> 00:15:04.000
これは、減動を好む人にとってより良い経験です。

00:15:04.000 --> 00:15:09.000
これらの変更をプロジェクトに統合することを忘れないでください。

00:15:09.000 --> 00:15:18.000
ユーザー設定オーバーライドポップオーバーの最後の項目「コントラストを上げる」は、prefers-contrast CSSメディア機能にマップされます。

00:15:18.000 --> 00:15:24.000
理想的には、誰にとっても高いレベルのカラーコントラストを持つコンテンツを構築したいと考えています。

00:15:24.000 --> 00:15:32.000
しかし、あなたのデザインシステムがあなたを制限している場合は、このメディア機能を使用して、コントラストの増加の恩恵を受ける人々のためにあなたのスタイルを適応させます。

00:15:32.000 --> 00:15:36.000
次に、検査されたページのスタイルがそれに応じて適応することを確認します。

00:15:36.000 --> 00:15:41.000
「コントラストを増やす」の設定を「オン」に上書きします。

00:15:41.000 --> 00:15:46.000
これらの機能を使用して、さらに多くの人が楽しめるコンテンツを構築することを願っています。

00:15:46.000 --> 00:15:52.000
次に、Webインスペクタの[要素]タブの新しい要素バッジについてお話しします。

00:15:52.000 --> 00:16:00.000
要素タブのノードツリービューでは、CSS FlexまたはCSSグリッドコンテナとして機能する要素の横にバッジがすでに表示されます。

00:16:00.000 --> 00:16:06.000
要素バッジは、特定の関心のあるノードを一目で識別するための迅速な方法を提供します。

00:16:06.000 --> 00:16:12.000
この場合、CSSグリッドまたはFlexレイアウトコンテキストを作成するノード。

00:16:12.000 --> 00:16:19.000
グリッドとフレックス要素のバッジをクリックして、そのノードの特殊なページオーバーレイを切り替えることができます。

00:16:19.000 --> 00:16:24.000
バッジのハイライトの色は、ページオーバーレイの色と一致します。

00:16:24.000 --> 00:16:33.000
CSSグリッドとフレックスボックスのページオーバーレイは、レイアウトを決定する線、ギャップ、および利用可能なスペースを明らかにするガイドを表示します。

00:16:33.000 --> 00:16:41.000
ページオーバーレイでCSSグリッドとFlexboxレイアウトをデバッグする方法の詳細については、前年のこれらのセッションをご覧ください。

00:16:41.000 --> 00:16:53.000
デバッグする最も難しいCSSレイアウトの問題の1つは、内部のコンテンツが利用可能な幅に合わないため、水平にスクロールするコンテナのように、不要なスクロールです。

00:16:53.000 --> 00:17:00.000
このタイプの問題は、スクロールバーがデフォルトで表示されない場合、長い間検出されずに潜む可能性があります。

00:17:00.000 --> 00:17:06.000
不要なスクロールを識別するために、スクロールコンテナの横に表示される新しい要素バッジを追加しました。

00:17:06.000 --> 00:17:14.000
要素のコンテンツがその境界をオーバーフローし、スクロールバーが適用されると、ノードツリーに簡単な視覚的なヒントを提供します。

00:17:14.000 --> 00:17:18.000
不要なスクロールの一般的な例と、それを修正する方法を見てみましょう。

00:17:18.000 --> 00:17:26.000
私のページに戻ると、フォトギャラリーの上部にあるこれらのラベルは、利用可能なすべての水平スペースを使用するようにきれいにレイアウトされているように見えます。

00:17:26.000 --> 00:17:32.000
しかし、スワイプしようとすると、このコンテナに短い水平スクロールがあることに気づきます。

00:17:32.000 --> 00:17:35.000
これは私が望んでいないことです。

00:17:35.000 --> 00:17:39.000
そして、最後のラベルは少し切り取られています。

00:17:39.000 --> 00:17:43.000
ウィンドウのサイズを変更するとさらに悪化します。

00:17:43.000 --> 00:17:49.000
要素タブのノードツリーに、ラベルのコンテナの横に「スクロール」バッジがあることに気づきました。

00:17:49.000 --> 00:17:55.000
この要素をクリックすると、スタイルパネルに一致するCSSルールが表示されます。

00:17:55.000 --> 00:17:58.000
このフレックスボックスの容器は正しく見えます。

00:17:58.000 --> 00:18:05.000
そのフレックスアイテム、ラベル自体はどうですか?

00:18:05.000 --> 00:18:10.000
最小幅プロパティのこの過度に正確な値は奇妙に見えます。

00:18:10.000 --> 00:18:20.000
私が欲しいものをブラウザに伝えて計算させるのではなく、ブラウザに何をすべきかを正確に伝えるのは、おそらく私のナイーブな試みでした。

00:18:20.000 --> 00:18:24.000
これを修正するために、この最小幅宣言にコメントします。

00:18:24.000 --> 00:18:28.000
現在、各ラベルは必要なだけ多くのスペースを占有します。

00:18:28.000 --> 00:18:31.000
しかし、未使用のスペースがたくさん残っています。

00:18:31.000 --> 00:18:37.000
これを修正するには、値1のフレックスプロパティを追加します。

00:18:37.000 --> 00:18:42.000
これにより、未使用のスペースが各ラベルに分配され、コンテナがいっぱいになります。

00:18:42.000 --> 00:18:51.000
そして、ノードツリーのコンテナの横にある「スクロール」バッジが欠落していることで確認されているように、不要な水平スクロールはもうありません。

00:18:51.000 --> 00:18:55.000
次に、新しいイベントバッジについてお話ししたいと思います。

00:18:55.000 --> 00:19:00.000
JavaScriptイベントリスナーが添付されている要素の横に表示されます。

00:19:00.000 --> 00:19:09.000
ポインタやUIイベントなどの組み込みイベントと、コードでディスパッチするカスタムJavaScriptイベントの両方で機能します。

00:19:09.000 --> 00:19:19.000
ノードツリーの横にイベントバッジがある要素を探し、バッジをクリックすると、その要素にすべてのイベントリスナーが添付されたポップオーバーが表示されます。

00:19:19.000 --> 00:19:31.000
ここでは、イベントタイプ、イベントを処理するJavaScript関数の名前、およびその関数が定義されているソースコード内の場所など、各イベントリスナーの概要を取得できます。

00:19:31.000 --> 00:19:40.000
DOMツリーを通過するかどうか、または一度だけ実行した後に自動的に削除されるかどうかなど、イベントリスナーのさまざまな設定オプション。

00:19:40.000 --> 00:19:46.000
次に、イベントリスナーを無効にするオプションがあり、実行せずにコードをデバッグできます。

00:19:46.000 --> 00:19:51.000
または、段階的にデバッグする場合は、イベントブレークポイントを設定できます。

00:19:51.000 --> 00:19:56.000
これにより、次回ハンドラが呼び出されたときにJavaScriptの実行が一時停止されます。

00:19:56.000 --> 00:20:02.000
これは、ブレークポイントを使用したデバッグ体験の改善について話すのに良い機会です。

00:20:02.000 --> 00:20:07.000
JavaScript をデバッグするときは、コードに console.log() ステートメントを追加することに慣れているかもしれません。

00:20:07.000 --> 00:20:17.000
一方、ブレークポイントは、ソースに変更を加えることなく、JavaScriptを一時停止してステップスルーすることでデバッグする強力な方法です。

00:20:17.000 --> 00:20:26.000
以前にブレークポイントを使用したことがない場合は、開始する最も簡単な方法は、ソースタブの溝にあるスクリプトファイルの行番号をクリックすることです。

00:20:26.000 --> 00:20:30.000
これにより、スクリプトのその行にJavaScriptブレークポイントが設定されます。

00:20:30.000 --> 00:20:37.000
次回その行が実行されるとき、Web Inspectorはその時点でJavaScriptの実行を一時停止します。

00:20:37.000 --> 00:20:49.000
一時停止している間は、コールスタックを観察したり、スコープ内のオブジェクトや変数の状態を調べたり、コンソールから変更を加えたりすることもできます。

00:20:49.000 --> 00:20:58.000
JavaScriptの実行を再開することも、上部のステッピングコントロールを使用して、一度に1つの式でコードをステップスルーすることもできます。

00:20:58.000 --> 00:21:03.000
ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、ブレークポイントを設定できます。

00:21:03.000 --> 00:21:11.000
ここでは、ブレークポイントがヒットしたときに制御し、ヒットしたときにアクションを実行するように設定できる多くのオプションがあります。

00:21:11.000 --> 00:21:13.000
それらのいくつかを見てみましょう。 

00:21:13.000 --> 00:21:17.000
ブレークポイントの条件を設定することで、ブレークポイントがヒットしたときに制御できます。

00:21:17.000 --> 00:21:22.000
これは、ブレークポイントが設定されているのと同じスコープでJavaScriptとして評価されます。

00:21:22.000 --> 00:21:26.000
条件が真の場合、ブレークポイントがヒットします。

00:21:26.000 --> 00:21:30.000
時には、ブレークポイントを何度もスキップする方が簡単かもしれません。

00:21:30.000 --> 00:21:36.000
たとえば、ループ内では、最初の数回の反復で停止することに興味がありません。

00:21:36.000 --> 00:21:40.000
ここでは、ブレークポイントを無視する回数を設定できます。

00:21:40.000 --> 00:21:46.000
JavaScriptの一部を評価するなど、ブレークポイントがヒットしたときにアクションを実行することもできます。

00:21:46.000 --> 00:21:49.000
これは、ブレークポイントが設定されているのと同じスコープで実行されます。

00:21:49.000 --> 00:21:54.000
続行する前に、これを使用してスクリプトの状態を変更できます。

00:21:54.000 --> 00:22:02.000
また、JavaScriptが一時停止された時点で変数やオブジェクトの状態にアクセスできる式を使用して、コンソールにメッセージをログに記録することもできます。

00:22:02.000 --> 00:22:09.000
これは、コードに console.log() ステートメントを追加するのと似ていますが、ソースを変更しなくてもです。

00:22:09.000 --> 00:22:15.000
変数やオブジェクトをコンソールにロギングする代わりに、プローブ式アクションを使用することもできます。

00:22:15.000 --> 00:22:22.000
これにより、ソースタブの詳細サイドバーパネルで、指定された式の状態を調べることができます。

00:22:22.000 --> 00:22:31.000
もちろん、これらのアクションは非常に便利ですが、実際にブレークポイントで停止して手動で再開することなく、実行したい場合があります。

00:22:31.000 --> 00:22:37.000
そのような場合は、式を評価した後に自動的に続行するオプションを使用します。

00:22:37.000 --> 00:22:45.000
このオプションは、ログメッセージアクションをconsole.log()ステートメントのように動作させます。ログに記録しますが、一時停止しません。

00:22:45.000 --> 00:22:53.000
同様に、ブレークポイントの場所でJavaScriptを評価し、すでにソースコードにあるかのように続行できます。

00:22:53.000 --> 00:22:56.000
設定できるブレークポイントは他にもたくさんあります。

00:22:56.000 --> 00:23:29.000
ブレークポイントセクションのプラスボタンをクリックすると、設定できるすべてのブレークポイントのリストが表示されます。たとえば、ネットワーク要求がfetch（）やXMLHTTPRequestなどのメソッドを介して実行されるときにトリガーされるURLブレークポイント、「クリック」のイベントバッジから以前に見たようなイベントブレークポイント、マイクロタスク、アニメーションフレーム、タイムアウト、またはインターバルが処理されたときにトリガーされるブレークポイント、そして

00:23:29.000 --> 00:23:38.000
シンボリックブレークポイントは、組み込みのJavaScript関数への呼び出しをデバッグしたり、同じ名前の複数の関数で一時停止したりするのに役立ちます。

00:23:38.000 --> 00:23:43.000
シンボリックブレークポイントを追加するときは、あなたが望むように具体的または一般的なことができます。

00:23:43.000 --> 00:23:56.000
大文字と小文字の区別を含め、関数名を正確に一致させるか、パターンに一致する複数の関数で中断したい場合、または完全な関数名をよく覚えていない場合は、正規表現を使用してください。

00:23:56.000 --> 00:24:02.000
シンボリックブレークポイントがコード内の問題のデバッグにどのように役立つか見てみましょう。

00:24:02.000 --> 00:24:07.000
私のページの各写真には、リンクを友達と共有できる共有ボタンがあります。

00:24:07.000 --> 00:24:12.000
しかし、彼らが取得したURLが写真ページを指していないというバグレポートを受け取りました。

00:24:12.000 --> 00:24:15.000
調査しましょう。

00:24:15.000 --> 00:24:19.000
これに取り組んでからしばらく経ちましたが、どのように構築されたのかよく覚えていません。

00:24:19.000 --> 00:24:24.000
これをデバッグするには複数の方法がありますが、シンボリックブレークポイントを試してみます。

00:24:24.000 --> 00:24:33.000
ソースタブに切り替えて、クリックして新しいシンボリックブレークポイントを追加します。

00:24:33.000 --> 00:24:40.000
私の側で実行されるコードが何であれ、最終的にはシステムのポップオーバーを表示するnavigator.share()ブラウザAPIを呼び出す必要があります。

00:24:40.000 --> 00:24:45.000
Share() 関数が呼び出される前にブレークポイントを設定しましょう。

00:24:45.000 --> 00:24:49.000
クリックしてシンボリックブレークポイントを設定します。

00:24:49.000 --> 00:24:54.000
そして今、私のページの写真の共有ボタンをクリックします。

00:24:54.000 --> 00:25:00.000
そして、navigator.share()が呼び出される前に、Webインスペクタが一時停止しました。

00:25:00.000 --> 00:25:04.000
このメソッドに渡されたデータオブジェクトにカーソルを合わせます。

00:25:04.000 --> 00:25:07.000
ここでは、オブジェクトの内容を見ることができます。

00:25:07.000 --> 00:25:12.000
共有されるURLキーの値は確かに間違っているようです。

00:25:12.000 --> 00:25:15.000
これはどこから来たのですか?

00:25:15.000 --> 00:25:21.000
[ソース] タブの [コール スタック] セクションでは、この点に到達するために呼び出された関数の連鎖を見ることができます。

00:25:21.000 --> 00:25:24.000
クリックイベントハンドラは以前に呼び出されたようです。

00:25:24.000 --> 00:25:29.000
コールスタックでそのエントリを選択して、その関数にジャンプします。

00:25:29.000 --> 00:25:35.000
ここでは、sharePhoto()関数に渡されるデータオブジェクトを構築するコードを見ることができます。

00:25:35.000 --> 00:25:40.000
そして、ここのコードコメントを見て、私はこれを実装するつもりでしたが、忘れました。

00:25:40.000 --> 00:25:42.000
今すぐそれを直しましょう。

00:25:42.000 --> 00:25:46.000
クリックしてこの行にブレークポイントを設定します。

00:25:46.000 --> 00:25:51.000
次に、右クリックして[ブレークポイントの編集]を選択します。

00:25:51.000 --> 00:25:57.000
条件を設定する必要はありませんが、JavaScriptアクションを実行するように設定します。

00:25:57.000 --> 00:26:09.000
式フィールド内で、共有関数に渡される前に、データオブジェクトを変更してURLプロパティを修正します。

00:26:09.000 --> 00:26:17.000
このブレークポイントがここで止まる必要はないので、この式を評価した後、自動的に続行するオプションをクリックします。

00:26:17.000 --> 00:26:22.000
次に、ボタンをクリックしてJavaScriptの実行を再開します。

00:26:22.000 --> 00:26:27.000
これで、共有ボタンをクリックすると、先ほど設定したシンボリックブレークポイントに再び到達します。

00:26:27.000 --> 00:26:32.000
しかし、今、それが取得するデータオブジェクトは正しいURL値を持っています。

00:26:32.000 --> 00:26:39.000
他のブレークポイントからのJavaScriptアクションは、値を変更し、一時停止せずにこの関数に送信しました。

00:26:39.000 --> 00:26:43.000
これは、私がそこで行った変更が実際に問題を解決したことを確認します。

00:26:43.000 --> 00:26:48.000
これは、ブレークポイントによって可能になる多くの優れたデバッグワークフローの一例にすぎません。

00:26:48.000 --> 00:26:54.000
もっとたくさんあるので、あなたのプロジェクトで試してみることをお勧めします。

00:26:54.000 --> 00:27:04.000
このセッションでは、新しいタイポグラフィ検査ツールから、ユーザー設定のオーバーライド、新しい要素バッジの使用まで、多くのことを取り上げ、ブレークポイントの強化を検討しました。

00:27:04.000 --> 00:27:07.000
そして、それは表面を引っ掻いているだけです。

00:27:07.000 --> 00:27:14.000
今年のWebインスペクタには、このセッションで取り上げる時間がなかった他の多くの新機能と改善があります。

00:27:14.000 --> 00:27:17.000
そして、Web Inspectorができることはもっとたくさんあります。

00:27:17.000 --> 00:27:26.000
これらと使用できる他の多くの機能についてもっと知りたい場合は、webkit.orgにアクセスして、詳細なブログ記事やドキュメントを見つけてください。

00:27:26.000 --> 00:27:28.000
私たちもあなたから話を聞きたいです。

00:27:28.000 --> 00:27:39.000
問題が発生した場合、またはWeb Inspectorを改善する方法に関するアイデアがある場合は、Inspector製品のWebKitのバグトラッカーに問題を提出してお知らせください。

00:27:39.000 --> 00:27:43.000
また、Safari Technology Previewをダウンロードすることをお勧めします。

00:27:43.000 --> 00:27:54.000
数週間ごとにリリースされ、次のバージョンのSafariに到達する前に、WebKitの最新のツールと技術、バグ修正と改善が含まれています。

00:27:54.000 --> 00:28:05.000
私が行く前に、今年のSafariの開発者のための新機能についてもっと知りたい場合は、これらの素晴らしいセッションをチェックしてください：「Safari開発者機能を再発見する」と「CSSの新機能」。

00:28:05.000 --> 23:59:59.000
見てくれてありがとう。

