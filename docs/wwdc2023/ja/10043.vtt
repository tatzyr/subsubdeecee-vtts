WEBVTT

00:00:01.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
ジェフ：こんにちは、私はジェフです。

00:00:11.000 --> 00:00:16.000
私はMapKitチームのエンジニアで、SwiftUI用のMapKitを紹介することに興奮しています。

00:00:16.000 --> 00:00:23.000
大幅に拡張されたSwiftUI APIにより、すべてのプラットフォームでマップをアプリに統合することがこれまで以上に簡単になりました。

00:00:23.000 --> 00:00:30.000
MapKit for SwiftUIを使用して、ユーザーに強力なマッピング体験を提供するのが好きになると思います。

00:00:30.000 --> 00:00:34.000
それがどれほど簡単かを示すために、私は完全に機能する旅行プランナーをゼロから構築します。

00:00:34.000 --> 00:00:38.000
すべてのステップを順を追って説明し、このセッションが終了する前に完了します。

00:00:38.000 --> 00:00:44.000
私の家族は今週末にニューイングランドに帰り、土曜日はボストンの美しい街を探索して過ごします。

00:00:44.000 --> 00:00:51.000
私たちは午前中に街を歩いて観光スポットを見て、歴史的なノースエンドで昼食をとり、おそらくデザートにカンノリを食べます。

00:00:51.000 --> 00:00:57.000
天気も完璧そうなので、午後にビーチに向かい、つま先の間に砂を感じます。

00:00:57.000 --> 00:00:59.000
すごく楽しくなりそうだ。

00:00:59.000 --> 00:01:02.000
その日の計画を立てるのに役立つアプリを作ります。

00:01:02.000 --> 00:01:06.000
注釈を使って地図上の場所をマークします。

00:01:06.000 --> 00:01:11.000
各マーカーをタップしてその場所について詳しく知ることができるように、選択を有効にします。

00:01:11.000 --> 00:01:16.000
Look Aroundを統合して、訪れたいかもしれない場所を探索します。

00:01:16.000 --> 00:01:20.000
ビーチへの運転ルートを示すオーバーレイを追加します。

00:01:20.000 --> 00:01:24.000
地図を使って、さまざまな場所や地域を表示します。

00:01:24.000 --> 00:01:29.000
現実的な標高を有効にすることで、地図に別の次元を追加します。

00:01:29.000 --> 00:01:33.000
衛星とフライオーバー画像の表示方法もお見せします。

00:01:33.000 --> 00:01:38.000
自分がどこにいるかを把握できるように、ユーザーの位置ボタンを含むいくつかのコントロールを地図に追加します。

00:01:38.000 --> 00:01:42.000
私たちはカバーすることがたくさんあります。すぐに入りましょう！

00:01:42.000 --> 00:01:46.000
私は真新しいSwiftUIプロジェクトから始めます。

00:01:46.000 --> 00:01:49.000
私はMapKitを使います。

00:01:49.000 --> 00:01:54.000
そして、地図を追加します。

00:01:54.000 --> 00:01:55.000
いいね！

00:01:55.000 --> 00:02:01.000
私はたった1行のコードでインタラクティブな地図を持っています!

00:02:01.000 --> 00:02:06.000
私の家族は、私たちが歩き回れるように、街に運転して駐車して一日を始めます。

00:02:06.000 --> 00:02:12.000
ボストンの近くにあなたの「cah」を「pahk」すべき特定の場所があると聞きましたが、私はコモンのすぐ下にある駐車場が好きです。

00:02:12.000 --> 00:02:19.000
ボストンコモンは、すべての真ん中にある美しい公園で、ウォーキングツアーの素晴らしい出発点になります。

00:02:19.000 --> 00:02:23.000
私が最初に行うことは、駐車場をマークするために地図にいくつかのコンテンツを追加することです。

00:02:23.000 --> 00:02:31.000
車両がガレージにアクセスするために使用するランプのすぐ上の場所をマークします。エレベーターの近くで、私たちは歩き始めます。

00:02:31.000 --> 00:02:37.000
マーカーと注釈を使用して、地図上の特定の座標にコンテンツを表示する方法を学びます。

00:02:37.000 --> 00:02:41.000
では、車を駐車して歩き始めましょう！

00:02:41.000 --> 00:02:46.000
MapContentBuilderクロージャを使用して、マップにマーカーを追加します。

00:02:46.000 --> 00:02:48.000
かっこいい！

00:02:48.000 --> 00:02:54.000
SwiftUIに精通している場合、マップにマーカーを追加すると、リストにビューを追加するのとよく似ています。

00:02:54.000 --> 00:02:59.000
マーカーを表示するためにズームインすることで、マップがどのように自動的にコンテンツをフレーミングしたかを確認してください。

00:02:59.000 --> 00:03:01.000
では、マーカーとは何ですか?

00:03:01.000 --> 00:03:06.000
コンテンツビルダーを使用して提示できる他の種類のコンテンツはありますか?

00:03:06.000 --> 00:03:10.000
マーカーは、地図上の特定の座標にコンテンツを表示するために使用されます。

00:03:10.000 --> 00:03:12.000
風船の形はあなたに見覚えがあるかもしれません。

00:03:12.000 --> 00:03:20.000
App Storeで見つけることができる多種多様なアプリを含め、マップアプリやプラットフォーム全体で使用されているマーカーを見つけることができます。

00:03:20.000 --> 00:03:25.000
マーカーと同様に、注釈は特定の座標でコンテンツを表示するために使用されます。

00:03:25.000 --> 00:03:31.000
マーカーのバルーンの代わりに、アノテーションはSwiftUIビューを表示します。

00:03:31.000 --> 00:03:35.000
コンテンツビルダーは、オーバーレイコンテンツを表示するためにも使用できます。

00:03:35.000 --> 00:03:37.000
これらについては、少し後で詳しく学びます。

00:03:37.000 --> 00:03:43.000
今のところ、あなたが本当に知る必要があるのは、コンテンツビルダーのクロージャを使用して、あらゆる種類のコンテンツをマップに追加できることです。

00:03:43.000 --> 00:03:50.000
駐車場のカスタムSwiftUIビューを表示したいので、注釈を使ってマークします。

00:03:50.000 --> 00:03:54.000
ここでは、ZStackを使用していくつかの図形と画像を作成しています。

00:03:54.000 --> 00:03:59.000
このSwiftUIビューは、駐車座標の中央に地図に表示されます。

00:03:59.000 --> 00:04:05.000
ビューを座標の上に配置したい場合は、アノテーションのアンカーパラメータを使用できます。

00:04:05.000 --> 00:04:11.000
「下」のアンカー値を指定すると、ビューの下部が注釈の座標の右側に配置されます。

00:04:11.000 --> 00:04:12.000
わかった！

00:04:12.000 --> 00:04:15.000
このアプリは、ウォーキングツアーを開始する場所をマークします。

00:04:15.000 --> 00:04:20.000
MapContentBuilderを使用して、地図上に注釈コンテンツを表示しました。

00:04:20.000 --> 00:04:24.000
次に、地図を見ながら、このアプリに場所の感覚を伝えたいと思います。

00:04:24.000 --> 00:04:29.000
mapStyleを使用して、現実的な地形の標高を有効にすることでそれを達成します。

00:04:29.000 --> 00:04:36.000
mapStyleを使用して衛星やフライオーバー画像を表示する方法も学びます。

00:04:36.000 --> 00:04:43.000
mapStyle修飾子を使用してスタイルを設定できます。

00:04:43.000 --> 00:04:44.000
これが標準的な地図スタイルです。

00:04:44.000 --> 00:04:50.000
デフォルトでは、物理的な紙の地図のようなフラットなプレゼンテーションを提供します。

00:04:50.000 --> 00:05:07.000
ラグーンに橋があるように見えるので、片側から反対側まで歩くことができます。

00:05:07.000 --> 00:05:10.000
しかし、この平らな地図は本当に想像力に何かを残します。

00:05:10.000 --> 00:05:16.000
現実的な高架地形を有効にして、地図に別の次元を与えます。

00:05:16.000 --> 00:05:33.000
現実的な標高を有効にすると、本当に地図に命を吹き込みます。

00:05:33.000 --> 00:05:41.000
今ラグーンを見ると、夏にクルーズする白鳥のボートの1つに乗って、ボートが橋の下を通り過ぎるのを想像できます。

00:05:41.000 --> 00:05:46.000
画像マップスタイルを使用することは、ユーザーに場所の感覚を提供するもう1つの素晴らしい方法です。

00:05:46.000 --> 00:05:52.000
画像マップスタイルは、衛星またはフライオーバー画像を使用してレンダリングされた地図を表示します。

00:05:52.000 --> 00:05:56.000
ハイブリッドマップスタイルは、画像と道路やラベルを組み合わせたものです。

00:05:56.000 --> 00:06:04.000
要約すると、標準のマップスタイルを使用して現実的な標高を有効にし、他のマップスタイルを使用する方法も示しました。

00:06:04.000 --> 00:06:09.000
次に、私たちが訪れたい場所を検索するのに役立つアプリが欲しいです。

00:06:09.000 --> 00:06:14.000
私たちの子供たちは私たちと一緒にボストンを歩き回ります、そして私は私たちの朝も彼らのために楽しいものになりたいです。

00:06:14.000 --> 00:06:21.000
子供たちはブランコやスライド、モンキーバーを鑑賞しながら、大人は歴史を見て鑑賞することができます!

00:06:21.000 --> 00:06:26.000
遊び場を検索するボタンと、ビーチを検索するボタンも追加します。

00:06:26.000 --> 00:06:30.000
アプリは検索結果ごとにマーカーを追加します。

00:06:30.000 --> 00:06:38.000
マーカーについてもう少し学び、検索結果の邪魔をせずに地図の上に自分のUIを表示する方法も学びます。

00:06:38.000 --> 00:06:42.000
今日早く、私は小さなBeantownButtons Viewを作りました。

00:06:42.000 --> 00:06:48.000
ボタンをタップすると、遊び場またはビーチのいずれかの簡単なクエリで検索機能が呼びます。

00:06:48.000 --> 00:06:58.000
検索機能は、MKLocalSearchを使用してボストンコモン駐車場の近くの場所を検索し、バインディングを使用して結果を書き込みます。

00:06:58.000 --> 00:07:05.000
アプリのメインのContentViewに戻り、検索結果を追跡するためにStateを追加します。

00:07:05.000 --> 00:07:12.000
BeantownButtons UIが検索を実行すると、バインディングを使用して結果をこの状態に書き戻します。

00:07:12.000 --> 00:07:21.000
画面の下部にある地図の上にボタンを追加します。

00:07:21.000 --> 00:07:33.000
safeAreaInsetを使用すると、アプリのUIが、私が追加しているコンテンツや、Apple Mapsのロゴやリーガルリンクなど、地図に表示される可能性のあるシステムが提供するコントロールを不明瞭にしないようにします。

00:07:33.000 --> 00:07:40.000
次に、コンテンツビルダーを使用して検索結果マーカーを追加します。

00:07:40.000 --> 00:07:50.000
ForEachを使用して、検索結果ごとにマーカーを追加しています。

00:07:50.000 --> 00:07:54.000
これらのボタンを試してみます。遊び場を見つけましょう。

00:07:54.000 --> 00:07:56.000
見て！遊び場！

00:07:56.000 --> 00:08:00.000
マップは、それらがすべて見えるようにズームアウトすることで自動的にそれらをフレーム化しました。

00:08:00.000 --> 00:08:04.000
いくつかのビーチはどうですか?

00:08:04.000 --> 00:08:12.000
検索結果はMKMapItemsで、MKLocalSearchのようなMapKit APIが場所を表すために使用するタイプです。

00:08:12.000 --> 00:08:15.000
ここでは、マーカーのマップアイテムイニシャライザを使用しています。

00:08:15.000 --> 00:08:24.000
この方法で作成されたマーカーは、タイトルにマップアイテムの名前を使用し、マップアイテムの情報を使用して、その場所を表すアイコンと色合いを表示します。

00:08:24.000 --> 00:08:29.000
これらの検索結果のほとんどは、水色のビーチパラソルマーカーとして表示されます。

00:08:29.000 --> 00:08:34.000
マップアイテムを操作しているとき、マーカーの自動コンテンツとスタイルのサポートは非常に便利です。

00:08:34.000 --> 00:08:39.000
ただし、マップアイテムを使用していなくても、マーカーのプレゼンテーションを制御できます。

00:08:39.000 --> 00:08:44.000
デフォルトでは、マーカーはここで見られるように、バルーンにマップピンアイコンを表示します。

00:08:44.000 --> 00:08:48.000
画像アセットまたはシステムイメージを使用して、独自のアイコンを提供できます。

00:08:48.000 --> 00:08:52.000
モノグラムを使用して、最大3文字のテキストを表示することもできます。

00:08:52.000 --> 00:08:57.000
ティント修飾子を使用してマーカーの色を変更できます。

00:08:57.000 --> 00:09:05.000
要約すると、safeAreaInsetを使用して、検索結果マーカーを覆い隠さないようにしながら、マップの上にいくつかのボタンを表示しました。

00:09:05.000 --> 00:09:10.000
次に、地図に表示されているものをアプリに制御します。

00:09:10.000 --> 00:09:12.000
地図にコンテンツを追加しています。

00:09:12.000 --> 00:09:16.000
私が持っているたびに、地図は自動的に私のために私のコンテンツをフレーミングしました。

00:09:16.000 --> 00:09:20.000
必要なときにこの便利な動作を有効にする方法を紹介します。

00:09:20.000 --> 00:09:26.000
また、ボストン地域のノースショアの海岸線など、他のものを完全に表示する方法も紹介します。

00:09:26.000 --> 00:09:35.000
今、私たちはビーチを見ています。

00:09:35.000 --> 00:09:40.000
パンを離れて遊び場を検索したら...

00:09:40.000 --> 00:09:45.000
地図は、ボストンコモンの駐車場の近くで結果を自動的に表示しなくなりました。

00:09:45.000 --> 00:09:57.000
ユーザーがマップと対話した後に検索結果を表示するには、マップがマーカーをフレーム化するように、マップのカメラ位置状態を再設定する必要があります...

00:09:57.000 --> 00:10:02.000
だから、位置を追跡するために状態を追加します。

00:10:02.000 --> 00:10:13.000
マップに追加したコンテンツをフレームにするデフォルトの自動位置を使用します。

00:10:13.000 --> 00:10:19.000
そして、バインディングをMapの初期化子に渡します。

00:10:19.000 --> 00:10:35.000
onChange修飾子を使用して、検索結果がいつ更新されるかを調べます。

00:10:35.000 --> 00:10:44.000
そうしたら、カメラの位置を自動に戻して、見えるようにします。

00:10:44.000 --> 00:10:46.000
試してみましょう。 

00:10:46.000 --> 00:10:51.000
ビーチを検索して、結果を見ます...

00:10:51.000 --> 00:10:57.000
そして、遊び場を探す前にパンします。

00:10:57.000 --> 00:10:58.000
かっこいい！

00:10:58.000 --> 00:11:04.000
検索を実行すると、ロードアイランドまでパンしていたとしても、結果がすべて表示されます。

00:11:04.000 --> 00:11:08.000
このポジション状態を使ってもう一つやりたいことがあります。.

00:11:08.000 --> 00:11:14.000
ボストンでの楽しい朝の後、私の家族はビーチで午後を過ごすために北に運転します。

00:11:14.000 --> 00:11:21.000
ノースショアの海岸線を見やすくして、どこに行くのかを感じられるようにアプリが欲しいです。

00:11:21.000 --> 00:11:27.000
ポジションステートを使ってそれを行います。

00:11:27.000 --> 00:11:34.000
都市とノースショアのコーディネート地域を追加します。

00:11:34.000 --> 00:11:44.000
BeantownButtons UIに切り替えて、位置状態のバインディングを追加します。

00:11:44.000 --> 00:11:51.000
いくつかのボタンを追加し、それぞれがカメラの位置をリージョンに設定します。

00:11:51.000 --> 00:11:55.000
シティボタンを押すと、地図にボストンが表示されます。

00:11:55.000 --> 00:12:03.000
波ボタンを押すと、地図に北岸の海岸線が表示されます。

00:12:03.000 --> 00:12:09.000
ContentViewに戻り、ボタンUIに位置バインディングを渡します。

00:12:09.000 --> 00:12:26.000
やってみよう！だ！

00:12:26.000 --> 00:12:32.000
「波」ボタンをタップすると、地図の位置が更新され、北岸の海岸線地域が表示されました。

00:12:32.000 --> 00:12:39.000
「都市」ボタンをタップすると、ボストンを表示するように更新されます。

00:12:39.000 --> 00:12:43.000
舞台裏では、マップが示すものは最終的にMapCameraによって制御されます。

00:12:43.000 --> 00:12:51.000
カメラは特定の距離から地面の座標を見て、カメラの向きが地図に表示されているものを決定します。

00:12:51.000 --> 00:12:55.000
私が構築しているアプリは、カメラ自体を作成したり設定したりする必要がありませんでした。

00:12:55.000 --> 00:13:00.000
代わりに、MapCameraPositionを使用して表示すべきものを指定するだけです。

00:13:00.000 --> 00:13:03.000
MapKitは私のためにカメラの世話をします。

00:13:03.000 --> 00:13:07.000
このアプリは、自動カメラ位置を使用して、検索結果などのコンテンツをフレーム化します。

00:13:07.000 --> 00:13:11.000
地域の位置を使用して、ボストンとノースショアを示しています。

00:13:11.000 --> 00:13:15.000
カメラの位置を指定して、他のものをフレーミングすることもできます。

00:13:15.000 --> 00:13:20.000
直位は、領域を使用した方法と同様に、領域を表示するために使用されます。

00:13:20.000 --> 00:13:25.000
座標領域ではなく、単にマップrectを使用してその領域を表します。

00:13:25.000 --> 00:13:31.000
アイテム、カメラ、ユーザーの位置、カメラの位置を詳しく見てみましょう。

00:13:31.000 --> 00:13:35.000
MKMapItemを使用すると、特定の場所を表示できます。

00:13:35.000 --> 00:13:37.000
これはあらゆる種類の地図項目で機能します。

00:13:37.000 --> 00:13:44.000
マップアイテムがケープコッドベイを表す場合、MapKitは自動的にズームアウトしてフィットします。

00:13:44.000 --> 00:13:51.000
ノースエンドの特定の公園を表示しようとしている場合、カメラはズームインして周囲を表示し、場所の感覚を提供します。

00:13:51.000 --> 00:13:56.000
また、あなたが望むように正確に設定されたMapCameraを単に供給することもできます。

00:13:56.000 --> 00:14:01.000
ピッチアングルでMapCameraを使用することは、3Dパースペクティブを提供する素晴らしい方法です。

00:14:01.000 --> 00:14:07.000
または、チャールズ川沿いを歩いているときに、カメラがユーザーの位置をたどるようにしたいかもしれません。

00:14:07.000 --> 00:14:18.000
位置認証が付与されていない場合や、デバイスが位置修正を取得しようとしているときなど、ユーザーの位置が不明な場合に使用されるフォールバック位置を指定できます。

00:14:18.000 --> 00:14:24.000
カメラの位置状態にバインディングを提供すると、カメラの位置が変更されたときにMapKitはそれを更新します。

00:14:24.000 --> 00:14:30.000
これがユーザーの位置カメラの位置です。followsUserLocationプロパティはtrueです。

00:14:30.000 --> 00:14:36.000
ユーザーがパンを離すと、カメラはユーザーの位置をたどっていなくなります。

00:14:36.000 --> 00:14:41.000
ユーザーがマップと対話すると、カメラの位置状態はpositionionsByUserになります。

00:14:41.000 --> 00:14:47.000
アプリがカメラの位置状態をuserLocationに戻すと、カメラはユーザーの位置に従います。

00:14:47.000 --> 00:14:53.000
アプリがカメラの位置状態を設定すると、それはUserによって配置されません。

00:14:53.000 --> 00:14:59.000
ユーザーは、指定したカメラの位置の種類に関係なく、マップと対話することでカメラを配置できます。

00:14:59.000 --> 00:15:03.000
わかった！アプリは現在、地図上の表示されているものを制御できます。

00:15:03.000 --> 00:15:09.000
自動カメラの位置を使用して、ユーザーが地図を操作した後でも検索結果が表示されるようにしました。

00:15:09.000 --> 00:15:14.000
地域のカメラの位置を使用して、ボストンとノースショアを表示しました。

00:15:14.000 --> 00:15:22.000
次に、ボストンコモンの近くだけを検索するのではなく、訪問したい地域に地図をパンして、代わりにそこで検索したいと思います。

00:15:22.000 --> 00:15:26.000
カメラが変わったときに可視領域を取得する方法を紹介します。

00:15:26.000 --> 00:15:31.000
地図に表示されている地域を追跡するために状態を追加します。

00:15:31.000 --> 00:15:39.000
onMapCameraChange修飾子を追加します。ここでは、更新コンテキストから可視領域を取得して、自分の状態に保管します。

00:15:39.000 --> 00:15:45.000
デフォルトでは、onMapCameraChangeに提供されたクロージャは、ユーザーがマップとのやり取りを終えたときに呼び出されます。

00:15:45.000 --> 00:15:53.000
ユーザーがマップと対話している間にクロージャを呼び出すには、周波数パラメータを渡すことで継続的な更新を要求できます。

00:15:53.000 --> 00:16:02.000
ここで使用している地域プロパティに加えて、コンテキストには、可視マップrectのプロパティとマップカメラ自体のプロパティもあります。

00:16:02.000 --> 00:16:06.000
私のニーズに応じて、それらも使うことができます。

00:16:06.000 --> 00:16:13.000
BeantownButtonsを更新して、ユーザーに表示される地域内で検索できるようにします。

00:16:13.000 --> 00:16:20.000
ボタンに可視領域を追加します。

00:16:20.000 --> 00:16:24.000
そして、検索リクエストでそれを使用します。

00:16:24.000 --> 00:16:35.000
ContentViewでは、visibleRegionをボタンUIに渡します。

00:16:35.000 --> 00:16:40.000
ノースショアのビーチを探しましょう！

00:16:40.000 --> 00:16:44.000
ノースショアがあります。ビーチをいくつか見せて！

00:16:44.000 --> 00:16:53.000
甘い！ロードアイランド州はどうですか？

00:16:53.000 --> 00:16:56.000
かっこいい！ロードアイランド州のビーチも検索できるようになりました！

00:16:56.000 --> 00:17:03.000
目に見えるものに変更があったときに通知するonMapCameraChangeを使用してこれを有効にしました。

00:17:03.000 --> 00:17:07.000
次に、どのビーチに行くかを選ぶのを少し簡単にするために、アプリが欲しいです。

00:17:07.000 --> 00:17:09.000
確かに選択肢はたくさんあります。

00:17:09.000 --> 00:17:13.000
はじめに、検索結果を選択するためのサポートを追加します。

00:17:13.000 --> 00:17:17.000
今、検索結果マーカーをタップしても、何も起こりません。

00:17:17.000 --> 00:17:22.000
選択状態がないため、マーカーは選択できません。

00:17:22.000 --> 00:17:44.000
選択を有効にするには、マップに選択バインディングを追加するだけです。

00:17:44.000 --> 00:17:51.000
では、結果をタップするとどうなるか見てみましょう。

00:17:51.000 --> 00:17:57.000
風船は、それが選択されたことを示すためにアニメーション化します!

00:17:57.000 --> 00:18:05.000
選択タイプとしてMKMapItemを使用しているので、マップアイテムを表す各マーカーが選択可能になりました。

00:18:05.000 --> 00:18:12.000
駐車場の注釈は地図項目を表していないので、選択できません。

00:18:12.000 --> 00:18:19.000
必ずしも同じタイプのアイデンティティではないマーカーとアノテーションの選択をサポートしたい場合は、単にタグを付けることができます。

00:18:19.000 --> 00:18:24.000
これは、ピッカーとリストで選択を管理する場合と同じように機能します。

00:18:24.000 --> 00:18:27.000
ここで、選択したタグの状態はIntです。

00:18:27.000 --> 00:18:32.000
各マーカーはIntでタグ付けされているため、バインディングは両方の選択を可能にします。

00:18:32.000 --> 00:18:37.000
タグを使用して選択を有効にする場合、選択状態にハッシュ可能な任意のタイプを使用できます。

00:18:37.000 --> 00:18:43.000
要約すると、MKMapItem選択バインディングをマップに追加し、検索結果マーカーの選択を有効にしました。

00:18:43.000 --> 00:18:49.000
次に、アプリは選択した検索結果に関する追加情報を表示する必要があります。

00:18:49.000 --> 00:18:55.000
ビーチのスニークピークを提供するためにプレビューを追加し、ビーチの名前とドライブ時間も追加します。

00:18:55.000 --> 00:19:02.000
今日早く、私がBeantownButtons Viewを書いていたとき、私はまた、示す小さなItemInfoViewを書きました...

00:19:02.000 --> 00:19:09.000
タイトル、推定移動時間、ルックアラウンドプレビュー。

00:19:09.000 --> 00:19:13.000
Look Around Previewでは、選択したビーチがどのように見えるかが表示されます。

00:19:13.000 --> 00:19:15.000
プレビューには、ルックアラウンドシーンが表示されます。

00:19:15.000 --> 00:19:20.000
MKLookAroundSceneRequestを使用して、特定のマップアイテムのシーンを取得できます。

00:19:20.000 --> 00:19:27.000
ビューが表示されるとシーンが取得され、選択した検索結果が変更されるごとに再び取得されます。

00:19:27.000 --> 00:19:34.000
最後に、DateComponentsFormatterを使用して、表示のためにMKRouteの予想移動時間をフォーマットするプロパティがあります。

00:19:34.000 --> 00:19:40.000
ContentViewに戻り、このItemInfoViewを追加します。

00:19:40.000 --> 00:19:45.000
まず最初に：駐車場から選択した検索結果までのルートを取得します。

00:19:45.000 --> 00:19:51.000
ルートを追跡するために州を追加します...

00:19:51.000 --> 00:19:56.000
そして、MKDirectionsを使用して1つを取得する機能を追加します...

00:19:56.000 --> 00:20:03.000
そして、状態を設定します。

00:20:03.000 --> 00:20:10.000
選択が変更されたときに関数を呼び出すために別のonChange修飾子を追加します。

00:20:10.000 --> 00:20:32.000
アプリには、検索結果が選択されると、アイテム情報ビューが表示されます。

00:20:32.000 --> 00:20:38.000
その間、検索結果のマーカーのタイトルを隠して、マップの外観を少しクリーンアップします。

00:20:38.000 --> 00:20:43.000
ItemInfoViewは、代わりに選択した場所の名前を表示します。

00:20:43.000 --> 00:20:54.000
オーケー！私たちが得たものを見てみましょう。

00:20:54.000 --> 00:21:07.000
ええ、この近くに遊び場があると聞きました...かなり素敵に見えます。

00:21:07.000 --> 00:21:13.000
こんな風に何があるのかしら？

00:21:13.000 --> 00:21:25.000
いいね！遊び場のあるビーチ、すぐそこ？

00:21:25.000 --> 00:21:30.000
私たちの家族にとって、それはかなり打ち負かすのは難しいでしょう。

00:21:30.000 --> 00:21:32.000
ボストンコモンから約30分です。

00:21:32.000 --> 00:21:34.000
素晴らしい場所のようです。

00:21:34.000 --> 00:21:39.000
要約すると、マーカーが選択されたときに表示されるルックアラウンドプレビューを追加しました。

00:21:39.000 --> 00:21:45.000
MKRouteからの推定移動時間に加えて、これは本当にビーチを選ぶのに役立ちます。

00:21:45.000 --> 00:21:54.000
次に、移動時間を表示するルートがすでにあるため、ボストンコモンから選択した検索結果までの運転ルートを表示するために完全に使用する必要があります。

00:21:54.000 --> 00:22:02.000
ルートを表示するためにMapPolylineオーバーレイを追加し、追加できる他の種類のオーバーレイコンテンツもお見せします。

00:22:02.000 --> 00:22:09.000
ルートが利用可能になったら、MapPolylineを追加し、青でストロークします。

00:22:09.000 --> 00:22:17.000
地図で見てみましょう。

00:22:17.000 --> 00:22:32.000
かなり素敵なドライブのように見えます!

00:22:32.000 --> 00:22:36.000
MKRouteでMapPolylineを使用するのはとても簡単でした。

00:22:36.000 --> 00:22:40.000
MapPolylineを使用して、独自の位置データを表示することもできます。

00:22:40.000 --> 00:22:46.000
StrokeStyleを使用して、ダッシュやグラデーションなど、かなり派手なものを提供できます。

00:22:46.000 --> 00:22:52.000
エリアを強調表示したい場合は、MapPolygonまたはMapCircleを使用することをお勧めします。

00:22:52.000 --> 00:22:57.000
ここにいくつかの公園をマークする2つのポリゴンがあります。

00:22:57.000 --> 00:23:00.000
ここに同じ公園を示す2つの円があります。

00:23:00.000 --> 00:23:03.000
各円にオーバーレイレベルが指定されていることに気づくでしょう。

00:23:03.000 --> 00:23:10.000
ピンクの円は、地図のラベルを円の上に配置する上記の道路のデフォルトのオーバーレイレベルを使用しています。

00:23:10.000 --> 00:23:14.000
シアンサークルは上記のラベルを使用しています。

00:23:14.000 --> 00:23:17.000
アプリは本当に形になりつつあります。

00:23:17.000 --> 00:23:24.000
ビーチへの運転ルートを示すためにMapPolylineを追加し、使用できる他のオーバーレイタイプをいくつかお見せしました。

00:23:24.000 --> 00:23:28.000
次に、アプリが私がどこにいるかを本当に簡単に把握できるようにしたい。

00:23:28.000 --> 00:23:35.000
ボストンに着いて歩き始めると、少し迷子になる可能性もあります。

00:23:35.000 --> 00:23:42.000
私がどこにいるかを示すためにUserAnnotationをコンテンツとして追加し、自分自身を見つけるためにMapUserLocationButtonを追加します。

00:23:42.000 --> 00:23:47.000
使用できる他のいくつかのタイプのマップコントロールについても学びます。

00:23:47.000 --> 00:23:53.000
だから、自分自身を見つけようとしているとき、私は通常、地図上の小さな青い点を探すことから始めます。

00:23:53.000 --> 00:24:00.000
地図のコンテンツにUserAnnotationを追加したので、私の場所が地図上に表示されます。

00:24:00.000 --> 00:24:06.000
私はどこにいるの?

00:24:06.000 --> 00:24:14.000
私はそこにいます!

00:24:14.000 --> 00:24:25.000
私たちがチェックしている遊び場やビーチから本当にかなり離れているように見えます。 

00:24:25.000 --> 00:24:30.000
アップルパークに行くには、ズームアウトしてたくさんパンしなければなりませんでした。

00:24:30.000 --> 00:24:40.000
MapUserLocationButtonはそれを確実に簡単にします。

00:24:40.000 --> 00:24:45.000
これで、ボタンをタップして自分の位置を表示できます。

00:24:45.000 --> 00:24:51.000
私が動き回ると、地図カメラがついてきます。

00:24:51.000 --> 00:25:04.000
MapCompassとMapScaleViewも追加しました。

00:25:04.000 --> 00:25:12.000
デフォルトのmapControls設定には、マップが回転しているときにコンパスが表示され、ユーザーがズームインまたはズームアウトしているときにスケールインジケーターが表示されます。

00:25:12.000 --> 00:25:19.000
このアプリにもこれらのデフォルトのコントロールが欲しいので、ユーザーの位置情報ボタンに加えて指定しました。

00:25:19.000 --> 00:25:27.000
mapControls修飾子を使用してこれらすべてを追加したので、マップは自動的にデフォルトの場所に表示します。

00:25:27.000 --> 00:25:35.000
これには、macOSにあるMapZoomStepperやMapPitchSliderなど、すべてのプラットフォームでのマップコントロールが含まれます。

00:25:35.000 --> 00:25:40.000
これらのコントロールを自分で配置したい場合は、独自のUIで表示できます。

00:25:40.000 --> 00:25:48.000
マップコントロールは単なるビューなので、mapControls修飾子を使用する代わりに、他のビューと同じように追加できます。

00:25:48.000 --> 00:25:54.000
これを行う場合は、mapScope修飾子を使用して、コントロールを特定のマップスコープに関連付ける必要があります。

00:25:54.000 --> 00:26:00.000
プレゼンテーションがもうすぐ終わるので、今日学んだことをまとめましょう。

00:26:00.000 --> 00:26:07.000
MapKit for SwiftUIは、マップをアプリに統合するための非常に強力で使いやすいAPIです。

00:26:07.000 --> 00:26:14.000
マーカー、注釈、オーバーレイを使用して、コンテンツを地図上に表示できます。

00:26:14.000 --> 00:26:18.000
マップカメラとマップコントロールを使用すると、ニーズに合わせてマップを調整できます。

00:26:18.000 --> 00:26:23.000
最後に、MapStyleとLook Aroundは、ユーザーに本当の場所の感覚を与えます。

00:26:23.000 --> 00:26:30.000
これらはSwiftUI用のMapKitの機能のほんの一部ですので、詳細については、開発者ドキュメントを確認してください。

00:26:30.000 --> 00:26:36.000
そしてもちろん、これはSwiftUIなので、あなたの地図はすべてのプラットフォームで素晴らしく見えます!

00:26:36.000 --> 00:26:38.000
私たちが締めくくるとき、いくつかの最後の考え。

00:26:38.000 --> 00:26:44.000
オートコンプリートと道順をサポートするために、Apple Maps Server APIを拡張しました。

00:26:44.000 --> 00:26:53.000
サーバーAPIの使用方法の詳細については、昨年のダブダブセッション「Meet Apple Maps Server APIs」をご覧ください。いつものように、私たちはあなたのフィードバックを聞きたいです!

00:26:53.000 --> 00:26:57.000
フィードバックアシスタントを使って、あなたの考えを聞かせてください。

00:26:57.000 --> 00:27:02.000
最後になりましたが、今年はSwiftUIの新機能をチェックすることをお勧めします。

00:27:02.000 --> 00:27:06.000
アニメーション計画は、あなたの地図にアニメーションを追加する素晴らしい方法です!

00:27:06.000 --> 00:27:09.000
以下のセッションでそれらをチェックしてください。

00:27:09.000 --> 00:27:11.000
それでおそれ！見てくれてありがとう!

00:27:11.000 --> 00:27:14.000
ビーチで会いましょう！そしてビーチで会いましょう

00:27:14.000 --> 23:59:59.000
♪ ♪

