WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:12.000
アルテム:こんにちは、私の名前はアルテムです。

00:00:12.000 --> 00:00:15.000
私はApple Push Notificationsチームのエンジニアです。

00:00:15.000 --> 00:00:18.000
プッシュ通知コンソールを紹介できることを嬉しく思います。

00:00:18.000 --> 00:00:25.000
これは、プッシュ通知をアプリに統合するのに役立ついくつかの機能を組み合わせたまったく新しいツールです。

00:00:25.000 --> 00:00:31.000
まず、コンソールからいくつかの通知を送信します。これは、エンド・トゥ・エンドのテストに役立ちます。

00:00:31.000 --> 00:00:36.000
次に、配信ログ機能を使用して、いくつかの一般的な問題を分析します。

00:00:36.000 --> 00:00:43.000
そして最後に、認証とデバイストークンを扱うために活用できるいくつかの追加ツールを紹介します。

00:00:43.000 --> 00:00:47.000
まず、プッシュ通知の基本をいくつか取り上げます。

00:00:47.000 --> 00:00:54.000
プッシュ通知は、アプリケーションやウェブサイトからユーザーのデバイスに送信される短いメッセージです。

00:00:54.000 --> 00:00:59.000
それらは、アプリの機能を拡張するための非常に強力なツールです。

00:00:59.000 --> 00:01:05.000
毎秒何百万ものプッシュ通知がAppleデバイスに配信され、ユーザーエクスペリエンスを豊かにします。

00:01:05.000 --> 00:01:12.000
これらの通知はリアルタイムで配信され、タイムリーで関連性の高い情報をユーザーに提供するように設計されています。

00:01:12.000 --> 00:01:18.000
これにより、アプリケーションの更新に関して、よりダイナミックな体験が可能になります。

00:01:18.000 --> 00:01:25.000
プッシュ通知は、ユーザーエンゲージメントを高め、アプリを常に最新の状態に保つのに役立ちます。

00:01:25.000 --> 00:01:29.000
これがどのように機能するかの簡単な概要です。

00:01:29.000 --> 00:01:38.000
プッシュ通知の配信を可能にするバックエンドは、Appleプッシュ通知サービス、略してAPNsと呼ばれます。

00:01:38.000 --> 00:01:44.000
通知のストーリーは、アプリからの通知を許可するようユーザーに促すときに始まります。

00:01:44.000 --> 00:01:51.000
ユーザーが同意した場合、デバイストークンはAPNsによって生成され、デバイスに送信されます。

00:01:51.000 --> 00:01:57.000
そのトークンは、その特定のデバイス上のアプリを一意に識別します。

00:01:57.000 --> 00:02:03.000
通常、トークンはアプリケーションサーバーに転送され、将来の使用のために保存されます。

00:02:03.000 --> 00:02:12.000
サーバーがプッシュ通知を送信したい場合、保存されたデバイストークンを使用してAPNsを介して通知に対処します。

00:02:12.000 --> 00:02:18.000
その後、APNsは、対応するトークンを使用してデバイス上のアプリに通知を配信します。

00:02:18.000 --> 00:02:26.000
デバイストークンは変更される可能性があるため、正確で信頼性の高い配信のためにサーバー側で最新の状態に保つことが不可欠です。

00:02:26.000 --> 00:02:33.000
プッシュ通知コンソールは、APNsと対話するためのさまざまな機器を提供するまったく新しいツールです。

00:02:33.000 --> 00:02:40.000
アプリを開発し、それにプッシュ通知を追加する場合は、エンドツーエンドでテストする簡単な方法が欲しいかもしれません。

00:02:40.000 --> 00:02:43.000
そこで送信機能が役に立ちます。 送信機能が便利です。

00:02:43.000 --> 00:02:46.000
私はBackyard Birdsアプリを開発しています。

00:02:46.000 --> 00:02:52.000
今は春で、越冬地から戻ってくる鳥もいるので、それについてユーザーに知らせたい。

00:02:52.000 --> 00:02:55.000
新しい通知を作成します。私は新しい通知を作成します。

00:02:55.000 --> 00:03:04.000
名前を付け、電話でアプリのデバイストークンを提供し、いくつかのペイロード属性を埋めます。

00:03:04.000 --> 00:03:09.000
タイトルにはアプリの名前を使います。

00:03:09.000 --> 00:03:22.000
サブタイトルには「重要なアップデート」と書かれています。そして、体は「ロビンズが帰ってきた」というメッセージになります。

00:03:22.000 --> 00:03:30.000
準備ができたので、送信をクリックします。

00:03:30.000 --> 00:03:35.000
デバイスがプッシュを受信すると、通知が表示されます。

00:03:35.000 --> 00:03:42.000
このページから送信された通知の履歴は、左側のサイドバーに保存されています。

00:03:42.000 --> 00:03:46.000
最後の通知を再利用したいのですが、メッセージを少し変更します。

00:03:46.000 --> 00:03:53.000
送信されたばかりのメッセージをコピーして、新しい通知を作成します。

00:03:53.000 --> 00:03:57.000
ここで、それに名前を付けてください。

00:03:57.000 --> 00:04:04.000
そして、このスイッチを切り替えると、生のJSON形式でペイロードを入力できます。

00:04:04.000 --> 00:04:18.000
コピーしたペイロードを挿入して、メッセージを別のものに変更します。

00:04:18.000 --> 00:04:25.000
同じデバイストークンを供給し、送信します。

00:04:25.000 --> 00:04:30.000
そして、デバイスは更新された通知を受け取ります。

00:04:30.000 --> 00:04:35.000
コンソールでは、多くの種類の通知やさまざまな属性をテストできます。

00:04:35.000 --> 00:04:39.000
環境を指定できます...

00:04:39.000 --> 00:04:44.000
異なるプッシュタイプを試してみてください...

00:04:44.000 --> 00:04:49.000
正確な有効期限を設定します...

00:04:49.000 --> 00:04:53.000
異なる優先順位を試してみてください...

00:04:53.000 --> 00:05:00.000
そして、あらゆる種類のペイロードを送信します。

00:05:00.000 --> 00:05:03.000
次に、配信ログ機能について説明します。

00:05:03.000 --> 00:05:11.000
送信した通知が届かない場合があり、何が起こったのか不明な場合があります。

00:05:11.000 --> 00:05:14.000
このツールを使用すると、そのようなケースを分析するのに役立つかもしれません。

00:05:14.000 --> 00:05:21.000
通知がAPNsスタックを通過すると、その配信プロセスを反映したイベントが記録されます。

00:05:21.000 --> 00:05:27.000
そして今、通知が送信されたときにAPNsが返す新しいヘッダーを使用して、その情報を取得できます。

00:05:27.000 --> 00:05:29.000
これがその仕組みです。

00:05:29.000 --> 00:05:36.000
デバイスは、低電力モードを有効にすることで、通知が受信されない状況をエミュレートできます。

00:05:36.000 --> 00:05:46.000
次に、[送信]タブに移動し、通知の1つを再送信します。

00:05:46.000 --> 00:06:02.000
名前を付け、ペイロードを貼り付け、デバイストークンを提供し、将来の有効期限を設定します。

00:06:02.000 --> 00:06:08.000
しかし、今回は「送信」をクリックした後、通知はデバイスに表示されません。

00:06:08.000 --> 00:06:19.000
何が起こったのかを知るために、APNsがHTTPレスポンスで返す新しいタイプのID「apns-unique-id」をコピーします。

00:06:19.000 --> 00:06:27.000
「配信ログ」タブに切り替えた後、コピーしたIDを入力できる検索フィールドが表示されます。

00:06:27.000 --> 00:06:34.000
検索を実行すると、APNsスタックを通過した通知の履歴を見ることができます。

00:06:34.000 --> 00:06:41.000
ここで最後のイベントは「デバイスの電源に関する考慮事項のために保存」であり、メッセージが配信されなかった理由を説明しています。

00:06:41.000 --> 00:06:50.000
この場合、電話は低電力モードだったので、バッテリーを節約するためにいくつかの通知の受信を延期しました。

00:06:50.000 --> 00:07:00.000
低電力モードが無効になっていると、通知が受信され、デバイスに表示されます。

00:07:00.000 --> 00:07:07.000
配信後、対応する更新は配信ログでも見ることができます。

00:07:07.000 --> 00:07:10.000
このツールを使用すると、さまざまな状況を分析できます。

00:07:10.000 --> 00:07:17.000
各履歴イベントは、何が起こったのかだけでなく、対応するツールチップでその理由も説明しています。

00:07:17.000 --> 00:07:27.000
たとえば、デバイスがオフラインの場合、通知はAPNsストレージに移動したり、アプリがデバイスから削除された場合は破棄することができます。

00:07:27.000 --> 00:07:31.000
ツールで作業を開始すると、より多くの例が見つかります。

00:07:31.000 --> 00:07:37.000
この機能は、通常のAPNs APIを介して送信される通知でも利用できます。

00:07:37.000 --> 00:07:43.000
この情報を照会するには、APNs応答から「apns-unique-id」を記録する必要があります。

00:07:43.000 --> 00:07:54.000
また、コンソールから送信された通知については、「配信ログ」タブに切り替える必要はなく、同じ情報が送信ページ自体で入手できます。

00:07:54.000 --> 00:08:07.000
アプリをAPNsと統合すると、認証と通知の送信に使用されるさまざまな種類のトークンで作業し、コンソールにはさまざまな便利なツールも提供されます。

00:08:07.000 --> 00:08:10.000
まずは認証を取り上げましょう。

00:08:10.000 --> 00:08:18.000
APNsの認証には、証明書ベースとトークンベースの2種類があります。

00:08:18.000 --> 00:08:26.000
証明書ベースの認証は、サーバーとAPNsの間に信頼できる接続を確立するためにSSL証明書に依存しています。

00:08:26.000 --> 00:08:33.000
Apple Developerポータル内で、各アプリと環境の証明書を作成および管理する必要があります。

00:08:33.000 --> 00:08:40.000
証明書は期限切れになり、定期的に更新する必要があることを覚えておいてください。

00:08:40.000 --> 00:08:49.000
トークンベースの認証は、プロバイダーサーバーとAPNs間の安全で効率的な認証のためにJSON Webトークンを使用します。

00:08:49.000 --> 00:08:55.000
Apple Developerアカウントに関連付けられた秘密鍵で署名されたトークンを生成する必要があります。

00:08:55.000 --> 00:08:59.000
秘密鍵は証明書のように期限切れになりません。

00:08:59.000 --> 00:09:05.000
プッシュ通知コンソールの一部として、認証トークンを生成できるツールがあります。

00:09:05.000 --> 00:09:13.000
あなたがする必要があるのは、開発者ポータルから入手した秘密鍵を提供することだけです。

00:09:13.000 --> 00:09:16.000
そして、関連するキーID。

00:09:16.000 --> 00:09:21.000
これらの作品を供給した後、新しいトークンが生成されます。

00:09:21.000 --> 00:09:25.000
その後、それを使用してAPNsに対するリクエストを認証できます。

00:09:25.000 --> 00:09:32.000
これらのトークンの有効期間は1時間を超えないため、定期的にローテーションする必要があることに注意してください。

00:09:32.000 --> 00:09:36.000
そして、トークンを生成すると、キーはどこにもアップロードされません。

00:09:36.000 --> 00:09:40.000
ブラウザでのみ使用されるため、個人情報は保存されます。

00:09:40.000 --> 00:09:48.000
すでにトークンを持っているが、機能していないと思われる場合は、別のツールである認証トークンバリデーターを活用できます。

00:09:48.000 --> 00:09:56.000
生成したばかりのトークンを取って、検証ツールに貼り付けます。

00:09:56.000 --> 00:10:06.000
ここでは、この場合のようにトークンが有効であることを確認するか、そうでない理由を提供する検証結果を取り戻します。

00:10:06.000 --> 00:10:19.000
たとえば、少し前に使用したトークンを提供すると、検証結果は「発行された」クレームが古すぎることを教えてくれます。これは事実上、トークンの有効期限が切れていることを意味します。

00:10:19.000 --> 00:10:22.000
そして最後に、デバイストークンバリデータがあります。

00:10:22.000 --> 00:10:29.000
覚えているように、これらのトークンは、通知を送信するときに受信者を指定するために使用されます。

00:10:29.000 --> 00:10:33.000
それらは具体的な環境とプッシュタイプに結びついています。

00:10:33.000 --> 00:10:40.000
トークンを入力すると、トークンが有効である環境とプッシュタイプ（ある場合）を指示する応答が表示されます。

00:10:40.000 --> 00:10:50.000
たとえば、以前にデモンストレーションで使用されたトークンを提供すると、アラートとバックグラウンドのプッシュタイプと開発環境に有効であることがわかります。

00:10:50.000 --> 00:10:59.000
うまくいけば、これらの機能を使用して楽しんで、プッシュ通知をアプリに統合しやすくなり、人々に新しいエキサイティングな機能を提供します。

00:10:59.000 --> 00:11:01.000
今日から始めましょう。

00:11:01.000 --> 00:11:04.000
テスト統合にプッシュ通知をエンドツーエンドで送信します。

00:11:04.000 --> 00:11:09.000
配信ログを調べて、配信プロセスに関するより良い洞察を得る。

00:11:09.000 --> 00:11:14.000
コンソールからトークンを検証し、新しいトークンを生成します。

00:11:14.000 --> 00:11:23.000
クライアントへのプッシュ通知の実装の詳細については、WWDC20の「プッシュ通知プライマー」ビデオをご覧ください。

00:11:23.000 --> 00:11:25.000
見てくれてありがとう。

00:11:25.000 --> 23:59:59.000
♪ ♪

