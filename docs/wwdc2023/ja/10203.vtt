WEBVTT

00:00:00.000 -> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 -> 00:00:10.000
♪

00:00:10.000 -> 00:00:15.000
こんにちは、私の名前はピーターで、AppleのRealityKit Toolsチームで働いています。

00:00:15.000 -> 00:00:20.000
今日は、最初の没入型アプリの開発を開始する方法を見ていきます。

00:00:20.000 -> 00:00:28.000
空間コンピューティングは、コンテンツを提示し、アプリへのより深いレベルの没入を統合するまったく新しい方法を提供します。

00:00:28.000 -> 00:00:34.000
プラットフォーム自体は新しいですが、アプリを構築するには、すでに馴染みのあるワークフローが使用されます。

00:00:34.000 -> 00:00:39.000
このセッションでは、Xcodeで新しいアプリプロジェクトを作成することから始めます。

00:00:39.000 -> 00:00:49.000
シミュレーターで、シミュレートされたシーンでアプリを体験する方法と、Xcodeプレビューを使用してすばやく反復する方法について説明します。

00:00:49.000 -> 00:00:57.000
アプリの空間コンテンツの準備とプレビューに役立つ新しいツールであるReality Composer Proを紹介します。

00:00:57.000 -> 00:01:06.000
最後に、アプリが没入型シーンを作成し、SwiftUIジェスチャーをRealityKitエンティティにターゲットにする方法を紹介します。

00:01:06.000 -> 00:01:15.000
あなたのような何百万人もの開発者が毎日Xcodeを使用して、配布用のアプリを作成、プレビュー、デバッグ、プロファイル、準備しています。

00:01:15.000 -> 00:01:19.000
Xcodeは、最初のアプリを作成するのに最適な場所です。

00:01:19.000 -> 00:01:25.000
Xcodeプロジェクトの作成プロセスを見て、このプラットフォームの新機能を見てみましょう。

00:01:25.000 -> 00:01:30.000
Xcodeで新しいプロジェクトを作成すると、新しいプロジェクトアシスタントが表示されます。

00:01:30.000 -> 00:01:34.000
プロジェクトテンプレートをプラットフォームとプロジェクトタイプ別に整理します。

00:01:34.000 -> 00:01:40.000
アプリプロジェクトテンプレートは、[プラットフォーム]タブの[アプリケーション]セクションにあります。

00:01:40.000 -> 00:01:47.000
新しいプロジェクトアシスタントは、まだインストールされていない場合は、プラットフォームサポートをダウンロードするよう要求する可能性があることに注意してください。

00:01:47.000 -> 00:01:53.000
新しいプロジェクトアシスタントは、いくつかのオプションを提示し、そのうちの2つはこのプラットフォームにとって新しいものです。

00:01:53.000 -> 00:01:56.000
これらの新しいオプションのそれぞれを詳しく見てみましょう。

00:01:56.000 -> 00:02:04.000
最初の新しいオプションである初期シーンでは、アプリに自動的に含まれる初期シーンのタイプを指定できます。

00:02:04.000 -> 00:02:10.000
新しいプロジェクトアシスタントは、常にここで選択したタイプの単一のシーンで出発点を作成します。

00:02:10.000 -> 00:02:13.000
開発者として、後で追加のシーンを追加できます。

00:02:13.000 -> 00:02:20.000
これらは、最初のシーンと同じタイプにすることも、まったく異なるシーンタイプにすることもできます。

00:02:20.000 -> 00:02:24.000
テンプレートは、ウィンドウとボリュームの2つの初期シーンを提供します。

00:02:24.000 -> 00:02:27.000
これらの違いを見てみましょう。 それらの違いを見てみましょう。

00:02:27.000 -> 00:02:31.000
Windowsは、主に2次元のコンテンツを表示するように設計されています。

00:02:31.000 -> 00:02:36.000
平面寸法でサイズを変更できますが、深さは固定されています。

00:02:36.000 -> 00:02:41.000
Windowsは通常、他の実行中のアプリと一緒に表示されます。

00:02:41.000 -> 00:02:50.000
ウィンドウシーンタイプの詳細と、SwiftUIの追加と変更については、「空間コンピューティングのためのSwiftUIに会いましょう」というセッションで学ぶことができます。

00:02:50.000 -> 00:02:53.000
ボリュームは主に3Dコンテンツを提示するように設計されています。

00:02:53.000 -> 00:03:00.000
3次元すべてのサイズはアプリ自体によって制御されますが、アプリを使用している人が調整することはできません。

00:03:00.000 -> 00:03:05.000
Windowsと同様に、ボリュームは通常、他の実行中のアプリと一緒に表示されます。

00:03:05.000 -> 00:03:11.000
「SwiftUIを次の次元に連れて行く」セッションは、ボリュームシーンタイプに関する詳細情報を提供します。

00:03:11.000 -> 00:03:19.000
2番目の新しいオプションであるImmersive Spaceは、没入型コンテンツの出発点をアプリに追加する機会を提供します。

00:03:19.000 -> 00:03:28.000
アプリに没入型スペースシーンタイプを追加すると、それを使用して無限のキャンバスのどこにでも無制限のコンテンツを表示できます。

00:03:28.000 -> 00:03:33.000
アプリがこのシーンタイプをアクティブにすると、共有スペースからフルスペースに移動します。

00:03:33.000 -> 00:03:38.000
フルスペースでは、気晴らしを避けるために、他の実行中のアプリが隠されています。

00:03:38.000 -> 00:03:47.000
アプリは専用のレンダリングリソースにアクセスすることもでき、ハンドトラッキングなどのARKit機能を有効にする許可を要求できます。

00:03:47.000 -> 00:03:57.000
アプリの没入型体験を作りたい場合、SwiftUIはシーンにミックスイマージョン、プログレッシブイマージョン、フルイマージョンの3つの異なるスタイルを提供します。

00:03:57.000 -> 00:04:06.000
混合イマージョンスタイルにより、アプリは無制限の仮想コンテンツをフルスペースに配置しながら、パススルーを通じて人々を周囲に接続し続けることができます。

00:04:06.000 -> 00:04:13.000
プログレッシブイマージョンスタイルは、人々を周囲から完全に排除しない、より没入感のある体験を提供するポータルを開きます。

00:04:13.000 -> 00:04:23.000
ポータルが開くと、人々はあなたの没入型コンテンツに約180度のビューを取得し、デジタルクラウンを使用してポータルのサイズを調整することができます。

00:04:23.000 -> 00:04:31.000
完全なイマージョンスタイルは、パススルーを完全に隠し、アプリの環境で人々を囲み、新しい場所に運びます。

00:04:31.000 -> 00:04:35.000
このセッションの後半で、没入型スペースについて詳しく説明します。

00:04:35.000 -> 00:04:41.000
深く掘り下げるには、「SwiftUIで窓を越えて」というセッションをご覧ください。

00:04:41.000 -> 00:04:44.000
デフォルトでは、没入型スペースはアプリに追加されません。

00:04:44.000 -> 00:04:48.000
これは、オプション「なし」を選択した場合の動作です。

00:04:48.000 -> 00:04:57.000
ただし、没入型スペースオプションの1つを選択すると、テンプレートは選択した没入型スペーススタイルで2番目のSwiftUIシーンを自動的に追加します。

00:04:57.000 -> 00:05:04.000
デフォルトでは、誰かが没入型コンテンツを開くことができるように、ウィンドウシーンにSwiftUIボタンも提供します。

00:05:04.000 -> 00:05:16.000
一般的に、アプリは常にこのプラットフォームのウィンドウで開始し、人々がコンテンツにもっと没頭するタイミングを決定できるように、明確な入退出コントロールを提供することをお勧めします。

00:05:16.000 -> 00:05:21.000
知らないうちに人々をより没入感のある体験に移動させることは避けてください。

00:05:21.000 -> 00:05:24.000
このセッションのプロジェクトを設定しましょう。

00:05:24.000 -> 00:05:29.000
最初のボリュームから始めて、没入型スペースはありません。

00:05:29.000 -> 00:05:35.000
いつものようにプロジェクトを作成し、名前を付け、保存する場所をXcodeに伝えます。

00:05:35.000 -> 00:05:38.000
作成されると、新しいプロジェクトが開きます。

00:05:38.000 -> 00:05:41.000
左側には、Xcodeのプロジェクトナビゲーターがあります。

00:05:41.000 -> 00:05:48.000
最初のファイルはMyFirstImmersiveApp.swiftで、最初のボリュームを表示するアプリのWindowGroupを宣言します。

00:05:48.000 -> 00:05:56.000
WindowGroupは、iOSで見たのと同じ構造で、アプリが提示するトップレベルのSwiftUIビューを指定します。

00:05:56.000 -> 00:06:01.000
2番目のファイルはContentView.swiftで、この最初のボリュームに示されているビューです。

00:06:01.000 -> 00:06:05.000
プロジェクトはメインエディタのContentView.swiftで開きます。

00:06:05.000 -> 00:06:15.000
Xcodeは、プロジェクトに自動的に含まれていたRealityKitコンテンツパッケージのコンテンツをロードするContentViewのプレビューも表示します。

00:06:15.000 -> 00:06:18.000
新しいプロジェクトのコードのほとんどはContentViewにあります。

00:06:18.000 -> 00:06:24.000
ContentViewはいくつかの新しいプラットフォーム固有の機能を使用しているので、詳しく見てみましょう。

00:06:24.000 -> 00:06:28.000
ContentViewは、ボリュームによって表示されるSwiftUIビューの名前です。

00:06:28.000 -> 00:06:35.000
これは、単純な効果に使用される「拡大」と呼ばれる単一のSwiftUI Stateプロパティを定義します。

00:06:35.000 -> 00:06:39.000
SwiftUIビューとして、当社のコンテンツはボディプロパティによって提供されます。

00:06:39.000 -> 00:06:43.000
本体は、VStackにネストされた2つのビューで構成されています。

00:06:43.000 -> 00:06:46.000
VStackは、ネストされたビューを垂直にスタックします。

00:06:46.000 -> 00:06:49.000
最初のネストされたビューはRealityViewです。

00:06:49.000 -> 00:06:54.000
RealityViewはこのプラットフォームにとって新しく、すぐに戻ってきます。またすぐに戻ってきます。

00:06:54.000 -> 00:06:59.000
2番目のネストされたビューは、別のVStackに埋め込まれた標準のSwiftUIトグルビューです。

00:06:59.000 -> 00:07:02.000
トグルビューは、拡大プロパティの値を切り替えます。

00:07:02.000 -> 00:07:08.000
VStackは、ボタンが読みやすく、操作しやすいように、glassBackgroundEffectを提供します。

00:07:08.000 -> 00:07:13.000
SwiftUIで作業したことがある場合は、すでにトグルビューを見た可能性が高いです。

00:07:13.000 -> 00:07:20.000
他のプラットフォームですでにサポートされているSwiftUIコントロールのほとんどは、期待どおりに動作します。

00:07:20.000 -> 00:07:23.000
すぐに、ジェスチャーを使用して拡大プロパティを切り替える方法を見ていきます。

00:07:23.000 -> 00:07:28.000
しかし、まず、RealityViewを詳しく見てみましょう。

00:07:28.000 -> 00:07:32.000
RealityViewを使用すると、RealityコンテンツをSwiftUIビュー階層に配置できます。

00:07:32.000 -> 00:07:40.000
ContentViewで使用されるRealityView初期化子は、パラメータとして、makeクロージャとupdateクロージャの2つのクロージャを取ります。

00:07:40.000 -> 00:07:44.000
makeクロージャは、最初のRealityKitコンテンツをビューに追加します。

00:07:44.000 -> 00:07:49.000
RealityKitコンテンツパッケージの内容を読み込もうとします。

00:07:49.000 -> 00:07:54.000
そして、成功すると、content.addを使用してロードされたコンテンツをビューに追加します。

00:07:54.000 -> 00:08:01.000
また、最初のコンテンツを手続き的に生成したり、手続きコンテンツとロードされたコンテンツの組み合わせを使用することもできます。

00:08:01.000 -> 00:08:07.000
アップデートクロージャはオプションですが、提供されている場合は、SwiftUIの状態が変更されるたびに呼び出されます。

00:08:07.000 -> 00:08:14.000
それはmakeクロージャで追加されたものなので、content.entitesから最初のエンティティを取得することから始まります。

00:08:14.000 -> 00:08:23.000
次に、SwiftUI状態の拡大プロパティの値に基づいてuniformScale係数を選択し、このスケールをエンティティに適用します。

00:08:23.000 -> 00:08:30.000
RealityViewの更新クロージャはレンダリング更新ループではなく、すべてのフレームで呼び出されるわけではないことに注意することが重要です。

00:08:30.000 -> 00:08:35.000
代わりに、更新クロージャはSwiftUIの状態が変更された場合にのみ呼び出されます。

00:08:35.000 -> 00:08:38.000
最後に、RealityViewにはジェスチャーが添付されています。

00:08:38.000 -> 00:08:49.000
RealityKitコンテンツをタップすると、拡大プロパティの値を切り替え、以前に説明したトグルビューをタップするのと同じ効果が得られます。

00:08:49.000 -> 00:08:56.000
RealityViewとジェスチャーの詳細については、「RealityKitで空間体験を構築する」をご覧ください。

00:08:56.000 -> 00:09:05.000
ContentViewを見てみましょう。シミュレータを紹介し、シミュレートされたシーンで実行されているアプリをナビゲートして操作する方法を紹介しましょう。

00:09:05.000 -> 00:09:08.000
その後、私たちのアプリがシミュレータでどのように見えるかを見ていきます。

00:09:08.000 -> 00:09:14.000
シミュレータは、他のプラットフォームで使用したことがあれば、馴染みのあるウィンドウに表示されます。

00:09:14.000 -> 00:09:18.000
最初に起動すると、アプリケーションランチャーが表示されます。

00:09:18.000 -> 00:09:22.000
シミュレータは、誰かがデバイスを身に着けているのを見るものを模倣します。

00:09:22.000 -> 00:09:27.000
デフォルトでは、ポインタはあなたが見ているものを制御します。

00:09:27.000 -> 00:09:34.000
マウスまたはトラックパッドをクリックするとタップがシミュレートされ、クリックを長押しするとピンチがシミュレートされます。

00:09:34.000 -> 00:09:39.000
空間コンピューティングの大部分は、周囲を見たり移動したりできることです。

00:09:39.000 -> 00:09:44.000
シミュレータは、まさにそれを行うための追加のコントロールを提供します。

00:09:44.000 -> 00:09:49.000
シミュレータウィンドウの右下隅には、シミュレートされたデバイスを制御するためのいくつかのボタンがあります。

00:09:49.000 -> 00:09:58.000
これらのマウスやトラックパッドを動かしながらクリックしたまま長押しすると、周りを見回すことができます...

00:09:58.000 -> 00:10:09.000
...パン...

00:10:09.000 -> 00:10:16.000
...軌道...

00:10:16.000 -> 00:10:24.000
...そして前後に進みます。

00:10:24.000 -> 00:10:32.000
これらのコントロールをクリックおよび長押しすると、コンテンツとのやり取りと表示と移動をすばやく切り替えることができます。

00:10:32.000 -> 00:10:39.000
これらのボタンをクリックして特定のコントロールモードに切り替えることもできるので、マウスボタンを押し続ける必要はありません。

00:10:39.000 -> 00:10:49.000
たとえば、パンボタンをクリックすると、ビューポートをクリックしてドラッグすると、ビューがパンされます。

00:10:49.000 -> 00:10:55.000
一番左のコントロールをクリックすると、ルックアンドタップのコントロールに戻ります。

00:10:55.000 -> 00:11:02.000
シミュレータには、さまざまな部屋や照明条件でアプリが実行されているのを見るために使用できるいくつかのシミュレートされたシーンが付属しています。

00:11:02.000 -> 00:11:21.000
ツールバーのシミュレートされたシーンメニューからそれらを切り替えることができます。

00:11:21.000 -> 00:11:27.000
シミュレータの使用の詳細については、developer.apple.comのドキュメントを参照してください。

00:11:27.000 -> 00:11:32.000
シミュレーターに精通したので、そこで実行されている新しいアプリを見てみましょう。

00:11:32.000 -> 00:11:38.000
いつものように、製品メニューの「実行」をクリックして、Xcodeからアプリを実行します。

00:11:38.000 -> 00:11:43.000
アプリが起動すると、RealityKitコンテンツパッケージの内容を示すボリュームが表示されます。

00:11:43.000 -> 00:11:53.000
「RealityView Contentを拡大」ボタンをタップするとコンテンツが拡大し、再度タップすると元のサイズに戻ります。

00:11:53.000 -> 00:12:01.000
RealityViewのジェスチャーにより、球をタップして拡大することもできます。

00:12:01.000 -> 00:12:04.000
球体をタップすると、ボタンのハイライトが変わります。

00:12:04.000 -> 00:12:12.000
タップジェスチャーはSwiftUI状態を更新しており、RealityViewとToggleビューの両方が状態の変化に反応します。

00:12:12.000 -> 00:12:18.000
Xcodeプレビューを使用すると、アプリのビューの外観と動作にすばやく集中して反復できます。

00:12:18.000 -> 00:12:27.000
SwiftUIプレビュープロバイダーを含むソースファイルを編集すると、プレビューキャンバスがXcodeで自動的に開きます。

00:12:27.000 -> 00:12:32.000
シミュレータと同様に、Xcodeプレビューはシミュレートされたデバイスビューとして表示されます。

00:12:32.000 -> 00:12:38.000
シミュレータをナビゲートするために使用したのと同じコントロールを使用してプレビューウィンドウをナビゲートできます。

00:12:38.000 -> 00:12:42.000
コントロールを使って、コンテンツに少し近づきましょう。

00:12:42.000 -> 00:12:52.000
右下隅のコントロールを使用して、シミュレートされたシーンとカメラアングルを変更することもできます。

00:12:52.000 -> 00:12:57.000
SwiftUIコードに変更を加え、プレビューの更新をリアルタイムで見ることができます。

00:12:57.000 -> 00:13:04.000
先に進んで、トグルのテキストを変更して、「サイズ変更」に変更しましょう。

00:13:04.000 -> 00:13:07.000
テキストを変更すると、プレビューの更新に注意してください。

00:13:07.000 -> 00:13:13.000
また、Xcodeプレビューでは、ボタンがまだ機能していることに注意してください。

00:13:13.000 -> 00:13:18.000
これを使用して、RealityViewクロージャの内容を反復することもできます。

00:13:18.000 -> 00:13:29.000
Xcodeプレビューには、アプリの境界を超えたコンテンツを検出できるオブジェクトモードや、カスタムカメラアングルなど、さらに多くの高度な機能があります。

00:13:29.000 -> 00:13:34.000
Xcodeプレビューの詳細については、開発者ドキュメントを参照してください。

00:13:34.000 -> 00:13:39.000
RealityKitコンテンツパッケージの操作に役立つ新しいツールを作成しました。

00:13:39.000 -> 00:13:46.000
Reality Composer Proは、アプリの空間コンテンツを準備してプレビューするのに最適な場所です。

00:13:46.000 -> 00:13:52.000
私たちのアプリのContentViewは、RealityViewを使用して、RealityKitコンテンツパッケージからコンテンツをロードします。

00:13:52.000 -> 00:14:00.000
テンプレートによって作成されたコンテンツパッケージはRealityKitContentと呼ばれ、Xcodeプロジェクトのパッケージグループにあります。

00:14:00.000 -> 00:14:04.000
ここでは、RealityKitContentが選択されたプロジェクトを見ることができます。

00:14:04.000 -> 00:14:10.000
RealityKitコンテンツパッケージは、RealityKitコンテンツを含むSwiftパッケージです。

00:14:10.000 -> 00:14:15.000
それらは、ランタイム使用のためにコンテンツを最適化するために、ビルド時に処理されます。

00:14:15.000 -> 00:14:22.000
RealityContentの開示インジケーターをクリックすると、コンテンツパッケージの内容が表示されます。

00:14:22.000 -> 00:14:28.000
キューブアイコンでパッケージをクリックすると、コンテンツパッケージ内のシーンの1つのプレビューが表示されます。

00:14:28.000 -> 00:14:35.000
コンテンツパッケージを編集するには、右上の「Reality Composer Proで開く」ボタンをクリックします。

00:14:35.000 -> 00:14:38.000
これにより、Reality Composer Proがローンチされます。

00:14:38.000 -> 00:14:44.000
Reality Composer Proを起動すると、ContentViewによってロードされた3Dコンテンツが表示されます。

00:14:44.000 -> 00:14:51.000
Xcodeの主な焦点はソースファイルとアプリリソースの編集ですが、Reality Composer Proは3Dコンテンツを前面と中央に置きます。

00:14:51.000 -> 00:14:58.000
その主なビューは3Dビューポートで、シミュレータと同様のコントロールを使用してナビゲートできます。

00:14:58.000 -> 00:15:02.000
Reality Composer Proは、その内容をシーンに整理します。

00:15:02.000 -> 00:15:07.000
プロジェクトテンプレートに含まれていたコンテンツパッケージは、単一のシーンから始まります。

00:15:07.000 -> 00:15:13.000
プロジェクトを強化するために、没入型スペースのコンテンツを含む新しいシーンを作成しましょう。

00:15:13.000 -> 00:15:19.000
Reality Composer Proのファイルメニューから、「新規」&gt;「シーン」を選択します。

00:15:19.000 -> 00:15:29.000
名前を付けます。この場合は、単にImmersiveSceneと呼び、[保存]をクリックします。

00:15:29.000 -> 00:15:38.000
シーンを作成すると、自動的に開き、ウィンドウの下部にあるプロジェクトブラウザに空のシーンのサムネイルが表示されます。

00:15:38.000 -> 00:15:48.000
ウィンドウの上部にある名前をクリックするか、プロジェクトブラウザでシーンをダブルクリックすることで、シーンを切り替えることができます。

00:15:48.000 -> 00:15:52.000
これで、新しいシーンに没入型コンテンツを追加する準備が整いました。

00:15:52.000 -> 00:16:00.000
Xcodeプロジェクトを設定したとき、SwiftUIのImmersiveSpaceを使用して、周囲のどこにでも無制限のコンテンツを表示する方法について言及しました。

00:16:00.000 -> 00:16:04.000
このシーンタイプについて理解するには、さらに2つの重要な詳細があります。

00:16:04.000 -> 00:16:12.000
まず、ウィンドウやボリュームシーンのタイプとは異なり、ImmersiveSpaceは足の推測された位置をコンテンツの原点として使用します。

00:16:12.000 -> 00:16:22.000
この座標系では、正のx軸が右側にあり、正のy軸が上にあり、負のz軸が目の前にあります。

00:16:22.000 -> 00:16:31.000
第二に、アプリがフルスペースで実行されると、手の正確な位置や向きなどの追加データへのアクセスを要求できます。

00:16:31.000 -> 00:16:34.000
このデータの一部はプライバシーに敏感であることを覚えておいてください。

00:16:34.000 -> 00:16:41.000
アプリがプライバシーに敏感なデータを要求する場合、アプリを使用している人はこのリクエストを承認するように求められます。

00:16:41.000 -> 00:16:45.000
これは、共有スペースのアプリでは利用できません。

00:16:45.000 -> 00:16:57.000
没入型スペースを提示するアプリの利用可能な追加データとプライバシーに関する考慮事項の詳細については、セッション「空間コンピューティングのためのARKitに会う」を参照してください。

00:16:57.000 -> 00:17:04.000
没入型体験を作成する方法について詳しくわかったので、ImmersiveSpaceでうまく機能するコンテンツを組み立てましょう。

00:17:04.000 -> 00:17:10.000
私は、没入型体験に適したコンテンツを作成するために使用するUSDZクラウドモデルを持っています。

00:17:10.000 -> 00:17:19.000
Reality Composer ProのシーンにUSDZモデルを追加するには、[ファイル]メニューを開き、[インポート]をクリックします。

00:17:19.000 -> 00:17:22.000
次に、ファイルを選択します。

00:17:22.000 -> 00:17:25.000
USDZモデルがプロジェクトブラウザに表示されることに注意してください。

00:17:25.000 -> 00:17:30.000
シーンに追加するには、ビューポートにドラッグするだけです。

00:17:30.000 -> 00:17:38.000
また、FinderウィンドウからビューポートにUSDZファイルをドラッグアンドドロップするだけで、同時にシーンにインポートして追加することもできます。

00:17:38.000 -> 00:17:42.000
では、没入型シーンにクラウドを配置しましょう。

00:17:42.000 -> 00:17:49.000
オブジェクトを選択し、表示されるハンドルを使用することで、オブジェクトを移動できます。

00:17:49.000 -> 00:17:54.000
または、右側のインスペクタパネルで値を手動で設定することもできます。

00:17:54.000 -> 00:18:03.000
このシーンタイプは、足の推測された位置を原点として使用するため、雲がどこかに現れてすぐに見えるように配置する必要があります。

00:18:03.000 -> 00:18:08.000
この場合、目の高さよりやや上、あなたの前と少し右に配置します。

00:18:08.000 -> 00:18:11.000
この雲を少し右に見せたい。

00:18:11.000 -> 00:18:17.000
正のx軸は右側にあるので、Xを50に設定しましょう。

00:18:17.000 -> 00:18:21.000
この変更を行うと、クラウドがビューポートから移動することに注意してください。

00:18:21.000 -> 00:18:27.000
もう一度焦点を合わせるには、左側のシーン階層でダブルクリックします。

00:18:27.000 -> 00:18:31.000
雲が再び見えるので、Y座標について考えてみましょう。

00:18:31.000 -> 00:18:36.000
雲が私たちの上に現れるようにしたいので、200センチの高さに置きましょう。

00:18:36.000 -> 00:18:39.000
それは床から約6フィート半です。

00:18:39.000 -> 00:18:45.000
雲が再びビューポートを離れるので、それを視界に戻しましょう。

00:18:45.000 -> 00:18:50.000
雲を目の前に置いて、まっすぐ見上げる必要がないようにする必要があります。

00:18:50.000 -> 00:18:58.000
私たちから離れた方向は負のz軸なので、Zの位置を-200センチメートルに設定しましょう。

00:18:58.000 -> 00:19:04.000
シーン階層でもう一度ダブルクリックして、前面と中央にします。

00:19:04.000 -> 00:19:07.000
雲は私たちの没入型シーンのための小さな側にあります。

00:19:07.000 -> 00:19:10.000
どうすればそれを大きくできるか見てみましょう。

00:19:10.000 -> 00:19:13.000
スケールを増やすには、円をそこから引き離します。

00:19:13.000 -> 00:19:18.000
輸入時の約5倍の大きさにしたいと思います。

00:19:18.000 -> 00:19:22.000
最後に、今回は左側に2番目のクラウドを追加しましょう。

00:19:22.000 -> 00:19:27.000
[編集] メニュー &gt; [複製] コマンドを使用して、最初のクラウドのコピーを作成できます。

00:19:27.000 -> 00:19:35.000
コピーを左に置くには、X座標を-50に設定します。

00:19:35.000 -> 00:19:41.000
ビューポートでシーンのすべてのコンテンツをフレーム化するには、階層内のルートをダブルクリックします。

00:19:41.000 -> 00:19:46.000
素晴らしい、今、私たちは没入型体験に適したコンテンツを持つシーンを持っています。

00:19:46.000 -> 00:19:52.000
「ファイル」&gt;「すべて保存」を使用してXcodeに戻る前に、変更を保存しましょう。

00:19:52.000 -> 00:20:00.000
Reality Composer Proは、空間コンテンツを準備、プレビュー、アプリに統合するための強力なツールです。

00:20:00.000 -> 00:20:06.000
より詳細な紹介については、セッション「Meet Reality Composer Pro」をご覧ください。

00:20:06.000 -> 00:20:17.000
セッション「XcodeでReality Composer Proコンテンツと連携」は、最初のセッションに基づいて構築され、RealityKitコンテンツパッケージのコンテンツをアプリと密接に統合する方法を示します。

00:20:17.000 -> 00:20:22.000
次のステップは、アプリで作成した没入型コンテンツを提示することです。

00:20:22.000 -> 00:20:28.000
アプリによって提示されたシーンは、プロジェクト名の接頭辞が付いたソースファイルApp.swiftにあります。

00:20:28.000 -> 00:20:31.000
今、それを詳しく見てみましょう。

00:20:31.000 -> 00:20:35.000
あなたは私たちのアプリがContentViewを提示することをどのように知っているかを自問したかもしれません。

00:20:35.000 -> 00:20:41.000
私たちのアプリは、ボリュームのコンテンツとしてContentViewを表示するために単一のWindowGroupを使用していることがわかります。

00:20:41.000 -> 00:20:47.000
WindowGroupは、指定されたビューを表示する1つ以上のウィンドウまたはボリュームを作成するシーンです。

00:20:47.000 -> 00:20:57.000
ボディプロパティの最初のシーンは、起動時にアプリによって表示されるシーンであり、最初のシーンの後にシーンを追加することで、アプリに追加シーンを追加できます。

00:20:57.000 -> 00:21:03.000
私たちのアプリは、Reality Composer Proで作成したばかりのコンテンツで没入型空間を提示したいと考えています。

00:21:03.000 -> 00:21:08.000
このスペースには、アプリに追加するImmersiveViewと呼ばれる新しいビューの内容が表示されます。

00:21:08.000 -> 00:21:11.000
スペースにIDを割り当てる必要があります。

00:21:11.000 -> 00:21:18.000
IDとして文字列「ImmersiveSpace」を選択しました。これは、後でスペースを開くときに使用します。

00:21:18.000 -> 00:21:26.000
このコードをプロジェクトのApp.swiftソースファイルに追加し、ImmersiveViewにコードを追加して、Reality Composer Proで作成した新しいシーンをロードしましょう。

00:21:26.000 -> 00:21:33.000
私はすでにXcodeのSwiftUI Viewテンプレートを使用してImmersiveView.swiftをプロジェクトに追加しました。

00:21:33.000 -> 00:21:38.000
私たちのプロジェクトのApp.swiftでは、ImmersiveSpaceを追加します。

00:21:38.000 -> 00:21:46.000
次に、ImmersiveView.swiftの上部で、RealityKitコンテンツパッケージを使用できるようにRealityKitContentをインポートします。

00:21:46.000 -> 00:21:51.000
また、RealityViewを使用するには、RealityKitをインポートする必要があります。

00:21:51.000 -> 00:21:55.000
ImmersiveViewのデフォルトコンテンツは単なるテキストボックスです。

00:21:55.000 -> 00:22:01.000
コンテンツパッケージに追加した新しいシーンからコンテンツをロードするRealityViewに置き換えましょう。

00:22:01.000 -> 00:22:13.000
これを行うには、左側のプロジェクト階層のContentViewをダブルクリックし、最初のクロージャとともにRealityViewのコードを選択してコピーします。

00:22:13.000 -> 00:22:25.000
開いているファイルタブを使用して、ImmersiveViewに戻り、テキストビューを選択し、貼り付けてRealityViewコードに置き換えることができます。

00:22:25.000 -> 00:22:28.000
RealityViewの更新終了をコピーしなかったことに気付いたかもしれません。

00:22:28.000 -> 00:22:34.000
これは、SwiftUI状態の変更に対応して、このビューの内容を更新するつもりはないためです。

00:22:34.000 -> 00:22:44.000
最後に、作成した没入型シーンのコンテンツをロードするには、ロードされたシーンの名前を「Scene」から「ImmersiveScene」に変更します。

00:22:44.000 -> 00:22:50.000
プレビューは現在、ImmersiveSceneのコンテンツを読み込んでいますが、プレビューキャンバスで表示できないのはなぜですか?

00:22:50.000 -> 00:22:55.000
ImmersiveViewを作成すると、Xcodeプレビューが自動的に作成されました。

00:22:55.000 -> 00:22:57.000
詳しく見てみましょう。 

00:22:57.000 -> 00:23:03.000
ImmersiveView.swiftの下部を見ると、Xcodeにプレビューを表示するように指示するコードが表示されます。

00:23:03.000 -> 00:23:07.000
それは#Previewで始まるコードのブロックです。

00:23:07.000 -> 00:23:12.000
デフォルトでは、プレビューはデフォルトのシーン境界にクリップされます。

00:23:12.000 -> 00:23:17.000
これらの範囲外にコンテンツをロードするビューを表示している場合、コンテンツは表示されません。

00:23:17.000 -> 00:23:27.000
これらの範囲を超えた没入型コンテンツのプレビューをサポートするには、.previewLayout(.sizeThatFits)で準備されているビューを変更するだけです。

00:23:27.000 -> 00:23:29.000
今それをやりましょう。

00:23:29.000 -> 00:23:43.000
ImmersiveViewのプレビューに.previewLayout(.sizeThatFits)を追加すると、プレビューが更新され、没入型コンテンツが表示されます。

00:23:43.000 -> 00:23:48.000
最後に、アプリに没入型スペースを開いてもらいましょう。

00:23:48.000 -> 00:23:56.000
iOSでマルチシーンのSwiftUIアプリで作業したことがある場合は、SwiftUIコードから追加のシーンがどのように開かれるかをすでに見ているかもしれません。

00:23:56.000 -> 00:24:05.000
最初のステップは、ビューのSwiftUI環境からクロージャをキャプチャすることです。これは、ボタンを押すなどのイベントに応答して呼び出されます。

00:24:05.000 -> 00:24:21.000
没入型空間の提示は、新しいプラットフォーム上のSwiftUIでも同じように機能しますが、キャプチャされたクロージャは「openImmersiveSpace」と呼ばれ、非同期であり、没入型空間がいつ提示されたかをコードで知ることができます。

00:24:21.000 -> 00:24:35.000
ContentViewに戻ると、SwiftUI環境からopenImmersiveSpaceクロージャをキャプチャし、それを呼び出すボタンを追加するだけです。

00:24:35.000 -> 00:24:40.000
アプリが没入型コンテンツを表示するために必要なすべての変更を加えました。

00:24:40.000 -> 00:24:46.000
シミュレーターでコンテンツを体験できますが、没入感はデバイス自体で特に魅力的です。

00:24:46.000 -> 00:24:48.000
調べてみましょう。

00:24:48.000 -> 00:24:56.000
押すと、ImmersiveSpaceのコンテンツとして雲を表示する新しいボタンが表示されます。

00:24:56.000 -> 00:25:01.000
目の前に2つの雲が見えます。1つは左に、もう1つは右にあります。

00:25:01.000 -> 00:25:05.000
没入型スペースは、アプリの最初のシーンとは異なることに注意してください。

00:25:05.000 -> 00:25:12.000
最初のシーンを移動すると、ImmersiveSpaceのコンテンツが固定されたままであることがわかります。

00:25:12.000 -> 00:25:20.000
人はアプリの初期ボリュームを好きな場所に移動できますが、ImmersiveSpaceを開くと固定された場所に配置されます。

00:25:20.000 -> 00:25:27.000
没入型空間を動かすのではなく、没入型空間の中で動き回ります。

00:25:27.000 -> 00:25:33.000
私たちは、没入型スペースを使用して頭の上に雲を提示するシンプルなアプリを構築しました。

00:25:33.000 -> 00:25:38.000
アプリがクラウドとの相互作用に応答したかったらどうでしょうか?

00:25:38.000 -> 00:25:44.000
簡単にするために、雲をタップすると空を横切って穏やかに浮かぶと想像してみてください。

00:25:44.000 -> 00:25:47.000
これをどうやって達成できるか見てみましょう。

00:25:47.000 -> 00:25:52.000
SwiftUIビューが入力イベントに応答するには、ジェスチャーを添付できます。

00:25:52.000 -> 00:25:55.000
この例では、単純なテキストビューがあります。

00:25:55.000 -> 00:26:01.000
ビューにTapGestureを添付することで、人がビューをタップしたときに応答することができます。

00:26:01.000 -> 00:26:07.000
ジェスチャーがビューにアタッチされると、ジェスチャーが認識されたときに呼び出されるクロージャが与えられます。

00:26:07.000 -> 00:26:13.000
RealityViewは単なるSwiftUIビューなので、同じようにジェスチャーに反応します。

00:26:13.000 -> 00:26:19.000
ただし、RealityViewには、複数のエンティティを持つRealityKitコンテンツが含まれている場合があります。

00:26:19.000 -> 00:26:25.000
たとえば、私たちのアプリは、クラウドモデルを含むRealityViewを表示するImmersiveSpaceを開きます。

00:26:25.000 -> 00:26:31.000
人がクラウドの1つをタップすると、SwiftUIはRealityViewでTapGestureを呼び出します。

00:26:31.000 -> 00:26:35.000
しかし、どのクラウドがタップによって標的にされたかをどうやって知ることができますか?

00:26:35.000 -> 00:26:38.000
ここでエンティティターゲティングの出番です。

00:26:38.000 -> 00:26:47.000
targetedToAnyEntity修飾子は、RealityViewにアタッチされたジェスチャーで動作し、ジェスチャーがターゲットとする正確なエンティティを決定します。

00:26:47.000 -> 00:26:50.000
利用可能なエンティティをターゲットにする他の方法があります。

00:26:50.000 -> 00:26:56.000
特定のエンティティをターゲットにすることも、クエリに一致するすべてのエンティティをターゲットにすることもできます。

00:26:56.000 -> 00:27:01.000
詳細については、developer.apple.comのドキュメントをお読みください。

00:27:01.000 -> 00:27:11.000
onEndedなどのジェスチャーのハンドラに渡される値には、その人がRealityView内でそのエンティティと対話したことを示すエンティティプロパティがあります。

00:27:11.000 -> 00:27:20.000
エンティティターゲティングが特定のRealityKitエンティティで動作するには、エンティティがCollisionComponentとInputTargetComponentの両方を持っている必要があることに注意してください。

00:27:20.000 -> 00:27:29.000
RealityKitエンティティにこれらのコンポーネントを要求することで、RealityViewのコンテンツの選択した部分のみにインタラクションを制限することができます。

00:27:29.000 -> 00:27:37.000
これらのコンポーネントをReality Composer Proのエンティティに追加することも、アプリでプログラムで追加することもできます。

00:27:37.000 -> 00:27:42.000
エンティティターゲティングがどのように機能するかを見たので、それを使って人がクラウドをタップしたときに検出しましょう。

00:27:42.000 -> 00:27:47.000
このインタラクションが発生すると、RealityKitアニメーションを開始します。

00:27:47.000 -> 00:27:52.000
Reality Composer Proに必要なコンポーネントを追加することから始めましょう。

00:27:52.000 -> 00:28:00.000
RealityKitコンテンツパッケージでは、Commandキーを押しながらクリックを使用して、ビュー階層から両方のクラウドを一度に選択できます。

00:28:00.000 -> 00:28:11.000
次に、インスペクタパネルの下部にある「コンポーネントを追加」ボタンをクリックし、衝突を選択します。

00:28:11.000 -> 00:28:17.000
インスペクタパネルでは、CollisionComponentがクラウドに追加されていることがわかります。

00:28:17.000 -> 00:28:24.000
Reality Composer Proは、適切な衝突形状を自動的に選択することで、モデルのCollisionComponentを作成することに注意してください。

00:28:24.000 -> 00:28:27.000
必要に応じて、この衝突形状を変更できます。

00:28:27.000 -> 00:28:30.000
私たちは今、InputTargetComponentにも同じことをします。

00:28:30.000 -> 00:28:40.000
コンポーネントの追加ボタンをもう一度クリックし、今回は入力ターゲットを選択します。

00:28:40.000 -> 00:28:47.000
すごい！「ファイル」&gt;「すべて保存」を選択して、変更を保存しましょう。

00:28:47.000 -> 00:28:56.000
実際に雲を空を移動させるには、雲がタップされたときに呼び出されるジェスチャーハンドラでRealityKitアニメーションを使用します。

00:28:56.000 -> 00:29:13.000
まず、クラウドの変換の現在の値を可変値としてキャプチャし、次に翻訳にオフセットを追加して前方と右の両方に100センチメートル移動し、クラウドエンティティで.moveを呼び出してRealityKit変換アニメーションを適用します。

00:29:13.000 -> 00:29:16.000
Xcodeに戻ってアプリを完成させましょう。 アプリを完成させましょう。

00:29:16.000 -> 00:29:22.000
ImmersiveViewは、没入型コンテンツでRealityViewを提示するソースファイルです。

00:29:22.000 -> 00:29:30.000
TapGestureをRealityViewに添付するコードを追加し、エンティティターゲティングを使用しましょう。

00:29:30.000 -> 00:29:37.000
そして、タップが検出されたら、変換アニメーションを実行します。

00:29:37.000 -> 00:29:41.000
シミュレーターで実行して、実際に見てみましょう!

00:29:41.000 -> 00:29:47.000
ボタンをタップすると、以前のように雲が入ったImmersiveSpaceが開きます。

00:29:47.000 -> 00:29:54.000
しかし今、雲をタップすると、それは空を横切って穏やかに浮かびます。

00:29:54.000 -> 00:30:00.000
エンティティターゲティングは、SwiftUIインタラクションをRealityKitコンテンツに接続する接着剤です。

00:30:00.000 -> 00:30:05.000
この例では、タップに応答して雲の上で簡単なアニメーションを実行しました。

00:30:05.000 -> 00:30:15.000
より複雑なアプリでは、エンティティターゲティングを使用して、追加のビューの表示、オーディオの再生、アニメーションの開始など、より洗練されたアクションをトリガーできます。

00:30:15.000 -> 00:30:19.000
今日は多くのトピックを取り上げました。それらを要約しましょう。

00:30:19.000 -> 00:30:24.000
Xcodeの新しいプロジェクトアシスタントを使用して、最初の没入型アプリを作成する方法から始めました。

00:30:24.000 -> 00:30:31.000
その後、新しいプラットフォーム用のシミュレータを導入し、Xcodeプレビューがアプリのコンテンツを簡単に反復する方法を示しました。

00:30:31.000 -> 00:30:38.000
また、Reality Composer Proを導入し、RealityKitコンテンツを簡単に準備してプレビューする方法を見ました。

00:30:38.000 -> 00:30:47.000
最後に、ImmersiveSpaceを開き、エンティティターゲティングを使用して、没入型コンテンツとのインタラクションをプログラムで有効にし、応答する方法を示しました。

00:30:47.000 -> 00:30:50.000
このプレゼンテーションを楽しんでいただければ幸いです。

00:30:50.000 -> 00:30:58.000
新しいSwiftUIとRealityKit APIに関するより詳細なセッション、およびReality Composer Proのより高度なユースケースを探索することをお勧めします。

00:30:58.000 -> 00:31:00.000
見てくれてありがとう!

00:31:00.000 -> 23:59:59.000
♪

