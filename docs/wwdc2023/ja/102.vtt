WEBVTT

00:00:00.000 --> 00:00:17.000
♪ ♪

00:00:17.000 --> 00:00:23.000
♪ ♪

00:00:23.000 --> 00:00:26.000
Darin Adler: Platforms State of the Union 2023へようこそ!

00:00:26.000 --> 00:00:32.000
私たちは、あなたが私たちの新しいリリースで来るものを利用する方法についてもっと共有することに興奮しています。

00:00:32.000 --> 00:00:49.000
システム全体でアプリを表面化するより多くの方法を提供するiOSとiPadOSのインタラクティブウィジェット、macOSの新しいウィジェット体験、watchOS 10の美しいデザイン、tvOSのContinuity Camera、そしてもちろん、visionOSを備えたまったく新しいプラットフォーム。

00:00:49.000 --> 00:00:56.000
Platforms State of the Unionは、今年のリリースから最もエキサイティングで、インパクトがあり、重要な開発のいくつかについて学ぶ機会です。

00:00:56.000 --> 00:01:00.000
そして、私たちがあなたのために持っているものは、それらすべての面で提供します。

00:01:00.000 --> 00:01:06.000
飛び込む前に、素晴らしいプラットフォームと素晴らしいアプリを作るものについて少しお話ししたいと思います。

00:01:06.000 --> 00:01:09.000
優れたプラットフォームは、フレームワークとテクノロジーのコレクション以上のものです。

00:01:09.000 --> 00:01:14.000
それは本当に特別なものを作るために一緒に来る重要な成分です。

00:01:14.000 --> 00:01:25.000
シームレスに連携するように作成された言語、フレームワーク、ツール、サービスの組み合わせなので、コードを書く最も自然な方法も最高です。

00:01:25.000 --> 00:01:32.000
アプリが開いているかどうかにかかわらず、システムと深く統合する素晴らしい体験を作成するのに役立つ豊富なAPIセット。

00:01:32.000 --> 00:01:38.000
幅広い製品で最先端のハードウェア技術を安全に活用するための思慮深い方法。

00:01:38.000 --> 00:01:44.000
そして最後に、優れたプラットフォームが新しい課題に対応するために進化し、ユーザーが出現したときにすぐにユーザーのニーズを満たすことができます。

00:01:44.000 --> 00:01:53.000
当社のプラットフォーム上の300以上のフレームワークは構成要素であり、アプリの革新的で創造的で異なるものを正しく理解することができます。

00:01:53.000 --> 00:01:57.000
彼らは、単に時間を節約したり、特定の機能を追加するのを手伝うだけでなく、さらに進んでいます。

00:01:57.000 --> 00:02:03.000
これらのプラットフォーム基盤を目的を持って使用すると、アプリは美しくフィットし、システム自体を拡張します。

00:02:03.000 --> 00:02:06.000
そして、それが素晴らしいアプリへの道です。

00:02:06.000 --> 00:02:10.000
優れたアプリは、適切な情報を適切なタイミングで適切な場所でユーザーに高めます。

00:02:10.000 --> 00:02:17.000
その場所は、ロック画面、Spotlight、Siri、または他の多くの場所にあるShare Sheetである可能性があります。

00:02:17.000 --> 00:02:25.000
優れたアプリは、これらの機能をあなたの指先に置くフレームワークの助けを借りて、新しいセンサーや強力なチップのようなハードウェアを利用します。

00:02:25.000 --> 00:02:32.000
そして、優れたアプリは、ユーザーのプライバシーを尊重する安全でアクセスしやすい製品を作成するなど、正しく行うために非常に重要なことを行います。

00:02:32.000 --> 00:02:40.000
私たちのプラットフォームとあなたのアプリは、人々が評価し、期待する一貫性と信頼性でこれらすべてを提供するために一緒に来ます。

00:02:40.000 --> 00:02:42.000
そして、これは大きな問題です。

00:02:42.000 --> 00:02:46.000
私たちは素晴らしいプラットフォームと素晴らしいアプリに信じられないほど情熱を注いでいます。

00:02:46.000 --> 00:02:48.000
ユーザーは自分が作る違いを見分けることができます。

00:02:48.000 --> 00:03:01.000
iOS、iPadOS、macOS、tvOS、watchOS、そして現在はvisionOSの共有基盤は、Appleのプラットフォームや製品の全範囲でアプリを配信できるまとまりのあるエコシステムを形成しています。

00:03:01.000 --> 00:03:04.000
あなたのアプリはこのエコシステムの鍵です。

00:03:04.000 --> 00:03:12.000
彼らは、あるデバイスから別のデバイスにシームレスに移動する使いやすい体験で、一日を過ごすときに人々に力を与えます。

00:03:12.000 --> 00:03:19.000
アップルでは、私たちはしばしば自分たちで使いたいものを構築することについて話しますが、それは私たちのプラットフォームへのアプローチよりも真実ではありません。

00:03:19.000 --> 00:03:21.000
私たちも開発者だから！

00:03:21.000 --> 00:03:26.000
Appleでは、同じ言語、ツール、フレームワークを使用しています。

00:03:26.000 --> 00:03:28.000
だから今日、私たちはカバーすることがたくさんあります。

00:03:28.000 --> 00:03:36.000
SwiftとSwiftUIの最新の開発と、すべてのプラットフォームでそれらを使用して素晴らしい体験を生み出す方法から始めます。

00:03:36.000 --> 00:03:43.000
ハードウェア機能を活用する方法と、構築するエクスペリエンスで価値に優先順位を付ける方法について説明します。

00:03:43.000 --> 00:03:47.000
そして、私たちが毎日使用している強力なツールの改善をご案内します。

00:03:47.000 --> 00:03:57.000
最後に、最新のプラットフォームであるvisionOSの技術を深く掘り下げ、Apple Vision Pro用の次世代アプリを構築する方法を紹介します。

00:03:57.000 --> 00:04:03.000
物事を始めるために、私はそれをホリーに渡して、スウィフトの新機能について話します。

00:04:03.000 --> 00:04:10.000
ホリー・ボーラ:あなたが毎日使用する多くのAPIの基礎はSwiftです。

00:04:10.000 --> 00:04:18.000
それは速く、現代的で、安全で、効率的で表現力豊かで正しいコードにあなたを導きます。

00:04:18.000 --> 00:04:27.000
APIを使用すると、ライブラリやプラットフォームの機能を活用し、アプリに固有のエクスペリエンスを作成できます。

00:04:27.000 --> 00:04:34.000
しかし、一部のAPIは使いにくい場合があり、始めるために多くの定型コードを書く必要があります。

00:04:34.000 --> 00:04:44.000
そのため、Swiftは、マクロの導入により使いやすく、より簡単に取得できる新しい種類のAPIのロックを解除しています。

00:04:44.000 --> 00:04:47.000
そして、これらのマクロはスウィフトな方法で行われます。

00:04:47.000 --> 00:04:55.000
マクロは、コードの構造を使用して、プロジェクトで構築された新しいコードを生成する注釈です。

00:04:55.000 --> 00:05:03.000
マクロは、コードの属性として添付することも、ハッシュ記号で綴るフリースタンディングにすることもできます。

00:05:03.000 --> 00:05:13.000
マクロはAPIを言語の一部であるように感じさせ、注釈だけで新しいAPIの使用を開始する方法はたくさんあります。

00:05:13.000 --> 00:05:19.000
マクロはXcodeで生き生きとし、生成されたコードはプロジェクトの一部であるように感じます。

00:05:19.000 --> 00:05:20.000
お見せしましょう。

00:05:20.000 --> 00:05:25.000
有効なURL文字列をチェックするURLマクロを作成しました。

00:05:25.000 --> 00:05:33.000
マクロは通常のSwiftコードを生成するため、Xcodeの「拡張マクロ」機能を使用して、それらが何をするかを正確に確認できます。

00:05:33.000 --> 00:05:35.000
このマクロは本当にシンプルに見えます。

00:05:35.000 --> 00:05:39.000
URLイニシャライザを呼び出し、結果を強制的にアンラップします。

00:05:39.000 --> 00:05:41.000
しかし、URLマクロはそれ以上のことをします。

00:05:41.000 --> 00:05:46.000
文字列がコンパイル時に有効なURLであることを確認します。

00:05:46.000 --> 00:05:58.000
たとえば、URLはスペースを持つことができないので、私が1つを追加すると、マクロは文字列からスペースを自動的に削除するためのカスタムエラーメッセージとfix-itを提供します。

00:05:58.000 --> 00:06:06.000
これは、アプリが実行されているときにエラーだったであろうものを、コードを書いている間にフィードバックに移動させるので、すぐに間違いを修正できます。

00:06:06.000 --> 00:06:11.000
すべてのマクロには、正しいコードを書くのに役立つカスタムフィードバックを提供する機能があります。

00:06:11.000 --> 00:06:18.000
添付のマクロは、すでに書いたコードに新しい機能を追加できるため、さらに進んでいます。

00:06:18.000 --> 00:06:22.000
添付されたマクロで何ができるかを見てみましょう。

00:06:22.000 --> 00:06:30.000
非同期作業を実行し、完了ハンドラを使用するfetchContentという関数がありますが、async/awaitを使用したいです。

00:06:30.000 --> 00:06:36.000
別のfetchContent関数を実装する代わりに、AddAsyncマクロを添付できます。

00:06:36.000 --> 00:06:37.000
そして、それだけです!

00:06:37.000 --> 00:06:44.000
これで、fetchContentを呼び出すときに完了ハンドラを渡す代わりに、単に結果を待つことができます。

00:06:44.000 --> 00:06:50.000
他のAPIと同様に、マクロのクイックヘルプを使用してドキュメントを見ることができます。

00:06:50.000 --> 00:07:03.000
しかし、これがボンネットの下でどのように機能するかを理解したい場合は、ブレークポイントを設定し、コードを実行し、非同期関数にステップインし、Xcodeはソースエディタでマクロを展開します。

00:07:03.000 --> 00:07:06.000
秘密がないので、これは本当にクールです。

00:07:06.000 --> 00:07:16.000
デバッグ中に拡張マクロに足を踏み入れることは、舞台裏を覗いて、私のコードで何が起こっているのかを理解するのに役立つ自然な方法です。

00:07:16.000 --> 00:07:25.000
独自のマクロを書くことができるので、以前はSwiftコンパイラに機能を実装することによってのみ可能だった方法で言語を拡張できます。

00:07:25.000 --> 00:07:44.000
Swiftはオープンソースで開発されているため、開発者はすでにマクロを使用して、アサーション失敗の豊富な説明を自動的に生成し、カスタマイズ可能なデフォルトのプロトコル適合性を提供するなど、最も一般的に要求される言語機能のいくつかを構築しており、リストは増え続けています。

00:07:44.000 --> 00:07:48.000
また、今年の新しいAPIの多くで使用されているマクロも見られます。

00:07:48.000 --> 00:07:56.000
Swiftパッケージを通じて、コミュニティが作成したマクロの恩恵を受けたり、自分のマクロを他の人と共有したりできます。

00:07:56.000 --> 00:08:04.000
マクロのような言語の進歩により、Swiftはこれまで以上に多くのプロジェクトで採用されることができます。

00:08:04.000 --> 00:08:08.000
Swiftで書かれていないすべてのコードについて話しましょう。

00:08:08.000 --> 00:08:15.000
創業以来、SwiftはCとObjective-Cとの双方向の相互運用性を提供してきました。

00:08:15.000 --> 00:08:23.000
コードベース全体を書き換えることなく、一度に1つのファイルまたはモジュールをSwiftをプロジェクトに導入できます。

00:08:23.000 --> 00:08:28.000
Swiftは、その相互運用性をC++に拡張しています。

00:08:28.000 --> 00:08:36.000
Swift-C++の相互運用性により、中間ブリッジングレイヤーなしで同じプロジェクトで両方の言語を使用できます。

00:08:36.000 --> 00:08:46.000
コンパイラフラグを設定することで、クラス、関数、さらにはベクトルのようなテンプレートの専門分野を両方の言語で共有できます。

00:08:46.000 --> 00:08:56.000
SwiftからC++を使用すると、初期化前に変数を使用するなど、コード内の未定義の動作の多くのソースが排除されます。

00:08:56.000 --> 00:09:03.000
そして、ブリッジングは効率的です:呼び出しは、最小限のオーバーヘッドで、SwiftとC++コードの間でネイティブに行われます。

00:09:03.000 --> 00:09:18.000
Swift-C++の相互運用性はすでにオープンソースで使用されており、Swiftコンパイラ自体をC++からSwiftに移行するのに役立ち、Swiftを使用してSwiftを実装することにとても興奮しています。

00:09:18.000 --> 00:09:25.000
安全で表現力豊かなコードというSwiftの基本的な目標は、それを使用して構築されたライブラリに根付いています。

00:09:25.000 --> 00:09:28.000
そして、SwiftUIほど明白な場所はありません。

00:09:28.000 --> 00:09:30.000
ジョシュがあなたにもっと話します。

00:09:30.000 --> 00:09:37.000
ジョシュ・シェイファー：すべてのAppleプラットフォームで最新のユーザーインターフェイスを構築する最善の方法は、SwiftUIです。

00:09:37.000 --> 00:09:44.000
SwiftUIを使用すると、より少ないコードでより良いアプリを書くことができるので、アプリ固有のものに集中できます。

00:09:44.000 --> 00:09:48.000
また、インターフェイスコードを再利用する能力を最大化します。

00:09:48.000 --> 00:09:53.000
Crunchy Bagelの健康的な習慣アプリStreaksは素晴らしい例です。

00:09:53.000 --> 00:09:58.000
彼らは最初にiOS用のウィジェットを構築するときにSwiftUIを使い始めました。

00:09:58.000 --> 00:10:04.000
その後、彼らはそのコードをwatchOSアプリと共有し、美しいアニメーションで拡張しました。

00:10:04.000 --> 00:10:09.000
そして今、彼らは元のiOSアプリに同じコードを組み込んでいます。

00:10:09.000 --> 00:10:18.000
漸進的な採用により、彼らは自分のペースでUIコードを共有し、既存のアプリでSwiftUIのメリットを見ることができました。

00:10:18.000 --> 00:10:28.000
SwiftUIも非常に能力があり、新しいLogic ProやFinal Cut Pro for iPadなどのアプリの洗練されたインターフェースに電力を供給するのに役立ちます。

00:10:28.000 --> 00:10:35.000
アプリにSwiftUIを採用することで、次世代のユーザーインターフェイスを構築する準備ができます。

00:10:35.000 --> 00:10:38.000
そして、SwiftUIで構築できるものは拡大し続けています。

00:10:38.000 --> 00:10:58.000
いつものように、今年のリリースの新機能は、円グラフの新しいサポートやスウィフトチャートの選択、まったく新しいインスペクタAPI、オーバーレイ、ルックアラウンドなどの拡張されたMapKitサポートなど、インパクトの高い分野とトップ開発者の要求に焦点を当てています。

00:10:58.000 --> 00:11:05.000
これらの改善は幅広い機能をカバーしていますが、その多くはアニメーションの改善に重点を置いています。

00:11:05.000 --> 00:11:11.000
うまく設計されたアニメーションにより、インターフェイスが使いやすくなるため、これは重要な分野です。

00:11:11.000 --> 00:11:15.000
彼らはフィードバックを提供できるので、ユーザーは何かが起こっていることを知っています。

00:11:15.000 --> 00:11:19.000
または、タスクが正常に完了したことを確認することもできます。

00:11:19.000 --> 00:11:27.000
そのため、SwiftUIには最初からリバーシブル、割り込み可能、キャンセル可能なアニメーションなどの高度な機能がありました。

00:11:27.000 --> 00:11:31.000
今年、SwiftUIはアニメーションをさらに進めています。

00:11:31.000 --> 00:11:34.000
それは彼らの動き方から始まります。

00:11:34.000 --> 00:11:37.000
アニメーションは、多くの場合、ユーザーのジェスチャーによってトリガーされます。

00:11:37.000 --> 00:11:46.000
これで、SwiftUIはジェスチャーの速度を自動的にアニメーションに転送し、スムーズな移行を提供します。

00:11:46.000 --> 00:11:55.000
そして、アニメーションのデフォルトは、持続時間とバウンスの2つの簡単なパラメータで構成できるスプリングベースのモーションになります。

00:11:55.000 --> 00:12:03.000
SwiftUIは、SFシンボルの新しいアニメーション効果を利用して、アプリの図像に命を吹き込むこともできます。

00:12:03.000 --> 00:12:15.000
最後に、マルチパートアニメーションを構築する必要がある場合、SwiftUIにはAnimationPhaseと呼ばれる新しいAPIがあり、わずか数行のコードで洗練されたアニメーションを構築するのに役立ちます。

00:12:15.000 --> 00:12:23.000
アップルパークの美しい風景に触発されたAnimationPhaseのような新しいAPIを説明するサンプルアプリを作成しました。

00:12:23.000 --> 00:12:30.000
これは、ユーザーが屋外スペースを作成し、鳥を訪問するための食べ物や飲み物を提供できる心を落ち着かせる体験を提供します。

00:12:30.000 --> 00:12:35.000
新しい鳥を見逃さないように、リストの一番上にリマインダーを追加しました。

00:12:35.000 --> 00:12:39.000
そのビューだけに焦点を当てたプレビューに切り替えましょう。

00:12:39.000 --> 00:12:43.000
アニメーションを追加して、このSFシンボルを際立たせたいです。

00:12:43.000 --> 00:12:48.000
まず、カスタムアニメーションで異なる状態を定義するための列挙型を追加します。

00:12:48.000 --> 00:12:52.000
次に、私のビューを「PhaseAnimator」でラップします。

00:12:52.000 --> 00:12:56.000
これは、一連の状態間で自動的にアニメーション化する新しいビューです。

00:12:56.000 --> 00:13:02.000
そして最後に、「.highlighted」アニメーションフェーズでアイコンを拡大縮小して回転させます。

00:13:02.000 --> 00:13:12.000
これは良さそうですが、背景がアイコンと一緒にアニメーション化するとさらに良く見えると思うので、さらにいくつかの修飾子を追加します。

00:13:12.000 --> 00:13:19.000
さて、さらに高度なアニメーションのために、今年のSwiftUIはキーフレーミングの完全なサポートを追加します。

00:13:19.000 --> 00:13:26.000
この強力なAPIを使用すると、新しいSwiftUIベースのMapKit APIのプロパティを含め、何でもアニメーション化できます。

00:13:26.000 --> 00:13:36.000
キーフレームを使用すると、アニメーション内の特定の時間に複数のプロパティの値を定義し、SwiftUIが中間値を補間することができます。

00:13:36.000 --> 00:13:42.000
ここでは、キーフレームを使用して、クパチーノのさまざまなランドマークを訪れるマップカメラをアニメーション化しました。

00:13:42.000 --> 00:13:56.000
キーフレームを使用すると、さまざまなプロパティの動きを定義できるため、カメラのピッチ、ヘディング、位置を独立してアニメーション化して、クパチーノを横切ってアップルパークまで、この滑らかで連続的な動きを実現することができます。

00:13:56.000 --> 00:14:01.000
SwiftUIでアニメーションを使用してアプリの感触を作ることは、かつてないほど簡単になりました。

00:14:01.000 --> 00:14:04.000
次に、データフローについて話しましょう。

00:14:04.000 --> 00:14:09.000
SwiftUIでアプリを構築するときは、データをビューに取り込むための選択肢がいくつかあります。

00:14:09.000 --> 00:14:16.000
SwiftUIは、ビューにローカルでデータを管理し、他の場所で所有されているデータを参照するための一連のプロパティラッパーを提供します。

00:14:16.000 --> 00:14:22.000
今年のデータフローはよりシンプルになり、州と環境だけに集中できます。

00:14:22.000 --> 00:14:32.000
モデルをSwiftUIに公開し、ObservableObjectに準拠し、公開されたプロパティラッパーを各プロパティに追加するときに、このようなコードを書いた可能性があります。

00:14:32.000 --> 00:14:38.000
Swiftの新しいマクロサポートにより、新しいObservableマクロが取って代わり、これをはるかに簡単にします。

00:14:38.000 --> 00:14:42.000
@Observableでクラスに注釈を付けるだけで完了です。

00:14:42.000 --> 00:14:46.000
一般に公開されているすべてのプロパティは自動的に公開されます。

00:14:46.000 --> 00:14:53.000
また、SwiftUIビューでObservableを使用する場合、ビューの更新をトリガーするためにプロパティラッパーを使用する必要はありません。

00:14:53.000 --> 00:14:55.000
変数を直接参照するだけです。

00:14:55.000 --> 00:15:00.000
コードを書くのが少なくなり、デフォルトでは高速で正しい動作になります。

00:15:00.000 --> 00:15:10.000
Observableを使用すると、SwiftUIはフィールドごとのレベルでアクセスを追跡できるため、ビューで使用される特定のプロパティが変更された場合にのみ、ビューの本体が再評価されます。

00:15:10.000 --> 00:15:15.000
ビューで使用されていないフィールドを変更すると、無効化はまったく発生しません。

00:15:15.000 --> 00:15:24.000
だから今、モデルをビューに接続するとき、SwiftUIの残りの部分と同じように、書くべき最も自然なコードは、書くべき正しいコードでもあります。

00:15:24.000 --> 00:15:29.000
SwiftUIは、Swift用に設計された新世代のフレームワークの始まりでした。

00:15:29.000 --> 00:15:34.000
しかし、Swiftネイティブフレームワークの利点は、UIコードにとどまりません。

00:15:34.000 --> 00:15:45.000
Core Dataは長い間、データ管理のためのツールを提供してきましたが、その設計はObjective-Cの時代に生まれ、Swiftが提供するすべてのものを最大限に活用しているわけではありません。

00:15:45.000 --> 00:15:53.000
あなた方の多くは、Swiftのすべての機能に対する一流のサポートで設計された、データ管理に対するSwiftネイティブソリューションを求めています。

00:15:53.000 --> 00:15:57.000
SwiftDataを紹介しましょう。

00:15:57.000 --> 00:16:00.000
SwiftDataは、データモデリングと管理のためのフレームワークです。

00:16:00.000 --> 00:16:09.000
Core Dataの実績のある永続性レイヤーの上に構築されていますが、Swiftのために完全に再設計され、再考されたAPIがあります。

00:16:09.000 --> 00:16:14.000
SwiftUIと同様に、外部ファイル形式なしで、完全にコードに焦点を当てています。

00:16:14.000 --> 00:16:19.000
代わりに、Swiftの新しいマクロシステムを使用して、合理化されたAPIを提供します。

00:16:19.000 --> 00:16:25.000
Swiftでモデルを定義している場合は、通常のSwiftタイプを使用して、このようなコードを書くことができます。

00:16:25.000 --> 00:16:32.000
コアデータでこれを管理するには、Xcodeに組み込まれたモデルエディタを使用して同じモデルを再定義する必要があります。

00:16:32.000 --> 00:16:37.000
しかし、SwiftDataでは、@Modelマクロでクラスに注釈を付けるだけです。

00:16:37.000 --> 00:16:47.000
この1行のコードには、永続性の自動有効化、iCloud同期、取り消しとやり直しなど、多くの機能が満載されています。

00:16:47.000 --> 00:16:56.000
次に、値がすべてのインスタンスで一意である必要があることを示すなど、追加の属性でプロパティに注釈を付けることで、これらの自動動作を絞り込むことができます。

00:16:56.000 --> 00:17:04.000
また、SwiftDataはCodableプロトコルを使用して構造体と列挙型を理解するため、すでに知っているツールを使用してデータをモデル化できます。

00:17:04.000 --> 00:17:13.000
これらのタイプは、基礎となるデータストアで完全にモデル化されているため、複雑な構造化データでも高速で効率的なクエリを実行できます。

00:17:13.000 --> 00:17:18.000
そしてもちろん、SwiftDataとSwiftUIを統合するのは簡単です。

00:17:18.000 --> 00:17:23.000
今、私たちはSwiftUIビューの更新を推進するために、新しいObservableマクロを使用してデモアプリを構築し始めました。

00:17:23.000 --> 00:17:29.000
だから、私のインターフェースは新しい鳥を見ると更新されますが、私の編集はラン間で保存されません。

00:17:29.000 --> 00:17:34.000
SwiftDataをインポートすることで、永続性のサポートを本当に簡単に追加できます。

00:17:34.000 --> 00:17:42.000
既存のクラスの2つの観測可能なマクロをSwiftDataのモデルマクロに置き換えて、モデルの準備ができています。

00:17:42.000 --> 00:17:47.000
アプリのルートに、SwiftDataコンテナを設定するための修飾子を追加します。

00:17:47.000 --> 00:17:53.000
そして、新しい裏庭を作成するときは、それが持続するようにモデルのコンテキストに挿入します。

00:17:53.000 --> 00:17:57.000
そして最後に、BackyardListビューを永続的なデータに接続します。

00:17:57.000 --> 00:18:01.000
それは新しい@Queryプロパティラッパーで本当に簡単にできます。

00:18:01.000 --> 00:18:07.000
保存されたデータをロードしているので、プロトタイピング時に使用したデフォルトのサンプルデータを削除できます。

00:18:07.000 --> 00:18:11.000
テストする前に、私が取り組んできたウィジェットも更新しましょう。

00:18:11.000 --> 00:18:15.000
コンテナを設定して、同じ方法でクエリします。

00:18:15.000 --> 00:18:23.000
アプリの共有コンテナを有効にすると、SwiftDataは自動的に同じAPIを使用してウィジェットから直接データにアクセスできるようにします。

00:18:23.000 --> 00:18:28.000
裏庭は現在、SwiftDataによって保持され、@Queryによってビューに配信されます。

00:18:28.000 --> 00:18:34.000
始める前に、私はいくつかの初期データでデータベースを埋めたので、あなたはすでにいくつかの鳥の訪問者を見ることができます。

00:18:34.000 --> 00:18:41.000
そして、新しい裏庭のオブジェクトを追加すると、リストに戻ると、追加の作業なしで表示されます。

00:18:41.000 --> 00:18:49.000
また、SwiftDataは、自動的に機能する取り消しややり直しのサポートなど、単なる永続性以上のものを提供します。

00:18:49.000 --> 00:18:54.000
そして、ご覧のとおり、私のウィジェットはすでに私たちが作成したばかりの裏庭を示しています。

00:18:54.000 --> 00:18:59.000
そして、SwiftDataを使用してデータの保存と復元がいかに簡単かを見てみましょう。

00:18:59.000 --> 00:19:05.000
SwiftUIとSwiftDataは、魅力的で強力なアプリを構築するために協力しています。

00:19:05.000 --> 00:19:15.000
それらは、Swiftによって可能になった開発への新しいアプローチの基盤を形成し、ボイラープレートに費やす時間を減らし、アイデアを構築する時間を増やすのに役立ちます。

00:19:15.000 --> 00:19:22.000
次に、ジョナサンは、これらの技術を適用して、システム全体で新しい方法でアプリを向上させる方法を紹介します。

00:19:22.000 --> 00:19:27.000
ジョナサン・トマシアン：4つの新しいアプリ体験についてお話しできることを本当に楽しみにしています。

00:19:27.000 --> 00:19:32.000
WidgetKitを使用すると、システム内の多くの場所でコンテンツをサーフェスできます。

00:19:32.000 --> 00:19:38.000
App Intentsを使用すると、アプリの機能がさらにシームレスにシステムに統合されます。

00:19:38.000 --> 00:19:43.000
TipKitを使用すると、美しいヒントをアプリに直接表示できます。

00:19:43.000 --> 00:19:50.000
また、AirDropを使用すると、ユーザーが近くのユーザーとコンテンツを共有することがさらに便利になります。

00:19:50.000 --> 00:19:52.000
WidgetKitから始めましょう。

00:19:52.000 --> 00:20:01.000
ウィジェットは、アプリから重要な情報を高め、アプリ体験をより見やすく、ユーザーが一日を過ごすときに利用できるようにします。

00:20:01.000 --> 00:20:10.000
ウィジェットはホーム画面で開始されましたが、今ではより多くの場所にいて、必要な場所で必要なときにユーザーに体験を提供します。

00:20:10.000 --> 00:20:14.000
そして今年、ウィジェットはさらに強力になっています。

00:20:14.000 --> 00:20:22.000
いくつかの簡単な変更でiOS 17用に再構築すると、既存のウィジェットはiPhoneのスタンドバイでゴージャスに見えます。

00:20:22.000 --> 00:20:29.000
それらは拡大され、端まで引き出され、背景が取り除かれたように見えるので、並んで見事に見えます。

00:20:29.000 --> 00:20:36.000
また、iPadのロック画面でも利用でき、再びエッジに描画され、背景が削除されます。

00:20:36.000 --> 00:20:41.000
ここでは、彼らは均一な視覚的な外観を持っているので、ロック画面と完璧に調和します。

00:20:41.000 --> 00:20:49.000
そして、macOS Sonomaでは、それらはフルカラーでデスクトップで利用可能になり、ウィンドウにピントが合っているときに背景に後退します。

00:20:49.000 --> 00:20:54.000
そして、インタラクティブ性の新しいサポートで、ウィジェットをより便利にすることができます。

00:20:54.000 --> 00:21:01.000
リマインダーをチェックするなど、タップで実行できる簡単なアクションは、ウィジェットから直接処理できるようになりました。

00:21:01.000 --> 00:21:06.000
これらの新しいウィジェットの更新はすべて、SwiftUIベースのアーキテクチャによって有効になりました。

00:21:06.000 --> 00:21:13.000
ウィジェットのコードは非同期に実行されてコンテンツを生成し、ビルドしたSwiftUIビューはアーカイブに保存されます。

00:21:13.000 --> 00:21:21.000
後で、ウィジェットを描画する必要があるときは、アーカイブをロードし、バックグラウンドでレンダリングし、システムUIの一部として表示することができます。

00:21:21.000 --> 00:21:27.000
ユーザーがボタンをタップすると、その拡張機能が再び実行され、アクションを処理し、UIを更新します。

00:21:27.000 --> 00:21:33.000
このアーキテクチャでは、iPhoneウィジェットをMacにシームレスに表示することもできます。

00:21:33.000 --> 00:21:42.000
継続性の魔法のおかげで、ウィジェットアーカイブはネットワーク経由でMacに送信でき、ユーザーインタラクションはiPhoneで処理するために送り返すことができます。

00:21:42.000 --> 00:21:45.000
既存のウィジェットを準備することは、これ以上ないほど簡単です。

00:21:45.000 --> 00:21:51.000
ウィジェットの背景を特定し、WidgetKitが提供するデフォルトを使用するようにパディングを更新するだけです。

00:21:51.000 --> 00:21:57.000
SwiftUIのスタックベースのレイアウトにより、システムはコンテキストに基づいてウィジェットの色と間隔を調整できます。

00:21:57.000 --> 00:22:03.000
インタラクティブ性は、ウィジェットにSwiftUIボタンやトグルを追加することで簡単に採用できます。

00:22:03.000 --> 00:22:09.000
これらのコントロールからアプリインテントをトリガーするための新しいサポートは、オンデマンドで拡張機能を起動します。

00:22:09.000 --> 00:22:16.000
ウィジェットのコンテンツが更新されると、システムはKeynoteのMagic Moveと同じように機能するトランジションアニメーションをトリガーします。

00:22:16.000 --> 00:22:23.000
移動した要素は、新しい場所にスライドし、追加または削除された要素は、そっとフェードしてぼやけます。

00:22:23.000 --> 00:22:29.000
標準のSwiftUIトランジションAPIを使用して、さらにカスタマイズし、必要な効果を正確に取得できます。

00:22:29.000 --> 00:22:35.000
既存のウィジェットにこれらの新機能を含めるのがいかに簡単かを見てみましょう。

00:22:35.000 --> 00:22:39.000
私たちのサンプルアプリには、裏庭での注目すべきイベントを追跡するウィジェットがあります。

00:22:39.000 --> 00:22:42.000
私が最初にする必要があるのは、その背景を特定することです。

00:22:42.000 --> 00:22:47.000
これがウィジェットビューで、背景がZStackにあることがわかります。

00:22:47.000 --> 00:22:52.000
私がする必要があるのは、それを新しいコンテナの背景ビュー修飾子に移動することだけです。

00:22:52.000 --> 00:22:58.000
そして、iOS 17以降、ウィジェットのパディングが提供されているので、以前に追加していたパディングを削除します。

00:22:58.000 --> 00:23:04.000
今、Swiftマクロのおかげで、Xcodeのプレビューでウィジェットのタイムライン全体を直接見ることができます。

00:23:04.000 --> 00:23:08.000
ここでは、プレビューキャンバスの下部に、私のタイムラインエントリがすべてあります。

00:23:08.000 --> 00:23:13.000
そして、それらをクリックすると、ウィジェットが更新されたときにどのようにアニメーション化されるかが表示されます。

00:23:13.000 --> 00:23:19.000
この移行は素晴らしいですが、もう少し鳥が到着したような感じができるかどうか見てみましょう。

00:23:19.000 --> 00:23:24.000
私のアプリと同じように、標準のSwiftUIトランジションを利用できます。

00:23:24.000 --> 00:23:28.000
このエディタで、BirdViewにトランジション修飾子を追加します。

00:23:28.000 --> 00:23:31.000
最先端のプッシュを試してみましょう。

00:23:31.000 --> 00:23:34.000
それは素晴らしいですね。

00:23:34.000 --> 00:23:42.000
更新されたプレビューキャンバスでは、新しいiPadのロック画面やiPhoneのスタンドバイなど、さまざまなコンテキストでウィジェットがどのように見えるかを簡単に確認できます。

00:23:42.000 --> 00:23:44.000
スタンバイを見てみましょう。

00:23:44.000 --> 00:23:47.000
背景が削除されたら、鳥を目立たせたい。

00:23:47.000 --> 00:23:51.000
そして、その足はここで少し失われているので、バードバスを追加しましょう。

00:23:51.000 --> 00:24:00.000
SwiftUIは、背景が削除されたときにウィジェットの外観をカスタマイズできる新しいshowsWidgetContainerBackground変数を提供します。

00:24:00.000 --> 00:24:02.000
いいね！

00:24:02.000 --> 00:24:08.000
あなたの多くは、ウィジェットからアプリと対話する機能を求めていますが、今はできます。

00:24:08.000 --> 00:24:12.000
私の鳥の水を補充するためのボタンを追加しましょう。

00:24:12.000 --> 00:24:19.000
私はすでにこのアクションのアプリインテントを定義したので、ウィジェットのボタンに関連付けるだけです。

00:24:19.000 --> 00:24:22.000
シミュレーターで試してみましょう。

00:24:22.000 --> 00:24:25.000
そして、ちょうどそのように、私は鳥の水を補充しました。

00:24:25.000 --> 00:24:27.000
そして、それはWidgetKitです。

00:24:27.000 --> 00:24:32.000
システム全体の多くの場所でコンテンツを表示することは、かつてないほど簡単になりました。

00:24:32.000 --> 00:24:39.000
インタラクティブ性とアニメーション化されたトランジションを使用してウィジェットを強化できるすべての方法に興奮しています。

00:24:39.000 --> 00:24:43.000
現在、App Intentsは、ウィジェットの単なるインタラクティブ性以上のものです。

00:24:43.000 --> 00:24:50.000
Spotlight、Shortcuts、Siriなど、システム全体でアプリの機能を向上させます。

00:24:50.000 --> 00:24:59.000
これで、アプリショートカットでインテントをラップすると、Spotlight結果のアプリアイコンのすぐ横に表示され、より豊かでインタラクティブなプレゼンテーションが表示されます。

00:24:59.000 --> 00:25:01.000
あなたはただいくつかのものを提供する必要があります。

00:25:01.000 --> 00:25:05.000
アプリのショートカットでは、短いタイトルと画像またはシンボル。

00:25:05.000 --> 00:25:09.000
そして、アプリのInfo.plistでは、アプリのアイコンを補完する背景色。

00:25:09.000 --> 00:25:20.000
また、アプリのショートカットは更新されたショートカットアプリで表示され、ユーザーは自動的に実行するように設定したり、ホーム画面に追加したり、独自のショートカットを作成したりできます。

00:25:20.000 --> 00:25:22.000
Siriもさらに良くなりました。

00:25:22.000 --> 00:25:26.000
ユーザーは、ショートカットを呼び出すためのより自然言語の柔軟性を持っています。

00:25:26.000 --> 00:25:32.000
WidgetKitとApp Intentsを使用すると、ユーザーはまったく新しい方法でアプリの機能にアクセスできます。

00:25:32.000 --> 00:25:36.000
次に、アプリの機能の発見について話しましょう。

00:25:36.000 --> 00:25:45.000
毎年、私たち開発者は、ユーザーが気に入ると思う機能の構築に時間を費やしていますが、最も恩恵を受けるユーザーは、その機能が存在することを知らないことがあります!

00:25:45.000 --> 00:25:53.000
TipKitと呼ばれる新しいフレームワークは、適切なタイミングで適切な機能についてユーザーにインテリジェントに教育することで、これに対処するのに役立ちます。

00:25:53.000 --> 00:26:01.000
TipKitには、ユーザーがシステムアプリで見慣れているものに合わせてテンプレートが含まれており、アプリのルックアンドフィールに合わせて簡単にカスタマイズできます。

00:26:01.000 --> 00:26:04.000
TipKitのパワーは、そのターンキーな性質です。

00:26:04.000 --> 00:26:11.000
テンプレートをカスタマイズしてターゲティングを追加するだけで、現在のコンテキストに関連する機能についてユーザーを教育できます。

00:26:11.000 --> 00:26:18.000
また、ユーザーが別のデバイスで見た場合でも、ユーザーがすでに見たヒントを表示しないように、全体的な頻度を管理することもできます。

00:26:18.000 --> 00:26:24.000
最後に、ユーザーがAirDropでアプリからコンテンツを共有するのに役立つ楽しい新しい方法があります。

00:26:24.000 --> 00:26:31.000
iOS 17では、ユーザーは共有シートをスキップして、近くの別のデバイスにコンテンツをすばやく送信できます。

00:26:31.000 --> 00:26:38.000
SwiftUIでShareLinkを使用するか、アプリのUIKitビューコントローラーでactivityItemsConfigurationを採用できます。

00:26:38.000 --> 00:26:44.000
また、ShareSheetやQuickLookなどのシステムが提供するViewControllersは、すでにデフォルトで機能しています。

00:26:44.000 --> 00:26:55.000
WidgetKit、App Intents、TipKit、AirDropは、アプリのコンテンツを適切な場所で適切なタイミングでユーザーが利用できるようにするエクスペリエンスを構築するのに役立ちます。

00:26:55.000 --> 00:27:00.000
これらを使用してアプリをさらに進める方法を楽しみにしています。 アプリをさらに進めることを楽しみにしています。

00:27:00.000 --> 00:27:03.000
そして今、ダーリンに戻ります。

00:27:03.000 --> 00:27:09.000
Darin: 当社のプラットフォームは、ゲートからすぐに当社の製品のユニークなハードウェア機能にアクセスできるように構築されています。

00:27:09.000 --> 00:27:20.000
ニューラルエンジンを利用して写真を処理する場合でも、加速度計を使用して睡眠の動きを測定する場合でも、当社のAPIはハードウェア技術の力を簡単に活用することができます。

00:27:20.000 --> 00:27:26.000
次に、ゲーム、カメラ、ディスプレイ、Apple Watchの今年の改善点を見ていきます。

00:27:26.000 --> 00:27:29.000
これがすべてどのように展開されるかをブランドンが教えてくれます。

00:27:29.000 --> 00:27:38.000
ブランドン・コーリー：AppleシリコンMacの驚異的なパフォーマンス、長いバッテリー寿命、そして見事なグラフィックスは、ハイエンドゲームを実行するのに最適なプラットフォームです。

00:27:38.000 --> 00:27:43.000
そして今、macOS Sonomaのゲームモードは、Macでのゲームをさらに良くします。

00:27:43.000 --> 00:27:49.000
Macがこれまで以上に人気があり、何百万人もの新しいプレイヤーにゲームをもたらすのにこれほど良い時期はありません。

00:27:49.000 --> 00:28:04.000
Windowsやゲームコンソール用のゲームを構築する開発者であれば、3つの簡単なステップを使用して開発を大幅に加速する新しいGame Porting Toolkitを使用して、ゲームをMacに持ち込むことがこれまで以上に簡単になりました。

00:28:04.000 --> 00:28:11.000
まず、提供されたエミュレーション環境を使用して、既存のWindowsゲームがMacでどれだけうまく実行できるかを評価できます。

00:28:11.000 --> 00:28:17.000
これにより、ゲームの潜在的なパフォーマンスをすぐに分析でき、何ヶ月もの先行作業がなくなります。

00:28:17.000 --> 00:28:21.000
2番目のステップでは、シェーダーを変換してコンパイルします。

00:28:21.000 --> 00:28:37.000
ゲームポーティングツールキットには、ジオメトリ、テッセレーション、メッシュ、レイトレーシングステージなどのゲームの高度なシェーディングパイプラインすべてを含む、既存のHLSL GPUシェーダーをすべてMetalに自動的に変換するために使用できる新しいメタルシェーダーコンバーターが含まれています。

00:28:37.000 --> 00:28:44.000
Xcodeでゲームを構築している間、またはシェーダーコンパイル用のカスタムWindowsベースのツールチェーンでこのツールを使用できます。

00:28:44.000 --> 00:28:49.000
これはステップ3に進みます。グラフィックコードを変換し、ゲームを最適化します。

00:28:49.000 --> 00:28:58.000
Metalは、現代のハイエンドゲームで使用されるすべての高度なグラフィックスとコンピューティング機能を提供し、グラフィックスコードの変換を非常に簡単にします。

00:28:58.000 --> 00:29:07.000
また、Xcodeに統合された強力なグラフィックスパフォーマンスとデバッグツールは、ゲームを完全に最適化するために必要なすべてのガイダンスを提供します。

00:29:07.000 --> 00:29:22.000
これらのツールを利用して、Appleシリコンの信じられないほどのパフォーマンスと、強力なグラフィックス、ディスプレイ、オーディオ、入力、ゲーム技術を活用して、これまで以上に劇的に高速にMacにゲームをもたらすのが待ちきれません。

00:29:22.000 --> 00:29:26.000
より速いパフォーマンスといえば、カメラについて共有するニュースもあります。

00:29:26.000 --> 00:29:34.000
Appleは、モバイル写真を前進させ、世界で最も人気のあるカメラで素晴らしいことができるAPIを拡大し続けています。

00:29:34.000 --> 00:29:47.000
AVCaptureは、創造性から生産性、ソーシャルメディア、さらには健康まで、すべてのカテゴリのiOSアプリの3分の1以上で使用されており、今年はいくつかの強力なパフォーマンスの向上を得ています。

00:29:47.000 --> 00:29:52.000
ゼロシャッターラグを使用すると、シャッターが押されたときの正確な瞬間をキャプチャします。

00:29:52.000 --> 00:29:58.000
キャプチャが重なると、シャッターをすばやく押すと、カメラは画質を動的に調整します。

00:29:58.000 --> 00:30:05.000
また、遅延処理では、Deep Fusionを含む高品質の画像をバックグラウンドで処理できます。

00:30:05.000 --> 00:30:14.000
これらの改善により、高品質の画像をキャプチャしている間でも、iOSまたはiPadOSアプリのシャッター間のショットツーショット時間が最大3倍速くなります。

00:30:14.000 --> 00:30:21.000
そして今年後半には、音量ボタンと上下ボタンを使用してカメラのシャッターをトリガーすることもできます。

00:30:21.000 --> 00:30:24.000
アプリに写真を表示することについても大きなニュースがあります。

00:30:24.000 --> 00:30:31.000
近年、iPhone、iPad、Macなど、HDR対応ディスプレイが広く利用可能になりました。

00:30:31.000 --> 00:30:44.000
HDR写真は、実際の生活でシーンを経験したように、これまで以上に忠実度とリアリズムで明るいハイライトと暗い影を表示するために、追加のダイナミックレンジをキャプチャすることによって利用します。

00:30:44.000 --> 00:30:53.000
Appleは、iPhone 12以降で撮影された何兆ものHDR写真で、HDR写真を主流にするリーダーです。

00:30:53.000 --> 00:31:01.000
これを行うには、カメラアプリはシーンをインテリジェントに分析し、キャプチャ時に追加のハイライトとシャドウデータを保存します。

00:31:01.000 --> 00:31:10.000
しかし、HDRビデオには業界標準がありますが、HDR写真の保存と表示には標準がないため、作業が困難になっています。

00:31:10.000 --> 00:31:13.000
しかし、今年はすべてが変化しています。

00:31:13.000 --> 00:31:23.000
Appleは業界全体の取り組みを推進し、最近国際標準化機構によって批准されたHDR写真のエンコードと表示の仕様をもたらしました。

00:31:23.000 --> 00:31:33.000
iOS、iPadOS、macOSでAPIとして利用できるようになったので、わずか数行のコードでアプリに互換性のある写真を表示できます。

00:31:33.000 --> 00:31:38.000
これは、写真だけでなく、画像を表示するすべてのアプリにとって素晴らしいニュースです。

00:31:38.000 --> 00:31:43.000
ジェネレーションコンテンツアプリは、それを使用して、追加のダイナミックレンジで画像をポップにすることができます。

00:31:43.000 --> 00:31:56.000
これで、キャプチャから編集、共有まで、完全なHDRワークフローが可能になり、写真家が経験したように、誰もがその完全なHDRの栄光を楽しむことができます。

00:31:56.000 --> 00:31:58.000
次に、ビデオについて話しましょう。

00:31:58.000 --> 00:32:04.000
最近、私たちは皆、ビデオ会議でもクリエイティブなアプリでも、カメラで多くの時間を過ごしています。

00:32:04.000 --> 00:32:11.000
私たちは、これらの新しい反応、ジェスチャー、プレゼンターオーバーレイエフェクトなど、ビデオ照明とエフェクトへの投資を続けています。

00:32:11.000 --> 00:32:16.000
それらはあなたが受け取るカメラフィードに組み込まれているので、あなたのアプリで機能するだけです。

00:32:16.000 --> 00:32:24.000
アプリは、これらの効果がいつ呼び出されるかを観察し、そのユーザーのタイルを宣伝して、誰もが反応したのを見ることができるように、追加のアクションを実行できます。

00:32:24.000 --> 00:32:31.000
ビデオ会議アプリをお持ちの場合は、ScreenCaptureKitの画面共有とカメラ機能に多くの改善点があります。

00:32:31.000 --> 00:32:38.000
新しいScreenCaptureKitピッカーは、ユーザーがよりプライベートで安全な方法で画面共有を簡単に開始できるようにします。

00:32:38.000 --> 00:32:44.000
また、ピッカーを使用すると、アプリが複数のウィンドウや複数のアプリを一度に簡単にキャプチャできます。

00:32:44.000 --> 00:32:54.000
ユーザーは、自分がいるアプリから直接共有を開始でき、新しいビデオエフェクトメニューで共有されているもののプレビューが表示されることに感謝するでしょう。

00:32:54.000 --> 00:33:01.000
ScreenCaptureKitのもう1つの利点は、単一のウィンドウを共有するときに、より見栄えの良い画面共有のための高解像度のコンテンツです。

00:33:01.000 --> 00:33:04.000
また、iPadに外部カメラのサポートも提供しました。

00:33:04.000 --> 00:33:08.000
どのUSBカメラもiPadアプリ内で接続して使用できるようになりました。

00:33:08.000 --> 00:33:14.000
そして、まったく新しいプラットフォームであるtvOSにカメラとマイクの機能を追加することに興奮しています。

00:33:14.000 --> 00:33:24.000
tvOSのContinuity Cameraを使用すると、iPhoneやiPadを利用して、tvOSアプリにビデオとオーディオを初めて統合できます。

00:33:24.000 --> 00:33:29.000
そして、リビングルームをステージとして、アプリで素晴らしいことをする可能性はたくさんあります。

00:33:29.000 --> 00:33:36.000
たとえば、会議アプリはセンターステージを使用できます。これにより、ホームで最大の画面でグループビデオ通話をよりダイナミックにします。

00:33:36.000 --> 00:33:40.000
ゲームは、カメラとオーディオフィードをアクションに直接組み込むことができます。

00:33:40.000 --> 00:33:45.000
また、クリエイティブなアプリは、ポートレートモードやその他の楽しい効果を適用しながら、ビデオをストリーミングまたは録画できます。

00:33:45.000 --> 00:33:54.000
すでにApple TVにアプリをお持ちの場合は、すでに慣れ親しんでいるフレームワークを活用することで、体験をさらにつながり、ソーシャルにすることができます。

00:33:54.000 --> 00:34:01.000
そして、Continuity Cameraを利用したいが、まだtvOS用に開発していない人にとっては、SwiftUIを使い始めるのはとても簡単です。

00:34:01.000 --> 00:34:04.000
それがどのように機能するかをお見せしましょう。

00:34:04.000 --> 00:34:09.000
だから、これは楽しいフィルターでセルフィーを撮る私の例のiPadアプリ、PartyCamです。

00:34:09.000 --> 00:34:14.000
まず、Apple TVを目的地として追加します。

00:34:14.000 --> 00:34:19.000
次に、どの電話から選択するかをユーザーが把握できるように、ピッカーを追加する必要があります。

00:34:19.000 --> 00:34:21.000
次に、ピッカーを提示するコードを追加します。

00:34:21.000 --> 00:34:22.000
そして、私たちは走ります。

00:34:22.000 --> 00:34:26.000
そして今、私はリモコンを拾って写真を撮るだけです。

00:34:26.000 --> 00:34:31.000
やあ、スーザンとセレニティだよ！

00:34:31.000 --> 00:34:33.000
すごい！

00:34:33.000 --> 00:34:36.000
あなたがリビングルームをさらに面白くする方法を見るのが待ちきれません。

00:34:36.000 --> 00:34:40.000
さて、watchOSの新機能でロリに。

00:34:40.000 --> 00:34:51.000
Lori Hylan-Cho: 私たちの最初のウェアラブルデバイスとして、Apple Watchは、開発者がタイムリーな通知、健康とフィットネスの洞察、そして便利なアプリ体験を人々の手首にもたらす新しい可能性を開きました。

00:34:51.000 --> 00:35:00.000
今年、watchOS 10は、現代のApple Watchモデルのより大きく、より明るいディスプレイ、より高性能で接続されたハードウェアを活用した大きなデザインリフレッシュを得ています。

00:35:00.000 --> 00:35:03.000
SwiftUIは、この再設計の中心にあります。

00:35:03.000 --> 00:35:12.000
私たちは、事実上すべてのアプリをよりダイナミックで、よりカラフルで、より見やすいように更新するために、システム全体でそれを採用しました。

00:35:12.000 --> 00:35:14.000
いくつかの例をお見せしましょう。

00:35:14.000 --> 00:35:27.000
watchOS 10ではページネーションに新たな焦点が置かれ、垂直タブビューはさまざまなページサイズを可能にし、すべての貴重なコンテンツのスペースを犠牲にすることなく、アプリ内でスクロールするためのクラウンをよりよく利用します。

00:35:27.000 --> 00:35:37.000
新しいcontainerBackgroundモディファイアを使用すると、読みやすさのためにグラデーション塗りつぶし付きの色を使用して、ユーザーがアプリ内のどこにいるかを理解したり、データをより glanceしやすくしたりできます。

00:35:37.000 --> 00:35:46.000
画面を埋めるアプリデザインの場合、新しいToolbarItemの配置はコーナーをより有効に活用し、必要に応じて自動的に中央に移動する時間を確保します。

00:35:46.000 --> 00:35:56.000
また、強力なソースリスト/詳細ビューの関連付けを持つレイアウトの場合、NavigationSplitViewは、他のプラットフォームで使用するのと同じコードを使用して、Apple Watchでこれまで以上に魅力的です。

00:35:56.000 --> 00:36:02.000
また、Apple Watchの詳細ビューのピボットは、SwiftUIの新しいインタラクティブな春のアニメーションも使用しています。

00:36:02.000 --> 00:36:12.000
このアニメーションは、ユーザーの指の速度によって駆動されるビューのサイズと位置の両方をアニメーション化するアニメーション計画のための12の別々のトラックで構成されています。

00:36:12.000 --> 00:36:20.000
そしてもちろん、すべての主要なUIコンポーネントは、任意の背景で読みやすいように材料処理で更新され、ハードウェアに合わせて自動的にサイズが調整されます。

00:36:20.000 --> 00:36:28.000
アプリにSwiftUIをすでに採用している場合は、watchOS 10 SDKでビルドすると、これらのアップデートが自動的に行われます。

00:36:28.000 --> 00:36:33.000
私がもともとwatchOS 9用に設計したBackyard Birdsアプリで私が何を意味するのかをお見せしましょう。

00:36:33.000 --> 00:36:41.000
これはNavigationStackを使用して構築されたリスト/詳細アプリであり、コードの変更がなくても、watchOS 10で再コンパイルするとすでにうまく機能します。

00:36:41.000 --> 00:36:49.000
ビューは新しいナビゲーションバーの高さに合わせて自動的に調整され、スクロールすると大きなタイトルが縮小され、時間の下の位置にアニメーション化されます。

00:36:49.000 --> 00:36:54.000
それでは、watchOS 10でアプリをさらにくつろげるように編集してみましょう。

00:36:54.000 --> 00:37:01.000
常にリストから選択するのではなく、アプリを起動するたびにプライマリヤードの現在のステータスを確認したいです。

00:37:01.000 --> 00:37:11.000
NavigationSplitViewは、ソースリスト/詳細関係が強いアプリ用に特別に設計されているため、NavigationStackをNavigationSplitViewに交換します。

00:37:11.000 --> 00:37:20.000
アプリのエントリポイントではなくなったため、ソースリストからナビゲーションタイトルを削除し、デフォルトで開くべき詳細ビューを示します。

00:37:20.000 --> 00:37:24.000
ソースリストは現在、詳細ビューの後ろに隠されており、私は詳細に焦点を当てています。

00:37:24.000 --> 00:37:27.000
しかし、私の詳細ビューはかなり長いです。

00:37:27.000 --> 00:37:36.000
3つの明確なセクションを持つスクロールリストなので、リストをセクションごとに別々のページを持つ垂直タブビューに変換してコンテンツを分割します。

00:37:36.000 --> 00:37:44.000
これらの各ページはデフォルトで画面の高さになり、その最後のセクションにはForEachループが含まれているため、各鳥は独自のページを取得しています。

00:37:44.000 --> 00:37:54.000
画面の高さを超えるとスクロールするすべての鳥のリストを1つのタブにしたいので、このForEachをリストに変更して、スクロール可能なビューにします。

00:37:54.000 --> 00:38:01.000
次に、タブを区別するために色を追加したいので、各タブに.containerBackground修飾子を追加します。

00:38:01.000 --> 00:38:06.000
そして、食べ物や水が不足しているときにすぐに見つけるために、私は栄養の背景をダイナミックにします。

00:38:06.000 --> 00:38:11.000
供給レベルに基づいて、緑、黄色、または赤になります。

00:38:11.000 --> 00:38:20.000
ライブプレビューの変更を見ると、背景色がアプリ内の場所の感覚を与え、食べ物や水を補充する必要があるときに見つけやすくなることがわかります。

00:38:20.000 --> 00:38:27.000
最後のタブでは、コンテンツは画面の境界を超えてスクロールできますが、ソースリストボタンをタップすると裏庭のリストにアクセスできます。

00:38:27.000 --> 00:38:32.000
私のアプリをwatchOS 10に正しく適合させるには、ほんの少し変更が必要でした。

00:38:32.000 --> 00:38:42.000
SwiftUIは、システム上のすべてのアプリを素晴らしく見せるために働いたので、私たちの生活を楽にしました。そして、先ほど見たように、これらの新しいデザインパラダイムのためのアプリの更新も簡単になります。

00:38:42.000 --> 00:38:46.000
まだアプリでSwiftUIに移行していない場合は、今がその時です。

00:38:46.000 --> 00:38:57.000
これらのSwiftUIベースのアプリのアップデートに加えて、watchOS 10には、AppIntentsの関連性がウィジェットが適切なタイミングでスマートスタックを上に移動するのに役立つまったく新しいシステムスペースもあります。

00:38:57.000 --> 00:39:05.000
そして、前述の同じ.containerBackground修飾子を使用して、これらのウィジェットを美しいカスタム背景で本当に輝かせることができます。

00:39:05.000 --> 00:39:25.000
ワークアウトアプリを構築している人のために、アプリからフィットネスプランを共有できる新しいカスタムワークアウトAPIと、ゴルフやテニスなどのスポーツのスイング分析を改善するのに役立つ動きと加速度計データの忠実度の高いキャプチャを可能にする新しいCoreMotion APIを使用して、ユーザーがApple Watchのフィットネストラッキング機能を利用するのを助けることができます。

00:39:25.000 --> 00:39:31.000
そして、私たちは皆さんがどれほど創造的になれるかを知っているので、このデータはあらゆる種類のワークアウトを実行するときに利用できます。

00:39:31.000 --> 00:39:34.000
私たちは、あなたがそれでどのような経験を構築するかを見るのが待ちきれません。

00:39:34.000 --> 00:39:38.000
そして、それは今年watchOSにやってくる大きな変化のいくつかを垣間見ることができます。

00:39:38.000 --> 00:39:41.000
そして今、ダーリンに戻ります。

00:39:41.000 --> 00:39:47.000
ダリン：プラットフォームは、それを使用する人々と、ゼロから組み込まれている価値観についてもです。

00:39:47.000 --> 00:39:52.000
これらのコアバリューは、Appleの私たちにとって大きな意味があり、あなたにとっても大きな意味があることを知っています。

00:39:52.000 --> 00:40:03.000
一緒に、私たちはあなたのアプリを人々のニーズに適応させ、誰もがそれを使用し、自分自身を保護し、データを保護する各ユーザーのニーズを尊重するアプリを作成することができます。

00:40:03.000 --> 00:40:07.000
私たちのプラットフォームが提供するものから始めると、この重要な作業が容易になります。

00:40:07.000 --> 00:40:11.000
もっと詳しく言うと、クリスです。

00:40:11.000 --> 00:40:16.000
クリス：私たちは、誰もが自分の好きなことをするために私たちのデバイスを使うことができるべきだと信じています。

00:40:16.000 --> 00:40:21.000
だからこそ、当社の製品をアクセシブルにすることは、Appleのコアバリューです。

00:40:21.000 --> 00:40:27.000
世界保健機関によると、世界中には10億人以上の障害者がいます。

00:40:27.000 --> 00:40:36.000
アクセシブルな技術を構築することは、より多くの人々に創造し、学び、つながりを保ち、彼らの条件で生きるための最良のツールを提供することを意味します。

00:40:36.000 --> 00:40:52.000
そのため、Apple製品には、視覚障害者、聴覚障害者、非話さない、または言語障害のあるユーザー、身体障害または運動障害のあるユーザー、認知障害のあるユーザー向けに、すぐに使用できるアクセシビリティ機能を備えています。

00:40:52.000 --> 00:41:03.000
当社のフレームワークには、これらのアクセシビリティ機能のサポートが組み込まれており、アプリに誰もがアクセスできるようにするためのツールやAPIが組み込まれています。

00:41:03.000 --> 00:41:07.000
多くの場合、アクセシビリティは大きな影響を与える小さなステップを踏むことに帰着します。

00:41:07.000 --> 00:41:17.000
例として、昨年は、拡大鏡アプリでドアを検出して記述する機能を追加し、人々が独立して環境をナビゲートできるようにしました。

00:41:17.000 --> 00:41:24.000
今年は、アニメーションや点滅するライトに敏感なユーザーへのサポートを拡大しています。

00:41:24.000 --> 00:41:39.000
これらのユーザーは、点滅するライトの警告で始まる映画など、潜在的に危険なコンテンツを避けるか、十分な情報なしで消費するか、発作などの健康上のリスクにさらされることを意味するか、困難な選択に直面することがよくあります。

00:41:39.000 --> 00:41:47.000
当社のフレームワークには、これらのユーザーがアプリのコンテンツをよりアクセスしやすくする2つの機能のAPIが含まれています。

00:41:47.000 --> 00:41:55.000
最初の機能はアニメーション画像の一時停止で、Safari、メッセージなどのアニメーションGIFの動きを停止します。

00:41:55.000 --> 00:41:59.000
そして、アプリに追加するのは簡単です。 アプリに追加するのは簡単です。

00:41:59.000 --> 00:42:04.000
SwiftUIのTimelineViewで一連の画像をアニメーション化するとします。

00:42:04.000 --> 00:42:16.000
新しい環境プロパティを使用して、ユーザーがアニメーション画像を一時停止することを好むかどうかを理解し、その場合は、選択を尊重するためにアニメーション画像を静的画像に置き換えることができます。

00:42:16.000 --> 00:42:25.000
2番目の機能は、明るく点滅するライトのシーケンス中にビデオの表示を自動的に暗くする薄暗い点滅ライトです。

00:42:25.000 --> 00:42:32.000
AVFoundationのビデオレンダリングパイプラインには、点滅する要素を識別して薄暗くするための新しい段階があります。

00:42:32.000 --> 00:42:38.000
AVFoundationを使用してアプリでメディアを再生する場合、この機能をサポートする余分な作業はありません。

00:42:38.000 --> 00:42:48.000
ただし、アプリがカスタムメディアプレーヤーを使用している場合は、新しいAPIを使用して、点滅するライトでビデオコンテンツを識別し、自動的に暗くすることができます。

00:42:48.000 --> 00:42:53.000
アルゴリズムもオープンソース化しているので、この機能の背後にある科学を理解することができます。

00:42:53.000 --> 00:43:00.000
各製品とフレームワークにアクセシビリティを構築するという当社のコミットメントは、最新のプラットフォームであるvisionOSにまで及びます。

00:43:00.000 --> 00:43:13.000
私たちは、世界最高の技術がすべての人のニーズに適応すべきだと信じているので、visionOSには最初から何十ものアクセシビリティ機能が組み込まれています。

00:43:13.000 --> 00:43:26.000
そして、開発者として、今日のiPadOSとiOSで使用しているのと同じツールとAPIを使用して、visionOSアプリを誰もがアクセスできるようにすることで、重要な役割を果たします。

00:43:26.000 --> 00:43:35.000
私たちは、多様なユーザーに空間コンピューティングをもたらすためにあなたと協力することに興奮しています、そして、あなたは少しでVision Proのアクセシビリティについてもっと聞くでしょう。

00:43:35.000 --> 00:43:39.000
さて、ケイティにプライバシーについて話します。

00:43:39.000 --> 00:43:43.000
ケイティ・スキナー:アップルでは、プライバシーは基本的人権であると信じています。

00:43:43.000 --> 00:43:51.000
私たちは、彼らがそれをどれだけ気にかけているかをユーザーから聞き、あなたの機能とともに素晴らしいプライバシーを提供するのを助けるためにここにいます。

00:43:51.000 --> 00:43:57.000
長年にわたり、私たちはあなたのアプリにプライバシーを組み込むのに役立つ多くの方法を構築してきました。

00:43:57.000 --> 00:44:07.000
今年は、プライバシープロンプトの改善から始めて、多くの分野でユーザーに堅牢なプライバシー体験を提供することをさらに簡単にします。

00:44:07.000 --> 00:44:10.000
カレンダーの権限から始めましょう。

00:44:10.000 --> 00:44:17.000
多くの場合、アプリはカレンダーへの読み取りアクセスを必要とせず、新しいイベントを書く必要があることを知っています。

00:44:17.000 --> 00:44:22.000
これらのケースでは、新しい追加のみの権限を作成しました。

00:44:22.000 --> 00:44:29.000
これは、あなたが必要とするアクセスを得るのに役立ち、ユーザーは彼らにとって意味のあるプロンプトを得るでしょう。

00:44:29.000 --> 00:44:40.000
また、写真では、ユーザーがアプリに写真を提供するための2つの選択肢を提供しました。共有する写真を選択するか、完全なライブラリへのアクセスを提供できます。

00:44:40.000 --> 00:44:50.000
私たちは、ユーザーがアプリと共有する写真を選択するのをさらに簡単にしたかったので、あなたは正確に必要なものを手に入れ、ユーザーは自分の意図したものだけを共有します。

00:44:50.000 --> 00:45:00.000
そのため、アプリに埋め込むことができる新しいフォトピッカーを追加しているので、ユーザーはあなたの経験の中から共有する写真を簡単に選択できます。

00:45:00.000 --> 00:45:02.000
次に、アプリのプライバシー。

00:45:02.000 --> 00:45:09.000
ユーザーがデータを保護する方法を理解するのを助けることが重要なので、それを行うのに役立つ機能を構築しました。

00:45:09.000 --> 00:45:16.000
たとえば、プライバシー栄養ラベルは、ユーザーが収集するデータとその使用方法を理解するのに役立ちます。

00:45:16.000 --> 00:45:22.000
あなた方の多くは、優れた機能を提供できるサードパーティのSDKをアプリに含めています。

00:45:22.000 --> 00:45:30.000
しかし、それらを含めると、ユーザーデータをどのように処理するかを理解していない可能性があるため、ラベルを正しく取得するのが難しくなる可能性があります。

00:45:30.000 --> 00:45:35.000
そして、彼らはあなたのソフトウェアサプライチェーンにセキュリティ上の課題をもたらすことができます。

00:45:35.000 --> 00:45:39.000
そのため、今年は2つのアップデートを紹介します。

00:45:39.000 --> 00:45:46.000
まず、サードパーティのSDKがデータをどのように使用しているかを理解するために、プライバシーマニフェストを導入しました。

00:45:46.000 --> 00:45:53.000
これらは、アプリ内のサードパーティのコードのプライバシー慣行を標準形式で概説するファイルです。

00:45:53.000 --> 00:46:03.000
アプリを配布する準備をすると、Xcodeは使用しているすべてのサードパーティSDKのすべてのマニフェストを1つの使いやすいレポートにまとめます。

00:46:03.000 --> 00:46:11.000
すべてのサードパーティSDKの1つのサマリーレポートで、App Store Connectで正確なラベルを作成することがかつてないほど簡単になりました。

00:46:11.000 --> 00:46:16.000
また、ソフトウェアサプライチェーンの整合性の向上を支援したいと考えています。

00:46:16.000 --> 00:46:23.000
サードパーティのSDKを使用する場合、ダウンロードしたコードが期待する開発者によって書かれたものを知るのは難しい場合があります。

00:46:23.000 --> 00:46:29.000
それに対処するために、サードパーティのSDKの署名を導入しています。

00:46:29.000 --> 00:46:39.000
アプリでサードパーティのSDKの新しいバージョンを採用すると、Xcodeは同じ開発者によって署名されたことを検証し、より安心感を与えます。

00:46:39.000 --> 00:46:50.000
サードパーティのSDKのプライバシーマニフェストと署名により、ユーザーを保護し、データがどのように使用されるかを理解するのをさらに簡単にします。

00:46:50.000 --> 00:46:58.000
そして最後に、当社のプラットフォームで子供を保護するためにプライバシー保護技術を使用する通信安全。

00:46:58.000 --> 00:47:08.000
私たちのプラットフォームとあなたが構築するアプリは、世界中の多くの家族の生活、特にコミュニケーション方法において重要な役割を果たしています。

00:47:08.000 --> 00:47:17.000
iOS 15では、Appleデバイスを使用している子供たちにより多くの保護を提供するために、メッセージに通信安全機能を導入しました。

00:47:17.000 --> 00:47:24.000
あなたの多くは、ユーザーがコンテンツを共有し、脆弱な状況にある子供たちを保護したいアプリを構築しています。

00:47:24.000 --> 00:47:32.000
安全でないコンテンツを分類するためのモデルのトレーニングと実装は、解決が困難な問題であり、多くの作業を行う可能性があることを知っています。

00:47:32.000 --> 00:47:40.000
そして、機密コンテンツ分析フレームワークを使用して、プラットフォーム全体にコミュニケーションの安全性をもたらしています。

00:47:40.000 --> 00:47:48.000
わずか数行のコードで、フレームワークはヌードを含む画像やビデオを検出するのに役立ち、これは完全にデバイス上で起こります。

00:47:48.000 --> 00:47:55.000
そのため、コミュニケーションセーフティを有効にしている子供たちのために、アプリでポジティブな体験を構築できます。

00:47:55.000 --> 00:48:02.000
機密コンテンツ分析フレームワークは、通信の安全性を支えるのと同じ技術を使用しています。

00:48:02.000 --> 00:48:08.000
このフレームワークは、画像やビデオを完全にデバイス上で処理することで、ユーザーのプライバシーを保護します。

00:48:08.000 --> 00:48:16.000
さらに、機密コンテンツ警告で機密コンテンツをぼかすことができるよう、すべての人に提供したいと考えました。

00:48:16.000 --> 00:48:29.000
機密コンテンツ分析フレームワークは、ユーザーが通信安全または機密コンテンツ警告を有効にしているかどうかを知らせるため、有効になっている機能に基づいてアプリのエクスペリエンスを調整できます。

00:48:29.000 --> 00:48:36.000
これらの新機能により、ユーザーにプライバシーと安心を提供することがこれまで以上に簡単になります。

00:48:36.000 --> 00:48:40.000
次に、クリスがApp Storeの新機能を教えてくれます。

00:48:40.000 --> 00:48:49.000
Chris Markiewicz: ユーザーが安全性、プライバシー、パフォーマンスに関する高い基準を満たすアプリを発見するための信頼できる場所があり、それがApp Storeです。

00:48:49.000 --> 00:48:57.000
App Storeでは、アプリ内購入などのさまざまなビジネスモデルを使用して、アプリ配信を世界中に拡大することができます。

00:48:57.000 --> 00:49:01.000
StoreKitは、安全で信頼できるアプリ内購入の基盤です。

00:49:01.000 --> 00:49:06.000
製品をアプリのUIに接続するための堅牢なデータモデルを提供します。

00:49:06.000 --> 00:49:15.000
アプリ内購入を提供する場合、ユーザーが情報に基づいた購入を行うことができるように、価格やサブスクリプション期間などの重要な詳細を提示することの重要性を知っています。

00:49:15.000 --> 00:49:19.000
そして、私たちは多くの開発者がこれを正しくするのに苦労していることを知っています。

00:49:19.000 --> 00:49:29.000
今年は、ヒューマンインターフェイスガイドラインのベストプラクティスを使用して、すべてのプラットフォームでアプリのマーチャンダイジングUIを強化するための新しいビューコレクションでStoreKitをさらに進めています。

00:49:29.000 --> 00:49:37.000
SwiftUIの宣言構文を使用して、マーチャンダイジング体験を作成し、残りはStoreKitが処理します。

00:49:37.000 --> 00:49:39.000
いくつかの例を見てみましょう。

00:49:39.000 --> 00:49:45.000
ProductViewを使用すると、App Store Connectで定義したデータを使用して製品を表示できます。

00:49:45.000 --> 00:49:49.000
アプリのルックアンドフィールに合わせて簡単にカスタマイズできます。

00:49:49.000 --> 00:49:53.000
SubscriptionStoreViewは、サブスクリプション専用のビューです。

00:49:53.000 --> 00:50:02.000
わずか1行のコードで、各レベルのサービスの説明、価格、および期間がユーザーに明確に提示されます。

00:50:02.000 --> 00:50:04.000
これらのビューはiPhoneだけのものではありません。

00:50:04.000 --> 00:50:09.000
同じコードは、すべてのAppleデバイスでプラットフォームエクスペリエンスを一致させるビューを作成します。

00:50:09.000 --> 00:50:13.000
また、Apple Watchのコンパクトなディスプレイに合うように拡大縮小します。

00:50:13.000 --> 00:50:19.000
そしてもちろん、彼らはすべてのユーザーのためのアクセシビリティとローカリゼーションを念頭に置いて作成されました。

00:50:19.000 --> 00:50:23.000
SubscriptionStoreViewを私のアプリに統合するのはとても簡単です。

00:50:23.000 --> 00:50:26.000
バックヤード・バーズ・パスのサブスクリプション提供に取り組みましょう。

00:50:26.000 --> 00:50:34.000
Xcodeにアクセスして、Backyard Birdsのルックアンドフィールに合わせてSubscriptionStoreViewにいくつかの宣言を追加します。

00:50:34.000 --> 00:50:43.000
ビューでマーケティングコンテンツをカスタマイズし、コンテナの背景を追加し、サブスクリプションオプションのスタイルを変更します。

00:50:43.000 --> 00:50:48.000
今、私たちは見栄えが良く、アプリのブランディングにマッチするものを持っています。

00:50:48.000 --> 00:50:53.000
また、ユーザーと同じ完全な体験を得ることができるシミュレーターも簡単に見てみましょう。

00:50:53.000 --> 00:51:01.000
ここでオファーを選択し、[購読]をクリックして、購入を完了できます。

00:51:01.000 --> 00:51:08.000
情報に基づいた決定を下すために必要なすべての情報をユーザーに表示するために、カスタマイズされた購入体験を構築するために必要なのはそれだけです。

00:51:08.000 --> 00:51:16.000
また、ユーザーの購入履歴やサブスクリプションのステータスに基づいて、提示するオファーをカスタマイズするのがどれほど難しいかも知っています。

00:51:16.000 --> 00:51:23.000
そのため、SubscriptionStoreViewは自動的にユーザーの適格性を判断し、適切なオファーを表示します。

00:51:23.000 --> 00:51:27.000
新しいStoreKitビューは、アプリ内購入を商品化するための最良の方法です。

00:51:27.000 --> 00:51:34.000
ビジネスを成長させるもう1つの重要な側面は、広告がユーザーがアプリを発見するのにどのように役立つかを理解することです。

00:51:34.000 --> 00:51:44.000
そのため、SKAdNetworkは、ユーザーのプライバシーを保護しながら、広告キャンペーンがアプリのダウンロードをどのように成功させるかを広告ネットワークが測定するのに役立ちます。

00:51:44.000 --> 00:51:51.000
ダウンロードの測定に加えて、広告がどのようにユーザーをアプリに戻すことができるかを理解することが重要であることを知っています。

00:51:51.000 --> 00:51:54.000
SKAdNetwork 5は、再エンゲージメントの測定をサポートします。

00:51:54.000 --> 00:52:03.000
ユーザーがアプリをダウンロードした後のコンバージョンを測定するだけでなく、ユーザーが広告をタップしてアプリを開いた後のコンバージョンを測定することもできます。

00:52:03.000 --> 00:52:07.000
バージョン5は、今年後半にリリースされるiOSリリースで利用可能になります。

00:52:07.000 --> 00:52:18.000
アプリ内購入とSKAdNetworkの新機能は、ユーザーのプライバシーを尊重し、ユーザーに透明性と安心感を与えながら、責任を持ってビジネスを成長させるのに役立ちます。

00:52:18.000 --> 00:52:20.000
さて、ダリンに戻ります。

00:52:20.000 --> 00:52:25.000
ダリン:私たちのプログラミング言語やフレームワークのように、私たちのツールはお互いのために作られました。

00:52:25.000 --> 00:52:31.000
Xcodeは、すべてのプラットフォームでアプリを開発、テスト、配布するために必要なすべてのものをまとめています。

00:52:31.000 --> 00:52:38.000
TestFlightとXcode Cloudは、コードの最初の行からApp Storeでの最初のダウンロードまで、シームレスな体験を提供します。

00:52:38.000 --> 00:52:42.000
今、ケンは最新の動向を案内します。

00:52:42.000 --> 00:52:51.000
Ken Orr：すべてのAppleプラットフォームでは、1つのツールが開発者体験の中心であり、すべての素晴らしいアプリを構築するのに役立ちます：Xcode。

00:52:51.000 --> 00:53:06.000
コードの作成とユーザーインターフェイスの設計とインタラクティブなプレビューとライブアニメーションをブレンドするエディタや、チームとの変更を作成、レビュー、共有するための組み込みのソースコントロールなど、強力な機能をまとめています。

00:53:06.000 --> 00:53:21.000
アプリの評価と改良に役立つデバッグ、プロファイリング、テストツールはすべて、TestFlightとApp Storeへの配布を簡素化する継続的な統合および配信サービスであるXcode Cloudに接続されています。

00:53:21.000 --> 00:53:25.000
Xcode 15では、いくつかの大きなアップデートがあります。

00:53:25.000 --> 00:53:29.000
ほとんどの時間を費やすところから始めましょう。ソースエディターです。

00:53:29.000 --> 00:53:34.000
コード補完は、必要なコードをより速く、ミスを少なくして取得するのに役立ちます。

00:53:34.000 --> 00:53:42.000
Xcode 15では、優先順位付けのために周囲のコードを使用して、エディタで最も関連性の高い補完から始めます。

00:53:42.000 --> 00:53:50.000
それが使用している特定のビューに最も適切な修飾子なのか、それともビューをカスタマイズするときに修飾子を連鎖させるのか。

00:53:50.000 --> 00:53:59.000
また、Xcodeはアセットカタログリソースのシンボルを自動的に生成します。つまり、コード補完に表示され、コードで使いやすいです。

00:53:59.000 --> 00:54:05.000
これにより、資産が実行時に利用可能であるという安全性と安心感が得られます。

00:54:05.000 --> 00:54:09.000
これらのアセットを使用するのに最適な場所は、SwiftUIビューです。

00:54:09.000 --> 00:54:17.000
Xcodeのプレビューは、アプリのコードと一緒にデザインする際にほぼ瞬時にフィードバックを得て、UIを反復するシームレスな方法です。

00:54:17.000 --> 00:54:23.000
Xcode 15では、プレビューは使いやすく、さらに多くの場所で利用できます。

00:54:23.000 --> 00:54:32.000
Swiftマクロを使用して構築された新しい構文から始まり、書きやすく、覚えやすいです。

00:54:32.000 --> 00:54:35.000
さまざまなプラットフォームやデバイスでの作業が簡単になりました。

00:54:35.000 --> 00:54:41.000
キャンバスでそれらを選択して、どこでもあなたの景色が素晴らしく見えるようにすることができます。

00:54:41.000 --> 00:54:45.000
そして、すべてのUIフレームワークでプレビューを使用できるようになりました!

00:54:45.000 --> 00:54:54.000
SwiftUI、UIKit、またはAppKitを使用している場所では、コードのどこからでも一貫したエクスペリエンスでUIを反復できます。

00:54:54.000 --> 00:55:02.000
今、変更の迅速な作成とプレビューに歩調を合わせるために、Xcodeはそれらの変更をレビューしてコミットする方法を合理化します。

00:55:02.000 --> 00:55:08.000
多くの人がワークフローでgitステージングを使用しており、今ではXcodeに直接統合されています!

00:55:08.000 --> 00:55:17.000
クリックするだけで変更をステージングまたは解除でき、コードを離れることなく次のコミットを作成できます。

00:55:17.000 --> 00:55:25.000
ソースコントロールナビゲーターから、すべての変更を1つのビューで確認でき、コミットに最後の仕上げをするのに役立ちます。

00:55:25.000 --> 00:55:32.000
また、Xcodeにはプッシュされていないコミットも表示されるため、すべてのコミットをまとめてプルリクエストにまとめることができます。

00:55:32.000 --> 00:55:34.000
テストについて話しましょう。

00:55:34.000 --> 00:55:37.000
これは、高品質のアプリを作成する上で不可欠な部分です。

00:55:37.000 --> 00:55:48.000
多くのプラットフォーム、デバイス、言語、ユーザー機能でコードが成長するにつれて、テスト結果をナビゲートし、どこに集中するかを知ることは難しい場合があります。

00:55:48.000 --> 00:55:58.000
Xcode 15には、テストレポートの完全な再設計が含まれており、結果をよりよく理解し、行動を起こすための新しいツールを提供します。

00:55:58.000 --> 00:56:01.000
そして、それは美しい結果の概要から始まります。

00:56:01.000 --> 00:56:07.000
同じアサーションメッセージを持つような一般的な失敗パターンを含むトップインサイトを示しています。

00:56:07.000 --> 00:56:16.000
また、デバイスや言語などの構成でテストがどのように実行されたかの包括的な要約を取得し、パターンを見つけるのに役立ちます。

00:56:16.000 --> 00:56:20.000
そして、どこに集中するかをすばやく示すヒートマップがあります。

00:56:20.000 --> 00:56:22.000
今、私はBackyard Birdsアプリの機能に取り組んでいます。

00:56:22.000 --> 00:56:26.000
そして、私の最新のテストランを見ると、いくつかの問題があることがわかります。

00:56:26.000 --> 00:56:29.000
この洞察をクリックすることから始めます。

00:56:29.000 --> 00:56:32.000
私の新しいテストでは、タップジェスチャーが失敗しているようです。

00:56:32.000 --> 00:56:43.000
失敗したこのテストをクリックすると、左側のテストアクティビティの詳細なビューと、右側のアプリのUIの完全な記録が表示されます。

00:56:43.000 --> 00:56:46.000
特定のアクティビティを選択できます。

00:56:46.000 --> 00:56:50.000
または、新しいタイムラインを使用していつでもジャンプすることもできます。

00:56:50.000 --> 00:56:58.000
テストがこのビューをここでスクロールしたときや、検索フィールドをタップしたときなど、興味深いポイントのマークを見ることができます。

00:56:58.000 --> 00:57:07.000
そして、これは私にはるかに詳細を与える完全なビデオ録画であり、テストが失敗する前に何が起こったのかを正確に示しています。

00:57:07.000 --> 00:57:10.000
何が起こったのかを見るために再生します。

00:57:10.000 --> 00:57:14.000
ここでは、テストは鳥に餌をやるための食べ物を選択しています。

00:57:14.000 --> 00:57:22.000
鳥は飛び回り始め、私の行動が完了する前に消え、それが私のテストが失敗した原因です。

00:57:22.000 --> 00:57:32.000
タイムラインとビデオ録画を備えたこの新しいテストの詳細により、アニメーション、ジェスチャー、その他のUIエクスペリエンスのテストのレビューがはるかに高速になります。

00:57:32.000 --> 00:57:41.000
そして、ビデオ以上のものが必要なときは、アクセシビリティフレームも見ることができ、自分の見解についてさらに多くの洞察を得ることができます。

00:57:41.000 --> 00:57:51.000
すべてを組み合わせることで、新しいレポートエクスペリエンスは、深い洞察、より細かい詳細、およびテストを最大限に活用するためのより多くの相互作用を提供します。

00:57:51.000 --> 00:57:54.000
また、XcodeとXcode Cloudでシームレスに動作します。

00:57:54.000 --> 00:58:03.000
Xcode Cloudは、すべてのAppleプラットフォームでアプリを構築、テスト、共有するのに役立つ継続的な統合および配信サービスです。

00:58:03.000 --> 00:58:10.000
Xcodeに深く統合されており、1か所に集中することで時間を節約できます。

00:58:10.000 --> 00:58:17.000
Appleのクラウドインフラストラクチャを活用して、ビルド、テスト、さらには配布用のコード署名をオフロードします。

00:58:17.000 --> 00:58:21.000
TestFlightやApp Store ConnectなどのAppleサービスに接続します。

00:58:21.000 --> 00:58:26.000
そして、それはあなたとあなたのプロジェクトを保護するために高度なセキュリティで構築されています。

00:58:26.000 --> 00:58:32.000
昨年、Apple Developer ProgramのすべてのメンバーがXcode Cloudを利用できるようにしました。

00:58:32.000 --> 00:58:39.000
何万ものチームがXcodeから直接プロジェクトをオンボーディングし、フィードバックは素晴らしかったです!

00:58:39.000 --> 00:58:44.000
そして、私たちはXcode Cloudをさらに良くし続けています。

00:58:44.000 --> 00:58:47.000
私たちはパフォーマンスを本当に気にかけています。

00:58:47.000 --> 00:58:53.000
昨年から、私たちは多額の投資をしてきたので、計算時間でさらに多くのことができます。

00:58:53.000 --> 00:58:57.000
また、あなたの最も重要なリクエストも追加しました。

00:58:57.000 --> 00:59:06.000
TestFlightに配布するときに、テスターノートを作成して共有できるようになり、すべてのユーザーが最新の改善を最新の状態に保つことができます。

00:59:06.000 --> 00:59:18.000
Xcode Cloudは、DeveloperIDで配布するときにmacOSの公証もサポートしているため、ユーザーと共有する前に、悪意のあるコンポーネントがないかアプリを自動的にチェックできます。

00:59:18.000 --> 00:59:27.000
ワークフローを設定するのにわずか数分で、数時間の計算時間を利用してアプリを構築、テスト、展開できます。

00:59:27.000 --> 00:59:35.000
私たちは、Xcode Cloudをより速く、より安全に、より柔軟にし続けているので、Xcode Cloudの未来に興奮しています。

00:59:35.000 --> 00:59:44.000
昨年、Appleシリコンのマルチコアアーキテクチャ用にコンパイラを最適化し、すべてのビルドをより速く、よりスケーラブルにしました。

00:59:44.000 --> 00:59:51.000
リンカーはゼロから再設計され、リンク速度が大幅に向上しました。

00:59:51.000 --> 00:59:54.000
リンクは最大5倍高速です!

00:59:54.000 --> 00:59:59.000
新しいリンカーはまた、デバッグバイナリのサイズを最大30%削減します。

00:59:59.000 --> 01:00:09.000
また、多くのフレームワークを埋め込むアプリには、開発中にビルドを高速化し、アプリのサイズを短縮し、本番用の起動時間を短縮する新しいフレームワークタイプがあります。

01:00:09.000 --> 01:00:15.000
最後に、私たちはXcodeをより速く、より簡単に始めることを続けています。

01:00:15.000 --> 01:00:21.000
Mac App Storeでは、Xcodeは50%小さくなり、すべてのシミュレータはオンデマンドでダウンロードできます。

01:00:21.000 --> 01:00:27.000
つまり、すぐに始めて、必要なプラットフォームを適切なタイミングでインストールできるということです。

01:00:27.000 --> 01:00:30.000
そして今、ダーリンに戻ります。

01:00:30.000 --> 01:00:38.000
Darin: すべてが連携する言語、フレームワーク、ツール、サービスを構築するという私たちのユニークなアプローチは、新しいプラットフォームを導入すると、本当に生き生きとしています。

01:00:38.000 --> 01:00:45.000
共有基盤の使用は、個々の強みを輝かせながら、プラットフォームを身近に見せるのに役立ちます。

01:00:45.000 --> 01:00:52.000
visionOSは、私たちが長年プラットフォームで行ってきた投資を活用し、このアプローチの利点を紹介しています。

01:00:52.000 --> 01:00:56.000
それについてすべてお話しするマイクです。

01:00:56.000 --> 01:01:02.000
マイク・ロックウェル：Apple Vision Proの発売は、空間コンピューティングにおける共同の旅の始まりです。

01:01:02.000 --> 01:01:12.000
あなたは今、あなたが可能であると以前に理解していたものを超えてプッシュし、つながり、生産的で、楽しまれることの意味を再考することができます。

01:01:12.000 --> 01:01:15.000
Vision Proには多くの画期的な技術があります。

01:01:15.000 --> 01:01:22.000
アプリは新しい要素を利用してユーザーのスペースと対話し、部屋とシームレスに溶け込みます。

01:01:22.000 --> 01:01:32.000
これはすべて、あなたがすでに知っている強力な技術を使用して可能です：SwiftUI、RealityKit、ARKit - 現在はvisionOS用に拡張されています。

01:01:32.000 --> 01:01:43.000
この強固な基盤と更新された開発者ツールセットで、あなたはApple Vision Proのためのアプリの全く新しい宇宙を作成するために家にいるように感じるでしょう。

01:01:43.000 --> 01:01:53.000
今日は、基本的な構成要素から重要なフレームワーク、ツール、テクノロジーまで、visionOSを使い始めるために必要なすべてを取り上げます。

01:01:53.000 --> 01:02:08.000
Vision Proでアプリに命を吹き込むのをサポートするために、私たちが開始しているアクティビティやプログラムについて学びます。Vision Proの無限のキャンバスを利用するアプリ、または部屋を没入型メディア環境に変えるアプリ。

01:02:08.000 --> 01:02:11.000
では、袖をまくりましょう。

01:02:11.000 --> 01:02:16.000
Vision Proでは、アプリ体験に何が可能かを再考できます。

01:02:16.000 --> 01:02:24.000
構築しているアプリの種類に関係なく、ユーザーのスペースで3Dでどのように存在するかを理解する必要があります。

01:02:24.000 --> 01:02:28.000
これは、開発者として下す決定を知らせます。

01:02:28.000 --> 01:02:39.000
その理解は、Vision Proの機能を活用し、これまで不可能だった方法でアプリに焦点と没入感をもたらすのに役立ちます。

01:02:39.000 --> 01:02:43.000
デフォルトでは、アプリは共有スペースに起動します。

01:02:43.000 --> 01:02:50.000
共有スペースは、Macデスクトップ上の複数のアプリのように、アプリが並んで存在する場所です。

01:02:50.000 --> 01:02:55.000
ユーザーは、好きな場所にアプリを再配置するための完全な代理店を持っています。

01:02:55.000 --> 01:03:01.000
おなじみのウィンドウから始めて、スペース内で使用できる要素について話しましょう。

01:03:01.000 --> 01:03:11.000
visionOSでは、アプリはSwiftUIシーンである1つ以上のウィンドウを開き、宇宙の飛行機として期待どおりに動作することができます。

01:03:11.000 --> 01:03:22.000
従来のビューとコントロールを含めることができ、3DオブジェクトやRealityViewsもサポートし、3Dコンテンツを2Dコンテンツと並べることができます。

01:03:22.000 --> 01:03:33.000
さらに、アプリはSwiftUIシーンでもある3次元ボリュームを作成し、ゲームボードや地球儀などの3Dオブジェクトを展示することができます。

01:03:33.000 --> 01:03:37.000
ボリュームはこの空間を移動し、あらゆる角度から見ることができます。

01:03:37.000 --> 01:03:46.000
場合によっては、ユーザーがビデオを見たり、ゲームをプレイしたり、プレゼンテーションをリハーサルしたりするために、アプリの没入レベルをより詳細に制御したい場合があります。

01:03:46.000 --> 01:03:57.000
これを行うには、アプリ、ウィンドウ、ボリューム、3Dオブジェクトのみがユーザーのビュー全体に表示される専用のフルスペースを開くことができます。

01:03:57.000 --> 01:04:04.000
したがって、これらは空間コンピューティングの基本的な要素であるウィンドウ、ボリューム、スペースです。

01:04:04.000 --> 01:04:09.000
彼らは、没入の連続にまたがることができるアプリを構築するための柔軟なツールセットを提供します。

01:04:09.000 --> 01:04:14.000
さて、アプリの構築を開始する方法について詳しくお伝えするために、これがジェフです。

01:04:14.000 --> 01:04:18.000
Geoff Stahl: Vision Proは、いくつかの異なる種類のアプリをサポートしています。

01:04:18.000 --> 01:04:26.000
既存のiPadとiPhoneアプリは、それぞれがオリジナルのルックアンドフィールを持つ単一のスケーラブルな2Dウィンドウとしてサポートされています。

01:04:26.000 --> 01:04:29.000
しかし、それは可能なことの始まりにすぎません。

01:04:29.000 --> 01:04:37.000
その中核として、visionOSはiPadOSやiOSに似ており、同じ基礎フレームワークの多くが含まれています。

01:04:37.000 --> 01:04:51.000
SwiftUIとUIKitを使用してユーザーインターフェイスを構築し、RealityKitを使用して3Dコンテンツ、アニメーション、視覚効果を提示し、ARKitを使用してユーザーの周りのスペースを理解します。

01:04:51.000 --> 01:04:54.000
これらはすべてvisionOS SDKの一部です。

01:04:54.000 --> 01:04:58.000
では、アプリをVision Proに持ち込むには何が必要ですか?

01:04:58.000 --> 01:05:03.000
まず、Xcodeで、visionOSの宛先をプロジェクトに追加します。

01:05:03.000 --> 01:05:11.000
今、あなたが再構築するとき、あなたのアプリは自動的にいくつかの本当にクールな改善を得ます。

01:05:11.000 --> 01:05:22.000
visionOSのルックアンドフィールを備えた素材、目と手の入力用に調整された間隔を備えた完全にサイズ変更可能なウィンドウ、カスタムコントロールのハイライト調整へのアクセス。

01:05:22.000 --> 01:05:29.000
次に、visionOS固有のコードを追加して、アプリをウィンドウ、ボリューム、またはスペースのコレクションに展開できます。

01:05:29.000 --> 01:05:37.000
ここから、SwiftUI、RealityKit、ARKitの拡張機能を活用し始めることができます。

01:05:37.000 --> 01:05:40.000
これがエンリカで、その方法を教えてくれます。

01:05:40.000 --> 01:05:46.000
Enrica Casucci：visionOSでは、多くのフレームワークが空間体験をサポートするために拡張されています。

01:05:46.000 --> 01:05:53.000
SwiftUIを使用すると、深度を追加したり、ウィンドウ内に3Dオブジェクトを追加したりできるようになりました。

01:05:53.000 --> 01:05:58.000
iOSとMacOSでは、ZStackは通常、ビューの階層化に使用されます。

01:05:58.000 --> 01:06:02.000
visionOSはさらに進んで、それらを深く分離することができます。

01:06:02.000 --> 01:06:07.000
これにより、2次元のアプリに3次元の感触を与えます。

01:06:07.000 --> 01:06:15.000
新しいz-offsetビュー修飾子を使用して、UI要素に微妙な変更を深く追加できます。

01:06:15.000 --> 01:06:20.000
より高いオフセット値は、より低い値を持つビューの前にビューを表示します。

01:06:20.000 --> 01:06:30.000
また、これを使用して、選択の詳細を表示する場合など、強調を表示したり、モダリティの変更を表示したりできます。

01:06:30.000 --> 01:06:36.000
また、追加のビュー修飾子を使用すると、幅、高さ、深さをより細かく制御できます。

01:06:36.000 --> 01:06:41.000
Vision Proでは、ジェスチャーでさえ追加のスペースを認識しています。

01:06:41.000 --> 01:06:45.000
私たちは皆、画面の周りにオブジェクトをドラッグすることに慣れています。

01:06:45.000 --> 01:06:52.000
これで、人々は物理的な空間のどこにでも物体を移動または回転させることができます。

01:06:52.000 --> 01:06:55.000
SwiftUIでボリュームを作成することもできます。

01:06:55.000 --> 01:07:05.000
アプリウィンドウの横に存在することができ、共有スペースで実行しているときは、他のアプリと並んで座っています。

01:07:05.000 --> 01:07:16.000
また、SwiftUIウィンドウとボリュームはフルスペース内にあり、3DオブジェクトとSwiftUI要素をユーザーの部屋のどこにでも配置できます。

01:07:16.000 --> 01:07:27.000
SwiftUIは、アプリをvisionOSにすばやく簡単に取り込むことができるだけでなく、完全に没入型の体験をレンダリングすることもできます。

01:07:27.000 --> 01:07:35.000
そして、SwiftUIはRealityKitを介してレンダリングされるようになったので、SwiftUIとRealityKit APIを簡単に組み合わせることができます。

01:07:35.000 --> 01:07:42.000
オーナメント、マテリアル、ホバーエフェクトなどのUI強化を利用できます。

01:07:42.000 --> 01:07:48.000
オーナメントを使用すると、ウィンドウやボリュームの端にUIコンポーネントを貼り付けることができます。

01:07:48.000 --> 01:07:51.000
ツールバーやメニューなどに最適です。

01:07:51.000 --> 01:07:57.000
ホバー効果は、ユーザーがどこを見ているかに応じてUI要素を強調表示します。

01:07:57.000 --> 01:08:07.000
システムコントロールは自動的にこれらの効果を得ますが、カスタムコントロールがハイライトを表示するかグローを表示するかを決定するオプションがあります。

01:08:07.000 --> 01:08:11.000
そして、材料はユーザーの周りの世界に適応します。

01:08:11.000 --> 01:08:18.000
ダイナミックなぼかしと活気は、条件に関係なく、アプリを読みやすくします。

01:08:18.000 --> 01:08:26.000
他のプラットフォームと同様に、SwiftUIを使用してvisionOSアプリを構築することをお勧めします。

01:08:26.000 --> 01:08:38.000
UIKitで構築された既存のアプリは、visionOS用に再コンパイルすることもでき、装飾品、ホバーエフェクト、素材、ネイティブのルックアンドフィールにアクセスできます。

01:08:38.000 --> 01:08:45.000
SwiftUIは、visionOSで空間体験を構築するために使用するフレームワークの1つにすぎません。

01:08:45.000 --> 01:08:51.000
エドウィンは、あなたの旅に役立つさらにいくつかを案内します。

01:08:51.000 --> 01:09:04.000
エドウィン・イスカンダー：ダイナミックな3Dモデル、アニメーション、視覚効果の完全なシーンでアプリを拡張する準備ができたら、空間体験をレンダリングするためにゼロから構築されたAppleの3DレンダリングエンジンであるRealityKitを使用することをお勧めします。

01:09:04.000 --> 01:09:09.000
2019年にRealityKitとSwiftUIを独立したフレームワークとして一緒に導入しました。

01:09:09.000 --> 01:09:16.000
Apple Vision Proでは、それらは深く統合されているため、シャープで応答性が高く、体積のインターフェースを構築できます。

01:09:16.000 --> 01:09:23.000
3Dコンテンツは、SwiftUIのビューと状態にバインドし、2Dと3Dのビジュアル要素をシームレスに結合できます。

01:09:23.000 --> 01:09:31.000
RealityKitは物理的な照明条件に自動的に調整し、床やテーブルに影を落とすことで現実の体験を根拠にします。

01:09:31.000 --> 01:09:36.000
これにより、アプリが部屋に属しているように見えます。

01:09:36.000 --> 01:09:52.000
RealityKitには、Keynoteで見た恐竜のような3Dシーンにポータルを作成して、信じられないほどシャープなテキストをレンダリングして快適に読むことができる機能や、見事な視覚効果を作成するためのカスタマイズ可能な素材システムなど、重要な新機能もあります。

01:09:52.000 --> 01:10:00.000
さらに、Dynamic foveationと呼ばれる技術を使用して、Apple Vision Proでレンダリングがさらに効率的になります。

01:10:00.000 --> 01:10:13.000
RealityKitは、アイトラッキングを活用して、ユーザーが焦点を当てている領域を非常に高い忠実度で選択的にレンダリングし、周辺部のコンテンツのレンダリングコストを削減し、アプリがデバイスの処理能力を最大化できるようにします。

01:10:13.000 --> 01:10:23.000
RealityKitは、反射や金属などの物理的性質を指定できるようにすることで、3Dモデルを見事なフォトリアリスティックな結果をレンダリングします。

01:10:23.000 --> 01:10:30.000
デフォルトでは、RealityKitは仮想コンテンツをレンダリングするので、その照明は物理的な部屋の照明条件に接続されます。

01:10:30.000 --> 01:10:40.000
クリエイティブな意図に基づいてリアリズムをカスタマイズまたは拡張したい場合は、画像ベースの照明アセット（IBL）を提供して、外観を個別化できます。

01:10:40.000 --> 01:10:53.000
素材をオーサリングするために、RealityKitは、主要な映画、視覚効果、エンターテイメント、ゲーム会社で使用される表面とジオメトリシェーダーを指定するためのオープンスタンダードであるMaterialXを採用しています。

01:10:53.000 --> 01:11:00.000
さまざまな業界をリードする作成ツールにわたるMaterialXの幅広いサポートにより、シェーダーの作成がはるかに簡単になります。

01:11:00.000 --> 01:11:09.000
MaterialXを使用すると、シェーディング特性を定義することで、個々の材料の外観を設計および迅速に反復できます。

01:11:09.000 --> 01:11:18.000
選択できる資料のリポジトリと、独自のカスタムシェーダーを作成するために使用できるHoudiniやMayaなどの便利なツールがあります。

01:11:18.000 --> 01:11:22.000
RealityKitは、RealityViewと呼ばれる新しいSwiftUIビューを提供します。

01:11:22.000 --> 01:11:30.000
RealityViewは、ウィンドウ、ボリューム、スペース内で使用でき、コントロールするシーン内の任意の場所に3Dコンテンツを配置できます。

01:11:30.000 --> 01:11:36.000
また、3Dコンテンツに2D SwiftUIビューを埋め込むことができる添付ファイルもサポートしています。

01:11:36.000 --> 01:11:45.000
SwiftUIとRealityKitと並んで、3番目の強力なフレームワークにより、ユーザーの周囲、ARKitを最大限に活用することができます。

01:11:45.000 --> 01:11:55.000
ARKitはユーザーの周りのスペースを理解し、床から跳ね返るボールであろうと、壁に飛び散る水であろうと、アプリのコンテンツが部屋と対話できるようにします。

01:11:55.000 --> 01:12:02.000
ARKitは、多くのコアシステム機能を強化するvisionOS上のリアルタイムアルゴリズムをホストしています。

01:12:02.000 --> 01:12:10.000
これらのアルゴリズムは常に実行されています。つまり、アプリはどのように構築されても、共有スペースのARKitから自動的に恩恵を受けます。

01:12:10.000 --> 01:12:13.000
永続性と世界マッピングはシステムによって処理されます。

01:12:13.000 --> 01:12:19.000
セグメンテーション、マット、環境照明は、空間全体に自動的に適用されます。

01:12:19.000 --> 01:12:25.000
また、ユーザーの許可を得て、ARKitの機能はフルスペースアプリで直接利用できるようにすることができます。

01:12:25.000 --> 01:12:40.000
フルスペース内では、iOSのARKitと同じアンカーコンセプトを使用するARKitの平面推定、シーン再構築、画像アンカー、ワールドトラッキングを活用することで、アプリが部屋と現実的に対話できます。

01:12:40.000 --> 01:12:45.000
これにより、既存のARKitアプリをvisionOSに簡単に移行できます。

01:12:45.000 --> 01:12:50.000
また、visionOSでは、Skeletal Hand Trackingにもアクセスできるようになりました。

01:12:50.000 --> 01:12:57.000
ハンドトラッキングを使用して、アプリ体験のためのカスタムジェスチャーを作成したり、デジタル情報でユーザーの手を増強したりすることもできます。

01:12:57.000 --> 01:13:04.000
ARKitは、iOSで導入されたのと同じ骨格モデルで関節の位置と向きを提供します。

01:13:04.000 --> 01:13:14.000
SwiftUI、RealityKit、ARKitにまたがる統合アプローチにより、長年にわたってAppleプラットフォームに投入してきた学習と投資を活用することができます。

01:13:14.000 --> 01:13:20.000
これには、アプリをアクセシブルにするための努力も含まれます。

01:13:20.000 --> 01:13:26.000
空間コンピューティングはアクセシビリティのための大きな新しい機会を開くので、これは特に意味があります。

01:13:26.000 --> 01:13:37.000
Apple Vision Proでは、身体障害や運動障害を持つユーザーは、目や声、またはその両方の組み合わせでデバイスを完全に操作できます。

01:13:37.000 --> 01:13:44.000
ユーザーは、Vision Proをナビゲートするための代替ポインタとして、人差し指、手首、または頭で選択することもできます。

01:13:44.000 --> 01:13:50.000
他のプラットフォームで長年使用してきたのと同じテクニックで、visionOSでアプリにアクセスできるようにします。

01:13:50.000 --> 01:13:59.000
アクセシビリティインスペクタは、visionOSアプリのアクセシビリティの問題を分析して報告し、それらをよりアクセスしやすくする方法を提案します。

01:13:59.000 --> 01:14:07.000
また、フレームワークに組み込まれたアクセシビリティサポートにより、VisionOSアプリや体験を障害のあるユーザーに簡単に提供できます。

01:14:07.000 --> 01:14:18.000
たとえば、VoiceOverは、オブジェクトの物理的な外観などの情報を伝えるラベルや説明を追加することで、盲目または弱視のユーザーにアプリ内のオブジェクトを記述するのに役立ちます。

01:14:18.000 --> 01:14:32.000
また、より大きなテキストサイズのダイナミックタイプ、読みやすさの向上のための透明性の低下、ヘッドロックされたコンテンツに代わるものなど、デザインによってアプリをよりアクセスしやすくするためにユーザー設定を組み込むこともできます。

01:14:32.000 --> 01:14:41.000
これらの使い慣れたAPIとツールを利用することで、あなたのアプリは世界中のユーザーが空間コンピューティングにアクセスできるようにする上で大きな役割を果たします。

01:14:41.000 --> 01:14:46.000
それは素晴らしいvisionOSアプリを構築するために使用できる強力なフレームワークの紹介です。

01:14:46.000 --> 01:14:50.000
さて、あなたが利用できるすべてのツールについて話すためのテッサです。

01:14:50.000 --> 01:14:55.000
Thessa Buscar-Alegria：Vision Pro用のアプリの構築を開始すると、フレームワーク以上のものを認識できます。

01:14:55.000 --> 01:15:00.000
当社の開発者ツールもvisionOSをサポートするように更新されました。

01:15:00.000 --> 01:15:06.000
他のすべてのプラットフォームと同様に、XcodeはVision Proの開発経験の中心にあります。

01:15:06.000 --> 01:15:17.000
既存のプロジェクトにvisionOSの宛先を追加したり、このプラットフォームのユニークな機能に特化したまったく新しいアプリを構築したりできます。

01:15:17.000 --> 01:15:24.000
アプリを構築するための最初のステップは、2Dコンテンツと3Dコンテンツの両方で正しい外観を得ることです。

01:15:24.000 --> 01:15:30.000
Xcodeプレビューを使用すると、エディタを離れることなく、外観をすばやく反復できます。

01:15:30.000 --> 01:15:39.000
アプリ全体のテストを開始する時間になったら、アプリを実行してデバッグするための強力な環境を提供するシミュレーターに移動できます。

01:15:39.000 --> 01:15:45.000
キーボード、トラックパッド、または互換性のあるゲームコントローラーを使用して、シーンを移動して見回すことができます。

01:15:45.000 --> 01:15:50.000
また、システムのジェスチャーをシミュレートすることで、アプリと対話することができます。

01:15:50.000 --> 01:15:58.000
シミュレータはまた、昼と夜の照明条件で3つの異なるシミュレートされたシーンを提供し、アプリを視覚化するのに役立ちます。

01:15:58.000 --> 01:16:05.000
Vision Proでの開発に関しては、デバイス上でアプリを構築して実行し、動作していることを確認します。

01:16:05.000 --> 01:16:10.000
あなたの働き方を変えるこの追加機能を共有することにとても興奮しています。

01:16:10.000 --> 01:16:20.000
Macバーチャルディスプレイを使用すると、Macの忠実度の高い4K仮想モニターをVision Proに持ち込むことができます。

01:16:20.000 --> 01:16:26.000
デバイス内からMacの全機能を使用でき、それにはXcodeも含まれます。

01:16:26.000 --> 01:16:40.000
これは信じられないほどのエンドツーエンドの開発経験です。中断やコンテキストの損失なしに、Vision Proでアプリをコーディング、テスト、デバッグします。

01:16:40.000 --> 01:16:46.000
時には、アプリのコンテンツが現実世界とどのように関連しているかの詳細を掘り下げる必要があります。

01:16:46.000 --> 01:16:54.000
アプリがユーザーの部屋と対話すると、3Dコンテンツが壁を視覚的に切り取るなど、独自の課題を提示する可能性があります。

01:16:54.000 --> 01:17:04.000
Xcodeは、3Dコンテンツに関連する衝突、オクルージョン、シーンの理解を探るのに役立つ実用的なデバッグビジュアライゼーションを備えています。

01:17:04.000 --> 01:17:09.000
これらのビジュアライゼーションは、シミュレータとVision Proの両方で機能します。

01:17:09.000 --> 01:17:19.000
visionOSアプリを進化させるにつれて、それらはより空間的になり、フラットウィンドウの境界を突破し、かつてないほどユーザーに3D体験をもたらします。

01:17:19.000 --> 01:17:23.000
これを正しく行うには、新しいビジュアルツールが必要です。

01:17:23.000 --> 01:17:27.000
それが私たちがReality Composer Proを作った理由です。

01:17:27.000 --> 01:17:35.000
Reality Composer Proは、visionOSアプリの3Dコンテンツをプレビューして準備できるアプリケーションです。

01:17:35.000 --> 01:17:41.000
3Dモデル、アニメーション、画像、サウンドなどのアセットをインポートして整理できます。

01:17:41.000 --> 01:17:48.000
Xcodeのビルドプロセスと緊密に統合され、Vision Proで使用するためにアセットを最適化します。

01:17:48.000 --> 01:17:54.000
コンテンツをVision Proに簡単に送信して、プレビュー、サイズ変更、回転できます。

01:17:54.000 --> 01:18:01.000
いつでも新しい変更をプッシュし、コードを入力する前にコンテンツがどのように見えるかを確認してください。

01:18:01.000 --> 01:18:03.000
ジェイソンがツアーをご案内します。

01:18:03.000 --> 01:18:08.000
ジェイソン・ケーヒル：太陽系を通り抜けるサンプルプロジェクトの1つに取り組んでいます。

01:18:08.000 --> 01:18:18.000
3Dコンテンツが素晴らしいVision Proに見えることを確認したいので、Reality Composer Proを使って今すぐ更新します。

01:18:18.000 --> 01:18:24.000
3Dモデリングアプリケーションで作成した衛星モデルと画像をインポートすることから始めます。

01:18:24.000 --> 01:18:29.000
このモデルには多くの詳細がありますが、現在材料はありません。

01:18:29.000 --> 01:18:37.000
Reality Composer Proでカスタムマテリアルを作成し、それをカスタマイズできるシェーダーグラフにジャンプします。

01:18:37.000 --> 01:18:45.000
シンプルな画像や機能ノードを追加して、コードに入ることなく、オブジェクトの外観を変更するのは簡単で楽しいです。

01:18:45.000 --> 01:18:53.000
あなたは物事を試してすぐに結果を見ることができ、ハンドタイプのシェーダーからコンパイラエラーが発生することはありません。

01:18:53.000 --> 01:18:55.000
他のノードでもこれを繰り返します。

01:18:55.000 --> 01:19:01.000
いつでも、Vision Proで自分の作品をプレビューできます。

01:19:01.000 --> 01:19:10.000
私はそれを拡大縮小したり、動かしたり、回転させたりして、それが私が望むように見え、感じることを確認することができます。

01:19:10.000 --> 01:19:12.000
私はこれらの変化が好きです。

01:19:12.000 --> 01:19:22.000
そして、Xcodeに戻り、私の変更がプロジェクトに反映され、Xcodeプレビューまたはシミュレータで使用する準備ができています。

01:19:22.000 --> 01:19:27.000
そのように、私はコードをロードし、私のアプリで使用する準備ができています!

01:19:27.000 --> 01:19:42.000
Reality Composer Proを使用すると、visionOS開発プロセスには、Xcodeと並んで動作する強力な新しいツールがあり、3Dコンテンツのプレビューと準備がコードの構築と実行と同じくらい簡単になります。

01:19:42.000 --> 01:19:48.000
Thessa: アプリをベータテストする準備ができたら、TestFlightは最初からVision Proで使用できるようになります。

01:19:48.000 --> 01:20:01.000
App Store Connect、Xcode、またはXcode Cloudを通じて期待どおりに新しいビルドをTestFlightに提出すると、テスターはそれらをインストールし、ネイティブのTestFlightアプリから直接貴重なフィードバックを提供できます。

01:20:01.000 --> 01:20:07.000
また、Vision Proで互換性のあるiPadとiPhoneアプリのベータビルドにアクセスすることもできます。

01:20:07.000 --> 01:20:19.000
XcodeからTestFlight、そしてReality Composer Proまで、この開発ツールとサービスのファミリーで、Vision Pro用の素晴らしいアプリを作るのにうまくいきます。

01:20:19.000 --> 01:20:22.000
そして今、マイクに戻ります。

01:20:22.000 --> 01:20:26.000
マイク：あなたの多くは、Unityで3Dアプリやゲームを構築するために何年も投資してきました。

01:20:26.000 --> 01:20:40.000
アプリをVision Proに簡単に持ち込むために、AppleとUnityは深く協力して、UnityのリアルタイムエンジンをRealityKitの上に重ね、開発ツールをvisionOSをターゲットにできるようにしてきました。

01:20:40.000 --> 01:20:52.000
これは、Unityが作成したアプリが共有スペース内の他のvisionOSアプリと共存し、Apple Vision Proのユニークな利点を最大限に活用できることを意味します。

01:20:52.000 --> 01:20:55.000
もっと詳しくお伝えするために、UnityのRalphを紹介したいと思います。

01:20:55.000 --> 01:20:57.000
ラルフ・ハウワート:ありがとう、マイク。

01:20:57.000 --> 01:21:03.000
VisionOSの深い統合でAppleと協力するのは本当にエキサイティングでした。

01:21:03.000 --> 01:21:09.000
これで、Unityの堅牢で使い慣れたオーサリングツールを使用して、新しいvisionOSゲームやアプリを作成できます。

01:21:09.000 --> 01:21:17.000
また、既存のUnityが作成したプロジェクトをVision Proに持ち込んで、この新しいプラットフォームの体験を再考することができます。

01:21:17.000 --> 01:21:30.000
アプリは、AR Foundationのような使い慣れたUnity機能に加えて、高解像度のパススルーやDynamic Foveated Renderingなど、visionOSのすべての利点にアクセスできます。

01:21:30.000 --> 01:21:39.000
また、UnityとvisionOSの間のこの深い統合により、アプリは共有スペースの他のアプリと一緒に表示することもできます。

01:21:39.000 --> 01:21:50.000
Unityのオーサリングとシミュレーション機能とRealityKitのマネージドアプリレンダリングを組み合わせることで、Unityで作成されたコンテンツはvisionOSでくつろいでいます。

01:21:50.000 --> 01:21:58.000
Unityを使用すると、コミュニティ、チュートリアル、テンプレートをすばやく始めることができます。

01:21:58.000 --> 01:22:08.000
私たちは、Apple Vision Proが空間コンピューティングの新しいフロンティアを立ち上げたと信じており、あなたが作成する真新しいアプリやゲームを見ることに本当に興奮しています。

01:22:08.000 --> 01:22:09.000
マイク:どうもありがとう、ラルフ。

01:22:09.000 --> 01:22:12.000
あなたと一緒に仕事をするのは素晴らしかったです。

01:22:12.000 --> 01:22:18.000
visionOSには、次のステップを計画する際に知っておくべき基本的な機能がいくつかあります。

01:22:18.000 --> 01:22:21.000
ジェフが詳細をお伝えします。

01:22:21.000 --> 01:22:31.000
ジェフ・ノリス：Vision Pro用のアプリを作成するために使用するフレームワークは、プラットフォームの強力なハードウェアとソフトウェアを最小限の労力で活用できるようにし、ユーザーのプライバシーを保護するという2つの目標を念頭に置いて設計されました。

01:22:31.000 --> 01:22:41.000
アプリが周囲に溶け込む方法から、自然なユーザーインタラクション、コラボレーションの新しい可能性まで、これらの原則がシステム全体で機能しているのを見ることができます。

01:22:41.000 --> 01:22:47.000
visionOSは、リアルな照明と影を可能にするために、ユーザーの周囲の3Dモデルを構築します。

01:22:47.000 --> 01:22:53.000
その結果、アプリはカメラデータへのアクセスを必要とせずに、周囲の世界と自然に溶け込むことができます。

01:22:53.000 --> 01:22:59.000
visionOSは、同じ3Dモデルを使用して、アプリに次世代の空間オーディオを有効にします。

01:22:59.000 --> 01:23:06.000
現実の世界では、音は空間の中や周囲に響き渡り、人の耳に着く前に壁や家具から跳ね返る。

01:23:06.000 --> 01:23:09.000
アプリの仮想サウンドも同じように動作するはずです。

01:23:09.000 --> 01:23:13.000
これには、ユーザーの周囲を高度に理解する必要があります。

01:23:13.000 --> 01:23:24.000
visionOSのPHASE空間オーディオエンジンは、音響センシングと3Dシーンの理解を融合させ、空間の音響特性の詳細なモデルを作成します。

01:23:24.000 --> 01:23:31.000
音源とユーザーが環境内を移動するにつれて、PHASEはオーディオレイトレースシミュレーションをリアルタイムで更新します。

01:23:31.000 --> 01:23:40.000
このモデルは、Appleのパーソナライズされた空間オーディオ技術と組み合わせることで、各個人とその環境に合わせて体験を自動的に調整します。

01:23:40.000 --> 01:23:46.000
この信じられないほどの複雑さはすべてあなたのために管理されており、ユーザーの物理的なスペースの詳細にアクセスする必要はありません。

01:23:46.000 --> 01:23:53.000
RealityKitを使用すると、音がどこから来たいかを決めるだけで、visionOSはそれらを現実の世界に自然にミックスします。

01:23:53.000 --> 01:24:03.000
アプリのリアルな照明とオーディオに電力を供給するアルゴリズムと同様に、visionOSのユーザー入力は自動的に機能し、設計上プライベートです。

01:24:03.000 --> 01:24:09.000
ホバー効果は、SwiftUIまたはRealityKitを使用して構築されたUI要素に対して自動的にレンダリングされます。

01:24:09.000 --> 01:24:13.000
ユーザーがボタンを見ると、タップする前に強調表示されます。

01:24:13.000 --> 01:24:20.000
そして、マウスのクリックやiPhoneのタップのように、ユーザーが指をタップすると、アプリに選択が通知されます。

01:24:20.000 --> 01:24:28.000
ユーザーは必要な視覚的なフィードバックを受け取り、ユーザーがタップする前にどこを見ているかを知ることなく、期待するインタラクションを受け取ります。

01:24:28.000 --> 01:24:33.000
共有とコラボレーションは、Vision Proエクスペリエンスの中心的な部分です。

01:24:33.000 --> 01:24:39.000
macOSと同様に、Vision ProユーザーはFaceTime通話でアプリウィンドウを他の人と共有できます。

01:24:39.000 --> 01:24:43.000
そして、SharePlayを使用すると、次世代の共有体験が可能になります。

01:24:43.000 --> 01:24:52.000
アプリがGroupActivities APIでSharePlayを採用すると、各ウィンドウの共有コントロールは、通話中のすべての人のためにアプリを起動するオプションを追加します。

01:24:52.000 --> 01:24:57.000
これにより、彼らはリアルタイムで一緒に真に共有された経験に参加することができます。

01:24:57.000 --> 01:25:02.000
他のプラットフォームでのSharePlayと同じように、アプリを共同で使用する方法を決定します。

01:25:02.000 --> 01:25:15.000
FaceTime通話のVision Proユーザーは、顔と手の動きに動的に一致する高度な機械学習技術で作成された自然な表現であるペルソナとして他の参加者に表示されます。

01:25:15.000 --> 01:25:20.000
ペルソナは、3次元のボリュームと深さを持つ他のVision Proユーザーに現れます。

01:25:20.000 --> 01:25:28.000
しかし、私たちはVision ProでFaceTimeを次のレベルに引き上げ、実際に一緒に部屋にいるようにどこでもユーザーが対話できるようにしたいと考えています。

01:25:28.000 --> 01:25:34.000
この経験はまだ初期段階にあり、ここで初めてあなたと共有できることに興奮しています。

01:25:34.000 --> 01:25:43.000
空間ペルソナにより、Vision ProユーザーはおなじみのFaceTimeタイルから抜け出し、同じ物理的な空間に集まっているように、より存在感を感じることができます。

01:25:43.000 --> 01:25:49.000
visionOSは、ユーザーとアプリが共有され、一貫性のある空間コンテキストを持つことを保証します。

01:25:49.000 --> 01:25:52.000
あなたのアプリは、SharePlayでこの新しいコンテキストを利用することができます。

01:25:52.000 --> 01:26:04.000
これで、ユーザー間でアプリの変更を同期させるだけでなく、ユーザーの物理的な行動に対応できるため、フリーフォームボードに一緒に立ったり、卓上ゲームでピースを動かしたりするのが自然な感じがします。

01:26:04.000 --> 01:26:11.000
私たちはあなたのアプリがこの信じられないほどの新しい経験の一部になることを望んでおり、あなたのフィードバックは発展し続けるにつれて重要になります。

01:26:11.000 --> 01:26:16.000
そのため、今年後半にSpatial Personasの開発者プレビューを利用できるようにします。

01:26:16.000 --> 01:26:22.000
これらは、visionOSで活用できる豊富で広範なテクノロジーのほんの一例です。

01:26:22.000 --> 01:26:26.000
さて、リンダは、あなたがここからどこに行くかについて話します。

01:26:26.000 --> 01:26:32.000
リンダ・ドン：Apple Vision ProとvisionOSを紹介したので、次は何ですか？

01:26:32.000 --> 01:26:34.000
あなたの開発の旅は今日から始まります。

01:26:34.000 --> 01:26:42.000
Vision Proの設計、開発、テストを開始する際には、できるだけ多くのことに飛び込んで学ぶことをお勧めします。

01:26:42.000 --> 01:26:54.000
visionOS SDKは、更新されたXcodeとSimulator、Reality Composer Proとともに、今月後半に利用可能になるので、アイデアに取り組み始めることができます。

01:26:54.000 --> 01:27:04.000
また、広範な技術文書、新しいデザインキットとツール、およびvisionOSの更新されたヒューマンインターフェイスガイドラインにもアクセスできます。

01:27:04.000 --> 01:27:10.000
Vision Pro Simulatorに加えて、Vision Proでアプリがどのように機能するかを確認するためのオプションもあります。

01:27:10.000 --> 01:27:18.000
今年の夏、Apple Vision Pro Developer Labsを立ち上げ、Vision Proのハードウェアでアプリをテストできます。

01:27:18.000 --> 01:27:25.000
Vision Proが顧客にリリースされる前に、実践的なサポートと体験をプレビューすることができます。

01:27:25.000 --> 01:27:32.000
これらのラボは、ここクパチーノの開発者センターを含む、世界中のいくつかの場所に配置されます。

01:27:32.000 --> 01:27:39.000
そして、どこにいても、あなたのアプリとVision Proとの互換性を評価するためのリクエストを提出することができます。

01:27:39.000 --> 01:27:44.000
私たちはあなたのアプリをインストールし、私たちが見つけたかもしれない問題を共有します。

01:27:44.000 --> 01:27:49.000
これらのエキサイティングな機会に関する最新情報については、開発者のウェブサイトをご覧ください。

01:27:49.000 --> 01:27:57.000
そしてもちろん、Vision Proはまったく新しいApp Storeで発売されるので、人々はあなたが作成した素晴らしいアプリを発見してダウンロードすることができます。

01:27:57.000 --> 01:28:04.000
私たちは、あなたがこのプラットフォームのためのあなたのアイデアを共有することを招待し、あなたがそれらを生き生きとさせるとき、私たちはあなたをサポートし続けます!

01:28:04.000 --> 01:28:06.000
さて、ダリンに戻ります。

01:28:06.000 --> 01:28:07.000
ダリン：なんてエキサイティングな年でしょう！

01:28:07.000 --> 01:28:19.000
VisionOSの信じられないほどの機会、WidgetKitでアプリを表面化するためのより多くの場所、Continuity Cameraの拡張、watchOSの新しいデザインなど、各プラットフォームへの多くの思慮深い追加。

01:28:19.000 --> 01:28:27.000
さらに、マクロとSwiftデータによるSwiftの大幅な機能強化、およびXcodeプレビューへの大幅なアップグレード。

01:28:27.000 --> 01:28:37.000
言語、フレームワーク、ツール、サービスにわたる今年の開発は、当社のプラットフォーム全体で何十億ものデバイスでユニークな体験を生み出すのを支援するという私たちの深いコミットメントを表しています。

01:28:37.000 --> 01:28:47.000
これらのプラットフォームは、開発者とユーザーに違いをもたらす一貫性と統合のレベルを持つ、ますます多様な製品にまたがっています。

01:28:47.000 --> 01:28:50.000
私たちは、プラットフォームの新機能の表面をスクラッチすることに成功しました。

01:28:50.000 --> 01:29:03.000
しかし、さらに進むために、175の詳細なビデオセッション（visionOSだけで40セッション）と、優れたアプリを構築する際に燃えるような質問に答えるために、Appleの専門家が配置された200以上のラボがあります。

01:29:03.000 --> 01:29:11.000
Appleの開発者になるのにこれほど良い時期はなく、あなたが作成したものがユーザーを驚かせ、喜ばせることは間違いありません。

01:29:11.000 --> 01:29:14.000
素晴らしいWWDCを！

01:29:14.000 --> 01:29:26.000
♪ ♪

01:29:26.000 --> 23:59:59.000
♪ ♪

