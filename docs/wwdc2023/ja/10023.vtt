WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:12.000
こんにちは、ようこそ。

00:00:12.000 --> 00:00:16.000
私の名前はSirishaで、HealthKitチームのエンジニアです。

00:00:16.000 --> 00:00:23.000
今日、App Storeには、ユーザーが健康になり、健康を維持するのに役立つ何百もの健康とフィットネスアプリがあります。

00:00:23.000 --> 00:00:33.000
そして、それらすべてのために、HealthKitは一元化された暗号化されたデータベースを提供するので、あなたの素晴らしいアプリは、あなたのユーザーに彼らの健康データのまとまりのあるビューを表示することができます。

00:00:33.000 --> 00:00:39.000
今、ワークアウトAPIはHealthKitが提供する最も強力なもののいくつかであり、私はそれらを愛しています。

00:00:39.000 --> 00:00:46.000
今日のビデオでは、サイクリングのトレーニングを追跡するためのApple Watch用のサンプルサイクリングアプリを作成しました。

00:00:46.000 --> 00:00:53.000
そして、より簡単にアクセスできるように、iPhoneをハンドルバーに取り付けてサイクリングコンピュータとして使用したいと思います。

00:00:53.000 --> 00:01:01.000
そうすれば、ハンドルバーから手を離すことなく、Apple Watchに表示されるライブメトリクスをすばやく簡単に見ることができます。

00:01:01.000 --> 00:01:09.000
HealthKitは、Apple WatchとiPhoneの間のアクティブなワークアウトセッションを制御およびミラーリングするための新しいワークアウトAPIを導入しています。

00:01:09.000 --> 00:01:20.000
サイクリングの速度、パワー、ケイデンス、機能的しきい値パワー、またはFTPを追跡するための新しいデータタイプを追加して、サイクリングワークアウトのサポートを更新します。

00:01:20.000 --> 00:01:26.000
そして、それが十分でなかった場合、HealthKitと健康アプリは現在iPad上にあります。

00:01:26.000 --> 00:01:34.000
これで、iPadでiCloudアカウントにサインインした顧客は、HealthKitを介してiPadに同期された健康データが表示されます。

00:01:34.000 --> 00:01:39.000
あなたが提供できるより豊かな健康とワークアウト後の経験を想像してみてください。

00:01:39.000 --> 00:01:48.000
今日は、サンプルアプリを使って、ペアリングされたiPhoneでApple Watchで実行されているワークアウトをミラーリングする方法を実演します。

00:01:48.000 --> 00:01:54.000
次に、新しいサイクリングメトリクスを収集し、デバイス間で同期する方法を示すコードを追加します。

00:01:54.000 --> 00:02:01.000
そして、iPadでワークアウトを表示するために必要な承認の詳細をまとめます。

00:02:01.000 --> 00:02:10.000
それでは、Apple Watch、iPhone、iPadがどのように連携して素晴らしいワークアウト体験を提供できるかを確認しましょう。

00:02:10.000 --> 00:02:13.000
私の例では、私はApple Watchでワークアウトを実行しています。

00:02:13.000 --> 00:02:20.000
ワークアウトセッションを集中型オブジェクトとして使用して、ライフサイクル、開始、一時停止、停止を管理しています。

00:02:20.000 --> 00:02:30.000
ワークアウトセッションにまだ慣れていない場合は、以前の講演「ワークアウトで作業する新しい方法」と「Apple Watch用のワークアウトアプリを構築する」を見ることをお勧めします。

00:02:30.000 --> 00:02:38.000
さて、iPhoneからワークアウトを制御するには、このワークアウトセッションをApple WatchからiPhoneに取得する必要があります。

00:02:38.000 --> 00:02:43.000
これを行うには、HealthKitの新しいミラーリングセッションAPIを使用します。

00:02:43.000 --> 00:02:52.000
Apple Watchでミラーリングされたセッションが開始されると、iPhoneアプリが実行されていない場合は、バックグラウンドで起動され、ワークアウトセッションが引き渡されます。

00:02:52.000 --> 00:02:56.000
セッションを受けるには、私のiPhoneアプリの準備ができている必要があります。

00:02:56.000 --> 00:03:02.000
だから、まず、HealthStoreを使用してiPhoneアプリの起動シーケンスでハンドラーを設定します。

00:03:02.000 --> 00:03:07.000
そうすれば、私のApple Watchからセッションを受け取る準備が整います。

00:03:07.000 --> 00:03:19.000
iPhoneアプリがフォアグラウンドまたはバックグラウンドで起動されるたびに、Apple Watchから渡されたアクティブなワークアウトセッションを受け取るために、ミラーリングスタートハンドラを実装します。

00:03:19.000 --> 00:03:25.000
次に、アクティビティタイプのサイクリングでワークアウト構成を作成します。

00:03:25.000 --> 00:03:36.000
次に、iPhoneアプリの既存のStart Watch App APIを呼び出すと、ペアリングされたApple Watchでアプリを起動し、ワークアウトの設定を渡します。

00:03:36.000 --> 00:03:42.000
iPhoneから設定を受け取ると、Apple Watchアプリでワークアウトセッションを作成できます。

00:03:42.000 --> 00:03:46.000
私のApple Watchのワークアウトセッションはプライマリセッションと呼ばれています。

00:03:46.000 --> 00:03:51.000
そして、私のiPhoneのワークアウトセッションはミラーリングセッションと呼ばれています。

00:03:51.000 --> 00:03:52.000
だから、これがその外観です。

00:03:52.000 --> 00:04:00.000
iPhoneアプリでワークアウトを開始すると、Apple WatchのアプリがiPhoneから送信された設定で起動します。

00:04:00.000 --> 00:04:02.000
これまでのところ、とても良いです。

00:04:02.000 --> 00:04:11.000
今、このAPIをとても便利にしているのは、HealthKitがプライマリとミラーリングされたセッション状態の両方を同期させるということです。

00:04:11.000 --> 00:04:19.000
たとえば、Apple Watchでプライマリセッションが一時停止されると、iPhoneのミラーリングされたセッションも一時停止されます。

00:04:19.000 --> 00:04:37.000
アクティブなワークアウトセッションのコピーをiPhoneに取得することに加えて、HealthKitは両方のデバイス間で関連するワークアウトデータを交換するための新しいAPIを提供し、アクティビティを開始および終了したり、イベントを生成したりする機能も提供します。

00:04:37.000 --> 00:04:52.000
さて、プライマリセッションの準備が整い、iPhoneがハンドラーを受け取る準備ができたので、startMirroringToCompanionDeviceに電話してApple Watchからミラーリングを開始し、プライマリセッションを開始します。

00:04:52.000 --> 00:05:04.000
Apple WatchでstartMirroringを呼び出すと、HealthKitはコンパニオンiPhoneアプリをバックグラウンドで起動し、アプリに10秒でライブアクティビティを開始し、ハンドラーに電話してミラーリングを開始します。

00:05:04.000 --> 00:05:10.000
素晴らしい、私たちはApple Watchでセッションを開始し、iPhoneでコピーを手に入れました。

00:05:10.000 --> 00:05:15.000
さて、セッション状態がデバイス間でどのように通信されるかをお見せしましょう。

00:05:15.000 --> 00:05:24.000
私の例のアプリでは、セッションが実行中、一時停止中など、ワークアウトセッションの状態をユーザーに表示したいと考えています。

00:05:24.000 --> 00:05:33.000
そこで、セッション状態の更新と生成されたイベントを監視するために、Apple WatchとiPhoneでセッションデリゲートを設定します。

00:05:33.000 --> 00:05:41.000
iPhoneアプリで取得したミラーリングされたセッションへの参照を保持することが重要であることを覚えておいてください。

00:05:41.000 --> 00:05:47.000
Apple WatchでstartActivityを呼び出すと、プライマリセッションが開始され、セッションの状態が実行中に変更されます。

00:05:47.000 --> 00:05:54.000
この状態の更新は、プライマリセッションのセッションデリゲートとして設定されているため、私のApple Watchアプリに配信されます。

00:05:54.000 --> 00:05:59.000
私のiPhoneのアプリも、ミラーリングされたセッションデリゲートを通じて状態を更新します。

00:05:59.000 --> 00:06:05.000
アクティブなワークアウトセッションをiPhoneに持ち込み、セッションの変更を監視するのはとても簡単です。

00:06:05.000 --> 00:06:07.000
だから、これがそのように見えます。

00:06:07.000 --> 00:06:18.000
Apple Watchでワークアウトセッションが開始されると、iPhoneとApple Watchの一時停止ボタンがアクティブになり、ワークアウトセッションが実行中であることを示します。

00:06:18.000 --> 00:06:27.000
プライマリセッションとミラーリングセッションの間でセッション状態を同期するだけでなく、一時停止や再開などのイベントを生成して送信することもできます。

00:06:27.000 --> 00:06:39.000
Apple Watchでワークアウトセッションを一時停止すると、Apple WatchアプリとiPhoneのミラーリングされたセッションの両方が、セッションデリゲートを通じて一時停止イベントについて通知されます。

00:06:39.000 --> 00:06:41.000
そして、それはこのように見えます。

00:06:41.000 --> 00:06:47.000
Apple Watchでワークアウトセッションを一時停止すると、両方のデバイスの再開ボタンがアクティブになります。

00:06:47.000 --> 00:06:54.000
iPhoneでワークアウトセッションがあるので、iPhoneからもワークアウトをコントロールできます。

00:06:54.000 --> 00:07:04.000
iPhoneでミラーリングされたセッションを再開すると、Apple Watchのプライマリセッションデリゲートに状態の変更が通知され、ミラーリングされたセッションデリゲートは再開イベントを受け取ります。

00:07:04.000 --> 00:07:39.000
次に、サイクリング速度、パワー、ケイデンスなどの新しいデータタイプを含む、HealthKitが今年導入する新しいサイクリング機能を活用する方法を紹介したいと思います。心拍数モニターが心拍数データを健康データベースに収集して書き込む方法と同様に、これらのデータタイプを提供するように設計されたBluetoothデバイスに直接接続する新しい機能。そして最後に、Apple WatchのHealthKitがこれらのBluetoothデバイスから収集されたデータに基づいてFTPを自動的に

00:07:39.000 --> 00:07:45.000
私の自転車には、パワーとケイデンスを収集するパワーメーターがあり、それをApple Watchとペアリングしました。

00:07:45.000 --> 00:07:54.000
センサーは私のApple Watchにデータを書き込み、私は乗車中に表示されるようにそのデータをiPhoneに送信するためにアプリを拡張したいと思います。

00:07:54.000 --> 00:08:01.000
これを行うには、まず、推奨されるワークアウトビルダーAPI beginCollectionを使用してサイクリングメトリクスの収集を開始します。

00:08:01.000 --> 00:08:07.000
そして、sendData(toRemoteWorkoutSession) APIを使用してデータを送信します。

00:08:07.000 --> 00:08:19.000
サイクリングメトリクスを送信するには、Apple WatchのBluetoothセンサーから受信した速度、ケイデンス、電力データをパッケージ化し、プライマリセッションでsendData(toRemoteWorkoutSession)を呼び出します。

00:08:19.000 --> 00:08:31.000
その結果、iPhoneのミラーリングされたセッションデリゲートは、パッケージデータを含むdidReceiveDataFromRemoteDeviceコールを受信し、解凍してiPhoneに表示できます。

00:08:31.000 --> 00:08:40.000
これは、私のApple Watchからサイクリングメトリクスを送信する私のサンプルアプリでどのように見え、それらが私のiPhoneアプリでどのように表示されるかです。

00:08:40.000 --> 00:08:48.000
sendData(toRemoteWorkoutSession)を使用すると、iPhoneからApple Watchに反対方向にデータを送信することもできます。

00:08:48.000 --> 00:08:59.000
私の例では、次の乗車のためのより良い水分補給計画を作成することを期待して、後で分析できるように、トレーニング中の水分摂取量を追跡したいと考えています。

00:08:59.000 --> 00:09:06.000
これを行うには、ミラーリングされたセッションで消費した水の量を梱包してiPhoneからApple Watchに送ります。

00:09:06.000 --> 00:09:18.000
プライマリセッションのデリゲートメソッドdidReceiveDataFromRemoteDeviceは、パックを解凍してApple Watchに保存するパッケージ化されたデータで呼び出されます。

00:09:18.000 --> 00:09:21.000
だから、これが私のサンプルアプリでどのように見えるかです。

00:09:21.000 --> 00:09:30.000
ボタンをタップして摂取した1オンスの水を数えると、Apple Watchに送信され、消費された水の総量が表示されます。

00:09:30.000 --> 00:09:37.000
これで、stopMirroringToCompanionDevice APIを呼び出すことで、ワークアウト中にいつでもセッションのミラーリングを停止できます。

00:09:37.000 --> 00:09:48.000
このメソッドを呼び出すと、コンパニオンデバイスへのデータの送信が停止し、ミラーリングされたセッションのdidDisconnectFromRemoteDevice WithErrorデリゲートメソッドが呼び出されます。

00:09:48.000 --> 00:09:54.000
そして、サイクリングが終わったら、プライマリセッションを終了し、ビルダーを完成させてApple Watchに保存します。

00:09:54.000 --> 00:10:04.000
ワークアウトのサンプルをApple Watchに保存した後、他のデバイスに同期し、ワークアウト後の要約をより詳細なチャートと視覚化で表示できるようになりました。

00:10:04.000 --> 00:10:11.000
すごい！私の次のステップは、iPadで実行されているアプリでワークアウト後の概要を提示することです。

00:10:11.000 --> 00:10:20.000
Apple Watchに保存したばかりのワークアウトは自動的にiPadに同期されるため、ワークアウトデータを視覚化するためにいくつかの変更を加えるだけで済みます。

00:10:20.000 --> 00:10:27.000
HealthKitデータにアクセスする他のアプリと同様に、iPad上の私のアプリはまずユーザーの承認を得る必要があります。

00:10:27.000 --> 00:10:32.000
アプリが承認を要求すると、必要に応じて承認シートが表示されます。

00:10:32.000 --> 00:10:42.000
iPadでは、アプリに複数のウィンドウシーンがある可能性があるため、承認シートが適切なシーンに表示されていることを確認することが重要です。

00:10:42.000 --> 00:10:48.000
私のアプリでこれを行うには、まずHealthKitUIフレームワークをインポートします。

00:10:48.000 --> 00:10:59.000
読書に興味のあるデータタイプ、特にアクティブエネルギー、サイクリングスピード、パワー、ケイデンス、心拍数、ワークアウトサンプルを指定します。

00:10:59.000 --> 00:11:13.000
次に、SwiftUIアプリを構築したので、HealthKitUIフレームワークの新しいhealthDataAccessRequestビュー修飾子を使用し、共有して読みたいデータ型とトリガーを渡します。

00:11:13.000 --> 00:11:19.000
トリガーをtrueに設定すると、私のアプリに承認シートが表示されます。

00:11:19.000 --> 00:11:29.000
UIKitアプリの場合、healthStores.authorizationView ControllerPresenterプロパティを設定し、共有して読み取るタイプの承認を要求します。

00:11:29.000 --> 00:11:35.000
さて、承認を処理して、iPadで私のワークアウトをチェックしましょう。

00:11:35.000 --> 00:11:36.000
すごい！

00:11:36.000 --> 00:11:44.000
これで、ワークアウトデータにアクセスし、iPadの画面サイズを利用して、アプリのより豊かな体験を生み出すことができます。

00:11:44.000 --> 00:11:46.000
超簡単じゃない？

00:11:46.000 --> 00:11:56.000
これで、iPhoneからワークアウトを開始および制御し、Apple Watchから豊富なサイクリングデータを収集して同期し、最後にiPadでワークアウトの詳細を表示できます。

00:11:56.000 --> 00:12:01.000
最後に、iPadでの認証をサポートするようにアプリを必ずアップデートしてください。

00:12:01.000 --> 00:12:06.000
フィットネスアプリにサイクリングが含まれている場合は、新しいデータタイプのサポートを追加できます。

00:12:06.000 --> 00:12:17.000
iPhoneとApple Watchでワークアウトアプリを構築する場合は、新しいミラーリングされたセッションAPIをチェックして、データのミラーリングと両方のデバイス間の状態の制御を開始します。

00:12:17.000 --> 00:12:25.000
アプリがそれを必要とする場合は、同期識別子とバージョン番号を使用して、サーバーとユーザーのデバイス全体でデータの一貫性を維持します。

00:12:25.000 --> 00:12:28.000
そして最後に、フィードバックをお寄せください。

00:12:28.000 --> 00:12:33.000
私たちは、世界を健康に保つために、これらの素晴らしいアプリを構築し続けるために必要な機能をサポートしたいと考えています。

00:12:33.000 --> 00:12:35.000
ご覧いただきありがとうございます。

00:12:35.000 --> 23:59:59.000
♪

