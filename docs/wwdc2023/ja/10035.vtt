WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:15.000
Bhavya:こんにちは、私の名前はBhavyaで、アクセシビリティチームのエンジニアです。

00:00:15.000 -> 00:00:20.000
今日のセッションでは、アプリでアクセシビリティ監査を実行する方法に焦点を当てます。

00:00:20.000 -> 00:00:28.000
まず、UIテストで自動化されたアクセシビリティ監査を実行するのがいかに簡単かについて説明します。

00:00:28.000 -> 00:00:39.000
そして、優れたテスト体験と同時に優れたアクセシビリティ体験を提供する方法で要素を公開する方法について説明します。

00:00:39.000 -> 00:00:43.000
アクセシビリティ監査から始めましょう。

00:00:43.000 -> 00:00:47.000
テストは、アプリ開発プロセスの基本的な要素です。

00:00:47.000 -> 00:00:53.000
テストを書くことで、コードを出荷する前にバグをキャッチして修正することができます。

00:00:53.000 -> 00:00:56.000
それは私たちが製品の品質を確保する方法です。

00:00:56.000 -> 00:01:01.000
そして、アクセシブルな製品は高品質の製品です。

00:01:01.000 -> 00:01:09.000
世界中の約7人に1人が、世界とそのデバイスとの交流方法に影響を与える障害を持っています。

00:01:09.000 -> 00:01:16.000
人々はVoiceOverのようなツールを使用して、自分に最適な方法でアプリと対話します。

00:01:16.000 -> 00:01:26.000
高品質の製品を提供するということは、誰もがアクセスできるアプリケーションを提供し、アプリで最高品質の体験を得られることを意味します。

00:01:26.000 -> 00:01:33.000
私は個人的な経験から、アクセシビリティがいかに深く複雑なテーマになりいかに深いかを知っています。

00:01:33.000 -> 00:01:38.000
アクセシビリティ監査がどのようにこれを簡単な作業にできるかを探りましょう。

00:01:38.000 -> 00:01:42.000
Xcodeには、アクセシビリティインスペクタと呼ばれるツールが付属しています。

00:01:42.000 -> 00:01:51.000
このツールは、アプリ内でアクセシビリティの問題を見つけ、診断し、修正する簡単な方法を提供します。

00:01:51.000 -> 00:01:57.000
このツールを活用できる強力な方法の1つは、アプリで監査を実行することです。

00:01:57.000 -> 00:02:04.000
インスペクタは、一般的なアクセシビリティの問題について、アプリ内の個々のビューを監査できます。

00:02:04.000 -> 00:02:08.000
これは私のサンプルアプリです。タブが2つあります。

00:02:08.000 -> 00:02:16.000
最初のタブは動機付けの引用を提供し、2番目のタブでは、自己反省のために自分の考えを書き留めることができます。

00:02:16.000 -> 00:02:22.000
見積もりタブには、見積もりを表示するテキストビューがあります。

00:02:22.000 -> 00:02:26.000
そして、このテキストビューは背景画像の上に配置されます。

00:02:26.000 -> 00:02:31.000
見積もりを更新する新しい見積もりボタンもあります。

00:02:31.000 -> 00:02:36.000
アクセシビリティインスペクタを起動して、アプリの監査を実行できます。

00:02:36.000 -> 00:02:45.000
検査官は、十分な要素の説明を提供し、適切なコントラストを確保するなど、あらゆる種類の問題をチェックします。

00:02:45.000 -> 00:02:52.000
そして、それが見つけた問題は、各問題に関する詳細な説明が記載された表に表示されます。

00:02:52.000 -> 00:02:57.000
アクセシビリティ監査は強力で、今では自動化可能です。

00:02:57.000 -> 00:03:01.000
これで、UIテストで監査を実行できるようになりました。

00:03:01.000 -> 00:03:11.000
XCUIApplicationでperformAccessibilityAuditを呼び出すと、インスペクタが行うのと同じように、アクセシビリティの問題について現在のビューを監査します。

00:03:11.000 -> 00:03:17.000
アサーションは必要ありません。問題が見つかった場合、テストは自動的に失敗します。

00:03:17.000 -> 00:03:22.000
簡単なデモに飛び込んで、これを実際に見てみましょう。

00:03:22.000 -> 00:03:25.000
Xcodeでデモアプリを開きました。

00:03:25.000 -> 00:03:30.000
Swiftで書かれており、標準のUIKitビューを利用しています。

00:03:30.000 -> 00:03:37.000
私はすでに、画面上の要素が存在することを確認するいくつかの合格テストを書きました。

00:03:37.000 -> 00:03:47.000
たとえば、testQuoteTabViewは、画像ビューとテキストビューが引用タブに存在することを確認します。

00:03:47.000 -> 00:03:52.000
注意すべき点の1つは、これらのテストはアクセシビリティのテストにも役立つということです。

00:03:52.000 -> 00:03:58.000
XCTestがこれらのビューを見つけるには、アクセシビリティ要素でなければなりません。

00:03:58.000 -> 00:04:04.000
つまり、UIテストで要素を見つけることができれば、私たちの支援技術も見つけることができます。

00:04:04.000 -> 00:04:14.000
この方法でアクセシビリティテストを少し行うのは素晴らしいことですが、あらゆる種類の問題をキャッチしていることを確認するために、テストにいくつかの監査を追加したいと思います。

00:04:14.000 -> 00:04:20.000
testAccessibilityQuoteTabViewという別のテストを作成します。

00:04:20.000 -> 00:04:29.000
アプリを起動し、[見積もり]タブに移動するための設定を行います。

00:04:29.000 -> 00:04:38.000
そして最後に、アプリケーションでperformAccessibilityAuditを呼び出します。

00:04:38.000 -> 00:04:53.000
監査は複数の問題を報告できるため、最初の失敗後にテストが問題を報告し続けることができるように、continueAfterFailureをtrueに設定します。

00:04:53.000 -> 00:04:55.000
それでおそれ。

00:04:55.000 -> 00:05:02.000
テストダイヤモンドをクリックしてテストを実行しましょう。

00:05:02.000 -> 00:05:04.000
私のテストは失敗したようです。

00:05:04.000 -> 00:05:08.000
問題はXcodeのソースエディタ内でインラインで報告されます。

00:05:08.000 -> 00:05:17.000
私の監査では2つの問題が発生しました。要素には説明がなく、ラベルは人間が読めません。

00:05:17.000 -> 00:05:21.000
問題のある要素が何であるかを理解しましょう。

00:05:21.000 -> 00:05:38.000
レポートナビゲーターに移動し、[テスト]をクリックし、テストの横にある詳細表示三角形をクリックすると、これら2つの問題を深く掘り下げることができます。

00:05:38.000 -> 00:05:43.000
このビューは、テスト実行と問題の詳細な内訳を示しています。

00:05:43.000 -> 00:05:53.000
最初の問題「要素には説明がない」では、画像ビューに説明がないことを示す要素のスクリーンショットをダブルクリックすることができます。

00:05:53.000 -> 00:06:02.000
2番目の問題でも同様に行うことができます。これは、テキストビューのラベルが人間が読めないことを示しています。

00:06:02.000 -> 00:06:07.000
少し時間を取って、監査がちょうど見つけた問題に対処する方法について話し合いましょう。

00:06:07.000 -> 00:06:19.000
支援技術に依存するアプリのユーザーにとって、実際のインタラクションやナビゲーションの問題につながるため、各問題を個別に調査して修正することが重要です。

00:06:19.000 -> 00:06:25.000
また、フィルタリングして無視すべき問題に遭遇する可能性があることを認めることも重要です。

00:06:25.000 -> 00:06:30.000
おそらく、問題は偽陽性または予想される行動です。

00:06:30.000 -> 00:06:35.000
アクセシビリティ監査により、このような問題を無視しやすくなります。

00:06:35.000 -> 00:06:39.000
話の後半で問題を無視する例に触れます。

00:06:39.000 -> 00:06:48.000
アクセシビリティのベストプラクティスの詳細については、「優れたアクセシビリティ体験を提供する」というタイトルの2018年の講演をご覧ください。

00:06:48.000 -> 00:06:56.000
私の監査が発見した最初の問題を調査しましょう:テキストビューのアクセシビリティラベルは人間が読めません。

00:06:56.000 -> 00:07:06.000
ストーリーボードのテキストビューを調べると、アクセシビリティラベルがQUOTE_TEXTVIEWに設定されていることがわかります。

00:07:06.000 -> 00:07:16.000
VoiceOverのような支援技術に依存するユーザーは、最初にアクセシビリティラベルを聞き、次にこのようなアクセシビリティ値を聞きます。

00:07:16.000 -> 00:07:20.000
VoiceOver: QUOTE_TEXTVIEW、「一度に1日ずつ生き、それを傑作にしてください。」

00:07:20.000 -> 00:07:28.000
Bhavya:ラベルは素晴らしく聞こえません、そして理想的には、VoiceOverはそれをスキップして引用自体だけを話すべきです。

00:07:28.000 -> 00:07:36.000
アクセシビリティラベルを削除することはできますが、テキストビューを識別するためにこのラベルに依存するため、UIテストは壊れます。

00:07:36.000 -> 00:07:41.000
理想的には、この文字列はアクセシビリティ識別子として設定する必要があります。

00:07:41.000 -> 00:07:52.000
アクセシビリティ識別子を使用すると、アクセシビリティやUIエクスペリエンスに影響を与えることなく、UIテストを書くときに要素を一意に識別できます。

00:07:52.000 -> 00:07:57.000
ストーリーボードに向かいます。

00:07:57.000 -> 00:08:13.000
テキストビューを選択し、ラベルからこの文字列を切り取り、識別子に貼り付けます。

00:08:13.000 -> 00:08:18.000
監査で見つかったもう1つの問題は、画像ビューに説明がないことです。

00:08:18.000 -> 00:08:24.000
通常、画像は説明的だが簡潔なラベルでアクセスできることが重要です。

00:08:24.000 -> 00:08:29.000
しかし、私のアプリでは、これは装飾的な背景画像です。

00:08:29.000 -> 00:08:35.000
これはメインコンテンツの一部ではなく、引用自体に意味を加えるものではありません。

00:08:35.000 -> 00:08:40.000
理想的には、VoiceOverのような技術は、この画像ビューをスキップする必要があります。

00:08:40.000 -> 00:08:47.000
ビューコントローラーのビューでアクセシビリティ要素をオーバーライドすることで、この動作を実現できます。

00:08:47.000 -> 00:08:55.000
引用テキストビューと新しい引用ボタンのみに設定すると、VoiceOverは画像ビューに着地しなくなります。

00:08:55.000 -> 00:08:58.000
Xcodeに向かい、今すぐそれをやりましょう。

00:08:58.000 -> 00:09:10.000
ビューコントローラーファイルに移動し、accessibilityElementsを設定します。

00:09:10.000 -> 00:09:11.000
すごい。

00:09:11.000 -> 00:09:25.000
監査に戻り、テストケースを実行して、すべての問題を解決したかどうかを確認しましょう。

00:09:25.000 -> 00:09:28.000
甘い。私の監査は今合格しています。

00:09:28.000 -> 00:09:34.000
私のUIテストの1つが今失敗していることに気付くでしょうが、後でそれに戻ります。

00:09:34.000 -> 00:09:40.000
アクセシビリティ監査を追加すると、フィルタリングが必要な問題に遭遇する可能性があります。

00:09:40.000 -> 00:09:47.000
例として、私の監査で特定のラベルのコントラストが低すぎるという問題が見つかったとします。

00:09:47.000 -> 00:09:54.000
調査後、コントラストは問題ないことが判明し、問題は偽陽性のようです。

00:09:54.000 -> 00:09:57.000
この問題をどのように無視できるかを探りましょう。

00:09:57.000 -> 00:10:02.000
performAccessibilityAudit関数は、追加のパラメータを取ります。

00:10:02.000 -> 00:10:09.000
最初のパラメータを使用すると、実行する監査のカテゴリのオプションセットを指定できます。

00:10:09.000 -> 00:10:19.000
これらは、ダイナミックタイプやコントラストなどのカテゴリで、アクセシビリティインスペクタですでに慣れ親しんでいるのと同じカテゴリです。

00:10:19.000 -> 00:10:25.000
この例では、動的タイプとコントラストの問題のみを監査することを選択します。

00:10:25.000 -> 00:10:29.000
2番目のパラメータでは、クロージャを指定できます。

00:10:29.000 -> 00:10:37.000
この閉鎖は、監査によって発見されたすべての問題に呼び出され、無視する問題と報告する問題を選択することができます。

00:10:37.000 -> 00:10:42.000
shouldIgnoreという変数をfalseに定義することから始めます。

00:10:42.000 -> 00:10:46.000
デフォルトでは、問題は無視すべきではありません。

00:10:46.000 -> 00:10:54.000
「マイラベル」というラベルの要素のコントラストの問題を無視したいとしましょう。

00:10:54.000 -> 00:11:00.000
issue.elementを使用して、問題に関連付けられたXCUIElementを取得できます。

00:11:00.000 -> 00:11:13.000
この要素に「マイラベル」というラベルがあり、問題の種類がコントラストの問題である場合、私は正しい問題を抱えていることを知っているので、shouldIgnoreをtrueに設定します。

00:11:13.000 -> 00:11:18.000
Trueに設定すると、問題を無視したいことを示します。

00:11:18.000 -> 00:11:21.000
最後に、私は無視して戻ってきます。

00:11:21.000 -> 00:11:29.000
上記の条件が満たされない場合、shouldIgnoreはfalseとなり、問題が障害として報告されるべきであることを示します。

00:11:29.000 -> 00:11:31.000
そして、それだけです。

00:11:31.000 -> 00:11:42.000
この例を拡張し、要素タイプや識別子などの他のプロパティを使用して無視の基準をカスタマイズできます。

00:11:42.000 -> 00:11:50.000
独自のアプリのアクセシビリティ監査を書き始めると、次の考慮事項を念頭に置いておくと便利です。

00:11:50.000 -> 00:11:53.000
監査は画面上の要素に限定されます。

00:11:53.000 -> 00:12:03.000
つまり、完全なカバレッジを提供するために、アプリが表示する可能性のあるすべての異なるビューのアクセシビリティ監査テストを追加する必要があります。

00:12:03.000 -> 00:12:10.000
サンプルアプリの場合、2番目のタブに移動して監査を実行する別のテストを追加する必要があります。

00:12:10.000 -> 00:12:18.000
複数のテストの監査をすぐに追加する簡単な方法は、ティアダウンで監査をオーバーライドして実行することです。

00:12:18.000 -> 00:12:21.000
クラスの範囲で変数を定義できます。

00:12:21.000 -> 00:12:31.000
このようにして、テストはこれらの変数をオーバーライドして監査をオプトインまたはオプトアウトし、テストが問題を無視するためのクロージャをカスタマイズできるようにします。

00:12:31.000 -> 00:12:37.000
テスト計画は、プロジェクトで監査固有のテストをグループ化するための優れた方法です。

00:12:37.000 -> 00:12:44.000
これにより、テスト計画でテストターゲット、ケース、または個々の方法を選択的に有効にすることができます。

00:12:44.000 -> 00:12:49.000
そして最後に、監査は実際のテストを支援技術に置き換えるべきではありません。

00:12:49.000 -> 00:12:59.000
最終的には、VoiceOverやDynamic Typeなどのテクノロジーをオンにしてアプリをテストすることが、高品質のエクスペリエンスを確保するための最良の方法です。

00:12:59.000 -> 00:13:07.000
いずれにも妥協することなく、優れたアクセシビリティと優れたテストを実現できます。

00:13:07.000 -> 00:13:17.000
自動化要素を使用すると、これらの要素のアクセシビリティに影響を与えることなく、自動化の目的で特別に要素を公開できます。

00:13:17.000 -> 00:13:31.000
これで、UIKitでは、このAPIを活用して、自動化に必要な要素を正確に公開しながら、同時にこれらの要素のアクセシビリティをカスタマイズできます。

00:13:31.000 -> 00:13:39.000
以前から覚えているかもしれませんが、監査の問題を解決したので、UIテストの1つも壊しました。

00:13:39.000 -> 00:13:42.000
画像ビューはもう利用できないようです。

00:13:42.000 -> 00:13:48.000
アクセシビリティにも欠けているので、私のUIテストに欠けています。

00:13:48.000 -> 00:13:55.000
この画像ビューは装飾的だったので、アクセシビリティ要素をオーバーライドしてアクセシビリティから除外しました。

00:13:55.000 -> 00:14:01.000
しかし、そうすることで、UIテストから除外されました。

00:14:01.000 -> 00:14:07.000
自動化要素が、画像ビューをUIテストに公開するのにどのように役立つかを探りましょう。

00:14:07.000 -> 00:14:13.000
Xcodeのビューコントローラーファイルに移動します。

00:14:13.000 -> 00:14:20.000
そして、ビューコントローラーのビューにAutomationElementsを画像ビューに設定します。

00:14:20.000 -> 00:14:31.000
automationElementsをオーバーライドするときは、自動化にさらす必要があるすべての要素を指定する必要があることに注意してください。

00:14:31.000 -> 00:14:37.000
つまり、テキストビューとボタンもリストに追加する必要があります。

00:14:37.000 -> 00:14:45.000
自動化要素をオーバーライドするときは、すでに自動化にさらされている既存の要素をオーバーライドしています。

00:14:45.000 -> 00:14:50.000
テストケースを実行して、再び合格するかどうかを確認してみましょう。

00:14:50.000 -> 00:15:01.000
すごい。

00:15:01.000 -> 00:15:08.000
私たちはいくつかの素晴らしいUIとアクセシビリティテストを書き、いくつかのアクセシビリティの問題も修正することができました。

00:15:08.000 -> 00:15:17.000
アクセシビリティ監査は、アプリに簡単で自動化されたアクセシビリティテストを追加する素晴らしい方法です。

00:15:17.000 -> 00:15:23.000
監査によって特定された問題を解決することは、誰もがあなたのアプリを楽しめるようにするのに役立ちます。

00:15:23.000 -> 00:15:30.000
どちらか一方を選ぶことなく、優れたアクセシビリティと自動化体験を作成します。

00:15:30.000 -> 00:15:39.000
オートメーション要素を使用すると、アクセシビリティエクスペリエンスに影響を与えることなく、UIテスト専用の要素を公開できます。

00:15:39.000 -> 00:15:46.000
UIテストに行き、AccessibilityAuditを実行するためのクイックコールを追加することをお勧めします。

00:15:46.000 -> 23:59:59.000
ありがとうございます。

