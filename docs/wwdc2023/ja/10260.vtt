WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
ジム・ティランダー：こんにちは、私はRealityKitチームのエンジニアであるジムです。

00:00:14.000 --> 00:00:22.000
今日、ARKitチームの同僚のクリストファーが、空間コンピューティング用のアプリの構築を開始する方法をご案内します。

00:00:22.000 --> 00:00:23.000
飛び込もう！

00:00:23.000 --> 00:00:28.000
私たちは、空間コンピューティングのための新しいプラットフォームに興奮しています。

00:00:28.000 --> 00:00:35.000
このプラットフォームは、人々が使用し、あなたがアプリを開発するための使い慣れた基盤の上に構築されています。

00:00:35.000 --> 00:00:55.000
実際のコンテンツと仮想コンテンツをブレンドし、自然な入力を使用してアプリと対話する新しいエキサイティングな可能性を開きます。システム全体が人々のプライバシーを保護するように設計されており、アプリの経験に集中する安心感を提供します。

00:00:55.000 --> 00:01:02.000
空間コンピューティングの語彙と概念を構築するための基礎について少し話しましょう。

00:01:02.000 --> 00:01:07.000
その後、アプリを使い始めるためのさまざまな方法について説明します。

00:01:07.000 --> 00:01:16.000
その後、同僚のクリストファーがアプリの構築方法を説明し、空間コンピューティングの詳細を深く掘り下げます。

00:01:16.000 --> 00:01:19.000
さて、いくつかのファンダメンタルズを見てみましょう。

00:01:19.000 --> 00:01:27.000
まず、使い慣れたUIの概念と新しいUIの概念の両方が空間コンピューティングで何を意味するのかを取り上げましょう。

00:01:27.000 --> 00:01:31.000
デフォルトでは、アプリは共有スペースに起動します。

00:01:31.000 --> 00:01:36.000
これは、Macデスクトップ上の複数のアプリのように、アプリが並んで存在する場所です。

00:01:36.000 --> 00:01:41.000
人々はパススルーを通じて周囲とつながっています。

00:01:41.000 --> 00:01:44.000
各アプリは1つ以上のウィンドウを持つことができます。

00:01:44.000 --> 00:01:51.000
これらは、通常のmacOSウィンドウのようにサイズを変更してリフローできるSwiftUIシーンです。

00:01:51.000 --> 00:02:01.000
従来のビューとコントロール、および3Dコンテンツを含めることができ、2Dと3Dをミックスしてマッチさせることができます。

00:02:01.000 --> 00:02:07.000
人々は、予想通り、現在の空間で自分の好みに合わせて窓を再配置することができます。

00:02:07.000 --> 00:02:14.000
ボリュームを使用すると、アプリは定義された範囲で3Dコンテンツを表示し、他のアプリとスペースを共有できます。

00:02:14.000 --> 00:02:19.000
ボリュームは、チェス盤などの3Dコンテンツを紹介するのに最適です。

00:02:19.000 --> 00:02:24.000
人々は空間でボリュームを再配置することができ、さまざまな角度から見ることができます。

00:02:24.000 --> 00:02:36.000
ボリュームはSwiftUIシーンであり、使い慣れた方法でレイアウトを行うことができ、RealityKitの力を使って3Dコンテンツを表示します。

00:02:36.000 --> 00:02:47.000
時には、アプリの没入レベルをもっとコントロールしたいと思うかもしれません...ビデオを見ながら集中したり、ゲームをしたりするかもしれません。

00:02:47.000 --> 00:02:57.000
これを行うには、専用のフルスペースを開くと、アプリのウィンドウ、ボリューム、3Dオブジェクトだけがビューに表示されます。

00:02:57.000 --> 00:03:02.000
フルスペースでは、ARKitのAPIを利用することもできます。

00:03:02.000 --> 00:03:14.000
たとえば、システムが提供するジェスチャーに加えて、より詳細な骨格ハンドトラッキングを取得して、人々の手の構造をあなたの経験に本当に組み込むことができます。

00:03:14.000 --> 00:03:18.000
あなたのアプリはさまざまな方法でフルスペースを使用できます。

00:03:18.000 --> 00:03:25.000
現実世界の地上コンテンツへのパススルーを使用して、人々を周囲とのつながりに保つことができます。

00:03:25.000 --> 00:03:44.000
また、空間オーディオを再生し、RealityKitを介して3Dをレンダリングすると、デバイスが部屋の理解を継続的に更新し、人々の周囲にビジュアルとサウンドをブレンドし、これらの仮想オブジェクトが本当に自分の部屋に属していると感じさせるという事実を自動的に利用します。

00:03:44.000 --> 00:03:51.000
また、完全に没入型のスペースにレンダリングして、視野全体を埋めることもできます。

00:03:51.000 --> 00:04:05.000
これにより、アプリは、仮想オブジェクトの照明をカスタマイズし、オーディオ特性を選択する機能により、アプリの創造的な意図を柔軟に提供できます。

00:04:05.000 --> 00:04:11.000
これらは空間コンピューティングの基本的な要素です:窓、ボリューム、スペース。

00:04:11.000 --> 00:04:17.000
彼らは、没入の連続にまたがることができるアプリを構築するための柔軟なツールセットを提供します。

00:04:17.000 --> 00:04:20.000
クリストファーは後でこれについてもっと話します。

00:04:20.000 --> 00:04:30.000
空間コンピューティングの基本的な要素を導入したので、ウィンドウ、ボリューム、スペースと対話する方法を探りましょう。

00:04:30.000 --> 00:04:36.000
このプラットフォームでは、目と手を使うだけでアプリと対話できます。

00:04:36.000 --> 00:04:43.000
たとえば、ボタンを見て指を合わせてタップして選択することで、ボタンを操作できます。

00:04:43.000 --> 00:04:49.000
人々は3D空間で同じボタンに手を伸ばして物理的に触れることもできます。

00:04:49.000 --> 00:05:02.000
これらの種類のインタラクションの両方について、タップ、長押し、ドラッグ、回転、ズームなど、さまざまなジェスチャーが可能です。

00:05:02.000 --> 00:05:09.000
システムはこれらを自動的に検出し、アプリが応答するためのタッチイベントを生成します。

00:05:09.000 --> 00:05:12.000
ジェスチャーはSwiftUIとうまく統合されています。

00:05:12.000 --> 00:05:17.000
同じジェスチャーAPIは、RealityKitエンティティとシームレスに連携します。

00:05:17.000 --> 00:05:23.000
これにより、人々はあなたの3Dシーン要素と直接簡単に対話することができます。

00:05:23.000 --> 00:05:36.000
たとえば、この3Dモデルに直接フラグを配置したり、仮想ジッパーの制御を想像したり、仮想チェスの駒を操作して拾ったりするのに便利です。

00:05:36.000 --> 00:05:45.000
ボウリングのゲームをしたり、人々の手をバーチャルクラブに変えたい場合は、ARKitのSkeletal Hand Trackingを通じてこれを行うことができます。

00:05:45.000 --> 00:05:54.000
ここでは、タップを使用してテーブルにキューブを積み重ね、手でテーブルに貼り付ける方法の例を見ることができます。

00:05:54.000 --> 00:05:59.000
これは、アプリ固有の手のインプットをエクスペリエンスに持ち込むことができる強力な方法です。

00:05:59.000 --> 00:06:15.000
そして最後に、システムは自動的にワイヤレスキーボード、トラックパッド、およびアクセシビリティハードウェアからの入力をアプリに直接もたらし、ゲームコントローラーフレームワークでは、ワイヤレスゲームコントローラーのサポートも追加できます。

00:06:15.000 --> 00:06:20.000
協力し、一緒に物事を探求することは、空間コンピューティングの基本的な部分です。

00:06:20.000 --> 00:06:25.000
これは、SharePlayとグループアクティビティフレームワークを通じて行います。

00:06:25.000 --> 00:06:32.000
このプラットフォームでは、macOSと同様に、このクイックルックエクスペリエンスのように、人々は任意のウィンドウを共有できます。

00:06:32.000 --> 00:06:45.000
人々がクイックルック3Dモデルを共有すると、参加者間で向き、スケール、アニメーションを同期し、異なる場所にいても簡単に共同作業できます。

00:06:45.000 --> 00:06:56.000
人々が自分の空間に表示され、物理的に指しているものに協力しているとき、SharePlayセッションの全員が同じ経験を持つことが重要です。

00:06:56.000 --> 00:07:05.000
これは、物体へのジェスチャーなどの自然な参照を可能にし、物理的に一緒にいる感覚を強化します。

00:07:05.000 --> 00:07:09.000
共有コンテキストの概念をシステムに追加しました。

00:07:09.000 --> 00:07:20.000
システムは、この共有コンテキストを管理し、SharePlayセッションの参加者全員が同じ方法でコンテンツを体験できるようにします。

00:07:20.000 --> 00:07:27.000
空間ペルソナテンプレートを使用して、人々があなたのコンテンツをどのように体験するかをさらにカスタマイズできます。

00:07:27.000 --> 00:07:35.000
詳細については、このプラットフォームの空間的なSharePlayエクスペリエンスの設計と構築に関するセッションをご覧ください。

00:07:35.000 --> 00:07:45.000
デバイスが周囲や人々に関する多くの親密な知識を持っていることを考えると、私たちは人々のプライバシーを保護するために多くのアーキテクチャを導入しました。

00:07:45.000 --> 00:07:47.000
それに飛び込みましょう。

00:07:47.000 --> 00:07:59.000
プライバシーは、このプラットフォームの設計を導くための基本原則であり、開発者としてAPIを活用してデバイスの多くの機能を利用することを容易にします。

00:07:59.000 --> 00:08:10.000
アプリがセンサーから直接データにアクセスできるようにする代わりに、システムはあなたのためにそれを行い、イベントや視覚的な手がかりをアプリに提供します。

00:08:10.000 --> 00:08:19.000
たとえば、システムは3D空間で誰かの手の目の位置とジェスチャーを知り、それをタッチイベントとして提供します。

00:08:19.000 --> 00:08:28.000
また、システムは、それが注目の焦点であるが、人が見ているアプリと通信しない場合、ビューにホバー効果をレンダリングします。

00:08:28.000 --> 00:08:35.000
多くの状況では、システムが提供する動作は、アプリがインタラクションに応答するのに十分です。

00:08:35.000 --> 00:08:44.000
実際により機密性の高い情報にアクセスする必要がある場合、システムは最初に人々に許可を求めます。

00:08:44.000 --> 00:08:57.000
たとえば、壁や家具を検出するためのシーンの理解にアクセスする許可をユーザーに求めたり、カスタムインタラクションをアプリに持ち込むためにSkeletal Hand Trackingにアクセスしたりします。

00:08:57.000 --> 00:09:05.000
アプリで利用可能な機能のいくつかを見たので、それらのアプリをどのように開発しているかを探りましょう。

00:09:05.000 --> 00:09:10.000
すべては、Appleの統合開発環境であるXcodeから始まります。

00:09:10.000 --> 00:09:23.000
Xcodeは、プロジェクト管理サポート、UIのビジュアルエディタ、デバッグツール、シミュレータなど、アプリを開発するためのツールの完全なセットを提供します。

00:09:23.000 --> 00:09:34.000
そして最も重要なことは、Xcodeには、アプリの開発に使用するフレームワークとAPIの完全なセットを提供するプラットフォームSDKも付属しています。

00:09:34.000 --> 00:09:41.000
ソースファイルにSwiftUIプレビュープロバイダーが含まれている場合、プレビューキャンバスはXcodeで自動的に開きます。

00:09:41.000 --> 00:09:52.000
プレビューキャンバスは3Dをサポートするように拡張され、アニメーションやカスタムコードなど、シーンのRealityKitコードを視覚化できます。

00:09:52.000 --> 00:10:03.000
これにより、反復時間を短縮し、ライブコードを編集し、変更や調整の結果を直接確認する際に、アプリの適切なルックアンドフィールを見つけることができます。

00:10:03.000 --> 00:10:11.000
軌道速度と衛星のサイズを変更して、衛星が地球を周回している様子を少し実験してみましょう。

00:10:11.000 --> 00:10:20.000
プレビューはコードの変更を反映しているため、コードの迅速な実験の結果を簡単に見ることができます。

00:10:20.000 --> 00:10:31.000
Xcodeプレビューには、3Dレイアウトのクイックプレビューを可能にするオブジェクトモードもあります。たとえば、レイアウトがビューの境界内に収まるかどうかを確認するなどです。

00:10:31.000 --> 00:10:39.000
これは、従来のUIと新しい3Dビジュアルの両方で緊密に統合されたシーンを構築するのに最適です。

00:10:39.000 --> 00:10:46.000
Xcodeプレビューは、アプリを実行する直前にレイアウトを取得する素晴らしい方法を提供します。

00:10:46.000 --> 00:10:50.000
シミュレーターは、アプリとのインタラクティブ性をテストする素晴らしい方法です。

00:10:50.000 --> 00:10:57.000
キーボード、マウス、または互換性のあるゲームコントローラーを使用して、シーン内を移動したり見回したりできます。

00:10:57.000 --> 00:11:03.000
また、シミュレートされたシステムジェスチャーを使用して、アプリと簡単にやり取りできます。

00:11:03.000 --> 00:11:10.000
シミュレータには3つの異なるシミュレートされたシーンが付属しており、それぞれに昼と夜の照明が付いています。

00:11:10.000 --> 00:11:13.000
これにより、さまざまな条件下でアプリを簡単に見ることができます。

00:11:13.000 --> 00:11:23.000
シミュレータは、ほとんどのアプリを実行してデバッグし、非常に予測可能な環境で開発中にすばやく反復するのに最適な方法です。

00:11:23.000 --> 00:11:35.000
また、デバッグ中に多くのランタイムビジュアライゼーションをサポートするようにXcodeを拡張し、シーンを見るだけでバグをすばやく理解して追跡できるようにしました。

00:11:35.000 --> 00:11:42.000
ここでは、それらの平面の意味的な意味やシーン内の衝突形状など、平面推定が見られます。

00:11:42.000 --> 00:11:48.000
Xcodeのデバッガから焦点を合わせたいビジュアライゼーションを切り替えるのは簡単です。

00:11:48.000 --> 00:11:54.000
これらのビジュアライゼーションは、シミュレータとデバイスの両方でうまく機能します。

00:11:54.000 --> 00:12:01.000
アプリケーションのパフォーマンスと応答性を磨く時が来たら、Instrumentsのような使い慣れたツールがあります。

00:12:01.000 --> 00:12:06.000
Instrumentsは、Xcodeに含まれている強力なパフォーマンス分析ツールです。

00:12:06.000 --> 00:12:11.000
Instrumentsを使用して、実行中のアプリの実用的な洞察を提供できます。

00:12:11.000 --> 00:12:24.000
また、空間コンピューティングの場合、Instruments 15には新しいテンプレートであるRealityKit Traceが含まれており、プラットフォーム上の新しい行動についてさらに深い洞察を提供します。

00:12:24.000 --> 00:12:36.000
RealityKitトレーステンプレートには、開発者がアプリのGPU、CPU、システム電力への影響を理解し、パフォーマンスのホットスポットを特定できる新しい機器があります。

00:12:36.000 --> 00:12:47.000
フレームのボトルネックを簡単に観察して理解し、提出された合計三角形やシミュレートされたRealityKitエンティティの数などの重要な指標にさかのぼることができます。

00:12:47.000 --> 00:12:53.000
これにより、潜在的なパフォーマンスの問題を迅速に見つけて対処できます。

00:12:53.000 --> 00:12:59.000
詳細については、セッション「Meet RealityKit Trace」をご覧ください。

00:12:59.000 --> 00:13:05.000
また、Reality Composer Proという新しい開発者ツールも導入しました。

00:13:05.000 --> 00:13:09.000
アプリの3Dコンテンツをプレビューして準備できます。

00:13:09.000 --> 00:13:18.000
Reality Composer Proは、すべてのアセットの概要と、それらがシーンにどのように適合するかを把握するのに役立ちます。

00:13:18.000 --> 00:13:27.000
RealityKitに追加した新機能はパーティクルで、Reality Composer Proのワークフローを使用して作成してプレビューできます。

00:13:27.000 --> 00:13:33.000
シーンに粒子を加えることは、動き、人生、そして無限の可能性を提供します。

00:13:33.000 --> 00:13:40.000
雲、雨、火花は、短時間で構築できる効果のほんの一部です。

00:13:40.000 --> 00:13:45.000
シーンにオーディオを追加し、それらをオブジェクトに関連付けるのは簡単です。

00:13:45.000 --> 00:13:53.000
また、シーン全体の形状とコンテキストを考慮したオーディオを空間的にプレビューすることもできます。

00:13:53.000 --> 00:14:02.000
ほとんどの仮想オブジェクトは、RealityKitの物理ベースの素材を使用して、さまざまな現実世界の素材を表現します。

00:14:02.000 --> 00:14:11.000
RealityKitは、センサーデータを使用して、現実世界の照明情報をこれらの材料に供給し、人々の周囲に接地します。

00:14:11.000 --> 00:14:19.000
RealityKitには、アプリが一般的なシナリオで使用できる追加の標準資料もいくつかあります。

00:14:19.000 --> 00:14:32.000
おそらく創造的な意図を伝えるために、非常に特定のニーズがある場合は、オープンスタンダードのMaterialXを使用してReality Composer Proでカスタム資料を作成できます。

00:14:32.000 --> 00:14:41.000
コードに触れることなく、使いやすいノードグラフでこれを行うことができ、ビューポートで直接すばやくプレビューできます。

00:14:41.000 --> 00:14:48.000
これについては、セッション「Explore materials in Reality Composer Pro」で詳しく知ることができます。

00:14:48.000 --> 00:14:56.000
3Dコンテンツについて気分が良いときは、シーンをデバイスに送信し、コンテンツを直接テストすることができます。

00:14:56.000 --> 00:15:01.000
これは、アプリを構築する必要さえないので、反復時間に最適です。

00:15:01.000 --> 00:15:07.000
詳細については、セッション「Meet Reality Composer Pro」をご覧ください。

00:15:07.000 --> 00:15:11.000
利用可能なもう1つのオプションはUnityです。

00:15:11.000 --> 00:15:20.000
Unityは、使い慣れたワークフローで、プラグインを必要とせずに空間コンピューティング用のアプリを書く機能をもたらします。

00:15:20.000 --> 00:15:25.000
既存のコンテンツを持ち込むことで、新しい没入型体験に力を与えることができます。

00:15:25.000 --> 00:15:32.000
詳細については、Unityで没入型アプリを書く方法をカバーするこれらのセッションをご覧ください。

00:15:32.000 --> 00:15:40.000
利用可能な基本的な概念とツールのいくつかを理解したので、アプリの構築を開始する方法を見てみましょう。

00:15:40.000 --> 00:15:52.000
始めるには2つの方法があります。新しいアプリをゼロから空間的に設計するか、この新しい空間プラットフォームに持ち込みたい既存のアプリを持っているかのどちらかです。

00:15:52.000 --> 00:15:55.000
新しいアプリを構築する方法を探りましょう。

00:15:55.000 --> 00:16:05.000
アプリケーションをゼロから空間的に設計することは、空間コンピューティングの新しいユニークな機能をすばやく受け入れるのに役立ちます。

00:16:05.000 --> 00:16:10.000
開始するには、このプラットフォームに新しいアプリテンプレートを使用できます。

00:16:10.000 --> 00:16:13.000
アプリテンプレートには2つの新しい重要なオプションがあります。

00:16:13.000 --> 00:16:19.000
まず、初期シーンタイプを「ウィンドウ」または「ボリューム」のいずれかに選択できます。

00:16:19.000 --> 00:16:25.000
これにより、最初の開始コードが生成され、後で追加のシーンを簡単に追加できます。

00:16:25.000 --> 00:16:30.000
2番目のオプションでは、没入型スペースのエントリーポイントをアプリに追加できます。

00:16:30.000 --> 00:16:34.000
デフォルトでは、アプリは共有スペースで起動します。

00:16:34.000 --> 00:16:46.000
「スペース」に没入型シーンタイプを選択すると、このフルスペースに起動する方法を示すサンプルボタンとともに、2番目のシーンがアプリに追加されます。

00:16:46.000 --> 00:16:59.000
そして、アシスタントを終えると、RealityKitでレンダリングされた3Dオブジェクトと混ざったおなじみのボタンを示すSwiftUIの最初の作業アプリが表示されます。

00:16:59.000 --> 00:17:05.000
詳細については、「最初の没入型アプリを開発する」セッションをご覧ください。

00:17:05.000 --> 00:17:13.000
また、コードサンプルも公開しており、それぞれが異なるトピックを説明し、迅速にスピードアップします。

00:17:13.000 --> 00:17:23.000
デスティネーションビデオは、3Dビデオと空間オーディオを組み込んだ共有された没入型再生体験を構築する方法を示しています。

00:17:23.000 --> 00:17:34.000
ハッピービームは、カスタムハンドジェスチャーを含む没入型スペースを活用して、友達と楽しいゲームを作成する方法の例です。

00:17:34.000 --> 00:17:40.000
そして、Hello Worldは、3Dグローブで異なるビジュアルモードを移行する方法を示しています。

00:17:40.000 --> 00:17:45.000
クリストファーは後でハローワールドについて詳しく話します。

00:17:45.000 --> 00:17:53.000
このプラットフォームでアプリをゼロから構築して設計することは、空間コンピューティングの概念を簡単に受け入れる機会を提供します。

00:17:53.000 --> 00:17:59.000
しかし、空間コンピューティングに持ち込みたい既存のアプリを持っている人もいるかもしれません。

00:17:59.000 --> 00:18:04.000
最初から、iPadとiPhoneのアプリは見た目も気分も最高です。

00:18:04.000 --> 00:18:13.000
アプリがiPadをサポートしている場合、iPhoneのみのアプリは完全にサポートされていますが、そのバリアントはiPhoneよりも優先されます。

00:18:13.000 --> 00:18:17.000
シミュレーターに示されているレシピアプリを見てみましょう。

00:18:17.000 --> 00:18:25.000
このプラットフォームには独自の暗いスタイルがありますが、iPadとiPhoneのアプリはライトモードスタイルを保持しています。

00:18:25.000 --> 00:18:37.000
Windowsは使いやすくするために拡張でき、アプリの回転が処理され、さまざまなレイアウトを見ることができます。

00:18:37.000 --> 00:18:52.000
詳細については、「共有スペースでiPadとiPhoneのアプリを実行する」セッションを見て、システムの組み込み動作、機能の違い、シミュレータでテストする方法について学んでください。

00:18:52.000 --> 00:18:58.000
しかし、既存のiPadやiPhoneアプリを実行することはほんの始まりに過ぎません。

00:18:58.000 --> 00:19:05.000
クリックするだけで、このプラットフォームのXcodeプロジェクトに宛先を簡単に追加できます。

00:19:05.000 --> 00:19:20.000
その後、ターゲットデバイスを選択し、再コンパイルして実行するだけです。

00:19:20.000 --> 00:19:26.000
再コンパイルすると、ネイティブの間隔、サイジング、リレーアウトが得られる。

00:19:26.000 --> 00:19:43.000
ウィンドウとマテリアルはすべて自動的にプラットフォームのルックアンドフィールに移動し、どんな光条件でも読みやすさを確保し、アプリはカスタムコントロールのハイライトなどの組み込み機能を利用することができます。

00:19:43.000 --> 00:19:50.000
さて、クリストファーは、これまでに取り上げた概念を使用して、アプリをさらに進化させる方法を紹介します。

00:19:50.000 --> 00:19:51.000
ありがとう、ジム。

00:19:51.000 --> 00:19:56.000
以前に学んだ要素を組み込んだアプリケーションを構築する方法を説明します。 では、

00:19:56.000 --> 00:20:01.000
Hello Worldから始めて、アプリに統合できる素晴らしい機能のいくつかを探りましょう。

00:20:01.000 --> 00:20:03.000
これが動作中のサンプルです。

00:20:03.000 --> 00:20:10.000
シミュレータでアプリを実行すると、Hello Worldは私たちの目の前にある共有スペースへのウィンドウで起動します。

00:20:10.000 --> 00:20:18.000
これはSwiftUIで作られた使い慣れた外観のウィンドウで、テキスト、画像、ボタンなどのさまざまな要素が含まれています。

00:20:18.000 --> 00:20:21.000
タップジェスチャーを使用すると、アプリ内のナビゲーションが可能になります。

00:20:21.000 --> 00:20:25.000
私たちの新しいビューに3Dコンテンツがどのように埋め込まれているかを観察してください。

00:20:25.000 --> 00:20:30.000
SwiftUIと3Dコンテンツがシームレスに連携するようになりました。

00:20:30.000 --> 00:20:35.000
メインウィンドウに戻り、惑星地球を選択すると、新しいビューが表示されます。

00:20:35.000 --> 00:20:37.000
新しい要素が表示されます。これはボリュームです。

00:20:37.000 --> 00:20:43.000
これには、いくつかのUI要素とともに、地球の3Dモデルが含まれています。

00:20:43.000 --> 00:20:52.000
ウィンドウバーを動かすことで、音量の位置は周囲のどこでも調整できます。

00:20:52.000 --> 00:21:02.000
再びメインウィンドウに戻り、「宇宙空間を見る」を選択すると、太陽系に入るための招待状が表示されます。

00:21:02.000 --> 00:21:07.000
ここから、「フル」のイマージョンスタイルでここに示されている空間に入ることができます。

00:21:07.000 --> 00:21:15.000
私たちの例は、惑星地球をレンダリングし、パススルーを暗くし、周囲の気を散らすことなくコンテンツに集中することができます。

00:21:15.000 --> 00:21:24.000
これがどのように見えるかを見たので、Hello Worldの機能のいくつかを分解し、これらの概念を独自のアプリで使用する方法を紹介しましょう。

00:21:24.000 --> 00:21:30.000
ジムから学んだように、ウィンドウ、ボリューム、スペースなど、複数の要素があります。

00:21:30.000 --> 00:21:38.000
これは、特定の瞬間にアプリを使用する人々にとって何が最善かに応じて、アプリが上下に曲がるために使用できるスペクトルとして見ることができます。

00:21:38.000 --> 00:21:44.000
共有スペースに1つまたは複数のウィンドウを表示することを選択できます。

00:21:44.000 --> 00:21:49.000
彼らはパススルーを見ることができ、他のアプリを並べて持つ選択肢があります。

00:21:49.000 --> 00:21:54.000
または...アプリがスペースを完全に引き継ぐことで、イマージョンレベルを上げることを選択できます。

00:21:54.000 --> 00:22:05.000
特定の瞬間にアプリの経験に最も適した要素を見つけ、それらの間で曲げることは、空間コンピューティングのためにアプリを設計する際に重要な考慮事項です。

00:22:05.000 --> 00:22:10.000
次に、あなたの経験の一部としてWindowsを使用する方法をさらに見てみましょう。

00:22:10.000 --> 00:22:13.000
Windowsはアプリの出発点として機能します。

00:22:13.000 --> 00:22:18.000
それらはシーンを使用してSwiftUIで構築されており、従来のビューとコントロールが含まれています。

00:22:18.000 --> 00:22:23.000
このプラットフォームのWindowsは、2Dコンテンツと3Dコンテンツの混合をサポートしています。

00:22:23.000 --> 00:22:28.000
これは、3Dコンテンツを2D UIと一緒にウィンドウで表示できることを意味します。

00:22:28.000 --> 00:22:32.000
Windowsはスペースでサイズ変更および配置を変更できます。

00:22:32.000 --> 00:22:35.000
人々は自分の好みに合わせてそれらを配置することができます。

00:22:35.000 --> 00:22:37.000
私たちの例に戻りましょう。

00:22:37.000 --> 00:22:47.000
Hello Worldでは、コンテンツビューには、SwiftUIの画像、テキスト、ボタン、およびより没入感のあるコンテンツを得るための行動の呼びかけが保持されます。

00:22:47.000 --> 00:22:51.000
ウィンドウの作成は、シーンにWindowGroupを追加するのと同じくらい簡単です。

00:22:51.000 --> 00:22:55.000
WindowGroup内では、コンテンツビューを表示します。

00:22:55.000 --> 00:23:00.000
当社のコンテンツビューは、3Dコンテンツを追加して、アプリに新しい次元の深さをもたらすことができます。

00:23:00.000 --> 00:23:03.000
これを行うには、新しいModel3Dビューを使用できます。

00:23:03.000 --> 00:23:11.000
Model3Dは画像に似ており、RealityKitによってレンダリングされたアプリに美しい3Dコンテンツを簡単にロードして表示できます。

00:23:11.000 --> 00:23:17.000
Model3Dをビューに追加するには、衛星モデルの名前を渡してModel3Dを初期化します。

00:23:17.000 --> 00:23:23.000
これにより、Model3Dはモデルを見つけてロードし、ビュー階層に配置します。

00:23:23.000 --> 00:23:32.000
今、このウィンドウにはビューに衛星が埋め込まれており、z軸から出てくるのを見ることができ、アプリに新しい次元の深さを追加します。

00:23:32.000 --> 00:23:34.000
衛星を追加したので、インタラクションを追加できます。

00:23:34.000 --> 00:23:39.000
インタラクションは基本的にシステムに組み込まれ、SwiftUIによって提供されます。

00:23:39.000 --> 00:23:49.000
SwiftUIは、Tap、onHover、RotateGestureなど、Appleプラットフォームですでに慣れ親しんでいるジェスチャーリコグナイザを提供します。

00:23:49.000 --> 00:23:57.000
このプラットフォームは、3D空間での回転、3Dオブジェクトのタップなど、3Dインタラクション用に作られた新しいジェスチャーリコグナイザを提供します。

00:23:57.000 --> 00:24:01.000
衛星との相互作用を可能にするコードを見てみましょう。

00:24:01.000 --> 00:24:06.000
衛星をつかんで移動できるように、空間タップジェスチャーを有効にします。

00:24:06.000 --> 00:24:10.000
Model3Dから始めて、ジェスチャーを追加できるようになりました。

00:24:10.000 --> 00:24:14.000
内部には、衛星エンティティを対象としたDragGestureを追加します。

00:24:14.000 --> 00:24:19.000
その後、更新クロージャから渡された値を使用して衛星を移動できます。

00:24:19.000 --> 00:24:22.000
それがどのように見えるか見てみましょう。

00:24:22.000 --> 00:24:33.000
衛星がレンダリングされている衛星ビューに戻ると、DragGestureを使用すると、モデルをタップしてドラッグし、インタラクションで移動できます。

00:24:33.000 --> 00:24:39.000
先ほど見たように、2Dと3DのコンテンツをModel3Dと組み合わせるのは簡単です。

00:24:39.000 --> 00:24:41.000
これらは窓でできることのほんの一部です。

00:24:41.000 --> 00:24:46.000
では、別のタイプの要素、ボリュームを見てみましょう。

00:24:46.000 --> 00:24:48.000
ボリュームが何を提供しなければならないか見てみましょう。

00:24:48.000 --> 00:24:53.000
ボリュームはウィンドウの拡張機能であり、同様の機能を提供します。

00:24:53.000 --> 00:24:58.000
ボリュームは、3Dコンテンツに最適な新しいスタイルのウィンドウです。

00:24:58.000 --> 00:25:03.000
彼らはあなたの2Dまたは3Dコンテンツを含む複数のSwiftUIビューをホストすることができます。

00:25:03.000 --> 00:25:12.000
ボリュームはフルスペースで使用できますが、実際には共有スペース用に構築されているため、コンテンツはボリュームの範囲内にとどまる必要があります。

00:25:12.000 --> 00:25:15.000
シーンにボリュームを追加する方法を見てみましょう。

00:25:15.000 --> 00:25:20.000
まず、新しいWindowGroupを作成し、そのwindowStyleをvolumetricに設定します。

00:25:20.000 --> 00:25:26.000
次に、プロパティの幅、高さ、深さを含むdefaultSizeを指定する必要があります。

00:25:26.000 --> 00:25:30.000
体積の単位は、ポイントまたはメーターで指定できます。

00:25:30.000 --> 00:25:32.000
シミュレーターで実行されているこの実行を見てみましょう。

00:25:32.000 --> 00:25:37.000
アプリケーションが提示されると、ボリュームは人の前に置かれます。

00:25:37.000 --> 00:25:57.000
このボリュームには、プラットフォームコントロールとともに、指定した寸法があります。アプリケーションタイトルバーは、アプリ名を表示し、このボリュームがどのアプリに属しているかを簡単に識別できます。ウィンドウバー、ボリュームを配置できるようにします。閉じるボタンは、タップしたときにアプリを一時停止し、ボリュームを閉じます。

00:25:57.000 --> 00:26:04.000
現在、私たちのボリュームは地球の3Dモデルをレンダリングしていますが、より多くのコンテンツと異なる動作を追加し始めることをお勧めします。

00:26:04.000 --> 00:26:09.000
これを行うには、アプリの一部としてRealityViewを採用できます。

00:26:09.000 --> 00:26:18.000
RealityViewは、シーンに追加できる新しいビューで、SwiftUI内で任意の数のエンティティを直接管理できます。

00:26:18.000 --> 00:26:25.000
SwiftUIとRealityViewを使用すると、SwiftUIの管理された状態とエンティティのプロパティに接続することで、アプリを簡単に統合できます。

00:26:25.000 --> 00:26:31.000
これにより、アプリのデータモデルからの真実のソースを使用して、3Dモデルの動作を簡単に推進できます。

00:26:31.000 --> 00:26:43.000
座標空間間の変換は、RealityViewが提供する変換機能で簡単で、RealityViewは添付ファイルを介して3Dシーン内にSwiftUI要素を配置する方法を提供します。

00:26:43.000 --> 00:26:48.000
少し時間を取って、RealityView内で添付ファイルを使用する方法を見てみましょう。

00:26:48.000 --> 00:26:56.000
使用するRealityView初期化子には、makeクロージャ、更新クロージャ、添付ファイルViewBuilderの3つのパラメータが必要です。

00:26:56.000 --> 00:27:01.000
Makeクロージャを使用すると、エンティティを作成してルートエンティティにアタッチできます。

00:27:01.000 --> 00:27:05.000
ビューの状態が変更されるたびに呼び出される更新クロージャ。

00:27:05.000 --> 00:27:15.000
そして最後に、添付ファイルのクロージャは、RealityViewがビューをエンティティに変換できるようにするタグプロパティでSwiftUIビューを追加する場所です。

00:27:15.000 --> 00:27:20.000
では、RealityViewで添付ファイルを使用する方法の例を見ていきます。

00:27:20.000 --> 00:27:26.000
添付ファイルの追加は、SwiftUIビューをRealityViewの添付ファイルクロージャーに入れるのと同じくらい簡単です。

00:27:26.000 --> 00:27:31.000
このおいしいペストリーのアイコンを使って、3Dグローブの場所を表現しましょう。

00:27:31.000 --> 00:27:35.000
添付ファイルごとに、添付ファイルに名前を付けるタグを追加する必要があります。

00:27:35.000 --> 00:27:38.000
私はこれを「ピン」と名付けます。

00:27:38.000 --> 00:27:41.000
添付ファイルを表示するには、RealityViewのコンテンツに追加します。

00:27:41.000 --> 00:27:46.000
アップデートクロージャで、シーンのルートエンティティに追加します。

00:27:46.000 --> 00:27:53.000
ここでは、以前に作成した添付ファイルを見ることができ、私のお気に入りのパン屋の場所の上に地球上にレンダリングされています。

00:27:53.000 --> 00:28:02.000
先ほど見たように、RealityKitを使用すると、Model3D、RealityView、添付ファイルなどの強力な機能が解放されます。

00:28:02.000 --> 00:28:05.000
これらはあなたのアプリに簡単に統合できます。

00:28:05.000 --> 00:28:09.000
これは、RealityKitができることの表面を引っ掻いているだけです。

00:28:09.000 --> 00:28:20.000
もっと知りたい場合は、「RealityKitで空間体験を構築する」と「RealityKitで空間コンピューティングアプリを強化する」を見ることをお勧めします。

00:28:20.000 --> 00:28:23.000
これまでに経験したことを要約しましょう。

00:28:23.000 --> 00:28:27.000
ボリュームは、2Dおよび3Dコンテンツに最適なコンテナです。

00:28:27.000 --> 00:28:34.000
ボリュームは共有スペース用に構築され、ウィンドウと共存でき、指定された次元に制限されています。

00:28:34.000 --> 00:28:40.000
次に、最後のタイプの要素であるスペースに飛び込みましょう。

00:28:40.000 --> 00:28:47.000
アプリが専用のフルスペースを開くと、システムは他のすべてのアプリを非表示にし、アプリのみを表示したままにします。

00:28:47.000 --> 00:28:53.000
これで、アプリのウィンドウ、ボリューム、コンテンツを周りのどこにでも配置できます。

00:28:53.000 --> 00:28:59.000
ARKitとRealityKitのおかげで、仮想コンテンツは周囲と対話することさえできます。

00:28:59.000 --> 00:29:06.000
仮想ボールを部屋に投げて、それが壁から跳ね返って床に転がるのを見ることができます。

00:29:06.000 --> 00:29:13.000
また、ハンドトラッキングを追加して、カスタムジェスチャーやインタラクションを構築したり、人々の手に関連してコンテンツを配置したりできます。

00:29:13.000 --> 00:29:16.000
これらの機能の多くはARKitから来ています。

00:29:16.000 --> 00:29:24.000
より深く掘り下げ、アプリでそれらを活用する方法を学ぶには、「空間コンピューティングのためのARKitに会う」セッションを必ずチェックしてください。

00:29:24.000 --> 00:29:32.000
スペースを使用すると、作成時にどのスタイルが選択されるかに応じて、アプリはさまざまなレベルの没入感を提供することもできます。

00:29:32.000 --> 00:29:36.000
ジムは、フルスペースで利用可能な没入のスペクトルについて少し話しました。

00:29:36.000 --> 00:29:41.000
飛び込んで、アプリにもっと没頭する方法についてもっと学びましょう。

00:29:41.000 --> 00:29:45.000
イマージョンスタイルは、フルスペースで渡すことができるパラメータです。

00:29:45.000 --> 00:29:49.000
.Mixedと.fullと呼ばれる2つの基本的なスタイルがあります。

00:29:49.000 --> 00:29:53.000
混合スタイルは、パススルーの上にアプリのコンテンツを重ねます。

00:29:53.000 --> 00:29:58.000
フルスタイルはパススルーを隠し、コンテンツのみを表示します。

00:29:58.000 --> 00:30:01.000
プログレッシブを選択して、2つを組み合わせることもできます。

00:30:01.000 --> 00:30:12.000
このスタイルは、最初はいくつかのパススルーを可能にしますが、デバイスの上部にあるデジタルクラウンを回すことで、没入のレベルを完全に変更することができます。

00:30:12.000 --> 00:30:15.000
私たちの例に戻って、イマージョンスタイルを探りましょう。

00:30:15.000 --> 00:30:17.000
私は混合スタイルから始めて、それがどのように見えるか見てみます。

00:30:17.000 --> 00:30:23.000
また、Full SpaceはSwiftUIシーンなので、RealityViewを使って地球を表示できます。

00:30:23.000 --> 00:30:29.000
これが高軌道から見た地球です...そしてこれが私のアプリでシーンを表示する方法です。

00:30:29.000 --> 00:30:32.000
実際にイマージョンスタイルを指定していないことに注意してください。

00:30:32.000 --> 00:30:38.000
なぜなら、没入型スペースを作成すると、SwiftUIはデフォルトで混合スタイルを想定しているからです。

00:30:38.000 --> 00:30:42.000
また、別のイマージョンスタイルを追加して、アプリを完全に没入させましょう。

00:30:42.000 --> 00:30:46.000
今回は、イマージョンスタイル「フル」を使用します。

00:30:46.000 --> 00:30:50.000
ImmersiveSpaceの最後に没入型スタイルを追加するのは簡単です。

00:30:50.000 --> 00:30:55.000
没入型スタイルを状態変数に保存し、タイプをフルに設定します。

00:30:55.000 --> 00:31:04.000
私たちは人々に没入型体験に入るときの選択肢を与えたいので、この没入型スタイルに入るかどうかを決定できるようにボタンを追加することをお勧めします。

00:31:04.000 --> 00:31:08.000
では、新しい没入型スタイルの動作を見てみましょう。

00:31:08.000 --> 00:31:16.000
私たちのアプリに戻って、私はハローワールドを1つのウィンドウから完全に没頭させ、あらゆる角度から惑星地球を見ることができるようにしました。

00:31:16.000 --> 00:31:20.000
そして、それはあなたの空間アプリでできることの始まりにすぎません。

00:31:20.000 --> 00:31:22.000
ここからどこに行けるか見てみましょう。

00:31:22.000 --> 00:31:28.000
このセッションでは、基本、つまり開始方法を取り上げ、アプリ構築の基本を説明しました。

00:31:28.000 --> 00:31:41.000
空間デザインの原則について、SwiftUIとRealityKitを使用したアプリの構築について学んだり、3Dコンテンツの作成を開始したりするなど、次の目的地となる素晴らしいセッションがいくつかあります。

00:31:41.000 --> 00:31:46.000
空間コンピューティングを使用すると、アプリの作成は、あなたの創意工夫に導かれた新しいエキサイティングな道に挑戦することができます。

00:31:46.000 --> 00:31:47.000
見てくれてありがとう!

00:31:47.000 --> 23:59:59.000
♪

