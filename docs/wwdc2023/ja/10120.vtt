WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:13.000
こんにちは、私はレイチェルです。私はSafariチームのエンジニアです。

00:00:13.000 -> 00:00:17.000
今日は、ウェブアプリの新機能を共有することに興奮しています。

00:00:17.000 -> 00:00:22.000
私たちは最初のiPhoneのリリース以来、ウェブアプリで旅をしてきましたが、彼らはますます良くなっています。

00:00:22.000 -> 00:00:31.000
iOSとiPadOS 16.4では、バッジをサポートするWebプッシュ標準を使用して、ホーム画面のWebアプリに通知を追加しました。

00:00:31.000 -> 00:00:39.000
また、ホーム画面に追加を採用するために、iOSとiPadOSブラウザ用のAPIを追加しました。

00:00:39.000 -> 00:00:46.000
iOSとiPadOS 17の新機能、ホーム画面に追加がSafari View Controllerで利用可能になりました。

00:00:46.000 -> 00:00:51.000
そのため、ユーザーはiOSブラウザや多くのアプリ内ブラウザでホーム画面のウェブアプリを追加できるようになりました。

00:00:51.000 -> 00:00:56.000
macOS Sonomaの新機能で、Macにウェブアプリがあります。

00:00:56.000 -> 00:01:04.000
Macのウェブアプリを使用すると、他のブラウジングとは別の専用の方法で、常に使用しているウェブサイトに集中できます。

00:01:04.000 -> 00:01:11.000
iOSと同様に、ウェブアプリを作成する方法は、Dockにウェブサイトを追加することです。

00:01:11.000 -> 00:01:15.000
ウィキペディアを閲覧していますが、Dockに追加したいです。

00:01:15.000 -> 00:01:19.000
ファイルメニューを開き、「ドックに追加...」を選択します。

00:01:19.000 -> 00:01:23.000
これで、このサイトのアイコン、名前、URLを見ることができます。

00:01:23.000 -> 00:01:25.000
名前を簡略化します。

00:01:25.000 -> 00:01:30.000
必要に応じてアイコンを変更することもできますが、これは良さそうです。

00:01:30.000 -> 00:01:33.000
「追加」を押すと、Dockに新しいアイコンが表示されます。

00:01:33.000 -> 00:01:40.000
とりあえずSafariを閉じて、ウィキペディアのウェブアプリを開きます。

00:01:40.000 -> 00:01:45.000
このウェブアプリを立ち上げたら、アプリのように感じる方法でこのサイトを使用することができます。

00:01:45.000 -> 00:01:47.000
私はまだ自分のアカウントにログインしています。

00:01:47.000 -> 00:01:52.000
これは、SafariがDockに追加されたときにウェブサイトのクッキーをコピーするためです。

00:01:52.000 -> 00:01:55.000
ナビゲーションボタン付きの簡略化されたツールバーがあります。

00:01:55.000 -> 00:01:59.000
そして、サイトのテーマの色はツールバーに溶け込みます。

00:01:59.000 -> 00:02:03.000
開発者として、ナビゲーションボタンを表示するかどうかを制御できます。

00:02:03.000 -> 00:02:09.000
今日はまず、すべてのWebサイトでMac上のWebアプリが箱から出してどのように機能するかについて説明します。

00:02:09.000 -> 00:02:16.000
次に、ウェブアプリの動作をカスタマイズして、ユーザーに最適なエクスペリエンスを作成する方法についてお教えします。

00:02:16.000 -> 00:02:26.000
最後に、音声やバッジなどの通知について説明し、ウェブアプリを積極的に使用していない場合でも、ユーザーにリーチする方法を提供します。

00:02:26.000 -> 00:02:29.000
ウェブアプリが箱から出してすぐにどのように機能するかから始めましょう。

00:02:29.000 -> 00:02:33.000
Mac上のウェブアプリは、開発者が採用を必要とせず、うまく機能します。

00:02:33.000 -> 00:02:36.000
どのウェブサイトもウェブアプリになることができます。

00:02:36.000 -> 00:02:44.000
Macのウェブアプリは、macOSのネイティブアプリに期待される多くの機能と完全に統合されています。

00:02:44.000 -> 00:02:48.000
すでにDockに追加したウェブアプリを見てみましょう。

00:02:48.000 -> 00:02:57.000
このサイトには、ウェブアプリマニフェストなどのウェブアプリ固有の機能はなく、見た目も素晴らしく、スタンドアロンのウェブアプリとして機能します。

00:02:57.000 -> 00:03:05.000
すべてのMacアプリと同様に、WebアプリはStage Manager、Mission Control、およびコマンド+タブなどのキーボードショートカットでうまく機能します。

00:03:05.000 -> 00:03:10.000
ウェブアプリは、Dock、Launchpad、Spotlight Searchから開くことができます。

00:03:10.000 -> 00:03:20.000
ウェブアプリは、iCloudキーチェーンおよびCredential Provider Extension APIを採用したサードパーティのアプリからの自動入力資格情報で動作します。

00:03:20.000 -> 00:03:35.000
私たちは人々がプライバシーをコントロールできるようにし、システム許可プロンプトとシステム設定のプライバシーとセキュリティセクションで、ネイティブアプリと同じ方法でウェブアプリへのカメラ、マイク、および位置情報アクセスを許可することができます。

00:03:35.000 -> 00:03:40.000
それはデフォルトの動作でしたが、あなたのウェブサイトを使用する人々のために体験をカスタマイズしたいかもしれません。

00:03:40.000 -> 00:03:45.000
ウェブページがmacOSのDockに追加されると、常にウェブアプリとして扱われます。

00:03:45.000 -> 00:03:50.000
開発者として、ウェブアプリのウィンドウのツールバーの初期動作を制御できます。

00:03:50.000 -> 00:03:54.000
デフォルトの動作は、ナビゲーションコントロール付きのツールバーを示しています。

00:03:54.000 -> 00:04:00.000
これは、独自のナビゲーションコントロールがないサイトをナビゲートするのに役立ちます。

00:04:00.000 -> 00:04:09.000
サイトに独自のナビゲーションコントロールがある場合、またはサイトのコンテキストでナビゲーションコントロールが不要な場合は、ツールバーを表示したくない場合があります。

00:04:09.000 -> 00:04:13.000
これはスタンドアロン表示モードと呼ばれます。

00:04:13.000 -> 00:04:17.000
iOSのデフォルトの動作はmacOSとは異なります。

00:04:17.000 -> 00:04:21.000
ホーム画面に追加されたウェブサイトがデフォルトのブラウザで開きます。

00:04:21.000 -> 00:04:28.000
これにより、ユーザーはホーム画面から直接一般的に使用されるサイトにすばやくアクセスできます。

00:04:28.000 -> 00:04:36.000
スタンドアロンの表示モードで、iOSとiPadOSのホーム画面に追加されたウェブサイトは、ホーム画面のウェブアプリになります。

00:04:36.000 -> 00:04:44.000
ホーム画面のウェブアプリは、ブラウザとは別のクッキーとストレージを備えた、iOSでスタンドアロンのアプリのような体験を提供します。

00:04:44.000 -> 00:04:50.000
ツールバーなどのブラウザが提供するUIはなく、すべてのコンテンツはウェブページからのものです。

00:04:50.000 -> 00:04:57.000
サイトがiOSでWebプッシュとバッジを使用できるようにしたい場合は、スタンドアロンの表示モードを使用する必要があります。

00:04:57.000 -> 00:05:01.000
表示モードを設定するには。ウェブアプリのマニフェストを自分のサイトに追加します。

00:05:01.000 -> 00:05:09.000
ウェブアプリマニフェストは、ウェブサイトがウェブアプリ関連の機能の意図した動作をシステムに伝える方法です。

00:05:09.000 -> 00:05:17.000
WebアプリマニフェストをWebサイトに追加するには、HTMLの先頭にあるJSONファイルにrel="manifest"のリンクを追加するだけです。

00:05:17.000 -> 00:05:21.000
私は「manifest.json」と呼びました。

00:05:21.000 -> 00:05:26.000
対応するマニフェストファイルに、Webサイトに適用されるキーと値を追加します。

00:05:26.000 -> 00:05:36.000
私の名前はかなり長いので、これはウェブサイトのタイトルではなく、ウェブアプリの名前として使いたいので、最初に名前を設定します。

00:05:36.000 -> 00:05:39.000
表示モードを変更するには、表示を「スタンドアロン」に設定します。

00:05:39.000 -> 00:05:43.000
macOSでは、ウェブアプリにはツールバーがありません。

00:05:43.000 -> 00:05:49.000
iOSとiPadOSでは、サイトはデフォルトのブラウザではなく、ホーム画面のウェブアプリで開きます。

00:05:49.000 -> 00:05:53.000
では、ウェブアプリ内でクリックされたリンクが開いた場所を取り上げましょう。

00:05:53.000 -> 00:05:55.000
すべてのウェブアプリには関連するスコープがあります。

00:05:55.000 -> 00:05:59.000
スコープ内のリンクは、ウェブアプリ内で開きます。

00:05:59.000 -> 00:06:03.000
デフォルトのスコープは、ウェブアプリの作成に使用されるウェブページのホストです。

00:06:03.000 -> 00:06:11.000
ウェブアプリマニフェストを使用してスコープをさらに絞り込み、サイトの特定のパスに制限することができます。

00:06:11.000 -> 00:06:24.000
たとえば、ブラウザペットウェブアプリでこのリンクをクリックして別のページ「webkittens」に移動すると、Web Kittensはexample.comの下で私たちのサイトの単なる別のページであるため、私たちはウェブアプリ内にとどまっていることに気付くでしょう。

00:06:24.000 -> 00:06:32.000
Apple.comへのリンクをクリックすると、example.comの範囲外であるため、デフォルトのブラウザで開きます。

00:06:32.000 -> 00:06:42.000
apple.comへのリンクのように、デフォルトのブラウザでWeb Kittensへのリンクを開きたい場合は、Webアプリのマニフェストでスコープを調整できます。

00:06:42.000 -> 00:06:47.000
スコープを調整するには、まず「start_url」を追加することから始めます。

00:06:47.000 -> 00:06:51.000
start_urlは、ウェブアプリが最初に開いたときに読み込まれるURLです。

00:06:51.000 -> 00:06:55.000
これにより、ブラウザペットのホームページが開きます。

00:06:55.000 -> 00:06:57.000
では、スコープを追加します。

00:06:57.000 -> 00:07:04.000
ブラウザペットとウェブ子猫を別のウェブアプリに分けたいとすると、範囲をブラウザペットだけに制限できます。

00:07:04.000 -> 00:07:07.000
スコープはマニフェストURLのサブディレクトリです。

00:07:07.000 -> 00:07:12.000
この場合、スコープはexample.com/browserpetsになります。

00:07:12.000 -> 00:07:19.000
スコープ内のリンクはウェブアプリ内にとどまり、スコープ外のリンクはデフォルトのブラウザで開きます。

00:07:19.000 -> 00:07:26.000
iOSのホーム画面のウェブアプリでは、スコープ外のリンクがSafari View Controllerで開きます。

00:07:26.000 -> 00:07:32.000
したがって、このホーム画面のウェブアプリでこのリンクをタップすると、Safari View Controllerで開きます。

00:07:32.000 -> 00:07:37.000
日常的に使用している多くのウェブサイトを最大限に活用するには、ログインする必要があります。

00:07:37.000 -> 00:07:46.000
先に述べたように、ほとんどのユーザーにとってウェブアプリを箱から出してすぐに機能させるために、Mac上のウェブアプリがDockに追加されたときにウェブサイトのクッキーをコピーします。

00:07:46.000 -> 00:07:51.000
多くの場合、シームレスな体験のためにウェブアプリが開かれたとき、ユーザーはログインしたままです。

00:07:51.000 -> 00:07:56.000
その時点で、クッキーはSafariとウェブアプリの間で分離されています。

00:07:56.000 -> 00:08:09.000
認証状態がサイトのクッキーにのみ保存されている場合、SafariがDockに追加されたときにWebサイトのCookieをWebアプリにコピーするため、ユーザーはDockに追加するときにWebアプリに自動的にログインする必要があります。

00:08:09.000 -> 00:08:14.000
一部のウェブサイトは、クッキーとローカルストレージの間で認証状態を分割します。

00:08:14.000 -> 00:08:22.000
ウェブアプリの作成時にローカルストレージがコピーされないため、ユーザーはサイトをウェブアプリとして使い続けるために再認証する必要があります。

00:08:22.000 -> 00:08:28.000
ユーザーにスムーズな体験を提供するには、認証状態をクッキー内に保存してください。

00:08:28.000 -> 00:08:34.000
前に述べたように、ウェブアプリの範囲を超えたリンクはデフォルトのブラウザで開きます。

00:08:34.000 -> 00:08:45.000
ユーザーがデフォルトのブラウザでWebページにログインすると、Webアプリが追加された後、Cookieとストレージが分離されるため、Dockにすでに追加されたWebアプリにログインされません。

00:08:45.000 -> 00:08:50.000
サードパーティのドメインでのOAuthによる認証は、引き続きウェブアプリで開きます。

00:08:50.000 -> 00:08:52.000
これはヒューリスティックによって行われます。

00:08:52.000 -> 00:09:02.000
テストして、OAuthフローがユーザーのデフォルトブラウザで認証エクスペリエンスを開くことが判見された場合は、apple.com/feedbackを使用してフィードバックを送信してください。

00:09:02.000 -> 00:09:09.000
ユーザーのデフォルトブラウザでOAuthフローが開かないようにしたい場合は、window.openを使用できます。

00:09:09.000 -> 00:09:15.000
Window.openから読み込まれたリンクは、スコープに関係なく、常にウェブアプリで開きます。

00:09:15.000 -> 00:09:25.000
Appleは、認証ドメインへのリンクがウェブアプリのコンテキスト内にとどまるべきであることを示す方法を開発者に提供するために、標準化団体と協力しています。

00:09:25.000 -> 00:09:30.000
一部のWebサイトでは、電子メールリンクを使用して、リンクを開いてユーザーに自動的にサインインします。

00:09:30.000 -> 00:09:38.000
電子メールからのリンクはデフォルトのブラウザで開くため、ユーザーがすでに持っているウェブアプリに自動的にサインインすることはありません。

00:09:38.000 -> 00:09:47.000
ユーザーがサイトのサインインフローに簡単に入力できる代替のワンタイムコードを電子メールで提供することをお勧めします。

00:09:47.000 -> 00:09:54.000
より便利で安全な認証体験のために、サイトでの認証にパスキーを採用することを検討してください。

00:09:54.000 -> 00:10:00.000
詳細については、WWDC22の「Meet passkeys」をチェックしてください。

00:10:00.000 -> 00:10:13.000
MacのWebアプリの通知は、macOS VenturaのSafariとiOS 16.4のホーム画面のWebアプリの既存の標準ベースのWebプッシュサポートへのエキサイティングな追加です。

00:10:13.000 -> 00:10:19.000
次に、バッジやサウンドなどの通知をウェブアプリに統合する方法を説明します。

00:10:19.000 -> 00:10:29.000
すでにWeb標準に従ってWebプッシュを実装している場合、プッシュ通知は追加の作業なしでMac上のWebアプリとしてWebページで動作するはずです。

00:10:29.000 -> 00:10:38.000
Mac上のウェブアプリの通知は、通知のウェブアプリのアプリケーションアイコンを使用します。

00:10:38.000 -> 00:10:50.000
SafariからのWebプッシュ通知にはSafariアイコンが表示され、MacのWebアプリからの通知は通知のWebアプリのアイコンを使用し、ユーザーにコンテキストを提供します。

00:10:50.000 -> 00:11:00.000
ユーザーの注意を引くための通知を受け取ったときに、ユーザーのデバイスでサウンドを再生したいかもしれないので、macOS、iOS、iPadOSでそれがどのように機能するかを説明します。

00:11:00.000 -> 00:11:06.000
通知APIを使用すると、通知に音声があるかどうかを指定できます。

00:11:06.000 -> 00:11:15.000
プラットフォームの慣習に従って、サウンドはiOSとiPadOSではデフォルトでオンになっており、macOSではサウンドはデフォルトでオフになっています。

00:11:15.000 -> 00:11:20.000
プラットフォームのデフォルトを上書きするには、サイレント値を明示的に指定します。

00:11:20.000 -> 00:11:26.000
通知がサイレントでなければならない場合は、通知をリクエストするときにオプションでサイレントをtrueに設定します。

00:11:26.000 -> 00:11:31.000
通知が鳴る場合は、サイレントをfalseに設定します。

00:11:31.000 -> 00:11:39.000
ネイティブアプリの通知と同様に、ユーザーは通知設定を使用して通知音を制御できます。

00:11:39.000 -> 00:11:45.000
バッジは、ウェブアプリに何か対処すべきものがあることをユーザーに警告するのに便利です。

00:11:45.000 -> 00:11:51.000
iOS 16.4のホーム画面のウェブアプリと同様に、Macのウェブアプリはバッジをサポートしています。

00:11:51.000 -> 00:12:05.000
バッジとプッシュ通知はmacOS、iOS、iPadOSで非常に密接に関連しているため、ユーザーがウェブアプリが通知を送信することを許可する場合、ウェブアプリがバッジを使用する許可が含まれます。

00:12:05.000 -> 00:12:11.000
バッジは、ウェブアプリが開いているときや、プッシュイベントがバックグラウンドで処理されているときに更新できます。

00:12:11.000 -> 00:12:16.000
ユーザーはいつでも設定でバッジを設定できます。

00:12:16.000 -> 00:12:25.000
Badging APIの採用の詳細については、webkit.orgの「ホーム画面Webアプリのバッジ」をご覧ください。

00:12:25.000 -> 00:12:35.000
標準ベースのWebプッシュの採用の詳細については、WWDC22の「Meet Web Push for Safari」をご覧ください。

00:12:35.000 -> 00:12:42.000
iOSのホーム画面のウェブアプリとMacのウェブアプリはFocusと統合され、ユーザーが通知を制御できるようにします。

00:12:42.000 -> 00:12:50.000
ユーザーは、異なるフォーカスモードで見たい通知を設定し、すべてのデバイスでフォーカスモードに設定を適用できます。

00:12:50.000 -> 00:12:54.000
ウェブアプリのマニフェストを振り返ってみましょう。

00:12:54.000 -> 00:12:59.000
「Id」マニフェストキーは、同じドメイン内の一意のウェブアプリを定義します。

00:12:59.000 -> 00:13:08.000
これはフォーカスモードの同期に使用され、同じドメインで異なるWebアプリとして扱われるべきWebサイトの複数の部分がある場合に便利です。

00:13:08.000 -> 00:13:13.000
特定のドメインのウェブアプリが1つしかない場合は、IDを設定する必要はありません。

00:13:13.000 -> 00:13:16.000
IDが提供されない場合のフォールバックはstart_urlです。

00:13:16.000 -> 00:13:22.000
フォーカスの大きな部分の1つは、フォーカスモードがユーザーのすべてのデバイスでどのように同期するかです。

00:13:22.000 -> 00:13:27.000
あなたとあなたのユーザーの両方が、フォーカスモードの設定の同期方法を制御します。

00:13:27.000 -> 00:13:31.000
開発者として、サイトのさまざまな部分に対して異なるウェブアプリを持っているかもしれません。

00:13:31.000 -> 00:13:37.000
たとえば、ショップ用のウェブアプリが1つ、フォーラム用のウェブアプリが1つあります。

00:13:37.000 -> 00:13:42.000
ここでは、「名前」列は、ユーザーのiPhoneまたはMac上のウェブアプリの名前です。

00:13:42.000 -> 00:13:53.000
ウェブアプリマニフェストのIDキーは、ID「ショップ」で作成されたウェブアプリがあなたのショップ用であり、ID「フォーラム」で作成されたウェブアプリがあなたのコミュニティのフォーラム用であることを示すために使用できます。

00:13:53.000 -> 00:14:00.000
このようにして、ユーザーはショップとフォーラムのウェブアプリに異なる通知設定を設定できます。

00:14:00.000 -> 00:14:04.000
フォーカスモードは、名前とIDが一致すると、ユーザーのデバイス間で同期します。

00:14:04.000 -> 00:14:10.000
ユーザーは、デバイス上の特定のサイトのウェブアプリの複数のインスタンスを作成できます。

00:14:10.000 -> 00:14:13.000
これは、仕事と個人のアカウントを分離するのに役立ちます。

00:14:13.000 -> 00:14:16.000
ユーザーは、インスタンスごとに異なる名前を選択できます。

00:14:16.000 -> 00:14:20.000
この例では、「フォーラム」と「フォーラム - 仕事」。

00:14:20.000 -> 00:14:29.000
このようにして、ユーザーは、すべてのデバイス間で同期するフォーラムウェブアプリごとに異なる通知とフォーカス設定を設定できます。

00:14:29.000 -> 00:14:36.000
今年WebKitに追加したAPIがいくつかありますが、ウェブサイトを作成する際に役立つかもしれません。

00:14:36.000 -> 00:14:44.000
一時的またはスティッキーなユーザーアクティベーションが発生したときにウェブサイトに通知するユーザーアクティベーションAPIをサポートしています。

00:14:44.000 -> 00:14:53.000
これは、通知を送信する許可を要求するなど、ユーザーのアクティベーションに依存する関数を呼び出しても大丈夫かどうかを判断するのに役立ちます。

00:14:53.000 -> 00:15:01.000
macOSとiPadOS用のSafari 16.4で、更新されたプレフィックスなしのフルスクリーンAPIを出荷しました。

00:15:01.000 -> 00:15:12.000
また、タイプと角度のプロパティ、onChangeイベントハンドラなど、スクリーンオリエンテーションAPIの予備的なサポートを追加しました。

00:15:12.000 -> 00:15:18.000
詳細については、webkit.orgの「Safari 16.4のWebKit機能」をチェックしてください。

00:15:18.000 -> 00:15:21.000
Mac上のウェブアプリは、すべてのウェブサイトで箱から出して動作します。

00:15:21.000 -> 00:15:28.000
ウェブアプリマニフェストを使用して、ウェブサイトがDockに追加されたときの動作をカスタマイズできます。

00:15:28.000 -> 00:15:33.000
ウェブプッシュやバッジなど、ウェブアプリに合わせた機能を実装できます。

00:15:33.000 -> 00:15:44.000
SafariでのWebサイトの開発とデバッグの詳細については、WWDC23の「Safari開発者機能の再発見」と「Web Inspectorの新機能」をご覧ください。

00:15:44.000 -> 00:15:45.000
ご覧いただきありがとうございます。

00:15:45.000 -> 00:15:48.000
WWDC23をお楽しみください。

00:15:48.000 -> 23:59:59.000
♪ ♪

