WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
ロマン：こんにちは、私の名前はロマンで、Xcode Cloudで働いているエンジニアです。

00:00:14.000 --> 00:00:20.000
Xcode Cloudは、チームの開発プロセスに統合できるほど柔軟な強力なツールです。

00:00:20.000 --> 00:00:25.000
生産性を高め、より良いアプリを顧客に提供するのに役立ちます。

00:00:25.000 --> 00:00:34.000
このセッションでは、現実世界で出会う可能性のある状況に基づいて、Xcode Cloudでワークフローを作成することについて話します。

00:00:34.000 --> 00:00:41.000
チームはあらゆる形と規模があり、多様でユニークな開発プロセスがあります。

00:00:41.000 --> 00:00:47.000
実用的なワークフローを設計するために、3つの仮説的なケーススタディを想像します。

00:00:47.000 --> 00:00:54.000
これらのケーススタディのそれぞれは、Xcode Cloudを採用したときに人々が見るかもしれない一般的な状況に似ています。

00:00:54.000 --> 00:00:58.000
単一のアプリに取り組んでいるソロ開発者を見ることから始めます。

00:00:58.000 --> 00:01:05.000
その後、レガシーコードと複雑な開発プロセスを扱う大規模なチームに取り組みます。

00:01:05.000 --> 00:01:14.000
このセッションでは、あらゆるチームに適したワークフローを作成およびカスタマイズするために利用可能な多くのオプションのいくつかを紹介します。

00:01:14.000 --> 00:01:17.000
最初のケーススタディから始めましょう。

00:01:17.000 --> 00:01:20.000
ソロ開発者がいるとしましょう。

00:01:20.000 --> 00:01:24.000
彼らはiOSとmacOSの両方で利用可能なアプリを1つ持っています。

00:01:24.000 --> 00:01:29.000
彼らのコーディング作業のほとんどは、すべての新しいコード変更がプッシュされるメインブランチで行われます。

00:01:29.000 --> 00:01:38.000
確かに、新しいAPIやプラットフォーム機能を試すときは、時折別のブランチを使用しますが、ほとんどの場合、メインブランチを使用します。

00:01:38.000 --> 00:01:45.000
彼らのコードはいくつかの依存関係に依存しており、それらをダウンロードしてプロジェクトに統合するためにCocoapodsを選択しました。

00:01:45.000 --> 00:01:53.000
最後に、彼らはTestFlightを通じてアプリのビルドを、アプリをテストしてフィードバックを提供できる友人や家族にデプロイします。

00:01:53.000 --> 00:01:58.000
時々、彼らはアプリの新しいバージョンをApp Storeに手動でリリースします。

00:01:58.000 --> 00:02:01.000
この開発者は一人のショーです。

00:02:01.000 --> 00:02:07.000
彼らはアプリの構築から、App Storeへの配布まで、すべてを自分で管理しています。

00:02:07.000 --> 00:02:10.000
彼らにとって、シンプルさが鍵となるだろう。

00:02:10.000 --> 00:02:14.000
彼らは頼りにして維持できるものが必要になります。

00:02:14.000 --> 00:02:25.000
Xcode Cloudを使用すると、新しいコードをプッシュし、アプリを構築し、テスターに配布するプロセス全体が、1つの小さいながらも強力なワークフローで実現できます。

00:02:25.000 --> 00:02:32.000
このワークフローがどのように見えるかに飛び込む前に、Xcode Cloudワークフローが何であるかを一時停止してリフレッシュしましょう。

00:02:32.000 --> 00:02:39.000
たとえば、アプリケーションの構築、テストの実行、テスターへの配布などです。

00:02:39.000 --> 00:02:48.000
「where」は、Xcodeのバージョンと使用したいmacOSのバージョン、および環境変数などの他の構成です。

00:02:48.000 --> 00:02:52.000
一緒に、彼らはあなたのワークフローを実行したい環境を形成します。

00:02:52.000 --> 00:02:58.000
最後に、「いつ」は、これらの行動を起こしたいときです。

00:02:58.000 --> 00:03:01.000
特定のブランチにコードをプッシュするときに開始しますか？

00:03:01.000 --> 00:03:04.000
それとも、毎日午後4時に

00:03:04.000 --> 00:03:09.000
1つ以上の開始条件を定義すると、ワークフローを実行するときの基準が設定されます。

00:03:09.000 --> 00:03:11.000
すごい。

00:03:11.000 --> 00:03:17.000
それが今私たちの記憶に新鮮で、私たちのソロ開発者の状況に「何」、「どこ」、「いつ」を適用しましょう。

00:03:17.000 --> 00:03:22.000
すべてのプロセスを自動化するために使用できるXcode Cloudワークフローを作成します。

00:03:22.000 --> 00:03:26.000
ここでは、Xcode Cloudでプロジェクトがすでに設定されています。

00:03:26.000 --> 00:03:33.000
レポートナビゲーターで、クラウドアイコンを選択し、製品名を右クリックし、「ワークフローを管理」を選択します。

00:03:33.000 --> 00:03:42.000
これにより、ワークフローエディタが開き、プラス記号をクリックしてメニューを開き、最初の項目を選択して、アプリの新しいワークフローを作成します。

00:03:42.000 --> 00:03:45.000
名前フィールドに「CIワークフロー」と入力します。

00:03:45.000 --> 00:03:50.000
説明フィールドはスキップしますが、詳細を自由に追加してください。

00:03:50.000 --> 00:03:54.000
では、環境セクションを見てみましょう。

00:03:54.000 --> 00:04:00.000
このセクションでは、最新バージョンのXcodeと最新バージョンのMacOSがデフォルトで選択されていることがわかります。

00:04:00.000 --> 00:04:04.000
これは私には良さそうなので、そこでは何も変更しません。

00:04:04.000 --> 00:04:07.000
新しいワークフローには、デフォルトの開始条件が付属しています。

00:04:07.000 --> 00:04:11.000
見てみましょう。 

00:04:11.000 --> 00:04:18.000
この開始条件は、変更がデフォルトのブランチにプッシュされるたびにビルドを作成します。この場合、メインです。

00:04:18.000 --> 00:04:25.000
これはほぼ正しいですが、このソロ開発者は、コードがメインブランチだけでなく、任意のブランチにプッシュされたときにビルドを開始したいと考えています。

00:04:25.000 --> 00:04:31.000
ソースブランチオプションを「任意のブランチ」に変更します。

00:04:31.000 --> 00:04:34.000
このワークフローの目標は、アプリケーションを構築して配布することです。

00:04:34.000 --> 00:04:38.000
配布用のビルドを準備するアーカイブアクションが必要です。

00:04:38.000 --> 00:04:47.000
アクションセクションの横にあるプラス面をクリックし、アーカイブを選択します。

00:04:47.000 --> 00:04:58.000
ご覧のとおり、iOSプラットフォームはすでに選択されているので、展開準備セクションで「TestFlightとApp Store」オプションを選択します。

00:04:58.000 --> 00:05:06.000
ワークフローが配布できるビルドを生成するので、ビルドをApp Store Connectにアップロードするポストアクションを追加します。

00:05:06.000 --> 00:05:15.000
これを行うには、ポストアクションセクションのプラス記号をクリックし、「TestFlight外部テスト」を選択します。

00:05:15.000 --> 00:05:27.000
そこから、グループセクションのプラス面をクリックし、テスターの「友人と家族」グループを選択します。

00:05:27.000 --> 00:05:29.000
そして、ちょうどそのように、私たちはほとんど終わりました。

00:05:29.000 --> 00:05:37.000
私たちのソロ開発者は、iOSとmacOSをターゲットとするアプリケーションに取り組んでいるので、私のワークフローは両方のプラットフォームでアプリをアーカイブしてリリースしたいです。

00:05:37.000 --> 00:05:45.000
そのためには、別のアーカイブアクションを追加します。

00:05:45.000 --> 00:05:51.000
macOSプラットフォームとTestFlight App Storeの展開準備を選択します。

00:05:51.000 --> 00:05:59.000
次に、別のTestFlight外部テストのポストアクションを追加します。

00:05:59.000 --> 00:06:04.000
「アーカイブ - macOS」アーティファクトを選択します。

00:06:04.000 --> 00:06:10.000
そして、テスターのために同じグループを選択してください。

00:06:10.000 --> 00:06:16.000
最後に、保存を押してワークフローを作成します。 

00:06:16.000 --> 00:06:22.000
先ほど、この開発者はCocoapodsを使用して、アプリが必要とする依存関係を含めると述べました。

00:06:22.000 --> 00:06:26.000
箱から出してすぐに、Xcode CloudはSwift Package Managerをサポートしています。

00:06:26.000 --> 00:06:28.000
それはXcodeに組み込まれています。

00:06:28.000 --> 00:06:33.000
しかし、他の依存関係マネージャーはXcode Cloudでも使用できます。

00:06:33.000 --> 00:06:36.000
必要なのは少量の構成だけです。

00:06:36.000 --> 00:06:41.000
より一般的な依存関係マネージャーのいくつかを使用する方法に関するいくつかのドキュメントがあります。

00:06:41.000 --> 00:06:46.000
そのドキュメントは、他のドキュメントの使用方法のガイドとして使用できます。

00:06:46.000 --> 00:06:55.000
このソロ開発者の場合、ドキュメントでは、クローン後のカスタムスクリプトを使用してCocoapodsツールをインストールして実行することを提案しています。

00:06:55.000 --> 00:07:01.000
カスタムビルドスクリプトは、Xcode Cloudビルドの特定のポイントで追加のアクションを実行する方法を提供します。

00:07:01.000 --> 00:07:08.000
この例では、すべてのソースコードが一時的なビルド環境にクローンされた後、ポストクローンスクリプトが実行されます。

00:07:08.000 --> 00:07:12.000
後のケーススタディで、カスタムスクリプトの別の例を見ていきます。

00:07:12.000 --> 00:07:15.000
そして、それはソロ開発者のワークフローであり、行く準備ができています!

00:07:15.000 --> 00:07:22.000
次にコードをプッシュすると、Xcode Cloudビルドが開始され、アプリはiOSとmacOSの両方でアーカイブされます。

00:07:22.000 --> 00:07:30.000
その後、新しいビルドが友人や家族のグループの手に渡り、アプリをテストしてフィードバックを提供します。

00:07:30.000 --> 00:07:35.000
さて、ノッチを上げて、2番目のユースケースを見てみましょう。中規模のチームです。

00:07:35.000 --> 00:07:42.000
世界中に広がる開発者、プロジェクトマネージャー、QAエンジニアで構成されるチームを想像してみましょう。

00:07:42.000 --> 00:07:46.000
彼らはiPhoneとiPadで利用可能なiOSアプリを構築します。

00:07:46.000 --> 00:07:50.000
各開発者は独自の支店で働いています。

00:07:50.000 --> 00:07:54.000
彼らはプルリクエストを使用して、変更を「ベータ」という名前のブランチにマージします。

00:07:54.000 --> 00:08:04.000
彼らの内部QAチームは、アプリとその機能が意図したとおりに機能していることを確認するために、その特定のブランチから作られたビルドをインストールしてテストします。

00:08:04.000 --> 00:08:12.000
新しいバージョンのアプリをリリースしたい場合は、ベータブランチをリリースブランチにマージし、新しいタグを押してリリースをマークします。

00:08:12.000 --> 00:08:19.000
バグをキャッチし、回帰を避けるために、アプリはユニットテストとUIテストの両方で非常によくテストされています。

00:08:19.000 --> 00:08:26.000
彼らはTestFlightを使用して、開発中のさまざまな時点で内部および外部のテスターにアプリを展開します。

00:08:26.000 --> 00:08:31.000
最後に、彼らはSlackでコミュニケーションを取り、仕事を共同作業します。

00:08:31.000 --> 00:08:33.000
これはかなり一般的な例です。

00:08:33.000 --> 00:08:39.000
彼らは、高品質のバーを保持しながら、並行して作業とコラボレーションにツールを使用しています。

00:08:39.000 --> 00:08:43.000
彼らのプロセスは、3つのXcode Cloudワークフローで実装できます。

00:08:43.000 --> 00:08:50.000
まず、ベータブランチに変更を加えるのに役立つプルリクエストワークフローを作成します。

00:08:50.000 --> 00:08:56.000
次に、内部ビルドをQAチームの手に渡すベータワークフローを作成します。

00:08:56.000 --> 00:09:03.000
最後に、アプリの新しいバージョンを外部テスターやApp Storeにリリースするための最終的なワークフローを作成します。

00:09:03.000 --> 00:09:06.000
各ワークフローをその順番で見てみましょう。

00:09:06.000 --> 00:09:12.000
チームはプルリクエストを使用して、すべての新しいコード変更をアプリに組み込むことを管理します。

00:09:12.000 --> 00:09:20.000
開発者がプルリクエストを開くと、チームメイトがコードを確認し、テストを実行してアプリが期待どおりに動作していることを確認します。

00:09:20.000 --> 00:09:27.000
この最初のワークフローは、新しいプルリクエストが開かれたとき、または既存のプルリクエストが更新されたときに、テストが実行されていることを確認することです。

00:09:27.000 --> 00:09:29.000
このワークフローを作成しましょう。

00:09:29.000 --> 00:09:34.000
まず、プラス記号をクリックして、製品の新しいワークフローを作成します。

00:09:34.000 --> 00:09:37.000
名前フィールドに「プルリクエスト」と入力します。

00:09:37.000 --> 00:09:45.000
このワークフローでは、チームはXcode Cloudがプルリクエストが開かれたときにビルドを開始することを望んでいますが、「ベータ」ブランチをターゲットにする場合に限ります。

00:09:45.000 --> 00:09:48.000
これらのビルドのそれぞれについて、彼らはテストを実行したいと考えています。

00:09:48.000 --> 00:09:51.000
新しい開始条件を追加することから始めましょう。

00:09:51.000 --> 00:09:57.000
開始条件セクションのプラス記号をクリックし、「プルリクエスト変更」項目を選択します。

00:09:57.000 --> 00:10:14.000
デフォルトでは、任意のブランチのビルドが開始されるので、ターゲットブランチセクションで「カスタムブランチ」を選択し、プラス記号ボタンをクリックして「ベータ」と入力します。

00:10:14.000 --> 00:10:23.000
1つの開始条件のみが必要なので、「ブランチの変更」を削除できます。

00:10:23.000 --> 00:10:26.000
次に、テストを実行するための新しいアクションを追加します。

00:10:26.000 --> 00:10:33.000
アクションセクションの横にあるプラス記号をクリックし、「テスト」を選択します。

00:10:33.000 --> 00:10:42.000
このアプリはiOSとiPadOSの両方をターゲットにしているため、チームはテストがさまざまな画面サイズと機能のデバイスに合格することを確認したいと考えています。

00:10:42.000 --> 00:10:57.000
目的地のセクションで、1つの小さなiPhone、iPhone 13、1つの大きなiPhone、iPhone 14 Pro Max...を選択します。

00:10:57.000 --> 00:11:04.000
...1つの小さなiPad、iPad mini...

00:11:04.000 --> 00:11:12.000
..そして最後に、あなたはそれを推測しました、1つの大きなiPad、iPad Pro。

00:11:12.000 --> 00:11:16.000
次に、保存を押します。

00:11:16.000 --> 00:11:17.000
すごい。

00:11:17.000 --> 00:11:29.000
今、Xcode Cloudでのビルドが成功し、うまくいけばチームメイトからの徹底的なコードレビューの後、開発者はプルリクエストをマージし、変更をベータブランチに入れることができます。

00:11:29.000 --> 00:11:35.000
便利なことに、これは次のワークフローに私たちをもたらします:ベータビルドワークフロー。

00:11:35.000 --> 00:11:39.000
ベータブランチは、今後のすべての変更が置かれている場所です。

00:11:39.000 --> 00:11:49.000
開発者がプルリクエストをマージすると、QAチームは、いくつかの検証テストを実行できるように、これらの新しい変更を含むアプリのビルドを取得したいと考えています。

00:11:49.000 --> 00:11:54.000
これはこの新しいワークフローの基礎となり、QAチームにビルドを展開します。

00:11:54.000 --> 00:11:59.000
Xcodeに戻って、このワークフローを作成しましょう。

00:11:59.000 --> 00:12:03.000
このベータワークフローは、私が以前に作成したワークフローの組み合わせです。

00:12:03.000 --> 00:12:08.000
チームは、変更が「ベータ」ブランチにマージされるたびにビルドをリリースしたいと考えています。

00:12:08.000 --> 00:12:14.000
テストを実行し、アプリをアーカイブし、App Store Connectにアップロードするワークフローが必要です。

00:12:14.000 --> 00:12:22.000
それを達成するために、新しいワークフローを作りましょう。

00:12:22.000 --> 00:12:27.000
「ベータリリース」と名付けてください。

00:12:27.000 --> 00:12:29.000
そして、それに応じて開始条件を更新します。

00:12:29.000 --> 00:12:40.000
既存のブランチ変更開始条件を選択し、ブランチをメインからベータに変更します。

00:12:40.000 --> 00:12:45.000
次に、アーカイブビルドアクションを追加します。

00:12:45.000 --> 00:12:52.000
そして、展開準備の下で「TestFlight内部テスト」を選択します。

00:12:52.000 --> 00:12:58.000
ここでは、このビルドが誤って本番環境にデプロイされたくないので、内部配布を使用しています。

00:12:58.000 --> 00:13:03.000
次に、App Store Connectにアップロードするポストビルドアクションを追加します。

00:13:03.000 --> 00:13:08.000
このポストアクションは、テスターの内部グループにアプリケーションを配布します。

00:13:08.000 --> 00:13:15.000
TestFlight内部テストのポストアクションを追加します。

00:13:15.000 --> 00:13:22.000
グループセクションの下にあるプラス記号をクリックし、「QAチーム」を選択します。

00:13:22.000 --> 00:13:27.000
さて、私たちはここで止めることができますが、壊れたビルドを展開する危険を冒したくありません。

00:13:27.000 --> 00:13:31.000
セーフティネットとして、そのワークフローの一部としてテストも実行します。

00:13:31.000 --> 00:13:36.000
プルリクエストワークフローのテストアクションを繰り返します。

00:13:36.000 --> 00:13:51.000
もう一度、私は1つの小さなiPhone、1つの大きなiPhone、1つの小さなiPadを選ぶつもりです...

00:13:51.000 --> 00:13:58.000
...そして1つの大きなiPad。

00:13:58.000 --> 00:14:03.000
これで、保存を押して、このワークフローの作成を確定できます。

00:14:03.000 --> 00:14:09.000
ベータビルドのワークフローはQAチームの手に渡りますが、チームがやりたいことがもう1つあります。

00:14:09.000 --> 00:14:13.000
彼らはベータ版ビルドに代替アプリのアイコンを使用したいと考えています。

00:14:13.000 --> 00:14:20.000
そうすれば、どのビルドが内部で、どのビルドがApp Storeの準備ができているかをすばやく判断できます。

00:14:20.000 --> 00:14:26.000
これは、Xcode Cloudのカスタムスクリプトが役立つもう一つの完璧な状況です。

00:14:26.000 --> 00:14:32.000
以前、ソースコードが複製された後に実行されるカスタムスクリプトを見ました。

00:14:32.000 --> 00:14:36.000
ここでは、ビルド前のスクリプトを使用してアイコンを変更します。

00:14:36.000 --> 00:14:45.000
スクリプトで利用可能な環境変数を使用して、ベータワークフローのビルド段階でのみアイコンを交換するようにします。

00:14:45.000 --> 00:14:57.000
これを実現する方法について詳しく知りたい場合は、WWDC21のセッション「高度なXcode Cloudワークフローをカスタマイズする」を参照してください。

00:14:57.000 --> 00:15:01.000
利用可能な3種類のカスタムスクリプトのうち2つしか使用していません。

00:15:01.000 --> 00:15:09.000
他にどのようなスクリプトを使用できるのか、どの環境変数が利用できるのか疑問に思っている場合は、このすべてを詳細に説明しています。

00:15:09.000 --> 00:15:12.000
そして、それはベータビルドのワークフローです。

00:15:12.000 --> 00:15:16.000
それでは、このチームの最終ワークフロー、リリースワークフローを見てみましょう。

00:15:16.000 --> 00:15:24.000
多くの変更がベータブランチに上陸し、QAによって検証された後、チームは新しいリリースを準備します。

00:15:24.000 --> 00:15:32.000
彼らのプロセスでは、開発者の1人がベータブランチをリリースブランチにマージし、リリースをマークするタグを作成する必要があります。

00:15:32.000 --> 00:15:36.000
タグの名前は、リリースという単語で始まり、次にバージョンで始まる必要があります。

00:15:36.000 --> 00:15:46.000
これが完了すると、アプリは構築され、App Store Connectにアップロードされ、社内の利害関係者のグループと熱心な顧客に配布されます。

00:15:46.000 --> 00:15:55.000
3番目と最後のワークフローは、ベータワークフローと非常によく似ていますが、新しいリリースタグがプッシュされたときにビルドを作成したいと考えています。

00:15:55.000 --> 00:15:58.000
Xcodeに戻って、このワークフローを作成しましょう。

00:15:58.000 --> 00:16:04.000
このワークフローに必要な手順は、ベータワークフローで作成した手順とほぼ同じです。

00:16:04.000 --> 00:16:09.000
開始条件の作成、アプリのアーカイブなど、すべての同じ手順を実行できます。

00:16:09.000 --> 00:16:16.000
代わりに、ベータワークフローを複製できるXcode Cloud機能を紹介したいと思います。

00:16:16.000 --> 00:16:26.000
まず、ベータワークフローを右クリックし、複製を選択し、ワークフローの名前をベータからリリースに変更します。

00:16:26.000 --> 00:16:28.000
次に、新しい開始条件を追加します。

00:16:28.000 --> 00:16:35.000
したがって、開始条件セクションのプラス記号をクリックし、「タグの変更」を選択します。

00:16:35.000 --> 00:16:44.000
ブランチの変更と同様に、タグがプッシュされるたびにビルドを作成したくありませんが、タグの名前が「リリース」という単語で始まる場合にのみ作成します。

00:16:44.000 --> 00:16:47.000
「タグ」セクションで「カスタムタグ」を選択します。

00:16:47.000 --> 00:16:53.000
「リリース/」と入力してください...

00:16:53.000 --> 00:16:57.000
...そして、メニューで「リリース/で始まるタグ」を選択します。

00:16:57.000 --> 00:17:03.000
この開始条件が作成されると、既存の「ブランチ変更」開始条件に戻り、削除します。

00:17:03.000 --> 00:17:07.000
では、既存のアーカイブアクションに移りましょう。

00:17:07.000 --> 00:17:13.000
ベータワークフローは、内部、特にQAチームにビルドを展開するために作成されました。

00:17:13.000 --> 00:17:18.000
ここでは、チームは外部テストとApp Storeのリリースを準備したいと考えています。

00:17:18.000 --> 00:17:23.000
展開準備セクションで、「TestflightとApp Store」オプションを選択します。

00:17:23.000 --> 00:17:28.000
とはいえ、私たちはまだ利害関係者の内部チームにビルドを展開したいと考えています。

00:17:28.000 --> 00:17:33.000
既存のポストビルドアクションを選択し、QAチームグループを削除します。

00:17:33.000 --> 00:17:39.000
次に、プラス記号をクリックし、「エグゼクティブステークホルダー」グループを選択します。

00:17:39.000 --> 00:17:46.000
最後のステップとして、別の投稿アクションを追加しますが、今回はTestFlight外部テストを選択します。

00:17:46.000 --> 00:17:52.000
ポストアクションセクションのプラス記号をクリックし、TestFlight外部テストを選択します。

00:17:52.000 --> 00:17:58.000
次に、グループセクションのプラス記号をクリックし、アーリーアダプターグループを選択します。

00:17:58.000 --> 00:18:02.000
これで、リリースワークフローはほぼ準備が整いました。

00:18:02.000 --> 00:18:06.000
先ほど、このチームはSlackを使用して互いにコミュニケーションを取り、協力していることを述べました。

00:18:06.000 --> 00:18:12.000
このチームにとって、Slackでビルドに関する最新情報を入手することは、開発プロセスと完全に一致します。

00:18:12.000 --> 00:18:16.000
これは、ビルドが失敗し、リリースできない場合に特に重要です。

00:18:16.000 --> 00:18:20.000
ワークフローに最後のステップを追加しましょう。

00:18:20.000 --> 00:18:26.000
リリースワークフローで、ポストアクションセクションのプラス記号をクリックし、[通知]を選択します。

00:18:26.000 --> 00:18:30.000
Xcode Cloudは、電子メールとSlackによる通知の送信をサポートしています。

00:18:30.000 --> 00:18:37.000
ここでは、Slackの下のプラス記号をクリックし、「フィードのリリース」チャンネルを選択し、[OK]を押します。

00:18:37.000 --> 00:18:39.000
これで2番目のユースケースは終わりです。

00:18:39.000 --> 00:18:43.000
これら3つのワークフローは、チームのすべての開発プロセスをカバーしています。

00:18:43.000 --> 00:18:48.000
彼らはアプリを構築し、継続的にテストを実行し、開発者が自信を持って貢献できるようにします。

00:18:48.000 --> 00:18:55.000
彼らは頻繁にアプリをアーカイブして配布し、さまざまなグループがフィードバックを提供できるようにします。

00:18:55.000 --> 00:19:04.000
これは、チームがあらゆるプロセスに適応するツールの助けを借りて、高品質のアプリをリリースできるかなり一般的な状況です。

00:19:04.000 --> 00:19:12.000
より大きなチームがXcode Cloudに移行したい3番目の最後のユースケースを見て、この声明をさらにサポートしましょう。

00:19:12.000 --> 00:19:16.000
最終的なケーススタディでは、大規模な開発者チームがあると言います。

00:19:16.000 --> 00:19:22.000
このチームは、先ほど見た中規模のチームと多くの類似点を共有しており、いくつかのひねりがあります。

00:19:22.000 --> 00:19:26.000
チームはより大きく、コードベースははるかに複雑です。

00:19:26.000 --> 00:19:32.000
彼らはiOSとiPadOSにアプリを持っていて、それはApp Storeの初めから存在しています。

00:19:32.000 --> 00:19:42.000
それ以来、何度も再設計され、更新されており、開発者は、特にQAを行う際に、多くのレガシーコードと複雑さを扱っています。

00:19:42.000 --> 00:19:44.000
彼らはたくさんのテストを持っています。

00:19:44.000 --> 00:19:52.000
最近、彼らはテスト主導の開発アプローチを採用し、新しいコードの変更ごとに多くの新しいテストが追加されています。

00:19:52.000 --> 00:20:03.000
多くの人がアプリの更新の成功に関与しているため、フィードバックを収集するために、内部と外部の両方のさまざまなTestFlightグループに新しいビルドを配布することがよくあります。

00:20:03.000 --> 00:20:09.000
このチームには、世界中で働く多くの開発者が含まれており、Slackを使用してコミュニケーションとコラボレーションを行っています。

00:20:09.000 --> 00:20:12.000
しかし、ここに興味深いひねりがあります。

00:20:12.000 --> 00:20:18.000
彼らはすでに仕事を成し遂げるために継続的な統合と継続的な展開に依存しています。

00:20:18.000 --> 00:20:24.000
現在、彼らはチームメンバーの1人が維持および運営する社内ソリューションを使用しています。

00:20:24.000 --> 00:20:31.000
このシステムへのアクセスと知識は限られているため、問題の調査が難しく、解決がさらに困難になります。

00:20:31.000 --> 00:20:38.000
これらの理由から、彼らはこの社内システムを置き換えるためにXcode Cloudに切り替えることを検討しています。

00:20:38.000 --> 00:20:45.000
さらに、プロジェクト管理ツールを使用して、行っている作業を追跡、調整、優先順位付けします。

00:20:45.000 --> 00:20:48.000
また、さまざまなダッシュボードやステータスページも作成しています。

00:20:48.000 --> 00:20:54.000
そうすれば、アプリの開発に直接関与していない人は、プロジェクトの進捗状況を追跡できます。

00:20:54.000 --> 00:21:04.000
Xcode Cloudはこの種のチームに最適ですが、この複雑なプロジェクトを新しいCIシステムに移行することは難しく、圧倒的に感じることがあります。

00:21:04.000 --> 00:21:11.000
この状況では、私の推奨事項は、この移行をさまざまなマイルストーンに分解することです。

00:21:11.000 --> 00:21:18.000
各マイルストーンには、一定期間にわたって既存のシステムからXcode Cloudにワークロードを移動することが含まれます。

00:21:18.000 --> 00:21:25.000
ここでの主な焦点は、チームの生産性と幸せを維持しながら、移行を成功させることです。

00:21:25.000 --> 00:21:30.000
ワークフローの設定を見る代わりに、それらのマイルストーンが何であるかを見てみましょう。

00:21:30.000 --> 00:21:35.000
私のお勧めは、この移行を明確なマイルストーンに分割することです。

00:21:35.000 --> 00:21:41.000
最初のステップは、App Storeにリリースできるアプリのバージョンを構築するワークフローを作成することです。

00:21:41.000 --> 00:21:44.000
2つ目は、テストを確実に機能させることです。

00:21:44.000 --> 00:21:51.000
3つ目は、チームの開発プロセスと一致し、改善する残りのワークフローを確立することです。

00:21:51.000 --> 00:21:58.000
リリースワークフローの作成から始めて、これらの各ステップを詳細に見ていきます。

00:21:58.000 --> 00:22:07.000
Xcode Cloudに移行するとき、私のお勧めは、アプリのApp Store対応ビルドをアーカイブしてアップロードするワークフローを作成することから始めることです。

00:22:07.000 --> 00:22:15.000
これは、私たちがすでに作成したワークフローの例の一部のようなもので、チームの残りの部分の混乱をゼロにして達成することができます。

00:22:15.000 --> 00:22:22.000
そこから始めることで、Xcode Cloudに組み込まれたクラウドコード署名機能を使用することができます。

00:22:22.000 --> 00:22:27.000
ビルドに署名するために証明書やプロビジョニングプロファイルをいじる必要はありません。

00:22:27.000 --> 00:22:35.000
これは、依存関係やその他の構成変更に関してアプリを正常に構築するために必要なものを確認する良い方法でもあります。

00:22:35.000 --> 00:22:44.000
このワークフローの準備ができたら、App Store対応のビルドを作成する部分として、チームの定期的な開発プロセスに含めることができます。

00:22:44.000 --> 00:22:49.000
これは、既存のシステムからXcode Cloudに移行した最初の作業です。

00:22:49.000 --> 00:22:54.000
次に、テストを確実に機能させることに集中する時です。

00:22:54.000 --> 00:22:58.000
継続的インテグレーションシステムでは、テストは非常に難しい場合があります。

00:22:58.000 --> 00:23:05.000
多くの場合、テストは、作成時に使用されていたCI環境で実行するように調整されています。

00:23:05.000 --> 00:23:12.000
新しいCI環境で実行すると、確実に実行されず、ビルドが失敗する可能性があります。

00:23:12.000 --> 00:23:21.000
Xcode Cloudの作成中に、この特定の問題について考え、チームがテストをスムーズに実行するのに本当に役立つと思われる機能を構築しました。

00:23:21.000 --> 00:23:29.000
この機能により、Xcode Cloudはワークフロー内の一部のアクションの失敗を無視し、ビルドを終了させます。

00:23:29.000 --> 00:23:37.000
この機能を有効にするには、ワークフローのアクションの「要件」の下にある「合格不要」オプションを選択します。

00:23:37.000 --> 00:23:44.000
アクションを「通過不要」として指定することで、このアクションの結果はXcode Cloudビルドの最終結果には影響しません。

00:23:44.000 --> 00:23:49.000
テストは失敗する可能性がありますが、それでもビルドは成功します。

00:23:49.000 --> 00:23:56.000
Xcode Cloudと、ビルドのソースコード管理のコミットステータスに緑色のチェックマークが表示されます。

00:23:56.000 --> 00:24:01.000
これは、クリティカルパスからテストを継続的に実行できることを意味するため、便利です。

00:24:01.000 --> 00:24:08.000
そうすれば、データを集約して、パフォーマンスと信頼性が十分かどうかを評価できます。

00:24:08.000 --> 00:24:14.000
この機能を使用して、Xcode Cloudでテストを動作させる方法を見てみましょう。

00:24:14.000 --> 00:24:18.000
チームには、アプリの多くの側面をカバーするかなりの数のテストがあります。

00:24:18.000 --> 00:24:25.000
このような状況では、すべてのプルリクエストで実行される新しいワークフローを作成することから始めることをお勧めします。

00:24:25.000 --> 00:24:32.000
このワークフローでは、ビルドアクションはすべてのテストを実行しますが、合格不要としてマークされます。

00:24:32.000 --> 00:24:37.000
テストが合格か不合格かにかかわらず、プルリクエストがまだマージされるのをブロックしません。

00:24:37.000 --> 00:24:42.000
今のアイデアは、テストがどれほど信頼できるかを評価することです。

00:24:42.000 --> 00:24:50.000
覚えておきましょう、テストはまだ既存のソリューションで実行されているので、プルリクエストは1週間かそこら経っても自信を持ってマージされます。

00:24:50.000 --> 00:24:57.000
チームは、プルリクエストビルドからテスト結果データを見て、Xcode Cloudでどのテストが確実に合格しているかを確認できます。

00:24:57.000 --> 00:25:02.000
これらのテストは、信頼できるテストと呼ばれる新しいテストプランに移行できます。

00:25:02.000 --> 00:25:10.000
その後、チームは既存のプルリクエストワークフローを編集し、その特定のテスト計画からテストを実行する新しいテストアクションを追加できます。

00:25:10.000 --> 00:25:15.000
今回は、プルリクエストをマージする前に、テストアクションに合格する必要があります。

00:25:15.000 --> 00:25:25.000
Xcode Cloudでのテストプランの使用の詳細については、WWDC22の「Xcode Cloudの高速で信頼性の高いテスト」を参照してください。

00:25:25.000 --> 00:25:30.000
また、テスト計画を使用したコード評価の改善に関するドキュメントを参照することもできます。

00:25:30.000 --> 00:25:40.000
現在確実に機能していない残りのテストは、信頼性を確保するためにどのような変更を加える必要があるかを把握するために、さらに調査することができます。

00:25:40.000 --> 00:25:44.000
時間が経て、変更が行われるにつれて、これらのテストは再び信頼できます。

00:25:44.000 --> 00:25:50.000
最終的に信頼できるテスト計画に移行し、変更を再度検証するために使用できます。

00:25:50.000 --> 00:26:00.000
このアプローチにより、テストを重要なパスに段階的に移動し、Xcode Cloudワークフローで検証とテストカバレッジを提供できます。

00:26:00.000 --> 00:26:07.000
テストが実行されていることを満足したら、App Store対応のビルドとテストがあり、Xcode Cloudで確実に実行されます。

00:26:07.000 --> 00:26:11.000
これら2つのワークロードは、既存のCIソリューションから削除できます。

00:26:11.000 --> 00:26:18.000
これで、チームの開発プロセスに必要な残りのワークフローを構築するという3番目と最後のステップが残っています。

00:26:18.000 --> 00:26:23.000
これらのワークフローの一部は、このセッションのケーススタディですでに見たものと似ています。

00:26:23.000 --> 00:26:33.000
条件とアクションを開始するためのさまざまなカスタマイズを通じて、CIとCDプロセスの自動化に役立つ本当に強力なワークフローを作成できます。

00:26:33.000 --> 00:26:38.000
また、このチームがCIシステム外のツールとダッシュボードを作成したことも言及しました。

00:26:38.000 --> 00:26:44.000
これらのツールは、開発プロセスを常に把握するのに役立ち、Xcode Cloudと統合することもできます。

00:26:44.000 --> 00:26:47.000
たとえば、Webhook機能を使用できます。

00:26:47.000 --> 00:26:57.000
Webhookが設定された後、ビルドが完了するたびに、ビルド、起動したワークフローなどの情報が記載されたリクエストがサーバーに送信されます。

00:26:57.000 --> 00:27:08.000
そこから、ビルドがベータワークフローから作成され、成功した場合は、タスク管理システムで新しいチケットを作成して、この特定のビルドのQAプロセスを追跡できます。

00:27:08.000 --> 00:27:17.000
Webhookの詳細、特にそれらのリクエストが送信されたとき、および利用可能な情報について詳しく知りたい場合は、ドキュメントを参照してください。

00:27:17.000 --> 00:27:21.000
もう1つのアプローチは、Xcode CloudパブリックAPIを使用することです。

00:27:21.000 --> 00:27:31.000
とりわけ、最近のビルドに関する情報を取得し、ダッシュボードやステータスページに表示することができます。

00:27:31.000 --> 00:27:39.000
もう一度、ドキュメントを参照して、Xcode CloudのパブリックAPIを使用し、ワークフローに統合する方法を学ぶことができます。

00:27:39.000 --> 00:27:46.000
Xcode CloudのパブリックAPIとWebhookメカニズムは、規模に関係なく、チームにとって特に便利な機能です。

00:27:46.000 --> 00:27:51.000
利用可能なすべてのオプションを組み合わせると、可能性は無限大です。

00:27:51.000 --> 00:27:58.000
より多くの例については、WWDC22のセッション「チームのためのXcode Cloudへのディープダイブ」を参照してください。

00:27:58.000 --> 00:28:06.000
このセッションでは、チームの生産性を高めるために作成できる、さまざまなタイプのシンプルで強力なワークフローを見てみました。

00:28:06.000 --> 00:28:12.000
ビルドのさまざまなポイントでビルドスクリプトを使用してビルドプロセスをカスタマイズする方法に関するいくつかの例を示しました。

00:28:12.000 --> 00:28:19.000
最後に、Xcode Cloudの上にツールを構築し、外部ツールと統合できる機能の一部を示しました。

00:28:19.000 --> 00:28:26.000
これらの3つのケーススタディが、Xcode Cloudがどのようにチームに適合し、日々の仕事を向上させることができるかを理解するのに役立つことを願っています。

00:28:26.000 --> 00:28:29.000
ご覧いただきありがとうございます。

00:28:29.000 --> 23:59:59.000
♪ ♪

