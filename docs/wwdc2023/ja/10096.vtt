WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
こんにちは！私はトリシア・グレイで、RealityKit Toolsチームで働いています。

00:00:14.000 --> 00:00:17.000
「空間コンピューティングのための素晴らしいゲームを構築する」へようこそ。

00:00:17.000 --> 00:00:22.000
今日、この新しいデバイス用のゲームを作ることについてお話しできることを本当に楽しみにしています。

00:00:22.000 --> 00:00:26.000
空間コンピューティングは、あらゆる種類の新しいゲームタイプを可能にします。

00:00:26.000 --> 00:00:30.000
独自のレンダリング、オーディオ、および入力特性を備えています。

00:00:30.000 --> 00:00:39.000
その上にゲームを構築するために使用できるフレームワークとツールに関しては、いくつかの選択肢があり、それにはRealityKitが含まれます。

00:00:39.000 --> 00:00:45.000
しかし、まず、この新しいプラットフォームでどのような種類のゲームが可能かのアイデアをお伝えします。

00:00:45.000 --> 00:00:48.000
これはスタンドアロンの空間コンピューティングデバイスです。

00:00:48.000 --> 00:00:54.000
高解像度のスクリーン、広い視野、そして素晴らしいリフレッシュレートを備えています。

00:00:54.000 --> 00:00:57.000
空間オーディオは素晴らしいです。

00:00:57.000 --> 00:01:02.000
そして、手の動きとプレーヤーの周りの部屋の形の両方を追跡するLiDARがあります。

00:01:02.000 --> 00:01:09.000
また、プレイヤーはデバイスの高品質のパススルーを使用して周囲との接続を維持できます。

00:01:09.000 --> 00:01:14.000
これにはエキサイティングな可能性があり、さまざまなゲームタイプを作成できます。

00:01:14.000 --> 00:01:22.000
プレイヤーの注意をどれだけ捉えたいかに応じて、没入感のスペクトルにまたがるゲームを構築することができます。

00:01:22.000 --> 00:01:24.000
すべてのアプリとゲームは共有スペースから始まります。

00:01:24.000 --> 00:01:32.000
これは、あなたのゲームが他のゲームやアプリ、プレイヤーの周囲と一緒に宇宙に住むことができることを意味します。

00:01:32.000 --> 00:01:40.000
プレイヤーの実際のデスクトップには、アクティブなチェスゲームを表す仮想チェスボード、または床に座っている仮想ペットがあるかもしれません。

00:01:40.000 --> 00:01:45.000
これらのアプリはすべて一緒に住んでいて、プレイヤーは好きなアプリと対話できます。

00:01:45.000 --> 00:01:48.000
フルスペースに移動すると、ゲームにすべての注意を払うことができます。

00:01:48.000 --> 00:01:57.000
これにより、他のすべてのウィンドウとボリュームが閉じられ、コンテンツにエクスペリエンスが集中し、パススルーを通じてプレイヤーを周囲に接続し続けます。

00:01:57.000 --> 00:02:03.000
これはアクションゲームに適しているかもしれません - あなたが積極的にプレイしているが、それでも現実世界と相互作用するものです。

00:02:03.000 --> 00:02:08.000
例えば、壁の穴から宇宙船を通り抜けることができます。

00:02:08.000 --> 00:02:13.000
完全に没入型の体験は、ゲームがビュー全体を引き継ぐときです。

00:02:13.000 --> 00:02:18.000
あなたの部屋の代わりに、環境があり、あなたはもはや現実世界を見ることができません。

00:02:18.000 --> 00:02:21.000
もちろん、伝統的な2Dゲームを作ることもできます。

00:02:21.000 --> 00:02:26.000
彼らは仮想ウィンドウで実行され、プレイヤーはそのウィンドウを好きなだけ大きくまたは小さくすることができます。

00:02:26.000 --> 00:02:31.000
それは垂直の窓である必要さえありません、それは地面に横たわっている平らな表面である可能性があります。

00:02:31.000 --> 00:02:38.000
彼らはそれを壁に掛けたり、机の上に置いたり、顔の前で今まで持っていた最大のスクリーンとして持つことができます。

00:02:38.000 --> 00:02:47.000
プレイヤーはiOSと同じようにゲームと対話できますが、画面をタッチする代わりに、オブジェクトを見て指を一緒にタップして選択します。

00:02:47.000 --> 00:02:57.000
iOSと同じように、Bluetoothコントローラーやキーボードを接続することもできます。パススルーは、下を見て使用しているコントローラーを見ることができるので、ここで役に立ちます。

00:02:57.000 --> 00:03:03.000
また、いくつかの3D要素を追加することで、2Dゲームを盛り上げることもできます。

00:03:03.000 --> 00:03:11.000
たとえば、ウィンドウには実際の深さがあるので、オブジェクトを別々のレイヤーでレンダリングし、実際の視差効果を得ることができます。

00:03:11.000 --> 00:03:15.000
煙や火花など、飛行機から出てくる要素を持つこともできます。

00:03:15.000 --> 00:03:20.000
または、カスタムハンドジェスチャーのサポートを追加することもできます。

00:03:20.000 --> 00:03:23.000
これらすべてのオプションで、あなたは考えるべきことがたくさんあります。

00:03:23.000 --> 00:03:36.000
ゲームを設計する際には、巨大な高解像度画面から自分の部屋でプレイできる個人的なものまで、ゲームプレイ体験のためのこれらの新しい機会をどのように活用できるかを考えてください。

00:03:36.000 --> 00:03:38.000
あなたのゲームはプレイヤーの机の上に現れることができます。

00:03:38.000 --> 00:03:39.000
彼らはそれを壁に置くことができます。

00:03:39.000 --> 00:03:43.000
何かが飛び出し、プレイヤーの手に着地する可能性があります。

00:03:43.000 --> 00:03:49.000
彼らの周りの現実世界を利用したり、まったく別の場所に運んだりすることができます。

00:03:49.000 --> 00:03:55.000
このデバイスでは、レンダリング、オーディオ、および入力の動作は、他のプラットフォームで使用されているものとは異なります。

00:03:55.000 --> 00:04:04.000
共有スペースで実行している場合、ゲームのコンテンツは他のアプリ、システムUI、パススルーのコンテンツと一緒に描画されます。

00:04:04.000 --> 00:04:12.000
レンダリングは共有されるため、フレームワークはすべてのアプリが善良な市民であり、そのレンダリングが他のアプリに干渉しないことを保証します。

00:04:12.000 --> 00:04:18.000
このモードでは、MaterialXを介してサーフェスシェーダーとジオメトリシェーダーを使用できます。

00:04:18.000 --> 00:04:22.000
xrOSでのレンダリングは、慣れているものとは少し異なります。

00:04:22.000 --> 00:04:33.000
すべてのピクセルをレンダリングする代わりに、レンダリングすべきもの（すべてのモデル、テクスチャ、シェーダー）を説明し、デバイスは各目に対して自動的にレンダリングします。

00:04:33.000 --> 00:04:41.000
ゲームのプラットフォームレンダリングのもう1つの利点は、動的フォベネーションを適用して解像度を上げることができることです。

00:04:41.000 --> 00:04:49.000
ダイナミックフォベーションは、レンダラーがプレイヤーの目が見ているディスプレイの部分でより高い解像度を使用するテクニックです。

00:04:49.000 --> 00:04:59.000
これは、ハードワークをすることなく、シーン全体をレンダリングするコストを支払うことなく、それらの場所でより鮮明な解像度を得ることを意味します。

00:04:59.000 --> 00:05:07.000
デフォルトでは、RealityKitは、周囲の現実世界のオブジェクトと現実的に溶け込むようにオブジェクトをレンダリングします。

00:05:07.000 --> 00:05:14.000
RealityKitは、プレイヤーの部屋の実際の照明をサンプリングし、レンダリングするオブジェクトに同じ照明を適用します。

00:05:14.000 --> 00:05:23.000
材料の場合、RealityKitは、粗さ、鏡面、金属などの典型的なパラメータを持つ物理ベースの照明モデルを使用します。

00:05:23.000 --> 00:05:27.000
これは、サンプリングされた照明と一緒に、あなたに現実的な外観を与えます。

00:05:27.000 --> 00:05:33.000
しかし、現実的なものから幻想的なものまで、規模でどこにいたいかを選択できます。

00:05:33.000 --> 00:05:44.000
組み込みのPBRシェーダーを使用する代わりに、MaterialXを使用してカスタマイズされたシェーダーコンテンツを作成し、Reality Composer Proやその他のグラフィックパッケージでシェーダーグラフを編集できます。

00:05:44.000 --> 00:05:49.000
カスタム照明効果のために、カスタムIBLをオブジェクトに割り当てることもできます。

00:05:49.000 --> 00:05:55.000
もう1つの考慮事項は、レンダリングされたコンテンツに適用されるシステム全体の効果があることです。

00:05:55.000 --> 00:06:00.000
この目的は、他のアプリでゲームをより良く動作させ、プレイヤーを保護することです。

00:06:00.000 --> 00:06:06.000
深度の軽減は、プレイヤーの周囲のオブジェクトの後ろに隠されている場合、コンテンツをわずかに透明にします。

00:06:06.000 --> 00:06:10.000
これにより、物が部屋に浮かんでいるという感覚を取り除きます。

00:06:10.000 --> 00:06:15.000
ニアフィールドビネットは、プレイヤーがコンテンツに近づきすぎると、コンテンツをフェードします。

00:06:15.000 --> 00:06:20.000
これにより、近くの飛行機に対するコンテンツのクリッピングの問題を防ぐことができます。

00:06:20.000 --> 00:06:27.000
ブレークスルーは、あなたに近づいている人がレンダリングされたビューを突破することを可能にするので、彼らはあなたが気づかずにあなたに遭遇することはありません。

00:06:27.000 --> 00:06:35.000
最後に、現実世界のオブジェクトの近くに配置されると、グラウンディングシャドウがレンダリングされたオブジェクトに追加され、シーンに統合されていると感じられます。

00:06:35.000 --> 00:06:45.000
完全に没入型のレンダリングは共有レンダリングと同様に機能しますが、この場合、パススルーや他のアプリと画面を共有する代わりに、あなたのアプリは目に見える唯一のものです。

00:06:45.000 --> 00:06:51.000
このモードでは、プレイヤーの周りの現実世界のビューに代わる環境をレンダリングします。

00:06:51.000 --> 00:06:54.000
このモードでのレンダリングは、共有モードでのレンダリングと同様に機能します。

00:06:54.000 --> 00:06:57.000
あなたはまだシーンを説明し、デバイスはそれをレンダリングします。

00:06:57.000 --> 00:07:01.000
しかし、プレイヤーが見るものすべてをコントロールしているので、あなたはより多くの自由を持っています。

00:07:01.000 --> 00:07:05.000
たとえば、プレイヤーがいる部屋と同じ照明環境を使用する必要はありません。 プレーヤーがいる部屋と同じ照明環境を使用する必要はありません。

00:07:05.000 --> 00:07:09.000
あなたは世界を好きなだけ明るく、または暗くすることができます。

00:07:09.000 --> 00:07:17.000
デバイスの強みは共有モードにありますが、プレイヤーを別の場所に運びたいときは、完全に没入感のある体験があります。

00:07:17.000 --> 00:07:25.000
独自のエンジンを書きたい場合は、CompositorServices APIを使用すると、xrOS上のMetalレンダリングにアクセスできます。

00:07:25.000 --> 00:07:32.000
ワールドトラッキングとハンドトラッキングを追加して、完全に没入感のある体験を生み出すARKitと組み合わせることができます。

00:07:32.000 --> 00:07:37.000
このモードでは、画面にフルアクセスでき、それぞれの目のシーンをレンダリングします。

00:07:37.000 --> 00:07:41.000
完全にカスタムのメタルシェーダーとポストプロセッサを使用できます。

00:07:41.000 --> 00:07:47.000
これにより、現実世界のコンテンツを独自の仮想コンテンツに完全に置き換えることができます。

00:07:47.000 --> 00:07:49.000
パススルーやその他のアプリは隠されています。

00:07:49.000 --> 00:07:54.000
これの詳細については、「没入型アプリのためのDiscover Metal」をチェックしてください。

00:07:54.000 --> 00:07:57.000
オーディオも没入型です。

00:07:57.000 --> 00:08:05.000
xrOSは、空間オーディオを使用して、プレイヤーの空間でオブジェクトに命を吹き込み、リバーブと実際の部屋の音響を自動的に一致させます。

00:08:05.000 --> 00:08:16.000
AVAudioEngineなどの標準のiOSオーディオAPIを使用してオーディオを再生すると、オーディオはアプリウィンドウに対して相対的に配置されます。

00:08:16.000 --> 00:08:26.000
プレイヤーのスペース内のシーン内の異なるオブジェクトからサウンドを再生したい場合は、シーン内の特定のエンティティでRealityKitを介してオーディオを再生する必要があります。

00:08:26.000 --> 00:08:32.000
また、Appleまたは外部APIを使用して独自のオーディオを行うオプションもあります。

00:08:32.000 --> 00:08:39.000
オーディオをヘッドトラッキングしたい場合は、ARKitを使用してプレーヤーのヘッドポジションを取得する必要があります。

00:08:39.000 --> 00:08:45.000
グラフィックとオーディオに加えて、インタラクションは没入型体験のもう1つの重要な部分です。

00:08:45.000 --> 00:08:52.000
結局のところ、すべてのゲームには入力が必要であり、このプラットフォームはデバイスと対話する複数の方法を提供します。

00:08:52.000 --> 00:09:01.000
SwiftUIや、ドラッグや拡大などの他の標準システムジェスチャーを使用して、シーン内のオブジェクトの入力イベントを取得できます。

00:09:01.000 --> 00:09:03.000
これは物理学の衝突に基づいています。

00:09:03.000 --> 00:09:14.000
ジェスチャーをオブジェクトで機能させるには、衝突形状を提供するCollisionComponentと、対話可能としてマークするInputTargetComponentの両方が必要です。

00:09:14.000 --> 00:09:19.000
空間入力はプレイヤーにとってかなり魔法のように感じることができますが、ゲーム入力には他のオプションもあります。

00:09:19.000 --> 00:09:21.000
ゲームコントローラーでも！

00:09:21.000 --> 00:09:30.000
システムルック&amp;タップジェスチャーは自然に感じますが、見る目は1つしかなく、タップ、ピンチ、またはつかむことができる手は2つだけです。

00:09:30.000 --> 00:09:33.000
一部のゲームでは、より多くの入力ポイントが必要です。

00:09:33.000 --> 00:09:36.000
1つの可能性は、標準のBluetoothコントローラーを使用することです。

00:09:36.000 --> 00:09:43.000
xrOSは、トラックパッド、マウス、キーボード、およびBluetoothベースのゲームコントローラーをサポートしています。

00:09:43.000 --> 00:09:46.000
これは伝統的なゲームにとって良い選択肢になる可能性があります。

00:09:46.000 --> 00:09:53.000
また、xrOSは、自分の体をコントローラーとして使用するなど、より型破りな入力を可能にします。

00:09:53.000 --> 00:10:01.000
ハンドトラッキングを使用して、プレイヤーが仮想オブジェクトをつかんだり、オブジェクトを指差したり、空手を切り刻んだりするなどのカスタムジェスチャーを実装したりできます。

00:10:01.000 --> 00:10:11.000
ARKitを介してハンドトラッキングにアクセスすると、アプリがあなたの位置情報やマイクを使用したいときと同じように、デバイスはプレーヤーに許可を求めます。

00:10:11.000 --> 00:10:14.000
この入力を設計する際に考慮すべきことがいくつかあります。

00:10:14.000 --> 00:10:18.000
手はカメラに表示されている場合にのみ追跡できます。

00:10:18.000 --> 00:10:21.000
本当に速い手の動きは追跡が難しい場合があります。

00:10:21.000 --> 00:10:23.000
それを考慮に入れてください。

00:10:23.000 --> 00:10:28.000
フルスペースで作業しているときは、シーンの理解をリクエストできます。

00:10:28.000 --> 00:10:32.000
シーン理解は、プレイヤーの周りの部屋を表す仮想メッシュを提供します。

00:10:32.000 --> 00:10:37.000
また、水平面と垂直面を見つけるために平面検出を行うこともできます。

00:10:37.000 --> 00:10:41.000
カーペットであろうと木であろうと、それらの表面の材料を手に入れることもできます。

00:10:41.000 --> 00:10:45.000
これにより、ゲームへの入力の一部として部屋自体を使用できます。

00:10:45.000 --> 00:10:50.000
ハンドトラッキングと同様に、これにはプレイヤーの許可が必要です。

00:10:50.000 --> 00:10:54.000
すべての入力オプションを使用すると、ゲームに適したものを把握する必要があります。

00:10:54.000 --> 00:10:58.000
直接入力にプレイヤーの体を使用することは、彼らを引き付ける素晴らしい方法です。

00:10:58.000 --> 00:11:03.000
しかし、手を挙げてジェスチャーをすることも、時間の経過とともに疲れる可能性があります。

00:11:03.000 --> 00:11:13.000
あなたのゲームが長時間プレイされるか、多くの迅速な行動を必要とする場合は、間接的なジェスチャーや視線をどのように活用できるかを考えてください。

00:11:13.000 --> 00:11:19.000
そうすれば、プレイヤーは手を膝の上に快適に置き、手を動かす代わりにルック&amp;タップすることができます。

00:11:19.000 --> 00:11:25.000
このデバイスは、あなたが毎日使うものであることを意図しているので、快適さは重要です。

00:11:25.000 --> 00:11:30.000
そして、それが理にかなっているなら、より伝統的なゲームコントローラーに行くこともできます。

00:11:30.000 --> 00:11:37.000
このプラットフォームは、他のプラットフォームから慣れ親しんだすべてのマルチプレイヤーとネットワーキング機能をサポートしています。

00:11:37.000 --> 00:11:45.000
Webベースのネットワーキング、低レベルのソケットベースのネットワーキング、およびMultipeer Connectivityはすべて利用できます。

00:11:45.000 --> 00:11:51.000
SharePlayはまた、プレイヤーがより親密な方法で社交することを容易にします。

00:11:51.000 --> 00:11:59.000
一部のプレイヤーがiPhoneやiPadでプレイし、この素晴らしいデバイスに接続できるネットワーキングを使用してゲームを構築することもできます。

00:11:59.000 --> 00:12:08.000
iPadを持っている友人とのドミノゲームを想像してみてください。あなたが豊かで没入型の3D体験をしながら、彼らは2D体験を持っています。

00:12:08.000 --> 00:12:15.000
ゲームデバイスとしてこれについてもう少し知っているので、ゲームを作成するために使用できるフレームワークを次に示します。

00:12:15.000 --> 00:12:30.000
2Dゲーム、ボリュームにあるゲーム、または完全に没入型ゲームを作成するかどうかに応じて、RealityKit、没入型フレームワークを使用するか、Metalの上に直接何かを書くか、Unityを使用するなど、さまざまなオプションがあります。

00:12:30.000 --> 00:12:39.000
すでにiPhoneまたはiPad用のゲームを作っている場合、ほとんどの場合、ゲームは仮想ウィンドウのデバイスで自動的に実行され、ルック&amp;タップを使用して対話します。

00:12:39.000 --> 00:12:43.000
これは互換性のある3Dゲームにも当てはまることに注意してください。

00:12:43.000 --> 00:12:46.000
彼らはデバイスの平らな窓で実行されます。

00:12:46.000 --> 00:12:52.000
ゲームを立体的にしたい場合は、空間コンピューティングAPIを使用する必要があります。

00:12:52.000 --> 00:12:58.000
互換性のあるゲームを実行できることは素晴らしいことですが、デバイスを最大限に活用したい場合は、それをターゲットにするためにゲームを構築してください。

00:12:58.000 --> 00:13:06.000
そうすれば、入力にジェスチャーを使用したり、遠近法や体積煙などの2.5D要素を追加したりできます。

00:13:06.000 --> 00:13:13.000
SwiftUIやSpriteKitなどの2Dフレームワークを使用して、デバイス用の2Dゲームを構築できます。

00:13:13.000 --> 00:13:15.000
Unityを使ってxrOS用のゲームを作成できます。

00:13:15.000 --> 00:13:22.000
移植したいUnityゲームをすでに持っている場合、またはUnity開発者である場合、これは素晴らしい選択肢です。

00:13:22.000 --> 00:13:32.000
Unityの使用について詳しく知りたい場合は、「Unity VRアプリを完全に没入型スペースに」または「没入型Unityアプリを作成する」セッションにアクセスしてください。

00:13:32.000 --> 00:13:39.000
最後に、没入型空間体験を構築するためのAppleのリアルタイムレンダリングフレームワークであるRealityKitがあります。

00:13:39.000 --> 00:13:46.000
APIには多くの新機能があり、xrOS用の3Dゲームを作成する素晴らしい方法になります。

00:13:46.000 --> 00:13:50.000
RealityKitは、素晴らしいゲームを作るために必要なすべての機能をサポートしています。

00:13:50.000 --> 00:13:59.000
カスタム動作用のエンティティコンポーネントシステムがあり、物理、アニメーション、パーティクル、オーディオのサポートとともに拡張性があります。

00:13:59.000 --> 00:14:05.000
レンダリング面では、RealityKitはUSDモデルとカスタムメッシュの両方をサポートしています。

00:14:05.000 --> 00:14:10.000
世界であなたのオブジェクトを接地するために、MaterialXとIBL照明があります。

00:14:10.000 --> 00:14:17.000
添付ファイルは、リッチなSwiftUIをRealityKitオブジェクトに直接接続できる新機能です。

00:14:17.000 --> 00:14:28.000
SwiftUIを使用すると、Windows、ボリューム、スペース、アンカー、ポータルなどの機能を使用して、さまざまな方法でパススルーとレンダリングされたコンテンツを混在させることができます。

00:14:28.000 --> 00:14:35.000
システムジェスチャーを使用して入力することも、ARKitを使用してハンドトラッキングとシーンの理解にアクセスすることもできます。

00:14:35.000 --> 00:14:42.000
xrOS用のゲームの構築を開始するには、xrOSテンプレートから新しいXcodeプロジェクトを作成します。

00:14:42.000 --> 00:14:47.000
これにより、その中にRealityViewを含むSwiftUIウィンドウが表示されます。

00:14:47.000 --> 00:14:53.000
SwiftUI階層のRealityViewは、ゲームの3Dレンダリングとシミュレーションを保持しています。

00:14:53.000 --> 00:14:58.000
まだSwiftUIに精通していない場合は、それについて少し学ぶ価値があります。

00:14:58.000 --> 00:15:03.000
デフォルトでは、3Dコンテンツはウィンドウによって形成された体積ボックスに表示されます。

00:15:03.000 --> 00:15:08.000
あなたのコンテンツはそのウィンドウに限定されており、それが動くにつれて続きます。

00:15:08.000 --> 00:15:10.000
RealityKitはSwift APIです。

00:15:10.000 --> 00:15:15.000
Swiftはゲームを構築するための素晴らしい言語になる可能性がありますが、別の言語を使用したい場合は、できます。

00:15:15.000 --> 00:15:19.000
その言語とSwift APIの間に架け橋を作るだけです。

00:15:19.000 --> 00:15:21.000
Xcodeにはシミュレーターが付属しています。

00:15:21.000 --> 00:15:26.000
デバイスをいなくても、すぐにゲームの開発を開始できます。

00:15:26.000 --> 00:15:29.000
もちろん、実際のデバイスでテストすることは常に最善です。

00:15:29.000 --> 00:15:34.000
3DコンテンツはデフォルトでSwiftUIウィンドウに表示されます。

00:15:34.000 --> 00:15:42.000
ゲーム開発者として最初にやりたいことの1つは、そのウィンドウから抜け出して、プレイヤーの周囲にコンテンツを描くことです。

00:15:42.000 --> 00:15:45.000
あなたはそれを行うためのいくつかの異なる選択肢があります。

00:15:45.000 --> 00:15:46.000
ボリュームを使用できます。

00:15:46.000 --> 00:15:50.000
ボリュームはウィンドウに似ていますが、1つの重要な違いがあります。

00:15:50.000 --> 00:15:53.000
ウィンドウでは、プレイヤーはサイズを制御します。

00:15:53.000 --> 00:15:59.000
彼らはコーナーをドラッグして好きなだけ大きくまたは小さくすることができ、あなたのコンテンツは適応しなければなりません。

00:15:59.000 --> 00:16:03.000
ウィンドウがコンテンツに対して小さすぎると、コンテンツはクリップされます。

00:16:03.000 --> 00:16:06.000
ボリュームでは、その逆です。

00:16:06.000 --> 00:16:11.000
ボリュームでは、「箱をこんなに大きく、こんなに高く、こんなに深くしたい」と言います。

00:16:11.000 --> 00:16:18.000
プレイヤーは世界のどこにでもその箱を置くことができますが、箱は常に同じサイズになります。

00:16:18.000 --> 00:16:26.000
だから、箱があなたの全体の経験に合うのに十分な大きさであることを確認し、コンテンツがクリップされていないことを確認することができます。

00:16:26.000 --> 00:16:30.000
箱をまったく使いたくない場合は、スペースを使用できます。

00:16:30.000 --> 00:16:35.000
これにより、現実世界のプレイヤーのいたるしにコンテンツをレンダリングすることができます。

00:16:35.000 --> 00:16:38.000
たとえば、プレーヤーを賑やかなミツバチで囲むことができます。

00:16:38.000 --> 00:16:43.000
異なるゲームタイプに対応する異なる種類のスペースがあります。

00:16:43.000 --> 00:16:50.000
共有スペースを使用して他のアプリと一緒に実行したり、ゲームのみを実行したい場合はフルスペースを使用できます。

00:16:50.000 --> 00:16:56.000
アンカーを使用すると、シーンを現実世界のオブジェクトに固定し、動きながらそれを追いかけることができます。

00:16:56.000 --> 00:17:02.000
水平または垂直の表面アンカーを使用して、エンティティを机や壁に固定できます。

00:17:02.000 --> 00:17:08.000
コンテンツをプレイヤーの手に固定できるハンドアンカーもあります。

00:17:08.000 --> 00:17:13.000
ポータルでは、プレイヤーの現実に穴を開けて、独自の素晴らしい現実を作り出すことができます。

00:17:13.000 --> 00:17:21.000
ポータルを実際の壁に固定し、そのポータルに壁に穴を開けてもらい、穴の中のレンダリングされた世界を覗くことができます。

00:17:21.000 --> 00:17:30.000
そのポータル内で好きなものをレンダリングすることができ、ポータル内のオブジェクトも現実の世界に現れる可能性があります。

00:17:30.000 --> 00:17:33.000
RealityKitはUSDファイルをロードしてレンダリングできます。

00:17:33.000 --> 00:17:42.000
体積コンテンツを使い始める最も簡単な方法の1つは、既製のオブジェクトからシーンを組み立てることですが、そのためには、ある種のビジュアルツールが必要です。

00:17:42.000 --> 00:17:46.000
Reality Composer Proは、Xcodeにバンドルされているツールです。

00:17:46.000 --> 00:17:51.000
USDモデルをロードし、デバイスでどのように表示されるかをプレビューできます。

00:17:51.000 --> 00:17:58.000
Reality Composer Proでプロジェクトを構築すると、アセットはデバイスでの使用に自動的に最適化されます。

00:17:58.000 --> 00:18:03.000
これらのセッションでは、Reality Composer Proについて詳しく知ることができます。

00:18:03.000 --> 00:18:08.000
このセッションが空間コンピューティングに役立つゲーム開発ロードマップだったことを願っています。

00:18:08.000 --> 00:18:12.000
利用可能な複数のフレームワークセッションを詳しく掘り下げてください。

00:18:12.000 --> 00:18:15.000
これは、他の人と交流し、ゲームをするための素晴らしいプラットフォームです。

00:18:15.000 --> 00:18:18.000
あなたがそれのために何を開発するかを見るのが待ちきれません。

00:18:18.000 --> 23:59:59.000
♪

