WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:14.000
Tu:こんにちは、私の名前はTu Nguyenで、ワークアウトチームのエンジニアです。

00:00:14.000 -> 00:00:21.000
今日は同僚のAbhirajと一緒にここにいて、Apple Watch用のカスタムワークアウトを構築する方法を説明します。

00:00:21.000 -> 00:00:37.000
watchOS 9では、ユーザーが理想的なワークアウト体験を作成してカスタマイズできるように、ワークアウトアプリに新しいワークアウトタイプを導入しました。ユーザーが距離、エネルギー、時間などの単一の目標でワークアウトを実行できる目標ベースのワークアウト。

00:00:37.000 -> 00:00:42.000
ペースやスピードの前面と中央に重点を置くペイサーワークアウト。

00:00:42.000 -> 00:00:50.000
トライアスリートのためのスイムバイクランニングワークアウトは、スイム、バイク、ランニングアクティビティをシームレスに移行します。

00:00:50.000 -> 00:00:56.000
そして、カスタムワークアウト、カスタム目標とアラートを組み合わせた構造化されたステップ。

00:00:56.000 -> 00:01:06.000
そのため、iOS 17とwatchOS 10では、これらのワークアウトタイプをすべてWorkoutKitと呼ばれる新しいフレームワークに導入しています。

00:01:06.000 -> 00:01:09.000
WorkoutKitはまったく新しいSwiftフレームワークです。

00:01:09.000 -> 00:01:16.000
これにより、ユーザーが自分のアプリ内でワークアウトアプリで作成できるさまざまなワークアウトタイプをすべて作成およびカスタマイズできます。

00:01:16.000 -> 00:01:22.000
また、ユーザーが実行できるように、これらのワークアウトをワークアウトアプリに取り込むのに役立つブリッジでもあります。

00:01:22.000 -> 00:01:28.000
WorkoutKitは、プレビューUIとスケジュールされたワークアウトを同期する機能を提供します。

00:01:28.000 -> 00:01:35.000
これら4つのワークアウトタイプをWorkoutKitに持ち込み、今日はカスタムワークアウトに焦点を当てます。

00:01:35.000 -> 00:01:44.000
このセッションでは、カスタムワークアウトの構築、エクスポートのプレビュー、ワークアウトのスケジュール方法について説明します。

00:01:44.000 -> 00:01:47.000
まず、カスタムワークアウトの構築に飛び込みましょう。

00:01:47.000 -> 00:01:52.000
カスタムワークアウトは、ユーザーが構造化された方法でワークアウトを集中させるのに最適な方法です。

00:01:52.000 -> 00:01:57.000
それらには、ワークアウトを通してユーザーを導く一連の異なるステップが含まれています。

00:01:57.000 -> 00:02:00.000
カスタムワークアウトを見ると、3つの異なる段階があります。

00:02:00.000 -> 00:02:03.000
まず、ワークアウトの開始時にステップがあります。

00:02:03.000 -> 00:02:05.000
これはウォームアップステップです。

00:02:05.000 -> 00:02:10.000
次に、ステップの独自の組み合わせを含む反復可能なブロックの順序付けられたコレクションがあります。

00:02:10.000 -> 00:02:14.000
これらのブロックは、ワークアウトの大部分を占めています。

00:02:14.000 -> 00:02:19.000
そして最後に、クールダウンステップと呼ばれるワークアウト終了時のステップ。

00:02:19.000 -> 00:02:27.000
さて、ウォームアップ、クールダウン、または反復可能なブロック内のステップのいずれであっても、すべてのステップには2つの重要な属性が含まれています。

00:02:27.000 -> 00:02:31.000
まず、すべてのステップには単一の目標が含まれています。

00:02:31.000 -> 00:02:34.000
目標は、カスタムワークアウト内のステップの進行を定義します。

00:02:34.000 -> 00:02:40.000
目標が完了すると、カスタムワークアウトは次のステップに進みます。

00:02:40.000 -> 00:02:44.000
カスタムワークアウト内のステップは、該当する場合、時間または距離の目標を持つことができます。

00:02:44.000 -> 00:02:50.000
また、オープン目標を設定することもできます。これにより、ユーザーは手動でステップを進める必要があります。

00:02:50.000 -> 00:02:54.000
第二に、すべてのステップに単一のアラートを含めることができます。

00:02:54.000 -> 00:02:59.000
アラートは、現在のパフォーマンスを示す特定の指標をユーザーに通知します。

00:02:59.000 -> 00:03:06.000
たとえば、ユーザーは、心拍が特定のしきい値を超えたときに警告を受けたい場合があります。

00:03:06.000 -> 00:03:13.000
そして、ペース、ケイデンス、パワー、心拍数アラートのサポートももたらしています。

00:03:13.000 -> 00:03:18.000
何がステップを構成するかがわかったので、ブロックを詳しく見てみましょう。

00:03:18.000 -> 00:03:23.000
ブロックには、作業ステップまたは回復ステップとして区別されるステップが含まれています。

00:03:23.000 -> 00:03:32.000
ブロック内のステップには、以前に見たように、独自の目標とアラートが含まれており、ブロック内の任意の順序で任意の数のステップを持つことができます。

00:03:32.000 -> 00:03:34.000
ブロックも再現可能です。

00:03:34.000 -> 00:03:39.000
ブロックを繰り返す反復回数を指定できます。

00:03:39.000 -> 00:03:44.000
では、これがApple Watchでのワークアウト体験にどのように変換されるかを見てみましょう。

00:03:44.000 -> 00:03:49.000
まず、ユーザーの現在のステップはブロック内の作業ステップであることがわかります。

00:03:49.000 -> 00:03:55.000
このステップには距離目標があるため、残り0.2マイルで現在の目標の進捗状況がわかります。

00:03:55.000 -> 00:03:59.000
このステップには、現在の電力のアラートもあり、下部に表示されます。

00:03:59.000 -> 00:04:05.000
このステップのアラートを指定しない場合は、ユーザーの現在の心拍数が表示されます。

00:04:05.000 -> 00:04:11.000
そして最後に、次のステップは時間ベースの目標を持つ回復ステップであるというプレビューも提供します。

00:04:11.000 -> 00:04:17.000
ステップとブロックを使用すると、完全なカスタムワークアウトを構築できます。

00:04:17.000 -> 00:04:31.000
繰り返しになりますが、最初はウォームアップステップがあり、次に作業と回復のステップを含む一連の反復可能なブロックがあり、ほとんどの時間をワークアウトに費やし、最後にクールダウンステップがあります。

00:04:31.000 -> 00:04:38.000
今、私はそれを同僚のAbhirajに渡して、WorkoutKitで独自のカスタムワークアウトを構築する方法を紹介します。

00:04:38.000 -> 00:04:42.000
Abhiraj:こんにちは、私はAbhirajです。私はワークアウトチームのエンジニアです。

00:04:42.000 -> 00:04:49.000
Tuが述べたように、WorkoutKitを使用すると、ゴール、ペーサー、スイムバイクラン、カスタムワークアウトのワークアウトを作成できます。

00:04:49.000 -> 00:04:53.000
カスタムアウトドアサイクリングワークアウトの例を見てみましょう。

00:04:53.000 -> 00:05:02.000
このトレーニングには、ウォームアップ、仕事と回復の2つの繰り返しブロック、トレーニングを終了するためのクールダウンの4つのステップがあります。

00:05:02.000 -> 00:05:05.000
ウォームアップステップでは、オープンゴールを使用します。

00:05:05.000 -> 00:05:13.000
最初のブロックでは、距離目標とペースアラートを備えた作業ステップと、距離目標と心拍数アラートを備えた回復ステップがあります。

00:05:13.000 -> 00:05:16.000
このブロックには4つの反復があります。

00:05:16.000 -> 00:05:25.000
2番目のブロックでは、時間目標とパワーアラートを備えた作業ステップと、時間目標と心拍数アラートを備えた回復ステップがあります。

00:05:25.000 -> 00:05:32.000
最後に、クールダウンのステップには時間ベースの目標があります。これをコードで表現する方法を見てみましょう。

00:05:32.000 -> 00:05:35.000
ウォームアップステップから始めましょう。

00:05:35.000 -> 00:05:37.000
まず、WorkoutKitをインポートします。

00:05:37.000 -> 00:05:41.000
前に述べたように、私たちのウォームアップステップには、アラートのないオープンな目標があります。

00:05:41.000 -> 00:05:45.000
したがって、この場合、デフォルトの初期化子で作成します。

00:05:45.000 -> 00:05:49.000
このワークアウトの最初のブロックに移りましょう。

00:05:49.000 -> 00:05:51.000
この最初のブロックでは、2つのステップがあります。

00:05:51.000 -> 00:05:57.000
最初のステップは、距離目標とペースアラートを備えた作業ステップです。

00:05:57.000 -> 00:06:04.000
目標とアラートを表すためにHKQuantityとHKUnitを活用しているため、ここにHealthKitをインポートする必要があります。

00:06:04.000 -> 00:06:08.000
これから、WorkoutGoalを使って2マイルの目標を設定します。

00:06:08.000 -> 00:06:13.000
また、このステップにペースアラートを追加し、時速10マイルのペースを目指します。

00:06:13.000 -> 00:06:17.000
まず、時速10マイルでHKQuantity of pace valueを作成しましょう。

00:06:17.000 -> 00:06:20.000
このアラートを作成するには、WorkoutAlertを使用します。

00:06:20.000 -> 00:06:31.000
WorkoutAlertを作成するには、WorkoutAlertTargetType、この場合は時速10マイルのターゲット、この場合は現在のペースのWorkoutAlertTypeが必要です。

00:06:31.000 -> 00:06:34.000
そして今、私たちはペースのWorkoutAlertを作成することができます。

00:06:34.000 -> 00:06:42.000
さて、作業ステップを作成するために、twoMileGoalとpaceAlertでタイプワークのBlockStepを使用します。

00:06:42.000 -> 00:06:46.000
このブロックの2番目のステップは回復ステップです。

00:06:46.000 -> 00:06:52.000
心拍数ゾーン1アラートで回復のための1/2マイルの目標を作成します。

00:06:52.000 -> 00:06:57.000
その後、タイプレストの回復ブロックステップを作成できます。

00:06:57.000 -> 00:07:02.000
これで、先ほど定義した作業手順と回復手順でブロックを作成できます。

00:07:02.000 -> 00:07:08.000
これを行うには、ステップの配列と反復を4に設定したIntervalBlockを使用します。

00:07:08.000 -> 00:07:11.000
そして、それで、私たちの最初のブロックは完了です。

00:07:11.000 -> 00:07:14.000
では、2番目のブロックに移りましょう。

00:07:14.000 -> 00:07:17.000
このブロックには、2つのステップもあります。

00:07:17.000 -> 00:07:22.000
最初のステップは、時間目標とパワーアラートを備えた作業ステップです。

00:07:22.000 -> 00:07:24.000
私たちは2分間の目標を設定しました。

00:07:24.000 -> 00:07:31.000
この作業ブロックでは、250〜275ワットの範囲の電力範囲アラートを作成できます。

00:07:31.000 -> 00:07:36.000
タイプ範囲のWorkoutTargetTypeを作成し、WorkoutAlertを作成します。

00:07:36.000 -> 00:07:42.000
最後に、先ほど作成した目標とアラートを使用してBlockStepを作成します。

00:07:42.000 -> 00:07:45.000
このブロックの2番目のステップは回復ステップです。

00:07:45.000 -> 00:07:51.000
心拍数ゾーン1アラートで30秒の目標を作成します。

00:07:51.000 -> 00:07:54.000
その後、回復ステップを作成できます。

00:07:54.000 -> 00:08:03.000
これで、反復を2に設定して定義した作業と回復のステップで2番目のブロックを作成できます。

00:08:03.000 -> 00:08:06.000
最後に、クールダウンのステップに移りましょう。

00:08:06.000 -> 00:08:12.000
クールダウンのステップに時間ベースの目標を持たせたかったので、ここで作成しましょう。

00:08:12.000 -> 00:08:20.000
タイプ時間のWorkoutGoalを作成し、それを使用して、目標を5MinuteGoalに設定したCooldownStepを作成します。

00:08:20.000 -> 00:08:23.000
さあ、それをすべてまとめましょう。

00:08:23.000 -> 00:08:35.000
これまでに構築したすべてのもの、ウォームアップステップ、ブロック1、ブロック2、クールダウンステップを使用して、カスタムワークアウト構成を作成できます。

00:08:35.000 -> 00:08:40.000
アクティビティの種類をサイクリングに設定し、場所を屋外に設定しました。

00:08:40.000 -> 00:08:47.000
CustomWorkoutCompositionの初期化子のLocationTypeパラメータはオプションで、デフォルトでは屋外に設定されています。

00:08:47.000 -> 00:08:53.000
これらすべてを組み合わせて、「マイワークアウト」という名前のカスタムワークアウトを作成しましょう。

00:08:53.000 -> 00:08:58.000
また、CustomWorkoutCompositionの初期化子に試行が先行する理由を疑問に思うかもしれません。

00:08:58.000 -> 00:09:01.000
それは、構成を検証しているからです。

00:09:01.000 -> 00:09:05.000
ワークアウトの構成を検証することの重要性について話し合いましょう。

00:09:05.000 -> 00:09:11.000
検証は、一貫したワークアウト構造を確保し、ワークアウトランタイム中の問題を防ぎます。

00:09:11.000 -> 00:09:16.000
たとえば、距離目標は、非距離ベースのワークアウト構成には使用しないでください。

00:09:16.000 -> 00:09:23.000
同様に、ペースアラートは、エリプティカルなどのペースをサポートしていないトレーニングに適用すべきではありません。

00:09:23.000 -> 00:09:33.000
これを助けるために、特定のプロパティが設定されたとき、例、ワークアウトアクティビティタイプ、または特定のAPIを実行したときに実行される一連の検証があります。

00:09:33.000 -> 00:09:37.000
また、追加の操作を実行するために、WorkoutCompositionラッパーを作成しました。

00:09:37.000 -> 00:09:45.000
たとえば、ワークアウトコンポジションをデバイス間で共有できるファイルにインポートおよびエクスポートするAPIも作成しました。

00:09:45.000 -> 00:09:49.000
dataRepresentationを使用して、JSONまたはバイナリでエクスポートします。

00:09:49.000 -> 00:09:55.000
はるかに小さいサイズで、コンポジションをバイナリ形式でエクスポートすることをお勧めします。

00:09:55.000 -> 00:10:01.000
そして今、私はそれをTuに引き渡して、コンポジションをプレビューする方法について話します。

00:10:01.000 -> 00:10:03.000
Tu:どうもありがとう、アビラジ。

00:10:03.000 -> 00:10:08.000
これらのAPIを活用して完全にカスタムワークアウトを構築する方法を見るのは素晴らしいことです。

00:10:08.000 -> 00:10:13.000
では、ワークアウトの構成ができたら何ができるかを見てみましょう。

00:10:13.000 -> 00:10:18.000
ワークアウトの構成では、WorkoutKitでそれらを使ってできることがいくつかあります。

00:10:18.000 -> 00:10:27.000
まず、Abhirajが先に述べたように、共有と配布のために.workout拡張子を持つファイルにコンポジションをエクスポートできます。

00:10:27.000 -> 00:10:35.000
特定のAPIを呼び出すと検証が自動的に行われ、コンポジションのエクスポートはその一例であることを忘れないでください。

00:10:35.000 -> 00:10:40.000
また、コンポジションの内容のプレビューをユーザーに提示するためのAPIもあります。

00:10:40.000 -> 00:10:45.000
さて、これはiOSとwatchOSで異なる動作をしています。

00:10:45.000 -> 00:10:56.000
iOSでは、コンポジションのプレビューAPIを呼び出すと、プロセス外のUIがアプリの上に表示され、ワークアウトコンポジションの内容全体が表示されます。

00:10:56.000 -> 00:11:00.000
この例では、カスタムワークアウト構成があります。

00:11:00.000 -> 00:11:12.000
タイトルは上部に目立つように表示され、目標とアラートを含むステップとブロックのリスト、およびユーザーがワークアウトをApple Watchのワークアウトアプリに直接保存するためのオプションが表示されます。

00:11:12.000 -> 00:11:21.000
さて、watchOSに目を向けると、プレビューAPIを呼び出すと、ワークアウト構成の内容を含むワークアウトアプリが起動します。

00:11:21.000 -> 00:11:28.000
ここから、ユーザーはすぐにワークアウトを開始するか、後で保存することができます。

00:11:28.000 -> 00:11:33.000
繰り返しになりますが、Abhirajに渡して、WorkoutKitでこれらのプレビューオプションをお見せします。

00:11:33.000 -> 00:11:37.000
Abhiraj:今、私たちは素晴らしいトレーニングをしたので、ユーザーによってそれを保存しましょう。

00:11:37.000 -> 00:11:45.000
先に説明したように、WorkoutCompositionを使用して、検証などのワークアウトの追加操作を実行できます。

00:11:45.000 -> 00:11:49.000
WorkoutCompositionを使用すると、ユーザーにプレビューを表示できます。

00:11:49.000 -> 00:11:57.000
プレビューAPIは、iOSとwatchOS用に最適化されており、ユーザーがプレビュー、保存、またはワークアウトを開始するための便利な方法を提供します。

00:11:57.000 -> 00:12:04.000
だから、私たちが以前に作成したサイクリングワークアウトを取り、それをワークアウトコンポジションでラップしましょう。

00:12:04.000 -> 00:12:09.000
Tuが先に言及したワークアウトタイプは、WorkoutCompositionで使用できます。

00:12:09.000 -> 00:12:15.000
これで、outreoutCompositionのpresentPreview機能を使用してプレビューを表示しましょう。

00:12:15.000 -> 00:12:22.000
このAPIはSwiftの最新の並行性機能で動作するように設計されているため、ここではタスクブロックを使用します。

00:12:22.000 -> 00:12:29.000
前述のように、presentPreviewは、実行中のプラットフォームに応じて、ワークアウトのプレビューを異なる方法で表示します。

00:12:29.000 -> 00:12:31.000
これがどのように機能するか見てみましょう。

00:12:31.000 -> 00:12:36.000
iOSでは、この機能はアプリの上にリモートビューを表示します。

00:12:36.000 -> 00:12:42.000
ワークアウトと、ユーザーがApple Watchのワークアウトアプリに直接保存するためのオプションが表示されます。

00:12:42.000 -> 00:12:46.000
「ウォッチに追加」ボタンは、ワークアウトアプリを新しいワークアウトで更新します。

00:12:46.000 -> 00:12:50.000
プレビュー機能はApple Watchでは動作が異なります。

00:12:50.000 -> 00:12:58.000
watchOSのプレビュー機能を呼び出すと、アプリでシートを表示するのではなく、ワークアウトのプレビューでワークアウトアプリが起動します。

00:12:58.000 -> 00:13:02.000
そして今、私はそれをTuに返して、トレーニングのスケジューリングについて話します。

00:13:02.000 -> 00:13:04.000
Tu:ありがとう、アビラジ。

00:13:04.000 -> 00:13:11.000
これらのプレビューオプションは、迅速なインタラクションのためにユーザーの前で単一のワークアウト構成を取得するのに本当に役立ちます。

00:13:11.000 -> 00:13:15.000
しかし、ユーザーが一定期間にわたって実行するためのワークアウトのコレクションがある場合はどうなりますか?

00:13:15.000 -> 00:13:30.000
たとえば、今日ユーザーのためにサイクリングが予定されているとします。週の後半、ハイキング、その数日後、ゴルフ、おそらく予定された休憩、さらにサイクリングの前に。

00:13:30.000 -> 00:13:39.000
コンポジションとプレビューAPIを使用して、ワークアウトをワークアウトアプリに直接保存できますが、現在、ユーザーはこれらのワークアウトをすべて管理し、いつ完了する必要があるかを記憶する責任があります。

00:13:39.000 -> 00:13:41.000
それはあまりスケーラブルではありません。

00:13:41.000 -> 00:13:48.000
このプロセス全体を簡素化するために、WorkoutKitの一部として、アプリはワークアウトアプリに直接ワークアウトをスケジュールすることができます。

00:13:48.000 -> 00:13:51.000
それがどのように見えるか見てみましょう。

00:13:51.000 -> 00:13:57.000
ワークアウトをスケジュールすると、アプリにはワークアウトアプリの上部に専用のスペースがあります。

00:13:57.000 -> 00:14:05.000
この専用スペースは、アプリのアイコンと名前、およびその日の次のワークアウトのプレビューでスタイル設定されます。

00:14:05.000 -> 00:14:10.000
ここをタップすると、表示されたスケジュールされたワークアウトがすぐに開始されます。

00:14:10.000 -> 00:14:17.000
省略記号をタップすると、同期した今後のスケジュールされたワークアウトなど、詳細が表示されます。

00:14:17.000 -> 00:14:22.000
ワークアウトのスケジューリングにはユーザーの許可が必要で、同期はローカルで処理されます。

00:14:22.000 -> 00:14:28.000
ユーザーは、次の7日間と過去7日間に予定されているワークアウトを見ることができます。

00:14:28.000 -> 00:14:36.000
一度に最大15のワークアウトを同期でき、ユーザーがアプリから完了したスケジュールされたワークアウトを照会できます。

00:14:36.000 -> 00:14:45.000
スケジュールされたワークアウトを照会するときは、作成したコンポジション、スケジュールされた日付、およびワークアウトがユーザーによって完了したかどうかのみが含まれます。

00:14:45.000 -> 00:14:47.000
健康データは含まれていません。 それらには含まれていません。

00:14:47.000 -> 00:14:54.000
したがって、完了したワークアウトから実際の健康統計が必要な場合は、HealthKit APIを参照してください。

00:14:54.000 -> 00:15:02.000
また、WorkoutKitの一環として、可能であれば、ワークアウトの構成を取得するためのHKWorkoutの拡張機能を提供しています。

00:15:02.000 -> 00:15:08.000
次に、Abhirajに渡して、WorkoutKitを使用してワークアウトをスケジュールする方法を紹介します。

00:15:08.000 -> 00:15:09.000
アビラジ:ありがとう、トゥ。

00:15:09.000 -> 00:15:18.000
ユーザーがワークアウトをスケジュールするアプリのために、ワークアウトアプリ内で使用するためにワークアウトコンポジションをApple Watchに同期することをサポートする一連のAPIを提供しています。

00:15:18.000 -> 00:15:22.000
WorkoutKit APIを活用したアプリを実際に作りましょう。

00:15:22.000 -> 00:15:27.000
スケジュールされた日付をワークアウトの構成に関連付けて、それらを同期する必要があります。

00:15:27.000 -> 00:15:29.000
やり方をお見せしましょう。

00:15:29.000 -> 00:15:34.000
WorkoutKit APIと対話するためのプレースホルダを持つアプリを構築し始めました。

00:15:34.000 -> 00:15:38.000
WorkoutKitを活用してこれを機能させる方法を見てみましょう。

00:15:38.000 -> 00:15:43.000
ワークアウトをワークアウトアプリに同期する前に、ユーザーから許可を得る必要があります。

00:15:43.000 -> 00:15:49.000
WorkoutPlanのauthorizationStateを呼び出すと、アプリの現在の権限を確認できます。

00:15:49.000 -> 00:15:57.000
まだ許可を要求していないので、WorkoutPlanのrequestAuthorizationを呼び出すことで、ユーザーに承認を要求できます。

00:15:57.000 -> 00:16:02.000
「承認のリクエスト」ボタンをタップします。

00:16:02.000 -> 00:16:08.000
requestAuthorization()を呼び出すと、ユーザーは同期をオプトアウトするアラートが表示されます。

00:16:08.000 -> 00:16:16.000
ユーザーは、iOSのWatchアプリとwatchOSの設定アプリからワークアウト設定でこの設定を変更することもできます。

00:16:16.000 -> 00:16:22.000
アプリを承認したので、Apple Watchのワークアウトアプリから現在のワークアウトプランを取得します。

00:16:22.000 -> 00:16:27.000
WorkoutPlan.currentを使用してWorkoutPlanを照会できます。

00:16:27.000 -> 00:16:33.000
WorkoutPlanは、アプリからスケジュールされたワークアウトを保存および変更するためのインターフェースです。

00:16:33.000 -> 00:16:38.000
「ワークアウトプランを取得」ボタンをタップします。

00:16:38.000 -> 00:16:44.000
まだトレーニングを予定していないので、計画にはスケジュールされたトレーニングはありません。

00:16:44.000 -> 00:16:47.000
次に、いくつかのワークアウトを作成してスケジュールしてみましょう。

00:16:47.000 -> 00:16:51.000
今日はゴルフに行って、今週後半にサイクリングをしたいと思っています。

00:16:51.000 -> 00:16:56.000
だから、いくつかの新しいワークアウト構成でそのスケジュールを作成しましょう。

00:16:56.000 -> 00:17:02.000
ScheduledWorkoutCompositionオブジェクトには、ワークアウトの構成、スケジュールされた日付、および完了状態が含まれています。

00:17:02.000 -> 00:17:09.000
私は今日、明後日のゴルフ予定日とサイクリング予定日を割り当てました。

00:17:09.000 -> 00:17:11.000
それが私のアプリでどのように見えるか見てみましょう。

00:17:11.000 -> 00:17:18.000
ご覧のとおり、今日はゴルフトレーニングが予定されており、数日後にはサイクリングトレーニングが予定されています。

00:17:18.000 -> 00:17:23.000
スケジュールを作成したので、ワークアウトアプリに同期しましょう。

00:17:23.000 -> 00:17:29.000
現在のワークアウトプランを使用して、これらの新しいスケジュールされたワークアウトをスケジュールされた構成配列に追加します。

00:17:29.000 -> 00:17:35.000
最後に、これらのワークアウトをワークアウトアプリに追加するには、outreoutPlan.save()と呼びます。

00:17:35.000 -> 00:17:40.000
これが実際にどのように機能するか見てみましょう。

00:17:40.000 -> 00:17:44.000
すごい。今、これらのトレーニングは同期されています。

00:17:44.000 -> 00:17:50.000
Tuが述べたように、ワークアウトをスケジュールすると、アプリにはワークアウトアプリの上部に専用のスペースがあります。

00:17:50.000 -> 00:17:52.000
それがどのように見えるか掘り下げてみましょう。

00:17:52.000 -> 00:17:56.000
ワークアウトアプリを開きましょう。

00:17:56.000 -> 00:18:00.000
ご覧のとおり、私のアプリのアイコンと名前が存在します。

00:18:00.000 -> 00:18:05.000
今日はゴルフワークアウトが予定されているので、ここをタップするとワークアウトが始まります。

00:18:05.000 -> 00:18:10.000
省略記号をタップすると、今後のスケジュールを確認できます。

00:18:10.000 -> 00:18:14.000
最初の画面では、今日予定されているすべてのワークアウトが表示されます。

00:18:14.000 -> 00:18:21.000
「もっと見る」をタップすると、次の7日間と過去7日間に予定されているワークアウトを見ることができます。

00:18:21.000 -> 00:18:28.000
ここでは、今日のゴルフワークアウトと、以前に同期した今後のサイクリングワークアウトの両方を見ることができます。

00:18:28.000 -> 00:18:35.000
これで、スケジュールされたワークアウトがどのように提示され、アプリがワークアウトアプリ内に専用スペースを持つことができるかを理解できます。

00:18:35.000 -> 00:18:37.000
ご存知のように、今日はゴルフのラウンドを計画しています。

00:18:37.000 -> 00:18:41.000
私のティータイムはもうすぐです。

00:18:41.000 -> 00:18:47.000
よろしければ、すぐに戻ってきます。

00:18:47.000 -> 00:18:48.000
ただ今 

00:18:48.000 -> 00:18:52.000
私は素晴らしいゴルフラウンドを行い、バックナインで72を撃ちました。

00:18:52.000 -> 00:18:57.000
ユーザーがワークアウトアプリでスケジュールされたワークアウトを完了すると、完了状態が更新されます。

00:18:57.000 -> 00:19:02.000
WorkoutPlan.currentを使用してWorkoutPlanを照会して、どのワークアウトが完了したかを判断できます。

00:19:02.000 -> 00:19:10.000
ワークアウトがアプリで完了としてマークされている場合は、完了状態を更新して、ユーザーが最新の情報をどこにでも持っていることを確認する必要があります。

00:19:10.000 -> 00:19:13.000
私たちのコードに戻りましょう。

00:19:13.000 -> 00:19:17.000
サンプルアプリでは、スケジュールされた構成が完了したかどうかを確認できます。

00:19:17.000 -> 00:19:21.000
もしそうなら、私たちはそれを完了としてマークしています。

00:19:21.000 -> 00:19:24.000
これを実際に見てみましょう。

00:19:24.000 -> 00:19:29.000
アプリをワークアウトアプリと同期させるのは素晴らしい練習です。

00:19:29.000 -> 00:19:37.000
これで、承認のリクエストからワークアウトアプリへのコンポジションの同期まで、ワークアウトスケジュールAPIの実装方法の基本的な理解がわかりました。

00:19:37.000 -> 00:19:39.000
それで、私はそれをTuに返します。

00:19:39.000 -> 00:19:43.000
Tu:ありがとう、Abhiraj、そしてあなたがゴルフゲームを改善しているのを見てうれしいです。

00:19:43.000 -> 00:19:50.000
それでは、アプリにWorkoutKitを採用する際に留意すべきベストプラクティスをいくつかまとめましょう。

00:19:50.000 -> 00:19:56.000
ユーザーに表示したいワークアウト体験に最も適したコンポジションタイプを検討してください。

00:19:56.000 -> 00:20:05.000
特にトレーニングがカスタム目標とアラートで異なるレベルの労力と注意を必要とする場合、カスタムワークアウトは非常に有用な構成タイプであることがわかりました。

00:20:05.000 -> 00:20:09.000
ただし、水泳はカスタムワークアウトではサポートされていません。

00:20:09.000 -> 00:20:12.000
代わりに目標構成を使用する必要があります。

00:20:12.000 -> 00:20:16.000
また、アラートはカスタムワークアウトでのみ利用できます。

00:20:16.000 -> 00:20:23.000
30分間のランニングのような単純なものに独自のアラートを指定する必要がない場合は、代わりにゴールまたはペーサーの構成を使用することを検討してください。

00:20:23.000 -> 00:20:27.000
ワークアウトの構成の検証を必ず処理してください。

00:20:27.000 -> 00:20:34.000
非常に詳細な検証エラーを提供し、非互換性やエラーの原因を特定するのに役立ちます。

00:20:34.000 -> 00:20:38.000
リマインダーとして、すべてのアクティビティタイプが距離をサポートしているわけではありません。

00:20:38.000 -> 00:20:41.000
代わりに、時間またはオープンゴールを使用することを検討してください。

00:20:41.000 -> 00:20:46.000
また、すべてのアクティビティタイプがカスタムワークアウトで特定のアラートをサポートするわけではありません。

00:20:46.000 -> 00:20:50.000
心拍数ゾーンアラートなどの代替案を検討してください。

00:20:50.000 -> 00:20:53.000
スケジュールされたトレーニングを最新の状態に保ちます。

00:20:53.000 -> 00:20:58.000
アプリがそうしなければならないかもしれないフォアグラウンドまたはバックグラウンドランタイムを活用してください。

00:20:58.000 -> 00:21:01.000
そして最後に、フィードバックをお送りください。

00:21:01.000 -> 00:21:03.000
APIを試してみてください。

00:21:03.000 -> 00:21:08.000
今日見たサンプルコードはすべてdeveloper.apple.comで入手できます。

00:21:08.000 -> 00:21:13.000
また、ワークアウトセッションの同期に関するHealthKitセッションをチェックすることを忘れないでください。

00:21:13.000 -> 00:21:14.000
見てくれてありがとう。

00:21:14.000 -> 23:59:59.000
♪ ♪

