WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:15.000
グレース・ケンドール:皆さん、こんにちは。「空間コンピューティングのためのUIKitに会いましょう!」へようこそ。

00:00:15.000 --> 00:00:20.000
私の名前はグレース・ケンドールで、UIKitチームのエンジニアです。

00:00:20.000 --> 00:00:30.000
同僚のアンドリューと私は、既存のUIKitアプリをまったく新しい次元に持ち込むことについて、このビデオであなたとチャットすることにとても興奮しています。

00:00:30.000 --> 00:00:39.000
新しいデバイスは、空間体験のための素晴らしいプラットフォームを備えており、たくさんの新しい3D機能を導入しています。

00:00:39.000 --> 00:00:45.000
そして何よりも、それはあなたがすでに知っていて、それを行うのが好きなUIフレームワークを使用しています。

00:00:45.000 --> 00:00:50.000
このビデオは、物事のUIKitの側面に完全に焦点を当てています。

00:00:50.000 --> 00:01:00.000
プラットフォーム上のSwiftUIの詳細については、「空間コンピューティングのためのSwiftUIに会う」と「空間コンピューティングのためのウィンドウ付きアプリを昇格する」をチェックしてください。

00:01:00.000 --> 00:01:10.000
このビデオでは、新しいプラットフォーム用のアプリを構築する方法と、その過程で実行する手順について説明します。

00:01:10.000 --> 00:01:19.000
次に、他のAppleプラットフォームとユニークで異なる特性のいくつかと、コードでそれらを処理する方法について説明します。

00:01:19.000 --> 00:01:26.000
その後、UIKitに導入された新しいAPIでアプリを磨きます。

00:01:26.000 --> 00:01:35.000
そして最後に、UIKitに加えてSwiftUIを使用して、新しい3D機能を追加することを検討します。

00:01:35.000 --> 00:01:37.000
では、始めましょう!

00:01:37.000 --> 00:01:44.000
これは、iOS用に書かれたデモピクセルアートアニメーションアプリで、すべてUIKitを使用しています。

00:01:44.000 --> 00:01:48.000
私の親友の何人かはそれに芸術を貢献しました。

00:01:48.000 --> 00:01:58.000
iPadでの見た目と感触は素晴らしく、多くのシステムコンポーネント、ダイナミックなアニメーションを使用し、Apple Pencilを統合しています。

00:01:58.000 --> 00:02:01.000
空間コンピューティングの準備をしましょう。

00:02:01.000 --> 00:02:10.000
最初にする必要があるのは、Xcodeプロジェクトの[一般]タブに移動し、新しい実行先を追加することです。

00:02:10.000 --> 00:02:17.000
さて、ここアセットカタログで、新しいアプリアイコンを追加できます。

00:02:17.000 --> 00:02:20.000
それは、このプラットフォームのアイコンが特別だからです。

00:02:20.000 --> 00:02:28.000
それらは互いに重ね合わせた3つの画像で、誰かがあなたのアプリのアイコンを見ると動的に反応します。

00:02:28.000 --> 00:02:44.000
私たちのチームメイトの一人であるジェシカは、非常に才能のあるアーティストであり、これに備えてアプリの新しいアイコンをモックアップしたので、私は今これらのファイルを追加することができます。

00:02:44.000 --> 00:02:56.000
次に、新しいデバイスシミュレータをターゲットとして選択し、ビルドします。

00:02:56.000 --> 00:02:59.000
さて、いくつかのビルドエラーがあります。

00:02:59.000 --> 00:03:06.000
iPadアプリに使用されていたAPIのいくつかは、このプラットフォームでは利用できないようです。

00:03:06.000 --> 00:03:08.000
理由について話しましょう。

00:03:08.000 --> 00:03:17.000
これは、他のAppleプラットフォームとは異なる、まったく新しい機能と特徴を備えたまったく新しいプラットフォームです。

00:03:17.000 --> 00:03:22.000
だから、アプリを持ち込むときに知っておくべきことがいくつかあります。

00:03:22.000 --> 00:03:37.000
アプリを初めて持ち込むとき、調査すべき2つの一般的な領域は、以前のiOSリリースで廃止されたAPIと、このプラットフォームにうまく翻訳されていないAPIです。

00:03:37.000 --> 00:03:43.000
このデバイスは、iOS 14より前に廃止されたAPIをサポートしていません。

00:03:43.000 --> 00:03:55.000
この真新しいプラットフォームでは、廃止されたAPIから移行し、共有コードベースを更新して最新かつ最高のものを採用する絶好の機会です。

00:03:55.000 --> 00:03:59.000
このプラットフォームに翻訳しないAPIのコレクションもあります。 

00:03:59.000 --> 00:04:03.000
例えば、UIDeviceOrientation。

00:04:03.000 --> 00:04:11.000
このAPIは、デバイスが複数の向きで使用できることを前提としており、ここでは適用されません。

00:04:11.000 --> 00:04:14.000
UIScreenは別の例です。

00:04:14.000 --> 00:04:21.000
このデバイスでは、ハードウェア画面の単一の表現の前提は保持されません。

00:04:21.000 --> 00:04:33.000
また、タブバーのデザインは大きく異なり、リーディングからトレーリングまでレイアウトされていないため、リーディングアクセサリービューとトレーリングアクセサリービューは利用できません。

00:04:33.000 --> 00:04:40.000
これらは、適用されないために使用不可とマークされたAPIの3つの例にすぎませんが、他にもあります。

00:04:40.000 --> 00:04:44.000
詳細については、ドキュメントを確認してください。

00:04:44.000 --> 00:04:50.000
今からコードに戻って、何が問題だったのかを調査しましょう。

00:04:50.000 --> 00:04:53.000
ここでエラーを確認しましょう。

00:04:53.000 --> 00:04:59.000
EditorViewController拡張機能にはUIPencilInteractionがあります。

00:04:59.000 --> 00:05:05.000
このデバイスはApple Pencilをサポートしていないため、このAPIはプラットフォームでは利用できません。

00:05:05.000 --> 00:05:09.000
このコードを簡単に条件付けしてコンパイルすることができます。

00:05:09.000 --> 00:05:31.000
先に進んで、もう一度構築して実行してみましょう。

00:05:31.000 --> 00:05:36.000
OK！私たちは稼働しているように見えます! 

00:05:36.000 --> 00:05:41.000
これは本当に良さそうで、共有スペースでアプリが実行されているのを見るのはエキサイティングです。

00:05:41.000 --> 00:05:46.000
しかし、私はすでに改善できると思ういくつかのことに気づいています。

00:05:46.000 --> 00:05:52.000
今すぐアプリを通してツアーに参加して、すべてをチェックして、磨くものを見つけましょう。

00:05:52.000 --> 00:06:00.000
シミュレータでは、マウスでクリックすると、誰かがそのポイントを見て指を一緒に叩くのをシミュレートします。

00:06:00.000 --> 00:06:05.000
私が最初に気づいたのは、アプリの美しいガラスの背景です。

00:06:05.000 --> 00:06:15.000
そして、すべてのアートを見ると、アプリを生き生きとインタラクティブに感じさせる本当に素敵なホバービジュアルがいくつかあります。

00:06:15.000 --> 00:06:24.000
検索バーも新しい外観で、くぼんだ外観です。

00:06:24.000 --> 00:06:30.000
私はまださまざまな芸術作品を開き、心ゆくまでピクセル化することができます。

00:06:30.000 --> 00:06:40.000
さて、私が改善できると思うことの1つは、タイトルの黒いテキストとアートの字幕の灰色のテキストです。

00:06:40.000 --> 00:06:47.000
黒いテキストはiPadの白い背景で本当に素敵に見えましたが、ガラスの上でどのように見えるかは好きではありません。

00:06:47.000 --> 00:06:50.000
もう少しポップできると思います。

00:06:50.000 --> 00:06:54.000
そして、私は検索バーの外観と次元が本当に好きです。

00:06:54.000 --> 00:06:58.000
タイトルのテキストフィールドにもそれが欲しいと思います。

00:06:58.000 --> 00:07:04.000
セマンティックカラーは新しいものではありませんが、このプラットフォームにとって特に価値があります。

00:07:04.000 --> 00:07:15.000
アプリの外観がプラットフォーム、外観、アクセシビリティの設定に適応するように、セマンティックカラー、フォント、マテリアルを使用することが重要です。

00:07:15.000 --> 00:07:23.000
UIColor.labelのような多くのものは、すべてがピクセル完璧に見えるように新しい値を持っています。

00:07:23.000 --> 00:07:39.000
セマンティックカラーはプラットフォームに適応するので、RGB値で自分で色を定義する代わりに、アプリが実行されているプラットフォームに関係なく、正しい外観をもたらすシステムが提供する色を使用してください。

00:07:39.000 --> 00:07:48.000
たとえば、システムシアンは、iOS、macOS、watchOSでわずかに異なる青色です。

00:07:48.000 --> 00:07:54.000
iPadでは、これには明るい外観と暗い外観の間に適応するという追加の利点があります。

00:07:54.000 --> 00:08:03.000
そして、このプラットフォームでは、ガラスの上に置くと、systemBackgroundColorはデフォルトで鮮やかです。

00:08:03.000 --> 00:08:13.000
同様に、静的なフォントサイズを設定する代わりに、HeadlineやBodyなどのセマンティックフォントスタイルを使用すると、より読みやすくなります。

00:08:13.000 --> 00:08:17.000
それはまた、アクセシビリティのために行うべき正しいことです。

00:08:17.000 --> 00:08:22.000
セマンティックフォントサイズは、読みやすさを確保するためにダイナミックタイプでスケーリングします。

00:08:22.000 --> 00:08:30.000
ここでは、TextFieldテキストと字幕ラベルの色は、RGBで定義されたUIColorsを使用しています。

00:08:30.000 --> 00:08:42.000
それらを使用する代わりに、ここでプライマリラベルとセカンダリラベルセマンティックカラーを使用してください。これにより、iPadで見栄えを良くしながら、このプラットフォームによりよく適応できます。

00:08:42.000 --> 00:08:49.000
さらに、セマンティックカラーを使用するすべてのUILabelsは、デフォルトで鮮やかになります。

00:08:49.000 --> 00:08:54.000
テキストフィールドの境界線スタイルをroundedRectに設定することもできます。

00:08:54.000 --> 00:08:58.000
これにより、このビューにくぼんだ外観が追加されます。

00:08:58.000 --> 00:09:00.000
そして、構築して実行した後...

00:09:00.000 --> 00:09:03.000
...私はこれがずっと好きです!

00:09:03.000 --> 00:09:11.000
ラベルは読みやすく、テキストフィールドを使用してアートのタイトルを編集できることは明らかです。

00:09:11.000 --> 00:09:14.000
次に、資料について話しましょう。

00:09:14.000 --> 00:09:17.000
材料はこのプラットフォームの大きな礎石です。

00:09:17.000 --> 00:09:23.000
彼らはあなたのアプリを本当に美しく見せ、周囲の一部のように感じるのに役立ちます。

00:09:23.000 --> 00:09:27.000
彼らはまた、どんな文脈でも読みやすさを保証します。

00:09:27.000 --> 00:09:35.000
素材は、照明条件とその背後にある物体の色に基づいてコントラストとカラーバランスを調整します。

00:09:35.000 --> 00:09:41.000
このため、このプラットフォームでは暗い外観と明るい外観の区別はありません。

00:09:41.000 --> 00:09:52.000
すべての組み込みコントロールとコンテナは、デフォルトで鮮やかな素材を使用しており、アプリが素晴らしく見えるようにします。

00:09:52.000 --> 00:09:57.000
今、アプリの背景として機能しているガラスは本当に素晴らしく見えます。

00:09:57.000 --> 00:10:03.000
これは、すべてのUINavigationControllerとUISplitViewControllerにデフォルトで提供されます。

00:10:03.000 --> 00:10:08.000
そして、これは周囲の詳細が出血することを可能にします。

00:10:08.000 --> 00:10:20.000
UIViewControllerの新しいpreferredContainer BackgroundStyleプロパティをオーバーライドして、.automatic、.glass、または.hiddenを返すこともできます。

00:10:20.000 --> 00:10:26.000
次に、アプリ内のいくつかのビューにカーソルを合わせると、かすかなハイライトが表示されます。

00:10:26.000 --> 00:10:30.000
これは、アプリを反応させるのに本当に役立ちます。

00:10:30.000 --> 00:10:41.000
コントロールやリストなどのシステムコンポーネントを使用すると、デフォルトでこれらのホバー効果、素材、活気などを得ることができます。

00:10:41.000 --> 00:10:44.000
ホバー効果はインタラクティブ性を示します。

00:10:44.000 --> 00:10:49.000
ビューにホバー効果を追加すると、ターゲットになりやすくなります。

00:10:49.000 --> 00:10:57.000
このプラットフォームの重要な点の1つは、誰かが探している場所がアプリのプロセスに配信されないことです。

00:10:57.000 --> 00:11:04.000
UIKitには、ホバーエフェクトを追加、カスタマイズ、または無効にするためのまったく新しいAPIがあります。

00:11:04.000 --> 00:11:07.000
UIViewには新しいプロパティHoverStyleがあります。

00:11:07.000 --> 00:11:13.000
多くのインタラクティブコンポーネントには、コントロールなど、デフォルトでホバー効果があります。

00:11:13.000 --> 00:11:21.000
HoverStyleプロパティを設定し、ハイライトまたはリフトのいずれかの効果を提供することで、ビューのホバースタイルをカスタマイズできます。

00:11:21.000 --> 00:11:27.000
また、ホバー効果を削除したい場合は、このプロパティをnilに設定できます。

00:11:27.000 --> 00:11:34.000
さらに進むために、新しいUIShape APIを使用して、ホバー効果の形状を提供できます。

00:11:34.000 --> 00:11:42.000
私はすでにコレクションビューセルにホバー形状を持っているのが好きですが、角が丸みを帯びていたらいいのにと思います。

00:11:42.000 --> 00:11:52.000
代わりに丸みを帯びた長方形をホバー形状として使用するには、セルにhoverStyleプロパティを設定し、丸みを帯びた長方形を渡す必要があります。

00:11:52.000 --> 00:11:58.000
そして、それは四角い角を持つこの長方形からセルのホバー形状を取ります...

00:11:58.000 --> 00:12:00.000
...この丸みを帯びた直腸に。

00:12:00.000 --> 00:12:05.000
これはテキストフィールドの丸みを帯びた角と背景で本当に素敵に見えると思います。

00:12:05.000 --> 00:12:13.000
さて、各コレクションビューセルを見ると、ホバー形状が丸みを帯びます。

00:12:13.000 --> 00:12:17.000
最後に見たいものが1つあります。それは入力です。

00:12:17.000 --> 00:12:24.000
このプラットフォームは、コンテンツと対話するためのまったく新しい入力システムを導入しています。

00:12:24.000 --> 00:12:30.000
要素を見て、指をつまんで離すのは、TapGestureに相当します。

00:12:30.000 --> 00:12:36.000
つまみ、手を動かし、解放はPanGestureです。

00:12:36.000 --> 00:12:42.000
アプリに十分に近い場合は、手を差し伸べて触れることもできます。

00:12:42.000 --> 00:12:48.000
トラックパッドをペアリングすると、それを使用してシステムと対話することもできます。

00:12:48.000 --> 00:12:53.000
また、Appleのアクセシビリティ技術はデバイスでも利用できます。

00:12:53.000 --> 00:12:58.000
VoiceOverとスイッチコントロールは、あなたのアプリをすべての人にもたらします。

00:12:58.000 --> 00:13:05.000
システムジェスチャーリコグナイザは、トラックパッドを含むすべての入力方法で動作します。

00:13:05.000 --> 00:13:15.000
しかし、各手は1つの異なるタッチしか生成できないため、このプラットフォームには最大2つの同時入力があることに注意することが重要です。

00:13:15.000 --> 00:13:26.000
実際、iPadアプリには、このカスタムジェスチャーがあり、4本指のスワイプを使用して既存のアートをすべて削除し、新しく開始しました。

00:13:26.000 --> 00:13:29.000
ジェスチャーを維持したいので、コンパイルしません。

00:13:29.000 --> 00:13:40.000
代わりに、このコードを変更してユーザーインターフェイスのイディオムをチェックすることができ、それが現実であれば、必要なタッチの数を2つに設定することができます。

00:13:40.000 --> 00:13:47.000
アプリを磨くためにこれらすべての変更を加えた後、今、私はこのサンプルアプリを次のレベルに引き上げる準備ができていると思います。

00:13:47.000 --> 00:13:51.000
同僚のアンドリューに渡して、もっと話します。

00:13:51.000 --> 00:13:53.000
アンドリュー・フィンケ:ありがとう、グレース!

00:13:53.000 --> 00:13:58.000
こんにちは！私はアンドリューで、UIKitチームのエンジニアです。

00:13:58.000 --> 00:14:04.000
UIKitアプリを2D境界から3次元にまとめる時が来ました。

00:14:04.000 --> 00:14:08.000
グレースのアップデートで、サンプルアプリは良さそうです!

00:14:08.000 --> 00:14:17.000
そして、既存のUIKitアプリと同様に、新しい空間APIでさらに進めることができます。

00:14:17.000 --> 00:14:26.000
既存のアプリを更新して、素晴らしい空間体験を生み出す3つの簡単な方法について話します。

00:14:26.000 --> 00:14:36.000
まず、UIKitプレゼンテーションには、ビューコントローラーのトランジションに深みを加えるエキサイティングな新しい空間スタイルがあります。

00:14:36.000 --> 00:14:44.000
第二に、これまでになかった場所にコンテンツを持ち込むことができる新しいAPIがあります...

00:14:44.000 --> 00:14:46.000
現場の外!

00:14:46.000 --> 00:14:49.000
これらは装飾品と呼ばれています。

00:14:49.000 --> 00:14:58.000
最後に、RealityKitのコンテンツをアプリに直接追加する強力な新しい方法があります。

00:14:58.000 --> 00:15:03.000
これらのそれぞれがサンプルアプリを次のレベルに引き上げる方法を見てみましょう。

00:15:03.000 --> 00:15:09.000
あなたが知っていて愛しているUIKitのプレゼンテーションは、空間的にデビューしています。

00:15:09.000 --> 00:15:16.000
iPadでは、サンプルアプリはシート、アラート、ポップオーバーを使用します。

00:15:16.000 --> 00:15:21.000
それらが新しいプラットフォームでどのように振る舞うかを見てみましょう。

00:15:21.000 --> 00:15:24.000
まず、アプリの設定を開きましょう。

00:15:24.000 --> 00:15:29.000
空間シートは、提示するビューコントローラを後ろに押し戻し、暗くします。

00:15:29.000 --> 00:15:40.000
iPadとは異なり、ビューコントローラーのisModalInPresentationプロパティに関係なく、境界外のタッチやその他のジェスチャーのために却下されることはありません。

00:15:40.000 --> 00:15:45.000
次に、新しいアラートスタイルをチェックしてみましょう。

00:15:45.000 --> 00:15:51.000
アプリのアイコンの2D表現が上部に配置されています。

00:15:51.000 --> 00:15:57.000
シートと同様に、常にプッシュバックする必要があるビューコントローラーからのアラートを表示する必要があります。

00:15:57.000 --> 00:16:02.000
最後に、ドキュメントの詳細ポップオーバーを開きましょう。

00:16:02.000 --> 00:16:05.000
ああ、これは少し外れているように見えます。

00:16:05.000 --> 00:16:12.000
それは境界の外に壊れています、それは素晴らしいですが、それはアプリの中心から遠く離れています。

00:16:12.000 --> 00:16:15.000
これを修正するためにコードに入りましょう。

00:16:15.000 --> 00:16:20.000
ビューコントローラーが作成されているようで、ポップオーバースタイルに設定されています...

00:16:20.000 --> 00:16:22.000
ああ、問題が見えます。

00:16:22.000 --> 00:16:26.000
permittedArrowDirectionsはrightのみに設定されています。

00:16:26.000 --> 00:16:37.000
iPadでは、ポップオーバーはシーンに制限されていますが、空間プラットフォームでは、macOSと同様に、この同じ制約は存在しません。

00:16:37.000 --> 00:16:49.000
常にシステムが好む配置を使用するようにこれを更新しましょう。

00:16:49.000 --> 00:16:54.000
今、情報ボタンをタップすると、期待していたポップオーバーの配置が表示されます。

00:16:54.000 --> 00:17:03.000
iPadアプリで標準的なプレゼンテーションを使用している場合、空間アプリはすでに素晴らしい方法で境界を超えている可能性があります。

00:17:03.000 --> 00:17:10.000
UIKitは、プラットフォームの仮定をハードコーディングしていない限り、すべての詳細を処理します。

00:17:10.000 --> 00:17:15.000
サンプルアプリを昇格させる次の方法は、装飾品です。

00:17:15.000 --> 00:17:25.000
アプリのプレゼンテーションは空間的になりましたが、エディタ自体はまだプラットフォーム上の余分なスペースを利用していません。

00:17:25.000 --> 00:17:26.000
編集者は...

00:17:26.000 --> 00:17:28.000
...ええ、少し窮屈に見えます。

00:17:28.000 --> 00:17:38.000
しかし、装飾品を使用すると、これまでできなかった方法で空間プラットフォームが提供する余分な部屋を利用することができます。

00:17:38.000 --> 00:17:43.000
オーナメントを使用すると、合理的な制限内でアプリのシーンの周りにコンテンツを配置できます。

00:17:43.000 --> 00:17:48.000
UIKitコンポーネントは、ポップオーバーのような装飾品も使用します。

00:17:48.000 --> 00:17:54.000
それが、例のアプリポップオーバーがクリップされることなく、シーンの外に現れた方法です。

00:17:54.000 --> 00:17:59.000
デバイス上の内蔵アプリの多くは、装飾品も使用しています。

00:17:59.000 --> 00:18:03.000
これはヘッドセットのテレビのクールな外観です。

00:18:03.000 --> 00:18:13.000
このアプリは、シーンの前縁の装飾品にタブバーを配置するSwiftUIタブビューを使用します。

00:18:13.000 --> 00:18:20.000
Safariはオーナメントを使用して、ナビゲーションバーをウェブページの上に持ってきます。

00:18:20.000 --> 00:18:26.000
そして、フリーフォームはオーナメントを使用して下部ツールバーを作成します。

00:18:26.000 --> 00:18:33.000
オーナメントを使用すると、これらのアプリは主要なコンテンツを中央に保ち、コントロールをエッジに押し上げます。

00:18:33.000 --> 00:18:36.000
そして、装飾品は前方に持ち上げられ、深みが増します。

00:18:36.000 --> 00:18:40.000
彼らはあらゆる方向に境界の外を破っています!

00:18:40.000 --> 00:18:48.000
サンプルアプリでは、ツールバーの装飾にすべての編集コントロールをまとめるのは完璧だと思います。

00:18:48.000 --> 00:18:51.000
Xcodeに戻ってこれを追加しましょう。

00:18:51.000 --> 00:18:59.000
オーナメントはSwiftUIコンテンツをホストしています。このファイルですでに行ったSwiftUIを必ずインポートする必要があります。

00:18:59.000 --> 00:19:03.000
次に、新しい装飾を定義します。

00:19:03.000 --> 00:19:10.000
アライメントパラメータを使用すると、ニーズに最も適したコンテンツのレイアウトを簡単に表現できます。

00:19:10.000 --> 00:19:20.000
たとえば、オーナメントをシーンのリーディングエッジから吊るしたい場合は、リーディングシーンのアライメントとトレーリングコンテンツのアライメントを設定します。

00:19:20.000 --> 00:19:27.000
代わりにオーナメントをシーンの中に吊るしたい場合は、主要なコンテンツアライメントを使用します。

00:19:27.000 --> 00:19:38.000
編集ツールバーの場合、シーンの下部からハングアップしたいのですが、ツールが端の中央に配置されているため、エディタの一部に感じられます。

00:19:38.000 --> 00:19:44.000
これは、ボトムシーンのアライメントとセンターコンテンツのアライメントが欲しいことを意味します。

00:19:44.000 --> 00:19:50.000
私はそれらのアライメントを追加します。

00:19:50.000 --> 00:19:59.000
コンテンツについては、すでに以前に新しいEditingControlsViewを作成しましたが、ここで使用します。

00:19:59.000 --> 00:20:02.000
オーナメントは自動的に背景を追加しません。

00:20:02.000 --> 00:20:10.000
これは、適切な背景を選択することは、コンテンツに最適なものに依存するためです。

00:20:10.000 --> 00:20:18.000
ツールバーをエディタと同じガラスの背景にしたいので、新しい修飾子を使用します。

00:20:18.000 --> 00:20:27.000
次に、UIViewControllerの新しいオーナメントプロパティを、新しいオーナメントだけで配列に設定します。

00:20:27.000 --> 00:20:33.000
もし私が複数の装飾品を持っていたら、私もこの配列にそれらを含めるだろう。

00:20:33.000 --> 00:20:36.000
オーナメントはビューコントローラーのライフサイクルを共有します。

00:20:36.000 --> 00:20:41.000
ビューコントローラーが階層から削除された場合、そのオーナメントも削除されます。

00:20:41.000 --> 00:20:45.000
この関連付けは、システムインタラクションにとって非常に重要です。

00:20:45.000 --> 00:20:52.000
たとえば、シートプレゼンテーションは、トランジション中にビューコントローラに対する装飾品を保持します。

00:20:52.000 --> 00:20:59.000
最後に、意図せずに重複が発生する可能性があるケースを避けるために注意を払ってください。

00:20:59.000 --> 00:21:02.000
コードに最後の変更があります。

00:21:02.000 --> 00:21:08.000
コントロールをオーナメントに移動したので、メインエディターのためのスペースが増えました。

00:21:08.000 --> 00:21:15.000
カスタムedgeToEdgeスタイルを使用して、もう少し大きくします。

00:21:15.000 --> 00:21:20.000
アプリを実行する時間です。

00:21:20.000 --> 00:21:21.000
完璧！

00:21:21.000 --> 00:21:27.000
ツールバーは私が望んでいた場所にあり、エディタの下部の外側に壊れています。

00:21:27.000 --> 00:21:29.000
それは素晴らしいです。

00:21:29.000 --> 00:21:42.000
装飾品を利用することで、サンプルアプリは、編集ツールを近くに保ちながら、クリエイターが最も気にかけているコンテンツのために、より多くのメインエリアを使用することができます。

00:21:42.000 --> 00:21:45.000
装飾品を作るのはとても簡単です。

00:21:45.000 --> 00:21:51.000
アプリをユニークにするものに時間と労力を集中させることができます。

00:21:51.000 --> 00:21:56.000
最後に、UIKitアプリにRealityKitを追加することについて話します。

00:21:56.000 --> 00:22:02.000
RealityKitコンテンツをホストする新しいSwiftUI View、RealityViewがあります。

00:22:02.000 --> 00:22:08.000
これにより、エンティティをSwiftUI階層で親にすることができます。

00:22:08.000 --> 00:22:16.000
RealityViewを深く掘り下げるには、「RealityKitで空間体験を構築する」をチェックしてください。

00:22:16.000 --> 00:22:23.000
SwiftUIビューをホストする既存のAPI、UIHostingControllerもあります。

00:22:23.000 --> 00:22:33.000
これは、UIKitアプリを書き換えることなく、RealityViewやSwiftUIの他の新しいAPIを利用できることを意味します。

00:22:33.000 --> 00:22:39.000
サンプルアプリでは、RealityKitを使ってピクセルに命を吹き込みたいです。

00:22:39.000 --> 00:22:43.000
Xcodeを開いて魔法を作りましょう。

00:22:43.000 --> 00:22:48.000
私はすでにPixelArtEntityViewと呼ばれる新しいSwiftUIビューを作成しました。

00:22:48.000 --> 00:22:54.000
RealityViewを使用して、アートのピクセルをRealityKitエンティティとしてレンダリングします。

00:22:54.000 --> 00:22:57.000
始めるために新しいインスタンスを作ります。

00:22:57.000 --> 00:23:04.000
次に、エンティティビューをルートビューとして使用して、UIHostingControllerを設定します。

00:23:04.000 --> 00:23:15.000
ホスティングコントローラーをEditorViewControllerの子として追加し、ホスティングコントローラーのビューをEditorViewControllerのビューのサブビューとして追加します。

00:23:15.000 --> 00:23:20.000
次に、新しい親に移動されたことをホスティングコントローラーに伝えます。

00:23:20.000 --> 00:23:27.000
最後に、カスタムレイアウト関数を呼び出すと、プレビューを配置します。

00:23:27.000 --> 00:23:30.000
さて、ホスティングコントローラーのセットアップが完了しました。

00:23:30.000 --> 00:23:35.000
ショータイムです。

00:23:35.000 --> 00:23:43.000
再生ボタンを押して3Dプレビューをタップすると、新しいコードが動作していることがわかります。

00:23:43.000 --> 00:23:49.000
そのようにして、私はアプリに本当の深みのあるピクセルを追加しました。

00:23:49.000 --> 00:23:57.000
シミュレーターの軌道制御では、私の視点に基づいて照明がどのように変化するかを見ることさえできます。

00:23:57.000 --> 00:23:58.000
これはとてもかっこいい！

00:23:58.000 --> 00:24:03.000
そして、それはすべてUIKitアプリで起こっています。

00:24:03.000 --> 00:24:06.000
RealityViewはアニメーターのプレビューをレベルアップしました。

00:24:06.000 --> 00:24:11.000
そして、UIHostingControllerのおかげで、簡単に追加できました。

00:24:11.000 --> 00:24:18.000
一緒に、これらのAPIは、優れた空間アプリを構築するためのパスを短縮します。

00:24:18.000 --> 00:24:33.000
標準のUIKitプレゼンテーションを使用し、エディタコントロールをオーナメントに入れ、RealityKitで3Dピクセルを追加することで、サンプルアプリはこの新しい空間世界で素晴らしく見えます。

00:24:33.000 --> 00:24:37.000
そして、すべてほんの数行のコードで。

00:24:37.000 --> 00:24:45.000
これらの空間体験の設計ガイダンスについては、「空間設計の原則」をご覧ください。

00:24:45.000 --> 00:24:51.000
このビデオではたくさん取り上げたので、次にやるべきことは次のとおりです。

00:24:51.000 --> 00:24:55.000
プロジェクトに新しい目的地を追加することから始めます。

00:24:55.000 --> 00:25:02.000
デバイス固有のAPIの使用を更新し、非推奨のAPIから離れます。

00:25:02.000 --> 00:25:11.000
セマンティックスタイル、ホバーエフェクト、標準プレゼンテーションを使用して、アプリをプラットフォームの外観と一貫性のあるものにします。

00:25:11.000 --> 00:25:17.000
装飾品であなたのアイデアと想像力を限界を超えて広げてください。

00:25:17.000 --> 00:25:24.000
そして、UIKitから直接、新しい空間的なSwiftUI機能でアプリをさらに進めましょう。

00:25:24.000 --> 00:25:26.000
見てくれてありがとう!

00:25:26.000 --> 00:25:32.000
グレースと私は、まったく新しい次元であなたのアプリを見ることにとても興奮しています。

00:25:32.000 --> 23:59:59.000
♪

