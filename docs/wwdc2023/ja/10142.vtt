WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
ヘマント：こんにちは、私はApp Storeのコマース開発者アドボケートであるヘマントです。

00:00:15.000 --> 00:00:22.000
アプリ内購入体験のテストと検証に役立つApp Storeのツールについて議論できることを嬉しく思います。

00:00:22.000 --> 00:00:27.000
これらのツールのそれぞれの利点と、いつ使用するのが最善かをカバーします。

00:00:27.000 --> 00:00:34.000
また、アプリ内購入をテストするために今年導入するすべての素晴らしい新機能についても説明します。

00:00:34.000 --> 00:00:35.000
では、始めましょう。

00:00:35.000 --> 00:00:40.000
App Storeは、アプリ内課金のテストに役立つ3つのツールを提供しています。

00:00:40.000 --> 00:00:58.000
Xcodeには、アプリ内購入をローカルでテストできるStoreKitテストがあり、次に、App Store Connectで設定した製品を使用するサンドボックスと、エンドツーエンドのベータテストを実行し、テスターからのフィードバックを収集するためのTestFlightがあります。

00:00:58.000 --> 00:01:06.000
これらのツールは、アプリのアプリ内購入体験を構築、テスト、最適化するのに役立ちます。

00:01:06.000 --> 00:01:15.000
アプリ内購入テストに適したツールを判断するのに役立つ、これらのツールのそれぞれを簡単に説明します。

00:01:15.000 --> 00:01:19.000
XcodeでのStoreKitテストから始めます。

00:01:19.000 --> 00:01:24.000
WWDC20でXcodeでStoreKitテストを導入しました。

00:01:24.000 --> 00:01:30.000
App Store Connectで製品を設定することなく、アプリ内課金をテストできます。

00:01:30.000 --> 00:01:36.000
サーバーを必要とせずに、アプリ内購入を完全にオフラインでテストできます。

00:01:36.000 --> 00:01:43.000
これは、StoreKit設定ファイルでアプリ内購入を作成および管理する機能を提供します。

00:01:43.000 --> 00:01:48.000
そのため、コードの変更をローカルでリアルタイムでテストできます。

00:01:48.000 --> 00:01:56.000
StoreKitの統合を開始すると、シミュレーターまたはデバイスを使用してアプリ内購入体験をテストできます。

00:01:56.000 --> 00:02:04.000
専用のStoreKitTestフレームワークを使用して、アプリ内購入を継続的にテストするための自動化を構築できます。

00:02:04.000 --> 00:02:12.000
さらに、アプリ内課金商品をApp Store ConnectからXcodeに同期することもできます。

00:02:12.000 --> 00:02:18.000
これにより、StoreKit設定ファイルを手動で設定する必要性が軽減されます。

00:02:18.000 --> 00:02:35.000
また、サーバーに依存することなく、オファーコードの引き換え、値上げシート、請求再試行の入力と終了のサブスクリプションなど、高度なサブスクリプションのユースケースをローカルでテストすることができます。

00:02:35.000 --> 00:02:48.000
また、1つのユニークな機能は、柔軟なサブスクリプション更新レートです。ここでは、リアルタイムから2秒ごとまで、ニーズに合ったレートを選択できます。

00:02:48.000 --> 00:02:59.000
そして今、Xcode 15で利用可能な新しいオプションがあり、静的でサブスクリプション期間とは無関係な一連の更新レートを提供します。

00:02:59.000 --> 00:03:06.000
したがって、毎月の製品または年間製品は同じ速度で更新されます。

00:03:06.000 --> 00:03:23.000
アプリが遭遇する可能性のあるStoreKitエラーをシミュレートできます。これは、製品が販売できない場合やユーザーが購入をキャンセルした場合などのエラー処理をアプリに組み込むのに役立ちます。

00:03:23.000 --> 00:03:35.000
そして今、アプリの複数のインスタンスを実行している場合、トランザクションマネージャーは各アプリインスタンスのトランザクションを表示し、複数のデバイスでテストできるようにします。

00:03:35.000 --> 00:03:48.000
トランザクションマネージャーは、アプリを開かずにアプリ内購入を直接購入する機能を追加したので、アプリが外部トランザクションをどのように処理するかをテストできます。

00:03:48.000 --> 00:03:52.000
これらの新機能はXcode 15で利用できます。

00:03:52.000 --> 00:04:03.000
詳細については、WWDC23セッション「StoreKit 2の新機能、およびXcodeでのStoreKitテスト」を参照してください。

00:04:03.000 --> 00:04:07.000
では、App Storeのサンドボックスを見てみましょう。

00:04:07.000 --> 00:04:16.000
App Storeサンドボックスを使用すると、クライアントとサーバーの両方でエンドツーエンドのアプリ内購入の実装をテストおよび検証できます。

00:04:16.000 --> 00:04:26.000
これは、完全なアプリエクスペリエンスを構築して認定し、ユーザーにコンテンツを正常に配信することを保証する際に重要です。

00:04:26.000 --> 00:04:33.000
サンドボックスでアプリ内購入をテストするには、開発者アカウントに有料のアプリケーション契約が必要です。

00:04:33.000 --> 00:04:41.000
開発者アカウントを使用して、登録されたデバイスでアプリとアプリ内購入をテストできます。

00:04:41.000 --> 00:04:51.000
サンドボックスで購入するには、まずApp Store Connectの「ユーザーとアクセス」セクションでサンドボックスのApple IDを作成する必要があります。

00:04:51.000 --> 00:05:02.000
iOS 16以上を実行しているiOSデバイスでアプリを実行するには、プライバシー設定で開発者モードを有効にする必要があります。

00:05:02.000 --> 00:05:08.000
インストールされたアプリは、開発とテストに使用することを目的としています。

00:05:08.000 --> 00:05:22.000
サンドボックスは、購入、復元、サブスクリプションオファーなどの本番環境のようなシナリオを処理するためのロジックを検証し、本番環境でアプリを起動する自信を提供します。

00:05:22.000 --> 00:05:48.000
サンドボックスでアプリをテストするには、デバイスが必要で、デバイスをMacにテザリングしてデバイスにアプリをダウンロードするか、リリーステスト、デバッグ、カスタムなどの配布方法のいずれかを使用してIPAファイルを生成するなど、2つのオプションを使用してアプリを配布できます。

00:05:48.000 --> 00:05:57.000
これらの方法は、ソースコードを提供することなく、テスト目的でアプリをチームに配信するのに役立ちます。

00:05:57.000 --> 00:06:05.000
私たちはあなたのフィードバックに耳を傾けており、サンドボックスが顧客体験をテストするためにあなたにとって重要であることを理解しています。

00:06:05.000 --> 00:06:21.000
サンドボックスを改善し、新しいテスト機能を追加し続け、今年は、サブスクリプション請求の問題メッセージングや請求猶予期間などの不本意な解約に関するシナリオをシミュレートするためのサポートを追加しました。

00:06:21.000 --> 00:06:33.000
今年後半、ファミリー共有のアプリ内購入をテストするためのサポートをリリースし、iOSサンドボックスアカウント設定ページに新しいオプションを追加しました。

00:06:33.000 --> 00:06:36.000
これらすべての機能を深く掘り下げてみましょう。

00:06:36.000 --> 00:06:49.000
請求問題メッセージシミュレーションはサンドボックスで利用でき、今年後半には、請求再試行を入力すると、生産中の顧客に表示されます。

00:06:49.000 --> 00:06:59.000
請求問題のメッセージングは、顧客がアプリを離れることなく支払いの問題を解決し、コンテンツやサービスを購読し続けるのに役立ちます。

00:06:59.000 --> 00:07:06.000
請求問題シートは、理由請求問題でStoreKit 2メッセージAPIを使用します。

00:07:06.000 --> 00:07:13.000
StoreKitメッセージAPIは、顧客がアプリを起動したり、フォアグラウンドにしたりすると、デフォルトで表示されます。

00:07:13.000 --> 00:07:25.000
ビューにメッセージリスナーを実装することで、メッセージを延期または抑制することを選択できます。そこでは、請求問題シートのプレゼンテーションが顧客を混乱させる可能性があります。

00:07:25.000 --> 00:07:33.000
サンドボックスでメッセージAPIの理由請求問題をシミュレートして、アプリがメッセージプレゼンテーションをどのように処理するかをテストできます。

00:07:33.000 --> 00:07:43.000
StoreKit 2メッセージAPIの実装の詳細については、WWDC22セッション「アプリ内購入の新機能」を参照してください。

00:07:43.000 --> 00:07:49.000
では、サンドボックスで請求問題メッセージをシミュレートする手順を確認しましょう。

00:07:49.000 --> 00:07:59.000
請求に関する問題のメッセージをテストするには、サンドボックスのApple IDをアクティブな状態で自動更新サブスクリプションに登録する必要があります。

00:07:59.000 --> 00:08:13.000
その後、App Storeの設定でデバイスのサンドボックスアカウント設定ページに移動し、「購入と更新を許可する」スイッチを無効にすることで、請求の問題をシミュレートできます。

00:08:13.000 --> 00:08:29.000
スイッチを無効にすると、サンドボックスApple IDの請求問題がシミュレートされ、既存の自動更新サブスクリプションは、設定されたサブスクリプション更新率に従って更新に失敗し、請求再試行状態になります。

00:08:29.000 --> 00:08:41.000
また、アプリに戻ると、サブスクリプションの更新に失敗すると、App Storeから請求問題メッセージが送信され、請求問題メッセージが表示されます。

00:08:41.000 --> 00:08:56.000
続行ボタンをタップすると、iOSサンドボックスのアカウント設定ページが開き、「購入と更新を許可する」スイッチをオンにしてサブスクリプションを正常に更新できるようになりました。

00:08:56.000 --> 00:09:01.000
サブスクリプションが正常に更新されると、請求に関する問題のメッセージが表示されなくなります。

00:09:01.000 --> 00:09:12.000
これは、顧客がApple IDの支払い方法を更新するときに、アプリを離れることなく請求の問題から回復する顧客をシミュレートするのに役立ちます。

00:09:12.000 --> 00:09:22.000
猶予期間を有効にすると、Appleが支払いを回収しようとしている間、顧客はアプリの有料コンテンツとサービスへのフルアクセスを保持できます。

00:09:22.000 --> 00:09:34.000
これは、自動更新サブスクリプションが猶予期間内に回復された場合、開発者として有料サービスの日数の中断を避けるのにも役立ちます。

00:09:34.000 --> 00:09:43.000
サンドボックスで請求猶予期間を有効にしてシミュレートするには、App Store Connectのアプリサブスクリプションセクションに移動します。

00:09:43.000 --> 00:09:48.000
「請求猶予期間」セクションで、「請求猶予期間を設定する」をクリックします。

00:09:48.000 --> 00:09:56.000
これにより、アプリの請求猶予期間を設定できるダイアログが開きます。

00:09:56.000 --> 00:10:00.000
利用可能な猶予期間から選択できます。

00:10:00.000 --> 00:10:14.000
これらの期間は本番環境にのみ適用されるため、サンドボックスでテストする場合、請求の再試行期間と請求猶予期間は、サンドボックスアカウントの更新率に応じて事前に設定されます。

00:10:14.000 --> 00:10:21.000
請求猶予期間の対象となる加入者を選択し、環境を選択することもできます。

00:10:21.000 --> 00:10:32.000
サンドボックスで最初に有効にするか、サンドボックスとプロダクションの両方で有効にするかを選択し、[確認]をクリックします。

00:10:32.000 --> 00:10:36.000
あなたの選択はApp Store Connectに表示されます。

00:10:36.000 --> 00:10:40.000
それでは、ファミリー共有について話し合いましょう。

00:10:40.000 --> 00:10:48.000
ファミリー共有は、顧客がデジタル購入を家族と簡単に共有できる強力なツールです。

00:10:48.000 --> 00:11:01.000
自動更新サブスクリプションと非消耗型製品にファミリー共有を有効にすると、新規顧客を引き付け、ユーザーエンゲージメントを高め、リテンションを向上させることができます。

00:11:01.000 --> 00:11:08.000
サンドボックスでファミリー共有のアプリ内購入をテストする機能を提供したかったのです。

00:11:08.000 --> 00:11:20.000
サンドボックスでファミリー共有をテストするには、App Store Connectにログインし、ファミリー共有を有効にする必要があるサブスクリプションまたは非消耗型製品に移動する必要があります。

00:11:20.000 --> 00:11:26.000
その後、App Store Connectでサンドボックスファミリー共有メンバーを整理する必要があります。

00:11:26.000 --> 00:11:32.000
そして最後に、ファミリー共有が有効になっているサンドボックスのApple IDで購入してください。

00:11:32.000 --> 00:11:35.000
テストの詳細を見てみましょう。

00:11:35.000 --> 00:11:50.000
アプリ内購入製品を家族で共有可能にすると、App Store Connectの「ユーザーとアクセス」セクションに移動し、「ファミリー共有」というラベルの新しいセクションが表示されます。

00:11:50.000 --> 00:11:59.000
そのセクションでは、ストアフロントのサンドボックスファミリーメンバーを整理して表示することができます。

00:11:59.000 --> 00:12:04.000
アプリ内購入体験がサンドボックスでどのように見えるかを説明しましょう。

00:12:04.000 --> 00:12:11.000
ここでは、他の通常のサンドボックスの購入と同様に、デバイスでの購入を開始します。

00:12:11.000 --> 00:12:17.000
ファミリー共有を有効にすると、家族ごとにトランザクションが作成されます。

00:12:17.000 --> 00:12:25.000
アプリは、起動時またはStoreKitからリアルタイムでこれらの新しいトランザクションが表示されます。

00:12:25.000 --> 00:12:34.000
この時点で、アプリのロジックをテストして、トランザクションのサービスを検証し、エンタイトルが付与されていることを確認できます。

00:12:34.000 --> 00:12:39.000
さらに、サービスへのアクセスを失った家族をシミュレートすることもできます。

00:12:39.000 --> 00:12:45.000
そのために、iOSのサンドボックスアカウント設定で、ファミリー共有をタップします。

00:12:45.000 --> 00:12:55.000
これにより、サンドボックス内のすべての家族のビューが表示され、ファミリー共有を停止することを選択できます。

00:12:55.000 --> 00:13:09.000
サンドボックスのファミリー共有を使用すると、StoreKitのisFamilySharableプロパティを使用してファミリー共有可能な製品をマーチャンダイジングするなどのユースケースを検証および検証できます。

00:13:09.000 --> 00:13:18.000
新規または既存の購入のために、家族にサービスを付与するために、アプリロジックを検証します。

00:13:18.000 --> 00:13:28.000
各家族は共有をオフにすることができ、家族が以前に共有した購入にアクセスできなくなったときにテストすることができます。

00:13:28.000 --> 00:13:41.000
購入者がファミリー共有を停止するシナリオでは、JWSTransactionsで利用可能なrevocationDateを使用して、サービスへのアクセスの取り消しを検証できます。

00:13:41.000 --> 00:13:47.000
そして最後に、家族向けのApp Storeサーバー通知が届きます。

00:13:47.000 --> 00:13:55.000
ファミリー共有の実装の詳細については、テックトークセッション「アプリ内購入のためにファミリー共有を探索する」を参照してください。

00:13:55.000 --> 00:14:01.000
今年後半には、iOSのサンドボックスアカウント設定にオプションを追加します。

00:14:01.000 --> 00:14:10.000
iOSサンドボックスアカウント設定は、サンドボックスアプリで最初のアプリ内購入を行うと利用できます。

00:14:10.000 --> 00:14:14.000
サインインしているサンドボックスアカウントは、App Storeの設定に表示されます。

00:14:14.000 --> 00:14:19.000
このページを下にスクロールして、Sandbox Apple IDを表示します。

00:14:19.000 --> 00:14:25.000
Sandbox Apple IDをタップすると、ダイアログが表示されます。

00:14:25.000 --> 00:14:31.000
管理ボタンをタップすると、サンドボックスのアカウント設定に移動します。

00:14:31.000 --> 00:14:42.000
今年後半には、以前はApp Store Connectで利用可能で、テストのためにデバイス上で利用できるようになった3つのオプションが表示されます。

00:14:42.000 --> 00:14:53.000
アカウント設定ページから、サブスクリプションの更新率を調整し、中断された購入をテストし、購入履歴を消去します。

00:14:53.000 --> 00:15:01.000
更新率をタップすると、サンドボックスアカウントのサブスクリプション更新率を調整できます。

00:15:01.000 --> 00:15:12.000
また、サンドボックスApple IDの購入履歴を消去して、サンドボックスApple IDを更新し、ユースケースを再テストすることもできます。

00:15:12.000 --> 00:15:15.000
最後に、TestFlightを見てみましょう。 

00:15:15.000 --> 00:15:26.000
TestFlightは、アプリのエンドツーエンドエクスペリエンスをテストし、アプリを配布し、より幅広いテスターオーディエンスからフィードバックを収集するのに役立ちます。

00:15:26.000 --> 00:15:34.000
これは、App Storeでリリースする前に、アプリのエクスペリエンスを検証し、改善するのに役立ちます。

00:15:34.000 --> 00:15:39.000
TestFlightを使用すると、すべてのAppleプラットフォームにアプリを配布できます。

00:15:39.000 --> 00:15:53.000
内部テスターと外部テスターの両方を追加し、テスターの複数のグループを作成し、各グループにテストする機能に応じて各グループに異なるビルドを追加できます。

00:15:53.000 --> 00:16:02.000
テスターは最新のビルドを自動的にインストールできるようにすることができ、各ビルドはアップロード後90日間利用できます。

00:16:02.000 --> 00:16:08.000
詳細については、Tech Talksセッション「TestFlightを使い始める」をご覧ください。

00:16:08.000 --> 00:16:16.000
アプリ内購入をテストする場合、テスターはTestFlightアプリを使用してアプリビルドをダウンロードする必要があります。

00:16:16.000 --> 00:16:27.000
TestFlightを通じてダウンロードしたアプリのアプリ内課金を購入する場合、デバイスのMedia&amp;Purchases設定にサインインしているApple IDを使用します。

00:16:27.000 --> 00:16:35.000
サンドボックスと同様に、TestFlightを通じてダウンロードしたアプリのアプリ内購入のテストには料金がかかりません。

00:16:35.000 --> 00:16:45.000
自動更新サブスクリプションをテストする場合、TestFlightの更新率はサンドボックスのデフォルトの更新率と同等です。

00:16:45.000 --> 00:16:58.000
また、アプリがStoreKitのshowManageSubscription APIを実装している場合は、サブスクリプションのキャンセルをテストしたり、サブスクリプションを変更したりすることができます。

00:16:58.000 --> 00:17:03.000
今年は、TestFlightでテスターの管理を容易にします。

00:17:03.000 --> 00:17:14.000
ステータス、セッション、テスターの一括選択グループなどのテスターデータでフィルタリングして、グループに追加または削除できます。

00:17:14.000 --> 00:17:23.000
また、TestFlightアプリの配布を合理化するために、内部のみのビルドを配布するための新しい方法が追加されました。

00:17:23.000 --> 00:17:32.000
この方法を使用すると、ビルドが内部テスターが利用でき、App Storeのレビューに提出できないことが保証されます。

00:17:32.000 --> 00:17:42.000
詳細については、セッション「App Store Connectの新機能」と「XcodeとXcode Cloudでの配布を簡素化」を参照してください。

00:17:42.000 --> 00:18:03.000
アプリ内購入のテストに使用できるツールを確認したので、これらのツールには独自の利点と違いがあるだけでなく、すべてのアプリ内購入タイプのテストをサポートし、サブスクリプションが加速レートで更新されるなど、多くの共通点があることを知っておくことが重要です。

00:18:03.000 --> 00:18:10.000
ただし、これらのツールのいくつかは、特定の機能の実装やユースケースに理想的かもしれません。

00:18:10.000 --> 00:18:20.000
たとえば、サブスクリプションオファーコードの償還と値上げシートは、XcodeのStoreKitテストを使用してテストできます。

00:18:20.000 --> 00:18:28.000
請求の再試行と猶予期間は、XcodeとサンドボックスのStoreKitテストの両方を使用してテストできます。

00:18:28.000 --> 00:18:49.000
サーバー側の実装を検証するために、サンドボックスとTestFlightの両方がApp Store Server NotificationsとApp Store Server APIをサポートし、TestFlightはアプリのパフォーマンスと全体的なエクスペリエンスに関する内部および外部のテスターからのフィードバックを受け取るための合理化されたプロセスを提供します。

00:18:49.000 --> 00:19:01.000
ユースケース、機能の実装、および組織のチーム構造に応じて、アプリ内購入をテストするためにこれらのツールを活用することを検討してください。

00:19:01.000 --> 00:19:11.000
今日は多くのことを取り上げましたが、このセッションが、アプリ内購入をテストするために利用可能なすべてのツールをよりよく理解するのに役立ったことを願っています。

00:19:11.000 --> 00:19:17.000
詳細については、developer.apple.comで利用可能なドキュメントを参照してください。

00:19:17.000 --> 00:19:24.000
また、アプリ内購入のテスト体験を向上させる方法について、ご意見をお聞かせください。

00:19:24.000 --> 00:19:27.000
フィードバックアシスタントを通じてお知らせください。

00:19:27.000 --> 23:59:59.000
このセッションを視聴していただきありがとうございます。

