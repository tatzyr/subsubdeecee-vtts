WEBVTT

00:00:00.000 --> 00:00:15.000
こんにちは、tvOSチームのソフトウェアエンジニアのKevin Tulodです。

00:00:15.000 --> 00:00:19.000
そして、私はCore AudioチームのエンジニアであるSomesh Ganeshです。

00:00:19.000 --> 00:00:25.000
このセッションでは、カメラとマイクのサポートをtvOSアプリに導入することについて説明します。

00:00:25.000 --> 00:00:30.000
tvOS 17では、Apple TVにContinuity CameraとMicが導入されています。

00:00:30.000 --> 00:00:36.000
これで、iPhoneやiPadからカメラとマイクのデータをストリーミングして、tvOSの入力として使用できます。

00:00:36.000 --> 00:00:40.000
これにより、大画面用のまったく新しいジャンルのアプリや体験が開きます。

00:00:40.000 --> 00:00:50.000
tvOS上のほとんどのアプリは、通常、映画やテレビ番組のストリーミングなどのコンテンツ再生アプリとゲームの2つのカテゴリに分類されます。

00:00:50.000 --> 00:01:03.000
連続カメラを使用すると、ビデオやオーディオを記録するコンテンツ作成アプリや、ビデオ会議やライブストリーミングなどのソーシャルアプリなど、tvOS用のまったく新しいアプリを構築できます。

00:01:03.000 --> 00:01:12.000
カメラとマイクを既存のストリーミングアプリやゲームに統合して、以前のバージョンのtvOSでは不可能だったまったく新しい機能を作成することもできます。

00:01:12.000 --> 00:01:22.000
この機能により、テレビ用の多様なアプリが可能になり、Continuity CameraとMicをtvOSアプリに持ち込む方法を紹介します。

00:01:22.000 --> 00:01:27.000
昨年、macOS Venturaは、iPhoneをウェブカメラとして使用するためのContinuity Cameraを導入しました。

00:01:27.000 --> 00:01:33.000
携帯電話をMacに近づけるだけで、カメラとマイクが入力デバイスとして利用可能になります。

00:01:33.000 --> 00:01:42.000
macOSのContinuity Cameraにまだ慣れていない場合は、WWDC 2022のこのトピックに関するセッションをチェックしてください。

00:01:42.000 --> 00:01:50.000
このセッションでは、まず、カメラやマイクにアクセスするためにアプリがtvOSで採用できるAPIの概要から始めます。

00:01:50.000 --> 00:01:58.000
次に、アプリがtvOSでContinuity Cameraを採用し、iPhoneやiPadをカメラやマイクとして使用する方法について説明します。

00:01:58.000 --> 00:02:07.000
次に、tvOSで優れたアプリ体験を構築する方法について簡単に説明し、他のプラットフォームでの開発と比較して類似点と相違点を強調します。

00:02:07.000 --> 00:02:15.000
最後に、Someshは、幅広い複雑なオーディオニーズにアプリで使用できるマイクAPIについて説明します。

00:02:15.000 --> 00:02:20.000
キャプチャデバイスAPIの概要から始めましょう。

00:02:20.000 --> 00:02:27.000
AVFoundation、AVFAudio、およびAudioToolboxを使用すると、ビデオとオーディオをキャプチャするためのカメラとマイクにアクセスできます。

00:02:27.000 --> 00:02:34.000
特にAVFoundationのAVCaptureクラスファミリーで、アプリがキャプチャデバイスをどのように使用できるかを見てみましょう。

00:02:34.000 --> 00:02:41.000
まず、アプリはカメラとマイクを表すAVCaptureDevicesとAVCaptureDeviceInputsを使用します。

00:02:41.000 --> 00:02:47.000
これらは、キャプチャに関連するすべてのものの主なオブジェクトであるAVCaptureSessionに接続します。

00:02:47.000 --> 00:02:51.000
AVCaptureOutputsは、さまざまな方法で入力からデータをレンダリングします。

00:02:51.000 --> 00:03:00.000
これらを使用して、映画を録画したり、写真を撮ったり、カメラとマイクのバッファにアクセスしたり、入力デバイスから他のメタデータを取得したりできます。

00:03:00.000 --> 00:03:05.000
UIでライブカメラフィードを表示するには、AVCaptureVideoPreviewLayerを使用できます。

00:03:05.000 --> 00:03:09.000
これは、CALayerをサブクラスする特別なタイプの出力です。

00:03:09.000 --> 00:03:14.000
また、AVCaptureConnectionsを介してキャプチャ入力から互換性のある出力にデータが流れます。

00:03:14.000 --> 00:03:22.000
これらのキャプチャAPIは、tvOS 17以降、iOS、macOS、およびtvOSで利用できます。

00:03:22.000 --> 00:03:30.000
AVFoundationのキャプチャ機能を使用して開発するのが初めての場合は、developer.apple.comのキャプチャセットアップ開始ページで詳細を確認できます。

00:03:30.000 --> 00:03:36.000
tvOSは現在、iOSで提供されているのと同じカメラとマイクのAPIもサポートしています。

00:03:36.000 --> 00:03:46.000
すでにiOS用に構築されたカメラまたはマイクアプリをお持ちの場合、ほとんどのコードはtvOSで動作しますが、異なるAPIとコーディングプラクティスがいくつかあります。

00:03:46.000 --> 00:03:54.000
Apple TVにはAV入力が内蔵されていないため、カメラとマイクを使用する前に、アプリはDevice Discoveryを採用する必要があります。

00:03:54.000 --> 00:04:01.000
これは、アプリがContinuityデバイスが表示されたり消えたりするときなどのエッジケースを処理できるようにするためです。

00:04:01.000 --> 00:04:10.000
また、iOSとは異なるtvOSのアプリの起動にはいくつかのニュアンスがあり、最高のtvOSアプリ体験のためにこれらの考慮事項について説明します。

00:04:10.000 --> 00:04:20.000
iOSの同じカメラとマイクのAPIがtvOSで利用可能になったので、既存のiOSアプリにtvOSのサポートを導入することを順を追って説明します。

00:04:20.000 --> 00:04:24.000
私はすでにiOS用に構築されたシンプルなカメラとマイクアプリを持っています。

00:04:24.000 --> 00:04:30.000
このアプリには、カメラとマイクにアクセスして写真を撮影したり、ビデオやオーディオを録画したりする基本的なUIがあります。

00:04:30.000 --> 00:04:36.000
このセッションを通して、新しいContinuity CameraとMic APIを使用して、このアプリにtvOSサポートを提供します。

00:04:36.000 --> 00:04:39.000
それがどのように構築されているかを見てみましょう。

00:04:39.000 --> 00:04:44.000
Xcodeでは、アプリのUIが定義されているContentViewを開きます。

00:04:44.000 --> 00:04:49.000
ここで、アプリは画面に表示される基本的なUI要素の位置を指定します。

00:04:49.000 --> 00:05:00.000
最も重要なのは、AVCaptureVideoPreviewLayerに接続して、他のすべてのUI要素の背後にあるライブカメラプレビューを表示するCameraPreviewビューです。

00:05:00.000 --> 00:05:07.000
次は、AVFoundationからいくつかのAVCaptureSessionクラスをラップするCaptureSessionクラスです。

00:05:07.000 --> 00:05:15.000
このクラスにはAVCaptureSessionのプロパティがあり、どのキャプチャ入力が選択され、データがどこに出力されるかを制御するために使用されます。

00:05:15.000 --> 00:05:22.000
この場合、出力はContentViewに表示されるAVCaptureVideoPreviewLayerです。

00:05:22.000 --> 00:05:27.000
CaptureSessionクラスには、アクティブなビデオ入力を設定する機能もあります。

00:05:27.000 --> 00:05:37.000
この機能では、アプリは選択した入力を検証し、AVCaptureSessionを設定し、セッションを開始します。

00:05:37.000 --> 00:05:43.000
これにより、AVCaptureDeviceからContentViewに表示されるプレビューレイヤーへのデータの流れが開始されます。

00:05:43.000 --> 00:05:54.000
これらのAVCapture APIはすべてtvOSでも利用可能になったので、アプリのサポートされているOSとしてtvOSを追加します。

00:05:54.000 --> 00:06:06.000
私は今、プロジェクトナビゲーターでプロジェクトを選択し、アプリのターゲットを強調表示し、サポートされている宛先としてApple TVを追加しています。

00:06:06.000 --> 00:06:09.000
この時点で、アプリはtvOSでビルドして実行できます。

00:06:09.000 --> 00:06:14.000
しかし、利用可能な入力デバイスがないため、アプリはあまり機能しません。

00:06:14.000 --> 00:06:22.000
これにより、キャプチャデバイスを見つけてtvOSで使用するために選択するプロセスから始めて、Continuity Cameraに導きます。

00:06:22.000 --> 00:06:29.000
AVCaptureに関連することを行う前に、アプリはビデオおよびオーディオキャプチャデバイスを使用する権限を持っていることを確認する必要があります。

00:06:29.000 --> 00:06:36.000
これにより、アプリはこれらのデバイスへのアクセスが必要な理由を説明することができ、ユーザーはアクセスを承認または拒否できます。

00:06:36.000 --> 00:06:40.000
Info.plistでカメラとマイクの使用キーを設定することを忘れないでください。

00:06:40.000 --> 00:06:45.000
この説明は、承認を求められたときにユーザーに表示されます。

00:06:45.000 --> 00:06:51.000
カメラを内蔵したiPhoneやiPadなど、ユーザーの個人用デバイス用のアプリを構築することに慣れているかもしれません。

00:06:51.000 --> 00:06:57.000
しかし、Apple TVは、自分のiCloudアカウントを持つ複数の人が共有する共同デバイスです。

00:06:57.000 --> 00:07:06.000
共同デバイスで最高の体験を可能にするために、ゲストを含む互換性のあるデバイスを持っている人は誰でも、自分のデバイスを連続性カメラとして使用できます。

00:07:06.000 --> 00:07:13.000
これは、ユーザーが自宅、友人の家、またはバケーションレンタルなどの共有スペースでアプリの録画機能を使用できることを意味します。

00:07:13.000 --> 00:07:21.000
また、カメラがいつでもシステムから表示または消える可能性があり、アプリはこれらのケースを処理できるはずです。

00:07:21.000 --> 00:07:27.000
AVKitは現在、AVContinuityDevicePickerViewControllerと呼ばれる新しいビューコントローラーを提供しています。

00:07:27.000 --> 00:07:32.000
このコントローラーを使用して、カメラとマイクとして使用する適格な連続性デバイスを選択できます。

00:07:32.000 --> 00:07:40.000
このビューコントローラーは、Apple TVにサインインしているすべてのユーザーを一覧表示し、デバイスをContinuity Cameraに接続できるようにします。

00:07:40.000 --> 00:07:46.000
ゲストがApple TVとペアリングして、iOSデバイスを連係カメラに使用する方法もあります。

00:07:46.000 --> 00:07:51.000
キャプチャデバイスにアクセスするときは、アプリが最初に使用できるものがあるかどうかを確認する必要があります。

00:07:51.000 --> 00:07:58.000
利用可能な場合は、キャプチャデバイスを使用してキャプチャセッションを開始し、AVCaptureOutputsのいずれかにデータを送信できます。

00:07:58.000 --> 00:08:04.000
利用可能なものない場合は、デバイスピッカーを使用して、関連するUIをユーザーに提示します。

00:08:04.000 --> 00:08:08.000
これは、デバイスのカメラとマイクを共有するプロセスを案内します。

00:08:08.000 --> 00:08:14.000
デバイスが選択されると、ビューコントローラーはデリゲートコールバックを呼び、デバイスが表示されたことを知らせます。

00:08:14.000 --> 00:08:19.000
その後、そのデバイスの可用性を検証し、キャプチャセッションの開始を続行できます。

00:08:19.000 --> 00:08:24.000
舞台裏では、tvOSとiOSが連携してこの接続を確立します。

00:08:24.000 --> 00:08:33.000
選択が行われると、tvOSはApple TVのすぐ近くにそのユーザーの適格なデバイスにpingを実行し、確認を促します。

00:08:33.000 --> 00:08:37.000
その後、ユーザーは通知されたデバイスのいずれかで接続を受け入れることができます。

00:08:37.000 --> 00:08:45.000
その時点で、カメラとマイクがアプリで使用可能になり、カメラとマイクのデータはストリーミングを開始できます。

00:08:45.000 --> 00:08:55.000
SwiftUIアプリでデバイスピッカーを表示するために、AVKitはtvOS 17の新機能である継続性DevicePicker修飾子を提供し、ピッカーを提示します。

00:08:55.000 --> 00:09:02.000
そのプレゼンテーション状態は、他のコンテンツ提示ビュー修飾子と同様に、状態変数によって更新されます。

00:09:02.000 --> 00:09:08.000
デバイスが選択され、利用可能になると、ピッカーはAVContinuityDeviceでコールバックを却下し、呼び出します。

00:09:08.000 --> 00:09:18.000
このオブジェクトには、iPhoneやiPadなどの特定の物理デバイスに関連付けられているAVCaptureDevicesへの参照があります。

00:09:18.000 --> 00:09:24.000
デバイスピッカーは、AVContinuityDevicePickerViewControllerを使用してUIKitアプリで表示することもできます。

00:09:24.000 --> 00:09:34.000
このビューコントローラは、オプションのライフサイクルイベントを提供するデリゲートと、AVContinuityDeviceが選択されて利用可能になったときのコールバックを取ります。

00:09:34.000 --> 00:09:46.000
このようなデバイスが利用可能になると、キャプチャデバイスはAVCaptureDeviceDiscoverySessionやAVCaptureDeviceのKVOオブザーバーなど、他のデバイスリスナーにも公開されます。

00:09:46.000 --> 00:09:50.000
tvOSでは、キャプチャデバイスは連続性カメラのみであることを覚えておいてください。

00:09:50.000 --> 00:09:58.000
これは、アプリがカメラとマイクが使用不可から利用可能に移行するケースを処理しなければならないことを意味し、その逆も同様です。

00:09:58.000 --> 00:10:05.000
すべてのプラットフォームで、AVCaptureDevice.systemPreferredCameraを使用すると、最も適した利用可能なカメラにアクセスできます。

00:10:05.000 --> 00:10:11.000
このAPIは現在tvOSで利用可能で、まったく同じように機能します。

00:10:11.000 --> 00:10:14.000
このプロパティは、カメラの可用性に基づいて更新されます。

00:10:14.000 --> 00:10:25.000
Apple TVには一度に1つの連係カメラしか接続できないため、nil値は利用可能なカメラがないことを意味し、nil以外の値は利用可能な連係カメラがあることを意味します。

00:10:25.000 --> 00:10:29.000
キー値観察を使用して、systemPreferredCameraの変更を監視できます。

00:10:29.000 --> 00:10:36.000
また、tvOSでは、接続されたキャプチャデバイスはType continuityCameraになります。

00:10:36.000 --> 00:10:44.000
systemPreferredCameraプロパティをキー値で観察すると、アプリはカメラの可用性に基づいてあるべき状態を再評価できます。

00:10:44.000 --> 00:10:50.000
カメラが利用可能になったら、AVCaptureSessionを開始してビデオまたはオーディオの録画を開始できます。

00:10:50.000 --> 00:11:01.000
カメラが使用できなくなったら、以前のキャプチャセッションから必要なティアダウンを実行し、デバイスが使用できなくなったことをユーザーに示し、新しいデバイスを接続するオプションを与える必要があります。

00:11:01.000 --> 00:11:08.000
連係カメラがApple TVに接続されると、アプリは既存のカメラキャプチャAPIの多くにアクセスできます。

00:11:08.000 --> 00:11:17.000
たとえば、AVCaptureMetadataOutputを使用して、検出された顔やボディなどのフレームごとのビデオメタデータを取得できます。

00:11:17.000 --> 00:11:31.000
AVCapturePhotoOutputを使用して高解像度の写真をキャプチャしたり、AVCaptureMovieFileOutputを使用してビデオとオーディオでムービーを録画したり、ビデオエフェクトを監視したり、zoomFactorなどのカメラのプロパティを制御したりできます。

00:11:31.000 --> 00:11:36.000
連続カメラを搭載したtvOSで利用可能なカメラAPIは他にもたくさんあります。

00:11:36.000 --> 00:11:42.000
高度なカメラキャプチャ機能とテクニックを深く掘り下げた以前のビデオを参照できます。

00:11:42.000 --> 00:11:49.000
これらは、Continuity Captureデバイスを検出して選択するために、アプリが採用する必要があるtvOS固有のAPIです。

00:11:49.000 --> 00:11:54.000
私たちが取り組んでいるアプリにこの機能をもたらしましょう。

00:11:54.000 --> 00:12:02.000
XcodeのContentViewでは、デバイスピッカーのプレゼンテーション状態を制御するためにtvOSの状態変数が必要であることがわかっています。

00:12:02.000 --> 00:12:12.000
先に進んで状態変数を追加し、コンパイラガードを使用してtvOSでのみ使用されていることを確認します。

00:12:12.000 --> 00:12:23.000
ContentViewの下部に、Continuity-Camera-特定のロジックを処理するためのtvOSのみの拡張機能を作成します。

00:12:23.000 --> 00:12:36.000
次に、計算変数を追加して、追加した状態変数を切り替えてデバイスピッカーを表示するボタンを作成します。

00:12:36.000 --> 00:12:41.000
次に、Continuity Cameraが接続されたときに呼び出されるコールバックハンドラを追加します。

00:12:41.000 --> 00:12:52.000
接続されると、カメラがアクティブなビデオ入力として設定され、キャプチャセッションが開始されます。

00:12:52.000 --> 00:13:03.000
最後に、すでに接続されている場合に備えて、Continuity Cameraをアクティブにする方法を追加します。

00:13:03.000 --> 00:13:10.000
では、UIへの追加を始めましょう。

00:13:10.000 --> 00:13:18.000
ビューボディで、デバイスピッカーボタンをビューに追加します。

00:13:18.000 --> 00:13:32.000
次に、継続性DevicePickerビュー修飾子を追加し、状態変数と先ほど追加されたコールバック関数に接続します。

00:13:32.000 --> 00:13:46.000
最後に、接続されているContinuityデバイスがすでに接続されている場合、起動しようとするタスクを追加します。

00:13:46.000 --> 00:13:52.000
そして、これらは、既存のiOSカメラアプリにtvOSサポートをもたらすために必要なすべてのコード変更です。

00:13:52.000 --> 00:13:58.000
では、Apple TVで実行して、どのように見えるか見てみましょう。

00:13:58.000 --> 00:14:03.000
アプリは基本的なUIで起動しますが、まだカメラを接続していないので、カメラフィードはありません。

00:14:03.000 --> 00:14:08.000
先に進み、デバイスピッカーを表示するために追加したボタンを選択します。

00:14:08.000 --> 00:14:10.000
これにより、カメラを接続するためのオプションが得られます。

00:14:10.000 --> 00:14:24.000
ジャスティンのユーザーを選択し、指示に従ってペアリングします。

00:14:24.000 --> 00:14:26.000
そして、連係カメラが接続されています!

00:14:26.000 --> 00:14:35.000
このアプリのtvOSバージョンは、iOSと同じ共有コードを使用してどのように見えるかであり、tvOSにデバイス検出を追加するためのいくつかのマイナーな変更だけです。

00:14:35.000 --> 00:14:38.000
カメラAPIの既存の使用に変更はありませんでした。

00:14:38.000 --> 00:14:47.000
iOSアプリのように、先に進んで写真を撮ることもできます。

00:14:47.000 --> 00:14:53.000
そして、それはtvOSのContinuity Cameraです。

00:14:53.000 --> 00:15:02.000
既存のアプリをtvOSに適応させている場合や、tvOSの開発を始めたばかりの場合は、プラットフォームのニュアンスをすばやく要約したいと思います。

00:15:02.000 --> 00:15:05.000
tvOSで最も顕著な違いは、ユーザーインタラクションです。

00:15:05.000 --> 00:15:08.000
tvOSにはダイレクトタッチイベントはありません。

00:15:08.000 --> 00:15:15.000
ユーザーは、スワイプ、方向矢印プレス、およびリモコンの他のボタンを介してフォーカスエンジンを使用してシステムと対話します。

00:15:15.000 --> 00:15:21.000
共同デバイスとして、tvOSは複数の人が使用でき、複数のユーザーとゲストをサポートしています。

00:15:21.000 --> 00:15:27.000
これは、アプリが他のプラットフォームとは異なる方法で個人情報を処理する必要がある可能性があることを意味します。

00:15:27.000 --> 00:15:30.000
最後に、tvOSには独自のファイルストレージポリシーがあります。

00:15:30.000 --> 00:15:36.000
これは、ビデオやオーディオを録音するコンテンツ作成アプリを書いている場合に特に重要です。

00:15:36.000 --> 00:15:38.000
もっと詳しく掘りましょう。

00:15:38.000 --> 00:15:41.000
ディスク容量は共有リソースであることを覚えておいてください。

00:15:41.000 --> 00:15:55.000
ディスクスペースの主な消費者は、削除できないオペレーティングシステム、フレームワークとアプリバイナリ、その一部は設定がオンになっている場合にオフロードできます。スペースの大部分は一時データのキャッシュとして使用されます。

00:15:55.000 --> 00:16:02.000
tvOSアプリは、主にストリーミングなどのコンテンツ消費用に構築されており、非常に大きな利用可能なキャッシュが必要です。

00:16:02.000 --> 00:16:09.000
このディスクスペースモデルを維持することは、すべてのtvOSアプリで最高のユーザーエクスペリエンスを確保するのに役立ちます。

00:16:09.000 --> 00:16:15.000
iOSでは、FileManagerを使用してデータを永続的に保存し、.documentDirectoryパスに書き込むことができます。

00:16:15.000 --> 00:16:21.000
このAPIの使用は、tvOSでは推奨されません。

00:16:21.000 --> 00:16:25.000
OSは大きなファイルの永続的な保存を許可していません。

00:16:25.000 --> 00:16:30.000
ヘッダーで使用可能な間、.documentDirectoryの使用はランタイムエラーで失敗します。

00:16:30.000 --> 00:16:37.000
代わりに、tvOS用にビルドする場合、アプリは.cachesDirectoryのみを使用する必要があります。

00:16:37.000 --> 00:16:40.000
このディレクトリ内のデータは、アプリの実行中に利用可能になります。

00:16:40.000 --> 00:16:45.000
ただし、このデータはアプリの起動の合間にディスクから消去される可能性があります。

00:16:45.000 --> 00:16:54.000
そのため、クラウドにアップロードしたり、ディスクに不要になったときに削除するなど、できるだけ早くデータを他の場所にオフロードすることをお勧めします。

00:16:54.000 --> 00:17:00.000
tvOSには他のファイルストレージオプションがあり、興味深いマルチユーザーユースケースがいくつかあります。

00:17:00.000 --> 00:17:06.000
たとえば、ユーザー単位でも、CloudKitを使用してアプリデータをiCloudに保存できます。

00:17:06.000 --> 00:17:14.000
過去にtvOS上の複数のユーザーのストレージオプションを取り上げており、詳細についてはこれらのビデオを参照することをお勧めします。

00:17:14.000 --> 00:17:26.000
tvOS開発が初めての場合は、developer.apple.comのtvOSアプリの計画ページをご覧ください。このページでは、Apple TV用に開発する際に留意すべきさまざまな機能と考慮事項について説明します。

00:17:26.000 --> 00:17:34.000
そして、それがtvOS 17の新しいContinuity CameraとDevice Discovery APIを使用して、優れたtvOSアプリ体験を構築する方法です。

00:17:34.000 --> 00:17:40.000
それでは、tvOS 17でアクセスできるさまざまなマイク機能について話しましょう。

00:17:40.000 --> 00:17:45.000
アプリは、初めてtvOSでマイクを使用する機能を持つことになります!

00:17:45.000 --> 00:17:51.000
この機能を利用するためにアプリで何をする必要があるかを掘り下げてみましょう。

00:17:51.000 --> 00:17:55.000
これが今年行われた変更の概要です。

00:17:55.000 --> 00:18:00.000
tvOSのAVFAudioフレームワークのオーディオセッションに追加されています。

00:18:00.000 --> 00:18:08.000
iOSと同様に、オーディオセッションは、アプリでオーディオを使用する方法を伝えるシステムレベルのインターフェイスです。

00:18:08.000 --> 00:18:17.000
たとえば、中断やルートの変更などの通知にサインアップして処理し、アプリのカテゴリとモードを設定します。

00:18:17.000 --> 00:18:23.000
録画APIのフルスイートもiOSからtvOSに持ち込まれました。

00:18:23.000 --> 00:18:28.000
これらには、AVFAudioとAudioToolboxフレームワークの録音APIが含まれます。

00:18:28.000 --> 00:18:31.000
オーディオセッションから始めましょう。

00:18:31.000 --> 00:18:37.000
tvOS 17では、アプリはApple TVでいくつかの異なるマイクデバイスを使用できるようになります。

00:18:37.000 --> 00:18:49.000
これは、iPhoneやiPadのような連続マイク、またはtvOSデバイスに直接ペアリングできるAirPodsや他のヘッドセットのようなBluetoothデバイスのいずれかです。

00:18:49.000 --> 00:18:55.000
入力デバイスのタイプを認識する方法は、AVAudioSessionPortタイプを介して行われます。

00:18:55.000 --> 00:19:03.000
Device Discoveryフローを通過した後、audioSessionPortsプロパティを持つAVContinuityDeviceにアクセスできます。

00:19:03.000 --> 00:19:11.000
ポートタイプを含むオーディオデバイスに関する情報は、このプロパティから照会できます。

00:19:11.000 --> 00:19:23.000
継続性マイクの新しいポートタイプが追加され、入力デバイスの種類に基づいてアプリで特定のことをしたい場合は、このポートを識別子として使用することをお勧めします。

00:19:23.000 --> 00:19:31.000
ただし、このフローは、AVContinuityDeviceに該当するiPhoneとiPadでのみ機能します。

00:19:31.000 --> 00:19:38.000
また、既存のオーディオセッションAPIを引き続き使用して、システム上の利用可能な入力を照会することもできます。

00:19:38.000 --> 00:19:44.000
AirPodsまたはBluetoothマイクの既存のポートタイプは、iOSから引き継がれました。

00:19:44.000 --> 00:19:53.000
キャプチャデバイスの可用性に基づいて、マイクデバイスの可用性と、tvOSでどのように監視する必要があるかについて話しましょう。

00:19:53.000 --> 00:20:00.000
Apple TVにはマイクが内蔵されておらず、アプリが常にマイクデバイスにアクセスできることは保証されていません。

00:20:00.000 --> 00:20:13.000
この目的のために、オーディオセッションのInputAvailableプロパティは、使用可能なマイクデバイスがあるときと存在しないときに監視するためのキー値の観測可能なサポートを持つようになりました。

00:20:13.000 --> 00:20:19.000
マイクの可用性に動的な変更がある場合は、このプロパティを聞くことを強くお勧めします。

00:20:19.000 --> 00:20:30.000
これは、オーディオセッションをアクティブにしてI/Oを開始するタイミングを決定し、マイクデバイスがシステムから表示または消えたときにアプリの状態を処理するのにも役立ちます。

00:20:30.000 --> 00:20:46.000
次に、iOSと同様に、録画許可APIがtvOS 17で利用可能になり、ユーザーがすでにアプリにマイクへのアクセスを許可しているかどうかを確認し、そうでない場合は録画許可をリクエストできます。

00:20:46.000 --> 00:20:54.000
アプリは、I/Oの起動中に失敗を避けるために記録する権限を確保することをお勧めします。

00:20:54.000 --> 00:21:06.000
最後になりましたが、オーディオセッションでは、playAndRecordのカテゴリやボイスチャットやビデオチャットなどのモードなどの入力をサポートするカテゴリとモードがtvOSでも利用可能になりました。

00:21:06.000 --> 00:21:14.000
ヘッダーAVAudioSessionTypesを参照して、どのオーディオセッションカテゴリとモードがアプリに最も適しているかを判断するのに役立ちます。

00:21:14.000 --> 00:21:19.000
そして、これらはtvOS 17に新しく追加されたすべてのオーディオセッションの変更です。

00:21:19.000 --> 00:21:25.000
では、多様な記録APIとその推奨ユースケースについて話しましょう。

00:21:25.000 --> 00:21:28.000
まず、AVAudioRecorder。

00:21:28.000 --> 00:21:40.000
これはオーディオファイルに録音する最も簡単な方法であり、非リアルタイムのユースケースのためにマイクに入っているものを録音する必要がある場合は、AVAudioRecorderが頼りになるオプションです。

00:21:40.000 --> 00:21:47.000
さまざまなエンコーディング形式、特定のファイル形式、サンプルレートなどで構成できます。

00:21:47.000 --> 00:21:50.000
次に、AVCaptureがあります。

00:21:50.000 --> 00:22:01.000
ケビンが述べたように、既存のiOS AVCapture APIを活用して、カメラとマイクの両方が再生されている場合は、基本的な録音ユースケースのマイクにアクセスできます。

00:22:01.000 --> 00:22:04.000
AVAudioEngineに進みます。

00:22:04.000 --> 00:22:12.000
AVAudioEngineは、シンプルで複雑なオーディオ処理のユースケースの録音と再生の両方をサポートしています。

00:22:12.000 --> 00:22:22.000
この例としては、マイクからのユーザーの音声入力を分析し、このマイク入力を再生トラックとミックスできるカラオケアプリがあります。

00:22:22.000 --> 00:22:28.000
現在、アプリがリアルタイムのオーディオI/Oサイクルと直接やり取りしたい場合があります。

00:22:28.000 --> 00:22:33.000
AVAudioEngineはリアルタイムのインターフェースも提供します。

00:22:33.000 --> 00:22:40.000
アプリは、AVAudioSinkNodeとAVAudioSourceNodeを介してリアルタイムのセーフレンダリングコールバックを提供できます。

00:22:40.000 --> 00:22:45.000
AVAudioEngineで音声処理機能にアクセスすることもできます。

00:22:45.000 --> 00:22:53.000
低レベルのインターフェースを扱うアプリでは、対応するiOSメカニズムもtvOSに持ち込まれています。

00:22:53.000 --> 00:22:57.000
非リアルタイム録音のユースケースについては、AudioQueueに問い合わせることができます。

00:22:57.000 --> 00:23:08.000
リアルタイムのオーディオI/Oサイクルと直接対話するには、既存のAudioUnit APIを介してオーディオユニットAU RemoteIOとAU VoiceIOを使用できます。

00:23:08.000 --> 00:23:18.000
これらのAPIに関する詳細情報をご希望の場合は、AVFAudioおよびAudio Toolboxフレームワークの開発者Webサイトをチェックすることをお勧めします。

00:23:18.000 --> 00:23:30.000
たとえば、会議のユースケースでは、Apple TVからの再生をエコーキャンセルする必要があるマイクストリームが必要な場合は、音声処理APIにオプトインすることを強くお勧めします。

00:23:30.000 --> 00:23:32.000
理由について話しましょう。

00:23:32.000 --> 00:23:44.000
標準的なエコーキャンセルの問題と比較して、録音と再生が同じデバイスで行われるiPhoneでは、tvOSのセットアップで新しいことがすべてここにあります。

00:23:44.000 --> 00:23:50.000
連続マイク対応ルートでは、録音はiPhoneまたはiPadで行われます。

00:23:50.000 --> 00:24:14.000
しかし、再生はtvOSデバイスでストリーミングされ、任意のテレビスピーカー、ホームシアターのセットアップ、サウンドバー、またはステレオHomePodのペアから再生することができ、そのほとんどは5.1や7.1 LPCMなどの豊富なフォーマットを再生し、ユーザーエクスペリエンスを向上させるために独自のオーディオ処理を実行する機能を備えています。

00:24:14.000 --> 00:24:26.000
これに加えて、一般的なApple TVの設定では、ユーザーはマイクデバイスから数フィート離れている可能性があり、このマイクデバイスはこれらの大きな再生デバイスにはるかに近い可能性があります。

00:24:26.000 --> 00:24:38.000
これらのシナリオはすべて、ローカル環境からのオーディオを高品質でキャプチャしながら、Apple TVからのすべての再生をキャンセルしたいという非常に困難なエコー制御問題を設定しました。

00:24:38.000 --> 00:24:46.000
これらすべての課題を克服するために、tvOS 17は現在、新しい音声処理とエコーキャンセル技術を導入しています。

00:24:46.000 --> 00:25:00.000
tvOSでも利用可能な既存のiOS APIを採用するだけで、これを活用できます。AVAudioEngineでは、inputNodeでsetVoiceProcessingEnabledを呼び出すだけで済みます。

00:25:00.000 --> 00:25:07.000
また、VoiceProcessingIOサブタイプを使用して、AU VoiceIOオーディオユニットを介してこれにアクセスすることもできます。

00:25:07.000 --> 00:25:15.000
音声処理APIとそれらが提供する機能の詳細については、セッションを参照してください。音声処理の新機能は何ですか?

00:25:15.000 --> 00:25:20.000
そして、それは今年tvOS 17に新しく追加されたすべてのオーディオAPIです。

00:25:20.000 --> 00:25:27.000
さて、私たちのアプリに戻って、このマイク機能の一部を活用する方法を見てみましょう。

00:25:27.000 --> 00:25:34.000
Xcodeに戻って、AudioCapturerクラスを開きます。

00:25:34.000 --> 00:25:41.000
このクラスは、アプリコードの残りの部分から、基礎となるオーディオAPIのすべてのニュアンスを抽象化します。

00:25:41.000 --> 00:25:51.000
AVAudioEngineの独自のインスタンスがあります。これは、このインスタンスで使用する録音APIです。

00:25:51.000 --> 00:25:57.000
また、オーディオセッションの独自の共有インスタンスもあります。

00:25:57.000 --> 00:26:00.000
そして、これはこのクラスが何をするかについての簡単な洞察です。

00:26:00.000 --> 00:26:14.000
高レベルでは、アクティベーション前にオーディオセッションのカテゴリとモードを設定し、基礎となるAVAudioEngineを正しいフォーマットで設定します...

00:26:14.000 --> 00:26:22.000
そして、入力ノードに音声処理を設定し、それをバイパスするためのユーザー制御可能なトグルで設定します。

00:26:22.000 --> 00:26:26.000
この例では、非リアルタイムのコンテキストでエンジンを実行しています。

00:26:26.000 --> 00:26:31.000
さて、tvOS用にこれを変更するために何をする必要があるかを見てみましょう。

00:26:31.000 --> 00:26:38.000
このiOSアプリは、マイクデバイスが常に利用可能であると仮定して、tvOSと同じように構築されます。

00:26:38.000 --> 00:26:51.000
私がする必要があるのは、オーディオセッションを開始し、その後I/Oを開始する前に、入力マイクデバイスが利用可能であることを確認するために、inputAvailable KVO通知を聞くためのオブザーバーを追加することです。

00:26:51.000 --> 00:26:59.000
先に進んで、ここに追加します。

00:26:59.000 --> 00:27:15.000
また、マイクデバイスが表示されたり、システムから消えたりしたときに、アプリの状態を処理することを確認する必要があります。これは、ユーザーがセッション中にApple TVから携帯電話を切断するだけの可能性があります。

00:27:15.000 --> 00:27:22.000
これは今、私のApple TVでうまくいくはずです。実際に見てみましょう! 

00:27:22.000 --> 00:27:25.000
ここで、私は今、アプリのオーディオモードに入っています。

00:27:25.000 --> 00:27:31.000
再生を押して曲を再生し、自分の話を録音することができます。

00:27:31.000 --> 00:27:37.000
うわー、この曲はとてもグルーヴィーです!

00:27:37.000 --> 00:27:39.000
聴くといつも踊りたくなった気分です。

00:27:39.000 --> 00:27:50.000
楽しかったです！

00:27:50.000 --> 00:28:03.000
今、私たちがいた音声処理モードでは、Apple TVから再生されたこの曲はキャンセルされ、アプリに送信されるローカル環境からの音声のみが残ります。

00:28:03.000 --> 00:28:06.000
うわー、この曲はとてもグルーヴィーです。

00:28:06.000 --> 00:28:13.000
聴くといつも踊りたくなった気分です。

00:28:13.000 --> 00:28:17.000
そして、それはtvOSのエコーキャンセルです。

00:28:17.000 --> 00:28:21.000
そして、それはラップです!私たちが経験したことを要約しましょう。 

00:28:21.000 --> 00:28:27.000
私たちはこの機能を高いレベルで紹介し、tvOSでロック解除される新しいジャンルのアプリについて話しました。

00:28:27.000 --> 00:28:34.000
次に、デバイスピッカーを提示し、継続性デバイスを選択するための新しいデバイスディスカバリーAPIについて議論しました。

00:28:34.000 --> 00:28:39.000
tvOSで現在使用できるカメラとマイクのAPIを見直しました。

00:28:39.000 --> 00:28:49.000
そして最後に、既存のカメラとマイクアプリをtvOS用に構築し、できるだけ多くのコードを共有し、デバイスディスカバリーのみを追加しました。

00:28:49.000 --> 00:28:53.000
また、tvOS固有の考慮事項についてもまとめました。

00:28:53.000 --> 00:28:58.000
カメラとマイクのサポートをtvOSアプリにお届けできることをとても楽しみにしています。

00:28:58.000 --> 00:29:03.000
この機能を備えたこのプラットフォームで開発するアプリを見るのが待ちきれません!

00:29:03.000 --> 00:29:04.000
ありがとうございます。

00:29:04.000 --> 23:59:59.000
。

