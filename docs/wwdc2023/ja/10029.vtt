WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
カルビン：こんにちは。私はwatchOSチームのエンジニア、カルビン・ゲイスフォードです。

00:00:14.000 --> 00:00:20.000
このコードアロングセッションでは、Apple Watchの新しいスマートスタックのウィジェットを構築します。

00:00:20.000 --> 00:00:25.000
AppIntent設定を使用してウィジェットを構築するプロセス全体を順を追って説明します。

00:00:25.000 --> 00:00:31.000
その過程で、最新のWidgetKitとSwiftUIのアップデートを使用します。

00:00:31.000 --> 00:00:34.000
コードアロングにはBackyard Birdsアプリを使用します。

00:00:34.000 --> 00:00:41.000
Backyard Birdsは、訪れる鳥を引き付ける裏庭を作成して管理できるアプリです。

00:00:41.000 --> 00:00:43.000
私たちのウィジェットは裏庭のステータスを表示します。

00:00:43.000 --> 00:00:49.000
鳥が訪れている場合は、鳥が表示され、裏庭のステータスも含まれます。

00:00:49.000 --> 00:00:57.000
ウィジェットはスマートスタックに関連する日付を提供するので、最も関連性の高いときにウィジェットに優先順位を付けることができます。

00:00:57.000 --> 00:01:06.000
フォローしたい場合は、このセッションに関連付けられているサンプルコードをダウンロードし、Backyard Birds Xcodeプロジェクトを開くことができます。

00:01:06.000 --> 00:01:15.000
BackyardVisitorsWidgetファイルを含むいくつかのファイルを生成したプロジェクトにウィジェット拡張機能をすでに追加しました。

00:01:15.000 --> 00:01:19.000
私たちはほとんどの時間をこのファイルの更新に費やします。

00:01:19.000 --> 00:01:20.000
これが私たちがカバーするものです。

00:01:20.000 --> 00:01:25.000
まず、ウィジェットを定義するウィジェット構造を見ていきます。

00:01:25.000 --> 00:01:30.000
また、ウィジェットの設定意図の概要も簡単に説明します。

00:01:30.000 --> 00:01:39.000
次に、TimelineEntry構造をカスタマイズしてウィジェットビューのデータを保持し、タイムラインを構築します。

00:01:39.000 --> 00:01:46.000
タイムラインにプレビューを有効にするために必要なデータを取得したら、ウィジェットのビューを構築します。

00:01:46.000 --> 00:01:52.000
ビューが構築されたら、タイムラインを完成させるために戻ってきます。

00:01:52.000 --> 00:02:02.000
最後に、関連するインテントマネージャーを見て、watchOSスマートスタックでウィジェットを優先する日付のインテントを設定します。

00:02:02.000 --> 00:02:10.000
コードのウィジェット構造を見て、ウィジェットの設定を始めましょう。

00:02:10.000 --> 00:02:14.000
ウィジェット構造は、ウィジェットの設定が定義されている場所です。

00:02:14.000 --> 00:02:18.000
watchOSの新機能にはAppIntentConfigurationsがあります。

00:02:18.000 --> 00:02:23.000
ウィジェットでAppIntentConfigurationを使用します。

00:02:23.000 --> 00:02:30.000
WidgetExtensionを作成したときに、設定の意図、プロバイダー、およびビューはすべてスタブアウトされました。

00:02:30.000 --> 00:02:36.000
それぞれを見て、Backyard Birdsウィジェットに実装します。

00:02:36.000 --> 00:02:43.000
このウィジェットの定義は良さそうなので、先に進んでWidgetConfigurationIntentを見てみましょう。

00:02:43.000 --> 00:02:49.000
私たちのウィジェットは、App Intent Configurationを使用して、2つのことをできるようにしています。

00:02:49.000 --> 00:02:57.000
まず、私たちのウィジェットは、watchOSウィジェットギャラリーで事前に設定されたウィジェットのセットを提供することができます。

00:02:57.000 --> 00:03:04.000
Backyard Birdsの場合、アプリで各庭の設定を提供します。 では各庭の設定を提供します。

00:03:04.000 --> 00:03:11.000
第二に、WidgetConfigurationIntentは、ウィジェットが最も関連性の高い日付を指定するために使用されます。

00:03:11.000 --> 00:03:17.000
スマートスタックは、この情報を使用して、スマートスタックのウィジェットに優先順位を付けます。

00:03:17.000 --> 00:03:20.000
ウィジェットの構成アプリの意図を見てみましょう。

00:03:20.000 --> 00:03:25.000
Backyard Birdsの各庭には固有のIDがあります。

00:03:25.000 --> 00:03:36.000
私はすでにbackyardIDという名前のパラメータを追加したので、これは裏庭IDで識別される各ヤードに1つずつ、一連のウィジェットインテントを作成するために使用できます。

00:03:36.000 --> 00:03:41.000
私たちが構築しているウィジェットのために、それが私たちが必要とする唯一のパラメータです。

00:03:41.000 --> 00:03:49.000
App IntentsとWidgetConfigurationIntentのさらなる使用方法の詳細については、App Intentsに関するこれらのセッションをチェックしてください。

00:03:49.000 --> 00:03:56.000
ウィジェット構造が定義されており、裏庭IDを保持できるWidgetConfigurationIntentがあります。

00:03:56.000 --> 00:04:02.000
ウィジェットのタイムラインに移り、TimelineEntryの構造を見てみましょう。

00:04:02.000 --> 00:04:10.000
TimelineEntry構造は、ウィジェットビューが特定の日付にレンダリングする必要があるすべてのデータを保持します。

00:04:10.000 --> 00:04:18.000
BackyardVisitorsWidgetファイルに戻り、生成されたSimpleEntry構造を見つけます。

00:04:18.000 --> 00:04:23.000
このファイルが生成されたときに、日付と設定のプロパティが追加されました。

00:04:23.000 --> 00:04:29.000
ウィジェットビューに必要な追加のプロパティを定義する必要があります。

00:04:29.000 --> 00:04:35.000
私たちのウィジェットは、その名前、食べ物、水の状態を含む裏庭のステータスを表示します。

00:04:35.000 --> 00:04:41.000
鳥が訪れている場合は、訪れる鳥と鳥の名前が表示されます。

00:04:41.000 --> 00:04:45.000
鳥がいなければ、何羽の鳥が庭を訪れたかが示されます。

00:04:45.000 --> 00:04:56.000
庭に関する情報を表示するには、特定の時点で裏庭に関するすべての情報を保持するBackyard Birdsアプリの構造を使用します。

00:04:56.000 --> 00:05:00.000
TimelineEntryには将来の日付がある可能性があるため、これは重要です。

00:05:00.000 --> 00:05:10.000
裏庭のプロパティをTimelineEntryに追加しましょう。

00:05:10.000 --> 00:05:16.000
それでは、追加したばかりの裏庭のプロパティに基づいて、いくつかの計算されたプロパティを追加しましょう。

00:05:16.000 --> 00:05:28.000
まず、ウィジェットビューが鳥が訪れているかどうかをチェックして表示できるように、鳥のプロパティを追加しましょう。

00:05:28.000 --> 00:05:38.000
それでは、私たちのビューが庭に関する詳細情報を表示するために使用する2つのプロパティを追加しましょう。

00:05:38.000 --> 00:05:45.000
waterDurationとfoodDurationは、水と食べ物がどれくらい続くかを示すためにビューで使用されます。

00:05:45.000 --> 00:05:51.000
これらは、TimelineEntryのdateプロパティから計算されます。

00:05:51.000 --> 00:06:01.000
TimelineEntryには、実装された場合、どのタイムラインエントリが最も重要であるかをwatchOSスマートスタックに伝えることができる関連性という名前のプロパティもあります。

00:06:01.000 --> 00:06:08.000
関連性プロパティをTimelineEntryに追加しましょう。

00:06:08.000 --> 00:06:16.000
中で、裏庭にタイムラインエントリーの日付の訪問者がいるかどうかを確認しましょう。

00:06:16.000 --> 00:06:25.000
訪れる鳥がいる場合は、TimelineEntryRelevance構造を返します。

00:06:25.000 --> 00:06:32.000
TimelineEntryRelevance構造は、スコアと期間の2つのパラメータを取ります。

00:06:32.000 --> 00:06:39.000
スコアは、同じタイムライン内の他のエントリに対してエントリに優先順位を付けるために使用されます。

00:06:39.000 --> 00:06:46.000
スコアを10に設定して、訪問者のいないエントリよりも訪問者のエントリを上位にランク付けします。

00:06:46.000 --> 00:06:52.000
この値は任意であり、タイムラインでエントリをランク付けするために必要な値の範囲を持つことができます。

00:06:52.000 --> 00:06:58.000
期間は、この関連性エントリが有効期間をスマートスタックに伝えるために使用されます。

00:06:58.000 --> 00:07:03.000
訪問者の終了日までの期間を設定しました。

00:07:03.000 --> 00:07:17.000
訪問者がいない場合は、スコアがゼロの関連性構造を返しましょう。これは、どのタイムラインエントリが最も重要であるかをスマートスタックに伝えます。

00:07:17.000 --> 00:07:27.000
その時点で他に何が起こっているかによっては、ウィジェットがwatchOSスマートスタックで優先されるかもしれません。

00:07:27.000 --> 00:07:32.000
私たちのTimelineEntryは見栄えがよく、ウィジェットビューが適切にレンダリングするために必要なものがすべて揃っています。

00:07:32.000 --> 00:07:36.000
先に進んで、TimelineProviderを構築しましょう。

00:07:36.000 --> 00:07:49.000
TimelineProviderには、プレースホルダ、スナップショット、タイムライン、推奨事項の4つの機能を完了する必要があります。

00:07:49.000 --> 00:07:56.000
プレースホルダ機能は、ウィジェットが初めて表示されたときに使用され、すぐに戻ってくるはずです。

00:07:56.000 --> 00:08:01.000
裏庭を取るためにタイムラインEntryを更新したので、裏庭を供給する必要があります。

00:08:01.000 --> 00:08:10.000
アプリのデータモデルからランダムな裏庭を追加して、それを修正しましょう。

00:08:10.000 --> 00:08:14.000
それはいいですね。先に進みましょう。

00:08:14.000 --> 00:08:19.000
スナップショット機能は、ウィジェットが一時的な状況にあるときに使用されます。

00:08:19.000 --> 00:08:27.000
この関数はすぐに返されるはずなので、フェッチに数秒以上かからない限り、サンプルデータを使用することは問題ありません。

00:08:27.000 --> 00:08:36.000
プレースホルダ関数で行ったのと同じことを行い、ランダムなヤードを渡すことができます。

00:08:36.000 --> 00:08:40.000
それは良さそうですが、私たちはもっとうまくやることができます。

00:08:40.000 --> 00:08:49.000
スナップショット関数には、先ほど追加したbackyardIDプロパティを持つ設定インテントが渡されます。

00:08:49.000 --> 00:08:57.000
私たちのデータはすべてローカルなので、ランダムな裏庭を使用するのではなく、適切な裏庭をすばやく検索して返すことができます。

00:08:57.000 --> 00:09:04.000
構成のbackyardIDから設定された裏庭を取得しましょう。

00:09:04.000 --> 00:09:13.000
では、裏庭をチェックして、そこからビジターイベントを取得できるかどうか見てみましょう。

00:09:13.000 --> 00:09:24.000
訪問者の日付で設定されたエントリを返しましょう。訪問者がない場合は、現在の日付で設定されたヤードを返します。

00:09:24.000 --> 00:09:31.000
これは、設定された裏庭が表示されるため、ユーザーにより良いプレビューを提供します。

00:09:31.000 --> 00:09:37.000
タイムライン機能に飛び込む前に、Xcodeキャンバスプレビューをオンにしたい。

00:09:37.000 --> 00:09:48.000
最後のSimpleEntryを修正して、プレビューを見ることができるように裏庭を与えましょう。

00:09:48.000 --> 00:09:56.000
では、キャンバスをオンにしましょう。

00:09:56.000 --> 00:10:00.000
Xcodeの新機能は、ウィジェットのタイムラインをプレビューする機能です。

00:10:00.000 --> 00:10:09.000
キャンバスには長方形のウィジェットのプレビューが表示されており、下部にはウィジェットのタイムラインを構成する一連のタイムラインエントリがあります。

00:10:09.000 --> 00:10:15.000
キャンバスのプレビューは、ウィジェットを追加したときに生成されたデフォルトのビューを使用しています。

00:10:15.000 --> 00:10:22.000
タイムラインプロバイダーを完成させる前に、ビューを構築して、タイムラインをよりよく視覚化できるようにしましょう。

00:10:22.000 --> 00:10:27.000
BackyardBirdsWidgetEntryViewを探します。

00:10:27.000 --> 00:10:37.000
各ファミリー専用のビューを構築できるように、ウィジェットファミリーの環境プロパティを追加しましょう。

00:10:37.000 --> 00:10:49.000
各accesslementWidgetファミリのビューを実装できるように、本体をswitchステートメントに置き換えましょう。

00:10:49.000 --> 00:10:56.000
では、エントリをパラメータとして取るビューで、access accessoryRectangular のケースを作成しましょう。

00:10:56.000 --> 00:11:01.000
この見解を以下に実装します。

00:11:01.000 --> 00:11:08.000
長方形のビューは、watchOSスマートスタックに表示されるウィジェットのビューになるという点でユニークです。

00:11:08.000 --> 00:11:17.000
長方形のビューでは、左側に画像、右側に3行のテキストがある共通のパターンに従います。

00:11:17.000 --> 00:11:26.000
ファイルの一番下に移動して、RectangularBackyardViewを作成しましょう。

00:11:26.000 --> 00:11:32.000
このビューは、裏庭のデータを含むように以前に修正したTimelineEntryを使用します。

00:11:32.000 --> 00:11:42.000
続ける前に、キャンバスビューをスマートスタック長方形ビューに切り替えましょう。

00:11:42.000 --> 00:11:47.000
これにより、ウィジェットを構築する際にウィジェットを視覚化できます。

00:11:47.000 --> 00:11:58.000
それでは、ビューのHStackに画像と3行のテキストを入れましょう。

00:11:58.000 --> 00:12:01.000
プレビューを見てください。それは正確にはそうではありません。

00:12:01.000 --> 00:12:09.000
テキストの行を独自のVStackに入れましょう。

00:12:09.000 --> 00:12:12.000
オーケー、それは近い。

00:12:12.000 --> 00:12:16.000
エントリからビューに実際のデータを入れましょう。

00:12:16.000 --> 00:12:26.000
まず、鳥を表示できるBackyard BirdsアプリのComposedBirdビューを使用します。

00:12:26.000 --> 00:12:29.000
鳥はオプションなので、包みを解く必要があります。

00:12:29.000 --> 00:12:42.000
ComposedBirdビューとVStackをif-letチェックに入れて、エントリに鳥がいるかどうかを確認します。

00:12:42.000 --> 00:12:53.000
鳥がいない場合は、庭に噴水の画像と鳥がいないことを示すテキストを入れましょう。

00:12:53.000 --> 00:13:07.000
タイムラインを見て、3行のテキストで鳥を示すエントリと、鳥が表示されないエントリを見ることができます。

00:13:07.000 --> 00:13:11.000
最初に鳥がいる場合の詳細を記入しましょう。

00:13:11.000 --> 00:13:28.000
最初の行では、鳥の名前、2行目、裏庭の名前を表示し、3行目には、庭の食べ物と水に関する情報を追加します。

00:13:28.000 --> 00:13:42.000
鳥がいない場合は、庭の名前、食べ物と水の情報、そしてこの庭への訪問者数を示しましょう。

00:13:42.000 --> 00:13:50.000
私たちのエントリーがどのように見えるか見てみましょう。

00:13:50.000 --> 00:13:54.000
それは素晴らしいことですが、レイアウトを少し修正しましょう。

00:13:54.000 --> 00:13:57.000
まず、ComposedBirdを更新しましょう。

00:13:57.000 --> 00:14:06.000
ビューをscaledToFitにして、widgetAccentableにして、着色された時計の文字盤で使用すると色合いになるようにしましょう。

00:14:06.000 --> 00:14:15.000
鳥の名前に、見出しフォントを追加し、拡大縮小し、watch faceで着色するようにwidgetAccentableにしましょう。

00:14:15.000 --> 00:14:25.000
また、foregroundStyleを使用して、テキストを鳥の翼の色に合わせます。

00:14:25.000 --> 00:14:35.000
名前が長になった場合に備えて、他の両方のビューにスケールファクターを追加しましょう。

00:14:35.000 --> 00:14:43.000
最後の行のforegroundStyleをセカンダリに設定しましょう。

00:14:43.000 --> 00:14:53.000
最後に、3つのテキストビューが整列されるように、スタック先頭を整列させましょう。

00:14:53.000 --> 00:14:55.000
私たちの景色はかなり良さそうです。

00:14:55.000 --> 00:15:06.000
鳥がいない場合は、これらの同じ更新をすべてelseステートメントのビューに適用しましょう。

00:15:06.000 --> 00:15:15.000
今、私たちのウィジェットは見栄えが良くなっています。

00:15:15.000 --> 00:15:20.000
鳥や庭を表示するとき、ウィジェットの間隔が異なることに注意してください。

00:15:20.000 --> 00:15:35.000
バードビューと画像ビューにフレームを追加して、それらを一致させましょう。

00:15:35.000 --> 00:15:48.000
また、適切に整列するように、VStacksにフレームを追加します。

00:15:48.000 --> 00:15:54.000
watchOSスマートスタックのウィジェットを完成させるために追加する必要があるオプションがもう1つあります。

00:15:54.000 --> 00:15:57.000
SwiftUIの新機能には、containerBackgroundがあります。

00:15:57.000 --> 00:16:02.000
コンテナの背景を裏庭からのグラデーションに置き換えましょう。

00:16:02.000 --> 00:16:10.000
コンテナの背景配置をウィジェットに設定します。

00:16:10.000 --> 00:16:22.000
containerBackgroundはシステムによって選択的に使用され、ここではwatchOSスマートスタックにのみ表示され、文字盤には表示されません。

00:16:22.000 --> 00:16:25.000
これで、watchOSスマートスタックの準備が整いました。

00:16:25.000 --> 00:16:33.000
景色は素晴らしく見えるので、TimelineProviderに戻り、タイムラインの構築を終わらせましょう。

00:16:33.000 --> 00:16:40.000
タイムライン関数は、ウィジェットがウィジェットのビューをレンダリングするためのデータを含むタイムラインエントリのコレクションを生成する場所です。

00:16:40.000 --> 00:16:45.000
これはウィジェットの主力機能です。

00:16:45.000 --> 00:16:49.000
現在、ランダムな裏庭データで5つのエントリを生成しています。

00:16:49.000 --> 00:16:54.000
それを鳥の訪問でいっぱいのタイムラインに置き換えましょう。

00:16:54.000 --> 00:16:58.000
関数の上部には、TimelineEntriesの配列があります。

00:16:58.000 --> 00:17:01.000
これを使ってタイムラインを構築します。

00:17:01.000 --> 00:17:07.000
まず、生成されたタイムラインコードを削除しましょう。

00:17:07.000 --> 00:17:17.000
それでは、ConfigurationAppIntentからbackyardIDを使用して、設定されたヤードを取得しましょう。

00:17:17.000 --> 00:17:22.000
裏庭の構造には、その庭のすべての訪問者イベントを含むプロパティがあります。

00:17:22.000 --> 00:17:26.000
取得したヤードの訪問者イベントを反復しましょう。

00:17:26.000 --> 00:17:39.000
イベントごとに、visitorEventのstartDateを含むTimelineEntryを作成し、設定された裏庭に渡しましょう。

00:17:39.000 --> 00:17:44.000
タイムラインのプレビューが更新されました。それがどのように変わったか見てみましょう。

00:17:44.000 --> 00:17:49.000
タイムラインのエントリを選択すると、鳥が現れます。

00:17:49.000 --> 00:17:53.000
それは私たちが期待していたことです。ただし、すべてのエントリには訪問者がいます。

00:17:53.000 --> 00:17:57.000
鳥が去るときのエントリも追加する必要があります。

00:17:57.000 --> 00:18:01.000
2番目のエントリを作成し、visitorEventのendDateを使用しましょう。

00:18:01.000 --> 00:18:11.000
同じ裏庭を使用し、エントリ配列にエントリを追加します。

00:18:11.000 --> 00:18:15.000
では、タイムラインを見てみましょう。

00:18:15.000 --> 00:18:20.000
さて、鳥がいつ訪れ、いつ出発するかのエントリーがあります。

00:18:20.000 --> 00:18:25.000
私たちのウィジェットのタイムラインは素晴らしく見え、この新しいタイムラインプレビューは素晴らしいです。

00:18:25.000 --> 00:18:31.000
ウィジェットとタイムラインの構築がずっと簡単になります。

00:18:31.000 --> 00:18:37.000
最後に、タイムラインプロバイダーの推奨機能を実装しましょう。

00:18:37.000 --> 00:18:47.000
ここでは、backyardIDを保持するWidgetConfigurationIntentを含むAppIntentRecommendationsの配列を返す必要があります。

00:18:47.000 --> 00:18:52.000
デフォルトの実装を削除しましょう。

00:18:52.000 --> 00:18:58.000
返す推奨事項の配列を作成しましょう。

00:18:58.000 --> 00:19:09.000
次に、アプリで各裏庭の推奨事項を作成したいので、すべての裏庭を反復してみましょう。

00:19:09.000 --> 00:19:17.000
裏庭ごとに、ConfigurationAppIntentを作成し、backyardIDを設定します。

00:19:17.000 --> 00:19:25.000
そして最後に、ConfigurationIntentを使用してAppIntentRecommendationを作成し、配列に追加しましょう。

00:19:25.000 --> 00:19:31.000
説明として裏庭の名前を挙げます。

00:19:31.000 --> 00:19:44.000
推奨事項機能は、人が裏庭の鳥のウィジェットを選択しているときに、ウィジェットギャラリーで、各裏庭に1つずつウィジェット構成のリストを提供するようになりました。

00:19:44.000 --> 00:19:47.000
おめでとうございます。

00:19:47.000 --> 00:19:55.000
これで、ウォッチフェイスのコンプリケーションとwatchOSスマートスタックとして浮上するウィジェットをwatchOS上に構築しました。

00:19:55.000 --> 00:20:04.000
先ほど、TimelineEntryに関連性プロパティを実装したときに関連性について少し話しましたが、できることはもっとあります。

00:20:04.000 --> 00:20:10.000
Backyard Birdsアプリの各ヤードは、鳥が利用できる水と食べ物を追跡します。

00:20:10.000 --> 00:20:15.000
私たちの新しいウィジェットもその情報を表示します。

00:20:15.000 --> 00:20:23.000
水や食料が不足していることを知っている期間中に、関連する意図のリストをシステムに提供することができます。

00:20:23.000 --> 00:20:31.000
私たちのウィジェットは、その時期に優先され、庭に注意が必要であることを人々に知らせます。

00:20:31.000 --> 00:20:42.000
コードに戻って、可能なウィジェットに関連するインテントを構築する新しい関数を作成し、それらのインテントでRelevantIntentManagerを更新しましょう。

00:20:42.000 --> 00:20:55.000
updateBackyardRelevantIntentsという名前の新しい関数を作成します。

00:20:55.000 --> 00:21:03.000
この関数では、関連するインテントの配列が必要です。

00:21:03.000 --> 00:21:10.000
そして、RelevantIntentManagerをその配列で更新します。

00:21:10.000 --> 00:21:17.000
relevantIntents配列に記入するには、アプリ内のすべての裏庭をループします。

00:21:17.000 --> 00:21:26.000
次に、裏庭のconfigurationIntentを作成し、backyardIDを現在の裏庭に設定します。

00:21:26.000 --> 00:21:30.000
日付に基づいてRelevantContextを作成します。

00:21:30.000 --> 00:21:40.000
この場合、裏庭の将来の低食料の日付と将来の空の食料の日付を使用します。

00:21:40.000 --> 00:21:43.000
最後に、関連するインテントを作成します。

00:21:43.000 --> 00:21:56.000
ウィジェット、ウィジェットの種類、および作成したばかりの relevantDateContextにconfigurationIntentを使用し、これを配列に追加します。

00:21:56.000 --> 00:22:05.000
さて、裏庭の低水と空の水の日付に同じことをしましょう。

00:22:05.000 --> 00:22:07.000
それは良さそうですね。

00:22:07.000 --> 00:22:15.000
これで、ウィジェットの各可能な構成の関連性が高い場合、RelevantIntentManagerは日付範囲を持ちます。

00:22:15.000 --> 00:22:22.000
適切なときに関連するインテントが更新されるように、この機能を主要なコンポーネントに追加しましょう。

00:22:22.000 --> 00:22:27.000
まず、タイムラインプロバイダのタイムライン関数に戻りましょう。

00:22:27.000 --> 00:22:33.000
タイムラインを返す直前に関数を呼び出しましょう。

00:22:33.000 --> 00:22:39.000
これにより、ウィジェットのタイムラインを更新するたびに、関連する意図が最新の状態に保たされます。

00:22:39.000 --> 00:22:43.000
Backyard Birdsアプリにも行きましょう。

00:22:43.000 --> 00:22:51.000
Backyard Birdsアプリには、各庭の詳細ビューがあり、人が食べ物と水を補充できるページを提供します。

00:22:51.000 --> 00:22:59.000
これは、食料と水の供給が変わる可能性があるため、関連する意図を更新するのにも理想的な場所です。

00:22:59.000 --> 00:23:09.000
BackyardContentTabでは、リフィルボタンをタップすると、updateBackyardRelevantIntents機能でタスクを追加します。

00:23:09.000 --> 00:23:20.000
食べ物と水が更新されたばかりであることを知っているので、WidgetKitに電話をかけて、ウィジェットのタイムラインをリロードする必要があります。

00:23:20.000 --> 00:23:30.000
これで、関連する意図が更新され、人が庭で水と食べ物を補充すると、ウィジェットのタイムラインがリロードされます。

00:23:30.000 --> 00:23:41.000
watchOS Smart Stack用のウィジェットを構築し、RelevantIntentManagerを日付インテントで更新し、最も関連性の高いときにウィジェットに優先順位を付けました。

00:23:41.000 --> 00:23:43.000
フォローしてくれてありがとう。

00:23:43.000 --> 00:23:48.000
watchOSスマートスタック用にビルドしたウィジェットを楽しみにしています。

00:23:48.000 --> 00:23:56.000
ウィジェット、スマートスタック、アプリインテントの詳細については、これらのセッションをチェックしてください。

00:23:56.000 --> 23:59:59.000
冒険心を持ち、コーディングを決してやめないでください。

