WEBVTT

00:00:01.000 --> 00:00:11.000
♪ ♪

00:00:11.000 --> 00:00:16.000
ニック：こんにちは、私はSwiftUIチームのエンジニア、ニックです。

00:00:16.000 --> 00:00:20.000
InspectorはSwiftUIのエキサイティングな新しい要素です。

00:00:20.000 --> 00:00:25.000
インスペクターとは何か、そしてAPIの使い方について説明します。

00:00:25.000 --> 00:00:31.000
その後、プレゼンテーションのカスタマイズの修飾子を確認します。

00:00:31.000 --> 00:00:37.000
インスペクタは、選択したコンテンツのさらなる詳細を表示するビューの名前です。

00:00:37.000 --> 00:00:41.000
あなたはおそらく以前に1つと交流したことがあるでしょう。

00:00:41.000 --> 00:00:48.000
Keynoteは、インスペクタを使用して、選択、この場合はシェイプフォーマッタの書式設定の詳細を表示します。

00:00:48.000 --> 00:00:53.000
ここでは、検査官は末尾のサイドバーとして提示します。

00:00:53.000 --> 00:01:00.000
検査官のもう1つの一般的なユースケースは、アプリのメインコンテンツを補完するコンテンツを表示することです。

00:01:00.000 --> 00:01:04.000
ショートカットは、この目的のためにインスペクタを使用します。

00:01:04.000 --> 00:01:14.000
メインインターフェイスは、ユーザーが編集しているショートカットであり、インスペクタは利用可能なアプリとアクションのライブラリでそれを補完します。

00:01:14.000 --> 00:01:18.000
このサンプルアプリを使用して、インスペクタAPIを探索します。

00:01:18.000 --> 00:01:22.000
アップルパークとその周辺の動物と知りました。

00:01:22.000 --> 00:01:33.000
このアプリは、私が会った動物を保存し、名前を追跡し、お気に入りの果物を追跡し、後で「疑惑レベル」というラベルを付けるこのコラムがあります。

00:01:33.000 --> 00:01:37.000
そして今、SwiftUIの検査官に会いましょう!

00:01:37.000 --> 00:01:42.000
検査官は、選択した動物に関する詳細の読み取り/書き込みビューを表示します。

00:01:42.000 --> 00:01:48.000
ここでは、ファブリツィオ・フィッシュの疑惑レベルを「非常に疑わしい」に調整しています。

00:01:48.000 --> 00:01:51.000
実際、私は彼を魚っぽくしておきます。

00:01:51.000 --> 00:02:01.000
インスペクタは、macOS、iPadOS、iOSのSwiftUI開発者も利用できます!

00:02:01.000 --> 00:02:10.000
インスペクタAPIには、列幅のプログラムによる制御が含まれており、末尾の列の幅を調整することができます。

00:02:10.000 --> 00:02:19.000
APIには、提示された状態に対するプログラムによる制御が含まれており、必要に応じてインスペクタの非表示と表示が可能です。

00:02:19.000 --> 00:02:23.000
インスペクタは、単なる末尾のサイドバーよりも高いレベルの抽象化です。

00:02:23.000 --> 00:02:33.000
コンパクトサイズクラスでは、サイズ変更可能なシートに適応し、インスペクタはより大きなiPadの分割画面に自動的にオーバーレイされます。

00:02:33.000 --> 00:02:40.000
SwiftUIにはすでに既存の構造APIのセットがあります。

00:02:40.000 --> 00:02:49.000
インスペクタは、ナビゲーションコンポーネントとプレゼンテーションの両方の特性を持つこれらのAPIと一緒に収まります。

00:02:49.000 --> 00:02:58.000
NavigationSplitViewやNavigationStackと同様に、インスペクタはシーンの足場を構築するために使用されます。

00:02:58.000 --> 00:03:09.000
シート、ポップオーバー、アラート、確認ダイアログと同様に、インスペクタはプレゼンテーションであり、必要に応じて却下して提示します。

00:03:09.000 --> 00:03:13.000
新しいインスペクタAPIの採用方法を学ぶ時が来ました。

00:03:13.000 --> 00:03:17.000
以前、私はこのセッションのために作ったサンプルアプリを披露しました。

00:03:17.000 --> 00:03:22.000
私が各動物の疑いレベルを追跡していることに気づいたかもしれません。

00:03:22.000 --> 00:03:26.000
それは私がハイステークスの謎を解こうとしているからです。

00:03:26.000 --> 00:03:30.000
誰かがアップルパークで果物を全部食べている!

00:03:30.000 --> 00:03:37.000
ニック警部が各動物の詳細を収集できるように、アプリに検査官を追加しました。

00:03:37.000 --> 00:03:46.000
インスペクターAPIを採用するのがどれほど簡単だったかをお見せします。途中でこのフルーティーな謎を解くことができるかもしれません。

00:03:46.000 --> 00:03:50.000
早く、Xcodeに!ゲームは果物です!

00:03:50.000 --> 00:03:56.000
インスペクタを追加する最初のステップは、新しい修飾子であるインスペクタを使用することです。

00:03:56.000 --> 00:04:05.000
他のいくつかのプレゼンテーションと同様に、これはブール提示バインディングを取り、その後、末尾のビュービルダーでインスペクタのコンテンツを取ります。

00:04:05.000 --> 00:04:10.000
検査官の内容については、私は既製のAnimalInspectorFormを持っています。

00:04:10.000 --> 00:04:15.000
私は現在検査されている動物を通過するためのいくつかのカスタム方法を持っています。

00:04:15.000 --> 00:04:19.000
そして、私の検査官がいて、macOSの末尾の列として提示しています。

00:04:19.000 --> 00:04:24.000
私は素晴らしい検査官の経験の種を植えました。

00:04:24.000 --> 00:04:28.000
このAnimalFormはグループ化されたスタイルを使用しています。

00:04:28.000 --> 00:04:33.000
フォームスタイルに遭遇したことがない場合は、このように適用されます。

00:04:33.000 --> 00:04:41.000
しかし、インスペクタのコンテキストはデフォルトでグループ化されたスタイルを使用するため、自分でスタイル設定する必要はありません。

00:04:41.000 --> 00:04:48.000
プレビューのキャンバスでインスペクターと対話することさえできます。

00:04:48.000 --> 00:04:55.000
ああ、これは私に思い出させます、検査官はデフォルトで崩壊することができますが、デフォルトではサイズ変更できません。

00:04:55.000 --> 00:04:59.000
インスペクタの列幅修飾子を使用して変更できます。

00:04:59.000 --> 00:05:01.000
私はいくつかの賢明なデフォルトを使用します。 

00:05:01.000 --> 00:05:07.000
最小200、理想300、最大400。

00:05:07.000 --> 00:05:18.000
この理想的なパラメータは、最初の起動時の列のサイズになりますが、ユーザーがインスペクタのサイズを変更すると、システムは起動時にそのサイズを持続します。

00:05:18.000 --> 00:05:26.000
最後に、表示された状態を切り替えるツールバー項目を追加します。

00:05:26.000 --> 00:05:35.000
提示されたプロパティを切り替えるボタンを使用し、そのラベルには、info.circleシステムイメージを使用してラベルを使用します。

00:05:35.000 --> 00:05:42.000
ツールバー項目は、インスペクタのビュービルダー内で宣言されているため、インスペクタの上のツールバーのセクションに表示されます。

00:05:42.000 --> 00:05:55.000
スクロールすると、ツールバーが期待どおりに動作し、十分なコンテンツがツールバーの下にあるときにシャドウポケットが表示されます。

00:05:55.000 --> 00:06:01.000
ビュー階層の他の場所ではなく、AnimalTableのインスペクタ修飾子を意図的に使用しました。

00:06:01.000 --> 00:06:10.000
多くのSwiftUI APIと同様に、インスペクタ修飾子は、適用される場所のコンテキストに応じて異なる動作をします。

00:06:10.000 --> 00:06:25.000
具体的には、配置は、ツールバーとコンテンツの間に分離がないフルハイトスタイルを使用するか、インスペクタがツールバーの下にネストされているツールバーの下のスタイルを使用するかを決定します。

00:06:25.000 --> 00:06:32.000
タイトル区切りは、ツールバーの下の外観のウィンドウの全幅にまたがっていることに注意してください。

00:06:32.000 --> 00:06:38.000
同様に、ツールバーのコンテンツはメインコンテンツのツールバーに配置されます。

00:06:38.000 --> 00:06:44.000
または、ツールバー修飾子が使用されている場所に応じて、インスペクタのツールバーで。

00:06:44.000 --> 00:06:48.000
インスペクタAPIを使用する際に考慮すべき2つのポイントがあります。

00:06:48.000 --> 00:06:56.000
まず、インスペクタはNavigationStackやNavigationSplitViewのようなナビゲーション構造の内側または外側に配置されますか?

00:06:56.000 --> 00:07:03.000
第二に、ツールバーのコンテンツはインスペクタのビュービルダーの内側または外側にあるべきですか?

00:07:03.000 --> 00:07:06.000
私はこれらの構造のうちの2つを歩きます。

00:07:06.000 --> 00:07:14.000
まず、インスペクタをナビゲーション構造内に配置し、ツールバーのコンテンツはインスペクタの外側に配置します。

00:07:14.000 --> 00:07:22.000
インスペクタがNavigationStackに含まれる場合、インスペクタはナビゲーションスタックのツールバーの下にあります。

00:07:22.000 --> 00:07:31.000
ここでは、ツールバーのコンテンツはメインコンテンツのインスペクタの外側で宣言され、ナビゲーションスタックのツールバーにレンダリングされます。

00:07:31.000 --> 00:07:41.000
コンパクトな水平サイズクラスでは、インスペクタはシートとして表示され、ツールバー項目はメインコンテンツのツールバーに残ります。

00:07:41.000 --> 00:07:44.000
私の可能性の表に戻ります。

00:07:44.000 --> 00:07:54.000
2回目の建設では、インスペクタビュービルダー内のツールバーコンテンツを使用して、インスペクタをナビゲーション構造の外側に配置することを検討します。

00:07:54.000 --> 00:08:04.000
インスペクタ修飾子がナビゲーション構造の外側に配置されると、インスペクタには後続列の完全な高さが与えられます。

00:08:04.000 --> 00:08:12.000
インスペクタにツールバーコンテンツがある場合、そのコンテンツはインスペクタ専用のツールバーセクションに配置されます。

00:08:12.000 --> 00:08:20.000
これら2つのツールバー項目は、主要な配置で配置され、インスペクタの上のナビゲーションツールバーの中央に配置されます。

00:08:20.000 --> 00:08:36.000
ただし、今回はツールバーのコンテンツがインスペクタのビュービルダー内にあるため、インスペクタがシートとして表示される場合、ツールバーのコンテンツはシート内にあります。

00:08:36.000 --> 00:08:44.000
これらの原則はmacOSにまで及びますが、インスペクタはmacOSではシートとして表示されないため、テーブルはよりシンプルになります。

00:08:44.000 --> 00:08:50.000
心配すべき唯一の軸は、ナビゲーション構造の内側または外側です。

00:08:50.000 --> 00:09:10.000
最後ですが、重要な注意：NavigationSplitView内でインスペクタを使用している場合、インスペクタを詳細列のビュービルダーに配置するか、以前と同様に、ナビゲーション構造を完全に外に配置することもできます。

00:09:10.000 --> 00:09:17.000
うわー、この謎解きのすべてが私を空腹にさせています!

00:09:17.000 --> 00:09:23.000
ああ！

00:09:23.000 --> 00:09:28.000
アプリでNibble Bulletinを取得しています!

00:09:28.000 --> 00:09:37.000
このアプリは、ニブル速報をサイズ変更可能なシートとして表示し、果物がいつどこでかじられたかについての情報が含まれています。

00:09:37.000 --> 00:09:47.000
これは、iOS 16.4でリリースされたプレゼンテーションのカスタマイズSwiftUIについて話すのに最適な時期です。

00:09:47.000 --> 00:09:52.000
フルーツニブル速報はシートであり、検査官ではありません。

00:09:52.000 --> 00:09:59.000
プレゼンテーション修飾子を使用すると、シートやポップオーバーなどの他のプレゼンテーションを深くカスタマイズできます。

00:09:59.000 --> 00:10:02.000
いくつか試してみます。 

00:10:02.000 --> 00:10:06.000
プレゼンテーションの背景修飾子は適切に名前が付けられています。

00:10:06.000 --> 00:10:10.000
プレゼンテーションの背景を設定します。

00:10:10.000 --> 00:10:21.000
既存の背景修飾子とは異なり、プレゼンテーション固有の修飾子はプレゼンテーション全体を満たし、基礎となるコンテンツを表示できるようにします。

00:10:21.000 --> 00:10:29.000
したがって、thinMaterialを使用すると、シートの後ろにリストのヒントが表示されます。

00:10:29.000 --> 00:10:38.000
リストをスクロールし、ニブル速報を読みながら容疑者を見たい場合に備えて、シートの背後にあるコンテンツとの相互作用を許可したいと思います。

00:10:38.000 --> 00:10:43.000
これは、presentationBackgroundInteractionが有効になっているのと同じくらい簡単です。

00:10:43.000 --> 00:10:49.000
調光ビューが削除され、バックグラウンドコンテンツと対話できるようになりました。

00:10:49.000 --> 00:10:57.000
PresentationBackgroundInteractionタイプは、プレゼンテーションのディテントを受け入れるupThroughパラメータを持つこともできます。

00:10:57.000 --> 00:11:09.000
提供された引数が指定されたプレゼンテーションのディテントの1つと一致する限り、SwiftUIはupThrough引数よりも大きいディテントで調光ビューのみを提供します。

00:11:09.000 --> 00:11:18.000
200の高さを超える任意のデテントで調光したいので、まずpresentationDetents修飾子を使用して200の高さデテントを追加します。

00:11:18.000 --> 00:11:22.000
現在のメディアのデテントからシートを調整します...

00:11:22.000 --> 00:11:25.000
私のカスタム身長200まで。

00:11:25.000 --> 00:11:35.000
200までのバックグラウンドインタラクションのみを有効にすると、調光ビューは中規模と大規模のデテントに戻ります。

00:11:35.000 --> 00:11:41.000
プレゼンテーションの完璧なルックアンドフィールを得るために、より多くのカスタマイズが利用可能です。

00:11:41.000 --> 00:11:48.000
これらの修飾子の多くは、シートだけでなく、他のプレゼンテーションにも影響を与えます。

00:11:48.000 --> 00:11:51.000
そして、プレゼンテーション修飾子についてもう一つ。

00:11:51.000 --> 00:11:57.000
これらの同じ修飾子は、インスペクターがシートとして提示しているときにインスペクターで構成されています。

00:11:57.000 --> 00:12:07.000
以前のインスペクタでは、メディアデテントでバックグラウンドコンテンツのインタラクションを無効にするには、以前と同じ正確なコードを使用できます...

00:12:07.000 --> 00:12:15.000
高さデテントを宣言し、同じデテントを介してバックグラウンドインタラクションのみを有効にします。

00:12:15.000 --> 00:12:21.000
今、検査官は中程度のデテントとより高いところで暗くなります。

00:12:21.000 --> 00:12:23.000
そして、それはSwiftUIのインスペクターです。

00:12:23.000 --> 00:12:29.000
このビデオでは、インスペクタAPIとその使用のニュアンスを紹介しました。

00:12:29.000 --> 00:12:37.000
私は実演するために私のお気に入りのシートプレゼンテーション修飾子のいくつかを選び、彼らが検査官とどのように構成できるかを示しました。

00:12:37.000 --> 00:12:39.000
それで、何を待っているの?

00:12:39.000 --> 00:12:42.000
外に出て検査を受けてください。

00:12:42.000 --> 00:12:45.000
検査官をアプリのどこかに配置します。

00:12:45.000 --> 00:12:49.000
プレゼンテーションをカスタマイズして、それを続けてください。

00:12:49.000 --> 00:12:55.000
そして、ニブラーについては、この謎を解くための私たちの努力は無駄だったと思います。

00:12:55.000 --> 23:59:59.000
♪ ♪

