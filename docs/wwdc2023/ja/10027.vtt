WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:14.000
キャサリン：こんにちは！私はキャサリンで、システムエクスペリエンスに取り組んでいるエンジニアです。

00:00:14.000 -> 00:00:21.000
今日は、ウィジェットの新しい場所と、どこでも見栄えを良くするためにウィジェットを簡単に最適化する方法について説明します。

00:00:21.000 -> 00:00:24.000
まず、ウィジェットの簡単な履歴を調べてみましょう。

00:00:24.000 -> 00:00:33.000
iOS 14はホーム画面にウィジェットを導入し、iOS 16は同じ簡単なWidgetKit APIを使用してロック画面にウィジェットを導入しました。

00:00:33.000 -> 00:00:46.000
今年、ウィジェットエコシステムは、Macのデスクトップ、iPadのロック画面、iPhoneの新しいスタンバイモード、Apple Watchの新しいスマートスタックの4つの新しい場所に拡大しています。

00:00:46.000 -> 00:00:51.000
これは、人々がさらに多くの場所でお気に入りのウィジェットをすべて見ることができることを意味します。

00:00:51.000 -> 00:00:58.000
ウィジェットはこれらすべての場所に自動的に表示されるので、どこに表示されても見栄えがよいことを確認することが重要です。

00:00:58.000 -> 00:01:06.000
MacのiPhoneウィジェットのおかげで、現在macOSアプリを持っていなくても、人々はMacでウィジェットを使用することができます。

00:01:06.000 -> 00:01:11.000
私の友人のデボンとグラハムは、これらの新しい場所の準備をするために、絵文字レンジャーウィジェットを更新するのを手伝うように私に頼みました。

00:01:11.000 -> 00:01:20.000
WWDC20の「Widgets code-along」とWWDC22の「Complications and widgets: Reloaded」からこのプロジェクトを覚えているかもしれません。

00:01:20.000 -> 00:01:26.000
まず、ウィジェットの新しいコンテンツマージンと、Apple Watchでそれらに移行する方法について説明します。

00:01:26.000 -> 00:01:30.000
次に、ウィジェットに自動的に取り外し可能な背景を追加します。

00:01:30.000 -> 00:01:36.000
次に、ウィジェットを変更して、環境に合わせてレイアウトを動的に拡張できるようにします。

00:01:36.000 -> 00:01:40.000
最後に、ウィジェットの要素が鮮やかなレンダリングの準備ができていることを確認します。

00:01:40.000 -> 00:01:42.000
始めましょう。

00:01:42.000 -> 00:01:45.000
今年のウィジェットの新機能は次のとおりです。

00:01:45.000 -> 00:01:53.000
コンテンツマージンは、ウィジェットの本体に自動的に適用されるパディングであり、コンテンツがウィジェットコンテナの端に近づくのを防ぎます。

00:01:53.000 -> 00:01:59.000
これらのマージンは、ウィジェットが表示されている環境に応じて、大きくなるか小さくなる可能性があります。

00:01:59.000 -> 00:02:06.000
watchOS 9以降では、ウィジェットはシステム定義のセーフエリアを使用して、コンテンツがエッジに近づきすぎないようにしています。

00:02:06.000 -> 00:02:13.000
ウィジェットは、ビューにignosingsSafeAreaなどの修飾子を追加して、セーフエリアの外に拡張できるようにすることができます。

00:02:13.000 -> 00:02:18.000
watchOS 10以降では、ウィジェットの安全な領域はコンテンツマージンの使用に置き換えられました。

00:02:18.000 -> 00:02:23.000
これは、ignionsSafeAreaのような修飾子がウィジェットに影響を及ぼさないことを意味します。

00:02:23.000 -> 00:02:27.000
ほとんどのウィジェットでは、この変更はウィジェットの外観には影響しません。

00:02:27.000 -> 00:02:38.000
ただし、ウィジェットにセーフエリアを無視していたコンテンツがある場合でも、ウィジェットの設定にcontentMarginsDisabled修飾子を追加することで、この同じ効果を実現できます。

00:02:38.000 -> 00:02:44.000
次に、デフォルトのコンテンツマージン内にとどまるべきコンテンツについては、単にパディングを追加します。

00:02:44.000 -> 00:02:50.000
widgetContentMargins環境変数を使用して、現在の環境のデフォルトのマージンを取得できます。

00:02:50.000 -> 00:02:56.000
コンテンツマージンは、これらの新しい修飾子と変数とともに、ウィジェットが表示されるすべてのプラットフォームで利用できます。

00:02:56.000 -> 00:03:00.000
では、絵文字レンジャーズウィジェットに取り外し可能な背景を追加しましょう。

00:03:00.000 -> 00:03:07.000
既存のアクセサリーファミリのウィジェットは、iPhoneと同じようにiPadのロック画面で自動的に動作します。

00:03:07.000 -> 00:03:11.000
iPadは、システムの小さなウィジェットをすぐ横に表示することもできます。

00:03:11.000 -> 00:03:13.000
これが今のロック画面で私たちの姿です。

00:03:13.000 -> 00:03:18.000
他のウィジェットとよりよく一致するように、この環境で背景を削除する必要があります。

00:03:18.000 -> 00:03:21.000
幸いなことに、これを行うのはとても簡単です。

00:03:21.000 -> 00:03:24.000
ここに私たちのsystemSmallウィジェットのビューのコードがあります。

00:03:24.000 -> 00:03:31.000
現在、ZStackを使用してゲーム背景色の上に重ねられたAvatarViewで構成されています。

00:03:31.000 -> 00:03:41.000
背景色を取り外し可能にするには、変更する必要があるのは、ViewにcontainerBackground修飾子を追加し、ゲームBackground色を内部に移動することだけです。

00:03:41.000 -> 00:03:48.000
それを行うと、システムは表示されている場所に応じてウィジェットの背景を自動的に取り出すことができます。

00:03:48.000 -> 00:03:52.000
Apple Watchのスマートスタックは、この新しいコンテナの背景を利用することもできます。

00:03:52.000 -> 00:03:59.000
デフォルトでは、アクセサリー長方形ウィジェットは、この環境で暗い素材の背景を受け取ります。

00:03:59.000 -> 00:04:08.000
同じcontainerBackground修飾子をビューに追加することで、ウィジェットは他のウィジェットと同じ背景に配置され、アプリのビジュアルアイデンティティとリンクされます。

00:04:08.000 -> 00:04:14.000
この新しい環境をより深く掘り下げるには、「Apple Watchのスマートスタックのデザインウィジェット」をチェックしてください。

00:04:14.000 -> 00:04:22.000
写真やマップのウィジェットのような一部のウィジェットには、実際には明確なフォアグラウンドコンテンツがないため、削除する意味のある背景はありません。

00:04:22.000 -> 00:04:29.000
この場合、containerBackgroundRemovable修飾子をWidgetConfigurationに追加し、falseに設定できます。

00:04:29.000 -> 00:04:35.000
それでは、iPadのロック画面とスタンバイモードのときのために、レイアウトを最適化しましょう。

00:04:35.000 -> 00:04:43.000
天気ウィジェットは、ウィジェットの背景が削除されたときにレイアウトを変更する方法の素晴らしい例です。

00:04:43.000 -> 00:04:49.000
ウィジェットにはまだ同じ情報が含まれていますが、スペースを利用するように最適化されていることに注目してください。

00:04:49.000 -> 00:04:54.000
コンテンツは端までプッシュされ、重要な要素が拡大されます。

00:04:54.000 -> 00:05:01.000
これらの調整により、ウィジェットは遠くから読みやすくなり、よりシームレスにスタンバイモードに統合されます。

00:05:01.000 -> 00:05:10.000
これらのレイアウトの変更は、ウィジェットがiPadのロック画面のアクセサリファミリーウィジェットに溶け込むのにも役立ち、すべての家族間でより一貫した外観を維持します。

00:05:10.000 -> 00:05:13.000
Xcodeに移動して、これらの変更を独自のウィジェットに実装しましょう。

00:05:13.000 -> 00:05:18.000
ここにAvatarViewのコードがあります。これは、systemSmallウィジェットに使用するものです。

00:05:18.000 -> 00:05:23.000
右側には、Xcodeプレビューでウィジェットがどのように見えるかのライブプレビューを見ることができます。

00:05:23.000 -> 00:05:30.000
コンテナの背景が削除されたコンテキストで表示されると、ウィジェットコンテンツマージンは自動的に縮小され、コンテンツが端から端まで表示されます。

00:05:30.000 -> 00:05:36.000
showsWidgetContainerBackground環境変数を使用して、ウィジェットの背景が削除されたかどうかを検出できます。

00:05:36.000 -> 00:05:46.000
その場合は、ヒーロー名ビューからヒーローのレベルとXPの詳細を省略し、代わりにその詳細を以下に表示しましょう。

00:05:46.000 -> 00:05:49.000
これはまた、この環境にいるとき、私たちのヒーローの名前を大きくします。

00:05:49.000 -> 00:05:58.000
これらのコンテキストを切り替えると、レイアウトは元のビューから新しい拡大ビューに自動的に変更されます。

00:05:58.000 -> 00:06:04.000
アクセサリーファミリーウィジェットと同様に、当社のシステムファミリーウィジェットは、iPadのロック画面の鮮やかなレンダリングモードで表示されます。

00:06:04.000 -> 00:06:11.000
これは、ウィジェットが不飽和になり、ロック画面の背景に合わせて適切に色付けされることを意味します。

00:06:11.000 -> 00:06:15.000
このようにレンダリングすると、コントラストの問題がウィジェットの読みやすさに影響を与える可能性があります。

00:06:15.000 -> 00:06:20.000
例えば、私たちのヒーローのアバターは、その円形の背景と区別するのが難しくなります。

00:06:20.000 -> 00:06:25.000
Xcodeに戻り、ウィジェットを変更して、鮮やかなレンダリングモードでその背景を削除しましょう。

00:06:25.000 -> 00:06:27.000
スタンバイナイトモードでこれをチェックしましょう。

00:06:27.000 -> 00:06:34.000
widgetRenderingMode環境変数を使用して、どのレンダリングモードにあるかを検出できます。

00:06:34.000 -> 00:06:43.000
アバターのincludesBackgroundパラメータを変更して、鮮やかなレンダリングモードにあるかどうかを確認しましょう。

00:06:43.000 -> 00:06:49.000
スタンバイナイトモードも鮮やかなレンダリングを使用しているので、私たちのアバターはこの文脈でもはっきりと見えます。

00:06:49.000 -> 00:06:56.000
ウィジェットのレンダリングモードの詳細については、WWDC22の「コンプリケーションとウィジェット：リローデッド」をご覧ください。

00:06:56.000 -> 00:07:01.000
また、ウィジェットの新機能の詳細については、「ウィジェットに命を吹き込み」をチェックしてください。

00:07:01.000 -> 00:07:09.000
私はウィジェットにやってくるすべての変更に非常に興奮しており、これらの新機能でウィジェットを強化するためにあなたが思いつくアイデアを見るのが待ちきれません。

00:07:09.000 -> 00:07:11.000
ありがとう、そして楽しんでください!

00:07:11.000 -> 23:59:59.000
♪ ♪

