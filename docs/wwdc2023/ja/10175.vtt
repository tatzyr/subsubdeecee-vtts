WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
Sonu: こんにちは、私の名前はSonuで、Xcodeに取り組んでいるヒューマンインターフェースデザイナーです。

00:00:15.000 --> 00:00:19.000
そして、Xcode 15の新しいテストレポートをご案内できることを嬉しく思います。

00:00:19.000 --> 00:00:26.000
テストレポートは、ローカル、Xcode Cloud、または別のマシンで実行されるテスト実行の結果を表示する場所です。

00:00:26.000 --> 00:00:34.000
テスト実行は、コードの作業中に実行している単一のテストから、CIで実行されている何千ものテストを含むスイート全体までさまざまです。

00:00:34.000 --> 00:00:43.000
テストレポートは、プロジェクトの健全性を理解し、問題領域を特定し、最終的に障害をより迅速に修正するのに役立つ方法でテスト結果を整理します。

00:00:43.000 --> 00:00:52.000
新しいテストレポートの探索を始める前に、一歩下がって、Xcodeでのテストに関連するいくつかの重要な用語と概念を定義したいと思います。

00:00:52.000 --> 00:00:57.000
テストの構造の背後にある整理概念を理解すると便利です。

00:00:57.000 --> 00:01:03.000
基本を追ってから、テストレポートを見て、それがどのように役立つかを探ります。

00:01:03.000 --> 00:01:06.000
テスト方法から始めましょう。

00:01:06.000 --> 00:01:13.000
テストメソッドは、ソースコードを検証し、テスト結果を生成する個々のテストまたはメソッドです。

00:01:13.000 --> 00:01:15.000
次に、テストクラスがあります。

00:01:15.000 --> 00:01:21.000
テストクラスはテスト方法のグループであり、通常、テストされている領域に基づいてグループ化されます。

00:01:21.000 --> 00:01:24.000
その後、テストバンドルがあります。

00:01:24.000 --> 00:01:27.000
テストバンドルは、1つ以上のテストクラスで構成されています。

00:01:27.000 --> 00:01:33.000
各バンドルには、ユニットまたはUIのいずれかの単一のタイプのテストが含まれています。

00:01:33.000 --> 00:01:37.000
単体テストは、単一のコード、通常は関数を検証するのに役立ちます。

00:01:37.000 --> 00:01:41.000
単体テストは短く、簡単で、非常に迅速に実行されます。

00:01:41.000 --> 00:01:44.000
UIテストは、アプリのユーザー向け動作を観察します。

00:01:44.000 --> 00:01:48.000
これらのテストは、あなたのアプリが本当にあなたが期待していることを確実にすることを確認します。

00:01:48.000 --> 00:01:53.000
私たちの目的のために、私たちのテストバンドルにUIテストが含まれているとしましょう。

00:01:53.000 --> 00:01:56.000
そして、最高レベルでは、テスト計画があります。

00:01:56.000 --> 00:02:04.000
テストプランには1つ以上のテストバンドルが含まれています。つまり、テストプランにはユニットテストとUIテストの両方を含めることができます。

00:02:04.000 --> 00:02:11.000
また、テストプランでは、いくつかの条件下でテストを効率的に実行するための構成を設定できます。

00:02:11.000 --> 00:02:14.000
構成はテスト計画の重要な側面です。

00:02:14.000 --> 00:02:19.000
構成は、テストのランタイム環境を設定する方法をXcodeに伝えます。

00:02:19.000 --> 00:02:27.000
たとえば、さまざまな言語と場所でアプリをテストできるので、アプリが世界のあらゆる地域で機能することを確認することができます。

00:02:27.000 --> 00:02:35.000
コードカバレッジでテストできるので、開発を続けるにつれてコードの品質とカバレッジを追跡できます。

00:02:35.000 --> 00:02:38.000
テストを何度も実行するように設定することもできます。

00:02:38.000 --> 00:02:46.000
これにより、ユーザーが初めて使用したか100回目かに関係なく、アプリのすべての要素が確実に機能することが保証されます。

00:02:46.000 --> 00:02:50.000
構成と並んで、実行先があります。

00:02:50.000 --> 00:02:54.000
実行先は、テストが実行されるデバイスです。

00:02:54.000 --> 00:02:59.000
XcodeのIDEでテストを実行するときは、単一の実行先を選択できます。

00:02:59.000 --> 00:03:06.000
Xcode Cloudとxcodebuildコマンドを使用すると、テストは複数の実行先を持つことができます。

00:03:06.000 --> 00:03:11.000
では、基本をカバーしたので、テスト、設定、実行先がどのように連携するかを見てみましょう。

00:03:11.000 --> 00:03:15.000
前に説明したのと同じテストプランを使っているとしましょう。

00:03:15.000 --> 00:03:19.000
最近、私は自分のアプリで多くの言語をサポートすることに取り組んできました。

00:03:19.000 --> 00:03:27.000
そのため、アプリが期待どおりに動作していることを確認するために、サポートしたい言語の設定を作成しました。最初は英語です。

00:03:27.000 --> 00:03:32.000
その上、このテストプランを3つの実行先で実行しているとしましょう。

00:03:32.000 --> 00:03:37.000
テストプランは、設定を有効にして各デバイスで1回実行されます。

00:03:37.000 --> 00:03:44.000
そして、各メソッドは、合格、失敗、スキップ、または予想される失敗のいずれかのテスト結果ステータスで終了します。

00:03:44.000 --> 00:03:52.000
私のアプリでは、さらにいくつかの言語のサポートにも取り組んでおり、各言語のテストプランの設定を作成しました。

00:03:52.000 --> 00:04:03.000
つまり、Xcodeは設定ごとに完全なテストプランを1回実行し、宛先を実行すると、結果で満たされたマトリックス全体が生成されます。

00:04:03.000 --> 00:04:10.000
ズームインすると、すべてのテスト方法、構成、および実行先の組み合わせの結果が生成されます。

00:04:10.000 --> 00:04:15.000
この個々のインスタンスは、テストメソッドの実行と呼ばれます。

00:04:15.000 --> 00:04:27.000
テスト実行は、コードの作業中に実行している単一のテストから、以前の例と同様に、複数の宛先で複数の構成を実行する何千ものテストを含むスイート全体までの範囲です。

00:04:27.000 --> 00:04:33.000
新しいテストレポートは、テストの数に関係なく、テスト実行を理解するのに役立つツールを提供します。

00:04:33.000 --> 00:04:42.000
これを行うには、新しいテストレポートはテスト実行の高レベルの要約を提供するため、詳細を掘り下げる前に全体像を見ることができます。

00:04:42.000 --> 00:04:46.000
重要なパターンを強調するので、調査をどこから始めるべきかがすぐにわかります。

00:04:46.000 --> 00:04:52.000
テストアクティビティ、失敗情報、スクリーンショットなどを見ることができる単一の場所を提供します。

00:04:52.000 --> 00:04:58.000
そして最後に、UIテストデバッグツールを改善し、より豊富な障害情報を提供しました。

00:04:58.000 --> 00:05:04.000
さて、テストとテストレポートの利点に関する多くの概念を取り上げました。

00:05:04.000 --> 00:05:07.000
では、実際に見てみましょう。

00:05:07.000 --> 00:05:11.000
私はiOSアプリの新機能、Backyard Birdsに取り組んできました。

00:05:11.000 --> 00:05:17.000
前の例と同様に、私は裏庭の鳥を多くの言語で利用可能にするために仕事をしています。

00:05:17.000 --> 00:05:24.000
より多くの言語のサポートを追加しているので、何も壊していないことを確認するために、ローカルとXcode Cloudでテストしています。

00:05:24.000 --> 00:05:28.000
私のCIランのいくつかを見てみましょう。 

00:05:28.000 --> 00:05:34.000
Xcode Cloudでは、プルリクエストを開くときに一握りの単体テストを自動的に実行するワークフローが設定されています。

00:05:34.000 --> 00:05:43.000
ビルドの概要では、ワークフローが始まった理由、ビルドされたコードの変更、このビルドのワークフローをすばやく理解できます。

00:05:43.000 --> 00:05:46.000
また、このビルドで私のアクションがどのように実行されたかを知ることができます。

00:05:46.000 --> 00:05:50.000
そして、私のテストのいくつかは失敗しました。

00:05:50.000 --> 00:05:54.000
それらをチェックしましょう。

00:05:54.000 --> 00:05:57.000
テストアクションをチェックすると、新しいテストレポートに出くわします。

00:05:57.000 --> 00:06:00.000
具体的には、テストの要約を見つけます。

00:06:00.000 --> 00:06:07.000
テストの概要は、このテスト実行で何が起こったのかを全体的に理解させてくれます。

00:06:07.000 --> 00:06:11.000
私は自分のテスト環境をすぐに理解できます。

00:06:11.000 --> 00:06:16.000
また、Insightsを使用して、テスト結果で見つかった注目すべきパターンを探索することもできます。

00:06:16.000 --> 00:06:23.000
インサイトは、すべての構成と実行先で結果を分析する際にXcodeが見つけたパターンです。

00:06:23.000 --> 00:06:26.000
特定の基準に基づいて結果をグループ化します。

00:06:26.000 --> 00:06:32.000
今日、私たちは2種類の洞察を持っています:一般的な失敗パターンと最長のテスト実行。

00:06:32.000 --> 00:06:44.000
一般的な障害パターンの洞察は、同様の障害メッセージに基づいてテストをグループ化しますが、「最長テスト実行」は、テストバンドルのどのテストが他のテストよりも長くかかっているかを手がかりに示します。

00:06:44.000 --> 00:06:49.000
テストセクションでは、この実行中にテストがどのように実行されたかを理解できます。

00:06:49.000 --> 00:06:52.000
また、私のテスト計画についてもっと詳しく得ることができます。

00:06:52.000 --> 00:06:58.000
テストの繰り返しやパフォーマンス指標など、テスト計画にどのような特別な特性があるかを理解できます。

00:06:58.000 --> 00:07:05.000
多くの実行先と構成でテストする場合、各実行がどのように実行されたかを理解するのは難しい場合があります。

00:07:05.000 --> 00:07:11.000
このヒートマップを使用すると、各デバイスと構成でテストがどのように行ったかをすばやく消化できます。

00:07:11.000 --> 00:07:17.000
そして、色とテスト結果の数は、この実行が他のものと比較してどのように行ったかを理解するのに役立ちます。

00:07:17.000 --> 00:07:22.000
また、テストに失敗した場合は、テストの概要にすばやくアクセスできます。

00:07:22.000 --> 00:07:28.000
特定の障害メッセージが私の注意を引いた場合は、このセクションを使用して調査を開始できます。

00:07:28.000 --> 00:07:34.000
注目を集める失敗といえば、私が以前に洞察をチェックしていたとき、最初の洞察が私に突き出ました。

00:07:34.000 --> 00:07:39.000
同様の失敗メッセージで失敗した3つのテストがあると述べています。

00:07:39.000 --> 00:07:42.000
これらのテストが失敗した理由を調べてみましょう。

00:07:42.000 --> 00:07:47.000
特定の洞察を選択した後、このビューを使用して詳細を知ることができます。

00:07:47.000 --> 00:07:53.000
すべてのテストで見つかった失敗メッセージを見つけ、失敗したテストを見ることができます。

00:07:53.000 --> 00:08:01.000
さらに、どの構成と実行先がこれらの単体テストの失敗を引き起こしたのか理解できます。

00:08:01.000 --> 00:08:07.000
そして、この情報を使用して、これらのテストが非常によく似た障害メッセージで失敗した理由についてのシグナルを得ることができます。

00:08:07.000 --> 00:08:12.000
調査を続けるために、テスト方法の実行の1つをチェックしてみましょう。

00:08:12.000 --> 00:08:18.000
テストメソッドの実行を選択した後、testGardenSupplies()のテスト詳細ビューを見つけます。

00:08:18.000 --> 00:08:25.000
テスト詳細ビューは、単一のテスト方法の結果に焦点を当てるための専用スペースを作成します。

00:08:25.000 --> 00:08:30.000
ここでテストの詳細と失敗情報を見つけることができるので、デバッグを開始できます。

00:08:30.000 --> 00:08:37.000
ヘッダーを使用して、すべての構成で何が起こったのかの完全なコンテキストを取得し、宛先を実行できます。

00:08:37.000 --> 00:08:43.000
また、実行ビューでは、このメソッドが各構成と実行先でどのように実行されたかを探索できます。

00:08:43.000 --> 00:08:48.000
また、選択したテストメソッドの実行の失敗メッセージとコールスタックを見つけることもできます。

00:08:48.000 --> 00:08:52.000
障害メッセージとコールスタックは、デバッグのための貴重なツールです。

00:08:52.000 --> 00:08:57.000
それらは、障害の原因を特定するのに役立つ重要な部分です。

00:08:57.000 --> 00:09:03.000
コールスタックはまた、ソースコードへのエントリポイントを戻し、障害の調査を続けることができます。

00:09:03.000 --> 00:09:14.000
ユニットテストに加えて、Backyard Birdsが顧客の期待に応え、さまざまなプラットフォームやデバイスで適切に機能することを確認するために、多くのUIテストをローカルで実行してきました。

00:09:14.000 --> 00:09:17.000
先ほどのローカルテストランを復習しましょう。

00:09:17.000 --> 00:09:22.000
このテスト実行では、私はまだテストサマリーを使用して何が起こったのかを理解することができます。

00:09:22.000 --> 00:09:28.000
上部に環境の詳細、インサイト、下部にテストセクションがあります。

00:09:28.000 --> 00:09:32.000
テストセクションのこの最初の失敗が私の注意を引いた。

00:09:32.000 --> 00:09:36.000
失敗メッセージは、テストがボタンの1つを見つけることができなかったことを示唆しています。

00:09:36.000 --> 00:09:39.000
調べてみましょう。

00:09:39.000 --> 00:09:44.000
失敗を選択した後、testClickTabsAfterSearch()のテスト詳細ビューを見つけます。

00:09:44.000 --> 00:09:50.000
UIテストを見ているので、テストの詳細に移動すると、アクティビティタブが表示されます。

00:09:50.000 --> 00:09:56.000
テストレポートには、私の失敗を理解し、解決するのに役立つ素晴らしい新機能がたくさんあります。

00:09:56.000 --> 00:10:03.000
アクティビティタブには、テストアクティビティ、オートメーションエクスプローラー、スクラバーの3つの主要なセクションがあります。

00:10:03.000 --> 00:10:15.000
テストアクティビティは、私のテストをタイムライン形式でレイアウトします。一番上の行はテストの開始であり、一番下の行は終わりであり、その間の各行はテストで起こったイベントです。

00:10:15.000 --> 00:10:17.000
オートメーションエクスプローラーがあります。

00:10:17.000 --> 00:10:22.000
ここでは、選択したテストアクティビティに関連するビデオ再生の瞬間を見つけることができます。

00:10:22.000 --> 00:10:25.000
これにより、私のテストの完全なリプレイを見ることができます。

00:10:25.000 --> 00:10:31.000
そして最後に、私のテスト実行の線形表現であるスクラバーがあります。

00:10:31.000 --> 00:10:36.000
スクラバーを使用して、タップ、スワイプ、クリックなどのテストイベントを見つけることができます。

00:10:36.000 --> 00:10:41.000
スクラバーは、テスト中のデバイスの向きが変わったときにも強調表示されます。

00:10:41.000 --> 00:10:46.000
そして、スクラバーの上の失敗アイコンは、テストで障害が発生した場所をメモします。

00:10:46.000 --> 00:10:54.000
これらの指標を使用して、テスト実行中の興味深い瞬間をすばやく見つけ、アプリのインタラクションが期待どおりに機能していることを確認することができます。

00:10:54.000 --> 00:11:00.000
これらの新しい部分により、テストレポートにはインタラクティブなテストデバッグ体験があります。

00:11:00.000 --> 00:11:03.000
このエラーの解決にどのように役立つかを確認しましょう。

00:11:03.000 --> 00:11:15.000
アクティビティペインでイベントをクリックすると、ビデオ再生から対応するフレームでオートメーションエクスプローラーが更新されるため、テストの各瞬間に何が起こっているのかを視覚的に理解できます。

00:11:15.000 --> 00:11:23.000
また、スクラバーを正しい場所に移動させるので、完全なテスト実行に関連してイベントがどこで行われているかについてのコンテキストがあります。

00:11:23.000 --> 00:11:30.000
失敗をデバッグするとき、私は失敗に至るまでの瞬間を見るのが好きです。

00:11:30.000 --> 00:11:36.000
テストランを見て、エラーの原因となった可能性のある予期せぬことが起こったかどうかを確認できます。

00:11:36.000 --> 00:11:41.000
ビデオ再生を見た後、すべてが順調に見えます。

00:11:41.000 --> 00:11:46.000
この失敗メッセージによると、UIに「アカウント」ボタンが見つからなかったようです。

00:11:46.000 --> 00:11:51.000
オートメーションエクスプローラは、障害が発生したときにデバイスで何が起こっていたかを示しています。

00:11:51.000 --> 00:11:55.000
「アカウント」ボタンが表示され、その上に境界ボックスがあります。

00:11:55.000 --> 00:12:01.000
バウンディングボックスをクリックすると、この特定のUI要素に関する詳細情報が表示されます。

00:12:01.000 --> 00:12:07.000
ここでは、この要素に関連する識別子と階層情報を見つけることができます。

00:12:07.000 --> 00:12:12.000
ここにある情報に基づいて、アプリ内で「アカウント」ボタンに誤ってラベルを付けたようです。

00:12:12.000 --> 00:12:16.000
ここから、プロジェクトのソースに移動してエラーを修正できます。

00:12:16.000 --> 00:12:20.000
新しいテストレポートにより、私のテストランを理解するのが非常に簡単になりました。

00:12:20.000 --> 00:12:27.000
数分以内に、どのテストが失敗したかを見つけ、解決策を見つけ、失敗を修正することができました。

00:12:27.000 --> 00:12:32.000
失敗はローカルとCIで発生する可能性があり、両方の場所でテストするのがベストプラクティスです。

00:12:32.000 --> 00:12:37.000
だから、テストレポートがXcodeとXcode Cloudで利用できることを嬉しく思います。

00:12:37.000 --> 00:12:39.000
だから、時間は貴重です、みんな。

00:12:39.000 --> 00:12:48.000
テストレポートに追加された新機能は、テスト実行をすばやく理解し、問題領域を特定し、最終的には障害をより迅速に修正するのに役立ちます。

00:12:48.000 --> 00:12:53.000
チューニングしてくれてありがとう、WWDCの残りの部分を楽しんでいただければ幸いです。

00:12:53.000 --> 23:59:59.000
♪ ♪

