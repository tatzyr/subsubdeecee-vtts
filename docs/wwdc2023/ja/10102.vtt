WEBVTT

00:00:00.000 -> 00:00:10.000
♪ ♪

00:00:10.000 -> 00:00:14.000
ジェリー：こんにちは、Siriとアプリショートカットのエンジニアリングマネージャーのジェリーです。

00:00:14.000 -> 00:00:19.000
今日は、アプリショートカットでアプリにスポットライトを当てる方法を紹介します。

00:00:19.000 -> 00:00:27.000
まず、アプリがオペレーティングシステム全体から使用できる迅速で習慣的なアクションを作成するのに役立つアプリショートカットを採用すべき理由から始めます。

00:00:27.000 -> 00:00:31.000
次に、アプリショートカットの実装の基本について確認します。

00:00:31.000 -> 00:00:40.000
その後、App Shortcutsをビジュアルと音声の両方で素晴らしいものにする方法と、iOS 17でApp Shortcutsが改善された新しい方法について説明します。

00:00:40.000 -> 00:00:48.000
そして最後に、アプリショートカットをiPhone以外の多くのAppleデバイスに拡張できる新しい方法を見て締めくくります。

00:00:48.000 -> 00:00:54.000
まず、アプリショートカットを使用すると、アプリの機能を簡単に見つけて使用できます。

00:00:54.000 -> 00:01:00.000
アプリがインストールされるとすぐに自動的に利用可能になり、ゼロユーザー設定が必要です。

00:01:00.000 -> 00:01:08.000
iOS 15以前とは異なり、ショートカットアプリを使用したり、Siriに追加ボタンを使用してアプリのショートカットを設定したりする必要はありません。

00:01:08.000 -> 00:01:13.000
アプリのショートカットは、トリガーフレーズの1つを話すことでSiriから実行できます。

00:01:13.000 -> 00:01:25.000
また、Spotlightで検索するときに検索結果で目立つように取り上げられ、強力なユーザーショートカットとオートメーションの一部になることができるショートカットアプリで見つかります。

00:01:25.000 -> 00:01:37.000
アプリのショートカットは、システム全体のユーザーにアプリの機能の可視性を高めるのに役立ち、アプリを開く機能や、単にバックグラウンドで物事を行う機能の両方のための素晴らしい出発点になるので、ユーザーは集中力を維持できます。

00:01:37.000 -> 00:01:48.000
これらは、アプリのコア機能を使用するための摩擦を軽減し、声だけでハンズフリーやHomePodで自宅で使用できるようにするための、高速で記憶に残る方法です。

00:01:48.000 -> 00:01:56.000
アプリの最も重要な機能をターゲットにした思い出に残るアプリショートカットを使用すると、人々がアプリを発見、記憶、習慣を身につけるのを助けることができます。

00:01:56.000 -> 00:02:03.000
たとえば、このセッションでは、ToDoリストを管理するための「デモ」という仮想アプリを操作します。

00:02:03.000 -> 00:02:07.000
リストを要約した新しい機能をシステムに公開したい。 

00:02:07.000 -> 00:02:14.000
これにより、ショートカットまたはSiriに尋ねることで、何が残っているのかを簡単に把握できます。

00:02:14.000 -> 00:02:17.000
この種の迅速で軽量な機能は、アプリのショートカットに最適です。

00:02:17.000 -> 00:02:22.000
彼らは人々が私のアプリから必要なものをシームレスに手に入れ、途中でできるようにします。

00:02:22.000 -> 00:02:34.000
ユーザーがショートカットからの口頭コマンドでリストを要約し、Spotlightで強調表示できるように、to-doリストを要約するためのアプリインテントを実装する方法を簡単に説明します。

00:02:34.000 -> 00:02:44.000
App Shortcutsは、Swiftのソースコードで優れたインテントをより迅速かつ簡単に構築するために、ゼロから構築されたSwiftのみのフレームワークであるApp Intentsフレームワークで構築されています。

00:02:44.000 -> 00:02:48.000
すべてのアプリショートカットは、ソースコードでインテントを定義することから始まります。

00:02:48.000 -> 00:02:57.000
意図は、やることリストの作成、内容の要約、アイテムのチェックなど、アプリで完了できる個々のタスクを表します。

00:02:57.000 -> 00:03:02.000
アプリのインテントを作成したら、アプリのショートカットを作成できるので、SpotlightやSiriから使用できます。

00:03:02.000 -> 00:03:07.000
これは、あなたの意図を必要なSiriのトリガーフレーズ、タイトル、シンボルに関連付けます。

00:03:07.000 -> 00:03:13.000
両方の定義を取得したら、アプリをビルドしてテストして動作を確認するだけです。

00:03:13.000 -> 00:03:16.000
非常にシンプルなアプリのショートカットを作成することから始めます。

00:03:16.000 -> 00:03:22.000
このアプリのショートカットを使用すると、リストの名前を入力して、SpotlightまたはSiriから直接新しい空のto-doリストを作成できます。

00:03:22.000 -> 00:03:29.000
これを実装するのは、簡単な2段階のプロセスです。アプリの意図を定義し、アプリのショートカットを定義します。

00:03:29.000 -> 00:03:32.000
App Intentsフレームワークをインポートすることから始めます。

00:03:32.000 -> 00:03:37.000
そして、AppIntentプロトコルに準拠して、私の意図のための新しい構造体を実装します。

00:03:37.000 -> 00:03:44.000
システムによって呼び出されるperformメソッドに、私の意図の実際の機能を含めます。

00:03:44.000 -> 00:03:48.000
そして最後に、AppShortcutsProvider構造を実装します。

00:03:48.000 -> 00:03:51.000
各アプリは、このプロトコルに準拠した最大1つの構造体を持つことができます。

00:03:51.000 -> 00:03:56.000
AppShortcutsProviderでは、アプリがサポートするすべてのアプリショートカットを指定できます。

00:03:56.000 -> 00:03:58.000
ここにリスト作成アプリのショートカットを追加しました。

00:03:58.000 -> 00:04:04.000
各アプリのショートカットにはいくつかのコンポーネントがあります。トリガーされたときに呼び出されるインテントです。

00:04:04.000 -> 00:04:08.000
このアプリのショートカットを実行するためにSiriが認識すべきフレーズ。

00:04:08.000 -> 00:04:11.000
アプリショートカットごとにこれらの複数を持つことができます。

00:04:11.000 -> 00:04:17.000
短いタイトルとシステム画像名なので、システムはこのアプリのショートカットを視覚的に表現する方法を知っています。

00:04:17.000 -> 00:04:20.000
シンプルなアプリのショートカットのために実装する必要があるのはそれだけです。

00:04:20.000 -> 00:04:28.000
アプリを実行することで、コードに2つの構造体を作成するだけで、Siriまたはショートカットアプリから直接ToDoリストの作成をすぐに開始できます。

00:04:28.000 -> 00:04:35.000
しかし、もう少し高度なものを試してみたいのですが、要約する特定のリストを提供することで、タスクの簡単な要約を得ることができます。

00:04:35.000 -> 00:04:39.000
これは、App Intentsの2つの重要な概念に触れます。エンティティとクエリです。

00:04:39.000 -> 00:04:42.000
試してみましょう。

00:04:42.000 -> 00:04:45.000
まず、SummarizeList App Intentを実装する必要があります。

00:04:45.000 -> 00:04:50.000
以前と同様に、AppIntentプロトコルに準拠した構造体を作成する必要があります。

00:04:50.000 -> 00:04:53.000
TodoList構造体については、スタブの実装を残しました。

00:04:53.000 -> 00:04:55.000
私はそれに戻ります。 

00:04:55.000 -> 00:05:01.000
私のアプリにはすでにリストの要約を返す便利な機能を持っているので、それを使用します。

00:05:01.000 -> 00:05:05.000
この要約は、アプリのインテントの結果の一部としてカスタムダイアログとして返すことができます。

00:05:05.000 -> 00:05:09.000
これにより、Siriが話したり、結果を表示したりできます。

00:05:09.000 -> 00:05:14.000
すべての意図には、システムが表示できるタイトルが必要です。

00:05:14.000 -> 00:05:20.000
意図は、変数を宣言し、@Parameterプロパティラッパーで注釈を付けるだけで入力を取ることができます。

00:05:20.000 -> 00:05:27.000
この場合、前述のように、今のところ単なるスタブであるToDoList構造体を参照しました。

00:05:27.000 -> 00:05:33.000
さて、多くのアプリのインテントに役立つ2つの概念についてお話ししたいと思います。エンティティとクエリです。

00:05:33.000 -> 00:05:37.000
エンティティは、ユーザーが参照したいと思うアプリに関する概念です。

00:05:37.000 -> 00:05:45.000
私のアプリでは、私のアプリでタスクを実行するときに人々が参照したいと思う論理的なオブジェクトであるため、to-doリストエンティティを持つことは理にかなっています。

00:05:45.000 -> 00:05:51.000
他のアプリでは、ユーザー、ドキュメント、注文などのエンティティがあるかもしれません。

00:05:51.000 -> 00:05:56.000
アプリのエンティティは、それらのインテントが入力パラメータとしてエンティティを使用する場合、アプリのインテントで使用できます。

00:05:56.000 -> 00:06:01.000
私のアプリでは、私の「SummarizeList」インテントは、to-doリストエンティティをパラメータとして取ります。

00:06:01.000 -> 00:06:08.000
アプリのインテントのパラメータに適合するエンティティインスタンスを見つけるために、システムはクエリに依存しています。

00:06:08.000 -> 00:06:14.000
実行時に、システムはクエリオブジェクトをインスタンス化して呼び出し、さまざまな検索パラメータに基づいてエンティティを検索します。

00:06:14.000 -> 00:06:18.000
クエリは、関連するエンティティのインスタンスをシステムに返します。

00:06:18.000 -> 00:06:21.000
システムは後で、インテントを実行するときにこれらのエンティティを使用します。

00:06:21.000 -> 00:06:29.000
私のアプリでは、ToDoリストエンティティと、システムが関連するToDoリストを検索するのに役立つクエリを実装する必要があります。

00:06:29.000 -> 00:06:32.000
私が取り組んでいたリストサマリーアプリのショートカットに戻ります。

00:06:32.000 -> 00:06:36.000
AppEntityに準拠することで、ToDoListのスタブ実装を拡張します。

00:06:36.000 -> 00:06:43.000
システムがこのエンティティタイプを記述する方法を知っているように、typeDisplayRepresentationプロパティを実装します。

00:06:43.000 -> 00:06:49.000
同様に、displayRepresentationを実装するので、システムはこの特定のインスタンスを記述する方法を知っています。

00:06:49.000 -> 00:06:57.000
スポットライトまたはショートカットでエンティティを最上位に表示したい場合は、エンティティが表示表現に画像またはシンボルを持つ必要があることに注意してください。

00:06:57.000 -> 00:07:01.000
そして最後に、このエンティティのデフォルトのクエリを宣言します。

00:07:01.000 -> 00:07:04.000
to-Doリストエンティティの簡単なクエリを実装しました。

00:07:04.000 -> 00:07:09.000
少なくとも、私のクエリは、その識別子によってto-doリストを取得できなければなりません。

00:07:09.000 -> 00:07:11.000
また、提案されたEntitiesを実装したいと思います。

00:07:11.000 -> 00:07:15.000
これにより、私のアプリは、ユーザーに最も関連していると思うToDoリストを制御できます。

00:07:15.000 -> 00:07:20.000
システムは、これらの提案されたエンティティを使用して、アプリのショートカットを自動的に入力します。

00:07:20.000 -> 00:07:29.000
SummarizeListアプリのインテントと関連するエンティティとクエリ構造体だけで、ショートカットアプリ内からオートメーションの一部としてこの関数を使用できるようになりました。

00:07:29.000 -> 00:07:31.000
まだ終わってないけど。-まだ終わってないよ

00:07:31.000 -> 00:07:36.000
この機能がSiriからアクセス可能で、Spotlightで完全に機能されていることを確認したい。

00:07:36.000 -> 00:07:40.000
これを行うには、アプリのショートカットを実装する必要があります。

00:07:40.000 -> 00:07:43.000
先ほど始めたAppShortcutsProviderを拡張することから始めます。

00:07:43.000 -> 00:07:46.000
既存のアプリショートカットに新しいアプリショートカットを追加します。

00:07:46.000 -> 00:07:51.000
また、Siriからアプリショートカットを呼び出す一連の話し言葉も含めます。

00:07:51.000 -> 00:07:56.000
アプリケーションの名前を文字列に直接使用するのではなく、特別なトークンを使用していることに注意してください。

00:07:56.000 -> 00:08:02.000
これにより、Siriは私のアプリのメイン名だけでなく、私が定義したアプリ名の同義語も認識できます。

00:08:02.000 -> 00:08:06.000
また、インテントのパラメータ「リスト」をいくつかのフレーズに追加しました。

00:08:06.000 -> 00:08:14.000
アプリのショートカットは、ユーザーがSiriを呼び出すとすぐにパラメータを提供できるように、事前に定義されたパラメータでトリガーフレーズを拡張することをサポートしています。

00:08:14.000 -> 00:08:22.000
この場合、システムはToDoListQueryのsuggestEntitiesメソッドを呼び出して、可能な値の配列を取得します。

00:08:22.000 -> 00:08:25.000
「リスト」パラメータのないフレーズも提供したことに注意してください。

00:08:25.000 -> 00:08:33.000
これは一般的に良いアイデアなので、私のアプリショートカットがリストなしで使用されている場合、Siriまたはショートカットはユーザーに1つを選択するように促すことができます。

00:08:33.000 -> 00:08:38.000
アプリショートカットは、パラメータがオプションでない場合、インテントを実行する前に自動的に値を求めます。

00:08:38.000 -> 00:08:44.000
オプションのパラメータの場合、performメソッド内の値を手動でプロンプト表示できます。

00:08:44.000 -> 00:08:49.000
以前と同様に、短いタイトルとシステムイメージを含める必要があります。

00:08:49.000 -> 00:08:57.000
ユーザーがSpotlightで私のアプリを検索したときに最初に見るものなので、良い短いタイトルとシステムイメージを選ぶことは重要です。

00:08:57.000 -> 00:09:03.000
アプリのショートカットは、事前にSiriに指定できる既知のパラメータ値の固定セットを持つパラメータをサポートしています。

00:09:03.000 -> 00:09:09.000
彼らは、Xがユーザーからの任意の入力であることができる「Xのために私のアプリを検索する」のようなオープンエンドの値をサポートしていません。

00:09:09.000 -> 00:09:18.000
App Enumsであるパラメータを使用できます。その場合、値は事前に知られているか、Appエンティティであるパラメータを完全に動的に使用できます。

00:09:18.000 -> 00:09:24.000
あなたがする必要があるのは、私のアプリのように、suggestedEntitiesを介してクエリ内のエンティティのリストを返すことだけです。

00:09:24.000 -> 00:09:29.000
そして、最後のステップとして、AppShortcutsProviderオブジェクトでupdateAppShortcutParametersを呼び出す必要があります。

00:09:29.000 -> 00:09:38.000
このメソッドを呼び出すと、アプリのショートカットパラメータが変更されたことをシステムに通知し、システムは関連するクエリでsuggestedEntitiesを呼び出して再フェッチします。

00:09:38.000 -> 00:09:41.000
やることリストが変更されるたびにこれを行う必要があります。

00:09:41.000 -> 00:09:45.000
これには、追加と削除だけでなく、名前の変更などの突然変異も含まれます。

00:09:45.000 -> 00:09:52.000
たとえば、エンティティのdisplayRepresentationの一部が変更された場合は、このメソッドを呼び出す必要があります。

00:09:52.000 -> 00:09:56.000
アプリの最初の起動時にこれを呼び出すことも覚えておくことが重要です。

00:09:56.000 -> 00:10:03.000
エンティティパラメータを参照するアプリショートカットフレーズは、システムが初めてエンティティを正常にフェッチするまで機能しません。

00:10:03.000 -> 00:10:07.000
そして、それが私の要約リストアプリのショートカットに実装する必要があるすべてです。

00:10:07.000 -> 00:10:12.000
今、私のアプリを使うとき、私は「ねえ、Siri。デモで私の食料品リストを要約してください。

00:10:12.000 -> 00:10:15.000
そして、すぐに口頭および視覚的な反応を得ます。

00:10:15.000 -> 00:10:22.000
少量のコードで、人々が迅速かつシームレスな方法で必要な情報を簡単に取得できるようにしました。

00:10:22.000 -> 00:10:28.000
優れた本格的なアプリショートカットを実装したら、ユーザーがそれを発見するのを助けることが重要です。

00:10:28.000 -> 00:10:36.000
人々が単に自分のデバイスを使用する過程であなたのアプリショートカットを発見できる2つの強力な方法があります:スポットライトとSiriのヒント。

00:10:36.000 -> 00:10:40.000
Spotlightは、人々がiPhoneやiPadでアプリを起動する最も一般的な方法の1つです。

00:10:40.000 -> 00:10:44.000
Spotlight Top Hitsセクションには、アプリだけでなく、アプリのショートカットも表示されます。

00:10:44.000 -> 00:10:48.000
これは、アプリのショートカットを発見可能にする素晴らしい方法です。

00:10:48.000 -> 00:10:53.000
人々はあなたのアプリを検索するとすぐにあなたのアプリのショートカットを見つけることができ、あなたのアプリはトップヒットです。

00:10:53.000 -> 00:10:59.000
または、ここで「要約リスト」のように、アプリショートカット自体のタイトルを検索して見つけることができます。

00:10:59.000 -> 00:11:06.000
Spotlightに加えて、Siriのヒントは、ユーザーがアプリを使用している間にアプリのショートカットを発見できるようにする素晴らしい方法です。

00:11:06.000 -> 00:11:11.000
ここでは、人々がこのヒントが役に立つと思う場所のように感じるので、リストビューに1つを追加しました。

00:11:11.000 -> 00:11:18.000
ヒントビューはSwiftUIとUIKitの両方で利用でき、多くのスタイルを提供しているので、どのアプリケーションでも見栄えがします。

00:11:18.000 -> 00:11:23.000
Siriのヒントは、画面上のコンテンツに関連するように、文脈的に最もよく配置されています。

00:11:23.000 -> 00:11:31.000
SpotlightとSiriのヒントの間には、ユーザーがアプリの内外でアプリのショートカットについて知る方法があります。

00:11:31.000 -> 00:11:38.000
アプリの意図とアプリのショートカットの両方をもっと深く掘り下げたい場合は、WWDC22の2つのセッションをチェックしてください。

00:11:38.000 -> 00:11:53.000
「Dive into App Intents」は、App Intentsフレームワークの概要に最適で、「App IntentsでApp Shortcutsを実装する」は、複数の可能なパラメータ値間の曖昧さを解消するなど、App Shortcuts全体で利用可能なさまざまなユーザーエクスペリエンスを探ります。

00:11:53.000 -> 00:12:03.000
初めてのアプリショートカットを実装したので、アプリのショートカットとiOS 17のすべての素晴らしい新機能を最大限に活用するために、今年の新機能についてお伝えしたいと思います。

00:12:03.000 -> 00:12:08.000
iOS 17では、アプリのインテントとアプリのショートカットがショートカットアプリの表示方法を更新しました。

00:12:08.000 -> 00:12:15.000
この新しいデザインは、人々があなたのアプリの意図をより簡単に見つけることを可能にし、アプリの最も重要なアクションへのワンタップアクセスを提供します。

00:12:15.000 -> 00:12:18.000
アプリのショートカットもSpotlightで目立つ配置になりました。

00:12:18.000 -> 00:12:30.000
頻繁に使用されるアプリショートカットがここに表示されているだけでなく、今年はアプリショートカットをより視覚的に特徴的にするために新しいAPIを追加し、Spotlightが関心のあるエンティティを強調する機能も導入しました。

00:12:30.000 -> 00:12:38.000
ショートカットの自動化設定は、より使いやすくするために再設計され、アプリのショートカットが紹介されているため、人々はより簡単に始めることができます。

00:12:38.000 -> 00:12:48.000
これらの素晴らしい新機能をすべて活用し、アプリのショートカットに注意を喚起するために、色、エンティティのサムネイル、シンボル付きの短いタイトルに関する新しいAPIを導入しました。

00:12:48.000 -> 00:12:53.000
これらの新しいAPIは、すべてのアプリショートカットに必要であり、アプリを本当に際立たせるのに役立ちます。

00:12:53.000 -> 00:12:55.000
色から始めます。

00:12:55.000 -> 00:13:02.000
アプリがSpotlightまたはShortcutsに表示されたときにシステムが使用するアプリのInfo plistで最大2色に設定できるようになりました。

00:13:02.000 -> 00:13:09.000
アプリ内のスタイルに似た色を採用することを検討してください。そうすれば、アプリ内体験をシステムの残りの部分に少し持ち込むことができます。

00:13:09.000 -> 00:13:14.000
次に、アプリの各エンティティインスタンスがオプションのサムネイル画像を持つことができるようになりました。

00:13:14.000 -> 00:13:18.000
これは、既存のDisplayRepresentation APIの拡張です。

00:13:18.000 -> 00:13:28.000
サムネイルは、画像が存在するURL、画像を表すデータオブジェクト、名前付きバンドル画像リソース、またはシステム画像名のいずれかとして提供できます。

00:13:28.000 -> 00:13:34.000
エンティティにユニークで特徴的な画像を選択すると、Spotlightの外観をより魅力的にするのに役立ちます。

00:13:34.000 -> 00:13:38.000
そして最後に、すべてのアプリのショートカットには、短いタイトルとシステムイメージが必要です。

00:13:38.000 -> 00:13:43.000
スポットライトまたはショートカットに表示されると、短いタイトルとシステム画像がアクションのスタイルに使用されます。

00:13:43.000 -> 00:13:47.000
特徴的で、アプリのショートカットが何をするかを表すものを選んでください。

00:13:47.000 -> 00:13:56.000
アプリショートカットがシステムで視覚的に紹介されるすべての素晴らしい新しい方法に加えて、今年もアプリショートカットをSiriで使用する方法を大幅に改善しました。

00:13:56.000 -> 00:14:04.000
iOS 16では、Siriは、ソースコードと文字列ファイルで定義したとおりに話されている場合にのみ、アプリショートカットのトリガーフレーズを認識します。

00:14:04.000 -> 00:14:09.000
しかし、アプリを使用している人は、アプリのショートカットにアクセスしようとすると、異なる単語やフレーズを使うかもしれません。

00:14:09.000 -> 00:14:24.000
たとえば、私のアプリでは、「私の食料品リストをデモで要約する」をフレーズとして提供したので、話されたときに期待どおりに私のアプリショートカットをトリガーしますが、「デモで私の食料品リストの概要を教えてください」のような非常に似ていて合理的なものは機能しません。

00:14:24.000 -> 00:14:29.000
iOS 17では、アプリのショートカットをトリガーするために、より自然に話す機能を提供しています。

00:14:29.000 -> 00:14:36.000
これは、デバイス上の機械学習を利用して、アプリショートカットで提供したものと同様のフレーズも機能できるようにします。

00:14:36.000 -> 00:14:41.000
これは、新しいセマンティック類似度インデックスによって強化されています。

00:14:41.000 -> 00:14:49.000
この新しい柔軟なマッチング機能を使用すると、人々はアプリのショートカットを呼び出すより自然な方法を使用でき、可能な限り異なるフレーズを提供する必要はありません。

00:14:49.000 -> 00:14:53.000
そして最も重要なことは、柔軟なマッチングを得るためにコードの変更が不要なことです。

00:14:53.000 -> 00:14:59.000
Xcode 15でアプリを再構築するだけで、すでに持っているものと同様のフレーズが機能します。

00:14:59.000 -> 00:15:11.000
まだ柔軟なマッチングを採用する準備ができていない場合は、「アプリショートカット柔軟なマッチングを有効にする」ビルド設定を無効にしてオプトアウトし、アプリのショートカットフレーズでのみ完全一致に戻すことができます。

00:15:11.000 -> 00:15:17.000
アプリショートカットフレーズの自然さをさらに広げるために、新しい同義語APIもあります。

00:15:17.000 -> 00:15:24.000
これは、AppEntitiesとAppEnumケースの追加の同義語を定義できるように、DisplayRepresentation APIへの小さな追加です。

00:15:24.000 -> 00:15:30.000
これにより、Siriに対してより自然に話すことを可能にすることで、アプリショートカットのリーチがさらに広がります。

00:15:30.000 -> 00:15:37.000
たとえば、私のアプリでは、トリガーフレーズの別名でリストを参照できるようになりました。

00:15:37.000 -> 00:15:42.000
類義語は、Siriがリストをプロンプト表示した場合、事前に指定しなかった場合にも機能します。

00:15:42.000 -> 00:15:50.000
これらの同義語はエンティティの各インスタンスに関連付けられており、変更された場合は、updateAppShortcutParametersを再度呼び出す必要があります。

00:15:50.000 -> 00:15:54.000
柔軟なマッチングをサポートするために、新しいネガティブフレーズAPIもあります。

00:15:54.000 -> 00:16:01.000
それにもかかわらず、アプリのショートカットに属さないフレーズが誤ってアプリを呼び出すことがわかった場合にのみ、これを使用する必要があります。

00:16:01.000 -> 00:16:10.000
この場合、「私の食料品店にデモの要約を送る」と、私のアプリショートカットが誤ってトリガーされる可能性があるので、これを否定的なフレーズに含めます。

00:16:10.000 -> 00:16:17.000
そして最後に、Siriでアプリのショートカットをテストするのは遅くなる可能性があり、アプリを構築して起動し、毎回Siriと話す必要があります。

00:16:17.000 -> 00:16:22.000
複数のロケールでテストしたい場合、これは特に時間がかかります。

00:16:22.000 -> 00:16:30.000
App Shortcutsのオーサリングをより迅速かつ簡単にするために、App Shortcuts Previewという強力な新しいツールをXcodeに導入しています。

00:16:30.000 -> 00:16:35.000
App Shortcuts Previewは、macOS SonomaでXcode 15を実行している場合にのみ利用可能であることに注意してください。

00:16:35.000 -> 00:16:39.000
デモを見てみましょう。 見てみましょう。

00:16:39.000 -> 00:16:43.000
ここには、以前にアプリショートカットを実装したデモアプリのプロジェクトがあります。

00:16:43.000 -> 00:16:51.000
アプリを起動してSiriと話すことでアプリのショートカットをテストできますが、フレーズの効果をすばやくプレビューするより迅速な方法を紹介したいと思います。

00:16:51.000 -> 00:16:55.000
この新機能は、製品、アプリショートカットプレビューにあります。

00:16:55.000 -> 00:17:01.000
セマンティック類似性インデックスを生成する機会を持つように、まず私のアプリを構築する必要があります。

00:17:01.000 -> 00:17:09.000
構築後、左側のアプリを選択し、すぐに人々がSiriに話しかけるかもしれないと思うフレーズを入力し始めることができます。

00:17:09.000 -> 00:17:13.000
それは私がコードで定義したものなので、うまくいくとわかっているフレーズをいくつか試してみましょう。

00:17:13.000 -> 00:17:16.000
デモで買い物リストを要約します。

00:17:16.000 -> 00:17:21.000
それは私のSummarizeListの意図と正しく一致します。

00:17:21.000 -> 00:17:25.000
私が提供したフレーズではなく、最初のフレーズに似ているフレーズを試してみましょう。

00:17:25.000 -> 00:17:30.000
デモ付きの買い物リストの概要を教えてください。

00:17:30.000 -> 00:17:37.000
フレキシブルマッチングのおかげで、このフレーズは、追加の作業をしなくても同じ意図で一致します。

00:17:37.000 -> 00:17:43.000
それでは、確実に認識するには少し違いすぎるかもしれない3番目のフレーズで試してみましょう。

00:17:43.000 -> 00:17:46.000
デモで買い物リストの要点を教えてください。

00:17:46.000 -> 00:17:49.000
これは私のアプリのどのアプリショートカットとも一致しません。

00:17:49.000 -> 00:18:01.000
アプリショートカットに新しいフレーズをすばやく追加し、再構築し、フレーズを再度テストすることができます。

00:18:01.000 -> 00:18:05.000
デモで買い物リストの要点を教えてください。

00:18:05.000 -> 00:18:10.000
そして、新しいフレーズが一致し、アプリを実行せずにそれを確認することができます。

00:18:10.000 -> 00:18:13.000
今、私は北京語で私のアプリをテストしたいです。

00:18:13.000 -> 00:18:19.000
携帯電話の言語を切り替えたり、アプリを実行したり、Siriに頼んだりするのではなく、プレビューでロケールセレクターを使うだけです。

00:18:19.000 -> 00:18:22.000
これにより、すぐに新しいフレーズをテストできます。

00:18:22.000 -> 00:18:32.000
そして、マンダリンのフレーズは期待どおりに機能し、開発デバイスを使用する必要はありません。

00:18:32.000 -> 00:18:41.000
アプリショートカットプレビューは、アプリショートカットがSiriでどのように機能するかを手動でテストするより迅速な代替手段であり、アプリショートカットの開発が容易になります。

00:18:41.000 -> 00:18:48.000
iOS 17では、新しい文字列カタログファイル形式とともに、アプリショートカットのトリガーフレーズをローカライズする方法も改善しています。

00:18:48.000 -> 00:18:53.000
以前は、各ロケールの各アプリショートカットに対して持つことができるフレーズの数が制限されていました。

00:18:53.000 -> 00:19:00.000
たとえば、Swiftコードでアプリショートカットに5つのフレーズを定義すると、各ロケールで5つのフレーズに制限されます。

00:19:00.000 -> 00:19:08.000
iOS 17では、文字列カタログの助けを借りて、すべてのロケールに自然に必要な数のフレーズを持つことができるように、この制限を解除しています。

00:19:08.000 -> 00:19:13.000
この機能は、以降のiOS 17をターゲットとするアプリでのみ利用可能であることに注意してください。

00:19:13.000 -> 00:19:16.000
この新機能を利用するのは簡単です。

00:19:16.000 -> 00:19:29.000
今年以前にアプリにアプリショートカットを採用していない場合は、「AppShortcuts」という新しい文字列カタログを作成するだけです。

00:19:29.000 -> 00:19:37.000
アプリを再構築すると、AppShortcutsProviderで定義したフレーズが自動的に入力されます。

00:19:37.000 -> 00:19:45.000
Swiftのソースコードを編集して再構築すると、新しい文字列カタログ形式は、自動的に追加または削除するフレーズに追いつきます。

00:19:45.000 -> 00:19:55.000
または、今年以前にすでにApp Shortcutsを採用している場合は、AppShortcuts.stringsファイルをString Catalogに移行するだけです。

00:19:55.000 -> 00:19:59.000
Xcodeで右クリックし、移行アシスタントに従ってください。

00:19:59.000 -> 00:20:08.000
完了して再構築すると、フレーズが自動的に入力され、すでに行った可能性のあるローカリゼーションが保持されます。

00:20:08.000 -> 00:20:14.000
文字列カタログに移行したら、制限なく各ロケールに追加のフレーズを追加できます。

00:20:14.000 -> 00:20:20.000
柔軟なマッチング、新しいアプリショートカットプレビュー、文字列カタログは、Siriでアプリショートカットをはるかに良くします。

00:20:20.000 -> 00:20:26.000
トリガーフレーズを素晴らしいものにするためのヒントをいくつか紹介します。記憶に残るフレーズを選択することが重要です。

00:20:26.000 -> 00:20:34.000
アプリのユーザーは、アプリのショートカットをサポートする他の多くのアプリを携帯電話に持っているでしょう、そして実際には、彼らは彼らのショートカットを正確に表現する方法を覚えるのに苦労するでしょう。

00:20:34.000 -> 00:20:37.000
アプリ名の同義語を活用してください。

00:20:37.000 -> 00:20:41.000
これは、ユーザーがアプリショートカットを呼び出す方法をさらに広げるのに役立ちます。

00:20:41.000 -> 00:20:45.000
Swiftのソースコードでは、人間が読めないプレースホルダキーを使用しないでください。

00:20:45.000 -> 00:20:52.000
フレーズ内のパラメータを参照する場合は、先ほど実証した補間された文字列プレースホルダによって定義する必要があります。

00:20:52.000 -> 00:20:58.000
これは、ランタイムが実行時にこれらのプレースホルダを正しくロードして入力するために必要です。

00:20:58.000 -> 00:21:04.000
さらに、アプリに採用する際に注意すべきアプリのショートカットにはいくつかの制限があります。

00:21:04.000 -> 00:21:07.000
あなたのアプリは最大10個のアプリショートカットを持つことができます。

00:21:07.000 -> 00:21:11.000
アプリ全体に最大1,000のトリガーフレーズがあるかもしれません。

00:21:11.000 -> 00:21:14.000
これには、パラメータのすべての組み合わせが含まれていることに注意してください。

00:21:14.000 -> 00:21:20.000
たとえば、10の可能な値を持つパラメータは、有効なフレーズの数を10倍に拡大します。

00:21:20.000 -> 00:21:26.000
フレーズ内のパラメータに可能な値が多すぎないことを確認することで、この制限に達するのを避けることができます。

00:21:26.000 -> 00:21:33.000
App Shortcuts Previewでのテストは、すでにFlexible Matchingでカバーされている可能性のある冗長なフレーズを定義しないようにするのにも役立ちます。

00:21:33.000 -> 00:21:37.000
すべてのトリガーフレーズには、アプリ名またはアプリ名の同義語が含まれている必要があります。

00:21:37.000 -> 00:21:44.000
追加のアプリ名の同義語を定義する方法に関するガイドについては、このビデオに関連付けられているリンクを参照してください。

00:21:44.000 -> 00:21:48.000
アプリを開くアプリのショートカットがSpotlightに表示されるようになりました。

00:21:48.000 -> 00:21:55.000
エンティティでアプリを開くアプリインテントがある場合は、そのアプリインテントをOpenIntentプロトコルに準拠する必要があります。

00:21:55.000 -> 00:22:05.000
素晴らしいアプリショートカット体験を作成する方法について話したので、iPhone以外のさまざまなデバイスで同じ素晴らしい体験をもたらす方法について話しましょう。

00:22:05.000 -> 00:22:11.000
アプリのショートカットはApple Watchで動作するようになりましたが、可能な限り最高の体験を得るためには、いくつかの制限に注意する必要があります。

00:22:11.000 -> 00:22:16.000
Apple Watchのアプリショートカットは、デバイス自体にインストールされているwatchOSアプリから来ている必要があります。

00:22:16.000 -> 00:22:20.000
ペアリングされたiOSデバイスからのアプリのショートカットは、Watchでは実行できません。

00:22:20.000 -> 00:22:29.000
これは、iPhoneにiOSアプリがインストールされているが、対応するwatchOSアプリがインストールされていない場合、アプリショートカットはwatchOSから動作しないことを意味します。

00:22:29.000 -> 00:22:35.000
Siriとの柔軟なマッチングはApple Watchでは利用できないので、フレーズは正確に話さなければなりません。

00:22:35.000 -> 00:22:43.000
Apple WatchのサポートはwatchOS 9.2で導入され、そのバージョン以降を実行しているすべてのデバイスで利用できます。

00:22:43.000 -> 00:22:46.000
アプリのショートカットがApple Watchでも発見できるようになりました。

00:22:46.000 -> 00:22:53.000
iOSと同様に、watchOSのショートカットアプリは、デバイスで利用可能なアプリのショートカットを際立たせています。

00:22:53.000 -> 00:22:56.000
第二に、アプリのショートカットがHomePodでサポートされるようになりました。

00:22:56.000 -> 00:23:02.000
これには、App Shortcut対応のアプリをコンパニオンiOSまたはiPadOSデバイスにインストールする必要があります。

00:23:02.000 -> 00:23:10.000
アプリのショートカットがアプリを起動する可能性があるiOSやiPadOSで実行されているのとは異なり、HomePodでは、アプリのショートカットはアプリをまったく起動しない場合があります。

00:23:10.000 -> 00:23:18.000
例えば、iPhoneにデモアプリをアップするだけで、HomePodに「Hey, Siri」と言うことができます。デモで私の食料品リストを要約してください。

00:23:18.000 -> 00:23:25.000
App ShortcutsのHomePodサポートは、バージョン16.2以降から利用できます。

00:23:25.000 -> 00:23:29.000
HomePod用のアプリショートカットを設計するときは、音声のみのデバイスであることを考慮してください。

00:23:29.000 -> 00:23:36.000
対応するビジュアルがないので、Siriが話すように明確で簡潔なダイアログを返していることを確認してください。

00:23:36.000 -> 00:23:42.000
IntentDialogクラスには、「フル」文字列と「サポート」文字列の両方を取る初期化子があります。

00:23:42.000 -> 00:23:47.000
HomePodは「フル」ダイアログを使用し、iPhoneなどのビジュアルデバイスは代替の「サポート」ダイアログを使用します。

00:23:47.000 -> 00:23:54.000
これにより、ユーザーが視覚的な出力を参照できる場合はより簡潔にすることができますが、画面が利用できない場合は完全に説明的なままです。

00:23:54.000 -> 00:24:05.000
音声のみのユースケースを含むアプリショートカットの設計方法の詳細については、WWDC22の「デザインアプリショートカット」セッションをご覧ください。

00:24:05.000 -> 00:24:08.000
私はいくつかの重要なポイントを繰り返して締めくくりたいと思います。

00:24:08.000 -> 00:24:16.000
アプリのショートカットは、システム全体のアプリの機能の可視性を高め、アプリの習慣的な使用に対する摩擦を減らすのに役立ちます。

00:24:16.000 -> 00:24:26.000
アプリのショートカットはこれまで以上に発見しやすくなり、Spotlightの目立つ配置は、アプリのより多くの使用を促進し、アプリを際立たせるためのより多くのスタイリングオプションを促進します。

00:24:26.000 -> 00:24:33.000
Siriを使用したアプリショートカットは、フレキシブルマッチングで大幅に改善され、ユーザーは自分の声でアプリショートカットをより簡単にトリガーできます。

00:24:33.000 -> 00:24:40.000
また、Xcodeの新しいアプリショートカットプレビューツールを使用すると、アプリショートカットの開発とテストがより速く、より簡単になります。

00:24:40.000 -> 00:24:47.000
アプリのインテントとアプリのショートカットをより深く掘り下げるには、今年からさらに2つのセッションをチェックしてください。

00:24:47.000 -> 00:24:51.000
これらすべての改善により、アプリショートカットはアプリとユーザーに最適だと思います。

00:24:51.000 -> 00:24:54.000
あなたが作成するすべての素晴らしいアプリショートカットを見るのを楽しみにしています。

00:24:54.000 -> 23:59:59.000
♪ ♪

