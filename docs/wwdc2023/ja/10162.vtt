WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
Cody: こんにちは、「The SwiftUI cookbook for focus」へようこそ。

00:00:14.000 --> 00:00:25.000
私はCodyです。今日は、SwiftUIのフォーカスAPIを使用して、本当に素晴らしいユーザーエクスペリエンスを調理できることのいくつかについて説明します。

00:00:25.000 --> 00:00:34.000
このビデオでは、おいしいAPIの詳細の固定メニューから3コースの食事を提供し、一連の細かいコード例と組み合わせます。

00:00:34.000 --> 00:00:42.000
前菜として、私は焦点の非常に基本的なレビューにいくつかの時間を費やします:それは何ですか、そしてそれはどんな仕事をしますか?

00:00:42.000 --> 00:00:50.000
最初のコースでは、フォーカス体験を作る成分を見て、あなたの口蓋を磨きます。

00:00:50.000 --> 00:00:54.000
それらの材料がレイアウトされているので、私は本当に料理を始めることができます。

00:00:54.000 --> 00:01:05.000
メインコースでは、フォーカスの外観を制御し、フォーカスの動きを観察し、カスタムコントロールでキーボード入力に応答するためのいくつかのレシピを掘り下げます。

00:01:05.000 --> 00:01:08.000
では、フォーカスとは何ですか?

00:01:08.000 --> 00:01:20.000
フォーカスは、誰かがキーボードのキーを押したり、Apple TV Remoteでスワイプしたり、時計のDigital Crownを回したりしたときに、どのように反応するかを決定するためのツールです。

00:01:20.000 --> 00:01:25.000
これらの入力方法には、共通する1つの重要な詳細があります。

00:01:25.000 --> 00:01:33.000
それ自体では、入力が意図されている画面上のコントロールを特定するのに十分な情報を提供していません。

00:01:33.000 --> 00:01:39.000
これをマウス、トラックパッド、タッチスクリーンなどと比較してください。

00:01:39.000 --> 00:01:49.000
マウスまたはトラックパッドを使用すると、画面上のカーソルは、システムがインタラクションのターゲットを見つけるために使用する画面座標とクリックを関連付けます。

00:01:49.000 --> 00:01:56.000
フォーカスは、システムがポインタカーソルなしで直接入力するために必要な追加情報を提供します。

00:01:56.000 --> 00:02:07.000
ビューにフォーカスがある場合、システムはそれをキーボード、Apple TVリモコン、およびApple Watchデジタルクラウンからの入力に応答するための出発点として使用します。

00:02:07.000 --> 00:02:10.000
フォーカスは単なる実装の詳細ではありません。

00:02:10.000 --> 00:02:17.000
アプリを使用している人々にとっても同様に重要であり、フォーカスされたビューが特に強調されている理由です。

00:02:17.000 --> 00:02:24.000
macOSは、フォーカスされたビューの周りに自動的に境界線を追加し、キーボード入力を受信することを示しています。

00:02:24.000 --> 00:02:32.000
watchOSは、コントロールの周りに緑色の境界線を描画し、デジタルクラウンを回転させることでコントロールの値を変更できることを知らせます。

00:02:32.000 --> 00:02:39.000
また、tvOSでは、フォーカスされたビューは、他のコントロールの平面の上に持ち上げるホバー効果を受けます。

00:02:39.000 --> 00:02:44.000
フォーカスビューを強調することは、いくつかの方法で人々を助けます。

00:02:44.000 --> 00:02:50.000
キーボードで入力したり、リモコンをスワイプしたりすると、入力がどこに行くかを予測できます。

00:02:50.000 --> 00:02:59.000
そして、複雑または詳細なレイアウトでは、アプリのどの部分とやり取りしているかを一目で人々に思い出させます。

00:02:59.000 --> 00:03:03.000
フォーカスは特別な種類のカーソルのように振る舞います。

00:03:03.000 --> 00:03:13.000
マウスカーソルのように画面上のポイントを追跡する代わりに、UIのどの部分がフォーカス入力のターゲットであるかを追跡します。

00:03:13.000 --> 00:03:18.000
このため、私はフォーカスをユーザーの注意を引くカーソルとして考えるのが好きです。

00:03:18.000 --> 00:03:37.000
フォーカスとは何か、それがアプリにどのように表示されるかを少しわかったので、最初のコースをレイアウトし、すべてのアプリのフォーカスエクスペリエンスに入る基本的な要素を見てみましょう：フォーカス可能なビュー、フォーカス状態、フォーカスされた値、フォーカスセクション。

00:03:37.000 --> 00:03:42.000
焦点を絞って調理するときに考慮すべき主な成分は、焦点を絞ったビュー自体です。

00:03:42.000 --> 00:03:48.000
これは、フォーカス入力に応答するときにシステムが出発点として使用するビューです。

00:03:48.000 --> 00:03:54.000
異なるコントロールは、異なる状況下で、異なる理由で集中可能です。

00:03:54.000 --> 00:03:58.000
macOSとiPadOSのテキストフィールドとボタンを比較してください。

00:03:58.000 --> 00:04:06.000
テキストフィールドは、タップしても、Tabキーを押して以前のコントロールからフォーカスを移動しても、常にフォーカス可能です。

00:04:06.000 --> 00:04:13.000
この種のコントロールは、継続的なフォーカス入力をキャプチャする役割であるため、編集のフォーカスをサポートします。

00:04:13.000 --> 00:04:19.000
ボタンは違います。彼らの仕事は、クリックとタップを処理することです。

00:04:19.000 --> 00:04:30.000
macOSとiPadOSは、タップしたときにボタンにフォーカスを与えず、Tabキーでボタンに到達する唯一の方法は、システム全体でキーボードナビゲーションをオンにすることです。

00:04:30.000 --> 00:04:36.000
この設定に精通していない場合は、macOSシステム設定のキーボード設定ペインで見つけることができます。

00:04:36.000 --> 00:04:40.000
「キーボードナビゲーション」というラベルの付いたスイッチです。

00:04:40.000 --> 00:04:49.000
そのスイッチを切り替えた後、Tabキーを押してボタンに焦点を合わせ、スペースバーを押して起動することができます。

00:04:49.000 --> 00:04:53.000
ボタンはアクティベーションのフォーカスをサポートします。

00:04:53.000 --> 00:05:04.000
これらのコントロールは、仕事をするためにフォーカスを必要としませんが、クリックとタップに代わるフォーカス駆動の代替手段をサポートするために、システムが許可すればフォーカスを取ります。

00:05:04.000 --> 00:05:12.000
iOS 17とmacOS Sonomaでは、フォーカスシステムに参加するためのカスタムコントロール用の新しいAPIがあります。

00:05:12.000 --> 00:05:23.000
「フォーカス可能な」ビュー修飾子を適用すると、コントロールがサポートするフォーカスインタラクションの種類を指定することで、結果の動作を微調整できるようになりました。

00:05:23.000 --> 00:05:30.000
フォーカスを使用して時間の経過とともに状態を更新するコントロールについては、編集インタラクションを指定します。

00:05:30.000 --> 00:05:39.000
直接ポインタアクティベーションの代替手段としてフォーカスを使用するコントロールについては、アクティベートインタラクションを指定します。

00:05:39.000 --> 00:05:46.000
引数をまったく提供しない場合、システムはすべてのインタラクションに制御の焦点を与えます。

00:05:46.000 --> 00:05:53.000
macOS Sonoma以前は、フォーカス可能な修飾子はアクティベーションセマンティクスのみをサポートしていました。

00:05:53.000 --> 00:06:00.000
macOSコードでフォーカス可能な修飾子をすでに使用している場合は、新しい動作がユースケースに合っていることを確認してください。

00:06:00.000 --> 00:06:04.000
「インタラクション」引数を追加してコードを更新する必要があるかもしれません。

00:06:04.000 --> 00:06:09.000
次の成分は、瞬間ごとにフォーカスシステムの状態に関連しています。

00:06:09.000 --> 00:06:13.000
この成分は適切に「FocusState」と名付けられています。

00:06:13.000 --> 00:06:25.000
システムは、どのビューにフォーカスがあるかを追跡し、アプリはロジックでその情報を使用して、入力の処理方法とビューのスタイルを決定することができます。

00:06:25.000 --> 00:06:35.000
システムの状態を観察するには、特定のビューに焦点を当てて提供した値を関連付けるバインディングを作成します。

00:06:35.000 --> 00:06:45.000
ビューは、これらのバインディングを読んで、ビューがフォーカスされるなど、フォーカスが変更されたとき、またはフォーカスが却下されたときに通知を受けることができます。

00:06:45.000 --> 00:06:52.000
ブール値を持つフォーカス状態プロパティは、ここに示すように、単一のビューがフォーカスされているかどうかを示します。

00:06:52.000 --> 00:06:57.000
より複雑なケースでは、カスタムデータ型を使用することもできます。

00:06:57.000 --> 00:07:04.000
後で、この例について話し合い、フォーカス状態をプログラムで変更する方法を紹介します。

00:07:04.000 --> 00:07:07.000
次に、Focused Values APIです。

00:07:07.000 --> 00:07:15.000
Focused Values APIは、ユーザーインターフェイスのリモート部分をリンクするデータ依存関係を構築する方法の問題を解決します。

00:07:15.000 --> 00:07:22.000
このAPIを使用して、アクティブなシーンで何が起こっているかに基づいてアプリのコマンドを更新します。

00:07:22.000 --> 00:07:26.000
焦点を絞った値は、これらの異なる要素間のデータフローを可能にします。

00:07:26.000 --> 00:07:30.000
カスタムを定義し、それを使用してメインメニューのコンテンツを構築します。

00:07:30.000 --> 00:07:37.000
フォーカスされた値の作成と使用は、カスタム環境キーとオブジェクトの作成と使用に似ています。

00:07:37.000 --> 00:07:49.000
「FocusedValueKey」プロトコルを使用して新しいキーを定義し、新しいキーを使用して値を取得して設定する計算されたプロパティで「FocusedValues」を拡張します。

00:07:49.000 --> 00:07:57.000
使用するデータは、シーンのビューから取得され、値、バインディング、または観測可能なオブジェクトにすることができます。

00:07:57.000 --> 00:08:07.000
いずれにせよ、ビュー修飾子のファミリを使用して、ビュー階層のその部分にあるフォーカスとデータを関連付けます。

00:08:07.000 --> 00:08:13.000
環境値と同様に、動的プロパティを宣言することで、フォーカスされた値にアクセスします。

00:08:13.000 --> 00:08:22.000
この例では、フォーカスされた値はバインディングなので、「@FocusedBinding」プロパティラッパーを使用し、カスタムキーパスを提供します。

00:08:22.000 --> 00:08:30.000
「@FocusedBinding」は、フォーカスされたビューとその祖先を見て、現在キーに関連付けられたバインディングがあるかどうかを確認します。

00:08:30.000 --> 00:08:36.000
プロパティラッパーは自動的にバインディングを解除するので、バインドされた値を直接操作できます。

00:08:36.000 --> 00:08:42.000
私がする必要がある唯一の他のことは、ビューのボディで私の新しいプロパティを使用することです。

00:08:42.000 --> 00:08:55.000
時間が経つにつれて、異なるコントロール間でフォーカスが移動し、異なるウィンドウがアクティブになると、システムは新しいコンテキストで見つけた値を反映するようにビューを更新します。

00:08:55.000 --> 00:08:59.000
最後の成分はフォーカスセクションのAPIです。

00:08:59.000 --> 00:09:07.000
フォーカスセクションは、誰かがApple TV Remoteでスワイプしたり、キーボードのTabキーを押したりしたときに、フォーカスがどのように動くかに影響を与える方法を提供します。

00:09:07.000 --> 00:09:14.000
デフォルトでは、フォーカスは画面の最上端に最も近いコントロールから始まります。

00:09:14.000 --> 00:09:23.000
そこから、タブを押すと、現在のロケールのレイアウト順序に従って、あるコントロールから次のコントロールにフォーカスが移動します。

00:09:23.000 --> 00:09:29.000
画面の最後のコントロールに到達すると、タブをもう一度押すとシーケンスが再起動します。

00:09:29.000 --> 00:09:34.000
Apple TVのリモコンでのフォーカスの動きは指向性です。

00:09:34.000 --> 00:09:40.000
上下、左右にスワイプして、コントロール間でフォーカスを移動できます。

00:09:40.000 --> 00:09:45.000
方向移動は、隣接するターゲット間でのみ機能します。

00:09:45.000 --> 00:09:51.000
この例では、クレームブリュレボタンから他のデザートの1つに右にスワイプできます。

00:09:51.000 --> 00:09:57.000
しかし、クレームブリュレの固定具を食料品リストに追加したい場合は、下にスワイプできません。

00:09:57.000 --> 00:10:03.000
そのボタンはクリームブリュレボタンの真下にないので、私のジェスチャーは失敗します。

00:10:03.000 --> 00:10:09.000
これらのフォーカスターゲットを整列させるには、下部ボタンのコンテナをフォーカスセクションとしてマークします。

00:10:09.000 --> 00:10:15.000
フォーカスセクションは動きのジェスチャーのターゲットになりますが、フォーカス可能にはなりません。

00:10:15.000 --> 00:10:20.000
代わりに、彼らは最も近いフォーカス可能なコンテンツにフォーカスを導きます。

00:10:20.000 --> 00:10:25.000
効果的であるためには、フォーカスセクションは内容よりも多くのスペースを占有する必要があります。

00:10:25.000 --> 00:10:34.000
この場合、ボタンの前後にスペーサーを追加して、画面の幅に合わせてスタックを成長させます。

00:10:34.000 --> 00:10:42.000
より大きなフォーカスターゲットが配置されているので、どこからでも下にスワイプして下のボタンに到達できるようになりました。

00:10:42.000 --> 00:10:46.000
私はすでにそのクレームブリュレを味わうことができます!

00:10:46.000 --> 00:10:57.000
カスタムコントロールのルックアンドフィールを磨き、一般的なタスクから摩擦を取り除くために、先ほど説明した主成分を組み合わせたレシピをいくつか説明します。

00:10:57.000 --> 00:11:01.000
最近、私は仲間のシェフCurtが作った料理本アプリを使っています。

00:11:01.000 --> 00:11:05.000
あなたは彼のWWDC22のビデオからそれを認識するかもしれません。

00:11:05.000 --> 00:11:13.000
このセクションのレシピは、私が取り組んできたいくつかの新機能に基づいており、行動に集中するための注意の恩恵を受けるでしょう。

00:11:13.000 --> 00:11:21.000
例えば、私は食料品店への次の旅行で何を得るべきかを覚えておくために、アプリ内の食料品リストを追加しました。

00:11:21.000 --> 00:11:29.000
この最初のレシピは、プログラマティックフォーカスの動きのダッシュが、私の食料品リストの編集を楽しい経験にする方法を示しています。

00:11:29.000 --> 00:11:34.000
食料品リストシートが表示されると、最後には常に空のアイテムがあります。

00:11:34.000 --> 00:11:39.000
空のアイテムをタップするとキーボードが上がるので、購入する必要があるものを説明できます。

00:11:39.000 --> 00:11:48.000
食料品の追加は頻繁な作業なので、リストが表示されるたびに自動的に空のアイテムに焦点を合わせることで、タップを節約したいと思います。

00:11:48.000 --> 00:11:54.000
先ほど、フォーカスステートAPIを使用して、どのビューにフォーカスがあるかを観察して更新する方法を示しました。

00:11:54.000 --> 00:11:57.000
ここでも同じAPIを使います。

00:11:57.000 --> 00:12:02.000
前の例では、フラグを使用して、単一のビューにフォーカスがあるかどうかを知らせました。

00:12:02.000 --> 00:12:07.000
私の食料品リストの場合、観察すべきテキストフィールドがいくつかあります。

00:12:07.000 --> 00:12:12.000
FocusStateの値は、このような場合の任意のハッシュ可能なタイプにすることができます。

00:12:12.000 --> 00:12:23.000
この画面に追加する各成分には一意のIDがあり、フォーカスされたテキストフィールドに関連付けられたIDを保存することでフォーカスを追跡できます。

00:12:23.000 --> 00:12:28.000
「Focused(_:equals:)」修飾子を使用して、各テキストフィールドとその成分の間のリンクを作ります。

00:12:28.000 --> 00:12:42.000
この修飾子に2つの引数を提供する必要があります。「focusedItem」プロパティへのバインディングと、フォーカスがそのテキストフィールドにあるときにバインディングを更新する必要がある成分IDです。

00:12:42.000 --> 00:12:53.000
食料品リストをタップすると、アプリを実行し、「focusedItem」プロパティが異なるID値で更新されていることを確認できます。

00:12:53.000 --> 00:13:02.000
フォーカス状態のバインディングが整っていると、食料品リストが最初に画面に表示されたときに、テキストフィールドにプログラムでフォーカスを移動するために必要なものがあります。

00:13:02.000 --> 00:13:10.000
これを行うには、「defaultFocus(_:_:)」ビュー修飾子をリストに追加します。これは、iOS 17でも利用可能になりました。

00:13:10.000 --> 00:13:20.000
システムがこの画面で初めてフォーカスを評価しているとき、最後の食料品リストアイテムのIDで私のバインディングを更新しようとします。

00:13:20.000 --> 00:13:25.000
これらの変更により、私の食料品リストに追加することは2段階のプロセスになりました。

00:13:25.000 --> 00:13:30.000
ツールバーボタンをタップしてシートを表示し、入力を開始します。

00:13:30.000 --> 00:13:32.000
ステップ3はありません。

00:13:32.000 --> 00:13:42.000
買い物リストが増えるにつれて、ツールバーの追加ボタンをタップすると、新しい空のリスト項目が作成されますが、フォーカスは元の場所のままであることに気づきます。

00:13:42.000 --> 00:13:45.000
焦点を合わせるには、空のアイテムをタップする必要があります。

00:13:45.000 --> 00:13:53.000
これは、新しいアイテムが表示されたらすぐに入力を開始できるように、アプリがプログラムでフォーカスを移動させたい別のケースです。

00:13:53.000 --> 00:13:58.000
違いは、今、私は変化のタイミングをコントロールしたいということです。

00:13:58.000 --> 00:14:04.000
幸いなことに、デフォルトのフォーカスを設定するために作成したのと同じフォーカス状態バインディングを使用できます。

00:14:04.000 --> 00:14:12.000
私のGroceryListViewには、モデルに新しいアイテムを追加する「addEmptyItem」メソッドがあります。

00:14:12.000 --> 00:14:24.000
そして、私はすでに新しいアイテムのTextFieldを「currentItemID」プロパティに関連付けているので、ツールバーボタンのアクションの一部として新しいIDでプロパティを更新する必要があります。

00:14:24.000 --> 00:14:26.000
ヴォイラ！

00:14:26.000 --> 00:14:37.000
今、私の食料品リストを開始または更新したいとき、私はそれが必要な場所に焦点を置くために何かをタップする必要はありません、私はちょうど入力を開始することができます。

00:14:37.000 --> 00:14:45.000
次に、私が作成したカスタムコントロールのフォーカスインタラクションを改善するために、さらにいくつかの成分を使用しましょう。

00:14:45.000 --> 00:14:48.000
この時点で、私は多くのレシピをカタログ化しました。

00:14:48.000 --> 00:14:58.000
それぞれを試してみると、どれがうまく出てきて、どれが再考が必要か、少なくとももう少し塩が必要かを思い出したいです。

00:14:58.000 --> 00:15:06.000
これを助けるために、私は料理の旅の高値と安値をキャプチャするために、絵文字でカスタムピッカーコントロールを構築しました。

00:15:06.000 --> 00:15:19.000
絵文字をタップして各レシピを評価できますが、キーボードナビゲーションのライフスタイルを送っている人として、タブキーでコントロールに集中し、矢印キーを使用して選択を変更できるようにしたいと思っています。

00:15:19.000 --> 00:15:22.000
それを実現させましょう。

00:15:22.000 --> 00:15:30.000
これが私の絵文字ピッカーの基本的な構造です:私が最初にする必要があるのは、コントロールを集中可能にすることです。

00:15:30.000 --> 00:15:34.000
引数なしで「フォーカス可能な」修飾子を追加することから始めます。

00:15:34.000 --> 00:15:43.000
これにより、Tabキーを押すとコントロールにフォーカス可能になりますが、他のボタンや同様のコントロールでは表示できない追加の動作に気付きます。

00:15:43.000 --> 00:15:51.000
たとえば、私のコントロールはクリックに焦点を当てますが、ボタンやセグメント化されたコントロールはそうではありません。

00:15:51.000 --> 00:15:55.000
これらのコントロールは、フォーカスするために「キーボードナビゲーション」を必要とします。

00:15:55.000 --> 00:15:57.000
私のもそうすべきです。

00:15:57.000 --> 00:16:03.000
その動作を取得するには、アクティベーションのためにフォーカス可能なコントロールを指定します。

00:16:03.000 --> 00:16:13.000
アクティベーションのためにフォーカス可能なコントロールは、クリック時にフォーカスせず、キーボードでフォーカスを受け取るには「キーボードナビゲーション」をオンにする必要があります。

00:16:13.000 --> 00:16:19.000
次に気づいたのは、macOSが私のコントロールの周りに描くフォーカスリングが長方形であることです。

00:16:19.000 --> 00:16:25.000
より洗練された外観のために、私はフォーカスリングがカプセル型の背景のパスをたどってほしい。

00:16:25.000 --> 00:16:32.000
フォーカスリングは常にビューのコンテンツ形状に従いますが、私の場合はデフォルトでは長方形です。

00:16:32.000 --> 00:16:39.000
「contentShape」修飾子を使用し、ビューを視覚的にクリップするために使用しているのと同じカプセル形状で渡します。

00:16:39.000 --> 00:16:45.000
私のコントロールがフォーカス可能になったので、次のステップはキー押下を処理させることです。

00:16:45.000 --> 00:16:50.000
左右の矢印キーを使って、選択した評価を変更できるようにしたいです。

00:16:50.000 --> 00:17:06.000
「onMoveCommand」修飾子を使用すると、Macキーボードで矢印キーが押されたときや、Apple TVリモコンで方向エッジがタップされたときなど、プラットフォームに適した移動コマンドに応答して実行するアクションを提供できます。

00:17:06.000 --> 00:17:15.000
システムは移動方向でアクションを呼び出すので、それに基づいて評価選択を左右に移動します。

00:17:15.000 --> 00:17:22.000
コントロールコンテンツは、アラビア語やヘブライ語などの右から左の言語を使用している人々のために水平に反転する必要があります。

00:17:22.000 --> 00:17:30.000
移動コマンドアクションが環境の「layoutDirection」を使用してこれを説明していることを確認してください。

00:17:30.000 --> 00:17:38.000
フォーカス動作を実装することの素敵なことの1つは、同じコントロールを取り、Apple Watchアプリで素晴らしい結果を得ることができるということです。

00:17:38.000 --> 00:17:47.000
watchOSのフォーカス入力を処理するには、「onMoveCommand」修飾子の代わりに「digitalCrownRotation」修飾子を使用します。

00:17:47.000 --> 00:17:56.000
そして、フォーカスがあるときに、isFocused環境値を使用して、コントロールの周りにおなじみの緑色の境界線を描きます。

00:17:56.000 --> 00:18:04.000
これらのいくつかの修飾子だけで、私は簡単なコントロールを取り、キーボードとデジタルクラウンのサポートを追加することができました。

00:18:04.000 --> 00:18:12.000
最後のレシピは、完成した結果を撮っていた写真を紹介するために構築してきたフォーカス可能なグリッドビューです。

00:18:12.000 --> 00:18:18.000
私はこれを怠惰なグリッドとして構築しており、すでにいくつかの選択動作を実装しています。

00:18:18.000 --> 00:18:24.000
したがって、画像をクリックすると選択され、ダブルクリックするとレシピの詳細ビューに移動します。

00:18:24.000 --> 00:18:28.000
今、私はそれがフォーカスインタラクションをどのように処理すべきかを考える必要があります。

00:18:28.000 --> 00:18:33.000
具体的には、Tabキーを押すときにグリッドをフォーカス可能にしたいです。

00:18:33.000 --> 00:18:41.000
集中したら、矢印キーで選択を更新し、Returnキーで選択したレシピの詳細に連れて行ってほしい。

00:18:41.000 --> 00:18:50.000
前に話した成分のいくつかと、キー押下を処理し、フォーカスがあるときにグリッドがどのように表示されるかをカスタマイズするために、いくつかの余分なものを使用します。

00:18:50.000 --> 00:18:55.000
前の例と同様に、最初のステップはグリッドを集中可能にすることです。

00:18:55.000 --> 00:18:58.000
この場合、インタラクションを指定する必要はありません。

00:18:58.000 --> 00:19:07.000
デフォルトでは、「キーボードナビゲーション」が有効になっているかどうかにかかわらず、グリッドはクリックし、キーボードを使用してタブするときにフォーカスされます。

00:19:07.000 --> 00:19:09.000
これはまさに私が欲しいものです。

00:19:09.000 --> 00:19:16.000
グリッドをフォーカス可能にしたので、システムは自動的にその周りにフォーカスリングを描画します。

00:19:16.000 --> 00:19:21.000
選択可能なコンテンツのコンテナの場合、その効果は冗長です。

00:19:21.000 --> 00:19:27.000
選択したレシピの周りに追加した色付きの境界線は、グリッドにフォーカスがあるかどうかをすでに伝えています。

00:19:27.000 --> 00:19:33.000
「focusEffectDisabled」修飾子を使用して、自動フォーカスリングをオフにすることができます。

00:19:33.000 --> 00:19:39.000
ビューが選択されている境界線やその他の指標には「SelectionShapeStyle」を使用します。

00:19:39.000 --> 00:19:52.000
選択したアクセントカラーに自動的に適応し、フォーカスがグリッドからサイドバーに移動するときのように、祖先ビューのどれもフォーカスがないと灰色に変わります。

00:19:52.000 --> 00:19:59.000
次にやりたいことは、選択したレシピをお気に入りとしてマークするためのメインメニューコマンドを接続することです。

00:19:59.000 --> 00:20:08.000
これにはFocused Values APIを使用し、必要に応じてメニューコマンドを更新するために、選択範囲にバインディングを渡します。

00:20:08.000 --> 00:20:12.000
矢印キーの選択をサポートするには、onMoveCommand修飾子を使用します。

00:20:12.000 --> 00:20:19.000
そして、システムが呼び出すと、移動方向を使用してグリッドの選択したレシピを更新します。

00:20:19.000 --> 00:20:24.000
最後に、選択に基づいて行動し、Returnキーが押されたときにそれに移動する方法が欲しいです。

00:20:24.000 --> 00:20:31.000
macOS SonomaとiOS 17で新しい「onKeyPress」修飾子でこれを行うことができます。

00:20:31.000 --> 00:20:41.000
この修飾子は、キーまたは文字のセットと、接続されたハードウェアキーボードでこれらのキーのいずれかが押されたときに実行するアクションを取ります。

00:20:41.000 --> 00:20:47.000
アクションがプレスを処理しなかった場合は「無視」を返し、ディスパッチはビュー階層を続行する必要があります。

00:20:47.000 --> 00:21:00.000
また、ボーナス機能として、「onKeyPress」を使用してタイプ選択を実装するので、名前の最初の文字を入力してレシピをすばやくスクロールして選択できます。

00:21:00.000 --> 00:21:08.000
macOSのグリッドに素晴らしいキーボード体験を構築したので、tvOSのグリッドに目を向けましょう。

00:21:08.000 --> 00:21:22.000
tvOSでは、グリッド内の各セルはフォーカス可能であるため、フォーカスがリモコンで異なる方向に移動すると、その方向のセルがフォーカスになり、他のセルよりも視覚的に上昇します。

00:21:22.000 --> 00:21:27.000
システムは、ボタンとナビゲーションリンクでデフォルトで「リフト」ホバー効果を使用します。

00:21:27.000 --> 00:21:33.000
そして、この効果は、テキストを含むビューや、テキストと画像を組み合わせたビューに適しています。

00:21:33.000 --> 00:21:38.000
しかし、これらのレシピ写真は別の効果の恩恵を受けるでしょう。

00:21:38.000 --> 00:21:45.000
tvOS 17の新機能で、フォーカス可能なビューにハイライトホバー効果を適用できます。

00:21:45.000 --> 00:21:56.000
この効果は、リモコンをスワイプすると、焦点を合わせたアイテムに遠近感シフトと鏡面の輝きを追加し、レシピのサムネイルのようなアートワークや写真によく似合います。

00:21:56.000 --> 00:22:01.000
そして、私のtvOSアプリのトップのチェリーとして、フォーカスセクションを追加します。

00:22:01.000 --> 00:22:08.000
グリッドはボタンのリストの横にあり、私はしばしばこれら2つのグループ間を移動する必要があります。

00:22:08.000 --> 00:22:11.000
アプリを使用すると、おなじみの問題に気づきます。

00:22:11.000 --> 00:22:22.000
フォーカスがグリッドの下の行の1つにある場合、フォーカスターゲットが互いに隣接していないため、左にスワイプしてカテゴリボタンを移動できません。

00:22:22.000 --> 00:22:28.000
レイアウトの全高みにまたがるフォーカスセクションにカテゴリリストを配置します。

00:22:28.000 --> 00:22:37.000
クレームブリュレから左にスワイプすると、予想通り、フォーカスがカテゴリに移動します。

00:22:37.000 --> 00:22:42.000
そして、グリッドは完成しました。

00:22:42.000 --> 00:22:44.000
ベリシモ！

00:22:44.000 --> 00:22:47.000
私はこのビデオで多くの分野をカバーしました。

00:22:47.000 --> 00:22:50.000
あなたの焦点成分を集めて、あなたが作ることができるものを見る時が来ました。

00:22:50.000 --> 00:22:56.000
キーボードナビゲーションを有効にして、macOSとiPadOSのアプリをテストします。

00:22:56.000 --> 00:23:00.000
デフォルトのフォーカスを最も有用な場所に配置します。

00:23:00.000 --> 00:23:07.000
フォーカスセクションでコントロールを整理して、不規則なレイアウトを通して動きを導くのに役立ちます。

00:23:07.000 --> 23:59:59.000
ありがとう、そしてどうぞ召し上がってください!

