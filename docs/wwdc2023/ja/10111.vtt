WEBVTT

00:00:00.000 --> 00:00:03.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
Raffael Hannemann:こんにちは、SwiftUIでGo Beyond the Windowへようこそ。

00:00:14.000 --> 00:00:20.000
私はラファで、アップルのエンジニアで、後に同僚のマークと合流します。

00:00:20.000 --> 00:00:33.000
今日は、xrOSのフルパワーを活用して、すでに知っているツールやフレームワークで真に没入感のある体験を生み出すのがいかに簡単かをお見せします。

00:00:33.000 --> 00:00:39.000
あなたはすでにiOS用のARアプリの開発から拡張現実に精通しているかもしれません。

00:00:39.000 --> 00:00:52.000
過去数年間で、iPhoneとiPad用の豊富なARアプリを作成するために、ARKitやRealityKitを含む多くのツールやフレームワークを導入し、拡張しました。

00:00:52.000 --> 00:01:05.000
これらのアプリは、インタラクティブなユーザーインターフェイスと仮想オブジェクトでユーザーの環境を増強することで、現実世界と想像力の境界線を曖昧にすることができます。

00:01:05.000 --> 00:01:15.000
今年は、xrOSの発売により、没入型体験から始めて、ARをまったく新しいレベルに引き上げます。

00:01:15.000 --> 00:01:24.000
これらの経験では、アプリケーションは、ウィンドウや3次元コンテンツを含むUIを周りのどこにでも表示します。

00:01:24.000 --> 00:01:29.000
周囲は目に見えるままであり、実際には経験の一部にもなります。

00:01:29.000 --> 00:01:39.000
アプリの要素を表面に固定し、仮想オブジェクトとエフェクトで現実世界を増強し、豊かにすることができます。

00:01:39.000 --> 00:01:46.000
そして、さらに一歩進んで、あなたのスペース全体をカバーする、完全に没入感のある体験があります。

00:01:46.000 --> 00:01:49.000
あなたのアプリは、あなたが見るものを完全に制御します。

00:01:49.000 --> 00:01:53.000
これがロックを解除するすべての可能性について考えてください。

00:01:53.000 --> 00:02:01.000
そして何よりも、このすべては、あなたがすでに慣れ親しんでいるツール、フレームワーク、パターンで可能です。

00:02:01.000 --> 00:02:06.000
そして、これの中心にあるのは、SwiftUIの没入型空間です。

00:02:06.000 --> 00:02:08.000
始めましょう。

00:02:08.000 --> 00:02:14.000
他のセッションでは、今年はSwiftUIに3次元を追加することを学びました。

00:02:14.000 --> 00:02:27.000
xrOSでウィンドウとボリュームを表示し、SwiftUIの使いやすい宣言パターンで3次元のユーザーインターフェイス要素を表示できます。

00:02:27.000 --> 00:02:33.000
ウィンドウとボリュームの両方で、その範囲内でコンテンツを表示できます。

00:02:33.000 --> 00:02:43.000
では、xrOSが提供する無限の空間を最大限に活用し、真に没入感のある体験を作りたい場合はどうなりますか?

00:02:43.000 --> 00:02:51.000
窓の境界を越えて頭の周りにアイテムを置き、その真ん中にいたいと思うかもしれません。

00:02:51.000 --> 00:02:55.000
そして、これが私たちがスペースを設計したものです。

00:02:55.000 --> 00:03:04.000
ウィンドウとボリュームの横にあるスペースは、xrOSでユーザーインターフェイスを表示するためのコンテナの一種です。

00:03:04.000 --> 00:03:10.000
このセッションでは、スペースと、それらを使用して没入型体験を作成する方法に焦点を当てます。

00:03:10.000 --> 00:03:16.000
まずSpaceを使い始めて、コンテンツを表示する方法を学びましょう。

00:03:16.000 --> 00:03:26.000
その後、マークは、スペースを管理し、スペースに直接起動し、スペースが許可するすべてのカスタマイズを説明します。

00:03:26.000 --> 00:03:30.000
では、始めて、いくつかのコードをチェックしてみましょう。

00:03:30.000 --> 00:03:33.000
私は宇宙探査に本当に興奮しています。

00:03:33.000 --> 00:03:44.000
他のセッションで取り組んできたワールドアプリを継続するために、太陽系を探索できるスペースでアプリを段階的に拡張します。

00:03:44.000 --> 00:03:49.000
Spacesは、Immersive Spaceと呼ばれるSwiftUIの新しいシーンタイプです。

00:03:49.000 --> 00:03:58.000
他のシーンタイプと同様に、アプリで没入型スペースを定義し、いつでも開いて閉じることができます。

00:03:58.000 --> 00:04:09.000
アプリ全体を1つのスペースのみで構成できますが、ウィンドウとボリュームの横に1つ以上のスペースを追加することで、既存のアプリを拡張することもできます。

00:04:09.000 --> 00:04:12.000
あなたのアプリは一度に1つのスペースを開くことができます。

00:04:12.000 --> 00:04:17.000
別のスペースを開く前に、まず現在のスペースを却下します。

00:04:17.000 --> 00:04:24.000
また、他のシーンタイプと同様に、ビュー階層をシーンの本文に配置します。

00:04:24.000 --> 00:04:32.000
SolarSystemをImmersiveSpaceに配置することで、クリッピング境界なしでレンダリングされます。

00:04:32.000 --> 00:04:36.000
少し時間を取って、これがどれほど簡単かを指摘しましょう。

00:04:36.000 --> 00:04:44.000
これら3つのラインだけで、私たちは太陽系の眺めを豊かで没入感のある体験にもたらしました。

00:04:44.000 --> 00:04:46.000
詳細を掘り下げてみましょう。

00:04:46.000 --> 00:04:54.000
スペースを開くと、このシーンを他のシーンタイプから際立たせるいくつかの特別な動作が可能になります。

00:04:54.000 --> 00:05:04.000
複数のアプリが並んで実行されている場合、それらはすべて同じスペースに一緒に表示されるため、これを共有スペースと呼んでいます。

00:05:04.000 --> 00:05:11.000
アプリが没入型スペースのシーンを表示すると、アプリは私たちがフルスペースと呼ぶものに入ります。

00:05:11.000 --> 00:05:15.000
その後、あなたのアプリはユーザーに表示される唯一のものになります。

00:05:15.000 --> 00:05:22.000
他のすべてのアプリケーションは、気を散らすことなくコンテンツを表示するためのスペースを作るために消えます。

00:05:22.000 --> 00:05:27.000
後で、スペースを閉じると、他のアプリが再び表示されます。

00:05:27.000 --> 00:05:33.000
没入型空間はシーンであるため、暗黙的に独自の座標系を定義します。

00:05:33.000 --> 00:05:40.000
したがって、スペースに置くものはすべて、スペース自身の起源に相対的に配置されます。

00:05:40.000 --> 00:05:48.000
そして、スペースの原点はユーザーの下にあり、スペースが最初に開いたときにユーザーの足の近くにあります。

00:05:48.000 --> 00:05:50.000
だから今、あなたは基本を知っています。

00:05:50.000 --> 00:05:54.000
先に進んで、あなたのスペースのコンテンツをどのように表示するかについて話しましょう。

00:05:54.000 --> 00:06:01.000
ImmersiveSpaceはシーンタイプなので、ビュー階層をその中に正しく配置します。

00:06:01.000 --> 00:06:11.000
ImmersiveSpaceは任意のSwift UIビューを取ることができ、クリッピング境界はありませんが、スペースは依然としてそのレイアウト境界内でコンテンツをレイアウトします。

00:06:11.000 --> 00:06:18.000
スペースに配置するものはすべて、すでに慣れ親しんでいるのと同じレイアウトシステムを使用します。

00:06:18.000 --> 00:06:25.000
しかし、あなたのスペースの起源はユーザーの足の近くにあるので、おそらくあなたのコンテンツをそこに置くだけではないでしょう。

00:06:25.000 --> 00:06:29.000
RealityViewについて話しましょう。

00:06:29.000 --> 00:06:41.000
SwiftUI、ARKit、RealityKitを最大限に活用したい場合は、新しいRealityViewの強力な機能と一緒にImmersiveSpaceを使用することをお勧めします。

00:06:41.000 --> 00:06:53.000
ImmersiveSpaceとRealityViewは密接に関連しており、優れた没入型体験を構築するために必要なすべての機能を提供するために特別に設計されています。

00:06:53.000 --> 00:07:05.000
たとえば、RealityViewには、ここに示すように、スターフィールドのロードと表示のためのアセットの非同期ロードのサポートが組み込まれています。

00:07:05.000 --> 00:07:11.000
しかし、非同期ロードの次に、没入型スペースシーンにRealityViewを置くと、さらに多くのことが可能になります。

00:07:11.000 --> 00:07:16.000
ARKitアンカーのRealityView内に要素を配置します。

00:07:16.000 --> 00:07:26.000
また、アプリは手とヘッドポーズデータにアクセスできるため、スペースが開いている間は、そのデータを使用してRealityView内にエンティティを配置できます。

00:07:26.000 --> 00:07:29.000
マークは後で何かかっこいいものを見せてくれるでしょう。

00:07:29.000 --> 00:07:32.000
座標空間に関するメモ。

00:07:32.000 --> 00:07:36.000
RealityViewは、コンテンツを表示するためにRealityKitを使用しています。

00:07:36.000 --> 00:07:45.000
したがって、RealityView内にエンティティを配置するときは、座標空間の向きはSwiftUIのレイアウトシステムとは異なることに注意してください。

00:07:45.000 --> 00:07:52.000
SwiftUIでは、y軸は下を指し、z軸はあなたを指しています。

00:07:52.000 --> 00:08:04.000
これはウィンドウ、ボリューム、没入型スペースに適用されますが、RealityKitでは、y軸は上向きです。

00:08:04.000 --> 00:08:07.000
RealityViewについては、取り上げるべきことがたくさんあります。

00:08:07.000 --> 00:08:14.000
すべての詳細については、ウォッチリストに「RealityKitで空間体験を構築する」を追加してください。

00:08:14.000 --> 00:08:17.000
では、コードを書いてみましょう。

00:08:17.000 --> 00:08:25.000
WorldApp、または少なくともその簡略化されたバージョンを使用し、没入型太陽系を段階的に追加します。

00:08:25.000 --> 00:08:28.000
ImmersiveSpaceを定義することから始めます。

00:08:28.000 --> 00:08:34.000
WindowGroupと同様に、識別子、値型、またはその両方を割り当てることができます。

00:08:34.000 --> 00:08:38.000
この場合、太陽識別子を割り当てます。

00:08:38.000 --> 00:08:42.000
後でこの識別子を使用してスペースを開きます。

00:08:42.000 --> 00:08:47.000
次に、太陽系ビューを宇宙に配置します。

00:08:47.000 --> 00:08:56.000
また、アプリのシンプルな標準ウィンドウを定義しましょう。これは、アプリが起動したときに太陽系を表示するためのコントロールで表示したいと考えています。

00:08:56.000 --> 00:09:00.000
これはワールドアプリが行うことと似ています。

00:09:00.000 --> 00:09:10.000
そこで、WindowGroupを使用して新しい起動ウィンドウを定義し、スペースを開くことを可能にするコントロールと一緒にいくつかの情報を追加します。

00:09:10.000 --> 00:09:13.000
そのコントロールはただのボタンです。

00:09:13.000 --> 00:09:18.000
クリックすると、タイトルを変更してスペースを開きます。

00:09:18.000 --> 00:09:25.000
ウィンドウを制御するために、SwiftUIはopenWindowとdis dismissWindow環境アクションを提供します。

00:09:25.000 --> 00:09:33.000
また、Immersive Spaceでは、新しいopenImmersiveSpaceを追加し、ImmersiveSpaceアクションを却下します。

00:09:33.000 --> 00:09:40.000
私たちは環境から2つの行動を得ます。

00:09:40.000 --> 00:09:46.000
その後、ボタンが呼び出されたときにこれらのアクションを使用できます。

00:09:46.000 --> 00:09:51.000
スペースを開くときは、先ほど定義した識別子を渡します。

00:09:51.000 --> 00:09:59.000
一度に1つのスペースしか開くことができないため、disamImmersiveSpaceアクションは議論を必要としません。

00:09:59.000 --> 00:10:03.000
このシステムは、一定の期間でスペースのインとアウトをアニメーション化します。

00:10:03.000 --> 00:10:11.000
これらの環境アクションは非同期であるため、アニメーションの完了に反応できます。

00:10:11.000 --> 00:10:20.000
Immersive Spaceを開くと失敗する可能性があり、openImmersiveSpaceは、呼び出しが失敗したか成功したかを結果で教えてくれます。

00:10:20.000 --> 00:10:25.000
適切なエラー処理があることを確認してください。

00:10:25.000 --> 00:10:32.000
最初に定義したアプリに戻ると、LaunchWindowをここに追加できます。

00:10:32.000 --> 00:10:35.000
私たちの2つのシーンの順番に注目してください。

00:10:35.000 --> 00:10:43.000
LaunchWindowはシーンリストの最初のものなので、SwiftUIはアプリの起動時に起動ウィンドウを表示します。

00:10:43.000 --> 00:10:49.000
イマーシブスペースは起動時には表示されませんが、ユーザーがボタンをクリックすると表示されます。

00:10:49.000 --> 00:10:53.000
シミュレーターでこれを実行しましょう。

00:10:53.000 --> 00:10:56.000
アプリが起動すると、起動ウィンドウが表示されます。

00:10:56.000 --> 00:11:07.000
そして、ボタンをクリックするだけで、太陽系が私たちのリビングルームに現れます。

00:11:07.000 --> 00:11:15.000
だから今、私たちは標準ウィンドウと太陽系を表示するスペースで構成されるマルチシーンアプリを定義しました。

00:11:15.000 --> 00:11:18.000
あなたはワールドアプリで使用されているモデルを見てきました。

00:11:18.000 --> 00:11:25.000
没入型アプリを構築するとき、あなたはきっとあなたのスペースに多くの詳細を持ついくつかの3Dアセットを表示したいと思うでしょう。

00:11:25.000 --> 00:11:33.000
アセットが完全にロードされ、アプリによってレンダリングされる準備が整うまでに時間がかかる可能性があることを覚えておいてください。

00:11:33.000 --> 00:11:45.000
最高のユーザーエクスペリエンスのために、3Dアセットを非同期にロードする新しいModel3DとRealityView APIを活用してください。

00:11:45.000 --> 00:11:52.000
このコードでは、モデルがまだロードされている間にテキストを表示し、何か問題が発生した場合に備えてエラーを表示します。

00:11:52.000 --> 00:12:00.000
そして今、マークはあなたの宇宙を管理する方法と、さらに良いことに、宇宙に打ち上げる方法を教えてくれます。

00:12:00.000 --> 00:12:01.000
マーク・マ:ありがとう、ラファ。

00:12:01.000 --> 00:12:09.000
先ほど実証したように、わずか数行のコードでImmersive SpacesをWorldアプリに統合するのは信じられないほど簡単でした。

00:12:09.000 --> 00:12:22.000
アプリを没入型体験に変えるには、シーンフェーズでシステムと一緒にスペースを管理し、スペースと他のシーンの収束を調整し、さまざまなスタイルで提示することも含まれます。

00:12:22.000 --> 00:12:28.000
他のSwiftUIシーンタイプと同様に、Immersive Spaceはシステムで処理される同じシーンフェーズをサポートしています。

00:12:28.000 --> 00:12:32.000
これはまた、あなたのスペースが常にSwiftUIのシーンフェーズの1つにあることを意味します。

00:12:32.000 --> 00:12:35.000
スペースを開くと、アクティブフェーズに移動します。

00:12:35.000 --> 00:12:39.000
そして、いつでも、それは非アクティブフェーズに変更される可能性があります。

00:12:39.000 --> 00:12:48.000
たとえば、システム定義の境界やシステムアラートが表示された場合、スペースとウィンドウは一時的に非表示になり、非アクティブフェーズに移動します。

00:12:48.000 --> 00:12:56.000
ユーザーがエクスペリエンスに再入力すると、スペースとウィンドウが表示され、シーンフェーズが再びアクティブになるように更新されます。

00:12:56.000 --> 00:13:01.000
私たちのワールドアプリでは、非アクティブなシーンフェーズを処理するために数行の簡単なコードを追加することができます。

00:13:01.000 --> 00:13:07.000
宇宙の状態が変化したことを示すために、地球モデルを半分のサイズに縮小しましょう。

00:13:07.000 --> 00:13:11.000
また、コンテンツを復元するためにアクティブなフェーズを処理することを確認しましょう。

00:13:11.000 --> 00:13:16.000
そして、スペースはハードウェアまたはソフトウェアの手段を使用していつでも却下できることを覚えておいてください。

00:13:16.000 --> 00:13:19.000
では、シミュレーターでこれをチェックしてみましょう。

00:13:19.000 --> 00:13:24.000
私たちはスペースを開き、アプリが非アクティブなフェーズをどのように処理するかを実演します。

00:13:24.000 --> 00:13:30.000
たとえば、アラートが表示されたときにトリガーされる可能性があります。

00:13:30.000 --> 00:13:35.000
アラートがポップアップすると、以前のサンプルコードの結果、スペースのコンテンツがスケールで変更されたことに注意してください。

00:13:35.000 --> 00:13:41.000
そして、アラートを却下すると、スペースは縮小し、現在アクティブなフェーズに反応しました。

00:13:41.000 --> 00:13:48.000
SwiftUIは、これらのトランジションの処理とアニメーション化を本当に簡単で便利にします。

00:13:48.000 --> 00:13:53.000
スペースを管理するもう1つの素晴らしい方法は、他のウィンドウのコンテンツをスペースと統合することです。

00:13:53.000 --> 00:14:07.000
たとえば、メインウィンドウの横にアースモデルを再配置する場合は、没入空間座標系のウィンドウの位置を知る必要がありますが、両方のオブジェクトは独自の座標系を定義します。

00:14:07.000 --> 00:14:15.000
したがって、これを解決するために、SwiftUIはImmersive Spaceという名前の新しい座標空間を提供します。

00:14:15.000 --> 00:14:18.000
そして、それは没入型空間の座標系を表しています。

00:14:18.000 --> 00:14:24.000
この座標系にアクセスするには、ジオメトリリーダー内のウィンドウを3Dコンテキストにカプセル化します。

00:14:24.000 --> 00:14:34.000
次に、transformのような座標空間を取り込み、Immersive Spaceタイプを渡す既存のAPIを使用することで、新しい座標系でproxy.transformを取得できます。

00:14:34.000 --> 00:14:37.000
この変換を使用して、タップで地球の位置を更新します。

00:14:37.000 --> 00:14:40.000
シミュレーターでこれを実行しましょう。

00:14:40.000 --> 00:14:44.000
地球とメインウィンドウが見えるように、スペースを再開します。

00:14:44.000 --> 00:14:49.000
窓を少しずらして、地球を目の前に再配置したい。

00:14:49.000 --> 00:14:53.000
今、地球がタップされると、それは私たちが期待していた場所に配置されます。

00:14:53.000 --> 00:15:01.000
また、座標変換を使用すると、コンテンツを正確に配置し、スペースとウィンドウの間でアセットを移動するのは簡単です。

00:15:01.000 --> 00:15:13.000
座標変換を使用する他の時間には、SharePlayの没入型スペースが含まれます。ここでは、プライベート没入型スペースだけでなく、グループ没入型スペース全体でコンテンツの位置を管理できます。

00:15:13.000 --> 00:15:24.000
アプリがSharePlayとグループ没入型スペースをサポートしている場合、他の参加者が参加すると、システムはスペースの原点を空間テンプレートで定義された共有場所に移動する可能性があります。

00:15:24.000 --> 00:15:31.000
詳細については、セッション「空間SharePlayエクスペリエンスの構築」をご覧ください。

00:15:31.000 --> 00:15:40.000
私たちのワールドアプリは現在、シーンフェーズを処理し、他のウィンドウのコンテンツを結合することができますが、スペースが提供する完全な機能をまだ使用していません。

00:15:40.000 --> 00:15:44.000
それらをさらに素晴らしいものになるように、次にイマージョンスタイルを探ります。

00:15:44.000 --> 00:15:50.000
イマージョンスタイルは、スペースコンテンツがどのように周囲を乗っ取るかについてのさまざまなプレゼンテーションを提供します。

00:15:50.000 --> 00:15:58.000
混合スタイル、オンラインでのプログレッシブスタイル、またはあらゆる方向にあなたを取り巻く完全なスタイルと一緒にコンテンツを提示することができます。

00:15:58.000 --> 00:16:02.000
これらすべてのスタイルを利用するために、アプリを更新しましょう。

00:16:02.000 --> 00:16:06.000
アプリをもう一度開いて、没入型スペースを定義した場所に戻りましょう。

00:16:06.000 --> 00:16:12.000
現在、この空間は、デフォルトのものである混合浸漬スタイルで太陽系を提示しています。

00:16:12.000 --> 00:16:16.000
スタイルを変更するのは簡単で、ダイナミックでもあります。

00:16:16.000 --> 00:16:23.000
まず、ImmersionStyleタイプの新しい状態変数を追加し、スペースで開始したいデフォルト値を割り当てましょう。

00:16:23.000 --> 00:16:26.000
ここでミックススタイルを保ちましょう。

00:16:26.000 --> 00:16:32.000
次に、イマージョンスタイルシーン修飾子を使用し、スペースがサポートするスタイルのリストを定義します。

00:16:32.000 --> 00:16:38.000
現在のスタイルへの参照を持つために、状態変数をバインディングとして渡します。

00:16:38.000 --> 00:16:46.000
太陽系にバインディングを渡すと、現在のスタイルを読み取り、マップスタイルのいずれかに移行するように制御することもできます。

00:16:46.000 --> 00:16:54.000
このサンプルでは、太陽系をスケールアップするにつれて、別のスタイルに進むように、倍率ジェスチャーで移行します。

00:16:54.000 --> 00:17:01.000
これまでのところ、私たちはシミュレーターでWorldアプリを実行して、没入型スペースを持ち込むのがいかに簡単かを示しています。

00:17:01.000 --> 00:17:07.000
しかし、これらのスタイルが私たちの環境とどのように機能するかの本当に素晴らしい感覚を得るために、デバイスで私たちの経験を実行しましょう。

00:17:07.000 --> 00:17:14.000
そして後で、デバイス上の体験を本当に強化するさらに多くのカスタマイズを紹介します。

00:17:14.000 --> 00:17:19.000
デフォルトのスタイルでスペースを開くと、混合浸漬スタイルになります。

00:17:19.000 --> 00:17:25.000
このスタイルは素晴らしいですが、コンテンツにもう少し没頭して、いくつかの星を見たいと思うかもしれません。

00:17:25.000 --> 00:17:27.000
そのため、倍率のジェスチャーを実行できます。

00:17:27.000 --> 00:17:32.000
そして、コンテンツが大きくなるにつれて、最終的にスペースはプログレッシブスタイルに移行します。

00:17:32.000 --> 00:17:37.000
このスタイルは、パススルーと完全に没入型体験の架け橋です。

00:17:37.000 --> 00:17:43.000
目の前にあるポータル内の没入型スペースのコンテンツを、周囲と一緒に見ることができます。

00:17:43.000 --> 00:17:48.000
このスタイルはかなり没入感を感じますが、あなたを取り巻くものに気づくこともできます。

00:17:48.000 --> 00:17:55.000
これはまた、近くの人々とチャットしたり、快適に座る場所を知り、周囲と交流したりできることを意味します。

00:17:55.000 --> 00:18:01.000
そして、快適になったら、デジタルクラウンを回すことで、スタイルの没入感を高めます。

00:18:01.000 --> 00:18:03.000
それは本当にかっこよくない？

00:18:03.000 --> 00:18:06.000
今、あなたは宇宙飛行士のように銀河に浮かんでいます。

00:18:06.000 --> 00:18:11.000
また、周囲をもっと見たい場合は、デジタルクラウンを元に戻して没入感を減らしてください。

00:18:11.000 --> 00:18:18.000
これにより、コンテンツがプログレッシブスタイル内でどれほど没入型になるかをすばやく簡単に制御できます。

00:18:18.000 --> 00:18:21.000
しかし、おそらくあなたはいつも完全に没頭するのが好きです。

00:18:21.000 --> 00:18:27.000
これは、あなたを取り巻く、または即座に全く別の世界にあなたを運ぶ経験に最適です。

00:18:27.000 --> 00:18:32.000
これまでのところ、ジェスチャーに基づいてさまざまなスタイルに移行するのがいかに簡単かを学びました。

00:18:32.000 --> 00:18:41.000
完全な没入感に行くことも例外ではなく、スタイルバインディングを更新するために地球を再びスケールアップすると、それを経験します。

00:18:41.000 --> 00:18:46.000
異なるスタイル間の移行がどれほど簡単で無意味だったかに注目してください。

00:18:46.000 --> 00:18:48.000
今、宇宙は完全に没入型になりました。

00:18:48.000 --> 00:18:53.000
そして、SwiftUIでは、数行のコードしかかかりませんでした。

00:18:53.000 --> 00:19:05.000
そして、デジタルクラウンを押すことで、体験を離れる準備ができたらいつでもパススルーに戻ることができます。

00:19:05.000 --> 00:19:11.000
シーンの位相の変化に反応し、スタイルを制御することで、スペースを管理するさまざまな方法を実演しました。

00:19:11.000 --> 00:19:17.000
それでは、私たちのスペースを次のレベルに引き上げるために、いくつかの最終的な機能強化を追加しましょう。

00:19:17.000 --> 00:19:24.000
デバイスの空間コンピューティング機能により、スペースを簡単に強化して、さらにエキサイティングに感じることができます。

00:19:24.000 --> 00:19:33.000
それでは、スペースに直接起動したり、周囲に効果を追加したり、仮想の手など、いくつかのオプションを検討しましょう。

00:19:33.000 --> 00:19:37.000
これまでのところ、私たちのアプリでは、ボタンをクリックするだけでスペースを開くことができます。

00:19:37.000 --> 00:19:44.000
しかし、完全に没入型のゲームを持っている場合のように、アプリが起動したときに没入型体験を開始したい場合はどうなりますか?

00:19:44.000 --> 00:19:50.000
没入型スペースに直接起動するには、アプリのシーンマニフェストを設定する必要があります。

00:19:50.000 --> 00:19:55.000
ImmersiveSpaceアプリケーションの役割とイマージョンスタイルを設定するだけです。

00:19:55.000 --> 00:19:59.000
スペースのコンテンツを通常どおりに添付すると、すぐに開きます。

00:19:59.000 --> 00:20:05.000
ユーザーがスペースを閉じることを選択した場合は、アプリをウィンドウに戻すこともできます。

00:20:05.000 --> 00:20:12.000
次に、周囲の効果の設定により、パススルーを暗くして、スペースのコンテンツにさらに焦点を合わせることができます。

00:20:12.000 --> 00:20:17.000
スペースがプログレッシブスタイルに移行するときは、周囲を暗くしてもらいたいです。

00:20:17.000 --> 00:20:26.000
好ましいSurroundingEffects修飾子を暗く設定したので、太陽系が現れると、周囲は自動的に暗くなります。

00:20:26.000 --> 00:20:34.000
upperLimbVisibility修飾子を使用すると、パススルーが利用できないため、完全に没入感のあるスペースで手を隠すことができます。

00:20:34.000 --> 00:20:39.000
私たちの世界の経験のために、私たちは単に私たちのスペースを開くときに私たちの好みを偽に設定します。

00:20:39.000 --> 00:20:44.000
そして、そのようにして、上部のLimbVisibility設定を変更することができます。

00:20:44.000 --> 00:20:53.000
完全な出現スタイルで手を隠すことは、代わりに仮想の手を示すことができることを意味し、ワールドアプリでいくつかのスペースグローブを表示します。

00:20:53.000 --> 00:20:57.000
SpaceGlovesという新しいビューを作成することから始めましょう。

00:20:57.000 --> 00:21:03.000
次に、RealityViewを追加して、手袋をスペースでレンダリングできるようにします。

00:21:03.000 --> 00:21:08.000
次に、RealityViewにルートエンティティを作成し、エンティティを追加してレンダリングできるようにします。

00:21:08.000 --> 00:21:14.000
次に、アセットをエンティティにロードし、ルートの子として追加します。

00:21:14.000 --> 00:21:24.000
エンティティを正しく配置するには、ARKitとそのハンドトラッキングAPIを使用する必要があり、ハンドトラッキングシステムも開始する必要があります。

00:21:24.000 --> 00:21:29.000
私たちの次のステップは、資産が私たちの手に正しく固定されていることを確認することです。

00:21:29.000 --> 00:21:32.000
ハンドトラッキングアンカーの更新を確認する必要があります。

00:21:32.000 --> 00:21:37.000
そして次に、手のキラリティを確認します。

00:21:37.000 --> 00:21:43.000
次に、ハンドアセットの変換がアンカーと同じであることを確認します。

00:21:43.000 --> 00:21:49.000
この例では、資産がARKitが提供するものと同じ共同名であることを確認しました。

00:21:49.000 --> 00:21:57.000
このようにして、アンカースケルトンジョイント名を正しくマッピングすることができ、グローブエンティティは自動的に私たちのために固定されます。

00:21:57.000 --> 00:22:03.000
それでは、スペースが定義されている場所に戻り、SpaceGlovesビューを含めるようにしましょう。

00:22:03.000 --> 00:22:05.000
バーチャルハンドに必要なのはそれだけです。

00:22:05.000 --> 00:22:12.000
ARKitのカスタマイズと詳細な詳細については、「空間体験のためにARKitアプリを進化させる」をチェックしてください。

00:22:12.000 --> 00:22:17.000
では、これらのカスタマイズをデバイスで試してみましょう。

00:22:17.000 --> 00:22:23.000
世界体験が再び始まり、スペースはデフォルトのイマージョンスタイルで再び開きます。

00:22:23.000 --> 00:22:29.000
地球上で拡大ジェスチャーを使用することで、アプリはプログレッシブスタイルに移行します。

00:22:29.000 --> 00:22:34.000
スペースが開くと、コードは周囲を暗く変更します。

00:22:34.000 --> 00:22:41.000
Surrounding Effects APIを利用してパススルーを暗くすることで、さらに没頭した気分になりました。

00:22:41.000 --> 00:22:45.000
応募は簡単で、経験に集中するのに最適な方法です。

00:22:45.000 --> 00:22:51.000
これは今かなり没入型ですが、次のカスタマイズでさらに一歩進めることができます。

00:22:51.000 --> 00:23:03.000
以前のコードが示したように、完全な没入に移行すると、手は消え、ハンドトラッキングのおかげで手がある場所に仮想スペースグローブが現れます。

00:23:03.000 --> 00:23:15.000
ARKitでRealityViewを使用し、ハンドトラッキングを有効にすることで、仮想宇宙飛行士のように宇宙に打ち上げることができ、本当に素晴らしい気分です。

00:23:15.000 --> 00:23:24.000
いくつかの機能強化とカスタマイズだけで、Worldアプリを共有スペースを超えた完全に没入感のある体験に変えることができました。

00:23:24.000 --> 00:23:35.000
そして今、新しいImmersive Space APIを使用して、体験を簡単に作成し、さまざまなスタイルで披露し、可能なカスタマイズで創造的になるのはあなた次第です。

00:23:35.000 --> 00:23:44.000
これは、周囲を変革し、新しい没入型体験を作成するために必要なすべてのツールを提供する、強力で使いやすいAPIです。

00:23:44.000 --> 00:23:46.000
ご参加いただきありがとうございます。

00:23:46.000 --> 23:59:59.000
♪

