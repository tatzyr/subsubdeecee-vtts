WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:13.000
こんにちは、私の名前はマークで、SwiftUIのエンジニアです。

00:00:13.000 --> 00:00:20.000
SwiftUIを使って、飛行機から宇宙への旅にあなたを招待できることを嬉しく思います。

00:00:20.000 --> 00:00:35.000
SwiftUIが新しい次元でどのように機能するかを実証し、SwiftUIとRealityKitがシステムでどのように連携して信じられないほどの体験を可能にするかを示すために、Worldと呼ばれる私たちが構築したサンプルアプリに電力を供給する一握りのAPIについて話します。

00:00:35.000 --> 00:00:53.000
世界は、使い慣れたウィンドウから新しいボリュームまで、アプリケーションがシステムで取ることができるいくつかの異なるフォームを示し、制限された3D体験とフルスペースを可能にし、無制限の仮想コンテンツの表示を可能にします。

00:00:53.000 --> 00:01:15.000
このトークで議論するAPIのほとんどは、主に2Dウィンドウアプリに3Dのダッシュを追加するか、フルスペースを活用して没入型の3Dエクスペリエンスを作成するかにかかわらず、ボリュームをコンテナとして使用することに焦点を当てます。これは、アプリでSwiftUIを使用して3Dの領域を探索する素晴らしい方法を提供するからです。

00:01:15.000 --> 00:01:26.000
SwiftUIコンテンツの他のコンテナの詳細については、「空間コンピューティングのためにウィンドウアプリを昇格する」トークと「SwiftUIでウィンドウを超えて」トークを参照してください。

00:01:26.000 --> 00:01:45.000
ボリュームの基本をカバーしたら、ボリュームビューとレイアウトで3Dコンテンツを作成して配置する方法、SwiftUIビューを新しいRealityViewに統合する方法、そして最後に3Dジェスチャーですべてをまとめる方法について説明します。

00:01:45.000 --> 00:01:56.000
しかし、私たちが自分自身を先取りしすぎる前に、ボリュームが何であるか、そしてそれらが3Dの領域への第一歩を踏み出すのにどのように役立つかについて話しましょう。

00:01:56.000 --> 00:02:00.000
世界はボリュームを使用して3Dコンテンツを強調しています。

00:02:00.000 --> 00:02:03.000
このシーンにはメインのガラス窓がありません。

00:02:03.000 --> 00:02:09.000
代わりに、3Dコンテンツをシーンに直接配置し、前面にコントロールパネルを配置します。

00:02:09.000 --> 00:02:14.000
しかし、3Dコンテンツはここでのショーのスターです。

00:02:14.000 --> 00:02:17.000
ボリュームは固定スケールのコンテナを提供します。

00:02:17.000 --> 00:02:26.000
あなたから配置された距離に基づいて動的にスケーリングするウィンドウとは異なり、ボリュームはどの距離でも同じサイズを維持します。

00:02:26.000 --> 00:02:33.000
ボリュームは水平に整列されており、あらゆる角度からの視聴をサポートします。

00:02:33.000 --> 00:02:43.000
ボリュームは、スペース全体を引き継ぐことなく、アプリに3Dコンテンツを表示するのに最適な方法であり、作成は非常に簡単です。

00:02:43.000 --> 00:02:52.000
ウィンドウグループなどの新しいシーンを作成するときに、新しい体積ウィンドウスタイルを使用するだけで、これらすべての機能が自動的に取得されます。

00:02:52.000 --> 00:02:57.000
ボリュームを設定したので、その中にコンテンツを入れましょう。

00:02:57.000 --> 00:03:14.000
それを支援するために、RealityKitはModel3Dと呼ばれる新しいAPIを提供しています。これは、USDZなどの豊富な3Dアセットを簡単にロードできるSwiftUIビューであり、アセットの読み込みライフサイクルのさまざまな部分を処理するフェーズを提供します。

00:03:14.000 --> 00:03:18.000
Model3DはAsyncImageのカウンターパートと考えてください。

00:03:18.000 --> 00:03:24.000
アプリをスムーズに実行しながら、複雑なジオメトリをロードするすべての作業を処理します。

00:03:24.000 --> 00:03:30.000
Model3Dを使って、ワールドアプリの他のモデルの1つである月を表示しましょう。

00:03:30.000 --> 00:03:38.000
今、私はすでに私のプロジェクトにmoon USDZファイルを追加し、その名前をModel3Dイニシャライザに渡すことができます。

00:03:38.000 --> 00:03:42.000
これで、モデルのフェーズを処理できます。

00:03:42.000 --> 00:03:44.000
さて、これは月の位相ではありません。

00:03:44.000 --> 00:03:52.000
実際には資産のロードステータスを示しており、切り替えることができるいくつかの異なる状態があります。

00:03:52.000 --> 00:04:00.000
モデルが読み込まれる前に、コンテンツがまだ準備ができていないことをユーザーに示すテキストまたは別のUIを表示できます。

00:04:00.000 --> 00:04:05.000
ここで進行状況ビューを使用します。

00:04:05.000 --> 00:04:14.000
モデルの読み込みに失敗した場合、エラーのローカライズされた説明を使用してエラーメッセージを表示できます。

00:04:14.000 --> 00:04:22.000
そして、モデルが成功すれば、私のUIでそれを使用することができます。

00:04:22.000 --> 00:04:32.000
画像と同様に、サイズ変更可能な修飾子を使用して、モデルが利用可能なスペースに応じてサイズ変更できることをレイアウトシステムに伝える必要があります。

00:04:32.000 --> 00:04:41.000
そして、モデルを利用可能なスペースに収めたいので、scaledToFit修飾子を使用します。

00:04:41.000 --> 00:04:45.000
今、私のアプリに非同期に読み込まれる月があります。

00:04:45.000 --> 00:04:49.000
SwiftUIでより多くの3D機能を探求するために、この例に基づいて構築し続けましょう。

00:04:49.000 --> 00:04:54.000
Worldアプリに登場する他のモデルのいくつかを調べてみましょう。

00:04:54.000 --> 00:04:57.000
私はそれらをすべて一度に一種のディスプレイで見せたい。

00:04:57.000 --> 00:05:03.000
USDZファイルの表示を処理するために書いたばかりのMoonViewを再利用することができます。

00:05:03.000 --> 00:05:07.000
名前を変更しましょう。

00:05:07.000 --> 00:05:11.000
そして、読み込むためにUSDZファイルの名前を渡します。

00:05:11.000 --> 00:05:14.000
これで、ハードコードされたムーンストリングを置き換えることができます。

00:05:14.000 --> 00:05:19.000
では、天体を表すデータ構造を作りましょう。

00:05:19.000 --> 00:05:23.000
それぞれに名前とサイズを付けます。

00:05:23.000 --> 00:05:30.000
私のプロジェクトにあるいくつかの異なるオブジェクトをリストアップします：地球、月、太陽。

00:05:30.000 --> 00:05:35.000
これで、ForEachでHStackに各オブジェクトを表示できます。

00:05:35.000 --> 00:05:43.000
オブジェクトごとに、オブジェクトの名前を使用して作成した新しいCelestialObjectViewを使用できます。

00:05:43.000 --> 00:05:53.000
オブジェクトサイズを使用してフレーム修飾子を使用して、各モデルのサイズを変更しましょう。

00:05:53.000 --> 00:05:58.000
私たちのモデルは正面から見ると素晴らしく見えますが、私たちは3Dであることを覚えておいてください。

00:05:58.000 --> 00:06:07.000
視点の変化は、私たちのオブジェクトが後ろ向きに整列していることを明らかにし、まるでバウンディングボックスが3つすべての背後にある平面にフラッシュされているかのように。

00:06:07.000 --> 00:06:11.000
これは、SwiftUIの3Dコンテンツのデフォルトのアライメントです。

00:06:11.000 --> 00:06:18.000
それを変更したい場合は、このようにフレーム深度修飾子で使用する深度アライメントを指定できます。

00:06:18.000 --> 00:06:27.000
深さに使用するオブジェクトのサイズを渡し、モデルの前面を背面ではなく整列するように指定できます。

00:06:27.000 --> 00:06:34.000
今では、すべてのビューが代わりに前面を揃えています。

00:06:34.000 --> 00:06:36.000
今、私は各オブジェクトにラベルを付けたい。

00:06:36.000 --> 00:06:41.000
各Model3Dにオーバーレイを与えることで、それを行うことができます。

00:06:41.000 --> 00:06:50.000
内部では、常に読みやすいように、ガラスの背景効果でテキストラベルを作ります。

00:06:50.000 --> 00:07:00.000
また、これらのラベルをモデルの下部に揃えるようにするので、コンテンツをブロックしません。

00:07:00.000 --> 00:07:04.000
ディスプレイは今のところ素晴らしく見えますが、少し静的な感じがします。

00:07:04.000 --> 00:07:09.000
最後に、ジオメトリ効果へのSwiftUIの新しい追加のいくつかを探りましょう。

00:07:09.000 --> 00:07:17.000
TimelineViewを使用して、時間の変更をアニメーション化できます。

00:07:17.000 --> 00:07:22.000
今、私は新しいRotation3DEffectを使用して私たちのビューにいくつかのスピンを与えます。

00:07:22.000 --> 00:07:31.000
私は1つを作り、スケールファクターで現在の日付に基づいて角度を与えます。

00:07:31.000 --> 00:07:36.000
そして、オブジェクトをy軸の周りを回転させます。

00:07:36.000 --> 00:07:40.000
そして、ちょうどそのように、私たちはオブジェクトを回転させています。

00:07:40.000 --> 00:07:45.000
Model3Dは、ビュー階層に単純なアセットをロードして表示するのに最適です。

00:07:45.000 --> 00:07:56.000
しかし、より複雑な3Dモデル、シーン、または経験のために、RealityViewはアプリでRealityKitの力を解き放つSwiftUIのエントリーポイントです。

00:07:56.000 --> 00:08:05.000
そして実際、WorldアプリはRealityViewを使用して、RealityKit Entity-Componentシステムを使用して、より複雑な視覚化を分解します。

00:08:05.000 --> 00:08:14.000
これにより、個々のモデルや、照明や軌道パスなどの高度なレンダリング効果をレンダリングできます。

00:08:14.000 --> 00:08:20.000
新しいRealityViewのおかげで、SwiftUIとRealityKitはプラットフォーム上で密接に関連しています。

00:08:20.000 --> 00:08:31.000
RealityViewとRealityKitの新しい機能の詳細については、「RealityKitで空間体験を構築する」と「RealityKitで空間コンピューティングアプリを強化する」を参照してください。

00:08:31.000 --> 00:08:39.000
とりあえず、新しい添付ファイルAPIを使用して、RealityView内のSwiftUIを最大限に活用する方法について話しましょう。

00:08:39.000 --> 00:08:46.000
添付ファイルを使用すると、タグ付きSwiftUIビューをRealityView内で使用できるエンティティとペアリングできます。

00:08:46.000 --> 00:08:56.000
添付ファイルは、注釈を追加したり、特定のエンティティに関連するアフォーダンスを編集したりするのに最適です。

00:08:56.000 --> 00:09:02.000
SwiftUIでCanvas APIを使用したことがあるなら、添付ファイルはおそらく身近に感じるでしょう。

00:09:02.000 --> 00:09:07.000
添付ファイルとの主な違いは、スナップショットだけでなく、ライブビューであることです。

00:09:07.000 --> 00:09:13.000
これは、状態の変更に応答し、アニメーションを実行し、ジェスチャーを処理できることを意味します。

00:09:13.000 --> 00:09:22.000
世界中の私のお気に入りの場所を追跡するいくつかのマーカーを配置できる追加機能を追加して、ワールドアプリ内の添付ファイルを探索しましょう。

00:09:22.000 --> 00:09:31.000
地球ビューでは、私のお気に入りの場所の配列を追跡する州を作成し、それぞれに名前と場所があります。

00:09:31.000 --> 00:09:36.000
場所ごとに、その名前のテキストを作成できます。

00:09:36.000 --> 00:09:41.000
そして、私はそれが常に読みやすいようにガラスの背景効果を与えることができます。

00:09:41.000 --> 00:09:47.000
そして今、後でRealityViewで参照できるようにタグを付けます。

00:09:47.000 --> 00:09:55.000
このタグは任意のハッシュ可能な値にすることができますが、各場所に追加した一意の識別子を使用します。

00:09:55.000 --> 00:10:01.000
これで、私が指定したタグを使用して、各添付ファイルビューをホストするエンティティを検索できます。

00:10:01.000 --> 00:10:20.000
このエンティティをRealityViewコンテンツに追加できます。

00:10:20.000 --> 00:10:26.000
そして、lookAt関数を使用して、地球の表面に沿ってラベルを配置し、方向付けすることができます。

00:10:26.000 --> 00:10:39.000
私たちは今、いくつかの興味深い場所を特定しました。

00:10:39.000 --> 00:10:43.000
しかし、まだこのアプリにあまり執着しないようにしましょう。

00:10:43.000 --> 00:10:47.000
それを次のレベルに引き上げる方法について、もう少しアイデアがあります。

00:10:47.000 --> 00:10:55.000
だから、今、私たちは3Dコンテンツを配置し、添付ファイルを使用してRealityView内でSwiftUIを最大限に活用する方法を知っています。

00:10:55.000 --> 00:10:59.000
それでは、このすべてのコンテンツと対話する方法について話しましょう。

00:10:59.000 --> 00:11:07.000
このプラットフォームは、あなたがすでに慣れ親しんでいるジェスチャーを、手と目をサポートし、新しいトラックパッドの仕組みを備えた3次元にもたらします。

00:11:07.000 --> 00:11:12.000
これらの新機能を使って、ワールドアプリの進捗状況を拡張しましょう。

00:11:12.000 --> 00:11:16.000
私たちは「お気に入りの場所」の拡張機能でかなり良いことをしています。

00:11:16.000 --> 00:11:21.000
しかし、私たちが計画した場所の数に満足していないと思います。

00:11:21.000 --> 00:11:26.000
地球上のタップジェスチャーを使って、もう少し追加する方法を作りましょう。

00:11:26.000 --> 00:11:32.000
しかし、それに飛び込む前に、入力用にエンティティを設定する方法について話しましょう。

00:11:32.000 --> 00:11:36.000
RealityViewをコンテンツで設定しているとしましょう。

00:11:36.000 --> 00:11:41.000
ここに私はすでに地球のモデルを追加しました。 

00:11:41.000 --> 00:11:47.000
エンティティ階層には、RealityView内で入力を受信するためにInputTargetComponentが必要です。

00:11:47.000 --> 00:11:56.000
コンポーネントがエンティティに追加されている場合、特に指定がない限り、そのエンティティのすべての子孫も入力を受け取ることができます。

00:11:56.000 --> 00:12:03.000
RealityKitでは、CollisionComponentはエンティティのインタラクティブ領域の形状を定義するために使用されます。

00:12:03.000 --> 00:12:09.000
地球モデルに球体を使用して、その表面に正確な相互作用点を取得しましょう。

00:12:09.000 --> 00:12:15.000
これは、エンティティがRealityView内でSwiftUIジェスチャーを処理できるようにするために必要なすべてです。

00:12:15.000 --> 00:12:23.000
この時点で、RealityViewにSpatialTapGestureを追加できます。

00:12:23.000 --> 00:12:35.000
しかし、RealityKitのコンテンツでSwiftUIジェスチャーをさらに簡単に使用できるように、特にearthEntityをターゲットにするために使用できるtargetedToEntityという新しいジェスチャー修飾子を追加しました。

00:12:35.000 --> 00:12:46.000
このエンティティまたはその子孫の1つでタップが発生しない場合、ジェスチャーは失敗します。

00:12:46.000 --> 00:12:48.000
では、ジェスチャー値を処理しましょう。

00:12:48.000 --> 00:12:59.000
SpatialTapGestureには新しいlocation3Dプロパティがあり、地球の表面に正確なタップポイントを取得できます。

00:12:59.000 --> 00:13:11.000
3Dの場所は、RealityViewのローカルSwiftUI座標空間にあり、メートルではありません。

00:13:11.000 --> 00:13:19.000
新しいラベルを配置する場所を把握するには、その場所をRealityViewのシーンに変換する必要があります。

00:13:19.000 --> 00:13:27.000
targetedToEntity修飾子は、ジェスチャーの値自体にいくつかの座標空間変換ヘルパーを追加することで、これを非常に簡単にします。

00:13:27.000 --> 00:13:33.000
それを使用して、SwiftUIローカル空間からシーンの座標空間に変換できます。

00:13:33.000 --> 00:13:38.000
最後に、先ほど計算した場所を使用して、新しい場所のデータを追加できます。

00:13:38.000 --> 00:13:59.000
また、ラベルが地球の表面の少し上に浮かぶように、場所を少しだけ拡大します。

00:13:59.000 --> 00:14:04.000
私たちは今、タップするだけで、より多くのお気に入りの場所を地球に追加する方法があります。

00:14:04.000 --> 00:14:09.000
しかし、今、私たちは問題を抱えています:私たちはより多くの場所を発見する必要があります!

00:14:09.000 --> 00:14:14.000
これを行うには、世界中のよりエキサイティングなスポットを選ぶのに役立つ衛星を打ち上げましょう。

00:14:14.000 --> 00:14:23.000
地球に衛星モデルを追加する1つの方法は、RealityKitを使用してモデルをロードすることですが、私たちが学んだ他のテクニックのいくつかを使ってみましょう。

00:14:23.000 --> 00:14:29.000
Model3Dを添付ファイルとして追加できます。

00:14:29.000 --> 00:14:37.000
フレームを指定すると、衛星モデルのサイズを合理的なサイズに簡単に変更できます。

00:14:37.000 --> 00:14:45.000
また、RealityViewで参照できるように、モデルにタグを付けます。

00:14:45.000 --> 00:14:53.000
ラベルと同じように、RealityViewにモデルを追加する必要があります。

00:14:53.000 --> 00:15:01.000
それでは、衛星のスケール、回転、ポジショニングを定義できる3D変換を返すジェスチャーを定義しましょう。

00:15:01.000 --> 00:15:13.000
DragGestureを使ってドラッグすることから始めます。

00:15:13.000 --> 00:15:19.000
ドラッグジェスチャーから変換するには、マップを使用します。

00:15:19.000 --> 00:15:24.000
DragGestureには、3Dで操作を処理するためのいくつかの新しいプロパティがあります。

00:15:24.000 --> 00:15:30.000
DragGestureの新しいtranslation3Dプロパティを使用して、開始してからドラッグがどれだけ移動したかを取得できます。

00:15:30.000 --> 00:15:38.000
今、私は変換を作成します。

00:15:38.000 --> 00:15:44.000
翻訳を初期化子に渡して、地図から返すことができます。

00:15:44.000 --> 00:15:52.000
今、私はちょうど私の衛星を変換するために書いた私たちの操作ジェスチャーを使用することができます。

00:15:52.000 --> 00:15:57.000
更新修飾子を使用して、ジェスチャーがアクティブな時期を追跡します。

00:15:57.000 --> 00:16:15.000
この状態を使用して、相互作用中にすべてのラベルを縮小して、地球の視界を遮らないようにすることができます。

00:16:15.000 --> 00:16:25.000
ジェスチャーが失敗した場合、私のジェスチャー状態が自動的にリセットされることを保証するので、私が持っている一時的なジェスチャー状態を追跡するために更新を使用することが重要です。

00:16:25.000 --> 00:16:33.000
ジェスチャー値が変更されたら、状態の新しい変換を設定し、オフセット修飾子を使用して衛星モデルを配置できます。

00:16:33.000 --> 00:16:41.000
また、春のアニメーションを使用して変換の変更をアニメーション化して、衛星を手放すと元の場所に戻します。

00:16:41.000 --> 00:16:49.000
今、私たちは衛星をドラッグすることができます。

00:16:49.000 --> 00:16:53.000
これは素晴らしいスタートですが、これをもっと詳しく見る必要があります。

00:16:53.000 --> 00:16:57.000
すべてが接続されたので、スケーリングアクションを追加しましょう。

00:16:57.000 --> 00:17:05.000
このために、ドラッグと同時に認識するMagnifyGestureを追加します。

00:17:05.000 --> 00:17:19.000
また、ユーザーの手の制約のない3D回転を測定できる新しいRoateGesture3Dも追加します。

00:17:19.000 --> 00:17:26.000
これらの新しい値を変換に接続し、最後にエンティティの回転とスケールを更新する必要があります。

00:17:26.000 --> 00:17:47.000
これにはrotation3DEffectとscaleEffectを使用します。

00:17:47.000 --> 00:17:54.000
そして、私たちはそれを持っています!

00:17:54.000 --> 00:17:59.000
衛星エンティティを自由にドラッグ、スケーリング、回転できるようになりました。

00:17:59.000 --> 00:18:02.000
私たちの衛星は航海の準備ができているように見えます。

00:18:02.000 --> 00:18:14.000
私たちが追加したジェスチャーは、手との直接的な相互作用、間接的なピンチ、トラックパッド、アクセシビリティ機能など、あなたが期待するすべての入力デバイスとモードで動作します。

00:18:14.000 --> 00:18:24.000
使い慣れたSwiftUIジェスチャーと、新しいターゲットToEntity修飾子を使用すると、複雑なエンティティ階層内でインタラクションをすばやく構築できます。

00:18:24.000 --> 00:18:33.000
私たちは今、私たちの衛星で地球を探索する準備ができていますが、今、あなたのアプリでSwiftUIの新しい3D機能を探索する時が来ました。

00:18:33.000 --> 00:18:41.000
ボリュームやフルスペースなどの新しいシーンタイプでは、アプリケーションがまったく新しい方法で何になるかを検討できます。

00:18:41.000 --> 00:18:55.000
SwiftUIの強力なレイアウトとレンダリングシステムは、SwiftUIをiOS、macOS、tvOS、watchOSだけでなく、このまったく新しいプラットフォームでアプリを構築する強力な方法にするために拡張されました。

00:18:55.000 --> 00:19:03.000
新しい添付ファイルAPIは、SwiftUIビューを3Dシーンに統合する素晴らしい新しい機会を開きます。

00:19:03.000 --> 00:19:13.000
そして最後に、SwiftUIでおなじみの強力なジェスチャーを使用して、人々に伝える物語を手のひらにまとめる方法を模索しました。

00:19:13.000 --> 00:19:19.000
SwiftUIとRealityKitのおかげで、2D飛行機の境界を越えてエキサイティングな旅をすることができます。

00:19:19.000 --> 00:19:21.000
そして、私たちはまだ始まったばかりです。

00:19:21.000 --> 00:19:23.000
プラットフォームへようこそ!

00:19:23.000 --> 23:59:59.000
♪

