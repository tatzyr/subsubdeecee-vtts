WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:23.000
スコット：こんにちは、仮想化チームのスコット・ミオニスです。今日は、macOS Sonomaの機能がどのように仮想化でシームレスな体験を生み出すことができるかについて説明します。

00:00:23.000 --> 00:00:29.000
仮想化フレームワークを使用すると、仮想マシンを設定、管理、実行できます。

00:00:29.000 --> 00:00:35.000
macOS Sonomaでは、仮想MacとLinux仮想マシンはこれまで以上に強力です。

00:00:35.000 --> 00:00:41.000
それらはより使いやすく、新しい構成オプションにより、高度にカスタマイズ可能です。

00:00:41.000 --> 00:00:45.000
これを可能にする機能がたくさんあります。 たくさんの機能があります。

00:00:45.000 --> 00:00:51.000
このセッションでは、いくつかの重要な項目と、それらをアプリケーションで活用する方法を探りましょう。

00:00:51.000 --> 00:00:58.000
まず、仮想マシンの新しいワークフローとユーザーエクスペリエンスの改善。

00:00:58.000 --> 00:01:02.000
次に、新しいストレージとキーボードの設定オプション。

00:01:02.000 --> 00:01:10.000
そして最後に、Rosetta 2がLinux仮想マシンでx86_64アプリケーションをさらに高速に実行する方法。

00:01:10.000 --> 00:01:15.000
仮想マシンで作業する新しい方法をいくつか掘り下げてみましょう。

00:01:15.000 --> 00:01:19.000
2つの強力な新機能について説明します。

00:01:19.000 --> 00:01:21.000
まず、サイズ変更可能なディスプレイです。

00:01:21.000 --> 00:01:28.000
実行時にサイズを変更してウィンドウを埋める仮想マシン用の新しい表示オプション。

00:01:28.000 --> 00:01:31.000
次に、仮想マシンの保存と復元です。

00:01:31.000 --> 00:01:38.000
後で再開できるように、実行中の仮想マシンをディスクにシリアライズするメカニズム。

00:01:38.000 --> 00:01:41.000
サイズ変更可能なディスプレイから始めましょう。

00:01:41.000 --> 00:01:46.000
画面サイズは、仮想Macでの作業の大きな部分を占めています。

00:01:46.000 --> 00:01:57.000
サイズ変更可能なディスプレイを使用すると、仮想マシンは画面の解像度を動的に調整してウィンドウを埋め、スペースを最も効率的に利用します。

00:01:57.000 --> 00:02:00.000
これをコードに入れましょう。

00:02:00.000 --> 00:02:09.000
独自のアプリケーションでサイズ変更可能なディスプレイを使用するには、まずVZVirtualMachineViewを初期化します。

00:02:09.000 --> 00:02:17.000
ディスプレイのサイズを変更可能にするには、新しい「automaticallyReconfiguresDisplay」プロパティをtrueに設定します。

00:02:17.000 --> 00:02:19.000
そして、それだけです!

00:02:19.000 --> 00:02:26.000
VZVirtualMachineViewのサイズを変更すると、仮想マシンに表示サイズを調整するように自動的に指示されます。

00:02:26.000 --> 00:02:33.000
また、ディスプレイを固定したままにしたい場合は、このプロパティはデフォルト値のままです。

00:02:33.000 --> 00:02:38.000
次に、仮想マシンの保存と復元について話し合いましょう。

00:02:38.000 --> 00:02:42.000
仮想マシンを停止することは、VMの電源を切ることを意味します。

00:02:42.000 --> 00:02:46.000
仮想マシンを起動することは、コールドブートを行うことを意味します。

00:02:46.000 --> 00:02:52.000
しかし、Macで作業するとき、ほとんどのアプリケーションは作業中に進捗状況を保存します。

00:02:52.000 --> 00:02:56.000
仮想マシンにも同じことが言えます。

00:02:56.000 --> 00:03:02.000
仮想マシンを実行していて、進歩を失うことなくそれを閉じたいとしましょう。

00:03:02.000 --> 00:03:09.000
仮想マシンをファイルに保存して、後で実行を再開できます。

00:03:09.000 --> 00:03:13.000
または、自分の仕事をバックアップしたいとしましょう。

00:03:13.000 --> 00:03:23.000
仮想マシンはいつでも保存でき、ディスクや補助ストレージなどの外部リソースを複製するようにします。

00:03:23.000 --> 00:03:31.000
そして、時間をさかのぼりたい場合は、仮想マシンを元の状態に戻すことができます。

00:03:31.000 --> 00:03:33.000
この機能で多くのことが可能になります。

00:03:33.000 --> 00:03:37.000
では、それを行動に移しましょう。

00:03:37.000 --> 00:03:46.000
私はmacOS Sonomaを実行しており、デスクトップには仮想Macがあり、仮想化サンプルアプリケーションでmacOS Sonomaも実行しています。

00:03:46.000 --> 00:03:50.000
そして、私はApple Storeへの次のエキサイティングな旅行のためにいくつかの研究をしています。

00:03:50.000 --> 00:03:57.000
もちろん、私はマップを開いていて、AirPodsの詳細についてはAppleのウェブサイトを閲覧しています。

00:03:57.000 --> 00:04:01.000
さて、仮想マシンの電源を切らずに休憩を取りたいです。

00:04:01.000 --> 00:04:07.000
そのため、アプリケーションを終了すると、仮想マシンを保存します。

00:04:07.000 --> 00:04:17.000
その後、アプリケーションを再起動すると、仮想マシンはすべてのタブを開いたまま、中断したところから動作を再開します。

00:04:17.000 --> 00:04:22.000
これを独自のアプリケーションに組み込む方法を探りましょう。

00:04:22.000 --> 00:04:26.000
仮想マシンを保存する前に、仮想マシンを一時停止します。

00:04:26.000 --> 00:04:32.000
これにより、仮想マシンは安定した状態になり、実行は中断されます。

00:04:32.000 --> 00:04:44.000
次に、新しいsaveMachineState APIを呼び出し、仮想マシンのすべてのランタイム状態を含む、指定したURLにファイルを書き込みます。

00:04:44.000 --> 00:04:48.000
後で実行し続けるために必要なものすべて。

00:04:48.000 --> 00:04:53.000
ディスクイメージなどの外部リソースは、別々にコピーする必要があります。

00:04:53.000 --> 00:04:59.000
仮想マシンを保存したので、復元しましょう。 復元しましょう。

00:04:59.000 --> 00:05:08.000
仮想マシンの状態を復元するには、同じ構成から新しいVZVirtualMachineを作成することから始めます。

00:05:08.000 --> 00:05:23.000
仮想マシンをコールドブートする仮想マシンを直接起動する代わりに、新しいrestoreMachineState APIを呼び出して、以前に保存されたファイルのURLを渡します。

00:05:23.000 --> 00:05:30.000
そして今、仮想マシンは以前とまったく同じ状態です。

00:05:30.000 --> 00:05:34.000
中断したところから実行を再開できます。

00:05:34.000 --> 00:05:41.000
以前の保存から仮想マシンを復元する場合、心に留めておくべきことがいくつかあります。

00:05:41.000 --> 00:05:46.000
まず、セーブファイルには仮想マシンのデータが含まれています。

00:05:46.000 --> 00:05:48.000
保護する必要があります。 は保護する必要があります

00:05:48.000 --> 00:05:55.000
これらのファイルは、可能な限り強力な保証を提供するためにハードウェアで暗号化されています。

00:05:55.000 --> 00:06:02.000
他のMacやユーザーアカウントは、他人のセーブファイルを読んだり、仮想マシンを復元したりすることはできません。

00:06:02.000 --> 00:06:10.000
また、今日保存されたファイルはバージョン管理されているため、将来的には新しい機能を追加することができます。

00:06:10.000 --> 00:06:21.000
ファイル形式が変更され、保存ファイルを復元できない場合、フレームワークは特定のエラーコードを返しますので、アプリケーションはそれを処理できます。

00:06:21.000 --> 00:06:28.000
これが起こると、ファイルを破棄し、仮想マシンを再起動すると、軌道に戻ります。

00:06:28.000 --> 00:06:33.000
次に、仮想マシンを構築する新しい方法をいくつか探りましょう。

00:06:33.000 --> 00:06:36.000
まず、ネットワークブロックデバイスです。

00:06:36.000 --> 00:06:41.000
これにより、ストレージデバイスをネットワーク経由で仮想マシンに接続できます。

00:06:41.000 --> 00:06:49.000
次は、virtioブロックデバイスの代替品であるNVMeコントローラデバイスのサポートです。

00:06:49.000 --> 00:07:00.000
そして最後に、Macキーボードは、GlobeキーのようなApple固有のキーを仮想マシンに直接マッピングすることで、仮想Macでの作業をより直感的にします。

00:07:00.000 --> 00:07:04.000
ネットワークブロックデバイスから始めましょう。

00:07:04.000 --> 00:07:13.000
仮想化フレームワークでは、ストレージは通常ローカルで提供され、同じMacでディスクイメージを読み書きします。

00:07:13.000 --> 00:07:21.000
しかし、macOS Sonomaでは、仮想化フレームワークはサーバーからリモートでストレージを提供できます。

00:07:21.000 --> 00:07:27.000
これを可能にするプロトコルは、ネットワークブロックデバイス、またはNBDです。

00:07:27.000 --> 00:07:30.000
それがどのように機能するかを掘り下げてみましょう。

00:07:30.000 --> 00:07:37.000
仮想化フレームワークは、NBDプロトコルのクライアント側を実装します。

00:07:37.000 --> 00:07:47.000
仮想マシンがディスクにアクセスすると、リクエストは同じ仕様に準拠したNBDサーバーに転送されます。

00:07:47.000 --> 00:07:55.000
必要なI/Oを行うと、NBDサーバーはデータで応答します。

00:07:55.000 --> 00:08:00.000
これは2つの理由で非常に柔軟です。

00:08:00.000 --> 00:08:11.000
まず、ストレージは、同じMac上、またはネットワーク上のリモートサーバー上のどこにでも常駐できるようになりました。

00:08:11.000 --> 00:08:25.000
第二に、ストレージは独自のサーバーによって管理されているため、カスタムイメージフォーマットでも物理ドライブでも、必要なカスタムI/Oを実装できます。

00:08:25.000 --> 00:08:29.000
これらはすべて、仮想マシンに完全に透過的です。

00:08:29.000 --> 00:08:32.000
これを設定する方法を見てみましょう。 

00:08:32.000 --> 00:08:40.000
仮想化フレームワークAPIでは、ストレージデバイスの初期化には2つの部分があります。

00:08:40.000 --> 00:08:43.000
まず、デバイスの種類を選択します。

00:08:43.000 --> 00:08:47.000
これは、仮想マシンに提示されるインターフェイスを定義します。

00:08:47.000 --> 00:08:55.000
そして、添付ファイルを選択すると、データがMacで実際にどのように表現されるかが選択されます。

00:08:55.000 --> 00:08:59.000
仮想マシンでは、組み合わせて組み合わせることができます。

00:08:59.000 --> 00:09:09.000
仮想化フレームワークは、virtioブロックデバイスやUSBマスストレージデバイスなどの仮想デバイスをサポートしています。

00:09:09.000 --> 00:09:25.000
また、これらのデバイスのいずれかでは、ディスクイメージ上のデータの読み取りと書き込みを行うディスクイメージアタッチメントや、NBDサーバー上のデータの読み取りと書き込みを行う新しいネットワークブロックデバイスアタッチメントなどの添付ファイルを使用できます。

00:09:25.000 --> 00:09:29.000
このNBD添付ファイルをコードで設定しましょう。

00:09:29.000 --> 00:09:36.000
これをアプリケーションで使用するには、まずNBDサーバーを指すURLを指定します。

00:09:36.000 --> 00:09:42.000
これは、特定のサーバー上の特定のディスクを識別する特別なURLです。

00:09:42.000 --> 00:09:48.000
次に、このURLで新しいNBDストレージアタッチメントを初期化します。

00:09:48.000 --> 00:09:52.000
最後に、この添付ファイルでストレージデバイスを初期化します。

00:09:52.000 --> 00:09:56.000
この例では、virtioブロックデバイスを使用しています。

00:09:56.000 --> 00:10:02.000
ほとんどのユースケースでは、これは最もパフォーマンスの高いオプションである可能性が高い。

00:10:02.000 --> 00:10:08.000
ストレージはネットワーク経由で提供されているため、接続はいつでも失われる可能性があります。

00:10:08.000 --> 00:10:17.000
このような場合は、仮想マシンを一時停止したり、接続を再確立したりして、アクションを実行できます。

00:10:17.000 --> 00:10:29.000
この場合、接続の状態が変更されたときに通知されるカスタムデリゲートクラスを添付できるため、必要なコードを実行できます。

00:10:29.000 --> 00:10:37.000
仮想化フレームワークのストレージオプションに追加するのは、Non-Volatile Memory Express、またはNVMeです。

00:10:37.000 --> 00:10:48.000
NVMeは、多くのLinuxカーネルで有効になっている標準化された技術であり、そのアプリケーションはより具体的であるため、なぜそれを使用したいのかから始めましょう。

00:10:48.000 --> 00:10:59.000
大多数のユースケースでは、virtioブロックストレージによって提供される準仮想化インターフェイスは、最も簡単で最速の使用です。

00:10:59.000 --> 00:11:03.000
これは確かに仮想Macの場合です。

00:11:03.000 --> 00:11:09.000
しかし、一部のLinux仮想マシンにはvirtioドライバがありません。

00:11:09.000 --> 00:11:14.000
これらは、仮想環境で実行するように構築されていないカーネルである可能性があります。

00:11:14.000 --> 00:11:21.000
これらのカーネルがしばしば持っているのは、NVMeコントローラデバイスのドライバです。

00:11:21.000 --> 00:11:33.000
macOS Sonomaでは、NVMeコントローラデバイスは仮想化フレームワークによってエミュレートされ、より多くのオペレーティングシステムを仮想マシンで実行できます。

00:11:33.000 --> 00:11:40.000
NVMeを設定するには、仮想マシンを構築するときに新しいデバイスタイプを使用します。

00:11:40.000 --> 00:11:47.000
NVMeはLinux仮想マシン専用で、もちろんNBDもサポートしています。

00:11:47.000 --> 00:11:53.000
そして今、Macキーボードでは、Apple固有のキープレスが仮想Macによってキャプチャされます。

00:11:53.000 --> 00:12:00.000
つまり、Globeキーは、言語の切り替えや仮想Macでのエモーティングなどの機能に使用できます。

00:12:00.000 --> 00:12:04.000
では、ロゼッタ2について話しましょう。

00:12:04.000 --> 00:12:17.000
Linux仮想マシンのRosetta 2は、macOSで使用されているのと同じ技術であり、macOS Sonomaでは、パフォーマンスの向上により、Rosetta 2は仮想Linux環境でさらに高速に動作します。

00:12:17.000 --> 00:12:21.000
これがどのように可能かを掘り下げてみましょう。

00:12:21.000 --> 00:12:35.000
Rosetta 2は実行可能なページをオンデマンドで変換し、x86_64アプリケーション全体を翻訳するのを待つよりもはるかに速く実行可能ファイルを起動できます。

00:12:35.000 --> 00:12:45.000
しかし、これはまた、アプリケーションの実行中に、Rosetta 2が新しいコード領域を翻訳するために定期的に実行を停止しなければならないことを意味します。

00:12:45.000 --> 00:12:56.000
このオーバーヘッドは、コードを初めて翻訳する必要があるため、アプリケーションが実行を開始したときに最も顕著になる可能性があります。

00:12:56.000 --> 00:13:11.000
しかし、同じライブラリにリンクしたり、同じ実行可能ファイルを実行したりする別のアプリケーションを起動した場合、Rosetta 2は、そのコードがすでに翻訳されているにもかかわらず、すべての作業をやり直さなければなりません。

00:13:11.000 --> 00:13:15.000
この問題はキャッシュで解決できます。

00:13:15.000 --> 00:13:32.000
ライブラリまたは実行可能バイナリが翻訳されるたびに、Rosetta 2は結果をディスク上のキャッシュに保存し、それを必要とする他のアプリケーションと共有し、不必要な再翻訳のオーバーヘッドを回避します。

00:13:32.000 --> 00:13:41.000
macOS Sonomaでは、仮想化フレームワークは、新しいランタイムデーモンを使用してLinux仮想マシンにこの最適化をもたらします。

00:13:41.000 --> 00:13:46.000
これを設定するには、2つのステップが必要です。

00:13:46.000 --> 00:13:54.000
まず、Rosetta 2ランタイムと新しいキャッシュデーモン間の通信チャネルを設定するための新しいAPIがあります。

00:13:54.000 --> 00:13:58.000
そして、仮想マシンでデーモンを起動する必要があります。

00:13:58.000 --> 00:14:06.000
ロゼッタ2ランタイムと新しいデーモンは、仮想マシンで互いに一緒に実行されます。

00:14:06.000 --> 00:14:12.000
2つのプログラムは、接続を確立するために仮想化フレームワークと通信します。

00:14:12.000 --> 00:14:28.000
動的リンカリクエストは、とりわけ、キャッシュを管理するデーモンに転送され、Rosetta 2ランタイムは事前に翻訳されたバイナリをデーモンから直接取得し、再翻訳のオーバーヘッドを排除します。

00:14:28.000 --> 00:14:34.000
コンパイルやパッケージのインストールなど、エグゼクティブの重いタスクに最大の影響が見られます。

00:14:34.000 --> 00:14:40.000
仮想化フレームワークを使用すると、アプリケーションに非常に多くの優れたオプションをもたらすことができます。

00:14:40.000 --> 00:14:44.000
始める方法について話しましょう。 始める方法について話しましょう。

00:14:44.000 --> 00:14:51.000
仮想MacとLinux仮想マシンの両方にサイズ変更可能なディスプレイを使用することを検討してください。

00:14:51.000 --> 00:14:57.000
1行のコードでユーザーエクスペリエンスを大幅に向上させます。

00:14:57.000 --> 00:15:11.000
Macキーボードは、最新の仮想Macとシームレスに動作するように特別に設計されており、このデバイスで仮想Macを設定することは、ユーザーエクスペリエンスを向上させる簡単な方法です。

00:15:11.000 --> 00:15:17.000
これらの機能のいくつかは、強力な体験を構築するために使用できるビルディングブロックです。

00:15:17.000 --> 00:15:21.000
仮想マシンを保存する機能はその一例です。

00:15:21.000 --> 00:15:27.000
巻き戻しまたは保存の進行状況がアプリケーションにどのように適合するかを調査し始めます。

00:15:27.000 --> 00:15:32.000
そして、NBDが提供する柔軟性は信じられないほどです。

00:15:32.000 --> 00:15:39.000
NBDは、カスタムIOを必要とするアプリケーションに多くの可能性を解き放つことができます。

00:15:39.000 --> 00:15:46.000
これは、仮想マシンがmacOS Sonomaでできることの始まりにすぎません。

00:15:46.000 --> 00:15:47.000
ありがとうございます。

00:15:47.000 --> 00:15:51.000
仮想化チームは、あなたが構築するものを見るのが待ちきれません。

00:15:51.000 --> 23:59:59.000
♪ ♪

