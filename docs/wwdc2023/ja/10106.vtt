WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
ニコラス：こんにちは、「iPadOSアプリで外部カメラをサポートする」へようこそ。

00:00:14.000 --> 00:00:21.000
私はカメラソフトウェアチームのニコラス・ゲロです。このセッションでは、iPadアプリが外部カメラの使用を開始する方法についてです。

00:00:21.000 --> 00:00:28.000
ステージマネージャーの強力な機能セットには、iPadのディスプレイを複数の画面に拡張する機能が含まれます。

00:00:28.000 --> 00:00:35.000
また、iPadOS 17では、アプリはApple Studio Displayのような外部カメラを使い始めることができます。

00:00:35.000 --> 00:00:41.000
このiPad Proでは、FaceTimeが開いていて、接続されているディスプレイのカメラを使用しています。

00:00:41.000 --> 00:00:49.000
この大きなApple Studio Displayでアプリを実行すると、通話の反対側の人々が私のより良い視野角を持っているので、これは素晴らしいことです。

00:00:49.000 --> 00:00:58.000
私はまた、それと一緒にセンターステージを使用することができ、それは私が動き回るときに私をフレームに保つのに役立ちます。

00:00:58.000 --> 00:01:05.000
FaceTime、コードスキャナー、WebKitは外部カメラを使用しており、アプリができることの素晴らしい例です。

00:01:05.000 --> 00:01:12.000
Apple Pro Display XDRのようにカメラを内蔵していないモニターを使用する場合、人々はしばしばその上にUSBカメラを置きます。

00:01:12.000 --> 00:01:21.000
USBカメラがモニターに接続されている場合、モニターがiPadに接続されると、カメラもアプリで利用できるようになります。

00:01:21.000 --> 00:01:26.000
iPadアプリは、外部カメラやウェブカメラを使って写真を撮ったり、映画を録画したりできます。

00:01:26.000 --> 00:01:34.000
また、コントロールセンターから利用可能なポートレートブラーやスタジオライトビデオエフェクトなど、他のシステムカメラ機能もサポートしています。

00:01:34.000 --> 00:01:38.000
USB-Cコネクタ付きのiPadは、外部カメラをサポートしています。

00:01:38.000 --> 00:01:44.000
アプリは、USBビデオクラスまたはUVCの仕様に準拠したデバイスを使用できます。

00:01:44.000 --> 00:01:49.000
これは、ビデオストリーミングをサポートするUSBデバイスの標準を定義しています。

00:01:49.000 --> 00:01:52.000
そして、あなたのアプリが使用できる人気のあるカメラがたくさんあります。

00:01:52.000 --> 00:01:57.000
一部の外部カメラにはマイクが内蔵されており、アプリでも利用できます。

00:01:57.000 --> 00:02:07.000
一部のメーカーは、複数の入力間で切り替えて単一のビデオストリームを出力するHDMIスイッチャーなど、UVC仕様に準拠した非カメラデバイスを製造しています。

00:02:07.000 --> 00:02:11.000
iPadOSでは、アプリはこのようなデバイスを使用できます。

00:02:11.000 --> 00:02:16.000
外部カメラのサポートは、iPadのリッチメディアエコシステムの大きな強化です。

00:02:16.000 --> 00:02:21.000
発見と使用から始めて、あなたのアプリがどのようにそれらを使用できるかを紹介します。

00:02:21.000 --> 00:02:25.000
次に、サークルバックして、ビデオの回転をわかりやすくします。

00:02:25.000 --> 00:02:30.000
次に、あなたのアプリが外部カメラに含まれているマイクをどのように使用できるかについて説明します。

00:02:30.000 --> 00:02:34.000
そして最後に、あなたのアプリのベストプラクティスについて話し合います。

00:02:34.000 --> 00:02:39.000
まず、iPadアプリが外部カメラの使用を開始する方法について説明します。

00:02:39.000 --> 00:02:47.000
iPadアプリは、写真を撮ったり、映画を録画したり、ビデオ通話のためにネットワーク経由でカメラフレームを送信したりするなど、多くの機能にカメラを使用します。

00:02:47.000 --> 00:02:56.000
AVFoundationフレームワークを使用すると、アプリは内蔵カメラと外部カメラ、特にAVCaptureプレフィックス付きクラスを使用できます。

00:02:56.000 --> 00:02:59.000
アプリがカメラをどのように使用できるかを確認しましょう。

00:02:59.000 --> 00:03:04.000
まず、アプリはカメラとマイクを表すAVCaptureDevicesを使用します。

00:03:04.000 --> 00:03:11.000
次に、AVCaptureDeviceInputsでラップされ、AVCaptureSessionに接続できます。

00:03:11.000 --> 00:03:16.000
AVCaptureSessionは、AVCaptureグラフの中央制御オブジェクトです。

00:03:16.000 --> 00:03:20.000
AVCaptureOutputsは、さまざまな方法で入力からデータをレンダリングします。

00:03:20.000 --> 00:03:23.000
MovieFileOutputはQuickTimeムービーを記録します。

00:03:23.000 --> 00:03:27.000
PhotoOutputは、高品質の静止画とLive Photosをキャプチャします。

00:03:27.000 --> 00:03:37.000
VideoDataOutputやAudioDataOutputなどのデータ出力は、カメラやマイクからアプリにビデオまたはオーディオバッファを配信します。

00:03:37.000 --> 00:03:42.000
また、メタデータや深度など、他の種類のデータ出力もあります。

00:03:42.000 --> 00:03:50.000
ライブカメラのプレビューには、CALayerのサブクラスであるAVCaptureVideoPreviewLayerという特別なタイプの出力があります。

00:03:50.000 --> 00:03:56.000
データは、AVCaptureConnectionsを介してキャプチャ入力から互換性のある出力に流れます。

00:03:56.000 --> 00:04:02.000
これらのクラスは、iOS、macOS、およびtvOSで利用できます。

00:04:02.000 --> 00:04:10.000
AVCaptureを初めてご利用の方は、developer.apple.comのCapture Setupのスタートページで詳細をご覧ください。

00:04:10.000 --> 00:04:16.000
iPadOS 17の新機能で、アプリはAVCaptureで外部カメラにアクセスできます。

00:04:16.000 --> 00:04:21.000
アプリがすでに内蔵カメラを使用している場合は、簡単な更新を行い、外部カメラの使用を開始できます。

00:04:21.000 --> 00:04:23.000
それらを発見するのは簡単です。

00:04:23.000 --> 00:04:28.000
各外部カメラはAVCaptureDeviceインスタンスで表されます。

00:04:28.000 --> 00:04:35.000
また、AVCaptureDeviceとAVCaptureDeviceDiscoverySessionから既存のAPIでそれらを見つけることができます。

00:04:35.000 --> 00:04:42.000
AVCaptureDeviceには、メディアタイプ、デバイスタイプ、位置の3つの主な属性があります。

00:04:42.000 --> 00:04:46.000
外部カメラは、内蔵カメラと同じようにビデオメディアデータを提供します。

00:04:46.000 --> 00:04:49.000
そして、彼らのデバイスタイプは外部です。

00:04:49.000 --> 00:04:57.000
外部カメラの使用に精通しているmacOSアプリ開発者にとって、これは外部の未知のデバイスタイプを廃止します。

00:04:57.000 --> 00:05:04.000
外部カメラはiPadから独立して移動できるため、デバイスの位置は指定されていません。

00:05:04.000 --> 00:05:10.000
これらの3つの属性は、AVCapture APIを使用して外部カメラを見つけるために使用できます。

00:05:10.000 --> 00:05:13.000
アプリで外付けカメラを使い始めるのは簡単です。

00:05:13.000 --> 00:05:21.000
このセッションでは、人気のサンプルカメラアプリAVCamを変更して、Apple Studio Displayの外部カメラからストリーミングします。

00:05:21.000 --> 00:05:29.000
このセッションで行ったすべての変更を含むAVCamの完成版は、developer.apple.comからダウンロードできます。

00:05:29.000 --> 00:05:36.000
現在、このアプリは内蔵カメラを使用しており、ユーザーがボタンを押すとフロントカメラとリアカメラを切り替えることができます。

00:05:36.000 --> 00:05:40.000
AVCamが起動すると、背面カメラから始まります。

00:05:40.000 --> 00:05:48.000
アプリが内蔵カメラよりも外付けカメラを探すことを好むようにコードを変更します。

00:05:48.000 --> 00:05:58.000
iPadをApple Studio Displayに接続すると、アプリを実行し、起動すると外部カメラを使用します。

00:05:58.000 --> 00:05:59.000
これは素晴らしいです。

00:05:59.000 --> 00:06:04.000
AVCamは現在、外部カメラを使用しており、必要なのは数行のコードだけでした。

00:06:04.000 --> 00:06:11.000
AVCaptureVideoPreviewLayerはデフォルトで外部カメラをミラーリングし、Apple Studioディスプレイでカメラを使用するのに適しています。

00:06:11.000 --> 00:06:14.000
必要に応じて、この動作を無効にすることができます。

00:06:14.000 --> 00:06:19.000
このセッションの最後に、ベストプラクティスのセクションでこれを行う方法について説明します。

00:06:19.000 --> 00:06:24.000
では、アプリをiPadのディスプレイに移動します。

00:06:24.000 --> 00:06:29.000
そして、楽しみのために、外付けカメラのプラグを抜きます。

00:06:29.000 --> 00:06:35.000
ああ、アプリのカメラプレビューがフリーズしていて、今はカメラを使っていません。

00:06:35.000 --> 00:06:40.000
AVCamは、外部カメラの接続と切断イベントを処理するために、より多くの変更が必要になります。

00:06:40.000 --> 00:06:48.000
内蔵カメラとは異なり、ユーザーはいつでもiPadから接続および切断できるため、外部カメラには特別な注意が必要です。

00:06:48.000 --> 00:06:54.000
アプリはこれらのイベントを監視して、カメラがいつ利用可能になったか、使用できなくなったかを知ることができます。

00:06:54.000 --> 00:07:01.000
同じ物理デバイスが再接続されると、AVCaptureDeviceの新しいインスタンスを使用して表現されます。

00:07:01.000 --> 00:07:08.000
アプリが接続と切断のイベントをリッスンするために使用できる既存のAPIがあります。

00:07:08.000 --> 00:07:21.000
AVCaptureDeviceのisConnectedプロパティ、またはカメラが行き来するにつれて更新されるAVCaptureDeviceDiscoverySessionのデバイスプロパティをキー値で観察できます。

00:07:21.000 --> 00:07:30.000
AVCaptureDevicesはまた、接続ステータスが変更されたときに通知を投稿し、アプリはカメラの可用性を監視するためにそれらを監視することができます。

00:07:30.000 --> 00:07:35.000
システムはキー値観察コードを呼び出し、バックグラウンドキューに通知を投稿します。

00:07:35.000 --> 00:07:42.000
したがって、必ず処理をAVCaptureSessionキューとメインスレッドと同期させてください。

00:07:42.000 --> 00:07:48.000
AVCamに戻ると、外部カメラの接続と切断イベントをリッスンするためのコードを追加します。

00:07:48.000 --> 00:07:54.000
アプリがデフォルトのデバイスを確認した後、カメラが切断されたときを観察します。

00:07:54.000 --> 00:07:58.000
そして、それが起こると、AVCamは内蔵カメラに切り替わります。

00:07:58.000 --> 00:08:02.000
アプリが起動しても、まだ外部カメラを使用しています。

00:08:02.000 --> 00:08:10.000
そして、接続が切断されると、アプリは内蔵カメラに切り替わります。

00:08:10.000 --> 00:08:18.000
しかし、外部カメラが再接続されると、AVCamはそれに切り替わりません。

00:08:18.000 --> 00:08:21.000
AVCamは、実行中に接続されている外部カメラをどのように処理する必要がありますか?

00:08:21.000 --> 00:08:25.000
プラグを差し込んだ後、それに切り替えるべきですか？

00:08:25.000 --> 00:08:31.000
iPadアプリに外部カメラを採用することの難しい側面は、接続と切断のイベントを処理することです。

00:08:31.000 --> 00:08:38.000
これを簡単にするために、iPadOSは自動カメラ選択のためのAPIを導入しています。

00:08:38.000 --> 00:08:43.000
APIを使用すると、アプリはオペレーティングシステムと統合して、利用可能な最高のカメラを使用できます。

00:08:43.000 --> 00:08:47.000
これは、アプリがカメラを変更する別の方法です。

00:08:47.000 --> 00:08:53.000
macOS Venturaは、Continuity Cameraをサポートするための自動カメラ選択のためのAPIを導入しました。

00:08:53.000 --> 00:08:58.000
このセッションで説明する行動は、iOSに固有のものです。

00:08:58.000 --> 00:09:11.000
Mac用のこのAPIの使用方法の詳細については、2022年の以前のセッション「Continuity Camera to your macOS app」とそのセクション「Making a magical Experience」を参照してください。

00:09:11.000 --> 00:09:23.000
自動カメラ選択は、iOSのAVCaptureDeviceに導入された2つの新しいクラスプロパティ、userPreferredCameraとsystemPreferredCameraを使用して機能します。

00:09:23.000 --> 00:09:27.000
これらのプロパティは両方ともキー値で観察可能です。

00:09:27.000 --> 00:09:33.000
userPreferredCameraは、使用するカメラのユーザーの選択を示す読み取り/書き込みプロパティです。

00:09:33.000 --> 00:09:37.000
ユーザーがアプリでカメラを選ぶたびに設定する必要があります。

00:09:37.000 --> 00:09:43.000
そうすることで、システムはユーザーの好みを知ることができます。

00:09:43.000 --> 00:09:50.000
systemPreferredCameraは、システムによって決定される最適なカメラを指定する読み取り専用プロパティです。

00:09:50.000 --> 00:10:00.000
デフォルトでは、システムはフロントカメラの使用を推奨していますが、代わりにバックカメラを使用する場合、アプリは目的の動作をシステムに通知できます。

00:10:00.000 --> 00:10:04.000
異なるカメラがユーザーによって選択されるため、推奨事項が変更されます。

00:10:04.000 --> 00:10:08.000
しかし、あなたはシステムがどのカメラが最適かをどうやって知っているのか疑問に思うかもしれません。

00:10:08.000 --> 00:10:09.000
もう少ししたらそれに飛び込みます。

00:10:09.000 --> 00:10:14.000
まず、AVCaptureDeviceのuserPreferredCameraプロパティについて説明します。

00:10:14.000 --> 00:10:22.000
このプロパティでは、システムは起動とシステムの再起動中に各アプリに選択されたカメラの短い履歴を保存します。

00:10:22.000 --> 00:10:29.000
これにより、アプリはユーザーの履歴と、現在接続されているカメラに関するシステムの知識を組み合わせることができます。

00:10:29.000 --> 00:10:37.000
したがって、カメラが切断された場合、システムはユーザーの履歴に基づいて次に利用可能なカメラを返します。

00:10:37.000 --> 00:10:49.000
ユーザー選択履歴がない場合、または優先カメラが接続されていない場合、システムは常に使用できるカメラを返却し、以前にストリーミングされたカメラを優先しようとします。

00:10:49.000 --> 00:10:55.000
アプリはこのプロパティを使用して、システムにユーザーのカメラ設定を保存させることができます。

00:10:55.000 --> 00:11:00.000
AVCaptureDeviceのsystemPreferredCameraプロパティは、使用するのに最適なカメラをインテリジェントに返します。

00:11:00.000 --> 00:11:03.000
最初にユーザーの好みをチェックします。

00:11:03.000 --> 00:11:09.000
そして、ユーザーが外部カメラをiPadに接続すると、システムは新しいデバイスを返します。

00:11:09.000 --> 00:11:15.000
これは、ユーザーが新しいカメラを接続すると、暗黙のうちにそれを使用する意図を示しているためです。

00:11:15.000 --> 00:11:20.000
これら2つの入力は、システムが好むカメラを決定します。

00:11:20.000 --> 00:11:26.000
自動カメラ選択APIは、アプリがシステムとどのように統合するかを選択するのに柔軟です。

00:11:26.000 --> 00:11:33.000
iPadのみが外部カメラをサポートしていますが、iPhoneアプリはユーザーが好むカメラストレージにAPIを使用することもできます。

00:11:33.000 --> 00:11:39.000
ユーザーがカメラを変更できるアプリもあれば、切り替える方法を与えずにカメラに固執するアプリもあります。

00:11:39.000 --> 00:11:45.000
APIを使用すると、アプリは自動カメラと手動カメラの選択を選択できます。

00:11:45.000 --> 00:11:52.000
FaceTime、コードスキャナ、WebKitは、ニーズに合わせてカメラの選択動作が異なる素晴らしい例です。

00:11:52.000 --> 00:11:57.000
FaceTimeを起動すると、常にフロントカメラまたは外部カメラを使用します。

00:11:57.000 --> 00:12:01.000
また、通話中、ユーザーは内蔵カメラを切り替えることができます。

00:12:01.000 --> 00:12:06.000
しかし、外部カメラを使用すると、カメラのスイッチボタンが非表示になります。

00:12:06.000 --> 00:12:17.000
FaceTimeは、デバイスを切り替えるときにuserPreferredCameraを設定し、外部デバイスが接続されているときにsystemPreferredCameraプロパティを観察することで、この動作を可能にします。

00:12:17.000 --> 00:12:23.000
また、自動カメラ選択APIを使用するのが適切な時期についても、独自の決定を下します。

00:12:23.000 --> 00:12:32.000
たとえば、FaceTimeビデオ通話でバックカメラを使用できますが、通話のリストを表示するメイン画面のフロントカメラまたは外部カメラを常に使用します。

00:12:32.000 --> 00:12:36.000
コントロールセンターから入手できるコードスキャナーは、動作が異なります。

00:12:36.000 --> 00:12:48.000
起動時に背面カメラを使用し、ユーザーはカメラを変更することはできませんが、systemPreferredCameraプロパティをリッスンし、通知されたときに切り替えます。

00:12:48.000 --> 00:12:53.000
WebKitフレームワークを使用すると、ウェブページはiPadのカメラにアクセスできます。

00:12:53.000 --> 00:12:59.000
任意のカメラに切り替えることができますが、システム優先カメラをリストの最初のカメラとして返します。

00:12:59.000 --> 00:13:04.000
自動カメラ選択の仕組みをお見せしたので、AVCamでサポートを追加します。

00:13:04.000 --> 00:13:10.000
AVCamは、写真を撮ったり映画を録画したりできるので、伝統的な写真アプリです。

00:13:10.000 --> 00:13:19.000
これは、それぞれ通信アプリとユーティリティアプリであるFaceTimeとコードスキャナー、およびシステムフレームワークであるWebKitとは異なります。

00:13:19.000 --> 00:13:29.000
AVCamは、フォールバック付きの外部カメラを見つけるために一連の「if、else if」ステートメントを必要とする代わりに、システム優先カメラを取得するために1行だけが必要です。

00:13:29.000 --> 00:13:35.000
アプリが自動カメラ選択APIを使用するのはこれが初めてなので、システムは内蔵のフロントカメラを返します。

00:13:35.000 --> 00:13:39.000
しかし、AVCamはバックカメラから始めることを好みます。

00:13:39.000 --> 00:13:48.000
システムが優先するカメラを取得する前に、アプリは、アプリのユーザーデフォルトに保存されている値を探して、これが初めて問い合わせたかどうかを確認します。

00:13:48.000 --> 00:13:54.000
値が保存されていない場合、アプリは自動カメラ選択の初期状態を設定していません。

00:13:54.000 --> 00:14:00.000
したがって、これが初めて起動する場合、アプリはユーザーが好むカメラをバックデバイスに設定します。

00:14:00.000 --> 00:14:08.000
アプリは、提供されたデバイスタイプを使用してデバイスのリストを並べ替えるAVCaptureDeviceDiscoverySessionを使用してバックカメラを見つけます。

00:14:08.000 --> 00:14:16.000
次に、ユーザーが好むカメラを設定し、アプリのユーザー設定に値を保存するので、この設定は一度だけ行います。

00:14:16.000 --> 00:14:24.000
外部カメラの接続と切断を処理するには、特定のカメラの接続状態を観察する必要がなくなりなくなります。

00:14:24.000 --> 00:14:29.000
代わりに、AVCamキー値は、システムが優先するカメラプロパティを観察します。

00:14:29.000 --> 00:14:33.000
これにより、利用可能な最高のカメラに自動的に切り替えることができます。

00:14:33.000 --> 00:14:39.000
KVO処理では、アプリは新しいシステム優先カメラを取得し、それに切り替えます。

00:14:39.000 --> 00:14:41.000
しかし、AVCamが録音の途中にある場合はどうなりますか?

00:14:41.000 --> 00:14:45.000
アプリはカメラを切り替えて録画を中断すべきではありません。

00:14:45.000 --> 00:14:49.000
したがって、アプリは録音の最中ではない場合にのみ切り替わります。

00:14:49.000 --> 00:14:57.000
その後、映画の録画が終了すると、アプリはシステムが優先するカメラを照会し、現在使用しているものと異なるかどうかを確認します。

00:14:57.000 --> 00:15:01.000
システムが優先するカメラが変更された場合、アプリはそれに切り替わります。

00:15:01.000 --> 00:15:04.000
このようにして、録音を中断しません。

00:15:04.000 --> 00:15:10.000
このような決定は、外部カメラと自動カメラ選択APIを採用する際に行う必要がある手順です。

00:15:10.000 --> 00:15:13.000
あなたのアプリにとって最も理にかなっていることをしてください。

00:15:13.000 --> 00:15:19.000
AVCamにはカメラを切り替えるボタンがあり、前面と背面のデバイスを切り替えて動作します。

00:15:19.000 --> 00:15:24.000
このiPad Proには、両方の位置で使用できる複数のカメラがあります。

00:15:24.000 --> 00:15:29.000
したがって、AVCamには、特定の位置で使用するカメラを選択するためのロジックがあります。

00:15:29.000 --> 00:15:33.000
アプリが外部カメラをサポートしている今、ボタンはどのように機能するべきですか?

00:15:33.000 --> 00:15:37.000
外部カメラを前面に向いているように扱うことを選択します。

00:15:37.000 --> 00:15:43.000
このApple Studio Displayのカメラは、iPadの内蔵フロントカメラのように私を向いています。

00:15:43.000 --> 00:15:50.000
changeCamera機能に切り替える特定のデバイスがない場合、アプリは現在のデバイスの位置をチェックします。

00:15:50.000 --> 00:15:59.000
現在のデバイスの位置をチェックするスイッチステートメントでは、アプリは、現在不特定の位置または前面位置のカメラを使用している場合、背面カメラを探します。

00:15:59.000 --> 00:16:03.000
外部カメラは、位置が不特定であると報告している。

00:16:03.000 --> 00:16:10.000
また、アプリが背面カメラを使用している場合は、利用可能な場合は外部デバイスに切り替えます。

00:16:10.000 --> 00:16:14.000
それ以外の場合は、内蔵のフロントカメラに切り替わります。

00:16:14.000 --> 00:16:27.000
外部カメラを見つけるために、アプリは外部デバイスタイプ、ビデオメディアタイプ、および不特定のデバイス位置を使用してAVCaptureDeviceDiscoverySessionを作成します。

00:16:27.000 --> 00:16:34.000
次に、現在のデバイスの位置が戻ったときにスイッチステートメントで、最初に外部カメラを探します。

00:16:34.000 --> 00:16:39.000
また、見つからない場合は、内蔵のフロントカメラに切り替わります。

00:16:39.000 --> 00:16:50.000
次に、アプリが使用したいカメラを見つけると、AVCaptureDeviceにuserPreferredCameraクラスのプロパティを設定して、選択をシステムに伝えます。

00:16:50.000 --> 00:16:55.000
このプロパティを設定すると、システムはユーザーの好みを学習できます。

00:16:55.000 --> 00:17:00.000
アプリが外部カメラをサポートする方法と、ユーザーが外部カメラを切り替える方法を選択できます。

00:17:00.000 --> 00:17:09.000
AVCamの場合、外部カメラを前面のように扱うことで、ユーザーがフロントカメラ、バックカメラ、外部カメラを切り替えることを選択しました。

00:17:09.000 --> 00:17:13.000
このようにして、カメラのスイッチボタンは2つのデバイス間でのみ変更されます。

00:17:13.000 --> 00:17:16.000
AVCamは外部カメラをほぼサポートする準備ができています。

00:17:16.000 --> 00:17:19.000
処理すべき側面がもう1つあります。

00:17:19.000 --> 00:17:24.000
私がAVCamを使用している間ずっと、iPadは右側のUSB-Cポートで横向きに取り付けられています。

00:17:24.000 --> 00:17:32.000
iPadを回転させると、外部カメラのプレビューが逆さまになります。

00:17:32.000 --> 00:17:35.000
しかし、ディスプレイの外部カメラは動いていません。

00:17:35.000 --> 00:17:40.000
iPadだけが持っています。

00:17:40.000 --> 00:17:43.000
しかし、AVCamは内蔵カメラでこの回転の問題はありません。

00:17:43.000 --> 00:17:50.000
これは、アプリがiPadから独立した外部カメラの位置を方向付ける方法を知らないためです。

00:17:50.000 --> 00:17:55.000
AVCamは、外部カメラのビデオプレビューを適切に表示するために、さらに変更する必要があります。

00:17:55.000 --> 00:18:03.000
次に、ライブプレビューとキャプチャされた写真や映画が正しく表示されるように、ビデオのローテーションが重要な理由について説明します。

00:18:03.000 --> 00:18:06.000
ビデオの回転は、カメラアプリの新しい概念ではありません。

00:18:06.000 --> 00:18:12.000
しかし、外付けカメラを使用する場合は、iPadから独立して移動することを知っておくことが重要です。

00:18:12.000 --> 00:18:14.000
アプリは内蔵カメラに使用されます。

00:18:14.000 --> 00:18:22.000
このため、彼らはiPadの向きに頼ってカメラのビデオを回転させ、AVCaptureVideoOrientation列挙型を使用します。

00:18:22.000 --> 00:18:25.000
これはAVCamが以前のデモでやっていたことです。

00:18:25.000 --> 00:18:30.000
iPadの向きに合わせて外部カメラを回転させようとした。

00:18:30.000 --> 00:18:37.000
iPadOS 17では、AVCaptureVideoOrientationと、この列挙型を使用するAPIは非推奨です。

00:18:37.000 --> 00:18:42.000
これは、iPadがどのように向きになっているかを説明し、カメラがデバイスと一緒に回転することを前提としています。

00:18:42.000 --> 00:18:47.000
独立して動く外部カメラを方向付けるには十分な表現力がありません。

00:18:47.000 --> 00:18:56.000
この列挙型を使用するには、アプリは通常、iPadも記述し、カメラを方向付けるための間接的な信号であるUIDeviceOrientationから変換されます。

00:18:56.000 --> 00:19:00.000
そのため、ビデオローテーションを処理するための新しいAPIを導入しています。

00:19:00.000 --> 00:19:08.000
iPadOSを含むすべてのプラットフォームで新しく、AVCaptureDeviceRotationCoordinatorクラスは、あらゆるカメラの適切な方向付けに役立ちます。

00:19:08.000 --> 00:19:16.000
クラスの初期化子は、AVCaptureDeviceと、オプションでカメラのビデオプレビューを表示するCALayerを取ります。

00:19:16.000 --> 00:19:22.000
アプリは、多くの場合、AVCaptureVideoPreviewLayerまたはAVSampleBufferDisplayLayerを使用してカメラのプレビューを表示します。

00:19:22.000 --> 00:19:27.000
これらは両方ともCALayerのサブクラスであり、初期化子に渡すことができます。

00:19:27.000 --> 00:19:34.000
Metalやその他のレンダリング方法を使用するアプリは、カメラのプレビューを表示するUIViewのレイヤーを渡すだけです。

00:19:34.000 --> 00:19:43.000
コーディネーターには、地平線レベルのプレビューのためのビデオ回転角度と地平線レベルのキャプチャのための別の角度の2つのプロパティがあります。

00:19:43.000 --> 00:19:49.000
これらの読み取り専用プロパティは両方とも角度を度で返し、キー値で観測可能です。

00:19:49.000 --> 00:20:02.000
コンテンツの地平線レベルのプレビューとキャプチャは、デバイスが縦向き、横向き、または逆さまであるかどうかに関係なく、カメラからのビデオフレームが常に重力に対して直立していることを意味します。

00:20:02.000 --> 00:20:10.000
videoRotationAngleForHorizonLevelPreviewを使用して、コーディネーターの初期化子に渡されたCALayerのビデオフレームを表示します。

00:20:10.000 --> 00:20:14.000
プレビューに適用するローテーションの量を説明しています。

00:20:14.000 --> 00:20:19.000
角度はUIKitとSwiftUIの座標系に対して相対的です。

00:20:19.000 --> 00:20:28.000
videoRotationAngleForHorizonLevelCaptureを使用すると、アプリは写真やビデオを撮影できるため、後で誰かがそれらを見るとき、常に直立します。

00:20:28.000 --> 00:20:32.000
このプロパティは、カメラの物理的な向きを表します。

00:20:32.000 --> 00:20:35.000
そして、その値は、アプリがプレビューに必要な角度とは異なる場合があります。

00:20:35.000 --> 00:20:38.000
これら2つのプロパティには異なる目的があります。

00:20:38.000 --> 00:20:43.000
ビデオローテーションを説明するために、内蔵カメラを使用する際によく知っているシナリオから始めます。

00:20:43.000 --> 00:20:49.000
後で、AVCamを変更するときに、これらの概念が外部カメラにどのように適用されるかを説明します。

00:20:49.000 --> 00:20:56.000
iPhoneのカメラアプリは、地平線レベルのプレビューとキャプチャのためのビデオ回転角度の違いの良い例です。

00:20:56.000 --> 00:21:02.000
バックカメラのプレビューを表示するアプリのこの例では、iPhoneは縦向きです。

00:21:02.000 --> 00:21:11.000
UIKit座標系の原点は描画領域の左上にあり、正のx軸は右に伸び、正のy軸は下に伸びています。

00:21:11.000 --> 00:21:15.000
バックカメラセンサーの座標系は起源が異なります。

00:21:15.000 --> 00:21:20.000
カメラセンサーは、最初に電話の高さに沿ってスキャンし、次に幅に沿ってスキャンします。

00:21:20.000 --> 00:21:28.000
カメラの物理的な向きを考慮するために、アプリはUIでプレビューするためにカメラのビデオフレームを90度回転させます。

00:21:28.000 --> 00:21:33.000
また、キャプチャした写真やムービーを回転させるので、後で見ると直立します。

00:21:33.000 --> 00:21:37.000
iPhoneが横向きの場合、動作が異なります。

00:21:37.000 --> 00:21:42.000
このアプリは、デバイスの向きに関係なく、UIを縦向きでのみ表示します。

00:21:42.000 --> 00:21:45.000
ホーム・インフォーダンス・インジケーターがどこにあるかによってわかります。

00:21:45.000 --> 00:21:50.000
iPhoneのカメラアプリの場合、常にポートの横にとどまります。

00:21:50.000 --> 00:22:02.000
UIKit座標系の原点はまだ描画領域の左上にあり、この場合、アプリのUIは1つの向きしかサポートしていないため、デバイス上の単一の場所に固定されたままです。

00:22:02.000 --> 00:22:06.000
そして、バックカメラセンサーの座標系は依然としてUIとは異なります。

00:22:06.000 --> 00:22:15.000
アプリはUIを縦向きでしか表示しないため、iPhoneの向きに関係なく、プレビューのために一定の90度の回転を適用します。

00:22:15.000 --> 00:22:22.000
しかし、プレビューとは異なり、このアプリはiPhoneが横向きのときに写真やビデオを撮るときに異なる回転量を適用します。

00:22:22.000 --> 00:22:31.000
iPhoneがカメラセンサーのネイティブ向きにある場合、アプリは写真やムービーを回転させて直立させる必要はありません。

00:22:31.000 --> 00:22:34.000
この回転の話のすべては、本当にあなたの頭を回転させます。

00:22:34.000 --> 00:22:43.000
しかし、AVCaptureDeviceRotationCoordinatorはこの複雑さに対処し、すべてのカメラからプレビューしてキャプチャするための正しい角度を提供します。

00:22:43.000 --> 00:22:48.000
自分で計算しようとするのではなく、角度を提供するためにそれに頼ってください。

00:22:48.000 --> 00:22:53.000
アプリがカメラを切り替えるときに、必ず新しいローテーションコーディネーターを作成してください。

00:22:53.000 --> 00:23:00.000
ビデオローテーションを適用するには、コーディネーターが提供するアングルを使用してAVCaptureConnectionの新しいAPIを使用します。

00:23:00.000 --> 00:23:05.000
ビデオまたはデプスメディアデータを提供する接続のみがローテーションをサポートします。

00:23:05.000 --> 00:23:11.000
接続が角度をサポートしているかどうかを確認するには、isVideoRotationAngleSupportedメソッドを呼び出すことができます。

00:23:11.000 --> 00:23:17.000
接続が回転を実行するには、videoRotationAngleプロパティをサポートされている値に設定します。

00:23:17.000 --> 00:23:22.000
videoRotationAngleForHorizonLevelPreviewを使用して、カメラのプレビューを表示します。

00:23:22.000 --> 00:23:31.000
AVCaptureVideoPreviewLayerを使用するアプリは、AVCaptureConnectionインスタンスのvideoRotationAngleプロパティにプロパティの値を適用できます。

00:23:31.000 --> 00:23:36.000
アプリは、CALayerでビデオデータ出力からのバッファを表示するときにも使用できます。

00:23:36.000 --> 00:23:44.000
システムアニメーションと同期するには、アプリのキー値観察コードでプレビューの回転をすぐに変更します。

00:23:44.000 --> 00:23:49.000
アプリは、UIを更新するために、メインキューでこのプロパティの更新を受け取ることを期待できます。

00:23:49.000 --> 00:23:54.000
すべてのアプリがカメラのプレビューを表示するためにAVCaptureVideoPreviewLayerを使用しているわけではありません。

00:23:54.000 --> 00:24:00.000
一部のアプリは、カスタムエフェクトやフィルターを適用するときに、ビデオデータ出力からバッファを表示します。

00:24:00.000 --> 00:24:06.000
カスタムプレビューを表示するオプションの1つは、AVSampleBufferDisplayLayerを使用することです。

00:24:06.000 --> 00:24:12.000
ビデオデータ出力のAVCaptureConnectionの角度を設定することで、回転を要求しないでください。

00:24:12.000 --> 00:24:21.000
接続の角度を変更すると、キャプチャレンダリングパイプラインが自分自身を再構成して新しい回転量を適用すると、フレーム配信が中断されます。

00:24:21.000 --> 00:24:26.000
代わりに、カメラのプレビューを表示するCALayerを回転させます。

00:24:26.000 --> 00:24:31.000
そうすることで、アプリのカメラプレビューがスムーズに回転できます。

00:24:31.000 --> 00:24:38.000
写真や映画のときはvideoRotationAngleForHorizonLevelCaptureを使用するので、重力に対して水平になります。

00:24:38.000 --> 00:24:45.000
アプリは、キャプチャ接続にプロパティの値を写真出力またはムービーファイル出力に適用できます。

00:24:45.000 --> 00:24:54.000
または、アプリがカスタムムービーを録画するためにAVAssetWriterでビデオデータ出力を使用する場合は、AVCaptureConnectionでビデオを回転させないでください。

00:24:54.000 --> 00:25:03.000
代わりに、AVAssetWriterInputインスタンスの変換プロパティで回転を設定し、出力ファイルのメタデータを変更します。

00:25:03.000 --> 00:25:12.000
このアプローチでは、ビデオアプリは再生中に回転を適用し、キャプチャ接続で各フレームを回転させるよりも少ないエネルギーを使用します。

00:25:12.000 --> 00:25:21.000
アセットライター入力はラジアンで回転を適用するCGAffineTransformを使用するため、アプリは回転角度を度から変換する必要があります。

00:25:21.000 --> 00:25:25.000
一部の出力は、オーバーヘッドを追加せずに回転を効率的に適用します。

00:25:25.000 --> 00:25:31.000
たとえば、ムービーファイルの出力は、QuickTimeトラックマトリックスを使用して回転を適用します。

00:25:31.000 --> 00:25:35.000
写真の出力は、Exifタグで向きを処理します。

00:25:35.000 --> 00:25:39.000
そして、プレビューレイヤーは、ローテーションを実行するためにその内容を変換します。

00:25:39.000 --> 00:25:49.000
ただし、ビデオまたは深度データ出力がより多くのメモリとエネルギーを使用してバッファを回転させるため、デバイスの消費電力が増加する可能性があります。

00:25:49.000 --> 00:25:58.000
代わりに、あなたのアプリは、ビデオや深度出力からバッファをプレビューするCALayerを回転させることで、より効率的なアプローチを取ることができます。

00:25:58.000 --> 00:26:06.000
iOS、tvOS、macOSなど、利用可能なすべてのプラットフォームでAVCaptureDeviceRotationCoordinatorを使用してください。

00:26:06.000 --> 00:26:10.000
MacのMac CatalystとiOSアプリも使用できます。

00:26:10.000 --> 00:26:17.000
アプリはローテーションコーディネーターを使用して、写真や映画を正しく方向付け、任意のカメラのビデオプレビューを表示できます。

00:26:17.000 --> 00:26:24.000
また、Stage Managerや外部ディスプレイにあるときに、アプリが複雑なレイアウトを処理するのに役立ちます。

00:26:24.000 --> 00:26:28.000
今、AVCamの外部カメラをサポートするための最終的な変更の時間です。

00:26:28.000 --> 00:26:33.000
キャプチャセッションを設定すると、アプリはカメラのプレビューを設定します。

00:26:33.000 --> 00:26:40.000
そのため、デバイス回転コーディネーターを作成し、アプリにプレビューとキャプチャに必要な回転角度を提供します。

00:26:40.000 --> 00:26:47.000
コーディネーターを作成するとき、アプリはプレビューのために現在の回転角度でプレビューレイヤーを更新します。

00:26:47.000 --> 00:26:52.000
また、角度の変化を観察し、プレビューを更新します。

00:26:52.000 --> 00:27:00.000
AVCamがデバイスを切り替えると、新しいローテーションコーディネーターも作成されるため、プレビューは新しいカメラにぴったりです。

00:27:00.000 --> 00:27:07.000
写真を撮るとき、アプリはキャプチャに回転角度を使用して、誰かが後でそれらを見るときに直立していることを確認します。

00:27:07.000 --> 00:27:11.000
そして、映画を録画するときも同じことをします。

00:27:11.000 --> 00:27:15.000
これらの変更により、AVCamは外部カメラをサポートする準備が整いました。

00:27:15.000 --> 00:27:26.000
iPadを回転させると、外部カメラが正しく表示されます。

00:27:26.000 --> 00:27:31.000
このセッションではこれまでに多くのことを取り上げてきましたが、私と一緒にフォローしていただきありがとうございます。

00:27:31.000 --> 00:27:38.000
iPadアプリが外部カメラをどのように使用できるかを示したので、これらのデバイスに含まれているマイクを使用する方法について説明します。

00:27:38.000 --> 00:27:41.000
一部のウェブカメラやディスプレイにはマイクが含まれています。

00:27:41.000 --> 00:27:45.000
iPadに接続すると、アプリで使用できます。 アプリが使用できます。

00:27:45.000 --> 00:27:50.000
iPadOS 17は、USB-Cを搭載したiPadの外部マイクのサポートを改善しました。

00:27:50.000 --> 00:27:59.000
Core AudioのAUVoiceIOオーディオユニットを使用するテレフォニーアプリは、ウェブカメラやディスプレイに含まれているような外部マイクを使用できるようになりました。

00:27:59.000 --> 00:28:04.000
以前は、これらのアプリが使用できる唯一の外部有線デバイスはヘッドセットマイクでした。

00:28:04.000 --> 00:28:12.000
AUVoiceIOは、エコーキャンセルを実行し、外部マイク用の新しいチューニングが導入されているため、人気のあるインターフェースです。

00:28:12.000 --> 00:28:23.000
コントロールセンターから利用可能な音声分離モードは、キーボードでの入力、マウスクリック、または近所のどこかで実行されているリーフブロワーなど、不要なバックグラウンドノイズを除去します。

00:28:23.000 --> 00:28:27.000
アプリは、このシステム機能を外部マイクで使用できます。

00:28:27.000 --> 00:28:32.000
iOSオーディオルーティングシステムでは、一度に1つのマイクしか使用できません。

00:28:32.000 --> 00:28:35.000
また、最後に接続されたマイクにも自動的に変更されます。

00:28:35.000 --> 00:28:43.000
これは、カメラを接続するときと同じように、ユーザーが新しく接続されたマイクを使用する必要があることを示しているためです。

00:28:43.000 --> 00:28:47.000
iOSでは、システムはマイク用のAVCaptureDeviceを1つだけ返します。

00:28:47.000 --> 00:28:59.000
オーディオメディアタイプまたは新しいマイクデバイスタイプのデバイスを検索して見つけることができます。これは、すべてのマイクがiPadに組み込まれているわけではないため、builtInMicrophoneを廃止します。

00:28:59.000 --> 00:29:05.000
オーディオルーティングシステムは、内蔵または外部を問わず、どの利用可能なマイクを使用するかを決定します。

00:29:05.000 --> 00:29:13.000
システムが入力ルートを変更すると、マイクAVCaptureDeviceのlocalizedNameプロパティは、使用中のデバイスを反映するように変更されます。

00:29:13.000 --> 00:29:17.000
アプリはAVAudioSessionを使用して、マイクをより詳細に制御できます。

00:29:17.000 --> 00:29:22.000
カテゴリまたはモードを設定することで、アプリのオーディオ動作を設定できます。

00:29:22.000 --> 00:29:29.000
また、優先入力を設定することで、外部カメラに含まれているような特定のマイクを使用することを選択できます。

00:29:29.000 --> 00:29:37.000
このセッションの最後のトピックでは、外部カメラを使用する際のアプリのベストプラクティスについて説明します。

00:29:37.000 --> 00:29:40.000
採用を開始する際には、アプリにとって何が最も理にかなっているかを検討してください。

00:29:40.000 --> 00:29:46.000
以前、FaceTime、Code Scanner、WebKitが外部カメラを異なる方法でサポートすることを選んだことを示しました。

00:29:46.000 --> 00:29:50.000
アプリが採用できるさまざまな方法の例として使用してください。

00:29:50.000 --> 00:29:57.000
USB-Cポートが外部カメラで使用されている間に、Xcodeでワイヤレスデバッグ用にiPadを設定します。

00:29:57.000 --> 00:30:02.000
アプリが内蔵カメラに期待できる一部の機能は、外部デバイスではサポートされない場合があります。

00:30:02.000 --> 00:30:10.000
たとえば、アプリがいくつかの機能で深度データキャプチャに依存している場合、外部カメラが使用されているときに無効にする必要があるかもしれません。

00:30:10.000 --> 00:30:18.000
AVCaptureMultiCamSessionで同時に複数のカメラを使用するアプリは、クリエイティブなキャプチャ設定のために外部カメラを追加できます。

00:30:18.000 --> 00:30:23.000
iPadOSは、外部カメラにフロントカメラにも適用されるいくつかの治療を提供します。

00:30:23.000 --> 00:30:27.000
AVCaptureVideoPreviewLayerは、デフォルトで外部カメラをミラーリングします。

00:30:27.000 --> 00:30:31.000
これは、カメラがiPadユーザーを向いているときにうまく機能します。

00:30:31.000 --> 00:30:33.000
しかし、これはすべてのユースケースに適しているわけではありません。

00:30:33.000 --> 00:30:42.000
アプリのユーザーがHDMIスイッチャーからストリーミングしたり、外部カメラを遠ざけたりする場合は、ユーザーがプレビューミラーリングを無効にすることを検討してください。

00:30:42.000 --> 00:30:45.000
前のセクションでは、カメラの回転について説明しました。

00:30:45.000 --> 00:30:55.000
アプリは外部カメラにビデオローテーションを適用する必要はありませんが、その場合、システムは外部カメラを向いているシーンに向かって時計回りに回転させることに注意してください。

00:30:55.000 --> 00:31:00.000
これは、内蔵カメラの回転を適用するのと同じ方法です。

00:31:00.000 --> 00:31:04.000
さまざまな機能を備えたカメラを扱うためのアプリを準備してください。

00:31:04.000 --> 00:31:14.000
たとえば、一部の外部カメラは、640x480のVGAフォーマットと1280x720のHDフォーマットの2つのフォーマットしか報告しない場合があります。

00:31:14.000 --> 00:31:18.000
また、一部の外部カメラは、iOSでは一般的に使用されていないピクセルフォーマットをサポートしています。

00:31:18.000 --> 00:31:24.000
私たちは、これらをiOSカメラアプリが扱うのに慣れているより一般的なフォーマットに変換することを選択しました。

00:31:24.000 --> 00:31:30.000
Yuvsや2vuyのような非圧縮フォーマットは420vに変換されます。

00:31:30.000 --> 00:31:36.000
また、ストリーミングJPEGやH264などの圧縮フォーマットは420fに変換されます。

00:31:36.000 --> 00:31:43.000
外部カメラは任意のサイズのフォーマットを持つことができるため、すべてのAVCaptureSessionPresetsをサポートしていない可能性があります。

00:31:43.000 --> 00:31:49.000
たとえば、HD 4Kプリセットでは、デバイスに互換性のあるフォーマットが必要です。

00:31:49.000 --> 00:31:56.000
アプリは、AVCaptureDeviceのsupportsSessionPresetメソッドを呼び出すことで、プリセットを使用できるかどうかを確認できます。

00:31:56.000 --> 00:32:02.000
アプリは、解像度、フレームレート、ズーム率の変更など、外部カメラを設定できます。

00:32:02.000 --> 00:32:08.000
iPadOSは、USBビデオクラス仕様で利用可能なカメラコントロールの限られたセットをサポートしています。

00:32:08.000 --> 00:32:12.000
したがって、AVCaptureDeviceの機能を照会してください。

00:32:12.000 --> 00:32:15.000
先ほど話したことをすべてまとめましょう。

00:32:15.000 --> 00:32:28.000
外部カメラを見つけて使用する方法、カメラのビデオフレームを適切に回転させる方法、外部マイクを使用する方法、そして最後にアプリのベストプラクティスを示しました。

00:32:28.000 --> 00:32:32.000
iPadアプリで外付けカメラを使い始める方法にワクワクしています。

00:32:32.000 --> 00:32:34.000
ありがとう、あなたのアプリがうまくいくことを願っています。

00:32:34.000 --> 23:59:59.000
♪ ♪

