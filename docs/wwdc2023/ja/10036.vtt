WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
アリソン:みなさん、こんにちは。

00:00:11.000 --> 00:00:14.000
私の名前はアリソンで、アクセシビリティエンジニアです。

00:00:14.000 --> 00:00:21.000
今日は、アプリをよりアクセスしやすくするエキサイティングな新しい方法について話します。

00:00:21.000 --> 00:00:30.000
アップルでは、アクセシビリティは、誰もがテクノロジーへのアクセスに値すると信じているので、私たちが構築するすべてのものの不可欠な部分です。

00:00:30.000 --> 00:00:36.000
私たちは、あなたがあなたのアプリにアクセスできるようにすることを非常に簡単にしたいと考えています。

00:00:36.000 --> 00:00:43.000
過去1年間、私たちは誰もがあなたのアプリで可能な限り最高の体験をできるように、多くの機能強化に取り組んできました。

00:00:43.000 --> 00:00:50.000
このセッションでは、人々が新しいエキサイティングな方法であなたのアプリと対話できるAPIを探ります。

00:00:50.000 --> 00:00:57.000
次に、SwiftUIアプリのコンテンツのアクセシビリティビジュアルを改善する方法について説明します。

00:00:57.000 --> 00:01:03.000
最後に、UIKitでアクセシビリティ属性を最新の状態に保つためのより良い方法を学びます。

00:01:03.000 --> 00:01:06.000
アクセシビリティの強化について話すことから始めましょう。

00:01:06.000 --> 00:01:09.000
私は写真編集アプリに取り組んでいます。

00:01:09.000 --> 00:01:15.000
私のアプリでは、ライブラリやカメラからの写真にクールな画像変更を追加できます。

00:01:15.000 --> 00:01:24.000
さまざまなフィルターを適用したり、写真の色合いの色を変更したり、アプリのピアノキーボードを使用して画像とペアリングするカスタムサウンドを作成したりできます。

00:01:24.000 --> 00:01:29.000
アプリに統合できるアクセシビリティの強化についていくつか話し合いましょう。

00:01:29.000 --> 00:01:36.000
私の写真アプリのフィルターページには、オンとオフのステータスを持つカスタムボタンがあります。

00:01:36.000 --> 00:01:41.000
「フィルター」スイッチボタンを使用すると、画像フィルターのオンとオフを切り替えることができます。

00:01:41.000 --> 00:01:54.000
システムは、このカスタムUIの正しいアクセシビリティのヒントとタイトルを知らないため、他のシステムトグルと一致するアクセシビリティ体験を確実に提供したいと考えています。

00:01:54.000 --> 00:01:59.000
これは、新しいアクセシビリティ特性であるisToggleが役立つところです。

00:01:59.000 --> 00:02:02.000
フィルターボタンを表す構造体があります。

00:02:02.000 --> 00:02:08.000
構造体の本文で、押されたときにフィルターを切り替えるボタンを作成します。

00:02:08.000 --> 00:02:13.000
ボタンの色は、フィルター状態変数に基づいて更新されます。

00:02:13.000 --> 00:02:19.000
accessibilityAddTraits修飾子のフィルターボタンにisToggleトレイトを追加します。

00:02:19.000 --> 00:02:25.000
isToggleは、適切なアクセシビリティのヒントと「切り替えボタン」の説明を提供します。

00:02:25.000 --> 00:02:27.000
VoiceOver: フィルター、スイッチボタン。

00:02:27.000 --> 00:02:32.000
ダブルタップして設定を切り替えます。

00:02:32.000 --> 00:02:35.000
アリソン：新しいトグル特性はUIKitでも利用可能です。

00:02:35.000 --> 00:02:40.000
viewDidLoadメソッドでは、ボタンビューを設定します。

00:02:40.000 --> 00:02:48.000
次に、ボタンのaccessibilityTraitsプロパティを.toggleButtonを含むように設定します。

00:02:48.000 --> 00:02:57.000
写真フィルターアプリで、写真ナビゲーションバーボタンに新しいアナウンスを追加して、写真ビューが読み込まれていることを人々に知らせたい。

00:02:57.000 --> 00:03:02.000
アクセシビリティ通知は、これを行うのに役立つ新しいAPIです。

00:03:02.000 --> 00:03:14.000
アクセシビリティ通知は、アプリで支援技術を使用して誰かに情報を伝えるためのアナウンスを作成するための統一されたマルチプラットフォームの方法を提供します。

00:03:14.000 --> 00:03:22.000
SwiftUI、UIKit、AppKitを実行しているアプリのアクセシビリティ通知を作成できます。

00:03:22.000 --> 00:03:32.000
AccessibilityNotificationを使用すると、Swiftネイティブの方法でアナウンス、レイアウト変更、画面変更、ページスクロール通知を送信できます。

00:03:32.000 --> 00:03:37.000
写真ツールバーのボタンが押されたら、アナウンスを投稿したいです。

00:03:37.000 --> 00:03:39.000
VoiceOver: 写真、ボタン。

00:03:39.000 --> 00:03:43.000
写真。写真ビューを読み込んでいます。

00:03:43.000 --> 00:03:47.000
アリソン：ツールバーボタンのアクションでアナウンスを投稿できます。

00:03:47.000 --> 00:03:57.000
アナウンスを作成するには、「Loading Photos View」を文字列パラメータとしてAccessibilityNotification.Announcementを使用できます。

00:03:57.000 --> 00:04:04.000
アプリでは、カメラのナビゲーションバーボタンが押されたときに3つのアナウンスも作成したいです。

00:04:04.000 --> 00:04:11.000
最初の発表「Opening Camera」と3回目の発表「Camera Active」が最も重要です。

00:04:11.000 --> 00:04:15.000
アナウンスのVoiceOverの現在のスピーチパターンを見てみましょう。

00:04:15.000 --> 00:04:20.000
2回目の発表「カメラローディング」が「オープンカメラ」を中断する方法に注目してください。

00:04:20.000 --> 00:04:24.000
VoiceOver: カメラ、ボタン。

00:04:24.000 --> 00:04:26.000
完了。オープン--カメラ--カメラアクティブ。

00:04:26.000 --> 00:04:37.000
アリソン：SwiftUIとUIKitでは、アナウンスの優先順位を設定することもできます。これにより、支援技術によって話されるアナウンスの重要性を設定できます。

00:04:37.000 --> 00:04:44.000
これにより、時間内に話さなければ無視できるアナウンスと比較して、人々が聞く必要があるアナウンスをより詳細に制御できます。

00:04:44.000 --> 00:04:53.000
この情報の重要性は、高、デフォルト、低の3つの発表優先順位のいずれかを使用して指定できます。

00:04:53.000 --> 00:05:00.000
優先度の高い発表は、他のスピーチを中断する可能性があり、一度開始すると中断することはできません。

00:05:00.000 --> 00:05:07.000
デフォルトの優先度アナウンスは、既存のスピーチを中断することができますが、新しいスピーチ発話が開始された場合は中断可能です。

00:05:07.000 --> 00:05:14.000
新しいアナウンスが開始されない場合、優先順位の低いアナウンスは、他の発話が完了したときにキューに入れられ、話されます。

00:05:14.000 --> 00:05:20.000
写真アプリでは、アナウンス優先度を使用して割り込み文字列を修正できます。

00:05:20.000 --> 00:05:24.000
帰属文字列から3つの発表があります。

00:05:24.000 --> 00:05:31.000
SwiftUIでは、accessibilitySpeechAnnouncementPriority文字列プロパティの優先順位を設定します。

00:05:31.000 --> 00:05:38.000
2回目の発表「カメラローディング」は最も重要ではないので、優先順位を下げます。

00:05:38.000 --> 00:05:45.000
最後の発表「Camera Active」が最も重要であるため、優先度が高いことを望んでいます。

00:05:45.000 --> 00:05:50.000
次に、帰属文字列をAccessibilityNotificationに渡します。

00:05:50.000 --> 00:05:57.000
まず、デフォルトの優先順位の発表、次に低優先順位、次に高優先順位を発送します。

00:05:57.000 --> 00:06:07.000
次に、低優先度のアナウンスがデフォルトの優先度のアナウンスを中断しないのに対し、優先度の高いアナウンスがデフォルトと低のアナウンスを中断することに注意してください。

00:06:07.000 --> 00:06:10.000
VoiceOver: カメラ、ボタン。

00:06:10.000 --> 00:06:13.000
完了。オープニングカメラ - カメラアクティブ。

00:06:13.000 --> 00:06:16.000
アリソン：UIKitで同じ発表順序を実現できます。

00:06:16.000 --> 00:06:21.000
発表の優先順位をNSAttributedStringキー値のペアとして設定します。

00:06:21.000 --> 00:06:31.000
キーUIAccessibilitySpeechAttribute AnnouncementPriorityを使用し、値を適切なUIAccessibilityPriorityに設定します。

00:06:31.000 --> 00:06:35.000
次に、属性を属性文字列初期化子に渡します。

00:06:35.000 --> 00:06:41.000
アプリに戻ると、人々が物理的にタッチしたり、ピンチしたりしてズームインしたり縮小したりできる画像ビューがあります。

00:06:41.000 --> 00:06:48.000
支援技術をオンにすると、この物理的なタッチやピンチジェスチャーは達成するのが難しい場合があります。

00:06:48.000 --> 00:06:55.000
現在、アクセシビリティズームアクションにより、支援技術が有効になっている場合、人々はUI要素をズームインおよびズームアウトできます。

00:06:55.000 --> 00:06:58.000
画像にズームアクションを追加します。

00:06:58.000 --> 00:07:03.000
画像はZoomingImageView構造体の本文にあります。

00:07:03.000 --> 00:07:07.000
まず、accessibilityZoomAction修飾子を追加します。

00:07:07.000 --> 00:07:16.000
次に、ズームアクションの方向に基づいて、コンテンツをズームインまたはズームアウトし、アクセシビリティ通知の発表を投稿します。

00:07:16.000 --> 00:07:20.000
それでは、これらの変更でVoiceOverのズーム機能を探りましょう。

00:07:20.000 --> 00:07:22.000
VoiceOver: ズーム画像ビュー、画像。

00:07:22.000 --> 00:07:24.000
ズーム。

00:07:24.000 --> 00:07:27.000
2倍ズーム。3倍ズーム。

00:07:27.000 --> 00:07:30.000
4倍ズーム。3倍ズーム。

00:07:30.000 --> 00:07:33.000
アリソン：UIKitにズーム特性とアクションを追加することもできます。

00:07:33.000 --> 00:07:37.000
まず、画像ビューを含むズームビューを作成します。

00:07:37.000 --> 00:07:43.000
次に、画像トレイトと一緒にズームビューにsupportsZoomトレイトを追加します。

00:07:43.000 --> 00:07:54.000
次に、accessibilityZoomInAtPointとaccessibilityZoomOutAtPointを実装し、それぞれがズームの成功または失敗を示すブール値を返します。

00:07:54.000 --> 00:08:01.000
これらの各方法では、ズームスケールを更新し、ズームの変更を示すアナウンスを投稿します。

00:08:01.000 --> 00:08:09.000
画像フィルターアプリでは、小さなピアノキーを演奏して画像に追加する短いサウンドを作成することもできます。

00:08:09.000 --> 00:08:13.000
人々はキーを使用して画像のカスタムトーンを作成できます。

00:08:13.000 --> 00:08:23.000
トーンを作ろうとして、これらのサウンドで現在のVoiceOver体験を調べてみましょう。

00:08:23.000 --> 00:08:48.000
VoiceOverはキーラベルを話し、要素に触れるたびにVoiceOverの起動音を再生するため、キーを連続してすばやく押すことが困難になります。

00:08:48.000 --> 00:08:58.000
通常、VoiceOverは安全な探索体験を提供しますが、時には、人々はアプリを適切に使用するためにアプリと直接やり取りする必要があります。

00:08:58.000 --> 00:09:05.000
私たちのアプリでは、人々が余分なスピーチや音なしでピアノのキーに直接触れることができれば、はるかに良いでしょう。

00:09:05.000 --> 00:09:13.000
これは、私たちの見解では、allowsDirectInteractionという名前のダイレクトタッチ特性を採用するのに最適な時期です。

00:09:13.000 --> 00:09:23.000
アクセシビリティダイレクトタッチエリアでは、VoiceOverジェスチャーがアプリに直接通過する画面の領域を指定できます。

00:09:23.000 --> 00:09:30.000
デフォルトの状態では、VoiceOverは直接タッチ要素のコンテンツを話したりアクティブにしたりします。

00:09:30.000 --> 00:09:42.000
しかし、私たちのアプリでは、誰かがピアノのキーに触れたときにVoiceOverがサイレントになっているので、最初にピアノのキー要素をアクティブにすることなく、すぐにトーンを聞くことができるのは素晴らしいことです。

00:09:42.000 --> 00:09:50.000
allowsDirectInteraction特性に加えて、サポートされる2つの新しいダイレクトタッチオプションが追加されました。

00:09:50.000 --> 00:10:00.000
まず、アプリが独自のオーディオフィードバックを作成できるように、直接タッチ領域に触れるときにVoiceOverがサイレントであることを確認するために、silentOnTouchを指定できます。

00:10:00.000 --> 00:10:11.000
第二に、requiresActivationを指定して、タッチパススルーが発生する前に、ダイレクトタッチエリアにVoiceOverが要素をアクティブにするようにすることができます。

00:10:11.000 --> 00:10:15.000
これはKeyboardKeyViewのコードスニペットです。

00:10:15.000 --> 00:10:19.000
各キーは、指定されたサウンドを再生する長方形です。

00:10:19.000 --> 00:10:29.000
毎回トーンで話すVoiceOverの問題を解決するために、ボタンのダイレクトタッチオプションをタッチ時にサイレントに設定しました。

00:10:29.000 --> 00:10:37.000
これで、VoiceOverの音声から干渉されることなく、VoiceOverがキーボタンに到達すると、正しいトーンが再生されます。

00:10:37.000 --> 00:10:47.000
UIKitに新しいダイレクトタッチオプションを追加することもできます。

00:10:47.000 --> 00:10:51.000
キーボタンをUIButtonとして作成できます。

00:10:51.000 --> 00:10:56.000
次に、allowsDirectInteractionのアクセシビリティ特性を追加します。

00:10:56.000 --> 00:11:02.000
この特性は、UIKitでアクセシビリティダイレクトタッチオプションを設定する場合に必要です。

00:11:02.000 --> 00:11:08.000
最後に、accessibilityDirectTouchOptionsのsilentOnTouchオプションを追加します。

00:11:08.000 --> 00:11:20.000
アクセシビリティトグル特性、アナウンス優先度、ズーム特性、ダイレクトタッチオプションを使用すると、支援技術がSwiftUIおよびUIKitアプリと対話する方法をより詳細に制御できます。

00:11:20.000 --> 00:11:26.000
次に、SwiftUIのアクセシビリティコンテンツシェイプの種類について話しましょう。

00:11:26.000 --> 00:11:34.000
この種類は、アクセシビリティ要素のパスを設定し、画面上のアクセシビリティ要素の外観を制御します。

00:11:34.000 --> 00:11:40.000
以前は、インタラクションコンテンツの形状の種類は、アクセシビリティの形状を変更し、テストの形状をヒットしました。

00:11:40.000 --> 00:11:49.000
現在、ヒットテストの形状に影響を与えず、アクセシビリティコンテンツの形状にのみ影響するアクセシビリティコンテンツの形状の種類があります。

00:11:49.000 --> 00:11:58.000
要素が円などのカスタムシェイプを必要とする場合、計算されたアクセシビリティカーソルビジュアルが画面上の他のアイテムを妨げる可能性があります。

00:11:58.000 --> 00:12:05.000
この例では、アクセシビリティパスは正方形で、赤い円形のコンテンツと一致しません。

00:12:05.000 --> 00:12:16.000
アクセシビリティコンテンツシェイプの種類がビューに適用されると、修飾子によって提供されるシェイプで要素の基礎となるアクセシビリティジオメトリを更新します。

00:12:16.000 --> 00:12:22.000
これにより、既存のSwiftUIシェイプで要素のパスをすばやく更新できます。

00:12:22.000 --> 00:12:26.000
円の画像を使って円ボタンを作成しました。

00:12:26.000 --> 00:12:32.000
フレームとアクセシビリティラベルは、赤の色に合わせて設定できます。

00:12:32.000 --> 00:12:41.000
最後に、アクセシビリティタイプとサークルを図形として、コンテンツ図形修飾子を私のビューに追加できます。

00:12:41.000 --> 00:12:47.000
これで、アクセシビリティパスは赤い色のボタンの円形に正しく一致します。

00:12:47.000 --> 00:12:55.000
最後に、UIKitのアクセシビリティ、ブロックベースの属性セッターの追加について話し合いましょう。

00:12:55.000 --> 00:13:03.000
写真編集アプリでは、画像ビューのアクセシビリティ値が、写真がフィルタリングされているかどうかを表すようにしたい。

00:13:03.000 --> 00:13:13.000
これで、私のビューの基礎となるアクセシビリティ属性を常に提示されたUIに沿った状態に保つ簡単な方法があります。

00:13:13.000 --> 00:13:17.000
アクセシビリティブロックベースのセッターでこれを行うことができます。

00:13:17.000 --> 00:13:28.000
新しいアクセシビリティブロックAPIを使用すると、値を直接保存するのではなく、属性が必要なときに評価されるクロージャを提供できます。

00:13:28.000 --> 00:13:36.000
閉鎖は、ビューが支援技術によって参照またはアクセスされるたびに再評価されます。

00:13:36.000 --> 00:13:41.000
ビューコントローラーのviewDidLoadメソッドで作成されたクロージャで物事を簡素化できます。

00:13:41.000 --> 00:13:51.000
zoomViewにaccessibilityValueBlockプロパティを設定して、画像がフィルタリングされているかどうかに基づいて値を最新の状態に保ちます。

00:13:51.000 --> 00:13:56.000
クロージャは、オプションの文字列であるこの属性の正しい型を返す必要があります。

00:13:56.000 --> 00:14:00.000
保持サイクルを避けるために、自己への弱い参照を使用していることに注意してください。

00:14:00.000 --> 00:14:09.000
ブロックは、適切なアクセシビリティ属性情報を使用してクラスを開始するために、クラスライフサイクルの開始時に追加するのに最適です。

00:14:09.000 --> 00:14:13.000
アクセシビリティ属性のメンテナンスがはるかに簡単になりました。

00:14:13.000 --> 00:14:23.000
誰かがVoiceOverカーソルを新しい要素に移動するたびに、VoiceOverは最初にクロージャで設定された属性を回収し、クロージャを再評価します。

00:14:23.000 --> 00:14:47.000
カスタムUIを構築するときは、トグルなどのアクセシビリティ特性とダイレクトタッチインタラクションなどの機能を統合して、すべての人の使いやすさを高めることを検討してください。

00:14:47.000 --> 00:14:52.000
第二に、SwiftUIのカスタムシェイプであなたの見解について考えてください。

00:14:52.000 --> 00:14:59.000
アクセシビリティシェイプがUIと一致しない場合は、カスタムアクセシビリティシェイプの導入を検討してください。

00:14:59.000 --> 00:15:08.000
そして最後に、アクセシビリティ属性をどのように設定しているかを評価し、ブロックベースのセッターがアプリでより理にかなっているかどうかを特定することをお勧めします。

00:15:08.000 --> 00:15:12.000
アップルでは、アクセシビリティは人権であると信じています。

00:15:12.000 --> 00:15:18.000
あなたの助けを借りて、私たちはすべての人の生活を向上させ、力を与える技術を創造することができます。

00:15:18.000 --> 00:15:30.000
これらの新しいAPIの追加は、支援技術に依存する人々のためのアプリの使いやすさを高めるための素晴らしい方法であり、私はあなたが素晴らしい、アクセス可能なアプリを構築するためにそれらのすべてを使用することをお勧めします。

00:15:30.000 --> 23:59:59.000
見てくれてありがとう。

