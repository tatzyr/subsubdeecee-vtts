WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
アナント：こんにちは。「アプリでシンボルをアニメーション化する」へようこそ。

00:00:14.000 --> 00:00:19.000
私の名前はアナントで、UIKitのエンジニアです。

00:00:19.000 --> 00:00:24.000
SFシンボルは、Appleのインターフェースの象徴的な部分です。

00:00:24.000 --> 00:00:29.000
メニュー、ツールバー、サイドバーなどでゴージャスに見えます。

00:00:29.000 --> 00:00:36.000
そして、人々はシンボルに精通しているので、あなたのアプリをより直感的に使用できるようにします。

00:00:36.000 --> 00:00:46.000
iOS 17とmacOS Sonomaでは、アニメーションでシンボルを強化し、これまで以上にあなたのアプリに命を吹き込んでいます。

00:00:46.000 --> 00:00:53.000
「シンボルエフェクト」とも呼ばれる新しいシンボルアニメーションのツアーから始めます。

00:00:53.000 --> 00:01:03.000
次に、SwiftUI、UIKit、AppKitの新しいAPIをガイドして、アプリにシンボルエフェクトを追加します。

00:01:03.000 --> 00:01:10.000
そして最後に、シンボル効果を本当に輝かせるためのヒントをいくつか紹介します。

00:01:10.000 --> 00:01:14.000
では、飛び込みましょう。

00:01:14.000 --> 00:01:24.000
iOS 17とmacOS Sonomaは、カスタムシンボルを含むあらゆるシンボル画像に適用できるユニバーサルアニメーションのコレクションを導入しています。

00:01:24.000 --> 00:01:36.000
これらのアニメーションは、Bounce、Pulse、Variable Color、Scale、Appear、Disappear、Replaceと呼ばれます。

00:01:36.000 --> 00:01:48.000
「SFシンボル5の新機能」セッションをチェックして、アニメーションとのインターフェイスを設計するためのベストプラクティスを含め、アニメーション自体を深く掘り下げることをお勧めします。

00:01:48.000 --> 00:01:57.000
APIでは、これらのアニメーションは「シンボルエフェクト」と呼ばれ、新しいシンボルフレームワークはそれらすべての本拠地です。

00:01:57.000 --> 00:02:03.000
SwiftUI、AppKit、またはUIKitを使用してアプリを構築すると、無料で含まれます。

00:02:03.000 --> 00:02:10.000
シンボルフレームワークの本当にクールな特徴は、各エフェクトが単純なドットで区切られた名前を持っていることです。

00:02:10.000 --> 00:02:17.000
したがって、バウンス効果を作成するには、コードに「.bounce」と書くだけです。

00:02:17.000 --> 00:02:23.000
これらのドットで区切られた名前は、エフェクトの設定方法にも拡張されます。

00:02:23.000 --> 00:02:33.000
たとえば、シンボルが上向きまたは下向きに跳ね返るように指定できますが、ほとんどの場合、何も指定する必要はありません。

00:02:33.000 --> 00:02:37.000
フレームワークは自動的に最も適切な方向を使用します。

00:02:37.000 --> 00:02:41.000
一部のエフェクトには、多くの設定オプションがあります。

00:02:41.000 --> 00:02:46.000
例えば、可変色には3つの異なる設定があります。

00:02:46.000 --> 00:02:53.000
オプションを連鎖させることで、非常に特定の効果を簡単に設定できます。

00:02:53.000 --> 00:02:56.000
エフェクト名は実際のSwiftコードです。

00:02:56.000 --> 00:02:59.000
条件はありません。 

00:02:59.000 --> 00:03:08.000
Xcodeは名前の各部分を自動補完し、エフェクトの設定が正しくない場合、コンパイル時にエラーが発生します。

00:03:08.000 --> 00:03:14.000
すべての新しいアニメーションを探索する最良の方法は、SFシンボルアプリです。

00:03:14.000 --> 00:03:22.000
新しいアニメーションタブでは、各エフェクトで利用可能なすべての設定オプションについて学ぶことができます。

00:03:22.000 --> 00:03:28.000
ドットで区切られたエフェクト名をコピーして、コードで直接使用することもできます。

00:03:28.000 --> 00:03:35.000
すべてのエフェクトタイプと設定オプションで、多種多様なアニメーションが利用可能です。

00:03:35.000 --> 00:03:40.000
しかし、これらの効果はすべて、実際には小さな一連の行動を網羅しています。

00:03:40.000 --> 00:03:46.000
たとえば、バウンスは、シンボルに1回限りのアニメーションを再生します。

00:03:46.000 --> 00:03:50.000
これは離散的な動作と見なされます。

00:03:50.000 --> 00:03:57.000
一方、スケール効果を追加すると、シンボルのスケールレベルが変更され、無期限に維持されます。

00:03:57.000 --> 00:04:01.000
スケールは無期限の行動をサポートすると言われています。

00:04:01.000 --> 00:04:08.000
離散効果とは異なり、無期限効果は明示的に削除された場合にのみ終了します。

00:04:08.000 --> 00:04:12.000
出現と消失は、移行行動をサポートします。

00:04:12.000 --> 00:04:17.000
彼らはシンボルを視界の出し入れを切り替えることができます。

00:04:17.000 --> 00:04:21.000
そして最後に、置換はコンテンツの移行です。

00:04:21.000 --> 00:04:25.000
それはあるシンボルから別のシンボルへとアニメーション化されます。

00:04:25.000 --> 00:04:33.000
つまり、離散的、不定、遷移、コンテンツ遷移の4つの異なる動作です。

00:04:33.000 --> 00:04:38.000
シンボルフレームワークでは、各動作はプロトコルに対応します。

00:04:38.000 --> 00:04:44.000
エフェクトは、これらのプロトコルに準拠することで、サポートされている動作を宣言します。

00:04:44.000 --> 00:04:50.000
利用可能なすべての効果と、サポートされている動作の内訳を次に示します。

00:04:50.000 --> 00:04:54.000
このセッションでは、これをより詳細に説明します。

00:04:54.000 --> 00:05:00.000
エフェクトの動作によって、どのUIフレームワークAPIがそれらと連携できるかが決まることを知っておいてください。

00:05:00.000 --> 00:05:11.000
そして、UIフレームワークAPIといえば、SwiftUI、UIKit、AppKitアプリにこれらのクールなエフェクトをすべて追加する方法について話しましょう。

00:05:11.000 --> 00:05:17.000
SwiftUIには、新しいビュー修飾子、symbolEffectがあります。

00:05:17.000 --> 00:05:21.000
修飾子を追加し、目的の効果を渡すだけです。

00:05:21.000 --> 00:05:30.000
ここで、私はvariableColorを渡し、今、シンボルはデフォルトの可変カラーアニメーションを再生しています。

00:05:30.000 --> 00:05:34.000
AppKitとUIKitでもこれを行うのは簡単です。

00:05:34.000 --> 00:05:40.000
画像ビューで新しいaddSymbolEffectメソッドを使用して、可変カラーエフェクトを追加するだけです。

00:05:40.000 --> 00:05:46.000
ドット構文を使用して可変カラーエフェクトを設定できます。

00:05:46.000 --> 00:05:56.000
ここでは、エフェクトをvariableColor.iterative.reversingに変更すると、異なる可変カラーアニメーションになります。

00:05:56.000 --> 00:06:00.000
私のアプリがネットワークに接続していることを示す素晴らしい方法です。

00:06:00.000 --> 00:06:04.000
異なる効果を組み合わせることも可能です。

00:06:04.000 --> 00:06:07.000
ここでは、スケールアップ効果を追加します。

00:06:07.000 --> 00:06:14.000
現在、シンボルはスケールアップしながら可変色をアニメーション化しています。

00:06:14.000 --> 00:06:20.000
これらのAPIは、シンボル画像に無期限の効果を追加する簡単な方法を提供します。

00:06:20.000 --> 00:06:29.000
不定効果は、効果が削除されるまで、シンボルのいくつかの側面を無期限に変更することを思い出してください。

00:06:29.000 --> 00:06:37.000
したがって、シンボルエフェクト修飾子を使用して、アニメーションを継続的に再生する可変カラーエフェクトを適用できます。

00:06:37.000 --> 00:06:41.000
しかし、効果がアクティブなときに制御する方法も必要です。

00:06:41.000 --> 00:06:50.000
アプリがネットワークに正常に接続した後、このアニメーションを再生し続けたくありません。

00:06:50.000 --> 00:06:55.000
これは、ブール値のisActiveパラメータを追加することで実行できます。

00:06:55.000 --> 00:07:00.000
ここでは、インターネットに接続するときにのみ効果を適用します。

00:07:00.000 --> 00:07:07.000
アプリの接続が完了すると、シンボルアニメーションはシームレスに終了します。

00:07:07.000 --> 00:07:14.000
AppKitとUIKitでは、removeSymbolEffectメソッドを使用して不定効果を終了します。

00:07:14.000 --> 00:07:19.000
一回限りのアニメーションを実行する離散効果はどうですか?

00:07:19.000 --> 00:07:23.000
先ほど、この例としてバウンスについて言及しました。

00:07:23.000 --> 00:07:29.000
アプリは、特定のイベントに応じてバウンス効果をトリガーする可能性があります。

00:07:29.000 --> 00:07:34.000
SwiftUIでは、同じ symbolEffect修飾子を使用して離散効果を追加できます。

00:07:34.000 --> 00:07:39.000
ただし、SwiftUIにも値を提供する必要があります。

00:07:39.000 --> 00:07:46.000
値が変わるたびに、SwiftUIは離散効果をトリガーします。

00:07:46.000 --> 00:07:50.000
押すとシンボルが跳ね返るボタンを追加しましょう。

00:07:50.000 --> 00:07:55.000
ボタンのハンドラは、単にbounceValueをインクリメントする必要があります。

00:07:55.000 --> 00:08:00.000
SwiftUIはバウンスバリューの変更を確認し、バウンスをトリガーします。

00:08:00.000 --> 00:08:06.000
画像ビューにバウンス効果を追加することで、AppKitとUIKitでこれを行うことができます。

00:08:06.000 --> 00:08:12.000
バウンスは個別の動作のみをサポートしているため、エフェクトを追加すると1回のバウンスが実行されます。

00:08:12.000 --> 00:08:18.000
後で効果を取り除く必要はありません。

00:08:18.000 --> 00:08:22.000
さて、シンボルが一度だけ跳ね返ってほしくないとしましょう。

00:08:22.000 --> 00:08:25.000
2回跳ねるのはどうですか？

00:08:25.000 --> 00:08:34.000
SwiftUI、AppKit、およびUIKitは、優先リピートカウントを指定できるオプションパラメータをサポートしています。

00:08:34.000 --> 00:08:39.000
これで、エフェクトがトリガーされるとシンボルが2回バウンスします。

00:08:39.000 --> 00:08:44.000
バウンスは、離散的な挙動を持つことができる唯一の効果ではありません。

00:08:44.000 --> 00:08:54.000
先ほど取り上げた2つの効果、パルスと可変色は、無期限の動作だけでなく、離散的な動作もサポートしています。

00:08:54.000 --> 00:09:01.000
言い換えれば、彼らはバウンスのように1回限りのアニメーションを再生することができます。

00:09:01.000 --> 00:09:07.000
つまり、以前のバウンスの例を取り、それをvariableColorに変更できるということです。

00:09:07.000 --> 00:09:15.000
可変色は、非繰り返しの方法で適用されるため、その離散的な動作を使用するように切り替えます。

00:09:15.000 --> 00:09:21.000
今、ボタンを押すと2つの可変色サイクルが実行されます。

00:09:21.000 --> 00:09:25.000
次に、コンテンツの遷移効果について話しましょう。

00:09:25.000 --> 00:09:31.000
2つの異なるシンボル画像の間でアニメーション化する置換効果は、この主な例です。

00:09:31.000 --> 00:09:39.000
ここでは、一時停止記号と再生記号を切り替える画像があります。

00:09:39.000 --> 00:09:47.000
SwiftUIには、symbolEffectと呼ばれる新しいcontentTransitionタイプがあり、Replaceで使用できます。

00:09:47.000 --> 00:09:56.000
したがって、表示するシンボルを切り替えるボタンに画像を入れると、変更がアニメーション化されます。

00:09:56.000 --> 00:10:07.000
AppKitとUIKitでは、新しいsetSymbolImageメソッドを使用して、シンボルコンテンツの遷移を使用して画像を変更できます。

00:10:07.000 --> 00:10:15.000
最後に、ユニークなアニメーションでシンボルを表示および非表示にできるAppear and Disappearがあります。

00:10:15.000 --> 00:10:20.000
これらの効果は、遷移効果として一意に分類されます。

00:10:20.000 --> 00:10:26.000
しかし、それに入る前に、並行宇宙について話す必要があります。

00:10:26.000 --> 00:10:29.000
でも、心配しないでください。見かけほど複雑ではありません。

00:10:29.000 --> 00:10:37.000
ある宇宙では、画像は消えますが、画像ビューはまだ階層にあります。

00:10:37.000 --> 00:10:40.000
言い換えれば、レイアウトに変更はありません。

00:10:40.000 --> 00:10:45.000
正方形と円は互いに同じ距離のままです。

00:10:45.000 --> 00:10:52.000
並行宇宙では、画像ビューは本当に階層から追加され、削除されます。

00:10:52.000 --> 00:10:58.000
その結果、周囲のビューのレイアウトが変更される可能性があります。

00:10:58.000 --> 00:11:05.000
素晴らしいニュースは、出現と消滅が両方の行動をサポートしていることです。

00:11:05.000 --> 00:11:12.000
出現と消滅は無期限の効果であるため、最初の行動は可能です。

00:11:12.000 --> 00:11:16.000
あなたはすでに無期限効果の使い方を知っています。

00:11:16.000 --> 00:11:22.000
SwiftUIでは、.symbolEffect修飾子を使用し、.disappearを渡します。

00:11:22.000 --> 00:11:30.000
isMoonHiddenの値が更新されると、消える効果が適用されます。

00:11:30.000 --> 00:11:38.000
AppKitとUIKitでは、addSymbolEffectを使用し、.disappearまたは.appearを渡します。

00:11:38.000 --> 00:11:43.000
ここでのポイントは、無期限の効果はレイアウトをまったく変更しないということです。

00:11:43.000 --> 00:11:50.000
それらは、画像ビュー内のシンボルのレンダリングを変更するだけです。

00:11:50.000 --> 00:11:53.000
だから、それは最初の行動をカバーしています。

00:11:53.000 --> 00:11:59.000
周囲のレイアウトが変わる平行宇宙にジャンプするにはどうすればよいですか?

00:11:59.000 --> 00:12:02.000
ここで移行行動の出番です。

00:12:02.000 --> 00:12:14.000
トランジションエフェクトは、ビュー階層からのビューの挿入または削除をアニメーション化するSwiftUIの組み込みトランジション修飾子で使用できます。

00:12:14.000 --> 00:12:19.000
前のコードを変換して、遷移動作を使ってみましょう。

00:12:19.000 --> 00:12:28.000
条件付きで消える効果を適用する代わりに、代わりに条件付きでビュー階層にシンボルを追加します。

00:12:28.000 --> 00:12:31.000
次に、トランジション修飾子を追加します。

00:12:31.000 --> 00:12:38.000
SwiftUIには、-あなたが推測した-symbolEffectと呼ばれる新しいトランジションタイプがあります。

00:12:38.000 --> 00:12:46.000
.Disappearを渡すことで、シンボルはアニメーションで追加および削除されます。

00:12:46.000 --> 00:12:51.000
自動と呼ばれるユニークなトランジションエフェクトを使用することもできます。

00:12:51.000 --> 00:12:59.000
この効果は、このシンボルに最も適したトランジションアニメーションを自動的に実行します。

00:12:59.000 --> 00:13:06.000
SwiftUIを使用していない場合は、階層から画像ビューを手動で追加および削除する必要があります。

00:13:06.000 --> 00:13:11.000
UIKitは、役立つエフェクトの完了ハンドラを備えています。

00:13:11.000 --> 00:13:18.000
消える効果を追加するだけで、効果が終了したら、階層から画像ビューを削除します。

00:13:18.000 --> 00:13:20.000
だから、あなたはそれを持っています。

00:13:20.000 --> 00:13:25.000
これは、SwiftUI、AppKit、UIKitのシンボル効果です。

00:13:25.000 --> 00:13:33.000
基本がわかったので、アプリでシンボル効果を次のレベルに引き上げるためのヒントをいくつか紹介します。

00:13:33.000 --> 00:13:41.000
まず、UIImageViewの新しいUIKitメソッドは、UIBarButtonItemでも利用できます。

00:13:41.000 --> 00:13:47.000
これにより、シンボルアニメーションを使用してツールバーに簡単に命を吹き込むことができます。

00:13:47.000 --> 00:13:54.000
一部のUIKitコントロールには、iOS 17にシンボルアニメーションも組み込まれています。

00:13:54.000 --> 00:14:00.000
たとえば、UISliderは、親指がトラックの端に達すると画像をバウンスするようになりました。

00:14:00.000 --> 00:14:10.000
これらのアニメーションがUIControlとUIBarButtonItemの新しいisSymbolAnimationEnabledプロパティで再生するかどうかを制御できます。

00:14:10.000 --> 00:14:17.000
SwiftUIでは、シンボル効果を無効にするための特別な考慮事項もあります。

00:14:17.000 --> 00:14:24.000
SwiftUIの他の修飾子と同様に、 symbolEffect修飾子はビュー階層を介して伝播します。

00:14:24.000 --> 00:14:31.000
これは、親ビューに修飾子を追加することで、複数の画像に効果を適用できることを意味します。

00:14:31.000 --> 00:14:37.000
symbolEffectsRemoved修飾子を使用して、ビューがシンボル効果を継承するのを防ぎます。

00:14:37.000 --> 00:14:46.000
さて、出現、消失、スケールなどのシンボルエフェクトは、アニメーションでシンボルの外観を変更します。

00:14:46.000 --> 00:14:54.000
アニメーションなしで、シンボルを最初にスケールアップしたり、最初に消えたりすることに興味があるかもしれません。

00:14:54.000 --> 00:15:01.000
SwiftUIでは、アニメーションが無効になっているトランザクションを使用してこれを行うことができます。

00:15:01.000 --> 00:15:07.000
ここでは、アニメーションなしでスケールアップ効果を適用するために使用します。

00:15:07.000 --> 00:15:16.000
AppKitとUIKitでは、addSymbolEffectのアニメーションパラメータを使用して、アニメーションなしでエフェクトを適用します。

00:15:16.000 --> 00:15:20.000
最後に、可変値について話しましょう。

00:15:20.000 --> 00:15:33.000
iOS 16とmacOS Venturaは、ボリュームレベルや信号強度などの概念を表すシンボルの別の次元として可変値を導入しました。

00:15:33.000 --> 00:15:42.000
iOS 17とmacOS Sonomaでは、任意の変数値間のクロスフェードを非常に簡単にしています。

00:15:42.000 --> 00:15:47.000
SwiftUIでは、何もする必要はありません。 まったく何もする必要はありません。

00:15:47.000 --> 00:15:57.000
ここでは、可変値がいくつかの状態、この場合は現在の信号強度に基づいているWi-Fiシンボルがあります。

00:15:57.000 --> 00:16:06.000
信号強度が変化すると、Wi-Fiシンボルは自動的に更新され、可変値間でアニメーション化されます。

00:16:06.000 --> 00:16:12.000
AppKitとUIKitでは、自動シンボルコンテンツ遷移を使用します。

00:16:12.000 --> 00:16:21.000
新しいシンボル画像が異なる変数値を持っているかどうかを検出し、その場合、新しい値にクロスフェードします。

00:16:21.000 --> 00:16:24.000
今日は参加してくれてありがとう。ありがとう。

00:16:24.000 --> 00:16:31.000
シンボルをアニメーション化する方法はたくさんあるので、SFシンボルアプリを使って何が可能かを発見してください。

00:16:31.000 --> 00:16:39.000
Symbolsフレームワークを探索し、SwiftUI、AppKit、UIKitで新しいシンボルエフェクトAPIを試してみてください。

00:16:39.000 --> 00:16:47.000
そして最後に、アニメーションを採用して、アプリのインターフェースをこれまで以上に楽しくします。

00:16:47.000 --> 00:16:57.000
シンボルアニメーションに関するヒューマンインターフェイスのガイドラインや、すべての効果をサポートするためにカスタムシンボルを更新するなど、他のシンボルセッションもチェックしてください。

00:16:57.000 --> 23:59:59.000
ありがとう、そして幸せなコーディング。

