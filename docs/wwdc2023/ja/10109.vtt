WEBVTT

00:00:00.000 -> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ♪

00:00:04.000 -> 00:00:10.000
♪

00:00:10.000 -> 00:00:14.000
こんにちは、「空間コンピューティングのためのSwiftUIに会いましょう」へようこそ。

00:00:14.000 -> 00:00:17.000
SwiftUIチームのエンジニア、アンドリューです。

00:00:17.000 -> 00:00:19.000
私たちは空間コンピューティングにとても興奮しています。

00:00:19.000 -> 00:00:24.000
それは、画期的なアプリケーションを構築するための新しい可能性の世界を開きます。

00:00:24.000 -> 00:00:32.000
この講演では、プラットフォーム用の独自の素晴らしいアプリを構築するために知っておくべきことと、それをすべて可能にするSwiftUIの強力な新機能について説明します。

00:00:32.000 -> 00:00:38.000
空間コンピューティング用のアプリを構築する場合、それを構築する最善の方法はSwiftUIを使用することです。

00:00:38.000 -> 00:00:52.000
ボリューム、フルスペースでの没入型体験、新しい3Dジェスチャー、エフェクト、レイアウト、RealityKitとの深い統合など、まったく新しい3D機能により、SwiftUIを大胆な新しい未来にもたらしています。

00:00:52.000 -> 00:00:56.000
これらの新機能はSwiftUIにのみ存在します。

00:00:56.000 -> 00:01:00.000
アプリの既存のコードがある場合、その多くはプラットフォームで動作します。

00:01:00.000 -> 00:01:06.000
すべての新しいコードについて、それを書く最善の方法はSwiftUIです。

00:01:06.000 -> 00:01:12.000
私たちはSwiftUIを深く信じているので、SwiftUIを使ってシステムを一から構築しました。

00:01:12.000 -> 00:01:42.000
Buttons、Toggles、TabViewsなどのアプリのコアビルディングブロックから、Home ViewやControl Centerなどのコア要素、TVやSafariなどの使い慣れたアプリ、Freeformの3DボードやKeynoteの没入型リハーサルなどのまったく新しい体験まで、SwiftUIはこれらすべてに電力を供給します。

00:01:42.000 -> 00:01:51.000
SwiftUIを使用すると、アプリのユーザーインターフェイスを説明し、システムがインテリジェントなデフォルトを選択することで、これらの概念を一度学習し、どこにでも適用できます。

00:01:51.000 -> 00:01:55.000
これは、まったく新しいプラットフォームでさらに便利です。

00:01:55.000 -> 00:02:02.000
既存のSwiftUIの知識は、まったく新しいルックアンドフィールにシームレスに移行します。

00:02:02.000 -> 00:02:04.000
ボタンを考えてみましょう。

00:02:04.000 -> 00:02:09.000
システム上のボタンは、あなたがすでに知っていて、他のプラットフォームから愛しているボタンと多くの共通点があります。

00:02:09.000 -> 00:02:15.000
たとえば、macOSと同様に、このプラットフォームのボタンはデフォルトでボーダースタイルを使用します。

00:02:15.000 -> 00:02:20.000
しかし、ボタンには、プラットフォームのイディオムに適応するためのいくつかの重要な違いもあります。

00:02:20.000 -> 00:02:23.000
シミュレーターにズームインして、詳しく見てみましょう。

00:02:23.000 -> 00:02:27.000
このような縁付きのボタンは、鮮やかな素材の背景を使用しています。

00:02:27.000 -> 00:02:33.000
そして、すべてのボタンは、あなたの目、手、ポインタ入力に反応する豊かなホバー効果を得ます。

00:02:33.000 -> 00:02:38.000
また、押されたときにスケールダウンしてオーディオフィードバックを提供することもできます。

00:02:38.000 -> 00:02:47.000
また、ナビゲーションバーのような場所にあるボタンを使用すると、人々がボタンを見ると、ボタンのラベルが付いたツールチップを自動的に表示できます。

00:02:47.000 -> 00:02:54.000
または、アプリの側面からぶら下がっているTabViewを検討し、アプリのコンテンツに干渉することなく、迅速かつ簡単なナビゲーションを提供します。

00:02:54.000 -> 00:03:00.000
そして、TabViewは、それを見るだけで、各タブのラベルのように、より詳細を表示するように拡張されます。

00:03:00.000 -> 00:03:09.000
TabViewは、アプリのインターフェイスが探している場所に反応するなど、SwiftUIがプラットフォームをユニークにするものをどのように活用できるかの代表的な例です。

00:03:09.000 -> 00:03:17.000
私たちは、ナビゲーションやプレゼンテーションからコントロールやインタラクションまで、アプリのすべてのコアビルディングブロックに、この同じ思慮深いデザインを適用しました。

00:03:17.000 -> 00:03:25.000
アプリが最初からすぐに収まるように、これらのインテリジェントなプラットフォームのデフォルトを提供し、アプリを素晴らしいものにすることに集中できるようにします。

00:03:25.000 -> 00:03:27.000
しかし、私たちはそこで止まりませんでした。

00:03:27.000 -> 00:03:33.000
SwiftUIには、3D環境専用に構築された新しいAPIのスイート全体も含まれています。

00:03:33.000 -> 00:03:37.000
そして、これらのAPIはシーンから始まります。

00:03:37.000 -> 00:03:43.000
SwiftUIのアプリはシーンで構成されており、シーンはビューで構成されていることを思い出してください。

00:03:43.000 -> 00:03:49.000
シーンは、1つ以上のウィンドウを表示するためのWindowGroupのように、アプリへのトップレベルのエントリポイントを形成します。

00:03:49.000 -> 00:03:58.000
空間コンピューティングでは、アプリを構成するシーンには、ウィンドウ、ボリューム、フルスペースの3種類があります。

00:03:58.000 -> 00:04:10.000
Windowsは、SafariやFreeformなどのリッチで完全なアプリから、マインドフルネスのようなより没入感のある体験への入り口となるメニューまで、伝統的で使い慣れたインターフェイスを構築するのに最適です。

00:04:10.000 -> 00:04:17.000
ボリュームは、境界空間でオブジェクトやエクスペリエンスを表示するために特別に構築された新しい3Dウィンドウスタイルです。

00:04:17.000 -> 00:04:28.000
ボリュームは他のアプリと一緒に表示することもでき、クイックルックで3Dモデルのプレビューから友達とFaceTimeでボードゲームをプレイすることまで、軽量の3D体験を構築するための素晴らしいツールになります。

00:04:28.000 -> 00:04:33.000
最後に、豊かで没入感のあるアプリを構築するためのまったく新しい方法であるFull Spacesがあります。

00:04:33.000 -> 00:04:40.000
フルスペースを使用すると、アプリを完全に制御でき、他のアプリからウィンドウを非表示にし、コンテンツをどこにでも配置できます。

00:04:40.000 -> 00:04:48.000
フルスペースは、人々を周囲に接地させながら現実世界を増強したり、信じられないほどの新しい経験に人々を完全に没頭させることができます。

00:04:48.000 -> 00:04:55.000
基調講演でのリアルなリハーサルからスリリングな新しい種類のゲームまで、フルスペースは新しい可能性の世界を解き放ちます。

00:04:55.000 -> 00:04:57.000
そして、これらのシーンタイプは一緒に使用するように設計されています。

00:04:57.000 -> 00:05:04.000
それぞれが異なるユースケース用に特別に構築されており、アプリにとって意味のある方法でそれらを組み合わせることができます。

00:05:04.000 -> 00:05:09.000
建築モデルの軽量3Dプレビューを表示するなど、ウィンドウからボリュームを表示できます。

00:05:09.000 -> 00:05:14.000
または、ボリュームからフルスペースを提示して、人々をそのモデルに完全に没頭させることもできます。

00:05:14.000 -> 00:05:23.000
また、同じタイプの複数のシーンを使用することもできます。これは、アプリを別々の部分に整理し、人々が独立して開いたり閉じたりできる素晴らしい方法です。

00:05:23.000 -> 00:05:28.000
Windowsから始めて、これらのシーンタイプのそれぞれをもう少し深く掘り下げてみましょう。

00:05:28.000 -> 00:05:36.000
私は天文学の大ファンで、他の人が地球と太陽系についてもっと学ぶのを助けるために、仲間のスターゲイザーの何人かと一緒にアプリに取り組んできました。

00:05:36.000 -> 00:05:41.000
今、彼らはすでにこのアプリで素晴らしいスタートを切り、この豪華な入門ページをウィンドウで構築しています。

00:05:41.000 -> 00:05:43.000
しかし、私はさらに進む大きな計画があります。

00:05:43.000 -> 00:05:55.000
ウィンドウを表示するために、他のすべてのプラットフォームで動作するのと同じWindowGroup APIを使用しています。WindowGroupを使用すると、macOSやiPadOSと同様に、複数のウィンドウの作成も自動的にサポートします。

00:05:55.000 -> 00:06:05.000
今、私はアプリに新しい機能を追加することに本当に熱心です:私の仲間の宇宙学生が学び続けることができるように、私たちの太陽系と宇宙に関するあらゆる種類の楽しい事実を収集するライブラリ。

00:06:05.000 -> 00:06:09.000
しかし、私はこの機能をアプリのどこに置くかを理解しようと立ち往生しています。

00:06:09.000 -> 00:06:15.000
その質問に答えるために、窓の構造をビルディングブロックに分解しましょう。

00:06:15.000 -> 00:06:24.000
システム上のウィンドウは、美しいガラスの背景から始まり、アプリのコンテンツを見やすくしながら、周囲を見えるようにすることで、人々を接地に保ちます。

00:06:24.000 -> 00:06:29.000
私のウィンドウ内では、他のプラットフォームですでに慣れ親しんでいるのと同じナビゲーションコンテナを使用できます。

00:06:29.000 -> 00:06:37.000
たとえば、TabViewを使用して、ウィンドウの前縁に表示されるいくつかのトップレベルのコンポーネントにアプリを整理できます。

00:06:37.000 -> 00:06:46.000
また、ナビゲーションスタックと分割ビューを使用して、iPadOSと同様の構造に従って、アプリの階層を整理し、豊富な情報を表示することもできます。

00:06:46.000 -> 00:06:52.000
リストは、ぴったり合う美しい新しいスタイルで情報を整理するためのもう1つの強力なツールです。

00:06:52.000 -> 00:06:58.000
そしてもちろん、ボタン、トグル、ピッカーなどの組み込みのコントロールを使用して、アプリにインタラクティブ性を追加できます。

00:06:58.000 -> 00:07:10.000
さて、このライブラリビューは、私のアプリのトップレベルのエントリポイントを常にアクセスできるようにするのに最適なTabViewの素晴らしい使い方になると思うので、より深い知識は常にタップするだけです。

00:07:10.000 -> 00:07:17.000
そのために、コンテンツをTabViewでラップし、各タブのラベルが付いたtabItemを提供します。

00:07:17.000 -> 00:07:20.000
美味しそう！

00:07:20.000 -> 00:07:24.000
TabViewはユニークな外観で、私の窓の端からぶら下がっています。

00:07:24.000 -> 00:07:29.000
TabViewは、SwiftUIに追加した新しいコンセプト、オーナメントの素晴らしい例です。

00:07:29.000 -> 00:07:36.000
オーナメントを使用すると、アプリのウィンドウに対してアクセサリビューを配置でき、ウィンドウの境界の外に拡張することもできます。

00:07:36.000 -> 00:07:43.000
これらは、ウィンドウ自体に属さない追加のコントロールを表示するのに最適で、アプリのコンテンツの干渉を避けることができます。

00:07:43.000 -> 00:07:49.000
また、新しいオーナメント修飾子を使用して独自のオーナメントを作成することもできます。

00:07:49.000 -> 00:07:53.000
私が取り組んできた図書館の詳細ビューを見てみましょう。私は取り組んできました。

00:07:53.000 -> 00:08:02.000
私はすでにこのページを始めており、いくつかのセクションに分かれています。いくつかの要約テキスト、興味深い統計のグリッド、および楽しい事実の水平スクロールリスト。

00:08:02.000 -> 00:08:04.000
しかし、これらのセクションには何かが欠けています。

00:08:04.000 -> 00:08:09.000
何を理解するために、私たちのアプリの資料を詳しく見てみましょう。

00:08:09.000 -> 00:08:13.000
デフォルトでは、Windowsは美しく新しいガラスの背景に接地されています。

00:08:13.000 -> 00:08:19.000
ガラスは、アプリの視覚的な階層を提供するのに役立つ新しい、活気のある素材で構成するように設計されています。

00:08:19.000 -> 00:08:28.000
Glassは環境に自動的に適応し、どこで使用されていてもコンテンツを読みやすく保ち、アプリがどんな設定でも見栄えが良くなるようにします。

00:08:28.000 -> 00:08:32.000
これは、このプラットフォームでは、アプリに暗い外観や明るい外観がないことを意味します。

00:08:32.000 -> 00:08:34.000
材料はあなたのためにハードワークをします。

00:08:34.000 -> 00:08:42.000
統計グリッドから始めて、資料を使用してライブラリタブを適合させ、読みやすさを向上させる方法を見てみましょう。

00:08:42.000 -> 00:08:48.000
私の統計グリッドセクションは現在、タイトルとグリッド自体を持つVStackで構成されています。

00:08:48.000 -> 00:08:53.000
素材の背景を与えて、このカードを本当にポップにしましょう。

00:08:53.000 -> 00:09:03.000
そのために、私は通常の素材を使用しました。これは、窓のガラスの上に鮮やかで暗い背景を追加し、カードの形を接地し、詳細テキストの読みやすさを向上させます。

00:09:03.000 -> 00:09:07.000
私は丸みを帯びた直腸形状を使用し、カードがちょうどいい感じにするためにいくつかのパディングを追加しました。

00:09:07.000 -> 00:09:11.000
私たちの楽しいファクトカードにも同じ扱いを適用します。

00:09:11.000 -> 00:09:14.000
それははるかに良く見えます!

00:09:14.000 -> 00:09:20.000
次に、楽しいファクトカードを見て、ズームインして詳しく見てみましょう。

00:09:20.000 -> 00:09:24.000
このカードは、私がそれを押すと事実の詳細を表示できるボタンとして構築されています。

00:09:24.000 -> 00:09:28.000
私はまた、その素敵な素材の背景を提供するカスタムボタンスタイルを使用しました。

00:09:28.000 -> 00:09:35.000
ボタンの内容は、タイトル、詳細本文、および人々がより多くを学ぶためにタップするように誘う脚注で構成されています。

00:09:35.000 -> 00:09:39.000
しかし、「もっと詳しく知る」のテキストは少し重すぎるように見えます。

00:09:39.000 -> 00:09:44.000
それを修正するには、テキストにセカンダリフォアグラウンドスタイルを使用します。

00:09:44.000 -> 00:09:55.000
このセカンダリスタイルは、私たちの背景素材内で自動的に適応し、美しい新しい活気に満ちたトリートメントを使用し、そのセカンダリテキストを読みやすく保ちながら、私のコンテンツに大きな視覚的な重みを与えることに注意してください。

00:09:55.000 -> 00:10:05.000
これらの階層的な形状スタイルは、相対的な視覚的な重みを表現するのに最適で、SwiftUIがコンテキストに基づいて使用する特定の素材を自動的に適応させることができます。

00:10:05.000 -> 00:10:15.000
アプリでそれらと他の豊かな形状のスタイルと素材のAPIを使用して、あらゆるコンテキストやあらゆるプラットフォームで見栄えの良いゴージャスなインターフェイスを作成します。

00:10:15.000 -> 00:10:18.000
次に、インタラクションに目を向けましょう。

00:10:18.000 -> 00:10:22.000
空間コンピューティングでは、アプリと対話するまったく新しい方法があります。

00:10:22.000 -> 00:10:28.000
相互作用の最も一般的な形式は、単に要素を見て、間接的なピンチジェスチャーを使用してタップを実行することです。

00:10:28.000 -> 00:10:34.000
また、手を伸ばして触れるだけで、手を使ってアプリを直接操作することもできます。

00:10:34.000 -> 00:10:40.000
また、接続されたトラックパッドまたはハンドジェスチャーを使用すると、最も正確な入力にポインタを使用できます。

00:10:40.000 -> 00:10:49.000
このシステムは、接続されたハードウェアキーボードとも連携し、キーボードショートカット、フォーカス、キー修飾子をサポートし、アプリの生産性を向上させます。

00:10:49.000 -> 00:10:58.000
最後に、このシステムは、VoiceOverやSwitch Controlなど、他のプラットフォームからすでに慣れ親しんでいるのと同じ優れたアクセシビリティ技術をサポートしています。

00:10:58.000 -> 00:11:10.000
最良の部分は、SwiftUIコントロールが箱から出してアクセスできるように構築されており、あなたのために重い作業の多くを行い、アプリを使用するときに誰もが同じ素晴らしい経験を得ることができるということです。

00:11:10.000 -> 00:11:19.000
SwiftUIですでに慣れ親しんでいるジェスチャーはうまく機能し、TapGestureやDragGestureなどの各形式のインタラクションに自動的に適応します。

00:11:19.000 -> 00:11:31.000
そして、RotateGesture3Dのようなまったく新しい種類の豊かな3Dインタラクションが、両手または接続されたトラックパッドを使用して、すべての3次元でビューを回転させることを可能にするために、いくつかの真新しいジェスチャーを追加しました。

00:11:31.000 -> 00:11:41.000
そしてもちろん、VoiceOverやローターからダイナミックタイプや反転色まで、他のプラットフォームからの同じアクセシビリティAPIや技術はすべてうまく機能します。

00:11:41.000 -> 00:11:45.000
そして、これらの機能の多くは、プラットフォーム用に再考されました。

00:11:45.000 -> 00:11:51.000
ドウェルコントロールのように、人々は自分の目だけを使ってあなたのアプリを使用し、ナビゲートすることができます。

00:11:51.000 -> 00:12:00.000
これらの優れた機能と、アプリを誰もがアクセスできるようにする方法の詳細については、「アクセス可能な空間体験を作成する」をチェックしてください。

00:12:00.000 -> 00:12:06.000
空間コンピューティングでインタラクションを簡単かつ直感的に感じさせるための重要なツールは、ホバー効果です。

00:12:06.000 -> 00:12:14.000
たとえば、インタラクティブなビューを見るだけで、システムはビューに微妙なハイライト効果を示し、対話できるフィードバックを提供します。

00:12:14.000 -> 00:12:20.000
これらの効果は、各形式の入力に自動的に適応し、人々に彼らが相互作用しているものに自信を与えます。

00:12:20.000 -> 00:12:25.000
ホバー効果は、応答性の高いフィードバックを提供するだけでなく、ターゲティングを支援するのにも役立ちます。

00:12:25.000 -> 00:12:30.000
そして、ホバー効果は、アプリが人々が見ている場所に正確に反応させる唯一の方法です。

00:12:30.000 -> 00:12:35.000
これらの効果は、人々のプライバシーを尊重するために、アプリのプロセスの外で適用されます。

00:12:35.000 -> 00:12:41.000
ホバー効果は、ボタン、トグル、テキストフィールドなど、ほとんどのコントロールに自動的に追加されます。

00:12:41.000 -> 00:12:46.000
SwiftUIが提供する組み込みスタイルを使用すると、これらの効果がアプリに自動的に表示されます。

00:12:46.000 -> 00:12:54.000
カスタムコントロールやスタイルを使用している場合は、ホバーエフェクトを追加して、反応が良く使いやすいようにしてください。

00:12:54.000 -> 00:12:59.000
アプリに追加した楽しいファクトカードに戻り、ホバー効果でどのように機能するかを確認しましょう。

00:12:59.000 -> 00:13:03.000
それらのカードは素晴らしく見えますが、1つの大きな問題があります。

00:13:03.000 -> 00:13:08.000
カスタムButtonStyleを使用しているので、現在、独自のホバー効果の提供を担当しています。

00:13:08.000 -> 00:13:12.000
1つがなければ、これらのカードが実際にインタラクティブであるというフィードバックはありません。

00:13:12.000 -> 00:13:15.000
良いニュースは、それは超簡単に修正できるということです。

00:13:15.000 -> 00:13:21.000
My ButtonStyleは現在、ボタンのラベルにいくつかのパディングとカスタム素材の背景を追加するだけです。

00:13:21.000 -> 00:13:26.000
不足しているホバーフィードバックを修正するために、HoverEffect修飾子をButtonStyleに追加します。

00:13:26.000 -> 00:13:30.000
これは、コンテキストに適した自動エフェクトを選択します。

00:13:30.000 -> 00:13:32.000
この場合、それがハイライト効果になります。

00:13:32.000 -> 00:13:34.000
詳しく見てみましょう。 

00:13:34.000 -> 00:13:41.000
これらのカードボタンを見ると、インタラクティブであることを明確にする、素敵で微妙なハイライト効果が得られます。

00:13:41.000 -> 00:13:48.000
この効果は、私のボタンの背景の形にも自動的に一致し、誰も楽しい事実を学ぶ機会を逃さないようにします。

00:13:48.000 -> 00:13:51.000
優れたウィンドウ付きアプリの構築については、さらに多くのことをカバーしています。

00:13:51.000 -> 00:14:04.000
さらに進むには、「空間コンピューティングのためにウィンドウアプリをアップグレードする」をチェックして、マルチプラットフォームアプリの更新を歩き、装飾品を追加する方法を学び、ホバー効果、素材などについて深く掘り下げます。

00:14:04.000 -> 00:14:07.000
次に、ボリュームでアプリを次の次元に持って行きましょう。

00:14:07.000 -> 00:14:13.000
私は仲間の宇宙観測者が、私たちが家と呼ぶ惑星について新しい視点を得るのを助けたいです。

00:14:13.000 -> 00:14:16.000
そして、ボリュームはまさにそれを行うのに最適です。

00:14:16.000 -> 00:14:25.000
アプリにボリュームを追加するには、メインウィンドウに使用したのと同じWindowGroupシーンを使用し、ボリュームウィンドウスタイルを指定するだけです。

00:14:25.000 -> 00:14:29.000
また、私たちのコンテンツに合うように、ウィンドウのデフォルトの3Dサイズを提供することもできます。

00:14:29.000 -> 00:14:32.000
シミュレーターでボリュームをチェックしてみましょう。

00:14:32.000 -> 00:14:40.000
私のボリュームのコンテンツの中で、RealityKitの新しいModel3D APIを使用して、デザイナーがまとめた3D Earthモデルを表示しています。

00:14:40.000 -> 00:14:45.000
そして、Model3Dを使えば、私のアプリに3Dコンテンツを追加するのは本当に簡単です。

00:14:45.000 -> 00:14:51.000
Model3Dは画像に似ており、美しい3Dコンテンツの読み込みと表示が簡単です。

00:14:51.000 -> 00:14:58.000
画像とは異なり、3Dコンテンツの読み込みと表示の準備に時間がかかる可能性があるため、Model3Dは常に非同期にロードされます。

00:14:58.000 -> 00:15:05.000
AsyncImageビューと同様に、Model3Dはコンテンツが読み込まれるのを待っている間、プレースホルダビューを自動的に表示できます。

00:15:05.000 -> 00:15:10.000
または、完全にコントロールして、代わりに自分のプレースホルダを表示することもできます。

00:15:10.000 -> 00:15:15.000
Model3Dは単なるSwiftUIビューであることに気づく価値があります。

00:15:15.000 -> 00:15:25.000
3DをSwiftUIアプリに持ち込むことは、レイアウトシステムの自然な拡張、視覚効果、ジェスチャーなどについて、すでに慣れ親しんでいるのと同じ概念に基づいて構築されます。

00:15:25.000 -> 00:15:28.000
方法を理解するために、この例に基づいて構築しましょう。

00:15:28.000 -> 00:15:31.000
地球に命を吹き込むために、いくつかのコントロールを追加したい。

00:15:31.000 -> 00:15:36.000
私はすでにコントロールパネルのUIを構築しており、それを地球モデルの前に置きたいと思っています。

00:15:36.000 -> 00:15:39.000
これを行うには、ZStackレイアウトを簡単に使用できます。

00:15:39.000 -> 00:15:45.000
ZStackのようなレイアウトは、幅と高さと同様に、コンテンツの深さを自動的に認識します。

00:15:45.000 -> 00:15:52.000
そして、デフォルトでは、Model3Dは、画像が2Dであるように、3次元すべてでそのコンテンツに合うようにサイズです。

00:15:52.000 -> 00:15:58.000
実際、レイアウトシステム全体がコンテンツの深さと利用可能なスペースを認識し、それに応じてレイアウトを調整します。

00:15:58.000 -> 00:16:13.000
また、前面または背面に沿ってSwiftUIビュー間の間隔を追加する新しいpadding3D修飾子のように、アプリのレイアウトで深さがどのように動作するかを制御する新しい修飾子もあります。ここでは、コントロールに呼吸する余地を与えることができます。

00:16:13.000 -> 00:16:21.000
ボリュームはあらゆる角度から見るように設計されているので、アプリのコンテンツが3次元すべてでどのように配置されているかを考えることが重要です。

00:16:21.000 -> 00:16:33.000
最後に、私のコントロールが素晴らしく見え、接地された感じを感じさせるために、私は新しいglassBackgroundEffect修飾子を使用し、以前に私たちの標準的なウィンドウで持っていたのと同じ美しいガラス処理を与えるようにします。

00:16:33.000 -> 00:16:36.000
今、これらのコントロールはロックする準備ができているように見えます。

00:16:36.000 -> 00:16:45.000
3Dグローブに追加したいもう1つのことは、ランダムな場所に地球を回転させる簡単な方法です。これは、次の休暇の目的地を計画する私のお気に入りの方法です。

00:16:45.000 -> 00:16:52.000
これを行うには、Model3Dに3D回転効果を追加します。この場合は、y軸についてです。

00:16:52.000 -> 00:16:56.000
そして、状態変数を使用して、使用する回転を追跡します。

00:16:56.000 -> 00:17:04.000
その後、タップジェスチャーを追加し、それが起動したら、新しい弾力のある春のアニメーションで回転をランダムな量に変更します。

00:17:04.000 -> 00:17:05.000
これをスピンさせましょう。

00:17:05.000 -> 00:17:08.000
そうそう、西半球。

00:17:08.000 -> 00:17:11.000
それは本当に私の夏の計画を絞り込みます!

00:17:11.000 -> 00:17:15.000
私たちが地球に適用したばかりの回転効果は本当に3Dであることに注意してください。

00:17:15.000 -> 00:17:24.000
スケール、オフセット、カスタム3D変換など、新しい3D機能で使用する方法をすでに知っているこれらのジオメトリエフェクトをアップグレードしました。

00:17:24.000 -> 00:17:29.000
今、これはすでに地球をチェックする素晴らしい方法ですが、私たちはそれをさらに良くすることができると思います。

00:17:29.000 -> 00:17:36.000
これを行うには、RealityKitのフルパワーに簡単にアクセスできる新しいSwiftUIビューであるRealityViewを使用します。

00:17:36.000 -> 00:17:41.000
RealityViewでは、RealityKitのコンテンツをロードして作成するためのクロージャを提供します。

00:17:41.000 -> 00:17:46.000
地球モデルを表示するには、ModelEntityを作成し、読み込まれるまで待ちます。

00:17:46.000 -> 00:17:50.000
読み込みが終わったら、RealityViewのコンテンツに追加して表示します。

00:17:50.000 -> 00:17:54.000
RealityViewのクロージャでasync-awaitを直接使用できることに注意してください。

00:17:54.000 -> 00:18:00.000
Model3Dと同様に、コンテンツが読み込まれるまでプレースホルダが自動的に表示されます。

00:18:00.000 -> 00:18:07.000
地球エンティティをロードしたので、RealityKit APIの豊富なライブラリにアクセスして、コンテンツを本当に輝かせます。

00:18:07.000 -> 00:18:13.000
この場合、私は地球にいくつかの照明を追加して、より日当たりの良い性質を与えたいです。

00:18:13.000 -> 00:18:19.000
私はすでに私の特別な画像ベースの照明を追加するためにいくつかのRealityKitコードを書いたので、ここでそれを呼びます。

00:18:19.000 -> 00:18:22.000
今、それは楽しそうに見えます!

00:18:22.000 -> 00:18:25.000
RealityViewでカバーすべきことはもっとたくさんあります。

00:18:25.000 -> 00:18:31.000
RealityViewを使用すると、ユーザーインターフェイスと豊かな3D体験の世界を融合することがかつてないほど簡単になりました。

00:18:31.000 -> 00:18:40.000
RealityKitを使用すると、カスタム素材やシェーダー、物理学、複雑なアニメーションなど、あらゆる種類の豊かな動作を追加できます。

00:18:40.000 -> 00:18:45.000
RealityViewとRealityKitの詳細については、より深い講演をいくつか準備しました。

00:18:45.000 -> 00:18:50.000
飛び込む準備ができたら、「RealityKitで空間体験を構築する」をチェックしてください。

00:18:50.000 -> 00:18:56.000
とりあえず、RealityViewの2つのクールな機能、ジェスチャーとアタッチメントに焦点を当てましょう。

00:18:56.000 -> 00:19:03.000
RealityViewを使用すると、SwiftUIジェスチャーが自動的に機能し、3Dコンテンツに命を吹き込むことがこれまで以上に簡単になります。

00:19:03.000 -> 00:19:11.000
前に追加したタップジェスチャーに基づいて、タップした場所に基づいて地球にマーカーを配置して、次にどこに旅行すべきかを正確に把握したい。

00:19:11.000 -> 00:19:18.000
これを行うには、SpatialTapGestureを使用します。これにより、タップの完全な3D位置が提供されます。

00:19:18.000 -> 00:19:25.000
タップした地球のエンティティのどこにあるかを特定するために、新しい targetedToAnyEntity ジェスチャー修飾子を使用します。

00:19:25.000 -> 00:19:34.000
これにより、タップしたエンティティや、そのエンティティとの相対的な場所など、必要なコンテキストが提供され、ピンの場所を検索するために使用します。

00:19:34.000 -> 00:19:39.000
地球儀にピンを表示するには、RealityViewの添付ファイルを使用できます。

00:19:39.000 -> 00:19:45.000
添付ファイルは、カスタムSwiftUIビューをRealityKitエンティティとインラインで混在させるのに最適です。

00:19:45.000 -> 00:19:54.000
RealityViewの添付ファイルクロージャ内に他のSwiftUIビューを直接追加して、RealityViewのどこにでもRealityKitエンティティとして配置できるようにすることができます。

00:19:54.000 -> 00:19:59.000
ここにピンの添付ファイルを追加し、それを識別するために使用できるタグを付けます。

00:19:59.000 -> 00:20:05.000
その後、アップデートのクロージャで、添付ファイルのエンティティを検索し、RealityViewのコンテンツに追加して表示します。

00:20:05.000 -> 00:20:09.000
そして、タップの位置に合わせてそのエンティティを配置します。

00:20:09.000 -> 00:20:12.000
これをもう一度スピンしましょう!

00:20:12.000 -> 00:20:14.000
荷造りした方がいいみたいだね！

00:20:14.000 -> 00:20:33.000
私たちは、驚くべき体積アプリを構築する可能性にとても興奮しているので、SwiftUIアプリを次の次元に持っていくのに役立つ講演を準備しました。そこでは、SwiftUIをRealityKitと一緒に使用したり、豊富な3Dインタラクションを構築したり、レイアウトに深みを加えたりすることなどについて詳しく学びます。

00:20:33.000 -> 00:20:42.000
最後に、SwiftUIを使用して豊かで没入型の3D体験を構築するまったく新しい方法であるFull Spacesで、このアプリをウィンドウの外に出しましょう。

00:20:42.000 -> 00:20:45.000
フルスペースで、あなたは完全にコントロールします。

00:20:45.000 -> 00:20:50.000
コンテンツを環境のどこにでも配置して、創造的な新しい方法で人々の環境を増強することができます。

00:20:50.000 -> 00:20:55.000
または、周囲を隠して素晴らしい新しい体験を作り出すことで、人々に完全に没頭させることもできます。

00:20:55.000 -> 00:20:59.000
宇宙に飛び込んで、太陽系に命を吹き込みましょう。

00:20:59.000 -> 00:21:06.000
私はすでにメインウィンドウのこのページで有利なスタートを切り、アームチェアの宇宙飛行士を自分で宇宙空間を見るように招待しました。

00:21:06.000 -> 00:21:10.000
今、私はちょうど私のスペースを作成し、リフトオフのためにこのボタンを配線する必要があります。

00:21:10.000 -> 00:21:16.000
アプリにフルスペースを追加するには、WindowGroupsと同じように新しいImmersiveSpaceシーンを追加するだけです。

00:21:16.000 -> 00:21:20.000
その本文内では、私のスペースのコンテンツのルートビューを提供します。

00:21:20.000 -> 00:21:25.000
また、メインウィンドウからプログラムで開くことができるように、自分のスペースのIDも提供します。

00:21:25.000 -> 00:21:30.000
このスペースを開くには、新しいopenImmersiveSpace環境アクションを使用します。

00:21:30.000 -> 00:21:35.000
私のボタンの中で、そのアクションを呼び出し、スペースのIDを渡します。

00:21:35.000 -> 00:21:38.000
そして、ちょうどそのように...

00:21:38.000 -> 00:21:42.000
...私たちにはリフトオフがあります!

00:21:42.000 -> 00:21:44.000
これは素晴らしいスタートです。

00:21:44.000 -> 00:21:52.000
私は今までできなかった方法で地球に近づくことができ、それらの現実的な雲のように、すべての豊かなディテールに本当に感謝することができます。

00:21:52.000 -> 00:21:55.000
しかし、ここには何かが欠けています。

00:21:55.000 -> 00:21:58.000
この空間に本当に没頭したい。

00:21:58.000 -> 00:22:03.000
これを行うには、スペースの強力なツールであるイマージョンスタイルを使用します。

00:22:03.000 -> 00:22:10.000
フルスペースは、いくつかのイマージョンスタイルのいずれかで来ることができ、あなたはその場でこれらのスタイル間を移行することができます。

00:22:10.000 -> 00:22:19.000
混合没入感により、あなたの空間のコンテンツは現実世界と共存し、軽量な体験や人々の環境を増強するのに最適です。

00:22:19.000 -> 00:22:27.000
完全な没入感で、あなたのアプリは完全に没入型になり、人々の環境を隠し、それらを素晴らしい新しい世界に運ぶことができます。

00:22:27.000 -> 00:22:33.000
そして、プログレッシブイマージョンは、人々を周辺で現実世界に根ざさせる経験のための素晴らしい中間地点です。

00:22:33.000 -> 00:22:40.000
プログレッシブイマージョンでは、デバイスのデジタルクラウンを使用して、どの程度イマージョンが自分にとって正しいと感じるかを正確にダイヤルインすることもできます。

00:22:40.000 -> 00:22:47.000
今、私は完全に没入型のスペースは、それを本当にこの世界から感じさせるために私のアプリにぴったりだと思います。

00:22:47.000 -> 00:22:55.000
これを行うには、ImmersiveSpaceシーンに戻り、完全なイマージョンスタイルで新しいイマージョンスタイル修飾子を追加します。

00:22:55.000 -> 00:23:02.000
ここでは、サポートされているスタイルのリストと現在の選択の両方を提供し、その場でスタイルを変更できるようにします。

00:23:02.000 -> 00:23:06.000
完全な没入感を使うと、システムは人々の現実世界の環境を完全に隠します。

00:23:06.000 -> 00:23:11.000
だから、私のアプリを使って人々を没頭させるための仮想環境を提供する必要があります。

00:23:11.000 -> 00:23:15.000
そしてもちろん、宇宙空間そのものよりも良い環境はありますか?

00:23:15.000 -> 00:23:20.000
私たちは、星のフィールドを表示する新しいRealityViewを作成することで、私たちの環境で星に手を伸ばします。

00:23:20.000 -> 00:23:28.000
RealityViewのメイククロージャ内で、スターフィールドエンティティをロードし、準備ができたら、RealityViewのコンテンツに追加します。

00:23:28.000 -> 00:23:33.000
次に、地球と太陽と一緒に太陽系の天体にスターフィールドビューを追加します。

00:23:33.000 -> 00:23:39.000
ズームインして詳しく見てみましょう。

00:23:39.000 -> 00:23:51.000
今、これは私を本当に夢中にさせています。

00:23:51.000 -> 00:23:54.000
私のスペースを次のレベルに引き上げるために、私はARKitを使うことができます。

00:23:54.000 -> 00:24:09.000
ARKitは、システムと深く統合された強力なフレームワークであり、人々の現実世界の環境の豊富なリアルタイム理解へのアクセスを提供し、世界追跡やシーン理解などのAPIを使用して、現実世界のサーフェスにコンテンツを配置できます。

00:24:09.000 -> 00:24:17.000
そして、ハンドトラッキングは、カスタムハンドジェスチャーを構築したり、現実的な物理学を使用してコンテンツと対話したりするために使用できる信じられないほどの新しいツールです。

00:24:17.000 -> 00:24:23.000
スペースでARKitを使用する方法の詳細については、「空間コンピューティングのためのARKitに会いましょう」をチェックしてください。

00:24:23.000 -> 00:24:31.000
今、私はARKitが私のアプリでロックを解除する可能性にとても興奮しているので、私が取り組んでいるもう1つの機能のスニークピークをあげたいと思いました。

00:24:31.000 -> 00:24:39.000
ARKitを私の空間に統合することで、私は地球を召喚するための新しい手のジェスチャーを実装することができました。

00:24:39.000 -> 00:24:44.000
だから、あなたは手のひらで世界を握ることができます。

00:24:44.000 -> 00:24:47.000
私たちは、あなたがフルスペースでできることの表面を引っ掻いているだけです。

00:24:47.000 -> 00:24:51.000
そして、私たちはあなたが宇宙に打ち上げるための別の話を用意しました。

00:24:51.000 -> 00:25:04.000
「SwiftUIで窓を越えて」をチェックして、空間の基礎を深く掘り下げ、周囲に効果を加える、仮想手を表示する、SharePlayとの統合などの高度なツールについて学んでください。

00:25:04.000 -> 00:25:13.000
また、スペース内のコンテンツのレンダリングを完全に制御する必要がある場合は、Metalと新しいCompositorServicesフレームワークを使用して行うこともできます。

00:25:13.000 -> 00:25:17.000
詳細については、「没入型アプリのDiscover Metal」をご覧ください。

00:25:17.000 -> 00:25:23.000
SwiftUIを使用して構築するすべての素晴らしい新しいアプリをチェックするのが待ちきれません。

00:25:23.000 -> 00:25:32.000
美しい窓からボリュームのあるまったく新しい次元、フルスペースでの信じられないほどの没入型体験まで、新しい可能性の世界があなたを待っています。

00:25:32.000 -> 00:25:42.000
もっと深く掘り下げる準備ができたら、「空間デザインの原則」など、さらに素晴らしい講演があり、アプリを本当に輝かせるように設計する方法について詳しく知ることができます。

00:25:42.000 -> 00:25:48.000
また、プラットフォームに持ち込みたい既存のUIKitコードがある場合は、「Meet UIKit for spatial Computing」をチェックしてください。

00:25:48.000 -> 00:25:52.000
見てくれてありがとう、そして空間コンピューティングで爆発してください!

00:25:52.000 -> 23:59:59.000
♪

