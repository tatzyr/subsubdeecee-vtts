WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
サイラス:こんにちは、「宣言型デバイス管理の進歩を探る」セッションへようこそ。

00:00:15.000 --> 00:00:21.000
私の名前はサイラス・ダブーで、デバイス管理クライアントチームのエンジニアです。

00:00:21.000 --> 00:00:27.000
宣言型デバイス管理のエキサイティングな新機能を説明するためにここにいます。

00:00:27.000 --> 00:00:34.000
宣言型デバイス管理は、すべてのAppleデバイス用の新しいデバイス管理ソリューションです。

00:00:34.000 --> 00:00:50.000
これは、デバイスがサーバーからプロンプトを表示せずに管理ロジックを適用できる自律的で積極的な管理機能を提供し、非同期ステータスレポートをサポートし、サーバーがデバイスをポーリングする必要を回避します。

00:00:50.000 --> 00:00:58.000
また、MDMに組み込まれているため、既存の製品との簡単な移行と統合が可能です。

00:00:58.000 --> 00:01:07.000
WWDC22では、「将来のプロトコル機能の焦点は、宣言的なデバイス管理になるだろう」と述べた。

00:01:07.000 --> 00:01:16.000
そして、このリリースでは、「新しいプロトコル機能の焦点は宣言的なデバイス管理です」とフォローアップしています。

00:01:16.000 --> 00:01:22.000
このリリースには、宣言的なデバイス管理を介してのみ利用可能な新しくて魅力的な機能があります。

00:01:22.000 --> 00:01:29.000
これらには、MDMとの同等性を提供し、MDMからの移行を支援する機能が含まれます。

00:01:29.000 --> 00:01:46.000
WWDC21で最初に導入され、WWDC22でより基本的な機能で強化された宣言型デバイス管理は、MDM開発者や企業管理者の間で多くの興奮を生み出しました。

00:01:46.000 --> 00:01:55.000
いくつかのMDM開発者は、すでに宣言的なデバイス管理サポートを備えたMDMサーバーを実装し、出荷しています。

00:01:55.000 --> 00:02:04.000
このリリースの新機能により、強化された管理機能セットを顧客に提供するために、さらに多くの機能がそうしたいと思うでしょう。

00:02:04.000 --> 00:02:18.000
宣言型デバイス管理とは何か、それを製品に採用する方法については、WWDC21とWWDC22のセッションを確認してください。

00:02:18.000 --> 00:02:22.000
プラットフォームサポートのクイックアップデート。

00:02:22.000 --> 00:02:29.000
MDMと宣言型デバイス管理がwatchOSで利用可能になりました。

00:02:29.000 --> 00:02:37.000
詳細は、セッション「Apple Watchのデバイス管理を満たす」に記載されています。

00:02:37.000 --> 00:02:49.000
宣言型デバイス管理は、Apple内の多くの異なるチーム間のコラボレーションであり、MDM開発者や企業管理者に堅牢で安全なソリューションを提供することを目指しています。

00:02:49.000 --> 00:03:07.000
私たちは常に、管理者に企業データを保護し、ポリシーの遵守を強制するために必要なツールを提供しながら、ユーザーとそのデバイスのプライバシーとセキュリティを保護するシームレスなユーザーエクスペリエンスを提供することに重点を置いています。

00:03:07.000 --> 00:03:13.000
また、MDM開発者や企業管理者とのコラボレーションでもあります。

00:03:13.000 --> 00:03:21.000
あなたのフィードバックは、このリリースで提供している機能に優先順位を付けるのに役立ちました。

00:03:21.000 --> 00:03:30.000
宣言型デバイス管理の基本的な要素が導入されたため、コア管理機能の実装に焦点が移りました。

00:03:30.000 --> 00:03:33.000
それらが何であるかを調べてみましょう。

00:03:33.000 --> 00:03:37.000
まず、ソフトウェアの更新を強制する新しい方法です。

00:03:37.000 --> 00:03:41.000
第二に、アプリの管理です。

00:03:41.000 --> 00:03:48.000
第三に、システムサービスをロックダウンし、バックグラウンドタスクを監視することでデバイスを保護することです。

00:03:48.000 --> 00:03:54.000
その後、デバイスで使用するための証明書とID資格情報をインストールします。

00:03:54.000 --> 00:04:03.000
そして最後に、MDMから宣言型デバイス管理へのプロファイルの移行を容易にする新しい動作。

00:04:03.000 --> 00:04:16.000
ソフトウェアアップデートチームと協力して、宣言型デバイス管理に基づいて構築されたmacOS、iOS、およびiPadOSデバイスに新しいマネージドソフトウェアアップデート体験をもたらしています。

00:04:16.000 --> 00:04:26.000
I.T.管理者は、必要な機能と修正が実施されていることを保証するために、ユーザーのデバイスに最新のシステムソフトウェアアップデートがインストールされていることを確認する必要があります。

00:04:26.000 --> 00:04:41.000
管理者は、ソフトウェアの更新を強制し、新しいOSリリースが組織のアプリやサービスと互換性があることを確認するためにテストできるように、短期間延期する必要があります。

00:04:41.000 --> 00:04:46.000
また、そうするように命じられたときに、デバイスが適切に更新されていることを確認する必要があります。

00:04:46.000 --> 00:04:52.000
大規模なデバイスの場合、これは時間のかかる作業になる可能性があります。

00:04:52.000 --> 00:04:59.000
今日、管理者はMDMコマンドを使用して、監視対象のデバイスにアップデートをインストールできます。

00:04:59.000 --> 00:05:04.000
サーバーがデバイスをポーリングすると、更新の状態に関するフィードバックを受け取ることができます。

00:05:04.000 --> 00:05:16.000
管理者は、プロファイルを介してマイナーな更新や主要な更新を延期し、監視対象のデバイスが指定された期間中にユーザーにソフトウェア更新を提供するのを防ぐこともできます。

00:05:16.000 --> 00:05:27.000
しかし、あなたのフィードバックに基づいて、管理者とユーザーの両方の全体的な管理ソフトウェアアップデートエクスペリエンスを改善したいと考えています。

00:05:27.000 --> 00:05:40.000
宣言型デバイス管理は、管理者が更新プロセスをより詳細に制御し、ユーザーにより有益な体験を提供すると同時に、更新がタイムリーに行われることを保証するメカニズムです。

00:05:40.000 --> 00:05:44.000
方法は次のとおりです。

00:05:44.000 --> 00:05:47.000
構成は、ソフトウェアアップデートの動作を定義するために使用できます。

00:05:47.000 --> 00:06:00.000
デバイスは、更新プロセスをユーザーに通知し、期限前に自分で更新を行う機会を与えながら、これらの指示を積極的に実行することができます。

00:06:00.000 --> 00:06:14.000
述語は、デバイスがシードおよびGMビルドにアップグレードされるとき、または迅速なセキュリティ応答が利用可能になったときに、ソフトウェアアップデートの順序を制御するための洗練されたロジックに電力を供給するために使用できます。

00:06:14.000 --> 00:06:23.000
また、非同期ステータスレポートは、問題が発生した場合に迅速に解決できるように、管理者がソフトウェア更新フローを最新の状態に保ちます。

00:06:23.000 --> 00:06:28.000
これがどのように実装されているかを調べてみましょう。

00:06:28.000 --> 00:06:36.000
特定の時間までに、監視対象デバイスの強制的なソフトウェアアップデートを管理するための構成が追加されました。

00:06:36.000 --> 00:06:46.000
また、インストール状態の詳細や障害の原因など、デバイス上のソフトウェア更新フローを報告する一連の新しいステータス項目もあります。

00:06:46.000 --> 00:06:50.000
いくつかの例を勉強しましょう。

00:06:50.000 --> 00:06:59.000
この設定例は、特定のOSバージョンのソフトウェアアップデートを強制し、特定の時間にビルドします。

00:06:59.000 --> 00:07:06.000
TargetOSVersionキーは、デバイスが更新する必要があるOSバージョンを示します。

00:07:06.000 --> 00:07:12.000
オプションのTargetBuildVersionキーを使用すると、必要に応じて特定のシードビルドをターゲットにすることができます。

00:07:12.000 --> 00:07:17.000
両方が設定されている場合、TargetBuildVersionはTargetOSVersionよりも優先されます。

00:07:17.000 --> 00:07:26.000
指定されたバージョンの更新が見つからない場合、デバイスはソフトウェア更新サーバーによって販売されるデフォルトの更新を検索します。

00:07:26.000 --> 00:07:34.000
TargetLocalDateTimeキーは、更新が強制されるローカルの日付と時刻を指定します。

00:07:34.000 --> 00:07:40.000
以下は、ソフトウェア更新ステータス項目のステータスレポートの例です。

00:07:40.000 --> 00:07:46.000
インストール理由ステータス項目は、インストールが発生した理由を説明する一連の理由です。

00:07:46.000 --> 00:07:55.000
これには、更新が宣言、システム、ユーザー、またはそれらの組み合わせによって開始されたかどうかを示すことが含まれます。

00:07:55.000 --> 00:08:03.000
保留中のバージョンのステータス項目は、システムがインストールしようとしているソフトウェアアップデートバージョンを示します。

00:08:03.000 --> 00:08:11.000
インストール状態のステータス項目は、更新に関してシステムが現在どのような状態にあるかを識別します。

00:08:11.000 --> 00:08:19.000
失敗理由ステータス項目は、エラーの数と、最新のエラーの理由とタイムスタンプを指定します。

00:08:19.000 --> 00:08:24.000
ユーザーの観点からこれがどのように見えるかを調べてみましょう。

00:08:24.000 --> 00:08:30.000
ユーザーは、どの更新がいつ実施されているかを明確に識別できます。

00:08:30.000 --> 00:08:36.000
締め切り前に更新するか、その夜にスケジュールするかを簡単に選択できます。

00:08:36.000 --> 00:08:49.000
ユーザーが「今夜更新」を選択した場合、更新はダウンロードされ、準備され、デバイスが十分な充電があり、十分に非アクティブであるその夜に更新するためにキューに入れられます。

00:08:49.000 --> 00:08:58.000
ユーザーがすぐに更新をトリガーしない場合、ソフトウェアアップデートは締め切りまで毎日利用可能な更新通知を投稿します。

00:08:58.000 --> 00:09:05.000
macOSでは、通知が表示されたときに「インストール」または「今夜試す」を選択するオプションがあります。

00:09:05.000 --> 00:09:12.000
締め切りの24時間前、この通知は1時間ごとに表示され、おやすみモードは無視されます。

00:09:12.000 --> 00:09:19.000
締め切りの1時間前に、通知は30分ごとに表示され、その後10分ごとに表示されます。

00:09:19.000 --> 00:09:27.000
ユーザーが休暇中だったのでデバイスの電源を切って、その結果、締め切りに間に合わなかったとしましょう。

00:09:27.000 --> 00:09:39.000
ユーザーがデバイスを再起動すると、ソフトウェアアップデートはアップデートの期限が過ぎているという通知を投稿し、アップデートは1時間以内に試行されます。

00:09:39.000 --> 00:09:45.000
同様の経験はiOSとiPadOSで起こります。

00:09:45.000 --> 00:09:53.000
ここでは、下部のハイライトされたセクションに示すように、管理者がiOS 17.0へのアップデートを強制しています。

00:09:53.000 --> 00:10:03.000
ユーザーは、macOSと同様に、今すぐ更新または今夜更新を簡単に選択でき、更新が締め切り前に確実にインストールされるようにします。

00:10:03.000 --> 00:10:11.000
また、macOSと同様に、アップデートをトリガーしないことを選択した場合、リマインダー通知は増加するケイデンスで送信されます。

00:10:11.000 --> 00:10:16.000
そして、同じ過去の行動が起こります。

00:10:16.000 --> 00:10:22.000
ソフトウェアアップデート宣言とMDMコマンドとプロファイルが共存できます。

00:10:22.000 --> 00:10:31.000
ただし、宣言によって強制されるソフトウェアの更新は、常にMDMコマンドとプロファイルよりも優先されます。

00:10:31.000 --> 00:10:40.000
ソフトウェアアップデートの設定とステータス項目は、macOS、iOS、iPadOSで利用できます。

00:10:40.000 --> 00:10:48.000
それでは、デバイス管理のもう1つの重要な側面であるアプリに注意を向けましょう。

00:10:48.000 --> 00:10:56.000
管理者は、管理対象デバイス上のアプリのライセンス、インストール、更新、および削除を管理する必要があります。

00:10:56.000 --> 00:11:08.000
これには、問題が発生した場合のサポートの提供や、組織内でさまざまな役割を持つさまざまなユーザーに割り当てられたデバイスの再プロビジョニングが含まれます。

00:11:08.000 --> 00:11:23.000
MDM開発者は、管理者がアプリを管理し、MDMアプリ関連のコマンドを使用し、AppleサーバーAPIを使用してアプリのメタデータを検索し、ライセンスを管理するのに役立つさまざまなツールを提供します。

00:11:23.000 --> 00:11:37.000
MDMの必須のポーリングの性質は、問題が発生したとき、またはユーザーが役割を変更したとき、またはデバイスをユーザー間で循環させる必要があるときに、管理者がタイムリーに対応するのに苦労することが多いことを意味します。

00:11:37.000 --> 00:11:44.000
また、ユーザーは、最初に設定したり変更したりするときに、デバイスの反応が遅くなります。

00:11:44.000 --> 00:11:56.000
宣言型デバイス管理は、アプリの管理に関して管理者に新しい、より効率的なエクスペリエンスを提供し、より応答性と信頼性の高いエクスペリエンスをユーザーに提供します。

00:11:56.000 --> 00:11:59.000
方法は次のとおりです。

00:11:59.000 --> 00:12:05.000
設定は、必要に応じてデバイスで使用できるアプリを指定するために使用できます。

00:12:05.000 --> 00:12:13.000
それらは、デバイスの条件が使用を決定するときにすでに存在するように、事前にデバイスに送信することができます。

00:12:13.000 --> 00:12:23.000
述語は、サーバーによって設定されたデバイスのステータスまたは管理プロパティに基づいて、どのアプリセットがどのユーザーが利用できるかを制御するためのパワーロジックに使用できます。

00:12:23.000 --> 00:12:29.000
そのため、管理者は必要に応じてアプリのセットをすばやく切り替えることができます。

00:12:29.000 --> 00:12:38.000
アプリはインストールしなくてもユーザーに表示できるため、ユーザーはサーバーの介入を必要とせずにインストールするタイミングを選択できます。

00:12:38.000 --> 00:12:43.000
これにより、侵入的なユーザー同意プロンプトの必要性も回避されます。

00:12:43.000 --> 00:12:53.000
また、非同期ステータスレポートは、管理対象アプリの変更を管理者に最新の状態に保ち、問題が発生した場合に迅速に解決できるようにします。

00:12:53.000 --> 00:12:56.000
これがどのように実装されているかを調べてみましょう。

00:12:56.000 --> 00:13:03.000
個々のアプリのインストール、更新、削除を管理するための設定が追加されました。

00:13:03.000 --> 00:13:09.000
管理対象アプリのリストで報告する新しいステータス項目もあります。

00:13:09.000 --> 00:13:17.000
アプリは、App Storeから入手することも、MDMと同様に、マニフェストで指定されたエンタープライズアプリであることもできます。

00:13:17.000 --> 00:13:23.000
macOSでは、パッケージはサポートされていますが、単一のアプリのみを含める必要があります。

00:13:23.000 --> 00:13:28.000
また、アプリのインストールは、ユーザーがトリガーするオプションとしてマークすることができます。

00:13:28.000 --> 00:13:32.000
いくつかの例を勉強しましょう。

00:13:32.000 --> 00:13:39.000
この管理対象アプリ設定の例では、アプリストアからPagesアプリがインストールされます。

00:13:39.000 --> 00:13:42.000
インストールの動作は、アプリが必要であることを示します。

00:13:42.000 --> 00:13:49.000
これにより、設定が有効になると、アプリがすぐにインストールされ、管理されます。

00:13:49.000 --> 00:13:54.000
アプリもユーザーによって削除できません。

00:13:54.000 --> 00:14:06.000
または、インストール動作を「オプション」に設定することもできます。設定が有効になると、ユーザーは必要なときにアプリをダウンロードできるようになります。

00:14:06.000 --> 00:14:12.000
ユーザーはいつでも好きなときにアプリを削除することもできます。

00:14:12.000 --> 00:14:20.000
管理を制御するための他の属性は、アプリごとのVPNなど、構成に存在します。

00:14:20.000 --> 00:14:26.000
この例は、インストールが完了したPagesアプリのステータス項目を示しています。

00:14:26.000 --> 00:14:34.000
識別子キーは、ステータスオブジェクトの一意の識別子であり、アプリのバンドル識別子に設定されます。

00:14:34.000 --> 00:14:39.000
宣言識別キーは、アプリを管理している設定の識別子です。

00:14:39.000 --> 00:14:46.000
デバイスで変更が発生するとステータスが非同期に更新されるため、ポーリングは必要ありません。

00:14:46.000 --> 00:14:50.000
では、ユーザーエクスペリエンスに注意を向けましょう。

00:14:50.000 --> 00:14:57.000
多くのMDM開発者は、ユーザーに管理体験を制御するためのオプションを提供するアプリを提供しています。

00:14:57.000 --> 00:15:04.000
多くの場合、アプリのリストは、ユーザーが何をインストールし、いつインストールするかを選択できるようにするために存在します。

00:15:04.000 --> 00:15:08.000
ユーザーはアプリをタップしてインストールをトリガーできます。

00:15:08.000 --> 00:15:19.000
これを実装するには、アプリとMDMサーバーの間でプライベートプロトコルが必要で、アプリのリストを伝え、ユーザーからアクションをサーバーに送り返します。

00:15:19.000 --> 00:15:24.000
その後、サーバーはMDMコマンドを送信してインストールをトリガーする必要があります。

00:15:24.000 --> 00:15:29.000
このすべてのやり取りは、ユーザーエクスペリエンスに追加のレイテンシをもたらします。

00:15:29.000 --> 00:15:37.000
安全性を保ちながら、オプションのアプリを簡単かつ迅速にインストールすることで、これを改善したいと考えています。

00:15:37.000 --> 00:15:44.000
新しいマネージドアプリ配布フレームワークは、サードパーティの管理アプリの使用に利用できます。

00:15:44.000 --> 00:15:52.000
それを使用するには資格が必要であり、App Storeの提出プロセスの一環として申請することができます。

00:15:52.000 --> 00:16:02.000
フレームワークには、各管理対象アプリをSwiftUIビューとして公開するSwiftUIビュー拡張機能が含まれており、カスタマイズ可能なレイアウトに配置できます。

00:16:02.000 --> 00:16:06.000
ユーザーはアプリの詳細を表示し、タップしてインストールできます。

00:16:06.000 --> 00:16:19.000
これにより、MDMサーバーへの往復レイテンシを削除し、アプリをすぐにインストールできるようにし、進捗状況に関するより良いフィードバックを提供することで、ユーザーエクスペリエンスが向上します。

00:16:19.000 --> 00:16:24.000
あなたが構築できるアプリでこれがどのように見えるかを調べてみましょう。

00:16:24.000 --> 00:16:33.000
このスライドは、iOSのMDM管理アプリを示し、新しいビューサービスを使用してアプリのリストをユーザーに表示します。

00:16:33.000 --> 00:16:36.000
現在、1つのアプリがインストールされています。

00:16:36.000 --> 00:16:39.000
1つはダウンロードで、ライブの進捗状況を示しています。

00:16:39.000 --> 00:16:42.000
そして、もう1つはオプションで、インストールされるのを待っています。

00:16:42.000 --> 00:16:49.000
アプリビューのスタイルはカスタマイズ可能で、この場合は標準のリストスタイルを使用します。

00:16:49.000 --> 00:16:59.000
macOSでは、異なるスタイルのアプリビューを使用して、ここに示されているグリッドレイアウトなど、より広範なレイアウトを使用できます。

00:16:59.000 --> 00:17:06.000
ビューサービスを使用するアプリは、適切な方法でアプリのセットを並べ替えてグループ化できます。

00:17:06.000 --> 00:17:16.000
アプリリストを表示する管理アプリをすでにお持ちの場合は、このビューサービスを代替手段として使用し、ユーザーにより良い体験を提供することができます。

00:17:16.000 --> 00:17:24.000
管理アプリの提供を計画している場合、このビューサービスは、それを実装するための有利なスタートを提供します。

00:17:24.000 --> 00:17:35.000
新しい管理アプリ構成のオプションのインストール動作を使用する場合は、ユーザーに独自の管理アプリを提供する必要があることに注意してください。

00:17:35.000 --> 00:17:48.000
管理アプリの設定とステータス項目、パブリックフレームワークとビュー拡張機能は、macOS、iOS、iPadOSで利用できます。

00:17:48.000 --> 00:18:02.000
さらに、アプリの管理体験を向上させるという目標の一環として、すぐに使用できる新しい「組織のためのアプリと書籍」サーバーAPIを発表できることを嬉しく思います。

00:18:02.000 --> 00:18:08.000
これは、既存のcontentMetadataLookupサーバーAPIを置き換えます。

00:18:08.000 --> 00:18:15.000
新しいAPIは、パフォーマンスと稼働時間の向上に加えて、新しいカスタマイズとバージョン管理機能を提供します。

00:18:15.000 --> 00:18:22.000
新しいAPIの使用の詳細については、developer.apple.comのサイトをご覧ください。

00:18:22.000 --> 00:18:34.000
次に、宣言的なデバイス管理を使用して、macOSシステムサービスとバックグラウンドタスクのセキュリティコンプライアンスを実施および検証する方法を調べてみましょう。

00:18:34.000 --> 00:18:42.000
管理者は、サポートするデバイスが一貫性のある安全な方法で動作することを確認する必要があることがよくあります。

00:18:42.000 --> 00:18:52.000
一貫性を確保することは、それらがすべて同じ方法で構成されていることを考えると、デバイスの大規模な艦隊をサポートすることが容易であることを意味します。

00:18:52.000 --> 00:19:02.000
コンプライアンスの確保とは、デバイスが基本レベルのセキュリティを持っていることが知られており、組織データが安全であるという保証を提供することを意味します。

00:19:02.000 --> 00:19:12.000
また、すべてのデバイスで変更を加える必要がある場合、または新しいデバイスがインベントリに追加される場合は、これを迅速かつ効率的に行う必要があります。

00:19:12.000 --> 00:19:22.000
この要件の一部には、デバイスにインストールされているシステムまたはサードパーティのサービスの設定と監視が含まれます。

00:19:22.000 --> 00:19:28.000
macOSには、システム構成ファイルを介して制御される多くのシステムサービスが付属しています。

00:19:28.000 --> 00:19:37.000
たとえば、sshdはディレクトリ/etc/sshのファイルを介して設定されます。

00:19:37.000 --> 00:19:47.000
これらのシステムサービスの多くは、組織が必要とする一貫性とコンプライアンスを保証するために、管理者が安全に構成する必要があります。

00:19:47.000 --> 00:19:56.000
したがって、ユーザーが意図的または不注意にこれらのシステム構成を変更できないようにすることが重要です。

00:19:56.000 --> 00:20:09.000
ただし、ユーザーはシステム構成ファイルを変更したり、システムサービスをオーバーライドしてカスタム構成ファイルを使用したりすることが多いため、これは達成が困難です。

00:20:09.000 --> 00:20:29.000
宣言型デバイス管理は、システム整合性保護によって保護されたシステムサービスの構成をサポートするための安全で信頼性の高いメカニズムを提供し、デバイスの一貫性とセキュリティコンプライアンスを保証するためにバックグラウンドタスクを監視する手段を提供する理想的な位置にあります。

00:20:29.000 --> 00:20:31.000
方法は次のとおりです。

00:20:31.000 --> 00:20:40.000
宣言型デバイス管理構成を使用して、さまざまなシステムサービス用の改ざん耐性システム構成ファイルのセットを指定できます。

00:20:40.000 --> 00:20:46.000
ステータスは、バックグラウンドタスクの行き来を監視するために使用できます。

00:20:46.000 --> 00:20:54.000
そして、述語は、必要に応じて純粋に自律的な方法で、デバイスの状態からトリガーされた洗練されたコンプライアンスルールに電力を供給することができます。

00:20:54.000 --> 00:20:59.000
これがどのように実装されているかを調べてみましょう。

00:20:59.000 --> 00:21:07.000
システムサービス構成ファイルの管理をサポートするために、宣言的なデバイス管理構成が追加されました。

00:21:07.000 --> 00:21:12.000
設定は、ZIPアーカイブを提供するデータアセットを参照します。

00:21:12.000 --> 00:21:22.000
設定が有効になると、アーカイブがダウンロードされ、改ざんに強いサービス固有の場所に拡張されます。

00:21:22.000 --> 00:21:33.000
この場所は、どのシステムサービスでもマネージドサービス構成ファイルを採用できるように、新しいライブラリで関数を呼び出すことでプログラムで見つけることができます。

00:21:33.000 --> 00:21:44.000
組み込みのシステムサービスは、マネージドサービス構成ファイルを探すように変更され、常にデフォルトまたはオーバーライドされたシステム構成の前にそれらを使用します。

00:21:44.000 --> 00:21:51.000
サードパーティのサービスも、同じ方法でマネージドサービス構成ファイルを採用できます。

00:21:51.000 --> 00:21:59.000
使用するサードパーティのサービスの開発者に連絡し、新機能を採用してもらうことをお勧めします。

00:21:59.000 --> 00:22:04.000
これがどのように機能するかを調べてみましょう。

00:22:04.000 --> 00:22:12.000
この設定例では、sshdサービスのマネージドサービス設定ファイルがインストールされます。

00:22:12.000 --> 00:22:16.000
これには、データ資産への参照が含まれています。

00:22:16.000 --> 00:22:19.000
これがデータ資産の例です。

00:22:19.000 --> 00:22:25.000
資産タイプは新しいタイプで、任意のデータを伝えるために使用されます。

00:22:25.000 --> 00:22:33.000
また、新しいのは、資産データを取得するときに使用される認証の種類を示す資産の方法です。

00:22:33.000 --> 00:22:43.000
これにより、資産がホストされている場所と、データに安全にアクセスするための認証と承認の達成方法の柔軟性が高まります。

00:22:43.000 --> 00:22:54.000
アセットのデータURLは、参照設定が有効になっているときにZIPアーカイブファイルをダウンロードできる場所を指しています。

00:22:54.000 --> 00:23:06.000
アーカイブは、改ざんに強いサービス固有の場所に拡張され、sshdプロセスがそれにアクセスし、マネージドサービス構成として使用できます。

00:23:06.000 --> 00:23:34.000
この機能を採用する最初の組み込みサービスは、sshd、sudo、PAM、CUPS、Apache httpd、そして最後にbashとzeeシェルです。このリリースでは、システムサービス構成をロックダウンすることに加えて、インストールされたバックグラウンドタスクのリストを報告する新しいステータス項目も追加します。

00:23:34.000 --> 00:23:42.000
これにより、管理者は必要なタスクが実行されていること、不要なタスクが実行されていないことをすばやく確認できます。

00:23:42.000 --> 00:23:46.000
これがどのように見えるか調べてみましょう。

00:23:46.000 --> 00:23:50.000
この例は、バックグラウンドタスクのステータス配列項目を示しています。

00:23:50.000 --> 00:23:55.000
詳細には、タスクの一意の識別子が含まれます。

00:23:55.000 --> 00:23:59.000
タスクを実行しているユーザーアカウントのuid。

00:23:59.000 --> 00:24:01.000
その状態。

00:24:01.000 --> 00:24:09.000
タスクのタイプは、デーモン、エージェント、ログインアイテム、アプリ、またはユーザーアイテムのいずれかです。

00:24:09.000 --> 00:24:21.000
また、ラベルやプログラムの引数などのlaunchdの詳細や、サービスのロードに使用されるlaunchdプロパティのチェックサムハッシュも利用できます。

00:24:21.000 --> 00:24:29.000
さらに、このリリースでは、macOSブートボリュームのFileVault対応状態を報告するステータス項目が追加されています。

00:24:29.000 --> 00:24:44.000
FileVaultが有効になっているかどうかを示すブール値を返し、アクティベーション述語で簡単に使用できるため、セキュリティに敏感な構成は安全な場合にのみインストールできます。

00:24:44.000 --> 00:25:00.000
マネージドサービス構成ファイル、バックグラウンドタスク、およびFileVaultステータスレポートのこの組み合わせにより、管理者は組織内のすべてのmacOSデバイスで一貫性とコンプライアンスを確保する強力な方法を持つようになりました。

00:25:00.000 --> 00:25:07.000
それでは、宣言型デバイス管理におけるセキュリティ証明書とアイデンティティについて話し合いましょう。

00:25:07.000 --> 00:25:16.000
管理者は、内部および外部のネットワークでホストされている組織リソースへの安全なアクセスを確保する必要があります。

00:25:16.000 --> 00:25:26.000
多くの場合、トランスポート層のセキュリティやアプリサービスへの認証されたアクセスを確保するために、デバイスに証明書とIDを追加する必要があります。

00:25:26.000 --> 00:25:35.000
異なるアプリサービスが同じ証明書またはIDを使用する可能性があり、そのような関係を管理できることが重要です。

00:25:35.000 --> 00:25:42.000
証明書にも有限の寿命があるため、それらを更新するための信頼できる方法が必要です。

00:25:42.000 --> 00:25:54.000
また、パスワード認証を、より速く、使いやすく、フィッシングに強いパスキーなどの安全な技術に置き換えることが望ましい。

00:25:54.000 --> 00:26:04.000
したがって、MDM開発者は、管理者が証明書とIDを管理するための信頼性が高く効率的な方法を提供することが重要です。

00:26:04.000 --> 00:26:13.000
MDMには、デバイスのキーチェーンで証明書とIDを作成するために使用できるプロファイルペイロードがすでに含まれています。

00:26:13.000 --> 00:26:24.000
また、ACMEおよびSCEPプロトコルを介したプロビジョニングIDをサポートし、証明書リストコマンドによる証明書の取得もサポートしています。

00:26:24.000 --> 00:26:29.000
しかし、MDMができることにはいくつかの制限があります。

00:26:29.000 --> 00:26:37.000
MDM証明書またはIDペイロードは、同じプロファイル内の1つ以上の他のペイロードによって参照できます。

00:26:37.000 --> 00:26:44.000
ただし、他のプロファイルの証明書やアイデンティティへの参照は許可されていません。

00:26:44.000 --> 00:27:00.000
これは、同じアイテムを参照するすべてのペイロードに対応するためにプロファイルを大きくする必要があるか、証明書とアイデンティティを複数のプロファイルに複製する必要があることを意味します。これは、それらを最新の状態に保つためのより多くの作業を意味します。

00:27:00.000 --> 00:27:14.000
また、証明書またはIDを更新する必要がある場合、プロファイル内の他のすべてのペイロードがシステムで更新され、ユーザーエクスペリエンスに支障をきたす可能性があります。

00:27:14.000 --> 00:27:24.000
宣言型デバイス管理は、宣言データモデルのフルパワーを活用することで、証明書とアイデンティティを管理するためのより効率的なメカニズムを提供できます。

00:27:24.000 --> 00:27:28.000
方法は次のとおりです。

00:27:28.000 --> 00:27:37.000
証明書とアイデンティティは資産宣言として定義でき、構成はそれらの資産を参照できます。

00:27:37.000 --> 00:27:48.000
複数の構成が同じ証明書またはIDを参照でき、複数の証明書またはIDが同じ構成で参照できます。

00:27:48.000 --> 00:27:54.000
また、証明書またはIDを更新する必要がある場合は、アセットのみを更新する必要があります。

00:27:54.000 --> 00:28:02.000
このアセットと構成の組み合わせは、MDMプロファイルペイロードの多くの制限を解決します。

00:28:02.000 --> 00:28:14.000
さらに、ポーリングを必要とせずにACMEとSCEPのアイデンティティがプロビジョニングされたときに迅速なフィードバックを提供するなど、証明書とアイデンティティのステータスを報告することもできます。

00:28:14.000 --> 00:28:18.000
これらすべてがどのように実装されているかを調べてみましょう。

00:28:18.000 --> 00:28:24.000
証明書またはIDデータを提供するために、一連の資産が追加されました。

00:28:24.000 --> 00:28:30.000
証明書は、PEMまたはDERデータ形式のいずれかを使用します。

00:28:30.000 --> 00:28:37.000
アイデンティティはPKCS #12形式を使用するか、ACMEまたはSCEPプロトコルを介してプロビジョニングできます。

00:28:37.000 --> 00:28:41.000
これには、利用可能な場合はハードウェアバインドされたキーの使用が含まれます。

00:28:41.000 --> 00:28:48.000
新しいステータス項目は、アセットを介してインストールされた各証明書またはIDを報告することもできます。

00:28:48.000 --> 00:28:52.000
いくつかの例を勉強しましょう。

00:28:52.000 --> 00:28:56.000
このサンプルアセットは証明書をインストールします。

00:28:56.000 --> 00:29:03.000
参照の詳細は、実際の証明書データをデバイスに配信するURLを提供します。

00:29:03.000 --> 00:29:09.000
もう1つの例は、ACMEサーバーを介してIDをプロビジョニングするアセットを示しています。

00:29:09.000 --> 00:29:19.000
この場合、参照の詳細は、ACMEプロトコル交換に必要なプロパティを含むJSONドキュメントを提供するURLを提供します。

00:29:19.000 --> 00:29:24.000
以下は、ACMEプロパティJSONドキュメントの例です。

00:29:24.000 --> 00:29:29.000
ディレクトリURLは、ACMEサーバーのURLを指定します。

00:29:29.000 --> 00:29:39.000
生成されるキーの種類を定義する一連のプロパティと、生成された証明書の一連のプロパティがあります。

00:29:39.000 --> 00:29:42.000
では、ステータスを見てみましょう。

00:29:42.000 --> 00:29:46.000
この例は、2つの証明書を持つステータス配列項目を示しています。

00:29:46.000 --> 00:30:01.000
各項目には、関連する資産の宣言識別子、DERエンコードされた証明書データ、および証明書がアイデンティティに対応するかどうかの指標が含まれています。

00:30:01.000 --> 00:30:12.000
証明書とIDの資産ができたので、いくつかの新規および既存の構成でそれらを使用することができます。

00:30:12.000 --> 00:30:19.000
まず、スタンドアロンの証明書とIDをインストールするために使用できる2つの新しい設定があります。

00:30:19.000 --> 00:30:26.000
どちらもクレデンシャル資産を参照して、実際の証明書またはIDデータを提供します。

00:30:26.000 --> 00:30:31.000
証明書設定は、単一の証明書をキーチェーンにインストールします。

00:30:31.000 --> 00:30:40.000
証明書が自己署名され、認証局である場合、トラストストアにも追加されます。

00:30:40.000 --> 00:30:45.000
アイデンティティ設定は、単一のアイデンティティをキーチェーンにインストールします。

00:30:45.000 --> 00:30:52.000
これらの構成は、すべてのプラットフォームで利用できます。

00:30:52.000 --> 00:30:58.000
次に、エンタープライズパスキーを展開するための設定があります。

00:30:58.000 --> 00:31:06.000
WWDC22は、ウェブサイトやアプリでのパスワードの使用を排除するためのソリューションとしてパスキーを導入しました。

00:31:06.000 --> 00:31:18.000
このリリースでは、許可されたデバイスとユーザーのみがパスキーをプロビジョニングできるようにすることで、パスキーを企業に簡単に展開できるようにすることに焦点が当てられています。

00:31:18.000 --> 00:31:33.000
これをサポートするために、設定で指定されたサイトにアクセスしたときに、デバイス上のユーザーのパスキーを安全に生成するために使用できる新しいエンタープライズパスキー認証構成があります。

00:31:33.000 --> 00:31:37.000
設定はアイデンティティアセットを参照します。

00:31:37.000 --> 00:31:45.000
その後、IDは、生成されたパスキーの標準WebAuthn認証を実行するために使用されます。

00:31:45.000 --> 00:31:51.000
WebAuthn依存当事者は、この認証を検証し、関連サイトへのアクセスを許可することができます。

00:31:51.000 --> 00:31:57.000
したがって、管理者は特定のパスキーを管理対象デバイスのみに制限できます。

00:31:57.000 --> 00:32:03.000
この機能はmacOS、iOS、iPadOSで利用できます。

00:32:03.000 --> 00:32:14.000
MDMサーバーと依存当事者がこのフローを実装するためにどのように連携するかの詳細は、セッション「職場でパスキーを展開する」に記載されています。

00:32:14.000 --> 00:32:25.000
最後に、MailとExchangeアカウントの構成が更新され、S/MIMEをサポートし、MDMプロファイルのペイロードと同等の機能同等性をもたらします。

00:32:25.000 --> 00:32:33.000
設定は、S/MIMEの署名と暗号化に使用できるIDアセットを参照できるようになりました。

00:32:33.000 --> 00:32:38.000
これはiOSとiPadOSで利用可能です。

00:32:38.000 --> 00:32:48.000
最後の項目では、MDMプロファイルから構成に簡単に移行できる新しい動作について話し合いましょう。

00:32:48.000 --> 00:33:01.000
宣言型デバイス管理はMDMに組み込まれており、MDMと並行して使用して新しい管理機能を追加できるため、時間の経過とともに製品を移行できます。

00:33:01.000 --> 00:33:14.000
MDMでの宣言型デバイス管理の実装は、MDM DeclarativeManagementコマンドをデバイスに送信し、デバイスでアクティブ化された一連の宣言を介して同期するのと同じくらい簡単です。

00:33:14.000 --> 00:33:20.000
その後、サーバーは着信ステータスレポートをリッスンします。

00:33:20.000 --> 00:33:37.000
この移行を容易にするために、既存のMDMプロファイルを構成として送信できるようにレガシープロファイル構成が作成され、プロファイルが宣言型デバイス管理の自律的かつ積極的な動作を最大限に活用できるようにしました。

00:33:37.000 --> 00:33:49.000
これを行うには、まず既存のMDMプロファイルを削除してから、同じプロファイルをインストールする構成を送信してアクティブにすることが含まれます。

00:33:49.000 --> 00:34:01.000
これは破壊的なプロセスであり、アカウントがすべてのデータを更新したり、しばらくの間デバイスから制限が欠落している管理上のギャップを残したりするなど、破壊的なプロセスになる可能性があります。

00:34:01.000 --> 00:34:08.000
MDM開発者は、MDMプロファイルの使用からレガシープロファイル構成に移行する簡単な方法を求めています。

00:34:08.000 --> 00:34:11.000
そして今、これは可能です。

00:34:11.000 --> 00:34:13.000
方法は次のとおりです。

00:34:13.000 --> 00:34:22.000
宣言型デバイス管理は、すでにインストールされているMDMプロファイルを削除せずに管理を引き継ぐことをサポートするようになりました。

00:34:22.000 --> 00:34:33.000
これを使用するには、サーバーがしなければならないのは、MDMによってすでにインストールされているものと同じプロファイルを含む構成を送信してアクティブ化することだけです。

00:34:33.000 --> 00:34:40.000
宣言型デバイス管理システムは、再インストールまたは更新することなく、そのプロファイルの管理を引き継ぎます。

00:34:40.000 --> 00:34:44.000
その時点で、宣言型デバイス管理がプロファイルを所有しています。

00:34:44.000 --> 00:34:48.000
MDMは変更を加えることができません。

00:34:48.000 --> 00:34:52.000
プロファイルが管理しているデバイスの状態に中断はありません。

00:34:52.000 --> 00:34:55.000
そして、管理上のギャップはありません。

00:34:55.000 --> 00:35:02.000
これにより、MDMから宣言型デバイス管理への移行がはるかに簡単になります。

00:35:02.000 --> 00:35:06.000
この新しい動作は、すべてのプラットフォームで利用できます。

00:35:06.000 --> 00:35:15.000
これで、宣言型デバイス管理のこのリリースのためにお届けするエキサイティングな新機能をカバーする最後の議題項目は終了です。

00:35:15.000 --> 00:35:17.000
では、締めくくりましょう。

00:35:17.000 --> 00:35:27.000
基本的な要素が整ったこのリリースは、宣言型デバイス管理の力を使用して主要な管理機能を構築することに重点を置いています。

00:35:27.000 --> 00:35:35.000
これらの機能の多くは、あなたのフィードバックを通じて受け取ったリクエストの結果であり、それに感謝します。

00:35:35.000 --> 00:35:45.000
宣言的なデバイス管理が進歩し続けるにつれて、私たちはあなたにとって重要な機能に優先順位を付けるのに役立つより多くのフィードバックを歓迎します。

00:35:45.000 --> 00:35:56.000
新しい管理機能が宣言型デバイス管理にのみ追加されているため、まだ行っていない場合は、製品にサポートを構築することが重要です。

00:35:56.000 --> 00:36:06.000
すでにサポートを受けている場合、このリリースの新機能は、顧客が愛する素晴らしい製品を作る機会をさらに提供します。

00:36:06.000 --> 00:36:15.000
このリリースの他の新しい管理機能に関する情報は、セッション「Appleデバイス管理の新機能」にあります。

00:36:15.000 --> 00:36:26.000
新しい構成、アセット、およびステータスアイテムのスキーマは、セッション参照の詳細にリンクされているオープンソースのスキーマリポジトリで入手できます。

00:36:26.000 --> 00:36:28.000
見てくれてありがとう。

00:36:28.000 --> 23:59:59.000
♪ ♪

