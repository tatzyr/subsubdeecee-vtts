WEBVTT

00:00:00.000 --> 00:00:04.000
♪まろやかなインストゥルメンタルヒップホップ音楽♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:11.000
ニールス・ガベル:こんにちは、私はニールスです。

00:00:11.000 --> 00:00:14.000
私はReality Composer Proチームの材料エンジニアです。

00:00:14.000 --> 00:00:18.000
私のセッション「Explore materials in Reality Composer Pro」へようこそ。

00:00:18.000 --> 00:00:24.000
このセッションでは、Reality Composer Proを使用してxrOS用の資料を構築する方法を学びます。

00:00:24.000 --> 00:00:31.000
まず、xrOSにある素材の概要と、3Dオブジェクトの外観をカスタマイズする方法について説明します。

00:00:31.000 --> 00:00:37.000
MaterialXオープンスタンダードに基づいて、xrOSで利用可能な新しい材料タイプを紹介します。

00:00:37.000 --> 00:00:44.000
その後、Shader Graphと呼ばれるReality Composer Proの組み込みエディタを使用してマテリアルを設計する方法を紹介します。

00:00:44.000 --> 00:00:49.000
ノードグラフを使用して材料の再利用可能な部分を作成するプロセスを案内します。

00:00:49.000 --> 00:00:54.000
そして最後に、見栄えの良い3Dコンテンツのジオメトリ修飾子を構築します。

00:00:54.000 --> 00:00:58.000
まず、材料の意味を説明することから始めましょう。

00:00:58.000 --> 00:01:02.000
素材は、3Dシーンでのオブジェクトの外観を定義するものです。

00:01:02.000 --> 00:01:06.000
材料はシンプルで、単色でもいいし、画像を使用することもできます。

00:01:06.000 --> 00:01:13.000
椅子のモデルに木の質感を適用したり、レンガの画像を壁にマッピングしたりできます。

00:01:13.000 --> 00:01:15.000
材料も非常に洗練されている可能性があります。

00:01:15.000 --> 00:01:20.000
彼らはアニメーションを使用して波打つ水のように見えるか、視野角に基づいて外観を変えるかもしれません。

00:01:20.000 --> 00:01:24.000
マザーオブパールの虹色の輝きを思い浮かべてください。

00:01:24.000 --> 00:01:29.000
材料は、適用されるオブジェクトのジオメトリを変更することもできます。

00:01:29.000 --> 00:01:34.000
xrOSの材料は、物理ベースのレンダリング、略してPBRを使用します。

00:01:34.000 --> 00:01:44.000
これは、アーティストが現実世界のオブジェクトに似た物理的性質を使用してオブジェクトの外観を設計できることを意味します。たとえば、オブジェクトの金属や粗さなどです。

00:01:44.000 --> 00:01:47.000
動作中の物理的ベースの材料の例をいくつか見てみましょう。

00:01:47.000 --> 00:01:50.000
これはシンプルなPBR材料を使用した球体です。

00:01:50.000 --> 00:01:55.000
この素材は、反射率が40%に設定された一定の青色を使用しています。

00:01:55.000 --> 00:02:00.000
または、説得力のあるコンクリートを得るために、色と表面の粗さを設定するために画像を適用することもできます。

00:02:00.000 --> 00:02:04.000
または、金属度を上げて、鉄のように見えるものを手に入れます。

00:02:04.000 --> 00:02:08.000
車のペイントのように見えるものを手に入れることさえできます。

00:02:08.000 --> 00:02:10.000
材料は1つ以上のシェーダーで構成されています。

00:02:10.000 --> 00:02:15.000
これらは、資料の外観を計算する実際の作業を行うプログラムです。

00:02:15.000 --> 00:02:20.000
iOSとiPadOS用のRealityKit 2では、CustomMaterialを導入しました。

00:02:20.000 --> 00:02:24.000
CustomMaterialのシェーダーは金属で手作業でコード化されています。

00:02:24.000 --> 00:02:30.000
xrOSでは、ShaderGraphMaterialと呼ばれる新しいタイプの素材を導入しています。

00:02:30.000 --> 00:02:34.000
これは、xrOS用のカスタム素材を作成する排他的な方法です。

00:02:34.000 --> 00:02:40.000
ShaderGraphMaterialは、その名前を取得する機能ブロックのネットワークまたはグラフを使用します。

00:02:40.000 --> 00:02:47.000
ShaderGraphMaterialは、MaterialXと呼ばれるオープンスタンダードに基づいており、素材を定義するアーティストに優しい方法です。

00:02:47.000 --> 00:02:51.000
MaterialXはもともと2012年にインダストリアルライト&amp;マジックによって作成されました。

00:02:51.000 --> 00:02:58.000
ShaderGraphMaterialは、Physically BasedとCustomと呼ばれる2つの主要なタイプのシェーダーをサポートしています。

00:02:58.000 --> 00:03:00.000
物理ベースは基本的なPBRシェーダーです。

00:03:00.000 --> 00:03:03.000
より簡単なユースケースのためにこれを選択してください。

00:03:03.000 --> 00:03:10.000
このシェーダーは、各プロパティに色や画像などの一定で不変の値を提供することで設定します。

00:03:10.000 --> 00:03:16.000
一方、カスタムシェーダーを使用すると、3Dオブジェクトの外観を正確かつカスタムで制御できます。

00:03:16.000 --> 00:03:25.000
カスタムシェーダーは、アニメーションを組み込み、オブジェクトのジオメトリを調整し、キラキラしたペイントの外観など、オブジェクトの表面に特殊効果を作成できます。

00:03:25.000 --> 00:03:30.000
Reality Composer Pro内のShader Graphエディタを使用してShaderGraphMaterialsを構築できます。

00:03:30.000 --> 00:03:37.000
ビューポートの地形の外観を瞬時に定義する下のシェーダーグラフノードを見てください。

00:03:37.000 --> 00:03:41.000
基本を理解したので、いくつかのカスタム素材を作りましょう。

00:03:41.000 --> 00:03:51.000
xrOSのマテリアルは、3Dコンテンツを作成、編集、プレビューできる新しいプロ開発者ツールであるReality Composer Proを使用して作成できます。

00:03:51.000 --> 00:04:02.000
資料から始める前にアプリの紹介をご希望の場合は、「Meet Reality Composer Pro」セッションを見て、エディタUIとその機能に慣れてください。

00:04:02.000 --> 00:04:09.000
そのセッションで示されたヨセミテバレーモデルを使用し、地形図の外観を適用します。

00:04:09.000 --> 00:04:14.000
資料の背後にある数学を説明してから、Reality Composer Proのシェーダーエディタに入り、それを構築します。

00:04:14.000 --> 00:04:17.000
カバーすることがたくさんあります。すぐに飛び込みましょう。

00:04:17.000 --> 00:04:20.000
これはエリックがセッションで作ったヨセミテバレーのジオラマです。

00:04:20.000 --> 00:04:26.000
時間を節約するために、Deactivateコマンドを使用して、このセッションに必要のないすべてのオブジェクトを隠しました。

00:04:26.000 --> 00:04:29.000
それは私たちに真ん中に台座を残し、頂上に風景を残します。

00:04:29.000 --> 00:04:31.000
かなりかっこいい！

00:04:31.000 --> 00:04:33.000
地形機能を追加しましょう。

00:04:33.000 --> 00:04:39.000
地形の斜面に沿って等高線を表示することで、モデルの地形を示す材料を追加します。

00:04:39.000 --> 00:04:44.000
ハイキングを計画するときに出くわしたかもしれない地形図に似ています。

00:04:44.000 --> 00:04:49.000
地形に等高線を描画するシェーダーを含むカスタム素材を作成しましょう。

00:04:49.000 --> 00:04:55.000
この図のように、同じ標高を持つすべての領域を通して、地形に線を描きたいです。

00:04:55.000 --> 00:05:00.000
たとえば、この青い線は、標高1000メートルの地形上のすべての点を示しています。

00:05:00.000 --> 00:05:04.000
上から見ると、右側の図のように見えます。

00:05:04.000 --> 00:05:10.000
私たちは、モデルにこのような線を引く一連の関数を使用して材料を構築します。

00:05:10.000 --> 00:05:16.000
開始するには、階層パネルのプロジェクトの下部にある[プラス]ボタンをクリックします。

00:05:16.000 --> 00:05:21.000
材料の下で、物理的ベースとカスタムの2つのシェーダータイプに注目してください。

00:05:21.000 --> 00:05:22.000
カスタムを選択します。

00:05:22.000 --> 00:05:25.000
これにより、編集者のシェーダーグラフが明らかになります。

00:05:25.000 --> 00:05:31.000
新しいカスタムシェーダーは、紫色の表面ノードと青色の出力ノードの2つのノードから始まります。

00:05:31.000 --> 00:05:37.000
マテリアルのアクティブサーフェスは、出力ノードのカスタムサーフェス入力に接続されているものです。

00:05:37.000 --> 00:05:42.000
サーフェス上の入力は、シェーダーの物理ベースまたはPBRパラメータを設定する方法です。

00:05:42.000 --> 00:05:44.000
例えば、ベースカラー。

00:05:44.000 --> 00:05:46.000
資料に説明的な名前を付けましょう。

00:05:46.000 --> 00:05:49.000
地形素材は良さそうですね。

00:05:49.000 --> 00:05:55.000
重要なステップは、ヨセミテバレーモデルに新しい素材を割り当てることです。

00:05:55.000 --> 00:05:57.000
プロジェクト階層で選択します。

00:05:57.000 --> 00:06:03.000
インスペクタで、[マテリアルバインディング] で、[バインディング] メニューから [TopographyMaterial] を選択します。

00:06:03.000 --> 00:06:07.000
モデルが色からシンプルなグレーに変わることに注目してください。

00:06:07.000 --> 00:06:11.000
私たちの材料は機能していますが、まだ面白いことは何もしていません。

00:06:11.000 --> 00:06:13.000
それを直しましょう。

00:06:13.000 --> 00:06:18.000
階層からTopographyMaterialを選択して、シェーダーグラフエディタに戻ります。

00:06:18.000 --> 00:06:23.000
いくつかのノードをサーフェス入力に接続して、モデルにストライプを適切な場所に描画します。

00:06:23.000 --> 00:06:27.000
私たちの材料がこの例の地形でどのように機能するかを説明します。

00:06:27.000 --> 00:06:33.000
モデル上の位置に基づいて地形線を描画する場所を決定するための材料が必要です。

00:06:33.000 --> 00:06:36.000
まず、マテリアルに位置ノードを追加します。

00:06:36.000 --> 00:06:40.000
このノードは、3D空間でのレンダリング位置を返します。

00:06:40.000 --> 00:06:47.000
位置の高さにのみ興味があるので、位置のY座標のみを抽出するためにseparateというノードも追加します。

00:06:47.000 --> 00:06:52.000
Separateは、地形の高さとともに増加するY座標位置を返します。

00:06:52.000 --> 00:06:57.000
これらの最初の2つのノードをReality Composer Proの素材に追加しましょう。

00:06:57.000 --> 00:07:00.000
エディタの背景をダブルクリックしてノードを追加します。

00:07:00.000 --> 00:07:02.000
これにより、新しいノードピッカーがもたらされます。

00:07:02.000 --> 00:07:09.000
利用可能なすべてのノードのリストを閲覧したり、名前やキーワードでノードを検索したりできます。

00:07:09.000 --> 00:07:14.000
「位置」と入力し、リストから位置ノードを選択してシェーダーに挿入しましょう。

00:07:14.000 --> 00:07:19.000
位置は、素材がレンダリングされている3D空間内の位置を出力します。

00:07:19.000 --> 00:07:24.000
私たちの材料は高さによって異なるので、位置のY成分を抽出するために別のノードを追加しましょう。

00:07:24.000 --> 00:07:30.000
背景をダブルクリックして、新しいノードピッカーを再度開き、別々の3ノードを追加します。

00:07:30.000 --> 00:07:38.000
エディタで接続するには、クリックしてノード出力からこのようにノード入力にドラッグするだけです。

00:07:38.000 --> 00:07:42.000
これら2つのノードを組み合わせることで、地形の高さが得られます。

00:07:42.000 --> 00:07:47.000
次に、別のノードの出力を取り、それをモジュロノードに渡します。

00:07:47.000 --> 00:07:50.000
モジュロは、2つの値を分割することの残りの部分を与えます。

00:07:50.000 --> 00:07:55.000
モジュロを使用して、高さを希望の地形的な線間隔で割ります。

00:07:55.000 --> 00:07:57.000
結果はこんな感じです。

00:07:57.000 --> 00:08:00.000
高さがバンドに分かれていることがわかります。

00:08:00.000 --> 00:08:04.000
各範囲内の高さ値は0から始まり、その範囲の高さまで増加します。

00:08:04.000 --> 00:08:07.000
これは私たちの次のステップにとって重要になります。

00:08:07.000 --> 00:08:11.000
Reality Composer Proの素材にモジュロノードを追加しましょう。

00:08:11.000 --> 00:08:20.000
ダブルクリックしてノードを追加してから接続する代わりに、新しい接続を空のスペースにドラッグして、すでに接続されているノードを1つのステップで作成できます。

00:08:20.000 --> 00:08:24.000
新しいノードピッカーで、「modulo」と入力し、クリックしてModuloノードを挿入します。

00:08:24.000 --> 00:08:26.000
モジュロには2つの入力があります。

00:08:26.000 --> 00:08:30.000
1つ目は配当で、2つ目は除数です。

00:08:30.000 --> 00:08:35.000
ノードを接続する代わりに、インスペクタの入力に一定の値を便利に設定できます。

00:08:35.000 --> 00:08:39.000
検査官で、2番目の引数を0.1に変更します。

00:08:39.000 --> 00:08:43.000
これは除数であり、高さ範囲の幅を設定します。

00:08:43.000 --> 00:08:46.000
出力を見る前に、あと1つのステップがあります。

00:08:46.000 --> 00:08:52.000
Ifgreaterノードを使用して、繰り返し値が地形の狭い高さのどこに落ちるかを判断します。

00:08:52.000 --> 00:08:59.000
Ifgreaterノードは、比較の結果に応じて、画面に表示される2つのバンドカラーの1つを表す値を返します。

00:08:59.000 --> 00:09:04.000
高さがシェーダーの地形線幅よりも大きい場合は、背景色を選択します。

00:09:04.000 --> 00:09:10.000
そして、高さが希望の線幅の範囲内にある場合は、地形線の色を選択します。

00:09:10.000 --> 00:09:14.000
Ifgreaterノードを材料に追加して、結果を見てみましょう。

00:09:14.000 --> 00:09:19.000
モジュロノードの結果を、地形線幅に選択した値と比較したい。

00:09:19.000 --> 00:09:23.000
だから、私はその比較を行うためにifgreaterノードを追加します。

00:09:23.000 --> 00:09:33.000
Ifgreaterは2つの入力を比較し、最初の入力が2番目の入力よりも大きい場合は1つの値を返します。最初の入力が2番目の入力よりも小さい場合は別の値を返します。

00:09:33.000 --> 00:09:42.000
このifgreaterノードは浮動小数点値を出力するように設定されていますが、地形と地形線の2色から選択したいと考えています。

00:09:42.000 --> 00:09:46.000
インスペクタの[タイプ]で、このノードを出力RGBに変更します。

00:09:46.000 --> 00:09:49.000
次に、2色を選びましょう。

00:09:49.000 --> 00:09:54.000
インスペクタで、True Resultの横にあるカラーピッカーをクリックし、地形の色を設定します。

00:09:54.000 --> 00:09:55.000
白を使いましょう。

00:09:55.000 --> 00:10:00.000
地形線の色であるFalse Resultを黒に設定しておきましょう。

00:10:00.000 --> 00:10:03.000
これは私たちの白い地形と多くのコントラストを与えるでしょう。

00:10:03.000 --> 00:10:13.000
たくさんの値を試して、線幅の良い値として0.002に到達したので、インスペクタで比較値を0.002に設定します。

00:10:13.000 --> 00:10:18.000
Ifgreaterノードの出力をサーフェスの拡散色入力に接続します。

00:10:18.000 --> 00:10:25.000
素晴らしい、今、私たちの材料は私たちの地形のすべてのポイントで色を設定しており、地形線材料を作りました。

00:10:25.000 --> 00:10:28.000
次に、ノードグラフ機能の使い方を見てみましょう。

00:10:28.000 --> 00:10:35.000
ノードグラフは、複雑な材料を簡素化し、グラフの一部を再利用するための独自のノードを作成するのに役立ちます。

00:10:35.000 --> 00:10:38.000
ノードグラフを使用して、素材に実際の地形図の外観を与えます。

00:10:38.000 --> 00:10:43.000
材料の現在の線の間に2番目の線を追加しましょう。

00:10:43.000 --> 00:10:46.000
これまでのところ、私たちの素材はこんな感じです。

00:10:46.000 --> 00:10:49.000
そして、細分化を追加すると、これがどのように見えるかです。

00:10:49.000 --> 00:10:53.000
地形線を引く材料の4つのノードから始めます。

00:10:53.000 --> 00:10:55.000
次に、それらからノードグラフを作成します。

00:10:55.000 --> 00:10:59.000
これにより、4つのノードが1つのノードに統合されます。

00:10:59.000 --> 00:11:03.000
最後に、ノードグラフのインスタンスを作成して、その機能を再利用します。

00:11:03.000 --> 00:11:09.000
1つのノードグラフは元の線セットを描画し、そのインスタンスは2番目の線セットを描画します。

00:11:09.000 --> 00:11:12.000
Reality Composer Proに戻って構築しましょう。

00:11:12.000 --> 00:11:15.000
これが再び私たちの地形線シェーダーです。

00:11:15.000 --> 00:11:21.000
ドラッグして、線の色と描画場所を計算するこれらの4つのノードを選択します。

00:11:21.000 --> 00:11:26.000
それらを選択したら、右クリックして「ノードグラフの作成」を選択します。

00:11:26.000 --> 00:11:30.000
これで、ノードは他のグラフ内で使用できる単一のノードとして表示されます。

00:11:30.000 --> 00:11:32.000
新しいノードにわかりやすい名前を割り当てましょう。

00:11:32.000 --> 00:11:35.000
それをラインと呼びましょう。

00:11:35.000 --> 00:11:38.000
このノードグラフのコピーを作成して、2番目の線を描画します。

00:11:38.000 --> 00:11:45.000
このために、階層のCreate Instanceコマンドを使用してインスタンスを作成します。

00:11:45.000 --> 00:11:50.000
インスタンスは、元のノードグラフに加えられた変更を採用するライブコピーです。

00:11:50.000 --> 00:11:52.000
私たちはそれを選択して材料に戻ります。

00:11:52.000 --> 00:11:55.000
新しいインスタンスをSecondaryLinesと呼びましょう。

00:11:55.000 --> 00:12:06.000
ノードグラフとそのインスタンスは、異なる間隔と色の線を描画したいので、間隔と色と呼ばれる2つの入力を元のノードグラフに追加して、これらのプロパティを制御します。

00:12:06.000 --> 00:12:10.000
元のノードグラフをダブルクリックして編集しましょう。

00:12:10.000 --> 00:12:13.000
インスペクタのノードグラフに入力と出力を追加します。

00:12:13.000 --> 00:12:18.000
まず、Spacingという入力を追加し、そのタイプをFloatに設定しましょう。

00:12:18.000 --> 00:12:23.000
また、地形ラインの色を制御するために、カラーと呼ばれる入力を追加します。

00:12:23.000 --> 00:12:27.000
入力のタイプをColor3に設定します。

00:12:27.000 --> 00:12:33.000
これらをグラフの適切な場所につなげます。

00:12:33.000 --> 00:12:38.000
プロジェクト階層で選択して、資料に戻りましょう。

00:12:38.000 --> 00:12:44.000
ノードグラフには、作成した2つの入力があり、インスタンスがこれら2つの新しい入力を継承していることに注意してください。

00:12:44.000 --> 00:12:49.000
元の線ノードグラフで、以前に選択した値に間隔を設定します。

00:12:49.000 --> 00:12:57.000
そして、インスタンスノードグラフの間隔を小さく、明るい色を選びましょう。

00:12:57.000 --> 00:13:02.000
最後のステップは、元のノードグラフとインスタンスノードグラフの出力を組み合わせることです。

00:13:02.000 --> 00:13:09.000
両方のノードグラフにグレースケール色を便利に選択したので、乗算ノードを使用して色を組み合わせることができます。

00:13:09.000 --> 00:13:16.000
いいね！私たちは、2組の線を持つ説得力のある地形線材料を持っています。

00:13:16.000 --> 00:13:18.000
次に、ジオメトリ修飾子について話しましょう。

00:13:18.000 --> 00:13:23.000
これらは、モデルをリアルタイムで変更するために使用できるカスタム素材の特徴です。

00:13:23.000 --> 00:13:29.000
静的地形モデルを置き換えて、ジオメトリ修飾子と高さデータを使用して再作成します。

00:13:29.000 --> 00:13:38.000
次に、ジオメトリ修飾子を拡張して、ヨセミテバレーとカリフォルニア州カタリナ島の2つの異なる地形の間で動的にアニメーション化します。

00:13:38.000 --> 00:13:44.000
終わったら、2つの異なる場所の間でアニメーション化できるダイナミックな地形素材があります。

00:13:44.000 --> 00:13:46.000
これがどのように行われるか見てみましょう。

00:13:46.000 --> 00:13:50.000
これまでに見たシェーダーはすべてサーフェスシェーダーです。

00:13:50.000 --> 00:13:57.000
これらは、レンダリングされたモデルの各ピクセルの物理ベースまたはPBR属性を設定するシェーダーです。

00:13:57.000 --> 00:14:03.000
ジオメトリ修飾子はサーフェスシェーダーに似ていますが、代わりにオブジェクトのジオメトリを操作します。

00:14:03.000 --> 00:14:07.000
実際、Reality Composer Proの同じエディタでそれらを構築します。

00:14:07.000 --> 00:14:15.000
高さマップデータを使用してヨセミテバレーの地形を作成する、構築するジオメトリ修飾子の概要を説明します。

00:14:15.000 --> 00:14:19.000
プレーンなジオメトリを含むフラットディスクモデルから始めます。

00:14:19.000 --> 00:14:21.000
これが私たちのベース表面になります。

00:14:21.000 --> 00:14:32.000
次に、モデルの各場所の高さに関する2Dデータである地形の高さデータを使用し、ジオメトリ修飾子を使用して地形を正しい量上げます。

00:14:32.000 --> 00:14:34.000
これは、私たちが望む地形をもたらすでしょう。

00:14:34.000 --> 00:14:45.000
基本バージョンを見せたら、2セットの地形の高さを取り、それらを使用して興味のある2つの場所、ヨセミテバレーとカタリナ島の間でアニメーション化するバージョンを実演します。

00:14:45.000 --> 00:14:47.000
これは別の見解です。

00:14:47.000 --> 00:14:55.000
フラットモデルから始めて、ジオメトリ修飾子は、このような2D高さマップのデータを使用して頂点を垂直に移動します。

00:14:55.000 --> 00:15:01.000
最初に行うことは、Deactivateコマンドを使用して、事前に構築されたYosemite Valleyモデルを非表示にすることです。

00:15:01.000 --> 00:15:06.000
同じヨセミテバレーモデルを生成しますが、今回はジオメトリ修飾子を使用します。

00:15:06.000 --> 00:15:09.000
プロジェクトブラウザのフラットディスクモデルから始めます。

00:15:09.000 --> 00:15:15.000
プロジェクト階層のルートエンティティにドラッグすることで、持ち込むことができます。

00:15:15.000 --> 00:15:20.000
私は先に進み、DynamicTerrainMaterialという名前の新しい素材を作成し、それをディスクに割り当てました。

00:15:20.000 --> 00:15:23.000
ジオメトリ修飾子に取り組みましょう。

00:15:23.000 --> 00:15:27.000
シェーダーグラフエディタでは、ジオメトリ修飾サーフェスが必要になります。

00:15:27.000 --> 00:15:30.000
これをPBR表面と一緒に材料に追加します。

00:15:30.000 --> 00:15:38.000
出力ノードのカスタムジオメトリ修飾子入力から接続をドラッグし、新しいノードUIからジオメトリ修飾子を選択します。

00:15:38.000 --> 00:15:42.000
まず、ヨセミテバレーのイメージを表面に適用しましょう。

00:15:42.000 --> 00:15:46.000
画像データを読み取るには、画像ノードを使用します。

00:15:46.000 --> 00:15:52.000
インスペクタで、ヨセミテバレーの画像を画像ノードのファイル名入力に割り当てましょう。

00:15:52.000 --> 00:15:56.000
地形が平らなので、物事は少し面白く見えますが、私たちは今それを修正するつもりです。

00:15:56.000 --> 00:15:58.000
谷の高さデータが必要になります。

00:15:58.000 --> 00:16:02.000
これは、カラーデータではなく高さ値を含む画像ファイルにあります。

00:16:02.000 --> 00:16:07.000
このデータは画像内にあるので、別の画像ノードを追加して読みます。

00:16:07.000 --> 00:16:15.000
次に、高さデータを含むYosemite Valley EXRイメージを、この新しい画像ノードのファイル名入力に割り当てます。

00:16:15.000 --> 00:16:26.000
ジオメトリ修飾子は、モデルの頂点を任意の方向に移動できますが、垂直に移動することだけに興味があるので、コンバイン3ノードを挿入して、Yコンポーネントのみで3Dベクトルを作成しましょう。

00:16:26.000 --> 00:16:36.000
今、これをGeometryModifierサーフェスのモデル位置オフセット入力に接続し、ブーム、私たちのフラットモデルはヨセミテバレーに変換されました。

00:16:36.000 --> 00:16:38.000
私たちが取らなければならないステップがもう1つあります。

00:16:38.000 --> 00:16:44.000
頂点を移動するときは、新しい地形形状に合わせてモデルの表面法線ベクトルを設定する必要があります。

00:16:44.000 --> 00:16:53.000
高さデータからこれらを計算する方法がありますが、今日はこのジオメトリの事前計算された法線を含む画像を使用します。

00:16:53.000 --> 00:17:01.000
法線を読み取るために別の画像ノードを作成しましょう。

00:17:01.000 --> 00:17:07.000
これらは事前に計算されているため、精度を高めるために、サーフェスシェーダーの通常の入力に直接接続します。

00:17:07.000 --> 00:17:14.000
私たちの表面は、法線が-1から1の間の値を持つことを期待していますが、私たちの画像の法線は0から1の間です。

00:17:14.000 --> 00:17:21.000
リマップノードを使用して、画像の値を再マッピングしました。

00:17:21.000 --> 00:17:26.000
これで、高さデータを使用してフラットジオメトリから地形を作成しました。

00:17:26.000 --> 00:17:32.000
次に、ジオラマをダイナミックにし、ある地形から別の地形にモーフィングする機能を追加しましょう。

00:17:32.000 --> 00:17:38.000
この場合、ヨセミテバレーをカタリナ島に変更するためのアニメーショントランジションを追加します。

00:17:38.000 --> 00:17:43.000
これを達成するために、まず既存のジオメトリシェーダーに別の画像ノードのセットを追加します。

00:17:43.000 --> 00:17:48.000
ノードには、カタリナ島の地形の高さ、色、法線が含まれています。

00:17:48.000 --> 00:17:53.000
次に、これら2つの高さ、法線、色をブレンドするミックスノードを追加します。

00:17:53.000 --> 00:17:58.000
最後に、ミックスノードに値を接続して、2つのデータセット間のブレンドを制御します。

00:17:58.000 --> 00:18:01.000
さあ、Reality Composer Proでこれを作りましょう。

00:18:01.000 --> 00:18:04.000
さて、これがこれまでの資料です。

00:18:04.000 --> 00:18:12.000
ヨセミテバレーではなくカタリナ島に、同じデータ（高さ、色、法線）を含む別の画像ノードのセットを追加しましょう。

00:18:12.000 --> 00:18:17.000
次に、2つの色、高さ、法線をブレンドするために、いくつかのミックスノードを追加します。

00:18:17.000 --> 00:18:24.000
最後に、0から1の定数をミックスノードに接続して、表示される地形を制御します。

00:18:24.000 --> 00:18:29.000
混合定数を1に設定すると、地形がカタリナ島を示していることに気づくでしょう。

00:18:29.000 --> 00:18:34.000
混合定数を0に設定すると、ヨセミテバレーが見えます。

00:18:34.000 --> 00:18:43.000
2つの異なる地形間を移行できる素材がわかったので、この移行の進行状況の値をSwiftコードから変更可能にしましょう。

00:18:43.000 --> 00:18:48.000
プロモートコマンドを使用して、進捗値を資料の入力に変換します。

00:18:48.000 --> 00:18:54.000
マテリアルへの入力は、Swiftコードからアクセスできるマテリアルのプロパティになります。

00:18:54.000 --> 00:18:57.000
これで、私たちの素材はジオラマスウィフトアプリで使用する準備が整いました。

00:18:57.000 --> 00:19:02.000
これが私たちの地形線とダイナミックな地形を組み合わせた最終版です。

00:19:02.000 --> 00:19:10.000
このバージョンには、アンチエイリアス地形線やアンビエントオクルージョンマップなど、いくつかの追加の改良があり、すべてシェーダーグラフを使用して追加されています。

00:19:10.000 --> 00:19:13.000
このセッションのサンプルでそれらをチェックしてください。

00:19:13.000 --> 00:19:15.000
それでおそれです。

00:19:15.000 --> 00:19:34.000
今日は、xrOSのマテリアルの概要を簡単に説明しました。Reality Composer ProのShader Graphエディタを使用して動的マテリアルを設計しました。ノードグラフを使用してグラフを整理し、独自の再利用可能なノードを作成する方法を学びました。最後に、オブジェクトを動的に再形成するためにジオメトリ修飾子を組み込むための知識を拡張しました。

00:19:34.000 --> 00:19:38.000
Reality Composer Proは、材料を設計するための大きな可能性を秘めています。

00:19:38.000 --> 00:19:45.000
しかし、Reality Composer Proにはもっと多くのことがあり、それがxrOSで没入型体験を作成するのにどのように役立つか。

00:19:45.000 --> 00:20:01.000
アマンダのセッション「XcodeでReality Composer Proコンテンツと連携」では、Reality Composer ProコンテンツをDioramas Swiftアプリに統合する方法を学びます。また、まだ見ていない場合は、エリックのセッション「Meet Reality Composer Pro」をチェックして、開始方法を学びます。

00:20:01.000 --> 00:20:05.000
xrOSのコンテンツの探索とデザインを楽しんでいただければ幸いです。

00:20:05.000 --> 00:20:07.000
見てくれてありがとう。

00:20:07.000 --> 23:59:59.000
♪

