WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:23.000
Scott: Xin chào, tôi là Scott Mionis từ Nhóm Ảo hóa, và hôm nay chúng ta sẽ đề cập đến cách các tính năng trong macOS Sonoma cho phép bạn tạo ra trải nghiệm liền mạch với Ảo hóa.

00:00:23.000 --> 00:00:29.000
Khung ảo hóa cho phép bạn cấu hình, quản lý và chạy các máy ảo.

00:00:29.000 --> 00:00:35.000
Trong macOS Sonoma, máy ảo Mac và máy ảo Linux mạnh hơn bao giờ hết.

00:00:35.000 --> 00:00:41.000
Chúng dễ sử dụng hơn và với các tùy chọn cấu hình mới, chúng có khả năng tùy biến cao.

00:00:41.000 --> 00:00:45.000
Có một loạt các tính năng làm cho điều này trở nên khả thi.

00:00:45.000 --> 00:00:51.000
Trong phiên này, hãy khám phá một vài mục chính và cách tận dụng chúng trong các ứng dụng của bạn.

00:00:51.000 --> 00:00:58.000
Đầu tiên, quy trình làm việc mới trong máy ảo và cải tiến trải nghiệm người dùng.

00:00:58.000 --> 00:01:02.000
Tiếp theo, các tùy chọn lưu trữ và cấu hình bàn phím mới.

00:01:02.000 --> 00:01:10.000
Và cuối cùng, Rosetta 2 đang làm cho các ứng dụng x86_64 chạy nhanh hơn trong các máy ảo Linux như thế nào.

00:01:10.000 --> 00:01:15.000
Hãy đi sâu vào một số cách mới để làm việc với các máy ảo.

00:01:15.000 --> 00:01:19.000
Chúng ta sẽ xem xét hai tính năng mới mạnh mẽ.

00:01:19.000 --> 00:01:21.000
Đầu tiên là màn hình có thể thay đổi kích thước.

00:01:21.000 --> 00:01:28.000
Một tùy chọn hiển thị mới cho các máy ảo thay đổi kích thước trong thời gian chạy để lấp đầy cửa sổ.

00:01:28.000 --> 00:01:31.000
Và tiếp theo, lưu và khôi phục một máy ảo.

00:01:31.000 --> 00:01:38.000
Một cơ chế để tuần tự hóa một máy ảo đang chạy vào đĩa để nó có thể được nối lại sau.

00:01:38.000 --> 00:01:41.000
Hãy bắt đầu với màn hình có thể thay đổi kích thước.

00:01:41.000 --> 00:01:46.000
Kích thước màn hình là một phần quan trọng khi làm việc trên máy Mac ảo.

00:01:46.000 --> 00:01:57.000
Với màn hình có thể thay đổi kích thước, máy ảo tự động điều chỉnh độ phân giải màn hình để lấp đầy cửa sổ, tận dụng không gian của bạn hiệu quả nhất.

00:01:57.000 --> 00:02:00.000
Hãy đưa cái này vào mã.

00:02:00.000 --> 00:02:09.000
Để sử dụng màn hình có thể thay đổi kích thước trong ứng dụng của riêng bạn, Trước tiên, khởi tạo VZVirtualMachineView.

00:02:09.000 --> 00:02:17.000
Để làm cho màn hình có thể thay đổi kích thước, hãy đặt thuộc tính "automaticallyReconfiguresDisplay" mới thành true.

00:02:17.000 --> 00:02:19.000
Và thế là xong!

00:02:19.000 --> 00:02:26.000
Thay đổi kích thước VZVirtualMachineView giờ đây sẽ tự động yêu cầu máy ảo điều chỉnh kích thước hiển thị của nó.

00:02:26.000 --> 00:02:33.000
Và nếu bạn muốn giữ màn hình cố định, thuộc tính này có thể vẫn là giá trị mặc định của nó.

00:02:33.000 --> 00:02:38.000
Tiếp theo, hãy thảo luận về việc lưu và khôi phục một máy ảo.

00:02:38.000 --> 00:02:42.000
Dừng máy ảo có nghĩa là tắt máy ảo.

00:02:42.000 --> 00:02:46.000
Khởi động một máy ảo có nghĩa là khởi động lạnh.

00:02:46.000 --> 00:02:52.000
Nhưng khi làm việc trên máy Mac, hầu hết các ứng dụng sẽ lưu tiến trình của bạn khi bạn làm việc.

00:02:52.000 --> 00:02:56.000
Điều tương tự cũng nên xảy ra đối với các máy ảo.

00:02:56.000 --> 00:03:02.000
Giả sử tôi đang chạy một máy ảo, và tôi muốn đóng nó mà không làm mất tiến trình của mình.

00:03:02.000 --> 00:03:09.000
Tôi có thể lưu máy ảo của mình vào một tệp và tiếp tục chạy nó sau.

00:03:09.000 --> 00:03:13.000
Hoặc, giả sử tôi muốn sao lưu công việc của mình.

00:03:13.000 --> 00:03:23.000
Tôi có thể lưu máy ảo của mình bất cứ lúc nào, đảm bảo sao chép các tài nguyên bên ngoài như đĩa và bộ nhớ phụ trợ.

00:03:23.000 --> 00:03:31.000
Và nếu tôi muốn quay ngược thời gian, tôi có thể tua lại máy ảo, ngay về trạng thái trước đó của tôi.

00:03:31.000 --> 00:03:33.000
Rất nhiều điều có thể xảy ra với tính năng này.

00:03:33.000 --> 00:03:37.000
Vậy bây giờ hãy đưa nó vào hành động.

00:03:37.000 --> 00:03:46.000
Tôi đang chạy macOS Sonoma, và trên máy tính để bàn của tôi là một máy Mac ảo, cũng đang chạy macOS Sonoma, trong ứng dụng mẫu Ảo hóa.

00:03:46.000 --> 00:03:50.000
Và tôi đang thực hiện một số nghiên cứu cho chuyến đi thú vị tiếp theo của mình đến Apple Store.

00:03:50.000 --> 00:03:57.000
Tất nhiên, tôi đã mở Bản đồ và tôi đang duyệt trang web của Apple để biết thêm thông tin về AirPods.

00:03:57.000 --> 00:04:01.000
Bây giờ, tôi muốn nghỉ ngơi mà không cần tắt máy ảo.

00:04:01.000 --> 00:04:07.000
Vì vậy, tôi lưu máy ảo của mình khi tôi thoát khỏi ứng dụng.

00:04:07.000 --> 00:04:17.000
Sau đó, tôi khởi chạy lại ứng dụng và máy ảo của tôi tiếp tục chạy ngay tại nơi tôi đã dừng lại, với tất cả các tab của tôi đang mở.

00:04:17.000 --> 00:04:22.000
Hãy cùng khám phá cách xây dựng cái này vào ứng dụng của riêng bạn.

00:04:22.000 --> 00:04:26.000
Trước khi lưu máy ảo, hãy tạm dừng máy ảo.

00:04:26.000 --> 00:04:32.000
Điều này đặt máy ảo vào trạng thái ổn định, với việc thực thi bị đình chỉ.

00:04:32.000 --> 00:04:44.000
Sau đó, gọi saveMachineState API mới, ghi tệp vào URL bạn chỉ định, chứa tất cả trạng thái thời gian chạy của máy ảo.

00:04:44.000 --> 00:04:48.000
Mọi thứ bạn cần để tiếp tục chạy nó sau này.

00:04:48.000 --> 00:04:53.000
Các tài nguyên bên ngoài, như hình ảnh đĩa, nên được sao chép riêng.

00:04:53.000 --> 00:04:59.000
Bây giờ chúng ta đã lưu máy ảo, hãy khôi phục nó.

00:04:59.000 --> 00:05:08.000
Để khôi phục trạng thái của máy ảo, hãy bắt đầu bằng cách tạo một VZVirtualMachine mới từ cùng một cấu hình.

00:05:08.000 --> 00:05:23.000
Thay vì khởi động trực tiếp máy ảo, khởi động máy ảo, hãy gọi restoreMachineState API mới, chuyển URL của tệp đã được lưu trước đó.

00:05:23.000 --> 00:05:30.000
Và bây giờ, máy ảo đang ở trạng thái giống hệt như trước đây.

00:05:30.000 --> 00:05:34.000
Bạn có thể tiếp tục chạy nó ngay tại nơi nó đã dừng lại.

00:05:34.000 --> 00:05:41.000
Khi khôi phục một máy ảo từ lần lưu trước đó, có một vài điều cần ghi nhớ.

00:05:41.000 --> 00:05:46.000
Đầu tiên, một tệp lưu chứa dữ liệu của máy ảo.

00:05:46.000 --> 00:05:48.000
Nó cần được bảo vệ.

00:05:48.000 --> 00:05:55.000
Những tệp này được mã hóa phần cứng để cung cấp sự đảm bảo mạnh mẽ nhất có thể.

00:05:55.000 --> 00:06:02.000
Không có tài khoản Mac hoặc người dùng nào khác có thể đọc tệp lưu của người khác hoặc khôi phục máy ảo.

00:06:02.000 --> 00:06:10.000
Ngoài ra, các tệp được lưu hôm nay đã được lập phiên bản, vì vậy các khả năng mới có thể được thêm vào trong tương lai.

00:06:10.000 --> 00:06:21.000
Nếu định dạng tệp thay đổi và tệp lưu không thể được khôi phục, khung sẽ trả về các mã lỗi cụ thể để ứng dụng của bạn có thể xử lý nó.

00:06:21.000 --> 00:06:28.000
Khi điều này xảy ra, hãy loại bỏ tệp, khởi động lại máy ảo và bạn sẽ trở lại đúng hướng.

00:06:28.000 --> 00:06:33.000
Tiếp theo, hãy khám phá một số cách mới để xây dựng một máy ảo.

00:06:33.000 --> 00:06:36.000
Đầu tiên là thiết bị chặn mạng.

00:06:36.000 --> 00:06:41.000
Điều này cho phép một thiết bị lưu trữ được gắn vào một máy ảo từ qua mạng.

00:06:41.000 --> 00:06:49.000
Tiếp theo là hỗ trợ cho các thiết bị điều khiển NVMe, một giải pháp thay thế cho thiết bị khối virtio.

00:06:49.000 --> 00:07:00.000
Và cuối cùng, bàn phím Mac, giúp làm việc trong máy Mac ảo trực quan hơn bằng cách ánh xạ các phím dành riêng cho Apple, như phím Globe, trực tiếp đến máy ảo.

00:07:00.000 --> 00:07:04.000
Hãy bắt đầu, với thiết bị chặn mạng.

00:07:04.000 --> 00:07:13.000
Trong khuôn khổ Ảo hóa, lưu trữ thường được phục vụ cục bộ, đọc và ghi hình ảnh đĩa trên cùng một máy Mac.

00:07:13.000 --> 00:07:21.000
Nhưng trong macOS Sonoma, khung Ảo hóa có thể phục vụ lưu trữ từ xa từ máy chủ.

00:07:21.000 --> 00:07:27.000
Giao thức cho phép điều này là thiết bị khối mạng, hoặc NBD.

00:07:27.000 --> 00:07:30.000
Hãy đi sâu vào cách nó hoạt động.

00:07:30.000 --> 00:07:37.000
Khung ảo hóa triển khai phía máy khách của giao thức NBD.

00:07:37.000 --> 00:07:47.000
Khi một máy ảo truy cập vào đĩa, yêu cầu được chuyển tiếp đến Máy chủ NBD tuân thủ cùng một thông số kỹ thuật.

00:07:47.000 --> 00:07:55.000
Sau khi làm bất cứ điều gì I/O nó cần, máy chủ NBD phản hồi bằng dữ liệu.

00:07:55.000 --> 00:08:00.000
Điều này cực kỳ linh hoạt vì hai lý do.

00:08:00.000 --> 00:08:11.000
Đầu tiên, bộ nhớ bây giờ có thể nằm ở bất cứ đâu; trên cùng một máy Mac hoặc trên một máy chủ từ xa qua mạng.

00:08:11.000 --> 00:08:25.000
Và thứ hai, vì bộ nhớ được quản lý bởi máy chủ của riêng bạn, bạn có thể triển khai bất kỳ I/O tùy chỉnh nào bạn cần, cho dù đó là định dạng hình ảnh tùy chỉnh hay thậm chí là ổ đĩa vật lý.

00:08:25.000 --> 00:08:29.000
Tất cả những điều này hoàn toàn minh bạch với máy ảo.

00:08:29.000 --> 00:08:32.000
Hãy xem cách thiết lập cái này.

00:08:32.000 --> 00:08:40.000
Trong API khung Ảo hóa, có hai phần để khởi tạo một thiết bị lưu trữ.

00:08:40.000 --> 00:08:43.000
Đầu tiên bạn chọn một loại thiết bị.

00:08:43.000 --> 00:08:47.000
Điều này xác định giao diện được trình bày cho máy ảo.

00:08:47.000 --> 00:08:55.000
Và sau đó bạn chọn một tệp đính kèm, Điều này chọn cách dữ liệu thực sự được thể hiện trên máy Mac của bạn.

00:08:55.000 --> 00:08:59.000
Trong các máy ảo, bạn có thể trộn và kết hợp.

00:08:59.000 --> 00:09:09.000
Khung ảo hóa hỗ trợ các thiết bị ảo như thiết bị khối virtio và thiết bị lưu trữ khối lượng lớn USB.

00:09:09.000 --> 00:09:25.000
Và với bất kỳ thiết bị nào trong số này, bạn có thể sử dụng các tệp đính kèm như tệp đính kèm hình ảnh đĩa, đọc và ghi dữ liệu trên hình ảnh đĩa hoặc tệp đính kèm Thiết bị Khối mạng mới, đọc và ghi dữ liệu trên máy chủ NBD.

00:09:25.000 --> 00:09:29.000
Hãy thiết lập tệp đính kèm NBD này trong mã.

00:09:29.000 --> 00:09:36.000
Để sử dụng điều này trong ứng dụng của bạn, trước tiên hãy chỉ định một URL trỏ đến máy chủ NBD.

00:09:36.000 --> 00:09:42.000
Đây là một URL đặc biệt xác định một đĩa cụ thể trên một máy chủ cụ thể.

00:09:42.000 --> 00:09:48.000
Sau đó khởi tạo tệp đính kèm lưu trữ NBD mới với URL này.

00:09:48.000 --> 00:09:52.000
Cuối cùng, khởi tạo một thiết bị lưu trữ với tệp đính kèm này.

00:09:52.000 --> 00:09:56.000
Ví dụ này sử dụng thiết bị chặn virtio.

00:09:56.000 --> 00:10:02.000
Đối với hầu hết các trường hợp sử dụng, đây có thể là lựa chọn hiệu quả nhất.

00:10:02.000 --> 00:10:08.000
Vì bộ nhớ đang được phục vụ qua mạng, kết nối có thể bị mất bất cứ lúc nào.

00:10:08.000 --> 00:10:17.000
Bạn có thể muốn thực hiện hành động khi điều này xảy ra, tạm dừng máy ảo hoặc thiết lập lại kết nối.

00:10:17.000 --> 00:10:29.000
Nếu đúng như vậy, bạn có thể đính kèm một lớp đại diện tùy chỉnh, lớp này sẽ được thông báo khi trạng thái kết nối thay đổi, vì vậy bạn có thể chạy bất kỳ mã nào bạn cần.

00:10:29.000 --> 00:10:37.000
Thêm vào các tùy chọn lưu trữ của khung Ảo hóa là Non-Volatile Memory express, hoặc NVMe.

00:10:37.000 --> 00:10:48.000
NVMe là một công nghệ tiêu chuẩn được kích hoạt trong nhiều nhân Linux và các ứng dụng của nó cụ thể hơn, vì vậy hãy bắt đầu với lý do tại sao bạn có thể muốn sử dụng nó.

00:10:48.000 --> 00:10:59.000
Đối với phần lớn các trường hợp sử dụng, giao diện ảo hóa được cung cấp bởi lưu trữ khối virtio là dễ sử dụng và nhanh nhất.

00:10:59.000 --> 00:11:03.000
Đây chắc chắn là trường hợp của máy Mac ảo.

00:11:03.000 --> 00:11:09.000
Nhưng một số máy ảo Linux không có trình điều khiển virtio.

00:11:09.000 --> 00:11:14.000
Đây có thể là những hạt nhân không được xây dựng để chạy trong môi trường ảo.

00:11:14.000 --> 00:11:21.000
Những gì các hạt nhân này thường có là trình điều khiển cho các thiết bị điều khiển NVMe.

00:11:21.000 --> 00:11:33.000
Trong macOS Sonoma, các thiết bị điều khiển NVMe được mô phỏng bởi khung Ảo hóa, cho phép chạy nhiều hệ điều hành hơn trong các máy ảo.

00:11:33.000 --> 00:11:40.000
Để cấu hình NVMe, hãy sử dụng loại thiết bị mới khi xây dựng máy ảo của bạn.

00:11:40.000 --> 00:11:47.000
NVMe chỉ dành cho các máy ảo Linux, và, tất nhiên, cũng hỗ trợ NBD.

00:11:47.000 --> 00:11:53.000
Và bây giờ, với bàn phím Mac, các lần nhấn phím dành riêng cho Apple được chụp bởi một máy Mac ảo.

00:11:53.000 --> 00:12:00.000
Có nghĩa là bạn có thể sử dụng phím Globe cho các tính năng như chuyển đổi ngôn ngữ hoặc thậm chí làm nổi bật trong máy Mac ảo.

00:12:00.000 --> 00:12:04.000
Bây giờ hãy nói về Rosetta 2.

00:12:04.000 --> 00:12:17.000
Rosetta 2, trong máy ảo Linux, là công nghệ tương tự được sử dụng trên macOS, Và trong macOS Sonoma, cải thiện hiệu suất có nghĩa là Rosetta 2 chạy nhanh hơn trong môi trường Linux ảo.

00:12:17.000 --> 00:12:21.000
Hãy đi sâu vào cách điều này có thể xảy ra.

00:12:21.000 --> 00:12:35.000
Rosetta 2 dịch các trang thực thi theo yêu cầu, cho phép nó khởi chạy tệp thực thi nhanh hơn nhiều so với khi phải đợi để dịch toàn bộ ứng dụng x86_64.

00:12:35.000 --> 00:12:45.000
Nhưng điều này cũng có nghĩa là trong khi ứng dụng đang chạy, Rosetta 2 phải ngừng thực thi định kỳ để dịch các vùng mã mới.

00:12:45.000 --> 00:12:56.000
Chi phí này có thể đáng chú ý nhất khi ứng dụng mới bắt đầu chạy, vì mã cần được dịch lần đầu tiên.

00:12:56.000 --> 00:13:11.000
Nhưng nếu tôi khởi chạy một ứng dụng khác được liên kết với cùng một thư viện hoặc chạy cùng một tệp thực thi, Rosetta 2 phải làm lại tất cả công việc đó, mặc dù mã đó đã được dịch.

00:13:11.000 --> 00:13:15.000
Vấn đề này có thể được giải quyết bằng bộ nhớ đệm.

00:13:15.000 --> 00:13:32.000
Bất cứ khi nào một thư viện hoặc tệp nhị phân thực thi được dịch, Rosetta 2 sẽ lưu kết quả trong bộ nhớ cache trên đĩa và chia sẻ kết quả đó với bất kỳ ứng dụng nào khác cần nó, tránh chi phí dịch lại không cần thiết.

00:13:32.000 --> 00:13:41.000
Trong macOS Sonoma, khung Ảo hóa mang lại sự tối ưu hóa này cho các máy ảo Linux với trình nền thời gian chạy mới.

00:13:41.000 --> 00:13:46.000
Có hai bước bạn sẽ cần thực hiện, để thiết lập điều này.

00:13:46.000 --> 00:13:54.000
Đầu tiên, có một API mới để định cấu hình kênh giao tiếp giữa thời gian chạy Rosetta 2 và trình nền bộ nhớ đệm mới.

00:13:54.000 --> 00:13:58.000
Và sau đó, bạn sẽ cần khởi chạy trình nền trong máy ảo.

00:13:58.000 --> 00:14:06.000
Thời gian chạy Rosetta 2 và trình nền mới giờ đây sẽ chạy cùng nhau trong máy ảo.

00:14:06.000 --> 00:14:12.000
Hai chương trình giao tiếp với khung Ảo hóa để thiết lập kết nối.

00:14:12.000 --> 00:14:28.000
Các yêu cầu liên kết động, trong số những yêu cầu khác, sẽ được chuyển tiếp đến trình nền, nơi quản lý bộ nhớ cache và thời gian chạy Rosetta 2 sẽ tìm nạp các tệp nhị phân được dịch trước trực tiếp từ trình nền, loại bỏ chi phí dịch lại.

00:14:28.000 --> 00:14:34.000
Bạn sẽ thấy tác động lớn nhất đến các tác vụ nặng nề như biên dịch hoặc cài đặt gói.

00:14:34.000 --> 00:14:40.000
Khung ảo hóa cho phép bạn mang lại rất nhiều tùy chọn tuyệt vời cho các ứng dụng của mình.

00:14:40.000 --> 00:14:44.000
Hãy nói về những cách để bắt đầu.

00:14:44.000 --> 00:14:51.000
Cân nhắc sử dụng màn hình có thể thay đổi kích thước cho cả máy Mac ảo và máy ảo Linux.

00:14:51.000 --> 00:14:57.000
Nó cải thiện đáng kể trải nghiệm người dùng chỉ với một dòng mã duy nhất.

00:14:57.000 --> 00:15:11.000
Bàn phím Mac được thiết kế đặc biệt để hoạt động liền mạch với các máy Mac ảo mới nhất, Cấu hình máy Mac ảo với thiết bị này là một cách dễ dàng để tăng trải nghiệm người dùng.

00:15:11.000 --> 00:15:17.000
Một vài trong số các tính năng này là các khối xây dựng mà bạn có thể sử dụng để xây dựng những trải nghiệm mạnh mẽ.

00:15:17.000 --> 00:15:21.000
Khả năng lưu một máy ảo là một ví dụ.

00:15:21.000 --> 00:15:27.000
Bắt đầu điều tra xem việc tua lại hoặc lưu tiến độ phù hợp với ứng dụng của bạn như thế nào.

00:15:27.000 --> 00:15:32.000
Và sự linh hoạt được cung cấp bởi NBD thật đáng kinh ngạc.

00:15:32.000 --> 00:15:39.000
NBD có thể mở khóa rất nhiều khả năng cho các ứng dụng cần IO tùy chỉnh.

00:15:39.000 --> 00:15:46.000
Đây mới chỉ là sự khởi đầu của những gì máy ảo có thể làm trong macOS Sonoma.

00:15:46.000 --> 00:15:47.000
Cảm ơn bạn.

00:15:47.000 --> 00:15:51.000
Nhóm Ảo hóa nóng lòng muốn xem những gì bạn xây dựng.

00:15:51.000 --> 23:59:59.000
♪ ♪

