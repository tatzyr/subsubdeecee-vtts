WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:13.000
Jared: Xin chào, và chào mừng đến với "Có gì mới trong Tài sản nền."

00:00:13.000 --> 00:00:16.000
Tên tôi là Jared, và tôi là một kỹ sư phần mềm ở đây tại Apple.

00:00:16.000 --> 00:00:21.000
Tôi thực sự mong muốn được chia sẻ với bạn mọi thứ mới trong năm nay với Background Assets.

00:00:21.000 --> 00:00:23.000
Bây giờ, nhóm của chúng tôi đã thay đổi một vài điều trong năm qua.

00:00:23.000 --> 00:00:27.000
Tuy nhiên, tôi khuyến khích bạn kiểm tra phiên trước của tôi nơi Tài sản nền được giới thiệu.

00:00:27.000 --> 00:00:31.000
Có rất nhiều thông tin chi tiết trong đó mà phiên mới này được xây dựng dựa trên.

00:00:31.000 --> 00:00:38.000
Trong phiên này, tôi sẽ bắt đầu bằng cách cung cấp cho bạn cái nhìn tổng quan về Tài sản nền và lý do tại sao bạn nên áp dụng nó vào ứng dụng của mình.

00:00:38.000 --> 00:00:45.000
Sau đó, tôi sẽ thảo luận về những gì mới trong năm nay trong Background Assets, bao gồm một tính năng hoàn toàn mới mà nhóm của chúng tôi thực sự vui mừng được chia sẻ với bạn.

00:00:45.000 --> 00:00:55.000
Sau đó, tôi sẽ hướng dẫn bạn triển khai mẫu Tài sản nền mà bạn thậm chí có thể tự tải xuống và tôi sẽ chỉ cho bạn cách áp dụng công nghệ này có thể cải thiện đáng kể trải nghiệm người dùng của ứng dụng của bạn.

00:00:55.000 --> 00:01:00.000
Sau đó tôi sẽ cung cấp cho bạn một số hướng dẫn về việc gỡ lỗi tiện ích mở rộng ứng dụng của bạn và mô phỏng các điểm vào của nó.

00:01:00.000 --> 00:01:05.000
Được rồi! Hãy xem qua bản tóm tắt nhanh về Tài sản nền.

00:01:05.000 --> 00:01:08.000
Một trong những mục tiêu chính đằng sau Tài sản nền là tránh phải chờ đợi.

00:01:08.000 --> 00:01:14.000
Điều cuối cùng mà người dùng muốn trải nghiệm là khởi chạy ứng dụng của bạn và phải đợi quá trình tải xuống lớn hoàn tất.

00:01:14.000 --> 00:01:20.000
Background Assets giải quyết vấn đề này thông qua sự kết hợp giữa khuôn khổ của nó và phần mở rộng ứng dụng liên quan.

00:01:20.000 --> 00:01:26.000
Công nghệ mới này đã được giới thiệu trong iOS 16.1 cùng với bản phát hành ban đầu của macOS Ventura.

00:01:26.000 --> 00:01:33.000
Nó hỗ trợ khả năng tải xuống nội dung bổ sung cho ứng dụng của bạn bằng cách sử dụng nhà cung cấp CDN hoặc máy chủ bạn quản lý.

00:01:33.000 --> 00:01:42.000
Ví dụ, nội dung này có thể được tìm nạp trong quá trình cài đặt ứng dụng ban đầu, khi ứng dụng cập nhật hoặc định kỳ trong nền khi người dùng không sử dụng ứng dụng của bạn.

00:01:42.000 --> 00:01:50.000
Thông qua tiện ích mở rộng ứng dụng được ghép nối, bạn có thể viết mã chạy khi ứng dụng không được người dùng sử dụng tích cực.

00:01:50.000 --> 00:01:58.000
Công nghệ này hiện đang được hỗ trợ trên macOS, iOS và iPadOS, vì vậy nó đã có sẵn trên các nền tảng yêu thích của bạn.

00:01:58.000 --> 00:02:04.000
Một trong những phần hay nhất về việc sử dụng Background Assets là tiện ích mở rộng có khả năng chạy trước khi người dùng khởi chạy ứng dụng của bạn.

00:02:04.000 --> 00:02:09.000
Điều này cung cấp một cách để bắt đầu tìm nạp tài sản ngay khi ứng dụng của bạn được cài đặt thông qua App Store.

00:02:09.000 --> 00:02:13.000
Tiện ích mở rộng cũng có thể được hệ thống khởi chạy định kỳ trong nền.

00:02:13.000 --> 00:02:19.000
Điều này là để đảm bảo rằng bất kỳ tài sản mới hoặc cập nhật nào có mặt khi ứng dụng của bạn được người dùng khởi chạy.

00:02:19.000 --> 00:02:23.000
Tiện ích mở rộng cũng được sử dụng để phục vụ tải xuống khi ứng dụng không chạy.

00:02:23.000 --> 00:02:30.000
Ví dụ, khi một tệp tải xuống xong, tiện ích mở rộng sẽ được khởi chạy để nó có thể di chuyển tệp đến đích cuối cùng.

00:02:30.000 --> 00:02:34.000
Một điều cần lưu ý là thời gian chạy của tiện ích mở rộng bị giới hạn.

00:02:34.000 --> 00:02:38.000
Điều này là để đảm bảo rằng thiết bị của người dùng được tối ưu hóa về sức mạnh và hiệu suất.

00:02:38.000 --> 00:02:41.000
Tôi sẽ sớm đi vào chi tiết hơn về điều này.

00:02:41.000 --> 00:02:47.000
Điều quan trọng cần biết là tiện ích mở rộng ứng dụng bạn phát triển để sử dụng với Background Assets được đặt vào một hộp cát chuyên dụng.

00:02:47.000 --> 00:02:52.000
Điều này là để đảm bảo rằng tiện ích mở rộng chỉ được sử dụng để quản lý nội dung thông qua Tài sản nền.

00:02:52.000 --> 00:02:59.000
Nếu bạn thấy rằng khả năng hoặc API không khả dụng trong hộp cát, vui lòng liên hệ với chúng tôi thông qua Trợ lý phản hồi.

00:02:59.000 --> 00:03:06.000
Tôi đã đề cập trước đó rằng tiện ích mở rộng ứng dụng của bạn được gọi trong ba sự kiện hệ thống: cài đặt ứng dụng, cập nhật ứng dụng và định kỳ trong nền.

00:03:06.000 --> 00:03:10.000
Hãy cùng xem vòng đời này được quản lý như thế nào.

00:03:10.000 --> 00:03:17.000
Vòng đời của tiện ích mở rộng của bạn bắt đầu khi App Store cài đặt hoặc cập nhật ứng dụng của bạn trên thiết bị.

00:03:17.000 --> 00:03:22.000
Dịch vụ hệ thống Background Assets sau đó được thông báo và ngăn ứng dụng khởi chạy.

00:03:22.000 --> 00:03:28.000
Hệ thống sau đó kiểm tra gói ứng dụng của bạn và đọc Info.plist của nó cho khóa BAManifestURL.

00:03:28.000 --> 00:03:36.000
Hệ thống sẽ bắt đầu tải xuống bản kê khai được tham chiếu bởi khóa đó và báo cáo tiến độ tải xuống trở lại App Store.

00:03:36.000 --> 00:03:44.000
Khi bản kê khai của bạn đã được tải xuống, hệ thống sẽ đánh thức tiện ích mở rộng của bạn bằng cách đưa ra yêu cầu nội dung cho sự kiện cài đặt hoặc cập nhật đã cho.

00:03:44.000 --> 00:03:48.000
Yêu cầu nội dung bao gồm một đường dẫn đến bản kê khai đã tải xuống.

00:03:48.000 --> 00:03:55.000
Tiện ích mở rộng của bạn nên sử dụng bản kê khai để xác định URL, kích thước tệp và nội dung nào cần lên lịch tải xuống.

00:03:55.000 --> 00:04:02.000
Sau đó, khi tiện ích mở rộng của bạn đã xác định được tài sản nào cần được tải xuống, nó sẽ trả về các bản tải xuống đó dưới dạng một bộ BADownloads.

00:04:02.000 --> 00:04:09.000
Hệ thống sau đó tạm dừng tiện ích mở rộng ứng dụng của bạn, hoặc đôi khi chấm dứt nó, để tiết kiệm năng lượng và hiệu suất trên thiết bị.

00:04:09.000 --> 00:04:16.000
Việc tải xuống sau đó sẽ bắt đầu và tiện ích mở rộng của bạn sẽ được thông báo ngay sau khi hoàn thành.

00:04:16.000 --> 00:04:23.000
Yêu cầu nội dung định kỳ gần giống với sự kiện cài đặt ứng dụng, với sự khác biệt chính duy nhất là thiết bị của bạn xác định khi nào sự kiện sẽ xảy ra.

00:04:23.000 --> 00:04:28.000
Thiết bị đưa ra quyết định này dựa trên cách người dùng đã sử dụng thiết bị của họ.

00:04:28.000 --> 00:04:35.000
Các yếu tố chính như Chế độ năng lượng thấp, Làm mới ứng dụng nền hoặc tần suất khởi chạy ứng dụng của bạn đều được xem xét.

00:04:35.000 --> 00:04:42.000
Bây giờ, chúng ta hãy đi sâu hơn một chút và xem xét các yếu tố góp phần vào thời điểm tiện ích mở rộng của bạn chạy định kỳ.

00:04:42.000 --> 00:04:50.000
Chúng tôi quan tâm rất nhiều đến hiệu suất tổng thể và mức sử dụng năng lượng của thiết bị, đó là lý do tại sao Tài sản nền có những hạn chế được đặt ra đối với thời gian chạy của tiện ích mở rộng.

00:04:50.000 --> 00:04:54.000
Điều này bao gồm việc thực thi việc sử dụng bộ nhớ của tiện ích mở rộng của bạn.

00:04:54.000 --> 00:04:59.000
Nếu tiện ích mở rộng của bạn vượt quá vài megabyte bộ nhớ, nó có thể bị hệ thống chấm dứt.

00:04:59.000 --> 00:05:10.000
Vì vậy, bạn có thể muốn xem xét ánh xạ bộ nhớ bất kỳ tệp lớn nào mà tiện ích mở rộng của bạn cần đọc, vì dữ liệu ánh xạ bộ nhớ được hỗ trợ bởi bộ nhớ của thiết bị không được tính vào giới hạn này.

00:05:10.000 --> 00:05:15.000
Khi một ứng dụng được cài đặt ban đầu, nó được cung cấp với phân bổ mặc định là vài phút thời gian chạy mỗi ngày.

00:05:15.000 --> 00:05:21.000
Mặc dù điều này nghe có vẻ không nhiều, nhưng với phần mở rộng được thiết kế phù hợp, nhưng điều này có thể đi một chặng đường dài.

00:05:21.000 --> 00:05:24.000
Thời gian chạy cũng thay đổi dựa trên việc sử dụng ứng dụng.

00:05:24.000 --> 00:05:29.000
Nếu một ứng dụng không được khởi chạy trong một thời gian, hệ thống có thể bắt đầu điều chỉnh các lần khởi chạy tiện ích mở rộng.

00:05:29.000 --> 00:05:38.000
Ví dụ, một ứng dụng hiếm khi được sử dụng có thể thấy thời gian chạy của nó bị hạn chế nhiều hơn, trong khi một ứng dụng thường được sử dụng có thể được cung cấp thêm thời gian chạy.

00:05:38.000 --> 00:05:44.000
Giao thức BADownloaderExtension xác định các chức năng được sử dụng làm điểm vào tiện ích mở rộng ứng dụng của bạn.

00:05:44.000 --> 00:05:50.000
Thời gian chạy bắt đầu được tính khi một hàm được hệ thống gọi và ngừng được tính khi hàm đó thoát khỏi phạm vi.

00:05:50.000 --> 00:05:57.000
Khi chức năng của bạn thoát khỏi phạm vi hoặc thời gian chạy tiện ích mở rộng của bạn đã cạn kiệt, hệ thống có thể tạm dừng hoặc chấm dứt tiện ích mở rộng.

00:05:57.000 --> 00:06:00.000
Tôi sẽ đưa ra một ví dụ trong giây lát.

00:06:00.000 --> 00:06:04.000
Tuy nhiên, có một ngoại lệ đối với phạm vi chức năng kiểm soát thời gian chạy của tiện ích mở rộng của bạn.

00:06:04.000 --> 00:06:13.000
Nếu một API điều khiển độc quyền không đồng bộ được gọi, tiện ích mở rộng của bạn sẽ được tiếp tục chạy cho đến khi trình xử lý hoàn thành của nó được gọi và trả về.

00:06:13.000 --> 00:06:17.000
Có một vài cách mà thời gian chạy của tiện ích mở rộng có thể được kiểm soát bởi người dùng.

00:06:17.000 --> 00:06:28.000
Ví dụ: nếu thiết bị ở Chế độ năng lượng thấp hoặc đã tắt Làm mới ứng dụng nền, cho dù đó là trên toàn cầu hay cho ứng dụng cụ thể của bạn, thì tiện ích mở rộng của bạn sẽ không bao giờ chạy.

00:06:28.000 --> 00:06:32.000
Trước đây, tôi đã đề cập đến cách xác định thời gian chạy mở rộng dựa trên phạm vi hàm.

00:06:32.000 --> 00:06:37.000
Hãy xem một ví dụ để hiểu rõ hơn về cách thức hoạt động của nó.

00:06:37.000 --> 00:06:42.000
Mã này đại diện cho giao diện của tiện ích mở rộng phục vụ tải xuống nền của bạn.

00:06:42.000 --> 00:06:47.000
Giao thức BADownloaderExtension xác định các chức năng mà hệ thống sẽ gọi vào tiện ích mở rộng của bạn.

00:06:47.000 --> 00:06:52.000
Bây giờ hãy thêm một trong những chức năng cần thiết để phù hợp với giao thức này.

00:06:52.000 --> 00:06:57.000
Chức năng "tải xuống theo yêu cầu" là một trong những điểm truy cập chính vào tiện ích mở rộng.

00:06:57.000 --> 00:07:05.000
BAContentRequest của nó xác định xem nó đang được gọi trong quá trình cài đặt ứng dụng, cập nhật ứng dụng hay như một phần của kiểm tra định kỳ trong nền.

00:07:05.000 --> 00:07:11.000
Đối số manifestURL cung cấp đường dẫn đến tệp cục bộ đã được tải xuống trước khi tiện ích mở rộng được gọi.

00:07:11.000 --> 00:07:19.000
Tệp kê khai thường được sử dụng để so sánh những gì hiện đang được tải xuống với những bản tải xuống có thể có sẵn trên máy chủ.

00:07:19.000 --> 00:07:24.000
Loại trả về của định nghĩa hàm yêu cầu một tập hợp các đối tượng tải xuống phù hợp với loại BADownload.

00:07:24.000 --> 00:07:32.000
Điều này có nghĩa là việc trả lời yêu cầu của chức năng này yêu cầu bạn trả lại đồng bộ bất kỳ nội dung nào cần tải xuống trước khi chức năng thoát khỏi phạm vi.

00:07:32.000 --> 00:07:37.000
Tuy nhiên, trong ví dụ giả tạo này, giả sử rằng bạn gọi một hàm gọi là parseManifest.

00:07:37.000 --> 00:07:44.000
Chức năng này đọc bản kê khai đã tải xuống và sau đó trả về các đối tượng BADownload cần được tải xuống.

00:07:44.000 --> 00:07:51.000
Tuy nhiên, giả sử rằng chức năng parseManifest được triển khai kém và mất 30 phút để phân tích cú pháp và xây dựng các bản tải xuống.

00:07:51.000 --> 00:07:57.000
Điều này cuối cùng sẽ vượt quá đáng kể thời gian chạy của tiện ích mở rộng và tiện ích mở rộng sẽ bị chấm dứt.

00:07:57.000 --> 00:08:07.000
Điều quan trọng cần nhớ là thời gian chạy của tiện ích mở rộng được tính toán từ thời điểm chức năng "tải xuống cho yêu cầu" được gọi, cho đến khi nó thoát khỏi phạm vi và trả về.

00:08:07.000 --> 00:08:11.000
Hãy xem xét một ví dụ có vấn đề khác.

00:08:11.000 --> 00:08:18.000
Bất cứ khi nào bất kỳ giao thức BADownloaderExtension nào hoạt động phạm vi thoát, tiện ích mở rộng có thể bị đình chỉ và sau đó bị chấm dứt.

00:08:18.000 --> 00:08:24.000
Bạn sẽ nhận thấy rằng giao thức không xác định bất kỳ chức năng nào của nó là đột biến và có một lý do chính đáng cho việc này.

00:08:24.000 --> 00:08:30.000
Khi tiện ích mở rộng của bạn bị chấm dứt, bất kỳ biến thể hiện hoặc trạng thái trong bộ nhớ nào sẽ không được lưu.

00:08:30.000 --> 00:08:35.000
Nếu tiện ích mở rộng của bạn cần duy trì bất kỳ trạng thái nào, bạn nên tuần tự hóa trạng thái đó vào đĩa.

00:08:35.000 --> 00:08:42.000
Tiếp theo, hãy nói về API bạn sẽ sử dụng từ cả tiện ích mở rộng và ứng dụng để quản lý tải xuống.

00:08:42.000 --> 00:08:47.000
Trình quản lý tải xuống trong khuôn khổ là cách chính để giao tiếp với dịch vụ hệ thống Tài sản nền.

00:08:47.000 --> 00:08:51.000
Trình quản lý là một đối tượng đơn lẻ có thể được sử dụng trong toàn bộ ứng dụng của bạn.

00:08:51.000 --> 00:08:58.000
Sử dụng trình quản lý, bạn có thể lên lịch tải xuống tài sản của mình ở chế độ nền và quảng bá các bản tải xuống đã được lên lịch ở phía trước.

00:08:58.000 --> 00:09:07.000
Từ trình quản lý tải xuống, bạn cũng có thể quản lý các bản tải xuống hiện đang trên chuyến bay, mà tôi đã đề cập trước đó có thể đã được lên lịch bởi tiện ích mở rộng trước khi ứng dụng của bạn được khởi chạy.

00:09:07.000 --> 00:09:16.000
Ngoài ra còn có một cơ chế đồng bộ hóa mà bạn có thể sử dụng để đảm bảo rằng cả ứng dụng của bạn và tiện ích mở rộng liên quan của nó không thực hiện các hoạt động tương tự cùng một lúc.

00:09:16.000 --> 00:09:25.000
Điều cuối cùng tôi muốn đưa ra về trình quản lý tải xuống là nó có một đại diện để nhận các cuộc gọi lại về tải xuống, tương tự như giao thức BADownloaderExtension.

00:09:25.000 --> 00:09:31.000
Nếu bạn đăng ký một đại diện trên BADownloadManager, thì nó sẽ nhận được những cuộc gọi lại đó thay vì tiện ích mở rộng của bạn.

00:09:31.000 --> 00:09:36.000
Điều này rất hữu ích vì nó cung cấp cho ứng dụng của bạn một cách để quản lý các bản tải xuống của nó trong khi nó đang chạy.

00:09:36.000 --> 00:09:44.000
Bây giờ bạn đã được bồi dưỡng nhanh về cách quản lý tải xuống, hãy nói về cách bạn nên quản lý các tệp đó khi chúng đã có trên thiết bị của người dùng.

00:09:44.000 --> 00:09:52.000
Bất kỳ tệp nào bạn tải xuống với Tài sản nền đều được đánh dấu có thể thanh lọc được, điều đó có nghĩa là hệ thống có thể xóa chúng trong những trường hợp quan trọng.

00:09:52.000 --> 00:09:58.000
Hãy suy nghĩ về bản cập nhật bảo mật hệ thống hoặc nếu người dùng cần quay video về bước đầu tiên của con họ.

00:09:58.000 --> 00:10:05.000
Tuy nhiên, nếu bạn sửa đổi hoặc mở rộng nội dung đã tải xuống, thì những tệp đó không bị hệ thống theo dõi và do đó không thể thanh lọc được.

00:10:05.000 --> 00:10:10.000
Bạn nên suy nghĩ cẩn thận về cách bạn sửa đổi tài sản hoặc trích xuất dữ liệu từ chúng.

00:10:10.000 --> 00:10:19.000
Nếu bạn quản lý không chính xác tài sản đã tải xuống của mình, bạn có thể tăng kích thước bản sao lưu thiết bị của người dùng hoặc ngăn bản cập nhật bảo mật quan trọng được tải xuống.

00:10:19.000 --> 00:10:23.000
Do đó, bạn nên cố gắng lưu trữ tài sản đã tải xuống của mình trong thư mục bộ nhớ cache của mình.

00:10:23.000 --> 00:10:28.000
Bằng cách đó, hệ thống biết rằng nó có thể thanh lọc chúng khi điều quan trọng là phải làm như vậy.

00:10:28.000 --> 00:10:35.000
Bây giờ bạn đã có bản tóm tắt đầy đủ về cách thức hoạt động của tất cả những điều này, chúng ta hãy xem có gì mới trong năm nay với Tài sản nền.

00:10:35.000 --> 00:10:43.000
Đầu năm nay, chúng tôi đã giới thiệu các bản tải xuống cần thiết, cung cấp cách tìm nạp nội dung trong khi ứng dụng của bạn đang cài đặt hoặc cập nhật.

00:10:43.000 --> 00:10:49.000
Điều này có nghĩa là các bản tải xuống của bạn được tích hợp hoàn toàn vào Màn hình chính iOS, macOS Launchpad và App Store.

00:10:49.000 --> 00:10:57.000
Đối với người dùng cuối, việc tải xuống tài sản của bạn xuất hiện với họ như thể ứng dụng hiện vẫn đang được tải xuống từ App Store.

00:10:57.000 --> 00:11:03.000
Điều này cũng có nghĩa là trong khi các bản tải xuống cần thiết của bạn đang trên chuyến bay, người dùng không thể khởi chạy ứng dụng của bạn.

00:11:03.000 --> 00:11:06.000
Tất cả những gì người dùng có thể làm là hủy hoặc tạm dừng cài đặt.

00:11:06.000 --> 00:11:13.000
Vì tạm dừng được hỗ trợ, máy chủ của bạn nên hỗ trợ phạm vi HTTP để có thể tiếp tục.

00:11:13.000 --> 00:11:18.000
Vì các bản tải xuống thiết yếu xảy ra trong quá trình cài đặt ứng dụng, chúng được ưu tiên hơn bất kỳ bản tải xuống không cần thiết nào.

00:11:18.000 --> 00:11:21.000
Hãy cùng xem nào.

00:11:21.000 --> 00:11:25.000
Tất cả bắt đầu khi ứng dụng của bạn được yêu cầu từ App Store hoặc TestFlight.

00:11:25.000 --> 00:11:33.000
Nếu Info.plist của ứng dụng chứa các khóa tài sản thiết yếu, thì tiến trình được thiết lập trên thiết bị và chúng tôi trải qua quy trình này.

00:11:33.000 --> 00:11:45.000
Khi ứng dụng của bạn đã được tải xuống và cài đặt, hệ thống sẽ đánh thức tiện ích mở rộng của bạn bằng cách đưa ra yêu cầu nội dung, bao gồm yêu cầu đó là cài đặt ứng dụng, cập nhật ứng dụng hay tìm nạp định kỳ.

00:11:45.000 --> 00:11:50.000
Trong thời gian này, một thử thách xác thực có thể được gửi để tải xuống bản kê khai.

00:11:50.000 --> 00:11:55.000
Tiện ích mở rộng của bạn sau đó sẽ hỗ trợ kết hợp các bản tải xuống cần thiết và không cần thiết.

00:11:55.000 --> 00:12:04.000
Như một lưu ý phụ, điều quan trọng là tiện ích mở rộng của bạn phải nhanh chóng khôi phục tải xuống, vì tiến trình tải xuống ứng dụng của bạn sẽ xuất hiện bị đóng băng đối với người dùng cho đến khi chức năng này quay trở lại.

00:12:04.000 --> 00:12:10.000
Thời điểm tiện ích mở rộng cung cấp các bản tải xuống, bất kỳ bản tải xuống nào được đánh dấu là cần thiết sẽ ngay lập tức bắt đầu.

00:12:10.000 --> 00:12:16.000
Tiện ích mở rộng của bạn cũng có thể nhận được một thử thách xác thực bổ sung trong thời gian này.

00:12:16.000 --> 00:12:23.000
Khi tất cả các bản tải xuống cần thiết của bạn kết thúc, hệ thống sẽ chấm dứt tiện ích mở rộng của bạn và người dùng sẽ có thể khởi chạy ứng dụng được.

00:12:23.000 --> 00:12:27.000
Tiện ích mở rộng sau đó sẽ nhận được một loạt các bản tải xuống thành công và có khả năng không thành công.

00:12:27.000 --> 00:12:34.000
Nếu có bất kỳ lượt tải xuống không thành công nào, bạn có thể xếp hàng lại chúng là không cần thiết bằng cách sử dụng BADownloadManager.

00:12:34.000 --> 00:12:42.000
Vì tiện ích mở rộng của bạn đang nhận được thông báo hoàn thành cho các bản tải xuống cần thiết, hệ thống sẽ ngay lập tức bắt đầu tải xuống các tài sản không cần thiết.

00:12:42.000 --> 00:12:47.000
Các bản tải xuống không cần thiết sau đó sẽ được gửi đến tiện ích mở rộng khi chúng hoàn tất tải xuống.

00:12:47.000 --> 00:12:55.000
Bây giờ chúng ta hãy xem cách các bản tải xuống cần thiết tích hợp vào tiến trình cài đặt App Store trên Màn hình chính iOS.

00:12:55.000 --> 00:13:07.000
Một tỷ lệ phần trăm của chỉ báo tiến độ được chia thành thời gian cần thiết để tải xuống ứng dụng cơ bản của bạn, cộng với lượng thời gian để thực hiện cài đặt, tiếp theo là lượng thời gian cần thiết để tải xuống các tài sản thiết yếu của bạn.

00:13:07.000 --> 00:13:15.000
Khóa BAEssentialDownloadAllowance mới được xác định trong Info.plist của ứng dụng của bạn được sử dụng để thiết lập chỉ báo tiến độ tổng thể ban đầu.

00:13:15.000 --> 00:13:27.000
Sau đó, khi contentForRequest được gọi vào tiện ích mở rộng của bạn và tiện ích mở rộng của bạn trả về các bản tải xuống, kích thước tệp của mỗi bản tải xuống cần thiết sẽ được cộng lại với nhau để xác định số lượng thực sự đang được tải xuống.

00:13:27.000 --> 00:13:35.000
Nếu số tiền bạn lên lịch tải xuống ít hơn đáng kể so với phụ cấp tải xuống thiết yếu, thì chỉ báo tiến độ có thể di chuyển khá nhanh.

00:13:35.000 --> 00:13:42.000
Bạn nên đặt mục tiêu đưa trợ cấp tải xuống thiết yếu của mình gần với những gì đang thực sự được tải xuống để đảm bảo tiến trình suôn sẻ cho người dùng.

00:13:42.000 --> 00:13:47.000
Điều quan trọng cần lưu ý là mọi thứ chúng ta đã thảo luận đều có thể bị người dùng vô hiệu hóa.

00:13:47.000 --> 00:13:51.000
Trong ngăn cài đặt App Store, có một phần để vô hiệu hóa nội dung trong ứng dụng.

00:13:51.000 --> 00:14:01.000
Mặc dù điều này không vô hiệu hóa toàn bộ Tài sản nền, nhưng nó ngăn các tài sản thiết yếu tải xuống và khả năng tiện ích mở rộng chạy trước khi người dùng khởi chạy ứng dụng.

00:14:01.000 --> 00:14:07.000
Vì vậy, điều quan trọng là phải nghĩ về các tài sản thiết yếu chỉ như vậy: cần thiết nhưng không phải là yêu cầu để ứng dụng của bạn khởi chạy.

00:14:07.000 --> 00:14:15.000
Do đó, điều quan trọng đối với ứng dụng của bạn là xử lý các luồng mà các tài sản thiết yếu chưa có trên thiết bị khi ứng dụng của bạn được khởi chạy.

00:14:15.000 --> 00:14:22.000
Khả năng sử dụng các tài sản thiết yếu đã thực sự được giới thiệu vào đầu mùa xuân như một phần của iOS 16.4 và macOS Ventura 13.3.

00:14:22.000 --> 00:14:28.000
Các API mới khá tối thiểu và nên dễ dàng được thêm vào tiện ích mở rộng hiện có của bạn.

00:14:28.000 --> 00:14:35.000
API đầu tiên được tạo ra để hỗ trợ tải xuống thiết yếu thực sự là một trình khởi tạo mới trên BAURLDownload.

00:14:35.000 --> 00:14:39.000
Có hai lập luận mới mà chúng tôi đã thêm cụ thể để hỗ trợ tính năng này.

00:14:39.000 --> 00:14:49.000
Đối số thiết yếu, như tên gọi của nó, xác định xem việc tải xuống có nên được đánh dấu là cần thiết hay không, trong đó thiết yếu có nghĩa là đóng góp vào tiến trình tải xuống và cài đặt tổng thể của ứng dụng.

00:14:49.000 --> 00:14:53.000
Đối số kích thước tệp là kích thước của tài sản sẽ được tải xuống.

00:14:53.000 --> 00:14:57.000
Kích thước tệp phải chính xác khi tạo các bản tải xuống cần thiết.

00:14:57.000 --> 00:15:03.000
Hệ thống cần thông tin này để tiến trình cài đặt ứng dụng trên thiết bị của người dùng được hiển thị đúng cách.

00:15:03.000 --> 00:15:11.000
Nếu tệp mà Tài sản nền tải xuống không khớp với kích thước tệp được cung cấp ở đây, thì việc tải xuống sẽ không thành công nếu tải xuống được đánh dấu là cần thiết.

00:15:11.000 --> 00:15:22.000
Nếu phần mở rộng của bạn không biết kích thước của tệp, thì kích thước tệp nên được bao gồm trong BAManifestURL được cung cấp cho phần mở rộng trước khi phần mở rộng được khởi chạy.

00:15:22.000 --> 00:15:29.000
Một API khác đã được giới thiệu cung cấp một lớp lót dễ dàng để tạo một đại diện không cần thiết của bản tải xuống.

00:15:29.000 --> 00:15:36.000
Vì các bản tải xuống thiết yếu chỉ có thể được xếp hàng trong hàm contentForRequest, API này có thể hữu ích trong nhiều trường hợp.

00:15:36.000 --> 00:15:45.000
Ví dụ, giả sử việc tìm nạp bản tải xuống thiết yếu không thành công, có lẽ do sự cố mạng hoặc tệp chỉ đơn giản là tạm thời không khả dụng.

00:15:45.000 --> 00:15:53.000
Chà, trong chức năng tải xuống nền không thành công trong tiện ích mở rộng của bạn, bạn có thể dễ dàng tạo một đại diện không cần thiết của bản tải xuống đó và xếp hàng lại nó.

00:15:53.000 --> 00:16:00.000
Quá trình tải xuống sau đó sẽ bắt đầu ở chế độ nền và tiện ích mở rộng hoặc ứng dụng của bạn sẽ được thông báo khi hoàn tất.

00:16:00.000 --> 00:16:06.000
Bây giờ chúng ta hãy xem xét một số khóa cần thiết cần có trong Info.plist của ứng dụng của bạn.

00:16:06.000 --> 00:16:09.000
Trong phiên họp năm ngoái, tôi đã xem xét chi tiết từng chìa khóa này.

00:16:09.000 --> 00:16:13.000
Nếu bạn muốn một lời giải thích chuyên sâu hơn, tôi khuyến khích bạn xem bài nói chuyện đó.

00:16:13.000 --> 00:16:23.000
Điều quan trọng cần lưu ý là các khóa này được yêu cầu không chỉ để sử dụng khung Tài sản nền mà còn cần thiết để gửi ứng dụng của bạn đến App Store.

00:16:23.000 --> 00:16:31.000
Có hai khóa mới trong năm nay được yêu cầu để hỗ trợ các tài sản thiết yếu: BAEssentialDownloadAllowance và BAEssentialMaxInstallSize.

00:16:31.000 --> 00:16:40.000
Trợ cấp tải xuống thiết yếu được thể hiện bằng byte và xác định giới hạn trên về mức độ lớn của tổng tất cả các tài sản thiết yếu của bạn để tải xuống.

00:16:40.000 --> 00:16:49.000
Điều quan trọng là cố gắng đưa con số này càng gần càng tốt với kích thước của các tài sản thiết yếu mà bạn xếp hàng để quá trình tải xuống diễn ra suôn sẻ cho người dùng khi họ cài đặt ứng dụng của bạn.

00:16:49.000 --> 00:16:56.000
Khóa mới khác, BAEssentialMaxInstallSize, đại diện cho kích thước tối đa của những tài sản đó được trích xuất trên thiết bị của người dùng.

00:16:56.000 --> 00:17:03.000
Con số này xuất hiện trên App Store như một cách để cho người dùng biết ứng dụng của bạn sẽ sử dụng bao nhiêu dung lượng lưu trữ sau khi các tài sản thiết yếu đã được cài đặt.

00:17:03.000 --> 00:17:07.000
Điều đó tóm tắt khá nhiều các API mới mà chúng tôi đã thêm vào cho các tài sản thiết yếu.

00:17:07.000 --> 00:17:12.000
Như bạn vừa thấy, việc thêm hỗ trợ tài sản thiết yếu vào ứng dụng hiện tại của bạn có thể được thực hiện với những thay đổi mã tối thiểu.

00:17:12.000 --> 00:17:13.000
Nó thực sự dễ dàng như vậy.

00:17:13.000 --> 00:17:15.000
Bây giờ cho phần thú vị.

00:17:15.000 --> 00:17:20.000
Hãy xem cách bạn có thể mở rộng một ứng dụng hiện có sử dụng URLSession để sử dụng Tài sản nền.

00:17:20.000 --> 00:17:28.000
Ứng dụng tôi sẽ giới thiệu cho bạn hôm nay tải xuống WWDC Sessions, giống như ứng dụng này và lưu trữ chúng trên thiết bị của bạn để xem ngoại tuyến.

00:17:28.000 --> 00:17:32.000
Hiện tại, ứng dụng phải được khởi chạy trước khi các video được tải xuống.

00:17:32.000 --> 00:17:39.000
Bằng cách áp dụng Tài sản nền, chúng tôi có thể loại bỏ thời gian chờ đợi này bằng cách tải xuống các video trước khi ứng dụng được khởi chạy.

00:17:39.000 --> 00:17:41.000
Hãy cùng xem nào.

00:17:41.000 --> 00:17:45.000
Đây là ứng dụng mà chúng tôi sẽ xây dựng ngày hôm nay.

00:17:45.000 --> 00:17:49.000
Bạn sẽ nhận thấy rằng thời điểm nó được khởi chạy, các phiên ngay lập tức bắt đầu tải xuống.

00:17:49.000 --> 00:17:56.000
Cách ứng dụng này hiện đang hoạt động là bản tải xuống bản kê khai từ máy chủ, chứa danh sách các phiên WWDC.

00:17:56.000 --> 00:18:02.000
Sau khi bản kê khai được tìm nạp, các phiên bắt đầu tải xuống và sau đó có thể xem được sau khi nhấn.

00:18:02.000 --> 00:18:07.000
Chúng ta hãy xem xét những gì cần thiết để áp dụng Tài sản nền vào dự án này.

00:18:07.000 --> 00:18:14.000
Trước khi bạn bắt đầu sử dụng API Tài sản Nền, điều đầu tiên cần thêm là các khóa Info.plist ban đầu mà tôi đã thảo luận trước đó.

00:18:14.000 --> 00:18:18.000
Những khóa này được yêu cầu phải có trong tệp Info.plist của gói ứng dụng của bạn.

00:18:18.000 --> 00:18:23.000
Điều tiếp theo bạn cần làm là thêm tiện ích mở rộng tải xuống nền và nhúng nó vào ứng dụng của bạn.

00:18:23.000 --> 00:18:28.000
Bạn sẽ muốn đảm bảo rằng mã định danh gói của tiện ích mở rộng của bạn có tiền tố là mã định danh gói của ứng dụng của bạn.

00:18:28.000 --> 00:18:38.000
Bạn cũng sẽ muốn đảm bảo rằng cả ứng dụng của bạn và tiện ích mở rộng của nó đều nằm trong một nhóm ứng dụng chung, vì nhóm ứng dụng là cách tiện ích mở rộng của bạn chia sẻ nội dung đã tải xuống với ứng dụng của bạn.

00:18:38.000 --> 00:18:43.000
Điều cuối cùng bạn muốn đảm bảo là cả ứng dụng của bạn và tiện ích mở rộng của nó đều được ký bằng mã định danh nhóm của bạn.

00:18:43.000 --> 00:18:48.000
Với những bước đó, bạn có thể bắt đầu áp dụng Tài sản nền.

00:18:48.000 --> 00:18:52.000
Trước mặt bạn là dự án Xcode cho ứng dụng bạn vừa thấy.

00:18:52.000 --> 00:18:57.000
Tôi đã đi và tạo tiện ích mở rộng tải xuống và nhúng nó vào ứng dụng.

00:18:57.000 --> 00:19:00.000
Tôi cũng đã thêm các khóa Info.plist bắt buộc.

00:19:00.000 --> 00:19:07.000
Với tất cả những điều đó, hãy bắt đầu bằng cách điều hướng đến SessionManager.

00:19:07.000 --> 00:19:12.000
SessionManager trong dự án này hiện đang sử dụng URLSession để tìm nạp các bản tải xuống mới nhất.

00:19:12.000 --> 00:19:15.000
URLSession là một API tuyệt vời.

00:19:15.000 --> 00:19:18.000
Chúng tôi sẽ tiếp tục sử dụng nó trong ứng dụng để tìm nạp bản kê khai.

00:19:18.000 --> 00:19:22.000
Tuy nhiên, chúng tôi sẽ chuyển sang sử dụng Tài sản nền để tìm nạp các phiên thực tế.

00:19:22.000 --> 00:19:31.000
Điều này là để ứng dụng có thể tận dụng lợi thế của việc quảng bá bất kỳ tài sản nào được lên lịch trong nền bằng tiện ích mở rộng mà chúng tôi sắp tạo ở phía trước khi ứng dụng được khởi chạy.

00:19:31.000 --> 00:19:38.000
Để bắt đầu, chúng ta sẽ bắt đầu bằng cách nhập mô-đun khung Tài sản Nền.

00:19:38.000 --> 00:19:44.000
Sau đó tôi sẽ cuộn xuống và xóa các biến được liên kết với URLSession vì chúng không còn cần thiết nữa.

00:19:44.000 --> 00:19:49.000
Bây giờ tôi sẽ điều hướng đến phương pháp "bắt đầu tải xuống".

00:19:49.000 --> 00:19:54.000
Như bạn có thể thấy, mã hiện có là các phiên theo dõi để tải xuống bằng tác vụ tải xuống URLSession.

00:19:54.000 --> 00:19:58.000
Điều này sẽ không cần thiết nữa, vì vậy hãy loại bỏ nó.

00:19:58.000 --> 00:20:01.000
Đây là nơi mọi thứ bắt đầu trở nên thú vị.

00:20:01.000 --> 00:20:06.000
Khi bạn làm việc với Background Assets, điều quan trọng là phải suy nghĩ về tiện ích mở rộng và ứng dụng của bạn có thể chạy cùng một lúc.

00:20:06.000 --> 00:20:16.000
Để phối hợp điều này một cách gần như dễ dàng, bạn sẽ cần sử dụng withExclusiveControl để đảm bảo rằng bất kỳ công việc nào cần loại trừ lẫn nhau với quy trình khác đều có thể làm như vậy.

00:20:16.000 --> 00:20:21.000
Hãy thêm điều đó vào ngay bây giờ.

00:20:21.000 --> 00:20:24.000
Như bạn có thể nói, API này không đồng bộ và thoát ra ngoài.

00:20:24.000 --> 00:20:32.000
Bất kỳ công việc nào được lên lịch bên trong việc đóng cửa đều được đảm bảo chạy độc lập với tiện ích mở rộng nếu tiện ích mở rộng cũng sử dụng API này.

00:20:32.000 --> 00:20:36.000
Chúng tôi sẽ triển khai tiện ích mở rộng trong giây lát, nhưng bây giờ, hãy tập trung vào ứng dụng.

00:20:36.000 --> 00:20:43.000
Vì chúng tôi biết rằng chúng tôi đang chạy trong một bối cảnh loại trừ lẫn nhau, hãy hỏi người quản lý tải xuống nếu hiện tại có bất kỳ bản tải xuống nào trên chuyến bay.

00:20:43.000 --> 00:20:47.000
Không có lý do gì để lên lịch lại tải xuống nếu tiện ích mở rộng đã lên lịch.

00:20:47.000 --> 00:20:55.000
Tuy nhiên, một điều chúng tôi có thể làm là, nếu chúng tôi tìm thấy một bản tải xuống hiện có, chúng tôi có thể quảng bá nó lên phía trước.

00:20:55.000 --> 00:21:01.000
Thúc đẩy quá trình tải xuống ở phía trước có thể làm giảm đáng kể thời gian cần thiết để quá trình tải xuống kết thúc.

00:21:01.000 --> 00:21:06.000
Vì người dùng hiện đang sử dụng ứng dụng, đây là một cơ hội tuyệt vời để tải xuống càng nhanh càng tốt.

00:21:06.000 --> 00:21:07.000
Người dùng có thể muốn xem nó.

00:21:07.000 --> 00:21:12.000
Nếu bản tải xuống chưa tồn tại, chúng tôi sẽ tạo nó.

00:21:12.000 --> 00:21:19.000
Sau đó, bất kể chúng tôi vừa tạo bản tải xuống hay tiện ích mở rộng đã làm, chúng tôi sẽ tiếp tục và bắt đầu nó ở phía trước.

00:21:19.000 --> 00:21:27.000
Thúc đẩy tải xuống từ nền trước không khiến quá trình tải xuống khởi động lại, nó chỉ đơn giản là được tiếp tục từ nơi nó đã dừng lại trong quá trình chuyển đổi đó.

00:21:27.000 --> 00:21:39.000
Điều tiếp theo trong danh sách là triển khai BADownloadManagerDelegate, nhưng trước khi tôi làm điều đó, tôi sẽ xóa URLSessionDelegate cũ.

00:21:39.000 --> 00:21:45.000
Bây giờ đại diện cũ đã biến mất, hãy tạo đại diện Tài sản Nền.

00:21:45.000 --> 00:21:51.000
Vì người quản lý phiên hiện đang tuân thủ đại biểu, điều quan trọng là nó phải được kết nối để thực sự nhận được những tin nhắn đó.

00:21:51.000 --> 00:21:57.000
Vì vậy, tôi sẽ đi đến trình khởi tạo và kết nối nó ngay bây giờ.

00:21:57.000 --> 00:22:02.000
Vì BADownloadManager kết nối trực tiếp với bộ lập lịch hệ thống, nó là một đối tượng đơn lẻ.

00:22:02.000 --> 00:22:09.000
Việc đính kèm đại diện này vào trình quản lý tải xuống sẽ khiến ứng dụng của bạn nhận tin nhắn qua tiện ích mở rộng nếu ứng dụng của bạn hiện đang chạy.

00:22:09.000 --> 00:22:15.000
Bây giờ chúng ta hãy quay trở lại các chức năng mà chúng ta cần thực hiện.

00:22:15.000 --> 00:22:20.000
Đối với ứng dụng này, có ba chức năng cụ thể trên giao thức đại diện mà chúng tôi sẽ triển khai.

00:22:20.000 --> 00:22:28.000
Đầu tiên là để xử lý tiến độ. Hãy thực hiện điều đó ngay bây giờ.

00:22:28.000 --> 00:22:36.000
Trước khi chúng tôi bắt đầu cập nhật tiến trình một cách mù quáng trong giao diện người dùng, chúng tôi sẽ đảm bảo rằng bản tải xuống mà chúng tôi đang nhận được thông báo tiến trình là thứ mà bản kê khai hiện đang theo dõi.

00:22:36.000 --> 00:22:44.000
Nếu quá trình tải xuống đang được theo dõi, chúng tôi sẽ gọi updateDownloadProgress, đây là chức năng trợ giúp trong ứng dụng gửi tiến trình trực tiếp đến SwiftUI.

00:22:44.000 --> 00:22:50.000
Tiếp theo, tôi sẽ thực hiện những gì xảy ra khi quá trình tải xuống kết thúc.

00:22:50.000 --> 00:22:55.000
Nó bắt đầu khá giống nhau, đó là để đảm bảo rằng nó chỉ xử lý các bản tải xuống được mong đợi.

00:22:55.000 --> 00:23:04.000
Sau đó replaceItemAt được sử dụng để di chuyển đối tượng từ vị trí tạm thời mà Background Assets đã cung cấp cho chúng ta đến vị trí cuối cùng của nó.

00:23:04.000 --> 00:23:10.000
Điều quan trọng là sử dụng các thao tác di chuyển ở đây, vì hệ thống sẽ theo dõi và xóa tệp nếu thiết bị trở nên thiếu dung lượng.

00:23:10.000 --> 00:23:17.000
Vì vậy, bạn nên đảm bảo rằng ứng dụng của bạn luôn kiểm tra xem có bất kỳ tệp nào bị thiếu hay không và tải lại nếu cần.

00:23:17.000 --> 00:23:25.000
Điều cuối cùng xảy ra ở đây là, một Nhiệm vụ được sinh ra đối với MainActor, trạng thái được đánh dấu là đã tải xuống và ứng dụng bắt đầu tìm nạp hình thu nhỏ của phiên.

00:23:25.000 --> 00:23:28.000
Bây giờ, tôi muốn nói rằng tất cả các bản tải xuống sẽ thành công.

00:23:28.000 --> 00:23:36.000
Tuy nhiên, sự thật đáng tiếc là họ có thể thất bại, cho dù đó là do máy chủ không còn tài nguyên đó nữa hay có vấn đề về mạng.

00:23:36.000 --> 00:23:44.000
Background Assets thử lại và chờ đợi các sự cố kết nối mạng, nhưng sau một thời điểm nhất định, bạn phải biết rằng tệp không đang trên đường đến.

00:23:44.000 --> 00:23:50.000
Một điều khác cần lưu ý là các bản tải xuống được quảng bá lên phía trước sẽ thất bại gần như ngay lập tức nếu có sự cố kết nối mạng.

00:23:50.000 --> 00:23:52.000
Ứng dụng của chúng tôi không cần phải làm gì nhiều khi tải xuống không thành công.

00:23:52.000 --> 00:24:05.000
Nó có thể trình bày giao diện người dùng hoặc lên lịch lại, nhưng đối với ví dụ này, hãy ghi lại rằng đã xảy ra sự cố.

00:24:05.000 --> 00:24:14.000
Vì đại diện hiện đã được triển khai đầy đủ, hãy khởi chạy lại ứng dụng và xem nó trông như thế nào.

00:24:14.000 --> 00:24:19.000
Chà, không có gì ngạc nhiên, nó trông giống hệt nhau, và đó là những gì chúng tôi thực sự muốn thấy ở đây.

00:24:19.000 --> 00:24:23.000
Thêm Tài sản Nền thay cho URLSession khá dễ dàng.

00:24:23.000 --> 00:24:28.000
Điều tiếp theo tôi sẽ chỉ cho bạn là cách triển khai tiện ích mở rộng ứng dụng để xử lý tải xuống nền.

00:24:28.000 --> 00:24:38.000
Thêm tiện ích mở rộng ứng dụng này là cách bạn có thể tận dụng Tài sản nền để tìm nạp nội dung của mình trước khi ứng dụng của bạn được cài đặt hoặc cập nhật và là thứ cung cấp hỗ trợ xếp hàng các tài sản thiết yếu.

00:24:38.000 --> 00:24:43.000
Về bản chất, tiện ích mở rộng là thứ chịu trách nhiệm lên lịch tải xuống trong khi ứng dụng của bạn không chạy.

00:24:43.000 --> 00:24:46.000
Hãy cùng xem nào.

00:24:46.000 --> 00:24:52.000
Ở đây chúng tôi đang ở trình xử lý tải xuống nền, nhận tin nhắn trong tiện ích mở rộng của bạn liên quan đến Tài sản nền.

00:24:52.000 --> 00:25:00.000
Từ tiện ích mở rộng, điều đầu tiên tôi sẽ làm là tạo một trình ghi để chúng ta có thể thấy từ Console.app khi tiện ích mở rộng của chúng ta đang chạy.

00:25:00.000 --> 00:25:07.000
Tiếp theo, tôi sẽ triển khai hàm contentForRequest là một phần của giao thức BADownloaderExtension.

00:25:07.000 --> 00:25:13.000
Điều đầu tiên tiện ích mở rộng này sẽ làm là phân tích bản kê khai đã được tải xuống trước khi tiện ích mở rộng được khởi chạy.

00:25:13.000 --> 00:25:20.000
Nếu bản kê khai đã được tải xuống bằng cách nào đó không hợp lệ, tiện ích mở rộng sẽ được định cấu hình để xếp hàng không tải xuống.

00:25:20.000 --> 00:25:25.000
Khi tiện ích mở rộng biết rằng bản kê khai là hợp lệ, nó sẽ được lưu nguyên tử vào nhóm ứng dụng.

00:25:25.000 --> 00:25:32.000
Điều này là để ứng dụng và tiện ích mở rộng có phiên bản mới nhất của bản kê khai cục bộ mà họ có thể tham khảo sau.

00:25:32.000 --> 00:25:37.000
Vì việc lưu này được thực hiện bằng nguyên tử, nên việc sử dụng withExclusiveControl là không cần thiết.

00:25:37.000 --> 00:25:43.000
Tiện ích mở rộng sau đó sẽ tạo ra một tập hợp các đối tượng tải xuống có thể thay đổi mà tiện ích mở rộng sẽ quay trở lại hệ thống để được lên lịch.

00:25:43.000 --> 00:25:49.000
Như đã thảo luận trước đó, các bản tải xuống cần thiết chỉ được hỗ trợ trong quá trình cài đặt ứng dụng hoặc cập nhật ứng dụng.

00:25:49.000 --> 00:25:56.000
Sau đó, tôi sẽ lặp lại bản kê khai cho tất cả các phiên từ xa, điều này có nghĩa là chúng không được tải xuống.

00:25:56.000 --> 00:26:01.000
Một đối tượng BAURLDownload sau đó được tạo cho mọi lần tải xuống cần được lên lịch.

00:26:01.000 --> 00:26:17.000
Việc tải xuống được cung cấp một mã định danh duy nhất, một URLRequest, một chú thích nếu tải xuống nên được tìm nạp là thiết yếu, kích thước tệp của nó, nhóm ứng dụng mà tài sản sẽ được tải xuống và ưu tiên tương đối để kiểm soát việc tải xuống nào mà bộ lập lịch sẽ bắt đầu trước.

00:26:17.000 --> 00:26:25.000
Một điều quan trọng cần lưu ý là bất kỳ bản tải xuống nào được đánh dấu là cần thiết phải có kích thước tệp chính xác nếu không bản tải xuống sẽ được đánh dấu là không thành công.

00:26:25.000 --> 00:26:31.000
Điều này nhằm hỗ trợ tiến trình suôn sẻ trên Màn hình chính iOS, macOS Launchpad và App Store.

00:26:31.000 --> 00:26:37.000
Bây giờ chúng tôi đã hỗ trợ xếp hàng tải xuống, chúng ta hãy xem xét xử lý tải xuống thành công.

00:26:37.000 --> 00:26:43.000
Tiện ích mở rộng xử lý tải xuống nếu ứng dụng không chạy hoặc nếu ứng dụng không có đại diện được chỉ định cho BADownloadManager.

00:26:43.000 --> 00:26:50.000
Điều đầu tiên tôi sẽ thực hiện trong trình xử lý hoàn tất tải xuống sẽ là có được quyền kiểm soát độc quyền một cách không đồng bộ.

00:26:50.000 --> 00:26:56.000
Vì việc có được quyền kiểm soát độc quyền là không đồng bộ, chúng tôi cần bám vào tệp tạm thời mà phần mở rộng vừa bán cho chúng tôi.

00:26:56.000 --> 00:27:03.000
Như bạn có thể thấy, tôi đang thực hiện điều này bằng cách di chuyển tệp vào một vị trí tạm thời sẽ tồn tại lâu hơn phạm vi của chức năng này.

00:27:03.000 --> 00:27:09.000
Tôi cũng sẽ thêm một sự trì hoãn Swift để đảm bảo rằng tệp tạm thời mà các bản tải xuống tiện ích mở rộng luôn được dọn dẹp.

00:27:09.000 --> 00:27:15.000
Mặc dù hệ thống sẽ xóa tệp cho bạn, nhưng cách tốt nhất là bạn nên tự quản lý nó.

00:27:15.000 --> 00:27:19.000
Sau đó tôi sẽ tải bản kê khai từ nhóm ứng dụng và xác minh tính hợp lệ của nó.

00:27:19.000 --> 00:27:27.000
Tiện ích mở rộng sau đó sẽ kiểm tra để đảm bảo số nhận dạng đã tải xuống đang được xử lý khớp với phiên được mong đợi trong bản kê khai.

00:27:27.000 --> 00:27:34.000
Sau đó, tiện ích mở rộng sẽ di chuyển tệp đó từ vị trí tạm thời của nó đến đích cuối cùng bên trong nhóm ứng dụng.

00:27:34.000 --> 00:27:41.000
Một LocalSession sau đó được xây dựng để nhanh chóng xác nhận rằng phiên được tải xuống vị trí thích hợp của nó.

00:27:41.000 --> 00:27:46.000
Điều cuối cùng cần xử lý là tải xuống không thành công.

00:27:46.000 --> 00:27:53.000
Một điều quan trọng thường bị lãng quên là nếu BAManifestURL không tải xuống được, tiện ích mở rộng sẽ thực sự được thông báo về nó.

00:27:53.000 --> 00:27:55.000
Loại của nó kế thừa từ BAURLDownload.

00:27:55.000 --> 00:27:58.000
Tuy nhiên, đó không phải là loại nội bộ chính xác của nó.

00:27:58.000 --> 00:28:04.000
Do đó, tiện ích mở rộng lọc để đảm bảo nó chỉ xử lý các đối tượng BAURLDownload.

00:28:04.000 --> 00:28:12.000
Vì các tài sản thiết yếu tải xuống ở phía trước, chúng chỉ đợi vài giây để kết nối mạng vì những bản tải xuống đó ảnh hưởng đến tiến trình cài đặt ứng dụng.

00:28:12.000 --> 00:28:19.000
Do đó, có thể là một ý tưởng tốt để xếp hàng lại các bản tải xuống cần thiết là không cần thiết nếu chúng xảy ra thất bại.

00:28:19.000 --> 00:28:25.000
Một cách bạn có thể dễ dàng chuyển đổi một bản tải xuống thiết yếu thành không cần thiết là sử dụng hàm removingEssential() mới.

00:28:25.000 --> 00:28:28.000
Hàm đó trả về một bản sao không cần thiết.

00:28:28.000 --> 00:28:32.000
Sau đó, bạn chuyển bản sao đó sang chức năng Tải xuống lịch trình của BADownloadManager.

00:28:32.000 --> 00:28:35.000
Hệ thống sau đó sẽ tải xuống vào thời điểm thích hợp.

00:28:35.000 --> 00:28:45.000
Bây giờ ứng dụng của chúng tôi và tiện ích mở rộng của nó đã áp dụng đầy đủ Tài sản nền, hãy thêm một số giao diện người dùng chỉ ra rằng một phiên cụ thể đã được tải xuống là cần thiết.

00:28:45.000 --> 00:28:52.000
Hãy nhớ rằng, điều cần thiết có nghĩa là cài đặt ứng dụng và cập nhật ứng dụng cấm khởi chạy ứng dụng cho đến khi tài sản được tải xuống đầy đủ.

00:28:52.000 --> 00:29:02.000
Tuy nhiên, vì ứng dụng bị chặn khởi chạy chỉ xảy ra trong quá trình cài đặt từ App Store hoặc TestFlight, nên có một chỉ báo hiện diện là một cách tốt để nhận ra điều này một cách rõ ràng.

00:29:02.000 --> 00:29:08.000
Chỉ báo này sẽ được triển khai trong SwiftUI trong chế độ xem VideoSelector.

00:29:08.000 --> 00:29:13.000
Nếu phiên được đánh dấu là cần thiết trong bản kê khai, một vòng tròn màu xanh lá cây sẽ được vẽ trong chế độ xem điều hướng.

00:29:13.000 --> 00:29:16.000
Và đó là tất cả những gì cần làm.

00:29:16.000 --> 00:29:23.000
Bây giờ bạn đã thấy việc triển khai Tài sản nền dễ dàng như thế nào, chúng ta hãy xem gỡ lỗi tiện ích mở rộng và mô phỏng các điểm vào của nó.

00:29:23.000 --> 00:29:29.000
Như tôi đã thảo luận trước đó, tiện ích mở rộng khởi chạy trong quá trình cài đặt ứng dụng, cập nhật ứng dụng hoặc định kỳ trong nền.

00:29:29.000 --> 00:29:38.000
Vì cài đặt ứng dụng được kiểm soát bởi App Store và các sự kiện định kỳ được kiểm soát bởi thiết bị, bạn sẽ cần một cách để buộc tiện ích mở rộng của mình khởi chạy để gỡ lỗi nó.

00:29:38.000 --> 00:29:46.000
May mắn thay, nhóm của chúng tôi đã tạo ra một công cụ đi kèm với Xcode, có thể được sử dụng để khởi chạy tiện ích mở rộng và mô phỏng các điểm vào của nó.

00:29:46.000 --> 00:29:52.000
Công cụ có thể truy cập từ Terminal và có thể được khởi chạy bằng cách nhập xcrun backgroundassets-debug.

00:29:52.000 --> 00:29:56.000
Ngoài ra còn có thông tin trợ giúp và một trang hướng đi kèm với nó.

00:29:56.000 --> 00:30:03.000
Khi sử dụng backgroundassets-debug, bạn vượt qua một đối số mô phỏng cung cấp khả năng kích hoạt các loại BAContentRequests khác nhau.

00:30:03.000 --> 00:30:11.000
Khi bất kỳ tin nhắn mô phỏng nào trong số này được gửi đến thiết bị, thời gian chạy tiện ích mở rộng của bạn sẽ được đặt lại để giúp bạn dễ dàng gỡ lỗi.

00:30:11.000 --> 00:30:16.000
Backgroundassets-debug cung cấp nhiều tính năng, bao gồm hỗ trợ cho nhiều thiết bị.

00:30:16.000 --> 00:30:21.000
Miễn là thiết bị được ghép nối với máy Mac của bạn, nó có thể được sử dụng để mô phỏng tiện ích mở rộng của bạn.

00:30:21.000 --> 00:30:28.000
Các lệnh này có thể được gửi qua Bluetooth hoặc Wi-Fi để thiết bị của bạn không phải kết nối với máy Mac của bạn qua USB.

00:30:28.000 --> 00:30:35.000
Cuối cùng, Chế độ Nhà phát triển phải được bật để thiết bị tôn trọng các sự kiện mô phỏng được kích hoạt bởi backgroundassets-debug.

00:30:35.000 --> 00:30:41.000
Điều này có thể dễ dàng được kích hoạt từ phần Quyền riêng tư &amp; Bảo mật trong ứng dụng Cài đặt trên thiết bị của bạn.

00:30:41.000 --> 00:30:47.000
Bây giờ chúng ta hãy xem xét việc sử dụng công cụ gỡ lỗi tài sản nền với ứng dụng demo mà chúng tôi vừa xây dựng.

00:30:47.000 --> 00:30:49.000
Chúng tôi đang ở đây tại Terminal.

00:30:49.000 --> 00:30:53.000
Vì Xcode được cài đặt trên máy Mac này, tôi sẽ tiếp tục và liệt kê các thiết bị được kết nối.

00:30:53.000 --> 00:30:58.000
Bạn sẽ thấy rằng hiện tại chỉ có một thiết bị được kết nối và đó là iPhone của tôi.

00:30:58.000 --> 00:31:03.000
Bạn sẽ muốn sao chép UUID của thiết bị mà bạn đang chọn để mô phỏng.

00:31:03.000 --> 00:31:09.000
Trong các đối số được cung cấp, bạn thấy rằng UUID của thiết bị có mặt cùng với mã định danh gói của ứng dụng.

00:31:09.000 --> 00:31:13.000
Tôi sẽ gọi công cụ bằng cách sử dụng đối số mô phỏng trộn lẫn với đối số cài đặt ứng dụng.

00:31:13.000 --> 00:31:19.000
Điều này sẽ khiến tiện ích mở rộng ứng dụng đánh thức như thể nó đang bị đánh thức trong một sự kiện cài đặt ứng dụng ban đầu.

00:31:19.000 --> 00:31:24.000
Bây giờ tôi đã nhấn enter, công cụ cho bạn biết rằng sự kiện cài đặt ứng dụng đã được gửi đến thiết bị.

00:31:24.000 --> 00:31:30.000
Hãy khởi chạy ứng dụng và xem nó trông như thế nào.

00:31:30.000 --> 00:31:33.000
Như bạn có thể thấy, tất cả các video phiên đã được xếp hàng để tải xuống.

00:31:33.000 --> 00:31:36.000
Một số người trong số họ, như tôi đang nói, đã tải xuống xong.

00:31:36.000 --> 00:31:39.000
Và đó là Tài sản Nền đang hoạt động.

00:31:39.000 --> 00:31:45.000
Nếu bạn giống tôi, có lẽ bạn đã bắt đầu suy nghĩ về nhiều cách tiềm năng để giảm sự chờ đợi trong các ứng dụng của mình.

00:31:45.000 --> 00:31:51.000
Bây giờ tôi đã chỉ cho bạn cách gỡ lỗi tiện ích mở rộng ứng dụng của bạn, chúng ta hãy xem xét một số điều quan trọng cần nhớ.

00:31:51.000 --> 00:31:56.000
Tải xuống các tài sản thiết yếu với ứng dụng và đóng góp vào tiến trình cài đặt ứng dụng.

00:31:56.000 --> 00:32:04.000
Do đó, các loại tài sản này chỉ có thể được lên lịch trong sự kiện cài đặt hoặc cập nhật BAContentRequest trong tiện ích mở rộng.

00:32:04.000 --> 00:32:10.000
Nếu bất kỳ bản tải xuống thiết yếu nào được xếp hàng bởi tiện ích mở rộng không thành công, ứng dụng cuối cùng vẫn có thể khởi chạy được.

00:32:10.000 --> 00:32:18.000
Bạn phải đảm bảo rằng bạn xếp hàng lại các bản tải xuống cần thiết của mình là không cần thiết trong tiện ích mở rộng hoặc khi khởi chạy ứng dụng đầu tiên nếu bạn yêu cầu những nội dung đó.

00:32:18.000 --> 00:32:26.000
Bất kỳ bản tải xuống nào không được đánh dấu là cần thiết đều được tải xuống sau khi ứng dụng được cài đặt hoặc cập nhật và nhận được ưu tiên tải xuống nền.

00:32:26.000 --> 00:32:30.000
Điều quan trọng cần nhớ là tiện ích mở rộng bị giới hạn bởi việc sử dụng bộ nhớ của nó.

00:32:30.000 --> 00:32:35.000
Vì vậy, hãy đảm bảo gỡ lỗi tiện ích mở rộng của bạn để đảm bảo rằng mã bạn viết thấp hơn ngưỡng bộ nhớ.

00:32:35.000 --> 00:32:41.000
Nếu tiện ích mở rộng của bạn sử dụng quá nhiều bộ nhớ, bạn sẽ nhận thấy rằng nó sẽ gặp sự cố với ngoại lệ bộ nhớ trong khi gỡ lỗi.

00:32:41.000 --> 00:32:49.000
Nếu tiện ích mở rộng gặp sự cố trong quá trình cài đặt ứng dụng hoặc yêu cầu cập nhật nội dung ứng dụng, thì ứng dụng sẽ có thể khởi chạy ngay lập tức.

00:32:49.000 --> 00:32:54.000
Và cuối cùng, hãy nhớ làm cho ứng dụng của bạn trở thành một công dân tốt bằng cách quản lý các tài sản mà nó tải xuống một cách thích hợp.

00:32:54.000 --> 00:32:59.000
Một cách để quản lý những tài sản đó là đặt chúng vào thư mục bộ nhớ cache của ứng dụng của bạn.

00:32:59.000 --> 00:33:01.000
Vì vậy, đó là những gì chúng tôi có trong năm nay cho Tài sản Nền.

00:33:01.000 --> 00:33:06.000
Nếu có bất cứ điều gì bạn nên lấy đi từ phiên này, đó là để loại bỏ sự chờ đợi trong ứng dụng của bạn.

00:33:06.000 --> 00:33:12.000
Một cách bạn có thể loại bỏ sự chờ đợi là áp dụng Tài sản nền và sử dụng tính năng tài sản thiết yếu mới.

00:33:12.000 --> 00:33:16.000
Đảm bảo sử dụng TestFlight trước khi gửi ứng dụng đến App Store.

00:33:16.000 --> 00:33:22.000
Bằng cách sử dụng TestFlight, bạn sẽ có thể thấy nó trông như thế nào khi các tài sản thiết yếu của bạn tải xuống bằng ứng dụng của bạn.

00:33:22.000 --> 00:33:29.000
Nếu tại bất kỳ thời điểm nào bạn thấy mình có câu hỏi, vui lòng xem tài liệu dành cho nhà phát triển và vui lòng liên hệ với Diễn đàn Nhà phát triển Apple.

00:33:29.000 --> 00:33:32.000
Tôi cũng muốn khuyến khích bạn sử dụng Trợ lý Phản hồi.

00:33:32.000 --> 00:33:38.000
Nhóm của chúng tôi không ngừng cải thiện Tài sản nền và chúng tôi mong muốn bạn áp dụng nó vào ứng dụng của mình.

00:33:38.000 --> 00:33:44.000
Ồ, và nếu bạn chưa có, tôi khuyên bạn nên kiểm tra phiên trước của tôi nơi Tài sản nền được giới thiệu.

00:33:44.000 --> 00:33:47.000
Có rất nhiều thông tin bổ sung trong đó.

00:33:47.000 --> 00:33:49.000
Và với điều đó, cảm ơn vì đã tham gia cùng tôi hôm nay.

00:33:49.000 --> 23:59:59.000
Thay mặt cho tất cả mọi người ở Apple, cảm ơn vì đã xem.

