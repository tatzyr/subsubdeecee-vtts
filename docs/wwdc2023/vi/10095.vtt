WEBVTT

00:00:00.000 --> 00:00:04.000
♪ Hip-hop nhạc cụ êm dịu ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
Xin chào! Tôi là Ivan, và tôi là một kỹ sư trong nhóm RealityKit.

00:00:14.000 --> 00:00:19.000
Chào mừng đến với phiên của tôi, "Khám phá kết xuất cho điện toán không gian."

00:00:19.000 --> 00:00:24.000
RealityKit là một khuôn khổ để kết xuất, tạo hoạt ảnh và mô phỏng các mô hình 3D.

00:00:24.000 --> 00:00:31.000
Một trong những bộ đồ mạnh nhất của RealityKit là áp dụng kết xuất thực tế cho nội dung của bạn.

00:00:31.000 --> 00:00:45.000
Để giúp bạn tận dụng tối đa khả năng kết xuất của RealityKit và nâng cao giao diện nội dung của bạn, tôi muốn chia sẻ một số cân nhắc kết xuất cần ghi nhớ trong khi phát triển ứng dụng của bạn cho điện toán không gian.

00:00:45.000 --> 00:00:49.000
Chúng tôi sẽ bắt đầu với ánh sáng và bóng tối cho nội dung 3D của bạn.

00:00:49.000 --> 00:00:53.000
Sau đó, chúng ta sẽ tìm hiểu những gì mới với các tài liệu RealityKit.

00:00:53.000 --> 00:00:59.000
Tiếp theo, tôi sẽ giới thiệu bản đồ tỷ lệ rasterization giúp cải thiện đáng kể hiệu suất hệ thống.

00:00:59.000 --> 00:01:06.000
Tôi sẽ chia sẻ các đề xuất về cách điều chỉnh nội dung của bạn để làm cho nó hoạt động tốt với tối ưu hóa này.

00:01:06.000 --> 00:01:14.000
Cuối cùng, tôi sẽ giới thiệu một kỹ thuật gọi là mở rộng nội dung động, đảm bảo rằng giao diện người dùng luôn sắc nét.

00:01:14.000 --> 00:01:17.000
Hãy bắt đầu với ánh sáng và bóng tối.

00:01:17.000 --> 00:01:26.000
Nếu bạn đã quen thuộc với RealityKit trên iOS và macOS, bạn sẽ thấy rằng hầu hết kiến thức đó cũng áp dụng cho việc xây dựng trải nghiệm không gian.

00:01:26.000 --> 00:01:32.000
Chúng tôi đã giới thiệu ánh sáng dựa trên hình ảnh trong RealityKit để làm cho nội dung của bạn trông chân thực.

00:01:32.000 --> 00:01:41.000
Ánh sáng dựa trên hình ảnh, hoặc IBL, sử dụng kết cấu, giống như kết cấu bên phải để tạo ra phản xạ thực tế.

00:01:41.000 --> 00:01:47.000
Bóng tối giúp chúng ta hiểu cách các vật thể được định vị đối với nhau.

00:01:47.000 --> 00:01:54.000
Trước khi chúng ta xem xét các tính năng mới, hãy nhanh chóng xem xét các thành phần của ánh sáng dựa trên hình ảnh.

00:01:54.000 --> 00:02:10.000
Có hai thành phần chính cho IBL: kết cấu đầu dò Môi trường do ARKit cung cấp và dành riêng cho không gian vật lý trong phòng và kết cấu IBL của hệ thống được đóng gói cùng với hệ điều hành.

00:02:10.000 --> 00:02:17.000
Kết cấu IBL của hệ thống bổ sung thêm các điểm nổi bật để đảm bảo rằng nội dung của bạn trông tuyệt vời trong mọi môi trường.

00:02:17.000 --> 00:02:23.000
Hai thành phần được thêm vào với nhau để tạo ra kết cấu IBL kết hợp.

00:02:23.000 --> 00:02:29.000
Nếu bạn có một môi trường hoạt động, nó cũng sẽ có ảnh hưởng đến kết cấu IBL kết hợp.

00:02:29.000 --> 00:02:36.000
Năm nay RealityKit bổ sung khả năng ghi đè kết cấu IBL của hệ thống để tùy chỉnh ánh sáng.

00:02:36.000 --> 00:02:40.000
Hãy xem xét một ví dụ.

00:02:40.000 --> 00:02:45.000
Đây là trải nghiệm "Hello World" cung cấp một cái nhìn về hệ mặt trời.

00:02:45.000 --> 00:02:50.000
Theo mặc định RealityKit sẽ thắp sáng nó bằng hệ thống IBL.

00:02:50.000 --> 00:03:02.000
Tuy nhiên, nếu bạn chỉ định một IBL mới cho thành phần ánh sáng dựa trên hình ảnh mới, nó sẽ thay thế hệ thống IBL và chiếu sáng các vật thể đó bằng cách sử dụng môi trường nhập vai xung quanh.

00:03:02.000 --> 00:03:05.000
Hãy để tôi chỉ cho bạn cách nó được thực hiện.

00:03:05.000 --> 00:03:08.000
Ở đây đầu tiên chúng tôi tải nội dung 3D của mình.

00:03:08.000 --> 00:03:11.000
Trong trường hợp này, đó là mô hình vệ tinh.

00:03:11.000 --> 00:03:15.000
Sau đó, chúng tôi tải một tài nguyên môi trường được gọi là Sunlight.

00:03:15.000 --> 00:03:21.000
Nó chứa một hình ảnh của Mặt trời và các ngôi sao bao quanh Trái Đất.

00:03:21.000 --> 00:03:30.000
Chúng tôi cần cả mô hình và tài nguyên môi trường để thiết lập IBL, vì vậy hãy đảm bảo rằng cả hai hoạt động tải đã hoàn tất.

00:03:30.000 --> 00:03:33.000
Tiếp theo, chúng tôi thêm ImageBasedLightComponent.

00:03:33.000 --> 00:03:38.000
Nó tham chiếu đến tài nguyên Môi trường mà chúng tôi vừa tải.

00:03:38.000 --> 00:03:44.000
Cuối cùng chúng tôi thêm ImageBasedLightReceiverComponent vào thực thể vệ tinh.

00:03:44.000 --> 00:03:51.000
Bạn có thể thêm các thành phần máy thu này ngay cả với các thực thể khác để chiếu sáng chúng bằng cách sử dụng cùng một IBL.

00:03:51.000 --> 00:03:56.000
Và đó là cách dễ dàng để tùy chỉnh ánh sáng trong RealityKit.

00:03:56.000 --> 00:04:01.000
Tiếp theo, hãy xem cách thêm bóng vào ứng dụng của bạn.

00:04:01.000 --> 00:04:09.000
Hãy xem xét một ví dụ đơn giản khi bạn đặt một vật thể 3D như chiếc bình này lên trên một mặt phẳng nổi.

00:04:09.000 --> 00:04:16.000
Nếu không bật bất kỳ bóng đổ nào, có thể khó hiểu vị trí tương đối của chiếc bình và mặt phẳng.

00:04:16.000 --> 00:04:25.000
Nhưng chỉ cần thêm bóng nối đất của RealityKit, nó trở nên rõ ràng hơn rất nhiều rằng chiếc bình nằm phía trên trung tâm của mặt phẳng.

00:04:25.000 --> 00:04:28.000
Hãy xem cách làm điều này trong mã.

00:04:28.000 --> 00:04:31.000
Chúng tôi bắt đầu bằng cách tải mô hình bình hoa.

00:04:31.000 --> 00:04:36.000
Ở đây, flower_tulip là tên của mô hình 3D trong dự án của chúng tôi.

00:04:36.000 --> 00:04:40.000
Tiếp theo, chúng tôi thêm thành phần bóng nối đất.

00:04:40.000 --> 00:04:43.000
Đảm bảo đặt cờ castsShadow được đặt thành true.

00:04:43.000 --> 00:04:45.000
Và thế là xong!

00:04:45.000 --> 00:04:48.000
Thực thể bình bây giờ sẽ đổ bóng nền.

00:04:48.000 --> 00:04:49.000
Đơn giản, phải không?

00:04:49.000 --> 00:04:56.000
Bóng nền xuất hiện trên các mô hình 3D cũng như các vật thể trong môi trường vật lý.

00:04:56.000 --> 00:05:10.000
Sử dụng IBL tùy chỉnh để chiếu sáng cảnh của bạn và bao gồm cả bóng nối đất có thể làm cho nội dung của bạn trông đẹp hơn rất nhiều, nhưng bạn cũng có thể trực tiếp làm việc trên giao diện của các đối tượng của mình bằng cách tinh chỉnh tài liệu.

00:05:10.000 --> 00:05:17.000
Hầu hết các tài liệu RealityKit có sẵn trên macOS và iOS cũng có thể được sử dụng trên xrOS.

00:05:17.000 --> 00:05:20.000
Hãy nhanh chóng xem lại chúng.

00:05:20.000 --> 00:05:24.000
Vật liệu được sử dụng phổ biến nhất là Vật liệu dựa trên vật lý.

00:05:24.000 --> 00:05:35.000
Vật liệu dựa trên vật lý trong RealityKit phản ứng với ánh sáng và có thể được sử dụng để đại diện cho nhiều loại vật liệu trong thế giới thực, chẳng hạn như nhựa hoặc kim loại.

00:05:35.000 --> 00:05:41.000
SimpleMaterial cũng phản ứng với ánh sáng, nhưng sử dụng một tập hợp con các thông số nhỏ hơn.

00:05:41.000 --> 00:05:45.000
Nó đặc biệt tốt cho các thí nghiệm nhanh chóng.

00:05:45.000 --> 00:05:48.000
UnlitMaterial không phản ứng với ánh sáng.

00:05:48.000 --> 00:05:54.000
Nói cách khác, nó duy trì một cái nhìn liên tục trong điều kiện ánh sáng thay đổi.

00:05:54.000 --> 00:06:03.000
VideoMaterial là một biến thể của vật liệu không được chiếu sáng có thể ánh xạ tệp phim lên bề mặt của một thực thể.

00:06:03.000 --> 00:06:10.000
Ngoài những vật liệu này, RealityKit còn giới thiệu một loại vật liệu mới gọi là ShaderGraphMaterial.

00:06:10.000 --> 00:06:19.000
Bạn có thể tạo ra ShaderGraphMaterial mới trong Reality Composer Pro hoặc tải nó từ tệp MaterialX.

00:06:19.000 --> 00:06:27.000
Bạn có thể tìm hiểu thêm về ShaderGraphMaterial trong phiên "Khám phá Vật liệu trong Reality Composer Pro."

00:06:27.000 --> 00:06:34.000
Đầu ra màu của tất cả các vật liệu này trải qua một bước đặc biệt được gọi là ánh xạ tông màu.

00:06:34.000 --> 00:06:42.000
Ánh xạ tông màu là một sự biến đổi mà RealityKit áp dụng theo mặc định cho đầu ra màu của vật liệu.

00:06:42.000 --> 00:06:47.000
Nó cho phép màu sắc cảm nhận tự nhiên hơn bằng cách sử dụng nhiều kỹ thuật khác nhau.

00:06:47.000 --> 00:06:52.000
Một kỹ thuật như vậy là ánh xạ lại các giá trị trên một vào phạm vi hiển thị.

00:06:52.000 --> 00:06:57.000
Hãy để tôi chứng minh điều này bằng một ví dụ.

00:06:57.000 --> 00:07:01.000
Đây là kết xuất 3D của TV bị vô hiệu hóa ánh xạ âm thanh.

00:07:01.000 --> 00:07:06.000
Tôi đã chỉ định một kết cấu với các giá trị rất sáng cho màn hình.

00:07:06.000 --> 00:07:14.000
Bây giờ, nếu tôi bật ánh xạ tông màu, bạn có thể thấy nhiều chi tiết hơn ở các vùng sáng, như những cánh hoa này.

00:07:14.000 --> 00:07:27.000
Ánh xạ tông màu nói chung hoạt động tốt và hiển thị hình ảnh đẹp; nhưng đối với một số trường hợp sử dụng, bạn có thể muốn hiển thị màu sắc chính xác của đối tượng, mà bạn sẽ phải chọn không tham gia ánh xạ tông màu.

00:07:27.000 --> 00:07:30.000
Hãy xem xét một ví dụ.

00:07:30.000 --> 00:07:37.000
Đây là một ứng dụng đơn giản hiển thị đèn giao thông và ba nút có nhãn "Dừng lại", "Chờ" và "Đi".

00:07:37.000 --> 00:07:44.000
Bản thân đèn giao thông là một mô hình 3D và ba nút đã được thêm vào bằng SwiftUI.

00:07:44.000 --> 00:07:59.000
Để phù hợp chính xác màu sắc của đèn với màu của nút, chúng ta có thể sử dụng vật liệu không sáng cho đèn, vì vật liệu không sáng duy trì cùng một cái nhìn liên tục của vật thể, không phụ thuộc vào điều kiện ánh sáng.

00:07:59.000 --> 00:08:07.000
Tuy nhiên, đầu ra của vật liệu không sáng vẫn bị ảnh hưởng bởi ánh xạ âm thanh được bật theo mặc định cho tất cả các tài liệu RealityKit.

00:08:07.000 --> 00:08:16.000
Vì vậy, ngay cả khi cùng một màu được gán cho nút SwiftUI và chất liệu của đèn, chúng có thể xuất hiện hơi khác nhau.

00:08:16.000 --> 00:08:26.000
Ảnh chụp màn hình bạn thấy được chụp khi bật ánh xạ âm thanh; hãy để tôi cho bạn thấy nó trông như thế nào khi ánh xạ tông màu bị vô hiệu hóa đối với vật liệu đèn.

00:08:26.000 --> 00:08:31.000
Bạn sẽ nhận thấy rằng màu sắc của đèn và nút phù hợp chính xác.

00:08:31.000 --> 00:08:35.000
Hãy chuyển đổi ánh xạ tông màu cho vật liệu đèn một lần nữa.

00:08:35.000 --> 00:08:42.000
Đây là với ánh xạ giai điệu được bật và đây là với ánh xạ giai điệu bị vô hiệu hóa.

00:08:42.000 --> 00:08:48.000
Chúng ta hãy xem mẫu mã cho thấy cách ánh xạ tông màu có thể được chuyển đổi trong mã.

00:08:48.000 --> 00:08:51.000
Chúng tôi bắt đầu bằng cách tải mô hình đèn giao thông.

00:08:51.000 --> 00:08:57.000
Ở đây, traffic_light là tên của mô hình 3D trong dự án của chúng tôi.

00:08:57.000 --> 00:09:01.000
Tiếp theo, chúng tôi tìm thấy thực thể có tên red_light.

00:09:01.000 --> 00:09:06.000
Thực thể này tương ứng với đèn trên cùng của đèn giao thông.

00:09:06.000 --> 00:09:10.000
Khi chúng tôi có thực thể, chúng tôi truy cập thành phần mô hình của nó.

00:09:10.000 --> 00:09:13.000
Tiếp theo, chúng tôi tạo ra một vật liệu mới không được chiếu sáng.

00:09:13.000 --> 00:09:21.000
Chúng tôi vượt qua cả màu mong muốn và một tham số Boolean mới được gọi là applyPostProcessToneMap.

00:09:21.000 --> 00:09:30.000
Tham số Boolean này được đặt thành sai để vô hiệu hóa chuyển đổi ánh xạ âm cho vật liệu này.

00:09:30.000 --> 00:09:37.000
Cuối cùng, chúng tôi thay thế vật liệu trên thành phần mô hình và gán lại thành phần mô hình cho thực thể.

00:09:37.000 --> 00:09:40.000
Điều này được thực hiện cho mỗi trong số ba chiếc đèn.

00:09:40.000 --> 00:09:46.000
Bây giờ màu sắc của nút và màu của đèn sẽ khớp chặt chẽ.

00:09:46.000 --> 00:09:54.000
applyPostProcessToneMap flag rất hữu ích trong trường hợp bạn muốn hiển thị biểu diễn chính xác màu sắc trong cảnh của mình.

00:09:54.000 --> 00:10:01.000
Điều này có thể hữu ích khi sử dụng RealityKit để xây dựng một cái gì đó như menu hoặc màn hình hiển thị trước.

00:10:01.000 --> 00:10:08.000
Thuộc tính mới này cũng được hiển thị trong trình chỉnh sửa tài liệu của Reality Composer Pro.

00:10:08.000 --> 00:10:11.000
Bây giờ, chúng ta hãy xem xét một số cân nhắc về chất lượng.

00:10:11.000 --> 00:10:16.000
Chúng ta sẽ bắt đầu với bản đồ tốc độ rasterization cho tính toán không gian.

00:10:16.000 --> 00:10:24.000
Các màn hình được sử dụng trong tai nghe có độ phân giải cao và hệ điều hành cần cập nhật các màn hình này nhiều lần trong một giây.

00:10:24.000 --> 00:10:27.000
Hãy để tôi giải thích điều này bằng một hình ảnh.

00:10:27.000 --> 00:10:34.000
Như bạn có thể đã biết, tai nghe có khả năng phát hiện chính xác vị trí mắt của một người đang nhìn.

00:10:34.000 --> 00:10:41.000
Đây là một kịch bản mô phỏng trong đó một người di chuyển mắt sang phải và sau đó quay trở lại trung tâm.

00:10:41.000 --> 00:10:46.000
Vòng tròn màu vàng đại diện cho điểm trung tâm của tiêu điểm của người đó.

00:10:46.000 --> 00:10:52.000
Khu vực xung quanh điểm đó được làm nổi bật bằng ánh sáng và ngoại vi bị tối đi.

00:10:52.000 --> 00:10:59.000
Bản đồ tỷ lệ Rasterization làm cho nó ít tính toán hơn được thực hiện trong các khu vực bị tối.

00:10:59.000 --> 00:11:06.000
Bạn có thể thấy rằng tại bất kỳ thời điểm nào, vùng được đánh dấu là nhỏ so với vùng ngoại vi.

00:11:06.000 --> 00:11:12.000
Điều này cho phép hệ thống đạt được tiết kiệm đáng kể bộ nhớ và hiệu suất.

00:11:12.000 --> 00:11:17.000
Trong RealityKit, tối ưu hóa này được tự động kích hoạt cho bạn.

00:11:17.000 --> 00:11:27.000
Mặc dù nó cải thiện đáng kể hiệu suất hệ thống, nhưng trong một số tình huống, bạn có thể phải điều chỉnh nội dung của mình để làm cho nó hoạt động tốt với việc tối ưu hóa này khi chơi.

00:11:27.000 --> 00:11:35.000
Ví dụ, đây là một tài sản lá cọ, Khi được đặt ở giữa màn hình, nó trông sắc nét và chi tiết.

00:11:35.000 --> 00:11:44.000
Nhưng khi tôi di chuyển vật thể sang trái và áp dụng mô phỏng chuyển động của mắt một lần nữa, bạn có thể quan sát thấy nhấp nháy trên lá cọ.

00:11:44.000 --> 00:11:52.000
Sự nhấp nháy đặc biệt mạnh khi vòng tròn màu vàng đại diện cho hướng mắt gần với cạnh phải của màn hình.

00:11:52.000 --> 00:12:06.000
Sự nhấp nháy xảy ra bởi vì bản đồ tốc độ rasterization cho phép chi tiết cao hơn xung quanh điểm mà người đó đang nhìn và các điểm ảnh xung quanh lá cọ được hiển thị ở chi tiết thấp hơn khi mắt di chuyển ra khỏi nó.

00:12:06.000 --> 00:12:12.000
Bây giờ, bạn có thể giảm nhấp nháy bằng cách điều chỉnh một vài thông số nội dung của bạn.

00:12:12.000 --> 00:12:14.000
Hãy cùng xem cái này.

00:12:14.000 --> 00:12:21.000
Đây là biểu diễn của cùng một tài sản lá cọ với lớp phủ khung dây màu đỏ ở trên cùng.

00:12:21.000 --> 00:12:24.000
Bạn có thể thấy rằng có rất nhiều hình tam giác nhỏ ở đây.

00:12:24.000 --> 00:12:28.000
Những hình tam giác nhỏ này là lý do nhấp nháy ở ngoại vi.

00:12:28.000 --> 00:12:38.000
Chúng ta có thể giảm nhấp nháy bằng cách đơn giản làm cho các hình tam giác lớn hơn và lưu trữ các chi tiết nhỏ trong một kết cấu mờ đục.

00:12:38.000 --> 00:12:43.000
Đây là cách mô phỏng trông như thế nào sau khi điều chỉnh tài sản.

00:12:43.000 --> 00:12:53.000
Mô hình 3D này trông đẹp hơn sau khi điều chỉnh, bởi vì RealityKit tự động tạo ra các phiên bản có độ phân giải thấp hơn của bản đồ độ mờ khi tài sản được tải.

00:12:53.000 --> 00:13:03.000
Các phiên bản có độ phân giải thấp hơn của kết cấu được gọi là mipmaps và được GPU tự động sử dụng để cải thiện giao diện trong khu vực chi tiết thấp hơn.

00:13:03.000 --> 00:13:12.000
Để biết thêm chi tiết về bản đồ tỷ lệ rasterization, vui lòng tham khảo bài viết "Kết xuất ở các tỷ lệ Rasterization khác nhau."

00:13:12.000 --> 00:13:23.000
Tương tự như bản đồ tỷ lệ rasterization, có một kỹ thuật khác được gọi là "chia tỷ lệ nội dung động" tự động cải thiện giao diện của nội dung được tạo bằng SwiftUI.

00:13:23.000 --> 00:13:26.000
Hãy cùng xem nào.

00:13:26.000 --> 00:13:31.000
Đây là một ứng dụng hiển thị danh sách các tháng được sắp xếp trong một lưới.

00:13:31.000 --> 00:13:36.000
Mỗi tháng được thể hiện bằng một nhãn văn bản.

00:13:36.000 --> 00:13:44.000
Khi mắt nhìn vào tháng Sáu, hệ thống sẽ rasterizes văn bản trong khu vực đó ở mức độ chi tiết cao nhất.

00:13:44.000 --> 00:13:55.000
Khu vực được đánh dấu màu xanh lam xung quanh "Tháng Sáu" sẽ được rasterized ở mức độ chi tiết giảm nhẹ, nhưng vẫn duy trì chất lượng tổng thể cao.

00:13:55.000 --> 00:14:07.000
Tuy nhiên, khu vực được đánh dấu bằng màu tím được rasterized ở mức độ chi tiết thấp hơn nhiều vì hệ thống thị giác của con người nhận thấy ít chi tiết hơn ở ngoại vi và nó sẽ không đáng chú ý bằng.

00:14:07.000 --> 00:14:17.000
Kiểu rasterization này ở các mức độ chi tiết khác nhau dựa trên những gì mắt đang nhìn được gọi là "tỷ lệ nội dung động".

00:14:17.000 --> 00:14:27.000
Hệ thống dựa vào việc mở rộng quy mô nội dung động để vẽ nội dung giao diện người dùng ở quy mô phù hợp và đảm bảo rằng nó luôn sắc nét.

00:14:27.000 --> 00:14:32.000
Chia tỷ lệ nội dung động ảnh hưởng đến kích thước tương đối trong bộ nhớ cho nội dung rasterized.

00:14:32.000 --> 00:14:42.000
Nói cách khác, nhãn văn bản của chúng tôi được thu nhỏ thành các kích cỡ khác nhau tùy thuộc vào mức độ gần gũi của chúng với điểm mà mắt đang nhìn.

00:14:42.000 --> 00:14:51.000
Ví dụ, bạn có thể thấy rằng nhãn ghi "Tháng Sáu" là nhãn lớn nhất - nó có độ phân giải và chi tiết nhất.

00:14:51.000 --> 00:14:58.000
Sau đó, có một nhóm tám tháng - tháng Một, tháng Hai, tháng Ba, v.v. có ít chi tiết hơn một chút.

00:14:58.000 --> 00:15:06.000
Cuối cùng, có một nhóm ba tháng - tháng Tư, tháng Tám, tháng Mười Hai - cách xa nhất so với hướng nhìn của mắt.

00:15:06.000 --> 00:15:11.000
Nhóm cuối cùng đó sẽ được thể hiện bằng những hình ảnh nhỏ hơn trong bộ nhớ.

00:15:11.000 --> 00:15:16.000
Bây giờ, hãy hiểu cách kích hoạt mở rộng nội dung động.

00:15:16.000 --> 00:15:23.000
Nếu bạn đang sử dụng UIKit và SwiftUI, ứng dụng của bạn sẽ tự động được hưởng lợi từ kỹ thuật này.

00:15:23.000 --> 00:15:30.000
Nếu bạn đang dựa vào khung Core Animation để xây dựng giao diện người dùng của mình, có một API mới để cho phép mở rộng nội dung động.

00:15:30.000 --> 00:15:34.000
Hãy cùng xem qua API này.

00:15:34.000 --> 00:15:42.000
Mở rộng nội dung động có thể được kích hoạt bằng cách đặt thuộc tính của CALayer wantsDynamicContentScaling thành true.

00:15:42.000 --> 00:15:52.000
Lưu ý rằng kỹ thuật này dựa trên rasterizing ở độ phân giải cao hơn, vì vậy không nên sử dụng với nội dung chủ yếu dựa trên bitmap.

00:15:52.000 --> 00:16:01.000
Bạn có thể tìm thấy danh sách đầy đủ các đề xuất liên quan đến việc mở rộng quy mô nội dung động trên developer.apple.com.

00:16:01.000 --> 00:16:04.000
Hãy để tôi tóm tắt mọi thứ chúng ta đã học được.

00:16:04.000 --> 00:16:12.000
Chúng tôi bắt đầu bằng cách xem xét cách thêm đèn dựa trên hình ảnh và bóng nối đất vào các ứng dụng RealityKit.

00:16:12.000 --> 00:16:19.000
Sau đó, chúng tôi đã xem xét các tài liệu có sẵn cho trải nghiệm không gian, bao gồm cả ShaderGraphMaterial mới.

00:16:19.000 --> 00:16:24.000
Và chúng tôi cũng đã học được cách kiểm soát ánh xạ âm thanh cho vật liệu không sáng.

00:16:24.000 --> 00:16:36.000
Tiếp theo, chúng tôi đã tìm hiểu cách bản đồ tốc độ rasterization được sử dụng cho điện toán không gian, bao gồm một ví dụ về cách điều chỉnh mô hình 3D để giảm nhấp nháy ở ngoại vi.

00:16:36.000 --> 00:16:43.000
Cuối cùng, chúng tôi đã học được cách mở rộng nội dung động hoạt động trên hệ thống và cách bạn có thể sử dụng nó.

00:16:43.000 --> 00:16:51.000
Chúng tôi rất vui mừng về bản phát hành năm nay và nóng lòng muốn xem những trải nghiệm không gian tuyệt đẹp mà bạn xây dựng trên xrOS.

00:16:51.000 --> 23:59:59.000
Cảm ơn bạn.

