WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
Bhavya: Xin chào, tên tôi là Bhavya, và tôi là một kỹ sư trong nhóm Tiếp cận.

00:00:15.000 --> 00:00:20.000
Trong phiên hôm nay, chúng tôi sẽ tập trung vào cách thực hiện kiểm tra khả năng truy cập trong ứng dụng của bạn.

00:00:20.000 --> 00:00:28.000
Đầu tiên, chúng tôi sẽ đề cập đến việc thực hiện kiểm tra khả năng truy cập tự động dễ dàng như thế nào trong các bài kiểm tra giao diện người dùng của bạn.

00:00:28.000 --> 00:00:39.000
Và sau đó chúng ta sẽ thảo luận về cách phơi bày các yếu tố theo cách mang lại cho chúng ta trải nghiệm thử nghiệm tuyệt vời và trải nghiệm khả năng tiếp cận tuyệt vời cùng một lúc.

00:00:39.000 --> 00:00:43.000
Hãy bắt đầu với kiểm toán khả năng tiếp cận.

00:00:43.000 --> 00:00:47.000
Kiểm tra là một thành phần cơ bản trong quá trình phát triển ứng dụng.

00:00:47.000 --> 00:00:53.000
Bằng cách viết các bài kiểm tra, chúng tôi có thể phát hiện và sửa lỗi trước khi gửi mã.

00:00:53.000 --> 00:00:56.000
Đó là cách chúng tôi đảm bảo chất lượng của sản phẩm.

00:00:56.000 --> 00:01:01.000
Và một sản phẩm dễ tiếp cận là một sản phẩm chất lượng cao.

00:01:01.000 --> 00:01:09.000
Khoảng một trong bảy người trên toàn thế giới bị khuyết tật ảnh hưởng đến cách họ tương tác với thế giới và các thiết bị của họ.

00:01:09.000 --> 00:01:16.000
Mọi người sử dụng các công cụ như VoiceOver để tương tác với các ứng dụng của bạn theo cách tốt nhất cho họ.

00:01:16.000 --> 00:01:26.000
Cung cấp một sản phẩm chất lượng cao có nghĩa là cung cấp một ứng dụng mà mọi người đều có thể truy cập để họ có thể có trải nghiệm chất lượng cao nhất với ứng dụng của bạn.

00:01:26.000 --> 00:01:33.000
Tôi biết từ kinh nghiệm cá nhân làm thế nào khả năng tiếp cận có thể là một chủ đề sâu sắc và phức tạp.

00:01:33.000 --> 00:01:38.000
Hãy cùng khám phá cách kiểm toán khả năng tiếp cận có thể biến điều này thành một nhiệm vụ đơn giản.

00:01:38.000 --> 00:01:42.000
Xcode đi kèm với một công cụ được gọi là Trình kiểm tra khả năng truy cập.

00:01:42.000 --> 00:01:51.000
Công cụ này cung cấp một cách dễ dàng để tìm, chẩn đoán và khắc phục các sự cố về khả năng truy cập trong ứng dụng của bạn.

00:01:51.000 --> 00:01:57.000
Một trong những cách mạnh mẽ mà tôi có thể tận dụng công cụ này là thực hiện kiểm tra trên ứng dụng của mình.

00:01:57.000 --> 00:02:04.000
Thanh tra có thể kiểm tra các chế độ xem cá nhân trong ứng dụng của bạn để biết các vấn đề phổ biến về khả năng truy cập.

00:02:04.000 --> 00:02:08.000
Đây là ứng dụng mẫu của tôi. Nó có hai tab.

00:02:08.000 --> 00:02:16.000
Tab đầu tiên cung cấp cho tôi những trích dẫn động lực và tab thứ hai cho phép tôi viết ra những suy nghĩ của mình để tự suy ngẫm.

00:02:16.000 --> 00:02:22.000
Trong tab trích dẫn, tôi có chế độ xem văn bản hiển thị trích dẫn.

00:02:22.000 --> 00:02:26.000
Và chế độ xem văn bản này được đặt trên hình nền.

00:02:26.000 --> 00:02:31.000
Ngoài ra còn có một nút Báo giá mới để làm mới báo giá.

00:02:31.000 --> 00:02:36.000
Tôi có thể khởi chạy Trình kiểm tra khả năng truy cập và thực hiện kiểm tra ứng dụng của mình.

00:02:36.000 --> 00:02:45.000
Thanh tra kiểm tra tất cả các loại vấn đề, như cung cấp đủ mô tả yếu tố và đảm bảo độ tương phản thích hợp.

00:02:45.000 --> 00:02:52.000
Và các vấn đề mà nó tìm thấy được hiển thị trong một bảng với các mô tả chi tiết về từng vấn đề.

00:02:52.000 --> 00:02:57.000
Kiểm tra khả năng tiếp cận rất mạnh mẽ và bây giờ chúng có thể tự động hóa.

00:02:57.000 --> 00:03:01.000
Bây giờ bạn có thể thực hiện kiểm tra trong các bài kiểm tra giao diện người dùng của mình.

00:03:01.000 --> 00:03:11.000
Gọi performAccessibilityAudit trên ứng dụng XCUIA của bạn sẽ kiểm tra chế độ xem hiện tại cho các vấn đề về khả năng truy cập giống như Thanh tra viên làm.

00:03:11.000 --> 00:03:17.000
Không cần xác nhận: nếu phát hiện bất kỳ vấn đề nào, bài kiểm tra của bạn sẽ tự động thất bại.

00:03:17.000 --> 00:03:22.000
Hãy đi sâu vào một bản demo nhanh để xem điều này đang hoạt động.

00:03:22.000 --> 00:03:25.000
Tôi đã mở ứng dụng demo của mình trong Xcode.

00:03:25.000 --> 00:03:30.000
Nó được viết bằng Swift và sử dụng các chế độ xem UIKit tiêu chuẩn.

00:03:30.000 --> 00:03:37.000
Tôi đã viết một vài bài kiểm tra vượt qua để xác minh rằng các yếu tố trên màn hình tồn tại.

00:03:37.000 --> 00:03:47.000
Ví dụ, testQuoteTabView xác minh rằng chế độ xem hình ảnh và chế độ xem văn bản tồn tại trong tab trích dẫn.

00:03:47.000 --> 00:03:52.000
Một điều cần lưu ý là những bài kiểm tra này cũng giúp chúng tôi kiểm tra khả năng tiếp cận.

00:03:52.000 --> 00:03:58.000
Để XCTest tìm thấy những chế độ xem này, chúng phải là các yếu tố khả năng tiếp cận.

00:03:58.000 --> 00:04:04.000
Điều đó có nghĩa là nếu các bài kiểm tra giao diện người dùng của bạn có thể tìm thấy các yếu tố, thì các công nghệ hỗ trợ của chúng tôi cũng vậy.

00:04:04.000 --> 00:04:14.000
Thật tuyệt khi tôi nhận được một chút kiểm tra khả năng tiếp cận theo cách này, nhưng tôi muốn thêm một số kiểm tra vào bài kiểm tra của mình để đảm bảo rằng tôi đang nắm bắt được tất cả các loại vấn đề.

00:04:14.000 --> 00:04:20.000
Tôi sẽ tạo một bài kiểm tra khác gọi là testAccessibilityQuoteTabView.

00:04:20.000 --> 00:04:29.000
Tôi sẽ thực hiện một số thiết lập để khởi chạy ứng dụng của mình và điều hướng đến tab Trích dẫn.

00:04:29.000 --> 00:04:38.000
Và cuối cùng, tôi sẽ gọi performAccessibilityAudit trên ứng dụng.

00:04:38.000 --> 00:04:53.000
Cuộc kiểm toán có thể báo cáo nhiều vấn đề, vì vậy để cho phép bài kiểm tra của tôi tiếp tục báo cáo các vấn đề sau lần thất bại đầu tiên, tôi sẽ đặt continueAfterFailure thành true.

00:04:53.000 --> 00:04:55.000
Thế là xong.

00:04:55.000 --> 00:05:02.000
Hãy chạy thử nghiệm bằng cách nhấp vào viên kim cương thử nghiệm.

00:05:02.000 --> 00:05:04.000
Có vẻ như bài kiểm tra của tôi đã thất bại.

00:05:04.000 --> 00:05:08.000
Các vấn đề được báo cáo trực tuyến trong trình chỉnh sửa nguồn Xcode.

00:05:08.000 --> 00:05:17.000
Cuộc kiểm toán của tôi gặp phải hai vấn đề: Element không có mô tả và nhãn không thể đọc được của con người.

00:05:17.000 --> 00:05:21.000
Hãy cùng tìm hiểu xem các yếu tố có vấn đề là gì.

00:05:21.000 --> 00:05:38.000
Tôi có thể tìm hiểu sâu hơn về hai vấn đề này bằng cách truy cập trình điều hướng Báo cáo, nhấp vào Kiểm tra và sau đó nhấp vào tam giác tiết lộ bên cạnh bài kiểm tra của tôi.

00:05:38.000 --> 00:05:43.000
Chế độ xem này cho thấy sự cố chi tiết về quá trình chạy thử và các vấn đề.

00:05:43.000 --> 00:05:53.000
Đối với vấn đề đầu tiên, "phần tử không có mô tả", tôi có thể nhấp đúp vào ảnh chụp màn hình phần tử cho tôi thấy rằng chế độ xem hình ảnh không có mô tả.

00:05:53.000 --> 00:06:02.000
Tôi có thể làm như vậy tương tự cho vấn đề thứ hai, điều này cho tôi thấy rằng nhãn trên chế độ xem văn bản không thể đọc được của con người.

00:06:02.000 --> 00:06:07.000
Hãy dành một chút thời gian để thảo luận về cách xử lý các vấn đề mà cuộc kiểm toán của tôi vừa tìm thấy.

00:06:07.000 --> 00:06:19.000
Điều quan trọng là phải khám phá từng vấn đề riêng lẻ và khắc phục nó, vì chúng sẽ dẫn đến các vấn đề tương tác hoặc điều hướng thực sự cho người dùng ứng dụng của bạn, những người dựa vào các công nghệ hỗ trợ.

00:06:19.000 --> 00:06:25.000
Điều quan trọng là phải thừa nhận rằng bạn có thể gặp phải các vấn đề cần được lọc ra và bỏ qua.

00:06:25.000 --> 00:06:30.000
Có lẽ vấn đề là một hành vi dương tính giả hoặc được mong đợi.

00:06:30.000 --> 00:06:35.000
Kiểm toán khả năng tiếp cận giúp bạn dễ dàng bỏ qua những loại vấn đề này.

00:06:35.000 --> 00:06:39.000
Chúng ta sẽ đề cập đến một ví dụ để bỏ qua các vấn đề sau trong cuộc nói chuyện.

00:06:39.000 --> 00:06:48.000
Để tìm hiểu thêm về các phương pháp hay nhất về khả năng tiếp cận, vui lòng xem bài nói chuyện năm 2018 của chúng tôi có tiêu đề "Cung cấp trải nghiệm tiếp cận đặc biệt".

00:06:48.000 --> 00:06:56.000
Hãy điều tra vấn đề đầu tiên mà cuộc kiểm toán của tôi tìm thấy: nhãn khả năng truy cập trên chế độ xem văn bản không thể đọc được của con người.

00:06:56.000 --> 00:07:06.000
Nếu tôi kiểm tra chế độ xem văn bản trong Bảng phân cảnh, tôi có thể thấy rằng nhãn trợ năng đã được đặt thành QUOTE_TEXTVIEW.

00:07:06.000 --> 00:07:16.000
Người dùng dựa vào các công nghệ hỗ trợ như VoiceOver trước tiên sẽ nghe thấy nhãn khả năng truy cập, và sau đó là giá trị khả năng truy cập, như thế này.

00:07:16.000 --> 00:07:20.000
VoiceOver: QUOTE_TEXTVIEW, "Sống từng ngày một và biến nó thành một kiệt tác."

00:07:20.000 --> 00:07:28.000
Bhavya: Nhãn hiệu nghe có vẻ không tuyệt vời, và lý tưởng nhất, VoiceOver nên bỏ qua nó và chỉ nói câu trích dẫn.

00:07:28.000 --> 00:07:36.000
Tôi có thể xóa nhãn khả năng truy cập, nhưng sau đó các bài kiểm tra giao diện người dùng của tôi sẽ bị hỏng, bởi vì chúng phụ thuộc vào nhãn này để xác định chế độ xem văn bản.

00:07:36.000 --> 00:07:41.000
Lý tưởng nhất, chuỗi này nên được đặt làm mã định danh khả năng truy cập.

00:07:41.000 --> 00:07:52.000
Mã định danh khả năng truy cập cho phép bạn xác định duy nhất một phần tử khi viết các bài kiểm tra giao diện người dùng mà không ảnh hưởng đến khả năng truy cập hoặc trải nghiệm giao diện người dùng.

00:07:52.000 --> 00:07:57.000
Tôi sẽ đi đến Bảng phân cảnh của mình.

00:07:57.000 --> 00:08:13.000
Tôi sẽ chọn chế độ xem văn bản của mình, cắt chuỗi này khỏi nhãn và dán nó vào mã định danh.

00:08:13.000 --> 00:08:18.000
Vấn đề khác mà cuộc kiểm toán của tôi tìm thấy là chế độ xem hình ảnh không có mô tả.

00:08:18.000 --> 00:08:24.000
Thông thường, điều quan trọng là hình ảnh có thể truy cập được bằng các nhãn mô tả nhưng ngắn gọn.

00:08:24.000 --> 00:08:29.000
Tuy nhiên, trong ứng dụng của tôi, đây là một hình nền có tính trang trí.

00:08:29.000 --> 00:08:35.000
Nó không phải là một phần của nội dung chính và không thêm ý nghĩa bổ sung cho chính trích dẫn.

00:08:35.000 --> 00:08:40.000
Lý tưởng nhất, các công nghệ như VoiceOver nên bỏ qua chế độ xem hình ảnh này.

00:08:40.000 --> 00:08:47.000
Tôi có thể đạt được hành vi này bằng cách ghi đè các yếu tố trợ năng trên chế độ xem của bộ điều khiển chế độ xem.

00:08:47.000 --> 00:08:55.000
Bằng cách đặt nó thành chế độ xem văn bản trích dẫn và nút Trích dẫn mới, VoiceOver sẽ không còn xuất hiện chế độ xem hình ảnh nữa.

00:08:55.000 --> 00:08:58.000
Hãy đến Xcode và làm điều đó ngay bây giờ.

00:08:58.000 --> 00:09:10.000
Tôi sẽ vào tệp bộ điều khiển chế độ xem của mình và đặt accessibilityElements.

00:09:10.000 --> 00:09:11.000
Tuyệt vời.

00:09:11.000 --> 00:09:25.000
Hãy quay lại kiểm toán của tôi và chạy trường hợp thử nghiệm của tôi để xem liệu tôi có khắc phục được tất cả các vấn đề hay không.

00:09:25.000 --> 00:09:28.000
Ngọt ngào. Cuộc kiểm toán của tôi hiện đang trôi qua.

00:09:28.000 --> 00:09:34.000
Bạn sẽ nhận thấy một trong những bài kiểm tra giao diện người dùng của tôi hiện đang thất bại, nhưng chúng tôi sẽ quay lại vấn đề đó sau.

00:09:34.000 --> 00:09:40.000
Khi thêm kiểm tra khả năng truy cập, bạn có thể gặp phải các vấn đề cần được lọc.

00:09:40.000 --> 00:09:47.000
Ví dụ, giả sử kiểm toán của tôi đã tìm thấy một vấn đề với độ tương phản quá thấp trên một nhãn cụ thể.

00:09:47.000 --> 00:09:54.000
Sau khi điều tra, sự tương phản hóa ra vẫn ổn, và vấn đề dường như là dương tính giả.

00:09:54.000 --> 00:09:57.000
Hãy cùng khám phá cách tôi có thể bỏ qua vấn đề này.

00:09:57.000 --> 00:10:02.000
Chức năng performAccessibilityAudit nhận các tham số bổ sung.

00:10:02.000 --> 00:10:09.000
Tham số đầu tiên cho phép tôi chỉ định một bộ tùy chọn của các loại kiểm toán mà tôi muốn chạy.

00:10:09.000 --> 00:10:19.000
Đây là các danh mục như loại động và độ tương phản, các danh mục tương tự mà bạn đã quen thuộc trong Trình kiểm tra khả năng truy cập.

00:10:19.000 --> 00:10:25.000
Trong ví dụ này, tôi đang chọn kiểm tra chỉ cho các vấn đề về loại động và độ tương phản.

00:10:25.000 --> 00:10:29.000
Tham số thứ hai cho phép tôi chỉ định một đóng cửa.

00:10:29.000 --> 00:10:37.000
Việc đóng cửa này được kêu gọi đối với tất cả các vấn đề được kiểm toán tìm thấy và cho phép tôi chọn vấn đề nào cần bỏ qua và vấn đề nào cần báo cáo.

00:10:37.000 --> 00:10:42.000
Tôi sẽ bắt đầu bằng cách xác định một biến được gọi là shouldIgnore thành false.

00:10:42.000 --> 00:10:46.000
Theo mặc định, các vấn đề không nên bỏ qua.

00:10:46.000 --> 00:10:54.000
Giả sử tôi muốn bỏ qua một vấn đề tương phản trên một phần tử có nhãn "Nhãn của tôi".

00:10:54.000 --> 00:11:00.000
Tôi có thể liên kết XCUIElement với vấn đề bằng cách sử dụng issue.element.

00:11:00.000 --> 00:11:13.000
Nếu phần tử này có nhãn "Nhãn của tôi" và loại vấn đề là vấn đề tương phản, thì tôi biết tôi đã có vấn đề đúng, vì vậy tôi sẽ đặt shouldIgnore thành true.

00:11:13.000 --> 00:11:18.000
Đặt nó thành true cho thấy rằng tôi muốn vấn đề bị bỏ qua.

00:11:18.000 --> 00:11:21.000
Cuối cùng, tôi sẽ quay lại nếu tôi bỏ qua.

00:11:21.000 --> 00:11:29.000
Nếu các điều kiện trên không được đáp ứng, thì shouldIgnore sẽ sai, cho biết vấn đề nên được báo cáo là thất bại.

00:11:29.000 --> 00:11:31.000
Và thế là xong.

00:11:31.000 --> 00:11:42.000
Bạn có thể mở rộng ví dụ này và tùy chỉnh các tiêu chí để bỏ qua bằng cách sử dụng các thuộc tính khác, như loại phần tử hoặc mã định danh, v.v.

00:11:42.000 --> 00:11:50.000
Khi bạn bắt đầu viết kiểm tra khả năng truy cập cho các ứng dụng của riêng mình, thật hữu ích khi ghi nhớ những cân nhắc sau đây.

00:11:50.000 --> 00:11:53.000
Một cuộc kiểm toán bị giới hạn trong các yếu tố trên màn hình.

00:11:53.000 --> 00:12:03.000
Điều đó có nghĩa là để cung cấp phạm vi bảo hiểm đầy đủ, bạn nên thêm các bài kiểm tra kiểm tra khả năng truy cập cho tất cả các chế độ xem khác nhau mà ứng dụng của bạn có thể hiển thị.

00:12:03.000 --> 00:12:10.000
Trong trường hợp ứng dụng mẫu của tôi, tôi nên thêm một bài kiểm tra khác điều hướng đến tab thứ hai và chạy kiểm tra.

00:12:10.000 --> 00:12:18.000
Một cách nhanh chóng để ngay lập tức thêm kiểm toán cho nhiều bài kiểm tra là ghi đè và thực hiện kiểm toán trong quá trình xé.

00:12:18.000 --> 00:12:21.000
Bạn có thể xác định các biến trong phạm vi của lớp.

00:12:21.000 --> 00:12:31.000
Bằng cách này, các bài kiểm tra có thể ghi đè các biến này để chọn tham gia hoặc không tham gia kiểm tra và cho phép các bài kiểm tra tùy chỉnh việc đóng cửa để bỏ qua các vấn đề.

00:12:31.000 --> 00:12:37.000
Kế hoạch kiểm tra là một cách tuyệt vời để nhóm các bài kiểm tra cụ thể trong dự án của bạn.

00:12:37.000 --> 00:12:44.000
Chúng cho phép bạn kích hoạt có chọn lọc các mục tiêu kiểm tra, trường hợp hoặc phương pháp riêng lẻ trong kế hoạch kiểm tra.

00:12:44.000 --> 00:12:49.000
Và cuối cùng, kiểm toán không nên thay thế thử nghiệm thực tế bằng các công nghệ hỗ trợ.

00:12:49.000 --> 00:12:59.000
Cuối cùng, thử nghiệm ứng dụng của bạn bằng cách bật các công nghệ như VoiceOver hoặc Dynamic Type là cách tốt nhất để đảm bảo trải nghiệm chất lượng cao.

00:12:59.000 --> 00:13:07.000
Bạn có thể đạt được khả năng tiếp cận tuyệt vời và thử nghiệm tuyệt vời mà không cần phải thỏa hiệp về một trong hai.

00:13:07.000 --> 00:13:17.000
Các yếu tố tự động hóa cho phép bạn phơi bày các yếu tố cụ thể cho mục đích tự động hóa mà không ảnh hưởng đến khả năng tiếp cận của các yếu tố đó.

00:13:17.000 --> 00:13:31.000
Bây giờ, trong UIKit, bạn sẽ có thể tận dụng API này để hiển thị chính xác các yếu tố bạn cần cho tự động hóa, đồng thời vẫn có thể tùy chỉnh khả năng truy cập cho các yếu tố này.

00:13:31.000 --> 00:13:39.000
Bạn có thể nhớ từ trước đó rằng khi tôi khắc phục các vấn đề từ cuộc kiểm toán của mình, tôi cũng đã phá vỡ một trong những bài kiểm tra giao diện người dùng của mình.

00:13:39.000 --> 00:13:42.000
Chế độ xem hình ảnh dường như không còn khả dụng nữa.

00:13:42.000 --> 00:13:48.000
Nó bị thiếu trong bài kiểm tra giao diện người dùng của tôi vì nó cũng bị thiếu khả năng truy cập.

00:13:48.000 --> 00:13:55.000
Bởi vì chế độ xem hình ảnh này là trang trí, tôi đã vượt qua các yếu tố khả năng tiếp cận để loại trừ nó khỏi khả năng tiếp cận.

00:13:55.000 --> 00:14:01.000
Tuy nhiên, bằng cách làm như vậy, tôi cũng khiến nó bị loại khỏi bài kiểm tra giao diện người dùng của mình.

00:14:01.000 --> 00:14:07.000
Hãy cùng khám phá cách các yếu tố tự động hóa có thể giúp tôi hiển thị chế độ xem hình ảnh của mình trong bài kiểm tra giao diện người dùng của mình.

00:14:07.000 --> 00:14:13.000
Tôi sẽ đi đến tệp bộ điều khiển xem trong Xcode.

00:14:13.000 --> 00:14:20.000
Và tôi sẽ đặt các yếu tố tự động hóa trên chế độ xem của bộ điều khiển chế độ xem thành chế độ xem hình ảnh.

00:14:20.000 --> 00:14:31.000
Hãy nhớ rằng khi ghi đè các yếu tố tự động hóa, bạn cần chỉ định tất cả các yếu tố cần được tiếp xúc với tự động hóa.

00:14:31.000 --> 00:14:37.000
Điều đó có nghĩa là tôi cũng cần thêm chế độ xem văn bản và nút vào danh sách của mình.

00:14:37.000 --> 00:14:45.000
Khi ghi đè các yếu tố tự động hóa, bạn đang ghi đè các yếu tố hiện có đã được tiếp xúc với tự động hóa.

00:14:45.000 --> 00:14:50.000
Hãy thử chạy trường hợp thử nghiệm của chúng tôi để xem nó có vượt qua lần nữa không.

00:14:50.000 --> 00:15:01.000
Tuyệt vời.

00:15:01.000 --> 00:15:08.000
Chúng tôi đã có thể viết một số bài kiểm tra giao diện người dùng và khả năng truy cập tuyệt vời và khắc phục một số vấn đề về khả năng truy cập.

00:15:08.000 --> 00:15:17.000
Kiểm tra khả năng truy cập là một cách tuyệt vời để thêm kiểm tra khả năng truy cập dễ dàng, tự động cho ứng dụng của bạn.

00:15:17.000 --> 00:15:23.000
Khắc phục các sự cố được xác định bởi các cuộc kiểm tra giúp đảm bảo mọi người đều có thể thưởng thức ứng dụng của bạn.

00:15:23.000 --> 00:15:30.000
Tạo ra những trải nghiệm tự động hóa và khả năng tiếp cận tuyệt vời mà không cần phải chọn cái này hơn cái kia.

00:15:30.000 --> 00:15:39.000
Các yếu tố tự động hóa cho phép bạn hiển thị các yếu tố cụ thể cho các bài kiểm tra giao diện người dùng của mình mà không ảnh hưởng đến trải nghiệm khả năng truy cập.

00:15:39.000 --> 00:15:46.000
Tôi khuyến khích bạn đi đến các bài kiểm tra giao diện người dùng của mình và thêm một cuộc gọi nhanh để thực hiện AccessibilityAudit.

00:15:46.000 --> 23:59:59.000
Cảm ơn bạn.

