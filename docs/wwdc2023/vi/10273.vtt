WEBVTT

00:00:00.000 --> 00:00:04.000
♪ Hip-hop nhạc cụ êm dịu ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:17.000
Xin chào, tên tôi là Amanda, và tôi là một kỹ sư làm việc trên RealityKit và Reality Composer Pro.

00:00:17.000 --> 00:00:25.000
Trong phần này, chúng ta sẽ học cách tạo trải nghiệm không gian bằng cách sử dụng nội dung 3D mà bạn lắp ráp trong Reality Composer Pro.

00:00:25.000 --> 00:00:32.000
Reality Composer Pro là một công cụ dành cho nhà phát triển để chuẩn bị nội dung RealityKit được sử dụng trong ứng dụng điện toán không gian của bạn.

00:00:32.000 --> 00:00:42.000
Trong phiên này, chúng tôi sẽ tiếp tục lặp lại một dự án mà các đồng nghiệp của tôi Eric và Niels đã tạo ra trong các phiên của họ và chúng tôi sẽ học cách làm cho nó tương tác trong mã.

00:00:42.000 --> 00:00:53.000
Nếu bạn chưa xem các phiên của họ, tôi khuyên bạn nên tự làm quen với giao diện người dùng của trình chỉnh sửa và các tính năng của Reality Composer Pro được đề cập trong các phiên của họ.

00:00:53.000 --> 00:00:59.000
Đầu tiên, hãy nhìn vào thành phẩm mà chúng tôi đã xây dựng, và sau đó tôi sẽ hướng dẫn bạn cách chúng tôi tạo ra từng phần.

00:00:59.000 --> 00:01:05.000
Chúng tôi đang xem bản đồ địa hình của Công viên Quốc gia Yosemite.

00:01:05.000 --> 00:01:12.000
Nhìn thấy nó trong tai nghe thực sự mang lại cho bạn cảm giác rộng lớn mà trước đây không thể thực hiện được nếu không trực tiếp đến đó.

00:01:12.000 --> 00:01:20.000
Trong các phiên Reality Composer Pro trước đó, Eric đã tập hợp cảnh này và Niels đã tạo ra các tài liệu mà chúng tôi đang sử dụng trên địa hình.

00:01:20.000 --> 00:01:25.000
Ở đây, chúng tôi đã thêm một thanh trượt để biến đổi giữa hai địa danh California khác nhau.

00:01:25.000 --> 00:01:30.000
Bây giờ chúng ta đang nhìn vào Đảo Catalina ngoài khơi bờ biển Los Angeles.

00:01:30.000 --> 00:01:39.000
Chúng tôi cũng có các nút SwiftUI 2D di chuột được đặt trong không gian 3D cho phép bạn tìm hiểu thêm về các điểm quan tâm khác nhau trong bản đồ đó.

00:01:39.000 --> 00:01:47.000
Trong phiên này, chúng ta sẽ khám phá cách chúng ta sắp xếp nội dung này trong Reality Composer Pro để chúng ta có thể sử dụng nó để thúc đẩy trải nghiệm.

00:01:47.000 --> 00:01:55.000
Tôi sẽ chỉ ra cách chúng tôi kết nối thanh trượt này và các nút quan tâm để chúng ảnh hưởng đến cảnh chúng tôi đã thực hiện trong Reality Composer Pro.

00:01:55.000 --> 00:02:02.000
Chúng tôi sẽ bắt đầu bằng cách tải nội dung 3D theo chương trình từ dự án Reality Composer Pro của chúng tôi.

00:02:02.000 --> 00:02:11.000
Chúng ta sẽ khám phá cách các thành phần RealityKit hoạt động và cách chúng ta có thể sử dụng chúng trong mã, bao gồm cả việc tạo các thành phần tùy chỉnh của riêng chúng ta.

00:02:11.000 --> 00:02:22.000
Chúng ta sẽ tìm hiểu về RealityView API mới trong SwiftUI và khám phá cách chúng ta có thể thêm các yếu tố giao diện người dùng vào cảnh của mình bằng cách sử dụng API Tệp đính kèm.

00:02:22.000 --> 00:02:27.000
Và chúng ta sẽ học cách làm việc với âm thanh mà chúng ta đã thiết lập trong Reality Composer Pro.

00:02:27.000 --> 00:02:37.000
Sau đó, chúng tôi sẽ tiếp tục từ nơi Niels đã dừng lại bằng cách kết nối tài liệu tùy chỉnh mà chúng tôi đã tạo bằng Shader Graph và điều khiển các phần tử của nó từ mã của chúng tôi.

00:02:37.000 --> 00:02:40.000
Hãy bắt đầu nào.

00:02:40.000 --> 00:02:48.000
Trong phiên của Eric, chúng tôi đã thực hiện một dự án Reality Composer Pro chứa tất cả các tài sản cho diorama của chúng tôi được sắp xếp theo cách chúng tôi muốn.

00:02:48.000 --> 00:02:53.000
Các tab này ở trên cùng đại diện cho một thực thể gốc mà chúng ta có thể tải trong thời gian chạy.

00:02:53.000 --> 00:02:58.000
Chúng ta có thể đặt rất nhiều thứ vào một cảnh và coi đó là cảnh được lắp ráp hoàn chỉnh của chúng ta.

00:02:58.000 --> 00:03:03.000
Hoặc chúng ta có thể đặt chỉ một ít và sau đó coi cảnh đó như một tập hợp nhỏ có thể tái sử dụng.

00:03:03.000 --> 00:03:05.000
Chúng ta có thể làm bao nhiêu tùy thích.

00:03:05.000 --> 00:03:12.000
Hãy xem cách chúng tôi tải cảnh này có tên DioramaAssembled trong thời gian chạy.

00:03:12.000 --> 00:03:20.000
Chúng tôi sử dụng trình khởi tạo không đồng bộ của thực thể để biến chúng tôi thành một thực thể với nội dung từ gói Reality Composer Pro của chúng tôi.

00:03:20.000 --> 00:03:28.000
Chúng tôi chỉ định thực thể nào chúng tôi muốn tải bằng cách sử dụng tên chuỗi của nó và chúng tôi cung cấp cho nó gói mà gói của chúng tôi tạo ra.

00:03:28.000 --> 00:03:33.000
Nó sẽ ném nếu nó không thể tìm thấy bất cứ thứ gì trong dự án Reality Composer Pro của chúng tôi với cái tên đó.

00:03:33.000 --> 00:03:41.000
realityKitContentBundle là một giá trị không đổi mà chúng tôi tự động tạo cho bạn trong gói Reality Composer Pro của bạn.

00:03:41.000 --> 00:03:44.000
Điều này xảy ra trong chế độ xem thực tế làm cho kết thúc.

00:03:44.000 --> 00:03:48.000
RealityView là một loại chế độ xem SwiftUI mới.

00:03:48.000 --> 00:03:50.000
Đó là mục nhập của bạn vào RealityKit.

00:03:50.000 --> 00:03:54.000
Đó là cầu nối giữa thế giới của SwiftUI và RealityKit.

00:03:54.000 --> 00:04:00.000
Chúng ta sẽ đi sâu hơn vào RealityView này vào cuối phiên này.

00:04:00.000 --> 00:04:16.000
Nếu có tài sản USD bạn đang sử dụng trong dự án Xcode của mình mà bạn không thêm vào dự án Reality Composer Pro, chúng tôi đặc biệt khuyến khích bạn đưa những tài sản đó vào Gói Swift, với thư mục .rkassets bên trong nó, như thế này.

00:04:16.000 --> 00:04:23.000
Xcode biên dịch thư mục .rkassets thành một định dạng tải nhanh hơn trong thời gian chạy.

00:04:23.000 --> 00:04:29.000
Thực thể chúng tôi vừa tải thực sự là gốc của hệ thống phân cấp thực thể lớn hơn.

00:04:29.000 --> 00:04:33.000
Nó có các thực thể con và đến lượt chúng có các thực thể con.

00:04:33.000 --> 00:04:37.000
Đó là tất cả những gì chúng tôi đã sắp xếp trong cảnh Reality Composer Pro của chúng tôi.

00:04:37.000 --> 00:04:49.000
Nếu chúng tôi muốn giải quyết một trong những thực thể thấp hơn trong hệ thống phân cấp, chúng tôi có thể đặt tên cho nó trong Reality Composer Pro, và sau đó trong thời gian chạy, chúng tôi có thể yêu cầu cảnh tìm thực thể đó theo tên của nó.

00:04:49.000 --> 00:04:55.000
Các thực thể là một phần của ECS, viết tắt của Entity Component System.

00:04:55.000 --> 00:04:59.000
ECS là thứ hỗ trợ RealityKit và Reality Composer Pro.

00:04:59.000 --> 00:05:03.000
Hãy lùi lại một bước và hiểu ECS.

00:05:03.000 --> 00:05:11.000
ECS có một số điểm tương đồng gần với lập trình hướng đối tượng nhưng khác nhau theo một số cách chính.

00:05:11.000 --> 00:05:20.000
Trong thế giới lập trình hướng đối tượng, đối tượng có các thuộc tính là các thuộc tính xác định bản chất của nó và nó có chức năng riêng.

00:05:20.000 --> 00:05:25.000
Bạn viết các thuộc tính và hàm này trong một lớp xác định đối tượng.

00:05:25.000 --> 00:05:30.000
Trong thế giới ECS, một thực thể là bất cứ thứ gì bạn nhìn thấy trong cảnh.

00:05:30.000 --> 00:05:32.000
Chúng cũng có thể vô hình.

00:05:32.000 --> 00:05:34.000
Tuy nhiên, họ không giữ các thuộc tính hoặc dữ liệu.

00:05:34.000 --> 00:05:37.000
Thay vào đó, chúng tôi đưa dữ liệu của mình vào các thành phần.

00:05:37.000 --> 00:05:48.000
Các thành phần có thể được thêm vào hoặc xóa khỏi các thực thể bất cứ lúc nào trong quá trình thực thi ứng dụng, điều này cung cấp một cách để tự động thay đổi bản chất của một thực thể.

00:05:48.000 --> 00:05:51.000
Một hệ thống là nơi hành vi của chúng ta sống.

00:05:51.000 --> 00:05:54.000
Nó có một chức năng cập nhật được gọi một lần cho mỗi khung hình.

00:05:54.000 --> 00:05:56.000
Đó là nơi bạn đặt logic liên tục của mình.

00:05:56.000 --> 00:06:10.000
Trong hệ thống của bạn, bạn truy vấn tất cả các thực thể có một thành phần nhất định trên đó hoặc cấu hình của các thành phần, và sau đó bạn thực hiện một số hành động và lưu trữ dữ liệu cập nhật trở lại các thành phần đó.

00:06:10.000 --> 00:06:23.000
Để có cuộc thảo luận chuyên sâu hơn về ECS, hãy xem phiên "Đi sâu vào RealityKit 2" từ năm 2021 và "Xây dựng trải nghiệm không gian với RealityKit" năm nay.

00:06:23.000 --> 00:06:26.000
Bây giờ hãy tìm hiểu về các thành phần.

00:06:26.000 --> 00:06:38.000
Chúng ta sẽ xem cách thêm các thành phần vào các thực thể trong dự án Reality Composer Pro của chúng ta, và sau đó chúng ta sẽ học cách tạo các thành phần tùy chỉnh để tạo các điểm đánh dấu vị trí trên diorama của chúng ta.

00:06:38.000 --> 00:06:48.000
Để thêm một thành phần vào một thực thể trong Swift, bạn sẽ nói entity.components.set() và cung cấp giá trị thành phần.

00:06:48.000 --> 00:06:57.000
Để làm điều tương tự trong Reality Composer Pro, hãy chọn thực thể bạn muốn trong khung nhìn hoặc trong hệ thống phân cấp.

00:06:57.000 --> 00:07:09.000
Sau đó, ở cuối Bảng điều khiển Thanh tra, nhấp vào nút Thêm Thành phần để hiển thị danh sách tất cả các thành phần có sẵn của RealityKit.

00:07:09.000 --> 00:07:16.000
Chúng ta có thể thêm bao nhiêu thành phần vào một thực thể tùy thích và chúng ta chỉ có thể thêm một trong mỗi loại; đó là một tập hợp.

00:07:16.000 --> 00:07:20.000
Bạn cũng sẽ thấy bất kỳ thành phần tùy chỉnh nào bạn đã thực hiện trong danh sách này.

00:07:20.000 --> 00:07:26.000
Hãy xem cách chúng ta có thể sử dụng Reality Composer Pro để tạo ra các thành phần tùy chỉnh của riêng mình.

00:07:26.000 --> 00:07:35.000
Chúng tôi sẽ tạo các nút nổi di chuột qua các điểm cụ thể trên địa hình của chúng tôi để bạn có thể chọn chúng để xem thêm thông tin về vị trí đó.

00:07:35.000 --> 00:07:48.000
Chúng tôi sẽ chuẩn bị rất nhiều giao diện người dùng và chức năng đó trong mã, nhưng tôi muốn chỉ cho bạn cách đánh dấu các thực thể này trong Reality Composer Pro là vị trí mà chúng tôi muốn hiển thị các nút nổi đó.

00:07:48.000 --> 00:07:59.000
Để làm điều này, chúng tôi sẽ thêm các thực thể tại các vị trí phía trên bản đồ địa hình của chúng tôi, điều này sẽ biểu thị cho ứng dụng rằng đây là những nơi chúng tôi muốn hiển thị các nút nổi của mình.

00:07:59.000 --> 00:08:05.000
Sau đó, chúng tôi sẽ tạo ra một thành phần điểm quan tâm để lưu trữ thông tin của chúng tôi về từng địa điểm.

00:08:05.000 --> 00:08:14.000
Sau đó, chúng tôi mở PointOfInterestComponent.swift trong Xcode để chỉnh sửa nó, thêm các thuộc tính như tên và mô tả.

00:08:14.000 --> 00:08:24.000
Trong Reality Composer Pro, chúng tôi sẽ thêm PointOfInterestComponent mới vào mỗi thực thể mới của mình và sau đó chúng tôi sẽ điền vào các giá trị thuộc tính.

00:08:24.000 --> 00:08:30.000
Hãy tạo ra thực thể đánh dấu vị trí đầu tiên của chúng tôi, Bãi biển Ribbon, một địa điểm trên Đảo Catalina.

00:08:30.000 --> 00:08:35.000
Chúng tôi nhấp vào menu dấu cộng và chọn Biến đổi để biến chúng tôi thành một thực thể vô hình mới.

00:08:35.000 --> 00:08:44.000
Chúng ta có thể đặt tên cho thực thể của chúng ta là Ribbon_Beach.

00:08:44.000 --> 00:08:53.000
Hãy đặt thực thể này ở nơi Bãi biển Ribbon thực sự nằm trên đảo.

00:08:53.000 --> 00:09:08.000
Chúng tôi nhấp vào nút Thêm Thành phần, nhưng lần này, chúng tôi chọn Thành phần Mới vì chúng tôi sẽ tự tạo.

00:09:08.000 --> 00:09:14.000
Hãy đặt tên cho nó, PointOfInterest.

00:09:14.000 --> 00:09:26.000
Bây giờ nó xuất hiện trong Bảng điều khiển Thanh tra giống như các thành phần khác của chúng tôi.

00:09:26.000 --> 00:09:29.000
Nhưng tài sản đếm này là gì?

00:09:29.000 --> 00:09:33.000
Hãy mở thành phần mới của chúng ta trong Xcode.

00:09:33.000 --> 00:09:39.000
Trong Xcode, chúng tôi thấy rằng Reality Composer Pro đã tạo ra PointOfInterestComponent.swift cho chúng tôi.

00:09:39.000 --> 00:09:47.000
Các dự án Reality Composer Pro là các gói Swift và mã Swift mà chúng tôi vừa tạo tồn tại ở đây trong gói.

00:09:47.000 --> 00:09:54.000
Nhìn vào mã mẫu, chúng tôi thấy rằng đó là nơi thuộc tính đếm đến.

00:09:54.000 --> 00:09:57.000
Thay vào đó hãy có một tài sản khác.

00:09:57.000 --> 00:10:07.000
Chúng tôi muốn mỗi điểm quan tâm biết nó được liên kết với bản đồ nào để khi bạn thay đổi bản đồ, chúng tôi có thể làm mờ dần các điểm quan tâm cũ và mờ dần trong những điểm thích hợp.

00:10:07.000 --> 00:10:11.000
Vì vậy, chúng tôi thêm một thuộc tính liệt kê, vùng var.

00:10:11.000 --> 00:10:21.000
Hãy làm cho khu vực enum của chúng ta lên đây...

00:10:21.000 --> 00:10:32.000
...Và đưa ra hai trường hợp, vì chúng tôi chỉ đang xây dựng hai bản đồ ngay bây giờ: Catalina và Yosemite.

00:10:32.000 --> 00:10:44.000
Nó có thể tuần tự hóa như một chuỗi.

00:10:44.000 --> 00:10:52.000
Chúng tôi cũng phù hợp với giao thức Codable để Reality Composer Pro có thể xem nó và tuần tự hóa các trường hợp của nó.

00:10:52.000 --> 00:11:00.000
Quay trở lại Reality Composer Pro, tài sản đếm đã biến mất và tài sản khu vực mới của chúng tôi xuất hiện.

00:11:00.000 --> 00:11:09.000
Nó có giá trị mặc định của yosemite vì đó là những gì chúng tôi đã khởi tạo trong mã, nhưng chúng tôi có thể ghi đè nó ở đây cho thực thể cụ thể này.

00:11:09.000 --> 00:11:17.000
Nếu chúng ta ghi đè nó, giá trị này sẽ chỉ có hiệu lực đối với thực thể cụ thể này.

00:11:17.000 --> 00:11:24.000
Phần còn lại của các thành phần quan tâm sẽ có giá trị mặc định của yosemite trừ khi chúng tôi cũng ghi đè chúng.

00:11:24.000 --> 00:11:30.000
Chúng tôi đang sử dụng PointOfInterestComponent của mình như một biểu thị, một điểm đánh dấu mà chúng tôi gắn vào các thực thể này.

00:11:30.000 --> 00:11:36.000
Các thực thể này hoạt động giống như trình giữ chỗ cho nơi chúng tôi sẽ đặt các nút SwiftUI của mình trong thời gian chạy.

00:11:36.000 --> 00:11:42.000
Chúng tôi thêm các điểm tham quan khác của Đảo Catalina giống như cách chúng tôi vừa thêm Bãi biển Ribbon.

00:11:42.000 --> 00:11:51.000
Hãy chạy ứng dụng của chúng tôi và xem thành phần tùy chỉnh mới của chúng tôi làm gì.

00:11:51.000 --> 00:11:53.000
Ồ! Nó không làm gì cả.

00:11:53.000 --> 00:11:58.000
Đó là bởi vì chúng tôi chưa viết bất kỳ mã nào để xử lý các thành phần quan tâm này.

00:11:58.000 --> 00:12:00.000
Hãy làm điều đó.

00:12:00.000 --> 00:12:05.000
Chúng tôi có một cách mới để đưa nội dung SwiftUI vào bối cảnh RealityKit.

00:12:05.000 --> 00:12:07.000
Cái này được gọi là API Tệp đính kèm.

00:12:07.000 --> 00:12:15.000
Chúng tôi sẽ kết hợp các tệp đính kèm với PointOfInterestComponent của mình để tạo các nút di chuột với dữ liệu tùy chỉnh trong thời gian chạy.

00:12:15.000 --> 00:12:20.000
Trước tiên hãy xem cái này trong mã và sau đó tôi sẽ hướng dẫn bạn qua luồng dữ liệu.

00:12:20.000 --> 00:12:23.000
Tệp đính kèm là một phần của RealityView.

00:12:23.000 --> 00:12:33.000
Trước tiên chúng ta hãy xem xét một ví dụ đơn giản để hiển thị cấu trúc của RealityView để chúng ta có thể xem cách các chế độ xem SwiftUI xâm nhập vào cảnh RealityKit.

00:12:33.000 --> 00:12:45.000
Trình khởi tạo RealityView mà chúng ta sẽ sử dụng có ba tham số: đóng tạo, đóng cập nhật và tệp đính kèm ViewBuilder.

00:12:45.000 --> 00:12:56.000
Loại bỏ điều này một chút, hãy thêm một triển khai tối thiểu để tạo Chế độ xem tệp đính kèm, nút SwiftUI màu xanh lá cây và thêm nó vào cảnh RealityKit của chúng tôi.

00:12:56.000 --> 00:13:06.000
Trong File đính kèm ViewBuilder, chúng tôi tạo chế độ xem SwiftUI bình thường; chúng tôi có thể sử dụng công cụ sửa đổi chế độ xem và cử chỉ và tất cả phần còn lại mà SwiftUI cung cấp cho chúng tôi.

00:13:06.000 --> 00:13:09.000
Chúng tôi gắn thẻ Chế độ xem của mình với bất kỳ khả năng có thể băm độc đáo nào.

00:13:09.000 --> 00:13:14.000
Tôi đã chọn gắn thẻ nút xem này bằng biểu tượng cảm xúc cá.

00:13:14.000 --> 00:13:21.000
Sau đó, khi SwiftUI gọi đóng cập nhật của chúng tôi, nút Xem của chúng tôi đã trở thành một thực thể.

00:13:21.000 --> 00:13:29.000
Nó được lưu trữ trong tham số tệp đính kèm cho lần đóng này và chúng tôi tìm ra nó bằng cách sử dụng thẻ mà chúng tôi đã cung cấp trước đó.

00:13:29.000 --> 00:13:31.000
Sau đó chúng ta có thể đối xử với nó như bất kỳ thực thể nào khác.

00:13:31.000 --> 00:13:41.000
Chúng ta có thể thêm nó như một thực thể con của bất kỳ thực thể hiện có nào trong cảnh của chúng ta hoặc chúng ta có thể thêm nó như một thực thể cấp cao nhất mới trong bộ sưu tập các thực thể của nội dung.

00:13:41.000 --> 00:13:52.000
Và vì nó đã trở thành một thực thể thông thường, chúng ta có thể đặt vị trí của nó để nó hiển thị ở nơi chúng ta muốn trong 3D và chúng ta cũng có thể thêm bất kỳ thành phần nào chúng ta muốn.

00:13:52.000 --> 00:13:57.000
Đây là cách dữ liệu chuyển từ phần này sang phần khác của RealityView.

00:13:57.000 --> 00:14:01.000
Hãy xem xét ba tham số cho trình khởi tạo RealityView này.

00:14:01.000 --> 00:14:13.000
Đầu tiên là tạo, đó là nơi bạn tải cảnh thiết lập ban đầu của mình từ gói Reality Composer Pro như một thực thể và sau đó thêm nó vào cảnh RealityKit.

00:14:13.000 --> 00:14:19.000
Thứ hai là cập nhật, đó là một đóng sẽ được gọi khi có những thay đổi đối với trạng thái chế độ xem của bạn.

00:14:19.000 --> 00:14:29.000
Tại đây, bạn có thể thay đổi mọi thứ về các thực thể của mình, như các thuộc tính trong các thành phần của chúng, vị trí của chúng và thậm chí thêm hoặc xóa các thực thể khỏi cảnh.

00:14:29.000 --> 00:14:32.000
Việc đóng bản cập nhật này không được thực hiện trong mọi khung hình.

00:14:32.000 --> 00:14:37.000
Nó được gọi bất cứ khi nào trạng thái xem SwiftUI thay đổi.

00:14:37.000 --> 00:14:40.000
Thứ ba là tệp đính kèm ViewBuilder.

00:14:40.000 --> 00:14:46.000
Đây là nơi bạn có thể tạo chế độ xem SwiftUI để đưa vào cảnh RealityKit của mình.

00:14:46.000 --> 00:14:55.000
Chế độ xem SwiftUI của bạn bắt đầu trong tệp đính kèm ViewBuilder, sau đó chúng được gửi đến bạn trong phần đóng cập nhật trong tham số tệp đính kèm.

00:14:55.000 --> 00:15:04.000
Ở đây, bạn hỏi tham số tệp đính kèm xem nó có một thực thể cho bạn bằng cách sử dụng cùng một thẻ bạn đã đưa cho nút của mình trong ViewBuilder tệp đính kèm hay không.

00:15:04.000 --> 00:15:09.000
Nếu có, nó sẽ giúp bạn trở thành một thực thể RealityKit.

00:15:09.000 --> 00:15:19.000
Khi đóng bản cập nhật của bạn, bạn đặt vị trí 3D của nó và thêm nó vào cảnh RealityKit của bạn để bạn có thể thấy nó trôi nổi trong không gian bất cứ nơi nào bạn muốn.

00:15:19.000 --> 00:15:24.000
Ở đây, tôi đã thêm thực thể nút của mình như một thực thể con của một thực thể hình cầu.

00:15:24.000 --> 00:15:28.000
Tôi đã đặt nó cao hơn cha mẹ của nó 0,2 mét.

00:15:28.000 --> 00:15:32.000
Đóng cửa thực hiện cũng có một tham số tệp đính kèm.

00:15:32.000 --> 00:15:41.000
Cái này là để thêm bất kỳ tệp đính kèm nào mà bạn đã sẵn sàng sử dụng vào thời điểm chế độ xem này được đánh giá lần đầu tiên, bởi vì việc đóng cửa thực hiện chỉ được chạy một lần.

00:15:41.000 --> 00:15:48.000
Bây giờ chúng ta đã hiểu quy trình chung của RealityView, hãy đi sâu hơn vào việc đóng bản cập nhật.

00:15:48.000 --> 00:15:54.000
Tham số cho việc đóng cửa thực hiện và cập nhật của bạn là RealityKitContent.

00:15:54.000 --> 00:16:00.000
Khi bạn thêm một thực thể vào nội dung RealityKit của mình, nó sẽ trở thành một thực thể cấp cao nhất trong cảnh của bạn.

00:16:00.000 --> 00:16:08.000
Tương tự như vậy, từ chức năng cập nhật của bạn, việc thêm một thực thể vào nội dung của bạn sẽ cung cấp cho bạn một thực thể cấp cao nhất mới trong cảnh của bạn.

00:16:08.000 --> 00:16:14.000
Mặc dù đóng cửa thực hiện sẽ chỉ được gọi một lần, nhưng đóng cửa cập nhật sẽ được gọi nhiều lần.

00:16:14.000 --> 00:16:25.000
Nếu bạn tạo một thực thể mới trong bản cập nhật đóng cửa của mình và thêm nó vào nội dung của bạn ở đó, bạn sẽ nhận được các bản sao của thực thể đó, có thể không phải là những gì bạn muốn.

00:16:25.000 --> 00:16:32.000
Để bảo vệ chống lại điều đó, bạn chỉ nên thêm các thực thể vào nội dung của mình được tạo ở đâu đó chỉ chạy một lần.

00:16:32.000 --> 00:16:37.000
Bạn không cần phải kiểm tra xem content.entities đã chứa thực thể của bạn chưa.

00:16:37.000 --> 00:16:42.000
Đó là một no-op nếu bạn gọi add với cùng một thực thể hai lần, giống như một tập hợp.

00:16:42.000 --> 00:16:49.000
Nó giống nhau khi bạn nuôi một thực thể cho một thực thể hiện có trong cảnh của bạn - nó sẽ không được thêm hai lần.

00:16:49.000 --> 00:16:58.000
Các thực thể tệp đính kèm không do bạn tạo ra; chúng được tạo bởi RealityView cho mỗi chế độ xem tệp đính kèm mà bạn cung cấp trong tệp đính kèm ViewBuilder của mình.

00:16:58.000 --> 00:17:05.000
Điều đó có nghĩa là an toàn khi thêm chúng vào nội dung khi đóng bản cập nhật của bạn mà không cần kiểm tra xem nó đã ở đó chưa.

00:17:05.000 --> 00:17:13.000
Vì vậy, đó là cách chúng tôi viết mã tệp đính kèm của mình nếu chúng tôi muốn mã hóa cứng các điểm quan tâm của mình trong tệp đính kèm ViewBuilder.

00:17:13.000 --> 00:17:20.000
Nhưng vì chúng tôi muốn để dữ liệu trong dự án Reality Composer Pro của chúng tôi thúc đẩy trải nghiệm, hãy làm cho nó linh hoạt hơn.

00:17:20.000 --> 00:17:31.000
Bằng cách đó, một nhà thiết kế hoặc nhà sản xuất có thể tạo ra các điểm quan tâm trong dự án Reality Composer Pro và mã của chúng tôi có thể chứa bất kỳ dữ liệu nào họ thêm vào.

00:17:31.000 --> 00:17:38.000
Để làm cho nó dựa trên dữ liệu, chúng tôi cần mã của mình để đọc dữ liệu mà chúng tôi đã thiết lập trong cảnh Reality Composer Pro của mình.

00:17:38.000 --> 00:17:42.000
Chúng tôi sẽ tạo các chế độ xem tệp đính kèm của mình một cách linh hoạt.

00:17:42.000 --> 00:17:46.000
Cấp độ cao, đây là những gì chúng ta sẽ làm.

00:17:46.000 --> 00:17:56.000
Trong Reality Composer Pro, chúng tôi đã thiết lập thực thể giữ chỗ của mình cho Ribbon Beach và chúng tôi sẽ làm điều tương tự cho các điểm quan tâm khác mà chúng tôi muốn làm nổi bật trong diorama của mình.

00:17:56.000 --> 00:18:02.000
Chúng tôi sẽ điền tất cả thông tin mà mỗi người cần, như tên của họ và bản đồ mà họ thuộc về.

00:18:02.000 --> 00:18:09.000
Bây giờ, trong mã, chúng tôi sẽ truy vấn các thực thể đó và tạo một nút SwiftUI mới cho mỗi thực thể.

00:18:09.000 --> 00:18:20.000
Để SwiftUI gọi các tệp đính kèm ViewBuilder của chúng tôi mỗi khi chúng tôi thêm một nút mới vào bộ sưu tập của mình, chúng tôi sẽ thêm trình bao bọc thuộc tính @State vào bộ sưu tập này.

00:18:20.000 --> 00:18:24.000
Chúng tôi sẽ phục vụ các nút đó cho đến các tệp đính kèm ViewBuilder.

00:18:24.000 --> 00:18:33.000
Sau đó, cuối cùng, trong phần đóng cập nhật của RealityView của chúng tôi, chúng tôi sẽ nhận được các nút của mình dưới dạng thực thể và thêm các thực thể nút mới đó vào cảnh.

00:18:33.000 --> 00:18:39.000
Chúng tôi sẽ thêm từng cái làm con của các thực thể đánh dấu mà chúng tôi đã thiết lập trong Reality Composer Pro.

00:18:39.000 --> 00:18:46.000
Hãy hiểu sáu bước này thông qua một sơ đồ chi tiết hơn, và sau đó chúng ta sẽ xem xét mã.

00:18:46.000 --> 00:18:51.000
Đầu tiên, chúng tôi thêm các thực thể vô hình vào cảnh Reality Composer Pro của chúng tôi.

00:18:51.000 --> 00:18:58.000
Chúng tôi định vị các thực thể vô hình của mình ở nơi chúng tôi muốn các nút của mình hiển thị, trên các trục x-, y- và z.

00:18:58.000 --> 00:19:04.000
Chúng tôi đang sử dụng Thành phần Chuyển đổi ở đây, mà tất cả các thực thể đều có theo mặc định.

00:19:04.000 --> 00:19:09.000
Sau đó, chúng tôi thêm PointOfInterestComponent của mình vào mỗi thành phần.

00:19:09.000 --> 00:19:17.000
Trong mã của chúng tôi, chúng tôi nhận được các tham chiếu đến các thực thể này bằng cách truy vấn tất cả các thực thể trong cảnh có PointOfInterestComponent trên chúng.

00:19:17.000 --> 00:19:24.000
Truy vấn trả về ba thực thể vô hình mà chúng tôi đã thiết lập trong Reality Composer Pro.

00:19:24.000 --> 00:19:30.000
Chúng tôi tạo một chế độ xem SwiftUI mới cho mỗi cái và lưu trữ chúng trong một bộ sưu tập.

00:19:30.000 --> 00:19:36.000
Để đưa các nút của chúng tôi vào RealityView, chúng tôi sẽ sử dụng luồng cập nhật chế độ xem SwiftUI.

00:19:36.000 --> 00:19:43.000
Điều này có nghĩa là thêm trình bao bọc thuộc tính @State vào bộ sưu tập các nút trong Chế độ xem của chúng tôi.

00:19:43.000 --> 00:19:53.000
Trình bao bọc thuộc tính @State nói với SwiftUI rằng khi chúng tôi thêm các mục vào bộ sưu tập này, SwiftUI sẽ kích hoạt cập nhật chế độ xem trên ImmersiveView của chúng tôi.

00:19:53.000 --> 00:20:00.000
Điều đó sẽ khiến SwiftUI đánh giá các tệp đính kèm ViewBuilder của chúng tôi và đóng lại bản cập nhật của chúng tôi.

00:20:00.000 --> 00:20:09.000
Tệp đính kèm của RealityView ViewBuilder là nơi chúng tôi sẽ tuyên bố với SwiftUI rằng chúng tôi muốn các nút này được tạo thành các thực thể.

00:20:09.000 --> 00:20:16.000
Việc đóng bản cập nhật RealityView của chúng tôi sẽ được gọi tiếp theo và các nút của chúng tôi sẽ được gửi cho chúng tôi dưới dạng các thực thể.

00:20:16.000 --> 00:20:18.000
Bây giờ họ không còn là Lượt xem SwiftUI nữa.

00:20:18.000 --> 00:20:22.000
Đó là lý do tại sao chúng ta có thể thêm chúng vào hệ thống phân cấp thực thể của chúng ta.

00:20:22.000 --> 00:20:30.000
Trong phần đóng bản cập nhật, chúng tôi thêm các thực thể đính kèm của mình vào cảnh, được đặt nổi phía trên mỗi thực thể vô hình của chúng tôi.

00:20:30.000 --> 00:20:35.000
Bây giờ chúng sẽ xuất hiện trực quan khi chúng ta nhìn vào cảnh diorama của mình.

00:20:35.000 --> 00:20:38.000
Hãy xem từng bước này được thực hiện như thế nào.

00:20:38.000 --> 00:20:43.000
Đầu tiên, chúng tôi đánh dấu các thực thể vô hình của mình trong cảnh Reality Composer Pro của chúng tôi.

00:20:43.000 --> 00:20:48.000
Để tìm các thực thể mà chúng tôi đã đánh dấu, chúng tôi sẽ tạo một EntityQuery.

00:20:48.000 --> 00:20:53.000
Chúng tôi sẽ sử dụng nó để yêu cầu tất cả các thực thể có PointOfInterestComponent trên đó.

00:20:53.000 --> 00:21:03.000
Sau đó, chúng tôi sẽ lặp lại qua QueryResult của mình và tạo Chế độ xem SwiftUI mới cho mỗi thực thể trong cảnh của chúng tôi có PointOfInterestComponent trên đó.

00:21:03.000 --> 00:21:10.000
Chúng tôi sẽ điền nó với thông tin chúng tôi lấy từ thành phần, dữ liệu chúng tôi đã nhập vào Reality Composer Pro.

00:21:10.000 --> 00:21:15.000
Chế độ xem đó sẽ là một trong những tệp đính kèm của chúng tôi, vì vậy chúng tôi đã gắn một thẻ lên đó.

00:21:15.000 --> 00:21:23.000
Trong trường hợp này, chúng tôi đang trở nên nghiêm túc, vì vậy chúng tôi sẽ sử dụng ObjectIdentifier thay vì biểu tượng cảm xúc cá.

00:21:23.000 --> 00:21:26.000
Đây là phần mà chúng tôi tạo ra bộ sưu tập Lượt xem SwiftUI của mình.

00:21:26.000 --> 00:21:34.000
Chúng tôi sẽ gọi nó là attachmentsProvider vì nó sẽ cung cấp tệp đính kèm của chúng tôi cho tệp đính kèm của RealityView ViewBuilder.

00:21:34.000 --> 00:21:37.000
Sau đó chúng tôi sẽ lưu trữ chế độ xem của mình trong tệp đính kèm Nhà cung cấp.

00:21:37.000 --> 00:21:40.000
Hãy cùng xem loại bộ sưu tập đó.

00:21:40.000 --> 00:21:45.000
Nhà cung cấp tệp đính kèm có một từ điển các thẻ tệp đính kèm để xem.

00:21:45.000 --> 00:21:52.000
Chúng tôi đã xóa chế độ xem của mình để chúng tôi có thể đặt các loại chế độ xem khác vào đó ngoài LearnMoreView của chúng tôi.

00:21:52.000 --> 00:22:03.000
Chúng tôi có một thuộc tính được tính toán được gọi là sortedTagViewPairs trả về một mảng các bộ - thẻ và chế độ xem tương ứng của chúng - theo cùng một thứ tự mọi lúc.

00:22:03.000 --> 00:22:10.000
Sau đó, trong các tệp đính kèm ViewBuilder, chúng tôi sẽ ForEach trên bộ sưu tập tệp đính kèm mà chúng tôi đã tạo.

00:22:10.000 --> 00:22:19.000
Điều này cho SwiftUI biết rằng chúng tôi muốn có một chế độ xem cho mỗi cặp mà chúng tôi đã cung cấp và chúng tôi cung cấp chế độ xem của mình từ bộ sưu tập của mình.

00:22:19.000 --> 00:22:31.000
Chúng tôi đang để ObjectIdentifier thực hiện nhiệm vụ kép ở đây vừa là thẻ đính kèm cho chế độ xem vừa là định danh cho cấu trúc ForEach.

00:22:31.000 --> 00:22:37.000
Vậy, tại sao chúng ta không thêm một thuộc tính thẻ vào PointOfInterestComponent của mình?

00:22:37.000 --> 00:22:45.000
Các thẻ tệp đính kèm cần phải là duy nhất, cho cả cấu trúc ForEach và cơ chế tệp đính kèm hoạt động.

00:22:45.000 --> 00:22:58.000
Và vì tất cả các thuộc tính trong thành phần tùy chỉnh của chúng tôi sẽ được hiển thị trong Bảng điều khiển thanh tra của Reality Composer Pro khi bạn thêm thành phần vào một thực thể, điều đó có nghĩa là tệp đính kèm cũng sẽ hiển thị ở đó.

00:22:58.000 --> 00:23:06.000
Chúng tôi không muốn tạo gánh nặng cho bản thân khi phải nhớ hủy bỏ tất cả các thẻ khi chúng tôi thêm từng điểm quan tâm vào Reality Composer Pro.

00:23:06.000 --> 00:23:15.000
Nhưng, thuận tiện cho chúng tôi, các thực thể phù hợp với giao thức Nhận dạng, vì vậy chúng có các số nhận dạng tự động là duy nhất.

00:23:15.000 --> 00:23:25.000
Chúng tôi có thể nhận được mã định danh này trong thời gian chạy từ thực thể mà không cần phải biết trước khi chúng tôi thiết kế cảnh của mình trong Reality Composer Pro.

00:23:25.000 --> 00:23:36.000
Để thuộc tính attachmentTag không hiển thị trong Reality Composer Pro, chúng tôi sử dụng một kỹ thuật mà tôi gọi là "thời gian thiết kế so với các thành phần thời gian chạy."

00:23:36.000 --> 00:23:51.000
Chúng tôi sẽ tách dữ liệu của mình thành hai thành phần khác nhau, một cho dữ liệu thời gian thiết kế mà chúng tôi muốn sắp xếp trong Reality Composer Pro và một cho dữ liệu thời gian chạy mà chúng tôi sẽ gắn vào các thực thể tương tự động trong thời gian chạy.

00:23:51.000 --> 00:23:58.000
Điều này dành cho các thuộc tính mà chúng tôi không muốn hiển thị trong Bảng điều khiển Thanh tra của mình trong Reality Composer Pro.

00:23:58.000 --> 00:24:06.000
Vì vậy, chúng tôi sẽ xác định một thành phần mới, PointOfInterestRuntimeComponent và di chuyển thẻ đính kèm của chúng tôi vào bên trong nó.

00:24:06.000 --> 00:24:13.000
Reality Composer Pro tự động xây dựng giao diện người dùng thành phần cho bạn dựa trên những gì nó đọc trong gói Swift của bạn.

00:24:13.000 --> 00:24:22.000
Nó kiểm tra mã Swift trong gói của bạn và làm cho bất kỳ thành phần có thể mã hóa nào mà nó tìm thấy có sẵn để bạn sử dụng trong các cảnh của mình.

00:24:22.000 --> 00:24:24.000
Ở đây chúng tôi đang hiển thị bốn thành phần.

00:24:24.000 --> 00:24:37.000
Các thành phần A và B nằm trong dự án Xcode của chúng tôi, nhưng chúng không nằm trong gói Reality Composer Pro, vì vậy chúng sẽ không có sẵn để bạn đính kèm vào các thực thể của mình trong Reality Composer Pro.

00:24:37.000 --> 00:24:45.000
Thành phần C nằm bên trong gói nhưng nó không thể mã hóa được, vì vậy Reality Composer Pro sẽ bỏ qua nó.

00:24:45.000 --> 00:24:56.000
Trong số bốn thành phần được hiển thị ở đây, chỉ có Thành phần D sẽ được hiển thị trong danh sách trong Reality Composer Pro vì nó nằm trong gói Swift và nó là một thành phần có thể mã hóa.

00:24:56.000 --> 00:25:03.000
Đó là thành phần thời gian thiết kế của chúng tôi, trong khi tất cả những thành phần khác có thể được sử dụng làm thành phần thời gian chạy.

00:25:03.000 --> 00:25:13.000
Các thành phần thời gian thiết kế dành cho việc chứa dữ liệu đơn giản hơn, chẳng hạn như ints, chuỗi và giá trị SIMD, những thứ mà các nghệ sĩ và nhà thiết kế 3D sẽ sử dụng.

00:25:13.000 --> 00:25:23.000
Bạn sẽ thấy lỗi trong dự án Xcode của mình nếu bạn thêm một thuộc tính vào thành phần tùy chỉnh thuộc loại mà Reality Composer Pro sẽ không tuần tự hóa.

00:25:23.000 --> 00:25:26.000
Bây giờ, hãy quay lại mã của chúng tôi.

00:25:26.000 --> 00:25:39.000
Trước tiên, chúng tôi sẽ thêm thành phần thời gian chạy PointOfInterest vào thực thể của mình và sau đó sử dụng thành phần thời gian chạy để giúp chúng tôi kết hợp các thực thể đính kèm với các điểm quan tâm tương ứng của chúng trên diorama.

00:25:39.000 --> 00:25:42.000
Đây là nơi thành phần thời gian chạy của chúng tôi xuất hiện.

00:25:42.000 --> 00:25:48.000
Chúng tôi đang ở phần mà chúng tôi đang đọc trong các thực thể PointOfInterest của mình và tạo các chế độ xem tệp đính kèm của chúng tôi.

00:25:48.000 --> 00:25:55.000
Chúng tôi đã truy vấn tất cả các thành phần thời gian thiết kế của mình và bây giờ chúng tôi sẽ tạo một thành phần thời gian chạy tương ứng mới cho mỗi thành phần.

00:25:55.000 --> 00:26:02.000
Chúng tôi lưu trữ tệp đính kèm của mình trong thành phần thời gian chạy và chúng tôi lưu trữ thành phần thời gian chạy của mình trên cùng một thực thể đó.

00:26:02.000 --> 00:26:06.000
Theo cách này, thành phần thời gian thiết kế giống như một ký hiệu.

00:26:06.000 --> 00:26:10.000
Nó nói với ứng dụng của chúng tôi rằng nó muốn một tệp đính kèm được tạo cho nó.

00:26:10.000 --> 00:26:20.000
Thành phần thời gian chạy xử lý bất kỳ loại dữ liệu nào khác mà chúng tôi cần trong quá trình thực thi ứng dụng, nhưng không muốn lưu trữ trong thành phần thời gian thiết kế.

00:26:20.000 --> 00:26:26.000
Trong RealityView của chúng tôi, chúng tôi có thêm một bước nữa trước khi chúng tôi thấy các thực thể đính kèm của chúng tôi hiển thị trong cảnh của chúng tôi.

00:26:26.000 --> 00:26:38.000
Khi chúng tôi đã cung cấp Chế độ xem SwiftUI của mình trong tệp đính kèm ViewBuilder, SwiftUI sẽ gọi đóng bản cập nhật RealityView của chúng tôi và cung cấp cho chúng tôi tệp đính kèm của chúng tôi dưới dạng thực thể RealityKit.

00:26:38.000 --> 00:26:47.000
Nhưng nếu chúng ta chỉ thêm chúng vào nội dung mà không định vị chúng, tất cả chúng sẽ hiển thị ngồi ở gốc của cảnh, vị trí 0, 0, 0.

00:26:47.000 --> 00:26:49.000
Đó không phải là nơi chúng tôi muốn họ.

00:26:49.000 --> 00:26:53.000
Chúng tôi muốn chúng lơ lửng trên mỗi điểm quan tâm trên địa hình.

00:26:53.000 --> 00:27:01.000
Chúng ta cần kết hợp các thực thể đính kèm của mình với các thực thể điểm quan tâm vô hình mà chúng ta đã thiết lập trong Reality Composer Pro.

00:27:01.000 --> 00:27:06.000
Thành phần thời gian chạy mà chúng tôi đưa vào thực thể vô hình có thẻ của chúng tôi trong đó.

00:27:06.000 --> 00:27:12.000
Đó là cách chúng tôi sẽ kết hợp tệp đính kèm nào Thực thể đi kèm với từng thực thể quan tâm.

00:27:12.000 --> 00:27:30.000
Chúng tôi truy vấn tất cả các PointOf InterestRuntimeComponents của mình, chúng tôi nhận được thành phần thời gian chạy đó từ mỗi thực thể được trả về bởi truy vấn, sau đó chúng tôi sử dụng thuộc tính attachmentTag của thành phần để lấy tệp đính kèm của chúng tôi từ tham số tệp đính kèm đến đóng bản cập nhật.

00:27:30.000 --> 00:27:37.000
Bây giờ chúng tôi thêm tệp đính kèm của mình vào nội dung và đặt nó cao hơn nửa mét so với thực thể quan tâm.

00:27:37.000 --> 00:27:42.000
Hãy chạy lại ứng dụng của chúng tôi và xem những thứ này trông như thế nào.

00:27:42.000 --> 00:27:44.000
Này, chúng trông thật tuyệt!

00:27:44.000 --> 00:27:50.000
Chúng ta có thể thấy mỗi tên địa điểm trôi nổi phía trên vị trí mà chúng ta đặt chúng trong dự án Reality Composer Pro của chúng ta.

00:27:50.000 --> 00:27:56.000
Tiếp theo, hãy tìm hiểu cách chúng tôi phát âm thanh mà chúng tôi đã thiết lập trong Reality Composer Pro.

00:27:56.000 --> 00:28:09.000
Để thiết lập thứ gì đó phát âm thanh trong Reality Composer Pro, bạn có thể đưa vào một thực thể âm thanh bằng cách nhấp vào nút dấu cộng, chọn Âm thanh và sau đó chọn Âm thanh xung quanh.

00:28:09.000 --> 00:28:15.000
Điều này tạo ra một thực thể vô hình thông thường với AmbientAudioComponent trên đó.

00:28:15.000 --> 00:28:22.000
Hãy đặt tên cho thực thể OceanEmitter của chúng tôi vì chúng tôi sẽ sử dụng nó để phát âm thanh đại dương cho Đảo Catalina.

00:28:22.000 --> 00:28:25.000
Bạn cũng cần thêm một tệp âm thanh vào cảnh của mình.

00:28:25.000 --> 00:28:35.000
Hãy mang âm thanh đại dương của chúng ta vào.

00:28:35.000 --> 00:28:48.000
Bạn có thể xem trước thành phần âm thanh của mình bằng cách chọn âm thanh trong menu Xem trước của thành phần trong Bảng kiểm tra, nhưng điều này sẽ không tự động phát âm thanh đã chọn khi thực thể được tải trong ứng dụng của bạn.

00:28:48.000 --> 00:28:55.000
Để làm được điều đó, chúng ta cần tải tài nguyên âm thanh và bảo nó phát.

00:28:55.000 --> 00:29:00.000
Để phát âm thanh này, chúng tôi sẽ nhận được tham chiếu đến thực thể mà chúng tôi đặt thành phần âm thanh vào.

00:29:00.000 --> 00:29:05.000
Chúng tôi đã đặt tên cho thực thể của mình là OceanEmitter, vì vậy chúng tôi sẽ tìm thấy thực thể của mình bằng tên đó.

00:29:05.000 --> 00:29:15.000
Chúng tôi tải tệp âm thanh bằng cách sử dụng trình khởi tạo AudioFileResource, chuyển cho nó đường dẫn đầy đủ đến tài nguyên tệp âm thanh chính trong cảnh của chúng tôi.

00:29:15.000 --> 00:29:20.000
Chúng tôi đặt tên cho nó tên của tệp .usda có chứa nó trong dự án Reality Composer Pro của chúng tôi.

00:29:20.000 --> 00:29:27.000
Trong trường hợp của chúng tôi, đó là cảnh chính của chúng tôi có tên DioramaAssembled.usda.

00:29:27.000 --> 00:29:35.000
Chúng tôi tạo một audioPlaybackController bằng cách gọi entity.prepareAudio để chúng tôi có thể phát, tạm dừng và dừng âm thanh này.

00:29:35.000 --> 00:29:38.000
Bây giờ chúng tôi đã sẵn sàng để gọi chơi trên nó.

00:29:38.000 --> 00:29:41.000
Đây là âm thanh đại dương đang phát trong ứng dụng của chúng tôi.

00:29:41.000 --> 00:29:56.000
Thanh trượt trong ứng dụng của chúng tôi biến hình giữa hai bản đồ địa hình khác nhau của chúng tôi, Yosemite và Đảo Catalina.

00:29:56.000 --> 00:30:04.000
Bây giờ chúng tôi đã giới thiệu âm thanh vào cảnh của mình, chúng tôi sẽ chuyển đổi giữa hai nguồn âm thanh.

00:30:04.000 --> 00:30:09.000
Chúng tôi thêm một bộ phát âm thanh rừng giống như cách chúng tôi đã thêm thực thể phát đại dương của mình.

00:30:09.000 --> 00:30:17.000
Chúng ta hãy xem cách chúng ta biến đổi địa hình của mình bằng cách sử dụng thanh trượt và chúng ta cũng sẽ bao gồm âm thanh trong quá trình chuyển đổi này.

00:30:17.000 --> 00:30:22.000
Chúng tôi sẽ sử dụng một thuộc tính từ vật liệu Shader Graph của chúng tôi để biến hình giữa hai địa hình.

00:30:22.000 --> 00:30:25.000
Hãy xem chúng ta làm điều đó như thế nào.

00:30:25.000 --> 00:30:33.000
Trong phiên của Niels, anh ấy đã tạo ra công cụ sửa đổi hình học tuyệt đẹp này cho chúng tôi bằng cách sử dụng Biểu đồ Shader của Reality Composer Pro.

00:30:33.000 --> 00:30:38.000
Bây giờ chúng ta có thể kết nối nó với cảnh của chúng ta và điều khiển một số thông số trong thời gian chạy.

00:30:38.000 --> 00:30:42.000
Chúng tôi muốn kết nối vật liệu Shader Graph này với một thanh trượt.

00:30:42.000 --> 00:30:45.000
Để làm điều đó, chúng ta cần thúc đẩy một nút đầu vào.

00:30:45.000 --> 00:30:49.000
Lệnh-nhấp vào nút và chọn Quảng cáo.

00:30:49.000 --> 00:30:55.000
Điều này cho dự án biết rằng chúng tôi dự định cung cấp dữ liệu trong thời gian chạy cho phần này của tài liệu.

00:30:55.000 --> 00:31:02.000
Chúng tôi sẽ đặt tên cho nút được thăng chức này là Tiến trình, vì vậy chúng tôi có thể giải quyết nó bằng tên đó trong thời gian chạy.

00:31:02.000 --> 00:31:06.000
Bây giờ chúng ta có thể tự động thay đổi giá trị này trong mã.

00:31:06.000 --> 00:31:10.000
Chúng tôi nhận được một tham chiếu đến thực thể mà tài liệu của chúng tôi đang sử dụng.

00:31:10.000 --> 00:31:16.000
Sau đó, chúng tôi nhận được ModelComponent của nó, đó là thành phần RealityKit chứa vật liệu.

00:31:16.000 --> 00:31:20.000
Từ ModelComponent, chúng tôi nhận được tài liệu đầu tiên của nó.

00:31:20.000 --> 00:31:22.000
Chỉ có một trên thực thể cụ thể này.

00:31:22.000 --> 00:31:26.000
Chúng tôi đúc nó để gõ ShaderGraphMaterial.

00:31:26.000 --> 00:31:31.000
Bây giờ, chúng ta có thể đặt một giá trị mới cho tham số của mình với tên Progress.

00:31:31.000 --> 00:31:39.000
Cuối cùng, chúng tôi lưu trữ vật liệu trở lại ModelComponent và ModelComponent trở lại thực thể địa hình.

00:31:39.000 --> 00:31:43.000
Bây giờ chúng ta sẽ kết nối nó với thanh trượt SwiftUI của chúng ta.

00:31:43.000 --> 00:31:52.000
Bất cứ khi nào giá trị của thanh trượt thay đổi, chúng tôi sẽ lấy giá trị đó, nằm trong phạm vi từ 0 đến 1 và đưa nó vào ShaderGraphMaterial của chúng tôi.

00:31:52.000 --> 00:31:59.000
Tiếp theo, hãy đi qua giữa các bản âm thanh xung quanh cho hai địa hình của chúng ta.

00:31:59.000 --> 00:32:11.000
Bởi vì chúng tôi cũng đã đặt AmbientAudioComponent trên hai thực thể âm thanh của mình, đại dương và rừng, chúng tôi có thể điều chỉnh âm thanh phát to bằng cách sử dụng thuộc tính khuếch đại trên chúng.

00:32:11.000 --> 00:32:19.000
Chúng tôi sẽ truy vấn tất cả các thực thể - cả hai tại thời điểm này, đại dương và rừng của chúng tôi - có AmbientAudioComponent trên đó.

00:32:19.000 --> 00:32:28.000
Thêm vào đó, chúng tôi đã thêm một thành phần tùy chỉnh khác được gọi là RegionSpecificComponent để chúng tôi có thể đánh dấu các thực thể đi kèm với khu vực này hay khu vực khác.

00:32:28.000 --> 00:32:36.000
Chúng tôi nhận được một bản sao có thể thay đổi của audioComponent vì chúng tôi sẽ thay đổi nó và lưu trữ nó trở lại thực thể của chúng tôi.

00:32:36.000 --> 00:32:42.000
Chúng tôi gọi một hàm tính toán mức tăng nên được cung cấp cho một vùng và một Giá trị thanh trượt.

00:32:42.000 --> 00:32:50.000
Chúng tôi đặt giá trị tăng lên AmbientAudioComponent, và sau đó chúng tôi lưu trữ lại thành phần vào thực thể.

00:32:50.000 --> 00:32:52.000
Hãy xem điều đó trong hành động.

00:32:52.000 --> 00:33:08.000
Tuyệt vời!

00:33:08.000 --> 00:33:18.000
Khi chúng ta di chuyển thanh trượt, chúng ta có thể thấy vật liệu Shader Graph của chúng ta thay đổi hình dạng của bản đồ địa hình và chúng ta có thể nghe thấy âm thanh rừng mờ dần và âm thanh đại dương phát ra.

00:33:18.000 --> 00:33:28.000
Hôm nay chúng tôi đã đề cập rất nhiều thông tin.

00:33:28.000 --> 00:33:29.000
Hãy tóm tắt lại.

00:33:29.000 --> 00:33:35.000
Chúng tôi đã học cách tải nội dung Reality Composer Pro vào ứng dụng của chúng tôi trong Xcode.

00:33:35.000 --> 00:33:40.000
Chúng tôi đã xem xét cách tạo các thành phần tùy chỉnh của riêng bạn trong Reality Composer Pro.

00:33:40.000 --> 00:33:46.000
Chúng tôi đã khám phá cách thức hoạt động của SwiftUI Attachments API và cách chúng được gửi đến chúng tôi với tư cách là các thực thể.

00:33:46.000 --> 00:33:50.000
Chúng tôi đã thấy cách thiết lập âm thanh và sau đó phát âm thanh đó trong mã.

00:33:50.000 --> 00:33:57.000
Và cuối cùng, chúng tôi đã thấy cách lấy một tài sản vật chất được quảng bá và đẩy nó ra khỏi mã.

00:33:57.000 --> 00:34:01.000
Những quy trình làm việc này sẽ giúp bạn đưa trải nghiệm không gian của mình vào cuộc sống.

00:34:01.000 --> 00:34:06.000
Tôi mong được thấy tất cả những điều tuyệt vời mà bạn sẽ xây dựng trên nền tảng mới của chúng tôi.

00:34:06.000 --> 00:34:07.000
Cảm ơn bạn.

00:34:07.000 --> 23:59:59.000
♪

