WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
Zoe: Xin chào, tôi là Zoe, một kỹ sư trong nhóm Trình biên dịch tại Apple.

00:00:14.000 --> 00:00:25.000
Hôm nay, tôi sẽ giới thiệu khả năng tương tác Swift và C++, một tính năng mới của Xcode 15 cho phép bạn sử dụng Swift và C++ cùng nhau.

00:00:25.000 --> 00:00:28.000
Bài nói chuyện này sẽ được chia thành hai phần.

00:00:28.000 --> 00:00:32.000
Đầu tiên, tôi sẽ giải thích những điều cơ bản về khả năng tương tác.

00:00:32.000 --> 00:00:40.000
Sau đó, tôi sẽ chỉ cho bạn cách bạn có thể làm cho API C++ của mình cảm thấy tự nhiên và an toàn trong Swift.

00:00:40.000 --> 00:00:46.000
Swift đã ra mắt vào một thế giới nơi có nhiều ứng dụng và cơ sở mã lớn được viết bằng Objective-C.

00:00:46.000 --> 00:00:54.000
Điều cần thiết là Swift có thể tận dụng mã hiện có này và được áp dụng dần dần vào các cơ sở mã này.

00:00:54.000 --> 00:01:03.000
Ngày nay, Swift đưa khả năng tương tác này lên một tầm cao mới, cho phép bạn áp dụng Swift ở nhiều nơi hơn nữa.

00:01:03.000 --> 00:01:12.000
Nếu bạn có một cơ sở mã C++ lớn, bây giờ bạn có thể áp dụng Swift từng bước bằng cách tận dụng khả năng tương tác hai chiều.

00:01:12.000 --> 00:01:20.000
Và nếu bạn cần quyền truy cập vào thư viện C++ cho ứng dụng của mình, bạn không còn phải viết lớp cầu nối Objective-C nữa.

00:01:20.000 --> 00:01:28.000
Hãy xem việc áp dụng Swift trong cơ sở mã C++ dễ dàng như thế nào bằng cách xem một ứng dụng mẫu.

00:01:28.000 --> 00:01:30.000
Tôi đang làm việc trên một ứng dụng chỉnh sửa ảnh.

00:01:30.000 --> 00:01:38.000
Nó cho phép tôi chọn một bức ảnh từ thư viện ảnh của mình, đảo ngược màu sắc, thay đổi độ sáng, v.v.

00:01:38.000 --> 00:01:42.000
Trước khi tôi vào mã, hãy xem cấu trúc ứng dụng của tôi.

00:01:42.000 --> 00:01:48.000
Ứng dụng có thể được chia thành hai phần, khung xử lý hình ảnh và mã giao diện người dùng.

00:01:48.000 --> 00:01:54.000
Khung xử lý hình ảnh mà ứng dụng của tôi dựa trên được viết bằng C++.

00:01:54.000 --> 00:02:07.000
Tôi muốn lớp giao diện người dùng của mình có thể dễ dàng nói chuyện với khung C++ của mình, vì vậy tôi đã sử dụng Objective-C++ để triển khai hầu hết giao diện người dùng, chẳng hạn như ViewController.

00:02:07.000 --> 00:02:13.000
Bây giờ, tôi muốn người dùng ứng dụng của mình có thể chọn một vài bức ảnh từ thư viện ảnh của họ để chỉnh sửa.

00:02:13.000 --> 00:02:21.000
Tôi nghe nói SwiftUI có chế độ xem PhotoPicker mới giúp việc này trở nên dễ dàng, vì vậy tôi muốn bắt đầu áp dụng Swift trong ứng dụng của mình.

00:02:21.000 --> 00:02:31.000
May mắn thay, bắt đầu với Xcode 15, tôi có thể dễ dàng áp dụng Swift trong cơ sở mã Objective-C++ của mình và vẫn có quyền truy cập vào tất cả các API C++ của mình.

00:02:31.000 --> 00:02:36.000
Vì vậy, hãy bắt đầu bằng cách thêm một tệp Swift vào dự án.

00:02:36.000 --> 00:02:47.000
Bởi vì tôi đang sử dụng khung C++, Xcode sẽ tự động nhập các API C++ của tôi, vì vậy tôi không cần tiêu đề bắc cầu.

00:02:47.000 --> 00:02:53.000
Sau đó, tôi cần bật khả năng tương tác C++ trong cài đặt xây dựng dự án của mình.

00:02:53.000 --> 00:03:02.000
Như bạn đã biết, Swift đã có thể gọi C và Objective-C APIs, vì vậy cài đặt xây dựng hiện được đặt thành C và chế độ Objective-C.

00:03:02.000 --> 00:03:07.000
Nhưng tôi có thể thay đổi cái này thành C++.

00:03:07.000 --> 00:03:16.000
Bây giờ cài đặt đọc C++ và Objective-C++, tôi có thể gọi trực tiếp các API từ khung bộ hình ảnh C++ của mình.

00:03:16.000 --> 00:03:27.000
Quay lại tệp Swift của mình, tôi có thể nhập khung giống như bất kỳ mô-đun Swift nào khác và tôi có thể ra lệnh nhấp vào tên mô-đun để xem nội dung của nó.

00:03:27.000 --> 00:03:36.000
Bây giờ, chúng có thể trông giống như Swift APIs, nhưng chúng thực sự là từ thư viện C++ ImageKit của tôi; đây chỉ là cách trình biên dịch Swift nhìn thấy chúng.

00:03:36.000 --> 00:03:41.000
Hãy xem xét một vài API mà tôi sẽ sử dụng hôm nay.

00:03:41.000 --> 00:03:47.000
Bắt đầu từ phía dưới, bạn có thể thấy một thành viên tĩnh thuộc loại CxxImageEngine.

00:03:47.000 --> 00:03:51.000
Cái này hiện đang được nhập dưới dạng một con trỏ không an toàn, nhưng chúng ta sẽ đi sâu vào vấn đề đó sau.

00:03:51.000 --> 00:03:59.000
CxxImageEngine có một vài thành viên khác, cụ thể là loadImage và getImages, mà tôi sẽ sử dụng trong thời gian ngắn.

00:03:59.000 --> 00:04:10.000
Bây giờ tôi sẽ tiếp tục và thả tất cả giao diện người dùng cho bộ chọn ảnh của mình để tôi có thể tập trung vào hai phương pháp nói chuyện với C++.

00:04:10.000 --> 00:04:18.000
Tôi có thể lấy CxxImageEngine được chia sẻ và gọi loadImage trên mỗi hình ảnh đã chọn để tải chúng vào động cơ.

00:04:18.000 --> 00:04:22.000
Chà, gọi một phương thức C++ trong Swift cực kỳ dễ dàng.

00:04:22.000 --> 00:04:29.000
Bây giờ chế độ xem SwiftUI của tôi đã hoàn tất, tôi muốn sử dụng nó trong Objective-C++ ViewController của mình.

00:04:29.000 --> 00:04:36.000
Để làm điều này, tôi cần công khai cấu trúc của mình để tôi có thể truy cập nó từ mã Objective-C++ của mình.

00:04:36.000 --> 00:04:39.000
Tuyệt vời! Tất cả mã Swift của tôi được xây dựng thành công.

00:04:39.000 --> 00:04:47.000
Bây giờ tôi có thể vào tệp ViewController và nhập tiêu đề mà Swift đã tạo.

00:04:47.000 --> 00:04:50.000
Tiêu đề này chứa tất cả các API Swift công khai của tôi.

00:04:50.000 --> 00:04:56.000
Bây giờ tôi đã nhập tiêu đề đã tạo, tôi có thể bắt đầu gọi mã Swift của mình bằng C++.

00:04:56.000 --> 00:05:00.000
Đầu tiên, tôi sẽ xây dựng chế độ xem SwiftUI.

00:05:00.000 --> 00:05:06.000
Sau đó, tôi có thể gọi phương thức hiện tại.

00:05:06.000 --> 00:05:11.000
Và Xcode giúp tôi hoàn thành mã.

00:05:11.000 --> 00:05:17.000
Hãy kiểm tra cái này trên thiết bị.

00:05:17.000 --> 00:05:27.000
Sau khi tôi xây dựng và chạy ứng dụng, bạn có thể thấy chế độ xem SwiftUI mới của chúng tôi được nhập trực tiếp vào ứng dụng Objective-C++ của tôi.

00:05:27.000 --> 00:05:31.000
Đây là một ví dụ về khả năng tương tác hai chiều thực sự.

00:05:31.000 --> 00:05:38.000
Tôi đã có thể sử dụng liền mạch các loại và chức năng C++ trong Swift và ngược lại.

00:05:38.000 --> 00:05:47.000
Trong C++, tôi đã có thể xây dựng và sử dụng chế độ xem SwiftUI, trong đó phần thân của chế độ xem được gọi lại vào khung C++ của tôi.

00:05:47.000 --> 00:05:54.000
Tất cả việc tích hợp được thực hiện tự động bởi trình biên dịch Swift, vì vậy tôi không cần phải viết một lớp bắc cầu.

00:05:54.000 --> 00:06:05.000
Và tất cả các API đều trực tiếp và gốc, vì vậy không giống như hầu hết các ngôn ngữ tương tác khác, không có chi phí khi gọi API C++ trong Swift hoặc ngược lại.

00:06:05.000 --> 00:06:15.000
Hôm nay tôi đã làm việc với một ứng dụng khá nhỏ, nhưng trình biên dịch Swift có thể hỗ trợ khả năng tương tác trong các cơ sở mã lớn và phức tạp.

00:06:15.000 --> 00:06:21.000
Swift có thể nhập hầu hết các bộ sưu tập C++, cả từ thư viện tiêu chuẩn và các nơi khác.

00:06:21.000 --> 00:06:26.000
Swift có thể xử lý các mẫu chức năng và chuyên ngành mẫu lớp học.

00:06:26.000 --> 00:06:32.000
Và nó hỗ trợ quản lý bộ nhớ bằng cách sử dụng con trỏ được chia sẻ và các loại tương tự do người dùng xác định.

00:06:32.000 --> 00:06:35.000
Swift có thể hiểu các API đã nhập này ở cấp độ cao.

00:06:35.000 --> 00:06:46.000
Ví dụ, nó biết về các hoạt động lưu giữ và phát hành con trỏ được chia sẻ và nó có thể sử dụng kiến thức cấp cao này để áp dụng một bộ tối ưu hóa mạnh mẽ.

00:06:46.000 --> 00:06:55.000
Theo hướng khác, bạn có thể hiển thị hầu hết các API Swift cho C++, chẳng hạn như cấu trúc, lớp, phương thức của chúng và các thành viên khác.

00:06:55.000 --> 00:07:02.000
Bạn thậm chí có thể hiển thị các loại chung như Mảng và các loại đàn hồi phát triển theo thời gian.

00:07:02.000 --> 00:07:14.000
Và khả năng tương tác C++ được hỗ trợ đầy đủ bởi Xcode, vì vậy bạn sẽ nhận được hỗ trợ hoàn thành mã, chuyển sang định nghĩa và trình gỡ lỗi trên cả hai ngôn ngữ.

00:07:14.000 --> 00:07:18.000
Đây chỉ là một vài trong số các API được hỗ trợ bởi khả năng tương tác C++.

00:07:18.000 --> 00:07:32.000
Trình biên dịch Swift hỗ trợ khả năng tương tác giữa các cơ sở mã lớn sử dụng tất cả các API này và hơn thế nữa, thúc đẩy trải nghiệm gắn kết giữa các ngôn ngữ và cho phép bạn áp dụng Swift ở nhiều nơi hơn nữa.

00:07:32.000 --> 00:07:44.000
Bây giờ chúng ta đã đề cập đến những điều cơ bản về khả năng tương tác, hãy đi sâu hơn vào tính năng này, khám phá một số cách để làm cho API C++ của bạn cảm thấy tự nhiên và an toàn trong Swift.

00:07:44.000 --> 00:07:52.000
Trình biên dịch Swift có thể tự động nhập hầu hết các API C++ và biểu diễn chúng dưới dạng các API Swift an toàn.

00:07:52.000 --> 00:08:06.000
Ví dụ, theo mặc định, các loại C++ sẽ được nhập dưới dạng cấu trúc Swift, toán tử C++ sẽ được ánh xạ đến các toán tử Swift tương tự và các vùng chứa sẽ được tự động nhập dưới dạng bộ sưu tập.

00:08:06.000 --> 00:08:14.000
Nhưng trình biên dịch cũng cho phép bạn tinh chỉnh cách các API được nhập và hiển thị các API thậm chí còn tự nhiên hơn.

00:08:14.000 --> 00:08:23.000
Bạn có thể làm điều này bằng cách cung cấp cho trình biên dịch thêm thông tin về API của bạn thông qua việc sử dụng các chú thích.

00:08:23.000 --> 00:08:30.000
Ví dụ, một hàm hoặc phương thức có thể sử dụng quy ước đặt tên C++ không cảm thấy tự nhiên trong Swift.

00:08:30.000 --> 00:08:41.000
Trong những trường hợp này, bạn có thể sử dụng chú thích để đổi tên hàm đã nhập, thêm nhãn đối số hoặc nhập getter và setter làm thuộc tính được tính toán.

00:08:41.000 --> 00:08:52.000
Chú thích cũng có thể giúp giải thích các mẫu cấp cao như ngữ nghĩa tham chiếu và cho phép bạn nhập một số loại dưới dạng lớp Swift.

00:08:52.000 --> 00:08:58.000
Hoặc sửa Swift nếu nó nghĩ rằng API không an toàn khi nó thực sự ổn.

00:08:58.000 --> 00:09:05.000
Những chú thích này là một cách mạnh mẽ để truyền đạt thông tin về các API mà Swift đang nhập.

00:09:05.000 --> 00:09:19.000
Hãy xác định một vài API khác nhau mà tôi sử dụng trong Ứng dụng Mẫu và khám phá cách tôi có thể sử dụng các chú thích này để giúp Swift nhập API của tôi theo cách cảm thấy an toàn và trực quan.

00:09:19.000 --> 00:09:29.000
Bây giờ tôi đã hoàn thành bộ chọn ảnh, tôi cũng muốn thêm nút lưu để lưu ảnh đã chỉnh sửa trở lại thư viện ảnh của mình.

00:09:29.000 --> 00:09:36.000
Quay trở lại Swift, tôi có thể xem lại tất cả các API mà tôi đã nhập.

00:09:36.000 --> 00:09:39.000
Đầu tiên, tôi sẽ cần thu thập những bức ảnh cần lưu lại.

00:09:39.000 --> 00:09:44.000
Và tôi có thể làm điều đó bằng cách sử dụng chức năng getImages.

00:09:44.000 --> 00:09:49.000
Hàm getImages trả về một vectơ C++.

00:09:49.000 --> 00:09:55.000
Trước khi tôi gọi phương pháp này, hãy hiểu chi tiết về cách vectơ hoạt động trong Swift.

00:09:55.000 --> 00:10:01.000
Các loại Swift được chia thành hai loại: loại giá trị và loại tham chiếu.

00:10:01.000 --> 00:10:08.000
Trong Swift, các cấu trúc đại diện cho các loại giá trị và các lớp đại diện cho các loại tham chiếu.

00:10:08.000 --> 00:10:15.000
Theo mặc định, các loại C++ sẽ được nhập dưới dạng các loại giá trị trong Swift.

00:10:15.000 --> 00:10:20.000
Vì vậy Swift sẽ nhập vectơ dưới dạng một loại giá trị hoạt động giống như một cấu trúc Swift.

00:10:20.000 --> 00:10:31.000
Sự khác biệt duy nhất giữa vectơ và bất kỳ cấu trúc Swift nào khác là Swift sẽ sử dụng các thành viên đặc biệt của loại, chẳng hạn như các hàm tạo bản sao, để quản lý vòng đời.

00:10:31.000 --> 00:10:35.000
Những nhà xây dựng bản sao này thường thực hiện các bản sao sâu.

00:10:35.000 --> 00:10:44.000
Vì vậy, không giống như Swift Array, chỉ được sao chép khi nó được sửa đổi, khi Swift sao chép một vectơ, nó sao chép tất cả các phần tử.

00:10:44.000 --> 00:11:02.000
Bây giờ tôi đã có một vectơ hình ảnh, tôi có thể lặp lại vectơ trong vòng lặp for để lấy từng hình ảnh, chuyển đổi hình ảnh trở lại uiImage và lưu hình ảnh vào thư viện ảnh của tôi.

00:11:02.000 --> 00:11:10.000
For-loop này hoạt động vì vectơ có các phương thức bắt đầu và kết thúc, vì vậy Swift sẽ tự động nhập nó dưới dạng một bộ sưu tập.

00:11:10.000 --> 00:11:20.000
Sự phù hợp tự động với bộ sưu tập này cho phép vectơ dễ dàng chuyển đổi thành Mảng Swift và cung cấp quyền truy cập vào các phương thức như bản đồ và bộ lọc.

00:11:20.000 --> 00:11:32.000
Để đảm bảo an toàn, điều quan trọng là sử dụng các API Bộ sưu tập Swift này thay vì các API lặp C ++ không phù hợp với mô hình an toàn của Swift.

00:11:32.000 --> 00:11:39.000
Với các trình lặp C++ này, thật dễ dàng để đưa ra các lỗi như sự cố trọn đời hoặc truy cập bộ nhớ không hợp lệ.

00:11:39.000 --> 00:11:48.000
Mặt khác, các API bộ sưu tập Swift hoàn toàn an toàn, ngay cả khi chúng hoạt động trên bộ sưu tập C++.

00:11:48.000 --> 00:11:58.000
Trình biên dịch Swift sẽ giúp hướng dẫn bạn hướng tới các API an toàn hơn này bằng cách đánh dấu các API C++ không an toàn là không khả dụng và đề xuất một giải pháp thay thế an toàn hơn.

00:11:58.000 --> 00:12:02.000
Hãy quay lại ứng dụng Swift của tôi.

00:12:02.000 --> 00:12:04.000
Có điều gì đó đang làm phiền tôi.

00:12:04.000 --> 00:12:09.000
Mỗi lần tôi sử dụng C++ImageEngine, tôi được nhắc nhở rằng đó là một con trỏ không an toàn.

00:12:09.000 --> 00:12:15.000
Và trên thực tế, kiểu này luôn được sử dụng như một con trỏ trong cả Swift và C++.

00:12:15.000 --> 00:12:19.000
Điều này là do loại này có cái được gọi là "ngật ngữ nghĩa tham chiếu".

00:12:19.000 --> 00:12:28.000
Điều này có nghĩa là loại có nghĩa là có danh tính đối tượng và các bản sao sẽ không phải là các giá trị riêng biệt, mà là các tham chiếu được chia sẻ đến cùng một bộ nhớ.

00:12:28.000 --> 00:12:35.000
Như tôi đã đề cập trước đây, các loại Swift được chia thành hai loại: loại giá trị và loại tham chiếu.

00:12:35.000 --> 00:12:44.000
Objective-C cũng có sự phân biệt rõ ràng giữa các loại giá trị và các loại tham chiếu, điều này giúp việc ánh xạ các loại Objective-C với các cấu trúc và lớp dễ dàng.

00:12:44.000 --> 00:12:59.000
Đối với C++, không rõ loại nào thuộc loại nào vì không giống như Swift và Objective-C, C++ không có sự phân biệt mạnh mẽ giữa loại giá trị và loại tham chiếu.

00:12:59.000 --> 00:13:03.000
Vì vậy, theo mặc định, trình biên dịch sẽ nhập mọi thứ dưới dạng một loại giá trị.

00:13:03.000 --> 00:13:14.000
Nhưng Swift cũng cung cấp cho bạn tùy chọn nhập một số thứ dưới dạng tham chiếu hoặc loại lớp bằng cách thêm chú thích vào mã C++ của bạn.

00:13:14.000 --> 00:13:21.000
Vì vậy, tôi có thể ánh xạ CxxImageEngine đến một lớp Swift bằng cách sử dụng thuộc tính SWIFT_SHARED_REFERENCE.

00:13:21.000 --> 00:13:34.000
Thuộc tính này có nghĩa là Swift sẽ thực thi rằng loại luôn được truyền dưới dạng con trỏ hoặc tham chiếu và sẽ đại diện cho sự gián tiếp này chỉ đơn giản bằng loại chứ không phải là một con trỏ không an toàn trong Swift.

00:13:34.000 --> 00:13:42.000
Để làm cho mã của bạn an toàn, Swift sẽ tự động quản lý vòng đời của các tham chiếu bằng cách giữ lại và phát hành các tham chiếu khi cần thiết.

00:13:42.000 --> 00:13:48.000
Để kích hoạt loại đếm tham chiếu này, bạn sẽ cần cung cấp cho Swift cả hai chức năng giữ và phát hành này.

00:13:48.000 --> 00:13:55.000
Hãy đi sâu vào tiêu đề C++ ImageKit.

00:13:55.000 --> 00:14:01.000
Tôi có thể nhập swift/bridging để truy cập các chú thích như SWIFT_SHARED_REFERENCE.

00:14:01.000 --> 00:14:08.000
Bây giờ tôi có thể áp dụng chú thích này cho loại, chỉ định cả chức năng giữ lại và giải phóng mà Swift có thể gọi.

00:14:08.000 --> 00:14:10.000
Tuyệt vời!

00:14:10.000 --> 00:14:18.000
Bây giờ có một vài lỗi trình biên dịch Swift đang nói với tôi rằng tôi không còn cần phải hủy tham chiếu con trỏ nữa.

00:14:18.000 --> 00:14:24.000
Có một điều cuối cùng mà tôi có thể làm để làm cho API C++ này cảm thấy như ở nhà trong Swift.

00:14:24.000 --> 00:14:28.000
Ở đây trong vòng lặp, tôi đang gọi getImages.

00:14:28.000 --> 00:14:36.000
Xác định một getter và setter như thế này là một mẫu khá phổ biến trong C++, nhưng nó không cảm thấy rất tự nhiên trong Swift.

00:14:36.000 --> 00:14:43.000
Để làm cho điều này cảm thấy bản địa hơn một chút trong Swift, tôi có thể sử dụng một chú thích khác từ swift/bridging.

00:14:43.000 --> 00:14:49.000
Thuộc tính SWIFT_COMPUTED_PROPERTY có thể được áp dụng cho getter và setter để ánh xạ cặp vào thuộc tính được tính toán Swift.

00:14:49.000 --> 00:14:57.000
Hãy chuyển đến tiêu đề C++ của chúng tôi một lần nữa để áp dụng chú thích này.

00:14:57.000 --> 00:15:11.000
Bây giờ tôi có thể tra cứu người gọi phương thức getImages của mình bằng cách nhấp chuột thứ cấp vào định nghĩa và chọn người gọi Swift của mình, giờ đây tôi có thể đổi tên thành "hình ảnh".

00:15:11.000 --> 00:15:12.000
Đẹp quá!

00:15:12.000 --> 00:15:20.000
Bây giờ hãy thử nghiệm ứng dụng của chúng tôi lần cuối.

00:15:20.000 --> 00:15:26.000
Tôi có thể chọn một vài bức ảnh và lưu chúng trở lại thư viện ảnh của mình.

00:15:26.000 --> 00:15:29.000
Tuyệt vời!

00:15:29.000 --> 00:15:35.000
Trong buổi nói chuyện này, tôi chỉ sử dụng hai chú thích để cải thiện cách nhập API của mình.

00:15:35.000 --> 00:15:40.000
Nhưng có nhiều chú thích khác mà bạn có thể sử dụng trong tiêu đề C++ của mình.

00:15:40.000 --> 00:15:46.000
Tất cả những gì bạn cần làm để truy cập chúng là nhập nhanh/phối nối.

00:15:46.000 --> 00:15:58.000
Để kích hoạt khả năng tương tác C++ trong Xcode 15, hãy thay đổi chế độ tương tác C++ và Objective-C từ C và Objective-C sang C++ và Objective-C++.

00:15:58.000 --> 00:16:05.000
Và khả năng tương tác Swift và C++ được hỗ trợ trên tất cả các nền tảng của Apple cũng như Linux và Windows.

00:16:05.000 --> 00:16:15.000
C++ là một ngôn ngữ lớn và phức tạp, và chúng tôi muốn cải thiện cách chúng tôi nhập các API C++ và hiển thị các API Swift với phản hồi của bạn.

00:16:15.000 --> 00:16:22.000
Khi chúng tôi thay đổi cách nhập API C++, chúng tôi sẽ tạo ra một phiên bản mới của khả năng tương tác.

00:16:22.000 --> 00:16:32.000
Điều này có nghĩa là bạn có thể chọn khi nào bạn muốn đảm nhận các tính năng mới này, cho phép bạn tự tin bắt đầu sử dụng API C++ trong quá trình phát triển của mình ngay hôm nay.

00:16:32.000 --> 00:16:37.000
Nếu bạn nhận thấy bất kỳ vấn đề nào hoặc có bất kỳ đề xuất nào, chúng tôi rất muốn nghe ý kiến của bạn.

00:16:37.000 --> 00:16:41.000
Vui lòng cho chúng tôi biết bằng cách sử dụng Trợ lý Phản hồi.

00:16:41.000 --> 00:16:47.000
Khả năng tương tác C++ được thiết kế bởi một nhóm làm việc trình biên dịch Swift hoàn toàn trong nguồn mở.

00:16:47.000 --> 00:16:54.000
Nhóm làm việc bao gồm các kỹ sư và sinh viên từ hơn một chục công ty và trường học.

00:16:54.000 --> 00:17:04.000
Nhóm làm việc đã phát triển hai tài liệu xác định tầm nhìn cho tương lai của khả năng tương tác Swift và C++ và sẽ hướng dẫn sự phát triển của tính năng này theo thời gian.

00:17:04.000 --> 00:17:07.000
Bạn có thể tham gia nhóm làm việc và tham gia vào các diễn đàn.

00:17:07.000 --> 00:17:11.000
Chỉ cần truy cập swift.org.

00:17:11.000 --> 00:17:17.000
Trong Swift 5.9, bạn có thể sử dụng API C++ của mình một cách tự động và an toàn mà không mất chi phí.

00:17:17.000 --> 00:17:23.000
Bạn có thể áp dụng Swift từng bước bằng cách hiển thị mã Swift mới trở lại C++.

00:17:23.000 --> 00:17:32.000
Và bạn có thể cải thiện và tinh chỉnh các API đã nhập bằng cách cung cấp cho trình biên dịch thêm thông tin.

00:17:32.000 --> 23:59:59.000
Cảm ơn vì đã xem, và vui vẻ áp dụng Swift trong tất cả các cơ sở mã C++ của bạn.

