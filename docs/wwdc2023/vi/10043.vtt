WEBVTT

00:00:01.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
Jeff: Xin chào, tôi là Jeff.

00:00:11.000 --> 00:00:16.000
Tôi là một kỹ sư trong nhóm MapKit và tôi rất vui được giới thiệu với bạn MapKit cho SwiftUI.

00:00:16.000 --> 00:00:23.000
Với SwiftUI API được mở rộng đáng kể của chúng tôi, việc tích hợp Bản đồ vào ứng dụng của bạn trên tất cả các nền tảng sẽ dễ dàng hơn bao giờ hết.

00:00:23.000 --> 00:00:30.000
Chúng tôi nghĩ rằng bạn sẽ thích sử dụng MapKit cho SwiftUI để tạo ra trải nghiệm lập bản đồ mạnh mẽ cho người dùng của mình.

00:00:30.000 --> 00:00:34.000
Để cho bạn thấy nó dễ dàng như thế nào, tôi sẽ xây dựng một kế hoạch chuyến đi đầy đủ chức năng từ đầu.

00:00:34.000 --> 00:00:38.000
Tôi sẽ hướng dẫn bạn từng bước và chúng ta sẽ hoàn thành trước khi kết thúc phiên này.

00:00:38.000 --> 00:00:44.000
Gia đình tôi sẽ trở về nhà ở New England vào cuối tuần này, và chúng tôi sẽ dành thứ Bảy để khám phá thành phố Boston xinh đẹp.

00:00:44.000 --> 00:00:51.000
Chúng tôi sẽ đi bộ qua thành phố vào buổi sáng và ngắm cảnh, chúng tôi sẽ ăn trưa ở North End lịch sử, và có thể lấy một cannoli để tráng miệng.

00:00:51.000 --> 00:00:57.000
Thời tiết trông cũng hoàn hảo, vì vậy chúng tôi sẽ đi ra bãi biển vào buổi chiều và cảm nhận cát giữa các ngón chân của chúng tôi.

00:00:57.000 --> 00:00:59.000
Nó sẽ rất vui.

00:00:59.000 --> 00:01:02.000
Tôi sẽ xây dựng một ứng dụng để giúp chúng tôi lên kế hoạch cho ngày hôm nay.

00:01:02.000 --> 00:01:06.000
Tôi sẽ sử dụng chú thích để đánh dấu các địa điểm trên bản đồ.

00:01:06.000 --> 00:01:11.000
Tôi sẽ bật lựa chọn để tôi có thể nhấn vào từng điểm đánh dấu để tìm hiểu thêm về địa điểm đó.

00:01:11.000 --> 00:01:16.000
Tôi sẽ tích hợp Look Around để khám phá một số địa điểm mà chúng ta có thể muốn ghé thăm.

00:01:16.000 --> 00:01:20.000
Tôi sẽ thêm một lớp phủ hiển thị tuyến đường lái xe đến bãi biển.

00:01:20.000 --> 00:01:24.000
Tôi sẽ sử dụng bản đồ để hiển thị các địa điểm và khu vực khác nhau.

00:01:24.000 --> 00:01:29.000
Tôi sẽ thêm một chiều khác vào bản đồ bằng cách cho phép độ cao thực tế.

00:01:29.000 --> 00:01:33.000
Tôi sẽ chỉ cho bạn cách hiển thị hình ảnh vệ tinh và cầu vượt.

00:01:33.000 --> 00:01:38.000
Tôi sẽ thêm một số điều khiển vào bản đồ, bao gồm nút vị trí người dùng, để tôi có thể tìm ra mình đang ở đâu.

00:01:38.000 --> 00:01:42.000
Chúng tôi có rất nhiều thứ để trang trải. Hãy đi sâu vào nó!

00:01:42.000 --> 00:01:46.000
Tôi sẽ bắt đầu với một dự án SwiftUI hoàn toàn mới.

00:01:46.000 --> 00:01:49.000
Tôi sẽ sử dụng MapKit.

00:01:49.000 --> 00:01:54.000
Và tôi sẽ thêm một Bản đồ.

00:01:54.000 --> 00:01:55.000
Tuyệt vời!

00:01:55.000 --> 00:02:01.000
Tôi có một bản đồ tương tác chỉ với một dòng mã!

00:02:01.000 --> 00:02:06.000
Gia đình tôi sẽ bắt đầu ngày mới bằng cách lái xe vào thành phố và đỗ xe để chúng tôi có thể đi bộ xung quanh.

00:02:06.000 --> 00:02:12.000
Tôi đã nghe nó nói rằng có một nơi cụ thể mà bạn nên "pahk" "cah" của mình gần Boston, nhưng tôi thích nhà để xe ngay bên dưới Common.

00:02:12.000 --> 00:02:19.000
Boston Common là một công viên xinh đẹp ngay giữa mọi thứ, và nó sẽ là một điểm khởi đầu tuyệt vời cho chuyến tham quan đi bộ của chúng tôi.

00:02:19.000 --> 00:02:23.000
Điều đầu tiên tôi sẽ làm là thêm một số nội dung vào bản đồ để đánh dấu nhà để xe.

00:02:23.000 --> 00:02:31.000
Tôi sẽ đánh dấu vị trí ngay phía trên đường dốc mà các phương tiện sử dụng để vào nhà để xe, gần thang máy chúng tôi sẽ đi lên để bắt đầu đi bộ.

00:02:31.000 --> 00:02:37.000
Bạn sẽ tìm hiểu về cách sử dụng Điểm đánh dấu và Chú thích để hiển thị nội dung ở một tọa độ cụ thể trên bản đồ.

00:02:37.000 --> 00:02:41.000
Vì vậy, hãy đỗ xe và bắt đầu đi bộ!

00:02:41.000 --> 00:02:46.000
Tôi sẽ sử dụng tính năng đóng MapContentBuilder để thêm điểm đánh dấu vào bản đồ.

00:02:46.000 --> 00:02:48.000
Tuyệt!

00:02:48.000 --> 00:02:54.000
Nếu bạn đã quen thuộc với SwiftUI, việc thêm Điểm đánh dấu vào bản đồ có cảm giác giống như thêm Chế độ xem vào Danh sách.

00:02:54.000 --> 00:02:59.000
Kiểm tra cách bản đồ đã tự động đóng khung nội dung của chúng tôi bằng cách phóng to để hiển thị Điểm đánh dấu.

00:02:59.000 --> 00:03:01.000
Vậy Marker là gì?

00:03:01.000 --> 00:03:06.000
Có loại nội dung nào khác mà tôi có thể trình bày bằng trình tạo nội dung không?

00:03:06.000 --> 00:03:10.000
Điểm đánh dấu được sử dụng để hiển thị nội dung ở một tọa độ cụ thể trên bản đồ.

00:03:10.000 --> 00:03:12.000
Hình dạng quả bóng bay có thể trông quen thuộc với bạn.

00:03:12.000 --> 00:03:20.000
Bạn sẽ tìm thấy Điểm đánh dấu được sử dụng trong ứng dụng Bản đồ và trên nền tảng, bao gồm nhiều ứng dụng bạn có thể tìm thấy trên App Store.

00:03:20.000 --> 00:03:25.000
Giống như Marker, Chú thích được sử dụng để hiển thị nội dung ở một tọa độ cụ thể.

00:03:25.000 --> 00:03:31.000
Thay vì khinh khí cầu của Marker, Chú thích hiển thị Chế độ xem SwiftUI.

00:03:31.000 --> 00:03:35.000
Trình tạo nội dung cũng có thể được sử dụng để trình bày nội dung lớp phủ.

00:03:35.000 --> 00:03:37.000
Bạn sẽ tìm hiểu thêm về những thứ này một lát sau.

00:03:37.000 --> 00:03:43.000
Hiện tại, tất cả những gì bạn thực sự cần biết là bạn có thể sử dụng đóng trình tạo nội dung để thêm tất cả các loại nội dung vào bản đồ.

00:03:43.000 --> 00:03:50.000
Tôi muốn hiển thị chế độ xem SwiftUI tùy chỉnh cho chỗ đậu xe, vì vậy tôi sẽ sử dụng Chú thích để đánh dấu nó.

00:03:50.000 --> 00:03:54.000
Ở đây, tôi đang sử dụng ZStack để soạn một số hình dạng và hình ảnh.

00:03:54.000 --> 00:03:59.000
Chế độ xem SwiftUI này sẽ được hiển thị trên bản đồ tập trung ngay trên tọa độ đỗ xe.

00:03:59.000 --> 00:04:05.000
Thay vào đó, nếu bạn muốn chế độ xem của mình được đặt phía trên tọa độ, bạn có thể sử dụng tham số neo của Chú thích.

00:04:05.000 --> 00:04:11.000
Chỉ định giá trị neo của "dưới cùng" sẽ đặt dưới cùng của chế độ xem của bạn ngay trên tọa độ chú thích.

00:04:11.000 --> 00:04:12.000
Được rồi!

00:04:12.000 --> 00:04:15.000
Ứng dụng đánh dấu nơi chúng ta sẽ bắt đầu chuyến đi bộ của mình.

00:04:15.000 --> 00:04:20.000
Tôi đã sử dụng MapContentBuilder để hiển thị nội dung chú thích trên bản đồ.

00:04:20.000 --> 00:04:24.000
Tiếp theo, tôi muốn ứng dụng này truyền tải cảm giác về địa điểm khi tôi đang nhìn vào bản đồ.

00:04:24.000 --> 00:04:29.000
Tôi sẽ sử dụng mapStyle để đạt được điều đó bằng cách cho phép độ cao địa hình thực tế.

00:04:29.000 --> 00:04:36.000
Bạn cũng sẽ học cách sử dụng mapStyle để hiển thị hình ảnh vệ tinh hoặc cầu vượt.

00:04:36.000 --> 00:04:43.000
Bạn có thể thiết lập một phong cách bằng cách sử dụng công cụ sửa đổi mapStyle.

00:04:43.000 --> 00:04:44.000
Đây là phong cách bản đồ tiêu chuẩn.

00:04:44.000 --> 00:04:50.000
Theo mặc định, nó cung cấp một bản trình bày phẳng giống như một bản đồ giấy vật lý.

00:04:50.000 --> 00:05:07.000
Có vẻ như có một cây cầu bắc qua đầm phá, vì vậy bạn có thể đi bộ từ bên này sang bên kia.

00:05:07.000 --> 00:05:10.000
Tuy nhiên, bản đồ phẳng này thực sự để lại điều gì đó cho trí tưởng tượng.

00:05:10.000 --> 00:05:16.000
Tôi sẽ cho phép địa hình trên cao thực tế để cung cấp cho bản đồ một chiều không gian khác để làm việc.

00:05:16.000 --> 00:05:33.000
Kích hoạt độ cao thực tế thực sự làm cho bản đồ trở nên sống động.

00:05:33.000 --> 00:05:41.000
Bây giờ nhìn vào đầm phá, tôi có thể tưởng tượng việc đi trên một trong những chiếc thuyền thiên nga đi vòng quanh vào mùa hè và hình dung chiếc thuyền đi qua dưới cầu.

00:05:41.000 --> 00:05:46.000
Sử dụng phong cách bản đồ hình ảnh là một cách tuyệt vời khác để cung cấp cho người dùng của bạn cảm giác về địa điểm.

00:05:46.000 --> 00:05:52.000
Kiểu bản đồ hình ảnh hiển thị bản đồ được hiển thị bằng hình ảnh vệ tinh hoặc cầu vượt.

00:05:52.000 --> 00:05:56.000
Phong cách bản đồ Hybrid kết hợp hình ảnh với đường và nhãn.

00:05:56.000 --> 00:06:04.000
Tóm lại, tôi đã bật độ cao thực tế bằng cách sử dụng mapStyle tiêu chuẩn và tôi cũng đã chỉ cho bạn cách sử dụng một số kiểu bản đồ khác.

00:06:04.000 --> 00:06:09.000
Tiếp theo, tôi muốn ứng dụng giúp chúng tôi tìm kiếm những địa điểm chúng tôi muốn ghé thăm.

00:06:09.000 --> 00:06:14.000
Những đứa trẻ của chúng tôi sẽ cùng chúng tôi đi dạo quanh Boston, và tôi cũng muốn buổi sáng của chúng tôi vui vẻ cho chúng.

00:06:14.000 --> 00:06:21.000
Người lớn có thể đánh giá cao việc nhìn thấy một số lịch sử trong khi những đứa trẻ có thể đánh giá cao xích đu và cầu trượt và thanh khỉ!

00:06:21.000 --> 00:06:26.000
Tôi sẽ thêm một nút để tìm kiếm sân chơi và một nút để tìm kiếm các bãi biển nữa.

00:06:26.000 --> 00:06:30.000
Ứng dụng sẽ thêm một Điểm đánh dấu cho mỗi kết quả tìm kiếm.

00:06:30.000 --> 00:06:38.000
Bạn sẽ tìm hiểu thêm một chút về Markers và bạn cũng sẽ học cách hiển thị giao diện người dùng của riêng mình phía trên bản đồ mà không cản trở kết quả tìm kiếm.

00:06:38.000 --> 00:06:42.000
Đầu ngày hôm nay, tôi đã thực hiện một chút Chế độ xem BeantownButtons.

00:06:42.000 --> 00:06:48.000
Nhấn vào một nút sẽ gọi chức năng tìm kiếm bằng một truy vấn đơn giản, sân chơi hoặc bãi biển.

00:06:48.000 --> 00:06:58.000
Chức năng tìm kiếm sử dụng MKLocalSearch để tìm các địa điểm gần nhà để xe Boston Common và viết kết quả bằng cách sử dụng ràng buộc.

00:06:58.000 --> 00:07:05.000
Quay lại Chế độ xem nội dung chính của ứng dụng, tôi sẽ thêm Trạng thái để theo dõi kết quả tìm kiếm.

00:07:05.000 --> 00:07:12.000
Khi giao diện người dùng BeantownButtons thực hiện tìm kiếm, nó sẽ ghi kết quả trở lại trạng thái này bằng cách sử dụng ràng buộc.

00:07:12.000 --> 00:07:21.000
Tôi sẽ thêm các nút phía trên bản đồ ở cuối màn hình.

00:07:21.000 --> 00:07:33.000
Sử dụng safeAreaInset sẽ đảm bảo giao diện người dùng của ứng dụng không che khuất bất kỳ nội dung nào tôi đang thêm hoặc bất kỳ điều khiển nào do hệ thống cung cấp có thể xuất hiện trên bản đồ, chẳng hạn như logo Apple Maps và liên kết Pháp lý.

00:07:33.000 --> 00:07:40.000
Tiếp theo, tôi sẽ sử dụng trình tạo nội dung để thêm Điểm đánh dấu kết quả tìm kiếm.

00:07:40.000 --> 00:07:50.000
Tôi đang sử dụng ForEach để thêm điểm đánh dấu cho mỗi kết quả tìm kiếm.

00:07:50.000 --> 00:07:54.000
Tôi sẽ thử những nút này. Hãy tìm một số sân chơi.

00:07:54.000 --> 00:07:56.000
Nhìn kìa! Sân chơi!

00:07:56.000 --> 00:08:00.000
Bản đồ đã tự động đóng khung chúng bằng cách thu nhỏ để hiển thị tất cả chúng.

00:08:00.000 --> 00:08:04.000
Làm thế nào về một số bãi biển?

00:08:04.000 --> 00:08:12.000
Kết quả tìm kiếm là MKMapItems, là loại MapKit APIs như MKLocalSearch sử dụng để đại diện cho các địa điểm.

00:08:12.000 --> 00:08:15.000
Ở đây, tôi đang sử dụng trình khởi tạo mục bản đồ của Marker.

00:08:15.000 --> 00:08:24.000
Các điểm đánh dấu được tạo theo cách này sử dụng tên của mục bản đồ cho tiêu đề của chúng và sử dụng thông tin từ mục bản đồ để hiển thị biểu tượng và màu sắc thái đại diện cho địa điểm.

00:08:24.000 --> 00:08:29.000
Hầu hết các kết quả tìm kiếm này hiển thị dưới dạng bút đánh dấu ô bãi biển màu xanh nhạt.

00:08:29.000 --> 00:08:34.000
Khi bạn đang làm việc với các mục bản đồ, nội dung tự động và hỗ trợ kiểu dáng của Marker rất thuận tiện.

00:08:34.000 --> 00:08:39.000
Tuy nhiên, ngay cả khi bạn không sử dụng các mục bản đồ, bạn vẫn có quyền kiểm soát bản trình bày của Marker.

00:08:39.000 --> 00:08:44.000
Theo mặc định, Marker hiển thị biểu tượng ghim bản đồ trong quả bóng của nó, như bạn thấy ở đây.

00:08:44.000 --> 00:08:48.000
Bạn có thể cung cấp biểu tượng của riêng mình bằng cách sử dụng nội dung Hình ảnh hoặc hình ảnh hệ thống.

00:08:48.000 --> 00:08:52.000
Bạn cũng có thể hiển thị tối đa ba chữ cái văn bản bằng cách sử dụng chữ lồng.

00:08:52.000 --> 00:08:57.000
Bạn có thể thay đổi màu của Marker bằng cách sử dụng công cụ sửa đổi tông màu.

00:08:57.000 --> 00:09:05.000
Tóm lại, tôi đã sử dụng safeAreaInset để hiển thị một số nút phía trên bản đồ trong khi đảm bảo chúng không che khuất các điểm đánh dấu kết quả tìm kiếm.

00:09:05.000 --> 00:09:10.000
Tiếp theo, tôi sẽ đặt ứng dụng kiểm soát những gì được hiển thị trên bản đồ.

00:09:10.000 --> 00:09:12.000
Tôi đã thêm nội dung vào bản đồ.

00:09:12.000 --> 00:09:16.000
Mỗi lần tôi có, bản đồ đã tự động đóng khung nội dung của tôi cho tôi.

00:09:16.000 --> 00:09:20.000
Tôi sẽ chỉ cho bạn cách kích hoạt hành vi thuận tiện này khi bạn cần.

00:09:20.000 --> 00:09:26.000
Tôi cũng sẽ chỉ cho bạn cách trưng bày một cái gì đó hoàn toàn khác, như bờ biển Bờ Bắc của khu vực Boston.

00:09:26.000 --> 00:09:35.000
Ngay bây giờ, chúng tôi đang xem xét các bãi biển.

00:09:35.000 --> 00:09:40.000
Nếu tôi đi và tìm kiếm sân chơi...

00:09:40.000 --> 00:09:45.000
Bản đồ không còn tự động hiển thị kết quả gần chỗ đậu xe Boston Common của chúng tôi.

00:09:45.000 --> 00:09:57.000
Để hiển thị kết quả tìm kiếm sau khi người dùng đã tương tác với bản đồ, tôi sẽ cần đặt lại trạng thái vị trí máy ảnh của Bản đồ để bản đồ sẽ đóng khung các điểm đánh dấu...

00:09:57.000 --> 00:10:02.000
Vì vậy, tôi sẽ thêm trạng thái để theo dõi vị trí.

00:10:02.000 --> 00:10:13.000
Tôi sẽ sử dụng vị trí tự động mặc định để đóng khung nội dung chúng tôi đã thêm vào bản đồ.

00:10:13.000 --> 00:10:19.000
Và tôi sẽ chuyển ràng buộc đến trình khởi tạo Bản đồ.

00:10:19.000 --> 00:10:35.000
Tôi sẽ sử dụng công cụ sửa đổi onChange để tìm hiểu khi nào kết quả tìm kiếm được cập nhật.

00:10:35.000 --> 00:10:44.000
Khi có, tôi sẽ chỉ cần đặt vị trí máy ảnh trở lại tự động để đảm bảo chúng có thể nhìn thấy được.

00:10:44.000 --> 00:10:46.000
Hãy thử xem nào.

00:10:46.000 --> 00:10:51.000
Tôi sẽ tìm kiếm các bãi biển, xem kết quả...

00:10:51.000 --> 00:10:57.000
Và sau đó đi trước khi tìm kiếm sân chơi.

00:10:57.000 --> 00:10:58.000
Tuyệt!

00:10:58.000 --> 00:11:04.000
Bây giờ khi tôi thực hiện tìm kiếm, tất cả các kết quả đều được hiển thị ngay cả khi tôi đã đi đến tận Rhode Island.

00:11:04.000 --> 00:11:08.000
Có một điều khác tôi muốn làm bằng cách sử dụng trạng thái vị trí này.

00:11:08.000 --> 00:11:14.000
Sau một buổi sáng vui vẻ ở Boston, gia đình tôi sẽ lái xe về phía Bắc để dành buổi chiều ở bãi biển.

00:11:14.000 --> 00:11:21.000
Tôi muốn ứng dụng giúp bạn dễ dàng nhìn thấy bờ biển phía Bắc để chúng ta có thể cảm nhận được nơi chúng ta sẽ đến.

00:11:21.000 --> 00:11:27.000
Tôi sẽ sử dụng trạng thái vị trí để làm điều đó.

00:11:27.000 --> 00:11:34.000
Tôi sẽ thêm các khu vực tọa độ cho thành phố và cho Bờ Bắc.

00:11:34.000 --> 00:11:44.000
Tôi sẽ chuyển sang giao diện người dùng BeantownButtons và tôi sẽ thêm một ràng buộc cho trạng thái vị trí của chúng tôi.

00:11:44.000 --> 00:11:51.000
Tôi sẽ thêm một vài nút, mỗi nút đặt vị trí máy ảnh thành một vùng.

00:11:51.000 --> 00:11:55.000
Khi tôi nhấn nút Thành phố, Bản đồ sẽ hiển thị Boston.

00:11:55.000 --> 00:12:03.000
Khi tôi nhấn nút Sóng, bản đồ sẽ hiển thị bờ biển phía bắc.

00:12:03.000 --> 00:12:09.000
Tôi sẽ chuyển trở lại ContentView và chuyển một vị trí ràng buộc với giao diện người dùng nút.

00:12:09.000 --> 00:12:26.000
Hãy thử xem nào!

00:12:26.000 --> 00:12:32.000
Khi tôi nhấn vào nút "sóng", vị trí của bản đồ đã được cập nhật để hiển thị khu vực bờ biển phía bắc.

00:12:32.000 --> 00:12:39.000
Khi tôi nhấn vào nút "thành phố", nó được cập nhật để hiển thị Boston.

00:12:39.000 --> 00:12:43.000
Đằng sau hậu trường, những gì Bản đồ hiển thị cuối cùng được điều khiển bởi MapCamera.

00:12:43.000 --> 00:12:51.000
Máy ảnh nhìn vào tọa độ trên mặt đất từ một khoảng cách nhất định và hướng của máy ảnh xác định những gì có thể nhìn thấy trên bản đồ.

00:12:51.000 --> 00:12:55.000
Ứng dụng tôi đang xây dựng không phải tự tạo hoặc định cấu hình máy ảnh.

00:12:55.000 --> 00:13:00.000
Thay vào đó, nó chỉ đơn giản chỉ định những gì nên được xem bằng cách sử dụng MapCameraPosition.

00:13:00.000 --> 00:13:03.000
MapKit chăm sóc máy ảnh cho tôi.

00:13:03.000 --> 00:13:07.000
Ứng dụng sử dụng vị trí máy ảnh tự động để đóng khung nội dung, chẳng hạn như kết quả tìm kiếm.

00:13:07.000 --> 00:13:11.000
Nó sử dụng một vị trí khu vực để hiển thị Boston và Bờ Bắc.

00:13:11.000 --> 00:13:15.000
Bạn cũng có thể chỉ định vị trí máy ảnh để đóng khung những thứ khác.

00:13:15.000 --> 00:13:20.000
Vị trí Rect được sử dụng để hiển thị một khu vực, giống như cách chúng tôi đã sử dụng khu vực.

00:13:20.000 --> 00:13:25.000
Nó chỉ đơn giản là sử dụng bản đồ trực tiếp để biểu diễn khu vực đó, thay vì khu vực tọa độ.

00:13:25.000 --> 00:13:31.000
Chúng ta hãy xem xét kỹ hơn về vật phẩm, máy ảnh và vị trí máy ảnh vị trí người dùng.

00:13:31.000 --> 00:13:35.000
Sử dụng MKMapItem, bạn có thể chỉ ra một địa điểm cụ thể.

00:13:35.000 --> 00:13:37.000
Điều này hoạt động cho tất cả các loại mục bản đồ.

00:13:37.000 --> 00:13:44.000
Nếu mục bản đồ của bạn đại diện cho Vịnh Cape Cod, MapKit sẽ tự động thu nhỏ để nó vừa vặn.

00:13:44.000 --> 00:13:51.000
Nếu bạn đang cố gắng hiển thị một công viên nhất định ở North End, máy ảnh sẽ phóng to để hiển thị môi trường xung quanh và mang lại cảm giác về địa điểm.

00:13:51.000 --> 00:13:56.000
Bạn cũng có thể chỉ cần cung cấp một MapCamera, được cấu hình chính xác theo cách bạn muốn.

00:13:56.000 --> 00:14:01.000
Sử dụng MapCamera với góc cao độ là một cách tuyệt vời để cung cấp phối cảnh 3D.

00:14:01.000 --> 00:14:07.000
Hoặc, có lẽ bạn muốn máy ảnh theo dõi vị trí của người dùng khi họ đang đi dọc theo sông Charles.

00:14:07.000 --> 00:14:18.000
Bạn có thể cung cấp một vị trí dự phòng sẽ được sử dụng khi vị trí của người dùng không được biết, chẳng hạn như khi ủy quyền vị trí chưa được cấp hoặc trong khi thiết bị đang cố gắng sửa vị trí.

00:14:18.000 --> 00:14:24.000
Nếu bạn cung cấp ràng buộc với trạng thái vị trí máy ảnh của mình, MapKit sẽ cập nhật nó khi vị trí máy ảnh thay đổi.

00:14:24.000 --> 00:14:30.000
Đây là vị trí camera định vị của người dùng. Thuộc tính followsUserLocation là đúng.

00:14:30.000 --> 00:14:36.000
Nếu người dùng quay đi, máy ảnh sẽ không còn theo dõi vị trí của người dùng nữa.

00:14:36.000 --> 00:14:41.000
Khi người dùng tương tác với bản đồ, trạng thái vị trí máy ảnh được định vị bởi người dùng.

00:14:41.000 --> 00:14:47.000
Nếu ứng dụng đặt trạng thái vị trí máy ảnh trở lại Vị trí người dùng, máy ảnh sẽ theo dõi vị trí của người dùng.

00:14:47.000 --> 00:14:53.000
Khi ứng dụng của bạn đặt trạng thái vị trí máy ảnh, nó không được định vị bởi người dùng.

00:14:53.000 --> 00:14:59.000
Người dùng có thể định vị máy ảnh bằng cách tương tác với bản đồ bất kể bạn chỉ định loại vị trí máy ảnh nào.

00:14:59.000 --> 00:15:03.000
Được rồi! Ứng dụng hiện đang kiểm soát những gì đang được xem trên bản đồ.

00:15:03.000 --> 00:15:09.000
Tôi đã sử dụng vị trí máy ảnh tự động để đảm bảo kết quả tìm kiếm hiển thị ngay cả sau khi người dùng đã tương tác với bản đồ.

00:15:09.000 --> 00:15:14.000
Tôi đã sử dụng vị trí camera khu vực để hiển thị Boston và North Shore.

00:15:14.000 --> 00:15:22.000
Tiếp theo, thay vì chỉ tìm kiếm gần Boston Common, tôi muốn xoay bản đồ đến một khu vực mà tôi muốn ghé thăm và thay vào đó tìm kiếm ở đó.

00:15:22.000 --> 00:15:26.000
Tôi sẽ chỉ cho bạn cách lấy vùng có thể nhìn thấy khi máy ảnh thay đổi.

00:15:26.000 --> 00:15:31.000
Tôi sẽ thêm trạng thái để theo dõi khu vực hiển thị trên bản đồ.

00:15:31.000 --> 00:15:39.000
Tôi sẽ thêm một công cụ sửa đổi onMapCameraChange, nơi tôi sẽ lấy khu vực hiển thị từ ngữ cảnh cập nhật và lưu trữ nó ở trạng thái của riêng tôi.

00:15:39.000 --> 00:15:45.000
Theo mặc định, việc đóng cửa được cung cấp cho onMapCameraChange sẽ được gọi khi người dùng tương tác xong với bản đồ.

00:15:45.000 --> 00:15:53.000
Để đóng cửa được gọi trong khi người dùng đang tương tác với bản đồ, bạn có thể yêu cầu cập nhật liên tục bằng cách truyền tham số tần số.

00:15:53.000 --> 00:16:02.000
Ngoài thuộc tính khu vực mà tôi đang sử dụng ở đây, ngữ cảnh cũng có một thuộc tính cho bản đồ trực tràng có thể nhìn thấy và một thuộc tính cho chính máy ảnh bản đồ.

00:16:02.000 --> 00:16:06.000
Tùy thuộc vào nhu cầu của tôi, tôi cũng có thể sử dụng chúng.

00:16:06.000 --> 00:16:13.000
Tôi sẽ cập nhật BeantownButtons để nó sẽ tìm kiếm trong khu vực hiển thị cho người dùng.

00:16:13.000 --> 00:16:20.000
Tôi sẽ thêm visibleRegion vào các nút.

00:16:20.000 --> 00:16:24.000
Và tôi sẽ sử dụng nó trong yêu cầu tìm kiếm.

00:16:24.000 --> 00:16:35.000
Trong ContentView, tôi sẽ chuyển Vùng hiển thị đến giao diện người dùng nút.

00:16:35.000 --> 00:16:40.000
Hãy cùng tìm kiếm những bãi biển North Shore!

00:16:40.000 --> 00:16:44.000
Có Bờ Bắc. Cho tôi xem một số bãi biển!

00:16:44.000 --> 00:16:53.000
Ngọt ngào! Còn Rhode Island thì sao?

00:16:53.000 --> 00:16:56.000
Tuyệt! Bây giờ tôi cũng có thể tìm kiếm các bãi biển ở Rhode Island!

00:16:56.000 --> 00:17:03.000
Tôi đã bật tính năng này bằng cách sử dụng onMapCameraChange, thông báo cho chúng tôi khi có thay đổi về những gì hiển thị.

00:17:03.000 --> 00:17:07.000
Tiếp theo, tôi muốn ứng dụng giúp việc chọn bãi biển nào chúng ta sẽ đến dễ dàng hơn một chút.

00:17:07.000 --> 00:17:09.000
Chắc chắn có rất nhiều thứ để lựa chọn.

00:17:09.000 --> 00:17:13.000
Để bắt đầu, tôi sẽ thêm hỗ trợ để chọn kết quả tìm kiếm.

00:17:13.000 --> 00:17:17.000
Ngay bây giờ, nếu tôi nhấn vào điểm đánh dấu kết quả tìm kiếm, sẽ không có gì xảy ra.

00:17:17.000 --> 00:17:22.000
Không có trạng thái lựa chọn, vì vậy các điểm đánh dấu không thể lựa chọn được.

00:17:22.000 --> 00:17:44.000
Để kích hoạt lựa chọn, tôi sẽ chỉ thêm một ràng buộc lựa chọn vào Bản đồ của chúng tôi.

00:17:44.000 --> 00:17:51.000
Bây giờ hãy xem điều gì sẽ xảy ra khi tôi nhấn vào một kết quả.

00:17:51.000 --> 00:17:57.000
Quả bóng bay hoạt hình để cho thấy rằng nó đã được chọn!

00:17:57.000 --> 00:18:05.000
Tôi đang sử dụng MKMapItem làm loại lựa chọn, vì vậy mỗi điểm đánh dấu đại diện cho một mục bản đồ hiện có thể lựa chọn được.

00:18:05.000 --> 00:18:12.000
Chú thích Parking Spot không đại diện cho một mục bản đồ, vì vậy nó không thể lựa chọn được.

00:18:12.000 --> 00:18:19.000
Nếu bạn muốn hỗ trợ lựa chọn Điểm đánh dấu và Chú thích không nhất thiết phải có cùng loại danh tính, bạn chỉ cần gắn thẻ chúng.

00:18:19.000 --> 00:18:24.000
Điều này hoạt động giống như cách nó hoạt động khi quản lý lựa chọn với Picker và List.

00:18:24.000 --> 00:18:27.000
Ở đây, trạng thái Thẻ đã chọn là một Int.

00:18:27.000 --> 00:18:32.000
Mỗi điểm đánh dấu được gắn thẻ bằng một Int, vì vậy ràng buộc cho phép lựa chọn cho cả hai.

00:18:32.000 --> 00:18:37.000
Khi sử dụng thẻ để bật lựa chọn, bạn có thể sử dụng bất kỳ loại nào phù hợp với hashable cho trạng thái lựa chọn của mình.

00:18:37.000 --> 00:18:43.000
Tóm lại, tôi đã thêm liên kết lựa chọn MKMapItem vào Bản đồ, cho phép lựa chọn cho các điểm đánh dấu kết quả tìm kiếm.

00:18:43.000 --> 00:18:49.000
Tiếp theo, ứng dụng sẽ hiển thị một số thông tin bổ sung về kết quả tìm kiếm đã chọn.

00:18:49.000 --> 00:18:55.000
Tôi sẽ thêm một cái nhìn xung quanh bản xem trước để cung cấp một cái nhìn thoáng qua về bãi biển, và tôi cũng sẽ thêm tên của bãi biển và thời gian lái xe.

00:18:55.000 --> 00:19:02.000
Đầu ngày hôm nay, khi tôi đang viết Chế độ xem BeantownButtons, tôi cũng đã viết một ItemInfoView nhỏ hiển thị...

00:19:02.000 --> 00:19:09.000
Một tiêu đề, thời gian di chuyển ước tính và Xem trước Nhìn xung quanh.

00:19:09.000 --> 00:19:13.000
Bản xem trước nhìn xung quanh sẽ cho tôi thấy bãi biển được chọn trông như thế nào.

00:19:13.000 --> 00:19:15.000
Bản xem trước hiển thị một cảnh nhìn xung quanh.

00:19:15.000 --> 00:19:20.000
Bạn có thể lấy cảnh cho một mục bản đồ nhất định bằng MKLookAroundSceneRequest.

00:19:20.000 --> 00:19:27.000
Cảnh sẽ được tìm nạp khi chế độ xem được hiển thị và một lần nữa bất cứ khi nào kết quả tìm kiếm đã chọn thay đổi.

00:19:27.000 --> 00:19:34.000
Cuối cùng, có một thuộc tính định dạng thời gian di chuyển dự kiến của MKRoute để hiển thị, sử dụng DateComponentsFormatter.

00:19:34.000 --> 00:19:40.000
Tôi sẽ chuyển trở lại ContentView và thêm ItemInfoView này.

00:19:40.000 --> 00:19:45.000
Điều đầu tiên trước tiên: Tôi sẽ nhận được một tuyến đường từ nhà để xe đến kết quả tìm kiếm đã chọn.

00:19:45.000 --> 00:19:51.000
Tôi sẽ thêm trạng thái để theo dõi tuyến đường...

00:19:51.000 --> 00:19:56.000
Và tôi sẽ thêm một hàm sử dụng MKDirections để có được một...

00:19:56.000 --> 00:20:03.000
Và thiết lập trạng thái.

00:20:03.000 --> 00:20:10.000
Tôi sẽ thêm một công cụ sửa đổi onChange khác để gọi hàm khi lựa chọn thay đổi.

00:20:10.000 --> 00:20:32.000
Ứng dụng sẽ hiển thị chế độ xem thông tin mặt hàng của chúng tôi khi nó có kết quả tìm kiếm đã chọn.

00:20:32.000 --> 00:20:38.000
Trong khi tôi đang ở đó, tôi sẽ ẩn tiêu đề Marker cho kết quả tìm kiếm để dọn dẹp giao diện của bản đồ một chút.

00:20:38.000 --> 00:20:43.000
Thay vào đó, ItemInfoView sẽ hiển thị tên của địa điểm đã chọn.

00:20:43.000 --> 00:20:54.000
Được rồi! Hãy xem những gì chúng ta có.

00:20:54.000 --> 00:21:07.000
Bạn biết đấy, tôi nghe nói có một sân chơi gần cái này... Nó trông khá đẹp.

00:21:07.000 --> 00:21:13.000
Tôi tự hỏi có chuyện gì xảy ra theo cách này vậy?

00:21:13.000 --> 00:21:25.000
Tuyệt vời! Một bãi biển với một sân chơi, phải không?

00:21:25.000 --> 00:21:30.000
Đối với gia đình chúng tôi, điều đó sẽ khá khó để đánh bại.

00:21:30.000 --> 00:21:32.000
Cách Boston Common khoảng nửa giờ.

00:21:32.000 --> 00:21:34.000
Có vẻ như là một địa điểm tuyệt vời.

00:21:34.000 --> 00:21:39.000
Tóm lại, tôi đã thêm một cái nhìn xung quanh bản xem trước sẽ được hiển thị khi một điểm đánh dấu được chọn.

00:21:39.000 --> 00:21:45.000
Cùng với thời gian di chuyển ước tính từ MKRoute, điều này thực sự sẽ giúp chúng tôi chọn một bãi biển.

00:21:45.000 --> 00:21:54.000
Tiếp theo, vì chúng ta đã có một tuyến đường để hiển thị thời gian di chuyển, chúng ta hoàn toàn nên sử dụng nó để hiển thị tuyến đường lái xe từ Boston Common đến kết quả tìm kiếm đã chọn.

00:21:54.000 --> 00:22:02.000
Tôi sẽ thêm một lớp phủ MapPolyline để hiển thị tuyến đường và tôi sẽ hiển thị cho bạn một số loại nội dung lớp phủ khác mà bạn cũng có thể thêm vào.

00:22:02.000 --> 00:22:09.000
Khi một tuyến đường có sẵn, tôi sẽ thêm MapPolyline và vuốt nó bằng màu xanh lam.

00:22:09.000 --> 00:22:17.000
Hãy xem nó trên bản đồ.

00:22:17.000 --> 00:22:32.000
Trông giống như một ổ đĩa khá đẹp!

00:22:32.000 --> 00:22:36.000
Nó khá dễ dàng để sử dụng MapPolyline với MKRoute.

00:22:36.000 --> 00:22:40.000
Bạn cũng có thể sử dụng MapPolyline để hiển thị dữ liệu vị trí của riêng bạn.

00:22:40.000 --> 00:22:46.000
Bạn có thể sử dụng StrokeStyle để cung cấp một số thứ khá lạ mắt, chẳng hạn như dấu gạch ngang và độ dốc.

00:22:46.000 --> 00:22:52.000
Nếu bạn đang muốn làm nổi bật một khu vực, bạn sẽ muốn sử dụng MapPolygon hoặc MapCircle.

00:22:52.000 --> 00:22:57.000
Đây là hai đa giác đánh dấu một vài công viên.

00:22:57.000 --> 00:23:00.000
Đây là hai vòng tròn đánh dấu cùng một công viên.

00:23:00.000 --> 00:23:03.000
Bạn sẽ nhận thấy rằng một mức lớp phủ được chỉ định cho mỗi vòng tròn.

00:23:03.000 --> 00:23:10.000
Vòng tròn màu hồng đang sử dụng mức lớp phủ mặc định của các con đường phía trên, đặt nhãn của bản đồ phía trên vòng tròn.

00:23:10.000 --> 00:23:14.000
Vòng tròn màu lục lam đang sử dụng các nhãn trên.

00:23:14.000 --> 00:23:17.000
Ứng dụng đang thực sự hình thành.

00:23:17.000 --> 00:23:24.000
Tôi đã thêm MapPolyline để hiển thị tuyến đường lái xe đến bãi biển và tôi đã chỉ cho bạn một vài loại lớp phủ khác mà bạn cũng có thể sử dụng.

00:23:24.000 --> 00:23:28.000
Tiếp theo, tôi muốn ứng dụng giúp bạn dễ dàng tìm ra tôi đang ở đâu.

00:23:28.000 --> 00:23:35.000
Khi chúng ta đến Boston và bắt đầu đi bộ xung quanh, có thể, thậm chí có khả năng, chúng ta sẽ bị lạc một chút.

00:23:35.000 --> 00:23:42.000
Tôi sẽ thêm UserAnnotation làm nội dung để hiển thị vị trí của tôi và tôi sẽ thêm MapUserLocationButton để tìm chính mình.

00:23:42.000 --> 00:23:47.000
Bạn sẽ tìm hiểu về một số loại điều khiển bản đồ khác cũng có sẵn để sử dụng.

00:23:47.000 --> 00:23:53.000
Vì vậy, khi tôi đang cố gắng tìm lại chính mình, tôi thường bắt đầu bằng cách tìm kiếm chấm nhỏ màu xanh trên bản đồ.

00:23:53.000 --> 00:24:00.000
Tôi đã thêm UserAnnotation vào nội dung bản đồ của mình, vì vậy bây giờ vị trí của tôi xuất hiện trên bản đồ.

00:24:00.000 --> 00:24:06.000
Tôi đang ở đâu?

00:24:06.000 --> 00:24:14.000
Tôi đây rồi!

00:24:14.000 --> 00:24:25.000
Có vẻ như tôi thực sự ở khá xa những sân chơi và bãi biển mà chúng tôi đã kiểm tra.

00:24:25.000 --> 00:24:30.000
Tôi chắc chắn đã phải thu nhỏ và xoay rất nhiều để đến Apple Park.

00:24:30.000 --> 00:24:40.000
MapUserLocationButton chắc chắn sẽ giúp điều đó dễ dàng hơn.

00:24:40.000 --> 00:24:45.000
Bây giờ, tôi có thể nhấn vào nút để hiển thị vị trí của mình.

00:24:45.000 --> 00:24:51.000
Máy ảnh bản đồ sẽ theo tôi khi tôi di chuyển xung quanh.

00:24:51.000 --> 00:25:04.000
Tôi cũng đã thêm MapCompass và MapScaleView.

00:25:04.000 --> 00:25:12.000
Cấu hình mapControls mặc định hiển thị la bàn khi bản đồ được xoay và chỉ báo tỷ lệ trong khi người dùng đang phóng to hoặc thu nhỏ.

00:25:12.000 --> 00:25:19.000
Tôi cũng muốn những điều khiển mặc định này trong ứng dụng này, vì vậy tôi đã chỉ định chúng ngoài nút vị trí người dùng.

00:25:19.000 --> 00:25:27.000
Tôi đã thêm tất cả những thứ này bằng cách sử dụng công cụ sửa đổi mapControls, vì vậy bản đồ sẽ tự động hiển thị chúng ở vị trí mặc định của chúng.

00:25:27.000 --> 00:25:35.000
Điều này bao gồm các điều khiển bản đồ trên tất cả các nền tảng, bao gồm MapZoomStepper và MapPitchSlider mà bạn sẽ tìm thấy trên macOS.

00:25:35.000 --> 00:25:40.000
Nếu bạn muốn tự định vị các điều khiển này, bạn có thể trình bày chúng trong giao diện người dùng của riêng mình.

00:25:40.000 --> 00:25:48.000
Các điều khiển Bản đồ chỉ đơn giản là các chế độ xem, vì vậy thay vì sử dụng công cụ sửa đổi mapControls, bạn chỉ cần thêm chúng như bất kỳ chế độ xem nào khác.

00:25:48.000 --> 00:25:54.000
Khi bạn làm điều này, bạn sẽ cần sử dụng công cụ sửa đổi mapScope để liên kết các điều khiển của bạn với một phạm vi Bản đồ cụ thể.

00:25:54.000 --> 00:26:00.000
Chúng ta sắp kết thúc bài thuyết trình, vì vậy hãy tóm tắt những gì chúng ta đã học được hôm nay.

00:26:00.000 --> 00:26:07.000
MapKit cho SwiftUI là một API cực kỳ mạnh mẽ, dễ sử dụng để tích hợp Maps vào ứng dụng của bạn.

00:26:07.000 --> 00:26:14.000
Nó cho phép bạn sử dụng Điểm đánh dấu, Chú thích và Lớp phủ để hiển thị nội dung của bạn trên bản đồ.

00:26:14.000 --> 00:26:18.000
Camera bản đồ và Điều khiển bản đồ cho phép bạn điều chỉnh bản đồ theo nhu cầu của mình.

00:26:18.000 --> 00:26:23.000
Cuối cùng, MapStyle và Look Around mang đến cho người dùng của bạn cảm giác thực sự về địa điểm.

00:26:23.000 --> 00:26:30.000
Đây chỉ là một số tính năng của MapKit cho SwiftUI, vì vậy hãy đảm bảo kiểm tra Tài liệu dành cho nhà phát triển để tìm hiểu thêm.

00:26:30.000 --> 00:26:36.000
Và tất nhiên, vì đây là SwiftUI, bản đồ của bạn sẽ trông tuyệt vời trên tất cả các nền tảng!

00:26:36.000 --> 00:26:38.000
Một vài suy nghĩ cuối cùng khi chúng ta kết thúc.

00:26:38.000 --> 00:26:44.000
Chúng tôi đã mở rộng API Máy chủ Apple Maps của mình để hỗ trợ Tự động hoàn thành và Chỉ đường.

00:26:44.000 --> 00:26:53.000
Để tìm hiểu thêm về cách sử dụng API Máy chủ của chúng tôi, hãy xem phiên lồng tiếng năm ngoái "Gặp gỡ API Máy chủ Apple Maps". Như mọi khi, chúng tôi rất muốn nghe phản hồi của bạn!

00:26:53.000 --> 00:26:57.000
Vui lòng sử dụng Trợ lý Phản hồi để chúng tôi nghe suy nghĩ của bạn.

00:26:57.000 --> 00:27:02.000
Cuối cùng, nhưng không kém phần quan trọng, tôi khuyến khích bạn kiểm tra các tính năng mới trong SwiftUI năm nay.

00:27:02.000 --> 00:27:06.000
Kế hoạch hoạt hình là một cách tuyệt vời để thêm hoạt ảnh vào bản đồ của bạn!

00:27:06.000 --> 00:27:09.000
Kiểm tra chúng trong phiên bên dưới.

00:27:09.000 --> 00:27:11.000
Thế là xong! Cảm ơn rất nhiều vì đã xem!

00:27:11.000 --> 00:27:14.000
Tôi sẽ gặp bạn ở bãi biển!

00:27:14.000 --> 23:59:59.000
♪ ♪

