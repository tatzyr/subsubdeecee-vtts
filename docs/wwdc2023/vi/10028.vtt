WEBVTT

00:00:01.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
Luca: Xin chào! Tên tôi là Luca và tôi là một kỹ sư trong nhóm SwiftUI.

00:00:15.000 --> 00:00:24.000
Hôm nay chúng ta sẽ thảo luận về cách bạn có thể đưa các vật dụng vào cuộc sống với một số khả năng mới, thú vị.

00:00:24.000 --> 00:00:39.000
Widget là một phần được yêu thích trong trải nghiệm iOS và macOS và bây giờ, với tính tương tác và hoạt ảnh, chúng thậm chí còn mạnh mẽ hơn.

00:00:39.000 --> 00:00:52.000
Tính tương tác cho phép người dùng của bạn thao tác trực tiếp dữ liệu trong tiện ích của bạn, tạo ra sự tương tác mạnh mẽ để thực hiện các hành động quan trọng nhất trong ứng dụng của bạn.

00:00:52.000 --> 00:01:03.000
Và hoạt ảnh đưa các tiện ích vào cuộc sống bằng cách giúp người dùng hiểu được nội dung đã thay đổi như thế nào và kết quả hành động của họ là gì.

00:01:03.000 --> 00:01:09.000
Tôi rất hào hứng với tất cả những khả năng mới này, vì vậy hãy bắt đầu.

00:01:09.000 --> 00:01:16.000
Đầu tiên, chúng tôi sẽ đề cập đến các hình ảnh động và cách dễ dàng để làm cho tiện ích của bạn trông tuyệt vời.

00:01:16.000 --> 00:01:23.000
Sau đó, tôi sẽ hướng dẫn bạn cách thêm tính tương tác vào các tiện ích của bạn.

00:01:23.000 --> 00:01:25.000
Hãy bắt đầu với hình ảnh động.

00:01:25.000 --> 00:01:36.000
Trong suốt cuộc nói chuyện này, chúng ta sẽ sử dụng một ứng dụng mà bạn tôi Nils đang làm việc để theo dõi lượng caffeine trong ngày.

00:01:36.000 --> 00:01:43.000
Nó đã có một tiện ích hiển thị tổng lượng caffeine và thức uống cuối cùng tôi uống hôm nay.

00:01:43.000 --> 00:01:58.000
Nếu tôi biên dịch lại tiện ích của mình với SDK mới nhất, mỗi khi nội dung của tiện ích thay đổi, hệ thống sẽ tạo hiệu ứng chuyển đổi giữa các mục nhập với hình ảnh động mặc định.

00:01:58.000 --> 00:02:10.000
Chúng tôi sẽ thêm một số chỉnh sửa ở đây để làm cho nó trông đẹp hơn, nhưng trước khi chúng tôi chuyển sang Xcode, hãy để tôi nói ngắn gọn về cách hoạt ảnh động với các tiện ích.

00:02:10.000 --> 00:02:16.000
Trong một ứng dụng SwiftUI thông thường, bạn sử dụng trạng thái để thúc đẩy các thay đổi đối với chế độ xem của mình.

00:02:16.000 --> 00:02:23.000
Và hình ảnh động được điều khiển bởi các đột biến trạng thái bằng cách sử dụng các công cụ sửa đổi như withAnimation.

00:02:23.000 --> 00:02:26.000
Nhưng Widgets hoạt động hơi khác một chút.

00:02:26.000 --> 00:02:29.000
Widget không có trạng thái.

00:02:29.000 --> 00:02:38.000
Thay vào đó, họ tạo ra một dòng thời gian được tạo thành từ các mục nhập, tương ứng với các chế độ xem khác nhau được hiển thị vào những thời điểm cụ thể.

00:02:38.000 --> 00:02:47.000
SwiftUI xác định những gì giống nhau và những gì khác nhau giữa các mục nhập, và làm sinh động các phần đã thay đổi.

00:02:47.000 --> 00:03:05.000
Theo mặc định, các tiện ích nhận được hoạt ảnh mùa xuân ngầm và các chuyển tiếp nội dung ngầm khác nhau, nhưng bạn có thể sử dụng tất cả các API chuyển tiếp, hoạt ảnh và chuyển tiếp nội dung mà SwiftUI cung cấp ngay lập tức để tùy chỉnh cách hoạt ảnh tiện ích của bạn.

00:03:05.000 --> 00:03:11.000
Tôi sẽ không đi sâu vào chi tiết hơn về cách hoạt hình nguyên thủy của SwiftUI hoạt động.

00:03:11.000 --> 00:03:37.000
Đối với điều đó, có một cuộc nói chuyện tuyệt vời được gọi là "Khám phá hoạt hình SwiftUI." Được rồi, đã đến lúc mở Xcode và chỉ cho bạn cách, với một vài chỉnh sửa, tiện ích của bạn có thể lạ mắt như nghệ thuật pha cà phê trên cappuccino buổi sáng của bạn và cách API Xem trước Xcode mới có thể giúp bạn lặp lại nhanh chóng trên các hình ảnh động này.

00:03:37.000 --> 00:03:41.000
Ở đây chúng tôi có tất cả các chế độ xem bao gồm tiện ích của tôi.

00:03:41.000 --> 00:03:53.000
Chế độ xem chính có VStack với hai chế độ xem, chế độ xem đầu tiên hiển thị tổng lượng caffeine và chế độ xem thứ hai, thức uống cuối cùng tôi uống hôm nay, nếu có.

00:03:53.000 --> 00:04:01.000
Lưu ý cách tôi đang sử dụng công cụ sửa đổi containerBackground ở đây để xác định nền cho tiện ích của mình.

00:04:01.000 --> 00:04:06.000
Điều này cho phép nó hiển thị ở tất cả các vị trí được hỗ trợ mới trên Mac và iPad.

00:04:06.000 --> 00:04:24.000
Thông thường, để có thể thấy tiện ích của bạn hoạt hình, bạn sẽ cần phải có một loạt các mục nhập và đợi thời điểm của chúng xuất hiện trên màn hình, nhưng điều đó có thể tẻ nhạt và sẽ làm bạn chậm lại, nhưng may mắn là chúng tôi có một giải pháp tuyệt vời với API Xem trước mới mà chúng tôi sẽ giới thiệu trong năm nay.

00:04:24.000 --> 00:04:35.000
Tôi có thể xác định bản xem trước mới cho một tiện ích trong systemSmall và chuyển loại xác định tiện ích của tôi.

00:04:35.000 --> 00:04:42.000
Và bây giờ tôi có thể chỉ định cách hiển thị dòng thời gian với một số mục nhập mà tôi đã xác định trước đó.

00:04:42.000 --> 00:04:50.000
Khi tôi làm điều đó trong khung vẽ, bây giờ tôi có thể xem bản xem trước dòng thời gian của mình và mọi mục nhập sẽ trông như thế nào.

00:04:50.000 --> 00:04:52.000
Nhưng hãy kiểm tra cái này!

00:04:52.000 --> 00:04:59.000
Khi tôi nhấp qua bản xem trước, tôi có thể thấy tiện ích của mình sẽ hoạt ảnh như thế nào khi chuyển đổi giữa các mục nhập.

00:04:59.000 --> 00:05:01.000
Điều này khá tuyệt!

00:05:01.000 --> 00:05:07.000
Và điều này chỉ làm trầy xước bề mặt của những gì API Xem trước mới này có khả năng.

00:05:07.000 --> 00:05:16.000
Đảm bảo kiểm tra phiên "Xây dựng giao diện người dùng có lập trình với Bản xem trước Xcode" để tìm hiểu thêm về API mạnh mẽ mới này.

00:05:16.000 --> 00:05:20.000
Được rồi, đã đến lúc bắt đầu điều chỉnh những hình ảnh động này.

00:05:20.000 --> 00:05:26.000
Điều đầu tiên tôi muốn làm là bắt đầu với văn bản cho lượng caffeine.

00:05:26.000 --> 00:05:34.000
Ngay bây giờ nó chỉ mờ dần với giá trị tiếp theo, nhưng tôi thực sự muốn thêm một số kịch tính vào giá trị đang tăng lên.

00:05:34.000 --> 00:05:44.000
Trong trường hợp này, chế độ xem không thay đổi, mà chỉ có nội dung văn bản và để hoạt hình, chúng ta có thể sử dụng chuyển đổi nội dung.

00:05:44.000 --> 00:05:51.000
Và tôi sẽ chọn thêm một văn bản số với giá trị caffeine của tôi.

00:05:51.000 --> 00:06:02.000
Đây là một quá trình chuyển đổi nội dung được thực hiện đặc biệt cho giá trị số quan trọng mà chúng tôi muốn tạo sự nổi bật khi chúng thay đổi.

00:06:02.000 --> 00:06:05.000
Tôi nghĩ nó trông thật tuyệt!

00:06:05.000 --> 00:06:11.000
Bây giờ, tôi muốn tập trung vào khung cảnh cho thấy đồ uống cuối cùng.

00:06:11.000 --> 00:06:16.000
Tôi muốn thêm một sự chuyển đổi để nhấn mạnh rằng một thức uống mới sắp ra mắt.

00:06:16.000 --> 00:06:27.000
Điều đầu tiên tôi muốn làm là sử dụng công cụ sửa đổi ID để liên kết danh tính của chế độ xem này với nhật ký cụ thể mà nó đang hiển thị.

00:06:27.000 --> 00:06:35.000
Điều này sẽ thông báo cho SwiftUI rằng bất cứ khi nào nhật ký này thay đổi, đây là chế độ xem mới và chúng ta cần chuyển sang chế độ xem mới.

00:06:35.000 --> 00:06:41.000
Và bây giờ tôi có thể chỉ định một quá trình chuyển đổi. Tôi nghĩ một cú hích sẽ tốt.

00:06:41.000 --> 00:06:43.000
Từ rìa nào?

00:06:43.000 --> 00:06:49.000
Tôi nghĩ từ dưới lên là một lựa chọn tốt.

00:06:49.000 --> 00:06:57.000
Được rồi, bạn đã biết phải làm gì bây giờ. Quay lại khung xem trước.

00:06:57.000 --> 00:07:01.000
Và vâng, tôi thích sự chuyển đổi này từ phía dưới.

00:07:01.000 --> 00:07:03.000
Một tinh chỉnh cuối cùng.

00:07:03.000 --> 00:07:11.000
Tôi cảm thấy hơi bồn chồn khi uống nhiều cà phê như vậy, và tôi muốn điều đó được phản ánh với đường cong hoạt hình cho quá trình chuyển đổi này.

00:07:11.000 --> 00:07:32.000
Điều tuyệt vời là, giống như trong một ứng dụng SwiftUI thông thường, tôi có thể sử dụng công cụ sửa đổi hoạt hình và chọn một lò xo mượt mà với thời lượng ngắn hơn và liên kết hoạt ảnh đó với giá trị nhật ký của tôi.

00:07:32.000 --> 00:07:36.000
Và bây giờ, hình ảnh động sẽ phù hợp với caffein của tôi.

00:07:36.000 --> 00:07:42.000
Tôi cảm thấy khá tốt về những gì chúng ta có bây giờ, vì vậy hãy chuyển sự chú ý của chúng ta sang tính tương tác.

00:07:42.000 --> 00:07:48.000
Với tính tương tác, bạn có thể thực hiện các hành động ngay từ tiện ích!

00:07:48.000 --> 00:07:55.000
Trước khi chúng ta chuyển sang Xcode, tôi muốn dành một chút thời gian để thảo luận về kiến trúc của cách các vật dụng hoạt động.

00:07:55.000 --> 00:08:02.000
Điều này sẽ cho phép bạn tạo ra một mô hình tinh thần tốt hơn về cách thức hoạt động của tính tương tác.

00:08:02.000 --> 00:08:12.000
Khi bạn tạo một tiện ích, bạn xác định một tiện ích mở rộng tiện ích, được hệ thống phát hiện và chạy như một quy trình độc lập.

00:08:12.000 --> 00:08:20.000
Widgets xác định một nhà cung cấp dòng thời gian trả về một loạt các mục nhập, đó thực sự là mô hình của widget.

00:08:20.000 --> 00:08:29.000
Nếu một tiện ích hiển thị, hệ thống sẽ khởi chạy quy trình mở rộng tiện ích và yêu cầu nhà cung cấp dòng thời gian của nó cho các mục nhập.

00:08:29.000 --> 00:08:40.000
Các mục nhập này được đưa trở lại trình tạo chế độ xem là một phần của cấu hình tiện ích của bạn và được sử dụng để tạo một loạt các chế độ xem dựa trên các mục nhập này.

00:08:40.000 --> 00:08:47.000
Sau đó, hệ thống tạo ra một đại diện của các chế độ xem này và lưu trữ nó trên đĩa.

00:08:47.000 --> 00:08:57.000
Khi đến lúc hiển thị một mục nhập cụ thể, hệ thống sẽ giải mã và hiển thị biểu diễn được lưu trữ của tiện ích của bạn trong quá trình của nó.

00:08:57.000 --> 00:09:03.000
Hãy để tôi tạm dừng một chút và nhắc lại điểm cuối cùng này.

00:09:03.000 --> 00:09:07.000
Mã xem của bạn chỉ chạy trong quá trình lưu trữ.

00:09:07.000 --> 00:09:12.000
Một đại diện riêng biệt của chế độ xem đó được hiển thị bởi quy trình hệ thống.

00:09:12.000 --> 00:09:18.000
Nhưng nếu dữ liệu của bạn không tĩnh, bạn có thể muốn cập nhật các mục đó.

00:09:18.000 --> 00:09:28.000
Bạn có thể làm điều đó bằng cách gọi chức năng reloadTimelines trong ứng dụng của mình bất cứ khi nào bạn cập nhật dữ liệu được hiển thị bởi tiện ích của mình.

00:09:28.000 --> 00:09:37.000
Điều này sẽ lặp lại quá trình tôi vừa mô tả, tạo lại các mục mới và lưu trữ các bản sao mới của chế độ xem trên đĩa.

00:09:37.000 --> 00:09:41.000
Có ba điều quan trọng rút ra với kiến trúc này.

00:09:41.000 --> 00:09:47.000
Đầu tiên, khi tiện ích của bạn hiển thị, mã của bạn không chạy.

00:09:47.000 --> 00:09:56.000
Bạn thúc đẩy các thay đổi đối với nội dung tiện ích bằng cách cập nhật các mục dòng thời gian của nó và điều này cũng đúng với các tiện ích tương tác.

00:09:56.000 --> 00:10:10.000
Thông thường, các bản cập nhật cho các tiện ích được thực hiện trên cơ sở nỗ lực tốt nhất, nhưng quan trọng là, việc tải lại bắt đầu từ một tương tác luôn được đảm bảo xảy ra.

00:10:10.000 --> 00:10:15.000
Với điều này, hãy xem cách thêm tính tương tác.

00:10:15.000 --> 00:10:25.000
Điều tuyệt vời là bạn có thể sử dụng các điều khiển mà bạn đã quen thuộc, như Nút và Chuyển đổi, để làm cho một phần tiện ích của bạn tương tác.

00:10:25.000 --> 00:10:36.000
Nhưng hãy nhớ rằng, vì các tiện ích được hiển thị trong một quy trình khác, SwiftUI sẽ không thực hiện đóng của bạn, cũng như không biến đổi các ràng buộc của bạn, trong không gian quy trình của bạn.

00:10:36.000 --> 00:10:45.000
Vì vậy, chúng ta cần một cách để thể hiện các hành động có thể được thực hiện bởi tiện ích mở rộng và được hệ thống gọi.

00:10:45.000 --> 00:10:51.000
Rất may, đã có một giải pháp cho vấn đề này: Ý định ứng dụng.

00:10:51.000 --> 00:10:58.000
Bạn có thể đã sử dụng ý định của ứng dụng để hiển thị các hành động cho ứng dụng của mình cho Phím tắt hoặc Siri.

00:10:58.000 --> 00:11:05.000
Và bây giờ, cùng một ý định có thể được sử dụng để thể hiện các hành động trong tiện ích của bạn.

00:11:05.000 --> 00:11:15.000
Về cốt lõi, AppIntent là một giao thức cho phép bạn xác định, bằng mã, các hành động có thể được thực hiện bởi hệ thống.

00:11:15.000 --> 00:11:22.000
Ví dụ, ở đây, tôi đang xác định một ứng dụng có ý định chuyển đổi một mục việc cần làm trong một ứng dụng việc cần làm.

00:11:22.000 --> 00:11:34.000
Một ý định xác định một số tham số là đầu vào và một hàm không đồng bộ được gọi là perform, nơi bạn sẽ có logic kinh doanh để chạy ý định của mình.

00:11:34.000 --> 00:11:52.000
Ý định ứng dụng rất mạnh mẽ và có rất nhiều điều cần biết về chúng, vì vậy hãy nhớ kiểm tra các phiên "Đi sâu vào ý định ứng dụng" và "Khám phá các cải tiến cho ý định ứng dụng" từ WWDC22 và 23.

00:11:52.000 --> 00:12:15.000
Và để hỗ trợ khả năng thực thi App Intent ngay từ giao diện người dùng, khi bạn nhập cả SwiftUI và AppIntents, có một họ trình khởi tạo mới trên Button và Toggle chấp nhận AppIntent làm đối số và sẽ thực hiện ý định đó khi các điều khiển này được tương tác.

00:12:15.000 --> 00:12:21.000
Lưu ý rằng chỉ có Nút và Chuyển đổi sử dụng AppIntent được hỗ trợ trong các tiện ích tương tác.

00:12:21.000 --> 00:12:24.000
Các điều khiển khác sẽ không hoạt động.

00:12:24.000 --> 00:12:35.000
Và tất nhiên, những trình khởi tạo đó cũng hoạt động trong các ứng dụng, điều này thật tuyệt vì bạn có thể chia sẻ logic ý định ứng dụng giữa tiện ích và ứng dụng của mình.

00:12:35.000 --> 00:12:41.000
Hãy quay lại Xcode và ứng dụng theo dõi cà phê của chúng tôi và thêm một số tính tương tác.

00:12:41.000 --> 00:13:00.000
Hiện tại, người dùng chỉ có thể đăng nhập đồ uống mới bằng cách mở ứng dụng, nhưng nơi tiện ích tương tác tỏa sáng là trình tăng tốc để hiển thị các hành động quan trọng nhất trong ứng dụng của bạn và đối với ứng dụng của tôi, đây chắc chắn là việc ghi nhật ký đồ uống mới.

00:13:00.000 --> 00:13:03.000
Vì vậy, hãy thêm nó vào một tệp mà tôi đã tạo.

00:13:03.000 --> 00:13:11.000
Điều đầu tiên tôi muốn làm là xác định một loại phù hợp với AppIntent để đăng nhập một thức uống mới.

00:13:11.000 --> 00:13:26.000
Chúng tôi sẽ cung cấp cho nó một tiêu đề có thể đọc được của con người mà hệ thống có thể sử dụng và sau đó thực hiện các yêu cầu thực hiện bằng cách đăng nhập một tách cà phê espresso vào cửa hàng của chúng tôi và trả lại kết quả ý định trống.

00:13:26.000 --> 00:13:44.000
Một điều mà tôi muốn thu hút sự chú ý của bạn là thực hiện là một chức năng không đồng bộ và bạn nên tận dụng tối đa nó nếu bạn đang làm bất kỳ công việc không đồng bộ nào, chẳng hạn như ghi vào cơ sở dữ liệu giống hệt như tôi đang làm ở đây khi tôi đang chờ thao tác ghi nhật ký.

00:13:44.000 --> 00:13:56.000
Ngay sau khi hiệu suất của bạn trở lại, hệ thống sẽ ngay lập tức bắt đầu tải lại dòng thời gian tiện ích của bạn, cho bạn cơ hội cập nhật nội dung tiện ích của mình.

00:13:56.000 --> 00:14:07.000
Vì vậy, một lần nữa, hãy đảm bảo duy trì tất cả thông tin cần thiết để tải lại tiện ích cập nhật của bạn trước khi quay lại từ buổi biểu diễn.

00:14:07.000 --> 00:14:15.000
Tôi đã mã hóa đồ uống là cà phê espresso, nhưng, tất nhiên, chúng tôi muốn có thể chuyển đồ uống cụ thể để đăng nhập.

00:14:15.000 --> 00:14:24.000
Để làm điều đó, chúng ta có thể thêm một thuộc tính được lưu trữ với trình bao bọc thuộc tính @Parameter và trình khởi tạo điền vào tất cả các tham số.

00:14:24.000 --> 00:14:39.000
Điều quan trọng là tôi sử dụng trình bao bọc thuộc tính này vì chỉ những thuộc tính được lưu trữ được chú thích với nó mới được duy trì và sẽ có sẵn khi ý định được thực hiện trong tiện ích mở rộng tiện ích của bạn.

00:14:39.000 --> 00:14:48.000
Trước khi chúng tôi thêm nút để gọi ý định này, tôi muốn làm nổi bật lợi ích hệ sinh thái quan trọng của việc sử dụng App Intents tại đây.

00:14:48.000 --> 00:15:02.000
Mục đích ứng dụng này mà tôi vừa xác định sẽ có sẵn trong Phím tắt và Siri, vì vậy khoản đầu tư vào việc xác định nó ở đây sẽ trả cổ tức cho trải nghiệm người dùng của bạn ngoài các tiện ích.

00:15:02.000 --> 00:15:06.000
Và bây giờ chúng tôi đã sẵn sàng để thêm nút vào tiện ích.

00:15:06.000 --> 00:15:10.000
Hãy tạo một chế độ xem mới bằng cách giữ các nút của chúng tôi.

00:15:10.000 --> 00:15:18.000
Trong chế độ xem này, tôi đang sử dụng trình khởi tạo nút này có ý định ứng dụng, vì vậy chúng tôi có thể chuyển cái mà chúng tôi vừa xác định.

00:15:18.000 --> 00:15:24.000
Và hãy thêm chế độ xem này vào phần còn lại của tiện ích với một số miếng đệm.

00:15:24.000 --> 00:15:32.000
Bây giờ chúng ta đã có mọi thứ tại chỗ, hãy xem điều này hoạt động như thế nào trên tiện ích bằng cách xây dựng và chạy.

00:15:32.000 --> 00:15:43.000
Một mẹo nhỏ ở đây: bạn thực sự có thể trực tiếp xây dựng mục tiêu cho tiện ích mở rộng tiện ích và Xcode sẽ cài đặt tiện ích ngay trên màn hình chính cho bạn.

00:15:43.000 --> 00:15:47.000
Tiện ích của tôi bây giờ có nút tôi vừa xác định.

00:15:47.000 --> 00:15:52.000
Nếu tôi chạm vào nó, tôi có thể ghi lại tách cà phê espresso cuối cùng này.

00:15:52.000 --> 00:16:00.000
Nhưng cũng có một thay đổi bổ sung mà tôi muốn thực hiện để tiện ích của tôi cung cấp trải nghiệm người dùng tốt nhất có thể.

00:16:00.000 --> 00:16:06.000
Khi ý định ứng dụng của bạn kết thúc để thực hiện, nó sẽ khiến một tiện ích tải lại dòng thời gian của nó.

00:16:06.000 --> 00:16:12.000
Điều này có thể giới thiệu một độ trễ nhỏ từ hành động, đến sự thay đổi kết quả trong giao diện người dùng.

00:16:12.000 --> 00:16:21.000
Nhưng độ trễ này có thể trở nên rõ rệt hơn với tiện ích iPhone trên Mac vì vậy chúng tôi đang cung cấp một giải pháp ngay lập tức cho nó.

00:16:21.000 --> 00:16:31.000
Ví dụ, trong tiện ích của tôi, giá trị hiển thị tổng lượng caffeine sẽ không cập nhật cho đến khi một mục cập nhật đến.

00:16:31.000 --> 00:16:36.000
Chúng tôi có thể chú thích chế độ xem này bằng công cụ sửa đổi invalidatableContent.

00:16:36.000 --> 00:16:40.000
Tôi đã thêm tiện ích này từ iPhone vào máy Mac của mình.

00:16:40.000 --> 00:16:44.000
Hãy nhấn vào nút.

00:16:44.000 --> 00:16:54.000
Chế độ xem cho thấy lượng caffeine cho thấy hiệu ứng hệ thống để chỉ ra rằng giá trị của nó bị vô hiệu cho đến khi có bản cập nhật.

00:16:54.000 --> 00:17:04.000
Chúng tôi vừa thấy Button đang hoạt động và cách với công cụ sửa đổi invalidatableContent, bạn có thể giúp người dùng cải thiện nhận thức về độ trễ.

00:17:04.000 --> 00:17:06.000
Sử dụng công cụ sửa đổi này một cách thận trọng.

00:17:06.000 --> 00:17:11.000
Bạn không cần chú thích mọi chế độ xem có thể thay đổi.

00:17:11.000 --> 00:17:19.000
Bạn nên sử dụng công cụ sửa đổi này với các chế độ xem có ý nghĩa để đặt kỳ vọng phù hợp với người dùng của mình.

00:17:19.000 --> 00:17:32.000
Toggle tiến thêm một bước nữa và sẽ cập nhật một cách lạc quan bản trình bày của nó khi được tương tác mà không cần phải đợi một chuyến đi khứ hồi đến tiện ích mở rộng tiện ích và quay lại.

00:17:32.000 --> 00:17:42.000
Điều này được thực hiện tự động, thay mặt bạn, tại thời điểm lưu trữ, bằng cách kết xuất trước kiểu chuyển đổi trong cả hai cấu hình.

00:17:42.000 --> 00:17:53.000
Đảm bảo, nếu bạn xác định kiểu chuyển đổi của riêng mình, để kiểm tra thuộc tính cấu hình isOn từ kiểu và sử dụng nó để chuyển đổi giao diện.

00:17:53.000 --> 00:17:58.000
Điều này kết thúc tổng quan của chúng tôi về tính tương tác và hoạt ảnh.

00:17:58.000 --> 00:18:16.000
Với hình ảnh động và tính tương tác, bạn có cơ hội truyền sức sống mới vào các tiện ích của mình và với các tiện ích hiện có ở tất cả các vị trí mới này, bạn có thể mang những tương tác nhỏ, thú vị này đến cho người dùng của mình mọi lúc mọi nơi.

00:18:16.000 --> 00:18:38.000
Vì vậy, hãy đảm bảo tinh chỉnh hình ảnh động cho các tiện ích của bạn với sự trợ giúp của API Xem trước Xcode mới và tìm kiếm các hành động quan trọng nhất trong ứng dụng của bạn và hiển thị chúng trong tiện ích của bạn, mang lại cho người dùng các tương tác mạnh mẽ bất cứ khi nào và bất cứ nơi nào họ cần.

00:18:38.000 --> 00:18:39.000
Cảm ơn bạn!

00:18:39.000 --> 23:59:59.000
♪ ♪

