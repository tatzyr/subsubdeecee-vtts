WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
Michael: Xin chào và chào mừng.

00:00:11.000 --> 00:00:18.000
Tôi là Michael Ochs và trong video này tôi sẽ nói về cách xây dựng các ứng dụng tập trung vào tài liệu tốt hơn.

00:00:18.000 --> 00:00:23.000
Các ứng dụng lấy tài liệu làm trung tâm là một phần quan trọng của các công cụ năng suất, đặc biệt là trên iPad.

00:00:23.000 --> 00:00:26.000
Có ba loại ứng dụng tập trung vào tài liệu.

00:00:26.000 --> 00:00:42.000
Những thứ cho phép duyệt tài liệu, chẳng hạn như ứng dụng Tệp; những thứ cho phép xem nội dung, ví dụ như Xem nhanh; và những thứ cũng cho phép chỉnh sửa hoặc tạo nội dung, như Pages, Keynote hoặc Numbers.

00:00:42.000 --> 00:00:50.000
Video này tập trung vào các cải tiến đối với ứng dụng người xem và biên tập, nhưng một số nội dung được thảo luận cũng áp dụng cho các ứng dụng trình duyệt.

00:00:50.000 --> 00:00:58.000
iPadOS 17 giới thiệu bộ điều khiển chế độ xem mới tự động kích hoạt một số lượng lớn các tính năng trong ứng dụng của bạn.

00:00:58.000 --> 00:01:07.000
Nó hoạt động tốt cùng với các API iPad cấp máy tính để bàn được giới thiệu trong iPadOS 16 và các API tập trung vào tài liệu hiện có.

00:01:07.000 --> 00:01:10.000
Bộ điều khiển chế độ xem mới này được xây dựng theo cách mô-đun.

00:01:10.000 --> 00:01:16.000
Bạn nhận được các mặc định hệ thống tuyệt vời, nhưng có thể tùy chỉnh bất kỳ hành vi cá nhân nào.

00:01:16.000 --> 00:01:27.000
Để bắt kịp các API iPad cấp máy tính để bàn, hãy xem 'Gặp gỡ iPad cấp máy tính để bàn' và 'Xây dựng ứng dụng iPad cấp máy tính để bàn' từ WWDC22.

00:01:27.000 --> 00:01:34.000
Để phát triển SwiftUI, DocumentGroup hiện có hỗ trợ cho tất cả các tính năng này mà không cần mã bổ sung.

00:01:34.000 --> 00:01:48.000
Để tìm hiểu thêm về khía cạnh SwiftUI của điều này, hãy xem 'Xây dựng các ứng dụng dựa trên tài liệu trong SwiftUI' từ WWDC20 và 'SwiftUI trên iPad: Thêm thanh công cụ, tiêu đề và hơn thế nữa' từ WWDC22.

00:01:48.000 --> 00:01:51.000
Trong UIKit, chức năng là chọn tham gia.

00:01:51.000 --> 00:01:56.000
UIDocumentViewController là một lớp cơ sở mới cho bộ điều khiển chế độ xem nội dung.

00:01:56.000 --> 00:02:01.000
Nó hoạt động cùng với UIDocument để tự động định cấu hình thanh điều hướng.

00:02:01.000 --> 00:02:07.000
Điều này cho phép các tính năng như chia sẻ, kéo tài liệu, hoàn tác và làm lại hỗ trợ, v.v.

00:02:07.000 --> 00:02:10.000
Nó cũng hỗ trợ đổi tên tự động.

00:02:10.000 --> 00:02:18.000
Trong video này, bạn sẽ học cách sử dụng UIDocument và cách trình bày tài liệu với UIDocumentViewController.

00:02:18.000 --> 00:02:24.000
Sau đó tôi sẽ giải thích những tính năng nào được tích hợp sẵn và cách tùy chỉnh chúng hơn nữa.

00:02:24.000 --> 00:02:32.000
Cuối cùng, tôi khám phá một số phương pháp hay nhất để di chuyển các ứng dụng hiện có của bạn để tận dụng UIDocument.

00:02:32.000 --> 00:02:36.000
Đầu tiên, tạo một tài liệu.

00:02:36.000 --> 00:02:40.000
Cốt lõi của mọi ứng dụng dựa trên tài liệu là UIDocument.

00:02:40.000 --> 00:02:46.000
Đó là một lớp cơ sở trừu tượng có nghĩa là được phân loại con cho mỗi loại tệp mà ứng dụng của bạn hỗ trợ.

00:02:46.000 --> 00:02:49.000
Tất cả UIDocuments được hỗ trợ bởi một URL.

00:02:49.000 --> 00:02:57.000
Các tệp trên đĩa là phổ biến nhất, nhưng bạn cũng có thể lưu và tải tài liệu của mình bằng cách sử dụng cơ sở dữ liệu và sơ đồ URL tùy chỉnh.

00:02:57.000 --> 00:03:04.000
Các hoạt động tải và lưu của UIDocument không đồng bộ, cho phép các thao tác đọc và ghi dài, nếu cần.

00:03:04.000 --> 00:03:12.000
Vì lý do này, UIDocument là luồng an toàn và đảm nhận việc phối hợp truy cập thông qua các khóa và hàng đợi.

00:03:12.000 --> 00:03:25.000
Khi triển khai lớp con UIDocument, có hai trách nhiệm chính cần đảm nhận: tải và lưu tài liệu và cung cấp quyền truy cập vào nội dung của tài liệu.

00:03:25.000 --> 00:03:29.000
Tải và lưu rất giống nhau trên tất cả các tài liệu.

00:03:29.000 --> 00:03:35.000
Truy cập nội dung cụ thể hơn cho loại tài liệu và cách nó được sử dụng trong ứng dụng của bạn.

00:03:35.000 --> 00:03:47.000
Ví dụ, một mô hình tài liệu cho trình chỉnh sửa đánh dấu có thể chỉ có một thuộc tính văn bản duy nhất; hoặc nó có thể hiển thị một giao diện phức tạp hơn cho phép cập nhật các phần riêng lẻ của tài liệu.

00:03:47.000 --> 00:03:53.000
Trước khi chúng ta nói nhiều hơn về việc truy cập nội dung, hãy nói về việc tải và lưu.

00:03:53.000 --> 00:03:58.000
Đối với các tài liệu đơn giản, dựa trên tệp, có hai phương pháp tiện lợi mà bạn có thể ghi đè.

00:03:58.000 --> 00:04:05.000
Khi một tài liệu được mở, 'loadFromContents:ofType:' sẽ được gọi với nội dung của tệp.

00:04:05.000 --> 00:04:12.000
Khi tài liệu đang được lưu, 'contentsForType:' được gọi để lấy nội dung hiện tại của tài liệu.

00:04:12.000 --> 00:04:19.000
Nội dung của tài liệu là một đối tượng Dữ liệu cho các tệp thông thường hoặc một FileWrapper cho mọi thứ khác.

00:04:19.000 --> 00:04:26.000
Để tìm hiểu thêm về các loại tệp và cách chúng hoạt động, hãy xem Tech Talk 'Uniform Type Identifiers - giới thiệu lại'.

00:04:26.000 --> 00:04:32.000
Ví dụ ở đây, tài liệu xử lý các tệp đánh dấu thông thường, vì vậy chúng tôi mong đợi một đối tượng dữ liệu.

00:04:32.000 --> 00:04:43.000
Bây giờ, nếu bạn muốn kiểm soát hoàn toàn, việc ghi đè 'saveToURL:forSaveOperation:' và 'readFromURL:' thay vào đó cho phép bạn toàn quyền truy cập vào URL và để lại tất cả việc đọc và viết cho bạn.

00:04:43.000 --> 00:04:51.000
Điều này thật tuyệt nếu bạn muốn lưu trữ tài liệu của mình trong cơ sở dữ liệu hoặc có các yêu cầu đặc biệt để đọc và viết tài liệu của mình.

00:04:51.000 --> 00:04:58.000
Lưu ý rằng trong khi thao tác lưu không đồng bộ, việc đọc dự kiến sẽ hoàn tất vào thời điểm phương thức trả về.

00:04:58.000 --> 00:05:02.000
Và đây là tất cả những gì cần tải và lưu một tài liệu.

00:05:02.000 --> 00:05:06.000
Bây giờ hãy đảm bảo rằng chúng ta có cách truy cập nội dung của tài liệu.

00:05:06.000 --> 00:05:12.000
Một cách dễ dàng để cung cấp quyền truy cập vào nội dung của tài liệu là thêm các thuộc tính cho nội dung đó.

00:05:12.000 --> 00:05:18.000
Trong ví dụ này, tôi thêm một thuộc tính văn bản duy nhất có chứa chuỗi đánh dấu đầy đủ.

00:05:18.000 --> 00:05:24.000
Thuộc tính này sẽ được thiết lập khi tải tài liệu ban đầu, như đã thảo luận trên các trang trình bày trước đó.

00:05:24.000 --> 00:05:29.000
Ứng dụng sau đó có thể cập nhật văn bản này bất cứ khi nào người dùng chỉnh sửa tài liệu.

00:05:29.000 --> 00:05:37.000
Để UIDocument biết khi nào nó yêu cầu lưu, hãy gọi 'updateChangeCount:' mỗi khi tài sản cập nhật.

00:05:37.000 --> 00:05:47.000
Gọi 'updateChangeCount:' cho phép UIDocument đánh dấu tài liệu là tiết kiệm nhu cầu và tự động lưu vào những thời điểm thích hợp.

00:05:47.000 --> 00:05:53.000
Tiếp theo, trình bày một tài liệu với UIDocumentViewController mới.

00:05:53.000 --> 00:06:01.000
Tương tự như UIDocument, UIDocumentViewController cũng là một lớp cơ sở trừu tượng có nghĩa là được phân lớp con.

00:06:01.000 --> 00:06:10.000
Nó quản lý việc mở, lưu và đóng tài liệu và điền vào mục điều hướng của nó với thông tin từ tài liệu liên quan của nó.

00:06:10.000 --> 00:06:18.000
Điều này bao gồm tiêu đề, menu tiêu đề của mục điều hướng, đối tượng UIDocumentProperties và đại diện đổi tên.

00:06:18.000 --> 00:06:24.000
UIDocumentViewController cũng cung cấp các lệnh khóa cho các hành động phổ biến như hoàn tác và làm lại.

00:06:24.000 --> 00:06:30.000
Hãy cùng xem cách triển khai lớp con UIDocumentViewController.

00:06:30.000 --> 00:06:33.000
Có hai phương thức được thiết kế để bị ghi đè bởi lớp con của bạn.

00:06:33.000 --> 00:06:43.000
Khi tài liệu được liên kết với bộ điều khiển chế độ xem được mở hoặc khi một tài liệu đã mở được gán cho bộ điều khiển chế độ xem, 'documentDidOpen' được gọi.

00:06:43.000 --> 00:06:49.000
Điền chế độ xem của bộ điều khiển chế độ xem để hiển thị nội dung của tài liệu theo phương pháp này.

00:06:49.000 --> 00:06:56.000
Lưu ý rằng không có đảm bảo thời gian giữa khi 'documentDidOpen' được gọi và khi chế độ xem của bộ điều khiển chế độ xem được tải.

00:06:56.000 --> 00:07:05.000
Một cách tiếp cận tốt để viết mã mạnh mẽ là di chuyển cấu hình chế độ xem theo phương thức riêng của nó và gọi nó từ cả hai, 'documentDidOpen' cũng như 'viewDidLoad'.

00:07:05.000 --> 00:07:13.000
Kiểm tra xem chế độ xem đã được tải và tài liệu đã được mở chưa, trước khi định cấu hình chế độ xem của bạn.

00:07:13.000 --> 00:07:17.000
Phương pháp thứ hai để ghi đè là 'navigationItemDidUpdate'.

00:07:17.000 --> 00:07:24.000
Bất cứ khi nào UIDocumentViewController thực hiện thay đổi đối với mục điều hướng, nó sẽ gọi phương thức này.

00:07:24.000 --> 00:07:27.000
Thêm tùy chỉnh mục điều hướng của bạn vào đó.

00:07:27.000 --> 00:07:35.000
'UIDocumentViewController' sẽ nỗ lực hết sức để giữ các thay đổi ở mức tối thiểu để duy trì các thay đổi của bạn tốt nhất có thể.

00:07:35.000 --> 00:07:39.000
UIDocumentViewController cũng cung cấp một 'undoRedoItemGroup'.

00:07:39.000 --> 00:07:48.000
Đặt nhóm này vào thanh điều hướng nếu bạn muốn các nút hoàn tác và làm lại xuất hiện và đảm bảo rằng tài liệu của bạn có trình quản lý hoàn tác được gán cho nó.

00:07:48.000 --> 00:08:00.000
UIDocumentViewController sẽ thay đổi thuộc tính 'ẩn' của nhóm này tùy thuộc vào tính khả dụng của trình quản lý hoàn tác và bật hoặc tắt các nút bên trong nhóm khi cần thiết.

00:08:00.000 --> 00:08:03.000
UIDocumentViewController tự động mở và đóng tài liệu.

00:08:03.000 --> 00:08:11.000
Tuy nhiên nếu bạn cần quyền truy cập vào tài liệu từ bên ngoài bộ điều khiển chế độ xem, hãy gọi 'openDocumentWithCompletionHandler'.

00:08:11.000 --> 00:08:21.000
UIDocumentViewController sẽ thực hiện tất cả các cuộc gọi lại cần thiết, chẳng hạn như gọi 'documentDidOpen' và gọi trình xử lý hoàn thành của bạn khi sẵn sàng.

00:08:21.000 --> 00:08:26.000
Cuối cùng nhưng không kém phần quan trọng, UIDocumentViewController cung cấp một thuộc tính tài liệu.

00:08:26.000 --> 00:08:32.000
Thuộc tính này luôn đề cập đến tài liệu được liên kết với bộ điều khiển chế độ xem.

00:08:32.000 --> 00:08:36.000
Mặc dù bạn có thể cung cấp một tài liệu trong quá trình khởi tạo, nhưng nó hoàn toàn là tùy chọn.

00:08:36.000 --> 00:08:42.000
Khi không có tài liệu nào được liên kết với bộ điều khiển chế độ xem, nó sẽ tự động hiển thị trạng thái trống.

00:08:42.000 --> 00:08:47.000
Để tìm hiểu thêm về cấu hình trạng thái trống, hãy xem "Có gì mới trong UIKit".

00:08:47.000 --> 00:08:53.000
Hơn nữa, UIDocumentViewController có thể được sử dụng làm bộ điều khiển chế độ xem gốc của ứng dụng của bạn.

00:08:53.000 --> 00:09:03.000
Nếu không có bộ điều khiển chế độ xem trình duyệt trong hệ thống phân cấp, UIDocumentViewController sẽ đặt một nút tài liệu vào thanh điều hướng để mở bộ chọn tài liệu.

00:09:03.000 --> 00:09:15.000
Điều này yêu cầu khai báo khóa 'UIDocumentClass' cho loại tệp có liên quan trong info.plist của ứng dụng của bạn và đặt nó thành lớp con UIDocument phù hợp với loại tệp đó.

00:09:15.000 --> 00:09:27.000
Trong iPadOS 17, UIDocument phù hợp với 'UINavigationItemRenameDelegate' và sẽ tự xử lý các thay đổi tệp cơ bản khi người dùng gọi đổi tên từ menu tiêu đề.

00:09:27.000 --> 00:09:38.000
Nếu bạn đang sử dụng UIDocumentViewController, nó sẽ tự động định cấu hình đổi tên cho bạn, nếu không bạn có thể đặt tài liệu làm đại diện đổi tên của mục điều hướng theo cách thủ công.

00:09:38.000 --> 00:09:43.000
Đây là tất cả những phần bạn cần để tạo ra một ứng dụng tập trung vào tài liệu tuyệt vời trong iPadOS 17.

00:09:43.000 --> 00:09:48.000
Tiếp theo, cách di chuyển các ứng dụng hiện có của bạn.

00:09:48.000 --> 00:09:55.000
Di chuyển ứng dụng của bạn để sử dụng UIDocumentViewController mới thật dễ dàng và chỉ cần ba bước.

00:09:55.000 --> 00:09:59.000
Đầu tiên, cập nhật lớp cơ sở của bộ điều khiển chế độ xem nội dung của bạn.

00:09:59.000 --> 00:10:04.000
Thứ hai, di chuyển mã hiện có sang các cuộc gọi lại mới.

00:10:04.000 --> 00:10:08.000
Và thứ ba, xóa mã không còn cần thiết nữa.

00:10:08.000 --> 00:10:15.000
Hãy xem cách chuyển đổi ví dụ trình chỉnh sửa đánh dấu mà chúng tôi sử dụng trong các video ứng dụng iPad cấp máy tính để bàn.

00:10:15.000 --> 00:10:17.000
Nếu bạn không quen thuộc với nó, đừng lo lắng.

00:10:17.000 --> 00:10:22.000
Tôi sẽ hướng dẫn bạn các phần liên quan của mã hiện có trước.

00:10:22.000 --> 00:10:35.000
Vì vậy, ở đây chúng tôi có định nghĩa của bộ điều khiển chế độ xem ở trên cùng, thuộc tính tài liệu mà nó xác định và phương thức init đặt tài liệu ban đầu và sau đó thêm lệnh gọi lại vào tài liệu của chúng tôi.

00:10:35.000 --> 00:10:41.000
Đầu tiên chúng ta thay đổi lớp cơ sở thành UIDocumentViewController.

00:10:41.000 --> 00:10:52.000
Bây giờ lớp này kế thừa từ UIDocumentViewController, chúng ta sẽ gặp lỗi trình biên dịch vì thuộc tính 'tài liệu' đã tồn tại trong siêu lớp với một loại khác.

00:10:52.000 --> 00:10:57.000
Chúng tôi thay đổi tên của tài sản đó thành một tài sản cụ thể hơn, như 'markdownDocument'.

00:10:57.000 --> 00:11:06.000
Sau đó, chúng tôi biến nó thành một thuộc tính được tính toán để chuyển thuộc tính tài liệu chung sang lớp tài liệu cụ thể được sử dụng trong bộ điều khiển chế độ xem này.

00:11:06.000 --> 00:11:09.000
Phần cuối cùng trong mã này cần xử lý là trình khởi tạo.

00:11:09.000 --> 00:11:15.000
Mã duy nhất trong đó mà chúng tôi vẫn cần là gán một cuộc gọi lại cho tài liệu của chúng tôi.

00:11:15.000 --> 00:11:24.000
Vì tài liệu có thể thay đổi trong suốt vòng đời của bộ điều khiển chế độ xem này, chúng tôi di chuyển điều này để thực thi mỗi khi tài liệu thay đổi.

00:11:24.000 --> 00:11:29.000
Một cách dễ dàng để làm điều này là ghi đè thuộc tính tài liệu và thêm lệnh gọi lại didSet.

00:11:29.000 --> 00:11:36.000
Tuyệt vời, bây giờ lớp cơ sở đã được cập nhật, chúng ta cần xử lý các cuộc gọi lại mới.

00:11:36.000 --> 00:11:42.000
Trong 'viewDidLoad', chúng tôi thêm các nút vào thanh điều hướng của mình và định cấu hình nó để cho phép tùy chỉnh thanh công cụ.

00:11:42.000 --> 00:11:49.000
Đối với UIDocumentViewController, chúng tôi chuyển cái này sang lệnh gọi lại mới 'navigationItemDidUpdate'.

00:11:49.000 --> 00:11:55.000
Tiếp theo, lớp học của chúng tôi đã có một phương thức 'didOpenDocument'.

00:11:55.000 --> 00:11:58.000
Đây gần như là những gì UIDocumentViewController có.

00:11:58.000 --> 00:12:05.000
Chúng ta chỉ cần đổi tên phương thức và điều chỉnh cho thực tế là tài liệu hiện là tùy chọn.

00:12:05.000 --> 00:12:10.000
Được rồi, tiếp theo là phần mà tất cả chúng ta đều thích nhất: xóa mã.

00:12:10.000 --> 00:12:17.000
Bộ điều khiển chế độ xem trình chỉnh sửa phù hợp với 'UINavigationItemRenameDelegate', nhưng chúng tôi không còn cần điều đó nữa.

00:12:17.000 --> 00:12:20.000
UIDocument tự động đổi tên tất cả cho chúng tôi.

00:12:20.000 --> 00:12:30.000
Vì vậy, chúng tôi loại bỏ định nghĩa đại diện, phương thức đại diện với tất cả mã của nó và cả gán 'renameDelegate'.

00:12:30.000 --> 00:12:35.000
Tiếp theo chúng ta có thể xóa thêm một vài tùy chỉnh navigationItem.

00:12:35.000 --> 00:12:44.000
Cả 'style' và 'backAction' đều được cấu hình tự động bởi bộ điều khiển xem tài liệu, vì vậy chúng ta có thể loại bỏ hoàn toàn điều này.

00:12:44.000 --> 00:12:51.000
Ngoài ra còn có một phương thức 'updateDocumentProperties' được sử dụng để tạo một đối tượng UIDocumentProperties.

00:12:51.000 --> 00:12:53.000
Phương pháp này được gọi từ nhiều nơi khác nhau.

00:12:53.000 --> 00:12:55.000
Tuy nhiên, chúng tôi không cần nó nữa.

00:12:55.000 --> 00:13:03.000
UIDocumentViewController đang làm tất cả những điều này cho chúng tôi, vì vậy chúng tôi có thể xóa nó và tất cả các trang web cuộc gọi của nó.

00:13:03.000 --> 00:13:05.000
Và đó là tất cả những gì phải làm.

00:13:05.000 --> 00:13:09.000
Bộ điều khiển chế độ xem trình chỉnh sửa hiện chỉ quan tâm đến các tính năng duy nhất của ứng dụng.

00:13:09.000 --> 00:13:16.000
Nó không còn phải quản lý các tác vụ cơ bản của quản lý tài liệu hoặc cấu hình mặc định của thanh điều hướng.

00:13:16.000 --> 00:13:22.000
Thay vào đó, bạn có thể tập trung vào các phần độc đáo, các yếu tố chính của ứng dụng của bạn.

00:13:22.000 --> 00:13:30.000
Đây là tất cả những gì bạn cần biết để đưa các ứng dụng lấy tài liệu làm trung tâm của mình lên một tầm cao mới và cung cấp cho người dùng trải nghiệm tuyệt vời.

00:13:30.000 --> 00:13:33.000
Chuyển đổi mô hình dữ liệu của bạn để sử dụng UIDocument.

00:13:33.000 --> 00:13:39.000
Sau đó chuyển đổi bộ điều khiển chế độ xem nội dung của bạn để sử dụng lớp cơ sở UIDocumentViewController mới.

00:13:39.000 --> 00:13:46.000
Sau đó, đi qua bộ điều khiển chế độ xem của bạn và xóa tất cả mã không còn cần thiết nữa.

00:13:46.000 --> 00:13:47.000
Cảm ơn vì đã xem.

00:13:47.000 --> 23:59:59.000
♪ ♪

