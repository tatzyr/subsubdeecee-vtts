WEBVTT

00:00:00.000 --> 00:00:17.000
♪ ♪

00:00:17.000 --> 00:00:23.000
♪ ♪

00:00:23.000 --> 00:00:26.000
Darin Adler: Chào mừng đến với Platforms State of the Union 2023!

00:00:26.000 --> 00:00:32.000
Chúng tôi rất vui được chia sẻ thêm về cách bạn có thể tận dụng những gì sắp tới trong các bản phát hành mới của chúng tôi.

00:00:32.000 --> 00:00:49.000
Giống như các tiện ích tương tác trên iOS và iPadOS, cung cấp cho bạn nhiều cách hơn để hiển thị các ứng dụng của mình trên hệ thống, trải nghiệm tiện ích mới trên macOS, thiết kế đẹp mắt của watchOS 10, Camera liên tục trên tvOS và tất nhiên, một nền tảng hoàn toàn mới với visionOS.

00:00:49.000 --> 00:00:56.000
Platforms State of the Union là cơ hội để tìm hiểu về một số phát triển thú vị, có tác động và quan trọng nhất từ các bản phát hành năm nay.

00:00:56.000 --> 00:01:00.000
Và những gì chúng tôi có cho bạn giao hàng trên tất cả các mặt trận đó.

00:01:00.000 --> 00:01:06.000
Trước khi chúng ta đi sâu vào, tôi muốn nói một chút về những gì tạo nên một nền tảng tuyệt vời và các ứng dụng tuyệt vời.

00:01:06.000 --> 00:01:09.000
Một nền tảng tuyệt vời không chỉ là một tập hợp các khuôn khổ và công nghệ.

00:01:09.000 --> 00:01:14.000
Đó là những thành phần chính kết hợp với nhau để tạo nên thứ gì đó thực sự đặc biệt.

00:01:14.000 --> 00:01:25.000
Đó là sự kết hợp của ngôn ngữ, khuôn khổ, công cụ và dịch vụ được tạo ra để hoạt động liền mạch với nhau, vì vậy cách tự nhiên nhất để viết mã của bạn cũng là cách tốt nhất.

00:01:25.000 --> 00:01:32.000
Một bộ API phong phú để giúp bạn tạo ra những trải nghiệm tuyệt vời tích hợp sâu với hệ thống, cho dù ứng dụng của bạn có mở hay không.

00:01:32.000 --> 00:01:38.000
Những cách chu đáo để bạn tận dụng an toàn các công nghệ phần cứng tiên tiến trên nhiều loại sản phẩm.

00:01:38.000 --> 00:01:44.000
Và cuối cùng, một nền tảng tuyệt vời phát triển để đáp ứng những thách thức mới để bạn có thể đáp ứng nhu cầu của người dùng ngay khi họ xuất hiện.

00:01:44.000 --> 00:01:53.000
Hơn 300 khuôn khổ trên nền tảng của chúng tôi là các khối xây dựng, cho phép bạn tìm hiểu ngay những gì sáng tạo, sáng tạo và khác biệt về ứng dụng của mình.

00:01:53.000 --> 00:01:57.000
Họ đi xa hơn là chỉ giúp bạn tiết kiệm thời gian hoặc giúp bạn thêm một tính năng cụ thể.

00:01:57.000 --> 00:02:03.000
Khi bạn sử dụng các nền tảng nền tảng này với mục đích, ứng dụng của bạn sẽ phù hợp tuyệt vời và tự mở rộng hệ thống.

00:02:03.000 --> 00:02:06.000
Và đó là con đường dẫn đến một ứng dụng tuyệt vời.

00:02:06.000 --> 00:02:10.000
Một ứng dụng tuyệt vời nâng cao thông tin phù hợp cho người dùng vào đúng thời điểm ở đúng nơi.

00:02:10.000 --> 00:02:17.000
Nơi đó có thể là Bảng chia sẻ, ngay trên Màn hình khóa, Tiêu điểm, Siri hoặc bất kỳ nơi nào khác.

00:02:17.000 --> 00:02:25.000
Một ứng dụng tuyệt vời tận dụng phần cứng như cảm biến mới hoặc chip mạnh mẽ với sự trợ giúp từ các khuôn khổ đặt những khả năng đó trong tầm tay bạn.

00:02:25.000 --> 00:02:32.000
Và một ứng dụng tuyệt vời làm những việc rất quan trọng để làm đúng, như tạo ra các sản phẩm an toàn, dễ tiếp cận tôn trọng quyền riêng tư của người dùng.

00:02:32.000 --> 00:02:40.000
Các nền tảng của chúng tôi và các ứng dụng của bạn kết hợp với nhau để cung cấp tất cả những điều này với sự nhất quán và độ tin cậy mà mọi người coi trọng và mong đợi.

00:02:40.000 --> 00:02:42.000
Và đây là một vấn đề lớn.

00:02:42.000 --> 00:02:46.000
Chúng tôi vô cùng đam mê các nền tảng tuyệt vời và các ứng dụng tuyệt vời.

00:02:46.000 --> 00:02:48.000
Người dùng có thể nhận ra sự khác biệt mà họ tạo ra.

00:02:48.000 --> 00:03:01.000
Nền tảng chung của iOS, iPadOS, macOS, tvOS, watchOS và bây giờ là visionOS tạo thành một hệ sinh thái gắn kết cho phép bạn phân phối các ứng dụng của mình trên toàn bộ các nền tảng và sản phẩm của Apple.

00:03:01.000 --> 00:03:04.000
Ứng dụng của bạn là chìa khóa cho hệ sinh thái này.

00:03:04.000 --> 00:03:12.000
Họ trao quyền cho mọi người khi họ tiếp tục một ngày của mình với những trải nghiệm dễ sử dụng di chuyển liền mạch từ thiết bị này sang thiết bị khác.

00:03:12.000 --> 00:03:19.000
Tại Apple, chúng tôi thường nói về việc xây dựng những thứ mà chúng tôi muốn tự mình sử dụng và điều đó không thể đúng hơn với cách tiếp cận của chúng tôi đối với các nền tảng của chúng tôi.

00:03:19.000 --> 00:03:21.000
Bởi vì chúng tôi cũng là nhà phát triển!

00:03:21.000 --> 00:03:26.000
Chúng tôi sử dụng cùng một ngôn ngữ, công cụ và khuôn khổ ở đây tại Apple.

00:03:26.000 --> 00:03:28.000
Vì vậy, hôm nay, chúng ta có rất nhiều điều để trang trải.

00:03:28.000 --> 00:03:36.000
Chúng tôi sẽ bắt đầu với những phát triển mới nhất trong Swift và SwiftUI, và cách bạn có thể sử dụng chúng trên tất cả các nền tảng của chúng tôi để tạo ra những trải nghiệm tuyệt vời.

00:03:36.000 --> 00:03:43.000
Chúng tôi sẽ nói về cách bạn có thể tận dụng các tính năng phần cứng và cũng như cách bạn có thể ưu tiên các giá trị trong trải nghiệm bạn xây dựng.

00:03:43.000 --> 00:03:47.000
Và chúng tôi sẽ hướng dẫn bạn những cải tiến cho các công cụ mạnh mẽ mà tất cả chúng ta sử dụng hàng ngày.

00:03:47.000 --> 00:03:57.000
Cuối cùng, chúng ta sẽ đi sâu vào các công nghệ của nền tảng mới nhất của chúng ta, visionOS, và chỉ cho bạn cách bạn có thể xây dựng thế hệ ứng dụng tiếp theo cho Apple Vision Pro.

00:03:57.000 --> 00:04:03.000
Để bắt đầu mọi thứ, tôi sẽ chuyển nó cho Holly để nói về những gì mới trong Swift.

00:04:03.000 --> 00:04:10.000
Holly Borla: Nền tảng cho rất nhiều API mà bạn sử dụng hàng ngày là Swift.

00:04:10.000 --> 00:04:18.000
Nó nhanh chóng, hiện đại và an toàn, hướng dẫn bạn đến mã hiệu quả, biểu cảm và chính xác.

00:04:18.000 --> 00:04:27.000
API cho phép bạn tận dụng các thư viện và tính năng nền tảng, đồng thời tạo ra những trải nghiệm độc đáo cho ứng dụng của bạn.

00:04:27.000 --> 00:04:34.000
Nhưng một số API có thể khó sử dụng, yêu cầu bạn phải viết nhiều mã mẫu chỉ để bắt đầu.

00:04:34.000 --> 00:04:44.000
Đó là lý do tại sao Swift đang mở khóa một loại API mới dễ sử dụng hơn và dễ làm đúng hơn với sự ra đời của macro.

00:04:44.000 --> 00:04:47.000
Và những macro này được thực hiện theo cách Swift.

00:04:47.000 --> 00:04:55.000
Macro là một chú thích sử dụng cấu trúc mã của bạn để tạo mã mới được xây dựng với dự án của bạn.

00:04:55.000 --> 00:05:03.000
Macro có thể được đính kèm dưới dạng thuộc tính cho mã của bạn hoặc chúng có thể độc lập, được đánh vần bằng dấu băm.

00:05:03.000 --> 00:05:13.000
Macro làm cho API có cảm giác như chúng là một phần của ngôn ngữ và có rất nhiều cách để bắt đầu sử dụng API mới chỉ với một chú thích.

00:05:13.000 --> 00:05:19.000
Macro trở nên sống động trong Xcode, nơi mã được tạo có cảm giác như nó là một phần của dự án của bạn.

00:05:19.000 --> 00:05:20.000
Để tôi chỉ cho bạn.

00:05:20.000 --> 00:05:25.000
Tôi đã tạo một macro URL kiểm tra các chuỗi URL hợp lệ.

00:05:25.000 --> 00:05:33.000
Bởi vì các macro tạo ra mã Swift thông thường, tôi có thể sử dụng tính năng "Mở rộng Macro" trong Xcode để xem chính xác những gì chúng làm.

00:05:33.000 --> 00:05:35.000
Macro này trông thực sự đơn giản.

00:05:35.000 --> 00:05:39.000
Nó gọi trình khởi tạo URL và buộc mở gói kết quả.

00:05:39.000 --> 00:05:41.000
Nhưng macro URL làm được nhiều hơn thế.

00:05:41.000 --> 00:05:46.000
Nó kiểm tra rằng chuỗi là một URL hợp lệ tại thời điểm biên dịch.

00:05:46.000 --> 00:05:58.000
Ví dụ, URL không thể có khoảng trắng, vì vậy nếu tôi thêm một dấu cách, macro sẽ cung cấp thông báo lỗi tùy chỉnh và sửa lỗi để tự động xóa khoảng trắng khỏi chuỗi.

00:05:58.000 --> 00:06:06.000
Điều này di chuyển những gì có thể là lỗi khi ứng dụng của tôi đang chạy, thành phản hồi trong khi tôi đang viết mã của mình, vì vậy tôi có thể sửa lỗi ngay lập tức.

00:06:06.000 --> 00:06:11.000
Tất cả các macro đều có khả năng cung cấp phản hồi tùy chỉnh để giúp bạn viết mã chính xác.

00:06:11.000 --> 00:06:18.000
Các macro đính kèm thậm chí còn đi xa hơn, bởi vì chúng có thể thêm chức năng mới vào mã bạn đã viết.

00:06:18.000 --> 00:06:22.000
Chúng ta hãy xem các macro đính kèm có thể làm gì.

00:06:22.000 --> 00:06:30.000
Tôi có một hàm gọi là fetchContent thực hiện công việc không đồng bộ và sử dụng trình xử lý hoàn thành, nhưng tôi muốn sử dụng async/await.

00:06:30.000 --> 00:06:36.000
Thay vì triển khai một hàm fetchContent khác, tôi có thể đính kèm macro AddAsync.

00:06:36.000 --> 00:06:37.000
Và thế là xong!

00:06:37.000 --> 00:06:44.000
Bây giờ, thay vì chuyển trình xử lý hoàn thành khi tôi gọi fetchContent, tôi có thể chỉ cần chờ kết quả.

00:06:44.000 --> 00:06:50.000
Cũng giống như bất kỳ API nào khác, tôi có thể sử dụng trợ giúp nhanh trên macro để xem tài liệu của nó.

00:06:50.000 --> 00:07:03.000
Nhưng nếu tôi muốn hiểu cách thức hoạt động của nó, tôi có thể đặt điểm dừng, chạy mã của mình, bước vào chức năng không đồng bộ và Xcode sẽ mở rộng macro ngay trong trình chỉnh sửa nguồn của tôi.

00:07:03.000 --> 00:07:06.000
Điều này thực sự tuyệt vời, bởi vì không có bí mật nào cả.

00:07:06.000 --> 00:07:16.000
Bước vào một macro mở rộng trong khi gỡ lỗi là một cách tự nhiên để xem hậu trường và giúp tôi hiểu những gì đang xảy ra trong mã của mình.

00:07:16.000 --> 00:07:25.000
Bạn có thể viết macro của riêng mình, vì vậy bạn có thể mở rộng ngôn ngữ theo những cách mà trước đây chỉ có thể bằng cách triển khai các tính năng trong trình biên dịch Swift.

00:07:25.000 --> 00:07:44.000
Bởi vì Swift được phát triển trong mã nguồn mở, các nhà phát triển đã sử dụng macro để xây dựng một số tính năng ngôn ngữ được yêu cầu phổ biến nhất, bao gồm tự động tạo ra các mô tả phong phú về các lỗi xác nhận, cung cấp các tuân thủ giao thức mặc định có thể tùy chỉnh và danh sách tiếp tục phát triển.

00:07:44.000 --> 00:07:48.000
Bạn cũng sẽ thấy các macro được sử dụng trong nhiều API mới của năm nay.

00:07:48.000 --> 00:07:56.000
Bạn có thể hưởng lợi từ các macro do cộng đồng tạo ra hoặc chia sẻ các macro của riêng bạn với những người khác, thông qua các gói Swift.

00:07:56.000 --> 00:08:04.000
Những tiến bộ về ngôn ngữ, như macro, cho phép Swift được áp dụng trong nhiều dự án hơn bao giờ hết.

00:08:04.000 --> 00:08:08.000
Hãy nói về tất cả mã của bạn không được viết bằng Swift.

00:08:08.000 --> 00:08:15.000
Kể từ khi thành lập, Swift đã cung cấp khả năng tương tác hai chiều với C và Objective-C.

00:08:15.000 --> 00:08:23.000
Bạn có thể giới thiệu Swift vào các dự án của mình một tệp hoặc mô-đun tại một thời điểm mà không cần phải viết lại toàn bộ cơ sở mã.

00:08:23.000 --> 00:08:28.000
Swift đang mở rộng khả năng tương tác đó lên C++.

00:08:28.000 --> 00:08:36.000
Khả năng tương tác Swift-C++ cho phép bạn sử dụng cả hai ngôn ngữ trong cùng một dự án mà không cần lớp bắc cầu trung gian.

00:08:36.000 --> 00:08:46.000
Bạn có thể chia sẻ các lớp học, chức năng của mình và thậm chí cả các chuyên ngành mẫu như vectơ trên cả hai ngôn ngữ bằng cách đặt cờ trình biên dịch.

00:08:46.000 --> 00:08:56.000
Sử dụng C++ từ Swift sẽ loại bỏ nhiều nguồn hành vi không xác định trong mã của bạn, chẳng hạn như sử dụng các biến trước khi chúng được khởi tạo.

00:08:56.000 --> 00:09:03.000
Và cầu nối rất hiệu quả: các cuộc gọi được thực hiện nguyên bản giữa mã Swift và C++ của bạn, với chi phí tối thiểu.

00:09:03.000 --> 00:09:18.000
Khả năng tương tác Swift-C++ đã được sử dụng trong mã nguồn mở, giúp chuyển đổi trình biên dịch Swift từ C++ sang Swift và tôi rất hào hứng khi sử dụng Swift để triển khai Swift.

00:09:18.000 --> 00:09:25.000
Các mục tiêu cơ bản của Swift về mã an toàn và biểu cảm đã ăn sâu vào các thư viện được xây dựng với nó.

00:09:25.000 --> 00:09:28.000
Và không nơi nào rõ ràng hơn với SwiftUI.

00:09:28.000 --> 00:09:30.000
Đây là Josh để nói với bạn nhiều hơn.

00:09:30.000 --> 00:09:37.000
Josh Shaffer: Cách tốt nhất để xây dựng giao diện người dùng hiện đại trên tất cả các nền tảng của Apple là với SwiftUI.

00:09:37.000 --> 00:09:44.000
SwiftUI cho phép bạn viết các ứng dụng tốt hơn với ít mã hơn để bạn có thể tập trung vào những gì độc đáo cho ứng dụng của mình.

00:09:44.000 --> 00:09:48.000
Nó cũng tối đa hóa khả năng sử dụng lại mã giao diện của bạn.

00:09:48.000 --> 00:09:53.000
Ứng dụng thói quen lành mạnh Streaks của Crunchy Bagel là một ví dụ tuyệt vời.

00:09:53.000 --> 00:09:58.000
Lần đầu tiên họ bắt đầu sử dụng SwiftUI khi xây dựng các tiện ích cho iOS.

00:09:58.000 --> 00:10:04.000
Sau đó, họ chia sẻ mã đó với ứng dụng watchOS của họ và tăng cường nó bằng các hình ảnh động tuyệt đẹp.

00:10:04.000 --> 00:10:09.000
Và bây giờ, họ đã kết hợp cùng một mã trở lại ứng dụng iOS ban đầu của họ.

00:10:09.000 --> 00:10:18.000
Việc áp dụng gia tăng cho phép họ chia sẻ mã giao diện người dùng theo tốc độ của riêng họ và thấy lợi ích từ SwiftUI trong các ứng dụng hiện có của họ.

00:10:18.000 --> 00:10:28.000
SwiftUI cũng có khả năng đáng kinh ngạc, giúp cung cấp năng lượng cho các giao diện phức tạp trong các ứng dụng như Logic Pro mới và Final Cut Pro cho iPad.

00:10:28.000 --> 00:10:35.000
Việc áp dụng SwiftUI trong các ứng dụng của bạn chuẩn bị cho bạn xây dựng thế hệ giao diện người dùng tiếp theo.

00:10:35.000 --> 00:10:38.000
Và những gì bạn có thể xây dựng với SwiftUI tiếp tục mở rộng.

00:10:38.000 --> 00:10:58.000
Như mọi khi, các khả năng mới của nó trong các bản phát hành năm nay tập trung vào các lĩnh vực có tác động cao và các yêu cầu hàng đầu của nhà phát triển, như hỗ trợ mới cho Biểu đồ Pie và lựa chọn trong Biểu đồ Swift, API kiểm tra hoàn toàn mới, hỗ trợ MapKit mở rộng, bao gồm Lớp phủ, Nhìn xung quanh và hơn thế nữa

00:10:58.000 --> 00:11:05.000
Những cải tiến này bao gồm một loạt các chức năng, nhưng nhiều trong số chúng tập trung vào việc cải thiện hoạt ảnh.

00:11:05.000 --> 00:11:11.000
Đây là một lĩnh vực quan trọng, bởi vì các hình ảnh động được thiết kế tốt giúp giao diện của bạn dễ sử dụng.

00:11:11.000 --> 00:11:15.000
Họ có thể cung cấp phản hồi để người dùng của bạn biết rằng có điều gì đó đang xảy ra.

00:11:15.000 --> 00:11:19.000
Hoặc họ có thể xác nhận rằng một nhiệm vụ đã hoàn thành thành công.

00:11:19.000 --> 00:11:27.000
Và đó là lý do tại sao SwiftUI đã có các tính năng nâng cao như hoạt ảnh có thể đảo ngược, ngắt và có thể hủy ngay từ đầu.

00:11:27.000 --> 00:11:31.000
Năm nay, SwiftUI đang đưa hoạt hình đi xa hơn nữa.

00:11:31.000 --> 00:11:34.000
Nó bắt đầu với cách họ di chuyển.

00:11:34.000 --> 00:11:37.000
Hình ảnh động thường được kích hoạt bởi cử chỉ của người dùng.

00:11:37.000 --> 00:11:46.000
Vì vậy, bây giờ, SwiftUI có thể tự động chuyển vận tốc cử chỉ của bạn vào hoạt ảnh của bạn, mang lại sự chuyển đổi mượt mà.

00:11:46.000 --> 00:11:55.000
Và hình ảnh động bây giờ mặc định là chuyển động dựa trên lò xo có thể được cấu hình chỉ với hai thông số đơn giản: thời lượng và độ nảy.

00:11:55.000 --> 00:12:03.000
SwiftUI cũng có thể tận dụng các hiệu ứng hoạt hình mới trong Biểu tượng SF, làm cho biểu tượng trong ứng dụng của bạn trở nên sống động.

00:12:03.000 --> 00:12:15.000
Cuối cùng, khi bạn cần xây dựng hoạt ảnh nhiều phần, SwiftUI có một API mới gọi là AnimationPhase giúp bạn xây dựng các hoạt ảnh phức tạp chỉ với một vài dòng mã.

00:12:15.000 --> 00:12:23.000
Tôi đã tạo một ứng dụng mẫu để minh họa các API mới như AnimationPhase, lấy cảm hứng từ cảnh quan tuyệt đẹp của Apple Park.

00:12:23.000 --> 00:12:30.000
Nó cung cấp một trải nghiệm êm dịu, nơi người dùng có thể tạo ra không gian ngoài trời và cung cấp thức ăn và đồ uống cho các loài chim tham quan.

00:12:30.000 --> 00:12:35.000
Để đảm bảo rằng tôi không bao giờ bỏ lỡ một chú chim mới, tôi đã thêm một lời nhắc lên đầu danh sách.

00:12:35.000 --> 00:12:39.000
Hãy chuyển sang bản xem trước chỉ tập trung vào chế độ xem đó.

00:12:39.000 --> 00:12:43.000
Tôi thực sự muốn làm cho Biểu tượng SF này nổi bật bằng cách thêm một số hình ảnh động.

00:12:43.000 --> 00:12:48.000
Đầu tiên, tôi sẽ thêm một liệt kê để xác định các trạng thái khác nhau trong một hình ảnh động tùy chỉnh.

00:12:48.000 --> 00:12:52.000
Tiếp theo, tôi sẽ gói gọn quan điểm của mình trong một 'PhaseAnimator'.

00:12:52.000 --> 00:12:56.000
Đây là một chế độ xem mới tự động tạo hiệu ứng động giữa một tập hợp các trạng thái.

00:12:56.000 --> 00:13:02.000
Và cuối cùng, tôi sẽ chia tỷ lệ và xoay biểu tượng trong giai đoạn hoạt hình '.highlighted'.

00:13:02.000 --> 00:13:12.000
Điều này có vẻ tốt, nhưng tôi nghĩ nó sẽ trông đẹp hơn nếu nền hoạt hình cùng với biểu tượng, vì vậy tôi sẽ thêm một vài công cụ sửa đổi nữa.

00:13:12.000 --> 00:13:19.000
Bây giờ, đối với các hình ảnh động nâng cao hơn, năm nay SwiftUI bổ sung hỗ trợ đầy đủ cho keyframing.

00:13:19.000 --> 00:13:26.000
API mạnh mẽ này cho phép tôi tạo hiệu ứng động cho mọi thứ, bao gồm các thuộc tính của API MapKit dựa trên SwiftUI mới.

00:13:26.000 --> 00:13:36.000
Khung hình chính cho phép bạn xác định các giá trị của nhiều thuộc tính tại các thời điểm cụ thể trong một hình ảnh động, và sau đó cho phép SwiftUI nội suy các giá trị trung gian.

00:13:36.000 --> 00:13:42.000
Ở đây, tôi đã sử dụng khung hình chính để tạo hiệu ứng động cho máy ảnh bản đồ đến thăm các địa danh khác nhau ở Cupertino.

00:13:42.000 --> 00:13:56.000
Bởi vì các khung hình chính cho phép bạn xác định chuyển động cho các thuộc tính khác nhau, chúng tôi có thể tạo hiệu ứng động độc lập cho cao độ, hướng và vị trí của máy ảnh để đạt được chuyển động mượt mà, liên tục này trên Cupertino và đến Apple Park.

00:13:56.000 --> 00:14:01.000
Tạo cảm giác ứng dụng của bạn bằng cách sử dụng hình ảnh động trong SwiftUI chưa bao giờ dễ dàng hơn thế.

00:14:01.000 --> 00:14:04.000
Tiếp theo, hãy nói về luồng dữ liệu.

00:14:04.000 --> 00:14:09.000
Khi xây dựng một ứng dụng với SwiftUI, bạn có một vài lựa chọn để đưa dữ liệu vào chế độ xem của mình.

00:14:09.000 --> 00:14:16.000
SwiftUI cung cấp một bộ trình bao bọc tài sản để quản lý dữ liệu cục bộ theo chế độ xem của bạn và để tham chiếu dữ liệu thuộc sở hữu ở nơi khác.

00:14:16.000 --> 00:14:22.000
Luồng dữ liệu năm nay ngày càng đơn giản hơn, cho phép bạn chỉ tập trung vào Trạng thái và Môi trường.

00:14:22.000 --> 00:14:32.000
Bạn có thể đã viết mã như thế này khi hiển thị mô hình của mình cho SwiftUI, phù hợp với ObservableObject và thêm trình bao bọc thuộc tính đã xuất bản vào mỗi thuộc tính.

00:14:32.000 --> 00:14:38.000
Hỗ trợ Macro mới của Swift làm cho điều này đơn giản hơn nhiều, với một macro Observable mới thay thế nó.

00:14:38.000 --> 00:14:42.000
Chỉ cần chú thích một lớp học với @Observable, và bạn đã hoàn tất.

00:14:42.000 --> 00:14:46.000
Tất cả các thuộc tính hiển thị công khai được xuất bản tự động.

00:14:46.000 --> 00:14:53.000
Và khi sử dụng Observable trong chế độ xem SwiftUI của bạn, không cần sử dụng trình bao bọc thuộc tính để kích hoạt cập nhật chế độ xem.

00:14:53.000 --> 00:14:55.000
Bạn chỉ cần tham khảo trực tiếp các biến của mình.

00:14:55.000 --> 00:15:00.000
Bạn sẽ viết ít mã hơn và nhận được hành vi nhanh chóng và chính xác theo mặc định.

00:15:00.000 --> 00:15:10.000
Observable cho phép SwiftUI theo dõi quyền truy cập ở cấp độ mỗi trường, vì vậy phần thân của chế độ xem của bạn chỉ được đánh giá lại khi các thuộc tính cụ thể được sử dụng bởi chế độ xem của bạn thay đổi.

00:15:10.000 --> 00:15:15.000
Nếu bạn sửa đổi một trường không được sử dụng bởi chế độ xem của bạn, sẽ không có sự vô hiệu nào xảy ra cả.

00:15:15.000 --> 00:15:24.000
Vì vậy, bây giờ khi bạn kết nối mô hình của mình với chế độ xem của mình, giống như với phần còn lại của SwiftUI, mã tự nhiên nhất để viết cũng là mã chính xác để viết.

00:15:24.000 --> 00:15:29.000
SwiftUI là sự khởi đầu của một thế hệ khung mới được thiết kế cho Swift.

00:15:29.000 --> 00:15:34.000
Nhưng lợi ích của khung Swift-native không dừng lại ở mã giao diện người dùng của bạn.

00:15:34.000 --> 00:15:45.000
Core Data từ lâu đã cung cấp các công cụ để quản lý dữ liệu, nhưng thiết kế của nó được sinh ra từ kỷ nguyên của Objective-C và nó không tận dụng tối đa mọi thứ mà Swift cung cấp.

00:15:45.000 --> 00:15:53.000
Nhiều người trong số các bạn đã yêu cầu một giải pháp gốc Swift để quản lý dữ liệu, được thiết kế với sự hỗ trợ hạng nhất cho tất cả các tính năng của Swift.

00:15:53.000 --> 00:15:57.000
Hãy để tôi giới thiệu cho bạn SwiftData.

00:15:57.000 --> 00:16:00.000
SwiftData là một khuôn khổ để mô hình hóa và quản lý dữ liệu.

00:16:00.000 --> 00:16:09.000
Nó được xây dựng dựa trên lớp kiên trì đã được chứng minh của Core Data, nhưng với API được thiết kế lại hoàn toàn và mô phỏng lại cho Swift.

00:16:09.000 --> 00:16:14.000
Giống như SwiftUI, nó tập trung hoàn toàn vào mã, không có định dạng tệp bên ngoài.

00:16:14.000 --> 00:16:19.000
Thay vào đó, nó sử dụng hệ thống macro mới của Swift để cung cấp một API được sắp xếp hợp lý.

00:16:19.000 --> 00:16:25.000
Nếu bạn đang xác định một mô hình trong Swift, bạn có thể viết mã như thế này, sử dụng các loại Swift thông thường.

00:16:25.000 --> 00:16:32.000
Để quản lý điều này với Core Data, sau đó bạn cần xác định lại cùng một mô hình bằng cách sử dụng trình chỉnh sửa mô hình được tích hợp trong Xcode.

00:16:32.000 --> 00:16:37.000
Nhưng với SwiftData, bạn chỉ cần chú thích lớp học của mình bằng macro @Model.

00:16:37.000 --> 00:16:47.000
Dòng mã duy nhất này có rất nhiều chức năng, như tự động bật tính bền bỉ, đồng bộ hóa iCloud, hoàn tác và làm lại, v.v.

00:16:47.000 --> 00:16:56.000
Sau đó, bạn có thể tinh chỉnh các hành vi tự động này bằng cách chú thích các thuộc tính với các thuộc tính bổ sung, như chỉ ra giá trị phải là duy nhất trên tất cả các trường hợp.

00:16:56.000 --> 00:17:04.000
Và SwiftData sử dụng giao thức Codable để hiểu các cấu trúc và liệt kê, vì vậy bạn có thể mô hình hóa dữ liệu của mình bằng các công cụ mà bạn đã biết.

00:17:04.000 --> 00:17:13.000
Các loại này được mô hình hóa đầy đủ trong kho dữ liệu cơ bản, cho phép bạn thực hiện các truy vấn nhanh chóng và hiệu quả, ngay cả trên dữ liệu có cấu trúc phức tạp.

00:17:13.000 --> 00:17:18.000
Và tất nhiên, thật đơn giản để tích hợp SwiftData với SwiftUI.

00:17:18.000 --> 00:17:23.000
Bây giờ, chúng tôi bắt đầu xây dựng ứng dụng demo của mình bằng cách sử dụng macro Observable mới để thúc đẩy các bản cập nhật chế độ xem SwiftUI.

00:17:23.000 --> 00:17:29.000
Vì vậy, giao diện của tôi cập nhật khi tôi thấy những con chim mới, nhưng các chỉnh sửa của tôi không được lưu qua các lần chạy.

00:17:29.000 --> 00:17:34.000
Bằng cách nhập SwiftData, tôi sẽ có thể thêm hỗ trợ cho sự kiên trì thực sự dễ dàng.

00:17:34.000 --> 00:17:42.000
Tôi sẽ chỉ thay thế hai macro có thể quan sát được trên các lớp hiện có của mình bằng macro Mô hình của SwiftData và mô hình của tôi đã sẵn sàng.

00:17:42.000 --> 00:17:47.000
Ở thư mục gốc của ứng dụng của tôi, tôi sẽ thêm một công cụ sửa đổi để thiết lập vùng chứa SwiftData.

00:17:47.000 --> 00:17:53.000
Và khi tôi tạo ra một sân sau mới, tôi sẽ chèn nó vào bối cảnh mô hình để nó được duy trì.

00:17:53.000 --> 00:17:57.000
Và cuối cùng, tôi sẽ kết nối chế độ xem BackyardList của mình với dữ liệu vẫn còn tồn tại.

00:17:57.000 --> 00:18:01.000
Điều đó thực sự dễ thực hiện với trình bao bọc thuộc tính @Query mới.

00:18:01.000 --> 00:18:07.000
Bởi vì chúng tôi hiện đang tải dữ liệu đã lưu, tôi có thể xóa dữ liệu mẫu mặc định mà tôi đã sử dụng khi tôi tạo mẫu.

00:18:07.000 --> 00:18:11.000
Trước khi chúng ta kiểm tra nó, chúng ta cũng hãy cập nhật một tiện ích mà tôi đang làm việc.

00:18:11.000 --> 00:18:15.000
Tôi sẽ chỉ thiết lập vùng chứa và truy vấn theo cùng một cách.

00:18:15.000 --> 00:18:23.000
Với vùng chứa được chia sẻ của ứng dụng được bật, SwiftData tự động làm cho dữ liệu của tôi có thể truy cập trực tiếp bằng tiện ích bằng cùng một API.

00:18:23.000 --> 00:18:28.000
Các sân sau hiện được SwiftData duy trì và được @Query chuyển đến chế độ xem.

00:18:28.000 --> 00:18:34.000
Trước khi chúng tôi bắt đầu, tôi đã điền vào cơ sở dữ liệu với một số dữ liệu ban đầu, vì vậy bạn đã có thể thấy một số khách truy cập chim.

00:18:34.000 --> 00:18:41.000
Và nếu tôi thêm một đối tượng sân sau mới, khi tôi quay lại danh sách, nó sẽ xuất hiện mà không có tác phẩm bổ sung nào.

00:18:41.000 --> 00:18:49.000
Và SwiftData cung cấp nhiều thứ hơn là chỉ sự kiên trì, bao gồm những thứ như hỗ trợ hoàn tác và làm lại, chỉ hoạt động tự động.

00:18:49.000 --> 00:18:54.000
Và như bạn có thể thấy, tiện ích của tôi đã hiển thị sân sau mà chúng tôi vừa tạo.

00:18:54.000 --> 00:18:59.000
Và đó là một cái nhìn về việc lưu và khôi phục dữ liệu dễ dàng như thế nào bằng SwiftData.

00:18:59.000 --> 00:19:05.000
SwiftUI và SwiftData làm việc song song để giúp bạn xây dựng các ứng dụng hấp dẫn và mạnh mẽ.

00:19:05.000 --> 00:19:15.000
Chúng tạo thành nền tảng của một cách tiếp cận mới để phát triển được kích hoạt bởi Swift giúp bạn dành ít thời gian hơn cho việc soạn thảo và nhiều thời gian hơn để xây dựng ý tưởng của mình.

00:19:15.000 --> 00:19:22.000
Tiếp theo, Jonathan sẽ chỉ cho bạn cách áp dụng các công nghệ này để nâng cấp ứng dụng của bạn theo những cách mới trên toàn hệ thống.

00:19:22.000 --> 00:19:27.000
Jonathan Thomassian: Tôi thực sự vui mừng được kể cho bạn nghe về bốn trải nghiệm ứng dụng mới.

00:19:27.000 --> 00:19:32.000
Với WidgetKit, bạn có thể hiển thị nội dung của mình ở nhiều nơi trên hệ thống.

00:19:32.000 --> 00:19:38.000
Với App Intents, chức năng ứng dụng của bạn được tích hợp vào hệ thống thậm chí còn liền mạch hơn.

00:19:38.000 --> 00:19:43.000
Với TipKit, bạn có thể hiển thị các mẹo đẹp trực tiếp trong ứng dụng của mình.

00:19:43.000 --> 00:19:50.000
Và với AirDrop, bạn có thể giúp người dùng chia sẻ nội dung với những người gần đó trở nên thuận tiện hơn.

00:19:50.000 --> 00:19:52.000
Hãy bắt đầu với WidgetKit.

00:19:52.000 --> 00:20:01.000
Các tiện ích nâng cao thông tin quan trọng từ các ứng dụng của bạn, làm cho trải nghiệm ứng dụng của bạn dễ nhìn hơn và có sẵn cho người dùng của bạn khi họ tiếp tục trong ngày của họ.

00:20:01.000 --> 00:20:10.000
Các tiện ích bắt đầu trên Màn hình chính, nhưng bây giờ chúng ở nhiều nơi hơn để mang trải nghiệm của bạn đến với người dùng ngay tại nơi và khi nào họ cần.

00:20:10.000 --> 00:20:14.000
Và năm nay, các vật dụng thậm chí còn trở nên mạnh mẽ hơn.

00:20:14.000 --> 00:20:22.000
Khi bạn xây dựng lại cho iOS 17, chỉ với một vài thay đổi đơn giản, các tiện ích hiện có của bạn sẽ trông tuyệt đẹp trong StandBy trên iPhone.

00:20:22.000 --> 00:20:29.000
Chúng sẽ xuất hiện được thu nhỏ và vẽ ra các cạnh, với nền bị loại bỏ, vì vậy chúng trông tuyệt đẹp cạnh nhau.

00:20:29.000 --> 00:20:36.000
Chúng cũng sẽ có sẵn trên Màn hình khóa trên iPad, một lần nữa được vẽ vào các cạnh của chúng và xóa nền của chúng.

00:20:36.000 --> 00:20:41.000
Ở đây, chúng sẽ có vẻ ngoài đồng nhất để chúng kết hợp hoàn hảo với Màn hình khóa.

00:20:41.000 --> 00:20:49.000
Và trên macOS Sonoma, chúng sẽ có sẵn trên Máy tính để bàn với đầy đủ màu sắc, và sau đó lùi vào nền khi cửa sổ có tiêu điểm.

00:20:49.000 --> 00:20:54.000
Và bây giờ bạn có thể làm cho các tiện ích của mình hữu ích hơn với sự hỗ trợ mới cho tính tương tác.

00:20:54.000 --> 00:21:01.000
Các hành động đơn giản có thể được thực hiện chỉ bằng một cú chạm, như kiểm tra lời nhắc, giờ đây có thể được xử lý trực tiếp từ tiện ích của bạn.

00:21:01.000 --> 00:21:06.000
Tất cả các bản cập nhật tiện ích mới này đã được kích hoạt bởi kiến trúc dựa trên SwiftUI của họ.

00:21:06.000 --> 00:21:13.000
Mã tiện ích của bạn được chạy không đồng bộ để tạo nội dung và các chế độ xem SwiftUI mà nó xây dựng sau đó được lưu vào kho lưu trữ.

00:21:13.000 --> 00:21:21.000
Sau đó, khi tiện ích cần được vẽ, kho lưu trữ có thể được tải, hiển thị trong nền và sau đó được hiển thị như một phần của giao diện người dùng hệ thống.

00:21:21.000 --> 00:21:27.000
Khi người dùng nhấn vào một nút, tiện ích mở rộng của nó sẽ được chạy lại để xử lý hành động và cập nhật giao diện người dùng.

00:21:27.000 --> 00:21:33.000
Kiến trúc này cũng cho phép các tiện ích iPhone được hiển thị liền mạch trên máy Mac của bạn.

00:21:33.000 --> 00:21:42.000
Nhờ sự kỳ diệu của Tính liên tục, kho lưu trữ tiện ích có thể được gửi qua mạng đến máy Mac của bạn và các tương tác của người dùng có thể được gửi lại để xử lý trên iPhone.

00:21:42.000 --> 00:21:45.000
Chuẩn bị các tiện ích hiện có của bạn không thể dễ dàng hơn.

00:21:45.000 --> 00:21:51.000
Chỉ cần xác định nền tiện ích của bạn và cập nhật phần đệm của nó để sử dụng mặc định do WidgetKit cung cấp.

00:21:51.000 --> 00:21:57.000
Bố cục dựa trên ngăn xếp của SwiftUI cho phép hệ thống điều chỉnh màu sắc và khoảng cách của tiện ích của bạn dựa trên ngữ cảnh.

00:21:57.000 --> 00:22:03.000
Tính tương tác cũng dễ dàng áp dụng bằng cách thêm các nút SwiftUI hoặc nút chuyển đổi vào tiện ích của bạn.

00:22:03.000 --> 00:22:09.000
Hỗ trợ mới để kích hoạt Ý định ứng dụng từ các điều khiển này khởi chạy tiện ích mở rộng của bạn theo yêu cầu.

00:22:09.000 --> 00:22:16.000
Khi nội dung tiện ích của bạn cập nhật, hệ thống sẽ kích hoạt hoạt ảnh chuyển tiếp hoạt động giống như Magic Move trong Keynote.

00:22:16.000 --> 00:22:23.000
Các phần tử đã di chuyển trượt đến vị trí mới của chúng và các phần tử được thêm hoặc xóa mờ dần và mờ nhẹ nhàng vào và ra.

00:22:23.000 --> 00:22:29.000
Bạn có thể sử dụng các API chuyển tiếp SwiftUI tiêu chuẩn để tùy chỉnh thêm và có được chính xác các hiệu ứng bạn muốn.

00:22:29.000 --> 00:22:35.000
Chúng ta hãy xem việc đưa các tính năng mới này vào một tiện ích hiện có dễ dàng như thế nào.

00:22:35.000 --> 00:22:39.000
Ứng dụng mẫu của chúng tôi có một tiện ích theo dõi các sự kiện đáng chú ý ở sân sau của chúng tôi.

00:22:39.000 --> 00:22:42.000
Điều đầu tiên tôi cần làm là xác định nền tảng của nó.

00:22:42.000 --> 00:22:47.000
Đây là chế độ xem tiện ích của chúng tôi và chúng tôi có thể thấy nền của chúng tôi ở ngay tại đây trong ZStack.

00:22:47.000 --> 00:22:52.000
Tất cả những gì tôi cần làm là chuyển nó vào công cụ sửa đổi chế độ xem nền vùng chứa mới.

00:22:52.000 --> 00:22:58.000
Và bắt đầu từ iOS 17, phần đệm tiện ích được cung cấp cho tôi, vì vậy tôi sẽ tiếp tục và xóa phần đệm mà tôi đã thêm trước đó.

00:22:58.000 --> 00:23:04.000
Bây giờ, nhờ Swift Macros, tôi có thể xem trực tiếp toàn bộ dòng thời gian tiện ích của mình trong bản xem trước Xcode.

00:23:04.000 --> 00:23:08.000
Ở đây, ở cuối khung xem trước, là tất cả các mục dòng thời gian của tôi.

00:23:08.000 --> 00:23:13.000
Và nhấp qua chúng cho thấy tiện ích của tôi sẽ hoạt ảnh như thế nào khi nó cập nhật.

00:23:13.000 --> 00:23:19.000
Quá trình chuyển đổi này thật tuyệt vời, nhưng hãy xem liệu chúng ta có thể làm điều gì đó giống như một con chim đang đến không.

00:23:19.000 --> 00:23:24.000
Cũng giống như trong ứng dụng của tôi, tôi có thể sử dụng các chuyển tiếp SwiftUI tiêu chuẩn.

00:23:24.000 --> 00:23:28.000
Ở đây trong trình chỉnh sửa, tôi sẽ thêm một công cụ sửa đổi chuyển tiếp vào BirdView của mình.

00:23:28.000 --> 00:23:31.000
Hãy thử đẩy cạnh hàng đầu.

00:23:31.000 --> 00:23:34.000
Điều đó trông thật tuyệt.

00:23:34.000 --> 00:23:42.000
Khung xem trước được cập nhật cũng giúp dễ dàng xem tiện ích của tôi trông như thế nào trong các ngữ cảnh khác nhau, như Màn hình khóa iPad mới hoặc StandBy trên iPhone.

00:23:42.000 --> 00:23:44.000
Hãy nhìn vào StandBy.

00:23:44.000 --> 00:23:47.000
Khi nền được gỡ bỏ, tôi muốn con chim của tôi nổi bật.

00:23:47.000 --> 00:23:51.000
Và bàn chân của nó hơi bị mất ở đây, vì vậy hãy thêm một bồn tắm cho chim.

00:23:51.000 --> 00:24:00.000
SwiftUI cung cấp một biến showsWidgetContainerBackground mới cho phép tôi tùy chỉnh giao diện tiện ích của mình khi nền bị xóa.

00:24:00.000 --> 00:24:02.000
Tuyệt vời!

00:24:02.000 --> 00:24:08.000
Nhiều người trong số các bạn đã yêu cầu khả năng tương tác với ứng dụng của mình từ tiện ích của mình và bây giờ, bạn có thể.

00:24:08.000 --> 00:24:12.000
Hãy thêm một nút để đổ đầy nước cho chim của tôi.

00:24:12.000 --> 00:24:19.000
Tôi đã xác định một Ý định Ứng dụng cho hành động này, vì vậy tất cả những gì tôi phải làm là liên kết nó với một nút trong tiện ích của mình.

00:24:19.000 --> 00:24:22.000
Hãy thử nó trong trình giả lập.

00:24:22.000 --> 00:24:25.000
Và cứ như vậy, tôi đã đổ đầy nước cho chim của mình.

00:24:25.000 --> 00:24:27.000
Và đó là WidgetKit.

00:24:27.000 --> 00:24:32.000
Việc hiển thị nội dung của bạn ở nhiều nơi trên toàn hệ thống chưa bao giờ dễ dàng hơn thế.

00:24:32.000 --> 00:24:39.000
Chúng tôi rất vui mừng về tất cả các cách bạn có thể sử dụng tính tương tác và chuyển tiếp hoạt hình để nâng cao các tiện ích của mình.

00:24:39.000 --> 00:24:43.000
Giờ đây, App Intents không chỉ là tính tương tác trong các tiện ích.

00:24:43.000 --> 00:24:50.000
Chúng nâng cao chức năng ứng dụng của bạn trên toàn hệ thống, trong Spotlight, Shortcuts và Siri.

00:24:50.000 --> 00:24:59.000
Bây giờ, khi bạn gói ý định của mình trong Phím tắt ứng dụng, nó sẽ xuất hiện ngay bên cạnh biểu tượng ứng dụng của bạn trong kết quả Spotlight, với bản trình bày phong phú hơn, tương tác hơn.

00:24:59.000 --> 00:25:01.000
Bạn chỉ cần cung cấp một vài thứ.

00:25:01.000 --> 00:25:05.000
Trong Phím tắt Ứng dụng của bạn, một tiêu đề ngắn và một hình ảnh hoặc biểu tượng.

00:25:05.000 --> 00:25:09.000
Và trong Info.plist của ứng dụng của bạn, một màu nền bổ sung cho biểu tượng ứng dụng của bạn.

00:25:09.000 --> 00:25:20.000
Và các phím tắt ứng dụng của bạn sẽ xuất hiện trong ứng dụng Phím tắt được cập nhật, nơi người dùng có thể thiết lập chúng để chạy tự động, thêm chúng vào Màn hình chính hoặc sử dụng chúng để tạo các phím tắt của riêng họ.

00:25:20.000 --> 00:25:22.000
Siri cũng thậm chí còn trở nên tốt hơn.

00:25:22.000 --> 00:25:26.000
Người dùng có sự linh hoạt ngôn ngữ tự nhiên hơn để gọi một phím tắt.

00:25:26.000 --> 00:25:32.000
Với WidgetKit và App Intents, người dùng có thể truy cập các tính năng của ứng dụng của bạn theo những cách hoàn toàn mới.

00:25:32.000 --> 00:25:36.000
Tiếp theo, hãy nói về khám phá tính năng trong ứng dụng của bạn.

00:25:36.000 --> 00:25:45.000
Hàng năm, các nhà phát triển chúng tôi dành thời gian xây dựng các tính năng mà chúng tôi nghĩ rằng người dùng sẽ yêu thích, nhưng đôi khi những người dùng được hưởng lợi nhiều nhất không biết tính năng đó tồn tại!

00:25:45.000 --> 00:25:53.000
Một khuôn khổ mới được gọi là TipKit giúp giải quyết vấn đề này bằng cách giáo dục người dùng một cách thông minh về các tính năng phù hợp vào đúng thời điểm.

00:25:53.000 --> 00:26:01.000
TipKit bao gồm các mẫu để phù hợp với những gì người dùng đã quen nhìn thấy trong các ứng dụng hệ thống và có thể dễ dàng tùy chỉnh để phù hợp với giao diện của ứng dụng của bạn.

00:26:01.000 --> 00:26:04.000
Sức mạnh của TipKit là bản chất chìa khóa trao tay của nó.

00:26:04.000 --> 00:26:11.000
Đơn giản chỉ cần tùy chỉnh một mẫu và thêm nhắm mục tiêu để giáo dục người dùng về chức năng liên quan đến bối cảnh hiện tại của họ.

00:26:11.000 --> 00:26:18.000
Bạn cũng có thể quản lý tần suất tổng thể để tránh hiển thị các mẹo mà người dùng đã thấy, ngay cả khi họ nhìn thấy chúng trên một thiết bị khác.

00:26:18.000 --> 00:26:24.000
Cuối cùng, chúng tôi có một cách mới thú vị để giúp người dùng chia sẻ nội dung từ ứng dụng của bạn với AirDrop.

00:26:24.000 --> 00:26:31.000
Trên iOS 17, người dùng của bạn có thể bỏ qua bảng chia sẻ và nhanh chóng gửi nội dung đến một thiết bị khác gần đó.

00:26:31.000 --> 00:26:38.000
Bạn có thể sử dụng ShareLink trong SwiftUI hoặc áp dụng activityItemsConfiguration trên bộ điều khiển chế độ xem UIKit của ứng dụng.

00:26:38.000 --> 00:26:44.000
Và các ViewControllers do hệ thống cung cấp như ShareSheet và QuickLook đã hoạt động theo mặc định.

00:26:44.000 --> 00:26:55.000
WidgetKit, App Intents, TipKit và AirDrop sẽ giúp bạn xây dựng trải nghiệm giúp nội dung ứng dụng của bạn có sẵn cho người dùng của bạn ở đúng nơi và vào đúng thời điểm.

00:26:55.000 --> 00:27:00.000
Chúng tôi rất mong được xem bạn sẽ sử dụng những thứ này như thế nào để đưa các ứng dụng của mình đi xa hơn nữa.

00:27:00.000 --> 00:27:03.000
Và bây giờ, trở lại Darin.

00:27:03.000 --> 00:27:09.000
Darin: Nền tảng của chúng tôi được xây dựng để cung cấp cho bạn quyền truy cập vào các khả năng phần cứng độc đáo của các sản phẩm của chúng tôi ngay khi ra khỏi cổng.

00:27:09.000 --> 00:27:20.000
Cho dù bạn đang khai thác Công cụ thần kinh để xử lý ảnh hay sử dụng gia tốc kế để đo chuyển động giấc ngủ, API của chúng tôi cung cấp cho bạn khả năng khai thác sức mạnh của công nghệ phần cứng một cách dễ dàng.

00:27:20.000 --> 00:27:26.000
Tiếp theo, chúng ta sẽ xem xét những cải tiến của năm nay cho Trò chơi, Máy ảnh, Màn hình và Đồng hồ Apple.

00:27:26.000 --> 00:27:29.000
Đây là Brandon để cho chúng tôi biết tất cả diễn ra như thế nào.

00:27:29.000 --> 00:27:38.000
Brandon Corey: Hiệu suất tuyệt vời, thời lượng pin dài và đồ họa tuyệt đẹp của Apple silicon Macs khiến chúng trở thành nền tảng hoàn hảo để chạy các trò chơi cao cấp.

00:27:38.000 --> 00:27:43.000
Và bây giờ, Chế độ trò chơi trong macOS Sonoma làm cho trò chơi trên Mac thậm chí còn tốt hơn.

00:27:43.000 --> 00:27:49.000
Với máy Mac phổ biến hơn bao giờ hết, chưa bao giờ có thời điểm tốt hơn để mang trò chơi của bạn đến với hàng triệu người chơi mới.

00:27:49.000 --> 00:28:04.000
Nếu bạn là nhà phát triển xây dựng trò chơi cho Windows hoặc máy chơi game, giờ đây bạn sẽ thấy việc đưa trò chơi của mình lên Mac trở nên dễ dàng hơn bao giờ hết bằng cách sử dụng Bộ công cụ chuyển đổi trò chơi mới, giúp tăng tốc đáng kể sự phát triển của bạn bằng ba bước đơn giản.

00:28:04.000 --> 00:28:11.000
Đầu tiên, bạn có thể đánh giá xem trò chơi Windows hiện tại của bạn có thể chạy tốt như thế nào trên Mac bằng cách sử dụng môi trường mô phỏng được cung cấp.

00:28:11.000 --> 00:28:17.000
Điều này cho phép bạn phân tích hiệu suất tiềm năng của trò chơi ngay lập tức, loại bỏ nhiều tháng làm việc trả trước.

00:28:17.000 --> 00:28:21.000
Trong bước thứ hai, bạn sẽ chuyển đổi và biên dịch các trình đổ bóng của mình.

00:28:21.000 --> 00:28:37.000
Bộ công cụ chuyển đổi trò chơi bao gồm Bộ chuyển đổi bóng kim loại mới, bạn có thể sử dụng để tự động chuyển đổi tất cả các bộ đổ bóng GPU HLSL hiện có của mình sang Kim loại, bao gồm tất cả các đường ống tạo bóng nâng cao của trò chơi như các giai đoạn hình học, tessellation, lưới và dò tia.

00:28:37.000 --> 00:28:44.000
Bạn có thể sử dụng công cụ này trong khi bạn đang xây dựng trò chơi của mình trong Xcode hoặc trong một chuỗi công cụ dựa trên Windows tùy chỉnh để biên dịch đổ bóng.

00:28:44.000 --> 00:28:49.000
Điều này đưa chúng ta đến bước ba: chuyển đổi mã đồ họa của bạn và tối ưu hóa trò chơi của bạn.

00:28:49.000 --> 00:28:58.000
Metal cung cấp tất cả các tính năng đồ họa và tính toán nâng cao được sử dụng bởi các trò chơi cao cấp hiện đại, giúp việc chuyển đổi mã đồ họa của bạn trở nên cực kỳ đơn giản.

00:28:58.000 --> 00:29:07.000
Và hiệu suất đồ họa mạnh mẽ và các công cụ gỡ lỗi được tích hợp ngay vào Xcode cung cấp cho bạn tất cả các hướng dẫn bạn cần để tối ưu hóa hoàn toàn trò chơi của mình.

00:29:07.000 --> 00:29:22.000
Chúng tôi nóng lòng muốn thấy bạn sử dụng các công cụ này để tận dụng hiệu suất đáng kinh ngạc của Apple silicon và đồ họa, màn hình, âm thanh, đầu vào và công nghệ chơi game mạnh mẽ, để đưa trò chơi của bạn lên Mac nhanh hơn đáng kể so với trước đây.

00:29:22.000 --> 00:29:26.000
Nói về hiệu suất nhanh hơn, chúng tôi cũng có tin tức để chia sẻ về Camera.

00:29:26.000 --> 00:29:34.000
Apple tiếp tục thúc đẩy nhiếp ảnh di động tiến lên và mở rộng API cho phép bạn làm những điều đáng kinh ngạc với máy ảnh phổ biến nhất thế giới.

00:29:34.000 --> 00:29:47.000
AVCapture được sử dụng bởi hơn một phần ba ứng dụng iOS trên tất cả các danh mục: từ sáng tạo đến năng suất, phương tiện truyền thông xã hội và thậm chí cả sức khỏe, và nó đang nhận được một số cải tiến hiệu suất mạnh mẽ trong năm nay.

00:29:47.000 --> 00:29:52.000
Với Zero Shutter Lag, bạn ghi lại thời điểm chính xác khi nhấn nút chụp.

00:29:52.000 --> 00:29:58.000
Với các cảnh quay chồng chéo, máy ảnh sẽ tự động điều chỉnh chất lượng hình ảnh khi màn trập được nhấn nhanh chóng.

00:29:58.000 --> 00:30:05.000
Và với quá trình xử lý hoãn lại, hình ảnh chất lượng cao bao gồm Deep Fusion có thể được xử lý ở chế độ nền.

00:30:05.000 --> 00:30:14.000
Những cải tiến này sẽ giúp thời gian chụp nhanh hơn tới ba lần giữa các lần nhấn màn trập trong ứng dụng iOS hoặc iPadOS của bạn, ngay cả khi chụp ảnh chất lượng cao.

00:30:14.000 --> 00:30:21.000
Và cuối năm nay, bạn cũng sẽ có thể sử dụng âm lượng và các nút lên và xuống để kích hoạt màn trập máy ảnh.

00:30:21.000 --> 00:30:24.000
Cũng có tin tức lớn về việc hiển thị ảnh trong ứng dụng của bạn.

00:30:24.000 --> 00:30:31.000
Trong những năm gần đây, màn hình có khả năng HDR đã trở nên phổ biến rộng rãi, bao gồm cả trên iPhone, iPad và Mac.

00:30:31.000 --> 00:30:44.000
Chụp ảnh HDR tận dụng lợi thế bằng cách chụp dải động bổ sung để hiển thị các điểm sáng và bóng tối với độ trung thực và chân thực hơn bao giờ hết, giống như bạn đã trải nghiệm cảnh trong cuộc sống thực.

00:30:44.000 --> 00:30:53.000
Apple đã dẫn đầu trong việc đưa nhiếp ảnh HDR trở thành xu hướng chủ đạo, với hàng nghìn tỷ bức ảnh HDR được chụp trên iPhone 12 trở lên.

00:30:53.000 --> 00:31:01.000
Để làm điều này, ứng dụng Camera phân tích cảnh một cách thông minh và lưu trữ dữ liệu tô sáng và bóng tối bổ sung tại thời điểm chụp.

00:31:01.000 --> 00:31:10.000
Nhưng trong khi có các tiêu chuẩn công nghiệp cho video HDR, không có tiêu chuẩn nào để lưu trữ và hiển thị ảnh HDR, điều này khiến chúng khó làm việc.

00:31:10.000 --> 00:31:13.000
Nhưng tất cả sẽ thay đổi trong năm nay.

00:31:13.000 --> 00:31:23.000
Apple đã thúc đẩy nỗ lực toàn ngành dẫn đến một đặc điểm kỹ thuật để mã hóa và hiển thị ảnh HDR, gần đây đã được Tổ chức Tiêu chuẩn Quốc tế phê chuẩn.

00:31:23.000 --> 00:31:33.000
Nó hiện có sẵn dưới dạng API trong iOS, iPadOS và macOS, để bạn có thể hiển thị ảnh tương thích trong ứng dụng của mình chỉ với một vài dòng mã.

00:31:33.000 --> 00:31:38.000
Đây là tin tuyệt vời cho tất cả các ứng dụng hiển thị hình ảnh, và không chỉ cho ảnh.

00:31:38.000 --> 00:31:43.000
Các ứng dụng nội dung sáng tạo có thể sử dụng nó để làm cho hình ảnh nổi bật với dải động bổ sung.

00:31:43.000 --> 00:31:56.000
Vì vậy, bây giờ một quy trình làm việc HDR hoàn chỉnh sẽ có thể thực hiện được: từ chụp đến chỉnh sửa đến chia sẻ và mọi người sẽ có thể tận hưởng vinh quang HDR đầy đủ của nó, giống như nhiếp ảnh gia đã trải nghiệm.

00:31:56.000 --> 00:31:58.000
Tiếp theo, hãy nói về video.

00:31:58.000 --> 00:32:04.000
Tất cả chúng ta đều dành nhiều thời gian với máy ảnh của mình vào những ngày này, cho dù là hội nghị truyền hình hay trong các ứng dụng sáng tạo.

00:32:04.000 --> 00:32:11.000
Chúng tôi đã tiếp tục đầu tư vào ánh sáng và hiệu ứng video, như những phản ứng, cử chỉ và hiệu ứng lớp phủ người thuyết trình mới này.

00:32:11.000 --> 00:32:16.000
Chúng được tích hợp vào nguồn cấp dữ liệu máy ảnh mà bạn nhận được, vì vậy chúng sẽ chỉ hoạt động trong ứng dụng của bạn.

00:32:16.000 --> 00:32:24.000
Ứng dụng của bạn có thể quan sát khi các hiệu ứng này được gọi và bạn có thể thực hiện các hành động bổ sung, như quảng bá ô của người dùng đó để mọi người có thể thấy rằng họ đã phản ứng.

00:32:24.000 --> 00:32:31.000
Nếu bạn có một ứng dụng hội nghị truyền hình, có một số cải tiến về chia sẻ màn hình và chức năng máy ảnh trong ScreenCaptureKit.

00:32:31.000 --> 00:32:38.000
Bộ chọn ScreenCaptureKit mới giúp người dùng bắt đầu chia sẻ màn hình đơn giản hơn, theo cách riêng tư và an toàn hơn.

00:32:38.000 --> 00:32:44.000
Bộ chọn cũng giúp ứng dụng của bạn dễ dàng chụp nhiều cửa sổ hoặc thậm chí nhiều ứng dụng cùng một lúc.

00:32:44.000 --> 00:32:54.000
Người dùng của bạn có thể bắt đầu chia sẻ ngay từ ứng dụng họ đang sử dụng và họ sẽ đánh giá cao việc họ thấy bản xem trước của những gì đang được chia sẻ trong menu Hiệu ứng Video mới.

00:32:54.000 --> 00:33:01.000
Một lợi ích khác của ScreenCaptureKit là nội dung có độ phân giải cao hơn để chia sẻ màn hình đẹp hơn khi chia sẻ một cửa sổ duy nhất.

00:33:01.000 --> 00:33:04.000
Chúng tôi cũng đã mang hỗ trợ camera bên ngoài cho iPad.

00:33:04.000 --> 00:33:08.000
Giờ đây, bất kỳ máy ảnh USB nào cũng có thể được kết nối và sử dụng trong ứng dụng iPad của bạn.

00:33:08.000 --> 00:33:14.000
Và chúng tôi rất vui mừng được thêm khả năng máy ảnh và micrô vào một nền tảng hoàn toàn mới: tvOS.

00:33:14.000 --> 00:33:24.000
Với Continuity Camera trên tvOS, bạn có thể tận dụng iPhone và thậm chí cả iPad để tích hợp video và âm thanh trong các ứng dụng tvOS lần đầu tiên.

00:33:24.000 --> 00:33:29.000
Và với phòng khách là sân khấu của bạn, có rất nhiều tiềm năng để làm những điều tuyệt vời với các ứng dụng của bạn.

00:33:29.000 --> 00:33:36.000
Ví dụ, các ứng dụng hội nghị có thể sử dụng Center Stage, giúp các cuộc gọi video nhóm năng động hơn trên màn hình lớn nhất trong nhà.

00:33:36.000 --> 00:33:40.000
Trò chơi có thể kết hợp nguồn cấp dữ liệu máy ảnh và âm thanh trực tiếp vào hành động.

00:33:40.000 --> 00:33:45.000
Và các ứng dụng sáng tạo có thể phát trực tuyến hoặc quay video, đồng thời áp dụng chế độ Chân dung và các hiệu ứng thú vị khác.

00:33:45.000 --> 00:33:54.000
Nếu bạn đã có một ứng dụng trên Apple TV, bạn có thể làm cho trải nghiệm trở nên kết nối và xã hội hơn nữa bằng cách tận dụng các khuôn khổ mà bạn có thể đã quen thuộc.

00:33:54.000 --> 00:34:01.000
Và đối với những người muốn tận dụng Continuity Camera nhưng chưa được phát triển cho tvOS, thật dễ dàng để bắt đầu với SwiftUI.

00:34:01.000 --> 00:34:04.000
Để tôi chỉ cho bạn cách nó hoạt động.

00:34:04.000 --> 00:34:09.000
Vì vậy, đây là ứng dụng iPad ví dụ của tôi, PartyCam, chụp ảnh tự sướng với các bộ lọc thú vị.

00:34:09.000 --> 00:34:14.000
Đầu tiên, chúng tôi sẽ thêm Apple TV làm điểm đến.

00:34:14.000 --> 00:34:19.000
Tiếp theo, chúng ta cần thêm bộ chọn để người dùng biết nên chọn điện thoại nào.

00:34:19.000 --> 00:34:21.000
Sau đó chúng tôi sẽ thêm mã để trình bày bộ chọn.

00:34:21.000 --> 00:34:22.000
Và sau đó chúng tôi chạy.

00:34:22.000 --> 00:34:26.000
Và bây giờ, tôi chỉ cần cầm điều khiển từ xa và chụp một bức ảnh.

00:34:26.000 --> 00:34:31.000
Này, đó là Susan và Serenity!

00:34:31.000 --> 00:34:33.000
Tuyệt vời!

00:34:33.000 --> 00:34:36.000
Chúng tôi nóng lòng muốn xem bạn làm cho phòng khách trở nên thú vị hơn như thế nào.

00:34:36.000 --> 00:34:40.000
Bây giờ, hãy chuyển sang Lori với những gì mới trên watchOS.

00:34:40.000 --> 00:34:51.000
Lori Hylan-Cho: Là thiết bị đeo đầu tiên của chúng tôi, Apple Watch đã mở ra những khả năng mới cho các nhà phát triển để mang lại thông báo kịp thời, thông tin chi tiết về sức khỏe và thể dục cũng như trải nghiệm ứng dụng tiện dụng cho cổ tay của mọi người.

00:34:51.000 --> 00:35:00.000
Năm nay, watchOS 10 đang được làm mới thiết kế rất nhiều để tận dụng lợi thế của màn hình lớn hơn, sáng hơn và phần cứng kết nối có khả năng hơn của các mẫu Apple Watch hiện đại.

00:35:00.000 --> 00:35:03.000
SwiftUI là trung tâm của thiết kế lại này.

00:35:03.000 --> 00:35:12.000
Chúng tôi đã sử dụng nó trên toàn hệ thống để cập nhật hầu như mọi ứng dụng để trở nên năng động hơn, nhiều màu sắc hơn và dễ nhìn hơn.

00:35:12.000 --> 00:35:14.000
Để tôi chỉ cho bạn một vài ví dụ.

00:35:14.000 --> 00:35:27.000
Có một sự tập trung mới vào phân trang trong watchOS 10 và Vertical TabViews cho phép kích thước trang thay đổi, sử dụng tốt hơn vương miện để cuộn trong các ứng dụng mà không phải hy sinh không gian cho tất cả nội dung có giá trị của bạn.

00:35:27.000 --> 00:35:37.000
Công cụ sửa đổi containerBackground mới cho phép bạn sử dụng màu sắc, với các màu gradient để dễ đọc, để giúp người dùng hiểu vị trí của chúng trong ứng dụng của bạn hoặc làm cho dữ liệu dễ nhìn hơn.

00:35:37.000 --> 00:35:46.000
Đối với các thiết kế ứng dụng lấp đầy màn hình, các vị trí ToolbarItem mới sử dụng tốt hơn các góc và cho phép thời gian tự động chuyển sang trung tâm nếu cần thiết.

00:35:46.000 --> 00:35:56.000
Và đối với các bố cục có liên kết danh sách nguồn/chi tiết mạnh mẽ, NavigationSplitView hấp dẫn hơn bao giờ hết trên Apple Watch bằng cách sử dụng cùng một mã bạn sẽ sử dụng trên các nền tảng khác.

00:35:56.000 --> 00:36:02.000
Và trục vào và ra khỏi chế độ xem chi tiết trên Apple Watch thậm chí còn sử dụng hoạt ảnh mùa xuân tương tác mới của SwiftUI.

00:36:02.000 --> 00:36:12.000
Hình ảnh động này bao gồm 12 bản nhạc riêng biệt cho một kế hoạch hoạt hình làm sinh động cả kích thước và vị trí của chế độ xem, được điều khiển bởi vận tốc ngón tay của người dùng.

00:36:12.000 --> 00:36:20.000
Và tất nhiên, tất cả các thành phần giao diện người dùng chính đã được cập nhật với các phương pháp xử lý vật liệu để dễ đọc trên bất kỳ nền nào và chúng có kích thước tự động cho phần cứng.

00:36:20.000 --> 00:36:28.000
Nếu bạn đã áp dụng SwiftUI trong ứng dụng của mình, bạn sẽ tự động nhận được các bản cập nhật này khi bạn xây dựng với watchOS 10 SDK.

00:36:28.000 --> 00:36:33.000
Hãy để tôi cho bạn thấy ý tôi với ứng dụng Backyard Birds mà ban đầu tôi đã thiết kế cho watchOS 9.

00:36:33.000 --> 00:36:41.000
Đó là một ứng dụng danh sách/chi tiết được xây dựng bằng NavigationStack và ngay cả khi không có bất kỳ thay đổi mã nào, nó vẫn hoạt động tốt khi được biên dịch lại với watchOS 10.

00:36:41.000 --> 00:36:49.000
Các chế độ xem tự động điều chỉnh để phù hợp với chiều cao thanh điều hướng mới và tiêu đề lớn co lại và tạo hiệu ứng động đến một vị trí trong thời gian tôi cuộn.

00:36:49.000 --> 00:36:54.000
Bây giờ hãy thực hiện một số chỉnh sửa để làm cho ứng dụng cảm thấy như ở nhà hơn trên watchOS 10.

00:36:54.000 --> 00:37:01.000
Tôi muốn xem trạng thái hiện tại của sân chính của mình bất cứ khi nào tôi khởi chạy ứng dụng, thay vì luôn phải chọn nó từ danh sách.

00:37:01.000 --> 00:37:11.000
NavigationSplitView được thiết kế đặc biệt cho các ứng dụng có mối quan hệ danh sách nguồn/chi tiết mạnh mẽ, vì vậy tôi sẽ đổi NavigationStack của mình lấy NavigationSplitView.

00:37:11.000 --> 00:37:20.000
Tôi sẽ xóa tiêu đề điều hướng khỏi Danh sách Nguồn, vì nó không còn là điểm vào cho ứng dụng và chỉ ra chế độ xem chi tiết sẽ mở theo mặc định.

00:37:20.000 --> 00:37:24.000
Danh sách nguồn hiện được giấu phía sau chế độ xem chi tiết và tôi tập trung vào các chi tiết.

00:37:24.000 --> 00:37:27.000
Nhưng chế độ xem chi tiết của tôi khá dài.

00:37:27.000 --> 00:37:36.000
Đó là một Danh sách cuộn với ba phần rõ ràng, vì vậy tôi sẽ chia nhỏ nội dung bằng cách chuyển đổi Danh sách thành TabView dọc với một trang riêng biệt cho mỗi phần.

00:37:36.000 --> 00:37:44.000
Mỗi trang này sẽ là chiều cao của màn hình theo mặc định và vì phần cuối cùng đó chứa một vòng lặp ForEach, mỗi con chim sẽ có trang riêng.

00:37:44.000 --> 00:37:54.000
Tôi muốn có một danh sách tất cả các loài chim trên một tab duy nhất cuộn nếu nó vượt quá chiều cao của màn hình, vì vậy tôi sẽ thay đổi ForEach này thành một Danh sách, điều này sẽ làm cho nó trở thành một chế độ xem có thể cuộn được.

00:37:54.000 --> 00:38:01.000
Tiếp theo tôi muốn thêm một số màu sắc để phân biệt giữa các tab, vì vậy tôi sẽ thêm công cụ sửa đổi .containerBackground vào mỗi tab.

00:38:01.000 --> 00:38:06.000
Và để nhanh chóng phát hiện ra khi thức ăn hoặc nước uống sắp hết, tôi sẽ làm cho nền Sustenance trở nên năng động.

00:38:06.000 --> 00:38:11.000
Nó sẽ có màu xanh lá cây, vàng hoặc đỏ dựa trên mức cung cấp.

00:38:11.000 --> 00:38:20.000
Nhìn vào những thay đổi trong Live Previews, bạn có thể thấy màu nền mang lại cảm giác vị trí trong ứng dụng như thế nào và giúp bạn dễ dàng phát hiện hơn khi tôi cần đổ đầy thức ăn hoặc nước uống.

00:38:20.000 --> 00:38:27.000
Tab cuối cùng cho phép nội dung cuộn ra ngoài giới hạn của màn hình và tôi vẫn có thể truy cập danh sách sân sau bằng cách nhấn vào nút Danh sách nguồn.

00:38:27.000 --> 00:38:32.000
Chỉ mất một vài thay đổi để làm cho ứng dụng của tôi phù hợp ngay trên watchOS 10.

00:38:32.000 --> 00:38:42.000
SwiftUI đã làm cho cuộc sống của chúng tôi dễ dàng hơn khi chúng tôi làm việc để làm cho mọi ứng dụng trên hệ thống trông tuyệt vời và như chúng tôi vừa thấy, nó cũng sẽ giúp việc cập nhật ứng dụng của bạn cho các mô hình thiết kế mới này trở nên dễ dàng.

00:38:42.000 --> 00:38:46.000
Nếu bạn chưa chuyển sang SwiftUI trong ứng dụng của mình, bây giờ là lúc.

00:38:46.000 --> 00:38:57.000
Ngoài các bản cập nhật ứng dụng dựa trên SwiftUI này, watchOS 10 cũng có một không gian hệ thống hoàn toàn mới, nơi sự liên quan của AppIntents giúp các tiện ích của bạn di chuyển lên Smart Stack vào đúng thời điểm.

00:38:57.000 --> 00:39:05.000
Và bạn có thể sử dụng cùng một công cụ sửa đổi .containerBackground đã đề cập trước đó để làm cho các tiện ích đó thực sự tỏa sáng với nền tùy chỉnh tuyệt đẹp.

00:39:05.000 --> 00:39:25.000
Đối với những người bạn xây dựng ứng dụng tập luyện, bạn có thể giúp người dùng của mình tận dụng khả năng theo dõi thể dục của Apple Watch với API tập luyện tùy chỉnh mới, cho phép bạn chia sẻ các kế hoạch tập thể dục từ ứng dụng của mình và API CoreMotion mới sẽ cho phép thu thập dữ liệu chuyển động và gia tốc kế có độ trung thực cao hơn

00:39:25.000 --> 00:39:31.000
Và bởi vì chúng tôi biết tất cả các bạn có thể sáng tạo như thế nào, dữ liệu này có sẵn khi chạy bất kỳ loại bài tập nào.

00:39:31.000 --> 00:39:34.000
Chúng tôi nóng lòng muốn xem bạn sẽ xây dựng những trải nghiệm nào với nó.

00:39:34.000 --> 00:39:38.000
Và đó là một cái nhìn thoáng qua về một số thay đổi lớn sắp tới đối với watchOS trong năm nay.

00:39:38.000 --> 00:39:41.000
Và bây giờ, trở lại Darin.

00:39:41.000 --> 00:39:47.000
Darin: Một nền tảng cũng nói về những người sử dụng nó và các giá trị được tích hợp vào nó từ đầu.

00:39:47.000 --> 00:39:52.000
Những giá trị cốt lõi này có ý nghĩa rất lớn đối với chúng tôi tại Apple và chúng tôi biết chúng cũng có ý nghĩa rất lớn đối với bạn.

00:39:52.000 --> 00:40:03.000
Cùng nhau, chúng tôi có thể làm cho ứng dụng của bạn thích ứng với nhu cầu của mọi người để bất kỳ ai cũng có thể sử dụng nó và tạo ra các ứng dụng thể hiện sự tôn trọng nhu cầu bảo vệ bản thân và bảo vệ dữ liệu của mỗi người dùng.

00:40:03.000 --> 00:40:07.000
Bắt đầu với những gì nền tảng của chúng tôi cung cấp có thể giúp công việc quan trọng này dễ dàng hơn cho bạn.

00:40:07.000 --> 00:40:11.000
Để nói với bạn nhiều hơn, đây là Chris.

00:40:11.000 --> 00:40:16.000
Chris: Chúng tôi tin rằng mọi người đều có thể sử dụng thiết bị của chúng tôi để làm những gì họ yêu thích.

00:40:16.000 --> 00:40:21.000
Đó là lý do tại sao làm cho các sản phẩm của chúng tôi có thể truy cập được là giá trị cốt lõi tại Apple.

00:40:21.000 --> 00:40:27.000
Theo Tổ chức Y tế Thế giới, có hơn một tỷ người khuyết tật trên khắp thế giới.

00:40:27.000 --> 00:40:36.000
Xây dựng công nghệ dễ tiếp cận có nghĩa là cung cấp cho nhiều người hơn những công cụ tốt nhất để tạo, học hỏi, duy trì kết nối và sống theo các điều khoản của họ.

00:40:36.000 --> 00:40:52.000
Đó là lý do tại sao các sản phẩm của Apple có sẵn các tính năng trợ năng cho người dùng khiếm thị hoặc thị lực kém, Điếc hoặc khiếm thính, không nói hoặc có nguy cơ mất ngôn ngữ, những người khuyết tật về thể chất hoặc vận động và những người khuyết tật nhận thức.

00:40:52.000 --> 00:41:03.000
Các khuôn khổ của chúng tôi đi kèm với hỗ trợ tích hợp cho các tính năng trợ năng này, cùng với các công cụ và API để giúp bạn đảm bảo rằng mọi người đều có thể truy cập ứng dụng của mình.

00:41:03.000 --> 00:41:07.000
Thông thường, khả năng tiếp cận bắt nguồn từ việc thực hiện các bước nhỏ có tác động lớn.

00:41:07.000 --> 00:41:17.000
Ví dụ, năm ngoái chúng tôi đã thêm khả năng phát hiện và mô tả các cánh cửa trong ứng dụng Kính lúp, giúp mọi người điều hướng môi trường của họ một cách độc lập.

00:41:17.000 --> 00:41:24.000
Năm nay, chúng tôi đang mở rộng hỗ trợ cho những người dùng nhạy cảm với hình ảnh động và đèn nhấp nháy.

00:41:24.000 --> 00:41:39.000
Những người dùng này thường phải đối mặt với một sự lựa chọn khó khăn giữa việc tránh nội dung có khả năng rủi ro, chẳng hạn như phim bắt đầu bằng cảnh báo đèn nhấp nháy hoặc tiêu thụ nó mà không có đủ thông tin, điều đó có thể có nghĩa là phơi bày bản thân trước các rủi ro sức khỏe, như co giật.

00:41:39.000 --> 00:41:47.000
Các khuôn khổ của chúng tôi hiện bao gồm API cho hai tính năng có thể làm cho nội dung trong ứng dụng của bạn dễ tiếp cận hơn với những người dùng này.

00:41:47.000 --> 00:41:55.000
Tính năng đầu tiên là Tạm dừng hình ảnh động, sẽ dừng chuyển động trong GIF động trong Safari, Tin nhắn và hơn thế nữa.

00:41:55.000 --> 00:41:59.000
Và thật dễ dàng để bạn thêm nó vào ứng dụng của mình.

00:41:59.000 --> 00:42:04.000
Giả sử bạn đang tạo hoạt ảnh cho một chuỗi hình ảnh với TimelineView trong SwiftUI.

00:42:04.000 --> 00:42:16.000
Bạn có thể sử dụng thuộc tính môi trường mới để hiểu liệu người dùng có muốn tạm dừng hình ảnh động hay không và nếu có, hãy thay thế hình ảnh động bằng hình ảnh tĩnh để tôn trọng sự lựa chọn của họ.

00:42:16.000 --> 00:42:25.000
Tính năng thứ hai là Đèn nhấp nháy mờ, tự động làm tối màn hình hiển thị video trong các chuỗi đèn nhấp nháy sáng.

00:42:25.000 --> 00:42:32.000
Có một giai đoạn mới trong quy trình kết xuất video của AVFoundation để xác định và làm mờ các yếu tố nhấp nháy.

00:42:32.000 --> 00:42:38.000
Nếu bạn sử dụng AVFoundation để phát phương tiện trong ứng dụng của mình, không cần phải làm thêm để hỗ trợ tính năng này.

00:42:38.000 --> 00:42:48.000
Tuy nhiên, nếu ứng dụng của bạn sử dụng trình phát đa phương tiện tùy chỉnh, bạn có thể sử dụng API mới để xác định nội dung video bằng đèn nhấp nháy và tự động làm tối nội dung đó.

00:42:48.000 --> 00:42:53.000
Chúng tôi thậm chí đã mở mã nguồn thuật toán, vì vậy bạn có thể hiểu khoa học đằng sau tính năng này.

00:42:53.000 --> 00:43:00.000
Cam kết của chúng tôi trong việc xây dựng khả năng tiếp cận vào từng sản phẩm và khuôn khổ mở rộng đến nền tảng mới nhất của chúng tôi: visionOS.

00:43:00.000 --> 00:43:13.000
Bởi vì chúng tôi tin rằng công nghệ tốt nhất thế giới sẽ thích ứng với nhu cầu của mọi người, visionOS đi kèm với hàng tá tính năng trợ năng được tích hợp vào nền tảng của nó ngay từ đầu.

00:43:13.000 --> 00:43:26.000
Và bạn, với tư cách là một nhà phát triển, sẽ đóng một vai trò quan trọng bằng cách làm cho các ứng dụng visionOS của bạn có thể truy cập được cho mọi người, sử dụng các công cụ và API giống nhau mà bạn sử dụng trên iPadOS và iOS ngày nay.

00:43:26.000 --> 00:43:35.000
Chúng tôi rất vui mừng được làm việc với bạn để mang điện toán không gian đến với nhiều nhóm người dùng khác nhau và bạn sẽ nghe thêm về khả năng truy cập trên Vision Pro một chút.

00:43:35.000 --> 00:43:39.000
Bây giờ, hãy đến Katie để nói về quyền riêng tư.

00:43:39.000 --> 00:43:43.000
Katie Skinner: Tại Apple, chúng tôi tin rằng quyền riêng tư là quyền cơ bản của con người.

00:43:43.000 --> 00:43:51.000
Chúng tôi nghe từ người dùng của mình rằng họ quan tâm đến nó nhiều như thế nào và chúng tôi ở đây để giúp bạn cung cấp quyền riêng tư tuyệt vời cùng với các tính năng của bạn.

00:43:51.000 --> 00:43:57.000
Trong những năm qua, chúng tôi đã xây dựng nhiều cách để giúp bạn xây dựng quyền riêng tư vào các ứng dụng của mình.

00:43:57.000 --> 00:44:07.000
Năm nay, chúng tôi sẽ giúp bạn dễ dàng cung cấp trải nghiệm bảo mật mạnh mẽ cho người dùng của mình trong một số lĩnh vực, bắt đầu với những cải tiến đối với lời nhắc về quyền riêng tư.

00:44:07.000 --> 00:44:10.000
Hãy bắt đầu với quyền Lịch.

00:44:10.000 --> 00:44:17.000
Chúng tôi biết rằng trong nhiều trường hợp, các ứng dụng của bạn không cần quyền truy cập đọc vào Lịch - chúng chỉ cần viết các sự kiện mới.

00:44:17.000 --> 00:44:22.000
Đối với những trường hợp này, chúng tôi đã tạo ra một quyền chỉ thêm mới.

00:44:22.000 --> 00:44:29.000
Điều này sẽ giúp bạn có được quyền truy cập mà bạn cần và người dùng sẽ nhận được lời nhắc có ý nghĩa với họ.

00:44:29.000 --> 00:44:40.000
Và trong Ảnh, chúng tôi đã cung cấp hai lựa chọn để người dùng cung cấp ảnh cho ứng dụng của bạn; họ có thể chọn ảnh nào để chia sẻ hoặc họ có thể cung cấp quyền truy cập vào thư viện đầy đủ của họ.

00:44:40.000 --> 00:44:50.000
Chúng tôi muốn giúp người dùng chọn ảnh để chia sẻ với ứng dụng của bạn trở nên dễ dàng hơn, vì vậy bạn có được chính xác những gì bạn cần và người dùng chỉ chia sẻ những gì họ dự định.

00:44:50.000 --> 00:45:00.000
Vì vậy, chúng tôi đang thêm một bộ chọn ảnh mới mà bạn có thể nhúng vào ứng dụng của mình, vì vậy người dùng có thể dễ dàng chọn ảnh để chia sẻ từ bên trong trải nghiệm của bạn.

00:45:00.000 --> 00:45:02.000
Tiếp theo, quyền riêng tư của ứng dụng.

00:45:02.000 --> 00:45:09.000
Điều quan trọng là giúp người dùng hiểu cách bạn bảo vệ dữ liệu của họ, vì vậy chúng tôi đã xây dựng các tính năng để giúp bạn làm điều đó.

00:45:09.000 --> 00:45:16.000
Ví dụ, Privacy Nutrition Labels giúp người dùng hiểu dữ liệu bạn thu thập và cách bạn sử dụng dữ liệu đó.

00:45:16.000 --> 00:45:22.000
Nhiều người trong số các bạn bao gồm SDK của bên thứ ba trong các ứng dụng của mình, có thể cung cấp chức năng tuyệt vời.

00:45:22.000 --> 00:45:30.000
Nhưng bao gồm chúng có thể khiến việc làm đúng nhãn của bạn trở nên khó khăn hơn, bởi vì bạn có thể không hiểu cách chúng xử lý dữ liệu người dùng.

00:45:30.000 --> 00:45:35.000
Và họ có thể đưa ra những thách thức bảo mật cho chuỗi cung ứng phần mềm của bạn.

00:45:35.000 --> 00:45:39.000
Vì vậy, năm nay, chúng tôi sẽ giới thiệu hai bản cập nhật.

00:45:39.000 --> 00:45:46.000
Đầu tiên, để giúp bạn hiểu cách SDK của bên thứ ba sử dụng dữ liệu, chúng tôi đã giới thiệu các bản kê khai về quyền riêng tư.

00:45:46.000 --> 00:45:53.000
Đây là những tệp phác thảo các thực tiễn bảo mật của mã bên thứ ba trong ứng dụng của bạn, ở định dạng tiêu chuẩn.

00:45:53.000 --> 00:46:03.000
Khi bạn chuẩn bị phân phối ứng dụng của mình, Xcode sẽ kết hợp tất cả các bản kê khai trên tất cả các SDK của bên thứ ba mà bạn đang sử dụng thành một báo cáo duy nhất, dễ sử dụng.

00:46:03.000 --> 00:46:11.000
Với một báo cáo tóm tắt cho tất cả các SDK của bên thứ ba của bạn, việc tạo nhãn chính xác trong App Store Connect chưa bao giờ dễ dàng hơn thế.

00:46:11.000 --> 00:46:16.000
Chúng tôi cũng muốn giúp bạn cải thiện tính toàn vẹn của chuỗi cung ứng phần mềm của bạn.

00:46:16.000 --> 00:46:23.000
Khi sử dụng SDK của bên thứ ba, thật khó để biết mã bạn đã tải xuống được viết bởi nhà phát triển mà bạn mong đợi.

00:46:23.000 --> 00:46:29.000
Để giải quyết vấn đề đó, chúng tôi đang giới thiệu chữ ký cho SDK của bên thứ ba.

00:46:29.000 --> 00:46:39.000
Bây giờ khi bạn áp dụng phiên bản mới của SDK của bên thứ ba trong ứng dụng của mình, Xcode sẽ xác nhận rằng nó đã được ký bởi cùng một nhà phát triển, để giúp bạn yên tâm hơn.

00:46:39.000 --> 00:46:50.000
Với các bản kê khai quyền riêng tư và chữ ký cho SDK của bên thứ ba, chúng tôi đang giúp bạn bảo vệ người dùng dễ dàng hơn và giúp họ hiểu cách dữ liệu của họ sẽ được sử dụng.

00:46:50.000 --> 00:46:58.000
Và cuối cùng, An toàn Truyền thông, sử dụng công nghệ bảo vệ quyền riêng tư để bảo vệ trẻ em trên nền tảng của chúng tôi.

00:46:58.000 --> 00:47:08.000
Các nền tảng của chúng tôi và các ứng dụng bạn xây dựng đóng một vai trò quan trọng trong cuộc sống của nhiều gia đình trên khắp thế giới, đặc biệt là trong cách họ giao tiếp.

00:47:08.000 --> 00:47:17.000
Trong iOS 15, chúng tôi đã giới thiệu tính năng An toàn Giao tiếp trong Tin nhắn để cung cấp nhiều biện pháp bảo vệ hơn cho trẻ em sử dụng các thiết bị Apple.

00:47:17.000 --> 00:47:24.000
Nhiều người trong số các bạn xây dựng các ứng dụng nơi người dùng chia sẻ nội dung và cũng muốn bảo vệ trẻ em trong các tình huống dễ bị tổn thương.

00:47:24.000 --> 00:47:32.000
Chúng tôi biết rằng việc đào tạo và triển khai một mô hình để phân loại nội dung không an toàn có thể là một vấn đề khó giải quyết và rất nhiều việc phải thực hiện.

00:47:32.000 --> 00:47:40.000
Và vì vậy chúng tôi đang mang lại An toàn Giao tiếp cho toàn bộ nền tảng với khuôn khổ Phân tích Nội dung Nhạy cảm.

00:47:40.000 --> 00:47:48.000
Chỉ với một vài dòng mã, khung giúp bạn phát hiện hình ảnh và video có chứa ảnh khoả thân và điều này xảy ra hoàn toàn trên thiết bị.

00:47:48.000 --> 00:47:55.000
Vì vậy, bạn có thể xây dựng những trải nghiệm tích cực trong ứng dụng của mình cho những đứa trẻ đã bật An toàn Giao tiếp.

00:47:55.000 --> 00:48:02.000
Khung Phân tích Nội dung Nhạy cảm sử dụng cùng một công nghệ làm nền tảng cho An toàn Truyền thông.

00:48:02.000 --> 00:48:08.000
Khung bảo vệ quyền riêng tư của người dùng bằng cách xử lý hình ảnh và video hoàn toàn trên thiết bị.

00:48:08.000 --> 00:48:16.000
Ngoài ra, chúng tôi muốn cung cấp cho mọi người khả năng làm mờ nội dung nhạy cảm với Cảnh báo nội dung nhạy cảm.

00:48:16.000 --> 00:48:29.000
Khung phân tích nội dung nhạy cảm sẽ cho bạn biết nếu người dùng đã bật An toàn Giao tiếp hoặc Cảnh báo Nội dung Nhạy cảm, vì vậy bạn có thể điều chỉnh trải nghiệm ứng dụng của mình dựa trên tính năng nào được bật.

00:48:29.000 --> 00:48:36.000
Những tính năng mới này giúp việc cung cấp quyền riêng tư và sự an tâm cho người dùng của bạn trở nên dễ dàng hơn bao giờ hết.

00:48:36.000 --> 00:48:40.000
Tiếp theo, Chris sẽ cho chúng tôi biết có gì mới trong App Store.

00:48:40.000 --> 00:48:49.000
Chris Markiewicz: Có một nơi đáng tin cậy để người dùng khám phá các ứng dụng đáp ứng các tiêu chuẩn cao của chúng tôi về an toàn, quyền riêng tư và hiệu suất, và đó là App Store.

00:48:49.000 --> 00:48:57.000
App Store trao quyền cho bạn mở rộng quy mô phân phối ứng dụng của mình trên toàn thế giới bằng cách sử dụng nhiều mô hình kinh doanh khác nhau, như mua hàng trong ứng dụng.

00:48:57.000 --> 00:49:01.000
StoreKit là nền tảng cho việc mua hàng trong ứng dụng an toàn và đáng tin cậy.

00:49:01.000 --> 00:49:06.000
Chúng tôi cung cấp một mô hình dữ liệu mạnh mẽ để kết nối các sản phẩm của bạn với giao diện người dùng của ứng dụng.

00:49:06.000 --> 00:49:15.000
Nếu bạn cung cấp mua hàng trong ứng dụng, bạn biết tầm quan trọng của việc trình bày các chi tiết chính, như giá cả và thời lượng đăng ký, để người dùng có thể mua hàng có thông báo.

00:49:15.000 --> 00:49:19.000
Và chúng tôi biết nhiều nhà phát triển đấu tranh để làm điều này đúng.

00:49:19.000 --> 00:49:29.000
Năm nay, chúng tôi sẽ đưa StoreKit đi xa hơn với một bộ sưu tập các chế độ xem mới để cung cấp năng lượng cho giao diện người dùng bán hàng của ứng dụng của bạn trên tất cả các nền tảng, sử dụng các phương pháp hay nhất từ Nguyên tắc giao diện con người.

00:49:29.000 --> 00:49:37.000
Sử dụng cú pháp khai báo của SwiftUI, bạn có thể tạo ra trải nghiệm bán hàng của mình và StoreKit sẽ lo phần còn lại.

00:49:37.000 --> 00:49:39.000
Hãy xem một số ví dụ.

00:49:39.000 --> 00:49:45.000
ProductView cho phép bạn hiển thị các sản phẩm của mình bằng cách sử dụng dữ liệu bạn đã xác định trong App Store Connect.

00:49:45.000 --> 00:49:49.000
Bạn có thể dễ dàng tùy chỉnh nó để phù hợp với giao diện của ứng dụng của bạn.

00:49:49.000 --> 00:49:53.000
SubscriptionStoreView là một chế độ xem được xây dựng có mục đích cho các đăng ký.

00:49:53.000 --> 00:50:02.000
Chỉ với một dòng mã, mô tả, giá cả và thời lượng cho từng cấp độ dịch vụ được trình bày rõ ràng cho người dùng.

00:50:02.000 --> 00:50:04.000
Những lượt xem này không chỉ dành cho iPhone.

00:50:04.000 --> 00:50:09.000
Cùng một mã tạo ra một chế độ xem để phù hợp với trải nghiệm nền tảng trên tất cả các thiết bị Apple.

00:50:09.000 --> 00:50:13.000
Và nó thậm chí còn có thể mở rộng để phù hợp với màn hình nhỏ gọn của Apple Watch.

00:50:13.000 --> 00:50:19.000
Và tất nhiên, chúng được tạo ra với khả năng tiếp cận và bản địa hóa dành cho tất cả người dùng.

00:50:19.000 --> 00:50:23.000
Tích hợp SubscriptionStoreView vào ứng dụng của tôi cực kỳ dễ dàng.

00:50:23.000 --> 00:50:26.000
Hãy làm việc với dịch vụ đăng ký Backyard Birds Pass.

00:50:26.000 --> 00:50:34.000
Tôi sẽ vào Xcode để thêm một số khai báo vào SubscriptionStoreView của mình để phù hợp với giao diện của Backyard Birds.

00:50:34.000 --> 00:50:43.000
Tôi sẽ tùy chỉnh nội dung tiếp thị với chế độ xem, thêm nền vùng chứa và thay đổi kiểu của các tùy chọn đăng ký.

00:50:43.000 --> 00:50:48.000
Bây giờ chúng tôi có thứ gì đó trông tuyệt vời và phù hợp với thương hiệu của ứng dụng.

00:50:48.000 --> 00:50:53.000
Chúng ta cũng hãy xem nhanh trình mô phỏng nơi tôi có thể có được trải nghiệm đầy đủ giống như người dùng của tôi.

00:50:53.000 --> 00:51:01.000
Tại đây tôi có thể chọn một ưu đãi, nhấp vào Đăng ký và hoàn tất giao dịch mua.

00:51:01.000 --> 00:51:08.000
Đó là tất cả những gì cần thiết để xây dựng trải nghiệm mua hàng tùy chỉnh để hiển thị cho người dùng tất cả thông tin họ cần để đưa ra quyết định sáng suốt.

00:51:08.000 --> 00:51:16.000
Chúng tôi cũng biết việc tùy chỉnh các ưu đãi mà bạn đưa ra khó khăn như thế nào, dựa trên lịch sử mua hàng hoặc trạng thái đăng ký của người dùng.

00:51:16.000 --> 00:51:23.000
Đó là lý do tại sao SubscriptionStoreView sẽ tự động xác định tính đủ điều kiện của người dùng và hiển thị ưu đãi phù hợp.

00:51:23.000 --> 00:51:27.000
Chế độ xem StoreKit mới là cách tốt nhất để bán các giao dịch mua trong ứng dụng của bạn.

00:51:27.000 --> 00:51:34.000
Một khía cạnh quan trọng khác của việc phát triển doanh nghiệp của bạn là hiểu cách quảng cáo giúp người dùng khám phá ứng dụng của bạn.

00:51:34.000 --> 00:51:44.000
Đó là lý do tại sao SKAdNetwork giúp các mạng quảng cáo đo lường mức độ thành công của các chiến dịch quảng cáo thúc đẩy lượt tải xuống ứng dụng của bạn, đồng thời bảo vệ quyền riêng tư của người dùng.

00:51:44.000 --> 00:51:51.000
Ngoài việc đo lường lượt tải xuống, chúng tôi biết điều quan trọng là phải hiểu cách quảng cáo có thể đưa người dùng trở lại ứng dụng của bạn.

00:51:51.000 --> 00:51:54.000
SKAdNetwork 5 sẽ hỗ trợ đo lường sự tương tác lại.

00:51:54.000 --> 00:52:03.000
Ngoài việc đo lường chuyển đổi sau khi người dùng tải xuống ứng dụng của bạn, bạn cũng sẽ có thể đo lường chuyển đổi sau khi người dùng mở ứng dụng của bạn bằng cách nhấn vào quảng cáo.

00:52:03.000 --> 00:52:07.000
Phiên bản 5 sẽ có sẵn trong bản phát hành iOS vào cuối năm nay.

00:52:07.000 --> 00:52:18.000
Các tính năng mới của chúng tôi để mua hàng trong ứng dụng và SKAdNetwork sẽ giúp bạn phát triển doanh nghiệp của mình một cách có trách nhiệm đồng thời tôn trọng quyền riêng tư của người dùng, mang lại cho người dùng sự minh bạch và yên tâm.

00:52:18.000 --> 00:52:20.000
Bây giờ, trở lại Darin.

00:52:20.000 --> 00:52:25.000
Darin: Giống như ngôn ngữ lập trình và khuôn khổ của chúng tôi, các công cụ của chúng tôi được tạo ra cho nhau.

00:52:25.000 --> 00:52:31.000
Xcode tập hợp mọi thứ bạn cần để phát triển, kiểm tra và phân phối ứng dụng trên tất cả các nền tảng của chúng tôi.

00:52:31.000 --> 00:52:38.000
TestFlight và Xcode Cloud làm cho trải nghiệm trở nên liền mạch, từ dòng mã đầu tiên của bạn đến lần tải xuống đầu tiên trong App Store.

00:52:38.000 --> 00:52:42.000
Bây giờ Ken sẽ đưa chúng ta qua một cái nhìn về những phát triển mới nhất.

00:52:42.000 --> 00:52:51.000
Ken Orr: Đối với tất cả các nền tảng của Apple, một công cụ là trung tâm của trải nghiệm nhà phát triển của bạn, giúp bạn xây dựng tất cả các ứng dụng tuyệt vời của mình: Xcode.

00:52:51.000 --> 00:53:06.000
Nó tập hợp các tính năng mạnh mẽ, như một trình chỉnh sửa kết hợp chế tạo mã và thiết kế giao diện người dùng với các bản xem trước tương tác và hoạt ảnh trực tiếp, và kiểm soát nguồn tích hợp để tạo, xem xét và chia sẻ các thay đổi với nhóm của bạn.

00:53:06.000 --> 00:53:21.000
Các công cụ gỡ lỗi, lập hồ sơ và kiểm tra để giúp bạn đánh giá và tinh chỉnh ứng dụng của mình, tất cả đều được kết nối trong Xcode Cloud, một dịch vụ tích hợp và phân phối liên tục giúp đơn giản hóa việc phân phối cho TestFlight và App Store.

00:53:21.000 --> 00:53:25.000
Đối với Xcode 15, có một số cập nhật lớn.

00:53:25.000 --> 00:53:29.000
Hãy bắt đầu từ nơi bạn dành phần lớn thời gian của mình: trình chỉnh sửa nguồn.

00:53:29.000 --> 00:53:34.000
Hoàn thành mã giúp bạn có được mã bạn muốn nhanh hơn và ít lỗi hơn.

00:53:34.000 --> 00:53:42.000
Với Xcode 15, bạn sẽ bắt đầu với những hoàn thành phù hợp nhất với trình chỉnh sửa sử dụng mã xung quanh để ưu tiên.

00:53:42.000 --> 00:53:50.000
Cho dù đó là công cụ sửa đổi thích hợp nhất cho một chế độ xem cụ thể mà bạn đang sử dụng hay khi bạn đang xâu chuỗi các công cụ sửa đổi khi bạn tùy chỉnh chế độ xem.

00:53:50.000 --> 00:53:59.000
Và Xcode sẽ tự động tạo các ký hiệu cho tài nguyên danh mục tài sản của bạn, có nghĩa là chúng hiển thị khi hoàn thành mã và dễ sử dụng trong mã của bạn.

00:53:59.000 --> 00:54:05.000
Điều này mang lại cho bạn sự an toàn và yên tâm rằng tài sản của bạn có sẵn trong thời gian chạy.

00:54:05.000 --> 00:54:09.000
Một nơi tuyệt vời để sử dụng những tài sản đó là trong chế độ xem SwiftUI của bạn.

00:54:09.000 --> 00:54:17.000
Các bản xem trước của Xcode là một cách liền mạch để lặp lại trên giao diện người dùng của bạn, với phản hồi gần như tức thì khi bạn thiết kế ngay bên cạnh mã ứng dụng của mình.

00:54:17.000 --> 00:54:23.000
Trong Xcode 15, các bản xem trước dễ sử dụng hơn và có sẵn ở nhiều nơi hơn.

00:54:23.000 --> 00:54:32.000
Nó bắt đầu với một cú pháp mới, được xây dựng bằng Swift Macros, dễ viết và dễ nhớ.

00:54:32.000 --> 00:54:35.000
Làm việc với các nền tảng và thiết bị khác nhau giờ đây dễ dàng hơn.

00:54:35.000 --> 00:54:41.000
Bạn có thể chọn chúng ngay trong khung vẽ để đảm bảo tầm nhìn của bạn trông tuyệt vời ở mọi nơi.

00:54:41.000 --> 00:54:45.000
Và bây giờ bạn có thể sử dụng Xem trước trên tất cả các khung giao diện người dùng!

00:54:45.000 --> 00:54:54.000
Bất cứ nơi nào bạn đang sử dụng SwiftUI, UIKIt hoặc AppKit, bạn có thể lặp lại trên giao diện người dùng của mình với trải nghiệm nhất quán từ mọi nơi trong mã của mình.

00:54:54.000 --> 00:55:02.000
Bây giờ, để bắt kịp với việc nhanh chóng thực hiện và xem trước các thay đổi, Xcode hợp lý hóa cách bạn xem xét và cam kết những thay đổi đó.

00:55:02.000 --> 00:55:08.000
Nhiều người trong số các bạn sử dụng giai đoạn git trong quy trình làm việc của mình và bây giờ, nó được tích hợp trực tiếp vào Xcode!

00:55:08.000 --> 00:55:17.000
Bạn có thể thực hiện hoặc hủy thực hiện bất kỳ thay đổi nào chỉ với một cú nhấp chuột, tạo cam kết tiếp theo của bạn mà không cần rời khỏi mã của bạn.

00:55:17.000 --> 00:55:25.000
Từ trình điều hướng Kiểm soát Nguồn, bạn có thể xem lại tất cả các thay đổi của mình trong một chế độ xem duy nhất, giúp bạn hoàn thiện cam kết của mình.

00:55:25.000 --> 00:55:32.000
Và Xcode cũng hiển thị các cam kết không được đẩy, vì vậy bạn hoàn toàn có thể sắp xếp tất cả các cam kết của mình thành một yêu cầu kéo.

00:55:32.000 --> 00:55:34.000
Hãy nói về việc kiểm tra.

00:55:34.000 --> 00:55:37.000
Đó là một phần thiết yếu của việc tạo ra một ứng dụng chất lượng cao.

00:55:37.000 --> 00:55:48.000
Khi mã của bạn phát triển trên nhiều nền tảng, thiết bị, ngôn ngữ và tính năng người dùng, việc điều hướng kết quả kiểm tra của bạn và biết nơi tập trung - điều đó có thể là một thách thức.

00:55:48.000 --> 00:55:58.000
Xcode 15 bao gồm thiết kế lại hoàn chỉnh báo cáo thử nghiệm, cung cấp cho bạn các công cụ mới để hiểu rõ hơn về kết quả của bạn và hành động.

00:55:58.000 --> 00:56:01.000
Và nó bắt đầu với một cái nhìn tổng quan về kết quả tuyệt đẹp.

00:56:01.000 --> 00:56:07.000
Nó cho tôi thấy Top Insights bao gồm các mô hình thất bại phổ biến, như những mô hình có cùng thông điệp khẳng định.

00:56:07.000 --> 00:56:16.000
Tôi cũng nhận được một bản tóm tắt toàn diện về cách các bài kiểm tra của tôi chạy qua các cấu hình, như thiết bị và ngôn ngữ, và điều đó giúp tôi phát hiện ra các mẫu.

00:56:16.000 --> 00:56:20.000
Và có một bản đồ nhiệt để nhanh chóng chỉ cho tôi nơi để tập trung.

00:56:20.000 --> 00:56:22.000
Bây giờ, tôi đang làm việc trên một tính năng trong ứng dụng Backyard Birds.

00:56:22.000 --> 00:56:26.000
Và nhìn vào lần chạy thử mới nhất của tôi, tôi thấy tôi có một số vấn đề.

00:56:26.000 --> 00:56:29.000
Tôi sẽ bắt đầu bằng cách nhấp vào cái nhìn sâu sắc này.

00:56:29.000 --> 00:56:32.000
Có vẻ như một cử chỉ chạm đang thất bại trong bài kiểm tra mới của tôi.

00:56:32.000 --> 00:56:43.000
Tôi sẽ nhấp vào bài kiểm tra này đã thất bại, điều này cho tôi cái nhìn chi tiết về các hoạt động kiểm tra ở đây bên trái, cùng với bản ghi đầy đủ về giao diện người dùng của ứng dụng ở bên phải.

00:56:43.000 --> 00:56:46.000
Tôi có thể chọn một hoạt động cụ thể.

00:56:46.000 --> 00:56:50.000
Hoặc tôi có thể sử dụng dòng thời gian mới để chuyển đến bất kỳ thời điểm nào.

00:56:50.000 --> 00:56:58.000
Tôi có thể thấy các dấu hiệu cho các điểm thú vị, như khi bài kiểm tra cuộn chế độ xem này ở đây hoặc ở đây, nơi nó chạm vào trường tìm kiếm.

00:56:58.000 --> 00:57:07.000
Và đây là một bản ghi video đầy đủ cung cấp cho tôi nhiều chi tiết hơn, cho tôi thấy chính xác những gì đã xảy ra trước khi bài kiểm tra thất bại.

00:57:07.000 --> 00:57:10.000
Tôi sẽ chơi nó để xem chuyện gì đã xảy ra.

00:57:10.000 --> 00:57:14.000
Ở đây, bài kiểm tra đang chọn một số thức ăn để cho chim ăn.

00:57:14.000 --> 00:57:22.000
Con chim bắt đầu bay xung quanh, và sau đó nó biến mất trước khi hành động của tôi hoàn tất, đó là nguyên nhân khiến bài kiểm tra của tôi thất bại.

00:57:22.000 --> 00:57:32.000
Chi tiết thử nghiệm mới này với dòng thời gian và quay video giúp xem xét các bài kiểm tra về hoạt ảnh, cử chỉ và các trải nghiệm giao diện người dùng khác nhanh hơn rất nhiều.

00:57:32.000 --> 00:57:41.000
Và khi tôi cần nhiều hơn video, tôi cũng có thể nhìn thấy các khung hình khả năng truy cập, cho tôi cái nhìn sâu sắc hơn về quan điểm của mình.

00:57:41.000 --> 00:57:51.000
Tất cả kết hợp lại, trải nghiệm báo cáo mới cung cấp cho bạn những hiểu biết sâu sắc, chi tiết tốt hơn và nhiều tương tác hơn để tận dụng tối đa thử nghiệm của bạn.

00:57:51.000 --> 00:57:54.000
Và nó hoạt động liền mạch trong Xcode và Xcode Cloud.

00:57:54.000 --> 00:58:03.000
Xcode Cloud là một dịch vụ tích hợp và phân phối liên tục giúp bạn xây dựng, kiểm tra và chia sẻ ứng dụng của mình trên tất cả các nền tảng của Apple.

00:58:03.000 --> 00:58:10.000
Nó được tích hợp sâu vào Xcode, giúp bạn tiết kiệm thời gian bằng cách giữ cho bạn tập trung ở một nơi.

00:58:10.000 --> 00:58:17.000
Nó tận dụng cơ sở hạ tầng đám mây của Apple để giảm tải các bản dựng, thử nghiệm và thậm chí ký mã của bạn để phân phối.

00:58:17.000 --> 00:58:21.000
Nó kết nối với các dịch vụ của Apple như TestFlight và App Store Connect.

00:58:21.000 --> 00:58:26.000
Và nó được xây dựng với bảo mật tiên tiến để bảo vệ bạn và các dự án của bạn.

00:58:26.000 --> 00:58:32.000
Năm ngoái, chúng tôi đã cung cấp Xcode Cloud cho mọi thành viên của Chương trình Nhà phát triển Apple.

00:58:32.000 --> 00:58:39.000
Hàng chục nghìn nhóm đã giới thiệu các dự án của họ trực tiếp từ Xcode và phản hồi thật tuyệt vời!

00:58:39.000 --> 00:58:44.000
Và chúng tôi tiếp tục làm cho Xcode Cloud thậm chí còn tốt hơn.

00:58:44.000 --> 00:58:47.000
Chúng tôi thực sự quan tâm đến hiệu suất.

00:58:47.000 --> 00:58:53.000
Kể từ năm ngoái, chúng tôi đã thực hiện các khoản đầu tư đáng kể để bạn có thể làm được nhiều hơn với thời gian tính toán của mình.

00:58:53.000 --> 00:58:57.000
Chúng tôi cũng đã thêm các yêu cầu quan trọng nhất của bạn.

00:58:57.000 --> 00:59:06.000
Khi phân phối cho TestFlight, giờ đây bạn có thể tạo và chia sẻ ghi chú của người kiểm tra, giúp cập nhật cho tất cả người dùng về những cải tiến mới nhất của bạn.

00:59:06.000 --> 00:59:18.000
Xcode Cloud cũng hỗ trợ công chứng macOS khi phân phối với DeveloperID, vì vậy bạn có thể tự động kiểm tra ứng dụng của mình để tìm các thành phần độc hại trước khi chia sẻ nó với người dùng.

00:59:18.000 --> 00:59:27.000
Chỉ với vài phút để thiết lập quy trình làm việc của bạn, bạn có thể tận dụng hàng giờ thời gian tính toán để xây dựng, kiểm tra và triển khai các ứng dụng của mình.

00:59:27.000 --> 00:59:35.000
Chúng tôi rất vui mừng về tương lai của Xcode Cloud, khi chúng tôi tiếp tục làm cho nó nhanh hơn, an toàn hơn và linh hoạt hơn.

00:59:35.000 --> 00:59:44.000
Trong năm qua, chúng tôi đã tối ưu hóa trình biên dịch cho kiến trúc đa lõi của Apple silicon để làm cho tất cả các bản dựng của bạn nhanh hơn và có thể mở rộng hơn.

00:59:44.000 --> 00:59:51.000
Trình liên kết đã được thiết kế lại từ đầu, mang lại những cải tiến lớn về tốc độ liên kết.

00:59:51.000 --> 00:59:54.000
Liên kết nhanh hơn gấp năm lần!

00:59:54.000 --> 00:59:59.000
Trình liên kết mới cũng giảm kích thước của các tệp nhị phân gỡ lỗi lên đến 30%.

00:59:59.000 --> 01:00:09.000
Và đối với các ứng dụng nhúng nhiều khung, có một loại khung mới cung cấp các bản dựng nhanh hơn trong quá trình phát triển và giảm kích thước ứng dụng và thời gian khởi chạy nhanh hơn cho sản xuất.

01:00:09.000 --> 01:00:15.000
Cuối cùng, chúng tôi tiếp tục làm cho Xcode nhanh hơn và dễ dàng hơn để bắt đầu.

01:00:15.000 --> 01:00:21.000
Trên Mac App Store, Xcode hiện nhỏ hơn 50% và tất cả các trình mô phỏng đều có thể tải xuống theo yêu cầu.

01:00:21.000 --> 01:00:27.000
Điều đó có nghĩa là bạn có thể bắt đầu nhanh chóng và cài đặt các nền tảng bạn cần vào đúng thời điểm.

01:00:27.000 --> 01:00:30.000
Và bây giờ, trở lại Darin.

01:00:30.000 --> 01:00:38.000
Darin: Cách tiếp cận độc đáo của chúng tôi trong việc xây dựng ngôn ngữ, khuôn khổ, công cụ và dịch vụ mà tất cả hoạt động cùng nhau thực sự trở nên sống động khi chúng tôi giới thiệu một nền tảng mới.

01:00:38.000 --> 01:00:45.000
Việc sử dụng nền tảng được chia sẻ giúp làm cho nền tảng có vẻ quen thuộc trong khi vẫn đảm bảo sức mạnh cá nhân của nó tỏa sáng.

01:00:45.000 --> 01:00:52.000
visionOS tận dụng các khoản đầu tư mà chúng tôi đã thực hiện trong các nền tảng của mình trong nhiều năm và giới thiệu những lợi ích của cách tiếp cận này.

01:00:52.000 --> 01:00:56.000
Đây là Mike để kể cho bạn tất cả về nó.

01:00:56.000 --> 01:01:02.000
Mike Rockwell: Sự ra mắt của Apple Vision Pro đánh dấu sự khởi đầu của một hành trình cùng nhau trong điện toán không gian.

01:01:02.000 --> 01:01:12.000
Bây giờ bạn có thể vượt qua những gì bạn hiểu trước đây là có thể và hình dung lại ý nghĩa của việc kết nối, làm việc hiệu quả và giải trí.

01:01:12.000 --> 01:01:15.000
Vision Pro có nhiều công nghệ đột phá.

01:01:15.000 --> 01:01:22.000
Các ứng dụng của bạn sẽ sử dụng các yếu tố mới để tương tác với không gian của người dùng và hòa trộn liền mạch với phòng của họ.

01:01:22.000 --> 01:01:32.000
Tất cả đều có thể sử dụng các công nghệ mạnh mẽ mà bạn đã biết: SwiftUI, RealityKit và ARKit - hiện đã được mở rộng cho visionOS.

01:01:32.000 --> 01:01:43.000
Với nền tảng vững chắc này và một bộ công cụ dành cho nhà phát triển được cập nhật, bạn sẽ cảm thấy như đang ở nhà khi tạo ra một vũ trụ ứng dụng hoàn toàn mới cho Apple Vision Pro.

01:01:43.000 --> 01:01:53.000
Hôm nay chúng tôi sẽ đề cập đến mọi thứ bạn cần để bắt đầu với visionOS, từ các khối xây dựng cơ bản đến các khuôn khổ, công cụ và công nghệ quan trọng.

01:01:53.000 --> 01:02:08.000
Bạn sẽ tìm hiểu về các hoạt động và chương trình mà chúng tôi đang khởi chạy để hỗ trợ bạn khi bạn đưa các ứng dụng của mình vào cuộc sống trên Vision Pro; các ứng dụng tận dụng khung vẽ vô hạn của Vision Pro hoặc biến một căn phòng thành một môi trường truyền thông nhập vai.

01:02:08.000 --> 01:02:11.000
Vậy chúng ta hãy xắn tay áo lên.

01:02:11.000 --> 01:02:16.000
Vision Pro cho phép bạn suy nghĩ lại những gì có thể cho trải nghiệm ứng dụng của bạn.

01:02:16.000 --> 01:02:24.000
Bất kể bạn đang xây dựng loại ứng dụng nào, bạn cần hiểu nó sẽ tồn tại như thế nào trong 3D, trong không gian người dùng của bạn.

01:02:24.000 --> 01:02:28.000
Điều này sẽ thông báo các quyết định bạn đưa ra với tư cách là một nhà phát triển.

01:02:28.000 --> 01:02:39.000
Sự hiểu biết đó sẽ giúp bạn tận dụng các khả năng của Vision Pro, mang lại sự tập trung và đắm chìm cho các ứng dụng của bạn theo những cách mà cho đến bây giờ, là không thể.

01:02:39.000 --> 01:02:43.000
Theo mặc định, các ứng dụng khởi chạy vào Không gian Chia sẻ.

01:02:43.000 --> 01:02:50.000
Không gian chia sẻ là nơi các ứng dụng tồn tại cạnh nhau, giống như nhiều ứng dụng trên máy tính để bàn Mac.

01:02:50.000 --> 01:02:55.000
Người dùng có toàn quyền định vị lại các ứng dụng ở bất cứ đâu họ muốn.

01:02:55.000 --> 01:03:01.000
Hãy nói về các yếu tố bạn có thể sử dụng bên trong một không gian, bắt đầu với cửa sổ quen thuộc.

01:03:01.000 --> 01:03:11.000
Trên visionOS, ứng dụng của bạn có thể mở một hoặc nhiều cửa sổ, đó là những cảnh SwiftUI và hoạt động đúng như bạn mong đợi, như những chiếc máy bay trong không gian.

01:03:11.000 --> 01:03:22.000
Chúng có thể chứa các chế độ xem và điều khiển truyền thống, và chúng thậm chí còn hỗ trợ các đối tượng 3D và Chế độ xem thực tế, cho phép nội dung 3D nằm cạnh nội dung 2D.

01:03:22.000 --> 01:03:33.000
Ngoài ra, ứng dụng của bạn có thể tạo khối lượng ba chiều, cũng là cảnh SwiftUI và giới thiệu các đối tượng 3D, như bảng trò chơi hoặc quả địa cầu.

01:03:33.000 --> 01:03:37.000
Khối lượng có thể được di chuyển xung quanh không gian này và nhìn từ mọi góc độ.

01:03:37.000 --> 01:03:46.000
Trong một số trường hợp, bạn có thể muốn kiểm soát nhiều hơn mức độ đắm chìm trong ứng dụng của mình - có thể để người dùng xem video, chơi trò chơi hoặc diễn tập một bài thuyết trình.

01:03:46.000 --> 01:03:57.000
Bạn có thể làm điều này bằng cách mở một Không gian đầy đủ chuyên dụng, trong đó chỉ các ứng dụng, cửa sổ, âm lượng và các đối tượng 3D của bạn xuất hiện trên chế độ xem của người dùng.

01:03:57.000 --> 01:04:04.000
Vì vậy, đó là những yếu tố nền tảng của điện toán không gian: cửa sổ, khối lượng và không gian.

01:04:04.000 --> 01:04:09.000
Họ cung cấp cho bạn một bộ công cụ linh hoạt để xây dựng các ứng dụng có thể kéo dài sự đắm chìm liên tục.

01:04:09.000 --> 01:04:14.000
Bây giờ, để cho bạn biết thêm về cách bắt đầu xây dựng ứng dụng, đây là Geoff.

01:04:14.000 --> 01:04:18.000
Geoff Stahl: Vision Pro hỗ trợ một số loại ứng dụng khác nhau.

01:04:18.000 --> 01:04:26.000
Các ứng dụng iPad và iPhone hiện tại được hỗ trợ, mỗi ứng dụng dưới dạng một cửa sổ 2D có thể mở rộng duy nhất với giao diện ban đầu của chúng.

01:04:26.000 --> 01:04:29.000
Nhưng đó chỉ là khởi đầu của những gì có thể.

01:04:29.000 --> 01:04:37.000
Về cốt lõi, visionOS tương tự như iPadOS và iOS, và bao gồm nhiều khuôn khổ nền tảng giống nhau.

01:04:37.000 --> 01:04:51.000
Bạn sử dụng SwiftUI và UIKit để xây dựng giao diện người dùng của mình, RealityKit để trình bày nội dung 3D, hoạt ảnh và hiệu ứng hình ảnh và ARKit để hiểu không gian xung quanh người dùng.

01:04:51.000 --> 01:04:54.000
Đây đều là một phần của visionOS SDK.

01:04:54.000 --> 01:04:58.000
Vậy cần những gì để đưa ứng dụng của bạn lên Vision Pro?

01:04:58.000 --> 01:05:03.000
Đầu tiên, trong Xcode, thêm điểm đến visionOS vào dự án của bạn.

01:05:03.000 --> 01:05:11.000
Bây giờ, khi bạn xây dựng lại, ứng dụng của bạn sẽ tự động nhận được một số cải tiến thực sự thú vị.

01:05:11.000 --> 01:05:22.000
Vật liệu có giao diện visionOS, cửa sổ có thể thay đổi kích thước hoàn toàn với khoảng cách được điều chỉnh cho đầu vào mắt và tay và quyền truy cập vào các điều chỉnh làm nổi bật cho các điều khiển tùy chỉnh của bạn.

01:05:22.000 --> 01:05:29.000
Sau đó, bạn có thể thêm mã dành riêng cho visionOS để mở rộng ứng dụng của mình thành một bộ sưu tập các cửa sổ, khối lượng hoặc khoảng trắng.

01:05:29.000 --> 01:05:37.000
Từ đây, bạn có thể bắt đầu tận dụng các khả năng mở rộng của SwiftUI, RealityKit và ARKit.

01:05:37.000 --> 01:05:40.000
Đây là Enrica để cho bạn biết làm thế nào.

01:05:40.000 --> 01:05:46.000
Enrica Casucci: Trên visionOS, nhiều khuôn khổ của chúng tôi đã được mở rộng để hỗ trợ trải nghiệm không gian.

01:05:46.000 --> 01:05:53.000
Với SwiftUI, bây giờ bạn có thể thêm chiều sâu hoặc thêm một đối tượng 3D bên trong một cửa sổ.

01:05:53.000 --> 01:05:58.000
Trên iOS và MacOS, ZStack thường được sử dụng để xếp lớp chế độ xem.

01:05:58.000 --> 01:06:02.000
visionOS đi xa hơn, và bạn có thể tách chúng theo chiều sâu.

01:06:02.000 --> 01:06:07.000
Điều này mang lại cho các ứng dụng hai chiều của bạn cảm giác ba chiều.

01:06:07.000 --> 01:06:15.000
Bạn có thể thêm những thay đổi tinh tế về chiều sâu vào các yếu tố giao diện người dùng của mình bằng cách sử dụng công cụ sửa đổi chế độ xem z-offset mới.

01:06:15.000 --> 01:06:20.000
Giá trị bù đắp cao hơn thể hiện chế độ xem trước chế độ xem với giá trị thấp hơn.

01:06:20.000 --> 01:06:30.000
Và bạn có thể sử dụng điều này để thể hiện sự nhấn mạnh hoặc để chỉ ra sự thay đổi trong phương thức, ví dụ như khi hiển thị chi tiết cho một lựa chọn.

01:06:30.000 --> 01:06:36.000
Và với các công cụ sửa đổi chế độ xem bổ sung, bạn có thể kiểm soát nhiều hơn chiều rộng, chiều cao và chiều sâu.

01:06:36.000 --> 01:06:41.000
Trên Vision Pro, ngay cả những cử chỉ cũng nhận thức được không gian bổ sung.

01:06:41.000 --> 01:06:45.000
Tất cả chúng ta đều quen với việc kéo các đối tượng xung quanh màn hình.

01:06:45.000 --> 01:06:52.000
Giờ đây, mọi người sẽ có thể di chuyển hoặc xoay các vật thể ở bất cứ đâu trong không gian vật lý của họ.

01:06:52.000 --> 01:06:55.000
Bạn cũng có thể tạo một tập với SwiftUI.

01:06:55.000 --> 01:07:05.000
Nó có thể tồn tại cùng với các cửa sổ ứng dụng của bạn và khi chạy trong Không gian chia sẻ, hãy ngồi cạnh các ứng dụng khác.

01:07:05.000 --> 01:07:16.000
Và các cửa sổ và khối lượng SwiftUI cũng có thể nằm trong Không gian đầy đủ, nơi bạn có thể đặt các đối tượng 3D và các yếu tố SwiftUI ở bất kỳ đâu trong phòng của người dùng.

01:07:16.000 --> 01:07:27.000
SwiftUI không chỉ có thể nhanh chóng và dễ dàng đưa các ứng dụng của bạn lên visionOS, nó còn có thể hiển thị những trải nghiệm hoàn toàn nhập vai.

01:07:27.000 --> 01:07:35.000
Và SwiftUI hiện hiển thị thông qua RealityKit, vì vậy bạn có thể dễ dàng kết hợp SwiftUI và RealityKit APIs.

01:07:35.000 --> 01:07:42.000
Bạn có thể sử dụng các cải tiến giao diện người dùng như đồ trang trí, vật liệu và hiệu ứng di chuột.

01:07:42.000 --> 01:07:48.000
Đồ trang trí cho phép bạn gắn các thành phần giao diện người dùng vào các cạnh của cửa sổ và âm lượng của bạn.

01:07:48.000 --> 01:07:51.000
Chúng tuyệt vời cho những thứ như thanh công cụ và menu.

01:07:51.000 --> 01:07:57.000
Hiệu ứng di chuột làm nổi bật các yếu tố giao diện người dùng để đáp ứng với vị trí của người dùng.

01:07:57.000 --> 01:08:07.000
Trong khi các điều khiển hệ thống tự động nhận được các hiệu ứng này, bạn có các tùy chọn để quyết định xem điều khiển tùy chỉnh của bạn hiển thị điểm nổi bật hay phát sáng.

01:08:07.000 --> 01:08:11.000
Và các vật liệu thích ứng với thế giới xung quanh người dùng của bạn.

01:08:11.000 --> 01:08:18.000
Độ mờ động và sống động làm cho ứng dụng của bạn có thể đọc được, bất kể điều kiện nào.

01:08:18.000 --> 01:08:26.000
Cũng giống như trên các nền tảng khác của chúng tôi, chúng tôi khuyên bạn nên sử dụng SwiftUI để xây dựng các ứng dụng visionOS của mình.

01:08:26.000 --> 01:08:38.000
Các ứng dụng hiện tại của bạn được xây dựng bằng UIKit cũng có thể được biên dịch lại cho visionOS và sẽ có quyền truy cập vào đồ trang trí, hiệu ứng di chuột, vật liệu và giao diện gốc.

01:08:38.000 --> 01:08:45.000
SwiftUI chỉ là một trong những khuôn khổ bạn sẽ sử dụng để xây dựng trải nghiệm không gian trên visionOS.

01:08:45.000 --> 01:08:51.000
Edwin sẽ hướng dẫn bạn một vài điều nữa sẽ giúp bạn trên hành trình của mình.

01:08:51.000 --> 01:09:04.000
Edwin Iskandar: Khi bạn đã sẵn sàng mở rộng ứng dụng của mình với toàn bộ cảnh của các mô hình 3D động, hoạt ảnh và hiệu ứng hình ảnh, bạn sẽ muốn sử dụng RealityKit - công cụ kết xuất 3D của Apple được xây dựng từ đầu để kết xuất trải nghiệm không gian.

01:09:04.000 --> 01:09:09.000
Chúng tôi đã giới thiệu RealityKit và SwiftUI cùng nhau vào năm 2019 dưới dạng các khuôn khổ độc lập.

01:09:09.000 --> 01:09:16.000
Trên Apple Vision Pro, chúng được tích hợp sâu để bạn có thể xây dựng các giao diện sắc nét, nhạy và thể tích.

01:09:16.000 --> 01:09:23.000
Nội dung 3D có thể liên kết với chế độ xem và trạng thái SwiftUI, kết hợp liền mạch các yếu tố hình ảnh 2D và 3D với nhau.

01:09:23.000 --> 01:09:31.000
RealityKit tự động điều chỉnh theo điều kiện ánh sáng vật lý và đặt nền tảng cho trải nghiệm trong thực tế bằng cách đổ bóng lên sàn nhà và bàn.

01:09:31.000 --> 01:09:36.000
Điều này làm cho ứng dụng của bạn trông giống như nó thuộc về căn phòng.

01:09:36.000 --> 01:09:52.000
RealityKit cũng có những khả năng mới đáng kể, bao gồm khả năng tạo cổng vào các cảnh 3D - giống như con khủng long mà chúng ta đã thấy trong Keynote - để hiển thị văn bản cực kỳ sắc nét, vì vậy bạn có thể đọc thoải mái và hệ thống vật liệu có thể tùy chỉnh để tạo hiệu ứng hình ảnh tuyệt đẹp.

01:09:52.000 --> 01:10:00.000
Ngoài ra, kết xuất thậm chí còn hiệu quả hơn trên Apple Vision Pro bằng cách sử dụng một kỹ thuật gọi là Dynamic foveation.

01:10:00.000 --> 01:10:13.000
RealityKit tận dụng tính năng theo dõi mắt để hiển thị có chọn lọc các khu vực mà người dùng đang tập trung vào với độ trung thực rất cao, giảm chi phí kết xuất nội dung ở ngoại vi và cho phép các ứng dụng của bạn tối đa hóa sức mạnh xử lý của thiết bị.

01:10:13.000 --> 01:10:23.000
RealityKit kết xuất các mô hình 3D của bạn với kết quả quang học tuyệt đẹp bằng cách cho phép bạn chỉ định các đặc tính vật lý của nó, chẳng hạn như mức độ phản chiếu hoặc kim loại của nó.

01:10:23.000 --> 01:10:30.000
Theo mặc định, RealityKit hiển thị nội dung ảo để ánh sáng của nó được kết nối với điều kiện ánh sáng của phòng vật lý.

01:10:30.000 --> 01:10:40.000
Nếu bạn muốn tùy chỉnh hoặc thậm chí mở rộng chủ nghĩa hiện thực dựa trên mục đích sáng tạo của mình, bạn có thể cung cấp tài sản ánh sáng dựa trên hình ảnh, hoặc IBL, để cá nhân hóa giao diện.

01:10:40.000 --> 01:10:53.000
Để tạo ra các tài liệu của bạn, RealityKit đã áp dụng MaterialX, một tiêu chuẩn mở để chỉ định các bộ đổ bóng bề mặt và hình học được sử dụng bởi các công ty phim, hiệu ứng hình ảnh, giải trí và trò chơi hàng đầu.

01:10:53.000 --> 01:11:00.000
Sự hỗ trợ rộng rãi cho MaterialX trên nhiều công cụ sáng tạo hàng đầu trong ngành giúp việc viết đổ bóng dễ dàng hơn nhiều.

01:11:00.000 --> 01:11:09.000
MaterialX cho phép bạn thiết kế và nhanh chóng lặp lại giao diện của các vật liệu riêng lẻ, bằng cách cho phép bạn xác định các thuộc tính đổ bóng của nó.

01:11:09.000 --> 01:11:18.000
Có những kho tài liệu bạn có thể chọn và các công cụ hữu ích như Houdini và Maya có thể được sử dụng để tạo ra các bộ đổ bóng tùy chỉnh của riêng bạn.

01:11:18.000 --> 01:11:22.000
RealityKit cung cấp một chế độ xem SwiftUI mới được gọi là RealityView.

01:11:22.000 --> 01:11:30.000
RealityView có thể được sử dụng trong các cửa sổ, khối lượng và không gian, cho phép bạn đặt nội dung 3D ở bất cứ đâu bạn muốn trong các cảnh mà bạn kiểm soát.

01:11:30.000 --> 01:11:36.000
Nó cũng hỗ trợ Tệp đính kèm, cho phép bạn nhúng chế độ xem SwiftUI 2D với nội dung 3D của mình.

01:11:36.000 --> 01:11:45.000
Cùng với SwiftUI và RealityKit, một khuôn khổ mạnh mẽ thứ ba cho phép bạn tận dụng tối đa môi trường xung quanh người dùng: ARKit.

01:11:45.000 --> 01:11:55.000
ARKit hiểu không gian xung quanh người dùng, cho phép nội dung ứng dụng tương tác với căn phòng, cho dù đó là một quả bóng nảy trên sàn nhà hay nước bắn tung tóe trên tường.

01:11:55.000 --> 01:12:02.000
ARKit lưu trữ các thuật toán thời gian thực trên visionOS cung cấp năng lượng cho một loạt các khả năng hệ thống cốt lõi.

01:12:02.000 --> 01:12:10.000
Các thuật toán này luôn chạy, có nghĩa là các ứng dụng của bạn tự động được hưởng lợi từ ARKit trong Không gian chia sẻ, bất kể chúng được xây dựng như thế nào.

01:12:10.000 --> 01:12:13.000
Sự kiên trì và lập bản đồ thế giới được xử lý bởi hệ thống.

01:12:13.000 --> 01:12:19.000
Phân đoạn, thảm và ánh sáng môi trường được tự động áp dụng cho toàn bộ không gian.

01:12:19.000 --> 01:12:25.000
Và với sự cho phép của người dùng, các tính năng ARKit có thể được cung cấp trực tiếp cho các ứng dụng Full Space của bạn.

01:12:25.000 --> 01:12:40.000
Bên trong một không gian đầy đủ, các ứng dụng của bạn có thể tương tác thực tế với căn phòng bằng cách tận dụng Ước tính mặt phẳng, Tái tạo cảnh, Neo hình ảnh và Theo dõi thế giới của ARKit, sử dụng các khái niệm Anchor giống như ARKit trên iOS.

01:12:40.000 --> 01:12:45.000
Điều này giúp việc di chuyển ứng dụng ARKit hiện tại của bạn sang visionOS trở nên dễ dàng.

01:12:45.000 --> 01:12:50.000
Và trên visionOS, bây giờ bạn cũng có quyền truy cập vào Skeletal Hand Tracking.

01:12:50.000 --> 01:12:57.000
Bạn có thể sử dụng theo dõi tay để tạo các cử chỉ tùy chỉnh cho trải nghiệm ứng dụng của mình hoặc thậm chí tăng cường bàn tay của người dùng bằng thông tin kỹ thuật số.

01:12:57.000 --> 01:13:04.000
ARKit cung cấp định vị và định hướng của các khớp trong cùng một mô hình xương được giới thiệu trên iOS.

01:13:04.000 --> 01:13:14.000
Với cách tiếp cận tích hợp trên SwiftUI, RealityKit và ARKit, bạn có thể tận dụng việc học và đầu tư mà bạn đã đầu tư vào các nền tảng của Apple trong những năm qua.

01:13:14.000 --> 01:13:20.000
Và điều đó bao gồm những nỗ lực bạn đã bỏ ra để làm cho các ứng dụng của mình có thể truy cập được.

01:13:20.000 --> 01:13:26.000
Điều này đặc biệt có ý nghĩa vì điện toán không gian mở ra những cơ hội mới tuyệt vời cho khả năng tiếp cận.

01:13:26.000 --> 01:13:37.000
Trên Apple Vision Pro, người dùng khuyết tật về thể chất và vận động có thể tương tác hoàn toàn với thiết bị của họ bằng mắt hoặc giọng nói hoặc kết hợp cả hai.

01:13:37.000 --> 01:13:44.000
Người dùng cũng có thể chọn bằng ngón trỏ, cổ tay hoặc đầu làm con trỏ thay thế để điều hướng Vision Pro.

01:13:44.000 --> 01:13:50.000
Bạn sẽ làm cho các ứng dụng của mình có thể truy cập được trên visionOS bằng các kỹ thuật tương tự mà bạn đã sử dụng trong nhiều năm trên các nền tảng khác của chúng tôi.

01:13:50.000 --> 01:13:59.000
Trình kiểm tra khả năng truy cập phân tích và báo cáo các vấn đề về khả năng truy cập trong các ứng dụng visionOS của bạn và cung cấp cho bạn các đề xuất về cách làm cho chúng dễ tiếp cận hơn.

01:13:59.000 --> 01:14:07.000
Và với sự hỗ trợ khả năng tiếp cận được tích hợp trong khuôn khổ của chúng tôi, thật dễ dàng để mang các ứng dụng và trải nghiệm visionOS của bạn đến với người dùng khuyết tật.

01:14:07.000 --> 01:14:18.000
Ví dụ: bạn có thể giúp VoiceOver mô tả các đối tượng trong ứng dụng của mình cho những người dùng bị mù hoặc có thị lực kém bằng cách thêm nhãn và mô tả truyền tải thông tin, như ngoại hình của đối tượng.

01:14:18.000 --> 01:14:32.000
Bạn cũng có thể kết hợp các tùy chọn của người dùng để làm cho các ứng dụng của mình dễ tiếp cận hơn theo thiết kế, chẳng hạn như Loại động cho kích thước văn bản lớn hơn, Giảm độ trong suốt để dễ đọc hơn và các lựa chọn thay thế cho nội dung bị khóa đầu.

01:14:32.000 --> 01:14:41.000
Bằng cách sử dụng các API và công cụ quen thuộc này, các ứng dụng của bạn sẽ đóng một vai trò rất lớn trong việc làm cho điện toán không gian có thể tiếp cận được với người dùng trên toàn thế giới.

01:14:41.000 --> 01:14:46.000
Vì vậy, đó là phần giới thiệu về các khuôn khổ mạnh mẽ mà bạn có thể sử dụng để xây dựng các ứng dụng visionOS tuyệt vời.

01:14:46.000 --> 01:14:50.000
Bây giờ đây là Thessa để nói về tất cả các công cụ có sẵn cho bạn.

01:14:50.000 --> 01:14:55.000
Thessa Buscar-Alegria: Khi bạn bắt đầu xây dựng ứng dụng cho Vision Pro, bạn sẽ nhận ra nhiều hơn là chỉ các khuôn khổ.

01:14:55.000 --> 01:15:00.000
Các công cụ dành cho nhà phát triển của chúng tôi cũng đã được cập nhật để hỗ trợ visionOS.

01:15:00.000 --> 01:15:06.000
Cũng giống như tất cả các nền tảng khác của chúng tôi, Xcode là trung tâm trải nghiệm phát triển của bạn cho Vision Pro.

01:15:06.000 --> 01:15:17.000
Bạn có thể thêm điểm đến visionOS vào các dự án hiện tại của mình hoặc bạn có thể xây dựng một ứng dụng hoàn toàn mới dành riêng cho các khả năng độc đáo của nền tảng này.

01:15:17.000 --> 01:15:24.000
Bước đầu tiên trong việc xây dựng ứng dụng của bạn là có được giao diện ngay trên cả nội dung 2D và 3D.

01:15:24.000 --> 01:15:30.000
Xcode Previews cho phép bạn nhanh chóng lặp lại giao diện mà không cần rời khỏi trình chỉnh sửa.

01:15:30.000 --> 01:15:39.000
Khi đến lúc bắt đầu thử nghiệm toàn bộ ứng dụng của bạn, bạn có thể chuyển sang trình giả lập, cung cấp một môi trường mạnh mẽ để chạy và gỡ lỗi ứng dụng của bạn.

01:15:39.000 --> 01:15:45.000
Bạn có thể di chuyển và nhìn xung quanh cảnh bằng bàn phím, bàn di chuột hoặc bộ điều khiển trò chơi tương thích.

01:15:45.000 --> 01:15:50.000
Và bạn có thể tương tác với ứng dụng của mình bằng cách mô phỏng các cử chỉ hệ thống.

01:15:50.000 --> 01:15:58.000
Trình mô phỏng cũng cung cấp ba cảnh mô phỏng khác nhau với điều kiện ánh sáng ban ngày và ban đêm để giúp bạn hình dung ứng dụng của mình.

01:15:58.000 --> 01:16:05.000
Khi nói đến việc phát triển với Vision Pro của bạn, bạn sẽ xây dựng và chạy ứng dụng của mình trên thiết bị để đảm bảo nó hoạt động.

01:16:05.000 --> 01:16:10.000
Tôi rất vui mừng được chia sẻ tính năng bổ sung này sẽ thay đổi cách bạn làm việc.

01:16:10.000 --> 01:16:20.000
Màn hình ảo Mac cho phép bạn mang màn hình ảo 4K có độ trung thực cao của máy Mac ngay vào Vision Pro chỉ bằng cách nhìn vào nó.

01:16:20.000 --> 01:16:26.000
Bạn có thể sử dụng toàn bộ khả năng của máy Mac từ bên trong thiết bị của mình và bao gồm Xcode.

01:16:26.000 --> 01:16:40.000
Đây là một trải nghiệm phát triển đầu cuối đáng kinh ngạc: mã hóa, kiểm tra và gỡ lỗi ứng dụng của bạn trên Vision Pro toàn bộ thời gian mà không bị gián đoạn hoặc mất ngữ cảnh.

01:16:40.000 --> 01:16:46.000
Đôi khi, bạn cần đào sâu vào chi tiết về cách nội dung ứng dụng của bạn liên quan đến thế giới thực.

01:16:46.000 --> 01:16:54.000
Khi ứng dụng của bạn tương tác với phòng của người dùng, nó có thể đưa ra những thách thức độc đáo, chẳng hạn như nội dung 3D cắt trực quan qua các bức tường.

01:16:54.000 --> 01:17:04.000
Xcode có tính năng trực quan hóa gỡ lỗi thực tế để giúp bạn khám phá các va chạm, tắc nghẽn và hiểu cảnh vì nó liên quan đến nội dung 3D của bạn.

01:17:04.000 --> 01:17:09.000
Những hình ảnh trực quan này hoạt động cả trong trình giả lập và trên Vision Pro.

01:17:09.000 --> 01:17:19.000
Khi bạn phát triển các ứng dụng visionOS của mình, chúng sẽ trở nên không gian hơn, phá vỡ ranh giới của các cửa sổ phẳng và mang lại trải nghiệm 3D cho người dùng không giống như trước đây.

01:17:19.000 --> 01:17:23.000
Làm điều này đúng đòi hỏi một công cụ trực quan mới.

01:17:23.000 --> 01:17:27.000
Đó là lý do tại sao chúng tôi tạo ra Reality Composer Pro.

01:17:27.000 --> 01:17:35.000
Reality Composer Pro là một ứng dụng cho phép bạn xem trước và chuẩn bị nội dung 3D cho các ứng dụng visionOS của mình.

01:17:35.000 --> 01:17:41.000
Bạn có thể nhập và sắp xếp các nội dung như mô hình 3D, hoạt ảnh, hình ảnh và âm thanh.

01:17:41.000 --> 01:17:48.000
Nó tích hợp chặt chẽ với quy trình xây dựng Xcode để tối ưu hóa tài sản của bạn để sử dụng trên Vision Pro.

01:17:48.000 --> 01:17:54.000
Bạn có thể dễ dàng gửi nội dung của mình đến Vision Pro để xem trước, kích thước và xoay nó.

01:17:54.000 --> 01:18:01.000
Đẩy các thay đổi mới bất cứ lúc nào và xem nội dung của bạn trông như thế nào trước khi nhập một dòng mã.

01:18:01.000 --> 01:18:03.000
Đây là Jason để cho bạn một chuyến tham quan.

01:18:03.000 --> 01:18:08.000
Jason Cahill: Tôi đang thực hiện một trong những dự án mẫu của chúng tôi đưa bạn qua Hệ Mặt trời.

01:18:08.000 --> 01:18:18.000
Tôi muốn đảm bảo nội dung 3D của tôi trông tuyệt vời Vision Pro và tôi sẽ sử dụng Reality Composer Pro để cập nhật nó ngay bây giờ.

01:18:18.000 --> 01:18:24.000
Tôi sẽ bắt đầu bằng cách nhập mô hình vệ tinh và hình ảnh mà tôi đã tạo trong ứng dụng mô hình 3D của mình.

01:18:24.000 --> 01:18:29.000
Mô hình này có rất nhiều chi tiết, nhưng hiện tại không có vật liệu.

01:18:29.000 --> 01:18:37.000
Tôi sẽ tạo một tài liệu tùy chỉnh trong Reality Composer Pro, và sau đó tôi sẽ chuyển đến Shader Graph nơi chúng ta có thể tùy chỉnh nó.

01:18:37.000 --> 01:18:45.000
Thật dễ dàng và thú vị khi thêm một số hình ảnh đơn giản và các nút chức năng để thay đổi giao diện của một đối tượng, tất cả mà không cần phải nhập mã.

01:18:45.000 --> 01:18:53.000
Bạn có thể thử mọi thứ và xem kết quả ngay lập tức, và bạn sẽ không bao giờ gặp lỗi trình biên dịch khi phải gõ đổ bóng bằng tay.

01:18:53.000 --> 01:18:55.000
Tôi cũng sẽ lặp lại điều này cho các nút khác.

01:18:55.000 --> 01:19:01.000
Bất cứ lúc nào, tôi có thể xem trước công việc của mình ngay trên Vision Pro.

01:19:01.000 --> 01:19:10.000
Tôi có thể thu nhỏ nó, di chuyển nó, hoặc xoay nó, và đảm bảo nó trông và cảm nhận theo cách tôi muốn.

01:19:10.000 --> 01:19:12.000
Tôi thích những thay đổi này.

01:19:12.000 --> 01:19:22.000
Và sau đó quay trở lại Xcode, nơi những thay đổi của tôi đã được phản ánh trong dự án của tôi và sẵn sàng để sử dụng trong Bản xem trước Xcode hoặc Trình mô phỏng.

01:19:22.000 --> 01:19:27.000
Cứ như vậy, sẵn sàng để tôi tải mã và sử dụng trong ứng dụng của mình!

01:19:27.000 --> 01:19:42.000
Với Reality Composer Pro, quy trình phát triển visionOS của bạn có một công cụ mới mạnh mẽ hoạt động song song với Xcode, giúp việc xem trước và chuẩn bị nội dung 3D dễ dàng như xây dựng và chạy mã của bạn.

01:19:42.000 --> 01:19:48.000
Thessa: Khi bạn đã sẵn sàng thử nghiệm beta ứng dụng của mình, TestFlight sẽ có sẵn để sử dụng trên Vision Pro ngay từ đầu.

01:19:48.000 --> 01:20:01.000
Gửi các bản dựng mới cho TestFlight giống như bạn mong đợi thông qua App Store Connect, Xcode hoặc Xcode Cloud và những người thử nghiệm có thể cài đặt chúng và cung cấp phản hồi có giá trị ngay từ ứng dụng TestFlight gốc.

01:20:01.000 --> 01:20:07.000
Họ cũng có thể truy cập các bản dựng beta của các ứng dụng iPad và iPhone tương thích của bạn trên Vision Pro.

01:20:07.000 --> 01:20:19.000
Với dòng công cụ và dịch vụ phát triển này, từ Xcode đến TestFlight, và bây giờ là Reality Composer Pro, bạn sẽ sẵn sàng tạo ra các ứng dụng tuyệt vời cho Vision Pro.

01:20:19.000 --> 01:20:22.000
Và bây giờ, trở lại với Mike.

01:20:22.000 --> 01:20:26.000
Mike: Nhiều người trong số các bạn đã đầu tư nhiều năm để xây dựng các ứng dụng và trò chơi 3D với Unity.

01:20:26.000 --> 01:20:40.000
Để giúp dễ dàng đưa các ứng dụng của bạn lên Vision Pro, Apple và Unity đã hợp tác sâu sắc để xếp lớp công cụ thời gian thực của Unity lên trên RealityKit và cho phép các công cụ phát triển của họ nhắm mục tiêu visionOS.

01:20:40.000 --> 01:20:52.000
Điều này có nghĩa là các ứng dụng do Unity tạo ra có thể cùng tồn tại với các ứng dụng visionOS khác trong Không gian chia sẻ và tận dụng tối đa các lợi ích độc đáo của Apple Vision Pro.

01:20:52.000 --> 01:20:55.000
Để nói với bạn nhiều hơn, tôi muốn giới thiệu Ralph từ Unity.

01:20:55.000 --> 01:20:57.000
Ralph Hauwert: Cảm ơn bạn, Mike.

01:20:57.000 --> 01:21:03.000
Thật thú vị khi hợp tác với Apple trong việc tích hợp sâu rộng của chúng tôi cho visionOS.

01:21:03.000 --> 01:21:09.000
Giờ đây, bạn có thể sử dụng các công cụ tác giả mạnh mẽ và quen thuộc của Unity để tạo ra các trò chơi và ứng dụng visionOS mới.

01:21:09.000 --> 01:21:17.000
Và bạn có thể đưa các dự án do Unity tạo ra hiện tại của mình lên Vision Pro để hình dung lại trải nghiệm của bạn cho nền tảng mới này.

01:21:17.000 --> 01:21:30.000
Các ứng dụng của bạn có quyền truy cập vào tất cả các lợi ích của visionOS, chẳng hạn như chuyển qua độ phân giải cao và Kết xuất Foveated động, ngoài các tính năng Unity quen thuộc như AR Foundation.

01:21:30.000 --> 01:21:39.000
Và với sự tích hợp sâu sắc này giữa Unity và visionOS, các ứng dụng của bạn thậm chí có thể xuất hiện cùng với các ứng dụng khác trong Không gian chia sẻ.

01:21:39.000 --> 01:21:50.000
Bằng cách kết hợp khả năng tạo và mô phỏng của Unity với kết xuất ứng dụng được quản lý của RealityKit, nội dung được tạo bằng Unity trông và cảm nhận như ở nhà trên visionOS.

01:21:50.000 --> 01:21:58.000
Với Unity, bạn sẽ có thể bắt đầu nhanh chóng với cộng đồng, hướng dẫn và mẫu của chúng tôi.

01:21:58.000 --> 01:22:08.000
Chúng tôi tin rằng Apple Vision Pro đã ra mắt biên giới mới của điện toán không gian và chúng tôi thực sự vui mừng khi thấy các ứng dụng và trò chơi hoàn toàn mới mà bạn sẽ tạo ra.

01:22:08.000 --> 01:22:09.000
Mike: Cảm ơn bạn rất nhiều, Ralph.

01:22:09.000 --> 01:22:12.000
Thật tuyệt vời khi làm việc với bạn.

01:22:12.000 --> 01:22:18.000
Có một vài tính năng cơ bản hơn của visionOS mà bạn nên biết khi lên kế hoạch cho các bước tiếp theo của mình.

01:22:18.000 --> 01:22:21.000
Đây là Jeff để cung cấp cho bạn tất cả các chi tiết.

01:22:21.000 --> 01:22:31.000
Jeff Norris: Các khuôn khổ bạn sử dụng để tạo ứng dụng cho Vision Pro được thiết kế với hai mục tiêu: cho phép bạn tận dụng phần cứng và phần mềm mạnh mẽ của nền tảng với nỗ lực tối thiểu và bảo vệ quyền riêng tư của người dùng.

01:22:31.000 --> 01:22:41.000
Bạn có thể thấy những nguyên tắc này hoạt động trong toàn hệ thống, từ cách các ứng dụng hòa nhập với môi trường xung quanh đến các tương tác tự nhiên của người dùng đến các khả năng cộng tác mới.

01:22:41.000 --> 01:22:47.000
visionOS xây dựng một mô hình 3D về môi trường xung quanh người dùng để cho phép ánh sáng và bóng tối thực tế.

01:22:47.000 --> 01:22:53.000
Kết quả là, các ứng dụng có thể hòa nhập một cách tự nhiên với thế giới xung quanh mà không cần truy cập vào dữ liệu máy ảnh.

01:22:53.000 --> 01:22:59.000
visionOS sử dụng cùng một mô hình 3D để kích hoạt thế hệ âm thanh không gian tiếp theo cho các ứng dụng của bạn.

01:22:59.000 --> 01:23:06.000
Trong thế giới thực, âm thanh vang vọng khắp và xung quanh một không gian, bật ra khỏi tường và đồ đạc trước khi đến tai một người.

01:23:06.000 --> 01:23:09.000
Âm thanh ảo của ứng dụng của bạn sẽ hoạt động theo cùng một cách.

01:23:09.000 --> 01:23:13.000
Điều này đòi hỏi một sự hiểu biết tinh vi về môi trường xung quanh người dùng.

01:23:13.000 --> 01:23:24.000
Công cụ âm thanh không gian PHASE trong visionOS kết hợp cảm biến âm thanh với sự hiểu biết về cảnh 3D để tạo ra một mô hình chi tiết về các đặc điểm âm thanh của không gian.

01:23:24.000 --> 01:23:31.000
Khi các nguồn âm thanh và người dùng di chuyển xung quanh môi trường, PHASE cập nhật mô phỏng theo dõi tia âm thanh của nó trong thời gian thực.

01:23:31.000 --> 01:23:40.000
Mô hình này kết hợp với công nghệ Âm thanh Không gian được Cá nhân hóa của Apple để tự động điều chỉnh trải nghiệm cho từng cá nhân và môi trường xung quanh.

01:23:40.000 --> 01:23:46.000
Tất cả sự phức tạp đáng kinh ngạc này được quản lý cho bạn và bạn không cần truy cập vào bất kỳ chi tiết nào về không gian vật lý của người dùng.

01:23:46.000 --> 01:23:53.000
Sử dụng RealityKit, bạn chỉ cần quyết định nơi bạn muốn âm thanh đến và visionOS tự nhiên trộn chúng vào thế giới thực.

01:23:53.000 --> 01:24:03.000
Cũng giống như các thuật toán cung cấp năng lượng cho ánh sáng và âm thanh thực tế trong các ứng dụng của bạn, đầu vào của người dùng trên visionOS hoạt động tự động và được thiết kế riêng tư.

01:24:03.000 --> 01:24:09.000
Hiệu ứng di chuột tự động hiển thị cho bất kỳ yếu tố giao diện người dùng nào được xây dựng bằng SwiftUI hoặc RealityKit.

01:24:09.000 --> 01:24:13.000
Nếu người dùng nhìn vào một nút, nó sẽ nổi bật trước khi họ nhấn vào nó.

01:24:13.000 --> 01:24:20.000
Và giống như một cú nhấp chuột hoặc một cú chạm vào iPhone, ứng dụng của bạn sẽ được thông báo về một lựa chọn khi người dùng chạm vào ngón tay của họ.

01:24:20.000 --> 01:24:28.000
Người dùng nhận được phản hồi trực quan mà họ cần và bạn nhận được các tương tác mà bạn mong đợi mà không cần biết người dùng trông ở đâu trước khi họ nhấn.

01:24:28.000 --> 01:24:33.000
Chia sẻ và cộng tác là một phần trung tâm của trải nghiệm Vision Pro.

01:24:33.000 --> 01:24:39.000
Cũng giống như trên macOS, người dùng Vision Pro có thể chia sẻ bất kỳ cửa sổ ứng dụng nào với những người khác trong cuộc gọi FaceTime.

01:24:39.000 --> 01:24:43.000
Và với SharePlay, những trải nghiệm được chia sẻ thế hệ tiếp theo trở nên khả thi.

01:24:43.000 --> 01:24:52.000
Khi ứng dụng của bạn áp dụng SharePlay với GroupActivities API, quyền kiểm soát chia sẻ trên mỗi cửa sổ sẽ thêm một tùy chọn khởi chạy ứng dụng của bạn cho mọi người trong cuộc gọi.

01:24:52.000 --> 01:24:57.000
Điều này cho phép họ tham gia vào một trải nghiệm được chia sẻ thực sự, cùng nhau, trong thời gian thực.

01:24:57.000 --> 01:25:02.000
Bạn quyết định cách ứng dụng của mình có thể được sử dụng cộng tác, giống như bạn có cho SharePlay trên các nền tảng khác của chúng tôi.

01:25:02.000 --> 01:25:15.000
Người dùng Vision Pro trong cuộc gọi FaceTime xuất hiện với những người tham gia khác dưới dạng Persona - một biểu diễn tự nhiên được tạo bằng các kỹ thuật học máy tiên tiến, tự động phù hợp với chuyển động trên khuôn mặt và tay của họ.

01:25:15.000 --> 01:25:20.000
Personas xuất hiện với những người dùng Vision Pro khác với âm lượng và chiều sâu ba chiều.

01:25:20.000 --> 01:25:28.000
Nhưng chúng tôi muốn đưa FaceTime lên một tầm cao mới trên Vision Pro và trao quyền cho người dùng ở bất cứ đâu để tương tác như thể họ thực sự đang ở trong một căn phòng cùng nhau.

01:25:28.000 --> 01:25:34.000
Trải nghiệm này vẫn còn ở dạng ban đầu và chúng tôi rất vui được chia sẻ nó với bạn ở đây lần đầu tiên.

01:25:34.000 --> 01:25:43.000
Spatial Personas cho phép người dùng Vision Pro thoát ra khỏi ô FaceTime quen thuộc và cảm thấy hiện diện nhiều hơn, giống như họ được tập hợp trong cùng một không gian vật lý.

01:25:43.000 --> 01:25:49.000
visionOS đảm bảo rằng người dùng và ứng dụng có bối cảnh không gian được chia sẻ và nhất quán.

01:25:49.000 --> 01:25:52.000
Các ứng dụng của bạn có thể tận dụng bối cảnh mới này với SharePlay.

01:25:52.000 --> 01:26:04.000
Giờ đây, ngoài việc đồng bộ hóa các thay đổi trong ứng dụng của bạn giữa những người dùng, bạn có thể phản hồi các hành động vật lý của người dùng, để việc đứng cùng nhau trên bảng Freeform hoặc di chuyển các mảnh trong trò chơi trên bàn cảm thấy tự nhiên.

01:26:04.000 --> 01:26:11.000
Chúng tôi muốn các ứng dụng của bạn trở thành một phần của trải nghiệm mới đáng kinh ngạc này và phản hồi của bạn sẽ rất quan trọng khi nó tiếp tục phát triển.

01:26:11.000 --> 01:26:16.000
Đó là lý do tại sao chúng tôi cung cấp bản xem trước dành cho nhà phát triển của Spatial Personas cho bạn vào cuối năm nay.

01:26:16.000 --> 01:26:22.000
Đây chỉ là một vài ví dụ nữa về các công nghệ phong phú, phong phú mà bạn có thể tận dụng trên visionOS.

01:26:22.000 --> 01:26:26.000
Bây giờ, đây là Linda để nói về nơi bạn sẽ đến từ đây.

01:26:26.000 --> 01:26:32.000
Linda Dong: Bây giờ bạn đã được giới thiệu về Apple Vision Pro và visionOS, điều gì tiếp theo?

01:26:32.000 --> 01:26:34.000
Hành trình phát triển của bạn bắt đầu từ hôm nay.

01:26:34.000 --> 01:26:42.000
Chúng tôi khuyến khích bạn đi sâu vào và học hỏi nhiều nhất có thể khi bạn bắt đầu thiết kế, phát triển và thử nghiệm Vision Pro.

01:26:42.000 --> 01:26:54.000
VisionOS SDK, cùng với Xcode và Simulator được cập nhật, và Reality Composer Pro, sẽ có sẵn vào cuối tháng này, vì vậy bạn có thể bắt đầu thực hiện các ý tưởng của mình.

01:26:54.000 --> 01:27:04.000
Bạn cũng sẽ có quyền truy cập vào tài liệu kỹ thuật mở rộng, bộ dụng cụ và công cụ thiết kế mới và Hướng dẫn Giao diện Con người được cập nhật cho visionOS.

01:27:04.000 --> 01:27:10.000
Ngoài Vision Pro Simulator, chúng tôi cũng có các tùy chọn để bạn xem ứng dụng của bạn hoạt động như thế nào trên Vision Pro.

01:27:10.000 --> 01:27:18.000
Mùa hè này, chúng tôi sẽ ra mắt Phòng thí nghiệm dành cho nhà phát triển Apple Vision Pro, nơi bạn có thể kiểm tra ứng dụng của mình trên phần cứng Vision Pro.

01:27:18.000 --> 01:27:25.000
Bạn sẽ được hỗ trợ thực hành và khả năng xem trước trải nghiệm của mình trước khi Vision Pro được phát hành cho khách hàng.

01:27:25.000 --> 01:27:32.000
Các phòng thí nghiệm này sẽ được đặt tại một số địa điểm trên khắp thế giới, bao gồm Trung tâm Nhà phát triển của chúng tôi ở Cupertino.

01:27:32.000 --> 01:27:39.000
Và bất kể bạn ở đâu, bạn sẽ có thể gửi yêu cầu để chúng tôi đánh giá khả năng tương thích của ứng dụng của bạn với Vision Pro.

01:27:39.000 --> 01:27:44.000
Chúng tôi sẽ cài đặt ứng dụng của bạn và chia sẻ bất kỳ vấn đề nào mà chúng tôi có thể tìm thấy.

01:27:44.000 --> 01:27:49.000
Để cập nhật thêm về những cơ hội thú vị này, hãy truy cập Trang web của Nhà phát triển.

01:27:49.000 --> 01:27:57.000
Và tất nhiên, Vision Pro sẽ ra mắt với một App Store hoàn toàn mới, vì vậy mọi người có thể khám phá và tải xuống các ứng dụng đáng kinh ngạc mà bạn tạo ra.

01:27:57.000 --> 01:28:04.000
Chúng tôi mời bạn chia sẻ ý tưởng của bạn cho nền tảng này và chúng tôi sẽ tiếp tục hỗ trợ bạn khi bạn đưa chúng vào cuộc sống!

01:28:04.000 --> 01:28:06.000
Bây giờ, trở lại Darin.

01:28:06.000 --> 01:28:07.000
Darin: Thật là một năm thú vị!

01:28:07.000 --> 01:28:19.000
Một cơ hội đáng kinh ngạc với visionOS, rất nhiều bổ sung chu đáo cho mỗi nền tảng, như nhiều nơi hơn để hiển thị ứng dụng của bạn với WidgetKit, mở rộng của Continuity Camera và thiết kế mới cho watchOS.

01:28:19.000 --> 01:28:27.000
Cộng với những cải tiến lớn cho Swift với Macros và Swift Data, và một bản nâng cấp lớn cho Xcode Previews.

01:28:27.000 --> 01:28:37.000
Sự phát triển của năm nay trên các ngôn ngữ, khuôn khổ, công cụ và dịch vụ thể hiện cam kết sâu sắc của chúng tôi trong việc giúp bạn tạo ra những trải nghiệm độc đáo cho hàng tỷ thiết bị trên nền tảng của chúng tôi.

01:28:37.000 --> 01:28:47.000
Các nền tảng này trải rộng trên một loạt các sản phẩm ngày càng đa dạng với mức độ nhất quán và tích hợp tạo ra sự khác biệt cho bạn với tư cách là nhà phát triển và người dùng.

01:28:47.000 --> 01:28:50.000
Chúng tôi đã làm xước thành công bề mặt của những gì mới trong nền tảng của mình.

01:28:50.000 --> 01:29:03.000
Nhưng để đi xa hơn, chúng tôi có 175 phiên video chuyên sâu - 40 phiên chỉ riêng cho visionOS - cùng với hơn 200 phòng thí nghiệm do các chuyên gia Apple điều hành để trả lời các câu hỏi hóc búa của bạn khi bạn xây dựng các ứng dụng tuyệt vời.

01:29:03.000 --> 01:29:11.000
Chưa bao giờ có thời điểm tốt hơn để trở thành nhà phát triển Apple và tôi không nghi ngờ gì những gì bạn tạo ra sẽ làm kinh ngạc và làm hài lòng người dùng của bạn.

01:29:11.000 --> 01:29:14.000
Chúc một WWDC tuyệt vời!

01:29:14.000 --> 01:29:26.000
♪ ♪

01:29:26.000 --> 23:59:59.000
♪ ♪

