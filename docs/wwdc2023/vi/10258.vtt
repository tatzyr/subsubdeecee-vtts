WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
Anant: Xin chào. Chào mừng đến với "Biểu tượng hoạt hình trong ứng dụng của bạn."

00:00:14.000 --> 00:00:19.000
Tên tôi là Anant, và tôi là một kỹ sư trên UIKit.

00:00:19.000 --> 00:00:24.000
Biểu tượng SF là một phần mang tính biểu tượng của giao diện Apple.

00:00:24.000 --> 00:00:29.000
Chúng trông tuyệt đẹp trong các menu, thanh công cụ, thanh bên và hơn thế nữa.

00:00:29.000 --> 00:00:36.000
Và bởi vì mọi người quen thuộc với các biểu tượng, chúng làm cho ứng dụng của bạn trực quan hơn để sử dụng.

00:00:36.000 --> 00:00:46.000
Trong iOS 17 và macOS Sonoma, chúng tôi đang tăng cường các biểu tượng bằng hoạt ảnh, mang lại sức sống cho các ứng dụng của bạn hơn bao giờ hết.

00:00:46.000 --> 00:00:53.000
Tôi sẽ bắt đầu với một chuyến tham quan các hình ảnh động biểu tượng mới, còn được gọi là "hiệu ứng biểu tượng".

00:00:53.000 --> 00:01:03.000
Sau đó, tôi sẽ hướng dẫn bạn thông qua các API mới trong SwiftUI, UIKit và AppKit để thêm hiệu ứng biểu tượng vào ứng dụng của bạn.

00:01:03.000 --> 00:01:10.000
Và cuối cùng, tôi sẽ cung cấp cho bạn một số mẹo để làm cho hiệu ứng biểu tượng thực sự tỏa sáng.

00:01:10.000 --> 00:01:14.000
Vậy hãy nhảy vào.

00:01:14.000 --> 00:01:24.000
iOS 17 và macOS Sonoma giới thiệu một bộ sưu tập các hình ảnh động phổ quát có thể được áp dụng cho bất kỳ hình ảnh biểu tượng nào, ngay cả các biểu tượng tùy chỉnh.

00:01:24.000 --> 00:01:36.000
Những hình ảnh động này được gọi là Bounce, Pulse, Variable Color, Scale, Appear, Disappear, và Replace.

00:01:36.000 --> 00:01:48.000
Tôi khuyên bạn nên xem phiên "Có gì mới trong SF Symbols 5" để đi sâu hơn vào bản thân các hình ảnh động, bao gồm các phương pháp hay nhất để thiết kế giao diện với chúng.

00:01:48.000 --> 00:01:57.000
Trong API, những hình ảnh động này được gọi là "hiệu ứng biểu tượng" và khung Biểu tượng mới là nơi có tất cả chúng.

00:01:57.000 --> 00:02:03.000
Nó được bao gồm miễn phí khi bạn sử dụng SwiftUI, AppKit hoặc UIKit để xây dựng ứng dụng của mình.

00:02:03.000 --> 00:02:10.000
Một tính năng thực sự thú vị của khung Biểu tượng là mỗi hiệu ứng có một tên được phân tách bằng dấu chấm đơn giản.

00:02:10.000 --> 00:02:17.000
Vì vậy, để tạo hiệu ứng trả lại, bạn có thể chỉ cần viết ".bounce" trong mã của mình.

00:02:17.000 --> 00:02:23.000
Những tên được phân tách bằng dấu chấm này cũng mở rộng đến cách bạn định cấu hình hiệu ứng.

00:02:23.000 --> 00:02:33.000
Ví dụ, bạn có thể chỉ định rằng biểu tượng sẽ nảy lên hoặc xuống, nhưng hầu hết thời gian, bạn sẽ không cần chỉ định bất cứ điều gì.

00:02:33.000 --> 00:02:37.000
Các khuôn khổ sẽ tự động sử dụng hướng thích hợp nhất.

00:02:37.000 --> 00:02:41.000
Một số hiệu ứng có nhiều tùy chọn cấu hình.

00:02:41.000 --> 00:02:46.000
Ví dụ, Variable Color có ba cài đặt khác nhau.

00:02:46.000 --> 00:02:53.000
Bằng cách xâu chuỗi các tùy chọn lại với nhau, bạn có thể định cấu hình các hiệu ứng rất cụ thể một cách dễ dàng.

00:02:53.000 --> 00:02:56.000
Tên hiệu ứng là mã Swift thật.

00:02:56.000 --> 00:02:59.000
Không có ràng buộc nào được đính kèm.

00:02:59.000 --> 00:03:08.000
Xcode sẽ tự động hoàn thành từng phần của tên và nếu một hiệu ứng được định cấu hình không chính xác, bạn sẽ gặp lỗi tại thời điểm biên dịch.

00:03:08.000 --> 00:03:14.000
Cách tốt nhất để khám phá tất cả các hình ảnh động mới là ứng dụng Biểu tượng SF.

00:03:14.000 --> 00:03:22.000
Trong tab hoạt hình mới, bạn có thể tìm hiểu về tất cả các tùy chọn cấu hình có sẵn cho từng hiệu ứng.

00:03:22.000 --> 00:03:28.000
Bạn thậm chí có thể sao chép tên hiệu ứng được phân tách bằng dấu chấm để được sử dụng trực tiếp trong mã của mình.

00:03:28.000 --> 00:03:35.000
Với tất cả các loại hiệu ứng và tùy chọn cấu hình, có rất nhiều hình ảnh động có sẵn.

00:03:35.000 --> 00:03:40.000
Nhưng tất cả những hiệu ứng này thực sự bao gồm một tập hợp nhỏ các hành vi.

00:03:40.000 --> 00:03:46.000
Ví dụ, Bounce phát hoạt ảnh một lần trên biểu tượng.

00:03:46.000 --> 00:03:50.000
Đây được coi là hành vi rời rạc.

00:03:50.000 --> 00:03:57.000
Mặt khác, việc thêm hiệu ứng Tỷ lệ sẽ thay đổi mức tỷ lệ của biểu tượng và giữ nó ở đó vô thời hạn.

00:03:57.000 --> 00:04:01.000
Quy mô được cho là hỗ trợ hành vi vô thời hạn.

00:04:01.000 --> 00:04:08.000
Không giống như các hiệu ứng rời rạc, các hiệu ứng không xác định chỉ kết thúc khi bị xóa rõ ràng.

00:04:08.000 --> 00:04:12.000
Xuất hiện và Biến mất hỗ trợ hành vi chuyển tiếp.

00:04:12.000 --> 00:04:17.000
Họ có thể chuyển đổi biểu tượng vào và ra khỏi tầm nhìn.

00:04:17.000 --> 00:04:21.000
Và cuối cùng, Thay thế là một quá trình chuyển đổi nội dung.

00:04:21.000 --> 00:04:25.000
Nó làm sinh động từ biểu tượng này sang biểu tượng khác.

00:04:25.000 --> 00:04:33.000
Vì vậy, đó là bốn hành vi khác nhau: rời rạc, không xác định, chuyển đổi và chuyển đổi nội dung.

00:04:33.000 --> 00:04:38.000
Trong khuôn khổ Biểu tượng, mỗi hành vi tương ứng với một giao thức.

00:04:38.000 --> 00:04:44.000
Các hiệu ứng tuyên bố các hành vi được hỗ trợ của chúng bằng cách tuân thủ các giao thức này.

00:04:44.000 --> 00:04:50.000
Đây là bảng phân tích tất cả các hiệu ứng có sẵn, cũng như các hành vi được hỗ trợ của chúng.

00:04:50.000 --> 00:04:54.000
Tôi sẽ đề cập đến điều này chi tiết hơn trong phiên này.

00:04:54.000 --> 00:05:00.000
Chỉ cần biết rằng hành vi của một hiệu ứng xác định API khung giao diện người dùng nào có thể hoạt động với chúng.

00:05:00.000 --> 00:05:11.000
Và nói về API khung giao diện người dùng, hãy nói về cách thêm tất cả các hiệu ứng thú vị này vào các ứng dụng SwiftUI, UIKit và AppKit của bạn.

00:05:11.000 --> 00:05:17.000
Trong SwiftUI, có một công cụ sửa đổi chế độ xem mới, symbolEffect.

00:05:17.000 --> 00:05:21.000
Chỉ cần thêm công cụ sửa đổi và chuyển hiệu ứng mong muốn.

00:05:21.000 --> 00:05:30.000
Ở đây, tôi vượt qua variableColor, và bây giờ biểu tượng đang phát hoạt ảnh màu biến đổi mặc định.

00:05:30.000 --> 00:05:34.000
Thật dễ dàng để làm điều này trong AppKit và UIKit.

00:05:34.000 --> 00:05:40.000
Chỉ cần sử dụng phương pháp addSymbolEffect mới trên chế độ xem hình ảnh để thêm hiệu ứng màu thay đổi.

00:05:40.000 --> 00:05:46.000
Tôi có thể cấu hình hiệu ứng màu biến đổi bằng cách sử dụng cú pháp dấu chấm.

00:05:46.000 --> 00:05:56.000
Ở đây, tôi thay đổi hiệu ứng thành variableColor.iterative.reversing, dẫn đến một hình ảnh động màu biến đổi khác.

00:05:56.000 --> 00:06:00.000
Đó là một cách tuyệt vời để cho thấy rằng ứng dụng của tôi đang kết nối với mạng.

00:06:00.000 --> 00:06:04.000
Thậm chí có thể kết hợp các hiệu ứng khác nhau.

00:06:04.000 --> 00:06:07.000
Ở đây, tôi thêm một hiệu ứng scale.up.

00:06:07.000 --> 00:06:14.000
Bây giờ biểu tượng đang tạo hiệu ứng động cho màu sắc thay đổi trong khi cũng được thu nhỏ.

00:06:14.000 --> 00:06:20.000
Các API này cung cấp một cách đơn giản để thêm các hiệu ứng không xác định vào hình ảnh biểu tượng.

00:06:20.000 --> 00:06:29.000
Nhớ lại rằng các hiệu ứng không xác định thay đổi một số khía cạnh của biểu tượng vô thời hạn, cho đến khi hiệu ứng bị xóa.

00:06:29.000 --> 00:06:37.000
Vì vậy, sử dụng công cụ sửa đổi hiệu ứng biểu tượng, tôi có thể áp dụng hiệu ứng màu thay đổi, liên tục phát hoạt ảnh.

00:06:37.000 --> 00:06:41.000
Nhưng tôi cũng cần một cách để kiểm soát khi hiệu ứng đang hoạt động.

00:06:41.000 --> 00:06:50.000
Tôi không muốn hình ảnh động này tiếp tục phát sau khi ứng dụng của tôi kết nối thành công với mạng.

00:06:50.000 --> 00:06:55.000
Điều này có thể được thực hiện bằng cách thêm tham số boolean isActive.

00:06:55.000 --> 00:07:00.000
Ở đây, tôi chỉ áp dụng hiệu ứng này khi kết nối với internet.

00:07:00.000 --> 00:07:07.000
Khi ứng dụng kết thúc kết nối, hoạt ảnh biểu tượng sẽ kết thúc liền mạch.

00:07:07.000 --> 00:07:14.000
Trong AppKit và UIKit, sử dụng phương thức removeSymbolEffect để kết thúc các hiệu ứng không xác định.

00:07:14.000 --> 00:07:19.000
Còn các hiệu ứng rời rạc, thực hiện hoạt ảnh một lần thì sao?

00:07:19.000 --> 00:07:23.000
Tôi đã đề cập đến Bounce như một ví dụ về điều này trước đó.

00:07:23.000 --> 00:07:29.000
Ứng dụng của bạn có thể kích hoạt hiệu ứng Bounce để phản hồi một số sự kiện nhất định.

00:07:29.000 --> 00:07:34.000
Trong SwiftUI, tôi có thể sử dụng cùng một công cụ sửa đổi symbolEffect để thêm các hiệu ứng rời rạc.

00:07:34.000 --> 00:07:39.000
Tuy nhiên, tôi cũng phải cung cấp cho SwiftUI một giá trị.

00:07:39.000 --> 00:07:46.000
Bất cứ khi nào giá trị thay đổi, SwiftUI sẽ kích hoạt hiệu ứng rời rạc.

00:07:46.000 --> 00:07:50.000
Hãy thêm một nút, khi được nhấn, sẽ bật biểu tượng.

00:07:50.000 --> 00:07:55.000
Trình xử lý của nút chỉ cần tăng bounceValue.

00:07:55.000 --> 00:08:00.000
SwiftUI sẽ thấy sự thay đổi trong bounceValue và kích hoạt bounce.

00:08:00.000 --> 00:08:06.000
Tôi có thể làm điều này trong AppKit và UIKit bằng cách thêm hiệu ứng Bounce vào chế độ xem hình ảnh.

00:08:06.000 --> 00:08:12.000
Bởi vì Bounce chỉ hỗ trợ hành vi rời rạc, sau đó thêm hiệu ứng thực hiện một lần nảy duy nhất.

00:08:12.000 --> 00:08:18.000
Không cần phải loại bỏ hiệu ứng sau đó.

00:08:18.000 --> 00:08:22.000
Bây giờ, giả sử tôi không muốn biểu tượng bị trả lại chỉ một lần.

00:08:22.000 --> 00:08:25.000
Làm thế nào về việc nảy hai lần?

00:08:25.000 --> 00:08:34.000
SwiftUI, AppKit và UIKit hỗ trợ tham số tùy chọn, nơi tôi có thể chỉ định số lần lặp lại ưa thích.

00:08:34.000 --> 00:08:39.000
Bây giờ, biểu tượng bật lên hai lần khi hiệu ứng được kích hoạt.

00:08:39.000 --> 00:08:44.000
Bounce không phải là hiệu ứng duy nhất có thể có hành vi rời rạc.

00:08:44.000 --> 00:08:54.000
Hai trong số các hiệu ứng mà tôi đã đề cập trước đó, Xung và Màu biến đổi, không chỉ hỗ trợ hành vi không xác định mà còn cả hành vi rời rạc.

00:08:54.000 --> 00:09:01.000
Nói cách khác, họ có thể chơi hoạt hình một lần, giống như Bounce.

00:09:01.000 --> 00:09:07.000
Điều đó có nghĩa là tôi có thể lấy ví dụ Bounce trước đó và thay đổi nó thành variableColor.

00:09:07.000 --> 00:09:15.000
Biến đổi màu chuyển sang sử dụng hành vi rời rạc của nó, vì nó được áp dụng theo cách không lặp lại.

00:09:15.000 --> 00:09:21.000
Bây giờ, nhấn nút thực hiện hai chu kỳ Màu Thay đổi.

00:09:21.000 --> 00:09:25.000
Tiếp theo, hãy nói về các hiệu ứng chuyển đổi nội dung.

00:09:25.000 --> 00:09:31.000
Hiệu ứng Thay thế, làm sinh động giữa hai hình ảnh biểu tượng khác nhau, là ví dụ chính về điều này.

00:09:31.000 --> 00:09:39.000
Ở đây, tôi có một hình ảnh chuyển đổi giữa biểu tượng tạm dừng và biểu tượng chơi.

00:09:39.000 --> 00:09:47.000
SwiftUI có một loại chuyển đổi nội dung mới được gọi là symbolEffect, có thể được sử dụng với Thay thế.

00:09:47.000 --> 00:09:56.000
Vì vậy, nếu tôi đặt Hình ảnh vào một Nút chuyển đổi biểu tượng nào được hiển thị, thay đổi hiện đang hoạt hình.

00:09:56.000 --> 00:10:07.000
Trong AppKit và UIKit, bạn có thể sử dụng phương thức setSymbolImage mới để thay đổi hình ảnh bằng cách sử dụng chuyển đổi nội dung biểu tượng.

00:10:07.000 --> 00:10:15.000
Cuối cùng, chúng ta có Xuất hiện và Biến mất, có thể hiển thị và ẩn các biểu tượng bằng các hình ảnh động độc đáo.

00:10:15.000 --> 00:10:20.000
Những hiệu ứng này được phân loại duy nhất là hiệu ứng chuyển tiếp.

00:10:20.000 --> 00:10:26.000
Nhưng trước khi chúng ta đi sâu vào điều đó, chúng ta cần nói về các vũ trụ song song.

00:10:26.000 --> 00:10:29.000
Tuy nhiên, đừng lo lắng. Nó không phức tạp như vẻ ngoài của nó.

00:10:29.000 --> 00:10:37.000
Trong một vũ trụ, hình ảnh biến mất, nhưng chế độ xem hình ảnh vẫn nằm trong hệ thống phân cấp.

00:10:37.000 --> 00:10:40.000
Nói cách khác, không có thay đổi nào đối với bố cục.

00:10:40.000 --> 00:10:45.000
Hình vuông và hình tròn vẫn giữ nguyên khoảng cách với nhau.

00:10:45.000 --> 00:10:52.000
Trong vũ trụ song song, chế độ xem hình ảnh thực sự được thêm vào và xóa khỏi hệ thống phân cấp.

00:10:52.000 --> 00:10:58.000
Kết quả là, bố cục của các chế độ xem xung quanh có thể thay đổi.

00:10:58.000 --> 00:11:05.000
Tin tuyệt vời là Xuất hiện và Biến mất hỗ trợ cả hai hành vi.

00:11:05.000 --> 00:11:12.000
Hành vi đầu tiên là có thể bởi vì Xuất hiện và Biến mất là những hiệu ứng vô thời hạn.

00:11:12.000 --> 00:11:16.000
Bạn đã biết cách sử dụng các hiệu ứng vô thời hạn rồi.

00:11:16.000 --> 00:11:22.000
Trong SwiftUI, sử dụng công cụ sửa đổi .symbolEffect và chuyển vào .disappear.

00:11:22.000 --> 00:11:30.000
Vì giá trị của các bản cập nhật isMoonHidden, hiệu ứng Disappear được áp dụng.

00:11:30.000 --> 00:11:38.000
Trong AppKit và UIKit, sử dụng addSymbolEffect và chuyển vào .disappear hoặc .appear.

00:11:38.000 --> 00:11:43.000
Điều rút ra ở đây là các hiệu ứng không xác định hoàn toàn không thay đổi bố cục.

00:11:43.000 --> 00:11:50.000
Họ chỉ thay đổi kết xuất của biểu tượng trong chế độ xem hình ảnh.

00:11:50.000 --> 00:11:53.000
Vì vậy, điều đó bao gồm hành vi đầu tiên.

00:11:53.000 --> 00:11:59.000
Làm cách nào để nhảy đến vũ trụ song song, nơi bố cục xung quanh thay đổi?

00:11:59.000 --> 00:12:02.000
Đây là nơi hành vi chuyển đổi xuất hiện.

00:12:02.000 --> 00:12:14.000
Các hiệu ứng chuyển tiếp có thể được sử dụng với công cụ sửa đổi chuyển tiếp tích hợp sẵn của SwiftUI, làm sinh động việc chèn hoặc xóa chế độ xem khỏi hệ thống phân cấp chế độ xem.

00:12:14.000 --> 00:12:19.000
Hãy chuyển đổi mã trước đó để sử dụng hành vi chuyển đổi.

00:12:19.000 --> 00:12:28.000
Thay vì áp dụng có điều kiện hiệu ứng Biến mất, thay vào đó tôi sẽ thêm biểu tượng có điều kiện vào hệ thống phân cấp chế độ xem.

00:12:28.000 --> 00:12:31.000
Sau đó, tôi sẽ thêm một công cụ sửa đổi chuyển tiếp.

00:12:31.000 --> 00:12:38.000
SwiftUI có một kiểu chuyển tiếp mới được gọi là - bạn đoán nó - hiệu ứng biểu tượng.

00:12:38.000 --> 00:12:46.000
Bằng cách chuyển vào .disappear, biểu tượng hiện được thêm vào và xóa bằng hình ảnh động.

00:12:46.000 --> 00:12:51.000
Bạn cũng có thể sử dụng một hiệu ứng chuyển tiếp độc đáo được gọi là Tự động.

00:12:51.000 --> 00:12:59.000
Hiệu ứng này sẽ tự động thực hiện hoạt ảnh chuyển tiếp thích hợp nhất cho biểu tượng này.

00:12:59.000 --> 00:13:06.000
Nếu bạn không sử dụng SwiftUI, thì bạn sẽ cần thêm và xóa chế độ xem hình ảnh khỏi hệ thống phân cấp theo cách thủ công.

00:13:06.000 --> 00:13:11.000
UIKit có tính năng xử lý hoàn thành cho các hiệu ứng có thể trợ giúp.

00:13:11.000 --> 00:13:18.000
Chỉ cần thêm hiệu ứng Biến mất và khi hiệu ứng kết thúc, hãy xóa chế độ xem hình ảnh khỏi hệ thống phân cấp.

00:13:18.000 --> 00:13:20.000
Vậy là bạn đã có nó.

00:13:20.000 --> 00:13:25.000
Đó là hiệu ứng biểu tượng trong SwiftUI, AppKit và UIKit.

00:13:25.000 --> 00:13:33.000
Bây giờ bạn đã biết những điều cơ bản, đây là một số mẹo để đưa hiệu ứng biểu tượng lên một tầm cao mới trong ứng dụng của bạn.

00:13:33.000 --> 00:13:41.000
Trước hết, các phương thức UIKit mới trên UIImageView cũng có sẵn trên UIBarButtonItem.

00:13:41.000 --> 00:13:47.000
Điều này giúp bạn dễ dàng đưa thanh công cụ của mình vào cuộc sống bằng cách sử dụng hoạt ảnh biểu tượng.

00:13:47.000 --> 00:13:54.000
Một số điều khiển UIKit cũng có hoạt ảnh biểu tượng tích hợp trên iOS 17.

00:13:54.000 --> 00:14:00.000
Ví dụ, UISlider bây giờ bật hình ảnh của nó khi ngón tay cái chạm đến cuối bản nhạc.

00:14:00.000 --> 00:14:10.000
Bạn có thể kiểm soát xem những hình ảnh động này có chơi với thuộc tính isSymbolAnimationEnabled mới trên UIControl và UIBarButtonItem hay không.

00:14:10.000 --> 00:14:17.000
Trong SwiftUI, cũng có một số cân nhắc đặc biệt để vô hiệu hóa các hiệu ứng biểu tượng.

00:14:17.000 --> 00:14:24.000
Giống như các công cụ sửa đổi khác trong SwiftUI, công cụ sửa đổi symbolEffect lan truyền thông qua hệ thống phân cấp chế độ xem.

00:14:24.000 --> 00:14:31.000
Điều này có nghĩa là các hiệu ứng có thể được áp dụng cho nhiều hình ảnh bằng cách thêm công cụ sửa đổi vào chế độ xem cha mẹ.

00:14:31.000 --> 00:14:37.000
Sử dụng công cụ sửa đổi symbolEffectsRemoved để ngăn chế độ xem kế thừa các hiệu ứng biểu tượng.

00:14:37.000 --> 00:14:46.000
Bây giờ, một số hiệu ứng biểu tượng, như Xuất hiện, Biến mất và Chia tỷ lệ, thay đổi giao diện của biểu tượng bằng hình ảnh động.

00:14:46.000 --> 00:14:54.000
Bạn có thể quan tâm đến việc một biểu tượng ban đầu được mở rộng, hoặc ban đầu biến mất, mà không có hình ảnh động.

00:14:54.000 --> 00:15:01.000
Trong SwiftUI, bạn có thể làm điều này bằng cách sử dụng giao dịch với hình ảnh động bị vô hiệu hóa.

00:15:01.000 --> 00:15:07.000
Ở đây, tôi sử dụng nó để áp dụng hiệu ứng scale.up mà không có hình ảnh động.

00:15:07.000 --> 00:15:16.000
Trong AppKit và UIKit, sử dụng tham số hoạt hình trên addSymbolEffect để áp dụng hiệu ứng mà không có hoạt ảnh.

00:15:16.000 --> 00:15:20.000
Cuối cùng, hãy nói về giá trị biến đổi.

00:15:20.000 --> 00:15:33.000
iOS 16 và macOS Ventura đã giới thiệu giá trị biến đổi như một chiều khác cho các biểu tượng, đại diện cho các khái niệm như mức âm lượng và cường độ tín hiệu.

00:15:33.000 --> 00:15:42.000
Trong iOS 17 và macOS Sonoma, chúng tôi đang làm cho việc làm mờ dần giữa các giá trị biến tùy ý trở nên cực kỳ dễ dàng.

00:15:42.000 --> 00:15:47.000
Trong SwiftUI, bạn không cần phải làm gì cả.

00:15:47.000 --> 00:15:57.000
Ở đây, tôi có một biểu tượng Wi-Fi có giá trị biến đổi dựa trên một số trạng thái - trong trường hợp này là cường độ tín hiệu hiện tại.

00:15:57.000 --> 00:16:06.000
Khi cường độ tín hiệu thay đổi, biểu tượng Wi-Fi sẽ tự động cập nhật, đồng thời tạo hiệu ứng động trên các giá trị biến đổi.

00:16:06.000 --> 00:16:12.000
Trong AppKit và UIKit, sử dụng chuyển đổi nội dung biểu tượng tự động.

00:16:12.000 --> 00:16:21.000
Nó phát hiện nếu hình ảnh biểu tượng mới chỉ có một giá trị biến khác, và, nếu vậy, sẽ chuyển sang giá trị mới.

00:16:21.000 --> 00:16:24.000
Cảm ơn rất nhiều vì đã tham gia cùng tôi hôm nay.

00:16:24.000 --> 00:16:31.000
Có rất nhiều cách để tạo hiệu ứng động cho các biểu tượng, vì vậy hãy sử dụng ứng dụng SF Symbols để khám phá những gì có thể.

00:16:31.000 --> 00:16:39.000
Khám phá khung Biểu tượng và thử các API hiệu ứng biểu tượng mới trong SwiftUI, AppKit và UIKit.

00:16:39.000 --> 00:16:47.000
Và cuối cùng, áp dụng các hình ảnh động để làm cho giao diện ứng dụng của bạn thú vị hơn bao giờ hết.

00:16:47.000 --> 00:16:57.000
Kiểm tra các phiên biểu tượng khác, để biết các hướng dẫn Giao diện Con người về hoạt hình biểu tượng, cũng như cập nhật các biểu tượng tùy chỉnh để hỗ trợ tất cả các hiệu ứng.

00:16:57.000 --> 23:59:59.000
Cảm ơn, và mã hóa vui vẻ.

