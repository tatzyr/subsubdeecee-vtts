WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
Allison: Xin chào mọi người.

00:00:11.000 --> 00:00:14.000
Tên tôi là Allison, và tôi là một kỹ sư tiếp cận.

00:00:14.000 --> 00:00:21.000
Hôm nay chúng ta sẽ nói về một số cách mới thú vị mà bạn có thể làm cho ứng dụng của mình dễ tiếp cận hơn.

00:00:21.000 --> 00:00:30.000
Tại Apple, khả năng tiếp cận là một phần thiết yếu của mọi thứ mà chúng tôi xây dựng bởi vì chúng tôi tin rằng mọi người đều xứng đáng được tiếp cận với công nghệ.

00:00:30.000 --> 00:00:36.000
Chúng tôi muốn bạn cực kỳ dễ dàng để làm cho các ứng dụng của mình có thể truy cập được.

00:00:36.000 --> 00:00:43.000
Trong năm qua, chúng tôi đã làm việc trên một số cải tiến để đảm bảo rằng mọi người đều có trải nghiệm tốt nhất có thể trong ứng dụng của bạn.

00:00:43.000 --> 00:00:50.000
Trong phiên này, chúng tôi sẽ khám phá API cho phép mọi người tương tác với ứng dụng của bạn theo những cách mới, thú vị.

00:00:50.000 --> 00:00:57.000
Tiếp theo, chúng ta sẽ thảo luận về cách cải thiện hình ảnh khả năng truy cập cho nội dung của bạn trong ứng dụng SwiftUI của bạn.

00:00:57.000 --> 00:01:03.000
Cuối cùng, chúng ta sẽ tìm hiểu một cách tốt hơn để cập nhật các thuộc tính khả năng truy cập của bạn trong UIKit.

00:01:03.000 --> 00:01:06.000
Hãy bắt đầu bằng cách nói về những cải tiến về khả năng tiếp cận.

00:01:06.000 --> 00:01:09.000
Tôi đang làm việc trên một ứng dụng chỉnh sửa ảnh.

00:01:09.000 --> 00:01:15.000
Ứng dụng của tôi cho phép tôi thêm các sửa đổi hình ảnh thú vị vào ảnh từ thư viện hoặc máy ảnh của mình.

00:01:15.000 --> 00:01:24.000
Tôi có thể áp dụng các bộ lọc khác nhau, thay đổi màu sắc màu ảnh hoặc tạo âm thanh tùy chỉnh để ghép nối với hình ảnh của mình bằng bàn phím piano trong ứng dụng của mình.

00:01:24.000 --> 00:01:29.000
Hãy thảo luận về một vài cải tiến khả năng tiếp cận mà chúng ta có thể tích hợp vào ứng dụng.

00:01:29.000 --> 00:01:36.000
Trong trang bộ lọc của ứng dụng ảnh của tôi, có một nút tùy chỉnh có trạng thái bật và tắt.

00:01:36.000 --> 00:01:41.000
Nút chuyển đổi "Bộ lọc" cho phép chúng tôi bật và tắt bộ lọc hình ảnh.

00:01:41.000 --> 00:01:54.000
Hệ thống không biết gợi ý và tiêu đề khả năng truy cập chính xác cho giao diện người dùng tùy chỉnh này và chúng tôi muốn đảm bảo rằng chúng tôi cung cấp trải nghiệm khả năng truy cập phù hợp với các nút chuyển đổi hệ thống khác.

00:01:54.000 --> 00:01:59.000
Đây là nơi mà đặc điểm khả năng tiếp cận mới, isToggle, giúp ích.

00:01:59.000 --> 00:02:02.000
Chúng tôi có một cấu trúc đại diện cho nút lọc.

00:02:02.000 --> 00:02:08.000
Trong phần thân của cấu trúc, chúng tôi tạo một nút chuyển đổi bộ lọc khi được nhấn.

00:02:08.000 --> 00:02:13.000
Màu sắc của nút cập nhật dựa trên biến trạng thái bộ lọc.

00:02:13.000 --> 00:02:19.000
Chúng tôi sẽ thêm đặc điểm isToggle vào nút bộ lọc trong công cụ sửa đổi accessibilityAddTraits.

00:02:19.000 --> 00:02:25.000
isToggle cung cấp gợi ý khả năng truy cập thích hợp và mô tả "nút chuyển đổi".

00:02:25.000 --> 00:02:27.000
VoiceOver: Bộ lọc, nút chuyển đổi.

00:02:27.000 --> 00:02:32.000
Nhấn đúp để chuyển đổi cài đặt.

00:02:32.000 --> 00:02:35.000
Allison: Đặc điểm chuyển đổi mới cũng có sẵn trong UIKit.

00:02:35.000 --> 00:02:40.000
Trong phương pháp viewDidLoad, chúng tôi thiết lập chế độ xem nút.

00:02:40.000 --> 00:02:48.000
Sau đó, chúng tôi đặt thuộc tính accessibilityTraits trên nút để chứa .toggleButton.

00:02:48.000 --> 00:02:57.000
Trong ứng dụng lọc ảnh, tôi muốn thêm một thông báo mới vào nút thanh điều hướng ảnh để cho mọi người biết chế độ xem ảnh đang tải.

00:02:57.000 --> 00:03:02.000
Thông báo về khả năng truy cập là một API mới có thể giúp chúng tôi thực hiện việc này.

00:03:02.000 --> 00:03:14.000
Thông báo trợ năng cung cấp một cách thống nhất, đa nền tảng để tạo thông báo truyền đạt thông tin cho ai đó bằng cách sử dụng công nghệ hỗ trợ trong ứng dụng của bạn.

00:03:14.000 --> 00:03:22.000
Thông báo trợ năng có thể được tạo cho các ứng dụng chạy SwiftUI, UIKit và AppKit.

00:03:22.000 --> 00:03:32.000
Với AccessibilityNotification, bạn có thể gửi thông báo, thay đổi bố cục, thay đổi màn hình và thông báo cuộn trang theo cách có nguồn gốc từ Swift.

00:03:32.000 --> 00:03:37.000
Khi nhấn nút thanh công cụ ảnh, tôi muốn đăng một thông báo.

00:03:37.000 --> 00:03:39.000
VoiceOver: Ảnh, nút.

00:03:39.000 --> 00:03:43.000
Những bức ảnh. Đang tải chế độ xem ảnh.

00:03:43.000 --> 00:03:47.000
Allison: Chúng ta có thể đăng thông báo trong hành động cho nút thanh công cụ.

00:03:47.000 --> 00:03:57.000
Để tạo thông báo, chúng ta có thể sử dụng AccessibilityNotification.Announcement với "Đang tải chế độ xem ảnh" làm tham số chuỗi.

00:03:57.000 --> 00:04:04.000
Trong ứng dụng, tôi cũng muốn tạo ba thông báo khi nhấn nút thanh điều hướng máy ảnh.

00:04:04.000 --> 00:04:11.000
Thông báo đầu tiên, "Mở máy ảnh" và thông báo thứ ba, "Máy ảnh đang hoạt động", là quan trọng nhất.

00:04:11.000 --> 00:04:15.000
Hãy xem xét mẫu bài phát biểu hiện tại của VoiceOver cho các thông báo.

00:04:15.000 --> 00:04:20.000
Chú ý cách thông báo thứ hai, "Đang tải máy ảnh", làm gián đoạn "Mở máy ảnh".

00:04:20.000 --> 00:04:24.000
VoiceOver: Máy ảnh, nút bấm.

00:04:24.000 --> 00:04:26.000
Xong rồi. Mở--máy ảnh--máy ảnh đang hoạt động.

00:04:26.000 --> 00:04:37.000
Allison: Bây giờ, trong SwiftUI và UIKit, bạn cũng có thể đặt mức độ ưu tiên của thông báo, cho phép bạn đặt tầm quan trọng của một thông báo được xếp hàng đợi để được nói bởi các công nghệ hỗ trợ.

00:04:37.000 --> 00:04:44.000
Điều này cho phép bạn kiểm soát nhiều hơn những thông báo mà mọi người cần nghe, so với những thông báo có thể bỏ qua nếu không được nói kịp thời.

00:04:44.000 --> 00:04:53.000
Bạn có thể chỉ định tầm quan trọng của thông tin này bằng cách sử dụng một trong ba ưu tiên thông báo: cao, mặc định và thấp.

00:04:53.000 --> 00:05:00.000
Các thông báo ưu tiên cao có thể làm gián đoạn bài phát biểu khác và không thể bị gián đoạn một khi bắt đầu.

00:05:00.000 --> 00:05:07.000
Các thông báo ưu tiên mặc định có thể làm gián đoạn bài phát biểu hiện có nhưng có thể bị gián đoạn nếu một bài phát biểu mới được bắt đầu.

00:05:07.000 --> 00:05:14.000
Các thông báo ưu tiên thấp được xếp hàng và nói khi các bài phát biểu khác đã hoàn thành, nếu không có thông báo mới nào bắt đầu.

00:05:14.000 --> 00:05:20.000
Trong ứng dụng ảnh, chúng ta có thể sử dụng ưu tiên thông báo để sửa các chuỗi ngắt.

00:05:20.000 --> 00:05:24.000
Chúng tôi có ba thông báo được thực hiện từ các chuỗi được quy kết.

00:05:24.000 --> 00:05:31.000
Trong SwiftUI, chúng tôi sẽ đặt mức độ ưu tiên cho thuộc tính chuỗi accessibilitySpeechAnnouncementPriority.

00:05:31.000 --> 00:05:38.000
Thông báo thứ hai của chúng tôi, "Đang tải máy ảnh", ít quan trọng nhất, vì vậy chúng tôi dành cho nó một mức độ ưu tiên thấp.

00:05:38.000 --> 00:05:45.000
Thông báo cuối cùng, "Camera Active", là quan trọng nhất, vì vậy chúng tôi muốn nó được ưu tiên cao.

00:05:45.000 --> 00:05:50.000
Tiếp theo, chúng tôi sẽ chuyển các chuỗi được gán cho AccessibilityNotification.

00:05:50.000 --> 00:05:57.000
Đầu tiên, chúng tôi sẽ gửi thông báo ưu tiên mặc định, sau đó là ưu tiên thấp, sau đó là ưu tiên cao.

00:05:57.000 --> 00:06:07.000
Bây giờ lưu ý cách thông báo ưu tiên thấp không làm gián đoạn thông báo ưu tiên mặc định, trong khi thông báo ưu tiên cao làm gián đoạn thông báo mặc định và thông báo thấp.

00:06:07.000 --> 00:06:10.000
VoiceOver: Máy ảnh, nút bấm.

00:06:10.000 --> 00:06:13.000
Xong rồi. Mở camera - camera đang hoạt động.

00:06:13.000 --> 00:06:16.000
Allison: Chúng ta có thể đạt được thứ tự thông báo tương tự trong UIKit.

00:06:16.000 --> 00:06:21.000
Chúng tôi đặt các ưu tiên thông báo là các cặp giá trị khóa NSAttributedString.

00:06:21.000 --> 00:06:31.000
Chúng tôi sử dụng khóa UIAccessibilitySpeechAttribute AnnouncementPriority và đặt giá trị thành UIAccessibilityPriority thích hợp.

00:06:31.000 --> 00:06:35.000
Sau đó, chúng tôi chuyển các thuộc tính cho trình khởi tạo chuỗi được quy kết.

00:06:35.000 --> 00:06:41.000
Quay lại ứng dụng, có một chế độ xem hình ảnh mà mọi người có thể chạm hoặc chụm để phóng to và thu nhỏ.

00:06:41.000 --> 00:06:48.000
Với công nghệ hỗ trợ được bật, cử chỉ chạm hoặc chụm vật lý này có thể khó thực hiện.

00:06:48.000 --> 00:06:55.000
Giờ đây, với hành động thu phóng khả năng truy cập, mọi người có thể phóng to và thu nhỏ các yếu tố giao diện người dùng khi các công nghệ hỗ trợ được bật.

00:06:55.000 --> 00:06:58.000
Chúng tôi sẽ thêm hành động thu phóng trên hình ảnh.

00:06:58.000 --> 00:07:03.000
Hình ảnh nằm trong phần thân của cấu trúc ZoomingImageView.

00:07:03.000 --> 00:07:07.000
Đầu tiên chúng tôi thêm công cụ sửa đổi accessibilityZoomAction.

00:07:07.000 --> 00:07:16.000
Sau đó, dựa trên hướng của hành động thu phóng, chúng tôi sẽ phóng to nội dung vào hoặc ra và đăng thông báo về khả năng truy cập.

00:07:16.000 --> 00:07:20.000
Bây giờ hãy khám phá khả năng thu phóng của VoiceOver với những thay đổi này.

00:07:20.000 --> 00:07:22.000
VoiceOver: Phóng to chế độ xem hình ảnh, hình ảnh.

00:07:22.000 --> 00:07:24.000
Phóng to.

00:07:24.000 --> 00:07:27.000
Phóng to 2x. Phóng to 3x.

00:07:27.000 --> 00:07:30.000
Phóng to 4x. Phóng to 3x.

00:07:30.000 --> 00:07:33.000
Allison: Chúng ta cũng có thể thêm đặc điểm thu phóng và hành động trong UIKit.

00:07:33.000 --> 00:07:37.000
Đầu tiên chúng ta sẽ tạo một chế độ xem thu phóng có chứa chế độ xem hình ảnh.

00:07:37.000 --> 00:07:43.000
Tiếp theo, chúng tôi sẽ thêm đặc điểm hỗ trợ Phóng to vào chế độ xem thu phóng cùng với đặc điểm hình ảnh.

00:07:43.000 --> 00:07:54.000
Sau đó, chúng tôi triển khai accessibilityZoomInAtPoint và accessibilityZoomOutAtPoint, mỗi cái trả về một boolean để chỉ ra sự thành công hay thất bại của việc phóng to.

00:07:54.000 --> 00:08:01.000
Trong mỗi phương pháp này, chúng tôi cập nhật tỷ lệ thu phóng và đăng thông báo để chỉ ra sự thay đổi thu phóng.

00:08:01.000 --> 00:08:09.000
Trong ứng dụng lọc hình ảnh của chúng tôi, chúng tôi cũng có thể tạo ra một âm thanh ngắn để thêm vào hình ảnh bằng cách chơi các phím đàn piano nhỏ.

00:08:09.000 --> 00:08:13.000
Mọi người có thể tạo tông màu tùy chỉnh cho hình ảnh bằng cách sử dụng các phím.

00:08:13.000 --> 00:08:23.000
Hãy xem xét trải nghiệm VoiceOver hiện tại với những âm thanh này khi tôi cố gắng tạo ra một giai điệu.

00:08:23.000 --> 00:08:48.000
VoiceOver nói nhãn phím và phát âm thanh kích hoạt VoiceOver mỗi khi chạm vào phần tử, điều này gây khó khăn cho việc nhấn nhanh các phím liên tiếp.

00:08:48.000 --> 00:08:58.000
Thông thường, VoiceOver cung cấp trải nghiệm khám phá an toàn, nhưng đôi khi, mọi người cần tương tác trực tiếp với ứng dụng của bạn để sử dụng nó đúng cách.

00:08:58.000 --> 00:09:05.000
Đối với ứng dụng của chúng tôi, sẽ tốt hơn nhiều nếu mọi người có thể chạm trực tiếp vào các phím đàn piano mà không cần thêm lời nói và âm thanh.

00:09:05.000 --> 00:09:13.000
Đây là thời điểm tuyệt vời để áp dụng đặc điểm cảm ứng trực tiếp, được đặt tên là allowsDirectInteraction, theo quan điểm của chúng tôi.

00:09:13.000 --> 00:09:23.000
Các khu vực cảm ứng trực tiếp có khả năng truy cập sẽ cho phép bạn chỉ định một vùng trên màn hình nơi các cử chỉ VoiceOver truyền trực tiếp đến ứng dụng.

00:09:23.000 --> 00:09:30.000
Ở trạng thái mặc định, VoiceOver vừa nói vừa kích hoạt nội dung của yếu tố cảm ứng trực tiếp.

00:09:30.000 --> 00:09:42.000
Tuy nhiên, đối với ứng dụng của chúng tôi, sẽ thật tuyệt nếu VoiceOver im lặng khi ai đó chạm vào phím đàn piano để họ có thể nghe thấy âm thanh ngay lập tức mà không cần phải kích hoạt phần tử phím đàn piano trước.

00:09:42.000 --> 00:09:50.000
Ngoài đặc điểm allowsDirectInteraction, hiện có hai tùy chọn cảm ứng trực tiếp mới sẽ được hỗ trợ.

00:09:50.000 --> 00:10:00.000
Đầu tiên, bạn có thể chỉ định silentOnTouch để đảm bảo VoiceOver im lặng khi chạm vào vùng cảm ứng trực tiếp, để ứng dụng của bạn có thể tạo phản hồi âm thanh của riêng mình.

00:10:00.000 --> 00:10:11.000
Thứ hai, bạn có thể chỉ định requireActivation để làm cho khu vực cảm ứng trực tiếp yêu cầu VoiceOver kích hoạt phần tử trước khi chuyển qua cảm ứng xảy ra.

00:10:11.000 --> 00:10:15.000
Đây là đoạn mã cho KeyboardKeyView.

00:10:15.000 --> 00:10:19.000
Mỗi phím là một hình chữ nhật phát một âm thanh được chỉ định.

00:10:19.000 --> 00:10:29.000
Để khắc phục sự cố với VoiceOver nói qua âm thanh mọi lúc, chúng tôi đã đặt tùy chọn cảm ứng trực tiếp để nút im lặng khi chạm vào.

00:10:29.000 --> 00:10:37.000
Bây giờ, giai điệu chính xác sẽ phát khi VoiceOver đạt đến nút phím mà không bị can thiệp từ lời nói của VoiceOver.

00:10:37.000 --> 00:10:47.000
Chúng tôi cũng có thể thêm các tùy chọn cảm ứng trực tiếp mới trong UIKit.

00:10:47.000 --> 00:10:51.000
Chúng ta có thể tạo nút phím dưới dạng UIButton.

00:10:51.000 --> 00:10:56.000
Tiếp theo, chúng tôi sẽ thêm đặc điểm khả năng tiếp cận allowsDirectInteraction.

00:10:56.000 --> 00:11:02.000
Đặc điểm này là bắt buộc khi thiết lập các tùy chọn cảm ứng trực tiếp khả năng truy cập trong UIKit.

00:11:02.000 --> 00:11:08.000
Cuối cùng, chúng tôi sẽ thêm tùy chọn silentOnTouch cho accessibilityDirectTouchOptions.

00:11:08.000 --> 00:11:20.000
Với đặc điểm chuyển đổi khả năng truy cập, ưu tiên thông báo, đặc điểm thu phóng và các tùy chọn cảm ứng trực tiếp, bạn có nhiều quyền kiểm soát hơn đối với cách các công nghệ hỗ trợ tương tác với các ứng dụng SwiftUI và UIKit của mình.

00:11:20.000 --> 00:11:26.000
Tiếp theo, hãy nói về nội dung khả năng truy cập loại Shape trong SwiftUI.

00:11:26.000 --> 00:11:34.000
Loại này đặt đường dẫn của phần tử khả năng truy cập và kiểm soát sự xuất hiện của các yếu tố khả năng truy cập trên màn hình.

00:11:34.000 --> 00:11:40.000
Trước đây, loại hình dạng nội dung tương tác đã thay đổi hình dạng khả năng tiếp cận và nhấn hình dạng thử nghiệm.

00:11:40.000 --> 00:11:49.000
Bây giờ có một loại hình dạng nội dung khả năng truy cập sẽ không ảnh hưởng đến hình dạng thử nghiệm thành công và chỉ ảnh hưởng đến hình dạng của nội dung khả năng truy cập.

00:11:49.000 --> 00:11:58.000
Khi một phần tử cần một hình dạng tùy chỉnh, chẳng hạn như một vòng tròn, hình ảnh con trỏ khả năng truy cập được tính toán có thể cản trở các mục khác trên màn hình.

00:11:58.000 --> 00:12:05.000
Trong ví dụ này, đường dẫn khả năng truy cập là một hình vuông, không khớp với nội dung hình tròn màu đỏ.

00:12:05.000 --> 00:12:16.000
Khi loại Hình dạng Nội dung Khả năng tiếp cận được áp dụng cho chế độ xem, nó sẽ cập nhật hình học khả năng tiếp cận cơ bản cho phần tử với hình dạng do công cụ sửa đổi cung cấp.

00:12:16.000 --> 00:12:22.000
Điều này cho phép bạn nhanh chóng cập nhật đường dẫn của một phần tử với Hình dạng SwiftUI hiện có.

00:12:22.000 --> 00:12:26.000
Tôi đã tạo nút vòng tròn bằng cách sử dụng hình ảnh vòng tròn.

00:12:26.000 --> 00:12:32.000
Chúng ta có thể đặt khung và nhãn khả năng tiếp cận để phù hợp với màu sắc, màu đỏ.

00:12:32.000 --> 00:12:41.000
Cuối cùng, chúng ta có thể thêm công cụ sửa đổi hình dạng nội dung vào chế độ xem của tôi với loại khả năng truy cập và Vòng tròn làm hình dạng.

00:12:41.000 --> 00:12:47.000
Bây giờ đường dẫn tiếp cận khớp chính xác với hình tròn của nút màu đỏ.

00:12:47.000 --> 00:12:55.000
Cuối cùng, hãy thảo luận về một bổ sung sắp tới cho khả năng truy cập UIKit, bộ thiết lập thuộc tính dựa trên khối.

00:12:55.000 --> 00:13:03.000
Trong ứng dụng chỉnh sửa ảnh, tôi muốn giá trị khả năng truy cập cho chế độ xem hình ảnh thể hiện xem ảnh có được lọc hay không.

00:13:03.000 --> 00:13:13.000
Bây giờ có một cách dễ dàng để giữ các thuộc tính khả năng truy cập cơ bản cho các quan điểm của tôi luôn phù hợp với giao diện người dùng được trình bày.

00:13:13.000 --> 00:13:17.000
Tôi có thể làm điều này với các bộ định vị dựa trên khối khả năng truy cập.

00:13:17.000 --> 00:13:28.000
API khối khả năng truy cập mới cho phép bạn cung cấp một đóng cửa được đánh giá bất cứ khi nào cần thuộc tính thay vì lưu trữ giá trị trực tiếp.

00:13:28.000 --> 00:13:36.000
Việc đóng cửa được đánh giá lại mỗi khi một chế độ xem được tham chiếu hoặc truy cập bởi một công nghệ hỗ trợ.

00:13:36.000 --> 00:13:41.000
Chúng ta có thể đơn giản hóa mọi thứ bằng cách đóng, được tạo trong phương thức viewDidLoad cho bộ điều khiển chế độ xem của tôi.

00:13:41.000 --> 00:13:51.000
Chúng tôi đặt thuộc tính accessibilityValueBlock trên zoomView để cập nhật giá trị dựa trên việc hình ảnh có được lọc hay không.

00:13:51.000 --> 00:13:56.000
Việc đóng phải trả về loại chính xác cho thuộc tính này, đây là một Chuỗi tùy chọn.

00:13:56.000 --> 00:14:00.000
Lưu ý rằng chúng tôi đang sử dụng một tham chiếu yếu đến bản thân để tránh chu kỳ lưu giữ.

00:14:00.000 --> 00:14:09.000
Các khối rất tuyệt để thêm vào đầu vòng đời lớp, để bắt đầu một lớp với thông tin thuộc tính khả năng tiếp cận thích hợp.

00:14:09.000 --> 00:14:13.000
Bây giờ các thuộc tính khả năng tiếp cận dễ bảo trì hơn nhiều.

00:14:13.000 --> 00:14:23.000
Mỗi khi ai đó di chuyển con trỏ VoiceOver đến một phần tử mới, VoiceOver trước tiên sẽ tìm kiếm các thuộc tính được đặt với một đóng và đánh giá lại việc đóng cửa.

00:14:23.000 --> 00:14:47.000
Khi bạn đang xây dựng giao diện người dùng tùy chỉnh, hãy cân nhắc tích hợp các đặc điểm khả năng truy cập như chuyển đổi và các tính năng như tương tác cảm ứng trực tiếp để tăng khả năng sử dụng cho mọi người.

00:14:47.000 --> 00:14:52.000
Thứ hai, hãy nghĩ về quan điểm của bạn với các hình dạng tùy chỉnh trong SwiftUI.

00:14:52.000 --> 00:14:59.000
Nếu các hình dạng khả năng truy cập không khớp với giao diện người dùng, hãy cân nhắc giới thiệu hình dạng khả năng truy cập tùy chỉnh.

00:14:59.000 --> 00:15:08.000
Và cuối cùng, tôi khuyến khích bạn đánh giá cách bạn thiết lập các thuộc tính khả năng truy cập của mình và xác định xem các trình thiết lập dựa trên khối có ý nghĩa hơn trong ứng dụng của bạn hay không.

00:15:08.000 --> 00:15:12.000
Tại Apple, chúng tôi tin rằng khả năng tiếp cận là quyền của con người.

00:15:12.000 --> 00:15:18.000
Với sự giúp đỡ của bạn, chúng tôi có thể tạo ra công nghệ nâng cao và trao quyền cho cuộc sống của mọi người.

00:15:18.000 --> 00:15:30.000
Những bổ sung API mới này là một cách tuyệt vời để tăng khả năng sử dụng ứng dụng của bạn cho những người dựa vào các công nghệ hỗ trợ và tôi khuyến khích bạn sử dụng tất cả chúng để xây dựng các ứng dụng tuyệt vời, dễ tiếp cận.

00:15:30.000 --> 23:59:59.000
Cảm ơn vì đã xem.

