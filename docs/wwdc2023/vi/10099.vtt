WEBVTT

00:00:00.000 --> 00:00:03.000
♪ Hip-hop nhạc cụ êm dịu ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
Sarina Wu: Xin chào! Tên tôi là Sarina, và tôi là một Kỹ sư Phần mềm trong nhóm Công cụ RealityKit.

00:00:14.000 --> 00:00:17.000
Harjas Monga: Và tôi là Harjas, một Kỹ sư Công cụ Hồ sơ.

00:00:17.000 --> 00:00:22.000
Sarina: Hôm nay, Harjas và tôi sẽ giới thiệu mẫu RealityKit Trace trong Instruments.

00:00:22.000 --> 00:00:26.000
Chúng tôi sẽ chỉ cho bạn cách mẫu này có thể giúp bạn tối ưu hóa hiệu suất trải nghiệm không gian của mình.

00:00:26.000 --> 00:00:30.000
Hiệu suất là điều cần thiết cho trải nghiệm người dùng trong điện toán không gian.

00:00:30.000 --> 00:00:43.000
Để tìm hiểu cách tối ưu hóa trải nghiệm không gian, chúng tôi sẽ đề cập ngắn gọn cách kết xuất hoạt động trên nền tảng này, chỉ cho bạn cách lập hồ sơ bằng cách sử dụng mẫu RealityKit Trace trong Công cụ và đề cập ngắn gọn các công cụ tuyệt vời khác có sẵn để tối ưu hóa nội dung của bạn.

00:00:43.000 --> 00:00:46.000
Nền tảng này có những hạn chế về hiệu suất độc đáo.

00:00:46.000 --> 00:00:49.000
Để hiểu chúng, trước tiên bạn cần hiểu cách kết xuất hoạt động.

00:00:49.000 --> 00:00:56.000
Kết xuất bao gồm quy trình ứng dụng của bạn, máy chủ kết xuất và bộ tổng hợp.

00:00:56.000 --> 00:01:01.000
Cách ứng dụng của bạn tương tác với các thành phần này sẽ phụ thuộc vào loại trải nghiệm bạn tạo ra.

00:01:01.000 --> 00:01:07.000
Hãy cùng xem xét các loại trải nghiệm bạn có thể tạo cho các ứng dụng không gian của mình và cách chúng được hiển thị.

00:01:07.000 --> 00:01:11.000
Các ứng dụng trên nền tảng có thể vào Không gian chia sẻ hoặc Không gian đầy đủ.

00:01:11.000 --> 00:01:16.000
Những thứ này có ý nghĩa hiệu suất khác nhau để xem xét dựa trên cách chúng hiển thị.

00:01:16.000 --> 00:01:23.000
Khi nhiều ứng dụng chạy cạnh nhau, tất cả chúng đều được hiển thị trong cùng một không gian, đó là một trong những lý do chúng tôi gọi nó là Không gian chia sẻ.

00:01:23.000 --> 00:01:30.000
Điều này có nghĩa là hiệu suất của ứng dụng của bạn có thể bị ảnh hưởng bởi công việc mà máy chủ kết xuất đang làm để kết xuất các ứng dụng khác.

00:01:30.000 --> 00:01:36.000
Sau đó, máy chủ kết xuất hoạt động với bộ tổng hợp để tạo ra các khung hình cuối cùng.

00:01:36.000 --> 00:01:40.000
Khi ứng dụng của bạn vào Full Space, tất cả các ứng dụng hiển thị khác sẽ bị ẩn.

00:01:40.000 --> 00:01:46.000
Điều này có nghĩa là hiệu suất của ứng dụng của bạn không còn bị ảnh hưởng bởi công việc kết xuất cho các ứng dụng hiện đang bị ẩn.

00:01:46.000 --> 00:01:52.000
Để tìm hiểu thêm về cách vào Full Space, hãy xem phiên "Go beyond the window with SwiftUI."

00:01:52.000 --> 00:01:57.000
Dựa trên những gì vừa được đề cập, chúng tôi có hai cách được đề xuất để lập hồ sơ ứng dụng của bạn.

00:01:57.000 --> 00:02:06.000
Bất cứ khi nào bạn đang điều tra các vấn đề về hiệu suất hoặc phân tích tác động của hệ thống, bạn nên lập hồ sơ ứng dụng của mình một cách riêng biệt để hiểu tác động của ứng dụng đối với hiệu suất hệ thống.

00:02:06.000 --> 00:02:12.000
Khi bạn mong đợi ứng dụng của mình hoạt động cùng với các ứng dụng khác, bạn nên lập hồ sơ ứng dụng của mình với các ứng dụng khác đó.

00:02:12.000 --> 00:02:16.000
Điều này rất quan trọng để hiểu cách người dùng sẽ trải nghiệm ứng dụng của bạn.

00:02:16.000 --> 00:02:23.000
Hãy lập hồ sơ một ứng dụng không gian để chỉ cho bạn cách bạn có thể tối ưu hóa hiệu suất ứng dụng của mình một cách riêng biệt bằng cách sử dụng mẫu RealityKit Trace.

00:02:23.000 --> 00:02:28.000
Chúng tôi đang làm việc trên Hello World và chúng tôi muốn đảm bảo rằng không có vấn đề gì về hiệu suất.

00:02:28.000 --> 00:02:32.000
Sarina: Đây là màn hình Bắt đầu của ứng dụng, đó là Chế độ xem SwiftUI.

00:02:32.000 --> 00:02:34.000
Chế độ xem này có nút Đối tượng trong Quỹ đạo.

00:02:34.000 --> 00:02:38.000
Chúng ta có thể nhấn vào nút đó để tìm hiểu thêm về các vật thể quay quanh Trái đất.

00:02:38.000 --> 00:02:43.000
Nút này mở ra một chế độ xem mới liệt kê các ví dụ về các vật thể khác nhau đang quay quanh Trái đất.

00:02:43.000 --> 00:02:54.000
Chế độ xem này có các mô hình 3D của các vật thể này, bao gồm vệ tinh, Mặt trăng và kính viễn vọng.

00:02:54.000 --> 00:02:57.000
Trong chế độ xem này, cũng có một nút Xem Quỹ đạo.

00:02:57.000 --> 00:03:05.000
Chúng ta có thể khám phá điều này bằng cách nhấn vào nút, nút này sẽ mở ra trải nghiệm nhập vai cho thấy Trái đất và một vệ tinh quay quanh nó.

00:03:05.000 --> 00:03:11.000
Chúng tôi đã sử dụng các nội dung chi tiết cho các mô hình này và tôi nghi ngờ rằng chúng đang ảnh hưởng đến hiệu suất của ứng dụng này.

00:03:11.000 --> 00:03:17.000
Trong trải nghiệm nhập vai, chúng ta có thể thấy đường đi của vệ tinh hoạt hình khi nó quay quanh Trái đất.

00:03:17.000 --> 00:03:20.000
Chúng ta thậm chí có thể mở rộng quy mô Trái đất để xem nó chi tiết hơn.

00:03:20.000 --> 00:03:25.000
Sự tương tác này cực kỳ lộn xộn, vì vậy tôi nghĩ có một vấn đề về hiệu suất ở đây.

00:03:25.000 --> 00:03:29.000
Harjas và tôi đã mô tả trải nghiệm đó bằng cách sử dụng mẫu RealityKit Trace.

00:03:29.000 --> 00:03:30.000
Harjas, bạn có thể hướng dẫn chúng tôi vượt qua nó không?

00:03:30.000 --> 00:03:35.000
Harjas: Tất nhiên, hãy xem qua tất cả các tính năng có sẵn trong RealityKit Trace.

00:03:35.000 --> 00:03:40.000
RealityKit Trace có sẵn dưới dạng mẫu mới trong Instruments 15.

00:03:40.000 --> 00:03:44.000
Nó có thể được sử dụng để lập hồ sơ cả thiết bị thật và thiết bị giả lập.

00:03:44.000 --> 00:03:49.000
Để có được thông tin chính xác và có thể hành động nhất, bạn nên lập hồ sơ một thiết bị thực.

00:03:49.000 --> 00:03:58.000
Khi lập hồ sơ chống lại trình giả lập, không phải tất cả thông tin thời gian sẽ chính xác vì sự khác biệt về phần cứng và phần mềm giữa máy Mac và trên thiết bị của bạn.

00:03:58.000 --> 00:04:04.000
Nhưng bạn vẫn có thể sử dụng nó để lặp lại nhanh chóng và cải thiện một số thống kê không dựa trên thời gian.

00:04:04.000 --> 00:04:08.000
Mẫu RealityKit Trace chứa một số nhạc cụ.

00:04:08.000 --> 00:04:13.000
Nhạc cụ đầu tiên bạn sẽ muốn xem là nhạc cụ RealityKit Frames.

00:04:13.000 --> 00:04:18.000
Thiết bị này theo dõi từng khung hình được kết xuất bởi thiết bị.

00:04:18.000 --> 00:04:23.000
Bạn có thể phóng to các khung hình này để kiểm tra xem mỗi khung hình mất bao lâu để hiển thị.

00:04:23.000 --> 00:04:27.000
Với điều này, bạn có thể kiểm tra xem mỗi giai đoạn của khung mất bao lâu để hiển thị.

00:04:27.000 --> 00:04:33.000
Điều này cung cấp cho bạn một ý tưởng cấp cao về phần nào của đường ống kết xuất có thể gây ra các vấn đề về hiệu suất.

00:04:33.000 --> 00:04:40.000
Để đạt được trải nghiệm người dùng mượt mà, ứng dụng của bạn sẽ có thể đạt được 90 khung hình mỗi giây.

00:04:40.000 --> 00:04:43.000
Tuy nhiên, hệ điều hành có thể không phải lúc nào cũng nhắm mục tiêu 90 khung hình / giây.

00:04:43.000 --> 00:04:49.000
Nó sẽ hiển thị ở tốc độ khung hình phù hợp nhất với nội dung đang được hiển thị và môi trường mà thiết bị đang ở.

00:04:49.000 --> 00:04:59.000
Bởi vì tốc độ khung hình có thể thay đổi, mỗi khung hình đều có thời hạn hoàn thành kết xuất để thiết bị có thể đạt bất kỳ tốc độ khung hình mục tiêu hiện tại là gì.

00:04:59.000 --> 00:05:12.000
Các khung được phân thành ba nhóm: các khung hoàn thành tốt trong thời hạn của chúng, các khung hầu như không hoàn thành trong thời hạn của chúng và các khung vượt quá thời hạn của chúng và dẫn đến giảm khung.

00:05:12.000 --> 00:05:17.000
Các phân loại này lần lượt được mã hóa màu xanh lá cây, cam và đỏ.

00:05:17.000 --> 00:05:23.000
Các khung hình đang chạy quá thời hạn sẽ tác động tiêu cực đến trải nghiệm người dùng.

00:05:23.000 --> 00:05:30.000
Nếu bạn thu nhỏ và kiểm tra các khung hình từ mức cao, mã màu cho phép bạn nhanh chóng tìm thấy các phần có vấn đề của dấu vết.

00:05:30.000 --> 00:05:37.000
Vì vậy, bạn có thể thu hẹp bất kỳ cuộc điều tra hiệu suất nào đến các khu vực có nhiều khung hình giảm nhất.

00:05:37.000 --> 00:05:49.000
Ngoài các khung riêng lẻ, thiết bị cũng trực quan hóa lượng thời gian trung bình mà hệ thống dành cho CPU hoặc GPU hoạt động để hiển thị từng khung hình.

00:05:49.000 --> 00:05:53.000
Công cụ tiếp theo bạn sẽ muốn kiểm tra là công cụ RealityKit Metrics.

00:05:53.000 --> 00:05:57.000
Ở cấp độ cao nhất, nhạc cụ rút ra tất cả các nút thắt cổ chai mà nó đã phát hiện.

00:05:57.000 --> 00:06:03.000
Những tắc nghẽn này được tạo ra bằng cách xem xét thông tin thời gian toàn diện từ toàn bộ đường ống kết xuất.

00:06:03.000 --> 00:06:10.000
Ưu tiên các nút thắt cổ chai xảy ra trong cùng thời gian mà các khung vượt quá thời hạn của chúng.

00:06:10.000 --> 00:06:18.000
Trong chế độ xem chi tiết bên dưới, bạn sẽ thấy rằng các nút thắt cổ chai RealityKit này được tóm tắt theo mức độ nghiêm trọng và loại.

00:06:18.000 --> 00:06:26.000
Bạn có thể tìm hiểu thêm để xem chính xác loại nút cổ chai nào mà nhạc cụ tìm thấy và nó ảnh hưởng đến hiệu suất tổng thể của bạn như thế nào.

00:06:26.000 --> 00:06:36.000
Trong chế độ xem chi tiết mở rộng, công cụ cung cấp các khuyến nghị về cách chẩn đoán thêm các nút thắt cổ chai này và những bước bạn có thể thực hiện để giảm thiểu chúng.

00:06:36.000 --> 00:06:44.000
Bằng cách mở rộng lộ trình RealityKit Metrics, bạn sẽ được trình bày với một số loại số liệu từ các thành phần khác nhau của đường ống kết xuất.

00:06:44.000 --> 00:06:49.000
Những thống kê này có thể giúp bạn hiểu toàn bộ sự phức tạp của cảnh mà ứng dụng của bạn đang trình bày.

00:06:49.000 --> 00:06:57.000
Một số chỉ số chính sẽ có các ngưỡng liên quan để giúp thông báo cho bạn về những kỳ vọng hợp lý đối với những chỉ số đó.

00:06:57.000 --> 00:07:05.000
Sử dụng các số liệu để giúp hướng dẫn bạn hơn nữa trong việc chẩn đoán nút cổ chai hoặc lý do tại sao khung không đạt đến thời hạn.

00:07:05.000 --> 00:07:12.000
RealityKit Metrics sẽ hình dung lượng thời gian đang được dành trong mỗi khung để chạy các hệ thống RealityKit của ứng dụng.

00:07:12.000 --> 00:07:18.000
Điều này bao gồm tất cả các hệ thống tích hợp sẵn và tất cả các hệ thống tùy chỉnh mà ứng dụng của bạn có thể triển khai.

00:07:18.000 --> 00:07:26.000
Thông tin này được kết hợp tốt nhất với Time Profiler để bạn có thể tối ưu hóa mã hệ thống RealityKit của mình.

00:07:26.000 --> 00:07:38.000
Cuối cùng, hãy xem lại làn đường Tác động Năng lượng Hệ thống được hiển thị trong RealityKit Metrics để hiểu phong bì năng lượng mà ứng dụng của bạn cần hoạt động để cung cấp trải nghiệm người dùng tuyệt vời và nhất quán.

00:07:38.000 --> 00:07:43.000
Bây giờ chúng ta hãy xem xét một số dấu vết mà chúng ta đã lấy khi chúng ta đang bước qua trải nghiệm thế giới.

00:07:43.000 --> 00:07:48.000
Cảnh đầu tiên trong ứng dụng là màn hình Bắt đầu, được triển khai trong SwiftUI.

00:07:48.000 --> 00:07:53.000
Trong công cụ khung, có khá nhiều khung hình bị rơi trong suốt dấu vết này.

00:07:53.000 --> 00:07:58.000
Những khung hình bị rơi này có vẻ không đáng kể, nhưng chúng thực sự có thể làm hỏng trải nghiệm người dùng.

00:07:58.000 --> 00:08:04.000
Tôi có thể sử dụng Option-drag để phóng to một trong những khu vực có vấn đề hơn.

00:08:04.000 --> 00:08:15.000
Và bằng cách điều chỉnh phạm vi thời gian, tôi có thể kiểm tra những nút thắt cổ chai nào mà công cụ RealityKit Metrics được tìm thấy trong các khung hình chạy dài này.

00:08:15.000 --> 00:08:21.000
Công cụ phát hiện ra rằng nút thắt cổ chai lớn nhất trong thời gian này là Mã hóa hoạt hình cốt lõi.

00:08:21.000 --> 00:08:35.000
Vì vậy, tôi sẽ kiểm tra số liệu thống kê Core Animation, có thể được tìm thấy bằng cách nhấp vào tam giác tiết lộ bên cạnh RealityKit Metrics Instrument và chọn bản nhạc có nhãn Core Animation.

00:08:35.000 --> 00:08:40.000
Các chỉ số Hoạt hình Cốt lõi này có thể giúp thông báo cho chúng tôi về những gì có thể đã gây ra những đợt giảm khung hình này.

00:08:40.000 --> 00:08:47.000
Khi điều tra các số liệu này, bạn sẽ nhận thấy rằng một số trong số chúng có bối cảnh về mức độ nghiêm trọng của số liệu.

00:08:47.000 --> 00:08:50.000
Trong dòng thời gian, điều này được phản ánh trong mã màu.

00:08:50.000 --> 00:08:55.000
Điều này là để hướng dẫn bạn về những ngưỡng hợp lý cho các chỉ số chính này.

00:08:55.000 --> 00:09:03.000
Dựa trên trực quan hóa dòng thời gian, rõ ràng là ứng dụng đang vượt quá ngưỡng được đề xuất cho số lần chuẩn bị ngoài màn hình.

00:09:03.000 --> 00:09:13.000
Bản tóm tắt ở dưới cùng cho thấy số lượng chuẩn bị ngoài màn hình trung bình ở đây là 180, đây là mức trung bình khá cao.

00:09:13.000 --> 00:09:18.000
Khi xem xét số liệu thống kê Hoạt hình cốt lõi, có ba loại công việc bạn muốn ghi nhớ.

00:09:18.000 --> 00:09:23.000
Thứ nhất, hiệu ứng trong suốt và làm mờ là những hoạt động rất tốn kém cho hệ thống.

00:09:23.000 --> 00:09:29.000
Sử dụng những hiệu ứng này khi chúng mang lại nhiều tác động nhất cho người dùng, nếu không thì hãy sử dụng chúng một cách tiết kiệm.

00:09:29.000 --> 00:09:37.000
Số lần kết xuất được xác định bởi số lượng lớp Core Animation phải kết xuất riêng lẻ cho toàn bộ hình ảnh.

00:09:37.000 --> 00:09:40.000
Và cuối cùng, có những đường chuyền ngoài màn hình.

00:09:40.000 --> 00:09:47.000
Vì vậy, đúng như tên gọi của nó, một đường chuyền ngoài màn hình là một đường chuyền kết xuất được hiển thị ngoài màn hình chứ không phải màn hình.

00:09:47.000 --> 00:09:56.000
Một đường chuyền ngoài màn hình yêu cầu đường chuyền kết xuất tạm dừng những gì nó hiện đang làm và thực hiện một số công việc sẽ không được hiển thị cho người dùng.

00:09:56.000 --> 00:10:02.000
Tuy nhiên, đầu ra của đường chuyền ngoài màn hình là cần thiết để tiếp tục đường chuyền kết xuất thông thường.

00:10:02.000 --> 00:10:06.000
Thẻ ngoài màn hình đặc biệt có tác động đối với các ứng dụng không gian.

00:10:06.000 --> 00:10:19.000
Không giống như các nền tảng ứng dụng khác, nền tảng này liên tục hiển thị các ứng dụng không gian vì mọi khung hình cần tính đến các yếu tố môi trường, chẳng hạn như chuyển động đầu của người dùng.

00:10:19.000 --> 00:10:26.000
Do đó, giao diện người dùng tĩnh của bạn cần phải đủ hiệu quả để nó có thể được hiển thị ở tốc độ khung hình mục tiêu của hệ thống.

00:10:26.000 --> 00:10:35.000
Có bốn loại công việc chính có thể gây ra sự vượt qua ngoài màn hình: bóng tối, mặt nạ, hình chữ nhật tròn và hiệu ứng hình ảnh.

00:10:35.000 --> 00:10:43.000
Để tìm hiểu thêm về các đường chuyền ngoài màn hình, hãy xem cuộc nói chuyện công nghệ của chúng tôi về "Demystify và loại bỏ các trở ngại trong giai đoạn kết xuất."

00:10:43.000 --> 00:10:50.000
Vì có rất nhiều thẻ ngoài màn hình, tôi sẽ kiểm tra mã SwiftUI cho chế độ xem này để tìm ra điều gì có thể đã gây ra chúng.

00:10:50.000 --> 00:10:54.000
Trong mã SwiftUI, chế độ xem này không thực hiện bất kỳ mặt nạ hoặc hiệu ứng hình ảnh nào.

00:10:54.000 --> 00:10:57.000
Nhưng có những trường hợp bóng tối được áp dụng.

00:10:57.000 --> 00:11:02.000
Ví dụ, trong mục SwiftUI View, bóng đổ đang được áp dụng cho một số nút.

00:11:02.000 --> 00:11:07.000
Bóng tối là một hoạt động đặc biệt tốn kém, đặc biệt là khi kết hợp với độ trong suốt.

00:11:07.000 --> 00:11:13.000
Mặc dù bóng tối là một thành ngữ giao diện người dùng hữu ích, nhưng đối với các ứng dụng không gian, bạn nên sử dụng chúng khi chúng mang lại hiệu quả đáng kể cho người dùng.

00:11:13.000 --> 00:11:18.000
Tôi sẽ vô hiệu hóa những cái bóng này và xem xét một dấu vết mới.

00:11:18.000 --> 00:11:30.000
Khi bóng tối bị vô hiệu hóa, trong RealityKit Frames Instrument, có rất ít vấn đề về khung hình và RealityKit Metrics báo cáo rằng các lần vượt qua ngoài màn hình đã giảm bốn lần.

00:11:30.000 --> 00:11:34.000
Bây giờ, cảnh tiếp theo mà chúng ta thấy trong ứng dụng Thế giới là các vật thể trong chế độ xem quỹ đạo.

00:11:34.000 --> 00:11:41.000
Tôi sẽ mở một dấu vết từ cảnh đó để xem liệu có bất cứ điều gì có thể được tối ưu hóa hay không.

00:11:41.000 --> 00:11:48.000
Trong Công cụ Khung, có sự phân tán của các khung hình bị rơi khắp dấu vết với rất nhiều nút thắt cổ chai.

00:11:48.000 --> 00:11:55.000
Chế độ xem chi tiết cho RealityKit Metrics cung cấp một bản tóm tắt về những nút thắt cổ chai đó.

00:11:55.000 --> 00:12:00.000
Trong bản tóm tắt, hầu hết các nút thắt cổ chai này đều liên quan đến GPU Work Stalls.

00:12:00.000 --> 00:12:08.000
Bởi vì loại nút cổ chai được báo cáo thường xuyên nhất là các điểm dừng GPU, tôi sẽ lại mở rộng RealityKit Metrics.

00:12:08.000 --> 00:12:14.000
Nhưng lần này, tôi sẽ điều tra bằng cách sử dụng bản nhạc Kết xuất 3D.

00:12:14.000 --> 00:12:21.000
Tôi sẽ chọn khu vực của dấu vết có số lượng khung hình rơi cao.

00:12:21.000 --> 00:12:31.000
Trong lựa chọn thời gian này, các số liệu Kết xuất 3D báo cáo rằng số lượng tam giác và đỉnh vượt xa các ngưỡng được đề xuất.

00:12:31.000 --> 00:12:39.000
Tiếp theo, tôi sẽ làm nổi bật khu vực của dấu vết nơi gần như không có nhiều giọt khung hình.

00:12:39.000 --> 00:12:46.000
Và theo số liệu kết xuất, số lượng tam giác và đỉnh nằm trong ngưỡng được đề xuất.

00:12:46.000 --> 00:12:52.000
Điều này có nghĩa là bạn thực sự nên đánh giá số lượng và chất lượng tài sản mà ứng dụng đang sử dụng trong cảnh.

00:12:52.000 --> 00:13:01.000
Khi tối ưu hóa kết xuất nội dung, trước tiên hãy kiểm tra các hình tam giác, đỉnh và vẽ các cuộc gọi từ nhóm Kết xuất 3D trong RealityKit Metrics.

00:13:01.000 --> 00:13:06.000
Để tối ưu hóa các số liệu này, hãy sử dụng các mắt lưới hình dạng đơn giản khi có thể.

00:13:06.000 --> 00:13:11.000
Tận dụng lợi thế của việc cân bằng khi sử dụng tài sản với cùng một lưới.

00:13:11.000 --> 00:13:22.000
Kiểm tra độ phức tạp của tài sản bằng cách sử dụng số liệu thống kê trong Reality Composer Pro, đây là một công cụ dành cho nhà phát triển mới cho phép bạn lắp ráp, chỉnh sửa và xem trước nội dung 3D.

00:13:22.000 --> 00:13:27.000
Nội dung đó sau đó có thể được truy cập thông qua mã trực tiếp trong dự án Xcode của bạn.

00:13:27.000 --> 00:13:34.000
Để tìm hiểu thêm về công cụ này và cách tạo tài sản tuyệt vời, hãy xem phiên "Gặp gỡ Reality Composer Pro".

00:13:34.000 --> 00:13:41.000
Tôi đã tiếp tục và hoán đổi tài sản mà tôi đang sử dụng với những tài sản sử dụng ít đa giác hơn và thu được một dấu vết mới.

00:13:41.000 --> 00:13:47.000
Trong dấu vết này, Công cụ Khung báo cáo rằng tất cả các khung hình đang đạt đến thời hạn của chúng.

00:13:47.000 --> 00:13:57.000
Và nếu tôi kiểm tra lại số liệu thống kê kết xuất 3D, nó báo cáo rằng số lượng tam giác và đỉnh bị giảm đáng kể.

00:13:57.000 --> 00:14:02.000
Mặc dù những tài sản này sử dụng ít đa giác hơn, nhưng không có sự mất mát về chất lượng trải nghiệm.

00:14:02.000 --> 00:14:06.000
Dấu vết tiếp theo là khi chúng ta tương tác với mô hình Trái đất.

00:14:06.000 --> 00:14:10.000
Trong cảnh này, việc thay đổi kích thước quả địa cầu thực sự khá bồn chồn.

00:14:10.000 --> 00:14:18.000
RealityKit Metrics báo cáo rằng làn đường System Power Impact rất cao trong một khoảng thời gian đáng kể.

00:14:18.000 --> 00:14:25.000
Điều này chỉ ra rằng một số phần trong ứng dụng của bạn đang rất kém hiệu quả và trải nghiệm người dùng có thể bị ảnh hưởng.

00:14:25.000 --> 00:14:33.000
Bạn nên nhắm mục tiêu để ứng dụng của mình hoạt động tốt trong khi vẫn giữ tác động nguồn điện hệ thống của thiết bị ở trạng thái danh nghĩa trong thời gian nhất có thể.

00:14:33.000 --> 00:14:42.000
Khi lập hồ sơ để giảm tác động năng lượng hệ thống, hãy luôn lập hồ sơ với ứng dụng của bạn một cách riêng biệt để đảm bảo bạn nhận được thông tin có thể hành động nhất.

00:14:42.000 --> 00:14:46.000
Bạn có thể giảm tác động năng lượng của hệ thống bằng cách sử dụng một số cách tiếp cận.

00:14:46.000 --> 00:14:51.000
Đầu tiên, hãy đảm bảo rằng số liệu thống kê từ RealityKit Metrics nằm trong kỳ vọng.

00:14:51.000 --> 00:15:00.000
Nếu những thứ này vượt quá mong đợi, thiết bị có thể hoạt động ở trạng thái công suất cao hơn trong thời gian dài để mang lại trải nghiệm mượt mà.

00:15:00.000 --> 00:15:04.000
Tiếp theo, kiểm tra xem CPU và GPU đang làm gì.

00:15:04.000 --> 00:15:11.000
Đối với CPU, hãy kiểm tra xem Time Profiler có báo cáo mức sử dụng CPU cao trong các vùng tiêu thụ công suất cao của bạn hay không.

00:15:11.000 --> 00:15:17.000
Và nếu có, hãy tối ưu hóa mã ràng buộc CPU của bạn bằng cách sử dụng Time Profiler.

00:15:17.000 --> 00:15:20.000
Đối với GPU, chúng tôi có trạng thái hiệu suất.

00:15:20.000 --> 00:15:25.000
Khi GPU ở giai đoạn tối đa, nó sẽ tiêu thụ một lượng năng lượng đáng kể.

00:15:25.000 --> 00:15:33.000
Trong trường hợp đó, chúng ta nên sử dụng mẫu Metal System Trace trong Instruments để xem công việc nào đang được thực hiện trên GPU.

00:15:33.000 --> 00:15:37.000
Bằng cách đó, chúng ta có thể hiểu những gì có thể được tối ưu hóa.

00:15:37.000 --> 00:15:52.000
Quay trở lại dấu vết, Time Profiler cho chúng ta biết rằng mức sử dụng CPU trung bình là 100 phần trăm trong khu vực này và trạng thái hiệu suất GPU là tối thiểu trong hầu hết thời gian này.

00:15:52.000 --> 00:15:57.000
Sử dụng Time Profiler, tôi có thể kiểm tra nguyên nhân gây ra mức sử dụng CPU cao.

00:15:57.000 --> 00:16:00.000
Dấu vết ngăn xếp nặng nhất nằm trong chế độ xem chi tiết mở rộng.

00:16:00.000 --> 00:16:08.000
Đây là một tính năng rất hữu ích của Time Profiler, vì nó cho phép bạn nhanh chóng tìm thấy những phần đắt nhất trong mã của mình trong cây cuộc gọi.

00:16:08.000 --> 00:16:15.000
Nhìn vào các khung hình này, có vẻ như Entity.makeModel đang sử dụng rất nhiều thời gian CPU.

00:16:15.000 --> 00:16:20.000
Khung tiếp theo xuống là gọi Entity.generateCollisionShapes.

00:16:20.000 --> 00:16:30.000
Do đó, vấn đề hiệu suất dường như được gây ra bởi việc liên tục tạo ra các mô hình và hình dạng va chạm, đây là một hoạt động tốn kém.

00:16:30.000 --> 00:16:34.000
Tôi sẽ mở Xcode để xem tôi có thể làm gì với điều này.

00:16:34.000 --> 00:16:42.000
Đây là lệnh gọi hàm Entity.makeModel mà cây cuộc gọi hiển thị đã mất rất nhiều thời gian CPU.

00:16:42.000 --> 00:16:49.000
Điều này đang được gọi trong hàm makeGlobe.

00:16:49.000 --> 00:16:54.000
Tôi có thể Control-nhấp vào hàm makeGlobe để xem ai đang gọi nó.

00:16:54.000 --> 00:16:58.000
Nó đang được gọi từ phần thân xem Orbit SwiftUI.

00:16:58.000 --> 00:17:05.000
Đây là phản mẫu nên tránh vì phần thân của chế độ xem cần được tính toán rất nhanh.

00:17:05.000 --> 00:17:17.000
Bạn nên tránh tải mô hình hoặc bất kỳ hoạt động đắt tiền nào khác trong phần thân của chế độ xem SwiftUI của mình vì bất kỳ khi nào trạng thái của chế độ xem thay đổi, tất cả các thao tác đắt tiền đó cần được tính toán lại.

00:17:17.000 --> 00:17:23.000
Vì vậy, những gì tôi sẽ làm là xóa cuộc gọi này khỏi phần thân chế độ xem.

00:17:23.000 --> 00:17:29.000
Tiếp theo, trong ViewModel, tôi sẽ thêm một phiên bản có thể tái sử dụng của thực thể Trái đất.

00:17:29.000 --> 00:17:36.000
Và cuối cùng, tôi sẽ sử dụng thực thể Trái đất có thể tái sử dụng đó trong Chế độ xem quỹ đạo.

00:17:36.000 --> 00:17:43.000
Bây giờ, khi nội dung chế độ xem được tính toán lại, ứng dụng không lãng phí thời gian tải lại cùng một mô hình.

00:17:43.000 --> 00:17:50.000
Nhìn vào dấu vết sau khi sửa chữa của chúng tôi, tác động năng lượng được đưa trở lại trạng thái danh nghĩa.

00:17:50.000 --> 00:17:56.000
Và Time Profiler báo cáo rằng mức sử dụng CPU đã giảm từ 100 phần trăm xuống còn 10 phần trăm.

00:17:56.000 --> 00:18:04.000
Sau tất cả những tối ưu hóa này, có rất ít nút thắt cổ chai được báo cáo, hầu hết mọi khung hình đều đạt đến thời hạn và sức mạnh nằm trong kỳ vọng.

00:18:04.000 --> 00:18:09.000
Giờ đây, ứng dụng Thế giới là một ứng dụng được tối ưu hóa tốt cho nền tảng này.

00:18:09.000 --> 00:18:23.000
Bây giờ chúng tôi đã giảm số lần vượt qua ngoài màn hình, thay thế các tài sản đa giác cao bằng các tài sản hợp lý và giảm mức sử dụng CPU và năng lượng, chúng tôi sẽ bước qua phiên bản tối ưu hóa của ứng dụng này.

00:18:23.000 --> 00:18:30.000
Màn hình bắt đầu trông rất tuyệt, và vì bóng tối không thêm nhiều vào trải nghiệm người dùng, đây là một tối ưu hóa tốt.

00:18:30.000 --> 00:18:33.000
Tiếp theo, hãy mở các Đối tượng trong Quỹ đạo.

00:18:33.000 --> 00:18:38.000
Những mô hình này trông rất tuyệt, mặc dù chúng tôi đang sử dụng tài sản có ít đa giác hơn.

00:18:38.000 --> 00:18:41.000
Vì vậy, chi tiết bổ sung đó chỉ là lãng phí tài nguyên.

00:18:41.000 --> 00:18:47.000
Và cuối cùng, chúng ta sẽ mở lại mô hình Trái đất và thử thay đổi kích thước.

00:18:47.000 --> 00:18:53.000
Bây giờ sự tương tác này mịn như bơ.

00:18:53.000 --> 00:18:59.000
Đó là tổng quan ngắn gọn về cách sử dụng RealityKit Trace để tối ưu hóa các ứng dụng của bạn cho nền tảng mới này.

00:18:59.000 --> 00:19:03.000
Này, Sarina, những công cụ nào khác có sẵn cho các nhà phát triển?

00:19:03.000 --> 00:19:07.000
Sarina: Có một số công cụ có sẵn để giúp bạn tối ưu hóa các ứng dụng của mình cho điện toán không gian.

00:19:07.000 --> 00:19:15.000
Để tối ưu hóa nội dung SwiftUI, có các công cụ dành riêng cho miền trong ứng dụng Công cụ để phân tích SwiftUI, Core Animation và treo.

00:19:15.000 --> 00:19:20.000
Bạn có thể tìm hiểu thêm về nhạc cụ Hangs trong phiên "Phân tích treo bằng nhạc cụ".

00:19:20.000 --> 00:19:24.000
Ngoài ra còn có một số công cụ có sẵn để tối ưu hóa nội dung dựa trên tài sản 3D của bạn.

00:19:24.000 --> 00:19:32.000
Công cụ Time Profiler có thể giúp bạn tìm các khu vực mà ứng dụng của bạn mất nhiều thời gian nhất, chẳng hạn như khi một lượng lớn thời gian được dành để tải tài sản.

00:19:32.000 --> 00:19:38.000
Công cụ đo lường RealityKit có thể giúp bạn chẩn đoán khi các cảnh có quá nhiều tài sản hoặc tài sản quá phức tạp.

00:19:38.000 --> 00:19:44.000
Cuối cùng, bạn cũng có thể kiểm tra độ phức tạp của tài sản của mình khi bạn đang lắp ráp một cảnh bằng Reality Composer Pro.

00:19:44.000 --> 00:19:49.000
Để tìm hiểu thêm về Reality Composer Pro, hãy xem phiên "Gặp gỡ Reality Composer Pro".

00:19:49.000 --> 00:19:55.000
Nếu bạn đang sử dụng Metal trong ứng dụng của mình, công cụ hữu ích nhất sẽ là mẫu Metal System Trace trong Instruments.

00:19:55.000 --> 00:20:01.000
Mẫu này có các chỉ số chính, chẳng hạn như dòng thời gian GPU, bộ đếm GPU và trạng thái hiệu suất GPU.

00:20:01.000 --> 00:20:10.000
Để tìm hiểu thêm về mẫu này và các công cụ khác để lập hồ sơ nội dung Metal, hãy xem phiên "Khám phá các công cụ gỡ lỗi, lập hồ sơ và tạo tài sản Metal."

00:20:10.000 --> 00:20:13.000
Tóm lại, hiệu suất là điều cần thiết cho nền tảng này.

00:20:13.000 --> 00:20:17.000
Các ứng dụng cần được tối ưu hóa tốt để mang lại trải nghiệm người dùng tốt nhất có thể.

00:20:17.000 --> 00:20:22.000
Bạn có thể sử dụng mẫu RealityKit Trace để tìm các nút thắt hiệu suất trong ứng dụng của mình.

00:20:22.000 --> 00:20:29.000
Lập hồ sơ chủ động với các công cụ khác và kiểm tra nội dung của bạn trong Reality Composer Pro cũng có thể giúp bạn tìm và giải quyết các vấn đề về hiệu suất.

00:20:29.000 --> 00:20:36.000
Để tìm hiểu thêm về cách sử dụng mẫu RealityKit Trace để tối ưu hóa ứng dụng của bạn, vui lòng xem tài liệu dành cho nhà phát triển.

00:20:36.000 --> 00:20:44.000
Và để hiểu rõ hơn về hiệu suất cho nền tảng này, hãy xem phiên "Tối ưu hóa sức mạnh và hiệu suất của ứng dụng cho điện toán không gian."

00:20:44.000 --> 00:20:48.000
Tận hưởng tối ưu hóa các ứng dụng tính toán không gian của bạn, bất kể dấu vết có thể là gì.

00:20:48.000 --> 00:20:49.000
Harjas: Cảm ơn bạn đã xem.

00:20:49.000 --> 23:59:59.000
♪

