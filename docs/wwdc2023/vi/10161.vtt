WEBVTT

00:00:01.000 --> 00:00:11.000
♪ ♪

00:00:11.000 --> 00:00:16.000
Nick: Xin chào, tôi là Nick, một kỹ sư trong nhóm SwiftUI.

00:00:16.000 --> 00:00:20.000
Thanh tra là một yếu tố mới thú vị trong SwiftUI.

00:00:20.000 --> 00:00:25.000
Tôi sẽ xem xét trình kiểm tra là gì và cách sử dụng API.

00:00:25.000 --> 00:00:31.000
Sau đó, tôi sẽ xem xét các công cụ sửa đổi cho các tùy chỉnh bản trình bày.

00:00:31.000 --> 00:00:37.000
Thanh tra là tên của các chế độ xem hiển thị thêm chi tiết của nội dung đã chọn.

00:00:37.000 --> 00:00:41.000
Bạn có thể đã tương tác với một người trước đây.

00:00:41.000 --> 00:00:48.000
Keynote sử dụng trình kiểm tra để hiển thị chi tiết định dạng cho một lựa chọn, trong trường hợp này là trình định dạng hình dạng.

00:00:48.000 --> 00:00:53.000
Ở đây thanh tra trình bày như một thanh bên kéo.

00:00:53.000 --> 00:01:00.000
Một trường hợp sử dụng phổ biến khác cho các thanh tra viên là hiển thị nội dung bổ sung cho nội dung chính của ứng dụng.

00:01:00.000 --> 00:01:04.000
Phím tắt sử dụng trình kiểm tra cho mục đích này.

00:01:04.000 --> 00:01:14.000
Giao diện chính là phím tắt mà người dùng đang chỉnh sửa và trình kiểm tra bổ sung nó với thư viện các ứng dụng và hành động có sẵn.

00:01:14.000 --> 00:01:18.000
Tôi sẽ sử dụng ứng dụng mẫu này để khám phá API thanh tra.

00:01:18.000 --> 00:01:22.000
Tôi đã làm quen với các loài động vật trong và xung quanh Apple Park.

00:01:22.000 --> 00:01:33.000
Ứng dụng này lưu các loài động vật tôi đã gặp, theo dõi tên của chúng, theo dõi các loại trái cây yêu thích của chúng và có cột này mà tôi sẽ đến sau được gắn nhãn "Cấp độ chú ý".

00:01:33.000 --> 00:01:37.000
Và bây giờ, hãy gặp, thanh tra của SwiftUI!

00:01:37.000 --> 00:01:42.000
Thanh tra viên hiển thị chế độ xem đọc-ghi các chi tiết về con vật được chọn.

00:01:42.000 --> 00:01:48.000
Ở đây tôi đang điều chỉnh mức độ nghi ngờ của Fabrizio Fish thành "Cực kỳ đáng ngờ".

00:01:48.000 --> 00:01:51.000
Thực ra tôi sẽ giữ anh ta ở mức khó chịu.

00:01:51.000 --> 00:02:01.000
Thanh tra có sẵn cho các nhà phát triển SwiftUI trên macOS và iPadOS và iOS nữa!

00:02:01.000 --> 00:02:10.000
API trình kiểm tra bao gồm kiểm soát có lập trình đối với chiều rộng cột, cho phép bạn điều chỉnh chiều rộng của cột cuối.

00:02:10.000 --> 00:02:19.000
API bao gồm kiểm soát có lập trình đối với trạng thái được trình bày, cho phép ẩn và hiển thị trình kiểm tra khi cần thiết.

00:02:19.000 --> 00:02:23.000
Thanh tra là một sự trừu tượng cấp cao hơn chỉ là một thanh bên ở phía sau.

00:02:23.000 --> 00:02:33.000
Trong các lớp kích thước nhỏ gọn, nó thích ứng với một trang tính có thể thay đổi kích thước và trình kiểm tra sẽ tự động phủ lên màn hình chia nhỏ trên iPad lớn hơn.

00:02:33.000 --> 00:02:40.000
SwiftUI đã có một bộ API cấu trúc hiện có.

00:02:40.000 --> 00:02:49.000
Trình kiểm tra phù hợp với các API này với các đặc điểm của cả thành phần điều hướng và bản trình bày.

00:02:49.000 --> 00:02:58.000
Tương tự như NavigationSplitView và NavigationStack, trình kiểm tra được sử dụng để xây dựng giàn giáo cho cảnh của bạn.

00:02:58.000 --> 00:03:09.000
Tương tự như các hộp thoại Sheet, popover, alert và confirmation, inspector là một bài thuyết trình, loại bỏ và trình bày khi cần thiết.

00:03:09.000 --> 00:03:13.000
Đã đến lúc học cách áp dụng API kiểm tra mới.

00:03:13.000 --> 00:03:17.000
Trước đó, tôi đã giới thiệu ứng dụng mẫu mà tôi đã tạo cho phiên này.

00:03:17.000 --> 00:03:22.000
Bạn có thể nhận thấy tôi đang theo dõi mức độ nghi ngờ của từng con vật.

00:03:22.000 --> 00:03:26.000
Đó là bởi vì tôi đang cố gắng giải quyết một bí ẩn có cổ phần cao.

00:03:26.000 --> 00:03:30.000
Ai đó đang ăn hết trái cây ở Apple Park!

00:03:30.000 --> 00:03:37.000
Tôi đã thêm thanh tra vào ứng dụng của mình để tôi, Thanh tra Nick, có thể thu thập thông tin chi tiết của từng con vật.

00:03:37.000 --> 00:03:46.000
Tôi sẽ cho bạn thấy việc áp dụng API thanh tra dễ dàng như thế nào và có lẽ tôi có thể giải quyết bí ẩn trái cây này trên đường đi.

00:03:46.000 --> 00:03:50.000
Nhanh lên, đến Xcode! Trò chơi là một trái cây!

00:03:50.000 --> 00:03:56.000
Bước đầu tiên để thêm thanh tra là sử dụng công cụ sửa đổi mới, thanh tra.

00:03:56.000 --> 00:04:05.000
Giống như một số bài thuyết trình khác, điều này cần một ràng buộc được trình bày Bool, và sau đó là nội dung của thanh tra trong trình tạo chế độ xem cuối.

00:04:05.000 --> 00:04:10.000
Đối với nội dung thanh tra, tôi có một AnimalInspectorForm đã sẵn sàng.

00:04:10.000 --> 00:04:15.000
Tôi có một số phương pháp tùy chỉnh để vượt qua động vật hiện đang được kiểm tra.

00:04:15.000 --> 00:04:19.000
Và có thanh tra của tôi, trình bày như một cột cuối ở đây trên macOS.

00:04:19.000 --> 00:04:24.000
Tôi đã gieo mầm cho một trải nghiệm thanh tra tuyệt vời.

00:04:24.000 --> 00:04:28.000
AnimalForm này đang sử dụng phong cách được nhóm lại.

00:04:28.000 --> 00:04:33.000
Trong trường hợp bạn chưa từng gặp phải kiểu biểu mẫu trước đây, chúng được áp dụng như thế này.

00:04:33.000 --> 00:04:41.000
Nhưng vì bối cảnh trình kiểm tra sử dụng kiểu được nhóm theo mặc định, tôi không cần phải tự tạo kiểu cho nó.

00:04:41.000 --> 00:04:48.000
Tôi thậm chí có thể tương tác với thanh tra trong khung vẽ của bản xem trước.

00:04:48.000 --> 00:04:55.000
Ah, điều này nhắc nhở tôi, trong khi các thanh tra viên có thể thu gọn theo mặc định, họ không thể thay đổi kích thước theo mặc định.

00:04:55.000 --> 00:04:59.000
Tôi có thể thay đổi điều đó bằng cách sử dụng công cụ sửa đổi chiều rộng cột kiểm tra.

00:04:59.000 --> 00:05:01.000
Tôi sẽ sử dụng một số mặc định hợp lý.

00:05:01.000 --> 00:05:07.000
200 cho phút, 300 cho lý tưởng, và 400 cho tối đa.

00:05:07.000 --> 00:05:18.000
Tham số lý tưởng này sẽ là kích thước của cột ở lần khởi chạy đầu tiên, nhưng nếu người dùng thay đổi kích thước trình kiểm tra, hệ thống sẽ duy trì kích thước đó trong suốt quá trình khởi chạy.

00:05:18.000 --> 00:05:26.000
Cuối cùng, tôi sẽ thêm một mục thanh công cụ để chuyển đổi trạng thái được trình bày.

00:05:26.000 --> 00:05:35.000
Tôi sẽ sử dụng một nút chuyển đổi thuộc tính được trình bày và cho nhãn của nó, Nhãn, sử dụng hình ảnh hệ thống info.circle.

00:05:35.000 --> 00:05:42.000
Mục thanh công cụ sẽ xuất hiện trong phần của thanh công cụ phía trên trình kiểm tra vì nó được khai báo trong trình tạo chế độ xem của trình kiểm tra.

00:05:42.000 --> 00:05:55.000
Khi tôi cuộn, thanh công cụ hoạt động chính xác như tôi mong đợi, hiển thị một túi bóng khi có đủ nội dung bên dưới thanh công cụ.

00:05:55.000 --> 00:06:01.000
Tôi đã cố tình sử dụng công cụ sửa đổi thanh tra trên AnimalTable, thay vì một số vị trí khác trong hệ thống phân cấp chế độ xem.

00:06:01.000 --> 00:06:10.000
Giống như nhiều SwiftUI APIs, công cụ sửa đổi trình kiểm tra có các hành vi khác nhau tùy thuộc vào ngữ cảnh nơi nó được áp dụng.

00:06:10.000 --> 00:06:25.000
Cụ thể, vị trí quyết định xem kiểu chiều cao đầy đủ có được sử dụng hay không, nơi không có sự tách biệt giữa thanh công cụ và nội dung, hoặc kiểu dưới thanh công cụ được sử dụng, nơi trình kiểm tra được lồng dưới thanh công cụ.

00:06:25.000 --> 00:06:32.000
Lưu ý rằng dấu phân cách tiêu đề kéo dài toàn bộ chiều rộng của cửa sổ trong giao diện bên dưới thanh công cụ.

00:06:32.000 --> 00:06:38.000
Tương tự, nội dung thanh công cụ sẽ được đặt trong thanh công cụ của nội dung chính...

00:06:38.000 --> 00:06:44.000
Hoặc trong thanh công cụ của thanh tra, tùy thuộc vào nơi công cụ sửa đổi thanh công cụ được sử dụng.

00:06:44.000 --> 00:06:48.000
Có hai điểm cần xem xét khi sử dụng trình kiểm tra API.

00:06:48.000 --> 00:06:56.000
Đầu tiên, trình kiểm tra sẽ được đặt bên trong hay bên ngoài cấu trúc điều hướng như NavigationStack hay NavigationSplitView?

00:06:56.000 --> 00:07:03.000
Thứ hai, nội dung thanh công cụ nên ở bên trong hay bên ngoài trình tạo chế độ xem của thanh tra?

00:07:03.000 --> 00:07:06.000
Tôi sẽ đi qua hai trong số những công trình này.

00:07:06.000 --> 00:07:14.000
Đầu tiên, đặt trình kiểm tra bên trong cấu trúc điều hướng, với nội dung thanh công cụ bên ngoài trình kiểm tra.

00:07:14.000 --> 00:07:22.000
Khi một trình kiểm tra được chứa trong NavigationStack, trình kiểm tra nằm bên dưới thanh công cụ của ngăn xếp điều hướng.

00:07:22.000 --> 00:07:31.000
Ở đây, nội dung thanh công cụ được khai báo bên ngoài trình kiểm tra trên nội dung chính và được hiển thị trên thanh công cụ của ngăn xếp điều hướng.

00:07:31.000 --> 00:07:41.000
Trong các lớp kích thước ngang nhỏ gọn, trình kiểm tra trình bày dưới dạng một trang tính và mục thanh công cụ nằm trong thanh công cụ của nội dung chính.

00:07:41.000 --> 00:07:44.000
Quay lại bảng các khả năng của tôi.

00:07:44.000 --> 00:07:54.000
Đối với công trình thứ hai, tôi sẽ xem xét việc đặt trình kiểm tra bên ngoài cấu trúc điều hướng, với nội dung thanh công cụ bên trong trình tạo chế độ xem trình kiểm tra.

00:07:54.000 --> 00:08:04.000
Khi công cụ sửa đổi thanh tra được đặt bên ngoài cấu trúc điều hướng, thanh tra được cung cấp toàn bộ chiều cao của cột cuối để bố trí.

00:08:04.000 --> 00:08:12.000
Nếu thanh tra có nội dung thanh công cụ, nội dung đó sẽ được đặt trong phần thanh công cụ dành riêng cho thanh tra.

00:08:12.000 --> 00:08:20.000
Hai mục thanh công cụ này được định vị với vị trí chính và cuối cùng được căn giữa trong thanh công cụ điều hướng phía trên trình kiểm tra.

00:08:20.000 --> 00:08:36.000
Tuy nhiên, lần này, vì nội dung thanh công cụ nằm bên trong trình tạo chế độ xem của trình kiểm tra, khi trình kiểm tra dưới dạng trang tính, nội dung thanh công cụ nằm trong trang tính.

00:08:36.000 --> 00:08:44.000
Những nguyên tắc này mở rộng cho macOS, ngoại trừ trình kiểm tra không hiển thị dưới dạng một trang tính trên macOS, và vì vậy bảng trở nên đơn giản hơn.

00:08:44.000 --> 00:08:50.000
Trục duy nhất cần lo lắng là bên trong hoặc bên ngoài cấu trúc điều hướng.

00:08:50.000 --> 00:09:10.000
Lưu ý cuối cùng, nhưng quan trọng: Nếu bạn đang sử dụng trình kiểm tra trong NavigationSplitView, trình kiểm tra nên được đặt trong trình tạo chế độ xem của cột chi tiết hoặc, giống như trước đây, nó cũng có thể được đặt hoàn toàn bên ngoài cấu trúc điều hướng.

00:09:10.000 --> 00:09:17.000
Chà, tất cả những giải quyết bí ẩn này đang khiến tôi đói!

00:09:17.000 --> 00:09:23.000
Ồ!

00:09:23.000 --> 00:09:28.000
Tôi đang nhận được một Bản tin Nibble trong ứng dụng!

00:09:28.000 --> 00:09:37.000
Ứng dụng hiển thị Bản tin Nibble dưới dạng các tờ có thể thay đổi kích thước với một số thông tin về vị trí và thời điểm trái cây được nhấm nháp.

00:09:37.000 --> 00:09:47.000
Đây là thời điểm tuyệt vời để tôi nói về các tùy chỉnh bản trình bày SwiftUI được phát hành với iOS 16.4.

00:09:47.000 --> 00:09:52.000
Bản tin nhấm nháp trái cây là một tờ giấy, không phải là một thanh tra.

00:09:52.000 --> 00:09:59.000
Công cụ sửa đổi bản trình bày cho phép tùy chỉnh sâu các trang tính và các bản trình bày khác như cửa sổ bật lên.

00:09:59.000 --> 00:10:02.000
Tôi sẽ thử một vài trong số chúng.

00:10:02.000 --> 00:10:06.000
Công cụ sửa đổi nền bản trình bày được đặt tên một cách khéo léo.

00:10:06.000 --> 00:10:10.000
Nó sẽ thiết lập nền tảng của một bài thuyết trình.

00:10:10.000 --> 00:10:21.000
Không giống như công cụ sửa đổi nền hiện có, công cụ sửa đổi cụ thể của bản trình bày sẽ lấp đầy toàn bộ bản trình bày và cho phép nội dung cơ bản hiển thị.

00:10:21.000 --> 00:10:29.000
Vì vậy, nếu tôi sử dụng thinMaterial, tôi sẽ thấy một gợi ý về Danh sách phía sau trang tính.

00:10:29.000 --> 00:10:38.000
Tôi muốn cho phép tương tác với nội dung phía sau trang tính, trong trường hợp tôi muốn cuộn danh sách và xem xét các nghi phạm trong khi đọc Bản tin Nibble.

00:10:38.000 --> 00:10:43.000
Điều này đơn giản như presentationBackgroundInteraction được kích hoạt.

00:10:43.000 --> 00:10:49.000
Chế độ xem mờ đã bị xóa và bây giờ tôi có thể tương tác với nội dung nền.

00:10:49.000 --> 00:10:57.000
Loại PresentationBackgroundInteraction cũng có thể có tham số upThrough chấp nhận một detent trình bày.

00:10:57.000 --> 00:11:09.000
Miễn là đối số được cung cấp khớp với một trong các biểu tượng của bản trình bày đã cho, SwiftUI sẽ chỉ cung cấp chế độ xem mờ tại các biểu tượng lớn hơn đối số upThrough.

00:11:09.000 --> 00:11:18.000
Tôi muốn làm mờ ở bất kỳ lỗ nào trên độ cao 200, vì vậy trước tiên tôi sẽ thêm lỗ chiều cao 200 bằng cách sử dụng công cụ sửa đổi presentationDetents.

00:11:18.000 --> 00:11:22.000
Tôi sẽ điều chỉnh trang tính từ mức trung bình hiện tại của nó...

00:11:22.000 --> 00:11:25.000
Xuống đến chiều cao tùy chỉnh của tôi là 200.

00:11:25.000 --> 00:11:35.000
Khi tôi chỉ cho phép tương tác nền lên đến 200, chế độ xem mờ sẽ trở lại cho các lỗ trung bình và lớn.

00:11:35.000 --> 00:11:41.000
Có nhiều tùy chỉnh hơn có sẵn cho bạn để có được giao diện hoàn hảo cho các bài thuyết trình.

00:11:41.000 --> 00:11:48.000
Nhiều công cụ sửa đổi này cũng có ảnh hưởng đến các bài thuyết trình khác, không chỉ các trang tính.

00:11:48.000 --> 00:11:51.000
Và một điều nữa về công cụ sửa đổi bản trình bày.

00:11:51.000 --> 00:11:57.000
Những công cụ sửa đổi tương tự đó sáng tác với Thanh tra khi Thanh tra đang trình bày dưới dạng một trang tính.

00:11:57.000 --> 00:12:07.000
Đối với trình kiểm tra của tôi từ trước đó, để vô hiệu hóa tương tác nội dung nền ở mức trung bình, tôi có thể sử dụng cùng một mã chính xác từ trước...

00:12:07.000 --> 00:12:15.000
Khai báo một detent chiều cao, và chỉ cho phép tương tác nền thông qua cùng một detent.

00:12:15.000 --> 00:12:21.000
Bây giờ thanh tra mờ đi ở mức trung bình và cao hơn.

00:12:21.000 --> 00:12:23.000
Và đó là các thanh tra viên ở SwiftUI.

00:12:23.000 --> 00:12:29.000
Trong video này, tôi đã giới thiệu API kiểm tra và các sắc thái của việc sử dụng nó.

00:12:29.000 --> 00:12:37.000
Tôi đã chọn một số công cụ sửa đổi bản trình bày trang tính yêu thích của mình để chứng minh và chỉ ra cách chúng có thể sáng tác với các thanh tra viên.

00:12:37.000 --> 00:12:39.000
Vậy bạn còn chờ gì nữa?

00:12:39.000 --> 00:12:42.000
Đi ra ngoài và kiểm tra.

00:12:42.000 --> 00:12:45.000
Đặt thanh tra ở đâu đó trong ứng dụng của bạn.

00:12:45.000 --> 00:12:49.000
Tiếp tục bằng cách tùy chỉnh các bài thuyết trình của bạn.

00:12:49.000 --> 00:12:55.000
Và đối với người nhấm nháp, tôi đoán những nỗ lực của chúng tôi để giải quyết bí ẩn này là không có kết quả.

00:12:55.000 --> 23:59:59.000
♪ ♪

