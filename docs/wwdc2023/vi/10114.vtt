WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:13.000
David: Xin chào, và chào mừng đến với "Có gì mới trong Wallet và Apple Pay."

00:00:13.000 --> 00:00:15.000
Tên tôi là David. Jon: Và tôi là Jon.

00:00:15.000 --> 00:00:22.000
David: Hôm nay, chúng ta sẽ nói về tất cả các tính năng và cải tiến mới mà chúng ta sẽ giới thiệu trong năm nay cho trải nghiệm Wallet và Apple Pay.

00:00:22.000 --> 00:00:31.000
Wallet và Apple Pay bao gồm một loạt các tính năng và chức năng, thẻ mã vạch, thẻ giao thông, chìa khóa xe hơi và hơn thế nữa.

00:00:31.000 --> 00:00:41.000
Đây là tất cả các phần quan trọng trong hệ sinh thái của chúng tôi, nhưng trọng tâm ngày hôm nay sẽ là ba lĩnh vực: Thanh toán, Theo dõi đơn hàng và Nhận dạng.

00:00:41.000 --> 00:00:44.000
Hãy bắt đầu với Thanh toán.

00:00:44.000 --> 00:00:51.000
Đầu tiên chúng ta sẽ nói về Apple Pay sau và cách bạn có thể tích hợp hỗ trợ bán hàng cho nó trong nền tảng của mình.

00:00:51.000 --> 00:01:01.000
Chúng ta sẽ nói về một số cải tiến đối với các khoản thanh toán được ủy quyền trước và sau đó xem qua API hoàn toàn mới để hỗ trợ chuyển tiền bằng Apple Pay.

00:01:01.000 --> 00:01:10.000
Apple Pay Later đã được giới thiệu vào đầu năm nay cho khách hàng ở Hoa Kỳ và cho phép người dùng chia các giao dịch mua thành bốn khoản thanh toán riêng biệt.

00:01:10.000 --> 00:01:15.000
Sau đó, người dùng có thể thuận tiện theo dõi và quản lý các giao dịch mua này trong Wallet.

00:01:15.000 --> 00:01:25.000
Mặc dù Apple Pay Later không yêu cầu bất kỳ sự tích hợp nào, chúng tôi đang giới thiệu một API mới cung cấp chế độ xem bán hàng chuyên dụng để đưa vào giao diện người dùng của bạn.

00:01:25.000 --> 00:01:32.000
Sử dụng chế độ xem này cho thấy sự hỗ trợ cho Apple Pay Later và nêu chi tiết trải nghiệm mà khách hàng có thể mong đợi.

00:01:32.000 --> 00:01:38.000
Bạn sẽ có khả năng tùy chỉnh phong cách của chế độ xem để phù hợp hơn với ngữ cảnh mà nó được hiển thị.

00:01:38.000 --> 00:01:45.000
Khi người dùng chọn chế độ xem này để tìm hiểu thêm, bạn có thể lựa chọn cách giải thích Apple Pay Later.

00:01:45.000 --> 00:01:50.000
Và chế độ xem này sẽ có sẵn cho các nhà phát triển cho cả ứng dụng và trên web.

00:01:50.000 --> 00:02:04.000
Chế độ xem bán hàng có thể được hiển thị theo bốn kiểu hiển thị khác nhau, tùy thuộc vào ngữ cảnh: Kiểu tiêu chuẩn, mô tả ngắn gọn cách Apple Pay Later có thể được sử dụng để chia giao dịch mua thành nhiều khoản hoàn trả.

00:02:04.000 --> 00:02:09.000
Một phong cách huy hiệu, thể hiện sự hỗ trợ một cách ngắn gọn.

00:02:09.000 --> 00:02:14.000
Kiểu thanh toán, được thiết kế để đặt cùng với các tùy chọn thanh toán khác trong quy trình thanh toán của bạn.

00:02:14.000 --> 00:02:18.000
Và một kiểu giá, để sử dụng cùng với tổng giá mua.

00:02:18.000 --> 00:02:23.000
Khi người dùng tương tác với chế độ xem này, họ sẽ được cung cấp thêm thông tin.

00:02:23.000 --> 00:02:28.000
Là một thương gia, bạn có khả năng lựa chọn giữa hai hành động khác nhau.

00:02:28.000 --> 00:02:37.000
Hành động "Tìm hiểu thêm" sẽ trình bày tổng quan về Apple Pay Later và giải thích trải nghiệm mà người dùng sẽ trải qua nếu họ chọn nó làm phương thức thanh toán.

00:02:37.000 --> 00:02:46.000
Hành động "Máy tính" vẫn sẽ trình bày lời giải thích về Apple Pay Later, nhưng tập trung vào lịch trả nợ mà người dùng sẽ cần phải tuân theo.

00:02:46.000 --> 00:02:50.000
Hãy cùng xem xét việc kết hợp chế độ xem này trong ứng dụng của bạn.

00:02:50.000 --> 00:02:56.000
Đầu tiên, bạn sẽ muốn kiểm tra xem người dùng có đủ điều kiện để sử dụng Apple Pay Later hay không.

00:02:56.000 --> 00:03:01.000
Bạn có thể sử dụng chức năng xác thực trong PKPayLaterUtilities để thực hiện việc này.

00:03:01.000 --> 00:03:06.000
Bạn sẽ cần cung cấp số tiền cho giao dịch, cũng như địa phương được yêu cầu.

00:03:06.000 --> 00:03:16.000
Khi bạn đã xác định liệu người dùng có đủ điều kiện sử dụng Apple Pay Later hay không, bạn khởi tạo PKPayLaterView, với các chi tiết tương tự được cung cấp để kiểm tra tính đủ điều kiện.

00:03:16.000 --> 00:03:24.000
Nếu bạn muốn tùy chỉnh phong cách và hành động của chế độ xem, bạn có thể làm như vậy bằng cách thay đổi các thuộc tính tương ứng của chúng.

00:03:24.000 --> 00:03:32.000
Chúng tôi cũng cung cấp chế độ xem SwiftUI thuận tiện, cho phép bạn thể hiện sự chấp nhận Apple Pay Later trong các ứng dụng SwiftUI của mình.

00:03:32.000 --> 00:03:38.000
Để sử dụng nó, bạn khởi tạo PayLaterView và cung cấp cho nó thông tin giống như trước đây.

00:03:38.000 --> 00:03:43.000
Để tùy chỉnh kiểu hiển thị và hành động, hãy sử dụng các công cụ sửa đổi chế độ xem thích hợp để làm như vậy.

00:03:43.000 --> 00:03:46.000
Và nó đơn giản như vậy.

00:03:46.000 --> 00:03:53.000
Nếu bạn muốn hỗ trợ chế độ xem bán hàng trên web, có một vài bước thiết lập bạn sẽ cần thực hiện trước.

00:03:53.000 --> 00:04:02.000
API để hiển thị chế độ xem được cung cấp trong Apple Pay JavaScript SDK hiện có, nhưng có một số thuộc tính mới mà bạn có thể cần đặt khi bao gồm nó.

00:04:02.000 --> 00:04:10.000
Điều quan trọng là phải đặt thuộc tính crossorigin nếu bạn được yêu cầu hỗ trợ các yêu cầu chia sẻ Tài nguyên Nguồn gốc chéo.

00:04:10.000 --> 00:04:18.000
Sử dụng thuộc tính không đồng bộ để đảm bảo tập lệnh tải và thực thi độc lập với tiến trình tải trang của bạn.

00:04:18.000 --> 00:04:23.000
Và cuối cùng, JWT được yêu cầu để xác thực các yêu cầu đối với API.

00:04:23.000 --> 00:04:27.000
Mã thông báo này có thể được tạo trên cổng thông tin Nhà phát triển Apple.

00:04:27.000 --> 00:04:31.000
Sử dụng JavaScript SDK không thể đơn giản hơn.

00:04:31.000 --> 00:04:35.000
Sử dụng phần tử apple-pay-merchandising để thể hiện chế độ xem.

00:04:35.000 --> 00:04:42.000
Số tiền, mã quốc gia, mã tiền tệ và địa phương là các trường bắt buộc.

00:04:42.000 --> 00:04:47.000
Cũng giống như API gốc, bạn cũng có thể tùy chỉnh các khía cạnh khác của chế độ xem theo yêu cầu.

00:04:47.000 --> 00:04:53.000
Dưới đây là một số phương pháp hay nhất để làm theo nếu bạn đang kết hợp chế độ xem bán hàng Apple Pay Later.

00:04:53.000 --> 00:04:57.000
Đối với các ứng dụng, một quyền được yêu cầu để sử dụng chế độ xem này.

00:04:57.000 --> 00:05:00.000
Điều này có thể được lấy trên cổng thông tin Nhà phát triển Apple.

00:05:00.000 --> 00:05:07.000
Đối với các trang web, hãy nhớ đăng ký tên miền của bạn và lấy JWT để sử dụng khi bao gồm SDK.

00:05:07.000 --> 00:05:11.000
Điều này cũng có thể được thực hiện trên cổng thông tin Nhà phát triển Apple.

00:05:11.000 --> 00:05:15.000
Nếu có thể, hãy thử nhập SDK trong phần tử đầu.

00:05:15.000 --> 00:05:22.000
Điều này sẽ cho phép nó chạy càng sớm càng tốt, vì vậy chế độ xem bán hàng đã sẵn sàng khi trang của bạn đã được tải đầy đủ.

00:05:22.000 --> 00:05:28.000
Kích thước của chế độ xem có thể được tùy chỉnh theo nhu cầu của bạn, nhưng hãy đảm bảo rằng bạn tuân theo các yêu cầu về kích thước.

00:05:28.000 --> 00:05:38.000
Và cuối cùng, nếu trang web của bạn có chính sách bảo mật nội dung hạn chế, hãy làm theo các nguyên tắc được đề xuất để đảm bảo SDK có thể được tải trên các miền.

00:05:38.000 --> 00:05:41.000
Và đó là một cái nhìn về Apple Pay Later.

00:05:41.000 --> 00:05:44.000
Tiếp theo, chúng ta sẽ nói về các khoản thanh toán được ủy quyền trước.

00:05:44.000 --> 00:05:49.000
Trong iOS 16, chúng tôi đã giới thiệu các khoản thanh toán được ủy quyền trước.

00:05:49.000 --> 00:05:57.000
Người dùng có thể xem và quản lý các khoản thanh toán mà họ đã ủy quyền trước trong Wallet và người bán có thể tính phí người dùng theo các điều khoản đã thỏa thuận.

00:05:57.000 --> 00:06:02.000
Ban đầu chúng tôi cung cấp hỗ trợ cho các khoản thanh toán định kỳ và thanh toán tải lại tự động.

00:06:02.000 --> 00:06:04.000
Bây giờ chúng tôi cũng hỗ trợ thanh toán trả chậm.

00:06:04.000 --> 00:06:10.000
Cả ba loại thanh toán được ủy quyền trước đều có sẵn để sử dụng trong các ứng dụng, cũng như trên web.

00:06:10.000 --> 00:06:17.000
Các khoản thanh toán trả chậm cho phép bạn tính một số tiền cố định hoặc thay đổi vào một ngày cụ thể trong tương lai.

00:06:17.000 --> 00:06:22.000
Nếu bạn có ngày giới hạn hủy miễn phí, bạn cũng có thể chỉ định điều này như một phần của yêu cầu.

00:06:22.000 --> 00:06:31.000
Ví dụ về các khoản thanh toán trả chậm có thể phù hợp bao gồm khi khách hàng đặt phòng khách sạn hoặc khi họ đặt hàng trước một mặt hàng.

00:06:31.000 --> 00:06:36.000
Các khoản thanh toán được ủy quyền trước tận dụng lợi thế của mã thông báo thương gia Apple Pay.

00:06:36.000 --> 00:06:41.000
Chúng được gắn với ID Apple của người dùng, chứ không phải là một thiết bị riêng lẻ.

00:06:41.000 --> 00:06:47.000
Điều này có nghĩa là ví dụ, nếu người dùng nâng cấp thiết bị của họ, mã thông báo vẫn sẽ hợp lệ để sử dụng.

00:06:47.000 --> 00:06:55.000
Bởi vì điều này, bạn vẫn có thể sử dụng mã thông báo để tính phí tài khoản của họ, giúp việc nhận thanh toán vào một ngày sau đó đáng tin cậy hơn.

00:06:55.000 --> 00:07:02.000
Khi thực hiện thanh toán được ủy quyền trước, mã thông báo của người bán sẽ tự động được phát hành nếu thẻ thanh toán của khách hàng hỗ trợ họ.

00:07:02.000 --> 00:07:12.000
Nếu thẻ thanh toán không hỗ trợ mã thông báo của người bán, giao dịch vẫn sẽ được thực hiện nhưng sẽ sử dụng mã thông báo Apple Pay truyền thống được gắn với một thiết bị riêng lẻ.

00:07:12.000 --> 00:07:19.000
Để tìm hiểu thêm về mã thông báo thương gia Apple Pay, hãy xem Có gì mới trong Wallet và Apple Pay năm ngoái.

00:07:19.000 --> 00:07:24.000
Vì vậy, hãy xem cách kết hợp các khoản thanh toán trả chậm trong ứng dụng của bạn.

00:07:24.000 --> 00:07:32.000
Đầu tiên, chúng tôi tạo ra một PKDeferredPaymentSummaryItem, trong đó phác thảo mô tả về khoản phí và số tiền sẽ được thực hiện.

00:07:32.000 --> 00:07:36.000
Bạn cũng đặt ngày thanh toán sẽ được thực hiện.

00:07:36.000 --> 00:07:39.000
Tiếp theo, chúng tôi tạo một PKDeferredPaymentRequest.

00:07:39.000 --> 00:07:46.000
Chúng tôi cung cấp cho nó mục tóm tắt mà chúng tôi vừa tạo, cùng với các thông tin khác liên quan đến việc quản lý thanh toán.

00:07:46.000 --> 00:07:53.000
Nếu chúng tôi có thỏa thuận thanh toán mà chúng tôi cần hiển thị cho người dùng, điều này cũng có thể được đặt trên yêu cầu thanh toán trả chậm.

00:07:53.000 --> 00:08:00.000
Khi chúng tôi đã tạo và định cấu hình yêu cầu, chúng tôi có thể đính kèm nó vào PKPaymentRequest của mình.

00:08:00.000 --> 00:08:09.000
Đối với các mục tóm tắt thanh toán theo yêu cầu của chúng tôi, chúng tôi tạo một PKDeferredPaymentSummaryItem khác với cùng số tiền và ngày như trước đây.

00:08:09.000 --> 00:08:13.000
Nhưng lần này với một nhãn đại diện cho tên của người bán.

00:08:13.000 --> 00:08:17.000
Chúng tôi đặt điều này theo yêu cầu và chúng tôi sẵn sàng trình bày để thanh toán.

00:08:17.000 --> 00:08:28.000
Như có thể thấy trong ví dụ này, bảng thanh toán Apple Pay sẽ trình bày khoản thanh toán trả chậm cho người dùng với thông tin về thỏa thuận thanh toán và khi nào họ có thể bị tính phí.

00:08:28.000 --> 00:08:35.000
Bây giờ, có một số cân nhắc quan trọng cần thực hiện nếu bạn chỉ định ngày hủy miễn phí.

00:08:35.000 --> 00:08:43.000
Khi bạn cung cấp ngày hủy miễn phí, bạn đang nói rằng bất kỳ việc hủy nào trước thời điểm đó sẽ được thực hiện miễn phí cho người dùng.

00:08:43.000 --> 00:08:49.000
Bởi vì điều này, cả ngày và giờ đều là những thông tin quan trọng.

00:08:49.000 --> 00:08:53.000
Bạn cần nêu rõ múi giờ mà chính sách hủy áp dụng.

00:08:53.000 --> 00:08:56.000
Chúng tôi đã cung cấp một tài sản riêng biệt để hỗ trợ việc này.

00:08:56.000 --> 00:09:02.000
Trong ví dụ dưới đây, chúng tôi đã chỉ định rằng múi giờ là Giờ chuẩn Thái Bình Dương.

00:09:02.000 --> 00:09:07.000
Điều này rất quan trọng vì múi giờ của khách hàng của bạn có thể không khớp với múi giờ của chính sách hủy.

00:09:07.000 --> 00:09:14.000
Ví dụ, khi ai đó có trụ sở tại Vương quốc Anh, hãy đặt phòng khách sạn ở Hoa Kỳ.

00:09:14.000 --> 00:09:19.000
Khi làm việc với các khoản thanh toán trả chậm, đây là một số phương pháp hay nhất để làm theo.

00:09:19.000 --> 00:09:30.000
Như đã đề cập trước đó, nếu bạn cần mô tả chính sách hủy miễn phí, hãy xem xét cẩn thận ngày, giờ và múi giờ được cung cấp cho yêu cầu thanh toán trả chậm.

00:09:30.000 --> 00:09:36.000
Hãy nhớ bao gồm khoản thanh toán trả chậm trong các mục tóm tắt của bạn và đảm bảo bạn đặt tên người bán phù hợp.

00:09:36.000 --> 00:09:39.000
Điều này không được thực hiện cho bạn một cách tự động.

00:09:39.000 --> 00:09:44.000
Khi cung cấp một thỏa thuận thanh toán, hãy nhớ giữ nó ngắn gọn.

00:09:44.000 --> 00:09:53.000
Văn bản thỏa thuận thanh toán chỉ nên hoạt động như một bản tóm tắt các sự kiện chính cần xem xét và không nên thay thế bất kỳ thỏa thuận thanh toán hoặc pháp lý thông thường nào tại chỗ.

00:09:53.000 --> 00:10:03.000
Cuối cùng, chỉ định URL thông báo mã thông báo, vì vậy bạn có thể được cập nhật các sự kiện vòng đời của mã thông báo người bán Apple Pay nếu một sự kiện đã được phát hành.

00:10:03.000 --> 00:10:05.000
Và đó là các khoản thanh toán trả chậm.

00:10:05.000 --> 00:10:10.000
Tiếp theo, chúng ta hãy xem xét một cách hoàn toàn mới để chuyển tiền bằng Apple Pay.

00:10:10.000 --> 00:10:16.000
Theo truyền thống với Apple Pay, bảng thanh toán luôn có sẵn để người dùng nạp tiền vào tài khoản.

00:10:16.000 --> 00:10:22.000
Mới trong iOS 17, chúng tôi đang giới thiệu Chuyển tiền với Apple Pay.

00:10:22.000 --> 00:10:30.000
Điều này cung cấp khả năng cho người dùng chuyển từ tài khoản sang thẻ trong Ví của họ, hoàn thành vòng đời chuyển tiền.

00:10:30.000 --> 00:10:38.000
Điều này sử dụng cơ sở hạ tầng Apple Pay an toàn và riêng tư giống như thanh toán, có nghĩa là khách hàng sẽ rất quen thuộc với quy trình này.

00:10:38.000 --> 00:10:46.000
Một ví dụ mà việc chuyển tiền có ý nghĩa là cho phép khách hàng rút tiền từ tài khoản ngân hàng hoặc tài khoản giá trị được lưu trữ.

00:10:46.000 --> 00:10:55.000
Để hỗ trợ Chuyển tiền với Apple Pay, chúng tôi đã tạo ra một loại yêu cầu mới chỉ tập trung vào thông tin cần thiết cho việc chuyển tiền.

00:10:55.000 --> 00:11:01.000
Để sử dụng nó, bạn chỉ cần xác định số tiền bạn muốn được chuyển vào thẻ thanh toán của người dùng.

00:11:01.000 --> 00:11:06.000
Nếu bạn yêu cầu chi tiết liên lạc của người nhận, bạn cũng có thể yêu cầu những thứ này.

00:11:06.000 --> 00:11:12.000
Nếu bạn đã sử dụng PKPaymentRequest trước đây, API mới này sẽ cảm thấy rất quen thuộc với bạn.

00:11:12.000 --> 00:11:21.000
Bởi vì Chuyển tiền với Apple Pay hoạt động trên cùng một cơ sở hạ tầng như thanh toán, bạn sẽ cần đăng ký làm người bán trong cổng thông tin Nhà phát triển Apple.

00:11:21.000 --> 00:11:30.000
Để tìm hiểu thêm về cách đăng ký làm người bán và thiết lập để sử dụng Apple Pay, hãy xem Cuộc nói chuyện công nghệ "Thực hiện Apple Pay và quản lý đơn hàng" của chúng tôi.

00:11:30.000 --> 00:11:36.000
Để cung cấp cho bạn một minh họa về cách hoạt động của Chuyển tiền bằng Apple Pay, chúng ta hãy xem một ví dụ.

00:11:36.000 --> 00:11:42.000
Giả sử chúng tôi có một khách hàng, Andrew, người muốn rút tiền từ tài khoản của họ.

00:11:42.000 --> 00:11:47.000
Sử dụng Chuyển tiền với Apple Pay, chúng sẽ kích hoạt chuyển khoản từ bên trong ứng dụng của bạn.

00:11:47.000 --> 00:11:51.000
Ứng dụng của bạn sau đó tạo một yêu cầu, phác thảo số tiền sẽ được chuyển.

00:11:51.000 --> 00:11:59.000
Andrew sau đó sẽ được trình bày với bảng Apple Pay chi tiết về việc chuyển khoản, cho phép họ chọn thẻ mà họ có để nhận tiền.

00:11:59.000 --> 00:12:09.000
Khi Andrew xác thực chuyển khoản một cách an toàn, một tải trọng được mã hóa sẽ được tạo và trả lại cho ứng dụng của bạn, sẵn sàng để xử lý với nhà cung cấp thanh toán của bạn.

00:12:09.000 --> 00:12:13.000
Khi quá trình chuyển khoản đã được xử lý, ứng dụng của bạn sẽ trả lại kết quả cho Apple Pay.

00:12:13.000 --> 00:12:16.000
Nếu việc chuyển nhượng thành công, thế là xong.

00:12:16.000 --> 00:12:23.000
Nếu xảy ra lỗi, Andrew sẽ được thông báo và có thể thực hiện hành động khắc phục để khắc phục sự cố.

00:12:23.000 --> 00:12:30.000
Bây giờ chúng ta đã thấy tổng quan về cách chuyển tiền hoạt động, hãy xem cách triển khai nó trong ứng dụng của bạn.

00:12:30.000 --> 00:12:35.000
Trước tiên chúng ta cần xác định mạng và khả năng thẻ nào chúng ta muốn hỗ trợ.

00:12:35.000 --> 00:12:41.000
Tiếp theo, chúng tôi sẽ kiểm tra xem liệu người dùng có thẻ đủ điều kiện để bắt đầu chuyển tiền hay không.

00:12:41.000 --> 00:12:45.000
Điều này được thực hiện thông qua PKPaymentAuthorizationController.

00:12:45.000 --> 00:12:51.000
Sử dụng phương pháp hỗ trợ giải ngân, chúng tôi cung cấp các mạng và khả năng thẻ được xác định trước đó.

00:12:51.000 --> 00:12:56.000
Bạn có thể sử dụng kết quả kiểm tra này để điều chỉnh giao diện người dùng của mình khi thích hợp.

00:12:56.000 --> 00:13:00.000
Bây giờ chúng tôi đã kiểm tra tính đủ điều kiện, chúng tôi có thể bắt đầu xây dựng yêu cầu chuyển khoản của mình.

00:13:00.000 --> 00:13:05.000
Tương tự như các yêu cầu thanh toán, số tiền được xác định thông qua các mục tóm tắt.

00:13:05.000 --> 00:13:08.000
Trong trường hợp này, chúng tôi tạo ra hai mục tóm tắt khác nhau.

00:13:08.000 --> 00:13:12.000
Đầu tiên là PKPaymentSummaryItem.

00:13:12.000 --> 00:13:15.000
Điều này thể hiện số tiền được rút từ tài khoản của người dùng.

00:13:15.000 --> 00:13:21.000
Điều quan trọng cần lưu ý là nhãn liên quan đến mặt hàng, phải là tên doanh nghiệp của bạn.

00:13:21.000 --> 00:13:26.000
Mục thứ hai là một loại mục tóm tắt mới, một PKDisbursementSummaryItem.

00:13:26.000 --> 00:13:36.000
Bạn phải bao gồm một trong những thứ này và nó phải luôn đại diện cho số tiền cuối cùng nhận được vào thẻ thanh toán của người nhận, trừ bất kỳ khoản phí, lệ phí hoặc điều chỉnh nào.

00:13:36.000 --> 00:13:45.000
Trong khi đối với các khoản thanh toán, chúng tôi có PKPaymentRequest, chúng tôi có một loại yêu cầu mới cho Chuyển tiền với Apple Pay, PKDisbursementRequest.

00:13:45.000 --> 00:13:50.000
Để xây dựng PKDisbursementRequest, bạn cần chỉ định một số chi tiết nhất định.

00:13:50.000 --> 00:14:03.000
Nó yêu cầu mã định danh người bán mà bạn đã đặt khi đăng ký Apple Pay, đơn vị tiền tệ của giao dịch, khu vực kinh doanh của bạn, cũng như các mạng và khả năng được xác định trước đó.

00:14:03.000 --> 00:14:06.000
Bạn cũng cung cấp các mục tóm tắt mà bạn vừa tạo.

00:14:06.000 --> 00:14:12.000
Nếu bạn yêu cầu chi tiết liên hệ của người nhận chuyển khoản, bạn cũng có thể yêu cầu những chi tiết đó ở đây.

00:14:12.000 --> 00:14:17.000
Bạn cũng có thể giới hạn những khu vực mà thẻ thanh toán của người nhận đã được phát hành.

00:14:17.000 --> 00:14:21.000
Khi yêu cầu đã được xây dựng, bây giờ chúng tôi có thể trình bày nó cho người dùng.

00:14:21.000 --> 00:14:28.000
Chúng tôi làm điều này bằng cách khởi tạo một phiên bản của PKPaymentAuthorizationController với yêu cầu giải ngân của chúng tôi.

00:14:28.000 --> 00:14:33.000
Chúng tôi đặt mình làm đại biểu, và sau đó có mặt.

00:14:33.000 --> 00:14:42.000
Như có thể thấy ở đây, người dùng được cung cấp tùy chọn để chọn thẻ thanh toán mà họ muốn nhận chuyển khoản và số tiền họ sẽ nhận được vào thẻ đó.

00:14:42.000 --> 00:14:51.000
Bây giờ, một khi người dùng ủy quyền an toàn cho việc chuyển giao diễn ra, có một số cuộc gọi lại đại diện sẽ cần được thực hiện để xử lý việc chuyển giao.

00:14:51.000 --> 00:14:58.000
Chỉ có hai phương thức ủy quyền được yêu cầu thực hiện để xử lý Chuyển tiền bằng Apple Pay.

00:14:58.000 --> 00:15:02.000
Đầu tiên là paymentAuthorizationControllerDidFinish.

00:15:02.000 --> 00:15:05.000
Điều này sẽ được gọi khi trang tính sẵn sàng loại bỏ.

00:15:05.000 --> 00:15:09.000
Trách nhiệm thuộc về ứng dụng gọi điện để loại bỏ nó.

00:15:09.000 --> 00:15:14.000
Bạn cũng có thể sử dụng phương pháp này để thay đổi giao diện người dùng của ứng dụng của riêng bạn cho phù hợp.

00:15:14.000 --> 00:15:18.000
Thứ hai, là phương thức đại diện didAuthorizePayment.

00:15:18.000 --> 00:15:26.000
Bởi vì Chuyển tiền với Apple Pay sử dụng cơ sở hạ tầng giống như thanh toán, bạn sẽ nhận được cùng một loại đối tượng PKPayment để sử dụng để xử lý.

00:15:26.000 --> 00:15:33.000
Ở đây chúng tôi đã tóm tắt quá trình xử lý mã thông báo vào phương thức processFundsTransfer của riêng chúng tôi.

00:15:33.000 --> 00:15:40.000
Tùy thuộc vào kết quả xử lý, bạn sẽ trả lại thành công hoặc thất bại.

00:15:40.000 --> 00:15:46.000
Nếu trong giai đoạn xử lý gặp lỗi, chúng tôi đã cung cấp một bộ phương pháp thuận tiện để thể hiện những điều này.

00:15:46.000 --> 00:15:54.000
Bạn có thể sử dụng disbursementContactInvalidError khi có vấn đề liên quan đến thông tin liên hệ được cung cấp.

00:15:54.000 --> 00:16:03.000
Nếu bộ xử lý thanh toán của bạn xác định rằng thẻ thanh toán của người dùng không thể chấp nhận chuyển tiền, bạn có thể sử dụng disbursementCardUnsupportedError.

00:16:03.000 --> 00:16:10.000
Một số tổ chức tài chính hỗ trợ chuyển tiền tức thì, nơi tiền có thể được gửi đến người nhận nhanh hơn.

00:16:10.000 --> 00:16:14.000
Những thứ này cũng có thể được thể hiện bằng Chuyển tiền với Apple Pay.

00:16:14.000 --> 00:16:21.000
Tùy thuộc vào dịch vụ, những chuyển khoản tức thì này đôi khi có thể bao gồm phí, cũng có thể được đại diện.

00:16:21.000 --> 00:16:26.000
Thông thường, người dùng sẽ được lựa chọn tốc độ truyền trong ứng dụng của bạn.

00:16:26.000 --> 00:16:32.000
Khi người dùng chọn chuyển tiền ngay lập tức, hãy cung cấp khả năng yêu cầu hỗ trợ cho họ.

00:16:32.000 --> 00:16:40.000
Khi làm như vậy, sự lựa chọn thẻ của người dùng sẽ bị giới hạn ở những thẻ được biết là hỗ trợ chuyển khoản tức thì.

00:16:40.000 --> 00:16:44.000
Và đây là những gì chuyển khoản tức thì sẽ trông như thế nào.

00:16:44.000 --> 00:16:52.000
Tờ giấy trông rất giống với trước đây, nhưng bây giờ chúng tôi nhấn mạnh thực tế việc chuyển khoản là ngay lập tức, cũng như bất kỳ khoản phí nào mà người dùng sẽ phải trả.

00:16:52.000 --> 00:16:56.000
Số tiền chuyển cũng đã được điều chỉnh để tính đến phí.

00:16:56.000 --> 00:17:01.000
Hãy xem cách thực hiện yêu cầu chuyển khoản trước đó ngay lập tức.

00:17:01.000 --> 00:17:06.000
Đầu tiên, chúng tôi thêm instantFundsOut, vào danh sách các khả năng được hỗ trợ của chúng tôi.

00:17:06.000 --> 00:17:13.000
Sau đó, chúng tôi có thể kiểm tra trong supportDisbursements xem người dùng có bất kỳ thẻ nào hỗ trợ chuyển khoản tức thì hay không.

00:17:13.000 --> 00:17:18.000
Sau đó, bạn có thể điều chỉnh các tùy chọn phương thức chuyển và giao diện người dùng của mình cho phù hợp.

00:17:18.000 --> 00:17:27.000
Đối với các mục tóm tắt, chúng tôi có một mục chuyên dụng để đại diện cho phí chuyển khoản tức thì, PKInstantFundsOutFeeSummaryItem.

00:17:27.000 --> 00:17:33.000
Với mặt hàng này, bạn chỉ định số tiền sẽ được tính cho mục đích thực hiện chuyển khoản tức thì.

00:17:33.000 --> 00:17:38.000
Ngay cả khi bạn không tính phí, mục tóm tắt này vẫn được yêu cầu.

00:17:38.000 --> 00:17:41.000
Trong trường hợp này, bạn sẽ đặt một số tiền bằng không.

00:17:41.000 --> 00:17:47.000
Bởi vì trong ví dụ này, chúng tôi đang tính phí, chúng tôi cần cập nhật số tiền giải ngân cho phù hợp.

00:17:47.000 --> 00:17:50.000
Điều này sẽ không được thực hiện tự động cho bạn.

00:17:50.000 --> 00:17:55.000
Tạo PKDisbursementRequest không quá khác so với trước đây.

00:17:55.000 --> 00:18:01.000
Sự khác biệt duy nhất là đảm bảo bạn cung cấp các khả năng và các mục tóm tắt được xác định trước đó.

00:18:01.000 --> 00:18:04.000
Và đó là tất cả những gì được yêu cầu để đại diện cho việc chuyển khoản ngay lập tức.

00:18:04.000 --> 00:18:10.000
Dưới đây là một số phương pháp hay nhất cần ghi nhớ khi triển khai Chuyển tiền với Apple Pay.

00:18:10.000 --> 00:18:19.000
Lưu ý rằng Chuyển tiền bằng Apple Pay chỉ khả dụng cho iOS và iPadOS và không khả dụng để sử dụng trên macOS hoặc web.

00:18:19.000 --> 00:18:29.000
Nếu xảy ra lỗi trong quá trình xử lý chuyển tiền, hãy sử dụng một trong những lỗi giải ngân chuyên dụng để thông báo điều này cho người dùng một cách hiệu quả.

00:18:29.000 --> 00:18:36.000
Điều quan trọng cần lưu ý là mục tóm tắt đầu tiên phải đại diện cho số tiền sẽ được rút từ tài khoản của người dùng.

00:18:36.000 --> 00:18:40.000
Nhãn của mục tóm tắt đầu tiên phải khớp với nhãn của doanh nghiệp bạn.

00:18:40.000 --> 00:18:49.000
Và mục tóm tắt cuối cùng phải đại diện cho số tiền sẽ nhận được bằng thẻ thanh toán của người dùng, trừ bất kỳ khoản phí, lệ phí hoặc điều chỉnh nào.

00:18:49.000 --> 00:18:53.000
Và đó là tất cả những gì chúng ta có hôm nay liên quan đến các khoản thanh toán.

00:18:53.000 --> 00:18:57.000
Để thay đổi bản nhạc một chút, hãy nói về Theo dõi Đơn hàng.

00:18:57.000 --> 00:19:04.000
Theo dõi đơn hàng đã được giới thiệu trong iOS 16 như một cách để người dùng theo dõi các đơn hàng được đặt với các thương gia tham gia.

00:19:04.000 --> 00:19:10.000
Phản hồi từ người dùng thật tuyệt vời và chúng tôi đã làm việc chăm chỉ để theo dõi đơn hàng trở nên tốt hơn.

00:19:10.000 --> 00:19:17.000
Chúng ta sẽ nói về cách chúng ta đã cải thiện sự tích hợp trong hệ điều hành để đại diện và truyền đạt đơn đặt hàng tốt hơn.

00:19:17.000 --> 00:19:20.000
Sau đó, chúng tôi sẽ trải qua một số cải tiến mà chúng tôi đã thực hiện để Theo dõi đơn hàng.

00:19:20.000 --> 00:19:26.000
Và cuối cùng, chúng tôi đang giới thiệu những cách mới để thêm Đơn đặt hàng vào Ví.

00:19:26.000 --> 00:19:37.000
Trong iOS 16.4, chúng tôi đã thêm hỗ trợ chia sẻ đơn hàng thông qua Tin nhắn, cung cấp bản xem trước nội tuyến của đơn hàng và khả năng người nhận theo dõi đơn hàng trong Wallet.

00:19:37.000 --> 00:19:43.000
Chúng tôi cũng đã giới thiệu một tiện ích Theo dõi Đơn hàng, nơi người dùng có thể theo dõi các đơn hàng trong nháy mắt.

00:19:43.000 --> 00:19:48.000
Người dùng đã có thể hưởng lợi từ những tính năng mới này mà không cần bất kỳ công việc bổ sung nào.

00:19:48.000 --> 00:19:53.000
Chúng tôi đang tiếp tục tích hợp hệ thống trong iOS 17 với sự hỗ trợ cho Bản đồ.

00:19:53.000 --> 00:20:02.000
Nếu người dùng đang theo dõi đơn hàng với thời gian và địa điểm nhận hàng được chỉ định, Maps sẽ chủ động đề xuất nó thông qua Đề xuất của Siri.

00:20:02.000 --> 00:20:08.000
Bây giờ chúng ta hãy xem xét một số cải tiến mà chúng tôi đã thực hiện để Theo dõi đơn hàng trong iOS 17.

00:20:08.000 --> 00:20:14.000
Để hỗ trợ tốt hơn cho các trường hợp sử dụng chuyển phát nhanh và giao đồ ăn, bây giờ bạn có thể chỉ ra loại vận chuyển đang được sử dụng.

00:20:14.000 --> 00:20:21.000
Thông qua thuộc tính shippingType mới, bạn có thể tuyên bố liệu một đơn hàng đang được vận chuyển hay giao hàng.

00:20:21.000 --> 00:20:27.000
Bây giờ chúng tôi có hỗ trợ tốt hơn cho các ứng dụng liên quan, bao gồm các ứng dụng doanh nghiệp.

00:20:27.000 --> 00:20:36.000
Bằng cách khai báo số nhận dạng ứng dụng liên quan của bạn, bạn có thể cải thiện việc quản lý thông báo đơn hàng giữa ứng dụng của mình và Theo dõi đơn hàng.

00:20:36.000 --> 00:20:45.000
Ngoài ra, chúng tôi hỗ trợ số nhận dạng trang sản phẩm tùy chỉnh, cho phép liên kết sâu đến trang sản phẩm App Store của bạn phù hợp nhất với lưu lượng truy cập Wallet.

00:20:45.000 --> 00:20:50.000
Cuối cùng, chúng tôi đang giới thiệu những cách mới để thể hiện thông tin thanh toán.

00:20:50.000 --> 00:20:59.000
Các gói đặt hàng hiện hỗ trợ một loạt các giao dịch được liên kết với nó, với mỗi giao dịch có thông tin chi tiết riêng, chẳng hạn như phương thức thanh toán và số tiền.

00:20:59.000 --> 00:21:04.000
Bạn cũng có thể đính kèm các tệp biên lai vào các giao dịch, để khách hàng của bạn có hồ sơ thanh toán.

00:21:04.000 --> 00:21:10.000
Tệp biên lai này có thể là PDF hoặc hình ảnh như JPEG hoặc PNG.

00:21:10.000 --> 00:21:17.000
Hãy nhớ rằng các gói đặt hàng có kích thước giới hạn, vì vậy hãy quan tâm đến kích thước của các tệp biên lai mà bạn đưa vào.

00:21:17.000 --> 00:21:22.000
Bây giờ bạn cũng có thể mô tả liệu một giao dịch là để mua hàng hay hoàn lại tiền.

00:21:22.000 --> 00:21:27.000
Với iOS 17, việc thêm Đơn đặt hàng vào Wallet chưa bao giờ đơn giản hơn thế.

00:21:27.000 --> 00:21:32.000
Bây giờ bạn có thể đính kèm các gói đơn hàng vào email, chẳng hạn như email xác nhận đơn hàng.

00:21:32.000 --> 00:21:37.000
Sau đó, người dùng sẽ có thể thêm đơn đặt hàng vào Wallet ngay lúc đó và ở đó.

00:21:37.000 --> 00:21:44.000
Ngoài ra, bạn cũng có thể thêm nút "Theo dõi bằng Ví Apple" trong các ứng dụng và trang web của mình.

00:21:44.000 --> 00:21:50.000
Chúng ta hãy xem API Theo dõi Đơn hàng mới hỗ trợ thêm đơn hàng vào Ví.

00:21:50.000 --> 00:21:56.000
API này được bao gồm trong hai khuôn khổ mới, FinanceKit và FinanceKitUI.

00:21:56.000 --> 00:22:02.000
Hai khung độc quyền Swift này sẽ cho phép các nhà phát triển xử lý dữ liệu đơn hàng trong Wallet.

00:22:02.000 --> 00:22:11.000
Quyền truy cập vào thông tin đơn hàng đạt được thông qua một phiên bản được chia sẻ của FinanceStore, cung cấp một tài nguyên trung tâm để xử lý các truy vấn theo dõi đơn hàng.

00:22:11.000 --> 00:22:18.000
Với API này, bạn sẽ có thể kiểm tra sự tồn tại của một đơn đặt hàng, cũng như một cách để thêm hoặc cập nhật một đơn đặt hàng.

00:22:18.000 --> 00:22:22.000
Hãy xem cách bạn kiểm tra một đơn đặt hàng hiện có.

00:22:22.000 --> 00:22:30.000
Trước tiên, bạn truy vấn FinanceStore để kiểm tra xem nó có chứa đơn hàng có mã định danh đơn hàng đủ điều kiện hay không.

00:22:30.000 --> 00:22:35.000
Sau đó, bạn sẽ nhận được một trong hai câu trả lời, hoặc nó tồn tại hoặc nó chưa được tìm thấy.

00:22:35.000 --> 00:22:38.000
Sau đó bạn có thể trả lời trong ứng dụng của mình nếu thích hợp.

00:22:38.000 --> 00:22:40.000
Nó đơn giản như vậy.

00:22:40.000 --> 00:22:44.000
Nếu bạn muốn thêm hoặc cập nhật đơn hàng, bạn có thể làm điều này theo một trong hai cách.

00:22:44.000 --> 00:22:48.000
Đầu tiên chúng tôi sẽ chỉ ra cách bạn sử dụng FinanceKit để làm điều này.

00:22:48.000 --> 00:22:54.000
Trước tiên, bạn sẽ cần tuần tự hóa dữ liệu của gói đơn đặt hàng đã ký mà bạn muốn thêm vào Wallet.

00:22:54.000 --> 00:22:58.000
Sau đó bạn cung cấp cái này cho phương thức đặt hàng lưu của FinanceStore.

00:22:58.000 --> 00:23:05.000
Khi bạn làm điều này, một màn hình được hiển thị cho người dùng để xác minh nội dung của đơn đặt hàng và liệu họ có muốn theo dõi nó trong Wallet hay không.

00:23:05.000 --> 00:23:13.000
Khi người dùng đã xác nhận hoặc từ chối yêu cầu, bạn sẽ nhận được kết quả không đồng bộ và có thể có ba biểu mẫu.

00:23:13.000 --> 00:23:20.000
Hoặc là họ đã thêm đơn đặt hàng vào Wallet, họ đã hủy yêu cầu hoặc một đơn đặt hàng mới hơn đã tồn tại.

00:23:20.000 --> 00:23:24.000
Nếu ứng dụng của bạn được viết bằng SwiftUI, bạn có thể sử dụng FinanceKitUI.

00:23:24.000 --> 00:23:32.000
Điều này cung cấp một nút "Theo dõi bằng Ví Apple" chuyên dụng và cho phép bạn xử lý kết quả của việc thêm đơn đặt hàng.

00:23:32.000 --> 00:23:38.000
Giống như với FinanceKit, trước tiên bạn sẽ cần một phiên bản tuần tự hóa của gói đơn đặt hàng đã ký của mình.

00:23:38.000 --> 00:23:42.000
Sau đó, bạn bao gồm AddOrderToWalletButton trong tầm nhìn của mình.

00:23:42.000 --> 00:23:48.000
Khi người dùng chọn nút này, họ sẽ được cung cấp khả năng thêm đơn đặt hàng vào Ví của họ.

00:23:48.000 --> 00:23:53.000
Sau đó, bạn có thể trả lời ba trạng thái kết quả, giống như trước đây.

00:23:53.000 --> 00:24:00.000
Đối với những người bán muốn hỗ trợ khách hàng theo dõi đơn hàng trên web, chúng tôi cung cấp phiên bản của nút này trong JavaScript SDK.

00:24:00.000 --> 00:24:06.000
Để sử dụng cái này, bạn chèn một nút ví táo và định cấu hình nó bằng cách sử dụng các thuộc tính.

00:24:06.000 --> 00:24:10.000
Loại nút nên được đặt thành theo dõi thứ tự.

00:24:10.000 --> 00:24:18.000
Khi sử dụng nút này, điều quan trọng là phải đặt lệnh gọi lại onClick để trỏ đến vị trí của gói đơn đặt hàng đã ký mà bạn muốn thêm.

00:24:18.000 --> 00:24:20.000
Và đó là những gì chúng tôi có cho bạn hôm nay trên Theo dõi Đơn hàng.

00:24:20.000 --> 00:24:25.000
Chúng tôi nóng lòng chờ bạn áp dụng các API mới này trong các ứng dụng và dịch vụ của mình.

00:24:25.000 --> 00:24:34.000
Và bây giờ đối với một cái gì đó hoàn toàn khác, chúng tôi có một số cập nhật thú vị để chia sẻ về Danh tính, và vì điều đó, tôi sẽ bàn giao cho Jon.

00:24:34.000 --> 00:24:37.000
Jon: Cảm ơn, David. Xin chào lần nữa.

00:24:37.000 --> 00:24:40.000
Tôi là Jon, một kỹ sư trong nhóm Apple Pay và Wallet.

00:24:40.000 --> 00:24:47.000
Tôi rất hào hứng khi nói về chức năng mới mà chúng tôi đã thêm cho Identity trong iOS 17.

00:24:47.000 --> 00:24:59.000
Chúng tôi đã giới thiệu ID trong Wallet trong iOS 15.4, cho phép người dùng ở các tiểu bang được hỗ trợ của Hoa Kỳ thêm bằng lái xe hoặc ID tiểu bang của họ vào Wallet.

00:24:59.000 --> 00:25:03.000
Năm ngoái, chúng tôi đã giới thiệu Xác minh bằng Ví.

00:25:03.000 --> 00:25:13.000
Với API này, các doanh nghiệp có thể hợp lý hóa các luồng giới thiệu và xác minh tài khoản của họ bằng cách yêu cầu thông tin từ ID của người dùng được lưu trữ trong Ví Apple.

00:25:13.000 --> 00:25:21.000
Năm nay, trong iOS 17, chúng tôi giới thiệu Tap to Present ID trên iPhone.

00:25:21.000 --> 00:25:31.000
Với API này, các ứng dụng của bạn có thể xác minh ID một cách liền mạch và an toàn trong Wallet hoặc các giấy phép lái xe di động khác chỉ bằng iPhone của bạn.

00:25:31.000 --> 00:25:40.000
Điều này được xây dựng dựa trên Tap to Pay trên iPhone API, mà chúng tôi đã thêm vào khung ProximityReader trong iOS 15.4.

00:25:40.000 --> 00:25:51.000
Nhấn vào Thanh toán trên iPhone cung cấp một cách an toàn, riêng tư và dễ dàng để chấp nhận thanh toán không tiếp xúc mà không cần thêm phần cứng hoặc thiết bị đầu cuối thanh toán.

00:25:51.000 --> 00:25:55.000
Bây giờ, chúng ta hãy xem Tap to Present ID đang hoạt động.

00:25:55.000 --> 00:26:01.000
Giả sử tôi làm việc cho Spaceship Rentals và David muốn thuê một chiếc tàu vũ trụ từ chúng tôi.

00:26:01.000 --> 00:26:10.000
Anh ấy cần ít nhất 21 tuổi để làm điều này, vì vậy tôi sẽ thực hiện xác minh độ tuổi bằng cách sử dụng Tap to Present ID.

00:26:10.000 --> 00:26:15.000
Đầu tiên, ứng dụng Spaceship Rentals gọi Tap to Present ID.

00:26:15.000 --> 00:26:24.000
iPhone của tôi sẽ hiển thị tên doanh nghiệp, logo và loại yêu cầu đang được thực hiện, trong trường hợp này là bằng chứng về tuổi tác.

00:26:24.000 --> 00:26:29.000
Bây giờ tôi sẽ mời David giữ chiếc iPhone của anh ấy gần tôi.

00:26:29.000 --> 00:26:36.000
David: iPhone của tôi hiện đang hiển thị một tờ chấp thuận mà tôi có thể xem lại.

00:26:36.000 --> 00:26:43.000
Tôi có thể thấy rằng tôi đang xuất trình ID của mình cho Spaceship Rentals và họ đang yêu cầu ảnh ID của tôi và liệu tôi có trên 21 tuổi hay không.

00:26:43.000 --> 00:26:49.000
Tôi sẵn sàng trình bày thông tin này, vì vậy tôi sẽ nhấp đúp và xác nhận bằng Face ID.

00:26:49.000 --> 00:26:56.000
Jon: iPhone của tôi hiện hiển thị thông tin mà David đã trình bày.

00:26:56.000 --> 00:27:01.000
Tôi thấy rằng anh ấy khớp với ảnh ID của mình và anh ấy trên 21 tuổi.

00:27:01.000 --> 00:27:05.000
Vì vậy, bây giờ anh ấy đã sẵn sàng để cất cánh.

00:27:05.000 --> 00:27:10.000
Tôi vừa xác minh thành công ID của David bằng cách sử dụng Tap to Present ID API.

00:27:10.000 --> 00:27:16.000
Trải nghiệm này mang lại một số lợi ích chính so với việc kiểm tra ID vật lý.

00:27:16.000 --> 00:27:20.000
Đầu tiên, bản thân thông tin ID đã được xác minh.

00:27:20.000 --> 00:27:34.000
Không giống như ID vật lý, dễ bị giả mạo, giấy phép lái xe di động được ký bằng mật mã bởi cơ quan cấp và iOS xác minh chữ ký, vì vậy bạn có thể tin tưởng vào phản hồi.

00:27:34.000 --> 00:27:38.000
Thứ hai, trải nghiệm là không dây và an toàn.

00:27:38.000 --> 00:27:49.000
David không cần phải giao iPhone của anh ấy cho tôi hoặc thậm chí mở khóa nó, và dữ liệu đã được gửi an toàn bằng NFC và Bluetooth.

00:27:49.000 --> 00:27:53.000
Cuối cùng, đây là một cách riêng tư hơn để xác minh ID.

00:27:53.000 --> 00:28:01.000
David chỉ cần chia sẻ thông tin cần thiết để xác minh tuổi của mình, không giống như ID vật lý, nơi mọi thứ được chia sẻ.

00:28:01.000 --> 00:28:06.000
Hãy nói về các loại yêu cầu bạn có thể thực hiện với API này.

00:28:06.000 --> 00:28:08.000
Chúng tôi vừa giới thiệu yêu cầu hiển thị.

00:28:08.000 --> 00:28:13.000
Điều này phù hợp khi bạn cần xác minh tên hoặc tuổi của một người.

00:28:13.000 --> 00:28:20.000
Kết quả được hiển thị trong giao diện người dùng hệ thống và không có thông tin ID nào được trả lại cho ứng dụng của bạn.

00:28:20.000 --> 00:28:23.000
API cũng hỗ trợ các yêu cầu dữ liệu.

00:28:23.000 --> 00:28:35.000
Những thứ này có thể yêu cầu một bộ phần tử tài liệu rộng hơn, chẳng hạn như địa chỉ, ngày sinh và đặc quyền lái xe và kết quả sẽ được trả lại cho ứng dụng của bạn để xử lý.

00:28:35.000 --> 00:28:40.000
Để thực hiện các yêu cầu dữ liệu, ứng dụng của bạn sẽ cần một quyền bổ sung.

00:28:40.000 --> 00:28:44.000
Kiểm tra tài liệu để biết thêm thông tin.

00:28:44.000 --> 00:28:52.000
Bây giờ, chúng ta hãy xem cách triển khai điều này trong mã, bắt đầu với yêu cầu hiển thị.

00:28:52.000 --> 00:29:01.000
Đầu tiên, sử dụng thuộc tính lớp isSupported trên MobileDocumentReader để kiểm tra xem thiết bị hiện tại có hỗ trợ API này hay không.

00:29:01.000 --> 00:29:07.000
Nếu có, hãy khởi tạo một đối tượng trình đọc và gọi phương thức chuẩn bị của nó.

00:29:07.000 --> 00:29:11.000
Điều này sẽ trả về một đối tượng MobileDocumentReaderSession.

00:29:11.000 --> 00:29:17.000
Tiếp theo, tạo yêu cầu hiển thị bằng lái xe với các yếu tố bạn muốn xác minh.

00:29:17.000 --> 00:29:24.000
Ở đây, tôi đang xác minh xem người có bằng lái xe ít nhất 21 tuổi hay không.

00:29:24.000 --> 00:29:29.000
Sau đó gọi requestDocument trong phiên, chuyển yêu cầu.

00:29:29.000 --> 00:29:39.000
Giao diện người dùng của trình đọc sau đó sẽ được hiển thị, đầu tiên nhắc người giữ ID trình bày thiết bị của họ và sau đó hiển thị kết quả của yêu cầu.

00:29:39.000 --> 00:29:46.000
Hãy nhớ rằng, vì đây là một yêu cầu hiển thị, không có gì được trả về từ phương thức requestDocument.

00:29:46.000 --> 00:29:52.000
Và chỉ với một vài dòng mã, bạn đã thêm khả năng đọc tài liệu di động vào ứng dụng của mình.

00:29:52.000 --> 00:30:00.000
Theo mặc định, tên và logo thương hiệu của bạn không được hiển thị trên đầu đọc iPhone hoặc thiết bị của chủ sở hữu ID.

00:30:00.000 --> 00:30:06.000
Tuy nhiên, nếu bạn muốn hiển thị thông tin thương hiệu của mình trong quá trình yêu cầu tài liệu, bạn có thể.

00:30:06.000 --> 00:30:12.000
Điều này có thể được cấu hình thông qua Apple Business Register và với một vài dòng mã nữa.

00:30:12.000 --> 00:30:20.000
Để hiển thị thông tin thương hiệu của bạn trong quá trình yêu cầu tài liệu, bạn sẽ cần chuyển mã thông báo người đọc khi chuẩn bị thiết bị của mình.

00:30:20.000 --> 00:30:24.000
Bạn sẽ cần tạo mã thông báo này trên máy chủ của mình.

00:30:24.000 --> 00:30:32.000
Mã thông báo người đọc là JWT, được ký bằng một cặp khóa mà bạn đã định cấu hình thông qua Apple Business Register.

00:30:32.000 --> 00:30:40.000
Máy chủ của bạn sẽ tạo mã thông báo người đọc với ID thương hiệu, ID khóa và mã định danh phiên bản người đọc của bạn.

00:30:40.000 --> 00:30:50.000
Thương hiệu và ID khóa có thể được lấy thông qua Apple Business Register và giống nhau trên tất cả các trường hợp ứng dụng của bạn.

00:30:50.000 --> 00:30:55.000
Ứng dụng của bạn sẽ cung cấp mã định danh phiên bản trình đọc cho máy chủ của bạn.

00:30:55.000 --> 00:31:08.000
Quay lại mã, ứng dụng của bạn sẽ tìm nạp mã định danh phiên bản trình đọc từ đối tượng cấu hình của MobileDocumentReader và gửi nó đến máy chủ của bạn để đổi lấy mã thông báo trình đọc.

00:31:08.000 --> 00:31:13.000
Chuyển mã thông báo này vào phương pháp chuẩn bị để có được phiên đọc.

00:31:13.000 --> 00:31:19.000
Sau đó tạo một yêu cầu và gọi requestDocument giống như trước đây.

00:31:19.000 --> 00:31:26.000
Và bây giờ tên và logo thương hiệu của bạn sẽ được hiển thị trên cả iPhone đầu đọc và thiết bị của chủ sở hữu ID.

00:31:26.000 --> 00:31:29.000
Và điều đó bao gồm yêu cầu hiển thị.

00:31:29.000 --> 00:31:37.000
Cho đến nay, chúng tôi đã xem xét cách chuẩn bị phiên, yêu cầu tài liệu và cách sử dụng mã thông báo người đọc để hiển thị thông tin thương hiệu của bạn.

00:31:37.000 --> 00:31:41.000
Bây giờ hãy xem cách thực hiện yêu cầu dữ liệu.

00:31:41.000 --> 00:31:51.000
Những yêu cầu này hỗ trợ phạm vi rộng hơn của các phần tử tài liệu và API trả lại kết quả cho ứng dụng của bạn, thay vì chỉ hiển thị nó.

00:31:51.000 --> 00:31:59.000
Để sử dụng loại yêu cầu này, trước tiên bạn sẽ cần chuẩn bị thiết bị của mình bằng mã thông báo trình đọc, giống như trước đây.

00:31:59.000 --> 00:32:11.000
Sau đó tạo yêu cầu dữ liệu bằng lái xe, chỉ định các yếu tố tài liệu được yêu cầu và liệu bạn có ý định giữ lại thông tin hay không.

00:32:11.000 --> 00:32:21.000
Gọi requestDocument sẽ hiển thị giao diện người đọc giống như với yêu cầu hiển thị, nhưng khi quá trình đọc hoàn tất, giao diện người dùng sẽ tự động bị loại bỏ.

00:32:21.000 --> 00:32:26.000
Phản hồi sau đó được trả lại cho ứng dụng của bạn để xử lý.

00:32:26.000 --> 00:32:33.000
Và đó là Tap to Present ID trên iPhone, một API mới thú vị mà chúng tôi đã thêm vào khung ProximityReader.

00:32:33.000 --> 00:32:36.000
Và bây giờ, quay lại với David.

00:32:36.000 --> 00:32:39.000
David: Cảm ơn Jon! Vậy hôm nay chúng ta đã học được gì?

00:32:39.000 --> 00:32:45.000
Chúng tôi đã xem xét các cải tiến đối với thanh toán với sự hỗ trợ cho Apple Pay Later và các trường hợp sử dụng mới.

00:32:45.000 --> 00:32:57.000
Các API mới của Order Tracking cho phép bạn thêm Orders vào Wallet từ bên trong các ứng dụng và dịch vụ của mình và có một cách mới để xác minh giấy phép lái xe di động bằng Tap to Present ID trên iPhone.

00:32:57.000 --> 00:33:02.000
Để kết thúc, nếu bạn là một doanh nghiệp, hãy cân nhắc đăng ký trên Apple Business Register.

00:33:02.000 --> 00:33:06.000
Điều này sẽ giúp làm phong phú thêm trải nghiệm Wallet và Apple Pay cho khách hàng của bạn.

00:33:06.000 --> 00:33:12.000
Bạn có thể truy cập diễn đàn Nhà phát triển Apple, nơi bạn có thể đặt câu hỏi và nhận trợ giúp quanh năm.

00:33:12.000 --> 00:33:16.000
Và cuối cùng, nếu bạn có bất kỳ phản hồi nào, chúng tôi rất muốn nghe ý kiến của bạn.

00:33:16.000 --> 00:33:19.000
Bạn có thể làm điều này bằng cách sử dụng Trợ lý Phản hồi.

00:33:19.000 --> 00:33:22.000
Và thế là xong. Chúng tôi hy vọng bạn thích buổi học này.

00:33:22.000 --> 00:33:23.000
Cả hai: Cảm ơn vì đã xem.

00:33:23.000 --> 23:59:59.000
♪ ♪

