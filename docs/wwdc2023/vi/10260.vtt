WEBVTT

00:00:00.000 --> 00:00:04.000
♪ Hip-hop nhạc cụ êm dịu ♪

00:00:04.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
Jim Tilander: Xin chào, tôi là Jim, một kỹ sư trong nhóm RealityKit.

00:00:14.000 --> 00:00:22.000
Hôm nay, đồng nghiệp Christopher của tôi từ nhóm ARKit sẽ cùng tôi hướng dẫn bạn cách bắt đầu xây dựng các ứng dụng cho điện toán không gian.

00:00:22.000 --> 00:00:23.000
Hãy đi sâu vào!

00:00:23.000 --> 00:00:28.000
Chúng tôi rất hào hứng với nền tảng mới của chúng tôi cho điện toán không gian.

00:00:28.000 --> 00:00:35.000
Nền tảng này được xây dựng trên nền tảng quen thuộc để mọi người sử dụng và để bạn phát triển ứng dụng.

00:00:35.000 --> 00:00:55.000
Nó mở ra những khả năng mới và thú vị để kết hợp nội dung thực và ảo, cũng như sử dụng đầu vào tự nhiên để tương tác với ứng dụng của bạn - và toàn bộ hệ thống đã được thiết kế để bảo vệ quyền riêng tư của mọi người, giúp bạn yên tâm khi tập trung vào trải nghiệm ứng dụng của mình.

00:00:55.000 --> 00:01:02.000
Hãy nói một chút về các nguyên tắc cơ bản để xây dựng vốn từ vựng và khái niệm của chúng ta về điện toán không gian.

00:01:02.000 --> 00:01:07.000
Sau đó, chúng tôi sẽ xem xét các cách khác nhau để bắt đầu với ứng dụng của bạn.

00:01:07.000 --> 00:01:16.000
Sau đó, đồng nghiệp Christopher của tôi sẽ hướng dẫn chúng tôi cách xây dựng ứng dụng của bạn, đi sâu hơn vào các chi tiết của điện toán không gian.

00:01:16.000 --> 00:01:19.000
Bây giờ, chúng ta hãy xem xét một số nguyên tắc cơ bản.

00:01:19.000 --> 00:01:27.000
Trước tiên hãy đề cập đến ý nghĩa của cả khái niệm giao diện người dùng quen thuộc và mới trong điện toán không gian.

00:01:27.000 --> 00:01:31.000
Theo mặc định, các ứng dụng khởi chạy vào Không gian Chia sẻ.

00:01:31.000 --> 00:01:36.000
Đây là nơi các ứng dụng tồn tại song song, giống như nhiều ứng dụng trên máy tính để bàn Mac.

00:01:36.000 --> 00:01:41.000
Mọi người vẫn kết nối với môi trường xung quanh thông qua đường chuyền.

00:01:41.000 --> 00:01:44.000
Mỗi ứng dụng có thể có một hoặc nhiều cửa sổ.

00:01:44.000 --> 00:01:51.000
Đây là những cảnh SwiftUI có thể được thay đổi kích thước và điều chỉnh lại như bạn mong đợi ở một cửa sổ macOS bình thường.

00:01:51.000 --> 00:02:01.000
Chúng có thể chứa các chế độ xem và điều khiển truyền thống, cũng như nội dung 3D, cho phép bạn trộn và kết hợp 2D và 3D.

00:02:01.000 --> 00:02:07.000
Mọi người có thể định vị lại một cửa sổ theo ý thích của họ trong không gian hiện tại của họ, giống như người ta có thể mong đợi.

00:02:07.000 --> 00:02:14.000
Khối lượng cho phép một ứng dụng hiển thị nội dung 3D trong các giới hạn xác định, chia sẻ không gian với các ứng dụng khác.

00:02:14.000 --> 00:02:19.000
Khối lượng rất tuyệt vời để trưng bày nội dung 3D, ví dụ, một bàn cờ.

00:02:19.000 --> 00:02:24.000
Mọi người có thể định vị lại khối lượng trong không gian và chúng có thể được xem từ các góc độ khác nhau.

00:02:24.000 --> 00:02:36.000
Khối lượng là các cảnh SwiftUI, cho phép bạn bố cục theo những cách quen thuộc và chúng sử dụng sức mạnh của RealityKit để hiển thị nội dung 3D của bạn.

00:02:36.000 --> 00:02:47.000
Đôi khi bạn có thể muốn kiểm soát nhiều hơn mức độ đắm chìm trong ứng dụng của mình... có thể là tập trung trong khi xem video hoặc chơi trò chơi.

00:02:47.000 --> 00:02:57.000
Bạn có thể làm điều này bằng cách mở một Không gian đầy đủ chuyên dụng, nơi các cửa sổ, khối lượng và đối tượng 3D của ứng dụng của bạn là những thứ duy nhất xuất hiện trên chế độ xem.

00:02:57.000 --> 00:03:02.000
Trong một không gian đầy đủ, bạn cũng có thể tận dụng các API của ARKit.

00:03:02.000 --> 00:03:14.000
Ví dụ, ngoài các cử chỉ do hệ thống cung cấp, bạn có thể nhận được Theo dõi bàn tay xương chi tiết hơn để thực sự kết hợp cấu trúc bàn tay của mọi người vào trải nghiệm của bạn.

00:03:14.000 --> 00:03:18.000
Ứng dụng của bạn có thể sử dụng Full Space theo nhiều cách khác nhau.

00:03:18.000 --> 00:03:25.000
Bạn có thể sử dụng nội dung chuyển tiếp đến mặt đất trong thế giới thực và giữ cho mọi người kết nối với môi trường xung quanh.

00:03:25.000 --> 00:03:44.000
Và khi bạn phát Âm thanh Không gian và kết xuất 3D thông qua RealityKit, bạn sẽ tự động tận dụng thực tế là thiết bị sẽ liên tục cập nhật sự hiểu biết về căn phòng để pha trộn hình ảnh và âm thanh vào môi trường xung quanh mọi người, khiến họ cảm thấy rằng những vật thể ảo này thực sự thuộc về phòng của họ.

00:03:44.000 --> 00:03:51.000
Bạn cũng có thể chọn kết xuất thành một không gian hoàn toàn đắm chìm để lấp đầy toàn bộ trường nhìn.

00:03:51.000 --> 00:04:05.000
Điều này cho phép ứng dụng của bạn linh hoạt để cung cấp mục đích sáng tạo của ứng dụng của bạn bằng cách tùy chỉnh ánh sáng của các đối tượng ảo, cũng như khả năng chọn các đặc điểm âm thanh.

00:04:05.000 --> 00:04:11.000
Đây là những yếu tố nền tảng của điện toán không gian: cửa sổ, khối lượng và không gian.

00:04:11.000 --> 00:04:17.000
Họ cung cấp cho bạn một bộ công cụ linh hoạt để xây dựng các ứng dụng có thể kéo dài sự đắm chìm liên tục.

00:04:17.000 --> 00:04:20.000
Christopher sẽ nói nhiều hơn về điều này sau.

00:04:20.000 --> 00:04:30.000
Bây giờ chúng ta đã giới thiệu các yếu tố nền tảng của điện toán không gian, hãy khám phá những cách chúng ta có thể tương tác với cửa sổ, khối lượng và không gian.

00:04:30.000 --> 00:04:36.000
Trên nền tảng này, chúng ta có thể tương tác với các ứng dụng chỉ bằng cách sử dụng mắt và tay.

00:04:36.000 --> 00:04:43.000
Ví dụ, mọi người có thể tương tác với một nút bằng cách nhìn vào nó và chạm vào các ngón tay của họ với nhau để chọn.

00:04:43.000 --> 00:04:49.000
Mọi người cũng có thể tiếp cận và chạm vào cùng một nút trong không gian 3D.

00:04:49.000 --> 00:05:02.000
Đối với cả hai loại tương tác này, có nhiều cử chỉ có thể thực hiện được, như chạm, nhấn lâu, kéo, xoay, phóng to và nhiều hơn nữa.

00:05:02.000 --> 00:05:09.000
Hệ thống tự động phát hiện những thứ này và tạo ra các sự kiện cảm ứng để ứng dụng của bạn phản hồi.

00:05:09.000 --> 00:05:12.000
Các cử chỉ được tích hợp tốt với SwiftUI.

00:05:12.000 --> 00:05:17.000
Cùng một cử chỉ API hoạt động liền mạch với các thực thể RealityKit.

00:05:17.000 --> 00:05:23.000
Điều này cho phép mọi người dễ dàng tương tác trực tiếp với các yếu tố cảnh 3D của bạn.

00:05:23.000 --> 00:05:36.000
Ví dụ, điều này có thể hữu ích khi đặt cờ trực tiếp lên mô hình 3D này, hoặc tưởng tượng điều khiển khóa kéo ảo hoặc có lẽ bạn muốn tương tác và nhặt các quân cờ ảo.

00:05:36.000 --> 00:05:45.000
Bây giờ nếu bạn muốn chơi bowling hoặc biến bàn tay của mọi người thành một câu lạc bộ ảo, bạn có thể làm điều này thông qua Theo dõi bàn tay xương của ARKit.

00:05:45.000 --> 00:05:54.000
Ở đây chúng ta có thể thấy một ví dụ về cách bạn có thể xếp các hình khối trên bàn bằng cách sử dụng vòi và sau đó đập chúng lên bàn bằng tay của bạn.

00:05:54.000 --> 00:05:59.000
Đây là một cách mạnh mẽ mà bạn có thể đưa đầu vào tay dành riêng cho ứng dụng vào trải nghiệm.

00:05:59.000 --> 00:06:15.000
Và cuối cùng, hệ thống tự động đưa đầu vào từ bàn phím không dây, bàn di chuột và phần cứng trợ năng ngay vào ứng dụng của bạn và khung Bộ điều khiển trò chơi cũng cho phép bạn thêm hỗ trợ cho bộ điều khiển trò chơi không dây.

00:06:15.000 --> 00:06:20.000
Cộng tác và khám phá mọi thứ cùng nhau là một phần cơ bản của điện toán không gian.

00:06:20.000 --> 00:06:25.000
Chúng tôi làm điều này thông qua SharePlay và khuôn khổ Hoạt động Nhóm.

00:06:25.000 --> 00:06:32.000
Trên nền tảng này, như trên macOS, mọi người có thể chia sẻ bất kỳ cửa sổ nào, như trải nghiệm Xem nhanh này.

00:06:32.000 --> 00:06:45.000
Khi mọi người chia sẻ mô hình Quick Look 3D, chúng tôi đồng bộ hóa định hướng, tỷ lệ và hoạt ảnh giữa những người tham gia, giúp dễ dàng cộng tác khi ở các địa điểm khác nhau.

00:06:45.000 --> 00:06:56.000
Khi mọi người đang cộng tác trên một cái gì đó được hiển thị trong không gian của họ và họ chỉ vào vật lý, điều quan trọng là mọi người trong phiên SharePlay đều có cùng trải nghiệm.

00:06:56.000 --> 00:07:05.000
Điều này cho phép các tài liệu tham khảo tự nhiên như cử chỉ cho một vật thể và củng cố cảm giác ở bên nhau về thể chất.

00:07:05.000 --> 00:07:09.000
Chúng tôi đã thêm khái niệm về bối cảnh được chia sẻ vào hệ thống.

00:07:09.000 --> 00:07:20.000
Hệ thống quản lý bối cảnh được chia sẻ này cho bạn giúp đảm bảo rằng những người tham gia phiên SharePlay đều có thể trải nghiệm nội dung theo cùng một cách.

00:07:20.000 --> 00:07:27.000
Bạn có thể sử dụng Mẫu Nhân vật Không gian để tùy chỉnh thêm cách mọi người trải nghiệm nội dung của bạn.

00:07:27.000 --> 00:07:35.000
Để tìm hiểu thêm, hãy xem các phiên của chúng tôi về thiết kế và xây dựng trải nghiệm SharePlay không gian cho nền tảng này.

00:07:35.000 --> 00:07:45.000
Cho rằng thiết bị có rất nhiều kiến thức sâu sắc về môi trường xung quanh và con người, chúng tôi đã đưa ra rất nhiều kiến trúc để bảo vệ quyền riêng tư của mọi người.

00:07:45.000 --> 00:07:47.000
Hãy đi sâu vào điều đó.

00:07:47.000 --> 00:07:59.000
Quyền riêng tư là nguyên tắc cốt lõi để hướng dẫn thiết kế nền tảng này, đồng thời giúp bạn với tư cách là nhà phát triển dễ dàng tận dụng các API để tận dụng nhiều khả năng của thiết bị.

00:07:59.000 --> 00:08:10.000
Thay vì cho phép các ứng dụng truy cập dữ liệu trực tiếp từ các cảm biến, hệ thống sẽ làm điều đó cho bạn và cung cấp cho các ứng dụng các sự kiện và tín hiệu trực quan.

00:08:10.000 --> 00:08:19.000
Ví dụ, hệ thống biết vị trí mắt và cử chỉ của bàn tay ai đó trong không gian 3D và cung cấp điều đó dưới dạng các sự kiện cảm ứng.

00:08:19.000 --> 00:08:28.000
Ngoài ra, hệ thống sẽ hiển thị hiệu ứng di chuột trên chế độ xem khi nó là trọng tâm của sự chú ý nhưng không giao tiếp với ứng dụng nơi người đó đang tìm kiếm.

00:08:28.000 --> 00:08:35.000
Đối với nhiều tình huống, các hành vi do hệ thống cung cấp là đủ để ứng dụng của bạn phản hồi với các tương tác.

00:08:35.000 --> 00:08:44.000
Trong trường hợp bạn thực sự cần quyền truy cập vào thông tin nhạy cảm hơn, hệ thống sẽ yêu cầu mọi người cho phép họ trước.

00:08:44.000 --> 00:08:57.000
Một ví dụ sẽ là yêu cầu người dùng cho phép truy cập hiểu cảnh để phát hiện tường và đồ nội thất hoặc truy cập vào Skeletal Hand Tracking để mang các tương tác tùy chỉnh vào ứng dụng của bạn.

00:08:57.000 --> 00:09:05.000
Bây giờ chúng ta đã thấy một số khả năng có sẵn cho các ứng dụng, hãy chuyển sang khám phá cách chúng ta đang phát triển các ứng dụng đó.

00:09:05.000 --> 00:09:10.000
Mọi thứ bắt đầu với Xcode, môi trường phát triển tích hợp của Apple.

00:09:10.000 --> 00:09:23.000
Xcode cung cấp một bộ công cụ hoàn chỉnh để phát triển ứng dụng, bao gồm hỗ trợ quản lý dự án, trình chỉnh sửa trực quan cho giao diện người dùng của bạn, công cụ gỡ lỗi, Trình mô phỏng và hơn thế nữa.

00:09:23.000 --> 00:09:34.000
Và quan trọng nhất, Xcode cũng đi kèm với nền tảng SDK, cung cấp bộ khung và API hoàn chỉnh mà bạn sẽ sử dụng để phát triển ứng dụng của mình.

00:09:34.000 --> 00:09:41.000
Nếu tệp nguồn của bạn chứa nhà cung cấp bản xem trước SwiftUI, khung xem trước sẽ tự động mở trong Xcode.

00:09:41.000 --> 00:09:52.000
Khung xem trước đã được mở rộng để hỗ trợ 3D, cho phép bạn trực quan hóa mã RealityKit cho cảnh của mình, bao gồm hoạt ảnh và mã tùy chỉnh.

00:09:52.000 --> 00:10:03.000
Điều này cho phép thời gian lặp lại ngắn hơn, tìm giao diện phù hợp cho ứng dụng của bạn khi bạn chỉnh sửa mã trực tiếp và xem trực tiếp kết quả của các thay đổi và chỉnh sửa.

00:10:03.000 --> 00:10:11.000
Hãy thử nghiệm một chút ở đây với cách vệ tinh quay quanh Trái đất bằng cách thay đổi tốc độ quỹ đạo và kích thước của vệ tinh.

00:10:11.000 --> 00:10:20.000
Lưu ý rằng bản xem trước phản ánh các thay đổi của mã, giúp dễ dàng xem kết quả thử nghiệm nhanh trong mã.

00:10:20.000 --> 00:10:31.000
Xcode Previews cũng có chế độ đối tượng cho phép xem trước nhanh bố cục 3D - ví dụ: xem bố cục của bạn có phù hợp với giới hạn của chế độ xem hay không.

00:10:31.000 --> 00:10:39.000
Điều này thật tuyệt vời để xây dựng các cảnh tích hợp chặt chẽ với cả giao diện người dùng truyền thống và hình ảnh 3D mới.

00:10:39.000 --> 00:10:46.000
Xcode Preview cung cấp cho bạn một cách tuyệt vời để có được bố cục ngay trước khi bạn chạy ứng dụng của mình.

00:10:46.000 --> 00:10:50.000
Trình mô phỏng là một cách tuyệt vời để kiểm tra tính tương tác với ứng dụng của bạn.

00:10:50.000 --> 00:10:57.000
Bạn có thể di chuyển và nhìn xung quanh trong cảnh bằng bàn phím, chuột hoặc bộ điều khiển trò chơi tương thích.

00:10:57.000 --> 00:11:03.000
Và thật dễ dàng để tương tác với ứng dụng của bạn bằng cách sử dụng các cử chỉ hệ thống mô phỏng.

00:11:03.000 --> 00:11:10.000
Trình mô phỏng đi kèm với ba cảnh mô phỏng khác nhau, mỗi cảnh có ánh sáng ngày và đêm.

00:11:10.000 --> 00:11:13.000
Điều này giúp bạn dễ dàng xem ứng dụng của mình trong các điều kiện khác nhau.

00:11:13.000 --> 00:11:23.000
Trình mô phỏng là một cách tuyệt vời để chạy và gỡ lỗi hầu hết các ứng dụng và nhanh chóng lặp lại trong quá trình phát triển với một môi trường rất dễ đoán.

00:11:23.000 --> 00:11:35.000
Chúng tôi cũng đã mở rộng Xcode để hỗ trợ một số trực quan hóa thời gian chạy trong khi bạn đang gỡ lỗi để giúp bạn nhanh chóng hiểu và theo dõi lỗi chỉ bằng cách nhìn vào cảnh.

00:11:35.000 --> 00:11:42.000
Ở đây chúng tôi có ước tính mặt phẳng có thể nhìn thấy, bao gồm ý nghĩa ngữ nghĩa của những mặt phẳng đó và hình dạng va chạm trong cảnh.

00:11:42.000 --> 00:11:48.000
Thật dễ dàng để chuyển đổi các hình ảnh trực quan mà bạn muốn tập trung vào từ trình gỡ lỗi trong Xcode.

00:11:48.000 --> 00:11:54.000
Những hình ảnh trực quan này hoạt động tốt cả trong Trình mô phỏng và trong thiết bị.

00:11:54.000 --> 00:12:01.000
Khi đến lúc đánh bóng hiệu suất và khả năng phản hồi của ứng dụng, chúng tôi đã có các công cụ quen thuộc như Dụng cụ.

00:12:01.000 --> 00:12:06.000
Instruments là một công cụ phân tích hiệu suất mạnh mẽ đi kèm với Xcode.

00:12:06.000 --> 00:12:11.000
Bạn có thể sử dụng Công cụ để cung cấp cho bạn thông tin chi tiết có thể hành động về ứng dụng đang chạy của bạn.

00:12:11.000 --> 00:12:24.000
Và đối với tính toán không gian, Instruments 15 bao gồm một mẫu mới, RealityKit Trace, cung cấp nhiều thông tin chi tiết hơn và sâu sắc hơn về các hành vi mới trên nền tảng.

00:12:24.000 --> 00:12:36.000
Mẫu RealityKit Trace có các công cụ mới cho phép các nhà phát triển hiểu được tác động của GPU, CPU và hệ thống của ứng dụng của họ và xác định các điểm nóng hiệu suất.

00:12:36.000 --> 00:12:47.000
Bạn có thể dễ dàng quan sát và hiểu các nút thắt khung và theo dõi chúng trở lại các số liệu quan trọng như tổng số hình tam giác được gửi hoặc số lượng thực thể RealityKit được mô phỏng.

00:12:47.000 --> 00:12:53.000
Điều này cho phép bạn nhanh chóng tìm và giải quyết các vấn đề hiệu suất tiềm ẩn.

00:12:53.000 --> 00:12:59.000
Để biết thêm chi tiết, hãy xem phiên "Gặp gỡ RealityKit Trace."

00:12:59.000 --> 00:13:05.000
Chúng tôi cũng đã giới thiệu một công cụ dành cho nhà phát triển mới có tên là Reality Composer Pro.

00:13:05.000 --> 00:13:09.000
Nó cho phép bạn xem trước và chuẩn bị nội dung 3D cho các ứng dụng của mình.

00:13:09.000 --> 00:13:18.000
Reality Composer Pro giúp bạn có cái nhìn tổng quan về tất cả tài sản của mình và cách chúng khớp với nhau trong cảnh của bạn.

00:13:18.000 --> 00:13:27.000
Một tính năng mới mà chúng tôi đã thêm vào RealityKit là các hạt và bạn có thể sử dụng quy trình làm việc trong Reality Composer Pro để tạo và xem trước chúng.

00:13:27.000 --> 00:13:33.000
Thêm các hạt vào cảnh của bạn cung cấp chuyển động, cuộc sống và khả năng vô tận.

00:13:33.000 --> 00:13:40.000
Mây, mưa và tia lửa chỉ là một vài hiệu ứng mà bạn có thể xây dựng trong một khoảng thời gian ngắn.

00:13:40.000 --> 00:13:45.000
Thêm âm thanh vào các cảnh của bạn và liên kết chúng với các đối tượng thật dễ dàng.

00:13:45.000 --> 00:13:53.000
Bạn cũng có thể xem trước âm thanh theo không gian, có tính đến hình dạng và bối cảnh của toàn bộ cảnh của bạn.

00:13:53.000 --> 00:14:02.000
Hầu hết các đối tượng ảo sẽ sử dụng vật liệu dựa trên vật lý của RealityKit để đại diện cho nhiều loại vật liệu trong thế giới thực.

00:14:02.000 --> 00:14:11.000
RealityKit sử dụng dữ liệu cảm biến để cung cấp thông tin ánh sáng trong thế giới thực vào các vật liệu này, nối đất chúng trong môi trường xung quanh mọi người.

00:14:11.000 --> 00:14:19.000
RealityKit cũng có một vài tài liệu tiêu chuẩn bổ sung có sẵn cho ứng dụng của bạn để sử dụng trong các tình huống phổ biến.

00:14:19.000 --> 00:14:32.000
Đối với những lúc bạn có nhu cầu rất cụ thể, có lẽ để truyền đạt ý định sáng tạo, bạn có thể tạo ra các tài liệu tùy chỉnh trong Reality Composer Pro với MaterialX tiêu chuẩn mở.

00:14:32.000 --> 00:14:41.000
Bạn có thể làm điều này thông qua biểu đồ nút dễ sử dụng mà không cần chạm vào bất kỳ mã nào và nhanh chóng xem trước chúng trực tiếp trong khung nhìn.

00:14:41.000 --> 00:14:48.000
Bạn có thể tìm hiểu thêm về điều này trong phiên "Khám phá tài liệu trong Reality Composer Pro."

00:14:48.000 --> 00:14:56.000
Khi bạn cảm thấy hài lòng về nội dung 3D của mình, bạn có thể gửi cảnh của mình đến thiết bị và kiểm tra trực tiếp nội dung của mình.

00:14:56.000 --> 00:15:01.000
Điều này rất tốt cho thời gian lặp lại vì bạn thậm chí không phải xây dựng một ứng dụng.

00:15:01.000 --> 00:15:07.000
Để tìm hiểu thêm, hãy xem phiên "Gặp gỡ nhà soạn nhạc thực tế chuyên nghiệp".

00:15:07.000 --> 00:15:11.000
Một lựa chọn khác có sẵn là Unity.

00:15:11.000 --> 00:15:20.000
Unity đang mang đến khả năng cho bạn viết các ứng dụng cho máy tính không gian với quy trình làm việc quen thuộc và không cần bất kỳ plugin nào.

00:15:20.000 --> 00:15:25.000
Bạn có thể mang nội dung hiện có của mình đến những trải nghiệm nhập vai mới.

00:15:25.000 --> 00:15:32.000
Để tìm hiểu thêm, hãy xem các phiên này bao gồm cách viết các ứng dụng nhập vai với Unity.

00:15:32.000 --> 00:15:40.000
Bây giờ chúng ta đã hiểu một số khái niệm và công cụ cơ bản có sẵn cho chúng ta, hãy xem cách chúng ta có thể bắt đầu xây dựng ứng dụng.

00:15:40.000 --> 00:15:52.000
Có hai cách để bắt đầu - hoặc bạn thiết kế một ứng dụng hoàn toàn mới từ đầu để trở thành không gian hoặc có thể bạn có một ứng dụng hiện có mà bạn muốn đưa vào nền tảng không gian mới này.

00:15:52.000 --> 00:15:55.000
Hãy cùng khám phá cách chúng ta xây dựng một ứng dụng mới.

00:15:55.000 --> 00:16:05.000
Thiết kế một ứng dụng từ đầu để trở thành không gian giúp bạn nhanh chóng nắm bắt các khả năng độc đáo mới của điện toán không gian.

00:16:05.000 --> 00:16:10.000
Để bắt đầu, bạn có thể sử dụng mẫu ứng dụng mới cho nền tảng này.

00:16:10.000 --> 00:16:13.000
Mẫu ứng dụng có hai lựa chọn quan trọng mới.

00:16:13.000 --> 00:16:19.000
Đầu tiên, bạn có thể chọn Loại Cảnh Ban Đầu của mình là 'Cửa Sổ' hoặc 'Khối lượng'.

00:16:19.000 --> 00:16:25.000
Điều này tạo ra mã bắt đầu ban đầu cho bạn và thật dễ dàng để thêm các cảnh bổ sung sau này.

00:16:25.000 --> 00:16:30.000
Tùy chọn thứ hai cho phép bạn thêm một điểm vào cho một không gian nhập vai vào ứng dụng của mình.

00:16:30.000 --> 00:16:34.000
Theo mặc định, ứng dụng của bạn sẽ khởi chạy vào Không gian chia sẻ.

00:16:34.000 --> 00:16:46.000
Nếu bạn chọn Loại cảnh nhập vai vào 'Không gian', cảnh thứ hai sẽ được thêm vào ứng dụng của bạn, cùng với nút ví dụ hiển thị cách khởi chạy vào Không gian đầy đủ này.

00:16:46.000 --> 00:16:59.000
Và khi bạn hoàn thành trợ lý, bạn sẽ thấy một ứng dụng làm việc ban đầu trong SwiftUI hiển thị các nút quen thuộc được trộn lẫn với một đối tượng 3D được hiển thị bằng RealityKit.

00:16:59.000 --> 00:17:05.000
Để tìm hiểu thêm, hãy xem phiên "Phát triển ứng dụng nhập vai đầu tiên của bạn."

00:17:05.000 --> 00:17:13.000
Chúng tôi cũng đang xuất bản các mẫu mã, mỗi mẫu trong số chúng minh họa các chủ đề khác nhau để nhanh chóng giúp bạn bắt kịp tốc độ.

00:17:13.000 --> 00:17:23.000
Video đích cho thấy cách xây dựng trải nghiệm phát lại được chia sẻ, nhập vai kết hợp video 3D và Âm thanh không gian.

00:17:23.000 --> 00:17:34.000
Happy Beam là một ví dụ về cách bạn có thể tạo ra một trò chơi tận dụng Không gian nhập vai, bao gồm các cử chỉ tay tùy chỉnh, để tạo ra một trò chơi thú vị với bạn bè.

00:17:34.000 --> 00:17:40.000
Và Hello World chỉ ra cách chuyển đổi giữa các chế độ hình ảnh khác nhau với quả địa cầu 3D.

00:17:40.000 --> 00:17:45.000
Christopher sẽ nói chi tiết hơn về Hello World sau.

00:17:45.000 --> 00:17:53.000
Xây dựng và thiết kế ứng dụng của bạn từ đầu trên nền tảng này mang đến cơ hội dễ dàng nắm bắt các khái niệm điện toán không gian.

00:17:53.000 --> 00:17:59.000
Tuy nhiên, một số bạn có thể có các ứng dụng hiện có mà bạn muốn đưa vào tính toán không gian.

00:17:59.000 --> 00:18:04.000
Ngay từ đầu, các ứng dụng iPad và iPhone trông và cảm thấy tuyệt vời.

00:18:04.000 --> 00:18:13.000
Nếu ứng dụng của bạn hỗ trợ iPad, biến thể đó sẽ được ưu tiên hơn iPhone mặc dù các ứng dụng chỉ dành cho iPhone được hỗ trợ đầy đủ.

00:18:13.000 --> 00:18:17.000
Hãy cùng xem ứng dụng công thức nấu ăn được hiển thị ở đây trong Trình mô phỏng.

00:18:17.000 --> 00:18:25.000
Trong khi nền tảng này có phong cách tối hơn của riêng nó, các ứng dụng iPad và iPhone vẫn giữ được phong cách chế độ sáng.

00:18:25.000 --> 00:18:37.000
Windows có thể mở rộng quy mô để dễ sử dụng và các vòng quay cho các ứng dụng được xử lý, cho phép bạn xem các bố cục khác nhau.

00:18:37.000 --> 00:18:52.000
Để tìm hiểu thêm, hãy xem phiên "Chạy ứng dụng iPad và iPhone của bạn trong Không gian chia sẻ" để tìm hiểu về các hành vi tích hợp sẵn của hệ thống, sự khác biệt về chức năng và cách kiểm tra với Trình mô phỏng.

00:18:52.000 --> 00:18:58.000
Tuy nhiên, chạy một ứng dụng iPad hoặc iPhone hiện có chỉ là bước khởi đầu.

00:18:58.000 --> 00:19:05.000
Thật dễ dàng để thêm một điểm đến trong dự án Xcode của bạn cho nền tảng này chỉ với một cú nhấp chuột.

00:19:05.000 --> 00:19:20.000
Và sau đó, chúng ta có thể chỉ cần chọn thiết bị mục tiêu của mình, biên dịch lại và chạy.

00:19:20.000 --> 00:19:26.000
Khi bạn biên dịch lại, bạn sẽ có được khoảng cách, kích thước và chuyển tiếp gốc.

00:19:26.000 --> 00:19:43.000
Tất cả các cửa sổ và vật liệu của bạn sẽ tự động di chuyển đến giao diện của nền tảng, đảm bảo tính dễ đọc trong mọi điều kiện ánh sáng và ứng dụng của bạn có thể tận dụng các khả năng tích hợp như tô sáng cho các điều khiển tùy chỉnh của bạn.

00:19:43.000 --> 00:19:50.000
Bây giờ đây là Christopher để chỉ cho chúng tôi cách chúng tôi có thể phát triển các ứng dụng của mình hơn nữa bằng cách sử dụng các khái niệm mà chúng tôi đã đề cập cho đến nay.

00:19:50.000 --> 00:19:51.000
Cảm ơn Jim.

00:19:51.000 --> 00:19:56.000
Tôi sẽ hướng dẫn bạn cách xây dựng một ứng dụng kết hợp các yếu tố bạn đã học trước đây.

00:19:56.000 --> 00:20:01.000
Hãy bắt đầu với Hello World để khám phá một số chức năng tuyệt vời mà bạn có thể tích hợp vào ứng dụng của mình.

00:20:01.000 --> 00:20:03.000
Đây là mẫu của chúng tôi đang hoạt động.

00:20:03.000 --> 00:20:10.000
Khi chạy ứng dụng trong Trình mô phỏng, Hello World khởi chạy với một cửa sổ vào Không gian chia sẻ, ngay trước mặt chúng tôi.

00:20:10.000 --> 00:20:18.000
Đây là một cửa sổ trông quen thuộc được tạo bằng SwiftUI và nó chứa các yếu tố khác nhau như văn bản, hình ảnh và nút.

00:20:18.000 --> 00:20:21.000
Sử dụng cử chỉ chạm cho phép điều hướng trong ứng dụng.

00:20:21.000 --> 00:20:25.000
Quan sát cách chế độ xem mới của chúng tôi đã nhúng nội dung 3D.

00:20:25.000 --> 00:20:30.000
SwiftUI và nội dung 3D hiện hoạt động liền mạch với nhau.

00:20:30.000 --> 00:20:35.000
Quay trở lại cửa sổ chính của chúng tôi và chọn Hành tinh Trái đất sẽ đưa chúng ta đến một chế độ xem mới.

00:20:35.000 --> 00:20:37.000
Một yếu tố mới xuất hiện. Đây là một tập.

00:20:37.000 --> 00:20:43.000
Nó chứa một mô hình 3D của Trái đất, cùng với một vài yếu tố giao diện người dùng.

00:20:43.000 --> 00:20:52.000
Bằng cách di chuyển thanh cửa sổ, vị trí của âm lượng có thể được điều chỉnh ở bất cứ đâu xung quanh.

00:20:52.000 --> 00:21:02.000
Quay trở lại cửa sổ chính của chúng tôi một lần nữa và chọn View Outer Space sẽ đưa ra lời mời chúng tôi vào hệ mặt trời.

00:21:02.000 --> 00:21:07.000
Từ đây, chúng ta có thể đi vào không gian, được hiển thị ở đây với phong cách đắm chìm của 'đầy đủ'.

00:21:07.000 --> 00:21:15.000
Ví dụ của chúng tôi hiển thị Hành tinh Trái đất và làm mờ đi qua, cho phép chúng tôi tập trung vào nội dung mà không bị phân tâm bởi môi trường xung quanh.

00:21:15.000 --> 00:21:24.000
Bây giờ chúng ta đã thấy điều này trông như thế nào trong hành động, hãy chia nhỏ một số chức năng của Hello World và chỉ cho bạn cách sử dụng các khái niệm này trong các ứng dụng của riêng bạn.

00:21:24.000 --> 00:21:30.000
Như bạn đã học được từ Jim, có nhiều yếu tố: cửa sổ, khối lượng và không gian.

00:21:30.000 --> 00:21:38.000
Bạn có thể xem đây là một quang phổ mà ứng dụng của bạn có thể sử dụng để uốn cong lên và xuống, tùy thuộc vào điều gì là tốt nhất cho những người sử dụng ứng dụng của bạn trong một thời điểm cụ thể.

00:21:38.000 --> 00:21:44.000
Bạn có thể chọn trình bày một hoặc một số cửa sổ trong Không gian chia sẻ, cho phép mọi người có mặt nhiều hơn.

00:21:44.000 --> 00:21:49.000
Họ có thể xem qua và có sự lựa chọn để có các ứng dụng khác cạnh nhau.

00:21:49.000 --> 00:21:54.000
Hoặc... bạn có thể chọn tăng mức độ đắm chìm bằng cách để ứng dụng của bạn chiếm toàn bộ không gian.

00:21:54.000 --> 00:22:05.000
Tìm kiếm các yếu tố phù hợp nhất cho trải nghiệm ứng dụng của bạn trong một thời điểm nhất định và linh hoạt giữa chúng là một cân nhắc quan trọng khi bạn thiết kế ứng dụng của mình cho điện toán không gian.

00:22:05.000 --> 00:22:10.000
Tiếp theo, hãy xem xét kỹ hơn cách sử dụng windows như một phần trải nghiệm của bạn.

00:22:10.000 --> 00:22:13.000
Windows đóng vai trò là điểm khởi đầu cho ứng dụng của bạn.

00:22:13.000 --> 00:22:18.000
Chúng được xây dựng với SwiftUI bằng cách sử dụng các cảnh, và chúng chứa các chế độ xem và điều khiển truyền thống.

00:22:18.000 --> 00:22:23.000
Windows trên nền tảng này hỗ trợ trộn nội dung 2D và 3D.

00:22:23.000 --> 00:22:28.000
Điều này có nghĩa là nội dung 3D của bạn có thể được trình bày cùng với giao diện người dùng 2D trong một cửa sổ.

00:22:28.000 --> 00:22:32.000
Cửa sổ có thể được thay đổi kích thước và định vị lại trong không gian.

00:22:32.000 --> 00:22:35.000
Mọi người có thể sắp xếp chúng theo ý thích của họ.

00:22:35.000 --> 00:22:37.000
Hãy quay lại ví dụ của chúng ta.

00:22:37.000 --> 00:22:47.000
Trong Hello World, chế độ xem nội dung chứa hình ảnh, văn bản và nút SwiftUI của chúng tôi, cùng với lời kêu gọi hành động để có được nội dung nhập vai hơn.

00:22:47.000 --> 00:22:51.000
Tạo một cửa sổ dễ dàng như thêm một WindowGroup vào một cảnh.

00:22:51.000 --> 00:22:55.000
Bên trong WindowGroup, chúng tôi sẽ hiển thị Chế độ xem nội dung của mình.

00:22:55.000 --> 00:23:00.000
Chế độ xem nội dung của chúng tôi có thể thêm nội dung 3D, mang lại chiều sâu mới cho ứng dụng của bạn.

00:23:00.000 --> 00:23:03.000
Để làm điều đó, bạn có thể sử dụng chế độ xem Model3D mới.

00:23:03.000 --> 00:23:11.000
Model3D tương tự như một hình ảnh, giúp bạn dễ dàng tải và hiển thị nội dung 3D đẹp mắt trong ứng dụng của bạn được RealityKit hiển thị.

00:23:11.000 --> 00:23:17.000
Để thêm Model3D vào chế độ xem của bạn, chúng tôi khởi tạo Model3D bằng cách chuyển tên của mô hình vệ tinh.

00:23:17.000 --> 00:23:23.000
Với điều này, Model3D sẽ tìm và tải mô hình, và đặt nó vào hệ thống phân cấp chế độ xem của bạn.

00:23:23.000 --> 00:23:32.000
Bây giờ cửa sổ này có vệ tinh được nhúng vào chế độ xem và có thể được nhìn thấy khi ra khỏi trục z, thêm một chiều sâu mới cho ứng dụng của bạn.

00:23:32.000 --> 00:23:34.000
Bây giờ chúng ta đã thêm một vệ tinh, chúng ta có thể thêm các tương tác.

00:23:34.000 --> 00:23:39.000
Các tương tác về cơ bản được tích hợp vào hệ thống và được cung cấp bởi SwiftUI.

00:23:39.000 --> 00:23:49.000
SwiftUI cung cấp các trình nhận dạng cử chỉ mà bạn đã quen thuộc trên các nền tảng của Apple, chẳng hạn như Tap, onHover và RotateGesture.

00:23:49.000 --> 00:23:57.000
Nền tảng cung cấp các công cụ nhận dạng cử chỉ mới được tạo ra cho các tương tác 3D, như xoay trong không gian 3D, chạm vào các đối tượng 3D và hơn thế nữa.

00:23:57.000 --> 00:24:01.000
Hãy xem mã cho phép tương tác với vệ tinh.

00:24:01.000 --> 00:24:06.000
Chúng tôi sẽ kích hoạt cử chỉ chạm không gian để chúng tôi có thể lấy và di chuyển vệ tinh xung quanh.

00:24:06.000 --> 00:24:10.000
Bắt đầu từ Model3D, bây giờ chúng ta có thể thêm một cử chỉ.

00:24:10.000 --> 00:24:14.000
Bên trong chúng tôi thêm một DragGesture nhắm mục tiêu đến thực thể vệ tinh.

00:24:14.000 --> 00:24:19.000
Sau đó, chúng ta có thể sử dụng các giá trị được truyền từ khi đóng bản cập nhật để di chuyển vệ tinh.

00:24:19.000 --> 00:24:22.000
Hãy xem nó trông như thế nào.

00:24:22.000 --> 00:24:33.000
Quay trở lại chế độ xem vệ tinh của chúng tôi, nơi vệ tinh của chúng tôi được hiển thị, lưu ý DragGesture cho phép tôi chạm và kéo mô hình, di chuyển theo các tương tác của tôi.

00:24:33.000 --> 00:24:39.000
Như chúng ta vừa thấy, thật dễ dàng để kết hợp nội dung 2D và 3D cùng với Model3D.

00:24:39.000 --> 00:24:41.000
Đây chỉ là một vài điều bạn có thể làm với một cửa sổ.

00:24:41.000 --> 00:24:46.000
Bây giờ hãy nhìn vào một loại phần tử khác, khối lượng.

00:24:46.000 --> 00:24:48.000
Hãy xem một khối lượng cung cấp những gì.

00:24:48.000 --> 00:24:53.000
Âm lượng là một phần mở rộng của một cửa sổ, cung cấp cho bạn chức năng tương tự.

00:24:53.000 --> 00:24:58.000
Âm lượng là một kiểu cửa sổ mới lý tưởng cho nội dung 3D.

00:24:58.000 --> 00:25:03.000
Họ có thể lưu trữ nhiều chế độ xem SwiftUI chứa nội dung 2D hoặc 3D của bạn.

00:25:03.000 --> 00:25:12.000
Mặc dù khối lượng có thể được sử dụng trong Không gian đầy đủ, nhưng chúng thực sự được xây dựng cho Không gian được chia sẻ, do đó nội dung phải nằm trong giới hạn của khối lượng.

00:25:12.000 --> 00:25:15.000
Hãy xem cách thêm âm lượng vào cảnh của bạn.

00:25:15.000 --> 00:25:20.000
Bạn sẽ bắt đầu bằng cách tạo một WindowGroup mới và đặt windowStyle của nó thành thể tích.

00:25:20.000 --> 00:25:26.000
Sau đó, bạn cần cung cấp cho nó một Kích thước mặc định với các thuộc tính chiều rộng, chiều cao và chiều sâu.

00:25:26.000 --> 00:25:30.000
Các đơn vị của một thể tích có thể được chỉ định bằng điểm hoặc mét.

00:25:30.000 --> 00:25:32.000
Hãy xem cái này đang chạy trong Trình mô phỏng.

00:25:32.000 --> 00:25:37.000
Khi đơn đăng ký được trình bày, âm lượng được đặt trước mặt người đó.

00:25:37.000 --> 00:25:57.000
Ổ đĩa này có kích thước mà chúng tôi đã chỉ định, cùng với các điều khiển nền tảng: thanh tiêu đề ứng dụng, hiển thị tên ứng dụng của chúng tôi, giúp dễ dàng xác định âm lượng này thuộc về ứng dụng nào; thanh cửa sổ, cho phép định vị âm lượng; và nút đóng, tạm dừng ứng dụng khi chạm, đóng âm lượng.

00:25:57.000 --> 00:26:04.000
Hiện tại, khối lượng của chúng tôi hiển thị mô hình 3D của Trái đất, nhưng bạn có thể muốn bắt đầu thêm nhiều nội dung hơn và các hành vi khác nhau.

00:26:04.000 --> 00:26:09.000
Để làm điều này, bạn có thể áp dụng RealityView như một phần của ứng dụng của mình.

00:26:09.000 --> 00:26:18.000
RealityView là một chế độ xem mới có thể được thêm vào cảnh của bạn, cho phép bất kỳ số lượng thực thể nào được quản lý trực tiếp trong SwiftUI.

00:26:18.000 --> 00:26:25.000
SwiftUI và RealityView cho phép bạn dễ dàng tích hợp ứng dụng của mình bằng cách kết nối với các thuộc tính thực thể và trạng thái được quản lý của SwiftUI.

00:26:25.000 --> 00:26:31.000
Điều này giúp dễ dàng thúc đẩy hành vi của các mô hình 3D với nguồn sự thật từ mô hình dữ liệu của ứng dụng của bạn.

00:26:31.000 --> 00:26:43.000
Việc chuyển đổi giữa các không gian tọa độ rất dễ dàng với các chức năng chuyển đổi do RealityView cung cấp và RealityView cung cấp một cách để định vị các phần tử SwiftUI bên trong cảnh 3D của bạn thông qua các tệp đính kèm.

00:26:43.000 --> 00:26:48.000
Hãy dành một chút thời gian để xem cách chúng ta có thể sử dụng tệp đính kèm bên trong RealityView.

00:26:48.000 --> 00:26:56.000
Trình khởi tạo RealityView mà chúng ta sẽ sử dụng có ba tham số: đóng tạo, đóng cập nhật và tệp đính kèm ViewBuilder.

00:26:56.000 --> 00:27:01.000
Đóng make cho phép bạn tạo các thực thể và đính kèm chúng vào thực thể gốc.

00:27:01.000 --> 00:27:05.000
Đóng bản cập nhật, được gọi bất cứ khi nào trạng thái của chế độ xem thay đổi.

00:27:05.000 --> 00:27:15.000
Và cuối cùng, việc đóng tệp đính kèm là nơi chúng tôi thêm chế độ xem SwiftUI của mình với thuộc tính thẻ cho phép RealityView dịch chế độ xem của chúng tôi thành các thực thể.

00:27:15.000 --> 00:27:20.000
Bây giờ, hãy làm việc thông qua một ví dụ về cách sử dụng tệp đính kèm với RealityView.

00:27:20.000 --> 00:27:26.000
Thêm tệp đính kèm dễ dàng như đặt chế độ xem SwiftUI của bạn bên trong phần đóng tệp đính kèm của RealityView.

00:27:26.000 --> 00:27:31.000
Hãy sử dụng biểu tượng bánh ngọt thơm ngon này để đại diện cho một vị trí trên quả địa cầu 3D của chúng ta.

00:27:31.000 --> 00:27:35.000
Đối với mỗi tệp đính kèm, bạn phải thêm một thẻ đặt tên cho tệp đính kèm.

00:27:35.000 --> 00:27:38.000
Tôi sẽ đặt tên cho cái này là 'ghim'.

00:27:38.000 --> 00:27:41.000
Để hiển thị tệp đính kèm, tôi sẽ thêm nó vào nội dung của RealityView của mình.

00:27:41.000 --> 00:27:46.000
Tôi sẽ làm điều đó khi đóng bản cập nhật bằng cách thêm nó vào thực thể gốc của cảnh.

00:27:46.000 --> 00:27:53.000
Ở đây, chúng ta có thể thấy tệp đính kèm mà chúng tôi đã thực hiện trước đó, hiển thị trên toàn cầu phía trên địa điểm tiệm bánh yêu thích của tôi.

00:27:53.000 --> 00:28:02.000
Như chúng ta vừa thấy, sử dụng RealityKit giải phóng các tính năng mạnh mẽ như Model3D, RealityView, tệp đính kèm và nhiều tính năng khác.

00:28:02.000 --> 00:28:05.000
Những thứ này có thể dễ dàng tích hợp vào ứng dụng của bạn.

00:28:05.000 --> 00:28:09.000
Điều này chỉ làm trầy xước bề mặt của những gì RealityKit có thể làm.

00:28:09.000 --> 00:28:20.000
Nếu bạn muốn biết thêm, tôi khuyến khích bạn đi và xem "Xây dựng trải nghiệm không gian với RealityKit" và "Nâng cao ứng dụng điện toán không gian của bạn với RealityKit."

00:28:20.000 --> 00:28:23.000
Hãy tóm tắt lại những gì chúng ta đã trải qua cho đến nay.

00:28:23.000 --> 00:28:27.000
Âm lượng là một vùng chứa lý tưởng cho nội dung 2D và 3D.

00:28:27.000 --> 00:28:34.000
Khối lượng được xây dựng cho Không gian chia sẻ, có thể cùng tồn tại với các cửa sổ và bị giới hạn ở các kích thước được chỉ định.

00:28:34.000 --> 00:28:40.000
Tiếp theo, chúng ta hãy đi sâu vào loại yếu tố cuối cùng của chúng ta, không gian.

00:28:40.000 --> 00:28:47.000
Khi ứng dụng của bạn đang mở một Không gian đầy đủ chuyên dụng, hệ thống sẽ ẩn tất cả các ứng dụng khác, chỉ để lại ứng dụng của bạn hiển thị.

00:28:47.000 --> 00:28:53.000
Bây giờ bạn có thể đặt cửa sổ, khối lượng và nội dung của ứng dụng của mình ở bất cứ đâu xung quanh bạn.

00:28:53.000 --> 00:28:59.000
Nhờ ARKit và RealityKit, nội dung ảo của bạn thậm chí có thể tương tác với môi trường xung quanh.

00:28:59.000 --> 00:29:06.000
Bạn có thể ném một quả bóng ảo vào phòng và quan sát khi nó bật ra khỏi tường và sau đó lăn trên sàn nhà.

00:29:06.000 --> 00:29:13.000
Và với việc bổ sung tính năng theo dõi bằng tay, bạn có thể xây dựng các cử chỉ và tương tác tùy chỉnh hoặc đặt nội dung liên quan đến bàn tay của mọi người.

00:29:13.000 --> 00:29:16.000
Nhiều khả năng trong số này đến từ ARKit.

00:29:16.000 --> 00:29:24.000
Để đi sâu hơn và tìm hiểu cách bạn có thể tận dụng chúng trong ứng dụng của mình, hãy nhớ xem phiên "Gặp gỡ ARKit để tính toán không gian".

00:29:24.000 --> 00:29:32.000
Với không gian, ứng dụng của bạn cũng có thể cung cấp các mức độ đắm chìm khác nhau, tùy thuộc vào phong cách được chọn tại thời điểm sáng tạo.

00:29:32.000 --> 00:29:36.000
Jim đã nói một chút về quang phổ đắm chìm có sẵn trong Không gian đầy đủ.

00:29:36.000 --> 00:29:41.000
Hãy đi sâu vào và tìm hiểu thêm về cách bạn có thể thêm sự đắm chìm vào ứng dụng của mình.

00:29:41.000 --> 00:29:45.000
Phong cách ngâm là một tham số có thể được truyền trong Toàn bộ Không gian của bạn.

00:29:45.000 --> 00:29:49.000
Có hai phong cách cơ bản được gọi là .mixed và .full.

00:29:49.000 --> 00:29:53.000
Phong cách hỗn hợp xếp lớp nội dung ứng dụng của bạn lên trên đường chuyền.

00:29:53.000 --> 00:29:58.000
Phong cách đầy đủ ẩn thông qua và chỉ hiển thị nội dung của bạn.

00:29:58.000 --> 00:30:01.000
Bạn cũng có thể kết hợp cả hai bằng cách chọn lũy tiến.

00:30:01.000 --> 00:30:12.000
Phong cách này cho phép một số chuyển qua ban đầu, nhưng người đó có thể thay đổi mức độ đắm chìm lên đến mức đầy đủ bằng cách xoay Vương miện kỹ thuật số nằm trên đỉnh của thiết bị.

00:30:12.000 --> 00:30:15.000
Hãy quay lại ví dụ của chúng ta để khám phá phong cách đắm chìm.

00:30:15.000 --> 00:30:17.000
Tôi sẽ bắt đầu với phong cách hỗn hợp và xem nó trông như thế nào.

00:30:17.000 --> 00:30:23.000
Và bởi vì Full Space là một cảnh SwiftUI, tôi có thể sử dụng RealityView để hiển thị Trái đất.

00:30:23.000 --> 00:30:29.000
Đây là Trái đất nhìn từ quỹ đạo cao... và đây là cách tôi hiển thị cảnh trong ứng dụng của mình.

00:30:29.000 --> 00:30:32.000
Lưu ý rằng tôi đã không thực sự chỉ định phong cách ngâm mình.

00:30:32.000 --> 00:30:38.000
Đó là bởi vì khi bạn tạo ra một không gian nhập vai, SwiftUI giả định phong cách hỗn hợp theo mặc định.

00:30:38.000 --> 00:30:42.000
Hãy để ứng dụng của bạn hoàn toàn nhập vai bằng cách thêm một phong cách đắm chìm khác.

00:30:42.000 --> 00:30:46.000
Lần này, tôi sẽ sử dụng phong cách đắm chìm 'đầy đủ'.

00:30:46.000 --> 00:30:50.000
Thêm một phong cách nhập vai vào cuối ImmersiveSpace của chúng tôi thật dễ dàng.

00:30:50.000 --> 00:30:55.000
Chúng tôi lưu trữ kiểu nhập vai trong biến trạng thái của mình và sau đó đặt kiểu thành đầy.

00:30:55.000 --> 00:31:04.000
Bởi vì chúng tôi muốn cung cấp cho mọi người sự lựa chọn khi họ tham gia trải nghiệm nhập vai, bạn nên thêm một nút để cho phép người đó quyết định xem họ có muốn tham gia phong cách nhập vai này hay không.

00:31:04.000 --> 00:31:08.000
Bây giờ hãy xem phong cách nhập vai mới đang hoạt động.

00:31:08.000 --> 00:31:16.000
Trở lại ứng dụng của chúng tôi, tôi đã đưa Hello World từ một cửa sổ duy nhất để đắm chìm hoàn toàn, cho phép chúng tôi xem Hành tinh Trái đất từ mọi góc độ.

00:31:16.000 --> 00:31:20.000
Và đó mới chỉ là khởi đầu của những gì bạn có thể làm với ứng dụng không gian của mình.

00:31:20.000 --> 00:31:22.000
Hãy xem bạn có thể đi đâu từ đây.

00:31:22.000 --> 00:31:28.000
Trong phiên này, chúng tôi đã đề cập đến các nguyên tắc cơ bản: cách bắt đầu và sau đó đưa bạn qua những điều cơ bản về xây dựng một ứng dụng.

00:31:28.000 --> 00:31:41.000
Chúng tôi có một số phiên tuyệt vời nên là điểm dừng chân tiếp theo của bạn - về các nguyên tắc thiết kế không gian hoặc để tìm hiểu về xây dựng ứng dụng với SwiftUI và RealityKit, hoặc để bắt đầu tạo nội dung 3D của bạn.

00:31:41.000 --> 00:31:46.000
Với tính toán không gian, việc tạo ứng dụng của bạn có thể mạo hiểm vào những con đường mới, thú vị được hướng dẫn bởi sự khéo léo của bạn.

00:31:46.000 --> 00:31:47.000
Cảm ơn vì đã xem!

00:31:47.000 --> 23:59:59.000
♪

