WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
크리스: 안녕하세요, 저는 크리스입니다. 잠시 후에, 나는 제이슨과 합류할 거야.

00:00:14.000 --> 00:00:20.000
"Xcode와 Xcode Cloud로 배포 단순화"에 오신 것을 환영합니다.

00:00:20.000 --> 00:00:25.000
개발자로서, 우리는 최고의 작업을 공유하기 전에 반복해야 한다.

00:00:25.000 --> 00:00:38.000
정말 세련된 앱을 만들려면, 앱을 빠르고 쉽게 구축하고, 테스트하고, 배포하고, 피드백을 받고, 피드백을 통합할 수 있어야 합니다.

00:00:38.000 --> 00:00:41.000
다행히도, 우리는 그 일에 적합한 도구를 가지고 있다.

00:00:41.000 --> 00:00:47.000
TestFlight로 팀, 친구 및 가족에게 앱을 제공하는 것으로 시작할 수 있습니다.

00:00:47.000 --> 00:00:57.000
준비가 되었다고 생각되면, 앱을 App Store에 제출하거나, Apple에서 앱을 공증하여 고객과 직접 공유할 수 있습니다.

00:00:57.000 --> 00:01:02.000
물론, 우리는 이 채널에 배포할 수 있는 훌륭한 도구를 가지고 있습니다: Xcode를 사용할 수 있습니다.

00:01:02.000 --> 00:01:11.000
Xcode 주최자 창을 사용하면 이제 새로운 간소화된 옵션을 사용하여 한 번의 클릭으로 그 어느 때보다 쉽게 배포할 수 있습니다.

00:01:11.000 --> 00:01:15.000
그리고 Xcode Cloud를 사용하여 노력을 강화할 수 있습니다.

00:01:15.000 --> 00:01:23.000
Xcode Cloud를 사용하면 코드 변경을 푸시할 때마다 앱의 구축과 공유를 자동화하는 워크플로우를 만들 수 있습니다.

00:01:23.000 --> 00:01:28.000
오늘, 저는 TestFlight로 테스터에게 앱을 보내는 방법을 보여드리겠습니다.

00:01:28.000 --> 00:01:32.000
그런 다음 제이슨은 Mac에서 고객을 위해 공증을 사용하는 방법을 보여줄 것입니다.

00:01:32.000 --> 00:01:36.000
시작하자.

00:01:36.000 --> 00:01:39.000
나는 우리의 "뒷마당 새들" 프로젝트를 열었다.

00:01:39.000 --> 00:01:44.000
나는 다른 악센트 색상을 실험하고 있는 git 브랜치에서 일하고 있다.

00:01:44.000 --> 00:01:48.000
저는 이 새로운 빨간색을 TestFlight에서 우리 팀과 공유하고 싶습니다.

00:01:48.000 --> 00:01:52.000
그렇게 하기 위한 첫 번째 단계는 "아카이브"를 만드는 것이다.

00:01:52.000 --> 00:01:54.000
하지만 아카이브가 뭐야?

00:01:54.000 --> 00:01:57.000
아카이브는 당신의 앱의 기록입니다.

00:01:57.000 --> 00:02:01.000
앱의 최적화된 릴리스 빌드를 위한 컨테이너입니다.

00:02:01.000 --> 00:02:07.000
그것은 지역 상징화일 수 있는 디버그 기호 또는 "dSYMs"를 포함한다.

00:02:07.000 --> 00:02:13.000
아카이브의 내용은 당신이 선택한 목적지에 따라 궁극적으로 재포장됩니다.

00:02:13.000 --> 00:02:15.000
그래서 어떻게 보관해?

00:02:15.000 --> 00:02:20.000
아주 간단합니다, 당신은 제품 메뉴 아카이브를 사용합니다.

00:02:20.000 --> 00:02:24.000
그리고 주목하세요, 저는 현재 아이폰 시뮬레이터를 선택했습니다.

00:02:24.000 --> 00:02:33.000
Xcode는 똑똑한 일을 하고 모든 iOS 장치에서 실행하는 데 필요한 모든 CPU 아키텍처로 내 아카이브를 구축할 것이다.

00:02:33.000 --> 00:02:39.000
Xcode가 아카이브를 생성한 후, 다음 단계는 "앱 배포" 버튼을 클릭하는 것입니다.

00:02:39.000 --> 00:02:44.000
Xcode 15의 새로운 기능, 몇 가지 간소화된 옵션 중 하나를 선택할 수 있습니다.

00:02:44.000 --> 00:02:51.000
이러한 옵션 중 하나를 선택하면 한 번의 클릭으로 앱을 쉽게 업로드하거나 내보낼 수 있습니다.

00:02:51.000 --> 00:02:56.000
이제 잠시 시간을 내어 이러한 간소화된 각 옵션을 살펴봅시다.

00:02:56.000 --> 00:03:05.000
"TestFlight &amp; App Store" 옵션을 사용하면 TestFlight의 모든 기능과 App Store에 제출할 수 있습니다.

00:03:05.000 --> 00:03:09.000
또는 새로운 "TestFlight 내부 전용" 옵션을 사용할 수 있습니다.

00:03:09.000 --> 00:03:14.000
이런 종류의 빌드는 팀과 공유할 수 있지만, App Store에 제출할 수는 없습니다.

00:03:14.000 --> 00:03:20.000
이것은 개발 지점을 반복하는 동안 피드백을 받기에 완벽합니다.

00:03:20.000 --> 00:03:25.000
앱의 최적화된 빌드를 내보내려면, 디버깅 옵션을 사용할 수 있습니다.

00:03:25.000 --> 00:03:33.000
이 빌드는 팀의 등록된 장치에 설치하거나 릴리스 테스트 옵션을 사용할 수 있습니다.

00:03:33.000 --> 00:03:37.000
이 옵션은 App Store에서 서명하는 방식과 유사하게 앱에 서명합니다.

00:03:37.000 --> 00:03:42.000
이 빌드는 팀의 등록된 장치에 설치할 수 있습니다.

00:03:42.000 --> 00:03:46.000
이러한 간소화된 각 옵션은 권장 설정을 사용합니다.

00:03:46.000 --> 00:03:51.000
이러한 권장 설정은 다음과 같습니다: 자동 서명을 사용하여 앱에 다시 서명하세요.

00:03:51.000 --> 00:03:54.000
구성이 필요하지 않습니다.

00:03:54.000 --> 00:03:59.000
서버 측 충돌 로그 기호를 위한 앱 기호 삽입.

00:03:59.000 --> 00:04:03.000
앱 스토어를 준비하기 위해 앱 빌드 번호를 자동 증가시키세요.

00:04:03.000 --> 00:04:07.000
그리고 스위프트 임베디드 딜립에서 기호 정보를 제거합니다.

00:04:07.000 --> 00:04:10.000
이것은 당신의 앱을 더 작게 만들 것입니다.

00:04:10.000 --> 00:04:15.000
간소화된 옵션으로 사용할 수 없는 것이 필요하다면, 언제든지 "사용자 지정"을 선택할 수 있습니다.

00:04:15.000 --> 00:04:20.000
"사용자 지정"을 사용하면 권장 설정 이상의 것을 선택할 수 있습니다.

00:04:20.000 --> 00:04:24.000
좋아, 나는 이 빌드를 우리 팀의 몇몇 멤버들에게 보낼 준비가 됐어.

00:04:24.000 --> 00:04:36.000
몇 가지 변경 사항을 빠르게 시도하고 있기 때문에, 이 빌드가 App Store에 가는 것을 원하지 않기 때문에, "TestFlight 내부 전용" 옵션을 선택하고 배포를 클릭할 것입니다.

00:04:36.000 --> 00:04:39.000
그리고 그게 다야. 난 어떤 질문에도 대답할 필요가 없어.

00:04:39.000 --> 00:04:44.000
Xcode는 옳은 일을 할 것이다.

00:04:44.000 --> 00:04:54.000
Xcode는 앱을 재포장하고, 기호를 포함하여 다시 서명하고, TestFlight에 업로드하고 있다.

00:04:54.000 --> 00:04:58.000
그리고 그렇게, 앱이 업로드되었다.

00:04:58.000 --> 00:05:06.000
나중에, 내 앱이 업로드되고 처리된 후, 나는 앱이 테스트할 준비가 되었음을 알려주는 이 멋진 새 알림을 받는다.

00:05:06.000 --> 00:05:11.000
빌드 처리가 완료되면, Safari에서 App Store Connect로 갈 수 있습니다.

00:05:11.000 --> 00:05:18.000
거기에서, 나는 TestFlight에서 내 앱 "Backyard Birds"를 방문하여 테스트 세부 사항을 편집할 수 있다.

00:05:18.000 --> 00:05:24.000
우리 팀이 장치에서 TestFlight를 사용할 때, 그들은 이 새로운 빌드를 위해 무엇을 테스트해야 하는지에 대한 모든 것을 읽을 수 있다.

00:05:24.000 --> 00:05:28.000
그리고 그들은 TestFlight를 사용하여 문자 피드백이 포함된 스크린샷을 보낼 수 있습니다.

00:05:28.000 --> 00:05:33.000
나중에 Xcode Organizer 창에서 그 피드백을 볼 수 있습니다.

00:05:33.000 --> 00:05:39.000
여기 Xcode Organizer의 피드백 탭에서 제이슨은 나에게 메시지와 함께 스크린샷을 보냈다.

00:05:39.000 --> 00:05:42.000
그는 빨간색 버튼에 별로 신경 쓰지 않는 것 같다.

00:05:42.000 --> 00:05:47.000
오, 아니, 그건 좋지 않아. 우리가 해야 할 일이 더 많은 것 같아.

00:05:47.000 --> 00:05:49.000
우리는 많은 것을 성취했다.

00:05:49.000 --> 00:05:56.000
우리는 방금 Xcode를 사용하여 앱 빌드를 보관하고 한 번의 클릭으로 TestFlight에 업로드했습니다.

00:05:56.000 --> 00:06:01.000
우리는 우리 팀에게 무엇을 테스트해야 할지에 대한 메모를 주었고 피드백을 받았다.

00:06:01.000 --> 00:06:05.000
우리는 훌륭한 앱을 만들고 다듬는 중입니다.

00:06:05.000 --> 00:06:09.000
앱을 만들고 배포하는 것은 저글링하기에 많은 일이 될 수 있습니다.

00:06:09.000 --> 00:06:15.000
Xcode Cloud는 배포 작업을 자동화하여 개발에 집중할 수 있도록 합니다.

00:06:15.000 --> 00:06:20.000
Xcode Cloud는 Apple이 구축한 지속적인 통합 및 전달 서비스입니다.

00:06:20.000 --> 00:06:24.000
그것은 애플 개발자들을 위해 특별히 설계되었다.

00:06:24.000 --> 00:06:36.000
기능 브랜치에 변경 사항을 제출할 때 자동으로 빌드를 만들고, 해당 빌드를 TestFlight로 보내고, 테스트할 사항에 대한 메모를 포함하도록 Xcode Cloud를 설정하고 싶습니다.

00:06:36.000 --> 00:06:40.000
이 모든 것을 하기 위해, 나는 Xcode 클라우드 워크플로우를 사용할 수 있다.

00:06:40.000 --> 00:06:43.000
나는 이미 우리 앱의 워크플로우를 추가했다.

00:06:43.000 --> 00:06:47.000
우리는 TestFlight 지원을 추가하기 위해 그것을 편집할 것입니다.

00:06:47.000 --> 00:06:51.000
우리는 먼저 통합 메뉴를 사용하여 워크플로우를 관리할 것입니다.

00:06:51.000 --> 00:06:56.000
우리는 TestFlight 지원을 추가하기 위해 아카이브 작업을 편집할 것입니다.

00:06:56.000 --> 00:07:01.000
그리고 우리는 내부 테스터 그룹에 빌드를 보내기 위해 워크플로우에 사후 조치를 추가할 것입니다.

00:07:01.000 --> 00:07:03.000
뛰어들자.

00:07:03.000 --> 00:07:10.000
새로운 통합 메뉴와 워크플로우 관리를 클릭하여 시작하겠습니다.

00:07:10.000 --> 00:07:20.000
이전에 작업했던 "내부 피드백" 워크플로우를 선택하고, 기어 버튼을 사용하여 워크플로우를 편집할 것입니다.

00:07:20.000 --> 00:07:28.000
저는 이전에 "features/" 문자열로 시작하는 브랜치에서 변경 사항이 발생할 때마다 이 워크플로우를 시작하도록 구성했습니다.

00:07:28.000 --> 00:07:33.000
그것은 내가 작업하고 있는 accent_color 기능 브랜치를 포함한다.

00:07:33.000 --> 00:07:37.000
TestFlight에 배포를 시작하려면, 아카이브 작업을 편집할 것입니다.

00:07:37.000 --> 00:07:42.000
이제, 저는 제가 프로토타이핑하고 있는 기능을 위해 이 워크플로우를 지정했습니다.

00:07:42.000 --> 00:07:49.000
나는 이 빌드들이 App Store에 가는 것에 관심이 없어서, "TestFlight (내부 테스트 전용)"를 선택할 것이다.

00:07:49.000 --> 00:07:53.000
나는 이 빌드를 내 팀의 선택된 구성원들과만 공유하고 싶다.

00:07:53.000 --> 00:07:58.000
그렇게 하기 위해, 나는 TestFlight 내부 사후 조치를 추가할 것이다.

00:07:58.000 --> 00:08:01.000
그리고 나는 이 새로운 기능에 관심이 있는 TestFlight 그룹을 추가할 것이다.

00:08:01.000 --> 00:08:04.000
나는 그들을 "깃털의 새"라고 불렀다.

00:08:04.000 --> 00:08:10.000
내가 "추가", "저장"할게...

00:08:10.000 --> 00:08:12.000
그리고 "완료"

00:08:12.000 --> 00:08:15.000
이제 우리는 모두 준비되었고 갈 준비가 되었다.

00:08:15.000 --> 00:08:22.000
이 accent_color 브랜치에 변경 사항을 푸시할 때마다, 새로운 빌드가 "Birds of a Feather" 그룹으로 전송됩니다.

00:08:22.000 --> 00:08:26.000
악센트 색상을 조정하고 변화를 추진해 봅시다.

00:08:26.000 --> 00:08:40.000
악센트 색상을 빨간색에서 보라색으로 바꾸고 시뮬레이터에서 빌드하고 실행하여 확인해 볼 것 같아요.

00:08:40.000 --> 00:08:42.000
보라색 버튼이 나한테 더 좋아 보여.

00:08:42.000 --> 00:08:45.000
제이슨이 동의하길 바라자.

00:08:45.000 --> 00:08:52.000
이러한 변경 사항을 푸시하려면, 통합 메뉴를 사용하고 커밋을 클릭하세요.

00:08:52.000 --> 00:08:55.000
이제 변경된 파일을 검토할 수 있습니다.

00:08:55.000 --> 00:09:00.000
이 첫 번째 파일인 "Contents.json"에서 악센트 색상을 빨간색에서 보라색으로 변경했습니다.

00:09:00.000 --> 00:09:02.000
그거 말이 되네.

00:09:02.000 --> 00:09:05.000
나는 또한 커스텀 빌드 스크립트를 작업하고 있다.

00:09:05.000 --> 00:09:14.000
이 스크립트는 Xcode Cloud에서 git 커밋 메시지를 수집하고 TestFlight 빌드의 테스트 세부 정보로 포함하는 데 사용됩니다.

00:09:14.000 --> 00:09:15.000
이건 정말 멋져.

00:09:15.000 --> 00:09:20.000
Xcode Cloud는 이제 테스트할 것에 대한 메모를 자동으로 업데이트할 수 있습니다.

00:09:20.000 --> 00:09:28.000
이를 설정하는 방법에 대해 자세히 알아보려면, "앱의 베타 릴리스와 함께 테스터를 위한 메모 포함"에 대한 개발자 문서를 확인하세요.

00:09:28.000 --> 00:09:32.000
이 문서는 내가 사용하고 있는 빌드 스크립트를 특징으로 한다.

00:09:32.000 --> 00:09:37.000
나는 커밋 메시지를 추가할 것이다, "버튼은 이제 보라색이다."

00:09:37.000 --> 00:09:40.000
그것은 내가 무엇을 바꿨는지 우리 팀에게 분명히 할 것이다.

00:09:40.000 --> 00:09:44.000
"Stage All" 버튼을 클릭하여 이 모든 변경 사항을 진행하겠습니다.

00:09:44.000 --> 00:09:47.000
나는 "Commit" 드롭다운 버튼을 사용하여 커밋하고 누를 것이다.

00:09:47.000 --> 00:09:53.000
그리고 푸시를 클릭하여 원격 저장소에 업로드하세요.

00:09:53.000 --> 00:09:54.000
그게 다야.

00:09:54.000 --> 00:10:00.000
그 푸시로, Xcode Cloud는 TestFlight에 보관하고 배포하고 있다.

00:10:00.000 --> 00:10:04.000
나중에, 나는 보고서 네비게이터에서 빌드를 검토할 수 있다.

00:10:04.000 --> 00:10:09.000
"내부 피드백" 워크플로우에서 가장 최근의 빌드를 선택하겠습니다.

00:10:09.000 --> 00:10:16.000
그리고 고맙게도, 아카이브 액션과 TestFlight 내부 테스트 포스트 액션은 성공적이었다.

00:10:16.000 --> 00:10:23.000
내 장치에서 TestFlight 빌드를 확인하면, "버튼은 이제 보라색입니다"라는 유용한 테스트 노트가 포함되어 있습니다.

00:10:23.000 --> 00:10:25.000
그리고 우리는 여기에 무엇을 가지고 있나요?

00:10:25.000 --> 00:10:28.000
제이슨은 주최자 창에 피드백을 보냈다.

00:10:28.000 --> 00:10:30.000
그는 새로운 보라색 버튼을 좋아하는 것 같다.

00:10:30.000 --> 00:10:33.000
좋아, 내 생각에 우리는 그것들을 가질 수 있을 것 같아.

00:10:33.000 --> 00:10:37.000
굉장해. 우리는 이제 이상적인 설정을 가지고 있다.

00:10:37.000 --> 00:10:46.000
Xcode Cloud의 도움으로, 이 기능 브랜치에 변경 사항을 푸시할 때마다, 팀은 테스트할 사항에 대한 유용한 정보와 함께 내 앱의 새로운 빌드를 받게 될 것입니다.

00:10:46.000 --> 00:10:51.000
나는 이제 지속적으로 피드백을 통합하고 개선 사항을 배치할 수 있다.

00:10:51.000 --> 00:10:57.000
나는 이제 개발에 집중하고 가능한 최상의 결과를 보낼 수 있게 되었다.

00:10:57.000 --> 00:11:03.000
좋아요, 우리는 Xcode와 Xcode Cloud를 사용하여 TestFlight로 앱을 배포하는 것에 대해 많은 것을 배웠습니다.

00:11:03.000 --> 00:11:07.000
이제 제이슨은 우리에게 공증 사용에 대한 모든 것을 보여줄 것이다.

00:11:07.000 --> 00:11:08.000
제이슨: 고마워, 크리스.

00:11:08.000 --> 00:11:16.000
App Store는 Apple 고객에게 다가갈 수 있는 좋은 방법이지만, Mac 앱을 직접 호스팅하고 판매하고 싶다면, 앱을 공증받을 수 있습니다.

00:11:16.000 --> 00:11:23.000
앱을 공증하면 사용자에게 소프트웨어의 안전성이 Apple에 의해 검증되었다는 확신을 얻을 수 있습니다.

00:11:23.000 --> 00:11:27.000
그래서 공증은 어떻게 작동하나요?

00:11:27.000 --> 00:11:34.000
앱의 아카이브를 생성하고 악성 콘텐츠를 스캔하는 Apple의 공증 서비스에 업로드하는 것으로 시작합니다.

00:11:34.000 --> 00:11:41.000
그 과정이 완료되면, 공증인 서비스는 당신의 앱에 스테이플할 수 있는 티켓을 생성합니다.

00:11:41.000 --> 00:11:46.000
이제 공증된 앱을 고객에게 배포할 준비가 되었습니다.

00:11:46.000 --> 00:11:52.000
앱이 처음 실행되면, macOS는 앱이 Apple에 의해 확인되었는지 확인합니다.

00:11:52.000 --> 00:11:57.000
이것은 스테이플 티켓과 공증인 서비스에 연락하여 제공된 티켓을 모두 검토함으로써 이루어집니다.

00:11:57.000 --> 00:12:09.000
공증에 대해 자세히 알아보려면, 전년도의 WWDC 세션 "공증에 관한 모든 것"과 "Mac 앱 공증의 새로운 기능"을 확인하세요.

00:12:09.000 --> 00:12:13.000
Xcode에서 앱을 공증하려면, 아카이브를 생성하는 것부터 시작하세요.

00:12:13.000 --> 00:12:28.000
크리스가 앞서 우리에게 보여줬듯이, 우리는 창, 주최자에서 주최자 창을 열고, 앱 아카이브를 선택하고, 앱 배포를 클릭하여 새로운 간소화된 배포 옵션에 액세스할 수 있습니다.

00:12:28.000 --> 00:12:32.000
직접 배포 옵션은 당신의 앱을 공증할 것입니다.

00:12:32.000 --> 00:12:36.000
지금까지, 나는 공증을 위해 Xcode를 사용해 왔다.

00:12:36.000 --> 00:12:43.000
올해, 이 과정을 자동화하기 위해, 우리는 Xcode Cloud에 공증 지원을 추가했습니다.

00:12:43.000 --> 00:12:51.000
공증 워크플로우를 설정한 후, Xcode Cloud는 구성된 시작 조건에 따라 자동으로 빌드를 시작합니다.

00:12:51.000 --> 00:12:56.000
공증된 앱이 준비되면, Xcode Cloud에서 직접 다운로드할 수 있습니다.

00:12:56.000 --> 00:13:00.000
저는 이미 Mac 앱의 출시 워크플로우를 구성했습니다.

00:13:00.000 --> 00:13:06.000
변경 사항이 릴리스 브랜치로 푸시될 때마다 자동화된 테스트가 실행되고 아카이브가 생성됩니다.

00:13:06.000 --> 00:13:10.000
앱을 공증하기 위해 워크플로우를 업데이트하겠습니다.

00:13:10.000 --> 00:13:17.000
관리자와 앱 관리자만이 공증하는 워크플로우를 설정할 수 있으므로, 올바른 권한이 있는지 확인하십시오.

00:13:17.000 --> 00:13:25.000
공증을 위해 Xcode Cloud를 사용할 것이기 때문에, 취소를 클릭하고 주최자 창을 닫을 것입니다.

00:13:25.000 --> 00:13:32.000
사이드바에 있는 보고서 네비게이터의 클라우드 탭으로 가는 것으로 시작하겠습니다.

00:13:32.000 --> 00:13:41.000
macOS 릴리스 워크플로우를 편집하려면, 보조 클릭을 하고 워크플로우 편집을 선택합니다.

00:13:41.000 --> 00:13:45.000
아카이브 작업이 이미 구성되어 있다는 것을 알게 될 것입니다.

00:13:45.000 --> 00:13:52.000
더하기와 공증을 클릭하여 새로운 공증 사후 조치를 추가합시다.

00:13:52.000 --> 00:14:00.000
이 추가 단계를 반영하기 위해 워크플로우의 설명을 업데이트하겠습니다.

00:14:00.000 --> 00:14:01.000
그리고 그게 다야.

00:14:01.000 --> 00:14:07.000
이러한 변경 사항을 워크플로우에 저장하려면 저장을 클릭하겠습니다.

00:14:07.000 --> 00:14:15.000
저는 우리의 Mac 앱이 특히 새로운 보라색 버튼과 함께 상태가 좋다고 생각하기 때문에, 업데이트된 워크플로우를 사용하여 공증 프로세스를 시작할 준비가 되었습니다.

00:14:15.000 --> 00:14:22.000
워크플로우를 보조 클릭하고 빌드 시작을 선택하여 할 수 있습니다.

00:14:22.000 --> 00:14:30.000
릴리스 브랜치를 선택하고 빌드 시작을 클릭하여 빌드를 대기열에 올리겠습니다.

00:14:30.000 --> 00:14:39.000
테스트 및 아카이브 작업이 대기열에 있다는 것을 알게 될 것이며, 완료되면 새로 추가된 공증 사후 작업이 실행됩니다.

00:14:39.000 --> 00:14:46.000
Xcode Cloud가 빌드를 처리하는 동안, 빌드 보고서를 자세히 살펴봅시다.

00:14:46.000 --> 00:14:54.000
Xcode Cloud 빌드가 진행 중일 때, 빌드 개요는 이 빌드에서 일어날 모든 것에 대한 요약을 보여줍니다.

00:14:54.000 --> 00:15:07.000
그 동안 다른 작업을 하고 싶다면, 보고서 네비게이터의 클라우드 탭은 실행되는 모든 빌드의 상태를 표시하고 자세한 결과로 이동할 수 있습니다.

00:15:07.000 --> 00:15:10.000
우리 빌드의 상태를 확인해 봅시다.

00:15:10.000 --> 00:15:11.000
훌륭해!

00:15:11.000 --> 00:15:15.000
우리의 새로운 공증 사후 작업이 성공적으로 완료되었습니다.

00:15:15.000 --> 00:15:20.000
"공증된 앱 다운로드"를 클릭하여 다운로드를 시작하겠습니다.

00:15:20.000 --> 00:15:31.000
다운로드가 완료되면, 공증된 앱 보기를 클릭하면 다운로드된 아카이브가 표시되며, 압축을 해제하여 공증된 앱을 표시할 수 있습니다.

00:15:31.000 --> 00:15:35.000
이제 나는 그것을 사용자들과 공유할 준비가 되었다.

00:15:35.000 --> 00:15:42.000
오늘, 우리는 당신이 최고의 버전의 앱을 제공하고 있는지 확인하기 위해 다양한 도구를 사용하는 방법을 보여주었습니다.

00:15:42.000 --> 00:15:48.000
Xcode의 새로운 간소화된 배포 옵션을 사용하면 앱을 빠르게 업로드할 수 있습니다.

00:15:48.000 --> 00:15:57.000
TestFlight 내부 배포는 변경 사항을 반복할 수 있는 좋은 방법이며, 제한된 청중이 앱을 사용해 보고 귀중한 피드백을 제공할 수 있도록 합니다.

00:15:57.000 --> 00:16:07.000
Xcode Cloud 워크플로우는 배포 프로세스를 자동화하고 Mac 앱 공증 지원을 통해 App Store 외부에서 더 쉽게 배포할 수 있도록 도와줍니다.

00:16:07.000 --> 00:16:16.000
우리는 앱 배포에 대한 이러한 개선 사항을 통해 귀중한 시간을 절약할 수 있으므로, 가장 잘하는 일에 집중하고 훌륭한 앱을 구축할 수 있다고 생각합니다.

00:16:16.000 --> 00:16:18.000
봐줘서 고마워.

00:16:18.000 --> 23:59:59.000
♪ ♪

