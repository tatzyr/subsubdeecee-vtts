WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
마이클: 안녕하세요, 환영합니다.

00:00:11.000 --> 00:00:18.000
저는 Michael Ochs이고 이 비디오에서 더 나은 문서 중심 앱을 만드는 방법에 대해 이야기할 것입니다.

00:00:18.000 --> 00:00:23.000
문서 중심 앱은 특히 iPad에서 생산성 도구의 큰 부분을 구성한다.

00:00:23.000 --> 00:00:26.000
문서 중심 앱에는 세 가지 유형이 있다.

00:00:26.000 --> 00:00:42.000
파일 앱과 같은 문서 검색을 허용하는 것, 예를 들어 퀵 룩과 같은 콘텐츠를 볼 수 있는 것, 그리고 페이지, 키노트 또는 숫자와 같은 콘텐츠를 편집하거나 만들 수 있는 것.

00:00:42.000 --> 00:00:50.000
이 비디오는 뷰어 및 편집기 앱의 개선에 초점을 맞추고 있지만, 논의된 콘텐츠 중 일부는 브라우저 앱에도 적용됩니다.

00:00:50.000 --> 00:00:58.000
iPadOS 17은 앱에서 많은 기능을 자동으로 활성화하는 새로운 뷰 컨트롤러를 소개합니다.

00:00:58.000 --> 00:01:07.000
iPadOS 16에 도입된 데스크톱급 iPad API와 기존 문서 중심 API와 함께 잘 작동합니다.

00:01:07.000 --> 00:01:10.000
이 새로운 뷰 컨트롤러는 모듈식 방식으로 제작되었습니다.

00:01:10.000 --> 00:01:16.000
훌륭한 시스템 기본값을 얻을 수 있지만, 개별 동작을 사용자 정의할 수 있습니다.

00:01:16.000 --> 00:01:27.000
데스크톱급 iPad API를 따라잡으려면, WWDC22의 '데스크탑급 iPad 만나기'와 '데스크탑급 iPad 앱 만들기'를 확인하세요.

00:01:27.000 --> 00:01:34.000
SwiftUI 개발을 위해, DocumentGroup은 이제 추가 코드 없이 이러한 모든 기능을 지원합니다.

00:01:34.000 --> 00:01:48.000
SwiftUI 측면에 대해 자세히 알아보려면 WWDC20의 'SwiftUI에서 문서 기반 앱 빌드'와 WWDC22의 'iPad의 SwiftUI: 도구 모음, 제목 등 추가'를 확인하세요.

00:01:48.000 --> 00:01:51.000
UIKit에서 기능은 옵트인입니다.

00:01:51.000 --> 00:01:56.000
UIDocumentViewController는 콘텐츠 뷰 컨트롤러의 새로운 기본 클래스입니다.

00:01:56.000 --> 00:02:01.000
UIDocument와 함께 작동하여 내비게이션 바를 자동으로 구성합니다.

00:02:01.000 --> 00:02:07.000
이를 통해 공유, 문서 드래그, 실행 취소 및 재실행 지원 등과 같은 기능을 사용할 수 있습니다.

00:02:07.000 --> 00:02:10.000
그것은 또한 자동 이름 바꾸기를 지원합니다.

00:02:10.000 --> 00:02:18.000
이 비디오에서는 UIDocument를 사용하는 방법과 UIDocumentViewController로 문서를 제시하는 방법을 배우게 됩니다.

00:02:18.000 --> 00:02:24.000
그런 다음 어떤 기능이 내장되어 있는지, 그리고 그것들을 더 사용자 정의하는 방법을 설명하겠습니다.

00:02:24.000 --> 00:02:32.000
마지막에 저는 UIDocument를 활용하기 위해 기존 앱을 마이그레이션하는 몇 가지 모범 사례를 살펴봅니다.

00:02:32.000 --> 00:02:36.000
먼저, 문서를 만드는 것.

00:02:36.000 --> 00:02:40.000
모든 문서 기반 앱의 핵심은 UIDocument이다.

00:02:40.000 --> 00:02:46.000
앱이 지원하는 각 파일 유형에 대해 서브클래스되어야 하는 추상적인 기본 클래스입니다.

00:02:46.000 --> 00:02:49.000
모든 UIDocuments는 URL에 의해 뒷받침됩니다.

00:02:49.000 --> 00:02:57.000
디스크의 파일이 가장 일반적이지만, 데이터베이스와 사용자 지정 URL 구성표를 사용하여 문서를 저장하고 로드할 수도 있습니다.

00:02:57.000 --> 00:03:04.000
UIDocument의 로드 및 저장 작업은 비동기식이며, 필요한 경우 긴 읽기 및 쓰기 작업을 허용합니다.

00:03:04.000 --> 00:03:12.000
이러한 이유로, UIDocument는 스레드로부터 안전하며 잠금과 대기열을 통해 액세스를 조정합니다.

00:03:12.000 --> 00:03:25.000
UIDocument 서브클래스를 구현할 때, 처리해야 할 두 가지 주요 책임이 있습니다: 문서의 로딩 및 저장, 그리고 문서의 내용에 대한 액세스를 제공하는 것입니다.

00:03:25.000 --> 00:03:29.000
로딩과 저장은 모든 문서에서 매우 유사하다.

00:03:29.000 --> 00:03:35.000
콘텐츠에 액세스하는 것은 문서의 유형과 앱에서 어떻게 사용되는지에 더 구체적입니다.

00:03:35.000 --> 00:03:47.000
예를 들어, 마크다운 편집기의 문서 모델은 단일 텍스트 속성만 가질 수 있습니다. 또는 문서의 개별 부분을 업데이트할 수 있는 더 복잡한 인터페이스를 노출할 수 있습니다.

00:03:47.000 --> 00:03:53.000
콘텐츠에 접근하는 것에 대해 더 이야기하기 전에, 로딩과 저장에 대해 이야기해 봅시다.

00:03:53.000 --> 00:03:58.000
간단한 파일 기반 문서의 경우, 재정의할 수 있는 두 가지 편리한 방법이 있습니다.

00:03:58.000 --> 00:04:05.000
문서가 열리면, 'loadFromContents:ofType:'가 파일의 내용과 함께 호출됩니다.

00:04:05.000 --> 00:04:12.000
문서가 저장될 때, 문서의 현재 내용을 얻기 위해 'contentsForType:'이 호출됩니다.

00:04:12.000 --> 00:04:19.000
문서의 내용은 일반 파일의 데이터 객체 또는 다른 모든 것의 FileWrapper입니다.

00:04:19.000 --> 00:04:26.000
파일 유형과 작동 방식에 대해 자세히 알아보려면 Tech Talk 'Uniform Type Identifiers -- a reintroduction'을 확인하세요.

00:04:26.000 --> 00:04:32.000
예를 들어, 이 문서는 일반 마크다운 파일을 다루기 때문에, 우리는 데이터 객체를 기대합니다.

00:04:32.000 --> 00:04:43.000
이제, 완전한 제어를 원한다면, 'saveToURL:forSaveOperation:'와 'readFromURL:'을 재정의하면 URL에 대한 전체 액세스 권한을 부여하고 모든 읽기와 쓰기를 남깁니다.

00:04:43.000 --> 00:04:51.000
이것은 문서를 데이터베이스에 저장하거나 문서를 읽고 쓰기 위한 특별한 요구 사항이 있는 경우에 좋습니다.

00:04:51.000 --> 00:04:58.000
저장 작업이 비동기인 동안, 메소드가 반환될 때까지 읽기가 완료될 것으로 예상됩니다.

00:04:58.000 --> 00:05:02.000
그리고 이것이 문서를 로드하고 저장하는 전부입니다.

00:05:02.000 --> 00:05:06.000
이제 문서의 내용에 접근할 수 있는 방법이 있는지 확인해 봅시다.

00:05:06.000 --> 00:05:12.000
문서의 콘텐츠에 대한 액세스를 제공하는 쉬운 방법은 해당 콘텐츠에 대한 속성을 추가하는 것입니다.

00:05:12.000 --> 00:05:18.000
이 예제에서는 전체 마크다운 문자열을 포함하는 단일 텍스트 속성을 추가합니다.

00:05:18.000 --> 00:05:24.000
이 속성은 이전 슬라이드에서 논의한 바와 같이 문서를 처음 로드할 때 설정됩니다.

00:05:24.000 --> 00:05:29.000
그런 다음 앱은 사용자가 문서를 편집할 때마다 이 텍스트를 업데이트할 수 있습니다.

00:05:29.000 --> 00:05:37.000
UIDocument가 언제 저장이 필요한지 알 수 있도록, 속성이 업데이트될 때마다 'updateChangeCount:'를 호출하세요.

00:05:37.000 --> 00:05:47.000
'updateChangeCount:'를 호출하면 UIDocument가 문서를 필요 저장으로 표시하고 적절한 시간에 자동으로 저장할 수 있습니다.

00:05:47.000 --> 00:05:53.000
다음으로, 새로운 UIDocumentViewController로 문서를 제시하세요.

00:05:53.000 --> 00:06:01.000
UIDocument와 마찬가지로, UIDocumentViewController는 서브클래스되어야 하는 추상적인 기본 클래스이기도 하다.

00:06:01.000 --> 00:06:10.000
문서를 열고, 저장하고, 닫는 것을 관리하고 관련 문서의 정보로 탐색 항목을 채웁니다.

00:06:10.000 --> 00:06:18.000
여기에는 제목, 탐색 항목의 제목 메뉴, UIDocumentProperties 객체 및 이름 바꾸기 대리인이 포함됩니다.

00:06:18.000 --> 00:06:24.000
UIDocumentViewController는 또한 실행 취소 및 실행과 같은 일반적인 작업에 대한 키 명령을 제공합니다.

00:06:24.000 --> 00:06:30.000
UIDocumentViewController 서브클래스를 구현하는 방법을 확인해 봅시다.

00:06:30.000 --> 00:06:33.000
서브클래스에 의해 재정의되도록 설계된 두 가지 방법이 있습니다.

00:06:33.000 --> 00:06:43.000
뷰 컨트롤러와 관련된 문서가 열리거나 이미 열린 문서가 뷰 컨트롤러에 할당되면 'documentDidOpen'이 호출됩니다.

00:06:43.000 --> 00:06:49.000
이 방법으로 문서의 내용을 표시하기 위해 뷰 컨트롤러의 뷰를 채우세요.

00:06:49.000 --> 00:06:56.000
'documentDidOpen'이 호출될 때와 뷰 컨트롤러의 뷰가 로드될 때 사이에는 타이밍 보장이 없다는 점에 유의하십시오.

00:06:56.000 --> 00:07:05.000
강력한 코드를 작성하는 좋은 방법은 보기 구성을 자체 메소드로 이동하고 'documentDidOpen'과 'viewDidLoad' 모두에서 호출하는 것입니다.

00:07:05.000 --> 00:07:13.000
보기를 구성하기 전에 보기가 로드되고 문서가 열려 있는지 확인하세요.

00:07:13.000 --> 00:07:17.000
재정의할 두 번째 방법은 'navigationItemDidUpdate'이다.

00:07:17.000 --> 00:07:24.000
UIDocumentViewController가 탐색 항목을 변경할 때마다 이 메서드를 호출합니다.

00:07:24.000 --> 00:07:27.000
거기에 내비게이션 항목 사용자 지정을 추가하세요.

00:07:27.000 --> 00:07:35.000
'UIDocumentViewController'는 가능한 한 최선을 다해 변경 사항을 유지하기 위해 변경 사항을 최소화하기 위해 최선을 다할 것입니다.

00:07:35.000 --> 00:07:39.000
UIDocumentViewController는 또한 'undoRedoItemGroup'을 제공합니다.

00:07:39.000 --> 00:07:48.000
실행 취소 및 다시 실행 버튼이 나타나도록 하려면 이 그룹을 탐색 모음에 넣고, 문서에 실행 취소 관리자가 할당되어 있는지 확인하십시오.

00:07:48.000 --> 00:08:00.000
UIDocumentViewController는 실행 취소 관리자의 가용성에 따라 이 그룹의 '숨겨진' 속성을 변경하고 필요에 따라 그룹 내부의 버튼을 활성화하거나 비활성화합니다.

00:08:00.000 --> 00:08:03.000
UIDocumentViewController는 자동으로 문서를 열고 닫습니다.

00:08:03.000 --> 00:08:11.000
그러나 뷰 컨트롤러 외부에서 문서에 액세스해야 하는 경우, 'openDocumentWithCompletionHandler'를 호출하십시오.

00:08:11.000 --> 00:08:21.000
UIDocumentViewController는 'documentDidOpen'을 호출하고 준비가 되면 완료 핸들러를 호출하는 것과 같이 필요한 모든 콜백을 할 것입니다.

00:08:21.000 --> 00:08:26.000
마지막으로, UIDocumentViewController는 문서 속성을 제공합니다.

00:08:26.000 --> 00:08:32.000
이 속성은 항상 뷰 컨트롤러와 관련된 문서를 참조합니다.

00:08:32.000 --> 00:08:36.000
초기화 중에 문서를 제공할 수 있지만, 완전히 선택 사항입니다.

00:08:36.000 --> 00:08:42.000
뷰 컨트롤러와 관련된 문서가 없을 때, 자동으로 빈 상태를 표시합니다.

00:08:42.000 --> 00:08:47.000
빈 상태 구성에 대해 자세히 알아보려면, "UIKit의 새로운 기능"을 확인하세요.

00:08:47.000 --> 00:08:53.000
게다가, UIDocumentViewController는 앱의 루트 뷰 컨트롤러로 사용할 수 있습니다.

00:08:53.000 --> 00:09:03.000
계층 구조에 브라우저 뷰 컨트롤러가 없는 경우, UIDocumentViewController는 문서 선택기를 여는 탐색 모음에 문서 버튼을 넣습니다.

00:09:03.000 --> 00:09:15.000
이를 위해서는 앱의 info.plist에서 관련 파일 유형에 대한 키 'UIDocumentClass'를 선언하고 해당 파일 유형과 일치하는 UIDocument 하위 클래스로 설정해야 합니다.

00:09:15.000 --> 00:09:27.000
iPadOS 17에서 UIDocument는 'UINavigationItemRenameDelegate'를 준수하며 사용자가 제목 메뉴에서 이름 변경을 호출할 때 기본 파일 변경 사항을 자체적으로 처리합니다.

00:09:27.000 --> 00:09:38.000
UIDocumentViewController를 사용하는 경우, 자동으로 이름 변경을 구성합니다. 그렇지 않으면 문서를 탐색 항목의 이름 바꾸기 대리인으로 수동으로 설정할 수 있습니다.

00:09:38.000 --> 00:09:43.000
이것들은 iPadOS 17에서 훌륭한 문서 중심 앱을 만드는 데 필요한 모든 부분입니다.

00:09:43.000 --> 00:09:48.000
다음으로, 기존 앱을 마이그레이션하는 방법.

00:09:48.000 --> 00:09:55.000
새로운 UIDocumentViewController를 사용하기 위해 앱을 마이그레이션하는 것은 쉽고 세 단계만 필요합니다.

00:09:55.000 --> 00:09:59.000
먼저, 콘텐츠 뷰 컨트롤러의 기본 클래스를 업데이트하세요.

00:09:59.000 --> 00:10:04.000
둘째, 기존 코드를 새로운 콜백으로 옮기세요.

00:10:04.000 --> 00:10:08.000
그리고 셋째, 더 이상 필요하지 않은 코드를 삭제하세요.

00:10:08.000 --> 00:10:15.000
데스크톱급 iPad 앱 비디오에서 사용하는 마크다운 편집기 예제를 변환하는 방법을 확인해 봅시다.

00:10:15.000 --> 00:10:17.000
만약 당신이 그것에 익숙하지 않다면, 걱정하지 마세요.

00:10:17.000 --> 00:10:22.000
먼저 기존 코드의 관련 부분을 안내해 드리겠습니다.

00:10:22.000 --> 00:10:35.000
그래서 여기에 상단에 뷰 컨트롤러의 정의, 그것이 정의하는 문서 속성, 그리고 초기 문서를 설정한 다음 문서에 콜백을 추가하는 init 방법이 있습니다.

00:10:35.000 --> 00:10:41.000
먼저 기본 클래스를 UIDocumentViewController로 변경합니다.

00:10:41.000 --> 00:10:52.000
이제 이 클래스는 UIDocumentViewController에서 상속되기 때문에, 속성 '문서'가 이미 다른 유형의 슈퍼클래스에 존재하기 때문에 컴파일러 오류가 발생합니다.

00:10:52.000 --> 00:10:57.000
우리는 그 속성의 이름을 'markdownDocument'와 같은 더 구체적인 것으로 변경합니다.

00:10:57.000 --> 00:11:06.000
그런 다음 이 뷰 컨트롤러에서 사용되는 특정 문서 클래스로 일반 문서 속성을 캐스팅하는 계산된 속성으로 만듭니다.

00:11:06.000 --> 00:11:09.000
이 코드에서 처리해야 할 마지막 비트는 이니셜라이저이다.

00:11:09.000 --> 00:11:15.000
우리가 여전히 필요한 유일한 코드는 우리 문서에 콜백을 할당하는 것이다.

00:11:15.000 --> 00:11:24.000
이 뷰 컨트롤러의 수명 동안 문서가 변경될 수 있기 때문에, 우리는 문서가 변경될 때마다 이것을 실행하기 위해 이동합니다.

00:11:24.000 --> 00:11:29.000
이것을 하는 쉬운 방법은 문서 속성을 재정의하고 didSet 콜백을 추가하는 것입니다.

00:11:29.000 --> 00:11:36.000
좋아, 이제 기본 수업이 최신 상태이기 때문에, 우리는 새로운 콜백을 처리해야 해.

00:11:36.000 --> 00:11:42.000
'viewDidLoad'에서 우리는 탐색 모음에 버튼을 추가하고 도구 모음 사용자 지정을 허용하도록 구성합니다.

00:11:42.000 --> 00:11:49.000
UIDocumentViewController의 경우 이것을 새로운 콜백 'navigationItemDidUpdate'로 이동합니다.

00:11:49.000 --> 00:11:55.000
다음으로, 우리 반은 이미 'didOpenDocument'라는 방법을 가지고 있다.

00:11:55.000 --> 00:11:58.000
이것은 거의 UIDocumentViewController가 가지고 있는 것이다.

00:11:58.000 --> 00:12:05.000
우리는 그 방법의 이름을 바꾸고, 그 문서가 이제 선택 사항이라는 사실을 조정하기만 하면 됩니다.

00:12:05.000 --> 00:12:10.000
좋아, 다음으로 우리 모두가 가장 즐기는 부분: 코드 삭제.

00:12:10.000 --> 00:12:17.000
편집기 뷰 컨트롤러는 'UINavigationItemRenameDelegate'를 준수하지만, 더 이상 필요하지 않습니다.

00:12:17.000 --> 00:12:20.000
UIDocument는 우리를 위해 모든 이름을 자동으로 바꾼다.

00:12:20.000 --> 00:12:30.000
그래서 우리는 대리자 정의, 모든 코드가 있는 대리자 방법, 그리고 'renameDelegate' 할당을 제거합니다.

00:12:30.000 --> 00:12:35.000
다음으로 우리는 몇 가지 탐색 아이템 사용자 지정을 더 제거할 수 있습니다.

00:12:35.000 --> 00:12:44.000
'스타일'과 '백액션'은 모두 문서 보기 컨트롤러에 의해 자동으로 구성되므로, 우리는 이것을 완전히 제거할 수 있습니다.

00:12:44.000 --> 00:12:51.000
UIDocumentProperties 객체를 만드는 데 사용되는 'updateDocumentProperties' 메서드도 있습니다.

00:12:51.000 --> 00:12:53.000
이 방법은 다양한 곳에서 불린다.

00:12:53.000 --> 00:12:55.000
하지만, 우리는 더 이상 그것이 필요하지 않다.

00:12:55.000 --> 00:13:03.000
UIDocumentViewController는 우리를 위해 이 모든 것을 하고 있으므로, 우리는 그것과 모든 호출 사이트를 제거할 수 있습니다.

00:13:03.000 --> 00:13:05.000
그리고 그게 할 수 있는 전부야.

00:13:05.000 --> 00:13:09.000
편집기 뷰 컨트롤러는 이제 앱에 고유한 기능만 처리하고 있습니다.

00:13:09.000 --> 00:13:16.000
더 이상 문서 관리의 기본 작업이나 내비게이션 바의 기본 구성을 관리할 필요가 없습니다.

00:13:16.000 --> 00:13:22.000
대신 앱의 독특한 핵심 요소에 집중할 수 있습니다.

00:13:22.000 --> 00:13:30.000
이것이 문서 중심 앱을 한 단계 끌어올리고 사용자에게 훌륭한 경험을 제공하기 위해 알아야 할 전부입니다.

00:13:30.000 --> 00:13:33.000
UIDocument를 사용하도록 데이터 모델을 변환하세요.

00:13:33.000 --> 00:13:39.000
그런 다음 콘텐츠 보기 컨트롤러를 변환하여 새로운 UIDocumentViewController 기본 클래스를 사용하세요.

00:13:39.000 --> 00:13:46.000
그 후, 뷰 컨트롤러를 살펴보고 더 이상 필요하지 않은 모든 코드를 제거하세요.

00:13:46.000 --> 00:13:47.000
봐줘서 고마워.

00:13:47.000 --> 23:59:59.000
♪ ♪

