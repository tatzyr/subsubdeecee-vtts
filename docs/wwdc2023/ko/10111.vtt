WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:14.000
Raffael Hannemann: 안녕하세요, SwiftUI와 함께 Go Beyond the Window에 오신 것을 환영합니다.

00:00:14.000 --> 00:00:20.000
저는 라파이고, 애플의 엔지니어이며, 나중에 제 동료 마크와 합류했습니다.

00:00:20.000 --> 00:00:33.000
오늘, 우리는 당신이 이미 알고 있는 도구와 프레임워크로 진정한 몰입형 경험을 만들기 위해 xrOS의 모든 기능을 활용하는 것이 얼마나 쉬운지 보여줄 것입니다.

00:00:33.000 --> 00:00:39.000
iOS용 AR 앱을 개발하면서 증강 현실에 이미 익숙할 수 있습니다.

00:00:39.000 --> 00:00:52.000
지난 몇 년 동안, 우리는 iPhone과 iPad를 위한 풍부한 AR 앱을 만들기 위해 ARKit과 RealityKit을 포함한 많은 도구와 프레임워크를 도입하고 확장했습니다.

00:00:52.000 --> 00:01:05.000
이 앱을 사용하면 대화형 사용자 인터페이스와 가상 객체로 사용자 환경을 보강하여 현실 세계와 상상력 사이의 경계를 흐리게 할 수 있습니다.

00:01:05.000 --> 00:01:15.000
올해, xrOS의 출시와 함께, 우리는 몰입형 경험을 시작으로 AR을 완전히 새로운 차원으로 끌어올리고 있습니다.

00:01:15.000 --> 00:01:24.000
이러한 경험에서, 당신의 애플리케이션은 당신 주변의 창과 3차원 콘텐츠를 포함한 UI를 표시합니다.

00:01:24.000 --> 00:01:29.000
주변 환경은 여전히 볼 수 있으며, 사실, 심지어 경험의 일부가 된다.

00:01:29.000 --> 00:01:39.000
앱의 요소를 표면에 고정하고 가상 물체와 효과로 현실 세계를 보강하고 풍부하게 할 수 있습니다.

00:01:39.000 --> 00:01:46.000
그리고 나서 한 걸음 더 나아가 전체 공간을 덮는 완전히 몰입감 있는 경험이 있습니다.

00:01:46.000 --> 00:01:49.000
당신의 앱은 당신이 보는 것을 완전히 제어합니다.

00:01:49.000 --> 00:01:53.000
이것이 열릴 모든 가능성에 대해 생각해 보세요.

00:01:53.000 --> 00:02:01.000
그리고 무엇보다도, 이 모든 것은 당신이 이미 익숙한 도구, 프레임워크 및 패턴으로 가능합니다.

00:02:01.000 --> 00:02:06.000
그리고 이것의 핵심은 SwiftUI의 몰입형 공간이다.

00:02:06.000 --> 00:02:08.000
시작하자.

00:02:08.000 --> 00:02:14.000
다른 세션에서, 당신은 올해 우리가 SwiftUI에 3차원을 추가하고 있다는 것을 배웠습니다.

00:02:14.000 --> 00:02:27.000
xrOS에서 창과 볼륨을 제시하고 SwiftUI의 사용하기 쉬운 선언적 패턴으로 3차원 사용자 인터페이스 요소를 표시할 수 있습니다.

00:02:27.000 --> 00:02:33.000
창과 볼륨 모두 범위 내에서 콘텐츠를 표시할 수 있습니다.

00:02:33.000 --> 00:02:43.000
그렇다면 xrOS가 제공하는 무한한 공간을 최대한 활용하고 진정으로 몰입감 있는 경험을 만들고 싶다면 어떨까요?

00:02:43.000 --> 00:02:51.000
당신은 창문의 경계 너머로 당신의 물건을 머리 주위로 놓고 그 한가운데에 있고 싶을 수도 있습니다.

00:02:51.000 --> 00:02:55.000
그리고 이것이 우리가 공간을 설계한 것이다.

00:02:55.000 --> 00:03:04.000
창과 볼륨 옆에 있는 공간은 xrOS에서 사용자 인터페이스를 제공하는 일종의 컨테이너입니다.

00:03:04.000 --> 00:03:10.000
이 세션에서, 우리는 공간과 몰입형 경험을 만드는 데 사용할 수 있는 방법에 초점을 맞출 것입니다.

00:03:10.000 --> 00:03:16.000
먼저 스페이스를 시작하고 콘텐츠를 표시하는 방법을 알아봅시다.

00:03:16.000 --> 00:03:26.000
그런 다음 마크는 당신이 우주를 관리하고, 우주로 직접 발사하고, 우주가 허용하는 모든 사용자 지정을 설명하는 방법을 보여줄 것입니다.

00:03:26.000 --> 00:03:30.000
그럼 시작해서 코드를 확인해 봅시다.

00:03:30.000 --> 00:03:33.000
나는 우주 탐사에 대해 정말 흥분된다.

00:03:33.000 --> 00:03:44.000
우리가 다른 세션에서 작업해온 월드 앱을 계속하기 위해, 우리는 태양계를 탐험할 수 있는 공간으로 앱을 단계별로 확장할 것입니다.

00:03:44.000 --> 00:03:49.000
공간은 몰입형 공간이라고 불리는 SwiftUI의 새로운 장면 유형이다.

00:03:49.000 --> 00:03:58.000
다른 장면 유형과 마찬가지로, 앱에서 몰입형 공간을 정의한 다음 언제든지 열고 닫을 수 있습니다.

00:03:58.000 --> 00:04:09.000
전체 앱을 하나의 스페이스로 구성할 수 있지만, 창과 볼륨 옆에 하나 이상의 스페이스를 추가하여 기존 앱을 확장할 수도 있습니다.

00:04:09.000 --> 00:04:12.000
당신의 앱은 한 번에 하나의 공간을 열 수 있습니다.

00:04:12.000 --> 00:04:17.000
다른 공간을 열기 전에, 먼저 현재 공간을 무시하세요.

00:04:17.000 --> 00:04:24.000
그리고 다시, 다른 장면 유형과 마찬가지로, 당신은 장면의 본문에 뷰 계층 구조를 배치합니다.

00:04:24.000 --> 00:04:32.000
우리의 SolarSystem을 ImmersiveSpace에 배치함으로써, 그것은 클리핑 경계 없이 렌더링될 것이다.

00:04:32.000 --> 00:04:36.000
잠시 시간을 내어 이것이 얼마나 쉬운지 지적해 봅시다.

00:04:36.000 --> 00:04:44.000
이 세 줄만으로, 우리는 태양계 전망을 풍부하고 몰입감 있는 경험으로 가져왔습니다.

00:04:44.000 --> 00:04:46.000
세부 사항에 대해 자세히 알아보자.

00:04:46.000 --> 00:04:54.000
공간을 여는 것은 이 장면을 다른 장면 유형에서 돋보이게 하는 몇 가지 특별한 행동을 가능하게 한다.

00:04:54.000 --> 00:05:04.000
여러 앱이 나란히 실행될 때, 그것들은 모두 같은 공간에 함께 표시되며, 이것이 우리가 이것을 공유 공간이라고 부르는 이유입니다.

00:05:04.000 --> 00:05:11.000
앱이 몰입형 공간 장면을 표시하면, 앱은 우리가 풀 스페이스라고 부르는 것을 입력합니다.

00:05:11.000 --> 00:05:15.000
그러면 당신의 앱은 사용자에게 보이는 유일한 앱이 될 것입니다.

00:05:15.000 --> 00:05:22.000
다른 모든 응용 프로그램은 산만함 없이 콘텐츠가 나타날 수 있는 공간을 만들기 위해 사라질 것입니다.

00:05:22.000 --> 00:05:27.000
나중에, 공간을 해제하면, 다른 앱이 다시 나타날 것입니다.

00:05:27.000 --> 00:05:33.000
몰입형 공간은 장면이기 때문에, 암묵적으로 자체 좌표계를 정의한다.

00:05:33.000 --> 00:05:40.000
그래서 당신이 공간에 두는 모든 것은 공간의 기원에 상대적으로 배치됩니다.

00:05:40.000 --> 00:05:48.000
그리고 공간의 기원은 사용자 아래에 있으며, 공간이 처음 열릴 때 사용자의 발에 가깝다.

00:05:48.000 --> 00:05:50.000
그래서 이제 너는 기본을 알고 있어.

00:05:50.000 --> 00:05:54.000
당신의 공간의 내용을 어떻게 표시하는지에 대해 이야기해 봅시다.

00:05:54.000 --> 00:06:01.000
ImmersiveSpace는 장면 유형이므로, 뷰 계층 구조를 바로 배치할 수 있습니다.

00:06:01.000 --> 00:06:11.000
ImmersiveSpace는 Swift UI 보기를 취할 수 있으며, 클리핑 경계가 없지만, Space는 여전히 레이아웃 범위 내에서 콘텐츠를 배치합니다.

00:06:11.000 --> 00:06:18.000
당신이 공간에 두는 모든 것은 당신이 이미 익숙한 것과 동일한 레이아웃 시스템을 사용합니다.

00:06:18.000 --> 00:06:25.000
하지만 당신의 공간의 기원이 사용자의 발 근처에 있기 때문에, 당신은 아마 당신의 콘텐츠를 거기에 넣고 싶지 않을 것입니다.

00:06:25.000 --> 00:06:29.000
RealityView에 대해 이야기해 봅시다.

00:06:29.000 --> 00:06:41.000
SwiftUI, ARKit 및 RealityKit을 최대한 활용하고 싶다면, 새로운 RealityView의 강력한 기능과 함께 ImmersiveSpace를 사용하는 것이 좋습니다.

00:06:41.000 --> 00:06:53.000
ImmersiveSpace와 RealityView는 함께 진행되며, 훌륭한 몰입형 경험을 구축하는 데 필요한 모든 기능을 제공하기 위해 특별히 설계되었습니다.

00:06:53.000 --> 00:07:05.000
예를 들어, RealityView는 여기에 표시된 바와 같이 별 필드를 로드하고 표시하기 위해 자산의 비동기 로드에 대한 지원이 내장되어 있습니다.

00:07:05.000 --> 00:07:11.000
하지만 비동기 로딩 옆에, 몰입형 공간 장면에 RealityView를 넣으면 훨씬 더 많은 것을 할 수 있습니다.

00:07:11.000 --> 00:07:16.000
ARKit 앵커의 RealityView 내에 요소를 배치하세요.

00:07:16.000 --> 00:07:26.000
그리고 앱이 손과 헤드 포즈 데이터에 액세스할 수 있기 때문에, 스페이스가 열려 있는 동안, 그 데이터를 사용하여 RealityView 내에 엔티티를 배치할 수 있습니다.

00:07:26.000 --> 00:07:29.000
마크가 나중에 너에게 멋진 걸 보여줄 거야.

00:07:29.000 --> 00:07:32.000
좌표 공간에 대한 메모.

00:07:32.000 --> 00:07:36.000
RealityView는 콘텐츠를 표시하기 위해 RealityKit을 사용합니다.

00:07:36.000 --> 00:07:45.000
따라서 RealityView 내에서 엔티티를 배치할 때, 좌표 공간 방향은 SwiftUI의 레이아웃 시스템과 다르다는 것을 명심하십시오.

00:07:45.000 --> 00:07:52.000
SwiftUI에서, y축은 아래쪽을 가리키고 z축은 당신을 가리킵니다.

00:07:52.000 --> 00:08:04.000
이것은 창, 볼륨 및 몰입형 공간에 적용되는 반면, RealityKit에서는 y축이 위쪽을 가리킵니다.

00:08:04.000 --> 00:08:07.000
RealityView에 대해 다룰 것이 많다.

00:08:07.000 --> 00:08:14.000
모든 세부 사항에 대해 워치리스트에 "RealityKit으로 공간 경험 구축"을 추가하세요.

00:08:14.000 --> 00:08:17.000
이제 코드를 좀 작성해 봅시다.

00:08:17.000 --> 00:08:25.000
우리는 WorldApp 또는 적어도 단순화된 버전을 사용하고, 단계별로 몰입형 태양계를 추가할 것입니다.

00:08:25.000 --> 00:08:28.000
우리는 몰입형 공간을 정의하는 것으로 시작합니다.

00:08:28.000 --> 00:08:34.000
WindowGroup과 마찬가지로, 식별자, 값 유형 또는 둘 다를 할당할 수 있습니다.

00:08:34.000 --> 00:08:38.000
이 경우, 우리는 태양 식별자를 할당합니다.

00:08:38.000 --> 00:08:42.000
우리는 나중에 공간을 열기 위해 이 식별자를 사용할 것이다.

00:08:42.000 --> 00:08:47.000
그런 다음 우리는 우주에 태양계 시야를 배치한다.

00:08:47.000 --> 00:08:56.000
또한 앱의 간단한 표준 창을 정의해 봅시다. 앱이 태양계를 볼 수 있는 컨트롤로 시작될 때 표시하고 싶습니다.

00:08:56.000 --> 00:09:00.000
이것은 월드 앱이 하는 것과 비슷하다.

00:09:00.000 --> 00:09:10.000
그래서 우리는 WindowGroup을 사용하여 새로운 실행 창을 정의하고, 공간을 열 수 있는 컨트롤과 함께 몇 가지 정보를 추가합니다.

00:09:10.000 --> 00:09:13.000
그 컨트롤은 그냥 버튼이야.

00:09:13.000 --> 00:09:18.000
그것을 클릭할 때, 우리는 제목을 바꾸고 공간을 열고 싶습니다.

00:09:18.000 --> 00:09:25.000
창을 제어하기 위해, SwiftUI는 openWindow 및 dismissWindow 환경 작업을 제공합니다.

00:09:25.000 --> 00:09:33.000
그리고 몰입형 공간을 위해, 우리는 새로운 openImmersiveSpace를 추가하고 ImmersiveSpace 작업을 해제합니다.

00:09:33.000 --> 00:09:40.000
우리는 환경으로부터 두 가지 행동을 얻는다.

00:09:40.000 --> 00:09:46.000
그런 다음 버튼이 호출될 때 이러한 작업을 사용할 수 있습니다.

00:09:46.000 --> 00:09:51.000
공간을 열 때, 우리는 이전에 정의한 식별자를 전달한다.

00:09:51.000 --> 00:09:59.000
한 번에 하나의 공간만 열 수 있기 때문에, dismissImmersiveSpace 액션은 논쟁이 필요하지 않습니다.

00:09:59.000 --> 00:10:03.000
이 시스템은 특정 기간 동안 당신의 공간을 안팎으로 움직이게 합니다.

00:10:03.000 --> 00:10:11.000
이러한 환경 작업은 비동기이므로 애니메이션의 완성에 반응할 수 있습니다.

00:10:11.000 --> 00:10:20.000
몰입형 공간을 여는 것은 실패할 수 있으며, openImmersiveSpace는 통화가 실패했는지 성공했는지 결과를 통해 알려줍니다.

00:10:20.000 --> 00:10:25.000
적절한 오류 처리가 있는지 확인하세요.

00:10:25.000 --> 00:10:32.000
처음에 정의한 앱으로 돌아가서, 이제 바로 여기에 LaunchWindow를 추가할 수 있습니다.

00:10:32.000 --> 00:10:35.000
우리의 두 장면의 순서에 주목하세요.

00:10:35.000 --> 00:10:43.000
LaunchWindow는 장면 목록의 첫 번째이므로, SwiftUI는 앱이 시작될 때 실행 창을 표시합니다.

00:10:43.000 --> 00:10:49.000
몰입형 공간은 출시 시 보이지 않지만, 사용자가 버튼을 클릭할 때만 표시됩니다.

00:10:49.000 --> 00:10:53.000
이걸 시뮬레이터에서 실행하자.

00:10:53.000 --> 00:10:56.000
앱이 실행되면, 우리는 실행 창을 볼 수 있습니다.

00:10:56.000 --> 00:11:07.000
그리고 버튼을 클릭하기만 하면, 태양계가 우리 거실에 바로 나타납니다.

00:11:07.000 --> 00:11:15.000
그래서 이제 우리는 표준 창과 태양계를 표시하는 공간으로 구성된 다중 장면 앱을 정의했습니다.

00:11:15.000 --> 00:11:18.000
당신은 월드 앱에서 사용된 모델을 보았습니다.

00:11:18.000 --> 00:11:25.000
몰입형 앱을 만들 때, 당신은 확실히 당신의 공간에 많은 세부 사항이 있는 3D 자산을 표시하고 싶을 것입니다.

00:11:25.000 --> 00:11:33.000
자산이 완전히 로드되고 앱에 의해 렌더링될 준비가 되는 데 시간이 걸릴 수 있다는 것을 명심하세요.

00:11:33.000 --> 00:11:45.000
최고의 사용자 경험을 위해, 3D 자산을 비동기적으로 로드하는 새로운 Model3D 및 RealityView API를 활용하십시오.

00:11:45.000 --> 00:11:52.000
이 코드에서, 우리는 모델이 여전히 로드되는 동안 텍스트와 무언가 잘못되었을 경우를 대비하여 오류를 표시합니다.

00:11:52.000 --> 00:12:00.000
그리고 이제, 마크는 당신의 우주를 관리하는 방법과 더 나은 우주로 발사하는 방법을 알려줄 것입니다.

00:12:00.000 --> 00:12:01.000
마크 마: 고마워, 라파.

00:12:01.000 --> 00:12:09.000
우리가 방금 시연했듯이, 단 몇 줄의 코드로 몰입형 공간을 월드 앱에 통합하는 것은 믿을 수 없을 정도로 쉬웠다.

00:12:09.000 --> 00:12:22.000
앱을 몰입형 경험으로 바꾸는 것은 또한 장면 단계로 시스템과 함께 공간을 관리하고, 공간과 다른 장면 간의 융합을 조정하고, 다양한 스타일로 제시하는 것을 포함합니다.

00:12:22.000 --> 00:12:28.000
다른 SwiftUI 장면 유형과 마찬가지로, 몰입형 공간은 시스템에서 처리하는 동일한 장면 단계를 지원합니다.

00:12:28.000 --> 00:12:32.000
이것은 또한 당신의 공간이 항상 SwiftUI의 장면 단계 중 하나에 있다는 것을 의미합니다.

00:12:32.000 --> 00:12:35.000
공간을 열면, 그것은 그것을 활성 단계로 옮긴다.

00:12:35.000 --> 00:12:39.000
그리고 언제든지, 그것은 비활성 단계로 바뀔 수 있다.

00:12:39.000 --> 00:12:48.000
예를 들어, 시스템 정의 경계에서 벗어나거나 시스템 경고가 표시되면, 공간과 창이 일시적으로 숨겨져 비활성 단계로 이동합니다.

00:12:48.000 --> 00:12:56.000
사용자가 경험에 다시 들어가면, 당신의 공간과 창이 표시되고, 장면 단계가 다시 활성화되도록 업데이트됩니다.

00:12:56.000 --> 00:13:01.000
월드 앱의 경우, 비활성 장면 단계를 처리하기 위해 몇 줄의 빠른 코드를 추가할 수 있습니다.

00:13:01.000 --> 00:13:07.000
우주의 상태가 바뀌었다는 것을 나타내기 위해 지구 모델을 절반 크기로 축소합시다.

00:13:07.000 --> 00:13:11.000
또한 콘텐츠를 복원하기 위해 활성 단계를 처리하도록 합시다.

00:13:11.000 --> 00:13:16.000
그리고 명심하세요, 공간은 하드웨어나 소프트웨어 수단을 사용하여 언제든지 해산될 수 있습니다.

00:13:16.000 --> 00:13:19.000
그러니 이것을 시뮬레이터에서 확인해 봅시다.

00:13:19.000 --> 00:13:24.000
우리는 공간을 열고 앱이 비활성 단계를 어떻게 처리하는지 보여줄 것입니다.

00:13:24.000 --> 00:13:30.000
예를 들어, 이것은 경고가 나타날 때 트리거될 수 있다.

00:13:30.000 --> 00:13:35.000
경고가 나타나면, 이전 샘플 코드의 결과로 스페이스 콘텐츠의 규모가 변경되었다는 점에 유의하십시오.

00:13:35.000 --> 00:13:41.000
그리고 우리가 경보를 해제했을 때, 우주는 축소되었고, 현재 활성화된 단계에 반응했다.

00:13:41.000 --> 00:13:48.000
SwiftUI는 이러한 전환을 처리하고 애니메이션화할 수 있게 해준다.

00:13:48.000 --> 00:13:53.000
공간을 관리하는 또 다른 좋은 방법은 다른 창의 콘텐츠를 공간과 통합하는 것입니다.

00:13:53.000 --> 00:14:07.000
예를 들어, 메인 창 옆에 지구 모델을 재배치하고 싶다면, 우리는 몰입형 공간 좌표계에서 창의 위치를 알아야 하지만, 두 물체 모두 자체 좌표계를 정의합니다.

00:14:07.000 --> 00:14:15.000
그래서 이 문제를 해결하기 위해, SwiftUI는 몰입형 공간이라는 새로운 좌표 공간을 제공한다.

00:14:15.000 --> 00:14:18.000
그리고 그것은 몰입형 공간의 좌표계를 나타낸다.

00:14:18.000 --> 00:14:24.000
이 좌표계에 접근하기 위해, 우리는 기하학 리더 내부의 창을 3D 컨텍스트로 캡슐화합니다.

00:14:24.000 --> 00:14:34.000
그런 다음 변환과 같은 좌표 공간을 취하고 몰입형 공간 유형을 전달하는 기존 API를 사용하여 새로운 좌표계에서 proxy.transform을 얻을 수 있습니다.

00:14:34.000 --> 00:14:37.000
이 변환을 사용하여, 우리는 탭에서 지구의 위치를 업데이트할 것이다.

00:14:37.000 --> 00:14:40.000
이걸 시뮬레이터에서 실행하자.

00:14:40.000 --> 00:14:44.000
우리는 지구와 메인 창을 볼 수 있도록 공간을 다시 열 것이다.

00:14:44.000 --> 00:14:49.000
우리는 창문을 약간 옮겼고 그 바로 앞에 지구를 재배치하고 싶다.

00:14:49.000 --> 00:14:53.000
이제 지구가 두드려질 때, 그것은 우리가 예상했던 곳에 위치할 것이다.

00:14:53.000 --> 00:15:01.000
그리고 좌표 변환을 사용하면 콘텐츠를 원하는 곳에 정확하게 배치하고 공간과 창 사이에서 자산을 이동하는 것이 쉽습니다.

00:15:01.000 --> 00:15:13.000
좌표 변환을 사용하는 다른 시간에는 SharePlay의 몰입형 공간이 포함되며, 여기서 우리는 개인 몰입 공간뿐만 아니라 그룹 몰입 공간에서도 콘텐츠의 위치를 관리할 수 있습니다.

00:15:13.000 --> 00:15:24.000
앱이 SharePlay와 그룹 몰입형 공간을 지원하는 경우, 다른 참가자가 참여할 때, 시스템은 공간의 출처를 공간 템플릿에 의해 정의된 공유 위치로 이동할 수 있습니다.

00:15:24.000 --> 00:15:31.000
자세한 내용은 "공간 공유 재생 경험 구축" 세션을 확인하세요.

00:15:31.000 --> 00:15:40.000
우리의 월드 앱은 이제 장면 단계를 처리하고 다른 창의 콘텐츠를 결합할 수 있지만, 우리는 아직 스페이스가 제공하는 모든 기능을 사용하지 않았습니다.

00:15:40.000 --> 00:15:44.000
우리는 그들이 훨씬 더 놀랍도록 몰입 스타일을 탐구할 것이다.

00:15:44.000 --> 00:15:50.000
몰입 스타일은 공간 콘텐츠가 주변 환경을 어떻게 장악할 수 있는지에 대한 다양한 프레젠테이션을 제공합니다.

00:15:50.000 --> 00:15:58.000
혼합 스타일, 온라인에서 프로그레시브 스타일 또는 모든 방향으로 당신을 둘러싸고 있는 완전한 스타일과 함께 콘텐츠를 제시할 수 있습니다.

00:15:58.000 --> 00:16:02.000
이 모든 스타일을 활용하기 위해 앱을 업데이트합시다.

00:16:02.000 --> 00:16:06.000
앱을 다시 열고 몰입형 공간을 정의한 곳으로 돌아가자.

00:16:06.000 --> 00:16:12.000
현재, 그 공간은 기본인 혼합 침수 스타일로 태양계를 제시한다.

00:16:12.000 --> 00:16:16.000
스타일을 바꾸는 것은 쉽고 역동적일 수도 있다.

00:16:16.000 --> 00:16:23.000
먼저, ImmersionStyle 유형의 새로운 상태 변수를 추가하고 Space가 시작되기를 원하는 기본값을 할당해 봅시다.

00:16:23.000 --> 00:16:26.000
여기서 혼합된 스타일을 유지하자.

00:16:26.000 --> 00:16:32.000
그런 다음 immersionStyle 장면 수정자를 사용하고 Space가 지원하기를 원하는 스타일 목록을 정의합니다.

00:16:32.000 --> 00:16:38.000
현재 스타일에 대한 참조를 갖기 위해, 우리는 상태 변수를 바인딩으로 전달합니다.

00:16:38.000 --> 00:16:46.000
만약 우리가 태양계에 바인딩을 전달한다면, 우리는 또한 현재 스타일을 읽고 지도 스타일로 전환하도록 제어할 수 있다.

00:16:46.000 --> 00:16:54.000
이 샘플에서, 우리는 태양계를 확장하면서 다른 스타일로 갈 수 있도록 배율 제스처로 전환할 것이다.

00:16:54.000 --> 00:17:01.000
지금까지, 우리는 몰입형 공간을 가져오는 것이 얼마나 쉬운지 보여주기 위해 시뮬레이터에서 월드 앱을 실행해 왔습니다.

00:17:01.000 --> 00:17:07.000
하지만 이러한 스타일이 우리 주변 환경과 어떻게 작동하는지 정말 잘 이해하기 위해, 장치에서 우리의 경험을 실행해 봅시다.

00:17:07.000 --> 00:17:14.000
그리고 나중에, 우리는 당신의 온디바이스 경험을 실제로 향상시키는 더 많은 사용자 정의를 보여줄 것입니다.

00:17:14.000 --> 00:17:19.000
기본 스타일로 스페이스를 열면 혼합 몰입 스타일이 됩니다.

00:17:19.000 --> 00:17:25.000
이 스타일은 훌륭하지만, 콘텐츠에 좀 더 몰입하고 별을 보고 싶을 수도 있습니다.

00:17:25.000 --> 00:17:27.000
그래서 당신은 확대 제스처를 수행할 수 있습니다.

00:17:27.000 --> 00:17:32.000
그리고 콘텐츠가 커짐에 따라, 결국 공간은 진보적인 스타일로 전환한다.

00:17:32.000 --> 00:17:37.000
이 스타일은 패스스루와 완전한 몰입형 경험 사이의 다리이다.

00:17:37.000 --> 00:17:43.000
그것은 당신이 주변 환경과 함께 당신 앞에 있는 포털 내의 몰입형 공간 콘텐츠를 볼 수 있게 해줍니다.

00:17:43.000 --> 00:17:48.000
이 스타일은 꽤 몰입감 있게 느껴지지만, 당신을 둘러싼 것을 알 수 있게 해준다.

00:17:48.000 --> 00:17:55.000
이것은 또한 당신이 근처의 사람들과 채팅하고, 편안하게 앉을 곳을 알고, 심지어 주변 환경과 상호 작용할 수 있다는 것을 의미합니다.

00:17:55.000 --> 00:18:01.000
그리고 일단 편안해지면, 디지털 크라운을 돌리면, 스타일의 몰입도를 높일 수 있습니다.

00:18:01.000 --> 00:18:03.000
그거 정말 멋지지 않아?

00:18:03.000 --> 00:18:06.000
이제 당신은 은하계에서 우주비행사처럼 떠다니고 있습니다.

00:18:06.000 --> 00:18:11.000
그리고 더 많은 주변을 다시 보고 싶다면, 디지털 크라운을 다시 돌려 몰입도를 줄이세요.

00:18:11.000 --> 00:18:18.000
이를 통해 프로그레시브 스타일 내에서 콘텐츠가 얼마나 몰입할 수 있는지 빠르고 쉽게 제어할 수 있습니다.

00:18:18.000 --> 00:18:21.000
하지만 아마도 당신은 항상 완전히 몰입하는 것을 좋아할 것입니다.

00:18:21.000 --> 00:18:27.000
이것은 당신을 둘러싸고 있거나 즉시 당신을 완전히 다른 세계로 데려가는 경험에 좋습니다.

00:18:27.000 --> 00:18:32.000
지금까지, 당신은 제스처에 따라 다른 스타일로 전환하는 것이 얼마나 쉬운지 배웠습니다.

00:18:32.000 --> 00:18:41.000
완전한 몰입으로 가는 것은 다르지 않으며, 스타일 바인딩을 업데이트하기 위해 지구를 다시 확장하면서 그것을 경험하게 될 것입니다.

00:18:41.000 --> 00:18:46.000
다른 스타일 사이를 전환하는 것이 얼마나 쉽고 보이지 않는지 주목하세요.

00:18:46.000 --> 00:18:48.000
이제 그 공간은 완전히 몰입하게 되었다.

00:18:48.000 --> 00:18:53.000
그리고 SwiftUI를 사용하면, 몇 줄의 코드만 필요했다.

00:18:53.000 --> 00:19:05.000
그리고 디지털 크라운을 누르면, 경험을 떠날 준비가 될 때마다 패스스루로 돌아갈 수 있습니다.

00:19:05.000 --> 00:19:11.000
우리는 방금 장면 단계 변화에 반응하고 스타일을 제어하여 공간을 관리하는 다양한 방법을 시연했습니다.

00:19:11.000 --> 00:19:17.000
이제 우리의 공간을 다음 단계로 끌어올리기 위해 몇 가지 최종 개선 사항을 추가합시다.

00:19:17.000 --> 00:19:24.000
장치의 공간 컴퓨팅 기능을 사용하면 공간을 쉽게 향상시켜 훨씬 더 흥미롭게 느낄 수 있습니다.

00:19:24.000 --> 00:19:33.000
그래서 우주로 직접 발사하고, 주변 환경에 효과를 추가하고, 가상의 손과 같은 몇 가지 옵션을 살펴봅시다.

00:19:33.000 --> 00:19:37.000
지금까지, 우리의 앱은 버튼 클릭 한 번으로 공간을 열 수 있게 해준다.

00:19:37.000 --> 00:19:44.000
하지만 완전히 몰입형 게임이 있는 경우와 같이 앱이 시작될 때 바로 몰입형 경험을 시작하고 싶다면 어떨까요?

00:19:44.000 --> 00:19:50.000
몰입형 공간으로 직접 시작하려면, 앱의 장면 매니페스트를 구성해야 합니다.

00:19:50.000 --> 00:19:55.000
ImmersiveSpace 애플리케이션 역할과 몰입 스타일을 설정하기만 하면 됩니다.

00:19:55.000 --> 00:19:59.000
평소처럼 스페이스 콘텐츠를 첨부하면 바로 열립니다.

00:19:59.000 --> 00:20:05.000
사용자가 스페이스를 해제하기로 선택하면 앱을 창으로 되돌릴 수도 있습니다.

00:20:05.000 --> 00:20:12.000
다음으로, 주변 효과 선호도를 통해 스페이스 콘텐츠에 더 초점을 맞추기 위해 패스스루를 어둡게 할 수 있습니다.

00:20:12.000 --> 00:20:17.000
우리는 우주가 진보적인 스타일로 전환할 때 주변 환경을 어둡게 하고 싶습니다.

00:20:17.000 --> 00:20:26.000
우리는 선호하는 주변 효과 수정자를 어둡게 설정하여 태양계가 나타나면 주변 환경이 자동으로 어두워질 것입니다.

00:20:26.000 --> 00:20:34.000
upperLimbVisibility 수정자를 사용하면 패스스루를 사용할 수 없기 때문에 완전히 몰입할 수 있는 공간에서 손을 숨길 수 있습니다.

00:20:34.000 --> 00:20:39.000
우리의 세계 경험을 위해, 우리는 단순히 공간을 열 때 우리의 선호도를 거짓으로 설정할 것이다.

00:20:39.000 --> 00:20:44.000
그리고 그렇게, 우리는 upperLimbVisibility 선호도를 바꿀 수 있다.

00:20:44.000 --> 00:20:53.000
완전한 출현 스타일에 있는 동안 손을 숨기는 것은 우리가 대신 가상의 손을 보여줄 수 있다는 것을 의미하며, 우리는 월드 앱에서 우주 장갑을 보여줄 것입니다.

00:20:53.000 --> 00:20:57.000
SpaceGloves라는 새로운 뷰를 만드는 것으로 시작합시다.

00:20:57.000 --> 00:21:03.000
다음으로, 우리는 공간에서 장갑을 렌더링할 수 있도록 RealityView를 추가할 것입니다.

00:21:03.000 --> 00:21:08.000
그런 다음 RealityView에서 루트 엔티티를 만들어 엔티티를 추가하여 렌더링할 수 있습니다.

00:21:08.000 --> 00:21:14.000
그런 다음 우리는 자산을 엔티티에 로드하고 루트의 자식으로 추가할 것입니다.

00:21:14.000 --> 00:21:24.000
엔티티를 올바르게 배치하려면 ARKit과 손 추적 API를 사용해야 하며, 손 추적 시스템도 시작해야 합니다.

00:21:24.000 --> 00:21:29.000
우리의 다음 단계는 자산이 우리 손에 올바르게 고정되도록 하는 것이다.

00:21:29.000 --> 00:21:32.000
우리는 손 추적 앵커 업데이트를 확인해야 할 것이다.

00:21:32.000 --> 00:21:37.000
그리고 다음으로, 손 키랄리티를 확인하세요.

00:21:37.000 --> 00:21:43.000
그런 다음 우리는 손 자산의 변환이 앵커와 같은지 확인할 것이다.

00:21:43.000 --> 00:21:49.000
이 예에서, 우리는 또한 우리의 자산이 ARKit이 제공하는 것과 동일한 공동 이름을 가지고 있는지 확인했습니다.

00:21:49.000 --> 00:21:57.000
이렇게 하면 앵커 스켈레톤 조인트 이름을 올바르게 매핑할 수 있으며 장갑 엔티티가 자동으로 고정됩니다.

00:21:57.000 --> 00:22:03.000
그러니 우리의 공간이 정의된 곳으로 돌아가서 SpaceGloves 뷰를 포함하도록 합시다.

00:22:03.000 --> 00:22:05.000
그게 우리가 가상의 손에 필요한 전부야.

00:22:05.000 --> 00:22:12.000
더 많은 ARKit 사용자 지정 및 자세한 내용은 "공간 경험을 위한 ARKit 앱 개발"을 확인하세요.

00:22:12.000 --> 00:22:17.000
이제 장치에서 이러한 사용자 지정을 시도해 봅시다.

00:22:17.000 --> 00:22:23.000
세계 경험은 다시 시작되며, 공간은 기본 몰입 스타일로 다시 열릴 것이다.

00:22:23.000 --> 00:22:29.000
지구에서 확대 제스처를 사용함으로써, 앱은 진보적인 스타일로 전환할 것이다.

00:22:29.000 --> 00:22:34.000
공간이 열리면, 코드는 주변을 어둡게 수정할 것이다.

00:22:34.000 --> 00:22:41.000
당신은 주변 효과 API를 사용하여 패스스루를 어둡게 함으로써 훨씬 더 몰입감을 느끼게 했습니다.

00:22:41.000 --> 00:22:45.000
그것은 적용하기 쉬웠고 경험에 집중할 수 있는 좋은 방법이다.

00:22:45.000 --> 00:22:51.000
이것은 지금 꽤 몰입할 수 있지만, 다음 사용자 지정으로 한 걸음 더 나아갈 수 있습니다.

00:22:51.000 --> 00:23:03.000
우리의 이전 코드가 보여주었듯이, 당신이 완전한 몰입으로 전환할 때, 당신의 손은 사라지고 손 추적 덕분에 당신의 손이 있는 곳에 가상 공간 장갑이 나타날 것입니다.

00:23:03.000 --> 00:23:15.000
ARKit과 함께 RealityView를 사용하고 손 추적을 활성화함으로써, 당신은 가상 우주 비행사처럼 우주로 발사할 수 있었고, 정말 기분이 좋습니다.

00:23:15.000 --> 00:23:24.000
몇 가지 개선 사항과 사용자 지정으로, 우리는 World 앱을 공유 공간을 넘어 완전히 몰입감 있는 경험으로 바꿀 수 있었습니다.

00:23:24.000 --> 00:23:35.000
그리고 이제 새로운 Immersive Space API를 사용하여 경험을 쉽게 만들고, 다양한 스타일로 자랑하며, 가능한 사용자 정의로 창의력을 발휘하는 것은 당신에게 달려 있습니다.

00:23:35.000 --> 00:23:44.000
주변 환경을 변화시키고 새롭고 몰입감 있는 경험을 만드는 데 필요한 모든 도구를 제공하는 강력하고 사용하기 쉬운 API입니다.

00:23:44.000 --> 00:23:46.000
우리와 함께 해줘서 고마워.

00:23:46.000 --> 23:59:59.000
♪

