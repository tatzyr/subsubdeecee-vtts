WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
저스틴: 안녕! 제 이름은 저스틴이고, 저는 사진 팀의 일원입니다.

00:00:15.000 --> 00:00:22.000
오늘 저는 시스템 사진 선택기에 대한 새로운 개선 사항과 앱에서 사용할 수 있는 모든 훌륭한 새로운 API를 안내할 것입니다.

00:00:22.000 --> 00:00:26.000
우리는 iOS 14에서 재설계된 피커 UI를 도입했습니다.

00:00:26.000 --> 00:00:30.000
그것은 검색과 확대 가능한 그리드와 같은 많은 훌륭한 기능을 가지고 있다.

00:00:30.000 --> 00:00:35.000
더 좋은 것은, 당신은 그것을 사용하기 위해 사진 라이브러리 액세스를 요청할 필요가 없습니다.

00:00:35.000 --> 00:00:41.000
가능할 때마다 사용자 지정 선택기를 시스템으로 교체하는 것이 좋습니다.

00:00:41.000 --> 00:00:44.000
API도 정말 사용하기 쉽다.

00:00:44.000 --> 00:00:51.000
몇 줄의 코드만 있으면, 피커를 제시하고 사용자가 선택한 이미지를 받을 수 있습니다.

00:00:51.000 --> 00:00:56.000
작년에 "사진 선택기에서 새로운 기능" 세션은 새로운 API에 대해 깊이 있게 이야기했다.

00:00:56.000 --> 00:01:07.000
이 세션에서, 저는 앱에 시스템 선택기를 삽입하여 사진 선택 경험을 더 원활하게 만들기 위해 활용할 수 있는 새로운 API에 초점을 맞출 것입니다.

00:01:07.000 --> 00:01:19.000
나중에, HDR 사진, HDR 비디오 및 시네마틱 모드 비디오를 지원하려는 경우 새로운 옵션 메뉴와 모범 사례에 대해서도 논의할 것입니다.

00:01:19.000 --> 00:01:25.000
하지만 우리가 뛰어들기 전에, 피커의 접근 모델을 빠르게 요약해 봅시다.

00:01:25.000 --> 00:01:28.000
이것은 당신이 조금 전에 본 피커입니다.

00:01:28.000 --> 00:01:34.000
앱에서 실행되는 것처럼 보이지만, 앱 위에 렌더링된 별도의 프로세스에서 실행되고 있습니다.

00:01:34.000 --> 00:01:41.000
당신의 앱은 피커에 직접 접근할 수 없으며 피커 콘텐츠의 스크린샷도 찍을 수 없습니다.

00:01:41.000 --> 00:01:47.000
사용자가 실제로 선택한 것만 앱으로 다시 전달됩니다.

00:01:47.000 --> 00:01:54.000
올해, 우리는 프로세스 외 선택기에 더 많은 구성 옵션을 가져오고 있다.

00:01:54.000 --> 00:02:04.000
새로운 ".photosPickerDisabledCapabilities" 수정자를 사용하면 특정 선택기 기능을 비활성화할 수 있으므로 자신만의 버전을 구현할 수 있습니다.

00:02:04.000 --> 00:02:11.000
예를 들어, 선택 작업을 비활성화하면 "취소" 버튼과 "추가" 버튼을 숨길 수 있습니다.

00:02:11.000 --> 00:02:24.000
새로운 ".photosPickerAccessoryVisibility" 수정자를 사용하면 탐색 모음 및 도구 모음과 같은 선택기 콘텐츠 주변의 액세서리 UI를 숨길 수 있습니다.

00:02:24.000 --> 00:02:32.000
".Frame" 및 ".padding"과 같은 표준 SwiftUI 수정자를 사용하여 피커의 크기와 위치를 지정할 수도 있습니다.

00:02:32.000 --> 00:02:40.000
"추가" 버튼이 숨겨져 있다면, 내 앱이 다중 선택 모드에서 사용자가 선택한 자산을 어떻게 받을 수 있나요?"

00:02:40.000 --> 00:02:47.000
이제 선택 동작을 ".continuous"로 설정하여 실시간 선택 업데이트를 받을 수 있습니다.

00:02:47.000 --> 00:02:59.000
그리고 마지막으로, 새로운 ".photosPickerStyle(.inline)" 수정자를 사용하여 별도의 시트로 표시하는 대신 앱에 피커를 삽입할 수 있습니다.

00:02:59.000 --> 00:03:05.000
피커가 내장되어 있지만, 여전히 별도의 프로세스로 렌더링됩니다.

00:03:05.000 --> 00:03:13.000
일부 사용자는 라이브러리 액세스를 요청하지 않고 앱이 모든 사진을 표시하는 것을 볼 때 걱정할 수 있습니다.

00:03:13.000 --> 00:03:25.000
우리는 사용자가 앱을 사용할 때 안전하다고 느낄 수 있도록 돕고 싶기 때문에, 내장된 선택기가 처음 표시되면 앱이 선택한 사진에만 액세스할 수 있다는 것을 설명하는 온보딩 UI가 자동으로 나타납니다.

00:03:25.000 --> 00:03:31.000
사진 개인 정보 보호 배지는 피커가 비공개이며 처리 중임을 나타냅니다.

00:03:31.000 --> 00:03:39.000
앱이 이미 전체 크기 선택기를 제공하는 경우, 사용자가 iOS 17로 업그레이드할 때 무시할 수 있는 배너가 나타납니다.

00:03:39.000 --> 00:03:45.000
개인 정보 보호 설정 UI도 더 자세한 설명으로 업데이트됩니다.

00:03:45.000 --> 00:03:50.000
게다가, 우리는 도서관 접근 권한 프롬프트를 약간 변경했습니다.

00:03:50.000 --> 00:03:56.000
이러한 변경 사항에 대해 자세히 알아보려면, "개인 정보 보호의 새로운 기능" 세션을 시청할 수 있습니다.

00:03:56.000 --> 00:04:00.000
좋아, 실제 API로 돌아가자.

00:04:00.000 --> 00:04:06.000
나는 그들의 사용 사례를 먼저 살펴보고, 그 다음에 각 API를 자세히 설명할 것이다.

00:04:06.000 --> 00:04:12.000
프로세스 외 선택기를 포함하려면, ".photosPickerStyle" 수정자를 사용하세요.

00:04:12.000 --> 00:04:19.000
피커 주변에 자신만의 UI를 배치하려면, ".photosPickerAccessoryVisibility"를 사용할 것입니다.

00:04:19.000 --> 00:04:26.000
또한 지정된 가장자리 주변의 액세서리를 제어할 수 있는 선택적 인수가 있습니다.

00:04:26.000 --> 00:04:30.000
기본값은 모든 가장자리입니다.

00:04:30.000 --> 00:04:37.000
일부 선택기 기능에 대한 자신만의 대체품을 구현하려면, ".photosPicker DisabledCapabilities" 수정자를 사용하세요.

00:04:37.000 --> 00:04:48.000
그리고 마지막으로, 선택 업데이트를 실시간으로 조정하거나 응답해야 하는 경우, "selectionBehavior"가 ".continuous"로 설정되어 있는지 확인하세요.

00:04:48.000 --> 00:04:52.000
그래서 정확히 무엇이 액세서리로 간주되나요?

00:04:52.000 --> 00:05:00.000
iOS에서 상단 액세서리는 탐색 모음이고 하단 액세서리는 도구 모음입니다.

00:05:00.000 --> 00:05:07.000
iPadOS와 macOS에서, 주요 액세서리는 보일 때 사이드바이다.

00:05:07.000 --> 00:05:12.000
상단과 하단 액세서리는 iOS가 가지고 있는 것과 비슷하다.

00:05:12.000 --> 00:05:23.000
다음으로, 비활성화할 수 있는 피커 기능과 피커 UI에 어떤 영향을 미칠지 안내해 드리겠습니다.

00:05:23.000 --> 00:05:28.000
검색 기능이 비활성화되면 검색 표시줄이 숨겨집니다.

00:05:28.000 --> 00:05:34.000
컬렉션 내비게이션이 비활성화되면, 앨범 탭이 숨겨집니다.

00:05:34.000 --> 00:05:39.000
iPadOS와 macOS에서는 사이드바도 숨겨질 것이다.

00:05:39.000 --> 00:05:47.000
준비 영역이 비활성화되면, 도구 모음 버튼이 상태 라벨로 대체됩니다.

00:05:47.000 --> 00:05:56.000
연속 선택 없이 선택 작업을 비활성화한 경우, "취소" 버튼만 숨겨지고 "추가" 버튼은 여전히 표시됩니다.

00:05:56.000 --> 00:06:01.000
그렇지 않으면, 당신의 앱은 사용자 선택을 받을 수 없습니다.

00:06:01.000 --> 00:06:08.000
선택 동작을 ".continuous"로 설정하면 두 버튼 모두 숨겨집니다.

00:06:08.000 --> 00:06:11.000
이제 새로운 피커 스타일을 살펴봅시다.

00:06:11.000 --> 00:06:19.000
".Presentation" 스타일과 ".inline" 스타일 외에도, 피커는 또 다른 ".compact" 스타일을 지원합니다.

00:06:19.000 --> 00:06:23.000
이것은 기본 ".presentation" 스타일입니다.

00:06:23.000 --> 00:06:28.000
이것은 모든 액세서리가 숨겨진 ".인라인" 스타일입니다.

00:06:28.000 --> 00:06:31.000
그리고 이것은 ".컴팩트" 스타일이다.

00:06:31.000 --> 00:06:39.000
단일 행 피커를 사용하면 사용 가능한 수직 공간이 심각하게 제한된 더 많은 장소에 삽입할 수 있습니다.

00:06:39.000 --> 00:06:43.000
데모가 모든 것을 함께 연결할 시간이다.

00:06:43.000 --> 00:06:48.000
나는 이미 텍스트 설명으로 이미지에 주석을 달 수 있는 간단한 앱을 만들었다.

00:06:48.000 --> 00:06:52.000
지금 당장 뭘 할 수 있는지 보여줄게.

00:06:52.000 --> 00:07:02.000
피커를 모달 시트로 제시하고, 이미지를 선택하고, 설명을 추가할 수 있습니다.

00:07:02.000 --> 00:07:07.000
데모를 위해, "사진 선택" 버튼을 내장된 선택기로 바꾸고 싶습니다.

00:07:07.000 --> 00:07:15.000
".photosPickerStyle(.inline)" 수정자를 추가하고 시도해 보겠습니다.

00:07:15.000 --> 00:07:27.000
그건 효과가 있지만, 아직 좋아 보이지 않아.

00:07:27.000 --> 00:07:38.000
목록을 업데이트하려면 여전히 "추가" 버튼을 탭해야 하며, 선택기의 크기가 조정되면 도구 모음이 장치의 하단 가장자리로 확장되지 않습니다.

00:07:38.000 --> 00:07:39.000
하지만 걱정하지 마.

00:07:39.000 --> 00:07:43.000
몇 번의 조정만으로, 그것은 훨씬 더 좋아 보일 수 있다.

00:07:43.000 --> 00:07:55.000
첫째, 피커가 안전한 영역 삽입을 우아하게 처리할 수 있기 때문에, 피커가 화면 하단 가장자리로 확장할 수 있도록 ".ignoresSafeArea" 수정자를 사용할 수 있습니다.

00:07:55.000 --> 00:08:03.000
다음으로, 나는 피커에서 사진을 선택하자마자 목록을 업데이트할 수 있는지 확인할 것이다.

00:08:03.000 --> 00:08:07.000
사실, 바꾸는 건 정말 쉬워.

00:08:07.000 --> 00:08:13.000
선택 동작을 ".continuous"로 설정하는 것이 내가 해야 할 전부이다.

00:08:13.000 --> 00:08:20.000
목록이 이제 실시간으로 업데이트되었기 때문에, 나는 더 이상 내비게이션 바 버튼을 유지할 필요가 없다.

00:08:20.000 --> 00:08:32.000
".photosPicker DisabledCapabilities" 수정자를 사용하여 그것들을 제거할 수 있습니다.

00:08:32.000 --> 00:08:34.000
피커는 이제 완벽하게 작동한다.

00:08:34.000 --> 00:08:39.000
하지만 나는 피커도 멋져 보이는지 확인하고 싶어.

00:08:39.000 --> 00:08:43.000
내비게이션 바와 도구 모음을 숨겨야 할 것 같아.

00:08:43.000 --> 00:08:47.000
나는 또한 피커에게 고정된 높이를 주고 싶다.

00:08:47.000 --> 00:08:59.000
".photosPicker AccessoryVisibility" 수정자를 사용하여 막대를 숨기고 다른 SwiftUI 보기처럼 피커의 높이를 조정할 수 있습니다.

00:08:59.000 --> 00:09:17.000
이제 멋져 보여.

00:09:17.000 --> 00:09:23.000
단 몇 분 안에, 나는 새로운 임베디드 피커를 표시하기 위해 앱을 업데이트했다.

00:09:23.000 --> 00:09:27.000
실제 장치에서 테스트할 수 있도록 만들고 실행할 것입니다.

00:09:27.000 --> 00:09:32.000
확대/축소 가능한 그리드를 사용하여 내가 고르고 싶은 사진으로 빠르게 이동할 수 있습니다.

00:09:32.000 --> 00:09:36.000
선택한 사진은 내 앱에 자동으로 나타난다.

00:09:36.000 --> 00:09:44.000
내 앱의 사진 피킹 경험은 새로운 임베디드 피커로 크게 향상되었다.

00:09:44.000 --> 00:09:46.000
그게 데모를 위한 거야.

00:09:46.000 --> 00:09:56.000
데모에서 iPhone을 사용하고 있었지만, iOS, iPadOS 및 macOS에서 동일한 API를 사용할 수 있습니다.

00:09:56.000 --> 00:10:02.000
SwiftUI 외에도, UIKit과 AppKit 앱에서도 동일한 API를 사용할 수 있습니다.

00:10:02.000 --> 00:10:06.000
UIKit과 AppKit API를 살펴봅시다.

00:10:06.000 --> 00:10:12.000
임베디드 피커는 동일한 PHPickerConfiguration API를 통해 사용할 수 있습니다.

00:10:12.000 --> 00:10:18.000
이제 "선택"을 ".continuous"로 설정하여 연속 선택 동작을 선택할 수 있습니다.

00:10:18.000 --> 00:10:24.000
"모드"를 ".compact"로 설정하여 피커를 단일 행 레이아웃으로 구성할 수도 있습니다.

00:10:24.000 --> 00:10:37.000
"edgesWithoutContentMargins"를 사용하여 탐색 모음과 같은 액세서리를 숨기고 "disabledCapabilities"를 사용하여 특정 선택기 기능을 비활성화할 수 있습니다.

00:10:37.000 --> 00:10:49.000
".photosPickerStyle(.inline)" 수정자를 사용하여 피커를 삽입할 수 있는 SwiftUI API와 달리, 컨테이너 컨트롤러에 자식 뷰 컨트롤러로 추가해야 합니다.

00:10:49.000 --> 00:10:57.000
피커의 프레임을 수동으로 설정하거나 자동 레이아웃 제약 조건을 사용하여 피커 뷰의 크기를 조정하고 배치할 수 있습니다.

00:10:57.000 --> 00:11:04.000
하위 뷰를 추가한 후, 피커에게 추가되었음을 알리기만 하면 됩니다.

00:11:04.000 --> 00:11:12.000
새로운 "PHPickerConfiguration.Update" API를 사용하면 사용자에게 표시되는 동안 피커를 업데이트할 수 있습니다.

00:11:12.000 --> 00:11:21.000
기존 "deselectAsset" 및 "moveAsset" API를 사용하여 선택한 자산을 선택 해제하거나 재정렬할 수도 있습니다.

00:11:21.000 --> 00:11:28.000
다음으로, 저는 새로운 옵션 메뉴와 그것이 당신의 앱에 어떤 영향을 미칠지에 대해 이야기할 것입니다.

00:11:28.000 --> 00:11:34.000
새로운 옵션 메뉴를 통해 사용자는 앱과 공유할 수 있는 것을 더 잘 제어할 수 있습니다.

00:11:34.000 --> 00:11:47.000
기본적으로 모든 이미지 메타데이터가 포함되어 있지만, 사용자는 이제 선택한 사진에서 위치와 같은 민감한 메타데이터를 제거하도록 선택할 수 있습니다.

00:11:47.000 --> 00:11:56.000
"PhotosPicker"와 "Transferable" API를 사용하는 경우, 새로운 옵션 메뉴를 지원하기 위해 채택 작업을 할 필요가 없습니다.

00:11:56.000 --> 00:12:03.000
마찬가지로, "PHPickerViewController" API를 사용하는 경우 채택 작업이 필요하지 않습니다.

00:12:03.000 --> 00:12:12.000
옵션 메뉴는 레거시 "UIImagePickerController" API를 사용하거나 전체 라이브러리 액세스 권한이 있는 앱에서는 지원되지 않습니다.

00:12:12.000 --> 00:12:16.000
좋아, 그게 옵션 메뉴야.

00:12:16.000 --> 00:12:25.000
이제 시스템 선택기를 사용하는 경우 HDR 이미지, HDR 비디오 및 시네마틱 모드 비디오를 지원하는 방법에 대해 이야기하겠습니다.

00:12:25.000 --> 00:12:32.000
피커는 기본적으로 자산을 JPEG와 같은 호환 가능한 형식으로 자동으로 트랜스코딩할 수 있습니다.

00:12:32.000 --> 00:12:39.000
그러나, 트랜스코딩된 자산은 원래 자산에 포함된 모든 정보를 포함하지 않을 수 있습니다.

00:12:39.000 --> 00:12:44.000
따라서 HDR 콘텐츠를 받고 싶다면, 자동 트랜스코딩을 피하는 것이 가장 좋습니다.

00:12:44.000 --> 00:12:55.000
".Current" 인코딩 정책을 사용하고 ".image" 또는 ".movie"와 같은 일반적인 콘텐츠 유형을 요청하여 원본 형식으로 사진과 비디오를 얻을 수 있습니다.

00:12:55.000 --> 00:13:04.000
".Jpeg"와 같은 특정 콘텐츠 유형을 요청하면 인코딩 정책이 ".current"로 설정되어 있어도 여전히 자산을 트랜스코딩할 수 있습니다.

00:13:04.000 --> 00:13:10.000
HDR 지원 추가에 대한 자세한 내용은 올해 "앱에서 HDR 이미지 지원" 세션을 시청할 수 있습니다.

00:13:10.000 --> 00:13:16.000
다음은 원본 형식으로 이미지를 받는 코드 예시입니다.

00:13:16.000 --> 00:13:24.000
"preferredItemEncoding"이 ".current"로 설정되어 있고 "importedContentType"이 ".image"인 것을 볼 수 있습니다.

00:13:24.000 --> 00:13:32.000
시네마틱 모드 비디오가 선택되면, 피커는 모든 깊이 효과와 함께 렌더링된 버전을 제공합니다.

00:13:32.000 --> 00:13:40.000
모든 결정 포인트를 얻으려면, 사진 라이브러리 액세스를 요청하고 PhotoKit을 사용하여 비디오를 가져와야 합니다.

00:13:40.000 --> 00:13:48.000
시네마틱 모드 비디오에 대해 자세히 알아보려면, "앱에서 시네마틱 모드 비디오 지원" 세션을 확인하세요.

00:13:48.000 --> 00:13:56.000
마무리하기 위해, 새로운 임베디드 피커는 많은 유연성을 제공하며 나는 당신이 그것으로 무엇을 할 수 있는지 빨리 보고 싶다.

00:13:56.000 --> 00:14:06.000
옵션 메뉴를 통해 사용자는 무엇을 공유할지 더 잘 제어할 수 있으므로, 정말 필요하지 않는 한 사진 라이브러리 액세스를 요청하지 마십시오.

00:14:06.000 --> 00:14:08.000
고마워, 그리고 행복한 코딩!

00:14:08.000 --> 23:59:59.000
♪ ♪

