WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:13.000
윌: 안녕하세요, "SwiftUI로 디자인"에 오신 것을 환영합니다.

00:00:13.000 --> 00:00:17.000
제 이름은 윌이고, 저는 애플 지도 팀의 디자이너입니다.

00:00:17.000 --> 00:00:28.000
나중에, 저는 제 동료 필립과 합류할 것이며, 우리는 함께 SwiftUI를 사용하여 발견한 몇 가지 독특한 이점과 응용 프로그램에 대해 논의할 것입니다.

00:00:28.000 --> 00:00:36.000
우리는 디자이너로서 우리의 관점에서 이야기하고 SwiftUI가 우리의 디자인 프로세스를 어떻게 향상시켰는지에 대한 개인적인 통찰력을 공유할 것입니다.

00:00:36.000 --> 00:00:44.000
우리는 또한 watchOS 10에서 새로 재설계된 지도 앱에 대한 작업의 실제 사례를 제공할 것입니다.

00:00:44.000 --> 00:00:48.000
지도 디자인 팀에서, 우리는 SwiftUI의 열렬한 팬입니다.

00:00:48.000 --> 00:01:01.000
그것은 우리가 디자인 개념을 검증하는 데 도움이 되었고, 다른 도구가 제공하지 않는 독특한 기능을 제공했으며, 인터페이스가 어떻게 구성되고 실현되는지에 대한 더 나은 이해를 주었습니다.

00:01:01.000 --> 00:01:08.000
올해의 watchOS 앱을 위해, 우리는 장치에서 바로 SwiftUI로 모든 디자인을 개발했습니다.

00:01:08.000 --> 00:01:16.000
이것은 우리에게 간격과 타이프스타일에서 애니메이션과 상호 작용에 이르기까지 모든 세부 사항을 제어할 수 있게 해주었다.

00:01:16.000 --> 00:01:22.000
오늘 세션에서, 우리는 SwiftUI가 이 디자인 작업에 어떤 영향을 미쳤는지 공유하고 싶습니다.

00:01:22.000 --> 00:01:40.000
그 과정에서, 우리는 SwiftUI가 어떻게 디자이너에게 강력하면서도 접근하기 쉬운 도구가 될 수 있는지, 개념의 세부 사항을 통해 생각하고, 풍부한 상호 작용을 디자인하고, 아이디어를 정확하게 테스트하고, 다른 사람들에게 작품을 효과적으로 제시하는 데 어떻게 도움이 되는지 다룰 것입니다.

00:01:40.000 --> 00:01:46.000
SwiftUI가 디자인 도구로 어떻게 작동하는지 이해하는 것으로 시작합시다.

00:01:46.000 --> 00:01:58.000
SwiftUI는 애플리케이션을 구축하기 위한 강력한 프레임워크이지만, 디자이너를 위한 독특하고 강력한 도구이기도 하며, 더 높은 수준의 속도와 정밀도로 인터페이스를 만들 수 있습니다.

00:01:58.000 --> 00:02:09.000
나처럼 프로그래밍 배경이 없는 많은 사람들은 짧은 시간 안에 SwiftUI를 배우고 생산적으로 디자인할 수 있다는 것을 알게 된다.

00:02:09.000 --> 00:02:17.000
그것은 SwiftUI가 일반적인 것이 쉽고 복잡한 것이 가능해야 한다는 생각을 기반으로 만들어졌기 때문이다.

00:02:17.000 --> 00:02:23.000
실제로, 이것은 당신이 일반적인 UI 요소를 다시 만드는 데 시간을 할애할 필요가 없다는 것을 의미합니다.

00:02:23.000 --> 00:02:29.000
그리고 동시에, 당신은 새로운 것을 만들 때 제한을 느끼지 않을 것입니다.

00:02:29.000 --> 00:02:31.000
여기 우리가 이 개념에 대해 생각하고 싶은 또 다른 방법이 있습니다.

00:02:31.000 --> 00:02:35.000
몇몇 도구들은 일을 쉽게 만드는 데 정말 능숙하다.

00:02:35.000 --> 00:02:37.000
그들은 바닥을 낮춘다.

00:02:37.000 --> 00:02:39.000
전자레인지가 좋은 예이다.

00:02:39.000 --> 00:02:43.000
대부분의 사람들은 하나를 사용할 수 있으며, 많은 간단한 것들에 좋습니다.

00:02:43.000 --> 00:02:48.000
하지만, 내가 멋진 저녁을 만들어야 한다면, 전자레인지는 올바른 도구가 아니다.

00:02:48.000 --> 00:02:51.000
다른 도구들은 강력해지는 데 초점을 맞추고 있다.

00:02:51.000 --> 00:02:56.000
그들은 천장을 올리고 당신이 복잡하고 풍부한 것들을 만들 수 있게 해준다.

00:02:56.000 --> 00:03:00.000
이것의 좋은 예는 산업용 에스프레소 머신이다.

00:03:00.000 --> 00:03:11.000
이 기계들을 사용하면 놀라운 음료를 만들 수 있지만, 접근하기 어렵고, 배우기 어렵고, 기본적인 커피 한 잔을 만드는 것과 같은 간단한 일을 하기 어려울 수 있습니다.

00:03:11.000 --> 00:03:15.000
SwiftUI는 이 두 가지 유형의 도구 사이의 균형을 이룬다.

00:03:15.000 --> 00:03:23.000
그것은 간단한 작업을 위해 바닥을 낮추고 새롭고 새로운 것을 만들기 위해 천장을 올린다.

00:03:23.000 --> 00:03:27.000
SwiftUI를 작성할 때, Xcode라는 도구를 사용합니다.

00:03:27.000 --> 00:03:38.000
최근 몇 년 동안, Xcode는 실시간으로 디자인을 보고 상호 작용할 수 있는 시각적 캔버스를 추가한 덕분에 디자이너에게 훨씬 더 유용해졌습니다.

00:03:38.000 --> 00:03:46.000
글꼴 크기, 무게, 문자열 및 색상을 조정하여 간단한 텍스트 줄을 변경하고 있습니다.

00:03:46.000 --> 00:03:53.000
내가 이러한 변경 사항 중 하나를 할 때마다, 그것은 캔버스에서 즉시 업데이트된다.

00:03:53.000 --> 00:03:58.000
디자이너들에게 똑같이 도움이 되는 것은 SwiftUI가 쓰여진 선언적인 방식이다.

00:03:58.000 --> 00:04:05.000
이 언어 모델은 우리 중 많은 사람들이 인터페이스가 어떻게 조립되는지에 대해 이미 가지고 있는 직관을 기반으로 한다.

00:04:05.000 --> 00:04:09.000
SwiftUI를 작성할 때, 만들고 싶은 것을 선언하기만 하면 됩니다.

00:04:09.000 --> 00:04:14.000
버튼과 같은 일반적인 요소의 경우, 우리는 그냥 버튼을 쓸 것이다.

00:04:14.000 --> 00:04:18.000
그리고 이미지를 위해, 우리는 그냥 이미지를 쓸 것이다.

00:04:18.000 --> 00:04:22.000
이러한 요소들을 스타일링할 때, 그것은 간단하다.

00:04:22.000 --> 00:04:29.000
SwiftUI는 다른 디자인 도구에서와 마찬가지로 사물의 모양을 변경할 수 있는 수정자를 제공합니다.

00:04:29.000 --> 00:04:43.000
이것은 그림자나 테두리와 같은 효과를 추가하거나, 고유한 글꼴을 통해 텍스트 형식을 변경하거나, 종횡비나 패딩과 같은 속성을 변경하여 요소의 레이아웃을 조작할 수 있습니다.

00:04:43.000 --> 00:04:55.000
SwiftUI는 또한 색상 선택기와 같은 시스템 컨트롤과 푸시 전환과 같은 동작에 쉽게 접근할 수 있게 해준다.

00:04:55.000 --> 00:05:02.000
이것들은 프레임워크에 직접 내장되어 있어, 상자에서 꺼내자마자 바로 기본 기능을 제공합니다.

00:05:02.000 --> 00:05:09.000
SwiftUI를 사용하고 있다면, 이제 Apple 하드웨어의 고유한 기능에 액세스할 수 있다는 것을 의미합니다.

00:05:09.000 --> 00:05:19.000
약간의 작업으로, 당신은 햅틱 피드백, 오디오 피드, 카메라, 제스처 및 가속도계와 같은 센서와 같은 것들을 활용할 수 있습니다.

00:05:19.000 --> 00:05:25.000
당신은 또한 수십 개의 애플 프레임워크에 들어간 모든 작업을 활용할 수 있습니다.

00:05:25.000 --> 00:05:38.000
즉, MapKit을 사용하여 동적 지도로 디자인하거나, WeatherKit에서 실시간 날씨 정보를 가져오거나, RealityKit을 사용하여 증강 현실로 개체를 렌더링할 수 있습니다.

00:05:38.000 --> 00:05:47.000
SwiftUI는 iPhone뿐만 아니라 iPad, Apple Watch 및 Mac에서도 작동하기 때문에 이 모든 것이 Apple 플랫폼에서 발생할 수 있습니다.

00:05:47.000 --> 00:05:55.000
대부분의 경우, 코드를 공유하고 시스템 요소가 스스로 적응하는 방법을 활용할 수도 있습니다.

00:05:55.000 --> 00:05:58.000
이제 우리는 디자인 도구의 렌즈를 통해 SwiftUI에 대해 논의했습니다.

00:05:58.000 --> 00:06:07.000
먼저 디자인의 세부 사항을 올바르게 파악하는 것부터 시작하여 실제로 더 잘 디자인하는 데 어떻게 도움이 되는지 구체적으로 알아봅시다.

00:06:07.000 --> 00:06:10.000
현대적인 인터페이스는 역동적이다.

00:06:10.000 --> 00:06:15.000
우리가 만드는 제품에는 복잡한 흐름과 고도로 상호 작용하는 요소가 포함되어 있다.

00:06:15.000 --> 00:06:20.000
결과적으로, 우리가 내려야 할 중요한 결정이 너무 많다.

00:06:20.000 --> 00:06:33.000
SwiftUI는 당신의 주의가 필요한 모든 중요한 세부 사항을 빠르게 표면화함으로써 도움을 줍니다. 예를 들어, 이미지가 로드될 때 어떻게 보여야 하는지 또는 버튼을 눌렀을 때 어떻게 나타나는지.

00:06:33.000 --> 00:06:37.000
이것들은 제품이 완전하다고 느끼게 하는 것들의 유형이다.

00:06:37.000 --> 00:06:44.000
그것들은 정적 디자인 도구에 쉽게 숨겨져 있지만 SwiftUI와 같은 동적 도구에서 작업할 때 빠르게 표면화됩니다.

00:06:44.000 --> 00:06:49.000
SwiftUI를 사용하면 장치에서 디자인을 쉽게 구축할 수 있기 때문입니다.

00:06:49.000 --> 00:06:53.000
이렇게 함으로써, 당신은 당신이 무엇을 만들고 있는지 더 완벽하게 이해할 수 있습니다.

00:06:53.000 --> 00:06:59.000
이제 개별 부품이 함께 상호 작용하며, 전체적으로 경험을 평가하기 시작할 수 있습니다.

00:06:59.000 --> 00:07:06.000
이 과정은 당신의 디자인에서 작동하는 것과 여전히 주의나 연마가 필요한 것을 빠르게 밝힙니다.

00:07:06.000 --> 00:07:09.000
지도에서, 우리는 이것이 엄청나게 도움이 된다는 것을 알았다.

00:07:09.000 --> 00:07:19.000
우리가 올해 watchOS 앱을 처음 디자인하기 시작했을 때, 우리는 사람들의 손목을 위한 지도 중심의 경험을 만드는 것이 좋을 것이라고 생각했습니다.

00:07:19.000 --> 00:07:23.000
그것이 어떤 느낌인지 테스트를 시작하기 위해, 우리는 시계에 간단한 지도 보기를 넣었다.

00:07:23.000 --> 00:07:34.000
우리가 장치에서 테스트하고 있었기 때문에, 우리는 즉시 문제를 발견했다: 디지털 크라운이 지도를 확대하는 속도가 너무 빨랐다.

00:07:34.000 --> 00:07:45.000
이 경험을 개선하기 위해, 우리는 SwiftUI 프로토타입에서 여러 값을 테스트하여 자연스럽게 느껴지는 줌 속도를 찾을 때까지 디지털 크라운의 감도를 조정했습니다.

00:07:45.000 --> 00:08:05.000
줌 속도를 개선한 후, 우리는 지도에 추가하기 시작했고, 먼저 관심 지점을 추가한 다음 UI 컨트롤을 추가했으며, 마지막으로 지도를 더 잘 맥락화하기 위해 현재 위치 주변의 걷기 반경을 표시하여 주변에 무엇이 있는지, 그리고 대략 그곳을 걷는 데 얼마나 걸릴지 보여주는 데 도움을 주었습니다.

00:08:05.000 --> 00:08:09.000
우리는 이 작업을 장치로 되돌려 SwiftUI 프로토타입에 추가했습니다.

00:08:09.000 --> 00:08:16.000
이것은 걷는 반경의 상호 작용과 같이 우리의 관심이 필요한 새로운 것들을 드러냈다.

00:08:16.000 --> 00:08:22.000
특히, 우리는 디지털 크라운이 스크롤됨에 따라 걷는 시간이 더 많은 세부 사항을 사용할 수 있다고 느꼈다.

00:08:22.000 --> 00:08:26.000
그것이 어떻게 생겼는지 탐구하기 위해, 우리는 몇 가지 다른 옵션의 프로토타입을 만들었다.

00:08:26.000 --> 00:08:34.000
우리가 가장 좋아하는 것은 별도의 SwiftUI 프로토타입으로 개발한 이 티커 애니메이션이었다.

00:08:34.000 --> 00:08:37.000
우리는 이 별도의 프로토타입을 가져와서 함께 통합했다.

00:08:37.000 --> 00:08:45.000
이것은 더 많은 질문으로 이어졌고 겉보기에 단순한 디자인에 얼마나 많은 복잡성이 숨겨져 있는지에 대해 우리를 놀라게 했다.

00:08:45.000 --> 00:08:50.000
우리가 디자인을 시작했을 때 이 모든 세부 사항은 처음에 불투명했다.

00:08:50.000 --> 00:08:55.000
하지만 우리가 프로토타입을 만들기 시작한 순간, 그것들은 분명했다.

00:08:55.000 --> 00:08:58.000
SwiftUI는 현대적인 인터페이스를 위해 만들어졌다.

00:08:58.000 --> 00:09:04.000
그것은 우리가 특정 디자인 세부 사항을 다루고 모든 것이 전체적으로 어떻게 함께 작동하는지 경험하는 데 도움을 준다.

00:09:04.000 --> 00:09:10.000
다음으로, 필립은 우리가 가장 좋아하는 주제 중 하나인 상호 작용에 대해 논의할 것이다.

00:09:10.000 --> 00:09:19.000
필립: SwiftUI는 제스처, 전환 및 애니메이션에 대한 일류 지원과 함께 상호 작용을 설계하기 위한 강력한 도구입니다.

00:09:19.000 --> 00:09:25.000
당신이 진정한 네이티브 환경에서 일하고 있기 때문에 모든 것이 네이티브처럼 느껴집니다.

00:09:25.000 --> 00:09:29.000
어떤 디자이너가 멋진 애니메이션을 좋아하지 않나요?

00:09:29.000 --> 00:09:35.000
SwiftUI의 애니메이션은 성능이 뛰어나고, 사용하기 쉽고, 완전히 중단할 수 있다.

00:09:35.000 --> 00:09:44.000
이것은 상호 작용이 당신의 디자인이 어떻게 보이는지뿐만 아니라 어떻게 느끼는지에 대한 감각을 제공하기 때문에 도움이 됩니다.

00:09:44.000 --> 00:09:50.000
종종, 상호 작용은 드래그, 스크롤 또는 탭과 같은 제스처를 포함한다.

00:09:50.000 --> 00:09:57.000
하지만 상호 작용에 사용할 수 있는 하드웨어 센서와 같은 다른 입력 소스가 있습니다.

00:09:57.000 --> 00:10:02.000
새로운 지도 홈 화면에서 위치 버튼을 탭하면 나침반이 활성화됩니다.

00:10:02.000 --> 00:10:09.000
당신이 움직일 때, 나침반은 당신이 현재 직면하고 있는 추기경 방향을 표시합니다.

00:10:09.000 --> 00:10:23.000
이 상호 작용이 어떻게 느껴질지 이해하기 위해, 우리는 시계의 내부 센서를 사용하여 전환을 테스트하기 위해 확대된 나침반이 있는 SwiftUI 프로토타입을 만들었습니다.

00:10:23.000 --> 00:10:27.000
이 프로토타입을 작동시키는 데 몇 시간밖에 걸리지 않았다.

00:10:27.000 --> 00:10:37.000
SwiftUI는 시계의 실제 센서를 쉽게 사용할 수 있게 하여 나침반을 정확하게 만들고 이 작은 상호 작용을 개선하는 데 도움을 주었다.

00:10:37.000 --> 00:10:42.000
우리가 만들고 싶었던 또 다른 상호 작용은 검색 경험과 관련이 있었다.

00:10:42.000 --> 00:10:49.000
레스토랑과 같은 위치를 찾고 있다면, 이 새로운 분할 화면은 지도와 결과 목록을 보여줍니다.

00:10:49.000 --> 00:10:57.000
이 디자인은 다른 도구에서 달성하기 어려웠을 독특한 스크롤 상호 작용을 요구했다.

00:10:57.000 --> 00:11:02.000
여기 우리가 이 상호 작용에 대한 느낌을 얻기 위해 만든 SwiftUI 프로토타입이 있습니다.

00:11:02.000 --> 00:11:08.000
우리의 목표는 너무 민감하지 않고 즉시 반응하는 것이었다.

00:11:08.000 --> 00:11:20.000
플래터는 크라운의 느린 움직임에 반응하며, 문턱에 도달하면, 새로운 플래터는 햅틱 반응과 함께 제자리로 빠르게 전환된다.

00:11:20.000 --> 00:11:23.000
반면에, 빠른 움직임은 더 단단한 봄 애니메이션을 사용한다.

00:11:23.000 --> 00:11:26.000
이것은 상호 작용이 빠르게 느껴지도록 도와준다.

00:11:26.000 --> 00:11:33.000
이러한 조정은 느리고 빠른 속도로 스크롤할 때 올바른 느낌을 주는 경험을 만듭니다.

00:11:33.000 --> 00:11:39.000
SwiftUI는 많은 상호 작용을 위한 훌륭한 경험을 제공합니다.

00:11:39.000 --> 00:11:49.000
그리고 당신이 맞춤형 무언가를 원할 때, 그것은 매우 유능한 도구이며, 그들이 옳다고 느낄 때까지 미세 조정할 수 있는 힘을 제공합니다.

00:11:49.000 --> 00:11:53.000
하지만 디자인은 단지 무언가가 어떻게 보이거나 느껴지는지에 관한 것이 아니다.

00:11:53.000 --> 00:11:56.000
그것은 또한 그것이 어떻게 작동하는지에 관한 것이다.

00:11:56.000 --> 00:12:03.000
디자인 과정에서 간과하기 쉬운 한 가지는 현실적인 시나리오에서 아이디어를 테스트하는 것입니다.

00:12:03.000 --> 00:12:17.000
나는 나 자신을 위해, 나는 이상적인 시나리오를 위해 디자인하고, 멋진 사진과 짧은 라벨을 사용하고, 일반적으로 내 디자인이 가능한 한 최고로 보이는지 확인할 수 있다는 것을 알고 있다.

00:12:17.000 --> 00:12:28.000
그러나, 디자인 작업이 진행됨에 따라, 내 디자인이 어디에서 깨지는지 알아내고, 현실 세계에서 테스트하여 그들이 어떻게 유지되는지 보는 것이 중요하다.

00:12:28.000 --> 00:12:35.000
SwiftUI를 사용하면 현실적인 시나리오에서 작업을 쉽게 설계하고 평가할 수 있습니다.

00:12:35.000 --> 00:12:43.000
지도에서, 사람들이 다양한 조건에서 야외에서 우리 제품을 사용하기 때문에, 우리는 이것에 대해 많이 생각한다.

00:12:43.000 --> 00:12:51.000
SwiftUI를 사용하면 이동 중에도 디자인을 가져와 실시간으로 테스트할 수 있습니다.

00:12:51.000 --> 00:12:58.000
예를 들어, 우리는 눈부심과 햇빛이 지도 제작과 인터페이스의 가독성에 어떤 영향을 미치는지에 주의를 기울인다.

00:12:58.000 --> 00:13:07.000
이것은 종종 우리가 더 읽기 쉬운 경험을 제공하기 위해 앱 전체의 대비 수준을 조정하게 한다.

00:13:07.000 --> 00:13:12.000
우리가 유용하다고 생각하는 또 다른 방법은 우리의 디자인에 실제 데이터를 사용하는 것이다.

00:13:12.000 --> 00:13:19.000
지도에서, 우리는 사람들이 우리 제품을 사용할 때 마주칠 다양한 유형의 지형과 경로를 고려합니다.

00:13:19.000 --> 00:13:29.000
Watch 앱으로 자전거를 타거나 걷는 경우, 새로운 고도 그래프는 경로의 고도 범위와 진행 상황에 대한 개요를 실시간으로 제공합니다.

00:13:29.000 --> 00:13:37.000
SwiftUI에서 이 차트를 만들었을 때, 우리는 다양한 유형의 경로에서 실제 데이터를 가져올 수 있었다.

00:13:37.000 --> 00:13:44.000
샌프란시스코에서 발견된 것과 같은 구릉 경로의 경우, 차트는 우리가 예상했던 대로 작동했다.

00:13:44.000 --> 00:13:57.000
그러나, 우리가 뉴욕시에서 만날 수 있는 것과 같은 평평한 경로에 대한 데이터를 사용할 때, 우리는 마치 산을 하이킹하는 것처럼 실제보다 훨씬 더 극단적으로 보인다는 것을 발견했습니다.

00:13:57.000 --> 00:14:05.000
우리는 다양한 경로와 고도 프로필을 정확하게 반영하기 위해 차트를 재검토해야 한다는 것을 깨달았다.

00:14:05.000 --> 00:14:14.000
이 경우, 우리는 평평한 경로가 예상대로 더 많이 나타나도록 Y축의 규모를 조정해야 했습니다.

00:14:14.000 --> 00:14:23.000
우리가 자주 사용하는 또 다른 연습은 SwiftUI를 사용하여 일회성 디자인 도구를 만드는 것이다.

00:14:23.000 --> 00:14:33.000
이전에 공유한 새로운 보행 반경을 위해, 우리는 매우 역동적인 표면인 지도 위에 제대로 렌더링된 디자인이 필요했다.

00:14:33.000 --> 00:14:40.000
우리는 반경이 다른 지도 환경을 어떻게 볼지 더 잘 이해하기 위해 이 미니 디자인 도구를 만들었습니다.

00:14:40.000 --> 00:14:48.000
여기서 저는 선 너비, 불투명도 값 및 혼합 모드와 같은 것을 변경하여 스타일을 탐구하고 있습니다.

00:14:48.000 --> 00:14:57.000
이와 같은 작은 매개 변수화된 도구를 사용하면 정적 설계 도구에서 효율적으로 할 수 있는 것보다 더 많은 변형을 제거할 수 있습니다.

00:14:57.000 --> 00:15:04.000
SwiftUI에서 구축하기 쉽고 특정 질문에 답하거나 복잡한 문제를 해결하는 데 도움을 줄 수 있습니다.

00:15:04.000 --> 00:15:14.000
SwiftUI는 다양한 데이터 세트와 다양한 환경에 대한 전체적인 이해로 실제 시나리오를 설계할 수 있도록 도와줍니다.

00:15:14.000 --> 00:15:22.000
당신의 디자인을 테스트함으로써, 당신은 그들이 사람들의 일상 생활에서 어떻게 수행될지 더 잘 설명할 수 있습니다.

00:15:22.000 --> 00:15:26.000
아이디어를 테스트하는 또 다른 방법은 다른 사람들과 공유하는 것이다.

00:15:26.000 --> 00:15:30.000
SwiftUI는 당신의 작품을 발표하기 위한 훌륭한 도구입니다.

00:15:30.000 --> 00:15:40.000
디자인을 공유하는 좋은 방법은 많지만, 장치 데모는 당신의 아이디어를 실현하는 데 독특하게 효과적입니다.

00:15:40.000 --> 00:15:47.000
사람들이 당신의 작품의 데모를 손에 들고 있을 때, 디자인은 스스로를 설명한다.

00:15:47.000 --> 00:15:53.000
이것은 합의를 구축하는 데 도움이 되며 모두에게 더 많은 회의의 번거로움을 덜어줄 수 있다.

00:15:53.000 --> 00:16:01.000
올해 우리의 일을 위해, 우리는 건물 데모를 우선시하고 가능한 한 자주 디자인 리뷰에 가져왔다.

00:16:01.000 --> 00:16:07.000
이 리뷰에서, 우리는 하나의 SwiftUI 앱에 여러 데모를 넣었다.

00:16:07.000 --> 00:16:17.000
여기에는 걷기 반경과 검색 결과와 같이 우리가 이전에 공유한 것들과 비즈니스 정보와 함께 나타나는 카드와 같은 다른 많은 것들이 포함되었다.

00:16:17.000 --> 00:16:22.000
모두가 데모를 가지고 놀고 그 경험에 대한 피드백을 제공하게 되어 기뻤다.

00:16:22.000 --> 00:16:30.000
디자인을 설명하는 데 시간을 보내는 대신, 우리는 그것들을 평가하는 데 더 많은 시간을 할애할 수 있었다.

00:16:30.000 --> 00:16:39.000
SwiftUI로 만든 데모는 자신과 팀 모두를 위해 프로젝트의 위험을 줄이고 혼란을 방지할 수 있습니다.

00:16:39.000 --> 00:16:47.000
결국, 세계의 어떤 슬라이드 데크도 하나의 멋진 데모와 비교할 수 없다.

00:16:47.000 --> 00:16:51.000
이것들은 우리가 SwiftUI를 사용하여 발견한 이점 중 일부입니다.

00:16:51.000 --> 00:17:08.000
우리는 당신이 SwiftUI를 중요한 디자인 결정을 내리는 데 도움이 되는 디자인 도구로 생각하고, 사물의 느낌을 디자인하고, 모든 것이 어떻게 작동하는지에 대해 현실적으로 얻고, 장치 데모를 사용하여 다른 사람들과 디자인을 공유할 수 있도록 하는 디자인 도구로 생각하는 것이 좋습니다.

00:17:08.000 --> 00:17:16.000
watchOS 10에서 새로운 지도 앱을 디자인하는 데 도움이 된 것은 이러한 이점이었다.

00:17:16.000 --> 00:17:22.000
우리가 창의적인 작업에 사용하는 도구는 최종 경험에 엄청난 영향을 미친다.

00:17:22.000 --> 00:17:31.000
디자인 과정에서 SwiftUI를 사용함으로써, 우리는 그것이 더 고려되고, 완전하며, 잘 만들어진 최종 제품으로 이어진다는 것을 알게 될 것이라고 생각합니다.

00:17:31.000 --> 00:17:37.000
또한 우리가 아직 이야기하지 않은 SwiftUI를 사용하는 놀라운 이점이 하나 더 있다.

00:17:37.000 --> 00:17:42.000
SwiftUI를 사용할 때, 당신은 단지 프로토타입을 만드는 것이 아닙니다.

00:17:42.000 --> 00:17:44.000
너는 앱을 만들고 있어.

00:17:44.000 --> 00:17:49.000
그리고 그것은 당신이 디자인한 것을 배송할 수 있다는 것을 의미합니다.

00:17:49.000 --> 00:17:55.000
당신이 만들고 있는 앱은 단순한 디자인 아티팩트 그 이상일 수 있습니다.

00:17:55.000 --> 00:18:04.000
엔지니어가 사용하는 것과 동일한 재료로 작업하고 있기 때문에, 앱을 만들고 App Store에 제출하고 다른 사람들과 공유할 수 있습니다.

00:18:04.000 --> 00:18:11.000
우리가 Maps 팀의 디자이너로서 SwiftUI를 어떻게 사용했는지 배우는 것을 즐겼기를 바랍니다.

00:18:11.000 --> 00:18:17.000
SwiftUI에 대해 더 배우고 싶다면, 발견할 수 있는 많은 자료가 있습니다.

00:18:17.000 --> 00:18:24.000
이제 막 시작했다면 "SwiftUI 소개"를 보는 것이 좋습니다.

00:18:24.000 --> 00:18:26.000
오늘 참여해 주셔서 감사합니다.

00:18:26.000 --> 23:59:59.000
♪ ♪

