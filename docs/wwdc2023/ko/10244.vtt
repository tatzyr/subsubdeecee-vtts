WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:11.000
이선: 안녕!

00:00:11.000 --> 00:00:15.000
그리고 "Swift-DocC로 풍부한 문서 만들기"에 오신 것을 환영합니다.

00:00:15.000 --> 00:00:18.000
저는 Swift-DocC 팀의 엔지니어인 Ethan입니다.

00:00:18.000 --> 00:00:31.000
Xcode 15는 Swift-DocC 문서에 모든 새로운 기능을 제공하여 문서를 돋보이게 할 뿐만 아니라 독자에게 앱이나 프레임워크에 대해 가르칠 수 있는 더 효과적인 도구를 제공합니다.

00:00:31.000 --> 00:00:40.000
그리고 Xcode 15의 새로운 문서 미리보기 편집기를 사용하면 소스 편집기를 떠나지 않고도 문서를 반복할 수 있습니다.

00:00:40.000 --> 00:00:42.000
너한테 빨리 보여주고 싶어.

00:00:42.000 --> 00:00:46.000
Swift-DocC에 대한 간략한 개요부터 시작합시다.

00:00:46.000 --> 00:00:58.000
Swift-DocC는 Xcode에 직접 통합된 문서 컴파일러로, 소스 코드와 함께 프로젝트에 대한 풍부한 문서를 작성하고 게시할 수 있습니다.

00:00:58.000 --> 00:01:10.000
소스에서 직접 작성된 문서 주석과 독립형 마크다운 파일을 혼합하여 높은 수준의 개념적 콘텐츠와 상세한 기술 문서를 모두 작성합니다.

00:01:10.000 --> 00:01:20.000
이 문서는 정적 웹 호스팅 솔루션과 즉시 호환되므로 GitHub 페이지 및 Netlify와 같은 서비스에 쉽게 게시할 수 있습니다.

00:01:20.000 --> 00:01:30.000
그리고 물론, 당신의 문서는 Xcode의 내장 문서 창에도 나타나고 빠른 도움말을 통해 Xcode의 소스 편집기에 통합될 것입니다.

00:01:30.000 --> 00:01:38.000
즉, 작성한 문서는 추가 작업 없이 소스 코드에 액세스할 수 있는 모든 사람이 자동으로 사용할 수 있습니다.

00:01:38.000 --> 00:01:47.000
Xcode 13에서 Swift-DocC가 출시된 이후, Swift-DocC 프로젝트는 오픈 소스가 되었으며 현재 공개적으로 개발되고 있다.

00:01:47.000 --> 00:01:59.000
우리는 Swift 커뮤니티와 협력하여 Swift, Objective-C 또는 이 둘의 혼합으로 작성된 앱과 프레임워크에 대한 지원을 포함하여 모든 프로젝트를 문서화하기 위한 지원을 추가했습니다.

00:01:59.000 --> 00:02:05.000
Xcode 15는 Swift-DocC 문서를 작성하는 경험을 완전히 새로운 차원으로 끌어올립니다.

00:02:05.000 --> 00:02:15.000
문서 미리보기 편집기는 입력할 때 문서의 렌더링된 버전을 실시간으로 볼 수 있으며, 모든 키 입력에 대한 피드백을 제공합니다.

00:02:15.000 --> 00:02:30.000
그리고 그리드 기반 레이아웃, 비디오 지원, 사용자 지정 페이지 아이콘, 심지어 완전히 사용자 지정 테마와 같은 새로운 저작 기능을 통해 프로젝트를 진정으로 옹호하는 맞춤형 문서를 만들 수 있습니다.

00:02:30.000 --> 00:02:35.000
이 세션은 Swift-DocC의 고급 기능에 초점을 맞출 것이다.

00:02:35.000 --> 00:02:45.000
따라서 Swift-DocC에 대해 처음 배우는 것이라면, 먼저 "Meet DocC documentation in Xcode"와 "Elevate your DocC documentation in Xcode"를 보는 것이 좋습니다.

00:02:45.000 --> 00:02:57.000
이 두 세션은 오늘 문서를 개선할 프레임워크를 소개하고 새로운 프로젝트에 첫 번째 문서를 추가하는 과정을 안내합니다.

00:02:57.000 --> 00:03:05.000
우리는 오늘 Xcode 15의 문서 미리보기 편집기로 문서를 작성하기 위한 새로운 워크플로우를 다루는 것으로 시작할 것입니다.

00:03:05.000 --> 00:03:13.000
우리는 프레임워크에 대한 기존 문서를 향상시키기 위해 새로운 Swift-DocC 기능을 활용하면서 새로운 편집기를 사용할 것입니다.

00:03:13.000 --> 00:03:21.000
다음으로, 우리는 웹 버전이 기존 웹사이트와 함께 집에서 바로 보일 수 있도록 문서에 대한 사용자 지정 테마를 만들 것입니다.

00:03:21.000 --> 00:03:31.000
마지막으로, 문서를 웹에 게시한 후, 우리는 Xcode 15로 모든 Swift-DocC 웹사이트에 오는 새로운 탐색 기능을 둘러볼 것입니다.

00:03:31.000 --> 00:03:34.000
바로 뛰어들자.

00:03:34.000 --> 00:03:41.000
지난 몇 년 동안, 제 팀원들과 저는 SlothCreator라는 스위프트 패키지를 작업해 왔습니다.

00:03:41.000 --> 00:03:48.000
SlothCreator는 iOS 앱으로 가져오고 작은 나무늘보를 분류, 사용자 정의 및 표시하는 데 사용할 수 있는 프레임워크입니다.

00:03:48.000 --> 00:03:55.000
우리는 SlothCreator가 더 많은 iOS 앱에서 사용되기를 원하기 때문에 문서를 개선할 수 있는 방법을 찾고 있습니다.

00:03:55.000 --> 00:03:59.000
Xcode 15에서 SlothCreator Swift 패키지를 열었습니다.

00:03:59.000 --> 00:04:02.000
문서의 현재 상태를 평가하는 것으로 시작합시다.

00:04:02.000 --> 00:04:08.000
마우스를 제품 메뉴로 이동하고 문서 빌드를 선택할 것입니다.

00:04:08.000 --> 00:04:15.000
Xcode는 문서와 함께 내 프로젝트를 만든 다음 문서 창을 열 것이다.

00:04:15.000 --> 00:04:22.000
이것은 Swift-DocC를 위한 특정 문서를 작성하지 않았더라도 자신의 프로젝트에서 시도할 수 있는 것입니다.

00:04:22.000 --> 00:04:34.000
Swift-DocC는 당신이 작성한 문서 주석을 포함하여 프로젝트의 관련 API에 대한 페이지를 자동으로 생성하므로, 문서가 즉시 얼마나 유용한지 놀랄 수 있습니다.

00:04:34.000 --> 00:04:50.000
그리고 더 좋은 것은, 빌드 문서를 선택하면 Xcode는 프로젝트의 모든 종속성에 대한 문서를 생성하므로, 예를 들어 SlothCreator와 같은 타사 라이브러리에 의존하는 경우, 이것들도 나타날 것입니다.

00:04:50.000 --> 00:04:53.000
여기 SlothCreator의 최상위 문서 페이지가 있습니다.

00:04:53.000 --> 00:04:59.000
그것은 요약 문장으로 시작한 다음 프레임워크가 무엇인지에 대한 개요로 시작한다.

00:04:59.000 --> 00:05:02.000
주제 섹션으로 페이지를 조금 아래로 스크롤하겠습니다.

00:05:02.000 --> 00:05:08.000
주제는 문서의 다른 페이지를 논리적 그룹으로 구성하는 데 사용됩니다.

00:05:08.000 --> 00:05:14.000
먼저 우리는 프레임워크에 새로 온 사람들을 위한 입문 문서가 포함된 Essentials를 가지고 있습니다.

00:05:14.000 --> 00:05:21.000
그런 다음 나무늘보를 만들고, 나무늘보를 돌보고 먹이를 주는 등 상징을 포함하는 그룹이 있습니다.

00:05:21.000 --> 00:05:28.000
잘 조직된 주제 그룹은 프로젝트를 위해 발견 가능하고 접근 가능한 문서를 만드는 데 중요합니다.

00:05:28.000 --> 00:05:38.000
독자들이 문서를 쉽게 탐색할 수 있도록 몇 가지 고급 기술에 대해 배우기 위해 "Swift-DocC 콘텐츠의 발견 가능성 개선"을 보는 것이 좋습니다.

00:05:38.000 --> 00:05:41.000
나무늘보 구조에 대한 문서를 열어봅시다.

00:05:41.000 --> 00:05:45.000
내가 지금 클릭할게.

00:05:45.000 --> 00:05:58.000
Sloth는 관련 페이지에 대한 인라인 링크, 시작하기 위한 코드 예제, 관련 기호를 발견하는 데 도움이 되는 잘 조직된 주제 그룹이 포함된 좋은 개요로 정말 잘 문서화되어 있습니다.

00:05:58.000 --> 00:06:02.000
나는 뒤로 버튼을 사용하여 SlothCreator의 최상위 페이지로 돌아갈 것이다.

00:06:02.000 --> 00:06:04.000
그리고 나는 계속해서 페이지를 아래로 스크롤할 것이다.

00:06:04.000 --> 00:06:07.000
나는 여기서 일이 어떻게 정리되는지 정말 행복해.

00:06:07.000 --> 00:06:14.000
하지만 페이지 맨 아래에, 나는 실제로 전에 본 적이 없는 상징인 SwiftUI 모듈을 보고 있다.

00:06:14.000 --> 00:06:21.000
음, 이 기호는 Xcode 15, 확장 지원의 새로운 Swift-DocC 기능 때문에 나타나는 것으로 밝혀졌습니다.

00:06:21.000 --> 00:06:27.000
Xcode 15를 사용하면 이제 다른 프레임워크에 속한 유형에 대한 확장을 문서화할 수 있습니다.

00:06:27.000 --> 00:06:36.000
확장 프로그램은 원본 소스 코드에 액세스할 수 없는 유형에 기능을 추가할 수 있는 강력한 스위프트 언어 기능입니다.

00:06:36.000 --> 00:06:42.000
예를 들어, SwiftUI의 View 프로토콜을 확장하여 앱에 대한 몇 가지 추가 기능을 포함할 수 있습니다.

00:06:42.000 --> 00:06:47.000
이제 나머지 앱이나 프레임워크와 함께 확장 기호를 문서화할 수 있습니다.

00:06:47.000 --> 00:06:56.000
이 새로운 기능은 전적으로 커뮤니티 기여에 의해 주도되었으며 Swift-DocC와 Swift 컴파일러 모두에서 조정된 변화를 수반했다.

00:06:56.000 --> 00:07:01.000
SlothCreator의 문서를 개선하기 위해 여기서 그것을 어떻게 활용할 수 있는지 봅시다.

00:07:01.000 --> 00:07:05.000
지금 SwiftUI 확장 모듈을 클릭하겠습니다.

00:07:05.000 --> 00:07:11.000
SlothCreator는 SwiftUI의 이미지 구조를 확장하여 여기에 확장으로 나타납니다.

00:07:11.000 --> 00:07:17.000
이미지 페이지를 열면 이제 추가된 이니셜라이저를 볼 수 있습니다.

00:07:17.000 --> 00:07:25.000
이 이니셜라이저에 대한 문서는 기본이 맞지만, 내가 이전에 살펴본 나무늘보 구조와 같은 품질로 보이지 않는다.

00:07:25.000 --> 00:07:27.000
난 그걸 개선하고 싶어.

00:07:27.000 --> 00:07:36.000
마우스를 프로젝트 네비게이터로 이동하고 ImageExtensions 파일을 선택하여 확장자가 포함된 Swift 파일을 열 것입니다.

00:07:36.000 --> 00:07:40.000
그리고 나는 프로젝트 네비게이터를 닫을 거야.

00:07:40.000 --> 00:07:46.000
여기 나무늘보 기반 이미지 이니셜라이저에 대한 선언이 있습니다.

00:07:46.000 --> 00:07:54.000
선언 바로 위에는 세 개의 앞으로 슬래시로 정의된 기호의 문서 주석이 있다.

00:07:54.000 --> 00:08:05.000
이 이니셜라이저에 몇 가지 추가 문서를 추가하고 싶습니다. Xcode 15로 문서를 작성하는 가장 좋은 방법은 새로운 문서 미리보기 편집기를 사용하는 것입니다.

00:08:05.000 --> 00:08:13.000
문서 미리보기 보조 편집기를 활성화하려면, 먼저 편집기 옵션 메뉴를 선택하세요.

00:08:13.000 --> 00:08:16.000
그런 다음, 어시스턴트 아이템을 선택하세요.

00:08:16.000 --> 00:08:21.000
보조 편집기의 점프 바를 클릭하여 보조 모드를 선택하세요.

00:08:21.000 --> 00:08:25.000
마지막으로, 문서 미리보기를 선택하세요.

00:08:25.000 --> 00:08:27.000
그리고 저기 있어.

00:08:27.000 --> 00:08:35.000
문서 미리보기는 이제 Swift 소스 파일, Objective-C 헤더 파일 및 문서 Markdown 파일 사이를 이동할 때 활성 상태로 유지됩니다.

00:08:35.000 --> 00:08:51.000
SlothCreator에서 시도해 봅시다.

00:08:51.000 --> 00:08:52.000
좋아.

00:08:52.000 --> 00:08:56.000
토론 섹션을 만드는 것으로 시작하겠습니다.

00:08:56.000 --> 00:09:02.000
Swift-DocC는 문서 주석의 첫 번째 줄을 페이지의 요약 또는 요약 문장으로 사용합니다.

00:09:02.000 --> 00:09:05.000
다음 단락은 토론 섹션으로 사용된다.

00:09:05.000 --> 00:09:15.000
내가 너한테 쓸게... "이 이니셜라이저를 사용하여 주어진 나무늘보의 이미지 표현을 표시하세요."

00:09:15.000 --> 00:09:22.000
내가 입력할 때, 문서 미리보기는 실시간으로 업데이트되어 기호 문서의 렌더링된 버전을 보여줍니다.

00:09:22.000 --> 00:09:27.000
다음으로, 이 이니셜라이저가 실제로 어떻게 사용될 수 있는지 보여주기 위해 코드 예제를 추가하고 싶습니다.

00:09:27.000 --> 00:09:34.000
마크다운의 울타리 코드 블록 구문을 사용하여 코드 블록을 만드는 것으로 시작하겠습니다.

00:09:34.000 --> 00:09:40.000
구문 강조 표시에 사용해야 하는 소스 언어로 "스위프트"를 지정할 것입니다.

00:09:40.000 --> 00:09:45.000
그리고 내 코드 예시에 붙여넣을게.

00:09:45.000 --> 00:09:50.000
이 예제는 얼음 나무늘보의 이미지를 렌더링하는 SwiftUI 뷰를 만드는 방법을 보여줍니다.

00:09:50.000 --> 00:09:57.000
그리고 그 예는 UI와 관련이 있기 때문에, 결과 보기가 어떻게 생겼는지에 대한 스크린샷을 여기에 포함하는 것이 좋을 것이라고 생각합니다.

00:09:57.000 --> 00:10:01.000
나는 이미 내 데스크톱에 하나를 준비했어.

00:10:01.000 --> 00:10:08.000
하지만 내 문서에서 스크린샷을 실제로 사용하려면, 먼저 SlothCreator의 문서 카탈로그에 이미지를 추가해야 합니다.

00:10:08.000 --> 00:10:20.000
문서 카탈로그는 Markdown 파일, 이미지 및 비디오의 형태로 추가 문서 콘텐츠를 제공하기 위해 Swift 패키지 또는 Xcode 프로젝트에 추가할 수 있는 파일 디렉토리입니다.

00:10:20.000 --> 00:10:24.000
이것은 당신이 더 긴 형태의 기사와 튜토리얼을 넣을 수 있는 곳입니다.

00:10:24.000 --> 00:10:29.000
추가한 모든 이미지나 비디오는 문서 주석에서 참조할 수 있습니다.

00:10:29.000 --> 00:10:43.000
프로젝트 네비게이터를 확장하면 SlothCreator가 이미 문서 카탈로그를 가지고 있다는 것을 알 수 있으므로 스크린샷의 밝은 모드와 어두운 모드 버전을 모두 드래그할 것입니다.

00:10:43.000 --> 00:10:49.000
문서 카탈로그에서 원하는 곳에 이미지를 배치할 수 있으며 Swift-DocC가 찾을 수 있습니다.

00:10:49.000 --> 00:10:56.000
이것은 내가 카탈로그를 구성하는 방법에 대한 유연성을 제공하지만, 그것을 구성하는 것이 나와 내 팀에게 가장 합리적이다.

00:10:56.000 --> 00:11:02.000
그런 다음 페이지에 이미지를 포함시키고 싶을 때, 기본 파일 이름으로 이미지를 참조합니다.

00:11:02.000 --> 00:11:10.000
문서 카탈로그에 포함된 이미지와 기타 파일은 문서만을 위한 것이라는 점에 유의하는 것도 중요합니다.

00:11:10.000 --> 00:11:16.000
예를 들어, 앱에 이미지를 포함시키고 싶다면, 자산 카탈로그를 사용할 것입니다.

00:11:16.000 --> 00:11:19.000
이제 문서에 스크린샷을 추가할 준비가 되었습니다.

00:11:19.000 --> 00:11:26.000
나는 alt 텍스트로 설명과 이미지의 파일 이름을 모두 제공하는 Markdown의 이미지 구문을 사용할 것이다.

00:11:26.000 --> 00:11:29.000
제가 방금 여기서 기본 파일 이름을 사용했다는 것을 주목하세요.

00:11:29.000 --> 00:11:34.000
DocC는 적절한 밝은 모드와 어두운 모드 버전을 자동으로 알아낼 것이다.

00:11:34.000 --> 00:11:39.000
나는 몇 가지 결론 텍스트로 문서를 끝낼 것이다.

00:11:39.000 --> 00:11:41.000
좋아.

00:11:41.000 --> 00:11:48.000
문서 미리보기 편집기는 이 기호에 대한 광범위한 문서를 만드는 것을 간단하고 재미있게 만들었다.

00:11:48.000 --> 00:11:54.000
다음으로, 최상위 페이지의 주제 그룹에 넣어 이 방법을 더 잘 정리하고 싶습니다.

00:11:54.000 --> 00:12:01.000
프로젝트 네비게이터를 활성화하고 문서 카탈로그에서 "SlothCreator" 마크다운 파일을 선택하겠습니다.

00:12:01.000 --> 00:12:07.000
문서 미리보기 편집기는 이제 SlothCreator의 최상위 페이지에 대한 렌더링된 콘텐츠를 보여줍니다.

00:12:07.000 --> 00:12:13.000
나는 DocC의 구문이 어떻게 작동하는지 더 잘 이해하기 위해 미리보기 편집기를 사용할 수 있는 방법을 정말 좋아한다.

00:12:13.000 --> 00:12:20.000
예를 들어, 나는 주제 그룹이 2단계 주제 제목 아래의 3단계 제목으로 정의된다는 것을 알 수 있다.

00:12:20.000 --> 00:12:27.000
페이지를 주제 그룹에 배치하려면, 3단계 제목 중 하나 아래에 목록 항목을 만들고 페이지로 연결하세요.

00:12:27.000 --> 00:12:31.000
나는 확장된 SwiftUI 이미지 유형을 위해 지금 이것을 할 것이다.

00:12:31.000 --> 00:12:40.000
이미지 확장은 사용자 인터페이스에서 나무늘보를 표시하는 데 사용되기 때문에, 나무늘보 뷰 주제 그룹에서 나무늘보 렌더링과 관련된 다른 기호에 속한다고 생각합니다.

00:12:40.000 --> 00:12:42.000
내가 거기에 링크할게.

00:12:42.000 --> 00:12:48.000
코드 완성은 유형에 대한 참조를 제공함으로써 나에게 도움이 될 것이다.

00:12:48.000 --> 00:12:55.000
좋아요, 이제 SlothCreator의 이미지 확장에 대한 문서는 잘 문서화되고 잘 정리되어 있습니다.

00:12:55.000 --> 00:13:04.000
SlothCreator에 대한 문서를 처음 게시한 이후로, 우리는 프레임워크의 기본 사항을 보여주는 샘플 코드 프로젝트를 요청하는 피드백을 받았습니다.

00:13:04.000 --> 00:13:10.000
이 문제를 해결하기 위해, 우리는 SlothCreator에 의존하는 Slothy라는 작은 앱을 만들었습니다.

00:13:10.000 --> 00:13:18.000
제 동료는 이미 새로운 Slothy 샘플로 연결되는 SlothCreator의 주요 문서에 포함시키고 싶은 기사의 대략적인 초안을 작성했습니다.

00:13:18.000 --> 00:13:20.000
확인해 보자.

00:13:20.000 --> 00:13:36.000
SlothCreator의 문서 카탈로그에 기사의 초안을 추가하는 것으로 시작하겠습니다.

00:13:36.000 --> 00:13:39.000
여기 내용은 이미 정말 좋다.

00:13:39.000 --> 00:13:47.000
그것은 샘플 앱의 다양한 기능을 안내하고 심지어 앱의 스크린샷과 사람들이 샘플을 다운로드할 수 있는 저장소에 대한 링크를 포함합니다.

00:13:47.000 --> 00:13:49.000
하지만 난 그걸 개선할 수 있을 것 같아.

00:13:49.000 --> 00:13:53.000
다행히도, 몇 가지 새로운 Swift-DocC 기능은 이것을 가능하게 한다.

00:13:53.000 --> 00:13:57.000
Swift-DocC의 저작 구문은 마크다운 위에 구축되었다.

00:13:57.000 --> 00:14:06.000
마크다운에 익숙하다면, 링크, 이미지, 볼드체와 이탤릭체 텍스트, 심지어 표로 콘텐츠를 포맷할 수 있어야 합니다.

00:14:06.000 --> 00:14:17.000
그런 다음 Swift-DocC는 문서를 위해 특별히 제작된 기능을 활용할 수 있는 지시문으로 기본 Markdown 구문을 확장합니다.

00:14:17.000 --> 00:14:25.000
나는 이제 Slothy 샘플 코드 기사를 연마하기 위해 이 지침들 중 일부를 사용할 것이지만, 이 지침들은 창의적으로 사용되도록 의도되었다는 것을 명심하세요.

00:14:25.000 --> 00:14:30.000
그것들을 사용하는 올바른 방법이나 그것들을 사용할 수 있는 올바른 종류의 페이지도 없다.

00:14:30.000 --> 00:14:39.000
프로젝트에 대한 문서를 더 쉽고, 더 매력적이고, 더 흥미롭게 만들기 위해 이러한 지침을 자신만의 방식으로 사용할 수 있는 방법에 대해 생각해 보세요.

00:14:39.000 --> 00:14:46.000
기사의 레이아웃을 편집하기 전에, 구체적인 문제를 파악하는 것으로 시작하고 싶습니다.

00:14:46.000 --> 00:14:52.000
그렇게 하면 나는 이 새로운 지침 중 일부를 채택하면서 실제로 개선하고 있다고 확신할 수 있다.

00:14:52.000 --> 00:14:55.000
나에게 가장 먼저 눈에 띄는 것은 눈에 띄지 않는 것이다.

00:14:55.000 --> 00:15:04.000
이 페이지는 내 독자들에게 특히 흥미로울 수 있는 샘플 코드가 있음에도 불구하고 다른 기사와 같은 스타일이다.

00:15:04.000 --> 00:15:11.000
그리고 그 시점에서, 이 기사가 하는 가장 중요한 일은 그 샘플 코드의 소스 저장소에 연결하는 것이다.

00:15:11.000 --> 00:15:17.000
그럼에도 불구하고, 샘플 코드 링크는 식별하고 발견하기가 매우 어렵다.

00:15:17.000 --> 00:15:20.000
기사의 본문 내용으로 넘어가세요.

00:15:20.000 --> 00:15:24.000
이 콘텐츠는 두 개의 이미지 단락 쌍을 중심으로 만들어졌다.

00:15:24.000 --> 00:15:28.000
각 단락에는 그것이 설명하고 있는 관련 이미지가 있다.

00:15:28.000 --> 00:15:30.000
여기에는 두 가지 문제가 있다.

00:15:30.000 --> 00:15:34.000
첫째, 그 이미지는 그들의 단락과 명확하게 연관되어 있지 않다.

00:15:34.000 --> 00:15:38.000
그리고 두 번째로, 이미지는 너무 많은 공간을 차지하고 있다.

00:15:38.000 --> 00:15:45.000
여기의 이미지는 각각의 단락을 강조하기 위한 것이지만, 그 자체로는 그다지 흥미롭지 않다.

00:15:45.000 --> 00:15:50.000
마지막으로, 페이지 하단에는 SlothCreator의 현지화 지원을 설명하는 섹션이 있습니다.

00:15:50.000 --> 00:15:55.000
여기에는 세 가지 다른 언어로 된 동일한 스크린샷의 세 가지 버전이 있습니다.

00:15:55.000 --> 00:16:05.000
하지만 그들은 수직으로 쌓여 있기 때문에, 둘 다 현지화 단락과의 모든 연관성을 잃었고 시각적으로 너무 많은 공간을 차지하고 있다.

00:16:05.000 --> 00:16:10.000
Swift-DocC를 사용하여 이 네 가지 문제를 어떻게 해결할 수 있는지 봅시다.

00:16:10.000 --> 00:16:13.000
기사의 본문 내용부터 시작합시다.

00:16:13.000 --> 00:16:18.000
나는 이미지-단락 쌍에 대한 올바른 해결책은 그것들을 그리드에 배치하는 것이라고 생각한다.

00:16:18.000 --> 00:16:25.000
이것은 이미지보다 단락의 중요성을 더 잘 강조하고, 각각의 단락에 이미지를 더 잘 첨부할 것이다.

00:16:25.000 --> 00:16:30.000
Swift-DocC의 그리드는 유연한 행과 열로 정의됩니다.

00:16:30.000 --> 00:16:35.000
두 개의 열이 포함된 행을 정의하는 것으로 시작하겠습니다.

00:16:35.000 --> 00:16:44.000
그런 다음 첫 번째 열에 단락을 넣고 두 번째 열에 이미지를 배치하겠습니다.

00:16:44.000 --> 00:16:53.000
나는 이미지가 이제 관련 단락에 더 잘 첨부되는 방식을 좋아하지만, 이 경우에는 단락이 이미지보다 우선해야 한다고 생각한다.

00:16:53.000 --> 00:16:56.000
단락이 포함된 열의 크기를 늘리자.

00:16:56.000 --> 00:17:03.000
첫 번째 열에 크기 매개 변수를 추가하고 기본값보다 큰 값을 지정하여 이것을 할 수 있습니다.

00:17:03.000 --> 00:17:07.000
크기 매개 변수는 주어진 열의 범위를 설정하는 데 사용됩니다.

00:17:07.000 --> 00:17:13.000
세 사이즈를 제공해 볼게요.

00:17:13.000 --> 00:17:18.000
내 첫 번째 열은 이제 네 개의 열 그리드에서 세 개의 열에 걸쳐 있다.

00:17:18.000 --> 00:17:20.000
그건 좀 너무 큰 것 같아.

00:17:20.000 --> 00:17:25.000
두 사이즈는 어때?

00:17:25.000 --> 00:17:27.000
텍스트와 이미지의 균형이 좋아 보인다.

00:17:27.000 --> 00:17:29.000
완벽해.

00:17:29.000 --> 00:17:39.000
두 번째 단락-이미지 쌍으로 같은 구성을 시도해 봅시다.

00:17:39.000 --> 00:17:43.000
이것은 확실히 개선이지만, 그 페이지는 지금 약간 불균형하게 느껴진다.

00:17:43.000 --> 00:17:50.000
이미지와 단락을 뒤집어 봅시다.

00:17:50.000 --> 00:17:51.000
사랑스러워.

00:17:51.000 --> 00:17:54.000
이 기사는 지금 정말 함께 오고 있다.

00:17:54.000 --> 00:18:02.000
우리가 현지화 섹션에서 확인한 문제는 이미지가 너무 많은 수직 공간을 차지하여 맥락을 잃고 있다는 것이다.

00:18:02.000 --> 00:18:09.000
탭 네비게이터는 여기서 완벽한 해결책이며, 여러 요소를 하나로 축소할 수 있게 해준다.

00:18:09.000 --> 00:18:12.000
한 번 해보자.

00:18:12.000 --> 00:18:18.000
나는 세 개의 탭으로 탭 네비게이터의 초기 구조를 만들 것이다.

00:18:18.000 --> 00:18:27.000
탭 네비게이터는 임의의 수의 자식 탭 지시문을 포함하는 포함 TabNavigator 지시문에 의해 정의됩니다.

00:18:27.000 --> 00:18:31.000
각 탭은 그 이름을 매개 변수로 제공한다.

00:18:31.000 --> 00:18:43.000
나는 세 개의 이미지를 각각의 탭 안에 넣을 것이다.

00:18:43.000 --> 00:18:53.000
이제 내 독자는 각 탭을 클릭하여 관심 있는 스크린샷에 접근할 수 있다.

00:18:53.000 --> 00:19:00.000
한 걸음 더 나아가기 위해, 독자를 정말 참여시키고 샘플에 대해 흥분시키는 빠른 비디오를 추가하고 싶습니다.

00:19:00.000 --> 00:19:09.000
Swift-DocC에는 내가 지금 삽입할 비디오 지침이 있다.

00:19:09.000 --> 00:19:19.000
비디오가 재생되기 전에 표시될 포스터 이미지, 비디오 자체 및 설명을 제공하겠습니다.

00:19:19.000 --> 00:19:20.000
좋아.

00:19:20.000 --> 00:19:23.000
소개 섹션으로 넘어갑시다.

00:19:23.000 --> 00:19:30.000
내가 알아차린 첫 번째 문제 중 하나는 샘플의 소스 코드 저장소에 액세스하는 링크를 찾는 것이 얼마나 어려운지이다.

00:19:30.000 --> 00:19:35.000
Swift-DocC는 이를 위해 정확히 설계된 행동 촉구 지시를 가지고 있다.

00:19:35.000 --> 00:19:40.000
페이지 상단에 메타데이터 컨테이너 지시문을 추가하는 것으로 시작하겠습니다.

00:19:40.000 --> 00:19:45.000
메타데이터 지시어는 페이지에 직접 렌더링되지 않는 추가 정보를 지정하는 데 사용됩니다.

00:19:45.000 --> 00:19:53.000
이 경우, 저는 그 페이지에 행동 촉구를 첨부하고 싶습니다.

00:19:53.000 --> 00:19:57.000
나는 행동 촉구에 목적지 URL과 목적을 제공했다.

00:19:57.000 --> 00:19:59.000
제가 "링크" 목적을 사용했다는 것을 주목하세요.

00:19:59.000 --> 00:20:10.000
또는, 이 링크가 다운로드로 직접 연결되는 경우 "다운로드"를 사용할 수 있지만, 이 경우 소스 저장소에 연결하고 있으므로 "링크"가 더 나은 선택입니다.

00:20:10.000 --> 00:20:16.000
마지막으로, 저는 이 기사가 SlothCreator 문서의 나머지 기사와 다르게 눈에 띄기를 바랍니다.

00:20:16.000 --> 00:20:21.000
나는 독자들이 이 페이지에 샘플 코드가 포함되어 있다는 것을 놓치지 않도록 하고 싶다.

00:20:21.000 --> 00:20:26.000
Swift-DocC는 샘플 코드가 포함된 기사를 특별히 지원한다는 것이 밝혀졌다.

00:20:26.000 --> 00:20:33.000
"샘플 코드" 인수와 함께 PageKind 지시어를 제공하여 내 페이지 종류가 샘플 코드임을 명시할 것이다.

00:20:33.000 --> 00:20:41.000
렌더링된 페이지에는 이제 샘플 코드 기사로 눈에 띄는 "샘플 코드" 제목 제목과 중괄호 페이지 아이콘이 있습니다.

00:20:41.000 --> 00:20:48.000
오늘날, Swift-DocC는 PageKind 지시문에 대해 지원되는 두 가지 값을 가지고 있다; "기사"와 "샘플 코드".

00:20:48.000 --> 00:21:05.000
우리는 당신에게 흥미로운 다른 기본 페이지 종류에 대해 듣고 싶습니다. Swift-DocC는 오픈 소스 프로젝트이기 때문에, Swift 포럼은 이런 종류의 것과 DocC가 어떻게 당신의 문서 요구를 더 잘 충족시킬 수 있는지에 대한 다른 피드백이나 아이디어를 논의할 수 있는 좋은 장소입니다.

00:21:05.000 --> 00:21:11.000
앱에서 SlothCreator를 사용하는 데 관심이 있는 개발자들은 이 기사에 대해 정말 흥분할 것이라고 생각합니다.

00:21:11.000 --> 00:21:13.000
그것은 매력적이고, 사려 깊고, 재미있다.

00:21:13.000 --> 00:21:21.000
나는 그들이 그것을 찾았는지 확인하고 싶으니, SlothCreator의 최상위 페이지로 돌아가서 그것에 연결할 수 있는 눈에 띄는 장소를 찾아보자.

00:21:21.000 --> 00:21:24.000
먼저, 나는 새로운 기사를 주제 그룹으로 큐레이팅할 것이다.

00:21:24.000 --> 00:21:40.000
이 경우, SlothCreator 프레임워크의 신규 이민자들이 Slothy 샘플에 관심을 가질 것으로 예상하기 때문에 Essentials 그룹이 가장 적절하다고 생각합니다.

00:21:40.000 --> 00:21:47.000
이것은 좋은 시작이지만, 한 걸음 더 나아가 페이지의 더 일반적인 주제 섹션 위에 이 기사를 소개하고 싶습니다.

00:21:47.000 --> 00:21:50.000
링크 지침은 이것에 완벽하다.

00:21:50.000 --> 00:21:58.000
추천 섹션을 만든 다음 링크 지침을 삽입할 것입니다.

00:21:58.000 --> 00:22:01.000
링크는 페이지를 강조할 수 있는 좋은 방법이다.

00:22:01.000 --> 00:22:05.000
카드 이미지와 페이지에 대한 설명을 더 높은 방식으로 포함하는 데 사용할 수 있습니다.

00:22:05.000 --> 00:22:14.000
링크 지침은 링크가 렌더링되어야 하는 방식을 정의하는 시각적 스타일 매개 변수와 주제 그룹과 마찬가지로 본문의 링크 목록을 허용합니다.

00:22:14.000 --> 00:22:24.000
내가 Slothy 샘플에 연결할게.

00:22:24.000 --> 00:22:38.000
링크는 기본 주제 섹션과 매우 유사한 기본 목록에서 상세한 그리드에 이르기까지 다양한 시각적 스타일을 지원합니다.

00:22:38.000 --> 00:22:44.000
그리드 스타일이 좋다고 생각하지만, 여기에 Slothy 샘플을 나타내는 사용자 지정 이미지를 포함하고 싶습니다.

00:22:44.000 --> 00:22:46.000
Slothy를 위한 마크다운으로 돌아가자.

00:22:46.000 --> 00:22:54.000
그리드 기반 링크 섹션에서 프레젠테이션을 위해 Slothy 기사를 가장 잘 준비하려면 메타데이터에 페이지 이미지를 제공해야 합니다.

00:22:54.000 --> 00:23:01.000
지금 그렇게 하자.

00:23:01.000 --> 00:23:11.000
Slothy 기사가 카드로 렌더링될 때마다 이 이미지가 사용되도록 "카드"의 목적을 지정한 다음, 내 이미지의 출처와 설명을 대체 텍스트로 제공할 것입니다.

00:23:11.000 --> 00:23:20.000
SlothCreator의 최상위 페이지로 돌아가면 Slothy는 이제 사용자 지정 페이지 이미지로 렌더링됩니다.

00:23:20.000 --> 00:23:31.000
나는 "늘보 시작하기" 기사도 소개할 것이다.

00:23:31.000 --> 00:23:36.000
마무리로, 나는 최상위 페이지에 몇 가지 추가 메타데이터를 추가할 것이다.

00:23:36.000 --> 00:23:40.000
나는 우리가 전에 했던 것처럼 메타데이터 지시문을 만드는 것으로 시작할 것이다.

00:23:40.000 --> 00:23:48.000
그리고 나서 나는 페이지 이미지를 제공할 것이다.

00:23:48.000 --> 00:23:52.000
이번에는 "카드" 대신 "아이콘" 목적을 지정하고 있습니다.

00:23:52.000 --> 00:24:00.000
따라서 이 이미지는 페이지의 탐색 사이드바와 소개 섹션을 포함하여 페이지의 아이콘이 렌더링되는 모든 곳에서 사용됩니다.

00:24:00.000 --> 00:24:09.000
마지막으로, 나는 사용자 지정 페이지 색상을 설정할 것이다.

00:24:09.000 --> 00:24:23.000
기본적으로 최상위 페이지는 파란색을 사용하지만, Swift-DocC는 노란색, 보라색, 주황색과 같은 많은 내장 표준 색상을 제공합니다.

00:24:23.000 --> 00:24:35.000
SlothCreator는 일반적으로 녹색을 악센트 색상으로 사용하므로, 여기에서도 사용하여 더 응집력 있는 경험을 만드는 것이 좋을 것이라고 생각합니다.

00:24:35.000 --> 00:24:36.000
와우.

00:24:36.000 --> 00:24:41.000
SlothCreator의 문서는 짧은 시간에 먼 길을 왔다.

00:24:41.000 --> 00:24:51.000
우리는 행과 열, 탭 네비게이터, 비디오와 같은 레이아웃 지시문을 사용하여 이 샘플 코드 기사를 더 잘 흐르게 하고 독자를 참여시킬 수 있었습니다.

00:24:51.000 --> 00:24:58.000
우리는 CallToAction 및 PageKind와 같은 메타데이터 지침을 사용하여 추가 수준의 광택을 추가했습니다.

00:24:58.000 --> 00:25:08.000
그리고 우리는 링크 지침으로 추천 콘텐츠를 높이고 PageColor 및 PageImage 지침으로 최상위 페이지에 브랜딩을 추가하여 모든 것을 하나로 묶었습니다.

00:25:08.000 --> 00:25:12.000
SlothCreator의 업데이트된 문서를 공유하게 되어 정말 기쁩니다.

00:25:12.000 --> 00:25:22.000
하지만 새로운 릴리스를 웹에 게시하기 전에, 사용자 지정 테마로 SlothCreator의 문서의 온라인 프레젠테이션을 최적화합시다.

00:25:22.000 --> 00:25:26.000
SlothCreator의 문서는 더 큰 제품 웹사이트의 일부로 게시됩니다.

00:25:26.000 --> 00:25:34.000
문서 사이트가 동일한 색상 팔레트와 글꼴 세트를 사용하여 제품 사이트와 시각적으로 일치하는지 확인하고 싶습니다.

00:25:34.000 --> 00:25:39.000
Swift-DocC의 사용자 지정 테마로 어떻게 그것을 달성할 수 있는지 살펴봅시다.

00:25:39.000 --> 00:25:50.000
Swift-DocC는 문서 사이트의 주어진 배포에서 색상, 테두리, 아이콘 및 글꼴과 같은 시각적 스타일이 렌더링되는 방식을 완전히 사용자 정의하는 것을 지원합니다.

00:25:50.000 --> 00:26:01.000
이러한 사용자 지정은 문서 카탈로그에 포함하는 특별한 JSON 파일에서 수행되며 문서 사이트를 나머지 온라인 존재와 더 잘 통합할 수 있습니다.

00:26:01.000 --> 00:26:08.000
Swift-DocC의 테마 도구를 사용하여 특정 기업 스타일에 맞추거나 마케팅 사이트나 개인 블로그에 더 잘 맞을 수 있습니다.

00:26:08.000 --> 00:26:15.000
그러나, 테마는 당신이 만들고 싶은 모든 문서 사용자 지정에 적합한 도구가 아닙니다.

00:26:15.000 --> 00:26:26.000
예를 들어, SlothCreator의 샘플 코드 페이지에서 했던 것처럼 특정 페이지의 모양을 사용자 정의하는 데 관심이 있다면, 사용자 지정 테마 대신 해당 페이지에서 지시어를 사용해야 합니다.

00:26:26.000 --> 00:26:30.000
테마 사용자 지정은 페이지별이 아닌 사이트 전체입니다.

00:26:30.000 --> 00:26:36.000
Swift-DocC 테마는 의도적으로 배포에 특화되어 있다는 점에 유의하는 것도 중요합니다.

00:26:36.000 --> 00:26:46.000
따라서 Xcode에서 문서를 열면, 문서는 Xcode 테마로 계속 렌더링되며 거기에 제시된 나머지 모든 문서와 함께 멋지게 보일 것입니다.

00:26:46.000 --> 00:26:55.000
즉, Xcode의 읽기 경험에 어떤 영향을 미칠지 걱정하지 않고 사이트의 웹 존재에 사용자 지정 테마를 집중할 수 있습니다.

00:26:55.000 --> 00:27:04.000
하지만 그것은 또한 사용자 지정이 Xcode와 웹에 모두 나타나기를 원한다면, 그것에 대한 지침을 사용하는 것이 낫다는 것을 의미합니다.

00:27:04.000 --> 00:27:07.000
SlothCreator의 사용자 지정 테마를 확인해 봅시다.

00:27:07.000 --> 00:27:19.000
Swift-DocC의 테마는 프로젝트의 문서 카탈로그에 배치하는 특정 이름 "theme-settings.json"을 가진 JSON 파일에 의해 정의됩니다.

00:27:19.000 --> 00:27:23.000
테마 설정 파일로 만드는 다양한 종류의 사용자 지정이 있습니다.

00:27:23.000 --> 00:27:28.000
SlothCreator를 위해 사이트의 색상과 글꼴을 사용자 정의할 것입니다.

00:27:28.000 --> 00:27:35.000
이러한 사용자 지정은 각각 "색상"과 "타이포그래피" 섹션에 배치됩니다.

00:27:35.000 --> 00:27:40.000
SlothCreator는 마케팅 자료 전반에 걸쳐 특정 녹색 음영을 사용합니다.

00:27:40.000 --> 00:27:45.000
저는 이미 PageColor 지시어를 사용하여 SlothCreator의 최상위 페이지 색상을 녹색으로 설정했습니다.

00:27:45.000 --> 00:27:52.000
이제 "표준 녹색" 색상 변수를 사용하여 내가 원하는 녹색의 특정 음영을 설정할 수 있습니다.

00:27:52.000 --> 00:28:02.000
그리고 SlothCreator는 심각한 게으름뱅 전문가를 대상으로 하는 꽤 심각한 프레임워크이기 때문에, 온라인 문서에서 Serif 글꼴을 사용하고 싶습니다.

00:28:02.000 --> 00:28:07.000
"Html-font" 타이포그래피 변수로 할 수 있습니다.

00:28:07.000 --> 00:28:12.000
물론, 이러한 사용자 지정은 Swift-DocC 테마로 가능한 것의 시작에 불과합니다.

00:28:12.000 --> 00:28:18.000
더 나아가는 데 관심이 있다면 Swift-DocC의 문서를 읽는 것이 좋습니다.

00:28:18.000 --> 00:28:29.000
이제 "theme-settings.json" 파일을 구성했으니, 문서 카탈로그에 추가하겠습니다.

00:28:29.000 --> 00:28:42.000
SlothCreator의 소스 제어 저장소는 이미 "xcodebuild" 명령줄 도구를 사용하여 새 커밋을 푸시할 때마다 SlothCreator의 문서를 구축하고 배포하는 지속적인 통합으로 구성되어 있습니다.

00:28:42.000 --> 00:28:48.000
이것은 우리의 문서가 프레임워크의 최신 변경 사항을 항상 최신 상태로 유지할 수 있도록 하는 훌륭한 워크플로우입니다.

00:28:48.000 --> 00:28:55.000
자신의 프로젝트에 대해 비슷한 워크플로우를 설정하는 데 관심이 있다면, Xcode 문서의 Swift-DocC 섹션을 확인하세요.

00:28:55.000 --> 00:28:59.000
우리가 함께 만든 이 변경 사항을 발표하게 되어 정말 기쁩니다.

00:28:59.000 --> 00:29:03.000
웹사이트의 새로운 배포를 촉발하기 위해 지금 커밋하고 밀어붙이자.

00:29:03.000 --> 00:29:10.000
마우스를 Xcode 창의 왼쪽 상단 모서리로 이동하고 소스 제어 네비게이터를 활성화할 것입니다.

00:29:10.000 --> 00:29:27.000
나는 모든 변경 사항을 준비하고, 커밋 메시지를 추가하고, 커밋하고, 푸시할 것이다.

00:29:27.000 --> 00:29:29.000
이제 나는 SlothCreator의 웹사이트를 열 것이다.

00:29:29.000 --> 00:29:32.000
여기 SlothCreator의 제품 사이트의 홈페이지가 있습니다.

00:29:32.000 --> 00:29:36.000
그것은 SlothCreator의 브랜딩과 일치하는 특정 글꼴과 색상을 사용합니다.

00:29:36.000 --> 00:29:40.000
"문서 읽기" 버튼을 클릭하겠습니다.

00:29:40.000 --> 00:29:43.000
그리고 여기 SlothCreator의 문서가 있습니다.

00:29:43.000 --> 00:29:48.000
웹사이트 버전에는 독특한 글꼴과 녹색 음영으로 우리가 적용한 사용자 지정 테마가 있습니다.

00:29:48.000 --> 00:29:55.000
또한 우리가 설정한 사용자 지정 아이콘과 새로운 Slothy 샘플 코드 기사가 있는 매력적인 특집 섹션이 있습니다.

00:29:55.000 --> 00:29:58.000
"샘플 코드 보기" 링크에서 열겠습니다.

00:29:58.000 --> 00:30:01.000
나는 이 기사가 어떻게 나왔는지에 대해 정말 만족한다.

00:30:01.000 --> 00:30:11.000
그리고 물론, Swift-DocC 웹사이트는 훌륭한 내비게이션 사이드바와 함께 제공되어 SlothCreator의 토픽 섹션에서 정리한 페이지를 쉽게 탐색할 수 있습니다.

00:30:11.000 --> 00:30:20.000
맨 위에는 "시작하기" 기사와 Sloth 구조체와 함께 Slothy 샘플 코드 기사를 배치한 Essentials 그룹이 있습니다.

00:30:20.000 --> 00:30:25.000
왼쪽에 있는 펼침 삼각형을 클릭하여 나무늘보 구조를 확장할 것입니다.

00:30:25.000 --> 00:30:31.000
이것은 내가 구조체의 아이들을 찾아볼 수 있게 해주며, 물론, 이 상징들은 주제 그룹에서도 잘 조직되어 있다.

00:30:31.000 --> 00:30:34.000
이전에 문서화한 이미지 이니셜라이저를 확인해 봅시다.

00:30:34.000 --> 00:30:42.000
Sloth Views 섹션으로 스크롤하고, 이미지 확장 기호를 확장하고, 이니셜라이저를 클릭하겠습니다.

00:30:42.000 --> 00:30:44.000
그리고 여기 우리가 있어.

00:30:44.000 --> 00:30:54.000
저는 내비게이션 사이드바를 통해 문서 작성자로서 제 프로젝트의 API를 통해 실제로 안내하는 개발자를 위한 직관적인 브라우징 경험을 만들 수 있는 방법을 좋아합니다.

00:30:54.000 --> 00:31:02.000
하지만 때때로 문서 리더로서, 나는 내가 어떤 페이지를 찾고 있는지 정확히 알고 있으며 바로 이동할 수 있는 쉬운 방법이 필요하다.

00:31:02.000 --> 00:31:10.000
Xcode 15로 구축된 Swift-DocC 웹사이트에는 페이지 사이를 쉽게 이동할 수 있는 새로운 빠른 탐색 기능이 있습니다.

00:31:10.000 --> 00:31:17.000
Swift-DocC Quick Navigation은 우리가 모든 Swift-DocC 웹사이트에 가져오게 되어 정말 기쁘게 하는 또 다른 커뮤니티 중심의 노력입니다.

00:31:17.000 --> 00:31:25.000
Xcode의 Open Quickly 기능과 마찬가지로, 키보드 단축키를 활성화하고 이름을 입력하기만 하면 페이지로 바로 이동할 수 있습니다.

00:31:25.000 --> 00:31:26.000
한 번 해보자.

00:31:26.000 --> 00:31:32.000
빠른 탐색을 활성화하려면 Shift-Command-O를 누르겠습니다.

00:31:32.000 --> 00:31:38.000
SlothCreator 문서의 모든 페이지에서 즉시 필터링을 시작할 수 있습니다.

00:31:38.000 --> 00:31:46.000
예를 들어, 시작 기사를 찾고 있다면, "시작"을 입력할 수 있습니다.

00:31:46.000 --> 00:31:47.000
그리고 저기 있어.

00:31:47.000 --> 00:31:54.000
나는 심지어 오른쪽에 있는 문서의 미리보기를 얻는다.

00:31:54.000 --> 00:31:58.000
페이지로 이동하려면 Enter를 누르겠습니다.

00:31:58.000 --> 00:32:02.000
하지만 아마도 나는 다른 나무늘보의 힘이 무엇인지 상기시켜야 할 것이다.

00:32:02.000 --> 00:32:09.000
Shift-Command-O를 다시 누르고 "power"를 입력하겠습니다.

00:32:09.000 --> 00:32:13.000
여기 파워피커와 "파워" 속성이 있습니다.

00:32:13.000 --> 00:32:16.000
아, 여기 있어, 파워 열거형.

00:32:16.000 --> 00:32:23.000
이번에는 "더 보기" 링크에서 페이지를 열겠습니다.

00:32:23.000 --> 00:32:27.000
그리고 그렇게, 나는 사용 가능한 모든 나무늘보 힘에 대해 읽을 수 있다.

00:32:27.000 --> 00:32:36.000
새로운 빠른 내비게이션 팝오버와 기존 내비게이션 사이드바를 모두 갖춘 Swift-DocC는 문서를 탐색하는 것을 정말 좋은 경험으로 만듭니다.

00:32:36.000 --> 00:32:43.000
Xcode 15의 Swift-DocC에는 진정으로 독특한 문서 웹사이트를 만들기 위한 강력한 새로운 도구가 함께 제공됩니다.

00:32:43.000 --> 00:32:46.000
새로운 문서 미리보기 편집기를 사용해 보세요.

00:32:46.000 --> 00:32:51.000
다양한 페이지 레이아웃을 탐색하고 실시간으로 렌더링하는 방법을 알 수 있습니다.

00:32:51.000 --> 00:33:00.000
행과 열, 링크, 페이지이미지와 같은 새로운 지침을 사용하면 눈에 띄고 프로젝트를 옹호하는 문서를 만들 수 있습니다.

00:33:00.000 --> 00:33:09.000
그리고 문서의 웹 버전을 프로젝트의 브랜딩이나 기존 온라인 존재와 더 잘 통합할 수 있도록 사용자 지정 테마를 추가해야 하는지 고려하십시오.

00:33:09.000 --> 00:33:16.000
Swift-DocC의 최신 소식을 따라잡으려면, WWDC22의 "Swift-DocC의 새로운 기능" 세션을 확인하세요.

00:33:16.000 --> 00:33:26.000
이 세션은 Xcode 14와 함께 제공된 새로운 게시 워크플로우에 대해 심층적으로 진행하며, GitHub 페이지와 같은 정적 호스팅 서비스에 게시하는 방법을 정확히 보여줍니다.

00:33:26.000 --> 00:33:36.000
그리고 단계별 튜토리얼을 통해 문서를 더 발전시키는 데 관심이 있다면, "DocC를 사용하여 대화형 튜토리얼 구축"을 보는 것이 좋습니다.

00:33:36.000 --> 00:33:43.000
Swift-DocC와 Xcode 15로 디자인하고 게시하는 문서를 보게 되어 매우 기쁩니다.

00:33:43.000 --> 00:33:46.000
정말 고마워.

00:33:46.000 --> 23:59:59.000
♪ ♪

