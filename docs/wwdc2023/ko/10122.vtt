WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
Jean-Yves: "웹을 위한 미디어 형식 탐색"에 오신 것을 환영합니다.

00:00:14.000 --> 00:00:28.000
저는 WebKit 엔지니어인 Jean-Yves Avenard입니다. 오늘은 Safari에서 지원되는 미디어 형식을 살펴보고 이미지와 비디오에 초점을 맞추고 Safari 17에서 사용할 수 있는 몇 가지 새로운 기술을 소개할 것입니다.

00:00:28.000 --> 00:00:38.000
우리는 몇 가지 새로운 이미지 형식에 대한 지원을 추가하고 있으며, 가장 일반적으로 발견되는 이미지에 대한 약간의 프레젠테이션을 한 후 사이트에 적합한 것을 선택할 수 있도록 도와드리겠습니다.

00:00:38.000 --> 00:00:45.000
그런 다음 Safari 17에서 구현한 새로운 기술로 MSE를 최적화하는 방법을 안내해 드리겠습니다.

00:00:45.000 --> 00:00:57.000
마지막으로 미디어 소스 확장을 사용하여 비디오에 AirPlay 지원을 추가할 수 있는 방법을 소개하겠습니다. 수년 동안 세 가지 형식이 가장 널리 사용되었습니다.

00:00:57.000 --> 00:01:09.000
그것들은 모든 브라우저에서 지원되며 쉽게 생성되고 배포되지만, 기술은 지난 10년 동안 엄청난 진전을 이루었으며, 이제 새로운 훌륭한 형식을 사용할 수 있습니다.

00:01:09.000 --> 00:01:13.000
현재 형식은 GIF, JPEG 및 PNG입니다.

00:01:13.000 --> 00:01:16.000
그것들을 더 자세히 살펴봅시다.

00:01:16.000 --> 00:01:28.000
GIF, 또는 우리가 태어난 나라에서 적절하게 말하는 것처럼, "jeef"는 36년 전에 도입된 형식으로 간단한 애니메이션, 밈 및 소셜 미디어 콘텐츠에 가장 적합합니다.

00:01:28.000 --> 00:01:33.000
그것은 한 번에 8비트 색상으로 제한되는 풀 컬러 팔레트를 지원하지 않습니다.

00:01:33.000 --> 00:01:41.000
무손실 형식이기 때문에 파일 크기는 꽤 클 수 있어 더 큰 애니메이션에 적합하지 않습니다.

00:01:41.000 --> 00:01:45.000
그리고 우리는 30년 전에 도입된 JPEG를 가지고 있다.

00:01:45.000 --> 00:01:56.000
훌륭한 기능은 프로그레시브 로딩으로, 완전히 로드되기 전에 이미지의 일부를 볼 수 있으며, 네트워크 속도가 특별히 빠르지 않은 시기에 특히 편리합니다.

00:01:56.000 --> 00:02:01.000
그것은 많은 색상과 디테일을 가진 사진 및 기타 이미지에 가장 적합합니다.

00:02:01.000 --> 00:02:02.000
그건 손실 형식이야.

00:02:02.000 --> 00:02:06.000
그것은 압축 과정에서 일부 이미지 데이터가 손실된다는 것을 의미합니다.

00:02:06.000 --> 00:02:12.000
압축은 또한 더 작은 파일 크기와 더 빠른 로딩 시간을 허용했다.

00:02:12.000 --> 00:02:17.000
GIF에는 많은 제한이 있기 때문에, PNG는 26년 전에 만들어졌다.

00:02:17.000 --> 00:02:24.000
PNG는 투명성을 지원하므로 서로 위에 이미지를 오버레이하는 데 유용합니다.

00:02:24.000 --> 00:02:33.000
넓은 영역의 단색 이미지나 로고와 같은 선명한 텍스트 또는 웹킷 자바스크립트의 다람쥐 물고기와 같은 삽화에 적합합니다.

00:02:33.000 --> 00:02:40.000
그것은 무손실이며 JPEG만큼 압축되지 않으므로, 색상이 많은 큰 이미지에는 적합하지 않습니다.

00:02:40.000 --> 00:02:49.000
GIF처럼, 그것은 대체하도록 설계되었고, 애니메이션을 지원하지만, 나는 야생에서 그것들을 거의 본 적이 없다.

00:02:49.000 --> 00:02:56.000
이러한 형식을 사용하면 사용하는 웹 브라우저에 관계없이 모든 사용자에게 도달할 수 있습니다.

00:02:56.000 --> 00:03:07.000
사파리 17은 레거시 형식 외에도 사용하고 싶은 네 가지 추가 현대적인 형식을 지원하며, 가장 합리적이라고 생각합니다.

00:03:07.000 --> 00:03:14.000
그것들은 훌륭하고 거의 모두 교환할 수 있지만, 그들은 각각 다른 것들에 비해 주요 이점을 가지고 있다.

00:03:14.000 --> 00:03:19.000
WebP는 Safari 14와 macOS Big Sur에 추가되었습니다.

00:03:19.000 --> 00:03:29.000
이것은 고급 압축 알고리즘을 사용하여 이미지 품질을 희생하지 않고 더 작은 파일 크기를 달성하는 현대적인 이미지 형식입니다.

00:03:29.000 --> 00:03:37.000
WebP 파일은 일반적으로 이전 이미지 형식보다 작으며, 이는 웹사이트 성능과 로딩 시간을 개선하는 데 도움이 될 수 있습니다.

00:03:37.000 --> 00:03:47.000
WebP를 사용하면 비디오와 같은 품질로 애니메이션을 할 수 있으므로, 크기나 색상 부족으로 인해 GIF를 사용하는 것이 나쁜 생각인 곳에서 사용하세요.

00:03:47.000 --> 00:03:58.000
사파리 17에 추가된 흥미로운 것 중 하나는 높은 압축률과 이미지 품질을 제공하도록 설계된 새로운 이미지 형식인 JPEG-XL입니다.

00:03:58.000 --> 00:04:09.000
JPEG-XL은 압축 비율을 조정하는 데 더 큰 유연성을 허용하는 "모듈러 엔트로피 코딩"이라는 새로운 압축 알고리즘을 사용합니다.

00:04:09.000 --> 00:04:19.000
JPEG와 같은 느린 연결을 통해 제공될 수 있는 이미지에 적합하므로 사용자는 전체 이미지가 완전히 로드되기 전에 무언가를 볼 수 있습니다.

00:04:19.000 --> 00:04:34.000
JPEG-XL의 주요 특징은 무손실 변환할 수 있다는 것입니다. 즉, 기존 JPEG 파일에서 JPEG-XL로 데이터 손실이 발생하지 않고 크기를 최대 60%까지 크게 줄일 수 있다는 것입니다.

00:04:34.000 --> 00:04:41.000
그것은 비교적 새로운 형식이므로, 모든 장치와 브라우저에서 널리 지원되지 않을 수 있습니다.

00:04:41.000 --> 00:04:51.000
AVIF는 AV1 비디오 코덱을 사용하여 이미지 품질을 희생하지 않고 높은 압축률을 달성하는 또 다른 현대적인 이미지 형식입니다.

00:04:51.000 --> 00:05:00.000
모든 브라우저에서 널리 지원되며, 라이브 사진에 적합하며 최대 12비트의 색 심도를 지원합니다.

00:05:00.000 --> 00:05:04.000
그것은 또한 가장 광범위한 지원을 가지고 있으며, 당신은 그것을 대안으로 포함시켜야 합니다.

00:05:04.000 --> 00:05:09.000
AVIF는 JPEG보다 최대 10배 더 작을 수 있다.

00:05:09.000 --> 00:05:15.000
사파리 17에서, 우리는 HEIF라고도 알려진 HEIC에 대한 지원을 추가했다.

00:05:15.000 --> 00:05:22.000
HEVC 비디오 코덱 압축 알고리즘을 사용하여 작은 파일 크기를 달성하는 이미지 형식입니다.

00:05:22.000 --> 00:05:30.000
하지만 다른 플랫폼에서는 널리 지원되지 않기 때문에, 대체 형식으로만 사용하고 싶을 것입니다.

00:05:30.000 --> 00:05:40.000
이것은 iPhone과 iPad에서 사진을 저장하는 데 사용하는 형식이므로, 변환 없이 iPhone에서 업로드된 사진을 직접 처리할 수 있습니다.

00:05:40.000 --> 00:05:53.000
앱 내에서 WKWebView를 사용하여 이미지를 표시하려는 경우, 하드웨어가 가속화되고 빠르고 효율적으로 렌더링할 수 있기 때문에 사용해야 하는 형식입니다.

00:05:53.000 --> 00:06:02.000
그러나 JPEG-XL, AVIF 및 HEIC의 주요 장점 중 하나는 넓은 색재현율과 HDR을 모두 지원한다는 것이다.

00:06:02.000 --> 00:06:12.000
수십억 개의 색상을 지원하는 큰 색 영역은 더 많은 색상을 파일에 보존하고 화면에 표시할 수 있게 해준다.

00:06:12.000 --> 00:06:21.000
HDR을 사용하면 어둠이 얼마나 어두울 수 있는지, 밝기가 얼마나 밝을 수 있는지, 그리고 얼마나 많은 빛을 얻을 수 있는지 더 잘 정의할 수 있습니다.

00:06:21.000 --> 00:06:34.000
함께, 당신은 야외 풍경이나 많은 대조를 가진 매우 밝은 장면에 더 많은 활기를 얻거나, 아름답고 복잡한 피부 색조를 완벽하게 렌더링할 수 있습니다.

00:06:34.000 --> 00:06:45.000
당신의 웹사이트가 널리 배포된 모든 웹 브라우저를 계속 지원하기를 원하기 때문에, 앞으로 몇 년 동안 GIF, JPEG 및 PNG를 제공해야 할 것입니다.

00:06:45.000 --> 00:06:55.000
그러나, 이러한 추가 형식을 제공함으로써, 당신은 여전히 호환되는 동안 사이트를 더 빨리 로드하고 더 적은 대역폭을 사용할 수 있습니다.

00:06:55.000 --> 00:06:57.000
넌 정말 선택할 필요가 없어.

00:06:57.000 --> 00:06:59.000
어떻게 하는지 보여줄게.

00:06:59.000 --> 00:07:09.000
JPEG-XL 이미지로 이미지 요소를 선언하는 것은 그것을 지원하지 않는 오래된 브라우저와 브라우저가 깨진 이미지를 얻을 수 있다는 것을 의미합니다.

00:07:09.000 --> 00:07:19.000
HTML의 그림 요소를 사용하면 대체 소스를 지정할 수 있으므로 브라우저가 지원하는 형식을 선택할 수 있습니다.

00:07:19.000 --> 00:07:26.000
최고의 성능을 제공하는 형식을 우선시하여 여러 대체 소스를 제공할 수도 있습니다.

00:07:26.000 --> 00:07:31.000
브라우저는 사용 가능한 형식 목록을 위에서 아래로 살펴볼 것이다.

00:07:31.000 --> 00:07:35.000
그래서 여기서, 지원되는 경우 HEIC를 먼저 사용할 것이다.

00:07:35.000 --> 00:07:43.000
일치하는 항목이 발견되지 않거나 디코딩이 실패한 경우, 이미지 요소의 소스 URL이 선택됩니다.

00:07:43.000 --> 00:07:55.000
사용자 에이전트 문자열을 보거나 사용자가 사용할 브라우저에 대해 걱정할 필요 없이 장치 지원에 관계없이 사람들에게 올바른 형식을 제공하는 것이 얼마나 쉬운지입니다.

00:07:55.000 --> 00:07:59.000
넌 선택할 필요가 없어. 브라우저가 당신을 위해 그것을 하게 하세요.

00:07:59.000 --> 00:08:10.000
이제 우리가 사용할 수 있는 현대적인 이미지 형식과 언제 사용해야 하는지 알았으니, 비디오를 살펴보고, 특히 적응형 스트리밍 비디오에 대해 알아보자.

00:08:10.000 --> 00:08:19.000
웹사이트에서의 비디오 프레젠테이션의 진화는 매혹적인 것이었고, 웹의 초창기부터 먼 길을 왔다.

00:08:19.000 --> 00:08:25.000
다음은 웹사이트에서 비디오 프레젠테이션의 진화에서 몇 가지 주요 이정표입니다.

00:08:25.000 --> 00:08:31.000
웹 초기에, 비디오는 기술적 한계로 인해 웹사이트에서 일반적으로 사용되지 않았다.

00:08:31.000 --> 00:08:35.000
웹사이트는 주로 텍스트와 정적 이미지로 구성되었다.

00:08:35.000 --> 00:08:43.000
2000년대 초, 플래시와 퀵타임과 같은 브라우저 플러그인은 웹사이트에 비디오를 추가하는 인기 있는 방법으로 등장했다.

00:08:43.000 --> 00:08:53.000
그리고 2010년에 HTML5가 도입되어 플러그인 없이 웹 페이지에 직접 비디오를 삽입할 수 있게 되었다.

00:08:53.000 --> 00:09:02.000
이를 통해 웹사이트에 비디오를 더 쉽게 추가할 수 있었고, 비디오 콘텐츠가 어떻게 표시되고 재생되는지에 대한 더 큰 유연성과 제어를 가능하게 했다.

00:09:02.000 --> 00:09:05.000
그리고 웹킷은 이 혁명의 최전선에 있었다.

00:09:05.000 --> 00:09:14.000
모바일 장치의 등장과 함께, 웹사이트가 더 작은 화면에 비디오 콘텐츠를 표시할 수 있는 것이 점점 더 중요해졌다.

00:09:14.000 --> 00:09:21.000
이것은 웹사이트가 다양한 화면 크기와 방향에 적응할 수 있도록 하는 새로운 기술의 개발로 이어졌다.

00:09:21.000 --> 00:09:25.000
HTTP 라이브 스트리밍은 2009년에 애플에 의해 도입되었다.

00:09:25.000 --> 00:09:40.000
HLS의 주요 기능 중 하나는 사용자의 인터넷 연결 속도와 장치 기능을 기반으로 최상의 비디오 품질을 제공할 수 있는 적응형 비트레이트 스트리밍을 지원하는 것입니다.

00:09:40.000 --> 00:09:50.000
HLS의 적응형 스트리밍은 비디오 콘텐츠를 일반적으로 2초에서 10초 사이의 작은 덩어리 또는 세그먼트로 나누어 작동합니다.

00:09:50.000 --> 00:10:02.000
각 세그먼트는 여러 비트레이트로 인코딩되며, 이러한 다른 비트레이트 버전은 M3U8 다중 변형 재생 목록의 형태로 매니페스트 파일을 통해 클라이언트가 사용할 수 있습니다.

00:10:02.000 --> 00:10:07.000
HLS는 가장 적합한 변형을 선택하는 데 훌륭한 일을 한다.

00:10:07.000 --> 00:10:11.000
그것은 사용하기 매우 간단하며 최종 사용자를 위한 최고의 해결책이다.

00:10:11.000 --> 00:10:19.000
불행히도, 데스크톱에서 모든 브라우저가 HLS를 지원하는 것은 아니며, 오늘날에도 사파리만 지원합니다.

00:10:19.000 --> 00:10:30.000
웹 개발자들은 미디어 데이터의 선택 및 전송 또는 데스크톱에서 DRMed 콘텐츠를 재생할 수 있는 기능과 같은 더 많은 제어와 유연성을 원했습니다.

00:10:30.000 --> 00:10:36.000
그래서 2013년에 미디어 소스 확장은 W3C 기관에 의해 출판되었다.

00:10:36.000 --> 00:10:53.000
Safari 8은 다른 브라우저와 함께 미디어 소스 확장 또는 MSE에 대한 지원을 빠르게 추가했으며, 웹 페이지에 버퍼링 및 해상도 관리에 대한 더 많은 제어와 책임을 부여함으로써 적응형 스트리밍을 가능하게 하는 저수준 툴킷입니다.

00:10:53.000 --> 00:10:57.000
전반적으로, MSE는 웹 개발자들을 위한 게임 체인저였다.

00:10:57.000 --> 00:11:05.000
그것은 웹에서 고품질 스트리밍 경험의 개발을 가능하게 했으며 현재 가장 많이 사용되는 웹 비디오 기술이다.

00:11:05.000 --> 00:11:07.000
MSE는 몇 가지 단점이 있다.

00:11:07.000 --> 00:11:15.000
버퍼 수준, 네트워크 액세스의 타이밍과 양, 미디어 변형 선택을 관리하는 데 특히 좋지 않다.

00:11:15.000 --> 00:11:23.000
이러한 비효율성은 현대 범용 컴퓨터와 같은 상대적으로 강력한 장치에서 크게 중요하지 않았다.

00:11:23.000 --> 00:11:35.000
모바일 장치의 전력 사용량은 HLS 네이티브 플레이어보다 훨씬 높았기 때문에 MSE는 MSE로 필요한 배터리 절약을 달성할 수 없었기 때문에 iPhone에서 사용할 수 없었습니다.

00:11:35.000 --> 00:11:42.000
다양한 사이트에 대한 우리의 모든 테스트는 MSE를 가능하게 하는 것이 배터리 수명의 회귀로 이어질 것이라는 것을 증명했다.

00:11:42.000 --> 00:11:56.000
기능이 더 좁거나 연결이 기껏해야 불안정한 장치에서는 HLS에서 가능한 것과 동일한 재생 품질을 달성하는 것이 어려울 수 있습니다.

00:11:56.000 --> 00:12:07.000
그 이유 중 하나는 MSE가 사용자 에이전트에서 페이지에서 실행되는 애플리케이션으로 미디어 데이터 스트리밍에 대한 대부분의 제어를 전송했기 때문이다.

00:12:07.000 --> 00:12:23.000
이 제어 전송은 비효율성을 추가했고, 페이지는 가장 저렴한 네트워킹 연결 경로를 찾을 수 있는 것처럼 사용자 에이전트와 동일한 수준의 지식이나 목표를 가지고 있지 않으며, 이는 일반적으로 훨씬 더 높은 전력 사용으로 이어졌다.

00:12:23.000 --> 00:12:34.000
그리고 올해, 우리는 이러한 단점을 해결하고 싶었고, MSE가 제공하는 유연성과 HLS의 효율성을 결합하는 방법을 찾기 위해 열심히 노력했습니다.

00:12:34.000 --> 00:12:45.000
그래서 저는 MSE의 최고와 HLS를 멋지게 만드는 요소인 매니지드 미디어 소스 API를 결합한 이 새로운 기술을 소개하게 되어 매우 기쁩니다.

00:12:45.000 --> 00:12:54.000
"관리되는" MediaSource는 MediaSource와 관련 객체에 대한 더 많은 제어가 브라우저에 부여된 곳입니다.

00:12:54.000 --> 00:13:09.000
미디어 웹사이트 작성자가 제한된 기능 장치에서 스트리밍 미디어 재생을 더 쉽게 지원할 수 있으며, 사용자 에이전트가 사용 가능한 메모리 및 네트워킹 기능의 변화에 대응할 수 있습니다.

00:13:09.000 --> 00:13:12.000
오래된 MSE에 대한 몇 가지 차이점을 살펴봅시다.

00:13:12.000 --> 00:13:19.000
매니지드 미디어 소스는 더 많은 미디어 데이터를 버퍼링하기에 좋은 시기일 때 웹 페이지에 알려줌으로써 전력 사용량을 줄일 수 있습니다.

00:13:19.000 --> 00:13:29.000
버퍼링하지 않을 때, 셀룰러 모뎀이 더 오랜 기간 동안 저전력 상태로 전환하여 배터리 수명을 늘릴 수 있습니다.

00:13:29.000 --> 00:13:40.000
시스템이 낮은 메모리 상태로 들어가면, 관리형 미디어 소스는 사용되지 않거나 버려진 버퍼링된 메모리를 지능적으로 지워 페이지를 더 효율적으로 만듭니다.

00:13:40.000 --> 00:13:49.000
관리형 미디어 소스는 버퍼링이 시작되고 중지되어야 할 때를 추적하기 때문에, 낮은 버퍼와 전체 버퍼 상태를 감지하는 페이지의 작업이 훨씬 쉬워집니다.

00:13:49.000 --> 00:13:52.000
브라우저가 당신을 위해 그것을 합니다.

00:13:52.000 --> 00:13:58.000
이러한 개선으로, 사파리는 5G 모뎀을 통해 미디어 요청을 보낼 수 있다.

00:13:58.000 --> 00:14:07.000
이를 통해 사이트에서 초고속 5G 네트워크를 사용하여 미디어 데이터를 믿을 수 없을 정도로 빠르게 로드할 수 있으며 전력 사용에 최소한의 영향을 미칠 수 있습니다.

00:14:07.000 --> 00:14:18.000
그리고 라이브 쇼를 재생해야 하는 경우, 매니지드 미디어 소스는 자동으로 감지하고 가능한 경우 LTE 또는 4G로 전환하여 배터리 수명을 연장합니다.

00:14:18.000 --> 00:14:20.000
넌 아직 운전석에 있어.

00:14:20.000 --> 00:14:26.000
당신은 여전히 어떤 해상도를 가져올지, 각 세그먼트를 다운로드하는 방법과 어디에서 다운로드할지 제어할 수 있습니다.

00:14:26.000 --> 00:14:32.000
매니지드 미디어 소스는 힌트만 제공하고 더 효율적인 버전의 MSE를 제공합니다.

00:14:32.000 --> 00:14:44.000
ManagedMediaSource를 사용하면 대역폭과 배터리 수명을 절약하여 사용자가 iPhone뿐만 아니라 iPad와 Mac에서도 비디오를 더 오래 볼 수 있습니다.

00:14:44.000 --> 00:14:49.000
MSE에서 관리형 미디어 소스로 얼마나 쉽게 마이그레이션할 수 있는지 보여드리겠습니다.

00:14:49.000 --> 00:14:57.000
비디오 플레이어를 MSE에서 관리형 미디어 소스로 전환하는 것은 쉽고 몇 단계만 거치면 됩니다.

00:14:57.000 --> 00:15:05.000
여기서, 나는 MSE 개발을 테스트하기 위해 과거에 여러 번 사용했던 매우 간단한 HTML 페이지를 열 것이다.

00:15:05.000 --> 00:15:11.000
그것은 비디오 요소를 만들고 12초의 데이터를 로드한 다음 재생한다.

00:15:11.000 --> 00:15:17.000
모든 논리는 실제로 포함된 유틸리티 파일 mediasource.js에서 발생합니다.

00:15:17.000 --> 00:15:22.000
그것을 살펴보고, 특히 runWithMSE 방법을 살펴봅시다.

00:15:22.000 --> 00:15:31.000
RunwithMSE는 페이지가 로드되고, 비디오 요소를 만들고, MediaSource 객체에 첨부하고, HTML 본문에 추가할 때까지 기다립니다.

00:15:31.000 --> 00:15:35.000
먼저, 관리형 미디어 소스를 사용할 수 있는지 확인해야 합니다.

00:15:35.000 --> 00:15:43.000
이것은 ManagedMediaSource 객체가 정의된 문서를 확인하여 쉽게 수행할 수 있으며, 그렇지 않은 경우 MSE를 사용하여 다시 사용할 수 있습니다.

00:15:43.000 --> 00:15:48.000
그런 다음 MediaSource에 대한 호출을 ManagedMediaSource 자체로 교체하십시오.

00:15:48.000 --> 00:16:05.000
제 생각에 더 쉬운 또 다른 방법은 MediaSource 자체를 재정의하는 것입니다. getMediaSource() 메서드를 정의하고 MediaSource 심을 설정합니다.

00:16:05.000 --> 00:16:12.000
그리고 이제, 당신이 MediaSource를 언급할 때마다, 당신은 실제로 ManagedMediaSource를 대신 사용할 것입니다.

00:16:12.000 --> 00:16:17.000
매니지드 미디어 소스는 항상 오래된 MSE보다 첫 번째 선택이 되어야 합니다.

00:16:17.000 --> 00:16:22.000
이제, 내 HTML 페이지로 돌아가.

00:16:22.000 --> 00:16:28.000
SourceBuffer, 이제 ManagedSourceBuffer를 만든 후, 두 개의 이벤트 핸들러를 추가합니다.

00:16:28.000 --> 00:16:38.000
Startstreaming은 새로운 콘텐츠를 가져오기 시작하고 관리되는 sourceBuffer에 추가해야 할 때 플레이어에게 알릴 것이다.

00:16:38.000 --> 00:16:44.000
그리고 플레이어가 언제 새로운 데이터 가져오기를 중단해야 하는지 알려주기 위해 "엔드스트리밍" 이벤트를 처리하는 것.

00:16:44.000 --> 00:16:51.000
사용자 에이전트는 이제 충분한 데이터가 있다고 결정했고, 이제 저전력 모드로 들어갈 수 있다.

00:16:51.000 --> 00:16:56.000
이 시연을 위해, 엔드스트리밍 이벤트 핸들러는 단지 자리 표시자일 뿐이다.

00:16:56.000 --> 00:17:03.000
MSE와 달리, sourceBuffer는 데이터를 추가할 때뿐만 아니라 언제든지 콘텐츠를 쫓아낼 수 있습니다.

00:17:03.000 --> 00:17:16.000
MSE를 사용하면 버퍼링된 범위가 새 데이터를 추가할 때만 증가했다고 가정하는 것은 결코 좋은 생각이 아니었으며, 이로 인해 재생이 중단되었고 MSE 사양은 정기적으로 확인하도록 권장했습니다.

00:17:16.000 --> 00:17:29.000
따라서 어떤 데이터가 제거되었는지 확인해야 하는 bufferedchange 이벤트에 대한 이벤트 핸들러를 추가해야 합니다.

00:17:29.000 --> 00:17:47.000
관리 미디어 소스 이벤트의 지침을 따르고 요소가 요청할 때만 데이터를 추가하면 iPhone과 iPad에서 5G 속도에 액세스하여 사용자가 더 높은 해상도, 더 짧은 리버퍼링 시간 및 최상의 배터리 수명에 액세스할 수 있습니다.

00:17:47.000 --> 00:17:54.000
이제 Safari 17에서 사용할 수 있는 새로운 ManagedMediaSource를 사용하여 적응형 스트리밍을 처리할 준비가 되었습니다.

00:17:54.000 --> 00:18:01.000
당신이 신경 쓰는 모든 것이 Apple 장치라면, 대신 HLS를 사용하는 것이 더 합리적일 것입니다.

00:18:01.000 --> 00:18:08.000
사용자가 계속 하고 싶은 일이 하나 더 있습니다: 좋아하는 TV에 AirPlay할 수 있는 기능.

00:18:08.000 --> 00:18:14.000
네이티브 HLS를 사용하는 것의 가장 큰 이점 중 하나는 AirPlay에 대한 자동 지원이었다.

00:18:14.000 --> 00:18:21.000
AirPlay를 사용하면 소파에 앉아 있는 동안 휴대폰에서 큰 AirPlay 장치로 비디오를 이동할 수 있습니다.

00:18:21.000 --> 00:18:30.000
에어플레이는 MSE에 존재하지 않는 보낼 수 있는 URL이 필요하며, 이것은 우리가 해결하고 싶었던 문제를 만들었습니다.

00:18:30.000 --> 00:18:38.000
앞서 올바른 이미지 형식을 선택할 때, 그림 요소와 함께 대체 소스를 추가할 수 있는 방법을 보여주었습니다.

00:18:38.000 --> 00:18:41.000
비디오 요소는 같은 메커니즘을 제공한다.

00:18:41.000 --> 00:18:55.000
HTTP 라이브 스트리밍 재생 목록을 비디오의 하위 소스 요소에 추가하기만 하면 사용자가 콘텐츠를 AirPlay할 때 Safari는 관리 미디어 소스에서 벗어나 AirPlay 장치에서 HLS 스트림을 재생합니다.

00:18:55.000 --> 00:19:03.000
사파리는 자동으로 비디오 플레이어 컨트롤에 AirPlay 아이콘을 추가하고 사용자가 비디오를 AirPlay할 수 있도록 합니다.

00:19:03.000 --> 00:19:16.000
이 모든 것이 너무 복잡하게 들린다면, HLS.js와 같은 프레임워크를 사용할 수 있습니다. 이 프레임워크는 사용 가능할 때 자동으로 관리 미디어 소스를 지원하고 당신을 위해 모든 노력을 다할 것입니다.

00:19:16.000 --> 00:19:26.000
비디오를 처리하기 위해 HLS.js를 사용하는 것은 HLS를 기본적으로 지원하지 않는 모든 웹 브라우저에서도 상당히 쉽고 사용할 수 있습니다.

00:19:26.000 --> 00:19:31.000
먼저, 평소와 같이 HTML 파일에 비디오 요소를 만들어야 합니다.

00:19:31.000 --> 00:19:36.000
우리는 먼저 HLS가 브라우저에서 기본적으로 지원되는지 확인합니다.

00:19:36.000 --> 00:19:41.000
만약 그렇다면, 우리는 비디오 소스 속성을 매니페스트 URL로 직접 설정할 수 있습니다.

00:19:41.000 --> 00:19:52.000
그렇지 않다면, 우리는 HLS.js가 실행할 수 있는지 확인하고, 그렇다면, HLS.js 라이브러리의 새 인스턴스를 만들고 ID "my-video"로 비디오 요소에 첨부합니다.

00:19:52.000 --> 00:19:57.000
그런 다음 HLS 재생 목록 파일, 이 경우 my-video.m3u8을 로드합니다.

00:19:57.000 --> 00:19:59.000
그게 다야.

00:19:59.000 --> 00:20:05.000
이 단계를 통해 대부분의 브라우저에서 HLS 비디오를 재생할 수 있어야 합니다.

00:20:05.000 --> 00:20:15.000
매니지드 MSE를 설계할 때, 우리는 실수로 아무것도 남지 않았고 사용자가 과거에 했던 것과 같은 수준의 기능을 계속 얻을 수 있도록 하고 싶었습니다.

00:20:15.000 --> 00:20:23.000
따라서 Mac, iPad 및 iPhone에서 관리되는 MSE를 활성화하려면 플레이어가 AirPlay 소스 대안을 제공해야 합니다.

00:20:23.000 --> 00:20:35.000
그것 없이도 관리되는 MSE에 액세스할 수 있지만, 원격 재생 API에서 미디어 요소에서 disableRemotePlayback을 호출하여 AirPlay를 명시적으로 비활성화해야 합니다.

00:20:35.000 --> 00:20:36.000
그리고 그게 다야.

00:20:36.000 --> 00:20:44.000
매니지드 MSE는 SharePlay, 공간화된 오디오 또는 HDR과 같이 작년에 추가한 모든 훌륭한 기술을 지원합니다.

00:20:44.000 --> 00:20:52.000
관리형 MSE는 macOS와 iPad OS의 Safari 17과 iPhone의 실험 플래그 뒤에서 사용할 수 있습니다.

00:20:52.000 --> 00:20:56.000
우리는 이것이 마침내 아이폰에 출시되는 것을 매우 기쁘게 생각합니다.

00:20:56.000 --> 00:21:02.000
나는 당신이 새로운 이미지 형식을 시도하고 매니지드 미디어 소스로 실험하기를 바랍니다.

00:21:02.000 --> 00:21:06.000
사파리로 사이트를 테스트하세요.

00:21:06.000 --> 00:21:17.000
또한, 우리는 2주로 Safari Technology Preview를 출시하며, 최신 새로운 기능을 최종 사용자에게 도달하기 전에 테스트할 수 있습니다.

00:21:17.000 --> 00:21:29.000
적극적으로 개발된 모든 프로그램과 마찬가지로, 결함과 버그는 때때로 발생하며, bugs.webkit.org에 보고해 주시면 대단히 감사하겠습니다.

00:21:29.000 --> 00:21:32.000
의견이나 제안을 제출할 수도 있습니다.

00:21:32.000 --> 00:21:34.000
우리는 항상 듣고 있어.

00:21:34.000 --> 00:21:40.000
"CSS의 새로운 기능"에서 사파리의 새로운 CSS 기능에 대해 배울 수 있습니다.

00:21:40.000 --> 00:21:48.000
그리고 "사파리 개발자 기능 재발견"을 확인하여 기능 플래그를 켜서 관리 미디어 소스를 사용해 보는 방법에 대해 알아보세요.

00:21:48.000 --> 00:21:50.000
봐줘서 고마워.

00:21:50.000 --> 23:59:59.000
♪ ♪

