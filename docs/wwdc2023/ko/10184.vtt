WEBVTT

00:00:01.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:16.000
캔: 안녕하세요, 저는 캔 아란이고, iOS 시스템 경험 팀의 엔지니어입니다.

00:00:16.000 --> 00:00:20.000
라이브 활동에 대해 이야기하게 되어 기쁩니다.

00:00:20.000 --> 00:00:26.000
이 강연에서, 저는 당신에게 라이브 활동에 대한 개요를 제공할 것입니다.

00:00:26.000 --> 00:00:29.000
그런 다음 나는 라이브 활동의 수명 주기를 살펴볼 것이다.

00:00:29.000 --> 00:00:36.000
마지막으로, 당신의 활동을 위한 몰입적이고 간단한 UI를 만드는 방법을 보여드리겠습니다.

00:00:36.000 --> 00:00:41.000
우선, 나는 라이브 활동이 무엇을 할 수 있는지 파헤칠 것이다.

00:00:41.000 --> 00:00:49.000
라이브 활동은 이벤트나 작업의 진행 상황을 추적할 수 있는 몰입적이고 눈길을 수 있는 방법입니다.

00:00:49.000 --> 00:00:59.000
라이브 활동은 개별적인 시작과 끝이 있으며, 백그라운드 앱 런타임 또는 푸시 알림을 사용하여 원격으로 실시간 업데이트를 제공할 수 있습니다.

00:00:59.000 --> 00:01:06.000
다음은 유나이티드 항공과 MLB의 좋은 예입니다.

00:01:06.000 --> 00:01:12.000
라이브 활동은 iPhone 14 Pro와 Pro Max에서 훨씬 더 몰입할 수 있습니다.

00:01:12.000 --> 00:01:19.000
다이나믹 아일랜드는 앱이 백그라운드에 있을 때 시스템 전체에 라이브 활동을 표시합니다.

00:01:19.000 --> 00:01:28.000
하나의 라이브 활동이 활성화되면, 가변 너비의 "소형" 프레젠테이션을 사용하여 렌더링됩니다.

00:01:28.000 --> 00:01:32.000
다이나믹 아일랜드는 한 번에 최대 두 개의 라이브 활동을 보여준다.

00:01:32.000 --> 00:01:41.000
이러한 라이브 활동 중 하나는 TrueDepth 카메라에 부착된 것처럼 보이는 반면, 다른 하나는 분리된 보기로 렌더링됩니다.

00:01:41.000 --> 00:01:47.000
이 두 라이브 활동 모두 "최소한의" 프레젠테이션을 사용합니다.

00:01:47.000 --> 00:01:58.000
언제든지, 사람은 라이브 활동을 길게 눌러 "확장된" 프레젠테이션을 표시하여 훨씬 더 눈길을 수 있는 정보를 제공할 수 있습니다.

00:01:58.000 --> 00:02:07.000
확장된 프레젠테이션에서, 뷰는 앱 내의 다른 영역으로 딥 링크하여 풍부한 사용자 경험을 제공할 수 있습니다.

00:02:07.000 --> 00:02:13.000
iOS 17에서 라이브 활동에 대한 몇 가지 새로운 경험이 있습니다.

00:02:13.000 --> 00:02:20.000
잠금 화면과 다이나믹 아일랜드 외에도, 라이브 활동이 대기에 나타납니다.

00:02:20.000 --> 00:02:24.000
그리고 이제, iPad는 라이브 활동도 지원합니다.

00:02:24.000 --> 00:02:33.000
iPadOS에서 구현을 활성화하고, Crumbl 쿠키에서 이와 같은 몰입형 라이브 활동을 iPad로 가져오세요.

00:02:33.000 --> 00:02:42.000
iOS 17에서는 WidgetKit과 SwiftUI를 사용하여 라이브 활동에 상호 작용을 추가할 수 있습니다.

00:02:42.000 --> 00:02:48.000
사용자 경험을 향상시키기 위해 버튼이나 토글을 추가할 수 있습니다.

00:02:48.000 --> 00:02:56.000
루카의 비디오 "위젯에 생명을 불어넣기"에서 위젯에 상호 작용을 가져오는 방법에 대해 자세히 알아보세요.

00:02:56.000 --> 00:03:06.000
라이브 활동은 ActivityKit 프레임워크에 의존하여 앱이 수명 주기를 요청, 업데이트 및 관리할 수 있도록 합니다.

00:03:06.000 --> 00:03:11.000
그것들은 SwiftUI와 WidgetKit을 사용하여 선언적으로 배치되었다.

00:03:11.000 --> 00:03:17.000
이전에 홈 화면 위젯을 구현한 적이 있다면, 이것은 매우 친숙하게 느껴질 것입니다.

00:03:17.000 --> 00:03:22.000
앱이 포그라운드에 있을 때 라이브 활동을 요청할 수 있습니다.

00:03:22.000 --> 00:03:33.000
앱은 개별 사용자 작업, 이벤트 "팔로우" 또는 명시적으로 작업을 시작한 후에만 라이브 활동을 요청해야 합니다.

00:03:33.000 --> 00:03:37.000
이것은 긍정적인 사용자 경험을 보장하는 데 매우 중요하다.

00:03:37.000 --> 00:03:42.000
라이브 활동은 알림과 유사하게 사용자가 중재합니다.

00:03:42.000 --> 00:03:47.000
누군가는 당신의 앱을 쉽게 무시하거나 끌 수 있습니다.

00:03:47.000 --> 00:03:57.000
API는 잠금 화면에서 세 개의 Dynamic Island 프레젠테이션에 이르기까지 모든 프레젠테이션을 지원해야 합니다.

00:03:57.000 --> 00:04:03.000
StandBy에서, 시스템은 잠금 화면 프레젠테이션을 확장하여 화면을 채웁니다.

00:04:03.000 --> 00:04:14.000
백그라운드 런타임에 의존하는 것 외에도, 앱은 "라이브액티비티" 푸시 유형으로 푸시 알림을 사용하여 라이브액티티를 원격으로 업데이트할 수 있습니다.

00:04:14.000 --> 00:04:23.000
푸시 알림으로 라이브 활동을 업데이트하는 방법에 대한 자세한 내용은 Jeff의 비디오를 확인할 수 있습니다.

00:04:23.000 --> 00:04:28.000
앱의 라이브 활동은 수명 주기 동안 다양한 단계를 거칩니다.

00:04:28.000 --> 00:04:36.000
저는 사람이 이모티콘 레인저스 앱에서 영웅을 선택하고 모험에 데려갈 수 있는 라이브 활동을 만들고 있습니다.

00:04:36.000 --> 00:04:42.000
모험하는 동안, 영웅은 도전에 직면하고 보스와 싸울 것이다.

00:04:42.000 --> 00:04:48.000
나는 내 라이브 활동에서 이 모험의 중요한 순간을 보여줄 것이다.

00:04:48.000 --> 00:04:54.000
이 라이브 활동은 영웅의 모험에 대한 가장 필수적인 정보를 보여준다.

00:04:54.000 --> 00:05:05.000
여기에는 영웅의 이름과 통계, 아바타, 건강 수준, 그리고 이 영웅이 모험에서 경험하는 것에 대한 설명이 포함되어 있습니다.

00:05:05.000 --> 00:05:09.000
라이브 활동의 수명 주기에는 네 가지 주요 단계가 있다.

00:05:09.000 --> 00:05:12.000
활동을 요청하는 것으로 시작하세요.

00:05:12.000 --> 00:05:16.000
일단 시작되면, 최신 콘텐츠로 업데이트하세요.

00:05:16.000 --> 00:05:22.000
그 동안, 사람들이 그것을 끝내는 것과 같은 상태 변화에 반응하기 위해 당신의 활동을 관찰하세요.

00:05:22.000 --> 00:05:28.000
작업이 완료되면, 활동을 끝내야 합니다.

00:05:28.000 --> 00:05:31.000
라이브 활동을 요청하는 것은 매우 간단하다.

00:05:31.000 --> 00:05:41.000
앱이 포그라운드에 있는지 확인하고, 초기 콘텐츠와 필요한 활동 요청 데이터가 있도록 앱을 구성하십시오.

00:05:41.000 --> 00:05:53.000
Emoji Rangers 앱에서 라이브 활동을 요청하기 전에, "ActivityAttributes"를 구현하여 라이브 활동에 대한 정적 및 동적 데이터 세트를 정의하는 것부터 시작해야 합니다.

00:05:53.000 --> 00:05:57.000
나는 그것을 "모험 속성"이라고 부른다.

00:05:57.000 --> 00:06:02.000
"AdventureAttributes"는 영웅인 하나의 정적 데이터를 묘사한다.

00:06:02.000 --> 00:06:11.000
또한 영웅의 건강 수준과 이벤트 설명을 캡슐화하는 필수 사용자 지정 "ContentState"를 정의합니다.

00:06:11.000 --> 00:06:21.000
이러한 속성이 변경됨에 따라, 내 라이브 활동 UI가 업데이트되고 화면에 모험의 현재 상태를 보여줄 수 있습니다.

00:06:21.000 --> 00:06:27.000
이제 동적 및 정적 데이터가 준비되었으므로, 모험 활동 요청을 설정하겠습니다.

00:06:27.000 --> 00:06:39.000
나는 영웅과 함께 AdventureAttributes의 인스턴스를 만들고 영웅의 체력 수준과 이벤트 설명으로 초기 콘텐츠를 설정할 것이다.

00:06:39.000 --> 00:06:48.000
각 활동 콘텐츠는 콘텐츠가 오래된 것으로 간주될 때 시스템에 알리기 위해 오래된 날짜를 제공할 수 있습니다.

00:06:48.000 --> 00:06:51.000
지금은, 나는 0으로 지나갈 거야.

00:06:51.000 --> 00:07:01.000
콘텐츠의 관련성 점수는 여러 모험 활동이 시작될 때 각 라이브 활동이 나타나는 순서를 결정합니다.

00:07:01.000 --> 00:07:08.000
만약 내가 또 다른 모험 활동을 시작한다면, 나는 각각에 대해 다른 관련성 점수를 지정할 것이다.

00:07:08.000 --> 00:07:11.000
관련성 점수를 통과하는 것은 선택 사항이다.

00:07:11.000 --> 00:07:14.000
기본값은 0입니다.

00:07:14.000 --> 00:07:17.000
이제 활동을 요청할 수 있습니다.

00:07:17.000 --> 00:07:24.000
속성, 초기 콘텐츠 및 푸시 알림 유형을 전달하겠습니다.

00:07:24.000 --> 00:07:34.000
푸시 알림 유형은 라이브 활동이 ActivityKit 푸시 알림으로 동적 콘텐츠에 대한 업데이트를 받는지 여부를 나타냅니다.

00:07:34.000 --> 00:07:41.000
이 예에서, 나는 그것을 "nil"으로 설정할 것이다. 이는 이 활동이 로컬에서만 업데이트를 받을 수 있다는 것을 의미한다.

00:07:41.000 --> 00:07:50.000
이 라이브 활동을 시작하려면, 이모티콘 레인저스 앱의 라이브 활동 설정을 활성화해야 합니다.

00:07:50.000 --> 00:08:00.000
이제 라이브 활동을 요청할 수 있으므로, 영웅이 스릴 넘치는 작업을 겪을 때 모험을 업데이트할 수 있는 방법을 살펴볼 것입니다.

00:08:00.000 --> 00:08:04.000
동적 속성은 내 라이브 활동을 언제 업데이트해야 하는지 알려준다.

00:08:04.000 --> 00:08:10.000
이벤트 설명이나 영웅의 건강 수준이 바뀔 때마다, 나는 내 활동을 업데이트할 것이다.

00:08:10.000 --> 00:08:15.000
오 안 돼! 영웅은 상사로부터 치명타를 받는다.

00:08:15.000 --> 00:08:24.000
그래서 나는 건강 수준의 변화를 반영하고 사건을 설명하는 "contentState"를 만든다.

00:08:24.000 --> 00:08:29.000
영웅의 체력이 크게 감소했기 때문에, 나는 경고를 보내야 한다.

00:08:29.000 --> 00:08:32.000
나는 그것에 대한 경고 구성을 만들 것이다.

00:08:32.000 --> 00:08:42.000
라이브 활동과 함께 중요한 정보가 변경되면 iPhone, iPad 또는 동기화된 Apple Watch에 경고가 표시됩니다.

00:08:42.000 --> 00:08:47.000
이 경우, 영웅은 심하게 다쳤고 치유하기 위해 물약이 필요하다.

00:08:47.000 --> 00:08:54.000
구성 제목과 본문은 Apple Watch에서만 사용되며, 알림으로 표시됩니다.

00:08:54.000 --> 00:09:02.000
iPhone과 iPad에서 업데이트된 콘텐츠가 있는 활동 UI는 지정된 사운드와 함께 나타납니다.

00:09:02.000 --> 00:09:10.000
이제 업데이트된 콘텐츠와 경고 구성으로 활동 객체에 대한 업데이트 API를 호출할 수 있습니다.

00:09:10.000 --> 00:09:17.000
이렇게 하면 라이브 활동 UI가 업데이트되고 사용자가 이 업데이트로 알림을 받을 수 있습니다.

00:09:17.000 --> 00:09:23.000
활동 상태 변경은 라이브 활동의 수명 주기 동안 언제든지 발생할 수 있습니다.

00:09:23.000 --> 00:09:30.000
4개의 가능한 상태가 있다: "시작됨", "완료됨", "기각됨" 그리고 "낡았다."

00:09:30.000 --> 00:09:38.000
나는 비동기적으로 업데이트를 받기 위해 활동 객체에서 activityStateUpdates API를 사용하여 이러한 상태를 관찰한다.

00:09:38.000 --> 00:09:50.000
활동이 해산되면, 나는 더 이상 모험 데이터를 추적하지 않도록 하고, 진행 중인 활동을 보여주지 않도록 앱에서 UI를 업데이트한다.

00:09:50.000 --> 00:09:57.000
또한 activityState API를 통해 상태를 확인하여 필요할 때 동기적으로 검색할 수 있습니다.

00:09:57.000 --> 00:09:59.000
내 영웅은 많은 일을 겪었다.

00:09:59.000 --> 00:10:03.000
이제 모험 라이브 활동을 끝낼 시간이다.

00:10:03.000 --> 00:10:09.000
활동을 끝내기 위해, 나는 최종 콘텐츠를 만드는 것으로 시작한다.

00:10:09.000 --> 00:10:15.000
내 콘텐츠는 영웅이 보스를 물리치는 모험의 최종 상태를 보여줄 것이다.

00:10:15.000 --> 00:10:19.000
그러면 나는 내 UI에 대한 해고 정책을 결정할 것이다.

00:10:19.000 --> 00:10:23.000
기본 정책은 이 경우에 적합하다.

00:10:23.000 --> 00:10:37.000
이 정책은 모험 정보가 끝난 후 얼마 동안 잠금 화면에 나타나도록 보장하여 누군가가 잠금 화면을 보고 모험이 끝날 때 무슨 일이 일어났는지 볼 수 있도록 합니다.

00:10:37.000 --> 00:10:43.000
나는 이제 모험 활동을 끝내고 영웅에게 휴식을 줄 수 있다.

00:10:43.000 --> 00:10:46.000
나는 내 라이브 활동 수명 주기에 대한 모든 논리를 구축했다.

00:10:46.000 --> 00:10:50.000
활동 UI에 집중할 시간이다.

00:10:50.000 --> 00:10:56.000
이모티콘 레인저 위젯 확장 프로그램은 현재 WidgetBundle에 두 개의 위젯이 있습니다.

00:10:56.000 --> 00:11:00.000
WidgetBundle에 라이브 활동 구성을 추가해야 합니다.

00:11:00.000 --> 00:11:04.000
나는 그것을 "AdventureActivityConfiguration"이라고 부를 것이다.

00:11:04.000 --> 00:11:13.000
"AdventureActivityConfiguration"은 위젯 인프라를 활용하며, 본문에 WidgetConfiguration을 반환해야 합니다.

00:11:13.000 --> 00:11:19.000
내 라이브 활동의 내용을 설명하는 ActivityConfiguration 객체를 만들 것이다.

00:11:19.000 --> 00:11:31.000
각 프레젠테이션 종료에 대해 ActivityConfiguration 객체는 정적 및 동적 속성과 활동 ID를 저장하는 ActivityViewContext를 제공합니다.

00:11:31.000 --> 00:11:37.000
이 컨텍스트는 구성에 전달된 속성 유형을 기반으로 생성됩니다.

00:11:37.000 --> 00:11:43.000
이 유형은 당신의 활동이 요청된 속성과 일치해야 합니다.

00:11:43.000 --> 00:11:50.000
활동 구성을 성공적으로 초기화할 수 있도록 "AdventureAttributes" 유형을 전달할 것입니다.

00:11:50.000 --> 00:11:55.000
"ActivityConfiguration"의 첫 번째 폐쇄는 잠금 화면 UI를 지정합니다.

00:11:55.000 --> 00:12:02.000
내 관점 컨텍스트가 활동 업데이트와 함께 변경됨에 따라, 이 UI는 각 업데이트에 대해 렌더링될 것이다.

00:12:02.000 --> 00:12:13.000
위젯과 마찬가지로, 저는 라이브 활동을 위한 잠금 화면 UI의 크기를 제공하지 않지만, 시스템이 적절한 치수를 결정하도록 합니다.

00:12:13.000 --> 00:12:25.000
이모티콘 레인저 활동을 위해, 나는 네이비 블루 배경으로 잠금 화면에 영웅 정보, 이름과 아바타, 건강 수준 및 이벤트 설명을 보여줄 것이다.

00:12:25.000 --> 00:12:32.000
"AdventureLiveActivityView"는 전달된 뷰 컨텍스트를 통해 모든 정보를 가질 것이다.

00:12:32.000 --> 00:12:43.000
잠금 화면의 내 라이브 활동은 간단하고 우아해 보이며, 영웅이 모험에서 겪고 있는 것에 대해 필요한 모든 정보를 가지고 있다.

00:12:43.000 --> 00:12:49.000
이제 잠금 화면 UI를 마무리했으니, 다이나믹 아일랜드 프레젠테이션을 구현해야 합니다.

00:12:49.000 --> 00:12:54.000
세 가지 프레젠테이션이 있습니다: 소형, 최소 및 확장.

00:12:54.000 --> 00:13:03.000
내 앱의 라이브 활동이 시스템에서 실행되는 유일한 활동일 때, 컴팩트한 프레젠테이션을 사용하여 표시됩니다.

00:13:03.000 --> 00:13:08.000
컴팩트한 프레젠테이션에는 선행과 후행의 두 가지 영역이 있다.

00:13:08.000 --> 00:13:13.000
그들은 다이나믹 섬에서 응집력 있는 프레젠테이션을 형성하기 위해 함께 나타난다.

00:13:13.000 --> 00:13:21.000
공간이 제한되어 있기 때문에, 선행 및 후행 공간에서 보여줄 필수 콘텐츠를 선택하세요.

00:13:21.000 --> 00:13:28.000
사용자는 여기에 있는 콘텐츠를 보고 특정 활동을 식별할 수 있어야 합니다.

00:13:28.000 --> 00:13:42.000
ActivityConfiguration 객체의 "DynamicIsland" 폐쇄에서, 나는 확장, compactLeading, compactTrailing 및 최소 뷰를 만들기 위해 뷰 컨텍스트에 다시 접근할 수 있다.

00:13:42.000 --> 00:13:49.000
각 프레젠테이션을 표현하기 위해 DynamicIsland 뷰 빌더를 만들어야 합니다.

00:13:49.000 --> 00:14:01.000
내 영웅의 모험을 위해, 나는 영웅 아바타를 주요 콘텐츠에 추가하고 건강 수준을 후행 보기에 추가할 것이다.

00:14:01.000 --> 00:14:08.000
나는 또한 내 영웅의 건강 수준에 따라 역동적인 색조를 가질 것이다.

00:14:08.000 --> 00:14:15.000
모험을 위한 컴팩트한 프레젠테이션이 지금 준비되었습니다.

00:14:15.000 --> 00:14:34.000
하나 이상의 앱이 라이브 활동을 시작하면, 시스템은 어떤 라이브 활동을 볼 수 있는지 선택하고 각각에 대한 최소한의 프레젠테이션을 사용하여 둘 다 표시합니다: 하나의 최소한의 프레젠테이션은 다이나믹 아일랜드에 첨부된 것처럼 보이고 다른 하나는 분리된 것처럼 보입니다.

00:14:34.000 --> 00:14:42.000
작업할 공간이 매우 제한되어 있기 때문에 최소한의 보기에는 가장 중요한 정보만 있어야 합니다.

00:14:42.000 --> 00:14:58.000
내 라이브 활동에서 최소한의 보기를 위해, 가장 중요한 정보는 영웅이 누구인지와 영웅의 건강이므로, 나는 아바타와 건강 수준을 역동적인 색조로 보여줄 것이다.

00:14:58.000 --> 00:15:05.000
이렇게 하면, 사용자는 최소한의 보기를 보고 언제 영웅을 도와야 하는지 알 수 있다.

00:15:05.000 --> 00:15:16.000
사용자가 컴팩트하거나 최소한의 프레젠테이션에서 라이브 활동을 터치하고 hold할 때, 시스템은 확장된 프레젠테이션에 콘텐츠를 표시합니다.

00:15:16.000 --> 00:15:18.000
나도 그걸 지지해야 해.

00:15:18.000 --> 00:15:26.000
확장된 프레젠테이션을 위해, 시스템은 확장된 프레젠테이션을 다른 영역으로 나눕니다.

00:15:26.000 --> 00:15:33.000
DynamicIsland 뷰 빌더의 첫 번째 폐쇄는 확장된 콘텐츠를 나타낸다.

00:15:33.000 --> 00:15:41.000
그 폐쇄 내에서, 각 섹션 콘텐츠는 특정 위치를 통과하는 확장된 영역으로 정의될 수 있다.

00:15:41.000 --> 00:15:58.000
나는 영웅 이름과 아바타를 선행 공간에 추가하고, 영웅 통계를 후행 공간에 추가하고, 마지막으로 건강 표시줄과 이벤트 설명을 하단 공간에 추가할 것이다.

00:15:58.000 --> 00:16:06.000
결국, 내 다이나믹 아일랜드 UI는 단순해 보이고 모험에 필요한 모든 정보를 제공한다.

00:16:06.000 --> 00:16:16.000
이제 저는 제가 가장 좋아하는 영웅들과 함께 모험을 떠날 준비가 되었고, 제가 방금 만든 단순하면서도 몰입감 있는 라이브 활동 UI를 따라갈 준비가 되었습니다.

00:16:16.000 --> 00:16:24.000
자신만의 UI를 디자인하는 동안, 라이브 활동에서 가장 필수적인 콘텐츠만 표시하세요.

00:16:24.000 --> 00:16:32.000
간단하게 유지하고 사용자가 라이브 활동을 탭할 때 앱에 추가 세부 사항을 표시하세요.

00:16:32.000 --> 00:16:38.000
자세한 내용은 "디자인 다이나믹 라이브 활동"을 확인하세요.

00:16:38.000 --> 00:16:46.000
라이브 활동을 강력한 도구로 사용하여 진행 중인 활동에 대한 훑어볼 수 있는 실시간 정보를 보여주세요.

00:16:46.000 --> 00:16:54.000
간단한 구성으로 iOS 및 iPadOS에서 사용자와 소통할 수 있는 역동적인 방법을 만드세요.

00:16:54.000 --> 00:17:05.000
업데이트 푸시에 대해 자세히 알아보려면, "푸시 알림으로 라이브 활동 업데이트"를 확인하세요. 나는 네가 ActivityKit으로 무엇을 만들지 빨리 보고 싶어.

00:17:05.000 --> 00:17:07.000
봐줘서 고마워!

00:17:07.000 --> 23:59:59.000
♪ ♪

