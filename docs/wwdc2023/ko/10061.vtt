WEBVTT

00:00:00.000 --> 00:00:11.000
♪ ♪

00:00:11.000 --> 00:00:14.000
케이: 안녕하세요, 저는 프라이버시 엔지니어링의 케이입니다.

00:00:14.000 --> 00:00:26.000
종속성의 무결성을 자동으로 확인하는 데 도움이 되는 Xcode의 새롭고 흥미로운 개인 정보 보호 및 보안 기능을 소개하기 위해 왔습니다.

00:00:26.000 --> 00:00:37.000
애플에서, 우리는 프라이버시가 우리 제품의 핵심인 만큼 모든 사람의 개발 과정의 핵심이 되어야 한다고 믿습니다.

00:00:37.000 --> 00:00:50.000
Xcode 내의 종속성 서명 확인은 앱 개발자가 앱을 보호하고 종속성 작성자가 배포하는 SDK를 보호하는 데 도움이 될 것입니다.

00:00:50.000 --> 00:00:54.000
앱은 다양한 SDK를 사용하여 개발된다.

00:00:54.000 --> 00:00:57.000
예를 들어, iOS SDK.

00:00:57.000 --> 00:01:08.000
일부는 애플에 의해 만들어졌고, 일부는 앱 개발자가 모든 앱에서 사용하기 위해 만들어졌으며, 일부는 앱 개발자가 다른 출처에서 얻는다.

00:01:08.000 --> 00:01:18.000
이것들은 앱의 공급망을 형성하며 프레임워크, 스위프트 소스 파일 및 기타 유형의 종속성을 포함할 수 있습니다.

00:01:18.000 --> 00:01:27.000
타사 SDK를 사용하면 앱 개발을 훨씬 쉽게 할 수 있으며 확장된 기능을 제공할 수 있습니다.

00:01:27.000 --> 00:01:32.000
그러나, 이것은 위험을 초래한다.

00:01:32.000 --> 00:01:38.000
공급망 보안은 이러한 위험을 완화하는 과정이다.

00:01:38.000 --> 00:01:51.000
당신은 당신이 포함하는 종속성을 선택하고 실수로 악의적으로 수정된 버전을 사용하지 않도록 함으로써 사용자를 보호할 책임이 있습니다.

00:01:51.000 --> 00:02:00.000
이 책임은 또한 개발의 일환으로 다른 SDK를 포함하는 SDK 작성자에게까지 확장됩니다.

00:02:00.000 --> 00:02:09.000
이러한 위험을 완화하는 데 사용할 수 있는 프로세스와 도구는 수동으로 하기에는 부담스럽거나 복잡할 수 있습니다.

00:02:09.000 --> 00:02:17.000
종속성 서명 확인은 이 작업을 쉽고 자동으로 만들 수 있는 새로운 Xcode 기능입니다.

00:02:17.000 --> 00:02:29.000
이제 공급망 보안이 무엇인지 알았으니, 개발자를 보호하고 이러한 부담을 줄이는 데 디지털 서명이 하는 역할에 대해 이야기하겠습니다.

00:02:29.000 --> 00:02:41.000
우선, Apple의 코드 서명 기술이 어떻게 작동하는지, 그리고 Xcode가 이제 종속성의 서명을 확인하기 위해 무엇을 하는지에 대한 개요를 드리겠습니다.

00:02:41.000 --> 00:02:50.000
그리고 나서 나는 앱 개발자들이 그들의 의존성이 손상되지 않도록 이 기능을 어떻게 사용할 수 있는지에 대해 이야기할 것이다.

00:02:50.000 --> 00:02:59.000
그리고 마지막으로, 나는 SDK 작성자가 생태계의 보안을 개선하기 위해 무엇을 할 수 있는지 논의할 것이다.

00:02:59.000 --> 00:03:04.000
나는 애플의 코드 서명 기술이 어떻게 작동하는지에 대해 시작할 것이다.

00:03:04.000 --> 00:03:16.000
앱 개발자가 사용할 수 있는 SDK를 개발할 때, SDK 클라이언트에 배포하는 동안 아무도 그것을 수정하거나 변조할 수 없도록 하고 싶습니다.

00:03:16.000 --> 00:03:36.000
코드 서명은 최종 준수 바이너리와 Info.plist 또는 프레임워크의 개인 정보 보호 매니페스트 또는 특정 유형의 배포의 경우 소스 코드 자체와 같은 관련 메타데이터를 개발자 신원과 암호화하여 연결하는 메커니즘입니다.

00:03:36.000 --> 00:03:48.000
높은 수준에서, 코드 서명은 먼저 컴파일된 바이너리의 CDHash라고도 알려진 코드 디렉토리 해시를 생성함으로써 작동합니다.

00:03:48.000 --> 00:03:53.000
그런 다음 이 해쉬에 서명하려면, 개발자 ID를 사용하세요.

00:03:53.000 --> 00:03:58.000
이 신원은 개발자 인증서로 표시됩니다.

00:03:58.000 --> 00:04:07.000
그것은 코드 서명에 사용되는 개인 키와 서명의 일부로 배포되는 공개 키로 구성되어 있다.

00:04:07.000 --> 00:04:12.000
이 서명은 당신의 신원과 다시 연결될 수 있습니다.

00:04:12.000 --> 00:04:24.000
그런 다음 이 ID는 해시에 서명하는 데 사용되며 서명이 특정 시점에서 생성되었다는 것을 확인하는 데 사용되는 보안 타임스탬프와 결합될 수 있습니다.

00:04:24.000 --> 00:04:31.000
이것은 누군가가 당신의 SDK를 조작하면 서명이 더 이상 유효하지 않다는 것을 보장합니다.

00:04:31.000 --> 00:04:41.000
또한 앱 개발자는 서명에 포함된 인증서를 사용하여 서명한 사람이 당신인지 확인할 수 있습니다.

00:04:41.000 --> 00:04:47.000
앱에서 사용할 수 있는 일반적인 유형의 종속성은 xcframework입니다.

00:04:47.000 --> 00:04:53.000
Xcframeworks를 사용하면, 서명은 _CodeSignature 디렉토리 내에 있습니다.

00:04:53.000 --> 00:05:10.000
코드 서명은 WWDC23 비디오 "개인 정보 보호 매니페스트 시작하기"에 언급된 개인 정보 보호 매니페스트 파일을 포함하여 최종 xc 프레임워크 내의 모든 파일의 무결성을 보호합니다.

00:05:10.000 --> 00:05:27.000
앱에 포함된 모든 xcframework의 모든 버전에 대해 이러한 코드 서명을 수동으로 확인할 수 있지만, 이는 시간이 많이 걸리는 과정이며 보안 이점을 얻기 위해 부담을 줍니다.

00:05:27.000 --> 00:05:43.000
서명 확인은 앱의 종속성 확인을 자동으로 처리하고 문제가 감지되면 경고하여 공급망 무결성을 보호하는 Xcode의 새로운 기능입니다.

00:05:43.000 --> 00:05:53.000
Xcode 15에는 이제 프로젝트에 포함된 xcframeworks에 서명하는 데 사용되는 신원을 자동으로 추적하는 데 도움이 되는 도구가 있습니다.

00:05:53.000 --> 00:06:04.000
Xcode는 이제 앱에 포함된 xcframeworks의 서명 상태를 표시하는 인스펙터의 새 섹션을 표시합니다.

00:06:04.000 --> 00:06:10.000
이 섹션에는 저자의 신원과 같은 서명에 대한 정보가 포함되어 있습니다.

00:06:10.000 --> 00:06:21.000
그것은 xcframework가 Apple Developer Program ID로 서명되었는지, 자체 서명된 인증서로 서명되었는지, 또는 현재 전혀 서명되지 않았는지 보여줄 것이다.

00:06:21.000 --> 00:06:31.000
또한, Xcode는 xcframework를 처음 사용할 때 신원을 기록하고 나중에 빌드하는 동안 변경되지 않는지 확인합니다.

00:06:31.000 --> 00:06:44.000
다른 개발자 ID의 경우, Xcode는 특정 xcframework에 사용된 ID에 대한 신뢰에 따라 다양한 수준의 기능을 제공합니다.

00:06:44.000 --> 00:06:59.000
Apple Developer Program ID의 경우, Apple은 취소된 경우를 포함하여 사용된 인증서의 유효성을 확인하고 여러 개발자가 같은 이름으로 등록할 수 없도록 할 수 있습니다.

00:06:59.000 --> 00:07:11.000
사용된 인증서가 자체 서명된 경우, 앱 개발자는 종속성 작성자와 직접 유효성과 진위를 확인해야 합니다.

00:07:11.000 --> 00:07:24.000
Xcframework 작성자의 서명 인증서가 만료되면, Xcode는 Apple Developer Program ID에 대한 새로운 인증서가 동일한 개발자의 것임을 자동으로 검증할 수 있습니다.

00:07:24.000 --> 00:07:36.000
자체 서명된 인증서의 경우, Apple과 같은 신뢰할 수 있는 당사자의 인증서 증명이 없기 때문에 이 변경이 합법적인지 수동으로 확인해야 합니다.

00:07:36.000 --> 00:07:55.000
종속성이 Apple Developer Program ID에 의해 서명되면, Xcode는 빌드에서 이를 확인하고 서명이 유효하지 않거나, ID가 변경되었거나, 인증서가 만료된 후 xcframework가 서명된 경우 경고를 표시합니다.

00:07:55.000 --> 00:08:02.000
Xcode는 또한 Apple Developer Program 인증서가 Apple에 의해 취소된 경우 알려줍니다.

00:08:02.000 --> 00:08:08.000
이것은 애플이 개발자 계정이 악의적이라고 판단하면 발생할 수 있다.

00:08:08.000 --> 00:08:17.000
이러한 경고는 드물며 문제를 해결할 때까지 앱을 구축하지 않도록 자동으로 보장합니다.

00:08:17.000 --> 00:08:25.000
이런 일이 발생하면, Xcode는 프로젝트에서 xcframework를 제거할 수 있도록 제공할 것입니다.

00:08:25.000 --> 00:08:37.000
자체 서명된 신원의 경우, Xcode는 여전히 인증서의 SHA-256 지문을 이전에 프로젝트에 추가된 지문과 비교할 것이다.

00:08:37.000 --> 00:08:45.000
신원이 변경되었거나 종속성의 내용이 수정된 경우 경고를 표시합니다.

00:08:45.000 --> 00:08:56.000
지문이 사용한 것과 일치하는지 확인하기 위해 xcframework 작성자에게 연락해야 할 수도 있습니다. 그렇지 않으면 xcframework 작성자가 이 정보를 게시할 수 있습니다.

00:08:56.000 --> 00:09:00.000
그리고 그것이 디지털 서명이 xcframeworks에서 작동하는 방식이다.

00:09:00.000 --> 00:09:06.000
다음으로, 앱 개발자가 Xcode에서 이 기능을 어떻게 사용할 수 있는지 보여드리겠습니다.

00:09:06.000 --> 00:09:11.000
시연하기 위해, 나는 Backyard Birds 샘플 앱을 사용할 것이다.

00:09:11.000 --> 00:09:22.000
그것은 당신이 여러 개의 뒷마당을 소유하고, 새 음식과 물을 꺼낼 수 있고, 새 방문객이 언제 나타나는지 볼 수 있는 디지털 조류 관찰 경험을 제공합니다.

00:09:22.000 --> 00:09:30.000
나는 음식과 물 리필 과정을 자동화하기 위해 BirdFeeder라는 xcframework를 사용할 계획이다.

00:09:30.000 --> 00:09:36.000
BirdFeeder xcframework의 저자는 가장 최근의 릴리스에 서명했다.

00:09:36.000 --> 00:09:41.000
여기, 저는 제 프로젝트에 BirdFeeder를 추가했습니다.

00:09:41.000 --> 00:09:46.000
Xcframeworks의 경우, Xcode 15는 인스펙터에서 "서명" 보기를 가질 것이다.

00:09:46.000 --> 00:09:53.000
이것은 팀 세부 사항을 보여주는 인증서 서명 정보를 표시합니다.

00:09:53.000 --> 00:10:00.000
Xcframework 개발자의 신원은 처음 볼 때 프로젝트에 저장될 것이다.

00:10:00.000 --> 00:10:10.000
빌드하는 동안, Xcode는 BirdFeeder xcframework에 서명하는 데 사용된 신원이 프로젝트의 예상 신원과 일치하는지 확인합니다.

00:10:10.000 --> 00:10:13.000
그건 성공적으로 지어졌어.

00:10:13.000 --> 00:10:27.000
공급망 공격을 시뮬레이션하기 위해, 나는 누군가가 나에게 많은 새로운 흥미로운 기능을 추가하고 더 나은 성능을 제공했다고 말한 BirdFeeder xcframework의 업데이트된 버전을 준 척 할 것이다.

00:10:27.000 --> 00:10:34.000
이것은 또한 당신이 완전히 신뢰하지 않는 웹사이트에서 xcframework를 다운로드할 때 당신에게 일어날 수 있습니다.

00:10:34.000 --> 00:10:39.000
여기서, 저는 이전 버전을 업데이트된 버전으로 교체했습니다.

00:10:39.000 --> 00:10:47.000
앱을 빌드할 때, Xcode는 앱 내의 모든 xcframeworks의 서명을 확인합니다.

00:10:47.000 --> 00:10:57.000
빌드는 실패했고, BirdFeeder 개발자의 신원이 이전에 프로젝트에 기록된 것과 일치하지 않는다는 것을 지적했다.

00:10:57.000 --> 00:11:08.000
오류를 선택하면 개발자의 신원이 변경되었음을 설명하는 경고를 제공하며, 예상되는 신원이 새 버전에 존재하는 것과 어떻게 비교되는지 보여줍니다.

00:11:08.000 --> 00:11:20.000
이 경우, 예상 인증서가 Apple Developer Program 인증서임을 보여주지만, 프로젝트의 인증서는 자체 서명된 인증서를 사용합니다.

00:11:20.000 --> 00:11:26.000
이것은 xcframework가 손상되었거나 변화가 합법적이라는 것을 의미할 수 있다.

00:11:26.000 --> 00:11:33.000
예를 들어, 그들은 xcframework의 소유권을 다른 개발자에게 양도했을 수도 있다.

00:11:33.000 --> 00:11:37.000
확실하지 않다면 항상 취소하는 것이 안전합니다.

00:11:37.000 --> 00:11:42.000
이것은 당신에게 그 변화가 진짜인지 조사할 시간을 준다.

00:11:42.000 --> 00:11:51.000
Xcode는 이러한 변경이 발생하면 자동으로 알림을 받도록 함으로써 당신과 당신의 앱을 보호합니다.

00:11:51.000 --> 00:11:58.000
이 경우, 변경은 예상되지 않았기 때문에, 나는 이 새 버전을 Xcode의 휴지통으로 옮길 것이다.

00:11:58.000 --> 00:12:11.000
그러나, 변경이 합법적이라는 것을 알고 있다면 - 예를 들어, 개발자가 검증된 공개 채널을 통해 당신에게 이것을 전달했다면 - 당신은 변경을 수락할 수 있습니다.

00:12:11.000 --> 00:12:17.000
마지막으로, 나는 이 기능이 SDK 작성자에게 무엇을 의미하는지에 대해 이야기할 것이다.

00:12:17.000 --> 00:12:32.000
SDK 작성자가 SDK에 암호화 서명하는 것이 중요합니다. 왜냐하면 앱 개발자가 신원을 확인하고 서명한 후 코드가 변경되거나 변조되지 않았음을 보장하기 때문입니다.

00:12:32.000 --> 00:12:40.000
이 두 속성 모두 신뢰를 구축하고 SDK를 안전하게 배포하는 데 매우 중요합니다.

00:12:40.000 --> 00:12:50.000
앞서 논의한 바와 같이, 사용할 수 있는 두 가지 유형의 신원이 있습니다: 애플 개발자 프로그램과 자체 서명.

00:12:50.000 --> 00:13:00.000
Apple Developer Program의 회원은 SDK 클라이언트의 신뢰를 보장하기 위해 이 프로그램의 일부로 포함된 인증서를 사용해야 합니다.

00:13:00.000 --> 00:13:11.000
SDK를 게시하는 경우 Apple 배포 인증서를 사용하거나 테스트 버전을 배포하는 경우 Apple 개발 인증서를 사용해야 합니다.

00:13:11.000 --> 00:13:19.000
엔터프라이즈 프로그램 회원은 iOS 배포 또는 앱 개발 인증서를 사용해야 합니다.

00:13:19.000 --> 00:13:34.000
Apple이 귀하에게 인증서를 발급할 때, Apple은 귀하가 Apple Developer Program의 합법적인 회원이며 인증서를 취득하는 데 필요한 모든 요구 사항을 충족했다는 사실을 증명합니다.

00:13:34.000 --> 00:13:43.000
여기에는 신원을 확인하고 개인 정보 보호 및 보안에 관한 Apple의 정책과 지침을 준수하는 것이 포함됩니다.

00:13:43.000 --> 00:14:01.000
SDK에 서명하는 데 사용되는 인증서를 수동으로 취소하는 경우, 개발자가 앱을 빌드하려고 할 때 Xcode가 더 이상 서명을 확인할 수 없기 때문에 유효한 인증서를 사용하여 서명된 업데이트된 버전을 출시해야 합니다.

00:14:01.000 --> 00:14:12.000
Apple Developer Program 인증서로 서명된 SDK는 기본 수준의 신뢰를 가지고 있으며 SDK가 변조되지 않도록 보장합니다.

00:14:12.000 --> 00:14:21.000
게다가, Apple은 신뢰할 수 있는 기관이기 때문에, 인증서 유효성 검사는 새 인증서가 생성될 때 자동으로 처리됩니다.

00:14:21.000 --> 00:14:32.000
이 비디오의 시작 부분에서, 저는 코드 서명이 어떻게 작동하는지, 그리고 개발자 ID를 사용하여 SDK 내에 서명을 포함하는 방법에 대해 논의했습니다.

00:14:32.000 --> 00:14:38.000
이제 공동 디자인 도구를 사용하여 이것을 어떻게 할 수 있는지 살펴봅시다.

00:14:38.000 --> 00:14:45.000
여기 명령과 Apple Developer Program ID를 사용하여 xcframeworks에 서명할 수 있습니다.

00:14:45.000 --> 00:14:54.000
서명에 Apple이 증명하는 안전한 타임스탬프가 포함되어 있는지 확인하기 위해 타임스탬프 플래그가 포함되어 있습니다.

00:14:54.000 --> 00:15:04.000
그러나, Apple Developer Program의 회원이 아니라면, 자체 서명된 인증서를 생성하여 공동 디자인 명령과 함께 사용할 수 있습니다.

00:15:04.000 --> 00:15:13.000
당신은 xcframework가 당신이 서명했는지 확인할 수 있도록 이 인증서의 지문을 SDK 클라이언트와 공유할 책임이 있습니다.

00:15:13.000 --> 00:15:24.000
앱에 SDK를 포함하는 개발자는 Xcode에 포함된 새로운 기능을 사용하여 xcframework가 서명되었는지 확인할 수 있습니다.

00:15:24.000 --> 00:15:36.000
항상 배포하는 SDK에 서명하면, Xcode의 이 새로운 기능은 SDK 고객이 공급망에 더 많은 신뢰를 얻는 데 도움이 될 것입니다.

00:15:36.000 --> 00:15:38.000
이걸 하는 건 간단해.

00:15:38.000 --> 00:15:46.000
새로운 빌드 없이 이미 게시한 프레임워크 버전으로 바로 시작할 수 있습니다.

00:15:46.000 --> 00:15:54.000
현재 Apple Developer Program의 회원이 아닌 경우 자체 서명된 인증서를 사용하여도 작동합니다.

00:15:54.000 --> 00:16:03.000
그런 다음 빌드 스크립트에 codesign 명령을 포함하여 모든 새 버전의 xcframeworks에 대해 이 작업을 수행할 수 있으므로 더 이상 걱정할 필요가 없습니다.

00:16:03.000 --> 00:16:13.000
앱 개발자의 경우, Xcode 15는 앱의 기본 SDK의 무결성과 보안을 자동으로 보장하는 데 도움을 줄 것입니다.

00:16:13.000 --> 00:16:24.000
모든 SDK 서명이 검증되었는지 확인하는 것은 책임감 있는 앱 개발과 사용자를 보호하는 중요한 측면입니다.

00:16:24.000 --> 00:16:31.000
공급망의 개발자들이 그들이 게시하는 SDK에 서명하기 시작하도록 장려함으로써 도울 수 있습니다.

00:16:31.000 --> 00:16:39.000
SDK 작성자의 경우, 보안과 신뢰성을 보장하기 위해 SDK에 서명하기 시작하세요.

00:16:39.000 --> 00:16:50.000
코드에 서명함으로써, SDK 클라이언트와의 신뢰를 구축하여 보안과 개인 정보를 중요하게 생각한다는 것을 보여줍니다.

00:16:50.000 --> 00:16:52.000
행복한 앱 개발!

00:16:52.000 --> 00:16:55.000
이쪽은 케이야, 서명해.

00:16:55.000 --> 23:59:59.000
♪ ♪

