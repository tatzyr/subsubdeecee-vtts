WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
소누: 안녕하세요, 제 이름은 소누이고, 저는 Xcode에서 일하는 휴먼 인터페이스 디자이너입니다.

00:00:15.000 --> 00:00:19.000
그리고 Xcode 15의 새로운 테스트 보고서를 둘러보게 되어 기쁩니다.

00:00:19.000 --> 00:00:26.000
테스트 보고서는 로컬, Xcode Cloud 또는 다른 컴퓨터에서 발생하는 테스트 실행 결과를 볼 수 있는 곳입니다.

00:00:26.000 --> 00:00:34.000
테스트 실행 범위는 코드에서 작업하는 동안 실행 중인 단일 테스트부터 CI에서 실행되는 수천 개의 테스트가 있는 전체 제품군까지 다양합니다.

00:00:34.000 --> 00:00:43.000
테스트 보고서는 프로젝트의 상태를 이해하고, 문제 영역을 식별하고, 궁극적으로 실패를 더 빨리 해결하는 데 도움이 되는 방식으로 테스트 결과를 구성합니다.

00:00:43.000 --> 00:00:52.000
새로운 테스트 보고서를 탐색하기 전에, 저는 한 걸음 물러서서 Xcode에서 테스트와 관련된 몇 가지 핵심 용어와 개념을 정의하고 싶습니다.

00:00:52.000 --> 00:00:57.000
시험 구조 뒤에 있는 조직 개념을 이해하는 것은 유용하다.

00:00:57.000 --> 00:01:03.000
내가 기본 사항을 살펴본 후, 우리는 시험 보고서를 살펴보고 그것이 당신에게 어떻게 도움이 될 수 있는지 탐구할 것입니다.

00:01:03.000 --> 00:01:06.000
시험 방법부터 시작합시다.

00:01:06.000 --> 00:01:13.000
테스트 방법은 소스 코드를 검증하고 테스트 결과를 생성하는 개별 테스트 또는 방법입니다.

00:01:13.000 --> 00:01:15.000
다음으로, 시험 수업이 있다.

00:01:15.000 --> 00:01:21.000
테스트 클래스는 테스트 방법의 그룹이며 일반적으로 테스트 중인 영역에 따라 그룹화됩니다.

00:01:21.000 --> 00:01:24.000
그 후, 테스트 번들이 있다.

00:01:24.000 --> 00:01:27.000
테스트 번들은 하나 이상의 테스트 클래스로 구성되어 있다.

00:01:27.000 --> 00:01:33.000
각 번들에는 단위 또는 UI 중 하나의 단일 유형의 테스트가 있습니다.

00:01:33.000 --> 00:01:37.000
단위 테스트는 일반적으로 기능인 단일 코드를 확인하는 데 도움이 된다.

00:01:37.000 --> 00:01:41.000
단위 테스트는 짧고 간단하며 매우 빠르게 실행된다.

00:01:41.000 --> 00:01:44.000
UI 테스트는 앱의 사용자 대면 동작을 관찰합니다.

00:01:44.000 --> 00:01:48.000
이 테스트들은 당신의 앱이 당신이 기대하는 것을 진정으로 수행하는지 확인합니다.

00:01:48.000 --> 00:01:53.000
우리의 목적을 위해, 우리의 테스트 번들에는 UI 테스트가 포함되어 있다고 가정해 봅시다.

00:01:53.000 --> 00:01:56.000
그리고 최고 수준에서, 시험 계획이 있다.

00:01:56.000 --> 00:02:04.000
테스트 계획에는 하나 이상의 테스트 번들이 포함되어 있으며, 이는 테스트 계획에 단위 테스트와 UI 테스트를 모두 포함할 수 있음을 의미합니다.

00:02:04.000 --> 00:02:11.000
그리고 테스트 계획을 사용하면 여러 조건에서 테스트를 효율적으로 실행할 수 있도록 구성을 설정할 수 있습니다.

00:02:11.000 --> 00:02:14.000
구성은 테스트 계획의 중요한 측면이다.

00:02:14.000 --> 00:02:19.000
구성은 Xcode에 테스트를 위한 런타임 환경을 설정하는 방법을 알려줍니다.

00:02:19.000 --> 00:02:27.000
예를 들어, 다양한 언어와 위치에서 앱을 테스트할 수 있으므로, 앱이 전 세계 모든 곳에서 작동하는지 확인할 수 있습니다.

00:02:27.000 --> 00:02:35.000
코드 커버리지로 테스트할 수 있으므로, 계속 개발하면서 코드의 품질과 커버리지를 추적할 수 있습니다.

00:02:35.000 --> 00:02:38.000
테스트를 여러 번 실행하도록 설정할 수도 있습니다.

00:02:38.000 --> 00:02:46.000
이것은 사용자가 처음 사용했는지 백 번째인지에 관계없이 앱의 모든 요소가 안정적으로 작동하도록 보장합니다.

00:02:46.000 --> 00:02:50.000
구성과 함께, 실행 목적지가 있다.

00:02:50.000 --> 00:02:54.000
실행 목적지는 테스트가 실행되는 장치입니다.

00:02:54.000 --> 00:02:59.000
Xcode의 IDE에서 테스트를 실행할 때, 단일 실행 대상을 선택할 수 있습니다.

00:02:59.000 --> 00:03:06.000
Xcode Cloud와 xcodebuild 명령을 사용하면 테스트에 여러 개의 실행 목적지가 있을 수 있습니다.

00:03:06.000 --> 00:03:11.000
이제 기본 사항을 다뤘으니, 테스트, 구성 및 실행 목적지가 어떻게 함께 작동하는지 봅시다.

00:03:11.000 --> 00:03:15.000
우리가 전에 설명한 것과 같은 시험 계획을 사용하고 있다고 가정해 봅시다.

00:03:15.000 --> 00:03:19.000
최근에, 저는 제 앱에서 많은 언어를 지원하기 위해 노력하고 있습니다.

00:03:19.000 --> 00:03:27.000
그래서 내 앱이 예상대로 작동하는지 확인하기 위해, 나는 내가 지원하고 싶은 언어에 대한 구성을 만들었고, 첫 번째는 영어이다.

00:03:27.000 --> 00:03:32.000
그리고 게다가, 내가 세 개의 실행 목적지에서 이 테스트 계획을 실행하고 있다고 가정해 봅시다.

00:03:32.000 --> 00:03:37.000
테스트 계획은 구성이 활성화된 상태에서 각 장치에서 한 번 실행됩니다.

00:03:37.000 --> 00:03:44.000
그리고 각 방법은 통과, 실패, 건너뛰기 또는 예상 실패와 같은 테스트 결과 상태로 종료됩니다.

00:03:44.000 --> 00:03:52.000
제 앱을 위해, 저는 또한 몇 가지 언어를 더 지원하기 위해 노력하고 있으며, 각 언어에 대한 테스트 계획 구성을 만들었습니다.

00:03:52.000 --> 00:04:03.000
즉, Xcode는 각 구성에 대해 전체 테스트 계획을 한 번 실행하고 대상을 실행하여 결과로 가득 찬 전체 매트릭스를 만듭니다.

00:04:03.000 --> 00:04:10.000
확대하면, 모든 테스트 방법, 구성 및 실행 대상 조합에 대한 결과가 생성됩니다.

00:04:10.000 --> 00:04:15.000
이 개별 인스턴스는 테스트 방법 실행이라고 불린다.

00:04:15.000 --> 00:04:27.000
테스트 실행은 코드에서 작업하는 동안 실행 중인 단일 테스트부터 이전 예제와 유사하게 여러 대상에서 여러 구성을 실행하는 수천 개의 테스트가 있는 전체 제품군까지 다양합니다.

00:04:27.000 --> 00:04:33.000
새로운 테스트 보고서는 테스트 수에 관계없이 테스트 실행을 이해하는 데 도움이 되는 도구를 제공합니다.

00:04:33.000 --> 00:04:42.000
그렇게 하기 위해, 새로운 테스트 보고서는 테스트 실행에 대한 높은 수준의 요약을 제공하므로, 세부 사항을 파헤치기 전에 큰 그림을 볼 수 있습니다.

00:04:42.000 --> 00:04:46.000
그것은 중요한 패턴을 강조하므로, 어디에서 조사를 시작해야 할지 빠르게 알 수 있습니다.

00:04:46.000 --> 00:04:52.000
테스트 활동, 실패 정보, 스크린샷 등을 볼 수 있는 단일 장소를 제공합니다.

00:04:52.000 --> 00:04:58.000
그리고 마지막으로, 우리는 UI 테스트 디버깅 도구를 개선하여 더 풍부한 실패 정보를 제공합니다.

00:04:58.000 --> 00:05:04.000
좋아요, 그래서 우리는 테스트에 관한 수많은 개념과 테스트 보고서의 이점을 다루었습니다.

00:05:04.000 --> 00:05:07.000
이제 그것이 실제로 작동하는 것을 봅시다.

00:05:07.000 --> 00:05:11.000
저는 iOS 앱의 새로운 기능인 Backyard Birds를 작업하고 있습니다.

00:05:11.000 --> 00:05:17.000
이전 예시와 마찬가지로, 나는 뒷마당 새를 여러 언어로 사용할 수 있도록 하는 일을 하고 있다.

00:05:17.000 --> 00:05:24.000
더 많은 언어에 대한 지원을 추가하면서, 나는 아무것도 깨지지 않도록 로컬과 Xcode Cloud에서 테스트하고 있다.

00:05:24.000 --> 00:05:28.000
내 CI 실행 중 일부를 살펴봅시다.

00:05:28.000 --> 00:05:34.000
풀 리퀘스트를 열 때 몇 가지 단위 테스트를 자동으로 실행하도록 Xcode Cloud에 워크플로우가 설정되어 있습니다.

00:05:34.000 --> 00:05:43.000
빌드 개요에서, 나는 무엇이 내 워크플로우를 시작했는지, 어떤 코드 변경이 구축되었는지, 그리고 이 빌드가 나온 워크플로우를 빠르게 이해할 수 있다.

00:05:43.000 --> 00:05:46.000
나는 또한 이 빌드에서 내 행동이 어떻게 수행되었는지 알아낼 수 있다.

00:05:46.000 --> 00:05:50.000
그리고 와, 내 시험 중 일부는 실패했어.

00:05:50.000 --> 00:05:54.000
그것들을 확인해 보자.

00:05:54.000 --> 00:05:57.000
시험 조치를 확인할 때, 나는 새로운 시험 보고서를 발견한다.

00:05:57.000 --> 00:06:00.000
구체적으로, 나는 시험 요약을 찾았다.

00:06:00.000 --> 00:06:07.000
테스트 요약은 나에게 이 테스트 실행에서 무슨 일이 일어났는지에 대한 전반적인 이해를 제공한다.

00:06:07.000 --> 00:06:11.000
나는 내 테스트 환경을 빠르게 이해할 수 있다.

00:06:11.000 --> 00:06:16.000
나는 또한 인사이트를 사용하여 시험 결과에서 발견된 주목할 만한 패턴을 탐색할 수 있다.

00:06:16.000 --> 00:06:23.000
통찰력은 모든 구성과 실행 대상에서 내 결과를 분석하는 동안 Xcode가 발견한 패턴이다.

00:06:23.000 --> 00:06:26.000
그것은 특정 기준에 따라 결과를 그룹화한다.

00:06:26.000 --> 00:06:32.000
오늘날, 우리는 두 가지 유형의 통찰력을 가지고 있습니다: 일반적인 실패 패턴과 가장 긴 테스트 실행.

00:06:32.000 --> 00:06:44.000
일반적인 실패 패턴 통찰력은 유사한 실패 메시지를 기반으로 테스트를 그룹화하는 반면, "가장 긴 테스트 실행"은 테스트 번들의 테스트 번들에서 다른 테스트보다 더 오래 걸리는 테스트에 대한 단서를 제공합니다.

00:06:44.000 --> 00:06:49.000
테스트 섹션에서, 나는 이 실행 중에 내 테스트가 어떻게 수행되었는지 이해할 수 있다.

00:06:49.000 --> 00:06:52.000
나는 또한 내 시험 계획에 대해 더 자세히 알 수 있다.

00:06:52.000 --> 00:06:58.000
나는 시험 반복이나 성과 지표와 같은 내 시험 계획에 어떤 특별한 특성이 있는지 이해할 수 있다.

00:06:58.000 --> 00:07:05.000
많은 실행 대상과 구성으로 테스트할 때, 각 실행이 어떻게 수행되었는지 이해하기 어려울 수 있습니다.

00:07:05.000 --> 00:07:11.000
이 히트 맵을 사용하면 각 장치와 구성에서 테스트가 어떻게 되었는지 빠르게 소화할 수 있습니다.

00:07:11.000 --> 00:07:17.000
그리고 색상과 테스트 결과 수는 다른 것들과 비교했을 때 이 실행이 어떻게 진행되었는지 이해하는 데 도움이 됩니다.

00:07:17.000 --> 00:07:22.000
그리고 만약 내가 시험에 실패한다면, 나는 시험 요약에서 그것들에 빠르게 접근할 수 있다.

00:07:22.000 --> 00:07:28.000
특정 실패 메시지가 내 관심을 끌면, 이 섹션을 사용하여 조사를 시작할 수 있습니다.

00:07:28.000 --> 00:07:34.000
관심을 끄는 실패에 대해 말하자면, 내가 이전에 통찰력을 확인했을 때, 첫 번째 통찰력이 나에게 댔다.

00:07:34.000 --> 00:07:39.000
비슷한 실패 메시지로 실패한 세 가지 테스트가 있다고 언급한다.

00:07:39.000 --> 00:07:42.000
이 테스트들이 왜 실패했는지 알아봅시다.

00:07:42.000 --> 00:07:47.000
특정 통찰력을 선택한 후, 나는 이 견해를 사용하여 그것에 대해 더 많이 배울 수 있다.

00:07:47.000 --> 00:07:53.000
나는 모든 테스트에서 발견된 실패 메시지를 찾을 수 있고, 실패한 테스트를 볼 수 있다.

00:07:53.000 --> 00:08:01.000
게다가, 나는 어떤 구성과 실행 목적지가 이러한 단위 테스트 실패를 일으켰는지 이해할 수 있다.

00:08:01.000 --> 00:08:07.000
그리고 이 정보로, 나는 왜 이 테스트들이 매우 유사한 실패 메시지로 실패했는지에 대한 신호를 얻을 수 있다.

00:08:07.000 --> 00:08:12.000
계속 조사하기 위해, 테스트 방법 실행 중 하나를 확인해 봅시다.

00:08:12.000 --> 00:08:18.000
테스트 방법 실행을 선택한 후, testGardenSupplies()에 대한 테스트 세부 정보 보기를 찾습니다.

00:08:18.000 --> 00:08:25.000
테스트 세부 사항 보기는 단일 테스트 방법의 결과에 집중할 수 있는 전용 공간을 만듭니다.

00:08:25.000 --> 00:08:30.000
여기에서 테스트 세부 사항과 실패 정보를 찾을 수 있으므로 디버깅을 시작할 수 있습니다.

00:08:30.000 --> 00:08:37.000
헤더를 사용하여 모든 구성에서 일어난 일에 대한 전체 컨텍스트를 얻고 목적지를 실행할 수 있습니다.

00:08:37.000 --> 00:08:43.000
그리고 실행 보기에서, 나는 이 방법이 각 구성에서 어떻게 수행되고 목적지를 실행하는지 탐구할 수 있다.

00:08:43.000 --> 00:08:48.000
또한 선택한 테스트 방법 실행에 대한 실패 메시지와 호출 스택을 찾을 수 있습니다.

00:08:48.000 --> 00:08:52.000
실패 메시지와 호출 스택은 디버깅을 위한 유용한 도구이다.

00:08:52.000 --> 00:08:57.000
그것들은 실패의 원인을 식별하는 데 도움이 되는 핵심 부분이다.

00:08:57.000 --> 00:09:03.000
콜 스택은 또한 실패를 계속 조사할 수 있는 소스 코드에 대한 진입점을 다시 제공한다.

00:09:03.000 --> 00:09:14.000
단위 테스트와 함께, 저는 Backyard Birds가 고객의 기대를 충족하고 다양한 플랫폼과 장치에서 수행할 수 있도록 현지에서 많은 UI 테스트를 실행해 왔습니다.

00:09:14.000 --> 00:09:17.000
이전부터 로컬 테스트를 검토해 봅시다.

00:09:17.000 --> 00:09:22.000
이 테스트 실행을 위해, 나는 여전히 무슨 일이 일어났는지 이해하기 위해 테스트 요약을 사용할 수 있다.

00:09:22.000 --> 00:09:28.000
상단에 환경 세부 사항, 인사이트, 그리고 하단에 테스트 섹션이 있습니다.

00:09:28.000 --> 00:09:32.000
시험 섹션의 첫 번째 실패는 내 관심을 끌었다.

00:09:32.000 --> 00:09:36.000
실패 메시지는 테스트가 버튼 중 하나를 찾을 수 없었음을 시사한다.

00:09:36.000 --> 00:09:39.000
확인해 보자.

00:09:39.000 --> 00:09:44.000
실패를 선택한 후, testClickTabsAfterSearch()에 대한 테스트 세부 정보 보기를 찾습니다.

00:09:44.000 --> 00:09:50.000
UI 테스트를 보고 있기 때문에, 테스트 세부 사항으로 이동하면 활동 탭에 표시됩니다.

00:09:50.000 --> 00:09:56.000
테스트 보고서에는 내 실패를 이해하고 해결하는 데 도움이 되는 수많은 멋진 새로운 기능이 있다.

00:09:56.000 --> 00:10:03.000
활동 탭에는 테스트 활동, 자동화 탐색기 및 스크러버의 세 가지 주요 섹션이 포함되어 있습니다.

00:10:03.000 --> 00:10:15.000
테스트 활동은 내 테스트를 타임라인 형식으로 배치하며, 맨 위 행은 테스트의 시작이고, 하단 행은 끝이며, 그 사이의 각 행은 테스트에서 일어난 이벤트입니다.

00:10:15.000 --> 00:10:17.000
자동화 탐색기가 있다.

00:10:17.000 --> 00:10:22.000
이곳은 내가 선택한 테스트 활동과 관련된 비디오 재생의 순간을 찾을 수 있는 곳이다.

00:10:22.000 --> 00:10:25.000
이것은 내가 내 시험의 전체 재생을 볼 수 있게 해준다.

00:10:25.000 --> 00:10:31.000
그리고 마지막으로, 내 테스트 실행을 선형으로 표현한 스크러버가 있다.

00:10:31.000 --> 00:10:36.000
스크러버를 사용하여 탭, 스와이프, 클릭과 같은 테스트 이벤트를 찾을 수 있습니다.

00:10:36.000 --> 00:10:41.000
스크러버는 테스트 중인 장치가 방향을 바꿀 때도 강조 표시합니다.

00:10:41.000 --> 00:10:46.000
그리고 스크러버 위의 실패 아이콘은 테스트에서 실패가 발생한 곳을 기록한다.

00:10:46.000 --> 00:10:54.000
이 지표를 사용하여 테스트 실행에서 흥미로운 순간을 빠르게 찾고 앱의 상호 작용이 예상대로 작동하는지 확인할 수 있습니다.

00:10:54.000 --> 00:11:00.000
이 새로운 조각들로, 테스트 보고서는 상호 작용하는 테스트 디버깅 경험을 가지고 있다.

00:11:00.000 --> 00:11:03.000
이 오류를 해결하는 데 어떻게 도움이 될 수 있는지 확인해 봅시다.

00:11:03.000 --> 00:11:15.000
활동 창에서 이벤트를 클릭하면 비디오 재생에서 해당 프레임으로 자동화 탐색기가 업데이트되므로 테스트의 각 순간에 무슨 일이 일어나고 있는지 시각적으로 이해할 수 있습니다.

00:11:15.000 --> 00:11:23.000
그것은 또한 스크러버를 올바른 지점으로 옮기기 때문에, 나는 전체 테스트 실행과 관련하여 이벤트가 어디에서 일어나고 있는지에 대한 맥락을 가지고 있다.

00:11:23.000 --> 00:11:30.000
내가 실패를 디버깅할 때, 나는 실패로 이어지는 순간을 보는 것을 좋아한다.

00:11:30.000 --> 00:11:36.000
나는 오류를 일으킬 수 있는 예상치 못한 일이 일어났는지 확인하기 위해 내 테스트 실행을 볼 수 있다.

00:11:36.000 --> 00:11:41.000
비디오 재생을 본 후, 모든 것이 좋아 보인다.

00:11:41.000 --> 00:11:46.000
이 실패 메시지에 따르면, UI에서 "계정" 버튼을 찾을 수 없는 것 같습니다.

00:11:46.000 --> 00:11:51.000
자동화 탐색기는 오류가 발생했을 때 장치에서 무슨 일이 일어나고 있었는지 보여준다.

00:11:51.000 --> 00:11:55.000
"계정" 버튼이 보이고 그 위에 경계 상자가 있습니다.

00:11:55.000 --> 00:12:01.000
경계 상자를 클릭하면 이 특정 UI 요소에 대한 더 많은 정보를 얻을 수 있습니다.

00:12:01.000 --> 00:12:07.000
여기서 이 요소와 관련된 식별자와 계층 정보를 찾을 수 있습니다.

00:12:07.000 --> 00:12:12.000
제가 여기에 가지고 있는 정보에 따르면, 제 앱 내에서 "계정" 버튼을 잘못 표시한 것 같습니다.

00:12:12.000 --> 00:12:16.000
여기에서 프로젝트 소스로 이동하여 오류를 수정할 수 있습니다.

00:12:16.000 --> 00:12:20.000
새로운 테스트 보고서는 내 테스트 실행을 매우 쉽게 이해할 수 있게 했다.

00:12:20.000 --> 00:12:27.000
몇 분 안에, 나는 어떤 테스트가 실패했는지 찾고, 해결책을 찾고, 실패를 고칠 수 있었다.

00:12:27.000 --> 00:12:32.000
실패는 현지와 CI에서 발생할 수 있으며, 두 곳 모두에서 테스트하는 것이 가장 좋습니다.

00:12:32.000 --> 00:12:37.000
그래서 저는 테스트 보고서를 Xcode &amp; Xcode Cloud에서 사용할 수 있다고 말하게 되어 기쁩니다.

00:12:37.000 --> 00:12:39.000
그래서 시간은 소중해, 너희 모두.

00:12:39.000 --> 00:12:48.000
테스트 보고서에 추가된 새로운 기능은 테스트 실행을 빠르게 이해하고, 문제 영역을 식별하며, 궁극적으로 오류를 더 빨리 해결하는 데 도움이 될 것입니다.

00:12:48.000 --> 00:12:53.000
시청해 주셔서 정말 감사드리며, 남은 WWDC를 즐기시기 바랍니다.

00:12:53.000 --> 23:59:59.000
♪ ♪

