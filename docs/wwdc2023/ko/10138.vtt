WEBVTT

00:00:01.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:15.000
제니퍼: 안녕하세요, 저는 애플 디자인 팀의 디자이너 제니퍼 패튼입니다.

00:00:15.000 --> 00:00:20.000
Matthew: 그리고 저는 watchOS용 SwiftUI 팀의 엔지니어링 관리자인 Matthew Koonce입니다.

00:00:20.000 --> 00:00:41.000
제니퍼: watchOS의 열 번째 주요 릴리스를 위해, 우리는 시기적절한 정보를 표시하고, 초점을 맞춘 콘텐츠를 한 눈에 전달하고, 전체 화면 색상과 이미지로 디스플레이의 모양과 충실도를 축하하고, 일관된 탐색과 예측을 위해 사용자 인터페이스를 재설계했습니다.

00:00:41.000 --> 00:00:44.000
매튜: 그리고 우리는 또한 API를 발전시켰습니다.

00:00:44.000 --> 00:00:48.000
SwiftUI는 watchOS 10의 핵심이다.

00:00:48.000 --> 00:00:53.000
이 세션에서, 우리는 watchOS 10 재설계의 세부 사항을 안내하고 싶습니다.

00:00:53.000 --> 00:00:56.000
우리는 몇 가지 주요 디자인 원칙으로 시작할 것이다.

00:00:56.000 --> 00:01:03.000
그런 다음, 우리는 당신의 앱에서 내비게이션을 구성하는 몇 가지 새로운 방법을 살펴볼 것입니다.

00:01:03.000 --> 00:01:11.000
그 후, 우리는 레이아웃 시스템의 진화와 모든 픽셀을 사용하는 데 도움이 되는 업데이트된 API에 대해 이야기할 것입니다.

00:01:11.000 --> 00:01:16.000
그리고 마지막으로, 우리는 색상과 재료가 어떻게 앱에 완전히 새로운 차원을 가져올 수 있는지 보게 될 것이다.

00:01:16.000 --> 00:01:17.000
계획처럼 들리나요?

00:01:17.000 --> 00:01:20.000
제니퍼: 응! 바로 들어가자.

00:01:20.000 --> 00:01:23.000
몇 가지 디자인 원칙부터 시작합시다.

00:01:23.000 --> 00:01:37.000
Apple Watch를 위해 디자인할 때 가장 먼저 생각하고 싶은 것은 "내 앱이 그 순간에 사람들에게 제공할 수 있는 가장 관련성이 높은 정보나 경험은 무엇입니까?"입니다. 날씨 앱을 예로 들어 봅시다.

00:01:37.000 --> 00:01:49.000
Apple Watch는 빠르고 집중적인 상호 작용에 가장 적합한 타임키핑 장치이기 때문에, 앱을 열 때 가장 먼저 볼 수 있는 것은 오늘의 현지 날씨입니다.

00:01:49.000 --> 00:01:57.000
디지털 크라운의 간단한 회전으로, 당신은 남은 하루 동안, 그리고 남은 한 주 동안 현지 날씨를 얻을 수 있습니다.

00:01:57.000 --> 00:02:08.000
그리고 예를 들어, 내가 뉴욕의 날씨를 찾고 있다면, 내 도시 목록은 이러한 세부 보기에서 한 번의 탭으로 떨어져 있다.

00:02:08.000 --> 00:02:23.000
날씨는 내가 "애플 워치 모멘트"라고 생각하고 싶은 것을 성취한다. 앱을 디자인할 때, 착용자가 손목을 들어올릴 때와 관련된 것으로 경험의 초점을 좁히세요.

00:02:23.000 --> 00:02:28.000
시계 경험은 짧은 상호 작용을 위해 고도로 전문화되어야 한다.

00:02:28.000 --> 00:02:35.000
만약 당신이 누군가의 관심을 10초 동안 받았다면, 어떤 정보를 드러울 건가요?

00:02:35.000 --> 00:02:41.000
아이폰에서 뉴스는 콘텐츠가 풍부한 멀티 탭, 다단계 앱이다.

00:02:41.000 --> 00:02:47.000
그리고 Apple Watch에서, 뉴스는 다섯 가지 주요 기사에 초점을 맞추고 있다.

00:02:47.000 --> 00:02:54.000
콘텐츠는 피드에 수직으로 쌓여 있으며 탭할 때 인라인으로 확장됩니다.

00:02:54.000 --> 00:03:00.000
짧은 상호 작용은 내가 Apple Watch를 위해 디자인하는 것에 대해 좋아하는 것 중 하나이다.

00:03:00.000 --> 00:03:10.000
몇 초만 사람들의 관심을 받을 때, 뉴스가 오늘의 헤드라인에 경험을 집중시키는 것처럼 간결해야 합니다.

00:03:10.000 --> 00:03:20.000
그리고 심박수는 한정된 데이터를 먼저 표시하므로, 대부분의 보기를 전체 화면 애니메이션에 할애할 수 있습니다.

00:03:20.000 --> 00:03:26.000
그리고 활동은 광범위한 경험을 단일 초점 관점으로 단순화한다.

00:03:26.000 --> 00:03:31.000
따라서 앱을 디자인할 때, 간략하게 유지하고 집중하세요.

00:03:31.000 --> 00:03:45.000
우리가 2014년에 Apple Watch를 발표했을 때, 우리는 또한 디지털 크라운을 디스플레이를 가리지 않고 사용할 수 있는 독특하고 정확한 입력 장치로 소개했습니다.

00:03:45.000 --> 00:03:59.000
watchOS 10에서, 우리는 당신이 앱에 도달하고 탐색하고, 스크롤하고, 페이지 매기고, 정확한 조정을 하는 방법으로 디지털 크라운을 강조하고 있습니다.

00:03:59.000 --> 00:04:05.000
상호 작용은 왕관에 고정되어야 하지만, 항상 터치로 뒷받침되어야 한다.

00:04:05.000 --> 00:04:16.000
상호 작용을 디지털 크라운에 묶는 디자인 목표를 사용하여 앱의 탐색 구조와 경험을 형성할 수 있습니다.

00:04:16.000 --> 00:04:24.000
watchOS를 위해 디자인할 때, 사람들이 손목을 드는 순간부터 취할 여정을 고려하세요.

00:04:24.000 --> 00:04:28.000
watchOS 10의 훌륭한 새로운 기능은 스마트 스택이다.

00:04:28.000 --> 00:04:37.000
디지털 크라운을 돌리면, 한눈에 볼 수 있는 위젯이 지능적으로 정렬된 스택으로 화면에 나타납니다.

00:04:37.000 --> 00:04:52.000
앱을 디자인할 때, 어떤 정보가 최고의 스마트 스택 위젯을 만들 것인지 생각하고 앱을 설계하기 위해 적절하고 시기적절한 경험을 중심으로 디자인하는 것으로 시작할 수 있습니다.

00:04:52.000 --> 00:05:00.000
그리고 제 동료 에드의 Apple Watch의 스마트 스택을 위한 디자인 위젯을 확실히 확인하세요.

00:05:00.000 --> 00:05:15.000
시계 앱의 초점을 현재의 순간과 관련된 한 입 크기의 정보로 좁히면, 다음 단계는 그 순간들을 쉽게 탐색할 수 있는 구조로 묶는 것입니다.

00:05:15.000 --> 00:05:21.000
매튜와 그의 팀은 당신이 사용할 수 있는 놀라운 새로운 API를 개발하기 위해 열심히 노력해 왔습니다.

00:05:21.000 --> 00:05:22.000
가져가, 매튜.

00:05:22.000 --> 00:05:23.000
매튜: 고마워, 젠.

00:05:23.000 --> 00:05:27.000
앱 내의 내비게이션이 SwiftUI로 어떻게 업데이트되었는지 살펴봅시다.

00:05:27.000 --> 00:05:35.000
먼저, 자세한 콘텐츠를 한 눈에 제공하는 NavigationSplitView를 살펴보겠습니다.

00:05:35.000 --> 00:05:41.000
그런 다음, 디지털 크라운에 더 많은 상호 작용을 연결할 수 있는 TabView에 대한 몇 가지 업데이트.

00:05:41.000 --> 00:05:47.000
이것들은 둘 다 우리의 핵심 내비게이션 패러다임으로 내비게이션스택과 나란히 있다.

00:05:47.000 --> 00:05:53.000
앱을 구성하는 올바른 방법을 선택하는 것은 근본적인 결정이며, 각각 강점이 있습니다.

00:05:53.000 --> 00:05:56.000
NavigationSplitView로 시작합시다.

00:05:56.000 --> 00:06:05.000
watchOS의 NavigationSplitView 개념은 iPadOS의 날씨와 같이 두 개의 열 레이아웃에서 차용되었습니다.

00:06:05.000 --> 00:06:15.000
watchOS에서는 소스 목록과 세부 정보 보기가 분리된 다음 재결합되며, 소스 목록은 세부 정보 보기 바로 아래에 숨겨져 있습니다.

00:06:15.000 --> 00:06:18.000
이제 그 소스 목록은 탭 한 번이면 됩니다.

00:06:18.000 --> 00:06:33.000
제니퍼: 내비게이션 분할 보기는 날씨의 도시 목록이나 주식 목록과 해당 소스 목록의 항목에 대한 자세한 보기와 같은 소스 목록이 있는 경우 완벽한 옵션입니다.

00:06:33.000 --> 00:06:38.000
사람들이 앱을 실행할 때 세부 보기에 직접 착륙하세요.

00:06:38.000 --> 00:06:48.000
위치, 최신성, 빈도 또는 사용자 의도의 다른 표시를 사용하여 어떤 세부 사항을 먼저 표시할지 알려주십시오.

00:06:48.000 --> 00:06:53.000
제목이 필요하지 않을 정도로 세부 사항을 한 눈에 확인할 수 있도록 노력하세요.

00:06:53.000 --> 00:07:02.000
매튜: 우리가 SwiftUI에 바로 내장한 내비게이션 스플릿 뷰의 정말 매끄러운 기능 중 하나는 세부 보기와 소스 목록 사이의 전환입니다.

00:07:02.000 --> 00:07:08.000
물론, 목록 아이콘을 탭하거나, 손가락과 상호 작용할 수 있습니다.

00:07:08.000 --> 00:07:13.000
제니퍼: 그리고 소스 목록은 비교 데이터를 보여주기 위한 훌륭한 도구입니다.

00:07:13.000 --> 00:07:19.000
쿠퍼티노는 오전 10시 9분이고 부다페스트는 오후 7시 9분이다.

00:07:19.000 --> 00:07:26.000
소스 목록의 제목을 붙일 필요도 없고 닫기 버튼이나 탐색 컨트롤도 필요하지 않습니다.

00:07:26.000 --> 00:07:35.000
이를 통해 소스 목록은 더 짧은 탐색 모음을 사용하여 화면에 더 많은 비교 데이터를 한 눈에 표시할 수 있습니다.

00:07:35.000 --> 00:07:40.000
매튜: NavigationSplitView의 API는 watchOS에서 다른 플랫폼과 동일합니다.

00:07:40.000 --> 00:07:45.000
소스 목록을 설정하고 선택으로 초기화할 수 있습니다.

00:07:45.000 --> 00:07:53.000
SwiftUI가 세부 정보 보기로 자동으로 시작할 수 있도록 항상 선택을 값으로 초기화하세요.

00:07:53.000 --> 00:08:03.000
다음으로, 정말 환상적인 업데이트를 받았고 Apple Watch에서 앱을 탐색하는 내가 가장 좋아하는 새로운 방법인 TabView에 대해 이야기해 봅시다.

00:08:03.000 --> 00:08:11.000
탭 보기는 보기 사이를 스크롤할 수 있으며, watchOS 10의 새로운 기능은 필요에 따라 단일 탭을 확장하고 크기를 조정할 수 있습니다.

00:08:11.000 --> 00:08:23.000
제니퍼: 콘텐츠가 인라인으로 확장되도록 허용하는 것 외에도, 이것은 또한 기본적으로 단일 화면에 맞는 디자인을 허용하여 필요한 경우 현지화된 텍스트와 큰 유형을 지원할 수 있습니다.

00:08:23.000 --> 00:08:28.000
매튜: 활동에서 탭뷰를 어떻게 사용하는지 자세히 살펴봅시다.

00:08:28.000 --> 00:08:36.000
활동에는 각 링 세부 정보 보기에 대한 탭이 있으며, 새로운 "수직 페이지" 스타일을 사용하고 있습니다.

00:08:36.000 --> 00:08:41.000
활동은 또한 각 탭 사이의 새로운 흐림 전환을 특징으로 한다.

00:08:41.000 --> 00:08:48.000
뷰 간의 원활한 조화를 위해 이 전환을 컨테이너 배경 수정자와 결합하세요.

00:08:48.000 --> 00:08:53.000
활동의 마지막 페이지는 최근에 완료된 연습의 스크롤 목록이다.

00:08:53.000 --> 00:08:58.000
그 목록을 추가하는 것은 목록을 추가하는 것만큼 쉽습니다!

00:08:58.000 --> 00:09:05.000
TabView는 스크롤 콘텐츠를 자동으로 감지하고 이를 수용하기 위해 확장됩니다.

00:09:05.000 --> 00:09:12.000
그래서 그것이 우리가 활동과 유사한 레이아웃을 빠르게 만들 수 있는 방법이지만, TabView는 한 가지 트릭을 더 가지고 있다.

00:09:12.000 --> 00:09:17.000
젠: 이동 탭으로 스크롤할 때 발생하는 멋진 애니메이션을 눈치채셨나요?

00:09:17.000 --> 00:09:23.000
활동 링이 왼쪽 상단 모서리로 확장되는 것을 보세요.

00:09:23.000 --> 00:09:32.000
이것은 상호 작용을 디지털 크라운에 묶는 동시에 활동 링을 영구적으로 유지하는 우리의 디자인 목표를 달성한다.

00:09:32.000 --> 00:09:37.000
매튜: 이제 당신은 "나도 그렇게 할 수 있을까?"라고 궁금해할 수도 있습니다. 그리고 대답은, 넌 할 수 있어! 한 번 보자.

00:09:37.000 --> 00:09:44.000
watchOS 10에서는 이제 TabView의 선택 값에 따라 애니메이션을 구동할 수 있습니다.

00:09:44.000 --> 00:09:51.000
정말 깔끔한 트릭 중 하나는 이것을 일치하는 기하학 효과에 연결하는 것이다.

00:09:51.000 --> 00:09:55.000
활동 링은 TabView와 도구 모음 모두에 나타납니다.

00:09:55.000 --> 00:10:04.000
이 두 뷰 각각에 일치하는 지오메트리 효과를 추가함으로써, SwiftUI는 한 위치에서 다른 위치로 자동으로 애니메이션화됩니다.

00:10:04.000 --> 00:10:12.000
제니퍼: 내비게이션 분할 보기와 탭 보기는 정말 가능하지만, 모든 앱에 꼭 맞는 것은 아닙니다.

00:10:12.000 --> 00:10:25.000
앱이 세부 사항과 소스 목록 사이를 선회하거나 몇 개의 수직으로 페이지가 매겨진 탭에서 해야 할 일을 할 수 없다면, NavigationStack을 사용하는 것을 고려해 보세요.

00:10:25.000 --> 00:10:27.000
매튜: 응, 완전 맞아.

00:10:27.000 --> 00:10:32.000
우리는 운동, 캘린더, 음악과 같은 많은 앱에서 NavigationStack을 사용하고 있습니다.

00:10:32.000 --> 00:10:36.000
우리는 심지어 내비게이션 푸시 애니메이션을 새로 고쳤어!

00:10:36.000 --> 00:10:41.000
이제 선택한 뷰를 강조 표시하고 이동합니다.

00:10:41.000 --> 00:10:51.000
제니퍼: 내비게이션스택은 여전히 사람들을 계층 구조에서 벗어나게 하는 가장 명확한 방법이다.

00:10:51.000 --> 00:10:56.000
첫 번째 보기에서는 큰 제목을 사용하지만, 뒤로 버튼이 있는 하위 보기에서는 사용하지 마세요.

00:10:56.000 --> 00:11:06.000
앱을 디자인할 때, 가능한 한 적은 상호 작용으로 "Apple Watch Moment"를 달성하는 탐색 구조를 선택하십시오.

00:11:06.000 --> 00:11:09.000
매튜: 그게 watchOS 10의 내비게이션이야.

00:11:09.000 --> 00:11:17.000
NavigationSplitView, TabView 및 NavigationStack은 모든 앱에서 일관되고 예측 가능한 경험을 제공합니다.

00:11:17.000 --> 00:11:26.000
제니퍼: 이제 앱에 가장 적합한 탐색 구조를 선택했으므로, 각 뷰를 구축하는 데 사용할 수 있는 리소스에 대해 이야기해 봅시다.

00:11:26.000 --> 00:11:35.000
Apple Watch 디스플레이와 하드웨어가 진화함에 따라, 디스플레이는 지속적으로 더 커지고 더 둥글어졌다.

00:11:35.000 --> 00:11:48.000
수년에 걸쳐 점점 더 둥근 디스플레이를 설계하는 동안, 우리는 컨트롤, 라벨 및 콘텐츠의 크기와 배치를 정의하는 유연한 그리드 시스템을 개발했습니다.

00:11:48.000 --> 00:11:55.000
다양한 유형의 콘텐츠를 수용하기 위해, 우리는 세 가지 기본 레이아웃을 설계했다.

00:11:55.000 --> 00:12:05.000
다이얼 기반 뷰, 인포그래픽 뷰 및 목록.

00:12:05.000 --> 00:12:14.000
이 모든 레이아웃은 watchOS 10에서 지원하는 다양한 Apple Watch 크기에 자동으로 적응하도록 설계되었습니다.

00:12:14.000 --> 00:12:19.000
다이얼 기반 뷰는 한 눈에 전달되는 밀도가 높은 정보에 적합합니다.

00:12:19.000 --> 00:12:26.000
기상 조건과 같은 전체 화면 색상과 이미지의 사용은 추가적인 맥락을 추가하는 데 도움이 될 수 있다.

00:12:26.000 --> 00:12:34.000
다이얼을 사용하면 콘텐츠를 가리지 않고도 최대 네 개의 다른 코너 컨트롤을 추가할 수 있습니다.

00:12:34.000 --> 00:12:44.000
인포그래픽 보기는 텍스트 및 메트릭 블록과 페어링된 차트, 그래프 및 기타 데이터 시각화에 이상적입니다.

00:12:44.000 --> 00:12:52.000
그리고 목록을 사용하면 콘텐츠를 쉽게 스크롤하고 필요한 것을 정확히 찾을 수 있습니다.

00:12:52.000 --> 00:12:58.000
그리드는 활성 디스플레이 영역의 모양을 기반으로 합니다.

00:12:58.000 --> 00:13:07.000
우리는 디스플레이의 곡률로 시작하고, 그것을 사용하여 뷰에서 요소의 크기와 위치를 수학적으로 알립니다.

00:13:07.000 --> 00:13:12.000
이 레이아웃 그리드는 Apple Design Resources에서 사용할 수 있습니다.

00:13:12.000 --> 00:13:16.000
나는 당신이 그들이 당신의 앱을 디자인하는 데 유용하다는 것을 알기를 바랍니다.

00:13:16.000 --> 00:13:26.000
매튜: 젠과 디자인 팀이 만든 레이아웃 그리드는 watchOS 10의 기초를 형성하며, 많은 API의 토대를 제공합니다.

00:13:26.000 --> 00:13:30.000
예를 들어, 장면 패딩을 사용하여 다이얼 뷰를 만드는 데 필요한 삽입을 얻으세요.

00:13:30.000 --> 00:13:38.000
또는 새로운 "상단 바 후행" 배치를 사용하여 화면 오른쪽 상단의 도구 모음에 버튼을 추가하십시오.

00:13:38.000 --> 00:13:43.000
이 배치를 사용할 때, 시간은 길에서 벗어나 화면의 중심을 그린다.

00:13:43.000 --> 00:13:56.000
Now Playing 보기는 업데이트된 도구 모음을 실제로 사용합니다. "상단 막대 선행" 및 "추적" 배치를 사용하는 것 외에도 Now Playing은 하단 막대에 제어 버튼을 추가합니다.

00:13:56.000 --> 00:14:02.000
SwiftUI는 Jenn이 이 버튼을 정렬하기 위해 방금 설명한 것과 동일한 레이아웃 그리드를 사용하고 있다.

00:14:02.000 --> 00:14:05.000
추가 패딩을 추가할 필요가 없습니다.

00:14:05.000 --> 00:14:08.000
또한 하단 막대에는 일시 정지 버튼이 있습니다.

00:14:08.000 --> 00:14:13.000
제어 크기 수정자를 사용하여 이 버튼을 더 크고 눈에 띄게 만들 수 있습니다.

00:14:13.000 --> 00:14:17.000
지금 재생 중인 화면을 만드는 것이 그 어느 때보다 쉬워졌습니다!

00:14:17.000 --> 00:14:24.000
이러한 도구 모음 배치는 한 번에 화면에서 더 많은 컨트롤을 허용함으로써 집중적인 상호 작용을 위한 새로운 기회를 열어줍니다.

00:14:24.000 --> 00:14:36.000
제니퍼: 우리는 모든 픽셀을 활용하고 앱 전반에 걸쳐 Apple Watch를 더 일관되고 예측 가능하게 사용할 수 있도록 레이아웃 그리드를 개발했습니다.

00:14:36.000 --> 00:14:41.000
나는 또한 그들이 당신이 앞으로 몇 년 동안 훌륭한 앱을 디자인하도록 영감을 주기를 바랍니다.

00:14:41.000 --> 00:14:50.000
매튜: 다음으로, 색상과 전체 재료 세트가 어떻게 사람들에게 뷰 계층 내부의 장소 감각을 주는지에 대해 이야기해 봅시다.

00:14:50.000 --> 00:14:59.000
제니퍼: watchOS 10의 디자인 목표 중 하나는 전체 화면 색상과 이미지로 디스플레이의 모양과 충실도를 강조하는 것입니다.

00:14:59.000 --> 00:15:17.000
이를 위해, 우리는 Ultra Thin, Thin, Regular 및 Thick와 같은 다양한 블러 수준의 배경 콘텐츠에 영향을 미치는 네 개의 생생한 전체 화면 배경 자료를 추가했습니다.

00:15:17.000 --> 00:15:23.000
매튜: 그리고 다른 플랫폼에서 이미 할 수 있는 것처럼 watchOS에서 동일한 SwiftUI API를 사용할 수 있습니다.

00:15:23.000 --> 00:15:30.000
제니퍼: 우리는 또한 자신만의 악센트 색상으로 색을 칠할 수 있는 전체 화면 배경 그라디언트를 추가했습니다.

00:15:30.000 --> 00:15:45.000
활동에서, 우리는 비슷한 레이아웃을 가진 세 개의 연속 탭을 한 눈에 구별하기 위해 이동, 운동 및 스탠드의 악센트 색상을 사용합니다.

00:15:45.000 --> 00:15:54.000
전체 화면 색상의 또 다른 훌륭한 사용은 수면의 차분한 파란색 배경과 같은 톤을 설정하는 것입니다.

00:15:54.000 --> 00:16:04.000
태양 기울기를 사용하여 시간을 보여주는 세계 시계와 같이 색상을 사용하여 정보를 한 눈에 전달할 수 있습니다.

00:16:04.000 --> 00:16:08.000
또한 전체 화면 색상을 사용하여 상태 변화를 전달할 수 있습니다.

00:16:08.000 --> 00:16:18.000
타이머에서, 타이머가 카운트다운할 때 배경은 검은색이고, 밝은 오렌지색은 내 달걀 타이머가 끝났다고 선언한다.

00:16:18.000 --> 00:16:40.000
전경 요소가 이러한 모든 배경에서 멋지게 보이도록 하기 위해, 우리는 타이포그래피에서 정보 계층 구조를 만들기 위해 1차, 2차, 3차 및 4차 돌출 수준에 생생한 텍스트 라벨을 컨트롤과 플래터 셀에 생생한 채우기 재료를 추가했습니다.

00:16:40.000 --> 00:16:48.000
우리는 또한 전체 화면 배경에서 가독성을 보장하는 모든 시스템 색상의 생생한 버전을 추가했습니다.

00:16:48.000 --> 00:16:53.000
매튜: watchOS에서 모든 새로운 자료를 사용할 수 있다는 것은 정말 멋지다!

00:16:53.000 --> 00:16:55.000
그래서 그것은 앱에서 어떻게 합쳐지나요?

00:16:55.000 --> 00:16:58.000
노이즈 앱을 예로 들어 봅시다.

00:16:58.000 --> 00:17:01.000
우리는 전체 화면 배경 그라디언트로 시작할 것이다.

00:17:01.000 --> 00:17:06.000
이것은 watchOS 10의 새로운 "컨테이너 배경" 수정자에서 비롯됩니다.

00:17:06.000 --> 00:17:10.000
소음은 그라데이션이 적용된 녹색을 통과한다.

00:17:10.000 --> 00:17:17.000
차트의 채워지지 않은 막대와 X축 라벨은 보조 전경 스타일을 사용하고 있다.

00:17:17.000 --> 00:17:22.000
2차 스타일은 약간의 활기를 제공하고 배경색이 나올 수 있게 해준다.

00:17:22.000 --> 00:17:27.000
채워진 막대와 나머지 텍스트 라벨은 기본 스타일을 사용하고 있다.

00:17:27.000 --> 00:17:29.000
그것으로, 전망이 완성되었습니다!

00:17:29.000 --> 00:17:33.000
watchOS 10용 앱을 업데이트하면, 몇 가지 다른 변경 사항을 알 수 있습니다.

00:17:33.000 --> 00:17:38.000
시스템 전체의 프레젠테이션은 이제 전체 화면의 얇은 재료를 사용합니다.

00:17:38.000 --> 00:17:42.000
이것은 착용자에게 그들이 앱에서 어디에 있는지에 대한 추가적인 맥락을 제공한다.

00:17:42.000 --> 00:17:45.000
이 전망 바로 아래에서 녹색의 힌트를 볼 수 있습니다.

00:17:45.000 --> 00:17:55.000
사실, SwiftUI의 모든 컨트롤, 라벨 및 목록 콘텐츠는 재료 배경 위에 배치할 때 멋지게 보이도록 업데이트되었습니다.

00:17:55.000 --> 00:18:01.000
제니퍼: 그리고 내비게이션 바에는 아름다운 새로운 가변 블러가 있습니다.

00:18:01.000 --> 00:18:08.000
이것은 콘텐츠가 내비게이션 항목 아래로 스크롤할 때 부드러운 전환을 제공한다.

00:18:08.000 --> 00:18:10.000
그건 다루어야 할 게 많았어!

00:18:10.000 --> 00:18:21.000
우리는 디자인 원칙, 앱에서 탐색하는 완전히 새로운 방법, 새로운 레이아웃, 색상과 재료를 사용하는 방법을 살펴보았습니다.

00:18:21.000 --> 00:18:28.000
watchOS 10은 Apple Watch 앱 디자인의 주요 도약이다.

00:18:28.000 --> 00:18:31.000
매튜: 그리고 우리는 모든 변화에 대해 이야기할 것이 훨씬 더 많습니다!

00:18:31.000 --> 00:18:43.000
제니퍼: "Meet watchOS 10"에서 새로운 모든 것에 대한 개요와 "Apple Watch의 스마트 스택을 위한 디자인 위젯"을 확인하여 아름다운 위젯을 디자인하는 방법을 알아보세요.

00:18:43.000 --> 00:18:49.000
매튜: 이미 watchOS 앱이 있다면, "watchOS 10용 앱 업데이트"가 당신을 위한 것입니다!

00:18:49.000 --> 00:18:54.000
우리는 여기서 보여준 모든 SwiftUI API로 기존 앱을 업데이트하는 과정을 살펴볼 것입니다.

00:18:54.000 --> 00:19:00.000
watchOS 10은 디자인과 엔지니어링 간의 깊은 협력 덕분에 가능했다.

00:19:00.000 --> 00:19:02.000
그리고 이건 시작에 불과해!

00:19:02.000 --> 00:19:03.000
제니퍼: 그건 정말 사실이야.

00:19:03.000 --> 00:19:13.000
watchOS는 이보다 더 활기찬 플랫폼이었으며, Apple Watch 앱을 설계하고 구축하기에 이보다 더 좋은 시기는 없었습니다.

00:19:13.000 --> 23:59:59.000
♪ ♪

