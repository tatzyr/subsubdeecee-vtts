WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 ♪

00:00:03.000 --> 00:00:10.000
♪ 부드러운 기악 힙합 ♪

00:00:10.000 --> 00:00:15.000
안녕! "공유 공간을 위한 iPad 및 iPhone 앱 강화"에 오신 것을 환영합니다.

00:00:15.000 --> 00:00:16.000
제 이름은 존 마크입니다.

00:00:16.000 --> 00:00:20.000
저는 플랫폼 호환성 엔지니어입니다.

00:00:20.000 --> 00:00:31.000
대부분의 iPad와 iPhone 앱은 변경 없이 잘 실행되며, 이미 수행한 노력을 활용하고 Apple의 최신 플랫폼에서 작동하도록 합니다.

00:00:31.000 --> 00:00:44.000
이제 막 시작했다면, 먼저 "공유 공간에서 iPad 및 iPhone 앱 실행"을 시청하여 시스템의 내장 동작, 기능적 차이 및 테스트 설정에 대해 알아보십시오.

00:00:44.000 --> 00:00:52.000
이 비디오에서, 저는 당신의 iPad 또는 iPhone 앱을 훌륭한 앱에서 이 새로운 플랫폼에서 집에서 느낄 수 있는 앱으로 향상시키는 방법을 살펴볼 것입니다.

00:00:52.000 --> 00:01:01.000
앱이 기대해야 하는 새로운 상호 작용, 시각적 외관 변경, 미디어 녹화 및 재생 기능을 검토하겠습니다.

00:01:01.000 --> 00:01:05.000
이 플랫폼에서의 상호 작용은 재미있고 친숙하게 느껴진다.

00:01:05.000 --> 00:01:10.000
주요 구성 요소 중 하나는 새로운 자연 입력 기술이다.

00:01:10.000 --> 00:01:15.000
탭하면 사람들이 버튼을 본 다음, 손가락을 함께 탭하여 상호 작용할 수 있습니다.

00:01:15.000 --> 00:01:24.000
사람들은 탭하여 토글, 탭, 길게, 스와이프하여 슬라이더와 상호 작용하거나 버튼을 탭할 수 있습니다.

00:01:24.000 --> 00:01:31.000
직접 터치하려면 앱에 손을 뻗어 한 손가락으로 공간의 버튼을 터치해야 합니다.

00:01:31.000 --> 00:01:40.000
상호 작용 방법에 관계없이, 버튼은 상호 작용 정확성을 돕기 위해 지속적인 시각적 피드백을 제공합니다.

00:01:40.000 --> 00:01:44.000
이 비디오에서, 커서는 사람이 보고 있는 곳을 나타낸다.

00:01:44.000 --> 00:01:50.000
버튼을 볼 때, 하이라이트 호버 효과는 초점이 어디에 있는지 이해하는 데 도움이 되도록 컨트롤의 색상을 착색합니다.

00:01:50.000 --> 00:01:55.000
이 목록을 살펴보는 동안 각 항목이 강조 표시된다는 점에 유의하십시오.

00:01:55.000 --> 00:02:02.000
그 하이라이트는 왼쪽이나 오른쪽의 초점을 따르므로 무슨 일이 일어나고 있는지 명확하다.

00:02:02.000 --> 00:02:07.000
호버 효과는 사람들이 보고 있는 곳을 알려주기 위해 컨트롤에 존재한다.

00:02:07.000 --> 00:02:11.000
비활성 상태인 컨트롤은 호버 효과를 얻지 못한다.

00:02:11.000 --> 00:02:15.000
시스템 컨트롤은 당신을 위해 이 모든 호버 효과를 처리합니다.

00:02:15.000 --> 00:02:20.000
표준 컨트롤만 사용한다면, 여기서 아무런 변화 없이 로큰롤을 할 준비가 되어 있습니다.

00:02:20.000 --> 00:02:26.000
사용자 지정 컨트롤을 구축하는 경우, 호버 효과는 약간의 튜닝이 필요할 수 있습니다.

00:02:26.000 --> 00:02:31.000
다음은 iPad에서 카드 기반 인터페이스가 있는 앱의 예입니다.

00:02:31.000 --> 00:02:37.000
각 카드에는 사진, 제목, 날짜 및 메뉴 버튼이 포함되어 있습니다.

00:02:37.000 --> 00:02:40.000
여기 시뮬레이터에서 실행되는 동일한 앱이 있습니다.

00:02:40.000 --> 00:02:44.000
메뉴 버튼은 시스템 컨트롤이기 때문에, 이미 예상대로 작동하고 있다.

00:02:44.000 --> 00:02:51.000
그러나, 각 카드는 .onTap 수정자가 있는 간단한 VStack이므로 호버 효과를 받지 않습니다.

00:02:51.000 --> 00:02:58.000
그 카드 전체는 탭 타겟이므로, 사람들에게 사용 가능한 상호 작용이 있음을 알리기 위해 호버 효과가 필요합니다.

00:02:58.000 --> 00:03:02.000
그것을 고치기 위해 그 카드들 중 하나에 집중하자.

00:03:02.000 --> 00:03:10.000
버튼과 같은 시스템 컨트롤은 자동으로 호버 효과를 받기 때문에, 여기서 메뉴로 사용되는 버튼은 이미 호버 효과가 있습니다.

00:03:10.000 --> 00:03:16.000
그러나, 이 예에서, 사람들은 더 자세한 내용을 보기 위해 전체 카드를 클릭한다.

00:03:16.000 --> 00:03:25.000
VStack에 .hoverEffect를 추가함으로써, 전체 카드를 상호 작용 업데이트에 사용할 수 있게 되고 사람들에게 탭할 수 있음을 알립니다.

00:03:25.000 --> 00:03:32.000
많은 사용자 지정 비디오 플레이어는 히트 타겟을 최적화했기 때문에 사람들이 그들과 상호 작용하기 위해 그렇게 정확할 필요가 없습니다.

00:03:32.000 --> 00:03:42.000
iPad의 사용자 지정 비디오 플레이어의 예에서, 탭 대상은 앞으로 건너뛰기 및 뒤로 건너뛰기 버튼의 기호보다 훨씬 큽니다.

00:03:42.000 --> 00:03:49.000
여기 테두리 상자는 사람들이 상호 작용할 수 있는 탭 대상의 크기를 보여준다.

00:03:49.000 --> 00:03:56.000
이제 시뮬레이터에서 호버 효과는 전체 영역에 걸쳐 탭 가능한 영역을 보여주는 탭 대상을 강조합니다.

00:03:56.000 --> 00:04:02.000
공유 공간의 동일한 예는 이제 호버 효과가 있는 숨겨진 속성을 보여줍니다.

00:04:02.000 --> 00:04:09.000
이 외모의 변화는 진실을 드러내고 있지만 옳다고 느껴지지 않는다.

00:04:09.000 --> 00:04:18.000
예시를 확대하면, 기존 탭 동작을 축소된 모양으로 유지하려면, .contentShape 수정자에 사용자 지정 모양을 추가하십시오.

00:04:18.000 --> 00:04:29.000
사용자 지정 모양을 사용하여 앱은 탭 가능한 영역보다 작은 .contentShape 수정자에 원본과 크기를 제공할 수 있습니다.

00:04:29.000 --> 00:04:34.000
이 비디오에서, 버튼을 직접 보는 사람들은 호버 효과를 보게 될 것이다.

00:04:34.000 --> 00:04:43.000
그리고 이 변화와 함께, 호버 효과 경계 밖에서 탭하는 것은 iPad와 iPhone 경험의 기대와 일치할 것이다.

00:04:43.000 --> 00:04:45.000
전체 예시와 함께 시뮬레이터로 돌아가세요.

00:04:45.000 --> 00:04:52.000
이제 이 사용자 지정 모양으로, 호버 효과는 버튼에만 나타나지만 외부를 탭할 수 있습니다.

00:04:52.000 --> 00:04:54.000
훌륭해!

00:04:54.000 --> 00:05:03.000
대부분의 경우, 시스템 컨트롤에 대한 호버 효과는 잘 작동하지만, 호버 효과를 사용자 정의할 수 있는 능력은 강력하다.

00:05:03.000 --> 00:05:12.000
새로운 호버 효과 API를 통해 앱은 사용자 지정 버튼, 사용자 지정 모양에 대한 호버 효과를 만들거나 필요한 경우 컨트롤을 선택 해제할 수 있습니다.

00:05:12.000 --> 00:05:14.000
그걸 어떻게 하는지 점검해 보자.

00:05:14.000 --> 00:05:20.000
.buttonStyle은 앱의 모든 버튼에 사용자 지정 스타일을 지속적으로 적용할 수 있는 좋은 방법입니다.

00:05:20.000 --> 00:05:25.000
사용자 지정 스타일을 적용할 때, 호버 효과를 뺀다.

00:05:25.000 --> 00:05:32.000
사용자 지정 .buttonStyle 버튼에서 호버 효과를 다시 활성화하려면, 앱 요소에 .hoverEffect() 수정자를 추가하십시오.

00:05:32.000 --> 00:05:37.000
여기 사용자 지정 버튼 스타일의 간단한 버튼이 있습니다.

00:05:37.000 --> 00:05:46.000
사용자 지정 버튼 스타일을 살펴보면, 사용자 지정 스타일로 버튼에 호버 효과를 추가하기 위해 .hoverEffect 수정자를 추가해야 합니다.

00:05:46.000 --> 00:05:49.000
많은 앱들이 재미있고 사용자 지정 인터페이스를 가지고 있다.

00:05:49.000 --> 00:05:58.000
이 양봉 앱의 예에서, 버튼은 벌집이며, 각 벌집 셀은 자체 탭 대상이다.

00:05:58.000 --> 00:06:05.000
사용자 지정 모양 버튼을 구현하는 앱은 호버 효과를 렌더링하는 방법을 시스템에 알려야 합니다.

00:06:05.000 --> 00:06:17.000
여기 프레임 너비는 모양이 차지하는 영역보다 크므로, 기본 시스템 제공 호버 효과는 모양에 제한이 없는 전체 버튼 프레임을 커버합니다.

00:06:17.000 --> 00:06:24.000
사용자 지정 모양을 .contentShape 수정자에 전달함으로써, 호버 효과는 버튼의 경계까지 다듬어질 것이다.

00:06:24.000 --> 00:06:26.000
그걸 여기에 추가하자.

00:06:26.000 --> 00:06:34.000
이제 그것은 완벽하다. 왜냐하면 사람들이 개별 버튼을 볼 때, 호버 효과는 버튼 모양의 기하학으로 다듬어지기 때문이다.

00:06:34.000 --> 00:06:40.000
앱 상태로 인해 비활성화된 시스템 컨트롤은 자동으로 호버 효과를 받지 않습니다.

00:06:40.000 --> 00:06:46.000
앱이 특정 인터페이스 요소를 강조하지 않으려면, 개별 항목을 선택 해제할 수 있습니다.

00:06:46.000 --> 00:06:53.000
사람들은 호버 효과가 시스템 전반에 걸쳐 명백하고 일관성이 있을 것으로 예상하므로, 드물게 꺼져야 한다.

00:06:53.000 --> 00:07:00.000
각 손이 뚜렷한 터치이기 때문에 시스템은 최대 두 개의 동시 입력을 받아들인다.

00:07:00.000 --> 00:07:08.000
사용자 지정 제스처 인식기도 지원되지만, 자연스러운 입력 기대치로 원활하게 실행되도록 업데이트해야 할 수도 있습니다.

00:07:08.000 --> 00:07:15.000
게임 또는 빠른 또는 동시 입력이 필요한 다른 앱은 게임 컨트롤러를 지원해야 합니다.

00:07:15.000 --> 00:07:19.000
iPad와 iPhone 앱은 오랫동안 게임 컨트롤러에 대한 지원을 나타낼 수 있었다.

00:07:19.000 --> 00:07:25.000
이 플랫폼에서는 추가 입력 방법이 훨씬 더 중요합니다.

00:07:25.000 --> 00:07:35.000
Info.plist에 GCSupports ControllerUserInteraction을 포함하고 게임 컨트롤러 기능을 추가함으로써, 앱의 제품 페이지에 배지를 추가합니다.

00:07:35.000 --> 00:07:46.000
이것은 게임을 찾기 위해 App Store를 사용하는 사람들과의 커뮤니케이션을 개선하고, 모든 플랫폼에서 게임 컨트롤러의 가용성을 더욱 분명하게 만든다.

00:07:46.000 --> 00:07:55.000
App Store의 게임 컨트롤러와 게임에 대한 정보는 "게임 컨트롤러의 발전"과 "공간 컴퓨팅을 위한 훌륭한 게임 만들기" 비디오를 시청하세요.

00:07:55.000 --> 00:08:01.000
이 플랫폼에서 실행되는 iPad와 iPhone 앱은 iPad 라이트 모드 모양과 일치합니다.

00:08:01.000 --> 00:08:03.000
대부분의 경우, 그것은 멋져 보인다.

00:08:03.000 --> 00:08:10.000
시스템 표준 컨트롤, 레이아웃 및 색상을 사용하는 경우, 여기에 새로운 작업이 없습니다.

00:08:10.000 --> 00:08:20.000
이 시스템은 동적 콘텐츠 스케일링을 사용하여 렌더링을 최적화하므로 모든 이미지와 텍스트는 모든 각도에서 모든 각도에서 항상 선명합니다.

00:08:20.000 --> 00:08:26.000
최고의 경험을 제공하려면, 벡터 기반 콘텐츠를 사용하세요.

00:08:26.000 --> 00:08:32.000
iPad와 iPhone의 프롬프트는 모달 방식으로 표시되므로, 계속하기 전에 프롬프트와 상호 작용해야 합니다.

00:08:32.000 --> 00:08:37.000
이 새로운 플랫폼에서, 프롬프트는 모달처럼 나타나지 않는다.

00:08:37.000 --> 00:08:45.000
위치 허가 요청, Apple로 로그인 또는 OAuth와 같은 프롬프트는 계속하기 전에 처리가 필요하지 않습니다.

00:08:45.000 --> 00:08:49.000
이 인터페이스들은 그들만의 크롬과 윈도우 경험을 만든다.

00:08:49.000 --> 00:08:57.000
앱은 프롬프트를 받는 경우를 인식하고 처리해야 하지만, 즉시 취소되거나 성공 전화 회신을 받지 못할 수도 있습니다.

00:08:57.000 --> 00:09:03.000
콘텐츠를 캡처하고, 공유하고, 게시하는 사람들은 자신을 표현하는 좋은 방법이다.

00:09:03.000 --> 00:09:07.000
이 플랫폼에는 앱이 알아야 할 몇 가지 차이점이 있다.

00:09:07.000 --> 00:09:11.000
여러 개의 외부 및 내부용 카메라가 있습니다.

00:09:11.000 --> 00:09:15.000
그러나, 이 카메라들 중 다수는 앱을 사용할 수 없습니다.

00:09:15.000 --> 00:09:23.000
어떤 카메라와 마이크를 사용할 수 있는지 감지하기 위해 발견 세션을 사용하는 것이 중요합니다.

00:09:23.000 --> 00:09:31.000
앱이 훌륭한 캡처 경험을 갖도록 하려면, AVCaptureDevice 검색 세션을 사용하여 하드웨어 가용성을 확인하십시오.

00:09:31.000 --> 00:09:38.000
또한, 다른 플랫폼과 마찬가지로, 사용하기 전에 허가를 요청하는 것이 필요합니다.

00:09:38.000 --> 00:09:48.000
마지막으로, 특정 하드웨어 또는 소프트웨어 버전을 언급하지 않고 사람들에게 사용을 알리기 위해 인증 프롬프트 문자열을 일반화하십시오.

00:09:48.000 --> 00:09:55.000
앱이 카메라와 마이크 가용성을 요청할 때, iPad와 iPhone과 다른 값이 반환될 것으로 예상합니다.

00:09:55.000 --> 00:10:00.000
마이크를 쿼리할 때, 앱은 단일 .front 위치 마이크를 받게 됩니다.

00:10:00.000 --> 00:10:04.000
카메라를 쿼리할 때, 앱은 두 대의 카메라를 찾을 것이다.

00:10:04.000 --> 00:10:09.000
.Back 카메라는 카메라 글리프가 없는 검은색 카메라 프레임을 반환합니다.

00:10:09.000 --> 00:10:14.000
이것은 백 카메라 가용성을 가정하는 앱을 지원하는 비기능 카메라입니다.

00:10:14.000 --> 00:10:19.000
전면 카메라를 쿼리할 때, 앱은 단일 컴포지트 카메라를 찾습니다.

00:10:19.000 --> 00:10:28.000
장치에서 공간 페르소나를 찾을 수 없다면, 카메라 프레임은 앱으로 돌아오지 않을 것이다.

00:10:28.000 --> 00:10:36.000
AVRoutePickerView와 Picture in Picture는 이 플랫폼에서 사용할 수 없으며, 이는 시스템 제공 플레이어에 반영되었습니다.

00:10:36.000 --> 00:10:42.000
사용자 지정 플레이어를 구현하는 앱은 이러한 컨트롤을 표시하기 전에 두 가지 가용성을 모두 확인해야 합니다.

00:10:42.000 --> 00:10:45.000
마지막으로, 이 플랫폼은 일단 제거되면 잠깁니다.

00:10:45.000 --> 00:10:55.000
백그라운드 오디오를 활용하는 앱은 장치가 잠겨 있을 때 더 이상 이 백그라운드 모드를 얻지 않고 완전히 일시 중지되기 때문에 이 차이를 고려해야 합니다.

00:10:55.000 --> 00:11:01.000
미디어를 가져오는 앱은 캡처 하드웨어를 사용할 수 없을 때 대체 소스를 고려해야 합니다.

00:11:01.000 --> 00:11:09.000
iCloud 또는 문서 또는 사진 선택기와 같은 콘텐츠 선택기와 같은 옵션은 훌륭한 대안입니다.

00:11:09.000 --> 00:11:18.000
또한, VisionKit의 VNDocumentCameraViewController를 사용하는 앱은 주변 장치의 연속성 카메라로 자동으로 캡처됩니다.

00:11:18.000 --> 00:11:25.000
이러한 대안은 기존 iPad 및 iPhone 앱에 더 많은 미디어 가져오기 옵션을 제공합니다.

00:11:25.000 --> 00:11:29.000
iPad와 iPhone 앱은 이 새로운 플랫폼에서 잘 실행됩니다.

00:11:29.000 --> 00:11:32.000
모든 대화형 컨트롤에 호버 효과가 추가되었는지 확인하세요.

00:11:32.000 --> 00:11:38.000
게임의 경우, 플레이어가 계속해서 훌륭한 경험을 할 수 있도록 컨트롤러 지원을 추가하세요.

00:11:38.000 --> 00:11:46.000
마지막으로, 사용하기 전에 가용성을 확인하여 카메라와 마이크의 존재에 대한 가정을 검토하십시오.

00:11:46.000 --> 00:11:51.000
이제 이 새로운 플랫폼을 위해 iPad와 iPhone 앱을 최적화하는 방법을 알게 되었습니다.

00:11:51.000 --> 00:11:55.000
공유 공간에서 당신의 앱을 사용하기를 고대하고 있습니다.

00:11:55.000 --> 23:59:59.000
♪

