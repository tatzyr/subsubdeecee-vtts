WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:12.000
에티엔 세곤작: 안녕! 저희 세션에 오신 것을 환영합니다.

00:00:12.000 --> 00:00:16.000
저는 사파리 팀의 엔지니어인 에티엔 세곤작입니다.

00:00:16.000 --> 00:00:19.000
그리고 나는 내 팀 동료인 팀 호튼과 합류했다.

00:00:19.000 --> 00:00:24.000
우리는 당신에게 공간 컴퓨팅을 위한 새로운 사파리를 소개하고 싶습니다.

00:00:24.000 --> 00:00:31.000
우리가 매년 웹을 새로운 플랫폼으로 가져오는 것은 아니므로, 이 세션은 우리에게 많은 것을 의미한다.

00:00:31.000 --> 00:00:34.000
우리는 가능한 최고의 브라우저를 만들기 위해 세심한 주의를 기울였다.

00:00:34.000 --> 00:00:37.000
그리고 웹은 이 새로운 장치에서 정말 빛난다.

00:00:37.000 --> 00:00:40.000
그래서 사파리가 작동하는 것을 살펴보는 것으로 시작합시다.

00:00:40.000 --> 00:00:44.000
팀 호튼: 고마워, 에티엔! 여기 있어!

00:00:44.000 --> 00:00:51.000
xrOS에서 사파리를 처음 열면, iPad와 Mac에서 익숙한 사파리처럼 친숙해 보인다는 것을 알 수 있습니다.

00:00:51.000 --> 00:00:53.000
유사점은 피부 깊숙이 있는 것 이상이다.

00:00:53.000 --> 00:00:59.000
이것은 진정으로 아래에 동일한 WebKit 엔진이 있는 사파리이며, 이 플랫폼에 대한 몇 가지 사려 깊은 추가 사항입니다.

00:00:59.000 --> 00:01:06.000
당신의 모든 웹사이트는 웹 표준에 대한 광범위한 지원 덕분에 즉시 아름답게 작동할 것입니다.

00:01:06.000 --> 00:01:07.000
웹을 탐색하는 것은 쉽다.

00:01:07.000 --> 00:01:13.000
링크를 따라가려면, 손을 뻗어 페이지를 터치하거나, 단순히 링크를 보고 손가락을 함께 탭할 수 있습니다.

00:01:13.000 --> 00:01:18.000
링크를 보는 동안, 사파리는 부드러운 하이라이트를 제공하여 자신 있게 탐색할 수 있도록 도와줍니다.

00:01:18.000 --> 00:01:24.000
사파리를 사용하면, 이 플랫폼의 힘을 최대한 활용하는 방법을 빠르게 찾을 수 있습니다.

00:01:24.000 --> 00:01:35.000
예를 들어, 탭 개요는 광범위한 디스플레이를 위해 완전히 재설계되었으며, 탭 전환을 그 어느 때보다 즐겁게 만듭니다.

00:01:35.000 --> 00:01:44.000
여러 창에 대한 플랫폼의 지원을 통해 웹 사이트 및 기타 앱으로 자신을 둘러싸고 원하는 대로 멀티태스킹을 할 수 있습니다.

00:01:44.000 --> 00:01:51.000
저는 특히 궁극적인 웹 개발 경험을 위해 이것을 Mac 가상 디스플레이와 함께 사용하는 것을 좋아합니다.

00:01:51.000 --> 00:01:56.000
그리고 당신이 가장 좋아하는 웹 비디오를 전체 화면으로 가져오면 정말 초점을 맞출 수 있습니다.

00:01:56.000 --> 00:02:01.000
♪ 부드러운 기악 힙합 ♪

00:02:01.000 --> 00:02:06.000
안녕. 저는 사파리 팀의 소프트웨어 엔지니어인 켄달 배글리입니다.

00:02:06.000 --> 00:02:13.000
우리가 당신이 알고 있는 웹을 이 플랫폼에 가져왔지만, 여전히 명심해야 할 모범 사례가 있으므로, 에티엔으로 돌아가서 그 중 일부에 대해 들어봅시다.

00:02:13.000 --> 00:02:15.000
에티엔: 고마워 팀.

00:02:15.000 --> 00:02:17.000
난 그냥 탭 개요가 좋아!

00:02:17.000 --> 00:02:22.000
그리고 놀라운 것은 이 모든 웹사이트가 즉시 작동한다는 것이다.

00:02:22.000 --> 00:02:31.000
반응형 디자인 덕분에, 그들은 아이폰의 손바닥에 있는 것부터 방 전체를 채우는 것까지 적응할 수 있다.

00:02:31.000 --> 00:02:38.000
웹사이트를 점진적으로 향상시키기 위해 이미 사용하는 기술은 여전히 이 플랫폼에 적용됩니다.

00:02:38.000 --> 00:02:47.000
CSS 뷰포트 단위로 레이아웃을 디자인하고 미디어 및 컨테이너 쿼리로 창 크기 조정에 반응해야 합니다.

00:02:47.000 --> 00:02:53.000
그래픽의 경우, 특히 UI 요소의 경우 SVG를 선호합니다.

00:02:53.000 --> 00:02:58.000
이것은 창문이 가까이 있을 때에도 가능한 최고의 렌더링을 보장할 것이다.

00:02:58.000 --> 00:03:11.000
그리고 비트맵 자산을 사용해야 할 때, devicePixelRatio 및 반응형 이미지는 이미지 로딩 및 캔버스 렌더링에 권장되는 해상도를 반영합니다.

00:03:11.000 --> 00:03:27.000
오늘, 우리는 이 새로운 경험의 핵심인 자연스러운 상호 작용에 대해 배우고, 이 플랫폼을 위해 웹사이트를 최적화하며, 웹에서 3D 콘텐츠에 대한 독특한 기회를 모색하면서 흥분할 것입니다.

00:03:27.000 --> 00:03:33.000
직접적이고 간접적인 제스처에 대해 조금 더 깊이 파고들자.

00:03:33.000 --> 00:03:40.000
이 장치의 주요 입력 모델은 눈과 손 제스처의 융합에 의해 구동됩니다.

00:03:40.000 --> 00:03:44.000
당신이 팀의 데모에서 보았듯이, 그것은 매우 자연스럽습니다.

00:03:44.000 --> 00:03:49.000
당신은 단순히 주위를 둘러보거나, 손가락을 두드리거나, 꼬집기만 하면 됩니다.

00:03:49.000 --> 00:03:57.000
핀치가 시작되면, 당신의 눈은 HTML 대상을 찾고 포인터다운 이벤트를 배치하는 데 사용될 것입니다.

00:03:57.000 --> 00:04:07.000
제스처 동안, 포인터무브 이벤트는 손 동작을 따르는 데 도움이 될 것이며, 출시 시 포인터업이 발송됩니다.

00:04:07.000 --> 00:04:11.000
집게손가락으로 손을 뻗어 페이지를 직접 만질 수도 있습니다.

00:04:11.000 --> 00:04:19.000
손가락이 창과 교차할 때, 당신의 손 위치에 따라 포인터다운 이벤트가 발송됩니다.

00:04:19.000 --> 00:04:29.000
포인터무브 이벤트는 이전과 같이 움직임을 추적할 것이며, 손가락이 창과 교차하는 것을 멈추면 포인터업이 발송됩니다.

00:04:29.000 --> 00:04:35.000
물론, 간단한 상호 작용을 위해 낮은 수준의 포인터 이벤트에 대해 걱정할 필요가 없습니다.

00:04:35.000 --> 00:04:42.000
사파리는 여전히 클릭 이벤트를 트리거하고, 스크롤 및 스크롤 스냅은 예상대로 작동합니다.

00:04:42.000 --> 00:04:48.000
미디어 쿼리와 관련하여, 이 기본 입력 모델은 터치스크린과 유사하다.

00:04:48.000 --> 00:04:52.000
포인터는 거칠고 호버링을 지원하지 않는다.

00:04:52.000 --> 00:04:58.000
하지만 트랙패드나 키보드는 블루투스를 통해 연결될 수 있다는 것을 명심하세요.

00:04:58.000 --> 00:05:04.000
페이지를 둘러보는 동안 왜 호버 스타일이 트리거되지 않는지 궁금할 것입니다.

00:05:04.000 --> 00:05:09.000
그것은 이 장치가 시각적 피드백을 제공하는 새로운 방법과 함께 제공되기 때문이다.

00:05:09.000 --> 00:05:14.000
사용자가 요소를 볼 때, 탭하기 전에 강조 표시됩니다.

00:05:14.000 --> 00:05:21.000
그래서 당신의 웹사이트나 사파리 자체는 사용자가 어디를 보고 있는지 알 필요가 없습니다.

00:05:21.000 --> 00:05:25.000
이 시스템은 우리가 인터랙티브 지역이라고 부르는 것을 기반으로 한다.

00:05:25.000 --> 00:05:33.000
그것들은 접근 가능한 마크업과 CSS 스타일링을 기반으로 Safari의 WebKit 엔진에 의해 자동으로 생성됩니다.

00:05:33.000 --> 00:05:41.000
해당 ARIA 역할이 있는 버튼, 링크 및 메뉴 또는 요소는 자동으로 강조 표시됩니다.

00:05:41.000 --> 00:05:47.000
사용자 지정 스타일이 있는 경우에도 입력 필드와 양식 요소도 마찬가지입니다.

00:05:47.000 --> 00:05:56.000
하지만 무언가가 상호 작용한다는 것을 나타내고 싶다면 다른 HTML 요소의 경우 커서: 포인터를 사용해야 합니다.

00:05:56.000 --> 00:05:59.000
그게 어떻게 작동하는지 보자!

00:05:59.000 --> 00:06:06.000
여기, 저는 파일 목록 UI를 만들고 있으며, 목록에 있는 항목에 대한 사용자 지정 요소가 있습니다.

00:06:06.000 --> 00:06:09.000
커서를 추가할 것입니다: 강조 표시가 가능하도록 포인터.

00:06:09.000 --> 00:06:22.000
하지만 이 사용자 지정 요소는 내부적으로 divs를 사용하고 있으며, 커서 속성은 상속되므로 아이콘과 라벨은 자체 영역을 얻고 별도로 강조 표시합니다.

00:06:22.000 --> 00:06:28.000
포인터 이벤트 설정: 이 내부 divs의 어느 것도 내가 정리하는 데 도움이 되지 않을 것이다.

00:06:28.000 --> 00:06:32.000
WebKit은 그들이 개별적으로 강조할 필요가 없다는 것을 알게 될 것이다.

00:06:32.000 --> 00:06:40.000
그리고 그것은 또한 내가 항상 같은 이벤트 대상을 얻을 것이기 때문에 내 이벤트 처리 코드를 단순화할 것이다.

00:06:40.000 --> 00:06:51.000
또한 CSS 테두리 반경 속성을 사용하여 요소의 모든 모서리 또는 일부 모서리에만 반경을 추가하여 하이라이트를 형성할 수 있습니다.

00:06:51.000 --> 00:06:59.000
나는 심지어 완벽한 원을 만들 수도 있지만, 각 요소의 시각적 스타일을 맞추는 것이 중요하다.

00:06:59.000 --> 00:07:02.000
팀, 우리가 작업하던 웹사이트 기억나?

00:07:02.000 --> 00:07:05.000
나는 우리가 그것에 대한 대화형 영역을 다듬어야 하는지 궁금하다.

00:07:05.000 --> 00:07:12.000
팀: 그래, 지금 그들이 어떻게 생겼는지 보자!

00:07:12.000 --> 00:07:17.000
장치가 없더라도 xrOS 시뮬레이터를 사용하여 하이라이트 영역을 디버깅할 수 있습니다.

00:07:17.000 --> 00:07:24.000
창 주위로 마우스 커서를 이동하면 당신이 보고 있는 곳을 시뮬레이션하고, 클릭하면 탭이 시뮬레이션됩니다.

00:07:24.000 --> 00:07:29.000
시뮬레이터에서 사파리를 열고 내 웹사이트의 하이라이트를 아름답게 하기 위해 무엇을 할 수 있는지 봅시다.

00:07:29.000 --> 00:07:34.000
이 페이지를 볼 때 가장 먼저 눈에 띄는 것은 내비게이션 바의 버튼이 전혀 강조되지 않는다는 것입니다!

00:07:34.000 --> 00:07:41.000
에티엔이 사파리가 커서 CSS 속성을 사용하여 요소가 대화형으로 간주되어야 하는지 결정한다고 언급한 것을 기억할 수 있습니다.

00:07:41.000 --> 00:07:50.000
나는 이 버튼들도 macOS 사파리에서 손 커서를 얻지 못한다는 것을 알고 있기 때문에, 그것이 문제일 수 있다는 직감이 있지만, 우리는 웹 인스펙터를 확인할 수도 있다.

00:07:50.000 --> 00:07:56.000
그것에 대해 더 알고 싶다면, "사파리 개발자 기능 재발견" 세션을 볼 수 있습니다.

00:07:56.000 --> 00:08:01.000
웹 인스펙터를 사용하여, 나는 이 잘못된 글로벌 커서 스타일을 발견했다.

00:08:01.000 --> 00:08:10.000
그것을 제거하고, 링크가 기본 커서가 있는 링크가 되도록 합시다: 포인터 스타일.

00:08:10.000 --> 00:08:11.000
야, 좋아!

00:08:11.000 --> 00:08:14.000
이제 우리는 하이라이트를 얻었지만, 그것은 약간 잘못된 것 같다.

00:08:14.000 --> 00:08:17.000
사실, 그것은 내 웹사이트에서 실수를 드러내고 있다.

00:08:17.000 --> 00:08:20.000
macOS에서도, 텍스트만 실제로 상호 작용한다.

00:08:20.000 --> 00:08:24.000
버튼 자체를 클릭하려고 하면, 링크를 따라가지 않을 것이다.

00:08:24.000 --> 00:08:29.000
그래서 우리는 웹사이트에서 실수를 발견했고 그것을 수정함으로써, 우리는 또한 이 플랫폼에서의 외관을 개선할 수 있습니다!

00:08:29.000 --> 00:08:32.000
나한테는 만능 승리인 것 같아.

00:08:32.000 --> 00:08:43.000
나는 전체 버튼을 텍스트 대신 링크의 일부로 만들 것이다.

00:08:43.000 --> 00:08:49.000
그게 효과가 있는지 보자.

00:08:49.000 --> 00:08:51.000
나한테는 훨씬 더 좋아 보여!

00:08:51.000 --> 00:08:55.000
이제 전체 버튼은 상호 작용하며, 하이라이트는 전체 영역을 다룹니다.

00:08:55.000 --> 00:08:59.000
아주 자세히 보면, 모서리가 잘 정렬되지 않는다는 것을 알 수 있을 것이다.

00:08:59.000 --> 00:09:05.000
사파리의 하이라이트는 기본적으로 반경이 작지만, 대화형 요소에 테두리 반경이 있다면, 우리는 그것을 고려할 것입니다.

00:09:05.000 --> 00:09:11.000
고치자.

00:09:11.000 --> 00:09:17.000
대화형 요소에 동일한 테두리 반경을 추가하세요.

00:09:17.000 --> 00:09:18.000
완벽해!

00:09:18.000 --> 00:09:21.000
이제 버튼은 우리가 원하는 대로 강조 표시됩니다.

00:09:21.000 --> 00:09:25.000
그들 중 하나를 탭하자.

00:09:25.000 --> 00:09:28.000
오, 그 점수는 아이패드에 비해 좀 빨라.

00:09:28.000 --> 00:09:33.000
내 생각에 우리는 고쳐야 할 것이 더 많은 것 같지만, 우리는 나중에 다시 돌아올 것이다.

00:09:33.000 --> 00:09:37.000
지금은, 에티엔으로 돌아가서 당신의 웹사이트에 만들 수 있는 몇 가지 최적화에 대해 들어봅시다.

00:09:37.000 --> 00:09:38.000
에티엔: 고마워, 팀!

00:09:38.000 --> 00:09:43.000
우리는 이 플랫폼을 최적화할 때 몇 가지를 명심해야 한다.

00:09:43.000 --> 00:09:49.000
우리가 당시에 레티나 디스플레이를 도입했을 때, 픽셀의 개념은 조금 더 추상적이 되었다.

00:09:49.000 --> 00:10:01.000
웹 개발자와 디자이너로서, 우리는 CSS 픽셀로 작업하고 사용자 에이전트가 필요한 만큼의 장치 픽셀을 사용하여 하드웨어에 적응할 수 있도록 합니다.

00:10:01.000 --> 00:10:05.000
오늘날, 스크린의 개념은 조금 더 추상화되고 있다.

00:10:05.000 --> 00:10:10.000
전체 화면으로 이동을 요청할 때, 당신의 목표는 단일 요소에 집중하는 것입니다.

00:10:10.000 --> 00:10:16.000
페이지의 나머지 부분은 사라지고, 동시에 창의 크기가 기본 크기로 조정됩니다.

00:10:16.000 --> 00:10:29.000
이 기본 크기는 또한 화면 크기로 자바스크립트로 다시 보고되므로, 전체 화면에서 창과 화면 크기가 일치할 것으로 기대하는 웹사이트는 계속 작동할 것입니다.

00:10:29.000 --> 00:10:33.000
하지만 이 플랫폼에서 전체 화면 창의 크기를 조정할 수 있다는 것을 기억하세요.

00:10:33.000 --> 00:10:39.000
그리고 그들은 심지어 보고된 화면 크기보다 더 커질 수도 있다.

00:10:39.000 --> 00:10:50.000
스크롤과 애니메이션에 관해서는, 항상 그렇듯이, 특히 모든 애니메이션이 가능한 최고의 프레임 속도를 목표로 하는 이 장치에서 성능이 중요합니다.

00:10:50.000 --> 00:10:56.000
패시브 스크롤 이벤트 리스너는 애니메이션이 스크롤을 방해하는 것을 방지합니다.

00:10:56.000 --> 00:11:02.000
그리고 requestAnimationFrame을 사용할 때, 항상 각 프레임 사이의 경과 시간을 측정하세요.

00:11:02.000 --> 00:11:08.000
웹 인스펙터 타임라인은 또한 성능 문제를 식별하는 데 도움이 될 것입니다.

00:11:08.000 --> 00:11:14.000
웹 인스펙터 기술 강연에서 그들에 대해 더 많이 배울 수 있습니다.

00:11:14.000 --> 00:11:20.000
requestAnimationFrame에 대해 말하자면, 여기 내 애니메이션은 약간 불안하다.

00:11:20.000 --> 00:11:24.000
그것의 런타임은 우리가 animate()를 부르는 주파수에 달려 있다.

00:11:24.000 --> 00:11:30.000
그리고 이 주파수는 장치에 따라 더 높거나 낮을 수 있다.

00:11:30.000 --> 00:11:38.000
대신 제가 해야 할 일은 각 업데이트 사이의 시간을 측정하고 이것을 사용하여 애니메이션의 진행 상황을 계산하는 것입니다.

00:11:38.000 --> 00:11:46.000
그것은 충분히 간단하며 내 애니메이션을 requestAnimationFrame 재생률과 독립적으로 만들 것이다.

00:11:46.000 --> 00:11:49.000
내 생각에 그게 점수 애니메이션의 문제였던 것 같아!

00:11:49.000 --> 00:11:51.000
팀: 오 그래, 난 이미 그걸 고쳤어.

00:11:51.000 --> 00:11:55.000
그것이 장치에서 작동하는지 봅시다.

00:11:55.000 --> 00:12:01.000
그것은 훨씬 더 좋아 보이며, 이제 느리거나 빠른 프레임 속도를 가진 장치에 대해 미래에 대비할 수 있습니다.

00:12:01.000 --> 00:12:05.000
다기는 모두 웹사이트에서 꽤 좋아 보이지만, 우리는 더 멀리 갈 수 있다.

00:12:05.000 --> 00:12:13.000
그들이 당신의 테이블에서 실제로 어떻게 보일지 보고 싶다면, 퀵 룩을 활용하고 그것을 현실로 만들기 위해 웹사이트를 조정하는 것은 매우 간단합니다.

00:12:13.000 --> 00:12:25.000
iOS의 AR 퀵 룩과 마찬가지로, 이미지 주위에 USDZ 파일을 참조하는 앵커를 추가하기만 하면 간단한 이미지를 마법 같은 퀵 룩 경험으로 바꿉니다.

00:12:25.000 --> 00:12:28.000
굉장해! 이제 나는 어느 것이 맞는지 정말 알 수 있다.

00:12:28.000 --> 00:12:30.000
에티엔, 어떤 찻잔을 고를래?

00:12:30.000 --> 00:12:34.000
에티엔: 내가 가장 잘 맞는 것을 찾기 위해 내 부엌에서 시도해봐야 할 것 같아.

00:12:34.000 --> 00:12:37.000
하지만 이건 인상적이야.

00:12:37.000 --> 00:12:41.000
데모는 정말 훌륭했다; 탐색하는 것은 빠르고 재미있었다.

00:12:41.000 --> 00:12:45.000
그리고 퀵 룩은 정말로 사물을 완전히 다른 차원으로 가져왔다.

00:12:45.000 --> 00:12:49.000
웹사이트에 3D 콘텐츠를 어떻게 통합할 수 있는지 봅시다.

00:12:49.000 --> 00:12:54.000
AR 퀵 룩은 원래 iOS 12에 다시 도입되었다.

00:12:54.000 --> 00:13:06.000
특별한 속성이 있는 USDZ 파일을 가리키는 링크와 3D 모델의 미리보기를 표시하는 데 사용할 수 있는 이미지 태그만 있으면 됩니다.

00:13:06.000 --> 00:13:20.000
이 정확한 설정은 xrOS에서 작동하며, RealityKit의 고급 조명과 렌더링의 이점을 누리면서 사용자에게 공간에 3D 개체를 넣을 수 있는 쉬운 방법을 제공합니다.

00:13:20.000 --> 00:13:27.000
더 알고 싶다면 "USD 생태계 탐험"을 꼭 보세요.

00:13:27.000 --> 00:13:35.000
같은 맥락에서, HTML 모델 요소는 잠재적인 W3C 표준으로 제안되고 있다.

00:13:35.000 --> 00:13:42.000
페이지 내부의 AR 퀵 룩이나 3D 개체의 이미지 태그로 생각하세요.

00:13:42.000 --> 00:13:52.000
그것은 완전한 입체 시야와 환경 조명에 이르기까지 모든 장치에서 가능한 최고의 렌더링을 제공할 것이다.

00:13:52.000 --> 00:14:06.000
완전히 새로운 요소를 도입하는 것은 큰 단계이므로, 우리는 3D 객체의 소스와 사용자 상호 작용을 활성화하거나 비활성화하는 속성을 지정하는 쉬운 방법으로 간단하게 시작하고 있습니다.

00:14:06.000 --> 00:14:09.000
자바스크립트 API는 조금 더 풍부하다.

00:14:09.000 --> 00:14:13.000
카메라, 애니메이션 등에 접근할 수 있습니다.

00:14:13.000 --> 00:14:14.000
흥미롭게 들리나요?

00:14:14.000 --> 00:14:22.000
최신 사파리를 실행하면, 모든 플랫폼에서 모델 요소 기능 플래그를 활성화할 수 있습니다.

00:14:22.000 --> 00:14:33.000
그리고 더 나아가고 싶다면, 웹에서 완전히 몰입할 수 있는 장면을 구축하기 위한 W3C 표준인 WebXR의 개발자 미리보기를 확인하세요.

00:14:33.000 --> 00:14:41.000
WebXR은 WebGL을 기반으로 하며, 많은 인기 있는 WebGL 라이브러리에는 이미 지원이 내장되어 있습니다.

00:14:41.000 --> 00:14:49.000
3D 장면에 대한 코드가 있다면, WebXR 세션을 요청하여 완전히 몰입할 수 있습니다.

00:14:49.000 --> 00:14:52.000
그것은 마우스나 트랙패드로 패닝하는 것과 같지 않다.

00:14:52.000 --> 00:14:56.000
당신은 말 그대로 그 장면 안으로 옮겨질 것입니다.

00:14:56.000 --> 00:14:59.000
넌 그걸 믿으려고 노력해야 해.

00:14:59.000 --> 00:15:06.000
xrOS에서는 Safari의 고급 설정에서 WebXR 기능 플래그를 찾을 수 있습니다.

00:15:06.000 --> 00:15:08.000
그리고 이건 시작에 불과해.

00:15:08.000 --> 00:15:13.000
몰입형 웹에 관해서는 탐험할 것이 훨씬 더 많다.

00:15:13.000 --> 00:15:19.000
CSS 변환과 포인터 이벤트와 같은 기술은 이 새로운 플랫폼에서 진화할 수밖에 없다.

00:15:19.000 --> 00:15:26.000
이것이 애플이 W3C 웹 표준의 정의와 개발에 적극적으로 참여하는 이유이다.

00:15:26.000 --> 00:15:30.000
그리고 당신은 의견을 제공할 기회가 있습니다.

00:15:30.000 --> 00:15:34.000
당신이 생각하는 것과 무엇을 기대하고 있는지 알려주세요.

00:15:34.000 --> 00:15:39.000
오늘 새로운 3D 경험으로 실험을 시작할 수 있습니다.

00:15:39.000 --> 00:15:45.000
그리고 대화형 지역은 xrOS 시뮬레이터에서 쉽게 검토할 수 있습니다.

00:15:45.000 --> 00:15:50.000
버그를 발견하면, 피드백 어시스턴트는 모든 플랫폼에서 사용할 수 있습니다.

00:15:50.000 --> 00:15:59.000
그리고 HTML, 자바스크립트 또는 CSS와 관련된 모든 것에 대해, WebKit 버그 추적기는 bugs.webkit.org에 있습니다.

00:15:59.000 --> 00:16:08.000
CSS에 대해 말하자면, 올해 사파리에 많은 새로운 기능이 제공되므로, "CSS의 새로운 기능"을 놓치지 마세요.

00:16:08.000 --> 00:16:09.000
참여해 주셔서 감사합니다, 여러분!

00:16:09.000 --> 00:16:12.000
팀: 그리고 몰입형 웹에서 뵙겠습니다!

00:16:12.000 --> 23:59:59.000
♪

