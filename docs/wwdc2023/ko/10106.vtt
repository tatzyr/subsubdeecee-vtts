WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
니콜라스: 안녕하세요, "iPadOS 앱에서 외부 카메라 지원"에 오신 것을 환영합니다.

00:00:14.000 --> 00:00:21.000
저는 카메라 소프트웨어 팀의 니콜라스 겔로이며, iPad 앱이 외부 카메라를 어떻게 사용할 수 있는지에 대한 이 세션입니다.

00:00:21.000 --> 00:00:28.000
Stage Manager의 강력한 기능 세트에는 iPad의 디스플레이를 여러 화면으로 확장할 수 있는 기능이 포함되어 있습니다.

00:00:28.000 --> 00:00:35.000
그리고 iPadOS 17을 사용하면 앱이 Apple Studio Display와 같은 외부 카메라를 사용할 수 있습니다.

00:00:35.000 --> 00:00:41.000
이 iPad Pro에서는 FaceTime이 열려 있으며, 연결된 디스플레이의 카메라를 사용하고 있습니다.

00:00:41.000 --> 00:00:49.000
이제 통화 반대편에 있는 사람들이 내가 이 큰 애플 스튜디오 디스플레이에서 앱을 실행할 때 더 나은 시야각을 가지고 있기 때문에 이것은 훌륭하다.

00:00:49.000 --> 00:00:58.000
나는 또한 센터 스테이지를 사용할 수 있는데, 이는 내가 움직일 때 나를 프레임에 유지하는 데 도움이 된다.

00:00:58.000 --> 00:01:05.000
FaceTime, 코드 스캐너 및 WebKit은 외부 카메라를 사용하며, 앱이 할 수 있는 일의 좋은 예입니다.

00:01:05.000 --> 00:01:12.000
Apple Pro Display XDR과 같이 카메라가 내장되어 있지 않은 모니터를 사용할 때, 사람들은 종종 USB 카메라를 그 위에 놓습니다.

00:01:12.000 --> 00:01:21.000
USB 카메라가 모니터에 연결되어 있다면, 모니터가 iPad에 연결되면 앱에서도 카메라를 사용할 수 있습니다.

00:01:21.000 --> 00:01:26.000
iPad 앱은 외부 카메라와 웹캠을 사용하여 사진을 찍고 영화를 녹화할 수 있습니다.

00:01:26.000 --> 00:01:34.000
그들은 또한 컨트롤 센터에서 사용할 수 있는 포트레이트 블러와 스튜디오 라이트 비디오 효과와 같은 다른 시스템 카메라 기능을 지원합니다.

00:01:34.000 --> 00:01:38.000
USB-C 커넥터가 있는 iPad는 외부 카메라를 지원합니다.

00:01:38.000 --> 00:01:44.000
당신의 앱은 USB 비디오 클래스 또는 UVC 사양을 준수하는 장치를 사용할 수 있습니다.

00:01:44.000 --> 00:01:49.000
그것은 비디오 스트리밍을 지원하는 USB 장치의 표준을 정의한다.

00:01:49.000 --> 00:01:52.000
그리고 당신의 앱이 사용할 수 있는 인기 있는 카메라가 많이 있습니다.

00:01:52.000 --> 00:01:57.000
일부 외부 카메라에는 앱에서도 사용할 수 있는 마이크가 내장되어 있습니다.

00:01:57.000 --> 00:02:07.000
일부 제조업체는 단일 비디오 스트림을 출력하기 위해 여러 입력 사이를 변경하는 HDMI 스위처와 같이 UVC 사양을 준수하는 비카메라 장치를 만듭니다.

00:02:07.000 --> 00:02:11.000
iPadOS를 사용하면 앱이 이와 같은 장치를 사용할 수 있습니다.

00:02:11.000 --> 00:02:16.000
외부 카메라 지원은 iPad의 풍부한 미디어 생태계를 크게 향상시킵니다.

00:02:16.000 --> 00:02:21.000
발견과 사용부터 시작하여 앱이 어떻게 사용할 수 있는지 보여드리겠습니다.

00:02:21.000 --> 00:02:25.000
다음으로, 나는 돌아가서 비디오 회전을 신비화할 것이다.

00:02:25.000 --> 00:02:30.000
그런 다음 당신의 앱이 외부 카메라에 포함된 마이크를 어떻게 사용할 수 있는지 다루겠습니다.

00:02:30.000 --> 00:02:34.000
그리고 마지막으로, 당신의 앱에 대한 모범 사례에 대해 논의하겠습니다.

00:02:34.000 --> 00:02:39.000
먼저, iPad 앱이 외부 카메라를 어떻게 사용할 수 있는지 논의하겠습니다.

00:02:39.000 --> 00:02:47.000
iPad 앱은 사진을 찍거나, 영화를 녹화하거나, 화상 통화를 위해 네트워크를 통해 카메라 프레임을 보내는 것과 같은 많은 기능을 위해 카메라를 사용합니다.

00:02:47.000 --> 00:02:56.000
AVFoundation 프레임워크를 사용하면 앱이 특히 AVCapture 접두사 클래스와 함께 내장 및 외부 카메라를 사용할 수 있습니다.

00:02:56.000 --> 00:02:59.000
앱이 카메라를 어떻게 사용할 수 있는지 검토해 봅시다.

00:02:59.000 --> 00:03:04.000
먼저, 앱은 카메라와 마이크를 나타내는 AVCaptureDevices를 사용합니다.

00:03:04.000 --> 00:03:11.000
그런 다음 AVCaptureDeviceInputs에 싸여 AVCaptureSession에 연결할 수 있습니다.

00:03:11.000 --> 00:03:16.000
AVCaptureSession은 AVCapture 그래프의 중앙 제어 객체이다.

00:03:16.000 --> 00:03:20.000
AVCaptureOutputs는 다양한 방법으로 입력에서 데이터를 렌더링합니다.

00:03:20.000 --> 00:03:23.000
MovieFileOutput은 퀵타임 영화를 기록한다.

00:03:23.000 --> 00:03:27.000
PhotoOutput은 고품질 스틸과 라이브 사진을 캡처합니다.

00:03:27.000 --> 00:03:37.000
VideoDataOutput 또는 AudioDataOutput과 같은 데이터 출력은 카메라나 마이크에서 앱으로 비디오 또는 오디오 버퍼를 전달합니다.

00:03:37.000 --> 00:03:42.000
그리고 메타데이터와 깊이와 같은 다른 종류의 데이터 출력이 있다.

00:03:42.000 --> 00:03:50.000
라이브 카메라 미리보기의 경우, CALayer의 하위 클래스인 AVCaptureVideoPreviewLayer라는 특별한 유형의 출력이 있습니다.

00:03:50.000 --> 00:03:56.000
데이터는 AVCaptureConnections를 통해 캡처 입력에서 호환 가능한 출력으로 흐릅니다.

00:03:56.000 --> 00:04:02.000
이 수업들은 iOS, macOS 및 tvOS에서 사용할 수 있습니다.

00:04:02.000 --> 00:04:10.000
AVCapture를 처음 접한다면, developer.apple.com의 캡처 설정 시작 페이지에서 자세히 알아보시기 바랍니다.

00:04:10.000 --> 00:04:16.000
iPadOS 17의 새로운 기능, 앱은 AVCapture로 외부 카메라에 액세스할 수 있습니다.

00:04:16.000 --> 00:04:21.000
앱이 이미 내장 카메라를 사용하고 있다면, 외부 카메라를 사용하기 위해 간단한 업데이트를 할 수 있습니다.

00:04:21.000 --> 00:04:23.000
그것들을 발견하는 것은 쉽다.

00:04:23.000 --> 00:04:28.000
각 외부 카메라는 AVCaptureDevice 인스턴스로 표시됩니다.

00:04:28.000 --> 00:04:35.000
그리고 AVCaptureDevice와 AVCaptureDeviceDiscoverySession의 기존 API로 그것들을 찾을 수 있습니다.

00:04:35.000 --> 00:04:42.000
AVCaptureDevice에는 세 가지 주요 속성이 있습니다: 미디어 유형, 장치 유형 및 위치.

00:04:42.000 --> 00:04:46.000
외부 카메라는 내장 카메라와 마찬가지로 비디오 미디어 데이터를 제공합니다.

00:04:46.000 --> 00:04:49.000
그리고 그들의 장치 유형은 외부이다.

00:04:49.000 --> 00:04:57.000
외부 카메라 사용에 익숙한 macOS 앱 개발자의 경우, 이것은 외부 알 수 없는 장치 유형을 더 이상 사용하지 않습니다.

00:04:57.000 --> 00:05:04.000
외부 카메라는 iPad와 독립적으로 이동할 수 있기 때문에, 장치 위치는 지정되지 않습니다.

00:05:04.000 --> 00:05:10.000
이 세 가지 속성은 AVCapture API로 외부 카메라를 찾는 데 사용할 수 있습니다.

00:05:10.000 --> 00:05:13.000
앱에서 외부 카메라를 사용하기 시작하는 것은 쉽습니다.

00:05:13.000 --> 00:05:21.000
이 세션에서는 인기 있는 샘플 카메라 앱인 AVCam을 수정하여 Apple Studio Display의 외부 카메라에서 스트리밍할 것입니다.

00:05:21.000 --> 00:05:29.000
Developer.apple.com에서 이 세션에서 변경한 모든 변경 사항과 함께 완성된 AVCam 버전을 다운로드할 수 있습니다.

00:05:29.000 --> 00:05:36.000
현재, 이 앱은 내장 카메라를 사용하며, 버튼을 누를 때 사용자가 전면 및 후면 카메라 사이를 전환할 수 있습니다.

00:05:36.000 --> 00:05:40.000
AVCam이 출시되면, 후면 카메라로 시작됩니다.

00:05:40.000 --> 00:05:48.000
나는 앱이 내장 카메라보다 외부 카메라를 찾는 것을 선호하도록 코드를 바꿀 것이다.

00:05:48.000 --> 00:05:58.000
iPad를 Apple Studio 디스플레이에 연결하면 앱을 실행하고 실행되면 외부 카메라를 사용할 것입니다.

00:05:58.000 --> 00:05:59.000
이건 훌륭해.

00:05:59.000 --> 00:06:04.000
AVCam은 이제 외부 카메라를 사용하고 있으며, 몇 줄의 코드만 있으면 됩니다.

00:06:04.000 --> 00:06:11.000
AVCaptureVideoPreviewLayer는 기본적으로 외부 카메라를 미러링하여 Apple Studio 디스플레이에서 카메라를 사용하는 데 적합합니다.

00:06:11.000 --> 00:06:14.000
원한다면 이 행동을 비활성화할 수 있습니다.

00:06:14.000 --> 00:06:19.000
이 세션이 끝날 때 모범 사례 섹션에서 이것을 하는 방법을 설명하겠습니다.

00:06:19.000 --> 00:06:24.000
이제 앱을 iPad의 디스플레이로 옮길게요.

00:06:24.000 --> 00:06:29.000
그리고 그냥 재미로, 나는 외장 카메라의 플러그를 뽑을 거야.

00:06:29.000 --> 00:06:35.000
어-오, 앱의 카메라 미리보기가 멈췄고, 지금은 어떤 카메라도 사용하지 않습니다.

00:06:35.000 --> 00:06:40.000
AVCam은 외부 카메라의 연결 및 연결 해제 이벤트를 처리하기 위해 더 많은 변경이 필요할 것이다.

00:06:40.000 --> 00:06:48.000
외부 카메라는 내장 카메라와 달리 사용자가 언제든지 iPad에서 연결하고 분리할 수 있기 때문에 특별한 주의가 필요합니다.

00:06:48.000 --> 00:06:54.000
앱은 이러한 이벤트를 모니터링하여 언제 카메라를 사용할 수 있게 되었는지 또는 더 이상 사용할 수 없는지 알 수 있습니다.

00:06:54.000 --> 00:07:01.000
동일한 물리적 장치가 다시 연결되면, AVCaptureDevice의 새로운 인스턴스를 사용하여 표시됩니다.

00:07:01.000 --> 00:07:08.000
앱이 연결 및 연결 끊김 이벤트를 수신하는 데 사용할 수 있는 기존 API가 있습니다.

00:07:08.000 --> 00:07:21.000
AVCaptureDevice의 isConnected 속성이나 카메라가 오고 갈 때 업데이트되는 AVCaptureDeviceDiscoverySession의 장치 속성을 키 값으로 관찰할 수 있습니다.

00:07:21.000 --> 00:07:30.000
AVCaptureDevices는 또한 연결 상태가 변경될 때 알림을 게시하며, 앱은 카메라의 가용성을 모니터링하기 위해 이를 관찰할 수 있습니다.

00:07:30.000 --> 00:07:35.000
시스템은 핵심 가치 관찰 코드를 호출하고 백그라운드 대기열에 알림을 게시합니다.

00:07:35.000 --> 00:07:42.000
따라서 처리를 AVCaptureSession 대기열 및 메인 스레드와 동기화해야 합니다.

00:07:42.000 --> 00:07:48.000
AVCam으로 돌아가서, 외부 카메라의 연결 및 연결 해제 이벤트를 들을 수 있는 코드를 추가할 것입니다.

00:07:48.000 --> 00:07:54.000
앱이 기본 장치를 찾는 후, 카메라가 분리되었을 때 관찰합니다.

00:07:54.000 --> 00:07:58.000
그리고 그런 일이 발생하면, AVCam은 내장 카메라로 전환한다.

00:07:58.000 --> 00:08:02.000
이제 앱이 실행되면, 여전히 외부 카메라를 사용합니다.

00:08:02.000 --> 00:08:10.000
그리고 연결이 끊어지면, 앱은 내장 카메라로 전환됩니다.

00:08:10.000 --> 00:08:18.000
하지만 외부 카메라가 다시 연결되면, AVCam은 전환되지 않습니다.

00:08:18.000 --> 00:08:21.000
AVCam은 작동하는 동안 연결되는 외부 카메라를 어떻게 처리해야 하나요?

00:08:21.000 --> 00:08:25.000
플러그를 꽂은 후에 그걸로 바꿔야 하나요?

00:08:25.000 --> 00:08:31.000
iPad 앱에서 외부 카메라를 채택하는 까다로운 측면은 연결 및 연결 끊김 이벤트를 처리하는 것입니다.

00:08:31.000 --> 00:08:38.000
이것을 더 쉽게 하기 위해, iPadOS는 자동 카메라 선택을 위한 API를 도입하고 있다.

00:08:38.000 --> 00:08:43.000
API를 사용하면 앱이 운영 체제와 통합되어 최고의 카메라를 사용할 수 있습니다.

00:08:43.000 --> 00:08:47.000
그것은 당신의 앱이 카메라를 바꾸는 또 다른 방법입니다.

00:08:47.000 --> 00:08:53.000
macOS Ventura는 연속성 카메라를 지원하기 위해 자동 카메라 선택을 위한 API를 도입했다.

00:08:53.000 --> 00:08:58.000
내가 이 세션에서 설명한 행동은 iOS에만 해당된다.

00:08:58.000 --> 00:09:11.000
Mac용 이 API를 사용하는 방법에 대한 자세한 내용은 2022년의 이전 세션 "macOS 앱에 연속성 카메라 가져오기"와 "마법의 경험 구축" 섹션을 참조하십시오.

00:09:11.000 --> 00:09:23.000
자동 카메라 선택은 iOS의 AVCaptureDevice에 도입된 두 가지 새로운 클래스 속성을 사용하여 작동합니다: userPreferredCamera와 systemPreferredCamera.

00:09:23.000 --> 00:09:27.000
이 두 속성 모두 키-값을 관찰할 수 있다.

00:09:27.000 --> 00:09:33.000
userPreferredCamera는 어떤 카메라를 사용해야 하는지에 대한 사용자의 선택을 나타내는 읽기/쓰기 속성입니다.

00:09:33.000 --> 00:09:37.000
사용자가 앱에서 카메라를 선택할 때마다 설정해야 합니다.

00:09:37.000 --> 00:09:43.000
그렇게 하면 시스템이 사용자의 선호도를 알 수 있다.

00:09:43.000 --> 00:09:50.000
systemPreferredCamera는 시스템에 의해 결정된 대로 사용할 최고의 카메라를 지정하는 읽기 전용 속성입니다.

00:09:50.000 --> 00:10:00.000
기본적으로 시스템은 전면 카메라를 사용할 것을 권장하지만, 대신 후면 카메라를 사용하려면 앱이 시스템에 원하는 동작을 알릴 수 있습니다.

00:10:00.000 --> 00:10:04.000
사용자가 다른 카메라를 선택함에 따라, 권장 사항이 변경됩니다.

00:10:04.000 --> 00:10:08.000
하지만 당신은 시스템이 어떤 카메라가 가장 좋은지 어떻게 알고 있는지 궁금할 것입니다.

00:10:08.000 --> 00:10:09.000
조금 있다가 그것에 뛰어들게.

00:10:09.000 --> 00:10:14.000
먼저 AVCaptureDevice의 userPreferredCamera 속성에 대해 설명하겠습니다.

00:10:14.000 --> 00:10:22.000
이 속성의 경우, 시스템은 출시 및 시스템 재부팅 전반에 걸쳐 각 앱에 대해 선택한 카메라의 짧은 기록을 저장합니다.

00:10:22.000 --> 00:10:29.000
앱을 사용하면 사용자의 기록과 현재 연결된 카메라에 대한 시스템의 지식을 결합할 수 있습니다.

00:10:29.000 --> 00:10:37.000
따라서 카메라의 연결이 끊어지면, 시스템은 사용자의 기록을 기반으로 다음 사용 가능한 카메라를 반환합니다.

00:10:37.000 --> 00:10:49.000
사용자 선택 기록이 없거나 선호하는 카메라가 연결되어 있지 않은 경우, 시스템은 항상 사용할 준비가 된 카메라를 반환하고 이전에 스트리밍된 카메라의 우선 순위를 지정하려고 합니다.

00:10:49.000 --> 00:10:55.000
앱은 이 속성을 사용하여 시스템이 사용자의 카메라 선호도를 저장할 수 있도록 할 수 있습니다.

00:10:55.000 --> 00:11:00.000
AVCaptureDevice의 systemPreferredCamera 속성은 사용하기에 가장 적합한 카메라를 지능적으로 반환합니다.

00:11:00.000 --> 00:11:03.000
먼저 사용자의 선호도를 확인합니다.

00:11:03.000 --> 00:11:09.000
그리고 사용자가 외부 카메라를 iPad에 연결하면, 시스템은 새 장치를 반환합니다.

00:11:09.000 --> 00:11:15.000
이것은 사용자가 새 카메라를 연결할 때, 그들은 그것을 사용하려는 의도를 암시적으로 나타내기 때문이다.

00:11:15.000 --> 00:11:20.000
이 두 입력은 시스템이 선호하는 카메라를 결정한다.

00:11:20.000 --> 00:11:26.000
자동 카메라 선택 API는 앱이 시스템과 통합되는 방법을 선택할 수 있도록 유연하다.

00:11:26.000 --> 00:11:33.000
iPad만 외부 카메라를 지원하지만, iPhone 앱은 사용자가 선호하는 카메라 저장 공간을 위해 API를 사용할 수도 있습니다.

00:11:33.000 --> 00:11:39.000
일부 앱은 사용자가 카메라를 변경할 수 있는 반면, 다른 앱은 전환할 수 있는 방법을 제공하지 않고 카메라를 고수할 수 있다.

00:11:39.000 --> 00:11:45.000
API를 통해 앱은 자동 및 수동 카메라 선택 중에서 선택할 수 있습니다.

00:11:45.000 --> 00:11:52.000
FaceTime, 코드 스캐너 및 WebKit은 필요에 따라 다양한 카메라 선택 동작을 하는 좋은 예입니다.

00:11:52.000 --> 00:11:57.000
FaceTime이 시작되면, 항상 전면 또는 외부 카메라를 사용합니다.

00:11:57.000 --> 00:12:01.000
그리고 통화 중에, 그것은 사용자가 내장 카메라 사이를 전환할 수 있게 해준다.

00:12:01.000 --> 00:12:06.000
하지만 외부 카메라를 사용하면, 카메라 스위치 버튼을 숨깁니다.

00:12:06.000 --> 00:12:17.000
FaceTime은 장치를 전환할 때 userPreferredCamera를 설정하고 외부 장치가 연결되어 있을 때 systemPreferredCamera 속성을 관찰함으로써 이 동작을 가능하게 합니다.

00:12:17.000 --> 00:12:23.000
또한 자동 카메라 선택 API를 사용하는 것이 적절할 때 자체 결정을 내립니다.

00:12:23.000 --> 00:12:32.000
예를 들어, FaceTime 화상 통화에서 후면 카메라를 사용할 수 있지만, 항상 통화 목록을 보여주는 메인 화면의 전면 또는 외부 카메라를 사용합니다.

00:12:32.000 --> 00:12:36.000
제어 센터에서 사용할 수 있는 코드 스캐너는 다른 동작을 가지고 있다.

00:12:36.000 --> 00:12:48.000
그것은 시작할 때 후면 카메라를 사용하며, 사용자가 카메라를 변경할 수는 없지만, systemPreferredCamera 속성을 듣고 알림을 받으면 전환합니다.

00:12:48.000 --> 00:12:53.000
WebKit 프레임워크는 웹 페이지가 iPad의 카메라에 접근할 수 있게 해준다.

00:12:53.000 --> 00:12:59.000
모든 카메라로 전환할 수 있지만, 시스템에서 선호하는 카메라를 목록의 첫 번째 카메라로 반환합니다.

00:12:59.000 --> 00:13:04.000
이제 자동 카메라 선택이 어떻게 작동하는지 보여 주었으니, AVCam에 지원을 추가하겠습니다.

00:13:04.000 --> 00:13:10.000
AVCam은 사진을 찍고 영화를 녹화할 수 있기 때문에 전통적인 사진 앱입니다.

00:13:10.000 --> 00:13:19.000
그것은 각각 통신 및 유틸리티 앱인 FaceTime 및 Code Scanner와 시스템 프레임워크인 WebKit과 다릅니다.

00:13:19.000 --> 00:13:29.000
이제 대체가 있는 외부 카메라를 찾기 위해 일련의 "if, else if" 진술이 필요한 대신, AVCam은 시스템이 선호하는 카메라를 얻기 위해 한 줄만 있으면 됩니다.

00:13:29.000 --> 00:13:35.000
앱이 자동 카메라 선택 API를 사용하는 것은 이번이 처음이기 때문에, 시스템은 내장된 전면 카메라를 반환합니다.

00:13:35.000 --> 00:13:39.000
하지만 AVCam은 후면 카메라로 계속 시작하는 것을 선호한다.

00:13:39.000 --> 00:13:48.000
시스템이 선호하는 카메라를 얻기 전에, 앱은 앱의 사용자 기본값에 저장된 값을 찾아 처음으로 쿼리한 것인지 확인합니다.

00:13:48.000 --> 00:13:54.000
값이 저장되지 않으면, 앱은 자동 카메라 선택에 대한 초기 상태를 설정하지 않은 것입니다.

00:13:54.000 --> 00:14:00.000
그래서 이것이 처음 출시되는 경우, 앱은 사용자가 선호하는 카메라를 후면 장치로 설정합니다.

00:14:00.000 --> 00:14:08.000
이 앱은 제공된 장치 유형을 사용하여 장치 목록을 정렬하는 AVCaptureDeviceDiscoverySession을 사용하여 후면 카메라를 찾습니다.

00:14:08.000 --> 00:14:16.000
그런 다음 사용자가 선호하는 카메라를 설정하고 앱의 사용자 환경 설정에 값을 저장하므로 이 설정은 한 번만 수행합니다.

00:14:16.000 --> 00:14:24.000
외부 카메라의 연결 및 분리를 처리하려면, 더 이상 특정 카메라의 연결 상태를 관찰할 필요가 없습니다.

00:14:24.000 --> 00:14:29.000
대신, AVCam 키 값은 시스템이 선호하는 카메라 속성을 관찰한다.

00:14:29.000 --> 00:14:33.000
이것은 사용 가능한 최고의 카메라로 자동으로 전환할 수 있게 해준다.

00:14:33.000 --> 00:14:39.000
KVO 처리에서, 앱은 새로운 시스템이 선호하는 카메라를 얻고 그것으로 전환한다.

00:14:39.000 --> 00:14:41.000
하지만 AVCam이 녹음 중간에 있다면 어떨까요?

00:14:41.000 --> 00:14:45.000
앱은 카메라를 전환하여 녹화를 방해해서는 안 됩니다.

00:14:45.000 --> 00:14:49.000
그래서 앱은 녹음 중간에 있지 않은 경우에만 전환됩니다.

00:14:49.000 --> 00:14:57.000
그런 다음 영화 녹화가 완료되면, 앱은 현재 사용하고 있는 것과 다른지 확인하기 위해 시스템 선호 카메라를 쿼리합니다.

00:14:57.000 --> 00:15:01.000
시스템이 선호하는 카메라가 바뀌었다면, 앱은 그것으로 전환한다.

00:15:01.000 --> 00:15:04.000
이렇게 하면 녹음을 방해하지 않는다.

00:15:04.000 --> 00:15:10.000
이와 같은 결정은 외부 카메라와 자동 카메라 선택 API를 채택할 때 해야 할 단계입니다.

00:15:10.000 --> 00:15:13.000
당신의 앱에 가장 적합한 것을 하세요.

00:15:13.000 --> 00:15:19.000
AVCam에는 카메라를 전환할 수 있는 버튼이 있으며 전면 및 후면 장치 사이를 변경하여 작동합니다.

00:15:19.000 --> 00:15:24.000
이 iPad Pro에는 두 위치 모두에서 사용할 수 있는 여러 대의 카메라가 있습니다.

00:15:24.000 --> 00:15:29.000
그래서 AVCam은 주어진 위치에서 사용할 카메라를 선택하기 위한 논리를 가지고 있다.

00:15:29.000 --> 00:15:33.000
앱이 외부 카메라를 지원하는 지금 버튼은 어떻게 작동해야 하나요?

00:15:33.000 --> 00:15:37.000
나는 외부 카메라를 정면으로 향하는 것처럼 취급하기로 선택할 것이다.

00:15:37.000 --> 00:15:43.000
이 애플 스튜디오 디스플레이의 카메라는 아이패드의 내장 전면 카메라처럼 나를 마주하고 있다.

00:15:43.000 --> 00:15:50.000
changeCamera 기능에 전환할 특정 장치가 없는 경우, 앱은 현재 장치의 위치를 확인합니다.

00:15:50.000 --> 00:15:59.000
현재 장치의 위치를 확인하는 스위치 문에서, 앱은 현재 지정되지 않은 또는 전면 위치를 가진 카메라를 사용하고 있는 경우 후면 카메라를 찾습니다.

00:15:59.000 --> 00:16:03.000
외부 카메라는 그들의 위치가 불특정하다고 보고한다.

00:16:03.000 --> 00:16:10.000
그리고 앱이 후면 카메라를 사용하는 경우, 사용 가능한 경우 외부 장치로 전환합니다.

00:16:10.000 --> 00:16:14.000
그렇지 않으면, 내장된 전면 카메라로 전환됩니다.

00:16:14.000 --> 00:16:27.000
외부 카메라를 찾기 위해, 앱은 외부 장치 유형, 비디오 미디어 유형 및 지정되지 않은 장치 위치를 사용하여 AVCaptureDeviceDiscoverySession을 만듭니다.

00:16:27.000 --> 00:16:34.000
그런 다음 스위치 문에서 현재 장치의 위치가 돌아왔을 때, 먼저 외부 카메라를 찾습니다.

00:16:34.000 --> 00:16:39.000
그리고 찾을 수 없다면, 내장된 전면 카메라로 전환됩니다.

00:16:39.000 --> 00:16:50.000
그런 다음 앱이 사용하고 싶은 카메라를 찾으면, AVCaptureDevice에서 userPreferredCamera 클래스 속성을 설정하여 선택 시스템을 알려줍니다.

00:16:50.000 --> 00:16:55.000
이 속성을 설정하면 시스템이 사용자의 선호도를 알 수 있습니다.

00:16:55.000 --> 00:17:00.000
앱이 외부 카메라를 지원하는 방법과 사용자가 외부 카메라 사이를 전환할 수 있도록 하는 방법을 선택할 수 있습니다.

00:17:00.000 --> 00:17:09.000
AVCam의 경우, 저는 사용자가 외부 카메라를 전면처럼 취급하여 전면, 후면 및 외부 카메라 사이를 전환할 수 있도록 선택했습니다.

00:17:09.000 --> 00:17:13.000
이렇게 하면, 카메라 스위치 버튼은 두 장치 사이에서만 바뀝니다.

00:17:13.000 --> 00:17:16.000
AVCam은 거의 외부 카메라를 지원할 준비가 되어 있다.

00:17:16.000 --> 00:17:19.000
처리해야 할 측면이 하나 더 있다.

00:17:19.000 --> 00:17:24.000
내가 AVCam을 사용하는 동안, iPad는 오른쪽에 USB-C 포트가 있는 풍경에 장착되었다.

00:17:24.000 --> 00:17:32.000
아이패드를 돌리면, 외부 카메라의 미리보기가 이제 거꾸로 되어 있다.

00:17:32.000 --> 00:17:35.000
하지만 디스플레이의 외부 카메라는 움직이지 않았다.

00:17:35.000 --> 00:17:40.000
그냥 아이패드가 있어.

00:17:40.000 --> 00:17:43.000
하지만 AVCam은 내장 카메라에 이 회전 문제가 없다.

00:17:43.000 --> 00:17:50.000
이것은 앱이 iPad와 독립적인 외부 카메라의 방향을 잡는 방법을 모르기 때문이다.

00:17:50.000 --> 00:17:55.000
AVCam은 외부 카메라의 비디오 미리보기를 제대로 표시하기 위해 추가 수정이 필요합니다.

00:17:55.000 --> 00:18:03.000
다음으로, 라이브 미리보기와 캡처된 사진과 영화가 올바르게 표시되도록 비디오 회전이 왜 중요한지 논의할 것입니다.

00:18:03.000 --> 00:18:06.000
비디오 회전은 카메라 앱의 새로운 개념이 아니다.

00:18:06.000 --> 00:18:12.000
하지만 외부 카메라를 사용할 때, 그들이 iPad와 독립적으로 움직인다는 것을 아는 것이 중요하다.

00:18:12.000 --> 00:18:14.000
앱은 내장 카메라에 사용된다.

00:18:14.000 --> 00:18:22.000
그리고 이 때문에, 그들은 카메라의 비디오를 회전시키고 AVCaptureVideoOrientation 열거형을 사용하기 위해 iPad의 방향에 의존한다.

00:18:22.000 --> 00:18:25.000
이것이 AVCam이 이전 데모에서 하고 있던 것이다.

00:18:25.000 --> 00:18:30.000
그것은 iPad의 방향에 맞게 외부 카메라를 회전시키려고 시도했다.

00:18:30.000 --> 00:18:37.000
iPadOS 17에서 AVCaptureVideoOrientation과 이 열거형을 사용하는 API는 더 이상 사용되지 않습니다.

00:18:37.000 --> 00:18:42.000
그것은 iPad가 어떻게 지향되는지 설명하고 카메라가 장치와 함께 회전한다고 가정한다.

00:18:42.000 --> 00:18:47.000
그것은 독립적으로 움직이는 외부 카메라를 지향하기에 충분하지 않다.

00:18:47.000 --> 00:18:56.000
이 열거형을 사용하기 위해, 앱은 일반적으로 iPad를 설명하고 카메라 방향을 잡기 위한 간접 신호인 UIDeviceOrientation에서 변환됩니다.

00:18:56.000 --> 00:19:00.000
그래서 우리는 비디오 회전을 처리하기 위한 새로운 API를 도입하고 있습니다.

00:19:00.000 --> 00:19:08.000
iPadOS를 포함한 모든 플랫폼의 새로운 AVCaptureDeviceRotationCoordinator 클래스는 모든 카메라의 적절한 방향을 잡는 데 도움을 줄 수 있습니다.

00:19:08.000 --> 00:19:16.000
클래스의 이니셜라이저는 AVCaptureDevice와 선택적으로 카메라의 비디오 미리보기를 표시하는 CALayer를 사용합니다.

00:19:16.000 --> 00:19:22.000
앱은 종종 AVCaptureVideoPreviewLayer 또는 AVSampleBufferDisplayLayer를 사용하여 카메라 미리보기를 표시합니다.

00:19:22.000 --> 00:19:27.000
이 두 가지 모두 CALayer의 하위 클래스이며 이니셜라이저에 전달될 수 있다.

00:19:27.000 --> 00:19:34.000
메탈 또는 다른 렌더링 방법을 사용하는 앱은 카메라의 미리보기를 표시하는 UIView의 레이어를 간단히 전달할 수 있습니다.

00:19:34.000 --> 00:19:43.000
코디네이터는 두 가지 속성을 가지고 있다: 수평선 레벨 미리보기를 위한 비디오 회전 각도와 수평선 레벨 캡처를 위한 별도의 각도.

00:19:43.000 --> 00:19:49.000
이 두 읽기 전용 속성은 각도를 각도로 반환하며 키-값을 관찰할 수 있다.

00:19:49.000 --> 00:20:02.000
콘텐츠 수평선 레벨을 미리 보고 캡처하는 것은 장치가 세로, 가로 또는 거꾸로 되어 있든 상관없이 카메라의 비디오 프레임이 항상 중력에 비해 똑바로 서 있다는 것을 의미합니다.

00:20:02.000 --> 00:20:10.000
videoRotationAngleForHorizonLevelPreview를 사용하여 코디네이터의 이니셜라이저로 전달된 CALayer의 비디오 프레임을 표시하십시오.

00:20:10.000 --> 00:20:14.000
그것은 미리보기를 신청하기 위해 얼마나 많은 회전을 하는지 설명한다.

00:20:14.000 --> 00:20:19.000
각도는 UIKit과 SwiftUI 좌표계와 관련이 있다.

00:20:19.000 --> 00:20:28.000
videoRotationAngleForHorizonLevelCapture를 사용하면 앱이 사진과 영화를 찍을 수 있으므로 나중에 누군가가 볼 때 항상 똑바로 서 있습니다.

00:20:28.000 --> 00:20:32.000
이 속성은 카메라의 물리적 방향을 설명한다.

00:20:32.000 --> 00:20:35.000
그리고 그 가치는 앱이 미리보기에 필요한 각도와 다를 수 있습니다.

00:20:35.000 --> 00:20:38.000
이 두 속성은 다른 목적을 가지고 있다.

00:20:38.000 --> 00:20:43.000
비디오 회전을 설명하기 위해, 내장 카메라를 사용할 때 익숙한 시나리오부터 시작하겠습니다.

00:20:43.000 --> 00:20:49.000
나중에, AVCam을 수정할 때, 이러한 개념이 외부 카메라에 어떻게 적용되는지 설명할 것이다.

00:20:49.000 --> 00:20:56.000
iPhone의 카메라 앱은 수평선 수준의 미리보기와 캡처를 위한 비디오 회전 각도의 차이점을 보여주는 좋은 예입니다.

00:20:56.000 --> 00:21:02.000
후면 카메라의 미리보기를 표시하는 이 앱의 예에서, iPhone은 세로로 되어 있다.

00:21:02.000 --> 00:21:11.000
UIKit 좌표계의 원점은 드로잉 영역의 왼쪽 상단에 있으며, 여기서 양의 x축은 오른쪽으로 확장되고 양의 y축은 아래로 확장된다.

00:21:11.000 --> 00:21:15.000
후면 카메라 센서의 좌표계는 다른 기원을 가지고 있다.

00:21:15.000 --> 00:21:20.000
카메라 센서는 먼저 전화기의 높이를 따라 스캔한 다음 너비를 따라 스캔합니다.

00:21:20.000 --> 00:21:28.000
카메라의 물리적 방향을 설명하기 위해, 앱은 UI에서 미리보기를 위해 카메라의 비디오 프레임을 90도 회전합니다.

00:21:28.000 --> 00:21:33.000
그것은 또한 캡처한 사진과 영화를 회전시키므로, 나중에 볼 때 똑바로 서 있다.

00:21:33.000 --> 00:21:37.000
그것은 아이폰이 풍경에 있을 때 다른 행동을 한다.

00:21:37.000 --> 00:21:42.000
이 앱은 장치의 방향에 관계없이 UI를 세로로만 표시합니다.

00:21:42.000 --> 00:21:45.000
주택 경제성 지표가 어디에 있는지 알 수 있습니다.

00:21:45.000 --> 00:21:50.000
iPhone의 카메라 앱의 경우, 항상 포트 옆에 있습니다.

00:21:50.000 --> 00:22:02.000
UIKit 좌표계의 원원은 여전히 그리기 영역의 왼쪽 상단에 있으며, 이 경우 앱의 UI가 하나의 방향만 지원하기 때문에 장치의 단일 위치에 고정되어 있습니다.

00:22:02.000 --> 00:22:06.000
그리고 후면 카메라 센서의 좌표계는 여전히 UI와 다르다.

00:22:06.000 --> 00:22:15.000
이 앱은 UI를 세로로만 표시하기 때문에, iPhone의 방향에 관계없이 미리보기를 위해 일정한 90도 회전을 적용합니다.

00:22:15.000 --> 00:22:22.000
하지만 미리보기와 달리, 이 앱은 iPhone이 가로에 있을 때 사진과 영화를 찍을 때 다른 양의 회전을 적용합니다.

00:22:22.000 --> 00:22:31.000
iPhone이 카메라 센서의 기본 방향에 있을 때, 앱은 똑바로 나타나기 위해 사진이나 영화를 회전할 필요가 없습니다.

00:22:31.000 --> 00:22:34.000
회전에 대한 이 모든 이야기는 정말 당신의 머리를 회전하게 만든다.

00:22:34.000 --> 00:22:43.000
하지만 AVCaptureDeviceRotationCoordinator는 이러한 복잡성을 처리하고 모든 카메라에서 미리 보고 캡처할 수 있는 올바른 각도를 제공합니다.

00:22:43.000 --> 00:22:48.000
직접 계산하기보다는 각도를 제공하기 위해 그것에 의존하세요.

00:22:48.000 --> 00:22:53.000
앱이 카메라를 전환할 때, 새로운 로테이션 코디네이터를 만드세요.

00:22:53.000 --> 00:23:00.000
비디오 회전을 적용하려면, 코디네이터가 AVCaptureConnection에서 새로운 API로 제공하는 각도를 사용하세요.

00:23:00.000 --> 00:23:05.000
비디오 또는 깊이 미디어 데이터를 제공하는 연결만 회전을 지원합니다.

00:23:05.000 --> 00:23:11.000
연결이 각도를 지원하는지 확인하려면, isVideoRotationAngleSupported 메소드를 호출할 수 있습니다.

00:23:11.000 --> 00:23:17.000
연결이 회전을 수행하도록 하려면, videoRotationAngle 속성을 지원되는 값으로 설정하십시오.

00:23:17.000 --> 00:23:22.000
videoRotationAngleForHorizonLevelPreview를 사용하여 카메라 미리보기를 표시하세요.

00:23:22.000 --> 00:23:31.000
AVCaptureVideoPreviewLayer를 사용하는 앱은 AVCaptureConnection 인스턴스의 videoRotationAngle 속성에 속성 값을 적용할 수 있습니다.

00:23:31.000 --> 00:23:36.000
앱은 CALayer에서 비디오 데이터 출력의 버퍼를 표시할 때도 사용할 수 있습니다.

00:23:36.000 --> 00:23:44.000
시스템 애니메이션과 동기화하려면, 앱의 주요 값 관찰 코드에서 미리보기 회전을 즉시 변경하십시오.

00:23:44.000 --> 00:23:49.000
당신의 앱은 UI를 업데이트하기 위해 메인 큐에서 이 속성에 대한 업데이트를 받을 것으로 예상할 수 있습니다.

00:23:49.000 --> 00:23:54.000
모든 앱이 카메라 미리보기를 표시하기 위해 AVCaptureVideoPreviewLayer를 사용하는 것은 아닙니다.

00:23:54.000 --> 00:24:00.000
일부 앱은 사용자 지정 효과나 필터를 적용할 때 비디오 데이터 출력의 버퍼를 표시합니다.

00:24:00.000 --> 00:24:06.000
사용자 지정 미리보기를 표시하는 한 가지 옵션은 AVSampleBufferDisplayLayer를 사용하는 것입니다.

00:24:06.000 --> 00:24:12.000
비디오 데이터 출력의 AVCaptureConnection의 각도를 설정하여 회전을 요청하지 마십시오.

00:24:12.000 --> 00:24:21.000
연결 각도를 변경하면 캡처 렌더링 파이프라인이 새로운 양의 회전을 적용하기 위해 재구성됨에 따라 프레임 전달이 중단됩니다.

00:24:21.000 --> 00:24:26.000
대신, 카메라 미리보기를 표시하는 CALayer를 회전하세요.

00:24:26.000 --> 00:24:31.000
그렇게 하면 앱의 카메라 미리보기가 원활하게 회전할 수 있습니다.

00:24:31.000 --> 00:24:38.000
사진과 영화가 중력에 비해 수평이 되도록 videoRotationAngleForHorizonLevelCapture를 사용하세요.

00:24:38.000 --> 00:24:45.000
앱은 캡처 연결에 대한 속성 값을 사진 출력 또는 동영상 파일 출력에 적용할 수 있습니다.

00:24:45.000 --> 00:24:54.000
또는, 앱이 사용자 지정 영화를 녹화하기 위해 AVAssetWriter와 함께 비디오 데이터 출력을 사용하는 경우, AVCaptureConnection으로 비디오를 회전하지 마십시오.

00:24:54.000 --> 00:25:03.000
대신, 출력 파일의 메타데이터를 변경하는 AVAssetWriterInput 인스턴스의 변환 속성으로 회전을 설정하십시오.

00:25:03.000 --> 00:25:12.000
이 접근 방식을 통해, 비디오 앱은 재생 중에 회전을 적용하며, 이는 캡처 연결로 각 프레임을 회전하는 것보다 적은 에너지를 사용합니다.

00:25:12.000 --> 00:25:21.000
자산 작성자 입력은 라디안으로 회전을 적용하는 CGAffineTransform을 사용하기 때문에 앱은 회전 각도를 각도에서 변환해야 합니다.

00:25:21.000 --> 00:25:25.000
일부 출력은 오버헤드를 추가하지 않고 효율적으로 회전을 적용한다.

00:25:25.000 --> 00:25:31.000
예를 들어, 동영상 파일 출력은 퀵타임 트랙 매트릭스를 사용하여 회전을 적용합니다.

00:25:31.000 --> 00:25:35.000
사진 출력은 Exif 태그로 방향을 처리합니다.

00:25:35.000 --> 00:25:39.000
그리고 미리보기 레이어는 회전을 수행하기 위해 내용을 변환합니다.

00:25:39.000 --> 00:25:49.000
그러나, 버퍼를 회전시키기 위해 더 많은 메모리와 에너지를 사용하기 때문에 비디오 또는 깊이 데이터 출력이 회전을 수행하는 경우 앱은 장치의 전력 소비를 증가시킬 수 있습니다.

00:25:49.000 --> 00:25:58.000
대신, 앱은 비디오 또는 깊이 출력에서 버퍼를 미리 보는 CALayer를 회전하여 보다 효율적인 접근 방식을 취할 수 있습니다.

00:25:58.000 --> 00:26:06.000
iOS, tvOS 및 macOS를 포함한 사용 가능한 모든 플랫폼에서 AVCaptureDeviceRotationCoordinator를 사용하세요.

00:26:06.000 --> 00:26:10.000
Mac의 Mac Catalyst와 iOS 앱도 사용할 수 있습니다.

00:26:10.000 --> 00:26:17.000
앱은 회전 코디네이터를 사용하여 사진이나 영화를 올바르게 정렬하고 모든 카메라의 비디오 미리보기를 표시할 수 있습니다.

00:26:17.000 --> 00:26:24.000
그리고 그것은 당신의 앱이 스테이지 매니저 또는 외부 디스플레이에 있을 때 복잡한 레이아웃을 처리하는 데 도움을 줍니다.

00:26:24.000 --> 00:26:28.000
이제 AVCam에서 외부 카메라를 지원하기 위한 최종 변경을 할 때입니다.

00:26:28.000 --> 00:26:33.000
캡처 세션을 구성할 때, 앱은 카메라 미리보기를 설정합니다.

00:26:33.000 --> 00:26:40.000
그래서 그것은 앱에 미리보기와 캡처에 필요한 회전 각도를 제공하는 장치 회전 코디네이터를 만듭니다.

00:26:40.000 --> 00:26:47.000
코디네이터를 만들 때, 앱은 미리보기를 위해 현재 회전 각도로 미리보기 레이어를 업데이트합니다.

00:26:47.000 --> 00:26:52.000
그것은 또한 각도의 변화를 관찰하고 미리보기를 업데이트한다.

00:26:52.000 --> 00:27:00.000
AVCam이 장치를 전환할 때, 그것은 또한 새로운 회전 코디네이터를 생성하므로 미리보기는 새 카메라에 적합해 보인다.

00:27:00.000 --> 00:27:07.000
사진을 찍을 때, 앱은 캡처를 위해 회전 각도를 사용하여 누군가가 나중에 볼 때 똑바로 서 있는지 확인합니다.

00:27:07.000 --> 00:27:11.000
그리고 그것은 영화를 녹화할 때도 똑같이 한다.

00:27:11.000 --> 00:27:15.000
이러한 변화로, AVCam은 외부 카메라를 지원할 준비가 되었습니다.

00:27:15.000 --> 00:27:26.000
이제 iPad를 회전하면 외부 카메라가 올바르게 나타납니다.

00:27:26.000 --> 00:27:31.000
우리는 이 세션에서 지금까지 많은 것을 다루었고, 저와 함께 해주셔서 감사합니다.

00:27:31.000 --> 00:27:38.000
이제 iPad 앱이 외부 카메라를 어떻게 사용할 수 있는지 보여줬으니, 이 장치에 포함된 마이크를 어떻게 사용할 수 있는지 논의하겠습니다.

00:27:38.000 --> 00:27:41.000
일부 웹캠과 디스플레이에는 마이크가 포함되어 있습니다.

00:27:41.000 --> 00:27:45.000
iPad에 연결되면, 앱에서 사용할 수 있습니다.

00:27:45.000 --> 00:27:50.000
iPadOS 17은 USB-C가 장착된 iPad의 외부 마이크에 대한 지원을 개선했습니다.

00:27:50.000 --> 00:27:59.000
코어 오디오의 AUVoiceIO 오디오 장치를 사용하는 텔레포니 앱은 이제 웹캠이나 디스플레이에 포함된 것과 같은 외부 마이크를 사용할 수 있습니다.

00:27:59.000 --> 00:28:04.000
이전에는 이 앱들이 사용할 수 있는 유일한 외부 유선 장치는 헤드셋 마이크였다.

00:28:04.000 --> 00:28:12.000
AUVoiceIO는 에코 캔슬링을 수행하기 때문에 인기 있는 인터페이스이며, 외부 마이크를 위한 새로운 튜닝이 도입되었다.

00:28:12.000 --> 00:28:23.000
제어 센터에서 사용할 수 있는 음성 격리 모드는 키보드 입력, 마우스 클릭 또는 이웃 어딘가에서 실행되는 리프 블로어와 같은 원치 않는 배경 소음을 제거합니다.

00:28:23.000 --> 00:28:27.000
당신의 앱은 외부 마이크와 함께 이 시스템 기능을 사용할 수 있습니다.

00:28:27.000 --> 00:28:32.000
iOS 오디오 라우팅 시스템은 한 번에 하나의 마이크만 사용할 수 있게 해준다.

00:28:32.000 --> 00:28:35.000
그것은 또한 마지막으로 연결된 마이크로 자동으로 바뀝니다.

00:28:35.000 --> 00:28:43.000
이것은 카메라를 연결할 때와 마찬가지로 사용자가 새로 연결된 마이크를 사용해야 한다고 나타내기 때문입니다.

00:28:43.000 --> 00:28:47.000
iOS에서, 시스템은 마이크에 대해 하나의 AVCaptureDevice만 반환합니다.

00:28:47.000 --> 00:28:59.000
오디오 미디어 유형이나 새로운 마이크 장치 유형으로 장치를 검색하여 찾을 수 있습니다. 모든 마이크가 iPad에 내장되어 있는 것은 아니기 때문에 내장 마이크를 더 이상 사용하지 않습니다.

00:28:59.000 --> 00:29:05.000
오디오 라우팅 시스템은 내장 또는 외부에서 사용할 수 있는 마이크를 결정합니다.

00:29:05.000 --> 00:29:13.000
시스템이 입력 경로를 변경하면, 마이크 AVCaptureDevice의 localizedName 속성은 사용 중인 장치를 반영하도록 변경됩니다.

00:29:13.000 --> 00:29:17.000
당신의 앱은 AVAudioSession을 사용하여 마이크를 더 잘 제어할 수 있습니다.

00:29:17.000 --> 00:29:22.000
카테고리나 모드를 설정하여 앱의 오디오 동작을 구성하는 데 사용할 수 있습니다.

00:29:22.000 --> 00:29:29.000
그리고 선호하는 입력을 설정하여 외부 카메라에 포함된 것과 같은 특정 마이크를 사용하도록 선택할 수 있습니다.

00:29:29.000 --> 00:29:37.000
이 세션의 마지막 주제를 위해, 외부 카메라를 사용할 때 앱에 대한 몇 가지 모범 사례에 대해 논의하겠습니다.

00:29:37.000 --> 00:29:40.000
채택을 시작할 때, 앱에 가장 적합한 것이 무엇인지 고려하세요.

00:29:40.000 --> 00:29:46.000
이전에, 나는 FaceTime, Code Scanner 및 WebKit이 어떻게 외부 카메라를 다르게 지원하기로 선택했는지 보여주었다.

00:29:46.000 --> 00:29:50.000
앱이 채택할 수 있는 다양한 방법의 예로 사용하세요.

00:29:50.000 --> 00:29:57.000
USB-C 포트가 외부 카메라에서 사용되는 동안 Xcode로 무선 디버깅을 위해 iPad를 구성하십시오.

00:29:57.000 --> 00:30:02.000
앱이 내장 카메라에서 기대할 수 있는 일부 기능은 외부 장치에서 지원되지 않을 수 있습니다.

00:30:02.000 --> 00:30:10.000
예를 들어, 앱이 일부 기능을 위해 깊이 데이터 캡처에 의존하는 경우, 외부 카메라를 사용할 때 비활성화해야 할 수도 있습니다.

00:30:10.000 --> 00:30:18.000
AVCaptureMultiCamSession과 동시에 여러 카메라를 사용하는 앱은 창의적인 캡처 설정을 위해 외부 카메라를 추가할 수 있습니다.

00:30:18.000 --> 00:30:23.000
iPadOS는 외부 카메라에 전면 카메라에도 적용되는 몇 가지 치료법을 제공한다.

00:30:23.000 --> 00:30:27.000
AVCaptureVideoPreviewLayer는 기본적으로 외부 카메라를 미러링합니다.

00:30:27.000 --> 00:30:31.000
이것은 카메라가 iPad 사용자를 마주하고 있을 때 잘 작동한다.

00:30:31.000 --> 00:30:33.000
하지만 이것은 모든 사용 사례에 적합하지는 않습니다.

00:30:33.000 --> 00:30:42.000
앱의 사용자가 HDMI 스위처에서 스트리밍하거나 외부 카메라를 멀리 가리키는 경우, 사용자가 미리보기 미러링을 비활성화할 수 있도록 허용하는 것을 고려하십시오.

00:30:42.000 --> 00:30:45.000
이전 섹션에서, 나는 카메라 회전에 대해 설명했다.

00:30:45.000 --> 00:30:55.000
앱이 외부 카메라에 비디오 회전을 적용할 필요는 없지만, 그렇게 하면 시스템이 외부 카메라를 직면한 장면을 향해 시계 방향으로 회전한다는 점에 유의하십시오.

00:30:55.000 --> 00:31:00.000
이것은 내장 카메라에 회전을 적용하는 것과 같은 방식이다.

00:31:00.000 --> 00:31:04.000
다양한 기능을 가진 카메라를 다룰 수 있도록 앱을 준비하세요.

00:31:04.000 --> 00:31:14.000
예를 들어, 일부 외부 카메라는 VGA 포맷 640x480과 HD 포맷 1280x720과 같은 두 가지 포맷만 보고할 수 있습니다.

00:31:14.000 --> 00:31:18.000
그리고 일부 외부 카메라는 일반적으로 iOS에서 사용되지 않는 픽셀 형식을 지원합니다.

00:31:18.000 --> 00:31:24.000
우리는 이것들을 iOS 카메라 앱이 처리하는 데 사용되는 더 일반적인 형식으로 변환하기로 결정했습니다.

00:31:24.000 --> 00:31:30.000
Yuvs와 2vuy와 같은 압축되지 않은 형식은 420v로 변환됩니다.

00:31:30.000 --> 00:31:36.000
그리고 스트리밍 JPEG와 H264와 같은 압축 포맷은 420f로 변환됩니다.

00:31:36.000 --> 00:31:43.000
외부 카메라는 모든 크기의 형식을 가질 수 있기 때문에, 모든 AVCaptureSessionPresets를 지원하지 않을 수 있습니다.

00:31:43.000 --> 00:31:49.000
예를 들어, HD 4K 프리셋은 장치가 호환 가능한 형식을 가져야 한다.

00:31:49.000 --> 00:31:56.000
앱은 AVCaptureDevice에서 supportsSessionPreset 메소드를 호출하여 프리셋을 사용할 수 있는지 확인할 수 있습니다.

00:31:56.000 --> 00:32:02.000
앱은 해상도, 프레임 속도 및 줌 팩터 변경을 포함하여 외부 카메라를 구성할 수 있습니다.

00:32:02.000 --> 00:32:08.000
iPadOS는 USB 비디오 클래스 사양에서 사용할 수 있는 제한된 카메라 컨트롤 세트를 지원합니다.

00:32:08.000 --> 00:32:12.000
따라서 AVCaptureDevice의 기능을 문의하세요.

00:32:12.000 --> 00:32:15.000
내가 방금 말한 모든 것을 마무리하자.

00:32:15.000 --> 00:32:28.000
외부 카메라를 발견하고 사용하는 방법, 카메라의 비디오 프레임을 올바르게 회전하는 방법, 외부 마이크 사용, 그리고 마지막으로 앱의 모범 사례를 보여주었습니다.

00:32:28.000 --> 00:32:32.000
iPad 앱에서 외부 카메라를 어떻게 사용하기 시작하는지 보게 되어 기쁩니다.

00:32:32.000 --> 00:32:34.000
고마워, 그리고 네 앱이 잘 되길 바라.

00:32:34.000 --> 23:59:59.000
♪ ♪

