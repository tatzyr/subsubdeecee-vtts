WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
Tu: 안녕하세요, 제 이름은 Tu Nguyen이고, 저는 운동 팀의 엔지니어입니다.

00:00:14.000 --> 00:00:21.000
저는 오늘 동료 Abhiraj와 함께 여기에 있으며, Apple Watch를 위한 맞춤형 운동을 만드는 방법을 안내해 드리겠습니다.

00:00:21.000 --> 00:00:37.000
watchOS 9에서, 우리는 사용자가 이상적인 운동 경험을 만들고 사용자 정의할 수 있도록 운동 앱에 새로운 운동 유형을 도입했습니다: 사용자가 거리, 에너지 또는 시간과 같은 단일 목표로 운동을 수행할 수 있는 목표 기반 운동.

00:00:37.000 --> 00:00:42.000
페이스 또는 속도 전면과 중앙에 초점을 맞추는 페이서 운동.

00:00:42.000 --> 00:00:50.000
트라이애슬론 선수들을 위한 수영 자전거 달리기 운동은 수영, 자전거, 달리기 활동 사이를 원활하게 전환한다.

00:00:50.000 --> 00:00:56.000
그리고 사용자 지정 운동, 사용자 지정 목표와 경고의 조합으로 구성된 단계.

00:00:56.000 --> 00:01:06.000
그래서 iOS 17과 watchOS 10에서, 우리는 이러한 모든 운동 유형을 WorkoutKit이라는 새로운 프레임워크로 가져오고 있습니다.

00:01:06.000 --> 00:01:09.000
WorkoutKit은 새로운 Swift 프레임워크이다.

00:01:09.000 --> 00:01:16.000
사용자가 자신의 앱 내에서 운동 앱에서 만들 수 있는 모든 다양한 운동 유형을 만들고 사용자 정의할 수 있습니다.

00:01:16.000 --> 00:01:22.000
또한 사용자가 수행할 수 있도록 이러한 운동을 운동 앱으로 가져오는 데 도움이 되는 다리이기도 합니다.

00:01:22.000 --> 00:01:28.000
WorkoutKit은 미리보기 UI와 예정된 운동을 동기화할 수 있는 기능을 제공합니다.

00:01:28.000 --> 00:01:35.000
우리는 이 네 가지 운동 유형을 WorkoutKit에 가져오고 있으며, 오늘은 맞춤형 운동에 집중할 것입니다.

00:01:35.000 --> 00:01:44.000
이 세션에서, 우리는 맞춤형 운동을 만들고, 내보내기를 미리 보고, 운동을 예약하는 방법을 살펴볼 것입니다.

00:01:44.000 --> 00:01:47.000
먼저 맞춤 운동을 만드는 데 뛰어들자.

00:01:47.000 --> 00:01:52.000
맞춤 운동은 사용자가 체계적인 방식으로 운동에 집중할 수 있는 좋은 방법입니다.

00:01:52.000 --> 00:01:57.000
그것들은 운동을 통해 사용자를 안내하는 일련의 뚜렷한 단계를 포함한다.

00:01:57.000 --> 00:02:00.000
맞춤 운동을 볼 때, 세 가지 뚜렷한 단계가 있다.

00:02:00.000 --> 00:02:03.000
먼저, 우리는 운동을 시작할 때 한 걸음이 있다.

00:02:03.000 --> 00:02:05.000
이게 워밍업 단계야.

00:02:05.000 --> 00:02:10.000
다음으로, 우리는 그들만의 단계 조합을 포함하는 반복 가능한 블록의 정렬된 컬렉션을 가지고 있다.

00:02:10.000 --> 00:02:14.000
이 블록들은 운동의 대부분을 대표한다.

00:02:14.000 --> 00:02:19.000
그리고 마지막으로, 우리가 쿨다운 단계라고 부르는 운동이 끝날 때의 단계.

00:02:19.000 --> 00:02:27.000
이제, 워밍업, 쿨다운 또는 반복 가능한 블록 내의 단계이든, 모든 단계에는 두 가지 중요한 속성이 포함되어 있습니다.

00:02:27.000 --> 00:02:31.000
첫째, 모든 단계는 하나의 목표를 포함한다.

00:02:31.000 --> 00:02:34.000
목표는 맞춤 운동 내에서 단계의 진행을 정의한다.

00:02:34.000 --> 00:02:40.000
목표가 완료되면, 맞춤 운동은 다음 단계로 넘어갑니다.

00:02:40.000 --> 00:02:44.000
사용자 지정 운동 내의 단계는 해당되는 경우 시간 또는 거리 목표를 가질 수 있습니다.

00:02:44.000 --> 00:02:50.000
또한 사용자가 수동으로 단계를 진행해야 하는 열린 목표를 설정할 수 있습니다.

00:02:50.000 --> 00:02:54.000
그리고 두 번째로, 모든 단계는 하나의 경고를 포함할 수 있다.

00:02:54.000 --> 00:02:59.000
경고는 사용자에게 현재 성능을 나타내는 특정 메트릭을 알려줍니다.

00:02:59.000 --> 00:03:06.000
예를 들어, 사용자는 심장 박동이 특정 임계값을 넘을 때 경고를 받고 싶을 수 있습니다.

00:03:06.000 --> 00:03:13.000
그리고 우리는 속도, 케이던스, 전력 및 심박수 경보에 대한 지원을 제공하고 있습니다.

00:03:13.000 --> 00:03:18.000
이제 무엇이 단계를 구성하는지 알았으니, 블록을 자세히 살펴봅시다.

00:03:18.000 --> 00:03:23.000
블록에는 작업 단계 또는 복구 단계로 구분되는 단계가 포함되어 있습니다.

00:03:23.000 --> 00:03:32.000
블록 내의 단계는 이전에 본 것처럼 자신의 목표와 경고를 포함하며, 블록 내에서 어떤 순서로든 여러 단계를 수행할 수 있습니다.

00:03:32.000 --> 00:03:34.000
블록은 또한 반복될 수 있다.

00:03:34.000 --> 00:03:39.000
블록을 반복할 반복 횟수를 지정할 수 있습니다.

00:03:39.000 --> 00:03:44.000
이제 이것이 Apple Watch의 운동 경험으로 어떻게 변환되는지 봅시다.

00:03:44.000 --> 00:03:49.000
먼저, 우리는 사용자의 현재 단계가 블록 내의 작업 단계라는 것을 알 수 있다.

00:03:49.000 --> 00:03:55.000
이 단계에는 거리 목표가 있기 때문에, 우리는 0.2마일이 남아 있는 현재 목표 진행 상황을 볼 수 있다.

00:03:55.000 --> 00:03:59.000
이 단계에는 또한 하단에 표시되는 현재 전력에 대한 경고가 있습니다.

00:03:59.000 --> 00:04:05.000
이 단계에 대한 경고를 지정하지 않으면, 사용자의 현재 심박수를 표시합니다.

00:04:05.000 --> 00:04:11.000
그리고 마지막으로, 우리는 또한 다음 단계가 시간 기반 목표를 가진 회복 단계라는 미리보기를 제공합니다.

00:04:11.000 --> 00:04:17.000
단계와 블록으로, 당신은 완전한 맞춤 운동을 구성할 수 있습니다.

00:04:17.000 --> 00:04:31.000
다시 말하지만, 맨 처음에, 우리는 워밍업 단계가 있고, 작업과 회복 단계가 포함된 일련의 반복 가능한 블록이 있으며, 대부분의 시간을 운동에 소비하고, 마지막으로 마지막에 쿨다운 단계가 있습니다.

00:04:31.000 --> 00:04:38.000
이제 제 동료 Abhiraj에게 넘겨서 WorkoutKit으로 자신만의 맞춤 운동을 만드는 방법을 보여드리겠습니다.

00:04:38.000 --> 00:04:42.000
아비라즈: 안녕하세요, 저는 아비라즈입니다. 저는 운동 팀의 엔지니어입니다.

00:04:42.000 --> 00:04:49.000
Tu가 언급했듯이, WorkoutKit을 사용하면 목표, 페이서, 수영-자전거 달리기 및 맞춤 운동을 위한 운동을 만들 수 있습니다.

00:04:49.000 --> 00:04:53.000
맞춤형 야외 사이클링 운동의 예를 들어 봅시다.

00:04:53.000 --> 00:05:02.000
우리는 이 운동을 위한 네 단계가 있을 것이다: 워밍업, 두 개의 반복되는 작업 블록과 회복, 그리고 운동을 끝내기 위한 쿨다운.

00:05:02.000 --> 00:05:05.000
워밍업 단계를 위해, 우리는 열린 목표를 사용할 것이다.

00:05:05.000 --> 00:05:13.000
첫 번째 블록의 경우, 우리는 거리 목표와 속도 경고가 있는 작업 단계와 거리 목표와 심박수 경고가 있는 회복 단계를 가질 것입니다.

00:05:13.000 --> 00:05:16.000
이 블록은 네 번의 반복을 할 것이다.

00:05:16.000 --> 00:05:25.000
두 번째 블록의 경우, 우리는 시간 목표와 전력 경고가 있는 작업 단계와 시간 목표와 심박수 경고가 있는 복구 단계를 가질 것입니다.

00:05:25.000 --> 00:05:32.000
마지막으로, 우리의 쿨다운 단계는 시간 기반 목표를 가질 것입니다. 우리가 이것을 코드로 어떻게 표현할 수 있는지 봅시다.

00:05:32.000 --> 00:05:35.000
워밍업 단계부터 시작합시다.

00:05:35.000 --> 00:05:37.000
먼저, 우리는 WorkoutKit을 가져옵니다.

00:05:37.000 --> 00:05:41.000
우리가 전에 언급했듯이, 우리의 워밍업 단계는 경고 없이 열린 목표를 가지고 있다.

00:05:41.000 --> 00:05:45.000
그래서 이 경우, 우리는 기본 이니셜라이저로 만들 것입니다.

00:05:45.000 --> 00:05:49.000
이 운동의 첫 번째 블록으로 넘어갑시다.

00:05:49.000 --> 00:05:51.000
이 첫 번째 블록에서, 우리는 두 단계가 있을 것이다.

00:05:51.000 --> 00:05:57.000
첫 번째 단계는 거리 목표와 속도 경고가 있는 작업 단계이다.

00:05:57.000 --> 00:06:04.000
우리는 목표와 경고를 나타내기 위해 HKQuantity와 HKUnit를 활용하고 있기 때문에 HealthKit을 여기에 가져와야 합니다.

00:06:04.000 --> 00:06:08.000
우리는 이제 WorkoutGoal을 사용하여 2마일 목표를 설정할 것이다.

00:06:08.000 --> 00:06:13.000
우리는 또한 시속 10마일의 속도를 목표로 이 단계에 속도 경고를 추가합니다.

00:06:13.000 --> 00:06:17.000
먼저 HKQuantity의 페이스 값을 시속 10마일로 만들어 봅시다.

00:06:17.000 --> 00:06:20.000
우리는 이 경고를 만들기 위해 WorkoutAlert를 사용할 것입니다.

00:06:20.000 --> 00:06:31.000
WorkoutAlert를 만들려면, 이 경우 WorkoutAlertTargetType이 필요하며, 이 경우 시속 10마일을 목표로 하고, 이 경우 WorkoutAlertType이 필요합니다.

00:06:31.000 --> 00:06:34.000
그리고 이제 우리는 페이스 WorkoutAlert를 만들 수 있습니다.

00:06:34.000 --> 00:06:42.000
이제, 우리의 작업 단계를 만들기 위해, 우리는 twoMileGoal과 paceAlert와 함께 작업 유형의 BlockStep을 사용할 것입니다.

00:06:42.000 --> 00:06:46.000
이 블록의 두 번째 단계는 회복 단계이다.

00:06:46.000 --> 00:06:52.000
우리는 심박수 구역 1 경보로 회복을 위한 1/2마일 목표를 세울 것입니다.

00:06:52.000 --> 00:06:57.000
그러면 우리는 휴식 유형의 복구 BlockStep을 만들 수 있습니다.

00:06:57.000 --> 00:07:02.000
이제, 우리는 방금 정의한 작업 및 복구 단계로 블록을 만들 수 있습니다.

00:07:02.000 --> 00:07:08.000
이를 위해, 우리는 일련의 단계와 반복이 4로 설정된 IntervalBlock을 사용합니다.

00:07:08.000 --> 00:07:11.000
그리고 그것으로, 우리의 첫 번째 블록이 완성되었다.

00:07:11.000 --> 00:07:14.000
이제 두 번째 블록으로 넘어가자.

00:07:14.000 --> 00:07:17.000
이 블록에는 또한 두 단계가 있다.

00:07:17.000 --> 00:07:22.000
첫 번째 단계는 시간 목표와 전력 경보가 있는 작업 단계이다.

00:07:22.000 --> 00:07:24.000
우리는 2분 골을 세웠다.

00:07:24.000 --> 00:07:31.000
이 작업 블록의 경우, 250~275와트의 범위로 전력 범위 경고를 만들 수 있습니다.

00:07:31.000 --> 00:07:36.000
우리는 유형 범위의 WorkoutTargetType을 만들고 WorkoutAlert를 만듭니다.

00:07:36.000 --> 00:07:42.000
마지막으로, 우리가 방금 만든 목표와 경고를 사용하여 BlockStep을 만듭니다.

00:07:42.000 --> 00:07:45.000
이 블록의 두 번째 단계는 회복 단계이다.

00:07:45.000 --> 00:07:51.000
우리는 심박수 구역 1 경보로 30초 목표를 만듭니다.

00:07:51.000 --> 00:07:54.000
그러면 우리는 회복 단계를 만들 수 있다.

00:07:54.000 --> 00:08:03.000
이제 우리는 2로 설정된 반복으로 방금 정의한 작업 및 복구 단계로 두 번째 블록을 만들 수 있습니다.

00:08:03.000 --> 00:08:06.000
마지막으로, 쿨다운 단계로 넘어가자.

00:08:06.000 --> 00:08:12.000
우리는 쿨다운 단계가 시간 기반 목표를 갖기를 원했기 때문에, 여기서 그것을 만들어 봅시다.

00:08:12.000 --> 00:08:20.000
우리는 유형 시간의 WorkoutGoal을 만들고 그것을 사용하여 목표를 fiveMinuteGoal로 설정한 CooldownStep을 만듭니다.

00:08:20.000 --> 00:08:23.000
이제 모든 것을 합치자.

00:08:23.000 --> 00:08:35.000
지금까지 구축한 모든 것, 워밍업 단계, 블록1, 블록2, 쿨다운 단계를 사용하여 사용자 지정 운동 구성을 만들 수 있습니다.

00:08:35.000 --> 00:08:40.000
우리는 활동 유형을 사이클링과 야외로 설정했다.

00:08:40.000 --> 00:08:47.000
CustomWorkoutComposition의 이니셜라이저의 LocationType 매개 변수는 선택 사항이며, 기본적으로 실외로 설정되어 있습니다.

00:08:47.000 --> 00:08:53.000
이 모든 것을 결합하고 "내 운동"이라는 맞춤 운동을 만들어 봅시다.

00:08:53.000 --> 00:08:58.000
당신은 또한 왜 CustomWorkoutComposition의 이니셜라이저가 시도가 선행되는지 궁금할 수도 있습니다.

00:08:58.000 --> 00:09:01.000
그것은 우리가 구성을 검증하고 있기 때문이다.

00:09:01.000 --> 00:09:05.000
운동 구성을 검증하는 것의 중요성에 대해 논의해 봅시다.

00:09:05.000 --> 00:09:11.000
검증은 일관된 운동 구조를 보장하고 운동 런타임 동안 모든 문제를 방지합니다.

00:09:11.000 --> 00:09:16.000
예를 들어, 거리 목표는 비거리 기반 운동 구성에 사용해서는 안 된다.

00:09:16.000 --> 00:09:23.000
마찬가지로, 페이스 경고는 타원형과 같이 페이스를 지원하지 않는 운동에 적용되어서는 안 됩니다.

00:09:23.000 --> 00:09:33.000
이를 돕기 위해, 우리는 특정 속성, 예, 운동 활동 유형 또는 특정 API를 통해 실행할 때 수행되는 일련의 검증을 가지고 있습니다.

00:09:33.000 --> 00:09:37.000
우리는 또한 추가 작업을 수행하기 위해 WorkoutComposition 래퍼를 만들었습니다.

00:09:37.000 --> 00:09:45.000
예를 들어, 우리는 또한 장치 간에 공유할 수 있는 파일로 운동 구성을 가져오고 내보내는 API를 만들었습니다.

00:09:45.000 --> 00:09:49.000
dataRepresentation을 사용하여 JSON 또는 바이너리로 내보내세요.

00:09:49.000 --> 00:09:55.000
훨씬 더 작은 크기로 컴포지션을 바이너리 형식으로 내보내는 것이 좋습니다.

00:09:55.000 --> 00:10:01.000
그리고 이제 나는 당신이 작곡을 미리 볼 수 있는 방법에 대해 이야기하기 위해 그것을 Tu에게 돌려줄게.

00:10:01.000 --> 00:10:03.000
Tu: 정말 고마워, Abhiraj.

00:10:03.000 --> 00:10:08.000
이러한 API를 활용하여 완전히 맞춤화된 운동을 구축할 수 있는 방법을 보게 되어 기쁩니다.

00:10:08.000 --> 00:10:13.000
이제 운동 구성이 생기면 우리가 무엇을 할 수 있는지 살펴봅시다.

00:10:13.000 --> 00:10:18.000
운동 구성으로, WorkoutKit에서 그들과 함께 할 수 있는 몇 가지 다른 것들이 있습니다.

00:10:18.000 --> 00:10:27.000
먼저, Abhiraj가 앞서 언급했듯이, 공유 및 배포를 위해 .workout 확장자를 가진 파일로 구성을 내보낼 수 있습니다.

00:10:27.000 --> 00:10:35.000
특정 API를 호출할 때 유효성 검사가 자동으로 발생하며, 컴포지션을 내보내는 것이 그러한 예 중 하나입니다.

00:10:35.000 --> 00:10:40.000
우리는 또한 당신이 당신의 구성 내용의 미리보기를 사용자에게 제시할 수 있는 API를 가지고 있습니다.

00:10:40.000 --> 00:10:45.000
이제, 이것은 iOS와 watchOS에서 다른 동작을 가지고 있다.

00:10:45.000 --> 00:10:56.000
iOS에서, 컴포지션에서 미리보기 API를 호출하면, 프로세스 밖 UI가 앱 위에 표시되고 운동 컴포지션의 전체 내용을 표시합니다.

00:10:56.000 --> 00:11:00.000
이 예시에서, 우리는 맞춤형 운동 구성을 가지고 있다.

00:11:00.000 --> 00:11:12.000
제목은 상단에 눈에 띄게 표시되며, 목표와 경고를 포함한 단계와 블록 목록, 사용자가 Apple Watch의 운동 앱에 운동을 직접 저장할 수 있는 옵션이 있습니다.

00:11:12.000 --> 00:11:21.000
이제, watchOS로 전환하면, 미리보기 API를 호출하면 운동 구성의 내용과 함께 운동 앱이 시작됩니다.

00:11:21.000 --> 00:11:28.000
여기에서, 사용자는 즉시 운동을 시작하거나 나중을 위해 저장할 수 있습니다.

00:11:28.000 --> 00:11:33.000
다시 한 번, WorkoutKit으로 이러한 미리보기 옵션을 보여주기 위해 Abhiraj에게 넘겨드리겠습니다.

00:11:33.000 --> 00:11:37.000
Abhiraj: 이제 우리는 훌륭한 운동을 했으니, 사용자가 저장하도록 합시다.

00:11:37.000 --> 00:11:45.000
앞서 논의했듯이, 우리는 WorkoutComposition을 사용하여 검증과 같은 운동에 대한 추가 작업을 수행할 수 있습니다.

00:11:45.000 --> 00:11:49.000
WorkoutComposition을 통해, 우리는 사용자에게 미리보기를 제공할 수 있습니다.

00:11:49.000 --> 00:11:57.000
미리보기 API는 iOS와 watchOS에 최적화되어 사용자가 운동을 미리 보거나, 저장하거나, 시작할 수 있는 편리한 방법을 제공합니다.

00:11:57.000 --> 00:12:04.000
그래서 우리가 이전에 만든 사이클링 운동을 하고 운동 구성으로 포장합시다.

00:12:04.000 --> 00:12:09.000
Tu가 이전에 언급한 모든 운동 유형을 WorkoutComposition과 함께 사용할 수 있습니다.

00:12:09.000 --> 00:12:15.000
이제 workoutComposition에서 presentPreview 기능을 사용하여 미리보기를 제시합시다.

00:12:15.000 --> 00:12:22.000
이 API는 스위프트의 최신 동시성 기능과 함께 작동하도록 설계되었기 때문에 여기에서 작업 블록을 사용합니다.

00:12:22.000 --> 00:12:29.000
앞서 언급했듯이, presentPreview는 실행 중인 플랫폼에 따라 운동 미리보기를 다르게 표시합니다.

00:12:29.000 --> 00:12:31.000
이게 어떻게 작동하는지 보자.

00:12:31.000 --> 00:12:36.000
iOS에서, 이 기능은 앱 상단에 원격 보기를 제공합니다.

00:12:36.000 --> 00:12:42.000
운동과 사용자가 Apple Watch의 운동 앱에 직접 저장할 수 있는 옵션을 보여줍니다.

00:12:42.000 --> 00:12:46.000
"시계에 추가" 버튼은 새로운 운동으로 운동 앱을 업데이트할 것이다.

00:12:46.000 --> 00:12:50.000
미리보기 기능은 Apple Watch에서 다르게 작동합니다.

00:12:50.000 --> 00:12:58.000
앱을 통해 시트를 표시하는 대신, watchOS의 미리보기 기능을 호출하면 운동 미리보기와 함께 운동 앱이 실행됩니다.

00:12:58.000 --> 00:13:02.000
그리고 이제 나는 그것을 Tu에게 돌려서 운동 일정에 대해 이야기할 것이다.

00:13:02.000 --> 00:13:04.000
Tu: 고마워, Abhiraj.

00:13:04.000 --> 00:13:11.000
이러한 미리보기 옵션은 빠른 상호 작용을 위해 사용자 앞에서 단일 운동 구성을 얻는 데 정말 유용합니다.

00:13:11.000 --> 00:13:15.000
하지만 사용자가 일정 기간 동안 수행할 수 있는 운동 모음이 있다면 어떨까요?

00:13:15.000 --> 00:13:30.000
예를 들어, 오늘 사용자를 위해 사이클링이 예정되어 있고, 이번 주 후반에 하이킹, 며칠 후, 골프, 아마도 예정된 휴식, 더 많은 사이클링 전에 예정되어 있다고 가정해 봅시다.

00:13:30.000 --> 00:13:39.000
구성 및 미리보기 API를 사용하여 운동을 운동 앱에 직접 저장할 수 있지만, 이제 사용자는 이러한 모든 운동을 관리하고 언제 완료해야 하는지 기억할 책임이 있습니다.

00:13:39.000 --> 00:13:41.000
그건 별로 확장 가능하지 않아.

00:13:41.000 --> 00:13:48.000
이 전체 과정을 단순화하기 위해, WorkoutKit의 일환으로, 앱은 운동 앱으로 직접 운동을 예약할 수 있습니다.

00:13:48.000 --> 00:13:51.000
그게 어떻게 생겼는지 보자.

00:13:51.000 --> 00:13:57.000
운동을 예약할 때, 앱에는 운동 앱 상단에 전용 공간이 있습니다.

00:13:57.000 --> 00:14:05.000
이 전용 공간은 앱의 아이콘과 이름과 그날의 다음 운동의 미리보기로 스타일이 지정됩니다.

00:14:05.000 --> 00:14:10.000
여기를 탭하면 표시된 예정된 운동이 즉시 시작됩니다.

00:14:10.000 --> 00:14:17.000
줄임표를 탭하면 동기화한 예정된 운동을 포함하여 더 많은 세부 사항이 표시됩니다.

00:14:17.000 --> 00:14:22.000
운동을 예약하려면 사용자의 허가가 필요하며, 동기화는 로컬에서 처리됩니다.

00:14:22.000 --> 00:14:28.000
사용자는 다음 7일과 지난 7일 동안 예정된 운동을 볼 수 있다.

00:14:28.000 --> 00:14:36.000
한 번에 최대 15개의 운동을 동기화할 수 있으며, 사용자가 앱에서 완료한 예정된 운동을 쿼리할 수 있습니다.

00:14:36.000 --> 00:14:45.000
예정된 운동을 쿼리할 때, 그들은 당신이 만든 구성, 예정된 날짜, 그리고 사용자가 운동을 완료했는지 여부만 포함합니다.

00:14:45.000 --> 00:14:47.000
그들은 어떠한 건강 데이터도 포함하지 않는다.

00:14:47.000 --> 00:14:54.000
따라서 완료된 운동에서 실제 건강 통계를 원한다면, HealthKit API를 참조하십시오.

00:14:54.000 --> 00:15:02.000
그리고 WorkoutKit의 일환으로, 우리는 가능한 경우 운동 구성을 검색하기 위해 HKWorkout에 대한 확장을 제공하고 있습니다.

00:15:02.000 --> 00:15:08.000
이제 Abhiraj에게 넘겨서 WorkoutKit을 사용하여 운동을 예약하는 방법을 보여드리겠습니다.

00:15:08.000 --> 00:15:09.000
Abhiraj: 고마워, Tu.

00:15:09.000 --> 00:15:18.000
앱이 사용자를 위해 운동을 예약하기 위해, 우리는 운동 앱 내에서 사용하기 위해 운동 구성을 Apple Watch와 동기화하는 것을 지원하는 일련의 API를 제공하고 있습니다.

00:15:18.000 --> 00:15:22.000
실제로 WorkoutKit API를 활용하는 앱을 만들어 봅시다.

00:15:22.000 --> 00:15:27.000
예정된 날짜를 운동 구성과 연결한 다음 동기화해야 합니다.

00:15:27.000 --> 00:15:29.000
어떻게 하는지 보여줄게.

00:15:29.000 --> 00:15:34.000
저는 WorkoutKit API와 상호 작용할 수 있는 자리 표시자가 있는 앱을 만들기 시작했습니다.

00:15:34.000 --> 00:15:38.000
이 기능을 만들기 위해 WorkoutKit을 어떻게 활용할 수 있는지 봅시다.

00:15:38.000 --> 00:15:43.000
운동을 운동 앱과 동기화하기 전에, 사용자로부터 허가를 받아야 합니다.

00:15:43.000 --> 00:15:49.000
WorkoutPlan에서 authorizationState에 전화하여 앱의 현재 권한을 확인할 수 있습니다.

00:15:49.000 --> 00:15:57.000
아직 허가를 요청하지 않았기 때문에, WorkoutPlan에서 requestAuthorization에 전화하여 사용자에게 승인을 요청할 수 있습니다.

00:15:57.000 --> 00:16:02.000
나는 "승인 요청" 버튼을 탭할 것이다.

00:16:02.000 --> 00:16:08.000
requestAuthorization()을 호출할 때, 사용자에게 동기화를 선택하라는 경고 메시지가 표시됩니다.

00:16:08.000 --> 00:16:16.000
사용자는 iOS의 Watch 앱과 watchOS의 설정 앱에서 운동 설정에서 이 설정을 변경할 수도 있습니다.

00:16:16.000 --> 00:16:22.000
이제 앱을 승인했으므로, Apple Watch의 운동 앱에서 현재 운동 계획을 얻을 수 있습니다.

00:16:22.000 --> 00:16:27.000
WorkoutPlan.current를 사용하여 WorkoutPlan을 쿼리할 수 있습니다.

00:16:27.000 --> 00:16:33.000
WorkoutPlan은 앱에서 예정된 운동을 저장하고 수정할 수 있는 인터페이스입니다.

00:16:33.000 --> 00:16:38.000
나는 "운동 계획 받기" 버튼을 탭할 거야.

00:16:38.000 --> 00:16:44.000
우리는 아직 어떤 운동도 계획하지 않았기 때문에, 그 계획에는 예정된 운동이 없다.

00:16:44.000 --> 00:16:47.000
다음으로, 몇 가지 운동을 만들고 일정을 잡자.

00:16:47.000 --> 00:16:51.000
나는 오늘 골프를 치러 가고 싶고 이번 주 후반에 자전거 타러 가고 싶어.

00:16:51.000 --> 00:16:56.000
그래서 새로운 운동 구성으로 그 일정을 만들자.

00:16:56.000 --> 00:17:02.000
ScheduledWorkoutComposition 객체는 운동 구성, 예정된 날짜 및 완료 상태를 포함합니다.

00:17:02.000 --> 00:17:09.000
나는 오늘 내일 모레 골프 예정일과 사이클링 예정일을 배정했다.

00:17:09.000 --> 00:17:11.000
그게 내 앱에서 어떻게 보이는지 보자.

00:17:11.000 --> 00:17:18.000
보시다시피, 저는 오늘 골프 운동이 예정되어 있고 며칠 후에 자전거 운동이 있습니다.

00:17:18.000 --> 00:17:23.000
이제 일정을 만들었으니, 운동 앱과 동기화해 봅시다.

00:17:23.000 --> 00:17:29.000
현재 운동 계획을 사용하여, 우리는 이 새로운 예정된 운동을 예정된 구성 배열에 추가할 것입니다.

00:17:29.000 --> 00:17:35.000
마지막으로, 이러한 운동을 운동 앱에 추가하려면, 우리는 workoutPlan.save()라고 부릅니다.

00:17:35.000 --> 00:17:40.000
이것이 어떻게 작동하는지 봅시다.

00:17:40.000 --> 00:17:44.000
좋아. 이제 이 운동들은 동기화되었다.

00:17:44.000 --> 00:17:50.000
Tu가 언급했듯이, 운동을 예약할 때, 앱은 운동 앱 상단에 전용 공간이 있습니다.

00:17:50.000 --> 00:17:52.000
그게 어떻게 생겼는지 자세히 알아보자.

00:17:52.000 --> 00:17:56.000
운동 앱을 열자.

00:17:56.000 --> 00:18:00.000
보시다시피, 제 앱의 아이콘과 이름이 있습니다.

00:18:00.000 --> 00:18:05.000
오늘 골프 운동이 예정되어 있기 때문에, 여기를 탭하면 운동이 시작됩니다.

00:18:05.000 --> 00:18:10.000
다가오는 일정을 보려면 줄임표를 탭할 수 있습니다.

00:18:10.000 --> 00:18:14.000
첫 번째 화면에서, 나는 오늘 예정된 모든 운동을 본다.

00:18:14.000 --> 00:18:21.000
"더 보기"를 탭하면 다음 7일과 지난 7일 동안 예정된 운동을 볼 수 있습니다.

00:18:21.000 --> 00:18:28.000
여기서 나는 오늘의 골프 운동과 내가 이전에 동기화한 다가오는 사이클링 운동을 모두 볼 수 있다.

00:18:28.000 --> 00:18:35.000
이제 예정된 운동이 어떻게 표시되는지, 그리고 앱이 어떻게 운동 앱 내부에 전용 공간을 가질 수 있는지 이해할 수 있습니다.

00:18:35.000 --> 00:18:37.000
너도 알다시피, 나는 오늘 골프 라운드가 계획되어 있어.

00:18:37.000 --> 00:18:41.000
내 티 타임이 곧이야.

00:18:41.000 --> 00:18:47.000
그래서 네가 괜찮다면, 내가 바로 돌아올게.

00:18:47.000 --> 00:18:48.000
나 돌아왔어.

00:18:48.000 --> 00:18:52.000
나는 멋진 골프 라운드를 했고 백 9에서 72를 쐈다.

00:18:52.000 --> 00:18:57.000
사용자가 운동 앱에서 예정된 운동을 완료하면, 완료 상태가 업데이트됩니다.

00:18:57.000 --> 00:19:02.000
WorkoutPlan.current를 사용하여 WorkoutPlan을 쿼리하여 어떤 운동이 완료되었는지 확인할 수 있습니다.

00:19:02.000 --> 00:19:10.000
앱에서 운동이 완료된 것으로 표시된 경우, 사용자가 모든 곳에서 최신 정보를 가지고 있는지 확인하기 위해 완료 상태를 업데이트해야 합니다.

00:19:10.000 --> 00:19:13.000
우리 코드로 돌아가자.

00:19:13.000 --> 00:19:17.000
샘플 앱에서 예정된 구성이 완료되었는지 확인할 수 있습니다.

00:19:17.000 --> 00:19:21.000
만약 그렇다면, 우리는 그것을 완료로 표시하고 있다.

00:19:21.000 --> 00:19:24.000
이것이 실제로 실행되는지 봅시다.

00:19:24.000 --> 00:19:29.000
앱을 운동 앱과 동기화하는 것은 좋은 연습이다.

00:19:29.000 --> 00:19:37.000
이제 인증 요청부터 컴포지션 동기화, 운동 앱에 이르기까지 운동 일정 API를 구현하는 방법에 대한 기본적인 이해를 갖게 되었습니다.

00:19:37.000 --> 00:19:39.000
그것으로, 나는 그것을 Tu에게 돌려줄 것이다.

00:19:39.000 --> 00:19:43.000
Tu: 고마워요, Abhiraj, 그리고 당신이 골프 게임을 개선하는 것을 보게 되어 반갑습니다.

00:19:43.000 --> 00:19:50.000
따라서 앱에서 WorkoutKit을 채택할 때 명심해야 할 몇 가지 모범 사례로 마무리합시다.

00:19:50.000 --> 00:19:56.000
사용자에게 표시하고 싶은 운동 경험에 가장 적합한 구성 유형을 고려하세요.

00:19:56.000 --> 00:20:05.000
우리는 특히 운동이 사용자 지정 목표와 경고와 함께 다른 수준의 노력과 주의가 필요할 때 사용자 지정 운동이 매우 유용한 구성 유형이라는 것을 알았습니다.

00:20:05.000 --> 00:20:09.000
그러나, 수영은 맞춤 운동으로 지원되지 않는다.

00:20:09.000 --> 00:20:12.000
대신 목표 구성을 사용해야 할 것입니다.

00:20:12.000 --> 00:20:16.000
또한, 알림은 맞춤 운동에서만 사용할 수 있습니다.

00:20:16.000 --> 00:20:23.000
30분 달리기와 같은 간단한 것에 대해 자신만의 경고를 지정할 필요가 없다면, 대신 목표나 페이서 구성을 사용하는 것을 고려해 보세요.

00:20:23.000 --> 00:20:27.000
운동 구성의 검증을 반드시 처리하세요.

00:20:27.000 --> 00:20:34.000
우리는 당신이 비호환성이나 오류의 원인을 정확히 찾아낼 수 있도록 매우 세분화된 검증 오류를 제공합니다.

00:20:34.000 --> 00:20:38.000
이미 잘 알고 계시겠지만, 모든 활동 유형이 거리를 지원하는 것은 아니다.

00:20:38.000 --> 00:20:41.000
대신 시간이나 열린 목표를 사용하는 것을 고려해 보세요.

00:20:41.000 --> 00:20:46.000
그리고 모든 활동 유형이 사용자 지정 운동에서 특정 경고를 지원하는 것은 아니다.

00:20:46.000 --> 00:20:50.000
심박수 구역 경보와 같은 대안을 고려해 보세요.

00:20:50.000 --> 00:20:53.000
예정된 운동을 최신 상태로 유지하세요.

00:20:53.000 --> 00:20:58.000
앱이 그렇게 해야 할 수도 있는 포그라운드 또는 백그라운드 런타임을 활용하세요.

00:20:58.000 --> 00:21:01.000
그리고 마지막으로, 우리에게 당신의 피드백을 보내주세요.

00:21:01.000 --> 00:21:03.000
API를 사용해 보세요.

00:21:03.000 --> 00:21:08.000
오늘 본 모든 샘플 코드는 developer.apple.com에서 확인할 수 있습니다.

00:21:08.000 --> 00:21:13.000
또한, 운동 세션 동기화에 대한 HealthKit 세션을 확인하는 것을 잊지 마세요.

00:21:13.000 --> 00:21:14.000
봐줘서 고마워.

00:21:14.000 --> 23:59:59.000
♪ ♪

