WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 ♪

00:00:03.000 --> 00:00:10.000
♪

00:00:10.000 --> 00:00:13.000
댄 골든: 안녕하세요, 저는 접근성 팀의 댄입니다.

00:00:13.000 --> 00:00:19.000
저는 제 동료 드류와 함께 공간 컴퓨팅의 접근성에 대해 이야기하게 되어 기쁩니다.

00:00:19.000 --> 00:00:26.000
이 강연에서, 이 플랫폼에서 사용할 수 있는 접근성 기능에 대한 개요를 알려드리겠습니다.

00:00:26.000 --> 00:00:34.000
다음으로, 시각 장애가 있거나 시력이 낮은 사람들을 지원하기 위해 앱에서 할 수 있는 몇 가지 세부 사항에 대해 자세히 알아보겠습니다.

00:00:34.000 --> 00:00:42.000
그런 다음, 나는 공간 컴퓨팅에서 운동, 인지 및 청각 접근성에 대해 논의하기 위해 드류에게 그것을 넘겨줄 것이다.

00:00:42.000 --> 00:00:44.000
시작하자!

00:00:44.000 --> 00:00:48.000
우리는 모두를 위해 이 몰입형 플랫폼을 설계했습니다.

00:00:48.000 --> 00:01:00.000
공간 컴퓨팅 경험은 종종 놀라운 시각적 기능과 다양한 손 입력으로 구축되지만, 그것이 그들과 소통하기 위해 비전이나 신체적 움직임이 필요하다는 것을 의미하지는 않는다.

00:01:00.000 --> 00:01:11.000
사실, 이러한 경험은 시각 장애가 있거나 시력이 낮거나, 이동성이 제한적이거나, 사지 차이가 있는 사람들에게 믿을 수 없을 정도로 영향을 미칠 가능성이 있다.

00:01:11.000 --> 00:01:19.000
예를 들어, 시각장애인은 디스플레이에 있는 것을 볼 필요 없이 현실 세계와 상호 작용할 수 있다.

00:01:19.000 --> 00:01:27.000
따라서, 모든 사람이 즐기고 혜택을 받을 수 있도록 앱을 구축할 때 모든 능력을 가진 사람들을 염두에 두는 것이 중요합니다.

00:01:27.000 --> 00:01:40.000
애플에서, 우리는 기술에 대한 접근이 기본적인 인권이라는 것을 알고 있으며, 이 플랫폼에는 우리가 1세대 제품에 포함시킨 가장 큰 접근성 기능 목록이 포함되어 있습니다.

00:01:40.000 --> 00:01:48.000
동적 유형 지원, 대비 증가 및 음성 콘텐츠 기능과 같이 이미 알고 사랑하는 많은 기능을 인식할 수 있습니다.

00:01:48.000 --> 00:01:55.000
그리고 우리는 특히 공간 컴퓨팅을 위한 주력 보조 기술을 재창조했습니다.

00:01:55.000 --> 00:02:05.000
우리는 이러한 기능에 대해 매우 흥분하고 있으며, 개발자로서, 당신이 구축하고 있는 경험이 모든 사람을 포함하도록 함으로써 도울 수 있습니다.

00:02:05.000 --> 00:02:11.000
앱에서 시각 장애가 있거나 시력이 낮은 사람들을 지원할 수 있는 방법에 대해 이야기하는 것으로 시작합시다.

00:02:11.000 --> 00:02:19.000
비전 접근성을 논의할 때 고려해야 할 몇 가지 사항이 있습니다: 보이스오버 지원, 시각적 디자인 및 모션.

00:02:19.000 --> 00:02:22.000
VoiceOver 지원에 대해 이야기하는 것으로 시작합시다.

00:02:22.000 --> 00:02:30.000
VoiceOver는 모든 Apple 플랫폼에서 사용할 수 있는 내장 화면 판독기이며, 우리가 이것을 여기에도 가져왔다고 말하게 되어 기쁩니다.

00:02:30.000 --> 00:02:36.000
드류와 나는 ARKit과 RealityKit을 활용하는 Happy Beam이라는 정말 재미있는 앱을 개발하고 있다.

00:02:36.000 --> 00:02:42.000
앱에서, 당신은 심술궂은 구름을 행복하게 만들기 위해 손으로 심장 제스처를 합니다.

00:02:42.000 --> 00:02:48.000
이 앱에서 VoiceOver 경험을 개선할 수 있는 몇 가지 방법을 살펴봅시다.

00:02:48.000 --> 00:03:01.000
우리는 설정 &gt; 접근성 &gt; 접근성 단축키의 접근성 단축키에 VoiceOver를 추가하여 디지털 크라운을 세 번 누를 때마다 VoiceOver가 켜거나 끌 수 있도록 합니다.

00:03:01.000 --> 00:03:05.000
이것은 우리가 앱의 접근성을 테스트할 때 훌륭한 도구입니다.

00:03:05.000 --> 00:03:10.000
앱을 열고 디지털 크라운을 세 번 눌러 VoiceOver를 켜봅시다.

00:03:10.000 --> 00:03:13.000
♪ 미묘한 기악 ♪

00:03:13.000 --> 00:03:14.000
보이스오버: 해피 빔.

00:03:14.000 --> 00:03:17.000
심술궂은 구름을 어떻게 응원할지 선택하세요.

00:03:17.000 --> 00:03:24.000
댄: 이 플랫폼에서, 보이스오버는 다른 손에 다른 손가락 꼬집음을 사용하여 다른 동작을 수행합니다.

00:03:24.000 --> 00:03:29.000
기본적으로, 오른쪽 집게 손가락을 꼬집어 다음 항목으로 초점을 이동할 수 있습니다.

00:03:29.000 --> 00:03:31.000
♪

00:03:31.000 --> 00:03:34.000
VoiceOver: 두 손으로 하트를 만드세요, 버튼.

00:03:34.000 --> 00:03:38.000
핀치 제스처나 호환 가능한 장치, 버튼을 사용하세요.

00:03:38.000 --> 00:03:43.000
댄: 이전 항목으로 초점을 이동하려면, 오른쪽 가운데 손가락을 꼬집으세요.

00:03:43.000 --> 00:03:45.000
VoiceOver: 두 손으로 하트를 만드세요, 버튼.

00:03:45.000 --> 00:03:52.000
댄: 아이템을 활성화하려면, 오른쪽 반지 손가락이나 왼쪽 집게손가락을 꼬집으세요.

00:03:52.000 --> 00:04:00.000
이제 VoiceOver의 기본 컨트롤 중 일부에 익숙해졌으니, 나머지 앱을 살펴봅시다.

00:04:00.000 --> 00:04:03.000
음성 해설: 셋, 둘, 하나.

00:04:03.000 --> 00:04:07.000
해피 빔. 뒤로 버튼. 0점.

00:04:07.000 --> 00:04:11.000
음악을 멈춰, 버튼. 29초 남았어.

00:04:11.000 --> 00:04:14.000
일시 정지, 버튼.

00:04:14.000 --> 00:04:15.000
댄: 여기는 꽤 좋아 보여.

00:04:15.000 --> 00:04:31.000
이 앱은 SwiftUI를 사용하여 구축되므로, 우리가 사용하고 있는 많은 표준 컨트롤에 이미 액세스할 수 있으며, 적절한 접근성 정보가 VoiceOver에 제공되도록 나머지 보기에서 SwiftUI의 접근성 수정자를 채택했습니다.

00:04:31.000 --> 00:04:36.000
더 알아보려면, SwiftUI 접근성에 대한 우리의 대화를 확인하세요.

00:04:36.000 --> 00:04:41.000
나머지 앱을 살펴보고 클라우드와 어떻게 상호 작용할 수 있는지 봅시다.

00:04:41.000 --> 00:04:45.000
음성 해설: 닫기, 버튼. 팝업. 앱 배치 바.

00:04:45.000 --> 00:04:49.000
앱 배치 -- 앱 배치 -- 앱 배치 표시줄.

00:04:49.000 --> 00:04:57.000
댄: 당신이 듣는 그 소리는 VoiceOver가 상호 작용할 다른 항목을 찾을 수 없다는 것을 나타내므로, VoiceOver가 클라우드에 접근할 수 없습니다.

00:04:57.000 --> 00:05:05.000
클라우드는 RealityKit을 사용하여 생성되므로 RealityKit에서 사용할 수 있는 새로운 접근성 구성 요소를 사용하여 이 문제를 해결할 수 있습니다.

00:05:05.000 --> 00:05:12.000
접근성 구성 요소를 사용하면 RealityKit 엔티티에서 접근성 속성을 지정할 수 있습니다.

00:05:12.000 --> 00:05:22.000
접근성 라벨, 값 및 특성뿐만 아니라 사용자 지정 로터, 사용자 지정 콘텐츠 및 사용자 지정 작업을 구성할 수 있습니다.

00:05:22.000 --> 00:05:29.000
활성화 및 조정 가능한 작업과 같은 시스템 접근성 작업을 구성할 수도 있습니다.

00:05:29.000 --> 00:05:42.000
클라우드에 접근할 수 있도록 하려면, 새로운 접근성 구성 요소를 만드는 것으로 시작한 다음, isAccessibilityElement를 true로 설정하여 클라우드가 탐색할 수 있어야 하는 보조 기술을 나타냅니다.

00:05:42.000 --> 00:05:52.000
다음으로, 우리는 스위치 제어 및 음성 제어와 같은 기술이 이 클라우드가 사용자 상호 작용 항목이라는 것을 이해할 수 있도록 클라우드에 버튼 특성을 부여할 것입니다.

00:05:52.000 --> 00:05:59.000
구름이 행복할 때 소리를 연주하기 때문에, 우리는 또한 연극 사운드 특성을 줄 것이다.

00:05:59.000 --> 00:06:07.000
다음으로, 우리는 라벨 속성을 통해 클라우드에 이름과 심술궂거나 행복한 상태를 설명하는 값을 줄 수 있습니다.

00:06:07.000 --> 00:06:14.000
앱의 상태가 업데이트될 때마다, 접근성 구성 요소의 관련 속성을 업데이트해야 합니다.

00:06:14.000 --> 00:06:23.000
여기, isHappy 변수의 didSet 핸들러에서, 우리는 클라우드에서 accessibilityValue를 업데이트하기 위해 편의 속성 중 하나를 사용하고 있습니다.

00:06:23.000 --> 00:06:31.000
편의 속성을 사용할 때마다, 접근성 구성 요소의 대응 속성이 그에 따라 업데이트됩니다.

00:06:31.000 --> 00:06:42.000
라벨과 값은 LocalizedStringResources로 저장되며, 이는 문자열 리터럴을 사용하여 만들 수 있지만 런타임에 제공한 현지화된 값으로 자동으로 해결됩니다.

00:06:42.000 --> 00:06:47.000
마지막으로, 우리는 엔티티 구성 요소 목록에 구성 요소를 설정할 것입니다.

00:06:47.000 --> 00:06:50.000
클라우드에 접근할 수 있어야 하니까 이제 우리 앱을 살펴봅시다.

00:06:50.000 --> 00:06:51.000
♪

00:06:51.000 --> 00:06:54.000
VoiceOver: 앱 pl-- 클라우드, 심술궂다. 버튼.

00:06:54.000 --> 00:07:00.000
댄: 좋아! 우리는 구름으로 이동할 수 있고 그들의 상태는 우리에게 전달된다.

00:07:00.000 --> 00:07:05.000
VoiceOver는 공간 오디오를 사용하여 물체의 위치에 대한 단서를 제공합니다.

00:07:05.000 --> 00:07:08.000
그러니 그것을 행복하게 만들기 위해 우리의 구름 중 하나에서 마음의 몸짓을 해보자.

00:07:08.000 --> 00:07:11.000
♪

00:07:11.000 --> 00:07:13.000
무슨 일이야?

00:07:13.000 --> 00:07:17.000
우리는 방금 그 구름에 너무 많은 사랑을 보여줬지만, 여전히 행복하지 않았다.

00:07:17.000 --> 00:07:23.000
그것은 VoiceOver가 활성화되면, 당신의 앱은 기본적으로 수동 입력을 받지 않기 때문입니다.

00:07:23.000 --> 00:07:32.000
이것은 누군가가 VoiceOver 제스처를 수행하는 동안 앱이 실수로 작업을 수행하지 않도록 하여 안전하게 탐색할 수 있도록 하기 위한 것입니다.

00:07:32.000 --> 00:07:45.000
이 플랫폼에서 VoiceOver에는 새로운 다이렉트 제스처 모드가 포함되어 있으며, 활성화되면 VoiceOver는 표준 제스처를 처리하지 않고 대신 앱이 직접 손 입력을 처리할 수 있도록 합니다.

00:07:45.000 --> 00:07:57.000
사람들은 직접 제스처 모드와 VoiceOver의 기본 상호 작용 모드에서 앱을 실행하도록 선택할 수 있으며, 각 경우에 염두에 두어야 할 접근성 고려 사항이 있습니다.

00:07:57.000 --> 00:08:00.000
VoiceOver의 기본 상호 작용 모드에 대해 이야기하는 것으로 시작합시다.

00:08:00.000 --> 00:08:05.000
VoiceOver를 사용하여 구름을 행복하게 돌릴 수 있도록 활성화 액션을 추가합시다.

00:08:05.000 --> 00:08:11.000
이를 위해, 우리는 accessibilityComponent의 systemActions 속성에 활성화 작업을 추가할 것입니다.

00:08:11.000 --> 00:08:17.000
그런 다음, 우리는 RealityView 내부의 콘텐츠에 대한 활성화 이벤트를 구독할 것입니다.

00:08:17.000 --> 00:08:26.000
콜백에서 활성화 이벤트를 받을 때마다, 관련 클라우드의 상태가 그에 따라 업데이트되도록 게임 모델을 업데이트할 것입니다.

00:08:26.000 --> 00:08:29.000
작업이 추가된 앱을 다시 살펴봅시다.

00:08:29.000 --> 00:08:33.000
VoiceOver: 앱 배치 -- 닫기 -- 클라우드, 심술궂다.

00:08:33.000 --> 00:08:36.000
구름, 심술궂어.

00:08:36.000 --> 00:08:37.000
댄: 멋져!

00:08:37.000 --> 00:08:40.000
이제 우리는 VoiceOver를 사용하여 구름을 행복하게 만들 수 있습니다.

00:08:40.000 --> 00:08:48.000
AccessibilityComponent는 또한 사용자 지정 작업, 사용자 지정 로터 및 사용자 지정 콘텐츠와 같은 추가 API를 제공합니다.

00:08:48.000 --> 00:08:53.000
이것들은 앱의 접근성 경험을 개선하기 위한 훌륭한 도구입니다.

00:08:53.000 --> 00:08:58.000
더 알아보려면, 해당 주제에 대한 우리의 대화를 확인하세요.

00:08:58.000 --> 00:09:02.000
다음으로, 다이렉트 제스처 모드에 대해 이야기해 봅시다.

00:09:02.000 --> 00:09:07.000
이것은 이 플랫폼에서 VoiceOver를 사용하는 동안 앱과 상호 작용하는 새로운 방법입니다.

00:09:07.000 --> 00:09:17.000
VoiceOver의 활성화 동작은 다이렉트 제스처 모드에서 사용할 수 없으므로, 대신 사용할 핸드 입력 상호 작용에 대한 피드백을 제공해야 합니다.

00:09:17.000 --> 00:09:23.000
구름이 나타날 때 발표를 게시하고, 구름과 그들의 세계 배치를 설명하는 것으로 시작합시다.

00:09:23.000 --> 00:09:35.000
이를 위해, 우리는 공지 유형으로 새로운 접근성 알림을 만들고, 말하고 싶은 문자열을 전달한 다음, 공지에서 포스트 기능을 호출할 것입니다.

00:09:35.000 --> 00:09:46.000
공간 경험에서, 어떤 항목을 사용할 수 있고 어디에 있는지에 대한 정보를 제공하는 것이 중요하므로, 이것은 우리 앱에서 중요한 발표가 될 것입니다.

00:09:46.000 --> 00:09:54.000
또한 심장 제스처가 인식되거나 구름이 심술에서 행복으로 바뀔 때마다 공지를 게시합시다.

00:09:54.000 --> 00:10:02.000
무슨 일이 일어나고 있는지, 어떤 상호 작용이 수행되고 있는지 명확하게 알 수 있도록 항상 VoiceOver에 의미 있는 이벤트를 발표하세요.

00:10:02.000 --> 00:10:16.000
예를 들어, 완전히 몰입형 앱에서, 새로운 방이나 환경에 들어갈 때마다, VoiceOver에 대한 컨텍스트의 변경 사항을 발표하고, 세계에서 사용할 수 있는 새로운 항목을 설명하십시오.

00:10:16.000 --> 00:10:20.000
또한 행동이 수행될 때 소리를 활용하는 것을 고려하세요.

00:10:20.000 --> 00:10:31.000
구름이 행복해질 때 해피 빔에서 재생되는 소리는 클라우드의 시각적 변화를 볼 수 없더라도 앱을 재미있고 공간적으로 유지할 수 있는 좋은 방법입니다.

00:10:31.000 --> 00:10:35.000
몇 가지 공지가 추가된 우리 앱을 마지막으로 살펴봅시다.

00:10:35.000 --> 00:10:41.000
게임이 시작되면, 우리는 왼쪽 집게 손가락으로 직접 제스처 모드를 활성화할 것입니다.

00:10:41.000 --> 00:10:48.000
그런 다음, 우리는 구름을 행복하게 만들고 모든 상호 작용에 대한 피드백을 얻기 위해 마음의 제스처를 할 수 있습니다.

00:10:48.000 --> 00:10:52.000
음성 해설: 셋, 둘, 하나.

00:10:52.000 --> 00:10:53.000
해피 빔.

00:10:53.000 --> 00:10:56.000
오른쪽 위와 당신 앞에 있는 세 개의 구름.

00:10:56.000 --> 00:10:58.000
직접 제스처가 활성화되었습니다.

00:10:58.000 --> 00:11:01.000
크라운을 ac-- 캐스팅 빔으로 누르세요.

00:11:01.000 --> 00:11:03.000
♪

00:11:03.000 --> 00:11:05.000
심술궂은 구름이 쳤다.

00:11:05.000 --> 00:11:08.000
빔 숨기기.

00:11:08.000 --> 00:11:09.000
댄: 멋져!

00:11:09.000 --> 00:11:14.000
우리는 그들이 수행되고 있는 모든 상호 작용에 대해 훌륭한 피드백을 받았다.

00:11:14.000 --> 00:11:17.000
우리의 앱은 훌륭한 VoiceOver 지원을 받을 수 있도록 형성되고 있습니다.

00:11:17.000 --> 00:11:26.000
하지만 특히 사용자 지정 구성 요소나 컨트롤을 구축하는 경우 VoiceOver로 앱을 사용하지 않는 시력이 낮은 사람들을 지원하기 위해 할 수 있는 일이 여전히 많습니다.

00:11:26.000 --> 00:11:37.000
다른 모든 Apple 플랫폼과 마찬가지로, 앱이 동적 유형의 변경 사항, 특히 접근성 설정에서 사용할 수 있는 가장 큰 크기에 반응하는지 확인하십시오.

00:11:37.000 --> 00:11:45.000
이러한 더 큰 크기에서 수평이 아닌 수직으로 배치되는 것이 도움이 될 수 있는 UI에 대해 앱을 감사하세요.

00:11:45.000 --> 00:11:52.000
또한 전경색과 배경색 사이에 적어도 4대1 명암비를 사용하고 있는지 확인하세요.

00:11:52.000 --> 00:11:58.000
더 알아보려면, "앱에 시각적으로 접근할 수 있게 만들기"를 확인하세요.

00:11:58.000 --> 00:12:08.000
공간 경험에서, 앵커는 손이나 세계의 특정 위치와 같은 다른 앵커 포인트에 대한 콘텐츠를 배치하는 데 사용될 수 있다.

00:12:08.000 --> 00:12:16.000
또한 가상 카메라에 고정되도록 콘텐츠를 구성하여 디스플레이의 동일한 위치에 표시할 수 있습니다.

00:12:16.000 --> 00:12:29.000
다른 Apple 플랫폼의 Reality Kit의 카메라 앵커에 익숙할 수 있지만, 이 플랫폼에서 콘텐츠는 주위를 둘러볼 때 머리를 따라가며, 시력이 낮은 사람들에게 다르게 영향을 미칠 가능성이 있습니다.

00:12:29.000 --> 00:12:37.000
헤드 앵커는 시력이 낮은 사람들이 콘텐츠에 더 가까이 다가가서 읽거나 세부 사항을 볼 수 있도록 피하고 아껴서 사용해야 합니다.

00:12:37.000 --> 00:12:50.000
또한, 접근성 줌 기능을 사용하는 사람들은 줌 렌즈도 헤드 앵커가 고정되어 있기 때문에 헤드 앵커 콘텐츠를 줌 렌즈 내부에 쉽게 배치할 수 없습니다.

00:12:50.000 --> 00:12:57.000
대신, 월드 앵커를 사용하거나 지연 후 콘텐츠를 게으르게 옮기는 것을 고려해 보세요.

00:12:57.000 --> 00:13:03.000
헤드 앵커를 사용하는 것이 절대적으로 필요한 드문 경우, 콘텐츠를 장식적으로 유지하세요.

00:13:03.000 --> 00:13:09.000
중요한 정보는 머리로 정연된 콘텐츠를 통해서만 접근할 수 없어야 한다.

00:13:09.000 --> 00:13:15.000
앱에서 최고의 주류 경험이 될 수 있는 경우에도 항상 헤드 앵커에 대한 대안을 제공하십시오.

00:13:15.000 --> 00:13:28.000
SwiftUI의 새로운 accessibilityPrefers HeadAnchorAlternative Environment 변수와 접근성 프레임워크의 AX PrefersHeadAnchor Alternative API는 대체 앵커를 언제 사용해야 하는지 알려합니다.

00:13:28.000 --> 00:13:33.000
앱이 헤드 앵커를 사용하는 곳 어디에서나 이러한 API를 관찰하세요.

00:13:33.000 --> 00:13:37.000
우리는 이 API를 시스템에 직접 채택하기 위해 주의를 기울였다.

00:13:37.000 --> 00:13:42.000
기본적으로, 제어 센터는 붕괴된 상태로 고정되어 있다.

00:13:42.000 --> 00:13:49.000
여기서 당신이 주위를 둘러볼 때, 제어 센터가 당신을 따라간다는 것을 알 수 있습니다.

00:13:49.000 --> 00:13:56.000
이 디자인은 어디서나 제어 센터에 쉽게 접근할 수 있게 해주지만, 우리는 그것이 어떤 사람들에게는 어려울 수 있다는 것을 알고 있었다.

00:13:56.000 --> 00:14:00.000
나는 이전에 줌도 헤드 앵커에 있다고 언급했다.

00:14:00.000 --> 00:14:04.000
이것은 시력이 낮은 사람들을 위한 콘텐츠를 확대하는 기능이다.

00:14:04.000 --> 00:14:13.000
줌이 활성화되거나 누군가가 헤드 앵커보다 대안을 선호한다고 표시했을 때, 제어 센터는 Y축에서 자유롭게 움직인다.

00:14:13.000 --> 00:14:22.000
여기서, 당신은 당신이 머리를 기울일 때, 줌 렌즈가 당신의 머리를 따라가는 것을 볼 수 있지만, 제어 센터는 그렇지 않습니다.

00:14:22.000 --> 00:14:26.000
줌 렌즈 내부에 제어 센터를 배치하고 상호 작용할 수 있습니다.

00:14:26.000 --> 00:14:31.000
앱에서 모션 사용을 염두에 두는 것도 중요합니다.

00:14:31.000 --> 00:14:40.000
움직임은 어떤 사람들에게는 어지러울 수 있으며, 헤드셋을 착용하는 것은 미묘한 모션 효과가 사용되는 경우에도 특히 거슬리는 경험이 될 수 있다.

00:14:40.000 --> 00:14:48.000
앱을 통해 사람을 빠르게 움직이거나 튕기거나 파도와 같은 움직임을 포함하는 움직임을 사용하지 마세요.

00:14:48.000 --> 00:14:59.000
줌 애니메이션, 하나 이상의 축을 따라 움직이는 애니메이션, 회전 또는 회전 효과, 지속적인 배경 효과도 모두 피해야 합니다.

00:14:59.000 --> 00:15:04.000
모션 감소가 활성화되면 항상 이러한 유형의 애니메이션에 대한 대안을 제공하십시오.

00:15:04.000 --> 00:15:11.000
SwiftUI의 accessibilityReduceMotion Environment 변수로 Reduce Motion이 활성화되어 있는지 확인할 수 있습니다.

00:15:11.000 --> 00:15:21.000
UIKit에서 UIAccessibility를 쿼리할 수 있습니다. isReduceMotionEnabled, 그리고 해당 알림으로 기본 설정의 변경 사항을 관찰할 수 있습니다.

00:15:21.000 --> 00:15:27.000
앱에서 모션에 적합한 대체품을 찾는 데 어려움이 있다면, 크로스페이드를 활용하는 것을 고려해 보세요.

00:15:27.000 --> 00:15:32.000
다음은 우리가 시스템에서 Reduce Motion을 어떻게 채택했는지에 대한 예입니다.

00:15:32.000 --> 00:15:38.000
물이 배경에서 지속적으로 잔물결을 일으키는 것처럼, 여기 마운트 후드 환경에서 물을 확인하세요.

00:15:38.000 --> 00:15:50.000
우리가 동작 줄이기를 켤 때, 물은 움직임을 사용하지 않고도 비슷한 시각 효과를 달성하는 잔물결 효과를 정적으로 보여주기 위해 변경됩니다.

00:15:50.000 --> 00:16:00.000
그것은 앱에서 시각 접근성을 향상시킬 수 있는 몇 가지 방법에 대한 개요이지만, 운동, 인지 및 청각 접근성에 대해 논의할 때 고려해야 할 사항이 여전히 많습니다.

00:16:00.000 --> 00:16:03.000
그리고 그것을 위해, 여기 당신에게 더 많은 것을 말해줄 드류가 있습니다.

00:16:03.000 --> 00:16:06.000
드류 하스: 고마워, 댄. 정말 잘했어!

00:16:06.000 --> 00:16:11.000
제 이름은 드류 하스이고 접근성 팀의 엔지니어입니다.

00:16:11.000 --> 00:16:27.000
이제 우리는 당신의 공간 경험의 시각적 접근성을 개선하는 의미 있는 방법에 대해 배웠기 때문에, 신체 및 운동 기능, 인지 및 청각에 영향을 미치는 장애가 있는 사람들을 포용할 수 있도록 앱을 만드는 방법에 대해 공유하고 싶습니다.

00:16:27.000 --> 00:16:29.000
먼저 모터로 시작하자!

00:16:29.000 --> 00:16:34.000
기본 입력 시스템은 눈과 손의 조합에 의해 구동된다.

00:16:34.000 --> 00:16:42.000
예를 들어, 눈으로 버튼을 보고 손으로 꼬집으면 버튼을 활성화하기 위한 선택 이벤트가 전송됩니다.

00:16:42.000 --> 00:16:46.000
그러나, 모든 사람이 이러한 물리적 행동을 수행할 수 있는 것은 아니다.

00:16:46.000 --> 00:16:56.000
우리의 접근성 기능은 눈, 손 또는 둘 다 사용에 영향을 미치는 장애가 있는 사람들을 위한 대체 입력 방법을 제공합니다.

00:16:56.000 --> 00:17:04.000
Dwell Control 접근성 기능을 통해 사람들은 손을 사용하지 않고도 UI를 선택하고 상호 작용할 수 있습니다.

00:17:04.000 --> 00:17:10.000
Dwell Control은 탭, 스크롤, 길게 누르기 및 드래그와 같은 제스처를 지원합니다.

00:17:10.000 --> 00:17:18.000
Dwell Control을 사용하는 사람들이 제외되지 않도록 이 제스처 세트로 모든 기능을 갖도록 앱을 설계해야 합니다.

00:17:18.000 --> 00:17:29.000
Dwell Control 메뉴를 사용하여 제스처 모드를 전환하는 것은 산들바람이며, 사람들이 효율성을 희생하지 않고 편의 시설을 사용하여 장치를 작동할 수 있도록 합니다.

00:17:29.000 --> 00:17:36.000
이것은 설계에 의한 것입니다: 사람들이 기본이 아닌 입력을 사용하더라도 마찰 없는 경험을 제공합니다.

00:17:36.000 --> 00:17:45.000
Happy Beam 앱이 Dwell Control을 사용하여 완전히 재생할 수 있도록 다양한 입력을 지원하도록 어떻게 설계되었는지 봅시다.

00:17:45.000 --> 00:17:51.000
해피 빔이 출시되면, 플레이어는 먼저 그 심술궂은 구름을 응원하는 방법을 선택할 것이다.

00:17:51.000 --> 00:17:59.000
당신은 이 세션의 앞부분에서 첫 번째 옵션을 보았습니다: 두 손을 심장 모양으로 사용하고 구름을 겨냥하는 것입니다.

00:17:59.000 --> 00:18:04.000
두 번째 옵션은 키보드와 게임 컨트롤러와 같은 블루투스 액세서리를 지원합니다.

00:18:04.000 --> 00:18:10.000
이 입력을 가지고 놀 때, 행복한 빔은 이 심장 포탑을 사용하여 발사된다.

00:18:10.000 --> 00:18:15.000
터렛은 또한 탭 앤 드래그 제스처에 반응하므로 한 손으로 플레이할 수 있습니다.

00:18:15.000 --> 00:18:20.000
그리고, Dwell Control을 가지고 노는 사람들은 포탑 위에 완전한 기능을 가지고 있다.

00:18:20.000 --> 00:18:26.000
따라서 Happy Beam과 같은 다양한 입력을 지원하기 위해 앱을 계획하고 설계하세요.

00:18:26.000 --> 00:18:31.000
이것은 당신이 실수로 사람들을 배제하지 않도록 하는 가장 좋은 방법입니다.

00:18:31.000 --> 00:18:35.000
Dwell과 정말 잘 작동하는 또 다른 접근성 기능이 있다.

00:18:35.000 --> 00:18:40.000
내가 가장 좋아하는 접근성 기능 중 하나인 포인터 컨트롤을 입력하세요.

00:18:40.000 --> 00:18:49.000
이 기능은 입력 경험을 변화시켜 사람들이 눈을 사용하는 대신 시스템 초점을 제어하기 위해 다른 입력 소스를 사용할 수 있게 해준다.

00:18:49.000 --> 00:18:58.000
눈은 기본값이지만, 여기서 사람들은 머리 위치, 손목 위치 또는 집게 손가락으로 구동되도록 시스템 초점을 변경할 수 있습니다.

00:18:58.000 --> 00:19:06.000
포인터 컨트롤은 헤드 위치를 따르도록 입력 신호를 변경할 수 있기 때문에, 카메라 고정 콘텐츠를 아껴서 사용하는 것을 잊지 마세요.

00:19:06.000 --> 00:19:13.000
이것은 당신이 월드 앵커를 사용하거나 카메라 앵커 콘텐츠에 대한 대안을 제공해야 하는 또 다른 이유입니다.

00:19:13.000 --> 00:19:24.000
Dwell Control과 Pointer Control은 모두 - 자체적으로 또는 기능 세트를 결합하여 - 사람들이 장치와 상호 작용하는 방식에 대한 엄청난 유연성을 제공합니다.

00:19:24.000 --> 00:19:28.000
이러한 기능은 시스템을 사용하기 위한 물리적 요구 사항을 수용한다.

00:19:28.000 --> 00:19:37.000
당신의 앱을 사용하는 누군가가 어떤 종류의 장애를 가질 수 있는지 결코 알 수 없기 때문에, 신체적 상호 작용을 위한 여러 길을 허용하세요.

00:19:37.000 --> 00:19:42.000
공간적 경험은 콘텐츠와 상호 작용하는 새롭고 차원적인 방법을 가능하게 한다.

00:19:42.000 --> 00:19:48.000
스위치 컨트롤에는 세계 공간에서 카메라의 위치를 조정하기 위한 새로운 메뉴 옵션이 있습니다.

00:19:48.000 --> 00:19:54.000
여기서 우리는 새로운 카메라 위치 수정자를 활성화하기 위해 스위치 컨트롤이 있는 키보드를 사용하고 있습니다.

00:19:54.000 --> 00:19:59.000
이것은 당신이 육체적으로 몸을 움직이지 않고 공간적 위치를 아래쪽으로 움직입니다.

00:19:59.000 --> 00:20:04.000
모든 사람이 자신의 환경에서 편안하고 자유롭게 움직일 수 있는 것은 아니다.

00:20:04.000 --> 00:20:16.000
이러한 카메라 위치 옵션은 스위치 제어에 사용할 수 있지만, 사람들이 특정 방식으로 자신을 배치해야 하는 경험이 있다면, 이를 우회할 수 있는 옵션을 제공하십시오.

00:20:16.000 --> 00:20:26.000
다음으로, 저는 인지 접근성과 그들이 정보를 배우고, 기억하고, 처리하는 방식에 영향을 미치는 장애인을 어떻게 지원할 수 있는지에 대해 이야기하고 싶습니다.

00:20:26.000 --> 00:20:34.000
가이드 액세스는 시스템을 단일 앱으로 제한하여 초점을 촉진하는 인지 접근성 기능입니다.

00:20:34.000 --> 00:20:47.000
그것은 다른 앱을 배경으로 하고, 주의를 산만하게 할 수 있는 장식용 UI를 제거하고, 누군가를 경험에서 벗어나게 할 수 있는 하드웨어 버튼 이벤트를 억제함으로써 산만함을 최소화하는 것을 목표로 한다.

00:20:47.000 --> 00:20:57.000
이런 식으로 시스템을 조정할 수 있다는 것은 누군가가 산만하거나 쉽게 빗나가는 방법 없이 현재 작업에 더 쉽게 집중할 수 있게 할 수 있다.

00:20:57.000 --> 00:21:08.000
가이드 액세스를 사용하고 사용자 지정 제한 API를 구현하는 방법에 대해 자세히 알아보려면, 작년의 "접근 가능한 단일 앱 모드 경험 만들기"를 확인하세요.

00:21:08.000 --> 00:21:18.000
인지 접근성을 위한 몇 가지 모범 사례를 따르면, 모든 사람, 특히 장애가 있는 사람들이 앱을 더 쉽게 사용할 수 있습니다.

00:21:18.000 --> 00:21:22.000
어떤 사람들은 앱의 복잡성을 무너뜨리는 데 조금 더 도움이 필요합니다.

00:21:22.000 --> 00:21:29.000
복잡한 손 제스처가 필요한 상호 작용은 사람들이 집어 들고 유지하기 어려울 수 있다.

00:21:29.000 --> 00:21:36.000
SwiftUI와 같은 Apple의 UI 프레임워크를 사용하여 일관되고 친숙한 시각적 경험을 만드는 데 도움을 줄 수 있습니다.

00:21:36.000 --> 00:21:46.000
이것은 동일한 UI 프레임워크를 사용하여 구축된 다른 앱을 사용했을 가능성이 높기 때문에 누군가가 앱을 편안하게 사용해야 하는 시간을 줄여줍니다.

00:21:46.000 --> 00:21:52.000
그리고 마지막으로, 사람들이 시간을 들여 자신을 몰입하고 당신이 제공해야 하는 모든 것을 경험할 수 있도록 하세요.

00:21:52.000 --> 00:21:56.000
경험을 통해 사람들을 서두를 필요가 없다.

00:21:56.000 --> 00:22:06.000
몰입형 콘텐츠는 집중력과 관심을 촉진할 수 있으며, 이는 감각 처리 장애가 있는 사람을 위한 편안한 환경을 만드는 환상적인 방법입니다.

00:22:06.000 --> 00:22:16.000
모든 사람이 같은 속도로 정보를 처리하는 것은 아니므로, 어떤 사람들은 경험을 통해 일하는 것을 선호하거나 약간의 추가 시간이 필요할 수 있다는 것을 기억하십시오.

00:22:16.000 --> 00:22:23.000
마지막으로, 저는 청각 장애가 있거나 난청이 있는 사람들에게 접근과 숙박 시설을 제공하는 가장 좋은 방법을 공유하고 싶습니다.

00:22:23.000 --> 00:22:29.000
사람들을 공간적 경험에 몰입시키는 방법으로 오디오와 음성을 사용하는 것이 일반적이다.

00:22:29.000 --> 00:22:39.000
난청이나 청각 처리 장애가 있는 사람들을 위해, 당신이 할 수 있는 가장 영향력 있는 일 중 하나는 그들이 당신의 콘텐츠에 접근할 수 있도록 양질의 캡션을 제공하는 것입니다.

00:22:39.000 --> 00:22:56.000
편안한 독서 경험은 한 번에 문구를 렌더링하고 읽기 쉬운 팝업 캡션을 사용하여 쉽게 만들 수 있습니다. 롤업 캡션을 사용하는 대신, 단어별로 나타나며 오랜 시간 동안 읽을 때 읽기 피로와 메스꺼움을 유발할 수 있습니다.

00:22:56.000 --> 00:23:01.000
사람들이 장치에서 캡션의 시각적 모양을 사용자 정의할 수 있다는 것을 알고 있었나요?

00:23:01.000 --> 00:23:10.000
캡션은 텍스트 크기, 글꼴 및 색상뿐만 아니라 획 윤곽이나 배경과 같은 것을 수정하여 광범위하게 사용자 정의할 수 있습니다.

00:23:10.000 --> 00:23:16.000
이러한 옵션을 통해 사람들은 캡션을 사용자 정의하여 쉽게 보고 읽을 수 있습니다.

00:23:16.000 --> 00:23:22.000
AVKit과 AVFoundation은 앱에서 캡션을 제공하기 위한 내장 지원을 제공합니다.

00:23:22.000 --> 00:23:27.000
이 프레임워크는 캡션 모양과 시각적 스타일을 자동으로 처리합니다.

00:23:27.000 --> 00:23:35.000
자신의 캡션 시스템을 구현하고 있기 때문에 AVFoundation을 사용하지 않는다면, 알아야 할 두 가지 API가 있습니다.

00:23:35.000 --> 00:23:38.000
먼저, isClosedCaptioningEnabled API.

00:23:38.000 --> 00:23:45.000
이것을 사용하여 누군가가 이미 접근성 설정에서 청각 장애인용 자막을 켰는지 확인하세요.

00:23:45.000 --> 00:23:52.000
앱에 별도의 캡션 설정이 있는 경우, 이 API를 사용하여 캡션의 기본 상태를 알려야 합니다.

00:23:52.000 --> 00:23:57.000
이렇게 하면, 캡션에 의존하는 사람들은 즉시 접근할 수 있다.

00:23:57.000 --> 00:24:05.000
두 번째는 각 스타일 속성에 개별적으로 액세스할 수 있는 API가 있는 미디어 접근성 프레임워크에서 찾을 수 있습니다.

00:24:05.000 --> 00:24:13.000
전체 시스템에서 일관된 읽기 경험을 유지하기 위해 이러한 스타일을 확인하고 캡션에 적용해야 합니다.

00:24:13.000 --> 00:24:18.000
어떤 방식으로 캡션을 제공하든, 당신은 그들의 품질에 대한 높은 기준을 가져야 합니다.

00:24:18.000 --> 00:24:24.000
캡션은 음악과 음향 효과를 포함한 모든 오디오 콘텐츠를 나타내야 합니다.

00:24:24.000 --> 00:24:37.000
방향성이 당신의 경험에 중요하다면 우주에서 오디오가 어디에서 오는지 나타내는 것도 도움이 되며, 기본적으로 사용자에게 "가장 가까운 오디오 소스가 당신 뒤에 있을 수 있다는 것을 명심하세요"고 말합니다.

00:24:37.000 --> 00:24:44.000
인상적인 접근성 경험은 모든 사람들과 그들의 필요를 고려하는 것에서 나온다.

00:24:44.000 --> 00:24:50.000
엔티티에 접근성 속성을 설정하여 풍부한 RealityKit 경험을 제공하십시오.

00:24:50.000 --> 00:24:58.000
이것은 VoiceOver, Voice Control 및 Switch Control과 같은 기술에 대한 앱의 접근성의 기초입니다.

00:24:58.000 --> 00:25:06.000
모든 플레이어와 그들의 플레이 스타일을 포함하도록 해피 빔에서 본 것처럼 유연하게 신체적 상호 작용을 위한 옵션을 제공하십시오.

00:25:06.000 --> 00:25:21.000
모호함을 제거하고 인지 장애가 있는 사람들에게 명확성과 초점을 제공하기 위해 노력하며, 청각 장애나 난청이 있는 사람들이 당신의 창작물을 즐길 수 있도록 오디오 경험을 위한 캡션 콘텐츠에 시간과 주의를 기울이십시오.

00:25:21.000 --> 00:25:27.000
어디서부터 시작해야 할지 모르겠다면, 이러한 접근성 기능 중 일부를 켜고 앱을 여세요!

00:25:27.000 --> 00:25:31.000
이러한 기능을 직접 시도하는 것은 바로 뛰어들 수 있는 좋은 방법입니다.

00:25:31.000 --> 00:25:42.000
이 플랫폼은 모두를 위해 설계되었으며, 댄과 내가 오늘 공유한 모든 고려 사항과 함께, 당신은 접근 가능하고 포괄적인 공간 경험을 만들 수 있습니다.

00:25:42.000 --> 00:25:43.000
고마워!

00:25:43.000 --> 23:59:59.000
♪

