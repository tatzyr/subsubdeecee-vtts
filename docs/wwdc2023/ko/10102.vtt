WEBVTT

00:00:00.000 --> 00:00:10.000
♪ ♪

00:00:10.000 --> 00:00:14.000
제리: 안녕하세요, 저는 시리와 앱 단축키의 엔지니어링 관리자인 제리입니다.

00:00:14.000 --> 00:00:19.000
오늘, 앱 단축키로 앱을 집중 조명할 수 있는 방법을 공유해드리겠습니다.

00:00:19.000 --> 00:00:27.000
앱이 운영 체제 전체에서 사용할 수 있는 빠르고 습관적인 행동을 만들 수 있도록 앱 단축키를 채택해야 하는 이유를 살펴보는 것으로 시작하겠습니다.

00:00:27.000 --> 00:00:31.000
그런 다음 앱 단축키 구현의 기본 사항을 검토하겠습니다.

00:00:31.000 --> 00:00:40.000
그 후, 앱 단축키를 시각 및 음성 사용 모두에 훌륭하게 만드는 방법과 iOS 17에서 앱 단축키가 개선된 새로운 방법을 살펴볼 것입니다.

00:00:40.000 --> 00:00:48.000
그리고 마지막으로, 앱 단축키가 iPhone을 넘어 여러 Apple 기기에서 확장될 수 있는 새로운 방법을 살펴보겠습니다.

00:00:48.000 --> 00:00:54.000
시작하려면, 앱 단축키를 사용하면 앱의 기능을 쉽게 발견하고 사용할 수 있습니다.

00:00:54.000 --> 00:01:00.000
앱이 설치되자마자 자동으로 사용할 수 있으며 사용자 설정이 필요하지 않습니다.

00:01:00.000 --> 00:01:08.000
iOS 15 이전과 달리, 단축키 앱을 사용하거나 사용하기 전에 Add To Siri 버튼을 사용하여 앱 단축키를 설정할 필요가 없습니다.

00:01:08.000 --> 00:01:13.000
앱 단축키는 트리거 구문 중 하나를 사용하여 Siri에서 실행할 수 있습니다.

00:01:13.000 --> 00:01:25.000
그들은 또한 스포트라이트에서 검색할 때 검색 결과에서 눈에 띄게 등장하며, 강력한 사용자 단축키 및 자동화의 일부가 될 수 있는 단축키 앱에서 찾을 수 있습니다.

00:01:25.000 --> 00:01:37.000
앱 단축키는 시스템 전반에 걸쳐 사용자에게 앱 기능의 가시성을 높이는 데 도움이 될 수 있으며 앱을 열거나 단순히 백그라운드에서 작업을 수행하는 두 기능 모두에 대한 훌륭한 시작 지점이 될 수 있으므로 사용자가 초점을 유지할 수 있습니다.

00:01:37.000 --> 00:01:48.000
그것들은 앱의 핵심 기능을 사용하기 위한 마찰을 낮추는 빠르고 기억에 남는 방법이며, 음성으로 핸즈프리 또는 HomePod로 집에서 사용하는 것을 포함하여 더 많은 컨텍스트에서 사용할 수 있도록 합니다.

00:01:48.000 --> 00:01:56.000
앱의 가장 중요한 기능을 대상으로 하는 기억에 남는 앱 단축키를 사용하면 사람들이 앱을 사용하는 습관을 발견하고, 기억하고, 쌓을 수 있도록 도울 수 있습니다.

00:01:56.000 --> 00:02:03.000
예를 들어, 이 세션 내내, 나는 할 일 목록을 관리하기 위해 "데모"라는 가상의 앱으로 작업할 것이다.

00:02:03.000 --> 00:02:07.000
나는 내 목록을 요약한 새로운 기능을 시스템에 노출시키고 싶다.

00:02:07.000 --> 00:02:14.000
이렇게 하면 단축키를 통해 또는 Siri에게 요청하여 무엇을 해야 할지 빠르게 알 수 있습니다.

00:02:14.000 --> 00:02:17.000
이런 종류의 빠르고 가벼운 기능은 앱 단축키에 완벽하다.

00:02:17.000 --> 00:02:22.000
그들은 사람들이 내 앱에서 필요한 것을 원활하게 얻고 그들의 길을 갈 수 있게 해준다.

00:02:22.000 --> 00:02:34.000
할 일 목록을 요약하기 위한 앱 인텐트를 구현하는 방법을 빠르게 살펴본 다음 앱 바로 가기를 구현하여 사용자가 바로 가기의 구두 명령으로 목록을 요약하고 스포트라이트에서 강조 표시될 수 있도록 할 것입니다.

00:02:34.000 --> 00:02:44.000
앱 단축키는 앱 인텐트 프레임워크로 구축되며, 스위프트 소스 코드에서 바로 훌륭한 인텐트를 더 빠르고 쉽게 구축할 수 있도록 처음부터 구축된 스위프트 전용 프레임워크입니다.

00:02:44.000 --> 00:02:48.000
모든 앱 단축키는 소스 코드에서 의도를 정의하는 것으로 시작됩니다.

00:02:48.000 --> 00:02:57.000
의도는 할 일 목록을 만들거나, 내용을 요약하거나, 항목을 확인하는 것과 같이 앱으로 완료할 수 있는 개별 작업을 나타냅니다.

00:02:57.000 --> 00:03:02.000
앱 인텐트를 만든 후, 앱 바로 가기를 만들 수 있으므로 Spotlight 또는 Siri에서 사용할 수 있습니다.

00:03:02.000 --> 00:03:07.000
이것은 당신의 의도를 필요한 Siri 트리거 구문, 제목 및 기호와 연관시킵니다.

00:03:07.000 --> 00:03:13.000
두 정의를 모두 갖게 되면, 앱이 작동하는지 확인하기 위해 앱을 빌드하고 테스트하기만 하면 됩니다.

00:03:13.000 --> 00:03:16.000
나는 아주 간단한 앱 단축키를 만드는 것으로 시작할 것이다.

00:03:16.000 --> 00:03:22.000
이 앱 단축키를 사용하면 목록 이름을 입력하여 Spotlight 또는 Siri에서 바로 새로운 빈 할 일 목록을 만들 수 있습니다.

00:03:22.000 --> 00:03:29.000
이것을 구현하는 것은 간단한 2단계 과정이 될 것입니다: 앱 의도를 정의하고 앱 단축키를 정의하십시오.

00:03:29.000 --> 00:03:32.000
나는 앱 인텐트 프레임워크를 가져오는 것으로 시작한다.

00:03:32.000 --> 00:03:37.000
그리고 나서 나는 AppIntent 프로토콜을 준수하는 내 의도를 위한 새로운 구조를 구현한다.

00:03:37.000 --> 00:03:44.000
나는 시스템에 의해 호출될 수행 방법에 내 의도의 실제 기능을 포함한다.

00:03:44.000 --> 00:03:48.000
그리고 마지막으로, 저는 AppShortcutsProvider 구조를 구현합니다.

00:03:48.000 --> 00:03:51.000
각 앱은 이 프로토콜을 준수하는 최대 하나의 구조를 가질 수 있다.

00:03:51.000 --> 00:03:56.000
AppShortcutsProvider에서, 내 앱이 지원하는 모든 앱 단축키를 지정할 수 있습니다.

00:03:56.000 --> 00:03:58.000
여기에 목록 만들기 앱 바로 가기를 추가했습니다.

00:03:58.000 --> 00:04:04.000
각 앱 단축키에는 몇 가지 구성 요소가 있습니다: 트리거될 때 호출될 의도.

00:04:04.000 --> 00:04:08.000
이 앱 단축키를 수행하기 위해 Siri가 인식해야 하는 문구.

00:04:08.000 --> 00:04:11.000
앱 단축키 당 이것들 중 여러 개를 가질 수 있습니다.

00:04:11.000 --> 00:04:17.000
짧은 제목과 시스템 이미지 이름이므로, 시스템은 이 앱 단축키를 시각적으로 나타내는 방법을 알고 있습니다.

00:04:17.000 --> 00:04:20.000
그것이 내가 간단한 앱 단축키를 구현하는 데 필요한 전부이다.

00:04:20.000 --> 00:04:28.000
앱을 실행하면 코드에 두 개의 구조체만 생성하여 Siri 또는 단축키 앱에서 바로 할 일 목록을 즉시 만들 수 있습니다.

00:04:28.000 --> 00:04:35.000
나는 요약할 특정 목록을 제공함으로써 내 작업에 대한 빠른 요약을 얻을 수 있는 좀 더 발전된 것을 시도하고 싶다.

00:04:35.000 --> 00:04:39.000
이것은 앱 인텐트의 두 가지 핵심 개념을 다룰 것이다: 엔티티와 쿼리.

00:04:39.000 --> 00:04:42.000
한 번 해보자.

00:04:42.000 --> 00:04:45.000
먼저, 저는 SummarizeList 앱 인텐트를 구현해야 합니다.

00:04:45.000 --> 00:04:50.000
이전과 마찬가지로, 나는 AppIntent 프로토콜을 준수하는 구조를 만들어야 한다.

00:04:50.000 --> 00:04:53.000
TodoList 구조의 경우, 나는 스텁 구현을 남겼다.

00:04:53.000 --> 00:04:55.000
내가 그걸로 돌아갈게.

00:04:55.000 --> 00:05:01.000
나는 이미 내 앱에 목록의 요약을 반환하는 편리한 기능이 있으므로, 나는 그냥 그것을 사용할 것이다.

00:05:01.000 --> 00:05:05.000
앱 인텐트 결과의 일부로 이 요약을 사용자 지정 대화상자로 반환할 수 있습니다.

00:05:05.000 --> 00:05:09.000
이것은 Siri가 말하거나 결과를 보여줄 수 있게 할 것이다.

00:05:09.000 --> 00:05:14.000
모든 의도에는 시스템이 표시할 수 있는 제목이 필요하다.

00:05:14.000 --> 00:05:20.000
의도는 단순히 변수를 선언하고 @Parameter 속성 래퍼로 주석을 달면 입력을 받을 수 있습니다.

00:05:20.000 --> 00:05:27.000
이 경우, 저는 언급했듯이 현재로서는 스텁에 불과한 ToDoList 구조를 참조했습니다.

00:05:27.000 --> 00:05:33.000
이제 저는 많은 앱 의도에 유용한 두 가지 개념에 대해 말씀드리고 싶습니다: 엔티티와 쿼리.

00:05:33.000 --> 00:05:37.000
엔티티는 사용자가 참조하고 싶어하는 앱과 관련된 개념입니다.

00:05:37.000 --> 00:05:45.000
내 앱에서는 할 일 목록 엔티티를 갖는 것이 합리적이다. 왜냐하면 그것은 사람들이 내 앱에서 작업을 수행할 때 참조하고 싶어하는 논리적인 객체이기 때문이다.

00:05:45.000 --> 00:05:51.000
다른 앱에서는 사용자, 문서, 주문 등을 위한 엔티티가 있을 수 있습니다.

00:05:51.000 --> 00:05:56.000
앱의 엔티티는 엔티티를 입력 매개 변수로 사용할 때 앱 인텐트에서 사용할 수 있습니다.

00:05:56.000 --> 00:06:01.000
내 앱에서, 내 "SummarizeList" 의도는 할 일 목록 엔티티를 매개 변수로 취한다.

00:06:01.000 --> 00:06:08.000
앱 인텐트의 매개 변수에 맞는 엔티티 인스턴스를 찾기 위해, 시스템은 쿼리에 의존한다.

00:06:08.000 --> 00:06:14.000
런타임에, 시스템은 다양한 검색 매개 변수를 기반으로 엔티티를 찾기 위해 쿼리 객체를 인스턴스화하고 호출합니다.

00:06:14.000 --> 00:06:18.000
쿼리는 관련 엔티티의 인스턴스를 시스템으로 반환합니다.

00:06:18.000 --> 00:06:21.000
시스템은 나중에 의도를 실행할 때 이러한 엔티티를 사용한다.

00:06:21.000 --> 00:06:29.000
내 앱의 경우 할 일 목록 엔티티와 관련 할 일 목록을 시스템이 검색하는 데 도움이 되는 쿼리를 구현해야 합니다.

00:06:29.000 --> 00:06:32.000
내가 작업하고 있던 목록 요약 앱 바로 가기로 돌아가기.

00:06:32.000 --> 00:06:36.000
AppEntity를 준수하여 ToDoList의 스텁 구현을 확장할 것입니다.

00:06:36.000 --> 00:06:43.000
시스템이 이 엔티티 유형을 설명하는 방법을 알 수 있도록 typeDisplayRepresentation 속성을 구현할 것입니다.

00:06:43.000 --> 00:06:49.000
마찬가지로, 나는 displayRepresentation을 구현할 것이다, 그래서 시스템은 이 특정 인스턴스를 설명하는 방법을 알고 있다.

00:06:49.000 --> 00:06:57.000
스포트라이트 또는 단축키의 최상위 레벨에 엔티티를 표시하려면, 내 엔티티에는 디스플레이 표현에 이미지나 기호가 있어야 합니다.

00:06:57.000 --> 00:07:01.000
그리고 마지막으로, 저는 이 엔티티에 대한 기본 쿼리를 선언합니다.

00:07:01.000 --> 00:07:04.000
나는 내 할 일 목록 엔티티에 대한 간단한 쿼리를 구현했다.

00:07:04.000 --> 00:07:09.000
최소한, 내 쿼리는 식별자로 할 일 목록을 검색할 수 있어야 한다.

00:07:09.000 --> 00:07:11.000
나는 또한 제안된 엔티티를 구현하고 싶다.

00:07:11.000 --> 00:07:15.000
이것은 내 앱이 내 사용자와 가장 관련이 있다고 생각하는 할 일 목록을 제어할 수 있게 해준다.

00:07:15.000 --> 00:07:20.000
시스템은 이러한 제안된 엔티티를 사용하여 내 앱 단축키를 자동으로 채울 것이다.

00:07:20.000 --> 00:07:29.000
SummarizeList 앱 인텐트와 관련 엔티티 및 쿼리 구조만으로 이제 단축키 앱 내부와 자동화의 일부로 이 기능을 사용할 수 있습니다.

00:07:29.000 --> 00:07:31.000
근데 난 아직 안 끝났어.

00:07:31.000 --> 00:07:36.000
저는 이 기능이 Siri에서 접근할 수 있고 Spotlight에서 완전히 기능하는지 확인하고 싶습니다.

00:07:36.000 --> 00:07:40.000
이렇게 하려면, 앱 단축키를 구현해야 합니다.

00:07:40.000 --> 00:07:43.000
이전에 시작한 AppShortcutsProvider를 확장하는 것으로 시작하겠습니다.

00:07:43.000 --> 00:07:46.000
기존 앱 단축키에 새로운 앱 단축키를 추가하겠습니다.

00:07:46.000 --> 00:07:51.000
나는 또한 Siri에서 내 앱 단축키를 호출할 일련의 음성 문구를 포함할 것이다.

00:07:51.000 --> 00:07:56.000
내 애플리케이션의 이름을 문자열에서 직접 사용하는 대신, 나는 특별한 토큰을 사용했다는 것을 주목하세요.

00:07:56.000 --> 00:08:02.000
이것은 Siri가 내 앱의 기본 이름뿐만 아니라 내가 정의한 모든 앱 이름 동의어를 인식할 수 있게 해준다.

00:08:02.000 --> 00:08:06.000
나는 또한 의도의 매개 변수인 "목록"을 일부 문구에 추가했다.

00:08:06.000 --> 00:08:14.000
앱 단축키는 사용자가 Siri를 호출하는 즉시 매개 변수를 제공할 수 있도록 미리 정의된 매개 변수로 트리거 구문 확장을 지원합니다.

00:08:14.000 --> 00:08:22.000
이 경우, 시스템은 ToDoListQuery의 suggestedEntities 메소드를 호출하여 가능한 값의 배열을 얻을 것이다.

00:08:22.000 --> 00:08:25.000
"목록" 매개 변수가 없는 문구도 제공했다는 점에 유의하십시오.

00:08:25.000 --> 00:08:33.000
이것은 일반적으로 좋은 생각이므로 내 앱 단축키가 목록 없이 사용되는 경우, Siri 또는 단축키가 사용자에게 하나를 선택하라는 메시지를 표시할 수 있습니다.

00:08:33.000 --> 00:08:38.000
앱 단축키는 매개 변수가 선택 사항이 아닌 경우 의도를 수행하기 전에 값을 자동으로 프롬프트합니다.

00:08:38.000 --> 00:08:44.000
선택적 매개 변수의 경우, 수행 방법 내부의 값을 수동으로 요청할 수 있습니다.

00:08:44.000 --> 00:08:49.000
이전과 마찬가지로, 우리는 짧은 제목과 시스템 이미지를 포함해야 합니다.

00:08:49.000 --> 00:08:57.000
사용자가 스포트라이트에서 내 앱을 검색할 때 가장 먼저 보게 될 것이기 때문에 좋은 짧은 제목과 시스템 이미지를 고르는 것은 중요합니다.

00:08:57.000 --> 00:09:03.000
앱 단축키는 미리 Siri에 지정할 수 있는 잘 알려진 매개 변수 값의 고정된 세트가 있는 매개 변수를 지원합니다.

00:09:03.000 --> 00:09:09.000
그들은 X가 사용자의 입력이 될 수 있는 "내 앱 X 검색"과 같은 개방형 값을 지원하지 않습니다.

00:09:09.000 --> 00:09:18.000
앱 열거형인 매개 변수를 사용할 수 있으며, 이 경우 값은 미리 알려지거나, 앱 엔티티인 매개 변수를 사용하여 완전히 동적으로 사용할 수 있습니다.

00:09:18.000 --> 00:09:24.000
내 앱과 같이 suggestedEntities를 통해 쿼리의 엔티티 목록을 반환하기만 하면 됩니다.

00:09:24.000 --> 00:09:29.000
그리고 마지막 단계로, AppShortcutsProvider 객체에서 updateAppShortcutParameters를 호출해야 합니다.

00:09:29.000 --> 00:09:38.000
이 방법을 호출하면 앱 바로 가기 매개 변수가 변경되었음을 시스템에 알리고 시스템이 관련 쿼리에서 suggestedEntities를 호출하여 다시 가져오게 합니다.

00:09:38.000 --> 00:09:41.000
나는 내 할 일 목록이 바뀔 때마다 이것을 해야 한다.

00:09:41.000 --> 00:09:45.000
여기에는 추가 및 삭제뿐만 아니라 이름 바꾸기와 같은 돌연변이도 포함됩니다.

00:09:45.000 --> 00:09:52.000
예를 들어, 내 엔티티의 디스플레이 표현의 일부가 변경되었다면, 이 메소드를 호출해야 합니다.

00:09:52.000 --> 00:09:56.000
앱의 첫 출시 시 이것을 호출하는 것을 기억하는 것이 중요합니다.

00:09:56.000 --> 00:10:03.000
엔티티 매개 변수를 참조하는 앱 바로 가기 구문은 시스템이 처음으로 엔티티를 성공적으로 가져올 때까지 작동하지 않습니다.

00:10:03.000 --> 00:10:07.000
그리고 그것이 내가 요약 목록 앱 단축키를 위해 구현해야 하는 모든 것이다.

00:10:07.000 --> 00:10:12.000
이제 내 앱을 사용할 때, 나는 "이봐, Siri. 데모로 내 식료품 목록을 요약해."

00:10:12.000 --> 00:10:15.000
그리고 즉시 언어적, 시각적 반응을 얻으세요.

00:10:15.000 --> 00:10:22.000
소량의 코드로, 나는 이제 사람들이 빠르고 원활한 방식으로 필요한 정보를 더 쉽게 얻을 수 있도록 했다.

00:10:22.000 --> 00:10:28.000
훌륭한 본격적인 앱 단축키를 구현했을 때, 사용자가 그것을 발견할 수 있도록 돕는 것이 중요합니다.

00:10:28.000 --> 00:10:36.000
사람들이 단순히 장치를 사용하는 과정에서 앱 단축키를 발견할 수 있는 두 가지 강력한 방법이 있습니다: 스포트라이트와 시리 팁.

00:10:36.000 --> 00:10:40.000
스포트라이트는 사람들이 iPhone과 iPad에서 앱을 실행하는 가장 인기 있는 방법 중 하나이다.

00:10:40.000 --> 00:10:44.000
스포트라이트 인기 히트 섹션은 앱뿐만 아니라 앱 단축키도 보여줍니다.

00:10:44.000 --> 00:10:48.000
이것은 당신의 앱 단축키를 발견할 수 있는 좋은 방법입니다.

00:10:48.000 --> 00:10:53.000
사람들은 당신의 앱을 검색할 때 바로 앱 단축키를 찾을 수 있으며, 당신의 앱이 최고 인기입니다.

00:10:53.000 --> 00:10:59.000
또는 그들은 여기에서 "Summarize List"와 같은 앱 단축키 자체의 제목을 검색하여 그것들을 찾을 수 있습니다.

00:10:59.000 --> 00:11:06.000
스포트라이트 외에도, 시리 팁은 사용자가 앱을 사용하는 동안 앱 단축키를 발견할 수 있는 좋은 방법입니다.

00:11:06.000 --> 00:11:11.000
여기 목록 보기에 하나를 추가했습니다. 왜냐하면 사람들이 이 팁이 유용하다고 생각하는 장소처럼 느껴지기 때문입니다.

00:11:11.000 --> 00:11:18.000
팁 뷰는 SwiftUI와 UIKit 모두에서 사용할 수 있으며, 다양한 스타일을 제공했기 때문에 어떤 응용 프로그램에서도 멋지게 보입니다.

00:11:18.000 --> 00:11:23.000
Siri 팁은 화면의 콘텐츠와 관련이 있도록 상황에 맞게 가장 잘 배치됩니다.

00:11:23.000 --> 00:11:31.000
스포트라이트와 시리 팁 사이에는 사용자가 앱 안팎에서 앱 단축키에 대해 알아볼 수 있는 방법이 있습니다.

00:11:31.000 --> 00:11:38.000
앱 인텐트와 앱 단축키를 더 깊이 파고들고 싶다면, WWDC22에서 두 세션을 확인하세요.

00:11:38.000 --> 00:11:53.000
"Dive into App Intents"는 앱 인텐트 프레임워크의 개요에 적합하며, "Implement App Shortcuts with App Intents"는 여러 가능한 매개 변수 값 간의 명확성과 같은 앱 단축키 전체에서 사용할 수 있는 더 다양한 사용자 경험을 탐구합니다.

00:11:53.000 --> 00:12:03.000
이제 첫 번째 앱 단축키를 구현했으므로, 앱 단축키와 iOS 17의 모든 훌륭한 새로운 기능을 최대한 활용할 수 있도록 올해 새로운 기능에 대해 말씀드리고 싶습니다.

00:12:03.000 --> 00:12:08.000
iOS 17에서, 우리는 앱 인텐트와 앱 단축키가 단축키 앱에 표시되는 방식을 업데이트했습니다.

00:12:08.000 --> 00:12:15.000
이 새로운 디자인은 사람들이 앱의 의도를 더 쉽게 찾을 수 있게 해주며, 앱의 가장 중요한 작업에 대한 원탭 액세스를 제공합니다.

00:12:15.000 --> 00:12:18.000
앱 단축키는 이제 스포트라이트에서 눈에 띄는 위치를 얻는다.

00:12:18.000 --> 00:12:30.000
여기에 자주 사용되는 앱 단축키가 표시될 뿐만 아니라, 올해 앱 단축키를 시각적으로 더 독특하게 만들기 위해 새로운 API를 추가했으며, 관심 있는 엔티티를 강조할 수 있는 스포트라이트 기능을 도입했습니다.

00:12:30.000 --> 00:12:38.000
단축키 자동화 설정은 사용하기 쉽도록 재설계되었으며, 앱 단축키가 탑재되어 사람들이 더 간단하게 시작할 수 있습니다.

00:12:38.000 --> 00:12:48.000
이러한 모든 훌륭한 새로운 기능을 활용하고 앱 단축키에 관심을 끌기 위해, 우리는 색상, 엔티티 썸네일 및 기호가 있는 짧은 제목에 대한 새로운 API를 도입했습니다.

00:12:48.000 --> 00:12:53.000
이 새로운 API는 모든 앱 단축키에 필요하며 앱이 정말 눈에 띄는 데 도움이 될 것입니다.

00:12:53.000 --> 00:12:55.000
색깔부터 시작할게.

00:12:55.000 --> 00:13:02.000
이제 앱이 스포트라이트 또는 단축키에 나타날 때 시스템이 사용할 앱의 정보 목록에서 두 가지 색상으로 설정할 수 있습니다.

00:13:02.000 --> 00:13:09.000
앱의 인앱 스타일과 유사한 색상을 채택하는 것을 고려하면, 나머지 시스템에 약간의 인앱 경험을 가져올 수 있습니다.

00:13:09.000 --> 00:13:14.000
다음으로, 앱의 각 엔티티 인스턴스는 이제 선택적 썸네일 이미지를 가질 수 있습니다.

00:13:14.000 --> 00:13:18.000
이것은 기존 DisplayRepresentation API의 확장이다.

00:13:18.000 --> 00:13:28.000
썸네일은 이미지가 있는 URL, 이미지를 나타내는 데이터 객체, 명명된 번들 이미지 리소스 또는 시스템 이미지 이름으로 제공될 수 있습니다.

00:13:28.000 --> 00:13:34.000
엔티티를 위한 독특하고 독특한 이미지를 선택하면 스포트라이트를 더 매력적으로 만드는 데 도움이 될 것입니다.

00:13:34.000 --> 00:13:38.000
그리고 마지막으로, 모든 앱 단축키는 이제 짧은 제목과 시스템 이미지가 필요합니다.

00:13:38.000 --> 00:13:43.000
스포트라이트 또는 단축키에 표시될 때, 짧은 제목과 시스템 이미지는 동작을 스타일링하는 데 사용됩니다.

00:13:43.000 --> 00:13:47.000
독특하고 앱 단축키가 하는 일을 나타내는 것을 선택하세요.

00:13:47.000 --> 00:13:56.000
앱 단축키가 시스템에 시각적으로 등장하는 모든 훌륭한 새로운 방법 외에도, 우리는 올해 앱 단축키를 Siri와 함께 사용할 수 있는 방법을 크게 개선했습니다.

00:13:56.000 --> 00:14:04.000
iOS 16에서 Siri는 소스 코드와 문자열 파일에서 정의한 대로 정확하게 말하는 경우에만 앱 단축키 트리거 구문을 인식합니다.

00:14:04.000 --> 00:14:09.000
하지만 앱을 사용하는 사람들은 앱 단축키에 액세스하려고 할 때 다른 단어와 구문을 사용할 수 있습니다.

00:14:09.000 --> 00:14:24.000
예를 들어, 내 앱에서, 나는 "데모로 내 식료품 목록 요약"을 문구로 제공했기 때문에, 말할 때 예상대로 내 앱 바로 가기를 트리거하지만, "데모와 함께 내 식료품 목록의 요약을 말해줘"와 같이 꽤 비슷하고 합리적인 것은 작동하지 않을 것이다.

00:14:24.000 --> 00:14:29.000
iOS 17에서는 앱 단축키를 트리거하기 위해 더 자연스럽게 말할 수 있는 기능을 제공합니다.

00:14:29.000 --> 00:14:36.000
이것은 온디바이스 머신 러닝을 활용하여 앱 단축키에서 제공한 것과 유사한 문구가 작동할 수 있도록 합니다.

00:14:36.000 --> 00:14:41.000
이것은 새로운 의미 유사성 지수에 의해 구동된다.

00:14:41.000 --> 00:14:49.000
이 새로운 유연한 매칭 기능을 통해, 사람들은 앱 단축키를 호출하는 더 자연스러운 방법을 사용할 수 있으며, 가능한 모든 다른 구문을 제공할 필요가 없습니다.

00:14:49.000 --> 00:14:53.000
그리고 가장 중요한 것은, 유연한 매칭을 위해 코드 변경이 필요하지 않다는 것이다.

00:14:53.000 --> 00:14:59.000
Xcode 15로 앱을 재구축하기만 하면, 이미 가지고 있는 것과 유사한 문구가 작동할 것입니다.

00:14:59.000 --> 00:15:11.000
아직 유연한 매칭을 채택할 준비가 되지 않았다면, "앱 단축키 유연한 매칭 활성화" 빌드 설정을 비활성화하여 옵트아웃할 수 있으며, 앱 단축키 구문에서만 정확히 일치하는 것으로 되돌릴 수 있습니다.

00:15:11.000 --> 00:15:17.000
앱 단축키 문구의 자연스러움을 더욱 넓히기 위해, 새로운 동의어 API도 있습니다.

00:15:17.000 --> 00:15:24.000
이것은 AppEntities 및 AppEnum 사례에 대한 추가 동의어를 정의할 수 있도록 DisplayRepresentation API에 약간 추가된 것입니다.

00:15:24.000 --> 00:15:30.000
이것은 Siri에게 더 자연스럽게 말할 수 있게 함으로써 앱 단축키의 범위를 더욱 넓힐 것입니다.

00:15:30.000 --> 00:15:37.000
예를 들어, 내 앱에서, 나는 이제 트리거 문구에서 바로 대체 이름으로 내 목록을 참조할 수 있다.

00:15:37.000 --> 00:15:42.000
내가 미리 지정하지 않았다면, Siri가 나에게 목록을 요청하면 동의어도 작동한다.

00:15:42.000 --> 00:15:50.000
이러한 동의어는 엔티티의 각 인스턴스와 관련이 있으며, 변경되면 updateAppShortcutParameters를 다시 호출해야 합니다.

00:15:50.000 --> 00:15:54.000
유연한 매칭을 지원하기 위해, 새로운 네거티브 구문 API도 있습니다.

00:15:54.000 --> 00:16:01.000
그럼에도 불구하고 앱 단축키에 속하지 않는 문구가 앱을 잘못 호출하는 경우에만 이것을 사용해야 합니다.

00:16:01.000 --> 00:16:10.000
이 경우, "내 식료품점에 데모 요약 보내기"는 앱 단축키를 잘못 트리거할 수 있으므로, 이것을 부정적인 문구에 포함시킬 것입니다.

00:16:10.000 --> 00:16:17.000
그리고 마지막으로, Siri로 앱 단축키를 테스트하는 것은 느릴 수 있으며, 앱을 빌드 및 실행하고 매번 Siri와 대화해야 합니다.

00:16:17.000 --> 00:16:22.000
여러 지역에서 테스트하고 싶다면 이것은 특히 시간이 많이 걸립니다.

00:16:22.000 --> 00:16:30.000
앱 단축키를 더 빠르고 쉽게 작성할 수 있도록, 우리는 Xcode에 앱 단축키 미리보기라는 강력한 새로운 도구를 도입하고 있습니다.

00:16:30.000 --> 00:16:35.000
앱 단축키 미리보기는 macOS Sonoma에서 Xcode 15를 실행할 때만 사용할 수 있습니다.

00:16:35.000 --> 00:16:39.000
데모를 살펴봅시다.

00:16:39.000 --> 00:16:43.000
여기에 이전에 앱 단축키를 구현한 데모 앱 프로젝트가 있습니다.

00:16:43.000 --> 00:16:51.000
앱을 실행하고 Siri에게 말하여 앱 단축키를 테스트할 수 있지만, 구문의 효과를 빠르게 미리 볼 수 있는 더 빠른 방법을 보여주고 싶습니다.

00:16:51.000 --> 00:16:55.000
이 새로운 기능은 제품, 앱 단축키 미리보기에서 찾을 수 있습니다.

00:16:55.000 --> 00:17:01.000
시맨틱 유사성 지수가 생성할 수 있도록 먼저 내 앱을 구축해야 한다.

00:17:01.000 --> 00:17:09.000
구축 후, 왼쪽에서 앱을 선택하고 사람들이 Siri에게 말할 수 있다고 생각하는 문구를 즉시 입력하기 시작할 수 있습니다.

00:17:09.000 --> 00:17:13.000
내가 코드에서 정의한 문구이기 때문에, 내가 알 수 있는 몇 가지 문구를 시도해 보자.

00:17:13.000 --> 00:17:16.000
데모로 쇼핑 목록을 요약하세요.

00:17:16.000 --> 00:17:21.000
그것은 내 SummarizeList 의도와 정확하게 일치한다.

00:17:21.000 --> 00:17:25.000
첫 번째와 비슷하지만, 내가 제공한 문구는 아닌 문구를 시도해 보자.

00:17:25.000 --> 00:17:30.000
데모와 함께 쇼핑 목록의 요약을 주세요.

00:17:30.000 --> 00:17:37.000
유연한 매칭 덕분에, 이 문구는 내가 추가 작업을 할 필요 없이도 같은 의도와 일치한다.

00:17:37.000 --> 00:17:43.000
이제 신뢰할 수 있게 인식하기에는 너무 다를 수 있는 세 번째 문구로 시도해 봅시다.

00:17:43.000 --> 00:17:46.000
데모와 함께 쇼핑 목록의 요점을 알려주세요.

00:17:46.000 --> 00:17:49.000
이것은 내 앱의 앱 단축키와 일치하지 않는다.

00:17:49.000 --> 00:18:01.000
앱 단축키에 새 문구를 매우 빠르게 추가하고, 재구성하고, 문구를 다시 테스트할 수 있습니다.

00:18:01.000 --> 00:18:05.000
데모와 함께 쇼핑 목록의 요점을 알려주세요.

00:18:05.000 --> 00:18:10.000
그리고 새로운 문구는 일치하며, 나는 내 앱을 실행하지 않고도 그것을 확인할 수 있다.

00:18:10.000 --> 00:18:13.000
이제 나는 중국어로 내 앱을 테스트하고 싶다.

00:18:13.000 --> 00:18:19.000
휴대폰의 언어를 바꾸고, 앱을 실행하고, Siri에게 요청하는 대신, 미리보기에서 로케일 선택기를 사용할 수 있습니다.

00:18:19.000 --> 00:18:22.000
이것은 내가 즉시 새로운 문구를 테스트할 수 있게 해준다.

00:18:22.000 --> 00:18:32.000
그리고 거기서, 만다린 문구는 내가 개발 장치를 사용할 필요 없이 예상대로 작동한다.

00:18:32.000 --> 00:18:41.000
앱 단축키 미리보기는 앱 단축키가 Siri와 어떻게 작동하는지 수동으로 테스트하는 것보다 더 빠른 대안이며, 앱 단축키를 더 쉽게 개발할 수 있습니다.

00:18:41.000 --> 00:18:48.000
iOS 17에서는 새로운 문자열 카탈로그 파일 형식과 함께 앱 단축키 트리거 구문을 현지화하는 방법도 개선하고 있습니다.

00:18:48.000 --> 00:18:53.000
이전에는 각 로케일의 각 앱 단축키에 대해 가질 수 있는 문구의 수가 제한되었습니다.

00:18:53.000 --> 00:19:00.000
예를 들어, 스위프트 코드에서 앱 단축키에 대한 다섯 개의 구문을 정의하면, 각 로케일에서 다섯 개의 구문으로 제한됩니다.

00:19:00.000 --> 00:19:08.000
iOS 17에서 문자열 카탈로그의 도움으로, 우리는 각 로케일에 자연스럽게 필요한 만큼 많은 문구를 가질 수 있도록 이 제한을 해제하고 있습니다.

00:19:08.000 --> 00:19:13.000
이 기능은 나중에 iOS 17을 대상으로 하는 앱에서만 사용할 수 있다는 점에 유의해야 합니다.

00:19:13.000 --> 00:19:16.000
이 새로운 기능을 활용하는 것은 간단하다.

00:19:16.000 --> 00:19:29.000
올해 이전에 앱에서 앱 단축키를 채택하지 않았다면, "AppShortcuts"라는 새로운 문자열 카탈로그를 만들기만 하면 됩니다.

00:19:29.000 --> 00:19:37.000
앱을 다시 빌드한 후, AppShortcutsProvider에서 정의한 문구가 자동으로 채워지는 것을 볼 수 있습니다.

00:19:37.000 --> 00:19:45.000
스위프트 소스 코드를 편집하고 재구성할 때, 새로운 문자열 카탈로그 형식은 자동으로 추가하거나 제거하는 모든 구문을 따라잡을 것입니다.

00:19:45.000 --> 00:19:55.000
또는, 올해 이전에 이미 앱 단축키를 채택했다면, AppShortcuts.strings 파일을 문자열 카탈로그로 마이그레이션하기만 하면 됩니다.

00:19:55.000 --> 00:19:59.000
Xcode에서 마우스 오른쪽 버튼으로 클릭하고 마이그레이션 도우미를 따르세요.

00:19:59.000 --> 00:20:08.000
완료하고 재구성하면, 이미 수행한 모든 현지화를 유지하면서 문구가 자동으로 채워지는 것을 볼 수 있습니다.

00:20:08.000 --> 00:20:14.000
문자열 카탈로그로 마이그레이션되면, 제한 없이 각 로케일에 대한 추가 구문을 추가할 수 있습니다.

00:20:14.000 --> 00:20:20.000
유연한 매칭, 새로운 앱 단축키 미리보기 및 문자열 카탈로그는 Siri로 앱 단축키를 훨씬 더 좋게 만들 것입니다.

00:20:20.000 --> 00:20:26.000
다음은 트리거 문구를 훌륭하게 만드는 몇 가지 팁입니다: 기억에 남는 문구를 선택하는 것이 중요합니다.

00:20:26.000 --> 00:20:34.000
앱의 사용자는 휴대폰에 앱 단축키를 지원하는 다른 많은 앱을 갖게 될 것이며, 실제로는 단축키를 표현하는 방법을 정확히 기억하는 데 어려움을 겪을 것입니다.

00:20:34.000 --> 00:20:37.000
앱 이름 동의어를 활용하세요.

00:20:37.000 --> 00:20:41.000
이것은 사용자가 앱 단축키를 호출할 수 있는 방법을 더욱 넓히는 데 도움이 될 것입니다.

00:20:41.000 --> 00:20:45.000
스위프트 소스 코드에서 사람이 읽을 수 없는 자리 표시자 키를 사용하지 마세요.

00:20:45.000 --> 00:20:52.000
구문에서 매개 변수를 참조하는 경우, 이전에 시연한 보간된 문자열 자리 표시자에 의해 정의되어야 합니다.

00:20:52.000 --> 00:20:58.000
이것은 런타임이 런타임에 이러한 자리 표시자를 올바르게 로드하고 채우는 데 필요합니다.

00:20:58.000 --> 00:21:04.000
또한, 앱 단축키를 앱에서 채택할 때 알아야 할 몇 가지 제한 사항이 있습니다.

00:21:04.000 --> 00:21:07.000
당신의 앱은 최대 10개의 앱 단축키를 가질 수 있습니다.

00:21:07.000 --> 00:21:11.000
전체 앱에 대해 최대 1,000개의 트리거 문구가 있을 수 있습니다.

00:21:11.000 --> 00:21:14.000
여기에는 모든 매개 변수 조합이 포함된다는 점에 유의하십시오.

00:21:14.000 --> 00:21:20.000
예를 들어, 10개의 가능한 값을 가진 매개 변수는 효과적인 구문의 수를 10배로 확장할 것이다.

00:21:20.000 --> 00:21:26.000
구문의 매개 변수에 가능한 값이 너무 많지 않도록 함으로써 이 한도에 도달하는 것을 피할 수 있습니다.

00:21:26.000 --> 00:21:33.000
앱 단축키 미리보기로 테스트하면 이미 유연한 매칭에서 다룰 수 있는 중복 구문을 정의하지 않도록 하는 데 도움이 될 것입니다.

00:21:33.000 --> 00:21:37.000
모든 트리거 구문은 앱 이름이나 앱 이름 동의어를 포함해야 합니다.

00:21:37.000 --> 00:21:44.000
추가 앱 이름 동의어를 정의하는 방법에 대한 가이드는 이 비디오와 관련된 링크를 참조하십시오.

00:21:44.000 --> 00:21:48.000
앱을 여는 앱 단축키는 이제 Spotlight에 표시될 수 있습니다.

00:21:48.000 --> 00:21:55.000
엔티티로 앱을 여는 앱 인텐트가 있다면, 해당 앱 인텐트를 OpenIntent 프로토콜에 따라야 합니다.

00:21:55.000 --> 00:22:05.000
이제 훌륭한 앱 단축키 경험을 만드는 방법을 살펴봤으니, iPhone을 넘어 더 다양한 장치에서 동일한 훌륭한 경험을 가져올 수 있는 방법에 대해 이야기해 봅시다.

00:22:05.000 --> 00:22:11.000
앱 단축키는 이제 Apple Watch에서 작동하지만, 최상의 경험을 얻으려면 몇 가지 제한 사항을 알고 있어야 합니다.

00:22:11.000 --> 00:22:16.000
Apple Watch의 앱 단축키는 장치 자체에 설치된 watchOS 앱에서 나와야 합니다.

00:22:16.000 --> 00:22:20.000
페어링된 iOS 기기의 앱 단축키는 시계에서 실행할 수 없습니다.

00:22:20.000 --> 00:22:29.000
즉, iPhone에 iOS 앱이 설치되어 있지만 해당 watchOS 앱이 없는 경우, 앱 단축키는 watchOS에서 작동하지 않습니다.

00:22:29.000 --> 00:22:35.000
Siri와의 유연한 매칭은 Apple Watch에서 사용할 수 없으므로, 구문을 정확하게 말해야 합니다.

00:22:35.000 --> 00:22:43.000
Apple Watch 지원은 watchOS 9.2에서 도입되었으며 해당 버전 이상을 실행하는 모든 장치에서 사용할 수 있습니다.

00:22:43.000 --> 00:22:46.000
앱 단축키는 이제 Apple Watch에서도 찾을 수 있습니다.

00:22:46.000 --> 00:22:53.000
iOS와 마찬가지로, watchOS의 단축키 앱은 장치에서 사용할 수 있는 앱 단축키를 눈에 띄게 제공합니다.

00:22:53.000 --> 00:22:56.000
둘째, 앱 단축키는 이제 HomePod에서 지원됩니다.

00:22:56.000 --> 00:23:02.000
이를 위해서는 앱 단축키가 활성화된 앱을 동반 iOS 또는 iPadOS 장치에 설치해야 합니다.

00:23:02.000 --> 00:23:10.000
앱 단축키로 인해 앱을 실행할 수 있는 iOS 또는 iPadOS에서 실행하는 것과 달리, HomePod에서는 앱 단축키가 앱을 전혀 실행하지 않을 수 있습니다.

00:23:10.000 --> 00:23:18.000
예를 들어, 단순히 내 아이폰에 데모 앱을 사용하면, 내 홈팟에 "이봐, 시리야. 데모로 내 식료품 목록을 요약해."

00:23:18.000 --> 00:23:25.000
앱 단축키에 대한 HomePod 지원은 버전 16.2 이후부터 사용할 수 있습니다.

00:23:25.000 --> 00:23:29.000
HomePod용 앱 단축키를 디자인할 때, 음성 전용 장치라고 생각하십시오.

00:23:29.000 --> 00:23:36.000
해당 비주얼이 없기 때문에 Siri가 말할 수 있는 명확하고 간결한 대화상자를 반환해야 합니다.

00:23:36.000 --> 00:23:42.000
IntentDialog 클래스에는 "전체" 문자열과 "지원" 문자열을 모두 사용하는 이니셜라이저가 있습니다.

00:23:42.000 --> 00:23:47.000
HomePod는 "전체" 대화상자를 사용하는 반면, iPhone과 같은 시각 장치는 대체 "지원" 대화상자를 사용합니다.

00:23:47.000 --> 00:23:54.000
이를 통해 사용자가 시각적 출력을 참조할 수 있을 때 더 간략하게 할 수 있지만, 화면을 사용할 수 없는 경우 완전히 설명할 수 있습니다.

00:23:54.000 --> 00:24:05.000
음성 전용 사용 사례를 포함하여 앱 단축키를 디자인하는 방법에 대한 자세한 지침은 WWDC22의 "디자인 앱 단축키" 세션을 확인하세요.

00:24:05.000 --> 00:24:08.000
나는 몇 가지 주요 테이크아웃을 반복함으로써 마무리하고 싶다.

00:24:08.000 --> 00:24:16.000
앱 단축키는 시스템 전반에 걸쳐 앱 기능의 가시성을 높이는 데 도움이 되며, 앱의 습관적인 사용에 대한 마찰을 낮춥니다.

00:24:16.000 --> 00:24:26.000
앱 단축키는 그 어느 때보다 더 발견 가능하며, Spotlight에서 눈에 띄는 배치를 통해 앱을 더 많이 사용하고 더 많은 스타일링 옵션을 사용하여 앱을 돋보이게 할 수 있습니다.

00:24:26.000 --> 00:24:33.000
Siri가 있는 앱 단축키는 유연한 매칭으로 크게 개선되어 사용자가 음성으로 앱 단축키를 더 쉽게 트리거할 수 있습니다.

00:24:33.000 --> 00:24:40.000
그리고 Xcode의 새로운 앱 단축키 미리보기 도구를 사용하면 앱 단축키를 더 빠르고 쉽게 개발할 수 있습니다.

00:24:40.000 --> 00:24:47.000
앱 인텐트와 앱 단축키에 대해 더 자세히 알아보자면, 올해부터 두 개의 세션이 더 있습니다.

00:24:47.000 --> 00:24:51.000
이러한 모든 개선으로, 저는 앱 단축키가 당신의 앱과 사용자에게 매우 적합할 것이라고 생각합니다.

00:24:51.000 --> 00:24:54.000
저는 당신이 만들 모든 훌륭한 앱 단축키를 보기를 기대하고 있습니다.

00:24:54.000 --> 23:59:59.000
♪ ♪

