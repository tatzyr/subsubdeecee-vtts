WEBVTT

00:00:00.000 --> 00:00:04.000
♪ 부드러운 기악 힙합 ♪

00:00:04.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:11.000
실파 치라켈: 안녕하세요, 제 이름은 실파입니다.

00:00:11.000 --> 00:00:12.000
라이언 골벡: 그리고 나는 라이언이야.

00:00:12.000 --> 00:00:17.000
Shilpa: 오늘, 우리는 Xcode 15에서 작업해온 모든 것을 보여드리게 되어 매우 기쁩니다.

00:00:17.000 --> 00:00:19.000
라이언: Xcode는 당신의 개발 경험의 중심입니다.

00:00:19.000 --> 00:00:28.000
Xcode에서는 개발 워크플로우의 모든 측면을 한 곳에 모아 단일 도구에 집중하면서 쉽고 재미있게 앱을 만들 수 있습니다.

00:00:28.000 --> 00:00:38.000
오늘 우리는 Xcode 15를 통해 올해 편집, 탐색 및 공유부터 앱 테스트, 디버깅 및 배포에 이르기까지 많은 개선 사항을 다룰 것입니다.

00:00:38.000 --> 00:00:41.000
Shilpa: Xcode의 새로운 기능을 보여주기 전에, 우리는 그것을 다운로드해야 합니다.

00:00:41.000 --> 00:00:46.000
그리고 출시된 버전의 Xcode를 얻는 가장 좋은 방법은 Mac App Store에서 얻는 것입니다.

00:00:46.000 --> 00:00:52.000
이것은 당신이 항상 최신 버전의 도구를 사용하고 최신 기능을 활용할 수 있다는 것을 보장합니다.

00:00:52.000 --> 00:00:59.000
작년에, 우리는 시계와 TV 시뮬레이터를 선택적으로 다운로드하여 더 쉽게 시작할 수 있도록 했습니다.

00:00:59.000 --> 00:01:11.000
올해, 우리는 iOS와 Apple의 새로운 공간 컴퓨팅 플랫폼을 포함한 모든 시뮬레이터를 다운로드할 수 있게 함으로써 더 나아가 당신의 필요에 맞게 Xcode를 구성할 수 있습니다.

00:01:11.000 --> 00:01:17.000
이제, Xcode를 받으면, 더 작아질 것이며, 모든 시뮬레이터를 받기도 전에 코드를 더 쉽게 작성할 수 있습니다.

00:01:17.000 --> 00:01:26.000
또는, 최신 베타와 같은 개발자 웹사이트에서 Xcode를 다운로드해야 하는 경우, 포함할 시뮬레이터를 미리 선택할 수 있습니다.

00:01:26.000 --> 00:01:31.000
이제 Xcode가 생겼으니, 바로 들어가서 소스 편집기의 새로운 기능을 봅시다.

00:01:31.000 --> 00:01:36.000
코드 완성은 실수가 적고 원하는 코드를 더 빨리 얻을 수 있도록 도와줍니다.

00:01:36.000 --> 00:01:39.000
Xcode 15에서는 훨씬 더 똑똑해진다.

00:01:39.000 --> 00:01:40.000
한 번 보자.

00:01:40.000 --> 00:01:44.000
완성은 새로운 정보 출처를 활용한다.

00:01:44.000 --> 00:01:46.000
여기 뒷마당 새들이 있어.

00:01:46.000 --> 00:01:52.000
새 파일을 만들고 이름을 PlantSummaryRow로 지정하겠습니다.

00:01:52.000 --> 00:01:57.000
필요한 수입 명세서를 추가하겠습니다.

00:01:57.000 --> 00:02:07.000
이제 내가 새로운 구조체를 만들 때, 완성은 유형 이름에 대한 PlantSummaryRow를 제안하며, 그것이 내가 만든 파일의 이름이기 때문이다.

00:02:07.000 --> 00:02:15.000
이 파일 구현을 마치겠습니다.

00:02:15.000 --> 00:02:17.000
나는 실행을 끝냈어.

00:02:17.000 --> 00:02:20.000
일부 완성이 제시되는 방식도 개선되었다.

00:02:20.000 --> 00:02:26.000
기본 인수가 있는 함수를 호출할 때, 원하는 매개 변수를 정확히 얻는 것은 어려울 수 있습니다.

00:02:26.000 --> 00:02:32.000
원하는 인수를 선택하는 데 도움이 되는 기본 인수의 가능한 모든 순열을 볼 수 있습니다.

00:02:32.000 --> 00:02:37.000
이 VStack에 프레임 수정자를 추가하고 키보드의 오른쪽 화살표를 누르겠습니다.

00:02:37.000 --> 00:02:43.000
이 경우 너비에 필요한 것을 선택하겠습니다.

00:02:43.000 --> 00:02:49.000
그리고 완성은 이제 더 많은 문맥 인식을 가지고 있으며, 당신이 쓰고 있는 코드에 대한 더 나은 제안을 제공합니다.

00:02:49.000 --> 00:03:01.000
VStack으로 돌아가서, 수정자를 추가하기 위해 백을 입력할 때, 패딩은 Xcode가 이 보기에서 가장 자주 사용되는 수정자 중 하나라는 것을 알고 있기 때문에 최고의 제안입니다.

00:03:01.000 --> 00:03:08.000
하지만 텍스트에 수정자를 추가할 때, 나는 최고의 제안으로 글꼴을 얻는다.

00:03:08.000 --> 00:03:12.000
이 편집자 제안은 또한 주변 코드를 고려한다.

00:03:12.000 --> 00:03:14.000
나는 이미 이 텍스트의 글꼴을 바꿨다.

00:03:14.000 --> 00:03:23.000
다른 수정자를 추가하고 싶을 때, 텍스트 작업을 할 때 같은 수정자를 두 번 사용하고 싶지 않기 때문에 가장 큰 제안은 굵게 표시됩니다.

00:03:23.000 --> 00:03:25.000
여기 또 다른 예가 있습니다.

00:03:25.000 --> 00:03:29.000
이 파일에서, 나는 내 새들이 어디에 있는지 찾기 위해 CLLocation을 사용하고 있다.

00:03:29.000 --> 00:03:38.000
내가 이미 위도에 입력했듯이, 이제 이 두 재산은 일반적으로 함께 짝을 이루기 때문에 경도를 제안할 것이다.

00:03:38.000 --> 00:03:43.000
이 모든 것은 당신이 더 나은 최고의 제안을 할 수 있다는 것을 의미하며, 더 안전한 코드를 더 빨리 입력할 수 있습니다.

00:03:43.000 --> 00:03:47.000
라이언, 우리가 자산 카탈로그에도 전력 완성을 가져오고 있다고 들었어.

00:03:47.000 --> 00:03:49.000
좀 더 말해줄래?

00:03:49.000 --> 00:03:50.000
라이언: 물론이지, 실파.

00:03:50.000 --> 00:03:53.000
색상과 이미지 자산은 이제 스위프트 기호에 의해 뒷받침된다.

00:03:53.000 --> 00:03:55.000
이것은 그들이 이제 코드를 완료할 수 있다는 것을 의미한다.

00:03:55.000 --> 00:03:58.000
내 자산 카탈로그에는 몇 가지 사용자 지정 색상과 이미지가 있다.

00:03:58.000 --> 00:04:05.000
Xcode 15는 그들 각각에 대한 기호를 자동으로 생성하며, 문자열 이름을 사용하는 대신 내 코드에서 이것들을 참조할 수 있습니다.

00:04:05.000 --> 00:04:18.000
이 이미지의 이름을 MultipleClouds로 변경하고 프로젝트를 빌드하면, 이 자산을 사용하는 다른 파일에 문제가 발생합니다.

00:04:18.000 --> 00:04:23.000
그리고 나는 CodeComplete를 사용하여 그것을 수정할 수 있다.

00:04:23.000 --> 00:04:29.000
이 기호들은 나에게 유형 안전을 주므로, 런타임에 불가사의하게 누락된 색상이나 이미지에 대해 걱정할 필요가 없습니다.

00:04:29.000 --> 00:04:34.000
그리고 Xcode 15는 현지화 경험에 카탈로그의 힘과 유연성을 제공합니다.

00:04:34.000 --> 00:04:41.000
문자열 카탈로그는 현지화를 한 곳으로 모아서 중앙 집중식으로 검토하고 업데이트할 수 있는 방법을 제공합니다.

00:04:41.000 --> 00:04:47.000
시작하려면, 편집 &gt; 문자열 카탈로그로 변환을 선택하여 문자열 카탈로그를 사용하도록 프로젝트를 변환할 수 있습니다.

00:04:47.000 --> 00:04:53.000
이것은 마이그레이션할 수 있는 모든 스토리보드, .strings 및 .stringsdict 파일을 보여주는 시트를 제공합니다.

00:04:53.000 --> 00:04:59.000
그리고 일단 마이그레이션되면, 모든 번역은 하나의 편집기로 구성됩니다.

00:04:59.000 --> 00:05:05.000
왼쪽의 사이드바에서, 당신이 지원하는 각 언어의 번역 진행 상황을 검토할 수 있습니다.

00:05:05.000 --> 00:05:07.000
그리고 최신 정보를 유지하는 것은 쉽다.

00:05:07.000 --> 00:05:10.000
모든 문자열은 빌드할 때마다 소스에서 직접 당겨집니다.

00:05:10.000 --> 00:05:18.000
새로운 문자열이 추가되거나 제거되면, 편집기는 영향을 받는 언어에 주석을 달고 관련 문자열에 배지를 부착합니다.

00:05:18.000 --> 00:05:23.000
"Discover String Catalogs" 세션으로 가서 오늘 마이그레이션을 시작하세요.

00:05:23.000 --> 00:05:26.000
실파, 올해 문서화를 위한 Xcode의 새로운 기능은 무엇인가요?

00:05:26.000 --> 00:05:27.000
실파: 많이.

00:05:27.000 --> 00:05:30.000
명확하고 간결한 코드는 문서로 훨씬 더 좋아진다.

00:05:30.000 --> 00:05:38.000
미래의 자신에게 무언가를 설명하든 API의 소비자 중 한 명에게 무언가를 설명하든, 훌륭한 문서를 작성하는 것이 중요합니다.

00:05:38.000 --> 00:05:41.000
그리고 훌륭한 문서는 훌륭한 발표를 받을 자격이 있다.

00:05:41.000 --> 00:05:47.000
Xcode 15는 아름다운 새로운 스타일과 간격을 가지고 있어 문서를 더 쉽게 읽을 수 있습니다.

00:05:47.000 --> 00:05:52.000
하지만 가장 큰 개선 사항은 문서의 실시간 미리보기를 보여주는 새로운 조수입니다.

00:05:52.000 --> 00:06:04.000
문서를 만드는 동안, 편집기 &gt; 어시스턴트 &gt;를 선택한 다음 점프 바에서 문서 미리보기를 선택하여 어시스턴트를 표시할 수 있습니다.

00:06:04.000 --> 00:06:08.000
소스 편집기를 입력할 때, 미리보기는 실시간으로 업데이트됩니다.

00:06:08.000 --> 00:06:13.000
이것은 내 문서가 완전히 구축된 문서 아카이브에서 어떻게 보일지 정확히 보여줄 것이다.

00:06:13.000 --> 00:06:17.000
나는 그것이 실제로 어떻게 사용될 수 있는지 보여주기 위해 코드 예시를 추가할 것이다.

00:06:17.000 --> 00:06:28.000
저는 "이 이니셜라이저를 사용하여 주어진 새의 이미지를 표시하세요"라고 쓰는 것으로 시작하겠습니다.

00:06:28.000 --> 00:06:33.000
그럼 내 코드 예시에 붙여넣을게.

00:06:33.000 --> 00:06:39.000
이 예제는 UI를 포함하기 때문에, 결과 보기가 어떻게 생겼는지에 대한 스크린샷을 추가하겠습니다.

00:06:39.000 --> 00:06:45.000
문서 카탈로그에 포함시켰기 때문에 BirdIcon이라는 이미지를 참조할 수 있습니다.

00:06:45.000 --> 00:06:51.000
새로운 문서 미리보기는 당신의 문서가 당신이 원하는 대로 정확하게 제시되도록 하는 데 큰 도움이 됩니다.

00:06:51.000 --> 00:06:59.000
나처럼 문서 작성에 열정이 있다면, "Swift-DocC로 풍부한 문서 만들기" 세션을 시청하여 자세히 알아보세요.

00:06:59.000 --> 00:07:05.000
문서만큼 중요한 것은 당신의 코드가 간결하고 이해할 수 있어야 한다는 것입니다.

00:07:05.000 --> 00:07:09.000
올해 스위프트의 새로운 기능은 강력한 새로운 언어 기능인 스위프트 매크로이다.

00:07:09.000 --> 00:07:14.000
매크로는 더 표현력이 뛰어난 API를 만들고 반복되는 코드를 제거하는 데 도움을 준다.

00:07:14.000 --> 00:07:22.000
그리고 Xcode의 통합은 매크로에 대한 완전한 가시성을 제공하여 매크로 생성 코드를 앱의 다른 모든 코드와 마찬가지로 처리할 수 있습니다.

00:07:22.000 --> 00:07:25.000
매크로는 SDK의 스위프트 패키지의 일부입니다.

00:07:25.000 --> 00:07:36.000
이제 우리는 스위프트 표준 라이브러리, 재단 및 새로운 스위프트 데이터 프레임워크와 같은 많은 애플의 자체 프레임워크에서 매크로의 힘을 활용하고 있습니다.

00:07:36.000 --> 00:07:39.000
나는 또한 다른 사람들과 공유하기 위해 나만의 매크로 패키지를 만들 수 있다.

00:07:39.000 --> 00:07:51.000
패키지를 만들기 위해, Command-Shift-A를 누르기만 하면 Xcode의 모든 메뉴 옵션에 액세스할 수 있는 새로운 기능인 빠른 동작을 사용할 것입니다.

00:07:51.000 --> 00:07:56.000
새로운 매크로 패키지는 내가 시작할 수 있는 좋은 예시와 함께 올 것이다.

00:07:56.000 --> 00:07:59.000
나는 이미 매크로 패키지인 EnumHelper를 만들었다.

00:07:59.000 --> 00:08:03.000
EnumHelper 내부에서, 나는 CaseDetection을 매크로로 구현했다.

00:08:03.000 --> 00:08:07.000
매크로의 장점은 그들이 정상적인 스위프트 코드를 생성한다는 것이다.

00:08:07.000 --> 00:08:10.000
그것은 그들이 제공하는 코드를 정리하고 깔끔하게 집어넣는다.

00:08:10.000 --> 00:08:21.000
하지만 매크로가 무엇을 하고 있는지 보고 싶거나 매크로 생성 코드에서 디버깅하고 싶을 때, 빠른 작업의 도움으로 바로 매크로를 확장할 수 있습니다.

00:08:21.000 --> 00:08:26.000
디버깅이 필요한 경우 매크로 내부의 코드에 중단점을 설정할 수도 있습니다.

00:08:26.000 --> 00:08:33.000
스위프트 매크로에 대한 더 깊은 기술적 이해를 얻기 위해 "스위프트 매크로 확장" 세션을 시청하세요.

00:08:33.000 --> 00:08:40.000
이 새로운 지식을 갖추고, "스위프트 매크로 쓰기" 세션에서 처음부터 몇 개의 매크로를 작성하기 위해 코딩할 수 있습니다.

00:08:40.000 --> 00:08:44.000
매크로, 미리보기를 활용하는 Xcode의 또 다른 영역을 살펴봅시다.

00:08:44.000 --> 00:08:49.000
매크로의 도움으로, 새로운 미리보기 API는 간단하고 기억하기 쉽다.

00:08:49.000 --> 00:08:52.000
#Preview를 입력하여 미리보기를 추가하겠습니다.

00:08:52.000 --> 00:08:56.000
계정 화면을 미리 보고 싶어요.

00:08:56.000 --> 00:09:02.000
앱 세부 정보 열에는 다양한 상태가 있으며, 다른 미리보기를 만들어 보여줄 수 있습니다.

00:09:02.000 --> 00:09:05.000
나는 이 두 시나리오를 모두 볼 수 있다.

00:09:05.000 --> 00:09:07.000
하지만 지금은 UI에 두 개의 미리보기가 있습니다.

00:09:07.000 --> 00:09:15.000
그들을 구별하기 위해, 나는 "플레이스홀더 뷰"라는 제목을 추가할 것이다.

00:09:15.000 --> 00:09:17.000
하지만 잠깐, 더 많은 개선이 있어.

00:09:17.000 --> 00:09:21.000
우리는 UIKit과 AppKit에 미리보기를 제공합니다.

00:09:21.000 --> 00:09:29.000
그래서 오래된 푸드 트럭 앱에서도 UIViewController의 미리보기를 추가하고 SwiftUI에서 하는 것처럼 빠르게 반복할 수 있습니다.

00:09:29.000 --> 00:09:32.000
이제 미리보기가 있는 위젯을 개발하는 것을 살펴봅시다.

00:09:32.000 --> 00:09:41.000
API는 또한 시간 기반 위젯을 구축하기 위한 새로운 워크플로우를 소개합니다.

00:09:41.000 --> 00:09:44.000
캔버스에는 모든 항목을 보여주는 새로운 영역이 있다.

00:09:44.000 --> 00:09:50.000
그리고 내가 그것들을 탐색할 때, 나는 위젯의 전환이 어떻게 움직이는지 볼 수 있다.

00:09:50.000 --> 00:09:58.000
"Xcode Previews로 프로그래밍 방식 UI 구축" 세션을 확인하여 프로젝트에서 새롭고 흥미로운 미리보기 기능을 채택하는 방법을 알아보세요.

00:09:58.000 --> 00:10:01.000
내비게이션 개선에 대해 이야기하기 위해 라이언에게 돌려줄게.

00:10:01.000 --> 00:10:03.000
라이언: 고마워, 실파.

00:10:03.000 --> 00:10:09.000
프로젝트가 성장함에 따라, 더 복잡해져서 작업 중에 참조하고 싶은 랜드마크를 추적하기가 어려워집니다.

00:10:09.000 --> 00:10:13.000
돕기 위해, Xcode 15는 북마크 네비게이터를 소개합니다.

00:10:13.000 --> 00:10:17.000
소스 제어 네비게이터 바로 옆을 클릭하여 열겠습니다.

00:10:17.000 --> 00:10:21.000
나는 내 코드에서 문서를 추가해야 하는 장소에 북마크를 추가하고 있다.

00:10:21.000 --> 00:10:24.000
나는 이 파일에 다른 것을 추가하고 싶고, 그것은 하기 쉽다.

00:10:24.000 --> 00:10:28.000
이 위치를 마우스 오른쪽 버튼으로 클릭하고 책갈피를 선택하겠습니다.

00:10:28.000 --> 00:10:36.000
북마크는 위치 미리보기와 함께 네비게이터에 표시되지만, 원한다면 클릭하고 다른 설명을 입력하여 이 디스플레이를 변경할 수 있습니다.

00:10:36.000 --> 00:10:42.000
Xcode는 내 설명으로 한 줄의 코드에 주석을 달며, 내가 무엇을 하고 싶은지 쉽게 보고 기억할 수 있게 해준다.

00:10:42.000 --> 00:10:47.000
내 북마크 목록이 늘어나기 시작했지만, 내가 원하는 대로 정렬하고 그룹화하여 관리할 수 있다.

00:10:47.000 --> 00:10:51.000
나는 내 모든 문서 관련 책갈피를 함께 그룹화하고 싶다.

00:10:51.000 --> 00:11:00.000
내가 관심 있는 것을 선택하고, 보조 클릭으로 상황에 맞는 메뉴를 열어 선택에서 새 그룹을 선택하세요.

00:11:00.000 --> 00:11:04.000
이것은 내가 문서를 추가할 장소라고 부를 새로운 그룹을 만든다.

00:11:04.000 --> 00:11:09.000
북마크는 내 코드에서 훌륭한 알림이지만, 할 일 목록으로도 사용될 수 있다.

00:11:09.000 --> 00:11:12.000
왼쪽을 클릭하여 완료로 표시할 수 있습니다.

00:11:12.000 --> 00:11:18.000
또는 상황에 맞는 메뉴에서 책갈피 삭제를 선택하여 완전히 삭제할 수 있습니다.

00:11:18.000 --> 00:11:21.000
이것은 편집기에서 북마크 주석을 제거합니다.

00:11:21.000 --> 00:11:24.000
하지만, 코드 줄이 내가 북마크할 수 있는 유일한 것은 아니다.

00:11:24.000 --> 00:11:27.000
책갈피는 또한 검색어를 추적할 수 있는 좋은 방법이다.

00:11:27.000 --> 00:11:37.000
Xcode 15 이전에, 나는 내 코드에 할 일을 추가했지만, 찾기가 어렵기 때문에, 이미 그들 모두를 찾기 위해 쿼리를 북마크했다.

00:11:37.000 --> 00:11:39.000
하지만 나는 모든 찾기 쿼리를 북마크할 수 있다.

00:11:39.000 --> 00:11:43.000
나는 내 코드에 있는 모든 보기 수정자의 편리한 목록을 유지하고 싶다.

00:11:43.000 --> 00:11:53.000
새로운 Conforming Types 쿼리를 사용하여 viewModifier 프로토콜에 대한 모든 적합성을 찾을 것입니다.

00:11:53.000 --> 00:12:00.000
그런 다음, 결과를 마우스 오른쪽 버튼으로 클릭하고 책갈피 찾기 "viewModifier"를 선택하여 이 쿼리를 북마크할 수 있습니다.

00:12:00.000 --> 00:12:04.000
내 질문은 북마크 네비게이터에서 사용할 수 있습니다.

00:12:04.000 --> 00:12:11.000
내 쿼리 결과가 변경되면, 북마크 옆에 있는 새로 고침 버튼을 한 번 클릭하면 목록을 새로 고칠 수 있습니다.

00:12:11.000 --> 00:12:17.000
Xcode 15의 새로운 북마크 네비게이터는 작업을 추적하므로 당면한 작업에 집중할 필요가 없습니다.

00:12:17.000 --> 00:12:20.000
개발의 또 다른 중요한 부분은 당신의 일을 공유하는 것입니다.

00:12:20.000 --> 00:12:28.000
당신의 변화를 하나로 모으는 것은, 특히 동료들과 공유하기 위한 약속을 만들 때, 변화 자체만큼이나 중요할 수 있습니다.

00:12:28.000 --> 00:12:36.000
Xcode 15는 새로운 변경 사항 네비게이터와 커밋 편집기를 도입하며, 이는 모든 변경 사항을 검토할 수 있는 좋은 방법입니다.

00:12:36.000 --> 00:12:38.000
나는 내 프로젝트에 문서를 추가하는 작업을 하고 있다.

00:12:38.000 --> 00:12:42.000
소스 제어 네비게이터에서 이러한 변경 사항을 검토할 수 있습니다.

00:12:42.000 --> 00:12:47.000
가장 먼저 알게 될 것은 각 파일의 상태에 대한 개선된 보고와 프레젠테이션입니다.

00:12:47.000 --> 00:12:52.000
내 단계 수정은 파일 이름 옆에 아이콘으로 표시됩니다.

00:12:52.000 --> 00:12:57.000
이러한 변경 사항을 검토하고 싶기 때문에 커밋되지 않은 변경 항목을 클릭하여 커밋 편집기를 불러올 것입니다.

00:12:57.000 --> 00:13:04.000
이제 하나의 스크롤 보기에서 모든 수정 사항을 검토할 수 있습니다.

00:13:04.000 --> 00:13:07.000
각 섹션은 주변 코드를 이해하기에 충분한 맥락을 보여준다.

00:13:07.000 --> 00:13:12.000
그리고 더 보고 싶다면, 드래그 핸들을 사용하여 더 많은 파일을 노출할 수 있습니다.

00:13:12.000 --> 00:13:18.000
각 변경 사항은 또한 소스 편집기에 표시되며, 내가 익숙한 주석과 컨트롤에 접근할 수 있게 해준다.

00:13:18.000 --> 00:13:22.000
검토하는 동안, 나는 BirdsNavigationStack 파일에 문제가 있다는 것을 알아차렸다.

00:13:22.000 --> 00:13:29.000
내 문서에 오타가 있는 것 같지만, 보기를 떠나지 않고도 이것을 고칠 수 있다.

00:13:29.000 --> 00:13:32.000
Xcode는 내 변경 사항을 처리하고 문제를 제거합니다.

00:13:32.000 --> 00:13:38.000
내 편집은 또한 변경 표시줄에 준비되지 않은 것으로 즉시 표시된다.

00:13:38.000 --> 00:13:48.000
상태 표시기는 BirdsNavigationStack이 이제 단계적 및 단계되지 않은 변경 사항을 모두 가지고 있음을 강조합니다.

00:13:48.000 --> 00:13:56.000
다음 커밋에 수정 사항을 포함시키고 싶기 때문에, 수정 옆에 있는 변경 표시줄을 클릭하고 단계 변경을 선택하여 진행하겠습니다.

00:13:56.000 --> 00:14:00.000
나는 또한 내가 디버깅에 사용하고 있던 로그 문을 실수로 상연했다는 것을 알아챘다.

00:14:00.000 --> 00:14:03.000
나는 이 변경 사항을 해제하기 위해 변경 표시줄을 다시 사용할 것이다.

00:14:03.000 --> 00:14:08.000
이러한 스테이징 컨트롤은 사용하기 쉽고 Xcode 전체에 통합되어 있습니다.

00:14:08.000 --> 00:14:09.000
나는 내 변경 사항을 확인할 준비가 됐어.

00:14:09.000 --> 00:14:21.000
커밋 메시지 상자에 설명을 추가한 다음 커밋 버튼을 클릭하는 것으로 시작하겠습니다.

00:14:21.000 --> 00:14:26.000
Xcode는 내 커밋을 만들고 커밋 뷰어에서 즉시 열어 포함된 것을 요약합니다.

00:14:26.000 --> 00:14:35.000
그리고 마지막으로, 나는 내 헌신을 팀원들과 공유할 수 있다.

00:14:35.000 --> 00:14:44.000
커밋 옆에 있는 상태 표시기를 클릭하고, 푸시를 선택하고, 프롬프트를 따르겠습니다.

00:14:44.000 --> 00:14:48.000
이러한 소스 제어 기능은 Xcode 15에 집중할 수 있도록 크게 개선되었습니다.

00:14:48.000 --> 00:14:51.000
하지만 이봐, 실파, 내 생각에 우리는 테스트에도 도움이 되는 몇 가지 새로운 기능이 있는 것 같아.

00:14:51.000 --> 00:14:53.000
그것들에 대해 말해줄 수 있어?

00:14:53.000 --> 00:14:57.000
실파: 물론이죠, 라이언, 테스트는 고품질 앱을 배송하는 데 중요한 부분입니다.

00:14:57.000 --> 00:15:02.000
복잡해짐에 따라 회귀를 빠르게 포착하고 앱의 품질을 유지할 수 있습니다.

00:15:02.000 --> 00:15:10.000
테스트는 올해 업데이트된 테스트 네비게이터를 시작으로 더 효율적으로 스위프트에서 처음부터 다시 작성된 몇 가지 큰 개선을 얻었다.

00:15:10.000 --> 00:15:16.000
테스트 결과를 실시간으로 실행하거나 보고할 때, Xcode는 이제 45% 더 빠릅니다.

00:15:16.000 --> 00:15:22.000
테스트 네비게이터는 테스트 계획을 중심으로 구성되어 있어 관심 있는 테스트를 더 쉽게 찾을 수 있습니다.

00:15:22.000 --> 00:15:28.000
또한 필터를 사용하여 예상 실패와 같은 모든 결과 유형을 기반으로 테스트를 찾을 수 있습니다.

00:15:28.000 --> 00:15:36.000
Xcode 또는 Xcode Cloud에서 테스트를 실행하면, 테스트 보고서는 결과를 탐색하는 데 도움이 되며, 다음에 어디에 집중해야 하는지 보여줍니다.

00:15:36.000 --> 00:15:40.000
그것은 전체 테스트 실행에 대한 높은 수준의 요약으로 시작한다.

00:15:40.000 --> 00:15:44.000
여기에는 결과에 대한 패턴 기반 분석인 Insights가 포함됩니다.

00:15:44.000 --> 00:15:47.000
테스트 섹션에서, 당신은 테스트가 어떻게 수행되었는지 이해할 수 있습니다.

00:15:47.000 --> 00:15:54.000
다양한 장치와 구성에서 얼마나 많은 테스트를 통과하고 실패했는지 쉽게 파악할 수 있습니다.

00:15:54.000 --> 00:16:00.000
인사이트는 테스트 결과를 분석하여 이전에 보기 어려웠을 수도 있는 잠재적으로 관련된 실패를 식별합니다.

00:16:00.000 --> 00:16:09.000
또한 전체 제품군이 결과를 반환하는 데 더 오래 걸릴 수 있는 테스트 실행에 대해 경고합니다.

00:16:09.000 --> 00:16:11.000
두 번째 통찰력이 나에게 튀어나온다.

00:16:11.000 --> 00:16:14.000
계정 버튼을 탭하는 동안 테스트에 실패했습니다.

00:16:14.000 --> 00:16:16.000
나는 이것을 더 조사하고 싶다.

00:16:16.000 --> 00:16:26.000
개요에서 결과 유형, 실행 대상 및 테스트 계획 구성에 대한 필터와 함께 모든 테스트 실행을 보여주는 테스트 목록으로 이동할 수 있습니다.

00:16:26.000 --> 00:16:31.000
테스트가 동일한 오류 메시지와 함께 여러 언어에서 계정 버튼을 탭하지 못한 것을 봅니다.

00:16:31.000 --> 00:16:40.000
더 자세히 알아보려면, 개별 수업을 보거나 개별 시험 방법에 대한 새로운 전용 시험 세부 정보 보기로 이동할 수 있습니다.

00:16:40.000 --> 00:16:51.000
테스트 세부 정보 보기에는 모든 실행 내역과 전용 성능 메트릭 탭을 포함하여 결과 데이터를 탐색하는 다양한 방법에 대한 탭이 포함되어 있습니다.

00:16:51.000 --> 00:16:56.000
새로운 자동화 탐색기로 UI 테스트 실패를 디버깅하는 것은 그 어느 때보다 재미있다.

00:16:56.000 --> 00:17:02.000
탐색기는 대화형이므로, 테스트 재생을 보거나 타임라인을 스크럽할 수 있습니다.

00:17:02.000 --> 00:17:04.000
터치 또는 마우스 이벤트가 비디오에 겹쳐져 있습니다.

00:17:04.000 --> 00:17:10.000
실패 시점에서, 내 테스트가 계정 버튼을 탭하지 못했을 때와 같이, 나는 내 앱의 UI 계층 구조를 검사할 수 있다.

00:17:10.000 --> 00:17:15.000
이것은 UI 테스트 실패를 훨씬 쉽게 고칠 수 있게 할 것이다.

00:17:15.000 --> 00:17:21.000
심층적인 연구를 위해, "Xcode 테스트 보고서로 더 빨리 실패 수정" 세션을 시청하여 자세히 알아보세요.

00:17:21.000 --> 00:17:23.000
이제 라이언에게 돌아가서 디버깅에 대해 얘기할 수 있어.

00:17:23.000 --> 00:17:25.000
라이언: 테스트와 디버깅은 함께 진행됩니다.

00:17:25.000 --> 00:17:28.000
그들은 둘 다 고품질 앱을 만드는 것에 관한 것이다.

00:17:28.000 --> 00:17:33.000
그리고 디버깅은 또한 OSLog를 Xcode에 통합하는 것을 시작으로 올해 몇 가지 큰 개선을 얻었다.

00:17:33.000 --> 00:17:36.000
OSLog는 런타임 정보를 캡처하기 위한 훌륭한 도구입니다.

00:17:36.000 --> 00:17:41.000
로그 출력을 체계적으로 유지하는 구조화되고 사용자 정의 가능한 로깅 메커니즘을 제공합니다.

00:17:41.000 --> 00:17:52.000
그리고 Xcode 15의 콘솔은 하위 시스템 범주 및 심각도와 같은 로그 데이터에 대한 복잡한 필터링을 수행하는 기능을 포함하여 OSLog에 대한 완전한 지원을 제공합니다.

00:17:52.000 --> 00:17:54.000
통나무의 발표는 그 어느 때보다 깨끗하다.

00:17:54.000 --> 00:17:59.000
초점은 추가 데이터가 깔끔하게 숨겨져 있는 로그 콘텐츠에 있습니다.

00:17:59.000 --> 00:18:08.000
각 로그 항목의 배경색은 심각도를 나타내며, 중요한 메시지에 대한 긴 로그 출력 스트림을 쉽게 스캔할 수 있습니다.

00:18:08.000 --> 00:18:12.000
그리고 메타데이터 필드는 기본적으로 숨겨져 있지만, 몇 번의 클릭만으로 가능합니다.

00:18:12.000 --> 00:18:15.000
보고 싶은 필드만 선택할 수 있습니다.

00:18:15.000 --> 00:18:19.000
그리고 특정한 것을 찾고 있을 때, 필터 필드를 사용하면 검색 범위를 좁힐 수 있습니다.

00:18:19.000 --> 00:18:24.000
메타데이터나 로그의 전체 텍스트를 필터링할 수 있습니다.

00:18:24.000 --> 00:18:30.000
그리고 제가 정말 좋아하는 기능, 당신은 로그 항목에서 그것을 만든 코드 줄로 바로 이동할 수 있습니다.

00:18:30.000 --> 00:18:35.000
우리는 "구조화된 로깅으로 디버깅" 세션에서 이러한 로깅 기능에 대해 자세히 알아봅니다.

00:18:35.000 --> 00:18:38.000
마지막으로, 분배에 대해 이야기해 봅시다.

00:18:38.000 --> 00:18:44.000
배포는 앱을 세계, 팀원, 베타 테스터 및 사용자에게 출시하는 것입니다.

00:18:44.000 --> 00:18:48.000
그리고 Xcode 15에는 이 과정을 더 쉽고 안전하게 만들기 위한 몇 가지 개선 사항이 있습니다.

00:18:48.000 --> 00:18:51.000
Xcode Cloud로 시작합시다.

00:18:51.000 --> 00:18:54.000
Xcode Cloud는 앱을 배포할 수 있는 좋은 방법입니다.

00:18:54.000 --> 00:19:00.000
빌드 버전 관리, 앱 서명 및 배포 프로필과 같은 것을 자동으로 관리합니다.

00:19:00.000 --> 00:19:03.000
올해, Xcode Cloud는 당신을 위해 두 가지 세부 사항을 더 처리합니다.

00:19:03.000 --> 00:19:06.000
먼저, TestFlight 테스트 세부 사항.

00:19:06.000 --> 00:19:11.000
Xcode Cloud는 소스 코드와 함께 테스트 노트를 포함하기 위한 지원을 추가합니다.

00:19:11.000 --> 00:19:18.000
이것들은 배포를 위해 TestFlight 빌드에 자동으로 첨부되므로, 메모는 앱과 함께 테스터에게 표시됩니다.

00:19:18.000 --> 00:19:22.000
그리고 두 번째로, Xcode Cloud는 이제 Mac 앱에 대한 공증을 지원합니다.

00:19:22.000 --> 00:19:28.000
워크플로우에 공증 후 작업을 추가하기만 하면 Xcode Cloud가 나머지를 수행할 것입니다.

00:19:28.000 --> 00:19:34.000
빌드가 완료되면, 앱은 자동으로 공증되고 스테이플되며, 다운로드할 준비가 됩니다.

00:19:34.000 --> 00:19:36.000
앱을 공증하는 것은 사용자에게 매우 중요합니다.

00:19:36.000 --> 00:19:39.000
그것은 그들에게 당신의 앱이 변조되지 않았다는 것을 알려줍니다.

00:19:39.000 --> 00:19:45.000
하지만 당신이 의존하는 SDK와 프레임워크의 무결성을 신뢰할 수 있는 것도 중요합니다.

00:19:45.000 --> 00:19:50.000
이러한 보증을 제공하기 위해, Xcode는 XCFrameworks에 대한 서명 검증을 도입합니다.

00:19:50.000 --> 00:19:56.000
저자는 프레임워크의 내용에 디지털 서명할 수 있으며, Xcode에서 바로 이러한 서명을 확인할 수 있습니다.

00:19:56.000 --> 00:19:59.000
프레임워크 검사관은 새로운 서명 슬라이스를 가지고 있다.

00:19:59.000 --> 00:20:02.000
그것은 누가 프레임워크를 만들고 서명했는지 정확히 알려줍니다.

00:20:02.000 --> 00:20:04.000
그리고 Xcode는 이 정체성을 기억할 것이다.

00:20:04.000 --> 00:20:12.000
따라서 프레임워크를 업데이트할 때 변경되면 문제에 대한 명확한 경고를 받게 되지만, 그 이상의 것이 있습니다.

00:20:12.000 --> 00:20:16.000
저자들은 이제 그들의 프레임워크에 개인 정보 보호 매니페스트를 포함할 수 있다.

00:20:16.000 --> 00:20:21.000
이 매니페스트는 프레임워크가 민감한 데이터를 어떻게 사용하고 보호하는지 정확히 자세히 설명한다.

00:20:21.000 --> 00:20:29.000
개인 정보 보호 매니페스트는 프레임워크와 함께 번들로 제공되기 때문에, 서명된 패키지의 일부이기도 하며, 그 내용이 저자로부터 직접 왔다는 것을 신뢰할 수 있습니다.

00:20:29.000 --> 00:20:34.000
Xcode를 사용하여 모든 매니페스트를 내 앱의 완전한 개인 정보 보호 보고서로 요약할 수 있습니다.

00:20:34.000 --> 00:20:36.000
여기 제가 작성한 보고서가 있습니다.

00:20:36.000 --> 00:20:44.000
이 보고서는 App Store Connect에서 개인 정보 보호 영양 라벨을 쉽게 작성할 수 있도록 설계되어 사용자에게 정확한 정보를 제공할 수 있습니다.

00:20:44.000 --> 00:20:52.000
그리고 Apple은 모든 중요한 종속성이 이 귀중한 정보를 제공할 수 있도록 개인 정보 보호에 영향을 미치는 SDK와 협력하고 있습니다.

00:20:52.000 --> 00:21:00.000
우리는 "디지털 서명으로 앱 종속성 확인" 및 "개인 정보 보호 매니페스트 시작하기" 세션에서 이러한 주제를 훨씬 더 깊이 다룹니다.

00:21:00.000 --> 00:21:04.000
개인 정보 보호 매니페스트는 사용자에게 앱을 배포할 때 훌륭한 도구입니다.

00:21:04.000 --> 00:21:10.000
버그 수정이나 새로운 기능 브랜치를 작업할 때, 앱을 팀원과 팀원에게만 배포하고 싶습니다.

00:21:10.000 --> 00:21:15.000
그래서 Xcode 15는 이제 TestFlight 내부 테스트 배포 옵션을 지원합니다.

00:21:15.000 --> 00:21:21.000
TestFlight 내부 빌드는 팀에서만 사용할 수 있으므로 실수로 고객에게 공개할 수 없습니다.

00:21:21.000 --> 00:21:23.000
그것들은 만들기 쉽다.

00:21:23.000 --> 00:21:30.000
App Store Connect를 통해 앱을 배포할 때 "TestFlight 내부 테스트" 옵션을 선택하세요.

00:21:30.000 --> 00:21:32.000
하지만 그건 사실 이것보다 훨씬 더 쉬워.

00:21:32.000 --> 00:21:37.000
Xcode는 이제 가장 일반적인 배포 방법과 권장 설정 세트를 번들로 제공합니다.

00:21:37.000 --> 00:21:40.000
1단계, 내부에서만 TestFlight를 포함한 이러한 새로운 옵션 중 하나를 선택하세요.

00:21:40.000 --> 00:21:43.000
2단계, 배포를 클릭하면 완료됩니다.

00:21:43.000 --> 00:21:46.000
세 번째 단계는 없다.

00:21:46.000 --> 00:21:52.000
그리고 App Store Connect를 통해 배포하는 경우, 이제 빌드 상태에 대한 데스크톱 알림도 받게 됩니다.

00:21:52.000 --> 00:21:55.000
따라서 앱을 테스트할 준비가 되면, 즉시 알림을 받게 될 것입니다.

00:21:55.000 --> 00:22:03.000
이러한 업데이트를 통해 앱을 빠르게 반복하고 배포할 수 있어 팀원, 테스터 및 사용자와 긴밀히 협력할 수 있습니다.

00:22:03.000 --> 00:22:09.000
"Xcode와 Xcode Cloud로 배포 단순화" 세션을 살펴보고 이러한 기능을 탐색하기 시작하세요.

00:22:09.000 --> 00:22:12.000
음, 그것은 Xcode 15의 새로운 기능에 대한 간략한 개요였다.

00:22:12.000 --> 00:22:19.000
그것은 얻기 쉽고, 사용하기 빠르며, 당신의 개발을 더 집중적이고, 매끄럽고, 재미있게 만들기 위해 많은 개선이 있습니다.

00:22:19.000 --> 00:22:23.000
Shilpa: Xcode 15를 다운로드하여 이 멋진 새로운 기능을 사용해 볼 수 있습니다.

00:22:23.000 --> 00:22:25.000
봐줘서 고마워.

00:22:25.000 --> 23:59:59.000
♪

