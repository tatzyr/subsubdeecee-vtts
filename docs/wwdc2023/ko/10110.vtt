WEBVTT

00:00:00.000 --> 00:00:03.000
♪ 부드러운 기악 힙합 ♪

00:00:03.000 --> 00:00:09.000
♪

00:00:09.000 --> 00:00:10.000
안녕!

00:00:10.000 --> 00:00:13.000
저는 할란이고, SwiftUI에서 일하고 있습니다.

00:00:13.000 --> 00:00:19.000
이 새로운 공간 플랫폼에서 윈도우 앱을 정말 멋지게 만들 수 있도록 도와드리게 되어 기쁩니다.

00:00:19.000 --> 00:00:30.000
공간 컴퓨팅을 통해, 당신의 앱은 물리적 환경 내에 존재하며, 이는 완전히 새로운 클래스의 놀라운 3차원 경험을 가능하게 합니다.

00:00:30.000 --> 00:00:35.000
그리고 모든 Apple 플랫폼과 마찬가지로, 앱을 구축하는 가장 좋은 방법은 SwiftUI를 사용하는 것입니다.

00:00:35.000 --> 00:00:43.000
SwiftUI는 이 새로운 플랫폼이 제공하는 모든 것을 활용하는 API와 동작 제품군을 추가했습니다.

00:00:43.000 --> 00:00:51.000
아직 하지 않았다면, 이 장치에서 SwiftUI를 사용할 수 있는 모든 새로운 방법에 대한 개요를 보려면 "공간 컴퓨팅을 위한 SwiftUI를 만나세요"를 보세요.

00:00:51.000 --> 00:00:58.000
저는 SwiftUI에 집중할 것이지만, UIKit으로 작업하고 있다면, 당신이 활용할 수 있는 것도 많습니다.

00:00:58.000 --> 00:01:06.000
"공간 컴퓨팅을 위한 UIKit 만나기"를 확인하여 최고의 UIKit 경험을 가능하게 하는 방법을 알아보세요.

00:01:06.000 --> 00:01:15.000
기존 iPhone 또는 iPad 앱이 있고 iOS 경험을 유지하고 싶다면, "공유 공간에서 iPad 및 iPhone 앱 실행"을 확인하세요.

00:01:15.000 --> 00:01:25.000
다른 Apple 플랫폼에서 앱을 가져오든 새로운 것을 만들든, SwiftUI는 앱이 실행되는 곳 어디에서나 집에서처럼 느낄 수 있는 가장 좋은 방법입니다.

00:01:25.000 --> 00:01:29.000
이 세션에서, 우리는 이 플랫폼을 위한 SwiftUI 앱을 업데이트할 것입니다.

00:01:29.000 --> 00:01:49.000
우리는 내장 컨트롤이 가독성과 상호 작용을 위해 어떻게 자동으로 적응하는지 탐구하는 것으로 시작할 것입니다. 사용자 지정 보기와 컨트롤이 이 장치의 새로운 비주얼과 입력 기술을 활용할 수 있도록 하는 방법에 대해 이야기할 것입니다. 그리고 우리는 이 장치에서만 가능한 몇 가지 새로운 기능을 채택할 것입니다.

00:01:49.000 --> 00:01:53.000
이 플랫폼은 처음부터 SwiftUI를 염두에 두고 만들어졌다.

00:01:53.000 --> 00:02:06.000
사실, 대부분의 시스템 응용 프로그램은 Keynote, Freeform 및 TV와 같은 SwiftUI로 작성되었으며, 모두 친숙한 인터페이스를 주변 환경으로 바로 가져옵니다.

00:02:06.000 --> 00:02:15.000
이 앱들은 iPad와 비슷해 보이지만, 이 플랫폼에서 새로운 디자인 언어와 상호 작용 방법을 최대한 활용합니다.

00:02:15.000 --> 00:02:20.000
iPad 앱을 함께 업데이트하여 앱으로 어떻게 똑같이 할 수 있는지 살펴봅시다.

00:02:20.000 --> 00:02:28.000
이것은 뒷마당 새이며, 마당을 방문하는 모든 새들에게 먹이를 주고 기록할 수 있는 가상 조류 관찰 앱과 같습니다.

00:02:28.000 --> 00:02:31.000
스위프트 개발자로서, 나는 새를 사랑한다.

00:02:31.000 --> 00:02:34.000
이건 내 종류의 앱이야.

00:02:34.000 --> 00:02:36.000
뒷마당 새들은 SwiftUI로 쓰여졌다.

00:02:36.000 --> 00:02:39.000
그것은 멀티플랫폼 SwiftUI 앱의 좋은 예이다.

00:02:39.000 --> 00:02:44.000
그것은 iPhone, iPad, Mac 및 Apple Watch를 지원합니다.

00:02:44.000 --> 00:02:47.000
그 목록에 플랫폼을 하나 더 추가하고 싶습니다.

00:02:47.000 --> 00:02:51.000
뒷마당 새들이 공유 공간에서 정말 노래하게 합시다.

00:02:51.000 --> 00:03:00.000
먼저, 앱이 Xcode의 지원되는 플랫폼 메뉴에 추가하여 이 새로운 플랫폼을 지원하는지 확인하세요.

00:03:00.000 --> 00:03:08.000
이것은 새로운 실행 목적지를 추가할 것이므로, 그것을 선택하고 시뮬레이터에서 앱을 실행합시다.

00:03:08.000 --> 00:03:15.000
여기 시뮬레이터에서 커서를 움직일 때, 앱은 마치 내가 눈으로 주위를 둘러보는 것처럼 반응한다.

00:03:15.000 --> 00:03:23.000
우리가 Backyard Birds를 운영할 때, 우리는 즉시 그것이 iPad와 같은 기본 레이아웃을 가지고 있다는 것을 발견하지만, 어떤 것들은 조금 다르게 보인다.

00:03:23.000 --> 00:03:29.000
내가 알아차린 첫 번째 차이점은 앱이 이제 유리 배경을 가지고 있다는 것이다.

00:03:29.000 --> 00:03:33.000
유리는 기본적으로 창문에 제공되는 표준 배경이다.

00:03:33.000 --> 00:03:39.000
조명 조건과 그 뒤에 있는 물체의 색상에 따라 대비와 색상 균형을 조정합니다.

00:03:39.000 --> 00:03:45.000
그것 때문에, 이 플랫폼은 밝은 모습과 어두운 모습을 구별하지 않는다.

00:03:45.000 --> 00:03:50.000
Glass는 어디에서 사용하든 앱을 자동으로 읽을 수 있도록 합니다.

00:03:50.000 --> 00:03:52.000
뒷마당 새들을 좀 더 탐험해 봅시다.

00:03:52.000 --> 00:04:00.000
Backyard Birds는 최상위 레벨에 내비게이션 분할 보기를 가지고 있으며, 최상위 보기 사이를 전환할 수 있는 이 사이드바를 제공합니다.

00:04:00.000 --> 00:04:07.000
사이드바는 유리 상단의 배경을 자동으로 어둡게하여 세부 보기와 시각적으로 분리합니다.

00:04:07.000 --> 00:04:11.000
이 목록 행 위에 커서를 올려놓으면, 그들은 미묘하게 강조 표시됩니다.

00:04:11.000 --> 00:04:16.000
iPad에서처럼 이 행을 탭하여 보기 사이를 전환할 수 있습니다.

00:04:16.000 --> 00:04:20.000
분할 보기의 오른쪽에는 내비게이션 스택이 있다.

00:04:20.000 --> 00:04:24.000
뒷마당 중 하나를 탭하면, 세부 정보 보기로 이동합니다.

00:04:24.000 --> 00:04:30.000
여기서 나는 이 마당에 있는 새들을 위해 얼마나 많은 씨앗과 물이 남았는지 볼 수 있다.

00:04:30.000 --> 00:04:34.000
최근에 방문한 모든 새들의 목록을 보려면 아래로 스크롤할 수 있습니다.

00:04:34.000 --> 00:04:40.000
내비게이션 바에는 내가 볼 때 강조하는 원형 버튼이 있다.

00:04:40.000 --> 00:04:46.000
즐겨찾기 버튼을 누르면 축소된 다음 즐겨찾기 상태를 토글합니다.

00:04:46.000 --> 00:04:52.000
이것들은 SwiftUI가 공유 공간의 모든 앱을 향상시키기 위해 한 일 중 일부에 불과합니다.

00:04:52.000 --> 00:05:03.000
이제 우리는 Backyard Birds 주변을 산책하고 내장 컨트롤이 제공하는 새로운 자동 동작을 발견했으므로, 사용자 지정 보기와 컨트롤을 어떻게 집에서 느낄 수 있는지 조사해 봅시다.

00:05:03.000 --> 00:05:07.000
나는 우리가 뒷마당 목록을 둘러보는 동안 미묘한 것을 발견했다.

00:05:07.000 --> 00:05:13.000
내가 앱에 정말 가까이 가면, 새와 식물은 선명하게 남아 있지만, 분수는 약간 흐릿해진다.

00:05:13.000 --> 00:05:17.000
나는 분수가 고정된 해상도로 그려지고 있다고 의심한다.

00:05:17.000 --> 00:05:21.000
이 장치의 앱은 물리적 환경에 배치됩니다.

00:05:21.000 --> 00:05:29.000
그리고 다른 플랫폼과 달리, 콘텐츠가 그릴 수 있는 품질을 정의하는 물리적 픽셀이 있는 화면은 없습니다.

00:05:29.000 --> 00:05:31.000
앱은 어디에나 배치될 수 있다.

00:05:31.000 --> 00:05:38.000
그들은 당신에게서 멀리 밀려나거나, 가까이 다가가거나, 심지어 각도로 볼 수도 있습니다.

00:05:38.000 --> 00:05:44.000
이 시스템은 콘텐츠를 동적으로 확장하여 이러한 모든 상황에서 앱이 멋지게 보이도록 보장합니다.

00:05:44.000 --> 00:05:52.000
시스템이 그렇게 하려면, 비트맵은 품질을 저하시키지 않고는 확장할 수 없기 때문에 벡터 자산을 제공해야 합니다.

00:05:52.000 --> 00:06:01.000
텍스트와 SF 기호는 이미 벡터이지만, 사용자 지정 아이콘이나 그래픽을 사용하는 경우 벡터를 사용하여 동적 콘텐츠 스케일링을 활용하십시오.

00:06:01.000 --> 00:06:04.000
그 분수가 비트맵 이미지인지 확인해 봅시다.

00:06:04.000 --> 00:06:10.000
아, 저울 옵션을 보면, 개별 저울에 명시되어 있습니다.

00:06:10.000 --> 00:06:22.000
고맙게도, 나는 이미 이 자산에 대한 벡터를 가지고 있으므로, 그것을 단일 스케일로 전환하고, 기존 자산을 제거하고, 내 벡터로 교체할 것이다.

00:06:22.000 --> 00:06:28.000
그런 다음 내용을 모든 크기로 확장할 수 있는 벡터 데이터 보존 상자를 체크하겠습니다.

00:06:28.000 --> 00:06:32.000
이 설정은 모든 Apple 플랫폼에서 지원됩니다.

00:06:32.000 --> 00:06:33.000
그게 더 나아.

00:06:33.000 --> 00:06:40.000
이제 분수는 날카롭고, 내가 더 가까이 또는 더 멀리 움직이면, 그것은 높은 품질로 유지된다.

00:06:40.000 --> 00:06:43.000
다른 탭들을 둘러보자.

00:06:43.000 --> 00:06:51.000
식물 탭은 모든 식물의 격자를 보여주며, 식물 뒤에 있는 이 원은 밝고 제자리에 없어 보인다.

00:06:51.000 --> 00:06:58.000
우리가 코드를 검사하면, 우리는 답을 찾을 수 있다: 배경은 단색이다.

00:06:58.000 --> 00:07:05.000
이와 같은 단색은 유리와 고정된 대비를 가지고 있으며 주변 환경에 적응할 수 없습니다.

00:07:05.000 --> 00:07:11.000
iOS에서 일반적인 관행인 다크 모드에서 약간 더 어두운 색상을 사용할 수 있는 확인이 있습니다.

00:07:11.000 --> 00:07:16.000
이 플랫폼은 색 구성표를 어둡다고 보고하므로, 이것은 우리가 식물 뒤에 보이는 색이다.

00:07:16.000 --> 00:07:22.000
하지만 기억하세요, 이 플랫폼은 밝은 색 구성표와 어두운 색 구성표를 구별하지 않습니다.

00:07:22.000 --> 00:07:30.000
대신, 유리를 통해 들어오는 것에 관계없이 콘텐츠를 읽을 수 있도록 하는 가장 좋은 방법은 활기를 채택하는 것입니다.

00:07:30.000 --> 00:07:40.000
생생한 재료는 유리 위에 있는 내용물이 무엇을 통해 빛나더라도 읽을 수 있도록 추가적인 대비와 밝기를 도입합니다.

00:07:40.000 --> 00:07:49.000
모든 내장 컨트롤과 컨테이너는 기본적으로 이러한 생생한 재료를 사용하므로, 표준 컨트롤을 사용하는 경우, 여기에 추가 작업이 없습니다.

00:07:49.000 --> 00:07:54.000
SwiftUI의 시맨틱 스타일은 각 플랫폼에서 자동으로 적절한 모양을 채택한다.

00:07:54.000 --> 00:07:59.000
이 장치에서, 그들은 유리 위에 놓았을 때 생생하게 보인다.

00:07:59.000 --> 00:08:09.000
자신만의 사용자 지정 뷰나 컨테이너를 만드는 경우, 이러한 시맨틱 스타일을 사용하여 유리가 주변 환경에 어떻게 적응하든 콘텐츠를 읽을 수 있도록 하세요.

00:08:09.000 --> 00:08:15.000
단색이 아닌 의미 채우기 색상을 사용하도록 이 식물 아이콘을 변경합시다.

00:08:15.000 --> 00:08:21.000
우리는 의미론적 자료를 사용하고 있기 때문에, 색 구성표 검사를 완전히 제거할 수 있습니다.

00:08:21.000 --> 00:08:26.000
이제 코드는 모든 플랫폼에서 더 간단하고 정확하다.

00:08:26.000 --> 00:08:29.000
와, 이 아이콘들이 훨씬 나아.

00:08:29.000 --> 00:08:34.000
그들은 모든 조명 조건에서 유리에 아름답게 튀어나온다.

00:08:34.000 --> 00:08:43.000
이제 앱의 비주얼을 개선하는 데 시간을 보냈으니, 모든 대화형 구성 요소가 명확하고 타겟팅하기 쉬운지 확인해 봅시다.

00:08:43.000 --> 00:08:50.000
"공간 컴퓨팅을 위한 SwiftUI 만나기"에서 배웠듯이, 앱과 상호 작용할 수 있는 네 가지 방법이 있습니다.

00:08:50.000 --> 00:08:58.000
가장 일반적인 상호 작용은 컨트롤을 보고 손가락을 꼬집어 탭을 수행하는 간접 핀치 제스처입니다.

00:08:58.000 --> 00:09:04.000
앱이 당신과 가깝다면, 손을 뻗어 만지기만 하면 직접 상호 작용할 수 있습니다.

00:09:04.000 --> 00:09:09.000
트랙패드를 페어링했다면, 정확한 입력을 위한 포인터로 사용할 수 있습니다.

00:09:09.000 --> 00:09:16.000
그리고 Apple 플랫폼에서 이미 익숙한 세계적 수준의 접근성 기술은 이 장치에서도 사용할 수 있습니다.

00:09:16.000 --> 00:09:23.000
VoiceOver 및 Switch Control과 같은 도구를 사용하면 모든 사람이 앱을 사용하여 동일한 훌륭한 경험을 할 수 있습니다.

00:09:23.000 --> 00:09:28.000
이 플랫폼에서는 호버 효과를 사용하여 상호 작용 가능한 콘텐츠가 강조 표시됩니다.

00:09:28.000 --> 00:09:38.000
예를 들어, 버튼이나 목록과 같은 컨트롤을 볼 때, 뷰의 경계에 대한 미묘한 하이라이트 효과는 당신이 그것과 상호 작용할 수 있다는 것을 분명히 합니다.

00:09:38.000 --> 00:09:42.000
이러한 호버 효과는 앱이 반응성을 느끼게 하는 데 매우 중요합니다.

00:09:42.000 --> 00:09:49.000
그들은 사람들에게 그들이 보고 있거나 도달하는 관점이 그들이 상호 작용할 관점이라는 확신을 준다.

00:09:49.000 --> 00:09:52.000
호버 효과는 모든 시스템 컨트롤에 자동으로 추가됩니다.

00:09:52.000 --> 00:09:59.000
SwiftUI에서 제공하는 내장 컨트롤을 사용하면 앱에서 이러한 효과를 무료로 얻을 수 있습니다.

00:09:59.000 --> 00:10:02.000
나는 우리 앱의 Birds 탭에서 호버 효과가 누락된 것을 발견했다.

00:10:02.000 --> 00:10:09.000
나는 이 새들 중 하나를 탭할 수 있지만, 호버 효과가 없기 때문에 내가 할 수 있다는 시각적 표시는 없다.

00:10:09.000 --> 00:10:16.000
탭과 같은 제스처에 반응하는 컨트롤을 만들 때마다, 아마도 호버 효과가 있을 것이다.

00:10:16.000 --> 00:10:19.000
hoverEffect() 수정자를 사용하여 하나를 추가할 수 있습니다.

00:10:19.000 --> 00:10:26.000
기본적으로 호버 효과는 하이라이트입니다. 즉, 컨트롤을 볼 때 밝아질 것입니다.

00:10:26.000 --> 00:10:36.000
우리의 새로운 호버 효과로, 내가 이러한 컨트롤과 상호 작용할 수 있다는 것은 분명하지만, 호버 효과는 이 날카로운 모서리를 가지고 있으며, 나는 그들이 조금 더 둥글게 보일 것이라고 생각한다.

00:10:36.000 --> 00:10:43.000
hoverEffect와 함께 contentShape() 수정자를 사용하여 사용자 지정 모양을 제공할 수 있습니다.

00:10:43.000 --> 00:10:53.000
hoverEffect() 수정자는 수정하는 뷰에서 이 콘텐츠 모양을 읽습니다.

00:10:53.000 --> 00:10:55.000
거기서, 기분이 훨씬 나아졌어.

00:10:55.000 --> 00:11:00.000
호버 효과는 선명하고 약간의 패딩과 멋진 둥근 모서리가 있다.

00:11:00.000 --> 00:11:04.000
하지만, 나는 우리가 할 수 있는 일이 더 많다고 생각한다.

00:11:04.000 --> 00:11:12.000
SwiftUI에서, 컨트롤이 탭에 대한 응답으로 작업을 수행하는 경우, 컨트롤은 버튼일 가능성이 높습니다.

00:11:12.000 --> 00:11:18.000
새 보기를 버튼으로 바꾸자.

00:11:18.000 --> 00:11:25.000
버튼은 이 플랫폼에서 기본적으로 테두리가 있지만, 내가 보고 있지 않을 때 이 버튼들이 배경을 갖는 것을 원하지 않는다.

00:11:25.000 --> 00:11:33.000
나는 이것을 일반 버튼으로 만들 것이다, 그래서 그것은 표준 호버 효과를 얻지만 배경이나 내부 패딩은 없다.

00:11:33.000 --> 00:11:34.000
완벽해!

00:11:34.000 --> 00:11:39.000
이 버튼들은 표준 호버 효과가 있으며, 탭할 때 축소됩니다.

00:11:39.000 --> 00:11:43.000
호버 효과는 사생활을 보호하기 위해 만들어졌다.

00:11:43.000 --> 00:11:47.000
이러한 효과는 앱 프로세스 외부의 시스템에 의해 수행됩니다.

00:11:47.000 --> 00:11:52.000
시스템 호버 효과는 앱이 사람들이 보고 있는 곳에 반응하도록 하는 유일한 방법입니다.

00:11:52.000 --> 00:12:01.000
당신의 앱은 누군가가 손가락을 꼬집거나, 앱을 직접 만지거나, 손가락이나 포인터를 컨트롤 위에 올려놓을 때만 알려집니다.

00:12:01.000 --> 00:12:05.000
이 모든 변화 후에, 나는 뒷마당 새들이 꽤 좋아 보인다고 말하고 싶다.

00:12:05.000 --> 00:12:13.000
하지만 레이아웃을 약간 변경하고 이 플랫폼에 고유한 몇 가지 기능을 채택함으로써, 우리는 정말로 하늘로 갈 수 있습니다.

00:12:13.000 --> 00:12:15.000
최상위 레이아웃에 대해 이야기해 봅시다.

00:12:15.000 --> 00:12:25.000
iPad에서, 창의 수평 크기 클래스가 규칙적일 때, 증가된 너비를 더 잘 활용하기 때문에 사이드바가 탭 보기보다 선호됩니다.

00:12:25.000 --> 00:12:33.000
그러나 이 장치에서 창문은 화면 크기에 묶여 있지 않으며, 창문 안에 있는 컨트롤이 필요하지 않습니다.

00:12:33.000 --> 00:12:38.000
탭 뷰를 사용하여 최상위 뷰 사이를 전환하는 것을 고려해 보세요.

00:12:38.000 --> 00:12:45.000
탭 보기를 사용할 때, 탭 바는 사진에 있는 것과 같이 앱의 왼쪽에 부착됩니다.

00:12:45.000 --> 00:12:51.000
아이콘 중 하나를 보면, 각 탭의 라벨을 표시하도록 자동으로 확장됩니다.

00:12:51.000 --> 00:12:56.000
내비게이션 분할 보기에서 탭 보기로 전환해 봅시다.

00:12:56.000 --> 00:13:03.000
앱에서 각 화면을 볼 거야...

00:13:03.000 --> 00:13:14.000
...그리고 제목과 아이콘이 있는 탭 항목을 주세요.

00:13:14.000 --> 00:13:18.000
좋아!

00:13:18.000 --> 00:13:26.000
탭 표시줄은 상호 작용하지 않을 때 축소되며, 앱은 이제 콘텐츠를 위한 훨씬 더 많은 공간을 가지고 있습니다.

00:13:26.000 --> 00:13:31.000
탭 바가 창문 내부가 아닌 창 밖에 어떻게 앉아 있는지 주목하세요.

00:13:31.000 --> 00:13:34.000
이런 종류의 애착은 장식품이라고 불린다.

00:13:34.000 --> 00:13:43.000
장식품은 창문 가장자리의 경계 밖에 위치하며 주요 콘텐츠와 함께 원하는 추가 컨트롤을 넣을 수 있는 좋은 장소입니다.

00:13:43.000 --> 00:13:51.000
탭 표시줄 외에도, 사진에는 하단에 라이브러리에 표시된 시간 범위를 제어할 수 있는 도구 모음이 있습니다.

00:13:51.000 --> 00:13:59.000
이러한 종류의 장식품은 매우 일반적이어서 bottomOrnament 배치를 사용하여 .toolbar 수정자로 자동으로 추가할 수 있습니다.

00:13:59.000 --> 00:14:04.000
도구 모음 장식품은 유리 캡슐 배경을 자동으로 제공한다.

00:14:04.000 --> 00:14:08.000
나는 뒷마당 새들에 추가할 장식품에 대한 아이디어가 있다.

00:14:08.000 --> 00:14:15.000
나는 내가 얼마나 많은 물과 씨앗을 빠뜨렸는지 주시하려고 노력하지만, 만약 내가 부족하다면, 나는 피더에 리필이 필요하다는 말을 듣고 싶다.

00:14:15.000 --> 00:14:20.000
Ornament() 수정자를 사용하여 이런 종류의 사용자 지정 장식품을 만들 수 있습니다.

00:14:20.000 --> 00:14:25.000
attachmentAnchor는 앱에서 장식품이 부착될 위치를 결정합니다.

00:14:25.000 --> 00:14:31.000
앱 창의 가장자리에 알림을 넣을 수 있지만, 하단에 정렬하고 싶습니다.

00:14:31.000 --> 00:14:38.000
contentAlignment 매개 변수를 사용하면 장식품의 어느 부분이 attachmentAnchor에 정렬되는지 선택할 수 있습니다.

00:14:38.000 --> 00:14:43.000
제 앱 하단에 장식품의 중앙을 넣고 싶습니다.

00:14:43.000 --> 00:14:50.000
사용자 지정 장식품의 내용을 더 잘 제어할 수 있기 때문에, SwiftUI는 기본적으로 유리 배경을 제공하지 않습니다.

00:14:50.000 --> 00:14:57.000
원한다면, 장식품의 내용에 .glassBackgroundEffect() 수정자를 사용할 수 있습니다.

00:14:57.000 --> 00:15:06.000
이제 내 마당에 물이나 씨앗이 충분하지 않을 때, 나는 내 앱 하단에서 이 메시지를 받을 것이고, 그것을 탭하여 그 마당으로 이동할 수 있다.

00:15:06.000 --> 00:15:07.000
정말 마음에 들어!

00:15:07.000 --> 00:15:16.000
SwiftUI는 실행 중인 플랫폼에 자동으로 적응하기 때문에, 공유 공간에서 뒷마당 새들이 집에 있는 것처럼 느끼게 하는 것은 간단했다.

00:15:16.000 --> 00:15:18.000
앱에서 같은 단계를 따를 수 있습니다.

00:15:18.000 --> 00:15:28.000
대화형 컨트롤에 호버 효과를 추가하고, 가독성을 위해 벡터 자산과 활기를 사용하고, 보조 컨트롤을 위한 장식품을 만드세요.

00:15:28.000 --> 00:15:37.000
3D 콘텐츠의 볼륨과 공간 경험을 위한 몰입형 공간과 같이 이 플랫폼에서만 가능한 것을 탐험할 수 있는 것이 훨씬 더 많습니다.

00:15:37.000 --> 00:15:46.000
"SwiftUI를 다음 차원으로 가져가세요"와 "SwiftUI로 창 너머로 이동"을 확인하여 앱을 창 너머로 확장하는 방법을 알아보세요.

00:15:46.000 --> 00:15:48.000
고마워 그리고 행복한 코딩!

00:15:48.000 --> 23:59:59.000
♪

