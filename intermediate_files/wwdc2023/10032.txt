10032
♪ ♪ 
Allen: Hello, everyone! 
I'm Allen, an engineer on the accessibility team, and welcome to "Meet Assistive Access" at WWDC. 
At Apple, we strive to ensure our products are accessible and inclusive to everyone. 
We understand that cognitive disabilities can present their own unique set of challenges in how people interact with our technology. 
Assistive Access is a mode that distills apps and experiences to their core to lighten cognitive load for people with disabilities. 
With the help of a trusted supporter, for example, a parent, guardian, or conservator, customizations in Assistive Access' settings will make it easy to navigate and use apps with greater independence than before on iPhone and iPad.
Today, we'll discover how to set up and turn on Assistive Access, as well as explore how it works. 
Next, we'll explore some of the goals and core values of Assistive Access. 
We'll discuss how your application will behave when Assistive Access is turned on. 
And finally, we'll discuss additional things to consider about your app's presentation in Assistive Access. 
With that, let's get started. 
Setting up Assistive Access is simple. 
As mentioned, trusted supporters can use the Settings app to customize Assistive Access to the needs of the person using the device. 
When first accessing this mode through settings, trusted supporters will be guided through the initial setup process. 
They'll be able to customize many aspects of Assistive Access, from choosing the preferred apps that will be allowed to run to choosing whether the battery indicator is present. 
Assistive Access can be turned on from its settings or by using the accessibility shortcut. 
Once entering into Assistive Access, the system displays a new lock screen with the capability to change its wallpaper in settings and an interface to inform people of notifications.
Navigating past the Lock screen, a new Home screen is displayed with larger app icons and larger text.
I've set up Assistive Access to include five Apple apps designed specifically for this mode: “Calls” to make or receive calls from friends and family, “Messages” to send and receive messages, “Music” to have access to favorite playlists, “Camera” to take pictures, videos, and selfies, and “Photos” to view saved photos and videos. 
Assistive Access is crafted with a set of design and development objectives aimed at creating an effective experience to reduce cognitive strain. 
Many apps on iOS and iPadOS have plenty of user interface items, including buttons, icons, menus, images, and more. 
For some people, this level of functionality and completeness can become a challenge to operate. 
People should be able to complete a task without distractions. 
Assistive Access reduces the available options, so people can find and navigate to their items of interest. 
Fewer steps and fewer options can help provide a clear path to success in completing a task.
Recognizing and recovering from errors can be difficult. 
When people encounter significant actions, such as deleting a file, they should be given clear instructions and given the opportunity to understand what is happening before continuing. 
This also includes reducing actions that are time-dependent and make it easy to go back at any time.
Creating familiar interactions and patterns is crucial to Assistive Access. 
It establishes a sense of predictability and comfort, while also engaging in a multi-modal experience, like seeing both text and images. 
This helps reduce cognitive strain, makes the interface familiar, and increases the chance the interface will be understood. 
By reducing complexity, helping people prevent errors, and creating familiar interactions, people can use iPhone and iPad with less difficulty. 
Now, let's take a look at how your app will behave when Assistive Access is turned on.
In Assistive Access, third party apps will just work. 
In this setup, I've added my app. Let's see how it looks.
When I open my app, Assistive Access adds the large back button displayed prominently at the bottom of the screen.
To make room for the back button, apps are displayed in a reduced frame by default. 
This is to ensure your app still looks great, in case you've designed your app based on individual device screen size. 
In addition, navigating back to the home screen can be done by tapping on the back button.
Some apps are designed specifically to be adaptive to varying devices and screen sizes. 
We've created a new info.plist key that will allow your apps to run in full screen, excluding the back button.
Add UISupportsFullScreenInAssistiveAccess to your info.plist file and set its value to yes. 
Use this key to let Assistive Access know you've designed your app to be adaptive to arbitrary screen sizes. 
My app has be designed for my audience and to have an adaptive layout, so this key is relevant to my app. 
Let's take a look at how my app behaves after adding this key.
Great, my app uses all of the available space in Assistive Access. 
Let's look at ways to ensure your app can do the same. 
Great apps on iPhone and iPad are designed to have a consistent layout that adapts regardless of your user's device. 
This means that your app does not hard code layout based on the device or screen size.
In SwiftUI, developers can take advantage of layout containers, such as Stacks and Grids, to arrange views, as well as layout modifiers to adjust or constrain the size, position, and alignment of a view. 
If you need a more customized layout for your app, check out the session "Compose custom layouts with SwiftUI." 
In UIKit, we can use AutoLayout and take advantage of two important features. 
The first is the Safe Area, which is the portion of the screen that is not obstructed by system hardware or software elements, such as the Dynamic Island or the Home indicator. 
Use the safeAreaInsets property to position your views within the visible portion of the interface.
Layout Guide is the second feature, which defines a rectangular region that helps you position and align your content on screen. 
Use the safeAreaLayoutGuide property to adjust elements and apply standard margins around content.
To learn more about making your apps adaptive, check out the session "UIKit: Apps for Every Size and Shape." 
Whether using SwiftUI or UIKit, this new Info.plist key, along with an adaptive layout, can ensure all users in Assistive Access have a great experience in your app.
Let's make sure everyone can enjoy and use your app, even in Assistive Access. 
Thanks for watching. 
♪ ♪