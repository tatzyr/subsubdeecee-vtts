10100

♪ ♪

こんにちは、私はWebKitチームのエンジニアであるDevin Roussoです。今日、SafariのWeb Inspectorの拡張機能を作成するエキサイティングな新しい機会を皆さんと共有するためにここにいます。

Web Inspectorは、AppleのすべてのプラットフォームでWebコンテンツをデバッグするための主要な開発者ツールです。

すでにWebサイトをデバッグするための多くの機能が組み込まれていますが、一般的な開発者ツールに組み込むのが難しいWeb開発の分野がしばしばあります。

人気のあるJavaScriptライブラリをデバッグしているか、作業内容にもっと具体的なものが必要なのかもしれません。

Web Inspectorの拡張機能は、これらの個人的なワークフローシナリオのための素晴らしいソリューションです。

クロスブラウザのWeb拡張機能とDevTools APIを利用することで、Safari 16のWebインスペクタに独自のタブを追加できるようになりました。

動作中のWeb Inspector拡張機能を簡単に見てから、独自の拡張機能を構築する方法を紹介します。

まず、Safariの拡張機能環境設定を開きます。

そして、Web Inspector拡張機能を有効にします。

次に、Safariの拡張機能の設定を閉じて、ページを調べます。

開発メニュー「Webインスペクタを表示」から行います。

Webインスペクタでは、要素タブのような多くの組み込みタブだけでなく、有効にしたばかりのWebインスペクタ拡張機能のタブも見ることができます。

ただし、この拡張機能を有効にしたばかりなので、まず現在検査されているページを操作する許可を与える必要があります。

Webインスペクタ以外の他の拡張機能と同じ許可期間オプションを持っているので、とりあえず1日のアクセスを許可しましょう。

このオープングラフ拡張機能は、私がこのセッションで構築するものです。

これは、ほとんどのウェブサイトがメッセージやその他のソーシャルメディアサイトのリンクプレビューで使用するためにページに置く一般的なソーシャルメディアメタデータを表示します。

Web Inspector拡張機能で何ができるかを簡単に見たので、それらがどのように構築されているかについて話しましょう。

他のSafari Web拡張機能と同様に、Web Inspector拡張機能はApp Storeのアプリを介して配布されます。

独自のWeb Inspector拡張機能を構築するには、MacとiOSアプリを構築するためのAppleのアプリ作成ツールであるXcodeが必要です。

Xcodeには、新しいSafari拡張アプリの作成を開始するのに役立つプロジェクトテンプレートも付属しています。

別のブラウザ用に作成した既存のWeb拡張機能がすでにある場合は、Xcodeのバンドルされた変換ツールを使用することもできます。

ターミナルからsafari-web-extension-converterを実行し、manifest.jsonファイルを含む拡張機能のディレクトリへのパスを渡すだけです。

その後、ビルドして実行する準備ができている拡張機能の完全なアプリプロジェクトが作成されます。

このツールの詳細については、WWDC 2020のMeet Safari Web Extensionsとオンラインドキュメントをご覧ください。

そこで今日は、Web Inspector拡張機能の基本的な構造について説明し、その拡張機能のコードを最適に評価する方法をカバーし、ユーザーのためのいくつかの優れたベストプラクティスについて説明します。

始めましょう。

Web Inspector拡張機能は、他のSafari Web拡張機能と同様に、ツールバーアイコン、背景ページ、コンテンツスクリプトなどで構成されていますが、専用のdevtools背景ページもあります。

それが実際にどのように機能するかを見てみましょう。

典型的なSafari Web拡張機能の構造は、名前、アイコン、説明など、拡張機能に関する基本的な詳細を宣言するマニフェストファイルから始まります。

拡張機能のすべての舞台裏のロジックを処理するための背景ページを宣言することができ、また、ユーザーが訪問したWebページに機能を注入するために使用されるコンテンツスクリプトを宣言することもできます。

Web Inspectorの拡張機能の場合、他のいくつかのページがミックスに入ります。

まず、Web Inspector拡張機能の舞台裏ロジックに必要なdevtoolsの背景ページがあります。

このページでは、ユニークなdevtools APIにアクセスでき、コンテンツスクリプトAPIの限られたセットのみアクセスできます。

このdevtoolsバックグラウンドページから、Webインスペクタに表示されるdevtoolsタブページを作成できます。

しかし、それはすべて単一のWebインスペクタのためのものです。

複数のWebインスペクタがある場合、それぞれにこの同じdevtools背景ページの独自のインスタンスがあり、関連するWebインスペクタが開いている間は生き残ります。

そのため、各devtoolsタブページの複数のインスタンスがある場合もあります。

この構造が実際にどのように見えるかを見て、Open Graph Web Inspector拡張機能の構築を始めましょう。

Xcodeで新しいプロジェクトを作成することから始めます。

私が作成するプロジェクトタイプは、Safari拡張機能アプリです。

本当に必要なのはmacOSだけですが、将来iOS機能を追加したい場合に備えて、マルチプラットフォームではそのままにしておきます。

この名前を「Open Graph」と名付け、残りのデフォルトを維持します。

使用しているApple開発者アカウントに基づいて、チームとバンドルの識別子を選択する必要があることに注意してください。

そして最後に、これをデスクトップに保存します。

今、私は一般的なSafari Web Extensionプロジェクトを持っており、変更する準備ができています。

私は最初に、すべてのWeb拡張子のルート設定ファイルであるmanifest.jsonファイルに連れて行かれます。

マニフェストファイルは、ローカリゼーション、画像、ページ、スクリプト、スタイルなど、拡張機能を構成する他のリソースを参照します。

Web Inspector拡張機能では、背景ページ、コンテンツスクリプト、ポップアップなど、これらのファイルの一部を必要としないので、マニフェストとプロジェクト全体から削除します。

さて、これをWeb Inspectorの拡張機能にしましょう。

これを行うには、マニフェストにdevtoolsの背景ページを追加し、それに対応するファイルと、その中で使用するJavaScriptファイルを作成する必要があります。

私はファイル-新規-ファイルに行くつもりです...

そして、下にスクロールして空のファイルテンプレートを見つけます。

マニフェストで使用した名前と一致するように、このファイルを「devtools_background.html」と呼びます。

場所はすでに私の他のリソースと正しいターゲットの一部のすぐ隣に設定されているので、ここで何も変更する必要はありません。

JavaScriptファイルで同じ手順をもう一度繰り返します...

...私は「devtools_background.js」と呼びます。

最後に、devtoolsの背景ページにJavaScriptファイルを含める必要があります。

このページは、Webインスペクタが開いたときに作成され、Webインスペクタに表示されるカスタムタブを作成する責任があります。

ほとんどの場合、タブを作成して、必要に応じて、先ほど見た権限が他の場所ではなく、インラインでユーザーに表示されるようにしたいと考えています。

このdevtoolsパネル作成APIは、3つの簡単な引数を取ります。

1つ目はタブの名前です。

そのために、ローカリゼーションメソッドを使用して、拡張機能のローカライズされた名前を検索しています。

次の引数は、使用するアイコンパスです。

これは、ユーザーがユーザーインターフェイスをズームすることを選択した場合、任意のサイズにスムーズにスケーリングするためのベクトル画像である必要があることに注意してください。

しかし、このアイコンを使用するには、拡張機能に必要な他のすべてのアイコンとともに、それが私のプロジェクトの一部であることを確認する必要があります。

「画像」フォルダのアイコンは、依然としてプロジェクトテンプレートのデフォルトです。

では、これらをプロジェクトから削除しましょう。

そして、私が以前に作成したいくつかのアイコンに置き換えてください...

...Devtoolsタブを作成するときに使用しようとしている「logo.svg」を含む。

これがここに来たので、devtoolsの背景スクリプトに戻ります。

3番目の引数は、Webインスペクタのタブで使用されるHTMLです。

そして、さっきの画像と同じように、使用する前にこのページを作成する必要があります。

私がAPIに与えた名前と一致するように、この名前を「devtools_tab.html」と名付けます。

ただし、devtoolsの背景ページとは異なり、このdevtoolsタブページは実際にユーザーに表示されるため、今回はJavaScriptとCSSファイルの両方を作成します。

JavaScriptファイルに「devtools_tab.js」という名前を付けます...

...そしてCSSファイル「devtools_tab.css」。

この構造をすでに設定しているのは素晴らしいことですが、今のところ、物事が正しく機能していることを確認するために、通常の「Hello World」を追加するだけです。

しかし、心配しないでください、私たちは少し後でこれを深く掘り下げます。なぜなら、まず、この拡張機能が一貫した外観を持っていることを確認するために、まだいくつかのアイコンを置き換える必要があります。

まず、デフォルトの大きなアイコンを置き換える必要があります...

...それを削除することで...

...そして、私の大きなアイコンをその場所にドラッグします。

ただし、この大きなアイコンはアプリの一部であるため、適切なターゲットに追加する必要があります。

残りのアイコンはすべてアセットカタログ、特にAppIconセットの一部です。

これらのアイコンはすでに用意したので、貼り付けます。

それで、デフォルトのアイコンをすべて置き換えたと思うので、今から拡張機能を実行します。

プロジェクトが初めて構築されるときに数秒かかる場合があることに注意してください。

そして、それはそこにあります!

このUIのほとんどはXcodeテンプレートからのものですが、デフォルトのアイコンではなく、アイコンが正しく表示されています。

Safari拡張アプリを少なくとも1回起動したら、Safariがそれを拾うためにアプリがもう実行される必要がないので、それを閉じることができます。

しかし、Safariでそれを見る前に、これはローカルに構築された未署名のアプリであるため、開発メニューで未署名の拡張機能を許可する必要があります。

今、Safariの拡張機能の環境設定で、私はグラフを開くことができます。私はそれをオンにします。

Safariタブを開いてapple.comを参照して、拡張機能を試すことができます。

そして、すでに私のアイコンがツールバーにあることがわかります。

そして、私の拡張タブがタブバーになりました。

切り替えると、先ほど見たのと同じ許可プロンプトが表示されます。

この許可プロンプトは、拡張機能で許可が必要な場合に自動的に表示されます。

さっきと同じように、私は1日それを許可します。

そして、先ほどdevtoolsタブページに追加した「Hello World」があります。

これらは、Safari 16用のWeb Inspector拡張機能を作成する方法の基本です。

要約しましょう。

devtoolsの背景ページを宣言し、Xcodeプロジェクトに追加しました。

そこから、Webインスペクタで新しいタブを作成して、カスタムツールを表示することができました。

そして最後に、拡張機能に必要な許可を検討し始めました。

Webインスペクタ拡張機能の場合、これは多くの場合、検査されたページのコードの評価に帰着し、通常はWebインスペクタ内に表示するためのデータを抽出します。

Web拡張機能には、すでにコードを評価するさまざまな方法があります。

Web Inspectorの拡張機能には、検査されたページ内のスクリプトを評価するための好ましい方法である別のAPIがあります。

このAPIを見て、OpenGraph拡張機能に使用する方法を見てみましょう。

検査されたウィンドウでJavaScriptを評価するためのこのdevtools拡張APIは、迅速な結果を得るための最良の方法です。

拡張機能が実行されているWebインスペクタに関連付けられているページを自動的にターゲットにします。

ユーザーは同時に複数のページを検査する可能性があることを覚えておいてください。

このAPIには、適切な結果を得るのに役立つ便利なオプションもいくつかあります。

デフォルトでは、このAPIに与えられた式は、検査されたページのメインフレームのコンテキストで評価されます。

ただし、frameURLオプションを使用して、別のフレーム内で評価を指定できます。

これは、拡張機能がページ内の多くの可能なサブフレームの1つからデータを抽出する必要がある場合に必要です。

OpenGraph拡張機能では、メインフレームについて心配するだけで済みますが、Web Inspector拡張機能のスクリプトを評価する際には、これを念頭に置いておくことをお勧めします。

拡張機能でこの機能を使用して、検査されたページからデータを取得して表示する方法を見てみましょう。

先ほど追加したプレースホルダ「Hello World」を、実際にCSSとJavaScriptファイルをロードするHTMLに置き換えることから始めます。

次に、基本的なCSSを追加して、devtoolsタブに素敵なスタイルを与えます。

devtoolsタブがWebインスペクタの残りの部分に収まることを確認したいので、devtoolsタブをWebインスペクタの残りの部分の外観に一致させるルート「color-scheme」プロパティを宣言しました。

私はシステムフォントファミリを使用し、フォントサイズを継承し、より重要なテキストの色を一致させています。

機能に関しては、ページにopengraphのメタデータがない場合に備えて、テキストを追加することから始めます。

Web拡張機能の他の場所と同じように、WebインスペクタでWeb拡張機能のローカライズされた文字列を使用できることに注意してください。

しかし、そのためには、同じローカライズされた文字列識別子をローカライズされた文字列ファイルに追加する必要があります。

次に、強力なdevtools inspectedWindow eval APIに提供するJavaScriptを作成します。これにより、検査されたページで評価できます。

この場合、検査されたページのDOMで一般的なopengraphメタデータ、特にタイトル、説明を照会したいです。

...と画像、および検査されたページのドキュメントの現在の準備状態は、それをすべてまとめて、戻り値を介してdevtoolsページに送り返します。

それが完了したら、これらのプロパティのそれぞれに対応するHTML要素をつかみ、収集されたデータを表示するように設定できます。

そして、文書がまだ準備ができていない場合は、短い遅延の後にもう一度試すことができます。

また、検査されたページがナビゲートするたびにこれをすべてやり直したいので、Navigatedにdevtoolsネットワークのリスナーを追加します。

これはすべて素晴らしく見えるので、私はそれをテストするためにもう一度構築します。

これで、Webインスペクタを開くか、すでに開いているWebインスペクタでナビゲートするたびに、すべてのページのオープングラフのタイトル、説明、画像を見ることができます。

そして、それは多くの新しくて強力なWebインスペクタ拡張APIのいくつかを使用する方法の簡単な例です。

私のOpenGraph拡張機能はとてもうまくいっています。

Web Inspector拡張機能のdevtoolsタブページが、検査されたページで評価できるようになりました。

結果データを取り、それを処理して、すばやくアクセスできるようにユーザーフレンドリーな形式で表示することができます。

では、Web Inspector拡張機能を作成する際に、優れたユーザーエクスペリエンスを実現する素晴らしい方法は何ですか?

常にdevtoolsの背景ページからdevtoolsタブページを作成します。

このようにして、ユーザーはこれらのタブがWebインスペクタのどこに表示されるかを確認でき、適切な許可プロンプトがインラインで表示されます。

特定のホスト権限を要求する代わりに、activeTab権限を使用して、Web Inspector拡張機能を可能な限りターゲットにしておくようにしてください。

また、CSS color-scheme プロパティまたは Web 拡張 devtools テーマ API を使用して、Web インスペクタの全体的なテーマと一致するようにしてください。

そこで今日は、Web Inspector拡張機能を使用してまったく新しいデバッグツールを作成する方法を紹介し、そうしながら心に留めておくべきいくつかの素晴らしいベストプラクティスを取り上げました。

詳しく見たい場合は、このセッションの関連リソースでOpenGraph Web Inspector拡張機能をダウンロードしてください。

私たちはあなたの考えを聞くことにとても興味がありますので、フィードバックアシスタントを使用してバグや機能のリクエストを提出するか、Safari開発者フォーラムで私たちとチャットしてください。

また、Web拡張機能の未来を形作るために、WebExtensionsコミュニティグループへの参加も検討してください。

また、今年の新機能の詳細については、Safari Web Extensionsの新機能とオンラインでのドキュメントを確認してください。

Webインスペクタ内でカスタムツールを作成する素晴らしい新しい機能について学ぶことを楽しんだことを本当に願っています。

私たちは、あなたが作成する素晴らしいWebインスペクタ拡張機能を見るのが待ちきれず、あなたが可能なことの限界を押し広げるすべての方法を楽しみにしています。

聞いてくれて本当にありがとう、そして私はあなたがWWDCの素晴らしい残りを持っていることを願っています。♪ ♪