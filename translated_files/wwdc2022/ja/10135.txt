10135

ヤン・ライ・ガニョン：こんにちは、私の名前はヤンです。

私はコアBluetoothエンジニアです。

今日は、Apple WatchのBluetoothデバイスのタイムリーなアラートについてお話ししたいと思います。

まず、watchOSアプリがバックグラウンドにある間にコンプリケーションを更新する方法を確認します。

次に、watchOSアプリでタイムリーなアラートを聞く方法について説明します。

また、watchOS 9で周辺機器を発見できる新しい方法も見ます。

最後に、Bluetoothアクセサリの設計に役立つベストプラクティスと推奨事項を提供します。

最初のトピックに飛び込みましょう。watchOSアプリのバックグラウンドでコンプリケーションを更新する方法。

昨年、watchOS 8では、バックグラウンドアプリの更新中にBluetoothアクセサリのコンプリケーションを更新する方法を導入しました。

これは、現在の気温を示すこの例のように、定期的に更新できるデータに最適です。

簡単な復習として、昨年のwatchOSでは、コンプリケーションを更新し、バックグラウンドで定期的に実行されるバックグラウンドアプリのリフレッシュを使用することができます。

バックグラウンドアプリの更新が行われるたびに、アプリはBluetooth周辺機器に再接続し、データを取得し、周辺機器から切断することができます。

これの詳細については、「BluetoothデバイスをApple Watchに接続する」というビデオをご覧ください。

しかし、ユーザーが知りたいBluetooth周辺機器で時間に敏感なイベントが発生した場合はどうなりますか?

watchOS 9では、Bluetoothアクセサリからのアラートをバックグラウンドで聞く方法を導入しています。

これがその仕組みです。

アプリの実行中にデバイスを接続し、特性の監視を開始します。

アプリの実行が停止すると、Core Bluetoothはお客様に代わってデバイスへの接続を維持し、特性の変更を聞き続けます。

デバイスがその特性の値を変更すると、アプリはそのイベントを処理するためのランタイムを取得します。

たとえば、ローカル通知を投稿したり、ネットワークリクエストを送信したりできます。

これは、ユーザーが気にする時間に敏感な情報をユーザーに提供することを目的としています。

食品温度計を持っているとしましょう。

オーブンから食べ物を取り出す必要があるときに警告を受けるために、希望の調理温度を設定できます。

温度が所望の温度に近づくと、温度計は特性の値を変更し、アプリは食べ物がほぼ準備ができているというローカル通知を投稿します。

食事が終わったら、希望の通知が届きます。

そして、気温が上昇し続けると、最後の通知が届きます。

まず、バックグラウンドモードの設定方法を確認しましょう。

WatchアプリのInfo.plistでUIBackgroundModesにBluetooth-centralを追加します。

Xcodeでは「必要なバックグラウンドモード」と呼ばれ、「アプリはCoreBluetoothを使用して通信する」を追加する必要があります。

これらのInfo.plistエントリは、バックグラウンド実行を中央として使用したい場合、iOS用のアプリと同じであることに注意してください。

iOSの「署名機能」に頼るのではなく、watchApp info.plistを手動で編集する必要があります。

コードを見てみましょう。 

すでに接続されていると仮定すると、GATTサービスを見つけて、GATTの特性を発見しました。

didDiscoverCharacteristicForコールバックを取得します。

コールバック内では、値が変更されるたびに通知を受け取ることを決定できます。

これはwatchOS 8と同じAPIですが、アプリがバックグラウンドにある間も機能するという違いがあります。

次に、didUpdateValueForで特性の値の変更を処理するためにデリゲートメソッドを実装します。

特性が変更されたら、ここにローカル通知を投稿したり、ネットワークリクエストを送信したり、アプリにとって理にかなっているものなら何でもできます。

このメソッドはフォアグラウンドとバックグラウンドの両方で呼び出されるので、両方のケースで正しいアクションを実行するようにしてください。

さて、あなたが考慮する必要があるいくつかの状況について話しましょう。

まず、Bluetoothの再接続のトピックについて。

デバイスが通信範囲外になると、タイムアウト後にBluetooth接続が切断されます。

これが発生した場合、アプリは再接続を試みるために「connectPeripheral」を呼び出すためのバックグラウンドランタイムを一時的に取得します。

これはiOSで起こることと同じです。

デバイスが再び範囲内になるとすぐに、Core Bluetoothはそれに再接続します。

さて、いくつかの制限について話しましょう。

これらの制限は、Apple Watchユーザーにとって最適なバッテリー寿命を維持するために重要です。

デバイスがBluetooth範囲の端にあり、バックグラウンドBLE接続中に繰り返し切断されると、再接続範囲が縮小されます。

これは、Apple Watchに近いデバイスのみが再接続されることを意味します。

これらの制限は24時間のローリングウィンドウでカウントされ、ユーザーがアプリで操作するたびにリセットされます。

もう1つの制限は、タイムリーなアラートのバックグラウンドランタイムの機会の数に関するものです。

ユーザーにとって重要なことが起こったときに変化する特性のみを監視します。

デバイスから定期的なデータを収集する必要がある場合は、バックグラウンドアプリの更新で行う必要があります。

アプリが制限を超えようとしていると、通知LeGattNearBackgroundNotificationLimitが投稿されます。

アプリがそのエラーを監視し、ユーザーがwatchOSアプリとやり取りしていないことに気づくのは良い習慣です。

このアラートが重要な場合は、ネットワーク要求やBluetooth周辺機器のUIの変更など、ユーザーと通信する別の方法を見つける適切な時期かもしれません。

制限を超えると、LeGattExceededBackgroundNotificationLimitという通知が投稿されます。

この時点以降、アプリはバックグラウンドランタイムを受信しなくなり、バックグラウンド接続がなく、バックグラウンドアプリの更新のみがあるwatchOS 8の動作に戻ります。

これら2つの通知は、GATT通知アップデートのエラーフィールドで取得できます。

バックグラウンドBLE接続の場合、カウントダウンするのではなく、エラーを使用して制限に達したときに知ることをお勧めします。

watchOS 9の場合、バックグラウンドランタイムの制限は5に設定されています。

これらの制限は両方とも、ユーザーがアプリを操作するたびにリセットされます。

また、アプリとのユーザーインタラクションがなかった場合に備えて、制限に達してから24時間後にリセットされます。

注：これらの制限は、BluetoothバックグラウンドLE接続にのみ適用されます。

これらの制限に関係なく、コンプリケーションがアクティブなウォッチフェイスにある場合、バックグラウンドアプリの更新は引き続き行われます。

各イベントを処理する時間は非常に短いです。

非常に複雑な処理を行うのに十分な時間がないかもしれませんが、重要なことが起こっていることをユーザーに警告するのに十分です。

最後に、バックグラウンドでタイムリーなアラートを聞くには、Apple Watch Series 6以降が必要です。

アラートを聞くことは、バックグラウンドでできることだけではありません。

watchOS 9では、アプリがバックグラウンドにある間に周辺機器を検出できます。

Bluetooth医療機器と、そこからタイムリーなアラートを検出するwatchOSアプリを持っているとしましょう。

電力を節約するために、周辺機器は深刻な状態を検出するまで宣伝しません。

したがって、デバイスとApple Watchの間にはまだ接続がありません。

ここでは、watchOSアプリは医療機器から一意のサービスUUIDをスキャンします。

今、医療機器が何かが深刻であることを検出すると、広告を開始します。

Apple Watchはこの周辺機器を発見し、バックグラウンドでアプリを起動します。

その後、アプリは検出された状態をユーザーに警告することができます。

仕組みは次のとおりです。Watchアプリは周辺機器のスキャンを開始し、Core Bluetoothはバックグラウンドでスキャンを続けます。

ペリフェラルの広告が検出されると、アプリにはバックグラウンドランタイムが与えられ、接続を開始できます。

これを実現するためにコードに飛び込みましょう。

APIはwatchOS 8から変更されていませんが、アプリがバックグラウンドであってもスキャンは尊重されます。

監視したいサービスUUIDで「scanForPeripherals」を呼び出します。

アプリがフォアグラウンドにある間はこれを行うことができ、アプリがバックグラウンドにある間は継続されます。

「allowDuplicatesKey」オプションを要求すると、アプリがフォアグラウンドにある場合にのみ利用可能になることに注意してください。

さて、いくつかの制限について話しましょう。

アプリの起動の間にアプリにバックグラウンドランタイムが与えられる回数には制限があります。

この制限は、GATT特性が変更されたときに以前に見たバックグラウンドランタイムと組み合わされます。

また、バックグラウンドで周辺機器をスキャンするには、Apple Watch Series 6以降が必要です。

要約すると、時計がバックグラウンドでスキャンしている間、限られた数のBluetoothサービスUUIDをスキャンできるようになりました。

では、これらの機能を最大限に活用するためにアクセサリーを設計する方法について話しましょう。

Bluetoothアクセサリを設計する際に考慮する必要があるパワートレードオフがあります。

消費電力が懸念される場合は、デバイスが深い睡眠に入り、アラートが発生したときにのみ関連情報を宣伝できるトポロジを選択する必要があります。

トレードオフは、タイムリーなアラートのたびにBluetooth検出時間で余分なレイテンシがありますが、より多くの電力を節約できます。

これは、医療機器の例で提供されるトポロジです。

一方、タイムリーなアラートに低レイテンシが必要なが、電力がそれほど心配でない場合は、バックグラウンドLE接続の使用を検討し、GATT表示でアラートを送信することができます。

アプリごとにBluetooth接続は2つに制限があることに注意してください。

これは、温度センサーの例で見たトポロジーです。

ユーザーがタイムリーなアラートで最高の体験をするために、タイムクリティカルなデータと非タイムクリティカルなデータをフィルタリングするために、周辺機器にできるだけ多くの処理とインテリジェンスを追加することを検討してください。

温度の例に戻ると、すべての温度を送信する代わりに、関連するイベントまたは温度が変化したときにのみを送信できます。

このアプローチの利点は、タイムクリティカルなイベントを定期的なデータから適切に分離すると、周辺機器とApple Watchユーザーの両方が電力を節約し、全体的により良い体験が得られることです。

デバイスが切断されたら、接続を再確立するための広告をお勧めします。

広告間隔は、再接続に必要な速度、バッテリー寿命など、Bluetooth周辺機器の要件によって異なります。

アクセサリーガイドラインでは、使用できるいくつかの異なる値を提供しています。

たとえば、デバイスのバッテリーに制約がある場合は、1022.5ミリ秒の値を使用できます。

別の例：20ミリ秒の速度で広告を出すと、理想的な条件で1秒以内に検出できるはずです。

この高い広告率が重要なイベントが発生する間のみ使用できるように設計できます。

では、接続間隔について話しましょう。

デバイスがバックグラウンドで接続されたままのトポロジを選択した場合は、少なくとも150ミリ秒などの長い接続間隔を使用することを強くお勧めします。

これにより、周辺機器のバッテリーを節約し、Apple Watchで最高のユーザーエクスペリエンスを提供します。

Bluetooth 5.3は、接続サブレーティングとともにApple Watchに搭載されます。

これにより、Bluetooth周辺機器がアイドル状態の状態で接続間隔を増やし、より低いレイテンシが必要なときにすぐに小さな接続間隔に変更することができます。

これは、プラットフォーム間の違いを示す表です。

これらは、Bluetooth Low Energyで現在サポートされている構成です。

昨年、新しいバックグラウンド実行モードとして、watchOSのバックグラウンドアプリの更新を導入しました。

今年は、シリーズ6以上を所有している場合は、今日説明したように、タイムリーなアラートでバックグラウンド実行を改善しました。

見てくれてありがとう!

。