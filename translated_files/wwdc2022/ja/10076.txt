10076

♪ ♪

オーウェン:こんにちは、あなたのiOSアプリをMacに持ち込むことを歓迎します。

私の名前はオーウェンで、Mac Catalystのエンジニアです。

変更なしでM1 MacでiOSアプリを出荷する場合でも、Mac Catalystでさらに進むことを考え始めている場合でも、さらに良くしたいCatalystアプリをすでに出荷している場合でも、アプリをMacで最高のものにするための新しいAPIとテクニックを共有することに興奮しています。

しかし、まず、Mac Catalystで何が可能かを紹介する開発者が行った素晴らしい仕事のいくつかを披露したいです。

Craftは、簡単に作成を開始し、美しいドキュメントを作成できる素晴らしいアプリで、App Storeの2021年のMac App of the Yearの受賞者です。

そして、Mac Catalystのおかげで、この素晴らしい経験はデバイス間で利用できるので、あなたの次のアイデアが当たったときにいつでも準備ができています。

DarkroomのスマートAI編集ツールは、写真のワークフローを合理化し、iPhoneやiPadで現場で編集を開始し、Mac Catalystアプリで自宅で仕上げることができます。

優れたデザイン、革新性、創意工夫でApple Design Awardを受賞し、2018年からApp Store Editor's Choiceアプリとなっています。

夜空は、あなたのコンピュータから直接宇宙を探索する素晴らしい方法です。

星座について学び、月、惑星、衛星の詳細な3Dモデルで詳しく見ることができます。

それは、そのデザインと息をのむようなビジュアルで複数のウェビー賞とロヴィ賞を受賞しています。

Asphalt 9 - Legendsは爽快なハイオクタンレースシミュレーションであり、Apple Design Awardを受賞した唯一のレースゲームであり、アクションはMac Catalystバージョンで大画面でさらにエキサイティングです。

さて、あなたのアプリのためにMacで素晴らしい体験を生み出すことができるすべての方法について説明します。

既存のiOSアプリをMacに取り込む最も簡単な方法であるM1でiOSアプリをネイティブに実行するためのいくつかの新しいオプションから始めます。

次に、XcodeでMac Catalystの実行先を追加し、変更点を説明します。

新しいデスクトップクラスのiPad APIを採用すると、Catalystアプリが無料で得られる新しい動作を披露します。

その後、新しいMac Catalyst APIで可能になったMac固有の改良を掘り下げます。

M1を搭載したMac上のネイティブiOSアプリのいくつかの新しいオプションから始めます。

あなたのiOSアプリは、Mac App StoreのM1 Macですでに利用可能です。

オプトアウトしていない限り、アプリは「iPhoneとiPadのアプリ」タブの検索で見つかります。

そして、Macでのアプリ体験を向上させることができるいくつかの新しい追加があります。

Info plistに追加できる新しいキーが2つあり、iOSアプリをMacで起動する方法を指定できます。

これらのキーはどのSDKバージョンにもバインドされておらず、macOS 12.1より前のiOSとMacでは無視されるため、恩恵を受けるアプリに追加しても安全です。

最初のキー「UISupportsTrueScreenSizeOnMac」は、アプリが遭遇する可能性のあるさまざまなディスプレイ構成に備えていることを示しています。

このようにして、アプリは互換性のあるiPadサイズではなく、真の画面サイズとピクセル密度を取得します。

2番目のキー「UILaunchToFullScreenByDefaultOnMac」は、アプリが起動するとすぐにフルスクリーンモードに入ることを好むことをシステムに伝えます。

これらの2つのキーは、特にゲームやマルチメディアアプリでうまく連携し、ピクセルパーフェクト、エッジツーエッジ、フルスクリーン体験を提供します。

これらのキーは、受賞歴のあるSky:Children of the Lightによって採用され、すぐに没入型体験を提供します。

ゲームが発売されるとすぐに、画面を豊かなディテールで満たすことで、美しい探検の世界にあなたを引き込みます。

Macでのアプリ体験を向上させるもう1つの方法は、キーボード、マウス、トラックパッドの入力をiOSのマルチタッチジェスチャーとアプリが期待するデバイスの動きに自動的に変換するTouch Alternativesです。

私たちはすでに、アプリストアで最も人気のあるゲームの多くに組み込みのタッチ代替サポートを追加しました。

起動すると、タッチコントロールがキーボードとマウスまたはトラックパッドにどのように変換されるかを説明するチュートリアルが自動的に表示されます。

たとえば、矢印キーを使用してウィンドウの中央からスワイプをシミュレートし、スペースバーを使用してタップを実行できます。

自動タッチ代替を選択するには、アプリで「com.apple.uikit.inputalternatives.plist」という名前の新しいplistファイルを作成します。

まず、「enabled」の文字列値を持つ「defaultEnablement」というキーを追加します。これは、Touch Alternativesがすぐにオンにする必要があることをシステムに伝えます。

その下に、「requiredOnboarding」という別のキーを追加します。

これは、アプリに最適なコントロールを決定したリストを含む配列です。

タップ、チルト、ドラッグ、スワイプ、トラックパッドからの直接タッチ入力の5つの異なるコントロールオプションをオンボードする選択肢があります。

Touch Alternativesを有効にすると、これらのコントロールはすべてアクティブになりますが、アプリにとって最も意味のあるコントロールを決定し、オンボーディングplistにハイライトしたいコントロールのみを追加する必要があります。

これは、アプリがMacで実行されたときに検出され、最初の起動時に、それらのコントロールを強調するオンボーディングシートが表示されます。

アプリの設定では、plistで指定された優先コントロールとすべてのコントロールの表示を切り替えることができます。

もちろん、最良の選択肢は、キーボードとカーソルのサポートをアプリに直接実装することです。

これにより、キーボードが接続されたiPadやMacを含むすべてのデバイスでアプリが正常に動作することを確認します。

詳細については、「アプリでハードウェアキーボードをサポート」と「トラックパッドとマウス入力を処理」のビデオをご覧ください。

今、私はすぐにMac Catalystアプリになるプロセスをカバーします。

プロジェクト設定にMac Catalystの宛先を追加すると、アプリは自動的にすべてのMacで実行できる完全なMac Catalystアプリに変換され、Mac Catalyst APIを使用してさらにカスタマイズできます。

また、ネイティブのAppKitスタイルのコントロールを提供し、アプリのコンテンツがネイティブスケールでレンダリングされるように、Mac用のインターフェイスを最適化することもできます。

チームが取り組んでいるMarkdownデモアプリを使用して、新しいiPadの機能を強調します。

最初にMacに持ち込んだとき、「Scaled to Match iPad」モードで実行されています。

Optimize for Macに切り替えると、多くの変更が自動的に行われます。

横に並べて比較すると、違いは明らかです。

アプリがMac用に最適化されると、UINavigationBarは豊富なNSToolbarに変換され、ネイティブのAppKitコントロールが提供されます。

この翻訳は、他のコントロールでも発生します。

また、テキストサイズも調整されます。

iPadのイディオムのテキストはiPadサイズでレンダリングされ、その後、元のサイズの77%に縮小されます。

Macイディオムのテキストは、ピクセルパーフェクトスケールで行われるネイティブMacフォントレンダリングで処理されます。

これは、テキストが常に鮮明に見えることを保証するので、私たちのアプリにとって理想的です。

アプリがMac Catalystにオプトインした上で、それがどれほどうまく機能するかを確認し、iPadOS 16の新しいAPIによって提供される新しい自動Macの動作を深く掘り下げたい。

「デスクトップクラスのiPadに会う」と「デスクトップクラスのiPadアプリを構築する」をすでに見ている場合は、iPadOS 16でアプリを強化するための多くの新しいツールについて学びました。

そして、これらの新しいAPIは、ネイティブのMac表現に美しく変換されます。

マークダウンアプリを見学し、これらの新しい行動のいくつかを強調します。

コントロールとナビゲーションは、UINavigationBarからNSToolbarに移動します。

また、ツールバーをまだ作成していない場合は、自動的に作成します。

すでにCatalystで独自のNSToolbarを管理している場合は、邪魔にならないようにします。

センターアイテムコントロールはNSToolbarItemsになります。

ドキュメントベースのアプリの場合、ウィンドウタイトルにドキュメント名が表示され、アクセシビリティシステム設定で「ウィンドウタイトルアイコンを表示」が有効になっている場合、ファイルプロキシアイコンもMacで期待どおりに表示されます。

また、ナビゲーションコントローラーを使用すると、戻るボタンやその他のナビゲーションコントロールもツールバーに持ち込まれます。

さらに、ファイルメニューに新しいドキュメント中心のメニュー項目が表示されます。複製、移動、名前の変更、名前を付けてエクスポートします。

これらのメニュー項目を有効にするには、レスポンダーチェーン内のオブジェクトがUIResponderの複製、移動、名前変更、およびエクスポート機能を上書きすることを確認します。

アプリがこれらのファイルメニュー項目を必要としない場合は、UIMenuBuilderで削除する必要があります。

アプリデリゲートにbuildMenuメソッドを実装して、アプリメニューを制御します。

新しいドキュメントメニュー項目のUIMenuIdentifier値は.documentです。

アプリに検索バーが含まれている場合、自動的にNSToolbarにも引き込まれ、最初にクリック時にバーに展開する検索ボタンとして表示されます。

それをバックアップするUISearchTextFieldはNSToolbarItem内でホストされており、これはカスタムビューでも利用できます。

検索候補メニューと検索スコープバーも、ネイティブのAppKitコントロールに変換されます。

デスクトップクラスのiPad機能を採用することで無料で得られるすべての新しいMacの動作に加えて、マルチウィンドウとツールバーの動作を改善するために、いくつかの新しいCatalyst固有のAPIも追加しました。

Markdownアプリをもう一度確認し、古いAPIと新しいAPIを組み合わせて、これらのMac固有の機能を追加します。

既存のMac Catalyst APIから、アプリを本当に強化するいくつかを選びました。

ネイティブコントロールと自動NSToolbarを取得するために、Macのイディオムを採用しました。

カスタムポインタを追加したので、カスタムスプリットビューの中央にあるスライダーハンドルの上にマウスを移動すると、スプリットのサイズを変更できることを示す水平ダブル矢印にポインタが切り替わります。

そして、UIApplicationSupportsPrintCommand plistキーで印刷サポートを追加しました。

アプリを検討するときは、これらの機能をすべて追加する必要があると感じないでください。

代わりに、作成するアプリの種類と、どの機能が最適かを考えてください。

MacとMacのCatalystヒューマンインターフェースガイドラインをチェックして、使用している他のアプリでインスピレーションを探してください。

これらの機能が実装されているため、アプリはすでに素晴らしい場所にいます。

そして今、いくつかの新しいMac Catalyst APIで、私はさらに多くのことを行うことができます。

アプリのウィンドウフレームとコントロールをカスタマイズしたり、NSToolbarにUIViewコンテンツを表示したり、ツールバーアイテムからポップオーバーを表示したりするための新しいオプションを追加しました。

これらの新しいAPIを使用して、WindowsからMacでアプリをさらに改善します。

Catalystアプリは、既存のUIWindowScene APIを使用して複数のウィンドウをサポートしています。

また、macOS Venturaの新機能では、トラフィックライトウィンドウコントロールのスタイルを設定し、プログラムでウィンドウのサイズを変更して再配置し、特定のシーンでフルスクリーンを無効にすることで、アプリウィンドウをさらにカスタマイズできるAPIを追加しました。

これらのツールを使用して、マークダウンアプリに機能を追加し、マークダウン構文で便利な補助パネルを表示します。

このパネルは、新しいジオメトリ要求APIでサイズが小さくなり、最小化ボタンとズームボタンが無効になります。

シーン作成時に、シーンデリゲートの「scene willConnectToセッション」メソッドで、目的のフレームを作成します。

常にeffectiveGeometryから現在のフレームから始めるのは良い習慣です。

シーンが作成される前に、これはCGRectNullに初期化され、その値はシステムが最初のシーン作成のために無視することを知っています。

サイズを変更し、新しいUIWindowScene.macGeometryPreferencesオブジェクトを作成し、フレームをsystemFrame引数として渡すことで、シーンに新しいフレームを与えます。

次に、scene.requestGeometryUpdate()メソッドを使用して更新を送信します。

これは要求であるため、システムは新しいジオメトリを拒否する権利を留保します。その場合、詳細とともにエラーハンドラコールバックを呼び出します。

ここに示すように、シーンwillConnectToSessionメソッドで完了すると、リクエストはアプリケーションの最初の起動に適用されますが、後の起動時にシステムによって実行される該当する状態の復元に取って代わられます。

また、これは小さなヘルパーパネルであるため、新しいwindowScene windowingBehaviorsオブジェクトから最小化ボタンを無効にし、sizeRestrictionsの新しいプロパティからウィンドウをフルスクリーンにする機能も無効にします。

この新しいMarkdownヒントウィンドウが表示されると、要求したサイズで表示されます。

黄色の最小化と緑のズームウィンドウのコントロールボタンは無効になっており、赤い閉じるボタンのみが残ります。

これらのオプションは、シーンの作成のためだけに予約されているわけではありません。

シーンの生涯のいつでも、読み取り専用のeffectiveGeometryプロパティから現在のフレームを確認し、必要に応じて変更し、新しいジオメトリの更新をリクエストできます。

これは、ウィンドウの原点を変更し、サイズを同じに保つ方法を示す別の例です。

幾何学には2つの重要な側面を心に留めておく必要があります。

まず、systemFrameはMacデスクトップ上のウィンドウのフレームを指示するため、systemFrameプロパティの1ポイントのサイズは常に1つのAppKitポイントのサイズです。

アプリがMac用に最適化されている場合、これはUI要素と同じスケールです。

ただし、アプリがiPadに合わせてスケーリングされている場合、77%のスケールファクターが異なります。

第二に、座標空間の原点がメインディスプレイの左上隅です。

複数のディスプレイがある場合、メインディスプレイはシステム表示設定のメニューバーを表示するものです。

新しいMac Catalyst APIを使用すると、3つのウィンドウコントロールボタンのそれぞれの状態を制御できます。

UIWindowSceneの新しいwindowingBehaviorsオブジェクトには、クローズ可能と小型化可能な2つのプロパティがあり、これらのそれぞれのウィンドウの動作を調整し、赤と黄色のウィンドウボタンを有効または無効にします。

緑色のウィンドウボタンは、デスクトップ上のウィンドウのサイズ変更と、ウィンドウをフルスクリーンにすることの両方を処理します。

sizeRestrictionsの新しいプロパティ「allowsFullScreen」でフルスクリーンを無効にするか、サイズ制限を使用して最小サイズと最大サイズを同じサイズに設定してサイズ変更を無効にすることができます。

そして、両方を行うことで、緑色のボタンも無効になります。

また、新しい「isFullScreen」プロパティを使用して、シーンが現在フルスクリーンであるかどうかを確認できます。

では、Mac用のツールバーの改良に焦点を当てます。

UINavigationBarからの自動変換に頼るか、アプリコードで独自のNSToolbarを管理するかにかかわらず、ツールバーのカスタマイズのための新しいオプションを追加しました。

Mac Catalystの新機能として、UIViewsをNSToolbarにアイテムとして追加できます。

現在の単語数を表示するアプリのカスタムUIViewを設計しました。

また、クリックすると、段落数やセクション数、読書時間、翻訳などの追加の詳細を含むポップオーバーが表示されます。

新しいデスクトップクラスのiPad APIを使用しているため、UIBarButtonアイテムのcustomViewプロパティは自動的にラップされ、ツールバーに追加されます。

しかし、NSToolbarを独立して管理する場合は、NSUIViewToolbarItemと呼ばれる新しいNSToolbarItemサブクラスも追加しました。

NSUIViewToolbarItemを使用して、他のNSToolbarItemと同様に、NSToolbarDelegateのitemForIdentifierメソッドからツールバーアイテムをインスタンス化できます。

イニシャライザはUIViewをラップし、NSToolbarに挿入されます。

NSToolbarは、ツールバーのカスタマイズモードに固有のツールバーアイテムインスタンスを期待しています。

UINavigationBarから自動NSToolbarホスティングを使用している場合、ビューは自動的にツールバーのカスタマイズのためにシステムによって複製されます。

ただし、独自のNSToolbarを管理する場合、デリゲートは同じUIViewインスタンスを再利用するのではなく、NSUIViewToolbarItemインスタンスごとにUIViewの一意のインスタンスを作成する必要があります。

ツールバーの新しいアイテムで、ポップオーバーの動作を追加します。

ツールバー項目のアクションで、ポップオーバービューコントローラーを作成し、そのソース項目をツールバー項目に設定します。

それから私はポップオーバーを提示します。

ポップオーバーコードを配置すると、ツールバー項目をクリックすると、ツールバー項目に固定されたポップオーバープレゼンテーションに追加の詳細が表示されます。

Mac Catalystの他のコントロールと同様に、UINavigationBarの新しいプロパティpreferredBehavioralStyleを使用して、ナビゲーションバーの翻訳をオプトアウトできます。

デフォルト値は自動ですが、.macに設定して翻訳を明示的に要求できます。

.Padに設定すると、ナビゲーションバーが自動的に翻訳されなくなります。

これらのオプションを使用すると、アプリのツールバーに新しいカスタマイズレイヤーを追加できます。

私たちは、あなたがこれらの新しいツールを使用してアプリをさらに良くする方法を見てとても興奮しています。

Mac App Storeで自動的にiPadアプリを使用すると、まったく新しいオーディエンスが利用できます。

iPadアプリをアップロードしたら、Macで実行して、自分で試してみてください。

または、Mac Catalystアプリになって次のレベルに引き上げ、iOS 16とmacOS Venturaの新しいAPIを使用して、アプリを最高のものにします。

アプリをMacに持ち込むのは簡単です。

私たちはあなたのハードワークを披露するのが大好きで、あなたが次に構築するものを試すのが待ちきれません。

ありがとうございます。