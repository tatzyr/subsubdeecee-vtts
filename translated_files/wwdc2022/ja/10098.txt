10098

♪ ♪

ブレイディ・エイドソン:こんにちは。私の名前はブレイディ・エイドソンです。

私はWebKitアーキテクチャチームのエンジニアです。

Safariでウェブプッシュを紹介できることを嬉しく思います。

Webプッシュを使用すると、Webアプリケーションのユーザーにリモートで通知を送信できます。

ここでは、画面の右上にwebkit.orgからの通知が表示されます。

通知をクリックすると、WebKitのブログ投稿が新しいウィンドウで開きます。

これがどのように機能するかについて他の詳細に入る前に、私はあなたの多くが持っていることを知っているいくつかの質問に事前に答えたいと思います。

ウェブプッシュは、macOS Venturaから始まるMac Safariでサポートされています。

そして、ウェブプッシュは来年iOSとiPadOSに登場します。

AppleのSafariプッシュ通知は、かなり長い間、Mac Safariユーザーにリーチするためのオプションでした。

引き続き機能しますが、今日はWebプッシュのサポートを追加したことを発表できることを嬉しく思います。これは本当にWebプッシュです!

他のブラウザで実装されているのと同じ、さまざまなウェブ標準の組み合わせ。

これらの標準については後で詳しく説明しますが...最も重要なことは、アプリケーションをWeb標準にコーディングした場合、Safariで動作するように変更する必要がないことです。

もちろん、ブラウザの検出でSafariを除外すると、その前にいくつかの作業があります。

今、ブラウザの検出から機能の検出に切り替えるのに最適な時期であり、これは常にベストプラクティスでした。

私たちは、すべてのMacとiOSデバイスでネイティブプッシュを強化するのと同じAppleプッシュ通知サービスを使用していますが、Safariユーザーに到達するためにApple Developerアカウントは必要ありません。

Webプッシュに新しいエンドポイントURLを使用しています。これは、意図せずにSafariを除外するために行っている可能性のある別のことをもたらします。

サーバー上のプッシュエンドポイントを厳密に管理する場合は、push.apple.comの任意のサブドメインからのURLを許可するようにしてください。

これらの重要な質問への回答を超えて、より詳細に入りましょう。

まず、SafariのWebプッシュ体験をユーザーの観点から見ていきます。

次に、許可を求めることから、通知センターでエントリのクリックを処理することまで、Webプッシュフロー全体について説明します。

最後に、既存のウェブアプリにウェブプッシュを追加するために必要なものを見ていきます。

しかし、まず、Mac Safariのユーザーエクスペリエンス。

そして、私はそれをデモでカバーするより良い方法を考えることはできません。

これがmacOS VenturaのSafariです。

このブラウザタブでwebkit.orgを開いています。

WebKitオープンソースプロジェクトを最新の状態に保つ必要があり、Web Pushはそれを行うための素晴らしい方法です。

Webkit.orgは、ユーザーがユーザーのジェスチャーで尋ねることなく、プッシュする許可を要求することはできません。

だから、ここでこのベル型のボタンをクリックして、通知を購読します。

ここに表示されているのは、システム通知プロンプトです。他のアプリケーションで表示されるものと同じです。

この場合、それはwebkit.orgの代理です。

「許可する」をクリックすると、準備完了です。

Webkit.orgは、新しいブログ投稿とソースコードリポジトリへの新しいコミットについて通知を受けるオプションを提供しています。

すべてのコミットについて通知を受けることは、重要な仕事から気をそらすことを知っていますが、私は絶対に新しいブログ投稿について通知を受けたいです。

だから、今そのボックスにチェックを入れます。

偶然にも、誰かがWeb Pushに関するWebKitのブログ記事を公開したに違いない。

この通知は他のものと同じように見え、webkit.orgに起因しています。

クリックしてアクティベートすると、Safariで開くブログ記事があります。

ユーザーがウェブサイトに許可を与えると、その許可を管理します。

macOSユーザーとして、私はシステム設定内で通知設定を管理することに慣れており、そこでwebkit.orgの通知を設定できます。

他のアプリやサービスで見つけるのと同じリッチ構成です。

Safariユーザーとして、私はSafariの設定内からウェブサイトの設定を管理することに慣れています。

また、webkit.orgの許可のオン/オフを切り替えることもできます。

そして、それがMac SafariのユーザーにとってWeb Pushの仕組みです。

先に進む前に、そのデモで取り上げたいくつかのことを繰り返したいと思います。

まず、ユーザーが要求していないサブスクリプションリクエストによってスパムされることを望んでいません。

したがって、ウェブサイトは、マウスクリックまたはキーストロークに応じてのみプッシュサブスクリプションを要求することができます。

ウェブサイトがユーザーに通知を表示する権限を持つと、ユーザーはその権限を制御します。

Safariの環境設定またはシステム設定で管理することを選択できます。

そして、彼らが両方でそれを管理した場合、設定は同期したままになります。

最後に、さまざまな種類のイベントの通知を提供する場合は、他のアプリと同様に、Webアプリ内の通知タイプのきめ細かなコントロールを提供することがベストプラクティスです。

ウェブプッシュの動作を見たので、各ステップで何が起こっているのかを掘り下げてみましょう。

すでにこれに精通している人もいます。

しかし、Web Pushを初めて利用する人のために、私はステップバイステップで、途中で関連する標準とドキュメントを参照します。

最初に起こることは、ユーザーがブラウザのタブであなたのウェブサイトを訪問することです。

Safariで開いているwebkit.orgです。

タブで開いているので、サービスワーカーをインストールできます。

サービスワーカーは、現在開いているブラウザタブとは別に、ドメイン全体に代わって動作するJavaScriptの単位です。

サービスワーカースクリプトがインストールされると、ウェブアプリはプッシュサブスクリプションをリクエストする資格があります。

すでに述べたように、この要求はユーザーのジェスチャーに関連付けられている必要があります。

Webkit.orgは、ユーザーのジェスチャー要件を満たすこのベル型のボタンをクリックするときに許可を要求します。

サイトがプッシュサブスクリプションを要求すると、ユーザーにこのシステムプロンプトが表示されます。

ここでは、あなたのウェブサイトにこの強力な能力を付与するための最後の呼び出しを行うことができます。

ユーザーがリクエストを拒否する可能性があります。

あなたのJavaScriptはそれを処理する準備ができているはずです。

しかし、ユーザーが許可を与えると仮定すると、JavaScriptはPushSubscriptionオブジェクトを取り戻します。

これには、サーバーがこのブラウザでこのユーザーにプッシュメッセージを送信するために必要なすべてが含まれます。

使用する正確なURLエンドポイントなどの情報。

このPushSubscriptionペイロードを、ウェブアプリに最適な方法でサーバーに送り返します。

多くの一般的なサーバーパッケージには、サブスクリプションを管理するためのWebプッシュサポートがあります。または、独自のサブスクリプションをロールできます。

サーバーが知っているURLエンドポイントにプッシュメッセージを実際に送信する方法とタイミングにも同じことが関係します。

いつそうすべきかは言えません。それはあなたとあなたのウェブサイト次第です。

しかし、あなたがそのプッシュメッセージを送ることに決めたら、私は次に何が起こるかを手伝うことができます。

プッシュにはインストールされたサービスワーカーが必要であることを覚えていますか?

サーバーがプッシュメッセージを送信し、Safariがそれを受信すると、Safariはサービスワーカーをスリープ解除し、JavaScriptプッシュイベントを送信します。

通知センターでユーザーに通知を表示することは、プッシュイベントを処理する際の要件です。

プッシュイベントを受信し、通知を表示すると、Webサイトが現在ブラウザタブで開いている場合に発生します。

また、ウェブサイトが現在ブラウザのタブで開いていない場合にも発生します。

macOS VenturaのSafariの場合、これはSafariが現在実行されていない場合でも発生します。

最後のステップ: ユーザーがその通知をクリックすると、Notificationclickイベントがサービスワーカーに送信され、適切に応答できます。

たとえば、その通知に関連付けられたURLに新しいウィンドウを開きます。

私たちのベルトの下でウェブプッシュフローを理解して、実際に既存のウェブアプリにウェブプッシュサポートを追加することで、さらに詳細に入る時が来ました。

webkit.orgに加えて、Browser PetsはSafariとWebKitチームにとって最もミッションクリティカルな内部ツールです。

部門の全員がSafariでお気に入りのWebKittensとPupsを最新の状態に保つことは、常にBrowser Petsのミッションステートメントであり、Web Pushはそれをこれまで以上に簡単にしました。

内部のBrowserPetsドメインには、ページの読み込みを高速化し、複数のタブ間で同期するためのServiceWorkerスクリプトがすでに登録されています。

高いレベルでは、ServiceWorkerスクリプトはこんな感じです。

エンジニアがタブのブラウザペットページにアクセスすると、このJavaScriptの抜粋は、サービスワーカースクリプトがすでに登録されているかどうかを判断するか、必要に応じて登録します。

ベストプラクティスとして以前に述べた、ここで機能検出を練習していることに注意してください。

サービスワーカーの前提条件が処理されたので、プッシュを購読する準備が整いました。

明示的なユーザージェスチャーなしでは、プッシュサブスクリプションをリクエストできないことを覚えておいてください。

ボタンのオンクリックハンドラに応答してこのスクリプトを実行することは、その要件を満たす多くの方法の1つです。

ユーザーがそのボタンをクリックすると、プッシュサブスクリプションをリクエストするコードが表示されます。

これらの各点について詳しく説明します。

まず、プッシュサブスクリプションのリクエストを設定する必要があります。

そのために重要な部分は、私たちのサーバーがAppleのプッシュサーバーに自分自身を識別するために使用する公開鍵です。

ここでは、他のブラウザと同じように、VAPIDと呼ばれる標準技術を使用しています。

ここではVAPIDの複雑な詳細については説明しませんが、サーバーのセットアップに最適なソリューションに役立つリソースがウェブ上にあります。

VAPIDキーセットで、サブスクリプションリクエストを設定する準備が整いました。

プッシュを常にユーザーに表示することを約束することを明示的に述べていることに注意してください。

JavaScript Push APIの標準は、オプションでプッシュに応答してサイレントJavaScriptランタイムに対応していますが、ほとんどのブラウザはそれをサポートしていません。

Safariはそれをサポートしていません。

そして、ほとんどのウェブサイトと同様に、ブラウザペットはそれを必要としません。

次に、プッシュする許可を要求します。

このJavaScriptの行は、ユーザーが承認または拒否するための許可プロンプトを表示します。

ユーザーがすべてのSafariチームメンバーがブラウザペットに対して行う許可を付与すると仮定すると、ブラウザでこのユーザーに到達する方法の詳細が記載されたPushSubscriptionオブジェクトが提供されます。

URLエンドポイントや、トランジット用のプッシュメッセージを暗号化するために使用されるキーなど。

最後に、これらすべての詳細をサーバーに送信する必要があります。

前述のように、この詳細は正確なアプリケーションによって異なります。

当社のBrowserPetsサーバーはWordPressを使用しており、すでに標準のWebプッシュをサポートするプラグインがいくつかあります。

同じことがバックエンドにも当てはまる可能性が高く、ほぼすべてのセットアップに適したソリューションを見つけるのに役立つリソースがウェブ上にあります。

次に、サービスワーカーのJavaScriptコードに戻る必要があります。

プッシュイベントから始めて、いくつかの新しいイベントを処理する必要があります。

プッシュメッセージがブラウザペットサーバーからこのブラウザに送信されると、このサービスワーカーにプッシュイベントが送信されます。

そのイベントには、サーバーから送信されたデータにアクセスする複数の方法を持つPushMessageDataオブジェクトが含まれています。

ここではJSONアクセサーを使用します。

私たちがプッシュを購読したとき、私たちのJavaScriptは彼らが常にユーザーに表示されることを約束したことを覚えていますか?

つまり、各プッシュに応答して、常にプラットフォームのネイティブ通知を表示する必要があります。

プッシュイベントハンドラでできるだけ早くこれを行うのが最善です。

URLを使用したアクションの設定など、通知を設定するためにJSONブロブから必要なものをすべて引き出しています。

それはすぐに役に立つでしょう。 

通知が表示されたら、クリックしたユーザーを処理する必要があります。

サービスワーカースクリプトが処理するもう1つのイベント。

このnotificationclickハンドラでは、BrowserPetsは新しいウィンドウを開くためにクリックされた通知からURLを取ります。

注意してください：これは非常に一般的なパターンです。

これは、Webプッシュをサポートするために書く必要があるJavaScriptのすべてです。

もちろん、開発中に助けてもらうのが最善です。

いつものように、そこでウェブインスペクタが登場します。

ブラウザタブで開いているWebサイトのデバッグを支援することに加えて、Webインスペクタはサービスワーカーインスタンスを検査し、イベントハンドラにブレークポイントを設定することもできます。

これらすべてを組み合わせると、プッシュを購読するJavaScriptと、プッシュイベントと通知イベントを処理するサービスワーカーコードを検査およびデバッグできます。

さらに、Appleプッシュ通知サーバーは、プッシュメッセージを公開しようとしたときに何か問題が発生した場合、人間が読めるエラーを表示します。

詳細については、このセッションに関連するリンクを確認してください。

また、ユーザーのプライバシーと電力使用量に関して、そのコードを書いている間に出てきたいくつかの点についても詳しく説明したいと思います。

重要なのは、私がこれを言ったのはこれが初めてではありません。プッシュを購読するには、ユーザーのジェスチャーが必要です。

Webプラットフォームの他の特権機能と同様に、ユーザーが実際にWebプッシュを有効にするように要求することは、ユーザーの信頼にとって正しいことです。

プッシュサブスクリプションをリクエストする方法のコードを示したときに述べたように、プッシュがユーザーに表示されることを約束する必要があります。

プッシュイベントを処理することは、JavaScriptがサイレントバックグラウンドランタイムを取得するための招待状ではありません。

そうすることは、ユーザーの信頼とユーザーのバッテリー寿命の両方を侵害することになります。

プッシュイベントを処理するときは、実際には通知センターに通知を投稿する必要があります。

他のブラウザはすべて、プッシュをユーザーに表示させるという約束に違反することに対する対策を持っており、Safariもそうです。

macOS Venturaのベータビルドでは、通知をタイムリーに投稿できなかった3つのプッシュイベントの後、サイトのプッシュサブスクリプションは取り消されます。

許可ワークフローをもう一度実行する必要があります。

それだけ。

私たちはWeb Pushをサポートすることを心から誇りに思っており、どのサイトでもApple Developerアカウントが不要で使用できることに興奮しています。

無意識のうちにSafariを除外しないように、標準にコーディングし、機能検出を使用している限り、ユーザーはすでにmacOS VenturaのSafari 16でWebプッシュの恩恵を受けることができます。

いつものように、今年はSafariとWebKitに他の多くの新しいものを追加しました。そのセッションをチェックして詳細を確認してください。

ご覧いただきありがとうございます。

WWDC 2022の素晴らしい残りをお過ごしください。