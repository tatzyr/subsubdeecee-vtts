10059

サム・ラザラス：こんにちは、私の名前はサムで、SwiftUIチームのエンジニアです。

SwiftUIを設計するとき、私たちは常に明確に定義された原則に基づいて決定を下すよう努めてきましたが、今日、そのうちの1つである漸進的な開示を強調します。

SwiftUIチームでは、新しいAPIの思考と構築に多くの時間を費やしていますが、あなたが気づいていないかもしれないのは、再利用可能なコンポーネントや抽象化を構築した瞬間、あなたもAPIデザイナーであるということです。

この講演では、設計プロセスのカーテンをはがし、漸進的な開示について学んだことを共有したかったので、次回再利用可能なコンポーネントまたは抽象化を構築するときは、ツールベルトに新しいツールがあります。

進歩的な開示が実際に何を意味するのかについて話すことから始めましょう。

結局のところ、それはAPIの設計に固有のものではありません!

実際、最も一般的なmacOS UIの1つである保存ダイアログで実際に見ることができます。

最初に保存ダイアログが表示されたら、デフォルトの場所がすでに入力されています。

さらに、ダイアログには、いくつかの一般的な場所を含むドロップダウンが表示されるので、選択する可能性のある場所に簡単にアクセスできます。

そして最後に、正しいパスを見つけるためにファイルシステムを閲覧する必要がある場合は、ダイアログを展開して、より複雑でより強力なUIを表示することができます。

ここには、必要なときに明らかにできるさまざまな複雑さの層があります。

これは、私たちがAPIで提供したいのと同じ経験です。

素敵なUI体験を提供することに相当するコードは、あなたのAPIを素晴らしい気分にさせることです。

開発者として、私たちはコードを書く場所、つまり宣言サイトの観点からコードを見ることに慣れています。

しかし、コードを素晴らしい気分にさせるには、コードが実際に使用される場所、またはコールサイトと呼ぶものなど、別の視点から見る必要があります。

したがって、プログレッシブ開示は、コールサイトの複雑さがユースケースの複雑さとともに増大するようにAPIを設計しています。

理想的なAPIは、シンプルで親しみやすいだけでなく、強力なユースケースにも対応できます。

これは開発者にとって本当の利点があります。

まず、最初のビルドと実行までの時間を最小限に抑え、APIをすばやく使用できるようにします。

また、コードの学習曲線を下げ、すべてのユースケースに関連しない概念によってAPIが行き詰まるのを防ぎます。

最後に、それはタイトなフィードバックループを作成します。

漸進的な開示を受け入れるAPIを使用すると、各ステップで作成したものを見て、少しずつ追加できます。

これらすべてが一緒になって、アプリの構築は、単一の大規模な先行投資ではなく、迅速な改良のサイクルになります。

したがって、漸進的な開示は有用な指針ですが、その原則を受け入れるように特定のAPIをどのように設計できますか?

SwiftUIチームでは、一般的なユースケースを検討することから始めます。

機能を徐々に開示するためには、単純なケースがどうあるべきかを特定する必要があります。

また、インテリジェントなデフォルトを提供するよう努めているため、これらの一般的なケースでは、必要なもののみを指定できます。

次に、コールサイトを最適化し、コールサイトのすべてのキャラクターに目的があることを確認することを目指しています。

そして最後に、可能性を列挙するのではなく、ピースを構成するようにAPIを設計します。

すぐに飛び込んで、一般的なユースケースをどのように考慮するかから始めて、SwiftUIのいくつかの例を見てみましょう。

SwiftUIがこれを特にうまくやっている場所の1つは、ラベルです。

たとえば、ボタンを作成するときは、ボタンのラベルを提供する必要があります。

ほとんどの場合、そのラベルはボタンの目的を説明するテキストであり、SwiftUIはそれを綴る簡潔な方法を提供します。

しかし、ボタンをさらにカスタマイズしたい場合、SwiftUIは別のオーバーロードを提供します。

これは、ラベルとして任意のビューを取ります。

これにより、このシンプルなコントロールから複雑な機能を構築できます。

しかし、このAPIは一般的なユースケースを慎重に検討しているため、99%の確率で、シンプルなバージョンだけが必要です。

このラベルパターンは、SwiftUIのどこにでも表示されます。

そして、私がどこでも言うとき、私は本当にそれを意味します。

したがって、一般的なユースケースを考慮することは、フレームワーク全体で行うことです。

次に、インテリジェントなデフォルトを提供することを見てみましょう。

一般的なユースケースを合理化するために、明示的に指定していないすべてのものにインテリジェントなデフォルトを提供する必要があります。

そして、SwiftUI: Textのすべてで最も一般的に使用されているAPIの1つよりも良い例はありません。

テキストはインテリジェントなデフォルトの素晴らしい例であり、指定する必要がないすべてについて考えずに、おそらくこのようなコードを何百回も書いたことがあるでしょう。

このコードだけで、SwiftUIは環境ロケールでアプリバンドル内のローカライズされた文字列を検索することで、テキストをローカライズします。

現在の配色に自動的に適応し、箱から出してすぐにダークモードをサポートします。

また、現在のアクセシビリティの動的タイプサイズに応じて、テキストを自動的に拡大または縮小します。

私たちは以前にこれらの行動について話しましたが、テキストはそれよりも舞台裏でさらに多くのことをしています。

たとえば、2つのテキストをスタックに並べて配置すると、テキスト間のスペースは、現在のコンテキストのテキストの正しい行間隔に自動的に調整されます。

その動作はすべて手動で指定できますが、SwiftUIのインテリジェントなデフォルトは、ユースケースに関連しない場合、コールサイトに表示されないことを意味します。

テキストは、最も単純なケースが非常に最小限であるAPIの例ですが、インテリジェントなデフォルトはあらゆる種類のコールサイトに適用されます。

例えば、ツールバーを考えてみましょう。

ここには、たくさんのボタンがあるツールバーがあります。

位置を明示的に指定することなく、ツールバーボタンはプラットフォームの慣習に従って配置されます。

macOSでは、ツールバーの最上端に表示されますが、iOSでは、後端からナビゲーションバーに表示されます。

そして最後に、watchOSでは、ナビゲーションバーの下に固定された最初の項目のみが表示されます。

これは大多数のケースでうまく機能しますが、より多くの制御が必要な場合は、アイテムの配置を明示的に指定するための追加のAPIを提供します。

繰り返しますが、必要に応じてカスタマイズはありますが、インテリジェントなデフォルトは大部分のケースを処理します。

一般的なユースケースを考慮し、インテリジェントなデフォルトを提供することは、いくつかの本当に素晴らしい経験を生み出しますが、これらのAPIを使用することが不格好な、または洗練されていないと感じる場合、それは全体の効果を台無しにする可能性があります。

これにより、通話サイトを最適化するという最後の戦略につながります。

そのために、別のAPIを見てみましょう:テーブル。

マルチカラムテーブルは、非常に機能豊富なコントロールです。

設定することがたくさんあり、機能がたくさんあります。

しかし、大多数のテーブルははるかにシンプルで、これらすべての機能を必要としません。

私たちは、テーブルがこのより複雑な動作を可能にすることを望んでおり、その最も冗長な形式では、それを持っています。

ソート、豊富なセルコンテンツを持つ複数の列、セクション化された行などをサポートしています。

しかし、より一般的なケースでも素晴らしい体験を提供したいので、このシンプルなテーブルに完全に指定されたコードを見て、コールサイトを最適化する方法を見てみましょう。

まず、この例を分解しましょう。

テーブルは、各行のデータの生成方法を指定することから始まります。

ここでは、現在読んでいる各本を反復し、それらの本ごとにテーブル行を作成しています。

次に、各行のデータから列に入力する方法を指定します。

ここでは、タイトル列と著者列を作成します。

また、ユーザーがテーブル列ヘッダーをクリックしたときにテーブルがソートを変更できるようにするには、ソート順へのバインディングも必要です。

最後に、ソート順序が変更されるたびにテーブルのデータを再ソートするコードを追加しました。

それは多くの情報なので、本当に漸進的な開示を受け入れるためにこのコールサイトを最適化する方法を見てみましょう。

すぐに目立つ一般的なユースケースの1つは、行に関係しています。

ほとんどの場合、行フィールドは、この例のように見えます。コレクション上のForEachは、各項目のテーブル行を提供します。

開発者はこれらすべてを自分でループする必要がないため、SwiftUIはボンネットの下でこれを処理する利便性を提供します。

コレクションをテーブルに直接渡すことで、ForEachの動作を舞台裏で提供し、コールサイトを大幅に簡素化できますが、これはさらに簡素化できます。

他の一般的なユースケースは何ですか?

さて、ほとんどの場合、表に表示したい値の1つが文字列の場合、テキストを使用して列に表示します。

このケースでは、コールサイトも最適化します。

値のキーパスが文字列を指すたびに、TableColumnに関連付けられたビューを省略できるようにします。

それはもう一つの重要な単純化ですが、最適化することはまだあります!

コールサイトには、すべてのテーブルが関心を持つ必要のない情報があります。ソート順です。

テーブルの最も簡単なユースケースは、並べ替えをまったく気にしません!

そのため、ソートにも関係のないテーブルのバージョンを提供します。

そして、これは私たちの最終的な反復に私たちをもたらします。はるかにシンプル!

このコールサイトのすべてのキャラクターは明確な目的を果たしており、すべてのステップで2つの重要な質問を自問することでここにたどり着きました。「利便性を構築すべき最も一般的なユースケースは何ですか？」

そして「常に必要とされるべき重要な情報は何ですか?」

これらのガイドの質問は、通話サイトを最適化するのに最適ですが、慎重に適用する必要があります。

APIへの影響を考えなければ、彼らはあなたを迷わせる可能性があります。

それは私たちの最終的な戦略に私たちをもたらします:作成し、列挙しないでください。

そして、これを説明するために、SwiftUIのレイアウトシステムの一部の設計について話しましょう:スタック、特にHStack。

まず、HStackにとって重要な情報が何であるかを考えてみましょう。

さて、どのコンテンツがスタックにあるべきか、そしてそのコンテンツがスタック内にどのように配置されるべきかを知る必要があります。

HStackのコンテンツを指定するビュービルダーがすでにあるので、配置に焦点を当てましょう。

強調したガイドの質問に戻ると、Hstackで要素を配置する際の最も一般的なユースケースは何ですか?

さて、時々、私は最先端から始めて、次々と箱を示すこのようなスタックを見せたいです。

もう1つの一般的なケースは、要素を中央に配置したいということです。

そして最後に、要素を後縁に合わせたいと思うかもしれません。

VStackはすでにこれと同様のケースであるアライメントを持つAPIを持っているので、スタック内の要素の配置に同様の列挙型を作成するのは魅力的に思えるかもしれません。

これは、私たちが言及したすべてのケースをサポートしています!

HStackの配置を指定することで、どちらが欲しいかに応じて、先頭、末尾、または中央の配置を選択できます。

しかし、今、要素を均等に間隔をあけたり、要素の間に間隔だけを置いたり、最後の要素の前にスペースだけを置いたりしたい場合はどうなりますか?

これは本当にめちゃくちゃになってきています!

しかし、もっと重要なのは、それは持続不可能です。

私たちが望むすべての行動に列挙ケースを追加する必要がありますが、すべての有用なケースを考えないかもしれません!

利便性を提供するのではなく、一般的なケースを列挙していることに気づいたら、APIを分解して、ソリューションを構築できる構成可能な部分に分解してみてください。作成、列挙しないでください。

スタックの場合、SwiftUIはスペーサーを提供し、スタックの要素で構成して、列挙したすべてのスペーシングスキームを構築できます。

ここでの漸進的な開示に最適なエクスペリエンスを設計することは、コールサイトを最小限に抑えるだけでなく、そのコールサイトがすべてのケースを処理するためにどのように拡張すべきかについて慎重に考える必要がありました。この場合、構成を通じて。

自分でコードを書くときは、作成したコンポーネントに同じ種類の慎重な考慮を適用すると非常に役立ちます。

そして要約すると、それは一般的なユースケースを考慮することから始まります。

プログレッシブディスクロージャーを適用することで、あなたが書いたコードは、最も一般的なユースケースで時間を節約できます。

インテリジェントなデフォルトは、これらの一般的なケースで詳細について考える必要がないことを意味します。

構築したコールサイトを最適化することで、すばやく反復できます。

そして最後に、コンポジションを利用することで、すべてのユースケースに対応するのに十分な柔軟性を備えたAPIを構築できます。

そして、あなたはAPIデザイナーなので、他の誰かのために設計されているか、あなたが使うためだけに設計されているかにかかわらず、毎日書くコードにこれらのレッスンを適用することができます。

ご覧いただきありがとうございます。

。