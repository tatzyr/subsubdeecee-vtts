10050

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは！私の名前はデヴォンです。

私はwatchOSチームのエンジニアで、今日はiOSについて話します。

そして、私はiOSのエンジニアであるグラハムです。今日はwatchOSについて話します。

ロック画面のアクセサリウィジェットとwatchOSのコンプリケーションを書くことができるWidgetKitへのAPIの追加について話します。

途中であなたを助けるためにSwiftUIへの追加とともに、両方を一緒に開発する方法を紹介します。

ウィジェット、タイムライン、リロードに慣れていない場合は、以前のWidgetKitセッションを探すことをお勧めします。

まず、合併症の歴史とそれらがどのように進化したかについて話します。

次に、新しい環境でウィジェットやコンプリケーションを色付けするための新しいAPIについて話します。

その後、グラハムは独自のウィジェットの作成を開始し、既存のウィジェット拡張機能をwatchOSに移動する方法をデモします。

次に、グラハムはこれらの小さな景色を最大限に活用する方法を説明します。

そして最後に、ウィジェットが表示される可能性のあるさまざまなプライバシー環境について説明します。

コンプリケーションはwatchOSプラットフォームの重要な部分であり、文字盤にすばやく簡単にわかる情報を表示します。

彼らはすぐにアクセス可能で価値の高い情報を伝え、タップするとアプリ内の関連する場所に移動します。

watchOS 2では、ClockKitで独自のコンプリケーションを作成できるようになりました。

それ以来、合併症は長い道のりを歩みてきました。

watchOS 5では、グラフィックコンテンツと一連の新しいファミリーを備えた豊富なコンプリケーションが導入されました。

SwiftUIコンプリケーションと複数のコンプリケーションがwatchOS 7で導入され、コンプリケーションを次のレベルに引き上げ、これまで以上に多くのオプションを提供することができました。

今日、コンプリケーションはWidgetKitで再考され、リメイクされ、SwiftUIを採用し、ウィジェットの形でiOSに一目を見やすいコンプリケーション体験をもたらしました。

iOS 16とwatchOS 9のWidgetKitを使用すると、両方のプラットフォームで見やすいウィジェットとコンプリケーションを構築できるため、コードを一度作成し、既存のホーム画面ウィジェットとインフラストラクチャを共有できます。

これを行うには、既存のウィジェットファミリータイプに新しいウィジェットファミリを追加し、「アクセサリ」という単語の先頭を付けました。

新しいアクセサリーRectangularファミリは、既存のClockKitグラフィックRectangularファミリと同様に、複数行のテキストまたは小さなグラフやチャートを表示するために使用できます。

accessoryCircularファミリーは、簡単な情報、ゲージ、進捗状況のビューに最適です。

このファミリーは、graphicCircular ClockKitファミリーにも取って代わります。

まったく新しいアクセサリーインラインは、watchOSとiOSの時間以上の多くの顔に存在するテキストのみのスロットです。

インラインスロットには多くのサイズがあり、後でそれらすべてを最大限に活用する方法について説明します。

watchOSに特有の新しいaccessormentCornerファミリーは、ウィジェットコンテンツの小さな円とゲージとテキストを混ぜ合わせています。

この講演では、iOSとwatchOSに共通する家族に焦点を当てています。

この新しいwatchOSファミリーとコンプリケーション固有の機能の詳細については、「WidgetKitコンプリケーションでさらに進む」セッションをチェックしてください。

色とレンダリングモードについて話しましょう。

アクセサリーウィジェットがいくつかの異なる外観を取ることに気づいたかもしれません。

システムは、アクセサリーファミリーウィジェットの外観を制御し、レンダリングスタイルに適応させるのに役立ついくつかのツールを提供しました。

ウィジェットが表示される3つの異なるレンダリングモードがあります。

ウィジェットは、フルカラー、アクセント、または鮮やかにすることができます。

これら3つの異なるプレゼンテーションを表すために、WidgetRenderingModeタイプを導入しました。

widgetRenderingModeキーパスを使用して、環境からこの値にアクセスできます。

その後、条件付きでコンテンツを変更して、表示されるすべての場所で正しく見えるようにすることができます。

watchOSのフルカラーモードでは、コンテンツは指定したとおりに表示されます。

既存の多くのコンプリケーションは、ウェザーゲージのグラデーションやアクティビティリングの色など、フルカラーでカラフルな外観になります。

アクセント付きレンダリングモードでは、ビューは2つのグループに分割され、独立して色付けされます。

2つの着色グループは平らに着色されており、元の不透明度のみを保持しています。

.widgetAccentable（）ビュー修飾子でビューをグループ化する方法をシステムに伝えるか、ウィジェットレンダリングモード環境値に基づいてコンテンツを切り替えて、平坦化されたときに完璧に見えるようにすることができます。

システムはさまざまな方法でコンテンツを着色することができ、その一部は反転していることに注意してください。

黒い背景にあるものもあれば、watchOS 9の新しいフルカラーの背景にあるものもあります。

iOSの鮮やかなレンダリングモードでは、コンテンツは不飽和になり、ロック画面の背景に合わせて適切に着色されます。

システムは、グレースケールコンテンツを素材の外観にマッピングします。

この素材は、その背後にあるコンテンツに適応し、その環境にぴったりと表示されます。

さらに、ロック画面は、鮮やかなレンダリングモードに色付きの色合いを与えるように設定できます。

光源の色は、ほとんど不透明で明るくなります。

一方、暗いソースの色は、その背後にある背景のあまり目立たないぼかしとして表示され、わずかな明るさしかありません。

読みやすさを確保するために、このモードでは透明な色を使用しないでください。

代わりに、読みやすさを維持しながら、目立たないコンテンツを表すために、暗い色または黒を使用してください。

このニュアンスの一部を支援するために、この円形カレンダーのように、それらを必要とするウィジェットに一貫した背景を与えるために、AccessoryWidgetBackgroundビューも導入しました。

ほとんどのアクセサリーウィジェットには背景がありませんが、一部のスタイルは1つで強化できます。

背景ビューは、さまざまなウィジェットレンダリングモードで異なる外観を取り、顔やロック画面のスタイルを正しく表示するようにシステムによって調整されます。

これは、フルカラーとアクセント付きの柔らかい透明なビューで、鮮やかな環境では黒で、低輝度と完全なぼかしになります。

グラハムは、ロック画面とwatchOSのコンプリケーションのためのいくつかの新しいウィジェットを作り始めることにとても興奮しています - 私はそれを彼に渡します。

またこんにちは!

WWDC2020の「Widgets Code-along」からよく知っている人もいるかもしれない既存のアプリ、Emoji Rangersに新しいウィジェットファミリーのサポートを追加します。

始める前に、既存のウィジェットフリーのプロジェクトを持っている人のためのメモ。

iOSに既に存在し、watchOSに持ち込まれたウィジェット拡張ターゲットをプロジェクトに追加することで始めることができます。

しかし、私はあなたの多くがすでにウィジェット付きのアプリを持っていることを知っているので、今日はそこから始めて、新しいウィジェットと合併症の追加について話しましょう。

絵文字レンジャーズプロジェクトを継続します。

このアプリは、私たちのお気に入りの絵文字レンジャーを追跡し、ホーム画面のウィジェットを使用して彼らの健康と充電時間を最新の状態に保ちます。

私たちはすでにEmoji RangersをwatchOSに持ち込み、お気に入りのアプリを手首にもたらしました。

今日は、新しいウィジェットファミリーをサポートしてEmoji Rangersを拡張し、ウィジェットの拡張機能を時計にもたらします。

ウィジェットの拡張機能を時計に取り付けることから始めましょう。

既存のiOSターゲットとコードを共有する新しいwatchOSターゲットを追加します。

iOSウィジェットの拡張ターゲットを複製し、より良い名前を付け、バンドル識別子を時計アプリの接頭辞に変更し、watchOSをターゲットにし、新しい拡張機能を時計アプリに埋め込みます。

今、私たちはwatchOSでコード構築を取得する必要があります - それに取りましょう。

EmojiRangerWidgetコードをちらっと見ると、システムがコンテンツをリロードするときに使用されるタイムラインプロバイダー、SwiftUIを使用してさまざまなファミリーのコンテンツを生成するビュー、ウィジェット設定、Xcodeプレビュープロバイダーが表示されます。

Emoji RangersアプリはすでにiOSのホーム画面ウィジェットをサポートしています。

それはシステム中小の家族を提供し、ここでウィジェット構成で、私は新しい家族を追加するつもりです。

システムファミリはウォッチでは利用できないため、プラットフォームマクロを使用してサポートされているファミリーを指定する必要があります。

プレビュープロバイダーでは、新しいファミリーのプレビューを追加します。

次に、watchOS用に正常に構築する前に、新しいIntentRecommendation APIを実装する必要があります。

インテントはiOSのUIを編集するウィジェットで完全に設定可能ですが、watchOSでは、事前設定されたリストを提供する必要があります。

IntentTimelineProviderの新しい推奨事項方法をオーバーライドすることで、それを行うことができます。

今、私たちは成功裏に構築しています。

プレビューを再開して、円形のウィジェットがどのように見えるか見てみましょう。

小さなウィジェットでも意図されたコンテンツは、私たちの新しいフォームファクタにうまく収まりません。

新しいウィジェットファミリーは、ホーム画面にあるiOSウィジェットよりも小さく、合併症の内容を考慮する必要があります。

それでは、私たちの合併症を際立たせるために使用できるいくつかの新しい見解について話しましょう。

景色に行きましょう。

systemSmallやその他のウィジェットのコードを見ることができます。accessmentCircularケースのコードを追加しましょう。

アバターだけで似合うと思います。

これは、私たちのアプリへのクイックショートカットを提供しますが、ユーザーには情報を提供しません。

エッジの周りにプログレスビューを追加しましょう。これにより、レンジャーがいつ再び戦闘の準備ができているかをユーザーに知らせることができます。

問題は、このプログレスビューを最新の状態にアニメーション化することで、短時間連続して多くのタイムラインエントリが必要になります。

代わりに、SwiftUIの新しい自動更新ProgressViewを使用できます。

それは私たちのレンジャーが完全に癒される日付間隔を取ります。

システムは進捗ビューを更新し続けます。つまり、ここで必要なのは1つのタイムラインエントリだけです。

はるかに良いです。

では、長方形のファミリーを追加してみましょう。

長方形のプレビューを選択します。

これにより、より多くのスペースが得られるので、コンプリケーションのスタイルで3行のビューを作ります。

最初にキャラクターの名前、次にレベル、そして完全に癒されるまでの時間、自動更新の日付フィールドを使用します。

キャラクターの名前を際立たせたいので、見出しのフォントスタイルを使用してテキストのサイズを調整し、その色を調整するwidgetAccentable修飾子を追加します。

私たちの景色はここで鮮やかに素晴らしく見えます。今、時計の他のレンダリングモードでどのように見えるかを見てみましょう。

キャラクターの名前がアクセントカラーにどのように表示されるかがわかります。

ウィジェットやコンプリケーションを環境でくつろげるには、デフォルトのフォントパラメータを使用し、フォントスタイルを使用することが重要です。

フォントのスタイルとサイズはiOSとwatchOSで異なります。

iOSは通常のテキストデザインを使用し、watchOSはより重い重量の丸みを帯びたデザインを使用しています。

ウィジェットやコンプリケーションは、他のウィジェットと隣接する画面上に置かれます。

そして、彼らは一貫して見えるので、フォントスタイルのタイトル、見出し、本文、およびキャプションを使用することをお勧めします。

Xcodeのプレビューは、アバターを追加する余地がまだ残っていることを示しています。

これがiPhoneでどのように見えるか見てみましょう。

それは素晴らしいですね！

最後に、テキストの行とオプションで画像を表示する3番目のスタイル、accessアクセサリーインラインを追加しましょう。

インラインアクセサリーは、システム定義のカラーリングとフォントに従って描画されることに注意してください。

プレビューを選択しましょう。

ヒーローの名前を見せて、カウントダウンを充電しましょう。

このテキストは私たちの時計スロットには長すぎます。

だから、今はViewThatFitsを見せるのに良い時期です。

長いものから簡潔なものまで、複数のビューを提供でき、ViewThatFitsは切り捨てやクリッピングなしで利用可能なスペースに合った最初のコンテンツビューを選択します。

テキストを短くしましょう。

それでも、最短の時計スロットには長すぎるかもしれないので、名前のアバターを切り替えて3番目の選択肢を提供しましょう。

それがどのように見えるか見てみましょう。

詳細については、「SwiftUIでカスタムレイアウトを作成する」セッションを参照してください。

すごい！

絵文字レンジャーでさえプライバシーを楽しむのが好きなので、それについて話すためにデボンに返します。

またこんにちは!プライバシーについて話しましょう。

これまでのところ、この講演では、ウィジェットのアクティブな状態と合併症について議論しました。

ただし、当社のプラットフォーム全体で、デバイスがコンテンツを編集しているのか、低輝度の状態にあるのかを検討する必要があります。

iOSのロック画面では、デフォルトの動作は、デバイスがロックされている間でもコンテンツを表示することです。これは、ここのグリッドの左上のセルです。

ただし、これは設定で設定可能であり、ユーザーは通知と同様に、ロックされたときにウィジェットを編集することを選択できます。

watchOSでは、時計が着用されている限り、デバイスはロック解除されたままです。

非アクティブの場合、時計は低輝度のプレゼンテーションと低い更新ケイデンスのコンテンツで、常にオンに移行します。

デフォルトでは、コンテンツは左下の状態である低輝度で編集されません。

ロック画面と同様に、ユーザーはこの常時オンの状態で編集するようにコンプリケーションコンテンツを設定できます。

この状態では、コンテンツが編集と低輝度の両方に対応していることを確認する必要があります。

一緒に、プラットフォームはここに示されている4つの州のそれぞれをカバーしています。

これらすべての可能な状態を考慮し、合併症とウィジェットがすべてのケースでうまく機能することを確認してください。

あなたがそれをどのようにできるかについて話しましょう。

時計では、ウィジェットは常時表示エクスペリエンスをサポートする必要があります。

\.isLuminanceReduced環境値を使用して、コンテンツを常時オンに適応させることができます。

ClockKitから来ている場合は、1つだけでなく、すべてのタイムラインエントリに常時オンのコンテンツを準備できることに注意してください。

常時オンの場合、時間相対的なテキストと進行状況のビューは、常時オンの低い更新ケイデンスをサポートするために、忠実度低下モードに変わります。

このモードをサポートするには、環境値を使用して時間に敏感なコンテンツを削除し、より低い更新頻度に合わせてコンテンツを最適化します。

では、編集について話しましょう。

デフォルトでは、プライバシーモードには、TimelineProviderが作成したプレースホルダビューの編集済みバージョンが表示されます。

機密性の高い要素や編集する必要のない要素がある場合は、.privacySensitive修飾子を使用して、編集するビューの一部のみをマークできます。

この例では、ウィジェットで心拍数を編集しましたが、画像は未編集のままです。

これで、ロック画面とWidgetKitの合併症のための素晴らしいウィジェットを作る準備が整いました。

SwiftUIの新機能の詳細については、「SwiftUIでカスタムレイアウトを作成する」トークをチェックしてください。

見てくれてありがとう。

♪