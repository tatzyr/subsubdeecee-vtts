10002

ベンジャミン・プーライン：皆さん、こんにちは。仮想化に関するセッションへようこそ。

これが私たちが今日一緒にやろうとしていることです。

Appleシリコンで、仮想マシン内でmacOSとLinuxを実行する方法を見ていきます。

このセッションの終わりまでに、あなたは自分のMacで同じことをすることができるようになります。

これは少し野心的に思えるかもしれませんが、私たちに固執し、一緒にやります。

これが今日の議題です。

仮想化技術の概要から始め、仮想化フレームワークを使用して仮想マシンを構築する方法を見ていきます。

次に、macOSを深く掘り下げます。

仮想MacをセットアップしてmacOSをインストールする方法を見ていきます。

そして最後に、今回はLinuxについて2回目の深い掘り下げを行います。

完全なLinuxディストリビューションといくつかのクールな新機能を実行する方法を見ていきます。

概要から始めましょう。

まず、仮想化を可能にするスタックを見ていきます。

すべてはハードウェアから始まります。

Appleシリコンには、CPUとメモリの仮想化を可能にする特別なハードウェアがあります。

これは、単一のSoC上で複数のオペレーティングシステムを実行できることを意味します。

次に、このハードウェアを利用するためのソフトウェアが必要です。

そして、これはmacOSカーネルに組み込まれています。

カーネル拡張機能やKEXTを書く必要がなくなりました。

それはすべて組み込まれています。

アプリケーションからこれらの機能を使用するには、ハイパーバイザーフレームワークを使用できます。

ハイパーバイザーフレームワークは、CPUとメモリを仮想化できる低レベルのAPIです。

しかし、低レベルのフレームワークであるため、仮想環境のすべての詳細を書く必要があります。

多くの場合、私たちは完全なオペレーティングシステムを実行したいと考えています。

このために、仮想化フレームワークである高レベルのAPIがあります。

仮想化フレームワークは、AppleシリコンとIntelの両方でAppleシリコンまたはLinuxでmacOSを実行する仮想マシンの作成を可能にします。

今日のセッションでは、仮想化フレームワークに焦点を当てます。

仮想化フレームワークを使用する場合は、2種類のオブジェクトを扱います。

最初の種類は構成オブジェクトです。

彼らは私たちの仮想マシンのすべてのプロパティを定義します。

2番目の種類は仮想マシンオブジェクトです。

これらのオブジェクトは、仮想マシンとそれらと対話する方法を抽象化します。

構成を見ることから始めます。

構成はハードウェアを定義します。

設定の作成は、Apple StoreでMacを設定するようなものです。

必要なCPUの数、メモリの量、デバイスの種類を定義します。

簡単な設定から始めることができます。

ディスプレイを追加して、コンテンツを見ることができます。

キーボードを追加して、入力することができます。

トラックパッドを追加して、UIと対話することができます。

仮想マシンの設定はまさにそれです。

しかし、私たちは仮想マシンを扱っているので、これをコードで行います。

Swiftで設定を書く方法を見てみましょう。

ハードウェアの定義はとても簡単です。

VZVirtualMachineConfiguration型のオブジェクトから始めます。

これはすべての構成のルートオブジェクトです。

次に、マシンが持つべきCPUの数を定義します。

ここでは、4つのCPUを与えます。

次に、必要なメモリの量を設定します。

この場合、4ギガバイトのメモリを与えます。

最後に、マシンが持つデバイスを定義します。

この例では、単一のストレージデバイス、起動するディスク、およびマウスのようなポインティングデバイスを設定します。

利用可能なデバイスはたくさんあります。

あなたが設定したものは、あなたが解決したい問題に依存します。

今、私たちは設定を見ました。

これは、CPU、メモリ、およびデバイスを追加するVZVirtualMachineConfigurationから始まります。

次に、仮想マシンのオブジェクトを調べます。

Macを設定したら、メールで受け取ります。

箱を開けて始める時が来ました。

しかし、私たちは仮想マシンを扱っているので、コードでそれを行う必要があります。

スウィフトでそれを行う方法を見てみましょう。

まず、設定からVZVirtualMachineのインスタンスを作成します。

VZVirtualMachineは、仮想ハードウェアのインスタンスを抽象化します。

仮想マシンが手になったので、それを操作できます。

たとえば、この場合、start() を呼び出して起動します。

私たちはしばしば、仮想マシンと対話したいと思うでしょう。

このために、私たちは私たちを助ける他のオブジェクトを持っています。

たとえば、仮想ディスプレイを表示したい場合は、VZVirtualMachineViewタイプのオブジェクトを使用できます。

ビューを作成することから始めます。

次に、仮想マシンをビューのvirtualMachineプロパティとして設定し、準備が整いました。

これで、このVZVirtualMachineViewオブジェクトを他のNSViewと同様に使用できます。

アプリに統合して、仮想マシンのコンテンツを確認できます。

最後に、私たちは構成を見てきました。

設定はVZVirtualMachineConfigurationから始まり、そこからCPU、メモリ、およびデバイスを定義します。

設定から、仮想マシンを作成し、仮想マシンオブジェクトを使用します。

VZVirtualMachineがVM自体を抽象化し、VZVirtualMachineViewがコンテンツを表示し、VMを使用するのに役立つ他のオブジェクトがあります。

私たちは、構成が仮想マシンを定義する方法に多くの柔軟性を与えるのを見てきました。

残念ながら、1回のセッションでカバーできない機能が多すぎます。

このセッションでは、コア機能のいくつかを見ていきます。

それ以外のすべてについては、ドキュメントがありますので、ぜひチェックしてください。

概要では、仮想マシンを構築する方法を見ました。

今、それらで完全なオペレーティングシステムを実行する方法を検討する時が来ました。

そして、私たちはmacOSから始めます。

仮想化フレームワークは、Appleシリコン上のmacOSをサポートしています。

Appleシリコンで仮想化フレームワークを構築したとき、私たちはmacOSと仮想化フレームワークを一緒に開発しました。

これが私たちにもたらすのは、仮想マシン内でmacOSを実行するときの信じられないほどの効率です。

私たちが見ようとしているものは次のとおりです。まず、仮想マシンを仮想Macに変えるために必要なものを調べます。

次に、仮想MacにmacOSをインストールする手順を見ていきます。

次に、macOS用の特別なデバイスのいくつかを見ていきます。

そして最後に、ホストシステムと仮想Macの間でファイルを共有するという非常に重要なユースケースを調べます。

設定から始めましょう。

私たちは以前、一般的な仮想マシンを構築する方法を見てきました。

次に、仮想マシンをMacにする特別なプロパティを追加します。

では、どうやって仮想Macを作るのですか?

まず、特別なプラットフォームを定義します。

プラットフォームは、特定のタイプの仮想マシンのすべてのプロパティを保持するオブジェクトです。

仮想Macハードウェアに固有の3つのプロパティがあります。

まず、ハードウェアモデルがあります。

ハードウェアモデルは、必要な仮想Macのバージョンを指定します。

第二に、補助ストレージがあります。

補助ストレージは、システムで使用される不揮発性メモリの一種です。

そして第三に、機械識別子があります。

マシン識別子は、物理的なMacが一意のシリアル番号を持っているのと同じように、マシンを表す一意の番号です。

プラットフォームを手に入れたら、ハードウェアを説明するすべての部分がありますが、macOSを起動する方法であるもう1つの部分が必要です。

これには、特別なブートローダであるmacOSブートローダを使用します。

スウィフトでこれらすべてを行う方法を見てみましょう。

私たちは以前と同じベースから始めます。

このコードは、私たちが概要で見たものです。

次に、VZMacPlatformConfigurationを作成します。

これは、仮想Mac用のプラットフォームオブジェクトです。

このMacのハードウェアモデルが必要です。

ここでは、以前に保存したものを使用します。

仮想マシンでは、補助ストレージはローカルファイルシステム上のファイルによってバックアップされます。

ここでは、ファイルURLから補助ストレージを初期化します。

一意の識別子については、以前に保存した識別子からVZMacMachineIdentifierを初期化します。

新規インストールの場合、新しい識別子を作成することもできます。

3つのプロパティをすべて設定しました。私たちのプラットフォームは準備ができています。

私たちがしなければならないのは、設定オブジェクトに設定することだけです。

これは私たちにハードウェアを与えます。次に、起動する方法が必要です。

これを行うには、VZMacBootLoaderでブートローダを設定します。

今、私たちのマシンは起動する準備ができています。

これまでにやったことは、仮想Macとその起動方法を定義することです。

しかし、私たちはまだそれにソフトウェアを取得する必要があり、それは私たちにインストールをもたらします。

macOSのインストールは3つのステップで行われます。

まず、インストールしたいmacOSのバージョンで復元イメージをダウンロードする必要があります。

次に、そのバージョンのmacOSと互換性のある構成を作成する必要があります。

そして最後に、互換性のある仮想マシンに復元イメージをインストールします。

まず、復元イメージをダウンロードする必要があります。

開発者のウェブサイトから復元画像をダウンロードできますが、仮想化も役立ちます。

VZMacOSRestoreImage.latestSupportedを呼び出すと、最新の安定版のmacOSの復元イメージオブジェクトを取得できます。

このオブジェクトには、ファイルをダウンロードするために使用できるURLプロパティがあります。

次に、ダウンロードしたmacOSのバージョンと互換性のある仮想マシンを作成したいと考えています。

仮想化はここでも私たちを助けることができます。

復元イメージオブジェクトに構成要件を尋ねることができます。

復元イメージを現在のシステムで実行できる場合は、要件をリストしたオブジェクトを取得します。

要件から、このバージョンのmacOSを実行するために必要なハードウェアモデルを入手できます。

ハードウェアモデルを復元する方法を以前に見てきました。

これが私たちが新しいものを手に入れる方法です。

要件には、2つの有用なプロパティも含まれています。

このオブジェクトは、このバージョンのmacOSを実行するために必要なCPUの数とメモリの量を教えてくれます。

最後に、インストールを開始する準備が整いました。

まず、構成から新しい仮想マシンを作成することから始めます。

次に、インストーラーを作成します。

インストーラーは、作成した互換性のある仮想マシンと、ダウンロードした復元イメージへのパスの2つの引数を取ります。

これで、install()を呼び出すだけで、macOSを実行する準備が整いました。

仮想Macを設定してmacOSをインストールできるようになったので、Mac用の特別なデバイスをいくつか見てみましょう。

最初のクールな機能はGPUアクセラレーションです。

私たちは、GPU機能を仮想Macに公開するグラフィックデバイスを構築しました。

これは、仮想マシンでMetalを実行し、macOSで優れたグラフィックスパフォーマンスを得ることができることを意味します。

設定方法を見てみましょう。 

グラフィックデバイスの構成を作成することから始めます。

ここでは、VZMacGraphicsDeviceConfigurationを使用します。

次に、私たちはそれにディスプレイを与えたいと思います。

サイズとピクセル密度を定義してディスプレイを設定します。

これで、デバイス構成の準備が整いました。

いつものように、メイン構成オブジェクトに設定します。

仮想マシンのグラフィックスデバイスとして設定しました。

次に、Macと対話するための新しいデバイスがあります。

macOS Venturaでは、仮想MacにMacトラックパッドのサポートを追加しています。

新しいトラックパッドでは、回転、ピンチからズームなどのジェスチャーを使用できます。

この新しいデバイスは、macOSで新しいドライバを使用します。

そのため、それを使用するには、ホストシステムと仮想マシンの両方でmacOS 13が必要になります。

設定方法を見てみましょう。 

それはとても簡単です。

VZMacTrackpadConfigurationタイプの新しいオブジェクトを作成します。

次に、仮想マシン上のポインティングデバイスとして設定します。

これで、仮想Macでビューを使用する場合は、ジェスチャーを使用できます。

最後に、ホストシステムと仮想マシン間でファイルを共有するという、私たちの多くにとって一般的なユースケースを見てみましょう。

macOS 12では、Linuxでファイルを共有するためのVirtioファイルシステムデバイスを導入しました。

macOS Venturaでは、macOSのサポートを追加しています。

仮想マシンと共有したいフォルダを選択できるようになりました。

ホストシステムから変更を加えると、仮想マシンに即座に反映され、その逆も同様です。

設定方法を見てみましょう。 

まず、共有したいディレクトリでVZShareDirectoryを作成します。

次に、共有オブジェクトを作成します。

ここでは、VZSingleDirectoryShareを使用して単一のディレクトリを共有します。

VZMultipleDirectoryShareを使用して、複数のディレクトリを共有することもできます。

シェアがわかったので、デバイスを作成する必要があります。

しかし、私たちは何か特別なことを始めます。

ファイルシステムデバイスはタグで識別されます。

macOS Venturaでは、仮想マシンにこのデバイスを自動マウントするように指示する特別なタグを追加しました。

ここでは、この特別なタグ、macOSGuestAutomountTagを取ります。

次に、デバイスを作成し、特別なタグを使用します。

設定した単一のディレクトリから共有を設定します。

そして最後に、いつものようにデバイスを構成に追加します。

最後に、デモですべてを一緒に見てみましょう。

私たちは基本的な構成から始めます。

CPU、メモリ、キーボード、ディスクのみのVZVirtualMachineConfigurationがあります。

私たちは仮想Macが欲しいです。

これを行うには、プラットフォームを設定することから始める必要があります。

これを行うには、上記で定義されたcreateMacPlatformを使用します。

仮想Macの2番目の部分はブートローダです。

macOSの起動方法を知っているブートローダが必要です。

それを取得するには、プラットフォームのブートローダをVZMacOSBootLoader()に設定します。

次に、デバイスをセットアップします。

私たちは加速されたグラフィックが欲しい。

それを取得するには、VZMacGraphicsConfigurationを設定します。

オブジェクトを作成し、表示サイズとピクセル密度を定義し、設定に追加します。

次に、新しいトラックパッドを使いたいです。

私たちがする必要があるのは、ポインティングデバイスをVZMacTrackpadConfigurationに設定することだけです。

それでおそれ。

これで、VMを起動できますが、上にチェリーを追加しましょう。

ディレクトリを共有する方法を見てきました。

ここでやりましょう。

ファイルシステムデバイスの設定を作成することから始めます。

ここでは、特別なタグを使用してmacOSに自動マウントすることに注意してください。

次に、シェアを定義します。

ここでは、ファイルシステム上のパスから単一のディレクトリ共有を使用します。

ここでは、今編集しているこのプロジェクトを共有します。

設定にデバイスを追加し、完了です。

準備万端です私たちはアプリを起動します。

Macグラフィックスデバイスを設定したので、VZVirtualMachineViewはコンテンツを表示できます。

これはあなたがこの窓に見ているものです。

そして、ここにあります。macOSをゼロから設定しました。

共有ディレクトリと、今編集していたプロジェクトを見ることができます。

最後に、私たちはLinuxに目を向けます。

仮想化フレームワークは、macOS Big Surの当初からLinuxをサポートしてきました。

macOS Venturaでは、かなりクールな新機能を追加し、そのうちのいくつかをあなたと共有したいと思います。

まず、完全に変更されていない完全なLinuxディストリビューションを仮想マシンにインストールする方法を見ていきます。

次に、LinuxのUIを表示するために追加する新しいデバイスを見ていきます。

最後に、Rosetta 2を活用して仮想マシンでLinuxバイナリを実行する方法を見ていきます。

インストールから始めましょう。

物理マシンにLinuxをインストールしたい場合は、インストーラーでISOファイルをダウンロードすることから始めます。

次に、ISOでフラッシュドライブを消去します。

そして最後に、ドライブをコンピュータに接続し、そこから起動します。

仮想マシンを扱うときは、同じフローを経ます。

しかし、物理的なUSBドライブを使用する代わりに、仮想USBドライブを使用します。

それがどのように機能するか見てみましょう。

まず、ダウンロードしたISOファイルへのパスからURLを作成します。

次に、ファイルからディスクイメージの添付ファイルを作成します。

ディスクイメージの添付ファイルは、デバイスに接続できるストレージの一部を表します。

次に、仮想ストレージデバイスを設定します。

この場合、USBストレージが必要な場合は、VZUSBMassStorageDeviceConfigurationを使用します。

最後に、いつものように、メイン構成にデバイスを追加します。

ここでは、USBデバイスが別のストレージデバイス、Linuxをインストールするメインディスクの横に表示されます。

今、私たちはUSBドライブを持っていますが、そこから起動する方法が必要です。

macOS Venturaでは、EFIのサポートを追加しました。

EFIは、ARMとIntelの両方のハードウェアを起動するための業界標準です。

私たちは仮想マシンに同じサポートをもたらしています。

EFIにはブート検出メカニズムがあります。

これにより、USBドライブのインストーラーを発見することができます。

EFIは、起動できるドライブごとに各ドライブを調べます。

インストーラーを見つけて、そこから始めます。

インストーラー自体は、次にどのドライブを使用するかをEFIに伝えます。

インストール後、EFIはLinuxディストリビューションを起動できます。

コードでEFIを設定する方法を見てみましょう。

まず、VZEFIBootLoaderタイプのブートローダを作成します。

EFIは、ブーツ間で情報を保存するために不揮発性メモリを必要とします。

これはEFI変数ストアと呼ばれます。

仮想マシンでは、ファイルシステム上のファイルでそのようなストレージをバックアップできます。

ここでは、新しい変数ストアをゼロから作成します。

これでEFIの準備が整いました。

構成のブートローダとして設定するだけです。

次に、Linux VM、グラフィックスの新機能について検討します。

macOS Venturaでは、Virtio GPU 2Dのサポートを追加しました。

Virtio GPU 2Dは、LinuxがホストmacOSにサーフェスを提供できる準仮想化デバイスです。

Linuxはコンテンツをレンダリングし、レンダリングされたフレームを仮想化フレームワークに提供し、それを表示することができます。

macOSと同様に、VZVirtualMachineViewを使用して、このコンテンツをアプリに表示できるようになりました。

設定方法を見てみましょう。 

デバイスの設定は、私たちがmacOSでやったことと似ています。

VZVirtioGraphicsDeviceConfigurationを作成することから始めます。

仮想ディスプレイのサイズを定義する必要があります。

Virtioの用語では、仮想ディスプレイは「スキャンアウト」です。

そこで、ディスプレイのサイズで1つのスキャンアウトを作成します。

最後に、新しいデバイスを構成のグラフィックスデバイスとして設定します。

これで、VMはVZVirtualMachineViewでコンテンツを表示する準備が整いました。

次に、デモですべてを一緒に見てみましょう。

私たちは中断したところから始めます。

Mac固有のコードを削除しましょう。 では、Mac固有のコードを削除しましょう。

では、起動しているディスクを変更しましょう。

MacドライブからLinuxドライブへのパスを切り替えます。

次に、ブートローダが必要です。

VZEFIBootLoaderでEFIを設定しました。

まず、EFIブートローダオブジェクトを作成します。

次に、そのファイルから変数ストアをロードします。

そして最後に、設定のブートローダとしてEFIを設定しました。

これで起動できますが、UIを表示するといいですね。

Virtio GPUを構成に追加しましょう。

VZVirtioGraphicsDeviceConfigurationタイプのグラフィックデバイスを作成するだけです。

次に、仮想ディスプレイのサイズでスキャンアウトを定義します。

そして、私たちの構成でVirtio GPUをグラフィックデバイスとして設定しました。

最後のタッチは、マウスを動作させることです。

仮想USBスクリーン座標ポインタデバイスを使用するだけで、Linuxではマウスを使用します。

それでおそれ。私たちはそのプロジェクトを実行することができます。

EFIはディスクを見て、起動可能であることがわかりました。

次に、LinuxはVirtio GPUデバイスを介してUIのコンテンツを表示します。

そして、マウスを使ってLinuxと対話することができます。

最後になりましたが、Linux内のRosetta 2テクノロジーをどのように活用できるかを見ていきます。

私たちの多くにとって、私たちはMacでサービスを開発するのが大好きですが、作業の準備ができたら、作成したバイナリはx86サーバーで実行する必要があるかもしれません。

X86命令エミュレーションはこれにとって素晴らしいものでしたが、私たちはもっとうまくやることができます。

macOS Venturaでは、Rosetta 2のパワーをLinuxバイナリにもたらしています。

Rosetta 2が行うことは、仮想マシン内でLinux x86-64バイナリを翻訳することです。

これは、お気に入りのARM Linuxディストリビューションを実行でき、そのx86-64アプリはRosettaで実行できることを意味します。

そして、それは速いです。

それは私たちがMacで使用してきたのと同じ技術であり、それは私たちが信じられないほどのパフォーマンスを持っていることを意味します。

使い方を見てみましょう。 

まず、Linuxにロゼッタへのアクセスを許可する必要があります。

これを行うには、macOSで見たのと同じファイル共有技術を使用しています。

フォルダを共有する代わりに、特別な種類のオブジェクトであるVZLinuxRosettaDirectoryShareを使用します。

次に、共有デバイスを作成し、Rosettaディレクトリ共有を設定します。

最後に、通常どおり構成でデバイスをセットアップしました。

今、私たちの仮想マシンはロゼッタを使用する準備ができています。

次に、Linuxがそれをどのように活用できるかを見てみましょう。

Linuxでは、ファイルシステムに共有ディレクトリをマウントすることから始めます。

Linuxから見られるのは、アプリケーションを翻訳できるロゼッタバイナリです。

次に、update-binfmtsを使用して、x86-64バイナリを処理するためにRosettaを使用するようにシステムに指示することができます。

このコマンドを覚えておくことを心配しないでください。

それはすべてドキュメントにあります。

これでLinuxの準備が整いました。

起動されたすべてのx86-64バイナリは、ロゼッタによって翻訳されます。

Linuxのセクションを終了する前に、すべてを一緒に見てみましょう。

ここでは、完全なLinuxディストリビューションをゼロからインストールしています。

Virtio GPU 2DでUIを表示できます。

VM内から、ロゼッタでPHPサーバーを実行します。

そして、macOSホストから接続するだけです。

仮想マシンの作成がかつてないほど簡単になったことを見てきました。

仮想化フレームワークを使用すると、わずか数行のコードで仮想マシンを実行できます。

また、macOSでは仮想マシンが途方もなく高速であることも見てきました。

仮想化の詳細については、コードサンプルとドキュメントをチェックしてください。

そして、チームを代表して、あなたがこの技術で次に何をするかを見るのが待ちきれません。

。