10089

コンラッド：私はコンラッド・カーレンです。今日はPDFKitの新機能について話します。

これが私たちの議題です。

まず、PDFKitを簡単に確認し、次に、ライブテキストやフォーム、画像からPDFページを作成する新しい方法、そして最後にオーバーレイビューなど、新機能を見てみましょう。

PDFKitの仕組みを簡単に復習することから始めましょう。

PDFKitは、アプリがPDFファイルを表示、編集、書き込むのに役立つフル機能のフレームワークです。

iOS、macOS、Mac Catalystで利用でき、UIビューをアプリに統合できるラッパーであるUIViewRepresentableを使用してSwiftUIでも使用できます。

PDFKitは、アプリに必要な機能のほとんどをカバーする4つのコアクラスで構成されています。

PDFViewは、SwiftUIまたはInterface Builderを使用してレイアウトに含めるウィジェットです。

PDFドキュメントの内容を表示し、ユーザーがナビゲートしたり、ズームレベルを設定したり、テキストをペーストボードにコピーしたりできます。

PDFDocumentはPDFファイルを表します。

PDFDocumentのサブクラスは一般的ではありませんが、常に使用します。

それはPDFオブジェクトグラフのルート、または木の幹です。

これらなしでは木はできません。

各ドキュメントには、1つ以上のPDFPageオブジェクトが含まれています。

ページはコンテンツをレンダリングし、そのページに固有のフォントや画像などのリソースを保存します。

オブジェクトグラフの葉にはPDFAnnotationsがあります。

これらはオプションです。

PDFPageのコンテンツは編集を意図していませんが、注釈は本質的にインタラクティブであり、しばしば編集可能です。

これらのオブジェクトのそれぞれは、私が今日カバーするもので役割を果たします。

PDFKitの基礎の詳細については、以下のリンクにある素晴らしいプレゼンテーション「Introducing PDFKit」をチェックしてください。

では、iOS 16とmacOS Venturaで導入された新機能について話しましょう。

PDFKitはライブテキストをサポートするようになりました。

写真とは異なり、テキストは多くの場合、タップしてコピーできる少量です。

写真とは異なり、PDFでは、テキストを見ると、それは一般的にテキストであり、人々は特別なことを何もせずにそのように振る舞うことを期待しています。

これで、ライブテキストを使用すると、このようなPDFドキュメントのテキストを選択して検索できます。

スキャンされたビットマップで、テキストはまったくありません。

もちろん、PDFは多くのページを持つことができます。

PDFドキュメントを開くときに、PDFドキュメントのすべてのページでOCRをグラインドしたくないので、PDFKitは、各ページを操作するときにオンデマンドで行います。

OCRは実施されているので、文書のコピーを作成する必要はありません。

また、文書全体のテキストを保存することを選択した場合、保存時に保存するオプションがあります。

ライブテキストに加えて、PDFKitはフォーム処理を改善しました。

フォームフィールドを含むドキュメントは、組み込みのテキストフィールドが含まれていなくても自動的に認識されます。

期待どおりに、これらのテキストフィールドをタップしてテキストを入力できます。

次に、画像からPDFページを作成するための新しいAPIについて話しましょう。

iOS 16とmacOS Venturaには、アプリが画像を入力としてPDFページを作成できる新しい柔軟なAPIがあります。

アプリはCGImageRefを使用して画像を提供します。

PDFKitは、あなたが提供したCGImageRefを受け取り、高品質のJPEGエンコーディングを使用して圧縮します。

CGImageRefはCoreGraphicsのネイティブデータ型であるため、追加の変換は必要ありません。

最も一般的なケースを処理するのに役立ついくつかのオプションがあります。

MediaBoxはページのサイズを指定します。

画像に正確にフィットするか、レターのような用紙サイズを選択できます。

回転では、縦向きまたは横向きを指定できます。

アップスケールIfSmaller。

デフォルトでは、画像がMediaBoxよりも大きい場合、画像は収まるように縮小されます。

UpscaleIfSmallerが指定されている場合、それは引き続き適用されますが、画像が小さい場合は、ページを埋めるためにアップスケールされます。

そして今、多くの人が「PencilKitを使用してPDFページに描画するにはどうすればよいですか?」と尋ねた質問に答えるために、答えはオーバーレイビューを使用することです。

以前は、PDFで追加の描画を行う唯一の方法は、PDFPageをサブクラス化し、描画方法をオーバーライドするか、カスタムPDFアノテーションを使用することでした。

しかし、iOS 16とmacOS Venturaから、各PDFページの上に独自のビューをオーバーレイできるようになりました。

これにより、アプリはPDFページの上部に表示されるライブで完全にインタラクティブなビューを作成できます。

ビューのオーバーレイについて知っておくべき3つのことは次のとおりです。

まず、新しいプロトコルを使用して、オーバーレイビューをPDFページにインストールします。

保存するときは、コンテンツをPDFに組み込む必要があります。

そして、保存といえば、PDFドキュメントを保存する際のベストプラクティスをいくつか取り上げます。

PDFページにオーバーレイビューをインストールするのは簡単です。

PDFには数千ページではないにしても数百ページを含めることができるため、PDFを開くときにそれらのすべてのページのビューを作成する方法はありません。

そして、ユーザーが急速に前後にスクロールするとどうなりますか?

いつビューを作成するか、どうすればわかりますか?

幸いなことに、PDFKitはすでに、ユーザーがページをスクロールして表示する前にコンテンツをインテリジェントに準備するように設計されています。

そのため、オーバーレイビューを依頼するタイミングを最もよく知っています。

アプリは、新しいプロトコルを介して行われた要求に応答するだけです。

PDFPageOverlayViewProviderは新しいプロトコルです。

ちなみに、PDFKitPlatformViewは、プラットフォームに応じて、UIViewまたはNSViewの定義にすぎません。

実装する必要がある最も重要な方法は、overlayViewForPageです。

ビューのインスタンスを提供するだけで、PDFKitは適切な制約を適用してサイズをサイズ化します。

また、ページの回転がゼロではない場合も回転します。

次の2つのメソッドはオプションです。

willDisplayOverlayViewは、独自のジェスチャーハンドラをインストールしたり、PDFKitのジェスチャハンドラとの失敗関係を設定したりするために使用できます。

willEndDisplayingOverlayViewは、PDFKitがビューで終了したときに呼び出されます。おそらく、ページがスクロールアウトしたためです。

ここでビューを解放できますが、この方法には別の重要な用途があります。

ビューに描画しているものを表すデータがあると仮定すると、この方法を使用してそのデータを取得し、それを脇に置くことができます。

PencilKitの例で行いますが、ビューデータが他の場所にある場合は、これを実装する必要はありません。

この例では、これはプロバイダーとして使用しているクラスです。

PDFPageOverlayViewProviderプロトコルを実装しています。

これはiOSなので、PDFKitPlatformViewはUIViewです。

地図を使用してPDFPageからUIViewに移動します。

プレースホルダプロトコルメソッドは次のとおりです。

次に、実装を見てみましょう。

overlayViewForPageは、pageToViewマップをチェックして、指定されたページのビューがすでに作成されているかどうかを確認します。

そうでない場合は、新しいビューが作成されます。

いずれの場合も、ページから図面を取得し、それをキャンバスビューに設定します。

これらの例では、PDFPageのサブクラスを使用しています。

それは「描画」プロパティを追加するだけです。

では、次の方法、WillEndDisplayingOverlayに焦点を当てましょう。

willEndDisplayingOverlayViewはシンプルです。

ビューから図面を取得し、カスタムページクラスに保存します。

それをやったので、実際に見てみましょう。 

通常、今年のこの時期に、私はメイン州で釣りをしていますが、代わりにWWDCにいるので、別の人が旅行で私の場所を取っています、そして私は彼に私のお気に入りのスポットのいくつかを見せるつもりです。

オーバーレイビューでPencilKitを使用するこのアプリでそれを行います。

このアプリは、私たちが今見たコードと、他のほとんどで構成されていません。

画面上のオーバーレイビューを取得するためのコード全体は約30行です!

だから、グランドレイクストリーム。これはダムプールです。

そこにはいつもたくさんの魚がいます。それはほとんどの行動がある場所です。

このトレイルを森の中を下り、釣りをすることで、ダムプールに行くことができます。

あなたはそれらのすべてのものを釣ることができます、またはあなたはこの道を進み、ダムを越えて、この辺りを降りることができます。

そこから、ここに釣りをしたり、島を回ったり、ここに降りたりすることができますが、何をするにしても、ここを通り過ぎないでください。

水は深くて速くなります。

それを避けて、ここに降りて、孵化場に来てください。

孵化場の横を歩いて、このプールに入ってください。

あなたはここをあちこちにキャストすることができます。これは素晴らしいスポットです。私はいつもここで魚を捕まえます。

さて、ページにいくつかのマークがあるので、ズームとスクロールを練習しましょう。

それがどれほど反応するかわかりますか?

そして、私たちはそれを持っています。

PDFKitのオーバーレイビュー。

だから、これらのスケッチを持っているので、どのように保存しますか?

これを行うには、PDFAnnotationクラスを使用します。

保存時に達成したいことが2つあります。画面上の外観を忠実度の高いものにし、往復編集を行いたいと考えています。

PDF注釈には、これを容易にするいくつかの機能があります。

PDFアノテーションは、PDF描画コマンドのストリームである「外観ストリーム」を持つことができます。

Quartz2Dを使用して描画できるほぼすべてのものは、外観ストリームに記録できます。

他のものは画像にレンダリングでき、それを記録することができます。

メタルを使用している場合、それが私たちのやり方です。

また、PDF図面として記録されているため、Adobe Reader、Chromeなどで同じように見えます。

PDF注釈は、PDFドキュメントに辞書として保存されます。

つまり、カスタムデータを秘密鍵と値のペアで保存することもできます。

では、コードがどのように見えるか見てみましょう。

PDFAnnotationのサブクラスを作成することから始めます。

これは、draw()メソッドをオーバーライドするために行います。

PDFKitは、最後のスライドで言及した外観ストリームを保存すると、このメソッドを呼び出します。

ドキュメントを保存するには、UIDocumentのコンテンツ()を上書きします。

これは、後でコンテキストのために、関数の概要です。

PDFDocumentのすべてのページをループします。

次にループを具体化します。

各ページで次のことを行います。カスタムクラスの注釈を作成します。図面をデータにエンコードします。データを注釈に追加します。

次回、このドキュメントを開くと、value:forAnnotationKeyを使用して、保存された図面データを読み戻し、オーバーレイビューに入れることができます。

最後に、ページに注釈を追加します。

コンテンツ() オーバーライドに戻ります。

ページに注釈を追加したので、PDFDocumentのdataRepresentation()を使用して結果を返します。

コンテンツが注釈として保存されると、ドキュメントの受信者はドキュメントを移動したり、サイズを変更したり、削除したりできます。

多くの場合、それはあなたが望むものです。

しかし、時には、注釈をページの一部として「燃やしたい」ことがあります。

iOS 16とmacOS Venturaには、これを簡単にする新しいPDFDocumentWriteOptionがあります。

burnInAnnotationsOption = trueをセーブオプションに追加するだけで、それで行います。

PDF書き込みオプションといえば、iOS 16とmacOS Venturaで利用可能になったものがいくつかあります。

それらを見てみましょう。

CoreGraphicsは常に最大限の忠実度でPDFに画像を保存するよう努めてきたため、画像はロスレス圧縮でフル解像度で保存されます。

PDFが大判プリンターで印刷されるなら、それは素晴らしいことです。

しかし、画面に表示され、その高忠実度の画像データはすべて非常に大きなファイルになる可能性が高いです。

それに対処するために、次の2つのオプションを紹介します。

saveAllImagesAsJPEGは、それが言うことだけを行います。

画像がどのように作成されたかに関係なく、PDFにJPEGエンコーディングで保存されます。

optimizeImagesForScreenは、画像を最大HiDPI画面解像度にダウンサンプリングします。

これら2つのオプションは一緒に使用できます。

createLinearizedPDFは、インターネット用に最適化された特別な種類のPDFを作成します。

インターネットが登場する直前に最初に設計されたPDF形式は、ファイルの最後から読み取られます。

つまり、何かが表示される前に、まず全体をダウンロードする必要があります。

線形化されたPDFには、ファイルの先頭に最初のページを表示するために必要なものがすべて揃っているため、残りの部分が読み込まれている間、Webブラウザはそれをすばやく表示できます。

これらのオプションは、PDFDocumentのdataRepresentationまたはwriteToURLメソッドに渡すことができます。

そして、私たちはそれを持っています。PDFKitは強力でありながら使いやすく、今日のiOSとmacOSの多くのアプリで使用されており、現在はiOS 16とmacOS Venturaの新機能を備えています。

あなたが彼らと何をするかを見てワクワクしています。

詳細については、以下のセッションで追加情報を確認してください。

見てくれてありがとう!

。