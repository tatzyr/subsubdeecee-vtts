10049

♪インストゥルメンタルヒップホップ音楽♪

♪

こんにちは、「WKWebViewの新機能」へようこそ。WebKitチームのエンジニア、アレックス・クリステンセンです。

私たちは忙しく、今年はアプリで使用できる新しいウェブ技術をたくさん追加しました。 

しかし、始める前に、アプリケーションに適した技術を使用していることを確認しましょう。

アプリ内でブラウザのような体験をしたいし、深いカスタマイズを必要としない場合は、間違いなくSFSafariViewControllerを使用したいと思うでしょう。

アプリがまだ非推奨のUIWebViewを使用している場合は、今がより速く、より応答性の高いWKWebViewに移行する時です。

UIWebViewは今後のリリースで削除されます。

WKWebViewは、ウェブコンテンツと対話するアプリケーションを書くために使用するAPIです。

CSSベースのUIに使用したり、JavaScriptでアプリの一部を書いたりできます。

アプリにバインドされたドメインを使用して、独自のウェブコンテンツとやり取りしている可能性があります。

また、独自のブラウザを開発しているかもしれません。

アプリケーションが何であれ、よりリッチなWebアプリケーションを作成できるように、常に新しい機能を追加しています。

今年WKWebViewで利用可能な新機能には、Webコンテンツと対話する新しい方法、コンテンツブロッカーの新機能、暗号化されたメディア、リモートWebインスペクタの使用の4つのカテゴリがあります。

まず、ウェブコンテンツと対話するための新しいAPIを取り上げます。

iOS 16では、アプリがウェブコンテンツと対話できる3つの新しい方法があります。フルスクリーンAPIの使用、新しいCSSビューポートユニットの使用、検索インタラクションの使用です。

フルスクリーンから始めましょう。

長年にわたり、JavaScriptはビデオやキャンバスゲームなどのHTML要素をブラウザでフルスクリーンにすることができ、今ではアプリでもそれを行うことができます。

簡単な例が電話でどのように見えるかは次のとおりです。

JavaScriptはフルスクリーンで要求でき、ユーザーまたはJavaScriptはフルスクリーンを終了できます。

アプリで必要なのは、WKPreferences .isElementFullscreenEnabledをtrueに設定し、webkitRequestFullscreenなどのフルスクリーンAPIを使用するWebコンテンツをロードするだけです。

箱から出してすぐに機能しますが、アプリのトランジションをカスタマイズしたい場合は、WKWebView.fullscreenStateの値を観察できます。これは、Webコンテンツがフルスクリーンになったり、戻ってきたりしたときにアプリに知らせます。

そして、アプリでWebKitのフルスクリーンAPIを使用するのはそれだけです。

また、動的ビューポートサイズに従ってWebコンテンツをレイアウトできるようにするための新しいCSSユニットもあります。

これらの新しいCSSユニットには、svh、lvh、dvhなどが含まれます。

これにより、Web開発者は、最小、最大、および動的なビューポートサイズに基づいてレイアウトを変更できます。

これがあなたのアプリでどのように使用できるかを知るために、Safariが何をするかを見てみましょう。

Safariで最初にページを開くと、下部にウェブページのホストといくつかのボタンが表示されます。

スクロールすると、ボタンが邪魔にならないようにスライドすると、ビューポートのサイズが大きくなります。

Svh、lvh、およびdvhは、ビューポートのこれらの異なるサイズを測定するための有用な単位を提供します。

アプリがWKWebViewのビューポートを変更する場合は、ビューポートのサイズ範囲を事前にWebKitに通知する必要があります。

Swiftでは、1つの関数呼び出しは、このWebコンテンツがアプリで正しくレイアウトできるように、最大と最小のエッジインセットをWebKitに通知します。

また、iOS 16のWKWebViewでの検索インタラクションのサポートも導入しています。

多くのWKWebViewアプリケーションは大量のテキストをロードし、ユーザーはこのテキストを検索したいと考えています。

WKWebView .findInteractionEnabledをtrueに設定すると、ユーザーは使い慣れたUIとCommand-Fなどのショートカットを使用して、開いているページのテキストを検索できます。

この機能を有効にするために必要なのは、その1行のコードだけですが、WKWebView .findInteractionを介してUIFindInteractionオブジェクトにアクセスして、検索パネルを表示および終了したり、プログラムで次または前の結果に移動したりすることもできます。

試してみて、アプリで何ができるか見てみましょう。

コンテンツブロックについては、Safariでコンテンツブロッカーを実装するために使用されるAPIであるWKContentRuleListに新しい機能を追加しました。

ここでは、ウィキペディアがサンプルサイトのiframeに埋め込まれています。

以前は、要求されるURLとトップフレームURLで正規表現を実行して、ロードをブロックするか、他のアクションを実行するかを決定できました。

しかし、時々、あなたが本当に望んでいたのは、特定のルールが特定のiframe内の負荷にのみ適用されることでした。

これで、現在のフレームのURLで正規表現を実行できます。

ウィキペディアを含むフレームからのみ、画像をブロックするルールを書くつもりです。

これを行うには、このようにJSONにif-frame-urlを追加します。

次に、以前と同じようにJSONをコンパイルし、WKWebViewConfigurationに適用します。

その後、正規表現は、要求を行うフレームのURLで実行されます。

このブロッキングルールは、if-frame-url正規表現に一致するフレームからのリクエストにのみ適用されます。

ここでは、ウィキペディアのiframe内の画像の読み込みをブロックしていることがわかります。

コンテンツブロッカーの実装を真剣に考えているなら、宣言的なNetRequestにいくつかの新しい可能性を含むSafari拡張機能に関するWWDCセッションをチェックしてください。

iPadOS 16のWKWebViewのもう1つの新機能は、暗号化されたメディアです。

暗号化されたメディア拡張機能とメディアソース拡張APIを使用するコンテンツがある場合は、iPadOSのアプリで使用できます。

これは、AppleTV+のようなプレミアムコンテンツがある場合、macOSと同様にiPadOSで動作することを意味します。

アプリにウェブブラウザの資格がある場合、リモートウェブインスペクタはiOSのSafariと同じように本番アプリで動作します。コードを追加したり変更したりする必要はありません。

サードパーティのブラウザでWebインスペクタを有効にするには、Safariと同じプロセスです。

まず、iOSデバイスのSafari設定でWebインスペクタをオンにしてから、MacのSafariの[詳細設定]で[開発]メニューを有効にする必要があります。

携帯電話をMacに接続し、macOSのSafariの開発メニューでデバイスを探します。

Webインスペクタには、Webコンテンツをデバッグするための多くのツールがあります。

DOMを探索したり、JavaScriptの実行を実行およびデバッグしたり、ページ読み込みのタイムラインを表示したりできます。

ウェブサイトがある場合は、リモートWebインスペクタを使用して、iOSのサードパーティブラウザで自分で検査してデバッグできます。

これらは、今年のWKWebViewへの主な新しいAPIの追加です。

それらを試してみて、彼らがあなたのアプリで何ができるかを見てください。

アプリケーションに最適なAPIを使用することを忘れないでください。WKWebViewでできないことがある場合は、フィードバックアシスタントを使用して機能リクエストを提出してください。

私たちは、私たちが得る機能要求を読み、あなたの入力に基づいて開発に優先順位を付けます。

「Safari Web拡張機能の新機能」をチェックすることを忘れないでください。また、Webプラットフォームへの追加については、「SafariとWebKitの新機能」をチェックすることを忘れないでください。

見てくれてありがとう、そしてWWDCの残りの部分を楽しんでください。

♪ ♪