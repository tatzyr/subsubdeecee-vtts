10077

♪ ♪

トミー・ポーリー:こんにちは、私はトミー・ポーリーです。あなたのアプリやウェブサイトがAppleや業界全体の詐欺防止プロバイダーと協力して、CAPTCHAの必要性を減らす方法を共有することに興奮しています。

今日は、プライベートアクセストークンと、詐欺防止のための強力なツールになる方法、操作するサーバーでプライベートアクセストークンのサポートを有効にする方法、およびこれらのトークンをアプリで使用する方法について説明します。

プライベートアクセストークンを紹介するために、最初にCAPTCHAが使用される理由を説明することから始めます。

ウェブサイトで新しいアカウントにサインアップした場合、または既存のアカウントでサインインしようとした場合、ある時点でこのようなCAPTCHAに遭遇した可能性があります。

時には、CAPTCHAは押すだけのボタンですが、記入するのが難しい場合もあります。

あなたはおそらくこれらによって中断されることを楽しんでいないでしょう。

私は確かにしません。

これらの経験が存在する理由は、不正行為を防ぐためです。

サーバーを運営している場合は、詐欺に圧倒されたくありません。

アカウントを作成したり、製品を購入したりしようとする試みは、正当なユーザーから来ています。

しかし、他の試みは攻撃者やボットからのものかもしれません。

残念ながら、CAPTCHAのような詐欺を防ぐための一般的なツールは、多くの場合、人々があなたのアプリやウェブサイトを使用することを難しくします。

良い経験と詐欺の防止の間の適切なバランスを見つけることは困難です。

CAPTCHAは、多くの場合、より遅く、より複雑なユーザーエクスペリエンスにつながります。

攻撃を防ごうとすることで、貴重な顧客を失う可能性もあります。

CAPTCHAはまた、プライバシーのリスクをもたらす可能性があります。

クライアントが信頼され、より簡単なCAPTCHAを取得できるかどうかを判断するために、サーバーはIPアドレスを使用してクライアントを追跡またはフィンガープリントすることに依存することがよくあります。

この種の追跡は、Safari、Mail Privacy Protection、およびiCloud Private Relayによって取られているインターネットプライバシーの方向性と矛盾しています。

そして、CAPTCHAはアクセシビリティに深刻な問題を引き起こす可能性があります。

ボットからのアクセスを阻止しようとすることで、障害や言葉の壁を持つ実際の人間もブロックします。

もっといい方法があります。

誰かが初めてあなたのウェブサイトとやり取りしている場合でも、Safariのようなアプリやブラウザを介してそれをロードしている場合、彼らはすでにボットが模倣するのが難しい多くのアクションを実行しています。

まず、彼らはiPhone、iPad、またはMacを持っており、パスワード、Touch ID、またはFace IDでデバイスのロックを解除しました。

彼らはほとんどの場合、Apple IDでデバイスにサインインしています。

そして、彼らはコード署名されたアプリを立ち上げました。

この情報は、CAPTCHAに頼ることなく、クライアントを追跡することでプライバシーを損なうことなく、サーバーが正当なクライアントを信頼し、詐欺を防ぐのに役立ちます。

プライベートアクセストークンは、サーバーがクライアントを自動的に信頼することを可能にするもので、iOS 16とmacOS Venturaの新機能です。

これらのトークンがどのように機能するかを説明する前に、それらを実際に示します。

あなたはこれを気に入るはずです。

フィナンシャルタイムズのウェブサイトの記事を読みたいです。

私はこれらのシナモンバンズにとても興奮しています。

そして、私は2つの異なる携帯電話にサイトをロードしました。1つはiOS 15を実行し、もう1つはプライベートアクセストークンをサポートするiOS 16を実行しています。

iOS 15の携帯電話から、[サインイン]をクリックし、アカウントとパスワードを入力します。

しかし、その後、私はCAPTCHAでヒットします。

その記事を読む前に文字を入力する必要があります。

プライベートアクセストークンをサポートするiOS 16の携帯電話でまったく同じことをすると、すぐに通り抜けます。

これにより、多くの人、多くの時間を節約でき、顧客は信頼されることに感謝するでしょう。

プライベートアクセストークンを使用すると、先ほど見たように、IETFプライバシーパスワーキンググループで標準化された技術を使用して、サーバーがCAPTCHAを回避できます。

Appleは、これを可能にするために業界全体の企業と協力しています。

このプロトコルを使用すると、サーバーは新しいHTTP認証方法であるPrivateTokenを使用してトークンを要求できます。

これらのトークンは、RSAブラインド署名を使用して、クライアントが認証チェックに合格できたという事実を暗号的に署名します。

これらの署名は「リンク不可」です。つまり、トークンを受け取るサーバーは有効であることしか確認できませんが、時間の経過とともにクライアントの身元を検出したり、クライアントを認識したりすることはできません。

プロトコルの仕組みは次のとおりです。

まず、iOSまたはmacOSクライアントがHTTP経由でサーバーにアクセスすると、サーバーはPrivateToken認証スキームを使用してチャレンジを送り返します。

これは、サーバーから信頼されているトークン発行者を指定します。

クライアントがトークンを取得する必要がある場合、iCloudテスターに連絡し、トークンリクエストを送信します。

このトークンリクエストは「ブラインド」されているため、サーバーチャレンジにリンクすることはできません。

テスターは、デバイスのSecure Enclaveに保存されている証明書を使用してデバイス認証を実行し、アカウントが良好な状態にあることを確認します。

このテスターは、クライアントデバイスが通常のパターンに従っているかどうか、またはデバイスのファームの一部として侵害または使用されている可能性があるかどうかを認識するために、レート制限を実行することもできます。

クライアントを検証できる場合、テスターは新しいトークンの要求を発行者に送信します。

トークン発行者がリクエストを受け取ると、クライアントについて何も知りません。

しかし、iCloudテスターを信頼しているので、トークンに署名します。

その後、クライアントは署名されたトークンを受け取り、元のサーバーがそれを検証できるように「unblinding」と呼ばれるプロセスで変換します。

そして最後に、クライアントは署名されたトークンをサーバーに提示します。

サーバーは、このトークンが発行者によって署名されていることを確認できますが、トークンを使用してクライアントを識別または認識することはできません。

では、サーバーでこの技術をどのように活用できますか?

サーバーにプライベートアクセストークンを採用するには3つのステップがあります。

まず、トークン発行者を選択する必要があります。

第二に、クライアントを検証する場合、サーバーはHTTP認証の課題を送信する必要があります。

そして第三に、サーバーはクライアントから送信されたトークンを検証する必要があります。

選択したトークン発行者は、サーバーが検証するトークンに署名できる信頼できるプロバイダーです。

これは、既存のCAPTCHAプロバイダー、Webホスティングサービス、またはCDNとも呼ばれるコンテンツ配信ネットワークである可能性があります。

iOS 16とmacOS Venturaベータ版では、すでにテストを開始できるトークン発行者が2つあります。

FastlyとCloudflareは、プライバシーパス標準を開発しており、すでに発行者サービスを利用可能にしている2つのCDNです。

他のCAPTCHAプロバイダー、ウェブホスティングサービス、およびCDNも、Appleデバイスで動作するトークン発行者を実行できます。

発行者は今年後半にregister.apple.comでサインアップできるようになります。

特定のトークン発行者の使用が、クライアントがアクセスしているウェブサイトを特定する方法にならないことが重要です。これはプライバシーの問題になります。

したがって、各トークン発行者は、少なくとも数百のサーバーで動作する大規模なサービスである必要があります。

クライアントがサーバーにアクセスすると、PrivateTokenスキームでHTTP認証チャレンジを送信することでトークンを要求できます。

これを行うには、2つのオプションがあります。既存のCAPTCHAまたは詐欺防止プロバイダーと協力して、チャレンジをスクリプトに組み込み、自動的に処理されるか、サーバーから直接これらのチャレンジを送信するかを選択できます。

ウェブサイトの一部としてこれを行う場合、課題は、サイトに埋め込まれた別のサードパーティドメインではなく、メインURLのサブドメインであるファーストパーティドメインから来る必要があります。

クライアントがトークンを返すときは、発行者の公開鍵を使用してトークンの有効性を確認する必要があります。

また、クライアントがトークンを複数回提示しようとするリプレイ攻撃を防ぐためにチェックを強制することもできます。

トークンは1回限りの使用を目的としています。

以前にどのトークンが送信されたかを覚えておくか、トークンがチャレンジで送信された一意の値に署名することを要求することで、リプレイ攻撃を防ぐことができます。

あなたのサイトは、この認証チャレンジに応答しないレガシークライアントと連携する必要があります。

したがって、認証はメインページの読み込みをブロックするのではなく、クライアントを信頼するためのオプションの方法として扱われることが重要です。

SafariとWebKitを介してアクセスされるWebサーバーは自動的に機能しますが、アプリ内でプライベートアクセストークンを直接使用することもできます。

プライベートアクセストークンには、Apple IDがサインインしているデバイスでiOS 16またはmacOS Venturaが必要です。

このApple IDは認証にのみ使用され、トークンを受け取るサーバーと共有されません。

アプリ内では、WebKitまたはURLSessionを使用してHTTPを使用してサーバーに接続すると、トークンが利用できます。

その後、アプリがフォアグラウンドにいる間にチャレンジを受け取るたびに、システムは自動的に認証としてトークンを送信します。

URLSessionを使用している場合は、プライベートアクセストークンを機能させるために明示的に何もする必要はありません。

URLSessionは、PrivateToken HTTP認証スキームを使用して課題に自動的に応答します。

ただし、アプリがフォアグラウンドにない場合や、デバイスにApple IDがサインインしていない場合など、トークンの取得にエラーが発生した場合、アプリはトークンチャレンジを含む401 HTTPレスポンスを受け取ります。

これにより、アプリはトークンチャレンジが受信されたことを知ることができ、ユースケースでエラーを正しく処理する機会が提供されます。

プライベートアクセストークンが利用可能なときはいつでもCAPTCHAを避けることで、アプリやウェブサイトを誰にとってもより良い体験にしましょう。

サーバーがトークンチャレンジを送信し、トークンを検証できるようにします。

また、アプリでは、URLSessionまたはWebKitを使用して、プライベートアクセストークンを自動的にサポートします。

あなたが構築するCAPTCHAフリーの体験を楽しみにしています。