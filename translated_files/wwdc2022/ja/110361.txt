110361

スージー：こんにちは、「Xcode Cloudの高速で信頼性の高いテストを承認」へようこそ。

私はスージーで、XCTestに取り組んでいます。

このセッションでは、Xcode Cloudのテストを開始する最も効果的な方法を共有します。

私たちのチームは、すべての開発者にとって強力なツールとなるようにXcode Cloudを設計しました。

実際、私たちはXcode自体をテストするためにそれを使用し、私はそれが大好きです。

Xcode Cloudの私のお気に入りの機能の1つは、特定のテストスイートを大幅に広げる機能です。

クラウドで実行するほとんどのテストを設定することで、iPhone、iPad、Apple Watch、Apple TV、Macなどの多様なプラットフォームを活用し、さまざまなテストプラン構成を実行するために、さまざまなオペレーティングシステムのバージョンを実行するなど、複数の宛先でテストを実行する実用的な方法ができ、アドレスやスレッドサニタイザーなどのランタイム分析ツールが可能になります。

このような徹底的なテストスイートに合格したら、コードが出荷の準備ができていると確信できます。

テストをXcode Cloudにオフロードすることで、開発者のコード、コンパイル、テストのデスクトップサイクルに影響を与えることなく、より広範なテストを実行できます。

この拡張されたテストスイートでは、信頼性の低いテストが増える可能性があります。

この状況は管理できなくなる可能性があります。

そのため、信頼性を確保することが不可欠です。

信頼性に加えて、このような多数のテストも、継続的インテグレーションプロセスへの影響を制限するために効率的に実行する必要があります。

まず、信頼性について取り上げましょう。

Food Truckを使用してXcode Cloudのより信頼性の高いテストを作成する方法を実演します。

フードトラックは、タップとスワイプをおいしいドーナツに変換するアプリです。

Xcode Cloudでテストスイートを実行することで、すべてのAppleプラットフォームが私のお気に入りのドーナツ、スプリンクル付きチョコレートの注文をサポートしていることを検証することができます。

Xcodeクラウドワークフローの各改善が特定され、実証されます。

Xcode Cloudワークフローを使い始める方法の詳細については、「Meet Xcode Cloud」をご覧ください。より信頼性の高いテストを作成するための最初のステップは、各テストのセットアップと解体が徹底されていることを確認することです。

Xcode Cloudで実行されるテストは、開発者の当初の仮定を満たさない可能性のある新しいシミュレータを利用します。

テストコードで時々見られるいくつかのデバイス構成の仮定を特定しましょう。

特定のテストは、特定の日時に依存する場合があります。

たとえば、サーバーは別のタイムゾーンで実行されている可能性があります。

テストはタイムゾーンに固有であることを避けるべきです。

数値の書式設定や言語の方向性などのロケールベースの値は、予期しない結果につながる可能性があります。

シミュレータのロケールを明示的に設定することで、この問題を回避してください。

もう1つの問題のある仮定は、インターネットアクセスなどの特定のデバイスの許可に依存していることです。

単体テストでデバイスの権限をモックし、UIテストでアラートハンドラを使用するのが最善です。

最後に、いくつかのテストはプリロードされたデータに依存します。

たとえば、テストでは、空のドキュメントディレクトリがあることを期待できます。

シミュレータを明示的に設定することは時々最も簡単な選択ですが、テストのセットアップ方法を強化することは一般的により堅牢です。

例えば、フードトラックはメニューファイルに依存します。

セットアップ機能でトラックオブジェクトをインスタンス化する一環として、ドーナツメニュー項目を含む模擬データファイルを生成します。

後続のテストの準備のためにティアダウン方法に頼るのではなく、セットアップ方法ですべての状態の準備を確立することをお勧めします。

多くの場合、読み取り専用ファイルはリポジトリにチェックインし、後でテストでアクセスできます。

ただし、これらのファイルを構築する必要がある場合、Xcode Cloudは、複数のテストがアクセスできるようにファイルを一度生成できるカスタムビルドスクリプトの実行をサポートしています。

スクリプトの設定方法の詳細については、「高度なXcode Cloudワークフローをカスタマイズする」をご覧ください。

これにより、適切なシミュレータのセットアップが終了します。

それでは、前提条件を満たさないテストの処理方法を取り上げましょう。

XCTSkipは、XCTest Runnerに現在のテストの実行を中止し、スキップとしてマークするように指示するエラーです。

これは、まだサポートされていないOSバージョンまたはデバイスタイプをバイパスするために使用できます。

また、環境変数を設定して、ステージングまたは本番環境に固有のテストをスキップすることで、XCTSkipを活用することもできます。

環境変数を使用してテストフローを制御する方法を見てみましょう。

環境変数は、デバイス上のXCTestテストランナーアプリとxcodebuildを実行しているテストホストの両方にパラメータを提供できます。

Xcode Cloudでは、TEST_RUNNER_の接頭辞が付いた環境変数がXCTestテストランナーに渡されます。

このプレフィックスは、変数がコードで利用可能になる前に削除されます。

たとえば、BASE_URLという名前のテストコードの変数は、TEST_RUNNER_BASE_URLという名前の環境変数として渡されます。

テスト計画には、テストコードと同じ形式が必要です。

つまり、TEST_RUNNER_プレフィックスを追加しません。

環境変数は、テストコードのどこでも参照できます。

たとえば、XCTSkipと一緒に使用して、本番環境にいるときに実際にドーナツを注文するためのテストをスキップすることができます。

もちろん、お腹が空いていない限り。

テストプランやXcodeクラウドユーザーインターフェイスなど、複数の場所で環境変数を再定義すると、予期しない結果につながる可能性があることを覚えておくことが重要です。

この特定のケースでは、Xcode Cloudの環境変数は、プロジェクトのテスト計画で指定されているものよりも優先されます。

テストコード内で環境変数を参照しているので、Xcode Cloudユーザーインターフェイスでその値を設定できます。

これを行うには、クラウドレポートに移動し、フードトラックをControlキーを押しながらクリックします。

ワークフロー内の環境変数を編集するには、コンテキストメニューで「ワークフローの管理」を選択します。

統合ワークフローを具体的に編集しているので、ダブルクリックします。

これで、サイドバーで「環境」を選択し、シートの中央の「環境変数」の下に、変数の名前と値を追加できます。

Xcodeクラウドワークフローで環境変数を設定する代わりに、代わりにテストプラン内で設定できます。

この例では、まだテスト計画はありません。

テストプランを有効にするには、スキームエディタを開き、サイドバーで「テスト」を選択し、「テストプランを使用するように変換」をクリックします。

さて、今、私が「フードトラック」と呼んだテスト計画があります。

環境変数を追加するには、テストプランをクリックしてエディタを開く必要があります。

上部付近では、「テスト」と「設定」のどちらかを選択できます。

「設定」を選択しましょう。

次に、「引数」セクションで、「環境変数」をクリックして変数を追加します。

変数の名前と値を入力できるポップアップが表示されます。

今、私たちのテストは本番環境ではスキップされます。

テストのスキップの詳細については、「XCTSkip your tests」をご覧ください。

XCTSkipを制御するための環境変数の使用について説明したので、期待のタイムアウトについて話しましょう。

予期しないタイムアウトにより、テストが失敗する可能性があります。

たとえば、これは遅いサーバーや過度に不安なユーザーインターフェイステストの結果である可能性があります。

いずれかの問題を解決するための1つのアプローチは、インタラクションが終了するのに十分な時間があるように、XCTestExpectationのタイムアウトを増やすことです。

この例では、OrderDonutのタイムアウトを5秒から10秒に増やして、サーバーが応答する時間を増やします。

通常、代わりにアプリとテストコードのタイムアウト処理の両方をasync/awaitに置き換えるのが望ましい。

このアプローチにより、タイムアウトなしで待機コールが終了するまでテストを一時停止できます。

時間に依存するテストを解決したので、テストスイート内でテストの失敗を処理しましょう。

たとえば、メンテナンスのためにダウンしているステージング環境内のサービスに依存するテストがあります。

このテストを無効にしたりスキップしたりする代わりに、XCTExpectFailureを使用できます。

XCTExpectFailureを使用すると、テストは正常に実行され、結果は次のように変換されます。テストの失敗は予想される失敗として報告され、スイート内の失敗したテストは合格として報告されます。

このアプローチは、予想される障害によって発生するノイズを排除します。

例えば、testOrderDonutは失敗しています。

ドーナツの注文を提供するサービスが現在メンテナンス中であることを知っているので、XCTExpectFailureにここに呼び出しを追加しました。

XCTExpectFailureの詳細については、「XCTestで予想される失敗を受け入れる」をご覧ください。

予想される失敗を宣言したので、テストの繰り返しを活用してコードを実証し、信頼性の低いコードを診断しましょう。

テストの繰り返しは、最初の失敗、最初の成功、または統計結果を待つために同じテストを複数回実行するツールです。

たとえば、私たちのデスクでは、コードをチェックインする前に、最初のアプリとテストコードの信頼性を確認するために、新しいコードとテストケースを複数回繰り返し実行します。

testOrderDonutの成功率が80%しかないことを検出することができました。

えっと、ああ！

障害が存在することを知って、私たちは今、バグをローカルで診断するためにrepeat-until-failureモードを使用しています。

これは、テストの繰り返しを利用する別の方法です。

信頼性の低い外部サービスに依存するテストでは、失敗の再試行の繰り返しポリシーを活用して、テストが成功することを確認することをお勧めします。

テストの再試行は強力なアプローチですが、可能であれば外部サービスをモックすることが望ましいです。

モックサービスの利点には、決定論的な信頼性とスピードが含まれます。

依存関係を嘲笑する方法を学ぶには、「テストのヒントとコツ」をご覧ください。テストの繰り返しを有効にする方法を探ってみましょう。

テストプランでテストの繰り返しを有効にするには、テストプランエディタに戻り、「設定」を選択します。

次に、「テスト実行」セクションの下に、テストの繰り返しモードを選択するポップアップがあります。

この場合、主に信頼性の低い外部サービスを回避するために使用される「失敗のやり直し」を選択します。

これで、テスト繰り返しモードが有効になりました。

テストの繰り返しを活用する方法の詳細については、「テストの繰り返しで信頼性の低いコードを診断する」を参照してください。

そこで、テストの信頼性を向上させるために使用できるさまざまなツールを調べました。

品質テストの作成の詳細については、「失敗するテストを書く」を参照してください。

私たちのテストが信頼できるようになったので、それらを速く実行させましょう!

より迅速な結果を達成するために、多くの設定オプションが存在します。

テストスイートの実行にかかる時間を短縮するために、できる限りのことをしましょう。

パフォーマンスを向上させるために使用するテクニックの1つは、テストを複数のテストプランに分割することです。

時には、2つで十分です。

プルリクエストの各オープンまたは更新の一部として検証するために、削減されたテストセットを特定できます。

たとえば、単一のプラットフォームのユーザーインターフェイステストの重要なサブセットと一緒にユニットテストを実行できます。

サポートされているすべてのプラットフォームでテストのフルセットはまだ実行できますが、現在はバックグラウンドで実行され、プルリクエストをブロックしません。

このアプローチにより、継続的な統合プロセスをタイムリーに保ちながら、テストや新しいプラットフォームを追加することができます。

選択した一連のテストを実行するためのワークフローを設定しましょう。

この例では、すでに「プルリクエスト」と呼ばれる新しいテストプランを作成し、テストプランエディタで開いています。

上部付近では、「テスト」と「構成」のどちらかを選択できます。

「テスト」を選択しましょう。

ここでは、プルリクエストを検証するテストのサブセットを選択しました。

次に、「プルリクエスト」テスト計画を実行するためのワークフローを設定するために、テストをスキップするための環境変数を追加したときと同じように、Xcode Cloud Manage Workflowsに戻ります。

新しいワークフローを作成するには、「ワークフローの管理」シートの左下にある「追加」ボタンをクリックします。

簡単にするために、ワークフローに「プルリクエスト」という名前を付け、開始条件を選択しましょう。

このワークフローは、テストに失敗したチェックインを防ぎたいと考えています。

サイドバーの「開始条件」の右側にある「追加」ボタンをクリックします。

開始条件のオプションを示すメニューが表示されます。

私たちの場合は、「プルリクエストの変更」を選択します。

これで、プルリクエストの開始条件があります。

テストを実行するには、フードトラックアプリを最初に構築する必要があります。

これを行うには、ビルドアクションを追加する必要があります。

再びサイドバーの「開始条件」の下で、アクションを追加しましょう。

「アクション」の横にある「追加」ボタンをクリックし、コンテキストメニューから「ビルド」を選択します。

アプリを構築するアクションが実行されたので、テストを実行するために別のアクションを追加します。

再びアクションの追加をクリックしますが、今回は「テスト」を選択します。

素晴らしい、私たちにはテストアクションがあります。

実行するテストプランを選択しましょう。

シートの中央には、テスト用のドロップダウンがあります。

ここでは、「プルリクエスト」テストプランを選択できます。

すごい！

これで、ワークフローはプルリクエストでテストプランを実行するように構成されています。

完全なテストスイートをスケジュール通りに実行する2番目のワークフローを作成するには、同様の手順に従うことができます。

ただし、今回は開始条件を「ブランチのスケジュール中」に選択し、ワークフローを設定してフルスイートテストプランを実行します。

Xcode Cloudで設定されたワークフローと、関連するテストプランの両方を実行しています。

テスト計画の詳細については、「Xcodeでのテスト」をご覧ください。

これで、プルリクエストとスケジュールされたワークフローテストセットを作成しました。

スピードのためにできるもう1つの改善点は、テストを同時に実行することです。

デフォルトでは、Xcode Cloudはプラットフォームを並行してテストします。

さらに、Xcodeがターゲットとテストオブジェクトのクラスレベルで並行してテストを実行できるようにすることができます。

Xcodeで並列テスト実行を有効にするには、再度テストプランエディタに移動し、「テスト」を選択します。

次に、「フードトラックテスト」テストバンドルの右側にある「オプション」ボタンをクリックします。

オプションの1つにより、可能な限り「並行して実行」することができます。

サーバーに十分なコアがある場合、複数のターゲットとテストオブジェクトクラスを同時に実行できます。

では、このオプションを有効にして、テストスイートのターンアラウンドタイムを改善しましょう。

今、私たちのテストは並行して実行するように設定されています。

テストは、並列実行を利用するために独立して実行するように設計する必要があることに注意してください。

適切なセットアップと分解は、信頼性の高いテストケースの動作に不可欠です。

テストが並行して実行されているので、暴走テストに注意を向ける時が来ました。

暴走テストは、タイムリーに終わらないテストです。

いくつかの例には、無限ループや、障害が発生したサーバーを無期限に待つことが含まれます。

テスト計画で実行時間手当を設定することで、これらのテストを停止できます。

実行時間許容量は、タイムアウトエラーで失敗する前にテストが実行される秒数を指定します。

これにより、テストスイートが個々のテストで立ち往生するのを防ぎます。

この場合、5回目のテストは何らかの理由で立ち往生しました。

実行時間手当を設定することで、この暴走テストは最終的に停止され、失敗としてマークされました。

その後、XCTestテストランナーは、スイートで次のテストを実行し続けました。

テスト計画の実行時間枠を設定しましょう。

実行時間枠を設定するには、テストプランエディタに移動し、「構成」を選択します。

「テスト実行」カテゴリでは、「テストタイムアウト」を有効にし、待機する秒数を指定できます。

デフォルトは600秒であることに注意してください。

最大実行時間手当を設定した後、1回の暴走テストでテストワークフローが中断されなくなります。

たとえば、一晩のテストスイートは時間通りに完了し、有用な結果の完全なセットを提供できるようになりました。

イェーイ！私たちはついにそれらの暴走テストを中止したので、次の改善に進むことができます。

覚えているかもしれませんが、テストの繰り返しを活用して、外部サービスに依存するテストの信頼性を高めることができました。

失敗時に再試行するようにテスト計画を設定し、十分な繰り返し値を選択しました。

ただし、これらの繰り返しは、テストスイートの実行にかかる時間を増やすことができます。

不必要な繰り返しは無駄であり、テストの繰り返し値をより低い数に最適化したいと思うかもしれません。

さらに、プルリクエストワークフローから問題のあるテストを完全に削除することを検討してください。

これを行う方法を見てみましょう。 

テストプランエディタのテスト繰り返し設定に戻りましょう。

以前は、テストの繰り返しモードを「失敗時に再試行」に設定しました。

これで、「最大テストの繰り返し」の値を調整できます。

たとえば、5%の時間で失敗する外部サーバーに依存するテストに対して、最大10回の試行を許可することを選択したかもしれません。

ほとんどの場合、私たちは最初の試みで成功します。

ただし、同じテストに無関係なバグがある場合は、毎回失敗し、10回の試行すべてを使用します。

たぶん3回の試みで十分で、より良い選択でしょう。

パフォーマンスを向上させるために再試行を減らしたいが、以前は、場合によっては信頼性を向上させるために再試行を増やすことを推奨していたことに注意してください。

そのため、この最小限に選択された値は、これらのテストを確実に実行するのに十分でなければなりません。

これにより、より迅速な結果が得られるための設定が終了します。

より速いテスト結果を得るためのより詳細な説明については、「より速いテスト結果を得る」をチェックしてください。

要約すると、Xcode Cloudのテストを開始する最も効果的な方法を取り上げました。

私たちは、無関係な失敗を回避し、コードの変更を迅速に検証できるように、信頼性と高速の両方をテストすることに焦点を当てました。

ありがとう、そして私はあなたがWWDCの残りの部分を楽しむことを願っています!

。