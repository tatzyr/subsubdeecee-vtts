10151

♪ ♪

みなさん、こんにちは。私の名前はエリックです。Unityゲームにアクセシビリティを追加する方法を教えて嬉しいです。

アクセシビリティとは、誰もが当社の製品を使用できるようにすることです。

そして今日は、Unity開発者向けのAppleアクセシビリティプラグインで、アクセシブルなゲームに大きな飛躍を遂げました。

私たちはあなたのゲームにアクセスできるようにするための3つのApple技術に焦点を当てます。

VoiceOverは、視覚に障がいのあるユーザーや弱視のユーザーを支援するスクリーンリーダーです。

画面上のアイテムを読み取り、ユーザーがコントロールを操作するためのカスタムジェスチャーを提供します。

スイッチ制御は、低いモータ制御を持つ人がデバイスの相互作用のために外部スイッチを使用することを可能にします。

そして、動的タイプは、人々が自分の読書能力に応じてテキストサイズを設定することを可能にします。

開始するには、リポジトリのクローンを作成し、リポジトリのルートにあるビルドスクリプトを使用してすべてのAppleプラグインをビルドします。

これにより、Unityプロジェクトに統合する準備ができているビルドフォルダが生成されます。

最後に、Unity Package Managerを使用して、アクセシビリティプラグインを自分のプロジェクトに追加します。

詳細については、リポジトリのドキュメントを見て、「プラグインとプレイ：UnityゲームプロジェクトにAppleフレームワークを追加する」と呼ばれるAppleのすべてのUnityプラグインに関するビデオをご覧ください。プラグインがわかったので、3つの分野をご案内します。

まず、アクセシビリティ要素です。

これにより、ゲームのVoiceOverやスイッチコントロールなどの支援技術にサポートを追加できます。

次はダイナミックタイプです。

ユーザーの好みに応じてテキストをスケーリングするのに役立つ、この使いやすいユーティリティを作成します。

そしてUIの宿泊施設。

これらは、他のユーザーの好みを読むのに役立つユーティリティです。

アクセシビリティの要素から始めましょう。

私はこの概念を説明するのに役立つシンプルなカードゲームを作りました。

「フリップ」ボタンをタップして、ランダムなカードを2枚引く必要があることがわかります。

しかし、VoiceOverは画面上のテキストを読み取りませんし、これらは現在画面上の単なるピクセルであるため、外部スイッチはボタンをタップしません。

私たちは、システムが対話できるものを理解するのを助ける必要があります。

アクセシビリティ要素は、支援技術が相互作用できるものを定義します。

画面上のテキスト、カード、ボタンはアクセシビリティ要素でなければなりません。

そして、各要素をラベルで記述することができます。

VoiceOverは各ラベルを読み取るので、ユーザーは画面に何があるかを理解できます。

また、ゲームが複数の言語をサポートしている場合は、これらのラベルもローカライズする必要があります。

これで、VoiceOverは画面上にあるものを記述できますが、タップできるボタンがあることを認識しません。

「特性」と呼ばれる別のプロパティを使用して、要素のタイプをシステムに通知できます。

ここに「ボタン」の特性を追加する必要があります。

これで、VoiceOverは「フリップボタン」と読み、外部スイッチがこのボタンを制御できます。

テキスト要素に「静的テキスト」特性を追加することもできます。

「静的テキスト」特性は、通常、VoiceOverがより良いテキストインタラクション体験を提供できるように、ラベルとテキスト領域に与えられます。

そして、「ボタン」や「静的テキスト」以外にも、探索できる多くの特徴があります。

では、カードにどのような特性を使うべきですか?

さて、すべてのアクセシビリティ要素に特性を使用する必要はありません。

私たちのカードには特徴は必要ありません。

しかし、各カードには、VoiceOverが認識していない部分がまだあります。額面です。

「値」と呼ばれる、これに使用できる別のプロパティがあります。

各カードに「値」を追加すると、VoiceOverは「クラブの値3を持つカード1、クラブの値エースを持つカード2」と読みます。

そして、それだけです。

基本を理解したので、Unityを開いて、プロジェクトに追加する方法を見てみましょう。

ここで私はこのゲームのUnityエディターにいます。

私はすでにこのプロジェクトにAppleアクセシビリティプラグインを追加しました。

まず、カメラ、ダイレクトライト、UIキャンバスなどの通常のシーンオブジェクトがあります。

キャンバスの下には、2つのテキスト要素とボタンがあります。

その後、カード用のゲームオブジェクトが2つあります。

それぞれが2つのメッシュコンポーネントで構成されており、それぞれが両側のカードの前面と背面のテクスチャをレンダリングします。

アクセシビリティ要素を定義することから始めましょう。

これを行うには、このプラグインのアクセシビリティノードコンポーネントが必要です。

アクセス可能な階層内のすべてのオブジェクトを選択します。

そして、アクセシビリティノードコンポーネントを追加して、それらをアクセシビリティ要素にします。

次に、ラベルを追加します。

カードオブジェクトを選択し、右側の「アクセシビリティノード」コンポーネントに移動し、「ラベル」フィールドを見つけます。

また、カスタムラベルを提供するために、ラベルフィールドのチェックボックスがチェックされていることを確認してください。

次に、「カード1」と入力します。

カード2も同様です。

テキストとボタンにはラベルも必要ですが、Unity UIの標準コントロールを使用している場合は、明示的なアクセシビリティラベルを提供する必要はありません。

プラグインにはすでにそれらのデフォルトの実装があります。

次に、ボタンに特性を追加する必要があります。

フリップボタンを選択し、「特性」を「なし」から「ボタン」に変更します。

2つのテキスト要素を選択してください...

そして、「特性」を「静的テキスト」に変更します。

すごい。

最後に、カードフェイスのアクセシビリティ値を設定する必要があります。

カードはランダムに描画されるため、値を動的に設定するためのスクリプトを追加する必要があります。

2枚のカードを選択し、AccessibleCardという新しいスクリプトを追加します。

まず、私の他のCシャープファイルの1つで、私はすでにトランプと呼ばれるすべてのカードフェイスの列挙型を持っています。

私の新しいAccessibleCardモノラルビヘイビアスクリプトでは、カードタイプの変数と、カードが上を向いているか下を向いているかのブール値があります。

それでは、これらのカードにaccessibilityValueを追加しましょう。

まず、accessibilityNodeコンポーネントをこのgameObjectに添付します。

次に、accessibilityValueデリゲートをカードの額面を動的に返す関数に設定します。

この機能内では、カードがカバーされている場合は、accessibilityValueの「カバー」を返します。

または、カバーされていない場合は、すべてのカードフェイスを列挙し、「スペードのエース」のように、それぞれの説明を返します。

そして、それだけです。

では、私たちのプロジェクトを構築し、それを実際に見てみましょう。

これが私たちのゲームです。VoiceOverをオンにしましょう。

自動音声：VoiceOverがオン。エリックのゲーム。

カード2、カバー。

エリック：右にスワイプして次の要素に移動できます。

自動音声:カード1、カバー。

エリックのカードゲーム。

カードをひっくり返す。

フリップ。ボタン。

エリック：5つのオブジェクトすべてがVoiceOverからアクセスできるようになりました。これは素晴らしいことです。

VoiceOverがオンのときにボタンをタップするには、ダブルタップします。

自動音声:フリップ。

エリック：カードをもう一度確認しましょう。

自動音声:カード1、クラブの2つ。

カード2、クラブのエース。

エリック：VoiceOverは、更新されたカードの文字盤を正しく読み取るようになりました。

かっこいい。

だから、私たちは今、それに恋をすることができる何百万人ものVoiceOverユーザーがゲームにアクセスできるようにしました。

そして、外部スイッチコントロールを使用する人々も私たちのゲームをプレイすることができます。

それがアクセシビリティの要素でした。

次に、ダイナミックタイプについて話しましょう。

テキストが小さすぎて読めないので、ゲームは多くの人にとってプレイするのが難しい場合があります。

iOSとtvOSでは、誰もが設定で自分の読書能力に適したテキストサイズを選択できます。

アクセシビリティプラグインを使用すると、この設定を読んで、ゲーム内のテキストが期待されるサイズで表示されていることを確認できます。

ゲームの例を見て、ダイナミックタイプを使用する方法を見てみましょう。

DynamicTextSize.csというモノラルビヘイビアスクリプトを作成します。

開始関数で、まずデフォルトのテキストサイズを変数に格納します。

次に、OnEnable関数内で、AccessibilitySettingsを使用して変更されたイベントの設定を購読します。onPreferredTextSizesChanged。

これにより、ユーザーがテキスト設定を変更するとすぐにUIを更新できます。

次に、settingsChanged関数内で、まずPreferredContentSizeMultiplierを読みます。

次に、元のテキストサイズを掛けて、テキスト要素に割り当てます。

Unity Editor内で、テキスト要素を持つすべてのゲームオブジェクトを選択します。

そして、作成したばかりのDynamicTextSizeコンポーネントを追加します。

今、私たちのゲームはすべてダイナミックタイプのサポートのために設定されています。

アクションの結果を見る前に、まずあなたのゲームでダイナミックタイプをすばやくテストするトリックをお見せします。

設定を開き、コントロールセンターを見つけます。

テキストサイズが表示されるまで下にスクロールし、コントロールセンターに追加します。

これで、コントロールセンターを開き、テキストサイズオプションを変更することで、テキストサイズをすばやく調整できます。

素晴らしい - テキストサイズを変更すると、私たちのゲームはリアルタイムでフォントサイズを調整します。

コントロールセンターに表示されているテキストのパーセンテージ値は、まさにその乗数から読んでいるものです。

この設定は、テキスト以外のオブジェクトにも採用できます。

たとえば、サイズが大きくなると、カードフェイスアセットをラージプリントに交換できます。

まず、DynamicCardFacesというスクリプトを作成します。

その後、以前と同じように、TextSizeChangedイベントを購読します。

乗数を読む代わりに、コントロールセンタースライダーのティックにマッピングされたテキストサイズのカテゴリの列挙型を読みました。

誰かがより大きなテキストサイズを選択するたびに、アセットを交換できます。

そして、私は単に通常の素材と大きな印刷素材のどちらかを選択します。

さて、本当に大きなサイズを選ぶと...

ユーザーは、低視力の人にとってはるかに読みやすい素晴らしいカードの顔であるカードの大きな印刷版を見るでしょう。

最後に、このプラグインでアクセスできるUIの宿泊施設設定についてお話ししたいと思います。

最初の設定は透明性を下げることです。

この設定をオンにすると、ぼかしや透明効果ではなく、背景が不透明になります。

これらの効果がテキストを読みにくくする場合、読みやすさを向上させるのに役立ちます。

この設定を確認するには、AccessibilitySettingsに電話してください。IsReduceTransparencyEnabled。

次に、コントラストを増やす設定。

スイッチが目立ちやすく、デバイス全体でコントロールを認識しやすくするダークグレーがあることに注目してください。

AccessibilitySettingsを使用してこの設定をチェックすることで、これが有効になっている場合、自分のUIのコントラストを上げることができます。IsIncreaseContrastEnabled。

次に、Reduce Motionの設定です。

このカードフリップアニメーションのように、動きに敏感な人もいます。

Reduce Motionが有効になっている場合は、そのアニメーションを削除する必要があります。

これを行うためのコードを見てみましょう。

CardControllerスクリプトには、このフリップ機能があります。

まず、ユーザーの減速モーション設定がオンになっているかどうかを確認します。

オンでない場合は、コルーチンを介してアニメーションを呼び出すことでカードを反転する必要があります。

それ以外の場合は、回転を設定するだけで、アニメーションはありません。

そして、それだけです。

今、動きに敏感な人々は私たちのゲームを楽しむでしょう。

要約すると、このセッションのリソースにリンクされているGitHubリポジトリを複製して、Apple Accessibilityプラグインを使い始めましょう。

アクセシビリティ要素を追加して、人々があなたのゲームでVoiceOverとスイッチコントロールを使用できるようにします。

ダイナミックタイプでテキストサイズを調整します。

そして、誰もがあなたのゲームで素晴らしい体験をできるように、UIの宿泊施設を確認してください。

参加してくれて本当にありがとう。

私たちは、あなたが素晴らしいアクセシビリティ体験で誰もがゲームを利用できるようにする方法を楽しみにしています。