10170

♪(まろやかなインストゥルメンタルヒップホップ音楽) ♪

♪

こんにちは、私の名前はマイケル・サムナーです。

私はSiriとApp Intentsに取り組んでいるソフトウェアエンジニアです。

このセッションでは、新しいApp Intentsフレームワークを使用して、アプリのアプリショートカットを作成することについてお話ししたいと思います。

アプリショートカットとは何か、そしてそれらがアプリインテントとどのように関連しているかの概要から始めます。

次に、Swiftでアプリのショートカットを作成し、パラメータを追加します。

最後に、ユーザーがあなたのハードワークの恩恵を受けることができるように、アプリのショートカットを検出可能にする方法について説明します。

アプリインテントフレームワークとアプリショートカットから始めましょう。

人々はショートカットを使用して、ショートカットアプリやSiriから使用できるアプリでマルチステップのワークフローを作成します。

今まで、誰かがあなたの意図を使用する前に、最初にSiriに追加ボタンまたはショートカットアプリを介してショートカットを設定しなければなりませんでした。

ゼロユーザー設定を必要とするアプリショートカットを導入できることを嬉しく思います。

これにより、人々があなたのショートカットの恩恵を受けることがこれまで以上に簡単になります。

アプリショートカットと統合することで、アプリがインストールされるとすぐにアプリのインテントが利用可能になります。

これにより、誰かがあなたのアプリの機能を簡単に発見して使用することができます。

彼らはもはやショートカットアプリに向かう必要も、Siriに追加ボタンを使って何かを設定する必要もありません。

アプリショートカットは、ユーザーが作成したショートカットと同様に、ショートカットアプリ、Spotlight、Siriから実行できます。

これにより、システム内のさまざまな場所からアプリケーションを発見して操作する複数の方法が提供されます。

たとえば、Spotlightで検索すると、アプリのショートカットが検索結果に表示され、簡単にアクセスできます。

アプリショートカットを実装することで、ユーザーは迅速かつ軽量なインタラクションでアプリと対話することができ、タスクを完了して自分の道を行くのが簡単になります。

私のチームは、ユーザーが重要なことに集中できるように、一連の音声プロンプトと音を案内することで、ユーザーが瞑想するのに役立つアプリ「瞑想」に取り組んでいます。

今日、瞑想を開始するには、ユーザーはアプリを起動し、ログインし、実行したい瞑想セッションを見つける必要があります。

App Shortcutsと統合することで、ユーザーはSiriに尋ねるだけでどこからでもこれらの機能にすばやくアクセスできます。

そして、セッションをより速く開始することで、ユーザーは仕事の前の朝または夕方に瞑想を日常生活に統合して、長い一日の後にくつろぐことができます。

さて、アプリインテントを作成し、それをアプリのショートカットに変えるために必要なコードに飛び込みましょう。

以前のショートカットとは異なり、App Shortcutsは新しいApp Intentsフレームワークで構築されています。

App Intentsは、優れたインテントをより迅速かつ簡単に構築するために、ゼロから構築された新しいSwiftのみのフレームワークです。

App Intentsでは、別のメタデータファイルではなく、すべてがSwiftのソースコードで正しく定義されます。

これにより、コード生成手順が削除され、ソースエディタとメタデータエディタの間でコンテキストを切り替えることなく集中し続けることができます。

また、コードレビューやマージの競合を解決するのも簡単です。

App Shortcutsを構築するには、App Intentを本格的なショートカットに変えるために必要なフレーズやその他のメタデータを一覧表示するAppShortcutsProviderを作成する必要があります。

また、これらはユーザーの操作なしで設定されるため、トリガーフレーズにアプリケーションの名前を含める必要があることに注意してください。

意図は、AppIntentプロトコルを実装するSwift構造体として定義されます。

基本的な意図には、ショートカットアプリで意図を表示するために使用されるタイトルと、performと呼ばれるメソッドの2つの要件しかありません。

Performメソッドは、インテントのロジックを実行し、結果を返す場所です。

さらに、ユーザーのプロンプトをトリガーして、ユーザーの応答を待つことができます。

この意図では、アプリのMeditationServiceを使用してデフォルトの瞑想セッションを開始します。

Performメソッドは非同期であるため、非同期コードを実行してセッションを開始できます。

セッションが開始されたら、ユーザーに表示されるダイアログを返します。

また、アプリがローカライズされている場合は、この文字列をすべてのロケールでローカライズしたいと思うでしょう。

これまでのところ、私が構築したものでは、ショートカットを作成するときにStartMeditationIntentがショートカットアプリに表示されます。

やる気のあるユーザーは、この意図を持って、セッションを開始するショートカットを作成できます。

このショートカットでは、フォーカスを有効にする2番目の意図も追加しました。

デフォルトでは、私のアプリの意図は、ソースコードで指定したタイトルを使用してレンダリングされます。

アクションのレンダリングをカスタマイズするには、必ずApp Intentにパラメータサマリーを追加してください。

パラメータサマリーを使用すると、意図の外観をカスタマイズしたり、値をインラインで表示したりできます。

しかし、この意図はそれ自体がショートカットとしてうまく機能します。

理想的には、誰かが最初にショートカットを作成することなく、私の意図を実行することができます。

アプリのショートカットを作成することで、ユーザーに代わってこのセットアップステップを実行できるため、アプリがインストールされるとすぐに私のインテントの使用を開始できます。

意図を書いたので、そのためのアプリのショートカットを作成します。

意図と同様に、App ShortcutsはAppShortcutsProviderプロトコルを実装することにより、Swiftコードで定義されています。

プロトコルを実装するには、ユーザーのために設定したいすべてのアプリのショートカットを返す単一のゲッターを作成するだけです。

合計で、あなたのアプリは最大10のアプリショートカットを持つことができることに注意してください。

しかし、ほとんどのアプリはほんの少ししか必要としません。

そこで、StartMeditationIntent用に単一のAppShortcutを作成します。

始めるために、私は自分の意図のインスタンスを渡します。

私の意図の初期化子がパラメータを取った場合、ここで値を指定できます。

次に、SiriからAppShortcutを呼び出す音声フレーズの配列を作成します。

アプリケーションの名前を文字列に直接書くのではなく、特別な.applicationNameトークンを使用したことに気付くでしょう。

これにより、Siriは私のアプリケーションのメイン名だけでなく、私が設定したアプリ名の同義語も挿入できます。

ユーザーは瞑想を始めるために異なるフレーズを言うかもしれないので、私はここでさらにいくつかの代替フレーズを提供します。

アプリがローカライズされている場合は、これらのフレーズもローカライズする必要があります。

すごい。だから今、誰かが仲介したいとき、彼らはただSiriにとどまり、「瞑想を始めなさい」。

SiriはStartMeditationIntentを呼び、私が返したダイアログを話します。

また、誰かがSpotlightで私のアプリを検索すると、私のコードにリストした最初のアプリショートカットが表示されます。

ユーザーが結果をタップすると、アプリケーションを起動せずにショートカットがすぐに実行されます。

あなたの意図がアプリの起動をトリガーした場合、Spotlightには表示されないことに注意することが重要です。

だから、ごく少量のコードで、私は今、私のユーザーが私のアプリで瞑想することをはるかに簡単にしました。

しかし、今、Siriは私の意図を実行するたびにデフォルトのビューを表示します。

これは大丈夫ですが、アプリのショートカットを実行するときに、ユーザーにより多くの情報を表示したいと思います。

これを行うには、私の意図が実行されるたびにSiriが表示できるカスタムビューを実装する必要があります。

App Intentsフレームワークのビューは、SwiftUIを使用して構築され、ウィジェットと同じビュー技術を活用します。

これは、開発者として、カスタムビュー用に別のUI拡張機能を構築する必要がないことを意味します。

代わりに、インテントを実行するときに単にビューを返すことができます。

これがあなたの見解にもたらす特定の制約について考えることが重要です。

ウィジェットと同様に、カスタムアプリインテントビューには、インタラクティブ性やアニメーションなどを含めることはできません。

UIを設計するときは、必ずこれを考慮に入れてください。

アプリインテントは、値の確認、インテントの確認、インテントが終了した後の3つの段階でカスタムUIの表示をサポートしています。

私のアプリでは、意図の実行の最後にカスタムビューを返します。

これらの他のプロンプトを使用している場合は、これらのステップでカスタムUIを統合する方法についても必ず考えてください。

最後に、私が述べたように、カスタムUIの表示は簡単です。

あなたは単にあなたの意図からあなたの見解を返す必要があります。

さて、いくつかのコードに飛び込む時間です。

カスタムビューの追加は簡単です。

前述したように、ダイアログの横にビューを返します。

App Intentsフレームワークは、Siriのスニペット内に私のビューを提示します。

あなたのビューは、スニペットのタイトルや確認ボタンなど、他のSiriビューと一緒に表示されることを覚えておいてください。

だから、あなたのスニペットのデザインがSiriの中でくつろいだように感じたいと思うでしょう。

次に、アプリのショートカットを拡張してパラメータを含める方法を確認しましょう。

以前の実装では、デフォルトの瞑想セッションを開始することを選択しました。

しかし、私のアプリには多くの素晴らしいセッションタイプが含まれており、ユーザーは念頭に置いている特定のセッションを開始したいと思うでしょう。

理想的には、私のユーザーは、私の意図を実行するときに開始したいセッションを指定することができます。

これらのユースケースをサポートするには、ユーザーが実行したいセッションをキャプチャするパラメータを追加して、意図を拡張する必要があります。

パラメータを追加するには、まずパラメータのタイプを定義する必要があります。

セッションの関連情報を含むMeditationSession構造体を作成します。

名前を含め、UUIDになる可能性のある識別子フィールドを与えます。

この構造体を私の意図のパラメータとして使用するには、AppEntityプロトコルも実装する必要があります。

AppEntityプロトコルを実装すると、App Intentsフレームワークに私のタイプについて伝え、エンティティの表示方法などの追加情報を指定できます。

エンティティプロトコルでは、私のタイプに、私がすでに提供した識別子が必要です。

整数や文字列など、他のタイプも使用できます。

また、エンティティの表示方法に関する情報も提供する必要があります。

これは、ショートカットアプリや私のエンティティが表示されている他の場所で使用されます。

最後に、デフォルトのクエリを配線する必要があります。

クエリをMeditationSessionQueryと呼び、次に実装します。

私のエンティティと連携するために、App Intentsフレームワークは、その識別子に基づいて私のエンティティを検索できる必要があります。

これを可能にするために、EntityQueryプロトコルは1つの要件のみを定義します。識別子を受け取り、一致するエンティティを返す関数です。

SessionManagerでセッションを調べて、この機能を実装します。

次に、StartMeditationIntentを更新してパラメータを追加します。

パラメータは簡単です。それらは私の構造体上の通常のプロパティです。

しかし、私のパラメータについてApp Intentsに伝えるには、@Parameterプロパティラッパーも追加する必要があります。

このプロパティラッパーは、セッションプロパティが私の意図の一部であることをApp Intentsに知らせます。

表示名など、パラメータプロパティラッパーで追加のメタデータを指定することもできます。

意図にパラメータを追加したので、どのセッションを実行したいかをユーザーに尋ねる必要があります。

App Intentsフレームワークは、私のIntentのパラメータの値を収集するために、ユーザーにフォローアップの質問をするための堅牢なサポートを持っています。

これらのプロンプトは、私の意図が実行されている場所ならどこでも表示されます。

Siriから逃げると、Siriは質問を声に出し、ユーザーに答えを話すように頼みます。

Spotlightとショートカットアプリでは、ユーザーにはタッチ駆動型UIで同じプロンプトが表示されます。

App Intentsは、3種類の値プロンプトをサポートしています。

曖昧さ回避は、固定リストから選択するようユーザーに求めます。

曖昧さ回避は、あなたの意図にパラメータのためのオプションの小さな固定セットを持っているときにユーザーに提示するのに最適です。

値プロンプトを使用すると、ユーザーにオープンエンドの値を尋ねることができます。

これらは、任意の値を取ることができる文字列や整数などの型に最適です。

最後に、確認はユーザーに特定の値を確認するように求め、ユーザーの意図を理解していることをユーザーに再確認したい場合に役立ちます。

値のプロンプトは、意図をより柔軟にする素晴らしい方法であり、ユーザーからより多くの情報を収集することができます。

しかし、彼らはまた、会話を遅くし、頻繁に使用しすぎるとユーザーをイライラさせる可能性があります。

偉大な意図を設計するためのより多くの洞察については、Lynnの「Design App Shortcuts」というタイトルのセッションをチェックしてください。

さて、StartMeditationIntentにセッションパラメータを追加したので、この値を促すために、performメソッドにロジックを追加します。

私のアプリでは、ユーザーが実行できる少数の固定セッションがあります。

セッションがまだ指定されていない場合は、SessionManagerからリストを取得し、ユーザーに曖昧さ回避を提示します。

各セッションの表示表現を使用して、App Intentsはセッションをリスト項目にフォーマットし、ユーザーに表示します。

ユーザーが1つを選択すると、選択したアイテムが私に返されます。

選択したセッションをMeditationServiceに渡し、セッションを開始します。

その後、インテントが開始されたことをユーザーに知らせるダイアログを返すことができます。

ユーザーがセッションを提供したので、ユーザーが要求を理解したことをユーザーに理解できるように、セッションの名前をダイアログに入れることをお勧めします。

素晴らしいので、私のユーザーが「瞑想を開始」と言うと、私のアプリは実行したい特定のセッションをユーザーに促すことができます。

しかし、前に述べたように、ユーザーは迅速かつ的確なSiriのインタラクションを好みます。

理想的には、フォローアップの質問ではなく、最初のフレーズで実行したいセッションをSiriに伝えることができます。

さて、良い知らせがあります。

アプリショートカットは、定義済みのパラメータでトリガーフレーズを拡張することをサポートしています。

パラメータ化されたフレーズを実装することで、私のアプリは「心を落ち着かせる瞑想を始める」や「ウォーキング瞑想を始める」などの発話をサポートできます。

パラメータは、事前にSiriに指定できる既知のパラメータ値の固定セットがある場合に最適です。

私のアプリには、セッション名を使用します。

パラメータはオープンエンドの値のためのものではありません。

たとえば、最初の発話でユーザーから任意の文字列を収集することはできません。

だから、私のアプリは、Xがユーザーからの任意の入力である可能性がある「Xのために私の日記を検索する」のようなフレーズをサポートできませんでした。

代わりに、アプリが実行されているときに、パラメータ値は事前に指定されます。

いくつかのパラメータ化されたフレーズを実装しましょう。

アプリでパラメータ化されたフレーズを実装するには、いくつかの変更を加える必要があります。

まず、SessionEntityのクエリを更新して、suggestedResults()メソッドを実装して、パラメータ化されたショートカットのエンティティのリストを返します。

第二に、利用可能なSessionEntitiesのリストが変更されたときに、App Intentsフレームワークに通知する必要があります。

これにより、App IntentsフレームワークはSiriで使用する新しいショートカットフレーズを作成できます。

これを行うには、アプリのモデルレイヤーを更新して、セッションリストが変更されるたびにApp Intentsフレームワークに通知します。

最後に、StartMeditationIntentのセッションパラメータを参照する新しいフレーズをアプリショートカットに追加します。

まず、suggestedEntities関数を実装してMeditationSessionQueryを更新します。

App Intentsフレームワークは、この関数から返されたセッションを使用して、パラメータ化されたショートカットを作成します。

このメソッドはオプションですが、このメソッドを実装しないと、パラメータ化されたショートカットがまったく取得されないことに注意することが重要です。

次に、セッションのリストが変更されるたびにApp Intentsフレームワークに通知するために、アプリのモデルレイヤーを更新する必要があります。

私のアプリでは、バックグラウンドでサーバーからフェッチした新しいセッションタイプを公開することがめったにありません。

新しいセッションを受け取るときはいつでも、updateAppShortcutParameters()メソッドを呼び出すようにSessionModelを更新します。

この方法は、App Intentsフレームワークによって提供されます。自分で実装する必要はありません。

呼び出されると、App Intentsはエンティティのクエリを呼び出して、ショートカットフレーズのパラメータのリストを収集します。

最後に、私の意図に関するセッションキーパスを含むアプリショートカットの新しいフレーズを追加します。

App Intentsフレームワークは、このフレーズを私のクエリから返されたすべてのセッションと組み合わせます。

各値に使用されるテキストは、SessionEntityの表示表現のtitleプロパティから取得されます。

以前と同じように、ユーザーが私のアプリショートカットをフレーズするかもしれないいくつかの異なる方法を含めたいと思います。

これにより、ユーザーが好みのフレーズを覚えていない場合、よりスムーズな体験が保証されます。

さて、私は今、素晴らしい、フル機能のアプリショートカットを持っており、ユーザーがそれを試してみるのが待ちきれません。

しかし、それを実現するためには、ユーザーが私の新しいショートカットを発見するのを助けるためにいくつかの作業を行う必要があります。

私が最初に話したいのは、素晴らしいフレーズを選ぶことです。

アプリのショートカットのための素晴らしいフレーズは短くて記憶に残る。

ユーザーは、アプリのショートカットをサポートする多くのアプリを携帯電話に持っているでしょう。そして実際には、ユーザーはショートカットの言い換え方を正確に覚えるのに苦労する可能性があります。

だから、可能であれば、フレーズを短く、要点をポイントにしてください。

これらの線に沿って、アプリ名を名詞や動詞として使用できる場合は、フレーズでそのように使用することを検討してください。

私のアプリでは、フレーズが短くて記憶に残るように、名詞のように瞑想を使用しました。

最後に、アプリ名の同義語はユーザーに非常に役立ちます。

ユーザーがアプリをアプリの表示名以外のものと呼ぶ場合は、アプリ名の同義語を追加することを検討する必要があります。

iOS 11では、アプリ名の同義語のサポートが追加されました。

まだ作成していない場合は、今がそうする絶好の機会かもしれません。

次に話したいのは、Siriのヒントとショートカットのリンクです。

アプリのショートカットはユーザーの設定を必要としないため、ユーザーがアプリのショートカットを見つけて使用するには、見つけやすさが不可欠です。

アプリのショートカットを使用すると、ショートカットを追加するためにSiriに追加ボタンが不要になります。

それはすでに追加されています!

しかし、Siriに追加ボタンが提供する発見可能性の利点を失いたくありません。

それを念頭に置いて、新しいSiriチップビューを作成しました。

このビューは、過去に「Siriに追加」ボタンを使用したことがあればどこでもうまく機能します。

ヒントビューは、SwiftUIとUIKitの両方で利用できます。

そして、ヒントがどんなアプリケーションでも素晴らしく見えるように、多くのスタイルを提供しました。

Siriのヒントは、画面上のコンテンツに関連する場合、文脈的に最もよく配置されます。

ユーザーがアプリで注文したばかりの場合は、注文状況を示すショートカットのヒントを表示することを検討してください。

Siriのヒントは、ユーザーが近い将来にアプリショートカットに関与する可能性が高いと感じたときに、思慮深く配置する必要があります。

Siriのヒントは解雇もサポートしています。

ビューには却下ボタンが含まれており、タップするとコードにカスタムクロージャがトリガーされます。

レイアウトからビューを削除し、関連性があると感じるまで表示しないことを検討してください。

最後に、アプリからショートカットのリストに起動する新しいショートカットリンクも含めました。

この新しい要素は、アプリに多くのアプリショートカットがあり、ユーザーがそれらをすべて探索できるようにしたい場合に最適です。

さて、アプリショートカットの素晴らしいところは、アプリがインストールされるとすぐに利用できることです。

アプリが最初に起動する前でも、ユーザーはSpotlight、Siri、およびショートカットアプリからショートカットを見て実行することができます。

アプリのショートカットを作成する際には、これを考慮する必要があるかもしれません。

たとえば、アプリがログインフローを必要とする場合、ユーザーはインテントを実行する前にログインしていない可能性があります。

あなたの意図は、ログインする必要があることをユーザーに説明するエラーメッセージで優雅に失敗するはずです。

第二に、アプリショートカットのパラメータ化されたフレーズは、アプリが起動され、新しいパラメータ値があることをApp Intentsフレームワークに通知するまで使用できません。

アプリのショートカットにパラメータ化されていないフレーズが含まれていない場合、ユーザーは最初にアプリを起動するまでアプリのショートカットをまったく表示しません。

この問題を回避するために、いくつかの非パラメータ化されたフレーズを追加することを検討してください。

さらに、Siriは「ここで何ができますか？」のようなフレーズのサポートを追加しました。そして「瞑想で何ができますか?」

Siriは自動的にアプリショートカットのフレーズを収集して推奨し、あなたに代わって提示します。

あなたのアプリは、この機能が機能するために追加のことをする必要はありません。

最後に、Siriとショートカットアプリの両方で、アプリのショートカットが表示される順序は、ソースコードにアプリのショートカットをリストする順序によって決まります。

あなたは、彼らが最も注目を集めるように、あなたの最良かつ最も有用なアプリショートカットを最初に置くことを検討したいと思うでしょう。

同様に、フレーズ配列にリストする最初のフレーズは、そのアプリショートカットのプライマリフレーズと見なされます。

主なフレーズはショートカットタイルのラベルとして使用され、ユーザーがSiriにアプリに助けを求めたときに表示されます。

さて、アプリインテントフレームワークとアプリショートカットについて多くのことを取り上げました。

私はあなたに2つの重要な考えを残したい。

まず、アプリショートカットを使用すると、ユーザーはシステムのどこからでもアプリを簡単に使用できるので、このより軽量なモデルに適合するアプリの最適なユースケースについて考えてください。

第二に、アプリショートカットを実装すると、あなたが彼らに言わない限り、ユーザーはそれについて知らないでしょう!

アプリショートカットを発見可能にする方法について真剣に考えてください。

アプリ内でSiriのヒントを表示できる場所や、ウェブサイトや店舗のサインなどの製品外の場所を検討してください。

新しいApp Intentsフレームワークで作成したすべての素晴らしいアプリショートカットを見るのが待ちきれません。

デザインとApp Intentsフレームワークをより深く掘り下げるには、今週の他の講演を必ずチェックしてください。

ありがとう、そして素晴らしいWWDCをお過ごしください。

♪