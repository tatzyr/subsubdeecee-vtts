10079

Qiaoyu Deng:こんにちは。

「アプリとサーバーのDNSセキュリティの改善」へようこそ。私の名前はQiaoyu Dengです。

このビデオでは、DNSがしばしば安全ではない理由と、DNSSECとDDRで暗号化されたDNSを使用してDNSを保護する方法について説明します。

まず、DNSが安全ではない理由について話しましょう。

DNSはインターネットの電話帳です。

人間が読めて覚えやすいドメイン名を、機械用に作られたIPアドレスに変換します。

TCP、TLS、QUICなどの他のインターネットプロトコルは、IPアドレスを持つことに依存しているため、すべてがDNSから始まります。

今日、TLSはインターネット通信を保護するために広く使用されています。

それは素晴らしいことですが、基礎層であるDNSにはいくつかのセキュリティ上の問題があります。

DNSは歴史的に安全ではありません。

それはいくつかのセキュリティ上の考慮事項で1983年に設計されました。

それ以来、多くのDNS攻撃が作成されました。

1つの例は、DNSキャッシュポイズニングです。攻撃者はDNSリゾルバの欠陥を悪用し、誤ったIPアドレスをキャッシュさせ、クライアントを悪意のあるホストに接続させます。

これは、DNSの脆弱性の1つを明らかにします:それは認証されていません。

今日の従来のDNSクライアントには、回答を検証する方法がないため、簡単にスプーフィングできます。

もう1つの一般的な攻撃は、攻撃者がクライアントとDNSサーバー間のDNSトラフィックを監視し、クライアントの履歴を収集するDNSスニッフィングです。

これはユーザーのプライバシーにとって深刻な問題です。

この攻撃が可能な理由は、DNSトラフィックがもともと暗号化されなかったためです。

その上に構築されたプロトコルの安全な出発点になるためには、DNSを認証して暗号化する必要があります。

DNSSECを使用してDNS応答に署名すると、認証が提供されます。

TLSとHTTPSを使用してDNS解決を暗号化すると、プライバシーが保証されます。

次に、DNSSECについて話しましょう。

DNSSECは、IETFによって作成された一連の拡張仕様です。

多くのDNSサービスプロバイダーはすでにそれをサポートしていますが、クライアントのサポートはまだ増加しています。

iOS 16とmacOS Venturaは、クライアント側のDNSSEC検証をサポートするようになりました。

DNSSECは、デジタル署名を追加することで、データの認証を保証します。

データの整合性を保護します。

答えが存在しないときに存在の否定を認証します。

また、暗号認証も提供します。

DNSSECは、応答に署名を添付することで、データの整合性を保護します。

応答が攻撃者によって変更された場合、変更されたデータの署名は元のデータと一致しません。

その場合、クライアントは変更された応答を検出して破棄することができます。

DNSSECはまた、NSECレコードなどの特別なタイプのDNSレコードを使用して、ゾーン内のレコードの存在と非存在を主張します。

NSECレコードは、次のレコード名が何であるかをアルファベット順に安全に伝えます。

それによってリストされている名前は存在するものであり、リストされていない名前は存在しません。

例えば、ここには3つのNSECレコードがあります。

レコードセットは、ゾーン組織にはA.org、C.org、E.orgの3つのレコード名しかないことを明らかにしています。

さて、A.orgが存在しないという攻撃者がいる場合、クライアントはこの攻撃を検出できます。

A.orgは、最初のNSECレコードにリストされているため、存在します。

同様に、攻撃者がD.orgが存在すると言った場合、2番目のNSECレコードによると、D.orgはC.orgとE.orgの間にあり、2つの名前の間に名前が存在しないため、クライアントもそれを検出できます。

DNSSECは、信頼の連鎖を確立することによってレコードを認証します。

ここに例があります。

デバイスは、DNSSEC検証を有効にしてwww.example.orgを解決したいと考えています。

IPアドレス、署名、キーを要求するクエリを送信します。

応答を使用すると、IPアドレスからキー番号1への信頼関係を構築できます。

次に、クライアントは親ゾーンの組織にクエリを送信し、キー番号1の認証に使用できるレコードを要求し、キー番号1からキー番号2への信頼関係を構築できます。

したがって、デバイスはルートに到達するまで、このプロセスを再帰的に繰り返します。

これで、図のキー番号3であるルートキーが信頼できる場合、IPアドレスからキー番号3への信頼関係を認証できます。

ルートキーのハッシュは常にデバイスに安全に保存されます。

DNSSECでは、ルートトラストアンカーと呼ばれています。

キー番号3のハッシュがプリインストールされたアンカーと一致する場合、信頼チェーンを安全に確立できます。

トラストチェーンでは、www.example.orgのIPアドレスが認証されるようになりました。

アプリでDNSSECの検証が必要な場合、やるべきことは次のとおりです。

ドメインのIPv6をサポートします。

IPv6のみの環境では、IPv4のみのアドレスは合成IPv6アドレスに変換されます。

ドメインが署名されている場合、合成されたアドレスはDNSSEC検証に合格できません。DNSSECが有効になっていると到達できません。

したがって、ドメインがIPv6をサポートしていることを確認してください。

DNSサービスプロバイダーがDNSSECでドメインに署名していることを確認してください。

ドメインに署名せずにアプリでDNSSECを有効にすると、メリットはありませんが、追加のDNSトラフィックと未署名ドメインの認証を試みるための解決時間が延長されます。

対応するインフラストラクチャのサポートを取得したら、アプリにDNSSECを採用するために必要なコードは次のとおりです。

NSURLSessionクライアントの場合は、URLリクエストにDNSSEC検証を要求できます。

ここに例があります。

まず、デフォルトのセッション設定を作成します。

その後、DNSSECの検証が必要になります。

次に、変更された設定でセッションを作成します。

このセッションから作成されたすべてのURLリクエストに対してDNSSECを有効にします。

セッション全体でDNSSECを有効にしたくない場合は、リクエストレベルでこれを行うこともできます。

まず、DNSSEC検証が無効になっているデフォルト設定でセッションを作成します。

次に、リクエストで有効にします。

これで、このセッションタスクは、DNSSECの検証が完了したときにのみ開始されます。

Network.frameworkクライアントの場合は、接続にDNSSEC検証を要求することもできます。

まず、パラメータオブジェクトを作成するときは、DNSSECの検証が必要です。

次に、パラメータオブジェクトを使用してNWConnectionを作成します。

これで、接続を開始すると、DNSSECの検証が完了し、検証済みのIPアドレスへの接続が確立された場合にのみ、準備完了状態に移行します。

DNSSECを有効にすると、検証済みのアドレスのみが接続の確立に使用されます。

HTTPSでは、エラーはAPIを通じて報告されます。

DNSSECでは、検証失敗のエラーは返されません。

検証に失敗した応答を受信することは、応答を受信しないことと同じです。

応答を改ざんするDNSプロバイダーがある場合、アドレスは認証チェックに合格しないため、直接破棄されます。

デバイスがDNSプロバイダーが応答を改ざんしていない新しいネットワークに参加すると、検証は再び進行し、解決は自動的に正常に戻ります。

DNSSECの失敗を引き起こす可能性のあるケースをいくつか紹介します。

元のDNS応答が変更されると、不一致のシグネチャはDNSSECチェックに合格せず、検証に失敗します。

デバイスがプリインストールされたトラストアンカーに到達できず、そこからトラストチェーンを確立できない場合。

ネットワークがDNS over TCPやEDNS0オプションなど、DNSSECが必要とする必要なプロトコルをサポートしていない場合、DNSSECイネーブルメントビットを伝送します。

署名されたドメインがIPv6をサポートしていない場合、インターネットサービスプロバイダから提供された合成されたIPv6アドレスは検証に失敗します。

それがDNSSECでDNS応答を認証する方法ですが、まだ暗号化されていない場合は、ネットワーク上の誰でもそれらを見ることができます。

次に、DDRでDNS暗号化を自動的に有効にする方法について説明します。

iOS 14とmacOS Big Surでは、プライバシーを保護するために暗号化されたDNSを導入しました。

アプリでNEDNSSettingsManagerを使用するか、プロファイルでDNSSettingsを使用して、システム全体で暗号化されたDNSを手動で設定できます。

NWParametersのPrivacyContextを使用して、アプリの暗号化されたDNSを選択することもできます。

詳細については、「暗号化されたDNSを有効にする」をご覧ください。

iOS 16とmacOS Venturaの新機能で、暗号化されたDNSを自動的に使用できます。

ネットワークがDDRとも呼ばれる指定リゾルバーの検出をサポートしている場合、DNSクエリは自動的にTLSまたはHTTPSを使用します。

暗号化されたDNSを使用するには、リゾルバがTLSまたはHTTPSをサポートしていることを知る必要があり、ポートまたはURLパスも学習する必要があるかもしれません。

DHCPやルーター広告などの一般的なメカニズムは、プレーンなIPアドレスのみを提供します。

DDRは、Appleが他の業界パートナーと協力してIETFで開発した新しいプロトコルです。

これは、DNSクライアントが特別なDNSクエリを使用してこの必要な情報を学ぶ方法を提供します。

デバイスが新しいネットワークに参加すると、「_dns.resolver.arpa」のサービスバインディングクエリが発行されます。

DNSサーバーがDDRをサポートしている場合、1つ以上の構成で応答します。

次に、デバイスはこの情報を使用して、指定されたリゾルバへの暗号化接続を設定します。

暗号化されていないリゾルバのIPアドレスが、指定されたリゾルバのTLS証明書に含まれていることを確認します。

これは、暗号化されていないリゾルバと暗号化されたリゾルバが同じエンティティに属していることを確認するために行われます。

すべてが良さそうであれば、デバイスはデフォルトで暗号化されたDNSを使用するようになりました。

DDRは一度に1つのネットワークに適用されます。

お使いのデバイスは、現在のネットワークがサポートしている場合にのみ、自動的に暗号化されたDNSを使用します。

また、DNSサーバーのIPアドレスがプライベートIPアドレスの場合、DDRは機能しないことに注意することも重要です。

これは、所有権を確認できないため、そのようなIPアドレスがTLS証明書で許可されていないためです。

iOS 16とmacOS Venturaでは、NEDNSSettingsManagerまたはDNSSettingsプロファイルを使用して、構成設定に暗号化されたDNSを使用する場合、クライアント認証を指定する機能もサポートしています。

クライアント認証により、暗号化されたDNSサーバーは、サーバーがアクセスを許可する前にクライアントを検証する必要があるエンタープライズ環境で使用できます。

NEDNSSettingsのidentityReferenceプロパティを使用してクライアント証明書を設定できるようになりました。

これは、VPNのクライアント証明書と同じように動作します。

これらは、DNS over TLSとDNS over HTTPSの両方に適用できます。

これがDNSを保護するための道です。

DNSSECでドメインに署名し、IPアドレスを認証するためにアプリでDNSSEC検証を要求します。

ネットワーク上でDDRを有効にして、クライアントが暗号化されたDNSに自動的に切り替えて、ユーザーのプライバシーを向上させることができます。

より良いアクセス制御が必要な企業でクライアント認証を採用する。

私はあなたが将来構築するのに役立つ、より安全なDNS基盤を楽しみにしています。

見てくれてありがとう!

。