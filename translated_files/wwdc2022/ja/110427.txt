110427

♪インストゥルメンタルヒップホップ音楽♪

♪

みなさん、こんにちは。私はジョナサン・マーです。

そして私はリサ・シャオです。

そして、Xcode 14の新機能を紹介したいと思います。

今日は、ソース編集やSwiftUIプレビュー、マルチプラットフォームアプリケーション、TestFlightフィードバック、パフォーマンスの向上など、Xcode全体の新機能と機能強化を見ていきます。

カバーすることがたくさんあるので、それを手に入れましょう。

あなたが最初に気づくのは、それがどれだけ速く始まったばかりかということです。

Xcode 14は30%小さいです。

大幅に高速にダウンロードとインストールが高速になります。

追加のプラットフォームやシミュレータはオンデマンドでダウンロードできます。

すぐに必要な場合は、ここで入手できます。または後で、最初に使用しようとするときに入手できます。

私たちは、食品配達アプリケーションであるフードトラックを構築しています。

ライブプレビュー付きのSwiftUIは素晴らしいワークフローであり、さらに良くなっています。

これで、プレビューキャンバスはデフォルトでインタラクティブなので、変更は作成するとすぐに有効になります。

キャンバスには、コードを書かずに各プレビューの追加バリアントを作成するための新しいコントロールがあります。

配色、テキストサイズ、またはデバイスの向きを変えて、各シナリオでレンダリングされたインターフェイスをすぐに見ることができます。

さまざまなダイナミックタイプサイズで私たちのビューがどのように見えるか見てみましょう。

これらのプレビューを並べて、インターフェイスを検証し、物事が正しく見えることを確認するのは簡単です。

大きいサイズを確認しましょう。

最初のアイコンは非常に広く、テキストをぎこちなくラップします。

幸いなことに、私のデザイナーはちょうど私にそれを変更するように頼んだが、ヘッダーでのみ。

私たちのCardViewはまだヘッダーの別のアイコンをサポートしていないので、その機能を追加することから始めましょう。

実装に切り替えます。

ヘッダーとコンテンツ要素はどちらも同じ画像を使用しています。

ヘッダー専用の別の画像プロパティを追加しましょう。

ほとんどのカードでは、両方の場所で同じ画像を使用すると見栄えがします。

デフォルト値のカスタム初期化子を追加することで、既存の各呼び出しを更新する時間を節約できます。

イニシャライザを入力し始めると、Xcode 14は現在、すべてを完了するために提供しています!

カスタマイズの出発点としてデフォルト値を受け入れることができ、多くの時間を節約できます。

これは、コーダブルメソッドでも機能します。

headerIconパラメータにデフォルト値を与えましょう。

次に、CardStackビューに戻り、この新しい機能を使用します。

私のデザイナーは私にここでカレンダーのシンボルを使うように頼んだ。

ライブラリにはすべてのSFシンボルが含まれているので、正しいものを使用していることを確認するのは簡単です。

Returnキーを押して、シンボルを使用するための正しいコードを挿入できます。

このシンボルは素晴らしく見えます。

プレビューバリアントから得られる新しいサイドバイサイド比較により、ユーザーが選択したすべての設定でアプリが見栄えを良くすることが容易になります。

初期化と作成可能な定義に加えて、Xcode 14はよりインテリジェントな推奨事項を提供するため、アイデアをより迅速かつ簡単に書くことができます。

もう少しお見せしましょう。

別のCardViewを追加し始めると、初期化子が完了リストに直接表示されるようになりました。

headerIconパラメータはイタリック体です。

それはデフォルト値があるからです。

今すぐ完了を受け入れると、headerIconラベルは含まれず、追加したばかりのデフォルト値が使用されます。

ここでは、もう一度アイコンを特殊化したいので、名前の一部を入力してオプトインできます。

新しいカードにいくつかの値を与えます。

新しいカードの前に仕切りが欲しいです。

VStackに仕切りを追加すると、幅全体に線が渡されます。

より微妙にするために、フレームを使って最大幅を設定します。

フレーム修飾子には多くのオプションの引数があります。

新しい完了機能により、必要な議論だけを簡単に取得できます。

それはXcode 14のコード補完です。

この最初のカードのタイトルは、ある方法から来ています。

すべての数字を正しく処理していないと聞いたので、どのように実装されているか見てみましょう。

コマンドキーを押しながらクリックして、定義にジャンプを選択します。

再設計された定義リストは、各結果の違いを強調しているため、必要な結果をすばやく選択できます。

私たちのテキスト(for:)メソッドはプロトコルからのものなので、複数のオプションがあります。

このリストは、メソッドを定義する特定のタイプを示しています。プロトコルからの宣言と2つの実装があります。

サーバーにバックアップされた実装に移動します。

このクラスは、Swift 5.7で新しい正規表現リテラルを使用して解析を実装します。

私の同僚は、問題が私たちのユニットテストで発見されていると私に言いました。

今すぐそれらを実行しましょう。

はい、私たちはいくつかの失敗があります。

見てみましょう。 

イベント数を抽出することに何か問題があるようです。

この関数がどのように呼び出されるかを確認しましょう。

コマンドキーを押しながらこのメソッドの呼び出しを開くと、直接確認できます。

定義リストと同様に、呼び出し者リストには、このメソッドの呼び出しを含むさまざまなファイルと関数と、各コールサイトのプレビューが表示されます。

これは失敗したテスト方法からの呼び出しです。

プレビューは、テストが文字列「0レコード」に合格していることを示しています。これは私に問題についてのヒントを与えてくれます。

そして今、私はバグを見つけることができます:正規表現は1〜9の数字と一致していますが、ゼロを含めるのを忘れました!

0-9を使用するように文字範囲を更新するか、より説明的な数字文字クラスに切り替えることで、これを修正できます。

何かがまだ正しくありませんが、今、コンパイラがその理由を教えています。

正規表現は、Swift 5.7のファーストクラスの機能です。

コンパイラは他のコードと同じように私の正規表現をチェックし、Xcodeはすぐに私のタイプミスをハイライトします。

式を修正すると、2つのことが起こることに注意してください。正規表現のシンタックスハイライトが私の編集を確認し、エラーが灰色に薄暗くなります。

この新しい調光は、Xcodeが診断を再評価していることを示しています。

しばらく一時停止すると、ファイルが再処理され、Xcodeはエラーが解決されたことを確認します。

この調光は長いビルド中にも行われるので、どの問題が最新のビルドからのもので、どの問題が以前のビルドからのものかを簡単に知ることができます。

テストに行きましょう。

これは、テスト方法の真ん中にある呼び出しにまっすぐに私をジャンプしました。

エディタの上部を見てください。

Xcode 14は、スクロールされても、目に見えるコードを含む定義を示しています。

上部のテストダイヤモンドを使ってテストを再実行できます。

素晴らしい、修正はすべてのテストに合格します。

Xcode 14を使用すると、新しいコード補完でより速くコードを書き、SwiftUIプレビューバリアントで流動的に設計し、改善されたエラー表示でより多くの情報を得て、定義にジャンプして自信を持ってナビゲートすることができます。

そして、さらに多くのものがあります。こちらがリサです。

ありがとう、ジョナサン。

ビルドパフォーマンスの改善を見てみましょう。 

Xcodeがフレームワークやアプリケーションなどの複数のターゲットを構築すると、まずフレームワークソースをコンパイルします。

次に、モジュールを生成します。

これにより、アプリケーションソースのリンクとコンパイルが可能になります。

そして、アプリケーションをリンクし、ビルドを完了します。

Xcode 14は、並列性を改善するためにビルドを再配置します。

Swiftモジュールを熱心に生産することで、Xcodeはビルドタスクのブロックを解除し、並列性を高めます。

マシンの同時使用をより尊重しながら、ビルドのすべての重要なパスを短縮します。

しかし、私たちはそこで止まりませんでした。

また、並列性を高めることで、リンカーを最大2倍高速化しました。

全体として、Xcode 14はプロジェクトを最大25%速く構築し、最も多くのコアを持つマシンが最大の改善を見ています。

スケジューリングの構築が改善されても、プロジェクトが長い同期タスクに内部依存関係を持つ場合があります。

視覚化なしでこれが起こっていることを伝えるのは難しいかもしれません。

良いニュース、私たちはそれをXcode 14に含めました!

新しいビルドタイムラインは、ビルドログまたは結果バンドルで開くことができます。

予想外に長いタスクやボトルネックを特定するのに役立ちます。

これがフードトラックのビルドタイムラインです。

ビルドを単一のコアに制限するスクリプトフェーズが見えます。

新しいビルドタイムラインを使用して、重要な洞察を得て、ビルドのパフォーマンスの機会を特定できます。

ビルドの並列化、新しいビルドタイムライン、および「Xcodeビルドで並列化を解明する」と「Link Fast: ビルドと起動を改善する」のリンクについてすべて学ぶことができます。

Xcodeでの並列テストは、テストをより高速に実行するための素晴らしい方法でした。

Xcode 14では、さらに優れています。

先ほどお見せしたビルドパフォーマンスを向上させるために、同じテクニックを使用しました。

Xcode 14は、ターゲットとテストクラス間のスケジューリングの依存関係を排除し、テスト中の並列性をさらに高めます。

異なるテストクラスとターゲットで長時間実行するテストがある場合、この機能はテストの実行時間を最大30%向上させることができます。

テストの速度と信頼性を向上させる方法については、「Xcode Cloudの高速で信頼性の高いテストを承認」をご覧ください。

構築が速くなり、テストが速くなり、macOSアプリの配布の準備も速くなります。

Xcode 14で公証を4倍に高速化しました。

Interface Builderを使用するプロジェクトでは、もっと良いニュースがあります!

ドキュメントの読み込みは最大50%高速で、デバイスバーでのiPhoneとiPadの切り替えは最大30%高速です。

キャンバスの編集操作は段階的であり、見ているシーンに優先順位を付けて、大きなストーリーボードでもすぐにフィードバックを提供します。

Xcode 14はより高速で、使いやすいです。

やり方をお見せしましょう。

Xcode 14を使用すると、アプリをさまざまなプラットフォームに簡単に持ち込むことができます。

単一のターゲットを使用してアプリを定義し、サポートするプラットフォームを一覧表示できます。

これにより、設定とファイルを同期させる必要がなくなり、各プラットフォームでユニークなものを説明するだけで済みます。

プロジェクトでこの機能を利用するには、「Xcodeを使用してマルチプラットフォームアプリを構築する」をチェックしてください。

Xcodeには、アプリを小さくするための優れたツールもあります。

メモリデバッガは、アプリケーションのリークを探索するのに常に最適です。

ルートオブジェクトから予期しないライブオブジェクトへの最短パスをゼロにするので、漏洩した理由を調査できます。

Xcode 14は、これらの機能を拡張して、オブジェクトの出入りするすべての参照パスを確認できるようにします。

漏れのより徹底的な説明に加えて、オブジェクトの総重量を測定できるようになりました。

Xcode 14では、SwiftパッケージプラグインでXcode自体を拡張することもできます。

これで、パッケージはリンターやフォーマッタなどのコードを処理するプラグインを統合でき、プロジェクトナビゲーターから直接呼び出すことができます。

また、ビルド中にコードやプロセスリソースを生成するビルドツールを統合することもできます。

たとえば、ビルド中にリモートプロシージャコールインターフェイスの高レベルの説明を低レベルのグルーコードに変換できます。

構築中にリソースを圧縮または最適化することもできます。

パッケージプラグインの詳細については、「Meet Swift Package plugins」と「Create Swift Package plugins」をチェックしてください。

アプリケーションと同じようにパッケージリソースをローカライズすることもできます。

これで、パッケージのデフォルトのローカリゼーションを設定し、ローカリゼーションカタログをエクスポートし、翻訳し、再インポートすることができます。

ローカリゼーションの詳細については、「グローバルアプリの構築：例によるローカリゼーション」をご覧ください。

次に、実行先セレクタに移りましょう。

デバイス間の切り替えは私がいつもやっていることであり、更新された実行先セレクタで必要なデバイスを入手するのがさらに簡単になりました。

見てみましょう。 

実行先セレクタを開くと、選択したスキームで利用可能なすべての実行先が表示されます。

私はよくiPhoneとiPadを切り替えます。

新しい実行先セレクタは、最近の選択を優先するので、これは本当に便利です。

また、最近使用していない他のデバイスを選択するのも簡単です。

ここでリストをフィルタリングし、「max」と入力してすべてのMaxデバイスをまとめて、欲しいものを簡単に選ぶことができます。

これらの同じ機能はすべて、スキームセレクタでも利用できます。

次に、オーガナイザーウィンドウを見てみましょう。 主催者ウィンドウを見てみましょう。

新しい問題を特定し、アプリを改善するために、オーガナイザーにいくつかの大きな改善を行いました。

オーガナイザーには、アプリのユーザーがユーザーのデバイスでどのように機能しているかを理解するのに役立つ2つの新しいレポートがあります。フィードバックとハング。

飛び込みましょう。

フィードバックオーガナイザーは、すべてのTestFlightフィードバックをXcodeに直接表示します。

TestFlightユーザーは、最近のビルドについて素晴らしいコメントとスクリーンショットを送信しました。

検査官は、根本的な問題を特定するのに役立つ、テスター情報やデバイス構成などの追加の詳細を表示します。

もう少しコンテキストが必要な場合は、このボタンでテスターに直接メールを送ることができます。

TestFlightのフィードバックはベータユーザーからのものですが、テストをすり抜けてApp Storeに入れる可能性のある問題がいくつかあります。

このような最も一般的なタイプのバグの1つはハングです。

アプリは、ユーザー入力を処理するために休憩を取らずにメインスレッドを使用するとハングします。

あなたのコードは重要な仕事をしているかもしれませんが、ユーザーは反応しないアプリを経験します。

この新しいハングレポートは、App Storeユーザーから最もインパクトのあるハングを示し、どのコードを再構築して最大の影響を与えるかを知ることができます。

左側には、重大度順に並べられたハングのリストがあります。

それぞれに、問題のあるコードを示す加重バックトレースがあります。

私たちのアプリは多くのデバイスとOSバージョンをサポートしています。

いくつかのハングは、他のものよりも特定の構成に影響を与えます。

検査官では、このハングが主にiOS 15.3で起こることがわかりに役立ちます。

これに取り組む準備ができたら、このプロジェクトで開くボタンでコードに直接飛び込むことができます。

新しいハングとフィードバックレポートは、問題をトリアージし、ユーザーに適切な修正を迅速に取得するのに役立ちます。

ハングの修正の詳細については、「Xcodeとデバイス上の検出でハングアップを追跡する」をチェックしてください。

次に、アイコンを見てみましょう。 

私たちのアプリのアイコンは、ピクセルヒントに時間を取り、すべての解像度に適切な数のストライプを選択して、常に鮮明に見えるようにしたため、あらゆるサイズで見栄えがします。

このピクセルヒントはすべて、一部のアイコンには完全に不可欠であり、他のアイコンには不要になる可能性があります。

今、私たちは新しいアイコンを持っています。

それを見てみましょう。 てみましょう。

これらのシンプルなテクスチャはヒントを必要とせず、どんなサイズでも素晴らしく見えます。

ダブルクリックで、新しい画像を選択できます。

Xcode 14では、自分に合った詳細レベルを選択できます。

このアイコンでは、私たちの単一の画像は素晴らしく見えます。

新しいシングルサイズ機能を使用して、Xcodeにこのサイズからすべての異なるサイズを自動的に作成するように指示します。

これを行うには、インスペクタでシングルサイズを選択できます。

そして、それだけです!

これは、Xcode 14の新機能の簡単な概要でした。

あなたの開発を手伝うのはより速く、より簡単です。

見てくれてありがとう!

ジョナサン：ダウンロードして、今日から始めましょう！

♪