10095

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

ミランダ・チョウ：こんにちは、私の名前はミランダで、共有チームのエンジニアです。

Elana Stettin：私はElanaで、メッセージチームのエンジニアです。

ミランダ：このビデオでは、エラナと私は、あなたのアプリでメッセージとのコラボレーションを強化する方法に飛び込みます。

その機能が何であるかの紹介から始めます。

この機能を採用する準備をする方法と、コラボレーションを開始するプロセスにメッセージを結びつける方法を学びます。

Elanaは、メッセージUIとのコラボレーションをアプリに追加する方法を説明し、最後にコラボレーションが更新されたときに最新の状態に保つ方法について説明します。

まず、メッセージとのコラボレーションを紹介しましょう!

iOS 16とmacOS Venturaでは、協力している人々の間のコミュニケーションを改善するための新しくて簡単な方法を追加しました。

共同作業者は、メッセージを介して共有することで、文書を会話に結びつけることができます。

コラボレーション活動は、メッセージの会話や進行中のFaceTime通話で表面化されます。

カスタマイズ可能なコラボレーションポップオーバーもアプリに提供され、コラボレーションの詳細を管理し、メッセージの会話に接続できます。

これは、共有シートやドラッグアンドドロップなど、すでに使用している技術に基づいています。

次に、私たちがサポートするコラボレーションインフラストラクチャの種類と、それらのそれぞれをメッセージコラボレーションに結びつける方法について説明します。

CloudKit、iCloud Drive、および現在使用しているカスタムコラボレーションインフラストラクチャの3種類のコラボレーションインフラストラクチャをサポートしています。

このビデオでは、主にCloudKitとiCloud Driveのケースに焦点を当てます。

カスタムインフラストラクチャを使用している場合は、「カスタムコラボレーションアプリをメッセージと統合する」ビデオで詳細を確認してください。

CloudKitベースのコラボレーションを使用する場合は、システムがコラボレーションのために認識できるオブジェクトを作成するための新しいAPIを提供しました。

これは、NSSharingServiceとの共有を開始または管理するためのmacOS Sierra APIに基づいています。

コラボレーションオブジェクトを取得したら、共有を開始または管理するためのUIを表示するアプリの場所を特定します。

既存のAppKit APIを廃止するため、メッセージとのコラボレーションを強化するために、新しいAPIに更新する必要があります。

新しいコラボレーションオブジェクトAPIは、NSItemProviderを使用しています。

NSItemProviderは、システムサービスによって、アプリのデータをシステム上の他のプロセスに転送するために使用されます。

プロバイダーは、コラボレーションアイテムのCKShare、またはコラボレーションの開始時にCKShareを作成する準備ハンドラーのいずれかを必要とします。

アプリのCKContainerも必要です。

そして最後に、コラボレーションのアクセスと権限のオプションを表すCKAllowedSharingOptionsオブジェクトを提供します。

オプションの値は、以前にNSCloudSharingServiceDelegateメソッドから要求されたNSCloudKitSharingServiceOptionsと同じです。

以下は、CloudKitコラボレーションオブジェクトの作成がどのように見えるかの簡単な概要です。

コラボレーションが開始され、準備ハンドラを渡す場合は、共有を作成してハンドラ内のサーバーに保存する必要があります。

すでに開始されている場合は、関連するシェアを渡すだけです。

登録されているCKAllowedSharingOptionsインスタンスは、許可されたオプションのデフォルトセットを返す静的標準プロパティを使用しています。

CloudKitの採用者は、それを使用するか、制限された許可されたオプションのセットに対してクラスのカスタムインスタンスを作成できます。

CloudKitの採用に興味があるかもしれない人のために、CloudKitを使用すると、独自のサーバーコードを書くことなく、iCloudをアプリのデータベースとして使用できます。

また、そのデータの一部を他のiCloudユーザーと共有する組み込みの方法も得られます。

詳細については、「CloudKitの新機能」ビデオをご覧ください。

iCloud Driveを使用している場合、コラボレーションのためのオブジェクトは単にファイルのURLです - 私たちはそれを認識するためにすべての作業を行います!

それを手に入れたら、アプリでコラボレーションを開始または管理するためのエントリポイントを特定し、それらを新しく改良されたバージョンに置き換える準備をしてください。

カスタムコラボレーションインフラストラクチャの場合、コラボレーションオブジェクトはSWCollaborationMetadataと呼ばれ、新しいNSItemProvider APIでラップされます。

このAPIを使用してコラボレーションUIを更新する方法の詳細については、「カスタムコラボレーションアプリとメッセージを統合する」ビデオをご覧ください。

今、あなたは行く準備ができています。

次に、コラボレーションを開始します。

2つの異なる方法があります。新しいコラボレーションモードでの共有シートと、アプリまたはiOSのファイルアプリとmacOSのFinderから、メッセージへのドラッグアンドドロップです。

新しいシェアシートコラボレーションモードは、ヘッダーのインジケーターで識別できます。これは、コラボレーションとコピーの送信の選択肢も提供します。

共有シートでコラボレーションを行うには、以前に準備したコラボレーションオブジェクトを共有シートに渡します。

macOSでは、このコラボレーションインジケーターが美しい新しい共有ポップオーバーに表示されます!

共有ポップオーバーには、ヘッダーのタイトルと画像、会話の提案の行、およびすでに提供したすべてのトランスポートも含まれています。

詳細については、WWDC22の「AppKitの新機能」ビデオをご覧ください。

iOSとMac Catalystでは、UIActivityViewControllerクラスを使用して共有シートを表示します。

macOSでは、NSSharingServicePickerを使用して共有ポップオーバーを表示します。

コラボレーションオブジェクトをアクティビティアイテムとしてUIActivityViewControllerに渡して、コラボレーションを有効にして表示します。

同様に、コラボレーションオブジェクトを使用してNSSharingServicePickerを初期化して、コラボレーションを有効にして表示します。

CloudKitの採用者は、ヘッダーのタイトルと画像を提供するために追加のステップを踏む必要があります。

iOSでは、UIActivityItemsConfigurationやUIActivityItemSourceなどの既存のAPIを使用して、LPLinkMetadataオブジェクトにタイトルとimageProviderを提供します。

コラボレーションオブジェクトで設定を作成し、共有されるアイテムのLPLinkMetadataオブジェクトを返すようにメタデータプロバイダーを設定します。

最後に、その設定でUIActivityViewControllerを初期化します。

macOSでは、ヘッダーメタデータを提供するためのNSPreviewRepresenting ActivityItemという新しいAPIがあります。

詳細については、NSPreviewRepresenting ActivityItemのドキュメントを参照してください。

NSPreviewRepresenting ActivityItemを使用するには、まずタイトル、画像、アイコンを選択します。

画像は共有されるアイテムを表し、アイコンは共有されるアイテムのソースを表します。たとえば、アプリのアイコンです。

コラボレーションオブジェクト、タイトル、画像、アイコンを使用してNSPreviewRepresenting ActivityItemを作成し、そのプレビューアイテムでNSSharingServicePickerを初期化します。

エキサイティングなことに、共有シート用の新しいSwiftUI ShareLink APIは、コラボレーションモードもサポートします!

採用するには、共有するアイテムは、共有とデータ転送のための新しいプロトコルであるTransferableで表される必要があります。

CloudKitの採用者は、Transferableアイテムから返されるCKShareTransferRepresentationを通じて、共有、コンテナ、およびオプションを提供します。

詳細については、「Meet Transferable」とWWDC22「SwiftUIの新機能」のビデオをご覧ください。

以下は、NotesのようなCloudKitの採用者がShareLinkと共有するための譲渡可能なオブジェクトを作成する方法の例です。

このメモは、既存のCKShare、CKContainer、およびCKAllowedSharingOptions値を持つ既存の値として、またはCKContainer、CKAllowedSharingOptions値、およびコラボレーションオブジェクトのCKShareを作成して保存するための準備ハンドラを持つprepareShare値として構築されるCKShareTransferRepresentationを提供します。

iCloud Driveの採用者の場合、ファイルURLはShareLinkを通じて共有する転送可能なオブジェクトです。

カスタムコラボレーションインフラストラクチャをお持ちの場合は、転送可能なオブジェクトからSWCollaborationMetadataオブジェクトを返す方法については、「カスタムコラボレーションアプリをメッセージと統合する」ビデオをご覧ください。

転送可能なオブジェクトを取得したら、共有するアイテムとしてShareLink初期化子に渡します。

同時に、タイトルと画像を含むプレビューを渡して、共有シートのヘッダーを埋めます。

共有シートのコラボレーションモードヘッダーの注目すべき特徴の1つは、アクセスと権限のオプションの概要です。

この要約をタップすると、共同作業者が共同作業に使用するアクセスと権限のオプションを選択するビューが表示されます。

CloudKitの採用者の場合、このビューはコラボレーションオブジェクトに登録されたオプションのセットを表示します。

iCloud Driveの採用者は、iCloud Driveオプションの標準セットを表示します。

カスタムインフラストラクチャをお持ちの場合は、カスタムオプションを指定してこのビューに表示する方法については、「カスタムコラボレーションアプリをメッセージと統合する」ビデオをご覧ください。

コラボレーションを開始する方法がもう1つあり、それはドラッグアンドドロップです。

共同作業者は、ドキュメントをメッセージにドラッグするだけで、メッセージ内のドキュメントの新しいコラボレーション対応リッチリンクを取得できます。

このリッチリンクは、コラボレーションとコピーの送信、およびコラボレーションオプションの選択の両方の機能を提供します。

採用するには、iOS 16とmacOS VenturaのShareLinkを通じてコラボレーションオブジェクトを提供してください。

そして、それがメッセージとのコラボレーションを準備し、開始する方法です。

次に、あなたのアプリのコラボレーション体験を次のレベルに引き上げることについて話すエラナに引き渡します。

エラナ:ありがとう、ミランダ!

始める方法がわかったので、コラボレーションUIをアプリにさらに統合する方法について話します。

コラボレーション体験を増幅するために、これらの新機能を追加しました。

コラボレーションボタンはアプリのナビゲーションに配置され、関連するメッセージグループのグループ写真が表示されます。

ボタンの右側には、他の人がドキュメントに存在するときに表示されるアクティブな参加者数もあります。

コラボレーションボタンをタップすると、新しいコラボレーションポップオーバーが表示されます。

カスタマイズ可能なポップオーバーは、コラボレーションの概要を示しています。

また、ユーザーはワンタップで他の参加者とのコミュニケーションを開始できます。

これにより、メッセージとFaceTimeを介してリアルタイムで連携できるようになります。

これらのUI要素はすべて、SharedWithYouフレームワークの単一のクラスであるSWCollaborationViewによって供給されています。

このビューは、ナビゲーションのボタンビューを表します。

SWCollaborationViewを初期化するだけで、ポップオーバーのレイアウトとプレゼンテーションを処理します。

カスタムコンテンツを表示するには、ポップオーバーに追加されるビューを提供します。

次に、コードを調べてSWCollaborationViewを作成します。

itemProviderでSWCollaborationViewを初期化します。

itemProviderには、CloudKitベースのアプリのCKShare、iCloud DriveベースのアプリのfileURL、またはカスタムコラボレーションインフラストラクチャのSWコラボレーションメタデータが含まれています。

コラボレーション ビューで activeParticipantCount プロパティを設定して、ドキュメントのアクティブな参加者数を表示します。

次に、laborationViewにcontentViewプロパティを設定して、カスタムコンテンツでポップオーバーを提供します。

ContentViewは、ポップオーバーを完全にカスタマイズ可能にするものです。

ここでは、独自のコンテンツを追加して、コラボレーションで何が起こっているかについてのユニークなビューをユーザーに提供します。

たとえば、Pages では、ContentView には現在の参加者リストと参加者カーソルのトグルが含まれています。

では、「管理」ボタンを見てみましょう。

CloudKitとiCloud Driveの採用者の場合、この管理ボタンは管理UIを表示し、参加者を追加および削除したり、共有設定を変更したりできます。

これについてすぐに詳しく話します。

コラボレーションビューでmanageButtonTitleプロパティを設定して、提供されたボタンのタイトルをカスタマイズします。

このプロパティを設定しない場合、タイトルはデフォルトで「共有の管理」になります。

アプリがカスタムコラボレーションインフラストラクチャを使用している場合は、contentViewに独自の管理ボタンを含めてください。

1つはあなたに提供されません。

Macでは、Appleのデザインの推奨事項に準拠するために、ボタンの背景が透明であることを確認してください。

最後に、createViewをカスタムビューとして使用して、ここに示すようにiOSでUIBarButtonItemを作成します。

Macでは、UIBarButtonItemを使用してNSToolbarItemを初期化します。

次に、バーボタン項目またはツールバー項目をViewControllerのnavigationItemに追加します。

先に述べたように、CloudKitとiCloud Driveの採用者には、コラボレーションポップオーバーのボタンが提供されます。

これにより、これまでと同じ方法で株式を管理できます。

提供された管理UIの変更は、変更を観察するためにすでに使用されているのと同じデリゲートプロトコル（UICloudSharing ControllerDelegateおよびNSCloudSharing ServiceDelegate）に従うことで観察できます。

これで、新しいコラボレーションUIをアプリに統合する方法を理解できます。

次に、コラボレーションの更新を観察して処理する方法について説明します。

シェアがいつ開始または停止するかを知ることが重要です。

CloudKitの採用者のために、それを通知するために、CKSystemSharing UIObserverという新しいプロトコルを追加しました。

このプロトコルを使用すると、CloudKit共有UIを必要とせずに、CKShareが保存または削除されたときに対応するコールバックを取得します。

今からいくつかのコードを案内します。

CKContainerを使用してオブザーバーを初期化します。

オブザーバーで、CKShareが保存されたときに実行されるクロージャを定義し、systemSharingUI DidSaveShareBlockに割り当てます。

クロージャでは、共有が正しく保存された場合、共有が開始されたことを示す成功結果と、関連するCKShareが動作します。

保存に失敗した場合、失敗結果と関連するエラーが表示されます。

これは、ドキュメントの所有者が共有を停止したときのクロージャの実装です。

成功の場合、CKShareは正常に削除されました。

障害が発生した場合、関連するエラーも発生します。

株式の開始と停止は、あなたが気にするかもしれない唯一の変更ではありません。

いくつかの変更は、ユーザーにバブルアップしたいと思うかもしれません。

関連するメッセージスレッドの上部に、コラボレーションの更新をまとめた通知を投稿できるようにAPIを追加しました。

協力者には、アップデートが何であり、誰が変更を行ったかが表示されます。

通知を投稿するには、Shared with Youのコラボレーション固有のタイプのハイライトであるSWCollaborationHighlightを取得します。

SWCollaborationHighlightイベントを作成するために使用します。

SWHighlightsやその他のSharedWithYou APIの詳細については、「Shared with Youをアプリに追加」ビデオをご覧ください。

通知を採用するために仕事を始める前に、このビデオを見てください。

例として、CloudKitアプリを使用してさまざまな通知を投稿することについて説明します。

アプリがカスタムコラボレーションインフラストラクチャを使用している場合は、「カスタムコラボレーションアプリをメッセージと統合する」ビデオで詳細な手順を確認してください。

通知を表すために、SWHighlightEventというプロトコルを導入しました。

ハイライトイベントは、SWHighlightCenter APIから取得したSWHighlightsで初期化されます。

サポートされているイベントタイプには、コンテンツの更新またはコメントの変更イベント、ユーザーがコラボレーションで言及された場合のメンションイベント、コンテンツが移動、名前変更、または削除されたときの永続性イベント、および参加者がドキュメントに追加または削除されたときのメンバーシップイベントが含まれます。

コラボレーションが編集されたときに変更イベントを投稿する方法を示す例を次に示します。

ハイライトセンターAPIを使用して、CKShare URLを使用してコラボレーションのハイライトを取得します。

このCKShareは、コラボレーションの開始時に定義したものなので、コンテンツの変更が行われたときにアプリがこれを利用できるようにする必要があります。

次に、HighlightChangeEventインスタンスを作成します。

初期化子はハイライトとトリガー列挙値を取ります。

この場合、編集するトリガータイプを設定します。

最後に、そのイベントの通知をハイライトセンターに投稿してください。

残りのイベントは、どのユーザーが言及されたかを示すためにより多くの情報を必要とするため、唯一の例外が言及されたイベントで、同様の形式に従います。

アプリがユーザーのメンションをサポートしている場合にのみ、このタイプのイベントを投稿できます。

検索されたハイライトと言及されたCKShare参加者のハンドルを渡して、言及イベントを作成します。

この通知は、上記のユーザーにのみ表示されます。

コンテンツが移動、名前変更、または削除されたときに、永続性イベントタイプを使用します。

ここでは、名前が変更されたトリガータイプは、ドキュメント名が変更されたことを示すために使用されます。

最後に、ここにメンバーシップイベントがあります。

membershipEventの場合は、代わりにaddedCollaboratorまたはremovedCollaboratorトリガータイプを使用してください。

Mentioneventsでは、ドキュメントのメンバーシップがどのように変更されたかを示す通知が掲載されます。

ただし、メッセージグループのメンバーシップが変更されたときに、共有ドキュメントの共同作業者を同期させることもできます。

CloudKitとiCloud Driveの場合、これは簡単です:私たちはあなたのために仕事をします。

新しい人がコラボレーションでメッセージグループに追加されると、ドキュメントの所有者は通知を介して共有に追加するように求められます。

誰かが削除されたときも同じことが言えます。

カスタムコラボレーションインフラストラクチャを備えたアプリの場合、もう少しやるべきことがあります。

SWCollaborationActionHandler APIを採用する必要があります。これは、「カスタムコラボレーションアプリをメッセージと統合する」で詳細を学習できます。

これで、CloudKit、iCloud Drive、または独自のコラボレーションインフラストラクチャを使用しているかどうかにかかわらず、メッセージでコラボレーションを開始し、アプリに統合する方法がわかりました。

新しいシェアシートとドラッグアンドドロップAPIを採用して、コラボレーションを開始するアプリを準備します。

新しいコラボレーションUIを統合して、共有ドキュメントで何が起こっているかのカスタマイズされた概要を提供します。

それを設定したら、さらに進んで、メッセージスレッド内からコラボレーションの変更を表示する通知を採用してください。

ミランダと私は、あなたのアプリがメッセージのこれらの新しいコラボレーション機能をどのように活用するかを見るのが待ちきれません!

両方:見てくれてありがとう!

♪