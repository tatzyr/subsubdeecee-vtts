110374

♪インストゥルメンタルヒップホップ音楽♪

こんにちは、私の名前はアダムで、開発者体験チームのマネージャーです。

そして、私はXcodeクラウドチームのエンジニアであるSasanです。

このセッションでは、既存のワークフローを確認し、新しいXcode Cloud Usageダッシュボードを強調することで、Xcode Cloudを最大限に活用する方法を紹介します。

次に、既存のプロジェクトの使用状況の表示から学んだことを活用して、さらに最適化し、プロジェクトの新しいWatch OS Appバージョンの開発を開始する方法を見ていきます。その前に、Xcode Cloudの概要を簡単に見てみましょう。

WWDC 2021では、Xcodeに組み込まれ、Apple開発者向けに特別に設計された継続的な統合および配信サービスであるXcode Cloudを発表しました。

Xcode Cloudを使用すると、コードの開発と保守を支援し、テスターやユーザーにアプリを配信するのに役立つ標準的なソフトウェア開発プラクティスである継続的な統合と配信を採用できます。

Xcode Cloudは、ユーザーのプライバシーを保護しながら、アプリの構築、自動テストの実行、テスターへのアプリの配信、ユーザーのフィードバックの表示、管理に役立つクラウドベースのツールをまとめることで、高品質のアプリの開発と配信を加速します。

初めてXcode Cloudを設定する方法についてもっと知りたい場合は、WWDC 2021の「Meet Xcode Cloud」をチェックしてください。ホリーとジェフが最初のワークフローの設定について詳しく説明します。

では、既存のワークフローを見て、Xcode Cloudのフードトラックアプリを構築しましょう。

これはApp Store ConnectのXcode Cloudダッシュボードで、フードトラックプロジェクトの最近のビルドの概要を説明します。

私たちは最近、コンパニオンwatchOSアプリを追加することを決定したので、フードトラックのオペレーターは、新しい注文が入ってくるたびに携帯電話に手を伸ばすことなく、時計からの着信注文をすばやく受け入れることができます。

Xcode Cloudで新しいwatchOSアプリの構築を開始する前に、現在のワークフローとプロジェクトが完全に最適化されていることを確認し、必要なビルドとテストの結果をできるだけ早く入手したいと考えています。

ここでは時間とリソースを節約できる方法があるかもしれないと思います。

これらの最適化のいくつかを開始できる場所をよりよく理解するために、ビルドの詳細の概要を詳しく見てみましょう。

まず、午前9時15分にビルドを開始したことに気づきました。

そして、完了して結果を提示するのに14分かかりました。

また、使用に関連する時間があり、この場合は32分です。

これは、14分間のビルドのすべてのアクションが完了するまでにかかった合計時間です。

使用状況の横には、このビルドのアクションの分布を表示するオプションが表示されます。

各アクションは、それぞれの使用法とともに分割され、32分の合計が下部に示されています。

この使用分布は、私たちがいくつかの最適化を行う可能性のあるいくつかの場所のアイデアを提供します。

しかし、その前に、Xcode Cloudがこれらのアクションを実行する方法と、ビルド期間と使用状況の違いについて詳しく見てみましょう。

各ビルドは、ワークフローの設定に応じて一連のアクションに分割されます。

Xcode Cloudが各アクションを分析、アーカイブ、ビルド、テストなどの複数の並列アクションにどのように分割するかがわかります。

これらのアクションは並行して実行されるため、ビルドの期間は最も長く実行されているアクションに等しくなります。この場合、ワークフローで設定したテストは、完了するのに14分かかりました。

さて、使用量を計算するとき、これらのアクションのそれぞれが順番に観察されると、ビルドの合計計算使用量が得られます。この場合は32分です。

そして、それがXcode Cloudが特定のビルドのビルド期間と使用状況を計算する方法です。

では、App Store ConnectのXcode Cloud Usageダッシュボードを見てみましょう!

一番上にあるのは、トラック・トゥ・テーブル・チームの月次サイクルの開始以来、使用された合計パーセンテージを含む使用状況の概要です。

さらに、チームの現在のサイクルで利用可能な残りのコンピューティングとともに、合計使用量が分数で表されます。

この下には、過去30日間のパーセンテージの増加または減少とともに、作成されたビルドと全体的な使用状況によって分割された、チームの使用傾向に特化したエリアがあります。

別の期間の使用状況を確認したい場合は、トレンドセクションの右上隅にある期間を変更することで確認できます。

ページの少し下には、上記で選択した期間中に、現在Xcode Cloudを使用している各製品の合計使用量が表示されます。

さて、フードトラックを選択して、総使用量の内訳を確認しましょう。

ここでは、チームビューから同じ傾向を見ることから始めますが、現在はフードトラックプロジェクトに固有のものです。

ページの少し下には、各ワークフローの使用統計が表示されます。

一見すると、リリースワークフローから、これはいくつかの最適化を開始するのに最適な場所になることがわかります。

さて、私はそれをSasanに引き渡すつもりです。Sasanは、ビルドの詳細と計算の使用状況を観察した後、プロジェクトを最適化するいくつかの方法を紹介します。

それがどのように行われるかを彼らに見せてください、ササン。

ササン:ありがとう、アダム。

フードトラックプロジェクトを使用して、Xcode Cloudを使用する際のベストプラクティスのいくつかをカバーしましょう。

これにより、新しいwatchOSアプリですばやく反復を開始できるはずです。

ワークフローは、開始条件を使用してビルドを開始するタイミングを定義します。

ワークフローを意図した変更に対してのみビルドが開始されるように、開始条件を設定することが重要です。

このプラクティスをフードトラックプロジェクトのリリースワークフローに適用する方法を見てみましょう。

しかし、まず、より詳細な情報については、「Explore Xcode Cloud Workflows」をチェックすることをお勧めします。

私はAdamがXcodeで以前に私たちに見せたのと同じビルドを持っています。

まず、エディタウィンドウでリリースワークフローを開きましょう。

ナビゲーションパネルでワークフローを右クリックし、[ワークフローの編集]を選択します。

エディタウィンドウでは、開始条件のセクションを含む、ワークフローを構成するすべての設定可能なセクションを見ることができます。

スケジュールされたビルドに新しい変更が含まれていないことがあることがわかりました。

それに対処するために、既存のスケジュールされた開始条件を置き換えるために、ブランチ変更の新しい開始条件を追加しましょう。

これにより、重複したコミットを作成しないことが保証されます。

[プラス] ボタンで、[ブランチの変更] を選択します。

スケジュールされた開始条件を削除するには、それを選択してゴミ箱アイコンをクリックします。

ブランチの変更開始条件は、新しいコミットがリモートブランチにプッシュされるたびに実行されます。

デフォルトでは、ソースブランチは任意のブランチに設定されています。

これは、リポジトリのブランチに変更を加えると、このワークフローがビルドを開始することを意味します。

リリースワークフローは徹底的に設定されているため、リリースブランチのビルドのみを開始するようにこれを制限したいと思います。

カスタムブランチをクリックすると、カスタムブランチを指定する必要があることがすぐにわかります。

プラスボタンをクリックして、ブランチ名を入力します。

エディタでは、正確なブランチ名またはプレフィックスのいずれかを選択できます。

この場合、複数のリリースブランチがあることを知っているので、「リリース」で始まるブランチを選択します。

次に、リリースブランチからビルドを開始できるファイルとフォルダを指定します。

私の目標は、docsフォルダが変更されたときにビルドを開始しないことです。

このフォルダには開発ドキュメントのみが含まれているので、スキップしても安全です。

[ファイルとフォルダー] オプションで、[カスタム条件] を選択します。

[ビルドの開始]ドロップダウンを選択し、[ビルドを開始しない]を選択します。

プラスボタンをクリックして、新しい条件を追加します。

[任意のフォルダ] を選択して [選択] を選択して、除外するフォルダを指定します。

最後に、これでファイルピッカーが開きます。

これで、ドキュメントフォルダを選択して[開く]をクリックできます。

最後に、[保存]をクリックして変更を永続化します。

これで、開始条件は、リリースプレフィックスを持つブランチのみに制限し、ドキュメントフォルダの変更を無視することで、より選択的になるように設定しました。

ワークフローは、事前に定義されたアクションを使用してビルドを実行する方法も定義します。

アクションを使用すると、変更を分析、アーカイブ、構築、テストできます。

テストアクションの重要な要素の1つは、テスト先の選択です。

結果が迅速に配信されるように、テスト製品が構築されると、各宛先は並行して実行されます。

テストのためにシミュレータの目的地の簡潔なセットを選択していることを確認したい。

ビルドを高速化することに加えて、これは同様のデバイスで失敗する可能性のあるテストからのノイズを減らすのにも役立ちます。

Xcode Cloudは、推奨される目的地のエイリアスを提供します。

これらは、画面サイズの断面を表すシミュレータのキュレーションされたリストです。

リリースワークフローをもう一度見て、iOSテストアクションの合理的なシミュレータの宛先を選択する方法を見てみましょう。

テストiOSアクションを選択すると、幅広いテスト先があることがわかります。

テスト先を削除するには、それぞれを選択し、マイナスボタンをクリックします。

次に、最後の項目のドロップダウンメニューをクリックし、推奨iPhoneを選択します。

繰り返しになりますが、[保存]をクリックして変更を永続化します。

私は今、回帰を導入した場合に明確なシグナルを提供するのに役立つ一連のテスト先を持っています。

先に説明したように、リポジトリに新しい変更をプッシュすると、Xcode Cloudがワークフローを実行します。

コミットされる変更の種類に応じて、CIでの構築をスキップしたい場合があります。

私たちはまさにそれを行う能力を追加しました。

Xcodeで見てみましょう。 では見てみましょう。

Xcode Cloudでコミットをスキップするには、コミットメッセージの最後に「ci skip」を追加するだけです。

さて、リモートにプッシュすると、Xcode Cloudはこのイベントを無視することを知っています。

ここに示されているciスキップタグの正確な形式を使用していることを確認してください。

アクションごとに、カスタムスクリプトは複数のポイントで実行されます。

未使用の依存関係を片付け、信頼性が低いことが知られているAPIリクエストを弾力的に再試行することで、ビルドが迅速かつ一貫して完了することを保証します。

カスタムスクリプトやその他の高度なカスタマイズの詳細については、「高度なXcode Cloudワークフローのカスタマイズ」をご覧ください。

テストでは、フレーク状で信頼性の低いテストが迅速に修正されていることを確認する必要があります。

フレークテストが失敗した場合、本能はすぐにビルドを再試行することです。

テストスイートの信頼性に応じて、これは多くの再試行されたビルドにつながる可能性があります。

信頼できるテストを書くのにもっと時間を費やすようにしてください。

それを効果的に行う方法の詳細については、他のセッション「Xcode Cloudの高速で信頼性の高いテスト」をご覧ください。

これまでのところ、私たちはいくつかのベストプラクティスについて議論し、それらをフードトラックプロジェクトに適用しました。

以前のビルドと更新されたワークフローのビルドを比較して、これらの変更がどのような影響を与えたかを見てみましょう。

これは、ベストプラクティスを適用した後に開始されたビルドです。

アダムが見せてくれた以前のビルドと比較して、持続時間は1分減少しましたが、使用量は4分減少しました。

全体的に良い改善がなされたようです。

影響をよりよく理解するために、使用状況ダッシュボードに戻りましょう。

単一のビルドからの影響をすぐに見るのは難しいかもしれないので、別のワークフローである統合ワークフローにベストプラクティスを適用しました。

私たちはしばらくの間、ベストプラクティスを適用してビルドを実行してきました。

使用率が減少傾向にあるため、変更が効果的であったことがわかります。

これは、watchOSアプリの開発を開始するために、より多くのワークフローを追加し、より多くのビルドを開始できるようになったことを意味します。

使用状況ダッシュボードを使用すると、既存のプロジェクトやワークフローに同じベストプラクティスを引き続き適用して、Xcode Cloudを最大限に活用できます。

大規模なチームのためにXcode Cloudを管理する方法の詳細については、チームのためにXcode Cloudにディープダイブをチェックしてください。

あなたが私たちのセッションを楽しんだことを願っています。

アダム:見てくれてありがとう。

♪インストゥルメンタルヒップホップ音楽♪