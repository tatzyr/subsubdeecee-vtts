10140

♪ ♪

アダム：こんにちは、私の名前はアダムで、SharePlayチームのエンジニアです。

SharePlayの新機能と、アプリで採用する方法についてお話しできることを嬉しく思います。

まず、アプリからSharePlayを開始するための新しいAPIについて説明します。

次に、いくつかのエキサイティングなGroupSessionMessengerのアップデートに入ります。

最後に、SharePlayエクスペリエンスの実装に関するいくつかのベストプラクティス。

アプリからSharePlayを開始します。

私たちはあなたのフィードバックを聞き、配信しました。iOS 15.4以降、新しいAPIを活用して、アプリが既存のFaceTime通話なしでSharePlayを開始できるようになりました。

では、それがどのように見えるか見てみましょう。

だから今、私たちがしなければならないのは、お気に入りのSharePlayアプリを見つけることだけです。

音楽アプリとしましょう。

そして、Viral HitsのようにSharePlayしたい曲を見つけて、それを長押しします。

コンテキストメニューで、新しいSharePlayボタンがあることがわかります。

だから私は先に進んでそれを押して、それはピープルピッカーを引き出します。

だから、Sueを選択してFaceTime通話を開始できます。

そして、ご覧のとおり、私たちは今、ステージングされた活動でここにピルを持っています。

だから、Sueが参加したら、先に進んで始めることができ、グループセッションがあります。

まあ、私はそれがすべてかなりクールだと思いましたが、それをもう少し詳細に分解しましょう。

ここでは、ユーザーが共有シートからSharePlayを開始する機能があり、これが機能するために何をする必要があるのか疑問に思うかもしれません。

さて、答えは、あなたのアプリがSharePlayの資格を持っている場合、あなたは私たちのゼロ採用フローでこのボタンを無料で取得しますが、ユーザーはシステムUIを介してGroupActivityを開始することができず、代わりにSharePlayのコンテンツを選択するためにアプリと再対話する必要があるため、これは最適なユーザーエクスペリエンスではありません。

それでは、アプリに新しいAPIをどのように採用するか見てみましょう。

答えは、NSItemProviderにGroupActivityを登録し、ItemProviderをシェアシートに提供するのと同じくらい簡単です。

SharePlayボタンをまだ提供したいが、目立つように表示したくないですか?

問題ありません。

UIActivityViewControllerのallowsProminentActivityで動作を調整できます。

allowsProminentActivityをfalseに設定するだけです。

または、アプリにSharePlayをサポートしていないコンテンツがある場合はどうなりますか?

さて、SharePlayをサポートするためにすべてをサポートしたいと思いますが、UIActivityViewControllerにSharePlayアクティビティタイプを除外するように指示することで、SharePlayが共有シートに表示されないようにすることができます。

また、アプリ内にボタンを直接配置したい場合は、新しいAPI GroupActivitySharingControllerを使用してUIViewControllerを作成し、それを提示することができます!

誰かがあなたのアプリ内エクスペリエンスを押してFaceTimeまたはSharePlayセッションを開始すると、ステージングされたGroupActivityを有効にする機能が表示されます。

アクティベートされると、アプリはGroupSessionを受け取ります。

そして、あなたが自分自身に「待って、アダム、あなたはちょうど「ステージグループ活動」と言ったのですか?」と言っていても心配しないでください。

なぜ、はい。はい、やりました！

しかし、その考えに固執し、後でベストプラクティスについて話すときにそれをより深く掘り下げてみましょう。

とりあえず、DrawTogetherアプリでこれを採用する方法を見てみましょう。

これは私たちのDrawTogetherアプリです。

2021年のWWDCトーク「グループアクティビティでカスタムエクスペリエンスを構築する」と同じアプリなので、まだ見ていない場合は、チェックすることを強くお勧めします。

あなたが先に進んでそれを見たので、あなたは私たちのアプリに共有ボタンがなかったことを覚えているでしょうが、あなたがGroupSessionの資格があったとき、私たちはSharePlayボタンを持っていました。

先に進み、その動作を修正して、isEligibleForGroupSessionがfalseであっても、ボタンを表示し、ユーザーがSharePlayセッションを開始できるようにします。

そして今、私たちは先に進んで、それを実際に見ることができます。

先に進んで、ControlBarコードに行きましょう。

さて、ここで見ることができるように、グループセッションがなく、グループセッションの資格があることを確認する「if」ステートメントがあります。

では、後者のステートメントを削除して、ここに移動しましょう。

そして今、私たちがしなければならないことは、GroupActivity共有コントローラーをいつ提示するかを知るために、新しい変数を登録することです。

だから、ここに新しい変数があります。それでは、その変数がtrueに変わったときに処理しましょう。

そして、SwiftUIでGroupActivity共有コントローラーを提示できるように、今ラッパーを持っている必要があります。

そして今、最後に、私たちがしなければならないのは、GroupSessionの資格がない場合、isSharingControllerPresentedをtrueに設定するための「else」ステートメントを持つことだけです。

そして今、私たちはコードの動作を見ることができます。

そこで、DrawTogetherアプリに移動します。ご覧のとおり、SharePlayボタンがあります。

だから、私たちは今それを押すことができ、私たちはピープルピッカーを与えられています。

そして今、私たちはあなたのアプリからSharePlayを始めるための素晴らしい経験を持っています。

しかし、それは私たちが行った唯一のアップデートではありません。

それでは、私たちが行ったGroupSessionMessengerのアップデートのいくつかについて話しましょう。

GroupSessionMessengerには2つのエキサイティングな新しいアップデートがあります。

最初のアップデートでは、この魔法の数字に遭遇したかもしれません。

これは、GroupSessionMessengerで送信できるペイロードサイズです。

まあ、もう違います。

ペイロードサイズが256KBで4倍大きくなりました。

この変更により、アプリはメッセージを小さなメッセージに分割することを心配する必要はありません。

メッセージを送信して、素晴らしい体験を構築することに集中できます。

そして、それがあなたを十分に興奮させなかったなら、私たちの次のアップデートはそうすると確信しています。

信頼できないメッセージ。

GroupSessionMessengerの一部として、メッセージの信頼性を選択できるようになりました。

これにより、希望する経験に応じて、信頼できるメッセージングと信頼できないメッセージングのどちらかを選択できます。

私たちがしなければならないのは、MessageReliabilityを指定できるGroupSessionMessengerの新しい初期化子を活用することだけです。

APIの使い方を理解したので、その経験はどうですか?

信頼性の低いメッセージングをいつ使いたいですか?

まあ、それは人々がFaceTimeとSharePlayでリアルタイムのアクションを実行している素晴らしい質問です。

だから、セッションに3人いると想像してみましょう。

エイミー、ブライアン、クリス。

それらはすべてセッションに参加し、時間が進むにつれて私たちの映画も同期されます。

しかし、エイミーがその瞬間の特定の時間に関連する何かをしたい場合はどうなりますか?

まあ、信頼できるメッセージングを使用する場合は、すべてのデバイスでメッセージが受信されることを保証しますが、それは彼らが期待している時間に受信されるという意味ではありません。

たとえば、クリスはメッセージを受信しましたが、ブライアンは最初にメッセージをドロップし、その後適切に受信しました。

しかし、覚えておいてください、映画はまだ上映中です。

だから今、私たちはエイミーがメッセージが反映されることを意図した場所にたどり着きましたが、ブライアンはそれを持っていません。

彼は後でそれを受け取りますが、その時点では遅すぎます。

まあ、これは信頼性の低いネットワーキングのための完璧なケースです。

これにより、開発者は、反対側で確実に受信する必要がある情報と、そうでない情報を知ることができます。

これは、ユーザーエクスペリエンスがレイテンシに深く影響するプロトコルを設計する際に理解すべき重要な概念です。

信頼性の低いメッセージはUDPを使用しており、関係する各メッセージの待ち時間とオーバーヘッドが少なく、その結果、それらを介してメッセージを送信するときに、よりリアルタイムのエクスペリエンスが得られます。

それでは、これをDrawTogetherアプリにどのように使用するかについて話しましょう。WWDC '21のこの画面、特に私の美しく描かれたスマイリーフェイスを覚えているかもしれません。

画面にスマイリーフェイスを描いているときに何が起こるかを少し掘り下げてみましょう。

私たちのアプリには、GestureRecognizerをリッスンするコードがあり、変更に気づくたびにメッセージを送信しました。

これは、私たちがスマイリーフェイスを描いているとき、GestureRecognizerが私たちに与えるポイントごとに常に新しいメッセージを送っていたことを意味しました。

それはたくさんのメッセージです!

さて、プロトコルを変更して、信頼性の低いメッセージングを使用して、よりシームレスな描画体験を実現できるようになりました。

ここで行うことは、GestureRecognizerから更新を受け取るたびに、信頼性の低いメッセージングを使用して新しく追加されたポイントを送信できるようにすることです。

ジェスチャーが完了したら、信頼できるメッセージングを使用し、すべてのポイントを与えて、クライアントが見逃したポイントに追いつくようにします。

これにより、信頼性の低いメッセージングによって提供される低レイテンシを利用して、より迅速な描画体験を得ることができます。

では、コードでこれを行う方法を見てみましょう。

では、まずメッセージファイルに行きましょう。

そして、先に進んで新しいメッセージタイプを定義します。

ご覧のとおり、この新しいメッセージタイプは古いものとほぼ同じですが、今回はストロークのすべてのポイントが含まれます。

では、キャンバスファイルに進みます。

そして、取得する新しいメッセージを処理するためにハンドラー機能を設定する必要があります。

そして、先に進んで、私たちの信頼できないメッセンジャーを作りましょう。

まず、変数を作成します。

そして今、それを初期化しましょう。

次に、完成したストロークメッセージを聞きます。

そして、前のメッセージも信頼できないメッセンジャーとしてマークしてください。

しかし、メッセージを送る方法が必要です。

だから、私たちはfinishedStrokeに行きます。

そして、私たちは先に進んで新しいメッセージタイプを送信します。

そして、信頼できないメッセンジャーを使用するためにすべてのポイントを送信するための古い機能を変更しましょう。

そして今、私たちはコードの動作を見ることができます。

そこで、DrawTogetherアプリに行くと、それがどれほどシームレスであるかがわかります。

そして、それだけです!

そして今、約束通り、SharePlay実装のベストプラクティスについて話しましょう。

以前のこの用語を覚えているかもしれません：段階的なグループアクティビティ。

あなたのアプリにとって、その用語はどういう意味ですか?

さて、シナリオを通して話しましょう。

左側のデバイス「アダム」が、右側のデバイス「ブライアン」でSharePlayを開始するとしましょう。

しかし、アダムは彼らが見ていたショーを再開しようとしています。

したがって、誰かがステージングされたGroupActivityをアクティブにすると、最初からやり直すのではなく、特定の時間に再開されたショーに飛び込みたいと考えています。

「アダム」はショーに11分残っていることを知っていたが、ブライアンのデバイスはそうしなかったので、これは問題を提起した。

これは、ブライアンのデバイスがステージングされたGroupActivityをアクティブにした場合、ショーを最初からやり直す可能性があることを意味します。

それで、私たちはここで何ができますか?

それは本当にあなたのアプリと経験に依存します。

では、いくつかのアイデアを見てみましょう。

再生ケースについては、各デバイスがキャッチアップで他のデバイスに最初の再生状態を貢献させたいと考えています。

これは、アダムのデバイスが再生状態が23秒であることを知っていたので、彼がセッションに参加するとき、彼は他のすべてのデバイスに彼の意図した再生状態を伝え、彼らはそれを真実の源として使用することを意味します。

この同じ原則は、SharePlayを使用して作成したすべてのエクスペリエンスにも適用されます。

セッションに参加する各人は、セッションの理解を他の人に貢献する必要があります。

これは、セッションがピアツーピアで所有者がないためです。

では、それについてもう少し話しましょう。

オーナーレスセッションは把握するのが難しい概念ですが、適切なSharePlayエクスペリエンスを設計する際に重要です。

この場合、左側のアダムは、セッションをApple TVに引き継ぎたいと思っています。

その結果、彼の電話はGroupSessionをドロップし、彼のテレビが参加します。

しかし、所有権が実装されたらどうなりますか?

さて、オーナーが降ろしたので...

そして、これはテレビのためだけではないことを覚えておいてください。

iOS 16では、FaceTimeのハンドオフがあります。

だからアダムは先に進み、彼のiPadを手放し、まあ、同じことです。

ブーム、それだけではありません。

誰かがセッションをあるデバイスから別のデバイスに移動しようとするユーザーフローの例について話しましたが、考えるべき他のケースがあります。

さて、心配しないでください、もう1つの例で短くします。

この画面は少し見覚えがあるかもしれません。

それはFaceTime HUDです。

しかし、SharePlayボタンをクリックするとどうなりますか?

これで、SharePlayを終了するボタンが表示されました。これにより、SharePlayを終了できます。

これにより、すべての人のSharePlayを終了できます。基本的には、アプリケーションに代わってGroupSessionで.end（）を呼び出すシステムです。

これは、そのデバイスが所有者でない限り、.end()を呼び出しないようにどんなに慎重であっても、システムはあなたに代わってGroupSessionで.end()を呼び出すことができることを意味します。

したがって、把握するのが難しい概念かもしれませんが、アプリケーションに所有権の感覚がないことを確認することは、全体的にはるかに良い経験をもたらすことを意味します。

セッション全体を聴いたので、アプリ内からSharePlayを開始するための新しいAPIを採用し、アプリが信頼性の低いメッセージングを使用して新しい低レイテンシで通信する方法を探ります。

皆さんからの連絡が大好きですので、フィードバックアシスタントを使用してフィードバックを提出し続けてください。

あなたが私たちが行ったすべての変更を楽しんだことを願っていますし、あなたが構築したすべての素晴らしい経験を見るのを楽しみにしています。

まだしていない場合は、他のWWDCトーク「素晴らしいSharePlay体験を作る」をチェックしてください。

または、メディア再生に関する素晴らしい機能強化をお探しの場合は、「SharePlayで広告やその他のインタースティシャルを表示する」をチェックしてください。

ご不明な点がございましたら、GroupActivitiesラボとチャレンジをご覧ください。

いつものように、チューニングしてくれてありがとう、そして素晴らしいWWDCをお過ごしください。

あなたが何を作るかを見るのが待ちきれません。