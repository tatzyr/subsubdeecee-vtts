110359

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私の名前はアンダースです。

このビデオでは、Swiftパッケージプラグインを使い始める方法を紹介します。

SwiftパッケージはXcode 11で導入されました。

彼らは、ライブラリをソースコードとして配布する素晴らしい方法を提供します。

Xcode 14は、このアプローチを開発ワークフローに拡張し、プラグインを使用して、ビルド中にソースコードを生成したり、リリースタスクを自動化したりすることができます。

まず、パッケージプラグインとは何か、どのように機能するかを見てから、Xcode 14がサポートする2種類のパッケージプラグイン、コマンドプラグインとビルドツールプラグインについて詳しく説明します。

まず第一に、プラグインとは何ですか?

パッケージプラグインは、SwiftパッケージまたはXcodeプロジェクトでアクションを実行できるSwiftスクリプトです。

プラグインは、Xcodeが特にこの目的のために提供するAPIを使用します。

パッケージプラグインはSwiftパッケージとして実装されています。

パッケージは、ライブラリや実行可能ファイルと一緒にプラグインを提供するか、パッケージはプラグインの提供のみに集中できます。

パッケージプラグインは複数のソースファイルを使用して実装でき、Swiftパッケージは複数のプラグインを定義できます。

高度に専門化されたプラグインは、それを提供するパッケージに非公開にすることができ、その場合、そのパッケージ内でのみ利用可能です。

しかし、汎用プラグインは、パッケージ製品として定義することで、他のパッケージで利用できるようにすることができます。

これにより、他のパッケージも、パッケージが別のパッケージからライブラリを使用する方法と同様の方法で使用できます。

しかし、ライブラリとは異なり、プラグインへの依存はランタイムコンテンツをアプリに持ち込むことはありません。

代わりに、自分のマシンまたはビルドオートメーションで動作する開発ツールにアクセスできます。

では、パッケージプラグインは何ができますか?

さて、Xcode 14には、コマンドプラグインとビルドツールプラグインの2種類のパッケージプラグインがあります。

コマンドプラグインは、いつでも実行できるカスタムアクションを実装します。

ソースコードフォーマッタやリンターを実行したり、開発ワークフローの一部として他のタスクを実行したりできます。

これには、Gitの履歴に基づいてソースファイルの貢献者リストや著作権の日付を更新すること、または今日行うべき任意のスクリプトがあるかもしれない他のことが含まれます。

必要に応じて、コマンドプラグインはパッケージ内のファイルを変更する許可を求めることができます。

そして、それはコードの書式設定に特に便利です。

すべてのコマンドプラグインが書き込み許可を必要とするわけではありません。

一部のコマンドでは、変更を加えることなく、レポートを作成したり、コードに関するメトリクスを計算したりできます。

ビルドツールプラグインは、ビルドシステムの依存関係グラフを拡張します。

ビルドの一部としてソースコードやリソースを生成するのに特に便利です。

一度にパッケージ全体またはプロジェクトに対して呼び出されるコマンドプラグインとは異なり、ビルドツールプラグインは、それらを必要とする各ターゲットに適用されます。

Xcodeでコマンドプラグインを使用することを見てみましょう。 では、Xcodeでコマンドプラグインを使用することを見てみましょう。

これは、さまざまな種類の幾何学的形状を示す小さなiOSアプリです。

アプリプロジェクトとローカルパッケージで構成されています。

このパッケージは、アプリのコアデータ型とロジックを提供するライブラリを実装しています。

他の人が使用できるように、パッケージを独自のリポジトリに分割することを考えています。その一環として、このパッケージのコードをコミットしたすべての人をリストするコントリビューターファイルを作成したいと思います。

私はこれを行うためのカスタムスクリプトを書くことができます。

しかし、私はコードを扱うためのいくつかの便利なプラグインを提供するパッケージを知っています、そしてそれは私が望むことを正確に行うプラグインを持っていると思います。

これらのプラグインにアクセスするには、別のパッケージのライブラリが必要な場合と同じことをします。ローカルパッケージのマニフェストにパッケージの依存関係を追加します。

マニフェストを保存すると、Xcodeはリモートパッケージを取得し、パッケージの依存関係セクションに表示されます。

Xcodeは、コードをフォーマットするための一般的なツールであるSwiftFormatもフェッチしたことに気づきました。

これは、ユーティリティパッケージのコマンドプラグインの1つがSwiftFormatに依存しているためです。

この依存関係を追加したので、パッケージが提供するプラグインコマンドにアクセスできます。

コマンドを適用したいパッケージのコンテキストメニューを使用します。

現在、メニューには3つの新しいコマンドがあります。1つはSwiftFormatを使用してソースコードを再フォーマットするためのもので、他の2つは特別なアクションを提供します。

そのうちの1つは、Gitのコミット履歴に基づいてコントリビューターリストを生成または更新し、もう1つはソースファイルの著作権の日付を更新します。

真ん中のコマンドは、まさに私が望むことをします。

パッケージでプラグインコマンドを呼び出すと、Xcodeでは、プラグインに渡すターゲットを選択できます。

この場合、パッケージ全体でそれを呼び出します。

そして、プラグインがカスタム引数を取る場合、私はここでもそれらを渡すことができます。

実行をクリックすると、プラグインがファイルシステムを変更するので、Xcodeはそれについて警告します。

プラグインの作者が私のコードを変更したい理由を見ることができますが、プラグインの実装も覗いてみたい。

だから私はCommandを表示を選択し、Xcodeは私をコードに連れて行きます。

このプラグインがやっていることは安全なので、もう一度コマンドを呼び出して、今回はRunを選択します。

このプラグインの選択を覚えておくようにXcodeに伝えます。

この特定のプラグインは、Git履歴を使用して、コントリビューターの名前を示すファイルリストを生成しますが、コマンドプラグインができることには多くの柔軟性があります。

Xcodeでコマンドプラグインを使用したので、プラグインが内部でどのように機能するかを詳しく見てみましょう。

パッケージプラグインは、必要なときにコンパイルされ、実行されるSwiftスクリプトです。

各プラグインは別々のプロセスとして実行されます。

プラグインは、ソースファイルを含む入力パッケージの蒸留表現にアクセスできます。

プラグインは、パッケージの依存関係に関する情報も取得します。

多くのプラグインは、作業の一環としてコマンドラインツールを呼び出します。

プラグインは、ファイルやディレクトリを作成したり、Foundationなどの標準ライブラリを使用して他のアクションを実行したりすることもできます。

プラグインは、ネットワークアクセスを防止し、ビルド出力ディレクトリなど、ファイルシステム内のいくつかの場所にしか書き込むことができないサンドボックスで実行されます。

しかし、コマンドプラグインは、パッケージソースディレクトリ内のファイルも変更する許可を求めることができます。

ユーザーが承認した場合、サンドボックスはそれらの場所への書き込みを許可するように設定されています。

プラグインは結果をXcodeに送り返すこともできます。

警告やエラーを発する可能性があり、ビルドツールプラグインは、ビルド中にXcodeが実行するためのツール呼び出しを定義できます。

すべてのパッケージプラグインは、Xcodeが提供するPackagePluginモジュールのAPIを使用します。

このAPIを使用すると、プラグインは入力パッケージにアクセスし、必要に応じて結果をXcodeに返すことができます。

プラグインを実装するメインソースファイルは、メインエントリポイントも定義します。

これは、プラグインのタイプに一致するプロトコルに準拠したクラスまたは構造体である必要があります。

Xcodeが呼び出す特定のエントリポイント関数は、それがどのようなプラグインであるかによって異なります。

PackagePlugin APIの詳細については、「Swiftパッケージプラグインの作成」ビデオをご覧ください。

以前は、コマンドプラグインを使用してパッケージに変更を加えました。

コマンドプラグインの詳細をもう少し見てみましょう。 いくつか見てみましょう。

コマンドプラグインは開発ワークフローを拡張します。

それらはビルド中ではなく、パッケージに直接適用されます。

すべてのコマンドプラグインがファイルシステムを変更するわけではありません。ファイルの変更を伴わない便利なアクションがあります。

しかし、コマンドがファイルシステムに書き込む場合は、プラグインを実装するパッケージのマニフェストでそれを宣言する必要があります。

これにより、Xcodeはプラグインを実行する前にユーザーに許可を求めます。

プラグインは通常非常に小さく、実際の作業を行うために他のツールに依存することがよくあります。

以前、プラグインの1つがすべての実際の作業にSwiftFormatを使用していることがわかりました。

ツールパッケージへの依存関係は、バイナリまたはソースコードのいずれかです。Xcodeは、コマンドが呼び出される前に、必要なツールをソースから構築します。

プラグインは、依存しているツールとは異なるパッケージで提供できることに注意してください。

コマンドプラグインの実装では、メインタイプはCommandPluginプロトコルに準拠し、プラグインはperformCommandエントリポイントを実装します。

このエントリポイントは、ユーザーから提供されたコンテキストとカスタム引数を取ります。

コマンドプラグインを呼び出す別の方法を見てみましょう。

以前と同じプロジェクトを使用する予定ですが、先ほどSourceCodeUtilitiesパッケージへの依存関係を追加したため、ターミナルで同じプラグインを呼び出すことができます。

まず、コマンドプラグインを適用したいパッケージなので、ディレクトリをCoreLibsパッケージに変更します。

Swift Package Manager 5.6には、プラグイン用の新しいサブコマンドがあります。

「Swift package plugin --List」と入力して、利用可能なプラグインを確認します。

これは、Xcodeのメニューと同じプラグインを示しています。

このコマンドラインでは、各コマンドには、実行に使用する動詞も表示されます。

Xcodeで行ったように、貢献者リストを再生成するために動詞を使用します。

このプラグインは、ファイルを作成するため、ファイルシステムに書き込む許可が必要です。

これを許可するために「はい」と入力すると、プラグインはコントリビューターリストを実行して更新できます。

また、プラグインが尋ねることなくファイルシステムに書き込むことを可能にするパッケージマネージャオプションを使用することもできます。

これは、CIシステムやその他のビルドオートメーションから呼び出す場合に特に便利です。

しかし、そのオプションを使用する前に、プラグインが何をしているのかを必ず知ってください。

Xcodeと同様に、コマンドラインの引数をプラグインに渡すことができます。

プラグインのアクション動詞の後の引数は、プラグインに渡されます。

この場合、実行中のプラグインからのより多くの出力を見るために冗長なフラグを渡します。

各コマンドプラグインは、サポートする引数を定義します。

今まで、私たちは主にコマンドプラグインについて話してきました。

しかし、ビルドツールプラグインについて言いたいことがいくつかあります。

コマンドプラグインとは異なり、ビルドツールプラグインはすぐには機能しません。

代わりに、パッケージがビルドされたときにXcodeが後で実行するためのビルドツールの呼び出しを作成して返します。

これらのツールの呼び出しのそれぞれには、実行するコマンドラインがあり、いつ実行するかをXcodeに指示する入力と出力もあります。

ビルドツールプラグインは、ビルド中またはビルド前に実行されるコマンドを定義できます。

すぐに違いを見てみましょう。 では、その違いを見てみましょう

ビルドツールプラグインによって返されるコマンドは、通常、出力をビルドディレクトリに書き込むように構成されているため、増分ビルド間で持続します。

また、プラグイン自体と同様に、ビルドツールプラグインによって定義されたコマンドは、ネットワークアクセスやパッケージへの変更を防ぐサンドボックスで実行されます。

ビルドツールプラグインの実装では、メインタイプはBuildToolPluginプロトコルに準拠し、プラグインはcreateBuildCommandsエントリポイントを実装します。

このエントリポイントは、ビルドコマンドを作成するためのコンテキストとターゲットを取ります。

パッケージがビルドされたときに実行するカスタムビルドコマンドを返します。

ビルドツールプラグインが返すことができる基本的なビルドコマンドには2種類あります。

通常のビルドコマンドは、入力パスと出力パスを指定し、出力が欠落しているとき、または入力が変更された場合にのみ実行されます。

プリビルドコマンドは、ビルドが開始される前に実行され、出力の名前が事前に不明な場合に使用できます。

プリビルドコマンドは、すべてのビルドの前に実行されるため、変更がないときはできるだけ作業を少なくする必要があります。

ビルドコマンドとプリビルドコマンドは、ソースコードやリソースを生成するのに最適です。

では、Xcodeはどのビルドツールプラグインをパッケージターゲットに適用するかをどのように知っていますか?

SwiftPM 5.6以降では、ターゲットが望むビルドツールプラグインをリストするパッケージマニフェストに新しいプラグインパラメータがあります。

このパラメータは、ターゲットが必要とするビルドツールプラグインを指定し、それが依存するランタイムライブラリと同様に、それらのプラグインは同じパッケージまたは別のパッケージのいずれかにすることができます。

Xcodeに戻りましょう。 

ビルドツールプラグインを使用するようにジオメトリアプリを設定します。

この特定のケースでは、コアライブラリターゲットのいくつかのデータファイルに基づいてSwiftコードを生成するカスタムコマンドラインツールがあります。

具体的な詳細は重要ではありませんが、私が最終的にしたいのは、各データに対して生成されたタイプセーフなSwiftアクセサです。

データファイルに加えて、カスタムツールを使用して、リポジトリにチェックインしたソースコードを生成しています。

私はこのツールを手動で実行して、Swiftラッパーコードを再生成し、データファイルが変更されるたびに変更をコミットしています。

しかし、ビルドツールプラグインで、私はもっとうまくやることができます。

ビルド中にコードを生成し、生成されたコードをリポジトリに保存する必要がなくなります。

プラグインにアクセスするには、パッケージマニフェストに移動し、使用したいソースジェネレータプラグインを提供するパッケージへの依存関係を追加します。

私のパッケージのターゲットは、そのパッケージで定義されたビルドツールプラグインにアクセスできるようになりました。

次に、プラグインを使用する必要があるターゲットに移動し、その定義にプラグインパラメータを追加します。

これは、そのパッケージから特定のビルドツールを私のターゲットに適用したいことをXcodeに伝えます。

これで、生成されたソースファイルをリポジトリから削除できます。

ビルド中に必要に応じて作成または更新されます。

そこで、それははるかにきれいです。

そして今、アプリを構築して実行すると、ビルドツールプラグインは、データファイルが変更されるたびにコード生成ツールを呼び出すようにXcodeに指示します。

生成されたコードは、他のビルドファイルと一緒にビルドフォルダに保存され、リポジトリを清潔に保ちます。

このビデオでは、Swiftパッケージプラグインとは何か、どのように機能するかについて話しました。

コマンドプラグインとビルドツールプラグインの類似点と相違点について話し合いました。

どちらのタイプのプラグインでも、さまざまなランダムなスクリプトを、パッケージ内のより構造化された種類の拡張性に置き換えることができます。

ビルドツールプラグインを使用すると、ビルドシステムを拡張してソースとリソースを生成したり、ビルドの一部として他のカスタム作業を実行したりできます。

コマンドプラグインを使用すると、カスタムアクションで一般的な開発タスクを自動化できます。

それらは特定のワークフローに合わせて調整されているかもしれないし、さまざまなケースに役立つように書かれているかもしれない。

独自のパッケージプラグインを作成する方法を学ぶには、「Swiftパッケージプラグインの作成」ビデオを必ずチェックしてください。

WWDC 2022の残りの部分を見て楽しんでくれてありがとう。

♪