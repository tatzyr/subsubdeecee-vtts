10147

♪ ♪

ジェイク：こんにちは、私の名前はジェイクです。

私はAVKitチームのエンジニアであり、素晴らしいビデオ再生体験の作成を歓迎します。

iOSとiPadOS 16では、まったく新しいルックアンドフィールをもたらす完全に新しいメディアプレーヤーをゼロから構築し、コンテンツに焦点を当て、より広い範囲のアプリに収まるように設計されています。

また、この新しいメディアプレーヤーの使用をさらに直感的でシームレスに感じさせる多くの斬新なインタラクションモデルを組み込んでおり、あなたはそれを気に入ると思います。

このセッションでは、新しいシステムメディアプレーヤーを深く掘り下げます。

素晴らしい再生体験をデザインする方法を学びます。

macOSとiOSにいくつかのエキサイティングな新しいビジュアルインテリジェンス機能が登場します。

新しいメディアプレーヤーに付属するまったく新しいインタースティシャル体験を紹介し、tvOSから持ち込む新しいAPIをいくつか紹介します。

そして最後に、AVKitの新機能、選択可能な再生速度についていきます。

tvOS 15.0では、システムプレーヤーを再設計し、まったく新しいルックアンドフィール、およびシステムプレーヤーに多くの新機能と使いやすさの改善をもたらしました。

さて、私たちはあなたの要求を聞きました。

嬉しいことに、iOSシステムプレーヤーも刷新しました。

ネイティブメディアプレーヤーを完全に再設計し、tvOSプレーヤーのルックアンドフィールを採用しましたが、タッチファーストデバイス用に再考しました。

私たちはクロムを全面的に削除し、インターフェースがより広い範囲のアプリ内でネイティブに感じられるようにし、プレイヤーにより現代的な感触をもたらしました。

私たちが行った変更のいくつかを深く掘り下げてみましょう。

まず、プレイ/一時停止とスキップコントロールを前面と中央に持ち込み、対話をさらに簡単にしました。

また、スキップ間隔を15秒から10秒に調整し、連続したスキップでどれだけ遠くまでジャンプしたかを簡単に追跡できるようにしました。

次に、タイムラインの使いやすさも大幅に改善しました。

タイムラインの現在の位置を示すスライダーノブを取り外します。

代わりに、タイムラインはスライダーに沿ってどこからでも対話できるようになりました。

ドラッグは、現在のタイムマーカーで開始する必要がなくなりました。

これにより、行きたい場所を正確に見つけやすくなります。

また、ビデオアスペクトコントロールを、ズームジェスチャーへのより直感的なピンチに置き換えました。すぐにお見せします。

そしてもちろん、新しいUIはポートレートコンテンツにも最適です。

iPadOSでは、プレーヤーはキーボード、トラックパッド、マウス、ゲームコントローラーなどを完全にサポートし、システムにシームレスに統合されます!

また、コンテンツやいくつかの一般的なインタラクションをさらに簡単かつ直感的にナビゲートするコントロールと対話する新しい方法もいくつか追加しました。

これらを見てみましょう。 

まず、ビデオの塗りつぶしの側面を変更する新しい方法を追加しました。

ピンチジェスチャーを使用して、利用可能なズームレベルを移動できるようになりました。

つまむと、ディスプレイの安全なエリア内にビデオがもたらされます。

ピンチアウトすると、ビデオがズームインされ、ディスプレイが完全にいっぱいになります。

次に、最も一般的なインタラクションの1つである再生/一時停止をストリーミングします。

コントロールが非表示になっていても、ディスプレイの中央をタップしてビデオを再生および一時停止できるようになりました。

そして最後に、メディアのタイムラインをナビゲートする新しい方法を追加しました。

スクロールビューで私たち全員が知っていて愛しているのと同じインタラクションを使用して、ビデオのどこからでもタイムラインをスクロールできるようになりました。

ビデオフレームをスクロールし始めると、インターフェイスが削除され、最も関連性の高いUIのみが残り、コンテンツに焦点が置かれます。

また、tvOSプレーヤーからいくつかの新機能をもたらしました。

AVPlayerViewControllerは、フルスクリーンUI内からコンテンツタイトル、サブタイトル、および説明をネイティブに表示することをサポートするようになりました。

AVMetadataItemsを既存のAVKit APIに渡すことで、これらのそれぞれに文字列を提供できます。

これがどのように行われるか見てみましょう。

デフォルトでは、タイトル、サブタイトル、およびコンテンツの説明は、メディアのメタデータから引き出されます。

ただし、必要に応じて、AVPlayerItemのexternalMetadata APIを使用して、メディア内の値をオーバーライドできます。

タイトルは、識別子commonIdentifierTitleを使用してAVMetadataItemを作成し、playerItems externalMetadataプロパティに追加することで追加できます。

タイトルは、UIの乱雑さを避けるために、短くて説明的であるべきです。

同様に、ここでは、識別子.iTunesMetadataTrackSubtitleを持つAVMetadataItemを作成して、サブタイトルを追加しました。

サブタイトルはコンテンツタイトルの上に表示され、コンテンツを説明するいくつかの単語でなければなりません。

最後に、識別子.commonIdentifierDescriptionで説明を追加できます。

これにより、タイトルとサブタイトルの右側にシェブロンが表示されます。

タイトルを選択すると、コンテンツの説明を含む情報パネルが表示されます。

説明は、コンテンツに関する詳細情報を含むいくつかの文章でなければなりません。

どこでもタップすると、情報パネルが閉じます。

最後に、新しい合理化されたタッチファーストインタラクションモデルと他の多くの改善により、まったく新しいルックアンドフィールでiOSシステムプレーヤーを刷新しました。

アプリでAVPlayerViewControllerを使用すると、システムプレーヤーを完全にサポートできます。ピクチャーインピクチャー、SharePlay、ビジュアル分析、ネイティブカタリストサポート、新しいハードウェアと機能のサポートなどをサポートします。

そしてもちろん、これらすべてをわずか数行のコードで入手できます。

では、アプリで素晴らしい再生体験をデザインする方法について話しましょう。

システムメディアプレーヤーの再設計に着手したとき、私たちは過去に構築したものや、他のプラットフォーム用に構築したものから一歩後退し、「何が良いユーザーエクスペリエンスになるのか」と自問しました。

私たちはこのプロセスをあなたと共有したいと思いました。新しいプレーヤーをどのように設計したか、なぜ私たちが行った方法でそれらを設計したのか、そして私たちが考えることは素晴らしいメディア体験を定義します。

私たちは、メディア体験を素晴らしいものにするものが3つあると思います。

経験は直感的であるべきです。

使ったことがなくても、簡単で、親しみやすく、自然に感じるはずです。

アプリ内とシステムの両方で緊密に統合する必要があります。

そして最後に、それはコンテンツフォワードであるべきです。

結局のところ、人々はメディアを体験するためにそこにいて、あなたのアプリやデザインはそれを反映する必要があります。

さて、あなたの経験を直感的にすることから始めて、これら3つを深く掘り下げてみましょう。

多くの場合、アプリが直感的に感じると、その理由を指差すのが難しい場合があります。

あなたはそれを見たときにそれを知っているだけです。

では、実際にインターフェイスや体験を直感的に感じさせるものは何ですか?

そして、あなたはそれのためにどのように設計することができますか?

私たちはそれが親しみやすさから始まると思います。

過去の経験を活かして、何か新しいことを理解できるとき、それは直感的です。

それがどのように機能するかの説明を必要としない場合や、それがどのように機能するかについて考える必要がある場合、それは期待どおりに機能します。

私たち一人一人が、テクノロジーと現実世界と日々交流する経験を構築しています。

これらは両方とも経験的な親しみやすさの大きな源であり、多くの場合、新しいシステムメディアプレーヤーを設計する際に始めた場所です。

直感を引き出す経験には多くの種類がありますが、私は2つに焦点を当てたいと思います。システムメディアプレーヤーを設計する際に最も頻繁に頼りにしていた2つです。

プラットフォームのパラダイムと現実世界。

1つ目は、毎日テクノロジーを使用した経験から来ています。

テレビのリモコンを何年も使っていると、矢印キーが左右にフォーカスを移動することがわかります。

同様に、タッチファーストデバイスの音量ボタンをタップすると、オーディオがミュートされます。

これらの相互作用は、馴染みがあるので直感的に感じます。

メディアエクスペリエンスでこれらのタイプの使い慣れたインタラクションを使用して、アプリをより直感的で魅力的で、さらには自然に使用できるようにすることができます。

逆に、なじみのない、または予期せぬ相互作用を見つけることは混乱し、時にはイライラすることさえあります。

システムプレーヤーでこのタイプのプラットフォームの親しみやすさを引き出した例をいくつか見てみましょう。

これの素晴らしい例は、iOSシステムプレーヤーのプレゼンテーションと解雇モデルです。

プレイヤーは下からプレゼンテーションをアニメーション化し、プレイヤーを押し戻すことで却下できる微妙なヒットを与えます。

このモデルは、タッチファーストデバイスで広く使用されています。

たとえば、ミュージックで現在再生中のUIは、下部のミニバーから表示され、インタラクティブなスワイプで下に却下することができます。

しかし、場合によっては、テクノロジーの理解からではなく、日常生活から経験を引き出すかもしれません。

これらのタイプの経験は現実世界から来ています。

何百万年もの進化は、私たちが自然のプロセスに対する深い本能的な理解を深めるのに役立ちました。

この理解を活用して、ソフトウェアで身近で直感的な体験を構築することができます。

これの素晴らしい例は、iOSプレーヤーの新しいスクロールジェスチャーです。

テーブルを横切っておもちゃの車を転がすのと同様に、ビデオをスワイプするたびに勢いがあり、タイムラインがゆっくりと停止するまで、直接的な相互作用を過ぎてタイムラインの動きを続けます。

ここでの勢いだけで、現実世界の動く物体との関連性が構築されます。

この関連付けは、相互作用の微妙な深さを発見するのに役立ちます。

おもちゃの車と同じように、もっと強く押したり、数回連続して押したりすることで、より速くすることができます。

そして、私がそれをつかむと、それは止まります。

それは自然だから自然に感じます。

そして、これについての最良の部分は、システムプレーヤーを使用すると、アプリが直感的に感じられることです。

私たちが構築し、人々がシステムプレーヤーに持っている直感と習熟度を継承したすべての自然な相互作用、tvOS、iOS、およびmacOSユーザーがネイティブに理解する方法で最適化されたすべてのデザインパラダイム - これらはすべて、わずか数行のコードで得られます。

直感的なデザインを構築することは、メディア体験を素晴らしいものにするための1つの側面ですが、人々が期待するすべての機能と統合ポイントがなければ、アプリは誤ってコンテンツから焦点を引き離す可能性があります。

これは、素晴らしいメディア体験の2番目の重要な側面である緊密な統合につながります。

エクスペリエンスが緊密に統合されている場合、人々が期待するすべての機能、機能、およびデバイスは機能するだけです。

そして重要なことに、彼らは彼らの期待と一致する方法で働きます。

人々が自分のデバイスを使用するにつれて、彼らはプラットフォームの機能に頼ることに慣れます。

たとえば、コントロールセンターをプルダウンして、コンテンツが「再生中」コントロールに入力されているのを見たり、テレビ番組を見ながら通知に応答したりして、ビデオをピクチャ・イン・ピクチャにスムーズに継続したりします。

この緊密なシステム統合をアプリに組み込むことは、体験をシームレスに感じさせるための鍵です。

あなたのアプリはシステムのネイティブ部分のように感じるべきであり、私たちはそれを可能にするために必要なツールを提供するために懸命に働きます。

これには、コンテンツを検索可能にするためのCoreSpotlight統合、コンテンツがシステムメディアUIに表示されるように情報を再生中、アプリがキーボードやテレビのリモコンで再生ボタンが押されているものに応答できるようにするMediaRemoteコマンドなどが含まれます。

メディアをテレビアプリに直接統合し、さらに幅広い視聴者にコンテンツを配信する機能も提供します。

アプリをネイティブに感じさせることに加えて、人々が愛するすべての機能を提供することが重要です。

AirPlay、SharePlay、ピクチャ・イン・ピクチャなどの機能。

私たちは、人々がこれらの機能を期待し、それらを提供することは、あなたのアプリを使用する際の経験を向上させると思います。

人々は多くのデバイスとさらに多くの入力フォーマットであなたのアプリを使用します。

これらすべてにサポートを提供することは、あなたの経験が誰もがアクセスできるようにする上で非常に重要です。

これはtvOSで特に重要であり、利用可能なすべてのリモートをサポートすることは、誰もがあなたのアプリを使用できるようにするために不可欠です。

これは、tvOSでシステムメディアプレーヤーを使用することを常に推奨する理由の1つです。

アプリは、すべてのテレビリモコン、キーボード、トラックパッド、ゲームコントローラー、ヘッドフォンコントロールで流動的な体験を保証する必要があります。

さらに、ディスプレイの丸みを帯びた角やノッチとの衝突を避けるために、アプリのUI要素が画面の安全な領域内に描画されていることを確認する必要があります。

私たちは、これらすべての統合ポイント、機能、およびハードウェア構成のサポートを構築することが困難であることを認識しています。

これが私たちがAVPlayerViewControllerを構築した理由なので、ほんの数行のコードで、あなたのアプリを使用している人は誰でも素晴らしいメディア体験を持つことができます。

そして、これらすべてが、最後に、メディア体験を設計する上で最も重要な側面に私たちを導きます。コンテンツを前進させます。

これはあなたのデザインの主な目標であるべきであり、私たちが素晴らしいメディア体験の決定的な側面を考慮しているものです。

あなたのアプリが直感的に感じるとき、すべての統合ポイントと人々が期待するすべての機能がただ機能するとき、あなたはあなたのコンテンツに焦点を合わせ、他のすべてがバックグラウンドにフェードします。

ただし、コンテンツを設計する際に留意すべきことがいくつかあります。

インターフェイスとシステムの両方で、適切なメタデータをすべて提供してください。

この情報を提供することは、メディアにコンテキストを与えるのに役立ち、システムがコントロールセンターとロック画面でより良い体験を提供できるようにします。

これには、タイトルとサブタイトル、説明、サムネイル、シーズンとエピソードの情報、またはライブストリームの開始日と終了日などが含まれます。

メディアは常に元のアスペクト比にしてください。

これにより、システムはビデオを画面上の正しい位置に配置できます。

あなたのコンテンツをレターボクシングは、このような経験につながる可能性があります。

可能な限り、最新のメディア標準のサポートを含めるようにしてください。

例えば、HDRやドルビーアトモス。

そして最後に、できるだけ多くの人がメディアにアクセスできるように、複数の言語のオーディオトラックと字幕トラックを含めるようにしてください。

講演のこのセクションから取り除くべきことが1つあるとすれば、コンテンツに集中する必要があるということです。

私たちは、開発者としてその目標をできるだけ簡単にするために、AVPlayerViewControllerを通じて提供されるシステムメディアプレーヤーを構築しました。

それでは、新しいビジュアルインテリジェンス機能から始めて、AVPlayerViewControllerに追加したいくつかの新機能について見ましょう。

この例では、コードスニペットが入ったフレームでビデオが一時停止しています。

コードスニペットを長押しすると選択されます。

その後、それをコピーして遊び場に直接貼り付けて試すことができます。

これはmacOSでもうまく機能します。

同じコードにカーソルを合わせると、テキストが選択可能であることを示すIビームが表示されます。

その後、カーソルを使用して強調表示するか、CMD + Aを使用してすべてを選択できます。

この機能に合わせて新しいAPIを導入しています。

iOSのAVPlayerViewControllerとmacOSのAVPlayerViewで利用可能なallowsVideoFrameAnalysisはこの機能を切り替えます。

これは、新しいSDKにリンクするすべてのアプリに対して有効になります。

allowsVideoFrameAnalysisはtrueに設定され、メディアが一時停止されると、AVKitは設定された期間後に現在のビデオフレームの分析を開始します。

パフォーマンス上の理由から、またはFairPlayで保護されたコンテンツについては、スクロール中にフレームを分析しないことに注意してください。

一般的に、人々はほとんどの状況でこの機能を期待すると思います。

ただし、アプリケーションで適切なビジュアル分析を無効にしたい場合があります。

たとえば、ビデオのコレクションビューなどのパフォーマンスクリティカルなアプリケーションや、スプラッシュスクリーンなどのビデオとの相互作用が期待されない場合などです。

ビジュアルインテリジェンス機能セットをアプリに統合する方法の詳細については、VisionKitに関する関連講演を参照してください。

次に、インタースティシャルに対して行ったいくつかの改善点を見てみましょう。

これまで、インタースティシャルはtvOSのAVPlayerViewControllerでのみサポートされていました。

さて、iOSにも同じレベルのサポートをもたらすことを発表できることを嬉しく思います。

ストリーム内またはAVPlayerInterstitialEventsを通じてローカルで定義されたインタースティシャルは、タイムラインに沿ってマークされるようになりました。

タイムラインがマーカーに当たると、インタースティシャルの再生を開始します。

インタースティシャルがHLSプレイリスト内ですでに完全に定義されている場合は、この動作が自動的に表示されます。採用は必要ありません。

そうでない場合、またはアプリにさらにカスタム動作が必要な場合は、新しいAPIも導入しています。

AVInterstitialTimeRangeはtvOSからiOSに持ち込まれています。

これらは、tvOSからも持ち込まれているAVPlayerItemプロパティ、interstitialTimeRangesに自動的に入力されます。

HLSストリームを使用すると、ストリーム内のインタースティシャルごとにAVInterstitialTimeRangeが合成されます。

AVFoundation APIを介してインタースティシャルイベントをローカルで作成する場合、AVPlayerInterstitialEventごとにAVInterstitialTimeRangeが合成されます。

ただし、tvOSとは異なり、interstitialTimeRangesは読み取り専用プロパティです。

インタースティシャルは、HLSストリーム内またはAVPlayerInterstitialEventsを通じて定義する必要があります。

tvOSアプリからサポートを移行する人にとって、これは本質的にtranslatesPlayerInterstitialEventsをyesに設定することと同等です。

また、tvOSから2つの委任方法も導入しています。

これらは、インタースティシャルがいつ再生を開始したか終了したかを知るために使用できます。

これらをAPIに使用して、iOSのプレロール広告のスキップボタンを追加する方法を見てみましょう。

まず、プライマリメディアのプレーヤー用のAVPlayerInterstitialEventControllerを作成します。

次に、インタースティシャルイベントを作成します。

私たちはそれに対していくつかの制限を定義します。

これらの制限は、インタースティシャル内での検索を防ぎ、インタースティシャルをスキップするのを防ぎます。

次に、イベントコントローラーにインタースティシャルを追加します。

そして最後に、新しいwillPresentInterstitialデリゲートコールバックを実装して、設定された間隔の後に広告スキップボタンを表示することができます。

そして、ボタンが押されたら、インタースティシャルをキャンセルします。

それはとても簡単です。

この広告スキップボタンなど、AVPlayerViewControllerにカスタムUI要素を追加するときは、常にcontentOverlayViewのサブビューとして追加するようにしてください。

インタースティシャルをHLSプレイリストに直接統合する方法、またはAVFoundationインタースティシャルAPIを使用する方法の詳細については、HLSダイナミックプレロールとミッドロールの探索に関する関連講演をご覧ください。

次に、今年すべてのプラットフォームで追加した新機能について説明します。再生速度制御のネイティブサポートです。

AVPlayerViewとAVPlayerViewControllerの両方が、追加した新しいAPIを使用して、オプションで再生速度メニューを表示できるようになりました。

私たちはこれをmacOS、iOS、tvOSで利用できるようにしています。

これがどのように見えるか見てみましょう。 

tvOSでは、トランスポートバーに新しいコントロールが表示されます。

コントロールを選択すると、選択可能な再生速度のリストが表示されます。

iOSでは、このメニューはトランスポートコントロールのオーバーフローメニューに表示されます。

同様に、macOSでは、コントロールがオーバーフローメニューに表示されます。

新しいiOS、macOS、tvOS SDKにリンクするすべてのアプリは、追加の変更を必要とせず、この機能を自動的に取得します。

ただし、ユースケースによっては、一部のアプリケーションでは、速度のリストを変更したり、プログラムで速度を選択したり、メニューを完全に無効にしたりしたい場合があります。

これらのユースケースに対応するために、AVPlayerViewとAVPlayerViewControllerにいくつかの新しいAPIを追加しました。

これらを見てみましょう。 

まず、AVKitに新しいクラスを追加しました - AVPlaybackSpeed。

AVPlaybackSpeedsは、再生UIでユーザーが選択可能な速度オプションを表し、3つのプロパティがあります。

初期化時に定義されたレート値で、再生速度が選択されたときにプレーヤーに設定されます。

アクセシビリティシステム内の再生速度を表すために使用されるローカライズされた名前 たとえば、2.5の速度は、「2.5倍の速度」のローカライズされた名前を使用する場合があります。

そして、ローカライズされた数字の名前。

この値はレートプロパティから合成され、再生速度メニューに表示される文字列になります。アプリにプレーヤーの外部にカスタム再生速度メニューが必要な場合は、この文字列を使用して速度を表します。

最後に、AVPlaybackSpeedは、可能な限り使用すべきシステムのデフォルト速度のリストを定義します。

AVPlaybackSpeedをAVPlayerViewとAVPlayerViewControllerの新しいAPIと組み合わせて使用して、この機能をアプリ内に合わせて調整できます。

Speedsプロパティを使用すると、再生速度のカスタムリストを定義できます。

デフォルトでは、このプロパティはAVPlaybackSpeed systemDefaultSpeedsリストに設定されます。

これを空のリストに設定すると、メニューが非表示になります。

選択した速度プロパティは、現在アクティブな速度を返します。

そして最後に、selectSpeed機能を使用すると、現在の速度をプログラムで選択できます。

この機能は、プレーヤーUI外の速度の明示的な選択に応じてのみ使用する必要があることに注意してください。

選択した再生速度を暗黙的に上書きしないでください。

例を見てみましょう。 例を見てみましょう。

ここでは、AVPlayerViewControllerを作成し、それを提示しています。

デフォルトでは、これはシステムが提供する再生速度のリストを使用します。

AVPlaybackSpeedを作成し、AVPlayerViewControllerの速度リストに追加することで、メニューに新しい速度を追加できます。

空の速度リストを設定することで、メニューを無効にすることもできます。

それはそれと同じくらい簡単です。

ただし、再生を開始するには、常にAVPlayer play()を呼び出す必要があります。

選択したレートが1.0ではない可能性があるため、setRate:1.0を呼び出して再生を開始しないでください。

それで、セッションを締めくくりたいと思います。

私たちは新しく再設計されたiOSシステムプレーヤーを見ました。

私たちは、あなたがあなた自身の素晴らしい再生体験をデザインする方法を聞きました。

私たちはいくつかのクールな新しいビジュアルインテリジェンス機能を見て、新しいインタースティシャルと再生速度APIを調べました。

私はあなたがセッションを楽しんだことを願っていますし、あなたのアプリでこれらの機能を見るのを楽しみにしています。

会議の残りを楽しんでください。