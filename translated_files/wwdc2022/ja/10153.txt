10153

タイラー：こんにちは、私の名前はタイラーで、WebKitアクセシビリティチームのエンジニアです。

今日のセッションでは、スクリーンリーダーのような支援技術の簡単な概要から始めて、現代のウェブアクセシビリティのツアーを行います。

次に、Web Speech APIとダイアログ要素で、カスタムコントロール、音声合成マークアップ言語、SSMLなどのツールを使用して、リッチでアクセスしやすいWebアプリを構築する方法について説明します。

では、支援技術について話すことから始めましょう。

世界中の約7人に1人が、世界、デバイス、ウェブとの関わり方に影響を与える障害を持っています。

人々は、あらゆる年齢、あらゆる期間、さまざまなレベルの重症度で障害を経験することができます。

Appleは、ユーザーが自分に最適な方法でデバイスと対話できるように、さまざまなツールを構築しています。

これらのツールには、VoiceOver、スイッチコントロール、音声コントロール、フルキーボードアクセスなどがあり、これらはすべてデバイスの代替手段を提供します。

これらのツールやその他のツールの詳細については、「iOSアプリでフルキーボードアクセスをサポートする」というタイトルの昨年のセッションをチェックしてください。

これが実際のウェブページでどのようなものかを感じるために、VoiceOverを使用してサンプルクイズ評価Webサイトをナビゲートしましょう。

iPadでは、トップボタンを3回押してVoiceOverを有効にします。

Siri: ボイスオーバーをオンにします。サファリ、サイドバーを表示、ボタン。

タイラー：そして今、VoiceOverがアクティブになっているので、ページの見出しをタップして焦点を合わせます...

Siri:ポップクイズ、ヘディングレベル1。

タイラー：右にスワイプして、このページの要素を移動します。

Siri：6つのうちの1つ：合計8つのスライスを含むピザの1/4には何枚のスライスがありますか？

2つのスライス、ラジオボタン、チェックなし、4つのうちの1つ、3つのスライス - 4つのスライス - 6つのスライス - 次の質問ボタン。

タイラー：ウェブ開発者として、VoiceOverのようなテクノロジーのユーザーがページにアクセスできるようにするための多くのツールを自由に利用できます。

たとえば、Safariには、ボタン、h1からh6、テーブル要素、リスト要素などのセマンティックHTML要素のアクセシビリティサポートが組み込まれています。

これらのセマンティックHTML要素を使用することは、すべてのブラウザでユーザーに一貫性のあるアクセス可能なエクスペリエンスを保証するため、デフォルトである必要があります。

ただし、セマンティックHTMLによって完全に満たされる必要がなく、JavaScriptでカスタムコンポーネントを作成する必要がある場合があります。

このような場合は、セマンティクスが支援技術に適切に伝えられるように、コンポーネントをARIA属性で補完する必要があります。

これは、今日の2番目のトピックであるカスタムコントロールに私たちをもたらします。

ピザクイズの質問をもっと魅力的にしたかったとしましょう。

私たちができることの1つは、ラジオボタンを、ユーザーがタップでピザトレイからスライスを追加および削除できるカスタムコントロールに置き換えることです。

このカスタム コントロールのマークアップは、div と ID で始まる場合があります。

タップまたはクリックで対話するユーザーがこのコンポーネントを操作可能にするには、クリックイベントリスナーを追加する必要があります。

要素のIDを受け入れるコンストラクタを使用して、新しいPizzaControlクラスを作成しましょう。

その要素をIDで取得し、クリックイベントリスナーを追加します。

このリスナーは、タップされた位置に基づいて新しいスライス数を計算し、その値をupdateという関数に渡してコントロールを再レンダリングします。

これは一部のユーザーにとって素晴らしいことですが、すべてではありません。

たとえば、視覚障害のあるユーザー、クリックまたはタップする場所がわからないユーザーはどうですか?

カスタムコンポーネントを構築する際には、すべてのタイプの支援技術のユーザーがコンポーネントとどのように相互作用するかを常に考慮する必要があります。

それを念頭に置いて、コンポーネントをアクセシブルにするための最初のステップは、「スライダー」の値を持つロール属性を与えることです。

私たちのコントロールは、スライダーのモデルに非常にうまくマッピングされます。

最小値、ゼロスライス、最大値、8つのスライス、現在の値、4つのスライスがあります。

また、コンポーネントがキーボードやその他の非タッチインターフェイスのユーザーにとってフォーカス可能であることを確認するために、ゼロのタブインデックスを追加する必要があります。

また、いくつかのARIA属性を追加する必要があります。

Aria-valueminとaria-valuemaxは、このスライダーの最小値と最大値を支援技術に知らせます。

これらの属性は、ネイティブ範囲タイプの入力で使用できる最小属性と最大属性に似ています。

次に、コントロールの現在の値を伝えるためにaria-valuenowを追加しましょう。

また、aria-valuetextを使用して、4つのスライスである現在の値のより有用な説明を提供します。

フォーカス可能なスライダーとしてコントロールを確立したので、支援技術からのコントロールの価値の更新を処理する必要があります。

iOSでは、VoiceOverは1本の指でスワイプしてスライダーをインクリメントし、下にスワイプしてスライダーを縮小してスライダーの調整を容易にします。

Safariは、これらのジェスチャーを処理する簡単な方法を提供します。

VoiceOverユーザーがスライダーにフォーカスして上にスワイプすると、Safariは自動的に矢印キーの右イベントをシミュレートします。

同様に、VoiceOverユーザーがスライダーにフォーカスして下にスワイプすると、矢印キー左のイベントがシミュレートされます。

これらのシミュレートされたイベントは、実際のキープレスと同じように動作します。つまり、キーイベントリスナーが処理できます。

ツールベルトのこの新しい知識で、ピザコントロールにキーダウンリスナーを追加しましょう。

アクティブキーが右矢印または上矢印の場合は、現在のスライス量と1でコントロールを更新します。

同様に、アクティブ化されたキーが左矢印または下矢印の場合は、現在のスライス量から1を引いた値でコントロールを更新します。

このキーイベントリスナーを追加することは、VoiceOverユーザーだけでなく、フルキーボードアクセスのユーザーにも役立ちます。フルキーボードアクセス可能なウェブアプリに大きく、または完全に依存している可能性があります。

両方のイベントリスナーが確立されたので、おそらく更新機能も定義したいと思うでしょう。

まず、与えられた値をクランプして、0から8の間の境界内にあることを確認し、保存されたスライスカウントの状態をこの値に更新します。

次に、コントロールのビジュアル表現とARIA表現の両方を確実に更新する必要があります。

カスタムコンポーネントを構築する場合、良いルールは、コンポーネントの視覚的表現を更新する場合は、ARIA表現をどのように更新するかについても考える必要があるということです。

この場合、aria-valuenow属性とaria-valuetext属性の両方を更新して、新しい制御状態の支援技術をユーザーに通知する必要があります。

Aria-valuenowを現在のスライス数に設定することから始めます。

次に、aria-valuetextをスライス数のより人間に優しい説明と、「スライス」または「スライス」という単語に設定します。

さて、すべてが整ったので、クイズ評価ウェブアプリに戻って、VoiceOverの体験がどのようなものかを見てみましょう。

まず、ピザコントロールをタップして焦点を合わせることから始めます。

Siri: 4つのスライス、調整可能。

1本の指で上下にスワイプして値を調整します。

タイラー：VoiceOverがスライダーの初期値、4つのスライスを読み、調整可能だと教えてくれたと聞きました。

VoiceOverのプロンプトに従って、上にスワイプして選択したスライスの数を増やすことができます...

Siri: 5つのスライス。6つのスライス。

タイラー：そして、下にスワイプして、選択したスライスの数を減らします。

Siri: 5つのスライス。4つのスライス。

タイラー：これらの変更により、カスタムスライダーコンポーネントがはるかにアクセスしやすくなりました。

それでは、Web Speech APIでSSMLを使用して、すべてのユーザーにとってより豊かなエクスペリエンスを構築する方法について話しましょう。

Web Speech APIは、音声入力用のSpeechRecognitionと、テキスト読み上げオーディオ出力用のSpeechSynthesisの2つの主要なJavaScriptインターフェイスで構成されています。

Web Speechは、Webアプリに音声アシストまたは音声のみのインターフェイスを提供する機能を提供します。

これは、マウス、キーボード、タッチスクリーンなどの他の制御手段の使用に問題がある可能性のある運動障害のあるユーザーにとって有益です。

SafariのSpeechSynthesisの新機能は、SSMLを使用してテキストの話し方を操作する機能です。

SSMLにはたくさんの機能があります。

たとえば、break要素を使用して、選択した時間でスピーチに一時停止を挿入できます。

ユーザーに息を吸って...息を吐くように頼んだ方がいいかもしれません。

音素要素を使用すると、「tomayto」や「tomahto」などの単語の発音を制御できます。

韻律要素を使用すると、音声テキストのピッチ、レート、音量を操作できます。

そして、これらはSSMLの機能の表面を傷つけるだけです。

詳細については、w3.orgのSSML仕様を確認してください。

SSMLに関する新しい知識を活用しましょう。

クイズの最後の質問では、「水」というフレーズの正しいスペイン語翻訳を含むラジオボタンを選択するよう学生に依頼します。

ユーザーがボタンを押してテキスト読み上げで質問と回答を読み、SSMLを使用してスペイン語のフレーズをスペイン語の音声で読むことで、この質問をより魅力的にすることができます。

まず、ボタンを作成することから始めましょう。この絵文字の説明はここでは特に役に立たないので、aria-hiddenがtrueに設定されたスパンでスピーカーの絵文字をラップします。

次に、話すためのフレーズとそれを話すための音声ロケールを取るwrapWithSSMLと呼ばれるヘルパーJavaScript関数を作成しましょう。

強調を構築するために、各フレーズの前に短い一時停止を挿入するために、ブレーク要素でSSML文字列を構築し始めます。

Prosody要素では、デフォルトレートの80%でフレーズを話すことを指定します。

そして最後に、lang要素を使用して、フレーズを話したいロケール固有の音声を選択できます。

そして今、読み取り質問ボタンにクリックイベントリスナーを追加し、内部にSSML文字列を構築します。

文字列全体をスピーク要素で包むことから始めます。

内部のものがSSMLと見なされるべきであることを合成プロセッサに示すので、話すことは重要です。

次に、私たちの質問を含めます:スペイン語で「水」を何と言いますか?

wrapWithSSMLヘルパー機能を使用して、翻訳されているフレーズを強調し、米国で確実に読まれるようにすることができます。英語のロケールボイス。

また、4つの潜在的な回答すべてにwrapWithSSMLを使用し、強調し、スペイン語のロケール音声で読むように要求します。

最後に、SSML文字列を使用して新しいSpeechSynthesisUtteranceオブジェクトを作成し、それをウィンドウSpeechSynthesis speakメソッドに渡して読み取ることができます。

そのすべてが整った状態で、私たちのウェブアプリでの経験がどのようなものか見てみましょう。

最後の質問があるページで、「質問を読む」ボタンをタップして聞きます。

Siri: スペイン語で「水」は何と言いますか?

エル・アグア。

ラ・アブエラ。

ラ・アベハ。

El árbol。

タイラー：SSMLのおかげで、私たちは学生のためにはるかに魅力的な体験を生み出しました。

ウェブ上のもう1つの一般的なデザインパターンはモーダルです。

ウェブアプリでは、サインインまたはサインアップフォーム、確認ダイアログなどとして使用できます。

アクセシブルなモーダル体験を提供する1つの方法は、アリアモーダル属性です。

aria-modal="true"では、Safariはモーダル以外のすべてのアクセス可能な要素が無視されると見なします。

最近、Safariはダイアログ要素のサポートも追加しました。

ダイアログは、標準的なフォーカスインタラクション、iOSのエスケープキーやスクラブジェスチャーなどのモーダルクロージングジェスチャーの既成概念にとらわれない処理により、アクセシビリティに優しいモーダル体験をはるかに簡単に提供します。

これを実際に見るには、クイズ評価ウェブアプリの「スコアを表示」ボタンを変更して、結果のダイアログを開きましょう。

まず最初に、ダイアログ要素を作成する必要があります。

マークアップはこんな感じかもしれません。

後でスコアの表示ボタンで参照できるように、ダイアログにIDを与えます。

また、ダイアログの内容をメソッドダイアログで形式でラップします。

そうすることで、ボタンのような送信タイプコントロールは、ダイアログを閉じます。

モーダルを開くには、少しJavaScriptも必要です。

ダイアログ要素でshowModal()を呼び出す「スコアを表示」ボタンにクリックイベントリスナーを追加しましょう。

そして今、私たちはこれを試してみる準備ができています。

VoiceOverがアクティブになっている場合は、「スコアを表示」ボタンをタップしてフォーカスします。

Siri: スコアを表示します。ボタン。

タイラー：その後、画面のどこかを1本の指でダブルタップしてボタンを押します。

Siri: スコアを表示します。ウェブダイアログ。閉じるボタン。

タイラー：そして今、私たちはモーダルを持っています。

左にスワイプしてモーダルの内容を移動して、スコアを聞くことができます。

Siri: 6つの質問はすべて正解です。お疲れ様でした！

タイラー：終わったら、右にスワイプして閉じるボタンに戻ることができます。

Siri: 閉じるボタン。

タイラー：ダブルタップしてモーダルを閉じます。

Siri: チェックなし。

タイラー：前述したように、ダイアログ要素は、箱から出してモーダルクロージャのためのiOSスクラブジェスチャーを処理します。

実演するために、ダブルタップでモーダルを再開します...

Siri: スコアを表示、ボタン。

ウェブダイアログ。閉じる、ボタン。

タイラー：そして、画面上で2本の指を右、左、右に素早く動かして、スクラブジェスチャーを実行します。

Siri: スコアを表示します。ボタン。

タイラー：さて、私たちは機能的なモーダルを持っていますが、それでももっとうまくやることができます。

モーダルを開いたとき、VoiceOverは「ウェブダイアログ、閉じる、ボタン」しか読まないことに気づきましたか?

このような状況では、支援技術のユーザーにより多くの情報を提供するために、aria-labelまたはaria-labelledby属性を使用することはおそらく理にかなっているでしょう。

私たちのモーダルコンテンツは短いので、単に彼らが正しい答えの数をユーザーに知らせるので、私たちのラベルにそれを使用しましょう。

まず、モーダルコンテンツをID付きのスパンでラップします。

次に、modal-content IDを指すダイアログにaria-labelledby属性を追加できます。

また、最初のモーダルフォーカス要素をオートフォーカス属性を持つ閉じるボタンに明示的に設定しましょう。

これはすでにこの単純なモーダルのデフォルトの動作でしたが、私たちのモーダルがより多くのコンテンツを持っていたり、多くのコントロールでより複雑だったりした場合、それはそうではなかったかもしれません。

たとえば、コンテンツの多いモーダルでは、トップレベルの見出しにオートフォーカスを配置する方が理にかなっているかもしれません。

モーダル作成者として、ユーザーに素晴らしい体験を提供するものについて最もよく知っているでしょう。

新しい属性を導入して、VoiceOverでの経験がどのようなものかをもう一度見てみましょう。

最初にスコアを表示ボタンを1回タップしてピントを合わせます...

Siri: スコアを表示、ボタン。

タイラー：そして、ダブルタップして押します。

Siri: 6つの質問はすべて正解です。お疲れ様でした！ウェブダイアログ、閉じるボタン。

タイラー：それははるかに良い経験です。

VoiceOverユーザーは、aria-labelledbyのおかげですぐにスコアを聞き、すでに閉じるボタンに集中しているため、ダブルタップしてモーダルを離れることができます。

そして、今日のセッションを締めくくる時間です。

リッチでアクセスしやすいウェブアプリを構築し、すべてのユーザーに素晴らしい体験を提供するためのテクニックを学んだことを願っています。

最新のSafariでこれらの機能を試して、見つけたバグをbugs.webkit.orgのWebKitバグトラッカーにファイルしてください。

現代のウェブアクセシビリティの今日の旋風ツアーに参加してくれてありがとう。

素晴らしいWWDCを！

。