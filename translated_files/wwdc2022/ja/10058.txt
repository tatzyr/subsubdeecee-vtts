10058

♪ ♪

Raj Ramamurthy：こんにちは、「iPadのSwiftUI：インターフェイスを整理する」へようこそ。

私はRajで、SwiftUIに取り組んでいます。

iPadOS 16には、豊富な機能を備えた、より生産的でプロフェッショナルなグレードのアプリを構築できるように、多くのアップデートがあります。

このセッションでは、それらのいくつかについて話し合い、iPadで輝くためにSwiftUIアプリのインターフェースを整理することについて話します。

まず、リストとテーブルのツアーにご案内します。

次に、SwiftUIの選択モデルと、選択をメニューと統合する方法について説明します。

最後に、分割ビューを使用してiPad用のアプリのナビゲーションを構成する方法について説明します。

でも待って、もっとあるよ。

これは実際には2部構成のシリーズの最初のセッションです。

第2部では、同僚のハリーがツールバー、タイトルなどを見学します。

ハリーは、SwiftUI iPadアプリを次のレベルに引き上げるいくつかの本当に重要な追加をカバーしているので、両方のセッションを必ず見てください。

リストとテーブルから始めましょう。

私は最近、いくつかのブッククラブに参加しましたが、かなり遅れています。

読むのに静かな場所を見つけるのはとても難しいです。

だから、私が読書に集中するのを助けるために、私はこれらの神話的な静かな場所を見つけるためのアプリに取り組み始めました。

静かな場所は、ページが飛ぶ読書のオアシスのようなものです。

そして、このアプリは、私が見つけたすべての静かな場所を追跡するのに役立ちます。

私はiPhone用のアプリを構築しましたが、より大きなディスプレイを本当に利用するためにiPad用にアップデートするのは楽しい練習だと思います。

iPad用のアプリをより良くすることで、最終的にMacにも持ち込むときにもさらに進むでしょう。

このセッションではMacを明示的にカバーしませんが、表示されているAPIの多くはmacOSにも適用されます。

これは私がこれまでに見つけたすべての静かな場所のリストです。

このリストは、アプリのアップデートから始めるのに最適な場所です。

私はiPad版に取り組み始めました。

ひどいことではありませんが、大きな画面を利用していません。

かなりの無駄なスペースがあり、情報密度は低いです。

ありがたいことに、iPadOS 16には、この種の情報密度の高いシナリオに対する素晴らしい解決策があります。複数列のテーブルです。

彼らがどのように見えるかをお見せしましょう。

これは、複数列テーブルにSwiftUI APIを採用した後の「すべての場所」ビューです。

今後数分で、このスクリーンショットに向けて取り組みます。

SwiftUIの複数列テーブルはmacOS Montereyで最初に導入され、iPadOS 16以降、同じテーブルAPIがiPadで利用可能になりました。

Macと同様に、iPadのテーブルは複数の列と並べ替えをサポートしています。

iPadのテーブルの導入に伴い、SwiftUIはiPadとMacのテーブルのセクションをサポートするようになりました。

前のセッション「SwiftUI on the Mac: Build the fundamentals」のテーブルに関する一般的なガイダンスは、iPadにも引き続き適用されますので、まだ見ていない場合は、そのセッションを見ることをお勧めします。

iPhoneリストから始めて、先ほど示した表を作り上げましょう。

これが以前の場所リストのコードです。

まず、リストからテーブルに切り替えます。

テーブルはリストとは構造が異なります。

ビュービルダーの代わりに、テーブルは列ビルダーを受け入れます。

私が追加する最初の列は、その場所の名前です。

列には、ヘッダーの名前と、コレクション内の各要素のビューを生成するためのビュービルダーが必要です。

また、値キーパスも指定しました。これは、後でテーブルにソートを追加するときに重要になります。

ビュービルダーがリストベースの構造とどれほど似ているかに注目してください。

実際、以前からPlaceCellタイプを再利用することさえできます。

コンパクトサイズのクラスでは、テーブルには最初の列しか表示されません。つまり、私のテーブルはiPhoneとiPadのスライドではまだ見栄えがします。

これは外観のリストに似ていることに気付くかもしれません。

しかし、テーブルをリストに置き換えただけではありません。テーブルを再利用すると、サイズクラス間を移行するときにスクロール位置と選択を維持できるからです。

一般的に、コンパクトな特定の外観には最初の列を使用し、スライドオーバーなどのさまざまな環境でiPadアプリをテストしていることを確認してください。

さて、次に進みます。

快適さと騒音レベルのために列を追加します。

テキストコンテンツのみの列の場合、TableColumnは、値が文字列を指すときにビュービルダーを省略できる便利なAPIを提供します。

そして、この場合、私は快適さのレベルがあまりスペースを必要としないことを知っているので、私は固定幅を適用しました。

コンパレータを使用してテーブルにソートを追加することもできます。

コンパレータを格納するための状態を作成します。

ここの状態は、テーブルのすべてのコンパレータを表すため、配列です。

また、初期値を名前コンパレータに設定すると、テーブルが最初に表示されたときにソートされて表示されます。

次に、私の状態へのバインディングをテーブルに渡して、すべてを配線します。

列はそれぞれ、比較可能なフィールドへのキーパスとして値を指定しているため、デフォルトではソート可能です。

そして今、テーブルは名前、快適レベル、騒音で完全に並べ替え可能です。

テーブルは単独でソートを処理しないことに注意してください。

それは私次第です。

ソート順が変更されたときに、onChange修飾子を使用してデータをソートできます。

よし、スピンしよう。"

テーブルは素晴らしく、すべての場所のデータを表示し、本当に大きな画面を利用しています。

Macとは異なり、iPadのテーブルは水平にスクロールしないので、列の数を制限することが重要です。

これにより、すべての列を一度に表示できます。

各列には、ヘッダーにラベルが表示されます。

そして、ラベルをタップすると、その列が並べ替えます。

騒音レベルで並べ替えることさえできます。

そして、スライドオーバーでは、テーブルはより凝縮された形式ですべての情報を表す単一の列に折りたたまれます。

リストをテーブルに更新したので、選択に飛び込みましょう。

このセクションでは、SwiftUIの選択モデルを確認し、選択とメニューの統合について説明します。

その過程で、私は豊富な機能で場所のテーブルを過給するつもりです。

しかし、まず、SwiftUIでの選択がどのように機能するかについて話します。

SwiftUIには、リストとテーブルの選択を管理するための堅牢なAPIが含まれています。

これは、いくつかの行を含むリストを含む図です。

各行にはタグがあります。

これらのタグは、リストが選択を管理するのに役立つ各行の一意の値です。

この図では、タグは緑色の円で示されています。

タグに加えて、選択を保持する状態もあります。 選択を保持する状態もあります。

これはタグの値を保持するタイプです。

たとえば、複数選択では、これは選択した各行のタグを保持するセットです。

リストの仕事は、各行のタグと選択状態の間で調整することです。

そして、それはその選択バインディングを介してこれを行います。

したがって、ここで2番目の行などの行が選択されると、リストは選択バインディングを介してセットに追加されます。

同様に、アプリの他の部分がプログラムでセットを変更した場合、ここに示されているように3つを追加すると、選択バインディングが変更されるため、リストはそれを選択します。

この一般的なモデルは、iOSとmacOSで同じです。

したがって、選択にはタグと状態の2つの部分があります。

次に、タグがどこから来るのかについて話したいと思います。

タグは、そのビューが選択されているかどうかを追跡するために使用される、選択可能なコンテナ内のビューの値にすぎません。

多くの場合、SwiftUIはあなたに代わってタグを自動的に合成することができます。

タグは識別子に似ていますが、まったく同じではありません。

ForEachを使用する場合、SwiftUIは明示的なアイデンティティからビューのタグを自動的に導き出します。

また、テーブルは行値の識別子を選択タグとして使用します。

場所アプリでは、場所構造体の識別子タイプが使用されることを意味します。

明示的なアイデンティティの詳細については、「Demystify SwiftUI」をチェックしてください。

ビューを手動でタグ付けするには、タグ修飾子を使用します。

これはForEachがボンネットの下で行うことです。

タグ修飾子はハッシュ可能な値を取ります。

ただし、タグ修飾子を使用する場合は注意してください。選択可能なコンテナ内のすべてのビューが同じタグタイプを共有することが重要です。

そうでなければ、SwiftUIはビューの選択方法を知らないかもしれません。

ID修飾子を使用する場合、タグは設定されないことに注意してください。

それがタグの概要です。先ほどの図を元に戻しましょう。

この図のタグ部分を説明したので、選択方程式の残りの半分である選択状態に焦点を当てたいと思います。

前の例では、セットを使用しましたが、他のオプションもあります。

これらのデータ構造を使用して、選択を表すことができます。

SwiftUIは、macOS Venturaの新機能、macOSサイドバーに必要な選択、および複数選択の単一選択をサポートしています。

iPadOS 16では、軽量の複数選択も導入されています。

これで、キーボードが取り付けられているので、複数の行を選択するために編集モードに入る必要はなく、モダリティを避けるのに役立ちます。

キーボードを使用する場合は、シフトやコマンドなどの一般的なショートカットを使用して、選択範囲を拡張および変更できます。

そして、これはポインタでうまく機能します。

選択を採用した後の場所の表は次のようになります。

この例では、キーボードとトラックパッドが接続されているため、行はインデントされていませんが、まだ選択されています。

ただし、タッチを使用する場合は、2本指のパンを使用して加速される編集モードに入る必要があります。

SwiftUIはこのジェスチャーを自動的にサポートしています。

編集モードといえば、単一選択と編集モードのアップデートもあります。

iOS 16では、iPhoneとiPadのリスト選択では、単一の行を選択するときに編集モードが不要になりました。

そして、これは更新されたナビゲーションAPIとの調整に非常に便利です。

これらすべての更新により、編集モードの新しい列を追加することで、前のテーブルに基づいて構築されたこのテーブルに至ります。

編集モードは、キーボードなしで複数の選択を使用する場合にのみ必要です。

それで、選択をサポートするために場所表を更新します。

選択を格納する状態を追加することで、場所のテーブルに選択を簡単に追加できます。

状態を作成したら、テーブルの初期化子にバインディングを渡します。

テーブルは、その選択タイプが行識別子と一致することを強制するので、私は選択タイプとして場所IDタイプを使用しました。

複数選択したいので、選択状態にセットを使用しました。

テーブルは自動的に行にタグを付けるので、自分で何もタグを付ける必要はありません。

そして今、私はテーブルの行を選択することができます。

しかし、私は本当に選択で何もしていません。

ブッククラブで他の人と共有できるガイドに選択した場所を追加できるボタンを追加するのは素晴らしいことだと思います。

これはツールバーのボタンを追加するコードです。

空でない選択がある場合、ボタンが表示されます。" ボタンが表示されます。

また、既存の軽量選択サポートを補完する編集ボタンを追加しましたが、キーボードがないときに編集モードを開始および終了するアフォーダンスを提供します。

優れたiPadアプリは、キーボードの有無にかかわらず輝くので、編集モードに出入りするためのコントロールを提供することが重要です。

私たちはそこに着いてます。

これで、行を選択すると表示されるボタンと、編集モードに出入りするボタンがあります。

ツールバーの詳細については、このシリーズの2番目のセッションを必ずご覧ください。

私はここのツールバーボタンにかなり満足していますが、私たちはもっとできます。

選択に関するアクションについては、できるだけ簡単にアクセスできるようにしておくのは素晴らしい習慣です。

そのため、iOS 16、iPadOS 16、macOS Venturaでは、SwiftUIが複数選択コンテキストメニューのサポートを追加しています。

複数選択コンテキストメニューを使用すると、選択した識別子のセットで動作するコンテキストメニューを表示できます。

もっと理解するために、この表の解剖学を調べてみましょう。

アイテムベースのコンテキストメニューには3つのバリエーションがあります。

まず、上部の選択など、複数の項目にメニューを表示できます。

個々の項目にコンテキストメニューを表示することもできます。

そして最後に、コンテンツがない空の領域にコンテキストメニューを表示できます。

これのサポートを私たちの場所のテーブルに追加しましょう。

前のコード例からいくつかの詳細を省略したので、コンテキストメニューに集中できます。

選択タイプを取る新しいcontextMenu修飾子を追加しました。

これはリストまたはテーブルの選択タイプと一致する必要があるので、テーブルを使用しているので、PlaceIDタイプを使用します。

クロージャには、行動するアイテムのセットが渡されるので、それが空の場合、私はメニューが空の領域のためのものであることを知っています。

新しい場所を追加するボタンは、空のエリアに最適だと思います。

そうすれば、外出先で読むための新しい静かな場所を見つけたら、すぐに追加できます。

空のアイテムセットのビュービルダーがビューに解決しない場合、SwiftUIは空の領域にメニューを表示しないことに注意してください。

次に、単一の選択を処理しましょう。

セットに1つのアイテムしかない場合、メニューが1つの場所に表示されていることを知っています。

そして、単一選択と複数選択の両方で、これらの場所をガイドに追加できるようにしたいので、メニューに別のビューを追加します。

進捗状況を確認しましょう。

これが動作中の新しいコンテキストメニューサポートです。

空の領域をクリックすると、新しい場所を追加するためのメニュー項目が表示されます。

1つの行を選択すると、その行だけのコンテキストメニューが表示されます。

そして、キーボードで選択範囲を拡張して、この青いハイライトを作成できます。

その後、複数の行にわたってコンテキストメニューをアクティブにすることができ、ガイドに場所を簡単に追加できます。

このテーブルは今かなりおしゃれに見えるので、その周りに構造を追加する時が来たと思います。

これを行うには、スプリットビューが必要です。

ナビゲーションはiPad体験の基本的な部分です。

また、分割ビューは、ドリルインすることなく、より多くの情報を一度に表示することで、iPadの大きなディスプレイのモダリティを回避するのに最適な方法です。

このセクションでは、ナビゲーションとスプリットビューに関するSwiftUIのアップデートについて説明します。

前のセクションでは、場所のテーブルを作成し、選択モードや編集モードなどの豊富な機能を追加しました。

しかし、場所アプリにはいくつかの構造が欠けていると思います。

このセクションでは、ナビゲーションスプリットビューを活用して、アプリの構造の基盤を構築します。

iPadOS 16とmacOS Venturaの新機能であるSwiftUIは、NavigationSplitViewタイプのスプリットビューのサポートを改善しました。

SwiftUIは、2つまたは3つの列分割ビューをサポートし、列の表示方法を複雑に制御するための複数のスタイルを持っています。

このセッションでナビゲーションコンテンツを提示する方法を完全にカバーするつもりはありませんので、そのために、ナビゲーションのためにSwiftUIクックブックをチェックしてください。

カートは、いくつかの本当においしいナビゲーション体験を調理するためのかなりの数のレシピを持っています。

代わりに、私は分割ビューにもっと集中するつもりです。

これは、iPadの2列分割ビューを示す図です。

SwiftUIでは、先頭の列はサイドバー列と呼ばれ、末尾の列は詳細列と呼ばれます。

ここで列が隣同士でどのようにバランスが取れているかに注目してください。

ランドスケープでは、SwiftUIはデフォルトでこれを提供します。

ただし、ポートレートでは、サイドバーは邪魔にならないように隠れ、詳細列のみが表示されます。

サイドバーボタンをタップすると、詳細列の上に表示されるサイドバーが表示され、その下に暗めます。

一般的に、2列分割ビューは、スペースが制約されている場合に詳細列のみを表示することを好みます。詳細列は、サイドバー列よりも重要な情報を表示することが多いためです。

この動作をカスタマイズしたい場合は、常に目立つ詳細ナビゲーションスプリットビュースタイルで詳細列を好むか、バランスの取れたNavigationSplitViewスタイルで重みのバランスをとることができます。

NavigationSplitViewは、3つの列レイアウトもサポートしています。

3つの列で、サイドバーと詳細の間にコンテンツ列と呼ばれる追加の列があります。

UIKitから来ている場合は、これを補足列として知っているかもしれません。

横向きでは、コンテンツと詳細の列が表示され、サイドバーを切り替えることができます。

ツールバーボタンをタップすると、詳細列が邪魔にならないようにスライドし、サイドバーとコンテンツのためのスペースを作ります。

縦向きでは、詳細列のみが表示され、ツールバーボタンをタップするとコンテンツが表示されます。

そこから、もう一度タップするとサイドバーが表示されます。

サイドバーとコンテンツの両方が詳細をオーバーレイします。

一般的に、利用可能なスペースを最大限に活用し、より大きなディスプレイに特化しているため、3列分割ビューの自動スタイルに固執することをお勧めします。

2列分割ビューと同様に、3列分割ビューはコンパクトなサイズのクラスでスタックに折りたたまれます。

スプリットビューの基本をカバーしたので、プレイスアプリに追加する時が来ました。

これがコンテンツビューです。

ここに2つの列を持つNavigationSplitViewを作成しました。

最初の列はサイドバーの列で、2番目の列は詳細列です。

詳細列にはサイドバー列からのリンクが入力されますが、何も表示されない場合は、代わりに「場所を選択」のプレースホルダが表示されます。

これはプレースホルダのスクリーンショットです。それはかなり素晴らしいです。

これは、サイドバーを横向きに表示し、ポートレートで邪魔にならないように隠す自動スタイルを使用しています。

サイドバーの行をタップすると、その行が詳細列に表示されます。

また、スライドオーバーを使用すると、列は自動的に折りたたまれます。

これは氷山の一角に過ぎません。状態回復のより良いサポート、ディープリンク、さらにはより豊かなプログラム制御など、非常に多くのエキサイティングなナビゲーションの追加があります。

繰り返しになりますが、ナビゲーションクックブックセッションで詳細を確認することをお勧めします。

私はアプリにいくつかの素晴らしいiPad機能を構築しました、そして私は読むためにいくつかの平和な場所を探しに行くことに興奮しています。

うまくいけば、私はすぐに私のブッククラブに追いつくでしょう。

このセッションでは、データの豊富な表示のためにテーブルを活用する方法、洗練された選択インタラクションを管理する方法、および分割ビューでモダリティを回避する方法を取り上げました。

関連するセッションをチェックし、SwiftUIアプリを洗練して、iPadのパワーを活用してください。

ありがとうございます。

♪ ♪