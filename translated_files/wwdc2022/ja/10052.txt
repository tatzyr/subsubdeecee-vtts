10052

♪インストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私はニックです。

そして、私はフランクで、私たちはSwiftUIエンジニアです。

今日は「SwiftUIの新機能」を取り上げます。

SwiftUIは当社のオペレーティングシステムとともに成長しており、それぞれが互いの限界を押し広げています。

私たちは、あなたがSwiftUIで作っているものに驚き、喜んでいます。

私たちは、コミュニティからのフィードバックのすべての味を心に留めています。

だからこそ、私たちは今年焦点を当てたことを共有することに特に興奮しています。

今年のAPIで、私たちはより深く掘り下げました。

私たちはより多くのカスタム体験を可能にしました。

私たちはいくつかの驚くべき新しいグラフィカルテクニックを導入しました。

私たちは新しいSwiftUIアプリ構造などを設計しました。

SwiftUIは、プラットフォームの未来を反映したデザインと機能を構築することを可能にしました。

古典的なアプリの再設計から、まったく新しい機能、深いシステム統合まで。

Apple内でのこの包括的な採用は、SwiftUIの進化をさらに推し進めます。

これらの新しいデザインや機能の多くは、SwiftUIがAppleでアプリを書く方法をどのように進化させたかによってのみ可能です。

今日、私たちはこれらのAPIを祝い、SwiftUIの誕生日も祝います。フランクと私はパーティー計画委員会の幸運な共同議長です。

パーティーのために計画した活動についてお話ししましょう。

すべてのプラットフォームで楽しいデータビジュアライゼーションを作成できるSwift Chartsというまったく新しいフレームワークを紹介します。

ナビゲーションと新しいウィンドウテクニックのためのSwiftUIのデータ駆動型、強く型付けされたモデルを披露します。

フランクは、一連の新しいコントロールと既存のコントロールのより深いカスタマイズを案内します。

その後、彼は私たちがTransferableプロトコルでSwiftUIの宇宙にエレガントに共有をもたらした方法を紹介します。

最後に、気まぐれな新しいグラフィックAPIと高度な新しいレイアウトAPIで締めくくります。

スウィフトチャートで行きましょう。

スウィフトチャートは、美しい州主導のチャートを構築するための宣言的なフレームワークです。

SwiftUIを素晴らしいものにする基本的な設計原則とデータをプロットするプロセスは、世界クラスのデータ視覚化フレームワークであるSwift Chartsを作成するために調和して構成されています。

これは、フランクのパーティータスクの数をプロットした棒グラフで、パーティーを開始する前に完了する必要があります。

Swift Chartsは、わずか数行のコードから壮大でカスタマイズ可能なチャートを構築しました。

SwiftUIと同様に、Swift Chartsはインテリジェントなデフォルトを選択します。

ここで、フレームワークはy軸の値に満足のいく丸い数字を選択し、バーマークのデフォルトの色を提供しました。

SwiftUIを知っていれば、Swift Chartsの宣言的で状態主導の構文をすでに読むことができます。

チャートは単なるビューであり、リストやテーブルと同じように宣言します。データを提供し、そのデータを使用してチャートコンテンツを構築します。

このチャートでは、BarMarkを選択しましたが、LineMarkに切り替えてカテゴリごとにグループ化するためにフォアグラウンドスタイルを追加すると、Swift Chartsが各カテゴリの個々の線を描画し、チャートに自動的に凡例を追加するため、ストーリーをより多く見ることができます。

これらのチャートに少し個性を与えるのは楽しいです。

LineMarkのシンボル修飾子を使用して、ラインにポイントを追加できます。

これらの修飾子は、SwiftUI修飾子と変わりません。

チャート内でSwiftUIビューを使用することもできます。

Listと同様に、Chartへのデータ引数は代わりにForEachに渡すことができます。

これにより、RuleMarkのようにチャートビルダーにマークを追加して、毎日の目標を表示できます。

SwiftUIの精神は、Swift Chartsがローカリゼーション、ダークモード、ダイナミックタイプを自動的に処理し、もちろんすべてのプラットフォームで機能するため、再び輝きます。

独自のチャートを作成する方法を見たい場合は、「Hello Swift Charts」をチェックしてください。

高度なプロット技術に興味がある場合は、「バーを上げる」セッションでフォローアップしてください。

次に、ナビゲーションとウィンドウについて話しましょう。

SwiftUIは、没入型のプッシュアンドポップナビゲーションスタック、広大で詳細豊富なスプリットビュー、強力なマルチウィンドウエクスペリエンスなど、最も一般的なアプリナビゲーションパターンをすでにサポートしています。

今年、SwiftUIはこれら3つのパターンすべてに大きなアップデートがあります。

スタックから始めましょう。

SwiftUIは、プッシュアンドポップスタイルのナビゲーションをサポートするために、単にNavigationStackと呼ばれる新しいコンテナビューを導入しています。

NavigationStackは、パーティー計画アプリのこの食品在庫リストのように、ルートコンテンツビューをラップします。

予想通り、NavigationLinkやnavigationTitle()などの既存のAPIでうまく機能します。

リンクを選択すると、SwiftUIは詳細ビューをスタックの上にプッシュします。

私たちのアプリでは、各詳細ビューには、すばやく閲覧するための関連食品のリンクが含まれています。

このアプローチはあなたが必要とするすべてかもしれません。

しかし、見解を提示し、その提示された状態をプログラムで制御する新しい方法があります。

ナビゲーションスタックの状態を制御する必要がある場合は、新しいデータ駆動型APIを採用してください。

新しい navigationDestination() 修飾子を使用すると、ナビゲーションの宛先を特定のデータ型に関連付けることができます。

そして今年、私たちはNavigationLinkに新しいパーティートリックを教えました。宛先ビューの代わりに、宛先を表す値を取ることができます。

リンクをタップすると、SwiftUIは値のタイプを使用して正しい目的地を見つけ、以前と同じようにスタックにプッシュします。

データを使用してスタックを駆動するようになったため、現在のナビゲーションパスを明示的な状態として表現することが可能です。

この場合、ナビゲーションパスは単に私たちが訪れたすべての食料品の配列です。

この状態に直接アクセスすることで、最初に選択した項目にすばやく戻るためのボタンを追加するのは簡単ではありません。

ビューがスタックにプッシュされると、アイテムはselectedFoodItems配列に追加されます。

ボタンのアクションでは、最初のアイテムを除いて、パスからすべてのアイテムを削除できます。

そして、タップで、私たちはすぐに私たちが始めた場所に戻ります。

では、複数列ナビゲーションの分割ビューについて話しましょう。

複数列ナビゲーション用のNavigationSplitViewという別の新しいコンテナを導入しています。

NavigationSplitViewは、2列と3列のレイアウトを宣言できます。

パーティープランナーは、シンプルな2列のレイアウトを使用し、パーティー計画タスクのサイドバーリストと、選択したタスクでコンテンツを変更する詳細ビューをラップします。

スプリットビューは、先ほど見た新しい値ベースのナビゲーションリンクでうまく機能し、リンクの値を使用してリストの選択を促進します。

NavigationSplitViewは、小型のクラスやデバイスで自動的にスタックに崩壊し、アダプティブなマルチプラットフォームアプリを構築するための優れたツールになります。

NavigationSplitViewとNavigationStackは連携するように設計されており、より複雑なナビゲーション構造を構築するために直接構成することができます。

パーティープランナーアプリでこれを使用して、詳細列を独自の自己完結型のナビゲーションスタックに変換し、macOSのナビゲーションスタックの新しいサポートも示しています。

さて、私たちは食べ物についてたくさん話しましたが、同僚のカートが「ナビゲーションのためのSwiftUI料理本」という講演で嵐を料理していると聞きました。

ナビゲーションスタックとナビゲーション分割ビューの詳細については、それをチェックしてください。

しかし、今のところ、箱の外に出て、新しいシーンAPIについて話しましょう。

すでにWindowGroupに精通している可能性があります。これは、アプリのメインインターフェイスを構築するのに最適な方法であり、複数のウィンドウを生成して、アプリのデータに異なる視点を許可することができます。

今年新しく、私たちはウィンドウを追加します。これは、あなたのアプリに単一のユニークなウィンドウを宣言します。

ここでは、パーティーの総費用を示すパーティー予算ウィンドウを追加しました。

デフォルトでは、ウィンドウは利用可能であり、アプリのウィンドウメニューでその名前を選択することで表示できます。

しかし、コマンド0のキーボードショートカットを割り当ててウィンドウを開くことで、それをさらに簡単にすることができます。

予算重視のパーティープランナーであり続けるために、このウィンドウも表示するアクション付きのツールバーボタンを追加します。

環境アクションopenWindowを使用して、SwiftUIが管理する新しいウィンドウをプログラムで開くことができるようになりました。

実際、今年は、デフォルトのサイズ、位置、サイズ変更などの修飾子を含む、一連の新しいウィンドウのカスタマイズを追加しました。

パーティーの予算が邪魔になってほしくないので、デフォルトでは小さなコーナーウィンドウとして表示されます。

しかし、その位置やサイズを調整すると、SwiftUIはアプリの起動時に自動的にそれを記憶します。

新しいスタンドアロンウィンドウシーンは、Mac上のこのような小さな補助ウィンドウに最適ですが、Party Plannerはマルチプラットフォームアプリであり、より小さな画面のためのより良いデザインが必要です。

たとえば、iOSでは、代わりにサイズ変更可能なシート内に予算を表示することを選択しました。

これは、新しいpresentationDetents()修飾子で可能です。

この場合、250ポイントとシステム定義の中高の2つの異なるサイズに固執するサイズ変更可能なシートを設定しました。

今年は、SwiftUIベースのアプリをパワーアップするXcodeのマルチプラットフォームターゲットを使用して、プラットフォーム間を反復するのは簡単です。

1つのターゲットを複数のプラットフォームに展開できます。

Xcodeのツールバーにある通常のプルダウンメニューからプラットフォームを選択するだけです。

「Xcodeの新機能」を見て、「Xcodeを使用してマルチプラットフォームアプリを開発する」で詳細を確認してください。

最後の新しいシーンタイプでは、メニューバーに注意を向けることができます。

macOS Venturaでは、SwiftUIで完全にMenuBarExtrasを構築できるようになりました!

これらは、アプリケーション内の他のシーンタイプと一緒に定義でき、アプリの実行中は常にメニューバーに表示されます。

または、MenuBarExtraだけでアプリ全体を構築できます!

これらは、macOSで最もシンプルなアイデアにも命を吹き込むとても楽しい方法です。

「SwiftUIアプリに複数のWindowsを持ち出す」には、すべての新しいシーンタイプと機能を活用する方法の詳細があります。

ウィンドウをコントロールできたので、フランクに渡して、ウィンドウにコントロールを入れます。

フランク：ありがとう、ニック！

今年は、インタラクティブなコンテンツを構築するためのすべてのAPIでさまざまな機能強化が行われています。

私たちはカバーすることがたくさんあるので、フォームの楽しい強化からこのパーティーを始めましょう。

macOS Venturaには、ニックが案内してくれたナビゲーションスプリットビューとスタックを使用して構築された、合理化されたナビゲーション構造を特徴とする真新しいシステム設定アプリが付属しています。

また、新鮮でモダンなインターフェーススタイルも備えています。

設定インターフェイスはコントロールが重いため、このスタイルは、多くのコントロールを含むフォームを一貫性があり、よく整理された方法で提示するように特別に設計されました。

また、パーティープランナーアプリ内でこの新しいデザインを採用しました。

見てみましょう。 

イベント詳細ビューには、さまざまな種類のコントロールがセクションにグループ化され、設定インターフェイスと同様の目的を果たしています。

これにより、システム設定から新しいビジュアルスタイルを採用するのに最適な候補者になります。

macOSの新しいグループ化されたformStyleを使用して、このデザインを有効にすることができます。

また、SwiftUIの宣言型APIの柔軟性のおかげで、フォーム内のコンテンツとコントロールは自動的に新しいスタイルに適応します。

たとえば、セクションはコンテンツをヘッダーの下に視覚的にグループ化し、コントロールはラベルと値を先頭と末尾に一貫して整列させます。

一部のコントロールは、一貫したレイアウトとアライメントのために末尾のミニスイッチとして表示を切り替える方法など、視覚的な外観も適応させる場合があります。

そして、フォーム自体は多くの視覚構造を提供するので、他のコントロールは軽量な視覚的な外観でこのコンテキストに適応し、ロールオーバーでより顕著なコントロールバッキングを明らかにします。

SwiftUIを使用すると、新しいコントロールを構築したり、読み取り専用情報を表示したりできる新しいLabeledContentビューを使用して、他のタイプのコンテンツをこの新しいスタイルに簡単に調整できます。

この場合、イベントの場所のテキストを表示し、SwiftUIは自動的にスタイルを調整し、そのテキストの選択を許可します。

しかし、LabeledContentは、より多くのアドレス全体を表示するためにカスタムビューを使用したい場合など、あらゆる種類のビューをラップすることもできます。

SwiftUIは、他のケースでもテキストにデフォルトのスタイルを適用することについてよりスマートになりました。

コントロールのラベル内の複数のテキストを階層的にフォーマットし、タイトルと字幕を形成します。

この新しいフォームデザインはmacOSで見栄えがしますが、この同じコードの多くをiOSバージョンのアプリと共有することもできます。

iOSでもいくつかの改善されたデザインに気付くでしょう。これらのポップアップメニューピッカーは、macOSに触発されたビジュアルスタイルですが、タッチベースのインターフェイスに美しく収まるように最適化されたインタラクションと外観を備えています。

もちろん、同じコードはiPadの大画面でうまく機能し、Macと一緒に、SwiftUIの宣言モデルが共有インターフェイスを構築するときにコードを共有するのにどのように役立ち、すべてのプラットフォームにパーティーをもたらすのに役立つかを見ることができます。

もちろん、フォームスタイルだけでなく、コントロールも改善しています。

それでは、Party Plannerアプリで使用している他の新しいコントロール機能のライトニングラウンドツアーに参加しましょう。

iOSアプリの新しいアクティビティページから始めましょう。

テキストフィールドは、新しい軸パラメータを使用して垂直に展開するように構成でき、テキストに合わせて高さを伸ばし、指定されている場合は高さを行制限に制限します。

しかし、lineLimit修飾子は、最小限のスペースを予約し、より多くのコンテンツが追加されると拡張し、コンテンツが上限を超えるとスクロールするなど、より高度な動作もサポートするようになりました。

テキストフィールドの下には、新しいMultiDatePickerコントロールの例もあり、連続しない日付選択をサポートし、週を通してパーティー活動を広めるのに役立ちます。

この時点で、この講演のパーティーのテーマについて複雑な感情を抱いているかもしれません。

素晴らしいニュースは、混合状態のコントロールを使用して、SwiftUIでそれらの感情を表現できるようになったことです!

ここでは、単一の集約トグルに折りたたむことができるトグルのグループがあります。

内側のトグルはそれぞれ単一のバインディングを取りますが、集約トグルは、その値がすべて一致しない場合、混合状態を表示するすべてのバインディングのコレクションを取ります。

ピッカーは同じように働きます。

この装飾テーマピッカーは、現在選択されている装飾を反映するように値を変更します。

しかし、複数の装飾を選択すると、混合状態の指標を使用してすべてのテーマが表示されます。

では、iOSアプリに戻りましょう。

イベントハッシュタグを選択するためのボタンスタイルのトグルがいくつかあります。

境界線付きのボタンスタイルを追加するだけで、各トグルを区別できます。

このようなボタンスタイルは、トグル、メニュー、ピッカーなど、ボタンのような外観をサポートするすべてのコントロールに適用されるようになりました。

ステッパーに進むと、その値の形式を提供できるようになりました。

macOSでは、フォーマットされたステッパーは編集可能なフィールドにその値を表示します。

また、ステッパーはwatchOSでも利用可能になりました。

Apple Watchは、私のお気に入りの新機能の1つであるアクセシビリティクイックアクション、手を握りしめることでアクションを実行する別の方法です。

クイックアクションは、ボタンを使用して他のUIアクションと同様に定義でき、表示可能なボタンと同等のクイックアクションの両方で同じコードを共有できます。

さて、私たちは多くの異なるコントロールをカバーしましたが、もちろん、コントロールはインタラクティブ性の唯一のソースではありません。

それでは、テーブルやリストなど、より大きなインタラクティブコンテナの新機能を見てみましょう。

テーブルがiPadOSでサポートされていることを共有できることを嬉しく思います。

予想通り、iPadOSのテーブルは、昨年macOS用に導入したのと同じTable APIを使用して定義されており、プラットフォーム間でコードを簡単に共有できます。

招待状表には、iPadの大きなディスプレイを利用して、各人の名前、都市、招待状のステータスの3つの列が表示されます。

しかし、この表は、iPhoneを含むコンパクトなサイズのクラスでも適切にレンダリングされ、小さな画面スペース内のプライマリ列のみが表示されます。

コンテキストを切り替えて、macOSでこの表をチェックしてみましょう。

すごく良さそうだね！

しかし、コンテキストについて言えば、テーブル内で一般的なアクションを実行するためのコンテキストメニューをいくつか追加したいと思います。

これは、新しい選択ベースのcontentMenu修飾子の仕事です。

修飾子は選択タイプを取り、選択をサポートする互換性のあるテーブルまたはリスト内で有効になります。

メニュービルダー内では、現在の選択のコレクションが与えられ、テーブルの空の領域をクリックするときなど、単一の選択された行、複数の選択された行、または選択されていない行で操作できる高度なコンテキストメニューを構築できます。

コンテキストメニューは、テーブル内のアクションを直接表示し、スピードと効率性に最適です。

しかし、私はまた、これらの行動をより発見可能にしたいと思います。

見つけやすさを向上させる素晴らしい方法は、ツールバーのボタンとして一般的なアクションを表示することであり、iPadOSには、その余分なレベルの磨きを達成するのに役立つ新しく改良されたツールバーデザインがあります。

iPadのツールバーは、macOSで利用可能な同じAPIである各ツールバーアイテムに明示的な識別子を提供することで、アプリが実装できるユーザーのカスタマイズと並べ替えをサポートできるようになりました。

これらの識別子により、SwiftUIはアプリの起動時にカスタムツールバー設定を自動的に保存および復元できます。

iPadOSでは、すべてのツールバー項目がカスタマイズを許可しているわけではないことに注意してください。

カスタマイズ可能なアクションは、デフォルトでツールバーの中央、またはコンパクトサイズのクラスのオーバーフローメニューに表示される新しいsecondaryActionツールバーアイテムの配置を使用して設定されます。

わかった！

その言葉は広まっており、出席者数は指数関数的に増加しているようです。

検索のサポートを追加して、テーブルがスケールを管理するのを手伝いましょう。

SwiftUIはすでに検索可能な修飾子による基本的な検索をサポートしています。

そして、今年の新しい検索フィールドは、より構造化された検索クエリを構築するのに役立つトークン化された入力と提案をサポートすることができます。

結果のフィルタリングを支援するために、SwiftUIは、macOSのツールバーの下にあるスコープバーに表示され、iOSのナビゲーションバー内のセグメント化されたコントロールとして表示される検索スコープをサポートするようになりました。

今年はiPadのSwiftUIで可能なことの表面を引っ掻いただけです。

「SwiftUI on iPad」シリーズをチェックして、詳細をご覧ください。

イベントの詳細とロジスティクスをもう少しコントロールできるようになったので、ニュースを共有し、人々をさらに興奮させましょう。

他の人とコンテンツを共有したり、アプリケーション間でデータを共有したりすることは、多くのアプリの重要な部分です。

これらの機能を利用すると、アプリを使用する人々のワークフローにさらに統合されます。

今年は、それをさらに簡単にするためのエキサイティングな分野がいくつかあります。

写真やビデオを選ぶための新しいマルチプラットフォームとプライバシー保護APIであるPhotosPickerから始めましょう。

写真はパーティーの不可欠な部分であるため、撮影した写真に楽しい誕生日効果を追加する機能をパーティープランナーアプリに追加しました。

新しいPhotoSPickerビューは、アプリのどこにでも配置でき、アクティベーション時に、ユーザーのライブラリから写真やビデオを選択するための標準の写真ピッキングUIが表示されます。

PhotosPickerは、選択したアイテムにバインディングを取り、実際の写真とビデオデータへのアクセスを提供します。

また、コンテンツの種類のフィルタリング、優先写真エンコーディングなど、追加の豊富な構成オプションもあります。

これは私が今まで見た中で最もフォトジェニックなカップケーキです。

しかし、カップケーキ1個では不十分です。

先に進みながら特殊効果を適用しましょう。

カスタマイズされた写真ができたので、新しいShareLink APIと共有する準備が整いました。

各プラットフォームには、人々があなたのアプリからコンテンツを共有できるようにするための標準的なインターフェースがあります。

watchOS 9では、ウォッチアプリ内から共有シートを表示することもできます。

新しいShareLinkビューでは、アプリ内からそのシステム共有シートを表示できます。

共有するコンテンツと共有シートで使用するプレビューを提供するだけで、標準の共有アイコンボタンが自動的に作成されます。

タップすると、コンテンツを送信するための標準の共有シートが表示されます。

共有リンクは、コンテキストメニューやプラットフォーム間など、適用されるコンテキストに適応します。

PhotosPicker、ShareLinkなどはすべて、アプリケーション間でタイプがどのように転送されるかを説明するSwiftファーストの宣言的な方法である新しいTransferableプロトコルを利用しています。

譲渡可能なタイプは、ドラッグアンドドロップなどのSwiftUI機能を強化するために使用され、他のアプリからパーティープランナーギャラリーに画像を簡単にドロップできます。

これは、ペイロードタイプ、この場合は画像のみを受け入れる新しいdropDestination APIを利用します。

完了ブロックは、ドロップ位置とともに受信した画像のコレクションを提供します。

文字列や画像などの多くの標準タイプは、すでにTransferableに準拠しています。

だから、私たちのアプリでボールを転がすのはあまり仕事ではありませんでしたが、あなたは簡単に物事をさらに進め、独自のカスタムタイプでTransferableを実装することができます。

それを行う時が来たら、コンフォーマンスは、コード可能なサポートやカスタムコンテンツタイプを使用するなど、タイプに適した表現を宣言します。

Transferable、その他の表現、高度なヒントやコツの詳細については、「Meet Transferable」トークをご覧ください。

私たちがカップケーキを準備している間、ニックはすべての供給をレイアウトしていました。

ニック、そっちはどう？

ニック：もうすぐだ！

私はこれらのパーティーホーンを完全にカスタムレイアウトで配置していますが、もう少し時間が必要です。

まずはグラフィックについて話しましょう。

ShapeStyleには、今年、豊かなグラフィカル効果を実現するための新しいAPIがあります。

これらのAPIを使用して、このゲストカードにパーティーポップを与えます!

色には、色から派生した微妙なグラデーションを追加する新しいグラデーションプロパティがあります。

これらはシステムの色によく似合います。

ShapeStyleはまた、新しいシャドウ修飾子を手に入れました。

白い前景スタイルに追加すると、テキストとシンボルに影が追加されます。

そして、この影の細部は注目に値します。

ドロップシャドウは、カレンダーシンボルのすべての要素に適用されています。

SFシンボルの全世界と新しいSwiftUI ShapeStyle拡張機能を使用すると、絶対にゴージャスなアイコンを作ることができます。

さて、SFシンボルのグリッドをパーティーに持ち込む時が来ました。

今年はいくつかの素晴らしい改善があるSwiftUIプレビューを使用して、すぐに反復します。

プレビューは、常に複数の構成で同時にビューを表示する便利な方法でした。

Xcode 14では、プレビューバリアントでこれをこれまで以上に簡単にしています。

これにより、構成コードを書くことなく、同時に複数の外観、タイプサイズ、または向きでビューを開発できます。

同じグラデーションを再度使用することも、楕円グラデーションとしてスタイル設定して、これらの画像に柔らかな輝きを与えることもできます。

そして、暗くて明るい外観でそれをプレビューします。

プレビューはデフォルトでライブモードで実行されるようになりました。

少し踊らなければ素晴らしい誕生日パーティーにはなれないので、これらのSFシンボルを踊らせましょう。

♪エレクトロニックダンスミュージック♪

♪

これらの陽気なアイコンは、深遠な何かを示しています。

SwiftUIは、テキストと画像のアニメーションを次のレベルに引き上げました。

そのテキストがスローモーションで再びアニメーション化されるのを見てみましょう。

テキストは、重み、スタイル、さらにはレイアウトの間で美しくアニメーション化できるようになりました。

そして、最良の部分:これは、SwiftUIの残りの部分で使用されているのと同じアニメーションAPIを利用します。

では、UIプログラミングの私の絶対的なお気に入りの部分、適用されたジオメトリ、または私たちがそれをレイアウトと呼ぶものについて話しましょう。

SwiftUIは、ビューをレイアウトする新しい方法を追加しました。

グリッドは、2次元グリッドでビューを配置する新しいコンテナビューです。

グリッドは、サブビューを前面に測定して、複数の列にまたがるセルを有効にし、行と列間の自動配置を有効にします。

実際、あなたはすでに以前にグリッドを見ました。

Grid、GridRow、およびgridCellColumns修飾子を使用すると、グリッドを断片的に構築できます。

もちろん、SwiftUIのすべてのレイアウトと同様に、コンポジション用に構築されています。

最初のリリースでSwiftUIのレイアウトモデルを導入し、最も一般的なレイアウトを実現するためのプリミティブなレイアウトタイプのツールボックスを提供しました。

ほとんどの場合、これらの原始的なレイアウトタイプで仕事を成し遂げることができますが、時には、時には、その命令的なレイアウトコードが必要です：サイズ、minX、frame.origin.xマイナスframe.midXを2プラス3で割った値。

新しいレイアウトプロトコルに手を伸ばす必要があるのは、このような時です。

それにより、独自のファーストクラスのレイアウト抽象化を構築するために、SwiftUIのスタックとグリッドを実装するために使用した完全なパワーと柔軟性が得られます。

レイアウトを使用して、私は誕生日パーティーのゲストのためにこのオーダーメイドの座席表レイアウトを構築しました。

私たちのパーティーのゲストは列やポッドに座るべきですか?

レイアウトの力で、私たちは選ぶ必要はありません。

レイアウトプロトコルを使用すると、ビュー階層の特定のニーズに合わせて、あらゆる種類の効率的なレイアウトを構築できます。

レイアウトを採用する方法やその他の新しい優れたレイアウトテクニックについては、「SwiftUIでカスタムレイアウトを作成する」セッションをチェックしてください。

私は特にあなたのためにレイアウトの味を用意しました。

新しいAnyLayoutタイプを使用すると、グリッドレイアウトと私が書いたカスタム散乱レイアウトを切り替えることができます。

このセッションが終わりに近づくにつれて、1つの驚きが残っています:あなたは招待されています!

♪

あなたは今週私たちと一緒にSwiftUIの誕生日とすべての新しいAPIを祝うために招待されています。

私たちが取り上げたAPIには多くの詳細が残っており、含める時間がなかったさらに多くのAPIがあります。

パーティーを楽しんで、WWDC 2022を楽しんでください。

そして、私たちはケーキを楽しむつもりです。

♪インストゥルメンタルヒップホップ音楽♪

♪