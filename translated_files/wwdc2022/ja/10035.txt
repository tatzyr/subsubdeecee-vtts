10035

エリック：こんにちは！WWDCへようこそ!

私の名前はエリックです。

私はマップチームのエンジニアです。

今日は、同僚のYingxiuと一緒に、MapKitの新機能について調査します。

Apple Mapsがまったく新しい地図と没入型のLook Around体験を導入してから3年が経ちました。

もともと米国の支援を受けて開始されたまったく新しいマップとLook Aroundのカバレッジは、それ以来拡大しており、現在はカナダ、多くのヨーロッパ諸国、日本などが含まれています。

昨年、アップルマップは、ターンレーン、横断歩道、自転車レーン、フェリービルディングのような美しく手作りされた3Dランドマークを特徴とする3Dシティエクスペリエンスを導入することで、物事を次のレベルに引き上げました。

地図の追加の詳細により、これまで不可能だったコンテキストと精度を提供でき、3D地形標高の追加は、他の地図にはないレベルのリアリズムを提供します!

今年、MapKitはAppleマップからの最新のイノベーションをアプリにもたらし、ユーザーが驚くべき詳細で世界を探索できるようにします。

この講演では、いくつかの新しいMapKit機能について説明します。

まず、まったく新しいマップを採用し、Map Configuration APIを使用して完全に活用することについて説明します。

次に、コンテンツをマップとシームレスに統合できるように、オーバーレイAPIのさまざまな改善について説明します。

また、新しいブレンドモードのサポートについても議論し、それを活用してマップコンテンツのプレゼンテーションをさらに強化する方法を紹介します。

次に、新しいSelectable Map Features APIを採用することで、マップをよりインタラクティブにする方法について説明します。

そして最後に、没入型のLook Around体験をアプリケーションに直接統合することについて説明します。

カバーすべきことがたくさんあるので、まったく新しいマップを採用し、Map Configuration APIを使用するという最初のトピックに向かうときにシートベルトを締めます。

iOS、macOS、またはtvOSアプリケーションでまったく新しいマップを採用することは、これ以上ないほど簡単です。

新しいSDKでアプリを再コンパイルするだけで、3Dシティエクスペリエンスを含むまったく新しいAppleマップに自動的にオプトインされます。

多くのアプリケーションでは、必要なのは簡単な再コンパイルだけです。

もちろん、地図の表示をもっとコントロールする必要がある状況があるかもしれません。

iOS 15では、マップの設定方法は、MKMapViewのさまざまなプロパティを介して行います。

しかし、iOS 16では、これらのプロパティをソフト非推奨にしており、代替として新しいMap Configuration APIを導入しています。

MKMapConfigurationは、新しいMap Configuration APIの中心クラスです。

MKMapConfigurationは、3つの具体的なサブクラスを持つ抽象基本クラスです。

画像マップの構成は、衛星スタイルの画像を表示するために使用されます。

ハイブリッドマップ構成は、道路標識や興味のあるポイントなどのマップ機能を追加した画像ベースのマップを表示するために使用されます。

標準のマップ構成は、完全にグラフィックベースのマップを表示するために使用されます。

これら3つの地図構成は、既存の地図タイプに似ているので、聞き覚えがあるかもしれません。

ベースマップ構成クラスは、フラットまたは現実的なelevationStyleプロパティをサポートしています。

平らな標高スタイルは、地面が平らに見えることを意味します。

橋や陸橋などの道路も平坦に見えます。

フラットはデフォルトの標高スタイルです。

現実的な標高スタイルは、地面の地形が丘や山などの現実世界の標高を再現することを意味します。

道路は現実的な標高の詳細で描かれている。

では、マップ設定のサブクラスを詳しく見てみましょう。

画像マップの構成は、追加のマップ機能のない衛星画像のみを表示するため、他のプロパティはありません。

ハイブリッドマップ構成には、ポイントオブインタレストカテゴリのフィルタリングと、トラフィックを表示するかどうかを制御するための追加のプロパティがあります。

標準のマップ設定は、デフォルトまたはミュートのいずれかの強調スタイルプロパティをサポートしています。

名前が示すように、特に明記されていない限り、これはデフォルトの強調スタイルです。

ミュートされた強調スタイルは、地図の詳細のコントラストを柔らかくし、上部に表示したい追加のグラフィカル情報にもっと注意を払うことができます。

標準マップ構成には、ポイントオブインタレストカテゴリのフィルタリングと、トラフィックを表示するかどうかを制御するための追加のプロパティもあります。

そして、それは利用可能なマップ構成クラスとそのプロパティをまとめたものです。

この新しいAPIは、サポートされているオプションの組み合わせのみを設定できることを保証します。

また、マップの設定を原子的に変更することもできます。

これは既存のAPIよりも大きな改善だと思います。

先ほど説明したことを要約すると、新しいマップ構成クラスとMKMapTypeプロパティの対応を示す表があります。

3Dシティエクスペリエンスを備えたまったく新しいマップには、互換性のあるハードウェアが必要です。

iOSでは、新しいマップサポートにはA12ベースのiPhoneとiPad以降が必要です。

macOSでは、新しいマップサポートにはM1ベースのコンピュータ以降が必要です。

3Dシティエクスペリエンスが利用できない地域では、マップは自動的にフォールバックして、平坦な標高でまったく新しいマップを提示します。

他のすべてのデバイスでは、まったく新しい地図は平らな標高で表示されます。

M1 Macでは、Xcodeを使用すると、OSのバージョンを変更するだけで両方の体験をシミュレートできます。

アプリがすべてのデバイスで見栄えを良くするために、両方を試してみることをお勧めします!

3Dシティエクスペリエンスは、世界中の多くの大都市圏で利用できます。

このリストに新しい都市を継続的に追加しているので、セッションノートにリンクされている機能可用性Webサイトの3Dシティエクスペリエンスセクションをチェックすることをお勧めします。

これで、まったく新しいマップの採用とMap Configuration APIの使用に関するセクションは終了です。

では、オーバーレイに飛び込みましょう。

MapKitは何年もの間、いくつかのスタイリングオプションでオーバーレイをサポートしてきました。

iOS 16では、既存のAPIを改善して、オーバーレイをマップとシームレスに統合できるようにしています。

オーバーレイレベルの簡単な要約から始めましょう。

オーバーレイは、道路の上とラベルの上の2つの異なるレベルでレンダリングできます。

MapKitの多くのオーバーレイ挿入機能の1つを使用して、挿入時のレンダリングレベルを指定できます。

上記のラベルは、ラベルを含むすべてのものの上にオーバーレイをレンダリングします。

ラベルは重要なコンテキスト情報を提供するため、データがマップとまったくやり取りしたくないまれな場合にのみ、上記のラベルを使用することをお勧めします。

あなたが達成しようとしているのは、コンテンツがマップに対して目立つことである場合は、ミュートされたマップ強調またはブレンドモードの使用を検討することをお勧めします。

上記の道路は、オーバーレイが道路、土地被覆、または水域を含む地形の上に表示されることを意味します。

ただし、ラベルの下に表示され、ある程度は木や建物が表示されます。

それについては、すぐにもっと。

上の道路は、iOS 16の新しいデフォルトモードになります。

次に、iOS 16で導入する透明な建物と呼ばれる新機能について話しましょう。

オーバーレイレベルが道路の上かラベルの上かにかかわらず、ピッチなしでトップダウンで見ると、オーバーレイは常に建物の上にレンダリングされます。

しかし、ピッチマップと組み合わせて上記の道路を使用する際の体験にいくつかの改善を加えました。

木や建物などの地上オブジェクトは、オーバーレイの上に表示されるときに自動的に透明でレンダリングされ、それらを完全に隠すことはありません。

アルファ値は、マップのピッチ角度によって異なります。

0ºピッチの角度で地図をトップダウンで表示することに戻ると、衝突する地面の物体は事実上視界から消え、オーバーレイが完全に見えます。

透明な建物は、半透明のオーバーレイにも機能します。

オーバーレイのアルファ値は、透明な建物のアルファ値と組み合わせるために追加されます。

オーバーレイにもう1つの変更があります。

現実的な地形を持つ地図にオーバーレイを追加すると、MapKitは自動的に地図を平らな表現に移行します。

最後のオーバーレイを削除すると、マップは自動的にリアルに戻ります。

このルールの注目すべき例外の1つは、MapKitの方向APIを介して供給されたオーバーレイです。

これらのオーバーレイは自動的に地形に従います。

そしてそれで、私はそれをYingxiuに引き渡すつもりです。

Yingxiu:ありがとう、エリック。こんにちは！私はYingxiuです。

私はマップチームのエンジニアです。

新しいMapKit機能を実演し、更新されたAPIで美しいマップ体験を構築するのがいかに簡単かをお見せします。

私は、ユーザーがサンフランシスコをツアーするためにスクーターを借りるのに役立つサンプルアプリを使用します。

私たちのアプリは、このテーブルビューの行に示すように、多くの機能を提供しています。

「オペレーティングエリア」を使用すると、ユーザーはスクーターをどこに持って行けるかを確認できます。

「ライド」は、ゴールデンゲートブリッジを渡るツアーにユーザーを連れて行きます。

「Explore」は、ウォーターフロント近くのアトラクションを探索するために使用できるサンフランシスコのダウンタウンのインタラクティブマップをユーザーに提供します。

「ハイライト」では、必見の場所を詳しく見ることができます。

このセッションでは、これらの機能を実装またはアップグレードします。

始めましょう！

まず、オペレーティングエリア機能を使用して、まったく新しいマップの採用がいかに簡単かを示し、次にオーバーレイに対して行った改善点をいくつか紹介します。

私はすでにXcodeでプロジェクトを開いています。

iOS 16 SDKでコンパイルして、どのように見えるか見てみましょう。

着きました！

私たちはすでにまったく新しい地図にオプトインしています。

私たちは、これらの美しい照明や地形の丘の陰影効果を含む、豊富な詳細を持つマップビューを取得します。

ズームインすると、建物や木々が見えます。

...そしてランドマーク。

では、ポリゴンオーバーレイを追加して、操作領域を視覚化しましょう。

ここでは、すでに操作エリアのポリゴンデータの準備ができています。

ビューが読み込まれたら、まず領域とカメラの境界を設定します。

正しい領域を見るようにしてください。

次に、オーバーレイを追加するだけです。

それを構築し、それをチェックしましょう!

ポリゴンオーバーレイはまっすぐ下に見ると不透明です。

ズームインしてピッチングすると、建物が表示され始め、さらにピッチングするにつれて透明性が高まります。

この効果は、オーバーレイレベルのAboveRoadsを使用する場合にのみ使用できます。

透明な建物や木を活用したい場合は、正しいオーバーレイレベルを選択してください。

オーバーレイは素晴らしく見えますが、ピッチングされていなくても地図を表示したいです。

コードに戻って半透明にしましょう。 半透明にしましょう。

アルファを0.8に変更しましょう。

今、私たちは透明なオーバーレイを持っており、私はピッチングされていない場合でも道路や建物を見ることができます。

ズームインして地図を投げても、透明度が上がります。

これは素晴らしく見えます!

ポリゴンオーバーレイは以上です。

次に、現実的な地形を統合し、高架ルートラインを追加する方法を紹介したいと思います。

これにより、ゴールデンゲートブリッジを渡るツアーである「ライド」機能が完成します。

マップビューを設定することから始めましょう。

コードの標高スタイルを変更することも、右側のInterface Builderインスペクタを開くこともできます。

利用可能なマップビューの構成設定は次のとおりです。

現実的な標高を選択しましょう。

次に、ルートに取り組みましょう。

この機能では、ユーザーがルート表示スイッチを切り替えたときにルートを表示したいと考えています。

また、ルートに焦点を合わせるためにカメラをアニメーション化します。

ゴールデンゲートブリッジを渡るルートを表示したいので、プレシディオパークのエントリを出発点として、バッテリースペンサーをエンドポイントとして使用します。

マップビューが読み込まれたら、開始点と目的地点をマークする注釈を作成します。

座標とタイトルを設定し、注釈配列に追加してから、マップビューに追加します。

今、私たちはルートポリラインに集中することができます。

通常のオーバーレイは地図を平らにしますが、MapKitのDirections APIによって返されたポリラインは現実的な地形を維持します。

このアクション機能では、スイッチをオンにすると、上記で定義された座標でプレースマークを作成します。

次に、送信元と宛先を含む方向要求を作成します。

最後に、私たちは道順を要求します。

フェッチ操作が成功したら、ルートポリラインをオーバーレイとして追加するだけです。

わかった。

それをコンパイルして、それがどのように見えるか見てみましょう!

注釈が自動的に新しいグラデーションの外観にアップグレードされることに気づくでしょう。

また、正しい標高でシームレスに表示されます。

ショーのルートを切り替えると、カメラがピッチします。

その後、あなたはそれらをよりよく見ることができます。

ご覧のとおり、ルートラインは高架地形をたどります。

これは、複雑な交差点をナビゲートするときに便利です。

また、橋を渡る道をたどります。

また、ルートが橋の柱を通して微妙にどのように見えるかに注目してください。

最後に、地図が本当に傾斜しているとき、あなたはその前に立っている木々を通してルートショーを見ることができます。

さて、見て、ルートラインの色は木がないここで洗い流されています。

ズームアウトして、ここで何が起こっているのか見てみましょう。

さて、ルートのこの部分はトンネルを通過するので、透明性を得ることができます。

ElevationRealisticStyleと高架ルートライン機能は、A12ベースのiOSデバイスでサポートされています。

古いiOSデバイスで同じアプリを実行すると、2Dマップで自動的に2Dルートを取得します。

3D都市体験マップに高架ルートラインを追加するのはとても簡単です!

それで、私はそれをエリックに返します。

エリック:ありがとう、Yingxiu!

ゴールデンゲートブリッジを渡るそのスクーターの乗り物は絶対に見事に見えます!

だから、それはMapKitオーバーレイの新機能のほんの一部です。

次に、ブレンドモードについて話しましょう。

この新しいAPIを使用すると、オーバーレイのルックアンドフィールをより詳細に制御し、さまざまな新しい創造的な可能性を解き放ちます。

多くの人がすでに写真編集アプリやAppleのCoreGraphics APIのブレンドモードに精通していると思います。

ブレンド操作中、ブレンドモードで指定された一連の方程式に従って、2つのグラフィカルレイヤーが組み合わされます。

では、MapKitのコンテキストでブレンドモードを使用する方法の例を見てみましょう。

このシナリオでは、この地図の中央にあるサンフランシスコのプレシディオ国立公園のエリアを強調したいと思います。

まず、プレシディオの形をした切り抜きで、マップエリア全体をカバーするオーバーレイを作成します。

私はまだブレンドモードを使っていません。

これは、大きな四角いドーナツの形をしたプレーンなオーバーレイです。

次に、グレーの塗りつぶしで、色相ブレンドモードをオーバーレイに割り当てます。

これにより、プレシディオの外側の地図が不飽和になります。

次に、そのオーバーレイを複製し、ダークグレーの塗りつぶしでハードライトブレンドモードを割り当てます。

これは、プレシディオ周辺の領域を暗くする効果があります。

これはすでに素敵に見えますが、別のオーバーレイを追加しましょう。

今回は、プレシディオの形をしたオーバーレイを追加し、黄色の塗りつぶしで彩度ブレンドモードを割り当てます。

うわー、それは私がここで目指していた効果ではありません。

色が明るすぎます。

何か他のものを試してみましょう。

グレーの塗りつぶしでカラーバーンブレンドモードを適用します。

そこでは、それはもう少し微妙です。

完璧！

さて、いくつかのコードを見てみましょう。

先ほど見たような効果を有効にするために、MKOverlayRendererにblendModeというプロパティを追加しました。

オーバーレイレンダラーに目的のCoreGraphicsブレンドモードを設定するだけで完了です!

前述のように、ブレンドモードは順序に依存します。

スタックの下部にあるオーバーレイはマップとブレンドされ、2番目から最後のオーバーレイは前のブレンド操作の結果とブレンドされます。

MapKitでは、オーバーレイの順序は挿入時に決定されます。

MKMapViewの多くのオーバーレイ挿入機能の1つを使用して、絶対位置または相対位置のいずれかを使用できます。

MapKitは幅広いブレンドモードをサポートしており、今日ではそれらすべてをカバーすることはできません。

私はあなたがそれらを試してみることをお勧めします。

そして、それはブレンドモードのためのものです!

先ほど見たように、ブレンドモードはマップのスタイリングを制御する強力なツールです。

地理的な地域を強調したり、地図を強調してコンテンツを目立たせたりするために使用できます。

次に、選択可能な地図機能について話しましょう!

これは非常に要求された機能であり、私はあなたにそれを見せることに本当に興奮しています!

今日アプリでMapKitを使用している場合は、注釈を活用して都市、興味のある場所、または物理的なオブジェクトを表示している可能性があります。

POIフィルタリングを使用していない限り、すでにAppleが提供する多くの同様の注釈を含む地図上にそれらの注釈を配置しています。

これまで、ユーザーはあなたが提供した注釈としかやり取りできませんでした。

iOS 16では、それを変えます。

新しい選択可能なマップ機能APIを使用すると、ユーザーがマップ上の機能を選択できるようにするオプションが可能になります。

選択可能な地図機能には、店舗、レストラン、ランドマークなどの興味のある場所、都市や州などの領土、山脈や湖などの物理的な特徴が含まれます。

アプリで選択可能なマップ機能を採用するには、いくつかの簡単な手順を実行するだけです。

まず、どの機能タイプを選択可能かを設定します。

先ほど見たように、3つの主要な機能タイプがあり、それらのすべてがアプリのコンテキストでインタラクティブであることは意味をなさないかもしれません。

ポイントオブインタレスト機能については、既存のフィルターAPIを使用して、どのポイントオブインタレストカテゴリが表示され、したがって選択可能かをさらに制限することもできます。

次に、選択イベントを処理するためにMKMapViewデリゲートコールバックを実装します。

これらのイベントは、あなたが選択した方法で自由に処理できます。

選択した機能の表示方法を制御するか、選択イベントに応じて追加のUIを表示したい場合があります。

第三に、アプリケーションのユーザーインターフェイスで追加の場所情報を要求して表示したいと思うでしょう。

地図機能に埋め込まれた情報は、画面に表示されるものに限定されています。

ユーザーが選択した場所に関するより多くのコンテキストを提供するには、追加情報をリクエストする必要があります。

これらの各ステップの新しいAPIについて説明しましょう。

新しいselectableMapFeaturesプロパティを使用して、どのマップ機能を選択可能かを設定することから始めます。

興味のあるポイント、領土、物理的な特徴の任意の組み合わせを選択できます。

選択可能なマップ機能を設定し、ユーザーがそれらの機能の1つをタップすると、選択動作をカスタマイズできる新しいデリゲートコールバックの受信が開始されます。

最初に得られるコールバックは、新しいdidSelectアノテーションコールバックです。

このコールバックは、すぐに取り上げる新しいリクエストAPIを使用して、マップアイテムに関する追加データをリクエストする絶好の機会です。

2番目のコールバックは、既存のviewForアノテーションコールバックです。

ここでは、選択した状態に表示されるビューをカスタマイズできます。

これは既存のAPIですが、MapFeatureAnnotationという新しいタイプのアノテーションクラスを追加しました。

このクラスは、ユーザーがマップ機能を選択すると、注釈のビューに渡されます。

MapFeatureAnnotationにはいくつかのプロパティがあります。

FeatureTypeプロパティを調べて、マップ機能が興味のあるポイント、テリトリー、または物理的な機能であるかどうかを判断できます。

マップ機能が興味のあるポイントである場合、pointOfInterestCategoryプロパティはそのカテゴリが何であるかを知らせ、iconStyleプロパティを使用すると、背景色やアイコン画像自体など、アイコンに関する追加情報を取得できます。

viewForアノテーションコールバックを使用してアノテーションビューをカスタマイズする方法の例を見てみましょう。

マップアプリと同じ選択スタイルを実現したい場合は、nilを返すだけです。

選択スタイルをカスタマイズしたい場合は、独自の注釈と同じように、annotationViewを返すことができます。

markerAnnotationViewは素晴らしいオプションです。

マップアプリと同じバルーンスタイルの形状、グラデーション処理を行い、独自の色やアイコンを選択できます。

ここでの例では、機能のアイコンスタイルから得られた同じ画像を使用し、アプリケーションの色合いの色に合わせて色のみを変更することを選択しました。

完全にカスタムにしたい場合は、作成した注釈ビューのサブクラスを提供できます。

先ほど見たように、機能アノテーションを使用して、選択した機能に関する視覚的な情報を取得できます。

機能アノテーションを新しいMKMapItemRequest APIに渡すことで、選択した機能のマップ項目を取得することもできます。

このマップ項目には、住所、名前、電話番号、URLなど、場所に関する追加のメタデータが含まれています。

マップ項目は、ユーザーがMapKitでは利用できない追加のメタデータを表示したい場合は、マップアプリにパンチアウトする機能も提供します。

そして今、私は再びそれをYingxiuに引き渡します。

Yingxiu:ありがとう、エリック。

エリックは、選択可能なマップ機能を案内しました。

そのAPIを活用するのがいかに簡単かをお見せします。

そのために、Explore機能を実装します。

私たちは、ユーザーがウォーターフロントの近くのいくつかの興味深い場所を探索できるようにしたいと考えています。

POIをタップすると、注釈が表示されるはずです。

タップされた場所にカメラアニメーションを実行し、下から情報カードを表示します。

まず、地図上で興味のあるポイントをフィルタリングし、ツアーとは無関係なカテゴリを削除しましょう。

コードにフィルターを適用するだけでなく、Interface Builderインスペクタでも適用できます。

マップビューを選択し、右側のインスペクタに移動しましょう。

ここでは、除外フィルターを行います。

空港、レンタカー、病院、ランドリーなど、望まないカテゴリを選択します。

今、私たちはマップビューで興味のあるポイントだけを望んでいるはずです。

選択可能なマップ機能を有効にするのはとても簡単です。

必要なのは、目的の選択可能な機能のオプションセットを指定することだけです。

このサンプルアプリの範囲では、興味のあるポイントを使用するだけですが、選択可能な物理的な機能と領域もサポートしていることに注意してください。

既存のデリゲートメソッドmapView viewForAnnotationを使用して、機能アノテーションのビューを作成できます。

ここでは、今のところゼロを返します... 

MapKitが提供するデフォルトのグラデーションアノテーションを使用するには。

私たちは後でそれをカスタマイズするために戻ってきます。

アノテーションが選択された状態にある場合は、新しいデリゲートメソッドmapView didSelectAnnotationを通じて通知されます。

この機能を使用して、カメラのアニメーションを実行し、選択した機能を拡大しましょう。

まず、アノテーションをfeatureAnnotationにキャストし、それを使ってマップアイテムリクエストを作成しましょう。

これは、機能アノテーションで追加の場所情報を取得するための新しいAPIです。

リクエストを発行しましょう。

フェッチ操作が成功したら、マップアイテムにアニメーション化します。

カメラのアニメーションが完了したら、フィーチャーアイテムから詳細を取得し、情報カードに表示します。

それをコンパイルして、それがどのように見えるかを見てください。

ウォーターフロントの面白い場所をチェックしてみましょう。

グラデーションアノテーションが表示されます。

カメラはタブの場所にアニメーション化されます。

その後、情報カードが表示されます。

これは博物館です。

これがURLです。

興味があればチェックできます。

そして、私たちは完全な住所を取得します。

それがランドマークであれば、私たちはこの美しい図像を得るでしょう。

では、コードに戻り、選択状態の注釈をカスタマイズしましょう。

nilの代わりに、MarkerAnnotationViewを作成しましょう。

最初にアノテーションをfeatureAnnotationにキャストするので、そこから特定のデータを使用してビューをカスタマイズできます。

私たちのコーポレートアイデンティティに沿って、注釈を紫っぽい色で染めましょう。

注釈グリフをカスタマイズすることもできます。

SelectedGlyphImageは、選択された状態の注釈用です。

GlyphImageはより小さいです。

これは、未選択状態の注釈のグリフです。

未選択状態から選択状態へのスムーズな移行のために、同じグリフを割り当てることをお勧めします。

featureAnnotationから得たアイコンスタイルの画像を使おう。

MKIconStyleはiOS16の新しいクラスです。

選択したPOIの図像と色情報があります。

コンパイルして、アプリでどのように見えるかを確認してください。

どうぞ！

今、私たちは会社の色に一致する注釈を持っていますが、それでもAppleの図像を使用しています。

それが、選択可能なマップ機能を有効にし、独自のアプリで注釈をカスタマイズする方法です!

それで、私はそれをエリックに返します。

エリック:ありがとう、Yingxiu!

先ほど見たように、Selectable Map Features APIを使用すると、ユーザーはまったく新しい方法で地図と対話できます。

MapFeatureAnnotationクラスは、MapViewデリゲートコールバックと組み合わせて、選択のルックアンドフィールをカスタマイズできますが、MapItemRequestを使用すると、マップアイテムに機能を解決できるため、選択したマップ機能に関する追加情報にアクセスできます。

次に、周りを見回すことについて話しましょう!

マップアプリはiOS 13でLook Aroundを導入し、人々はそれを絶対に愛しています。

Look Aroundを使用して、場所の本当の感覚を得ることができます。

Look Around画像は、信じられないほどのレベルのディテールを提供し、3Dモデルを活用して、他の地図にはないレベルのリアリズムを提供します。

Look Aroundは、これらの都市や国全体を含む世界中の多くの場所で利用可能です!

新しい地域のサポートを継続的に追加しているので、セッションノートにリンクされている機能可用性WebサイトのLook Aroundセクションをチェックすることをお勧めします。

iOS 16では、Look AroundをMapKitに導入し、それを採用するには3つの簡単なステップしかかかりません。

まず、目的の場所でデータが利用可能かどうかを確認する必要があります。

Look Aroundがターゲット地域で利用可能であっても、すべての場所が通りから見えるわけではないため、Look Around画像が常に利用できるとは限りません。

Look Aroundデータが利用可能かどうかを決定したら、そのデータをLook Around View ControllerまたはLook Around Snapshotterに渡す必要があります。

そして最後に、Look Aroundデータが利用可能な場合は、Look Aroundプレビューを表示するようにアプリのUIを更新する必要があります。

これら3つの簡単なタスクを達成するために使用する新しいAPIを見てみましょう。

Look Aroundプレビューを表示しようとする最初のステップは、データの可用性を確認することです。

このためには、iOS 16で導入する新しいクラスであるLookAroundSceneRequestを作成する必要があります。

座標またはマップ項目のいずれかを使用して、新しいインスタンスを初期化できます。

次に、そのシーンプロパティを取得する必要があります。

これはオプションの非同期プロパティです。

データが利用可能な場合は、シーンインスタンスが戻ってきます。

データが利用できない場合は、代わりにnilが返されます。

また、リクエストに問題が発生した場合は、エラーがスローされます。

Look Around Sceneは、プロパティのない不透明なオブジェクトです。

これは、要求された場所のLook Around画像の可用性を保証するトークンとして機能します。

Look Aroundシーンのインタラクティブなプレビューを表示するには、シーンを新しいLook Around View Controllerインスタンスにinitパラメータとして渡すか、既存のインスタンスの読み取り書き込みシーンプロパティに割り当てるだけです。

または、静的画像だけが必要な場合は、シーンをinitパラメータとして新しいLook Around View Snapshotterインスタンスに渡し、その後スナップショット非同期プロパティを取得することもできます。

Look Aroundビューコントローラーは、Look Around画像の小さな静的プレビューをできるだけ簡単に埋め込むように設計されています。ユーザーはタップしてフルスクリーンのLook Aroundインタラクティブセッションに入ることができます。

そして今、私たちはそれをもう一度Yingxiuに引き渡して、彼女がそれをすべてまとめるのがいかに簡単かを私たちに示すことができます。

Yingxiu:ありがとう、エリック。

エリックは、MapKitにやってくる没入型のLook Around体験サポートを見せてくれました。

サンプルアプリに統合するのがいかに簡単かをお見せします。

そのために、最後の機能であるハイライトに進みます。

ユーザーは必見の場所の現実的なビューを得ることができます。

画面上部のセグメントコントロールバーには、すでにサンフランシスコのランドマーク名がいくつかあります。

ユーザーがそのうちの1つをタップすると、タップされた場所にカメラアニメーションを実行したいと考えています。

また、左下にLook aroundプレビューを表示し、ユーザーはフルスクリーンに展開できます。

やりましょう！

まず、Look Aroundプレビューのコンテナビューを追加する必要があります。

サイズ検査官に行きましょう。

位置とサイズを与えましょう。

最初にこのプレビューを非表示にしたいので、属性インスペクタを開いて非表示をチェックしましょう。

次に、Look Aroundビューコントローラーを作成する必要があります...

そして、それをコンテナビューに埋め込みます。

他のセグエと同じように、識別子を与える必要があります。

それを「presentLookAroundEmbedded」と呼びましょう。

そして、後で可視性を更新できるように、それをコードにインポートします。

「プレビュー」と名付けましょう。

ここでは、すでにLookAroundViewControllerが宣言されています。

Prepare関数でインスタンスを取得するだけです。

セグエ識別子が一致していることを確認してください。

次に、セグメント制御機能で、ランドマーク名でローカル検索を作成します。

リクエストが成功すると、次のカメラアニメーションとLook Aroundシーン検索で使用されるマップアイテムを取得します。

カメラアニメーションの場合、まず新しいAPIでカメラを作成する必要があります。

マップアイテムを見ているマップカメラ。

ビューサイズにマップビューのフレームサイズを使用し、許可ピッチをtrueに設定しましょう。

これにより、ランドマークへのピッチビューと他の場所へのトップダウンビューが得られます。

新しいカメラを割り当てます。それでおそれ。

カメラのアニメーションが完成したら、Look Aroundのプレビューを表示します。

まず、Look Aroundデータがこのマップ項目で利用可能かどうかを判断する必要があります。

これを行うには、新しいLookAroundSceneRequestクラスを使用する必要があります。

リクエストを作成して、マップアイテムを渡しましょう。

次に、リクエストを実行します。

シーンリクエストが成功したら、シーンをLookAroundViewControllerに割り当てるだけです。

エラーがないが、シーンのnilを取得する場合は、Look Aroundデータがリクエストされた場所で利用できないことを意味します。

最後に、プレビューを表示することを忘れないでください。

アプリでどのように見えるか見てみましょう!

フェリービルディングで試してみましょう。

ほら。

フェリービルディングはランドマークなので、この素晴らしいキュレーションされたカメラがヒーローアングルにフレーミングされ、Look Aroundプレビューが表示されます。

別の場所、ドラゴンゲートで試してみましょう。

ドラゴンゲートはランドマークではないので、トップダウンビューが表示されます。

プレビューをタップしてフルスクリーンに入りましょう。

インタラクティブなビューなので、ナビゲートできます。

私はまた、ルックアラウンドフルスクリーンビューで店舗のためのこれらの美しいアイコンとラベルを取得します。

あなた自身のアプリで没入型のLook Around体験を追加するのはとても簡単です。

それで、私はそれをエリックに返します。

エリック:ありがとう、Yingxiu!

Look AroundのInterface Builderのサポートは、それをとても簡単に見せます!

そのため、今日、まったく新しいマップと新しいマップ構成APIの自動採用、オーバーレイの新しい動作と進歩から、選択可能なマップ機能やLook Aroundサポートなどのまったく新しい機能まで、多くのトピックを取り上げました。

アプリの地図体験を次のレベルに引き上げるために使用できる多くのことに同意すると思いますし、あなたがそれで何を成し遂げるかを見るのが待ちきれません。

私が行く前に、あなたに残したいことがいくつかあります。

いつものように、あなたのフィードバックは、私たちが次に焦点を当てることに優先順位を付けるのに役立ちますので、フィードバックアシスタントを使用して、バグレポートとアプリに最も役立つ機能を送信してください。

さらに、先ほど説明したことを組み込むために、既存のサンプルの多くを更新しました。

私たちはあなたがそれらをチェックアウトすることをお勧めします。

そして最後に、あなたが見てみたいと思う新しいREST APIのセットを発表しました。

これらのAPIは、ジオコーディング、ETA決定などの一般的な呼び出しをサーバーに移動したい人にとって本当に役立つと思います。

詳細については、「Meet Apple Maps Server APIs」というタイトルのセッションを必ずチェックしてください。

マップチームを代表して、見てくれてありがとう...

両方:そして、素晴らしいWWDCを!

。