110375

♪インストゥルメンタルヒップホップ音楽♪

こんにちは、私の名前はジョンで、Xcode Cloudチームのエンジニアです。

そして、私はXcode Cloudチームのデザイナー、ジョー・リンです。

今日は、5人のチームであろうと500人のチームであろうと、チームの一員としてXcode Cloudを使用しているときに非常に役立つXcode Cloudの機能のいくつかを見ていきます。

そして、Xcode Cloudをチームの一員として使用するときにうまく機能する他の機能やベストプラクティスをいくつか共有します。

今日のセッションでは、他のセッションでも取り上げられているいくつかのトピックについて詳しく説明します。

Webhookやその他の高度なワークフローのトピックについて詳しく知りたい場合は、「高度なXcode Cloudワークフローをカスタマイズする」セッションをチェックしてください。

このセッションでは、Xcode Cloudを毎日使用する既存のツールやテクノロジーに統合し、コードの依存関係を簡単に管理し、アプリを効果的に継続的に構築、テスト、配布するためのワークフローを設定するのに役立つXcode Cloudのベストプラクティスを紹介します。

始めましょう。

Xcode Cloudを既存のツールに統合するには、いくつかのオプションがあります。

Webhooksを使用すると、それらをサポートするツールやサービスと簡単に統合できます。

Webhookを送信するURLをXcode Cloudに指示することで、App Store ConnectでWebhookを接続することができ、それらのWebhookがすぐに入ってくるのを見始めるはずです。

また、当社のAPIにより、ビルドを大量に可視化できるため、ビルドダッシュボードを簡単に作成したり、ビルドアーティファクトを抽出したり、今日の例では、ビルド情報を既存のソフトウェアに統合したりできます。

私たちはフードトラックアプリの新機能をたくさん構築してきましたが、新しいバグも発見しており、一緒にアプリに取り組んでいる人々のチームがいるので、誰が何に取り組んでいるのかを理解するのは難しいと感じました。

この問題を解決するために、イシュートラッカーを使用して、アプリで行われているすべての作業を追跡することにしました。

イシュートラッカーを使用している場合は、多くの場合、このようなビューがあります。

問題トラッカーの一般的なワークフローは、チケットを作成し、デザイナーや開発者にそのチケットに取り組んでもらい、最後に機能やバグが完了したら閉じることです。

問題トラッカーに実際のビルド情報を表示すると、すべての点をつなぐのに大きな助けになります。

今、それをどのように行うことができるかを見てみましょう。

ここでの私たちの計画は、イシュートラッカーをXcode Cloudと統合するために必要なすべてを処理する、非常にシンプルなSwift On Serverベースのサービスを作成することです。

開発をスピードアップするために、Vapor Webフレームワークを使用して、Webhook処理コードの作成に集中します。

基本的な流れはこんな感じになります。

WebhookはXcode Cloudから当社のサーバーに来ます。

そのWebhookを読み、コミッターによって書かれたコミットメッセージに、トラッカーの問題にマップする特定の文字列があるかどうかを確認します。

その場合は、Xcode Cloud APIを使用して、ビルドに関する詳細情報を収集します。

次に、関心のある情報を含むイシュートラッカーに投稿できるコメントを作成します。

その後、問題トラッカーでAPIを呼び出すと、問題に対するメッセージが保存されます。

まず、Xcode Cloud APIのドキュメントを見てみましょう。

すべてのXcode Cloud APIは、App Store Connect APIの下にあります。

App Store Connect APIの認証トークンをすでに設定している場合は、Xcode Cloudデータにもアクセスするために必要なものがすべて揃っています。

Build Runsコレクションを開くと、ビルドと対話できるエンドポイントがいくつか見えます。

エンドポイントを呼び出すと、ビルドを作成したり、ビルドをキャンセルしたり、特定のビルドに関する詳細情報を取得したりできます。

たとえば、ビルドのステータスを表示するダッシュボードを構築したい場合は、Ci_Build_Runsエンドポイントが呼び出す必要があるすべてである必要があります。

次に、ドキュメントのアーティファクトコレクションを見てみましょう。 アーティファクトコレクションを見てみましょう。

ワークフローでは、ビルドアーティファクトをXcode Cloudの外部に保ちたいとしており、APIにはそれを行うために必要なすべてが揃っているはずです。

まず、ビルドアクションエンドポイントからアーティファクトIDを取得できます。これにより、特定のアクションに対して生成されたすべてのアーティファクトが返されます。

次に、ci_artifactを呼び出すと、downloadUrl属性でアーティファクトをダウンロードするために必要なURLが表示されます。

まず、App Store ConnectのドキュメントからopenAPI仕様をダウンロードし、APIのクライアントを作成するために必要なものを見てみましょう。

クライアントコードを作成できる新しいディレクトリを作成しましょう。

私はこれをxcodecloud-clientと呼びます。

次に、ジェネレータのコマンドラインツールをダウンロードする必要があります。

openAPIのウェブサイトでこれを行う方法はたくさんあります。セッションでは、すでに設定しました。app_store_connect_APIから入手したばかりのopenAPI仕様をディレクトリにコピーしましょう。

素晴らしい、これでopenAPIジェネレータを呼び出すことができ、API用の迅速なクライアントを作成するように指示できます。

発電機が稼働している間、それが何をしているかについてすぐに話すことができます。

openAPI仕様は、APIを構成するすべてのパスとモデルに関する情報で構成されています。

ジェネレータは、各APIパスを通過し、強く型付けされたswiftオブジェクトを使用して、その特定のパスと通信できるSwiftコードを生成します。

ほとんどの場合、これはJSONエンコーディングやデコードを行う必要がないことを意味します。

素晴らしい、私たちのジェネレータは完成したので、作成したファイルを簡単に見てみましょう。

便利なことに、クライアントコードはSwiftパッケージです。

これにより、イシュートラッカーを更新するWebhookサーバーに含めるのが本当に簡単になります。

これで、コードを新しいgitリポジトリにコミットし、これをSwiftパッケージとして参照することができます。

APIと話し合うために必要なものがすべて揃ったので、Webhookを設定しましょう。

App Store Connectでは、ビルドが完了するたびにサーバーに知らせるWebhookを登録できます。

これを行うには、App Store Connectで製品に移動し、設定に移動し、Webhooksに移動します。

そして、サーバーのURLを貼り付けます。

これにより、Xcode CloudはWebhookの送信先を知ることができます。

私たちのウェブフックが設定されているので、残っているのはそれらを処理するためのコードを書くことだけなので、それを始めましょう。

まず、Webhookから関心のあるフィールドに一致する構造体を定義する必要があります。

Webhookには、実行されている特定のビルドと実行されている各アクションに関する情報が含まれているので、それらをWebhookペイロード構造体に入れておきましょう。

次に、Vaporが着信Webhookを関数に正しくルーティングするためのコードを作成する必要があります。

Webhookパスへのポストリクエストで実行される関数を定義します。

この関数の中で、着信JSONペイロードを強く型付けされたSwiftオブジェクトに変換するために必要なのは、それをデコードすることだけなので、そのコードも追加します。

素晴らしい、今私たちがする必要があるのは、Xcode Cloud APIを呼び出すだけで、完了したばかりのビルドについてもう少し情報を入手して、イシュートラッカーページに含めることができます。

Webhookペイロードには、実行されたばかりのビルドと、どのアクションが成功または失敗したかに関する多くの情報が含まれています。

私たちはおそらくそこで止まることができますが、それを次のレベルに引き上げましょう。

各アクションでどの問題が見つかったかについての情報も含めると素晴らしいと思います。

CiBuildActionsAPIに拡張関数を書くことで、特定のアクションに関心のある問題を簡単に返すことができます。

この拡張機能では、ビルドアクションIDをパラメータとして取り、特定のアクションで見つかったすべての問題を返す関数を記述します。

私はすでに私のプロジェクトにこれを持っていますが、残りのコードを記入しましょう。

ビルドが完了した場合のみ、Webhookハンドラを実行させたいので、それを防ぎましょう。

次に、コメント文字列の作業を開始できます。

ビルド番号、コミットハッシュ、およびこの文字列に著者があるのは素晴らしいことだと思います。

それでは、各アクションを実行し、拡張機能を呼び出すと、各アクションの問題を取得します。

今、これをすべてイシュートラッカーに伝えましょう。

これらすべての情報で、これは問題トラッカーをビルドで最新の状態に保つのに役立つと思います。

そして、私たちは終わりました!

この時点で、Webhooks用にXcode Cloudに提供したURLでサーバーコードをホストし、イシュートラッカーでXcode Cloudのビルド情報を表示し始める必要があります。

これまでに学んだことを簡単にまとめましょう。 

Xcode Cloudには、既存の開発ワークフローとさらに深く統合するために使用できる優れたAPIがあります。

そのAPIとWebhookを使用して、すべての点を接続し、既存のツールやテクノロジーをXcode Cloudと統合できます。

次に、ジョーが他の機能やベストプラクティスについて話します。

ジョー：ありがとう、ジョン！

Xcode Cloudは、アプリやフレームワークの作成に使用するAppleの開発者ツールやサービスと統合するように設計されています。

ただし、Xcodeプロジェクトでは、コードをコンパイルするために追加の依存関係や外部ツールが必要になる場合があります。

Xcode CloudはSwift Package Managerでうまく機能します。

パッケージのリポジトリが一般に公開されている場合、追加の設定を必要とせずにSwiftパッケージの依存関係をサポートします。

Xcode CloudをCocoapodsやCarthageなどのサードパーティの依存関係マネージャーと連携させることもできますが、カスタムビルドスクリプトを使用して少し余分な作業を行う必要があります。

Xcode Cloudで依存関係を利用可能にする方法については、Xcodeのドキュメントを参照してください。

Swiftパッケージを追加し、ワークフローを開始するために変更をプッシュしたら、レポートナビゲーターのクラウドタブに移動し、最新のビルドのステータスを表示できます。

[ログ] を選択して、詳細なビルド ログを表示します。

Xcode Cloudが依存関係を自動的に解決したことがわかります。

Xcode Cloudが最初のビルドを正常に完了した後、アプリやフレームワークが常に出荷可能な状態であることを確認するために、継続的な統合と配信の実践を洗練するための次のステップを計画する必要があります。

このセクションでは、静的コード分析のためにSwiftLintでXcode Cloudを使用する方法、ワークフローの編集を制限する方法、および複数の開始条件を設定することの価値について説明します。

SwiftLintは、Swiftコミュニティで一般的に受け入れられているスタイルガイドのルールと慣習を強制するオープンソースのリンターツールです。

静的コード分析を実行して、コードの品質を向上させ、悪い慣行を防ぎます。

SwiftLintは、特に大規模なチームで作業する場合、チームのコードベースの一貫性を維持するための素晴らしい方法であることがわかりました。

これからお見せするのは、カスタムビルドスクリプトを使用してSwiftLintをXcode Cloudと統合する方法です。

チームのプライマリリポジトリからソースコードを複製した後、Xcode CloudがSwiftLintツールを実行したいと考えています。

プロジェクトナビゲーターでは、すでにci_scriptsフォルダのpost_cloneスクリプトをフードトラックプロジェクトに追加しました。

Xcode Cloudのビルド環境にはHomebrewが含まれており、SwiftLintをインストールするためにここで使用しているものです。

このラインでは、SwiftLintを実行しています。

覚えておくべきことの1つは、スクリプトはci_scriptsディレクトリ内で実行されるため、リポジトリを指すci_workspace環境変数内で実行するようにSwiftLintに指示する必要があります。

コード分析の結果を確認しましょう。

SwiftLintはたくさんの違反を見つけたようで、そのうち15件は深刻です。

ツールを統合するのは初めてなので、このワークフローを一時的に無効にして、まずチームの他のメンバーと話し合い、コーディングスタイルと慣習について合意し、どの問題を解決したいかをチームとして決定します。

ワークフローの管理メニューからXcodeでワークフローを無効にすることができます。

そうすることで、開始条件が機能しなくなり、手動ビルドのみを開始できます。

静的コード分析ワークフローが無効になったので、修正したい問題の修正に集中できます。

その後、戻ってきて、このワークフローを有効にすることができます。

私たちのチームは急速に成長しており、ワークフロー構成について意識的な選択をしたいと考えています。

私はチームのすべてのワークフローを維持および管理する責任があるので、チームメンバーにワークフローに意図しない変更を加えたくありません。

それは元に戻すのに多くの時間がかかります。

意図しない変更を防ぐために、ワークフローを編集できるユーザーを制限できます。

ワークフローを選択し、コンテキストメニューから「編集を制限する」を選択します。

チームの誰でもこのワークフローを使用または実行できますが、管理者、アカウント所有者、アプリマネージャーのみが制限を適用できるため、彼らだけが編集できます。

編集が制限されているワークフローには「キー」記号があります。

これは、ロックされており、あなたや他の管理ユーザーのみが編集できることを意味します。

代わりに「ロック」記号が表示された場合は、管理者によってロックされており、編集できないことを意味します。

この機能により、特に大規模なチームの一員である場合は、複雑なワークフローへのアクセスを簡単に管理できます。

ワークフローを一時停止またはロックダウンするのがいかに簡単かを学びました。

では、ワークフローの管理とメンテナンスについて話しましょう。

プルリクエストを行うたびに、またはブランチをマージするときに、同じテストとアーカイブアクションを実行したいです。

これを行う最善の方法は、複数の開始条件を通過することです。

これにより、作成および管理する必要のあるワークフローの数が減るため、ワークフローのメンテナンスが向上します。

説明するために、この例では、次の条件でビルドを開始したいと思います。メインブランチまたはリリースブランチに変更がある場合、またはメインブランチにスケジュールされたビルドがある場合は、同じアーカイブとテストアクションのセットを実行し、内部テストのためにTestFlightにデプロイします。

3つのワークフローを作成し、それらを管理して同期させる代わりに、すべての開始条件を一度に指定する単一のワークフローを作成します。

これにより、特にチームが維持すべき多くのワークフローがある場合、管理性が向上します。

Xcodeでの開始条件の設定は簡単です。

ワークフローエディタから、+ボタンメニューから開始条件のタイプを選択します。

App Store ConnectのXcode Cloudは、フル機能のウェブベースの体験を提供します。

無効化やロックダウンから、複数の起動条件の設定まで、ワークフローを設定するためにXcodeで行ったすべてのことは、AppStoreConnectからも入手できます。

Xcode Cloudは、Xcodeに組み込まれた強力で継続的な統合&配信サービスで、あらゆる規模の開発チームを支援し、既存のツールやプロセスと簡単に統合して、ユーザーに高品質のアプリを提供することができます。

Xcode Cloudのベータ参加者の皆様、ご意見に本当に感謝し、さらに皆様のご連絡をお待ちしております。

これらの機能が、チームの継続的な統合と配信の実践を洗練させるのに役立つことを願っています。

ご覧いただきありがとうございます、そして素晴らしいWWDCをお過ごしください!

♪インストゥルメンタルヒップホップ音楽♪