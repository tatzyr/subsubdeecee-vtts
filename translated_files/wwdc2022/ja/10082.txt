10082

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

みなさん、こんにちは。私の名前はジョン・クロウソンで、アップルのパフォーマンスツールチームのソフトウェアエンジニアです。

この講演では、Xcodeとデバイス上のハング検出を使用して、アプリのハングを追跡するためのいくつかの新しいツールを紹介することに興奮しています。

アプリ開発プロセスのさまざまな段階を訪問し、各段階でどのツールが最も適しているかを検討する際に、私があなたのガイドになります。

この話は4つのセクションに分かれています:まず、私はカバーします、ハングとは何ですか?

次に、アプリの開発中、アプリのベータテスト中、アプリのリリース後にハングを発見して診断するのに役立つツールを紹介します。

始めましょう！

私のチームが開発している新しいアプリについてお話ししたいと思います。フードトラックは、特にドーナツを販売するフードトラックの管理に役立ちます。

私が作ったドーナツの種類をいくつか紹介しましょう。

はぁ、私のドーナツのリストをスクロールするのに本当に長い時間がかかりました。

アプリは遅れていて、私のタッチに反応しませんでした。

アップルでは、この無反応の時期を「ハング」と呼んでいます。

アプリのメインスレッドは、ユーザーインタラクションの処理とビューコンテンツの更新を担当します。

ハングは、メインスレッドが作業中または別のスレッドまたはシステムリソースで待機しているときに報告され、ビューコンテンツの更新が少なくとも250ミリ秒遅れます。

メインスレッドは、ハングが解決されるまで、新しいユーザーインタラクションを処理できません。

ユーザーにとって、アプリが完全に立ち往生しているように見えます。

レスポンシブアプリを作成することは、ポジティブなユーザーエクスペリエンスを提供するために不可欠です。

一貫して反応しないアプリは、ユーザーがアプリを強制的に終了したり、別のアプリに切り替えたり、場合によってはアプリを削除したり、否定的なレビューを書いたりする可能性があります。

このため、アプリのハングダウンを追跡することは、ユーザーベースの獲得と維持に不可欠です。

レスポンシブな体験を提供することで、人々はあなたのアプリを使って楽しむことができます。

ハングとその原因、およびコードからそれらを排除するための戦略の詳細については、2021年からの「アプリからのハングを理解して排除する」トークをチェックしてください。

アプリ開発プロセスは3つの段階に分けることができます。

まず、Xcodeを使用してデスクで最新のアプリバージョンを開発します。

次に、アプリをテストし、Xcodeなしでベータ環境でフィードバックを収集します。

たとえば、デバイスで開発署名されているか、TestFlightを通じて配布されているアプリのバージョンがあるかもしれません。

最後に、App Storeで最新のアプリバージョンをリリースします。

最も積極的な開発者にとっても、新しいハング問題はどの段階でも発生する可能性があるため、各段階で解決するためのツールを知っていることが重要です。

iOS 16とXcode 14の前に、アプリのハングの発見と診断を支援する2つのツールを提供しました。

MetricKitは、ベータ版またはパブリックリリースアプリで個々のユーザーから集計されていないハングレートメトリクスと診断レポートの収集をサポートするフレームワークです。

Xcodeオーガナイザーは、パブリックリリースアプリのユーザーから集計されたハングレートメトリックを提供します。

特にアプリを開発するときや、どのソースコードがパブリックリリースのハングレートメトリックを上昇させたのかを理解しようとするとき、ここにはギャップがあります。

iOS 16とXcode 14では、いくつかの新しいツールを導入するのに忙しかった。

より詳細に説明する前に、それぞれを簡単に紹介しましょう。

Xcodeのスレッドパフォーマンスチェッカーは、積極的にトレースせずにアプリをデバッグしながら、ハングの原因となるスレッドの問題を警告します。

Xcodeのインストゥルメントは、アプリのトレース中に検出され、ラベルがハングするようになりました。

デバイス上のハング検出は、Xcodeやトレースを使用せずにハング検出を提供し、開発署名またはTestFlightアプリを使用しながら、リアルタイムのハング通知を提供し、診断をサポートします。

そして最後に、Xcodeのオーガナイザーは、現場のユーザーから集約されたハング診断を提供するハングレポートをサポートするようになりました。

ハングとは何か、発生する可能性のあるさまざまな段階がわかったので、Xcodeでアプリを開発しながらハングアップを追跡する方法について説明します。

Xcode 14では、新しいスレッドパフォーマンスチェッカーツールは、アプリのメインスレッドで優先度反転と非UI作業を検出すると、Xcode Issue Navigatorで通知します。どちらもハングの一般的な原因です。

私は今、Xcodeに戻り、作成したドーナツをスクロールしていたときにフードトラックアプリで以前に観察したハングを診断しました。

アプリを構築して実行し、ユーザーインタラクションを繰り返したとき、スレッドパフォーマンスチェッカーツールは、優先度反転によって引き起こされるハングリスクを警告しました。

これは、優先度の高いスレッドが優先度の低いスレッドと同期しようとしていたことを意味します。

これは、私たちが気づいているハングが、異なる優先順位の低いスレッドで待機しているメインスレッドによって引き起こされていることを示している可能性があります。

アプリのメインスレッドで優先反転と非UI作業を検出するには、適切なスキームの診断セクションからスレッドパフォーマンスチェッカーツールを有効にします。

スレッドパフォーマンスチェッカーアラートは、私のハングの潜在的な犯人を発見するのに役立ちましたが、さらにトリアージするために、ハング期間中に他のスレッドが何をしていたのかを知りたいです。

別のツールを使って深く掘り下げてみましょう。

タイムプロファイラ機器は、コールスタックを提供することで、アプリの各スレッドが時間の経過とともに何をしていたかを知ることができます。

Xcode 14の新機能であるタイムプロファイラは、ハングを検出し、対応するプロセストラックに直接ラベルを付けます。

フードトラックアプリでは、タイムプロファイラを使用して、ドーナツをスクロールするときにハングが発生していることを確認し、メインスレッドの優先度反転が原因であることを確認し、優先度の低いスレッドが何をしていて、メインスレッドが待機していたかを把握します。

Xcodeの「製品」>「プロフィール」メニューから始めます。

これは、リリース用のアプリを構築し、アプリをターゲットにするためにすでに設定されているInstrumentsを起動します。

タイムプロファイラテンプレートを起動し、フードトラックアプリで問題のあるユーザーインタラクションの痕跡を記録し始めます。

タイムラインでハングが検出され、ラベル付けされているのがわかります。

ハング期間は、問題の重大度を評価するためにも指定されています。

次に、ハング間隔をトリプルクリックして、ハング期間の時間フィルターを作成し、下部の詳細ビューの情報をこの選択した時間間隔で発生するイベントのみにフィルタリングします。

また、他のトラックでこの期間中に何が起こっていたかを見やすくなります。

私が最初に気づいたのは、メインスレッドがハング間隔の間にCPU使用量がほとんどないということです。つまり、メインスレッド自体があまりにも多くの作業をしていたからではなく、別のスレッドで待っていたため、メインスレッドが応答しなかったということです。

これは、以前のスレッドパフォーマンスチェッカーの優先反転アラートと一致します。

次に、ハング中にCPU使用率が多いワーカースレッドが表示されます。

これは、メインスレッドが待っているスレッドである可能性が高い。

次のステップは、ハング中にワーカースレッドが何をしていたかを調べ、優先順位の反転を解決することです。

Instrumentsでのハング検出とラベリングは、アプリのプロファイリング中に遭遇したハングを表面化するための素晴らしい方法です。

タイムプロファイラとCPUプロファイラ機器でデフォルトで利用できます。

また、他の機器と組み合わせてハングを表面に任意のトレースドキュメントに追加できる新しいスタンドアロンハングトレーシングツールもあります。

ハング検出とラベル付けに加えて、ハング期間のしきい値を設定して、応答しない特定の期間を見つけることができます。

これで、Xcodeを使用してデスクでハングを発見して診断する方法を学びました。

開発中の優れたテストカバレッジがあっても、ベータ版およびパブリックリリース環境は、あなたが考慮していなかったコードパスのハングを発見する可能性があります。

次に、アプリがベータ環境で展開されたら、ハングアップを追跡する方法を紹介します。

私は今、App Store Connectを通じてFood TruckアプリのビルドをTestFlightに展開し、それは私の個人的なデバイスにダウンロードされます。

私はいつも強力なネットワーク接続を持っていない場所を含め、街中でドーナツを販売するときにアプリをテストします。

しかし、デバイスがXcodeに接続されていない場合、ハングを発見して診断するにはどうすればよいですか?

これらの条件下でハングを監視し続けるために、iOS 16は開発者設定でデバイス上のハング検出を導入し、リアルタイムのハング通知を提供し、診断をサポートします。

これは、開発署名済みまたはTestFlightアプリで利用できます。

注文の販売を開始する時が来ました。

現在の注文を開こうとすると、アプリがハングしているというデバイス上のハング検出通知が届き、今回は3秒以上かかっています。

Xcodeで開発しているときに、なぜこのハングに気づかなかったのだろうか?

詳細については、デバイス上のハング検出ツールが提供する診断情報を使用する必要があります。

アプリが開発用にセットアップされたら、この機能は、[設定]> [開発者]> [ハング検出] を開き、スイッチを切り替えることで有効にできます。

ハングしきい値設定では、検出するハングの最小期間を設定できます。

最短のハングしきい値は250ミリ秒で、500ミリ秒以上にバンプすることができます。

長いハングはユーザーへの影響が高い傾向がありますが、短いハングは、特に連続して発生する場合は、コンテキストに応じて、エクスペリエンスを混乱させる可能性があります。

アプリをインストールすると、監視対象のアプリのリストに表示されます。

最後のセクションには、警告されたハングの利用可能なログの時系列リストが表示されます。

これらの診断は最善の努力であり、パフォーマンスのオーバーヘッドを最小限に抑えるために低優先度でバックグラウンドで処理されることに注意してください。

これは、特にシステムがビジーの場合、処理に時間がかかる可能性があることを意味します。

幸いなことに、新しい診断が利用可能になると、受動的な通知が表示されます。

街中でドーナツを売っているときにアプリで注文を開いたときに検出されたハングの診断を調べてみましょう。

テキストベースのハングログと、検出されたハングのテールスピンの両方が与えられます。

テキストベースのハングログは情報が少ないですが、ハングを一目で理解することができます。

より詳細な調査のために、Instrumentsのテールスピンを開いて、プロセス内のスレッドインタラクションを表示したり、システムリソースの使用状況を特定したりします。

まず、共有ボタンを使用して、テキストベースのハングログをMacに送信し、そこでシンボリックして大きな画面で表示できます。

転送してシンボリック化したテキストベースのハングログの抜粋を見ると、ハング中に、ネットワークへの同期要求を実行することがわかっているメインスレッドのメソッドを呼び出していることがわかります。

Xcodeと強力なネットワーク接続を使用してデスクでアプリケーションをテストする場合、ネットワークからデータを要求しても遅延がない可能性があります。

ただし、ネットワーク接続が限られている場所でアプリをテストすると、リクエストに時間がかかり、ハングします。

これらの異なる現実世界の条件下でアプリのベータ版をテストすることが重要であり、デバイス上のハング検出により、デバイスのみを使用してハングを監視できます。

この時点で、私は開発とベータ段階で利用可能なツールを使用してハングを発見し、診断し、App Storeで顧客がフードトラックアプリを利用できるようにする準備ができています。

アプリが顧客の手に入ったら、さまざまなOSバージョン、デバイス、および以前のテストで再現できなかった可能性のある他の現実世界の条件で、ハングアップを追跡する方法を紹介します。

Xcode 14の新機能であるXcodeオーガナイザーは、顧客のデバイスから集約されたハング診断を提供するためにハングレポートをサポートしています。

収集されたデータは、アプリ分析の共有に同意した顧客からのもので、ハングにつながったメインスレッドスタックトレースに関する情報が含まれています。

ハングレポートは、Xcodeオーガナイザーの左側のナビゲーションから入手できます。

同様のスタックトレースが収集されると、それらはグループ化され、単一の署名が形成されます。

リストでは、署名はユーザーの影響に基づいてソートされて表示されます。

署名ごとに、いくつかのサンプルハングログを見つけることができます。

各ハングログには、ハング、ハング期間、およびログの発信元のデバイスとOSバージョンを担当するコードを含むメインスレッドスタックトレースが含まれています。

各署名は、署名が担当したハングログの数と、OSバージョンとデバイスによるそれらのログの内訳に関する集計統計も提供します。

顧客に最も影響を与える問題を特定するには、トップの署名に細心の注意を払ってください。

この場合、トップシグネチャは、このリリースのハング時間の21%を占めています。

シンボル情報を使用してアプリをApp Storeに提出したので、ハングレポートには、ソースコードと同じように名前が付けられたすべての機能が表示されます。

このメインスレッドのコールスタックの機能を調べることで、このハングは、かなりの期間ブロックすることが知られているメインスレッド上のディスクからファイルを同期的に読み取ることによって引き起こされたと推測できます。

顧客に最も影響を与えているパフォーマンスの問題に取り組むことが重要であり、オーガナイザーはそれらを特定するための優れたツールです。

各アプリのリリース後にこのデータをチェックして、以前のハングが解決されたことを確認し、表示される可能性のある新しいハングに対処します。

また、App Store Connect REST APIを通じて同じハングレポートデータを取得することもできます。

これは、パフォーマンスデータを独自のシステムと統合したり、追加の分析を実行したりするのに役立ちます。

パワーとパフォーマンスAPIの使用の詳細については、「パワーとパフォーマンスAPIでトレンドを特定する」ビデオをチェックすることを強くお勧めします。

Xcode 13.2で追加され、アプリでパワーとパフォーマンスのメトリクスを監視するときに通知を受け取ることができるようになりました。

Xcodeオーガナイザーの回帰ビューの右上にある通知ボタンをクリックして、通知を有効にすることをお勧めします。

これにより、アプリのハングレートが急激に上昇することを警告します。

パフォーマンス回帰の詳細については、2021年の「アプリのパワーとパフォーマンスの回帰の診断」トークをご覧ください。

Xcodeオーガナイザーでの体験を向上させるために、シンボル情報を使用してアプリを作成してApp Storeに提出することを強くお勧めします。

このシンボル情報は、Xcodeオーガナイザーのレポートにアプリから関数名を追加するために使用されます。

これにより、スタックトレースの理解が大幅に容易になります。

また、スタックトレースの関数名からXcodeソースエディタの関数定義へのワンクリックナビゲーションも可能にします。

抽出された情報は、関数とメソッド、ソースコードファイルの名前とパス、および行番号情報に限定されています。

限られたシンボル情報は安全に保存され、決して共有されないことに注意することが重要です。

すばらしい

これで、開発プロセスの各段階でハングを発見して診断する方法がわかります。

今後、開発プロセスの可能な限り早い段階でハングを発見し、診断し、修正します。

インストゥルメントを使用して新機能を積極的にプロファイリングするなど、利用可能なツールを使用してください。

スレッドパフォーマンスチェッカーとデバイス上のハング検出を必ず有効にしてください。

各リリース後、Xcodeオーガナイザーを使用して、顧客に最も影響を与えるハングに取り組み、以前のアプリバージョンからのハングが解決されたことを検証します。

回帰通知が、電力とパフォーマンスの問題の最初の兆候である可能性のある、退行されたパフォーマンス指標に積極的に警告できるようにします。

そして最後に、Xcodeオーガナイザーの有用性を向上させるために、シンボル情報を使用してアプリを構築してApp Storeに提出します。

これらの手順に従うことで、アプリは可能な限り最高のユーザーエクスペリエンスを提供するためにさらに優れたパフォーマンスを発揮します。

WWDCでぶらぶらしてくれてありがとう!

♪