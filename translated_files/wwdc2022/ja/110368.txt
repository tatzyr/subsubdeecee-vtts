110368

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

フランクリン・シュランズ：こんにちは、私の名前はフランクリンで、Swift-DocCチームのエンジニアです。

同僚のイーサンと一緒に、さらに優れたドキュメントを作成するのに役立つ素晴らしい新しいツールが満載のXcode 14のSwift-DocCのツアーを提供することに興奮しています。

昨年、Xcode 13でSwift-DocCを導入し、Swiftフレームワークを通じて開発者をガイドできるようにしました。

Swift-DocCを使用すると、個々のAPIのリファレンスドキュメントから、これらのAPIを一緒に使用するためのより高いレベルのストーリーを提供する概念的な記事まで、タスクをユーザーに説明するステップバイステップのチュートリアルまで、包括的なコンテンツを書くことができます。

今年、Xcode 14で、Swift-DocCはまったく新しいエキサイティングなワークフローのロックを解除します。

フレームワークの文書化に加えて、チームと簡単にコラボレーションできるように、アプリプロジェクトもサポートできることを嬉しく思います。

Swift-DocCを使用してObjective-CおよびC APIを文書化して、すべてのプロジェクトのAPIを一緒に記述できるようになりました。

ウェブサイトへのコンテンツの公開は、GitHub Pagesのような静的ホスティング環境をすぐにサポートすることで、劇的に簡単になりました。

そして、強力な新しいナビゲーションサイドバーのおかげで、開発者はこれまで以上に簡単にあなたのコンテンツを発見することができます。

また、Swift-DocCは現在オープンソースプロジェクトであるため、これらの新機能はオープンソースコミュニティと緊密に協力して開発されました。

このセッションでは、Swift-DocCとXcode 14でロック解除されるエキサイティングな新しいワークフローのツアーを行います。

まず、プロジェクトのAPIをソースコードとインラインで文書化する方法を発見します。

次に、コンテンツをウェブサイトにシームレスに公開することを見ていきます。

そして最後に、ウェブ上で真新しいナビゲーションサイドバーを発見します。

ドキュメントを書くことから始めましょう。

優れたドキュメントは、あらゆるソフトウェアプロジェクトに不可欠です。

プロジェクトが進化するにつれて、開発者が貢献する際に堅実な基準点を持つように、その機能とデザインを説明することが重要です。

XcodeのSwift-DocCは、コードの開発に使用するのと同じツールを使用して、素晴らしいドキュメントを作成するために必要なツールを提供します。

そして今年は、Swift-DocCをアプリプロジェクトに拡大することに興奮しています。

すぐに飛び込みましょう。

SwiftとObjective-Cの両方のソースファイルを含む、Slothyというチームと一緒に取り組んでいるアプリを文書化します。

まだドキュメントを書いていない新しいプロジェクトでも、[製品]メニューを開いて[ドキュメントのビルド]を選択すると、Xcodeがドキュメントウィンドウが開き、Swift-DocCがAPI用に自動的に生成するスタブが表示されます。

これは、貢献者がプロジェクトをナビゲートするのを助けるために、これらのページを埋めるための素晴らしい出発点を提供します。

では、このコンテンツを私たちのアプリに貢献するための豊かで完全なガイドに変えるために、一歩一歩進みましょう。

始めるのに良い場所は、各APIが個別にどのように機能するかを教え、そこからドキュメントカタログを使用してより高いレベルのコンテンツを提供することです。

SlothViewというビューを説明することから始めましょう。

このドキュメントをSwift-DocCに表示するには、3つのスラッシュを使用してコメントを開始します。

次に、ビューの簡潔な要約を追加します。

構築されたドキュメントページでは、これはビューの名前のすぐ下に目立つように表示されるテキストに変換されます。

次に、追加の段落を使用して詳細を追加します。

このコンテンツは、ページの概要セクションに表示されます。

また、Swift-DocCのリンク構文を使用して、APIへの参照をアクティブなリンクに変換し、Pagesにすばやくジャンプして詳細を学習できます。

DocCは、ビルド時にこれらのリンクを検証するので、期限切れになると警告が表示されます。

最後に、このビューの使用方法の例を提供したい場合は、Markdownコードブロック構文を使用してコードリストを追加します。

今、貢献者はこのビューの使い方を一目で知っています。

ほんの数ステップで、私の見解のドキュメントは、このプロジェクトの貢献者にとってはるかに役に立ちます。

次に、初期化子を文書化しましょう。

繰り返しますが、要約を書くことから始めます。

イニシャライザとメソッドの場合、各パラメータを個別に記述することをお勧めします。

これを行うには、パラメータが何であるかの簡単な説明とともに、パラメータリスト項目を追加します。

コンテンツが別のパラメータセクションにどのように表示されるかに注目してください。

では、このプロジェクトで定義されているObjective-C APIを見てみましょう。

Xcode 14の新機能で、Objective-Cコードを文書化するためのSwift-DocCの包括的なツールをもたらすことに興奮しています。

あなたが知っていて愛しているのと同じおなじみのMarkdown構文と、Xcodeのソースエディタで更新されたサポートを使用して、すべてのプロジェクトのAPIを一緒に記述して整理できるようになりました。

また、SwiftとObjective-Cの両方から呼び出すことができるコードには、コーディングしている言語でページを閲覧するための気の利いた言語トグルがあります。

詳細については、以下にリンクされている開発者ドキュメントを確認してください。

さて、これをSlothyプロジェクトに適用しましょう。

SLOSoundクラスとその初期化子について説明します。

このクラスはSwiftコードとObjective-Cコードの両方から使用できるため、Xcodeは言語トグルを表示し、使用している言語でコンテンツを閲覧できることに注意してください。

Swiftコードに使用するのと同じMarkdown構文を使用して、クラスと初期化子を説明しましょう。

素晴らしい、これははるかに良く見えます。

要約、概要、および初期化子にはパラメータセクションを追加しました。

そして、それは個々のAPIの説明を締めくくります。

ソースコードにいくつかのドキュメントコメントを書くことで、私のプロジェクトに貢献する開発者は、そのAPIの使用方法をよりよく理解することができます。

それでは、私たちのアプリのための素晴らしいトップレベルのページを作成することに焦点を当てましょう。

これは貢献者が見る最初のページなので、アプリが何をし、どのように貢献するかについて素晴らしい紹介したいと思います。

トップレベルのページをカスタマイズするには、まずドキュメントカタログを追加します。

これを行うには、プロジェクトのソースフォルダを右クリックし、[新しいファイル]を選択します。

次に、ドキュメントカタログを選択します。

ドキュメントカタログは、ソースコードのドキュメントを補完し、追加のMarkdownファイルとメディアが含まれています。

Xcodeは、アプリの最上位ページのファイルを自動的に追加します。

アプリが何をするかの概要を記入しましょう。

ソースコードのドキュメントコメントに使用するのと同じ構文を使用して、要約、概要、さらには画像のような埋め込み豊富なコンテンツを追加しました。

素晴らしい、これははるかに魅力的に見えます。

今、貢献者は、私のアプリが何であるかを一目で知っています。

そして、それだけです!私はアプリのドキュメントを劇的に改善し、プロジェクトの貢献者に素晴らしい基準点を提供しました。

彼らはプロジェクトの概要のためにトップレベルのページを閲覧し、各ページにジャンプして各APIに関する詳細情報を得ることができます。

ドキュメントの作成と構築方法を見たので、貢献者が簡単に閲覧できるように、ウェブサイトに公開する時が来ました。

あなたに、イーサン。

イーサン・カスターズ:ありがとう、フランクリン。

SlothCreatorと呼ばれるより一般的に便利なSwiftパッケージと並んで、モジュール式の方法でSlothyアプリを開発してきました。

SlothCreatorをより多くの視聴者に公開して、ナマケモノ関連のアプリを作っている他の開発者がそれを利用できるようにすることは素晴らしいことだと思います。

この取り組みの一環として、 SlothCreatorのドキュメントがウェブ上で簡単に共有できることを確認したいので、Swift-DocCの真新しいシンプルな公開ワークフローを歩きましょう。

Xcodeでドキュメントを作成すると、Swift-DocCはドキュメントを含む静的バンドルを生成します。

このバンドルはDocCアーカイブと呼ばれ、ドキュメント用のポータブルコンテナです。

Xcodeのドキュメントウィンドウから直接エクスポートして、同僚に送信できます。

アーカイブをダブルクリックするだけで、ドキュメントを開いて閲覧することができます。

しかし、DocCアーカイブは、Xcodeでドキュメントを開くための単なるポータブルコンテナではありません。

また、箱から出してすぐにフル機能のウェブサイトも含まれています。

そして、Xcode 14の新機能で、DocCアーカイブもほとんどのウェブサーバーと直接互換性があります。

これにより、ドキュメントをウェブに公開することがこれまで以上に簡単になります。

ほとんどの場合、ビルドしたDocCアーカイブの内容をWebサーバーのルートにコピーするだけで、ドキュメントを展開できます。

これはまた、DocCアーカイブがGitHub Pagesを含むほとんどのマネージドホスティングサービスと互換性があることを意味します。

GitHub Pagesは、多くの開発者がGitHub.comに統合されたドキュメントをホストする一般的な方法です。

そして、 SlothCreatorのソース管理にGitHubを使用しているので、ドキュメントもそこに公開することは理にかなっています。

GitHubページの使用に精通している場合は、標準サーバーとは異なり、WebサイトはURLのルートパスではなく、特定のベースパスで公開されていることを知っているでしょう。

この種のホスティングシナリオでは、互換性のあるDocCアーカイブを生成するために、追加のビルド設定でWebサイトのベースパスを指定する必要があります。

これがどのように機能するのか、そしてGitHub Pagesのような特定のホスティングシナリオでのみこの設定が必要な理由を完全に理解するために、自分のドメインでホストされているDocCアーカイブのURLがどのように見えるかを見てみましょう。

Slothyアプリのウェブサイト（slothy.example.com）がすでにあると仮定し、その既存のウェブサイトの一部として SlothCreatorのドキュメントを公開したいと思います。

SlothCreator DocCアーカイブの内容をWebサーバーのルートにコピーするだけで、 SlothCreatorのリファレンスドキュメントがslothy.example.com/ documentation/slothcreatorに表示されます。

SlothCreatorパッケージのチュートリアルは、近隣の「チュートリアル」パスにあります。

ただし、この場合、独自のドメインに公開するつもりはありません。

代わりに、GitHubリポジトリでドキュメントを保持するために、GitHub Pagesが提供するドメインに公開します。

リポジトリ用のGitHub Pagesサイトを作成すると、そのウェブサイトのURLはルートパスではなく、リポジトリの名前に対応する特定のベースパスにあります。

一般的には、username.github.ioのようなリポジトリ名をフォワードスラッシュします。

リファレンスとチュートリアルのドキュメントパスは、そのベースパスに追加されます。

このベースパスはリポジトリに固有であるため、GitHub Pagesに公開するためのDocCアーカイブを構築する前に、Swift-DocCにそれが何であるかを伝えることが重要です。

このユースケースのためだけに、Xcode 14で公開されている新しいビルド設定があります。

DocC Archive Hosting Base Path設定をGitHubリポジトリの名前に設定すると、将来のすべてのドキュメントビルドの準備が整います。

これが実際にどのように機能するかを見てみましょう。

ここでは、FranklinがSlothyアプリの依存関係として以前に示したSlothCreator Swiftパッケージを開きました。

より広く使用するためにこのパッケージの公開に近づいているので、GitHub Pagesに準備したドキュメントを公開します。

まず、マウスをXcodeのプロジェクトナビゲーターに移動し、SlothCreatorアイテムを選択して、フレームワークのプロジェクト設定を開きます。

次に、 SlothCreator ターゲットを選択し、[ビルド設定] タブを開きます。

この場合、Swift-DocC関連の設定を探しているので、DocCをフィルタリングしましょう。

次に、DocC Archive Hosting Base Pathの設定をリポジトリの名前に設定します: sloth-creator。

すごい！

次に、ドキュメントを作成しましょう。

マウスを製品メニューに移動し、ビルドドキュメントを選択します。

Xcodeがプロジェクトのコンパイルとドキュメントの生成を完了すると、ドキュメントウィンドウが開きます。

SlothCreatorのドキュメントのトップレベルのページです。

先に進んで輸出しましょう。

ドキュメントナビゲーターとSlothCreatorテクノロジーアイテムにマウスを移動します。

次に、コンテキストメニューをクリックし、[エクスポート]を選択します。

ドキュメントWebサイトを公開するようにGitHub Pagesを設定したので、リポジトリのルートにある「docs」という名前のディレクトリにエクスポートします。

今、私は自分の変更をGitHubにコミットしてプッシュする必要があります。

Xcodeのメインウィンドウに戻り、マウスをソースコントロールメニューに移動し、コミットを選択します。

ドキュメントの内容があるドキュメントディレクトリを選択し、コミットメッセージを書きます。

先に進んで変更を推し進めましょう。

そして、それだけです。

公開されたサイトをチェックしに行きましょう。

GitHub.comでリポジトリを開きます。

私はすでにREADMEにドキュメントサイトへのリンクを配置していたので、クリックするだけです。

そして、私たちはここにいます。

SlothCreatorのために取り組んだドキュメントがウェブ上で簡単にアクセスできることにとても興奮しています。

これは、自分のプロジェクトで SlothCreatorを使用することに興味がある人にとって本当に役立つと思います。

SlothCreatorのドキュメントを一度展開したので、リポジトリのドキュメントが変更されるときはいつでも展開を実行するように自動化を設定したいと思います。

SlothCreatorをSwiftパッケージとしてリリースするので、新しいSwift-DocC Swift Package Managerプラグインはここで大きな助けになるでしょう。

Swift-DocCプラグインを使用して、Swiftパッケージのドキュメントを構築するプロセスを本当に簡素化できます。

プラグインのドキュメントは以下にリンクされており、GitHub Pagesやその他のホスティングサービスに自動ドキュメントの展開を設定するための素晴らしい出発点としてチェックすることをお勧めします。

そしてもちろん、Swift-DocCは、Xcode 13で導入されたxcodebuild docbuildコマンドラインインターフェイスを使用して、Xcodeプロジェクトに対する優れたコマンドラインサポートを続けています。

xcodebuildを使用してGitHub Pagesの展開を自動化する方法に関するドキュメントは、以下にリンクされています。

今年、ウェブ上でSwift-DocCのまったく新しい強化されたブラウジングとナビゲーション体験をリリースできることに興奮しています。

新しいナビゲーションサイドバーが、SlothCreatorドキュメントの読者がフレームワークが提供するものを探索するのにどのように役立つかを見てみましょう。

SlothCreatorのGitHub Pagesサイトに戻り、ページの左側に新しいナビゲーションサイドバーがあります。

マウスをCareScheduleアイテムに移動し、詳細表示三角形をクリックして展開します。

これで、ページを完全に開くことなく、CareScheduleの子供として整理されたページを見ることができます。

この場合、私はタイプの初期化子に直接ジャンプすることに興味があります。

フレームワークをナビゲートし続け、FoodGeneratorやNalothFoodなどの他のアイテムを拡張し、最終的に小枝ページを開くことができます。

ページ間を移動すると、ナビゲーションサイドバーの状態が一定のままになり、すでに訪問したページを追跡できます。

これにより、私が本当に感謝しているフレームワークの自然な探求が可能になります。

しかし、すでにSlothCreatorフレームワークに精通していて、特定のシンボルに関する情報を探している場合はどうなりますか?

新しいナビゲーションサイドバーの下部にあるフィルターフィールドは、これに最適です。

ナマケモノのエネルギーレベルを上げるのに役立つAPIに興味があります。

マウスをナビゲーターの下部に移動し、フィルターバーを選択して「エネルギー」を挿入します。

完璧！

energyLevelプロパティに関するこのドキュメントは、まさに私が探していたものです。

Xcode 14でSwift-DocCが提供する新しいブラウジング体験は、ドキュメントサイトを次のレベルに引き上げます。

私たちはあなたがそれを試してみることにとても興奮しています。

Swift-DocCのXcodeへの統合により、すべてのプロジェクトを文書化できるようになりました。

これには、XcodeプロジェクトまたはSwiftパッケージとしてパッケージ化されているかどうかにかかわらず、アプリケーションおよびフレームワークターゲットのObjective-CおよびSwiftコードが含まれます。

Xcode 14によって作成されたDocCアーカイブは、GitHub Pagesを含む一般的なホスティングサービスとすぐに互換性があります。

これは、ドキュメントをさらに幅広いオーディエンスに配布するためのゲームチェンジャーです。

そして最後に、Swift-DocCはウェブ上で強力な新しいナビゲーション体験を提供します。

ナビゲーションサイドバーは、サイト上のドキュメントを探索して見つける新しい方法のロックを解除します。

新しいSwift-DocCサイドバーと、その新機能を活用するためにドキュメントを作成する方法の詳細については、「Swift-DocCコンテンツの発見可能性を向上させる」セッションをご覧ください。

また、ドキュメントをさらに進めるには、「DocCを使用してインタラクティブなチュートリアルを構築する」セッションをチェックして、アプリやフレームワークを通じて開発者を導くためのステップバイステップのウォークスルーを構築する方法を学んでください。

私たちは、あなたがXcode 14で作成し、公開するすべてのドキュメントを見ることにとても興奮しています。

ご覧いただきありがとうございます。

♪