10016

♪インストゥルメンタルヒップホップ音楽♪

さて、こんにちは、そして「CarPlayでアプリからより多くのマイレージを引き出す」へようこそ。

私の名前はアンドレです。今日のセッションを案内します。

ご存知のように、CarPlayは車の中でiPhoneを使用するためのよりスマートで安全な方法です。

今日のセッションは、あなたのアプリと、CarPlayでそれらを有効にする方法についてです。

サポートされているアプリの種類を簡単に復習することから始めて、今年有効にするいくつかの新しいアプリの種類について話し、最後にアプリの開発をサポートするために利用可能にした新しいツールについて説明します。

今日は、ナビゲーションアプリに固有の重要な新機能で締めくくります。

これ以上苦労せずに、すぐにそれに入りましょう!

CarPlayの最も基本的なことの1つは、ドライバー向けに作られていることです。

積極的に運転している人は、アプリを構築する際に考慮すべき主なユーザーです。

その結果、運転中に関連するユースケースのみを有効にし、運転中に行うべきではないユースケースを省略する必要があります。

1回限りの設定、アプリへのサインイン、利用規約の閲覧など、運転前または運転後に行う方が良いので、アプリのCarPlay UIには表示されません。

アプリがCarPlayに表示されるには、資格が必要であることに注意してください。

利用可能にしたいアプリの種類に基づいて、Apple CarPlay開発者のウェブサイトで資格をリクエストできます。

現在CarPlayでサポートしているアプリの種類は次のとおりです。

これらは、ドライバーが運転中に実行したいと思う幅広いタスクをカバーしていますが、有効にしたい運転関連のアプリがさらにあると多くの人から聞いています。

今年、燃料とドライビングタスクアプリの2つの新しいタイプをリストに追加することを発表できることを嬉しく思います。

これらについては、すぐに詳しく説明しますが、まず、簡単なピットストップをして、テンプレートについて少し話しましょう。

テンプレートは、CarPlayのアプリがUIを表示する方法です。

アプリはデータを供給し、システムはあなたに代わって車両のディスプレイにUIを描画します。

このテンプレートシステムは、アプリが採用するのが簡単で、アプリを道路に適したものにするなど、いくつかの利点があります。

フォントサイズなどを心配する必要はありません。テンプレートは、UIの複雑さが低いことを確認するのに役立ち、最後に、アプリのUIはCarPlayの他のアプリと一致しているため、ユーザーは必要に応じて迅速にアクションを簡単に実行できます。

同様に重要なことに、テンプレートは、画面のサイズや車で使用される入力デバイスの種類に関係なく、CarPlayをサポートするすべての車でアプリのUIがうまく機能することを確認します。

あなたはまだ異なる構成でアプリをテストしたいと思うかもしれません、そして私たちはセッションの後半でテストについてもっと話しますが、テンプレートがあなたのためにほとんどの仕事の世話をすると言うだけで十分です。

アプリを構築する際には、いくつかのテンプレートから選択できます。

ボタンの配列を示すグリッドテンプレートから、テーブルを示すリストテンプレートまで、これらのテンプレートは、開発者としてもiOSユーザーとしても馴染みがあるはずです。

最も重要なことは、CarPlay全体に表示されるので、CarPlayで運転しているユーザーに馴染みがあることです。

直前に、CarPlayでサポートするさまざまな種類のアプリについて話しました。

これらのテンプレートのいくつかは、他のものよりもそれらのタイプのいくつかに関連しています。

このチャートは、どのタイプに応じて、アプリが使用できるテンプレートを理解するのに役立ちます。

私はこれを読もうとすることはDMVの目の検査を受けるようなものであることを認識していますが、恐れないでください、あなたはオンラインの開発者ドキュメントでこの正確なチャートを見つけるでしょう。

今ここで取り除くべきことは、あなたのアプリが使用できるテンプレートは、そのタイプに依存するということです。

特定のアプリタイプに適切で適切なテンプレートのみが許可されます。

テンプレートについて話したので、iOS 16で起動する新しいアプリの種類を詳しく見てみましょう。

まず、新しいFuelingアプリの種類について話しましょう。

覚えているかもしれませんが、iOS 14ではEV充電アプリのサポートを開始しました。

これらのアプリは、EV充電器の場所を見つけるだけでなく、それ以上のことをします。たとえば、ユーザーが適切な充電ステーションに接続して起動するのに役立つ場合があります。

多くの開発者から、この種の機能は電気自動車だけでなく、素晴らしいものだと聞いています。

従来のガソリン対応車であろうと代替燃料車であろうと、この新しいカテゴリでは、給油アプリでCarPlayをサポートできます。

多くのユーザーがナビゲーションアプリを使用して特定の場所を見つけて運転するため、給油アプリは単に場所を見つけるよりもCarPlay UIでより多くの機能を有効にする必要があります。

アプリが有効にできることの素晴らしい例は、例えば、ガスポンプを起動することです。

では、ドライビングタスクアプリケーションについて話しましょう。

Driving Taskは、より幅広い種類の非常にシンプルなアプリを可能にするように設計された新しいタイプのCarPlayアプリです。

これらのアプリの主な目的は、人々が運転中に行う必要があるタスクを可能にすることです。これは、運転中に実行するタスクだけでなく、実際にドライブに役立つタスクのためです。

このタイプに該当するアプリの例には、カーアクセサリーの制御に役立つアプリ、運転または道路の状態と情報を提供するアプリ、ドライブの開始時と終了時のタスクを支援するアプリなどがあります。

これらのより具体的な例を見てみましょう。 いくつか見てみましょう。

まず、重要な道路情報をユーザーに知らせることができる道路状況アプリがあります。

このアプリはCPPointOfInterestTemplateを使用して構築されました。

このアプリを使用しているユーザーは運転中なので、このようなアプリは、ユーザーがいる場所の近くにある重要なアイテムの非常に短いリストを提供する必要があります。

これは、ユーザーがドライブの前に完全なルート計画を行うのに役立つアプリを対象としていません。

このアプリでは、ユーザーが場所を選択するときに表示されるものは次のとおりです。

テキストのスペースは、この情報を目立たないようにするために意図的に制限されているため、ここで選択した言語で簡潔にする必要があります。

次に、車のアクセサリーを制御するために設計されたアプリケーションを見てみましょう。この場合はトレーラーコントローラーです。

このアプリは、CPInformationTemplateを使用して、接続されたアクセサリに関する基本情報と、ユーザーがアクションを実行するためのいくつかのボタンを提供します。

この例では、これはCarPlayのアプリのUI全体であることに注意してください。

他のスクリーンはありません!

もちろん、このアプリには、ペアリングされたアクセサリを管理する機能など、他にも多くの機能がありますが、運転に不要な機能は、そのアプリのCarPlay UIには含まれていません。

ユーザーは、車から出たときに、iPhoneのアプリのプライマリUIを使用して、運転以外のタスクを行うのが最善です。

最後に、CPGridTemplateを使用したいくつかの例を見てみましょう。

これは2つのボタンを持つ非常にシンプルなアプリです - それだけです!

また、ユーザーは個人マイルまたはビジネスマイルとしてマイルを追跡できます。

このアプリは、他の重要でないタスクを有効にすることなく、ユーザーが運転中に行う必要がある非常に簡単なタスクを可能にするため、新しい運転タスクアプリタイプに完全に適合します。

シンプル、そして要点まで。

このスタイルのUIが複数のタイプのアプリを提供できることを示すために、ほぼ同じUIを持つ別の例を次に示します。

これは、CPGridTemplateを使用して、ユーザーが車内の乗員数を選択できるようにするエクスプレスレーン通行料トランスポンダーアプリです。

それは前の例とまったく同じ目標を満たしており、もう一つの完璧なドライビングタスクアプリです。

要約すると、ドライビングタスクアプリを設計する際には、運転中にユーザーが必要とする最小限の機能を提供し、数秒で達成できるタスクのみを有効にするシングルスクリーンアプリを作ることを検討してください。

複雑またはまれなユースケースを有効にすることは避けるべきです。

これの素晴らしい例は、初めてのセットアップまたは詳細な設定です。

そして最後に、たとえそれが車に関連していても、運転中に必要のない機能をアプリに追加すべきではありません。

台所の流し台、これはそうではありません。

そして、それはドライビングタスクアプリでそれです。

では、ギアを少しシフトして、CarPlayアプリをテストする方法について話しましょう。

これを行うためのさまざまな方法を確認し、CarPlay Simulatorと呼ばれる新しいツールを紹介します。

開発者として、CarPlay対応アプリをテストするためのいくつかの異なるツールを自由に利用できます。

まず、CarPlayウィンドウが組み込まれているXcodeシミュレーターを使用できます。

すでにXcodeシミュレータを使用してアプリの残りの部分をテストしている場合、これはCarPlay UIをすばやくテストするのに最適な方法です。

第二に、実際のiPhoneでアプリをテストするために、もちろん、携帯電話を実際のCarPlay対応車両、またはアフターマーケットのヘッドユニットに接続することができます。

最近まで、これは実際のiPhoneで実行されているアプリのCarPlay UIをテストする唯一の方法でしたが、今、あなたのお気に入りになるかもしれない3番目のオプションがあることを報告できてうれしいです - CarPlay Simulator!

これをもっと詳しく見てみましょう。 

それで、それは何ですか?

CarPlay Simulatorは、CarPlay環境を複製するスタンドアロンのMacアプリケーションです。

Appleの開発者Webサイトで「Additional Tools for Xcode」パッケージをダウンロードし、アプリを実行し、ケーブルを使用してiPhoneをMacに接続するだけです。

CarPlayは携帯電話で起動し、実際の車に接続した場合と同じように実行されます。

それで、大したことは何ですか、そしてなぜこれを使いたいのですか?

まあ、いくつかの利点があります。

まず第一に、CarPlay Simulatorを使用しているとき、CarPlayは実際の車と同じようにiPhoneで実行されています。

これは、常に駐車場を行ったり来たりしたり、アフターマーケットのヘッドユニットを購入したりすることなく、携帯電話で実行されているアプリをテストできることを意味します。

もう1つの大きな利点は、CarPlay Simulatorを使用しているときに携帯電話がMacに接続されているため、Xcodeでのデバッグでも、Instrumentsでパフォーマンスをチューニングする場合でも、Mac上の他のすべての素晴らしい開発者ツールを同時に使用できることです。

同様に、iOS側では、アプリが実際のiPhoneで実行されているため、iPhoneの完全な機能にアクセスできます。

一部のシナリオは、実際のCarPlayシステム、または現在のCarPlayシミュレータなしではテストできません。

素晴らしい例は、ナビゲーションアプリの音声指示が、FMラジオのような車のネイティブオーディオソースと正しく混ざっていることをテストすることです。

あなたは今、あなたの机の都合の良い時にこれをテストすることができます。

最後になりましたが、CarPlay Simulatorを使用して、ディスプレイサイズが異なる車など、複数の異なる構成の車をテストすることもできます。

CarPlay Simulatorが動作中どのように見えるか見てみましょう。

だから、ここにあります。

ご覧のとおり、接続されたiPhoneのCarPlayディスプレイは、いくつかのコントロールと並んでアプリ内に表示されます。

これらのいくつかが何をするかを見てみましょう。

画面の下部には、車内のさまざまなハードキーとノブコントロールをシミュレートするボタンがあります。

CarPlayビューで直接クリックして、タッチスクリーン車両のタッチをシミュレートすることもできます。

ウィンドウの上部には、いくつかのクイックコントロールがあります。

制限UIボタンを使用すると、動いている車がCarPlayに画面上の特定のコンテンツを制限するように要求したときにシミュレートできます。たとえば、オーディオアプリのリストの内容を短縮できます。

次の2つのボタンは、車がそれぞれUIとマップコンテンツの暗いまたは明るい外観を要求するときをシミュレートすることです。

最後のボタンを使用すると、電話を切断してCarPlayに再接続することをすばやくシミュレートできます。

このボタンを使用すると、携帯電話はMacに接続されたままになるため、Xcodeを使用してアプリでCarPlay再接続シナリオをデバッグできます。

しかし、私がスキップした最初のボタンはどうですか?

推測したように、これはより高度な機能を備えたセカンダリウィンドウをポップアップします。

では、これらの高度な機能を見てみましょう。

[一般]タブでは、メインのCarPlayディスプレイの表示サイズを選択できます。

アプリケーションUIがテンプレートのみで構成されている場合は、異なるサイズを試して、UIが異なる車でどのように見えるかを見ることができますが、前に話したように、システムは関係なくすべてがうまく機能することを確認します。

ただし、アプリがナビゲーションアプリの場合は、マップ描画コードが正しく機能するように、さまざまなサイズとアスペクト比を試すことが非常に重要です。

アプリでテストするための推奨ディスプレイサイズをいくつか紹介します。

「クラスター表示」タブを見てみましょう。

ここでわかるように、インストルメントクラスターの2番目のディスプレイで車をシミュレートすることができます!

ボックスをオンにして有効にし、セッションを再開するだけで、プライマリディスプレイの横にインストルメントクラスターの2番目のウィンドウが表示されます。

繰り返しますが、これはナビゲーションアプリに最も関連しています。

インストルメントクラスターディスプレイは、車のインストルメントクラスターの視野にドライバーの地図またはターンカードを表示するために使用されます。

すぐにインストルメントクラスターについてもっとチャットしますが、それは新しいCarPlay Simulatorアプリのクイックツアーです。

私たちは、あなたが私たちと同じくらい役に立つことを願っています!

CarPlayがインストルメントクラスターにライブマップを描画する方法を見ました。

しかし、あなたのナビゲーションアプリはどうですか?

アプリにインストルメントクラスターのサポートを追加およびテストするにはどうすればよいですか?

見てみましょう。 

iOS 13では、ナビゲーションアプリをCarPlayダッシュボードに表示できるようにするためのAPIを追加したことを覚えているかもしれません。

これを行うには、アプリのInfo.plistを編集してダッシュボードのサポートを宣言し、必要なデリゲートを実装しました。

デリゲートは、ダッシュボードに表示されたり消えたりしたときにアプリに通知し、マップコンテンツを描画するためのUIWindowをアプリに渡します。

それは簡単です。

すでにこれを完了している場合は、まったく同じパターンに従うため、インストルメントクラスターのサポートを追加するという素晴らしいニュースがあります。

私自身のナビゲーションテストアプリ、Space Roadsでこれをどのように行ったかを見てみましょう。

Info.plistを編集して、インストルメントクラスターナビゲーションシーンのサポートを宣言し、必要なシーンセッションロールを追加しました。

次に、CPTemplateApplicationInstrumentCluster SceneデリゲートとCPInstrumentClusterControllerDelegateを実装しました。

これらは両方とも、コンテンツを描画するためのウィンドウを提供し、インストルメントクラスターの開始時と終了時に通知し、インストゥルメントクラスタービューを表示できるようにします。

地図を車のインストルメントクラスターにライブで表示させるのに必要なのはそれだけです!

これはすべてダッシュボードサポートの実装と非常によく似ていますが、インストルメントクラスターに固有の考慮事項がいくつかあります。

まず第一に、インストルメントクラスターは、ユーザーがマップをズームインおよびズームアウトできるようにする場合があります。

CPInstrumentClusterControllerDelegateを使用して、これをアプリに実装するのはあなたの責任です。

同様に、アプリにコンパスや制限速度が含まれている場合、対応するデリゲートは、いつ描画するのが適切かをアプリに伝えます。

最後に、インストルメントクラスタービューは、車のインストルメントクラスター内の他の要素によって部分的に隠されている可能性があることに注意してください。

もちろん、iOSはすでにそのようなもの、安全な領域に対処するためのファーストクラスのメカニズムを持っています!

ビューコントローラーのviewSafeAreaInsetsDidChangeをオーバーライドして、セーフエリアがいつ変更されるかを知り、クラスタービューのsafeAreaLayoutGuideを使用して、表示が保証されているビューの領域に重要なコンテンツを保持できます。

たとえば、ユーザーの位置を示す青いルートラインがある場合は、重要な部分が安全なエリア内にあることを確認する必要があります。

CarPlayアプリを構築する開発者として、いくつかの新機能を見て、アプリをテストするための新しいツールを見ました。

それを実際に見てみましょう。 

まず、私のMacでここから始めて、CarPlayシミュレーターをお見せします。

アプリを実行していて、携帯電話を接続するだけです。

そして、ほら、ここではCarPlayを実行しています。

アプリをテストする際に、CarPlay Simulatorがどのように役立つか見てみましょう。

アプリが主にテンプレートベースであっても、アプリ内のアートワークが明るい外観と暗い外観の両方でうまく機能することを確認できます。

エクスプレスレーンアプリを実行させてください...

また、ツールバーのボタンを使用して、明るい外観と暗い外観を切り替えることができます。

私のアプリが両方のスタイルに異なるアートワークを提供していることに注目してください。

素敵ですね。

では、私が書いたナビゲーションテストアプリであるSpace Roadsに切り替えましょう。

メイン構成パネルを使用して、マップ描画コードを別の画面サイズで試してみます。

そして最後に、インストルメントクラスターディスプレイを有効にして、インストルメントクラスターのサポートをテストします。

ここにあります。うまくいきます！

以前、私はCarPlay Simulatorでアプリを完全にテストしたので、今では本物の車でうまく機能すると確信しています。

やってみよう！だ！

さて、ここで私たちは私の車の中にいます、そしてあなたが見ることができるように、私は私の携帯電話を車に接続し、CarPlayを実行しています。

まず、接続されたトレーラーコントローラーアプリを実行してみて、テンプレートがノブ対応車両でアプリを機能させる方法をお見せしましょう。

この特定の車両はタッチスクリーンとノブコントローラーの両方を備えていますが、多くのユーザーは運転中にノブコントローラーを使用するのが好きなので、ノブを使用してアプリがうまく機能することが重要です。

ご覧のとおり、私はここで私のアプリのボタンに完全にアクセスできます、そして最高の部分は、私は特別なことをする必要はありませんでした - テンプレートは私のためにすべての仕事をしました!

次に、私のナビゲーションアプリ「Space Roads」に切り替えましょう。

アプリを起動します...

そして、私たちはナビゲーションを開始します...

そして、私はgoを押します。

ブーム！

私のアプリは、センターコンソールとインストルメントクラスターの両方でライブマップビューを表示するようになりました!

ドライバーとして私の視界にライブマップがあるのは素晴らしいことです。

あなたのナビゲーションアプリを使っているドライバーもきっと気に入ると思います。

さて、それは私が今日あなたのために持っているすべてです。

詳細については、developer.apple.com/carplayのCarPlay開発者ポータルを必ずチェックしてください。皆さん、ありがとうございます。♪♪