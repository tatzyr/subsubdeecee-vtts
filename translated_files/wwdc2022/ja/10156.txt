10156

アーネスト:こんにちは、ようこそ。

私の名前はアーネストで、ScreenCaptureKitチームのソフトウェアエンジニアです。

過去数年間、私たちは皆、しばしば画面共有を伴うリモートコラボレーションにより依存してきました。

その上、OBS Studioのような録画アプリケーションを使用したストリーミングゲームプレイ、およびコンテンツ作成全体は、人々の教育とエンターテイメントのための継続的に成長している分野です。

これを念頭に置いて、パフォーマンスと堅牢なスクリーンキャプチャに対する開発者のニーズを満たすフレームワークを作成しました。

ScreenCaptureKitに会いましょう!

ScreenCaptureKitは、アプリケーションの画面共有体験を作成するのに役立つように設計された、macOSのまったく新しいフレームワークです。

ScreenCaptureKitは、開発者がアプリケーションのニーズに合わせて制御およびトグルを使用して、キャプチャするコンテンツを選択できるAPIを提供します。

また、すべてのフィルターとコントロールをその場で更新できます。

このフレームワークは、グローバルなセーフガードでプライバシーを念頭に置きながら、ディスプレイのネイティブ解像度とフレームレートまで高品質とパフォーマンスを提供します。

このセッションでは、ScreenCaptureKitフレームワークを使い始めるお手伝いをします。

基本を説明したら、より高度なトピックについては「ScreenCaptureKitを次のレベルに引き上げる」をご覧ください。

まず、フレームワークの主な機能について説明します。 フレームワークの主な機能について説明します。

次に、APIの概要で主要なScreenCaptureKit構造について説明します。

次に、フィルターと設定でストリームを設定する方法を紹介します。

そして最後に、ビデオとオーディオのサンプルをアプリケーションにストリーミングする方法を説明します。

ScreenCaptureKitの主な機能から始めましょう。

ScreenCaptureKitでは、共有またはフィルタリングするコンテンツの種類を指定できます。

ディスプレイ、アプリケーション、ウィンドウ、およびそれに付随するオーディオの任意の組み合わせから画面コンテンツをキャプチャできます。

ScreenCaptureKitは、ピクセルフォーマット、色空間、フレームレート、解像度、オーディオ側ではサンプルレートやチャンネル数などのコントロールなど、さまざまな開発者コントロールをサポートしています。

また、これらのフィルタと構成はすべてその場で調整できるため、アプリケーション設計の柔軟性が向上します。

また、ディスプレイのネイティブ解像度とフレームレートまで最大48kHzのステレオとビデオサンプルのオーディオサンプルを提供するために、ScreenCaptureKitはパフォーマンスに焦点を当てており、既存のキャプチャ方法よりも低いCPUオーバーヘッドでMac GPUのパワーを活用します。

もちろん、ScreenCaptureKitはプライバシーを念頭に置いて構築されており、フレームワークを使用するすべてのアプリケーションにグローバルなプライバシー保護を提供します。

フレームワークは、ビデオおよびオーディオコンテンツをキャプチャする前に同意を必要とし、選択はシステム環境設定の画面録画プライバシー設定に保存されます。

ScreenCaptureKitが何であるかを見たので、APIで最も重要な概念をいくつか紹介します。

ScreenCaptureKitフレームワークはSCStreamを中心としています。

SCStreamは、startやstopなどの制御メソッドを処理し、SCShareableContent、SCContentFilter、SCStreamConfigurationとともに作成されます。

これらのオブジェクトは、キャプチャするコンテンツとキャプチャ方法を決定します。

作成して開始すると、メディアサンプルはSCStreamOutputプロトコルを介してアプリケーションに配信されます。

それについては後で詳しく説明します。

では、APIを使用してアプリケーションでストリームを設定する方法を紹介します。

ストリームを設定するときに慣れ親しんだいオブジェクトは次のとおりです。

これらは、キャプチャするものと、キャプチャの品質とパフォーマンスを決定するオブジェクトです。

最初に入りたいのはSCShareableContentです。

このデスクトップには、ウィンドウ、アプリケーション、およびディスプレイ自体があります。

ScreenCaptureKitには、共有したいコンテンツを構築するために使用できる、これらのそれぞれに対応するクラスがあります。

まず、SCDisplayを見てみましょう。 見てみましょう。

ScreenCaptureKitは、ディスプレイ識別子とサイズプロパティの幅と高さを含む読み取り専用プロパティを使用して、ディスプレイをSCDisplaysに分類します。

ディスプレイ内には、多くの異なる実行中のアプリケーションがあり、これらのそれぞれが対応するSCRunningApplicationを持つことになります。

SCRunningApplicationsには、バンドル識別子、アプリケーション名、プロセス識別子などのアプリケーションレベルの情報の読み取り専用プロパティがあります。

この例では、KeynoteとSafari用のSCRunningApplicationがあります。

そしてもちろん、これらのアプリケーションにはウィンドウがあります。

これらのウィンドウには、ウィンドウID、フレーム、タイトル、ウィンドウが画面上にあるか最小化されているかなど、ウィンドウを定義する読み取り専用プロパティを持つ対応するSCWindowがあります。

SCWindowには、独自のアプリケーションもあります。

この場合、両方のSafari SCWindowsは同じSafari所有アプリケーションを持つことになります。

SCWindows、SCRunningApplications、およびSCDisplaysが組み合わさって、SCShareableContentで共有できるコンテンツを提供します。

デバイス上のすべての共有可能なコンテンツのリストを取得するか、特定のパラメータを指定することができます。

人々が共有したいものを選択できるように、画面上にあるすべてのアプリケーションとウィンドウを一覧表示したいとします。

さて、ScreenCaptureKitにはそのためのシンプルなAPIがあります。

この短いコードスニペットは、developer.apple.comで入手可能なキャプチャサンプルコードからのものです。

画面上にあるウィンドウのみが、関連するSCWindows、SCApplications、SCDisplaysを含むSCShareableContentで返されます。

そして、共有可能なコンテンツができ、フィルターを作成できます。

SCContentFiltersには、主に2つのタイプがあります。複数のディスプレイを移動する際にウィンドウをキャプチャする表示に依存しないウィンドウフィルターと、特定のウィンドウとアプリケーションを含めるか除外するオプションを持つ表示依存フィルターです。

ここでの簡単な注意点は、オーディオキャプチャはアプリケーションレベルでのみフィルタリングできるということです。

フィルタが何であるかを示すために、いくつかの例を紹介します。基調講演ウィンドウの共有にしか興味がないと想像してみてください。

ディスプレイ間を移動するウィンドウをキャプチャする、ディスプレイに依存しないウィンドウフィルターを選択します。

ディスプレイ上のすべてのコンテンツを共有したい場合でも、除外したい特定のコンテンツがあるかもしれません。

たとえば、独自のキャプチャアプリケーションを除外することで、ミラーのホール効果を回避したいと思うでしょう。

また、特定のウィンドウやアプリケーションに機密情報がある可能性があり、それをキャプチャからも除外したいと思うでしょう。

これらのシナリオはすべてSCContentFilterによって処理されるので、コードに飛び込んでこれを行う方法を見てみましょう。

これは私が以前に示したコードスニペットです。

共有可能なコンテンツが照会された後、コードはキャプチャサンプルアプリと同じbundleIdentifierを持つアプリケーションを探します。

次に、表示依存コンテンツフィルタは、ストリームからアプリを除外します。

コンテンツフィルターに加えて、ScreenCaptureKitはストリームごとに調整できる品質とパフォーマンスのコントロールを提供します。

これらのコントロールはSCStreamConfigurationで設定できます。

ビデオコントロールの一部には、出力解像度、フレームレート、およびマウスカーソルを表示するかどうかが含まれます。

オーディオ側では、オーディオを有効にしたり、サンプルレートを変更したり、チャンネル数を調整したりできます。

これらのパラメータが機能する可能性のあるいくつかのシナリオを案内します。

メモやスプレッドシートなど、テキストの明瞭さが重要な低モーション画面コンテンツを共有する場合は、キャプチャの出力解像度を毎秒10フレームで4kに設定します。

また、コンテンツにはオーディオがないため、オーディオを無効にしておくことができます。

しかし、最近の休暇のビデオを共有するなど、ハイモーションコンテンツの場合、出力解像度を1080pに下げ、1秒あたりのフレーム数を60に増やすことで、解像度よりもフレームレートを優先する必要があります。

また、カーソルの動きが気を散らす可能性があるため、カーソルを非表示にすることをお勧めします。

また、より没入感のある体験のために、オーディオキャプチャを有効にすることもできます。

これらのコントロールはすべて、SCStreamConfigurationのさまざまなプロパティで設定できます。

ハイモーションコンテンツを共有するための1つの可能な構成を次に示します。

このコードサンプルでは、キャプチャの出力解像度が1080pに設定されています。

次に、毎秒60フレームでキャプチャするために、最小フレーム間隔を1/60に設定します。

そして最後に、ストリーム設定はカーソルを非表示にします。

オーディオ側では、まずcaptsAudioをtrueに設定してオーディオを有効にし、次にサンプルレートを48kHzに設定し、チャンネル数を2に設定します。

SCContentFilterとSCStreamConfigurationを使用すると、アプリケーションのニーズに合わせてスクリーンキャプチャを設定するために必要な情報があります。

一緒にSCStreamを作成できるようになりました。

概要に戻りましょう。

目的のフィルタと設定でストリームを初期化する必要があります。

また、エラーを処理するためにオプションのデリゲートを渡すこともできます。

設定が完了したら、スタートキャプチャを呼び出すことができ、ScreenCaptureKitは利用可能なときにサンプルをSCStreamに提供します。

フィルターと設定を作成すると、コードでストリームを開始するのは簡単です。

お見せしましょう。

もう一度、必要なフィルタと設定で、SCStreamオブジェクトを初期化できます。

キャプチャサンプルプロジェクトでは、selfはエラー処理デリゲートとして渡されます。

SCStreamが作成されると、startCaptureを呼び出すことができます。

ストリームを初期化して開始したら、次のステップはメディアサンプルをアプリケーションに取得することです。

オーディオとビデオのサンプルは、CMSampleBuffersの形でアプリケーションに送信されます。

ストリームからこれらのメディアサンプルを取得するには、SCStreamOutputプロトコルを実装するオブジェクトをストリームに追加する必要があります。

ストリーム出力を追加するときは、ハンドラーキューを指定することもできます。

これは、サンプルを余分なディスパッチを必要とせずに特定のキューで配信したい場合に便利です。

キューを指定しない場合、デフォルトのキューが使用されます。

ストリームが開始され、出力が追加されると、ScreenCaptureKitは新しいサンプルが利用可能になったときにコールバックを提供します。

では、メディアサンプルをコードで入手する方法を紹介します。

これは、新しいメディアサンプルが利用可能になったときに呼び出されるSCStreamOutputProtocolの実装です。

ScreenCaptureKitは、これらのサンプルをCMSampleBuffersとして提供し、ストリームとサンプルタイプを提供します。

サンプルバッファハンドラを実装した後、streamOutputを追加するだけです。

そして、必要な形式で、必要なコンテンツを含むストリームからのメディアサンプルがアプリケーションに配信されます。

ScreenCaptureKitはCMSampleBuffersの形でサンプルを提供するので、その使い方について少し話しましょう。

ビデオ側では、CMSampleBufferはIOSurfaceにバックアップされています。

ScreenCaptureKitは、SCStreamFrameInfoのCMSampleBufferへの添付ファイルも提供します。

この添付ファイルは、あなたが受け取っているビデオサンプルに関する情報を提供します。

ストリームの現在の状態のフレームステータスを確認します。

完全なフレームステータスは、新しいビデオフレームがあることを示します。

アイドルフレームステータスは、ビデオサンプルが変更されていないことを意味するので、新しいIOSurfaceはありません。

それ以外の場合、提供されるサンプルはCMSampleBufferと同じなので、既存のCMSampleBufferユーティリティを使用できます。

ScreenCaptureKitには、フィルタリングされた画面のオーディオとビデオコンテンツを取得するのに役立つAPIが含まれています。

さらに、このフレームワークは、アプリケーションのニーズに合わせてさまざまな開発者コントロールを提供します。

また、あなたが作成するさまざまなスクリーンキャプチャ体験を始めるために、いくつかの基本についても取り上げました。

ScreenCaptureKitのリリースにより、古いキャプチャフレームワークCGDisplayStreamとCGWindowListは今後廃止されます。

このScreenCaptureKitの紹介で、あなたが私と同じくらい興奮していることを願っています!

より高度なトピックを見る準備ができたら、「ScreenCaptureKitを次のレベルに引き上げる」に進んでください。

見てくれてありがとう!

。