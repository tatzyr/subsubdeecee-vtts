10072

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私は健康アプリのエンジニアであるSara Frederixonです。UIKitでSwiftUIを使用することについてお話しします。

多くの人と同じように、私は既存のUIKitアプリに取り組んでいます。

私にとって、これは健康アプリです。

健康アプリには、人々が自分の健康データを理解するのに役立つ多くの視覚化がありますが、これらのビューを構築することは非常に複雑になる可能性があります。

私はSwiftUIを利用することに興味があったので、UIKitとSwiftUIチームと協力して、両方を同じアプリに統合する方法を学びました。

このビデオでは、独自のUIKitアプリでSwiftUIを使い始めるのがいかに簡単かをお教えします。

まず、既存のUIHostingControllerについて説明します。これには、さらに柔軟性を追加するいくつかの新しいアップデートがあります。

次に、アプリにすでに存在するデータをSwiftUIビューに入力する方法と、そのデータが変更されたときにSwiftUIビューを確実に更新する方法について説明します。

次に、SwiftUIを使用してUICollectionViewとUITableViewセルを構築できるエキサイティングな新機能について説明します。

最後に、セル内でSwiftUIを使用しているときに、コレクションとテーブルビューでデータフローのユニークな側面について説明します。

UIHostingControllerについて話すことから始めましょう。

UIHostingControllerは、SwiftUIビュー階層を含むUIViewControllerです。

UIKitでビューコントローラーを使用できる場所ならどこでも、ホスティングコントローラーを使用できます。

これにより、UIHostingControllerはSwiftUIの使用を開始する簡単な方法になります。

ホスティングコントローラーの仕組みを調べてみましょう。

ホスティングコントローラーはビューコントローラーです。つまり、ビュープロパティにUIViewが保存されています。

そして、そのビューの中には、SwiftUIコンテンツがレンダリングされる場所があります。

ホスティングコントローラーの使い方の例を見てみましょう。 ホスティングコントローラーの使い方の例を見てみましょう。

ここでは、HeartRateView、SwiftUIビューを作成します。

次に、HeartRateViewをルートビューとしてホスティングコントローラーを作成し、それを提示します。

UIHostingControllerは、すべてのUIKitビューコントローラーAPIで動作します。

別の例を見てみましょう。

私たちは以前と同じHeartRateViewとホスティングコントローラーを持っています。

ここでは、ホスティングコントローラーを子ビューコントローラーとして追加します。

次に、ホスティングコントローラーのビューを配置し、サイズをサイズ化できます。

UIHostingController内のSwiftUIコンテンツが変更されると、ビューのサイズを変更が必要になる場合があります。

iOS 16の新機能であるUIHostingControllerでは、ビューコントローラーの優先コンテンツサイズとビューの本質的なコンテンツサイズの自動更新を有効にすることができます。

UIHostingControllerの新しいsizingOptionsプロパティを使用してこれを有効にできます。

例を挙げてみましょう。

まず、HeartRateViewを作成し、hostingControllerを作成します。

新しいsizingOptions APIを使用して、hostingControllerに優先コンテンツサイズを自動的に更新するように指示します。

次に、modalPresentationStyleをポップオーバーに設定します。

新しいsizingOptions APIを使用すると、ポップオーバーが常にSwiftUIコンテンツに合わせて適切なサイズになります。

UIHostingControllerに精通したので、UIKitアプリの他の部分からSwiftUIにデータを取り込む方法について話し合い、そのデータが変更されたときにSwiftUIビューが更新されるようにしましょう。

これはUIKitアプリの図です。アプリのデータモデルオブジェクトを所有および管理する既存のモデルレイヤーが含まれています。

アプリにはいくつかのビューコントローラーも含まれています。

SwiftUIの使用を開始する場合は、ビューコントローラーの1つ内にSwiftUIビューを持つホスティングコントローラーが必要です。

このSwiftUIビューに、既存のモデルレイヤーがまだ所有しているデータを入力します。

このセクションでは、UIKitとSwiftUIの境界を越えてデータを橋渡しする方法に焦点を当てます。

SwiftUIは、アプリのデータを管理するのに役立つさまざまなデータフロープリミティブを提供しています。

さまざまなオプションを見てみましょう。

SwiftUIビューによって作成および所有されているデータを保存するために、SwiftUIは@Stateと@StateObjectプロパティラッパーを提供します。

SwiftUIの外部で所有するデータに焦点を当てているため、これらのプロパティラッパーは正しい選択ではありません。

だから、私はこのビデオでこれらをカバーするつもりはありません。

SwiftUIビューが所有するデータの詳細については、「SwiftUIのData Essentials」をご覧ください。

SwiftUIの外部データを処理する1つの方法は、ビューを初期化するときに値を直接渡すことです。

SwiftUIが所有または管理していない生データを渡すだけなので、データが変更されたときにUIHostingControllerを手動で更新する責任があります。

例を挙げてみましょう。

これはHeartRateViewという名前のSwiftUIビューです。

このビューには、心拍数拍数PerMinuteという単一のプロパティがあり、値をテキストとして表示します。

HeartRateViewControllerという名前の既存のビューコントローラー内にUIHostingControllerを埋め込むことで、このHeartRateViewを表示しています。

後でルートビューを更新できるように、ホスティングコントローラーへの参照を保存します。

SwiftUI HeartRateViewは値型なので、それ自体で保存すると別のコピーが作成され、UIを更新できないことを覚えておいてください。

HeartRateViewControllerは、HeartRateViewの入力に使用されるデータを所有しています。

このデータはbeatsPerMinuteプロパティに保存され、beatsPerMinuteの値が変更されると、ビューを更新するメソッドを呼び出します。

更新方法の中で、最新のbeatsPerMinute値を使用して新しいHeartRateViewを作成し、そのビューをホスティングコントローラーのrootViewとして割り当てます。

これは、UIKitからSwiftUIにデータを取得する簡単な方法ですが、データが変更されるごとにホスティングコントローラーのrootViewを手動で更新する必要があります。

これらの更新を自動的に実行するために、他のSwiftUIデータプリミティブを調べてみましょう。

@ObservedObjectおよび@EnvironmentObjectプロパティラッパーを使用すると、ObservableObjectプロトコルに準拠した外部モデルオブジェクトを参照できます。

これらのプロパティラッパーを使用すると、SwiftUIはデータが変更されたときに自動的にビューを更新します。

このビデオでは@ObservedObjectプロパティラッパーに焦点を当てますが、前述の「SwiftUIのData Essentials」ビデオでEnvironmentObjectについて詳しく知ることができます。

@ObservedObjectの作成方法を見てみましょう。

最初のステップは、アプリの既存の部分が所有するモデルオブジェクトを取り、ObservableObjectプロトコルに準拠させることです。

次に、モデルをSwiftUIビューに@ObservedObjectプロパティとして保存します。

ObservableObjectをSwiftUIに接続すると、プロパティの1つが変更されたときにビューを更新できます。

HeartRateViewの例に戻って、これを配線しましょう。

私たちのアプリには、プロパティbeatsPerMinuteを含むHeartDataという名前のクラスがあります。

プロトコルに準拠することで、ObservableObjectにします。

次に、@PublishedプロパティラッパーをbeatsPerMinuteプロパティに追加します。

このプロパティラッパーは、SwiftUIが変更に関するビューを更新するトリガーです。

HeartRateViewでは、@ObservedObjectプロパティラッパーで注釈されたプロパティにHeartDataを保存します。

ビューの本文では、HeartDataから直接beatsPerMinuteを表示します。

では、これらをビューコントローラーで一緒に使いましょう。

これが私たちのHeartRateViewControllerです。

HeartData ObservableObjectをプロパティに格納します。

このプロパティはSwiftUIビュー内にないため、ここではプロパティラッパーを使用する必要はありません。

HeartRateViewControllerは、ホスティングコントローラーのrootViewとなるHeartRateViewを作成するために使用されるHeartDataインスタンスで初期化されます。

図は、これがどのように一緒になるかを示しています。

毎分78拍の心拍数を含む現在のHeartDataインスタンスを取得します。

次に、そのHeartDataインスタンスで新しいHeartRateViewControllerを作成し、SwiftUI HeartRateViewに配線します。

数秒後、次の心拍データサンプルが到着すると、心臓データのbeatsPerMinuteプロパティが94に更新されます。

これにより、ObservableObjectの公開されたプロパティが変更されるため、HeartRateViewは自動的に更新され、新しい値が表示されます。

データが変更されたときに、ホスティングコントローラーを手動で更新する必要がなくなりました。

これが、ObservableObjectがUIKitからSwiftUIにデータをブリッジする素晴らしい方法である理由です。

次に、コレクションビューとテーブルビューのセルでSwiftUIを使用することについて話しましょう。

iOS 16の新機能はUIHostingConfigurationで、既存のUIKit、コレクション、テーブルビュー内でSwiftUIのパワーを活用できます。

UIHostingConfigurationを使用すると、追加のビューやビューコントローラーの埋め込みを心配することなく、SwiftUIを使用してカスタムセルを簡単に実装できます。

UIHostingConfigurationについて詳しく掘り下げる前に、UIKitのセル構成を確認しましょう。

セル構成は、UIKitでセルのコンテンツ、スタイリング、および動作を定義する最新の方法です。

UIViewやUIViewControllerとは異なり、設定は単なる軽量構造体です。

作成するのは安価です。

構成はセルの外観の説明にすぎないため、効果を発揮するにはセルに適用する必要があります。

構成は構成可能で、UICollectionViewとUITableViewの両方のセルで動作します。

詳細については、「現代のセル構成」をご覧ください。

それを念頭に置いて、UIHostingConfigurationを使い始めましょう!

UIHostingConfigurationは、SwiftUI ViewBuilderで初期化されるコンテンツ構成です。

つまり、SwiftUIコードを書き始めて、内部に直接ビューを作成できるということです。

ホスティング設定をレンダリングするために、UICollectionViewまたはUITableViewセルのcontentConfigurationプロパティに設定します。

カスタム心拍数セルを構築するために、このホスティング構成でSwiftUIコードを書き始めましょう。

「心拍数」というテキストと心臓の画像を含むラベルを作成することから始めます。

SwiftUIビューは、使用されているコンテキストに基づいてデフォルトのスタイルを受け取ります。

しかし、標準のSwiftUIビュー修飾子を使用してスタイリングのカスタマイズを開始できます。

ラベルにフォアグラウンドスタイルとフォント修飾子を追加して、画像とテキストを太字のフォントでピンク色にしましょう。

通常のSwiftUIコードを書いているだけなので、いつでもコードをスタンドアロンビューに分解できます。

ここでは、HeartRateTitleViewという名前の新しいSwiftUIビューを作成し、持っていたコードを本文に移動し、そのHeartRateTitleViewをホスティング設定で使用しました。

セルに示すように、まったく同じ結果が得られます。

これで、HeartRateTitleView内にビューを追加できます。

スペーサー付きのHStackの中にラベルを入れて、その横にあるテキストビューに現在の時刻を追加しました。

それは今のところかなり良さそうです。

HeartRateTitleViewの下にあるこのカスタムセルにさらにコンテンツを追加しましょう。

これを行うには、ホスティング設定内にVStackを挿入して、HeartRateTitleViewの下にコンテンツを追加できます。

次に、2つのテキストビューをHStackにまとめて90 BPMを表示し、いくつかの修飾子を適用して、必要なスタイルで設定します。

以前にHeartRateTitleViewで行ったように、この新しいコードを独自のSwiftUIビューに移動できます。

これで、同じコードがHeartRateBPMViewの本文に抽出されます。

私たちの細胞は素晴らしく見えますが、追加できる別のアイデアがあります。

iOS 16の新機能は、わずか数行のコードで美しいグラフでデータを視覚化できるSwift Chartsフレームワークです。

それを使って、セルのすぐ内側に小さな折れ線グラフを表示してみましょう。

新しいチャートビューを使用して、最近の心拍数サンプルを視覚化し、セルのBPMビューの横に表示する小さな折れ線グラフを作成します。

チャートを生成するには、心拍数サンプルのコレクションを渡し、すべてのサンプルを接続するラインマークを描画します。

ライン上の各サンプルを示す円記号を追加し、ピンクの前景スタイルを適用して、HeartRateTitleViewに合わせてチャートを着色することができます。

新しいSwift Chartsフレームワークでできることの表面を引っ掻いているだけなので、ビデオ「Hello Swift Charts」をチェックして詳細を確認してください。

完成した心拍数セルは素晴らしく見えるだけでなく、わずか数分で簡単に作ることができます。

UIHostingConfigurationとSwiftUIを使用してカスタムセルの構築を開始するのは簡単です。

UIHostingConfigurationがサポートする4つの特別な機能について話しましょう。

デフォルトでは、ルートレベルのSwiftUIコンテンツは、UIKitのセルのレイアウトマージンに基づいて、セルの端から挿入されます。

これにより、セルコンテンツが隣接するセルやナビゲーションバーなどの他のUI要素のコンテンツと適切に整列されることが保証されます。

場合によっては、異なる余白を使用したり、コンテンツをセルの端まで拡張したりしたい場合があります。

このような場合、UIHostingConfigurationのマージン修飾子を使用して、デフォルトのマージンを変更できます。

SwiftUIを使用してセルの背景の外観をカスタマイズしたい場合は、UIHostingConfigurationで背景修飾子を使用できます。

UIHostingConfigurationの背景とその内容には、いくつかの重要な違いがあります。

背景は、セルのコンテンツビューのSwiftUIコンテンツの下にあるセルの背面でホストされています。

さらに、コンテンツは通常、セルのエッジから挿入されますが、背景はセルのエッジからエッジまで拡張されます。

最後に、セルフサイジングセルを使用する場合、セルの内容のみがセルのサイズに影響します。

次に、コレクションビューリストまたはテーブルビュー内にセルがある場合に使用できるUIHostingConfigurationの2つの特別な機能を調べてみましょう。

リストでは、セルの下の区切り文字は、デフォルトでホスティング設定のSwiftUIテキストに自動的に整列されます。

この例では、セパレータのリーディングエッジが画像を超えて挿入され、セル内のテキストと整列するように注意してください。

ホスティング設定でセパレータを別のSwiftUIビューに揃える必要がある場合は、aligningGuide修飾子を使用してください。

コレクションビューリストまたはテーブルビュー内では、SwiftUIで直接行のスワイプアクションを設定できます。

swipeActions修飾子内にボタンを作成することで、セルをスワイプしてカスタムアクションを表示して実行することができます。

このビデオのサンプルコードをダウンロードして、完全な例を見つけてください。

スワイプアクションを定義するときは、ボタンが表現されたアイテムの安定した識別子を使用してアクションを実行することを確認してください。

インデックスパスを使用しないでください。セルが表示されている間に変更される可能性があるため、スワイプアクションが間違ったアイテムに作用します。

セルでUIHostingConfigurationを使用している場合、タップ処理、ハイライト、選択などのセルの相互作用は、引き続きコレクションビューまたはテーブルビューによって処理されることに注意してください。

これらのUIKitセル状態のいずれかに対してSwiftUIビューをカスタマイズする必要がある場合は、セルのconfigurationUpdateHandler内でホスティング構成を作成し、SwiftUIコードで提供される状態を使用できます。

configurationUpdateHandlerは、セルの状態が変更されるごとに再び実行され、新しい状態の新しいUIHostingConfigurationを作成し、セルに適用します。

この例では、セルが選択されたときに状態を使用してチェックマーク画像を追加します。

UIHostingConfigurationに精通したので、モデルレイヤーからSwiftUIを使用してセルで満たされたUICollectionViewまたはUITableViewへのデータフローを管理する方法について説明します。

私たちの目標は、この病状のリストを構築することです。

この例では、UICollectionViewを使用していますが、説明するすべてがUITableViewに等しく適用されます。

関連するコンポーネントを見てみましょう。

私たちのアプリにはMedicalConditionモデルオブジェクトのコレクションがあり、コレクションビューに表示する予定です。

このコレクションの各アイテムについて、コレクションビューにセルを作成して、その病状を表示したいと考えています。

これを行うには、コレクションビューに接続された差分可能なデータソースを作成します。

次に、データ収集内のMedicalConditionモデルオブジェクトの識別子を差分可能なデータソーススナップショットに入力する必要があります。

差分可能なデータソースのスナップショットには、MedicalConditionオブジェクト自体ではなく、各MedicalConditionの一意の識別子が含まれていることが重要です。

これにより、差分可能なデータソースが各項目の身元を正確に追跡し、後で新しいスナップショットが適用されたときに正しい変更を計算できます。

これらのアイテム識別子を含むスナップショットを差分可能なデータソースに適用すると、コレクションビューが自動的に更新され、各アイテムに新しいセルが作成されます。

各セルは、UIHostingConfigurationのSwiftUIビューを使用して、1つのメディカルコンディションを表示するように構成されています。

SwiftUIで構築されたセルを表示している今、データが変更されたときにUIの更新を処理する必要があります。

別々に処理する必要がある変更には2種類あります。

最初のタイプは、データ収集自体が変更されたときです。

たとえば、アイテムが挿入、並べ替え、または削除されたとき。

これらの変更は、差分可能なデータソースに新しいスナップショットを適用することで処理されます。

拡散可能なデータソースは、古いスナップショットと新しいスナップショットを差分し、コレクションビューに必要な更新を実行し、セルを挿入、移動、または削除します。

データ収集自体の変更はセル内の何にも影響しないため、UIKitまたはSwiftUIを使用してセルを構築するかどうかにかかわらず、これらの種類の変更を同じように処理します。

処理する必要がある2番目のタイプの変更は、個々のモデルオブジェクトのプロパティが変更されたときです。

これらの変更では、多くの場合、既存のセルのビューを更新する必要があります。

差分可能なデータソースにはスナップショットにアイテム識別子しか含まれていないため、既存のアイテムのプロパティがいつ変更されるかはわかりません。

従来、UIKitを使用する場合は、スナップショット内のアイテムを再構成またはリロードすることで、これらの変更について差分可能なデータソースに手動で伝える必要があります。

しかし、セルでSwiftUIを使用する場合、これはもう必要ありません。

ObservableObjectモデルをSwiftUIビューのObservedObjectプロパティに保存することにより、モデルの公開されたプロパティへの変更は自動的にSwiftUIをトリガーしてビューを更新します。

これにより、モデルとセル内のSwiftUIビューとの間の直接接続が確立されます。

変更が行われると、セル内のSwiftUIビューは、差分可能なデータソースやUICollectionViewを経由せずに直接更新されます。

セルのデータが変更されると、新しいコンテンツに合わせてセルが成長または縮小する必要がある可能性があります。

しかし、SwiftUIセルのコンテンツがUIKitを経由せずに直接更新されている場合、コレクションビューはセルのサイズを変更することをどのように知っていますか?

UIHostingConfigurationは、UIKitの真新しい機能を利用して、これを機能させます。

iOS 16では、UICollectionViewとUITableViewのセルフサイズセルもセルフサイズ変更になりました!

これはデフォルトで有効になっているため、UIHostingConfigurationを使用してSwiftUIコンテンツが変更されると、必要に応じて含まれているセルが自動的にサイズ変更されます。

この新機能の仕組みについては、WWDC 2022の「What's New in UIKit」ビデオで詳しく知ることができます。

処理する必要があるデータフローのもう1つの側面があり、それはSwiftUIビューからアプリの他の部分にデータを送り返すことです。

もう一度、ObservableObjectはあなたをカバーしています!

ObservableObjectの公開されたプロパティへの双方向バインディングを作成できます。

ObservableObjectからSwiftUIにデータが流れるだけでなく、SwiftUIはモデルオブジェクトのプロパティに変更を書き戻すことができます。

MedicalConditionセルのテキストを編集可能にすることで、双方向バインディングを作成する簡単な例を見てみましょう。

これが私たちのObservableObject、MedicalConditionです。

IDプロパティに一意の識別子を格納します。

これは、差分可能なデータソースのスナップショットに入力するために使用される識別子です。

そして、この公開されたプロパティは、病状のテキストを保存します。

これは、各セル内に病状のテキストを表示するMedicalConditionViewです。

今、このテキストは読み取り専用なので、編集可能にしましょう。

必要なのは、テキストビューをTextFieldに変更し、ドル記号の接頭辞を追加してMedicalConditionのテキストプロパティへのバインディングを作成することだけです。

テキストフィールドに入力すると、このバインディングにより、SwiftUIは変更をObservableObjectに直接書き戻すことができます。

SwiftUIで双方向のデータフローを設定するのは本当に簡単です。

UIHostingControllerは、SwiftUIコンテンツをUIKitアプリに埋め込む強力な方法です。

SwiftUIビューはホスティングコントローラーのビュー内にレンダリングされ、UIKitでビューコントローラーを使用できる場所ならどこでもホスティングコントローラーを使用できます。

UIHostingControllerを使用する場合は、常にビューコントローラーをビューと一緒にアプリに追加してください。

ツールバー、キーボードショートカット、UIViewControllerRepresentableを使用するビューなど、多くのSwiftUI機能は、適切に統合するためにUIKitのビューコントローラー階層への接続を必要とするため、ホスティングコントローラーのビューをホスティングコントローラー自体から分離しないでください。

比較のために、UIHostingConfigurationをセルに適用すると、SwiftUIビューはUIViewControllerなしでセルでホストされます。

UIHostingConfigurationは、SwiftUI機能の大部分をサポートしています。

しかし、UIViewControllerRepresentableに依存するSwiftUIビューは、セル内では使用できないことを覚えておいてください。

UIHostingControllerとUIHostingConfigurationを使用すると、SwiftUIをUIKitアプリに組み込む2つの素晴らしい方法があります。

SwiftUIは既存のUIKitアプリにシームレスに統合されます。UIHostingControllerを使用して、アプリ全体にSwiftUIを追加します。

UIHostingConfigurationを使用して、コレクションとテーブルビューにカスタムセルを作成します。

また、ObservableObjectを利用すると、データとUIは常に同期されます。

今すぐSwiftUIをアプリに追加しましょう!

見てくれてありがとう!

♪