10005

♪まろやかなインストゥルメンタルヒップヒップミュージック♪

♪

こんにちは、WWDCへようこそ。

私の名前はカリムで、HealthKitのエンジニアです。

HealthKitフレームワークは、素晴らしい健康体験を構築するための基盤を提供し、Apple Watchには、あなたのために物事を監視する多くの健康と安全機能が満載されています。

最も人気のあるものの1つは睡眠追跡であり、より詳細な睡眠データをキャプチャするために更新しています。

今年はHealthKitに他の素晴らしい追加もあります。

Swift asyncでデータのクエリを容易にするために、APIを強化しました。

私たちは、より豊かなワークアウト表現でワークアウトを改善しています。

また、物理的な処方箋のデジタルコピーを含む、視力処方箋を保存するためのサポートを追加しています。

これらすべてのアップデートと、あなたのアプリがそれらをどのように活用できるかについてもっとお話しできることを嬉しく思います。

始めましょう！

睡眠は、私たちの体と心が充電することを可能にする不可欠な機能であり、私はApple Watchを使用して睡眠スケジュールを管理し、睡眠を理解し、改善するのに役立つ洞察を得るのが大好きです。

今年は、睡眠段階を導入することで、睡眠追跡をさらに良くしています。

Apple Watchは、あなたが眠っているときに通過するすべての異なる睡眠段階を自動的に追跡し、このデータは健康アプリからアクセスでき、HealthKitに保存されます。

もちろん、アプリは睡眠段階のデータを読み取って保存することができます。

Apple Watchまたはアプリによって保存された睡眠データは、識別子sleepAnalysisでカテゴリサンプルによってHealthKitで表されます。

レム、コア、ディープの3つの睡眠段階をサポートします。

睡眠データをHealthKitに保存するときは、特定の睡眠段階で連続した期間ごとに1つのサンプルを作成する必要があります。

睡眠サンプル値の列挙型はこんな感じです。

米国睡眠医学アカデミーまたはAASMのスコアリングモデルのステージ1と2に対応するsleepeCoreから始めて、睡眠ステージを表す3つのケースを追加します。AASMスコアリングモデルのステージ3に対応するsleepingDeep。そして最後に、急速な眼球運動ステージに対応するsleepeREM。

スリープステージを追加したので、sleepingUnspecifiedを支持してスリープケースを廃止しています。これは、ユーザーがスリープ状態にあるが、スリープステージが指定されていないことを示しています。

更新された睡眠サンプル列挙型により、HealthKitから睡眠段階データを保存して読み取ることができるようになりました。

特定の段階の睡眠サンプルを読みやすくするために、新しい述語を追加しました。

REM段階で睡眠サンプルを読みたいとしましょう。

まず、sleepREMを値として新しい述語ForSamplesメソッドを使用して述語を作成します。

これで、クエリの作成を開始できます。

sleepAnalysisサンプルタイプと睡眠段階の述語を使用してクエリの述語を作成します。

そして、このクエリ述語を使用して、クエリを作成できるようになりました。

クエリを実行すると、REMステージの睡眠サンプルの配列が返されます。

ただし、未指定を含むすべての睡眠段階のサンプルを読むことに興味がある場合は、述語を構築するときに新しい.allAsleepValuesを使用するようにアプリを更新することが重要です。

昨年からHealthKitを見ていない場合、クエリのためのこの短い構文は、あなたにはなじみがないように見えるかもしれません。

iOS 15.4以降、Swift asyncをサポートするようにクエリAPIを更新しました。

クエリはHealthKitの不可欠な部分であり、Swift非同期サポートにより、より簡潔な構文で使いやすくなっています。

クエリを使用すると、HealthKitからさまざまなデータを読み取ったり、述語を使用して結果をフィルタリングしたり、新しいデータが入ってくるのを監視したりできます。

すべてのクエリはHKQueryのサブクラスです。

一定期間に消費された総カロリーを知ることに興味があるなら、これらの計算統計を取得するための素晴らしいクエリはHKStatisticsCollectionQueryです。

最初の結果を取得するには、クエリのinitialResultsHandlerクロージャを設定します。

また、更新を見ることに興味がある場合は、statisticsUpdateHandlerのクロージャをさらに設定します。

クエリが開始されると、これらのクロージャは結果とともに呼び出されます。

Swift asyncのおかげで、私たちはこれをさらにシンプルにしています。

各クエリには一致するクエリ記述子が追加されるようになったため、HKStatisticsCollectionQueryはHKStatisticsCollectionQuery記述子になります。

Async result(for:) メソッドを呼び出すだけで、最初の結果が得られます。

一方、最初の結果を取得し、更新を監視したい場合は、results(for:)を呼び出し、ループスルーして結果を読み取ることができるAsyncSequenceを返します。

HealthKitは、ワークアウトや消費カロリーなどの関連指標を追跡するのに最適です。

今週消費したカロリーを調べるには、統計収集クエリ記述子を使用できます。

まず、カロリーサンプルと一致する述語でクエリ記述子を作成します。

合計合計が欲しいので、cumativeSumオプションを使用します。

今週のデータに興味があるので、この日曜日をアンカーデートとして使います。

そして最後に、カロリーの合計を1週間の間隔で計算したいです。

クエリ記述子を作成したら、healthStoreオブジェクトでresult(for:)を呼び出すだけです。

返されたstatisticsCollectionオブジェクトは、現在のデータのスナップショットを提供します。

しかし、カロリーの変化に合わせてライブ更新が必要な場合は、結果(for:)を呼び出して、返された非同期シーケンスをループして結果を読み取るのと同じくらい簡単です。

更新の監視が終わったら、ループから抜け出すだけで、クエリが停止します。

では、ワークアウトについて話しましょう。

HealthKitは、カジュアルな自転車に乗る場合でも、レースで限界まで自分自身をプッシュする場合でも、ワークアウトとそのすべての関連指標を節約するのに最適な場所です。

そして、多くの場合、ワークアウトには複数の異なる活動が含まれる場合があります。

インターバルトレーニングで同じ運動を繰り返したり、水泳、サイクリング、ランニングを含むトライアスロンレースに参加したりすることができます。

これらのタイプのワークアウトと各アクティビティの関連統計をキャプチャできるように、iOS 16とwatchOS 9のワークアウトAPIを更新しています。

これは私が最近行ったスイムバイクランニングワークアウトのタイムラインです。

私は水泳から始め、その後、トレーニングのサイクリング部分の準備に少し時間をかけ、最終的に走りました。

各アクティビティはHKWorkoutActivityオブジェクトで表されます。

各ワークアウトアクティビティは、アクティビティタイプを含む独自のワークアウト構成で作成されます。

ワークアウトアクティビティには、アクティビティ中に発生したイベントのリストがあります。

また、各アクティビティの統計を読むことができます。これは、特定のアクティビティ中に何が起こったのかを分析することだけに興味がある場合に最適です。

私のタイムラインに戻ると、私の3つのアクティビティは適切なアクティビティタイプで設定されています。

活動は時間内に重複することはできません。

また、各活動の間に移行期間がある可能性があるため、連続している必要はありません。

移行期間中に何が起こったかを分析することに興味がある場合は、トランジションタイプでトランジションごとにHKWorkoutActivityを作成できます。

これらのアクティビティはすべて、outworkActivitiesプロパティの下のHKWorkoutオブジェクトで保存されます。

HKWorkoutBuilderを使用してHealthKitにワークアウトを追加する場合、アクティビティの追加は、ワークアウト構成、開始日と終了日、オプションのメタデータを含むHKWorkoutActivityオブジェクトを作成するのと同じくらい簡単です。

そして、ワークアウトビルダーでaddWorkoutActivityを呼び出すだけです。

Apple Watchでは、ワークアウトセッションを使用してスイムバイクランニングのワークアウトを追跡し、関連するワークアウトビルダーを使用してワークアウトをHealthKitに保存できます。

私のワークアウトのタイムラインに戻りましょう。

Apple Watchでこのワークアウトを追跡するには、ワークアウトセッションとビルダーを設定する必要があります。

私はswimBikeRunタイプでワークアウト設定を作成することから始めます。

次に、設定を使用してHKWorkoutSessionを作成します。

ワークアウトの開始時に、セッションでstartActivityを呼び出し、関連するワークアウトビルダーでstartCollectionを呼び出します。

セッションとビルダーの準備ができたので、水泳トレーニングの構成と開始日でbeginNewActivityメソッドを使用して最初のアクティビティを追加できます。

各アクティビティの開始時に、ワークアウトビルダーのデータソースを更新して、興味のあるデータタイプのみを収集する必要があります。

これは水泳活動なので、水泳距離を集めたいです。

アクティビティの最後に、終了日を記載してendCurrentActivityを呼び出します。

水泳からサイクリングへの移行期間の分析に興味があるので、水泳が終わったらすぐに新しい移行活動を開始します。

繰り返しますが、これはアクティビティの始まりであるため、もはや関連性がないため、スイミング距離の収集を無効にするためにビルダーデータソースを更新します。

サイクリングが始まる直前に移行活動を終了します。

ワークアウトの残りのアクティビティを同じように追跡できます。

ワークアウトの終了時に、セッションを終了すると、ランニングアクティビティも終了します。

その後、HKWorkoutオブジェクトを保存して返すワークアウトビルダーを完成させることができます。

返されたワークアウトを使用して、totalEnergyBurnedやtotalDistanceなどの関連するメトリックの一部を読み、ワークアウトの概要をアプリに表示できます。

しかし、この小さなプロパティセットはもはや十分ではありません。

totalSwimmingStrokeCountはすべてのトレーニングに関連するものではなく、一部のトレーニングはより多くの指標を収集する場合があります。

あらゆる種類のワークアウトのメトリクスを読みやすくするために、特定の数量タイプの統計を返す新しい方法を支持して、これらのプロパティを廃止しています。

リマインダーとして、この方法はHKWorkoutActivityでも利用でき、活動中に起こったことだけに集中することができます。

これらの統計は、HKWorkoutBuilderまたはHKLiveWorkoutBuilderを使用している場合にのみ、ワークアウトで収集されたサンプルから自動的に計算されます。

このより豊かなワークアウト表現に加えて、分析や視覚化を推進する際に興味のあるワークアウトのみを照会するのに役立つ新しい述語セットもあります。

例を挙げると、これは各活動の平均心拍数を含む私の最近のトレーニングのリストです。

平均心拍数が150を超える高強度のアクティビティでワークアウトを見つけたいです。

まず、ワークアウト活動に作用する新しい述語ForWorkoutActivitiesメソッドを使用して述語を作成することから始めます。

平均心拍数を毎分150拍以上にしたい。

次に、ワークアウトを照会したいので、心拍数述語をワークアウト述語の中にラップします。

次に、その述語を使用してクエリを作成します。

そして、クエリ記述子の結果（for：healthStore）メソッドを呼び出して、述語に一致するワークアウトのリストを取得します。

そして、それは私が興味を持っているトレーニングだけを照会することができる方法です。

私の最近のトレーニングの1つは、4つのランニング間隔で構成されていました。

HKWorkoutActivityを使用することは、これらの間隔をキャプチャするのに最適な方法です。

インターバルワークアウトのすべてのアクティビティがワークアウトと同じアクティビティタイプであることを確認する必要があります。

したがって、ランニングワークアウトの場合、すべてのアクティビティは.runningタイプで設定されます。

ワークアウトアクティビティを使用して間隔を追跡する利点の1つは、各間隔の統計を取得できることです。

これらのアップデートにより、ワークアウトには、その活動とそれらを取り巻くコンテキストのより包括的な画像が含まれるようになりました。

さらに豊かな画像を提供するために、Apple Watch Series 6、SE、およびそれ以降で自動的に収集される新しいランニングメトリック、つまりランニングストライドの長さやワット単位の電力などのメトリックを導入しています。

水泳トレーニングでは、SWOLFスコアを追加しています。

これは、特定の長さで撮影されたストロークの数と、その長さを泳ぐのにかかった時間として定義されます。

このスコアは、Apple Watchに記録された水泳トレーニングのラップイベントとセグメントイベントごとに計算されます。

これらの指標はワークアウトを豊かにし、パフォーマンスをよりよく理解することができますが、ワークアウトが終了した後に記録されるもう1つの重要な指標は、心拍数の回復です。

これは、運動後に心拍数がどれくらい速く下がるかの推定値であり、ストレス後に心臓がどのように回復するかを理解し、潜在的な健康上の問題を明らかにするために使用できます。

iOS 16では、新しいカーディオリカバリーデータタイプを導入しています。

ヘルスアプリからアクセスでき、アプリはこのデータをHealthKitで読み取り、保存することができます。

心拍数の回復は、識別子.heartRateRecoveryOneMinuteを持つ数量タイプです。

各心拍数回復サンプルに関する追加のコンテキスト情報をメタデータとして追加できます。

最近のスイムバイクランニングワークアウトで、私は自分自身を限界まで押し上げ、心拍数の回復率を観察しました。

トレーニングを完了するのに約3時間半かかりました。

走っているとき、毎分184拍の最大心拍数に達しました。

そして、トレーニングの1分後、私の心拍数は50拍下がりました。

Apple WatchでHKLiveWorkoutBuilderを使用すると、心拍数の回復サンプルと周囲のコンテキストがワークアウト後に自動的にHealthKitに保存されます。

それ以外の場合は、心拍数回復サンプルを保存するために、.heartRateRecoveryOneMinuteタイプで数量サンプルを作成します。

心拍数はトレーニングの1分間に50拍下がったので、サンプルの量として設定しました。

サンプルの開始日と終了日も設定しました。

次に、回復テストタイプから始めて、追加のコンテキスト情報をメタデータ辞書に入れます。

私のトレーニングは全面的な努力だったので、テストタイプは.maxExerciseです。

私のワークアウトはswimBikeRunだったので、それをアクティビティタイプとして設定しました。

また、HeartRateRecoveryActivity期間キーを使用して、ワークアウト期間を追加することもできます。

最後に、トレーニング中に観察された最大心拍数を追加します。これは毎分184拍でした。

これらのアップデートにより、スイムバイクラン、インターバルトレーニングの追跡がこれまで以上に簡単になりました。

さらに、新しい指標の導入は、ワークアウトのより包括的な画像と、時間の経過とともに進捗状況を評価する新しい方法を提供します。

活動とフィットネスはすべての人に影響を与えるものですが、ビジョンなど、私たちの多くに触れる健康の他の側面があります。

実際、Vision Council of Americaによると、米国の成人の約75%が処方眼鏡やコンタクトレンズによる視力矯正に依存しています。

しかし、これらの処方箋は失うのが簡単で、処方眼鏡やコンタクトレンズを注文するときに持っていなければならないもう1つのことです。

だから、それらを私たちの電話に入れましょう。

iOS 16以降、アプリはHealthKitでメガネとコンタクトの処方箋を保存できるようになりました。

視力処方箋は、visionPrescriptionTypeのサンプルです。

サンプルの開始日は処方箋の発行日に対応し、終了日は有効期限に対応します。

オプションで、物理的な処方箋のデジタルコピーをサンプルに添付できます。

メガネまたはコンタクトの処方箋サンプルは、HKVisionPrescriptionのサブクラスです。

メガネの場合はHKGlassesPrescriptionサブクラスを使用し、連絡先の場合はHKContactsPrescriptionサブクラスを使用します。

各メガネ処方箋は、2つのメガネレンズ仕様オブジェクトを使用して作成されます。各目に1つずつ。

同様に、コンタクト処方箋は2つのコンタクトレンズ仕様オブジェクトで作成されます。

では、老眼鏡の処方箋をHealthKitに保存しましょう。

最初のステップは、各目のHKGlassesLensSpecificationを作成することです。

頂点距離やプリズムなどのいくつかのパラメータはオプションです。

同じように正しいアイレンズの仕様を作成できます。

次に、右目と左目のレンズの仕様で眼鏡の処方箋サンプルを作成します。

この処方箋は私の老眼鏡用なので、説明に追加します。

それから、私は処方箋でヘルスストアのセーブに電話します。

そして、私の処方箋はHealthKitに保存されました。

私もその写真を撮ったので、保存したばかりのサンプルに添付したいと思います。

添付ファイルはHKAttachmentオブジェクトで表されます。

HKAttachmentStoreを使用して、添付ファイルを保存して読みます。

処方箋に添付できるのは、静的な画像またはPDFファイルのみです。

撮影した写真を処方箋サンプルに添付するには、healthStoreを使用してHKAttachmentStoreオブジェクトを作成することから始めます。

次に、処方箋サンプルでaddAttachment(to:)を呼び出します。

添付ファイルの名前を設定しました。

ここにPNGファイルを添付します。 添付します。

そして最後に、ファイルのURLを渡します。

添付したばかりの処方箋には、レンズの仕様だけでなく、私のフルネームや生年月日などの機密情報が含まれています。

HealthKitの中核的な原則の1つは、プライバシーを保護し、共有するデータを常に管理できるようにすることです。

添付ファイルを含む処方箋で意図したよりも多くのデータを簡単に共有できるため、処方箋の新しい承認モデルを導入しています。

読み取り許可は、処方箋オブジェクトごとに個別に付与されます。

ユーザーは、アプリへのアクセスを許可する処方箋を正確に選択し、いつでも選択を更新できます。

ビジョン処方オブジェクトの承認を要求するための新しいAPIがあります。

他のデータタイプと同様に、クエリを使用して、アプリがアクセスできる処方箋を読むことができます。

特定の処方箋にしか興味がない場合は、述語を使用できます。

承認を要求するには、visionTypeを使用してhealthStoreのrequestPerObjectRead Authorizationメソッドを呼び出すだけです。

そうすると、常にアプリに承認プロンプトが表示され、述語に一致するすべての処方箋のリストが表示されます。

最高のユーザーエクスペリエンスを確保するために、適切なコンテキストで承認を求めていることを確認してください。

これらは、より良い健康とフィットネス体験を提供するためにアプリを強化するためにHealthKitに追加した新しいもののほんの一部です。

あなたが次に何を作るかを見るのが待ちきれません。

素晴らしいWWDCをお過ごしください。ご不明な点がございましたら、開発者フォーラムで喜んでお手伝いします。

♪