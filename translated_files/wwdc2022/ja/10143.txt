10143

♪ ♪

ボブ：こんにちは、私はシニアiOSデバイス管理エンジニアのボブ・ホワイトマンです。

企業および教育環境における管理対象デバイスのための重要な新しいセキュリティ機能を皆さんと共有できることを嬉しく思います。

まず、デバイスのセキュリティの状況を見直すことから始めましょう。

ユーザーは、ウェブサイト、アプリケーションサーバー、データベースなどの組織リソースにアクセスする必要があります。

そして、これらのリソースにアクセスしたい攻撃者もいます。

リソースを保護するための古典的なモデルは、境界セキュリティです。

イントラネットの周りにセキュリティ境界を描き、正当なクライアントを許可し、脅威を拒否するファイアウォールまたはVPNを立てます。

しかし、このモデルは、人々が現代の組織とやり取りする方法に追いついていません。

クラウドサービスプロバイダーは、リソースを境界外に置きます。

脅威は境界の内側から開始できます。

そして、脅威は、境界を突破するために正当なクライアントを偽装する可能性があります。

より現代的なセキュリティモデルは、ネットワーク境界を信頼していません。

代わりに、各リソースは独自の信頼評価を実行します。

これはゼロトラストアーキテクチャの中核原理です。

信頼評価は機能と考えることができます。入力はクライアントに関する姿勢情報であり、出力はアクセスを許可または拒否する決定です。

信頼の評価を正しくすることが重要です。

偽陰性はユーザー活動の邪魔になるか、さらに悪いことに、偽陽性は攻撃者があなたのリソースにアクセスすることを可能にします。

そして、それは正確な姿勢情報を持つことも重要であることを意味します。

姿勢の一般的な要素を調べてみましょう。

クライアントとその要求に関する利用可能なすべての情報を使用します。誰が要求を行うのか、どのデバイスを使用しているのか、どこにいるのかなどです。

信頼評価は、異なるリソースにアクセスするための姿勢内で異なる詳細を使用する場合があります。

低セキュリティのリソースにアクセスするには、ユーザーのIDのみが必要ですが、重要なインフラストラクチャにアクセスするには、すべてのポスチャ項目を評価する必要がある場合があります。

どの詳細が関連するかを決めるのは組織次第です。

姿勢の中心的な要素の1つは、ユーザーのアイデンティティです。

これは、誰がリクエストをしているかを示します。

Appleデバイスは、アプリ、ウェブサイト、アカウントのユーザー認証を容易にするために、組み込みのKerberos拡張機能を含むExtensible Single Sign On機能など、ユーザーIDをサポートするいくつかの技術を提供しています。

また、新しい登録シングルサインオン機能により、アプリはユーザー登録の登録プロセス中および登録後にユーザー認証を容易にします。

しかし、このセッションはユーザーのアイデンティティについてではなく、デバイスのアイデンティティについてです。

この姿勢の要素は、どのデバイスが要求をしているかを示します。

デバイスが各MDM通信で報告するUDIDは、MDMサーバーが管理しているデバイスを知る主な方法です。

DeviceInformationクエリは、シリアル番号を含むデバイスのMDMサーバー属性も提供します。

管理対象デバイスは、多くの場合、MDMサーバー以外の組織内の他のシステムと通信します。

したがって、多くの場合、MDMサーバーは、デバイスのIDを他のシステムに宣言するクライアント証明書を使用してデバイスを構成します。

デバイスを識別するこれらの方法は私たちによく役立っていますが、デバイスがそれが主張するものであると信頼することに相当します。

状況が変化し、デバイスがこれまで以上に分散されるにつれて、私たちのセキュリティニーズは進化しました。

これに対処するために、デバイスの身元を証明するための強力な新しい方法、マネージドデバイス認証を共有できることを嬉しく思います。

マネージドデバイス認証では、デバイスは要求を行う際に自分自身に関する強力な証拠を提供します。

姿勢情報を改善するので、それに基づく信頼評価がより正確です。

要するに、マネージドデバイス認証とは、正当なデバイスがリソースに確実にアクセスし、攻撃者が阻止されることを意味します。

このリリースでは、iOS 16、iPadOS 16、tvOS 16のマネージドデバイス認証が行われます。

このセッションでは、新しい認証機能の概要から始め、認証を使用する利点を説明してから、実装の詳細を掘り下げます。

まず、証明とは何ですか?

証明は事実の宣言です。

請求を行うエンティティを信頼する場合、その事実が真実であることを受け入れます。

ソフトウェアでは、認証は暗号で署名された事実です。

これは通常、X.509証明書です。

署名者を信頼すれば、その事実が真実であることを受け入れます。

管理対象デバイス認証の場合、事実はデバイスの身元やその他の特性であり、署名者はAppleです。

これらのデバイスの事実の正確性を受け入れるには、Appleを信頼する必要があります。

しかし、Appleがこれまでに書いたすべてのコードを信頼する必要はありません。

Appleの製造記録とオペレーティングシステムカタログにアクセスするSecure EnclaveとAppleの認証サーバーを信頼するだけで済みます。

そして、Appleデバイスにデータを保持している場合、あなたは暗黙のうちにそれらを信頼しています。

認証の力を管理対象デバイスにもたらす方法は次のとおりです。

マネージドデバイス認証は、認証証明書を使用する2つの方法を提供します。

認証の利点をMDMサーバーで利用できるようにするDeviceInformation MDMコマンドを強化しました。

また、ACMEプロファイルペイロードを追加することで、自動証明書管理環境（ACME）プロトコルのサポートを追加しました。これにより、組織のインフラストラクチャ全体で認証の利点を利用できるようになります。

DeviceInformation認証の場合、MDMサーバーはDeviceInformationクエリを発行し、いくつかの新しいキーを指定します。

デバイスはAppleのサーバーから認証を取得し、MDMサーバーに返送します。

その後、MDMサーバーは認証を評価します。

でも気をつけてね。

DeviceInformation認証は、MDMサーバーに「これらのプロパティを持つデバイスが存在する」と宣言します。

MDMサーバーが現在通信しているデバイスが同じデバイスであることを証明するものではありません。

そのために、ACMEペイロード認証が必要です。

ACMEペイロード認証は、デバイスの身元の最も強力な証明を提供します。

ACMEペイロードを含むプロファイルをインストールすると、デバイスは組織のACMEサーバーから証明書を要求します。

これは、SCEPペイロードのインストールと非常によく似ています。

デバイスはACMEサーバーに証明を提供します。

デバイスの身元に関するこの強力な証明に基づいて、ACMEサーバーは、組織の残りのサーバーが信頼する新しいクライアント証明書を発行します。

これら2つの新機能は、認証証明書を使用していくつかのことを証明します。デバイスは本物のAppleハードウェアです。デバイスは特定のデバイスです。デバイスには特定のプロパティがあります。秘密鍵はデバイスにバインドされています。

そして、異なるサーバーに、同じデバイスと通信していることを証明します。

これらの証明はあなたにどのように利益をもたらしますか?

認証は主にセキュリティ機能であるため、いくつかの脅威と認証がそれらを軽減する方法について説明します。

まず、侵害されたデバイスはその特性について嘘をついているので、Appleはその特性を証明します。

OSが侵害されても、認証の信頼性には影響しません。

セキュア・エンクレーブが無傷である必要があるだけです。

または、侵害されたデバイスは、その後変更されたプロパティの古い証明を提供します。

証明のノンスは、事実が最新であることを保証します。

ACMEペイロード認証は、他の脅威を軽減します。

侵害されたデバイスは、MDMサーバーと通信するときに別のデバイスの識別子を送信します。

そのため、Appleは、デバイスがTLS接続を認証するために使用するクライアントIDに関連付けられた方法でデバイス識別子を証明します。

これは、MDMサーバーやその他の組織サーバーが通信しているデバイスを証明します。

または、攻撃者は正当なデバイスから秘密鍵を抽出し、それを使用して要求を行い、正当なデバイスを偽装します。

Appleは、秘密鍵が秘密鍵のエクスポートやインポートに対する非常に強力な保護機能を持つSecure Enclaveによって保護されていることを証明しています。

最後に、攻撃者は証明書要求をハイジャックし、認証局に別のデバイスの証明書を発行して取得します。

Appleは、要求するデバイスの身元を証明書要求に結びつける方法で証明するので、認証局は正当なデバイスにのみ証明書を発行します。

認証は、いくつかの脅威を軽減するセキュリティ上の利点を提供します。

では、あなたの環境でそれらをどのように使用しますか?

マネージドデバイス認証の実装方法の詳細に入りましょう。

まず、DeviceInformationコマンドの機能強化があります。

MDMサーバーは、管理対象デバイスにこのコマンドを発行できます。

リクエストには、サーバーが知りたいプロパティのリストが含まれています。

新しいプロパティ、DevicePropertiesAttestationを追加しました。

クエリ配列に追加すると、MDMサーバーが認証を要求していることを意味します。

認証が新鮮であることを確認するために、MDMサーバーはDeviceAttestationNonceキーを使用できます。

これは、クエリキーと同じレベルでリクエストに表示されます。

このキーはオプションです。

その値はデータオブジェクトで、最大サイズは32バイトです。

認証を要求する例を次に示します。

クエリ配列にはDevicePropertiesAttestationキーが含まれており、32バイトのノンスがあります。

認証の取得が成功すると、応答にはDevicePropertiesAttestationキーが含まれます。

その値はデータオブジェクトの配列です。

配列の各要素は、証明書チェーン内の証明書です。

これは応答の例です。

リーフ証明書は配列の最初に表示され、カスタムOIDにデバイスプロパティが含まれています。

最初の2つのOIDは、デバイス識別プロパティ、シリアル番号、UDIDです。

MDM登録がユーザー登録の場合、証明書から省略されます。

残りのOIDは匿名で、すべての登録タイプで利用できます。

sepOSバージョンは、Secure Enclaveで実行されるオペレーティングシステムのバージョンを指します。

そして、ノンスOIDに正しい値が存在することは、証明書がちょうど生成されたことを証明しています。

MDMサーバーが認証を受信すると、次の順序で慎重に検証する必要があります。

証明書チェーンが期待されるApple認証局に根ざしていることを確認します。

Apple認証局は、Apple Private PKI Repositoryから入手できます。

指定されている場合、リーフ証明書のノンスがDeviceInformationリクエストのノンスと一致することを確認します。

そして、残りのOIDを解析し、その値を評価します。

新しい認証を生成するには、デバイスとAppleのサーバーで重要なリソースを使用するため、新しい認証証明書をリクエストできる頻度にはレート制限があり、現在は7日ごとに1つの新しい認証があります。

新しいノンスを指定して、新しい認証を要求します。

ノンスを省略すると、鮮度が懸念されないため、デバイスは代わりに最新の認証を返すことができます。

そして、ノンスが指定され、そのキャッシュされた認証と一致する場合、キャッシュされた認証が返されます。

MDMサーバーが認証でノンスを検証すると、不一致のノンスを検出し、それがキャッシュのために予想されたかどうかを判断する必要があります。

しかし、それがレート制限だからといって、7日ごとに新しい認証を要求しないでください。

そうすることで、無駄なリソースは言うまでもなく、MDMサーバーがデバイスのプロパティの変更を検出する速さを遅らせるだけです。

代わりに、OSバージョンなど、他のDeviceInformationプロパティの関連する変更を監視します。

そのうちの1つが変更されたら、新しい認証を要求してください。

これにより、レート制限の期限が切れるのを待つのではなく、変更後に認証ができるだけ早く更新されます。

そして、デバイスが侵害され、これらの他の特性について嘘をついている場合に備えて、デバイスを正直に保つために新鮮な証明のための時折ランダムな要求をスリップします。

認証の要求は失敗する可能性があります。

それが起こると、デバイスはまだ応答しますが、一部の情報は省略されます。

DevicePropertiesAttestationフィールドが応答から省略されるか、予想されるOIDまたはその値が省略されます。

障害には多くの潜在的な理由があります。デバイスは、Appleの認証サーバーに到達するネットワークの問題を経験します。

サーバーは100%停止していないため、Appleの認証サーバーに問題がある可能性があります。

または、デバイスのハードウェアやソフトウェアが侵害されているか、Appleのハードウェアではない可能性があります。

これらの最後の3つのケースでは、Appleの認証サーバーは、検証できないプロパティの認証の発行を拒否します。

認証の失敗のさまざまな原因は、無害なネットワークの不具合から積極的な攻撃までさまざまです。

残念ながら、MDMサーバーが正確な原因を知るための信頼できる方法はありません。

これは、障害に関する情報の唯一の情報源がデバイス自体であり、嘘をついている侵害されたデバイスである可能性があるためです。

では、MDMサーバーは障害をどのように解釈すべきですか?

認証が失敗したときに、常に最悪の事態を想定しないでください。

ゼロトラストアーキテクチャを持っている場合、その処理方法は次のとおりです。

組織はデバイスの信頼スコアを計算し、失敗または予期せず古い証明がそのスコアを下げます。

信頼スコアの低下は、サービスへのアクセスを拒否したり、手動調査のためにデバイスにフラグを立てたり、デバイスを消去して証明書を取り消すことで修復するなど、さまざまなアクションをトリガーします。

これにより、失敗した認証に対する適切な対応が保証されます。

ACMEペイロード認証の実装に移りましょう。

ACMEペイロードのインストールにはいくつかのステップが必要です。

プロセスのさまざまな参加者と、それらの各ステップについて説明します。

私たちはiPhone、iPad、またはApple TVから始めます。

ほとんどの場合、これはMDMサーバーによって管理されます。

ACMEサーバーがあります。

これにより、ACMEプロトコルRFC 8555が実装されているため、組織の認証局からクライアント証明書を発行できます。

そして、認証を発行するAppleの認証サーバーがあります。

最初のステップは、MDMサーバーがACMEペイロードを含むプロファイルをインストールすることです。

ペイロードは、デバイスが生成するキーのプロパティ、デバイスが要求する証明書のプロパティ、およびACMEサーバーから証明書を要求する方法を指定します。

プロファイルのインストールを開始するには、デバイスは要求されたタイプのキーを生成します。

認証を使用するには、キーがハードウェアにバインドされている必要があります。

ACMEペイロードはRSAとさまざまなサイズのキーをサポートしていますが、ハードウェアにバインドされたキーを取得するには、ECSECPrimeRandomを使用する必要があります。

あなたの最良の選択は、最高のセキュリティハードウェアバウンドキーであるため、ECSECPrimeRandom 384ビットキーです。

キーが作成されると、デバイスはACMEサーバーと最初に接触します。

デバイスは、ACMEサーバーとの通信プロセスの残りの部分に使用するURLを指定するDirectoryURLを要求します。

次に、2つのシステムがアカウントと注文を作成します。

サーバーは、device-attest-01検証タイプを提供します。

次に、ACMEサーバーはノンスを生成し、トークンフィールドのデバイスに送信します。

ACMEプロトコルは当初、サーバー証明書の発行に使用されていました。

しかし、ここで使用する検証タイプは、認証を受け取り、クライアント証明書を発行するためのACMEプロトコルの拡張を指定するIETFドラフトで導入されました。

認証は任意です。

ペイロードが認証を指定すると、デバイスはAppleに認証を要求します。

これはDeviceInformation認証とほぼ同じです。

同じOIDを使用し、デバイス識別OIDはユーザー登録では省略されます。

しかし、いくつかの違いがあります。

ノンスは、認証に埋め込む前にSHA-256を使用してハッシュされます。

nonceは、MDMサーバーではなく、ACMEサーバーから来ています。

そして、認証リーフ証明書に一致する秘密鍵は、デバイスが生成したばかりのものです。

認証証明書は秘密鍵と一致しますが、その証明書は認証以外の目的には使用できません。

したがって、デバイスはACMEサーバーから秘密鍵に一致する別の証明書を要求し、この証明書はTLSに適しています。

デバイスは、ペイロードからの証明書要求プロパティを含む証明書署名要求を提供します。

認証チェーンを提供します。

また、ACMEペイロードからClientIdentifierを提供します。

通常、これは、要求の繰り返しを防ぐために、単一の証明書の発行に適したチケットのために使用されます。

ACMEサーバーは、この順序で証明書を発行する前に、要求を慎重に検証する必要があります。

ClientIdentifierが有効で未使用であることを確認する必要があります。

証明書は、正しいApple CAにチェーンアップする必要があります。

認証リーフ証明書の公開鍵は、CSRと一致している必要があります。

ノンスは、ACMEサーバーが以前に送信したハッシュのSHA-256ハッシュと一致する必要があります。

そして、ACMEサーバーは残りのOIDを評価できます。

そして、証明が失敗する可能性があることを覚えておいてください。

ACMEサーバーは、DeviceInformationケースで失敗した認証でレビューしたように、証明書を発行する際に失敗を慎重に検討する必要があります。

ここから、物事は急速に終わります。

ACMEサーバーは、組織CAからクライアント証明書を発行し、それをデバイスに返します。

ACMEサーバーは、クライアント証明書発行の最終権限です。

SubjectAltNameなどのCSRのプロパティを尊重または上書きすることを選択できます。

デバイスは証明書をキーチェーンに保存し、これによりACMEペイロードのインストールが完了します。

これを全部結びつけましょう。

サーバーは、彼らと通信しているデバイスが、それが主張するものであることをどのように知っていますか?

このデバイスは、Appleから認証を取得するとき、ACMEサーバーからクライアント証明書を取得するとき、TLSを使用して他のサーバーと通信するときなど、複数の方法で同じ秘密鍵を使用します。

キーはハードウェアにバインドされているため、これらのアクションはすべて同じデバイスによって実行されたことがわかっています。

そして、私たちはそのデバイスを説明する認証証明書を持っています。

これらを組み合わせることで、組織サーバーはアクセスを許可する際にデバイスの身元に自信を持つようになりました。

証明書とSCEPペイロードと同様に、プロファイル内の他のペイロードは、証明書を使用するためにACMEペイロードを参照できます。

MDM、Wi-Fi、VPN、Kerberos、Safariに使用してください。

これらのシステムはすべて認証の恩恵を受けています。

デバイスは、同時にインストールされた認証を使用する最大10個のACMEペイロードを持つことができます。

同じデバイスに復元しても、管理対象デバイスのバックアップが復元されると、ハードウェアにバインドされたキーは保持されないことに注意してください。

また、マネージドデバイス認証で他に何もしない場合は、MDMクライアントIDにACMEペイロードを使用して、MDMサーバーがどのデバイスを管理しているかを確認できます。

締めくくりましょう。

マネージドデバイス認証を使用して、複数のクラスの脅威を修復します。

DeviceInformation認証を活用して、姿勢のデバイスアイデンティティコンポーネントを改善し、より良い信頼評価を行います。

また、ACME認証を使用して組織のリソースにアクセスする際に、デバイスの身元を証明できるようになりました。

マネージドデバイス認証の実装を楽しみにしています。

一緒に、私たちはあなたのデバイス展開のセキュリティを向上させます。

ありがとう、そして素晴らしいWWDCをお過ごしください。