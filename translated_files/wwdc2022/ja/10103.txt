10103

♪ ♪

こんにちは、ようこそ。

私の名前はAppleのGPUソフトウェアチームのKelvin Chiuです。

今日は、MetalFXアップスケーリングでMetalアプリケーションのパフォーマンスを向上させる方法について説明します。

MetalFXは、Metalアプリケーションにプラットフォームに最適化されたグラフィックエフェクトを提供する新しいAPIです。

高性能のアップスケーリングを可能にし、レンダリング品質を維持しながらアプリケーションのパフォーマンスを向上させます。

高解像度でフレームをレンダリングすると、GPUの時間がかかります。

その時間を短縮するために、通常、より低い解像度でのレンダリングはトリックを行います。

しかし、トレードオフはレンダリング品質が低いことです。

MetalFXアップスケーリングを使用すると、アプリケーションはレンダリング品質を損なうことなく、より低い解像度でフレームをレンダリングし、レンダリング時間を短縮できるようになりました。

MetalFXアップスケーリングは、Appleデバイスで最適に動作するように最適化されています。

そして、あなたのゲームに採用することも簡単です。

MetalFXは2つのアップスケーリング効果を提供しており、詳しく説明します。

空間アップスケーリングは使いやすく、パフォーマンスが大幅に向上します。

一時的なアンチエイリアシングとアップスケーリングは、複数のフレームからの情報を統合して、より高品質の出力を生成します。

次に、これらの効果を使用するためのベストプラクティスについて話します。

最後に、それらを実際に示すデモでセッションを終了します。

空間的なアップスケーリングから始めましょう。

MetalFX Spatialアップスケーリングは、入力の空間情報を分析して、新しいアップスケールされたサンプルを生成します。

空間アップスケーリングの統合は簡単です。

空間的にアップスケールされたカラー出力を生成するには、アンチエイリアス入力色のみが必要です。

典型的なゲームレンダリングパイプラインでは、アンチエイスレンダリングやさまざまな後処理効果など、さまざまなレンダリングパスがあります。

ゲームのトーンマッピングプロセスが完了した直後にMetalFX空間アップスケーリングを追加します。

入力がトーンマッピングされ、知覚色空間にある場合、最高のパフォーマンスを発揮します。

MetalFXの空間アップスケーリングを実際にチェックしましょう。

このチェスシーンは、4K解像度の高品質のリファレンスレンダラーで制作されています。

これは、レイトレースされた反射や影のような複雑なグラフィック効果で、パストレースです。

これは、左側に540pの入力で、サイドバイサイドの比較です...

...そして、右側にMetalFX空間アップスケーリングを備えた1080p出力。

左側のクイーンにズームインすると、画像には詳細がなく、低解像度です。

右側では、空間的にアップスケールされた出力は、よりシャープな反射とより洗練されたエッジを持っています。

次に、MetalFXの空間アップスケーリングを実装する方法を説明します。

Metalでは、通常、コマンドをコマンドバッファにエンコードし、効果の入力を生成するコマンドエンコーダを作成します。

同様に、MetalFXエフェクトオブジェクトを作成して、コマンドをコマンドバッファにエンコードし、エフェクトを実行できます。

最後に、MetalFX出力を利用するコマンドをエンコードする3番目のコマンドエンコーダを作成します。

作成に費用がかかるため、アプリケーションが最初に起動したとき、またはディスプレイが解像度を切り替えたときにのみ、新しい空間スケーラーオブジェクトを作成する必要があります。

まず、MTLFXSpatialScalerDescriptorを作成して設定します。

次に、makeSpatialScaler()メソッドを呼び出してスケーラーオブジェクトを作成します。

初期化コードでは、記述子から始めます。

入力テクスチャと出力テクスチャの幅と高さの両方を塗りつぶします。

次に、後でスケーラーオブジェクトに設定するテクスチャのテクスチャ形式を設定します。

色処理モードを設定します。

これは、入力と出力がどの色空間にあるかをAPIに伝えます。

値を知覚色空間、線形色空間、HDR色空間のいずれかに設定できます。

記述子が入力されたら、スケーラーオブジェクトを作成します。

スケーラーオブジェクトが作成されたら、オブジェクトのプロパティを好きなだけ変更し、encode()メソッドを呼び出してアップスケーリングプロセスを開始できます。

フレームごとの描画コードでは、スケーリング効果をコマンドバッファにエンコードする前に、スケーラーオブジェクトに正しい入力と出力のテクスチャが設定されていることを確認してください。

空間アップスケーリングは、パフォーマンスを向上させる簡単な方法を提供します。

そして、さらに高品質のレンダリングが必要な場合は、MetalFXの一時的なアンチエイリアシングとアップスケーリングが登場します。

時間的AAとアップスケーリングは、以前のフレームのデータを使用して高品質のアップスケール出力を生成する手法です。

つまり、前のフレームからのアップスケーリングの出力は、現在のフレームアップスケーリングの入力の1つとして使用されます。

一時的なAAとアップスケーリングが以前のフレームからのデータを必要とする理由をよりよく理解するために、まずスーパーサンプリングの概念を確認します。

スーパーサンプリングでは、ピクセルごとに複数のサンプルが計算され、単一のピクセル値に統合されます。

ピクセルごとに統合するサンプルが多ければ多いほど、結果は良くなります。

ただし、1つのフレーム内でピクセルごとに複数のサンプルを計算するには大きなコストがかかります。

1つのフレームでピクセルごとに複数の場所をサンプリングする代わりに、一時的なサンプリングを実行できます。

時間的サンプリングは、特定のフレーム内のすべてのピクセルに対して異なるサンプル位置をレンダリングする概念です。

これにより、大幅に低コストで複数のフレームでスーパーサンプリング品質を実現できます。

複数のフレームからサンプルを蓄積し、サンプル位置を考慮することにより、一時的なAAとアップスケーリングは、ターゲット解像度のピクセルにサンプルを適切に統合し、高品質のアンチエイリアスアップスケール出力を実現します。

ただし、コンテンツはフレーム間で変更されることが多いため、これらの変更を検出するにはより多くの入力データが必要になります。

前のフレーム出力に加えて、テンポラルAAとアップスケーリングには、ジッタリングされたカラー入力と、シーンからの動きと深度のデータも必要です。

それぞれを調べて、なぜ必要なのかを説明します。

ジッタリングカラー入力から始めましょう。

これはジッタなしでレンダリングされた赤い三角形です。

明るい白い輪郭は、レンダリングされている三角形を表しています。

小さな正方形はそれぞれピクセルを表しています。

そして、真ん中の灰色の点は、ピクセルがサンプリングされる場所です。

これは、小さなジッタでレンダリングされたときの同じ三角形の出力です。

灰色の点は、特定のピクセルのサンプリング位置を示しています。

ジッタオフセットは、必要な数のサンプルを完全に収集するために、設定された数のフレームに対して一意である必要があります。

ジッターシーケンスのトピックについては、後で詳しく説明します。

次は現場からの動き情報です。

シーンからの動きデータは、オブジェクトが前のフレームからどれだけ、どの方向に移動したかを示します。

一時的なAAとアップスケーリングは、サンプルを正しく収集するために、モーション情報を使用してバックトラックし、前のフレーム内の対応する場所を見つけます。

もう1つの入力は、シーンからの深さ情報です。

シーンからの深度データは、フォアグラウンドにあるものとバックグラウンドにあるものを示します。

これは、フォアグラウンドエッジのアンチエイリアシングを優先する際に重要であり、以前のフレームからサンプルを収集するときに、他のオブジェクトが新たに公開される可能性のある手がかりを提供します。

最後の入力データは、前のフレームの出力です。

前のフレームの出力には、以前に統合されたすべてのサンプルが含まれており、ピクセルあたりのサンプル数を増やすために、現在のフレームのジッタカラー入力とブレンドされます。

現在のフレームと前のフレームの両方の情報を組み合わせることで、結果の画像に詳細が表示されます。

MetalFXはアップスケールされた出力を追跡するので、現在レンダリングされたフレームから色、動き、深さを渡すだけで済みます。

典型的なゲームのレンダリングパイプラインに戻ると、MetalFXの一時的なAAとアップスケーリングは、これらの効果がアップスケーリングの結果を妨げるため、後処理効果の前に実行する必要があります。

今回はMetalFX Temporal AAとアップスケーリングを使用して、再びチェスのレンダリングです。

これは、左側の1080p入力と右側の4Kアップスケール出力のサイドバイサイド比較です。

クイーンの近くにズームインすると、入力は低解像度でエイリアスされていますが、右側の一時的にアップスケールされた出力は滑らかなアウトラインを持つ高解像度で、反射に細かい詳細があります。

空間スケーラーと同様に、新しい時間スケーラーの作成は高価であり、アプリケーションが最初に起動したとき、またはディスプレイが解像度を切り替えたときにのみ行う必要があります。

まず、MTLFXTemporalScalerDescriptorを割り当てて記入する必要があります。

次に、makeTemporalScaler()メソッドを呼び出して、スケーラーオブジェクトを作成します。

初期化コードでは、記述子から始めます。

入力テクスチャと出力テクスチャの幅と高さの両方を記入します。

次に、後でスケーラーオブジェクトにバインドされるテクスチャのジッタされた色、深さ、およびモーションテクスチャフォーマットを入力として設定します。

最後に、MetalFXがアップスケールされた出力を保存する出力テクスチャのフォーマットを設定します。

記述子が入力されたら、スケーラーオブジェクトを作成します。

スケーラーオブジェクトで、モーションスケールのプロパティを設定します。

これは、アプリのモーションデータをAPIが期待するものにスケーリングするのに役立ちます。

MetalFXは、現在のフレームの位置から前のフレームの位置までの方向で、レンダリング解像度のピクセル空間のモーションデータを期待しています。

例として、1080pのレンダリング解像度を使用します。

クリップ空間座標(-0.75、-0.75)から移動するオブジェクトがあるとします。

スペース座標(0.25、0.25)をクリップします。

モーションデータは(1, 1)として保存されます。

MetalFXがゲームのモーションデータを正しく解釈できるように、モーションベクタースケールプロパティを(-960、540)に設定します。

スケーラーオブジェクトのプロパティは、好きなだけ頻繁に変更できます。

そして、encode()メソッドを呼び出して、アップスケーリングプロセスを開始します。

フレームごとの描画コードについては、まずresetHistoryプロパティを設定します。

アプリケーションが最初のフレームをロードするとき、またはシーンカットがあるときに、これをtrueに設定します。

次に、エフェクトの入力であるテクスチャを設定し、続いて出力テクスチャを設定します。

次に、res逆Depthプロパティを設定して、深度値が逆Zマッピングにあるかどうかを示します。

スケーリング効果をエンコードする前に設定する最後のプロパティは、現在のジッタオフセットです。

ジッタオフセットを正しく取得することは、出力の品質に不可欠です。

ジッターオフセットの設定方法を簡単に見てみましょう。

例として、左側にはジッターでレンダリングされた三角形があります。

右側はピクセルのズームインビューです。

サンプルは(0.625、0.78)にあります。

ピクセルの中心はオレンジ色のドットで表されます。

それは(0.5、0.5)に位置しています。

この例では、ジッターオフセットは(-0.125、-0.28)です。

ジッタオフセットは常に-0.5から0.5の範囲であることに注意してください。

正しいジッタオフセットを提供していることを確認するには、異なるジッタオフセットのシーケンスを使用して、カメラとオブジェクトの動きなしでシーンをレンダリングします。

左側は、誤ったジッタオフセットが指定されている場合の例です。

静的な物体はシフトする可能性があり、細い線はあいまいです。

右側は、正しいジッタオフセットが指定されている場合の出力です。

オブジェクトは所定の位置にとどまり、細い線は徐々に解決されます。

MetalFXの「一時的なAAとアップスケーリング」効果は、アプリケーションのパフォーマンスを向上させ、ネイティブターゲット解像度レンダリングの品質に匹敵するアップスケーリング品質を提供します。

両方のアップスケーリング効果を使用する際に最適な品質とパフォーマンスを得るために、実装のベストプラクティスについて説明します。

空間的なアップスケーリングから始めます。

最高の空間アップスケーリング品質のために、カラー入力はアンチエイリアスでノイズフリーであるべきです。

これは、ノイズ効果とエイリアス画像が良好なエッジ決定を妨げ、空間アップスケーリング品質を悪化させるためです。

最高のパフォーマンスを得るには、知覚色処理モードを使用してください。

つまり、入力色は、sRGB色空間で0-1の値でトーンマッピングする必要があります。

そして最後に、より高いテクスチャディテールのために適切な負のミップバイアスを設定します。

空間アップスケーリングに推奨されるミップバイアス計算は、レンダリング解像度幅のlog2をターゲット解像度幅で割ることです。

たとえば、各レンダリング解像度のディメンションを2倍スケーリングすると-1 mipバイアスになり、各ディメンションを1.5xスケーリングすると-0.58 mipバイアスになります。

低いミップレベルは、高周波パターンのテクスチャがちらつく可能性があることに注意してください。

そのようなアーティファクトを見つけた場合は、特定のテクスチャのミップバイアスを調整する必要があります。

次に、TemporalAAとアップスケーリングのベストプラクティスについて話します。

一時的なAAとアップスケーリングから最高の品質を得るには、良いジッターシーケンスを選択することが重要です。

アップスケールされたターゲット解像度で、すべてのピクセルにわたるサンプルの良好な分布を提供するジッタシーケンスを探してください。

通常、出力ピクセルあたり8つのジッタサンプルは、高品質のアンチエイリアスアップスケール出力を生成します。

2倍のアップスケーリングの場合、32のジッターを持つハルトン(2,3)シーケンスを使用して、ジッターされたカラー入力を生成することをお勧めします。

これは、ハルトン（2,3）シーケンスからの最初の32のサンプル場所のプロットで、出力ピクセルごとに約8つのサンプルを生成します。

また、より高いテクスチャの詳細のために適切な負のミップバイアスを設定することも重要です。

時間AAとアップスケーリングの推奨されるミップバイアス計算は、レンダリング解像度幅のlog2をターゲット解像度幅で割って1で減算することです。

たとえば、各レンダリング解像度のディメンションを2倍スケーリングすると-2ミップバイアスになり、各ディメンションを1.5倍スケーリングすると-1.58ミップバイアスになります。

次に、さまざまな状況でミップバイアスが出力にどのように影響するかの例を紹介します。

MetalFXの時間的AAと、0、-1、-2のミップバイアスを使用して、同じシーンの出力をアップスケーリングします。

-2のミップバイアスは最もシャープで明確な出力を生成しますが、0のミップバイアスは最も柔らかく、最もぼやけた出力を生成します。

時間的アップスケーリング効果を使用する回路基板の3つのレンダリングを次に示します。

上から下まで、テクスチャをサンプリングするときに適用されるmipバイアス値は0、-1、および-2です。

回路基板のテクスチャには、小さなトレースワイヤなどの高周波パターンがあるため、-2のミップバイアスはちらつきとモアレ効果を生成します。

しかし、-1のミップバイアスはこれらの効果を大幅に軽減し、0のミップバイアスはそれらを完全に排除します。

低いミップレベルは、一般的により多くの詳細をもたらします。

ミップバイアスの提案を出発点として使用しますが、高周波パターンのテクスチャにミップバイアスを選択するときは注意してください。

これらのプラクティスに従って、MetalFX Temporal AAとアップスケーリングからのアンチエイリアス、高品質のアップスケール出力を確保してください。

最後に、MetalFXアップスケーリングを使用する際のパフォーマンスのベストプラクティスについて説明します。

MetalFXアップスケーリングで最高のパフォーマンスを得るには、2つの非依存的なレンダリングまたはコンピューティングパスで読み書きするために同じリソースをバインドしないように注意する必要があります。

そうすることで、誤った依存関係が生まれます。

金属では、誤った依存関係を避けることは常に良い考えです。

しかし、次に説明するように、これはMetalFXのアップスケーリングにとって特に重要です。

この例では、2つのフレームがあります。

シャドウと後処理パスは完全に無関係であり、リソースの依存関係はありません。

メタルは、次のフレームのシャドウパスと現在のフレームのポストプロセッシングパスと重なります。

ただし、後処理パスがMetalバッファに書き込み、シャドウパスも同じバッファから読み込む場合、Metalは、同じリソースへの読み取りと書き込みの潜在的な危険を同時に回避するために、GPUがこれら2つのパスを並行して実行するのを防ぎます。

フレーム間の誤った依存関係は、MetalFXアップスケーリングのパフォーマンスに悪影響を及ぼす可能性があります。

フレーム間に誤った依存関係がない場合、次のフレームのシャドウパスが前のフレームのMetalFXアップスケーリングと重なっている可能性があることに注意してください。

しかし、フレーム間の誤った依存関係のため、パフォーマンスの低下には、MetalFX Upscalingがプロセスを完了するのにかかる時間も含まれます。

理想的には、異なるフレーム間のワークロードの重複を可能にするために、フレーム間に誤った依存関係がないことを確認し、MetalFXアップスケーリングを使用する際に最適なパフォーマンスを確保する必要があります。

この例では、代わりに、誤った依存関係を防ぐために、後処理とシャドウパス用の別のバッファを作成し、独立したパスを並列に実行することができます。

誤った依存関係を避けることは、MetalFXアップスケーリングを採用する際に常に心に留めておくべきことです。

これら2つの効果のどちらを選択するかを決定する際には、心に留めておくべき考慮事項がいくつかあります。

増え続けるシェーディングコストとピクセル数により、一時的なAAとアップスケーリングはここにとどまります。

ピクセルを償却すると、視覚的な忠実度が一時的に向上し、パフォーマンスが向上します。

優れた時間的AAソリューションをまだ持っておらず、ジッタした色、動き、深度バッファをレンダリングできる場合、MetalFX時間的AAとアップスケーリングは、考慮すべき魅力的なプラットフォーム最適化ソリューションを提供します。

必要な入力がない場合は、またはすでに調整されたAAソリューションをお持ちの場合は、MetalFX空間アップスケーリングの使用を検討してください。

これで、どのアップスケーリング効果を選択するかをよりよく理解できることを願っています。

次に、メタルアプリケーションでライブで実行されているこれらの効果の両方の例を紹介します。

これは、アンビエントオクルージョンや体積霧などのリアルタイムレンダリングアルゴリズムを特徴とする「Modern Rendering with Metal」サンプルコードの「Bistro」シーンを並べて比較します。

左側の1080pのネイティブレンダリングと、右側のMetalFX空間アップスケーリングによる4K出力。

このサンプルには、MetalFX空間アップスケーリングの入力として使用する独自の時間的アンチエイリアスソリューションがあることに注意してください。

スクーターでより密接にズームインする...

左側では、画像は少しぼやけていますが、右側では、空間的にアップスケールされた出力により、よりシャープなエッジでより鮮明な画像が得られます。

ハンドルバーの直線はうまくアンチエイリアスされています。

体の曲線もはるかに滑らかです。

パフォーマンス比較をしましょう。

左側は4Kでのネイティブレンダリングです。

右側は、MetalFX Spatialアップスケーリングからの4K出力です。

カメラが動くにつれて、左側のネイティブレンダリングは不安定なフレームレートで実行されていますが、右側の空間的にアップスケールされた出力ははるかにスムーズです。

次は、多くの反射と影を持つレイトレーシングシーンを並べて比較します。

左側は1080pのネイティブレンダリングです。

右側は、MetalFX Temporal AAとアップスケーリングを備えた4K出力です。

シャンデリアをより密接にズームインする...

左側のネイティブ出力はエイリアスの外観を持っていますが、右側の一時的にアップスケールされた出力は、より細かいディテールを持つ鋭いエッジを持っています。

影はぼやけて見えるのではなく、素敵で鮮明です。

そして、シャンデリアの細かいディテールが認識できるようになりました。

MetalFX Temporal AAとアップスケーリングでは、パフォーマンスの向上も明らかです。

左側は4Kでのネイティブレンダリングです。

右側は、MetalFX Temporal AAとアップスケーリングを備えた4K出力です。

カメラが動くにつれて、左側のネイティブレンダリングは非常に低いフレームレートで実行されていますが、右側の一時的にアップスケールされた出力ははるかにスムーズです。

主要なゲーム開発者は、MetalFX Upscalingの機能に興奮しており、今年後半に「Grid: Legends」、「Resident Evil: Village」、「No Man's Sky」をMacに持ち込む予定です。

次に、フレームワークを使用した初期の作業を紹介します。

このシーンでは、MetalFX Temporal AAとUpscalingを使用して、「No Man's Sky」の信じられないほどのビジュアルと流動的なゲームプレイを見ることができます。

要約すると、MetalFXはアップスケーリングに焦点を当てた新しいAPIです。

空間アップスケーリングは採用が簡単で、大幅なパフォーマンスの向上をもたらし、一時的なAAとアップスケーリングを使用して、より高品質のレンダリングを実現できます。

先ほど話したベストプラクティスに従うことで、MetalFXのアップスケーリングを最大限に活用できます。

ご覧いただきありがとうございます。

♪ ♪