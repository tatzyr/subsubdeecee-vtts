10075

♪インストゥルメンタルヒップホップ音楽♪

♪

「AppKitでSwiftUIを使用する」へようこそ。

私はショートカットに取り組んでいるエンジニアのイアンです。

macOS Montereyでは、ショートカットがmacOSに登場しました。

ショートカットはMacで多くのSwiftUIを使用します。

SwiftUIは、iOSとwatchOSのアプリと共通のビューを共有しながら、プラットフォームのエクスペリエンスをカスタマイズするのに役立ちます。

このビデオでは、ショートカットのいくつかの例を見て、MacアプリにSwiftUIを採用し始める方法を紹介します。

まず、アプリでSwiftUIビューをホストする方法の例を紹介し、AppKitとSwiftUIの間でデータを渡す方法について説明します。

また、コレクションまたはテーブルビューのセルでSwiftUIビューをホストする方法、AppKitに埋め込まれたときにSwiftUIビューのレイアウトとサイジングを処理する方法、SwiftUIビューをレスポンダーチェーンに参加させ、フォーカスできるようにする方法、そして最後に、SwiftUIでAppKitビューをホストする方法についても説明します。

さて、AppKitでSwiftUIをホストする方法から始めます。

ショートカットでは、メインウィンドウにはAppKit分割ビューコントローラーが含まれており、左側のサイドバーはSwiftUIを使用して書かれています。

サイドバービューはSwiftUIリストとして実装されており、リストにはアプリで移動できるすべての場所の行を含むセクションが表示されます。

ビューは、選択したアイテムバインディングを通じて、どのアイテムが選択されているかを追跡します。

選択可能な項目は、SidebarItemタイプのケースとして表されます。

この場合、すでにスプリットビューコントローラーがあるので。

このサイドバービューをホストするには、NSHostingControllerというSwiftUIのクラスを使用します。

SwiftUIサイドバービューは、そのホスティングコントローラーのルートビューとして渡されます。

ホスティングコントローラーは他のビューコントローラーと同様に使用できるため、ここではsplitViewItemとして設定し、splitViewControllerに追加します。

これで、サイドバーは分割ビューでホストされていますが、選択が変更されたときに機能するには、分割ビューの右側に別のページを表示する必要があります。

現在、選択したアイテムの状態はSwiftUI内にのみ存在します。

私たちがする必要があるのは、スプリットビューとサイドバーの間で共有できる場所に移動することです。

これを行う良い方法は、SwiftUIの外部に保存でき、共有する必要がある状態を含むモデルオブジェクトを作成することです。

このオブジェクトをSelectionModelと呼びます。

これで、サイドバーはSelectionModelの状態を読み書きできます。

コードでは、SelectionModelはObservableObjectに準拠したクラスです。

観測可能なオブジェクトであるため、モデルに保存されている状態が変更されたときにSwiftUIはビューをリロードできます。

現在選択されているサイドバーアイテムを保存します。

このプロパティは、選択した項目が変更されたときにSwiftUIサイドバービューが更新できるように公開されています。

誰かがサイドバーの選択を変更するたびに、モデルは詳細ビューに新しいページを表示できます。

AppKitでSwiftUIをホストする方法について説明したので、コレクションとテーブルセルに移りましょう。

他のプラットフォームからショートカットをmacOSに持ち込むと、コレクションビューセルまたはホーム画面ウィジェットにショートカットを表示するために構築された象徴的なSwiftUIビューがすでにありました。

macOSでは、これらの同じビューがNSCollectionViewのセルに表示されます。

アイテムの多いコレクションまたはテーブルビューでは、各セルビューはスクロールするとリサイクルされ、時間の経過とともに異なるコンテンツが表示されます。

セルの再利用が機能していることを確認するには、ユーザーがスクロールするにつれてセルからサブビューを追加したり削除したりしないようにする必要があります。

各セルにSwiftUIビューを表示するときは、単一のホスティングビューを使用し、セルのコンテンツを変更する必要があるときに別のルートビューで更新します。

SwiftUIをホストするコレクションビューセルを構築するために必要なすべては次のとおりです。

この例では、ショートカットビューを表示するセルを構築しています。

各セルには、SwiftUIをホストするためのNSHostingViewが含まれています。

セルはコンテンツで設定される前に作成されるため、これはnilとして開始され、ショートカットを初めて表示する準備が整ったときに設定されます。

displayShortcutメソッドは、ショートカットを表示するようにセルを設定するときにデータソースによって呼び出されます。

このメソッドは、SwiftUI ShortcutViewを作成します。

次に、すでにhostingViewがある場合、そのhostingViewのrootViewは新しいビューに設定されます。

それ以外の場合は、初めての場合は、newHostingViewが作成され、セルのサブビューとして追加されます。

SwiftUIをホストしているセルのライフサイクルは次のとおりです。

まず、セルが初期化され、まだ表示するショートカットがないため、サブビューなしで始まります。

displayShortcutが初めて呼び出されるとき、hostingViewは表示するショートカットビューで作成されます。

これにより、VStack、画像、スペーサー、および2つのテキストビューを含むSwiftUIビュー階層が作成されます。

このセルが画面からスクロールされると、システムによってキューから外される可能性があり、別のショートカットを表示する必要があります。

これが発生すると、新しいShortcutViewが作成され、HostingViewに渡されます。

HostingViewはすでに別のショートカットビューを表示していたため、VStackやスペーサーを含むビューの全体的な構造を再利用し、変更された画像、テキスト、背景のみを更新します。

さて、次はレイアウトとサイジングについて話しましょう。

ホスティングコントローラーとホスティングビューは、SwiftUIビューの理想的な幅と高さに基づいて本質的なサイズを持っています。

SwiftUIは、AppKitレイアウトシステムがビューのサイズを適切に調整するために使用する自動レイアウト制約を自動的に作成および更新します。

ビューも柔軟です。つまり、最小から最大まで、さまざまなサイズをサポートします。

SwiftUIはこれらにも制約を生み出します。

階層にSwiftUIホスティングビューを埋め込む場合は、スーパービューまたは他の隣接するビューに独自の自動レイアウト制約を適用する必要があります。

フレーム修飾子またはその他のSwiftUIレイアウトを使用すると、幅を固定サイズにオーバーライドするなど、作成された制約が更新されます。

ウィンドウはユーザーがサイズ変更できるため、最小サイズと最大サイズがあります。

HostingViewsがウィンドウのトップレベルのcontentViewとして設定されている場合、SwiftUIは表示されるコンテンツに基づいてそのウィンドウの最小サイズと最大サイズを自動的に更新します。

これにより、コンテンツに応じて、ウィンドウを垂直、水平、またはその両方でサイズ変更できます。

ホスティングコントローラーに配置されたSwiftUIビューも、モーダルに提示されたときにコンテンツに基づいてサイズが設定されます。

たとえば、ここに示すように、NSViewControllerのポップオーバープレゼンテーションAPIを使用してホスティングコントローラーを提示することで、SwiftUIビューをAppKitポップオーバーに簡単に配置できます。

presentAsSheetメソッドを使用して、SwiftUIビューをシートとして表示することもできます。

そして最後に、モーダルウィンドウの場合、presentAsModalWindowメソッドを使用して、閉じるまでインタラクションをブロックするウィンドウを表示できます。

ウィンドウはコンテンツに合うようにサイズが決められています。

macOS Venturaでは、NSHostingViewとNSHostingControllerに新しいAPIがあり、自動的に追加される制約をカスタマイズできます。

デフォルトでは、ホスティングコントローラーとビューは、最小サイズ、固有サイズ、および最大サイズの制約を作成します。

ビューを常に柔軟にサイズにしたい場合、またはAppKitの周囲のビューに制約がすでに追加されている場合は、パフォーマンス上の理由からこれらのいくつかを無効にすることをお勧めします。

ホスティングコントローラーの場合、ビューの理想的なサイズが優先コンテンツサイズを決定するために、優先コンテンツサイズオプションを有効にすることができます。

アプリにSwiftUIビューを追加し始めるときは、アプリ内の他のビューと同じように、レスポンダーチェーンとフォーカスシステムに参加することが重要です。

ショートカットでは、エディタはSwiftUIビューとして実装されています。

しかし、エディタは、AppKitに実装されているメインメニューで定義されたメニューバーコマンドを処理する必要があります。

これらのコマンドには、切り取り、コピー、貼り付けなどが含まれます。

アクションを上下に動かすために、独自のカスタムメニュー項目もいくつか実装しました。

AppKitでは、ビュー階層は「レスポンダーチェーン」と呼ばれるビューのチェーンを構成する。

集中したレスポンダーはファーストレスポンダーと呼ばれます。

メニュー項目が選択されると、その項目のセレクタがファーストレスポンダーに送信されます。

しかし、最初のレスポンダーがそのセレクタに応答しない場合、セレクタは、何かがセレクタを処理するか、アプリに到達するまで、次の各レスポンダーに送信されます。

SwiftUIの最初のレスポンダーに相当するのは、フォーカスされたビューです。

フォーカス可能なSwiftUIビューは、キーボード入力に応答し、レスポンダーチェーンに送信されたセレクタを処理できます。

テキストフィールドのような一部のビューはすでにフォーカス可能ですが、フォーカス可能な修飾子を使用して他のビューもフォーカス可能にすることができます。

SwiftUIには、コピー、カット、ペーストなどの一般的なコマンドを処理するためのいくつかの修飾子があります。

これらはペーストボードに出入りする値を渡し、人々があなたのアプリに出入りできるようにするための簡単な方法です。

ショートカットエディタは、onMoveCommandとonExitコマンド修飾子を使用して、矢印キーとエスケープキーを処理します。

onCommand修飾子は、AppKitの一般的なセレクタまたはアプリで定義された独自のカスタムセレクタのいずれかを処理するために使用できます。

ここでは、AppKitのselectAllコマンドと、ショートカットアプリで定義されたmoveActionUpとmoveActionDownコマンドを処理します。

アプリでフォーカスとキーボードのナビゲーション性をテストするときは、多くのコントロールが有効になっている場合にのみフォーカスできるため、キーボードシステム設定を開き、フルキーボードナビゲーションのオンとオフの両方でテストしてください。

キーボードでアプリを機能させるためにできることはもっとたくさんあります。

たとえば、FocusStateやフォーカスされた修飾子などのAPIがあり、どのビューがフォーカスされているかをプログラムで変更できます。

フォーカスとキーボードの詳細については、「SwiftUIのダイレクトとフォーカスの反映」ビデオをご覧ください。

最後に、SwiftUIでAppKitビューをホストすることについて話しましょう。

ショートカットがSwiftUIレイアウト内でAppKitビューをホストしている場合があり、アプリでSwiftUIを採用する際にAppKitビューをホストする必要がある場合があります。

1つの例は、SwiftUIショートカットエディタの内部で、macOS上の他のいくつかのシステムアプリと共有されるAppKitコントロールであるAppleScriptエディタビューが組み込まれています。

SwiftUIは、AppKitビューとビューコントローラーをSwiftUIビュー階層に埋め込むことを可能にする2つの表現可能なプロトコルを提供します。

SwiftUIビューと同様に、representablesはAppKitビューを作成および更新する方法の説明です。

AppKitの多くのクラスには、デリゲート、オブザーバー、またはKVOまたは通知に依存しているため、プロトコルには、ビューまたはビューコントローラーに付随するように実装できるオプションのコーディネーターオブジェクトも含まれています。

ホストされたオブジェクトとそのコーディネーターのライフサイクルは次のとおりです。

ホストされたビューが初期化されることから始めます。

これは、ビューが初めて表示されようとしているときに発生します。

初期化中にSwiftUIが最初に行うことは、コーディネーターを作ることです。

これはオプションですが、委任や状態管理に必要な場合は、独自のタイプを定義し、makeCoordinatorから返すことができます。

コーディネーターの単一のインスタンスは、ビューの存続期間中存在します。

次に、makeNSViewまたはmakeNSViewControllerメソッドのいずれかが呼び出されます。

これは、ビューの新しいインスタンスを作成する方法をSwiftUIに説明する場所です。

コンテキストには、作成されたばかりのコーディネーターが含まれているので、ビューの代理人または他のタイプのオブザーバーとしてコーディネーターを割り当てるのに良い場所です。

ビューが作成されると、SwiftUIの状態や環境が変更されるたびに更新ビューメソッドが呼び出されます。

ここでは、AppKitビューに保存されているプロパティや状態を更新して、周囲のSwiftUIの状態や環境と同期させるのはあなたの責任です。

更新メソッドは頻繁に呼び出すことができるので、ビューに加える変更はできるだけ最小限に抑える必要があります。

何が変更されたかを確認し、変更が行われたときにのみ、ビューの影響を受ける部分をリロードする必要があります。

SwiftUIがホストされたビューを表示し終わると、それは解体されます。

ホストされたビューとコーディネーターの両方が割り当て解除されます。

これらが割り当て解除される前に、表現可能なプロトコルは、必要に応じて状態をクリーンアップできるオプションの実装方法を提供します。

さて、ライフサイクルを知り、表現可能なプロトコルに精通したので、ショートカットがアプリでカスタムスクリプトエディタビューをホストする方法を紹介します。

スクリプトエディタは、ScriptEditorViewと呼ばれるNSViewです。

エディタで書かれたコードは、sourceCodeプロパティを介してアクセスおよび変更することができ、ビューを無効にして変更を防ぐことができます。

スクリプトエディタにはデリゲートもあり、誰かがソースコードを変更するといつでも通知されます。

AppKitビューをホストするときは、まず、ビューがSwiftUIのどこに配置され、どのデータを出入りする必要があるかを考えてください。

ショートカットでは、このビューはコンパイルボタンの横にあるコンテナビューに配置されます。

コンパイルボタンのハンドラは、ビューに入力されたソースコードにアクセスする必要があります。

ソースコードは、Stateプロパティラッパーを使用してSwiftUIに保存されます。

表現可能な状態は、この状態への読み取りと書き込みの両方が必要です。

representableを構築するには、NSViewをホストするため、NSViewRepresentableに準拠したタイプを作成することから始めます。

SwiftUIから設定可能である必要がある各もののプロパティを追加します。

ソースコードにはバインディングが使用され、SwiftUIに保存されている状態を読み書きします。

実装する必要がある最初の方法はmakeNSViewです。

ここでは、ビューの新しいインスタンスを作成する方法と、必要な1回限りのセットアップを行う場所について説明します。

ここでは、デリゲートがコーディネーターに設定されます。

コーディネーターについてもう少し話します。詳細を話します。

次に、updateNSViewを実装します。

これは、ソースコードが変更されたとき、またはSwiftUI環境が変更されたときに呼び出されます。

スクリプトエディタは、sourceCodeプロパティが設定されているときに多くの作業を行うため、すでにビューにある値を比較し、不要な作業を避けるために変更された場合にのみプロパティを設定します。

updateNSViewに渡されるコンテキストには、SwiftUI環境が含まれています。

isEnabled環境キーはスクリプトエディタのisEditableプロパティに渡されるため、SwiftUIビュー階層の残りの部分がそうであれば編集は無効になります。

誰かがビューのソースコードを変更するたびに、ソースコードバインディングは新しい値をキャプチャする必要があります。

これを行うには、ScriptEditorViewDelegateに準拠したコーディネーターを作成します。

コーディネーターは、更新する必要があるソースコードバインディングを含む表現可能な値を保存します。

そして、sourceCodeDidChangeメソッドでは、バインディングはビューから新しい文字列値に設定されます。

最後に、コーディネーターを作成して更新する方法をSwiftUIに伝える必要があります。

まず、新しいコーディネーターを作成するためにmakeCoordinatorメソッドを実装する必要があります。

コーディネーターは、ホストされたビューと同じ寿命を持ち、ホストされたビューと同様に、コーディネーターに追加するプロパティは、表現可能な変更に応じて最新の状態に保つ必要があります。

updateNSViewは、表現可能な変更に格納された値が呼び出されるため、ここでは、コーディネーターの表現可能なプロパティが更新されます。

AppKitをSwiftUIに追加する方法と、SwiftUIをAppKitに追加する方法がわかったので、SwiftUIをアプリに統合し始める必要があります。

始めるのに最適な場所は、サイドバー、またはテーブルとコレクションビューのセルです。

ビューが正しくサイズ設定され、一般的なコマンドとフォーカスが処理されていることを確認してください。

お時間をいただきありがとうございます、そしてあなたが作ったものを見るのが待ちきれません♪