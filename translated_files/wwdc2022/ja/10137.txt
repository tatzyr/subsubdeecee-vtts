10137

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私はドンハオです。

このセッションでは、Swift Chartsを使用して優れたデータビジュアライゼーションを構築する方法について詳しく学びます。

言い換えれば、アプリのチャートで何ができるかの基準を引き上げます。

優れたデータビジュアライゼーションにより、アプリがより有益で魅力的になります。

私たちのアプリで素晴らしいチャートを構築するために、考慮すべきことがたくさんあります。

もちろん、チャートが基礎となるデータを忠実に伝達し、誰もがアクセスできるようにしたいと考えています。

しかし、アプリのチャートは真空状態ではありません。

それらはアプリのユーザーインターフェースの一部です。

ダークモードのようなローカリゼーションやOS機能をサポートする必要があります。

チャートは、UIの残りの部分にシームレスにフィットする適切なレイアウトを持っている必要があります。ダイナミックタイプとデバイスの画面サイズをサポートする必要があります。

また、チャートがすべてのプラットフォームで動作し、最高のルックアンドフィールのための素晴らしいアニメーションを持つことを望んでいます。

Swift Chartsは、これらの基本的な機能の多くを自動的に処理するため、独自のデータを伝え、誰もがアクセスできるようにするための最高のチャートの構築に集中できます。

Swift Chartsは、SwiftUIのように感じる宣言型構文を提供することで、これを実現します。

少量のコードでチャートに欲しいものを指定すると、Swift Chartsは箱から出してすぐに素晴らしいチャートを自動的に生成します。

スウィフトチャートは、カスタマイズオプションの豊富なセットも提供しているので、独自のアプリケーションに合わせてチャートのスタイルを設定できます。

このセッションでは、スウィフトチャートをより深く理解するためのものです。

まず、宣言型構文の基本的な構成要素であるマークとマークの構成について説明します。

Apple製品でチャートを使用する例をいくつか紹介します。

ご覧のとおり、さまざまなデータ、チャートタイプ、スタイルがあります。

チャートの種類ごとに事前に構築されたコンポーネントを提供する代わりに、Swift Chartsは構成によってチャートを作成するというアイデアに基づいて構築されています。

さまざまな方法で組み合わせることで、少数の基本的なビルディングブロックを提供し、幅広いチャートを作成できます。

それがどのように機能するかをお見せしましょう。

これを行うには、例が必要です。

私のチームメイト全員がパンケーキが大好きなので、私たちはさまざまな種類のパンケーキを販売するフードトラックの注文を追跡するアプリを持っています。

これは、過去30日間に配達されたパンケーキの数を示すチャートで、スタイル別に分類されています。

これは棒グラフとして広く知られています。

スウィフトチャートでは、6つの青い長方形のそれぞれをマークと見なします。

マークは、データを表すグラフィカルな要素です。

これは、過去30日間に販売されたカチャパの数を示すバーマークです。

このチャートには6つのバーマークがあり、それぞれがパンケーキスタイルと対応する販売番号を示しています。

これがコードでどのように書かれているか見てみましょう。

ここでは、「最も売れたスタイル、カチャパ」のような説明的なタイトルと空のチャートを含むSwiftUIビューがあります。

ここでのチャートタイプは、単一のチャートを定義するトップレベルビューです。

他のビューを追加するのと同じように、SwiftUIアプリケーションにチャートを追加できます。

残りの講演では、チャートの部分に焦点を当てます。

チャートにマークを追加できます。

ここでは、カチャパとその販売番号を示す単一のBarMarkがあります。

これにより、単一のバーマークが付いたチャートになります。

スクリーンショットに示すように、チャートはユーザーインターフェイスの残りの部分にうまくフィットし、優れたデフォルトスタイルを持っています。

例えば、X軸でうまく丸みを帯びた数字。

名前と販売が異なる別のバーマークを追加すると、2番目のバーになります。

これを繰り返して、より多くのバーを追加できます。

実際のアプリでは、おそらくこれらのマークをプログラムで生成します。

これを行うには、チャートに構造体またはタプルの配列を提供し、ForEachを使用して各要素の値でバーマークを作成できます。

ForEachがチャートの唯一のコンテンツである場合、この場合のように、チャートに直接データを入れることもできます。

多くのSwiftUI修飾子はマークに使用できます。

たとえば、.foregroundStyle修飾子でバーの色を設定できます。

ここでは、名前付きアセットとしてXcodeで作成できる名前付き色に設定しています。

チャートは誰でもアクセスできることが非常に重要です。

デフォルトでは、チャートは自動生成されたアクセシビリティ要素を持つVoiceOverユーザーに公開されます。

.accessibilityLabel と .accessibilityValue 修飾子でこれらをカスタマイズできます。

たとえば、ラベルをパンケーキの名前に設定し、接尾辞「sold」で販売値を設定します。

その結果、VoiceOverユーザー向けのカスタムエクスペリエンスが得られます。

ボイスオーバー:カチャパ、916販売。Injera、850が販売されました。

クレープ、802が販売されました。

Donghao：私たちのアプリは、日々のパンケーキの配達も追跡します。

ここでは、過去30日間に販売されたパンケーキの数を示すビューがあります。

このチャートは、個々の日の詳細なビューを示しています。

このチャートの作り方を見てみましょう。 

ここには、日と売上のデータアレイがあります。

その日は、その日の開始時に日付値で表されます。

棒マークでデータを視覚化します。xは日を示し、ここでの単位パラメータは、日付値が暦日の期間を表し、yはその日の売上を示すことを意味します。

右側に示すように、日々の売上を示す棒グラフが表示されます。

棒グラフは、このデータを視覚化する唯一の方法ではありません。

折れ線グラフを試してみましょう。

私たちがしなければならない唯一の変更は、BarMarkをLineMarkに置き換えることです。

宣言型構文を使用すると、Swiftチャートのチャートタイプを切り替えるのは非常に簡単です。

前のチャートは、時間の経過時的な総売上高を示しています。

しかし、フードトラックサービスは2つの都市で運営されており、平日ごとに2つの都市間の売上を比較して、どこに行くかを決定したいと思います。

このチャートの線は、月曜日から日曜日までの売上を示しています。

各線は都市を表しています。

これがどのように構築されているか見てみましょう。

さて、タプルの配列でここに定義された2つの都市のデータがあるとします。それぞれに都市名と平日の売上が含まれています。

次に、以前に持っていた折れ線グラフを、系列データをループするForEachでラップできます。

2つの都市を区別するために、.foregroundStyle(by:)修飾子を使用して、都市名で2つの行のスタイルを設定します。

ご覧のとおり、スウィフトチャートは自動的に2つの都市の2つの色を選択し、線に色を付け、各色の意味を示す凡例を追加します。

デフォルトの色は、区別しやすいシステム色に選択されます。

色覚異常の人がチャートを読みやすくするために、線に記号を追加してさらに区別することができます。

これは、city をデータとして .symbol(by:) 修飾子を追加することで実行できます。

最後に、線をより滑らかに見せるために、線の補間方法として曲線を使用することができます。

2つのシリーズの折れ線グラフがあっても、私たちはまだバーマークに戻って、それがどのように見えるかを見ることができます。

マークタイプをBarMarkに変更し、バーに関係のない修飾子を削除すると、積み重ねられた棒グラフを取得します。

毎月2つのバーがあるため、バーは自動的に積み重ねられます。

積み重ねられた棒グラフは、2つの都市の総販売額を示すのに最適ですが、2つの都市を比較するにはあまり良くありません。

比較しやすくするために、これを.position(by:)修飾子でグループ化された棒グラフに変えることができます。

これまでのところ、私たちはバーマークとラインマークを見てきました。

スウィフトチャートは、ポイントマーク、エリアマーク、ルールマーク、長方形マークなど、他のいくつかのマークタイプをサポートしています。

これらのマークを組み合わせて、より複雑なチャートを作成できます。

例を見てみましょう。

毎月の1日の平均売上高を示す折れ線グラフから始めましょう。

平均は便利ですが、より極端な値のアイデアを得るために、1日の最小売上高と最大売上高も見たいと考えています。

これらの値をデータに追加することから始めましょう。

データ配列の各要素に毎日の最小値と毎日の最大値を導入します。

次に、xが月を表示し、yが1日の最小値から始まり、1日の最大値で終わるエリアマークで最小値と最大値を視覚化できます。

このようにして、線付きの1日の平均値と、線の周りの面積を含む1日の最小値と最大値を示すチャートがあります。

ラインプラスエリアは、この種のデータを視覚化する唯一の方法ではありません。

他のマークタイプに簡単に切り替えて、より多くのデザインオプションを探索できます。

たとえば、ここではBarMarkを使用しています。

しかし、ラインはバーにはあまり合わないようです。

ラインマークを2点の高さの長方形マークに変更しましょう。

このようにして、長方形のマークは、平均値を示すバーの内側に水平線を作成します。

これらのマークの幅を調整することもできます。

ここでは、たとえば、幅を.6の比率に設定しています。これは、スクリーンショットでわかるように、バーと長方形の幅が月全体の幅の60%になることを意味します。

最後に、すべての月の1日の平均売上高を表示するオプションが欲しいです。

そのためには、まず前景スタイルをフェードグレー色に設定して強調します。

次に、ForEachの外側にルールマークを追加し、yは平均値を表示します。

これにより、水平ルールが追加されます。

ルールが年間平均を表示していることを明確にするために、.annotation修飾子を使用してルールに注釈を追加できます。

これにより、先頭の配置で、ルールマークの上部にテキストラベルが追加されます。

構成によるビルディングチャートの例をいくつか議論しました。

これらの基本的なマークを使用して組み合わせるには、さまざまな方法があります。

ボックスプロット、マルチシリーズ折れ線グラフ、人口ピラミッド、レンジプロット、ストリームグラフ、マルチシリーズ散布図、ヒートマップ、さらにはベクトルフィールドのプロットのように。

これらは、Swift Chartsで構築できる多種多様なチャートのほんの一例です。

次のトピックに飛び込みましょう。

マークプロパティでデータをプロットします。

スウィフトチャートは、定量、名目、時間の3つの主要なタイプまたはデータをサポートしています。

定量データは、販売された製品の数、部屋の温度、在庫の価格などの数値です。

Swift Chartsは、Int、Float、DoubleなどのSwift数値型を定量データとして扱います。

名目データ、またはカテゴリデータは、離散的なカテゴリまたはグループを表します。

例えば、人の名前、大陸、または製品の種類。

文字列またはカスタム文字列値の列挙型を公称データとして使用できます。

時間データは、ポイントまたは時間間隔を表します。

たとえば、特定の日の期間、またはトランザクションの正確な時刻。

スウィフトチャートは「日付」を時間データとして扱います。

チャートは、販売価値などの抽象データをマークのプロパティに変換することで機能します。

X、Y、フォアグラウンドスタイルのプロパティでデータをプロットできるBarMarkを見てみましょう。

この例では、xプロパティで定量的な販売価値をプロットし、yプロパティで名目である名前をプロットします。

結果のチャートは、それぞれがXの売上とYの名前を示す水平バーで構成されています。

名前と販売を交換して、名前がXにあり、販売がYにあるようにすると、代わりに垂直棒グラフを取得します。

ご覧のとおり、BarMarkの動作は、XプロパティとYプロパティでプロットされたデータ型に依存します。

バーの向きは、定量的特性がどこにあるかによって異なります。

では、データをプロットするために使用される3つのプロパティすべてを含む別のチャートを見てみましょう。

ここでは、X、Yのセールス、フォアグラウンドスタイルのシティで時間的な平日をプロットします。

結果のチャートは積み重ねられた棒グラフで、X軸は平日を示し、Y軸は売上を示し、バーは都市ごとに色付けされます。

スウィフトチャートには、データをプロットできる6つのマークタイプと6つのマークプロパティがあります。

データは3種類のものになる可能性があるので、可能な組み合わせの広大な配列があることを覚えておいてください。

これは、Swift Chartsが少数の基本的なビルディングブロックで幅広いチャートデザインをサポートすることを可能にするものです。

Yでの販売など、マークプロパティでデータをプロットすると、Swift Chartsは抽象データをプロパティの適切な値に変換するマッピングを作成します。

この場合、販売値を画面空間のY座標に変換します。

「スケール」という用語を使用して、販売などの抽象データからのマッピングを参照し、Y位置などのプロパティをマークします。

Scaleは、データ値を取り、プロパティ値を返す関数と考えることができます。

たとえば、これは売上を受け取り、バーのY位置を返すyScale関数です。

「スケール」という名前は、位置プロパティの場合、入力値を何らかの要因でスケーリングして合理的な画面座標に変換することが多いという事実に由来しています。

マークプロパティを使用してデータをプロットすると、スケールが作成され、データを対応するマークプロパティに変換します。

たとえば、このチャートには3つのスケールがあり、それぞれ平日をXに、売上をYに、都市をフォアグラウンドスタイルに変換します。

デフォルトでは、Swift Chartsはデータから自動的にスケールを推測するので、箱から出して素晴らしいチャートを得ることができます。

スケール修飾子を使用して、チャート内のスケールを設定できます。

いくつかの例を見てみましょう。 いくつか見てみましょう。

この例では、Yスケールは自動的に0から150と推測されます。

ただし、現在の売上高がどのようなものであっても、常に一貫したYスケールを持つように、Yスケールを修正したいと考えています。

Yスケールが常にゼロで始まり、200で終わるように変更しましょう。

これを行うには、.chartYScale修飾子を使用し、スケールのドメインを0から200に設定できます。

ご覧のとおり、軸はゼロから200になります。

同様に、.chartForegroundStyleScale修飾子を使用して、2つの都市がフォアグラウンドスタイルにマッピングする方法を変更できます。

今、私たちは2つの都市のための新しい色を持っています。

これで、マークを構成し、マークプロパティでデータをプロットする方法がわかりました。

スウィフトチャートが提供するより多くのカスタマイズオプションに飛び込みましょう。

チャートは、軸、おそらく凡例、およびプロット領域で構成されています。

斧と伝説は、チャートを解釈するのに役立ちます。

プロット領域は、2つの軸の間の領域です。

これは、マークでデータをプロットする場所です。

これらの要素はすべて、Swiftチャートでカスタマイズ可能です。

まず、軸と凡例をカスタマイズする方法に関するいくつかの例を見てみましょう。

これは、毎月の総売上高を示すチャートです。

カスタマイズなしで、Swift Chartsはうまく丸みを帯びた値を特徴とするデフォルトの軸を生成します。

現在、X軸には四半期ごとのラベルが表示されています。

毎月ラベルを表示するように変更し、単一文字の月ラベルを使用しましょう。

まず、AxisMarksをコンテンツとして、X軸をカスタマイズするための.chartXAxis修飾子を追加することから始めます。

パラメータのないAxisMarksは、デフォルトの軸を再作成します。

軸の値を変更することから始めましょう。

定期的なカレンダー間隔を持ちたいので、標準ライブラリのストライド関数と同様に、ストライド(by:)を使用できます。

今、私たちは毎月のラベルを持っています。

ただし、スクリーンショットに見られるように、デフォルトのラベルは混雑しすぎているように感じます。

一部のラベルは、十分なスペースがないため、切り捨てられます。

ラベルを1文字の形式に変更しましょう。

これを行うには、AxisGridLine、AxisTick、AxisValueLabelなど、個々のコンポーネントから軸マークを構築しましょう。

狭い月名を使用するようにラベルの形式を設定しましょう。

今、私たちは毎月1通の手紙を持っています。

結果ビルダーに渡された値パラメータは、現在の軸値に関する情報を提供します。

これを使用して、軸マークの存在とスタイルを条件付きで決定できます。

たとえば、ここでは、日付としての値が月の第1四半期であるかどうかをテストする条件があります。

もしそうなら、各四半期の最初の月を異なる前景スタイルで強調することができます。

そうでない場合は、ティックとラベルなしでグリッドラインのみを表示します。

現在、クォーターを表示しているので、フォーマットをクォータースタイルに変更できます。

先ほど行ったカスタマイズでは、四半期データを表示するよりユニークなX軸を取得し、サブグリッドラインは毎月表示されます。

値に加えて、軸マークには、一般的な外観とスタイルを設定できる他のプロパティがあります。

デフォルトの後縁ではなく、Y軸をチャートの前縁に表示させたいとします。位置パラメータを先頭に設定して、それらを前縁に移動することができます。

スウィフトチャートは、軸と視覚化されるデータの種類に基づいて、軸マークのデフォルトのプリセットを提供します。

プリセットパラメータを使用してデフォルトをオーバーライドできます。

たとえば、ここではY軸の.extendedプリセットを使用して、ユーザーインターフェイスの残りの部分との視覚的なアライメントを支援しています。

一部のチャートでは、軸を表示したくない場合があります。

たとえば、ここでのトップセールスチャートの目的は、人々に簡単な概要を提供することなので、軸は本当に必要ではありません。

.Hiddenをチャート軸修飾子に渡して、軸を非表示にすることができます。

凡例の構成は軸に似ています。

たとえば、最高の日と場所を強調するこのチャートでは、すでに不透明度を使用して最高の都市を強調しているため、自動的に生成された凡例を非表示にすることができます。

これを行うには、パラメータとして.hiddenを持つ.chartLegend修飾子を追加できます。

では、プロットエリアについて話しましょう。

.chartPlotStyle修飾子を使用して、チャートのプロット領域を設定できます。

末尾のクロージャでは、元のプロット領域を取り、変更されたプロット領域を返す関数を記述します。

いくつかの例を見てみましょう。 ではいくつかの例を見てみましょう。

場合によっては、プロットエリアに正確なサイズまたはアスペクト比を持ちたいと思うかもしれません。

たとえば、この場合、プロット領域の高さは、チャート内のカテゴリの数によって駆動されることを望んでいます。

これを達成するために、プロット領域に.frame修飾子を適用し、変更されたプロット領域を返すことができます。

これにより、プロットエリアの高さが設定されます。

修飾子を使用して、特別な視覚効果を実現することもできます。

たとえば、このダークモードチャートでは、.background修飾子を使用して、不透明度が.2のピンクの背景を追加し、チャートを少し際立たせます。

そして、同じピンク色の1ポイントの境界線を追加します。

これにより、チャートにユニークな視覚効果が作成されます。

セッションの前半では、XやYなどのプロパティをマークするためにデータ値をマッピングする関数であるスケールについて言及しました。

Swift Chartsは、チャート内のXスケールとYスケールにアクセスできるChartProxyを提供します。

ChartProxy の position(for:) メソッドを使用して、特定のデータ値の位置を取得するか、value(at:) メソッドを使用して、特定の位置でデータ値を取得できます。

これにより、他のビューをチャートと調整できます。

例を見てみましょう。 例を見てみましょう。

私たちはこのインタラクティブなブラッシングビューを構築します。

ここでは、ドラッグジェスチャーでチャートから間隔を選択すると、その間隔を使用して詳細ビューの行をフィルタリングします。

.chartOverlayまたは.chartBackground修飾子からチャートプロキシオブジェクトを取得できます。

これら2つの修飾子は、SwiftUIのオーバーレイと背景修飾子に似ていますが、チャートプロキシを提供します。

この例を構築するには、以前と同じようにベースチャートを定義することから始めます。

次に、チャートプロキシを提供する.chartOverlay修飾子を追加します。

内部には、オーバーレイビューのジオメトリにアクセスできるジオメトリリーダーがあります。

次に、SwiftUIのDragGestureに応答するように設定された長方形ビューがあります。

ドラッグジェスチャーが発生すると、まず開始のx座標とチャートのプロット領域内の現在の位置を見つけます。

これは、ジェスチャーによって提供された場所からプロット領域の原点を差し引くことによって行われます。

これらの座標を取得したら、チャートプロキシを使用して対応する日付値を見つけ、最終的に現在の日付間隔を追跡するSwiftUI状態に設定できます。

範囲状態では、チャートで長方形のマークを定義して、現在選択されている日付範囲を視覚化できます。

この状態は、チャートの下の詳細ビューの内容をフィルタリングするなど、アプリケーションの他の部分を制御するためにも使用できます。

これは、チャートプロキシがどのように機能するかを説明する簡単な例です。

ロリポップのように見えるオーバーレイで選択した日と販売価値を示すこのインタラクティブなチャートなど、多くの興味深い機能を構築するために使用できます。

このセッションでは、マークを作成してチャートを作成する方法、マークプロパティでデータをプロットする方法、チャートをカスタマイズする方法について議論しました。

デザインセッションに行って、チャートで素晴らしいアプリ体験をデザインする方法と、効果的なチャートをデザインする方法について詳しく知ることができます。

Swift Chartsでデータビジュアライゼーションを構築するのを気に入ると思います。

見てくれてありがとう。

♪