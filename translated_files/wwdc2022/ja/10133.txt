10133

アン:こんにちは、ようこそ!

私はアン・ヒッチコックで、watchOSのソフトウェアエンジニアです。

今日は、watchOSで生産性アプリを作成する方法をお見せしたいと思います。

watchOS 6でSwiftUIとIndependent Watchアプリが導入されて以来、Watchアプリでより多くのことを行うことができました。

毎年、watchOSのSwiftUIはより多くの機能を獲得します。

同時に、watchOSは、Watch用のまったく新しい種類のアプリを構築できるキーボードなどの新機能を手に入れました。

やるべきことのリストを追跡するためのアプリを構築するために、これらの機能のいくつかをまとめる方法をお見せしたいと思います。

新しいWatchアプリを作成し、表示するアイテムの簡単なリストを追加し、リストにアイテムを追加してから、アイテムを編集します。

これらの機能を追加するにあたり、Watchアプリの一般的なアプリナビゲーション戦略と、正しいものを選択する方法について説明します。

アイテムを友人と共有して、負荷を共有します。

次に、アプリにチャートを追加して、生産性の傾向を見つけ、モチベーションを維持するのに役立ちます。

また、デジタルクラウンを使用してチャートをスクロール可能にし、より大きなデータ範囲を表示します。

新しいアプリを作成することから始めましょう。

Xcodeで新しいプロジェクトを作成します。

watchOSタブで、[アプリ]を選択し、[次へ]をクリックします。

製品名を選択した後、いくつかの選択肢があります。

最も重要なのは、Watchのみのアプリを作成するか、コンパニオンiOSアプリでWatchアプリを作成するかです。

素晴らしいWatchアプリを作る理由と、コンパニオンiOSアプリが欲しいときについて話しましょう。

素晴らしいウォッチアプリは、お気に入りのワークアウトをすばやく開始できるワークアウトのインターフェースのように、迅速なインタラクションを可能にします。

誰も周りに立って、腕を上げて、タップして何かを見つけようとしたくありません。

優れたWatchアプリを使用すると、重要な情報や機能に簡単にアクセスできます。

グレートウォッチアプリは、アプリの本質的な目的に焦点を当てています。

たとえば、天気アプリは、今日の予報、関連する現在の状況、および簡単な10日間の予報を表示します。

人々が必要な情報や行動を簡単に見つけられるように、アプリの必需品に集中してください。

優れたWatchアプリは、コンパニオンiPhoneとは独立して使用できるように設計されています。

たとえば、連絡先アプリは携帯電話と同期しますが、Apple Watchの連絡先情報にアクセスするためにiPhoneが近くにある必要はありません。

フィットネスアプリのように、Apple Watchでキャプチャされたデータの履歴記録の提供やトレンドの詳細な分析など、WatchアプリのコンパニオンiOSアプリが必要な場合は、多くの理由があります。

私たちのアプリには、焦点を絞った機能セット、迅速なインタラクション、限られたデータがあるため、ウォッチのみのアプリを作成します。

この時点で、作成されたターゲットについて数分を費やしたいと思います。

過去にWatchアプリを構築した場合、プロジェクトにはWatchの2つのターゲットがあります。ストーリーボード、アセット、そしておそらくいくつかのローカリゼーション関連ファイルを含むWatchKit Appターゲットと、すべてのアプリコードを含むWatchKit Extensionターゲットです。

これらのデュアルターゲットは、watchOSの初期の頃からの残り物であり、複数のウォッチターゲットにはもう正当な理由はありません。

Xcode 14以降、新しいWatchアプリには単一のWatchアプリターゲットがあります。

Watchアプリに関連付けられているすべてのコード、アセット、ローカリゼーション、Siri Intentおよびウィジェット拡張機能は、このターゲットに属します。

素晴らしいニュースは、シングルターゲットのWatchアプリがwatchOS 7でサポートされていることです!

最新のwatchOSを実行していない顧客をサポートしながら、プロジェクト構造を簡素化し、混乱や重複を減らすことができます。

WatchKit Extensionターゲットを持つ既存のアプリがある場合、それは引き続き機能し、Xcodeを使用してアプリを更新し続け、App Storeを通じてアプリを公開することができます。

SwiftUIライフサイクルを使用するWatchアプリをすでにお持ちの場合は、Xcode 14の移行ツールを使用して、単一のターゲットに簡単に移行できます。

ターゲットを選択し、[エディタ]メニューから[設定の検証]を選択します。

展開ターゲットがwatchOS 7以降の場合、ターゲットの折りたたみオプションが提供されます。

まだ飛躍していない場合は、シングルターゲットウォッチアプリのシンプルさとSwiftUIのすべての機能を楽しむために、SwiftUIライフサイクルを使用するようにアプリを変換するプロセスを開始する良い機会です。

Xcode 14で簡素化したのはターゲットだけではありません!

また、単一の1024x1024ピクセルの画像のみを要求することで、アプリのアイコンを追加することがはるかに簡単になりました。

アプリのアイコン画像は、すべてのWatchデバイスに表示されるように拡大縮小されます。

ホーム画面、通知、およびiPhoneのWatchアプリのアプリの設定で、デバイスのアプリアイコンでテストしてください。

必要に応じて、特定の小さいサイズのカスタム画像を追加できます。

たとえば、アプリのアイコンに画像の詳細があり、より小さなサイズで失われる場合は、画像の詳細を削除して、それらのサイズの特定のアイコン画像を追加できます。

それでは、タスク項目のリストを追加して、アプリにいくつかの機能を追加しましょう。

タスクのリストのデータモデルを作成することから始めます。

ListItem構造体は識別可能でハッシュ可能であり、表示する説明を与えます。

次に、データを保存し、リスト項目の配列を公開するための簡単なモデルを作成します。

最後に、ビューがモデルにアクセスできるように、モデルを環境オブジェクトとして追加します。

それでは、データモデルを使ってSwiftUIでリストを作成しましょう。

まだタスクがないので、これをプレビューすると空のリストが表示されます。

私たちはそれについて何かをする必要があります。

私たちは人々に彼らのリストにいくつかのタスクを追加する方法を与えるべきです。

人々がタップして新しいアイテムをリストに追加できるボタンを追加したいと思います。

watchOS 9で新しく追加されたテキストフィールドリンクは、ボタンからテキスト入力オプションを呼び出すことができ、アプリで自宅にいるように感じさせるいくつかのスタイリングオプションを提供します。

単純な文字列でTextFieldLinkを作成するか、よりカスタムボタンにラベルを使用できます。

foregroundColor、foregroundStyle、buttonStyleなどのビュー修飾子を使用して、ボタンの外観を変更します。

AddItemLinkビューを作成して、アプリで使用しているTextFieldLinkのスタイリングと動作をカプセル化します。

ボタンにカスタムラベルを使用し、誰かがテキストを入力すると、新しいアイテムをリストに追加します。

TextFieldLinkを使用して新しいリスト項目を追加するボタンを追加することに決めたので、TextFieldLinkをどこに置くかを考える必要があります。

Watchアプリでリストにアクションを追加する場合、いくつかのオプションがあります。

ショートリストの主要なアクションには、リストの最後にあるボタン、ナビゲーションリンク、またはTextFieldLinkを使用します。

リストの最後にアクションをアイテムとして追加することは、世界時計の都市のリストのようなアイテムの短いリストのプライマリアクションに適しています。

ただし、アイテムの長いリストを予想する場合、人々はアクションを実行するたびにリストの最後までスクロールし続ける必要があります。

リストが長い場合、一般的に使用されるアクションには、ツールバー項目を使用します。

ツールバー項目を追加するには、ツールバー修飾子をリストに追加し、アクションビューをコンテンツとして使用します。

これにより、自動ツールバー項目配置で単一のツールバー項目がリストに追加されます。

私はいつもやることリストを短くしておくと思いたいのですが、そうしないとかなり確信しています。

そのため、テキストフィールドのリンクをツールバー項目に入れて、簡単にアクセスできるようにします。

少し時間を取って、私たちが成し遂げたことを復習しましょう。

リストアイテムのモデルを作成し、環境オブジェクトとして保存し、アイテムを表示するリストを作成し、新しいアイテムを追加するためのテキストフィールドリンクを追加しました。

説明だけでアイテムを作成するのは簡単ですが、あまり役に立ちません。

アイテムを完了としてマークする必要があり、優先順位を設定したり、タスクの作業量の見積もりを追加したりする方法が必要な場合があります。

これを行うには、詳細ビューを追加します。

これを行う前に、SwiftUI on Watchのアプリナビゲーション構造のオプションを確認したいと思います。

階層ナビゲーションは、リストと詳細の関係を持つビューに使用されます。

watchOS 9以降、SwiftUI NavigationStackを使用して、このタイプのナビゲーション構造を持つインターフェースを作成します。

ページベースのナビゲーションは、すべてのビューがピアであるフラットな構造のビューに使用されます。

ページベースのナビゲーションの素晴らしい例は、ワークアウトアプリのワークアウト内ビューで、ワークアウト中にワークアウトコントロール、メトリクス、再生コントロールを簡単にスワイプできます。

フルスクリーンアプリには、ディスプレイ全体を使用する単一のビューがあります。

これは通常、ゲームなどのアプリや、単一のメインビューを持つ他のアプリに使用されます。

フルスクリーンビューの場合は、ignosSafeArea修飾子を使用してコンテンツをディスプレイの端まで拡張し、非表示の可視性値を持つツールバー修飾子を使用してナビゲーションバーを非表示にします。

モーダルシートは、現在のビューの上をスライドするフルスクリーンビューです。

これは、現在のワークフローの一部として完了する必要がある重要なタスクに使用する必要があります。

階層的なフローを使用するタイミングと、モーダルシートを使用するタイミングを区別することが重要です。

メールは階層スタイルを使用してメッセージのリストを表示し、各メッセージまたはスレッドを詳細ビューとして表示します。

メッセージの詳細から実行できるアクションがありますが、リストに戻る前にしなければならないことは何もありません。

リストに戻り、新しいメッセージをタップすると、メールはモーダルシートを使用して新しいメッセージビューを表示します。

続行する前に、新しいメッセージの詳細を入力するか、キャンセルする必要があるため、モーダルシートは正しい選択です。

モーダルシートを表示するには、シートの表示状態を制御するプロパティを作成します。

ユーザー インターフェイスのアクションに基づいてプロパティを設定し、プレゼンテーション状態プロパティが true の場合、シート修飾子を使用してカスタム モーダル シート コンテンツを表示します。

カスタムツールバーアイテムをモーダルシートに追加するには、アイテムと一緒にツールバーを追加します。

ツールバーアイテムは、confirmationAction、cancellationAction、破壊的アクションなどのモーダルプレースメントを使用する必要があることに注意してください。

アイテムを編集しており、完了して完了をタップするまでこの単一のタスクに集中したいので、詳細ビューにモーダルシートを使用します。

NavigationStackやプログラマティックナビゲーションの詳細など、SwiftUIのナビゲーションの詳細については、「ナビゲーション用のSwiftUIクックブック」をご覧ください。

詳細ビューに移動する方法を決めたので、リスト項目の構造体を更新します。

推定作業、作成日、完了日を保存する新しいプロパティがあります。

人々にこれらの詳細を表示および編集する方法を提供しましょう。

説明を編集するためのTextFieldと、タスクを完了または完了していないとしてマークするためのトグルを使用して詳細ビューを作成します。

しかし、私たちは推定された仕事をどうするべきですか?

値はすべて数値になり、有効な値の範囲を指定できます。

watchOS 9以降、ステッパーを使用できます。

ステッパーは、シーケンシャル値を編集するための詳細な制御を提供したい場合に最適なオプションです。

値の範囲を指定し、オプションでステップを指定できます。

ステッパーを使用して論理的に順番に編集することもできますが、必ずしも数値ではありません。

たとえば、アイテムの推定ストレスレベルに注意したいかもしれません。

ストレスレベルを示す絵文字の配列を作成し、ステッパーを作成し、ストレスレベルの絵文字配列で選択したインデックスに値をバインドし、範囲を絵文字インデックスの範囲に設定することができます。

値をステップスルーすると、アイテムについて推定しているストレスレベルが増減します。

WWDCセッションの準備は楽しいですが、素晴らしいWatchアプリの開発を皆さんと共有するのはパーティーです。

リストにストレスの多いアイテムがある場合、またはリストにストレスを感じているアイテムがたくさんある場合は、リストのアイテムを友人と共有して助けを求めたいと思います。

詳細ビューにボタンを追加して、共有シートを使用してアイテムを共有できるようにします。

詳細ビューのボタンをタップしてアイテムを共有したり、友達のリストから選んで助けを求めたり、メッセージを編集したり、送信したりできるようにしたいです。

これを行うには、watchOS 9のSwiftUIで利用可能な新しいツールを使用します：ShareLink。

アイテムでShareLinkを作成することで、リストアイテムを共有できます。

オプションで、メッセージの最初のテキストを件名とメッセージでカスタマイズできます。

そして、誰かがアイテムを共有するときにシェアシートに表示するプレビューを提供します。

ShareLinkを使用して、iOS、macOS、watchOSのSwiftUIアプリから共有できます。

ShareLinkの詳細とオプションについては、「Meet Transferable」を必ずチェックしてください。

アイテムをいつ完了したかを追跡し、物事を成し遂げるために助けを求めることができるようになったので、生産性を確認するためのチャートも追加したいと思います。

私は単一のデータ系列と異なるデータ値を持っているので、棒グラフを使用することを選択しました。

棒グラフは、一度に表示するデータ量を制限する限り、このデータをウォッチディスプレイに明確に表示します。

まず、アプリのナビゲーション構造にチャートビューを追加することから始めます。

アイテムリストとチャートの間にリストと詳細の関係がないため、ページベースのナビゲーション戦略を選択しました。

誰かがいつでもリストとチャートの間をスワイプすることができます。

リストとチャートにページベースのナビゲーションを追加するには、リストビューをカプセル化するためのItemList構造体を作成することから始めましょう。

コンテンツビューのコンテンツ全体をこの新しいアイテムリストに移動しました。

ここでアイテムリストをカプセル化すると、コンテンツビューにシンプルで読みやすいタブビューコードを持つことができます。

また、チャートビューの構造体を作成する必要があります。

チャートを作成する前にナビゲーション構造に集中できるように、一時的にプレースホルダを入れます。

次に、アイテムリストとチャートの2つのタブを持つページスタイルのタブビューでコンテンツビューを設定します。

ナビゲーション構造を設定したので、このチャートの作り方について話しましょう。

SwiftUIキャンバスを使ってチャートを描くことは知っていますが、watchOS 9では、より簡単な答えがあります。スウィフトチャートです。

Swift ChartsはiOS、macOS、tvOSでも利用できるので、SwiftUIを使用している場所ならどこでもチャートを再利用できます。

チャート化したいデータを集約し、Swift Chartsに表示させます。

チャートでは、日付までに完了したアイテムの数を表示したい。

チャートの集計データを格納する構造体を作成します。

次に、リスト項目データをチャートデータ要素に集約する小さな方法を作成します。

表示するデータを指定し、データからシリーズを定義して、単純なチャートを表示します。

日付をx値として使用し、完了したアイテムの数をy値として使用しています。

ウォッチディスプレイで必要な外観を実現するために、チャートのchartXAxis修飾子を使用してx軸をカスタマイズしています。

軸値ラベルのフォーマットスタイルを指定しています。

縦のグリッド線もいらないので、AxisGridLineマークを省略しました。

また、chartYAxis修飾子を使用してy軸をカスタマイズしています。

Watchのチャートに似合うグリッドラインスタイルを指定します。

軸値のラベルを整数としてフォーマットし、チャートの上部にクリップされないようにトップラベルを省略しています。

Swift Chartsで達成できる素晴らしいことの詳細については、「Hello Swift Charts」と「Swift Charts: Raise the Bar」をご覧ください。

私たちのチャートはかなり良さそうですが、もう少しデータを表示したいのですが、それでも素晴らしいウォッチエクスペリエンスを維持したいので、スクロール可能にします。

これを達成するために、デジタルクラウンイベントのコールバックを設定できる新しいdigitalCrownRotation修飾子を使用し、チャートのカスタムスクロール動作を実装します。

誰かがチャートをスクロールしながら状態を保存するプロパティを追加して、digitalCrownRotation修飾子を追加する準備をしましょう。

highlightedDateIndexは、現在のスクロール位置のデータポイントのインデックスです。

人がチャートをスクロールしているときに現在のクラウンの位置を表示できるように、クラウンオフセットを保存します。

これは、クラウンが動いている間、データポイント上またはデータポイント間の中間値です。

誰かがアクティブにスクロールしているかどうかを追跡するために、アイドル状態を保存します。

この情報を使用して、クラウンスクロールが停止して開始すると、小さなアニメーションを追加します。

値を格納するプロパティがわかったので、digitalCrownRotation修飾子を追加できます。

抑取値を highlightedDateIndex プロパティにバインドします。

機械的な用語では、デテントは、それを動かすのに十分な力が加えられるまで、ある位置に何かを保持するメカニズムです。

例えば、車のドアを開けると、ドアが落ち着く「停止」の位置があります。

私はもう少し強く押して、別の「停止」にドアをより広く開くことができます。

それを閉じるには、「停止」から引き出すために抵抗を克服するのに十分な力強く引っ張る必要があります。

そうでなければ、それはその休息位置に戻ります。

これはデテントです。

車のドアの停止は、このAPIのデテントを理解するのに役立ちます。

デテントは、あなたの視界上の王冠の静止した切り欠位置です。

onChangeコールバックのハンドラでは、クラウンがスクロールしていることを知っているので、isCrownIdleの値をfalseに設定し、クラウンオフセットの値を現在の値に設定して、スクロール中にチャート上の現在の位置を表示できるようにします。

onIdleコールバックのハンドラで、isCrownIdleの値をtrueに設定します。

これで、チャートをスクロールしながらクラウンの位置を表示できます。

これを行うには、Swift ChartsのRuleMarkを使用できます。

ルールマークはチャート上の直線です。

水平線または垂直線を表示したり、しきい値を表示したり、傾斜線を表示したりできます。

クラウンスクロールの現在の場所を表示するために、クラウンオフセット日付値でRuleMarkを作成します。

これをもう少し良く見せるために、クラウンが動かなくなったら、クラウンの位置線をフェードさせたい。

追加したisCrownIdleプロパティを使用してこれをアニメーション化するのは簡単です。

RuleMarkのforegroundStyleで使用している色の不透明度を格納するプロパティを追加します。

そして、チャートにonChange修飾子を追加して、isCrownIdle値が変更されたときにcrownPositionOpacity値の変更をアニメーション化します。

次に、RuleMarkのforegroundStyleを更新して、不透明度を使用します。

スクロール中にチャートのバーの横にある値を表示するには、BarMarkに注釈を追加できます。

最後のバーになったら、アノテーションをバーの一番上端に配置します。

それ以外の場合は、上部のトレーリング側に配置します。

デジタルCrownRotation修飾子、SwiftチャートのRuleMark、シンプルなSwiftUIアニメーションだけで何を達成したかを見てみましょう。

カスタムスクロール可能なチャートを作成するための最後のステップは、誰かがスクロールするにつれてチャートのデータ範囲を調整することです。

可視範囲を格納するプロパティを作成します。

chartData変数を作成して、範囲内のデータをチャートに提供します。

highlightedDateIndexが変更されたら、メソッドを呼び出してchartDataRangeを確認し、必要に応じて更新します。

誰かがデジタルクラウンを使用してチャートをスクロールすると、チャートはスクロールして利用可能なデータを表示します。

これで、計画していたすべての機能の実装が完了しました。

watchOS 9で利用可能な新しいSwiftUI機能の詳細については、「SwiftUIの新機能」をチェックしてください。

Watchアプリや新しいWatchアプリの機能を計画する際には、素晴らしいWatchアプリ体験を作るものについて考えてください。

アプリを設計している間は、アプリのナビゲーション戦略を検討して、アプリが簡単で直感的であることを確認してください。

そして、よりシンプルで豊かな開発オプションのためにSwiftUIを使用してください。

素晴らしいウォッチアプリを作り続けてください。

そして、あなたのおかげで、そのためのアプリがあることを忘れないでください!

。