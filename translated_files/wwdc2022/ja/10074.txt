10074

♪ ♪

ジェフ・ナドー：こんにちは、AppKitの新機能へようこそ。

私はAppKitチームのエンジニアであるJeff Nadeauで、macOS Ventura用のアプリを構築するための最新かつ最高のものを共有するためにここにいます。

Apple Siliconのパフォーマンスと効率性、macOSのパワー、そしてこれまで以上に豊かなアプリエコシステムの間で、Macにとってかつてないほどエキサイティングな時期でした。

あなたのアプリはその物語の重要な部分であり、あなたが最高のアプリを構築し続けることができるように、私たちはAppKitを前進させ続けています。

ステージマネージャーから始まり、環境設定、続いてコントロール、SFシンボル、共有など、さまざまなトピックをカバーします。

ステージマネージャーから始めます。

ステージマネージャーは、アクティブなウィンドウが中心になっている間、ワークスペースの非アクティブなウィンドウをクリーンアップします。

より高度なワークフローでは、ウィンドウをグループとして交換するセットにまとめることもできます。

これは、アプリのウィンドウがどのように表示されるかに影響します。

ステージマネージャーは作業スペースを整頓しようとしているので、新しいウィンドウが表示されると、既存のウィンドウはスペースを作るためにステージを終了します。

それはあなたの文書のような「プライマリ」ウィンドウに欲しいものです。

パネル、ポップオーバー、設定などの補助ウィンドウは、既存のウィンドウの上に引き続き表示する必要があります。

NSWindowには、特定のウィンドウの動作を定義するのに役立つAPIがすでにたくさんあります。

デフォルトでは、フローティングパネル、モーダルウィンドウ、または環境設定スタイルのツールバーを持つウィンドウを提示した場合、ステージマネージャーは他のウィンドウを交換しません。

ステージマネージャーは、ウィンドウのコレクションBehaviorも尊重します。

このOptionSetは、ウィンドウがスペースとフルスクリーンでどのように動作するかを定義し、ステージマネージャーがウィンドウが補助またはフローティングと見なされることを理解するのにも役立ちます。

ウィンドウのcollectionBehaviorに補助、moveToActiveSpace、固定、または一時的なオプションが含まれている場合、センターステージのアクティブなウィンドウを置き換えることはありません。

適切なコレクション動作でウィンドウを設定することで、デスクトップスペース、フルスクリーン、ステージマネージャーなど、あらゆるコンテキストでうまく機能することを確認できます。

次に、環境設定の重要な変更を取り上げたいと思います。

macOS Venturaでは、システム環境設定アプリは、更新されたナビゲーションスキームとまったく新しいビジュアルデザインで、まったく新しい外観になりました。

他のオペレーティングシステムの設定体験に合わせて、アプリの名前もシステム設定に変更しました。

これらの変更は、あなたのアプリケーションにも及びます。

たとえば、今日システム環境設定アプリに表示される環境設定ペインバンドルがあるかもしれません。

また、アプリ内に設定エリアがあるかもしれません。

また、設定インターフェイスや検査官に最適な、制御が豊富なフォーム用の新しい設計システムもあります。

カスタムprefpaneバンドルを出荷すると、新しい設定アプリで引き続き動作します。

カスタムペインはサイドバーに表示され、アプリはバンドルをロードし、モントレー以前と同じように設定UIを表示します。

新しく名前が変更されたシステム設定アプリに合わせて、アプリ内設定も「設定」に変更しました。

始めるために、最新のSDKに対してビルドすると、AppKitはアプリメニューのメニュー項目である「環境設定」の名前を自動的に更新します。

ただし、ウィンドウのタイトル、説明ラベル、またはアプリ周辺の他のコントロールなど、他の多くの場所で「環境設定」という単語を使用している可能性があります。

ローカライズされたテキストを検索して、更新が必要な場所を見つけます。

たとえば、TextEditの設定ウィンドウは以前は「環境設定」と呼ばれていましたが、システムの残りの部分と一致するように、そのウィンドウの名前を設定に変更することを選択しました。

システム設定アプリはまた、すべての設定オプションを表示するために新しいインターフェイススタイルを使用します。

設定インターフェイスはしばしばコントロールが重いため、このスタイルは、多くのコントロールを含むフォームを明確でよく整理された方法で提示するように設計されています。

フォーム自体は多くの視覚構造を提供するため、多くのシステムコントロールは、ロールオーバーでより顕著なコントロールバッキングを明らかにしながら、より低い視覚的な重みで描画することで、このコンテキストに適応します。

この新しいデザインを使用するインターフェイスを書きたい場合、SwiftUIはそれを非常に簡単にします。

コントロールをフォームビューに配置し、「insetGrouped」フォームスタイルを適用します。

SwiftUIは残りを処理します。ビジュアルスタイル、スクロール動作、およびフォームのレイアウトはすべて自動的に適用されます。

SwiftUIをまだ使い始めていないなら、これは試してみる絶好の機会です。

設定ウィンドウは、多くの場合、アプリのインターフェイスのスタンドアロン領域であるため、段階的な採用を行うのに最適な場所です。

SwiftUIとAppKitを一緒に使用するためのビデオも作成しました。これは、詳細を学ぶのに最適な場所です。

次に、コントロールの更新をいくつか共有したいと思います。

NSComboButtonと呼ばれる新しいコントロールから始めて、共有すべきエキサイティングなコントロールの強化がたくさんあります。

また、NSColorWellを更新し、NSToolbar APIをいくつか強化し、NSAlertの設計を調整し、NSTableViewのパフォーマンスを改善しました。

まず、NSComboButton。

NSComboButtonは、即時のボタンアクションと追加オプションのメニューを組み合わせることです。

今日のコントロールランドスケープでは、伝統的にボタンを使用して即時アクションを実行するか、プルダウンボタンを使用して多くのオプションを含むメニューを表示します。

NSComboButtonは、両方の要素を1つのコントロールにまとめ、プライマリアクションとプルダウンメニューを結合します。

このデザインは、Mailのこのようなユースケースで一般的に使用され、予測されたフォルダはワンクリックですが、メニューにアクセスしてどこでもメッセージをファイルすることができます。

以前は、セグメント化されたコントロールAPIを使用してこのようなものを組み立てたかもしれませんが、今では専用のコントロールがあります。

NSComboButtonには、ボタンの外観と動作の両方を決定する2つのスタイルがあります。

デフォルトのスタイルは「分割」と呼ばれ、メニューのためだけに別の矢印部分が含まれています。

2番目のスタイル「統一」は、普通のボタンのように見えます。

このスタイルは、クリック時に主要なアクションを実行し、クリックしてホールドするとメニューが表示されます。

そして、それはNSComboButtonです。

また、NSColorWellの素晴らしい新しいアップデートも、まったく新しい外観から始めました。

古典的な正方形のグラデーションの外観の代わりに、色ウェルはシステム全体の他のボタンベゼルを彷彿とさせる新しいスタイルを採用しています。

この変更は完全に自動なので、このモダンな外観を得るために採用する必要はありません。

しかし、私たちはカラーピッキングが創造的でプロフェッショナルなアプリケーションの重要な部分であることを知っているので、さらに一歩進んで、NSColorWellに2つの新しいスタイルを導入しました。

1つ目は、ロールオーバー時に開示矢印を表示する最小限のスタイルで、色のパレットからすぐに選択するポップオーバーを表示することで、迅速なカラーピッキング体験を提供し、完全なNSColorPanelに分割するオプションがあります。

デフォルトでは、システム標準の色のグリッドを使用しますが、別のUIやパレットを念頭に置いている場合は、ここに表示されるものをカスタマイズできます。

2つ目は、iWorkアプリから認識できる拡張されたスタイルです。

このスタイルは、両方のインタラクションモデルを組み合わせたものです。左側のウェルには、クイックピッキングのための同じ開示矢印とポップオーバーがあり、右側のボタンは、より詳細なカラーピッキングのためにフルパネルを引き上げます。

そして、それに伴い、NSColorWellは現在、色を選択する3つの異なる方法を提供しています。

NSColorWellの新しいcolorWellStyleプロパティを使用して、これらのスタイルにアクセスできます。これには、デフォルト、展開、最小の各スタイルのケースがあります。

NSColorWellはまた、その「プルダウンアクション」のための新しいターゲットとアクションのペアを獲得しました。

このアクションは、最小または展開された色のプルダウン部分をクリックしたときに何が起こるかを決定します。

デフォルトでは、これらのプロパティはnilであり、NSColorWellがシステム標準のポップオーバーを使用する必要があることを意味します。

ただし、このアクションをカスタマイズして、独自のカスタムポップオーバーを表示したり、メニューなどの別のピッキングインターフェイスを表示したりすることもできます。

そして、それは新しいNSColorWellです。

それは真新しい外観と、色をすばやく選ぶための2つの新しい方法を持っています。

次に、NSToolbarに関するいくつかのニュースで、カスタマイズをより適切に制御し、レイアウトの柔軟性を高めるために、さまざまなAPI強化を行いました。

カスタマイズの面では、ツールバーのカスタマイズ性をより適切に制御するために、2つの新しいデリゲートメソッドを追加しました。

1つ目は「toolbarImmovableItemIdentifiers」です。

このメソッドを実装して一連のアイテム識別子を返すと、それらのアイテムはユーザーによって移動可能または取り外し可能ではなく、カスタマイズモードに入るとアニメーション化されません。

たとえば、メールアプリは、フィルターボタンがメッセージリストの上に常に表示されるようにしたいと考えています。

このAPIを使用すると、この場所から移動されるのを防ぐことができます。

2番目のメソッドは「toolbar itemIdentifier canBeInsertedAt」と呼ばれています。

このデリゲートメソッドは、ツールバーからの特定の並べ替え、挿入、または削除に対する拒否権を与えます。

独自のカスタマイズルールセットを実装するために使用できます。たとえば、ツールバーの1つのセクション内で許可されているツールバーアイテムを作成できますが、別のセクションでは許可されていません。

新しい centeredItemIdentifiers プロパティを使用して、ツールバーに複数の中央に配置された項目を指定できるようになりました。

ツールバーがカスタマイズ可能な場合、このセットの項目は引き続きツールバーに追加または削除できますが、中央のグループ内でのみ並べ替えることができます。

この例では、写真編集ツールはすべて、先頭と末尾のセクションに配置されるアイテムの数に関係なく、ツールバーの中央にまとめられています。

ツールバーが好きなようにカスタマイズされると、アイテムがシフトしたくないので、クリックすると切り替えるメールのミュートボタンやミュート解除ボタンなど、他の状態に基づいて意味を変更するツールバーアイテムでは難しい場合があります。

ラベルのサイズが異なるため、ツールバーの他の項目は変更に対応するためにシフトする必要があります。

このようなシナリオでは、NSToolbarItemの新しいpossibleLabelsプロパティを使用して、アイテムに使用するローカライズされた文字列のセットを提供できます。

NSToolbarは、最も長いラベルに合うようにアイテムのサイズを自動的に調整するので、アイテムが再構成されてもレイアウトは同じままです。

次に、アラートのデザイン更新。

macOSのアラートは、いくつかの明確な選択肢を伴う少量のテキストに最適化されたコンパクトなレイアウトを使用しています。

そして一般的に、それはアラートをまとめる素晴らしい方法です。

アラートは、短いテキストで最もよく機能します。メッセージをより直接的に伝えることができ、人々はアラートをプッシュする前にあなたが書いたものを読む可能性が高くなります。

しかし、特に、ファイルシステムデータに関する本当に重要な選択を伝えるこのディスクユーティリティアラートのように、複雑で微妙なものを伝える必要がある場合は、説明を短くできない場合があります。

コンパクトなレイアウトは、この状況には最適ではありません。

これらのケースでは、NSAlertを適応させ、より長いテキストに適したより広いレイアウトを提供しました。

この適応は、有益なテキストが長すぎてコンパクトなサイズに快適に収まらないアラートに対して自動的に行われます。

コンパクトなアラートウィンドウに収まるには大きすぎるアクセサリービューがある場合にも、このスタイルを使用します。

アプリがこの動作をオプトインする必要はありません。システム全体に自動的に適用されます。

レイアウトはアラートを表示した時点で決定されるため、すでに画面に表示されている間にアラートを変更してもスタイルが交換されないことに注意することが重要です。

可能な限りアラートテキストの長さを減らすことを目指すべきですが、このデザインの更新は、あなたができない場合のユーザーエクスペリエンスを向上させます。

次に、NSTableViewの重要な新機能です。

NSTableViewは、スクロールしながらビューを遅延入力して再利用することで、非常に多数の行を効率的に処理するように設計されています。

ただし、各行の高さが異なるテーブルの場合、優れたスクロール体験を提供するために、テーブルは総高さとスクロール領域内の各行の位置を知る必要があるため、それは難しい場合があります。

歴史的に、NSTableViewはテーブル内のすべての行をサイズ変更することでこれを行い、最初のロード時間に影響を与える可能性があります。

macOS Venturaでは、NSTableViewははるかに優れたパフォーマンスを提供しながら、これらの目標を達成します。

NSTableViewは、各行の高さを熱心に計算するのではなく、スクロールビューポート内または近くにある行に基づいて行の高さを怠惰に計算するようになりました。

まだ測定されていない行の場合、NSTableViewは、すでに測定された行の高さに基づいて実行中の推定高さを使用します。

テーブルをスクロールすると、NSTableViewは必要に応じて行の高さを要求し、推定高さを実際の測定値に置き換え、正しいスクロール位置を維持するように注意します。

この最適化により、非常に大きなテーブルのロード時間が大幅に改善されます。

この変更により、「テーブルビュー：行の高さ」などのデリゲート呼び出しのタイミングが変更されるため、NSTableViewがいつ行の高さを要求するかを仮定すべきではありません。

この最適化は、NSTableViewとSwiftUIのリストビューの両方に適用され、採用を必要とせず、macOS Venturaのすべてのアプリに自動的に使用されます。

そして、それはNSTableViewのパフォーマンスです。

次に、SFシンボルに関するいくつかの更新。

macOS VenturaにはSFシンボル4が含まれており、あらゆる種類の被写体をカバーする450以上の新しいシンボル画像が追加されています。

これらの新しいシンボルには、月桂樹、あらゆる種類の家庭用品、世界中の通貨シンボル、さらにはさまざまなスポーツ関連のシンボルが含まれます。

何千ものシンボルのカタログでは、SFシンボルには、あなたが表現したいアイデアのための専門的に設計されたアイコンが含まれている可能性があります。

しかし、私たちはそこで止まっていません。

SFシンボル4には、図像をさらに強化するための新機能も含まれています。

要約すると、シンボル画像は、デザインに応じて選択できる多くのレンダリングモードをサポートしています。

単一の色を使用するモノクロ、シンボルの特定の部分を強調するために色の異なる不透明度を使用する階層、シンボルの各部分に異なる色を指定できるパレット、シンボルアートワークに直接デザインされた色を使用するマルチカラーがあります。

これらの選択肢は、さまざまなデザインを実現するための柔軟性を提供しますが、構成を適用することなく、シンボル画像が箱から出してすぐに最高に見えるようにしたいと考えています。

そのため、macOS Venturaのシンボルに新機能を導入しました。優先レンダリングモードです。

優先レンダリングモードでは、シンボルは好みのレンダリングスタイルを指定でき、実行時にAppKitは自動的にそのスタイルを使用します。

これは、これらの細かいディテールの明瞭さを高めるために階層的なスタイルを好むAirPods Proのようなシンボルに最適です。

もちろん、別のデザインを念頭に置いている場合は、いつでもNSImageSymbolConfigurationオブジェクトを使用して好みのスタイルを選択できます。

一部のシンボルは、概念を表すだけでなく、Wi-Fi信号強度やオーディオ音量など、何らかの価値や量を伝えるためのものもあります。

このようなケースでは、「可変シンボル」と呼ばれる新しいタイプのシンボルを導入しました。

可変シンボルを使用すると、浮動小数点値をNSImageに直接指定し、シンボルには数値のしきい値が埋め込まれ、各パスがその値に基づいてどのように変化するかを決定します。

これがAPIです。

変数記号は、新しい初期化子を使用して作成されます。

これは、既存のシンボル画像初期化子に似ており、0と1の間の浮動小数点数である値パラメータが追加されています。

シンボル画像が変数のしきい値を定義しない場合、この値は無視され、シンボルは通常どおり描画されます。

その場合、指定した値に基づいてシンボルパスの描画が異なります。

各変数シンボルは、独自の方法で値を表すことができ、APIレベルでその値を提供することで、シンボルの構成方法の詳細を知ることなく、これらのバリエーションのすべてにアクセスできます。

可変シンボルは、パレットカラーやマルチカラーなどのレンダリングスタイルと組み合わせてうまく機能するので、ほとんどすべてのデザインに適応させることができます。

最後に、macOS Venturaの共有に関するいくつかの大きなアップデートを取り上げたいと思います。Macでの共有体験を高め、提案された人や、コラボレーションしている人を招待して管理する新しい方法などの機能を紹介します。

アプリがこれらの機能強化を最大限に活用できるように、採用できる新しいAPIがいくつかあります。

共有体験の最も顕著なアップデートは、新しい共有ポップオーバーです。

これにより、既存の共有メニューは、共有しているドキュメントに関する詳細情報や、提案された人などの使い慣れた機能を含む豊富なインターフェイスに置き換えられます。

以前のピッカーと同じAPIとデリゲートメソッドをすべてサポートしているため、共有サービスのリストをフィルタリングしたり、独自のカスタムサービスをピッカーに挿入したりできます。

ファイルURLを共有する場合、NSSharingServicePickerはファイルに関するアイコン、名前、その他のメタデータをヘッダーに自動的に入力できます。

しかし、代わりにカスタムタイプを共有している場合は、NSSharingServicePickerがその情報を要求するために使用する新しいプロトコルにアイテムを適合させることができます。

このプロトコルはNSPreviewRepresentableActivityItemと呼ばれます。

適合型は、NSItemProviderのように共有する基礎となるアイテムを返すことができなければならず、オプションでタイトル、画像プロバイダー、およびアイコンプロバイダーを返すことができます。

便宜上、AppKitにはNSPreviewRepresentingActivityItemと呼ばれる適合クラスがあり、既存の共有アイテムとそのメタデータをバンドルするために使用できます。

各画像パラメータをNSImageとして直接提供することも、これらの画像を事前に生成するにはパフォーマンスが高すぎる場合は、NSItemProviderを使用できます。

新しい共有ピッカーは、ツールバーボタンのような場所から共有を開始するのに最適ですが、メインメニューバーやアプリ内の選択したビューのコンテキストメニューなどのメニューから共有を開始したい場合があります。

以前は、共有サービスを列挙し、それぞれのメニュー項目を作成することで、これを処理するために独自のメニューを構築したかもしれません。

それは機能しますが、標準ピッカーをバイパスするので、これらの新機能をすべて見逃しています。

macOS Venturaでは、NSSharingServicePickerは「standardShareMenuItem」を作成できます。

標準項目を任意のメニューに追加して、共有を簡単に開始できます。

選択すると、メニュー項目は共有ポップオーバーを召喚し、コンテキストメニューの場合、ポップオーバーをメニューを生成したのと同じビューに固定します。

macOS Venturaでコラボレーションを管理するための新しいサポートがたくさんあります。

いくつかの追加の採用により、共有可能なアイテムはコラボレーションへの招待状にもなり、ユーザーは共有ピッカー、メッセージへのドラッグアンドドロップ、さらにはFaceTimeを介して開始できます。

CloudKitまたはiCloud Driveを使用してコンテンツを共有したり、招待フローを独自のコラボレーションサーバーに接続したりできます。

今、これは本当に大きなトピックなので、私たちはそれをはるかに深く説明するためにいくつかのビデオを作りました。

アプリがコラボレーションをサポートしているかどうか、または追加を始めたいかどうかは必見です。

macOS Venturaを使い始めるとき、ステージマネージャーで最適に動作するようにウィンドウを設定していることを確認してください。

次に、NSComboButtonやNSColorWellなどのコントロール強化からデザインがどのように恩恵を受けるかを検討してください。

SFシンボルの最新のシンボルと機能を使用して、図像を改善します。

そして最後に、コラボレーションのために、macOS Venturaの新しい共有体験を最大限に活用できるように、最新のAPIを採用してください。

見てくれてありがとう、そして素晴らしいMacアプリケーションを構築し続けてくれてありがとう。