10001

♪インストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私はサラ・マクラナハンで、伝道チームのデザイナーです。

今日は、iOSアプリのナビゲーションを改善するための実践的なヒント、ガイダンス、ベストプラクティスを共有します。

アプリが素晴らしいナビゲーションを持っているとき、人々はコンテンツと経験に集中することができるので、それはしばしば気づかれない。

ナビゲーションには、物事がどのように振る舞うか、物事がどこに属しているか、アプリで物事がどのように機能するかについて人々に教えることが含まれます。

ナビゲーションの目標は、人々があなたのコンテンツを簡単に発見し、あなたのアプリと対話できるように、十分な親しみの基盤を提供することです。

ナビゲーションが私たちの期待からあまりにも遠く離れているとき、または世界に対する私たちの自然な理解と一致しない場合、私たちはしばしば欲求不満を感じ、アプリが使いにくいと感じます。

しかし、ナビゲーションを正しくするには、集中力と意図が必要です。

そして、私が今日カバーしている概念は新しいものではありませんが、それらは基本的であり、iOSでアプリを成功させるために不可欠です。

したがって、プラットフォームを初めてでも、アプリ体験を向上させる方法を探している場合でも、このセッションはあなたのためです。

今日は、iOSの一般的なナビゲーション形式であるタブバーについて説明します。

次に、階層的なナビゲーションとモーダルプレゼンテーションを探索して、画面間を移動するためのインタラクションについて説明します。

ご覧のとおり、ナビゲーションの大きなトピック領域のサブセットのみをカバーします。

しかし、これらのコアパターンは、私たちがしばしば誤用されるのを見る基盤を表し、それらを理解することは、あなたのアプリが進化したり、他のデバイスをサポートしたりするにつれて、成功のためにあなたを設定することができるので、私たちはここから始めます。

タブバーから始めましょう。

タブバーは、画面の下部にあるグローバルナビゲーションコントロールで、アプリのコンテンツをさまざまなセクションに分類します。

タブは、情報階層を反映するコントロールと考えてください。

UIコントロール自体は、すでに明確なグループ化を翻訳し、アプリの異なる領域間の関係を確立する必要があります。

したがって、タブバーはトップレベルのコンテンツを表し、アプリの階層の一番上にあるはずです。

各タブはアプリのオプションメニューを伝え、これらのセクションは有意義で説明的でなければなりません。

これは本当に簡単に聞こえますが、実際には、さまざまな理由から、アプリを見失うのは簡単です。

いくつかの良い例を見てみましょう。

これらのアプリのコンテンツを見ずに、タブがどのように機能を示唆しているかに注目してください。

彼らは、簡潔なラベルを表示するだけでアプリができることについての物語を語ります。

Listen NowとRadioは、これが聴覚メディアを備えたコンテンツベースのアプリであることを示しています。

このアプリの場合、ライブラリとアルバムは、強力なパーソナライゼーションを示す「For You」タブでコンテンツが豊富なアプリをほのめかしています。

このアプリには、その機能が自明であるほど焦点を絞ったタブがあり、それらのコンテンツエリアで何ができるかを正確に教えてくれます。

私たちがよく見るのは、アプリの最初のタブには機能が最も重く読み込まれる傾向があるということです。

タブ全体に機能を分散して、インターフェイスのバランスを取るようにしてください。

タブがどのように誤解や混乱を招くかを探るために、例を挙げてみましょう。

地元のサイクリストのように、人々が都市でキュレーションされたルートを発見できる偽のアプリを持っていると想像してみてください。

そして、あなたが旅行している、新しい都市に引っ越している、または単にスポーツに入るなら、ルートを保存して旅程を作成する簡単な方法があります。

ここにあります。

このアプリは自転車へのルートを見つけることなので、最初に表示されますのは、乗り物のフィルター付きのマップビューです。

次に、コンテンツを編集したり、友達を招待したりすることでやり取りできる今後の旅程のセクションがあります。

そして、コレクションビューでグループ化されたルートがあります。

一目で利用できるので、このようにすべての機能を1つのタブに追加するのは魅力的です。

あるいは、あなたのアプリは時間の経過とともに進化し、機能をタブバーのセクションにグループ化するのを見失ったのかもしれません。

さて、今日は、あなたのアプリでこれを再考することをお勧めします。

このデザインでは、人々は探しているもののためにたくさんスクロールしなければならない可能性があり、無関係で異なる機能を精神的に解析するには努力が必要です。

マップビューのフィルタリングと旅程の編集は、誰かがこのアプリを開いて使用するときの2つの非常に異なる機能と考え方です。

アプリの機能をこのように組み合わせたり、人々がアプリの残りの部分と対話しないことを恐れて行うことに注意してください。

よく整理され、明確に伝えられると、アプリの機能を理解するのがはるかに簡単になります。

これを行う1つの方法は、一歩下がって自問することです、なぜ人々はあなたのアプリを使うのですか?

優れたアプリにはソリューションが集中していることを忘れないでください。

彼らは、1つのアプリですべてを解決しようとするのとは対照的に、いくつかのことを本当にうまくやることを目指しています。

このサイクリングアプリのタブバーを再考しましょう。

人々はこのアプリを使って、自分のレベルに合った、気にかけている場所のルートを見つけます。

これは、人々が最も気にかけているコンテンツを表すため、アプリで最も重要なビューの1つです。

では、一歩下がってタブバーを再評価して、ルートがどのように使用され、そのコンテンツがよりバランスのとれた方法でアプリでどのように表現できるかを理解しましょう。

これはルートの詳細です。

誰かが、距離や標高の上昇などの概要、歩道や道路などのルート全体の地図や路面へのアクセスを見ることを期待しています。

急な登りや下りの特定の吹き出を見ると、このルートが私のレベルに適しているかどうかを理解するのに役立ちます。

そして最後に、ルート沿いの食べ物の停留所は計画に最適です。

わかりました。では、人々はルートを見るというこのコア機能をどのように理解していますか？

まあ、ルートは、それがどこにあるかを知っている場合にのみ役立ちます。

ルートは、関連付けられている都市と関係がある可能性が高い。

それは私にそこでのサイクリングに関する有用な情報を教えてくれる都市の概要につながるかもしれません。

そして、ビューを下にスクロールすると、乗ることができるすべてのルートのリストが表示されます。

しかし、このアプリは異なる都市のルートもサポートしています。つまり、各都市はすべての場所のリストに戻る必要があります。

ルートに移動すると、場所が階層の最上位になる可能性があります。

ご覧のとおり、このワークフローだけでも多くのコンテンツがあり、このアプリが提供する価値にとって本当に鍵です。

これはタブバー項目の大きな正当性です。

今、それがどのように自己完結しているかに注目してください。

このタブに場所以外のものを入れるのは意味がありません。

優れたタブバーの設計の一部は、コンテンツを整理することです。

関係に対処するためのこれらの自然な方法を探してください。

旅程など、アプリの他の重要な機能でこの演習を行うことができ、自分自身に尋ねることができます。旅程とは何ですか?

人々はそれをどのように使用しますか?

そして、私のアプリで彼らのために場所を捧げる場所はどこにありますか?

たとえ人々があなたのアプリのコンテンツに慣れていなくても、そしておそらく特にそうであっても、あなたの機能とコンテンツを明確に伝え、それがあなたの階層のどこに属しているか、そして人々がそれにどのように関与するかを評価するのが最善です。

その後、このアプリは、すべての機能を最初のタブに詰め込むことから、より明確で簡単なナビゲーション形式に改善できます。

現在、これらのセクションは単独で持ちこたえているため、コア機能はタブバーでよりバランスが取れています。

それらは関連していますが、コンテンツ領域とワークフローは明らかに異なります。

これにより、ナビゲーションがはるかに直感的になります。

次に、少し関連するトピックについて話し合いたいのですが、表現が異なります。

機能を複製して1つのタブに統合することは避けてください。

このようなコンテンツが豊富なアプリでは、「ホーム」というタイトルのタブは、アプリ全体の機能を1か所で紹介する魅力的なキャッチオールのように思えるかもしれません。

たとえば、人々は旅程機能に関与していないように見え、機能が存在することを知らないので心配するかもしれません。なぜなら、彼らはその存在を知らないからです。

したがって、場所カードの新しい旅程や、友人を招待するなど、前面と中央の機能を持つ旅程ビューのバージョンを作成するなど、可視性を高めるためにタブバーでアクションを繰り返すことで、エンゲージメントを奨励することは論理的に思えるかもしれません。または、簡単に追加できるアクションで停留所をリストします。

アプリ全体でいくつかの機能が発見されないことを恐れて、これを行うのは魅力的かもしれません。

そして、明確にするために、これはコンテンツの複製に関するものではありません。

多くのシナリオでは、曲や写真などの同様の種類のコンテンツが多くのタブに存在するが、異なる方法で整理されていることは理にかなっています。

しかし、人々が物事を達成するために取ることができる行動であるアプリの機能である場合、冗長性は混乱を引き起こします。

そして実際には、ホームタブはアプリの階層を混乱させます。

アプリ全体の異なるタブや領域の機能が複製され、十分なコンテキストなしで単一の画面に追加されると、冗長性と混乱が生じます。

ホームは、タブが発見可能性の問題を解決しようとしているため、すべての機能が不動産のために戦っているタブになります。

しかし、実際には、コンテンツの理解とそれに基づいて行動する方法との間に解離が生じます。

これがあなたのアプリなら、ホームタブを完全に削除することを検討してください。

機能の冗長性は、人々が物事がどこに属し、その理由を理解することを禁止しています。

ホームタブに関するもう1つの懸念は、アクションが別のタブにも存在するため、機能が繰り返されるため、誰かがタブジャンプする可能性があることです。

ビュー内の要素をタップして誰かを別のタブに移動するのは、不快で混乱します。

誰かに自動的にタブの変更を強制しないでください。

次に、タブ付きナビゲーションの最大のセールスポイントの1つは、複数のトップレベルの階層へのアクセスであるため、ナビゲーション全体でタブバーを隠したり削除したりしないでください。

タブバーへの永続的なアクセスにより、それぞれのコンテキストを維持しながら、情報階層のさまざまなレベルを切り替えることができます。

たとえば、[場所]タブで乗車を検討している新しいルートを見て、旅程タブで構築している旅程と比較し、すでに保存したルートは、階層の奥深くにある2つのレベルです。

これは、タブが目的を定義し、コンテンツの特定のカテゴリを表す場合にのみうまく機能します。

最後に、堅実な情報アーキテクチャに投資するすべての作業は、明確で簡潔なラベルで尊重されるべきです。

今年のインタラクションカテゴリーのアップルデザインの受賞者を見てみましょう。

これはSlopesアプリです。

アプリを起動すると、シーズン統計のログブックである中央のタブに着地するのはとても素晴らしいことだと思います。

他のタブは具体的です。

それらは理解しやすく、私はアプリが何をするのか、それをどのように使用するのかをすぐに理解しています。

一見すると、これはラベルがコンテンツを代表しているからです。

スキーの日を記録し、リゾートを閲覧し、友人と統計を比較します。それらはすべて、簡潔なラベルでコア機能を表しています。

タブバーは、ナビゲーションのための強力なコントロールです。

私たちが学んだことをすべてまとめましょう。

タブを使用して、情報階層を反映します。

タブ全体でバランスを取る方法で機能を整理します。

機能を複製して1つのタブにマージすることは避けてください。

アプリ全体でタブバーを常に永続的に保ちます。

最後に、各タブに明確で簡潔なラベルを使用します。

よし、インタラクションに飛び込もう。

アプリの画面間をナビゲートする場合、移行には2つの非常に一般的な形式があります。より詳細にプッシュするなど、「プッシュ」と呼ばれる用語を使用して、アプリの階層をナビゲートできます。

または、モーダルプレゼンテーションで移行することもできます。

これらは、アプリの階層とビュー間の移行を横断するための非侵入的で身近な方法です。

両方をお見せしましょう。

階層的なナビゲーションを介して移行すると、ビューがプッシュされます。これは、人が要素をタップし、次の画面が右から左にビューにスライドすることを意味します。

プッシュトランジションは、アプリの階層をさらに掘り下げるときに予想されるデフォルトです。

プッシュは、情報階層を直接反映するため、素晴らしいです。

これは、高いレベルからコンテンツを移動し、より詳細に掘り下げるという文字通りの表現です。

一方、モーダルはインターフェイス内の自己完結型のタスクのために予約されています。

モーダルは、独立したワークフローに最適です。つまり、誰かがそのビューで決定を下し、タスクを完了するのに十分な情報を持っています。

モーダルは、人々を情報階層から分離することでフォーカスを作成するため、ユニークです。

たとえば、新しい旅程の作成はモーダルビューで表示されます。

誰かが選択をしたり、タイトル、都市、日付の範囲などのデータを入力したり、友人を招待したりすることもできます。

これは、ビューを閉じたり、アプリの残りの部分をナビゲートしたりする前に、UIを編集して完了することを意図しているため、モーダルに適しています。

それはすべてユーザー入力なので、アプリの残りの部分はフィールドを完成させるための参照として必要ありません。

これらの相互作用に精通したので、両方を深く掘り下げてみましょう。

階層的なナビゲーションから始めます。

考慮すべきガイドラインをいくつか紹介します。

プッシュトランジションを使用して、アプリの階層のさまざまなレベル間を移動します。

階層的なナビゲーションは、トップレベルコンテンツとセカンダリコンテンツの関係を強化します。

トップレベルのコンテンツは階層でより高いです。

詳細が知りたいので、階層を掘り下げて補足ビューにアクセスします。

選択をしながら、私は選択肢を絞り込み、階層の残りの部分へのアクセスを排除します。

こうあるべきだ。

コンテンツはますます具体的になるべきであり、私がプッシュして詳細に掘り下げるにつれて、オプションが少なくなるはずです。

プッシュトランジションを使用する場合は、タブバーが画面の下部に永続的に固定されたままであることが本当に重要です。

前に話したように、これはタブ付きナビゲーションの最大のセールスポイントの1つです。

それは一貫しています。

常に利用可能であるため、アプリのコアエリアにアクセスできます。

これは、人々が異なる階層でコンテンツを探索できることを意味します。

ビューが押し込むと、状態が保存されるべき他のタブの階層へのアクセスを失うことなく、どこから来たのかに戻るために左から右にスワイプするのは自然な感じがします。

次に、階層内の人々を方向付けるために、適切なラベルで画面の上部にあるナビゲーションバーを使用することが重要です。

お見せしましょう。

コンテンツを掘り下げて情報階層を移動すると、ナビゲーションバーの戻るボタンが、私が来たばかりの画面のタイトルを反映するようにどのように変化するかに注目してください。

これは、画面をスクロールしてドリルインしてアプリにさらにナビゲートする際に役立つので、戻るボタンは階層のレベルアップを示すことができるので、どこから来たのか、どうやってそこに戻るのかを覚えておく必要はありません。

階層ナビゲーションを使用するもう1つの場所は、開示インジケーターが使用されるすべての場合です。

シェブロンとも呼ばれる開示指標は、移行が期待される方向を示しています。

シェブロンが異なるトランジションを開始すると、UIが表すものとそれに続く相互作用の間に断絶があります。

進歩の精神的なモデルにマップをプッシュするという概念。

西洋文化では、左から右に読み、その方向は進歩を示しています。

しかし、アラビア語やヘブライ語などの右から左の言語では、進歩の精神的なモデルは別の方向に流れています。

アプリが右から左の言語をサポートしている場合、プッシュの遷移が反転して、コンテンツの流れとの関連付けが作成されます。

階層ナビゲーションを使用するときの最後の考慮事項は、誰かがコンテンツ間を頻繁にナビゲートしているときなど、ワークフローのコンテキストについてです。

ビューを頻繁に切り替えたり、ワークフロー中にアプリを切り替えたり、ビューにかなりの時間を費やしたりして、人々が頻繁にやり取りすることを期待するワークフローを提示している場合は、プッシュを使用します。

おなじみの例はメッセージアプリです。

階層は比較的フラットですが、プッシュトランジションでメッセージに簡単に出入りできます。

各メッセージがプッシュではなく、代わりにモーダルである場合、異なるチャット間をシームレスに移動するのは難しいでしょう。

メッセージングは流動的に感じるはずですが、関連性がないときにモーダルを却下すると、人々は画面を離れることを考えなければならず、それは過度に複雑に感じます。

プッシュは、アプリのコア領域間の摩擦のない移行を可能にします。

それは階層的なナビゲーションの概要です。

復習しましょう。

主に、プッシュトランジションは、アプリの階層を横断するために使用されます。

タブバーは常に画面の下部に固定されたままにしてください。

各画面のナビゲーションバーを使用して、明確なタイトルとバックラベルを反映して、階層内の人々を方向付けします。

開示インジケーターが存在する場合は、プッシュを使用してください。

また、ワークフローがコンテンツ間を頻繁にナビゲートする必要がある場合。

階層ナビゲーションは非常に一般的で比較的単純なインタラクションであるため、このトランジションはアプリで頻繁に使用される可能性があります。

しかし、モーダルプレゼンテーションはコンテキストシフトに関するものです。

それは、誰かを集中的なワークフローや自己完結型のタスクに隔離することです。

iOSでモーダルを使用する場合は、常に画面の下部から表示してください。

モーダルは情報階層を中断します。

タブバーを覆うために画面の下部から来ます。

これにより、人々があなたのアプリをさらに掘り下げるのを防ぎます。

そして、目的は焦点を強化することであるため、意図的な混乱です。

だから今、あなたは疑問に思うかもしれません、自己完結型のタスクとは何ですか?

3つの大まかな例について話しましょう。

モーダルプレゼンテーションは、簡単なタスク、マルチステップタスク、またはフルスクリーンコンテンツに使用できます。

それぞれの例を共有します。

まず、イベントの作成やリマインダーの設定など、簡単なタスクの達成を必要とするワークフローにモダリティを使用します。

リマインダーを作成するには、入力フィールドを編集および変更する必要があります。

これを行う間に焦点を絞ることは、誰かが気を散らすことなくこのタスクを達成するのに役立ちます。

また、別の要素やタブをタップすることで、誤ってフローを放棄する可能性を最小限に抑えます。

第二に、複雑なタスクに対応するワークフローにモダリティを使用します。

これは、ウォレットにトランジットカードを追加するなど、潜在的に複数のステップです。

複雑なタスクにモーダルを使用するのは直感に反するように思えるかもしれませんが、目的はタブバーを隠し、タスクが完了またはキャンセルされる前に人々がアプリ内を移動するのを防ぐことによって焦点を強化することです。

そして第三に、最小限の追加ナビゲーションを必要とする記事、ビデオ、またはフルスクリーンコンテンツを表示するときにモーダルを使用します。

フィットネスアプリでトレーニングを開始すると、ビデオとして表示されますが、モーダルプレゼンテーションに最適なシナリオです。

階層セクションでは、人々を方向付けるためのナビゲーションバーの重要性について話しました。

モーダルプレゼンテーションでも同様に重要です。

モーダルの解剖学を見るときは、ナビゲーションバーをウェイファインディングのガイドとして考えてください。

ラベルと行動の使用は、人々がどこにいるのか、他の場所に行くためにどのような行動を取ることができるかについて自信を持つことができます。

タイトルは、「新しい旅程」など、人々を画面のコンテンツに向けるのに役立ちます。

適切なラベルは好ましいアクションであることを意図しているため、重要性を強調するために太字のフォントで見られることがよくあります。

ラベル自体は、タップされたときに何を期待するかを正確に教えてくれる簡潔で肯定的な動詞です。

優先アクションはモーダルを却下し、アプリの以前の状態は保持されるべきです。

モーダルにまだ入力またはインタラクションがない場合は、優先アクションを非アクティブにすることは、保存または続行するためにフィールドが必要であることを明確にする良い方法です。

優先アクションがある場合、左のアクションを使用して「キャンセル」でモーダルを却下することは、ワークフローを放棄していることを明確に示しています。

キャンセルをタップする前に情報を入力した場合は、ここで見られるようにアラートまたはアクションシートを表示するのに良い時期です。

キャンセルを続けるとデータが失われることを誰かに知らせる。

しかし、UIと対話していない場合は、[キャンセル]をタップすると、モーダルが終了するだけです。

近いシンボルを控えめに使用し、モーダルプレゼンテーションが最小限の相互作用を必要とし、テキスト入力を必要としない場合にのみ使用してください。

App Storeの「Today」タブのこの記事など、主な方法としてモーダルに「X」が表示されることがあります。

クローズシンボルは、ユーザー入力がないため、ここで機能するため、微妙な却下アクションは、誰かがコンテンツに集中するのに役立ちます。

以下は、入力とインタラクションを必要とするモーダルで、近いシンボルがどのように問題になるかの例です。

フィルターを選択した後、[閉じる]をタップすると、選択は適用またはキャンセルされますか?

明確にラベル付けされたアクションがなければ、人々は「閉じるをタップするとどうなりますか?」と疑問に思うでしょう。

したがって、より肯定的であり、アクションがより明示的であるため、ナビゲーションバーでラベルを使用することが通常好ましいことを覚えておいてください。

最後に、イライラし、過度に複雑に感じる可能性があるため、モーダルよりもモーダルを制限しようとします。

モーダルビュー自体が、関連する場合にサブビューとトランジションをサポートできることは、呼び出す価値があります。

先ほど述べたように、これは編集ビューです。つまり、テキストフィールドとテーブルセルには、表示だけでなく、対話することを意図した選択と入力があります。

たとえば、旅程に追加した友人の1人のテーブルセルをタップできます。

あなたはそれがシェブロンを持っているので、これがプッシュすることを期待しています、覚えていますか？

私が押し込むと、このビューはケイトに関する情報を表示し、彼女を旅程から削除するオプションを与えるかもしれません。

しかし、「人を追加」と「写真をアップロード」というラベルは色合いで、これらのアクションがタップ可能であることを示しています。

これらの各シナリオでは、ワークフロー内のワークフローです。

旅程を追加することから始めましたが、今は旅程に写真を追加しています。

写真のアップロードは、カメラロールをスクロールして新しい写真を選択するなど、かなりのインタラクションを含むワークフローです。

私はまた、これを自己完結型のタスクと定義します。

写真が選択されると、そのモーダルは却下され、新しい旅程の最初のモーダルに戻ります。

複数のモダリティスタックを制限しようとしますが、サブビューの一貫性とフォーカスを促進するために必要な場合があります。

これは、iOSのモーダルプレゼンテーションの概要です。

モーダルは画面の下部から表示する必要があります。

シンプル、マルチステップ、フルスクリーンの3種類のタスクに使用できます。

ナビゲーションバーの優先アクションとキャンセルアクションを使用します。

最小限の相互作用でコンテンツには、クローズシンボルを使用してください。

そして、モーダルよりもモーダルを制限します。

この深いダイビングがお役に立てば幸いです。

iOSアプリのナビゲーションを設計するときは、コンテンツがどのように整理されているか、人々があなたの機能とどのようにやり取りするか、そしてあなたの階層に関連してそれをどのように表現するのが最善かを考えてください。

このようにして、人々はあなたのアプリのすべての素晴らしい機能に簡単にアクセスして対話することができます。

聞いてくれてありがとう。

♪