10122

ラム：こんにちは。私の名前はラムです。

私はアカウントエクスペリエンスチームのエンジニアです。

同僚のパトリックと一緒に、アプリのAppleでのサインイン体験を強化する方法について話します。

AppleでサインインがiOS 13で導入されて以来、人々は速くて簡単なアカウント設定とサインインが大好きです。

わずか数行のコードで、フォームやパスワードなしで、ワンタップのアカウント設定をすばやく有効にできます。

すべてのAppleアカウントでサインインは、ユーザーのApple IDを保護するためにすでに使用されている強力な2要素認証によって保護されています。

ユーザーと通信する必要がある場合は、Appleでサインインすると、機能するメールアドレスが提供されます。

追加の検証は必要ありません。

Appleでサインインすると、ユーザーが実際に実在する可能性がどの程度あるかを示す指標も提供されます。

これは詐欺と戦うのに役立ちます。

また、Appleでサインインすると、仕事や学校で使用している管理対象のApple IDなど、どこでも機能します。

アプリを職場や学校のアカウントと統合する方法の詳細については、「Discover Sign in with Apple at Work & School」のセッションをご覧ください。

このセッションでは、Appleでサインインのエクスペリエンスを強化し、合理化する方法について説明します。

まず、アプリの既存の資格情報をチェックすることで、アカウントの重複を防ぐ方法について説明します。

次に、Apple IDの資格情報を深く掘り下げてから、資格情報の変更を監視する方法のいくつかについて話し、アカウントの削除などのシナリオを処理する方法について説明します。

そして最後に、パトリックはウェブやその他のプラットフォームでAppleとサインインを統合する方法について議論します。

始めましょう。

Appleでサインインは、従来のユーザー名とパスワードベースの認証に代わる便利で安全な代替手段ですが、ユーザーはパスワードでロック解除されたアカウントを持っている可能性があります。

したがって、ユーザーがすでに自分のために働くアカウントを持っている場合は、アプリの2番目のアカウントを作成しないことが重要です。

サインイン中に正しい決定を下すために誰かを導く方法を探ります。

これは、Appleでサインインを使用するサンプルアプリ「Juice」です。

ソースコードは、このビデオの関連リンクで見つけることができます。

Juiceには、従来のメールとパスワードを使用するか、Appleでサインインを使用してサインインできます。

ユーザーがすでにこれらの資格情報のいずれかを持っている場合は、適切なアカウントにサインインするのに役立ちます。

まず、既存のパスワード資格情報がログイン画面のキーボードに表示されるように、パスワードの自動入力を実装してください。

このようにして、ユーザーはワンタップで資格情報を自動入力できます。

また、パスワードベースのアカウントをAppleでサインインするようにアップグレードするようにユーザーに提供する必要があります。

アップグレードすると、ユーザーはセキュリティが組み込まれたアカウントを取得し、覚えておくべきパスワードが1つ少なくなります。

これは、アカウント認証変更拡張機能を使用して実装されます。

拡張機能ベースのAPIは、ユーザーがAppleでサインインを使用してサインインする方法をアップグレードするためのシームレスなエクスペリエンスを提供します。

ユーザーのアカウントのセキュリティアップグレードの提供の詳細については、「Appleでサインインを最大限に活用する」と「ワンタップアカウントのセキュリティアップグレード」のドキュメントをご覧ください。

パスワードの自動入力を提供することとは別に、アプリが起動するとすぐに既存の資格情報を提示することで、さらに一歩進むことができます。

このようにして、ユーザーはログイン画面に到達する前でも、適切なアカウントを使用してサインインできます。

認証サービスAPIは、この方法で本当に柔軟です。

ユーザーがAppleの資格情報でサインインを作成できるようにするだけでなく、APIはパスワードベースの資格情報を含む既存の資格情報を提示することもできます。

これを採用するのは本当に簡単です。

これを達成する方法について、いくつかのコードをお調べしましょう。

すでに認証サービスAPIを使用している場合、このコードは非常によく知られているはずです。

まず、ASAuthorizationControllerのインスタンスを作成し、承認要求配列にASAuthorizationAppleIDProviderとASAuthorizationPasswordProviderの両方を含めます。

次に、インターフェイスの表示に役立つデリゲートとオブジェクトを設定する必要があります。

そして最後に、承認コントローラーのoptionImmediatelyAvailableCredentialsオプションを使用してperformRequestsを呼び出す必要があります。

このオプションはiOS 16で新しく設定されています。

これは、デバイスですぐに利用可能な資格情報のみが必要であることをシステムに伝えます。

これは、アプリの起動時に呼び出されることを特に意図しています。

以前のiOSバージョンをサポートしたい場合は、performRequestsを使用できます。

これを行うと、既存の資格情報のリストが表示されます。

ユーザーは、既存のAppleクレデンシャルでサインインするか、既存のパスワードクレデンシャルのいずれかを選択できるようになりました。

ユーザーが資格情報を選択すると、システムはASAuthorizationControllerデリゲートでdidCompleteWithAuthorizationを呼び出します。

ユーザーがAppleアカウントでサインインを選択した場合は、appleIDCredentialを続行します。

ユーザーがパスワードベースのアカウントを選択した場合は、返されたpasswordCredentialでサインインします。

ユーザーが既存の資格情報を持っていない場合、APIはAppleアカウントでサインインを作成するユーザーを提示しません。

代わりに、システムはdidCompleteWithErrorを呼び出します。

このようなシナリオでは、標準的なログインフローを表示することに戻る必要があります。

ちなみに、同じ認証サービスAPIは、パスキーでもシームレスに機能します。

パスワードを置き換える次世代認証技術であるパスキーの詳細については、セッション「パスキーに会う」をチェックしてください。

ほんの数行のコードで、サインイン体験を最大限に活用できます。

これで、ユーザーが適切なアカウントを選択するのを手伝うことができ、うまくいけば、システムで重複したアカウントが作成されるのを防ぐことができます。

次に、Apple IDの資格情報について深く掘り下げたいと思います。

ご存知のように、Appleでサインインを使用して認証が成功した後に得られる応答は、ASAuthorizationAppleIDCredentialオブジェクトです。

user、fullName、email、realUserStatus、identityToken、authorizationCodeなどの値が含まれています。

それぞれを簡単に説明します。

ユーザーは一意で安定した識別子です。

これは、開発者チームのすべてのアプリで同じ識別子です。

これを使用して、システム内のユーザーを一意に識別します。

必要な場合にのみ、フルネームを尋ねるべきです。

要求された場合、ユーザーは好きな名前を共有できます。

ユーザーとコミュニケーションを取りたい場合は、メールを尋ねる必要があります。

要求された場合、ユーザーはメールアドレスを共有する2つのオプションがあります。

1つの選択肢は、Apple IDに関連付けられたメールを共有することです。

もう1つのオプションは、「メールを非表示にする」機能を使用することです。

これにより、受信トレイにルーティングされる非表示のメールアドレスが作成されます。

双方向リレーなので、返信も処理できます。

どのオプションが選択されているかに関係なく、メールアドレスは以前にAppleによって確認されており、すぐに使用できます。

また、すべてのアカウントに電子メールが関連付けられているわけではないので、要求した場合でも、電子メールに価値がないシナリオを処理する準備をしてください。

RealUserStatusは、ユーザーが実在する可能性を示す高い信頼度の高い指標です。

ユーザーのプライバシーを維持しながら、デバイス上の機械学習、アカウント履歴、およびハードウェア認証を使用して計算されます。

realUserStatusには3つのタイプがあります。

「おそらく本物」とは、ユーザーが実在の人物のように見えることを意味します。

CAPTCHAのような追加の不正検証チェックをスキップするなど、このユーザーに最高の体験を提供します。

「不明」とは、ユーザーが実在の人物であるかどうかをシステムが判断していない場合です。

追加の検証手順を必要とする情報が限られているアカウントと同様に、このユーザーを信頼してください。

ユーザーはまだ本物である可能性があるので、アプリの使用をブロックしないでください。

そして最後に、「サポートされていない」とは、システムがこの決定ができないことを意味します。

fullName、email、realUserStatusなどのプロパティは、アカウントが初めて作成されたときにのみ返されることを呼びかける必要があります。

その後のサインイン時に返されないので、システムでアカウントが作成されたことを確認できるまで、フルネームやメールなどのプロパティを安全にキャッシュしてください。

identityTokenは、ユーザー情報を含むアプリサーバーが必要とするほとんどのデータを含むJSONウェブトークンです。

これは認証に対する業界標準のアプローチです。

JSON Webトークン（JWT）は、base-64 URLエンコードされたヘッダー、base-64 URLエンコードされたペイロード、およびAppleによって署名された署名の3つの部分で構成されています。

応答が改ざんされておらず、実際にApple IDサーバーからのものであることを確認するために、Appleの公開鍵で署名を確認する必要があります。

また、アプリサーバーがトークンの有効性をチェックすることも同様に重要です。

ペイロードをデコードしたら、発行者がappleid.apple.comであることを確認し、オーディエンスフィールドがアプリのバンドル識別子であることを確認し、有効期限のタイムスタンプが現在の時刻よりも大きいことを確認して、トークンが有効であることを確認してください。

件名はユーザー識別子になります。

ユーザーのメールアドレスを要求した場合は、それも含まれます。

realUserStatusを見つけることもできます。

値は「unsupported」の場合は0、「unknown」の場合は1、「おそらく現実」の場合は2になります。

そして最後に、ノンスが承認要求の作成前に生成されたものと同じであることを確認します。

ノンスの詳細と、リプレイ攻撃を軽減するための承認プロセスを保護する方法については、「Appleでサインインを最大限に活用する」セッションをご覧ください。

AuthorizationCodeは、リフレッシュトークンと引き換えにApple IDサーバーを提供できる短命のシングルユーストークンです。

お使いのシステムがすでにOAuth 2.0のようなオープンスタンダードを使用している場合、これはおなじみかもしれません。

更新トークンを生成するには、認証/トークンエンドポイントにポストリクエストを送信する必要があります。

クライアントIDとクライアントシークレットを、受け取ったばかりの承認コードとともに渡します。

クライアントシークレットの作成方法の詳細な説明は、Apple Developerのドキュメントに記載されています。

応答では、リフレッシュトークン、アクセストークン、および以前に受け取ったものと同様の新しいIDトークンを取得します。

期限切れのアクセストークンがある場合は、リフレッシュトークンを使用して、同じエンドポイントを使用して新しいアクセストークンを取得できます。

また、無効になるまで同じリフレッシュトークンを使い続けることもできます。

トークンの検証に失敗した場合、またはユーザーのセッションの周りに変更がある場合、リフレッシュトークンは無効になる可能性があります。

ユーザーセッションといえば、次は、資格情報状態に関する変更の処理と監視について話します。

IDトークンを確認した後、アプリはユーザーセッションを管理する責任があります。

ユーザーセッションの変更をトリガーできるさまざまなシナリオがあります。

たとえば、ユーザーは設定からアプリでApple IDの使用を停止したり、デバイスからサインアウトしたりできます。

セッションの変更を適切に処理するには、ASAuthorizationAppleIDProviderのgetCredentialState(forUserID:)を呼び出します。

このAPIは、アプリが起動するとすぐに、または状態を確認したい任意の時点で呼び出すことをお勧めします。

また、資格情報が取り消されたときにアプリに通知されるように、credentialRevokedNotificationも観察する必要があります。

状態の変化を観察した場合は、別のユーザーがサインインし、現在のユーザーをアプリからサインアウトしたと仮定する必要があります。

アプリサーバーをお持ちの場合は、サーバー間通知を購読する必要があります。

サーバーは、ユーザーとそのアカウントに関する重要な更新を受け取ります。

次のシナリオで、通知はアプリの各グループに送信されます。ユーザーがメール転送設定を無効にまたは有効にしたとき、ユーザーがアプリでApple IDの使用を停止したとき、またはユーザーがApple IDを完全に削除したとき。

通知の受信を開始するには、まずApple DeveloperポータルにエンドポイントURLを登録する必要があります。

すべてのイベントは同じエンドポイントURLに到着します。

イベントは、Appleによって署名されたJSONウェブトークンとして送信されます。

メール転送が無効になっている場合、JWTのペイロードで、電子メールが無効なイベントを受け取ります。

ユーザーがアプリでApple IDの使用を停止すると、同意が取り消されるイベントが表示されます。

このイベントを受け取ったときに、アクティブなユーザーセッションを無効にすることが重要です。

また、ユーザーがApple IDを削除すると、アカウント削除イベントが表示されます。

繰り返しになりますが、アクティブなユーザーセッションを無効にし、プロセスに従ってアカウントを更新してください。

では、アカウントの削除に集中したいと思います。

アカウントは私たちのアイデンティティの一部であり、私たちは最も個人的でプライベートなデータの一部を管理するためにそれらを使用します。

誰かが自分のアカウントを削除したいかもしれないし、あなたのアプリでこれをサポートする必要があります。

アプリからアカウントの削除を開始する方法を提供する必要があり、削除プロセス全体を管理するのはあなたの責任です。

ユーザー情報を保存するアプリサーバーがある場合、通常、アプリはユーザーアカウントを削除するようにサーバーに通知します。

これで、削除プロセスの一部としてAppleとのサインインを含めることができます。

これは、サーバーがアプリに関連付けられたアカウントを削除するために使用できる新しいRESTエンドポイントを使用して行われます。

このAPIを簡単に説明させてください。

アカウントを削除するには、有効な更新トークンまたは有効なアクセストークンのいずれかが必要です。

どちらのトークンも持っていない場合は、認証/トークンエンドポイントを使用して生成できます。

いずれかのトークンを取得したら、必要なパラメータでauth/revokeエンドポイントを使用できます。

リフレッシュトークンを使用する場合は、トークンタイプをREFRESH_TOKENに設定します。

アクセストークンを使用して削除する場合は、トークンタイプをACCESS_TOKENに設定します。

応答が成功すると、トークンとユーザーのアクティブなセッションは即座に無効になります。

削除されると、アプリに戻り、Appleでサインインを使用するユーザーは、アプリで最初にアカウントを作成したときと同様の体験になります。

それに伴い、私はサインアウトして同僚のパトリックに渡して、ウェブやその他のプラットフォームでAppleでサインインを使用する方法について話し合います。

パトリック:ありがとう、ラム!

人々は、AppleでサインインがAppleのすべてのプラットフォームでシームレスに機能する方法が大好きです。

しかし、それはそこで止まりません。

Appleでサインインは、ウェブやその他のプラットフォームでもシームレスに機能します。

ウェブやその他のプラットフォームをサポートするために、Appleでサインインのエクスペリエンスを強化する方法について話し合いましょう。

Ramが以前にあなたに紹介したJuiceという既存のiOSアプリがあります。

ウェブに拡大することで、さらに多くのユーザーにJuiceをお届けしたいと考えています。

似たようなアプリをグループ化する方法について話し合うことから始めましょう。

ユーザーエクスペリエンスを合理化するために、関連するアプリをグループ化することをお勧めします。

関連するアプリをグループ化することで、ユーザーはアプリと情報を共有するために一度だけ同意を得る必要があります。

たとえば、アプリはiOSとmacOSで利用可能かもしれませんが、プラットフォームごとに異なるバンドル識別子を使用します。

これらのアプリをグループ化することをお勧めします。

Appleでサインインを使用すると、プライマリアプリとして設定したアプリのアプリアイコンが表示されます。

あなたのウェブサイトでAppleとのサインインをサポートするためにサービスIDを設定する方法を発見しましょう。

まず、Apple Developer Portalにログインし、「証明書、識別子、プロファイル」に移動します。

サービスIDの横にあるラジオボタンを選択し、「続行」をクリックします。

サービスの説明を入力してください。

サービスの一意の識別子を入力し、[続行]をクリックします。

「Appleでサインイン」の横にあるチェックボックスをクリックし、[設定]ボタンをクリックします。

Web認証設定画面で、ドロップダウンメニューからプライマリアプリIDを選択します。

次に、あなたのウェブサイトがAppleでサインインをサポートするために使用するドメインとサブドメインを入力します。

最後に、承認が成功した後、ユーザーをアプリまたはウェブサイトにリダイレクトするために、AppleのリダイレクトURLを入力します。

それでおそれ！

ウェブサイトでAppleとのサインインをサポートするようにサービスIDを設定しました。

あなたのウェブサイトがAppleでサインインをサポートしていることを示すためのボタンが必要です。

Appleは、Appleボタン画像でサインインを生成するための高度に構成可能なボタンAPIを提供しています。

これを使用して、選択したボタンをカスタマイズし、アプリやウェブサイトに埋め込みます。

Apple JSでサインインは、ウェブ上でAppleとサインインの統合をさらに簡単にするシンプルなJavascriptフレームワークです。

アプリケーションまたはWebサイトでは、Apple JavaScriptフレームワークでサインインを含めることから始めます。

このシンプルなAPIを使用すると、ユーザーを認証し、1つのシンプルなDIVで作成できる「Appleでサインイン」ボタンなど、さまざまなアセットを取得できます。

ボタンのプロパティを変更することで、アプリやウェブサイトに合わせてボタンをカスタマイズすることもできます。

たとえば、現在のプロパティでは、境界線とデフォルトのコーナー半径が付いた白い「Appleでサインイン」ボタンが表示されます。

データカラープロパティを変更することで、ボタンの別の背景色を選択できます。

データ型を「継続」に変更すると、ボタンのテキストが更新され、「Appleと継続」と表示されます。

または、データモードプロパティをロゴのみに設定することで、ロゴのみのボタンを作成することもできます。

Apple JavascriptボタンAPIでサインインすると、さらにカスタマイズ可能なプロパティが提供されます。

「Appleでサインイン」ボタンのリソースを参照して、これらの多くのオプションを簡単に設定できます。

REST APIを使用してAppleでサインインボタンを生成したい場合は、Apple IDボタンエンドポイントの1つを使用してボタンを生成できます。

中央揃え、左揃え、ロゴボタンには別々のエンドポイントがあります。

クエリパラメータを使用してボタンをカスタマイズできます。

このリクエストの例では、境界線付きの白い「Appleでサインイン」ボタンをカスタマイズします。

カスタマイズボタンでPNG画像として返信が届きます。

Appleでサインインボタンをパーソナライズしたので、ユーザーを認証する時が来ました。

必要なパラメータを含む承認リクエストをAppleに送信する必要があります。

これらは、ユーザーに正常にログインするために必要なパラメータです。

すでにAppleプラットフォームでAppleでサインインを実装しているので、これらのパラメータは非常によく知られています。

まず、「clientID」を設定する必要があります。

これは、アプリまたはWebサイトのApple Developer Portalで作成したサービスIDになります。

次に、アプリやウェブサイトに電子メールや名前が必要な場合は、「スコープ」パラメータを入力します。

複数のスコープをリクエストする場合は、スペースを使用して各スコープを分離します。

必要なデータのみを要求することが重要です。

「redirectURI」パラメータは、Apple Developer Portalで以前に登録したURLを追加し、Webサイトでユーザーをどこに誘導するかをAppleに通知する場所です。

リクエストを保護するために「state」と「nonce」を追加することもできます。

そして最後に、「usePopup」パラメータを使用すると、ログイン画面を別のポップアップウィンドウに表示するか、既存のウィンドウをApple Sign in Webサイトにリダイレクトするかを選択できます。

誰かがSafariを使用している場合、このようなネイティブ画面が表示され、あなたのウェブサイトにサインインするための一流の体験を提供します。

Apple IDサーバーが承認要求を処理した後、承認の結果を含むDOMイベントを受け取ります。

成功応答を処理するには、「AppleIDSignInOnSuccess」のイベントリスナーを追加します。

失敗応答を処理するには、「AppleIDSignInOnFailure」のイベントリスナーを追加します。

承認が成功した場合、承認コード、IDトークン、および要求された場合のユーザー情報を含む応答を受け取ります。

これは、Appleのプラットフォームですでに慣れている応答に似ています。

REST APIを使用してApple IDサーバーと直接統合したい場合は、必要なパラメータを使用して承認エンドポイントに承認要求を指示します。

承認が成功すると、承認コード、IDトークン、およびユーザー情報を含む応答が表示されます。

これは、Appleのプラットフォームですでに慣れている反応と非常によく似ています。

それでおそれ！

あなたのウェブサイトでAppleでサインインを成功裏に採用しました!

最後に、Appleでサインインを実装する際に留意すべきいくつかの重要なことを強調したいと思います。

アプリがアカウントベースの重要な機能を必要としない限り、ログインせずにアプリを使用できるようにします。

たとえば、ユーザーがApple Payを使用してアイテムを購入することを許可し、購入が完了した後、オプションで購入をアカウントに関連付けることを提案することができます。

既存のユーザーに、ユーザー名とパスワードの認証からAppleでサインインに切り替えることで、アカウントのセキュリティをアップグレードする機能を提供します。

ユーザーを識別するために一意の識別子が必要な場合は、名前や電子メールを収集しないでください。

また、Appleでサインインしてメールを収集する場合は、ユーザーの選択を尊重するようにしてください。

追加のメールの入力を求めてはいけません。

アプリやウェブサイトが利用可能なすべてのプラットフォームでAppleでサインインを実装することが重要です。

ユーザーは複数のプラットフォームを使用する可能性があり、どこでもAppleでサインインを使用することを期待しています。

私たちはあなたのアプリでAppleでサインインで何をするかを見て本当に興奮しており、あなたのフィードバックを楽しみにしています。

ご覧いただきありがとうございます、そしてWWDCの残りの部分を楽しんでください!

。