102

♪ ♪

♪ ♪

スーザン・プレスコット：WWDC 2022のプラットフォームステート・オブ・ザ・ユニオンへようこそ。

WWDCは、皆さんとつながり、私たちが取り組んできたことに関するニュースを共有し、開発者プラットフォームから必要なものをよりよく理解する機会であるため、私たちは常にWWDCに興奮しています。

あなたが開発者としてしていることは素晴らしいです。

アイデア、想像力のものを変換して、ユーザーエクスペリエンスを別のレベルに引き上げます。

そして、私たちはあなたのアイデアをさらに進める手助けをしたいと思っています。

Keynoteでは、iPhone、iPad、Mac、Apple Watch、Apple TVの新機能と、最も野心的なアイデアに命を吹き込むのに役立つAppleシリコンの信じられないほどの力についてすでに話しました。

今日は取り上げることがたくさんあります。いくつかのアップデートから始めましょう。

今年初め、Apple ParkでAppleのエンジニアやデザイナーとつながり、コラボレーションできるように設計された新しいApple Developer Centerをオープンしました。

そして昨年の秋、世界中から何千人もの人々が私たちの新しいオンラインテックトークに参加し、11カ国と5つの言語の何百ものライブセッションに参加しました。

私たちにとって、テックトークシリーズの最良の部分の1つは1対1の会議でした。これは、あなたが何をしているのかを聞き、いくつかのアドバイスやガイダンスを共有する絶好の機会でした。

昨年の秋、Swift Playgrounds 4は、アプリを構築し、App Storeに直接提出し、SwiftUIをサポートする機能を備えており、実験とUIプロトタイピングのための素晴らしいツールとなっています。

そしてもちろん、Xcode Cloudがあります。

より良いアプリをより迅速かつ簡単に構築できるように、Xcode Cloudを構築しました。

これは、Xcodeに組み込まれ、クラウドでホストされている継続的な統合と配信サービスです。

Xcode Cloudは、すべてのAppleプラットフォームの開発をサポートしています。

TestFlight、App Store Connect、およびすべての主要なgitベースのソースコントロールプロバイダーと統合されています。

開発ワークフローの他の側面に接続するのに役立つREST APIもあります。

あなたとあなたのプロジェクトを保護するために、高度なセキュリティで構築されています。

そして、Xcode Cloudが今日から利用可能になることを嬉しく思います。

ほぼすべての開発チームがXcode Cloudの恩恵を受けることができると考えており、あらゆる規模の開発者がアクセスできるように価格設定しました。

2023年末まで、すべてのApple Developer Programメンバーに月額25時間のサブスクリプションを無料で提供しています!

そして、この夏の後半にDeveloperアプリでXcode Cloudのサブスクリプションレベルのいずれかを購読できるようになります。

今日は3つの大きな話題について話します。

まず、Appleプラットフォームの開発のビジョン、プラットフォームとどこにいるのか、そしてどこに向かっているのかについてもっと共有したいと思います。

次に、アプリがAppleプラットフォームのシステムエクスペリエンスと統合できる魅力的な新しい方法を共有します。

そして最後に、いくつかの強力な新しいAPIについて話し合い、アプリでさらに野心的なことをできるようにする方法を紹介します。

開発者プラットフォームのビジョンと、それがどのように進化しているかから始めましょう。

ジョシュはそれについてすべてを伝えるためにここにいます。ジョシュ・シェイファー：優れた開発者プラットフォームは、プログラミング言語、フレームワーク、ツール間の緊密な統合を提供します。

3つすべてが互いに完全に補完し合うとき、私たちは一般的なことが簡単で、珍しいことでさえ可能であることを保証することができます。

今、それを正しく取得することは、素晴らしいアプリを構築するためのパスを短縮し、それはすべての人に利益をもたらします。

お客様は、常に完璧に感じるスクロールのような一貫した体験を得ることができます。

そして、あなたのアプリをユニークにするものに時間と労力を集中することができます。

しかし、設計が進化し、ハードウェアが進歩し、かつては最先端だったものが予想されるベースラインになります。

Objective-C言語、AppKit&UIKitフレームワーク、Interface Builderは、何世代にもわたる開発者に力を与えてきました。

これらの技術はお互いのために構築され、今後長い間私たちに役立ち続けますが、時間が経つにつれて新しい抽象化が必要になります。

しばらくの間、あなたは私たちが次世代の統合言語、フレームワーク、ツール（Swift、SwiftUI、Xcodeプレビュー）を定義するために懸命に取り組んでいるのを見てきました。

このような開発プラットフォームに緊密に統合するには、3つの部分すべてが一緒に設計され、進化し、互いに駆動する必要があります。

Swiftの結果ビルダーは、SwiftUIの構成構造に触発されました。

SwiftUIの宣言ビューは、Swiftの値タイプによって有効になりました。

そして、Xcodeプレビューは、両方のために特別に設計され、有効にされました。

今、結果は私たちがこれまでに構築した中で最高の開発プラットフォームです。

そして今年、Swift、SwiftUI、Xcodeはすべて、このビジョンをさらに進め、すべてのプラットフォーム用の素晴らしいアプリを簡単に構築できる素晴らしいアップデートを持っています。

そして、すべてはスウィフトから始まります。

今、スウィフトチームのベンは、次に何が起こるかについてあなたにすべて話すつもりです。

♪ ♪

ベン・コーエン:スウィフトは速く、現代的で、安全です。

強く型付けされた言語のスピードと、読み書きが簡単な表現力豊かな構文を兼ね備えています。

そして、その設計はプログラミングエラーの全カテゴリを排除します。

Swiftは、私たちのデバイス間でアプリを構築するための絶対的な最高の言語です。

Swiftはオープンソースでもあり、swift.orgで素晴らしい貢献者コミュニティが組織され、Swiftの多様性やSwiftメンターシッププログラムなどのイニシアチブを通じてお互いをサポートし、サーバー上のSwiftやC ++の相互運用性などのトピックに関するワーキンググループで言語を進歩させています。

昨年、Swiftはさらに良くなり、並行性の強化、Swiftコードの読み書きを容易にするためのアップグレード、ワークフローのカスタマイズに役立つツール、そして驚くべき改善。

昨年、Swift Concurrencyの導入で始まりました。

Swift Concurrencyは、並行して実行されるコードの読み書きを劇的に簡素化し、大ヒットし、App Storeの40,000以上のアプリが最初の1年で採用しました。

アプリのコードベースにとって非常に基本的で重要な改善であるため、過去3年間にリリースされたすべてのオペレーティングシステムにSwift Concurrencyでコードをデプロイできるようになりました。

Swift Concurrencyは非同期シーケンスも導入しました。

今年は、Swiftの既存のシーケンスアルゴリズムの豊富なセットに並行性をもたらす新しいオープンソースパッケージがあります。

それは非同期アルゴリズムと呼ばれています。

たとえば、Swiftのシーケンスプロトコルが2つのシーケンスを結合するzipアルゴリズムをサポートしている場合、非同期アルゴリズムは2つの非同期シーケンスをzipするためのバージョンをもたらします。

非同期シーケンスはSwift言語に直接統合されているため、非同期/待機構文のおかげで、通常の直線コードのように見える「for」ループのような使い慣れた構造を使用します。

また、使い慣れたトライ/キャッチパターンを使用して、ネットワークを上る非同期データストリーミングによるネットワーク障害などを処理することもできます。

非同期シーケンスの重要な点は、時間の経過とともにデータ値をどのように配信するかです。

Swiftには、時間単位を表すための新しいクロックタイプのセットが含まれており、非同期アルゴリズムはそれらに基づいて構築され、ここのスロットルのような多くの時間ベースのアルゴリズムを提供し、シーケンスからの更新を遅らせるのに役立ちます。

Swiftの並行性モデルは、非同期コードを同期コードと同じくらい簡単かつ安全に書くように設計されています。

その大きな部分はスウィフトの俳優モデルです。

アクターを使用すると、スレッドセーフで同時実行コードを使用してデータを分離できます。

Swiftは、並列スレッド間で誤ってその状態を共有するのを防ぎ、バグの主な原因を定義します。

俳優間のコミュニケーションは、async/awaitを通じて簡単で効率的です。

今、スウィフトは、分散した俳優と俳優の孤立という考えをさらに進めています。

分散アクターは、複数のプロセスまたはデバイス間で通信できます。

「分散」キーワードは、Mac上の別々のプロセス間、異なるデバイス間のピアツーピア、またはサーバー上のSwiftで書かれたバックエンドと通信するデバイス間など、リモートでアクセスできるこれらのアクターとメソッドをマークします。

アクターがSwiftが競合状態から状態データを保護するのを助けるように、分散アクターは、プラグ可能なトランスポートメカニズムを使用して、Swiftがプロセス外でそれらを利用できるようにするのに役立ちます。

Swiftコンパイラは、分散環境での正しい動作を保証するのに役立つチェックを実行し、関心のある機能の作業に戻ることができます。

分散アクターやその他の並行性機能は、拡張機能が構文の奥深くで作成されている場合、Swiftコードの読み書きがいかに簡単かを示しています。

スウィフトのユーザビリティ強化について詳しくお伝えしますので、こちらがケンです。

Ken Orr: 文字列は、あらゆるプログラミング言語の最も重要な機能の1つです。

しかし、文字列を扱うことは、欲求不満の一般的な原因になる可能性があります。

開発者の旅のある時点で、彼らはこのような文字列から情報を抽出する必要があるかもしれません。

文字列を解析するためのコードを書くことは間違いやすく、多くの詳細を追跡する必要があります。

そして、結果のコードは、読み取りと変更が困難です。

正規表現は、この課題に対する強力な解決策です。

文字列に表示されるパターンを記述し、キャプチャに関心のある情報を指定できます。

今年、Swiftは、新しい正規表現リテラルから始めて、正規表現に関する開発者体験に大きな改善をもたらしています。

それらは言語に直接組み込まれており、Swiftコンパイラが正確性をチェックできるようにします。

そして、正規表現で情報を抽出するときに、Swiftのタイプシステムのパワーを解き放ちます。

そして、彼らはSwiftのクラス最高のUnicodeサポートを最大限に活用しています。

見てみましょう。 

注文から販売の追跡まで、すべてを整理するフードトラックというアプリに取り組んでいます。

そして、いくつかの注文は、データが満載の文字列として入っています。

今、正規表現は私が望む詳細を抽出するのに完璧であり、ここプレイグラウンドでそれらを実験するより良い場所はありません。

正規表現リテラルを作成することから始めます。

次に、式を入力し、注文した人、ドーナツの種類、ドーナツの数を引き出します。

さて、入力すると、正規表現の構文が強調表示されるため、式が正しいことを確認するのに役立ちます。

今から試してみます。

上から順序文字列を使用して、正規表現の最初の一致を探します。

さて、プレイグラウンドを実行すると、インラインの結果で、正規表現が順序文字列のどの部分と一致するかを正確に確認できます。

そしてここで、それは私が探していたものを見つけています。

スウィフトの新しい正規表現サポートはここで止まりません。

ログファイルの一部と一致するこのようなリテラルがより複雑になるにつれて、Swiftはこれらのパターンを作成するためのさらに良い方法を提供します - 正規表現ビルダー。

そして、リテラルをビルダーに変換するのは簡単です。

今、私はコードを持っており、それは読み取りと変更を容易にします。

私はこれをさらに単純化することができます。

ここでは、16進数の数字を探しているので、新しい.hexDigit CharacterClassを使用して、私の意図をさらに明確にします。

今、ビルダー構文は、私の式を作成して拡張し、私が探している結果を得ることをはるかに簡単にします。

そして、それはSwiftの正規表現に関する強力で新しい開発者体験です。

ベン：文字列構文を超えて、Swiftはジェネリックとして知られる言語機能の改善を通じて読み書きも容易になっています。

ジェネリックは、文字列から独自のカスタムタイプまで、あらゆる種類の要素を保持するArrayタイプなど、毎日使用するSwiftのパワー機能を備えています。

汎用コードは、プレースホルダタイプの概念を使用して、後で決定される別のタイプを代用します。

特定のタイプに関する仮定を削除することで、コードの意図をより明確にし、再利用しやすくすることができます。

しかし、これはあなたのコードを読みにくくすることもあります。

たとえば、曲の一般的なコレクションを関数パラメータとして処理したい場合は、意図を表現するためにかなりのコードを書く必要があります。

今、Swiftでは、いくつかの曲のコレクションを受け入れる関数を書くことは、「some」キーワードを使用してSwiftにパラメータを伝えるのと同じくらい簡単です。

あなたは同じ意味を得ますが、コードは少ないです。

他のケースでは、この音楽ライブラリのプレイリストの配列のように、よりダイナミックな動作が必要になる場合があります。これには、さまざまな種類の曲のコレクション、つまり曲のセット、または曲の配列を含める必要があるかもしれません。

そこで、新しい「any」キーワードが役立ちます。

「any」キーワードはSwiftに組み込まれており、任意の曲のコレクションを保持できるタイプを表現することができます。

また、一般的な機能でもシームレスに動作します。

使い慣れた構文を採用し、より自然なキーワードを使用することで、Swiftで一般的なコードを書くことがかつてないほど簡単になりました。

Swift言語に組み込まれている機能と同じくらい重要なのは、その周りに構築されたツールです。

Swift Package Managerを使用すると、アプリの依存関係を簡単に管理し、世界中の開発者が公開した素晴らしいパッケージを活用できます。

今日まで、これらの開発者は何千ものSwiftパッケージを公開し、認証やWebサービスからデータ管理や再利用可能なUIコンポーネントまで、すべてに役立つコードを提供しています。

そして今年、Swift Package Managerは、まったく新しいパッケージプラグインでコードを作成および構築する方法を増幅しています。

プラグインは、他の依存関係と同様に簡単にプロジェクトに追加できるSwiftパッケージです。

それらは、アプリのコードではなく、アプリの構築に役立つコードであることを除いて、新しいチェックアウト時に自動的にダウンロードして構築します。

パッケージプラグインは、ビルドフェーズの一部として、またはオンデマンドで、コマンドラインまたはXcode内で呼び出すことができます。

コードを読んだり変更したりする前に許可を求めるサンドボックス環境で実行されます。

パッケージプラグインでワークフローを拡張する無限の可能性があります。

それらを使用して、チームスタイルガイドをSwiftLintやSwiftFormatなどのパッケージと一致させるようにコードをリントしてフォーマットしたり、Sourceryなどのツールを使用してビルド時にソースコードを自動的に生成したりできます。

仕事を成し遂げるのに役立つものは何でも。

ケン：パッケージプラグインは、Swiftを少し書くだけで、Xcodeを拡張するのに最適な方法です。

そして、あなたは2つの方法でそれを行うことができます。

オンデマンドで使用するコマンドプラグインと、プロジェクトがビルドされるたびにプラグインを構築します。

さて、フードトラックアプリに戻って、ここに私が作成したコマンドプラグインのコードがあります。

私のチームはユニークなコード美学を持っています。

私たちは、文字列の長さの順序でソートされたインポートが好きです。

最短から最長まで。

また、パッケージプラグインはカスタマイズと制御がすべてであるため、SwiftFormatを使用して処理するコマンドプラグインを作成しました。

ローカルで変更されたすべてのファイルを検索し、インポートを並べ替えます。

さて、これは私が編集しているファイルで、上部にソートされていないインポートがあります。

プロジェクト全体でコマンドを使用します。

任意の数のターゲットを選択できます。私はすべてでそれを実行します。

そして、必要に応じてプラグインのコードを確認することができます。

準備万端です。コマンドを実行します。

そして、ちょうどそのように、プラグインは私のファイルで動作します。

ローカルで変更されたすべてのソースファイルを検索し、長さ順に並べ替えます。

プラグインを使用すると、フォーマットだけではありません。

ソースコードを生成したり、gitで作業したり、独自のカスタムエラーや警告を表示したりすることもできます。

私は自分のコードが十分に文書化されていることを確認するための別のプラグインを持っています。

これはビルドプラグインで、オープンソースのSwiftLintパッケージに基づいています。

だから今、私が構築するとき、私はドキュメントを追加する必要がある私のコード内のすべての場所を簡単に見ることができます。

そして、ビルドプラグインはXcode Cloudまで拡張され、すべてのビルドの一部として実行されます。

Swiftパッケージプラグインを使用すると、私のチームと私は独自のコマンドを作成し、ローカルおよびXcode Cloudでビルドをカスタマイズし、それらのプラグインを他の人と共有することができます。

すべてはスウィフトの数行の力を使用しています。

そして、パッケージプラグインが開発ワークフローをレベルアップする方法を簡単に見てみましょう。

ベン：最後に、スウィフトにはボンネットの下にいくつかの印象的な変化があります。

Swiftプロジェクトの構築はこれまで以上に迅速です。

新しい並列化の取り組みのおかげで、リンク時間は最大2倍の速さです。

また、Swiftの並行性ランタイムはOSとより緊密に統合され、非同期タスクの優先順位を確保し、アプリが効率的で応答性を維持するのに役立ちます。

最後に、Swiftで書かれたアプリの起動時間はiOS 16で劇的に速くなり、動的リンカーの改善により、LyftやAirbnbなどのアプリの起動速度がほぼ2倍になります。

これらの内部の改善、ツールの新しい能力、読み書きが簡単な進化した構文、並行性の改善により、Swiftで開発するのにこれほど良い時期はありません。

Swiftは、私たちのデバイス間でアプリを構築するための絶対的な最高の言語です。

しかし、言語は、最高のアプリを構築するために必要なものの一部にすぎません。

言語と強力なユーザーインターフェイスフレームワークをペアリングする必要があります。

そして、イライザはあなたにもっと話すつもりです。

イライザブロック: 強力なUIフレームワークは、インターフェイスを記述し、データを入力し、最新の状態に保つことを簡単にする抽象化を提供します。

それは複雑さに合わせてうまくスケールするはずです。

また、ターゲットとするプラットフォームに合わせて設計し、デバイスのパワーに完全にアクセスできるようにする必要があります。

UIフレームワークは、アプリを親しみやすく直感的に感じさせるのに役立つはずです。

高度なカスタマイズのオプションを使用して、標準コントロールとネイティブインタラクションパターンを簡単に作成できるはずです。

また、アイデアをすばやくプロトタイプ化し、さまざまなデバイスで結果を確認できる表現力豊かなAPIが必要です。

SwiftUIはこれらすべてを提供しています。

Swiftと同様に、Swift UIはアプリを構築する最善の方法について強い意見を持って設計されています。

読み書きが簡単な宣言型構文があります。

インターフェイスの構築方法ではなく、インターフェイスがどのように見えるかを説明します。

そして、これはSwiftUIが各プラットフォームにインテリジェントなデフォルトを提供する余地を残します。

SwiftUIは、基礎となるデータモデルの変更により、インターフェイスを自動的に最新の状態に保つため、アプリのUIが一貫性のない状態になることはありません。

SwiftUIはこれらすべての詳細を処理するので、アプリをユニークにするものに時間とエネルギーを集中させることができます。

新しいUIフレームワークを書くことは大きな事業です。

導入以来、私たちはあなたのフィードバックに導かれて、SwiftUIのAPIカバレッジを継続的に拡大してきました。

今年は、既存のアプリにSwiftUIを段階的に採用することをさらに簡単にし、アプリのナビゲーションから始めて、そのパワーと柔軟性にいくつかのエキサイティングな強化を行いました。

SwiftUIを使用すると、多くのアプリに見られる一般的な種類のナビゲーション階層を簡単に作成できます。

そして今年、SwiftUIはまったく新しいナビゲーションAPIでそのサポートを拡大しています。

新しいナビゲーションAPIを使用すると、アプリのニーズに最も適したナビゲーションのスタイルを簡単に表現できます。

アプリのビューの表示に対する堅牢なプログラム制御により、選択を簡単に保存および復元したり、ナビゲーションスタックの完全な内容を置き換えることさえできます。

これは、アプリの起動状態の設定、サイズクラス間の遷移の管理、ディープリンクへの応答などの重要な動作を処理するときに本当に便利です。

SwiftUIは、アプリのインターフェイスのレイアウトを制御する際にも大きな改善が施されています。

多くのアプリインターフェイスのレイアウトは、SwiftUIの要素の水平または垂直スタックのモデルを使用して説明できます。

そして、このモデルは多くの一般的なレイアウトで機能しますが、時にはもっと柔軟なものが必要です。

今年は、新しいグリッドAPIを追加します。これにより、複数の行と列に並べられた一連のビューを簡単にレイアウトできます。

また、まったく新しいカスタムレイアウトAPIを使用すると、レイアウトをさらに進めることができます。

カスタムレイアウトAPIは、任意のタイプのレイアウトを柔軟に構築できます。

たとえば、ビューを新聞の内容のように配置し、より多くのスペースが必要なときに次の列にラップするフローレイアウトを作成できます。

または、文字盤の数字のように、ビューを円で描画する放射状のレイアウトを作成することもできます。

カスタムレイアウトAPIを使用すると、レイアウトロジックを簡単に再利用でき、ビューコードがよりシンプルで読みやすくなります。

SwiftUIは、より多くのタイプのインターフェース要素を提供するために成長を続けています。

ハーフシートのように、メインビューの上にスライドするセカンダリビューを定義します。

これらは、小さな画面上の情報にすばやくアクセスするのに最適です。

また、SwiftUIはShare Sheetsをサポートするようになったため、アプリはユーザーのデバイスで利用可能なすべてのShare拡張機能を簡単に活用できます。

シェアシートのサポートは、アプリデータを転送するためのタイプセーフAPIを導入する新しいTransferableプロトコルによって強化されています。

また、SwiftUIビューをホストできる特別なコレクションビューセルを使用して、既存のアプリにSwiftUIを段階的に採用しやすくしました。

UIKitアプリにすでにコレクションビューがある場合は、SwiftUIの宣言型構文を使用してカスタムセルを書くことができます。

これらのセルはUIKitと緊密に統合されており、スワイプアクション、セルの背景、およびUICollectionViewの他のすべての機能をサポートしています。

今日は、SwiftUIを補完し、インターフェイスをさらに表現できる新しいフレームワークも紹介します。

ジョーがあなたにもっと話します。

Jo Arreaza-Taylor：今日の世界はデータでいっぱいです。

理解し、決定を下し、新しい視点を見るのに役立つデータ。

適切に設計され、アクセス可能なデータビジュアライゼーションは、明確で自然に感じる方法で複雑さをユーザーに伝え、一日を通してユーザーに力を与えることができます。

健康の変化する傾向を示すのを助け、個人的な目標に向けた進歩を強調し、来るべきもののためにそれらを準備するように。

本日、ユーザーがアプリ内のデータのロックを解除できるようにする新しいフレームワークを導入します。

スウィフトチャートに挨拶してください。

Swift Chartsは、SwiftUIの上に構築された高度にカスタマイズ可能なチャートフレームワークで、ゴージャスなビジュアライゼーションを簡単に作成できます。

SwiftUIと同じ宣言型構文を使用して、視覚的な情報を伝えるコードの読み書きを容易にします。

Swift Chartを使用すると、アプリのニーズに最も合うように情報のプレゼンテーションをカスタマイズして、折れ線グラフや棒グラフからヒートマップやストリームグラフなどのより洗練された例、さらに多くのタイプまで、すべてを作成できます。

また、Swift ChartsはSwiftUIの上に構築されているため、チャートは、カスタマイズが簡単な素晴らしい、すぐに使えるVoiceOver体験など、アクセシビリティ機能をサポートしています。

SwiftUIで構築されているということは、チャートをアニメーション化して、アプリに適切なルックアンドフィールを与えるのにも役立ちます。

そしてもちろん、Swift Chartsはすべてのデバイスでうまく機能します。

イライザ：フードトラックアプリに戻ると、Xcodeの完全に再設計されたプレビューエリアにある美しい新しいスウィフトチャートがあります。

また、新しいマルチコラムSwiftUIテーブルビューを使用しています。

このチャートを作成するのがいかに簡単かをお見せしましょう。

そして、スクロールしながら、ソースエディタで素晴らしい新しい構造化ヘッダーをチェックしてください。

彼らはあなたがファイルのどこにいるかを本当に簡単に見ることができます。

これがチャートのコードです。

さて、これは実際には積み重ねられた棒グラフですが、実際にはわかりません。

それぞれのドーナツに独自の色を使ってもらいましょう。

バーを並べて配置すると、ドーナツがどのように比較されるかを見るのが簡単かもしれません。

私は、いくつかの単純な修飾子でこれらすべての大きな変更を加えることができる方法が大好きです。

スタイリングをカスタマイズすることもできます。

バーがドーナツの色を反映するようにしましょう。

また、別の修飾子でバーに注釈を追加することもできます。

素敵ですね。

プレビューはデフォルトでライブになっているので、すぐに自分のビューと対話できます。

ソート順を変更します。

スウィフトチャートがすべての重い作業を行うと、バーがどのように美しくアニメーション化されるかを見てください。

より多くのデータを取得しましょう。

チャートとテーブルは、モデルが変わると自動的に更新されます。

チャートは、新しい合計を反映するためにY軸を再計算します。

もう1つチャートをお見せしましょう。

ビューに追加できる折れ線グラフをスタブしました。

実装にジャンプします。

スウィフトチャート付きの折れ線グラフには、本当にクールなオプションがいくつかあります。

それぞれのドーナツにシンボルを追加できます。

線に注釈を付けることができます。

さまざまな補間戦略で曲線を滑らかにすることもできます。

catmullRomを使いましょう。

最後に、独自のマッピングを提供することで、チャートのスケールスタイルを上書きします。

これにより、私のチャートはアプリの配色によりよく適合します。

本当にいいね。

再設計されたプレビューエリアは、私のビューがさまざまな環境でどのように見えるかをこれまで以上に簡単に見ることができます。

キャンバスでこのボタンを押すと、ダークモードとライトモードで自分のビューを見ることができます。

プレビューを1つ追加することなく、すべてのインターフェイスの向きでレイアウトを見ることもできます。

風景にズームインしましょう。

私のUIはここにはあまり合わないようです。

いくつかのコントロールはオフスクリーンであり、チャートには厄介なアスペクト比があります。

このレイアウトをどこで説明しているのか見てみましょう。

ここでのこれらのビューは、暗黙のVstackにあります。

今年は、SwiftUIには、より柔軟なレイアウトを作成できる強力な新しいAPIがいくつかあります。

ここでは、ViewThatFitsを使用して、利用可能なスペースに応じて、垂直スタックと水平スタックを切り替えます。

それはずっと良く見えます。

メイン画面から移動できるように、これを配線しましょう。

私はSwiftUIの新しいナビゲーション分割ビューを使用しているので、これは本当に簡単です。

分割ビューには、選択を追跡するサイドバーと、サイドバーの選択が変化するにつれてコンテンツを変更するNavigationStackがあります。

サイドバーにジャンプして、ドーナツチャンピオンビューのナビゲーションリンクを追加します。

そして、インタラクティブなプレビューで試すことができます。

分割ビューを横向きで見たいので、新しいキャンバス設定を使用してライブプレビューを回転させます。

うまくいきます。

私はこれがiPadでどのように見えるかに満足していますが、今はそれをMacに持ち込みたいし、それをするには数回クリックするだけです。

Mac SDKを最大限に活用したいので、ネイティブを使うつもりです。 を使うつもりです。

私のアプリをバックアップする単一のターゲットだけで、私はほとんどすべてのコードを共有することができ、SwiftUIは私のアプリを各プラットフォームで素晴らしく見せます。

デバイス固有の機能を簡単に追加することもできます。

私のMacアプリでは、メニューバーを追加しましょう。

これらは、Wi-FiやSpotlightなど、画面の右上隅にある小さな便利なアイコンです。

SwiftUIには、これのための新しいAPIがあります。

アプリの本文に追加するだけです。

では、これをMac用に実行してみましょう。

私たちのドーナツチャンピオンビューは、箱から出してすぐにMacで素晴らしく見えます。

そして、これがそのメニューバーの余分です。

それは便利でしょう。

そして、それはSwift Chartsと、SwiftUIとXcodeの機能強化のほんの一部です。

そして今、ジョシュに戻ります。

ジョシュ：私たちは、アプリとシステムインターフェース全体でSwiftUIの採用を拡大し続けています。

たとえば、iOSの新しいロック画面ウィジェットは、SwiftUIを使用してゼロから設計されました。

新しいフォントブックアプリはそれで完全に書き換えられました。

そして、新しいmacOSシステム設定アプリのモダンで前向きなデザインは、それを使用して構築されました。

SwiftとSwiftUIは、すべてのAppleプラットフォームに単一の母国語とAPIを提供するために最初から設計されました。

一度学んで、どこにでも適用できます。

あなたのビジョンがApple Watchで一目で情報にすばやくアクセスすること、MacBook ProとiPadの生産性ツール、iPhoneでの新しい体験、またはApple TVでリラックスする新しい方法であるかどうかにかかわらず、Swift、SwiftUI、Xcodeは、すべての製品のアプリを構築するのに役立つ次世代の統合開発プラットフォームを提供します。

さて、既存のアプリがあれば、これらの新しい技術を段階的に採用するのは簡単です。

そして、あなたが私たちのプラットフォームに慣れていない場合、または真新しいアプリを始める場合、アプリを構築する最善の方法はSwiftとSwiftUIです。

もちろん、それはほんの始まりに過ぎません。

また、ユーザーを引き付けるより多くの方法を提供するために、プラットフォームのユーザーエクスペリエンスを進化させ続けています。

そして、あなたにもっと話すために、ここにセバスチャンがあります。

Sebastien Marineau-Mes:今、アプリはアイデア、コード、APIをユーザーエクスペリエンスに変えることです。

そして、最高のアプリは、彼らが今いる場所でユーザーに会うことができるものです。

私たちは、ユーザーエクスペリエンスをアプリを超えて、Appleデバイスのシステムエクスペリエンスに組み込むのに役立つ方法を作成しました。

この旅は、拡張機能、シェアシートとの統合、カスタムキーボードから始まりました。

そして最近では、ウィジェットを使用してアプリにホーム画面に重要な情報を表示させる機能が含まれています。

さて、今年、あなたのアプリが私たちのプラットフォーム全体のシステム体験と統合するための多くの新しい方法があり、それは本当にこれまでで最大のアップデートを得るロック画面から始まります。

ロック画面がどのように見え、どのように機能するかを再考し、アイデアやアプリにユーザーを引き付ける別の場所を提供します。

そして、あなたにもっと話すために、ここにロバートがいます。

Robert Dhaene：ロック画面を再考することで、日常の実用性を向上させながら、さらに個人的で美しいものにすることに着手しました。

その一環として、私たちはまったく新しいロック画面にウィジェットの力をもたらす必要があることを知っていました。

ウィジェットは、アプリから重要な情報を高め、人々が一目で見ることができる場所に表示する素晴らしい方法でした。

ホーム画面から直接、豊富でタイムリーな情報に簡単にアクセスできます。

ロック画面は、iPhoneを受け取るたびに最初に表示されるもので、常に日付と時刻を確認し、重要なメッセージを探す場所でした。

ここでさらに多くの情報を表示するための最良のフォーマットを考えるとき、デザインのインスピレーションを遠くに探す必要はありませんでした。

Apple Watchのコンプリケーションは、すでに目を見やすく、関連性があり、最新の情報を提供し、ユーザーが必要とするときに美しく提示されています。

デザイン言語は自然にiOSに拡張され、新しいロック画面でくつろいでいます。

そのため、WidgetKitを使用して、小さな画像、ゲージ、またはテキストの数文字を表示するCircularなど、同じデザインのいくつかをロック画面のウィジェットに持ち込みました。

円形ウィジェットは、今日十分にアクティブだったかどうか、またはランニングに出かける必要があるかどうかを表示するのに最適です。

長方形は、今後の天気予報のようなものを表示するための大きなキャンバスを提供します。

インラインは、6日月曜日などのシステムが提供する日付文字列の横にある、iPhoneの時計の上に少量のテキストとSFシンボルで情報を伝える強力な方法を提供します。

ところで、これらのウィジェットはすべてiOSとwatchOSの両方で動作します。なぜなら、watchOS 9以降、コンプリケーションもWidgetKitを搭載しているからです。

初めて、同じコードを使用して、両方のプラットフォームで一目確認可能なデータを生成できます。

WidgetKitは、プラットフォームの違いを自動的に管理し、デフォルトで適切なシステムフォントを使用し、最大限の読みやすさのためにロック画面でウィジェットを着色します。

WidgetKitを使用して、同じコードを使用してiPhoneのロック画面とApple Watchのコンプリケーションのウィジェットを作成する方法を示すために、マイケルに渡します。

マイケル・ケント：iPhoneのロック画面でウィジェットを構築し、Apple Watchでコンプリケーションを構築することは、WidgetKitで本当に簡単です。

ホーム画面のウィジェットを作った場合は、データやタイムラインの更新方法を含め、すでにほとんどの道のりをそこにいます。

フードトラックアプリには、すでにシステムスモールウィジェットがあり、ユーザーはホーム画面に追加して、今日のクォータに記入した注文の数を確認できます。

この種の情報は、ロック画面や文字盤のコンプリケーションで表示するのに最適です。

サーキュラーファミリーを構築することから始めましょう。

まず、サポートされた家族の配列でそれへの支援を宣言します。

ここでいくつかのプラットフォームの条件を使用していることに気付くでしょう。

これは、このウィジェットがsystemSmallでmacOSとiOSをサポートし続けたいが、そのファミリーはwatchOSでは利用できないためです。

次に、そのビューを定義するためのケースを追加します。

ユーザーが一目で進捗状況をすばやく確認できるように、0から1日のクォータまでの現在の注文数を示すゲージを使用しましょう。

現在の注文数を、ドーナツ記号とともに中央にテキストとして表示します。そこ。

今、Xcodeプレビューでこれを見てみましょう。

すごい！ロック画面でくつろいでいるように感じます。

もう少し詳細を一目で示すために、長方形のファミリーのサポートを追加することもできます。

このビューでは、表示されているデータのタイトルと同じドーナツ記号から始めて、VStackを作ります。

フォントにヘッドラインスタイルを使用することで、両方のプラットフォームで見栄えのよい治療を得ることができます。

そして、それがウィジェットアクセンカブル修飾子でポップすることを確認します。

長方形の家族は私たちにもう少しスペースを与えるので、クールなカスタムセグメントゲージを表示し、ゲージのラベルの毎日のクォータから現在の注文数を表示します。

キャンバスを振り返ってみると、プレビューにも長方形のウィジェットが見えます。

私は本当にそのゲージが大好きです。

それでは、このウィジェットが時計の文字盤に円形のコンプリケーションとしてどのように表示されるかを見てみましょう。

まあ、大丈夫、すべてがそこにありますが、複雑さのために、Xcodeプレビューのデフォルトであるフルカラーレンダリングモードも考慮する必要があります。

それぞれのゲージに色合いを追加して、それをやりましょう。

そして、長方形の見出しの前景色。

フルカラーで少しポップな場合は、環境プロパティでレンダリングモードをチェックして、円形と長方形の両方のビューでドーナツシンボルをドーナツ絵文字に置き換えることができます。

それは本当に素晴らしく見えます!

プレビューの新しいバリアントUIを使用すると、コードなしでプレビューする色を変更できます。

または、一度にいくつかを見ることさえできます。

また、デフォルトの間隔、システムフォントスタイルを使用し、レンダリングモードに適応したため、ロック画面と文字盤の両方で同じビューが自宅で表示されます。

iOS 16の真新しいロック画面でウィジェットを作るのは簡単で、watchOS 9で大きな複雑さは、すべて同じコードです。

しかし、WidgetKitのパワーをロック画面に持ち込んだのはこれだけではありません。

マットがあなたにもっと話します。

マット・シェパード：WidgetKitを使用すると、人々が一目を見やすい情報にアクセスできるようになります。

しかし、ライブアップデート、アクティビティに関連する情報、または彼らが今気にかけているイベントを必要とする瞬間はどうですか?

そのために、私たちはライブアクティビティと呼ばれる新しいことに取り組んでいます。

ライブアクティビティを使用すると、ロック画面から直接、リアルタイムで起こっていることを把握しやすくなります。

ゲームの最新のスコア、ライドシェアの進捗状況、ワークアウトなど、ロック画面で、常に最新です。

ウィジェットと同様に、WidgetKitでライブアクティビティを作成します。

違いは、ライブアクティビティのプレゼンテーションと状態をリアルタイムで更新することです。

SwiftUIで構築されているため、ある状態から次の状態への更新をアニメーション化することもできます。

これらの更新は、ユーザーがそれを一目見ることを選択したときに、ライブアクティビティに最新の情報があることを確認します。

ライブアクティビティは、今年後半にiOS 16のアップデートから利用可能になります。

だから、これらはまったく新しいロック画面のアップデートです。

彼らは、人々が最も必要とする瞬間に一目でより多くの情報を提供するのに役立つ素晴らしい方法になると思います。

次に、コラボレーション体験を強化するまったく新しい方法について話しましょう。

もっと詳しくお伝えします、こちらがピエールです。

ピエール・ド・フィリス:コラボレーションは、人々がiOS、iPadOS、macOSで行うことの重要な部分です。

そして、それは主に、あらゆる距離で協力しているチームをサポートするために、あなたの多くが構築した信じられないほど豊富なアプリによるものです。

Airtableの製品ロードマップのような仕事のためのコラボレーションがあり、Redfinであなたの夢の家を見つけるような遊びのためのコラボレーションもあります。

仕事でも遊びでも、コラボレーションはしばしば会話から始まります。

また、新しいメッセージコラボレーションAPIを使用すると、アプリの既存のコラボレーションエクスペリエンスをメッセージとFaceTimeに持ち込むことができます。

ユーザーがアプリ内のコンテンツへのリンクを共有する場合、APIを使用すると、そのリンクをコラボレーションとして簡単にマークでき、シームレスなエクスペリエンスが可能になります。

受信者がリンクをタップして参加したときにすぐにアクセスできるように、必要な識別子を提供します。

そしてもちろん、これはプライバシーを損なうことなく機能します。

メッセージのアイデンティティとアプリのアイデンティティは非公開のままであり、共有されません。

そして、最良の部分は、アプリがすでに使用している可能性が最も高い既存の技術でこれを行うことができるということです。

1つのオブジェクトで、ユーザーはすでに慣れ親しんでいる2つの便利な方法でコラボレーションを開始できます。

1つは、コラボレーションを前面と中央にするために更新された共有シート、2つはドラッグ&ドロップで、メッセージの会話に直接ドラッグして、共同作業したいコンテンツを共有できます。

また、会話が開始されたら、コンテンツの更新に関する通知をメッセージの会話に直接投稿することもできます。

数行のコードで、ユーザーはメッセージでワンタップでアプリでのコラボレーションに戻ることができます。

また、コラボレーションポップオーバーを使用すると、ユーザーはアプリから直接メッセージやFaceTimeの会話に戻ることができます。

したがって、メッセージコラボレーションAPIを使用すると、アプリはメッセージとFaceTimeのファブリックに真に織り込まれています。

アプリで提供する強力なコラボレーションツールに集中できるように、ユーザーに強力なコミュニケーションツールを提供します。

したがって、これはiOS、iPadOS、macOSでのコラボレーションをレベルアップし、仕事でも遊びでも、コラボレーションする人々のつながりに深く根ざした一貫した体験を生み出します。

次はアリで、アプリインテントと呼ばれる新しいフレームワークについて教えてくれます。

アリ・ワインスタイン：アプリの機能をシステムで利用できるようにし、人々がSiriとショートカットを通じて自動的に使用できるようにするApp Intentsフレームワークについてお伝えできることを嬉しく思います。

人々はアプリでショートカットを使うのが大好きです。

彼らは、Siriに尋ねるか、ホーム画面のショートカットをすばやくタップするだけで、物事をとても速く成し遂げることができます。

そして、カスタムショートカットを使用して、アプリの機能をまったく新しい機能にリミックスする方法を見るのは驚くべきことです。

今日、人々はショートカットを使用する前に手動でショートカットを追加する必要があります。

新しいApp Intentsフレームワークを使用して、iOS 16でこれを自動化しています。

App Intentsはショートカットと連携してApp Shortcutsを形成し、「ねえ、Siri、ルンバでキッチンを掃除して」のように、最初に何も設定することなく、すぐにSiriで使用できます。

しかし、それはSiriだけではありません。

アプリのショートカットは、Spotlightのように、ユーザーがアプリを検索するたびに、ショートカットも表示され、寄付などの追加のAPIを採用することなく、アプリの提案のすぐ下にショートカットが提案されます。

ショートカットはショートカットアプリにもすぐに表示され、タップするだけで実行できます。

App Intentsは、iOS10で導入したSiriKit Intentsフレームワークの次のステップです。

ウィジェットやメディアやメッセージングなどのドメインと統合するためにIntentsを採用する場合は、SiriKit Intentsフレームワークを使用し続ける必要がありますが、Siriとショートカットのカスタムインテントを構築する開発者は、先に進んでApp Intentsにアップグレードする必要があります。

インテント定義ファイルの変換ボタンを押すと、Xcodeのアプリインテントに簡単にアップグレードできます。

Xcodeは同等のApp Intentsソースコードを生成し、インテント処理コードで空白を埋めます。

App Intentsフレームワークは、Swift用にゼロから設計されており、はるかに少ないコードを必要とするため、開発が本当に簡単です。

あなたが書くSwiftコードは真実の唯一の情報源であり、同期させるための個別の意図定義ファイルやコード生成はありません。

そして、コードはプロジェクトに簡単に追加できます。

コードベースを再構成する必要はありません。 コードベースを再構成する必要はありません。

Objective-Cのコードを持っていても、SwiftでラップすることでApp Intentsで使用できます。

アプリの意図は、人々がアプリ内でできることを表し、アプリの外部からそれを行うことを可能にします。

インテントを定義し、わずか数行のコードでアプリのショートカットを追加できます。

一緒にやってみましょう。

フードトラックアプリに戻ると、今日や今週のように、特定の期間にトップ5のベストセラードーナツを見ることができるこの素晴らしいチャートビューがあります。

これをSiriとショートカットに公開して、人々が超迅速にプルアップしたいので、まずXcodeで新しいSwiftファイルに移動します。

App IntentsフレームワークとSwiftUIをインポートします。

次に、AppIntentプロトコルに準拠した構造体を定義して、意図を定義します。

タイトルを付けます。

そして、どのトレンドの時間枠を見るかのパラメータを追加します。

これは、私のコードベースですでに定義されている時間枠列挙型を使用します。

「今日」や「今週」など、各列挙ケースの人間が読める名前を抽出できるように、AppEnumプロトコルに準拠するように拡張する必要があります。

次に、インテントで、performメソッドを実装します。

ここでは、SwiftUIチャートビューを含む結果を返します。

対話や出力値を含めることもできます。

設定なしでこのインテントを自動的に使用できるようにしたいので、アプリのショートカットを定義します。

これには、人々がこの意図を使うためにSiriに言うことができるフレーズが含まれます。

このフレーズにはアプリ名を変数として含めるなければならず、人々が「今日のフードトラックのトレンド」または「今週のフードトラックのトレンド」と言えるように、時間枠パラメータを含めました。

私がする必要がある最後のことは、これをユーザーにとって発見可能にすることです。

人々はある時点でフレーズを見る必要があるので、Siriに何を言うべきかを知っているので、1秒前に見ていたトップ5ドーナツビューのファイルに切り替えて、Siriのヒントを追加します。

今、私はアプリを構築して実行し、私の携帯電話に飛び乗ることができます。

試してみましょう。 

ショートカットがショートカットアプリに表示され、各パラメータ値のバリアントが表示され、タップするだけでショートカットを実行できます。

そして、「今日のフードトラックのトレンド」というフレーズを言うだけで、Siriからそれらを実行することができます。

あるいは、「今週のフードトラックのトレンド」と言うこともできます。

人々が私のアプリのトップ5ビューにいるとき、彼らは私たちが下部に追加したこのヒントを見るので、彼らはこの機能を尋ねるためにSiriに何を言うべきかを知っています。

最後に、人々はこのようにアプリを検索すると、Spotlightでこれらにすばやくアクセスできます。

それはとても役に立ちます。

App Intentsは、これらすべてのプラットフォームでシステムエクスペリエンス全体でアプリの機能を利用できるようにすることがこれまで以上に簡単になります。

次に、リッキーは認証技術の大きなアップデートについて教えてくれます。

リッキー・モンデロ:私たちが覚えている限り、私たちはパスワードを作成して使用してきました。

しかし、パスワードには、フィッシング、アカウント間での再利用、ウェブサイトの漏洩など、深刻な問題があります。

良いニュースは、私たちが一緒にこれらの問題を解決できるということです。

そして、私たちは今日Passkeysでこれを行うことができます。

パスキーは、認証フローを合理化し、パスワードに関する主要なセキュリティ問題に対処します。

パスキーは信じられないほど使いやすいように設計されています。

このインターフェイスは、生体認証のために、使い慣れたオートフィルスタイルのUIとFaceIDとTouchIDを使用します。

これらの要素は、セキュリティを大幅に向上させながら、パスワードからのシームレスな移行を生み出します。

Passkeysの動作を確認しましょう。

パスキーでアカウントを設定するときは、パスワードを作成する必要はありません。

ユーザー名を入力して、パスワードキーをiCloudキーチェーンに保存します。

これにより、このパスキーが他のすべてのAppleデバイスに安全に同期されます。

そして、サインアウトすると、サインインし直すのは簡単です。

Face IDだけで、私は入っています。

パスキーは、プラットフォームが採用しているオープンな業界標準に基づいて構築されているため、iPhoneで作成したばかりのパスキーを使用して、友人のPCでフードトラックのウェブサイトにサインインできます。

ウェブサイトでは、ユーザー名を入力し、送信し、電話を使用してサインインし、QRコードをスキャンし、iPhoneとPCを安全に接続し、サインインするオプションを選択します。

私のMacのSafariでは、サインインがさらに簡単です。

iCloudキーチェーンのおかげで、私のパスキーはすでにここにあり、ウェブサイトのユーザー名フィールドから直接サインインできます。

パスキーを既存のサインインフローに簡単に統合できます。

たとえば、このウェブサイトのユーザー名フィールドでは、パスキーまたはパスワードでサインインできます。

パスワードベースのアカウントのユーザー名を入力すると、すぐにサインインできます。

パスキーを使用すると、デバイスは大変な作業を行い、毎回安全です。

パスキーを作成するとき、デバイスは作成されたウェブサイトやアプリに固有の一意のキーを生成し、バイオメトリクスの背後にそれを保護します。

弱いパスキーを持つことは不可能です。

忘れたり、再利用したり、推測したりすることはできません。

パスキーは公開鍵暗号に基づいているため、サーバーからのクレデンシャルリークは過去のものになります。

リークやクラックされる可能性のあるソルトされたハッシュ化されたパスワードを保存する代わりに、サーバーは公開鍵のみを保持します。

公開鍵は真に公開されているように設計されており、ハッカーにとってまったく価値がありません。

これにより、ウェブサイトの所有者としてのリスクが大幅に軽減されます。

パスキーで-そしてこの点は巨大です-私たちが今日知っているように、クレデンシャルフィッシングはなくなり、ユーザーが直面するナンバーワンのセキュリティ脆弱性を排除します。

パスキーは、設定されたウェブサイトやアプリに本質的にリンクされているため、ユーザーは間違ったウェブサイトでパスキーを使用するようにだまされることはありません。

そして、パスワードとは異なり、説得力のある偽のウェブサイトにパスキーを入力またはコピーしたり、あなたの肩越しに見ている誰かに何かを渡すことさえできません。

すべてをまとめると、ここで話しているのはアカウントセキュリティの新時代です。

アプリやウェブサイトにパスキーを持ち込むには、ほんの数ステップしかかかりません。

まず、アカウントのバックエンドに公開鍵を保存し、認証の課題を発行するように教えます。

次に、ウェブサイトとアプリで、ユーザーにパスキーを提供し、APIを採用して新しいパスキーを作成し、それでサインインします。

パスキーは、プラットフォームベンダーとサービス所有者の両方から業界全体で共同作業されてきたWeb認証、またはWebAuthn標準に基づいています。

標準自体は成熟しており、よく文書化されており、パスキーは手袋のようにフィットします。

このすべては、あなたが今構築する準備ができています。

次世代のセキュリティ、シームレスなユーザーエクスペリエンス、および移行中にパスワードと一緒に美しく機能するデザイン。

あなたに戻って、セバスチャン。

セバスチャン：すべてのプラットフォームでアプリをシステム体験と統合できる最新の方法をいくつか見てきました。

そして、これらの統合ポイントを超えて、すべてのプラットフォームにたくさんの新しいAPIとフレームワークがあり、今年はあなたとあなたのアプリにさらに多くの可能性を開きます。

そして、より詳細に他のものに飛び込む前に、いくつかをご案内したいと思います。

iPadOSから始めましょう。

iPadOS 16では、一貫性のあるデスクトップのような体験で、これまでで最もパワフルなiPadアプリを作ることができます。

アプリが自動的に取得するUIテキストビューのシームレスな検索と置換エクスペリエンスと、ナビゲーションバー、ツールバー、ドキュメントメニューの更新があり、ユーザーはドキュメントを簡単に管理し、エクスペリエンスをカスタマイズできます。

接続されたハードウェアでiPadのさらに強力なアプリケーションを可能にするために、DriverKitはiPadに登場し、M1チップの信じられないほどのパワーを解き放つのに役立ちます。

これは、今日のMacで利用可能なのと同じAPIで、USB、オーディオ、PCIデバイスのサポートをさらに多くの視聴者に簡単に提供できます。

現在、watchOSは、システムサービスとのより深い統合を通じて、アプリの新しい機会を生み出しています。

watchOS 9のCallKitフレームワークには、FaceTimeオーディオや通話と同じ使い慣れたユーザーエクスペリエンスで、アプリがApple Watchから直接音声通話を発信できる新しいVoiceover IPバックグラウンドモードが含まれています。

また、Bluetoothに接続された医療機器は、より堅牢な接続性とデータ配信を取得し、重大な状態が検出されたときにタイムリーなアラートを可能にします。

今、tvOS 16は、Apple TVのアプリと近くのデバイスのiPhone、iPad、またはApple Watchアプリの間で接続されたエクスペリエンスを作成する新しい方法を提供します。

そのため、ワークアウトではApple Watchのモーションデータを使用したり、iPhoneやiPadをターンベースのゲームのカスタムコントローラーとして使用したり、tvOSはデバイスの検出と接続を管理したりするので、アプリは他のデバイスで実行する必要はありません。

実際、アプリがインストールされていない場合、ユーザーは自動的にApp Storeから直接ダウンロードするように求められます。

今、電話とiPadのために、広告主のための新しいツールがあります。

効果的な広告は多くのビジネスにとって重要であることがわかっています。そのため、SKAdNetworkを作成しました。

これは、広告ネットワークや広告主がユーザーを追跡せずにキャンペーンのパフォーマンスを測定するのに役立つAPIであり、多くのサードパーティの広告ネットワークがそれを採用していることを嬉しく思います。

さて、広告ネットワークや開発者からのフィードバックを聞き、今年は、ユーザーのプライバシーを損なうことなく、最大のリクエストのいくつかを反映し、劇的に柔軟性を与えるSKAdNetworkに多くの改善を行いました。

現在、iPhoneとiPadでは、ScanKitとRoomPlanでARとLiDARスキャンを使用する新しいクールな機能があります。

これらのAPIを使用すると、アプリはUSDおよびUSDZ形式で豊富な3Dパラメトリックルームモデルを作成できます。

そのため、建築やデザインから小売やホスピタリティまで、さまざまなワークフローや体験を作成できます。モデルには、ソファ、キャビネット、テレビ、さらにはキッチンシンクなどのカテゴリの家具分類が含まれます。

さて、昨年、iPhone、iPad、Mac、Apple Watch用のFocusを導入し、アプリがユーザーのFocusに基づいて通知を管理する方法を導入しました。

そして今年、フォーカスはフォーカスフィルターでさらに進んでいます。

それらはアプリのインテントの上に構築されており、フォーカスフィルターを使用すると、ユーザーの現在のフォーカスに基づいてアプリのコンテンツを調整できます。

したがって、たとえば、アプリはフォーカスフィルターを作成して、ユーザーがワークフォーカスにいるときにのみワークアカウントを表示できます。

そして、これらの例は本当に表面を引っ掻いているだけです。

あらゆるレベルで全面的に、アプリをこれまで以上に前進させ、まったく新しいアプリと体験を作成するために必要な機能を備えた新しいツールとAPIがあります。

次に、本当に物事を次のレベルに引き上げている技術であるメタルから始めて、もう少し深く掘り下げてみましょう。

そして、あなたにもっと話すために、サラに行きましょう。

♪ ♪

サラ・クローソン:メタルは、Appleプラットフォーム用の素晴らしいゲームやプロアプリを作成するのに役立つ強力なグラフィックスとコンピューティングAPIです。

Metalを使用すると、Appleシリコンに同梱されている最新のiPhone、iPad、Macのラインナップにまたがる画期的なApple GPUとユニファイドメモリシステムを簡単に活用できます。

そして今年は、さらに高いフレームレートで没入型グラフィックスをレンダリングし、新しいレベルの計算パフォーマンスを可能にする強力な新機能を備えたMetal 3を導入します。

たとえば、機械学習フレームワークであるPyTorchのパフォーマンスが大幅に向上し、新しいMetalバックエンドを使用してGPUでのMLトレーニングが可能になりました。

そして、最大の重点分野はゲームであり、ゲームの読み込みから始まり、起動時間と新しいレベルの読み込みに影響を与えるゲーム体験の重要な要素です。

現代のゲームは、高品質の資産を提供することで豊富なゲーム体験を提供し、これらの資産をストレージからGPUにすばやくロードすることは困難な場合があります。

多くの場合、ゲームはロード画面の後ろにアセットの読み込みを隠し、ゲームプレイをより速く起動する1つのテクニックは、高品質のビジュアルが利用可能になるまで低品質のバージョンをロードして描画することです。

ユーザーは低品質のグラフィックスをより長く見るので、これは理想的なゲーム体験ではありません。

Metal 3は、Apple GPUのユニファイドメモリアーキテクチャを利用してロードオーバーヘッドを最小限に抑え、すべてのAppleシリコンMacに同梱されている高速SSDストレージにスループットを最大化するのに十分な要求があることを保証するMetal IO APIで高速リソースロードを導入します。

この新しいAPIは、より高速で一貫性のあるパフォーマンスを提供するため、理想的な品質での描画により多くの時間を費やします。

リソースをストレージからメモリに移動することに加えて、ゲームの読み込みはシェーダーのコンパイルでもあります。

シェーダーは常にユーザーのユニークなハードウェア構成のためにコンパイルする必要があり、多種多様なPCハードウェアの順列により、これは通常実行時に行う必要があります。

このゲーム内コンパイルは、ゲーマーの経験に影響を与え、フレームの低下、フレームレートの低下、読み込みの延長を引き起こす可能性があります。

対照的に、AppleシリコンとMetal 3は、すべてのAppleデバイスをサポートするように一緒に設計されています。

そして今、オフラインシェーダーコンパイルを使用すると、プロジェクトビルド時にGPUシェーダーバイナリを生成することができ、ゲーム内のシェーダーコンパイルを排除してロード時間を短縮し、レンダリングパフォーマンスを向上させることができます。

ゲームのもう1つの重要な側面は、豊かで詳細な資産を提供することであり、ゲームのグラフィックの視覚的忠実度を高める1つの方法は、はるかに洗練された幾何学的なメッシュを生成することです。

従来、これはサーフェスを評価し、後のレンダリングパスで使用するジオメトリを生成する計算パスで行われます。

課題は、これがレイテンシを導入し、予測不可能な量のメモリを消費する可能性があるということです。

Metal 3は、単一のレンダリングパスから最適化されたジオメトリ処理パイプラインを正確に制御できる新しいメッシュシェーディングAPIを導入しています。

オブジェクトシェーダーは生成するメッシュの数を決定し、メッシュシェーダーはラスタライザに直接送信する実際のジオメトリを生成し、デバイスメモリへの旅行を回避し、パフォーマンスを向上させます。

ゲーマーはまた、これらの素晴らしいビジュアルを可能な限り最高のフレームレートで見たいと思っていますが、高度なグラフィックスを超高解像度でレンダリングすると、貴重なミリ秒の費用がかかります。

MetalFXのアップスケーリングは、フレームあたりより少ない時間で没入型グラフィックスをレンダリングするのに役立ちます。

これがその仕組みです。

以前は、フルフレームをネイティブ解像度でレンダリングしていましたが、GPUのレンダリング時間がターゲットフレーム時間に当たらない可能性があります。

これで、ターゲットフレーム時間に合わせて同じ複雑なシーンをより低い解像度でレンダリングし、MetalFXフレームワークを使用して一時的なアンチエイリアシングとターゲット解像度へのアップスケーリングを実行できます。

AppleシリコンとMetal 3の最適化された機能により、ゲームはMacでこれほど良く見えたことはありません。

そして、開発者は同意します。

大手ゲームスタジオは、Grid LegendsのようなタイトルをMacに持ち込む計画があり、Appleシリコンを利用して最高速度に達するのを支援しています。

またはバイオハザードビレッジは、MetalFXアップスケーリングなどの機能を使用して、忘れられないほど美しいシーンを最高の解像度で配信します。

そして、No Man's Skyは、Metal 3を利用して、MacとiPadの両方で豊かで広大な世界を探索します。

メタル3は信じられないほどで、アプリのパフォーマンスを向上させ、素晴らしいゲーム体験を提供する機能を備えています。

MapKitが向かっている方向についてもっと詳しく教えてください、これがキャシーです。

キャシー・リン:お気に入りのレストランにナビゲートする場合でも、次の休暇を計画する場合でも、お気に入りのフードトラックが地図上のどこに駐車されているかを確認する場合でも、私たちは私たちの周りの世界を探索するのを助けるためにこれまで以上に私たちのデバイスに頼っています。

MapKitは、Appleマップを搭載し、開発者が無料で利用できる、豊かで柔軟なマッピングと位置情報サービスで、ユーザーが世界を発見し、ナビゲートするのに役立つ最良の方法です。

MapKitを使用すると、アプリに地図や衛星画像を表示したり、興味のあるポイントを見つけて呼び出したり、注釈やオーバーレイを追加したり、道順を確認したりできます。

MapKitは、Appleによってゼロから構築されたまったく新しいマップを搭載しています。

細部と精度が向上し、アプリに便利なマッピングと位置情報サービスをもたらすことができます。

iOS 16では、このマップに基づいて、すべての開発者が3Dシティエクスペリエンスを利用できるようにすることから始めて、MapKitの史上最大のアップデートを導入しています。

アプリのユーザーは、3D標高、ターンレーン、横断歩道、自転車レーン、ゴールデンゲートブリッジやフェリービルディングなどの素晴らしい手作りの3Dランドマークなど、信じられないほどの詳細を見ることができます。

マップの追加の詳細により、これまで不可能だったコンテキストと精度を提供できます。

たとえば、興味のあるポイントが横断歩道と自転車レーンが始まる場所の間にあることを示すことができます。

あなたがそれを可能にする他のデジタルマップはなく、私たちはそれを信じられないほど簡単に実装できるようにしました。

もっと見せるために、新しい地図の詳細を使用して、ユーザーがお気に入りのフードトラックが駐車されている場所を簡単に見つけることができる体験を作りましょう。

このようなマップビューは、利用可能な3Dシティエクスペリエンスを自動的に取得します。

展開ターゲットとしてiOS 16を選択するだけです。

次に、地図の並外れた詳細を利用して、フードトラックの正確な位置を説明することができます。

MapKitには、カメラを3D空間に配置して、地図の正確なビューを作成できる強力なコントロールがあります。

ここでは、カメラの中心座標の距離を600メートルに設定することで、ズームインする距離を選択できます。

ピッチとヘディングを調整し、カメラを3Dに傾けることで、ターンレーン、横断歩道、さらには木々などの驚くほど便利な詳細を見ることができます。

デフォルトでは、標高は平坦化されます。

ユーザーが遭遇する地形を理解するのを助けるために、私は3D標高を含む標高スタイル「現実的」で優先構成を指定することができます。

MapKitのDirections APIから供給された注釈またはルートラインを追加すると、MapKitは自動的に標高を処理し、3D地形の上に配置して注釈またはルートラインを調整します。

遅いパンを追加してカメラの見出しをアニメーション化することは、本当にマップビューに命を吹き込みます。

ユーザーがダークモードに切り替えると、マップはUIの残りの部分と一緒に調整されます。

私たちは、iOS 16を搭載した開発者がこの没入型体験を利用できるようにすることに非常に興奮しています。

さらに、別の人気のあるAppleマップ機能をMapKitに導入しています。Look Aroundは、高解像度の3D写真とスムーズなアニメーションで、地上レベルで世界を探索するのに最適な方法です。

ユーザーはタップするだけで通りを移動できます。

ビューコントローラーをドロップしてMapItemを指定することで、マップのすぐ下に静的なLook Aroundプレビューを追加できます。

Look Aroundビューは、自動的に場所を正しくフレーム化します。

ユーザーがプレビューをタップすると、ユーザーが住所、画像が収集された日付を確認できるフルスクリーンのルックアラウンドビューを提供することを選択できます。また、タップして自由に動き回って周囲をよりよく理解することができます。

iOS 16-Apple Maps Server APIのMapKitに導入する、新しく要求の高い機能がもう1つあります。

マップサーバーAPIはRESTfulであり、MapKitの最もよく使用される機能の4つをサポートしています。緯度/長値をアドレスに変換するGeocode、反対のことをするReverse Geocode、アドレスをGPS座標に変換します。検索、到着予定時刻。

当社の新しいマップサーバーAPIは、独自のバックエンドサービスをより豊かで高性能にするための素晴らしい方法です。

もちろん、MapKitはAppleマップと同じプライバシー基盤の上にゼロから構築されており、ユーザーのデータを自分のアイデンティティに関連付けたり、どこにいたかの履歴を保持したりすることはありません。

そして、それはiOS 16のMapKitの新機能を簡単に見ることができます。

さて、天気、または少なくともアプリに組み込む方法については、ここにNovallがあります。

ノバル・カーン：本日、天気アプリをiPadとMacに導入し、悪天候通知、豊富な詳細ビュー、10日間の1時間ごとの気温と降水量の予報など、強力な新機能を導入することを発表しました。

そして、Appleのデバイスやプラットフォームには、Siriに今日の予報を尋ねることから、洪水周辺のナビゲーションを再ルーティングすることまで、私たちが提供する気象データのおかげで良くなる他のあらゆる種類の体験があります。

そのすべては、Apple Weatherサービスに基づいて構築されています。

Apple Weatherは、機械学習と予測アルゴリズムと組み合わせた高解像度の気象モデルを使用して、世界クラスのグローバル天気予報を提供します。

Apple Weatherは、現在の天気、10日間の1時間ごとの予報、毎日の予報、過去の天気を提供するため、データの傾向を評価できます。

厳しい気象警報と分ごとの降水量は、世界中の一部の国でも利用可能です。

予測には、10日間の1時間ごとの気温、降水量、UV指数予測などが含まれます。

そして、このデータはすべてWeatherKitを通じて入手できます。

WeatherKitは、すべてのAppleプラットフォーム用のネイティブSwift APIであり、どこからでも使用できるREST APIです。

これらのAPIは、正確でハイパーローカルな天気予報を提供し、ユーザーが安全、情報、準備を維持するのに役立ちます。

簡単なデモで、WeatherKitの優れたSwift APIを通じて天気情報を取得するのがいかに簡単かをお見せしましょう。

フードトラックアプリを再検討しましょう。

私の顧客が雨に巻き込まれないように、私のアプリは晴れた空の駐車場を推奨するように設定されています。

天気を手に入れる方法をお見せしましょう。

ここに安全な駐車場のリストがあります。

私はすでにXcodeにWeatherKit機能を追加しましたが、必要なのは数行のコードだけです。

Swift Concurrencyを使用すると、天気のリクエストは簡単です。

WeatherServiceでweather(for:)に電話し、場所を通過します。

その後、状態、降水量、雲量など、アプリに必要な関連データを取得できます。

各駐車場に必要なデータがわかったので、アプリを実行すると、カスタムビューが更新され、晴れた場所が推奨されます。

天気データを使用して、アプリの体験をより良くする方法は、さまざまな方法があります。

天気予報を使用して在庫を支援し、アイスクリームで満たされたドーナツが暑い日に人気のある注文になると予測するので、アイスクリームを買いだめする必要があります。

フードトラックの天気を知るために必要なのはそれだけであり、WeatherKitで発見すべきことはもっとたくさんあります。

Appleのプライバシーへのコミットメントに沿って、場所は天気予報を提供するためにのみ使用され、個人識別情報に関連付けられておらず、共有または販売されることはありません。

プライバシーは共通の責任であり、WeatherKitを通じて、ユーザーのプライバシーを保護しながら正確な気象データを取得できます。

WeatherKitを簡単に使い始められたいので、Apple Developer Programのメンバーシップには毎月50万件のweather(for:location)APIコールが含まれています。

より多くを必要とする人は、この秋から、開発者アプリで追加のサービス層を購入することができます。

それがWeatherKit、Apple Weatherサービスを搭載した正確でハイパーローカルな天気予報です。

ベータ版から始めて、現在すべてのプラットフォームで利用可能です。

アプリでWeatherKitを使用できる創造的な方法はたくさんあります。

そして今、ここにライアンがいて、あなたのアプリがライブテキストで見ることができるものについていくつかの視点を与えてくれます。

ライアン・ディクソン:私たちのユーザーはライブテキストが大好きで、あなたのアプリにも持ち込みたいと多くの人から聞いています。

今年は、それを可能にする2つの新しいAPIでVisionKitを拡張します。

ライブテキストAPIは、画像コンテンツを分析する機能のロックを解除し、ユーザーが写真や一時停止したビデオフレームにあるテキストやQRコードを操作できるようにし、ユーザーが関連するデータに対してタップするだけでアクションを実行できるように、迅速なアクションを提供します。

Apollo for RedditやVimeoなど、ビジュアルメディアを表示するアプリに最適です。

また、データスキャナAPIは、ライブカメラフィードを分析する機能のロックを解除します。

ユーザーのテキストとバーコードの取り込みを劇的に簡素化します。

あなたがする必要があるのは、アプリのニーズに合わせてライブカメラ体験を調整するオーバーレイやカスタムコントロールを追加することだけです。

これは、倉庫の在庫管理、ピックアンドパック配送サービス、POSキオスク用に構築されたQRコードやエンタープライズアプリに依存する消費者向けアプリに特に役立ちます。

ライブテキストとデータスキャナの両方のAPIは、今年の日本語と韓国語の追加を含む9つの言語の自動検出をサポートしています。

これらのVisionKit APIは、わずか数行のコードでアプリに長年のコンピュータビジョンの革新をもたらします。

ジェニーがやり方をお見せします。

ジェニー・チェン:デモをお見せするために、信頼できるポップアップフードトラックアプリに戻ります。

私たちは、ユーザーがハッシュタグ#freedonutとアプリのアドレスでサインアップしてソーシャルチャンネルに写真を投稿した場合、彼らのアドレスまで車で行き、無料のドーナツを届けるプロモーションを行っています。

私たちはソーシャルドーナツフィードに向かいます。

ドライバーがテキストを抽出して配信先のアドレスを取得できるように、画像にライブテキストを追加したい。

ここでは、新しいライブテキストAPIが再生されます。

ビューの上部にImageInteractionを簡単に追加でき、クイックアクションをサポートするライブテキストボタンが追加されます。

ライブテキストボタンは通常右下にありますが、アプリにはすでにハートボタンがあるので、カスタムインセットを使用して配置を調整できます。

また、ボタンの設定を設定して、ボタンのスタイルをカスタマイズして、アプリによりよく一致するようにすることもできます。

追加したので、ライブテキストボタンをタップしたり、テキストを選択したり、クイックアクションを使用してアドレスを簡単に取得したりできます。

ライブテキスト体験と同じ使いやすさを提供するため、ユーザーが新しいインタラクションモデルを学ぶ必要がないのが大好きです。

UIは一貫性があり、使い慣れています。

OSと統合されている感じがしますが、独自のカスタムUIを持っていても配置を調整できます。

もちろん、他の良い配信アプリと同様に、お客様に最高のサービスを提供し、人々に適切なドーナツを提供していることを確認したいと考えています。

そのため、QRコードでドーナツの注文を追跡します。

新しいデータスキャナAPIを使用すると、顧客とのやり取りの最初のステップとして簡単に追加できます。

現在、そのボタンは何もしませんが、テキスト、QRコード、またはバーコードを探す新しいDataScannerオブジェクトを簡単にインスタンス化して、アプリにインポートできます。

ほんの数行のコードで、カメラを起動し、QRコードを指定し、スキャンを開始できます!

ドライバーがQRコードをタップすると、スキャンが成功したことを示したい。

Xcodeでデリゲートハンドラを追加します...

...そしてタップで、スキャンが成功したというアラートをユーザーに表示して、先に進んでドーナツの注文を開始できるようにします。

アプリを実行すると、カメラビューのビューコントローラーが表示され、ガイダンスとQRコードを強調するレチクルビューが表示されます。

QRコードをタップすると、スキャンが成功し、ドーナツの注文が確認されたことがわかります。

そして、それで、私の#freedonut配達が近づいています。

VisionKitを使用すると、新しいライブテキストおよびデータスキャナAPIを使用すると、これらの強力なビジョン機能をアプリに簡単に持ち込むことができます。

そして今、スーザンに戻ります。

スーザン：これはアプリを構築するエキサイティングな時期です。

Xcode Cloudは、より良いアプリをより迅速に構築するのに役立つ準備が整いました。

SwiftとSwiftUIを使用すると、アイデアをAppleプラットフォーム間で機能するアプリに変換することがこれまで以上に簡単になります。

あなたのアプリがあなたのアイデアをシステム体験に深く持ち込むためのクールな新しい方法があります。

ロック画面ウィジェットとライブアクティビティは、アプリをロック画面にもたらします。

メッセージコラボレーションは、ユーザーが接続して共同作業することを非常に簡単にします。

また、App Intentsは、アプリをSiriと統合するのに役立ちます。

まったく新しいAPIと、WeatherKit、MapKit、Live Text、Metalなどの既存のAPIへの主要なアップデートがあります。

そして、それは物語の終わりではありません。

今年はもう一つの大きなWWDCで、175のセッション、何百ものラボ、デジタルラウンジのアクティビティが一週間中開催されています。

今週あなたとつながるのが待ちきれません。さらに重要なことに、今週はあなたのためです。

私たちは、あなたが次に作るものを見ることを熱望しています。

ありがとう！

♪ ♪

。

。

。

。

。

。

。

。

。

。

。

。

。

。

。

。

。