10065

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私はジャレッド・マルソーで、アップルのゲームテクノロジーで働いています。

今日は、選択したAppleフレームワークを使用して、Unityベースのゲームに新しい機能を追加する方法についてお話しします。

私たちは、多くの人がゲームを構築するためにUnityなどのツールを使用していることを知っています。

私たちの目標は、使用しているツールに関係なく、最新の機能を提供することです。

今日から、Unityプラグインの新しいセットでゲームを強化しましょう。

Game Centerプラグインを使用して、プレイヤー認証、リーダーボード、マッチメイキングなどのGameKit機能を追加します。

MFiとサードパーティのコントローラーのサポートとともに、入力のカスタマイズとグリフにゲームコントローラープラグインを使用してください。

アクセシビリティプラグインを使用して、VoiceOverやDynamic Typeなどのシステム機能を通じてアクセシビリティを向上させます。

Appleのデータ駆動型の豊富な触覚フィードバックシステムをCore Hapticsプラグインと統合します。

PHASEプラグインで高度なジオメトリ対応の空間オーディオを追加します。

最後に、Apple.Coreプラグインを使用してビルド設定を管理し、ビルドプロセスを簡素化します。

このプラグインの最初のセットは、新しいゲームプレイの仕組みを追加し、ゲームをよりアクセスしやすくし、最新の機能やサービスをより迅速に活用するのに役立ちます。

この新しいUnityプラグインセットで作成した素晴らしいゲームを見て、非常に興奮しています。

では、プロジェクトの詳細に入ります。

まず、プロジェクトの設計原則について説明します。

次に、プロジェクトのコンセプトと組織について説明します。

次に、プロジェクトリポジトリとの対話に関するいくつかの重要な指針を提供します。

そして最後に、各プラグインについて詳しく説明します。

ご存知かもしれませんが、Appleのフレームワークはモジュール式の方法で機能をカプセル化しています。

これにより、コンパクトで効率的なコードを維持しながら、アプリに適したテクノロジーを選択して選択できます。

Unityプラグインでは、同様のパターンに従います。各プラグインは、単一の基礎となるフレームワークにマップされます。

これにより、ゲームのニーズに基づいて使用するプラグインのセットを選択して選択できます。

各プラグインは、基盤となるフレームワークに可能な限り直接マッピングするC#ベースのUnityスクリプトを公開します。

これを行うことは、基礎となるフレームワークに精通しているかもしれない知識がプラグインに引き継がれていることを意味します。

概念、そして多くの場合、フレームワークAPIは直接引き継がれます。

逆に、これはまた、プラグインを学習することで、暗黙的に基礎となるフレームワークを学習することを意味します。

もう1つの重要な詳細は、これらのプラグインがAppleプラットフォームのネイティブライブラリとして構築されていることです。

これらのライブラリは、C#スクリプトと基礎となるフレームワークAPIの間の接着剤として機能します。

Apple UnityプラグインはUnityパッケージとして整理されているため、Unity Editorの組み込みパッケージマネージャーを使用して、プロジェクトへの統合を管理できます。

場合によっては、プラグインには、プラグインでの作業をさらに簡単にし、すでに慣れ親しんでいるUnityインスペクタ主導のワークフローと一致する追加のエディタ機能も含まれています。

もちろん、各プラグインは、詳細なreadmes、サンプル、および関連するApple Developerドキュメントなどの追加リソースへのリンクとペアになっています。

次に、始めるのに役立ついくつかの重要なワークフローの概念を簡単に検討します。

最初のステップは、GitHubからソースをクローンすることです。

すべてのプロジェクトのソースとドキュメントは、そこで見つけることができます。

これは、Apple Unityプラグインを使用するすべての人にとっての出発点です。

リポジトリを複製したら、プラグインの構築が最初のタスクの1つになります。

このプロセスを簡素化するために、リポジトリにはリポジトリルートにPythonスクリプトが含まれています:build.py。

このスクリプトは、ネイティブライブラリの構築、正しい場所へのコピー、Unityメタファイルの更新、プラグインのパッキング、プラグインテストの構築を処理します。

スクリプトは、最も単純な呼び出しがすべてのプラグインを構築し、それらをtarballにパッケージ化し、Unityプロジェクトに統合する準備ができているビルドフォルダに保存するように整理されています。

プラグインを完全に構築して梱包するには、Xcode、Python3、npm、およびUnityが必要であることに注意することが重要です。

最後に、プロジェクトリポジトリでbuild.pyを使用するための詳細なドキュメントがあります。

今度は、各プラグインの詳細に飛び込む時です。

各プラグインについて、Unityプロジェクトに追加する方法、含まれている機能の簡単な概要、主要なスクリプトの概念、およびUnity Editorのいくつかのコードスニペットまたは例について説明し、それらをプロジェクトに統合する方法を強調します。

基本的なプラグイン、Apple.Coreから始めましょう。

Apple.Coreは、各プラグインのビルド設定をUnityのプロジェクト設定ウィンドウ内の1つの環境設定ペインに統合します。

各プラグインのネイティブライブラリをコンパイルするため、Apple.Coreにはアセットプロセッサも含まれており、各プラグインライブラリがインポート時に適切なプラットフォーム用に構成されていることを保証します。

プロジェクトを構築するとき、Apple.Coreには、中間Xcodeプロジェクトでネイティブライブラリが正しく参照されるように、ビルドへの後処理として実行されるスクリプトも含まれています。

各プラグインは基盤となるフレームワークと相互作用するため、Apple.Coreは一握りのランタイムインターオペタイプも定義し、C#スクリプトとネイティブコードレイヤー間のデータ転送を容易にします。

最後に、Apple.Coreは他のすべてのApple Unityプラグインの依存関係です。

これは、他のプラグインよりも先にApple.Coreをプロジェクトにインポートする必要があることを意味します。

このデモでは、Apple.Coreプラグインを新しいプロジェクトにインポートする方法を紹介し、Apple Build Settingsの環境設定を簡単に説明します。

プラグインが構築され、パックされると、Apple.CoreはUnity Package Managerでインポートできます。

Tarballからパッケージを追加し、パッケージ化されたプラグインを参照するオプションを選択するだけです。

その後、エディタはパッケージをロードし、スクリプトをコンパイルします。

完了したら、Apple.Coreは使用できるようになります。

Apple.Coreの主なユーザー向け機能は、エディターのプロジェクト設定ウィンドウにApple Build Settingsタブを追加することです。

Apple Unityプラグインをインポートすると、利用可能なすべてのビルドオプションがここに表示されます。

箱から出してすぐに、Apple.Coreには、最小サポートされているOSバージョンなど、いくつかのデフォルト設定オプションが付属しています。

また、プラグインのポストプロセスビルドステップを無効にできることに注意することも便利です。

最後に、中間Xcodeプロジェクトに伝播する共通のセキュリティ設定を構成できます。

Game Centerプラグインを使用して、AppleのソーシャルゲームネットワークであるGame Centerを使用して、ゲームにさらに楽しさとつながりをもたらします。

Game Centerは、プレイヤーがAppleプラットフォーム間でアイデンティティを構築し、安全で安全なプレイヤー認証、ゲーム内の成果、共有リーダーボード、プレイヤー間で送信されるチャレンジ、マルチプレイヤーマッチメイキングなどの機能を可能にします。

ゲームに統合するGame Center機能を選択して選択できますが、すべてはプレイヤー認証から始まります。

Game Centerのプレイヤー認証をゲームに追加すると、Game Centerウィジェットはプレイヤーのホーム画面またはApp Store内でゲームを特集できます。

また、プレイヤー認証を追加するには、ほとんどコードを必要としません。

最初のステップは、Apple.CoreとGameKitのプラグインをプロジェクトに追加することです。

GameKitプラグインはGame Centerサービスを接続します。

認証するときは、Game Centerサービスに接続し、GKLocalPlayerオブジェクトを初期化します。

初期化したら、ローカルプレイヤーのプロフィールに基づいてプレイヤーの制限を照会します。

これらの制限には、未成年プレイヤーのアダルトコンテンツまたは露骨なコンテンツへのアクセスの制限、マルチプレイヤー機能へのアクセスの制限、またはゲーム内コミュニケーションの無効化が含まれます。

GKLocalPlayerとGame Centerサービスとの相互作用を管理する簡単な方法は、Unity内でコンポーネントを定義することです。

たとえば、ここでは、単純なゲームマネージャーのコンポーネント定義です。

このコンポーネントは、GKLocalPlayerへの参照を保持します。

また、開始方法でプレイヤーの制限の認証とクエリの両方を処理します。プレイヤーの認証は、ゲームの存続期間中に一度だけ行う必要があります。

これはGameManagerコンポーネントのスクリプトです。

GKLocalPlayerをキャッシュするためのフィールドは次のとおりです。

コンポーネントのstartメソッドの中には、GKLocalPlayerインスタンスを返す静的メソッドであるGKLocalPlayer.Authenticateへの1回限りの呼び出しがあります。

ローカルプレーヤーが正常に認証されたら、プレーヤーの制限を確認する時間です。

コードでプレイヤーの制限をチェックすると、一連のブールチェックに解決され、GameManagerコンポーネントのスクリプトのtryブロックに追加できます。

ここでの真実は、ローカルプレーヤーが明示的なコンテンツへのアクセスを制限する必要があることを意味します。

ここでの真実は、あなたの地元のプレイヤーが制限されたマルチプレイヤー体験を持つべきであることを意味します。

そして最後に、ここでの真実は、ゲーム内通信を無効にする必要があることを意味します。

そして、それはあなたのゲームにプレイヤー認証を追加するために必要なすべてのコード変更です。

ここから、Game Centerを利用するためにゲームを完全に準備するために必要な2つの追加ステップがあります。

まず、中級のXcodeプロジェクトにGame Center機能を追加する必要があります。

これは、XcodeプロジェクトUI内から行われます。

詳細については、Apple Developerのドキュメント記事「Game Centerの有効化と設定」を参照してください。

次に、App Store Connectを使用してGame Centerの機能をアプリに追加する必要があります。

詳細については、App Store Connectポータルをチェックしてください。

これらの手順を完了すると、プレイヤーを認証し、安全なゲーム環境を確保する準備が整いました。

プレイヤー認証は、Game Center Unityプラグインによって利用可能になった機能の表面を引っ掻くだけです。

ゲームの発見可能性の向上の詳細については、「Game Centerダッシュボードで新しいプレイヤーにリーチする」セッションをチェックしてください。

マルチプレイヤーとマッチメイキングの詳細については、昨年の「Game Centerの新機能」セッションをご覧ください。

コントローラーは、プレイヤーがあなたが作成する世界と対話するための主要な方法です。

ゲームコントローラープラグインを使用すると、ゲームに信頼性が高く柔軟なゲームコントローラーのサポートを簡単にもたらします。

ゲームコントローラープラグインは、ゲームコントローラーのカスタマイズのサポートなど、いくつかの機能を備えており、プレイヤーはすべてのゲームのボタンを1か所に再マップできます。

一貫したユーザーエクスペリエンスを確保するためのボタングリフ。

また、すべてのMFiコントローラーだけでなく、一部のソニーやマイクロソフトのコントローラーなどのサードパーティのコントローラーもサポートしています。

他のプラグインと同様に、パッケージマネージャーを使用して、Apple.CoreおよびGame Controllerプラグインをプロジェクトに追加します。

Game Controllerプラグインがロードされた状態で、最初のステップはGCControllerServiceを初期化することです。

まもなくわかるように、このサービスはコントローラーとその接続イベントへのアクセス方法です。

初期化したら、現在システムに接続されているすべてのコントローラーについてGCControllerServiceを照会します。

接続されたコントローラーは、ゲームコントローラープラグインのGCControllerオブジェクトで表されます。

接続されている各GCControllerについて、更新されたコントローラの状態をポーリングします。

ポーリングは、ゲームが必要とするのと同じくらい少ない、または頻繁に発生する可能性がありますが、始めるのに良い場所はUnityの定期的な更新ループです。

コントローラの状態が更新されたら、ボタン、親指スティックなど、コントローラの個々の要素の入力をテストします。

忘れないように、コントローラーはゲームのライフサイクル中に行き来するかもしれません - コントローラーの接続と切断イベントを処理するためにコールバックを登録します。

ゲームコントローラープラグインを統合する簡単な方法は、簡単な入力マネージャーコンポーネントを作成することです。

このコンポーネントには、現在接続されているすべてのコントローラを保持するコンテナ、初期化の開始方法、入力のポーリングとテストを処理するための更新方法の3つの重要な要素があります。

まず、開始方法を詳しく見てみましょう。 

これは、必要な1回限りのセットアップタスクをすべて行うのに最適な場所です。

ゲームコントローラーサービスの初期化は、接続されたコントローラーの初期チェックと、接続および切断イベントのコールバックの登録とともに、ここで行われる必要があります。

これが入力マネージャーコンポーネントのスクリプトです。

すべてのワンタイムセットアップコードは、GCControllerServiceの呼び出しを含むコンポーネントの開始メソッドに入ります。初期化()。

GetConnectedControllersを呼び出すと、現在接続されているすべてのコントローラの列挙可能なコンテナを取得します。

最終的な初期化ステップは、コントローラの接続および切断イベントのコールバックを登録することです。

初期化が完了したので、入力マネージャーは、接続された各コントローラをポーリングして入力状態を更新し、各コントローラの入力の入力状態を処理するための更新方法も必要です。

入力をポーリングするには、接続されたコントローラーのセットを反復することから始めます。

GCControllerのPollメソッドを呼び出して、最新の状態を収集します。

次に、各ボタンの状態を確認し、それに応じて応答します。

そして、ゲームコントローラープラグインを使用して接続されたコントローラーにアクセスし、コントローラーの入力を取得する方法を簡単に見てみましょう。

ゲームコントローラーフレームワークについて詳しく知り、サードパーティのコントローラーや非標準入力などのトピックについては、前年のセッション「新しいゲームコントローラーのサポート」と「ゲームコントローラーのアドバンス」をチェックしてください。

アクセシビリティとは、誰もがテクノロジーを利用できるようにすることです。

アクセシビリティプラグインを使用して、幅広いAppleの支援技術をUnityベースのゲームに統合します。

アクセシビリティプラグインは、プログラムでタグ付けされたコンテンツをユーザーに読み取ることができるVoiceOverなどの主要な機能を追加する機能を提供します。スイッチコントロールは、幅広い支援入力デバイスを可能にします。ダイナミックタイプは、ユーザーの好みに基づいてゲーム内のテキストとUIを簡単にスケーリングします。システム全体のアクセシビリティ設定に準拠するためのUIの宿泊施設設定。

アクセシビリティプラグインでカバーすることがたくさんあるので、アクセシビリティユニティプラグインを深く掘り下げるために、「Unityゲームにアクセシビリティを追加する」セッションをチェックすることをお勧めします。

そのセッションでは、例やユースケースを得るだけでなく、Appleプラットフォームでのアクセシビリティで何が可能かを理解することもできます。

機会があればすぐにチェックしてください。お早めに。

ゲームに触覚フィードバックを追加することは、没入感を高め、ゲームプレイ体験を向上させる素晴らしい方法です。

Appleの高度な触覚機能とCore Hapticsプラグインを統合します。

Core Hapticsプラグインを使用して、一連の触覚およびオーディオイベントからカスタム触覚パターンを構築します。

同期したカスタムオーディオとハプティックを再生します。

パラメータをリアルタイムで調整することで、触覚フィードバックをプログラムで定義または更新します。

パターンをアセットとして設計および保存するためのファイルベースのアプローチには、Apple Haptic and Audio Patternファイル形式（AHAP）を使用します。

インスペクタのサポートにより、Unity EditorでCore Hapticsパターンを調整します。

Core Hapticsプラグインを最大限に活用するには、Core Hapticsの4つの基本的な要素とその相互関係を理解する必要があります。

最高レベルの要素はCHHapticEngineです。

触覚エンジンは、デバイス上の触覚サーバーへのリンクを表し、触覚パターンを再生するために必要です。

CHHapticEngineはCHHapticPatternPlayersを作成します。

パターンプレーヤーは、開始、停止、一時停止、再開などのコントロールを備えたCHHapticPatternsの再生に使用されます。

CHHapticPatternは、1つ以上の触覚イベントとオーディオイベントの論理的なグループです。

CHHapticEngineはパターンを使用してプレイヤーを作成します。

CHHapticEventsは、触覚体験を定義するために使用される構成要素です。

Core Hapticsはデータ駆動型APIで、ハプティックパターンをプログラムで定義したり、スクリプトで直接定義したり、AHAPファイルを活用したりできます。

プロジェクトにCore Hapticsサポートを追加する簡単な方法の1つは、必要な各Core Hapticsオブジェクトを管理するHapticsコンポーネントを作成することです。

以下は、CHHapticEngine、CHHapticPatternPlayer、およびAHAPアセットを含むHapticsコンポーネントの例です。

AHAPアセットは、Core Hapticsプラグインで定義されたカスタムUnityアセットです。

これにより、AHAPファイルへの簡単なインポートとエクスポート、およびパターンの作成とカスタマイズを管理するためのカスタムエディタ拡張機能が可能になります。

詳しく見てみましょう。 

まず、Apple.CoreとCore Hapticsの両方のプラグインがプロジェクトにインストールされていることを確認します。

それらを追加すると、私は触覚でゲームを強化し始めることができます。

これは、前の図に基づいて作成したハプティクスコンポーネントです。

すぐに実装を確認しますが、とりあえず飛行機に取り付けます。お取りします。

添付すると、コンポーネントにAHAPアセットが必要であることがわかりますが、私のAHAPアセットフォルダは空です。

アセット>作成>Apple>CoreHaptics>AHAPに移動して、新しいものを作成します。

一度作成したら、私はそれに幻想的でオリジナルの名前を与えます:MyHapticPattern。

Core Hapticsプラグインには、インスペクタウィンドウで新しいパターンを調整できるエディタ拡張機能が付属しています。

これは、再生できるCHHapticPatternの一部であるCHHapticEventsを定義する場所です。

デフォルトでは、一時的なイベントがありますが、連続イベントも簡単に追加できます。

UIには、インポート、エクスポート、リセットボタンもあります。

リセットは、追加したイベントをクリアし、パターンをデフォルトの状態に戻します。

インポートとエクスポートは素晴らしい機能です。

これにより、プロジェクトはAHAPファイルをロードして保存できます。

ここでは、素敵な振動効果を引き起こすランブルと呼ばれる事前定義されたAHAPをインポートしましたが、少しだけ微調整する必要があると思います。

パターンを更新したので、この改善された触覚パターンを他のチームと共有するために、新しいAHAPファイルにエクスポートすることができます。

私の資産が作成され、調整されたので、私は飛行機に戻り、それをMyHapticPatternに向けます。

すごい！すべてが配線されています。

触覚パターンが定義され、適切に参照されると、残っているのは、触覚パターンを再生できるように、Hapticsコンポーネントにロジックを追加することだけです。

これは、PrepareHapticsとPlayの2つの方法に分けることができます。

PrepareHapticsは、触覚エンジンが初期化され、触覚パターンプレーヤーが作成される場所です。

再生は、CHHapticPatternPlayerの開始メソッドを呼び出して再生を開始するだけです。

そして、これがHapticsコンポーネントスクリプトです。

フィールドは、ハプティックエンジンとハプティックプレーヤー用に定義されています。

重要なのは、erializeField属性を追加して、エディタUIでAHAPアセットを設定できるようにすることです。

次に、コードを追加してCHHapticEngineを作成し、起動し、参照アセットから直接AHAPにアクセスして触覚パターンプレーヤーを作成します。

もちろん、プレイヤーにスタートを呼び出すと、触覚パターンが再生されます。

Core Haptics Unityプラグインは、ゲームにまったく新しいレベルの没入感を追加するために必要なツールを提供します。

Core Hapticsプラグインを使用して、見た目、音、感触がリアルに感じる魔法のゲームの瞬間を作成します。

コアハプティクスを深く掘り下げるには、「コアハプティクスの紹介」セッションをご覧ください。

魅力的なハプティック体験の設計の詳細については、「オーディオハプティック体験の設計」と「オーディオハプティックデザインの練習」を必ずご覧ください。

没入型オーディオは、素晴らしいゲーム体験の非常に重要な側面です。

PHASE Unityプラグインを使用して、クリエイティブな可能性を解き放ち、ゲームの世界に緑豊かなサウンドスケープを構築します。

PHASEを使用すると、ゲームに複雑でダイナミックなオーディオ体験を提供できます。

ジオメトリを意識したオーディオとは、音がシーン内のメッシュから発せられ、相互作用することを意味します。

ゲームの環境は、残響と反射を通してより現実的に聞こえます。

ゲームプレイ中に動的オーディオ制御を可能にする階層的なオーディオグラフを構築できます。PHASEプラグインには、ゲーム対応の事前定義されたコンポーネントのセットが含まれています。

ゲームオブジェクトに添付するだけで、コードを1行も書かずにPHASEを使い始めることができます。

最初のコンポーネントはPHASEListenerコンポーネントです。

ゲームシーンの「耳」として機能し、その位置、向き、リバーブのプリセットに基づいてオーディオを処理します。

次はPHASEOccluderコンポーネントです。

PHASEOccludersは、ジオメトリデータを使用してゲームオブジェクトにアタッチし、ソースとシーン内のリスナーの間に来るとオーディオを減衰させます。

次はPHASESourceコンポーネントです。

これらはゲームオブジェクトに添付され、オブジェクトの変換を使用してゲームの世界で音を配置します。

組み込みコンポーネントに加えて、PHASEプラグインはカスタムアセットであるSoundEventアセットも定義します。

サウンドイベントは、オーディオ再生イベントを記述し、シーン内のソースによって再生されるオーディオを定義するオブジェクトです。

PHASEプラグインの使用を開始するには、最初のステップは、Apple.CoreプラグインとPHASEプラグインの両方がプロジェクトに追加されていることを確認することです。

インストールしたら、付属のコンポーネントをシーンに追加し始めることができます。

このサンプルプロジェクトでは、飛行機、建物、そしてカメラの3つのゲームオブジェクトに興味があります。

まず、PHASEListenerコンポーネントをカメラに取り付けます。

そうすることで、私はシーンに「耳」を追加しました。

次に、PHASEOccluderコンポーネントを取り付けて、建物をオクルーダーにします。

最後に、飛行機にPHASESourceコンポーネントを追加して、シーンにソースを追加します。

ソースを追加したので、再生するにはオーディオが必要なので、サウンドイベントを添付する必要がありますが、サウンドイベントフォルダは空です。

アセット>作成>アップル>フェーズ>サウンドイベントに移動して作成できます。

サウンドイベントを作成すると、PHASEプラグインはすぐにPHASEサウンドイベントコンポーザーウィンドウを開きます。

これは、サウンドイベントを構築するために使用されるキャンバスです。

ウィンドウ内の任意の場所を右クリックすることから始めます。

これは、イベントにノードを追加できるポップアップを示しています。

クリップを再生したいので、サンプラーノードを作成します。

私はすでにアイドリング飛行機のオーディオクリップをプロジェクトに追加したので、ここで参照できます。

飛行機がハミングし続けるように、ループを有効にし続けます。

飛行機の音を聞くには、それをミキサーにルーティングする必要があります。

出力ラインをイベントコンポーザーのキャンバスにドラッグすると、ミキサーを作成できます。ミキサーを作成するオプションが表示されます。

私のサウンドイベントが完成し、使用する準備が整いました。

サウンドイベントをクリックすると、インスペクタでその設定を直接見ることができます。

これにより、サウンドイベントコンポーザーに戻ることなく値を調整できます。

サウンドイベントが作成されると、以前に飛行機に取り付けたPHASESourceコンポーネントで参照できるようになりました。

そして、それに伴い、シーン内のオーディオがルーティングされ、再生用に構成されます。

PHASE Unityプラグインは、ゲーム内のオーディオデザインに全く新しい可能性を開きます。

PHASEについてもっと学び、今日紹介した概念を深く掘り下げるには、Apple Developerのドキュメントサイトと昨年のWWDC入門セッションビデオを必ずチェックしてください。

これで、新しいApple Unityプラグインの概要は終わりです。

今日は多くのことを取り上げましたが、Apple Unityプラグインについてもっと知りたい場合は、GitHubのリポジトリから始めるのに最適な場所です。

そこで、各プラグインのソース、詳細なドキュメント、サンプルを見つけることができます。

「Unityゲームにアクセシビリティを追加」セッションでUnityゲームにアクセシビリティを統合する方法の詳細を確認し、「Game Centerダッシュボードで新しいプレイヤーにリーチする」をチェックして、ゲームの可視性を高める方法を学んでください。

ご覧いただきありがとうございます。

♪