10148

ジャスティン・レンネル:こんにちは、WWDCへようこそ。

私の名前はジャスティンで、Apple Music開発チームのエンジニアです。

今日は、Apple Music APIの使用の基礎に焦点を当てたMusicKitを紹介します。 を紹介します。

このセッションでは、MusicKitクライアントフレームワークの概要と、それらがApple Music API Webサービスとどのように統合されるかを説明します。

開発者としてアクセスする方法と、コンテンツとリソースのリクエスト、制限とページネーションを使用して大規模なリソースコレクションを操作する方法、検索エンドポイントでカタログ内のコンテンツを見つける方法など、Apple Music APIの使用に関する具体的な詳細について説明します。

最後に、Apple Musicの購読者が利用できるいくつかのパーソナライズされた機能と、アプリでそれらへのアクセスを提供する方法について説明します。

まず、MusicKitとApple Music APIの簡単な紹介から始めます。

MusicKitは2017年にWWDCで初めて発表されました。

それ以来、Apple Musicとの統合を容易にする改善を行い、追加機能のサポートを追加し続けています。

MusicKitは、クライアントフレームワークとApple Music APIの組み合わせです。

一緒に使用すると、アプリにApple Musicの機能を追加できます。

カタログを検索したり、人気チャートを閲覧したりできる機能で、アーティスト、アルバム、プレイリストなど、Apple Musicのコンテンツを見つけて取得できます。

ユーザーの同意を得て、MusicKitとApple Music APIを使用すると、加入者を認証して利用可能なコンテンツを再生し、音楽ライブラリ、推奨事項、最近再生した履歴などのパーソナライズされた機能にアクセスできます。

MusicKitクライアントフレームワークは、加入者を認証し、デバイスで再生を開始および制御するために必要なAPIを提供します。

クライアントフレームワークは、Appleプラットフォーム上のアプリ、JavaScriptを使用したWebアプリケーション、および利用可能なSDKを使用したAndroidアプリケーションで利用できます。

AppleプラットフォームのMusicKitには、Apple Musicをアプリに統合するために必要なものがすべて揃っています。

購読者は、アプリ内で認証またはサインアップして、再生を開始および制御し、他のパーソナライズされた機能にアクセスできます。

利用可能なAPIは、リソースとページネーションのネイティブサポートにより、Apple Musicからコンテンツを検出してアクセスするための呼び出しを高速化します。

Apple Music APIに直接アクセスしてリクエストすることについて、後で取り上げたトピックの多くは、Appleプラットフォーム上のMusicKitによって自動的に処理されます。

Appleプラットフォーム用のアプリを書いている開発者は、これらのAPIの紹介のためのセッション「Meet MusicKit for Swift」と、より多くの機能のためのセッション「MusicKitでより多くのコンテンツを探索する」を見ることをお勧めします。

ウェブ上のMusicKitを使用すると、JavaScriptを使用してApple Musicをアプリケーションに簡単に持ち込むことができます。

Apple Musicのコンテンツを発見したり、購読者がサインインしてパーソナライズされた機能にアクセスしたり、ウェブサイトで直接コンテンツを再生したりすることができます。

Apple Music APIへのフルアクセスにより、ユニークな音楽体験を生み出すことができます。

MusicKitは、フル機能のメディアプレーヤーを含む組み込みのWebコンポーネントのコレクションを提供します。

これらのコンポーネントにより、簡単に開始でき、エクスペリエンスに合わせて柔軟にカスタマイズできます。

Android用MusicKitを使用すると、Apple MusicをAndroidアプリケーションに統合できます。

Apple Musicの加入者の認証、コンテンツ再生の制御、Apple Music APIへのフルアクセスのサポートにより、豊かな音楽体験を構築できます。

Apple Music APIは、発見機能とApple Musicカタログコンテンツへのアクセスを提供する一般的なJSONウェブサービスです。

認証された加入者は、音楽ライブラリ、推奨事項、最近再生された履歴など、パーソナライズされた機能にアクセスできます。

次に、アクセス方法を説明します。

Apple Music APIにリクエストするには、開発者トークンが必要です。

Appleプラットフォーム上のアプリケーションでは、アプリのMusicKitサービスを有効にすることで、自動トークン管理を利用できます。

このサービスは、ここに示されているApple DeveloperポータルのApp IDセクションにあります。

他のプラットフォーム上のアプリケーションでは、Apple DeveloperポータルでMusicKit開発者として登録することで、開発者トークンを入手できます。

そこから、秘密鍵をリクエストしてダウンロードすることができます。

JSON Webトークンを生成し、ダウンロードした秘密鍵で署名する必要があります。

JSON Webトークンは2つの部分に分かれています。

最初の部分は、ES256でなければならない署名アルゴリズム「alg」と、秘密鍵のダウンロードの一部として含まれているキー識別子「kid」を含む必須ヘッダーです。

トークンの2番目の部分はクレームです。

Apple Music APIには3つの必要なクレームがあります。発行者ID「iss」は、Apple DeveloperポータルのメンバーシップセクションにあるチームIDで、エポックからの秒数で表される「iat」時に発行され、有効期限は「exp」です。

これは、発行された時間と同じ時間形式です。

トークンは、発行されてから最大6か月後に有効期限が切れるように生成できます。

ウェブアプリケーションの場合、あなたのウェブサイトにのみ有効なトークンを発行するオリジンクレームを提供することを奨励します。

Apple Music APIへのすべてのリクエストに対して、有効な署名付きトークンを承認ヘッダーに提供する必要があります。

Appleプラットフォーム上のアプリケーションでMusicKitサービスを有効にすると、これは自動的に行われます。

ウェブ上のMusicKitは、Apple Music APIにリクエストを行うために生成したトークンで設定する必要があります。

JSON Webトークンの生成の詳細については、Apple Music APIのドキュメントを参照してください。

次に、Apple Music APIを使用してリソースをリクエストする方法を紹介します。

リソースは、アーティスト、アルバム、曲、プレイリストなどのApple Musicコンテンツをモデル化します。

それぞれに独自の対応するタイプがあります。

リソースは、検索などの検出機能を介して、またはそれらの識別子を使用して、Apple Music APIエンドポイントから取得できます。

以下は、識別子を使用してAPIからプレイリストリソースを取得するためのリクエストURLの例です。

Apple Music APIはapi.music.apple.comでホストされています。

URLのパスはRESTfulパターンを使用し、リソースまたは機能の場所を表します。

場所の最初の要素は、現在バージョン1であるAPIのバージョンです。

大幅な変更が導入されると、新しいバージョンが利用可能になる可能性があります。

バージョンは、リソースの強化や新機能が利用可能になったとしても、既存の呼び出しとの下位互換性を維持します。

Apple Musicカタログ内のリクエストについては、その場所の次のセクションは、取得する特定のカタログを表します。

Apple Musicは世界的なストリーミングサービスであり、コンテンツはストアフロントと呼ばれる地域によって異なる場合があります。

ストアフロントとコンテンツの可用性については、「Apple Music APIとのクロスリファレンスコンテンツ」というタイトルのセッションをご覧ください。

この例では、米国の店頭のカタログからプレイリストを取得し、2文字の国コード「us」で示します。この場所の最後の部分は、そのタイプ「プレイリスト」とそれに続く識別子で表されるリソースのアイデンティティです。

Apple Musicは多くの地域で利用可能であるため、オプションの言語タグクエリパラメータ「L」を使用してローカリゼーションのサポートが可能です。

ここでは、英語の言語タグ「en-US」を指定しています。

スペイン語でローカライズされたコンテンツを取得するには、タグ「es-MX」を指定できます。物事をシンプルに保つために、これらの例では言語タグを指定しません。その結果、ストアフロントのデフォルトのローカリゼーションになります。

Apple Musicが利用可能なストアフロントとそのサポートされているローカリゼーションは、ストアフロントの参照エンドポイントにアクセスすることで見つけることができます。

詳細については、Apple Music APIのドキュメントを参照してください。

プレイリストのGETリクエストの作成について見てみましょう。

これは、プレイリストリソースを含む「データ」配列を持つリソースコレクション応答を返します。

リソースオブジェクトは、ID値とタイプでコンテンツのアイデンティティを示します。

IDとタイプの組み合わせは、リソースの一意のアイデンティティを表します。

href値は、リソースがフェッチされる可能性のあるAPI内の場所を示します。

この場合、場所は私たちが要求したパスと同じであることに注意してください。

コンテンツのメタデータ値は、リソースの属性マップにあります。

このプレイリストキュレーターやトラックなど、他のリソースへの直接接続は、関係マップにあります。

ここでは、プレイリストのメタデータ値を含む属性マップを詳しく見ていきます。

プレイリストの名前、キュレーター名、説明属性を使用する右側のウィジェットで、これらの属性のいくつかを使用する例を見ていきます。

playParamsは、コンテンツが加入者のためにストリーミング可能になったときを示す多くのリソースタイプの共通の属性です。

これは、playParamsのないコンテンツが再生できないため、再生コントロールを有効にする必要があるかどうかを判断するために使用できます。

アートワークは、画像の最大幅と高さの値と、画像を読み込めるURLを含む多くのリソースタイプのもう1つの一般的な属性です。

Appleでは、開発者のフィードバックは非常に重要であり、すべての人のためのAPIとサービスを改善するのに役立ちます。

今年は、最も要求された機能の1つを追加したことを発表できることを嬉しく思います。

アーティストアートワークがApple Music APIで利用可能になり、プレーンなシルエットが過去のものになりました。

すべての新規および既存のアプリは、アーティストリソースに追加されたアートワーク属性を探すことで、これらの画像のサポートを追加できます。

アーティストアートワークは、他のコンテンツタイプのアートワークと同じように読み込むことができます。

これは、先ほど見ていたプレイリストのアートワークURLの省略例です。

アートワークのURLには、青で強調表示された「w」と「h」の高さトークンが含まれています。

このURLを使用してアートワークをロードするには、これらのトークンをディスプレイに必要な解像度に置き換えてください。

プレイリストのアートワークは正方形なので、幅と高さの両方で同じ解像度を使用します。

400×400、300×300、200×200の解像度を要求する例を次に示します。

各解像度で表示するための画像のスケールと、より小さな画像の場合はファイルサイズが縮小されます。

すべてのリソースタイプには、そのリソースの共通または基本的なメタデータを表す一連のデフォルト属性があります。

一部のリソースには、「拡張属性」と呼ばれる、フェッチされる可能性のある追加の属性があります。

これらの拡張属性は、拡張クエリパラメータを使用して要求できます。

例えば、Apple Musicのプレイリストのトラックは、曲かミュージックビデオのどちらかです。

プレイリストに含まれるトラックの種類を知りたい場合は、trackTypes拡張属性をリクエストできます。

拡張属性は、デフォルトの属性と一緒にリソースの属性マップに表示されます。

プレイリストのトラックが曲ではなくミュージックビデオである場合は、再生ボタンをカスタマイズして視聴者に知らせるかもしれません。

関係マップを見ると、このプレイリストから他のリソースへの直接接続がいくつか表示されます。

多くのリソースには自動関係があり、コンテンツを直接要求するときに返されます。

プレイリストの自動関係は、そのキュレーターとトラックです。

関係は、このプレイリストのキュレーターなど、接続が何であるかを示すために名前が付けられています。

関係を直接フェッチできるhrefの場所と、関連するリソースコレクションのデータ配列があります。

プレイリストの場合、キュレーターの関係は自動的に関連します。つまり、関連するリソースのアイデンティティのみが表示されます。

これにより、IDまたはhrefを使用してこのリソースに簡単にリンクできます。

プレイリストにはすでにキュレーターの名前が属性として含まれているため、関連するキュレーターリソースに他のメタデータを含める必要がない場合があります。

リソースのアイデンティティを使用して、キュレーターの名前をリンクにし、必要に応じてキュレーターに移動して追加のコンテンツを発見できるようにします。

アートワークなどのプレイリストでキュレーターの追加情報を表示したい場合は、キュレーターのメタデータを取得する必要があります。

Include パラメーターを使用して、関連するリソース メタデータの関係を指定します。

一部のリソースタイプには、デフォルトでは含まれていない追加の関係があり、このパラメータで要求することもできます。

関係を含めると、応答のサイズが大きくなり、アプリの速度に悪影響を及ぼす可能性があることに注意してください。

関連するリソースから望まれる可能性のある多くの有用な値は、元のリソースの属性として直接見つけることができます。

最高のパフォーマンスを得るには、応答に必要な関係とメタデータのみを含めることをお勧めします。

リソースタイプとその利用可能な属性と関係に関する詳細情報は、Apple Music APIのドキュメントに記載されています。

拡張属性、関係、およびビューと呼ばれる特別な関係の詳細については、「Apple Music APIでカタログを探索する」セッションをご覧ください。プレイリストの例の関係を再検討すると、プレイリストのトラックが自動的に含まれます。つまり、関連するトラックリソースの属性メタデータが応答に表示されます。

関連するトラックの属性は、右側のウィジェットに表示されているアートワークやその他のメタデータを使用して、プレイリストのトラックリストを表示するために使用できます。

前のセクションでは、カタログからプレイリストリソースとそのトラックを取得する例を示しました。

このセクションでは、多数のリソースとの関係を処理する方法を説明します。

関係の関連リソースは、そのデータ配列に表示されます。

関連するリソースの数が少ない場合、すべてのリソースが1つの応答に表示されます。

単一の応答に表示されるよりも多くの関連リソースとの関係は、ページと呼ばれる複数の部分でフェッチする必要があります。

大きなプレイリストのトラック関係を例として使います。

デフォルトでは、プレイリストの最初の100トラックのみが含まれています。

プレイリストに100以上のトラックがある場合、追加のトラックは後続のページで取得する必要があります。

以下は、100トラックを超えるプレイリストの応答例です。

トラック関係のhrefとリソースの収集データは、先に見たように応答に表示されます。

このプレイリストには応答に含まれていたよりも多くのトラックがあるため、次の場所がデータの兄弟として表示されます。

次の場所は、コレクション内の残りのリソースをフェッチできる場所を表します。

次の場所を取得すると、直接関係がフェッチされ、提供されたオフセットから始まる関係のリソース収集データが返されます。

関係のデフォルトの制限は、各ページに適用されます。

制限パラメータを指定することで、独自のページサイズを選択できます。

ページサイズの制限は、ドキュメントにある特定の関係の最大ページサイズとの間ですることができます。

関係のリソースコレクションに、ページで返されたリソースを超える追加のリソースが含まれている場合、次の場所は引き続きデータの兄弟として表示されます。

リソースの収集が使い果たされると、次の場所は存在しません。

次の場所は、リクエストに対して選択したページサイズを反映していないことに注意してください。

デフォルトとは異なるページサイズを使用する場合は、各リクエストに制限パラメータを指定する必要があります。

リソースコレクションに対するページへの応答から次の場所を常に使用してください。

独自のオフセットを計算しようとすると、無効な場所の問題が発生したり、結果が重複したりする可能性があります。

次のセクションでは、Apple Music APIを使用してApple Musicカタログのコンテンツを検索する方法を紹介します。

Apple Music APIは、検索語を使用してカタログ内のコンテンツを見つける機能を提供します。

検索要求は、/search を場所として、検索用語をパラメータとして、カタログリソース要求に似ています。

制限を使用して、タイプパラメータと各タイプに含める結果の最大数を使用して、興味のあるコンテンツタイプを指定できます。

要求された制限を超えてより多くの結果が見つかった場合、ページネーションを使用して検索を続行できます。

「ポップ」という用語のアルバムや曲の検索に対する反応は次のとおりです。

検索エンドポイントは、一致するコンテンツを持つ要求された各タイプのグループを含む結果オブジェクトを含む応答を返します。

このリクエストでは、アルバムと曲のマッチが見つかりました。

応答には、関連性に基づく結果グループの推奨順序を含むメタオブジェクトも含まれています。

これは、一度に複数のコンテンツタイプを処理する検索エクスペリエンスを構築する場合に役立ちます。

各結果グループには、結果がフェッチされた場所とhrefがあり、検索用語に関連するタイプの一致するリソースを含むリソース収集データ配列があります。

結果グループのより多くの一致が利用可能な場合、グループには追加の一致がフェッチされる可能性のある次の場所が含まれます。

次の場所を要求すると、オフセットから始めて、選択したタイプのより多くの結果が返されます。

最後のセクションでは、Apple Music APIでパーソナライズされた機能へのアクセスについて説明します。

Apple Music APIとMusicKitは、特定のユーザーにパーソナライズされた機能へのアクセスを提供します。

これらの機能を使用すると、購読者が楽しむコンテンツを追加したり、新しいプレイリストを作成したりする機能など、Apple Musicライブラリのコンテンツを表示および検索するためのサポートを追加できます。

パーソナライズされた推奨事項は、個々の音楽の好みに基づいて表面化することができます。

そして、最近聴いた音楽を再発見して、中断したところから再開したり、まったく新しい体験を提供したりすることができます。

パーソナライズされた機能は、Apple Musicをアクティブに購読している人が利用できます。

これらの機能をサポートするには、まずMusicKitを使用してアプリでその人を認証し、音楽データにアクセスする許可を要求する必要があります。

許可が付与されると、音楽ユーザートークンが利用可能になります。

このトークンは、音楽ユーザートークンヘッダーのApple Music APIリクエストに追加され、パーソナライズされたデータへのアクセスを認証するために使用されます。

音楽ユーザートークンは、アプリとユーザーが認証したデバイスに固有のものです。

このトークンは、一度に1つのデバイスに対して許可が付与されるため、デバイス間で共有してはなりません。

トークンは、人のサブスクリプションやパスワードの変更、またはアプリへのアクセスを取り消すと無効になる可能性があります。

また、時間とともに期限切れになることもあります。

認証は、再度サインインしてアプリの許可を与えるように促すことで更新できます。

このトークンは、Appleプラットフォーム上のMusicKitとウェブ上のMusicKitによって自動的に管理されることに注意してください。

詳細については、使用しているフレームワークのドキュメントを参照してください。

今日のセッションでは、MusicKitとApple Music APIを使用してApple Musicをアプリに統合する方法、MusicKitクライアントフレームワークをサポートするプラットフォームを簡単に見て、Apple Music APIを使用してカタログのコンテンツにアクセスして見つける方法、および加入者が利用できるいくつかのパーソナライズされた機能を紹介しました。

Appleプラットフォームでの今年のMusicKitのアップデートの詳細については、「MusicKitでより多くのコンテンツを探索する」セッションをチェックしてください。ご覧いただきありがとうございます。今年のWWDCの残りをお楽しみください。

。