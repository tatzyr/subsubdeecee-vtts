110339

♪ ♪

みなさん、こんにちは。私はエリオット・ガーナーです。

私はインターネット技術チームのエンジニアであり、今日はネットワークフレームワークとその新しいコンパニオンフレームワークであるDeviceDiscoveryUIを使用してデバイス間エクスペリエンスを構築する方法について説明します。

まず、クロスデバイス接続と、それがアプリをどのように改善できるかについて学びます。

新しいフレームワークであるDeviceDiscoveryUIは、ネットワークフレームワークと組み合わせて、その接続をできるだけシンプルにする方法を探ります。

新しいシステムデバイスピッカーを使用してデバイスを検出する方法と、ネットワークフレームワークを使用してそれらのデバイスに接続する方法など、DeviceDiscoveryUIを使用するようにアプリを更新する方法のコード例を説明します。

では、クロスデバイス接続から始めましょう。

近くのデバイスに接続し、データを交換することは、多くの場合、アプリ内でシームレスで統合されたエクスペリエンスを構築するために不可欠です。

フィットネスと瞑想のアプリは、多くの場合、コーチが動きを実演できる大画面で最もよく機能します。

人々は、Apple Watchから収集された心拍数、カロリー消費、運動データを見ることで恩恵を受ける。

同様に、ゲーム体験は、接続されたiPhoneからの入力とアクションでより没入感のあるものにしたり、セカンドスクリーン体験を近くのiPadに拡張することで拡張したりできます。

ゲーム、フィットネス、ウェルネスアプリなど、これらの体験はすべて、信頼性が高く使いやすいクロスデバイス接続の必要性を共有しています。

そして、それはすべてデバイスを発見することから始まります。

その発見をキックスタートするために、近くのデバイスの安全でプライバシーを維持する発見を提供する新しいフレームワークであるDeviceDiscoveryUIを導入しています。

iOS 16の新機能であるDeviceDiscoveryUIはネットワークフレームワークと組み合わせて、Apple TVアプリと近くのiPhone、iPad、Apple Watch間のデバイス間接続を可能にします。

DeviceDiscoveryUIは、近くのデバイスを簡単に発見するためのシステムUIを提供します。

デバイスが発見されると、アプリはそのデバイスへの接続を簡単に開くことができます。

この接続はシステムUIを使用して確立されたため、ローカルネットワークアクセスのアクセス許可の管理について心配する必要はありません。

また、システムはこの接続を安全に確立するため、プラットフォームが送信データを暗号化するため、独自の鍵交換を実装する必要がなくなります。

ここでは、システムUIの動作を見ることができます。

左側には、アプリのアイコンと、アプリがクロスデバイス接続で何をするかを説明する必要な使用説明文字列が表示されます。

右側は、発見されたデバイスのリストです。

一部のアプリは特定のプラットフォームでのみ利用できる可能性があるため、検出されたデバイスをプラットフォームごとにフィルタリングできます。

「Adam's iPhone」を選択すると、システムはこれらのデバイス間の接続を作成する許可を求めます。

この明示的なユーザーの同意により、ローカルネットワーク全体へのアクセスを要求する必要がなくなります。

そして、許可が付与されると、アプリは選択したデバイスで起動され、着信接続を処理します。

これは、接続を確立する前に、アプリを両方のデバイスで実行する必要がなくなったことを意味します。

「Joe's Apple Watch」に許可が付与されると、システムはすぐにアプリを起動し、2つのデバイスが接続できるようにします。

そして、あなたのアプリがそのデバイスにインストールされていない場合、システムは人々をApp Storeに連れて行くことを申し出ます。

そうすれば、彼らはすぐにあなたのアプリをダウンロードし、あなたの新機能を使い始めることができます。

watchOSでどのように見えるかは次のとおりです。

ボタンをタップすると、App Storeでアプリのページがすぐに起動し、すばやく簡単にダウンロードできます。

それでは、DeviceDiscoveryUIがあなたのアプリで何ができるかについて話し合ったので、この新しいフレームワークを採用する方法を見てみましょう。

以前のセッションでは、ネットワークフレームワークを使用してTic-Tac-Toeアプリを構築しました。

今日は、近くのデバイスの検出と接続にDeviceDiscoveryUIを使用するように更新します。

以前の反復では、私たちのアプリはiOSデバイス間でゲームをプレイすることのみをサポートしていました。

まず、ユニバーサル購入のプロジェクトを更新し、同じバンドルIDを共有するtvOSとwatchOSのターゲットを追加しました。

そして、他のプレイヤーと競合する代わりに、デバイスを使用してテレビでAIと対戦するようにアプリを変更しました。

次に、tvOSアプリケーションと他のプラットフォームの両方でInfo.plistを追加して、新しいTic-Tac-Toeアプリケーションサービスを宣言する必要があります。

最後に、新しいデバイスピッカーを提示し、結果のエンドポイントを使用して接続を行います。

次に、Xcodeに移行して、それらの新しいInfo.plistキーが何であるか、そしてそれらをどのようにアプリに追加する必要があるかをお見せします。

tvOSでは、私たちのアプリは、どのアプリケーションサービスを発見し、それらのサービスがサポートしているプラットフォームをシステムに伝える必要があります。

これを行うには、新しい「アプリケーションサービス」Info.plistを追加する必要があります。

この辞書は、2つの異なる配列の1つにマップされます。

tvOSでは、アプリが検出するすべてのアプリケーションサービスを含む「ブラウザ」配列を宣言する必要があります。

各エントリは、異なるアプリケーションサービスを表しています。

私たちの最初のアイテムは、私たちのTic-Tac-Toeアプリケーションサービスを表しています。

これは、当社のサービス識別子、使用状況の説明、およびこのサービスがサポートするプラットフォームを含む辞書です。

サービス識別子は、当社のサービスの名前「TicTacToe」です。

使用状況の説明は、アプリが他のローカルデバイスにアクセスする必要がある理由を説明するためにデバイスピッカーに表示される文字列です。

最後に、プラットフォームのサポートがあります。

この配列には、サービスでサポートされているプラットフォームが含まれており、システムはそれに応じて検出されたデバイスをフィルタリングします。

ここでは、当社のサービスがiOS、iPadOS、およびwatchOSデバイスをサポートしていることがわかります。

iOSとiPadOSで使用されるInfo.plistを、対応する「アプリケーションサービス」辞書ですでに更新しました。

次に、watchOSのplistを更新します。

今回は、「広告」配列を宣言します。

DeviceDiscoveryUIは実行されていないときにアプリを起動するため、システムはこの配列を使用して、どのサービスを宣伝するかを知る。

「広告」配列のエントリには、「TicTacToe」サービス識別子のみが必要です。

サービス識別子がtvOS Info.plistで宣言されたすべてのプラットフォームで同じであることを確認してください。

Tic-Tac-Toeは、アプリケーションサービスを閲覧して宣伝するように構成されているので、実際にデバイスピッカーUIを表示させましょう。

使用状況の説明が左側に表示されます。

この文字列がアクティブであり、デバイスを接続したい理由と、共有しているデータを人々に知らせることを確認しました。

Tic-Tac-Toeでは、接続されたデバイスをコントローラーとして使用してゲームをプレイしています。

Xcodeに戻ると、DeviceDiscoveryUIは近くのデバイスを手動でブラウズする必要性を置き換え、接続を保護するため、不要になったため、PeerBrowserファイルとNWParametersのパスコード拡張子を削除できます。

さて、近くのデバイスに接続する方法を説明するパラメータが必要です。

まず、NWParametersで新しい便利な初期化子であるapplicationServiceを使用して、この種のローカル接続に必要なものがすべて提供されます。

次に、既存のフレーマーを使用して、変更なしでゲームプレイアクションを通信し、それらのパラメータのプロトコルスタックに追加するだけです。

これで、デバイスピッカーを作成して表示する準備が整いました。

デバイスピッカーは、私たちのアプリケーションが近くのiPhone、iPad、Apple Watchを発見する方法です。

まず、デバイスピッカーが現在のデバイスでサポートされているかどうかを確認する必要があります。

これを行うには、ピッカーで使用するブラウズ記述子とパラメータでisSupported関数を呼び出します。

Trueを返すと仮定すると、先に進んでデバイスピッカーを作成できます。

先ほど作成したパラメータと、.applicationService型のブラウズ記述子を使用してデバイスピッカーをインスタンス化し、Info.plistで定義したアプリケーションサービスの名前を指定します。

デバイスピッカーが作成されたので、ビューコントローラーを提示する必要があります。

デバイスピッカーは常にフルスクリーンのモーダルビューとして表示する必要があります。

次に、ピッカーの非同期エンドポイントプロパティにアクセスする必要があります。

接続が確認され、アプリケーションがリモートデバイスで起動されると、NWEndpointを受け取り、実行が継続されます。

アプリケーションがNWEndpointを受け取ったので、以前のTic-Tac-Toeバージョンで行ったように、それを使用して選択したデバイスに接続できます。

接続を開くときは、デバイスピッカーに提供されたのと同じパラメータを使用します。

パラメータは別として、このデバイスへの接続を開くと、以前とまったく同じように見えます。

選択したデバイスに移動し、アプリケーションが起動されたら、NWListenerを作成することで、アプリケーションがシステムに行った約束をすぐに果たす必要があります。

NWListenerは、そのアプリケーションサービスの着信接続を受け入れるために、アプリが起動されるとすぐに作成する必要があります。

NWListenerは以前とまったく同じパラメータで作成する必要があり、Info.plistの識別子を使用してリスナーにアプリケーションサービスを設定する必要があります。

テレビがこのデバイスへの接続を開くと、私たちが確立したリスナーは、以前と同じように、新しい接続ハンドラでその接続を受け取ります。

そのため、接続が適切に確立されたので、アプリケーションの状態遷移を処理する必要があります。

アプリケーションがバックグラウンド化されると、接続は関連するエラーECONNABORTEDで失敗した状態に移行します。

デバイス間の通信を継続したい場合は、テレビから同じエンドポイントへの新しい接続を確立します。

開始すると、この新しい接続は準備状態にとどまり、選択したデバイスでアプリが再開されると準備完了状態に移行します。

そのデバイスでは、新しい接続が同じNWListenerに配信され、アクティビティを再開するために使用できます。

そして、それだけです。

DeviceDiscoveryUIに移行するために必要なことがすべて完了しました。

私たちのゲームが実際に動いているのを見てみましょう。

アプリはテレビで起動し、Find Opponentを押してデバイスピッカーを提示します。

デバイスを選択すると、許可を求められます。

許可されると、アプリはすぐにゲームセッションに起動します。

今、私たちはボードに絵文字を置くことでテレビと対戦することができます。

すごい。

そして、それがApple TVにデバイスを接続するのがどれほど簡単かです。

Tic-Tac-Toeは開発者のウェブサイトで利用できるので、ダウンロードして、今日説明したすべてのコードを探索できます。

ご不明な点がございましたら、開発者フォーラムに投稿してください。

デバイス間シームレスなエクスペリエンスを提供するために、アプリにDeviceDiscoveryUIを採用することを検討してください。

そして、私たちにフィードバックを提供してください。

私たちは、デバイス間通信が不可欠な経験であることを知っています。

DeviceDiscoveryUIは、開発者のフィードバックに応じて作成されました。

私たちはあなたと一緒にこれらの機能を構築したいので、DeviceDiscoveryUIで見たいものについては、フィードバックアシスタントにレポートを提出してください。

私たちはあなたのアプリをさらに良くするために、この技術を一緒に改善することに興奮しています。

参加してくれてありがとう、そして素晴らしいWWDC 2022をお過ごしください。