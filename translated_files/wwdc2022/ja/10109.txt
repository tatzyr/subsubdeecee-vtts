10109

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、私の名前はジョナサンです。

macOS開発者は、悪意のあるソフトウェアから顧客を保護するために、公証人サービスにソフトウェアを提出します。

昨年、notarytool CLIまたはコマンドラインインターフェイスを使用して、公証のためにアプリを提出するためのより迅速で簡単な方法を導入しました。

今年は、公証人サービスとのやり取りを大幅に改善し、パフォーマンスと柔軟性を擁護し続けることに興奮しています。

このセッションでは、3つの主要なトピックについて話します。

まず、公証のためのaltoolの使用からnotarytoolの使用への移行のための重要な期限を通過します。

次に、今後のXcode 14とのXcode統合の改善について議論し、notarytoolの提出速度をXcodeにもたらします。

そして最後に、公証人サービスと対話するための柔軟な新しい方法、REST APIについて話します。これにより、アップロードできる場所を拡大し、ステータスを確認し、提出をレビューすることができます。

昨年、私たちは公証のためのアルトールの代替品であるnotarytoolを導入しました。

この講演の後半では、XcodeがXcode 14で更新されたバックエンドに移行することについて説明します。

altoolとXcode 13を介した公証のための移行パスで、これらの古い方法で公証の日没日を2023年秋に発表します。

altoolからnotarytoolへの移行については、昨年のプレゼンテーション「Macアプリのより迅速で簡単な公証」を参照してください。

いくつかの詳細を強調するために、notarytool CLIは、Xcode 13にバンドルされているものを含め、2023年秋の締め切りを過ぎても引き続き機能します。

しかし、いつものように、最新の改善と修正を受け取るために更新することをお勧めします。

Xcode 13 UIを使用して公証人サービスにアップロードすると、その期限を過ぎると機能しなくなります。

Xcode 14のパフォーマンスの向上についてはご期待ください。しかし、ワークフローは変更されないことが期待できます。

最後に、あらゆる形態のアルトールの公証は2023年秋に機能しなくなります。

繰り返しになりますが、notarytoolへの移行の詳細については、昨年のWWDCプレゼンテーションを参照してください。

次に、Xcode 14の公証の変更について触れます。

昨年導入したnotarytool CLIと同じ信頼性の高いバックエンドを使用するように、Xcodeに組み込まれた公証サポートを移行しました。

このため、昨年発表したのと同じ約4倍のパフォーマンス向上をXcode 14にもたらします。

最良の部分は、更新に加えて、このパフォーマンスの向上を受けるためにプロジェクトの設定やワークフローを変更する必要がないことです。

このプレゼンテーションの最後のトピックについては、新しいサービス、公証人向けのREST APIを発表できることを嬉しく思います。

この新しいサービスにより、さらに多くの場所で公証人サービスとより柔軟にやり取りすることができます。

いくつかの重要な概念を詳しく見るために、この新しいAPIは、公証人サービスへのより柔軟なインターフェースを可能にすることを目的としています。

JSONベースのWebサービスとして、統合はほとんどの言語でかなりシンプルであるべきです。

このAPIを使用すると、現在macOSを実行していない可能性のある場所である継続的インテグレーションサーバーなど、インターネット接続のある場所からどこからでも提出物をアップロードできます。

さらに、このAPIでは、提出履歴や過去の提出の詳細の取得など、公証人サービスとの他のやり取りもサポートされています。

REST APIを導入する私たちの目標は、より多くのプラットフォームからの公証のためのソフトウェアの提出をサポートし、自動化されたシステムで公証人とのより簡単なやり取りを可能にすることです。

これは、Linuxベースの継続的インテグレーションなど、現在実行できない現在の提出方法、Xcode、notarytoolを補完します。

たとえば、展開パイプラインが配布前に公証人に申請書を提出したいとします。

この新しいAPIといくつかの基本的なスクリプトを使用すると、プロセスを簡単に自動化できます。

飛び込む前に、重要なトピックの1つは認証です。

他のApp Store Connect APIと同様に、JSON WebトークンまたはJWTを使用してAPIで認証できます。

認証または私が表示しようとしているコードの詳細については、以下にリンクされているREST APIドキュメントをご覧ください。

これらのスニペットでは、有効なJWTがトークン変数として関数に渡されていると仮定します。

Pythonで公証人にファイルを提出する例を見てみましょう。

この同じ基本的なフローは、他のプログラミング言語で適用できます。

公証人にファイルをアップロードするには、主に2つのステップがあります。

最初のステップは、ファイルをアップロードしたいことを公証人に知らせることです。

これには、名前やSHA-256などのファイルに関する基本的な情報が含まれています。

応答には、ファイルをアップロードするために必要な情報と、パイプラインを通じて送信を追跡するためのIDが含まれています。

2番目のステップは、実際にAmazon S3経由で公証のためにファイルをアップロードします。

お気に入りのS3 SDKを入手する必要があります。

この例では、boto3ライブラリを使用します。

ここでは、前の呼び出しで返された一時的な資格情報を使用して、クライアントを認証して作成します。

次に、クライアントを使用して、最初のステップの応答で指定されたバケットとオブジェクトにファイルをアップロードします。

アップロードされると、提出は公証パイプラインを通じて続行されます。

このプロセスは、ほとんどの提出物で15分以内に完了するはずです。

アップロード後、配布前に公証人サービスが提出物を正常に処理したことを確認する必要があります。

大まかに言えば、これには2つのアプローチがあります。

最初で最も簡単なのは、同じAPIを介して結果をチェックすることです。

もう1つのオプションは、notarytoolで導入されたWebhookサポートです。

まず、APIのアプローチを見てみましょう。

公証人への提出のステータスを確認するのは非常に簡単です。アップロードプロセス中に受け取った提出IDでリクエストを行うことができます。応答の一部は提出の現在のステータスであり、公証人が処理を完了するまで「進行中」のままです。

ステータスは、AcceptedやInvalidなどの提出の最終状態に移行します。

提出が完了したら、APIを使用してこのアップロードの公証ログを取得できます。

これらのエンドポイントの詳細については、Notary REST APIのドキュメントを参照してください。

次に、あなたのステータスを取得するための2番目のアプローチ、ウェブフックについて説明します。

Webhookワークフローでは、プロセスはほぼ同じですが、今回はアップロードする最初のリクエストでWebhook URLを提供します。

フォーマットの詳細は、公証人REST APIのドキュメントに記載されています。

以前と同様に、これはあなたの提出物を分析するために公証人サービスをトリガーします。

自動分析が終了すると、チケットが作成され、最終的なステータスが保存されます。

完了すると、公証人サービスは提供されたWebhook URLに呼び出します。

この呼び出しの内容には、提出ID、チームID、およびそれが私たちから来たことを確認するための署名が含まれます。

その通知を受け取ったら、次に何をするかを選択できます。

たとえば、元の送信者に通知したり、自動配布パイプラインを開始したりできます。

Notarytoolで待つことと比較して、これは公証後のアクションを自動化するシステムからファイルをアップロードするシステムを切り離すことができます。

この新しいREST APIが、macOS用のソフトウェアを構築するための継続的インテグレーションシステムやその他のツールとのより多くの統合への扉を開くことに興奮しています。

最後に、もう1つのリマインダーとして、Xcode 14、notarytool、またはREST APIを直接使用に移行する期限は2023年の秋です。

最後に、展開パイプラインでnotarytoolをまだ使用できない場合は、今日notary REST APIを試して自動化を開始するチャンスです。

以下のドキュメントへのリンクを見つけることができます。 

ありがとう、そしてあなたがWWDC22の残りの部分を楽しむことを願っています♪