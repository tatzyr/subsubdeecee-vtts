110343

♪ ♪

ハリー：こんにちは、私はSwiftUIチームのエンジニア、ハリーです。

iPadシリーズのSwiftUIの第2部へようこそ。

このシリーズの最初の部分では、同僚のRajは、リスト、テーブル、選択、分割ビューを使用して、iPadのより大きな画面とさまざまな入力デバイスを使用してアプリを本当に輝かせる方法を深く掘り下げました。

そのセッションを見ていない場合は、そのセッションから始めることを強くお勧めします。

RajがPlacesアプリを構築するのを見るのは本当に楽しかったし、自分の機能をいくつか追加したかった。

だから、このセッションでは、私の心に近くて大切なもの、ツールバーを見ていきます!

SwiftUIでは、ツールバーAPIは、iOSのナビゲーションバーやボトムバー、macOSのウィンドウツールバーなど、多くのシステムバーを構成します。

ツールバーは、最も一般的な機能の多くに迅速なアクションを提供します。

優れたツールバーを作成すると、アプリを使用している人々の生産性が本当に向上します。

私はツールバーと、PlacesがiOS 16の新しいツールバー機能のいくつかをどのように使用できるかについて多くの時間を費やしてきました。

まず、iPadで今可能なことを味わうために私が作ったものを簡単にお見せしたいと思います。

すべての変更の後、ここに更新されたPlacesアプリがあります。

整列されたナビゲーションタイトル、タイトルメニュー、タイトルメニューヘッダー、中央揃えのツールバーアイテムなど、いくつかの新機能に気付くかもしれません。

Macを使用したことがある場合は、ツールバーのカスタマイズなどの機能に精通しているかもしれません。これにより、人々はツールバーを独自のものにすることができます。

これらの強力なMac機能は、iPadでデビューしています。

このセッションを開始するには、ツールバーAPIの機能強化をいくつか紹介します。

次に、タイトルとドキュメントの新しいAPIをいくつか説明します。

では、ツールバーに飛び込みましょう。

さて、あなた方の多くはすでに自分のiOSアプリでツールバーを設定しており、小さな画面に最適化するために、私が最初に場所を見たときのようにメニューを追加したかもしれません。

私のメニューはコードでこんな感じでした。

プライマリアクションの配置を持つツールバーアイテムがあることがわかります。

内部には、メニューの内容としていくつかのコントロールを備えた、より多くのメニューがあります。

これがiPadでどのように見えるか見てみましょう。

あなたが推測したように、それは本当にそこに利用可能なスペースを利用していません。

しかし、素晴らしいのは、iOS 16では、ツールバーがあなたに代わってこれらの種類のメニューを実装できることです。

私たちはこれらをオーバーフローメニューと呼び、それらを最大限に活用するために、ツールバーの内容を再構築したいと思います。

まず、ツールバー項目をツールバー項目グループに変換することから始めます。

次に、メニューを削除し、そのコンテンツをツールバー項目グループのコンテンツにします。

このグループは、グループ内の各ビューの個別のツールバー項目を挿入します。

iPadとMacでは、必要なときにアイテムをオーバーフローメニューに自動的に移動するために必要なのはこれだけです。

ここでできることはもっとありますが、それにたどり着く前に、ツールバーアイテムの配置について考える必要があります。

配置は、ツールバー項目がレンダリングされる領域を定義します。

異なる配置が同じ領域に解決できます。

ナビゲーションバーには、先頭、中央、後続の3つの異なる領域があると考えることができます。

先頭と後続の領域には、通常、コントロールが含まれています。

センターにはアプリのナビゲーションタイトルが含まれています。

これを場所の文脈で見てみましょう。

場所では、私の主要なアクションツールバーアイテムグループは、iPadまたはMacの末尾の領域に解決されます。

プライマリアクションは、特定の画面でユーザーが利用できる最も一般的なアクションを表します。

iOS 16では、セカンダリアクションと呼ばれる新しい配置があります。

これらの項目は、最も使用されているコントロールではないコントロールを表しますが、それでも独自のツールバーアイテムを保証します。

好意や編集などのアクションは、場所では最も重要ではないので、私はそれらを二次的なアクションにします。

デフォルトでは、セカンダリアクションはツールバーに表示されません。

代わりに、彼らはオーバーフローメニューに住んでいます。

新しいtoolbarRole修飾子を使用して、その動作を変更できます。

この修飾子は、意味的な役割を割り当てることで、ツールバーの動作に影響します。

ここでは、コンテンツの編集用に最適化する必要があることをナビゲーションバーに伝えるエディターの役割を渡します。

ナビゲーションバーは、これをツールバーアイテムをレンダリングするためのより多くのスペースを持ちたいという願望と解釈し、ナビゲーションタイトルを中央領域から先頭領域に移動します。

これにより、オーバーフローメニューに移動する前に、セカンダリアクションを中央に配置できます。

コンパクトサイズのクラスでは、ナビゲーションバーは変更せず、中央にタイトルをレンダリングし続けます。

セカンダリアクションとツールバーロールAPIを使用すると、PlacesはiPadのサイズを利用し始めることができます。

センターを使用すると、ノイズボタン、コンフォートレベルボタン、ゴミ箱ボタンなど、ツールバーにアイテムを追加できます。

しかし、多くのアイテムを追加し始めると、一部のユーザーにとってツールバーが扱いにくくなる可能性があります。

MacOSは長い間、各人が自分に最適なツールバーを選択できるカスタマイズ可能なツールバーをサポートしており、iPadOSがユーザーのカスタマイズもサポートしていることを嬉しく思います。

macOSで動作している既存のツールバーカスタマイズAPIを使用して、この機能を採用できます。

今、それを見てみましょう。

ツールバーアイテムのみがカスタマイズ可能なので、まずツールバーアイテムグループを個々のツールバーアイテムに分割します。

この変更後、機能的な違いはないことに注意してください。

カスタマイズでは、ツールバー内のすべてのアイテムに一意の識別子を関連付ける必要があるため、各アイテムにIDを追加します。

これらのIDは、アプリの起動全体でユニークで一貫していることが重要です。

ユーザーがツールバーをカスタマイズすると、SwiftUIはこれらのIDを永続化し、それらを使用して関連するビューを検索してレンダリングします。

最後に、ツールバーの修飾子全体にIDを追加します。

全体として、これはツールバーを選択してカスタマイズをサポートします。

カスタマイズ可能なツールバーに固有のツールバーアイテムは、ツールバーに最初に存在しない機能があります。

これらのアイテムは、カスタマイズポップオーバーで生活を開始し、後でツールバーに追加できます。

これらの項目は最初は存在しないため、これは特定のワークフローにとってより有用なアクションに適しています。

それらをチェックしましょう。

新しいアイテムを見やすくするために、現在のツールバーアイテムのいくつかを非表示にしたい。

それでは、共有リンクを含むツールバー項目を追加してみましょう。

共有リンクはSwiftUIで新しく、transferableと呼ばれる新しいプロトコルに依存しています。

TransferableとShareLinkの詳細については、Meet Transferableセッションを必ず確認してください。

ツールバー項目を配置すると、デフォルトのパラメータでshowsにfalseの値を指定します。これにより、この項目は最初にバーに存在しません。

今、あなたは私の共有リンクがカスタマイズポップオーバーで最高の生活を送っているのを見ることができます。

そして、カスタマイズポップオーバーからバーにドラッグすることができます。

人々はそれを気に入るだろう。

共有リンクを配置して、ツールバーの項目間の関係について考え始めました。

共有リンクをバーに移動した後、画像とマップの調整項目が分離されていることに気づきましたが、これらの項目はクイック編集コントロールのグループと考えており、ツールバー自体でその関係をモデル化したいと思います。

iOS 16とmacOS Venturaは、ControlGroupを使用してこの関係のモデリングをサポートしています。

やり方を教えてあげるよ。

画像とマップの調整アクションに2つの個別のツールバー項目があることがわかります。

それらをグループ化するには、まず同じアイテムに移動します。

その後、それらをコントロールグループにまとめます。

ユーザーは、ツールバーからユニットとして追加または削除できるようになりました。

それはかなりクールですが、ControlGroupで利用可能な新しいAPIを使用して、これをさらに進めることができます。

コントロールグループにラベルを提供することで、このアイテムグループは、オーバーフローメニューに移動する前に、独自の小さなメニューに折りたたむことができます。

ツールバーが本当にまとまり始めています。

最後に1つ変更したいことがあります。

新しい場所を追加することは一般的で重要なアクションなので、そのためのツールバー項目を追加したいと思います。

これを行うには、ツールバーに新しいボタンを追加しますが、今回は新しいボタンが最も一般的なアクションであると考えるため、プライマリアクションの配置を使用します。

この配置は、iOSとmacOSの重要な違いを強調しています。

カスタマイズ可能なツールバー修飾子内のすべての項目は、macOSではカスタマイズをサポートしていますが、iPadOSではセカンダリアクションのみがサポートします。

したがって、ここでの新しいボタンは、バーの末尾の領域にレンダリングされ、ユーザーによってカスタマイズできません。

うわー！

それはツールバーに関する多くのことであり、それらが唯一の改善ではありません。

ナビゲーションタイトルは、メニュー、ドキュメントなどに関するいくつかの新機能も獲得しました。

文書を例に挙げてみましょう。

書類にはたくさんの種類があります。

ドキュメントグループAPIによって管理されているドキュメントに精通しているかもしれません。

ドキュメントグループには、ドキュメントを表現および管理するための多くの機能が組み込まれています。

私が話そうとしていることはすべて、ドキュメントグループを使用するときに無料で提供されます。

しかし、Placesでは、Placesがドキュメントグループを使用していなくても、個々の場所をドキュメントと見なすことができます。

編集できるプロパティがあり、Placesアプリに追加または削除でき、友達と場所を共有することができます。

非ドキュメントグループベースのアプリでこの関係を披露する方法を見てみましょう。

私はすでにその場所の名前をビューのナビゲーションタイトルとして関連付けています。

だから、私はすでにその場所の一部をツールバーのタイトルに関連付けています。

iOS 16では、新しいナビゲーションタイトル修飾子を使用することで、それをさらに進めることができます。

ナビゲーションタイトルがメニューの表示をサポートするようになりました。

これは、macOSのファイルメニューのように考えることができます。

これらのメニューの1つを作成するには、通常のメニューと同じように、ナビゲーションタイトルに一連のアクションを提供します。

タイトルには、アクションが入力されたメニューを表示するメニューインジケーターが添付されていることに注意してください。

そして、それはすべてのナビゲーションタイトルができるわけではありません。

私のお気に入りの部分の1つは、編集可能なタイトルをサポートする新しい機能です。

ナビゲーションタイトルにバインディングを渡すことができ、これはタイトルの編集をサポートしていることをツールバーに伝えます。

欠けているのは、実際に編集を開始する方法だけです。

タイトルメニューのアクション内で新しいRenameButtonを使用して、これを実現できます。

名前の変更ボタンをタップすると、タイトルの名前の変更を開始できます。

ナビゲーションタイトルをビューに関連付けることができるように、私の場所のようにドキュメントを関連付けることもできます。

ドキュメントが提供されると、タイトルメニューは、そのドキュメントのプレビューを表示する特殊なヘッダーをレンダリングします。

プレビューはドラッグでき、ドキュメントを共有するための迅速なアクセスがあります。

これらのヘッダーの1つを取得するには、新しいナビゲーションドキュメント修飾子を使用してナビゲーションドキュメントをビューに関連付けます。

これを行うには、譲渡可能に準拠するタイプを提供するか、URLを直接提供できます。

ここでは、私が見ている場所へのマップアプリを開くURLを提供します。

ナビゲーションドキュメント修飾子は、URLを提供するときにmacOSのウィンドウツールバーのプロキシアイコンも設定します。

結局のところ、私はアプリのツールバーの更新を休もうと思います。

今回追加したすべての機能を信じられますか？

それらを使い始めるのが待ちきれません。

私はiPadでPlacesの体験を向上させるために、私の旅で多くのことをカバーしました。

iPadのツールバーは、オーバーフローメニューやユーザーのカスタマイズなど、多くの新機能を獲得しています。

セカンダリアクションの配置とカスタマイズAPIを使用して、iPadとMacで利用可能なより大きなスペースを最大限に活用してください。

タイトルは、ツールバーで自分自身を表現するいくつかの新しい方法を得ました。

ナビゲーションタイトルを使用するか、タイトルメニューを作成するか、タイトルの名前変更をサポートします。

そして、必要に応じてナビゲーションドキュメント修飾子を使用することを忘れないでください。

iPadシリーズのSwiftUIを楽しんだことを願っています。

表、選択、ツールバーなどのすべての改善により、iPadアプリを次のレベルに引き上げましょう。

ありがとう、そして素晴らしいWWを。