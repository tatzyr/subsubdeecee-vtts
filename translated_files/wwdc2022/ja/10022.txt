10022

♪ ♪

こんにちは、ようこそ。

私はカメラソフトウェアエンジニアリングチームのブラッド・フォードです。

このセッションでは、macOS用の最新のカメラドライバアーキテクチャであり、DALプラグインの代替品であるCoreMedia IOを使用したカメラ拡張機能を紹介します。

DALプラグインは、Macや仮想カメラに接続するハードウェア用のカメラドライバーを作成できる技術です。

彼らはmacOS 10.7以来、非常に長い間存在しています。

DALプラグインは、macOSをリッチメディアプラットフォームとして拡張する力を提供し、優れたサードパーティのカメラ製品のサポートをプロや消費者に提供します。

それはMac、Macを作るものの一部です。

しかし、DALプラグインにはいくつかの問題があります。

信頼できないコードをアプリのプロセスに直接ロードし、プラグインにバグがある場合のクラッシュやマルウェア攻撃に対して脆弱になります。

このため、FaceTime、QuickTime Player、PhotoBoothなどのAppleアプリでは動作しません。

また、これらのアプリが意図的にライブラリの検証を無効にしたり、ユーザーがシステムの整合性保護をオフにしたりしない限り、多くのサードパーティのカメラアプリでは動作しません。

これらのいずれも、システムの安全性を低下させ、安定性を低下させるため、推奨される慣行ではありません。

開発も難しいです。

彼らは2011年頃のC APIと、あなたが学ぶためのC++ヘルパークラスの厚いSDKを持っています。

その上、それらはまばらに文書化されています。

アップグレードの時間です。

macOS 12.3は、カメラ拡張機能と呼ばれるDALプラグインの徹底的に現代的な代替品を導入します...ユーザーのセキュリティを第一に考えるアーキテクチャです。

それがどのように機能するかを学びましょう。

まず、技術の概要を説明します。

次に、カメラ拡張機能をゼロから構築する方法を紹介します。

次に、APIの主なクラスと機能を紹介します。

CoreMedia IO拡張機能を出力デバイスとして使用する方法を説明します。

そして最後に、DALプラグインの廃止計画をカバーします。

始めましょう。

CoreMedia IO拡張機能とも呼ばれるカメラ拡張機能は、カメラドライバをパッケージ化してMacアプリケーションに配信する新しい方法です。

彼らは安全です。

拡張コードは、サンドボックス化され、ロールユーザーとして実行される独自のデーモンプロセスにコードオフされます。

拡張機能が提供するすべてのバッファは、アプリに配信される前に検証されます。

彼らは速いです。

フレームワークは、パフォーマンスに重点を置いて、拡張プロセスとアプリの間のIPCレイヤーを処理します。

このフレームワークは、複数の同時クライアントにバッファを配信することもできます。

彼らは現代的です。

拡張機能は、SwiftまたはObjective-cのいずれかで記述できます。

それらはシンプルです。

学ぶべきいくつかのクラスと、起動して実行するために実装するいくつかのプロトコルがあります。

フレームワークはボイラープレートコードを処理します。

それらは展開が簡単です。

App Storeでアプリとして出荷できます。

また、カメラ拡張機能は、既存のAVFoundationキャプチャAPIと100%下位互換性があります。

カメラ拡張機能は、Appleアプリを含むすべてのカメラアプリの内蔵カメラと同じように表示されます。

カメラ拡張機能がFaceTimeカメラピッカーにどのように表示されるかの例を次に示します。

カメラ拡張機能でどのような体験を構築できますか?

3つの一般的な用途を研究しましょう。

最も簡単な用途は、カラーバーを表示するカメラ、ユニークなテストパターン、さまざまなフレームレートまたは解像度でプログラムで生成された画像、またはA / V同期をテストするためにムービー内のフレームなどの事前にレンダリングされたコンテンツをストリーミングするカメラなど、ソフトウェアのみのカメラです。

2番目のユースケースは、Macに物理的に接続したり、ワイヤレスで発見したりする予定のカメラのドライバです。

カメラエクステンションは、ホットプラグとアンプラグを完全にサポートしています。

ハードウェアに対処するには、いくつかの選択肢があります。

好ましい方法は、完全にユーザースペースで実行されるDriverKit Extension、またはDEXTを使用することです。

ハードウェアをカーネルレベルでアドレス指定する必要がある場合は、レガシーIOVideoFamily kextパスを使用できます。

Kextは本質的に安全性が低く、システムの不安定性に寄与する可能性があるため、新しいkextコードの開発は推奨されません。

Appleは、USBビデオクラス、またはUVCカメラにクラス準拠の拡張機能を提供しています。

UVC仕様に準拠したカメラに最適です。

ただし、非標準プロトコルを使用し、UVC仕様以外の追加機能を備えたUSBカメラをサポートする必要がある場合は、AppleのUVC拡張機能を上書きするカメラ拡張機能を作成し、特定の製品とベンダーIDを請求できます。

それについてもっと知りたい場合は、developer.apple.comの「デフォルトのUSBビデオクラス拡張機能の上書き」というタイトルの記事を参照してください。

最小限のDEXTバンドルを作成する方法と、Info.plistでオーバーライドする必要があるIOKitPersonalitiesキーについて説明します。

3番目の一般的な用途は、ソフトウェアとハードウェアのハイブリッドであるクリエイティブカメラです。

拡張機能は、Macに接続された別の物理カメラからビデオストリームにアクセスし、それらのバッファにエフェクトを適用し、新しいカメラストリームとしてクライアントに送信します。

または、複数のカメラからビデオストリームにアクセスし、それらを合成し、アプリに送信するクリエイティブなカメラ。

このようなクリエイティブなカメラは、コンフィギュレーションアプリを使用して合成を制御したり、フィルターをパラメータ化したりするかもしれません。

クリエイティブなカメラの可能性は本当に無限大です。

主なユースケースを探ったので、CoreMedia IO Extensionの解剖学を見てみましょう。

まず「CoreMedia IO」の部分。

CoreMedia IOは、カメラドライバを公開または発見するための低レベルのフレームワークです。

レガシーDAL APIとそれに代わる新しいカメラ拡張APIが含まれていることをすでに知っています。

しかし、アプリ開発者がシステム上のカメラを見つけて検査するための低レベルのC APIの強力なセットも含まれています。

さて、その「拡張」部分はどうですか?

CoreMedia IO拡張機能は、macOS Catalinaで最初に登場したSystemExtensionsフレームワークの上に構築されています。

使い捨てのインストーラーが不要になります。

代わりに、アプリ内で拡張機能を出荷します。

拡張機能の実行可能ファイルはアプリバンドル内にあります。

SystemExtensionsフレームワークを呼び出すことで、アプリはシステム上のすべてのユーザーの拡張機能をインストール、アップグレード、またはダウングレードできます。

そして、アンインストールは簡単です。

アプリを削除すると、SystemExtensionsフレームワークはすべてのユーザーのカメラ拡張機能をアンインストールします。

この配信メカニズムは、App Storeでの使用が承認されており、カメラ拡張機能を幅広い視聴者に簡単に展開できます。

システム拡張フレームワークの詳細については、developer.apple.com/documentation/systemextensionsでドキュメントをお読みください。

そして、「System Extensions and DriverKit」というタイトルのWWDC 2019のビデオを必ずチェックしてください。

カメラエクステンションの技術概要については、それだけです。

さて、実際に1つを構築しましょう。

これは、数分でカメラ拡張機能を稼働させる方法の簡単なデモです。

私はXcodeでExampleCamと呼ばれる単一のウィンドウmacOSアプリケーションを作成しました。

この時点で、私は数行のコードを追加しただけです。

App Delegateは変更されません。

メインストーリーボードには、インストール用と拡張機能をアンインストール用の2つのボタンと、ステータスを表示するテキストフィールドを追加しました。

ViewControllerクラスでは、インストールボタンとアンインストールボタンを接続するためにIBActionsを追加しました。

これらの関数は、アプリのバンドル内にある拡張機能を有効または無効にするために、OSSystemExtensionRequestsを作成します。

下部には、ステータスを記録するOSSystemExtensionRequestDelegate関数の骨格実装を追加しました。

アプリのエンタイトルメントファイルには、通常のApp Sandbox=YESがあり、AppGroupを定義します。

ここに新しいキーを1つ追加しただけです。「システム拡張機能」キーは、アプリがシステム拡張機能をインストールする場合に必要です。

この時点で、アプリを実行して[拡張機能のインストール]ボタンをクリックすると、アプリがまだ存在しないバンドル内の拡張機能を探しているため、致命的なエラーが発生します。

システム拡張機能を作成して埋め込むには、File、New、Targetに移動し、macOSの下で、システム拡張機能がある一番下までスクロールします。

次に、「カメラ拡張機能」を選択し、次にヒットし、名前を付けます。「拡張機能」を選択します。「アプリケーションに埋め込まれた」が設定されていることを確認してから、[完了]をクリックします。

新しい拡張フォルダの中で、私は4つの新しいファイルを取得します。

Info.plistは、MachServiceNameを定義することで、CMIOExtensionとして識別します。

これは重要な情報です。

CoreMedia IOのregisterassistantは、それが存在しない限り、あなたの拡張機能を起動しません。

私たちがここにいる間に、システム拡張機能の使用説明をしましょう。

エンタイトルメントファイルは、アプリがサンドボックス化されていることを示しています。

そして、検証に合格するためには、拡張機能のアプリグループにMachServiceNameの接頭辞が付けられていることを確認する必要があります。

だから、私はそれをアプリ拡張機能から拡張機能の資格ファイルにコピーして貼り付けます。

そして、それだけです。

Main.swiftファイルは、拡張機能のエントリポイントとして機能し、サービスを開始します。

そして、ExtensionProvider.swiftファイルは、完全に機能するカメラを提供します。

純粋なソフトウェアカメラを作成するために必要なすべて、DeviceSource、StreamSource、ProviderSourceが含まれています。

悪くない小さなテンプレート。

このファイルでは、「SampleCapture」を検索し、「ExampleCam」に置き換えて、カメラの名前、モデル、メーカーがすべて適切な名前を持つようにします。

それでおそれ。コンパイルして実行しましょう。

インストールボタンを押すと、失敗します。

なぜなら、システム拡張機能は/Applicationsに存在するアプリによってのみインストールできるからです。

動かしてもう一度やってみましょう。

今回は成功します。

システム設定で認証して、ブロックされた拡張機能のインストールを許可するように求められます。そこでは、プライバシーとセキュリティを見つけ、[許可]ボタンをクリックします。

パスワードで認証すると、結果が「エラーなし」で0に変わったことがわかります。

Systemextensionsctlリストツールを使用すると、成功したことを確認し、システムで1つの拡張機能がアクティブになりました。

今、私は任意のカメラアプリを開いて、私の作品を見つけて賞賛することができます。

FaceTimeを起動しましょう。

ExampleCamはカメラピッカーに表示されます。

70年代の古いポンゲームのように見え、毎秒60フレームでフレームを上下に移動する水平の白い線を描いています。

カメラを取り除くために、私がしなければならないのはアプリを削除することだけです。

システムから、アプリを削除して拡張機能もアンインストールしていることを確認するように求められます。

ExampleCamのデモは、ソフトウェアカメラをゼロから作るのがいかに簡単かを示しています。

では、そのソフトウェアカメラをクリエイティブなカメラに変えて、ノッチを上げましょう。

私はこの2番目の例をCIFilterCamと呼んでいます。

CIはCoreImageの略で、静止画やビデオに適用できるあらゆる種類のエフェクトフィルターを備えたフレームワークです。

CIFilterCamを作成するには、ExampleCamシェルから始めましたが、アプリをコンフィギュレーションアプリとインストーラーにすることにしました。

カメラピッカーボタン、フィルターピッカーボタン、エフェクトバイパスボタンを追加しました。

また、ライブビデオプレビューのビューも追加しました。

これは、フィルターカメラが何をしているかを示すために、AVCaptureVideoPreviewLayerに裏打ちされた標準ビューです。

バイパスボタンのチェックを外すと、カラーエフェクトからディストーションフィルターまで、さまざまなフィルターがビデオに適用されるのを見ることができます。

私はバンプの歪みに少し偏っています。

これらを内蔵のFaceTimeカメラ、またはMacに取り付けられている物理カメラに適用できます。

近くにiPhoneを連係カメラとして設定しています。

それを使おう。

CIFilterCamアプリは、それ自体は特別なものではありません。

ただのエフェクトカメラアプリ。

しかし、本当に面白いのは、アプリがすべてのアプリが使用できる仮想フィルターカメラのフロントエンドであることに気づいたときです。

FaceTimeとPhotoBoothを起動し、両方がCIFilterCamに向けられていることを確認します。

現在、設定アプリでフィルターを変更すると、CIFilterCamを使用するすべてのアプリが連携して変更されます。

異なるソースカメラを選択すると、すべてのカメラアプリが変更を拾います。

アプリ内のすべてのボタンをクリックすると、フィルターカム拡張子への単純なプロパティ呼び出しに変換され、「ねえ、拡張子、このカメラを使用してください」または「ねえ、拡張子、この他のフィルターを使用してください」と伝えます。

または、この他のフィルター。

または、この他のフィルター。

拡張機能内でハードウェアカメラを実行するためのサポートには、macOS Venturaが必要です。

また、別のカメラを使用することを示す、拡張機能のエンタイトルメントファイルにcom.apple.security.device.cameraキーを追加する必要があります。

また、カメラを使用するため、ユーザーは拡張機能に許可を与えるように求められますので、Info.plistにNSCameraUsageDescriptionを提供する必要があります。

これは、カメラ拡張機能を構築するための基本を締めくくります。

では、APIに移りましょう。

スタックの下部には、ファーストパーティまたはサードパーティのカメラ拡張機能ごとに1つずつ、デーモンプロセスがあります。

カメラアプリのプロセス内には、IPCを介してカメラ拡張機能と話すプライベートフレームワークコードから始まり、いくつかのレイヤーがあります。

1つのレベルアップは、CoreMedia IO ExtensionコールをレガシーDALプラグインコールに変換する別のプライベートレイヤーです。

再び、DALプラグインを公開するパブリックCoreMedia IO APIを見つけます。

このインターフェイスのクライアントにとって、CoreMedia IO拡張機能とDALプラグインの間に違いはありません。

すべてがDALプラグインのように見えます。

そして最後に、一番上にあるのは、CoreMedia IOのクライアントであるAVFoundationです。

DALプラグインをAVCaptureDevicesとして再発行します。

これを従来のDALプラグインアーキテクチャと対比してください。

DALプラグインにはデーモンピースが含まれている場合と含まれていない場合がありますが、それらはすべて、CoreMedia IOフレームワークによってアプリプロセスで直接ロードされたコードを実行します。

これにより、アプリはマルウェアに対して脆弱になります。

カメラ拡張機能は、この攻撃ベクトルを完全に削除します。

拡張機能はアプリをサンドボックス化する必要があります。そうしないと、実行が許可されません。

Appleのregisterassistantserviceは、CMIOExtensionMachServiceNameで識別し、_cmiodalassistantsと呼ばれるロールユーザーアカウントとして起動します。

Sandboxdは、カスタムサンドボックスプロファイルをプロセスに適用します。

カメラのユースケースに合わせて調整されています。

カスタムサンドボックスプロファイルを使用すると、期待される一般的なハードウェアインターフェイスを介して通信できます。

USB、Bluetooth、WiFi - クライアントとして、ポートを開くサーバーではなく、さらにはFirewire。

また、拡張機能は独自のコンテナとtmpから読み書きできます。

カメラ拡張サンドボックスプロファイルは、通常のアプリよりもロックダウンされています。

できないことの例としては、フォーク、exec'ing、またはposixが子プロセスを生成したり、ウィンドウサーバーにアクセスしたり、フォアグラウンドユーザーアカウントに接続したり、グローバル名前空間に独自のmachサービスを登録したりします。

拡張機能の開発時に、正当なキャプチャケースに対してサンドボックスが制限的すぎる場合は、フィードバックアシスタントを通じてフィードバックを提供してください。制限の緩和を慎重に検討します。

以前のアーキテクチャ図は、バッファをアプリレイヤーに直接渡すカメラ拡張機能のデーモンプロセスを示しました。

実際には、もう1つのセキュリティ層が関係しています。

デーモンとアプリの間には、registerassistantserviceと呼ばれるプロキシサービスがあります。

透明性、同意、および管理ポリシーを実施します。

アプリが初めてカメラを使用しようとすると、システムはユーザーに大丈夫かどうかを尋ねます。

その同意は、内蔵カメラだけでなく、すべてのカメラに対して付与される必要があります。

プロキシサービスは、お客様に代わってこの同意を処理します。

ユーザーがカメラへのアクセスを拒否した場合、プロキシはバッファがそのアプリに行くのを停止します。

また、アトリビューションも処理します。特定のカメラが特定のアプリで使用されていることをシステムに知らせるため、デーモンによって消費される電力は、カメラを使用しているアプリに起因する可能性があります。

CoreMedia IO拡張機能には、プロバイダー、デバイス、ストリームの4つの主要なクラスがあります。

プロバイダーにはデバイスがあり、デバイスにはストリームがあり、3つともプロパティを持つことができます。

これら3つの主要なクラスのそれぞれは、ソース、それぞれ ProviderSource、DeviceSource、およびStreamSourceを提供することによって作成します。

ExtensionProviderは最低レベルのオブジェクトです。

ホットプラグイベントなど、必要に応じてデバイスを追加および削除できます。

接続しようとすると、クライアントのプロセスが通知されるため、デバイスの公開を特定のアプリに制限する機会が得られます。

また、プロパティの実装については、プロバイダーのソースオブジェクトを参照します。

拡張機能の主なエントリポイントは、以下がどのように見えるかです。

CMIOExtensionProviderSourceプロトコルに準拠し、ExtensionProviderを作成する独自のExtensionProviderSourceを作成します。

サービスを開始するには、プロバイダークラスメソッドstartServiceを呼び出し、プロバイダーインスタンスを渡します。

ExtensionProviderは、拡張機能の存続期間中変更されない2つの読み取り専用プロパティを実装しています。

メーカーとプロバイダーの名前。

これらは両方ともひもです。

次はCMIOExtensionDeviceです。

ストリームを管理し、必要に応じて追加または削除します。

お使いのデバイスは複数のストリームを表示できますが、AVFoundationは最初の入力ストリーム以外のすべてを無視していることに注意してください。

デバイスを作成するときは、デバイスソース、ローカライズされた名前、UUIDとしてのデバイスID、およびオプションでレガシーID文字列を提供します。

これらのプロパティは、AVFoundationまで浸透します。

デバイスのlocalizedNameは、AVCaptureDeviceのlocalizedNameになります。

指定されたデバイスIDは、レガシーDeviceIDも提供しない限り、AVCaptureDeviceのuniqueIdentifierになります。

DALプラグインをモダナイズし、以前に出荷したuniqueIdentifierとの下位互換性を維持する必要がある場合にのみ、これを提供する必要があります。

レガシーデバイスIDを提供すると、AVCaptureDeviceはそれを一意の識別子として使用します。

CMIOExtensionDevice を使用して CMIOExtensionDevice を作成します。これは、オプションで deviceModel などの他のプロパティを実装できます。これは、同じモデルのすべてのカメラで同じである必要があります。

isSuspendedは、プライバシーアイリスがある場合など、デバイスが一時停止状態に入る可能性がある場合に実装する必要があります。

Appleのラップトップの内蔵カメラは、クラムシェルが閉じられると停止状態になります。

デバイスのトランスポートタイプは、USB、Bluetooth、Firewireなど、接続方法を明らかにします。

最後に、マイクがカメラと物理的にペアリングされている場合は、リンクされたデバイスとして公開できます。

これらのプロパティはすべて読み取り専用です。

次は、CMIOExtensionで重い作業を行う、非常に重要なCMIOExtensionStreamです。

ビデオフォーマットを公開し、有効なフレームレートを定義し、アクティブなフォーマットを設定します。

ホストタイムクロックなどの標準クロックを使用するか、生成する各バッファのタイミングを駆動するために独自のカスタムクロックを提供します。

そして最も重要なことは、サンプルバッファをクライアントに送信することです。

拡張ストリームソースは、CMIOExtensionStreamFormatsを公開します。

それらはAVCaptureDeviceFormatsになります。

クライアントは、アクティブなフォーマットインデックスを読み書きして、アクティブなフォーマットを変更することができます。

フレーム持続時間は、最大フレームレートに相当します。

そして、最大フレーム持続時間は、最小フレームレートと同じです。

DALプラグインの世界は、DALコントロールと呼ばれる4番目のインターフェースを公開しています。

プラグイン開発者は、これらを使用して、自動露出、明るさ、シャープネス、パン、ズームなどの機能を公開します。

強力ですが、一貫性なく実装されているため、アプリ開発者がそれらを使用することは困難です。

CMIOExtensionアーキテクチャでは、DALコントロールの交換は提供していません。

代わりに、すべてが財産です。

プロバイダー、デバイス、およびストリームレベルで多くの標準プロパティについてすでに学習しました。

CIFilterCamのデモで行ったように、独自のカスタムプロパティを作成してアプリレイヤーに伝播することもできます。

CoreMedia IOのCプロパティインターフェイスは、C構造体を使用して、プロパティのセレクタ、スコープ、および要素を識別します。

これらはその住所と見なされます。

セレクタは、カスタムのcustなど、4文字のコードとしてのプロパティの名前です。

スコープはグローバル、入力、または出力にすることができ、要素は任意の数値にすることができます。

主な要素は常にゼロです。

CMIOExtensionsを使用すると、プロパティアドレス要素をカスタムプロパティ名にコーディングすることで、プロパティを旧世界にブリッジできます。

まず、文字4cc_、次にセレクタ、スコープ、要素をアンダースコアで区切られた4つの文字コードとして。

この方法を使用すると、任意の文字列またはデータ値をアプリレイヤーに通信できます。

AVFoundationはカスタムプロパティでは動作しないため、構成アプリがカスタムプロパティと連携する必要がある場合は、CoreMedia IO C APIに固執する必要があります。

それが私たちのAPIのハイレベルな見方です。

では、出力デバイスについて話しましょう。

DALプラグインのあまり知られていない機能は、カメラ（出力デバイス）の反対を提示する能力であり、それを提供するのではなく、アプリからビデオをリアルタイムで消費します。

これはCoreMedia IOの「O」部分です。

入力と出力。

出力デバイスは、プロビデオの世界では一般的です。

いくつかの一般的な用途は、ビデオ信号が外部レコーダーに送信されるプリントツーテープ、またはSDI入力を備えたプロデッキなどのリアルタイムプレビュー監視です。

注意すべき重要なことの1つは、出力デバイスにはAVFoundation APIと同等のものがないことです。

出力デバイスにフレームを送信するには、CoreMedia IO C APIを直接使用する必要があります。

CMIOExtensionストリームは、ソースまたはシンクのいずれかの方向で作成されます。

シンクストリームはアプリからデータを消費します。

クライアントは、サンプルバッファを単純なキューに挿入することで、シンクストリームをフィードします。

これは、拡張機能のconsumeSampleBuffer呼び出しに変換され、そのバッファを消費したら、notifyScheduledOutputChangedで通知します。

出力デバイスに固有のストリームプロパティがいくつかあります。

主に、キューのサイジング、開始前にバッファリングするフレーム数、およびすべてのデータが消費されたときのシグナリングを扱います。

さて、その日の5番目と最後のトピックです。

プレゼンテーションの前半で、私はDALプラグインアーキテクチャのこの図を示し、その多くのセキュリティ問題を強調しました。

私たちはカメラ拡張機能でこれらの欠点に対処し、その継続的な開発に全力を尽くしています。

彼らは前進する道です。

では、それはDALプラグインにとってどういう意味ですか?

それは終わりが近いことを意味します。

macOS 12.3以降、DALプラグインはすでに廃止されているため、ビルド時にコンパイル警告が表示されます。

それは良いスタートですが、それだけでは不十分です。

レガシーDALプラグインの読み込みが許可されている限り、カメラアプリは依然として危険にさらされます。

セキュリティの脆弱性に完全に対処し、すべてのユーザーにとってシステムをより堅牢にするために、macOS Venturaの次のメジャーリリースでDALプラグインを完全に無効にする予定です。

これはあなたにとってどういう意味ですか?

さて、メッセージが明確であることを願っています。

現在DALプラグインを維持している場合は、今がカメラ拡張機能へのコードの移植を開始する時です。

そして、どのような摩擦に遭遇したか教えてください。

私たちはこれらの問題に対処し、豊富な機能セットを提供することを熱望しています。

私たちはあなたと一緒に働くことを本当に楽しみにしています。

これで、macOS用のカメラ拡張機能に関する今日のプレゼンテーションは終了です。

あなたがMacにもたらす新鮮で創造的なカメラ体験を見るのが待ちきれません。

そして、あなたがそれを楽しんでいることを願っています。