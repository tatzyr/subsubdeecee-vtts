10023

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは！私はジャスティンで、写真チームのエンジニアです。

今日は、システムフォトピッカーに対して行った改善点についてお話ししたいと思います。

システムフォトピッカーは、ほとんどのアプリがiOSで写真やビデオにアクセスするための最良の方法です。

ピッカーはプロセスを使い果たしたので、アプリはそれを使用するためにライブラリへのアクセスを要求する必要はありません。

直感的なUIと使いやすいAPIを備えています。

PHPicker APIに精通していない場合は、前年のWWDCセッションで詳しく説明しました。

今日のセッションでは、ピッカーに追加した新機能の概要から始めます。

次に、ピッカーが現在サポートしている追加のプラットフォームとフレームワークについて説明します。

よし、飛び込もう。

ピッカーは、導入以来、画像、ビデオ、Live Photos間のフィルタリングをサポートしています。

ただし、一部のアプリにはその他の要件がある可能性があることを理解しています。

たとえば、スクリーンショットステッチアプリは、ピッカーにスクリーンショットのみを表示したいと考えています。

今年追加した新しいスクリーンショットフィルターで可能になりました。

スクリーンショットに加えて、画面録画やスローモーションビデオなどの他のアセットタイプを追加しました。

PHAsset.PlaybackStyleを使用して新しいフィルターを作成する方法もあります。

シネマティックビデオ、デプスエフェクト写真、バースト以外は、すべての新しいフィルターがバックポートされます。

アプリがiOS 15をターゲットにしている場合、iOS 16 SDKでコンパイルしている限り、引き続き使用できます。

複合フィルターの場合、既存の「any」に加えて、「all」と「not」も使用します。

彼らはまた、iOS 15にバックポートされています。

いくつかのコード例を見てみましょう。

ビデオやLive Photosを表示するには、それらを「any」と組み合わせることができます。

または、スクリーンショットのみを表示したい場合があります。

スクリーンショットなしですべての画像を表示するには、「すべて」と「しない」を使用して画像とスクリーンショットのフィルターを組み合わせることができます。

そして最後の例では、iOS 16をターゲットにしている場合は、.cinematicVideosフィルターを使用できます。

次に、ハーフハイトピッカーに関連する改善について話しましょう。

iOS 15では、UIKitには、ピッカーをハーフハイトモードで表示するために使用できる新しいUISheetPresentationController APIがあります。

それはすでに多くの場合でうまく機能します。

しかし、選択したアセットを調整し、それらの変更をピッカーに反映させるためにカスタムUIを実装したい人もいるかもしれません。

iOS 16では、アセット識別子を使用してアセットの選択を解除できます。

ここに示すように、deselectAssetsが呼び出された後、2枚目の写真はピッカーで選択されなくなりました。

また、moveAssetメソッドを呼び出してアセットを並べ替えることもできます。

今、私たちはすべての新しいピッカー機能に精通しています。プラットフォームのサポートについて話しましょう。

現在、システムフォトピッカーはiOSとiPadOSのアプリでのみ使用できます。

今年は、macOSとwatchOSの2つの追加プラットフォームにフォトピッカーを導入します。

iPadOSピッカーも、iPad用の新しいデザインで更新されています。

まず、新しいiPadのUIを見てみましょう。

ピッカーは、より大きなiPadディスプレイを利用するためのサイドバーを表示するようになりました。

サイドバーでは、異なるコレクション間のナビゲーションを高速化できます。

しかし、分割画面モードのように十分なスペースがない場合は、既存のコンパクトピッカーUIにフォールバックします。

次に、macOS。

macOSピッカーには、Macスタイルのコントロールを備えたサイドバーもあります。

また、iOSピッカーと同様に、複数選択、グリッドの流動的なズームをサポートし、人や場所などを検索できる強力な検索機能を備えています。

新しいピッカーUIはNSOpenPanelでも利用可能です。

それを使用して、システムフォトライブラリからアセットを選択し、iCloud写真に保存されているアセットも含めて初めて選択できます。

あなたのアプリは、採用作業をしなくても、新しいUIを無料で入手できます。

NSOpenPanelピッカーではドラッグアンドドロップがサポートされています。

iOS、iPadOS、macOSの標準ピッカーでもサポートされています。

アプリがいくつかの画像やビデオだけを選択する必要がある場合は、NSOpenPanel APIが必要なものすべてです。

ただし、フォトライブラリ内の選択したファイルは、いつでもシステムによって削除される可能性があることを覚えておいてください。

長期的に可用性を確保する必要がある場合は、アプリが管理する場所にコピーする必要があります。

メディア中心のmacOSアプリでは、最高のユーザーエクスペリエンスのために、新しい写真ピッカーをデフォルトにすることをお勧めします。

ただし、アプリは、NSOpenPanel APIを使用してファイルシステムからアセットを選択する別の方法を提供する必要があります。

場合によっては、顧客はフォトライブラリの外でアセットを選択したいと思うかもしれません。

最後になりましたが、watchOSについて話しましょう。

初めて、新しいAPIを使用して時計に保存されている画像にアクセスできます。

watchOSピッカーもiOSやmacOSピッカーのようにプロセスを使い果たしているので、それを使用するためにライブラリへのアクセスを要求する必要はありません。

iOSピッカーに似たUIを持っていますが、小さな画面用に最適化されています。

グリッドまたはコレクションで写真を閲覧できます。

選択順序を表示するようにピッカーを設定したり、選択制限を指定したりできます。

ただし、iOSやmacOSとは異なり、watchOSピッカーには画像のみが表示されます。

デバイスに500枚以上の画像がある場合、最新の500枚のみが表示されます。

「PHPickerViewControllerはUIKitベースです。

macOSやwatchOSのアプリでどのように使用できますか?

推測したように、新しいピッカーAPIがAppKitとSwiftUIで利用可能になりました。

まず、AppKit APIを見てみましょう。

実際、それはUIKit APIと非常によく似ています。

同じPHPickerConfigurationタイプとそのプロパティにアクセスできます。

わずかな違いがあります。PHPickerViewControllerは、AppKitアプリのNSViewControllerサブクラスです。

AppKitベースのPHPickerの導入により、レガシーメディアライブラリブラウザから離れる時が来ました。

PHPickerははるかに強力です。

UIKitとAppKitの両方のアプリを同時に作業している場合は、メンテナンスも簡単です。

最後に、SwiftUI APIについて話す時間です。

セッションの冒頭で見たiOSピッカーを覚えていますか？

ほんの数行のSwiftUIコードで表示できます。

さらに重要なのは、iOS、iPadOS、macOS、watchOSなど、ピッカーがサポートするすべてのプラットフォームでSwiftUI PhotosPicker APIにアクセスできることです。

ピッカーは、プラットフォーム、アプリの構成、および利用可能な画面スペースに応じて、最適なレイアウトを自動的に選択します。

ピッカーUIがどうあるべきかを心配する必要がないので、アプリをより良くすることに集中できます。

デモで新しいAPIを詳しく見る前に、まず選択した写真やビデオを読み込む方法について話し合う必要があります。

SwiftUIバインディングを通じて受け取る選択には、プレースホルダオブジェクトのみが含まれています。

実際の資産データをオンデマンドで読み込む必要があります。

一部の資産データはすぐに読み込まれないことを覚えておいてください。

ピッカーがiCloud写真からデータをダウンロードしようとしたが、デバイスがインターネットに接続されていない場合など、エラーが発生した場合、ロード操作も失敗する可能性があります。

ビデオなどの大きなファイルの中には、ダウンロードに時間がかかるものもあるため、ブロッキングローディングインジケーターではなく、アイテムごとのインラインローディングUIを表示することをお勧めします。

PhotosPickerは、アプリと拡張機能間でデータを転送するための新しいSwiftUIプロトコルであるTransferableを使用しています。

Transferable経由でSwiftUI Imageを直接読み込むことができますが、高度なユースケースでは、転送可能なプロトコルに準拠した独自のモデルオブジェクトを定義して、ロードするデータの種類を完全に制御する必要があります。

Transferableの詳細については、「Meet Transferable」セッションをご覧ください。

アプリが同時に多くのアイテム、またはビデオなどの大きなアセットを処理する必要がある場合、すべてをメモリに同時に読み込むことは不可能かもしれません。

メモリ使用量を減らすために、FileTransferRepresentationを使用して、選択したアセットをファイルとして読み込むことができます。

アセットをファイルとしてロードするときは、アプリがライフサイクルを管理する責任があることを覚えておいてください。

ファイルは、受信時に常にアプリディレクトリにコピーし、不要になったときに削除する必要があります。

はい、デモの時間です！

私はすでにアカウントのプロフィールページを表示するこのデモアプリを設定しました。

現在、プロフィール画像は単なるプレースホルダアイコンです。

PhotosPicker APIを使用してプロフィール画像を変更するための編集ボタンを追加したい。

プロファイル画像ビューは、ビューモデルで定義された画像状態にすでに応答できるため、ピッカーの選択を受信したときに画像状態を更新するだけです。

まず、ビューモデルに移動し、新しいimageSelectionプロパティを追加しましょう。

選択バインディングとしてPhotosPicker APIに渡されます。

これで、プロフィール画像ビューに戻り、ピッカーを表示するオーバーレイボタンを追加できます。

さて、少し立ち止まって、今追加したコードを見てみましょう。

定義したばかりの選択バインディングを指定して、PhotosPickerビューを追加し、画像のみを表示するように設定しました。

PhotosPickerのラベルは、円の背景を持つ単なる鉛筆グリフです。

私たちは、これまでに持っているものを見るために構築し、実行することができます。

編集ボタンをタップしてピッカーを表示できます。

画像をタップするとピッカーが自動的に閉じますが、プロフィール画像は更新されません。

どうして？

画像の選択と画像の状態を接続する必要があります。

では、そうしましょう。

ビューモデルに戻り、設定された画像選択に応答できます。

画像選択がnilの場合、画像の状態を空に設定します。

それ以外の場合は、画像の読み込みを開始します。

まだloadTransferableメソッドを実装していないため、コンパイラエラーが発生しています。

直しましょう。

実装はとても簡単です。

リクエストがまだ最新のものである場合は、完了ハンドラに応答し、画像の状態を更新するだけです。

ビルドして実行して、実際に見てみましょう。

編集ボタンをタップして画像を選択できます。

すごい！期待どおりに動作します。

実際、このプロジェクトはすでにmacOSでも実行するように設定されています。

追加したばかりのコードはmacOSで自動的に機能しますか？

構築して実行して見つけましょう。

コンパイルします！

ピッカーを開いて画像を選択すると、アプリに反映されます。

デモはそれだけです。

iOSとmacOSでデモを見たばかりですが、同じコードがwatchOSでも機能します。

しかし、心に留めておくべきことがいくつかあります。

watchOSピッカーは、シンプルなフローと短いインタラクション用に設計されています。

画像はデバイスのサイズに基づいてスケーリングされます。

通常、それらはペアリングされたiPhoneから同期されます。

しかし、ファミリー設定では、自分のiPhoneを持っていない家族がApple Watchの機能と利点を楽しむことができます。

デバイスがファミリー設定モードの場合、ピッカーを使用してiCloudフォトの最新の1000枚の画像を選択できます。

ピッカーはインターネットからいくつかの画像をダウンロードする必要があるかもしれません。

その場合、閉じる前に読み込みUIがピッカーに表示されます。

あなたが行く前に、私たちはシステムフォトピッカーをほとんどのアプリが写真やビデオにアクセスするための最良の方法にすることにコミットしていると言いたいだけです。

まだカスタムピッカーを使用している場合は、それに切り替えることを本当にお勧めします。

ありがとう、そして素晴らしいWWDCを!

♪