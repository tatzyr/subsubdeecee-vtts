110349

♪ ♪

こんにちは。私はステファニー・アングロです。

私はマーカス・ジャクソンです。

私たちはSwift Playgrounds Contentチームのソフトウェアエンジニアです。

今日は、Swift Playgroundsの魅力的なコンテンツを作成するためのツールを提供します。

Swift Playgrounds 4は、iPadとMacでアプリ開発を導入しました。

これは、App Store用のアプリの構築について学ぶための最良の方法です。

私たちのチームは、アプリ開発の基礎を学ぶのに役立つ多くのチュートリアルとサンプルコード製品をリリースしました。

観測可能なデータモデルを使用した動的SwiftUIアプリの構築、楽しいSwiftUIアニメーションやシェイプによるビューのカスタマイズ、非同期データフェッチなどのより高度なトピックをカバーしています。

今日のセッションでは、新しい教育システムの概要を提供し、プロジェクトのガイドモジュールを使用してコンテンツを作成し、ウォークスルーと実験タスクで没入型の学習体験を構築します。

始めましょう。

学習者が私たちのチュートリアル「Keep Going with Apps」を完了すると想像してみてください。

彼らは「Emoji App」というアプリで終わるだろう。

このアプリでは、リスト内のすべてのお気に入りの動物を追跡し、色とサイズを変更し、動物をタップして「クリーチャーダンス」ビューでグルーヴを得るのを見ることができます。

このダンスビューは楽しいですが、雰囲気をもっと実際のダンスパーティーにしたいです。

では、学習者に示すことができる追加機能をいくつか追加しましょう。

ここでは、「クリーチャーダンス」ビューにもう少しコードを追加しました。

どのパーティーもダンスフロアが必要です。

そこで、ビューの背景として設定した10x10のグリッドを作りました。

また、グリッド内の各タイルは、カスタムビュー修飾子を使用してランダムに色を更新します。

グルーヴィーに見えるね？

また、私たちのお気に入りの動物が私たちの助けを借りずに踊れるようにしたかったので、動物のスケール、位置オフセット、回転をアニメーション化するのに役立つカスタム修飾子をいくつか作りました。

これらのカスタム修飾子のすべてで、これらのアニメーションはリピートフォーエバーに設定されています。つまり、私たちの動物は真新しいダンスフロアで一晩中踊ることができます。

そして最後に、ダンスフロアを本当に照らすために、私は私たちのビューの上部にアニメーションディスコボールを追加しました。

この最後のタッチを追加すると、究極のダンスパーティーのためにすべてをまとめることができます。

私はこのプロジェクトにかなりの数の変更を加えましたが、カスタムビュー修飾子の詳細に飛び込むことさえしませんでした。

では、これを学習者にどのように説明すべきですか?

学習者にAppleのドキュメントを誘導することはできますが、Swift Playgroundsでプロジェクトのコードと一緒にこれらの概念を教えるオプションもあります。

私たちのチームは、あなたのような著者が学習者のために魅力的なアプリ内体験を作成するのに役立つように設計されたこの新しい教育システムを構築しました。

今日は、Swift Playgrounds 4でこのアプリの学習コンテンツを構築する方法を説明します。

あなたが何を持って立ち去るかのスニークピークをあげましょう。

学習者が最初にSwift Playgroundsでコンテンツを開くと、友人のByteからここに示すように、オプションのウェルカムメッセージでプロジェクトを紹介できます。

ウェルカムメッセージは、プロジェクトのソースエディタの上部にある画面の左側にあり、画面の右側には学習センターがあります。

学習センターは、学習者にコンテンツを説明する画像や指導テキストを追加できる指定されたエリアです。

ウェルカムメッセージと学習センターでは、このプロジェクトがSwiftUIの色、形、アニメーションの助けを借りてジャムを盛り上げることを学習者に知らせています。

学習センターには、タスクのセクションも含まれています。

タスクは、著者が学習者を導くために書くことができるコーディング目標です。

それらはコンテンツの基本的な構成要素です。

学習センターのタスクボタンをタップすると、私たちの教育システムはSwiftファイルを開き、そのファイルの上部に学習教材を含むカードをレンダリングします。

このカードには、テキスト、画像、コードスニペットを含む一連のページを含めることができます。

その後、マーカスはウォークスルーと実験の2つのタスクタイプを調べます。

高いレベルでは、それが私たちの教育システムが提供しなければならないものです。

適切な散文と適切なタスクで、学習者のための説得力のある教育体験を構築できます。

さて、独自のコンテンツの作成を開始するには、まずガイドモジュールについて話す必要があります。

デフォルトでは、swiftpmプロジェクトのファイル構造は、すべてのソースコードをルートに保持します。

教育システムを利用するためにプロジェクトをアップグレードするには、ファイル構造を変更する必要があります。

まず、アプリモジュールを作成する必要があります。

作成したら、プロジェクトのソースコードとアセットをすべて移動する必要があります。

Package.swiftファイルは、プロジェクトのルートに残しておく必要があります。

次に、ガイドモジュールを作成する必要があります。

このモジュールは、AppモジュールとPackage.swiftファイルと同じレベルである必要があります。

ガイドモジュール内では、ガイドファイルが必要です。

このファイルには、学習コンテンツのすべての散文が含まれます。

私はすでにガイドファイルを始めたので、これまでに書いた内容をチェックしてみましょう。

ガイドファイルには、ディレクティブとマークダウンの組み合わせが含まれています。

ディレクティブは、文字列などの属性としてプリミティブ型や、マークダウン要素やその他のディレクティブなどのより複雑な型として取り込むことができるマークダウンの拡張です。

ディレクティブは他のディレクティブのコンテナとして機能することができますが、教育システムのUI要素を表すこともできます。

まず、ガイドファイルで、ファイル全体に包まれた必要なガイドブックディレクティブを追加しました。

これは、すべてのディレクティブのメインコンテナとして機能します。

そのパラメータには、タイトル、アイコン、背景画像、およびプロジェクトを開いたときに最初に開きたいファイルが含まれます。

ガイドブックディレクティブの下で、ウェルカムメッセージディレクティブを追加しました。

ウェルカムメッセージはオプションであり、前述のように、最初にプロジェクトを開いたときに学習者に提示されます。

ウェルカムメッセージディレクティブの下に、ステップディレクティブに包まれたガイドディレクティブを追加しました。

ガイドディレクティブは、学習センターやタスクに表示されるコンテンツにステップとステップをマッピングするためのコンテナとして機能します。

学習センターに画像と指導テキストの追加を開始するには、ステップ内にContentAndMediaディレクティブを含める必要があります。

だから私はダンスフロア、素敵な歓迎メッセージ、そして学習センターの散文を追加して、このパーティーを始めました。

マーカス、このパーティーを続けたいですか？

マーカス:間違いなく。

私たちの生き物がパーティーをするためのなんてドープなダンスフロアでしょう。

この効果は本当にクールですが、まだ学んでいる人には多すぎるかもしれないと思います。

このコードを説明するために、ウォークスルータスクを使用できます。

1ページのウォークスルーから始めましょう。

後で、残りを記入する方法をお見せします。

ステファニーはすでに私たちのガイドブックの始まりと、役に立つ歓迎のメッセージを見せてくれました。

タスクを作成するために必要な最初のディレクティブ、ステップディレクティブがすでにあります。

ステップディレクティブは、ウォークスルーコンテンツが存息する場所です。

ステップを踏むには、他の2つのディレクティブで記入する必要があります。

ここでは、すでにコンテンツとメディアのディレクティブを追加しました。

このディレクティブには、右側の学習センターに入るマークダウンが含まれています。

このディレクティブの本文には、あらゆる形式のマークダウンテキストを含めることができます。

これは、あなたのトピックをカバーするのに役立つかもしれない、より長い散文とより大きな画像を置く場所です。

これは、プレイグラウンドに表示されているコンテンツとメディアディレクティブです。

この例では領域は小さく見えますが、このビューはさらに下に拡張することができ、スクロールビューに含まれています。

これにより、より長い散文を書き、図などの複雑なコンテンツを表示するのに最適な場所です。

コンテンツとメディアが書かれたら、2番目の必要な指示であるタスクを追加できます。

タスクグループと呼ばれる別のディレクティブにタスクを追加します。

タスクグループは、タスクのグループを一緒に収集したい場合、ステップの中に入れることができるオプションのディレクティブです。

複数のファイルや異なるタイプのタスクで同じトピックをカバーするコンテンツがある場合は、これを考慮するかもしれません。

タスクグループ内で、短いテキストを追加できます。

これは学習センターにサブタイトルとして表示されます。

タスクグループがプレイグラウンドでどのように表示されるかは次のとおりです。

タスクグループとサブタイトルがわかったので、タスクディレクティブの追加を開始できます。

タスクにはいくつかのパラメータがあり、最初のパラメータはtypeです。

これにより、教育システムは、このタスクを表示するときに生成するUIを知ることができます。

次に、すべてのタスクにIDが必要です。

IDは、あなたが望むものなら何でもできる文字列です。

ただし、ガイドのすべてのIDは一意でなければなりません。

Titleパラメータも文字列です。

これはまた、あなたが望むものになることができ、ユニークである必要はありません。

このタイトルは、タスクカードのUIによってレンダリングされます。

最後に、ファイルパラメータは、学習者がこのタスクを開始したときにプロジェクト内のどのファイルを開くかを学習センターに伝えます。

プレイグラウンドでのタスクの表示方法は次のとおりです。

タイトルはボタンの中にあり、ウォークスルーのファイルはその上にリストされています。

今、私たちはウォークスルータスクを書きました。

最初のページを追加しましょう。

ページディレクティブはタスクの本文内に入り、次の必須パラメーターがあります。IDパラメーターはタスクのIDと同じように動作するので、ガイドファイル全体で一意でなければなりません。

タイトルパラメータは、タスクのものとよく似ています。

ただし、ページのタイトル文字列を空のままにすると、このページを表示するときにタスクのタイトルを使用するように指示システムが知ることができます。

ページ内では、コンテンツとメディアディレクティブに似たマークダウンテキストを追加できます。

ただし、タスクビューは学習センターよりもはるかに小さいです。

テキストを短くし、学習者が読みにくい可能性があるため、図のような複雑な画像を使用しないでください。

これは、Swift Playgroundsによってレンダリングされたウォークスルーの最初のページです。

最初のウォークスルーはほぼ終わりましたが、まず、最後のスクリーンショットに示すようにコードを強調表示する方法を示す必要があります。

そのために、CreatureDance.swiftにいくつかのマーカーを追加する必要があります。

ウォークスルーが表示されたら、最初のカスタム修飾子であるanimatedScalingEffectを強調表示したいと思います。

行にハイライトを追加するには、コードの前後に行にコメントのペアを追加します。

複数行のコメント構文から始めます。/* コメントの中には、#-code -walkthroughと書き、その後に括弧のペアが続きます。

括弧内に、強調表示したいページディレクティブのIDを書きます。

この場合、1.modifier。

さて、これをプレイグラウンドでテストしてみましょう。

絵文字アプリプロジェクトを開きましょう。

プロジェクトを開くと、左側にソースエディタ、右側にプレビューが表示されます。

ソースエディタの上には、私たちのバディバイトが、どのような学習コンテンツが何をすべきかの概要を提供するウェルカムメッセージがあります。

「詳細」ボタンをタップします。

右側のプレビューは学習センターに交換されます。

一番上は、ContentAndMediaディレクティブで書いた散文です。

その下には、タスクグループと、ウォークスルーのタイトルが付いたボタンがあります。

ウォークスルーは、学習センターでByteの別の友人であるExpertの写真付きのボタンとして示されます。

このボタンをタップすると、いくつかのことを行います。まず、学習センターが再びプレビューに交換されます。

第二に、まだ開いていない場合は、タスクのファイルパラメータで指定されたファイルがソースエディタで開かれます。

第三に、タスクビューはソースエディタの上にドロップダウンします。

最後に、ソースエディタは、コードウォークスルーコメントにマークされたコードを強調表示します。

コンテンツが画面に表示されない場合、ソースエディタは強調表示する必要があるコードの行が表示されるまでスクロールします。

そして、それはあなたがスウィフトプレイグラウンドでウォークスルーを書く方法ですが、私はあなたがおそらく複数のページを持つウォークスルーがどのように見えるかに興味があると言うのが公平だと思います。

これを行うには、Xcodeでプロジェクトを開き、残りのウォークスルーに記入します。

Xcodeでガイドファイルを開いたので、ウォークスルーにさらに数ページを追加したいと思います。

ビュー修飾子とは何かについて少し説明しましたが、カスタムビュー修飾子を構築する方法についてもっと説明したいと思います。

私は先に進んでそれらのページを追加します。

すごい。

これで、カスタムビュー修飾子のウォークスルーがあります。

今はViewModifierプロトコルを説明するのも良い時期だと思います。

このようにして、学習者は必要に応じて独自のViewModifierを作成できます。

これを行うには、タスクグループに別のウォークスルーを追加します。

私たちは今、完全に肉付けされたウォークスルーのペアを持っています。

iPadに切り替えて、どのように見えるかを確認します。

プロジェクトを開くと、学習センターに2つのウォークスルーがあります。

最初のウォークスルーをタップすることから始めます。

以前と同じように、ビュー修飾子の行が強調表示され、タスクビューがドロップダウンして、このコードが何であるかを説明します。

これで、次のボタンをタップできます。

ソースエディタは、修飾子構造体までスクロールし、この構造体が何のためにあるのかを説明します。

次のボタンを再度タップすると、このウォークスルーの最終ページに移動し、修飾子構造体内のボディメソッドについて詳しく説明します。

タスクビューの下部には、次のウォークスルーとマークされたボタンがあります。

これをタップすると、次のウォークスルータスクが自動的に開始されます。

この機能は、進むべき別のタスクがある限り、教育システムによって無料で提供されます。

今、私はここにいるので、このウォークスルーの残りの部分をタップします。

そして、それがSwift Playgroundsでウォークスルーを構築する方法です。

次に、学習者が自分でコードを追加して何が起こるかを確認できる別の種類のタスクを作成する方法を紹介したいと思います。

だから、この時点で、私たちは良いパーティーをしています。

私たちの生き物は踊っていて、背景にいくつかのライトがあります。

基本的にはナイトクラブのように見えますが、もう少しうまくできると思います。

彼らが小さなクラブのストロボライトの下で踊っているように見えるように、私たちの生き物にいくつかの色を加えるのは素晴らしいことだと思います。

しかし、それは私だけです。あなたはどうしますか？

ここで実験タスクの出番です。

実験は、余分な好奇心を感じている場合や、アプリを独自のものにする方法が必要な場合は、学習者が追加できるオプションのコードビットです。

ガイドファイルに戻ると、すでに取り組んでいたのと同じステップに実験タスクを追加できます。

私は「実験」と名付けた実験を開催するための新しいタスクグループを作成しました。

サブタイトルと最初の実験タスクの始まりを埋めました。

実験タスクとウォークスルーの最初の違いは、型パラメータに入るものです。

他のパラメータは、ウォークスルータスクに同様の慣習に従います。

ページディレクティブは、ウォークスルーと同じように機能します。

ただし、実験では、オプションのパラメータisAddableを1つ追加します。

isAddableパラメータを使用すると、実験タスクがソースエディタに直接コードを追加できます。

isAddableがtrueに設定されている場合、コードスニペットの横にある学習タスクカードに追加ボタンが表示されます。

ページディレクティブのコードは、トリプルバックティックマークダウン構文を使用してコードブロックでラップする必要があります。

コードブロックを10行以下に保つのがベストプラクティスです。

タスクビューは、必要に応じてより長いコードスニペットを表示できますが、学習者がスクロールする必要がない方が良いです。

プレイグラウンドでのコードビューの表示方法は次のとおりです。

コードスニペットの右側には、isAddableパラメータがtrueに設定されていたため、追加ボタンがあります。

それは私たちが実験タスクを書くために必要なほとんどすべてです。

しかし、それは追加可能なパラメータであることを覚えていますか?

これにより、実験タスクはソースエディタにコードを追加できますが、スニペットを追加するコードの場所をPlaygroundsに伝える必要があります。

ここで私たちは再びCreatureDance.swiftにいます。

学習者に、不透明度修飾子のすぐ下に色修飾子を追加してもらいたい。

そこで、実験タスクのコメントを追加します。 

実験タスクのコメントは1行で、ダブルスラッシュで始まります。

次に、#-learning-taskを書きます。

その後、括弧のペアが来て、その中に実験タスクのIDを書きます。

今、私たちは実験タスクをテストするために必要なものがすべて揃っています。

もう一度、私はこれらすべてをすでにswiftpmプロジェクトに書いています。ステファニーと私は取り組んでいます。

調べてみましょう。

私たちは再び学習センターに戻ってきました。

今回は、最初の実験がある一番下のタスクグループに集中したいと思います。

実験は、Byteの別の友人であるBluによって教育システムで注目されています。

実験タスクをタップしましょう。

次に起こることは見覚えがあるはずです。

タスクビューがドロップダウンします。

ただし、今回はタスクビューにコードビューが含まれています。

コードビューの右側には追加ボタンがあります。

これをタップすると、コードがソースエディタに追加されます。

コードが追加されたので、CreatureDanceViewにどのような変更を加えたかを確認したいと思います。

このパーティーを始めましょう！

甘い。

今、私たちは光が私たちの生き物に当たるのを見ることができます。

これはかなりグルーヴィーですが、タイマーを使用して数秒ごとに生き物にランダムな色を与えることで、もう1つのノッチを上げることができると思います。

これを行うには、別の実験を追加する必要があるので、このプロジェクトをXcodeに戻して、新しいタスクを追加しましょう。

2回目の実験を追加する前に、すでにそこにある実験にページを追加するのは良い考えだと思います。

学習者にとって、コードのブロックを追加し、その理由やそれが何をするのかわからないのは混乱する可能性があります。

それを助けるために、コードページの前にテキストを含むページを追加します。

今、私たちは2番目のタスクを追加する準備が整いました。

繰り返しになりますが、学習者にプロジェクトにコードを追加してもらいたいので、コードを説明するページとそれに続く追加可能なコードスニペットを追加します。

そして、それに伴い、カスタムビュー修飾子でできることのいくつかについて学習者に教えるための新しいコンテンツを作成しました。

ねえ、ステファニー、私たちが作ったものを彼らに見せる準備はできましたか？

ステファニー：ええ、やりましょう。

iPadでコンテンツの最終版を開き、私の変更とマーカスの変更がどのように一緒に流れるかを確認します。

私が最初にプロジェクトを開くと、歓迎のメッセージがアニメーション化し、クリーチャーパーティーを紹介します。

ウェルカムメッセージの「詳細」ボタンをタップすると、学習センターが開きます。

すごい。

私たちの学習センターには、上部に私の説明とマーカスが追加した4つのタスクがあります。

最初のウォークスルーをタップしましょう。

ここで、Marcusは私のAnimatedScalingModifierを例として使用して、カスタムビュー修飾子の使い方を説明しました。

次のウォークスルーボタンをタップすると、2番目のウォークスルーがアニメーション化されます。

マーカスは、View Modifierプロトコルを例として使用して、プロトコルの仕組みを説明しました。

2回目のウォークスルーを終えた後、「完了」をタップすると、最初の実験タスクが続きます。

ストロボライトのダンスタスクは、colorMultiply修飾子を含むこのコードスニペットを追加することで、私たちの生き物にいくつかの色を追加できることを教えてくれます。

コードスニペットを追加する前に、このダンスパーティーがどのように見えるかを思い出しましょう。

わかった、かっこいい。

「追加」をタップしてコードスニペットを追加し、「パーティーを開始」をもう一度タップして変更を確認します。

いいね、生き物は色が変わった。

今すぐこの実験タスクを完了し、最後のタスクに移行します。

Switch It Upの実験タスクでは、タップジェスチャーとタイマーで動物の色をカスタマイズできます。

コードスニペットを追加して、もう一度パーティーを始めます。

そして今、動物をタップすると、色が変わります。

いいね。

この最後のタスクを完了し、学習センターに戻ります。

これで、すべてのタスクが学習センターで完了したとマークされています。つまり、このサンプルを完了しました。

そして、それがSwift Playgrounds 4の新しいコンテンツ機能を利用する方法です。

私たちは、あなたが今日のセッションを楽しんだことを願って、あなたがどのような学習経験を構築するかを見ることにとても興奮しています。

他のSwift Playgroundsセッションをチェックすることを忘れないでください。Swift Playgroundsで最初のアプリを構築してください。

WWDCの残りの部分を楽しんでください。

マーカス：そして今、あなたが私たちを許すなら、私たちは出席するパーティーがあります。