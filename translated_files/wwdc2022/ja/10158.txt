10158

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

こんにちは、こんにちは！

私はポールで、SFシンボルアプリに取り組んでいます。

今日は、SFシンボルの真新しい機能、可変色について話します。

可変色のシンボルをプロジェクトに持ち込む方法と、SFシンボルアプリがすべてのステップでどのように役立つかについて説明します。

まず、システムが提供するSFシンボルの可変色を見ていきます。

それがどのように機能し、いつ使用するかについて説明します。

次に、可変色を独自のカスタムシンボルに取り込む方法について説明します。

始める前に、SFシンボルを初めて使用する場合、または復習したい場合は、昨年のセッション「SFシンボル3アプリを探索する」を見て、プロジェクトのシンボルを見つけて整理する方法の詳細を確認することをお勧めします。

そして、まだしていない場合は、SFシンボルのビジュアルデザインと今日表示するさまざまなレンダリングモードの概要については、タリアの講演「SFシンボル4の新機能」をご覧ください。

さて、可変色について話しましょう。

可変色は、パーセンテージ値を使用してシンボルの外観に影響を与えることができるSFシンボルの新機能です。

このパーセンテージ値を変更することで、信号強度や進行状況など、時間の経過とともに変化する可能性のある値を反映したシンボルを簡単に作成できます。

可変色がどのように機能するかを見る最善の方法は、SFシンボルアプリにジャンプして、システムにそれ自体を語らせることだと思います。

今年のSFシンボルアプリでは、レンダリングインスペクタに新しいプレビューエリアを追加し、すべてのレンダリングモードでシンボルを一目で見ることができます。

さまざまな表現をクリックして、レンダリングモードを切り替えることもできます。

ピッカーに新しい自動オプションもあります。

このオプションを使用すると、各シンボルは独自の好みのレンダリングモードを選択できます。これは、ここのプレビュー領域で選択されています。

たとえば、このsquare.and.arrow.upシンボルはモノクロを好みますが、これらのiPhoneシンボルは階層を好みます。

カラーコントロールの下には、可変色の新しいコントロールセットがあります。

そして、可変色をサポートするシンボルの新しいカテゴリがあり、実験を始めるのに最適な場所です。

このスピーカーシンボルを選択し、マルチカラーに切り替えて、ギャラリービューに切り替えて詳しく見てみましょう。

まず、このボタンをクリックして可変色をオンにし、スライダーをずっと下に引いて、使用しているパーセンテージを減らします。

パーセンテージの値が減少するにつれて、シンボルの一部が暗くなるのを見ることができます。

そして、スライダーを引き戻すと、シンボルのそれらの部分がすべての色を取り戻します。

プレビューエリアに目を光らせておくと、4つのレンダリングモードすべてでこれが起こっていることがわかります。

また、グリッドビューに戻すと、変数カテゴリのすべてのシンボルが変更に反応していることがわかります。

それで、私たちは可変色について何を学びましたか?

まず、可変色は、SFシンボルで利用可能なすべてのレンダリングモードで使用できます。

可変色をサポートするすべてのシステムシンボルは、モノクロ、階層、パレット、マルチカラーモードでサポートしています。

第二に、シンボルのいくつの部分が可変色の影響を受けるかについてのルールはありません。

影響を受けるシンボルには1つのレイヤーしかないものもあれば、何十ものものものものものもあります。

いずれにせよ、可変色はパーセンテージを使用して制御されるため、これについて心配する必要はありません。

パーセンテージで合格するだけで大丈夫です。

では、システムはこれらのパーセンテージをどのように解釈しますか?

特定のレイヤーに可変色がいつ適用されるかを知るにはどうすればよいですか?

さて、SFシンボルの残りの部分と同様に、私たちはあなたのアプリがAppleプラットフォームで自宅のように感じられるように可変色を設計しました。

そして、それはあなたがよく知っているかもしれないシステムレベルの指標の動作からインスピレーションを得たことを意味します。

例として、このマイクのシンボルを見てみましょう。

マイクの左側にある4つの点は、それぞれ可変色に参加する別々のレイヤーにあります。

したがって、パーセンテージ値が特定のしきい値を超えると、各ドットがアクティブになります。

これらのしきい値は、0から100%の間で均等に間隔をあけられています。

ゼロパーセントは、レイヤーがアクティブにされない特殊なケースです。

ゼロパーセントを超える値は、最初のドットをアクティブにします。

26%以上で、2番目のドットもアクティブになります。

11%以上で3番目の点がアクティブになります。

そして、76から100%まで、4つの点をすべてアクティブにします。

したがって、可変色のシンボルは、正確にゼロパーセントで視覚的に空に見えるだけです。

この動作は、Wi-Fi強度やバッテリー残量などのシステムレベルの指標で確認できます。

可変カラーシンボルは、100%未満の値で視覚的に完全に表示され始めます。

この動作は、明るさや音量などのシステムレベルのインジケータで確認できます。

さて、この次のシンボルには、可変色を使用する3つのレイヤーがあります。つまり、レイヤー間のしきい値は33.3333や666.6667パーセントのような厄介な値に落ちる可能性があります。

丸めエラーでシンボルが予期しない方法で表示されたくなかったし、コードに入力した有効桁数を心配してほしくなかった。

したがって、レイヤー間のしきい値は最も近いパーセンテージポイントに四捨五入され、その四捨五入された値を1つの完全なパーセンテージポイント上回るまで、次のレイヤーをアクティブにしません。

したがって、最初のしきい値では、33.3%が33%に切り下げるので、2番目の層は34%で1パーセントポイント高く活性化します。

最終的なしきい値は66.7%から67%までラウンドされるため、最後のレイヤーは68%よりも1パーセントポイント高くアクティブになります。

もちろん、システムが提供するシンボルは物語の半分にすぎません。

SFシンボルアプリを使用すると、独自のカスタムシンボルを作成して注釈を付けることができ、さらに良いことに、システムによって提供されるシンボルと同じくらい柔軟で強力なカスタムシンボルを作ることができます。

柔軟でパワフルとはどういう意味ですか?

さて、システムが提供するSFシンボルは9つの異なる重みで利用でき、これらの9つの重みのそれぞれは3つの異なるスケールで利用できます。

これらの27のバリアントのそれぞれは、可変色の有無にかかわらず、4つのレンダリングモードで利用できます。

それは216の可能な構成です。

幸いなことに、それはあなたがカスタムシンボルを216回描く必要があるという意味ではありません。

昨年、シンボルの描画プロセスを合理化するために、可変テンプレートを導入しました。

この種のテンプレートを使用する場合、ウェイトとスケールの27の異なる組み合わせを描画する代わりに、3つだけ描画するだけで、システムは他の24を自動的に生成できます。

カスタムシンボルを描画した後、「注釈」と呼ばれるプロセスを通じて、さまざまなレンダリングモードを採用できます。

昨年、シンボルに階層とパレットのレンダリングモードを採用したい場合は、カスタムシンボルを異なるレイヤーに分割し、各レイヤーに階層レベルを割り当てました。

シンボルにマルチカラーレンダリングモードを採用したい場合は、カスタムシンボルを再び異なるレイヤーに分割し、各レイヤーに色を割り当てました。

これは、利用可能なすべてのレンダリングモードをサポートするために、2つの別々のレイヤー構造を管理する必要がありました。

今年は、統一された注釈でワークフローを合理化します。

統一された注釈は、シンボルに単一層構造を使用し、すべてのレンダリングモードでその構造を共有します。

したがって、シンボルを複数回レイヤーに分割する代わりに、一度だけ行う必要があります。

また、階層、パレット、マルチカラーに対する以前のコントロールに加えて、モノクロレンダリングモードでシンボルがどのように見えるかを制御できるようになりました。

そしてもちろん、統一された注釈では、シンボルに可変色を追加できます。

それでは、統一された注釈を知るために、カスタムシンボルの注釈付けに取り組みましょう。

昨年、私は同じ部屋にいなくても、家族が一緒にカードゲームをプレイできるようにアプリに取り組んでいました。

その数ヶ月後、私は新しい強迫観念を発見しました:パズルキューブ!

だから今年は、私の問題を解決する練習に役立つアプリを作りたいです。

デスクトップで作ったカスタムパズルキューブのシンボルがあります。なぜなら、ここで作ったものです。

アプリにドラッグして、新しいカスタムシンボルを作ります。

このシンボルは、システムが提供するキューブシンボルをベースにし、パズルキューブの詳細の一部を残したことに気づきました。

これは、小さなサイズや異なる重量でも、シンボルがはっきりと出くわすのに役立ちます。

さて、以前からこのプレビューエリアを覚えていますか?

カスタムシンボルに注釈を付けるときに特に便利です。

注釈を変更すると、カスタムシンボルがさまざまなレンダリングモードでどのように見えるかが一目でわかります。

また、ここをクリックするか、ピッカーで別のオプションを選択してレンダリングモードを切り替えると、リストの注釈コントロールがそれに応じて変化します。

モノクロはかなり良さそうですが、階層モードで深みを加えましょう。

そのモードに切り替えて、キューブの上部と側面を新しいレイヤーに引っ張ります。

これらの新しいレイヤーは、あまり目立たない二次レベルと三次レベルに自動的に切り替わることがわかります。

これは私のシンボルにもう少し深みと視覚的な興味を与えます。

そして、私たちが作成した階層アノテーションは、パレットレンダリングモードをサポートするためにも使用されることを覚えておいてください。

だから、私はちょうど1つの価格で2つの新しいレンダリングモードを手に入れました。

では、マルチカラーモードに切り替えて、このシンボルに色を付けましょう。

マルチカラーモードに切り替えると、階層モードで分離したのと同じレイヤーがまだ表示されることに注意してください。

統一された注釈では、1つのレンダリングモードでレイヤー構造に加えられた変更が他のすべてのモードに実行されることを忘れないでください。

前面を赤く、上面を青く、側面を黄色にしましょう。

さて、これはかなり素晴らしく見えます。

しかし、パズルキューブを解くことを学ぶ上で最も重要な部分は、練習、練習、そしてより多くの練習です。

だから、私はキューブシンボルをタイマーとして使用し、練習により多くの時間を費やすにつれて色で塗りつぶしたいと思っています。

その解決策は可変色です。

前面のこれらの別々の作品は、私たちのタイマーのためにいくつかの可変色を追加するのに最適な場所のように見えます。

これらの各ピースを別のレイヤーに分けましょう。

レイヤーリストでこれらを並べ替えている順序に注目してください。

最初に記入したいレイヤーは一番下に行き、最後に埋めたいレイヤーは一番上に行きます。

次に、これらのレイヤーをすべて選択し、このボタンをクリックすると、すべてのレイヤーで可変色を有効にします。

そして、それだけです!

可変色スライダーを動かして、何が起こるか見てみましょう。

すべての異なるレンダリングモードで何が起こっているかを確認するために、プレビューエリアに目を光らせておくことを忘れないでください。

可変色で使用されるパーセンテージを変更すると、前面がすべてのレンダリングモードで色を調整することがわかります。

それが統一された注釈の力です。

1つのレンダリングモードでの編集は、他のレンダリングモードに実行できるからです。

多くの場合、4つのレンダリングモードすべてで素晴らしい結果を得るには、1回か2回作業するだけで済みます。

そして、物事が少しトリッキーな状況では、SFシンボルアプリはまだあなたをカバーしています。

もっと複雑な記号を見てみましょう。 

これは再び私のキューブシンボルですが、今回は、システムライブラリの多くの.circle.fillシンボルのように、円の内側に設定されています。

さて、私はすでにこのシンボルに注釈を付け始めました。

ここでは、円と立方体の部分を異なる層に分けたことがわかります。

私のシンボルはマルチカラーモードと階層モードでは素晴らしく見えますが、モノクロでは、キューブとその背後にある円の間にはあまりコントラストがありません。

シンボル内のすべてのパスが1つのレイヤーにあるとき、キューブパスはサークルパスに穴を開け、モノクロで素晴らしく見えました。

しかし、円を独自のレイヤーに移動したので、キューブパスは穴を作成しなくなりました。

代わりに、彼らは固体の円の上に固体の立方体を作成します。

だから、私たちはそれをあまりよく見ることができません。

幸いなことに、ここで私たちを助けることができる統一された注釈の新機能があります。

消去を選択して、レイヤーがその背後にあるレイヤーに穴を開けるようにすることができます。

それはずっと良く見えます。

では、可変色をもう一度追加しましょう。

今回は、前面のすべての部分を選択し、コンテキストメニューから「新しいレイヤーに分割」を選択します。

次に、このボタンを使用して可変色を再度オンにします。

そして、私は終わりました!

ちなみに、パスはシンボルテンプレートに表示される順序を使用して分割されるため、描画中にシンボルのパスの順序に注意を払うと、後で時間を節約できます。

つまり、一言で言えば統一された注釈です。

これは、カスタムシンボルに注釈を付けるための高速で強力な方法です。

すべてのレンダリングモードに適用されるレイヤー構造を1つ作成します。

モノクロレンダリングモードでシンボルの外観を制御できるようになりました。

シンボル内の個々のレイヤーに可変色を追加できます。

レイヤーのzオーダーは、渡されたパーセンテージが増加するにつれて入力する順序を決定し、各レイヤーに使用されるしきい値はゼロから100%の間で均等に間隔をあけます。

また、レイヤー構造の一部であるため、レイヤーが可変色を選択すると、この設定はすべてのレンダリングモードで共有されます。

また、統一された注釈には2つの新しいレイヤーオプションがあり、新しい共有レイヤー構造での作業が容易になります。

レイヤーを消去に設定すると、そのレイヤーの形状を使用して、その背後にあるレイヤーを消去します。

これは、プラス、マイナス、またはその他の形状のバッジを持つモノクロや階層記号のような状況で本当に便利です。

そして最後に、レイヤーをHiddenに設定すると、特定のレンダリングモードから除外されます。

レイヤーがすべてのレンダリングモードで本当に使用できない状況にある場合は、このオプションを使用して、そのレイヤーを特定のモードにのみ適用できます。

これらの新機能はすべて、新しいテンプレート形式である4.0でサポートされています。

SFシンボルアプリからシンボルをエクスポートしてXcodeにインポートするときは、4.0テンプレートをエクスポートしてモノクロレンダリングを制御し、可変色を使用するようにしてください。

昨年注釈したカスタムシンボルがすでにある場合は、統一された注釈を使用するように自動的に更新されます。

階層的および多色の注釈は、余分な作業を必要とせずに持ち込まれます。

また、以前のプラットフォームをサポートする必要がある場合は、以前の3.0および2.0形式はまだ使用できます。

締めくくる前に、もう一つやりたいことがあります。

パズルキューブの解き方を学ぶのはとても楽しかったですが、これまでの一番いいところは、娘が私がパズルを解くのを見て、私も学びたかったことです。

だから当然のことながら、私は彼女に私のアプリを使って彼女の練習を手伝ってもらいたいです。

さて、彼女はこの秋に幼稚園を始めるので、私たちは彼女を少しゆっくり始めるつもりです。

しかし、これは可変色のシンボルが本当に輝く場所です。

タイマーUIをこのように設計できます。

テキストと数字は説明的で役に立ちますが、まだ学んでいる、またはテキストを読むことができない彼女のような人にとっては威圧的かもしれません。

しかし、彼女が持っているものと同じように見えるパズルキューブを見て、時間が経つにつれて色で満たされるのを見るのは、フレンドリーで直感的です。

タイマーコードを変更する必要はありません。私がする必要があるのは、使用しているシンボルの名前を変更し、より大きなキューブシンボルに使用したのと同じパーセンテージ値を渡し続けることだけで、SFシンボルが残りを処理します。

そして、それがシンボルの力です。

彼らは私たちが言語とテキストを超越した方法でアイデアを伝えることを可能にします。

彼らは私たちのアプリをより包括的にする方法を与えてくれます。

そして、システムが提供するシンボルとカスタムシンボルの両方の可変色は、進行状況、信号強度、時間などの概念に対してさらに表現力を与えます。

そのすべては、3つの図面と1つの統一された注釈から。

それはかなり素晴らしいです。

そして、私は付け加えるかもしれませんが、それはパズルキューブを解くよりもずっと簡単です。

♪