10072

♪ Nhạc hip-hop nhạc cụ êm dịu ♪

♪

Xin chào, tôi là Sara Frederixon, một kỹ sư trên ứng dụng Sức khỏe, và tôi ở đây để nói chuyện với bạn về việc sử dụng SwiftUI với UIKit.

Giống như nhiều người trong số các bạn, tôi làm việc trên một ứng dụng UIKit hiện có.

Đối với tôi, đây là ứng dụng Sức khỏe.

Ứng dụng Sức khỏe có nhiều hình ảnh trực quan để giúp mọi người hiểu dữ liệu sức khỏe của họ, nhưng việc xây dựng những chế độ xem này có thể khá phức tạp.

Tôi đã quan tâm đến việc tận dụng SwiftUI, vì vậy tôi đã làm việc với các nhóm UIKit và SwiftUI để học cách tích hợp cả hai vào cùng một ứng dụng.

Trong video này, tôi sẽ hướng dẫn bạn cách dễ dàng để bắt đầu sử dụng SwiftUI trong các ứng dụng UIKit của riêng bạn.

Đầu tiên tôi sẽ đề cập đến UIHostingController hiện có, có một số bản cập nhật mới giúp tăng thêm tính linh hoạt.

Tiếp theo, tôi sẽ đi sâu vào việc điền các chế độ xem SwiftUI với dữ liệu đã tồn tại trong ứng dụng của bạn và cách đảm bảo các chế độ xem SwiftUI cập nhật khi dữ liệu đó thay đổi.

Sau đó, tôi sẽ nói về một số chức năng mới thú vị cho phép bạn xây dựng các ô UICollectionView và UITableView bằng SwiftUI.

Cuối cùng, tôi sẽ đi qua các khía cạnh độc đáo của luồng dữ liệu với chế độ xem bộ sưu tập và bảng khi bạn đang sử dụng SwiftUI bên trong các ô.

Hãy bắt đầu bằng cách nói về UIHostingController.

UIHostingController là một UIViewController chứa một hệ thống phân cấp chế độ xem SwiftUI.

Bạn có thể sử dụng bộ điều khiển lưu trữ ở bất cứ đâu bạn có thể sử dụng bộ điều khiển xem trong UIKit.

Điều này làm cho UIHostingController trở thành một cách dễ dàng để bắt đầu sử dụng SwiftUI.

Hãy kiểm tra xem bộ điều khiển lưu trữ hoạt động như thế nào.

Bộ điều khiển lưu trữ là bộ điều khiển chế độ xem, có nghĩa là nó có UIView được lưu trữ trong thuộc tính chế độ xem của nó.

Và bên trong chế độ xem đó là nơi nội dung SwiftUI của bạn được hiển thị.

Hãy xem qua một ví dụ về cách sử dụng bộ điều khiển lưu trữ.

Ở đây, chúng tôi tạo ra một HeartRateView, một chế độ xem SwiftUI.

Sau đó, chúng tôi tạo một bộ điều khiển lưu trữ với HeartRateView làm chế độ xem gốc của nó và trình bày nó.

UIHostingController hoạt động với tất cả các API của UIKit view controller.

Hãy xem qua một ví dụ khác.

Chúng tôi có cùng HeartRateView và bộ điều khiển lưu trữ như trước đây.

Ở đây chúng tôi thêm bộ điều khiển lưu trữ làm bộ điều khiển chế độ xem con.

Sau đó, chúng tôi có thể định vị và kích thước chế độ xem của bộ điều khiển lưu trữ.

Khi nội dung SwiftUI của bạn bên trong UIHostingController thay đổi, nó có thể khiến chế độ xem cần được thay đổi kích thước.

Mới trong iOS 16, UIHostingController cho phép bạn bật cập nhật tự động kích thước nội dung ưa thích của bộ điều khiển chế độ xem và kích thước nội dung nội tại của chế độ xem.

Bạn có thể kích hoạt điều này bằng cách sử dụng thuộc tính sizingOptions mới trên UIHostingController.

Hãy xem qua một ví dụ.

Để bắt đầu, chúng tôi tạo HeartRateView và tạo hostingController.

Chúng tôi sử dụng sizingOptions API mới để yêu cầu hostingController tự động cập nhật kích thước nội dung ưa thích của nó.

Sau đó, chúng tôi đặt modalPresentationStyle thành popover.

Sử dụng sizingOptions API mới đảm bảo rằng cửa sổ bật lên luôn có kích thước phù hợp để phù hợp với nội dung SwiftUI.

Bây giờ bạn đã quen thuộc với UIHostingController, hãy nói về cách đưa dữ liệu vào SwiftUI từ các phần khác của ứng dụng UIKit của bạn và đảm bảo rằng chế độ xem SwiftUI của bạn cập nhật khi dữ liệu đó thay đổi.

Đây là sơ đồ của ứng dụng UIKit của bạn, Nó chứa một lớp mô hình hiện có sở hữu và quản lý các đối tượng mô hình dữ liệu của ứng dụng của bạn.

Ứng dụng của bạn cũng chứa một số bộ điều khiển chế độ xem.

Nếu bạn muốn bắt đầu sử dụng SwiftUI, bạn sẽ cần một bộ điều khiển lưu trữ với chế độ xem SwiftUI bên trong một trong các bộ điều khiển chế độ xem.

Bạn sẽ muốn điền vào chế độ xem SwiftUI này với dữ liệu vẫn thuộc sở hữu của lớp mô hình hiện tại của bạn.

Trong phần này, chúng ta sẽ tập trung vào cách kết nối dữ liệu qua ranh giới giữa UIKit và SwiftUI.

SwiftUI cung cấp nhiều nguyên thủy luồng dữ liệu để giúp bạn quản lý dữ liệu trong ứng dụng của mình.

Hãy xem qua các lựa chọn khác nhau.

Để lưu trữ dữ liệu được tạo và sở hữu bởi chế độ xem SwiftUI, SwiftUI cung cấp trình bao bọc thuộc tính @State và @StateObject.

Vì chúng tôi tập trung vào dữ liệu được sở hữu bên ngoài SwiftUI, những trình bao bọc tài sản này không phải là lựa chọn đúng đắn.

Vì vậy, tôi sẽ không đề cập đến những điều này trong video này.

Xem "Data Essentials trong SwiftUI" để tìm hiểu thêm về dữ liệu thuộc sở hữu của chế độ xem SwiftUI.

Một cách để xử lý dữ liệu bên ngoài SwiftUI là chuyển trực tiếp các giá trị khi bạn khởi tạo chế độ xem của mình.

Bởi vì bạn chỉ chuyển dữ liệu thô không thuộc sở hữu hoặc quản lý bởi SwiftUI, bạn có trách nhiệm cập nhật thủ công UIHostingController khi dữ liệu thay đổi.

Hãy xem qua một ví dụ.

Đây là chế độ xem SwiftUI có tên HeartRateView.

Chế độ xem này có một thuộc tính duy nhất - nhịp tim beatsPerMinute được lưu trữ dưới dạng số nguyên - và nó hiển thị giá trị dưới dạng văn bản.

Chúng tôi đang hiển thị HeartRateView này bằng cách nhúng UIHostingController vào bên trong bộ điều khiển chế độ xem hiện có có tên HeartRateViewController.

Chúng tôi lưu một tham chiếu đến bộ điều khiển lưu trữ để chúng tôi có thể cập nhật chế độ xem gốc của nó sau.

Hãy nhớ rằng, SwiftUI HeartRateView là một loại giá trị, vì vậy việc tự lưu trữ nó sẽ tạo ra một bản sao riêng biệt và sẽ không cho phép chúng tôi cập nhật giao diện người dùng.

HeartRateViewController sở hữu dữ liệu được sử dụng để điền vào HeartRateView.

Dữ liệu này được lưu trữ trong thuộc tính beatsPerMinute và khi giá trị beatsPerMinute thay đổi, chúng tôi gọi một phương thức để cập nhật chế độ xem.

Bên trong phương pháp cập nhật, chúng tôi tạo một HeartRateView mới bằng cách sử dụng giá trị beatsPerMinute mới nhất, và sau đó gán chế độ xem đó làm rootView của bộ điều khiển lưu trữ của chúng tôi.

Đây là một cách đơn giản để lấy dữ liệu từ UIKit vào SwiftUI, nhưng nó yêu cầu cập nhật thủ công rootView của bộ điều khiển lưu trữ bất cứ khi nào dữ liệu thay đổi.

Hãy xem qua một số nguyên thủy dữ liệu SwiftUI khác để làm cho các bản cập nhật này diễn ra tự động.

Trình bao bọc thuộc tính @ObservedObject và @EnvironmentObject cho phép bạn tham chiếu một đối tượng mô hình bên ngoài phù hợp với giao thức ObservableObject.

Khi bạn sử dụng các trình bao bọc thuộc tính này, SwiftUI sẽ tự động cập nhật chế độ xem của bạn khi dữ liệu thay đổi.

Chúng ta sẽ tập trung vào trình bao bọc thuộc tính @ObservedObject trong video này, nhưng bạn có thể tìm hiểu thêm về EnvironmentObject trong video "Data Essentials trong SwiftUI" đã đề cập trước đó.

Hãy cùng xem qua cách tạo một @ObservedObject.

Bước đầu tiên là lấy một đối tượng mô hình thuộc sở hữu của một phần hiện có trong ứng dụng của bạn và làm cho nó phù hợp với giao thức ObservableObject.

Tiếp theo, chúng tôi lưu trữ mô hình dưới dạng thuộc tính @ObservedObject trong chế độ xem SwiftUI của chúng tôi.

Kết nối ObservableObject với SwiftUI cho phép nó cập nhật chế độ xem khi một trong các thuộc tính của nó thay đổi.

Hãy quay lại ví dụ HeartRateView của chúng tôi và kết nối cái này.

Ứng dụng của chúng tôi có một lớp tên là HeartData chứa thuộc tính beatsPerMinute.

Chúng tôi biến nó thành một ObservableObject bằng cách tuân thủ giao thức.

Sau đó, chúng tôi thêm trình bao bọc thuộc tính @Published vào thuộc tính beatsPerMinute.

Trình bao bọc thuộc tính này là thứ kích hoạt SwiftUI cập nhật quan điểm của chúng tôi về các thay đổi.

Trong HeartRateView, chúng tôi lưu trữ HeartData trong một thuộc tính được chú thích bằng trình bao bọc thuộc tính @ObservedObject.

Trong phần thân của chế độ xem, chúng tôi hiển thị beatsPerMinute trực tiếp từ HeartData.

Bây giờ, hãy sử dụng những thứ này cùng nhau trong bộ điều khiển chế độ xem của chúng ta.

Đây là HeartRateViewController của chúng tôi.

Nó lưu trữ HeartData ObservableObject trong một thuộc tính.

Bởi vì thuộc tính này không nằm trong chế độ xem SwiftUI, chúng tôi không cần sử dụng trình bao bọc thuộc tính ở đây.

HeartRateViewController được khởi tạo với phiên bản HeartData, được sử dụng để tạo HeartRateView trở thành rootView của bộ điều khiển lưu trữ.

Sơ đồ minh họa cách điều này kết hợp với nhau.

Chúng tôi tìm nạp phiên bản HeartData hiện tại, chứa nhịp tim 78 nhịp mỗi phút.

Sau đó, chúng tôi tạo một HeartRateViewController mới với phiên bản HeartData đó, kết nối nó với SwiftUI HeartRateView.

Sau vài giây, khi mẫu dữ liệu nhịp tim tiếp theo đến, thuộc tính beatsPerMinute của dữ liệu tim được cập nhật lên 94.

Bởi vì điều này thay đổi một thuộc tính đã xuất bản trên ObservableObject, HeartRateView được tự động cập nhật để hiển thị giá trị mới.

Chúng tôi không còn cần cập nhật thủ công bộ điều khiển lưu trữ khi dữ liệu thay đổi.

Đây là lý do tại sao ObservableObject là một cách tuyệt vời để kết nối dữ liệu từ UIKit sang SwiftUI.

Tiếp theo, hãy nói về việc sử dụng SwiftUI trong chế độ xem bộ sưu tập và các ô chế độ xem bảng.

Điểm mới trong iOS 16 là UIHostingConfiguration, cho phép bạn khai thác sức mạnh của SwiftUI bên trong UIKit, bộ sưu tập và chế độ xem bảng hiện có của mình.

UIHostingConfiguration giúp dễ dàng triển khai các ô tùy chỉnh bằng SwiftUI mà không cần phải lo lắng về việc nhúng thêm chế độ xem hoặc bộ điều khiển chế độ xem.

Trước khi chúng ta đi sâu hơn vào UIHostingConfiguration, hãy xem lại cấu hình ô trong UIKit.

Cấu hình ô là một cách hiện đại để xác định nội dung, kiểu dáng và hành vi của các ô trong UIKit.

Không giống như UIView hoặc UIViewController, cấu hình chỉ là một cấu trúc nhẹ.

Nó không tốn kém để tạo ra.

Cấu hình chỉ là mô tả về sự xuất hiện của một ô, vì vậy nó cần được áp dụng cho một ô để có hiệu ứng.

Các cấu hình có thể kết hợp và hoạt động với cả hai ô UICollectionView và UITableView.

Để biết thêm chi tiết, bạn có thể xem "Cấu hình ô hiện đại".

Với ý nghĩ đó, hãy đi sâu vào và bắt đầu sử dụng UIHostingConfiguration!

UIHostingConfiguration là một cấu hình nội dung được khởi tạo với SwiftUI ViewBuilder.

Điều đó có nghĩa là chúng ta có thể bắt đầu viết mã SwiftUI để tạo chế độ xem trực tiếp bên trong nó.

Để hiển thị cấu hình lưu trữ, chúng tôi đặt nó thành thuộc tính contentConfiguration của ô UICollectionView hoặc UITableView.

Hãy bắt đầu viết một số mã SwiftUI trong cấu hình lưu trữ này để xây dựng một ô nhịp tim tùy chỉnh.

Chúng ta sẽ bắt đầu bằng cách tạo một nhãn với dòng chữ "Tốc tim" và hình ảnh của một trái tim.

Chế độ xem SwiftUI nhận được kiểu dáng mặc định dựa trên ngữ cảnh mà chúng được sử dụng.

Nhưng chúng ta có thể bắt đầu tùy chỉnh kiểu dáng bằng cách sử dụng các công cụ sửa đổi chế độ xem SwiftUI tiêu chuẩn.

Hãy làm cho hình ảnh và văn bản có màu hồng với phông chữ đậm, bằng cách thêm foregroundStyle và công cụ sửa đổi phông chữ vào nhãn của chúng tôi.

Vì chúng tôi chỉ viết mã SwiftUI thông thường, chúng tôi có thể đưa mã của mình vào chế độ xem độc lập bất cứ lúc nào chúng tôi muốn.

Tại đây, chúng tôi tạo một chế độ xem SwiftUI mới có tên HeartRateTitleView, di chuyển mã chúng tôi có vào phần thân của nó và sau đó sử dụng HeartRateTitleView đó trong cấu hình lưu trữ.

Như được hiển thị trong ô, nó tạo ra kết quả giống hệt nhau.

Bây giờ chúng ta có thể bắt đầu thêm nhiều lượt xem hơn bên trong HeartRateTitleView.

Tôi đã đặt nhãn bên trong HStack bằng miếng đệm, sau đó thêm thời gian hiện tại vào chế độ xem Văn bản bên cạnh nó.

Điều đó trông khá tốt cho đến nay.

Hãy thêm một số nội dung vào ô tùy chỉnh này bên dưới HeartRateTitleView.

Để làm điều này, chúng tôi sẽ chèn VStack vào bên trong cấu hình lưu trữ để chúng tôi có thể thêm nhiều nội dung hơn bên dưới HeartRateTitleView.

Sau đó, chúng tôi sẽ đặt hai chế độ xem Văn bản lại với nhau trong một HStack để hiển thị 90 BPM và sau đó áp dụng một vài công cụ sửa đổi để tạo kiểu cho chúng theo cách chúng tôi muốn.

Giống như chúng tôi đã làm trước đây với HeartRateTitleView, chúng tôi có thể chuyển mã mới này sang chế độ xem SwiftUI của riêng nó.

Bây giờ mã tương tự được trích xuất vào phần thân của HeartRateBPMView.

Phòng giam của chúng tôi trông rất tuyệt, nhưng tôi có một ý tưởng cho một thứ khác mà chúng tôi có thể thêm vào.

Điểm mới trong iOS 16 là khung Swift Charts, cho phép bạn trực quan hóa dữ liệu với các biểu đồ đẹp chỉ trong một vài dòng mã.

Hãy thử sử dụng nó để hiển thị một biểu đồ đường nhỏ ngay bên trong ô.

Sử dụng chế độ xem Biểu đồ mới, chúng tôi tạo một biểu đồ đường nhỏ trực quan hóa các mẫu nhịp tim gần đây và hiển thị bên cạnh chế độ xem BPM trong ô.

Để tạo biểu đồ, chúng tôi chuyển một bộ sưu tập các mẫu nhịp tim và vẽ một LineMark kết nối tất cả các mẫu.

Chúng ta có thể thêm một biểu tượng hình tròn để chỉ ra từng mẫu trên dòng và áp dụng kiểu tiền cảnh màu hồng, để tô màu biểu đồ để phù hợp với HeartRateTitleView.

Chúng tôi chỉ đang tìm hiểu bề mặt về những gì bạn có thể làm với khung Biểu đồ Swift mới, vì vậy hãy nhớ xem video "Xin chào Biểu đồ Swift" để tìm hiểu thêm về nó.

Tế bào nhịp tim đã hoàn thành của chúng tôi trông không chỉ tuyệt vời mà còn dễ dàng thực hiện chỉ trong vài phút.

Đó là cách dễ dàng để bắt đầu xây dựng các ô tùy chỉnh với UIHostingConfiguration và SwiftUI.

Hãy nói về bốn tính năng đặc biệt mà UIHostingConfiguration hỗ trợ.

Theo mặc định, nội dung SwiftUI cấp gốc được chèn từ các cạnh của ô, dựa trên lề bố cục của ô trong UIKit.

Điều này đảm bảo rằng nội dung ô được căn chỉnh chính xác với nội dung của các ô liền kề và các yếu tố giao diện người dùng khác, chẳng hạn như thanh điều hướng.

Đôi khi, bạn có thể muốn sử dụng các lề khác nhau hoặc để nội dung mở rộng đến các cạnh của ô.

Đối với những trường hợp này, bạn có thể thay đổi lề mặc định bằng cách sử dụng công cụ sửa đổi lề trên UIHostingConfiguration.

Nếu bạn muốn tùy chỉnh giao diện nền của ô bằng SwiftUI, bạn có thể sử dụng công cụ sửa đổi nền trên UIHostingConfiguration.

Có một vài điểm khác biệt chính giữa nền của UIHostingConfiguration và nội dung của nó.

Nền được lưu trữ ở phía sau ô, bên dưới nội dung SwiftUI của bạn trong chế độ xem nội dung của ô.

Ngoài ra, trong khi nội dung thường được chèn từ các cạnh của ô, nền mở rộng từ cạnh này sang cạnh khác trong ô.

Cuối cùng, khi sử dụng các tế bào tự định cỡ, chỉ có nội dung tế bào ảnh hưởng đến kích thước của tế bào.

Tiếp theo, hãy kiểm tra thêm hai tính năng đặc biệt của UIHostingConfiguration mà bạn có thể sử dụng khi bạn có một ô bên trong danh sách xem bộ sưu tập hoặc chế độ xem bảng.

Trong một danh sách, dấu phân cách bên dưới ô được tự động căn chỉnh với văn bản SwiftUI trong cấu hình lưu trữ của bạn theo mặc định.

Trong ví dụ này, hãy chú ý cách cạnh đầu của dấu phân cách được đặt qua hình ảnh để nó căn chỉnh với văn bản trong ô.

Nếu bạn cần căn chỉnh dấu phân cách với chế độ xem SwiftUI khác trong cấu hình lưu trữ của mình, hãy sử dụng công cụ sửa đổi alignmentGuide.

Khi ở trong danh sách chế độ xem bộ sưu tập hoặc chế độ xem bảng, bạn có thể định cấu hình các hành động vuốt cho một hàng trực tiếp bằng SwiftUI.

Bằng cách tạo các nút của bạn bên trong công cụ sửa đổi swipeActions, bạn sẽ có thể vuốt ô để hiển thị và thực hiện các hành động tùy chỉnh của mình.

Tải xuống mã mẫu cho video này để tìm một ví dụ hoàn chỉnh.

Khi xác định các hành động vuốt, hãy đảm bảo các nút của bạn thực hiện hành động của chúng bằng cách sử dụng mã định danh ổn định cho mục được biểu diễn.

Không sử dụng đường dẫn chỉ mục, vì nó có thể thay đổi trong khi ô hiển thị, khiến các hành động vuốt hoạt động sai mục.

Khi bạn đang sử dụng UIHostingConfiguration trong một ô, hãy nhớ rằng các tương tác của ô như xử lý chạm, tô sáng và lựa chọn vẫn sẽ được xử lý bởi chế độ xem bộ sưu tập hoặc chế độ xem bảng.

Nếu bạn cần tùy chỉnh chế độ xem SwiftUI của mình cho bất kỳ trạng thái ô UIKit nào trong số này, bạn có thể tạo cấu hình lưu trữ của mình bên trong configurationUpdateHandler của ô và sử dụng trạng thái được cung cấp trong mã SwiftUI của bạn.

ConfigurationUpdateHandler chạy lại bất cứ khi nào trạng thái của ô thay đổi, tạo UIHostingConfiguration mới cho trạng thái mới và áp dụng nó vào ô.

Trong ví dụ này, chúng tôi sử dụng trạng thái để thêm hình ảnh dấu kiểm khi ô được chọn.

Bây giờ bạn đã quen thuộc với UIHostingConfiguration, hãy thảo luận về cách quản lý luồng dữ liệu từ lớp mô hình của bạn sang UICollectionView hoặc UITableView chứa đầy các ô bằng SwiftUI.

Mục tiêu của chúng tôi là xây dựng danh sách các điều kiện y tế này.

Trong ví dụ này, chúng tôi đang sử dụng UICollectionView, nhưng mọi thứ chúng tôi thảo luận đều áp dụng như nhau cho UITableView.

Hãy xem qua các thành phần liên quan.

Ứng dụng của chúng tôi có một bộ sưu tập các đối tượng mô hình MedicalCondition, mà chúng tôi sẽ hiển thị trong chế độ xem bộ sưu tập.

Đối với mỗi mục trong bộ sưu tập này, chúng tôi muốn tạo một ô trong chế độ xem bộ sưu tập để hiển thị tình trạng y tế đó.

Để làm điều này, chúng tôi sẽ tạo một nguồn dữ liệu có thể thay đổi được kết nối với chế độ xem bộ sưu tập.

Sau đó, chúng ta cần điền vào ảnh chụp nhanh nguồn dữ liệu có thể thay đổi với số nhận dạng của các đối tượng mô hình MedicalCondition trong bộ sưu tập dữ liệu.

Điều quan trọng là ảnh chụp nhanh nguồn dữ liệu có thể thay đổi chứa số nhận dạng duy nhất của mỗi MedicalCondition chứ không phải bản thân các đối tượng MedicalCondition.

Điều này đảm bảo rằng nguồn dữ liệu có thể thay đổi có thể theo dõi chính xác danh tính của từng mục và tính toán các thay đổi chính xác khi ảnh chụp nhanh mới được áp dụng sau này.

Bằng cách áp dụng ảnh chụp nhanh với các số nhận dạng mục này cho nguồn dữ liệu có thể thay đổi, nó sẽ tự động cập nhật chế độ xem bộ sưu tập, điều này sẽ tạo ra một ô mới cho mỗi mục.

Mỗi ô được cấu hình để hiển thị một MedicalCondition, sử dụng chế độ xem SwiftUI trong UIHostingConfiguration.

Bây giờ chúng tôi đang hiển thị các ô được xây dựng bằng SwiftUI, chúng tôi cần xử lý việc cập nhật giao diện người dùng khi dữ liệu thay đổi.

Có hai loại thay đổi khác nhau mà chúng ta cần xử lý riêng biệt.

Loại đầu tiên là khi bộ sưu tập dữ liệu tự thay đổi.

Ví dụ, khi các mục được chèn, sắp xếp lại hoặc xóa.

Những thay đổi này được xử lý bằng cách áp dụng ảnh chụp nhanh mới cho nguồn dữ liệu có thể thay đổi.

Nguồn dữ liệu có thể khuếch tán sẽ phân biệt các ảnh chụp nhanh cũ và mới, đồng thời thực hiện các cập nhật cần thiết cho chế độ xem bộ sưu tập, khiến các ô bị chèn, di chuyển hoặc xóa.

Bởi vì những thay đổi đối với bản thân việc thu thập dữ liệu không ảnh hưởng đến bất kỳ thứ gì bên trong các ô, bạn cũng xử lý các loại thay đổi này, cho dù bạn xây dựng các ô của mình bằng UIKit hay SwiftUI.

Loại thay đổi thứ hai mà chúng ta cần xử lý là khi các thuộc tính của các đối tượng mô hình riêng lẻ thay đổi.

Những thay đổi này thường yêu cầu cập nhật các chế độ xem trong các ô hiện có.

Bởi vì nguồn dữ liệu có thể khác biệt chỉ chứa số nhận dạng mục trong ảnh chụp nhanh của nó, nó không biết khi nào các thuộc tính của các mục hiện có thay đổi.

Theo truyền thống, khi sử dụng UIKit, bạn sẽ cần thông báo thủ công nguồn dữ liệu có thể thay đổi về những thay đổi này bằng cách định cấu hình lại hoặc tải lại các mục trong ảnh chụp nhanh.

Nhưng khi sử dụng SwiftUI trong các ô, điều này không còn cần thiết nữa.

Bằng cách lưu trữ mô hình ObservableObject trong thuộc tính ObservedObject trong chế độ xem SwiftUI của chúng tôi, các thay đổi đối với các thuộc tính đã xuất bản của mô hình sẽ tự động kích hoạt SwiftUI để làm mới chế độ xem.

Điều này thiết lập một kết nối trực tiếp giữa mô hình và chế độ xem SwiftUI bên trong ô.

Khi một thay đổi được thực hiện, các chế độ xem SwiftUI trong ô được cập nhật trực tiếp, mà không cần đi qua nguồn dữ liệu có thể thay đổi hoặc UICollectionView.

Khi dữ liệu của một tế bào thay đổi, nó có thể khiến tế bào cần phát triển hoặc thu nhỏ để phù hợp với nội dung mới.

Nhưng nếu nội dung ô SwiftUI đang được cập nhật trực tiếp mà không cần thông qua UIKit, làm thế nào để chế độ xem bộ sưu tập biết để thay đổi kích thước ô?

UIHostingConfiguration tận dụng tính năng hoàn toàn mới trong UIKit để thực hiện công việc này.

Trong iOS 16, các ô tự thay đổi kích thước trong UICollectionView và UITableView hiện cũng đang tự thay đổi kích thước!

Điều này được bật theo mặc định, để khi bạn đang sử dụng UIHostingConfiguration và nội dung SwiftUI thay đổi, ô chứa sẽ tự động thay đổi kích thước nếu cần.

Bạn có thể tìm hiểu thêm về cách tính năng mới này hoạt động trong video "Có gì mới trong UIKit" từ WWDC 2022.

Có một khía cạnh nữa của luồng dữ liệu mà bạn có thể cần xử lý và đó là gửi dữ liệu từ chế độ xem SwiftUI trở lại các phần khác trong ứng dụng của bạn.

Một lần nữa, ObservableObject đã giúp bạn!

Bạn có thể tạo một liên kết hai chiều với một thuộc tính đã xuất bản của một ObservableObject.

Dữ liệu không chỉ chảy từ ObservableObject vào SwiftUI, mà SwiftUI còn có thể ghi lại các thay đổi đối với thuộc tính trên đối tượng mô hình.

Hãy xem qua một ví dụ đơn giản về việc tạo liên kết hai chiều bằng cách làm cho văn bản trong ô MedicalCondition của chúng tôi có thể chỉnh sửa được.

Đây là Đối tượng có thể quan sát được của chúng tôi, Điều kiện Y tế.

Nó lưu trữ một mã định danh duy nhất trong một thuộc tính ID.

Đây là mã định danh được sử dụng để điền vào ảnh chụp nhanh nguồn dữ liệu có thể thay đổi.

Và tài sản được xuất bản này lưu trữ văn bản của tình trạng y tế.

Đây là MedicalConditionView hiển thị văn bản tình trạng y tế bên trong mỗi ô.

Ngay bây giờ văn bản này chỉ đọc, vì vậy hãy làm cho nó có thể chỉnh sửa được.

Tất cả những gì chúng ta cần làm là thay đổi chế độ xem Văn bản thành TextField và tạo liên kết với thuộc tính văn bản của MedicalCondition của chúng ta bằng cách thêm tiền tố ký hiệu đô la.

Khi bạn nhập vào trường văn bản, ràng buộc này cho phép SwiftUI ghi lại các thay đổi trực tiếp vào ObservableObject.

Đó thực sự là cách đơn giản để thiết lập luồng dữ liệu hai chiều với SwiftUI.

UIHostingController là một cách mạnh mẽ để nhúng nội dung SwiftUI vào ứng dụng UIKit của bạn.

Chế độ xem SwiftUI của bạn được hiển thị bên trong chế độ xem của bộ điều khiển lưu trữ và bạn có thể sử dụng bộ điều khiển lưu trữ ở bất kỳ đâu mà bạn có thể sử dụng bộ điều khiển chế độ xem trong UIKit.

Khi sử dụng UIHostingController, hãy đảm bảo luôn thêm bộ điều khiển chế độ xem cùng với chế độ xem vào ứng dụng của bạn.

Nhiều tính năng SwiftUI, chẳng hạn như thanh công cụ, phím tắt và chế độ xem sử dụng UIViewControllerRepresentable, yêu cầu kết nối với hệ thống phân cấp bộ điều khiển chế độ xem trong UIKit để tích hợp đúng cách, vì vậy không bao giờ tách chế độ xem của bộ điều khiển lưu trữ khỏi chính bộ điều khiển lưu trữ.

Để so sánh, khi bạn áp dụng UIHostingConfiguration cho một ô, chế độ xem SwiftUI của bạn được lưu trữ trong ô mà không có UIViewController.

UIHostingConfiguration hỗ trợ phần lớn các tính năng SwiftUI.

Nhưng hãy nhớ rằng các chế độ xem SwiftUI phụ thuộc vào UIViewControllerRepresentable không thể được sử dụng bên trong các ô.

Với UIHostingController và UIHostingConfiguration, bạn có hai cách tuyệt vời để kết hợp SwiftUI vào ứng dụng UIKit của mình.

SwiftUI tích hợp liền mạch vào các ứng dụng UIKit hiện có Sử dụng UIHostingController để thêm SwiftUI trong toàn bộ ứng dụng của bạn.

Tạo các ô tùy chỉnh trong bộ sưu tập và chế độ xem bảng của bạn bằng cách sử dụng UIHostingConfiguration.

Và tận dụng ObservableObject, vì vậy dữ liệu và giao diện người dùng của bạn luôn đồng bộ.

Thêm SwiftUI vào ứng dụng của bạn ngay hôm nay!

Cảm ơn bạn đã xem!

♪