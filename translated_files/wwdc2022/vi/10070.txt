10070

♪ ♪

Mohammed: Xin chào, tôi là Mohammed đến từ UIKit.

Cảm ơn bạn đã tham gia cùng tôi vì đã đi sâu vào việc xây dựng ứng dụng Desktop Class iPad.

Trong video này, chúng tôi sẽ sử dụng iPadOS 16 APIs để cập nhật ứng dụng iPad hiện có lên trải nghiệm lớp máy tính để bàn.

Chúng ta sẽ bắt đầu bằng cách sử dụng API thanh điều hướng mới để hiển thị chức năng mạnh mẽ, tăng mật độ giao diện người dùng và cung cấp khả năng tùy chỉnh.

Sau đó, chúng tôi sẽ áp dụng UICollectionView và menu API mới để cho phép quy trình làm việc phức tạp và các hành động nhanh chóng trên nhiều lựa chọn.

Và chúng tôi sẽ làm tròn mọi thứ bằng cách bật trải nghiệm Tìm và Thay thế mới và tăng cường chỉnh sửa văn bản với Menu Chỉnh sửa mới.

Ứng dụng chúng tôi sẽ cập nhật là trình chỉnh sửa Markdown được xây dựng cho iPadOS 15.

Khi chúng ta đi qua từng bước của quá trình hiện đại hóa, tôi sẽ thảo luận về các phương pháp hay nhất và động lực đằng sau các lựa chọn của chúng ta, cho bạn ý tưởng về các yếu tố bạn nên cân nhắc khi sử dụng ứng dụng của riêng mình thông qua một quy trình tương tự.

Nếu bạn muốn biết một chút thông tin trước khi bắt đầu, hãy xem "Gặp gỡ iPad Lớp Máy tính để bàn" để biết phân tích tất cả các API iPadOS mới của UIKit và xem "Có gì mới trong thiết kế ứng dụng iPad" để biết các mẹo về cách thiết kế ứng dụng iPad Lớp Máy tính để bàn tốt nhất có thể.

Được rồi, chúng ta hãy đi sâu vào!

Để bắt đầu mọi thứ, hãy xem xét tổ chức các điều khiển ứng dụng của chúng tôi.

Vì ứng dụng được thiết kế cho iPadOS 15, nó đã hiển thị các điều khiển quan trọng nhất của nó trong thanh điều hướng và đặt các điều khiển phụ trong các menu và cửa sổ bật lên khác nhau.

Trong iPadOS 16, UIKit chính thức hóa phong cách điều hướng hiện có và giới thiệu hai phong cách mới với bố cục dày đặc hơn và có thể tùy chỉnh hơn.

Điều này cho phép các ứng dụng thể hiện bố cục phù hợp nhất với nội dung của chúng đồng thời mang lại nhiều chức năng hơn cho giao diện người dùng hàng đầu.

Các ứng dụng điều hướng có mô hình điều hướng đẩy / bật quen thuộc.

Điều này thường thích hợp cho các ứng dụng hiển thị dữ liệu phân cấp, như Cài đặt.

Các trình duyệt, như Safari hoặc Tệp lý tưởng để xem qua và điều hướng qua lại giữa nhiều tài liệu hoặc cấu trúc thư mục.

Và các biên tập viên rất tuyệt vời để tập trung xem hoặc chỉnh sửa các tài liệu riêng lẻ.

Là một biên tập viên Markdown, phong cách này là sự lựa chọn hoàn hảo cho ứng dụng của chúng tôi.

Phong cách trình chỉnh sửa sắp xếp tiêu đề về phía cạnh trước của thanh, mở ra trung tâm của nó cho một bộ mục mới.

Điều này sẽ cho phép chúng tôi hiển thị chức năng bổ sung có thể đã bị ẩn trong các chế độ xem hoặc menu khác.

Chúng tôi sẽ làm một vài điều để tận dụng thiết kế này nhiều nhất có thể.

Chúng tôi sẽ bắt đầu bằng cách tùy chỉnh hành động ngược tích hợp để phù hợp với nhu cầu của chúng tôi.

Sau đó, chúng tôi sẽ thêm một menu tiêu đề với một số thông tin tài liệu và các hành động tài liệu phổ biến.

Chúng tôi cũng sẽ thêm hỗ trợ đổi tên thông qua giao diện người dùng đổi tên tích hợp mới.

Và cuối cùng, chúng tôi sẽ làm cho chức năng bị chôn vùi trước đó dễ dàng truy cập hơn bằng cách đưa nó đến trung tâm của thanh.

Hãy bắt đầu bằng cách chọn kiểu trình chỉnh sửa bằng cách đặt thuộc tính kiểu navigationItem của bộ điều khiển chế độ xem của chúng tôi thành .editor.

Điều này ngay lập tức mang lại cho chúng tôi tiêu đề được căn chỉnh hàng đầu và mở ra khu vực trung tâm.

Sau đó, hãy loại bỏ nút trailing done của chúng tôi và thay thế nó bằng cách sử dụng backAction API mới.

Bằng cách này, chúng tôi có được một cái nhìn tiêu chuẩn hơn cho hành động loại bỏ chế độ xem này và quay lại trình chọn tài liệu.

Tiếp theo, hãy tìm hiểu xem liệu ứng dụng của chúng tôi có được hưởng lợi từ menu tiêu đề hay không.

Đúng như tên gọi, menu tiêu đề được trình bày từ chế độ xem tiêu đề của thanh điều hướng.

Đó là một nơi tuyệt vời để hiển thị siêu dữ liệu tài liệu và các hành động bề mặt áp dụng cho toàn bộ tài liệu.

Nếu ứng dụng của bạn không dựa trên tài liệu, nó có thể là một nơi tốt để hiển thị các hành động áp dụng cho toàn bộ chế độ xem.

Đối với ứng dụng của chúng tôi, thật hợp lý khi sử dụng tiêu đề của menu tài liệu để hiển thị một số thông tin hữu ích về tài liệu.

Chúng tôi cũng sẽ có thể cung cấp một đại diện có thể kéo được của tài liệu và dễ dàng truy cập vào chức năng chia sẻ.

Và bây giờ là lúc để viết một số mã!

Ứng dụng của chúng tôi được hỗ trợ UIDocument, vì vậy chúng tôi có thể sử dụng URL tệp của UIDocument để khởi tạo đối tượng UIDocumentProperties.

Tiếp theo, chúng tôi sẽ sử dụng cùng một URL đó để tạo NSItemProvider.

Sau đó, chúng tôi sẽ sử dụng nhà cung cấp mặt hàng để tạo một UIDragItem mà chúng tôi sẽ trả về từ dragItemsProvider của đối tượng thuộc tính.

Chúng tôi cũng sẽ sử dụng nó để xây dựng một UIActivityViewController mà chúng tôi sẽ trả về từ hoạt động của đối tượng thuộc tính ViewControllerProvider.

Và cuối cùng, chúng tôi sẽ đặt đối tượng thuộc tính làm thuộc tính tài liệu của navigationItem của bộ điều khiển chế độ xem trình chỉnh sửa.

Mã chúng tôi vừa viết dẫn đến tiêu đề tài liệu này, cung cấp tổng quan nhanh về tài liệu bao gồm tên, kích thước và biểu diễn biểu tượng của nó.

Vì chúng tôi đã chỉ định mục kéo và nhà cung cấp bộ điều khiển chế độ xem hoạt động, tôi có thể kéo biểu tượng để sao chép tài liệu bên ngoài ứng dụng hoặc nhấn vào nút chia sẻ để hiển thị bộ điều khiển chế độ xem hoạt động.

Ngoài việc hiển thị tiêu đề tài liệu, menu tiêu đề là một nơi tốt để cung cấp chức năng áp dụng cho toàn bộ tài liệu.

Có hai loại hành động có thể được hiển thị trong menu này: những hành động do hệ thống cung cấp với các tiêu đề và hình ảnh biểu tượng được bản địa hóa được xác định trước và những hành động hoàn toàn tùy chỉnh mà ứng dụng cung cấp.

Vì nó đi kèm với một số hành vi bổ sung, hãy bắt đầu với hành động đổi tên.

Chúng ta có thể thêm hành động này vào menu của mình bằng cách tuân thủ giao thức đổi tên đại diện.

Khi được kích hoạt, hành động sẽ hiển bày giao diện người dùng đổi tên tích hợp sẵn của thanh.

Đầu tiên, chúng tôi sẽ chỉ định bộ điều khiển chế độ xem của mình làm mục điều hướng được đổi tên thành Đại biểu.

Sau đó, chúng tôi sẽ triển khai navigationItemDidEndRenamingWithTitle để xử lý việc đổi tên thực tế của tài liệu được hiển thị.

Hàm này được gọi khi hành động đổi tên được cam kết.

Trách nhiệm của ứng dụng là xử lý việc này bằng cách thực sự đổi tên tài liệu.

API được cố tình mở kết thúc để hỗ trợ bất kỳ loại mô hình dữ liệu nào mà ứng dụng của bạn có thể có.

Chuyển sang các hành động được cung cấp bởi hệ thống khác, trước tiên chúng ta sẽ cần ghi đè các chức năng của chúng trên bộ điều khiển chế độ xem trình chỉnh sửa của chúng ta.

Ở đây chúng tôi đã triển khai các chức năng trùng lặp và di chuyển.

UIKit tự động hiển thị các hành động do hệ thống cung cấp, bao gồm cả hành động đổi tên, trong tiêu đề của navigationItemMenuProvider dưới dạng một mảng các UIMenuElements được đề xuất.

Để đưa chúng vào menu tiêu đề của chúng tôi, chúng tôi sẽ chỉ thêm chúng vào menu trẻ em được trả lại.

Ngoài các hành động được hệ thống sửa chữa, chúng ta có thể thêm các hành động hoàn toàn tùy chỉnh hoặc thậm chí toàn bộ hệ thống phân cấp menu.

Ở đây tôi đã thêm một menu con Xuất với xuất dưới dạng các hành động phụ HTML và PDF.

Và với điều đó, nhấn vào chế độ xem tiêu đề bây giờ sẽ hiển thị một menu với tiêu đề tài liệu và tất cả các hành động chúng tôi vừa thêm vào.

Và khi tôi chọn đổi tên, giao diện người dùng đổi tên tích hợp được kích hoạt và tôi có thể đổi tên tài liệu.

Bây giờ chúng tôi đã bắt đầu thiết lập cấu trúc cơ sở cho ứng dụng của mình, đây là thời điểm tốt để kiểm tra xem mọi thứ trông như thế nào khi chúng tôi xây dựng ứng dụng của mình với chất xúc tác Mac.

Khi chúng tôi chạy ứng dụng trên máy Mac, chúng tôi sẽ thấy rằng kiểu trình chỉnh sửa với tiêu đề được căn chỉnh hàng đầu của nó đã được dịch tốt.

Hành động ngược lại của chúng tôi cũng đã được thực hiện và khi được nhấp vào, sẽ hiển thị trình duyệt tệp.

Hệ thống cung cấp các hành động và chức năng đổi tên được tự động xuất hiện trong menu Tệp của ứng dụng.

Lưu ý rằng titleMenuProvider không được gọi trên Mac Catalyst, vì vậy các hành động tùy chỉnh của chúng tôi không được bao gồm trong menu Tệp.

Để hiển thị những hành động này, chúng ta sẽ cần thêm chúng vào menu chính của ứng dụng theo cách thủ công bằng cách sử dụng UIMenuSystem chính.

Được rồi, hãy tiếp tục quá trình hiện đại hóa của chúng ta.

Chúng tôi sẽ tiếp tục kiểm tra trên Mac khi chúng tôi đạt được tiến bộ hướng tới mục tiêu của mình.

Hãy xem xét các cơ hội được cung cấp bởi khu vực trung tâm của quán bar.

Phiên bản iOS 15 của ứng dụng có một menu chứa một số điều khiển và công cụ phụ.

Với các mục trung tâm, chúng tôi có thể làm cho những công cụ này dễ khám phá hơn.

Vì khu vực trung tâm có thể tùy chỉnh, chúng tôi có thể bao gồm một bộ điều khiển lớn mà không phải lo lắng về việc lấp đầy giao diện người dùng bằng những điều khiển ít được sử dụng hơn.

Mỗi người có thể điều chỉnh nội dung của thanh để phù hợp với quy trình làm việc của họ.

Bước đầu tiên trong việc cho phép tùy chỉnh là chỉ định một Mã định danh tùy chỉnh trên mục điều hướng.

Tiếp theo, chúng ta sẽ xác định các mục trung tâm là UIBarButtonItemGroups.

Nhóm là một khái niệm hiện có đã được mở rộng sang UINavigationBar và được nâng cao để hỗ trợ tùy chỉnh trong iOS 16.

Ảnh chụp màn hình này hiển thị tập hợp các mục trung tâm mà chúng tôi muốn hiển thị theo mặc định.

Nút cuộn đồng bộ hóa ở bên trái cung cấp một chức năng quan trọng mà không thể truy cập được bằng bất kỳ phương tiện nào khác, vì vậy thật hợp lý khi đặt nó vào một nhóm cố định bằng cách sử dụng hàm creatingFixedGroup() mới của UIBarButtonItem.

Các nhóm cố định không thể tùy chỉnh và người dùng không thể di chuyển được.

Mặt khác, nút thêm liên kết không cung cấp chức năng quan trọng và nhiệm vụ tương tự có thể đạt được bằng cách nhập các thẻ liên kết trong trình chỉnh sửa, vì vậy chúng tôi sẽ sử dụng creatingOptionalGroup để tạo một mục hoàn toàn có thể tùy chỉnh.

Và chúng tôi sẽ cung cấp cho nó một Mã định danh tùy chỉnh duy nhất để việc tùy chỉnh được duy trì trong suốt quá trình khởi chạy ứng dụng.

Chúng tôi sẽ làm theo một quy trình tương tự để xác định các mục còn lại trong bộ mặc định, sau đó chuyển sang các mục ưu tiên thấp hơn mà không cần phải có sẵn theo mặc định.

Một mục như vậy là nhóm định dạng văn bản, bao gồm các mục in đậm, in nghiêng và gạch chân.

Nó không đủ quan trọng để hiển thị theo mặc định, nhưng chúng tôi muốn nó trong cửa sổ bật lên tùy chỉnh để nó có thể được kéo vào thanh.

Để đạt được điều này, chúng tôi sẽ sử dụng trình khởi tạo nhóm tùy chọn của UIBarButtonItemGroup với isInDefaultCustomization được đặt thành false.

Chúng tôi cũng sẽ đảm bảo cung cấp cho nhóm một mục đại diện để nó có tiêu đề trong cửa sổ bật lên và có một đại diện nhỏ gọn mà nó có thể bị thu gọn khi thanh hết dung lượng.

Quay lại iPad, các mục trung tâm mà chúng tôi đã xác định sẽ hiển thị ở giữa thanh.

Nếu tôi nhấp vào nút Thêm mới được thêm vào, một menu sẽ hiển thị với hành động Tùy chỉnh Thanh công cụ.

Và nếu tôi nhấp vào đó, chế độ tùy chỉnh sẽ được kích hoạt.

Nút cuộn đồng bộ mà chúng tôi đánh dấu là cố định được nhấn mạnh và tĩnh, trong khi tất cả các mục khác nâng và lắc để cho thấy rằng chúng có thể tùy chỉnh.

Các mục tùy chọn như nhóm Định dạng hiển thị trong cửa sổ bật lên và có thể được kéo vào thanh.

Khi chúng tôi chạy ứng dụng trên máy Mac, chúng tôi thấy rằng các mục trung tâm đã được chuyển đổi thành các nút thanh công cụ macOS hoàn toàn có thể tùy chỉnh.

Trước khi chúng ta tiếp tục, chúng ta hãy quay lại iPad trong một phút và thay đổi kích thước ứng dụng.

Bây giờ chúng ta có ít không gian hơn trên thanh công cụ, các mục trung tâm không còn hiển thị nữa.

UIKit tự động xử lý việc hiển thị và ẩn các mục trung tâm để đáp ứng với không gian có sẵn.

Bất kỳ mục nào không vừa đều được hiển thị trong menu tràn.

Các mục nút thanh tiêu chuẩn được tự động chuyển đổi thành biểu diễn menu của chúng, nhưng chúng tôi cũng có thể cung cấp biểu diễn menu tùy chỉnh nếu chúng tôi muốn.

Vì UIKit không có cái nhìn sâu sắc về mục đích của một mục xem tùy chỉnh, mục thanh trượt của chúng tôi không được dịch tự động.

Chúng ta sẽ cần chỉ định thủ công một biểu diễn menu.

Đây là mục thanh trượt của chúng tôi.

Đó là một mục nút thanh đơn với chế độ xem tùy chỉnh, được gói trong một nhóm nút thanh tùy chọn.

Để cung cấp chức năng cốt lõi của thanh trượt, chúng tôi sẽ xác định biểu diễn menu dưới dạng UIMenu với các hành động Giảm, Đặt lại và Tăng.

Sử dụng thuộc tính ElementSize ưa thích mới của UIMenu, chúng tôi có thể cung cấp cho menu một diện mạo cạnh nhau nhỏ gọn hơn.

Và sử dụng thuộc tính keepsMenuPresented mới, chúng ta có thể giữ menu được trình bày sau mỗi hành động được thực hiện, cho phép thay đổi kích thước phông chữ nhiều lần mà không bỏ qua và trình bày lại menu.

Hãy chạy lại cái này trên iPad.

Bây giờ khi chúng tôi đưa lên menu tràn, thanh trượt xuất hiện dưới dạng menu nội tuyến với ba hành động cạnh nhau, bao gồm đầy đủ chức năng của thanh trượt.

Vì kích thước phần tử nhỏ không tồn tại trên Mac, các hành động sẽ xuất hiện dưới dạng các mục menu macOS tiêu chuẩn.

Và đó là nó cho tổ chức giao diện người dùng và tùy chỉnh.

Tiếp theo, hãy xem xét tăng tốc một số quy trình làm việc trong ứng dụng bằng cách sử dụng chế độ xem bộ sưu tập mới và API menu.

Ứng dụng của chúng tôi có một thanh bên mục lục có thể được sử dụng để nhanh chóng điều hướng tài liệu hoặc thực hiện hành động trên các thẻ cấp cao nhất.

Trước iOS 16, việc thêm khả năng chỉnh sửa nhiều mục có thể có nghĩa là triển khai một chế độ chỉnh sửa riêng biệt, với các hành động hàng loạt được chuyển xuống các nút trên thanh công cụ.

iOS 16 giới thiệu một thiết kế mới cho các menu nhiều mục với một nhóm các mục truyền đạt rõ ràng những mục mà menu ảnh hưởng và cung cấp sự chuyển đổi trực tiếp sang kéo nhiều mục.

Trong ứng dụng iPad cấp máy tính để bàn, thiết kế menu mới này được kết hợp tốt nhất với kiểu lựa chọn trọng lượng nhẹ hơn.

"Nhẹ" ở đây có nghĩa là chọn nhiều mục mà không cần chuyển chế độ xem bộ sưu tập vào chế độ chỉnh sửa hoặc thực hiện các thay đổi đáng kể đối với giao diện người dùng của ứng dụng.

Chúng ta có thể đạt được điều này và cho phép lấy nét bàn phím bằng cách sử dụng API hiện có.

Đầu tiên, chúng tôi sẽ đặt allowsMultipleSelection thành true.

Sau đó, chúng tôi sẽ bật lấy nét bàn phím bằng cách đặt allowsFocus thành true.

Và chúng tôi sẽ cho phép tập trung thúc đẩy lựa chọn bằng cách đặt selectionFollowsFocus thành true.

Nếu chúng tôi chạy cái này trên iPad của mình, chúng tôi ngay lập tức nhận thấy rằng khi mỗi mục được thêm vào lựa chọn, nó vẫn kích hoạt hành động lựa chọn của nó, khiến chế độ xem trình chỉnh sửa cuộn.

Hãy quay lại mã của chúng tôi và tìm hiểu xem chuyện gì đang xảy ra.

Nó đây rồi!

Mã trong didSelectItemAtIndexPath cố gắng không cho phép cuộn trong khi ở chế độ chỉnh sửa bằng cách kiểm tra thuộc tính isEditing của collectionView.

Bây giờ chúng tôi cho phép nhiều lựa chọn bên ngoài chế độ chỉnh sửa, mã này chạy cho mọi lựa chọn.

Chúng ta có thể khắc phục điều này bằng cách sử dụng phương pháp UICollectionViewDelegate mới.

Chúng tôi sẽ triển khai performPrimaryActionForItemAtIndexPath và chỉ cần di chuyển mã cuộn của chúng tôi sang chức năng mới này.

Vì chức năng này chỉ được gọi khi một mục duy nhất được nhấn và chế độ xem bộ sưu tập không chỉnh sửa, chúng tôi không còn cần kiểm tra chế độ chỉnh sửa nữa.

Và vì chúng tôi không có bất kỳ hành vi liên quan đến lựa chọn nào, chúng tôi có thể xóa việc triển khai mục đã chọn tại indexPath.

Quay lại iPad, chọn nhiều mục không còn cuộn đến văn bản tương ứng trong chế độ xem trình chỉnh sửa.

Sau khi hoàn thành, hãy thực sự thêm hỗ trợ cho menu.

Trong iPadOS 16, phương thức menu một mục hiện có của UICollectionViewDelegate bị phản đối.

Sự thay thế của nó hỗ trợ hiển thị các menu cho bất kỳ nơi nào từ 0 đến nhiều mục.

Số lượng mục trong mảng indexPaths đã cho phụ thuộc vào số lượng mục được chọn và nơi menu được gọi.

Nếu mảng trống, thì menu đã được gọi trong khoảng trống giữa các ô.

Nếu nó có một indexPath duy nhất, thì nó đã được gọi trên một mục bị bỏ chọn hoặc là mục được chọn duy nhất.

Nếu nó có nhiều hơn một mục, thì menu đã được gọi trên một mục là một phần của nhiều lựa chọn.

Nếu tôi quay lại iPad, chọn lại bốn mục hàng đầu và nhấp hai ngón tay vào một trong các mục đã chọn, một menu nhiều mục mới sẽ xuất hiện.

Khi tôi làm điều tương tự trên máy Mac, một chiếc nhẫn được vẽ xung quanh các ô đã chọn để làm nổi bật chúng.

Với các menu nhiều mục đã hoàn thành, hãy xem xét nâng cao trải nghiệm chỉnh sửa văn bản bằng cách sử dụng các tính năng menu Tìm và Thay thế và chỉnh sửa mới.

Ứng dụng của chúng tôi sử dụng UITextView cho trình chỉnh sửa của nó và không yêu cầu bất kỳ hành vi Tìm và Thay thế tùy chỉnh nào, vì vậy tất cả những gì chúng tôi cần làm để bật chức năng hệ thống mặc định là đặt thuộc tính isFindInteractionEnabled của chế độ xem văn bản thành true.

Với bộ đó, nhấn Command+F trong khi chỉnh sửa văn bản sẽ hiển thị giao diện người dùng Tìm và Thay thế.

Thêm các hành động tùy chỉnh vào menu chỉnh sửa của chế độ xem văn bản không mất nhiều thời gian và có thể kích hoạt một số tính năng chỉnh sửa nhanh tuyệt vời.

Chúng tôi sẽ chỉ triển khai trình đơn chỉnh sửa phương thức UITextViewDelegate mới cho văn bản trong phạm vi các hành động được đề xuất.

Trong quá trình triển khai, chúng ta có thể xây dựng và trả về một UIMenu kết hợp các hành động tùy chỉnh, như hành động Ẩn này, với menu hệ thống.

Và đây là kết quả. Khi tôi chọn một số văn bản và hiển thị menu chỉnh sửa, cả hành động tùy chỉnh của chúng tôi và các hành động do hệ thống cung cấp đều được hiển thị.

Để biết thêm thông tin về Tìm và Thay thế và menu chỉnh sửa, hãy xem "Nhận tương tác chỉnh sửa lớp máy tính để bàn." Và thế là xong!

Với một vài thay đổi này, chúng tôi đã thực hiện một số bước cơ bản tuyệt vời để tạo ra lớp ứng dụng máy tính để bàn của mình và dịch nó liền mạch sang Mac.

Sử dụng các API được cung cấp trong iPadOS 16 để thực hiện ứng dụng của riêng bạn thông qua một quy trình tương tự.

Bắt đầu bằng cách chọn một kiểu điều hướng phù hợp với ứng dụng của bạn.

Tăng cường quy trình làm việc của tài liệu với các thuộc tính tài liệu và menu tiêu đề.

Và bề mặt chức năng quan trọng và cung cấp khả năng tùy chỉnh với các mục trung tâm.

Cho phép hành động nhanh chóng trên nhiều mục với các menu nhiều mục.

Và nâng cao trải nghiệm chỉnh sửa văn bản của ứng dụng của bạn bằng cách sử dụng Tìm và Thay thế và menu chỉnh sửa mới.

Cho dù bạn đang xây dựng một ứng dụng mới hay cập nhật một ứng dụng hiện có, tôi nóng lòng muốn sử dụng các ứng dụng bạn xây dựng với những công cụ mới này.

Cảm ơn vì đã xem.