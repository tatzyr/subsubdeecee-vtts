10071

Andy: Xin chào.

Chào mừng đến với "Áp dụng các tương tác chỉnh sửa lớp máy tính để bàn."

Tôi là Andy, một kỹ sư khung UIKit, và tôi sẽ được tham gia sau bởi đồng nghiệp của tôi, James.

IPad liên tục phát triển, mà không ảnh hưởng đến các tương tác khiến nó trở nên đơn giản và dễ sử dụng.

Trong video này, bạn sẽ tìm hiểu về các tương tác chỉnh sửa mới thú vị sẽ biến ứng dụng của bạn thành lớp máy tính để bàn hơn.

Đầu tiên, tôi sẽ xem qua các menu chỉnh sửa mới, đã nhận được một sự đổi mới lớn trong iOS 16.

Sau đó, James sẽ đi sâu vào trải nghiệm tìm và thay thế hệ thống mới.

Trong iOS 16, menu chỉnh sửa có thiết kế hoàn toàn mới vẫn quen thuộc nhưng tương tác nhiều hơn và dễ khám phá các hành động hơn.

Trình đơn chỉnh sửa hiện có các bài thuyết trình thay thế dựa trên phương pháp nhập được sử dụng.

Đối với các tương tác cảm ứng, menu chỉnh sửa vẫn có giao diện nhỏ gọn quen thuộc, nhưng với hành vi phân trang được cải thiện, cho phép các hành động dễ khám phá hơn trước.

Với Bàn phím ma thuật hoặc bàn di chuột, một menu ngữ cảnh được trình bày ở nhấp chuột thứ cấp hoặc nhấp chuột phải để có thêm trải nghiệm lớp học trên máy tính để bàn.

Tương tự, tương tác cảm ứng trên iPhone sẽ hiển thị menu chỉnh sửa mới.

Và đối với các ứng dụng Mac Catalyst, các menu ngữ cảnh mà người dùng Mac quen thuộc được trình bày.

Trong iOS 16, menu chỉnh sửa văn bản có sức mạnh lớn với tích hợp máy dò dữ liệu mới.

Điều này bao gồm chuyển đổi đơn vị nội tuyến và tiền tệ, cũng như tra cứu thông minh hiển thị các hành động theo ngữ cảnh tùy thuộc vào văn bản đã chọn.

Ví dụ: nếu bạn chọn một địa chỉ trong Safari, bạn sẽ nhận được các hành động dựa trên Bản đồ, như "Nhận chỉ đường" hoặc "Mở trong Bản đồ", trên đầu các hành động menu chỉnh sửa hiện có.

Phần tốt nhất là, không cần nhận con nuôi!

Các tính năng này có sẵn trong mọi menu chỉnh sửa văn bản, bao gồm chế độ xem tương tác văn bản, WebKit và Safari, cũng như PDFKit.

Để chèn các hành động vào menu của chế độ xem văn bản, hãy triển khai phương thức TextViewDelegate mới để tùy chỉnh menu được hiển thị cho văn bản trong phạm vi đã cho với các hành động do hệ thống cung cấp.

Nếu bạn không cần tùy chỉnh bất cứ thứ gì, hãy quay lại số không để có được menu hệ thống tiêu chuẩn.

Cũng có các phương pháp tương tự trên UITextFieldDelegate và UITextInput để tùy chỉnh menu ở đó.

Xin lưu ý rằng việc chèn các mục menu bằng UIMenuController hiện không được chấp nhận trong iOS 16 và thay vào đó bạn nên chuyển sang sử dụng các phương pháp mới để thêm các phần tử menu vào menu chỉnh sửa văn bản của mình, bởi vì nơi chúng tôi sẽ đến, chúng tôi không cần bộ điều khiển menu!

Đây là một ví dụ về chế độ xem văn bản với một số hành động tùy chỉnh.

Khi một menu được trình bày trên một số lựa chọn văn bản, một hành động "Highlight" và "Insert Photo" tùy chỉnh được hiển thị sau các hành động được đề xuất của hệ thống.

Chọn hành động tô sáng thực hiện tô sáng trên văn bản như mong đợi.

Tiếp theo, khi menu được trình bày mà không có bất kỳ lựa chọn văn bản nào mà không có gì để làm nổi bật, menu chỉ hiển thị hành động "Chèn ảnh" sau các hành động được đề xuất của hệ thống.

Tôi sẽ chỉ cho bạn cách thêm những hành động này bằng API mới.

Để chèn các hành động vào menu một cách linh hoạt trên bản trình bày, hãy triển khai phương thức UITextViewDelegate textView editMenuForTextIn range suggestedActions Trong ví dụ này, tôi chỉ muốn thêm hành động "Highlight" khi có văn bản được chọn, vì vậy tôi có thể thêm hành động thông qua phương pháp này.

Hành động "Chèn ảnh" luôn hợp lệ, vì vậy tôi có thể thêm nó vào mảng để luôn hiển thị hành động trong menu.

Cuối cùng, tôi sẽ thêm các hành động của mình vào các hành động được đề xuất của hệ thống, bao gồm các mục như Cắt, Sao chép và Dán, và trả lại menu.

Và thế là xong!

UIEditMenuInteraction là UIInteraction API cung cấp năng lượng cho menu chỉnh sửa mới.

Sự tương tác cho phép bạn trình bày theo chương trình menu chỉnh sửa nhẹ bên ngoài chế độ xem văn bản dựa trên cử chỉ của riêng bạn và có hỗ trợ gốc để trình bày menu ngữ cảnh khi nhấp chuột thứ cấp.

Trong iOS 16, UIMenuController và tất cả các API liên quan của nó được thay thế bằng tương tác menu chỉnh sửa mới.

Để trình bày một menu chỉnh sửa từ đầu, trước tiên, hãy tạo tương tác và thêm nó vào chế độ xem.

Tiếp theo, cấu hình một trình nhận dạng cử chỉ để trình bày menu từ đó.

Để đảm bảo rằng menu chỉ xuất hiện khi chạm trực tiếp chứ không phải từ các lần nhấp chuột vào con trỏ gián tiếp, hãy đảm bảo đặt thuộc tính allowedTouchTypes của bộ nhận dạng cử chỉ chỉ là chạm trực tiếp.

Sau đó, thêm công cụ nhận dạng cử chỉ vào chế độ xem.

Cuối cùng, khi bộ nhận dạng cử chỉ kích hoạt, hãy xác định xem có nội dung nào ở vị trí của cử chỉ có thể hiển thị menu hay không.

Sau đó, tạo một cấu hình menu chỉnh sửa với một điểm nguồn tại vị trí của cử chỉ.

Điểm nguồn được sử dụng để xác định các hành động có thể thực hiện được trong chế độ xem tương tác để hiển thị trong menu.

Sau khi cấu hình, hãy gọi presentEditMenu (với: cấu hình) để hiển thị menu.

Khi tôi nhấp chuột phải vào bất kỳ đâu trong "Jello there!" đã chọn. Xem, một trình đơn ngữ cảnh được trình bày với các hành động hệ thống có thể thực hiện được cho nội dung của ứng dụng.

Thậm chí nhiều hơn, khi tôi nhấn vào chế độ xem đã chọn, menu chỉnh sửa được hiển thị nơi chạm của tôi xảy ra, hiển thị các hành động tương tự như menu ngữ cảnh.

Điều này tốt, nhưng nó có thể tốt hơn.

Mặc dù thật tuyệt khi menu xuất hiện ở nơi chạm vào xảy ra, nhưng nó thực sự đang chặn nội dung của chế độ xem đã chọn.

Hơn nữa, tôi muốn chèn một hành động "Sao chép" mới vào menu, đây không phải là hành động mặc định của hệ thống.

Hãy quay lại và thay đổi điều này.

Để hiển thị menu xung quanh chế độ xem đã chọn, hãy triển khai phương thức đại diện editMenuInteraction targetRectFor cấu hình Phương thức này trả về một CGRect được sử dụng để xác định nơi trình bày menu và nằm trong không gian tọa độ của chế độ xem tương tác.

Nếu phương thức không được triển khai hoặc một CGRect rỗng được cung cấp, menu sẽ được trình bày từ điểm nguồn của cấu hình.

Trong trường hợp này, để ngăn menu không bao gồm chế độ xem đã chọn, hãy trả lại khung của nó.

Tiếp theo, để thêm hành động "Sao chép", hãy triển khai menu editMenuInteraction để cấu hình các hành động được đề xuất và thêm hành động tùy chỉnh sau các hành động được đề xuất của hệ thống, tương tự như cách bạn sẽ chèn các hành động vào menu của chế độ xem văn bản trước đó.

Bây giờ, khi tôi nhấn lại vào chế độ xem đã chọn, menu không còn ẩn "Jello there!" Và thay vào đó là những món quà xung quanh nó.

Hành động "Sao chép" mới cũng được bao gồm khi menu được trình bày, tất cả chỉ với một vài dòng mã.

Tuyệt vời!

Đối với các ứng dụng Mac Catalyst, menu chỉnh sửa kết nối với các menu ngữ cảnh quen thuộc mà người dùng mong đợi trên Mac khi họ nhấp chuột phải vào chế độ xem của tương tác.

Đối với các ứng dụng Mac Catalyst thành ngữ iPad, các menu chỉnh sửa được trình bày theo chương trình cũng kết nối với các menu ngữ cảnh.

Xin lưu ý rằng trình bày có lập trình của menu chỉnh sửa không được hỗ trợ cho các ứng dụng thành ngữ Mac.

Để cung cấp cầu nối liền mạch giữa các phong cách trình bày khác nhau, UIEditMenuInteraction được xây dựng dựa trên dòng API UIMenuElement.

Những thứ này cung cấp tính linh hoạt và khả năng tùy biến hơn trước, bao gồm hỗ trợ cho các menu con và hình ảnh.

Nếu đây là lần đầu tiên bạn sử dụng UIMenus, hãy xem "Hiện đại hóa giao diện người dùng của bạn cho iOS 13" để tìm hiểu thêm về các menu và hành động.

Xây dựng trên UIMenuElement cũng có nghĩa là menu chỉnh sửa có quyền truy cập vào nhiều API khác nhau, như UIMenuSystem, đã hỗ trợ các menu.

Trình đơn chỉnh sửa sử dụng hệ thống UIMenuSystem.context hiện có để xây dựng các menu của nó.

Để tìm hiểu thêm về trình tạo menu, cũng như tìm hiểu sâu hơn về việc duyệt chuỗi phản hồi và xác thực lệnh, hãy xem "Đưa các ứng dụng iPad của bạn lên một tầm cao mới".

Nói về menu, có một số cải tiến mới cho UIMenu trong iOS 16.

UIMenu hiện có thuộc tính kích thước phần tử ưa thích cho phép bạn chọn giữa các bố cục khác nhau trong menu ngữ cảnh.

Kích thước nhỏ mang lại cho menu vẻ ngoài cạnh nhau nhỏ gọn hơn, phù hợp với nhiều hành động hơn trong một hàng duy nhất.

Kích thước trung bình cũng hiển thị các hành động ở giao diện song song nhưng chi tiết hơn một chút.

Điều này được sử dụng bởi menu chỉnh sửa văn bản để hiển thị menu chỉnh sửa tiêu chuẩn.

Và cuối cùng, kích thước phần tử lớn mang lại cho menu giao diện mặc định, toàn chiều rộng.

Ngoài ra, có một thuộc tính .keepsMenuPresented mới trên UIMenuElement để giữ các menu được trình bày sau khi một hành động được thực hiện.

Sử dụng thuộc tính này để cho phép các hành động được thực hiện nhiều lần mà không cần trình bày lại menu.

Đó chỉ là phần nổi của tảng băng trôi cho menu chỉnh sửa mới.

Mở rộng chức năng chỉnh sửa văn bản bằng cách tùy chỉnh menu chỉnh sửa văn bản.

Đảm bảo rằng hành động của bạn có tiêu đề và hình ảnh để các menu trông hoàn chỉnh theo các phong cách trình bày khác nhau.

Quan trọng nhất, áp dụng UIEditMenuInteraction mới để có khả năng tùy chỉnh tốt hơn và cải thiện tính nhất quán trên các nền tảng và các phương thức đầu vào khác nhau.

Thêm hỗ trợ cho menu chỉnh sửa mới là bước đầu tiên tuyệt vời.

Để hoàn thành trải nghiệm chỉnh sửa lớp học máy tính để bàn, tôi sẽ giao nó cho James để nói về trải nghiệm tìm và thay thế hệ thống mới.

James Magahern: À, đây rồi!

Xin chào, tôi là James Magahern, một kỹ sư UIKit, và tôi ở đây để nói về việc tìm và thay thế.

Mới trong iOS 16, chúng tôi đã giới thiệu một thành phần giao diện người dùng mới để tìm và thay thế văn bản trong ứng dụng.

Nó là tiêu chuẩn trên toàn hệ thống và được bao gồm trong nhiều ứng dụng tích hợp sẵn và cho phép người dùng của bạn linh hoạt bộ nhớ cơ bắp của họ với các phím tắt chỉnh sửa được sử dụng phổ biến hơn.

Đây là bảng tìm kiếm mới đang chạy trên iPad.

Chúng tôi sẽ tự động chuyển đổi từ nội tuyến nổi với thanh phím tắt khi gắn bàn phím phần cứng, sang đặt trên bàn phím phần mềm khi được sử dụng mà không có bàn phím phần cứng.

Trên iPhone, chúng tôi sẽ thích ứng với kích thước màn hình nhỏ hơn bằng cách sử dụng bố cục nhỏ gọn hơn.

Hệ thống tự động loại bỏ, giảm thiểu và tránh bàn phím.

Khi chạy ứng dụng của bạn trên máy Mac, chúng tôi sẽ trình bày bảng tìm nội tuyến nội dung của bạn, hoạt động giống như thanh tìm AppKit và sử dụng bố cục quen thuộc mà người dùng mong đợi trên Mac.

Nếu bạn đang sử dụng UITextView, WKWebView hoặc PDFViews để hiển thị nội dung văn bản trong ứng dụng của mình, tất cả những gì bạn cần làm để bắt đầu được đặt là FindInteractionEnabled thành true trên tương tác tìm kiếm tích hợp sẵn.

Thật đơn giản!

Ngoài ra, nếu bạn đang sử dụng QuickLook để hiển thị nội dung văn bản, nội dung này sẽ có sẵn mà không cần bất kỳ tác phẩm nào từ bạn.

Với bàn phím phần cứng, tất cả các phím tắt hệ thống tiêu chuẩn như command+F for find, command+G for find next, command+shift+G for find previous, v.v., sẽ hoạt động như mong đợi.

Quyền truy cập vào các lệnh này có sẵn thông qua thanh menu khi chạy trên máy Mac.

Tất cả những gì bạn cần làm là đảm bảo chế độ xem hiển thị nội dung có thể và thực sự trở thành phản hồi đầu tiên.

Đối với những người dùng không sử dụng bàn phím phần cứng, bạn có thể gọi tương tác tìm kiếm theo chương trình thông qua presentFindNavigator, trên thuộc tính tìm tương tác đi kèm.

Ví dụ, có thể là một ý tưởng tốt để làm cho điều này có sẵn thông qua một mục thanh điều hướng.

Khi chạy trên máy Mac, có một vài điều khác cần ghi nhớ.

Ví dụ, trên iOS, bảng tìm được trình bày như một phần của bàn phím phần mềm hoặc thanh phím tắt.

Trên Mac, chúng tôi sẽ hiển thị nó phù hợp với nội dung của bạn.

Nếu bạn đang cài đặt tương tác tìm kiếm trên chế độ xem cuộn, chúng tôi sẽ tự động điều chỉnh nội dung chèn để phù hợp với bảng tìm và tự động điều chỉnh các thay đổi của bộ sưu tập đặc điểm.

Nếu không, bạn nên đảm bảo rằng có đủ chỗ để lưu trữ bảng tìm kiếm trong giao diện người dùng của bạn trên macOS.

Ngoài ra, chúng tôi sẽ hiển thị một menu chứa một bộ tùy chọn tìm tiêu chuẩn có sẵn khi nhấn vào biểu tượng kính lúp.

Bạn có thể tùy chỉnh nội dung của menu này bằng cách sử dụng thuộc tính optionsMenuProvider trên UIFindInteraction.

Điều này sẽ quan trọng hơn với việc triển khai tùy chỉnh.

Và đó là tất cả những gì cần thiết nếu bạn đang sử dụng một trong những chế độ xem tích hợp mà tôi đã đề cập trước đó.

Nếu ứng dụng của bạn đang hiển thị nội dung văn bản bằng các phương tiện khác, như chế độ xem hoàn toàn tùy chỉnh hoặc một cái gì đó giống như chế độ xem danh sách, được hiển thị ở đây, bạn vẫn có thể thêm tương tác tìm kiếm vào ứng dụng của mình.

Để tôi chỉ cho bạn cách làm.

Tin tốt về tương tác tìm kiếm là bạn có thể cài đặt nó trên bất kỳ chế độ xem tùy ý nào.

Nếu bạn có triển khai tìm và thay thế hiện có trong ứng dụng của mình, bạn có thể kết nối với UIFindInteraction và tận dụng giao diện người dùng của hệ thống.

Nếu bạn chưa có triển khai tìm kiếm hiện có cho chế độ xem tùy chỉnh của mình, việc bắt đầu vẫn cực kỳ dễ dàng, đặc biệt nếu bạn đã triển khai giao thức UITextInput để hoạt động với bàn phím hệ thống.

Đây là cách UIFindInteraction hoạt động với các chế độ xem tùy chỉnh.

Sau khi cài đặt UIFindInteraction trên chế độ xem tùy chỉnh của bạn, hãy thiết lập một đại diện tương tác tìm kiếm.

Đại diện tương tác tìm kiếm, ngoài việc được thông báo về thời điểm phiên tìm kiếm bắt đầu hoặc kết thúc, còn chịu trách nhiệm xử lý UIFindSessions.

UIFindSession là một lớp cơ sở trừu tượng đóng gói tất cả trạng thái cho một phiên nhất định, chẳng hạn như kết quả được đánh dấu hiện tại.

Nó cũng phục vụ tất cả các hành động được yêu cầu từ giao diện người dùng, chẳng hạn như "đi đến kết quả tiếp theo" hoặc "tìm kiếm chuỗi này".

Nếu bạn muốn tự mình quản lý tất cả trạng thái này, bạn có thể chọn phân loại một lớp con của UIFindSession từ đại diện tương tác tìm kiếm của mình.

Đây là một lựa chọn tốt nếu bạn đã có triển khai tìm và thay thế hiện có trong ứng dụng của mình và muốn kết nối nó với giao diện người dùng hệ thống.

Nếu không, sẽ tốt hơn nhiều nếu để hệ thống chăm sóc trạng thái cho bạn và thay vào đó áp dụng giao thức UITextSearching trên bất kỳ lớp nào gói gọn nội dung của tài liệu đang được hiển thị.

Để làm điều này, bạn sẽ trả về một UITextSearchingFindSession và kết nối nó với lớp tài liệu của bạn.

Đây là lựa chọn tốt nhất nếu bạn chưa triển khai tìm kiếm cho chế độ xem tùy chỉnh của mình.

Đây là cách để làm điều này trong mã.

Ví dụ này có một lớp tài liệu tùy chỉnh và một chế độ xem tùy chỉnh hiển thị tài liệu này.

UIFindInteraction sẽ được cài đặt trên chế độ xem này và UITextSearchingFindSession sẽ được cung cấp cùng với tài liệu này dưới dạng "đối tượng có thể tìm kiếm".

Đảm bảo rằng bộ điều khiển chế độ xem hoặc chế độ xem tùy chỉnh của bạn có thể trở thành phản hồi đầu tiên để các phím tắt hoạt động như mong đợi.

Tạo tương tác tìm kiếm và cung cấp một đại diện phiên để xử lý các phiên tìm kiếm.

Ở đây, bộ điều khiển chế độ xem là đại diện phiên.

Sau đó, khi được yêu cầu tìm phiên tìm kiếm bằng tương tác, chỉ cần trả lại một UITextSearchingFindSession mới cung cấp tài liệu của bạn dưới dạng đối tượng có thể tìm kiếm được.

Tất nhiên bạn sẽ cần đảm bảo rằng lớp tài liệu của bạn phù hợp với giao thức UITextSearching.

Lớp triển khai giao thức UITextSearching chịu trách nhiệm thực sự tìm kiếm văn bản trong tài liệu của bạn.

Hệ thống sẽ gọi performTextSearch và đưa cho bạn một đối tượng tổng hợp mà bạn có thể cung cấp kết quả.

Trình tổng hợp hoạt động với UITextRange để thể hiện kết quả trong tài liệu của bạn.

Đây là một lớp trừu tượng khác mà bạn có thể sử dụng để gói gọn bất kỳ dữ liệu nào có ý nghĩa đối với cách bạn lưu trữ văn bản.

Ví dụ, điều này có thể đại diện cho phạm vi DOM cho các khách hàng sử dụng WebKit để hiển thị văn bản.

Trình tổng hợp cũng an toàn với luồng, vì vậy bạn có thể cung cấp kết quả trên luồng nền.

Cuối cùng, vì tương tác tìm kiếm không biết cách hiển thị kết quả bằng chế độ xem tùy chỉnh của bạn, bạn cũng sẽ cần trang trí kết quả cho một kiểu nhất định khi decorate() được gọi.

Phiên tìm kiếm UITextSearching và giao thức cũng hỗ trợ ghép kênh trên nhiều tài liệu hiển thị bằng cách sử dụng cùng một tương tác.

Nói cách khác, nếu ứng dụng của bạn hiển thị nội dung theo cách tương tự như chế độ xem hội thoại của Mail, trong đó mỗi "tài liệu" trong trường hợp đó là một tin nhắn thư, bạn có thể cài đặt một tương tác tìm kiếm duy nhất trên chế độ xem bộ sưu tập cấp gốc và thực hiện tìm kiếm trên tất cả các tài liệu cùng một lúc,

Vì vậy, đó là tất cả những gì cần thiết để bắt đầu với tương tác tìm kiếm mới trong iOS 16.

Đối với các chế độ xem hệ thống hiển thị nhiều nội dung văn bản, hãy đảm bảo bật isFindInteractionEnabled.

Di chuyển triển khai tìm kiếm hiện tại của bạn sang UIFindInteraction.

Triển khai UITextSearching và sử dụng UITextSearchingFindSession nếu bạn chưa có tìm kiếm văn bản trong ứng dụng của mình.

Và cuối cùng, hãy kiểm tra và đảm bảo rằng bạn không có bất kỳ phím tắt xung đột nào trong ứng dụng của mình.

Và đó là những gì cần thiết để làm mới các tương tác chỉnh sửa ứng dụng của bạn cho iOS 16 và biến chúng thành lớp máy tính để bàn thực sự.

Hãy thử menu chỉnh sửa văn bản mới trong ứng dụng của bạn và áp dụng tương tác menu chỉnh sửa cho giao diện người dùng tùy chỉnh.

Và tăng năng suất bằng cách làm cho nội dung văn bản của ứng dụng của bạn có thể tìm kiếm được.

Tôi rất mong được tìm thấy những tính năng mới tuyệt vời này trong ứng dụng của bạn.

Cảm ơn vì đã xem! Đảm bảo thích, bình luận và đăng ký.

.