110373

♪ ♪

Souvik Banerjee: Xin chào, và chào mừng đến với "Mang tài xế của bạn đến iPad với DriverKit."

Tôi là Souvik, và hôm nay tôi sẽ thảo luận về một số phát triển mới thú vị trong DriverKit.

Hôm nay chúng ta sẽ thảo luận về ba chủ đề.

Đầu tiên, tôi sẽ đưa ra một cái nhìn tổng quan ngắn gọn về DriverKit.

Sau đó, tôi sẽ thảo luận về một số cập nhật cho AudioDriverKit.

Và tôi sẽ kết thúc với cách đưa trình điều khiển của bạn lên iPad Hãy bắt đầu với một cái nhìn tổng quan.

Vào năm 2019, chúng tôi đã giới thiệu DriverKit, một sự thay thế cho trình điều khiển thiết bị IOKit.

DriverKit đã mang đến một cách mới để mở rộng hệ thống đáng tin cậy và an toàn hơn, chạy trong không gian người dùng.

Và nó dễ phát triển hơn vì quy trình của bạn không nằm trong hạt nhân.

Các tiện ích mở rộng trình điều khiển này, còn được gọi là dexts, được đóng gói trong các ứng dụng và bạn có thể dễ dàng phân phối các ứng dụng và trình điều khiển của mình trên Mac App Store.

Mọi người có thể dễ dàng tìm thấy trình điều khiển của bạn bằng cách tìm kiếm và nếu trình điều khiển của bạn không còn cần thiết nữa, bạn chỉ cần xóa ứng dụng để gỡ cài đặt nó.

Kể từ khi giới thiệu DriverKit, chúng tôi đã thêm hỗ trợ cho nhiều gia đình tài xế mới.

Hiện tại chúng tôi hỗ trợ Mạng, Lưu trữ Khối, Nối tiếp, Âm thanh và bộ điều khiển SCSI và các trình điều khiển ngoại vi ngoài các phương tiện vận chuyển như USB, PCI và HID.

Để tìm hiểu thêm về các loại trình điều khiển bạn có thể xây dựng bằng DriverKit, vui lòng xem phiên "Tạo trình điều khiển âm thanh bằng DriverKit" từ WWDC 2021 và phiên "Hiện đại hóa trình điều khiển PCI và SCSI bằng DriverKit" từ WWDC 2020.

Tiếp theo, chúng tôi đã thêm một số tính năng mới trong AudioDriverKit gần đây mà tôi muốn làm nổi bật.

Một trong những tính năng này là các hoạt động theo thời gian thực.

Chúng tôi rất vui mừng được giới thiệu một tính năng mới trong AudioDriverKit cho phép bạn đăng ký gọi lại theo thời gian thực.

Cuộc gọi lại này được gọi mỗi khi hoạt động IO xảy ra.

Bạn có thể sử dụng cuộc gọi lại này nếu bạn cần sửa đổi bộ đệm âm thanh của mình trên luồng thời gian thực, chẳng hạn như để xử lý tín hiệu.

Để đăng ký cuộc gọi lại theo thời gian thực trong AudioDriverKit, chúng tôi khai báo một khối IOOperationHandler để đặt trên IOUserAudioDevice.

Khối này sẽ được gọi từ ngữ cảnh thời gian thực khi hoạt động IO xảy ra trên bộ đệm IOUserAudioStream cho thiết bị.

Bên trong khối, chúng tôi kiểm tra hoạt động là gì và chúng tôi có thể sửa đổi dữ liệu khi cần thiết.

Cuối cùng, chúng tôi gọi SetIOOperationHandler để đặt khối trên thiết bị âm thanh.

Bây giờ hãy nói về các quyền lợi.

Khi chúng tôi giới thiệu AudioDriverKit, bạn phải sử dụng quyền truy cập cho phép bất kỳ khách hàng nào trên trình điều khiển của mình.

Trong macOS 12.1, chúng tôi đã giới thiệu một quyền mới dành riêng cho AudioDriverKit.

Vui lòng cập nhật trình điều khiển âm thanh của bạn để sử dụng quyền họ âm thanh mới thay vì quyền truy cập cho phép bất kỳ máy khách hàng nào.

Bạn có thể giữ quyền cho phép bất kỳ khách hàng nào nếu bạn muốn bất kỳ ứng dụng nào có thể giao tiếp với tài xế của mình.

Quyền lợi mới này được công khai để phát triển, vì vậy bạn có thể bắt đầu sử dụng nó ngay hôm nay mà không cần gửi yêu cầu.

Trên thực tế, tất cả các quyền lợi của gia đình DriverKit hiện có sẵn để sử dụng để phát triển.

Để yêu cầu quyền phân phối này, vui lòng truy cập trang Mở rộng Hệ thống trên developer.apple.com.

Bây giờ, tôi thực sự vui mừng được nói với bạn về DriverKit trên iPad.

Các chuyên gia đang ngày càng sử dụng iPad để làm tốt nhất công việc của họ.

Nhưng nhiều người dựa vào phần cứng bên ngoài mà họ không thể sử dụng trên iPad.

Vì vậy, hôm nay, chúng tôi vui mừng thông báo rằng DriverKit sẽ đến với iPad.

DriverKit trên macOS đã giúp mở rộng hệ thống một cách an toàn và bảo mật, và chúng tôi đang mang công nghệ tương tự đến iPad.

Trên thực tế, nếu bạn đã tạo một trình điều khiển với DriverKit trên Mac, bạn có thể mang cùng một trình điều khiển đó vào iPad mà không cần bất kỳ thay đổi nào đối với trình điều khiển của bạn.

USB, PCI và Âm thanh sẽ được hỗ trợ trong iPadOS 16.

Điều này sẽ lần đầu tiên kích hoạt giao diện âm thanh Thunderbolt trên iPad và nhiều thiết bị khác.

Điều này có thể thực hiện được với sức mạnh của chip M1.

Tất cả iPad với M1 sẽ hỗ trợ DriverKit.

DriverKit trên iPadOS cũng giống như trên macOS.

Điều này có nghĩa là bạn có thể xây dựng một trình điều khiển DriverKit và để nó hoạt động trên cả hai nền tảng, không cần thay đổi nguồn.

Ngoài ra, sử dụng tính năng ứng dụng đa nền tảng mới trong Xcode 14, bạn có thể dễ dàng tạo một mục tiêu ứng dụng duy nhất để cung cấp trình điều khiển của mình trên cả Mac và iPad.

Để biết thêm thông tin về các ứng dụng đa nền tảng, vui lòng xem phiên "Sử dụng Xcode để phát triển ứng dụng đa nền tảng".

Xcode hiện cũng hỗ trợ ký tự động các trình điều khiển DriverKit.

Nó biết cách xử lý DriverKit trên iPadOS và có thể cung cấp cho cả Mac và iPad.

Bạn không còn cần phải định cấu hình đăng nhập thủ công cho trình điều khiển DriverKit nữa.

Ứng dụng và trình điều khiển iPadOS của bạn có thể được phân phối trên App Store, giống như trên macOS.

Điều này có nghĩa là bạn có thể tận dụng các tính năng như mua hàng trong ứng dụng và người dùng có thể dễ dàng phát hiện ra tài xế của mình.

Hãy xem việc lấy trình điều khiển và ứng dụng macOS hiện có và mang nó lên iPad dễ dàng như thế nào.

Ở đây, tôi có một ứng dụng tên là DriverKitSampleApp.

Nó có chế độ xem SwiftUI với nhãn và nút cho phép người dùng cài đặt trình điều khiển.

Tài xế của chúng tôi tên là NullDriver.

Nó in một thông báo khi trình điều khiển khởi động và khởi động một bộ hẹn giờ kích hoạt mỗi giây và tăng một bộ đếm được gọi là timerCount.

Để biến đây thành một ứng dụng iPad, tất cả những gì tôi cần làm là chọn mục tiêu DriverKitSampleApp trong Xcode...

Và thêm iPad vào các điểm đến được hỗ trợ.

Bây giờ tôi có thể thay đổi điểm đến chạy của mình thành iPad mà tôi đã kết nối với máy Mac của mình.

Hãy thử chạy cái này trên iPad.

Đây là ứng dụng iPad của chúng tôi.

Chúng tôi có nhãn và nút từ chế độ xem mà chúng tôi đã thấy trong Xcode.

Nhấn vào nút Cài đặt Dext sẽ đưa chúng ta đến Cài đặt, nơi chúng ta thấy liên kết Trình điều khiển mới này.

Chúng tôi nhấn vào liên kết đó và chúng tôi thấy danh sách tất cả các trình điều khiển đi kèm trong ứng dụng này.

Sau đó chúng ta có thể kích hoạt Trình điều khiển Null của mình.

Vì vậy, bạn có thể đã nhận thấy một số điều trong bản demo.

Trình điều khiển Null của chúng tôi được đóng gói bên trong ứng dụng iPadOS của chúng tôi và nó sẽ tự động được hệ thống phát hiện sau khi cài đặt.

Trên macOS, bạn sẽ cần sử dụng khung SystemExtension để nhắc người dùng cài đặt trình điều khiển.

Trên iPadOS, không có khung SystemExtensions.

Bên trong Xcode, bạn có thể thấy rằng trình điều khiển của chúng tôi được nhúng trong ứng dụng của chúng tôi.

Vì trình điều khiển là phần mềm cấp thấp và có đặc quyền, chúng cần được người dùng chấp thuận trước khi chúng có thể chạy.

Trên macOS, người dùng cần vào tùy chọn Bảo mật & Quyền riêng tư để cho phép mở rộng hệ thống.

Trên iPadOS, các phê duyệt trình điều khiển nằm trong ứng dụng Cài đặt.

Có hai lựa chọn để phê duyệt tài xế.

Nếu có ít nhất một ứng dụng đã cài đặt trình điều khiển, sẽ có một menu bên trong Cài đặt chung với danh sách tất cả các trình điều khiển có sẵn.

Mỗi tài xế có thể được bật hoặc tắt.

Nếu ứng dụng của bạn chứa gói Cài đặt, sẽ có liên kết Trình điều khiển bên trong Cài đặt ứng dụng của bạn.

Ứng dụng của bạn sẽ nhắc người dùng bật trình điều khiển trong Cài đặt.

Hãy bắt đầu lại với dự án trình điều khiển macOS của chúng tôi và xem cách chúng tôi có thể yêu cầu ứng dụng của mình nhắc người dùng bật trình điều khiển trong Cài đặt.

Chúng tôi bắt đầu bằng cách thêm iPad vào các điểm đến được hỗ trợ của chúng tôi.

Chế độ xem SwiftUI của chúng tôi có một nút để cài đặt trình điều khiển và mô hình chế độ xem của chúng tôi có một máy trạng thái tương tác với khung SystemExtensions.

Vì dự án này sẽ được xây dựng cho cả Mac và iPad, chúng tôi muốn giữ chế độ xem và chế độ xem Mac của mình nhưng tạo một chế độ xem mới sẽ được sử dụng trên iPad.

Sau đó, chúng ta có thể đi đến Giai đoạn Xây dựng và Biên dịch nguồn và thay đổi bộ lọc nền tảng cho từng tệp để biên dịch có điều kiện cho iOS hoặc macOS.

Bây giờ, hãy thêm gói Cài đặt vào ứng dụng của chúng tôi.

Chúng tôi sẽ sử dụng Cài đặt ví dụ mặc định ngay bây giờ, nhưng chúng tôi có thể thay đổi chúng sau này thành Cài đặt thực mà ứng dụng có thể sử dụng.

Bây giờ hãy kiểm tra chế độ xem iOS mà chúng tôi vừa tạo.

Chúng ta có thể sao chép chế độ xem macOS của mình sang chế độ xem iOS để sử dụng làm điểm khởi đầu.

Chế độ xem iOS của chúng tôi không sử dụng mô hình chế độ xem, vì vậy chúng tôi có thể xóa nó.

Chúng tôi cũng cần thay đổi hành động nút của mình để mở gói Cài đặt của chúng tôi.

Điều này sẽ đưa người dùng vào Cài đặt, để họ có thể kích hoạt trình điều khiển.

Cuối cùng, chúng tôi thay đổi văn bản nút để làm rõ rằng người dùng cần bật trình điều khiển trong Cài đặt.

Hãy xem điều này đang hoạt động.

Chúng tôi có chế độ xem mà chúng tôi đã thiết kế và nhấn vào nút sẽ đưa chúng tôi đến gói Cài đặt của mình.

Sau đó, chúng tôi đi vào Trình điều khiển và bật Trình điều khiển Null.

Điều quan trọng cần lưu ý là các tài xế ra mắt theo yêu cầu.

Mặc dù chúng tôi đã bật trình điều khiển trong Cài đặt, trình điều khiển chỉ bắt đầu chạy khi thiết bị phần cứng được cắm vào iPad.

Sau khi trình điều khiển bắt đầu chạy, tôi có thể đính kèm trình gỡ lỗi vào nó bằng cách sử dụng gỡ lỗi không dây Xcode.

Để làm điều đó, tôi vào menu Gỡ lỗi trong Xcode, đính kèm vào quy trình, sau đó chọn quy trình NullDriver.

Sau khi đính kèm, tôi có thể đặt điểm dừng hoặc tạm dừng thực thi.

Ở đây, tôi đã đặt một điểm dừng trong bộ đếm thời gian của chúng tôi.

Tôi sẽ in timerCount để xem bộ đếm thời gian của chúng tôi đã được gọi bao nhiêu lần.

Khi bạn gỡ lỗi xong, hãy tách khỏi quy trình điều khiển bằng cách sử dụng menu Gỡ lỗi trong Xcode.

Vậy bây giờ chúng ta có một tài xế.

Nhưng bản thân một người lái xe không hữu ích lắm.

Nó cần giao tiếp với phần còn lại của hệ thống.

Một số khung DriverKit như AudioDriverKit xử lý việc này cho bạn.

Nhưng nếu bạn cần làm điều gì đó nâng cao hơn, chẳng hạn như tạo ứng dụng bảng điều khiển tùy chỉnh cho phần cứng của mình, bạn cần có ứng dụng của mình có thể giao tiếp với trình điều khiển của mình.

Đây là những gì khách hàng người dùng cho phép bạn làm.

Chúng cho phép bạn xác định giao diện của riêng mình, cho phép giao tiếp với ứng dụng và trình điều khiển.

Các ứng dụng sử dụng IOKit.framework để mở các khách hàng người dùng.

Để biết ví dụ về cách thức hoạt động của nó, vui lòng xem mã mẫu trên developer.apple.com.

Vì vậy, chúng tôi biết rằng các ứng dụng có thể giao tiếp với trình điều khiển.

Nhưng điều quan trọng là phải ghi nhớ sự an toàn.

Vì trình điều khiển có đặc quyền, chúng tôi không muốn cho phép mọi ứng dụng giao tiếp với trình điều khiển.

Trên macOS, ứng dụng cần quyền truy cập của khách hàng người dùng driverkit và giá trị là một mảng các số nhận dạng gói trình điều khiển được phép.

Trên iPadOS, chúng tôi đã thêm một quyền lợi mới được gọi là Giao tiếp với Trình điều khiển.

Nó thay thế quyền lợi của máy khách người dùng macOS.

Quyền lợi này cấp cho ứng dụng của bạn khả năng mở khách hàng người dùng cho tài xế của bạn.

Nếu bạn muốn thêm quyền Giao tiếp với Trình điều khiển theo cách thủ công vào ứng dụng của mình, đây là chuỗi quyền XML.

Chúng tôi cũng có thể thêm quyền này từ Xcode.

Trong Xcode, chúng ta đi đến Ký và Khả năng, sau đó thêm một khả năng mới.

Sau đó, chúng ta có thể tìm kiếm "giao tiếp với trình điều khiển" và thêm khả năng vào ứng dụng của chúng ta.

Một trường hợp sử dụng khác cho khách hàng người dùng là cho phép các ứng dụng từ các nhà phát triển khác tương tác với trình điều khiển của bạn.

Vì vậy, trong trường hợp này, giả sử bạn có một ứng dụng và trình điều khiển và bạn muốn cung cấp dịch vụ cho các ứng dụng khác, bao gồm cả những ứng dụng từ các nhà phát triển khác.

Khách hàng người dùng DriverKit cũng hỗ trợ điều này.

Mỗi ứng dụng cần giao tiếp với tài xế cần quyền giao tiếp với tài xế.

Người lái xe cần quyền cho phép khách hàng người dùng bên thứ ba.

Điều này cho phép các ứng dụng được xây dựng với một mã định danh nhóm khác để mở ứng dụng khách người dùng cho trình điều khiển.

Nếu không có quyền này, chỉ các ứng dụng từ cùng một nhóm mới có thể giao tiếp với người lái xe.

Nếu bạn muốn thêm quyền cho phép khách hàng người dùng bên thứ ba theo cách thủ công vào trình điều khiển của mình, đây là chuỗi quyền XML.

Hoặc chúng ta có thể thêm khả năng này từ Xcode bằng cách đi vào Ký tên và Khả năng cho trình điều khiển của chúng ta.

Các quyền lợi của khách hàng người dùng mới này được công khai để phát triển, điều đó có nghĩa là bạn có thể bắt đầu sử dụng nó ngay hôm nay mà không cần bất kỳ sự chấp thuận nào.

Để yêu cầu các quyền phân phối này, vui lòng xem trang web dành cho nhà phát triển của chúng tôi.

Trình điều khiển DriverKit cũng có ý nghĩa quan trọng đối với việc cập nhật ứng dụng.

Cập nhật ứng dụng tự động đảm bảo người dùng luôn nhận được phiên bản mới nhất của ứng dụng của bạn.

Tuy nhiên, đối với các ứng dụng có chứa trình điều khiển, quá trình cập nhật hoạt động hơi khác một chút.

Giả sử bạn phân phối phiên bản 1 của ứng dụng của mình trên cửa hàng ứng dụng.

Sau đó, bạn cài đặt ứng dụng đó cùng với trình điều khiển đi kèm trên iPad của mình và bật trình điều khiển trong Cài đặt.

Khi bạn cắm thiết bị phần cứng cho trình điều khiển của mình, trình điều khiển bắt đầu chạy và khi trình điều khiển bắt đầu chạy, ứng dụng của bạn có thể bắt đầu giao tiếp với trình điều khiển của bạn bằng cách sử dụng khách hàng người dùng.

Bây giờ, giả sử bạn tìm thấy một lỗi trong ứng dụng của mình và bạn gửi phiên bản 2 đến App Store.

Do cập nhật ứng dụng tự động, ứng dụng phiên bản 2 được tải xuống và cài đặt tự động trên iPad của bạn.

Trạng thái phê duyệt trình điều khiển được duy trì thông qua các bản cập nhật, vì vậy bạn không cần phải phê duyệt lại trình điều khiển.

Tuy nhiên, hãy lưu ý rằng phần cứng vẫn được cắm vào và trình điều khiển phiên bản 1 của chúng tôi vẫn đang chạy.

Trình điều khiển phiên bản 2 đã được tải xuống cùng với bản cập nhật ứng dụng nhưng không bắt đầu chạy.

Vì trình điều khiển cũ vẫn tiếp tục chạy, ứng dụng phiên bản 2 của bạn có thể phải giao tiếp với trình điều khiển phiên bản 1.

Khi thiết bị phần cứng được rút phích cắm, trình điều khiển sẽ ngừng chạy, vì vậy bây giờ trình điều khiển phiên bản 1 đã hoàn tất và chúng tôi có thể cập nhật trình điều khiển lên phiên bản 2.

Bây giờ, nếu bạn cắm lại thiết bị, chúng tôi sẽ khởi động trình điều khiển phiên bản 2 và bây giờ ứng dụng của bạn đang giao tiếp với trình điều khiển mới.

Tóm lại: Các ứng dụng được cập nhật bất cứ lúc nào với cập nhật ứng dụng tự động.

Trình điều khiển được cập nhật sau khi thiết bị được rút phích cắm.

Và ứng dụng của bạn có thể giao tiếp với một tài xế cũ.

Khi ứng dụng và trình điều khiển của bạn đã sẵn sàng, bạn có thể gửi chúng đến App Store.

Trình điều khiển của bạn chỉ có thể chạy trên các thiết bị hỗ trợ DriverKit.

Nếu bạn muốn giới hạn ứng dụng của mình đối với các thiết bị đó, chẳng hạn như nếu ứng dụng của bạn chỉ cài đặt trình điều khiển, hãy thêm DriverKit vào UIRequiredDeviceCapabilities của ứng dụng của bạn.

Điều này sẽ ngăn người dùng cài đặt ứng dụng của bạn trên một thiết bị không hỗ trợ DriverKit.

Chúng tôi cũng khuyên bạn nên gửi video đến Đánh giá ứng dụng cho thấy cách ứng dụng và trình điều khiển của bạn hoạt động với thiết bị phần cứng của bạn.

Vậy đó là DriverKit trên iPad.

Bây giờ bạn có thể mang trình điều khiển USB, PCI và Audio đến iPad với M1 và cung cấp các trình điều khiển đó bên trong các ứng dụng trên App Store.

Và nếu bạn đã có trình điều khiển, thật dễ dàng để mang nó lên iPad.

Chúng tôi khuyến khích các nhà phát triển thử sử dụng DriverKit trên iPad và cung cấp bất kỳ phản hồi nào bằng Trợ lý phản hồi.

Cảm ơn bạn đã xem.