110361

Suzy: Xin chào và chào mừng đến với "Các bài kiểm tra nhanh chóng và đáng tin cậy của tác giả cho Xcode Cloud."

Tôi là Suzy, và tôi làm việc trên XCTest.

Trong phiên này, tôi sẽ chia sẻ những cách hiệu quả nhất để bắt đầu thử nghiệm cho Xcode Cloud.

Các nhóm của chúng tôi đã thiết kế Xcode Cloud để trở thành một công cụ mạnh mẽ cho tất cả các nhà phát triển.

Trên thực tế, chúng tôi sử dụng nó để tự kiểm tra Xcode và tôi thích nó.

Một trong những tính năng yêu thích của tôi về Xcode Cloud là khả năng mở rộng đáng kể một bộ thử nghiệm nhất định.

Bằng cách định cấu hình hầu hết các thử nghiệm để chạy trên đám mây, giờ đây bạn có một cách thực tế để chạy các thử nghiệm trên nhiều điểm đến, bao gồm cả những thử nghiệm chạy các phiên bản hệ điều hành khác nhau để tận dụng các nền tảng đa dạng như iPhone, iPad, Apple Watch, Apple TV và Mac và chạy các cấu hình kế hoạch thử nghiệm khác nhau

Khi chúng tôi đã vượt qua một bộ kiểm tra kỹ lưỡng như vậy, chúng tôi có thể tự tin rằng mã đã sẵn sàng để vận chuyển.

Giảm tải các bài kiểm tra sang Xcode Cloud cho phép chạy một bộ kiểm tra rộng hơn mà không ảnh hưởng đến chu kỳ mã, biên dịch và kiểm tra trên máy tính để bàn của các nhà phát triển.

Với bộ kiểm tra hiện đã được mở rộng này, có khả năng tăng số lượng các bài kiểm tra không đáng tin cậy.

Tình huống này có thể trở nên không thể quản lý được.

Như vậy, đảm bảo độ tin cậy là điều cần thiết.

Ngoài độ tin cậy, một số lượng lớn các bài kiểm tra như vậy cũng cần phải chạy hiệu quả để hạn chế tác động của chúng đối với quá trình tích hợp liên tục.

Trước tiên hãy giải quyết độ tin cậy.

Tôi sẽ trình bày cách tạo ra các bài kiểm tra đáng tin cậy hơn cho Xcode Cloud bằng cách sử dụng Food Truck.

Food Truck là một ứng dụng chuyển đổi vòi và vuốt thành bánh rán ngon.

Bằng cách chạy bộ thử nghiệm trong Xcode Cloud, chúng tôi có thể xác nhận rằng tất cả các nền tảng của Apple đều hỗ trợ đặt hàng bánh rán yêu thích của tôi, sô cô la với rắc.

Mỗi cải tiến đối với Quy trình làm việc đám mây Xcode sẽ được xác định và chứng minh.

Để biết thêm thông tin về việc bắt đầu với Xcode Cloud Workflows, hãy xem "Gặp gỡ Xcode Cloud." Bước đầu tiên để tạo ra các bài kiểm tra đáng tin cậy hơn là đảm bảo thiết lập và gỡ bỏ của mỗi bài kiểm tra là kỹ lưỡng.

Các thử nghiệm chạy trong Xcode Cloud sử dụng một trình mô phỏng mới có thể không đáp ứng các giả định ban đầu của nhà phát triển.

Hãy xác định một số giả định cấu hình thiết bị đôi khi được thấy trong mã thử nghiệm.

Một số bài kiểm tra nhất định có thể dựa trên ngày và giờ cụ thể.

Ví dụ, một máy chủ có thể đang chạy ở một múi giờ khác.

Các bài kiểm tra nên tránh cụ thể về múi giờ.

Các giá trị dựa trên ngôn ngữ, chẳng hạn như định dạng số và định hướng ngôn ngữ, có thể dẫn đến kết quả không mong muốn.

Tránh vấn đề này bằng cách thiết lập rõ ràng ngôn ngữ trình giả lập của bạn.

Một giả định có vấn đề khác là sự phụ thuộc vào một số quyền thiết bị nhất định như truy cập internet.

Tốt nhất là mô phỏng quyền của thiết bị trong bài kiểm tra đơn vị và sử dụng trình xử lý cảnh báo trong Bài kiểm tra giao diện người dùng.

Cuối cùng, một số bài kiểm tra phụ thuộc vào dữ liệu được tải sẵn.

Ví dụ, một bài kiểm tra có thể mong đợi có một thư mục tài liệu trống.

Mặc dù cấu hình rõ ràng trình giả lập đôi khi là lựa chọn dễ dàng nhất, nhưng việc nâng cao phương pháp thiết lập của bài kiểm tra nói chung là mạnh mẽ hơn.

Ví dụ, Food Truck phụ thuộc vào một tệp thực đơn.

Là một phần của việc khởi tạo đối tượng xe tải trong chức năng thiết lập, chúng tôi tạo một tệp dữ liệu giả chứa các mục menu bánh rán.

Lưu ý rằng thay vì dựa vào các phương pháp teardown để chuẩn bị cho các bài kiểm tra tiếp theo, chúng tôi khuyên bạn nên thiết lập tất cả việc chuẩn bị trạng thái trong phương pháp thiết lập.

Trong nhiều trường hợp, các tệp chỉ đọc có thể được kiểm tra vào kho lưu trữ và sau đó được truy cập bằng các bài kiểm tra.

Tuy nhiên, khi các tệp này cần được xây dựng, Xcode Cloud hỗ trợ chạy tập lệnh xây dựng tùy chỉnh, nơi bạn có thể tạo tệp một lần để truy cập nhiều bài kiểm tra.

Để biết thêm chi tiết về cách định cấu hình tập lệnh của bạn, hãy xem "Tùy chỉnh quy trình làm việc Xcode Cloud nâng cao của bạn."

Điều đó kết thúc thiết lập mô phỏng thích hợp.

Bây giờ, hãy đề cập đến cách xử lý các bài kiểm tra không đáp ứng các điều kiện tiên quyết.

XCTSkip là một lỗi hướng dẫn XCTest Runner ngừng thực hiện bài kiểm tra hiện tại và đánh dấu nó là đã bỏ qua.

Điều này có thể được sử dụng để bỏ qua phiên bản hệ điều hành hoặc loại thiết bị chưa được hỗ trợ.

Bạn cũng có thể tận dụng XCTSkip bằng cách thiết lập một biến môi trường để bỏ qua các bài kiểm tra cụ thể cho môi trường dàn dựng hoặc sản xuất.

Hãy xem xét cách chúng ta có thể kiểm soát luồng thử nghiệm bằng cách sử dụng biến môi trường.

Các biến môi trường có thể cung cấp các tham số cho cả ứng dụng chạy thử nghiệm XCTest trên thiết bị của bạn và máy chủ thử nghiệm chạy xcodebuild.

Trong Xcode Cloud, các biến môi trường có tiền tố TEST_RUNNER_ được chuyển vào trình chạy thử nghiệm XCTest.

Tiền tố này sẽ bị loại bỏ trước khi biến được cung cấp cho mã của bạn.

Vì vậy, ví dụ, một biến trong mã kiểm tra của bạn có tên BASE_URL sẽ được chuyển vào dưới dạng biến môi trường có tên TEST_RUNNER_BASE_URL.

Các kế hoạch kiểm tra yêu cầu cùng định dạng với mã kiểm tra.

Cụ thể, chúng tôi không thêm tiền tố TEST_RUNNER_.

Các biến môi trường có thể được tham chiếu ở bất kỳ đâu trong mã thử nghiệm.

Ví dụ, chúng có thể được sử dụng với XCTSkip để bỏ qua bài kiểm tra để thực sự đặt bánh rán khi chúng tôi ở trong môi trường sản xuất.

Tất nhiên là trừ khi bạn đói.

Điều quan trọng cần lưu ý là việc xác định lại một biến môi trường ở nhiều nơi, chẳng hạn như cả kế hoạch thử nghiệm và Giao diện người dùng đám mây Xcode, có thể dẫn đến kết quả không mong muốn.

Trong trường hợp cụ thể này, các biến Môi trường của Xcode Cloud sẽ được ưu tiên hơn những gì được chỉ định trong kế hoạch thử nghiệm dự án của bạn.

Bây giờ chúng tôi đang tham chiếu biến môi trường của mình trong mã thử nghiệm, chúng tôi có thể đặt giá trị của nó trong Giao diện người dùng đám mây Xcode.

Để làm điều này, hãy điều hướng đến Báo cáo Đám mây của bạn và nhấp chuột điều khiển vào Xe tải Thực phẩm.

Để chỉnh sửa các biến môi trường của chúng tôi trong Quy trình làm việc, chúng tôi sẽ chọn "Quản lý quy trình làm việc" trong menu ngữ cảnh.

Chúng tôi đang chỉnh sửa quy trình làm việc tích hợp cụ thể, vì vậy chúng tôi sẽ nhấp đúp vào nó.

Bây giờ, trong thanh bên, chúng ta có thể chọn "Môi trường" và ở giữa trang tính, bên dưới "Biến môi trường", chúng ta có thể thêm tên và giá trị của biến.

Để thay thế cho việc thiết lập biến môi trường trong Xcode Cloud Workflow, thay vào đó chúng tôi có thể đặt nó trong kế hoạch thử nghiệm.

Trong ví dụ này, chúng tôi chưa có kế hoạch kiểm tra.

Để kích hoạt các kế hoạch kiểm tra, hãy mở trình chỉnh sửa sơ đồ, chọn "Kiểm tra" trong thanh bên, sau đó nhấp vào "Chuyển đổi để sử dụng các kế hoạch kiểm tra".

Được rồi, bây giờ chúng ta có một kế hoạch thử nghiệm mà tôi gọi là "Xe tải thực phẩm".

Để thêm biến môi trường, chúng ta cần nhấp vào kế hoạch thử nghiệm để mở trình chỉnh sửa của nó.

Gần phía trên, chúng ta có thể chọn giữa "Kiểm tra" và "Cấu hình".

Hãy chọn "Cấu hình."

Bây giờ, trong phần "Tranh luận", chúng tôi sẽ thêm biến bằng cách nhấp vào "Biến môi trường".

Một cửa sổ bật lên sẽ xuất hiện nơi chúng ta có thể nhập tên và giá trị của biến.

Bây giờ thử nghiệm của chúng tôi sẽ bị bỏ qua khi ở trong môi trường sản xuất.

Để tìm hiểu thêm về việc bỏ qua các bài kiểm tra, hãy xem "XCTBỏ qua các bài kiểm tra của bạn."

Bây giờ chúng tôi đã đề cập đến việc sử dụng các biến môi trường để kiểm soát XCTSkip, hãy nói về thời gian chờ kỳ vọng.

Một bài kiểm tra có thể thất bại do thời gian chờ bất ngờ.

Ví dụ, đây có thể là kết quả của một máy chủ chậm hoặc một bài kiểm tra giao diện người dùng quá lo lắng.

Một cách tiếp cận để giải quyết một trong hai vấn đề sẽ là tăng thời gian chờ XCTestExpectation để tương tác có đủ thời gian kết thúc.

Trong ví dụ này, chúng tôi tăng thời gian chờ OrderDonut từ 5 lên 10 giây để cho phép máy chủ có thêm thời gian phản hồi.

Thay vào đó, thường tốt hơn là thay thế cả ứng dụng và xử lý thời gian chờ mã thử nghiệm bằng async/await.

Cách tiếp cận này cho phép kiểm tra tạm dừng cho đến khi cuộc gọi chờ kết thúc mà không có bất kỳ thời gian chờ nào.

Chúng tôi đã giải quyết các bài kiểm tra phụ thuộc vào thời gian, vì vậy hãy xử lý mọi lỗi kiểm tra trong bộ kiểm tra.

Ví dụ, chúng tôi có một bài kiểm tra dựa trên một dịch vụ trong môi trường dàn dựng không hoạt động để bảo trì.

Chúng ta có thể sử dụng XCTExpectFailure thay vì vô hiệu hóa hoặc bỏ qua bài kiểm tra này.

Với XCTExpectFailure, bài kiểm tra của bạn thực hiện bình thường và kết quả được chuyển đổi như sau: một thất bại trong một bài kiểm tra bây giờ sẽ được báo cáo là một thất bại dự kiến, trong khi bài kiểm tra thất bại trong bộ của nó sẽ được báo cáo là vượt qua.

Cách tiếp cận này loại bỏ tiếng ồn được tạo ra bởi các lỗi dự kiến.

Ví dụ, testOrderDonut đang thất bại.

Tôi biết rằng dịch vụ cung cấp bánh rán đặt hàng hiện đang được bảo trì, vì vậy tôi đã thêm một cuộc gọi đến đây tới XCTExpectFailure.

Để tìm hiểu thêm về XCTExpectFailure, hãy xem "Nắm bắt những thất bại dự kiến trong XCTest."

Bây giờ chúng tôi đã tuyên bố thất bại dự kiến, hãy tận dụng các lần lặp lại kiểm tra để chứng minh mã và chẩn đoán mã không đáng tin cậy.

Lặp lại bài kiểm tra là một công cụ chạy cùng một bài kiểm tra nhiều lần chờ đợi những điều sau: thất bại đầu tiên, thành công đầu tiên hoặc kết quả thống kê.

Ví dụ, tại bàn làm việc của chúng tôi, chúng tôi chạy mã mới và các trường hợp kiểm tra nhiều lần với các lần lặp lại để xác nhận độ tin cậy của ứng dụng ban đầu và kiểm tra mã trước khi kiểm tra mã.

Chúng tôi đã có thể phát hiện ra rằng testOrderDonut chỉ có tỷ lệ thành công 80%.

Uh-oh!

Biết lỗi tồn tại, bây giờ chúng tôi sử dụng chế độ lặp lại cho đến khi thất bại để chẩn đoán lỗi cục bộ.

Đây là một cách khác để sử dụng các lần lặp lại bài kiểm tra.

Đối với các bài kiểm tra dựa trên dịch vụ bên ngoài không đáng tin cậy, bạn có thể muốn tận dụng chính sách lặp lại thử lại khi không thành công để xác nhận bài kiểm tra có thể thành công.

Mặc dù thử lại các bài kiểm tra là một cách tiếp cận mạnh mẽ, nhưng thay vào đó tốt hơn là chế giễu các dịch vụ bên ngoài khi có thể.

Ưu điểm của dịch vụ được chế giễu bao gồm độ tin cậy và tốc độ xác định.

Để tìm hiểu cách chế giễu sự phụ thuộc của bạn, hãy xem "Mẹo & Thủ thuật Kiểm tra". Hãy cùng khám phá cách lặp lại bài kiểm tra có thể được kích hoạt.

Để cho phép lặp lại bài kiểm tra trong kế hoạch kiểm tra của bạn, hãy quay lại trình chỉnh sửa kế hoạch kiểm tra và chọn "Cấu hình".

Sau đó, trong phần "Thực thi thử nghiệm", có một cửa sổ bật lên để chọn chế độ lặp lại bài kiểm tra của bạn.

Trong trường hợp này, chúng tôi sẽ chọn "Thử lại lỗi", được sử dụng chủ yếu để làm việc xung quanh các dịch vụ bên ngoài không đáng tin cậy.

Bây giờ chúng tôi đã bật chế độ lặp lại bài kiểm tra của mình.

Để biết thêm thông tin về việc tận dụng các lần lặp lại bài kiểm tra, hãy xem "Chẩn đoán mã không đáng tin cậy với sự lặp lại bài kiểm tra."

Vì vậy, chúng tôi đã xem xét nhiều công cụ có thể được sử dụng để cải thiện độ tin cậy của bài kiểm tra.

Để biết thêm thông tin về việc viết bài kiểm tra chất lượng, hãy xem "Viết bài kiểm tra để thất bại."

Bây giờ các bài kiểm tra của chúng tôi đáng tin cậy, hãy làm cho chúng chạy nhanh!

Một số tùy chọn cấu hình tồn tại để đạt được kết quả nhanh hơn.

Hãy làm những gì chúng ta có thể để giảm thời gian chạy bộ thử nghiệm.

Một kỹ thuật chúng tôi sử dụng để cải thiện hiệu suất là chia các bài kiểm tra của chúng tôi thành nhiều kế hoạch kiểm tra.

Đôi khi, hai là đủ.

Bạn có thể xác định một bộ kiểm tra rút gọn để xác minh như một phần của mỗi lần mở hoặc cập nhật yêu cầu kéo.

Ví dụ, chúng tôi có thể chạy các bài kiểm tra đơn vị cùng với chỉ một tập hợp con chính của các bài kiểm tra giao diện người dùng cho một nền tảng duy nhất.

Bộ kiểm tra đầy đủ trên tất cả các nền tảng được hỗ trợ vẫn có thể chạy, nhưng bây giờ ở chế độ nền và không chặn các yêu cầu kéo.

Cách tiếp cận này cho phép chúng tôi thêm các bài kiểm tra và nền tảng mới trong khi vẫn giữ cho quá trình tích hợp liên tục của chúng tôi kịp thời.

Hãy thiết lập một quy trình làm việc để chạy một bộ kiểm tra được chọn.

Trong ví dụ này, chúng tôi đã tạo một kế hoạch kiểm tra mới được gọi là "Yêu cầu kéo" và mở nó trong trình chỉnh sửa kế hoạch kiểm tra.

Gần đầu chúng ta có thể chọn giữa "Kiểm tra" và "Cấu hình".

Hãy chọn "Kiểm tra."

Ở đây chúng tôi đã chọn một tập hợp con các bài kiểm tra để được xác minh cho một yêu cầu kéo.

Bây giờ để thiết lập Quy trình làm việc để chạy kế hoạch kiểm tra "Pull Requests" của chúng tôi, chúng tôi sẽ quay lại Xcode Cloud Manage Workflows giống như chúng tôi đã làm khi chúng tôi thêm một biến môi trường để bỏ qua các bài kiểm tra.

Để tạo một quy trình làm việc mới, chúng tôi sẽ nhấp vào nút "Thêm" ở phía dưới bên trái của trang "Quản lý quy trình làm việc".

Để đơn giản, hãy đặt tên cho quy trình làm việc của chúng tôi là "Yêu cầu kéo" và chọn điều kiện bắt đầu.

Chúng tôi muốn quy trình làm việc này ngăn chặn bất kỳ đăng ký nào với các bài kiểm tra không thành công.

Trong thanh bên, ở bên phải của "Điều kiện bắt đầu", chúng ta sẽ nhấp vào nút "Thêm".

Một menu sẽ xuất hiện hiển thị các tùy chọn điều kiện bắt đầu.

Trong trường hợp của chúng tôi, chúng tôi sẽ chọn "Kéo yêu cầu thay đổi."

Bây giờ, bây giờ chúng ta có một điều kiện bắt đầu yêu cầu kéo.

Chạy thử nghiệm yêu cầu ứng dụng Xe tải Thực phẩm trước tiên phải được xây dựng.

Để làm điều này, chúng ta cần thêm một hành động xây dựng.

Một lần nữa trong thanh bên, bên dưới "Điều kiện bắt đầu", hãy thêm một hành động.

Chúng tôi sẽ nhấp vào nút "Thêm" bên cạnh "Hành động", và sau đó chọn "Xây dựng" từ trình đơn ngữ cảnh.

Bây giờ chúng tôi có một hành động xây dựng ứng dụng của mình, chúng tôi sẽ thêm một hành động khác để chạy các thử nghiệm của mình.

Một lần nữa chúng tôi sẽ nhấp vào thêm hành động, nhưng lần này chúng tôi sẽ chọn "Kiểm tra".

Tuyệt vời, chúng tôi có một hành động kiểm tra.

Hãy chọn kế hoạch kiểm tra để chạy.

Ở giữa tờ giấy, có một trình đơn thả xuống để kiểm tra.

Tại đây chúng ta có thể chọn kế hoạch kiểm tra "Yêu cầu kéo" của mình.

Tuyệt vời!

Bây giờ Quy trình làm việc của chúng tôi được cấu hình để chạy kế hoạch thử nghiệm của chúng tôi theo yêu cầu kéo.

Để tạo quy trình làm việc thứ hai sẽ chạy bộ kiểm tra hoàn chỉnh của bạn theo lịch trình, bạn có thể làm theo một bộ các bước tương tự.

Tuy nhiên, lần này, hãy chọn điều kiện bắt đầu là "Theo lịch trình cho một chi nhánh" và sau đó đặt quy trình làm việc để chạy kế hoạch kiểm tra bộ đầy đủ của bạn.

Chúng tôi có cả Quy trình làm việc được định cấu hình trong Xcode Cloud và chạy các kế hoạch thử nghiệm liên quan của chúng.

Để tìm hiểu thêm về các kế hoạch kiểm tra, hãy xem "Kiểm tra trong Xcode."

Bây giờ chúng tôi đã tạo yêu cầu kéo và các bộ kiểm tra quy trình làm việc đã lên lịch.

Một cải tiến khác mà chúng tôi có thể thực hiện cho tốc độ là chạy thử nghiệm đồng thời.

Theo mặc định, Xcode Cloud kiểm tra song song các nền tảng của bạn.

Ngoài ra, bạn có thể kích hoạt Xcode để chạy các bài kiểm tra song song ở cấp độ lớp đối tượng mục tiêu và kiểm tra.

Để cho phép thực hiện kiểm tra song song trong Xcode, chúng tôi sẽ lại truy cập trình chỉnh sửa kế hoạch kiểm tra của mình và chọn "Kiểm tra".

Sau đó, ở bên phải gói thử nghiệm "Kiểm tra xe tải thực phẩm" của chúng tôi, chúng tôi nhấp vào nút "Tùy chọn".

Một trong những tùy chọn cho phép chúng tôi "Thực hiện song song" khi có thể.

Nếu máy chủ có đủ lõi có sẵn, nhiều mục tiêu và các lớp đối tượng thử nghiệm có thể được thực thi đồng thời.

Vì vậy, hãy bật tùy chọn này để cải thiện thời gian quay vòng bộ thử nghiệm của chúng tôi.

Bây giờ các bài kiểm tra của chúng tôi được cấu hình để chạy song song.

Lưu ý rằng các bài kiểm tra phải được thiết kế để chạy độc lập để tận dụng lợi thế của việc thực thi song song.

Thiết lập và tháo dỡ đúng cách là điều cần thiết cho hành vi trường hợp thử nghiệm đáng tin cậy.

Với các bài kiểm tra của chúng tôi chạy song song, đã đến lúc chuyển sự chú ý của chúng tôi sang các bài kiểm tra chạy trốn.

Các bài kiểm tra bỏ chạy là những bài kiểm tra không kết thúc kịp thời.

Một số ví dụ bao gồm một vòng lặp vô hạn hoặc chờ đợi vô thời hạn cho một máy chủ bị lỗi.

Chúng tôi có thể dừng các bài kiểm tra này bằng cách đặt phụ cấp thời gian thực hiện trong kế hoạch kiểm tra của mình.

Phụ cấp thời gian thực hiện chỉ định số giây để một bài kiểm tra chạy trước khi nó không thành công với lỗi thời gian chờ.

Điều này ngăn chặn một bộ kiểm tra bị mắc kẹt trong một bài kiểm tra cá nhân.

Trong trường hợp này, bài kiểm tra thứ năm bị kẹt vì một số lý do.

Bằng cách đặt phụ cấp thời gian thực hiện, bài kiểm tra chạy trốn này cuối cùng đã bị dừng lại và được đánh dấu là thất bại.

XCTest Test Runner sau đó tiếp tục chạy thử nghiệm tiếp theo trong bộ phần mềm.

Hãy định cấu hình phụ cấp thời gian thực hiện cho kế hoạch kiểm tra của chúng tôi.

Để đặt phụ cấp thời gian thực hiện, chúng tôi sẽ truy cập trình chỉnh sửa kế hoạch kiểm tra của mình và chọn "Cấu hình".

Trong danh mục "Thực hiện kiểm tra", chúng tôi có thể bật "Thời gian chờ kiểm tra" và chỉ định số giây để chờ.

Lưu ý rằng mặc định là 600 giây.

Sau khi định cấu hình phụ cấp thời gian thực hiện tối đa, một thử nghiệm chạy trốn duy nhất sẽ không còn làm gián đoạn quy trình kiểm tra của chúng tôi nữa.

Ví dụ, một bộ kiểm tra qua đêm hiện có thể hoàn thành đúng hạn và cung cấp đầy đủ các kết quả hữu ích.

Yay! Cuối cùng chúng tôi đã dừng các bài kiểm tra chạy trốn đó, vì vậy chúng tôi có thể chuyển sang cải tiến tiếp theo.

Như bạn có thể nhớ lại, chúng tôi đã có thể tận dụng các lần lặp lại bài kiểm tra để tăng độ tin cậy của các bài kiểm tra dựa trên các dịch vụ bên ngoài.

Chúng tôi đã định cấu hình kế hoạch kiểm tra của mình để thử lại lỗi và chọn một giá trị lặp lại đủ.

Tuy nhiên, những lần lặp lại này có thể làm tăng thêm thời gian cần thiết để chạy bộ thử nghiệm.

Những lần lặp lại không cần thiết là lãng phí và bạn có thể muốn tối ưu hóa giá trị lặp lại bài kiểm tra thành một con số thấp hơn.

Hơn nữa, bạn có thể cân nhắc loại bỏ hoàn toàn bài kiểm tra có vấn đề khỏi quy trình làm việc yêu cầu kéo.

Hãy xem qua cách chúng ta có thể làm điều này.

Hãy quay lại cấu hình lặp lại bài kiểm tra trong trình chỉnh sửa kế hoạch kiểm tra.

Trước đó chúng tôi đã đặt chế độ lặp lại bài kiểm tra thành "Thử lại khi thất bại".

Bây giờ chúng ta có thể điều chỉnh giá trị "Lời lặp lại kiểm tra tối đa".

Ví dụ, chúng tôi có thể đã chọn cho phép tối đa 10 lần thử nghiệm dựa trên máy chủ bên ngoài không thành công 5% thời gian.

Hầu hết thời gian, chúng tôi sẽ thành công trong lần thử đầu tiên.

Tuy nhiên, nếu cùng một bài kiểm tra đó có một lỗi không liên quan, nó sẽ thất bại mọi lúc và sử dụng tất cả 10 lần thử.

Có lẽ 3 lần thử là đủ và là một lựa chọn tốt hơn.

Mặc dù chúng tôi muốn giảm các lần thử lại để cải thiện hiệu suất, lưu ý rằng trước đó chúng tôi đã đề xuất tăng các lần thử lại để cải thiện độ tin cậy trong một số trường hợp.

Như vậy, giá trị được chọn tối thiểu này phải tiếp tục đủ để chạy các bài kiểm tra đó một cách đáng tin cậy.

Điều đó kết thúc cấu hình để có kết quả nhanh hơn.

Để đi vào chi tiết hơn về việc nhận kết quả kiểm tra nhanh hơn, hãy xem "Nhận kết quả kiểm tra của bạn nhanh hơn."

Tóm lại, chúng tôi đã đề cập đến những cách hiệu quả nhất để bắt đầu thử nghiệm cho Xcode Cloud.

Chúng tôi tập trung vào việc cấu hình các bài kiểm tra vừa đáng tin cậy vừa nhanh chóng để bạn có thể tránh các lỗi không liên quan và xác minh các thay đổi mã của mình một cách nhanh chóng.

Cảm ơn bạn, và tôi hy vọng bạn tận hưởng phần còn lại của WWDC!

.