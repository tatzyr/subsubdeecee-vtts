10078

♪ Nhạc cụ hip-hip êm dịu ♪

♪

Xin chào, tôi là Vidhi Goel, và trong video này, tôi sẽ nói về cách giảm sự chậm trễ của mạng trong các ứng dụng của bạn và làm cho chúng phản hồi nhanh hơn.

Đầu tiên, tôi sẽ giải thích tại sao việc giảm độ trễ là rất quan trọng trong việc làm cho ứng dụng của bạn đáp ứng.

Tiếp theo, tôi sẽ xem qua danh sách những việc bạn có thể làm trong ứng dụng và trên máy chủ của mình để loại bỏ sự chậm trễ không cần thiết.

Cuối cùng, tôi sẽ chỉ ra những gì bạn có thể làm để giảm sự chậm trễ trong chính mạng.

Độ trễ mạng là thời gian cần thiết để dữ liệu đi từ điểm cuối này sang điểm cuối khác.

Nó xác định nội dung có thể được gửi đến ứng dụng của bạn nhanh như thế nào.

Tất cả các ứng dụng sử dụng mạng có thể bị ảnh hưởng bởi các giao dịch mạng chậm dẫn đến trải nghiệm ứng dụng kém.

Ví dụ, các cuộc gọi video đôi khi có thể bị đóng băng hoặc trở nên chậm trễ, điều này có thể làm gián đoạn các cuộc họp.

Để giải quyết vấn đề này, mọi người thường gọi cho nhà cung cấp dịch vụ của họ để nâng cấp băng thông của họ, tuy nhiên, vấn đề vẫn tồn tại.

Để tìm ra nguyên nhân gốc rễ của vấn đề này, bạn cần hiểu cách các gói ứng dụng của bạn di chuyển trong mạng.

Khi ứng dụng hoặc khuôn khổ của bạn yêu cầu dữ liệu từ máy chủ, các gói tin sẽ được gửi đi bởi ngăn xếp mạng.

Người ta thường giả định rằng các gói tin đi trực tiếp đến máy chủ mà không có sự chậm trễ trong mạng.

Nhưng, trên thực tế, liên kết chậm nhất của mạng thường có một hàng đợi lớn các gói để xử lý.

Vì vậy, gói từ ứng dụng của bạn thực sự đợi phía sau hàng đợi lớn này cho đến khi các gói phía trước được xử lý.

Việc xếp hàng ở liên kết chậm nhất này làm tăng thời lượng của mỗi chuyến đi khứ hồi giữa ứng dụng và máy chủ của bạn.

Vấn đề này trở nên trầm trọng hơn khi phải mất nhiều chuyến đi khứ hồi để nhận được phản hồi đầu tiên cho yêu cầu ứng dụng của bạn.

Ví dụ, thời gian để nhận gói phản hồi đầu tiên khi sử dụng TLS 1.2 qua TCP là thời lượng của mỗi chuyến khứ hồi nhân với bốn chuyến đi.

Cho rằng mỗi thời gian khứ hồi đã bị thổi phồng bằng cách xếp hàng trong mạng, tổng thời gian kết quả đơn giản là quá dài.

Có hai yếu tố nhân lên với nhau để xác định khả năng phản hồi của ứng dụng của bạn: thời lượng của mỗi chuyến khứ hồi và số lượng chuyến khứ hồi.

Giảm những thứ này sẽ làm giảm độ trễ ứng dụng của bạn và tăng khả năng phản hồi của ứng dụng.

Đã có một nghiên cứu kiểm tra tác động của việc tăng băng thông so với giảm độ trễ đối với thời gian tải trang.

Trong thử nghiệm đầu tiên, độ trễ được giữ cố định và băng thông được tăng dần từ 1 lên 10Mbps.

Lúc đầu, việc tăng băng thông từ 1 lên 2Mbps giúp giảm thời gian tải trang gần 40%, điều này thật tuyệt.

Nhưng sau 4Mbps, mỗi lần tăng gia tăng dẫn đến hầu như không có sự cải thiện nào trong thời gian tải trang.

Đây là lý do tại sao các ứng dụng có thể chậm ngay cả sau khi nâng cấp lên Gigabit Internet.

Mặt khác, kết quả cho bài kiểm tra độ trễ cho thấy cứ mỗi 20 mili giây giảm độ trễ, có sự cải thiện tuyến tính về thời gian tải trang.

Và những kết quả này áp dụng cho tất cả các hoạt động mạng trong ứng dụng của bạn.

Bây giờ, tôi sẽ xem xét một vài hành động đơn giản mà bạn có thể thực hiện để giảm độ trễ và làm cho ứng dụng của bạn phản hồi nhanh hơn.

Bạn có thể giảm đáng kể độ trễ của ứng dụng bằng cách áp dụng các giao thức hiện đại như IPv6, TLS 1.3 và HTTP/3.

Và tất cả những gì bạn cần làm là sử dụng URLSession và Network.framework APIs trong ứng dụng của bạn và các giao thức này sẽ được sử dụng tự động khi chúng được bật trên máy chủ của bạn.

Kể từ khi triển khai, chúng tôi đã thấy sự gia tăng liên tục trong việc sử dụng HTTP/3 và chỉ trong vòng một năm, 20 phần trăm lưu lượng truy cập web đã sử dụng HTTP/3 và nó tiếp tục phát triển.

So sánh lưu lượng truy cập Safari cho các phiên bản HTTP khác nhau, HTTP/3 là nhanh nhất trong số đó.

Các yêu cầu HTTP/3 mất hơn một nửa thời gian so với HTTP/1, khi xem thời gian hoàn thành yêu cầu trung bình là bội số của thời gian khứ hồi.

Điều này có nghĩa là các yêu cầu ứng dụng của bạn sẽ hoàn thành nhanh hơn nhiều.

Khi một thiết bị chuyển từ Wi-Fi sang mạng di động, cần có thời gian để thiết lập lại các kết nối mới và điều đó có thể khiến ứng dụng của bạn bị đình trệ.

Sử dụng di chuyển kết nối sẽ loại bỏ những gian hàng đó.

Để chọn tham gia, hãy đặt thuộc tính multipathServiceType thành .handover trên cấu hình URLSession của bạn hoặc trên NWParameters của bạn.

Bật tùy chọn này và đảm bảo nó hoạt động với ứng dụng của bạn.

Nếu bạn thiết kế giao thức của riêng mình sử dụng UDP trực tiếp, iOS 16 và macOS Ventura giới thiệu một cách tốt hơn để gửi datagrams.

Biểu đồ dữ liệu QUIC cung cấp nhiều lợi ích so với UDP đơn giản, điều quan trọng nhất là biểu đồ dữ liệu QUIC phản ứng với tắc nghẽn trong mạng, điều này giữ thời gian khứ hồi thấp và giảm mất gói.

Để chọn tham gia vào máy khách, hãy đặt isDatagram thành true trên các tùy chọn QUIC của bạn và đặt kích thước khung datagram tối đa mà bạn muốn sử dụng.

Sau khi tạo luồng datagram, bạn có thể gửi và nhận trên đó giống như bất kỳ luồng QUIC nào khác.

Bây giờ bạn đã biết phải làm gì trong ứng dụng của mình để giảm độ trễ.

Tiếp theo, tôi sẽ giải thích cách các máy chủ tác động đến khả năng phản hồi của ứng dụng của bạn.

Mặc dù thường xuyên chạy trên phần cứng hàng đầu, nhưng có thể máy chủ của bạn thực sự trở thành lý do cho sự chậm chạp trong ứng dụng của bạn.

Chúng tôi đã giới thiệu công cụ chất lượng mạng trong macOS Monterey và bạn có thể sử dụng công cụ này để đo độ phồng bộ đệm trong mạng của nhà cung cấp dịch vụ cũng như trên máy chủ của bạn.

Bạn cần cấu hình máy chủ của mình để hoạt động như một điểm đến cho công cụ chất lượng mạng.

Khi bạn đã làm điều đó, hãy chạy công cụ networkQuality, trước tiên là chống lại máy chủ mặc định của Apple và sau đó chống lại máy chủ được định cấu hình của riêng bạn.

Nếu công cụ đạt điểm cao khi sử dụng máy chủ mặc định, nhưng không tốt lắm khi nói chuyện với máy chủ của riêng bạn, có thể có chỗ để cải thiện khả năng phản hồi của máy chủ của bạn.

Bây giờ, tôi sẽ chỉ cho bạn một ví dụ về việc chúng tôi đã sử dụng kỹ thuật này để cải thiện điều gì đó mà tất cả các bạn đang làm ngay bây giờ - phát trực tuyến video.

Bạn có thể đã có trải nghiệm khi bạn bỏ qua một nơi khác trong video và cuối cùng bạn phải chờ đợi rất lâu trong khi nó lặp lại.

Vì vậy, chúng tôi đã điều tra lý do cho sự chậm chạp này trong việc truy cập ngẫu nhiên.

Chúng tôi đã sử dụng công cụ chất lượng mạng để kiểm tra hành vi của máy chủ phát trực tuyến và chúng tôi thấy rằng điểm phản hồi kém.

Ở phía bên phải, tôi đã phát trực tuyến một video WWDC.

Sau đó, tôi đã bỏ qua phía trước trong video.

Màn hình không hiển thị bất cứ thứ gì trong khi video được đệm lại.

Sau vài giây, video xuất hiện.

Với sự trợ giúp của đầu ra chi tiết từ công cụ chất lượng mạng trên macOS, chúng tôi nhận thấy rằng có rất nhiều hàng đợi tại máy chủ.

Vì vậy, chúng tôi đã xem xét cấu hình máy chủ.

Cụ thể, chúng tôi đã xem xét các kích thước bộ đệm TCP, TLS và HTTP, được định cấu hình lần lượt thành 4MB, 256KB và 4MB.

Bộ đệm rất lớn vì RAM rất dồi dào.

Nhưng chỉ vì một số bộ đệm là tốt, không phải lúc nào cũng có nghĩa là bộ đệm nhiều hơn sẽ tốt hơn.

Các phép đo khả năng phản hồi của chúng tôi đã làm nổi bật vấn đề chính xác này - một gói mới được tạo đã được xếp hàng phía sau dữ liệu cũ trong các bộ đệm lớn này và điều này đã tạo ra rất nhiều độ trễ bổ sung trong việc cung cấp gói gần đây nhất.

Vì vậy, chúng tôi đã giảm kích thước bộ đệm xuống còn 256KB cho HTTP, 16KB cho TLS và 128KB cho TCP.

Đây là tệp cấu hình cho Máy chủ Lưu lượng Apache hiển thị các tùy chọn đã được định cấu hình.

Dấu nước thấp không gửi TCP được đặt thành 128KB cùng với các tùy chọn khác được bật để giảm bộ đệm.

Đối với TLS, chúng tôi đã bật kích thước bản ghi động và đối với HTTP/2, chúng tôi đã giảm kích thước khối bộ đệm và dấu nước thấp.

Chúng tôi khuyên bạn nên sử dụng các cấu hình này cho Máy chủ lưu lượng truy cập Apache của bạn và nếu bạn đang sử dụng một máy chủ web khác, hãy tìm kiếm các tùy chọn tương đương của nó.

Sau khi thực hiện những thay đổi này, chúng tôi đã chạy lại công cụ chất lượng mạng.

Và lần này chúng tôi có điểm RPM cao!

Ở bên phải, tôi đã phát trực tuyến cùng một video, nhưng lần này khi tôi bỏ qua phía trước, video sẽ tiếp tục ngay lập tức.

Bằng cách loại bỏ hàng đợi không cần thiết tại máy chủ, chúng tôi đã làm cho quyền truy cập ngẫu nhiên phản hồi nhanh hơn nhiều.

Bất kể ứng dụng của bạn sử dụng mạng như thế nào, những thay đổi này trên máy chủ của bạn có thể làm cho ứng dụng của bạn phản hồi nhanh hơn và mang lại trải nghiệm người dùng tốt hơn.

Đó là cách để cải thiện ứng dụng và cập nhật máy chủ của bạn.

Có một yếu tố thứ ba ảnh hưởng lớn đến khả năng phản hồi; bản thân mạng.

Apple đã giới thiệu công cụ chất lượng mạng trong iOS 15 và macOS Monterey.

Kể từ đó, những người khác đã sử dụng cùng một phương pháp luận để phát triển các bài kiểm tra chất lượng mạng.

Dạng sóng đã khởi động một thử nghiệm Bufferbloat.

Có một triển khai mã nguồn mở của bài kiểm tra khả năng phản hồi, được viết bằng Go.

Và Ookla đã thêm phép đo khả năng đáp ứng vào ứng dụng Speedtest của họ.

Ứng dụng của Ookla hiển thị thời gian khứ hồi tính bằng mili giây và nếu bạn chia 60.000 cho con số đó, bạn sẽ nhận được số chuyến đi khứ hồi mỗi phút, hoặc RPM.

Bạn có thể sử dụng những công cụ này để đo lường mạng của chính bạn đang hoạt động tốt như thế nào.

Cách tốt nhất để hiểu sự chậm trễ trong mạng là với một ứng dụng nhạy cảm với độ trễ.

Vì vậy, tôi sẽ cho bạn thấy trải nghiệm chia sẻ màn hình của tôi với một máy từ xa.

Tôi thiết lập các điều kiện mạng để bắt chước một mạng truy cập đại diện, với lưu lượng truy cập từ các thiết bị khác chia sẻ mạng đó.

Tại đây, tôi đã đăng nhập vào máy từ xa của mình bằng cách sử dụng Chia sẻ màn hình.

Tôi đã nhấp vào các menu Finder khác nhau nhưng màn hình hiển thị của mỗi menu rất chậm chạp.

Để kiểm tra xem sự tương tác này bị trì hoãn đến mức nào, tôi đã khởi chạy một ứng dụng hiển thị thời gian trên máy cục bộ của mình và tôi đã khởi chạy cùng một ứng dụng trên máy từ xa của mình.

Mặc dù thời gian trên các máy tính này được đồng bộ hóa, màn hình từ xa của tôi không cập nhật thường xuyên và hiển thị thời gian bị trì hoãn vài giây.

Lý do cho việc cập nhật bị trì hoãn này là sự hiện diện của một hàng đợi lớn ở liên kết chậm nhất của mạng và các gói từ ứng dụng Chia sẻ Màn hình bị kẹt trong hàng đợi lớn này.

Để giải quyết vấn đề xếp hàng này, Apple đang làm việc với cộng đồng mạng trên một công nghệ mới có tên L4S.

Nó có sẵn dưới dạng bản beta trong iOS 16 và macOS Ventura.

L4S giảm đáng kể độ trễ xếp hàng và cũng đạt được tổn thất tắc nghẽn bằng không.

Để giữ một hàng đợi ngắn nhất quán, mạng báo hiệu rõ ràng tắc nghẽn thay vì bỏ các gói tin và người gửi điều chỉnh tốc độ gửi của nó dựa trên phản hồi tắc nghẽn từ mạng.

Điều này giúp bạn có thể giữ hàng đợi rất thấp trong mạng mà không làm mất bất kỳ gói nào và điều đó sẽ làm cho ứng dụng của bạn có khả năng phản hồi cao.

Bây giờ, hãy xem L4S đã cải thiện Chia sẻ Màn hình như thế nào.

Ở đây, tôi đã sử dụng cùng một máy và cùng một mạng ngoại trừ lần này, tôi đã bật L4S.

Khi tôi nhấp vào các menu Finder khác nhau, chúng sẽ mở ngay lập tức.

Tôi đã khởi chạy ứng dụng Time trên cả hai máy.

Và bây giờ, thời gian trên cả màn hình từ xa và máy cục bộ gần như hoàn toàn đồng bộ.

Công nghệ này không chỉ để chia sẻ màn hình.

L4S cải thiện tất cả các ứng dụng ngày nay và mở ra cánh cửa cho các ứng dụng trong tương lai thậm chí không thể thực hiện được ngày hôm nay.

Biểu đồ này vẽ biểu đồ thời gian khứ hồi trung bình quan sát được của các gói từ ứng dụng Chia sẻ màn hình đang chạy đồng thời với lưu lượng truy cập từ các thiết bị khác chia sẻ cùng một mạng.

So sánh xếp hàng cổ điển so với L4S cho thấy có sự giảm đáng kể thời gian khứ hồi với L4S.

Đây là lý do chính cho sự cải thiện đáng kể trong trải nghiệm chia sẻ màn hình của tôi.

Kiểm tra ứng dụng của bạn sử dụng HTTP/3 hoặc QUIC với L4S.

Bạn có thể bật L4S trong iOS 16 bên trong cài đặt Nhà phát triển hoặc trên macOS Ventura thông qua ghi mặc định.

Để kiểm tra bằng máy chủ Linux, việc triển khai QUIC của bạn cần hỗ trợ ECN chính xác và thuật toán kiểm soát tắc nghẽn có thể mở rộng.

Để đảm bảo rằng bạn đã sẵn sàng khi các mạng có khả năng L4S được triển khai, hãy kiểm tra ứng dụng của bạn về khả năng tương thích với L4S và cung cấp phản hồi về bất kỳ vấn đề nào bạn có thể gặp phải.

Bây giờ bạn đã biết rằng giảm độ trễ là rất quan trọng để cải thiện khả năng phản hồi của ứng dụng.

Vì vậy, hãy áp dụng HTTP/3 và QUIC, để giảm số lượng chuyến đi khứ hồi và phân phối nội dung nhanh hơn đến ứng dụng của bạn.

Loại bỏ việc xếp hàng không cần thiết trên máy chủ của bạn để cung cấp tương tác phản hồi nhanh hơn.

Kiểm tra khả năng tương thích của ứng dụng của bạn với L4S bằng cách bật nó trong cài đặt Nhà phát triển và cung cấp phản hồi.

Và cuối cùng, hãy nói chuyện với nhà cung cấp máy chủ của bạn về việc bật hỗ trợ L4S.

Cảm ơn vì đã xem!

♪