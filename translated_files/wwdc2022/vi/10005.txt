10005

♪ Nhạc cụ hip-hip êm dịu ♪

♪

Xin chào và chào mừng đến với WWDC.

Tên tôi là Karim, và tôi là một kỹ sư HealthKit.

Khung HealthKit cung cấp nền tảng để xây dựng trải nghiệm sức khỏe tuyệt vời và Apple Watch đi kèm với nhiều tính năng an toàn và sức khỏe, giúp bạn theo dõi mọi thứ.

Một trong những điều phổ biến nhất là theo dõi giấc ngủ và chúng tôi đang cập nhật để thu thập dữ liệu giấc ngủ chi tiết hơn.

Chúng tôi cũng có những bổ sung mới tuyệt vời khác cho HealthKit trong năm nay.

Chúng tôi đã nâng cao các API của mình để giúp truy vấn dữ liệu dễ dàng hơn với Swift không đồng bộ.

Chúng tôi đang cải thiện các bài tập với một đại diện tập luyện phong phú hơn.

Và chúng tôi đang bổ sung hỗ trợ để tiết kiệm đơn thuốc thị lực, bao gồm một bản sao kỹ thuật số của đơn thuốc vật lý.

Tôi rất vui được cho bạn biết thêm về tất cả các bản cập nhật này và cách các ứng dụng của bạn có thể tận dụng chúng.

Hãy bắt đầu nào!

Giấc ngủ là một chức năng thiết yếu cho phép cơ thể và tâm trí của chúng ta nạp năng lượng, và tôi thích sử dụng Apple Watch để quản lý lịch trình giấc ngủ của mình và có được thông tin chi tiết giúp tôi hiểu và cải thiện giấc ngủ của mình.

Năm nay chúng tôi đang làm cho việc theo dõi giấc ngủ thậm chí còn tốt hơn bằng cách giới thiệu các giai đoạn giấc ngủ.

Apple Watch sẽ tự động theo dõi tất cả các giai đoạn ngủ khác nhau mà bạn trải qua khi ngủ và dữ liệu này sẽ có thể truy cập được từ ứng dụng Sức khỏe và được lưu trong HealthKit.

Tất nhiên, ứng dụng của bạn sẽ có thể đọc và lưu dữ liệu giai đoạn ngủ.

Dữ liệu giấc ngủ được lưu bởi Apple Watch hoặc ứng dụng của bạn được thể hiện trong HealthKit bằng các mẫu danh mục với mã định danh sleepAnalysis.

Chúng tôi sẽ hỗ trợ ba giai đoạn ngủ: REM, core và deep.

Khi lưu dữ liệu giấc ngủ vào HealthKit, bạn nên đảm bảo tạo một mẫu cho mỗi khoảng thời gian liên tục trong một giai đoạn ngủ nhất định.

Đây là giá trị mẫu ngủ enum trông như thế nào.

Chúng tôi đang thêm ba trường hợp để đại diện cho các giai đoạn ngủ, bắt đầu với sleepCore, tương ứng với giai đoạn một và hai của mô hình tính điểm từ Học viện Y học Giấc ngủ Hoa Kỳ hoặc AASM; sleepDeep, tương ứng với giai đoạn ba của mô hình tính điểm AASM; và cuối cùng, asleepREM, tương ứng với giai đoạn

Bây giờ chúng tôi đã thêm các giai đoạn ngủ, chúng tôi đang phản đối trường hợp ngủ để chuyển sang ngủ Không xác định, điều này cho thấy rằng người dùng đang ngủ nhưng không có giai đoạn ngủ nào được chỉ định.

Với các mẫu ngủ được cập nhật enum, giờ đây có thể lưu và đọc dữ liệu các giai đoạn ngủ từ HealthKit.

Chúng tôi đã thêm một vị ngữ mới để dễ dàng đọc các mẫu giấc ngủ cho một giai đoạn nhất định.

Giả sử tôi muốn đọc các mẫu giấc ngủ trong giai đoạn REM.

Đầu tiên, tôi tạo một vị ngữ bằng cách sử dụng phương pháp predicateForSamples mới với giá trị asleepREM.

Bây giờ, tôi có thể bắt đầu xây dựng truy vấn của mình.

Tôi tạo một vị ngữ cho truy vấn của mình với loại mẫu sleepAnalysis và vị ngữ giai đoạn ngủ.

Và với vị ngữ truy vấn này, bây giờ tôi có thể tạo truy vấn của mình.

Chạy truy vấn sẽ trả lại cho tôi một loạt các mẫu giấc ngủ trong giai đoạn REM.

Tuy nhiên, nếu bạn quan tâm đến việc đọc các mẫu cho tất cả các giai đoạn ngủ, bao gồm cả không xác định, điều quan trọng là bạn phải cập nhật ứng dụng của mình để sử dụng .allAsleepValues mới khi xây dựng vị ngữ của mình.

Nếu bạn chưa xem HealthKit kể từ năm ngoái, cú pháp ngắn hơn này để truy vấn có thể trông không quen thuộc với bạn.

Kể từ iOS 15.4, chúng tôi đã cập nhật API truy vấn của mình để hỗ trợ Swift không đồng bộ.

Truy vấn là một phần thiết yếu của HealthKit và với sự hỗ trợ không đồng bộ của Swift, chúng dễ sử dụng hơn với cú pháp ngắn gọn hơn.

Các truy vấn cho phép bạn đọc nhiều dữ liệu khác nhau từ HealthKit, sử dụng các vị ngữ để lọc kết quả và cũng theo dõi dữ liệu mới khi nó xuất hiện.

Tất cả các truy vấn là các lớp con của HKQuery.

Nếu tôi muốn biết tổng lượng calo bị đốt cháy trong một khoảng thời gian nhất định, một truy vấn tuyệt vời để có được những số liệu thống kê được tính toán này là HKStatisticsCollectionQuery.

Để có được kết quả ban đầu, bạn sẽ đặt đóng truy vấn initialResultsHandler.

Và nếu bạn quan tâm đến việc xem bất kỳ bản cập nhật nào, bạn sẽ đặt thêm số liệu thống kê đóng UpdateHandler.

Khi truy vấn được bắt đầu, các lần đóng này sẽ được gọi với kết quả.

Nhờ Swift không đồng bộ, chúng tôi đang làm cho điều này trở nên đơn giản hơn.

Mỗi truy vấn hiện có một bộ mô tả truy vấn phù hợp, vì vậy HKStatisticsCollectionQuery trở thành HKStatisticsCollectionQuery Descriptor.

Bạn nhận được kết quả ban đầu bằng cách gọi phương thức kết quả không đồng bộ (cho:).

Mặt khác, nếu bạn muốn nhận kết quả ban đầu và cũng theo dõi các bản cập nhật, bạn gọi kết quả (cho:), trả về Trình tự không đồng bộ mà bạn có thể lặp lại để đọc kết quả.

HealthKit rất tuyệt vời để theo dõi các bài tập và các chỉ số liên quan như lượng calo đã đốt cháy.

Để tìm ra tôi đã đốt cháy bao nhiêu calo trong tuần này, tôi có thể sử dụng bộ mô tả truy vấn thu thập số liệu thống kê.

Đầu tiên, tôi tạo mô tả truy vấn với một vị ngữ để khớp với các mẫu calo.

Tôi sử dụng tùy chọn cumulativeSum vì tôi muốn tổng số tiền.

Tôi quan tâm đến dữ liệu của tuần này, vì vậy tôi sử dụng thisSunday làm anchorDate của mình.

Và cuối cùng, tôi muốn tổng lượng calo của mình được tính toán trong khoảng thời gian một tuần.

Khi tôi tạo bộ mô tả truy vấn của mình, tất cả những gì tôi cần làm là gọi kết quả (cho:) với một đối tượng healthStore.

Đối tượng statisticsCollection được trả về cung cấp cho tôi ảnh chụp nhanh dữ liệu hiện tại của tôi.

Nhưng nếu tôi muốn cập nhật trực tiếp khi lượng calo của mình thay đổi, nó đơn giản như gọi kết quả (cho:) và lặp qua chuỗi không đồng bộ được trả về để đọc kết quả.

Khi tôi xem xong các bản cập nhật, tôi chỉ cần thoát ra khỏi vòng lặp và điều đó sẽ dừng truy vấn.

Bây giờ, hãy nói về việc tập luyện.

HealthKit là một nơi tuyệt vời để tiết kiệm các bài tập và tất cả các chỉ số liên quan của chúng cho dù bạn đang đi xe đạp bình thường hay đẩy bản thân đến giới hạn tại một cuộc đua.

Và đôi khi, tập luyện có thể chứa nhiều hơn một hoạt động riêng biệt.

Bạn có thể lặp lại bài tập tương tự với việc tập luyện ngắt quãng hoặc tham gia cuộc đua ba môn phối hợp bao gồm bơi lội, đạp xe và chạy bộ.

Chúng tôi đang cập nhật API tập luyện của mình trong iOS 16 và watchOS 9 để có thể nắm bắt các loại bài tập này và số liệu thống kê liên quan cho từng hoạt động.

Đây là dòng thời gian của một bài tập bơi-xe đạp mà tôi đã thực hiện gần đây.

Tôi bắt đầu với bơi lội, sau đó tôi dành một chút thời gian để sẵn sàng cho phần đạp xe của bài tập, và cuối cùng là chạy.

Mỗi hoạt động được đại diện bởi một đối tượng HKWorkoutActivity.

Mỗi hoạt động tập luyện được tạo ra với cấu hình tập luyện riêng, bao gồm loại hoạt động.

Một hoạt động tập luyện chứa một danh sách các sự kiện xảy ra trong quá trình hoạt động.

Và bạn sẽ có thể đọc số liệu thống kê cho từng hoạt động, điều này thật tuyệt vời khi bạn chỉ quan tâm đến việc phân tích những gì đã xảy ra trong một hoạt động cụ thể.

Quay trở lại dòng thời gian của tôi, ba hoạt động của tôi được cấu hình với loại hoạt động phù hợp của chúng.

Các hoạt động không thể trùng lặp theo thời gian.

Và bởi vì có thể có một giai đoạn chuyển tiếp giữa mỗi hoạt động, chúng không bắt buộc phải tiếp giáp nhau.

Nếu tôi quan tâm đến việc phân tích những gì đã xảy ra trong các giai đoạn chuyển tiếp, tôi có thể tạo một HKWorkoutActivity cho mỗi quá trình chuyển đổi với loại chuyển đổi.

Tất cả các hoạt động này sẽ được lưu với đối tượng HKWorkout trong thuộc tính workoutActivities.

Nếu bạn đang sử dụng HKWorkoutBuilder để thêm các bài tập vào HealthKit, việc thêm một hoạt động cũng dễ dàng như tạo một đối tượng HKWorkoutActivity với Cấu hình tập luyện, ngày bắt đầu và kết thúc và siêu dữ liệu tùy chọn.

Và sau đó, bạn chỉ cần gọi addWorkoutActivity trên trình tạo bài tập.

Trên Apple Watch, bạn có thể sử dụng một buổi tập luyện để theo dõi bài tập bơi-xe đạp và trình tạo bài tập liên quan để lưu bài tập trong HealthKit.

Hãy quay lại dòng thời gian tập luyện của tôi.

Để theo dõi bài tập này trên Apple Watch, tôi cần thiết lập một buổi tập luyện và xây dựng.

Tôi bắt đầu bằng cách tạo ra một cấu hình tập luyện với loại swimBikeRun.

Sau đó, tôi tạo một HKWorkoutSession bằng cách sử dụng cấu hình của mình.

Khi bắt đầu tập luyện, tôi chỉ cần gọi startActivity trong phiên và beginCollection trên trình tạo bài tập liên quan.

Bây giờ phiên và người xây dựng của tôi đã sẵn sàng, tôi có thể thêm hoạt động đầu tiên của mình bằng cách sử dụng phương pháp beginNewActivity với cấu hình bài tập bơi và ngày bắt đầu.

Khi bắt đầu mỗi hoạt động, bạn nên đảm bảo cập nhật nguồn dữ liệu trình tạo bài tập để chỉ thu thập các loại dữ liệu mà bạn quan tâm.

Bởi vì đây là một hoạt động bơi lội, tôi muốn thu thập khoảng cách bơi lội.

Vào cuối hoạt động, tôi gọi endCurrentActivity với ngày kết thúc.

Bởi vì tôi quan tâm đến việc phân tích giai đoạn chuyển tiếp từ bơi lội sang đạp xe, tôi sẽ bắt đầu một hoạt động chuyển tiếp mới ngay sau khi bơi kết thúc.

Một lần nữa, vì đây là sự khởi đầu của một hoạt động, tôi cập nhật nguồn dữ liệu của người xây dựng để vô hiệu hóa việc thu thập khoảng cách bơi, vì nó không còn phù hợp nữa.

Tôi kết thúc hoạt động chuyển tiếp ngay trước khi bắt đầu đạp xe.

Tôi có thể theo dõi các hoạt động còn lại trong quá trình tập luyện của mình theo cùng một cách.

Khi kết thúc bài tập, kết thúc buổi tập cũng sẽ kết thúc bất kỳ hoạt động chạy bộ nào.

Sau đó, tôi có thể hoàn thành công cụ xây dựng bài tập, nó sẽ lưu và trả lại một đối tượng HKWorkout.

Tôi có thể sử dụng bài tập trở lại để đọc một số chỉ số liên quan như totalEnergyBurned và totalDistance, và hiển thị bản tóm tắt bài tập trong ứng dụng của mình.

Tuy nhiên, tập hợp các thuộc tính nhỏ này không còn đủ nữa.

totalSwimmingStrokeCount không liên quan đến tất cả các bài tập và một số bài tập có thể thu thập nhiều chỉ số hơn.

Để dễ dàng đọc các số liệu cho tất cả các loại bài tập hơn, chúng tôi đang phản đối các thuộc tính này để ủng hộ một phương pháp mới trả về số liệu thống kê cho một loại số lượng nhất định.

Xin nhắc lại, phương pháp này cũng có sẵn trên HKWorkoutActivity, cho phép bạn tập trung vào những gì đã xảy ra trong một hoạt động.

Những thống kê này sẽ được tính toán tự động từ bất kỳ mẫu nào được thu thập trong quá trình tập luyện, chỉ khi sử dụng HKWorkoutBuilder hoặc HKLiveWorkoutBuilder.

Cùng với đại diện tập luyện phong phú hơn này, chúng tôi cũng có một bộ vị ngữ mới để giúp bạn chỉ truy vấn các bài tập mà bạn quan tâm khi thúc đẩy phân tích hoặc trực quan hóa của mình.

Để cho bạn một ví dụ, đây là danh sách các bài tập gần đây của tôi với nhịp tim trung bình cho mỗi hoạt động.

Tôi muốn tìm các bài tập của mình với các hoạt động cường độ cao trong đó nhịp tim trung bình của tôi trên 150.

Đầu tiên, tôi bắt đầu bằng cách tạo một vị ngữ bằng cách sử dụng phương pháp predicateForWorkoutActivities mới, phương pháp này sẽ tác động lên các hoạt động tập luyện.

Tôi muốn nhịp tim trung bình lớn hơn 150 nhịp mỗi phút.

Tiếp theo, vì tôi muốn truy vấn các bài tập, tôi gói vị ngữ nhịp tim của mình bên trong một vị ngữ tập luyện.

Sau đó, tôi tạo một truy vấn bằng cách sử dụng vị ngữ đó.

Và tôi gọi phương thức kết quả (cho: healthStore) của bộ mô tả truy vấn của mình để có được danh sách các bài tập phù hợp với vị ngữ của tôi.

Và đó là cách tôi có thể truy vấn chỉ cho các bài tập mà tôi quan tâm.

Một trong những bài tập gần đây của tôi bao gồm bốn khoảng thời gian chạy.

Sử dụng HKWorkoutActivity là một cách tuyệt vời để ghi lại những khoảng thời gian này.

Bạn chỉ cần đảm bảo rằng tất cả các hoạt động của một bài tập ngắt quãng đều có cùng loại hoạt động với bài tập.

Vì vậy, đối với một bài tập chạy bộ, tất cả các hoạt động đều được cấu hình với loại .running.

Một lợi ích của việc sử dụng các hoạt động tập luyện để theo dõi khoảng thời gian là bạn có thể nhận được số liệu thống kê cho mỗi khoảng thời gian.

Với những cập nhật này, các bài tập giờ đây bao gồm một bức tranh toàn diện hơn về các hoạt động của họ và bối cảnh xung quanh chúng.

Để cung cấp một bức tranh phong phú hơn nữa, chúng tôi đang giới thiệu các chỉ số chạy mới sẽ được thu thập tự động trên Apple Watch Series 6, SE và các chỉ số mới hơn như độ dài sải chân chạy hoặc công suất tính bằng watt.

Đối với các bài tập bơi, chúng tôi đang thêm điểm SWOLF.

Nó được định nghĩa là số lần vuốt được thực hiện trong một độ dài nhất định và thời gian cần thiết để bơi theo độ dài đó.

Điểm số này sẽ được tính cho mỗi sự kiện vòng đua và sự kiện phân đoạn cho các bài tập bơi được ghi lại trên Apple Watch.

Mặc dù các chỉ số này làm phong phú thêm các bài tập của bạn và cho phép bạn hiểu rõ hơn về cách bạn thực hiện, một chỉ số quan trọng khác được ghi lại sau khi bài tập kết thúc là phục hồi nhịp tim.

Đó là ước tính nhịp tim của bạn giảm nhanh như thế nào sau khi tập thể dục và nó có thể được sử dụng để hiểu cách tim phục hồi sau khi căng thẳng và tiết lộ các vấn đề sức khỏe tiềm ẩn.

Với iOS 16, chúng tôi đang giới thiệu một loại dữ liệu Cardio Recovery mới.

Nó sẽ có thể truy cập được từ ứng dụng Sức khỏe và các ứng dụng của bạn sẽ có thể đọc và lưu dữ liệu này trong HealthKit.

Phục hồi nhịp tim là một loại số lượng có mã định danh .heartRateRecoveryOneMinute.

Thông tin ngữ cảnh bổ sung về mỗi mẫu phục hồi nhịp tim có thể được thêm vào dưới dạng siêu dữ liệu.

Trong bài tập bơi-xe đạp gần đây của tôi, tôi đã đẩy mình đến giới hạn của mình, và sau đó quan sát nhịp tim của tôi phục hồi.

Tôi mất khoảng ba tiếng rưỡi để hoàn thành bài tập.

Tôi đã đạt nhịp tim tối đa 184 nhịp mỗi phút khi tôi đang chạy.

Và phút sau khi tập luyện, nhịp tim của tôi giảm 50 nhịp.

Khi sử dụng HKLiveWorkoutBuilder trên Apple Watch, một mẫu phục hồi nhịp tim, cùng với ngữ cảnh xung quanh, sẽ tự động được lưu trong HealthKit sau khi tập luyện.

Nếu không, để lưu mẫu phục hồi nhịp tim, tôi tạo một mẫu số lượng với loại .heartRateRecoveryOneMinute.

Nhịp tim của tôi giảm 50 nhịp một phút sau khi tập luyện, vì vậy tôi đặt nó làm số lượng mẫu của mình.

Tôi cũng đặt ngày bắt đầu và ngày kết thúc cho mẫu.

Sau đó, tôi đặt thông tin ngữ cảnh bổ sung vào từ điển siêu dữ liệu, bắt đầu với loại kiểm tra khôi phục.

Bởi vì tập luyện của tôi là một nỗ lực toàn diện, loại bài kiểm tra là .maxExercise.

Bài tập của tôi là swimBikeRun, vì vậy tôi đặt nó làm loại hoạt động.

Tôi cũng có thể thêm thời lượng tập luyện bằng cách sử dụng phím HeartRateRecoveryActivity Duration.

Cuối cùng, tôi thêm nhịp tim tối đa quan sát được trong quá trình tập luyện, là 184 nhịp mỗi phút.

Với những cập nhật này, giờ đây việc theo dõi bơi-xe đạp và tập luyện ngắt quãng trở nên dễ dàng hơn bao giờ hết.

Ngoài ra, việc giới thiệu các số liệu mới cung cấp một bức tranh toàn diện hơn cho việc tập luyện của bạn và những cách mới hơn để đánh giá tiến độ theo thời gian.

Mặc dù hoạt động và thể dục là thứ ảnh hưởng đến tất cả mọi người nhưng có những khía cạnh khác của sức khỏe ảnh hưởng đến nhiều người trong chúng ta, chẳng hạn như thị lực.

Trên thực tế, theo Hội đồng Thị lực Hoa Kỳ, khoảng 75 phần trăm người trưởng thành ở Hoa Kỳ dựa vào việc điều chỉnh thị lực bằng kính theo toa hoặc kính áp tròng.

Tuy nhiên, những đơn thuốc này rất dễ bị mất và đó là một thứ nữa bạn cần mang theo bên mình khi đặt mua kính theo toa hoặc kính áp tròng.

Vậy hãy đặt chúng vào điện thoại của chúng ta.

Bắt đầu với iOS 16, các ứng dụng của bạn giờ đây có thể lưu kính và đơn thuốc danh bạ trong HealthKit.

Đơn thuốc thị lực là một mẫu với visionPrescriptionType.

Ngày bắt đầu của mẫu tương ứng với ngày cấp đơn thuốc, trong khi ngày kết thúc tương ứng với ngày hết hạn.

Tùy chọn, một bản sao kỹ thuật số của đơn thuốc vật lý có thể được đính kèm vào mẫu.

Mẫu đơn thuốc kính hoặc kính áp tròng là một phân lớp của HKVisionPrescription.

Đối với kính, bạn sử dụng lớp con HKGlassesPrescription, và đối với kính áp tròng, lớp con HKContactsPrescription.

Mỗi đơn thuốc kính được tạo ra bằng cách sử dụng hai đối tượng đặc điểm kỹ thuật của thấu kính thủy tinh; một cho mỗi mắt.

Và tương tự, đơn thuốc tiếp xúc được tạo ra với hai đối tượng đặc điểm kỹ thuật của kính áp tròng.

Bây giờ, hãy lưu đơn thuốc kính đọc sách của tôi cho HealthKit.

Bước đầu tiên là tạo ra một HKGlassesLensSpecification cho mỗi mắt.

Một số thông số, chẳng hạn như khoảng cách đỉnh và lăng kính, là tùy chọn.

Tôi có thể tạo ra thông số kỹ thuật ống kính mắt phù hợp theo cùng một cách.

Tiếp theo, tôi tạo ra một mẫu đơn thuốc kính với thông số kỹ thuật ống kính mắt phải và mắt trái của mình.

Đơn thuốc này dành cho kính đọc sách của tôi, vì vậy tôi sẽ thêm nó vào phần mô tả.

Sau đó, tôi chỉ cần gọi tiết kiệm trên healthStore với đơn thuốc của mình.

Và với điều đó, đơn thuốc của tôi hiện đã được lưu trong HealthKit.

Tôi cũng đã chụp một bức ảnh về nó, mà tôi muốn đính kèm vào mẫu mà tôi vừa lưu.

Tệp đính kèm được đại diện bởi một đối tượng HKAttachment.

Bạn sử dụng HKAttachmentStore để lưu và đọc tệp đính kèm.

Chỉ những hình ảnh tĩnh hoặc tệp PDF mới có thể được đính kèm vào đơn thuốc.

Để đính kèm hình ảnh tôi đã chụp vào mẫu đơn thuốc của mình, tôi bắt đầu bằng cách tạo một đối tượng HKAttachmentStore bằng cách sử dụng healthStore.

Sau đó, tôi gọi addAttachment(to:) với mẫu đơn thuốc của mình.

Tôi đặt tên cho tệp đính kèm.

Đây, tôi đang đính kèm một tệp PNG.

Và cuối cùng, chuyển URL của tệp.

Đơn thuốc tôi vừa đính kèm chứa nhiều thông tin hơn là chỉ thông số kỹ thuật ống kính - thông tin nhạy cảm, như tên đầy đủ và ngày sinh của tôi.

Một trong những nguyên tắc cốt lõi của HealthKit là bảo vệ quyền riêng tư của bạn và đảm bảo rằng bạn luôn kiểm soát dữ liệu bạn chia sẻ.

Bởi vì có thể dễ dàng chia sẻ nhiều dữ liệu hơn dự định với các đơn thuốc bao gồm tệp đính kèm, chúng tôi đang giới thiệu một mô hình ủy quyền mới cho các đơn thuốc.

Quyền đọc được cấp cho từng đối tượng kê đơn riêng biệt.

Người dùng có thể chọn chính xác đơn thuốc mà họ cấp quyền truy cập ứng dụng của bạn và cập nhật lựa chọn của họ bất cứ lúc nào.

Chúng tôi có một API mới để yêu cầu ủy quyền cho các đối tượng theo toa thị lực.

Cũng giống như các loại dữ liệu khác, bạn có thể sử dụng các truy vấn để đọc các đơn thuốc mà ứng dụng của bạn có quyền truy cập.

Nếu bạn chỉ quan tâm đến một số đơn thuốc nhất định, bạn có thể sử dụng một vị ngữ.

Để yêu cầu ủy quyền, chỉ cần gọi phương thức ủy quyền requestPerObjectRead của healthStore với visionType.

Làm như vậy sẽ luôn hiển thị lời nhắc ủy quyền trong ứng dụng của bạn với danh sách tất cả các đơn thuốc phù hợp với vị ngữ của bạn.

Đảm bảo rằng bạn đang yêu cầu ủy quyền trong bối cảnh thích hợp để đảm bảo trải nghiệm người dùng tốt nhất.

Đây chỉ là một số điều mới mà chúng tôi đã thêm vào HealthKit để trao quyền cho các ứng dụng của bạn để cung cấp trải nghiệm sức khỏe và thể dục tốt hơn.

Chúng tôi nóng lòng muốn xem bạn sẽ xây dựng gì tiếp theo.

Chúc bạn có một WWDC tuyệt vời, và nếu bạn có bất kỳ câu hỏi nào, chúng tôi sẽ sẵn lòng giúp bạn trong Diễn đàn Nhà phát triển.

♪