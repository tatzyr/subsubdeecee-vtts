10136

♪ nhạc cụ hip hop ♪

♪

Xin chào, tôi là Dominik và tôi rất vui mừng được giới thiệu với bạn Swift Charts, khuôn khổ mới của Apple để tạo ra các biểu đồ thông tin và thú vị trong SwiftUI.

Dữ liệu bao quanh chúng ta và cung cấp một nguồn tài nguyên chưa từng có để hiểu thế giới và đưa ra quyết định tốt hơn.

Tuy nhiên, chỉ riêng dữ liệu thì ít được sử dụng.

Để làm cho dữ liệu trở nên hữu ích, chúng ta phải hiểu nó.

Một trực quan hóa dữ liệu được thiết kế tốt và dễ tiếp cận có thể truyền đạt rõ ràng dữ liệu phức tạp và biến dữ liệu thành sự hiểu biết và kiến thức.

Tại Apple, chúng tôi đã dành nhiều năm nghiên cứu các phương pháp hay nhất để trực quan hóa.

Chúng tôi đã học được rằng các biểu đồ hoạt động tốt nhất khi chúng hiển thị bối cảnh hữu ích bổ sung xung quanh dữ liệu như xu hướng và biến động của giá cổ phiếu trong một khoảng thời gian, nhịp tim của bạn trong lần tập luyện cuối cùng và khi nào ngày sẽ nguội đi vào buổi tối.

Và đây chỉ là một số trong nhiều ví dụ trên tất cả các nền tảng của chúng tôi nơi chúng tôi sử dụng biểu đồ.

Hôm nay, tôi rất vui được giới thiệu cho bạn một khuôn khổ mới để bạn có thể tạo các biểu đồ thông tin và thú vị trong các ứng dụng của mình.

Xin chào Swift Charts.

Swift Charts là một khuôn khổ linh hoạt để tạo ra các biểu đồ do Apple thiết kế.

Nó sử dụng cú pháp khai báo giống như SwiftUI, vì vậy bạn đã biết ngôn ngữ của Swift Charts.

Vì vậy, hôm nay, hãy thực hiện một số hình ảnh trực quan nhiều thông tin, dễ tiếp cận và thú vị với Biểu đồ Swift.

Trong nhóm, chúng tôi đã giúp một xe bán đồ ăn bánh kếp bật lên theo dõi doanh số bán hàng của nó bằng một ứng dụng.

Chiếc xe tải phục vụ nhiều loại bánh kếp ngọt và mặn quốc tế như cachapa, injera, crêpe, jian bing, dosa hoặc bánh kếp Mỹ.

Xe bán đồ ăn đã phục vụ hơn 4500 chiếc bánh kếp theo phong cách này trong 30 ngày qua.

Cachapa là phổ biến nhất và ứng dụng đã hiển thị thông tin quan trọng nhất trong tiêu đề.

Hãy thêm một biểu đồ để hiển thị bảng phân tích chi tiết cho sáu chiếc bánh kếp.

Để thực hiện trực quan hóa này trong Biểu đồ Swift, chúng ta có thể sử dụng cú pháp khai báo giống như SwiftUI.

Trong Swift Charts, bạn xây dựng biểu đồ theo bố cục.

Các thành phần chính của biểu đồ thanh là các thanh, là các yếu tố trực quan cho từng mục trong dữ liệu của bạn.

Biểu đồ Swift gọi các yếu tố trực quan này là "dấu hiệu".

Hãy nhảy vào Xcode để tạo biểu đồ này.

Chúng tôi bắt đầu với việc thêm một biểu đồ.

Để tạo một thanh, tôi thêm một BarMark bên trong Biểu đồ.

Để hiển thị một thanh cho số lượng cachapas, chúng ta phải đặt tên và doanh số bán hàng.

Chúng tôi đặt vị trí x của thanh được lấy từ giá trị của tên bánh kếp - trong trường hợp này là "Cachapa."

Đối số đầu tiên của phương thức nhà máy .value là mô tả giá trị và đối số thứ hai là chính giá trị đó.

Và bây giờ chúng ta có một thanh duy nhất trong bản xem trước.

Chiều cao của mỗi thanh được mô tả bởi thuộc tính y nên được đặt theo số lượng cachapas được bán, là 916.

Để chỉ ra rằng chúng tôi không đặt vị trí hoặc chiều cao của thanh trực tiếp, chúng tôi sử dụng .value.

Biểu đồ Swift tự động tạo không chỉ thanh mà còn tạo nhãn cho các thanh trên trục x và trục y cho biết độ dài của thanh có nghĩa là gì.

Hãy thêm một thanh thứ hai cho injera, trong đó chiếc xe tải đã bán được 850.

Bây giờ, thật tuyệt khi xây dựng các nhãn hiệu riêng lẻ và thấy chúng xuất hiện trong ứng dụng.

Tuy nhiên, chúng tôi thường muốn tạo ra một biểu đồ được điều khiển bởi một bộ sưu tập như một mảng các cấu trúc.

Tôi sẽ bắt đầu bằng cách thêm một cấu trúc cho doanh số bán bánh kếp của mình.

Nó có một cái tên - đó là một chuỗi - và chiếc xe tải đã bán được bao nhiêu chiếc bánh kếp - đó là một int.

Bởi vì chúng tôi muốn sử dụng nó để lặp lại, chúng tôi làm cho nó có thể nhận dạng được...

...Và xác định một thuộc tính được tính toán bằng ID trả về tên.

Bây giờ chúng ta có thể tạo tập dữ liệu của mình dưới dạng một mảng bánh kếp.

Chúng tôi có thể tải cái này từ một nguồn dữ liệu bên ngoài nhưng ở đây chúng tôi sẽ xác định nó trong mã.

Bên cạnh cachapa và injera, chúng tôi cũng thêm bánh crêpe.

Chúng tôi có thể tạo dữ liệu biểu đồ thanh được điều khiển bằng ForEach.

Đầu tiên, loại bỏ thanh thứ hai.

Và tất cả những gì chúng ta cần làm bây giờ là lặp lại BarMark với một ForEach.

Tôi chọn "phần tử" làm tên của biến trong vòng lặp.

Sau đó chúng ta có thể sử dụng element.name cho x...

...Và yếu tố.bán hàng cho y.

Nếu ForEach là nội dung duy nhất trong biểu đồ, chúng ta cũng có thể đưa dữ liệu trực tiếp vào trình khởi tạo biểu đồ.

Bây giờ chúng ta có thể thêm ba mục còn lại cho bánh kếp jian bing, dosa và american.

Khi chúng tôi thêm nhiều mục nhập vào mảng, chúng tôi thêm các dấu thanh mới vào biểu đồ.

Cuối cùng, chúng ta thấy rằng các nhãn đang trở nên gần nhau.

Bằng cách hoán đổi x và y, chúng tôi chuyển vị biểu đồ và cung cấp cho các nhãn cho mỗi thanh nhiều không gian hơn.

Khung Swift Charts tự động chọn một kiểu trục thích hợp để làm cho biểu đồ của bạn đẹp.

Và cùng với đó, chúng tôi đã thực hiện trực quan hóa dữ liệu đầu tiên của mình trong Biểu đồ Swift.

Và sử dụng tính năng biến thể mới trong Xcode, chúng ta có thể thấy rằng biểu đồ này trông đẹp trong Chế độ tối, thích ứng với các kích thước phông chữ, kích thước thiết bị và hướng khác nhau và hỗ trợ khả năng truy cập.

Để truy cập dữ liệu trong một biểu diễn trực quan, bạn cần có khả năng xem.

Swift Charts hiển thị dữ liệu trong một hình ảnh trực quan cho VoiceOver để mọi người có thể khám phá các chi tiết về bánh kếp phổ biến.

Khi tôi điều hướng biểu đồ trong VoiceOver, nó sẽ nói tên và số lượng bánh kếp được bán.

Lồng tiếng: Cachapa, 916. Injera, 850. Crêpes, 802.

Jian Ping, 753. Dosa, 654. Người Mỹ, 618.

Dominik: Và tất nhiên, biểu đồ hỗ trợ tính năng Đồ thị âm thanh mà Apple đã trình bày vào năm 2021, bao gồm cả sonifications.

VoiceOver: Mô tả biểu đồ. Chi tiết biểu đồ.

Phát Biểu Đồ Âm Thanh.

Hoàn thành.

Dominik: Chúng tôi vừa sử dụng Biểu đồ Swift để thêm biểu đồ thông tin và dễ tiếp cận vào ứng dụng xe tải thực phẩm.

Biểu đồ cho thấy chiếc xe tải được bán bao nhiêu chiếc bánh kếp theo mỗi kiểu.

Bên cạnh các bản tóm tắt cho từng kiểu bánh kếp, xe bán đồ ăn cũng có dữ liệu bán hàng mỗi ngày.

Xe tải có thể đậu ở Cupertino và San Francisco.

Chúng tôi muốn giúp xe bán đồ ăn biết nơi đỗ xe vào các ngày khác nhau trong tuần.

Để trả lời câu hỏi này, hãy hình dung dữ liệu dưới dạng chuỗi thời gian cho hai thành phố của chúng ta.

Để xem việc khám phá các thiết kế khác nhau dễ dàng như thế nào, chúng tôi sẽ thực hiện ba lần lặp lại biểu đồ.

Chúng ta sẽ bắt đầu bằng cách tạo một biểu đồ thanh cho Cupertino.

Sau đó, chúng tôi sẽ thêm dữ liệu cho San Francisco và thêm một bộ chọn.

Và cuối cùng, chúng ta sẽ kết hợp dữ liệu thành một biểu đồ đường nhiều chuỗi.

Hãy bắt đầu với biểu đồ thanh hiển thị số lượng bánh kếp trung bình được bán mỗi ngày trong tuần.

Dữ liệu bán hàng có ngày trong tuần được lưu trữ dưới dạng ngày và số lượng bánh kếp mà chiếc xe tải bán dưới dạng số nguyên.

Dữ liệu cho Cupertino nằm trong một biến số, cupertinoData.

Như trước đây, chúng tôi bắt đầu tạo một biểu đồ với BarMark.

Chúng tôi đặt vị trí x của thanh được suy ra từ ngày của ngày...

...Và chiều cao bắt nguồn từ việc bán hàng.

Và điều này cho chúng ta lần lặp lại đầu tiên của biểu đồ hiển thị dữ liệu bán hàng mỗi ngày trong tuần cho Cupertino.

Đối với lần lặp lại thứ hai, hãy thêm dữ liệu cho San Francisco.

Sử dụng biểu đồ này, chúng tôi muốn giúp xe tải bánh kếp quyết định đỗ xe ở đâu trong tuần.

Dữ liệu bán hàng cho San Francisco nằm trong biến sfData.

Chúng tôi muốn chuyển đổi giữa hai thành phố và xem biểu đồ thanh cho mỗi thành phố.

Chúng tôi bắt đầu với việc thêm một biến trạng thái, thành phố.

Và sau đó chúng tôi thêm một bộ chọn SwiftUI cho thành phố vào Chế độ xem.

Để chuyển đổi giữa các bản tóm tắt bán hàng cho hai thành phố thông qua biến thành phố, chúng tôi thêm một câu lệnh chuyển đổi cho biến dữ liệu.

Và tất cả những gì chúng ta phải làm bây giờ là thay thế dữ liệu cho Cupertino bằng dữ liệu chuyển đổi giữa hai người - Cupertino và San Francisco.

Nếu tôi chuyển đổi nút chuyển đổi, các biểu đồ sẽ chuyển đổi giữa hai thành phố.

Biểu đồ Swift hoạt động với hoạt ảnh SwiftUI, vì vậy nếu chúng tôi chỉ định rằng quá trình chuyển đổi nên được hoạt hình với easeInOut, các thanh sẽ hoạt hình khi tôi chuyển đổi giữa hai thành phố và cũng chỉ hiển thị một vị trí tại một thời điểm.

Điều này mang lại cho ứng dụng của chúng tôi giao diện phù hợp.

Là lần lặp lại cuối cùng của chúng tôi, chúng tôi sẽ hiển thị cả hai chuỗi trong một biểu đồ đường.

Để tạo biểu đồ đường này, chúng tôi bắt đầu với biểu đồ thanh từ Cupertino từ trước.

Dữ liệu cho Cupertino và San Francisco nằm trong một chuỗi các chuỗi.

Các cấu trúc hàng loạt có dữ liệu thành phố và bán hàng.

Trước khi chúng tôi hiển thị cả hai loạt, hãy tập trung vào dữ liệu Cupertino.

Trong biểu đồ, chúng ta có thể lặp lại dữ liệu chuỗi.

Hãy nhớ rằng, trình khởi tạo biểu đồ hoạt động giống như ForEach.

Sau đó, chúng tôi có thể thay thế dữ liệu cụ thể cho Cupertino bằng dữ liệu bán hàng từ chuỗi.

Để phân biệt dữ liệu cho hai thành phố, tôi muốn màu sắc của các thanh có nguồn gốc từ thành phố.

Đối với điều này, chúng tôi đặt foregroundStyle có nguồn gốc từ thành phố trong sê-ri.

Để hiển thị màu sắc của thành phố, Swift Charts tạo ra một huyền thoại bên dưới biểu đồ.

Bây giờ, tôi thêm dữ liệu cho vị trí thứ hai.

Như bạn có thể thấy trong bản xem trước, Swift Charts tự động chọn một màu cho San Francisco và nó hiển thị các thanh cho cả hai thành phố trong biểu đồ.

Biểu đồ hiển thị dữ liệu cho một ngữ cảnh cụ thể và hình ảnh trực quan có thể cần thay đổi khi dữ liệu hoặc câu hỏi của chúng tôi thay đổi.

Swift Charts giúp bạn dễ dàng nhanh chóng thay đổi biểu đồ của mình để khám phá các thiết kế khác nhau.

Biểu đồ thanh xếp chồng lên nhau rất tuyệt vời để hiển thị tổng doanh số trung bình mỗi ngày; nhưng nếu tôi muốn so sánh giữa hai thành phố thì sao?

Có lẽ một biểu đồ điểm hoặc đường sẽ tốt hơn.

Chúng tôi thay đổi loại đánh dấu từ BarMark thành PointMark để hiển thị bánh kếp được bán dưới dạng điểm hoặc thành LineMark để hiển thị dữ liệu dưới dạng biểu đồ đường.

Biểu đồ đường rất phù hợp với dữ liệu bán hàng vì nó cho phép chúng tôi so sánh hai thành phố trong mỗi ngày trong tuần.

Biểu đồ có thể kết hợp nhiều nhãn hiệu.

Ví dụ, tôi có thể thêm một PointMark.

Để làm cho chuỗi có thể phân biệt được mà không cần màu sắc, chúng tôi đặt biểu tượng có nguồn gốc từ thành phố.

Bây giờ mỗi điểm biểu thị thành phố bằng màu sắc và biểu tượng của nó.

Bởi vì việc hiển thị các điểm trên một dòng là phổ biến, Swift Charts có một cách viết tắt cho điều này khi chúng tôi áp dụng công cụ sửa đổi biểu tượng cho LineMark.

Phong cách của các điểm thích nghi với đường thẳng.

Biểu đồ này thật tuyệt.

Chúng tôi có thể dễ dàng so sánh các xu hướng bán hàng trong suốt cả tuần.

Chúng tôi quan sát thấy rằng doanh số bán hàng đặc biệt cao ở San Francisco vào Chủ nhật.

Swift Charts giúp chúng tôi dễ dàng lặp lại nhiều thiết kế chỉ trong vài phút.

Vì vậy, để kết thúc, hãy xem cách Swift Charts giúp dễ dàng lặp lại nhanh chóng và đồng thời đủ linh hoạt để tích hợp liền mạch các biểu đồ vào phong cách độc đáo của ứng dụng của bạn.

Trong Swift Charts, bạn xây dựng biểu đồ bằng cách thành phần của các dấu hiệu với các thuộc tính đánh dấu.

Trong ứng dụng Pancake, chúng tôi đã soạn các biểu đồ với ba dấu khác nhau và bốn thuộc tính dấu.

Ví dụ, chúng tôi đã tạo một biểu đồ thanh đơn giản dưới dạng dấu thanh với các thuộc tính x và y.

Chúng tôi cũng đã thay đổi nhãn hiệu để nhanh chóng khám phá các thiết kế, như biểu đồ có điểm hoặc biểu đồ đường nơi chúng tôi sử dụng dấu đường với thuộc tính x và y.

Chúng tôi cũng thấy rằng chúng tôi có thể thêm các thuộc tính, như Foreground Style, để hiển thị nhiều chuỗi trong một biểu đồ đường.

Và một biểu đồ không nhất thiết phải chỉ có một dấu.

Chúng tôi đã kết hợp các điểm và đường thẳng, và hiển thị cùng một giá trị với hai thuộc tính dấu.

Swift Charts hỗ trợ nhiều thuộc tính đánh dấu và đánh dấu hơn chúng ta đã sử dụng ngày nay.

Nó cũng có thể mở rộng và bạn có thể thêm các dấu tùy chỉnh.

Các thuộc tính đánh dấu và dấu là những gì cho phép Biểu đồ Swift thể hiện một loạt các thiết kế biểu đồ với một số lượng nhỏ các khối xây dựng khai báo.

Có nhiều cách để bạn có thể kết hợp các khối xây dựng này để tạo ra trực quan hóa dữ liệu tuyệt vời cho các ứng dụng của mình.

Cùng với những gì bạn có thể làm trong SwiftUI, khả năng thực sự là vô tận.

Và như tôi đã chỉ cho bạn hôm nay, bạn nhận được hỗ trợ miễn phí Chế độ tối, kích thước màn hình thiết bị khác nhau, Loại động, VoiceOver và Biểu đồ âm thanh.

Ngoài ra, Swift Charts hỗ trợ chế độ High-Contrast.

Và cuối cùng, Swift Charts hoạt động trên các ngôn ngữ và đa nền tảng.

Biểu đồ có cùng mã hoạt động trên tất cả các nền tảng của Apple.

Và các tùy chỉnh giống nhau hoạt động ở mọi nơi để bạn có thể điều chỉnh biểu đồ cho từng nền tảng.

Hôm nay, tôi đã chỉ cho bạn cách Swift Charts sử dụng cú pháp thành phần mạnh mẽ của SwiftUI để bạn có thể tạo nhiều biểu đồ hơn với ít mã hơn.

Swift Charts cũng cung cấp một bộ tùy chọn tùy chỉnh phong phú, vì vậy bạn có thể tạo kiểu biểu đồ để phù hợp với ứng dụng của mình.

Và bây giờ bạn đã biết cách lập biểu đồ lãnh thổ mới và tạo biểu đồ, bạn có thể học cách tùy chỉnh nó trong tài liệu và trong bài nói chuyện tiếp theo của chúng tôi, nơi bạn sẽ nâng cao tiêu chuẩn.

♪