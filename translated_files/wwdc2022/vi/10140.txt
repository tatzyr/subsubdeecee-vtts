10140

♪ ♪

Adam: Xin chào, tên tôi là Adam và tôi là một kỹ sư trong nhóm SharePlay.

Tôi rất vui được nói chuyện với bạn về những gì mới trong SharePlay và cách bạn có thể áp dụng nó trong ứng dụng của mình.

Để bắt đầu, chúng ta sẽ nói về một số API mới để bắt đầu SharePlay từ ứng dụng của bạn.

Tiếp theo, chúng ta sẽ tham gia vào một số cập nhật GroupSessionMessenger thú vị.

Cuối cùng, một số phương pháp hay nhất xung quanh việc triển khai trải nghiệm SharePlay.

Bắt đầu SharePlay từ ứng dụng của bạn.

Chúng tôi đã nghe phản hồi của bạn và chúng tôi đã gửi, Kể từ iOS 15.4, giờ đây bạn có thể tận dụng API mới để cho phép ứng dụng của mình khởi động SharePlay mà không cần cuộc gọi FaceTime hiện có.

Vậy hãy xem nó trông như thế nào.

Vì vậy, bây giờ tất cả những gì chúng ta phải làm là tìm ứng dụng SharePlay yêu thích của mình.

Giả sử ứng dụng Âm nhạc.

Và chúng ta sẽ tìm một bài hát mà chúng ta muốn SharePlay, như Viral Hits, và nhấn và giữ nó.

Bây giờ trong menu ngữ cảnh, bạn sẽ thấy rằng bây giờ chúng ta có một nút SharePlay mới.

Vì vậy, tôi sẽ tiếp tục và nhấn vào đó, và nó sẽ đưa ra người chọn người.

Vì vậy chúng ta có thể chọn Sue và bắt đầu một cuộc gọi FaceTime.

Và, như bạn có thể thấy, bây giờ chúng ta có một viên thuốc ở đây với hoạt động được dàn dựng.

Vì vậy, nếu Sue tham gia, chúng ta có thể tiếp tục và bắt đầu, và chúng ta sẽ có phiên họp nhóm.

Chà, tôi nghĩ tất cả đều khá tuyệt, nhưng hãy chia nhỏ nó thành một số chi tiết hơn.

Ở đây chúng tôi có khả năng cho người dùng bắt đầu SharePlay từ bảng chia sẻ và bạn có thể tự hỏi mình cần làm gì để điều này hoạt động.

Chà, câu trả lời là nếu ứng dụng của bạn có quyền SharePlay thì bạn sẽ nhận được nút này miễn phí với quy trình không chấp nhận của chúng tôi, nhưng đây không phải là trải nghiệm người dùng tối ưu vì người dùng sẽ không thể khởi động GroupActivity thông qua giao diện người dùng hệ thống và thay vào đó, sẽ cần tương tác lại với ứng dụng của bạn để

Vì vậy, hãy xem cách bạn áp dụng các API mới của chúng tôi cho ứng dụng của mình.

Câu trả lời là, nó đơn giản như đăng ký GroupActivity của bạn trên NSItemProvider và sau đó cung cấp ItemProvider cho bảng chia sẻ.

Bạn vẫn muốn cung cấp nút SharePlay nhưng không hiển thị nó nổi bật?

Không vấn đề gì.

Bạn có thể điều chỉnh hành vi với allowsProminentActivity trên UIActivityViewController.

Chỉ cần đặt cho phép ProminentActivity thành false.

Hoặc điều gì sẽ xảy ra nếu bạn có một phần nội dung trong ứng dụng của mình không hỗ trợ SharePlay?

Chà, mặc dù chúng tôi muốn mọi thứ hỗ trợ SharePlay, bạn có thể làm cho SharePlay không hiển thị trong bảng chia sẻ bằng cách yêu cầu UIActivityViewController loại trừ loại hoạt động SharePlay.

Và nếu bạn muốn đặt một nút trực tiếp trong ứng dụng của mình, thì bạn có thể sử dụng API GroupActivitySharingController mới của chúng tôi để tạo UIViewController của chúng tôi và sau đó, chỉ cần trình bày nó!

Khi ai đó nhấn vào trải nghiệm trong ứng dụng của bạn và bắt đầu phiên FaceTime hoặc SharePlay, họ sẽ được cung cấp khả năng kích hoạt GroupActivity theo giai đoạn.

Sau khi kích hoạt, ứng dụng của bạn sẽ nhận được GroupSession.

Và đừng lo lắng nếu bạn đang nói với chính mình "Chờ đã, Adam, bạn vừa nói 'Staged GroupActivity' à?"

Tại sao, vâng. Vâng, tôi đã làm!

Nhưng hãy giữ vững suy nghĩ đó và đi sâu hơn vào điều đó sau khi chúng ta đang nói về các phương pháp hay nhất.

Hiện tại, hãy xem cách chúng ta có thể áp dụng điều này trong ứng dụng DrawTogether của chúng ta.

Đây là ứng dụng DrawTogether của chúng tôi.

Đây là cùng một ứng dụng từ cuộc nói chuyện WWDC trước đây của chúng tôi từ năm 2021 "Xây dựng trải nghiệm tùy chỉnh với Hoạt động Nhóm", vì vậy nếu bạn chưa xem nó, tôi thực sự khuyên bạn nên kiểm tra nó.

Bây giờ bạn đã tiếp tục và thấy điều đó, bạn sẽ nhớ rằng không có bất kỳ nút chia sẻ nào trong ứng dụng của chúng tôi, nhưng chúng tôi đã có nút SharePlay khi bạn đủ điều kiện tham gia GroupSession.

Hãy tiếp tục và sửa đổi hành vi đó để ngay cả khi isEligibleForGroupSession là sai, chúng tôi hiển thị nút và bây giờ, cho phép người dùng bắt đầu phiên SharePlay.

Và bây giờ chúng ta có thể tiếp tục và xem nó hoạt động.

Hãy tiếp tục và đi đến mã ControlBar của chúng tôi.

Bây giờ, như bạn có thể thấy ở đây, chúng tôi có một tuyên bố 'nếu' đảm bảo rằng chúng tôi không có phiên nhóm và chúng tôi đủ điều kiện cho một phiên nhóm.

Vì vậy, hãy tiếp tục và loại bỏ tuyên bố thứ hai, và di chuyển nó xuống đây.

Và bây giờ những gì chúng ta phải làm là đăng ký một biến mới để chúng ta biết khi nào nên trình bày bộ điều khiển chia sẻ GroupActivity của mình.

Vì vậy, chúng ta sẽ có một biến mới ở đây, và bây giờ hãy xử lý khi biến đó thay đổi thành true.

Và chúng ta phải có một trình bao bọc ngay bây giờ để chúng ta có thể trình bày bộ điều khiển chia sẻ GroupActivity trong SwiftUI.

Và bây giờ, cuối cùng, tất cả những gì chúng ta phải làm là có một câu lệnh 'khác' để đặt isSharingControllerPresented thành true nếu chúng ta không đủ điều kiện cho một GroupSession.

Và bây giờ chúng ta có thể thấy mã của chúng ta đang hoạt động.

Vì vậy, chúng tôi sẽ tiếp tục và đi đến ứng dụng DrawTogether., và bạn có thể thấy, chúng tôi có nút SharePlay của mình.

Vì vậy, bây giờ chúng tôi có thể nhấn nó, và chúng tôi được cung cấp cho người chọn.

Và bây giờ chúng tôi đã có một trải nghiệm tuyệt vời để bắt đầu SharePlay từ ứng dụng của bạn.

Nhưng đó không phải là bản cập nhật duy nhất mà chúng tôi thực hiện.

Vì vậy, bây giờ hãy nói về một số cập nhật GroupSessionMessenger mà chúng tôi đã thực hiện.

Chúng tôi có hai bản cập nhật mới thú vị trong GroupSessionMessenger của chúng tôi.

Đối với bản cập nhật đầu tiên, bạn có thể đã gặp phải con số kỳ diệu này.

Đó là kích thước tải trọng mà bạn có thể gửi qua GroupSessionMessenger.

Chà, không còn nữa.

Bây giờ chúng tôi đã làm nó để kích thước tải trọng lớn hơn bốn lần ở mức 256KB.

Với sự thay đổi này, ứng dụng của bạn không cần phải lo lắng về việc chia nhỏ tin nhắn của bạn thành các tin nhắn nhỏ hơn.

Bạn có thể chỉ cần gửi thông điệp của mình và tập trung vào việc xây dựng một trải nghiệm tuyệt vời.

Và nếu điều đó không đủ kích thích bạn, thì tôi chắc chắn rằng bản cập nhật tiếp theo của chúng tôi sẽ làm được.

Tin nhắn không đáng tin cậy.

Là một phần của GroupSessionMessenger, bây giờ bạn có thể chọn độ tin cậy của tin nhắn.

Điều này cho phép bạn lựa chọn giữa tin nhắn đáng tin cậy hoặc không đáng tin cậy tùy thuộc vào trải nghiệm mong muốn của bạn.

Tất cả những gì chúng tôi phải làm là tận dụng trình khởi tạo mới trên GroupSessionMessenger cho phép chúng tôi chỉ định MessageReliability.

Bây giờ chúng ta đã hiểu cách sử dụng API, còn trải nghiệm thì sao?

Khi nào chúng ta muốn sử dụng tin nhắn không đáng tin cậy?

Chà, đó là một câu hỏi tuyệt vời Mọi người đang thực hiện các hành động thời gian thực trên FaceTime và SharePlay.

Vì vậy, hãy tưởng tượng rằng chúng ta có ba người trong một phiên.

Amy, Brian, và Chris.

Tất cả họ đều được tham gia vào một phiên và được đồng bộ hóa theo thời gian, bộ phim của chúng tôi cũng vậy.

Nhưng điều gì sẽ xảy ra nếu Amy muốn làm điều gì đó liên quan đến thời gian cụ thể mà họ đang ở trong thời điểm đó?

Chà, nếu bạn sử dụng tin nhắn đáng tin cậy, thì chúng tôi đảm bảo rằng tin nhắn sẽ được nhận trên tất cả các thiết bị, nhưng điều đó không có nghĩa là chúng sẽ được nhận vào thời điểm họ mong đợi.

Ví dụ, Chris đã nhận được tin nhắn, nhưng Brian đã bỏ tin nhắn lần đầu tiên và nhận được nó đúng cách sau đó.

Nhưng hãy nhớ rằng, bộ phim vẫn đang phát.

Vì vậy, bây giờ chúng ta đến nơi Amy dự định phản ánh thông điệp và Brian không có nó.

Anh ấy nhận được nó sau, nhưng tại thời điểm đó, đã quá muộn.

Chà, đây là một trường hợp hoàn hảo cho việc kết nối mạng không đáng tin cậy.

Nó cho phép bạn, nhà phát triển, biết thông tin nào cần được nhận một cách đáng tin cậy ở phía bên kia và thông tin nào không.

Đây là một khái niệm quan trọng cần hiểu khi thiết kế các giao thức có trải nghiệm người dùng bị ảnh hưởng sâu sắc bởi độ trễ.

Các tin nhắn không đáng tin cậy đang sử dụng UDP và có độ trễ và chi phí thấp hơn với mỗi tin nhắn liên quan và do đó, bạn sẽ có trải nghiệm thời gian thực hơn khi gửi tin nhắn qua chúng.

Vì vậy, bây giờ hãy nói về cách chúng ta sẽ sử dụng cái này cho ứng dụng DrawTogether của chúng ta. Bạn có thể nhớ màn hình này từ WWDC '21, đặc biệt là với khuôn mặt cười được vẽ đẹp mắt của tôi.

Hãy đi sâu vào những gì xảy ra khi bạn vẽ khuôn mặt cười của mình trên màn hình.

Trong ứng dụng của chúng tôi, chúng tôi có một số mã nghe GestureRecognizer và sau đó chúng tôi gửi tin nhắn mỗi khi nhận thấy sự thay đổi.

Điều này có nghĩa là khi chúng tôi đang vẽ khuôn mặt cười của mình, chúng tôi liên tục gửi tin nhắn mới cho mỗi điểm mà GestureRecognizer mang lại cho chúng tôi.

Đó là rất nhiều tin nhắn!

Chà, bây giờ chúng ta có thể thay đổi giao thức của mình để sử dụng tin nhắn không đáng tin cậy để tạo ra trải nghiệm vẽ liền mạch hơn.

Những gì chúng tôi sẽ làm ở đây là làm cho nó để mỗi khi chúng tôi nhận được bản cập nhật từ GestureRecognizer của chúng tôi, chúng tôi sẽ gửi điểm mới được thêm vào của mình bằng cách sử dụng tin nhắn không đáng tin cậy.

Khi cử chỉ hoàn tất, chúng tôi sẽ sử dụng tin nhắn đáng tin cậy và cung cấp tất cả các điểm để khách hàng có thể bắt kịp bất kỳ điểm nào mà họ đã bỏ lỡ.

Điều này cho phép chúng tôi tận dụng độ trễ thấp hơn được cung cấp bởi tin nhắn không đáng tin cậy để có trải nghiệm vẽ ngay lập tức hơn.

Vì vậy, hãy xem chúng ta sẽ làm điều này trong mã như thế nào.

Vì vậy, trước tiên chúng ta hãy đi đến tệp tin nhắn của chúng ta.

Và chúng tôi sẽ tiếp tục và xác định loại tin nhắn mới của chúng tôi.

Như bạn có thể thấy, loại tin nhắn mới này khá giống với tin nhắn cũ của chúng tôi, nhưng lần này, sẽ chứa tất cả các điểm cho đột quỵ của chúng tôi.

Bây giờ chúng ta sẽ chuyển sang tệp canvas của chúng ta.

Và chúng ta cần thiết lập một chức năng xử lý để xử lý tin nhắn mới mà chúng ta sẽ nhận được.

Và hãy tiếp tục và tạo ra trình nhắn tin không đáng tin cậy của chúng ta.

Đầu tiên, chúng ta sẽ tạo ra một biến số.

Và bây giờ, hãy khởi tạo nó.

Bây giờ chúng ta sẽ lắng nghe tin nhắn đột quỵ đã hoàn thành.

Và đánh dấu tin nhắn trước đó cũng là tin nhắn không đáng tin cậy.

Nhưng chúng ta cần một cách để gửi tin nhắn.

Vì vậy, chúng ta sẽ đi đến finishedStroke.

Và chúng tôi sẽ tiếp tục và gửi loại tin nhắn mới của chúng tôi.

Và hãy thay đổi chức năng cũ của chúng ta để gửi tất cả các điểm để sử dụng trình nhắn tin không đáng tin cậy.

Và bây giờ chúng ta có thể thấy mã của chúng ta đang hoạt động.

Vì vậy, chúng tôi chuyển sang ứng dụng DrawTogether và chúng tôi có thể thấy nó liền mạch như thế nào.

Và thế là xong!

Và bây giờ, như đã hứa, hãy nói về một số phương pháp hay nhất để triển khai SharePlay của bạn.

Bạn có thể nhớ thuật ngữ này từ trước đó: Staged GroupActivity.

Thuật ngữ đó có ý nghĩa gì đối với ứng dụng của bạn?

Chà, hãy nói qua một kịch bản.

Giả sử rằng thiết bị bên trái của chúng ta, "Adam", bắt đầu SharePlay với thiết bị bên phải của chúng ta, "Brian".

Nhưng Adam đang cố gắng tiếp tục chương trình mà họ đang xem.

Vì vậy, khi ai đó kích hoạt GroupActivity được dàn dựng, chúng tôi muốn tham gia chương trình được nối lại đó vào một thời điểm cụ thể, thay vì bắt đầu lại.

Điều này đặt ra một vấn đề bởi vì "Adam" biết chúng tôi còn 11 phút trong chương trình, nhưng thiết bị của Brian thì không.

Điều này có nghĩa là nếu thiết bị của Brian kích hoạt GroupActivity được dàn dựng, chương trình có thể bắt đầu lại.

Vậy chúng ta có thể làm gì ở đây?

Nó thực sự phụ thuộc vào ứng dụng và trải nghiệm của bạn.

Vì vậy, hãy xem qua một số ý tưởng.

Đối với trường hợp phát lại, chúng tôi sẽ muốn mỗi thiết bị đóng góp trạng thái phát lại ban đầu của nó cho các thiết bị khác để bắt kịp.

Điều này có nghĩa là vì thiết bị của Adam biết trạng thái phát lại là 23 giây, khi anh ấy tham gia phiên, anh ấy sẽ cho tất cả các thiết bị khác biết trạng thái phát lại dự định của mình và họ sẽ sử dụng nó làm nguồn gốc của sự thật.

Nguyên tắc tương tự này áp dụng cho bất kỳ trải nghiệm nào bạn tạo ra bằng SharePlay.

Mỗi người tham gia một phiên nên đóng góp sự hiểu biết của họ về phiên cho những người khác.

Điều này là do các phiên ngang hàng và không có chủ sở hữu.

Vậy hãy nói thêm một chút về điều đó.

Các phiên không chủ sở hữu là một khái niệm khó nắm bắt, nhưng chúng rất quan trọng khi thiết kế trải nghiệm SharePlay phù hợp.

Trong trường hợp này, Adam, ở bên trái, muốn chuyển phiên của mình cho Apple TV của mình.

Điều này dẫn đến việc điện thoại của anh ấy bị rớt GroupSession và TV của anh ấy tham gia.

Nhưng điều gì sẽ xảy ra nếu chúng ta thực hiện quyền sở hữu?

Chà, chủ sở hữu đã bỏ đi, vì vậy...

Và hãy nhớ rằng, điều này không chỉ dành cho TV.

Trong iOS 16, bây giờ chúng ta đã chuyển giao FaceTime.

Vì vậy, Adam tiếp tục và bỏ iPad của mình, và tốt, điều tương tự.

Bùng nổ Và đó không phải là tất cả.

Chúng tôi vừa nói về một số ví dụ về luồng người dùng trong đó ai đó cố gắng di chuyển phiên từ thiết bị này sang thiết bị khác, nhưng có những trường hợp khác cần suy nghĩ.

Được rồi, đừng lo lắng, chúng tôi sẽ giữ nó ngắn gọn chỉ với một ví dụ nữa.

Màn hình này có vẻ hơi quen thuộc.

Đó là FaceTime HUD.

Nhưng điều gì sẽ xảy ra nếu chúng ta nhấp vào nút SharePlay?

Bây giờ chúng tôi đã trình bày với một nút, Kết thúc SharePlay, cho phép bạn, bạn đoán nó, kết thúc SharePlay.

Điều này cho phép bạn kết thúc SharePlay cho tất cả mọi người, về cơ bản là hệ thống gọi .end() trên GroupSession thay mặt cho ứng dụng của bạn.

Điều này có nghĩa là cho dù bạn có cẩn thận đến đâu khi không gọi .end() trừ khi thiết bị đó là chủ sở hữu, hệ thống vẫn có thể thay mặt bạn gọi .end() trên GroupSession.

Vì vậy, hãy nhớ rằng, mặc dù nó có thể là một khái niệm khó nắm bắt, nhưng đảm bảo rằng ứng dụng của bạn không có ý thức về quyền sở hữu có nghĩa là nhìn chung, nó sẽ mang lại trải nghiệm tốt hơn nhiều.

Bây giờ bạn đã nghe toàn bộ phiên, hãy áp dụng các API mới của chúng tôi để bắt đầu SharePlay từ bên trong ứng dụng của bạn và khám phá các cách để ứng dụng của bạn giao tiếp với độ trễ mới, độ trễ thấp, cách sử dụng tin nhắn không đáng tin cậy.

Chúng tôi rất muốn nghe ý kiến của tất cả các bạn, vì vậy vui lòng tiếp tục gửi phản hồi bằng Trợ lý Phản hồi.

Tôi hy vọng bạn thích tất cả những thay đổi mà chúng tôi đã thực hiện và chúng tôi mong muốn được thấy tất cả những trải nghiệm tuyệt vời mà bạn xây dựng.

Nếu bạn chưa có, hãy xem bài nói chuyện WWDC khác của chúng tôi, "Tạo trải nghiệm SharePlay tuyệt vời".

Hoặc, nếu bạn đang tìm kiếm một số cải tiến tuyệt vời mà chúng tôi đã thực hiện xung quanh việc phát lại phương tiện, hãy xem "Hiển thị quảng cáo và các quảng cáo xen kẽ khác trong SharePlay".

Nếu bạn có bất kỳ câu hỏi nào, vui lòng tìm chúng tôi tại phòng thí nghiệm và thử thách của GroupActivities.

Như mọi khi, cảm ơn tất cả các bạn đã theo dõi và có một WWDC tuyệt vời.

Chúng tôi nóng lòng muốn xem những gì bạn xây dựng.