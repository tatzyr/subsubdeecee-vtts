10054

♪ nhạc cụ hip hop ♪

♪

Xin chào. Tôi là Curt, một kỹ sư trong nhóm SwiftUI.

Có một số API mới thú vị để điều hướng trong SwiftUI.

Tôi rất thích xây dựng các ứng dụng với các API mới này và tôi rất vui khi có thể chia sẻ chúng với bạn.

Các API này mở rộng từ các ngăn xếp cơ bản - như trên Apple TV, iPhone và Apple Watch - đến các bài thuyết trình nhiều cột mạnh mẽ.

Các API mới mang lại sự hỗ trợ mạnh mẽ cho điều hướng có lập trình và liên kết sâu, cho phép bạn soạn các phần để xây dựng cấu trúc hoàn hảo cho ứng dụng của mình.

Trong buổi nói chuyện này, tôi sẽ cung cấp cho bạn một số công thức đơn giản để nấu một ứng dụng với điều hướng trong SwiftUI.

Và nếu bạn đã sử dụng SwiftUI, chúng tôi hy vọng những API mới này sẽ giúp bạn nâng tầm nó.

Tôi sẽ bắt đầu với các thành phần đi vào API điều hướng dựa trên dữ liệu mới.

Sau đó, chúng tôi sẽ chuyển sang thực đơn nếm thử của mình: một số công thức nấu ăn nhanh chóng và dễ dàng để kiểm soát điều hướng theo chương trình đầy đủ.

Đối với khóa học tráng miệng, tôi sẽ chia sẻ một số mẹo sử dụng API mới để duy trì trạng thái điều hướng trong ứng dụng của bạn.

Nếu bạn đã từng sử dụng điều hướng trong SwiftUI trước đây, bạn có thể tự hỏi các API mới khác nhau như thế nào.

Vì vậy, trước khi đào sâu, hãy xem lại một số API hiện có.

Các API hiện có dựa trên các liên kết gửi các chế độ xem được hiển thị trong các cột khác hoặc trên một ngăn xếp.

Ví dụ, tôi có thể có một danh sách các liên kết điều hướng trong chế độ xem gốc.

Khi tôi nhấn vào một trong những liên kết này, liên kết sẽ đẩy chế độ xem của nó lên ngăn xếp.

Điều này hoạt động tốt cho điều hướng cơ bản và bạn có thể tiếp tục sử dụng mẫu này.

Nhưng hãy quay lại chế độ xem gốc.

Với API điều hướng hiện có, để trình bày một liên kết theo chương trình, tôi thêm một ràng buộc vào liên kết.

Ví dụ, tôi có thể trình bày chế độ xem của liên kết này bằng cách đặt item.showDetail thành true.

Nhưng điều này có nghĩa là tôi cần một ràng buộc riêng cho mỗi liên kết.

Với API mới, chúng tôi nâng liên kết lên toàn bộ vùng chứa, được gọi là NavigationStack.

Đường dẫn ở đây là một bộ sưu tập đại diện cho tất cả các giá trị được đẩy trên ngăn xếp.

NavigationLinks nối thêm các giá trị vào đường dẫn.

Bạn có thể liên kết sâu bằng cách biến đổi đường dẫn; hoặc bật lên chế độ xem gốc bằng cách xóa tất cả các mục khỏi đường dẫn.

Trong bài nói chuyện này, tôi sẽ chỉ cho bạn cách API điều hướng mới cho phép điều hướng theo chương trình dựa trên dữ liệu.

Tôi hy vọng bạn thấy nó mạnh mẽ và dễ sử dụng.

Trước khi chuyển sang các công thức nấu ăn để sử dụng các API điều hướng mới, tôi nghĩ sẽ rất hữu ích nếu chia sẻ những gì có trong menu.

Gần đây tôi thực sự bắt đầu nấu ăn và tôi đang làm việc trên một ứng dụng để theo dõi các công thức nấu ăn của mình.

Tôi có rất nhiều ý tưởng về những cách khác nhau để trình bày thông tin này.

Ví dụ, đây là cách tiếp cận ba cột.

Cột đầu tiên cho phép tôi chọn một danh mục công thức.

Khi tôi chọn một danh mục, cột thứ hai liệt kê các công thức nấu ăn tôi đã thu thập.

Và khi tôi chọn một công thức, khu vực chi tiết hiển thị các thành phần cho công thức đó.

Khu vực chi tiết cũng có các liên kết đến một lựa chọn các công thức nấu ăn liên quan.

Bà tôi luôn nói, "Vỏ bánh tạo nên chiếc bánh."

Vậy đó là những gì chúng ta đang nấu hôm nay.

Thành phần của chúng tôi là các API điều hướng mới.

Hãy cùng tìm hiểu những điều đó, sau đó chúng ta sẽ xem xét một số công thức điều hướng cụ thể kết hợp chúng lại với nhau.

Các API điều hướng mới giới thiệu một vài loại vùng chứa mới mà bạn có thể sử dụng để mô tả cấu trúc ứng dụng của mình, cùng với một loạt NavigationLink mới để giúp khách của bạn di chuyển xung quanh cấu trúc đó.

Vùng chứa mới đầu tiên là NavigationStack.

NavigationStack đại diện cho giao diện push-pop như bạn thấy trong Find My trên Apple Watch, Cài đặt trên iPhone và ứng dụng Cài đặt Hệ thống mới trên macOS Ventura.

Loại vùng chứa mới thứ hai là NavigationSplitView.

NavigationSplitView hoàn hảo cho các ứng dụng nhiều cột như Mail hoặc Notes trên Mac và iPad.

Và NavigationSplitView tự động thích ứng với ngăn xếp một cột trên iPhone, trong Slide Over trên iPad và thậm chí trên Apple Watch và Apple TV.

NavigationSplitView có hai bộ khởi tạo.

Một bộ, như được hiển thị ở đây, tạo ra trải nghiệm hai cột.

Bộ khởi tạo khác tạo ra trải nghiệm ba cột.

NavigationSplitView đi kèm với một loạt các tùy chọn cấu hình cho phép bạn tùy chỉnh chiều rộng cột, trình bày thanh bên và thậm chí hiển thị và ẩn các cột theo chương trình.

Tôi sẽ không đi sâu vào các tùy chọn cấu hình trong bài nói chuyện này, nhưng vui lòng xem bài nói chuyện của đồng nghiệp Raj của tôi, "SwiftUI trên iPad: Sắp xếp giao diện của bạn" và tài liệu tuyệt vời về cách điều chỉnh NavigationSplitView để phù hợp với ứng dụng của bạn.

Trước đây, NavigationLinks luôn bao gồm một tiêu đề và chế độ xem để trình bày.

Các giống mới vẫn bao gồm một tiêu đề, nhưng thay vì một quan điểm để trình bày, chúng thể hiện một giá trị.

Ví dụ, liên kết này đang trình bày công thức làm bánh táo.

Như chúng ta sẽ thấy, NavigationLink rất thông minh.

Hành vi của một liên kết phụ thuộc vào NavigationStack hoặc danh sách mà nó xuất hiện.

Để xem các API mới ngon miệng này hoạt động cùng nhau như thế nào, hãy xem một số công thức cụ thể để sử dụng chúng trong ứng dụng sách dạy nấu ăn của tôi và trong các ứng dụng của bạn.

Công thức đầu tiên của chúng tôi là một chồng chế độ xem cơ bản, giống như bạn tìm thấy trong Find My trên Apple Watch hoặc Cài đặt trên iPhone.

Tôi có một phần cho mỗi danh mục.

Trong một phần, tôi có thể nhấn vào một công thức để xem chi tiết.

Trong bất kỳ công thức nào, tôi có thể nhấn vào một trong các công thức liên quan để đẩy nó lên ngăn xếp.

Tôi có thể sử dụng nút quay lại để quay lại công thức ban đầu và sau đó đến danh sách danh mục.

Công thức này kết hợp NavigationStack với nhiều loại NavigationLink mới và công cụ sửa đổi điểm đến điều hướng.

Hãy xem làm thế nào.

Tôi sẽ bắt đầu với một NavigationStack cơ bản.

Bên trong, tôi có một Danh sách lặp lại trên tất cả các danh mục của tôi và một Tiêu đề điều hướng.

Bên trong Danh sách, tôi có một phần cho mỗi danh mục.

Tiếp theo, bên trong mỗi phần, tôi sẽ thêm một NavigationLink cho mỗi công thức trong danh mục.

Hiện tại, tôi sẽ làm cho liên kết trình bày chế độ xem RecipeDetail của mình.

Cái này đang sử dụng NavigationLink đích xem hiện có.

Và thế là đủ để có được trải nghiệm điều hướng này khi nấu ăn cùng.

Nhưng còn điều hướng có lập trình thì sao?

Để thêm điều hướng có lập trình, tôi cần tách hai phần của liên kết điều hướng này: giá trị mà nó trình bày và chế độ xem đi kèm với giá trị đó.

Hãy xem làm thế nào.

Đầu tiên, tôi sẽ kéo chế độ xem đích ra khỏi liên kết và vào công cụ sửa đổi navigationDestination mới.

Công cụ sửa đổi này khai báo loại dữ liệu được trình bày mà nó chịu trách nhiệm; ở đây, đó là một Công thức.

Công cụ sửa đổi lấy trình tạo chế độ xem mô tả chế độ xem nào cần đẩy lên ngăn xếp khi giá trị công thức được trình bày.

Sau đó, tôi sẽ chuyển sang một trong những NavigationLinks mới và chỉ trình bày giá trị công thức.

Hãy nhìn trộm dưới mui xe và xem NavigationStack làm cho công việc này hoạt động như thế nào.

Mỗi ngăn xếp điều hướng đều theo dõi một đường dẫn đại diện cho tất cả dữ liệu mà ngăn xếp đang hiển thị.

Khi ngăn xếp chỉ hiển thị chế độ xem gốc của nó, như được hiển thị ở đây, đường dẫn trống.

Tiếp theo, ngăn xếp cũng theo dõi tất cả các điểm đến điều hướng được khai báo bên trong nó hoặc bên trong bất kỳ chế độ xem nào được đẩy lên ngăn xếp.

Nói chung, đây là một tập hợp, mặc dù đối với ví dụ này, chúng ta chỉ có một điểm đến.

Hãy thêm các chế độ xem được đẩy vào sơ đồ.

Bây giờ, vì đường dẫn trống, danh sách các chế độ xem được đẩy cũng vậy.

Bây giờ, giống như sữa và bánh quy, điều kỳ diệu xảy ra khi chúng ta ghép chúng lại với nhau.

Khi tôi nhấn vào một liên kết trình bày giá trị, nó sẽ thêm giá trị đó vào đường dẫn.

Sau đó, ngăn xếp điều hướng ánh xạ các điểm đến của nó qua các giá trị đường dẫn để quyết định chế độ xem nào sẽ đẩy lên ngăn xếp.

Bây giờ, từ công thức bánh táo của tôi, nếu tôi nhấn vào Pie Crust, liên kết cũng sẽ thêm nó vào đường dẫn.

NavigationStack thực hiện phép thuật của mình và đẩy một chế độ xem RecipeDetail khác lên ngăn xếp.

Đối với mỗi giá trị tôi thêm vào đường dẫn, NavigationStack sẽ đẩy một chế độ xem khác.

Khi tôi nhấn vào nút quay lại, NavigationStack sẽ xóa mục cuối cùng khỏi đường dẫn và khỏi chế độ xem được nhấn.

Và NavigationStack có thêm một mẹo để cung cấp.

Nó cho phép chúng tôi kết nối với đường dẫn này bằng cách sử dụng một ràng buộc.

Hãy quay lại mã của chúng tôi.

Đây là nơi chúng tôi đã ở.

Để liên kết đường dẫn, trước tiên tôi sẽ thêm một số Trạng thái.

Bởi vì mọi giá trị được đẩy lên ngăn xếp này là một công thức, tôi có thể sử dụng một loạt các công thức nấu ăn làm con đường của mình.

Nếu bạn cần trình bày nhiều loại dữ liệu trên một ngăn xếp, hãy chắc chắn kiểm tra bộ sưu tập NavigationPath xóa kiểu mới.

Khi tôi có trạng thái đường dẫn của mình, tôi thêm một đối số vào NavigationStack của mình và chuyển một ràng buộc đến đường dẫn.

Với điều đó tại chỗ, tôi có thể làm cho ngăn xếp của mình nóng hổi.

Ví dụ, tôi có thể thêm một phương pháp để chuyển sang một công thức cụ thể.

Hoặc từ bất cứ nơi nào trên ngăn xếp của tôi, tôi có thể quay lại thư mục gốc chỉ bằng cách đặt lại đường dẫn.

Đó là cách chuẩn bị một ngăn xếp có thể đẩy được bằng cách sử dụng NavigationStack mới, NavigationLinks trình bày giá trị và navigationDestinations trong SwiftUI.

Công thức này hoạt động trên tất cả các nền tảng, bao gồm cả Mac, nhưng thực sự tỏa sáng trên iPhone, Apple TV và Apple Watch.

Để xem NavigationStack đang hoạt động, hãy nhớ xem "Xây dựng ứng dụng năng suất cho Apple Watch".

Công thức tiếp theo của chúng tôi là trình bày nhiều cột mà không có bất kỳ ngăn xếp nào, giống như bạn tìm thấy trong Mail trên Mac và iPad.

Trên iPad, thanh bên ban đầu bị ẩn.

Tôi có thể tiết lộ nó và chọn một danh mục.

Sau đó, trong cột thứ hai, tôi có thể chọn một công thức.

Cột thứ ba hiển thị chi tiết công thức.

Công thức này kết hợp NavigationSplitView với nhiều loại NavigationLink mới và lựa chọn Danh sách.

Công thức này tuyệt vời trên các thiết bị lớn hơn vì nó giúp tránh phương thức.

Tôi có thể xem tất cả thông tin của mình mà không cần phải đi sâu vào.

Hãy xem làm thế nào.

Tôi sẽ bắt đầu với NavigationSplitView ba cột với chế độ xem giữ chỗ cho nội dung và chi tiết.

Sau đó, tôi sẽ thêm một Danh sách trong thanh bên lặp lại trên tất cả các danh mục của tôi và Tiêu đề điều hướng.

Bên trong Danh sách, tôi có một NavigationLink cho mỗi danh mục.

Tiếp theo, tôi sẽ giới thiệu một số Tiểu bang để theo dõi danh mục nào được chọn.

Tôi sẽ điều chỉnh danh sách của chúng tôi trong thanh bên để sử dụng Danh mục đã chọn.

Lưu ý rằng chúng tôi đang chuyển một ràng buộc đến lựa chọn.

Điều này cho phép danh sách và nội dung của nó thao túng lựa chọn.

Khi bạn đặt một liên kết trình bày giá trị bên trong một danh sách với loại lựa chọn phù hợp - danh mục ở đây - liên kết sẽ tự động cập nhật lựa chọn khi được nhấn hoặc nhấp.

Vì vậy, bây giờ khi tôi chọn một danh mục trong thanh bên, SwiftUI sẽ cập nhật Danh mục đã chọn.

Hãy xem bài nói chuyện "Tổ chức giao diện của bạn" của Raj mà tôi đã đề cập trước đó để biết một số thông tin tuyệt vời về lựa chọn và danh sách.

Tiếp theo, tôi sẽ thay thế trình giữ chỗ của mình trong cột nội dung bằng danh sách các công thức nấu ăn cho danh mục đã chọn và thêm Tiêu đề điều hướng cho cột này.

Cũng giống như đối với danh mục đã chọn, tôi có thể sử dụng kỹ thuật tương tự để theo dõi công thức đã chọn trong danh sách nội dung.

Tôi sẽ sử dụng Trạng thái cho Công thức đã chọn, danh sách nội dung của tôi sử dụng trạng thái đó và sử dụng liên kết trình bày giá trị cho mỗi công thức.

Cuối cùng, tôi sẽ cập nhật cột chi tiết để hiển thị, tốt, các chi tiết cho Công thức đã chọn.

Với điều này tại chỗ, tôi một lần nữa có toàn quyền kiểm soát lập trình đối với điều hướng.

Ví dụ, để điều hướng đến công thức trong ngày của tôi, tôi chỉ cần cập nhật trạng thái lựa chọn của mình.

Đó là cách chuẩn bị trải nghiệm điều hướng nhiều cột bằng cách sử dụng NavigationSplitView mới, NavigationLinks trình bày giá trị và Danh sách với lựa chọn trong SwiftUI.

Một điều cực kỳ thú vị khi kết hợp lựa chọn Danh sách và NavigationSplitView như thế này, là SwiftUI có thể tự động điều chỉnh chế độ xem phân chia thành một ngăn xếp duy nhất trên iPhone hoặc trong Slide Over trên iPad.

Những thay đổi đối với lựa chọn sẽ tự động chuyển thành các lần đẩy và bật thích hợp trên iPhone.

Tất nhiên, bài thuyết trình nhiều cột này cũng hoạt động tốt trên Mac.

Và mặc dù Apple TV và Apple Watch không hiển thị nhiều cột, nhưng những nền tảng đó cũng nhận được bản dịch tự động sang một ngăn xếp duy nhất.

NavigationSplitView trong SwiftUI hoạt động trên tất cả các nền tảng.

Tiếp theo, hãy xem cách chúng ta có thể kết hợp tất cả các thành phần này lại với nhau bằng cách xây dựng trải nghiệm điều hướng hai cột như thế trong Ảnh trên iPad và Mac.

Khi tôi chọn một danh mục, khu vực chi tiết hiển thị một lưới tất cả các công thức nấu ăn của tôi trong danh mục đó.

Khi tôi nhấn vào một công thức, nó được đẩy lên một ngăn xếp trong khu vực chi tiết.

Khi tôi nhấn vào một công thức liên quan, nó cũng được đẩy lên ngăn xếp.

Và tôi có thể điều hướng trở lại mạng lưới các công thức nấu ăn.

Công thức này là pièce de résistance của chúng tôi, kết hợp chế độ xem phân chia điều hướng, ngăn xếp, liên kết, điểm đến và danh sách.

Hãy xem tất cả các thành phần này kết hợp với nhau như thế nào.

Tôi sẽ bắt đầu với NavigationSplitView hai cột.

Cột đầu tiên giống hệt như công thức trước đó.

Tôi có một số Trạng thái để theo dõi Danh mục đã chọn và Danh sách sử dụng liên kết với trạng thái đó và Liên kết Điều hướng trình bày giá trị và Tiêu đề điều hướng cần thiết.

Sự khác biệt trong công thức này nằm ở khu vực chi tiết.

Các API điều hướng mới thực sự tận dụng thành phần.

Giống như tôi có thể đặt một danh sách bên trong một cột của NavigationSplitView, tôi cũng có thể đặt một NavigationStack bên trong một cột.

Chế độ xem gốc của Ngăn xếp Điều hướng này là RecipeGrid của tôi.

Lưu ý rằng RecipeGrid nằm bên trong NavigationStack.

Điều đó có nghĩa là tôi có thể đặt các công cụ sửa đổi liên quan đến ngăn xếp bên trong RecipeGrid.

Hãy phóng to nội dung của RecipeGrid để xem điều đó có nghĩa là gì.

RecipeGrid là một chế độ xem và lấy một danh mục làm tham số.

Bởi vì danh mục là tùy chọn ở đây, tôi sẽ bắt đầu với if-let.

Trường hợp khác xử lý một lựa chọn trống.

Bên trong if của tôi, tôi sẽ thêm chế độ xem cuộn và lưới lười.

Bố cục lưới lười biếng có một chuỗi các chế độ xem.

Ở đây, tôi đang sử dụng ForEach để lặp lại các công thức nấu ăn của mình.

Đối với mỗi công thức, tôi có một NavigationLink trình bày giá trị.

Liên kết trình bày một giá trị công thức.

Nhãn của liên kết, trong phần đóng cuối này, là RecipeTile của tôi với hình thu nhỏ và tiêu đề.

Vậy còn lại gì để hoàn thành lưới này?

Chà, tôi chưa nói với NavigationStack cách lập bản đồ từ công thức nấu ăn đến chế độ xem chi tiết.

Giống như tôi đã đề cập với công thức đầu tiên, NavigationStack mới sử dụng công cụ sửa đổi navigationDestination để ánh xạ từ các giá trị trên đường dẫn của nó đến các chế độ xem được hiển thị trên ngăn xếp.

Vì vậy, hãy thêm một công cụ sửa đổi navigationDestination.

Nhưng tôi nên đính kèm nó ở đâu?

Tôi muốn đính kèm nó trực tiếp vào liên kết, nhưng điều này sai vì hai lý do.

Các thùng chứa lười biếng, như Danh sách, Bảng hoặc, ở đây, LazyVGrid, không tải tất cả các chế độ xem của chúng ngay lập tức.

Nếu tôi đặt công cụ sửa đổi ở đây, điểm đến có thể không được tải, vì vậy NavigationStack xung quanh có thể không nhìn thấy nó.

Thứ hai, nếu tôi đặt công cụ sửa đổi ở đây, nó sẽ được lặp lại cho mọi mục trong lưới của tôi.

Thay vào đó, tôi sẽ đính kèm công cụ sửa đổi vào ScrollView của mình.

Bằng cách đính kèm công cụ sửa đổi bên ngoài ScrollView, tôi đảm bảo rằng NavigationStack có thể thấy navigationDestination này bất kể vị trí cuộn.

Một điều khác tôi thích khi đặt công cụ sửa đổi ở đây là nó vẫn gần với các liên kết nhắm mục tiêu đến nó.

Điểm đến điều hướng cho phép tôi linh hoạt sắp xếp mã của mình theo cách có ý nghĩa đối với tôi hoặc nhóm của tôi.

Quay trở lại NavigationSplitView của tôi, chỉ có một điều nữa để cho phép điều hướng có lập trình đầy đủ ở đây.

Tôi cần thêm một đường dẫn điều hướng.

Tôi sẽ thêm Trạng thái để giữ đường dẫn và liên kết trạng thái với NavigationStack của tôi.

Với điều hướng lập trình đầy đủ tại chỗ, tôi có thể viết một phương pháp để hiển thị công thức trong ngày của mình trong trải nghiệm điều hướng này.

Đó là cách chuẩn bị trải nghiệm điều hướng nhiều cột với các ngăn xếp bằng cách sử dụng NavigationSplitView mới, NavigationStack, NavigationLinks trình bày giá trị và Danh sách với lựa chọn trong SwiftUI.

Như với công thức trước đó, công thức này cũng tự động thích ứng với các bài thuyết trình hẹp và hoạt động trên tất cả các nền tảng.

Thật thú vị khi khám phá những công thức này để cấu trúc điều hướng trong ứng dụng của tôi, nhưng bữa tiệc điều hướng của chúng tôi sẽ không hoàn chỉnh nếu không có món tráng miệng.

Đối với điều đó, hãy xem cách duy trì trạng thái điều hướng.

Để duy trì trạng thái điều hướng trong ứng dụng của mình, tôi chỉ cần thêm hai thành phần: Codable và SceneStorage.

Công thức này có ba bước cơ bản.

Đầu tiên, tôi sẽ gói gọn trạng thái điều hướng của mình trong một loại Mô hình Điều hướng.

Điều đó cho phép tôi lưu và khôi phục nó như một đơn vị để nó luôn nhất quán.

Sau đó, tôi sẽ làm cho mô hình điều hướng của mình có thể codable.

Cuối cùng, tôi sẽ sử dụng SceneStorage để lưu và khôi phục mô hình của mình.

Tôi sẽ phải chăm sóc trên đường đi - Tôi không muốn ứng dụng của mình gặp sự cố như một chiếc soufflé bị rơi - nhưng các bước rất đơn giản.

Hãy nhìn vào bước một.

Đây là mã từ cuối công thức cuối cùng của chúng tôi.

Trạng thái điều hướng của tôi được lưu trữ trong các thuộc tính Danh mục và đường dẫn đã chọn.

Danh mục đã chọn theo dõi lựa chọn trong thanh bên.

Đường dẫn theo dõi các chế độ xem được đẩy lên ngăn xếp trong khu vực chi tiết.

Tôi sẽ giới thiệu một lớp NavigationModel mới và làm cho nó phù hợp với ObservableObject.

Tiếp theo, tôi sẽ di chuyển trạng thái điều hướng của mình vào đối tượng mô hình của mình, thay đổi trình bao bọc thuộc tính từ Trạng thái sang Đã xuất bản.

Sau đó, tôi sẽ giới thiệu một StateObject để giữ một phiên bản của NavigationModel của tôi và thay đổi các tham số để sử dụng đối tượng mô hình mới.

Tiếp theo, tôi sẽ làm cho mô hình điều hướng của mình có thể codable.

Tôi sẽ bắt đầu bằng cách thêm sự phù hợp Codable vào lớp học.

Trong nhiều trường hợp, Swift có thể tự động tạo ra sự phù hợp Codable, nhưng tôi muốn thực hiện sự phù hợp của riêng mình ở đây.

Lý do chính là Công thức là một giá trị mô hình.

Tôi không muốn lưu trữ toàn bộ giá trị mô hình để khôi phục trạng thái.

Có hai lý do cho việc này.

Đầu tiên, cơ sở dữ liệu công thức của tôi đã chứa tất cả các chi tiết cho công thức.

Việc lặp lại thông tin đó ở trạng thái điều hướng đã lưu của tôi không phải là một cách sử dụng tốt.

Thứ hai, nếu cơ sở dữ liệu công thức của tôi có thể thay đổi độc lập với trạng thái điều hướng cục bộ của tôi - giả sử, bởi vì cuối cùng tôi cũng có thể thêm đồng bộ hóa - tôi không muốn trạng thái điều hướng cục bộ của mình chứa dữ liệu cũ.

Đối với khả năng mã hóa tùy chỉnh, tiếp theo tôi sẽ thêm CodingKeys.

Một trong những chìa khóa vừa được chọn Danh mục.

Nhưng lưu ý rằng tôi đã đặt tên cho "recipePathIds" khác, tôi dự định chỉ lưu trữ số nhận dạng của các công thức nấu ăn trên đường dẫn.

Trong phương pháp mã hóa của tôi, tôi sẽ tạo một vùng chứa có khóa bằng cách sử dụng các khóa mã hóa của mình và thêm danh mục đã chọn vào vùng chứa.

Tôi đang sử dụng encodeIfPresent, vì vậy tôi chỉ viết giá trị nếu nó không phải là không.

Sau đó, tôi sẽ thêm số nhận dạng đường dẫn công thức.

Lưu ý rằng tôi đang ánh xạ qua đường dẫn để lấy số nhận dạng để mã hóa.

Ví dụ, giả sử trạng thái điều hướng của tôi bao gồm Món tráng miệng như một danh mục đã chọn, với Bánh táo và Lớp vỏ bánh trên đường dẫn, như được hiển thị trong hộp màu xanh lá cây ở trên cùng.

Điều này có thể được mã hóa thành JSON, như được hiển thị trong hộp khác này.

Để hoàn thành Codability, tôi sẽ thêm trình khởi tạo cần thiết.

Điều thú vị là ở đây, nơi tôi giải mã ID công thức, sau đó sử dụng mô hình dữ liệu được chia sẻ của mình để chuyển đổi ID trở lại thành công thức nấu ăn.

Tôi đang sử dụng compactMap để loại bỏ bất kỳ công thức nấu ăn nào không thể tìm thấy.

Ví dụ, điều này có thể xảy ra nếu tôi xóa một công thức trên một thiết bị khác sau khi đồng bộ hóa hoạt động - điều mà tôi chắc chắn sẽ làm vào một ngày nào đó.

Đây là nơi bạn sẽ cần sử dụng tùy ý trong các ứng dụng của riêng mình để đảm bảo mọi trạng thái điều hướng được khôi phục vẫn có ý nghĩa.

Cuối cùng, tôi sẽ thêm một thuộc tính được tính toán để đọc và viết mô hình của mình dưới dạng dữ liệu JSON.

Bây giờ tôi đã có một mô hình điều hướng và nó biết cách tự mã hóa và giải mã, tất cả những gì còn lại là thực sự lưu và khôi phục nó.

Đối với điều đó tôi sẽ sử dụng SceneStorage.

Đây là nơi chúng tôi rời khỏi góc nhìn chính của mình.

Tôi đã sử dụng StateObject để giữ NavigationModel của mình.

Bây giờ, tôi sẽ giới thiệu một số SceneStorage để duy trì Mô hình Điều hướng của mình.

Các thuộc tính SceneStorage tự động lưu và khôi phục các giá trị liên quan của chúng.

Khi loại lưu trữ là tùy chọn, giống như dữ liệu của tôi ở đây, giá trị là số không khi một cảnh mới được tạo.

Khi hệ thống khôi phục một cảnh, SwiftUI đảm bảo rằng giá trị của thuộc tính SceneStorage cũng được khôi phục.

Tôi sẽ tận dụng điều này để duy trì Mô hình Điều hướng của mình.

Để làm điều đó, tôi sẽ thêm một công cụ sửa đổi nhiệm vụ vào chế độ xem của mình.

Công cụ sửa đổi nhiệm vụ chạy đóng cửa không đồng bộ.

Nó bắt đầu khi chế độ xem xuất hiện và bị hủy khi chế độ xem biến mất.

Bất cứ khi nào chế độ xem của tôi xuất hiện, trước tiên tôi sẽ kiểm tra xem tôi có bất kỳ dữ liệu hiện có nào từ lần chạy ứng dụng trước đó hay không.

Nếu vậy, tôi sẽ cập nhật mô hình điều hướng của mình với dữ liệu đó.

Sau đó, tôi sẽ bắt đầu một vòng lặp không đồng bộ sẽ lặp lại bất cứ khi nào mô hình điều hướng của tôi thay đổi.

Phần thân của vòng lặp này sẽ chạy trên mỗi thay đổi, vì vậy tôi có thể sử dụng nó để lưu trạng thái điều hướng của mình trở lại dữ liệu lưu trữ cảnh của mình.

Và thế là xong!

Khi tôi rời khỏi ứng dụng của mình để xem một số chương trình nấu ăn Julia Child cổ điển trên web, nó sẽ nhớ tôi đã ở đâu.

Khi tôi quay lại ứng dụng, nó sẽ đưa tôi trở lại nơi tôi đã dừng lại.

Bây giờ, sẽ không có cuốn sách dạy nấu ăn nào hoàn chỉnh nếu không có một phần kỳ lạ ở cuối với các mẹo nhà bếp tiện dụng.

Tôi không có ba sản phẩm thay thế tuyệt vời cho rau mùi, nhưng tôi có một số mẹo điều hướng để chia sẻ.

Chuyển sang NavigationStack và NavigationSplitView mới ngay khi bạn có thể.

Nếu bạn đang sử dụng NavigationView với kiểu ngăn xếp, hãy chuyển sang NavigationStack.

NavigationStack cũng là lựa chọn hàng đầu tốt trên Apple TV, Apple Watch hoặc trên các trang tính trên iPad và iPhone, trong đó kiểu ngăn xếp luôn là mặc định.

Nếu bạn đang sử dụng NavigationView nhiều cột, hãy chuyển sang NavigationSplitView.

Và nếu bạn đã áp dụng điều hướng có lập trình bằng cách sử dụng các liên kết có ràng buộc, tôi đặc biệt khuyến khích bạn chuyển sang Liên kết điều hướng trình bày giá trị mới cùng với các đường dẫn điều hướng và lựa chọn danh sách.

Các liên kết lập trình kiểu cũ bị phản đối bắt đầu từ iOS 16 và các bản phát hành được căn chỉnh.

Để biết chi tiết và ví dụ về việc di chuyển sang các API mới, hãy xem bài viết, "Di chuyển sang các loại điều hướng mới" trong tài liệu dành cho nhà phát triển.

Tiếp theo, hãy nhớ rằng Danh sách và NavigationSplitView và NavigationStack mới được tạo ra để kết hợp với nhau.

Soạn chúng để tạo ra trải nghiệm điều hướng mà khách của bạn sẽ yêu thích.

Khi sử dụng ngăn xếp điều hướng, các điểm đến điều hướng có thể ở bất kỳ đâu bên trong ngăn xếp hoặc các chế độ xem phụ của nó.

Cân nhắc đặt các điểm đến gần các liên kết tương ứng để giúp bảo trì dễ dàng hơn, nhưng hãy nhớ không đặt chúng bên trong các thùng chứa lười biếng.

Cuối cùng, tôi khuyến khích bạn bắt đầu xây dựng trải nghiệm điều hướng của mình với NavigationSplitView khi nó có ý nghĩa.

Ngay cả khi ban đầu bạn đang phát triển cho iPhone, NavigationSplitView sẽ tự động thích ứng với thiết bị hẹp hơn.

Và khi bạn đã sẵn sàng hỗ trợ iPhone Pro Max ở chế độ ngang hoặc đưa ứng dụng của mình lên iPad hoặc Mac, NavigationSplitView sẽ tận dụng tất cả không gian bổ sung đó.

Cảm ơn vì đã có cơ hội chia sẻ các API điều hướng SwiftUI mới với bạn!

Bên cạnh các cuộc nói chuyện mà tôi đã đề cập trước đó, tôi mời bạn kiểm tra "Mang nhiều cửa sổ vào ứng dụng SwiftUI của bạn" để biết một số thông tin tuyệt vời về cách mở cửa sổ và cảnh mới trong ứng dụng của bạn.

Tôi hy vọng rằng những công thức nấu ăn này để điều hướng trong ứng dụng sách dạy nấu ăn của chúng tôi sẽ làm hài lòng khẩu vị.

Tôi rất mong được thấy những trải nghiệm tuyệt vời mà bạn tạo ra trong các ứng dụng của riêng mình.

Chúc ngon miệng!

♪