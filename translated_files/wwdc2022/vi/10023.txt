10023

♪ Nhạc hip-hop nhạc cụ êm dịu ♪

♪

Xin chào! Tôi là Justin, và tôi là một kỹ sư trong nhóm Ảnh.

Hôm nay, tôi muốn nói về một số cải tiến mà chúng tôi đã thực hiện cho hệ thống chọn Ảnh.

Hệ thống chọn ảnh là cách tốt nhất để hầu hết các ứng dụng truy cập ảnh và video trên iOS.

Bộ chọn hết quy trình, vì vậy ứng dụng của bạn không cần yêu cầu bất kỳ quyền truy cập thư viện nào để sử dụng nó.

Nó có giao diện người dùng trực quan và API dễ sử dụng.

Nếu bạn không quen thuộc với PHPicker API, bạn có thể xem các phiên WWDC của những năm trước của chúng tôi, nơi chúng tôi đã nói sâu về nó.

Trong phiên hôm nay, tôi sẽ bắt đầu với tổng quan về các tính năng mới mà chúng tôi đã thêm vào bộ chọn.

Sau đó, tôi sẽ nói về các nền tảng và khuôn khổ bổ sung mà bộ chọn hiện hỗ trợ.

Được rồi, chúng ta hãy đi sâu vào.

Bộ chọn hỗ trợ lọc giữa hình ảnh, video và Ảnh trực tiếp kể từ khi được giới thiệu.

Tuy nhiên, chúng tôi hiểu rằng một số ứng dụng của bạn có thể có một số yêu cầu khác.

Ví dụ, một ứng dụng khâu ảnh chụp màn hình chỉ muốn hiển thị ảnh chụp màn hình trong bộ chọn.

Bây giờ có thể với bộ lọc ảnh chụp màn hình mới mà chúng tôi đã thêm vào trong năm nay.

Ngoài ảnh chụp màn hình, chúng tôi đã thêm các loại nội dung khác như bản ghi màn hình và video chuyển động chậm.

Ngoài ra còn có một cách để bạn tạo một bộ lọc mới bằng cách sử dụng PHAsset.PlaybackStyle.

Ngoài các video Điện ảnh, ảnh hiệu ứng độ sâu và ảnh chụp liên tục, tất cả các bộ lọc mới đều được chuyển ngược.

Nếu ứng dụng của bạn đang nhắm mục tiêu iOS 15, bạn vẫn có thể sử dụng chúng miễn là bạn đang biên dịch với iOS 16 SDK.

Đối với các bộ lọc phức hợp, ngoài "bất kỳ" hiện có, bây giờ bạn cũng sử dụng "tất cả" và "không".

Chúng cũng được chuyển ngược sang iOS 15.

Hãy xem xét một số ví dụ mã.

Để hiển thị video và Ảnh trực tiếp, bạn có thể kết hợp chúng với "bất kỳ".

Hoặc bạn có thể chỉ muốn hiển thị ảnh chụp màn hình.

Để hiển thị tất cả các hình ảnh không có ảnh chụp màn hình, bạn có thể kết hợp các bộ lọc hình ảnh và ảnh chụp màn hình bằng cách sử dụng "tất cả" và "không".

Và ví dụ cuối cùng, bạn có thể sử dụng bộ lọc .cinematicVideos nếu bạn đang nhắm mục tiêu iOS 16.

Tiếp theo, hãy nói về những cải tiến liên quan đến bộ chọn nửa chiều cao.

Trong iOS 15, UIKit có một UISheetPresentationController API mới mà bạn có thể sử dụng để trình chọn ở chế độ nửa chiều cao.

Nó đã hoạt động tốt trong nhiều trường hợp.

Nhưng một số bạn có thể muốn triển khai giao diện người dùng tùy chỉnh để điều chỉnh các tài sản đã chọn và những thay đổi đó được phản ánh lại trong bộ chọn.

Trong iOS 16, bạn có thể bỏ chọn tài sản bằng cách sử dụng số nhận dạng tài sản của chúng.

Như được hiển thị ở đây, ảnh thứ hai không còn được chọn trong bộ chọn sau khi deselectAssets được gọi.

Bạn cũng có thể gọi phương thức moveAsset để sắp xếp lại tài sản.

Bây giờ chúng ta đã quen thuộc với tất cả các tính năng chọn mới, hãy nói về hỗ trợ nền tảng.

Hiện tại, hệ thống chọn Ảnh chỉ có thể được sử dụng bởi các ứng dụng iOS và iPadOS.

Năm nay, chúng tôi sẽ đưa bộ chọn Ảnh lên hai nền tảng bổ sung: macOS và watchOS.

Bộ chọn iPadOS cũng được cập nhật với thiết kế mới chỉ dành cho iPad.

Trước tiên chúng ta hãy xem giao diện người dùng iPad mới.

Bộ chọn bây giờ hiển thị một thanh bên để tận dụng màn hình iPad lớn hơn.

Thanh bên cho phép điều hướng nhanh hơn giữa các bộ sưu tập khác nhau.

Nhưng nếu không có đủ dung lượng, như ở chế độ Split Screen, chúng ta sẽ quay trở lại giao diện người dùng chọn nhỏ gọn hiện có.

Tiếp theo, macOS.

Bộ chọn macOS cũng có một thanh bên với các điều khiển kiểu Mac.

Và cũng giống như bộ chọn iOS, nó hỗ trợ nhiều lựa chọn, phóng to mượt mà trong lưới và có tính năng tìm kiếm mạnh mẽ cho phép bạn tìm kiếm những thứ như con người, địa điểm và hơn thế nữa.

Giao diện người dùng chọn mới cũng có sẵn trong NSOpenPanel.

Bạn có thể sử dụng nó để chọn tài sản từ thư viện ảnh hệ thống và lần đầu tiên, bao gồm cả những tài sản được lưu trữ trong Ảnh iCloud.

Ứng dụng của bạn sẽ nhận được giao diện người dùng mới miễn phí mà không cần thực hiện bất kỳ công việc nhận con nuôi nào.

Kéo và thả được hỗ trợ trong bộ chọn NSOpenPanel.

Nó cũng được hỗ trợ trong bộ chọn tiêu chuẩn trên iOS, iPadOS và macOS.

Nếu ứng dụng của bạn chỉ cần chọn một vài hình ảnh hoặc video, NSOpenPanel API có thể là tất cả những gì bạn cần.

Nhưng hãy nhớ rằng các tệp được chọn trong thư viện ảnh có thể bị hệ thống xóa bất cứ lúc nào.

Bạn nên sao chép chúng vào một vị trí do ứng dụng của bạn quản lý nếu bạn cần đảm bảo tính khả dụng của chúng trong thời gian dài.

Đối với các ứng dụng macOS tập trung vào phương tiện truyền thông, chúng tôi khuyến khích bạn mặc định chọn Ảnh mới để có trải nghiệm người dùng tốt nhất.

Tuy nhiên, ứng dụng của bạn vẫn nên cung cấp một cách thay thế để chọn tài sản từ hệ thống tệp bằng cách sử dụng NSOpenPanel API.

Đôi khi khách hàng của bạn vẫn có thể muốn chọn tài sản bên ngoài thư viện ảnh của họ.

Cuối cùng nhưng không kém phần quan trọng, hãy nói về watchOS.

Lần đầu tiên, bạn có thể truy cập vào hình ảnh được lưu trữ trên đồng hồ bằng API mới.

Bộ chọn watchOS cũng hết quy trình, như bộ chọn iOS và macOS, vì vậy bạn không cần yêu cầu bất kỳ quyền truy cập thư viện nào để sử dụng nó.

Nó có giao diện người dùng tương tự như bộ chọn iOS nhưng được tối ưu hóa cho màn hình nhỏ hơn.

Bạn có thể duyệt ảnh của mình trong lưới hoặc theo bộ sưu tập.

Bạn có thể định cấu hình bộ chọn để hiển thị thứ tự lựa chọn, cũng như chỉ định giới hạn lựa chọn.

Tuy nhiên, không giống như iOS và macOS, chỉ có hình ảnh sẽ được hiển thị trong bộ chọn watchOS.

Nếu thiết bị có hơn 500 hình ảnh, chỉ 500 hình ảnh gần đây nhất sẽ được hiển thị.

Bạn có thể tự hỏi, "PHPickerViewController dựa trên UIKit.

Làm thế nào tôi có thể sử dụng nó cho ứng dụng macOS hoặc watchOS của mình?"

Như bạn có thể đoán, các API chọn mới hiện có sẵn trong AppKit và SwiftUI.

Trước tiên chúng ta hãy xem qua AppKit API.

Trên thực tế, nó rất giống với UIKit API.

Bạn có quyền truy cập vào cùng một loại Cấu hình PHPicker và các thuộc tính của nó.

Chỉ có một sự khác biệt nhỏ: PHPickerViewController là một lớp con NSViewController cho các ứng dụng AppKit.

Với sự ra đời của PHPicker dựa trên AppKit, đã đến lúc rời khỏi trình duyệt thư viện phương tiện kế thừa.

PHPicker mạnh hơn rất nhiều.

Nó cũng dễ bảo trì hơn nếu bạn đang làm việc trên cả hai ứng dụng UIKit và AppKit cùng một lúc.

Cuối cùng, đã đến lúc nói về SwiftUI API.

Bạn có nhớ bộ chọn iOS mà bạn đã thấy ở đầu phiên không?

Nó có thể được trình bày chỉ với một vài dòng mã SwiftUI.

Quan trọng hơn, bạn có quyền truy cập vào SwiftUI PhotosPicker API trên tất cả các nền tảng được người chọn hỗ trợ: iOS, iPadOS, macOS và watchOS.

Bộ chọn sẽ tự động chọn bố cục tốt nhất tùy thuộc vào nền tảng, cấu hình ứng dụng của bạn và không gian màn hình khả dụng.

Bạn không cần phải lo lắng về giao diện người dùng chọn nên là gì, vì vậy bạn chỉ có thể tập trung vào việc làm cho ứng dụng của mình tốt hơn.

Trước khi chúng ta xem xét chi tiết API mới thông qua bản demo, trước tiên chúng ta nên nói về cách tải ảnh và video đã chọn.

Lựa chọn bạn nhận được thông qua ràng buộc SwiftUI chỉ chứa các đối tượng giữ chỗ.

Bạn vẫn cần tải dữ liệu tài sản thực tế theo yêu cầu.

Hãy nhớ rằng một số dữ liệu tài sản sẽ không được tải ngay lập tức.

Thao tác tải cũng có thể thất bại nếu gặp lỗi, ví dụ, khi bộ chọn đang cố gắng tải xuống dữ liệu từ iCloud Photos nhưng thiết bị không được kết nối với internet.

Một số tệp lớn như video có thể mất nhiều thời gian để tải xuống, vì vậy chúng tôi khuyên bạn nên hiển thị giao diện người dùng tải nội tuyến cho mỗi mục thay vì chỉ báo chặn tải.

PhotosPicker sử dụng Transferable, đây là một giao thức SwiftUI mới để truyền dữ liệu giữa các ứng dụng và tiện ích mở rộng.

Bạn có thể tải SwiftUI Image thông qua Transferable trực tiếp, nhưng đối với các trường hợp sử dụng nâng cao, bạn nên xác định các đối tượng mô hình của riêng mình phù hợp với giao thức Transferable để kiểm soát hoàn toàn loại dữ liệu bạn muốn tải.

Để biết thêm thông tin về Transferable, bạn có thể xem phiên "Gặp gỡ Transferable".

Nếu ứng dụng của bạn cần xử lý nhiều mục cùng một lúc hoặc các tài sản lớn như video, có thể không khả thi để tải mọi thứ vào bộ nhớ cùng một lúc.

Để giảm mức sử dụng bộ nhớ, bạn có thể sử dụng FileTransferRepresentation để tải các tài sản đã chọn dưới dạng tệp.

Khi tải tài sản dưới dạng tệp, hãy nhớ rằng ứng dụng của bạn chịu trách nhiệm quản lý vòng đời của chúng.

Các tệp phải luôn được sao chép vào thư mục ứng dụng của bạn khi nhận và xóa khi chúng không còn cần thiết nữa.

Được rồi, đã đến lúc cho bản demo!

Tôi đã thiết lập ứng dụng demo này hiển thị trang hồ sơ tài khoản.

Ngay bây giờ hình ảnh hồ sơ chỉ là một biểu tượng giữ chỗ.

Chúng tôi muốn thêm một nút chỉnh sửa để thay đổi hình ảnh hồ sơ bằng cách sử dụng PhotosPicker API.

Chế độ xem hình ảnh hồ sơ đã có thể phản hồi trạng thái hình ảnh được xác định trong mô hình chế độ xem của chúng tôi, vì vậy chúng tôi chỉ cần cập nhật trạng thái hình ảnh khi nhận được lựa chọn bộ chọn.

Đầu tiên, hãy đi đến mô hình xem của chúng tôi và thêm một thuộc tính imageSelection mới.

Nó sẽ được chuyển đến PhotosPicker API dưới dạng ràng buộc lựa chọn.

Bây giờ chúng ta có thể quay lại chế độ xem hình ảnh hồ sơ của mình và thêm nút lớp phủ để hiển thị bộ chọn.

Được rồi, hãy tạm dừng một chút và xem mã chúng tôi vừa thêm vào.

Chúng tôi đã thêm chế độ xem PhotosPicker, cung cấp cho nó ràng buộc lựa chọn mà chúng tôi vừa xác định và định cấu hình nó để chỉ hiển thị hình ảnh.

Nhãn của PhotosPicker chỉ là một glyph bút chì với nền hình tròn.

Chúng ta có thể xây dựng và chạy để xem những gì chúng ta có cho đến nay.

Tôi có thể nhấn vào nút chỉnh sửa để hiển thị bộ chọn.

Nhấn vào một hình ảnh sẽ tự động đóng bộ chọn, nhưng hình ảnh hồ sơ không được cập nhật.

Tại sao?

Chúng ta vẫn cần kết nối lựa chọn hình ảnh và trạng thái hình ảnh.

Vì vậy, hãy làm điều đó.

Chúng ta có thể quay lại mô hình chế độ xem và phản hồi lựa chọn hình ảnh đã được đặt.

Chúng tôi đặt trạng thái hình ảnh thành trống nếu lựa chọn hình ảnh là số không.

Nếu không, chúng tôi bắt đầu tải hình ảnh.

Chúng tôi đang thấy lỗi trình biên dịch vì chúng tôi chưa triển khai phương thức loadTransferable.

Hãy sửa nó.

Việc thực hiện rất đơn giản.

Chúng tôi chỉ cần trả lời trình xử lý hoàn thành và cập nhật trạng thái hình ảnh nếu yêu cầu vẫn là yêu cầu gần đây nhất.

Hãy xây dựng và chạy để xem nó hoạt động.

Tôi có thể nhấn vào nút chỉnh sửa và chọn một hình ảnh.

Tuyệt vời! Nó hoạt động như mong đợi.

Trên thực tế, dự án cũng đã được thiết lập để chạy trên macOS.

Mã tôi vừa thêm có tự động hoạt động trên macOS không?

Hãy xây dựng và chạy để tìm hiểu.

Nó biên dịch!

Tôi có thể mở bộ chọn, chọn một hình ảnh và nó được phản ánh trong ứng dụng.

Đó là nó cho bản demo.

Bạn vừa xem bản demo trên iOS và macOS, nhưng mã tương tự cũng sẽ hoạt động trên watchOS.

Tuy nhiên, có một vài điều cần ghi nhớ.

Bộ chọn watchOS được thiết kế cho các luồng đơn giản và tương tác ngắn.

Hình ảnh được chia tỷ lệ dựa trên kích thước thiết bị.

Thông thường, chúng được đồng bộ hóa từ iPhone được ghép nối.

Tuy nhiên, Thiết lập Gia đình cho phép các thành viên gia đình bạn không có iPhone riêng tận hưởng các tính năng và lợi ích của Apple Watch.

Nếu một thiết bị ở chế độ Thiết lập Gia đình, 1000 hình ảnh gần đây nhất trong Ảnh iCloud có thể được chọn bằng bộ chọn.

Người chọn có thể cần tải xuống một số hình ảnh từ internet.

Và nếu đúng như vậy, một giao diện người dùng đang tải sẽ được hiển thị trong bộ chọn trước khi đóng.

Trước khi bạn đi, tôi chỉ muốn nói rằng chúng tôi cam kết làm cho hệ thống chọn Ảnh trở thành cách tốt nhất để hầu hết các ứng dụng truy cập ảnh và video.

Chúng tôi thực sự khuyến khích bạn chuyển sang nó nếu bạn vẫn đang sử dụng bộ chọn tùy chỉnh.

Cảm ơn bạn, và chúc bạn có một WWDC tuyệt vời!

♪