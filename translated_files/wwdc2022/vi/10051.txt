10051

♪ ♪

August Joki: Xin chào, tôi là August Joki, một kỹ sư phần mềm trên watchOS, và tôi ở đây để chỉ cho bạn cách tiến xa hơn với các biến chứng của WidgetKit.

Tôi hy vọng bạn đã thấy các Biến chứng và Tiện ích tuyệt vời: Cuộc nói chuyện được tải lại trước, bao gồm những điều cơ bản của các biến chứng trong WidgetKit.

Bài nói chuyện này mở rộng về các khái niệm được đề cập ở đó vì chúng liên quan đến các biến chứng trên mặt đồng hồ.

Và bài nói chuyện WWDC 2020 của tôi: Xây dựng các biến chứng trong SwiftUI bao gồm các chi tiết cụ thể hơn về pha màu và vẽ SwiftUI trong các biến chứng.

Trong buổi nói chuyện này, tôi sẽ thảo luận về các tính năng WidgetKit duy nhất cho watchOS, cũng như cách di chuyển các biến chứng ClockKit hiện có của bạn và người dùng của bạn sang WidgetKit.

Tôi đã lấy cảm hứng từ ứng dụng mẫu Coffee Tracker để sử dụng làm ví dụ trong suốt buổi nói chuyện này.

Ứng dụng ghi lại số lượng cà phê, trà và soda bạn uống trong suốt cả ngày và theo dõi lượng caffeine trong cơ thể bạn theo thời gian.

Hãy bắt đầu với những gì độc đáo đối với watchOS.

Trong iOS 16, chúng tôi đã đưa các tiện ích kiểu phức tạp vào màn hình khóa của điện thoại và trong watchOS 9, chúng tôi đã đưa WidgetKit vào các biến chứng của đồng hồ.

Trên mặt đồng hồ, chúng tôi có một bản trình bày phức tạp độc đáo cho các góc của màn hình đồng hồ.

Và nó yêu cầu một dòng WidgetKit độc đáo được gọi là accessoryCorner, để mô tả nó.

Một phần của bản trình bày độc đáo đó là nội dung phụ trợ được chỉ định bởi chế độ xem SwiftUI của bạn, nhưng không được hiển thị như một phần của nội dung của bạn.

Thay vào đó, nó được hiển thị bằng mặt đồng hồ.

Phần hình tròn của góc là kết xuất SwiftUI tiêu chuẩn và nội dung phụ trợ là phần cong ở các góc.

Hoặc trong mặt số trên mặt Infograph.

Gia đình accessoryInline có một hành vi độc đáo trên mặt đồng hồ.

Nó có nhiều cách để hiển thị tùy thuộc vào khuôn mặt.

Đôi khi phẳng, đôi khi cong để phù hợp với mặt số.

Hãy nói về cách hỗ trợ các tính năng độc đáo này bằng cách xem cách ứng dụng theo dõi cà phê có thể được cập nhật để sử dụng WidgetKit.

Ngoài ba họ tiện ích kiểu phức tạp mới trên iOS 16: AccessoryRectangular, accessoryCircular và accessoryInline, chúng tôi có họ thứ tư trên watchOS 9 được gọi là accessoryCorner.

accessoryCorner có thể được hiển thị dưới dạng nội dung tròn lớn, như bản đồ và biến chứng nhịp tim được hiển thị ở các góc dưới hoặc dưới dạng nội dung tròn nhỏ hơn với nhãn hoặc thước đo cong như trình theo dõi cà phê và biến chứng moonphase được hiển thị ở các góc trên.

Để kiểm soát xem nội dung phụ trợ bên trong có được hiển thị hay không, watchOS 9 đã thêm một công cụ sửa đổi chế độ xem mới mà bạn có thể sử dụng, tôi sẽ chỉ cho bạn ngay bây giờ.

Hãy xem xét việc xây dựng một biến chứng góc cho ứng dụng theo dõi cà phê của tôi.

Bắt đầu với phong cách nội dung hình tròn lớn hơn, tôi có một ZStack với Biểu tượng SF và nền.

Nội dung SwiftUI được tự động cắt thành một vòng tròn để phù hợp với thiết kế của các biến chứng góc khác.

Để thêm nội dung cong bên trong, chúng tôi sử dụng công cụ sửa đổi chế độ xem widgetLabel watchOS 9 mới.

Mặt đồng hồ trích xuất nội dung của công cụ sửa đổi để vẽ điều khiển phù hợp với gia đình và phong cách của mặt đồng hồ.

Và nội dung hình tròn tự động thu nhỏ lại để nhường chỗ.

Đối với accessoryCorner, bạn có thể chỉ định văn bản SwiftUI, thước đo hoặc progressView trong nhãn tiện ích của bạn.

AccessoryCorner không phải là gia đình duy nhất hỗ trợ widgetLabel.

Hãy xem nó được sử dụng như thế nào trên gia đình phụ kiện Vòng tròn.

Trên mặt đồng hồ Infograph, ngoài các biến chứng góc, còn có bốn biến chứng tròn bên trong mặt số.

Biến chứng hình tròn theo dõi cà phê của tôi, ở giữa trên cùng, trông rất giống với biến chứng góc mà chúng ta vừa thấy, nhưng với văn bản trong mặt số.

Tôi sẽ chỉ cho bạn cách thêm văn bản đó ngay bây giờ.

Đối với thiết kế biến chứng hình tròn của tôi, tôi nghĩ thích hợp hơn khi di chuyển thước đo trong nhãn widget trong biến chứng góc của tôi, ở phía trước và trung tâm.

Để tận dụng vị trí giữa trên cùng trên Infograph, tôi thêm một widgetLabel vào thước đo để hiển thị văn bản bổ sung trong khu vực viền dài hơn mà nếu không sẽ không phù hợp với nội dung hình tròn.

Nhưng bây giờ tôi có thông tin dư thừa giữa chế độ xem chính và văn bản phía trên nó.

Tôi có thể làm sạch điều đó bằng cách chuyển nội dung hình tròn sang biểu tượng SF cốc cà phê đẹp mắt đó từ biến chứng góc của tôi Nhưng khi tôi chuyển sang khuôn mặt hiển thị biến chứng hình tròn của mình không có viền, thì tôi đã mất tất cả thông tin về caffeine của mình.

May mắn thay, có một phần API mà tôi có thể thêm vào để làm cho sự phức tạp của tôi hoạt động trong cả hai trường hợp.

Tôi cập nhật sự phức tạp của mình để thêm thuộc tính Môi trường được gọi là showsWidgetLabel vào chế độ xem của mình.

Điều này sẽ đúng bất cứ khi nào biến chứng ở vị trí trên mặt đồng hồ hiển thị nội dung trong nhãn của tiện ích.

Và sau đó tôi có thể thay đổi nội dung để phụ thuộc vào giá trị của showsWidgetLabel để tôi có thể có mức độ thông tin phù hợp ở mỗi điểm phức tạp.

Tôi vừa trình diễn hai cách khác nhau mà phụ kiện Gia đình tròn có thể hiển thị trên mặt đồng hồ, và có một cách nữa bạn cần lưu ý.

Mặt đồng hồ Extra Large từ lâu đã là một cách tuyệt vời để mọi người nhìn thấy thời gian ở định dạng cực lớn.

Và nó hỗ trợ một biến chứng tròn lớn, duy nhất.

Khuôn mặt Extra Large sử dụng gia đình tròn phụ kiện và tự động mở rộng nội dung để phù hợp với phong cách của khuôn mặt.

Xin lưu ý: vì khuôn mặt này được thiết kế để có một sự phức tạp lớn, không sử dụng kích thước canvas tăng lên như một cơ hội để đóng gói dày đặc sự phức tạp của bạn.

Nội dung phải giống hệt với họ tròn bình thường, chỉ lớn hơn.

Như tôi đã đề cập trước đó, có thêm hai họ tiện ích được sử dụng trên mặt đồng hồ: accessoryRectangular và accessoryInline.

Không có khuôn mặt nào có biến chứng hình chữ nhật hiển thị widgetLabel.

Và gia đình accessoryInline đã hoạt động, như một widgetLabel.

Mặt đồng hồ trích xuất Hình ảnh và Văn bản từ nội dung nội tuyến của bạn và tự hiển thị chúng để phù hợp với giao diện của khuôn mặt.

Tiếp theo là Di cư.

Có hai phần để di chuyển: viết lại mã phức tạp ClockKit hiện tại của bạn trong WidgetKit; và cung cấp ánh xạ để cho hệ thống biết cách nâng cấp các biến chứng của bạn mà mọi người đã đặt trên mặt đồng hồ của họ.

Khi bạn áp dụng WidgetKit, hệ thống sẽ ngừng yêu cầu nguồn dữ liệu ClockKit của bạn về nội dung mới và chỉ hiển thị các biến chứng mới của bạn trong bộ chọn chỉnh sửa khuôn mặt.

Cùng với việc đưa WidgetKit lên đồng hồ, watchOS 9 đã cập nhật mọi khuôn mặt để hỗ trợ các biến chứng phong phú, điều này cho phép chúng tôi giảm đáng kể số lượng gia đình biến chứng từ 12 xuống chỉ còn 4.

Bản đồ hình chữ nhật và góc trực tiếp ngang đến phụ kiện Hình chữ nhật và góc phụ kiện.

Cả ba gia đình ClockKit kiểu tròn đồ họa hiện là một phụ kiện duy nhất Gia đình Circular WidgetKit.

Và gia đình phụ kiện nội tuyến được sử dụng ở nơi từng là utilitarianSmallFlat hoặc utilitarianLarge cũ.

Và nhiều nơi từng là utilitarianSmall đã được cập nhật để sử dụng gia đình accessoryCorner.

Với WidgetKit, chế độ xem SwiftUI và bố cục điều khiển trạng thái của chúng đã thay thế các mẫu của ClockKit.

WidgetKit vẫn có các mốc thời gian và mục nhập quen thuộc.

Trên thực tế, ban đầu chúng được lấy cảm hứng từ chính ClockKit, điều đó có nghĩa là nguồn dữ liệu phức tạp của bạn sẽ di chuyển độc đáo sang một trong hai cấu hình WidgetKit tĩnh hoặc dựa trên ý định.

Vui lòng xem bài nói chuyện WidgetKit gốc để biết thêm chi tiết về các loại cấu hình mà WidgetKit hỗ trợ cũng như hỗ trợ gia đình nói chung.

Chúng tôi đã thêm một API cuối cùng vào ClockKit để cho phép hệ thống tự động di chuyển các biến chứng của một người.

Điều này cho phép các biến chứng hiện có của bạn đã có trên mặt đồng hồ tự động được nâng cấp lên các biến chứng dựa trên WidgetKit mới của bạn mà không có bất kỳ tương tác nào của người dùng.

Khi ứng dụng của bạn được cập nhật trên đồng hồ, Mặt đồng hồ sẽ kiểm tra sự hiện diện của các tiện ích trong gói ứng dụng của bạn.

Nếu nó tìm thấy bất kỳ, sau đó nó sẽ khởi chạy nguồn dữ liệu phức tạp ClockKit của bạn để tạo ra các di chuyển cho các biến chứng hiện có.

Từ thời điểm này trở đi, CLKComplicationDataSource của bạn sẽ chỉ được chạy để yêu cầu di chuyển khi một người nhận được một khuôn mặt chung với các biến chứng ClockKit của bạn trên đó.

Hệ thống sẽ yêu cầu di chuyển của bạn mỗi khi một khuôn mặt mới được chia sẻ, vì vậy để có trải nghiệm nhất quán, bạn nên giữ cho việc di chuyển của mình nhất quán.

Khi bạn đã hoàn thành việc tạo các phức tạp WidgetKit tuyệt đẹp của mình, bạn có thể thêm thuộc tính mới, widgetMigrator, để cung cấp đối tượng phù hợp với giao thức Migrator mới.

Có thể là nguồn dữ liệu phức tạp của bạn hoặc một số loại khác mà bạn cung cấp.

Giao thức CLKComplication WidgetMigrator có một chức năng duy nhất để cung cấp cho các cấu hình di chuyển tiện ích mặt đồng hồ từ CLKComplicationDescriptors hiện có.

Cách đơn giản nhất để áp dụng API mới là để nguồn dữ liệu của bạn phù hợp với giao thức Migrator mới.

Nếu biến chứng WidgetKit của bạn sử dụng cấu hình tĩnh, bạn cung cấp cấu hình di chuyển tĩnh.

Và có một cấu hình di chuyển tương đương nếu bạn sử dụng ý định trong biến chứng tiện ích của mình.

Lưu ý rằng nếu bạn cung cấp cấu hình di chuyển dựa trên ý định, bạn cũng sẽ cần bao gồm các định nghĩa ý định của mình trong ứng dụng đồng hồ cũng như các tiện ích mở rộng tiện ích của mình, vì vậy bạn có thể tạo các đối tượng ý định của mình ở cả hai nơi.

WidgetKit cho phép những cách mới và sáng tạo để tạo ra sự phức tạp cho đồng hồ, đồng thời đơn giản hóa đáng kể trải nghiệm.

Cảm ơn vì đã xem.