10151

♪ ♪

Xin chào mọi người, tên tôi là Eric, và tôi rất vui được cho các bạn biết cách thêm khả năng truy cập vào các trò chơi Unity của bạn.

Khả năng tiếp cận là cho phép mọi người sử dụng sản phẩm của chúng tôi.

Và hôm nay đánh dấu một bước tiến lớn cho trò chơi có thể truy cập với trình cắm Apple Accessibility dành cho các nhà phát triển Unity.

Chúng tôi sẽ tập trung vào ba công nghệ của Apple để làm cho trò chơi của bạn có thể truy cập được.

VoiceOver là một trình đọc màn hình giúp người dùng bị mù hoặc thị lực kém.

Nó đọc các mục trên màn hình và cung cấp các cử chỉ tùy chỉnh để người dùng tương tác với các điều khiển.

Điều khiển công tắc, cho phép ai đó có điều khiển động cơ thấp sử dụng công tắc bên ngoài để tương tác với thiết bị.

Và kiểu động, cho phép mọi người đặt kích thước văn bản theo khả năng đọc của họ.

Để bắt đầu, hãy sao chép kho lưu trữ và xây dựng tất cả các trình cắm của Apple bằng cách sử dụng tập lệnh xây dựng trong thư mục gốc của kho lưu trữ.

Điều này sẽ tạo ra một thư mục Xây dựng sẵn sàng để tích hợp vào các dự án Unity của bạn.

Cuối cùng, thêm trình cắm Trợ năng vào dự án của riêng bạn bằng Trình quản lý gói Unity.

Để biết thêm chi tiết, hãy xem tài liệu trong kho lưu trữ và xem video về tất cả các trình cắm Unity của Apple, được gọi là "Trình cắm và chơi: Thêm khung Apple vào các dự án trò chơi Unity của bạn" Bây giờ bạn đã có trình cắm thêm, tôi sẽ hướng dẫn bạn qua ba lĩnh vực.

Đầu tiên là các yếu tố tiếp cận.

Điều này cho phép bạn thêm hỗ trợ cho các công nghệ hỗ trợ như VoiceOver hoặc Switch Control cho các trò chơi của bạn.

Tiếp theo là Dynamic Type.

Chúng tôi tạo ra tiện ích dễ sử dụng này giúp bạn chia tỷ lệ văn bản theo sở thích của người dùng.

Và Chỗ Ở UI.

Đây là những tiện ích giúp bạn đọc các tùy chọn khác của người dùng.

Hãy bắt đầu với các yếu tố khả năng tiếp cận.

Tôi đã xây dựng một trò chơi bài đơn giản để giúp minh họa khái niệm này.

Bạn có thể thấy rằng bạn nên nhấn vào nút "lật" để rút hai thẻ ngẫu nhiên.

Tuy nhiên, VoiceOver sẽ không đọc văn bản trên màn hình và công tắc bên ngoài sẽ không nhấn vào nút vì đây chỉ là những điểm ảnh trên màn hình ngay bây giờ.

Chúng ta cần giúp hệ thống hiểu những gì có thể được tương tác.

Các yếu tố khả năng tiếp cận xác định những thứ mà công nghệ hỗ trợ có thể tương tác.

Văn bản, thẻ và nút trên màn hình phải là các yếu tố trợ năng.

Và chúng ta có thể mô tả từng yếu tố bằng một nhãn.

VoiceOver sẽ đọc từng nhãn để người dùng có thể hiểu những gì trên màn hình.

Và nếu trò chơi hỗ trợ nhiều ngôn ngữ, chúng ta cũng nên bản địa hóa các nhãn này.

Bây giờ VoiceOver có thể mô tả những gì trên màn hình, nhưng nó không nhận ra rằng có một nút có thể được nhấn.

Chúng ta có thể sử dụng một thuộc tính khác được gọi là "đặc điểm" để thông báo cho hệ thống về loại phần tử.

Chúng ta nên thêm đặc điểm "Nút" ở đây.

Bây giờ, VoiceOver sẽ đọc "Nút lật" và một công tắc bên ngoài có thể điều khiển nút này.

Chúng ta cũng có thể thêm đặc điểm "Văn bản tĩnh" vào các phần tử văn bản của mình.

Đặc điểm "Văn bản tĩnh" thường được đặt cho các nhãn và vùng văn bản để VoiceOver có thể cung cấp trải nghiệm tương tác văn bản tốt hơn.

Và có nhiều đặc điểm khác ngoài "Nút" và "Văn bản tĩnh" mà bạn có thể khám phá.

Vậy chúng ta nên sử dụng đặc điểm nào cho các thẻ?

Chà, chúng ta không cần sử dụng các đặc điểm trên mọi yếu tố tiếp cận.

Thẻ của chúng tôi không cần bất kỳ đặc điểm nào.

Tuy nhiên, vẫn còn một phần của mỗi thẻ mà VoiceOver không nhận thức được: mệnh giá.

Có một thuộc tính khác mà chúng ta có thể sử dụng cho việc này được gọi là "Giá trị".

Khi chúng tôi thêm "Giá trị" cho mỗi thẻ, VoiceOver bây giờ sẽ đọc "Thẻ 1 với giá trị 3 của câu lạc bộ, thẻ 2 với giá trị Ace của câu lạc bộ."

Và thế là xong.

Bây giờ bạn đã hiểu những điều cơ bản, hãy mở Unity để xem cách thêm chúng vào dự án của chúng tôi.

Tôi đang ở đây trong Unity Editor cho trò chơi này.

Tôi đã thêm plugin Trợ năng của Apple vào dự án này.

Đầu tiên chúng ta có các đối tượng cảnh thông thường như máy ảnh, ánh sáng trực tiếp và UI Canvas.

Dưới khung vẽ, chúng ta có hai phần tử văn bản và một nút bấm.

Sau đó, chúng tôi có hai đối tượng trò chơi cho thẻ.

Mỗi thành phần bao gồm hai thành phần lưới, mỗi thành phần hiển thị kết cấu mặt trước và mặt sau cho thẻ ở mỗi bên.

Hãy bắt đầu bằng cách xác định các yếu tố khả năng tiếp cận của chúng ta.

Để làm điều này, chúng ta cần thành phần Nút trợ năng từ plugin này.

Chọn tất cả các đối tượng trong hệ thống phân cấp có thể truy cập được.

Và thêm thành phần Nút khả năng truy cập để biến chúng thành các yếu tố khả năng truy cập.

Tiếp theo, chúng tôi thêm nhãn.

Chọn đối tượng thẻ, đi đến thành phần "Nút trợ năng" ở bên phải và tìm trường "Nhãn".

Và đảm bảo rằng hộp kiểm trường nhãn được chọn để cung cấp nhãn tùy chỉnh.

Sau đó gõ "Thẻ 1."

Và cũng vậy đối với Thẻ 2.

Văn bản và các nút cũng cần nhãn, nhưng chúng tôi không cần phải cung cấp nhãn trợ năng rõ ràng cho chúng nếu chúng tôi đang sử dụng các điều khiển tiêu chuẩn từ Unity UI.

Trình cắm đã có các triển khai mặc định cho những thứ đó.

Tiếp theo, chúng ta cần thêm một đặc điểm vào nút của mình.

Chọn nút lật và thay đổi "Đặc điểm" từ "Không có" thành "Nút".

Chọn hai yếu tố văn bản...

Và thay đổi "Đặc điểm" thành "văn bản tĩnh".

Tuyệt vời.

Cuối cùng, chúng ta cần đặt Giá trị khả năng tiếp cận cho các mặt thẻ.

Vì các thẻ được rút ngẫu nhiên, tôi cần thêm một tập lệnh để đặt Giá trị một cách linh hoạt.

Chọn hai thẻ và thêm một tập lệnh mới gọi là AccessibleCard.

Đầu tiên, trong một trong những tệp C Sharp khác của tôi, tôi đã có một danh lượng cho tất cả các mặt thẻ được gọi là Playing Card.

Trong tập lệnh hành vi đơn sắc AccessibleCard mới của tôi, chúng tôi có một biến cho loại thẻ và một boolean cho dù thẻ úp lên hay xuống.

Vì vậy, bây giờ hãy thêm accessibilityValue vào các thẻ này.

Đầu tiên, chúng tôi nhận được thành phần accessibilityNode được đính kèm với gameObject này.

Tiếp theo, đặt đại diện accessibilityValue thành một hàm trả về mệnh giá thẻ một cách linh hoạt.

Bên trong chức năng này, nếu thẻ được bảo hiểm, chúng tôi sẽ trả lại "được bảo hiểm" cho accessibilityValue.

Hoặc nếu không được bảo hiểm, chúng tôi sẽ liệt kê tất cả các mặt thẻ và trả lại mô tả cho mỗi mặt, như "Ace of Spades".

Và thế là xong.

Bây giờ hãy xây dựng dự án của chúng ta và xem nó đang hoạt động.

Đây là trò chơi của chúng tôi. Hãy bật VoiceOver.

Giọng nói tự động: Bật VoiceOver. Trò chơi của Eric.

Thẻ 2, được bảo hiểm.

Eric: Tôi có thể vuốt sang phải để chuyển sang phần tử tiếp theo.

Giọng nói tự động: Thẻ 1, được bảo hiểm.

Trò chơi bài của Eric.

Lật thẻ.

Lật. Nút bấm.

Eric: Bạn thấy rằng tất cả năm đối tượng hiện có thể truy cập được thông qua VoiceOver, điều này thật tuyệt vời.

Để nhấn vào nút khi VoiceOver được bật, hãy nhấn đúp.

Giọng nói tự động: Lật.

Eric: Hãy kiểm tra lại các thẻ.

Giọng nói tự động: Thẻ 1, Hai của Câu lạc bộ.

Lá bài 2, Át chủ bài của các câu lạc bộ.

Eric: VoiceOver hiện đọc chính xác các mặt thẻ được cập nhật.

Tuyệt.

Vì vậy, chúng tôi vừa làm cho trò chơi của mình có thể truy cập được với hàng triệu người dùng VoiceOver, những người hiện có thể yêu thích nó.

Và những người sử dụng điều khiển công tắc bên ngoài cũng có thể chơi trò chơi của chúng tôi.

Vậy đó là các yếu tố tiếp cận.

Tiếp theo, hãy nói về Dynamic Type.

Trò chơi có thể khó chơi đối với nhiều người vì văn bản quá nhỏ để đọc.

Trên iOS và tvOS, mọi người đều có thể chọn kích thước văn bản phù hợp với khả năng đọc của họ trong Cài đặt.

Với Accessibility Plugin, bạn có thể đọc cài đặt này để đảm bảo văn bản trong trò chơi của bạn được hiển thị ở kích thước mong đợi.

Hãy xem ví dụ trò chơi của chúng tôi để xem cách chúng tôi có thể sử dụng Dynamic Type.

Tạo một tập lệnh hành vi đơn gọi là DynamicTextSize.cs.

Trong chức năng bắt đầu, trước tiên hãy lưu trữ kích thước văn bản mặc định vào một biến.

Sau đó, bên trong chức năng OnEnable, đăng ký cài đặt sự kiện đã thay đổi bằng cách sử dụng AccessibilitySettings. onPreferredTextSizesChanged.

Điều này cho phép chúng tôi cập nhật giao diện người dùng ngay khi người dùng thay đổi cài đặt văn bản.

Tiếp theo, bên trong chức năng Cài đặt Thay đổi, trước tiên hãy đọc Hệ số nhân Kích thước Nội dung Ưu tiên.

Sau đó nhân với kích thước văn bản gốc của bạn và gán nó trở lại phần tử văn bản.

Bên trong Unity Editor, chọn tất cả các đối tượng trò chơi có phần tử Văn bản.

Và thêm thành phần DynamicTextSize mà chúng tôi vừa tạo.

Bây giờ trò chơi của chúng tôi đã sẵn sàng để hỗ trợ loại Động.

Trước khi chúng ta thấy kết quả đang hoạt động, trước tiên tôi sẽ chỉ cho bạn một mẹo để nhanh chóng kiểm tra Dynamic Type trong các trò chơi của bạn.

Mở Cài đặt và tìm Trung tâm điều khiển.

Cuộn xuống cho đến khi bạn thấy Kích thước Văn bản và thêm nó vào Trung tâm Điều khiển.

Bây giờ chúng ta có thể điều chỉnh kích thước văn bản một cách nhanh chóng bằng cách mở Trung tâm điều khiển và thay đổi các tùy chọn kích thước văn bản.

Tuyệt vời - khi tôi thay đổi kích thước văn bản, trò chơi của chúng tôi điều chỉnh kích thước phông chữ trong thời gian thực.

Giá trị phần trăm văn bản được hiển thị trong Trung tâm điều khiển chính xác là những gì chúng ta đang đọc từ hệ số nhân đó.

Bạn cũng có thể áp dụng cài đặt này trên các đối tượng không phải văn bản.

Ví dụ, tôi có thể hoán đổi tài sản mặt thẻ thành Bản in lớn khi kích thước được tăng lên.

Đầu tiên tôi tạo một tập lệnh gọi là DynamicCardFaces.

Sau đó, điều tương tự như trước đây, đăng ký sự kiện TextSizeChanged.

Thay vì đọc hệ số nhân, tôi đọc một danh sách danh mục kích thước văn bản được ánh xạ đến các dấu tích trên thanh trượt Trung tâm điều khiển.

Tôi có thể hoán đổi tài sản bất cứ khi nào ai đó chọn kích thước văn bản lớn hơn.

Và tôi chỉ đơn giản là chọn giữa một vật liệu thông thường và một vật liệu in lớn.

Bây giờ nếu chúng ta chọn một kích thước thực sự lớn...

Người dùng sẽ thấy một phiên bản in lớn của thẻ, đó là những mặt thẻ tuyệt vời dễ đọc hơn nhiều đối với những người có thị lực kém.

Cuối cùng, tôi muốn nói chuyện với bạn về cài đặt chỗ ở UI mà bạn có thể truy cập bằng trình cắm này.

Cài đặt đầu tiên là Giảm độ trong suốt.

Khi cài đặt này được bật, nền sẽ trở nên mờ đục, thay vì hiệu ứng mờ hoặc trong suốt.

Nó có thể giúp cải thiện tính dễ đọc khi những hiệu ứng đó khiến văn bản khó đọc.

Để kiểm tra tùy chọn này, hãy gọi Cài đặt Trợ năng. IsReduceTransparencyEnabled.

Tiếp theo, cài đặt Tăng độ tương phản.

Lưu ý cách các công tắc có màu xám đậm hơn giúp chúng nổi bật, giúp các điều khiển dễ nhận ra hơn trên toàn bộ thiết bị.

Bạn có thể tăng độ tương phản cho giao diện người dùng của riêng mình khi điều này được bật bằng cách kiểm tra cài đặt này bằng cách sử dụng Cài đặt trợ năng. IsIncreaseContrastEnabled.

Tiếp theo, cài đặt Giảm chuyển động.

Một số người nhạy cảm với chuyển động như chúng ta có trong hoạt hình lật thẻ này.

Chúng ta nên xóa hình ảnh động đó khi Giảm chuyển động được bật.

Hãy xem mã để làm điều này.

Trong tập lệnh CardController của chúng tôi, chúng tôi có chức năng Flip này.

Đầu tiên chúng tôi kiểm tra xem cài đặt chuyển động giảm của người dùng có bật không.

Nếu không bật, chúng ta nên lật thẻ bằng cách gọi một hình ảnh động thông qua Coroutine.

Nếu không, chúng tôi chỉ đặt vòng quay và không có hình ảnh động.

Và thế là xong.

Bây giờ những người nhạy cảm với chuyển động sẽ thích trò chơi của chúng tôi.

Tóm lại, hãy bắt đầu với plugin Apple Accessibility bằng cách nhân bản kho lưu trữ GitHub được liên kết trong tài nguyên của phiên này.

Thêm các yếu tố trợ năng để mọi người có thể sử dụng VoiceOver và Switch Control với các trò chơi của bạn.

Điều chỉnh kích thước văn bản của bạn với Dynamic Type.

Và kiểm tra chỗ ở UI để mọi người có thể có trải nghiệm tuyệt vời với trò chơi của bạn.

Cảm ơn bạn rất nhiều vì đã tham gia cùng tôi.

Chúng tôi mong muốn được xem cách bạn tạo ra các trò chơi có sẵn cho tất cả mọi người với trải nghiệm tiếp cận tuyệt vời.