10133

Anne: Xin chào, và chào mừng!

Tôi là Anne Hitchcock, và tôi là một kỹ sư phần mềm watchOS.

Hôm nay, tôi muốn chỉ cho bạn cách tạo một ứng dụng năng suất trên watchOS.

Kể từ khi giới thiệu các ứng dụng SwiftUI và Independent Watch trong watchOS 6, bạn đã có thể làm được nhiều hơn trong các ứng dụng Watch của mình.

Mỗi năm, SwiftUI trên watchOS nhận được nhiều khả năng hơn.

Đồng thời, watchOS đã nhận được các tính năng mới, như bàn phím, cho phép bạn xây dựng các loại ứng dụng hoàn toàn mới cho Watch.

Tôi muốn chỉ cho bạn cách kết hợp một số tính năng đó lại với nhau để xây dựng một ứng dụng để theo dõi danh sách những việc cần hoàn thành.

Chúng tôi sẽ tạo một ứng dụng Đồng hồ mới, thêm một danh sách các mục đơn giản để hiển thị, Cho phép mọi người thêm các mục vào danh sách và sau đó chỉnh sửa các mục.

Khi chúng tôi thêm các tính năng này, chúng tôi sẽ nói về các chiến lược điều hướng ứng dụng phổ biến trong ứng dụng Watch và cách chọn đúng.

Chúng tôi sẽ chia sẻ các mục với một người bạn để chia sẻ tải.

Sau đó, chúng tôi sẽ thêm một biểu đồ vào ứng dụng của mình để giúp chúng tôi phát hiện xu hướng năng suất và giữ cho chúng tôi có động lực.

Và chúng tôi sẽ sử dụng Digital Crown để làm cho biểu đồ của chúng tôi có thể cuộn được để hiển thị phạm vi dữ liệu lớn hơn.

Hãy bắt đầu bằng cách tạo một ứng dụng mới.

Tạo một dự án mới trong Xcode.

Trong tab watchOS, chọn Ứng dụng và nhấp vào Tiếp theo.

Sau khi chọn tên sản phẩm, bạn có một vài lựa chọn.

Điều quan trọng nhất là tạo Ứng dụng Chỉ xem hay tạo ứng dụng Đồng hồ với ứng dụng iOS đồng hành.

Hãy nói về những gì tạo nên một ứng dụng Watch tuyệt vời và khi nào bạn muốn có một ứng dụng iOS đồng hành.

Các ứng dụng Great Watch cho phép tương tác nhanh chóng, như giao diện trong Workout cho phép bạn bắt đầu các bài tập yêu thích của mình một cách nhanh chóng.

Không ai muốn đứng xung quanh, giơ tay lên, gõ qua để cố gắng tìm thứ gì đó.

Các ứng dụng Đồng hồ tuyệt vời giúp dễ dàng truy cập thông tin và tính năng quan trọng.

Các ứng dụng Great Watch tập trung vào mục đích thiết yếu của ứng dụng.

Ví dụ, ứng dụng Thời tiết hiển thị dự báo cho ngày hôm nay, các điều kiện hiện tại có liên quan và dự báo 10 ngày đơn giản.

Tập trung vào những điều cần thiết trong ứng dụng của bạn để mọi người có thể dễ dàng tìm thấy thông tin và hành động họ cần.

Một ứng dụng Đồng hồ tuyệt vời được thiết kế để sử dụng độc lập với iPhone đồng hành.

Ví dụ, ứng dụng Danh bạ đồng bộ hóa với điện thoại của bạn, nhưng không yêu cầu iPhone của bạn ở gần để truy cập thông tin liên hệ trên Apple Watch của bạn.

Có nhiều lý do khiến bạn cũng có thể muốn có một ứng dụng iOS đồng hành cho ứng dụng Đồng hồ của mình, bao gồm cung cấp hồ sơ lịch sử dữ liệu được Apple Watch thu thập hoặc phân tích chi tiết các xu hướng, như trong ứng dụng Thể hình.

Vì ứng dụng của chúng tôi có bộ tính năng tập trung, tương tác nhanh và dữ liệu hạn chế, chúng tôi sẽ tạo một ứng dụng Chỉ xem.

Tại thời điểm này, tôi muốn dành vài phút để nói về các mục tiêu được tạo ra.

Nếu bạn đã xây dựng một ứng dụng Watch trong quá khứ, dự án của bạn có hai mục tiêu cho Watch: mục tiêu Ứng dụng WatchKit với bảng phân cảnh, nội dung và có thể là một số tệp liên quan đến bản địa hóa và mục tiêu Tiện ích mở rộng WatchKit với tất cả mã ứng dụng của bạn.

Những mục tiêu kép này là một phần còn lại từ những ngày đầu của watchOS, và thực sự không còn lý do chính đáng cho nhiều mục tiêu Watch nữa.

Bắt đầu từ Xcode 14, các ứng dụng Đồng hồ mới có một mục tiêu ứng dụng Đồng hồ duy nhất.

Tất cả mã, nội dung, bản địa hóa và tiện ích mở rộng Siri Intent và Widget được liên kết với ứng dụng Watch của bạn đều thuộc mục tiêu này.

Tin tuyệt vời là các ứng dụng Đồng hồ một mục tiêu được hỗ trợ trở lại watchOS 7!

Bạn có thể đơn giản hóa cấu trúc dự án của mình và giảm sự nhầm lẫn và trùng lặp trong khi vẫn hỗ trợ những khách hàng không chạy watchOS mới nhất.

Nếu bạn có một ứng dụng hiện có với mục tiêu Tiện ích mở rộng WatchKit, nó sẽ tiếp tục hoạt động và bạn có thể tiếp tục cập nhật ứng dụng của mình bằng Xcode và xuất bản ứng dụng của mình thông qua App Store.

Nếu bạn đã có một ứng dụng Đồng hồ sử dụng vòng đời SwiftUI, việc chuyển đổi sang một mục tiêu duy nhất rất dễ dàng bằng cách sử dụng công cụ di chuyển trong Xcode 14.

Chọn mục tiêu của bạn và chọn Xác thực Cài đặt từ menu Trình chỉnh sửa.

Tùy chọn thu gọn mục tiêu sẽ được cung cấp nếu mục tiêu triển khai của bạn là watchOS 7 trở lên.

Nếu bạn chưa thực hiện bước nhảy vọt, bây giờ là thời điểm tốt để bắt đầu quá trình chuyển đổi ứng dụng của bạn để sử dụng vòng đời SwiftUI để tận hưởng sự đơn giản của ứng dụng Đồng hồ một mục tiêu và tất cả các tính năng của SwiftUI.

Các mục tiêu không phải là thứ duy nhất chúng tôi đơn giản hóa trong Xcode 14!

Chúng tôi cũng đã giúp việc thêm biểu tượng cho ứng dụng của bạn dễ dàng hơn rất nhiều bằng cách chỉ yêu cầu một hình ảnh 1024x1024 pixel duy nhất.

Hình ảnh biểu tượng ứng dụng sẽ được thu nhỏ để hiển thị trên tất cả các thiết bị Đồng hồ.

Đảm bảo kiểm tra với biểu tượng ứng dụng của bạn trên các thiết bị trên màn hình chính, trong thông báo và trong cài đặt cho ứng dụng của bạn trong ứng dụng Đồng hồ trên iPhone.

Bạn có thể thêm hình ảnh tùy chỉnh cho các kích thước nhỏ hơn cụ thể nếu cần.

Ví dụ: nếu biểu tượng ứng dụng của bạn có chi tiết trong hình ảnh bị mất ở kích thước nhỏ hơn, bạn có thể thêm hình ảnh biểu tượng cụ thể cho các kích thước đó với các chi tiết hình ảnh bị xóa.

Bây giờ hãy thêm một số chức năng vào ứng dụng của chúng tôi bằng cách thêm một danh sách các mục nhiệm vụ.

Chúng ta sẽ bắt đầu bằng cách tạo ra một mô hình dữ liệu cho danh sách các nhiệm vụ của chúng ta.

Cấu trúc ListItem sẽ có thể nhận dạng và có thể băm được, và chúng tôi sẽ cung cấp cho nó một mô tả để hiển thị.

Sau đó, tạo một mô hình đơn giản để lưu trữ dữ liệu của chúng tôi và xuất bản mảng các mục danh sách.

Và cuối cùng, thêm mô hình làm đối tượng môi trường để chế độ xem của chúng tôi có thể truy cập mô hình của chúng tôi.

Bây giờ hãy tạo một Danh sách trong SwiftUI với mô hình dữ liệu của chúng tôi.

Vì chưa có nhiệm vụ nào, khi chúng tôi xem trước điều này, chúng tôi nhận được một danh sách trống.

Chúng ta cần phải làm gì đó về điều đó.

Chúng ta nên cho mọi người một cách để thêm một số nhiệm vụ vào danh sách của họ.

Chúng tôi muốn thêm một Nút mà mọi người có thể nhấn để thêm một mục mới vào danh sách.

Liên kết trường văn bản, mới trong watchOS 9, cho phép bạn gọi các tùy chọn nhập văn bản từ một nút và cung cấp một số tùy chọn kiểu dáng để làm cho nó cảm thấy như ở nhà trong ứng dụng của bạn.

Bạn có thể tạo một TextFieldLink với một chuỗi đơn giản hoặc sử dụng Nhãn cho một nút tùy chỉnh hơn.

Sửa đổi giao diện của nút với các công cụ sửa đổi chế độ xem, bao gồm foregroundColor, foregroundStyle và buttonStyle.

Chúng tôi sẽ tạo chế độ xem AddItemLink để gói gọn kiểu dáng và hành vi của TextFieldLink mà chúng tôi đang sử dụng trong ứng dụng của mình.

Chúng tôi sẽ sử dụng nhãn tùy chỉnh cho nút và khi ai đó nhập văn bản, chúng tôi sẽ thêm mục mới vào danh sách của mình.

Bây giờ chúng tôi đã quyết định sử dụng TextFieldLink để thêm một nút để thêm một mục danh sách mới, chúng tôi cần suy nghĩ về nơi đặt TextFieldLink.

Khi thêm các hành động vào danh sách trong ứng dụng Xem, chúng tôi có một vài tùy chọn.

Sử dụng nút, liên kết điều hướng hoặc TextFieldLink ở cuối danh sách cho các hành động chính trong danh sách ngắn.

Thêm một hành động như một mục ở cuối danh sách là một lựa chọn tốt cho một hành động chính trong một danh sách ngắn các mục như danh sách các thành phố trong Đồng hồ Thế giới.

Tuy nhiên, nếu bạn dự đoán một danh sách dài các mục, mọi người sẽ phải tiếp tục cuộn đến cuối danh sách mỗi khi họ muốn thực hiện hành động.

Đối với các hành động thường được sử dụng với danh sách dài hơn, hãy sử dụng mục thanh công cụ.

Để thêm một mục thanh công cụ, hãy thêm công cụ sửa đổi thanh công cụ vào danh sách và sử dụng chế độ xem hành động của bạn làm nội dung.

Điều này sẽ thêm một mục thanh công cụ duy nhất vào danh sách với vị trí mục thanh công cụ tự động.

Mặc dù tôi muốn nghĩ rằng tôi sẽ luôn giữ danh sách việc cần làm của mình ngắn gọn, nhưng tôi khá chắc chắn rằng tôi sẽ không làm vậy.

Vì vậy, tôi sẽ đặt các liên kết trường văn bản vào một mục trên thanh công cụ để dễ dàng truy cập.

Hãy dành một chút thời gian để xem lại những gì chúng ta đã hoàn thành.

Chúng tôi đã tạo một mô hình cho các mục danh sách của mình, lưu trữ nó dưới dạng đối tượng môi trường, tạo danh sách để hiển thị các mục và thêm liên kết trường văn bản để thêm các mục mới.

Tạo một mục chỉ với một mô tả rất đơn giản, nhưng nó không hữu ích lắm.

Chúng tôi sẽ cần đánh dấu mục là hoàn thành và chúng tôi có thể muốn một cách để đặt mức độ ưu tiên hoặc thêm ước tính về khối lượng công việc cho một nhiệm vụ.

Để làm điều này, chúng tôi sẽ thêm một chế độ xem chi tiết.

Trước khi chúng tôi làm điều này, tôi muốn xem lại các tùy chọn cho cấu trúc điều hướng ứng dụng trong SwiftUI trên Watch.

Điều hướng phân cấp được sử dụng cho các chế độ xem có mối quan hệ chi tiết danh sách.

Bắt đầu từ watchOS 9, sử dụng SwiftUI NavigationStack để tạo giao diện với loại cấu trúc điều hướng này.

Điều hướng dựa trên trang được sử dụng cho các chế độ xem có cấu trúc phẳng, trong đó tất cả các chế độ xem đều ngang hàng.

Một ví dụ tuyệt vời về điều hướng dựa trên trang là chế độ xem trong quá trình tập luyện của ứng dụng Workout, nơi mọi người có thể dễ dàng vuốt giữa các điều khiển tập luyện, số liệu và điều khiển phát lại trong quá trình tập luyện.

Một ứng dụng toàn màn hình có một chế độ xem duy nhất sử dụng toàn bộ màn hình.

Điều này thường được sử dụng cho các ứng dụng như trò chơi và các ứng dụng khác có một chế độ xem chính duy nhất.

Để xem toàn màn hình, hãy sử dụng công cụ sửa đổi ignoresSafeArea để mở rộng nội dung của bạn đến các cạnh của màn hình và công cụ sửa đổi thanh công cụ với giá trị hiển thị ẩn để ẩn thanh điều hướng.

Bảng phương thức là chế độ xem toàn màn hình trượt qua chế độ xem hiện tại.

Nó nên được sử dụng cho các nhiệm vụ quan trọng cần được hoàn thành như một phần của quy trình làm việc hiện tại.

Điều quan trọng là phải phân biệt khi nào nên sử dụng luồng phân cấp so với thời điểm sử dụng bảng phương thức.

Mail sử dụng phong cách phân cấp để hiển thị danh sách tin nhắn và hiển thị từng tin nhắn hoặc chuỗi dưới dạng chế độ xem chi tiết.

Có những hành động bạn có thể làm từ chi tiết tin nhắn, nhưng bạn không phải làm gì trước khi quay lại danh sách.

Nếu bạn quay lại danh sách và nhấn vào Tin nhắn mới, Thư sẽ sử dụng bảng phương thức để hiển thị chế độ xem Tin nhắn mới.

Bảng phương thức là lựa chọn đúng đắn vì bạn cần điền thông tin chi tiết của tin nhắn mới hoặc hủy trước khi tiếp tục.

Để hiển thị một trang tính phương thức, hãy tạo một thuộc tính để kiểm soát trạng thái trình bày trang tính.

Đặt thuộc tính dựa trên một hành động trong giao diện người dùng và sử dụng công cụ sửa đổi trang tính để hiển thị nội dung trang tính phương thức tùy chỉnh khi thuộc tính trạng thái trình bày là đúng.

Để thêm các mục thanh công cụ tùy chỉnh vào bảng phương thức, hãy thêm một thanh công cụ với các mục của bạn.

Lưu ý rằng các mục trên thanh công cụ của bạn nên sử dụng các vị trí phương thức như confirmationAction, cancellationAction và destructiveAction.

Chúng tôi sẽ sử dụng bảng phương thức để xem chi tiết vì chúng tôi đang chỉnh sửa một mục và chúng tôi muốn tập trung vào nhiệm vụ duy nhất này cho đến khi chúng tôi hoàn thành và nhấn Xong.

Để tìm hiểu thêm về điều hướng trong SwiftUI, bao gồm thêm chi tiết về NavigationStack và điều hướng có lập trình, hãy xem "Sách dạy nấu ăn SwiftUI để điều hướng."

Bây giờ chúng tôi đã quyết định cách điều hướng đến chế độ xem chi tiết của mình, chúng tôi sẽ cập nhật cấu trúc mục danh sách của mình.

Chúng tôi có các thuộc tính mới để lưu trữ công việc ước tính, ngày tạo và ngày hoàn thành.

Hãy cho mọi người một cách để xem và chỉnh sửa những chi tiết này.

Chúng tôi sẽ tạo một chế độ xem chi tiết với TextField để chỉnh sửa mô tả và một nút chuyển đổi để đánh dấu nhiệm vụ có hoàn thành hay không.

Nhưng chúng ta nên làm gì với công việc ước tính?

Chúng tôi biết tất cả các giá trị sẽ là số và chúng tôi có thể chỉ định một loạt các giá trị hợp lệ.

Bắt đầu từ watchOS 9, chúng ta có thể sử dụng Stepper.

Stepper là một lựa chọn tuyệt vời khi bạn muốn cung cấp quyền kiểm soát chi tiết để chỉnh sửa các giá trị tuần tự.

Bạn có thể chỉ định một loạt các giá trị và tùy chọn cung cấp một bước.

Bạn cũng có thể sử dụng Stepper để chỉnh sửa các giá trị tuần tự một cách hợp lý, nhưng không nhất thiết phải là các giá trị số.

Ví dụ, có lẽ chúng tôi muốn lưu ý mức độ căng thẳng ước tính cho một mặt hàng.

Chúng ta có thể tạo một mảng biểu tượng cảm xúc để chỉ ra mức độ căng thẳng, sau đó tạo Bước, ràng buộc giá trị với chỉ mục đã chọn trong mảng biểu tượng cảm xúc mức độ ứng suất và đặt phạm vi thành phạm vi chỉ mục biểu tượng cảm xúc.

Bước qua các giá trị làm tăng hoặc giảm mức độ ứng suất mà chúng tôi đang ước tính cho mặt hàng.

Chuẩn bị một phiên WWDC rất thú vị, nhưng chia sẻ sự phát triển ứng dụng Watch tuyệt vời với tất cả các bạn là một bữa tiệc.

Khi tôi có những mục căng thẳng trong danh sách của mình, hoặc chỉ có rất nhiều mục trong danh sách khiến tôi cảm thấy căng thẳng, tôi muốn chia sẻ một mục trong danh sách của mình với một người bạn để nhờ giúp đỡ.

Chúng tôi sẽ thêm một nút vào chế độ xem chi tiết của mình để cho phép mọi người chia sẻ một mục bằng cách sử dụng bảng chia sẻ.

Tôi muốn có thể nhấn vào một nút trên chế độ xem chi tiết của mình để chia sẻ mục, chọn từ danh sách bạn bè để yêu cầu trợ giúp, chỉnh sửa tin nhắn của tôi và gửi nó.

Để làm điều này, chúng tôi sẽ sử dụng một công cụ mới có sẵn cho chúng tôi trong SwiftUI trên watchOS 9: ShareLink.

Chúng tôi có thể chia sẻ mục danh sách của mình bằng cách tạo Liên kết Chia sẻ với mục của chúng tôi.

Chúng tôi có thể tùy chọn tùy chỉnh văn bản ban đầu của tin nhắn với chủ đề và tin nhắn.

Và cung cấp Bản xem trước để hiển thị trong Bảng chia sẻ khi ai đó chia sẻ mặt hàng.

Bạn có thể sử dụng ShareLink để chia sẻ từ ứng dụng SwiftUI của mình trong iOS, macOS và watchOS.

Hãy chắc chắn kiểm tra "Gặp gỡ có thể chuyển nhượng" để tìm hiểu thêm chi tiết và các tùy chọn cho ShareLink.

Bây giờ tôi có thể theo dõi khi tôi hoàn thành các mục và kêu gọi trợ giúp để hoàn thành công việc, tôi cũng muốn thêm một biểu đồ để xem năng suất của mình.

Tôi đã chọn sử dụng biểu đồ thanh vì tôi có một chuỗi dữ liệu duy nhất và các giá trị dữ liệu riêng biệt.

Biểu đồ thanh sẽ hiển thị rõ ràng dữ liệu này trên màn hình Đồng hồ miễn là tôi giới hạn lượng dữ liệu tôi hiển thị cùng một lúc.

Chúng ta sẽ bắt đầu bằng cách thêm chế độ xem biểu đồ vào cấu trúc điều hướng của ứng dụng.

Tôi đã chọn một chiến lược điều hướng dựa trên trang vì không có mối quan hệ chi tiết danh sách giữa danh sách mục và biểu đồ.

Ai đó có thể vuốt giữa danh sách và biểu đồ bất cứ lúc nào.

Để thêm điều hướng dựa trên trang cho danh sách và biểu đồ của chúng tôi, hãy bắt đầu bằng cách tạo cấu trúc ItemList để gói gọn chế độ xem danh sách.

Tôi đã chuyển toàn bộ nội dung của chế độ xem nội dung sang danh sách mục mới này.

Đóng gói danh sách mục ở đây sẽ cho phép chúng tôi có mã xem tab đơn giản, dễ đọc trong chế độ xem nội dung.

Chúng tôi cũng cần tạo một cấu trúc cho chế độ xem biểu đồ của mình.

Tôi sẽ tạm thời đặt một trình giữ chỗ để chúng ta có thể tập trung vào cấu trúc điều hướng của mình trước khi xây dựng biểu đồ của mình.

Bây giờ chúng ta sẽ thiết lập chế độ xem nội dung với chế độ xem tab kiểu trang với 2 tab: danh sách mục và biểu đồ.

Vì chúng tôi đã thiết lập cấu trúc điều hướng của mình, hãy nói về cách xây dựng biểu đồ này.

Tôi biết tôi có thể sử dụng SwiftUI Canvas và vẽ biểu đồ, nhưng bắt đầu từ watchOS 9, chúng tôi có câu trả lời dễ dàng hơn: Biểu đồ Swift.

Biểu đồ Swift cũng có sẵn trên iOS, macOS và tvOS, vì vậy bạn có thể sử dụng lại biểu đồ của mình ở bất cứ đâu bạn đang sử dụng SwiftUI.

Chúng tôi sẽ tổng hợp dữ liệu mà chúng tôi muốn lập biểu đồ và sau đó để Swift Charts hiển thị nó cho chúng tôi.

Đối với biểu đồ của chúng tôi, chúng tôi muốn hiển thị số lượng mục hoàn thành theo ngày.

Chúng tôi sẽ tạo một cấu trúc để lưu trữ dữ liệu tổng hợp cho biểu đồ.

Sau đó, chúng tôi sẽ viết một phương pháp nhỏ để tổng hợp dữ liệu mục danh sách của chúng tôi thành các phần tử dữ liệu biểu đồ.

Hiển thị một biểu đồ đơn giản bằng cách chỉ định dữ liệu để hiển thị và xác định chuỗi từ dữ liệu.

Chúng tôi đang sử dụng ngày làm giá trị x và số lượng mục đã hoàn thành làm giá trị y.

Để đạt được diện mạo mà tôi muốn trên màn hình Đồng hồ của mình, tôi đang tùy chỉnh trục x bằng cách sử dụng công cụ sửa đổi chartXAxis của Chart.

Tôi đang chỉ định một kiểu định dạng cho các nhãn giá trị trục.

Tôi cũng không muốn các đường lưới dọc, vì vậy tôi đã bỏ qua dấu AxisGridLine.

Tôi cũng đang tùy chỉnh trục y bằng cách sử dụng công cụ sửa đổi chartYAxis.

Tôi chỉ định một kiểu đường lưới trông đẹp với biểu đồ của tôi trên Watch.

Tôi đang định dạng nhãn giá trị trục dưới dạng số nguyên và bỏ qua nhãn trên cùng để ngăn nó bị cắt ở đầu biểu đồ.

Để tìm hiểu thêm về những điều tuyệt vời mà bạn có thể đạt được với Biểu đồ Swift, hãy xem "Xin chào Biểu đồ Swift" và "Biểu đồ Swift: Nâng tầm."

Biểu đồ của chúng tôi trông khá tốt, nhưng tôi muốn hiển thị thêm một chút dữ liệu nhưng vẫn giữ được trải nghiệm Xem tuyệt vời, vì vậy tôi sẽ làm cho nó có thể cuộn được.

Để thực hiện điều này, chúng tôi sẽ sử dụng công cụ sửa đổi digitalCrownRotation mới cho phép chúng tôi đặt lệnh gọi lại cho các sự kiện vương miện kỹ thuật số và chúng tôi sẽ triển khai hành vi cuộn tùy chỉnh cho biểu đồ của mình.

Hãy sẵn sàng thêm công cụ sửa đổi digitalCrownRotation bằng cách thêm một số thuộc tính để lưu trữ trạng thái khi ai đó cuộn qua biểu đồ.

Chỉ số ngày được đánh dấu là chỉ mục của điểm dữ liệu cho vị trí cuộn hiện tại.

Chúng tôi sẽ lưu trữ độ lệch vương miện để chúng tôi có thể hiển thị vị trí vương miện hiện tại khi người đó đang cuộn qua biểu đồ.

Đây là một giá trị trung gian, trên hoặc giữa các điểm dữ liệu, trong khi vương miện đang di chuyển.

Để theo dõi xem ai đó có đang chủ động cuộn hay không, chúng tôi sẽ lưu trữ trạng thái nhàn rỗi.

Chúng tôi sẽ sử dụng thông tin này để thêm một chút hoạt ảnh khi quá gian cuộn vương miện dừng lại và bắt đầu.

Bây giờ chúng ta đã có các thuộc tính để lưu trữ các giá trị, chúng ta có thể thêm công cụ sửa đổi digitalCrownRotation.

Chúng tôi sẽ liên kết giá trị detent với thuộc tính highlightedDateIndex.

Về mặt cơ học, một chốt là một cơ chế giữ một cái gì đó ở một vị trí cho đến khi đủ lực được tác dụng để di chuyển nó.

Ví dụ, khi tôi mở cửa xe, có một vị trí "dừng lại" nơi cửa sẽ lắng xuống.

Tôi có thể đẩy mạnh hơn một chút và mở cánh cửa rộng hơn đến một "điểm dừng" khác.

Để đóng nó lại, tôi cần phải kéo đủ mạnh để vượt qua sức đề kháng để kéo nó ra khỏi "điểm dừng".

Nếu không, nó sẽ quay trở lại tư thế nghỉ ngơi đó.

Đây là một ý định.

Điểm dừng cho cửa ô tô giúp chúng tôi hiểu được ý định trong API này.

Mục đích là vị trí rãnh nghỉ ngơi của vương miện trên tầm nhìn của bạn.

Trong trình xử lý cho cuộc gọi lại onChange, chúng tôi sẽ đặt giá trị cho isCrownIdle thành false, vì chúng tôi biết rằng vương miện đang cuộn và chúng tôi sẽ đặt giá trị crownOffset thành giá trị hiện tại để cho phép chúng tôi hiển thị vị trí hiện tại trên biểu đồ trong khi cuộn.

Trong trình xử lý cho cuộc gọi lại onIdle, chúng tôi sẽ đặt giá trị cho isCrownIdle thành true.

Bây giờ chúng ta có thể hiển thị vị trí của vương miện khi chúng ta cuộn trên biểu đồ.

Để làm điều này, chúng ta có thể sử dụng RuleMark từ Swift Charts.

RuleMark là một đường thẳng trên biểu đồ của bạn.

Bạn có thể sử dụng nó để hiển thị một đường ngang hoặc dọc, để hiển thị một ngưỡng, ví dụ, hoặc để hiển thị một đường dốc.

Chúng tôi sẽ tạo một RuleMark với giá trị ngày bù đắp vương miện để hiển thị vị trí hiện tại của cuộn vương miện.

Chỉ để làm cho cái này trông đẹp hơn một chút, tôi muốn đường vị trí vương miện mờ dần khi vương miện ngừng di chuyển.

Thật đơn giản để tạo hiệu ứng động cho điều này bằng cách sử dụng thuộc tính isCrownIdle mà chúng tôi đã thêm vào.

Chúng tôi sẽ thêm một thuộc tính để lưu trữ độ mờ đục cho màu sắc chúng tôi đang sử dụng trong foregroundStyle cho RuleMark.

Và thêm công cụ sửa đổi onChange vào biểu đồ để tạo hiệu ứng động cho sự thay đổi giá trị crownPositionOpacity khi giá trị isCrownIdle thay đổi.

Sau đó cập nhật foregroundStyle cho RuleMark để sử dụng độ mờ đục.

Để hiển thị giá trị bên cạnh thanh trên biểu đồ khi chúng ta cuộn, chúng ta có thể thêm chú thích vào BarMark.

Chúng tôi sẽ đặt chú thích ở phía trên cùng của thanh khi đó là thanh cuối cùng.

Nếu không, chúng tôi sẽ đặt nó ở phía trên cùng.

Hãy dành một chút thời gian để xem những gì chúng tôi đã hoàn thành chỉ với công cụ sửa đổi digitalCrownRotation, RuleMark trong Swift Charts và hoạt ảnh SwiftUI đơn giản.

Bước cuối cùng để tạo biểu đồ có thể cuộn tùy chỉnh của chúng tôi là điều chỉnh phạm vi dữ liệu cho biểu đồ khi ai đó cuộn.

Tạo một tài sản để lưu trữ phạm vi hiển thị.

Tạo biến chartData để cung cấp dữ liệu trong phạm vi cho biểu đồ.

Khi highlightedDateIndex thay đổi, hãy gọi một phương thức để kiểm tra chartDataRange và cập nhật nó nếu cần.

Khi ai đó cuộn qua biểu đồ bằng Digital Crown, biểu đồ sẽ cuộn để hiển thị dữ liệu có sẵn.

Bây giờ chúng tôi đã hoàn thành việc triển khai tất cả các tính năng mà chúng tôi đã lên kế hoạch.

Để tìm hiểu thêm về các tính năng SwiftUI mới có sẵn trong watchOS 9, hãy xem "Có gì mới trong SwiftUI."

Khi bạn đang lên kế hoạch cho ứng dụng Đồng hồ hoặc các tính năng ứng dụng Đồng hồ mới của mình, hãy nghĩ về những gì tạo nên trải nghiệm ứng dụng Đồng hồ tuyệt vời.

Trong khi bạn đang thiết kế ứng dụng của mình, hãy xem xét chiến lược điều hướng ứng dụng của bạn để đảm bảo rằng ứng dụng của bạn dễ dàng và trực quan.

Và sử dụng SwiftUI cho các tùy chọn phát triển đơn giản và phong phú hơn.

Tiếp tục xây dựng các ứng dụng Watch tuyệt vời.

Và hãy nhớ rằng, vì bạn, có một ứng dụng cho điều đó!

.