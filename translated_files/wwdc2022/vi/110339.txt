110339

♪ ♪

Xin chào mọi người. Tôi là Elliot Garner.

Tôi là một kỹ sư trong nhóm Công nghệ Internet và hôm nay tôi sẽ thảo luận về cách xây dựng trải nghiệm giữa thiết bị với thiết bị bằng cách sử dụng khung Mạng và khung đồng hành mới của nó, DeviceDiscoveryUI.

Chúng ta sẽ bắt đầu bằng cách tìm hiểu về kết nối đa thiết bị và cách nó có thể cải thiện ứng dụng của bạn.

Chúng ta sẽ khám phá cách một khung mới, DeviceDiscoveryUI, kết hợp với khung Mạng để làm cho kết nối đó đơn giản nhất có thể.

Chúng tôi sẽ xem qua một ví dụ mã về cách cập nhật ứng dụng của bạn để sử dụng DeviceDiscoveryUI, bao gồm cái nhìn sâu sắc về cách khám phá các thiết bị bằng bộ chọn thiết bị hệ thống mới và cách kết nối với các thiết bị đó bằng Network framework.

Vậy hãy bắt đầu với kết nối đa thiết bị.

Kết nối và trao đổi dữ liệu giữa các thiết bị gần đó thường rất cần thiết để xây dựng trải nghiệm liền mạch, tích hợp trong các ứng dụng của bạn.

Các ứng dụng thể dục và thiền định thường hoạt động tốt nhất trên màn hình lớn, nơi huấn luyện viên có thể thực hiện các động tác.

Mọi người được hưởng lợi từ việc xem nhịp tim, lượng calo đốt cháy và dữ liệu chuyển động được thu thập từ Apple Watch của họ.

Tương tự như vậy, trải nghiệm chơi game có thể được thực hiện sống động hơn với đầu vào và hành động từ iPhone được kết nối hoặc tăng cường bằng cách mở rộng trải nghiệm màn hình thứ hai sang iPad gần đó.

Tất cả những trải nghiệm này - trò chơi, thể dục và ứng dụng chăm sóc sức khỏe - tất cả đều chia sẻ nhu cầu kết nối giữa các thiết bị đáng tin cậy và dễ sử dụng.

Và tất cả bắt đầu với việc phát hiện ra một thiết bị.

Để giúp khởi động khám phá đó, chúng tôi đang giới thiệu DeviceDiscoveryUI - một khuôn khổ mới cung cấp khám phá an toàn, bảo vệ quyền riêng tư cho các thiết bị gần đó.

Mới trong iOS 16, DeviceDiscoveryUI kết hợp với khung Mạng để cho phép kết nối thiết bị với thiết bị giữa các ứng dụng Apple TV của bạn và iPhone, iPad và Đồng hồ Apple gần đó.

DeviceDiscoveryUI cung cấp giao diện người dùng hệ thống để dễ dàng khám phá các thiết bị gần đó.

Khi một thiết bị đã được phát hiện, ứng dụng của bạn có thể dễ dàng mở kết nối với thiết bị đó.

Bởi vì kết nối này được thiết lập bằng giao diện người dùng hệ thống, bạn không cần phải lo lắng về việc quản lý quyền truy cập mạng cục bộ.

Và bởi vì hệ thống xử lý việc thiết lập kết nối này một cách an toàn, bạn không còn cần phải triển khai trao đổi khóa của riêng mình nữa, bởi vì nền tảng mã hóa dữ liệu được truyền cho bạn.

Ở đây chúng ta có thể thấy giao diện người dùng hệ thống đang hoạt động.

Ở bên trái, biểu tượng ứng dụng của bạn được hiển thị, cùng với chuỗi mô tả sử dụng bắt buộc giải thích ứng dụng của bạn làm gì với kết nối giữa các thiết bị.

Bên phải là danh sách các thiết bị được phát hiện.

Bởi vì một số ứng dụng có thể chỉ khả dụng trên các nền tảng cụ thể, bạn có thể lọc các thiết bị được phát hiện theo nền tảng.

Khi chọn "Adam's iPhone", hệ thống sẽ nhắc cho phép tạo kết nối giữa các thiết bị đó.

Với sự đồng ý rõ ràng của người dùng này, bạn không còn cần yêu cầu quyền truy cập vào toàn bộ mạng cục bộ nữa.

Và một khi quyền đã được cấp, ứng dụng của bạn sẽ được khởi chạy trên thiết bị đã chọn để xử lý các kết nối đến.

Điều này có nghĩa là ứng dụng của bạn không còn cần phải chạy trên cả hai thiết bị trước khi kết nối có thể được thiết lập.

Khi được cấp phép trên "Joe's Apple Watch", hệ thống sẽ ngay lập tức khởi chạy ứng dụng của bạn để hai thiết bị có thể kết nối.

Và nếu ứng dụng của bạn không được cài đặt trên thiết bị đó, hệ thống sẽ đề nghị đưa mọi người đến App Store.

Bằng cách đó họ có thể ngay lập tức tải xuống ứng dụng của bạn và bắt đầu sử dụng các tính năng mới của bạn.

Đây là cách nó trông như thế nào trên watchOS.

Nhấn vào nút sẽ ngay lập tức khởi chạy trang ứng dụng của bạn trong App Store, để tải xuống nhanh chóng và dễ dàng.

Vì vậy, bây giờ chúng ta đã thảo luận về những gì DeviceDiscoveryUI có thể làm cho các ứng dụng của bạn, hãy xem cách áp dụng khuôn khổ mới này.

Trong các phiên trước, chúng tôi đã xây dựng ứng dụng Tic-Tac-Toe bằng cách sử dụng khung Mạng.

Hôm nay chúng tôi sẽ cập nhật nó để sử dụng DeviceDiscoveryUI để khám phá và kết nối với các thiết bị gần đó.

Trong các lần lặp lại trước đó, ứng dụng của chúng tôi chỉ hỗ trợ chơi trò chơi giữa các thiết bị iOS.

Vì vậy, để bắt đầu, chúng tôi đã cập nhật dự án của mình cho Universal Purchase và thêm mục tiêu tvOS và watchOS mà tất cả đều chia sẻ cùng một ID gói.

Và chúng tôi đã thay đổi ứng dụng để thay vì cạnh tranh với người chơi khác, bạn đang sử dụng thiết bị của mình để chơi với AI trên TV.

Tiếp theo, chúng tôi cần bổ sung vào Info.plist trên cả ứng dụng tvOS cũng như các nền tảng khác để khai báo dịch vụ ứng dụng Tic-Tac-Toe mới của chúng tôi.

Cuối cùng, chúng tôi sẽ trình bày bộ chọn thiết bị mới và sử dụng các điểm cuối kết quả để tạo kết nối của chúng tôi.

Bây giờ tôi sẽ chuyển sang Xcode và cho bạn thấy những khóa Info.plist mới đó là gì và chúng cần được thêm vào ứng dụng như thế nào.

Trên tvOS, ứng dụng của chúng tôi cần cho hệ thống biết những dịch vụ ứng dụng nào cần khám phá và những nền tảng mà các dịch vụ đó hỗ trợ.

Để làm điều đó, chúng ta cần thêm "Dịch vụ ứng dụng" Info.plist mới của mình.

Từ điển này sẽ ánh xạ đến một trong hai mảng khác nhau.

Trên tvOS, chúng ta cần khai báo mảng "Browses", chứa tất cả các dịch vụ ứng dụng mà ứng dụng của chúng tôi phát hiện ra.

Mỗi mục nhập đại diện cho một dịch vụ ứng dụng khác nhau.

Mặt hàng đầu tiên của chúng tôi đại diện cho dịch vụ ứng dụng Tic-Tac-Toe của chúng tôi.

Đây là một từ điển chứa mã định danh dịch vụ, mô tả sử dụng và nền tảng mà dịch vụ này hỗ trợ của chúng tôi.

Mã định danh dịch vụ là tên dịch vụ của chúng tôi, "TicTacToe".

Mô tả sử dụng là một chuỗi sẽ được hiển thị trong bộ chọn thiết bị để giải thích lý do tại sao ứng dụng của chúng tôi cần quyền truy cập vào các thiết bị cục bộ khác.

Cuối cùng, chúng tôi có hỗ trợ nền tảng của mình.

Mảng này chứa các nền tảng được hỗ trợ bởi dịch vụ và hệ thống sẽ lọc các thiết bị được phát hiện cho phù hợp.

Bạn có thể thấy ở đây rằng dịch vụ của chúng tôi hỗ trợ các thiết bị iOS, iPadOS và watchOS.

Chúng tôi đã cập nhật Info.plist được sử dụng cho iOS và iPadOS với từ điển "Dịch vụ ứng dụng" tương ứng.

Bây giờ chúng ta sẽ cập nhật danh sách cho watchOS.

Lần này, chúng tôi khai báo mảng "Quảng cáo".

Bởi vì DeviceDiscoveryUI sẽ khởi chạy ứng dụng của chúng tôi khi nó không chạy, hệ thống sử dụng mảng này để biết dịch vụ nào sẽ quảng cáo.

Mục nhập của chúng tôi trong mảng "Quảng cáo" chỉ cần mã định danh dịch vụ "TicTacToe".

Đảm bảo rằng mã định danh dịch vụ giống nhau cho mọi nền tảng đã được khai báo trong tvOS Info.plist.

Bây giờ Tic-Tac-Toe đã được cấu hình để duyệt và quảng cáo dịch vụ ứng dụng của chúng tôi, hãy để nó thực sự hiển thị giao diện người dùng chọn thiết bị.

Mô tả cách sử dụng của chúng tôi xuất hiện ở bên trái.

Chúng tôi đảm bảo chuỗi này đang hoạt động và nó thông báo cho mọi người về lý do tại sao họ muốn kết nối thiết bị và dữ liệu họ đang chia sẻ.

Đối với Tic-Tac-Toe, chúng tôi đang sử dụng thiết bị được kết nối làm bộ điều khiển để chơi trò chơi.

Quay lại Xcode, vì DeviceDiscoveryUI thay thế nhu cầu duyệt thủ công các thiết bị gần đó và bảo mật kết nối cho chúng tôi, chúng tôi có thể xóa tệp PeerBrowser và phần mở rộng mật mã của chúng tôi cho NWParameters vì chúng không còn cần thiết nữa.

Bây giờ, chúng tôi cần các thông số để mô tả cách chúng tôi muốn kết nối với các thiết bị gần đó.

Đầu tiên, chúng tôi sử dụng trình khởi tạo tiện lợi mới, applicationService, trên NWParameters, cung cấp cho chúng tôi mọi thứ chúng tôi cần cho loại kết nối cục bộ này.

Tiếp theo, chúng ta có thể sử dụng trình đóng khung hiện có của mình để giao tiếp các hành động chơi trò chơi mà không có bất kỳ thay đổi nào và chỉ cần thêm nó vào ngăn xếp giao thức trong các tham số đó.

Bây giờ, chúng tôi đã sẵn sàng để tạo và hiển thị bộ chọn thiết bị.

Bộ chọn thiết bị là cách ứng dụng của chúng tôi phát hiện iPhone, iPad và Đồng hồ Apple gần đó.

Đầu tiên, chúng ta cần kiểm tra xem bộ chọn thiết bị có được hỗ trợ trên thiết bị hiện tại hay không.

Để làm điều đó, chúng tôi gọi hàm isSupported với bộ mô tả duyệt và các tham số mà chúng tôi sẽ sử dụng với bộ chọn.

Giả sử nó trả về đúng, chúng ta có thể tiếp tục và tạo bộ chọn thiết bị.

Chúng tôi khởi tạo bộ chọn thiết bị với các tham số mà chúng tôi đã tạo trước đó và trình duyệt mô tả loại .applicationService, chỉ định tên của dịch vụ ứng dụng mà chúng tôi đã xác định trong Info.plist.

Bây giờ bộ chọn thiết bị đã được tạo, chúng ta cần trình bày bộ điều khiển chế độ xem.

Bộ chọn thiết bị cần phải luôn được trình bày dưới dạng chế độ xem phương thức toàn màn hình.

Tiếp theo, chúng ta cần truy cập thuộc tính điểm cuối không đồng bộ của bộ chọn.

Khi kết nối đã được xác nhận và ứng dụng của chúng tôi đã được khởi chạy trên thiết bị từ xa, chúng tôi sẽ nhận được NWEndpoint và việc thực thi sẽ tiếp tục.

Bây giờ ứng dụng của chúng tôi đã nhận được NWEndpoint, chúng tôi có thể sử dụng nó để kết nối với thiết bị đã chọn, giống như chúng tôi đã làm trong các phiên bản Tic-Tac-Toe trước đó.

Chúng tôi sẽ sử dụng các thông số tương tự khi mở kết nối như được cung cấp cho bộ chọn thiết bị.

Ngoài các thông số, việc mở kết nối với thiết bị này trông giống hệt như trước đây.

Chuyển sang thiết bị đã chọn, khi ứng dụng của chúng tôi đã được khởi chạy, chúng tôi cần ngay lập tức thực hiện lời hứa mà ứng dụng của chúng tôi đã thực hiện với hệ thống bằng cách tạo một NWListener.

NWListener cần được tạo ngay sau khi ứng dụng được khởi chạy để chấp nhận bất kỳ kết nối đến nào cho dịch vụ ứng dụng đó.

NWListener cần được tạo với các tham số giống hệt như trước đây và chúng ta cần đặt dịch vụ ứng dụng trên trình nghe bằng cách sử dụng mã định danh từ Info.plist.

Khi TV mở kết nối với thiết bị này, trình nghe mà chúng tôi đã thiết lập sẽ nhận được kết nối đó ở đây, trong trình xử lý kết nối mới, giống như trước đây.

Vì vậy, bây giờ kết nối đã được thiết lập đúng cách, chúng ta cần xử lý quá trình chuyển đổi trạng thái ứng dụng.

Khi ứng dụng của chúng tôi được nền, kết nối sẽ chuyển sang trạng thái không thành công với lỗi liên quan ECONNABORTED.

Nếu chúng tôi muốn tiếp tục giao tiếp giữa các thiết bị, chúng tôi sẽ thiết lập một kết nối mới từ TV đến cùng một điểm cuối.

Sau khi bắt đầu, kết nối mới này vẫn ở trạng thái chuẩn bị và chuyển sang trạng thái sẵn sàng sau khi ứng dụng được tiếp tục trên thiết bị đã chọn.

Trên thiết bị đó, kết nối mới sẽ được gửi đến cùng một NWListener và có thể được sử dụng để tiếp tục hoạt động của chúng tôi.

Và thế là xong.

Mọi thứ chúng ta cần làm để chuyển sang DeviceDiscoveryUI hiện đã hoàn tất.

Hãy xem trò chơi của chúng ta đang hoạt động.

Ứng dụng khởi chạy trên TV và chúng tôi nhấn Tìm đối thủ để trình bày bộ chọn thiết bị.

Khi chúng tôi chọn một thiết bị, nó sẽ nhắc sự cho phép.

Khi được cấp, ứng dụng được khởi chạy ngay lập tức vào phiên trò chơi của chúng tôi.

Bây giờ, chúng ta có thể chơi với TV bằng cách đặt biểu tượng cảm xúc trên bảng.

Tuyệt vời.

Và đó là cách dễ dàng để kết nối các thiết bị với Apple TV.

Tic-Tac-Toe có sẵn trên trang web của nhà phát triển, vì vậy bạn có thể tải xuống và khám phá tất cả mã mà chúng ta đã thảo luận hôm nay.

Nếu bạn có bất kỳ câu hỏi nào, hãy đăng chúng lên Diễn đàn Nhà phát triển.

Cân nhắc áp dụng DeviceDiscoveryUI trong các ứng dụng của bạn để cung cấp trải nghiệm liền mạch giữa thiết bị với thiết bị.

Và vui lòng cung cấp phản hồi cho chúng tôi.

Chúng tôi biết rằng giao tiếp giữa thiết bị với thiết bị là một trải nghiệm thiết yếu.

DeviceDiscoveryUI được tạo ra để đáp ứng phản hồi của nhà phát triển.

Chúng tôi muốn xây dựng các tính năng này với bạn, vì vậy vui lòng gửi báo cáo trong Trợ lý phản hồi cho bất kỳ điều gì bạn muốn thấy trong DeviceDiscoveryUI.

Chúng tôi rất vui mừng được cùng nhau cải tiến công nghệ này để giúp làm cho ứng dụng của bạn trở nên tốt hơn.

Cảm ơn bạn rất nhiều vì đã tham gia cùng tôi, và chúc bạn có một WWDC 2022 tuyệt vời.