10153

Tyler: Xin chào, tên tôi là Tyler, và tôi là một kỹ sư trong nhóm trợ năng WebKit.

Trong phiên hôm nay, chúng ta sẽ tham quan về khả năng truy cập web hiện đại, bắt đầu với tổng quan ngắn gọn về các công nghệ hỗ trợ như trình đọc màn hình.

Sau đó, chúng ta sẽ nói về những cách bạn có thể xây dựng các ứng dụng web phong phú, có thể truy cập bằng các công cụ như điều khiển tùy chỉnh, ngôn ngữ đánh dấu tổng hợp giọng nói hoặc SSML, trong Web Speech API và phần tử hộp thoại.

Vậy hãy bắt đầu bằng cách nói về các công nghệ hỗ trợ.

Khoảng một trong bảy người trên toàn thế giới bị khuyết tật ảnh hưởng đến cách họ tương tác với thế giới, thiết bị của họ và web.

Mọi người có thể bị khuyết tật ở mọi lứa tuổi, trong bất kỳ khoảng thời gian nào và ở các mức độ nghiêm trọng khác nhau.

Apple đã xây dựng nhiều công cụ khác nhau để cho phép người dùng tương tác với thiết bị của họ theo cách phù hợp nhất với họ.

Những công cụ này bao gồm VoiceOver, Switch Control, Voice Control và Full Keyboard Access, tất cả đều cung cấp các phương tiện sử dụng thiết bị thay thế.

Để tìm hiểu thêm về các công cụ này và một số công cụ khác, hãy xem phiên năm ngoái, có tiêu đề: "Hỗ trợ truy cập bàn phím đầy đủ trong ứng dụng iOS của bạn."

Để cảm nhận điều này như thế nào trên một trang web thực, hãy sử dụng VoiceOver để điều hướng một trang web đánh giá bài kiểm tra mẫu.

Trên iPad của tôi, tôi sẽ nhấn ba lần nút trên cùng để kích hoạt VoiceOver.

Siri: Bật VoiceOver. Safari, Hiển thị thanh bên, Nút.

Tyler: Và bây giờ, với VoiceOver đang hoạt động, tôi sẽ nhấn vào tiêu đề trang để tập trung nó...

Siri: Bài kiểm tra Pop, Tiêu đề cấp 1.

Tyler: Và vuốt sang phải để di chuyển qua các yếu tố trên trang này.

Siri: Một trong sáu: Có bao nhiêu lát trong 1/4 chiếc bánh pizza với tổng cộng tám lát?

Hai lát, nút radio, không được chọn, một trong bốn, Ba lát-- Bốn lát-- Sáu lát-- Câu hỏi tiếp theo. Nút bấm.

Tyler: Là một nhà phát triển web, bạn có nhiều công cụ theo ý của mình để làm cho các trang của bạn có thể truy cập được cho người dùng các công nghệ như VoiceOver.

Ví dụ, Safari có hỗ trợ khả năng truy cập tích hợp cho các phần tử HTML ngữ nghĩa như nút, h1 đến h6, các phần tử bảng, các phần tử danh sách và nhiều hơn nữa.

Sử dụng các yếu tố HTML ngữ nghĩa này nên là mặc định của bạn, vì điều này sẽ đảm bảo trải nghiệm nhất quán, dễ tiếp cận cho người dùng của bạn trên tất cả các trình duyệt.

Tuy nhiên, đôi khi bạn có thể có nhu cầu HTML ngữ nghĩa không được đáp ứng hoàn toàn và cần tạo các thành phần tùy chỉnh bằng JavaScript.

Nếu đúng như vậy, bạn cũng có thể sẽ cần bổ sung các thành phần của mình bằng các thuộc tính ARIA để ngữ nghĩa của chúng được truyền tải đúng cách đến các công nghệ hỗ trợ.

Điều này đưa chúng ta đến chủ đề thứ hai trong ngày, các điều khiển tùy chỉnh.

Giả sử chúng tôi muốn làm cho câu hỏi đố pizza hấp dẫn hơn.

Một điều chúng tôi có thể làm là thay thế các nút radio bằng một điều khiển tùy chỉnh cho phép người dùng thêm và xóa các lát cắt khỏi khay bánh pizza bằng một cú chạm.

Đánh dấu của chúng tôi cho điều khiển tùy chỉnh này có thể bắt đầu bằng div và ID.

Để làm cho thành phần này có thể hoạt động cho người dùng tương tác bằng một cú chạm hoặc nhấp chuột, chúng ta sẽ cần thêm một trình nghe sự kiện nhấp chuột.

Hãy tạo một lớp PizzaControl mới với hàm tạo chấp nhận ID của một phần tử.

Chúng tôi sẽ lấy phần tử đó theo ID, và sau đó thêm trình nghe sự kiện nhấp chuột cho nó.

Trình nghe này sẽ tính toán số lượng lát cắt mới dựa trên vị trí đã chạm và sau đó chuyển giá trị đó cho một hàm được gọi là cập nhật để hiển thị lại điều khiển.

Điều này sẽ hoạt động tốt cho một số người dùng, nhưng không phải tất cả.

Ví dụ, còn những người dùng khiếm thị của chúng tôi, những người sẽ không biết nhấp hoặc chạm vào đâu?

Khi xây dựng các thành phần tùy chỉnh, chúng ta phải luôn xem xét cách người dùng các công nghệ hỗ trợ thuộc mọi loại sẽ tương tác với thành phần của chúng ta.

Với ý nghĩ đó, bước đầu tiên để làm cho thành phần của chúng tôi có thể truy cập được là cung cấp cho nó một thuộc tính vai trò với giá trị "thanh trượt".

Bản đồ điều khiển của chúng tôi khá độc đáo với mô hình thanh trượt.

Có một giá trị tối thiểu, không lát cắt, một giá trị tối đa, tám lát, và một giá trị hiện tại, bốn lát cắt.

Chúng tôi cũng sẽ cần thêm một tabindex bằng 0 để đảm bảo thành phần của chúng tôi có thể tập trung cho người dùng bàn phím và các giao diện không chạm khác.

Chúng tôi cũng sẽ cần thêm một vài thuộc tính ARIA.

Aria-valuemin và aria-valuemax thông báo cho các công nghệ hỗ trợ về các giá trị tối thiểu và tối đa cho thanh trượt này.

Các thuộc tính này tương tự như các thuộc tính tối thiểu và tối đa mà bạn có thể sử dụng trên các đầu vào loại phạm vi gốc.

Tiếp theo, hãy thêm aria-valuenow để truyền đạt giá trị hiện tại của điều khiển.

Chúng tôi cũng sẽ sử dụng aria-valuetext để cung cấp mô tả hữu ích hơn về giá trị hiện tại, đó là bốn lát cắt.

Bây giờ chúng tôi đã thiết lập điều khiển của mình như một thanh trượt có thể tập trung, chúng tôi cần xử lý các bản cập nhật về giá trị của điều khiển từ các công nghệ hỗ trợ.

Trên iOS, VoiceOver tạo điều kiện thuận lợi cho việc điều chỉnh thanh trượt bằng một ngón tay vuốt lên để tăng thanh trượt và vuốt xuống để giảm thanh trượt.

Safari cung cấp một cách dễ dàng để xử lý những cử chỉ này.

Khi người dùng VoiceOver vuốt lên với thanh trượt lấy nét, Safari sẽ tự động mô phỏng sự kiện phím mũi tên bên phải.

Và tương tự, nếu người dùng VoiceOver vuốt xuống với thanh trượt lấy nét, một sự kiện phím mũi tên bên trái sẽ được mô phỏng.

Những sự kiện mô phỏng này hoạt động giống như các lần nhấn phím thực, có nghĩa là chúng có thể được xử lý bởi những người nghe sự kiện chính.

Với kiến thức mới này trong vành đai công cụ của chúng tôi, hãy thêm một trình nghe keydown vào điều khiển bánh pizza của chúng tôi.

Nếu phím được kích hoạt là mũi tên phải hoặc mũi tên lên, chúng tôi sẽ cập nhật điều khiển của mình với số lượng lát cắt hiện tại cộng với một lát.

Và tương tự, nếu phím được kích hoạt là mũi tên trái hoặc mũi tên xuống, chúng tôi sẽ cập nhật điều khiển của mình với số lượng lát cắt hiện tại trừ đi một.

Thêm trình nghe sự kiện chính này không chỉ mang lại lợi ích cho người dùng VoiceOver mà còn cho người dùng Truy cập Bàn phím Đầy đủ, những người có thể phụ thuộc rất nhiều hoặc hoàn toàn vào ứng dụng web của bạn có thể truy cập bàn phím.

Với cả hai trình nghe sự kiện của chúng tôi được thiết lập, có lẽ bây giờ chúng tôi cũng muốn xác định chức năng cập nhật của mình.

Đầu tiên, chúng tôi sẽ kẹp giá trị mà chúng tôi được cung cấp để đảm bảo nó nằm trong giới hạn, từ 0 đến tám và cập nhật trạng thái số lượng lát được lưu trữ của chúng tôi thành giá trị này.

Tiếp theo, chúng tôi cần đảm bảo rằng chúng tôi cập nhật cả biểu diễn trực quan và ARIA trong điều khiển của chúng tôi.

Khi xây dựng các thành phần tùy chỉnh, một quy tắc tốt là nếu bạn đang cập nhật biểu diễn trực quan của thành phần của mình, bạn cũng cần suy nghĩ về cách bạn sẽ cập nhật biểu diễn ARIA.

Trong trường hợp này, chúng ta cần cập nhật cả thuộc tính aria-valuenow và aria-valuetext để thông báo cho người dùng về các công nghệ hỗ trợ của trạng thái điều khiển mới.

Chúng ta sẽ bắt đầu bằng cách đặt aria-valuenow là số lượng lát cắt hiện tại.

Tiếp theo, chúng tôi sẽ đặt aria-valuetext là mô tả thân thiện với con người hơn về số lượng lát cắt, cộng với từ "lát" hoặc "lát cắt".

Được rồi, bây giờ tất cả đã có sẵn, hãy quay lại ứng dụng web đánh giá bài kiểm tra của chúng tôi để xem trải nghiệm với VoiceOver như thế nào.

Tôi sẽ bắt đầu bằng cách nhấn vào điều khiển bánh pizza để tập trung vào nó.

Siri: Bốn lát, có thể điều chỉnh.

Vuốt lên hoặc xuống bằng một ngón tay để điều chỉnh giá trị.

Tyler: Chúng tôi nghe nói rằng VoiceOver đã đọc giá trị ban đầu của thanh trượt, bốn lát cắt và nói với chúng tôi rằng nó có thể điều chỉnh được.

Theo lời nhắc của VoiceOver, chúng ta có thể vuốt lên để tăng số lượng lát cắt được chọn...

Siri: Năm lát cắt. Sáu lát.

Tyler: Và vuốt xuống để giảm số lượng lát cắt đã chọn.

Siri: Năm lát cắt. Bốn lát.

Tyler: Với những thay đổi này, thành phần thanh trượt tùy chỉnh của chúng tôi giờ đây dễ tiếp cận hơn nhiều.

Bây giờ, hãy nói về cách bạn có thể sử dụng SSML trong Web Speech API để xây dựng trải nghiệm phong phú hơn cho tất cả người dùng của bạn.

Web Speech API được tạo thành từ hai giao diện JavaScript chính: SpeechRecognition cho đầu vào âm thanh và SpeechSynthesis cho đầu ra âm thanh chuyển văn bản thành giọng nói.

Web Speech cung cấp cho bạn khả năng cung cấp giao diện hỗ trợ giọng nói hoặc chỉ hỗ trợ giọng nói cho ứng dụng web của bạn.

Điều này có thể có lợi cho người dùng khuyết tật vận động, những người có thể gặp khó khăn khi sử dụng các phương tiện điều khiển khác, như chuột, bàn phím hoặc màn hình cảm ứng.

Điều mới đối với SpeechSynthesis trên Safari là khả năng sử dụng SSML để thao tác cách nói văn bản của bạn.

SSML có rất nhiều khả năng.

Ví dụ, bạn có thể sử dụng phần tử ngắt để chèn tạm dừng trong lời nói với thời gian bạn chọn.

Bạn có thể muốn yêu cầu người dùng của mình hít vào... và thở ra.

Sử dụng yếu tố âm vị, bạn có thể kiểm soát cách phát âm của các từ, như "tomayto" so với "tomahto".

Yếu tố prosody cho phép bạn thao tác cao độ, tốc độ và âm lượng của văn bản nói của bạn.

Và những thứ này chỉ làm xước bề mặt khả năng của SSML.

Để tìm hiểu thêm, hãy xem thông số kỹ thuật SSML trên w3.org.

Hãy sử dụng kiến thức mới tìm thấy của chúng ta về SSML.

Đối với câu hỏi cuối cùng của bài kiểm tra của chúng tôi, chúng tôi yêu cầu học sinh chọn một nút radio có bản dịch tiếng Tây Ban Nha chính xác của cụm từ, "nước".

Chúng tôi có thể làm cho câu hỏi này hấp dẫn hơn bằng cách cho phép người dùng nhấn một nút để đọc câu hỏi và câu trả lời bằng chuyển văn bản thành giọng nói, sử dụng SSML để đọc các cụm từ tiếng Tây Ban Nha bằng giọng Tây Ban Nha-địa phương.

Hãy bắt đầu bằng cách tạo nút của chúng tôi, đảm bảo bọc biểu tượng cảm xúc loa trong một khoảng thời gian với aria-hidden được đặt thành true, vì mô tả của biểu tượng cảm xúc này không đặc biệt hữu ích ở đây.

Tiếp theo, hãy tạo một hàm JavaScript trợ giúp được gọi là wrapWithSSML, hàm này cần một cụm từ để nói và một ngôn ngữ giọng nói để nói nó.

Chúng ta sẽ bắt đầu xây dựng chuỗi SSML của mình với phần tử ngắt để chèn một khoảng dừng ngắn trước mỗi cụm từ để xây dựng sự nhấn mạnh.

Với yếu tố prosody, chúng tôi sẽ chỉ định rằng chúng tôi muốn cụm từ của mình được nói ở mức 80% tỷ lệ mặc định.

Và cuối cùng, chúng ta có thể sử dụng yếu tố lang để chọn giọng nói cụ thể theo ngôn ngữ mà chúng ta muốn cụm từ của mình được nói.

Và bây giờ chúng tôi sẽ thêm trình nghe sự kiện nhấp chuột vào nút câu hỏi đọc của chúng tôi và xây dựng chuỗi SSML của chúng tôi bên trong.

Chúng tôi bắt đầu bằng cách gói toàn bộ chuỗi trong một phần tử nói.

Speak rất quan trọng vì nó chỉ ra cho các bộ xử lý tổng hợp rằng bất cứ thứ gì bên trong nên được coi là SSML.

Tiếp theo, chúng tôi bao gồm câu hỏi của chúng tôi: Bạn nói "nước" trong tiếng Tây Ban Nha như thế nào?

Chúng ta có thể sử dụng chức năng trợ giúp wrapWithSSML của mình để nhấn mạnh vào cụm từ đang được dịch và đảm bảo nó được đọc ở Hoa Kỳ. Giọng nói địa phương tiếng Anh.

Chúng tôi cũng sẽ sử dụng wrapWithSSML cho cả bốn câu trả lời tiềm năng của mình, cung cấp sự nhấn mạnh và yêu cầu chúng được đọc bằng giọng địa phương tiếng Tây Ban Nha.

Cuối cùng, chúng ta có thể tạo một đối tượng SpeechSynthesisUtterance mới bằng chuỗi SSML của mình và chuyển nó đến cửa sổ phương thức nói SpeechSynthesis để đọc nó.

Với tất cả những điều đó tại chỗ, hãy xem trải nghiệm như thế nào trên ứng dụng web của chúng tôi.

Trên trang có câu hỏi cuối cùng, tôi sẽ nhấn vào nút "Đọc câu hỏi" và lắng nghe.

Siri: Bạn nói "nước" trong tiếng Tây Ban Nha như thế nào?

El agua.

La abuela.

La abeja.

El árbol.

Tyler: Nhờ SSML, chúng tôi đã tạo ra một trải nghiệm hấp dẫn hơn nhiều cho sinh viên của mình.

Một mẫu thiết kế phổ biến khác trên web là phương thức.

Bạn có thể sử dụng điều này trên các ứng dụng web của mình dưới dạng biểu mẫu đăng nhập hoặc đăng ký, cho các hộp thoại xác nhận và hơn thế nữa.

Một cách để cung cấp trải nghiệm phương thức dễ tiếp cận là thuộc tính aria-modal.

Với aria-modal="true", Safari sẽ xem xét tất cả các yếu tố có thể truy cập bên ngoài phương thức sẽ bị bỏ qua.

Gần đây, Safari cũng đã thêm hỗ trợ cho phần tử hộp thoại.

Dialog giúp cung cấp trải nghiệm phương thức thân thiện với khả năng truy cập dễ dàng hơn nhiều với các tương tác lấy nét tiêu chuẩn, xử lý các cử chỉ đóng phương thức, như phím Escape và cử chỉ chà trên iOS, v.v.

Để xem điều này đang hoạt động, hãy thay đổi nút "Hiển thị điểm số" trên ứng dụng web đánh giá bài kiểm tra của chúng tôi để mở một hộp thoại với kết quả của chúng tôi.

Điều đầu tiên trước tiên, chúng ta sẽ cần tạo ra phần tử hộp thoại của mình.

Đánh dấu có thể trông giống như thế này.

Chúng tôi cung cấp cho hộp thoại một ID để nó có thể được tham chiếu sau bằng nút hiển thị điểm số của chúng tôi.

Chúng tôi cũng bọc nội dung của hộp thoại trong một biểu mẫu bằng hộp thoại phương thức.

Bằng cách đó, bất kỳ điều khiển loại gửi nào, như nút của chúng tôi, sẽ khiến hộp thoại đóng lại.

Chúng tôi cũng sẽ cần một chút JavaScript để mở phương thức.

Hãy thêm trình nghe sự kiện nhấp chuột vào nút Hiển thị Điểm của chúng tôi để gọi showModal() trên phần tử hộp thoại của chúng tôi.

Và bây giờ chúng tôi đã sẵn sàng để thử cái này.

Với VoiceOver đang hoạt động, tôi sẽ nhấn vào nút "Hiển thị điểm số" để tập trung vào nó.

Siri: Hiển thị điểm số. Nút bấm.

Tyler: Sau đó, tôi sẽ nhấn đúp bằng một ngón tay ở bất kỳ đâu trên màn hình để nhấn nút.

Siri: Hiển thị điểm số. Hộp thoại web. Đóng nút.

Tyler: Và bây giờ chúng ta có phương thức của mình.

Tôi có thể vuốt sang trái để di chuyển qua nội dung của phương thức để nghe điểm số của mình.

Siri: Bạn đã trả lời đúng tất cả sáu câu hỏi. Làm tốt lắm!

Tyler: Và khi tôi hoàn thành, tôi có thể quay lại nút đóng bằng cách vuốt sang phải...

Siri: Đóng nút.

Tyler: Và nhấn đúp để đóng phương thức.

Siri: Bỏ chọn.

Tyler: Như tôi đã đề cập trước đây, phần tử hộp thoại xử lý cử chỉ chà iOS để đóng phương thức ra khỏi hộp.

Để chứng minh, tôi sẽ mở lại phương thức bằng cách nhấn đúp...

Siri: Hiển thị điểm số, nút.

Hộp thoại web. Đóng lại, nút.

Tyler: Và sau đó thực hiện cử chỉ chà bằng cách nhanh chóng di chuyển hai ngón tay sang phải, trái và phải trên màn hình.

Siri: Hiển thị điểm số. Nút bấm.

Tyler: Được rồi, vậy chúng ta có một phương thức chức năng, nhưng chúng ta vẫn có thể làm tốt hơn.

Bạn có nhận thấy rằng khi chúng tôi mở phương thức, VoiceOver chỉ đọc "hộp thoại web, đóng, nút" không?

Trong tình huống này, có lẽ sẽ hợp lý khi sử dụng nhãn aria hoặc thuộc tính aria-labelledby để cung cấp thêm thông tin cho người dùng công nghệ hỗ trợ.

Vì nội dung phương thức của chúng tôi ngắn, chỉ cần thông báo cho người dùng về số lượng câu trả lời họ đã đúng, hãy sử dụng nó cho nhãn của chúng tôi.

Đầu tiên, chúng ta sẽ bọc nội dung phương thức trong một khoảng thời gian với một ID.

Sau đó, chúng ta có thể thêm thuộc tính aria-labelledby vào hộp thoại trỏ đến ID nội dung phương thức.

Chúng ta cũng hãy đặt rõ ràng phần tử lấy nét phương thức ban đầu là nút đóng với thuộc tính lấy nét tự động.

Mặc dù đây đã là hành vi mặc định cho phương thức đơn giản này, nhưng điều đó có thể không xảy ra nếu phương thức của chúng tôi có nhiều nội dung hơn hoặc phức tạp hơn, với nhiều điều khiển.

Ví dụ, trong một phương thức có nhiều nội dung, có thể có ý nghĩa hơn khi đặt lấy nét tự động trên tiêu đề cấp cao nhất.

Là tác giả phương thức, bạn sẽ biết rõ nhất điều gì sẽ mang lại trải nghiệm tuyệt vời cho người dùng của mình.

Với các thuộc tính mới của chúng tôi, hãy xem lại trải nghiệm như thế nào trong VoiceOver.

Đầu tiên tôi sẽ nhấn vào nút Hiển thị điểm một lần để tập trung nó...

Siri: Hiển thị điểm số, nút.

Tyler: Và sau đó nhấn đúp để nhấn nó.

Siri: Bạn đã trả lời đúng tất cả sáu câu hỏi. Làm tốt lắm! Hộp thoại web, nút đóng.

Tyler: Đó là một trải nghiệm tốt hơn nhiều.

Người dùng VoiceOver ngay lập tức nghe thấy điểm số của họ nhờ aria-labelledby và đã tập trung vào nút đóng, và do đó có thể nhấn đúp để rời khỏi phương thức.

Và với điều đó, đã đến lúc kết thúc phiên hôm nay.

Tôi hy vọng bạn đã học được một số kỹ thuật để xây dựng các ứng dụng web phong phú, dễ tiếp cận, đảm bảo bạn cung cấp trải nghiệm tuyệt vời cho tất cả người dùng của mình.

Vui lòng thử các tính năng này trong Safari mới nhất và gửi bất kỳ lỗi nào bạn tìm thấy vào trình theo dõi lỗi WebKit tại bugs.webkit.org.

Cảm ơn vì đã tham gia cùng tôi trong chuyến tham quan cơn lốc hôm nay về khả năng truy cập web hiện đại.

Chúc một WWDC tuyệt vời!

.