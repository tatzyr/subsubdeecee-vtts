10089

Conrad: Tôi là Conrad Carlen, và hôm nay, tôi sẽ nói về những gì mới trong PDFKit.

Đây là chương trình nghị sự của chúng tôi.

Đầu tiên là đánh giá nhanh về PDFKit, và sau đó, xem có gì mới, bao gồm văn bản và biểu mẫu Trực tiếp, một cách mới để tạo các trang PDF từ hình ảnh và cuối cùng là các chế độ xem lớp phủ.

Hãy bắt đầu với một bản bồi dưỡng nhanh về cách thức hoạt động của PDFKit.

PDFKit là một khung đầy đủ tính năng giúp ứng dụng của bạn xem, chỉnh sửa và ghi các tệp PDF.

Nó có sẵn trên iOS, macOS và Mac Catalyst, và nó cũng có thể được sử dụng trong SwiftUI thông qua UIViewRepresentable, một trình bao bọc cho phép bạn tích hợp chế độ xem giao diện người dùng vào ứng dụng của mình.

PDFKit bao gồm 4 lớp cốt lõi bao gồm hầu hết các chức năng bạn sẽ cần trong ứng dụng của mình.

PDFView là tiện ích mà bạn đưa vào bố cục của mình bằng SwiftUI hoặc Trình tạo giao diện.

Nó hiển thị nội dung của tài liệu PDF và cho phép mọi người điều hướng, đặt mức thu phóng và sao chép văn bản vào Pasteboard.

PDFDocument đại diện cho một tệp PDF.

Nó không phổ biến đối với lớp con PDFDocument, nhưng bạn sẽ luôn sử dụng một cái.

Đó là gốc của biểu đồ đối tượng PDF, hoặc thân cây.

Bạn không thể có một cái cây mà không có một trong những thứ này.

Mỗi tài liệu chứa một hoặc nhiều đối tượng PDFPage.

Các trang hiển thị nội dung và lưu trữ các tài nguyên như phông chữ và hình ảnh duy nhất cho trang đó.

Ở phần lá của biểu đồ đối tượng của chúng tôi là PDFAnnotations.

Đây là những tùy chọn.

Trong khi nội dung của PDFPage không có ý định chỉnh sửa, các chú thích có tính tương tác về bản chất và thường có thể chỉnh sửa được.

Mỗi đối tượng này sẽ đóng một vai trò trong những gì tôi sẽ đề cập hôm nay.

Để tìm hiểu thêm về các nguyên tắc cơ bản của PDFKit, hãy xem bài thuyết trình tuyệt vời "Giới thiệu PDFKit" trong liên kết bên dưới.

Bây giờ, hãy nói về các tính năng mới được giới thiệu trong iOS 16 và macOS Ventura.

PDFKit hiện hỗ trợ Live Text.

Nó khác với trong Ảnh, nơi văn bản thường là một lượng nhỏ mà bạn có thể nhấn để sao chép.

Không giống như với ảnh, với PDF, nếu bạn thấy văn bản, nó thường là văn bản và mọi người mong đợi nó hoạt động như vậy mà không làm bất cứ điều gì đặc biệt.

Giờ đây, với Live Text, bạn có thể chọn và tìm kiếm văn bản trong một tài liệu PDF như thế này.

Nó chỉ là một bitmap được quét, không có văn bản nào cả.

Tất nhiên, các tệp PDF có thể có nhiều trang.

Bạn sẽ không muốn nghiền nát OCR trên tất cả các trang của tài liệu PDF khi bạn mở nó, vì vậy PDFKit thực hiện nó theo yêu cầu, vì bạn tương tác với từng trang, nếu bạn tương tác với nó.

OCR đã được thực hiện tại chỗ, vì vậy không cần phải tạo một bản sao của tài liệu.

Và, nếu bạn chọn lưu văn bản cho toàn bộ tài liệu, có một tùy chọn để làm như vậy khi lưu.

Ngoài văn bản trực tiếp, PDFKit đã cải thiện khả năng xử lý biểu mẫu.

Các tài liệu chứa các trường biểu mẫu sẽ tự động được nhận dạng, ngay cả khi chúng không chứa các trường văn bản tích hợp sẵn.

Bạn có thể tab thông qua các trường văn bản này và nhập văn bản, giống như bạn mong đợi.

Tiếp theo, hãy nói về một API mới để tạo các trang PDF từ hình ảnh.

Trong iOS 16 và macOS Ventura, có một API mới, linh hoạt cho phép ứng dụng của bạn tạo các trang PDF bằng cách sử dụng hình ảnh làm đầu vào.

Ứng dụng của bạn cung cấp hình ảnh bằng CGImageRef.

PDFKit lấy CGImageRef mà bạn cung cấp và nén nó bằng cách sử dụng mã hóa JPEG chất lượng cao.

Bởi vì CGImageRef là một kiểu dữ liệu gốc trong CoreGraphics, các chuyển đổi bổ sung là không cần thiết.

Có một số lựa chọn giúp bạn xử lý các trường hợp phổ biến nhất.

MediaBox chỉ định kích thước của trang.

Bạn có thể chọn để phù hợp với hình ảnh một cách chính xác, hoặc chọn một kích thước giấy, như Letter.

Xoay cho phép bạn chỉ định hướng dọc hoặc ngang.

Cao cấp nếu nhỏ hơn.

Theo mặc định, nếu hình ảnh lớn hơn MediaBox, hình ảnh sẽ được thu nhỏ để vừa vặn.

Nếu UpscaleIfSmaller được chỉ định, điều đó vẫn được áp dụng, nhưng, nếu hình ảnh nhỏ, nó sẽ được nâng cấp để lấp đầy trang.

Và bây giờ, để trả lời một câu hỏi mà nhiều người trong số các bạn đã hỏi-- "Làm thế nào tôi có thể vẽ trên các trang PDF bằng PencilKit?"-- câu trả lời là sử dụng chế độ xem lớp phủ.

Trước đây, cách duy nhất để thực hiện bản vẽ bổ sung trên các tệp PDF là phân lớp PDFPage và ghi đè phương pháp vẽ hoặc bằng cách sử dụng chú thích PDF tùy chỉnh.

Nhưng bắt đầu từ iOS 16 và macOS Ventura, giờ đây có thể phủ lên chế độ xem của riêng bạn lên đầu mỗi trang PDF.

Điều này cho phép ứng dụng của bạn tạo các chế độ xem trực tiếp, tương tác đầy đủ xuất hiện trên đầu các trang PDF.

Đây là 3 điều bạn cần biết về việc phủ các lượt xem.

Đầu tiên, bạn sẽ sử dụng một giao thức mới để cài đặt chế độ xem lớp phủ của mình trên trang PDF.

Khi đến lúc lưu, bạn sẽ cần kết hợp nội dung của mình vào PDF.

Và, nói về việc lưu, chúng tôi sẽ đề cập đến một số phương pháp hay nhất khi lưu tài liệu PDF.

Cài đặt chế độ xem lớp phủ trên các Trang PDF rất đơn giản.

Bởi vì các tệp PDF có thể chứa hàng trăm, nếu không muốn nói là hàng nghìn trang, không có cách nào bạn muốn tạo chế độ xem cho tất cả các trang đó khi mở tệp PDF.

Và điều gì sẽ xảy ra nếu người dùng cuộn qua lại nhanh chóng?

Làm thế nào để bạn biết khi nào nên tạo quan điểm của mình?

May mắn thay, PDFKit đã được thiết kế để chuẩn bị nội dung một cách thông minh trước khi mọi người cuộn các trang vào chế độ xem.

Vì vậy, nó biết rõ nhất khi nào nên yêu cầu chế độ xem lớp phủ.

Ứng dụng của bạn chỉ cần đáp ứng các yêu cầu được thực hiện thông qua giao thức mới.

PDFPageOverlayViewProvider là giao thức mới.

Nhân tiện, PDFKitPlatformView chỉ là một định nghĩa của UIView hoặc NSView, tùy thuộc vào nền tảng.

Phương pháp quan trọng nhất bạn cần thực hiện là overlayViewForPage.

Chỉ cần cung cấp một ví dụ về chế độ xem của bạn và PDFKit sẽ định cỡ nó bằng cách áp dụng các ràng buộc thích hợp.

Nó cũng sẽ xoay nó nếu trang có vòng quay khác 0.

2 phương pháp tiếp theo là tùy chọn.

willDisplayOverlayView có thể được sử dụng để cài đặt trình xử lý cử chỉ của riêng bạn hoặc để thiết lập các mối quan hệ thất bại với PDFKit.

willEndDisplayingOverlayView được gọi khi PDFKit hoàn tất với chế độ xem của bạn, có thể là do trang bị cuộn ra khỏi chế độ xem.

Bạn có thể phát hành chế độ xem của mình tại đây, nhưng có một cách sử dụng quan trọng khác cho phương pháp này.

Giả sử chế độ xem của bạn có một số dữ liệu để thể hiện những gì nó đang vẽ, bạn có thể sử dụng phương pháp này để lấy dữ liệu đó và đặt nó sang một bên.

Chúng tôi sẽ làm điều đó trong ví dụ của chúng tôi với PencilKit, nhưng, nếu dữ liệu chế độ xem của bạn tồn tại ở một nơi khác, bạn sẽ không cần phải triển khai điều này.

Trong ví dụ, đây là lớp chúng tôi đang sử dụng làm nhà cung cấp.

Nó triển khai giao thức PDFPageOverlayViewProvider.

Đây là iOS, vì vậy PDFKitPlatformView là một UIView.

Nó sử dụng bản đồ để chuyển từ PDFPage sang UIView.

Đây là các phương thức giao thức giữ chỗ.

Tiếp theo, hãy xem xét các triển khai.

overlayViewForPage kiểm tra bản đồ pageToView của nó để xem liệu nó đã thực hiện chế độ xem cho trang đã cho chưa.

Nếu không, nó sẽ tạo ra một cái nhìn mới.

Trong cả hai trường hợp, chúng tôi lấy bản vẽ từ trang và đặt nó trên chế độ xem canvas.

Trong những ví dụ này, tôi đang sử dụng một lớp con của PDFPage.

Tất cả những gì nó làm là thêm một thuộc tính "vẽ".

Và bây giờ, hãy tập trung vào phương pháp tiếp theo: WillEndDisplayingOverlay.

willEndDisplayingOverlayView rất đơn giản.

Nó lấy bản vẽ từ chế độ xem và lưu trữ nó trên lớp trang tùy chỉnh của chúng tôi.

Bây giờ chúng ta đã làm điều đó, hãy xem nó hoạt động.

Thông thường, vào khoảng thời gian nghỉ này trong năm, tôi sẽ ở Maine, câu cá, nhưng thay vào đó, tôi đang ở đây tại WWDC, vì vậy một người khác sẽ thay thế vị trí của tôi trong chuyến đi và tôi sẽ chỉ cho anh ấy một số địa điểm yêu thích của tôi.

Tôi sẽ làm điều đó với ứng dụng này, sử dụng PencilKit trong chế độ xem lớp phủ.

Ứng dụng này bao gồm mã mà chúng tôi vừa thấy và một số mã khác.

Toàn bộ mã để có được chế độ xem lớp phủ trên màn hình là khoảng 30 dòng!

Vì vậy, Grand Lake Stream. Đây là hồ bơi đập.

Luôn có rất nhiều cá trong đó. Đó là nơi có hầu hết các hành động.

Bạn có thể đến hồ bơi đập bằng cách đi theo con đường mòn này xuyên qua rừng và sau đó câu cá.

Bạn có thể câu tất cả những thứ đó, hoặc bạn có thể đi theo con đường này, đi qua con đập và đi xuống đây.

Từ đó, bạn có thể câu cá lên đây, đi vòng quanh hòn đảo, xuống đây, nhưng bất cứ điều gì bạn làm, đừng đi qua đây.

Nước trở nên sâu và nhanh.

Tránh điều đó và xuống đây, đến trại giống.

Đi bộ xuống bên cạnh trại giống và vào hồ bơi này ở đây.

Bạn có thể đi khắp nơi ở đây Đây là một địa điểm tuyệt vời. Tôi luôn bắt cá ở đây.

Được rồi, bây giờ chúng ta đã có một số dấu hiệu trên trang, hãy tập phóng to và cuộn.

Xem nó phản hồi nhanh như thế nào không?

Và chúng ta đã có nó.

Chế độ xem lớp phủ trong PDFKit.

Vậy, bây giờ bạn đã có những bản phác thảo này, làm thế nào để bạn lưu chúng?

Chúng tôi sẽ sử dụng lớp PDFAnnotation để làm điều này.

Có 2 điều chúng tôi muốn đạt được khi lưu: Chúng tôi muốn kết hợp giao diện trên màn hình với độ trung thực cao và chúng tôi muốn chỉnh sửa khứ hồi.

Chú thích PDF có một số tính năng sẽ tạo điều kiện thuận lợi cho việc này.

Chú thích PDF có thể có "dòng xuất hiện", đó là một luồng lệnh vẽ PDF.

Gần như bất cứ thứ gì bạn có thể vẽ bằng Quartz2D đều có thể được ghi lại trong một luồng xuất hiện.

Bất cứ thứ gì khác đều có thể được hiển thị thành hình ảnh và có thể được ghi lại.

Đó là cách chúng tôi làm nếu chúng tôi đang sử dụng Metal.

Và, vì nó được ghi lại dưới dạng bản vẽ PDF, nó sẽ trông giống hệt nhau trong Adobe Reader, Chrome, v.v.

Chú thích PDF được lưu trữ dưới dạng từ điển trong tài liệu PDF.

Điều đó có nghĩa là chúng tôi cũng có thể lưu trữ dữ liệu tùy chỉnh trong các cặp khóa/giá trị riêng tư.

Vậy hãy xem mã trông như thế nào.

Bắt đầu bằng cách tạo một lớp con của PDFAnnotation.

Chúng tôi làm điều này để ghi đè phương thức draw().

PDFKit sẽ gọi phương thức này khi nó lưu luồng giao diện mà tôi đã đề cập trên trang chiếu cuối cùng.

Để lưu tài liệu của chúng tôi, chúng tôi ghi đè nội dung của UIDocument().

Đây là tổng quan về chức năng, cho ngữ cảnh sau này.

Chúng tôi lặp qua tất cả các trang của PDFDocument.

Chúng ta sẽ hoàn thiện vòng lặp tiếp theo.

Chúng tôi làm như sau cho mỗi trang: tạo chú thích của lớp tùy chỉnh của chúng tôi; mã hóa bản vẽ của chúng tôi thành dữ liệu; thêm dữ liệu vào chú thích của chúng tôi.

Lần tới, khi chúng tôi mở tài liệu này, chúng tôi có thể sử dụng value:forAnnotationKey để đọc lại dữ liệu bản vẽ được lưu trữ và đưa nó vào chế độ xem lớp phủ của chúng tôi.

Cuối cùng, thêm chú thích vào trang.

Quay lại nội dung của chúng tôi (ghi đè.

Bây giờ chúng tôi đã thêm chú thích vào các trang của mình, Chúng tôi sử dụng dataRepresentation() của PDFDocument và trả về kết quả.

Khi nội dung của bạn được lưu dưới dạng chú thích, người nhận tài liệu có thể di chuyển nó, thay đổi kích thước hoặc xóa nó.

Thông thường, đó là những gì bạn muốn.

Nhưng đôi khi, bạn muốn chú thích của mình được "đốt cháy", như một phần của trang.

Có một PDFDocumentWriteOption mới trong iOS 16 và macOS Ventura giúp việc này trở nên dễ dàng.

Chỉ cần thêm burnInAnnotationsOption = đúng với các tùy chọn lưu, và điều đó sẽ xảy ra.

Nói về các tùy chọn viết PDF, có một số ít đã được cung cấp trong iOS 16 và macOS Ventura.

Hãy nhìn vào chúng.

CoreGraphics luôn cố gắng lưu hình ảnh ở định dạng PDF với độ trung thực tối đa, vì vậy hình ảnh được lưu ở độ phân giải đầy đủ, với khả năng nén không mất dữ liệu.

Thật tuyệt vời nếu tệp PDF sẽ được in trên một máy in khổ lớn.

Tuy nhiên, nhiều khả năng nó sẽ được hiển thị trên màn hình và tất cả dữ liệu hình ảnh có độ trung thực cao đó sẽ dẫn đến một tệp rất lớn.

Để giải quyết vấn đề đó, tôi giới thiệu hai lựa chọn tiếp theo.

saveAllImagesAsJPEG làm đúng những gì nó nói.

Bất kể hình ảnh được tạo ra như thế nào, nó sẽ được lưu bằng mã hóa JPEG trong PDF.

optimizeImagesForScreen sẽ giảm hình ảnh mẫu xuống mức tối đa độ phân giải màn hình HiDPI.

Hai lựa chọn này có thể được sử dụng cùng nhau.

createLinearizedPDF sẽ tạo ra một loại PDF đặc biệt được tối ưu hóa cho internet.

Định dạng PDF, như được thiết kế ban đầu ngay trước khi Internet xuất hiện, được đọc từ cuối tệp.

Điều đó có nghĩa là toàn bộ nó cần được tải xuống trước khi bất cứ thứ gì được hiển thị.

Tệp PDF tuyến tính hóa có mọi thứ cần thiết để hiển thị trang đầu tiên ở đầu tệp, vì vậy trình duyệt web có thể hiển thị điều đó một cách nhanh chóng trong khi phần còn lại của tệp được tải.

Bạn có thể chuyển các tùy chọn này sang các phương thức dataRepresentation hoặc writeToURL của PDFDocument.

Và chúng ta đã có nó. PDFKit mạnh mẽ, nhưng dễ sử dụng, được sử dụng bởi nhiều ứng dụng của bạn ngày nay trên iOS và macOS, và bây giờ với các tính năng mới cho iOS 16 và macOS Ventura.

Tôi rất vui khi thấy bạn làm gì với chúng!

Để tìm hiểu thêm, hãy xem các phiên bên dưới để biết thêm thông tin.

Cảm ơn bạn đã xem!

.