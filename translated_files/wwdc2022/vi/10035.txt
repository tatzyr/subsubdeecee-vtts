10035

Eric: Xin chào! Chào mừng đến với WWDC!

Tên tôi là Eric.

Tôi là một kỹ sư từ nhóm Bản đồ.

Hôm nay, tôi có sự tham gia của đồng nghiệp Yingxiu, và cùng nhau, chúng ta sẽ khám phá những gì mới trong MapKit.

Đã 3 năm kể từ khi Apple Maps giới thiệu bản đồ hoàn toàn mới và trải nghiệm Nhìn xung quanh nhập vai.

Ban đầu được ra mắt với sự hỗ trợ của Hoa Kỳ, bản đồ hoàn toàn mới và phạm vi phủ sóng Nhìn xung quanh đã được mở rộng kể từ và bây giờ bao gồm Canada, nhiều quốc gia châu Âu, Nhật Bản, v.v.

Năm ngoái, Apple Maps đã đưa mọi thứ lên một tầm cao mới bằng cách giới thiệu Trải nghiệm Thành phố 3D, bao gồm các làn đường rẽ, lối băng qua đường, làn đường dành cho xe đạp và các địa danh 3D được làm thủ công đẹp mắt như Tòa nhà Phà.

Chi tiết bổ sung của bản đồ cho phép bạn cung cấp bối cảnh và độ chính xác chưa từng có trước đây, và việc bổ sung độ cao địa hình 3D cung cấp một mức độ hiện thực không giống bất kỳ bản đồ nào khác!

Năm nay, MapKit mang đến những cải tiến mới nhất từ Apple Maps cho các ứng dụng của bạn, cho phép người dùng của bạn khám phá thế giới với những chi tiết tuyệt vời.

Trong buổi nói chuyện này, chúng tôi sẽ đề cập đến một số tính năng mới của MapKit.

Đầu tiên, chúng ta sẽ nói về việc áp dụng bản đồ hoàn toàn mới và tận dụng nó bằng cách sử dụng API Cấu hình Bản đồ.

Tiếp theo, chúng tôi sẽ đề cập đến các cải tiến khác nhau mà chúng tôi đã thực hiện đối với API lớp phủ của mình để cho phép tích hợp liền mạch nội dung của bạn với bản đồ.

Chúng tôi cũng sẽ thảo luận về hỗ trợ chế độ hòa trộn mới của chúng tôi và chỉ ra cách bạn có thể sử dụng nó để nâng cao hơn nữa việc trình bày nội dung bản đồ của mình.

Sau đó, chúng tôi sẽ đề cập đến các cách làm cho bản đồ của bạn tương tác nhiều hơn bằng cách áp dụng API Tính năng Bản đồ Có thể Lựa chọn hoàn toàn mới của chúng tôi.

Và cuối cùng, chúng tôi sẽ đề cập đến việc tích hợp trải nghiệm Nhìn xung quanh nhập vai trực tiếp vào các ứng dụng của bạn.

Chúng tôi có rất nhiều thứ để đề cập, vì vậy hãy thắt dây an toàn khi chúng tôi hướng đến chủ đề đầu tiên của mình: áp dụng bản đồ hoàn toàn mới và sử dụng API Cấu hình Bản đồ.

Việc áp dụng bản đồ hoàn toàn mới trong ứng dụng iOS, macOS hoặc tvOS của bạn không thể dễ dàng hơn.

Chỉ cần biên dịch lại ứng dụng của bạn với SDK mới và nó sẽ tự động được chọn tham gia vào bản đồ Apple hoàn toàn mới, bao gồm Trải nghiệm Thành phố 3D, nếu có.

Đối với nhiều ứng dụng, một bản biên dịch lại đơn giản là tất cả những gì cần thiết.

Tất nhiên, có thể có những tình huống mà bạn cần kiểm soát nhiều hơn việc trình bày bản đồ.

Trong iOS 15, cách bạn định cấu hình bản đồ là thông qua các thuộc tính khác nhau trên MKMapView.

Tuy nhiên, trong iOS 16, chúng tôi đang phản đối phần mềm các thuộc tính đó và chúng tôi đang giới thiệu API Cấu hình Bản đồ mới của mình để thay thế.

MKMapConfiguration là lớp trung tâm của API Cấu hình Bản đồ mới.

MKMapConfiguration là một lớp cơ sở trừu tượng với ba lớp con cụ thể.

Cấu hình bản đồ hình ảnh được sử dụng để trình bày hình ảnh kiểu vệ tinh.

Cấu hình bản đồ lai được sử dụng để trình bày bản đồ dựa trên hình ảnh với các tính năng bản đồ được thêm vào như nhãn đường và các điểm quan tâm.

Cấu hình bản đồ tiêu chuẩn được sử dụng để trình bày một bản đồ hoàn toàn dựa trên đồ họa.

Ba cấu hình bản đồ này nghe có vẻ quen thuộc với bạn, vì chúng tương tự như các loại bản đồ hiện có của chúng tôi.

Lớp cấu hình bản đồ cơ sở hỗ trợ thuộc tính elevationStyle, có thể bằng phẳng hoặc thực tế.

Kiểu độ cao bằng phẳng có nghĩa là mặt đất có vẻ bằng phẳng.

Các con đường, bao gồm cầu và cầu vượt, cũng có vẻ bằng phẳng.

Phẳng là kiểu độ cao mặc định.

Phong cách độ cao thực tế có nghĩa là địa hình mặt đất tái tạo độ cao trong thế giới thực như đồi và núi.

Các con đường được mô tả với các chi tiết độ cao thực tế.

Bây giờ chúng ta hãy xem xét kỹ hơn các lớp con cấu hình bản đồ.

Cấu hình bản đồ hình ảnh chỉ hiển thị hình ảnh vệ tinh không có tính năng bản đồ bổ sung, vì vậy nó không có bất kỳ thuộc tính nào khác.

Cấu hình bản đồ lai có các thuộc tính bổ sung để kiểm soát việc lọc các danh mục điểm quan tâm và có hiển thị lưu lượng truy cập hay không.

Cấu hình bản đồ tiêu chuẩn hỗ trợ thuộc tính emphasisStyle có thể là mặc định hoặc tắt tiếng.

Đúng như tên gọi, đây là kiểu nhấn mạnh mặc định trừ khi có quy định khác.

Phong cách nhấn mạnh bị tắt tiếng làm dịu đi sự tương phản của các chi tiết bản đồ, cho phép bạn chú ý nhiều hơn đến thông tin đồ họa bổ sung mà bạn có thể muốn hiển thị ở trên cùng.

Cấu hình bản đồ tiêu chuẩn cũng có các thuộc tính bổ sung để kiểm soát việc lọc các danh mục điểm quan tâm và có hiển thị lưu lượng truy cập hay không.

Và điều đó tổng hợp các lớp cấu hình bản đồ có sẵn và các thuộc tính của chúng.

API mới này đảm bảo bạn chỉ có thể định cấu hình các kết hợp các tùy chọn được hỗ trợ.

Nó cũng cho phép bạn thay đổi cấu hình bản đồ một cách nguyên tử.

Chúng tôi nghĩ rằng đây là một cải tiến tuyệt vời so với các API hiện có của chúng tôi.

Để tóm tắt lại những gì chúng ta vừa thảo luận, đây là một bảng hiển thị sự tương ứng giữa các lớp cấu hình bản đồ mới và thuộc tính MKMapType.

Bản đồ hoàn toàn mới với Trải nghiệm Thành phố 3D yêu cầu phần cứng tương thích.

Trên iOS, hỗ trợ bản đồ mới yêu cầu iPhone và iPad dựa trên A12 trở lên.

Trên macOS, hỗ trợ bản đồ mới yêu cầu bất kỳ máy tính dựa trên M1 nào trở lên.

Ở những khu vực không có Trải nghiệm Thành phố 3D, bản đồ sẽ tự động quay trở lại để trình bày bản đồ hoàn toàn mới với độ cao bằng phẳng.

Trên tất cả các thiết bị khác, bản đồ hoàn toàn mới sẽ được trình bày với độ cao bằng phẳng.

Trên máy Mac M1, Xcode cho phép bạn mô phỏng cả hai trải nghiệm đơn giản bằng cách thay đổi phiên bản hệ điều hành.

Chúng tôi khuyến khích bạn dùng thử cả hai, để đảm bảo rằng ứng dụng của bạn trông tuyệt vời trên tất cả các thiết bị!

Trải nghiệm Thành phố 3D có sẵn ở nhiều khu vực đô thị trên khắp thế giới.

Chúng tôi liên tục thêm các thành phố mới vào danh sách này, vì vậy tôi khuyến khích bạn kiểm tra phần Trải nghiệm Thành phố 3D trên trang web tính khả dụng của tính năng được liên kết trong ghi chú phiên.

Điều này kết thúc phần của chúng tôi về việc áp dụng bản đồ hoàn toàn mới và sử dụng API Cấu hình Bản đồ.

Bây giờ chúng ta hãy đi sâu vào lớp phủ.

MapKit đã hỗ trợ các lớp phủ với một số tùy chọn kiểu dáng trong nhiều năm.

Trong iOS 16, chúng tôi đang cải thiện các API hiện có của mình để cho phép các lớp phủ của bạn tích hợp liền mạch với bản đồ.

Hãy bắt đầu với một bản tóm tắt nhanh về các cấp độ lớp phủ.

Lớp phủ có thể được hiển thị ở hai cấp độ khác nhau: trên đường và trên nhãn.

Bạn có thể chỉ định mức kết xuất tại thời điểm chèn bằng cách sử dụng một trong nhiều chức năng chèn lớp phủ của MapKit.

Các nhãn trên hiển thị lớp phủ của bạn lên trên mọi thứ, bao gồm cả các nhãn.

Vì các nhãn cung cấp thông tin ngữ cảnh quan trọng, chúng tôi khuyến khích bạn chỉ sử dụng các nhãn trên trong những trường hợp hiếm hoi mà bạn không muốn dữ liệu của mình tương tác với bản đồ.

Nếu những gì bạn đang cố gắng đạt được là để nội dung của bạn nổi bật so với bản đồ, bạn có thể muốn xem xét sử dụng nhấn mạnh bản đồ bị tắt tiếng hoặc các chế độ hòa trộn, mà chúng ta sẽ nói về sau.

Trên các con đường có nghĩa là lớp phủ sẽ được hiển thị trên địa hình, bao gồm đường xá, lớp phủ đất hoặc các vùng nước.

Tuy nhiên, nó sẽ được hiển thị bên dưới nhãn và, ở một mức độ nào đó, cây cối và các tòa nhà.

Nhiều hơn về điều đó trong một giây.

Trên đường sẽ là chế độ mặc định mới trong iOS 16.

Tiếp theo, hãy nói về một tính năng mới mà chúng tôi đang giới thiệu trong iOS 16 được gọi là các tòa nhà trong suốt.

Bất kể mức lớp phủ của bạn ở trên đường hay trên nhãn, lớp phủ của bạn sẽ luôn được hiển thị trên các tòa nhà khi được xem từ trên xuống mà không có độ cao.

Tuy nhiên, chúng tôi đã thực hiện một số cải tiến đối với trải nghiệm khi sử dụng các con đường trên kết hợp với bản đồ có độ dốc.

Các vật thể trên mặt đất như cây cối và các tòa nhà hiện được tự động hiển thị với độ trong suốt khi xuất hiện trên các lớp phủ, để không che khuất hoàn toàn chúng.

Giá trị alpha thay đổi theo góc cao độ của bản đồ.

Nếu chúng ta quay lại hiển thị bản đồ từ trên xuống với góc cao độ 0º, các vật thể mặt đất va chạm sẽ biến mất khỏi tầm nhìn một cách hiệu quả, khiến lớp phủ của bạn có thể nhìn thấy đầy đủ.

Các tòa nhà trong suốt cũng hoạt động cho các lớp phủ bán trong suốt.

Giá trị alpha của lớp phủ sẽ được thêm vào để kết hợp với giá trị alpha của các tòa nhà trong suốt.

Có một thay đổi nữa mà chúng tôi đang thực hiện đối với lớp phủ.

Khi thêm lớp phủ vào bản đồ với địa hình thực tế, MapKit sẽ tự động chuyển bản đồ sang biểu diễn phẳng.

Bản đồ sẽ tự động quay trở lại thực tế khi bạn xóa lớp phủ cuối cùng.

Một ngoại lệ đáng chú ý đối với quy tắc này là các lớp phủ có nguồn gốc thông qua API hướng dẫn của MapKit.

Những lớp phủ đó tự động đi theo địa hình.

Và với điều đó, tôi sẽ giao nó cho Yingxiu.

Yingxiu: Cảm ơn bạn, Eric. Xin chào! Tôi là Yingxiu.

Tôi là một kỹ sư trong nhóm Bản đồ.

Tôi sẽ trình diễn các tính năng MapKit mới của chúng tôi và cho bạn thấy việc xây dựng trải nghiệm bản đồ đẹp dễ dàng như thế nào với các API được cập nhật của chúng tôi.

Tôi sẽ sử dụng ứng dụng mẫu của chúng tôi, giúp người dùng thuê xe tay ga để tham quan San Francisco.

Ứng dụng của chúng tôi cung cấp một số tính năng, như được hiển thị bởi các hàng trong chế độ xem bảng này.

"Khu vực hoạt động" cho phép người dùng xem nơi họ có thể đi xe tay ga của chúng tôi.

"Ride" đưa người dùng đi tham quan qua Cầu Cổng Vàng.

"Khám phá" cung cấp cho người dùng một bản đồ tương tác của trung tâm thành phố San Francisco, mà họ có thể sử dụng để khám phá các điểm tham quan gần bờ sông.

"Điểm nổi bật" cung cấp cái nhìn cận cảnh hơn về những địa điểm không thể bỏ qua.

Chúng tôi sẽ triển khai hoặc nâng cấp các tính năng này trong suốt phiên này.

Hãy bắt đầu nào!

Đầu tiên, tôi sẽ sử dụng tính năng Khu vực hoạt động để chứng minh việc áp dụng bản đồ hoàn toàn mới dễ dàng như thế nào và sau đó tôi sẽ chỉ cho bạn một số cải tiến mà chúng tôi đã thực hiện đối với lớp phủ.

Tôi đã mở dự án trong Xcode.

Hãy biên dịch nó với iOS 16 SDK và xem nó trông như thế nào.

Chúng ta đây rồi!

Chúng tôi đã chọn tham gia vào bản đồ hoàn toàn mới.

Chúng tôi có được chế độ xem bản đồ với các chi tiết phong phú, bao gồm các hiệu ứng ánh sáng và bóng đồi tuyệt đẹp này trên địa hình.

Khi chúng tôi phóng to, bạn sẽ thấy các tòa nhà, cây cối...

...Và các địa danh.

Bây giờ hãy thêm một lớp phủ đa giác để hình dung khu vực hoạt động của chúng ta.

Ở đây tôi đã có sẵn dữ liệu đa giác cho khu vực hoạt động.

Khi chế độ xem được tải, trước tiên chúng ta sẽ đặt vùng và ranh giới máy ảnh.

Hãy chắc chắn rằng chúng ta nhìn vào đúng khu vực.

Sau đó, chúng tôi chỉ cần thêm lớp phủ.

Hãy xây dựng nó và kiểm tra nó!

Lớp phủ đa giác mờ đục khi nhìn thẳng xuống.

Khi chúng tôi phóng to và quảng cáo chiêu hàng, các tòa nhà bắt đầu hiển thị, với độ trong suốt tăng lên khi chúng tôi quảng cáo chiêu hàng xa hơn.

Hiệu ứng này chỉ khả dụng khi sử dụng lớp phủ AboveRoads.

Nếu bạn muốn tận dụng các tòa nhà và cây cối trong suốt, hãy đảm bảo rằng bạn chọn đúng cấp độ lớp phủ.

Lớp phủ trông rất tuyệt, nhưng tôi muốn bản đồ hiển thị xuyên suốt ngay cả khi không được quảng cáo chiêu hàng.

Hãy quay lại mã và làm cho nó bán trong suốt.

Hãy thay đổi alpha thành 0.8.

Bây giờ chúng ta có một lớp phủ trong suốt và tôi có thể nhìn thấy các con đường và tòa nhà ngay cả khi không có sân.

Nếu tôi phóng to và quảng cáo bản đồ, tôi vẫn nhận được sự gia tăng độ trong suốt.

Cái này trông thật tuyệt!

Đó là nó cho lớp phủ đa giác.

Tiếp theo, tôi muốn chỉ cho bạn cách tích hợp địa hình thực tế và hiển thị thêm một tuyến đường trên cao.

Điều này sẽ hoàn thành tính năng "Đi" của chúng tôi, một chuyến tham quan qua Cầu Cổng Vàng.

Hãy bắt đầu bằng cách cấu hình chế độ xem bản đồ.

Chúng ta có thể thay đổi kiểu độ cao trong mã hoặc chúng ta chỉ có thể mở trình kiểm tra Trình tạo giao diện ở phía bên tay phải.

Đây là các cài đặt cấu hình chế độ xem bản đồ có sẵn.

Hãy chọn độ cao thực tế.

Tiếp theo, hãy làm việc trên tuyến đường.

Đối với tính năng này, chúng tôi muốn hiển thị một tuyến đường khi người dùng chuyển đổi công tắc Hiển thị Tuyến đường.

Chúng tôi cũng sẽ tạo hiệu ứng động cho máy ảnh để tập trung vào tuyến đường.

Vì chúng tôi muốn hiển thị một tuyến đường qua Cầu Cổng Vàng, chúng tôi sẽ sử dụng lối vào Công viên Presidio làm điểm bắt đầu và Battery Spencer làm điểm kết thúc.

Khi chế độ xem bản đồ được tải, chúng tôi sẽ tạo chú thích để đánh dấu điểm bắt đầu và điểm đến.

Đặt tọa độ và tiêu đề, thêm nó vào mảng chú thích, sau đó thêm chúng vào chế độ xem bản đồ.

Bây giờ, chúng ta có thể tập trung vào tuyến đường polyline.

Trong khi các lớp phủ thông thường sẽ làm phẳng bản đồ, polyline được trả về bởi API Hướng dẫn của MapKit sẽ bảo tồn địa hình thực tế.

Trong chức năng hành động này, một khi công tắc được bật, chúng tôi sẽ tạo các dấu vị trí với các tọa độ được xác định ở trên.

Sau đó, chúng tôi tạo một yêu cầu chỉ đường, với nguồn và đích.

Cuối cùng, chúng tôi yêu cầu chỉ đường.

Nếu thao tác tìm nạp thành công, chỉ cần thêm polyline tuyến đường làm lớp phủ.

Được rồi.

Hãy biên soạn nó và xem nó trông như thế nào!

Bạn sẽ nhận thấy các chú thích được tự động nâng cấp lên giao diện gradient mới.

Chúng cũng được hiển thị liền mạch ở độ cao chính xác.

Khi tôi chuyển đổi lộ trình hiển thị, máy ảnh sẽ cao độ.

Sau đó, bạn có thể có cái nhìn rõ hơn về chúng.

Như bạn có thể thấy, tuyến đường đi theo địa hình trên cao.

Điều này có ích khi điều hướng các giao lộ phức tạp.

Nó cũng đi theo con đường băng qua cầu.

Ngoài ra, hãy chú ý cách tuyến đường hiển thị một cách tinh tế qua các cột cầu.

Cuối cùng, khi bản đồ thực sự được dựng lên, bạn có thể thấy tuyến đường hiển thị qua những cái cây đứng trước nó.

Chà, nhìn kìa, màu sắc của tuyến đường đã bị cuốn trôi ở đây, nơi không có cây cối.

Hãy thu nhỏ và kiểm tra xem điều gì đang xảy ra ở đây.

Được rồi, phần này của tuyến đường đi qua một đường hầm, vì vậy chúng tôi có được sự minh bạch cho nó.

ElevationRealisticStyle và tính năng đường tuyến đường nâng cao được hỗ trợ trên các thiết bị iOS dựa trên A12.

Nếu tôi chạy cùng một ứng dụng trên một thiết bị iOS cũ hơn, tôi sẽ tự động nhận được tuyến đường 2D trên bản đồ 2D..

Thật đơn giản để thêm một tuyến đường trên cao vào bản đồ trải nghiệm thành phố 3D!

Với điều đó, tôi đưa nó lại cho Eric.

Eric: Cảm ơn, Yingxiu!

Chuyến đi xe tay ga đó qua Cầu Cổng Vàng trông hoàn toàn tuyệt đẹp!

Vì vậy, đó chỉ là một số điều mới mẻ với lớp phủ MapKit.

Tiếp theo, hãy nói về các chế độ hòa trộn.

API mới này cho phép bạn kiểm soát nhiều hơn giao diện của các lớp phủ của mình và mở ra một loạt các khả năng sáng tạo mới.

Tôi chắc rằng nhiều người trong số các bạn đã quen thuộc với các chế độ hòa trộn từ các ứng dụng chỉnh sửa ảnh hoặc API CoreGraphics của Apple.

Trong quá trình pha trộn, hai lớp đồ họa được kết hợp theo một tập hợp các phương trình được chỉ định bởi chế độ pha trộn.

Bây giờ, hãy xem xét một ví dụ về cách chúng ta có thể sử dụng các chế độ hòa trộn trong ngữ cảnh MapKit.

Trong kịch bản này, tôi muốn làm nổi bật khu vực của Công viên Quốc gia Presidio ở San Francisco ở trung tâm của bản đồ này.

Đầu tiên, tôi sẽ tạo một lớp phủ bao phủ toàn bộ khu vực bản đồ của mình, với một đường cắt có hình Presidio.

Tôi chưa sử dụng bất kỳ chế độ hòa trộn nào.

Đây chỉ là một lớp phủ đơn giản, có hình dạng của một chiếc bánh rán vuông lớn.

Tiếp theo, tôi chỉ định chế độ hòa trộn màu sắc cho lớp phủ, với màu xám.

Điều này làm mất bão hòa bản đồ bên ngoài Presidio.

Tiếp theo, tôi sẽ sao chép lớp phủ đó và gán cho nó một chế độ pha trộn ánh sáng cứng, với màu xám đen.

Điều này có tác dụng làm tối khu vực xung quanh Presidio.

Cái này trông rất đẹp, nhưng hãy thêm một lớp phủ khác.

Lần này, chúng tôi sẽ thêm một lớp phủ theo hình dạng của Presidio và chỉ định chế độ hòa trộn bão hòa, với màu vàng.

Ồ, đó không chính xác là hiệu ứng mà tôi đang hướng tới ở đây.

Màu sắc quá sáng.

Hãy thử một cái gì đó khác.

Chúng tôi sẽ áp dụng chế độ pha trộn ghi màu với màu xám.

Ở đó, điều đó tinh tế hơn một chút.

Hoàn hảo!

Bây giờ, hãy xem xét một số mã.

Để kích hoạt loại hiệu ứng mà chúng tôi vừa thấy, chúng tôi đã thêm một thuộc tính vào MKOverlayRenderer, được gọi là blendMode.

Tất cả những gì bạn cần làm là đặt chế độ hòa trộn CoreGraphics mong muốn trên trình kết xuất lớp phủ và bạn đã hoàn tất!

Như đã đề cập trước đó, các chế độ hòa trộn phụ thuộc vào thứ tự.

Lớp phủ ở dưới cùng của ngăn xếp được trộn với bản đồ, lớp phủ từ thứ hai đến cuối cùng sau đó được trộn với kết quả của thao tác trộn trước đó, v.v.

Trong MapKit, thứ tự của các lớp phủ được xác định tại thời điểm chèn.

Bạn có thể sử dụng định vị tuyệt đối hoặc tương đối bằng cách sử dụng một trong nhiều chức năng chèn lớp phủ của MKMapView.

MapKit hỗ trợ một loạt các chế độ hòa trộn và chúng tôi không thể bao gồm tất cả chúng ngày hôm nay.

Tôi khuyến khích bạn thử chúng.

Và đó là nó cho các chế độ pha trộn!

Như bạn vừa thấy, chế độ hòa trộn là một công cụ mạnh mẽ để kiểm soát kiểu dáng của bản đồ của bạn.

Bạn có thể sử dụng nó để làm nổi bật các khu vực địa lý, nhấn mạnh bản đồ để làm cho nội dung của bạn nổi bật và hơn thế nữa.

Tiếp theo, hãy nói về các tính năng bản đồ có thể lựa chọn!

Đây là một tính năng được yêu cầu cao và tôi thực sự vui mừng được giới thiệu nó cho bạn!

Nếu bạn đang sử dụng MapKit trong ứng dụng của mình ngày hôm nay, bạn có thể tận dụng các chú thích để hiển thị vị trí của các thành phố, điểm quan tâm hoặc các đối tượng vật lý.

Trừ khi bạn đang sử dụng bộ lọc POI, bạn đang đặt những chú thích đó trên bản đồ đã chứa một số chú thích tương tự do Apple cung cấp.

Cho đến bây giờ, người dùng của bạn chỉ có thể tương tác với các chú thích mà bạn đã cung cấp.

Trong iOS 16, chúng ta sẽ thay đổi điều đó.

Sử dụng API Tính năng Bản đồ Có thể Lựa chọn mới của chúng tôi, giờ đây bạn sẽ có tùy chọn cho phép người dùng của mình chọn các tính năng trên bản đồ.

Các tính năng bản đồ có thể lựa chọn bao gồm các điểm tham quan, chẳng hạn như cửa hàng, nhà hàng và địa danh; lãnh thổ, chẳng hạn như thành phố và tiểu bang; và các đặc điểm vật lý, chẳng hạn như dãy núi và hồ.

Để áp dụng các tính năng bản đồ có thể lựa chọn trong ứng dụng của bạn, tất cả những gì bạn cần làm là thực hiện một vài bước đơn giản.

Đầu tiên, cấu hình loại tính năng nào có thể lựa chọn được.

Như chúng ta vừa thấy, có ba loại tính năng chính và có thể không có ý nghĩa gì khi tất cả chúng đều tương tác trong ngữ cảnh ứng dụng của bạn.

Đối với các tính năng điểm quan tâm, bạn cũng có thể sử dụng API bộ lọc hiện có của chúng tôi để hạn chế hơn nữa danh mục điểm quan tâm nào có thể xuất hiện và do đó có thể lựa chọn được.

Thứ hai, triển khai các cuộc gọi lại đại diện MKMapView để xử lý các sự kiện lựa chọn.

Bạn có thể tự do xử lý những sự kiện này theo cách bạn chọn.

Bạn có thể muốn kiểm soát cách các tính năng được chọn xuất hiện hoặc bạn có thể muốn hiển thị một số giao diện người dùng bổ sung để phản hồi các sự kiện lựa chọn.

Thứ ba, bạn sẽ muốn yêu cầu và hiển thị thông tin địa điểm bổ sung trong giao diện người dùng ứng dụng của mình.

Thông tin được nhúng trong tính năng bản đồ bị giới hạn ở những gì bạn nhìn thấy trên màn hình.

Để cung cấp cho người dùng thêm ngữ cảnh về địa điểm họ đã chọn, bạn sẽ cần yêu cầu thêm thông tin.

Hãy để tôi hướng dẫn bạn các API mới cho từng bước này.

Chúng ta sẽ bắt đầu với việc định cấu hình các tính năng bản đồ nào có thể lựa chọn được bằng cách sử dụng thuộc tính selectableMapFeatures mới.

Bạn có thể chọn bất kỳ sự kết hợp nào của các điểm tham quan, lãnh thổ và các tính năng vật lý.

Khi bạn đã định cấu hình các tính năng bản đồ có thể lựa chọn và người dùng nhấn vào một trong các tính năng đó, bạn sẽ bắt đầu nhận được một số cuộc gọi lại đại diện mới cho phép bạn tùy chỉnh hành vi lựa chọn.

Cuộc gọi lại đầu tiên bạn sẽ nhận được là cuộc gọi lại chú thích didSelect mới.

Cuộc gọi lại này là một cơ hội tuyệt vời để bạn yêu cầu dữ liệu bổ sung về mục bản đồ bằng cách sử dụng API yêu cầu mới mà chúng tôi sẽ đề cập trong giây lát.

Cuộc gọi lại thứ hai bạn sẽ nhận được là chế độ xem hiện có để gọi lại chú thích.

Đây là nơi bạn có thể tùy chỉnh chế độ xem sẽ được hiển thị cho trạng thái đã chọn.

Mặc dù đây là API hiện có, chúng tôi đã thêm một loại lớp chú thích mới được gọi là MapFeatureAnnotation.

Lớp này sẽ được chuyển để xem chú thích khi người dùng chọn một tính năng bản đồ.

MapFeatureAnnotation có một số thuộc tính.

Bạn có thể kiểm tra thuộc tính FeatureType để xác định xem tính năng bản đồ là điểm quan tâm, lãnh thổ hay tính năng vật lý.

Nếu tính năng bản đồ là một điểm quan tâm, thuộc tính pointOfInterestCategory sẽ cho bạn biết danh mục của nó là gì và thuộc tính iconStyle sẽ cho phép bạn có thêm thông tin về biểu tượng, chẳng hạn như màu nền và chính hình ảnh biểu tượng.

Hãy xem xét một ví dụ về cách tùy chỉnh chế độ xem chú thích của bạn bằng cách sử dụng chế độ xem Để gọi lại chú thích.

Nếu bạn muốn đạt được phong cách lựa chọn giống như ứng dụng Bản đồ, tất cả những gì bạn phải làm là trả về số không.

Nếu bạn muốn tùy chỉnh kiểu lựa chọn, bạn có thể trả về Chế độ xem chú thích, giống như cách bạn làm cho các chú thích của riêng mình.

Điểm đánh dấu Chú thích Xem là một lựa chọn tuyệt vời.

Nó sẽ cung cấp cho bạn hình dạng kiểu bóng bay giống như ứng dụng Bản đồ, xử lý độ dốc và nó cho phép bạn chọn màu sắc hoặc biểu tượng của riêng mình.

Trong ví dụ của tôi ở đây, tôi đã chọn sử dụng cùng một hình ảnh thu được từ kiểu biểu tượng của tính năng và chỉ thay đổi màu sắc để phù hợp với màu sắc của ứng dụng.

Nếu bạn muốn hoàn toàn tùy chỉnh, bạn có thể cung cấp bất kỳ lớp con chế độ xem chú thích nào mà bạn tạo.

Như bạn vừa thấy, bạn có thể sử dụng chú thích tính năng để truy xuất thông tin trực quan về tính năng đã chọn.

Bằng cách chuyển chú thích tính năng vào MKMapItemRequest API mới của chúng tôi, bạn cũng có thể truy xuất một mục bản đồ cho tính năng đã chọn.

Mục bản đồ này chứa siêu dữ liệu bổ sung về địa điểm, chẳng hạn như địa chỉ, tên, số điện thoại và URL.

Mục bản đồ cũng cung cấp chức năng để đột nhập vào ứng dụng Bản đồ nếu người dùng của bạn muốn xem siêu dữ liệu bổ sung không có sẵn thông qua MapKit.

Và bây giờ, tôi sẽ lại giao nó cho Yingxiu.

Yingxiu: Cảm ơn bạn, Eric.

Eric vừa hướng dẫn bạn qua các Tính năng Bản đồ Có thể Lựa chọn.

Tôi sẽ cho bạn thấy việc tận dụng API đó dễ dàng như thế nào.

Vì điều đó, chúng tôi sẽ triển khai tính năng Khám phá của mình.

Chúng tôi muốn người dùng của mình có thể khám phá một số địa điểm thú vị gần bờ sông.

Nếu họ nhấn vào POI, chú thích sẽ hiển thị.

Chúng tôi sẽ thực hiện hoạt ảnh máy ảnh đến vị trí đã chạm và hiển thị thẻ thông tin từ dưới lên.

Đầu tiên, hãy lọc các điểm quan tâm trên bản đồ và xóa các danh mục không liên quan đến chuyến tham quan của chúng tôi.

Ngoài việc áp dụng bộ lọc trong mã, chúng tôi cũng có thể áp dụng nó trong trình kiểm tra Trình tạo giao diện.

Hãy chọn chế độ xem bản đồ và đi đến thanh tra ở phía bên tay phải.

Ở đây, chúng tôi sẽ thực hiện một bộ lọc loại trừ.

Tôi sẽ chọn các danh mục mà chúng tôi không muốn, ví dụ: sân bay, cho thuê xe hơi, bệnh viện và giặt ủi.

Bây giờ chúng ta chỉ nên có điểm quan tâm mong muốn trên chế độ xem bản đồ.

Nó rất đơn giản để kích hoạt các tính năng bản đồ có thể lựa chọn.

Tất cả những gì chúng ta cần làm là chỉ định một bộ tùy chọn gồm các tính năng có thể lựa chọn mong muốn.

Trong phạm vi của ứng dụng mẫu này, chúng tôi sẽ chỉ sử dụng các điểm quan tâm, nhưng hãy nhớ rằng, chúng tôi cũng hỗ trợ các tính năng và lãnh thổ vật lý có thể lựa chọn.

Chúng ta có thể sử dụng phương thức đại diện hiện có mapView viewForAnnotation để tạo chế độ xem cho chú thích tính năng.

Đây, chúng tôi sẽ trả lại số không ngay bây giờ...

Để sử dụng chú thích gradient mặc định được cung cấp bởi MapKit.

Chúng tôi sẽ quay lại để tùy chỉnh nó sau.

Nếu một chú thích ở trạng thái Đã chọn, chúng tôi sẽ được thông báo thông qua phương thức đại diện mới mapView didSelectAnnotation.

Hãy sử dụng chức năng này để thực hiện hoạt ảnh máy ảnh và phóng to tính năng đã chọn.

Đầu tiên, hãy chuyển chú thích thành featureAnnotation, sau đó tạo một yêu cầu mục bản đồ với nó.

Đây là một API mới để tìm nạp thông tin địa điểm bổ sung với chú thích tính năng.

Hãy đưa ra yêu cầu.

Khi thao tác tìm nạp thành công, chúng tôi sẽ tạo hiệu ứng động cho mục bản đồ.

Khi hoạt ảnh máy ảnh hoàn tất, chúng tôi sẽ nhận được thông tin chi tiết từ mục tính năng và hiển thị chúng trên thẻ thông tin.

Biên dịch nó và xem nó trông như thế nào.

Hãy cùng xem một số địa điểm thú vị ở bờ sông.

Các chú thích gradient hiển thị.

Máy ảnh hoạt hình đến vị trí tab.

Sau đó thẻ thông tin xuất hiện.

Đây là một bảo tàng.

Đây là URL.

Chúng ta có thể kiểm tra nó nếu chúng ta quan tâm.

Và chúng tôi nhận được địa chỉ đầy đủ.

Nếu đó là một cột mốc, chúng ta sẽ có được biểu tượng tuyệt đẹp này.

Bây giờ chúng ta hãy quay lại mã và tùy chỉnh chú thích của chúng ta cho trạng thái lựa chọn.

Thay vì nil, hãy tạo một MarkerAnnotationView.

Chúng tôi sẽ chuyển chú thích sang tính năng Chú thích trước, vì vậy chúng tôi có thể sử dụng dữ liệu cụ thể từ nó để tùy chỉnh chế độ xem.

Hãy tô màu chú thích bằng màu tím để nó phù hợp với bản sắc công ty của chúng ta.

Chúng tôi cũng có thể tùy chỉnh glyph chú thích.

SelectedGlyphImage dành cho các chú thích trên trạng thái đã chọn.

GlyphImage nhỏ hơn.

Nó là glyph cho các chú thích ở trạng thái Không được chọn.

Chúng tôi khuyên bạn nên gán cho họ cùng một glyph để chuyển đổi suôn sẻ từ trạng thái Không được chọn sang trạng thái Đã chọn.

Hãy sử dụng hình ảnh kiểu biểu tượng mà chúng tôi nhận được từ tính năng Chú thích.

MKIconStyle là một lớp mới trong iOS16.

Nó có biểu tượng và thông tin màu sắc của POI đã chọn.

Biên dịch và xem nó trông như thế nào trong ứng dụng.

Đây rồi!

Bây giờ chúng tôi có một chú thích phù hợp với màu sắc công ty của chúng tôi, nhưng vẫn sử dụng biểu tượng của Apple.

Đó là cách bạn có thể bật các tính năng bản đồ có thể lựa chọn và tùy chỉnh chú thích trong các ứng dụng của riêng bạn!

Với điều đó, tôi đưa nó lại cho Eric.

Eric: Cảm ơn, Yingxiu!

Như bạn vừa thấy, API Tính năng Bản đồ Có thể Lựa chọn cho phép người dùng của bạn tương tác với bản đồ theo một cách hoàn toàn mới.

Lớp MapFeatureAnnotation, kết hợp với các cuộc gọi lại đại diện MapView, cho phép bạn tùy chỉnh giao diện lựa chọn, trong khi MapItemRequest cho phép bạn giải quyết một tính năng cho một mục bản đồ, cho phép bạn truy cập vào thông tin bổ sung về tính năng bản đồ đã chọn.

Tiếp theo, hãy nói về xung quanh Nhìn xung quanh!

Ứng dụng Bản đồ đã giới thiệu Look Around trong iOS 13, và mọi người hoàn toàn yêu thích nó.

Bạn có thể sử dụng Nhìn xung quanh để có được cảm giác thực sự về một địa điểm.

Hình ảnh Look Around cung cấp một mức độ chi tiết đáng kinh ngạc, tận dụng các mô hình 3D để cung cấp một mức độ hiện thực như không có bản đồ nào khác.

Look Around có sẵn ở nhiều nơi trên thế giới, bao gồm các thành phố này và toàn bộ các quốc gia!

Chúng tôi liên tục bổ sung hỗ trợ cho các khu vực mới, vì vậy tôi một lần nữa khuyến khích bạn kiểm tra phần Nhìn xung quanh trên trang web tính khả dụng của tính năng được liên kết trong ghi chú phiên.

Với iOS 16, chúng tôi đang đưa Look Around lên MapKit và việc áp dụng nó chỉ yêu cầu ba bước đơn giản.

Đầu tiên, bạn sẽ cần kiểm tra xem dữ liệu có sẵn cho vị trí mong muốn hay không.

Ngay cả khi Look Around có sẵn trong khu vực mục tiêu của bạn, không phải mọi vị trí đều có thể được nhìn thấy từ một con phố, và do đó, hình ảnh Look Around có thể không phải lúc nào cũng có sẵn.

Khi bạn đã xác định liệu dữ liệu Look Around có khả dụng hay không, bạn sẽ cần chuyển dữ liệu đó cho Bộ điều khiển Look Around View hoặc Look Around Snapshotter.

Và cuối cùng, nếu dữ liệu Look Around có sẵn, bạn sẽ muốn cập nhật giao diện người dùng ứng dụng của mình để hiển thị bản xem trước Look Around.

Hãy cùng xem các API mới mà bạn sẽ sử dụng để hoàn thành ba nhiệm vụ đơn giản đó.

Bước đầu tiên trong nỗ lực hiển thị bản xem trước Nhìn xung quanh là kiểm tra tính khả dụng của dữ liệu.

Đối với điều này, bạn sẽ cần tạo một LookAroundSceneRequest, đây là một lớp học mới mà chúng tôi đang giới thiệu trong iOS 16.

Bạn có thể khởi tạo một phiên bản mới với tọa độ hoặc mục bản đồ.

Tiếp theo, bạn sẽ muốn lấy lại thuộc tính cảnh của nó.

Đây là một thuộc tính không đồng bộ tùy chọn.

Nếu dữ liệu có sẵn, bạn sẽ nhận lại một ví dụ cảnh.

Nếu dữ liệu không có sẵn, thay vào đó bạn sẽ nhận lại một số không.

Và nếu có vấn đề với yêu cầu, một lỗi sẽ được ném ra.

Cảnh nhìn xung quanh là một vật thể mờ đục không có thuộc tính.

Nó hoạt động như một mã thông báo đảm bảo tính khả dụng của hình ảnh Nhìn xung quanh cho một vị trí được yêu cầu.

Để hiển thị bản xem trước tương tác của cảnh Nhìn xung quanh, bạn chỉ cần chuyển cảnh sang phiên bản Bộ điều khiển xem xung quanh mới dưới dạng tham số init hoặc gán nó cho thuộc tính cảnh đọc ghi của phiên bản hiện có.

Ngoài ra, nếu tất cả những gì bạn cần là một hình ảnh tĩnh, bạn cũng có thể chuyển cảnh sang phiên bản Look Around View Snapshotter mới dưới dạng tham số init và sau đó truy xuất thuộc tính không đồng bộ ảnh chụp nhanh của nó.

Bộ điều khiển chế độ xem Nhìn xung quanh được thiết kế để giúp việc nhúng bản xem trước tĩnh nhỏ hơn của hình ảnh Nhìn xung quanh dễ dàng nhất có thể, người dùng có thể nhấn vào để vào phiên tương tác Nhìn xung quanh toàn màn hình.

Và bây giờ, chúng tôi sẽ giao nó cho Yingxiu một lần nữa để cô ấy có thể cho chúng tôi thấy việc kết hợp tất cả lại với nhau thực sự dễ dàng như thế nào.

Yingxiu: Cảm ơn bạn, Eric.

Eric vừa cho chúng tôi thấy sự hỗ trợ trải nghiệm Nhìn xung quanh nhập vai đến với MapKit.

Tôi sẽ cho bạn thấy việc tích hợp nó vào ứng dụng mẫu của chúng tôi đơn giản như thế nào.

Vì điều đó, chúng ta sẽ chuyển sang tính năng cuối cùng của mình, Điểm nổi bật.

Người dùng có thể có được cái nhìn thực tế về những địa điểm không thể bỏ qua.

Chúng tôi đã có một vài tên mốc San Francisco trong thanh điều khiển phân đoạn trên đầu màn hình.

Khi người dùng nhấn vào một trong số chúng, chúng tôi muốn thực hiện hoạt ảnh máy ảnh đến vị trí đã chạm.

Chúng tôi cũng muốn hiển thị bản xem trước Nhìn xung quanh ở phía dưới bên trái, người dùng của chúng tôi có thể mở rộng lên toàn màn hình.

Hãy làm điều đó!

Đầu tiên chúng ta cần thêm chế độ xem vùng chứa cho bản xem trước Nhìn xung quanh của chúng ta.

Hãy đến gặp thanh tra kích thước.

Hãy cho nó một vị trí và kích thước.

Chúng tôi muốn ẩn bản xem trước này ngay từ đầu, vì vậy hãy mở trình kiểm tra thuộc tính và kiểm tra Ẩn.

Tiếp theo, chúng ta cần tạo một bộ điều khiển chế độ xem Nhìn xung quanh...

Và nhúng nó vào chế độ xem thùng chứa.

Giống như bất kỳ segue nào khác, tôi cần cung cấp cho nó một mã định danh.

Hãy gọi nó là "presentLookAroundEmbedded."

Và nhập nó vào mã để chúng tôi có thể cập nhật khả năng hiển thị của nó sau.

Hãy đặt tên cho nó là "xem trước."

Ở đây, chúng tôi đã có một LookAroundViewController được khai báo.

Chúng ta chỉ cần lấy ví dụ trong chức năng chuẩn bị.

Đảm bảo rằng mã định danh segue được khớp.

Sau đó, trong chức năng kiểm soát phân đoạn, chúng tôi sẽ tạo một tìm kiếm cục bộ với tên mốc.

Nếu yêu cầu thành công, chúng tôi sẽ nhận được một mục bản đồ sẽ được sử dụng trong hoạt ảnh máy ảnh sau đây và truy xuất cảnh Nhìn xung quanh.

Đối với hoạt hình máy ảnh, trước tiên chúng ta cần tạo một máy ảnh với API mới.

MapCamera nhìn vào mục bản đồ.

Hãy sử dụng kích thước khung chế độ xem bản đồ cho kích thước chế độ xem và đặt cho phép cao độ thành đúng.

Điều này sẽ cho chúng ta tầm nhìn ra các địa danh và tầm nhìn từ trên xuống đến những nơi khác.

Chỉ định máy ảnh mới. Thế là xong.

Khi hoạt ảnh máy ảnh hoàn tất, chúng tôi sẽ hiển thị bản xem trước Nhìn xung quanh của nó.

Đầu tiên, chúng ta cần xác định xem dữ liệu Nhìn xung quanh có sẵn cho mục bản đồ này hay không.

Để làm điều đó, chúng ta cần sử dụng lớp LookAroundSceneRequest mới.

Hãy tạo yêu cầu của chúng tôi và chuyển vào mục bản đồ.

Sau đó thực hiện yêu cầu.

Nếu nhận được yêu cầu cảnh thành công, chỉ cần gán cảnh cho LookAroundViewController của chúng tôi.

Nếu không có lỗi nhưng chúng tôi nhận được không cho cảnh, điều đó có nghĩa là dữ liệu Nhìn xung quanh không có sẵn tại vị trí yêu cầu.

Cuối cùng, đừng quên hiển thị bản xem trước.

Hãy xem nó trông như thế nào trong ứng dụng!

Hãy thử với Tòa nhà Phà.

Đây rồi.

Tòa nhà Ferry là một cột mốc, vì vậy chúng ta thấy chiếc máy ảnh được sắp xếp tuyệt vời này đóng khung theo góc anh hùng và bản xem trước Nhìn xung quanh xuất hiện.

Hãy thử với một nơi khác, Dragon Gate.

Cổng Rồng không phải là một cột mốc, vì vậy chúng tôi có tầm nhìn từ trên xuống.

Hãy nhấn vào bản xem trước để vào toàn màn hình.

Đó là một chế độ xem tương tác, vì vậy tôi có thể điều hướng xung quanh.

Tôi cũng nhận được những biểu tượng và nhãn đẹp này cho các cửa hàng trong chế độ xem toàn màn hình Look Around.

Thật dễ dàng để thêm trải nghiệm Nhìn xung quanh nhập vai trong ứng dụng của riêng bạn.

Với điều đó, tôi đưa nó lại cho Eric.

Eric: Cảm ơn bạn, Yingxiu!

Hỗ trợ Trình tạo Giao diện cho Nhìn xung quanh làm cho nó trông thật dễ dàng!

Vì vậy, chúng tôi đã đề cập đến rất nhiều chủ đề ngày hôm nay, từ việc áp dụng tự động bản đồ hoàn toàn mới và API Cấu hình Bản đồ mới, các hành vi và tiến bộ mới cho lớp phủ, đến các khả năng hoàn toàn mới như Tính năng Bản đồ có thể lựa chọn và hỗ trợ Nhìn xung quanh.

Chúng tôi nghĩ rằng bạn sẽ đồng ý rằng có rất nhiều thứ ở đây bạn có thể sử dụng để đưa trải nghiệm bản đồ trong ứng dụng của mình lên một tầm cao mới và chúng tôi nóng lòng muốn xem bạn sẽ đạt được điều gì với nó.

Trước khi tôi đi, có một vài thứ tôi muốn để lại cho bạn.

Như mọi khi, phản hồi của bạn là công cụ giúp chúng tôi ưu tiên những gì chúng tôi tập trung vào tiếp theo, vì vậy hãy đảm bảo sử dụng Trợ lý phản hồi để gửi cho chúng tôi báo cáo lỗi của bạn và các tính năng bạn thấy hữu ích nhất cho ứng dụng của mình.

Ngoài ra, chúng tôi đã cập nhật nhiều mẫu hiện có của mình để kết hợp những gì chúng tôi vừa thảo luận.

Chúng tôi khuyến khích bạn kiểm tra chúng.

Và cuối cùng, chúng tôi đã công bố một bộ REST API mới mà bạn sẽ muốn xem qua.

Chúng tôi nghĩ rằng các API này sẽ thực sự hữu ích cho những người bạn muốn di chuyển các cuộc gọi phổ biến để mã hóa địa lý, xác định ETA và hơn thế nữa đến máy chủ của bạn.

Để biết tất cả các chi tiết, hãy chắc chắn kiểm tra phiên có tiêu đề Meet Apple Maps Server APIs.

Thay mặt cho nhóm Bản đồ, cảm ơn vì đã xem...

Cả hai: Và có một WWDC tuyệt vời!

.