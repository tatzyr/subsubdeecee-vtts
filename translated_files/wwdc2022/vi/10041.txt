10041

♪ Nhạc hip-hop nhạc cụ êm dịu ♪

♪

Lais Minchillo: Xin chào, tên tôi là Lais.

David Silver: Và Tôi Là David. Và chúng tôi sẽ giới thiệu các tính năng mới của năm nay trong Wallet và Apple Pay.

Chúng tôi đã ra mắt Apple Pay vào năm 2014, thiết lập một tiêu chuẩn mới để thực hiện thanh toán nhanh chóng, an toàn và riêng tư tại cửa hàng, trực tuyến và trong ứng dụng.

Kể từ đó, chúng tôi đã mở rộng Apple Pay trên toàn cầu.

Apple Pay hiện có sẵn ở 72 quốc gia và vùng lãnh thổ và xử lý hơn một triệu giao dịch mỗi ngày.

Hôm nay chúng tôi giới thiệu các tính năng và API mới thú vị vào Wallet và Apple Pay.

Lais sẽ cho bạn biết nhiều hơn.

Lais: Cảm ơn bạn, David!

Chúng ta hãy xem chương trình nghị sự chính cho ngày hôm nay.

Đầu tiên, chúng ta sẽ nói về một số cập nhật nhanh.

Chúng tôi đang thêm hỗ trợ thanh toán cho nhiều thương gia trong một giao dịch duy nhất.

Chúng tôi cũng đang cải thiện đáng kể hỗ trợ thanh toán tự động, bao gồm đăng ký, Với theo dõi đơn hàng, bạn có thể nâng cao trải nghiệm sau mua hàng cho khách hàng của mình.

Và cuối cùng, David sẽ nói về việc xác minh danh tính với ID trong Wallet.

Chúng tôi có một vài cập nhật thú vị để chia sẻ.

Tap to Pay trên iPhone đã được công bố vào đầu năm nay và ra mắt trên iOS 15.4 tại Mỹ.

Nhấn vào Thanh toán trên iPhone cung cấp một cách an toàn, riêng tư và dễ dàng để chấp nhận thanh toán không tiếp xúc.

Bạn có thể dễ dàng tích hợp điều này vào ứng dụng của mình để chấp nhận thanh toán không tiếp xúc một cách liền mạch và an toàn.

Điều này bao gồm Apple Pay, thẻ tín dụng và thẻ ghi nợ không tiếp xúc, và các ví kỹ thuật số khác.

Giao dịch được hoàn thành thông qua một cú chạm đơn giản vào iPhone, loại bỏ nhu cầu về phần cứng bổ sung hoặc thiết bị đầu cuối thanh toán.

Trong khi đó, trong macOS 13, chúng tôi đã thiết kế lại trải nghiệm Apple Pay.

Thiết kế lại bảng thanh toán iOS năm ngoái là một thành công lớn và năm nay chúng tôi sẽ mang đến trải nghiệm tương tự như macOS.

Chúng tôi đã sử dụng SwiftUI để triển khai điều này, điều này đã giúp chúng tôi mang lại các tính năng mới cho macOS cùng lúc với iOS.

Tất cả các tính năng của Apple Pay mà chúng tôi giới thiệu hôm nay cũng được hỗ trợ trên Mac.

Chúng tôi đang giới thiệu các API SwiftUI mới.

Tích hợp các nút Thêm vào Ví Apple hoặc Apple Pay trong ứng dụng SwiftUI của bạn sẽ dễ dàng hơn nhiều.

Những API mới này sẽ làm giảm đáng kể lượng mã bạn cần viết.

Hãy xem cách bạn có thể thêm một nút để nhắc người dùng thêm thẻ hàng không.

Đầu tiên, tạo đường chuyền.

Bạn nên xử lý trường hợp nó không được tải thành công.

Điều này có thể xảy ra nếu dữ liệu vượt qua không đúng định dạng hoặc nếu nó không được ký đúng cách, chẳng hạn.

Tiếp theo, hãy gọi AddPassToWalletButton với một loạt các đường chuyền.

Trong ví dụ này, chúng tôi có một mảng chỉ với một phần tử, nhưng bạn có thể có nhiều đường chuyền trên cùng một nút.

Kết quả được chuyển vào dưới dạng Bool và bạn có thể lưu, ghi nhật ký hoặc kích hoạt các hành động khác trong ứng dụng của mình dựa trên việc người dùng có thêm thẻ hay không.

Trong ví dụ này, tôi đang lưu nó vào một var trạng thái.

Và thế là xong!

Bạn cũng có thể tùy chỉnh kích thước và kiểu dáng của nút trong một tập hợp các giá trị tối thiểu.

Đây là kích thước mặc định: chiều rộng 250 và chiều cao 50.

Bạn cũng có thể làm cho nó rộng hơn...

...Hoặc cao hơn.

Điều này kết thúc cách bạn có thể thêm nút Thêm vào Ví Apple trong SwiftUI.

Bây giờ, hãy xem cách bạn có thể thêm nút Thanh toán bằng Apple Pay.

Đầu tiên, tạo một yêu cầu thanh toán bằng cách sử dụng lớp PKPaymentRequest, thiết lập cấu hình thông thường của bạn trên đó.

Sau đó, tạo một phương thức authorizationChange.

Bây giờ chúng ta đã chuẩn bị sẵn hai phần này, hãy thêm mã để hiển thị nút.

Thêm một cuộc gọi vào PayWithApplePayButton, chuyển nhãn, đối tượng paymentRequest và phương thức authorizationChange.

Để xử lý các trường hợp Apple Pay không được hỗ trợ bởi thiết bị hiện tại, bạn có thể chuyển trong chế độ xem dự phòng.

Cũng giống như nút Thêm Thẻ, bạn cũng có thể tùy chỉnh kích thước và kiểu dáng của nó.

Tổng cộng, có 17 nhãn khác nhau, vì vậy bạn có thể tùy chỉnh nút thanh toán để phù hợp với trường hợp sử dụng của mình.

Chúng có sẵn trên iOS, iPadOS, macOS và watchOS.

Bây giờ, chúng ta hãy xem xét các khoản thanh toán đa thương gia.

Trong iOS 16, chúng tôi giới thiệu khả năng yêu cầu nhiều mã thông báo thanh toán cho các thương gia khác nhau trong cùng một giao dịch.

Điều này hữu ích cho những thứ như thị trường trực tuyến, đặt chỗ du lịch và dịch vụ bán vé.

Chúng ta hãy xem xét kỹ hơn một ví dụ.

Hãy tưởng tượng Allison đang lên kế hoạch cho một chuyến đi.

Cô ấy truy cập trang web của một công ty du lịch và họ thuận tiện cung cấp cho cô ấy tất cả những thứ cô ấy cần đặt - vé máy bay, lưu trú tại khách sạn và thuê xe hơi.

Allison chỉ cần trả tổng cộng 500 đô la.

Allison cung cấp cho công ty du lịch đầy đủ thông tin thẻ tín dụng của cô ấy.

Bây giờ, bạn có thể tưởng tượng rằng công ty du lịch sẽ tính phí thẻ tín dụng của Allison 500 đô la, và sau đó thanh toán cho các công ty khác có liên quan.

Nhưng điều thường xảy ra là công ty du lịch chỉ cần chuyển thông tin thẻ tín dụng cho mỗi công ty để thực hiện các khoản phí riêng của họ.

Điều này hoạt động, nhưng không tốt cho quyền riêng tư và bảo mật của Allison khi chia sẻ thông tin thẻ tín dụng của cô ấy xung quanh.

Giờ đây, với API thanh toán đa thương gia mới, có thể yêu cầu mã thông báo thanh toán cho mỗi người bán tham gia vào một giao dịch.

Sử dụng các mã thông báo thanh toán này, mỗi công ty liên quan có thể tính phí Allison cho số tiền liên quan mà cô ấy đã ủy quyền.

Allison hiện có thể đặt và thanh toán cho chuyến đi của mình trong khi tận dụng các lợi ích bảo mật và quyền riêng tư mà Apple Pay cung cấp.

Bảng thanh toán đã được cập nhật để hiển thị cho khách hàng bảng phân tích các tàu con liên quan đến một giao dịch.

Khách hàng có thể nhấn vào trường tổng thể để điều hướng đến bản tóm tắt thanh toán.

Tại đây, khách hàng có thể xem bảng phân tích tất cả các thương gia tham gia vào giao dịch, cùng với số tiền được ủy quyền cho mỗi người.

Bây giờ, hãy xem cách bạn có thể thêm thanh toán đa thương gia vào ứng dụng của mình.

Đầu tiên, tạo một yêu cầu thanh toán bằng cách sử dụng lớp PKPaymentRequest, thiết lập cấu hình thông thường của bạn trên đó.

Sau đó thêm các mục tóm tắt cho khoản thanh toán của bạn, bao gồm tổng số.

Tiếp theo, tạo bối cảnh mã thông báo thanh toán cho mỗi người bán bổ sung tham gia vào giao dịch, sử dụng lớp PKPaymentTokenContext mới.

Cung cấp thông tin chi tiết cho từng người bán, cũng như số tiền ủy quyền cho từng người.

Cuối cùng, đặt bối cảnh mã thông báo thanh toán trên yêu cầu thanh toán.

Hãy nhớ rằng tổng số tiền cho tất cả các ngữ cảnh mã thông báo thanh toán của bạn phải nhỏ hơn hoặc bằng tổng số tiền của chính yêu cầu thanh toán.

Ngoài ra, bạn nên luôn sử dụng cùng một mã định danh bên ngoài cho cùng một người bán bất cứ khi nào bạn yêu cầu mã thông báo thanh toán cho người bán đó trong ứng dụng của mình.

Để áp dụng thanh toán đa thương gia với Apple Pay trên web, hãy xem tài liệu Apple Pay JS API.

Bây giờ, chúng ta hãy xem xét những cải tiến của chúng tôi đối với thanh toán tự động.

Trong iOS 16, chúng tôi giới thiệu khả năng mọi người xem và quản lý các khoản thanh toán tự động mà họ đã thiết lập với người bán, ngay từ ứng dụng Wallet.

Trong bản phát hành này, chúng tôi đang hỗ trợ hai loại thanh toán tự động: thanh toán định kỳ, bao gồm những thứ như đăng ký, trả góp hoặc thanh toán định kỳ; và thanh toán tải lại tự động, chẳng hạn như nạp tiền vào số dư thẻ cửa hàng.

Chúng tôi đang giới thiệu các API mới để cho phép bạn yêu cầu thiết lập thanh toán tự động khi bạn thực hiện yêu cầu thanh toán.

Chúng tôi cũng đang giới thiệu mã thông báo thương gia Apple Pay, một loại mã thông báo thanh toán mới gắn liền với ID Apple của khách hàng, có thể giúp bạn tính phí khách hàng của mình một cách đáng tin cậy hơn trên cơ sở liên tục.

Chúng ta hãy xem xét kỹ hơn các mã thông báo của người bán Apple Pay để xem chúng có thể hữu ích như thế nào.

Hãy tưởng tượng Julie đang trả tiền cho tư cách thành viên câu lạc bộ sách bằng Apple Pay trên iPhone của cô ấy.

Câu lạc bộ sách đưa ra yêu cầu thanh toán và khi Julie cho phép thanh toán, câu lạc bộ sách sẽ nhận được mã thông báo thanh toán và mỗi tháng họ có thể sử dụng mã đó để tính phí thành viên Julie.

Mã thông báo thanh toán này được liên kết với thiết bị mà Julie đã sử dụng để ủy quyền thanh toán.

Nhưng điều gì sẽ xảy ra nếu Julie có một chiếc iPhone mới?

Với tính năng thanh toán tự động mới, câu lạc bộ sách thay vào đó sẽ nhận được mã thông báo người bán Apple Pay, nếu mạng thanh toán của Julie hỗ trợ nó.

Mã thông báo thanh toán này được gắn với ID Apple của Julie, thay vì iPhone của cô ấy, cung cấp sự đảm bảo tốt hơn cho các ủy quyền đang diễn ra.

Điều này có nghĩa là nếu Julie nâng cấp iPhone của cô ấy, hoặc đặt lại điện thoại hiện tại của cô ấy, câu lạc bộ sách có thể tiếp tục tính phí thành viên hàng tháng của Julie một cách đáng tin cậy.

Nếu bạn chấp nhận Apple Pay cho các loại thanh toán này, bạn nên áp dụng thanh toán tự động để đảm bảo bạn có thể tiếp tục tính phí khách hàng của mình một cách đáng tin cậy, cũng như tránh bất kỳ sự gián đoạn nào đối với dịch vụ của họ.

Loại thanh toán tự động đầu tiên mà chúng tôi đang hỗ trợ trong bản phát hành này là thanh toán định kỳ.

Các khoản thanh toán định kỳ có số tiền cố định hoặc thay đổi được tính theo lịch trình thông thường, chẳng hạn như hàng tuần, hàng tháng hoặc hàng năm.

Các khoản thanh toán này có thể kết thúc vào một ngày nhất định hoặc chúng có thể tiếp tục cho đến khi bị hủy.

Thời gian dùng thử hoặc giới thiệu cũng được hỗ trợ.

Đăng ký, gói trả góp và thanh toán thông thường là những cách sử dụng hoàn hảo cho loại thanh toán này.

Hãy xem cách bạn có thể thiết lập thanh toán định kỳ trong ứng dụng của mình bằng cách sử dụng thanh toán tự động.

Bắt đầu bằng cách chỉ định số tiền và thời hạn thanh toán định kỳ, sử dụng lớp PKRecurringPaymentSummaryItem.

Đối với các khoản thanh toán định kỳ, bạn có thể chỉ định cả thời gian thanh toán thông thường cũng như thời gian giới thiệu hoặc thời gian dùng thử.

Bạn có thể sử dụng thuộc tính startDate và endDate để cho biết khi nào thời gian dùng thử kết thúc và thời gian thanh toán thông thường bắt đầu.

Tiếp theo, tạo một yêu cầu thanh toán định kỳ bằng cách sử dụng lớp PKRecurringPaymentRequest mới.

Cung cấp mô tả về thanh toán, thời hạn thanh toán thông thường, cũng như URL quản lý đến trang web nơi khách hàng có thể cập nhật hoặc xóa phương thức thanh toán cho thanh toán định kỳ.

Bạn cũng có thể tùy ý cung cấp thời gian thanh toán dùng thử cũng như văn bản Thỏa thuận thanh toán để giúp giải thích các điều khoản thanh toán cho khách hàng.

Cuối cùng, bạn có thể tùy chọn cung cấp tokenNotificationURL nơi máy chủ của bạn có thể nhận thông báo vòng đời về mã thông báo người bán Apple Pay cho thanh toán, nếu một mã thông báo được phát hành.

Ví dụ, bạn có thể nhận thông báo nếu công ty phát hành thẻ hoặc người dùng xóa mã thông báo.

Để biết thêm thông tin về thông báo vòng đời mã thông báo người bán, hãy xem tài liệu API Quản lý mã thông báo người bán Apple Pay.

Cuối cùng, đặt recurringPaymentRequest trên đối tượng paymentRequest.

Lưu ý nhanh về các mục tóm tắt, khoản thanh toán định kỳ của bạn sẽ không tự động được thêm vào các mục tóm tắt của yêu cầu thanh toán.

Vì vậy, hãy chắc chắn thêm các mục cho nó vào mảng các mục tóm tắt.

Tổng số tiền cho yêu cầu thanh toán phải là số tiền đầu tiên mà khách hàng sẽ bị tính phí.

Vì vậy, trong ví dụ này, tổng số được đặt để hiển thị số tiền trong thời gian dùng thử, vì đó là số tiền đầu tiên mà khách hàng sẽ bị tính phí.

Bảng thanh toán sẽ hiển thị chi tiết về khoản thanh toán định kỳ của bạn cho khách hàng và họ có thể nhấn vào phần Chi tiết thanh toán để đọc thêm.

Bây giờ, chúng ta hãy xem loại thanh toán tự động thứ hai mà chúng tôi đang hỗ trợ trong bản phát hành này: thanh toán tải lại tự động.

Với loại thanh toán này, số dư sẽ tự động được nạp vào với một số tiền cố định bất cứ khi nào số dư giảm xuống dưới một số tiền ngưỡng nhất định.

Thanh toán nạp lại tự động là hoàn hảo cho những thứ như nạp tiền vào thẻ cửa hàng và số dư trả trước.

Để yêu cầu thiết lập thanh toán tải lại tự động, hãy bắt đầu bằng cách chỉ định số tiền tải lại và ngưỡng, sử dụng lớp PKAutomatic ReloadPaymentSummaryItem mới.

Tiếp theo, tạo một automaticReloadPaymentRequest bằng cách sử dụng lớp PKAutomatic ReloadPaymentRequest mới, chuyển mô tả về thanh toán, thanh toán và URL quản lý, giống như đối với các khoản thanh toán định kỳ.

Bạn cũng có thể tùy chọn cung cấp văn bản thỏa thuận thanh toán và URL thông báo mã thông báo.

Cuối cùng, đặt yêu cầu thanh toán tải lại tự động trên đối tượng yêu cầu thanh toán.

Một lần nữa, hãy đảm bảo bao gồm thanh toán tải lại tự động của bạn trong các mục tóm tắt và đặt tổng số Yêu cầu thanh toán một cách thích hợp.

Để áp dụng thanh toán tự động với Apple Pay trên web, hãy xem tài liệu Apple Pay JS API.

Đây là cách thanh toán tải lại tự động xuất hiện trong bảng thanh toán cho khách hàng của bạn.

Cuối cùng, đây là một vài điều cần nhớ để giúp mang đến cho khách hàng của bạn trải nghiệm tốt nhất có thể khi bạn áp dụng thanh toán tự động trong ứng dụng của mình.

Hãy nhớ bao gồm các mục tóm tắt cho thanh toán tự động của bạn vì chúng không được thêm vào cho bạn.

Tổng số tiền yêu cầu thanh toán của bạn phải là số tiền đầu tiên mà khách hàng sẽ bị tính phí.

Bạn nên giữ văn bản thỏa thuận thanh toán ngắn gọn.

Bảng thanh toán sẽ chỉ hiển thị 500 ký tự đầu tiên.

Văn bản thỏa thuận thanh toán không nhằm thay thế các thỏa thuận pháp lý và thanh toán thông thường của bạn.

Tùy thuộc vào bạn để tuân thủ luật thanh toán định kỳ tại địa phương của bạn.

Nếu bạn có một thỏa thuận pháp lý để hiển thị cho khách hàng, điều đó có thể có nghĩa là hiển thị nó cho khách hàng trước khi bạn xuất trình bảng thanh toán.

Bạn chỉ có thể yêu cầu một loại thanh toán tự động trong một giao dịch duy nhất.

Ngoài ra, thanh toán tự động không thể được sử dụng với thanh toán đa thương gia.

Cuối cùng, nếu bạn muốn nhận thông báo vòng đời cho mã thông báo người bán Apple Pay được phát hành để thanh toán, hãy đảm bảo cung cấp URL thông báo mã thông báo và áp dụng API quản lý mã thông báo người bán Apple Pay trên máy chủ của bạn.

Chúng tôi nghĩ rằng bạn sẽ thích những API mới này và những lợi ích của mã thông báo thương gia Apple Pay.

Đây chỉ là một vài đối tác của chúng tôi cũng sẽ áp dụng hỗ trợ thanh toán tự động.

Mã thông báo thương gia Apple Pay sẽ được hỗ trợ bởi American Express, Discover, Mastercard và Visa, với sự hỗ trợ cho các mạng thanh toán khác trong tương lai.

Chúng tôi rất vui mừng được giới thiệu Theo dõi Đơn hàng để nâng cao trải nghiệm sau khi mua hàng.

Mới trong iOS 16, theo dõi đơn hàng cho phép người dùng theo dõi các đơn hàng được đặt với các thương gia tham gia.

Wallet hiện cung cấp tổng quan trực quan về các đơn đặt hàng đang hoạt động, các đơn đặt hàng đã hoàn thành gần đây và các đơn đặt hàng trước đây.

Tôi hiện đang có một đơn đặt hàng đang hoạt động duy nhất cho một số mặt hàng bánh mì.

Đơn đặt hàng của tôi vẫn đang trong quá trình xử lý; Tôi sẽ quay lại sau.

Hiện tại, tôi muốn mua một số đồ chơi và phụ kiện cho con mèo của tôi từ Pet Avenue.

Tôi chọn thanh toán bằng Apple Pay.

Ngay sau khi tôi ủy quyền thanh toán, tôi nhận được thông báo theo dõi đơn đặt hàng của mình trong Wallet.

Tương tác với thông báo đó đưa tôi đến chi tiết đơn đặt hàng của mình, nơi tôi có thể kiểm tra trạng thái hiện tại.

Tôi có thể xem trạng thái đơn hàng, bao gồm thông tin vận chuyển và theo dõi, và danh sách các mặt hàng tôi đã đặt hàng.

Xa hơn bên dưới, tôi có nhiều lựa chọn để liên hệ với Pet Avenue, kiểm tra thông tin thanh toán và quay lại ứng dụng của Pet Avenue.

Bây giờ, hãy tưởng tượng Pet Avenue thực sự nhanh chóng xử lý các đơn đặt hàng đến và họ vừa vận chuyển các mặt hàng của tôi.

Ngay sau khi Pet Avenue vận chuyển đơn đặt hàng của tôi, họ đã cập nhật thông tin có sẵn.

Tôi có thể thấy trạng thái được thay đổi thành "Đang trên đường", với ngày giao hàng ước tính là ngày 10 tháng Sáu.

Họ cũng bao gồm một tin nhắn tùy chỉnh và thông tin theo dõi cho lô hàng.

Ồ, nhớ đồ nướng của tôi chứ?

Tôi vừa nhận được thông báo rằng họ đã sẵn sàng để nhận.

Hãy kiểm tra nó.

Tôi đã đặt hàng bánh mì của mình để lấy.

Họ đã sẵn sàng để đón, thật tuyệt!

Bake My Breath Away đã cung cấp cửa sổ nhận hàng của tôi, hướng dẫn nhận hàng và mã vạch để xuất trình khi đến nơi.

Chúng tôi đã thấy rằng theo dõi đơn hàng hoạt động liền mạch với Apple Pay.

Hãy cùng xem cách bạn có thể tích hợp theo dõi đơn hàng vào trải nghiệm khách hàng của mình.

Để bắt đầu theo dõi đơn hàng, trước tiên, bạn phải tạo ID Loại Đơn hàng trong tài khoản nhà phát triển của mình.

ID loại đơn hàng xác định tổ chức của bạn là một thực thể cung cấp thông tin đơn hàng.

Bạn có thể đăng ký nhiều ID Loại Đơn hàng - ví dụ, để cung cấp thông tin đơn hàng thay mặt cho nhiều người bán.

Cũng tạo một Chứng chỉ ID Loại Đơn hàng.

Bạn sẽ sử dụng chứng chỉ để xây dựng các gói đơn hàng và cập nhật đơn hàng.

Các đơn đặt hàng được phân phối dưới dạng các gói đặt hàng.

Một gói đơn đặt hàng bao gồm tất cả siêu dữ liệu và thông tin cho một đơn đặt hàng.

Nó có thể đại diện cho một loạt các kịch bản, bao gồm các đơn đặt hàng vận chuyển, nhận hàng và thực hiện nhiều lần.

Một gói đặt hàng cũng bao gồm các hình ảnh, như logo và hình ảnh mặt hàng của bạn.

Bạn cũng có thể thêm bản địa hóa để hỗ trợ phạm vi khách hàng đa dạng của mình.

Mỗi gói đặt hàng phải được ký bằng mật mã để xác minh nguồn gốc của nó.

Khi mọi thứ đã sẵn sàng, các gói đặt hàng được nén lại để phân phối.

Kiểm tra các gói đặt hàng mẫu đính kèm với phiên này.

Và để biết thêm thông tin về các gói đặt hàng, hãy xem tài liệu dành cho nhà phát triển.

Thêm đơn hàng vào Wallet hoạt động liền mạch với Apple Pay.

Khi khách hàng của bạn ủy quyền thanh toán, ứng dụng hoặc trang web của bạn sẽ nhận được thông tin thanh toán, sau đó gửi nó đến máy chủ của bạn để xử lý.

Nếu việc xử lý thông tin thanh toán thành công, máy chủ của bạn sẽ tạo đơn đặt hàng và một số siêu dữ liệu.

Máy chủ của bạn sau đó trả lại chi tiết về đơn đặt hàng đó cho ứng dụng hoặc trang web của bạn để đưa vào kết quả.

Chi tiết đơn hàng cho phép thiết bị yêu cầu đơn hàng không đồng bộ từ máy chủ của bạn.

Máy chủ của bạn sau đó trả lại gói đơn đặt hàng cho thiết bị.

Khi máy chủ của bạn tạo đơn đặt hàng, hãy chỉ định ID đơn hàng duy nhất trong không gian tên của ID loại đơn hàng của bạn.

Máy chủ của bạn cũng phải tạo mã thông báo xác thực an toàn.

Đây là một bí mật được chia sẻ là một phần của chi tiết đơn hàng.

Thiết bị sẽ sử dụng mã thông báo để tự xác thực khi nó yêu cầu đơn đặt hàng.

Chúng ta hãy xem xét một ví dụ để trả lại kết quả ủy quyền thanh toán.

Khi khách hàng của bạn cho phép thanh toán, ứng dụng của bạn sẽ gửi thông tin thanh toán đến máy chủ của bạn và yêu cầu nó tạo đơn đặt hàng.

Kiểm tra xem kết quả máy chủ có cho thấy sự thành công hay không và xử lý bất kỳ lỗi nào do máy chủ của bạn trả về.

Nếu kết quả máy chủ cho thấy sự thành công, hãy hoàn thành thanh toán với kết quả ủy quyền thích hợp.

Để trả lại kết quả ủy quyền thanh toán với chi tiết đơn hàng, trước tiên, hãy trích xuất chúng từ kết quả máy chủ.

Sau đó tạo một đối tượng PKPaymentOrderDetails với ID Order Ttype, Order ID, URL đến máy chủ của bạn và authenticationToken.

Gán đối tượng PKPaymentOrderDetails cho thuộc tính orderDetails mới trên PKPaymentAuthorizationResult.

Thế là xong!

Bạn cũng có thể hoàn thành thanh toán với chi tiết đơn hàng trên web.

Như trước đây, trích xuất chi tiết đơn hàng từ kết quả máy chủ.

Sau đó bao gồm chi tiết đơn hàng trong dữ liệu bạn hoàn tất thanh toán.

Để có thể cập nhật đơn hàng, hãy tạo một gói đơn hàng cho biết hỗ trợ cập nhật tự động.

Khi đơn đặt hàng được thêm vào, thiết bị sẽ đăng ký cập nhật.

Máy chủ của bạn phải lưu trữ thông tin về đăng ký.

Sau đó, khi máy chủ của bạn cập nhật đơn đặt hàng, hãy sử dụng thông tin đăng ký để thông báo cho các thiết bị đã đăng ký cập nhật.

Khi thiết bị nhận được thông báo đẩy, nó sẽ lại yêu cầu đơn đặt hàng từ máy chủ của bạn.

Máy chủ của bạn sau đó trả lại gói đơn đặt hàng đã cập nhật cho thiết bị.

Chỉ có khách hàng của bạn và bạn nên biết những gì họ đã đặt hàng.

Chúng tôi đã thiết kế theo dõi đơn hàng với sự riêng tư trong tâm trí.

Thông tin đặt hàng được trao đổi trực tiếp giữa các thiết bị và máy chủ của bạn.

Khi các đơn đặt hàng được đồng bộ hóa qua iCloud, chúng sẽ được mã hóa đầu cuối.

Thực hiện theo các phương pháp này để cung cấp trải nghiệm khách hàng tốt nhất có thể.

Liên kết ứng dụng của bạn với các đơn đặt hàng mà bạn cung cấp.

Nếu ứng dụng của bạn gửi thông báo và được cài đặt, bạn có thể tắt thông báo theo dõi đơn hàng.

Điều này giúp ngăn chặn các thông báo trùng lặp.

Sử dụng kiến thức bạn có về sở thích của khách hàng để chỉ cung cấp các bản địa hóa có liên quan.

Hãy chú ý đến kích thước gói hàng.

Cố gắng giữ kích thước nhỏ để giảm chi phí kết nối mạng đắt đỏ.

Khi bạn cập nhật đơn hàng, hãy thông báo kịp thời cho các thiết bị đã đăng ký cập nhật đơn hàng đó.

Các đơn đặt hàng trong Wallet phải khớp với trạng thái thực tế của đơn đặt hàng.

Đảm bảo cũng kiểm tra HIG để theo dõi đơn hàng.

Các nền tảng có thể giúp việc tích hợp theo dõi đơn hàng của bạn đơn giản hơn nhiều.

Chúng tôi vui mừng thông báo Shopify, Narvar và Route sẽ hỗ trợ theo dõi đơn hàng vào mùa thu.

Hãy chú ý đến nhiều nền tảng hỗ trợ theo dõi đơn hàng trong những tháng tới.

Theo dõi đơn hàng là một cách tuyệt vời để nâng cao trải nghiệm sau khi mua hàng cho khách hàng của bạn.

Với các cập nhật tự động, khách hàng của bạn sẽ luôn được cập nhật về trạng thái đơn đặt hàng của họ.

Chúng tôi tin rằng khách hàng của bạn sẽ thích trải nghiệm này và chúng tôi mong sớm được đặt hàng với bạn!

Bây giờ, tôi sẽ chuyển cho David.

David: Cảm ơn, Lais!

Tôi rất hào hứng khi nói về chức năng mới mà chúng tôi đã thêm vào ID trong Wallet trong iOS 16.

Chúng tôi đã ra mắt ID trong Wallet vào đầu năm nay trong iOS 15.4.

Nó cho phép người dùng ở các tiểu bang được hỗ trợ của Hoa Kỳ thêm bằng lái xe hoặc ID tiểu bang của họ vào Wallet.

ID trong Wallet được cấp bởi cùng một cơ quan cấp như ID vật lý của người dùng.

Ở Mỹ, đó là Bộ Phương tiện Cơ giới của Bang họ hoặc tổ chức tương đương.

Trong iOS 16, chúng tôi đã thêm một API mới cho phép các ứng dụng và App Clips yêu cầu thông tin từ ID trong Wallet để xác minh tuổi hoặc danh tính của người dùng.

Ứng dụng của bạn sẽ yêu cầu thông tin, người dùng sẽ xem xét và phê duyệt yêu cầu, Sau đó ứng dụng của bạn sẽ gửi phản hồi đến máy chủ của bạn để giải mã và xác minh.

Bạn có thể yêu cầu một số yếu tố dữ liệu từ ID của người dùng.

Chúng bao gồm tên, địa chỉ, ngày sinh, ảnh của họ - được gọi là chân dung - cơ quan cấp giấy tờ tùy thân, số và ngày hết hạn ID vật lý của họ và các đặc quyền lái xe được cấp bởi giấy tờ tùy thân của họ, nếu có.

Một trường hợp sử dụng rất phổ biến cho ID là xác minh tuổi của ai đó.

Với ID vật lý, điều đó có nghĩa là nhìn vào ngày sinh của họ.

Nhưng ngày sinh tiết lộ nhiều thông tin hơn mức cần thiết chỉ để xác minh tuổi.

Nếu bạn đang kiểm tra tuổi của tôi, bạn thực sự không cần biết chính xác ngày hoặc năm tôi sinh, hoặc thậm chí tôi bao nhiêu tuổi.

Bạn chỉ cần biết liệu tôi đã đủ lớn chưa.

Với ID trong Wallet, bạn có thể hỏi trực tiếp câu hỏi đó.

Ứng dụng của bạn có thể yêu cầu một phần tử dữ liệu Boolean cho biết liệu người dùng có trên một độ tuổi nhất định hay không, cung cấp một cách bảo vệ quyền riêng tư hơn để xác minh độ tuổi hơn là kiểm tra toàn bộ ngày sinh.

Khi ứng dụng của bạn gọi API, một trang tính sẽ hiển thị cho người dùng thông tin bạn đang yêu cầu.

Nó cũng sẽ cho biết liệu bạn có ý định lưu trữ thông tin đó hay không và bạn định lưu trữ nó trong bao lâu.

Điều này cho phép người dùng đưa ra quyết định sáng suốt về việc có nên chia sẻ thông tin với ứng dụng của bạn hay không.

Không có thông tin nào được chia sẻ cho đến khi họ chấp thuận rõ ràng bằng Face ID hoặc Touch ID.

Phản hồi bạn nhận được chỉ chứa các yếu tố bạn yêu cầu.

Các cơ chế xác minh danh tính khác, chẳng hạn như quét thẻ ID vật lý, chia sẻ mọi thứ có trên ID.

Bằng cách giới hạn việc chia sẻ chỉ trong những gì bạn cần, ID trong Wallet bảo vệ quyền riêng tư hơn cho người dùng và giảm lượng thông tin nhạy cảm bạn cần để giữ an toàn trên máy chủ của mình.

Phản hồi được ký bởi cơ quan cấp giấy tờ tùy thân, giúp dễ dàng xác minh rằng thông tin trong phản hồi là xác thực.

Lưu ý rằng cơ quan phát hành tạo ID nhưng không liên quan tại thời điểm bạn gọi API.

Họ không biết khi nào người dùng chia sẻ thông tin của họ hoặc họ chia sẻ thông tin đó với ai.

Để sử dụng API, bạn cần yêu cầu quyền lợi thông qua tài khoản nhà phát triển của mình.

Sau đó, bạn sẽ cần thiết lập ID người bán và chứng chỉ mã hóa.

Quá trình này rất giống với việc thiết lập thanh toán trong ứng dụng với Apple Pay.

Chúng ta sẽ nói nhiều hơn về cách sử dụng ID và chứng chỉ một chút.

Hiện tại, hãy nói về quy trình xác minh.

Ở cấp độ cao, nó bao gồm bốn bước.

Đầu tiên, ứng dụng của bạn sẽ gọi API trong khung PassKit và chỉ định thông tin bạn đang yêu cầu.

Hệ thống sau đó sẽ hiển thị một trang tính nhắc nhở người dùng phê duyệt yêu cầu.

Một khi họ làm vậy, ứng dụng của bạn sẽ nhận được phản hồi được mã hóa.

Ứng dụng của bạn sau đó sẽ chuyển phản hồi đó đến máy chủ của bạn để giải mã và xác minh.

Đầu tiên, hãy nói về cách sử dụng API trong PassKit.

Nếu ứng dụng của bạn sử dụng SwiftUI, bạn nên sử dụng chế độ xem VerifyIdentityWithWalletButton SwiftUI.

Điều này hiển thị một nút kích hoạt quy trình xác minh danh tính khi được nhấn.

Cũng giống như các nút Thanh toán bằng Apple Pay và Thêm Thẻ vào Ví, nút Xác minh Danh tính với Ví cung cấp trải nghiệm quen thuộc, nhất quán trên các ứng dụng sử dụng API.

Bạn có thể chọn giữa bốn nhãn khác nhau để hiển thị một nút phù hợp với trường hợp sử dụng của bạn.

Nó tự động chuyển đổi giữa các phiên bản đơn và nhiều dòng tùy thuộc vào không gian có sẵn cho nó.

Khi tạo nút, bạn cần chỉ định một đối tượng PKIdentityRequest, mô tả thông tin bạn muốn yêu cầu và cách nó sẽ được trả về.

Hãy cùng xem cách tạo ra nó.

Bạn bắt đầu bằng cách tạo một PKIdentityDrivers LicenseDescriptor, mô tả các yếu tố dữ liệu mà bạn đang tìm kiếm.

Sử dụng phương thức addElements để chỉ định các phần tử bạn muốn yêu cầu, cùng với việc bạn có ý định lưu trữ chúng hay không.

Bạn có thể gọi phương thức addElements nhiều lần để chỉ định các bộ phần tử khác nhau với các mục đích lưu trữ khác nhau.

Trong ví dụ này, tôi đang gọi nó hai lần.

Đầu tiên, tôi thêm một phần tử age(atLeast:, phần tử này sẽ không được lưu trữ.

Sau đó, tôi gọi lại phương thức addElements để yêu cầu givenName, familyName và portrait của người dùng, tất cả đều có thể được lưu trữ trong tối đa 30 ngày.

Mô tả sau đó đi vào một PKIdentityRequest.

Bước tiếp theo là chỉ định một Mã định danh người bán để sử dụng.

MerchantIdentifier chỉ ra chứng chỉ mã hóa mà phản hồi API sẽ được mã hóa.

Bạn sẽ cấu hình cả merchantIdentifier và chứng chỉ mã hóa của nó thông qua tài khoản nhà phát triển của bạn.

Cuối cùng, bạn sẽ cần chỉ định một nonce, sẽ được gắn với phản hồi bạn nhận được từ API.

Đây là một tính năng bảo mật quan trọng được sử dụng để ngăn chặn việc phát lại phản hồi và liên kết nó với một phiên người dùng cụ thể.

Chính xác cách bạn quản lý nonce là tùy thuộc vào bạn, dựa trên các yêu cầu bảo mật của riêng bạn.

Thông thường, nó đến từ máy chủ của bạn, bởi vì sau này, máy chủ của bạn sẽ chịu trách nhiệm thực thi rằng nonce là hợp lệ.

Với tất cả các thuộc tính đó được đặt, bạn có PKIdentityRequest của mình.

Bây giờ, hãy quay lại nút.

Nếu xác minh danh tính có sẵn, nút sẽ được hiển thị trong ứng dụng của bạn và nhấn vào nó sẽ bắt đầu luồng xác minh danh tính với yêu cầu của bạn.

Nếu xác minh danh tính không khả dụng, chế độ xem dự phòng mà bạn chỉ định sẽ được hiển thị thay thế.

Ví dụ, điều này sẽ xảy ra nếu không có ID trong Wallet trên iPhone này.

Bạn có thể sử dụng chế độ xem dự phòng để cung cấp các cách khác để xác minh danh tính.

Giả sử xác minh danh tính có sẵn và người dùng nhấn vào nút.

Hệ thống sau đó sẽ hiển thị một trang tính với yêu cầu của bạn, bao gồm các yếu tố bạn yêu cầu và ý định lưu trữ chúng của bạn.

Người dùng có thể phê duyệt yêu cầu bằng Face ID hoặc Touch ID, hoặc đóng trang tính mà không cần phê duyệt.

Mã của bạn sau đó sẽ nhận được một đối tượng kết quả chứa kết quả của yêu cầu.

Nếu yêu cầu được chấp thuận, bạn sẽ nhận được kết quả thành công.

Điều này đi kèm với một đối tượng PKIdentityDocument chứa phản hồi được mã hóa, mà ứng dụng của bạn sẽ gửi đến máy chủ của bạn để giải mã và xác minh.

Nếu yêu cầu không thành công, bạn sẽ nhận được kết quả thất bại.

Nguyên nhân phổ biến nhất của sự thất bại là yêu cầu không được chấp thuận, trong trường hợp đó bạn sẽ nhận được lỗi bị hủy.

Đó là VerifyIdentityWithWalletButton, phiên bản SwiftUI của API.

Sử dụng nó để hiển thị một nút khởi chạy luồng xác minh danh tính và yêu cầu thông tin từ ID trong Wallet.

Nếu bạn không sử dụng SwiftUI trong ứng dụng của mình, bạn cũng có thể sử dụng các lớp PKIdentityButton và PKIdentityAuthorization Controller để thực hiện điều tương tự.

Được rồi, vì vậy, bây giờ bạn đã yêu cầu thông tin, người dùng đã chấp thuận yêu cầu và ứng dụng của bạn đã gửi phản hồi được mã hóa đến máy chủ của bạn.

Bây giờ, hãy nói về những gì máy chủ của bạn cần làm để giải mã và xác minh phản hồi đó.

Tôi sẽ chỉ lướt qua bề mặt về chủ đề này, vì vậy vui lòng kiểm tra tài liệu dành cho nhà phát triển để biết thêm chi tiết.

Định dạng phản hồi sử dụng một số tiêu chuẩn quốc tế, vì vậy tôi thực sự khuyên bạn nên tự làm quen với những tiêu chuẩn đó.

Dữ liệu phản hồi bạn sẽ nhận được nằm trong một phong bì mã hóa được mã hóa CBOR.

CBOR là một định dạng dữ liệu được định nghĩa trong RFC 8949.

Nó tương tự như JSON nhưng sử dụng dữ liệu nhị phân để mã hóa các đối tượng.

Phong bì mã hóa chứa siêu dữ liệu cần thiết cho quá trình giải mã, cùng với chính dữ liệu được mã hóa.

Dữ liệu được mã hóa bằng HPKE, một sơ đồ mã hóa được xác định trong RFC 9180.

Máy chủ của bạn sẽ giải mã dữ liệu này bằng khóa riêng của nó.

Sau khi giải mã, bạn sẽ nhận được một đối tượng phản hồi mdoc.

Phản hồi mdoc được định nghĩa trong ISO 18013 phần năm, tiêu chuẩn ISO cho Giấy phép Lái xe di động và ID Tiểu bang.

Đối tượng phản hồi mdoc chứa các phần tử dữ liệu mà bạn yêu cầu.

Nó cũng bao gồm một số tính năng bảo mật mà máy chủ của bạn cần xác thực để đảm bảo rằng phản hồi là xác thực.

Lưu ý rằng máy chủ của bạn sẽ tự thực hiện giải mã và xác thực.

Cả máy chủ Apple và máy chủ của cơ quan phát hành đều không liên quan.

Trước khi chúng ta có thể nói về giải mã và xác thực phản hồi, chúng ta cần nói về bảng điểm phiên.

Đây là cấu trúc CBOR liên kết tải trọng phản hồi với một yêu cầu cụ thể từ một ứng dụng cụ thể.

Máy chủ của bạn sẽ cần xây dựng cấu trúc này và sử dụng nó trong cả quá trình giải mã và xác thực.

Bảng điểm phiên chứa cùng một nonce và ID người bán mà bạn đã sử dụng trước đó trong PKIdentityRequest của mình, cũng như ID nhóm của nhóm nhà phát triển của bạn và hàm băm SHA256 của khóa công khai chứng chỉ mã hóa của bạn.

Khi xây dựng bảng điểm phiên, máy chủ của bạn nên kiểm tra xem các đầu vào bạn đang sử dụng có hợp lệ không.

Điều đó có nghĩa là nonce không nên được sử dụng và nên được gắn với người dùng hiện tại.

Các giá trị khác phải khớp với những gì được mong đợi trên tài khoản nhà phát triển của bạn.

Bây giờ hãy nói về việc giải mã dữ liệu được mã hóa.

Bạn sẽ cần bảng điểm phiên bạn vừa tạo, cùng với siêu dữ liệu từ phong bì mã hóa.

Bạn cũng sẽ cần khóa riêng tư của mình.

Đây là khóa riêng tương ứng với chứng chỉ bạn đã thiết lập trước đó trong tài khoản nhà phát triển của mình.

Để bảo vệ tính bảo mật của thông tin người dùng, bạn cần đảm bảo khóa riêng tư của mình luôn ở chế độ riêng tư.

Lưu trữ nó một cách an toàn trên máy chủ của bạn và không bao giờ đưa nó vào ứng dụng của bạn.

Nếu khóa riêng tư của bạn bị xâm phạm, hãy thu hồi chứng chỉ trong tài khoản nhà phát triển của bạn ngay lập tức.

Sau khi giải mã dữ liệu được mã hóa, bạn sẽ nhận được một đối tượng phản hồi mdoc chứa hai chữ ký mật mã, cộng với các yếu tố dữ liệu bạn yêu cầu.

Bạn cần kiểm tra cả hai chữ ký trong phản hồi mdoc trước khi bạn có thể sử dụng các phần tử dữ liệu của nó.

Đầu tiên, bạn cần kiểm tra chữ ký của tổ chức phát hành.

Đây là chữ ký từ cơ quan cấp ID của người dùng.

Bằng cách kiểm tra chữ ký này, bạn đang xác minh rằng dữ liệu trong phản hồi đến từ cơ quan phát hành thực sự và không bị giả mạo.

Bạn nên kiểm tra xem không chỉ chữ ký có hợp lệ mà còn được ký bởi chứng chỉ nhà phát hành mà bạn tin tưởng hay không.

Hãy xem tài liệu để biết thêm chi tiết về chứng chỉ phát hành được sử dụng bởi ID trong Wallet.

Tiếp theo, bạn cần xác minh chữ ký của thiết bị.

Đây là chữ ký được tạo bởi một khóa trong Phần tử Bảo mật của iPhone của người dùng.

Nó chứng minh rằng phản hồi bạn nhận được đến từ cùng một chiếc iPhone mà cơ quan phát hành ban đầu đã cấp ID cho.

Tại đây, bạn sẽ cần sử dụng lại bảng điểm phiên của mình, cùng với một số thông tin được bao phủ bởi chữ ký của nhà phát hành.

Cuối cùng, bạn đã sẵn sàng sử dụng các yếu tố dữ liệu mà bạn yêu cầu.

Bạn không bao giờ nên sử dụng các yếu tố này mà không xác minh trước chữ ký của nhà phát hành và thiết bị, bởi vì nếu không bạn không biết liệu dữ liệu bạn nhận được có phải là xác thực hay không.

Và với tất cả các bước đó đã hoàn thành, bạn đã hoàn thành!

Ứng dụng của bạn đã yêu cầu thông tin và máy chủ của bạn đã giải mã và xác minh phản hồi.

Bạn có thể tự hỏi làm thế nào để kiểm tra việc triển khai của mình nếu bạn không có ID trong Wallet.

Chúng tôi đã cung cấp một vài cơ chế để giúp bạn làm điều đó.

Đầu tiên, bạn có thể kiểm tra trong Trình mô phỏng iOS, nơi API sẽ trả về phản hồi giả.

Phản hồi này tương tự như phản hồi thật, nhưng thiếu chữ ký thật.

Tương tự, bạn có thể sử dụng hồ sơ thử nghiệm để nhận phản hồi giả trên iPhone thật, ngay cả khi bạn không có ID trong Wallet trên iPhone đó.

Xem tài liệu để biết thêm chi tiết về cách thực hiện việc này.

Lưu ý rằng máy chủ của bạn không bao giờ nên coi một trong hai phản hồi giả này như thật.

Để giúp bạn triển khai máy chủ, tài liệu cũng bao gồm một phản hồi ví dụ, cùng với mọi thứ bạn cần để giải mã và xác thực nó.

Và đó là cách bạn có thể thực hiện xác minh danh tính với ID trong Wallet trong iOS 16.

Chúng tôi đã thảo luận về cách sử dụng API trong ứng dụng của bạn, cách xử lý phản hồi trên máy chủ của bạn và cách kiểm tra việc triển khai của bạn.

Lais: Năm nay, chúng tôi đã giới thiệu nhiều tính năng mới tuyệt vời cho Wallet và Apple Pay.

Chúng bao gồm thanh toán đa thương gia, hỗ trợ được cải thiện cho thanh toán tự động, theo dõi đơn hàng và xác minh danh tính.

Vui lòng xem tài liệu dành cho nhà phát triển để biết thêm thông tin.

David: Cảm ơn bạn đã xem, và chúc bạn có một WWDC tuyệt vời!

♪