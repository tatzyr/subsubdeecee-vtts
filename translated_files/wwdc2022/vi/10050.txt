10050

♪ Nhạc hip-hop nhạc cụ êm dịu ♪

♪

Xin chào! Tên tôi là Devon.

Tôi là một kỹ sư trong nhóm watchOS, và hôm nay, tôi sẽ nói về iOS.

Và tôi là Graham, một kỹ sư từ iOS, và hôm nay, tôi sẽ nói về watchOS.

Chúng ta sẽ nói về các bổ sung API cho WidgetKit cho phép bạn viết các tiện ích phụ kiện cho Màn hình khóa và các biến chứng cho watchOS.

Chúng tôi sẽ chỉ ra cách bạn có thể phát triển cả hai cùng nhau, cùng với các bổ sung vào SwiftUI để giúp bạn trên đường đi.

Nếu bạn không quen với các tiện ích, dòng thời gian và tải lại, tôi khuyến khích bạn tìm kiếm các phiên WidgetKit trước đó.

Đầu tiên, chúng ta sẽ nói về lịch sử của các biến chứng và cách chúng phát triển.

Sau đó, chúng ta sẽ nói về API mới để tô màu các tiện ích và sự phức tạp của bạn trong môi trường mới của chúng.

Sau đó, Graham sẽ giới thiệu cách bắt đầu tạo tiện ích của riêng bạn và di chuyển tiện ích mở rộng tiện ích hiện có của bạn sang watchOS.

Tiếp theo, Graham sẽ hướng dẫn bạn cách tận dụng tối đa những lượt xem nhỏ hơn này.

Và cuối cùng, chúng ta sẽ nói về các môi trường riêng tư khác nhau mà các tiện ích của bạn có thể xuất hiện.

Biến chứng là một phần quan trọng của nền tảng watchOS, trình bày thông tin nhanh chóng, có thể xem được trên mặt đồng hồ.

Họ truyền tải thông tin có giá trị cao, có thể truy cập ngay lập tức và một cú chạm sẽ đưa bạn đến vị trí có liên quan trong ứng dụng.

Trong watchOS 2, ClockKit cho phép bạn tạo ra các biến chứng của riêng mình.

Các biến chứng đã đi một chặng đường dài kể từ đó.

Các biến chứng phong phú đã được giới thiệu trong watchOS 5, với nội dung đồ họa và một bộ gia đình mới.

Các biến chứng SwiftUI và nhiều biến chứng đã được giới thiệu trong watchOS 7, cho phép bạn đưa các biến chứng của mình lên một tầm cao mới và cung cấp nhiều tùy chọn hơn bao giờ hết.

Ngày nay, các biến chứng đã được mô phỏng lại và làm lại với WidgetKit, bao gồm SwiftUI và mang lại trải nghiệm phức tạp có thể nhìn thấy cho iOS dưới dạng các tiện ích.

Với WidgetKit trong iOS 16 và watchOS 9, bạn có thể xây dựng các tiện ích và sự phức tạp có thể xem qua tuyệt vời trên cả hai nền tảng, cho phép bạn viết mã của mình một lần và chia sẻ cơ sở hạ tầng với các tiện ích Màn hình chính hiện có của bạn.

Để làm điều này, chúng tôi đã thêm các họ tiện ích mới vào loại WidgetFamily hiện có, có tiền tố là từ "phụ kiện".

Họ hình chữ nhật phụ kiện mới có thể được sử dụng để hiển thị nhiều dòng văn bản hoặc biểu đồ và biểu đồ nhỏ, tương tự như họ Hình chữ nhật đồ họa ClockKit hiện có.

Gia đình vòng tròn phụ kiện rất phù hợp để có thông tin ngắn gọn, đồng hồ đo và quan điểm tiến độ.

Gia đình này cũng thay thế gia đình graphicCircular ClockKit.

Phụ kiện nội tuyến hoàn toàn mới là một khe cắm chỉ có văn bản trên nhiều khuôn mặt trên watchOS và hơn thời gian trên iOS.

Khe nội tuyến có nhiều kích cỡ và chúng ta sẽ nói về cách tận dụng tốt nhất tất cả chúng sau này.

Cụ thể cho watchOS là dòng phụ kiện mới của góc, trộn một vòng tròn nhỏ nội dung tiện ích với đồng hồ đo và văn bản.

Cuộc nói chuyện này tập trung vào các gia đình chung giữa iOS và watchOS.

Để biết thêm chi tiết về dòng watchOS mới này và các tính năng dành riêng cho biến chứng, hãy xem phiên "Tiến xa hơn với các biến chứng WidgetKit".

Hãy nói về màu sắc và chế độ kết xuất.

Bạn có thể nhận thấy rằng các vật dụng phụ kiện có một vài diện mạo khác nhau.

Hệ thống kiểm soát giao diện của các vật dụng gia đình phụ kiện và chúng tôi đã cung cấp cho bạn một số công cụ để giúp điều chỉnh chúng theo phong cách kết xuất.

Có ba chế độ kết xuất khác nhau mà tiện ích của bạn có thể được hiển thị.

Tiện ích của bạn có thể có đầy đủ màu sắc, có điểm nhấn hoặc rực rỡ.

Chúng tôi đã giới thiệu loại WidgetRenderingMode để đại diện cho ba bài thuyết trình khác nhau này.

Bạn có thể truy cập giá trị này từ Môi trường, sử dụng đường dẫn phím widgetRenderingMode.

Sau đó, bạn có thể thay đổi nội dung của mình một cách có điều kiện để đảm bảo rằng nó trông giống nhau ở mọi nơi mà nó sẽ hiển thị.

Trong chế độ đầy đủ màu sắc của watchOS, nội dung của bạn được hiển thị chính xác như bạn chỉ định.

Nhiều biến chứng hiện có có vẻ ngoài đầy màu sắc với đầy đủ màu sắc, như độ dốc trong đồng hồ đo Thời tiết hoặc màu sắc của vòng Hoạt động.

Trong chế độ kết xuất có dấu, chế độ xem của bạn được chia thành hai nhóm và được tô màu độc lập.

Hai nhóm tô màu có màu phẳng, chỉ giữ nguyên độ mờ ban đầu của chúng.

Bạn có thể cho hệ thống biết cách nhóm các chế độ xem của mình với công cụ sửa đổi chế độ xem .widgetAccentable() hoặc chuyển đổi nội dung của bạn dựa trên giá trị môi trường Chế độ kết xuất tiện ích để trông hoàn hảo khi được làm phẳng.

Lưu ý rằng hệ thống có thể tô màu nội dung của bạn theo một số cách, một số trong đó bị đảo ngược.

Một số ở trên nền đen, trong khi một số khác ở trên nền đầy đủ màu sắc mới trong watchOS 9.

Trong chế độ kết xuất sôi động của iOS, nội dung của bạn không bão hòa sau đó được tô màu thích hợp cho nền Màn hình khóa.

Hệ thống ánh xạ nội dung thang độ xám của bạn vào một giao diện vật chất.

Vật liệu này thích ứng với nội dung đằng sau nó, xuất hiện vừa phải trong môi trường của nó.

Ngoài ra, Màn hình khóa có thể được cấu hình để tạo cho chế độ kết xuất sống động một tông màu.

Màu nguồn sáng cuối cùng hầu như mờ đục và sáng hơn.

Ở đầu bên kia, một màu nguồn tối xuất hiện dưới dạng độ mờ ít nổi bật hơn của nền phía sau nó, chỉ với một chút độ sáng.

Để đảm bảo tính dễ đọc, tránh sử dụng màu trong suốt trong chế độ này.

Thay vào đó, hãy sử dụng màu tối hơn hoặc màu đen để thể hiện nội dung ít nổi bật hơn trong khi vẫn duy trì tính dễ đọc.

Để giúp bạn với một số sắc thái này, chúng tôi cũng đã giới thiệu chế độ xem AccessoryWidgetBackground để cung cấp bối cảnh nhất quán cho các tiện ích cần chúng, như lịch tròn này.

Trong khi hầu hết các tiện ích phụ kiện không có nền, một số kiểu có thể được nâng cao bằng một.

Chế độ xem nền có các giao diện khác nhau trong các chế độ kết xuất tiện ích khác nhau và được hệ thống điều chỉnh để trông phù hợp với phong cách của khuôn mặt hoặc Màn hình khóa.

Đây là một chế độ xem trong suốt mềm mại với đầy đủ màu sắc và có điểm nhấn, và màu đen trong môi trường sôi động, dẫn đến độ sáng thấp và độ mờ hoàn toàn.

Graham rất hào hứng khi bắt đầu tạo một số tiện ích mới cho Màn hình khóa và các biến chứng trên watchOS - Tôi sẽ giao nó cho anh ấy.

Xin chào lần nữa!

Tôi sẽ thêm hỗ trợ cho các gia đình tiện ích mới của chúng tôi vào một ứng dụng hiện có - Emoji Rangers - mà một số bạn có thể quen thuộc từ "Widgets Code-along" của WWDC2020.

Trước khi tôi bắt đầu, một ghi chú cho những người có các dự án không có tiện ích hiện có.

Bạn có thể bắt đầu bằng cách thêm mục tiêu Tiện ích mở rộng Widget vào dự án của mình, đã tồn tại trên iOS và đã được đưa đến watchOS.

Nhưng tôi biết rằng nhiều người trong số các bạn đã có ứng dụng với các tiện ích, vì vậy hôm nay hãy bắt đầu từ đó và nói về việc thêm các tiện ích và sự phức tạp mới.

Chúng tôi sẽ tiếp tục dự án Emoji Rangers.

Ứng dụng này theo dõi Emoji Rangers yêu thích của chúng tôi và giúp bạn cập nhật sức khỏe và thời gian nạp tiền của họ bằng cách sử dụng các tiện ích Màn hình chính.

Chúng tôi đã mang Emoji Rangers đến watchOS, mang ứng dụng yêu thích của chúng tôi đến cổ tay.

Hôm nay chúng tôi sẽ mở rộng Emoji Rangers với sự hỗ trợ cho các dòng tiện ích mới của chúng tôi và đưa tiện ích mở rộng tiện ích của nó lên đồng hồ.

Hãy bắt đầu với việc đưa tiện ích mở rộng vào đồng hồ.

Chúng tôi sẽ thêm một mục tiêu watchOS mới chia sẻ mã với mục tiêu iOS hiện có.

Chúng tôi sẽ sao chép mục tiêu tiện ích mở rộng tiện ích iOS, đặt tên tốt hơn cho nó, thay đổi mã định danh gói để có tiền tố với ứng dụng đồng hồ, watchOS mục tiêu và nhúng tiện ích mở rộng mới của chúng tôi vào ứng dụng đồng hồ của chúng tôi.

Bây giờ chúng ta cần xây dựng mã của mình trên watchOS - hãy tiếp tục với điều đó.

Lướt qua mã EmojiRangerWidget, chúng ta có thể thấy nhà cung cấp dòng thời gian, được sử dụng khi hệ thống tải lại nội dung, chế độ xem sử dụng SwiftUI để tạo nội dung cho các họ khác nhau của chúng ta, cấu hình tiện ích và nhà cung cấp xem trước Xcode.

Ứng dụng Emoji Rangers đã hỗ trợ các tiện ích Màn hình chính của iOS.

Nó cung cấp hệ thống các gia đình vừa và nhỏ, và ở đây trong cấu hình tiện ích, tôi sẽ thêm các gia đình mới.

Bởi vì các họ hệ thống không có sẵn trên đồng hồ, chúng tôi sẽ cần sử dụng macro nền tảng để chỉ định các Gia đình được hỗ trợ của chúng tôi.

Trong nhà cung cấp bản xem trước, tôi sẽ thêm bản xem trước cho các gia đình mới.

Tiếp theo, chúng ta cần triển khai IntentRecommendation API mới trước khi chúng ta có thể xây dựng thành công cho watchOS.

Mặc dù Intents có thể cấu hình đầy đủ trong các tiện ích chỉnh sửa giao diện người dùng trên iOS, trên watchOS, chúng tôi cần cung cấp một danh sách được cấu hình sẵn.

Chúng tôi có thể làm điều đó bằng cách ghi đè lên phương pháp đề xuất mới trên IntentTimelineProvider của chúng tôi.

Bây giờ chúng tôi đang xây dựng thành công.

Hãy tiếp tục xem trước và xem tiện ích hình tròn của chúng ta trông như thế nào.

Nội dung dành cho ngay cả một tiện ích nhỏ cũng không phù hợp với yếu tố hình thức mới của chúng tôi.

Các họ tiện ích mới nhỏ hơn các tiện ích iOS được tìm thấy trên Màn hình chính và bạn sẽ cần xem xét nội dung các biến chứng của mình.

Bây giờ hãy nói về một số quan điểm mới mà chúng ta có thể sử dụng để làm nổi bật các biến chứng của mình.

Chúng ta hãy đi đến quang cảnh.

Chúng ta có thể thấy mã cho hệ thống Nhỏ và các vật dụng khác; hãy thêm mã cho phụ kiện Vỏ tròn.

Tôi nghĩ nó sẽ trông đẹp chỉ với hình đại diện.

Điều này cung cấp một lối tắt nhanh vào ứng dụng của chúng tôi nhưng không cung cấp cho người dùng bất kỳ thông tin nào.

Hãy thêm chế độ xem tiến độ xung quanh rìa, điều này sẽ cung cấp cho người dùng ý tưởng về thời điểm Ranger sẽ sẵn sàng chiến đấu trở lại.

Rắc rối là làm sinh động chế độ xem tiến độ này là hiện tại sẽ yêu cầu rất nhiều mục nhập dòng thời gian liên tiếp.

Thay vào đó, chúng ta có thể sử dụng ProgressView tự động cập nhật mới của SwiftUI.

Điều đó mất một khoảng thời gian mà Ranger của chúng ta sẽ được chữa lành hoàn toàn.

Hệ thống sẽ cập nhật chế độ xem tiến trình của chúng tôi, có nghĩa là chúng tôi chỉ cần một mục nhập dòng thời gian ở đây.

Tốt hơn nhiều.

Bây giờ hãy thêm họ hình chữ nhật.

Chúng tôi sẽ chọn bản xem trước hình chữ nhật.

Điều này cho chúng tôi nhiều không gian hơn, vì vậy chúng tôi sẽ tạo chế độ xem ba dòng theo phong cách phức tạp.

Đầu tiên là tên của nhân vật, sau đó là cấp độ của họ, và sau đó là thời gian cho đến khi được chữa lành hoàn toàn, mà chúng ta sẽ sử dụng trường ngày tự động cập nhật.

Tôi muốn tên của nhân vật nổi bật, vì vậy tôi sẽ định cỡ văn bản, sử dụng kiểu phông chữ của tiêu đề và thêm công cụ sửa đổi widgetAccentable sẽ điều chỉnh màu sắc của nó.

Chế độ xem của chúng tôi trông tuyệt vời ở đây trong trạng lượng rực rỡ, bây giờ hãy xem nó trông như thế nào trong các chế độ kết xuất khác của chúng tôi trên đồng hồ.

Bạn có thể thấy tên của nhân vật có màu nhấn như thế nào.

Để làm cho các tiện ích và sự phức tạp của bạn cảm thấy như ở nhà trong môi trường của chúng, điều quan trọng là bạn phải sử dụng các tham số phông chữ mặc định và sử dụng các kiểu phông chữ.

Các kiểu và kích thước phông chữ khác nhau giữa iOS và watchOS.

iOS sử dụng thiết kế văn bản thông thường, trong khi watchOS sử dụng thiết kế tròn với trọng lượng nặng hơn.

Các vật dụng và biến chứng của bạn sẽ nằm trên màn hình liền kề với những vật dụng khác.

Và vì vậy chúng trông nhất quán, chúng tôi khuyên bạn nên sử dụng các kiểu phông chữ Tiêu đề, Tiêu đề, Nội dung và Chú thích.

Bản xem trước của Xcode cho thấy chúng tôi vẫn còn chỗ để thêm hình đại diện.

Hãy xem cái này trông như thế nào trên iPhone.

Trông thật tuyệt!

Cuối cùng, hãy thêm kiểu thứ ba, accessoryInline, hiển thị một dòng văn bản và tùy chọn một hình ảnh.

Lưu ý rằng các phụ kiện nội tuyến được vẽ theo màu sắc và phông chữ do hệ thống xác định.

Hãy chọn bản xem trước.

Hãy cho thấy tên anh hùng của chúng ta và đếm ngược nạp tiền.

Văn bản này quá dài so với khe cắm đồng hồ của chúng tôi.

Vì vậy, bây giờ là thời điểm tốt để cho bạn thấy ViewThatFits.

Tôi có thể cung cấp nhiều chế độ xem, từ dài đến ngắn gọn và ViewThatFits sẽ chọn chế độ xem nội dung đầu tiên phù hợp với không gian có sẵn mà không bị cắt ngắn hoặc cắt xén.

Hãy rút ngắn văn bản.

Thậm chí điều đó có thể quá dài đối với khe cắm đồng hồ ngắn nhất, vì vậy hãy đưa ra giải pháp thay thế thứ ba bằng cách chuyển hình đại diện cho tên.

Hãy xem nó trông như thế nào.

Tham khảo phiên "S soạn bố cục tùy chỉnh với SwiftUI" để biết thêm về điều này.

Tuyệt vời!

Ngay cả Emoji Rangers cũng thích tận hưởng sự riêng tư, vì vậy tôi sẽ trả lại cho Devon để nói về điều đó.

Xin chào lần nữa! Hãy nói về sự riêng tư.

Cho đến nay trong cuộc nói chuyện này, chúng tôi đã thảo luận về trạng thái hoạt động của các tiện ích và sự phức tạp của bạn.

Tuy nhiên, trên các nền tảng của chúng tôi, bạn sẽ cần xem xét liệu thiết bị đang biên tập lại nội dung hay ở trạng thái độ sáng thấp.

Trên Màn hình khóa iOS, hành vi mặc định là hiển thị nội dung của bạn ngay cả khi thiết bị bị khóa, đây là ô trên cùng bên trái trong lưới của chúng tôi tại đây.

Tuy nhiên, điều này có thể định cấu hình trong Cài đặt và người dùng có thể chọn chỉnh sửa tiện ích của họ khi bị khóa, giống như Thông báo.

Trên watchOS, thiết bị vẫn được mở khóa miễn là đồng hồ được đeo.

Khi không hoạt động, đồng hồ chuyển sang luôn bật, với nội dung trong bản trình bày độ sáng thấp và nhịp cập nhật thấp hơn.

Theo mặc định, nội dung của bạn không được biên tập lại ở độ sáng thấp, đó là trạng thái ở phía dưới bên trái.

Giống như Màn hình khóa, người dùng của bạn có thể định cấu hình nội dung phức tạp của họ để được biên tập lại ở trạng thái luôn bật này.

Ở trạng thái này, bạn sẽ cần đảm bảo nội dung của mình được chuẩn bị cho cả biên tập và độ sáng thấp.

Cùng với nhau, các nền tảng bao gồm từng trạng thái trong số bốn trạng thái được hiển thị ở đây.

Xem xét tất cả các trạng thái có thể xảy ra này và đảm bảo các biến chứng và tiện ích của bạn hoạt động tốt trong mọi trường hợp.

Hãy nói về cách bạn có thể làm điều đó.

Trên đồng hồ, tiện ích của bạn cần hỗ trợ trải nghiệm hiển thị luôn bật.

Bạn có thể điều chỉnh nội dung của mình để luôn bật với giá trị môi trường \.isLuminanceReduced.

Nếu bạn đến từ ClockKit, lưu ý rằng bây giờ bạn có thể chuẩn bị nội dung luôn bật cho mọi mục nhập dòng thời gian, không chỉ một mục.

Khi luôn bật, chế độ xem văn bản và tiến trình tương đối theo thời gian của bạn sẽ thay đổi sang chế độ trung thực giảm để hỗ trợ nhịp cập nhật thấp của luôn bật.

Để hỗ trợ chế độ này, hãy sử dụng giá trị môi trường để xóa bất kỳ nội dung nhạy cảm về thời gian nào và tối ưu hóa nội dung của bạn cho tần suất cập nhật thấp hơn.

Bây giờ hãy nói về việc biên tập.

Theo mặc định, chế độ riêng tư sẽ hiển thị phiên bản được biên tập lại của chế độ xem trình giữ chỗ mà Nhà cung cấp dòng thời gian của bạn tạo.

Nếu bạn có một số yếu tố nhạy cảm và những yếu tố khác không cần biên tập lại, bạn có thể sử dụng công cụ sửa đổi .privacySensitive để chỉ đánh dấu một số chế độ xem sẽ được biên tập lại.

Trong ví dụ này, chúng tôi đã chỉnh sửa nhịp tim trong tiện ích của mình nhưng không được chỉnh sửa hình ảnh.

Bây giờ bạn đã sẵn sàng để tạo các tiện ích tuyệt vời cho các biến chứng của Màn hình khóa và WidgetKit.

Để biết thêm về những gì mới trong SwiftUI, hãy xem bài nói chuyện "S soạn bố cục tùy chỉnh với SwiftUI".

Cảm ơn vì đã xem.

♪