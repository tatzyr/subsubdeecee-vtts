10110

Andreas: Xin chào, và chào mừng đến với WWDC.

Tôi là Andreas từ nhóm bản địa hóa tại Apple và hôm nay tôi muốn chia sẻ với bạn một số ví dụ về cách xây dựng các ứng dụng bản địa hóa, chất lượng cao.

Quốc tế hóa có nghĩa là chuẩn bị ứng dụng của bạn chạy trên các thiết bị trên toàn thế giới.

Khi bản địa hóa được thực hiện tốt, mọi người đều có thể tận hưởng trải nghiệm và tiện ích tuyệt vời như nhau - bất kể họ nói ngôn ngữ nào.

Sử dụng các API mà Apple cung cấp, hầu hết các phần trong ứng dụng của bạn đều thân thiện với quốc tế hóa ngay lập tức.

Trong buổi nói chuyện này, bạn sẽ học hỏi từ kinh nghiệm của chúng tôi làm cho các ứng dụng của Apple hấp dẫn đối tượng đa dạng, bao gồm một số thách thức và cách chúng tôi giải quyết chúng.

Tôi sẽ bắt đầu với việc khai báo và tải văn bản bản địa hóa.

Thật dễ dàng để bao gồm ngày, giờ được định dạng và hơn thế nữa trong chuỗi của chúng tôi.

Tôi sẽ nêu bật một số lựa chọn, và chúng ta sẽ xem xét một ví dụ phức tạp.

Gói Swift của bạn cũng có thể bao gồm văn bản được bản địa hóa và bạn sẽ tìm hiểu về những cải tiến đối với quy trình bản địa hóa.

Cuối cùng, tôi sẽ nói về bố cục và những bổ sung mới tuyệt vời cho SwiftUI.

Tại Apple, chúng tôi đảm bảo rằng các ứng dụng của chúng tôi đang cung cấp trải nghiệm tuyệt vời cho khán giả quốc tế của chúng tôi.

Và ứng dụng Thời tiết là một ví dụ về điều này.

Hàng triệu người dùng mở nó mỗi ngày để kiểm tra dự báo - và đây là ứng dụng trông như thế nào đối với họ, dù họ ở đâu trên thế giới.

Chú ý cách mọi thứ trong giao diện người dùng được điều chỉnh theo sở thích của họ.

Chúng tôi bản địa hóa các mô tả về điều kiện thời tiết hiện tại và chúng tôi định dạng các con số.

Giao diện người dùng cũng được điều chỉnh một cách thích hợp tùy thuộc vào việc ngôn ngữ từ trái sang phải hay từ phải sang trái.

Chúng ta hãy xem xét kỹ hơn một trong những thứ chúng ta tùy chỉnh bằng cách bắt đầu với bản dịch.

Khung cảnh này ở đây nói rằng "Gió đang khiến nó cảm thấy mát mẻ hơn" bằng tiếng Anh.

Và đây là những gì nó trông giống như trong các ngôn ngữ khác.

Để hỗ trợ chúng đúng cách, tất cả những gì chúng ta phải làm là khai báo chuỗi bằng String(localized).

Xcode phát hiện ra nó khi xuất để bản địa hóa và chúng tôi có thể gửi kết quả qua các dịch giả của mình.

Tôi sẽ sử dụng ứng dụng Thư trên máy Mac của mình để làm như vậy.

Và trong khi chúng ta ở đó, tôi muốn cho bạn xem một cái gì đó.

Nếu tôi mở menu ngữ cảnh của một email, tôi có thể di chuyển nó đến một thư mục đặc biệt có tên là "Lưu trữ". Nó nằm trong thanh bên của tôi.

Chú ý cách cả hai từ đều "Lưu trữ" trong tiếng Anh.

Tuy nhiên, các ngôn ngữ khác như tiếng Tây Ban Nha có các từ khác nhau cho hành động và tên thư mục.

Mặc dù các từ tiếng Anh giống nhau, nhưng khi chúng xuất hiện trong các ngữ cảnh khác nhau, các ngôn ngữ khác có thể sử dụng các từ khác nhau.

Bạn nên sử dụng hai chuỗi trong mã trong trường hợp này.

Và để làm điều đó, chúng tôi đã thêm API mới vào trình khởi tạo chuỗi trong năm nay.

Bây giờ nó lấy một giá trị mặc định, mà chúng ta có thể sử dụng cho chuỗi tiếng Anh của mình.

Sau đó, chúng tôi sửa đổi khóa của chuỗi được bản địa hóa để làm rõ sự khác biệt đối với người dịch.

Bằng cách này, cùng một từ được hiển thị khi chạy ứng dụng bằng tiếng Anh và các dịch giả tiếng Tây Ban Nha có thể cung cấp các từ khác nhau.

Bài nói chuyện năm ngoái "Hợp lý hóa các chuỗi được bản địa hóa của bạn" giúp bạn hiểu những điều cơ bản về quản lý chuỗi và nó đi xa hơn vào quá trình bản địa hóa.

Tôi muốn bạn rút ra từ ví dụ này rằng đôi khi cùng một từ tiếng Anh, hoặc thậm chí toàn bộ câu, được hiển thị trong các ngữ cảnh khác nhau trong giao diện người dùng.

Trong những trường hợp này, hãy đảm bảo sử dụng hai chuỗi khác nhau trong mã của bạn.

Thời tiết không chỉ là về ứng dụng.

Nó cũng được tích hợp tốt vào hệ thống.

Ở đây, chúng tôi thấy hoạt động của người dùng, đề xuất mở ứng dụng để kiểm tra thời tiết tại vị trí hiện tại.

Chúng ta hãy xem điều đó có thể được thực hiện như thế nào.

Chuỗi có thể được khai báo và tải như thế này, sử dụng Nội suy chuỗi để chèn bất kỳ tên vị trí nào.

Và cái tên này có thể là một thành phố hoặc một thuật ngữ cho vị trí hiện tại.

Kết quả hoạt động tốt bằng tiếng Anh: "Hiển thị thời tiết ở Cupertino" và "Hiển thị thời tiết ở vị trí của tôi," tương ứng.

Tuy nhiên, trong các ngôn ngữ khác, chúng ta có thể gặp phải các vấn đề về ngữ pháp.

Ví dụ, trong tiếng Đức, giới từ hoạt động cho một tên thành phố, nhưng sai khi chèn một thuật ngữ cho vị trí hiện tại.

Thay vào đó chúng ta cần có một bản dịch khác.

Giải pháp ở đây rất đơn giản: chỉ cần sử dụng hai chuỗi khác nhau.

Chèn tên thành phố là tốt trong tên đầu tiên và đối với vị trí hiện tại, chúng tôi sử dụng một chuỗi khác.

Điều này đảm bảo rằng các dịch giả có thể sử dụng ngữ pháp chính xác cho ngôn ngữ của họ.

Và nó hoạt động tốt trong tiếng Anh và tiếng Đức.

Tôi đã làm ví dụ này để cho bạn thấy rằng việc chèn một biến có tác động đến toàn bộ câu.

Nối các chuỗi có thể gây ra những hậu quả đáng ngạc nhiên trong các ngôn ngữ khác: chúng có thể cần phải thay đổi ngữ pháp hoặc có thể gặp rắc rối với việc viết hoa, nhưng biết điều đó trước khi viết mã rất khó.

Có những người nói ngôn ngữ kiểm tra ứng dụng là một phần quan trọng của quy trình làm việc.

Hãy ghi nhớ điều đó khi bạn muốn xây dựng một chuỗi theo chương trình.

Bây giờ chúng ta đã chia sẻ sự hiểu biết tốt về cách các chuỗi được khai báo trong mã, hãy nói về nhận xét của chúng.

Đây là chuỗi từ ví dụ trước của chúng tôi một lần nữa, với một nhận xét thích hợp.

Một bình luận thực sự, thực sự quan trọng đối với các dịch giả.

Bạn nên đảm bảo cung cấp cho họ ngữ cảnh mà họ cần dịch nó, giữ nguyên ý định như bạn đã có khi khai báo chuỗi.

Một nhận xét tuyệt vời giải thích chuỗi được hiển thị trong phần tử giao diện nào, như nhãn hoặc nút.

Nó cũng giải thích ngữ cảnh của phần tử giao diện người dùng và nơi nó được hiển thị trên màn hình.

Đó có thể là tiêu đề phần, menu ngữ cảnh hoặc hoạt động của người dùng.

Nếu chuỗi chứa các biến, hãy đảm bảo giải thích giá trị của chúng trong thời gian chạy.

Điều này rất quan trọng để khớp ngữ pháp của câu, như chúng ta đã thấy trong ví dụ.

Hãy nhớ rằng người dịch có thể không nhìn thấy ứng dụng trong thời gian chạy khi dịch nội dung của bạn.

Nhưng với những mẹo này, bạn sẽ có thể tạo ra sự hiểu biết chung giữa khai báo và dịch một chuỗi và vai trò của nó trong ứng dụng của bạn.

Bây giờ, nó có thể chưa bao giờ xảy ra với bạn, nhưng ứng dụng Thời tiết không thực sự kiểm soát thời tiết.

Thay vào đó, dữ liệu được tải xuống từ một máy chủ.

Nó có thể được đặt ở bất cứ đâu trên thế giới và thậm chí nó có thể không biết nên gửi nội dung bằng ngôn ngữ nào.

Khi nội dung được tải xuống thiết bị của người dùng, nó phải luôn được trình bày bằng ngôn ngữ mà người dùng thích.

Chỉ có một số phần của ứng dụng được bản địa hóa có thể rất khó hiểu.

Tại đây, ứng dụng Thời tiết hiển thị cảnh báo thời tiết khắc nghiệt, đã được tải từ máy chủ.

Điều này có vẻ thực sự nghiêm trọng, và nếu nó không được dịch sang ngôn ngữ của tôi, tôi có thể gặp rắc rối sau này.

Hãy xem bạn có thể làm gì để đảm bảo rằng người dùng của bạn luôn có thể đọc nội dung từ xa.

Máy chủ của bạn có thể gửi danh sách các ngôn ngữ được hỗ trợ đến ứng dụng.

Đây phải là một loạt các ID ngôn ngữ và thiết bị có tất cả kiến thức về ngôn ngữ mà người dùng thích, vì vậy bạn không cần phải tự mình kiểm tra so sánh chúng.

Bạn có thể tận dụng Khung của Apple bằng cách gọi 'Bundle.preferredLocalizations'.

Và điều này sẽ làm nên trận đấu cho bạn.

Nó trả về một mảng các ngôn ngữ ứng cử viên, được sắp xếp theo mức độ gần gũi của chúng phù hợp với các lựa chọn ngôn ngữ của người dùng.

Và cái đầu tiên thường phù hợp nhất, vì vậy bạn sẽ sử dụng cái này.

Ngôn ngữ đó sau đó nên được sử dụng cho bất kỳ yêu cầu tiếp theo nào đến máy chủ.

Nó sử dụng nó để tạo phản hồi với nội dung bằng ngôn ngữ mà người dùng của bạn sẽ có thể hiểu được.

Với kỹ thuật này, bạn có thể tự tin rằng các chuỗi đến từ máy chủ đã sẵn sàng để cập nhật giao diện người dùng và hiển thị cảnh báo cho người dùng.

Vì vậy, để cứu người dùng của bạn khỏi cơn bão thất vọng khi hiển thị nội dung từ xa, hãy tải xuống các ngôn ngữ có sẵn, khớp với sở thích của người dùng và sử dụng kết quả cho bất kỳ yêu cầu nào tải nội dung hướng đến người dùng.

Nhưng hãy quay lại thời tiết đẹp hơn ngay bây giờ.

Dù mưa hay nắng, ứng dụng Thời tiết rất phong phú về dữ liệu và nhiều khía cạnh của nó chứa các con số và số lượng.

Hãy tập trung vào một trong số chúng.

Dưới "Lượng mưa" nó nói "0 mm trong 6 giờ qua." Giả sử rằng bạn muốn xây dựng một cái gì đó tương tự, nhưng đánh vần "một giờ" ở đây.

Đây là cách bạn có thể khai báo chuỗi trong mã.

Trong tiếng Anh, bạn sẽ cần sử dụng dạng số nhiều nếu số giờ lớn hơn một: một giờ, nhưng hai giờ.

Các quy tắc khi một biến thể khác nên được sử dụng thậm chí còn phức tạp hơn trong tiếng Ukraina.

Bạn không muốn triển khai logic đó trong mã của mình và đây là lý do tại sao bạn tận dụng các khuôn khổ của Apple.

Tất cả những gì bạn phải làm là khai báo chuỗi trong mã và cung cấp tệp stringsdict, mã hóa quy tắc số nhiều.

Một lựa chọn khác là sử dụng Thỏa thuận ngữ pháp tự động.

Bạn có thể tìm hiểu thêm về hai kỹ thuật này trong bài nói chuyện năm ngoái "Hợp lý hóa các chuỗi được bản địa hóa của bạn." Mặc dù nó dễ dàng, bạn không nên lúc nào cũng áp dụng quy tắc số nhiều cho tất cả các chuỗi của mình.

Ví dụ, nếu câu của bạn không tính bất cứ thứ gì và không bao gồm một số, bạn không nên sử dụng quy tắc số nhiều cho nó.

Ở đây, "Xóa thành phố này khỏi mục yêu thích của bạn" không cần vì không có số và điều tương tự cũng áp dụng cho nhiều thành phố.

Nhưng nếu chuỗi bao gồm một số, bạn nên cân nhắc việc có các biến thể cho số nhiều.

Chuỗi của ví dụ trước đã đếm lượng mưa sẽ rơi trong những giờ tới và chúng tôi vừa học được cách dễ dàng để làm cho nó thích nghi với những con số lớn hơn một.

Tuy nhiên, nếu có một đơn vị trong câu, như thời lượng, thời gian hoặc tỷ lệ phần trăm, bạn nên cân nhắc sử dụng trình định dạng.

Vậy hãy nói về những người định dạng ngay bây giờ.

Thời tiết hiển thị độ ẩm hiện tại tính bằng phần trăm trong chế độ xem này.

Để làm điều này trong SwiftUI, nó chỉ là vấn đề của một dòng mã duy nhất.

Bạn chỉ cần gói giá trị của mình trong Text() và chỉ định cách bạn muốn số của mình được định dạng.

Và mã Swift tương đương cũng đơn giản.

Bạn chỉ cần gọi .định dạng trên giá trị của bạn.

Đó thực sự là tất cả những gì bạn cần làm, và Formatter lo mọi thứ khác.

Nó không chỉ đặt dấu phần trăm trước hoặc sau số và thêm khoảng trắng, nó còn phù hợp với hệ thống đánh số ưa thích của người dùng và đó là điều mà người dùng Ả Rập và Hindi mong đợi.

Nhưng đó thực sự chỉ là khởi đầu của loại dữ liệu bạn có thể định dạng.

Có các trình định dạng cho hầu hết mọi thứ và tôi khuyến khích bạn tóm tắt lại phiên: "Định dạng: Làm cho dữ liệu thân thiện với con người." Như chúng ta đã thấy, thời tiết không phải lúc nào cũng nắng, và một số ngày sẽ có mưa.

Tất nhiên, điểm nổi bật này không thể thiếu trong ứng dụng Thời tiết.

Dưới "Rainfall", nó nói, "50 mm dự kiến trong 24 giờ tới," và tôi thực sự vui vì nó không nhiều như vậy ở nơi tôi đang ở ngay bây giờ.

Trong tiếng Anh, trường hợp này rất đơn giản.

Chúng tôi nói "50 mm dự kiến trong 24 giờ tới." Tuy nhiên, trong tiếng Tây Ban Nha, vấn đề phức tạp hơn.

Chúng ta cần thay đổi bản dịch khi lượng mưa là số ít hoặc số nhiều.

Chúng ta có thể giải quyết vấn đề này bằng cách kết hợp cả quy tắc Formatter và quy tắc số nhiều.

Chuỗi "2 mm" được tạo ra bởi một Formatter, và nó được nhúng trong một câu cần được thay đổi cho số nhiều trong tiếng Tây Ban Nha.

Được rồi, chúng ta hãy xem cách thực hiện điều này trong mã.

Chúng tôi bắt đầu bằng cách khai báo một hàm nhận một tham số về lượng mưa sẽ tính bằng milimét.

Có lẽ nó đã được tải xuống từ một máy chủ.

Đầu tiên, chúng tôi yêu cầu hệ thống cung cấp UnitLength, mã hóa cấu hình của người dùng và nó sẽ chọn đúng cho trường hợp hiển thị lượng mưa của chúng tôi.

Nếu người dùng chưa định cấu hình hệ thống của họ để sử dụng các số liệu, loại Đo lường có thể dễ dàng chuyển đổi thành đơn vị ưa thích.

Tiếp theo, API định dạng cho phép chúng tôi tạo ra một chuỗi được định dạng cho giá trị trong một dòng mã duy nhất.

Đơn vị ưa thích đã có thông tin mà chúng tôi muốn hiển thị lượng mưa.

Vì vậy, khi định dạng, chúng tôi đặt cách sử dụng thành asProvided.

Nếu mưa rơi hơn 1 milimet hoặc inch, chúng tôi muốn sử dụng trường hợp số nhiều.

Chúng tôi chuyển đổi giá trị thành một số nguyên để chúng tôi có thể kiểm tra điều đó.

Tiếp theo, chúng tôi tải một Chuỗi được bản địa hóa với một khóa nhất định và chúng tôi cũng cung cấp một giá trị mặc định.

Ở đó, chúng tôi sử dụng Nội suy Chuỗi để bao gồm Giá trị số nguyên, Giá trị được định dạng và số 24.

Con số được xác định trong mã ở đây, bởi vì nó sẽ luôn là 24 giờ.

Sử dụng String Interpolation tự động đảm bảo rằng hệ thống đánh số chính xác được sử dụng.

Khóa được khai báo trong một tệp stringsdict.

Hãy cùng xem cái đó.

Stringsdict bắt đầu bằng khóa mà chúng tôi vừa sử dụng trong mã của mình.

Trong tiếng Anh, chúng tôi không cần thay đổi chuỗi cho số nhiều, vì vậy chúng tôi sử dụng danh mục "Khác" cho nó.

Tham số đầu tiên xác định danh mục nào được chọn trong thời gian chạy.

Hãy nhớ rằng, đó là giá trị nguyên.

Tham số số hai và ba có mặt trong chuỗi được định dạng.

Điều này xác định câu sẽ trông như thế nào trong thời gian chạy.

Stringsdict tiếng Tây Ban Nha có cùng cấu trúc, ngoại trừ việc chúng tôi cung cấp bản dịch ở cả số ít và số nhiều.

Bây giờ chúng tôi đã định dạng dữ liệu trong mã và đặt nó trong một câu.

Một tệp stringsdict chứa quy tắc số nhiều, do đó bản dịch tiếng Tây Ban Nha đang sử dụng đúng ngữ pháp.

Đôi khi thật khó để cung cấp một giao diện người dùng được bản địa hóa hoàn toàn hoạt động tốt cho tất cả các ngôn ngữ.

Một lần nữa, bạn đã học được rằng các chuỗi nối có thể hoạt động đối với tiếng Anh nhưng có thể gây ra những hậu quả đáng ngạc nhiên trong các ngôn ngữ khác.

Điều này có thể yêu cầu một số mã toàn diện để thực hiện, nhưng bây giờ bạn đã biết cách bạn có thể làm cho nó phù hợp với tất cả người dùng của mình.

Đôi khi các chuỗi của bạn nằm trong một phụ thuộc hoặc trong một mô-đun mà ứng dụng của bạn sử dụng.

Hoặc có thể bạn cũng phân phối mã của riêng mình cho các nhà phát triển khác, bằng cách sử dụng Gói Swift.

Chúng ta hãy xem có gì mới cho bản địa hóa.

Để xác định một Gói Swift, bạn khai báo cấu trúc và xây dựng cấu hình bằng cách sử dụng chính Swift.

Nếu bạn có nội dung hướng đến người dùng, bạn có thể sử dụng tham số defaultLocalization để tuyên bố rằng nội dung đang sử dụng tiếng Anh làm ngôn ngữ chính.

Điều đó tương tự như việc chỉ định ngôn ngữ phát triển của một dự án ứng dụng.

Xcode hiện đọc tham số đó và nhận ra rằng bạn quan tâm đến việc cung cấp trải nghiệm bản địa hóa.

Do đó, nó sẽ thêm tùy chọn Xuất bản địa hóa vào menu Sản phẩm.

Bạn có thể đã quen với việc sử dụng tính năng này cho ứng dụng chính của mình và bây giờ nó cũng hoạt động cho Swift Packages.

Nếu bạn nhấp vào "Xuất", Xcode sẽ đọc mã của bạn và trích xuất tất cả các chuỗi của bạn.

Chúng được đặt trong các tệp .xcloc, mà bạn gửi cho người dịch.

Và để nhập nội dung được bản địa hóa của bạn trở lại gói của bạn, hãy sử dụng Bản địa hóa Nhập khẩu và Xcode sẽ đặt các tệp ở đường dẫn tệp chính xác trong gói của bạn.

Quy trình làm việc của việc bản địa hóa Gói Swift hiện giống hệt với việc bản địa hóa ứng dụng của bạn.

Nhưng hãy nhớ rằng, việc tải một chuỗi trong Gói Swift yêu cầu bạn chỉ định đối số 'gói'.

Bạn có thể tìm hiểu thêm về điều đó trong bài nói chuyện "Gói Swift: tài nguyên và bản địa hóa." Nếu bạn là tác giả của một thư viện được phân phối dưới dạng Gói Swift, bây giờ bạn có một cách dễ dàng để cập nhật dự án của mình và biến bản địa hóa thành một phần thường xuyên trong quy trình làm việc của bạn.

Bạn đã nỗ lực và quan tâm rất nhiều vào dự án của mình và việc bản địa hóa nó là một công việc tiết kiệm rất nhiều thời gian cho tất cả khách hàng của bạn.

Nó thực sự có thể làm cho nó nổi bật.

Làm cho mọi người biết rằng bạn đang đi xa hơn để cung cấp trải nghiệm tốt nhất với phần mềm của mình, vì vậy hãy tiếp tục và nói với họ!

Hãy cởi mở về những ngôn ngữ mà bạn hỗ trợ ngay lập tức.

Là một nhà phát triển ứng dụng, bạn đặt những cân nhắc đặc biệt vào các phụ thuộc của mình, không chỉ từ góc độ chất lượng mã.

Các thành phần mà bạn sử dụng nên hỗ trợ các ngôn ngữ giống nhau và bản dịch chất lượng cao như phần còn lại của ứng dụng của bạn.

Trong trường hợp mã của bên thứ ba không được bản địa hóa theo ngôn ngữ yêu cầu của bạn, bạn vẫn có thể tạo một bản sao cục bộ của gói và cập nhật các bản địa hóa ở đó.

Đảm bảo kiểm tra tất cả các phần của ứng dụng của bạn bằng các ngôn ngữ mà nó hỗ trợ.

Bằng cách này, bạn có thể đảm bảo rằng sẽ không có yếu tố giao diện người dùng nào không phù hợp với ngôn ngữ của người dùng.

Hầu hết thời gian một chuỗi dịch dài hơn hoặc ngắn hơn chuỗi tương đương tiếng Anh và điều đó luôn ảnh hưởng đến bố cục ứng dụng của bạn.

Hãy xem điều này có ý nghĩa gì đối với ứng dụng Thời tiết.

Đây là ứng dụng chạy bằng tiếng Anh, và ở phía bên phải bạn có thể thấy nó chạy bằng tiếng Ả Rập.

Rõ ràng là không chỉ các bản dịch được điều chỉnh cho phù hợp với ngôn ngữ, mà bố cục cũng tuân theo định hướng thích hợp.

Nếu bạn muốn tìm hiểu thêm về cách tạo bố cục phù hợp với tất cả các ngôn ngữ, loại ký hiệu nào cung cấp giải pháp thay thế được bản địa hóa và những điều khác cần xem xét cho các ngôn ngữ từ phải sang trái, hãy đảm bảo xem bài nói chuyện "Đưa nó sang phải... sang trái." Ở đây, ứng dụng đang chạy bằng tiếng Hindi ở phía bên phải.

Hãy phóng to.

Chữ viết của ngôn ngữ đó nói chung có xu hướng cao hơn.

Và nếu bạn nhìn kỹ, bạn sẽ thấy rằng chiều cao của nhãn được điều chỉnh để phù hợp với điều đó.

Hệ thống thực hiện việc này một cách tự động.

Tất cả những gì bạn phải làm là đảm bảo rằng bạn không cung cấp cho các phần tử giao diện người dùng một chiều cao cố định.

Đừng cho rằng mọi thứ sẽ vừa trong vòng 44 điểm chỉ vì nó đủ cao để vừa với dây tiếng Anh.

Vui lòng luôn mong đợi văn bản của bạn cao hơn tùy theo hoàn cảnh.

Quay trở lại chế độ xem chính và cuộn nó lên, Thời tiết có chế độ xem dự báo 10 ngày, điều này rất tuyệt để kiểm tra vào tuần tới.

Điều nổi bật trên màn hình này là cách nó tự động điều chỉnh vị trí của các phần tử theo nhãn dài nhất.

Trong tiếng Anh, "Hôm nay" dài hơn tất cả các tên viết tắt của các ngày trong tuần.

Tuy nhiên, trong tiếng Tây Ban Nha, tất cả chúng đều rộng ba ký tự và trong tiếng Hy Lạp, bản dịch cho "Today" có kích thước gần gấp đôi.

Tuy nhiên, trong tất cả các ngôn ngữ, các biểu tượng thời tiết được căn chỉnh theo chiều dọc với nhau.

Có nghĩa là chúng không có khoảng cách cố định cho các phần tử lân cận của chúng, nhưng chảy theo nhãn các ngày trong tuần dài nhất.

Khi nói đến việc tạo ra một bố cục phù hợp với quốc tế hóa, bạn nên luôn nhớ rằng các nhãn cần phải linh hoạt.

Bạn vừa thấy tầm quan trọng của việc làm cho chúng linh hoạt theo chiều dọc, nhưng cũng mong đợi các nhãn phát triển theo chiều ngang với bản dịch dài hơn.

Có thể là một thách thức để phù hợp với điều đó trong một số bố cục nhất định, chẳng hạn như trong ví dụ này, nhưng năm nay, SwiftUI bổ sung hỗ trợ cho Grid, đây là một chế độ xem mới giúp bạn xây dựng loại bố cục này dễ dàng hơn.

Chúng ta hãy xem xét kỹ hơn cách sử dụng Grid.

Bạn bắt đầu bằng cách khai báo Lưới với một căn chỉnh hàng đầu.

Điều đó có nghĩa là các phần tử giao diện người dùng bắt đầu ở phía bên trái của màn hình bằng ngôn ngữ từ trái sang phải và ở phía bên phải của màn hình bằng ngôn ngữ từ phải sang trái.

Sau đó, đối với mỗi nhóm nằm ngang, bạn thêm một GridRow.

Và cuối cùng bạn khai báo nội dung của các hàng.

Đó là tất cả những gì cần thiết để tạo ra bố cục khá nâng cao này.

Khi nhãn cần nhiều không gian hơn, Viên nang có thể thu nhỏ kích thước vì nó là yếu tố linh hoạt nhất.

SwiftUI thực hiện tất cả các công việc nặng nhọc, chẳng hạn như đo lường, định cỡ và định vị chế độ xem - hoàn toàn tự động.

Một thách thức khác là tạo ra chế độ xem với công việc dịch thuật dài hơn với dung lượng hạn chế, như trên Apple Watch.

Ở đây, bản dịch tiếng Đức của "Tip Function" quá dài để nằm gọn trong một hàng.

Để khắc phục điều này, chúng tôi không xóa biểu tượng bên cạnh văn bản để tạo thêm chỗ.

Giải pháp là sử dụng hai hoặc nhiều dòng văn bản nếu cần, đó là hành vi mặc định.

Chúng tôi không khuyến khích bạn thay đổi điều đó và ẩn các yếu tố giao diện nếu không có đủ dung lượng.

Thông thường có một cách để điều chỉnh bố cục, để nó có thể đáp ứng nhu cầu của ngôn ngữ.

Ứng dụng Mail thực hiện điều này một cách sáng tạo.

Trong bản trình bày trang tính, có bốn nút để thực hiện hành động trên email này.

Khi bản dịch của một trong các tiêu đề nút quá dài, chúng tôi không cắt văn bản hoặc bọc nó vào một dòng mới.

Điều này sẽ làm cho tầm nhìn trông mất cân bằng.

Thay vào đó, toàn bộ bố cục được chuyển từ ngăn xếp ngang sang ngăn xếp dọc gồm hai hàng.

Năm nay, SwiftUI bổ sung thêm một công cụ tuyệt vời khác giúp tạo bố cục động này dễ dàng hơn: ViewThatFits.

Về bản chất, nó cho phép bạn cung cấp các bố cục thay thế nếu không gian bị hạn chế và chế độ xem không phù hợp.

Bạn chỉ cần tuyên bố quan điểm của mình một cách độc lập với nhau và đặt chúng vào ViewThatFits.

SwiftUI tự động phát hiện nếu một chế độ xem không vừa mà không bị cắt và chuyển sang chế độ xem tiếp theo được cung cấp.

Hãy nhớ rằng bạn chỉ nên chuyển đổi bố cục.

Ẩn một góc nhìn chỉ vì bản dịch quá dài là một thực hành tồi.

Điều đó khiến người dùng khó định hướng bản thân trong giao diện người dùng hơn.

Cố gắng nhường chỗ cho tất cả các yếu tố giao diện trước bằng cách có bố cục linh hoạt.

Điều này không chỉ hữu ích cho việc bản địa hóa.

Bố cục này cũng hoạt động tốt khi người dùng thích có văn bản nhỏ hơn hoặc lớn hơn và sử dụng các thiết bị khác nhau.

Để tìm hiểu thêm về các tính năng bố cục mới tuyệt vời của SwiftUI trong năm nay, tôi khuyên bạn nên xem bài nói chuyện "Sán bố cục tùy chỉnh với SwiftUI." Có các tùy chọn khả năng truy cập khác nhau và văn bản bản địa hóa có thể là một thách thức đối với bố cục của bạn.

Các yếu tố giao diện có thể cao hơn và rộng hơn.

Điều chỉnh bố cục để phù hợp với điều đó có thể là một thách thức, nhưng với SwiftUI, nó sẽ trở nên dễ dàng hơn rất nhiều trong năm nay.

Tôi muốn bạn rút ra từ cuộc nói chuyện này rằng việc xây dựng một chuỗi trong mã có thể là một thách thức khi hỗ trợ các ngôn ngữ khác.

Lắng nghe phản hồi mà người dùng và người thử nghiệm quốc tế của bạn cung cấp cho bạn để đảm bảo nó hoạt động tốt cho mọi người.

Định dạng các giá trị trong Swift rất dễ dàng và nó thường chỉ mất một dòng mã duy nhất.

Và làm điều đó, các giá trị được định dạng của bạn tự động tôn trọng sở thích của người dùng.

Khi bạn đang cung cấp Gói Swift, hãy sử dụng quy trình bản địa hóa Xcode mới để cung cấp trải nghiệm được bản địa hóa hoàn toàn cho khách hàng của bạn.

Bây giờ, có hoặc không sử dụng SwiftUI, bố cục của bạn sẽ có thể phù hợp với văn bản đã dịch và cài đặt khả năng truy cập.

Sử dụng các công cụ bố cục của bạn để làm cho bố cục linh hoạt, mà không che giấu các yếu tố giao diện.

Cuối cùng, người dùng của bạn sẽ biết ơn vì điều đó bởi vì họ mong đợi ứng dụng của bạn phù hợp với cuộc sống của họ và điều đó bao gồm cả việc tôn trọng ngôn ngữ của họ.

Bây giờ, tôi đang mong chờ một tuần rất nắng.

Tận hưởng phần còn lại của WWDC, và cảm ơn bạn đã xem.