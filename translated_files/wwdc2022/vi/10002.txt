10002

Benjamin Poulain: Xin chào mọi người, và chào mừng đến với phiên của chúng tôi về ảo hóa.

Đây là những gì chúng ta sẽ làm cùng nhau hôm nay.

Chúng tôi sẽ xem cách bạn có thể chạy macOS và Linux bên trong các máy ảo, trên Apple silicon.

Vào cuối phiên này, bạn sẽ có thể làm điều tương tự trên máy Mac của riêng mình.

Điều này có vẻ hơi tham vọng, nhưng hãy gắn bó với chúng tôi, và chúng tôi sẽ làm điều đó cùng nhau.

Đây là chương trình nghị sự của chúng tôi cho ngày hôm nay.

Chúng ta sẽ bắt đầu với một cái nhìn tổng quan về các công nghệ ảo hóa, và chúng ta sẽ xem cách sử dụng khung Ảo hóa để xây dựng các máy ảo.

Sau đó chúng ta sẽ đi sâu vào macOS.

Chúng ta sẽ xem cách chúng ta có thể thiết lập một máy Mac ảo và cài đặt macOS vào đó.

Và cuối cùng, chúng ta sẽ đi sâu lần thứ hai, lần này là vào Linux.

Chúng ta sẽ xem cách chạy các bản phân phối Linux đầy đủ và một số tính năng mới thú vị.

Hãy bắt đầu với cái nhìn tổng quan.

Đầu tiên chúng ta sẽ xem xét ngăn xếp cho phép ảo hóa.

Tất cả bắt đầu với phần cứng.

Apple silicon có phần cứng đặc biệt cho phép ảo hóa CPU và bộ nhớ.

Điều này có nghĩa là bạn có thể chạy nhiều hệ điều hành trên một SoC duy nhất.

Tiếp theo, chúng ta cần phần mềm để tận dụng phần cứng này.

Và cái này được tích hợp ngay vào nhân macOS.

Bạn không còn cần phải viết phần mở rộng hạt nhân, hoặc KEXT nữa.

Tất cả đều được tích hợp sẵn.

Để sử dụng những khả năng đó từ ứng dụng của bạn, bạn có thể sử dụng khung Hypervisor.

Khung Hypervisor là một API cấp thấp cho phép bạn ảo hóa CPU và bộ nhớ.

Nhưng, bởi vì nó là một khuôn khổ cấp thấp, bạn cần viết từng chi tiết của môi trường ảo.

Thông thường, chúng tôi muốn chạy các hệ điều hành đầy đủ.

Đối với điều này, có một API cấp cao hơn, đó là khung Ảo hóa.

Khung ảo hóa cho phép tạo ra các máy ảo chạy macOS trên Apple silicon hoặc Linux trên cả Apple silicon và Intel.

Hôm nay, phiên của chúng tôi sẽ tập trung vào khuôn khổ Ảo hóa.

Khi sử dụng khung Ảo hóa, chúng ta sẽ xử lý hai loại đối tượng.

Loại đầu tiên là các đối tượng cấu hình.

Họ xác định tất cả các thuộc tính của máy ảo của chúng tôi.

Loại thứ hai là các đối tượng máy ảo.

Những đối tượng đó trừu tượng hóa các máy ảo và cách tương tác với chúng.

Chúng ta sẽ bắt đầu với việc xem xét cấu hình.

Cấu hình xác định phần cứng.

Tạo một cấu hình giống như cấu hình một máy Mac trên Apple Store.

Chúng tôi xác định chúng tôi muốn bao nhiêu CPU, bao nhiêu bộ nhớ, loại thiết bị nào.

Chúng ta có thể bắt đầu từ một cấu hình đơn giản.

Chúng ta có thể thêm một màn hình, và chúng ta có thể xem nội dung.

Chúng ta có thể thêm một bàn phím, và chúng ta có thể gõ.

Chúng ta có thể thêm một bàn di chuột, và chúng ta có thể tương tác với giao diện người dùng.

Cấu hình một máy ảo là như vậy.

Nhưng vì chúng tôi đang xử lý các máy ảo, chúng tôi sẽ làm điều này bằng mã.

Hãy xem cách chúng ta có thể viết cấu hình bằng Swift.

Xác định phần cứng rất đơn giản.

Chúng tôi bắt đầu với một đối tượng thuộc loại VZVirtualMachineConfiguration.

Đây là đối tượng gốc của tất cả các cấu hình.

Tiếp theo, chúng tôi xác định máy của chúng tôi nên có bao nhiêu CPU.

Ở đây chúng tôi cung cấp bốn CPU.

Sau đó, chúng tôi đặt bao nhiêu bộ nhớ chúng tôi muốn.

Trong trường hợp này, chúng tôi cung cấp bốn gigabyte bộ nhớ.

Cuối cùng, chúng tôi xác định các thiết bị mà máy của chúng tôi sẽ có.

Trong ví dụ này, chúng tôi đặt một thiết bị lưu trữ duy nhất, đĩa để khởi động và một thiết bị trỏ, giống như một con chuột.

Có rất nhiều thiết bị có sẵn.

Những cái bạn thiết lập phụ thuộc vào vấn đề bạn muốn giải quyết.

Bây giờ chúng ta đã thấy cấu hình.

Nó bắt đầu với VZVirtualMachineConfiguration, trên đó chúng tôi thêm CPU, bộ nhớ và các thiết bị.

Tiếp theo, chúng ta sẽ xem xét các đối tượng máy ảo.

Sau khi chúng tôi đã cấu hình máy Mac của mình, chúng tôi nhận được nó qua thư.

Đã đến lúc mở hộp và bắt đầu nó.

Nhưng vì chúng ta đang xử lý máy ảo, chúng ta cần phải làm điều đó bằng mã.

Hãy xem cách chúng ta có thể làm điều đó trong Swift.

Đầu tiên, chúng tôi sẽ tạo một phiên bản của VZVirtualMachine từ cấu hình của chúng tôi.

VZVirtualMachine tóm tắt một ví dụ của phần cứng ảo.

Bây giờ chúng ta đã có máy ảo, chúng ta có thể vận hành nó.

Ví dụ, trong trường hợp này, chúng tôi gọi start() để bắt đầu nó.

Chúng ta thường sẽ muốn tương tác với các máy ảo của mình.

Đối với điều này, chúng tôi có các đối tượng khác để giúp chúng tôi.

Ví dụ, nếu chúng tôi muốn hiển thị màn hình ảo của mình, chúng tôi có thể sử dụng một đối tượng thuộc loại VZVirtualMachineView.

Chúng tôi bắt đầu bằng cách tạo ra một chế độ xem.

Sau đó, chúng tôi đặt máy ảo của mình làm thuộc tính Máy ảo trên chế độ xem và nó đã sẵn sàng.

Bây giờ chúng ta có thể sử dụng đối tượng VZVirtualMachineView này giống như bất kỳ NSView nào.

Chúng tôi có thể tích hợp nó vào ứng dụng của mình để xem nội dung của máy ảo.

Để kết thúc, chúng tôi đã thấy cấu hình.

Cấu hình bắt đầu với VZVirtualMachineConfiguration, từ đó chúng tôi xác định CPU, bộ nhớ và thiết bị của mình.

Từ cấu hình, chúng tôi sẽ tạo ra một máy ảo và chúng tôi sẽ sử dụng các đối tượng máy ảo.

Chúng tôi đã thấy VZVirtualMachine trừu tượng hóa chính VM, VZVirtualMachineView để hiển thị nội dung và có những đối tượng khác có thể giúp chúng tôi sử dụng VM.

Chúng tôi đã thấy rằng cấu hình mang lại rất nhiều sự linh hoạt trong cách chúng tôi xác định các máy ảo.

Thật không may, có quá nhiều tính năng để đề cập trong một phiên.

Trong phiên này, chúng ta sẽ xem xét một số khả năng cốt lõi.

Đối với mọi thứ khác, chúng tôi có tài liệu và tôi mời bạn kiểm tra nó.

Trong tổng quan, chúng ta vừa thấy cách xây dựng máy ảo.

Bây giờ là lúc để xem xét cách chúng ta có thể chạy một hệ điều hành đầy đủ trong đó.

Và chúng ta sẽ bắt đầu với macOS.

Khung ảo hóa hỗ trợ macOS trên Apple silicon.

Khi chúng tôi xây dựng khung Ảo hóa trên Apple silicon, chúng tôi đã cùng nhau phát triển khung macOS và Ảo hóa.

Điều này mang lại cho chúng ta hiệu quả đáng kinh ngạc khi chạy macOS bên trong các máy ảo.

Đây là những gì chúng ta sẽ thấy: Đầu tiên, chúng ta sẽ xem xét những gì chúng ta cần để biến một máy ảo thành một máy Mac ảo.

Sau đó, chúng tôi sẽ xem xét các bước để cài đặt macOS trên máy Mac ảo của chúng tôi.

Tiếp theo, chúng ta sẽ xem một số thiết bị đặc biệt mà chúng ta có cho macOS.

Và cuối cùng, chúng ta sẽ xem xét một trường hợp sử dụng rất quan trọng, đó là chia sẻ tệp giữa hệ thống máy chủ và máy Mac ảo.

Hãy bắt đầu với cấu hình.

Chúng ta đã thấy trước đây cách xây dựng một máy ảo chung chung.

Bây giờ chúng tôi muốn thêm các thuộc tính đặc biệt sẽ biến máy ảo thành máy Mac.

Vậy làm thế nào để chúng ta tạo ra một máy Mac ảo?

Đầu tiên, chúng tôi sẽ xác định một nền tảng đặc biệt.

Nền tảng là một đối tượng chứa tất cả các thuộc tính của một loại máy ảo cụ thể.

Có ba thuộc tính duy nhất cho phần cứng Mac ảo.

Đầu tiên, chúng tôi có mô hình phần cứng.

Mô hình phần cứng chỉ định phiên bản Mac ảo mà chúng tôi muốn.

Thứ hai, có kho lưu trữ phụ trợ.

Bộ lưu trữ phụ trợ là một dạng bộ nhớ không bay hơi được hệ thống sử dụng.

Và thứ ba, có mã định danh máy.

Mã định danh máy là một số duy nhất đại diện cho máy, giống như máy Mac vật lý có số sê-ri duy nhất.

Khi chúng tôi có nền tảng, chúng tôi có tất cả các phần để mô tả phần cứng, nhưng chúng tôi cần thêm một phần nữa, đó là một cách để khởi động macOS.

Đối với điều này, chúng tôi sẽ sử dụng một trình tải khởi động đặc biệt, trình tải khởi động macOS.

Hãy xem cách thực hiện tất cả những điều này trong Swift.

Chúng tôi bắt đầu từ cùng một cơ sở như trước đây.

Mã này là những gì chúng ta đã thấy trong tổng quan.

Sau đó chúng tôi tạo ra một Cấu hình Nền tảng VZMac.

Đây là đối tượng nền tảng của chúng tôi dành cho máy Mac ảo.

Chúng tôi cần một mô hình phần cứng cho máy Mac này.

Ở đây chúng tôi sử dụng một cái mà chúng tôi đã lưu trước đó.

Trong các máy ảo, bộ lưu trữ phụ trợ được hỗ trợ bởi một tệp trên hệ thống tệp cục bộ.

Ở đây, chúng tôi khởi tạo bộ nhớ phụ trợ của mình từ URL tệp.

Đối với mã định danh duy nhất, chúng tôi khởi tạo VZMacMacMacIdentifier từ mã định danh mà chúng tôi đã lưu trước đó.

Đối với một cài đặt mới, chúng tôi cũng có thể tạo một mã định danh mới.

Chúng tôi đã thiết lập cả ba thuộc tính. Nền tảng của chúng tôi đã sẵn sàng.

Tất cả những gì chúng ta phải làm là đặt nó trên đối tượng cấu hình.

Điều này cho chúng ta phần cứng. Tiếp theo chúng ta cần một cách để khởi động nó.

Để làm điều đó, chúng tôi đã thiết lập trình tải khởi động với VZMacBootLoader.

Bây giờ máy của chúng tôi đã sẵn sàng để khởi động.

Những gì chúng tôi đã làm cho đến nay là xác định máy Mac ảo và cách khởi động nó.

Nhưng chúng tôi vẫn cần cài đặt phần mềm trên đó, điều này đưa chúng tôi đến cài đặt.

Cài đặt macOS được thực hiện trong ba bước.

Đầu tiên, chúng ta cần tải xuống hình ảnh khôi phục với phiên bản macOS mà chúng ta muốn cài đặt.

Sau đó, chúng ta cần tạo một cấu hình tương thích với phiên bản macOS đó.

Và cuối cùng, chúng tôi sẽ cài đặt hình ảnh khôi phục của mình trong máy ảo tương thích.

Vì vậy, trước tiên, chúng ta cần tải xuống một hình ảnh khôi phục.

Bạn có thể tải xuống hình ảnh khôi phục từ trang web của nhà phát triển, nhưng Ảo hóa cũng có thể giúp chúng tôi.

Bạn có thể gọi VZMacOSRestoreImage.latestSupported để lấy đối tượng khôi phục hình ảnh cho phiên bản ổn định mới nhất của macOS.

Đối tượng này có thuộc tính URL mà chúng ta có thể sử dụng để tải xuống tệp.

Sau đó, chúng tôi muốn tạo một máy ảo tương thích với phiên bản macOS mà chúng tôi đã tải xuống.

Ảo hóa cũng có thể giúp chúng ta ở đây.

Chúng tôi có thể yêu cầu đối tượng khôi phục hình ảnh cho các yêu cầu cấu hình.

Nếu hình ảnh khôi phục có thể được chạy trên hệ thống hiện tại, chúng tôi sẽ nhận được một đối tượng liệt kê các yêu cầu.

Từ các yêu cầu, chúng tôi có thể có được mô hình phần cứng cần thiết để chạy phiên bản macOS này.

Trước đây chúng tôi đã thấy cách khôi phục mô hình phần cứng.

Đây là cách chúng tôi có được một cái mới.

Các yêu cầu cũng bao gồm hai thuộc tính hữu ích.

Đối tượng có thể cho chúng ta biết cần bao nhiêu CPU và bao nhiêu bộ nhớ để chạy phiên bản macOS này.

Cuối cùng, chúng tôi đã sẵn sàng để bắt đầu cài đặt.

Chúng tôi bắt đầu bằng cách tạo ra một máy ảo mới từ cấu hình của chúng tôi.

Sau đó chúng tôi tạo ra một trình cài đặt.

Trình cài đặt nhận hai đối số, máy ảo tương thích mà chúng tôi đã tạo và đường dẫn đến hình ảnh khôi phục mà chúng tôi đã tải xuống.

Bây giờ chúng ta chỉ có thể gọi install(), và voilà, chúng ta đã sẵn sàng để chạy macOS.

Bây giờ chúng ta có thể thiết lập một máy Mac ảo và cài đặt macOS, hãy xem một số thiết bị đặc biệt cho máy Mac.

Khả năng tuyệt vời đầu tiên là tăng tốc GPU.

Chúng tôi đã xây dựng một thiết bị đồ họa hiển thị các khả năng GPU cho máy Mac ảo.

Điều này có nghĩa là bạn có thể chạy Metal trong máy ảo và có được hiệu suất đồ họa tuyệt vời trong macOS.

Hãy xem cách thiết lập nó.

Chúng tôi bắt đầu bằng cách tạo ra cấu hình thiết bị đồ họa.

Ở đây, chúng tôi sẽ sử dụng VZMacGraphicsDeviceConfiguration.

Tiếp theo, chúng tôi muốn trưng bày nó.

Chúng tôi thiết lập màn hình bằng cách xác định kích thước và mật độ điểm ảnh của nó.

Bây giờ cấu hình thiết bị của chúng tôi đã sẵn sàng.

Như thường lệ, chúng tôi đặt nó trên đối tượng cấu hình chính.

Chúng tôi đặt nó làm thiết bị đồ họa cho máy ảo của mình.

Tiếp theo, chúng ta có một thiết bị mới để tương tác với Mac.

Trong macOS Ventura, chúng tôi đang thêm hỗ trợ bàn di chuột Mac vào máy Mac ảo.

Với bàn di chuột mới, có thể sử dụng các cử chỉ như xoay, chụm để phóng to, v.v.

Thiết bị mới này sử dụng trình điều khiển mới trong macOS.

Vì vậy, để sử dụng nó, bạn sẽ cần macOS 13 cả trên hệ thống máy chủ và trong máy ảo.

Hãy xem cách thiết lập nó.

Nó rất dễ dàng.

Chúng tôi tạo ra một đối tượng mới thuộc loại VZMacTrackpadConfiguration.

Sau đó chúng tôi đặt nó làm thiết bị trỏ trên máy ảo.

Bây giờ khi chúng ta sử dụng chế độ xem với máy Mac ảo của mình, chúng ta có thể sử dụng các cử chỉ.

Cuối cùng, hãy xem xét một trường hợp sử dụng phổ biến đối với nhiều người trong chúng ta, chia sẻ tệp giữa hệ thống máy chủ và máy ảo.

Trong macOS 12, chúng tôi đã giới thiệu thiết bị hệ thống tệp Virtio để chia sẻ tệp trên Linux.

Trong macOS Ventura, chúng tôi đang thêm hỗ trợ cho macOS.

Bây giờ bạn có thể chọn các thư mục mà bạn muốn chia sẻ với máy ảo.

Bất kỳ thay đổi nào bạn thực hiện từ hệ thống máy chủ đều được phản ánh ngay lập tức trong máy ảo và ngược lại.

Hãy xem cách thiết lập nó.

Đầu tiên, chúng tôi tạo một VZShareDirectory với một thư mục mà chúng tôi muốn chia sẻ.

Sau đó chúng tôi tạo ra một đối tượng chia sẻ.

Ở đây chúng tôi sẽ sử dụng VZSingleDirectoryShare để chia sẻ một thư mục duy nhất.

Bạn cũng có thể chia sẻ nhiều thư mục bằng cách sử dụng VZMultipleDirectoryShare.

Bây giờ chúng ta đã có phần, chúng ta cần tạo ra một thiết bị.

Nhưng chúng ta sẽ bắt đầu một cái gì đó đặc biệt.

Các thiết bị hệ thống tệp được xác định bằng một thẻ.

Trong macOS Ventura, chúng tôi đã thêm một thẻ đặc biệt để yêu cầu máy ảo tự động gắn thiết bị này.

Ở đây, chúng tôi lấy thẻ đặc biệt này, macOSGuestAutomountTag.

Sau đó chúng tôi tạo thiết bị và sử dụng thẻ đặc biệt của chúng tôi.

Chúng tôi đặt chia sẻ từ thư mục duy nhất mà chúng tôi đã định cấu hình.

Và cuối cùng, chúng tôi thêm thiết bị vào cấu hình như bình thường.

Cuối cùng, hãy cùng nhau xem xét mọi thứ trong một bản demo.

Chúng tôi bắt đầu từ một cấu hình cơ bản.

Chúng tôi có một VZVirtualMachineConfiguration chỉ với CPU, bộ nhớ, bàn phím và đĩa.

Chúng tôi muốn một máy Mac ảo.

Để làm điều đó, chúng ta cần bắt đầu bằng cách thiết lập nền tảng.

Chúng tôi sẽ sử dụng createMacPlatform được xác định ở trên để làm điều đó.

Phần thứ hai của máy Mac ảo là bộ nạp khởi động.

Chúng ta cần một trình tải khởi động biết cách khởi động macOS.

Để có được điều đó, chúng tôi đặt trình tải khởi động của nền tảng thành VZMacOSBootLoader().

Tiếp theo, chúng tôi muốn thiết lập các thiết bị.

Chúng tôi muốn đồ họa tăng tốc.

Để có được nó, chúng tôi sẽ thiết lập một VZMacGraphicsConfiguration.

Chúng tôi tạo đối tượng, xác định kích thước hiển thị và mật độ điểm ảnh, và chúng tôi thêm nó vào cấu hình.

Tiếp theo, chúng tôi muốn sử dụng bàn di chuột mới.

Tất cả những gì chúng ta cần làm là đặt thiết bị trỏ thành VZMacTrackpadConfiguration.

Thế là xong.

Bây giờ, chúng ta có thể khởi động VM, nhưng hãy thêm quả anh đào lên trên.

Chúng tôi đã thấy cách chúng tôi có thể chia sẻ thư mục.

Hãy làm điều đó ở đây.

Chúng tôi bắt đầu bằng cách tạo cấu hình thiết bị hệ thống tệp.

Ở đây, lưu ý rằng chúng tôi sử dụng thẻ đặc biệt để tự động gắn nó vào macOS.

Sau đó chúng tôi xác định phần của mình.

Ở đây chúng tôi sử dụng một thư mục duy nhất chia sẻ từ một đường dẫn trên hệ thống tệp.

Ở đây, chúng tôi sẽ chia sẻ dự án này mà chúng tôi đang chỉnh sửa ngay bây giờ.

Chúng tôi thêm thiết bị vào cấu hình của mình và chúng tôi đã hoàn tất.

Mọi thứ đã sẵn sàng. Chúng tôi khởi chạy ứng dụng của mình.

Vì chúng tôi đã cấu hình thiết bị đồ họa Mac, VZVirtualMachineView có thể hiển thị nội dung.

Đây là những gì bạn thấy ở đây trong cửa sổ.

Và nó đây rồi. Chúng tôi đã cấu hình macOS từ đầu.

Chúng ta có thể thấy thư mục được chia sẻ và dự án mà chúng ta đang chỉnh sửa ngay bây giờ.

Cuối cùng, chúng ta sẽ hướng mắt về Linux.

Khung ảo hóa đã hỗ trợ Linux ngay từ khi bắt đầu trong macOS Big Sur.

Trong macOS Ventura, chúng tôi đã thêm một số tính năng mới khá thú vị và chúng tôi muốn chia sẻ một số tính năng đó với bạn.

Đầu tiên, chúng ta sẽ xem cách chúng ta có thể cài đặt các bản phân phối Linux đầy đủ, hoàn toàn chưa được sửa đổi, trong các máy ảo.

Sau đó, chúng tôi sẽ xem xét một thiết bị mới mà chúng tôi đang thêm để hiển thị giao diện người dùng từ Linux.

Và cuối cùng, chúng ta sẽ xem xét cách chúng ta có thể tận dụng lợi thế của Rosetta 2 để chạy các tệp nhị phân Linux trong các máy ảo.

Hãy bắt đầu với việc cài đặt.

Nếu chúng tôi muốn cài đặt Linux trên một máy vật lý, chúng tôi sẽ bắt đầu bằng cách tải xuống tệp ISO với trình cài đặt.

Sau đó, chúng tôi sẽ xóa một ổ đĩa flash với ISO.

Và cuối cùng, chúng tôi sẽ cắm ổ đĩa vào máy tính và khởi động từ nó.

Khi xử lý các máy ảo, chúng ta sẽ trải qua cùng một quy trình.

Nhưng thay vì sử dụng ổ USB vật lý, chúng tôi sẽ sử dụng ổ đĩa ảo.

Hãy xem nó hoạt động như thế nào.

Chúng tôi bắt đầu bằng cách tạo một URL từ đường dẫn đến tệp ISO mà chúng tôi đã tải xuống.

Sau đó, chúng tôi tạo một tệp đính kèm hình ảnh đĩa từ tệp.

Tệp đính kèm hình ảnh đĩa đại diện cho một phần lưu trữ mà chúng ta có thể gắn vào thiết bị.

Tiếp theo, chúng tôi cấu hình một thiết bị lưu trữ ảo.

Trong trường hợp này, chúng tôi muốn lưu trữ USB, vì vậy chúng tôi sử dụng VZUSBMassStorageDeviceConfiguration.

Cuối cùng, như mọi khi, chúng tôi thêm thiết bị của mình vào cấu hình chính.

Ở đây, thiết bị USB xuất hiện bên cạnh một thiết bị lưu trữ khác, đĩa chính mà chúng tôi sẽ cài đặt Linux.

Bây giờ chúng ta có một ổ USB, nhưng chúng ta cần một cách để khởi động từ nó.

Trong macOS Ventura, chúng tôi đã thêm hỗ trợ cho EFI.

EFI là một tiêu chuẩn công nghiệp để khởi động cả phần cứng ARM và Intel.

Chúng tôi đang mang lại sự hỗ trợ tương tự cho các máy ảo.

EFI có một cơ chế khám phá khởi động.

Điều này sẽ cho phép là khám phá trình cài đặt trên ổ USB của chúng tôi.

EFI xem xét từng ổ đĩa để tìm một ổ đĩa có thể khởi động được.

Nó sẽ tìm thấy trình cài đặt và bắt đầu từ đó.

Bản thân trình cài đặt sẽ cho EFI biết ổ đĩa nào sẽ sử dụng tiếp theo.

Sau khi cài đặt, EFI có thể bắt đầu phân phối Linux.

Hãy xem cách thiết lập EFI trong mã.

Đầu tiên, chúng tôi tạo ra một trình tải khởi động loại VZEFIBootLoader.

EFI yêu cầu bộ nhớ không bay hơi để lưu trữ thông tin giữa các lần khởi động.

Đây được gọi là kho biến EFI.

Với các máy ảo, chúng ta có thể sao lưu trữ như vậy bằng một tệp trên hệ thống tệp.

Ở đây, chúng tôi tạo ra một cửa hàng biến đổi mới từ đầu.

Bây giờ EFI đã sẵn sàng.

Chúng ta chỉ cần đặt nó làm trình tải khởi động trên cấu hình.

Tiếp theo, chúng ta sẽ xem xét một khả năng mới cho Linux VMs, đồ họa.

Trong macOS Ventura, chúng tôi đã thêm hỗ trợ cho Virtio GPU 2D.

Virtio GPU 2D là một thiết bị ảo hóa cho phép Linux cung cấp các bề mặt cho máy chủ macOS.

Linux hiển thị nội dung, cung cấp khung kết xuất cho khung Ảo hóa, sau đó có thể hiển thị nó.

Bây giờ bạn có thể hiển thị nội dung này trong ứng dụng của mình với VZVirtualMachineView giống như trên macOS.

Hãy xem cách thiết lập nó.

Thiết lập thiết bị tương tự như những gì chúng tôi đã làm cho macOS.

Chúng tôi bắt đầu bằng cách tạo ra một VZVirtioGraphicsDeviceConfiguration.

Chúng ta cần xác định kích thước của màn hình ảo của mình.

Theo thuật ngữ Virtio, màn hình ảo là một "quét".

Vì vậy, chúng tôi tạo ra một bản quét với kích thước của màn hình.

Cuối cùng, chúng tôi đặt thiết bị mới làm thiết bị đồ họa trong cấu hình của chúng tôi.

Bây giờ máy ảo của chúng tôi đã sẵn sàng để hiển thị nội dung với VZVirtualMachineView.

Tiếp theo, hãy cùng nhau xem mọi thứ trong một bản demo.

Chúng tôi bắt đầu từ nơi chúng tôi đã dừng lại.

Hãy xóa mã dành riêng cho Mac.

Vậy thì hãy thay đổi đĩa mà chúng ta đang khởi động.

Chúng tôi sẽ hoán đổi đường dẫn từ ổ đĩa Mac sang ổ đĩa Linux của chúng tôi.

Tiếp theo, chúng ta cần một bộ nạp khởi động.

Chúng tôi thiết lập EFI với VZEFIBootLoader.

Đầu tiên chúng tôi tạo ra đối tượng trình tải khởi động EFI.

Sau đó chúng tôi tải kho biến từ tệp của nó.

Và cuối cùng, chúng tôi đặt EFI làm trình tải khởi động trên cấu hình của mình.

Bây giờ chúng ta có thể khởi động, nhưng sẽ rất tuyệt nếu hiển thị giao diện người dùng.

Hãy thêm Virtio GPU vào cấu hình của chúng tôi.

Chúng tôi chỉ đơn giản là tạo ra một thiết bị đồ họa loại VZVirtioGraphicsDeviceConfiguration.

Sau đó, chúng tôi xác định một bản quét với kích thước của màn hình ảo.

Và chúng tôi đặt Virtio GPU làm thiết bị đồ họa trên cấu hình của mình.

Lần chạm cuối cùng là làm cho chuột hoạt động.

Chúng tôi chỉ sử dụng một thiết bị con trỏ tọa độ màn hình USB ảo và chúng tôi sẽ có một con chuột trong Linux.

Thế là xong. Chúng ta có thể điều hành dự án.

EFI nhìn vào đĩa và thấy nó có thể khởi động được.

Sau đó Linux hiển thị nội dung của giao diện người dùng thông qua thiết bị Virtio GPU.

Và chúng ta có thể sử dụng chuột để tương tác với Linux.

Cuối cùng nhưng không kém phần quan trọng, chúng ta sẽ xem cách chúng ta có thể tận dụng công nghệ Rosetta 2 bên trong Linux.

Đối với nhiều người trong chúng ta, chúng tôi thích phát triển các dịch vụ trên máy Mac của mình, nhưng một khi công việc của chúng tôi đã sẵn sàng, các tệp nhị phân mà chúng tôi tạo có thể cần phải chạy trên các máy chủ x86.

Mô phỏng hướng dẫn x86 rất tốt cho việc này, nhưng chúng ta có thể làm tốt hơn.

Trong macOS Ventura, chúng tôi đang đưa sức mạnh của Rosetta 2 vào các tệp nhị phân Linux.

Những gì Rosetta 2 làm là dịch các tệp nhị phân Linux x86-64 bên trong máy ảo của bạn.

Điều này có nghĩa là bạn có thể chạy bản phân phối ARM Linux yêu thích của mình và các ứng dụng x86-64 của nó có thể chạy với Rosetta.

Và nó nhanh.

Đó là cùng một công nghệ mà chúng tôi đã sử dụng trên Mac, có nghĩa là chúng tôi có hiệu suất đáng kinh ngạc.

Hãy xem cách sử dụng nó.

Đầu tiên, chúng ta cần cấp quyền truy cập Linux vào Rosetta.

Để làm điều này, chúng tôi sử dụng cùng một công nghệ chia sẻ tệp mà chúng tôi đã thấy trên macOS.

Thay vì chia sẻ một thư mục, chúng tôi sử dụng một loại đối tượng đặc biệt, VZLinuxRosettaDirectoryShare.

Sau đó, chúng tôi tạo một thiết bị chia sẻ và thiết lập chia sẻ thư mục Rosetta.

Cuối cùng, chúng tôi thiết lập thiết bị của mình trên cấu hình như bình thường.

Bây giờ máy ảo của chúng tôi đã sẵn sàng để sử dụng Rosetta.

Tiếp theo, hãy xem Linux có thể tận dụng nó như thế nào.

Trong Linux, chúng tôi bắt đầu bằng cách gắn thư mục được chia sẻ trong hệ thống tệp.

Những gì chúng ta thấy từ Linux là một tệp nhị phân Rosetta có thể dịch các ứng dụng.

Sau đó, chúng ta có thể sử dụng update-binfmts để yêu cầu hệ thống sử dụng Rosetta để xử lý bất kỳ tệp nhị phân x86-64 nào.

Đừng lo lắng về việc ghi nhớ lệnh này.

Tất cả đều có trong tài liệu.

Bây giờ Linux đã sẵn sàng.

Mỗi tệp nhị phân x86-64 được khởi chạy sẽ được dịch bởi Rosetta.

Trước khi chúng ta kết thúc phần Linux của mình, hãy cùng nhau xem mọi thứ.

Ở đây, chúng tôi có một bản phân phối Linux đầy đủ được cài đặt từ đầu.

Chúng tôi có thể hiển thị giao diện người dùng của nó với Virtio GPU 2D.

Từ bên trong VM, chúng tôi chạy một máy chủ PHP với Rosetta.

Và chúng ta chỉ có thể kết nối với nó từ máy chủ macOS.

Chúng tôi đã thấy rằng việc tạo ra các máy ảo chưa bao giờ đơn giản hơn thế.

Với khung Ảo hóa, bạn có thể chạy các máy ảo chỉ với một vài dòng mã.

Chúng tôi cũng đã thấy rằng các máy ảo nhanh một cách nực cười trên macOS.

Để tìm hiểu thêm về Ảo hóa, tôi mời bạn kiểm tra các mẫu mã và tài liệu.

Và thay mặt cho nhóm, chúng tôi nóng lòng muốn xem bạn sẽ làm gì tiếp theo với công nghệ này.

.