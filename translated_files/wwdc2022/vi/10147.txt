10147

♪ ♪

Jake: Xin chào, tên tôi là Jake.

Tôi là một kỹ sư trong nhóm AVKit, và chào mừng bạn đến với Tạo ra Trải nghiệm Phát lại Video Tuyệt vời.

Trong iOS và iPadOS 16, chúng tôi đã xây dựng một trình phát đa phương tiện hoàn toàn mới từ đầu mang đến một giao diện hoàn toàn mới, được thiết kế để tập trung vào nội dung và phù hợp với phạm vi ứng dụng rộng hơn.

Chúng tôi cũng đã xây dựng nhiều mô hình tương tác mới lạ giúp việc sử dụng trình phát đa phương tiện mới này trở nên trực quan và liền mạch hơn, và chúng tôi nghĩ rằng bạn sẽ thích nó.

Trong phiên này, chúng ta sẽ đi sâu vào trình phát đa phương tiện hệ thống mới.

Chúng ta sẽ học cách thiết kế những trải nghiệm phát lại tuyệt vời.

Chúng ta sẽ thấy một số tính năng thông minh thị giác mới thú vị đến với macOS và iOS.

Tôi sẽ giới thiệu một trải nghiệm quảng cáo xen kẽ hoàn toàn mới đến với trình phát đa phương tiện mới và xem qua một số API mới mà chúng tôi mang đến từ tvOS.

Và cuối cùng, chúng ta sẽ xem xét một tính năng mới trong AVKit: tốc độ phát lại có thể lựa chọn.

Đối với tvOS 15.0, chúng tôi đã thiết kế lại trình phát hệ thống, mang lại giao diện hoàn toàn mới, cũng như một loạt các tính năng mới và cải tiến khả năng sử dụng cho trình phát hệ thống.

Chà, chúng tôi đã nghe yêu cầu của bạn.

Tôi rất vui khi nói rằng, chúng tôi cũng đã cải tiến trình phát hệ thống iOS.

Chúng tôi đã thiết kế lại hoàn toàn trình phát đa phương tiện gốc, áp dụng giao diện của trình phát tvOS, nhưng được mô phỏng lại cho thiết bị cảm ứng đầu tiên.

Chúng tôi đã loại bỏ chrome trên bảng, cho phép giao diện cảm thấy nguyên bản trong phạm vi ứng dụng rộng hơn và mang lại cảm giác hiện đại hơn cho người chơi.

Hãy cùng tìm hiểu sâu hơn về một số thay đổi mà chúng tôi đã thực hiện.

Đầu tiên, chúng tôi đã mang các điều khiển phát/tạm dừng và bỏ qua phía trước và trung tâm để làm cho chúng dễ tương tác hơn.

Chúng tôi cũng đã điều chỉnh khoảng thời gian bỏ qua từ 15 giây xuống còn 10 giây để dễ dàng theo dõi khoảng cách bạn đã nhảy với các lần bỏ qua liên tiếp.

Tiếp theo, chúng tôi cũng đã thực hiện một số cải tiến đáng kể đối với khả năng sử dụng của dòng thời gian.

Chúng tôi đang loại bỏ núm trượt đánh dấu vị trí hiện tại của dòng thời gian.

Thay vào đó, dòng thời gian bây giờ có thể được tương tác từ bất cứ đâu dọc theo thanh trượt.

Việc kéo không còn cần phải bắt đầu tại điểm đánh dấu thời gian hiện tại.

Điều này thậm chí còn dễ dàng tìm thấy chính xác nơi bạn muốn đến.

Chúng tôi cũng đã thay thế điều khiển khía cạnh video bằng cử chỉ chụm để thu phóng trực quan hơn, điều mà tôi sẽ hiển thị trong giây lát.

Và tất nhiên, giao diện người dùng mới trông cũng tuyệt vời cho nội dung chân dung.

Trên iPadOS, người chơi tích hợp liền mạch vào hệ thống với sự hỗ trợ đầy đủ cho bàn phím, bàn di chuột, chuột, bộ điều khiển trò chơi và hơn thế nữa!

Chúng tôi cũng đã thêm một số cách mới để tương tác với các điều khiển giúp điều hướng nội dung và một số tương tác phổ biến thậm chí còn dễ dàng và trực quan hơn.

Hãy cùng xem những thứ này.

Đầu tiên, chúng tôi đã thêm một cách mới để thay đổi khía cạnh điền của video.

Bây giờ bạn có thể sử dụng cử chỉ chụm để di chuyển qua các mức thu phóng có sẵn.

Việc ghim vào sẽ đưa video vào khu vực an toàn của màn hình.

Véo ra sẽ phóng to video để lấp đầy màn hình.

Tiếp theo, chúng tôi phát trực tuyến một trong những tương tác phổ biến nhất, phát/tạm dừng.

Bây giờ bạn có thể nhấn vào giữa màn hình, ngay cả khi các điều khiển bị ẩn để phát và tạm dừng video.

Và cuối cùng, chúng tôi đã thêm một cách mới để điều hướng qua dòng thời gian truyền thông.

Bây giờ bạn có thể cuộn qua dòng thời gian từ bất kỳ đâu trên video bằng cách sử dụng các tương tác giống nhau mà tất cả chúng ta đều biết và yêu thích trong chế độ xem cuộn.

Khi bạn bắt đầu cuộn qua các khung hình video, giao diện sẽ biến mất, chỉ để lại giao diện người dùng phù hợp nhất, cho phép tập trung vào nội dung.

Chúng tôi cũng đã mang đến một số tính năng mới từ trình phát tvOS.

AVPlayerViewController hiện hỗ trợ hiển thị tiêu đề nội dung, phụ đề và mô tả nguyên bản từ bên trong giao diện người dùng toàn màn hình.

Bạn có thể cung cấp các chuỗi cho từng chuỗi này bằng cách chuyển AVMetadataItems đến một AVKit API hiện có.

Hãy xem điều này được thực hiện như thế nào.

Theo mặc định, tiêu đề, phụ đề và mô tả nội dung sẽ được lấy từ siêu dữ liệu của phương tiện truyền thông.

Tuy nhiên, các giá trị trong phương tiện có thể bị ghi đè nếu cần thông qua API siêu dữ liệu bên ngoài trên AVPlayerItem.

Một tiêu đề có thể được thêm vào bằng cách tạo một AVMetadataItem với mã định danh commonIdentifierTitle và thêm nó vào thuộc tính playerItems externalMetadata.

Tiêu đề nên ngắn gọn và mô tả để tránh làm lộn xộn giao diện người dùng.

Tương tự, ở đây chúng tôi đã thêm phụ đề bằng cách tạo AVMetadataItem với mã định danh .iTunesMetadataTrackSubtitle.

Phụ đề sẽ được hiển thị phía trên tiêu đề nội dung và nên là một vài từ mô tả nội dung.

Cuối cùng, một mô tả có thể được thêm vào với mã định danh .commonIdentifierDescription.

Điều này sẽ hiển thị một chevron ở bên phải của tiêu đề và phụ đề.

Chọn tiêu đề sẽ hiển thị bảng thông tin chứa mô tả nội dung.

Mô tả nên là một vài câu với nhiều thông tin hơn về nội dung.

Nhấn vào bất cứ đâu sẽ loại bỏ bảng thông tin.

Vì vậy, để kết thúc, chúng tôi đã cải tiến trình phát hệ thống iOS với giao diện hoàn toàn mới, với các mô hình tương tác đầu tiên được sắp xếp hợp lý mới cũng như một loạt các cải tiến khác.

Sử dụng AVPlayerViewController trong ứng dụng của bạn, bạn sẽ có sự hỗ trợ đầy đủ của trình phát hệ thống - hỗ trợ Picture in Picture, SharePlay, Visual Analysis, Native Catalyst Support, New hardware and feature support, and much, much much.

Và tất nhiên, tất cả những điều này bạn nhận được chỉ với một vài dòng mã.

Bây giờ, hãy nói về cách bạn có thể thiết kế trải nghiệm phát lại tuyệt vời trong các ứng dụng của mình.

Khi chúng tôi bắt đầu thiết kế lại trình phát đa phương tiện hệ thống, chúng tôi đã lùi lại một bước so với những gì chúng tôi đã xây dựng trong quá khứ và những gì chúng tôi đã xây dựng cho các nền tảng khác và chúng tôi tự hỏi mình, "Điều gì tạo nên trải nghiệm người dùng tốt?"

Chúng tôi muốn chia sẻ quy trình này với bạn; chúng tôi đã thiết kế những người chơi mới như thế nào, tại sao chúng tôi thiết kế chúng theo cách chúng tôi đã làm và những gì chúng tôi nghĩ xác định một trải nghiệm truyền thông tuyệt vời.

Chúng tôi nghĩ rằng có ba điều làm cho trải nghiệm truyền thông trở nên tuyệt vời.

Trải nghiệm phải trực quan.

Nó sẽ cảm thấy dễ dàng, quen thuộc, tự nhiên, ngay cả khi bạn chưa bao giờ sử dụng nó.

Nó nên được tích hợp chặt chẽ, cả trong ứng dụng của bạn và với hệ thống.

Và cuối cùng, nó nên hài lòng về phía trước.

Vào cuối ngày, mọi người ở đó để trải nghiệm phương tiện truyền thông và các ứng dụng và thiết kế của bạn sẽ phản ánh điều đó.

Bây giờ chúng ta hãy tìm hiểu sâu hơn về ba điều này, bắt đầu bằng việc làm cho trải nghiệm của bạn trở nên trực quan.

Thông thường, khi một ứng dụng cảm thấy trực quan, bạn có thể khó hiểu tại sao.

Bạn chỉ biết nó khi bạn nhìn thấy nó.

Vậy điều gì thực sự làm cho một giao diện hoặc một trải nghiệm cảm thấy trực quan?

Và làm thế nào bạn có thể thiết kế cho nó?

Chúng tôi nghĩ rằng nó bắt đầu với sự quen thuộc.

Khi bạn có thể rút ra những trải nghiệm trong quá khứ của mình để giúp hiểu điều gì đó mới mẻ, đó là trực quan.

Khi bạn không cần giải thích về cách nó hoạt động hoặc thậm chí cần suy nghĩ về cách nó hoạt động - nó chỉ hoạt động chính xác như bạn mong đợi.

Mỗi người trong chúng ta xây dựng trải nghiệm tương tác hàng ngày với công nghệ và thế giới thực.

Cả hai điều này đều là nguồn quen thuộc tuyệt vời về trải nghiệm và thường là nơi chúng tôi bắt đầu khi thiết kế trình phát phương tiện hệ thống mới.

Có rất nhiều loại kinh nghiệm để rút ra trực giác, nhưng tôi muốn tập trung vào hai loại; hai loại mà chúng ta thường dựa vào nhất khi thiết kế trình phát đa phương tiện hệ thống.

Mô hình nền tảng và thế giới thực.

Điều đầu tiên đến từ kinh nghiệm của chúng tôi khi sử dụng công nghệ mỗi ngày.

Nhiều năm sử dụng điều khiển từ xa TV cho bạn biết rằng các phím mũi tên di chuyển tiêu điểm sang trái và phải.

Tương tự, nhấn vào nút âm lượng trên thiết bị cảm ứng đầu tiên sẽ tắt tiếng âm thanh.

Những tương tác này cảm thấy trực quan vì chúng quen thuộc.

Bạn có thể sử dụng các loại tương tác quen thuộc này trong trải nghiệm truyền thông của mình để giúp làm cho các ứng dụng của bạn cảm thấy trực quan hơn, hấp dẫn hơn và thậm chí tự nhiên hơn khi sử dụng.

Ngược lại, việc tìm kiếm các tương tác không quen thuộc hoặc bất ngờ có thể gây nhầm lẫn và đôi khi thậm chí gây bực bội.

Hãy xem xét một số ví dụ mà chúng tôi đã rút ra loại nền tảng quen thuộc này trong những người chơi hệ thống.

Một ví dụ tuyệt vời về điều này là mô hình trình bày và loại bỏ của trình phát hệ thống iOS.

Người chơi làm sinh động bài thuyết trình của mình từ phía dưới, tạo ra một cú đánh tinh tế mà người chơi có thể bị loại bỏ bằng cách đẩy nó xuống.

Chúng tôi thấy mô hình này được sử dụng rộng rãi trên các thiết bị cảm ứng đầu tiên của chúng tôi.

Ví dụ: giao diện người dùng hiện đang phát trong Âm nhạc trình bày từ thanh nhỏ ở phía dưới và có thể bị loại bỏ bằng cách vuốt tương tác xuống dưới.

Tuy nhiên, trong một số trường hợp, chúng ta có thể rút ra những trải nghiệm không phải từ sự hiểu biết của chúng ta về công nghệ, mà từ cuộc sống hàng ngày.

Những loại trải nghiệm này đến từ thế giới thực.

Hàng triệu năm tiến hóa đã giúp chúng ta phát triển sự hiểu biết sâu sắc về bản năng về các quá trình tự nhiên.

Bạn có thể khai thác sự hiểu biết này để giúp xây dựng trải nghiệm quen thuộc và trực quan trong phần mềm của mình.

Một ví dụ tuyệt vời về điều này là cử chỉ cuộn mới của chúng tôi trong trình phát iOS.

Tương tự như lăn một chiếc ô tô đồ chơi trên bàn, mỗi lần vuốt qua video đều có động lượng, tiếp tục chuyển động của dòng thời gian qua tương tác trực tiếp cho đến khi dòng thời gian từ từ dừng lại.

Chỉ riêng động lực ở đây đã xây dựng mối liên hệ với các vật thể chuyển động trong thế giới thực.

Sự liên kết này giúp bạn khám phá chiều sâu tinh tế của sự tương tác.

Cũng giống như chiếc xe đồ chơi, tôi có thể làm cho nó đi nhanh hơn bằng cách đẩy nó mạnh hơn, hoặc đẩy nó nhiều lần liên tiếp.

Và nếu tôi nắm lấy nó, nó sẽ dừng lại.

Nó cảm thấy tự nhiên bởi vì nó là tự nhiên.

Và phần hay nhất về điều này là, nếu bạn sử dụng trình phát hệ thống, ứng dụng của bạn sẽ cảm thấy trực quan.

Tất cả các tương tác tự nhiên mà chúng tôi đã xây dựng và kế thừa trực giác và sự quen thuộc của mọi người với trình phát hệ thống, tất cả các mô hình thiết kế được tối ưu hóa theo cách mà người dùng tvOS, iOS và macOS sẽ hiểu nguyên bản - tất cả những điều này bạn nhận được chỉ với một vài dòng mã.

Xây dựng một thiết kế trực quan là một khía cạnh làm cho trải nghiệm truyền thông của bạn trở nên tuyệt vời, nhưng nếu không có tất cả các tính năng và điểm tích hợp mà mọi người mong đợi, ứng dụng của bạn có thể vô tình lấy nét ra khỏi nội dung.

Điều này dẫn chúng ta đến khía cạnh quan trọng thứ hai của trải nghiệm truyền thông tuyệt vời - tích hợp chặt chẽ.

Khi một trải nghiệm được tích hợp chặt chẽ, tất cả các chức năng, tính năng và thiết bị mà mọi người mong đợi hoạt động chỉ hoạt động.

Và quan trọng, họ làm việc theo cách phù hợp với mong đợi của họ.

Khi mọi người sử dụng thiết bị của họ, họ đã quen với việc dựa vào các tính năng của nền tảng.

Ví dụ: kéo Trung tâm điều khiển xuống và xem nội dung của bạn được điền trong các điều khiển phương tiện Đang phát hoặc phản hồi thông báo trong khi xem chương trình truyền hình và để video tiếp tục mượt mà vào Ảnh trong Ảnh.

Xây dựng hệ thống tích hợp chặt chẽ này vào ứng dụng của bạn là chìa khóa để làm cho trải nghiệm của bạn trở nên liền mạch.

Ứng dụng của bạn sẽ giống như một phần gốc của hệ thống và chúng tôi làm việc chăm chỉ để cung cấp cho bạn các công cụ cần thiết để biến điều đó thành hiện thực.

Điều này bao gồm những thứ như tích hợp CoreSpotlight để làm cho nội dung của bạn có thể tìm kiếm được, thông tin Đang phát để nội dung của bạn có thể xuất hiện trong giao diện người dùng phương tiện hệ thống, các lệnh MediaRemote cho phép ứng dụng của bạn phản hồi những thứ như nút phát được nhấn trên bàn phím hoặc điều khiển TV.

Chúng tôi thậm chí còn cung cấp khả năng tích hợp phương tiện của bạn trực tiếp vào ứng dụng TV, cung cấp nội dung của bạn đến nhiều đối tượng hơn.

Ngoài việc làm cho các ứng dụng của bạn có cảm giác bản địa, điều quan trọng là phải cung cấp tất cả các tính năng mà mọi người yêu thích.

Các tính năng như AirPlay, SharePlay, và Picture in Picture.

Chúng tôi nghĩ rằng mọi người sẽ mong đợi những tính năng này và cung cấp cho họ trải nghiệm nâng cao khi sử dụng ứng dụng của bạn.

Mọi người sẽ sử dụng ứng dụng của bạn trên nhiều thiết bị và thậm chí nhiều định dạng đầu vào hơn.

Cung cấp hỗ trợ cho tất cả những điều này là rất quan trọng trong việc đảm bảo trải nghiệm của bạn có thể tiếp cận được với mọi người.

Điều này đặc biệt quan trọng trên tvOS, nơi hỗ trợ tất cả các điều khiển từ xa có sẵn là rất quan trọng để đảm bảo mọi người đều có thể sử dụng ứng dụng của bạn.

Đây là một lý do chúng tôi luôn khuyên bạn nên sử dụng trình phát đa phương tiện hệ thống trên tvOS.

Các ứng dụng của bạn nên đảm bảo trải nghiệm linh hoạt với tất cả điều khiển từ xa TV, bàn phím, bàn di chuột, bộ điều khiển trò chơi và điều khiển tai nghe.

Ngoài ra, bạn nên đảm bảo các yếu tố giao diện người dùng của ứng dụng của mình được vẽ trong khu vực an toàn của màn hình để tránh va chạm với các góc tròn hoặc rãnh trên màn hình.

Chúng tôi nhận ra rằng việc xây dựng hỗ trợ cho tất cả các điểm tích hợp, tính năng và cấu hình phần cứng này có thể gây khó khăn.

Đây là lý do tại sao chúng tôi xây dựng AVPlayerViewController, vì vậy chỉ với một vài dòng mã, bất kỳ ai sử dụng ứng dụng của bạn đều có thể có trải nghiệm truyền thông tuyệt vời.

Và tất cả những điều này dẫn chúng ta, cuối cùng, đến khía cạnh quan trọng nhất trong việc thiết kế trải nghiệm truyền thông; làm cho nó tiến lên phía trước nội dung.

Đây nên là mục tiêu chính trong thiết kế của bạn và là những gì chúng tôi xem xét khía cạnh xác định của trải nghiệm truyền thông tuyệt vời.

Khi ứng dụng của bạn cảm thấy trực quan, khi tất cả các điểm tích hợp và tất cả các tính năng mà mọi người mong đợi chỉ hoạt động, bạn sẽ tập trung vào nội dung của mình và mọi thứ khác sẽ mờ dần vào nền.

Tuy nhiên, có một vài điều bạn nên ghi nhớ, cụ thể để thiết kế nội dung của mình.

Đảm bảo rằng bạn cung cấp tất cả siêu dữ liệu thích hợp, cả trong giao diện của bạn và cho hệ thống.

Cung cấp thông tin này giúp cung cấp ngữ cảnh cho phương tiện của bạn và cho phép hệ thống cung cấp trải nghiệm tốt hơn trong Trung tâm điều khiển và Màn hình khóa.

Điều này bao gồm những thứ như tiêu đề và phụ đề, mô tả, hình thu nhỏ, thông tin mùa và tập, hoặc ngày bắt đầu và kết thúc cho các luồng trực tiếp.

Luôn giữ phương tiện truyền thông của bạn ở tỷ lệ khung hình ban đầu.

Điều này cho phép hệ thống định vị video của bạn trên màn hình ở đúng vị trí.

Hộp thư nội dung của bạn có thể dẫn đến những trải nghiệm như thế này hoặc thế này.

Đảm bảo bao gồm hỗ trợ cho các tiêu chuẩn truyền thông mới nhất nếu có thể.

Ví dụ, HDR và Dolby Atmos.

Và cuối cùng, đảm bảo bao gồm các bản âm thanh và phụ đề cho nhiều ngôn ngữ để càng nhiều người có thể truy cập phương tiện của bạn.

Nếu có một điều cần rút ra từ phần này của bài nói chuyện, đó là bạn nên tập trung vào nội dung của mình.

Chúng tôi đã xây dựng hệ thống trình phát đa phương tiện, được cung cấp thông qua AVPlayerViewController, để làm cho mục tiêu đó trở nên dễ dàng nhất có thể cho bạn với tư cách là một nhà phát triển.

Bây giờ, hãy xem qua một số tính năng mới mà chúng tôi đã thêm vào AVPlayerViewController, bắt đầu với các tính năng thông minh thị giác mới.

Trong ví dụ này, chúng tôi có một video bị tạm dừng trên một khung hình với một đoạn mã trong đó.

Nhấn và giữ đoạn mã sẽ chọn nó.

Sau đó bạn có thể sao chép và dán nó trực tiếp vào sân chơi để dùng thử.

Điều này cũng hoạt động tốt cho macOS.

Di con trỏ của bạn qua cùng một mã sẽ hiển thị chùm tia I cho biết văn bản có thể chọn được.

Sau đó, bạn có thể sử dụng con trỏ của mình để làm nổi bật nó hoặc sử dụng CMD+A để chọn tất cả.

Chúng tôi đang giới thiệu một API mới để đi cùng với chức năng này.

Có sẵn trong AVPlayerViewController trên iOS và AVPlayerView trên macOS, cho phép VideoFrameAnalysis sẽ chuyển đổi tính năng này.

Điều này sẽ được kích hoạt bởi tất cả các ứng dụng liên kết với SDK mới.

Trong khi cho phép VideoFrameAnalysis được đặt thành true và một khi phương tiện bị tạm dừng, AVKit sẽ bắt đầu phân tích khung hình video hiện tại sau một khoảng thời gian đã đặt.

Lưu ý rằng chúng tôi sẽ không phân tích khung hình trong khi cuộn, vì lý do hiệu suất hoặc cho nội dung được bảo vệ FairPlay.

Nói chung, chúng tôi nghĩ rằng mọi người sẽ mong đợi chức năng này trong hầu hết các tình huống.

Tuy nhiên, có một số trường hợp bạn có thể muốn vô hiệu hóa phân tích trực quan khi thích hợp trong ứng dụng của mình.

Ví dụ, trong các ứng dụng quan trọng về hiệu suất, chẳng hạn như chế độ xem bộ sưu tập video hoặc trong trường hợp không mong đợi tương tác với video, như màn hình giật gân.

Để biết thêm thông tin về cách tích hợp tính năng thông minh trực quan được đặt vào ứng dụng của bạn, hãy xem các cuộc nói chuyện liên quan của chúng tôi trên VisionKit.

Tiếp theo, chúng ta hãy xem xét một số cải tiến mà chúng tôi đã thực hiện đối với quảng cáo xen kẽ.

Cho đến nay, quảng cáo xen kẽ chỉ được hỗ trợ trong AVPlayerViewController trên tvOS.

Chà, tôi vui mừng thông báo rằng chúng tôi cũng đang mang lại mức độ hỗ trợ tương tự cho iOS.

Quảng cáo xen kẽ, trong luồng hoặc được xác định cục bộ thông qua AVPlayerInterstitialEvents, bây giờ sẽ được đánh dấu dọc theo dòng thời gian.

Khi dòng thời gian chạm vào điểm đánh dấu, chúng ta sẽ bắt đầu chơi quảng cáo xen kẽ.

Nếu quảng cáo xen kẽ của bạn đã được xác định đầy đủ trong danh sách phát HLS của bạn, bạn sẽ tự động nhận được hành vi này - không cần áp dụng.

Nếu không, hoặc nếu ứng dụng của bạn yêu cầu một số hành vi tùy chỉnh hơn, chúng tôi cũng sẽ giới thiệu một số API mới.

AVInterstitialTimeRange đang được chuyển từ tvOS sang iOS.

Những thứ này sẽ được điền tự động vào thuộc tính AVPlayerItem, interstitialTimeRanges, cũng đang được đưa qua từ tvOS.

Khi sử dụng luồng HLS, một AVInterstitialTimeRange sẽ được tổng hợp cho mỗi quảng cáo xen kẽ trong luồng.

Khi tạo các sự kiện xen kẽ cục bộ thông qua AVFoundation API, một AVInterstitialTimeRange sẽ được tổng hợp cho mỗi AVPlayerInterstitialEvent.

Tuy nhiên, không giống như trên tvOS, interstitialTimeRanges là một thuộc tính chỉ đọc.

Quảng cáo xen kẽ sẽ cần được xác định trong luồng HLS hoặc thông qua AVPlayerInterstitialEvents.

Đối với những người di chuyển hỗ trợ của họ từ các ứng dụng tvOS của họ, điều này về bản chất tương đương với việc thiết lập translatesPlayerInterstitialEvents thành có.

Chúng tôi cũng đang đưa ra hai phương pháp ủy quyền từ tvOS.

Những thứ này có thể được sử dụng để biết khi nào một quảng cáo xen kẽ đã bắt đầu hoặc kết thúc phát lại.

Hãy xem cách chúng ta có thể sử dụng những thứ này cho API để thêm nút bỏ qua cho quảng cáo cuộn trước trên iOS.

Đầu tiên, chúng tôi sẽ tạo một AVPlayerInterstitialEventController cho trình phát phương tiện chính.

Tiếp theo, chúng ta sẽ tạo ra một sự kiện xen kẽ.

Chúng tôi sẽ xác định một số hạn chế cho nó.

Những hạn chế này ngăn cản việc tìm kiếm trong quảng cáo xen kẽ và ngăn chặn việc bỏ qua quảng cáo xen kẽ.

Sau đó, chúng tôi sẽ thêm quảng cáo xen kẽ vào bộ điều khiển sự kiện.

Và cuối cùng, chúng ta có thể triển khai cuộc gọi lại đại biểu willPresentInterstitial mới để hiển thị nút bỏ qua quảng cáo sau một khoảng thời gian đã đặt.

Và một khi nút được nhấn, chúng tôi sẽ hủy quảng cáo xen kẽ.

Thật dễ dàng.

Lưu ý rằng khi thêm bất kỳ phần tử giao diện người dùng tùy chỉnh nào vào AVPlayerViewController, chẳng hạn như nút bỏ qua quảng cáo này, hãy luôn đảm bảo thêm chúng dưới dạng chế độ xem phụ của contentOverlayView.

Để tìm hiểu thêm về cách bạn có thể tích hợp quảng cáo xen kẽ của mình ngay vào danh sách phát HLS hoặc cách bạn có thể sử dụng API quảng cáo xen kẽ AVFoundation, hãy xem các cuộc nói chuyện liên quan của chúng tôi về khám phá các cuộn trước và cuộn giữa động HLS.

Bây giờ chúng ta sẽ xem xét một tính năng mới mà chúng ta đã thêm vào trong năm nay trên tất cả các nền tảng của chúng ta; hỗ trợ gốc để kiểm soát tốc độ phát lại.

Cả AVPlayerView và AVPlayerViewController hiện có thể tùy chọn hiển thị menu tốc độ phát lại bằng cách sử dụng một số API mới mà chúng tôi đã thêm vào.

Chúng tôi đang cung cấp cái này trên macOS, iOS và tvOS.

Hãy cùng xem cái này trông như thế nào.

Trên tvOS, bạn sẽ thấy một điều khiển mới trong thanh vận chuyển.

Chọn điều khiển sẽ hiển thị danh sách các tốc độ phát lại có sẵn để lựa chọn.

Trên iOS, menu này sẽ xuất hiện trong menu tràn điều khiển vận chuyển.

Và tương tự, trên macOS, điều khiển sẽ xuất hiện trong menu tràn.

Tất cả các ứng dụng liên kết với SDK iOS, macOS và tvOS mới sẽ tự động nhận được chức năng này mà không cần thay đổi bổ sung.

Tuy nhiên, tùy thuộc vào trường hợp sử dụng của bạn, một số ứng dụng có thể muốn sửa đổi danh sách tốc độ, chọn tốc độ theo chương trình hoặc tắt hoàn toàn menu.

Để phù hợp với các trường hợp sử dụng này, chúng tôi đã thêm một số API mới vào AVPlayerView và AVPlayerViewController.

Hãy cùng xem những thứ này.

Đầu tiên, chúng tôi đã thêm một lớp mới trong AVKit- AVPlaybackSpeed.

AVPlaybackSpeeds đại diện cho các tùy chọn tốc độ có thể lựa chọn của người dùng trong giao diện người dùng phát lại và chúng có ba thuộc tính.

Giá trị tốc độ, được xác định khi khởi tạo, sẽ được đặt trên trình phát khi tốc độ phát lại được chọn.

Tên bản địa hóa, được sử dụng để đại diện cho tốc độ phát lại trong hệ thống trợ năng Ví dụ: tốc độ 2,5 có thể sử dụng Tên bản địa hóa là "Tốc độ gấp hai lần rưỡi".

Và một tên số được bản địa hóa.

Giá trị này được tổng hợp từ thuộc tính tốc độ và sẽ là Chuỗi được hiển thị trong menu tốc độ phát lại Nếu ứng dụng của bạn yêu cầu menu tốc độ phát lại tùy chỉnh bên ngoài trình phát, hãy sử dụng chuỗi này để biểu thị tốc độ.

Cuối cùng, AVPlaybackSpeed xác định danh sách các tốc độ mặc định của hệ thống nên được sử dụng bất cứ khi nào có thể.

Bạn có thể sử dụng AVPlaybackSpeed kết hợp với một số API mới trên AVPlayerView và AVPlayerViewController để điều chỉnh tính năng này cho phù hợp với ứng dụng của bạn.

Thuộc tính tốc độ cho phép xác định danh sách tùy chỉnh các tốc độ phát lại.

Theo mặc định, thuộc tính này sẽ được đặt thành danh sách AVPlaybackSpeed systemDefaultSpeeds.

Đặt cái này thành một danh sách trống sẽ ẩn menu.

Thuộc tính tốc độ đã chọn sẽ trả về tốc độ hiện đang hoạt động.

Và cuối cùng, chức năng selectSpeed cho phép lựa chọn theo chương trình tốc độ hiện tại.

Lưu ý rằng bạn chỉ nên sử dụng chức năng này để đáp ứng với việc lựa chọn rõ ràng tốc độ bên ngoài giao diện người dùng của trình phát.

Không bao giờ ngầm ghi đè tốc độ phát lại đã chọn.

Hãy xem xét một ví dụ.

Ở đây chúng tôi đang tạo một AVPlayerViewController và trình bày nó.

Theo mặc định, điều này sẽ sử dụng danh sách tốc độ phát lại được cung cấp của hệ thống.

Bạn có thể thêm một tốc độ mới vào menu bằng cách tạo AVPlaybackSpeed và thêm nó vào danh sách các tốc độ trong AVPlayerViewController.

Chúng ta cũng có thể vô hiệu hóa menu bằng cách đặt một danh sách tốc độ trống.

Nó dễ dàng như vậy.

Tuy nhiên, lưu ý rằng, bạn nên luôn gọi AVPlayer play() để bắt đầu phát lại.

Không bao giờ bắt đầu phát lại bằng cách gọi setRate:1.0, vì tỷ lệ đã chọn có thể không phải là 1.0.

Và với điều đó, tôi muốn kết thúc phiên họp.

Chúng tôi đã thấy trình phát hệ thống iOS được thiết kế lại mới.

Chúng tôi đã nghe cách bạn có thể thiết kế những trải nghiệm phát lại tuyệt vời của riêng mình.

Chúng tôi đã thấy một số tính năng thông minh thị giác mới thú vị và đã xem qua các quảng cáo xen kẽ và API tốc độ phát lại mới của chúng tôi.

Tôi hy vọng bạn thích phiên này và mong được thấy những tính năng này trong ứng dụng của mình.

Tận hưởng phần còn lại của hội nghị.