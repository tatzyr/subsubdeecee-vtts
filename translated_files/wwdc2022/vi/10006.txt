10006

♪ Nhạc hip-hop nhạc cụ êm dịu ♪

♪

Xin chào mọi người! Tên tôi là Ankur Soni.

Tôi là quản lý kỹ thuật trong nhóm Dịch vụ Bản đồ tại Apple.

Hôm nay, chúng ta sẽ xem xét một số khả năng mới thú vị đến với hệ sinh thái nhà phát triển Bản đồ.

Vậy hãy bắt đầu nào.

Ứng dụng Bản đồ của chúng tôi cung cấp nhiều trải nghiệm người dùng cuối khác nhau cho khách hàng của Apple trên toàn cầu.

Chúng tôi trao quyền cho các nhà phát triển tạo ra trải nghiệm định vị địa lý tuyệt đẹp cho các ứng dụng và trang web của họ thông qua các dịch vụ MapKit và MapKit JS của chúng tôi.

Tuy nhiên, việc cung cấp nhà phát triển Apple Maps của chúng tôi luôn lấy khách hàng làm trung tâm.

Chúng tôi đã lắng nghe cẩn thận tất cả phản hồi tuyệt vời của bạn.

Bạn muốn có một cách để tăng cường dữ liệu của riêng bạn trên MapKit mà không ảnh hưởng đến hiệu suất hoặc sức mạnh.

Vì vậy, để hoàn thiện hệ sinh thái của chúng tôi, chúng tôi rất vui mừng được giới thiệu các API Máy chủ Apple Maps.

Chúng tôi đang giới thiệu bốn API máy chủ mới: Mã hóa địa lý, Mã hóa địa lý ngược, Tìm kiếm, Thời gian đến dự kiến - hoặc ETA.

Các API này sẽ giúp bạn giải quyết nhiều trường hợp sử dụng khác nhau trong khi tích hợp Bản đồ vào các ứng dụng của bạn.

Với Geocoding APIs, bạn có thể chuyển đổi một địa chỉ thành tọa độ địa lý vĩ độ và kinh độ.

Tương tự, với Mã hóa địa lý ngược, bạn có thể làm ngược lại - đi từ tọa độ địa lý đến một địa chỉ.

Với API Tìm kiếm, bạn có thể cung cấp cho người dùng khả năng nhập chuỗi tìm kiếm để khám phá các địa điểm như doanh nghiệp, điểm quan tâm và hơn thế nữa.

Có thể bạn muốn phủ lên một số dữ liệu của riêng mình và trình bày nó cho người dùng.

Với ETA API, bạn có thể giúp khách hàng của mình biết được doanh nghiệp của bạn cách họ bao xa hoặc thực hiện một số tính toán để tìm cửa hàng gần nhất.

Khả năng là vô tận!

Chúng tôi nghĩ rằng bạn sẽ yêu thích API máy chủ vì ba lý do quan trọng.

Bây giờ bạn có thể cung cấp trải nghiệm liền mạch bằng cách tận dụng MapKit, MapKit JS và Apple Maps Server APIs mới.

Điều này sẽ đơn giản hóa kiến trúc ứng dụng của bạn mang lại cho bạn một ngăn xếp Apple Maps đầy đủ.

Điều này sẽ làm cho cuộc sống của bạn dễ dàng hơn nhiều.

Chắc chắn, nó đã giúp tôi.

Nhưng này, tôi thiên vị!

Lợi ích tiếp theo là giảm các cuộc gọi mạng.

Nhiều lần, chúng ta thấy mình trong tình huống mà chúng ta đang thực hiện các yêu cầu lặp đi lặp lại và dư thừa từ các thiết bị của người dùng như iPhone, iPad, trang web, v.v.

Có thể bạn đang tra cứu cùng một địa chỉ lặp đi lặp lại từ ứng dụng của bạn đang chạy trên các thiết bị người dùng khác nhau.

Điều này gây ra rất nhiều cuộc gọi mạng và lãng phí băng thông.

Ủy thác hoạt động chung này cho máy chủ của bạn và chỉ thực hiện nó một lần ở phía sau bằng cách sử dụng API máy chủ sẽ giúp ứng dụng của bạn tiêu thụ ít băng thông hơn.

Một tác dụng phụ tuyệt vời của điều này là bây giờ ứng dụng của bạn cũng tiết kiệm năng lượng, vì một số quá trình xử lý hiện được ủy quyền cho máy chủ của bạn bằng API Máy chủ Apple Maps.

Bây giờ hãy lấy một số API này để quay.

Giả sử chúng tôi đang xây dựng các thẻ liên hệ này cho ứng dụng định vị cửa hàng của bạn.

Ở đây chúng tôi thấy ba cửa hàng với địa chỉ và khoảng cách từ vị trí của khách hàng.

Trong ví dụ này, chúng tôi sẽ giả định rằng khách hàng đã cung cấp vị trí của họ.

Hiện tại, hãy tập trung vào việc xây dựng một trong những thẻ liên lạc này.

Chúng tôi sẽ giả định rằng những địa chỉ này nằm trên một máy chủ lưu trữ và phục vụ vị trí của các hiệu sách truyện tranh.

Có nhiều cách để xây dựng điều này, nhưng trong một giây, hãy giả sử chúng ta không có các API máy chủ mới này.

Một kiến trúc cơ bản sẽ trông như thế nào?

Ứng dụng khách hàng của bạn sẽ lấy dữ liệu này như thế nào?

Trong sơ đồ này, ứng dụng của chúng tôi đang thực hiện cuộc gọi đến máy chủ để lấy danh sách các địa chỉ cửa hàng.

Máy chủ phụ trợ trả về một danh sách các địa chỉ cửa hàng cho thiết bị khách hàng của bạn.

Vì chúng tôi không có API máy chủ trong ví dụ này, bây giờ ứng dụng khách của chúng tôi phải thực hiện các hành động khác nhau trên địa chỉ để xây dựng thẻ liên hệ.

Để thực hiện một tác vụ duy nhất, một khách hàng có thể phải thực hiện nhiều cuộc gọi đến các dịch vụ phụ trợ khác nhau.

Tại đây bạn có thể thấy rằng ứng dụng khách đang thực hiện cuộc gọi trực tiếp đến Máy chủ Apple Maps, bằng cách sử dụng MapKit hoặc MapKit JS.

Sự trò chuyện này giữa máy khách và mặt sau có thể ảnh hưởng xấu đến hiệu suất và quy mô của ứng dụng.

Qua mạng di động có độ trễ cao điển hình, việc sử dụng các yêu cầu riêng lẻ theo cách này là không hiệu quả và có thể dẫn đến kết nối bị hỏng hoặc yêu cầu không đầy đủ.

Mặc dù mỗi yêu cầu có thể được thực hiện song song, ứng dụng phải gửi, chờ và xử lý dữ liệu cho mỗi yêu cầu trên tất cả các kết nối riêng biệt làm tăng khả năng thất bại.

Cuối cùng, bạn sẽ phải hợp nhất tất cả các phản hồi trên khách hàng.

Và trong khi tất cả các cuộc gọi này xảy ra, bạn đang hiển thị một con quay cho người dùng.

Thêm vào đó, thiết bị khách hàng đang sử dụng nhiều băng thông và năng lượng hơn cho các cuộc gọi bổ sung này.

Đó không phải là một trải nghiệm người dùng tốt.

Bây giờ, hãy xem xét một kiến trúc mô hình với quyền truy cập vào Apple Maps Server APIs.

Bạn có thể bắt đầu sử dụng máy chủ phụ trợ của mình như một cổng để giảm sự trò chuyện giữa máy khách và các dịch vụ.

Cũng giống như trước đây, ở đây chúng tôi yêu cầu một danh sách các cửa hàng được hiển thị từ khách hàng của bạn.

Tiếp theo, chúng tôi đưa ra yêu cầu từ máy chủ để thực hiện mã hóa địa lý.

Sau đó chúng tôi nhận được phản hồi cho từng API từ Máy chủ Apple Maps.

Máy chủ truyện tranh kết hợp các phản hồi từ mỗi dịch vụ và gửi phản hồi đến ứng dụng.

Mô hình này có thể giảm số lượng yêu cầu mà ứng dụng thực hiện cho các dịch vụ phụ trợ và cải thiện hiệu suất ứng dụng trên các mạng có độ trễ cao.

Tóm lại, khách hàng của bạn thực hiện một cuộc gọi đến máy chủ của bạn để lấy danh sách các cửa hàng.

Máy chủ của bạn sau đó thực hiện công việc nặng nhọc để thực hiện các lệnh gọi API thích hợp để soạn phản hồi phù hợp nhất với người dùng của bạn.

Vì vậy, hãy quay lại ví dụ nghiên cứu điển hình của chúng tôi ở đây.

Chúng tôi sẽ sử dụng Geocoding và ETA API để có khoảng cách đến cửa hàng.

Chúng ta có thể sử dụng Geocode API để tìm vĩ độ và kinh độ cho các địa chỉ cửa hàng, sau này chúng ta sẽ sử dụng để tính toán ETA.

Trong ví dụ này, trước tiên, chúng ta sẽ lấy địa chỉ cho cửa hàng truyện tranh và URL mã hóa nó.

Tiếp theo, chúng tôi sẽ sử dụng Geocode API và chuyển địa chỉ được mã hóa URL này làm tham số truy vấn.

Chúng tôi sẽ bỏ qua các chi tiết xác thực ngay bây giờ và quay lại với nó trong một vài trang trình bày.

Trong phản hồi, bạn có thể thấy vĩ độ và kinh độ của địa chỉ được trả về.

Chúng tôi sẽ lặp lại quy trình tương tự để tìm vĩ độ và kinh độ cho địa chỉ của khách hàng.

Điều này sau này sẽ được sử dụng để tính toán ETA.

Như bạn có thể thấy, có nhiều trường hơn trong phản hồi.

Tôi sẽ liên kết tài liệu chi tiết trong phần Tài nguyên bên dưới.

Bây giờ, chúng ta có thể đặt nguồn gốc và điểm đến trên API ETA với dữ liệu chúng ta nhận được từ Geocode API.

Như tôi đã đề cập trước đây, chúng ta có vĩ độ gốc, kinh độ và vĩ độ đích, kinh độ.

Chúng tôi có thể chỉ định tối đa 10 điểm đến ở đây nếu cần.

Chúng tôi sẽ cung cấp thông số đó trong API ETA dưới dạng tham số truy vấn nguồn gốc và đích được mã hóa URL.

Phản hồi cho API là một danh sách các ETA, một cho mỗi điểm đến được cung cấp.

Trong trường hợp này, chúng tôi chỉ có một vì chúng tôi đã cung cấp một điểm đến.

Ở đây cho ví dụ của chúng tôi, chúng tôi quan tâm đến distanceMeters để tính toán khoảng cách đến cửa hàng.

Với điều này, chúng tôi có tất cả các phần chúng tôi cần: địa chỉ cửa hàng và khoảng cách để người dùng đến cửa hàng của bạn.

Bạn cũng có thể chọn tăng cường hoặc phủ lên dữ liệu này bằng thông tin cửa hàng của riêng bạn, như giờ cửa hàng.

Bằng cách này, bạn có thể tận dụng các API máy chủ khác nhau để xây dựng các ứng dụng của mình.

Đối với các API khác, vui lòng tham khảo tài liệu được liên kết bên dưới bài nói chuyện này.

Một phần quan trọng mà chúng tôi chưa nói đến là xác thực.

Tất cả các API Máy chủ Apple Maps đều được xác thực.

Nếu bạn đang sử dụng MapKit JS, bạn đã đi được nửa chặng đường.

Apple Maps Server APIs sử dụng cơ chế tương tự như MapKit JS để xác thực.

Đầu tiên, bạn sẽ tải xuống khóa riêng tư từ tài khoản nhà phát triển của mình.

Sau đó, bạn sẽ sử dụng khóa riêng này để tạo mã thông báo xác thực Bản đồ ở định dạng JWT.

Có một tài liệu chi tiết về cách tạo một tài liệu được liên kết bên dưới.

Sau đó, bạn có thể trao đổi mã thông báo xác thực Bản đồ này bằng cách sử dụng API mã thông báo để nhận mã thông báo truy cập Bản đồ.

Chúng tôi sẽ xác thực mã thông báo xác thực Bản đồ ở mặt sau và gửi lại mã thông báo truy cập Bản đồ.

Cái này ở định dạng JWT và sẽ được sử dụng cho tất cả các tương tác API.

Mã thông báo truy cập này cần được làm mới sau mỗi 30 phút bằng cách lặp lại quy trình được đánh dấu ở đây.

Bây giờ chúng ta đã thấy quy trình xác thực trông như thế nào, đây là một ví dụ đơn giản về cách sử dụng API mã thông báo để tìm nạp mã thông báo truy cập.

Chúng tôi đang sử dụng mã thông báo API ở đây.

Chúng tôi đang chuyển mã thông báo xác thực Bản đồ dưới dạng tiêu đề.

Bạn sẽ nhận lại mã thông báo truy cập Bản đồ có thể được sử dụng để truy cập API.

Điều này sẽ ở định dạng JWT và sẽ có các trường tiêu chuẩn như hết hạn, phát hành At, v.v.

Để thuận tiện, trường expiresInSeconds hiển thị mã thông báo có hiệu lực trong bao lâu.

Trong trường hợp này, đó là 30 phút.

Hãy nhớ rằng mã thông báo xác thực Bản đồ không giống như mã thông báo truy cập Bản đồ.

Bạn trao đổi mã thông báo xác thực Bản đồ để nhận mã thông báo truy cập Bản đồ dài 30 phút để truy cập API máy chủ.

Chúng ta hãy xem nhanh tương tác API với mã thông báo truy cập Maps trông như thế nào.

Chúng tôi sẽ chuyển mã thông báo truy cập Bản đồ cùng với lệnh gọi API máy chủ.

Nó được thêm vào dưới dạng tiêu đề cho lệnh gọi API, giống như chúng ta đã thấy một vài trang trình bày trước đây.

Máy chủ Apple Maps sẽ xác thực mã thông báo truy cập Maps.

Khi xác thực thành công, Máy chủ Apple Maps sẽ phản hồi bằng phản hồi API.

Bây giờ tôi đã đề cập đến API và xác thực, hãy để tôi nói về giới hạn sử dụng.

Quyền lực lớn đi kèm với trách nhiệm lớn, vì vậy hãy sử dụng hạn ngạch của bạn một cách khôn ngoan.

Có giới hạn hàng ngày về số lượng lệnh gọi API bạn có thể thực hiện và nó rất lớn!

Bạn sẽ nhận được tổng cộng 25.000 cuộc gọi dịch vụ mỗi ngày.

Hãy nhớ rằng, các dịch vụ gọi điện qua MapKit JS và API máy chủ sử dụng cùng một hạn ngạch.

Nếu bạn cần thêm, vui lòng liên hệ với chúng tôi.

Vậy, làm thế nào để bạn theo dõi tất cả những điều này?

Bạn có thể xem số liệu thống kê sử dụng của mình tại bảng điều khiển dành cho nhà phát triển Bản đồ.

Có ai đang sử dụng MapKit JS không?

Điều này sẽ trông rất quen thuộc với bạn.

Việc sử dụng API máy chủ được phân loại là Dịch vụ, bạn có thể thấy được đánh dấu ở đây.

Khi vượt quá hạn ngạch hàng ngày, có nghĩa là hơn 25.000 cuộc gọi API máy chủ, chúng tôi sẽ bắt đầu từ chối các cuộc gọi dịch vụ mới và phản hồi với trạng thái HTTP 429, có nghĩa là quá nhiều yêu cầu.

Bạn nên đảm bảo rằng trải nghiệm ứng dụng xuống cấp một cách duyên dáng trong những tình huống như vậy.

Trong những tình huống hiếm hoi, khi dịch vụ của bạn thực hiện một số lượng yêu cầu bất thường - có thể là do một số lỗi trong mã hoặc cơ sở hạ tầng của bạn - bạn cũng có thể nhận được trạng thái HTTP 429.

Khi bạn nhận được HTTP 429, điều quan trọng là không chỉ đơn giản là lặp lại nhiều lần trong việc đưa ra các yêu cầu.

Một cách tiếp cận tốt hơn là thử lại với sự chậm trễ ngày càng tăng giữa các lần thử.

Cách tiếp cận này được gọi là lùi theo cấp số nhân.

Vậy, hôm nay chúng ta đã học được gì?

Chúng tôi đang phát hành bốn API máy chủ mới.

Các API này là Mã hóa địa lý, Mã hóa địa lý ngược, Tìm kiếm và ETA.

Sử dụng các API này kết hợp với MapKit và MapKit JS sẽ giúp bạn kiến trúc tốt hơn các ứng dụng của mình bằng cách sử dụng ngăn xếp Apple Maps.

Bạn có thể tối ưu hóa các cuộc gọi dự phòng và lặp đi lặp lại bằng cách ủy thác các tác vụ đó cho máy chủ phụ trợ của mình bằng cách sử dụng API Máy chủ Apple Maps.

Hạn ngạch hàng ngày cho các API này là 25.000 và được chia sẻ với việc sử dụng dịch vụ MapKit JS của bạn.

Và đó là API Máy chủ Apple Maps mới dành cho bạn.

Hãy chắc chắn kiểm tra các phiên khác được đề cập ở đây và tài liệu chi tiết được liên kết bên dưới.

Chúng tôi mong muốn được xem bạn tận dụng chúng như thế nào.

Cảm ơn bạn!

♪