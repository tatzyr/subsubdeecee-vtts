10019

♪ nhạc cụ hip hop ♪

♪

Xin chào, tôi là Alejandro.

Tôi là một kỹ sư trong nhóm CreateML.

Hôm nay tôi sẽ nói về một API hoàn toàn mới để xây dựng các mô hình học máy bằng cách sử dụng các thành phần.

Tạo ML cung cấp một API đơn giản để đào tạo các mô hình học máy.

Nó dựa trên một tập hợp các nhiệm vụ được hỗ trợ như phân loại hình ảnh, phân loại âm thanh, v.v.

Tại WWDC 2021, chúng tôi đã trình bày hai cuộc nói chuyện tuyệt vời về khuôn khổ Create ML.

Hãy chắc chắn kiểm tra những thứ đó nếu bạn chưa có.

Nhưng tôi muốn nói về việc vượt ra ngoài các nhiệm vụ được xác định trước.

Điều gì sẽ xảy ra nếu bạn muốn tùy chỉnh một nhiệm vụ cho vấn đề cụ thể của mình ngoài những gì Create ML cung cấp?

Hoặc nếu bạn muốn xây dựng một loại nhiệm vụ khác thì sao?

Sử dụng các thành phần, giờ đây bạn có thể soạn các nhiệm vụ theo những cách mới và sáng tạo.

Hãy đào sâu vào.

Tôi sẽ bắt đầu bằng cách chia nhỏ một nhiệm vụ ML và giải thích từng thành phần làm gì.

Sau đó, tôi sẽ nói về cách bạn có thể ghép các thành phần lại với nhau.

Tiếp theo là một ví dụ về nhiệm vụ hình ảnh tùy chỉnh.

Sau đó, tôi sẽ nói về các nhiệm vụ dạng bảng.

Và tôi sẽ kết thúc với các chiến lược triển khai.

Hãy để tôi bắt đầu bằng cách khám phá bên trong một nhiệm vụ học máy để bạn hiểu những gì diễn ra và cách nó hoạt động.

Bằng cách này, khi chúng ta bắt đầu xây dựng các nhiệm vụ tùy chỉnh, bạn biết tôi đang nói về cái gì.

Tôi sẽ sử dụng một trình phân loại hình ảnh làm ví dụ.

Trình phân loại hình ảnh sử dụng danh sách các hình ảnh được gắn nhãn để đào tạo một mô hình.

Trong ví dụ này, tôi có hình ảnh của mèo và chó với nhãn tương ứng của chúng.

Nhưng hãy khám phá cách hình ảnh được chuyển đổi ở mỗi bước.

Để làm điều đó, tôi sẽ mở rộng nhiệm vụ phân loại hình ảnh để xem có gì bên trong.

Về mặt khái niệm, một trình phân loại hình ảnh rất đơn giản.

Nó bao gồm một trình trích xuất tính năng và một trình phân loại.

Nhưng phần quan trọng là các thành phần Create ML cho phép bạn truy cập vào các thành phần này một cách độc lập.

Bạn có thể thêm, xóa hoặc chuyển đổi các thành phần để soạn các tác vụ mới.

Tôi sẽ đại diện cho các thành phần dưới dạng hộp.

Mũi tên đại diện cho luồng dữ liệu.

Hãy phóng to bước đầu tiên của trình phân loại hình ảnh: trích xuất tính năng.

Nói chung, các trình trích xuất tính năng làm giảm kích thước của đầu vào bằng cách chỉ giữ lại các phần thú vị - các tính năng.

Trong trường hợp hình ảnh, một trình trích xuất tính năng tìm kiếm các mẫu trong hình ảnh.

Tạo ML sử dụng Vision Feature Print, đây là một trình trích xuất tính năng hình ảnh tuyệt vời được cung cấp bởi Vision Framework.

Bây giờ, hãy nói về phần thứ hai: bộ phân loại.

Một trình phân loại sử dụng một tập hợp các ví dụ để học cách phân loại.

Một số triển khai phổ biến là hồi quy logistic, cây được tăng cường và mạng lưới thần kinh.

Vì vậy, việc đào tạo một trình phân loại hình ảnh bắt đầu bằng các hình ảnh được chú thích, chuyển đến các tính năng được chú thích và kết thúc bằng trình phân loại.

Nhưng tại sao chúng ta lại muốn phá vỡ nó thành nhiều mảnh?

Lý do là chúng tôi muốn mở rộng các khả năng.

Có thể bạn muốn thực hiện một số tiền xử lý bằng cách tăng độ tương phản.

Hoặc có thể bạn muốn bình thường hóa tất cả các hình ảnh để chúng có độ sáng đồng đều trước khi bạn trích xuất các tính năng.

Hoặc có thể bạn muốn thử một trình trích xuất tính năng khác.

Hoặc có thể bạn muốn thử một trình phân loại khác.

Khả năng là vô tận.

Đây chỉ là một vài trong số các lựa chọn.

Đó là lý do tại sao chúng tôi đã thêm hỗ trợ cho các thành phần ML trong macOS, iOS, iPadOS và tvOS.

Hy vọng của chúng tôi là bạn có thể soạn thảo các mô hình mới bằng cách sử dụng một số thành phần mà chúng tôi cung cấp cùng với các thành phần của riêng bạn hoặc thậm chí các thành phần được xây dựng bởi những người khác trong cộng đồng.

Và bạn có thể tận dụng nó trên tất cả các nền tảng của chúng tôi.

Đây là một số thành phần được tích hợp trong Tạo Thành phần ML.

Nhưng hãy để tôi lùi lại một bước và giới thiệu một số khái niệm.

Có hai loại thành phần: máy biến áp và máy ước tính.

Máy biến áp chỉ đơn giản là một loại có thể thực hiện một số chuyển đổi.

Nó định nghĩa một loại đầu vào và một loại đầu ra.

Ví dụ, một trình trích xuất tính năng hình ảnh lấy một hình ảnh đầu vào và tạo ra một mảng các tính năng có hình dạng.

Mặt khác, một người ước tính cần học hỏi từ dữ liệu.

Nó lấy ví dụ đầu vào, thực hiện một số xử lý và sản xuất một máy biến áp.

Chúng tôi gọi quá trình này là "phù hợp".

Tuyệt vời. Với những khái niệm đó, hãy để tôi nói về cách Tạo Thành phần ML cho phép bạn xây dựng một trình phân loại hình ảnh từ các thành phần riêng lẻ của nó bằng cách sử dụng bố cục.

Đây là một trình phân loại hình ảnh sử dụng các thành phần.

Nó có ImageFeaturePrint là trình trích xuất tính năng và LogisticRegressionClassifier làm trình phân loại.

Bất kể một thành phần là máy biến áp hay công cụ ước tính, bạn kết hợp chúng bằng cách sử dụng phương pháp nối thêm.

Và đây là nơi các thành phần cung cấp khả năng không giới hạn.

Bạn có thể sử dụng mạng nơ-ron được kết nối đầy đủ như một bộ phân loại thay vì hồi quy logistic với một thay đổi đơn giản.

Hoặc bạn có thể sử dụng trình trích xuất tính năng tùy chỉnh trong mô hình CoreML.

Ví dụ, mô hình ResNet-50 không đầu mà bạn có thể tìm thấy trong thư viện mô hình.

Khi soạn thảo hai thành phần, đầu ra của thành phần đầu tiên phải khớp với đầu vào của thành phần thứ hai.

Trong trường hợp phân loại hình ảnh của chúng tôi, đầu ra của trình trích xuất tính năng là một mảng có hình dạng, từ khung CoreML.

Đó cũng là đầu vào của một bộ phân loại hồi quy logistic.

Nếu bạn gặp lỗi trình biên dịch khi sử dụng phương thức nối thêm, đây là điều đầu tiên cần kiểm tra.

Đảm bảo rằng các loại phù hợp.

Nhưng hãy để tôi làm rõ một điểm quan trọng xung quanh sự phù hợp.

Tôi đã nói trước đó rằng lắp đặt là quá trình chuyển từ máy ước tính sang máy biến áp.

Hãy nhìn vào điều này từ quan điểm của một công cụ ước tính sáng tác.

Khi công cụ ước tính sáng tác của bạn có cả máy biến áp và công cụ ước tính, như trong trường hợp phân loại hình ảnh, chỉ các phần công cụ ước tính mới được lắp.

Nhưng các máy biến áp là một phần quan trọng của quy trình vì chúng được sử dụng để cung cấp các tính năng chính xác cho phương pháp được trang bị của công cụ ước tính.

Đây là mã.

Trình phân loại hình ảnh cần một tập hợp các tính năng được chú thích trong đó các tính năng là hình ảnh và chú thích là chuỗi.

Chúng ta sẽ nói về việc tải các tính năng khi chúng ta đi vào bản demo.

Khi tôi có dữ liệu, tôi có thể gọi phương thức phù hợp.

Điều này trả lại mô hình đã được đào tạo, một máy biến áp.

Và điều quan trọng cần lưu ý là các loại được sử dụng khi lắp có liên quan nhưng khác với các loại máy biến áp kết quả.

Đặc biệt, các loại được sử dụng trong phương pháp phù hợp luôn là bộ sưu tập.

Và trong trường hợp các công cụ ước tính có giám sát, các tính năng phải bao gồm các chú thích.

Tạo các thành phần ML sử dụng loại Tính năng được chú thích để thể hiện một tính năng cùng với chú thích của nó.

Một khi tôi có mô hình, tôi có thể đưa ra dự đoán.

Không có vấn đề gì nếu đó là một mô hình tôi vừa lắp, hoặc nếu tôi đang tải các thông số từ một đĩa.

API giống nhau trong cả hai trường hợp.

Vì tôi đang đào tạo một người phân loại, kết quả là một phân phối phân loại.

Sự phân bố bao gồm xác suất cho mỗi nhãn.

Trong trường hợp này, tôi chỉ đang in nhãn có khả năng nhất cho hình ảnh.

Phương pháp phù hợp cũng cung cấp một cơ chế để quan sát các sự kiện đào tạo, bao gồm các chỉ số xác thực.

Trong ví dụ này, tôi đang chuyển dữ liệu xác thực và in độ chính xác xác thực.

Lưu ý rằng chỉ những người ước tính được giám sát mới cung cấp các chỉ số xác thực.

Khi bạn đào tạo một mô hình, bạn có thể lưu các thông số đã học, để sử dụng lại sau này hoặc để triển khai cho một ứng dụng.

Bạn làm điều này bằng cách sử dụng phương pháp viết.

Sau đó, bạn có thể đọc bằng phương pháp đọc.

Và đó là thành phần.

Đây là nơi nó trở nên thú vị.

Hãy để tôi nói về việc viết một nhiệm vụ mới, một thứ mà Create ML đã không hỗ trợ cho đến bây giờ.

Điều gì sẽ xảy ra nếu bạn muốn đào tạo một người mẫu để ghi điểm hình ảnh?

Giả sử bạn có ảnh trái cây, nhưng thay vì phân loại trái cây, bạn muốn đánh giá nó.

Cho nó điểm dựa trên độ chín của nó.

Để làm điều này, bạn cần thực hiện hồi quy thay vì phân loại.

Vì vậy, hãy để tôi viết một bộ hồi quy hình ảnh cho điểm số cho hình ảnh của chuối dựa trên độ chín.

Tôi sẽ cho mỗi hình ảnh một giá trị độ chín từ một đến 10.

Bộ hồi quy hình ảnh rất giống với bộ phân loại hình ảnh.

Sự khác biệt duy nhất là công cụ ước tính của chúng tôi sẽ là một bộ hồi quy thay vì một bộ phân loại.

Như bạn có thể đã đoán, điều này sẽ dễ dàng.

Để làm mới bộ nhớ của bạn, đây là trình phân loại hình ảnh của chúng tôi.

Và đây là một bộ hồi quy hình ảnh.

Tôi đã thay thế bộ phân loại hồi quy logistic bằng bộ hồi quy tuyến tính.

Sự thay đổi đơn giản này cũng thay đổi đầu vào dự kiến sang phương pháp phù hợp.

Trước đây, nó mong đợi hình ảnh và nhãn hiệu.

Bây giờ, nó mong đợi hình ảnh và điểm số.

Nhưng đủ về các khái niệm rồi.

Hãy để tôi giới thiệu cái này với một số mã thực tế.

Hãy để tôi chỉ cho bạn cách viết một bộ hồi quy hình ảnh tùy chỉnh.

Tôi sẽ bắt đầu bằng cách xác định một cấu trúc ImageRegressor để gói gọn mã.

Tôi có một thư mục với hình ảnh chuối ở các mức độ chín khác nhau.

Tôi sẽ bắt đầu bằng cách xác định URL đó.

Bước tiếp theo là thêm một phương thức tàu hỏa.

Đây là nơi bạn sử dụng dữ liệu đào tạo để tạo ra một mô hình.

Tôi sẽ sử dụng từ khóa "some" trên loại trả về để loại trả về không thay đổi khi tôi thêm hoặc sửa đổi các bước trong công cụ ước tính đã soạn.

Bây giờ, tôi sẽ xác định công cụ ước tính.

Nó chỉ đơn giản là trình trích xuất tính năng với bộ hồi quy tuyến tính được thêm vào.

Và bây giờ, tôi cần tải các hình ảnh đào tạo với điểm số của chúng.

Tôi có thể sử dụng AnnotatedFiles, đây là một bộ sưu tập các tính năng được chú thích có chứa URL và nhãn chuỗi.

Nó cung cấp một trình khởi tạo tiện lợi phù hợp với nhu cầu của tôi.

Các tệp của tôi bao gồm một cái tên, theo sau là dấu gạch ngang, theo sau là giá trị độ chín.

Vì vậy, tôi sẽ chỉ định rằng dấu phân cách là dấu gạch ngang và chú thích nằm ở chỉ mục: 1 trong số các thành phần tên tệp.

Tôi cũng sẽ chỉ yêu cầu các tệp hình ảnh bằng cách sử dụng đối số loại.

Bây giờ tôi đã có URL, tôi cần tải các hình ảnh.

Tôi có thể sử dụng phương pháp mapFeatures và ImageReader để làm điều này.

Tôi cũng cần chuyển đổi điểm số từ chuỗi sang giá trị dấu phẩy động.

Tôi có thể sử dụng phương pháp mapAnnotations để làm điều này.

Và với điều đó, tôi có dữ liệu đào tạo.

Nhưng tôi muốn đặt một số trong số đó sang một bên để xác nhận.

Tôi có thể sử dụng phương pháp randomSplit để làm điều này.

Tôi sẽ giữ 80 phần trăm để đào tạo và sử dụng phần còn lại để xác nhận.

Bây giờ, tôi đã sẵn sàng để phù hợp.

Và tôi sẽ lưu các thông số đã đào tạo để tôi có thể triển khai vào ứng dụng của mình.

Tôi sẽ chọn một địa điểm để lưu vào.

Và tôi sẽ gọi phương thức viết.

Cuối cùng, tôi sẽ trả lại máy biến áp.

Đây là bản chất của việc xác định và đào tạo một mô hình bằng cách sử dụng các thành phần.

Tôi đã xác định công cụ ước tính sáng tác của mình, tôi đã tải dữ liệu đào tạo của mình, tôi đã gọi phương thức phù hợp và tôi đã sử dụng ghi để lưu các tham số.

Nhưng có một số điều tôi có thể cải thiện.

Để bắt đầu, tôi đang chuyển một tập dữ liệu xác thực nhưng không quan sát thấy lỗi xác thực, vì vậy tôi sẽ làm điều đó.

Phương pháp phù hợp có một trình xử lý sự kiện mà bạn có thể sử dụng để thu thập số liệu.

Hiện tại, tôi sẽ chỉ in cả giá trị lỗi tối đa đào tạo và xác thực.

Tôi cũng muốn sai số tuyệt đối trung bình cho mô hình cuối cùng.

Tôi tính toán điều đó bằng cách áp dụng máy biến áp được trang bị cho các tính năng xác thực và sau đó chuyển nó cùng với điểm số thực tế cho hàm meanAbsoluteError.

Tôi đã chạy cái này nhưng tôi không nhận được một mô hình tuyệt vời - lỗi rất cao.

Điều này là do tôi không có nhiều hình ảnh về chuối.

Tôi nên có nhiều hình ảnh hơn, nhưng trước khi làm điều đó, tôi có thể thử tăng cường tập dữ liệu của mình.

Tôi có thể xoay và chia tỷ lệ hình ảnh của mình để có thêm ví dụ.

Để làm điều này, tôi sẽ viết một phương pháp mới lấy một hình ảnh được chú thích và tăng cường nó.

Nó trả về một mảng các hình ảnh được chú thích.

Lần tăng cường đầu tiên tôi sẽ làm là xoay vòng.

Tôi sẽ chọn ngẫu nhiên một góc giữa -pi và pi và sử dụng nó để xoay hình ảnh.

Tôi cũng sẽ làm một thang đo ngẫu nhiên.

Và tôi sẽ trả lại ba hình ảnh: bản gốc, hình xoay và hình thu nhỏ.

Bây giờ tôi đã có chức năng tăng cường của mình, tôi sẽ sử dụng nó để tăng cường hình ảnh đào tạo của mình bằng cách sử dụng flatMap.

Mỗi phần tử trong tập dữ liệu của tôi sẽ được chuyển đổi thành một mảng.

FlatMap làm phẳng mảng mảng đó thành một mảng duy nhất, đó là những gì tôi cần cho phương pháp được trang bị.

Lưu ý rằng việc tăng cường chỉ áp dụng khi phù hợp, không áp dụng khi thực hiện dự đoán.

Được rồi, điều này làm tăng độ chính xác của tôi.

Nhưng hãy để tôi nói về một cải tiến nữa sẽ làm cho mô hình của tôi thậm chí còn tốt hơn.

Tôi muốn sử dụng khung Vision để cắt các hình ảnh thành đối tượng nổi bật.

Đây là một trong những hình ảnh trong dữ liệu đào tạo của tôi.

Ai đó đang cầm chuối với các loại trái cây khác trong nền.

Người mẫu có thể bị nhầm lẫn bởi các đối tượng khác trong ảnh.

Sử dụng Vision framework API, tôi có thể tự động cắt hình ảnh thành đối tượng nổi bật nhất.

Để làm điều này, vui lòng xem cuộc nói chuyện về Tầm nhìn từ WWDC 2019.

Tôi có thể dễ dàng áp dụng chuyển đổi này cho tất cả các hình ảnh của mình, cả khi lắp và khi nhận được dự đoán nếu tôi viết một máy biến áp tùy chỉnh.

Để tôi chỉ cho bạn cách làm.

Điều duy nhất tôi cần làm để phù hợp với giao thức máy biến áp là thực hiện phương pháp được áp dụng.

Và trong trường hợp này, tôi muốn nó chụp một hình ảnh và trả lại một hình ảnh.

Tôi sẽ không đi sâu vào mã này, ngoại trừ việc nói rằng nếu tôi không nhận được một đối tượng nổi bật, tôi sẽ chỉ trả lại hình ảnh gốc.

Bây giờ tôi đã có máy biến áp tùy chỉnh của mình, tôi sẽ thêm nó vào bộ hồi quy hình ảnh của mình.

Tôi chỉ cần sử dụng máy biến áp tùy chỉnh của mình trước khi trích xuất tính năng.

Bây giờ sự nổi lút là một phần trong định nghĩa nhiệm vụ của tôi, nó sẽ được sử dụng để cắt mọi hình ảnh đào tạo và nó cũng sẽ được sử dụng khi suy luận.

Đây là một trong những lợi thế của việc chia sẻ định nghĩa nhiệm vụ giữa đào tạo và suy luận.

Trước khi chúng ta chuyển sang nhiệm vụ tiếp theo, hãy để tôi nêu bật một số điểm quan trọng.

Sử dụng các thành phần, bây giờ tôi có thể tạo các tác vụ tùy chỉnh.

Tôi đã làm điều này bằng cách sử dụng phương pháp nối thêm.

Tôi đã sử dụng AnnotatedFiles để tải các tệp của mình với tên tệp được chú thích, nhưng bạn cũng có thể tải các tệp được chú thích bởi các thư mục.

Tôi đã ánh xạ URL đến hình ảnh bằng ImageReader và ánh xạ các chú thích từ chuỗi đến các giá trị.

Tôi đã sử dụng randomSplit để đặt sang một tập dữ liệu xác thực và tôi đã lưu các tham số đã đào tạo để sử dụng sau này.

Sau đó, tôi đã thêm các tăng cường và xác định một máy biến áp tùy chỉnh để cải thiện mô hình của mình.

Nhưng điều này không chỉ hiệu quả với hình ảnh.

Tôi sẽ chuyển số và nói về một loại nhiệm vụ khác: nhiệm vụ dạng bảng.

Đây là những nhiệm vụ sử dụng dữ liệu dạng bảng.

Dữ liệu dạng bảng được đặc trưng bởi có nhiều tính năng của các loại khác nhau.

Nó có thể bao gồm cả dữ liệu số cũng như dữ liệu phân loại.

Một ví dụ phổ biến là dữ liệu định giá nhà.

Bạn có những thứ như diện tích và tuổi tác, nhưng cũng có những thứ như khu phố, loại tòa nhà, v.v.

Và bạn muốn học cách dự đoán một giá trị; ví dụ, giá bán.

Vào năm 2021, chúng tôi đã giới thiệu khung TabularData.

Bây giờ bạn có thể sử dụng khung TabularData cùng với Create ML Components để xây dựng và đào tạo các trình phân loại và hồi quy dạng bảng.

Tôi cũng đề xuất buổi nói chuyện công nghệ trên TabularData.

Đó là một phần giới thiệu tuyệt vời về khám phá dữ liệu, mà bạn có thể sẽ cần khi xây dựng một nhiệm vụ dạng bảng.

Hãy đi sâu vào.

Khi xử lý dữ liệu dạng bảng, mỗi cột của bảng sẽ có một loại tính năng khác nhau.

Và bạn có thể muốn xử lý từng cột khác nhau, dựa trên loại thông tin mà nó chứa; sự phân bố, phạm vi giá trị và các yếu tố khác.

Tạo các thành phần ML cho phép bạn làm điều này bằng cách sử dụng ColumnSelector.

Đây là một ví dụ.

Tôi đã đề cập đến giá nhà, nhưng những thứ đó thật nực cười.

Thay vào đó tôi sẽ dùng giá bơ.

Tôi có bảng giá bơ này.

Tôi muốn xây dựng một bộ hồi quy dạng bảng để dự đoán giá bơ dựa trên điều này.

Nó chứa các cột với dữ liệu số như túi, năm và khối lượng và các cột với dữ liệu phân loại như loại và khu vực.

Một số bộ hồi quy được hưởng lợi từ việc thể hiện tốt hơn các giá trị này.

Ví dụ, đây là sự phân bố các giá trị âm lượng trong tập dữ liệu.

Nó gần với phân phối bình thường, nhưng với các giá trị lớn tập trung vào khoảng 15.000.

Tôi nghĩ đây là một ví dụ tuyệt vời về tập dữ liệu có thể được hưởng lợi từ việc chuẩn hóa.

Vì vậy, điều đầu tiên tôi muốn làm là bình thường hóa những giá trị này.

Để làm điều này, tôi có thể chuyển tên cột mà tôi muốn chuẩn hóa cho ColumnSelector và sau đó sử dụng bộ chia tỷ lệ tiêu chuẩn.

Đây là mã.

Đầu tiên tôi tạo một bộ chọn cột.

Sau đó tôi chuyển tên cột mà tôi muốn chia tỷ lệ.

Tất cả các cột phải chứa cùng một loại phần tử; trong trường hợp này, Double.

Sau đó tôi mở gói các tùy chọn.

Tôi có thể làm điều này bởi vì tôi biết không có giá trị nào bị thiếu.

Nhưng tôi cũng có thể sử dụng một imputer để thay thế các giá trị bị thiếu.

Và sau đó tôi thêm StandardScaler vào unwrapper.

Vì vậy, tôi bắt đầu với bảng này, nơi số lượng túi lên tới hàng chục nghìn và khối lượng lên tới hàng trăm nghìn.

Và sau khi chia tỷ lệ các cột đó, tôi kết thúc với các giá trị hiện có độ lớn gần bằng một, điều này có thể cải thiện hiệu suất của mô hình của tôi.

Cụ thể hơn, các giá trị của tôi bây giờ có giá trị trung bình bằng 0 và độ lệch chuẩn là một.

Đây là một ví dụ tương tự, nhưng trong ví dụ này, tôi đang chọn các cột loại và vùng, thuộc loại chuỗi và thực hiện mã hóa một lần.

Mã hóa một nóng đề cập đến việc mã hóa dữ liệu phân loại bằng cách sử dụng một mảng để chỉ ra sự hiện diện của từng danh mục.

Trong ví dụ này, tôi có ba loại: Đồng, Bạc và Vàng.

Mỗi người nhận được một vị trí duy nhất trong mảng, được biểu thị bằng một vị trí ở vị trí đó.

Một giải pháp thay thế là sử dụng bộ mã hóa thứ tự, cung cấp một số liên tiếp cho mỗi danh mục.

Sử dụng bộ mã hóa một nóng khi chỉ có một vài danh mục và một bộ mã hóa thứ tự nếu không.

Bây giờ hãy để tôi kết hợp tất cả những điều này lại với nhau và xây dựng một bộ hồi quy dạng bảng.

Như trước đây, tôi sẽ bắt đầu tạo một cấu trúc và xác định URL dữ liệu và URL tham số.

Tôi cũng muốn xác định ID cột cho cột mà tôi muốn dự đoán: giá cả.

Tôi sẽ xác định nhiệm vụ của mình một cách riêng biệt để tôi có thể sử dụng nó cả từ phương pháp tàu hỏa và phương pháp dự đoán.

Như tôi đã đề cập, tôi sẽ bình thường hóa âm lượng.

Sau đó, tôi sẽ sử dụng bộ hồi quy cây tăng cường để dự đoán giá cả.

Nó lấy tên của cột chú thích - cũng là cột của các dự đoán kết quả - và nó lấy tên của cả ba cột tính năng.

Tôi sẽ bắt đầu với ba cột này.

Sau đó, tôi sẽ kết hợp các phần bằng cách sử dụng phương pháp nối thêm và trả lại nhiệm vụ.

Bây giờ tôi đã có định nghĩa nhiệm vụ của mình, tôi sẽ thêm một phương pháp đào tạo như trước đây.

Và như trước đây, tôi muốn đảm bảo rằng loại trả lại không phụ thuộc vào chi tiết cụ thể của mô hình của tôi.

Bước đầu tiên là tải tệp CSV vào khung dữ liệu.

Tôi đang sử dụng khung TabularData để làm điều này.

Và như trước đây, tôi muốn tách một số dữ liệu để xác thực.

Tôi sẽ chuyển các bộ dữ liệu đào tạo và xác thực sang phương pháp phù hợp.

Tôi cũng sẽ báo cáo lỗi xác thực như trước đây và tôi sẽ lưu các thông số đã đào tạo để sử dụng sau.

Cuối cùng, tôi sẽ trả lại máy biến áp.

Khi tôi có một máy biến áp được đào tạo, tôi có thể sử dụng nó để đưa ra dự đoán giá trên các khung dữ liệu.

Tôi sẽ viết một phương pháp dự đoán để làm điều này.

Tôi sẽ bắt đầu bằng cách tải mô hình từ định nghĩa nhiệm vụ và URL tham số.

Tôi cần đảm bảo khung dữ liệu tôi sử dụng để dự đoán có các cột tôi đã sử dụng làm tính năng: loại, vùng và âm lượng.

Giá trị dự đoán sẽ nằm trong cột giá.

Tôi sẽ sử dụng ID cột mà tôi đã xác định ở trên cùng.

Và điều đó kết thúc hồi quy dạng bảng của tôi.

Tôi có một phương pháp đào tạo, mà tôi chỉ cần gọi một lần để tạo ra các thông số đã đào tạo của mình và một phương pháp dự đoán trả về giá bơ, dự đoán dựa trên loại, khu vực và khối lượng bơ.

Đó là tất cả những gì tôi cần để sử dụng cái này trong ứng dụng của mình.

Dưới đây là một số điều cần ghi nhớ khi thực hiện các nhiệm vụ dạng bảng.

Bạn có thể sử dụng các thao tác ColumnSelector để xử lý các cột cụ thể.

Điều đáng chú ý là các trình phân loại và hồi quy cây đều là dạng bảng, nhưng bạn cũng có thể sử dụng công cụ ước tính không phải bảng, chẳng hạn như trình hồi quy tuyến tính, trong tác vụ dạng bảng bằng AnnotatedFeatureProvider.

Vui lòng tham khảo tài liệu.

Khi thực hiện dự đoán, hãy xây dựng một khung dữ liệu với các cột cần thiết, đảm bảo sử dụng đúng loại.

Bây giờ bạn đã biết cách xây dựng một nhiệm vụ tùy chỉnh, hãy nói về việc triển khai.

Cho đến nay, tôi đã sử dụng cùng một API để đào tạo và suy luận.

Tôi muốn chỉ ra rằng khi sử dụng Create ML Components, mô hình của bạn là mã của bạn.

Bạn cần định nghĩa nhiệm vụ, ngay cả khi tải các tham số đã đào tạo từ một tệp.

Điều này hữu ích trong một số tình huống, nhưng đôi khi bạn có thể muốn sử dụng Core ML để triển khai.

Khi sử dụng Core ML, bạn để lại mã phía sau.

Mô hình được thể hiện đầy đủ bằng một tệp mô hình.

Nếu tất cả các bạn đã sẵn sàng sử dụng Core ML, đây có thể là một quy trình làm việc tốt.

Và nó có ưu điểm là các hoạt động tensor được tối ưu hóa.

Nhưng có một số cân nhắc bạn nên ghi nhớ.

Không phải tất cả các hoạt động đều được hỗ trợ trong Core ML.

Cụ thể, máy biến áp và công cụ ước tính tùy chỉnh không được hỗ trợ.

Và Core ML chỉ hỗ trợ một vài loại như hình ảnh và mảng có hình dạng.

Nếu bạn đang sử dụng các loại tùy chỉnh, bạn có thể cần chuyển đổi chúng trong ứng dụng của mình khi sử dụng mô hình Core ML.

Đây là cách bạn có thể xuất máy biến áp của mình dưới dạng mô hình Core ML.

Nếu máy biến áp của bạn chứa các hoạt động không được hỗ trợ, điều này sẽ gây ra lỗi.

Nếu bạn muốn gắn bó với việc triển khai định nghĩa nhiệm vụ của mình cùng với các thông số đã được đào tạo, bạn nên cân nhắc gói chúng trong gói Swift.

Bằng cách này, bạn có thể cung cấp các phương pháp đơn giản để tải các tham số và thực hiện dự đoán.

Để biết thêm thông tin về tài nguyên gói Swift, hãy xem bài nói chuyện về gói Swift từ WWDC 2020.

Đó là tất cả những gì tôi có.

Điều chính cần nhớ là bây giờ bạn có thể tạo các tác vụ tùy chỉnh với bố cục.

Khả năng là vô tận.

Tôi mong chờ được thấy những gì bạn xây dựng.

Để biết các kỹ thuật nâng cao hơn, bao gồm các tác vụ âm thanh và video, hãy xem "Sẽ các mô hình nâng cao với Tạo Thành phần ML", nơi đồng nghiệp David của tôi sẽ trình bày các tác vụ tùy chỉnh nâng cao hơn.

Cảm ơn bạn và tận hưởng phần còn lại của WWDC 2022!

♪