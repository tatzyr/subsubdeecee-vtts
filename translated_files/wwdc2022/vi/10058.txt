10058

♪ ♪

Raj Ramamurthy: Xin chào, và chào mừng đến với "SwiftUI trên iPad: Tổ chức giao diện của bạn."

Tôi là Raj, và tôi làm việc trên SwiftUI.

iPadOS 16 có một số bản cập nhật để cho phép xây dựng các ứng dụng chuyên nghiệp, hiệu quả hơn với các tính năng phong phú.

Trong phiên này, tôi sẽ thảo luận một vài trong số chúng và nói về việc tổ chức giao diện của các ứng dụng SwiftUI của bạn để tỏa sáng trên iPad.

Để bắt đầu, tôi sẽ đưa bạn đi tham quan các danh sách và bảng.

Sau đó, tôi sẽ nói về mô hình lựa chọn SwiftUI và cách tích hợp lựa chọn với các menu.

Cuối cùng, tôi sẽ thảo luận về cách cấu trúc điều hướng ứng dụng của bạn cho iPad bằng cách sử dụng chế độ xem phân tách.

Nhưng khoan đã, còn nhiều nữa.

Đây thực sự là phiên đầu tiên của loạt bài gồm hai phần.

Trong phần thứ hai, đồng nghiệp Harry của tôi tham quan các thanh công cụ, tiêu đề và hơn thế nữa.

Harry bao gồm một số bổ sung thực sự quan trọng đưa các ứng dụng SwiftUI iPad lên một tầm cao mới, vì vậy hãy đảm bảo xem cả hai phiên.

Hãy bắt đầu với danh sách và bảng biểu.

Gần đây tôi đã tham gia một vài câu lạc bộ sách, nhưng tôi đang chạy khá chậm.

Thật khó để tìm một nơi yên tĩnh để đọc.

Vì vậy, để giúp tôi tập trung vào việc đọc của mình, tôi đã bắt đầu làm việc trên một ứng dụng để tìm những nơi yên tĩnh thần thoại này.

Một nơi yên tĩnh giống như một ốc đảo đọc sách, nơi các trang chỉ bay.

Và ứng dụng này giúp tôi theo dõi tất cả những nơi yên tĩnh mà tôi đã tìm thấy.

Tôi đã xây dựng ứng dụng cho iPhone, nhưng tôi nghĩ sẽ là một bài tập thú vị để cập nhật nó cho iPad để thực sự tận dụng màn hình lớn hơn.

Bằng cách làm cho ứng dụng tốt hơn cho iPad, tôi cũng sẽ tiến xa hơn khi cuối cùng tôi mang nó đến Mac.

Tôi sẽ không đề cập đến Mac một cách rõ ràng trong phiên này, nhưng nhiều API được hiển thị cũng áp dụng trên macOS.

Đây là danh sách tất cả những nơi yên tĩnh mà tôi đã tìm thấy cho đến nay.

Danh sách này là một nơi tuyệt vời để bắt đầu với việc cập nhật ứng dụng.

Tôi đã bắt đầu làm việc trên phiên bản iPad.

Nó không tệ, nhưng nó không tận dụng lợi thế của màn hình lớn hơn.

Có khá nhiều không gian bị lãng phí và mật độ thông tin thấp.

Rất may, trong iPadOS 16, có một giải pháp tuyệt vời cho các loại kịch bản dày đặc thông tin này: bảng nhiều cột.

Hãy để tôi cho bạn thấy chúng trông như thế nào.

Đây là chế độ xem "Tất cả các địa điểm" sau khi áp dụng SwiftUI API cho các bảng nhiều cột.

Tôi sẽ hướng tới ảnh chụp màn hình này trong vài phút tới.

Các bảng nhiều cột trong SwiftUI lần đầu tiên được giới thiệu trong macOS Monterey và bắt đầu từ iPadOS 16, cùng một bảng API hiện có sẵn cho iPad.

Cũng giống như trên Mac, các bảng trên iPad hỗ trợ nhiều cột và sắp xếp.

Cùng với việc giới thiệu các bảng trên iPad, SwiftUI hiện hỗ trợ các phần trong bảng trên iPad và Mac.

Hướng dẫn chung xung quanh các bảng từ phiên trước "SwiftUI trên Mac: Xây dựng các nguyên tắc cơ bản" vẫn áp dụng trên iPad, vì vậy tôi mời bạn xem phiên đó nếu bạn chưa xem.

Hãy xây dựng bảng được hiển thị trước đó, bắt đầu từ danh sách iPhone.

Đây là mã cho danh sách địa điểm từ trước đó.

Đầu tiên, tôi sẽ chuyển từ một danh sách sang một bảng.

Các bảng có cấu trúc khác với danh sách.

Thay vì trình tạo chế độ xem, các bảng chấp nhận trình tạo cột.

Cột đầu tiên tôi sẽ thêm là cho tên của địa điểm.

Cột yêu cầu tên cho tiêu đề của nó và trình tạo chế độ xem để tạo chế độ xem cho từng phần tử trong bộ sưu tập.

Tôi cũng đã chỉ định một đường dẫn khóa giá trị, điều này sẽ rất quan trọng sau này khi tôi thêm sắp xếp vào bảng.

Chú ý mức độ tương tự của trình tạo chế độ xem với cấu trúc dựa trên danh sách.

Trên thực tế, tôi thậm chí có thể sử dụng lại loại PlaceCell từ trước.

Trong các lớp kích thước nhỏ gọn, các bảng chỉ hiển thị cột đầu tiên của chúng, điều đó có nghĩa là bàn của tôi vẫn trông tuyệt vời trên iPhone và trong slide trên iPad.

Bạn có thể nhận thấy rằng điều này tương tự như một danh sách về ngoại hình.

Nhưng tôi không chỉ thay thế bảng bằng một danh sách, bởi vì việc sử dụng lại bảng cho phép giữ nguyên vị trí cuộn và lựa chọn khi chuyển đổi giữa các lớp kích thước.

Nói chung, hãy đảm bảo sử dụng cột đầu tiên để có giao diện nhỏ gọn cụ thể và luôn đảm bảo rằng bạn đang thử nghiệm các ứng dụng iPad của mình trong nhiều môi trường khác nhau, như trượt qua.

Được rồi, tiếp tục đi.

Tôi sẽ thêm các cột cho sự thoải mái và mức độ tiếng ồn.

Đối với các cột chỉ có nội dung văn bản, TableColumn cung cấp một API tiện lợi cho phép tôi bỏ qua trình tạo chế độ xem khi giá trị của tôi trỏ đến một chuỗi.

Và trong trường hợp này, tôi biết mức độ thoải mái sẽ không cần nhiều chỗ, vì vậy tôi đã áp dụng một chiều rộng cố định.

Tôi cũng có thể thêm sắp xếp vào bảng bằng cách sử dụng bộ so sánh.

Tôi sẽ tạo một số trạng thái để lưu trữ các bộ so sánh.

Trạng thái ở đây là một mảng vì nó đại diện cho tất cả các bộ so sánh cho bảng.

Và đặt giá trị ban đầu thành bộ so sánh tên cho phép bảng xuất hiện được sắp xếp khi nó được hiển thị lần đầu tiên.

Tiếp theo, tôi sẽ chuyển một ràng buộc đến trạng thái của mình vào bảng để kết nối mọi thứ.

Bởi vì mỗi cột chỉ định giá trị của chúng như một đường dẫn chính đến một trường có thể so sánh được, chúng có thể sắp xếp theo mặc định.

Và bây giờ bàn hoàn toàn có thể sắp xếp theo tên, mức độ thoải mái và tiếng ồn.

Lưu ý rằng bảng không tự xử lý việc sắp xếp.

Điều đó tùy thuộc vào tôi.

Tôi có thể sử dụng công cụ sửa đổi onChange để sắp xếp dữ liệu khi thứ tự sắp xếp thay đổi.

Được rồi, chúng ta hãy lấy nó để quay một vòng.

Bảng trông tuyệt vời, hiển thị tất cả dữ liệu địa điểm và thực sự tận dụng màn hình lớn hơn.

Không giống như trên Mac, các bảng trên iPad không cuộn theo chiều ngang, vì vậy điều quan trọng là phải giới hạn số lượng cột.

Điều này đảm bảo rằng tất cả các cột có thể được hiển thị cùng một lúc.

Mỗi cột hiển thị nhãn của nó trong tiêu đề.

Và nhấn vào nhãn sẽ sắp xếp cột đó.

Tôi thậm chí có thể sắp xếp theo mức độ tiếng ồn.

Và khi trượt qua, bảng thu gọn thành một cột duy nhất đại diện cho tất cả thông tin ở định dạng cô đọng hơn.

Bây giờ tôi đã cập nhật danh sách vào một bảng, hãy đi sâu vào lựa chọn.

Trong phần này, tôi sẽ xem xét mô hình lựa chọn SwiftUI và thảo luận về việc tích hợp lựa chọn với các menu.

Trên đường đi, tôi sẽ tăng cường bảng địa điểm với chức năng phong phú.

Nhưng trước tiên, tôi sẽ nói về cách lựa chọn hoạt động trong SwiftUI.

SwiftUI bao gồm một API mạnh mẽ để quản lý danh sách và lựa chọn bảng.

Đây là một sơ đồ với một danh sách chứa một vài hàng.

Mỗi hàng có một thẻ.

Các thẻ này là các giá trị duy nhất cho mỗi hàng giúp danh sách quản lý lựa chọn.

Trong sơ đồ này, các thẻ được hiển thị trong các vòng tròn màu xanh lá cây.

Cùng với thẻ, cũng có một số trạng thái giữ lựa chọn.

Đây là loại giữ các giá trị thẻ.

Ví dụ, với nhiều lựa chọn, đây là một tập hợp chứa các thẻ cho mỗi hàng đã chọn.

Công việc của danh sách là phối hợp giữa thẻ trong mỗi hàng và trạng thái lựa chọn.

Và nó thực hiện điều này thông qua ràng buộc lựa chọn của nó.

Vì vậy, khi một hàng được chọn, chẳng hạn như hàng số hai ở đây, danh sách sẽ thêm nó vào tập hợp thông qua ràng buộc lựa chọn.

Và tương tự, nếu một số phần khác của ứng dụng thay đổi bộ theo chương trình, hãy thêm ba phần như được hiển thị ở đây, danh sách sẽ chọn nó vì ràng buộc lựa chọn thay đổi.

Mô hình chung này giống nhau trên iOS và macOS.

Vì vậy, có hai phần để lựa chọn: một thẻ và một số trạng thái.

Tiếp theo, tôi muốn nói về việc thẻ đến từ đâu.

Thẻ chỉ là một giá trị cho chế độ xem trong vùng chứa có thể lựa chọn được sử dụng để theo dõi xem chế độ xem đó có được chọn hay không.

Trong nhiều trường hợp, SwiftUI có thể tự động tổng hợp các thẻ thay mặt bạn.

Các thẻ tương tự như số nhận dạng, nhưng không hoàn toàn giống nhau.

Khi sử dụng ForEach, SwiftUI sẽ tự động lấy thẻ cho chế độ xem từ danh tính rõ ràng của nó.

Và các bảng sẽ sử dụng mã định danh giá trị hàng của chúng làm thẻ lựa chọn.

Trong ứng dụng địa điểm, điều đó có nghĩa là loại định danh của cấu trúc địa điểm sẽ được sử dụng.

Để biết thêm thông tin về danh tính rõ ràng, hãy xem "Demystify SwiftUI."

Để gắn thẻ chế độ xem theo cách thủ công, hãy sử dụng công cụ sửa đổi thẻ.

Đây là những gì ForEach làm dưới mui xe.

Công cụ sửa đổi thẻ có giá trị Hashable.

Tuy nhiên, khi sử dụng công cụ sửa đổi thẻ, hãy cẩn thận - điều quan trọng là tất cả các chế độ xem trong vùng chứa có thể lựa chọn phải chia sẻ cùng một loại thẻ.

Nếu không, SwiftUI có thể không biết cách chọn chế độ xem.

Lưu ý rằng nếu bạn sử dụng công cụ sửa đổi ID, nó sẽ không đặt thẻ.

Vậy đó là tổng quan về các thẻ. Hãy mang lại sơ đồ từ trước đó.

Bây giờ tôi đã giải thích phần thẻ của sơ đồ này, tôi muốn tập trung vào nửa còn lại của phương trình chọn lọc: trạng thái lựa chọn.

Trong ví dụ trước, tôi đã sử dụng một tập hợp, nhưng cũng có những lựa chọn khác.

Bạn có thể sử dụng các cấu trúc dữ liệu này để thể hiện sự lựa chọn.

SwiftUI hỗ trợ lựa chọn đơn, mới trong macOS Ventura, lựa chọn bắt buộc cho thanh bên macOS và nhiều lựa chọn.

iPadOS 16 cũng giới thiệu nhiều lựa chọn nhẹ.

Bây giờ, với một bàn phím được gắn vào, bạn không cần phải vào chế độ chỉnh sửa để chọn nhiều hàng, điều này giúp tránh phương thức.

Khi sử dụng bàn phím, bạn có thể sử dụng các phím tắt phổ biến như shift và command để mở rộng và sửa đổi lựa chọn.

Và điều này hoạt động tốt với con trỏ.

Đây là bảng địa điểm trông như thế nào sau khi áp dụng lựa chọn.

Trong ví dụ này, tôi có một bàn phím và bàn di chuột kèm theo, vì vậy các hàng không được thụt lề, nhưng chúng vẫn được chọn.

Tuy nhiên, khi sử dụng cảm ứng, tôi vẫn cần vào chế độ chỉnh sửa, chế độ này được tăng tốc bằng cách sử dụng chảo hai ngón tay.

SwiftUI hỗ trợ cử chỉ này một cách tự động.

Nói về chế độ chỉnh sửa, có một số cập nhật với lựa chọn đơn lẻ và chế độ chỉnh sửa.

Trong iOS 16, lựa chọn danh sách trên iPhone và iPad không còn yêu cầu chế độ chỉnh sửa khi chọn một hàng duy nhất.

Và điều này cực kỳ hữu ích để phối hợp với các API điều hướng được cập nhật.

Với tất cả các bản cập nhật này, điều đó đưa chúng ta đến bảng này, được xây dựng dựa trên bảng trước đó bằng cách thêm một cột mới cho chế độ chỉnh sửa.

Chế độ chỉnh sửa chỉ được yêu cầu khi sử dụng nhiều lựa chọn mà không có bàn phím.

Vì vậy, với điều đó, tôi sẽ cập nhật bảng địa điểm để hỗ trợ lựa chọn.

Tôi có thể dễ dàng thêm lựa chọn vào bảng địa điểm bằng cách thêm một số trạng thái để lưu trữ lựa chọn.

Sau khi tạo trạng thái, tôi sẽ chuyển một ràng buộc đến trình khởi tạo bảng.

Bảng xác nhận rằng loại lựa chọn của nó khớp với số nhận dạng hàng của nó, vì vậy tôi đã sử dụng loại ID địa điểm làm loại lựa chọn.

Vì tôi muốn nhiều lựa chọn, tôi đã sử dụng một tập hợp cho trạng thái lựa chọn.

Bảng tự động gắn thẻ các hàng của nó, vì vậy tôi không cần phải tự gắn thẻ bất cứ thứ gì.

Và bây giờ tôi có thể chọn các hàng trong bảng.

Nhưng tôi chưa thực sự làm bất cứ điều gì với sự lựa chọn.

Tôi nghĩ sẽ thật tuyệt nếu thêm một nút cho phép tôi thêm các địa điểm đã chọn vào hướng dẫn mà tôi có thể chia sẻ với những người khác trong câu lạc bộ sách của mình.

Đây là mã để thêm nút thanh công cụ.

Nếu có một lựa chọn không trống, nút sẽ hiển thị ngay bây giờ.

Tôi cũng đã thêm một nút chỉnh sửa, bổ sung cho hỗ trợ lựa chọn nhẹ hiện có, nhưng nó cung cấp khả năng vào và ra khỏi chế độ chỉnh sửa khi không có bàn phím.

Một ứng dụng iPad tốt tỏa sáng cả khi có và không có bàn phím, vì vậy điều quan trọng là phải cung cấp các điều khiển để vào và ra khỏi chế độ chỉnh sửa.

Chúng tôi đang đến đó.

Bây giờ chúng tôi có một nút hiển thị khi chúng tôi chọn các hàng cũng như một nút để vào và thoát khỏi chế độ chỉnh sửa.

Vui lòng đảm bảo xem phiên thứ hai trong loạt bài này để biết thêm thông tin về thanh công cụ.

Tôi khá hài lòng với nút thanh công cụ ở đây, nhưng chúng ta có thể làm được nhiều hơn thế.

Đối với các hành động về lựa chọn, đó là một thực hành tuyệt vời để giữ cho chúng dễ dàng truy cập nhất có thể.

Đó là lý do tại sao trong iOS 16, iPadOS 16 và macOS Ventura, SwiftUI bổ sung hỗ trợ cho các menu ngữ cảnh nhiều lựa chọn.

Các menu ngữ cảnh nhiều lựa chọn cho phép trình bày trình đơn ngữ cảnh hoạt động trên một tập hợp các số nhận dạng đã chọn.

Hãy kiểm tra giải phẫu của bảng này để hiểu thêm.

Các menu ngữ cảnh dựa trên mục có ba biến thể.

Đầu tiên, bạn có thể hiển thị menu trên nhiều mục, chẳng hạn như lựa chọn ở trên cùng.

Bạn cũng có thể hiển thị menu ngữ cảnh trên một mục riêng lẻ.

Và cuối cùng, bạn có thể hiển thị một trình đơn ngữ cảnh trên một khu vực trống, nơi không có nội dung.

Hãy thêm hỗ trợ cho điều này vào bảng địa điểm của chúng tôi.

Tôi đã bỏ qua một số chi tiết từ các ví dụ mã trước đó để chúng ta có thể tập trung vào menu ngữ cảnh.

Tôi đã thêm công cụ sửa đổi contextMenu mới lấy một loại lựa chọn.

Điều này cần khớp với loại lựa chọn của danh sách hoặc bảng, vì vậy vì tôi đang sử dụng bảng, tôi sẽ sử dụng loại PlaceID.

Việc đóng cửa được thông qua một tập hợp các mục để hoạt động, vì vậy nếu nó trống, tôi biết menu dành cho khu vực trống.

Tôi nghĩ một nút để thêm một địa điểm mới sẽ hoạt động tốt cho khu vực trống.

Bằng cách đó, khi tôi đang di chuyển và tìm một nơi yên tĩnh mới để đọc, tôi có thể thêm nó một cách nhanh chóng.

Lưu ý rằng nếu trình tạo chế độ xem cho tập hợp các mục trống không phân giải thành chế độ xem, SwiftUI sẽ không hiển thị menu trên khu vực trống.

Tiếp theo, hãy xử lý một lựa chọn duy nhất.

Nếu bộ chỉ có một mục duy nhất, tôi biết thực đơn đang được hiển thị cho một địa điểm duy nhất.

Và đối với cả một và nhiều lựa chọn, tôi muốn có thể thêm những địa điểm này vào hướng dẫn, vì vậy tôi sẽ thêm một chế độ xem khác vào menu.

Hãy kiểm tra tiến độ của chúng ta.

Đây là hỗ trợ menu ngữ cảnh mới đang hoạt động.

Nhấp vào khu vực trống sẽ hiển thị một mục menu để thêm một địa điểm mới.

Chọn một hàng duy nhất hiển thị một trình đơn ngữ cảnh chỉ cho hàng đó.

Và tôi có thể mở rộng lựa chọn bằng bàn phím, tạo ra điểm nhấn màu xanh này.

Sau đó, tôi có thể kích hoạt menu ngữ cảnh trên nhiều hàng, cho phép tôi dễ dàng thêm địa điểm vào hướng dẫn.

Cái bàn này bây giờ trông khá hấp dẫn, vì vậy tôi nghĩ đã đến lúc thêm một số cấu trúc xung quanh nó.

Để làm điều đó, tôi sẽ cần một cái nhìn phân chia.

Điều hướng là một phần cơ bản của trải nghiệm iPad.

Và chế độ xem phân chia là một cách tuyệt vời để tránh phương thức trên màn hình lớn hơn của iPad bằng cách hiển thị thêm thông tin cùng một lúc mà không cần phải đi sâu vào.

Trong phần này, tôi sẽ đề cập đến một số cập nhật cho SwiftUI xung quanh điều hướng và chia nhỏ chế độ xem.

Trong các phần trước, tôi đã tạo bảng địa điểm và thêm các tính năng phong phú như chế độ lựa chọn và chỉnh sửa.

Nhưng tôi nghĩ ứng dụng địa điểm đang thiếu một số cấu trúc.

Vì vậy, trong phần này, tôi sẽ xây dựng nền tảng cho cấu trúc ứng dụng của chúng tôi bằng cách tận dụng chế độ xem phân chia điều hướng.

Mới trong iPadOS 16 và macOS Ventura, SwiftUI đã cải thiện hỗ trợ chia chế độ xem với loại NavigationSplitView.

SwiftUI hỗ trợ hai hoặc ba chế độ xem phân chia cột và có nhiều kiểu để kiểm soát phức tạp cách hiển thị các cột.

Tôi sẽ không đề cập đầy đủ về cách trình bày nội dung điều hướng trong phiên này, vì vậy, tôi mời bạn xem sách dạy nấu ăn SwiftUI để điều hướng.

Curt có khá nhiều công thức nấu ăn để nấu một số trải nghiệm điều hướng thực sự ngon miệng.

Thay vào đó, tôi sẽ tập trung nhiều hơn vào các quan điểm phân chia.

Đây là một sơ đồ cho thấy chế độ xem phân chia hai cột trên iPad.

Trong SwiftUI, cột đầu được gọi là cột thanh bên và cột cuối được gọi là cột chi tiết.

Chú ý cách các cột được cân bằng cạnh nhau ở đây.

Trong bối cảnh, SwiftUI cung cấp điều này theo mặc định.

Tuy nhiên, trong bức chân dung, thanh bên ẩn đi, chỉ hiển thị cột chi tiết.

Nhấn vào nút thanh bên sẽ hiển thị thanh bên, xuất hiện trên cột chi tiết, làm mờ nó bên dưới.

Nói chung, chế độ xem phân chia hai cột sẽ chỉ hiển thị cột chi tiết khi không gian bị hạn chế, bởi vì cột chi tiết thường hiển thị thông tin quan trọng hơn cột thanh bên.

Nếu bạn muốn tùy chỉnh hành vi này, bạn luôn có thể thích cột chi tiết với kiểu chế độ xem phân chia điều hướng chi tiết nổi bật hoặc cân bằng trọng số với kiểu NavigationSplitView cân bằng.

NavigationSplitView cũng hỗ trợ bố cục ba cột.

Với ba cột, có một cột bổ sung giữa thanh bên và chi tiết được gọi là cột nội dung.

Nếu bạn đến từ UIKit, bạn có thể biết đây là cột bổ sung.

Trong phong cảnh, nội dung và cột chi tiết được hiển thị và thanh bên có thể được chuyển đổi.

Sau khi nhấn vào nút thanh công cụ, cột chi tiết trượt ra khỏi đường đi, nhường chỗ cho thanh bên và nội dung.

Trong dọc, chỉ có cột chi tiết được hiển thị và nhấn vào nút thanh công cụ sẽ hiển thị nội dung.

Từ đó, nhấn lại sẽ hiển thị thanh bên.

Thanh bên và nội dung đều phủ lên chi tiết.

Nói chung, tôi khuyên bạn nên gắn bó với kiểu tự động cho chế độ xem phân chia ba cột vì nó tận dụng tốt nhất không gian có sẵn và chuyên dùng cho các màn hình lớn hơn.

Cũng giống như chế độ xem phân chia hai cột, chế độ xem phân chia ba cột thu gọn thành một ngăn xếp trong các lớp kích thước nhỏ gọn.

Bây giờ tôi đã đề cập đến những điều cơ bản về chế độ xem phân chia, đã đến lúc thêm một cái vào ứng dụng địa điểm.

Đây là chế độ xem nội dung.

Tôi đã tạo một NavigationSplitView với hai cột ở đây.

Cột đầu tiên là cột thanh bên và cột thứ hai là cột chi tiết.

Cột chi tiết được điền bởi các liên kết từ cột thanh bên, nhưng nếu không có gì được hiển thị, trình giữ chỗ có "chọn một địa điểm" sẽ được hiển thị thay thế.

Đây là ảnh chụp màn hình của trình giữ chỗ. Nó khá tuyệt.

Điều này đang sử dụng kiểu tự động, hiển thị thanh bên ở chế tạo ngang, ẩn nó khỏi con đường trong chân dung.

Nhấn vào một hàng trong thanh bên sẽ trình bày hàng đó trong cột chi tiết.

Và khi sử dụng slide over, các cột sẽ tự động thu gọn.

Đây chỉ là phần nổi của tảng băng trôi - có rất nhiều bổ sung điều hướng thú vị, bao gồm hỗ trợ tốt hơn cho việc khôi phục trạng thái, liên kết sâu và thậm chí kiểm soát lập trình phong phú hơn.

Một lần nữa, tôi khuyến khích bạn xem phiên sách dạy nấu ăn điều hướng để biết thêm.

Tôi đã tích hợp một số tính năng iPad tuyệt vời vào ứng dụng và tôi rất hào hứng khi tìm một số địa điểm yên bình để đọc.

Hy vọng rằng tôi sẽ sớm bắt kịp câu lạc bộ sách của mình.

Trong phiên này, tôi đã đề cập đến cách tận dụng các bảng để hiển thị dữ liệu phong phú, cách quản lý các tương tác lựa chọn phức tạp và cách tránh phương thức với chế độ xem phân chia.

Đảm bảo kiểm tra các phiên liên quan và tinh chỉnh các ứng dụng SwiftUI của bạn để tận dụng sức mạnh của iPad.

Cảm ơn bạn.

♪ ♪