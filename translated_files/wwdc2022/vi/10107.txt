10107

Rich Gillam: Xin chào, tôi là Rich, và tôi ở đây để giúp bạn đưa nó từ phải sang trái.

Vì vậy, bạn đã bản địa hóa đơn đăng ký của mình cho một loạt các ngôn ngữ, bao gồm các ngôn ngữ châu Âu phổ biến nhất, các ngôn ngữ châu Á phổ biến nhất.

Và bây giờ bạn muốn bản địa hóa nó cho tiếng Ả Rập và tiếng Do Thái.

Đây là một lựa chọn tốt; tiếng Ả Rập là một trong mười ngôn ngữ được sử dụng nhiều nhất trên nền tảng của chúng tôi, nhưng nó mang theo một số thách thức mà bạn không gặp phải khi phát triển cho các ngôn ngữ khác.

Đó là những gì cuộc nói chuyện này nói về, làm thế nào để phát triển ứng dụng của bạn để nó có thể được bản địa hóa sang các ngôn ngữ như tiếng Ả Rập và tiếng Do Thái.

Tiếng Ả Rập và tiếng Do Thái được sử dụng phổ biến nhất trong cái gọi là "ngôn ngữ từ phải sang trái". Tại sao họ được gọi như thế này?

Tiếng Anh, tiếng Pháp, tiếng Trung, tiếng Thái và nhiều ngôn ngữ khác được viết sao cho các ký tự của chúng chạy từ trái sang phải như thế này.

Trong tiếng Do Thái, các ký tự chạy từ phải sang trái như thế này.

Họ làm điều tương tự trong tiếng Ả Rập, và trong tiếng Ả Rập, các ký tự cũng được nối chữ thảo.

Bốn chữ cái trong "salaam" trông như thế này khi chúng được viết riêng.

Nhân tiện, nó không chỉ là tiếng Ả Rập và tiếng Do Thái.

Apple thực sự có hỗ trợ phông chữ và bàn phím cho 15 ngôn ngữ từ phải sang trái.

Đây là một đoạn văn bản tiếng Do Thái.

Cái này là từ phiên bản tiếng Do Thái của trang "Trợ giúp Công thức & Chức năng" cho Số.

Lưu ý rằng văn bản được căn chỉnh ở bên phải và rách rưới ở bên trái, và nhiều dòng, bao gồm cả dòng cuối cùng, có dấu câu ở phía bên trái.

Cũng có một con số trong đoạn này.

Con số vẫn đi từ trái sang phải.

Cái này cho chúng ta biết rằng Numbers hỗ trợ hơn 250 chức năng.

Nếu chúng ta mở rộng tầm nhìn của mình để bao gồm một đoạn văn khác, chúng ta thấy rằng đoạn này có một số từ tiếng Anh, tên của iWork và các ứng dụng cấu thành của nó, Pages, Numbers và Keynote.

Chúng cũng được viết từ trái sang phải, ngay cả trong một đoạn tiếng Do Thái.

Vì vậy, đối với nhiều đoạn văn, văn bản là hai chiều.

Đây là một thuộc tính vốn có của tiếng Ả Rập và tiếng Do Thái, và đó là lý do tại sao chúng cũng thường được gọi là ngôn ngữ "bidi".

Nếu chúng ta mở rộng tầm nhìn của mình hơn nữa, chúng ta sẽ thấy toàn bộ trang được bố trí từ phải sang trái.

Chúng tôi có một bảng ở đây, và văn bản ở bên phải của hình ảnh thay vì bên trái của chúng.

Và nếu chúng ta mở rộng nó hơn nữa để xem khung cửa sổ của Safari, chúng ta thấy rằng nó không dừng lại ở nội dung.

Các dòng văn bản tiếng Ả Rập và tiếng Do Thái bắt đầu ở bên phải và tiến sang bên trái, vì vậy thật tự nhiên khi mong đợi các yếu tố giao diện người dùng khác cũng làm như vậy.

Giống như độc giả mong đợi mọi thứ bắt đầu từ bên trái và tiến tới bên phải, độc giả Ả Rập và Do Thái mong đợi điều ngược lại.

Vì vậy, ở đây, thanh công cụ của Safari chạy từ phải sang trái với các nút đèn giao thông ở góc trên bên phải và các nút chuyển sang trái.

Và nếu chúng ta mở rộng trọng tâm của mình để bao gồm toàn bộ màn hình, chúng ta sẽ thấy rằng nó mở rộng ở mọi nơi.

Đây là màn hình trợ giúp của Numbers và chúng tôi thấy rằng tất cả các yếu tố trong Numbers cũng đã bị lật.

Thanh bên ở bên trái.

Thanh tab chạy từ phải sang trái. Ngay cả bản thân tài liệu cũng bị lật.

Và thanh menu Mac và dock cũng chạy từ phải sang trái.

Làm đúng tất cả những điều này có thể phức tạp, nhưng tin tuyệt vời là chúng tôi thực hiện hầu hết các công việc nặng nhọc cho bạn.

Hầu hết hỗ trợ từ phải sang trái đều miễn phí.

Nhưng có những điều cần ghi nhớ.

Vì vậy, đó là những gì chúng ta sẽ nói về, những gì hệ thống làm cho bạn, khi bạn cần chọn tham gia hoặc không tham gia và những gì cần suy nghĩ khi triển khai hỗ trợ từ phải sang trái của riêng bạn.

Chúng ta sẽ nói về văn bản, hình ảnh, hướng điều khiển và bố cục giao diện người dùng.

Chúng tôi cũng sẽ đề cập đến việc hiển thị các con số bằng tiếng Ả Rập.

Và cuối cùng, chúng ta sẽ nói một chút về cách kiểm tra xem ứng dụng của bạn có đang xử lý từ phải sang trái một cách chính xác hay không.

Vậy chúng ta hãy đi sâu vào.

Đầu tiên, chúng ta sẽ nói thêm một chút về cách văn bản hoạt động và giới thiệu một số thuật ngữ.

Hãy bắt đầu với khái niệm về hướng viết.

Như chúng ta đã thấy, tiếng Anh được viết từ trái sang phải, và tiếng Do Thái được viết từ phải sang trái.

Nhưng điều gì sẽ xảy ra nếu chúng ta trộn chúng?

Nếu bạn có một câu đa ngôn ngữ như thế này, các thành phần riêng lẻ vẫn giữ nguyên hướng viết của chúng, nhưng điều này có nghĩa là mỗi câu này hiện bao gồm ba thành phần: Hai đoạn văn bản riêng biệt bằng ngôn ngữ mẹ đẻ kẹp một đoạn văn bản bằng một ngôn ngữ khác.

Khi chúng ta nói về hướng viết của một đoạn văn, chúng ta đang nói về thứ tự của các đoạn riêng lẻ này.

Khi chúng ta nói câu tiếng Anh có hướng viết từ trái sang phải, đó là vì ba hộp này chạy từ trái sang phải và khi chúng ta nói câu tiếng Do Thái có hướng viết từ phải sang trái, đó là vì ba hộp đó chạy từ phải sang trái.

Một khái niệm khác nhưng có liên quan là căn chỉnh văn bản.

Nếu bạn đọc một ngôn ngữ từ trái sang phải, mắt bạn sẽ hướng về phía bên trái của trang và tiến tới bên phải.

Nếu bạn đọc ngôn ngữ từ phải sang trái, thì ngược lại.

Vì vậy, văn bản được căn chỉnh ở phía bên phải bằng ngôn ngữ từ phải sang trái.

Tin tốt là hầu hết thời gian, bạn không phải lo lắng về một trong hai điều này.

CoreText không chỉ quan tâm đến việc sắp xếp tất cả các ký tự đúng cách trên một dòng hoặc đoạn văn bản, bao gồm cả khi văn bản của các hướng khác nhau được trộn lẫn trên một dòng, mà tất cả các khung giao diện người dùng của chúng tôi cũng tự động đặt hướng viết và căn chỉnh.

Tất cả các tiện ích giao diện người dùng mặc định là "hướng viết tự nhiên" và "căn chỉnh tự nhiên".

Hướng viết của tiện ích văn bản mặc định khớp với hướng viết bình thường cho ngôn ngữ giao diện người dùng của người dùng.

Đó là, nếu giao diện người dùng của bạn bằng tiếng Do Thái hoặc tiếng Ả Rập, hướng viết của các tiện ích văn bản của bạn mặc định là từ phải sang trái.

Căn chỉnh tự nhiên theo hướng viết.

Đó là, nếu hướng viết của tiện ích văn bản từ phải sang trái, nó cũng sẽ được căn chỉnh sang phải.

Hầu hết thời gian, đây là những gì bạn muốn, nhưng bạn có thể ghi đè các mặc định.

Chúng ta sẽ nói nhiều hơn về điều này trong phần về định hướng kiểm soát.

Bây giờ có vẻ là thời điểm tốt để bắt đầu một biểu đồ nhỏ về các thuật ngữ mà bạn sẽ gặp phải.

Những gì chúng tôi đang nói ở đây là căn chỉnh tự nhiên tương ứng với căn chỉnh trái trong ngôn ngữ từ trái sang phải và căn chỉnh phải bằng ngôn ngữ từ phải sang trái.

Chúng tôi sẽ thêm vào biểu đồ này khi chúng tôi tiếp tục.

Nhưng tất nhiên, đó không chỉ là tin nhắn mà bạn phải lo lắng.

Có văn bản được đọc theo hướng ngược lại có ảnh hưởng sâu sắc đến các yếu tố trong ứng dụng của bạn ngoài văn bản.

Hãy nói về cách nó có thể ảnh hưởng đến các biểu tượng và các yếu tố hình ảnh khác.

Đây là thanh công cụ Pages bằng tiếng Anh và tiếng Ả Rập.

Chúng ta hãy xem xét kỹ hơn một số biểu tượng trên thanh công cụ.

Nhiều nút, chẳng hạn như nút "Thêm trang" và "Phương tiện", trông giống nhau trong cả hai ngôn ngữ.

Điều này là do chúng đối xứng hoặc vì tính định hướng của chúng không bị ràng buộc với ngôn ngữ và chúng trông ổn trong cả hai ngôn ngữ.

Các nút khác, chẳng hạn như nút "Xem" và "Tài liệu", lật sang hình ảnh phản chiếu của chúng bằng tiếng Ả Rập.

Nút "Xem" hiển thị thanh bên Trang, xuất hiện ở phía đối diện của cửa sổ bằng tiếng Ả Rập, vì vậy biểu tượng phải thay đổi để phản ánh điều đó.

Nút "Tài liệu" thay đổi để hiển thị rằng nếu người dùng đang viết bằng tiếng Ả Rập, các trang sẽ quay theo hướng ngược lại.

Và bạn có thể có những tình huống mà biểu tượng thay đổi hoàn toàn.

Chữ cái trên nút "Chèn hộp văn bản" thay đổi thành một chữ cái khác để phản ánh ngôn ngữ của người dùng.

Một lần nữa, tin tuyệt vời là rất nhiều điều này được xử lý cho bạn.

Bạn phải suy nghĩ về định hướng hình ảnh nhiều hơn một chút so với bạn thường nghĩ về hướng viết văn bản, nhưng làm cho mọi thứ đúng khá đơn giản.

Đây là menu "Xem" trong Mac Pages bằng tiếng Anh và tiếng Ả Rập.

Lưu ý rằng biểu tượng "Hiển thị Thước kẻ" tự đảo ngược.

Trong các ngôn ngữ từ phải sang trái, thước thẳng đứng nằm ở phía bên tay phải.

Đối với một hình ảnh tùy chỉnh như biểu tượng thước kẻ, hành vi từ phải sang trái được kiểm soát trong trình chỉnh sửa bộ hình ảnh Xcode.

Nếu hình ảnh của bạn giống nhau ở từ trái sang phải và từ phải sang trái, bạn không cần phải làm bất cứ điều gì đặc biệt.

Hệ thống cũng có thể phản chiếu hình ảnh của bạn theo thuật toán cho bạn khi ứng dụng của bạn đang chạy bằng ngôn ngữ có hướng viết ngược lại với ngôn ngữ phát triển của bạn.

Bạn có thể yêu cầu tính năng này trong trình chỉnh sửa bộ hình ảnh của Xcode.

Trong thanh bên, bạn sẽ tìm thấy một điều khiển được đánh dấu "Hướng". Nếu bạn nhấp vào cái này, bạn sẽ nhận được một thực đơn với bốn lựa chọn.

Nếu hình ảnh của bạn giống nhau bất kể ngôn ngữ giao diện người dùng, bạn chọn "Đã sửa". Nếu bạn muốn phản chiếu thuật toán, bạn chọn tham gia bằng cách chọn một trong các tùy chọn "Lỗi".

Cái nào phụ thuộc vào hướng viết của ngôn ngữ phát triển của bạn.

Nếu bạn có một hình ảnh mà bạn không thể phản chiếu theo thuật toán, hoặc nó có nhiều yếu tố hoạt động khác nhau khi giao diện người dùng thay đổi hướng hoặc bạn có bóng mà bạn không muốn di chuyển, bạn chọn "Cả hai" và ba giếng mới được thêm vào trình chỉnh sửa bộ hình ảnh, cho phép bạn tạo các hình ảnh riêng biệt để sử dụng cho các

Nhưng nếu bạn sử dụng hình ảnh từ Biểu tượng SF, như thanh công cụ Trang đã làm, mọi thứ thậm chí còn dễ dàng hơn.

Hầu như tất cả công việc đã được thực hiện cho bạn.

Các ký hiệu cần thay đổi từ phải sang ngôn ngữ trái sẽ tự động làm như vậy.

Ví dụ, hãy xem xét biểu tượng danh sách dấu đầu dòng này.

Đối với nhiều hình ảnh, thanh bên của Biểu tượng SF có phần "bản địa hóa" hiển thị các phiên bản bản địa hóa của hình ảnh bạn đã chọn.

Trong trường hợp này, biểu tượng danh sách dấu đầu dòng có các phiên bản khác nhau từ trái sang phải và phải sang trái.

Nó phản chiếu tự động.

Tính năng bản địa hóa có thể vượt ra ngoài việc chỉ phản chiếu các ngôn ngữ từ phải sang trái.

Đây là tab bản địa hóa cho biểu tượng "chèn hộp văn bản".

Nó có các phiên bản bản địa hóa không chỉ cho các chữ viết Latinh và Ả Rập, mà còn cho nhiều phiên bản khác nữa.

Một trường hợp đặc biệt quan trọng đối với sự hỗ trợ của tiếng Ả Rập là dấu chấm hỏi, thường được sử dụng như một biểu tượng "trợ giúp".

Trong tiếng Ả Rập, dấu chấm hỏi là mặt trái của dấu chấm hỏi Latinh.

Sử dụng các biểu tượng từ Biểu tượng SF để trợ giúp các biểu tượng giúp bạn có được phiên bản này mà không cần thêm bất kỳ công việc nào.

Một loại hình ảnh bạn phải suy nghĩ cẩn thận là mũi tên và các chỉ báo định hướng khác.

Ở đây chúng ta có bốn biểu tượng mũi tên trong một vòng tròn.

Bạn sẽ nhận thấy chúng có hai cặp.

Bạn có hai chỉ sang trái và hai chỉ sang phải.

Nếu chúng ta chỉ nhìn vào hai điểm bên trái, bạn sẽ thấy cái đó được gọi là "arrow.backward.circle." Cái này lật để chỉ từ phải sang phải sang trái.

Cái còn lại được gọi là "arrow.left..circle" và KHÔNG lật từ phải sang trái.

SF Symbols tuân theo quy ước đặt tên này xuyên suốt với các biểu tượng mà bạn có thể muốn hoặc không muốn lật từ phải sang trái.

Những cái "tiến" và "lùi" lật, và những cái "trái" và "phải" thì không.

Nếu bạn đang sử dụng mũi tên hoặc hình dạng khác để truyền đạt ý tưởng "tiến" hoặc "lùi", bạn muốn sử dụng các phiên bản lật và nếu bạn đang sử dụng mũi tên để truyền đạt hướng tuyệt đối, bạn muốn sử dụng các phiên bản không lật.

Và hãy thêm một hàng vào biểu đồ "Thuật ngữ" của chúng tôi.

Khi chọn hình ảnh trong Biểu tượng SF, hãy nhớ rằng "trái" và "phải" luôn chỉ các hướng đó và "tiến" và "lùi" theo các hướng khác nhau tùy thuộc vào ngôn ngữ giao diện người dùng.

Bây giờ hãy nói về cách các điều khiển và các tiện ích giao diện người dùng khác được xử lý từ phải sang trái.

Đây là thanh bên Mac Keynote bằng tiếng Anh và tiếng Ả Rập hiển thị trình kiểm tra định dạng cho một hình dạng.

Lưu ý rằng mọi thứ đã lật ngược diện mạo của nó từ phải sang trái.

Chúng tôi có rất nhiều nút menu bật lên trong đó chỉ báo menu di chuyển sang bên trái từ phải sang trái.

Chúng tôi có một vài hộp kiểm, trong đó trong tiếng Ả Rập, hộp kiểm ở bên phải nhãn.

Thanh trượt độ mờ đã thay đổi đối với tiếng Ả Rập để mức tối thiểu ở bên phải và mức tối đa ở bên trái.

Và cứ như vậy trong tất cả các điều khiển khác trong thanh tra này.

Tin tuyệt vời là bạn có được hành vi này miễn phí.

Tất cả các điều khiển giao diện người dùng tiêu chuẩn trong tất cả các khung giao diện người dùng của chúng tôi tự động đảo ngược giao diện của chúng cho các ngôn ngữ từ phải sang trái.

Tuy nhiên, có những tình huống mà bạn có thể không muốn điều này hoặc nơi bạn cần kiểm soát cách nó xảy ra.

Hãy cùng xem xét một vài trường hợp thú vị.

Hãy nói về các nút có cả nhãn văn bản và biểu tượng trên đó.

Đây là trình kiểm tra hoạt hình Keynote hiển thị các điều khiển cho hoạt hình "Di chuyển vào".

Thanh tra này có hai nút với cả nhãn và biểu tượng.

Lưu ý rằng mũi tên trên nút Xem trước lật với sự thay đổi theo hướng giao diện người dùng, nhưng mũi tên trên menu hướng hoạt hình thì không.

Cả hai mặt đều lật theo hướng giao diện người dùng, nhưng nếu điều khiển hướng là một nhóm các nút thay vì menu, bạn có thể hình ảnh có thể không muốn nó thay đổi bên.

Để chỉ ra cách kiểm soát điều này, tôi đã tách hai ví dụ đó thành một ứng dụng đồ chơi nhỏ.

Đây là mã để xây dựng giao diện người dùng đó trong SwiftUI.

Có một vài điều thú vị cần lưu ý ở đây.

Chúng ta sẽ xem xét từng cái một.

Hãy bắt đầu với tên hình ảnh.

Như chúng ta đã thấy trước đây, đối với hình ảnh từ Biểu tượng SF, bạn chọn một biểu tượng đảo ngược hoặc một biểu tượng không.

Ở đây chúng tôi đã sử dụng "arrowtriangle.forward.fill" cho nút "Xem trước".

"Chuyển tiếp" trong tên cho bạn biết rằng nó lật từ phải sang trái.

Chúng tôi đã sử dụng "arrow.left" và "arrow.right" cho các nút hướng.

"Trên trái" và "phải" trong tên cho bạn biết rằng họ không lật từ phải sang trái.

Nếu bạn đang làm việc trong AppKit hoặc UIKit, điều này cũng hoạt động theo cùng một cách.

Đây là ứng dụng của tôi trong trình chỉnh sửa bảng phân cảnh của Xcode với nút "Xem trước" được chọn.

Bạn điều khiển biểu tượng của nút bằng điều khiển "Hình ảnh" trong trình kiểm tra Thuộc tính.

Và trong mã, bạn đặt cái này với thuộc tính "hình ảnh" của nút và về cơ bản nó hoạt động theo cùng một cách trong cả AppKit và UIKit.

Quay trở lại ví dụ SwiftUI của chúng tôi, câu hỏi tiếp theo là cách bạn kiểm soát phía nào của nhãn mà biểu tượng tiếp tục.

Bạn làm điều này bằng cách thiết lập một kiểu nhãn.

TitleAndIconLabelStyle tích hợp đặt biểu tượng trước nhãn theo hướng đọc của người dùng.

Chúng ta có thể sử dụng cái này cho nút "Trái".

Đối với hai nút còn lại, chúng tôi muốn biểu tượng đi theo nhãn theo hướng đọc của người dùng.

Để làm điều này, bạn cần một kiểu nhãn tùy chỉnh, nhưng điều đó khá dễ thực hiện.

Phương thức makeBody() của kiểu nhãn của bạn chỉ cần tạo một HStack và thêm tiêu đề và biểu tượng vào đó.

Như với bất kỳ HStack nào, thứ tự bạn thêm chúng sẽ xác định thứ tự chúng hiển thị và thứ tự động đảo ngược khi thích hợp với hướng giao diện người dùng.

Kỹ thuật này hoạt động trên bất kỳ chế độ xem nào có thể lấy Nhãn, không chỉ các nút.

Tất nhiên, bạn không muốn biểu tượng thay đổi hai bên trên nút "Phải".

Bạn muốn nó luôn ở bên phải bất kể hướng giao diện người dùng.

Điều đó đưa chúng ta đến điều thú vị cuối cùng trong đoạn mã này.

Các chế độ xem trong SwiftUI nhận định hướng của chúng từ môi trường SwiftUI mà bạn có thể sửa đổi.

Bạn làm điều này bằng cách thêm công cụ sửa đổi "môi trường" vào chế độ xem và cung cấp cho nó chìa khóa và giá trị mới cho tài sản bạn muốn thay đổi.

Ở đây chúng tôi đang ghi đè thuộc tính layoutDirection của môi trường để luôn từ trái sang phải bất kể giá trị nào chúng tôi có thể kế thừa từ cha mẹ của mình.

Thay đổi môi trường theo cách này hoạt động trên tất cả các chế độ xem SwiftUI đáp ứng hướng giao diện người dùng của người dùng.

Lưu ý rằng chúng tôi đã áp dụng công cụ sửa đổi cho HStack có chứa các nút "Trái" và "Phải".

Bất kỳ thay đổi nào bạn thực hiện đối với môi trường của chế độ xem đều được kế thừa bởi các chế độ xem con của nó, vì vậy việc đặt nó ở đây không chỉ ngăn HStack đảo ngược thứ tự của các nút mà còn giữ cho cả hai nút không đảo ngược bố cục nhãn của chúng.

Và tất nhiên, chúng tôi đã không áp dụng công cụ sửa đổi môi trường của mình cho bất kỳ thứ gì trong chuỗi mẹ cho nút "Xem trước", vì vậy nó vẫn đảo ngược khi thích hợp, giống như chúng tôi muốn.

Vì vậy, tóm lại, nút "Trái" có biểu tượng ở bên trái vì chúng tôi đã sử dụng TitleAndIconLabelStyle tích hợp sẵn, và các nút "Xem trước" và "Phải" có biểu tượng của chúng ở bên phải vì chúng tôi đã sử dụng kiểu nhãn tùy chỉnh mà chúng tôi gọi là IconOnRightLabelStyle.

Các nút "Trái" và "Phải" không thay đổi thứ tự hoặc cách sắp xếp bên trong nhãn của chúng vì chúng tôi đã thêm công cụ sửa đổi môi trường vào HStack có chứa chúng, đặt hướng bố cục từ trái sang phải.

Nút "Xem trước" đảo ngược sự sắp xếp bên trong của nhãn vì nó không có công cụ sửa đổi đó.

Điều này hoạt động khác nhau trong AppKit và UIKit.

Trong cả hai khuôn khổ đó, vị trí của biểu tượng liên quan đến nhãn được kiểm soát bằng điều khiển "Vị trí" trong trình kiểm tra Thuộc tính của Xcode.

Nếu bạn nhấp vào điều khiển này, bạn sẽ thấy rằng menu có, trong số các tùy chọn khác, hai cặp tùy chọn căn chỉnh nhãn và biểu tượng theo chiều ngang.

Bạn có "Lãnh đạo" và "Trái", và bạn có "Truyền" và "Phải". "Lãnh đạo" và "Truyền" thay đổi ý nghĩa của chúng dựa trên hướng giao diện người dùng, và "Trái" và "Phải" thì không.

Trong AppKit, bạn kiểm soát điều này bằng thuộc tính imagePosition của nút.

Trong UIKit, đó là thuộc tính imagePlacement trên cấu hình của nút, điều đó có nghĩa là bạn cần đặt cấu hình nút của mình trước.

Biểu tượng trên nút "Xem trước" thay đổi hai bên vì chúng tôi đặt vị trí của nó thành "Truyền" và biểu tượng trên nút "Phải" không thay đổi hai bên vì chúng tôi đặt vị trí của nó thành "Phải". Điều này cũng cho phép chúng tôi điền vào hàng cuối cùng trong biểu đồ "thuật ngữ" của mình.

Các thuật ngữ "dẫn đầu" và "dấu bẫy" sẽ xuất hiện rất nhiều khi thảo luận về bố cục giao diện người dùng.

Giống như "tiến" và "lùi", bạn sẽ thường thấy chúng được sử dụng trái ngược với "trái" và "phải". Cạnh "dẫn đầu" của một cái gì đó là cạnh gần nhất với đầu dòng hoặc bên cạnh màn hình hoặc cửa sổ nơi người đọc sẽ bắt đầu đọc, từ trái sang phải và phải cho phải sang phải.

Cạnh sau là phía đối diện, gần cuối dòng nhất, từ phải từ trái sang phải và từ trái sang phải sang trái.

Hầu hết thời gian, bạn muốn sử dụng những thứ này thay vì "trái" và "phải", chỉ lưu "trái" và "phải" cho những thứ gắn liền với một hướng tuyệt đối.

Hãy xem xét một trường hợp thú vị khác.

Đây là một phần của trình kiểm tra định dạng văn bản trong Keynote trên iPhone, bằng tiếng Anh và tiếng Ả Rập.

Ảnh chụp màn hình đặc biệt này có bốn điều khiển được phân đoạn.

Hai cái trên cùng, bộ chọn trang cho trình kiểm tra và các nút kiểu "in đậm/italic/ gạch chân" tiêu chuẩn, đảo ngược thứ tự các phân đoạn của chúng tùy thuộc vào ngôn ngữ giao diện người dùng.

Nếu bạn không đọc tiếng Ả Rập, bạn sẽ phải tin tưởng tôi trên bộ chọn trang.

Như với các điều khiển khác mà chúng tôi đã xem xét, đây là mặc định; bạn nhận được hành vi này miễn phí.

Hai điều khiển phân đoạn còn lại, các điều khiển căn chỉnh, không đảo ngược thứ tự của các phân đoạn của chúng.

Điều này là do họ di chuyển mọi thứ theo những hướng tuyệt đối.

Căn chỉnh bên trái là căn chỉnh bên trái bất kể đó là đầu hay cuối dòng.

Hãy xem cách chúng ta giữ cho các điều khiển này không đảo ngược.

Chúng tôi đã biết cách làm điều này trong SwiftUI.

Bạn chỉ cần áp dụng công cụ sửa đổi "môi trường" thay đổi thuộc tính layoutDirection của môi trường từ trái sang phải.

Ở đây, chúng tôi đang sử dụng kỹ thuật này để giữ cho điều khiển căn chỉnh không tự đảo ngược, nhưng để điều khiển kiểu tự đảo ngược như bình thường.

Trong UIKit, cái này hoạt động khác.

Đây là một ứng dụng đồ chơi trong Xcode được thiết kế để mô phỏng hành vi điều khiển được phân đoạn đó.

Tôi có hai điều khiển được phân đoạn, một điều khiển bắt chước hành vi in đậm/italic/ gạch chân và một điều khiển thứ hai bắt chước điều khiển căn chỉnh.

Điều khiển căn chỉnh được chọn.

Trong trình kiểm tra thuộc tính, bạn sẽ tìm thấy một menu có nhãn "Ngữ nghĩa". Nếu bạn nhấp vào menu đó, bạn sẽ có năm lựa chọn.

Trình đơn này kiểm soát một thứ gọi là thuộc tính nội dung ngữ nghĩa.

Bạn sử dụng điều này để cho biết đây là loại điều khiển nào và hệ thống sử dụng điều đó để xác định xem nó có đảo ngược giao diện của nó hay không dựa trên hướng giao diện người dùng.

Mặc định là "Không xác định", khiến điều khiển đảo ngược giao diện của nó.

"Phát lại" cho biết điều khiển là điều khiển phát lại phương tiện hoặc là một phần của nhóm điều khiển phát lại.

"Không gian" nói rằng điều khiển là một điều khiển không gian hoặc một phần của một nhóm chúng.

Các điều khiển không gian di chuyển mọi thứ xung quanh trong không gian theo các hướng tuyệt đối.

Và cuối cùng, bạn có thể buộc điều khiển luôn tự đặt mình từ trái sang phải hoặc từ phải sang trái.

Vì vậy, điều khiển in đậm/italic/ gạch chân đảo ngược các phân đoạn của nó từ phải sang trái vì thuộc tính nội dung ngữ nghĩa của nó được đặt thành "Không xác định" và điều khiển căn chỉnh không đảo ngược các phân đoạn của nó vì thuộc tính nội dung ngữ nghĩa của nó được đặt thành "Không gian". Điều tuyệt vời về điều này là nó không chỉ hoạt động cho UISegmentedControl.

Tất cả UIViews đều có thuộc tính nội dung ngữ nghĩa và nó kiểm soát tất cả hành vi từ phải sang trái của điều khiển đó.

Đối với bất kỳ chế độ xem UIKit tiêu chuẩn nào có các thành phần con, thuộc tính nội dung ngữ nghĩa sẽ xác định xem vị trí của các thành phần con của chế độ xem đó có đảo ngược dựa trên ngôn ngữ giao diện người dùng hay không.

Trong AppKit, bạn làm điều này khác đi.

Đối với tất cả NSControls, trình kiểm tra thuộc tính Xcode chứa hai menu được đánh dấu "B bố cục" và "Gương". Trình đơn "Bố cục" tương ứng với thuộc tính userInterfaceLayoutDirection của điều khiển, cho biết điều khiển nên sử dụng bố cục từ trái sang phải hay từ phải sang trái.

Bạn thường không thay đổi điều này khi làm việc trong Trình tạo Giao diện.

Thay vào đó, bạn sử dụng menu "Gương".

Đặt nó thành "Luôn luôn" khiến userInterfaceLayoutDirection, và do đó bố cục của điều khiển, bị lật khi ngòi được tải khi ngôn ngữ giao diện người dùng của người dùng từ phải sang trái và đặt nó thành "Không bao giờ" đánh bại hành vi này, giữ nguyên bố cục.

Bạn giữ nguyên bố cục của điều khiển căn chỉnh bằng cách đặt giá trị này thành "Không bao giờ".

Nếu bạn không làm việc trong Trình tạo giao diện, bạn sẽ hoàn thành điều tương tự trong mã bằng cách đặt trực tiếp userInterfaceLayoutDirection của điều khiển từ trái sang phải.

Nhân tiện, userInterfaceLayoutDirection là một thuộc tính trên NSView, nhưng chỉ xuất hiện trong Trình tạo giao diện trên các phiên bản của NSControl, vì vậy nếu bạn muốn đảo ngược thứ gì đó không phải là NSControl, bạn cần mã như chúng tôi đang hiển thị ở đây.

Trước khi chúng ta tiếp tục, tôi muốn nói về văn bản nhiều hơn một chút.

Đây là hộp thoại "Đặt mật khẩu tài liệu" trong iWork cho Mac.

Trong phiên bản tiếng Ả Rập, bạn sẽ thấy mọi thứ đã đảo ngược.

Nhưng chú ý những gì đã xảy ra với các nhãn hiệu.

Trong tiếng Anh, chúng được căn chỉnh bên phải để chúng gần với các trường văn bản chỉnh sửa.

Trong tiếng Ả Rập, chúng được căn trái.

Nói cách khác, bạn có sự đối lập với sự liên kết tự nhiên, sự liên kết cạnh sau, nếu bạn muốn.

Có được bố cục này trong SwiftUI trên Mac thật dễ dàng một cách tầm thường.

Chỉ cần sử dụng Biểu mẫu để tập hợp các trường văn bản lại với nhau.

Nhưng điều này có thể trở nên thú vị nếu, như trong ví dụ của chúng tôi, một trong những nhãn là nhiều dòng.

Nếu chúng ta mở rộng nhãn cuối cùng đó thành hai dòng, chúng ta sẽ nhận được điều này.

Hai nhãn một dòng được căn chỉnh chính xác, nhưng nhãn hai dòng thì không.

Vấn đề là, nhãn dưới cùng thực sự được căn chỉnh đúng.

Chỉ là hộp giới hạn của nó được căn chỉnh bên phải, không phải các dòng văn bản riêng lẻ trong hộp giới hạn đó.

Bạn khắc phục điều này bằng cách thêm công cụ sửa đổi multilineTextAlignment vào nhãn cuối cùng.

Căn chỉnh văn bản trong SwiftUI chỉ phát huy tác dụng trên các đối tượng văn bản dài hơn một dòng.

Đối với các đối tượng văn bản một dòng, hộp giới hạn của chúng bao bọc chặt chẽ chính văn bản và bạn căn chỉnh nó bằng cách căn chỉnh toàn bộ đối tượng văn bản.

Cũng lưu ý rằng cho dù bạn đang căn chỉnh hộp giới hạn của văn bản hay nhiều dòng văn bản bên trong hộp giới hạn, bạn có thể lựa chọn căn chỉnh đầu và cuối, điều này thay đổi ý nghĩa dựa trên hướng giao diện người dùng của người dùng.

Để giữ nguyên căn chỉnh bất kể hướng giao diện người dùng, bạn sử dụng công cụ sửa đổi môi trường để thay đổi hướng bố cục của môi trường như chúng ta đã thấy trước đó.

Trong UIKit, văn bản được căn chỉnh tự nhiên theo mặc định, nhưng bạn có thể thay đổi nó thành một trong những hướng tuyệt đối khi cần thiết.

Trong Trình tạo Giao diện, điều khiển trông như thế này và tương ứng với thuộc tính textAlignment trên UILabel và UITextView.

Nút ở ngoài cùng bên phải với đường chấm chấm cho bạn sự liên kết tự nhiên hoặc cạnh trước.

Sự liên kết của nhãn sẽ tuân theo thuộc tính nội dung ngữ nghĩa của nhãn.

Các nút khác cung cấp cho bạn căn chỉnh trái, phải hoặc trung tâm cố định bất kể hướng giao diện người dùng hoặc thuộc tính nội dung ngữ nghĩa của nhãn.

Không có cài đặt tích hợp cho sự liên kết cạnh sau.

Bạn phải làm điều đó bằng mã.

Trong AppKit, nó hơi khác một chút.

Bạn vẫn có điều khiển căn chỉnh và về cơ bản nó hoạt động giống như trong UIKit, nhưng cách nó tương tác với userInterfaceLayoutDirection thì khác.

Nếu bạn đặt "Gương" thành "Tự động" và hệ thống đặt userInterfaceLayoutDirection từ phải sang trái, ý nghĩa của tất cả các cài đặt căn chỉnh sẽ đảo ngược.

Vì vậy, nếu "Gương" được đặt thành "Tự động", căn chỉnh bên trái thực sự là căn chỉnh cạnh đầu và căn chỉnh bên phải thực sự là căn chỉnh cạnh sau.

Vì vậy, chúng tôi đã nói về cách tất cả các tiện ích giao diện người dùng tiêu chuẩn tự động đảo ngược bố cục của chúng để phù hợp với hướng viết của người dùng, nhưng khá dễ dàng để ngăn chặn điều đó khi cần thiết.

Điều này mở rộng đến việc sắp xếp các tiện ích giao diện người dùng riêng lẻ trên màn hình.

Nếu bạn đang sử dụng một trong những chế độ xem tiêu chuẩn hoặc bộ điều khiển chế độ xem xử lý vị trí của các chế độ xem phụ của chúng, tất cả chúng sẽ tự động đảo ngược bố cục của chúng khi cần thiết mà bạn không cần phải làm gì cả.

Chế độ xem bảng và chế độ xem bộ sưu tập cũng xử lý việc cuộn chính xác bằng ngôn ngữ từ phải sang trái.

UINavigationController tự động thay đổi hướng hoạt ảnh segue của nó để phản ánh hướng viết của người dùng và thay đổi nút "quay lại" để phù hợp với nó.

Và UIPageViewController tự động đảo ngược hướng phân trang và ý nghĩa của các cử chỉ vuốt cũng tự động.

Bạn thường sẽ không muốn ghi đè những thứ này, ngoại trừ khi bạn đang sử dụng chế độ xem ngăn xếp để định vị chế độ xem con, nhưng tất cả các chế độ xem đều tôn trọng thuộc tính nội dung ngữ nghĩa của chúng và sử dụng nó để cho chúng biết cách bố trí chế độ xem con của chúng.

Điều tương tự cũng xảy ra với các chế độ xem AppKit tiêu chuẩn và một lần nữa, chế độ xem bảng và bộ sưu tập cũng xử lý việc cuộn từ phải sang trái.

Tất cả các chế độ xem đều tôn vinh thuộc tính userInterfaceLayoutDirection của họ trong việc xác định cách bố trí các chế độ xem con của họ, mặc dù Trình tạo giao diện không cho phép bạn đặt nó.

Bạn phải làm điều đó bằng mã.

Các chế độ xem SwiftUI tiêu chuẩn cũng phản ánh thuộc tính layoutDirection của môi trường.

Nếu bạn đang sử dụng Bố cục Tự động thay vì chế độ xem ngăn xếp và lưới để bố trí chế độ xem của mình, Bố cục Tự động cũng tự động đảo ngược mọi thứ để tính đến hướng giao diện người dùng.

Nếu bạn có các ràng buộc theo chiều ngang, bạn sẽ thấy rằng chúng tự động kết nối mọi thứ với các cạnh đầu và cuối, và như chúng ta đã thấy, "dẫn đầu" và "dấu" có ý nghĩa khác nhau tùy thuộc vào hướng giao diện người dùng.

Tuy nhiên, bạn có thể đặt các ràng buộc Bố cục Tự động thành các hướng trái và phải tuyệt đối, nếu bạn cần.

Bạn làm điều này bằng cách nhấp vào hướng cho một bên của ràng buộc và tắt "Tôn trọng hướng ngôn ngữ" trong menu bật lên.

Điều đó sẽ thay đổi hướng của cả hai đầu của ràng buộc từ "dẫn đầu" và "dấu" sang "trái" và "phải". Có rất nhiều cách khác nhau để thiết lập các ràng buộc Bố cục Tự động trong mã.

Đây là một trong số họ.

Khá nhiều cách bạn làm điều đó, điều cần nhớ là sử dụng "dẫn đầu" và "dấu" thay vì "trái" và "phải", ngoại trừ trong những tình huống tương đối hiếm khi bạn thực sự muốn có cùng một hướng bố cục bất kể hướng viết của ngôn ngữ giao diện người dùng.

Được rồi, đó là rất nhiều thứ để tiếp nhận, vì vậy chúng ta hãy hít thở.

Bài học rút ra chính là chúng tôi thực hiện hầu hết công việc xử lý ngôn ngữ từ phải sang trái cho bạn và khi bạn cần ghi đè nó, có nhiều cách để làm điều đó.

Hãy xem thêm một lần nữa vào trang trình bày thuật ngữ của chúng tôi.

Hãy nhớ rằng "trái" và "phải" luôn là trái và phải và các thuật ngữ khác đảo ngược ý nghĩa của chúng tùy thuộc vào hướng giao diện người dùng tổng thể.

Trước khi chúng ta kết thúc, chúng ta hãy xem xét một vấn đề quan trọng hơn và đó là cách hiển thị các con số.

Đây không hoàn toàn là vấn đề từ phải sang trái, nhưng đối với nhiều nhà phát triển, tiếng Ả Rập là ngôn ngữ đầu tiên họ sẽ bản địa hóa để sử dụng các ký tự chữ số khác với các ký tự được sử dụng trong tiếng Anh.

Đây là những chữ số đó trông như thế nào.

Có rất nhiều quy ước đặt tên khác nhau cho các chữ số, nhưng tôi sẽ gọi những cái được sử dụng với hầu hết các ngôn ngữ châu Âu là chữ số "Latin" và những cái được sử dụng với các chữ số "Ả Rập-Indic" trong tiếng Ả Rập.

Có những ngôn ngữ khác có chữ số riêng.

Đây là những chữ số Devanagari được sử dụng với tiếng Hindi; tiếng Hindi là ngôn ngữ phổ biến khác sử dụng các chữ số khác nhau.

Một điều quan trọng cần lưu ý là cả tiếng Ả Rập và tiếng Hindi đều không sử dụng chữ số bản địa của chúng.

Đối với tiếng Ả Rập, nó phụ thuộc vào quốc gia, với một số, chẳng hạn như Ả Rập Xê Út, sử dụng các chữ số bản địa và những người khác, chẳng hạn như Các Tiểu vương quốc Ả Rập Thống nhất, sử dụng các chữ số Latinh.

Người dùng cá nhân cũng có thể chọn các chữ số ưa thích của họ.

Đối với tiếng Hindi, chúng tôi sử dụng các chữ số Latinh theo mặc định, nhưng người dùng có thể chọn sử dụng các chữ số gốc thay thế.

Bạn đã biết rằng việc xây dựng các chuỗi giao diện người dùng như thế này là một ý tưởng tồi.

Chuỗi được mã hóa cứng và không thể dịch được, tin nhắn không thay đổi để xử lý số nhiều, v.v.

Nhưng một lý do khác khiến điều này không tốt là giá trị của "peopleInChat" sẽ luôn được hiển thị bằng các chữ số Latinh.

Bạn có thể cũng đã biết rằng giải pháp cho điều đó là sử dụng phương thức init "được bản địa hóa" trên String, phương thức này sẽ tra cứu chuỗi thực tế trong gói ứng dụng của bạn và xử lý số nhiều đúng cách nếu bạn có tệp stringsdict.

Tin tuyệt vời là nó cũng xử lý các con số một cách chính xác.

Giá trị của phép nội suy "peopleInChat" ở đây sẽ được hiển thị với các chữ số được bản địa hóa chính xác cho ngôn ngữ và tùy chọn của người dùng.

Điều này cũng hoạt động đúng với chế độ xem văn bản trong SwiftUI.

Trình khởi tạo chế độ xem văn bản cũng sẽ hiển thị bất kỳ nội suy chuỗi nào với các chữ số được bản địa hóa đúng cách.

Luôn sử dụng String(localized:) khi xây dựng các chuỗi hiển thị của người dùng.

Nhiều API khác trên Chuỗi có thể định dạng số, bao gồm +stringWithFormat: và hàm String init nhận một số, luôn sử dụng các chữ số Latinh.

Một nếp nhăn cần lưu ý là các chuỗi tĩnh có chứa các chữ số, chẳng hạn như cái này.

Vấn đề lớn là gì?

Bạn gửi nó cho các dịch giả, họ dịch nó, và bạn nhận được cái này.

Điều này đúng ở rất nhiều nơi, nhưng ở Ả Rập Xê Út và một số quốc gia khác, bạn muốn xem điều này. Văn bản giống nhau ngoại trừ ký tự được sử dụng cho 3.

Tất nhiên, bạn có thể có các bản địa hóa riêng biệt cho các ngôn ngữ nói tiếng Ả Rập sử dụng các chữ số Ả Rập-Indic và các chữ số sử dụng các chữ số Latinh, nhưng không ai làm điều đó, và điều đó thật lãng phí.

Tệ hơn nữa, trong cả tiếng Ả Rập và tiếng Hindi, người dùng có thể chọn các chữ số họ muốn sử dụng, vì vậy bạn sẽ phải chọn bản địa hóa dựa trên sở thích của người dùng, không chỉ trên ngôn ngữ của họ.

Giải pháp là vẫn chỉ có một bản địa hóa tiếng Ả Rập hoặc tiếng Hindi, nhưng thay thế số trong thời gian chạy, mặc dù bạn biết giá trị tại thời điểm biên dịch.

Trong Swift, bạn chỉ có thể sử dụng phép nội suy chuỗi để thực hiện việc này.

Nếu bạn có các yếu tố khác đi kèm với một con số, vị trí của chúng so với con số cũng có thể là một thách thức.

Nó thậm chí không giống nhau cho tất cả các ngôn ngữ từ phải sang trái.

Lưu ý rằng dấu trừ và dấu phần trăm nằm ở các mặt khác nhau của số trong tiếng Ả Rập và tiếng Do Thái.

Trên thực tế, nó hoàn toàn không nhất thiết phải là ngôn ngữ từ phải sang trái.

Lưu ý rằng trong tiếng Thổ Nhĩ Kỳ, là ngôn ngữ từ trái sang phải, dấu phần trăm cũng ở bên trái.

Và, tất nhiên, hãy nhớ rằng nếu bạn đang sử dụng các chữ số Ả Rập bản địa, chúng sẽ sử dụng một biểu tượng phần trăm hoàn toàn khác.

Nói cách khác, bạn thực sự không muốn làm điều này, nơi bạn đang thêm dấu phần trăm, hoặc ký hiệu tiền tệ, chữ viết tắt đơn vị hoặc bất cứ điều gì cho chính bạn.

Thay vào đó, hãy sử dụng trình định dạng số để thêm ký hiệu phần trăm, hoặc ký hiệu tiền tệ, hoặc bất cứ thứ gì.

Trong Swift, điều này rất dễ thực hiện với phương thức formatted() trên tất cả các loại số.

Nếu đó là một phần của chuỗi lớn hơn, như trong ví dụ này, String(localized:) cũng sẽ đảm bảo rằng số được định dạng - hoặc bất kỳ thứ gì khác được thay thế vào chuỗi trong thời gian chạy, bao gồm các chuỗi khác, được bao quanh bằng đánh dấu sẽ giữ cho hướng viết của số được định dạng và thông báo xung quanh không làm rối tung nhau

Cuối cùng, tôi muốn để lại cho bạn một mẹo để kiểm tra ứng dụng của bạn để đảm bảo rằng bạn đang làm điều đúng đắn từ phải sang trái.

Bạn không cần phải có bản địa hóa tiếng Ả Rập hoặc tiếng Do Thái trong tệp thực thi của mình để kiểm tra ứng dụng của bạn từ phải sang trái.

Bạn thực sự có thể kiểm tra hành vi từ phải sang trái trong ngôn ngữ phát triển của mình.

Để làm điều này, hãy đưa trình chỉnh sửa sơ đồ lên Xcode.

Bây giờ hãy chuyển đến tab Tùy chọn và tìm menu "Ngôn ngữ ứng dụng".

Ở cuối menu này là một loạt các tùy chọn "ngôn ngữ giả".

Đây là những ngôn ngữ giả mạo biến đổi giao diện người dùng của bạn theo nhiều cách khác nhau để cho phép bạn kiểm tra các vấn đề bản địa hóa mà không cần bản địa hóa thực tế.

Chọn tùy chọn "Ngôn ngữ giả từ phải sang trái" và nhấp vào Chạy, và ứng dụng của bạn sẽ vẫn bằng tiếng Anh hoặc bất kỳ ngôn ngữ phát triển nào của bạn, nhưng tất cả giao diện người dùng sẽ được lật từ phải sang trái.

Và đó là tất cả những gì tôi có.

Bản địa hóa cho các ngôn ngữ từ phải sang trái liên quan đến việc chú ý đến một số vấn đề liên quan đến sự thay đổi hướng viết, nhưng hệ thống thực hiện hầu hết các công việc nặng nhọc cho bạn.

Có những trường hợp, thường là xung quanh các hướng tuyệt đối, nơi bạn có thể muốn chọn hành vi này và điều đó luôn có thể xảy ra.

Và hãy nhớ rằng không phải tất cả các ngôn ngữ đều sử dụng chữ số Latinh để hiển thị các con số.

Hãy ghi nhớ những điều này, và sẽ không khó để đưa mọi thứ từ phải sang trái.

.