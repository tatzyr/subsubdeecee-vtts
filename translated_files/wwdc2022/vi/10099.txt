10099

♪ ♪

Kiara Rose: Xin chào, tên tôi là Kiara Rose, và tôi làm Kỹ sư Mở rộng Safari.

Hôm nay tôi rất vui mừng được nói chuyện với tất cả các bạn về những gì mới trong Safari Web Extensions năm nay.

Trước khi chúng ta đi sâu vào bài thuyết trình hôm nay, tôi muốn dành một chút thời gian để cảm ơn tất cả các bạn đã gửi các tiện ích mở rộng iOS, iPadOS và macOS của mình lên App Store.

Trong tương lai, mục tiêu của chúng tôi là tiếp tục triển khai các tính năng và API mới để bạn có thể mang lại trải nghiệm tốt hơn cho người dùng của mình.

Và hôm nay, tôi sẽ nêu bật một số tính năng mới thú vị mà chúng tôi đã triển khai trong năm qua, chẳng hạn như phiên bản Manifest mới cho các tiện ích mở rộng, API được cập nhật và đồng bộ hóa các tiện ích mở rộng trên nhiều thiết bị.

Hãy bắt đầu với Manifest phiên bản 3.

Bản kê khai phiên bản 3 là phiên bản tiếp theo của nền tảng mở rộng web.

Nó giới thiệu các cải tiến về hiệu suất và bảo mật và hợp nhất các API mở rộng phổ biến.

Đối với những người đã cập nhật tiện ích mở rộng của bạn để sử dụng phiên bản 3, tiện ích mở rộng của bạn bây giờ sẽ hoạt động trong Safari 15.4 trở đi.

Đối với những người bạn chưa có, không cần phải lo lắng, bởi vì chúng tôi sẽ tiếp tục hỗ trợ các tiện ích mở rộng bằng cách sử dụng Manifest phiên bản 2 trong Safari.

Một trong những tính năng mới quan trọng trong Bản kê khai phiên bản 3 là tiện ích mở rộng của bạn có thể sử dụng nhân viên dịch vụ thay vì trang nền.

Nếu bạn là một nhà phát triển web, bạn có thể đã quen thuộc với nhân viên dịch vụ.

Đây là những trang hướng đến sự kiện nơi bạn có thể đăng ký người nghe bằng cách sử dụng addEventListener API.

Các trang này cũng tương thích với các trình duyệt khác hỗ trợ Manifest phiên bản 3.

Nếu bạn muốn tiếp tục sử dụng các trang nền cho tiện ích mở rộng của mình, bạn được hoan nghênh làm như vậy, nhưng chúng phải không liên tục.

Một cải tiến khác trong phiên bản 3 là các API để thực thi JavaScript và tạo kiểu trên trang web đã chuyển từ API tab sang API kịch bản mới.

Hầu hết các chức năng của các phương pháp này vẫn giữ nguyên, nhưng có một số tính năng mới, bổ sung mà kịch bản cung cấp, chẳng hạn như các cách mới để tiêm mã trên trang web, nhiều tùy chọn hơn cho khung nào trên trang mà mã nên được thực thi và khả năng quyết định mã nên chạy trong môi trường thực thi nào.

Chúng ta hãy xem mã cho API kịch bản mới khác với API tab như thế nào.

Trong đoạn mã này, tôi đang sử dụng tabs.executeScript API để thay đổi màu nền của trang web thành màu xanh lam.

Và với API này, tôi chỉ có thể tiêm mã chứa trong một chuỗi, bằng cách chuyển thuộc tính "mã", Nhưng bây giờ, với API kịch bản mới, tôi có thể chuyển dọc theo một đối tượng hàm chứa mã này.

Và giống như bất kỳ hàm nào khác, nó có thể chứa các đối số có thể được truyền vào.

Đây là một cách cải tiến hơn nhiều để thực thi tập lệnh vì bạn không bị giới hạn trong việc viết mã trong một chuỗi.

Và lưu ý rằng với kịch bản, có một thuộc tính mới được gọi là target.

Thuộc tính này được sử dụng để chỉ định nơi tập lệnh sẽ chạy.

Để thực thi một tập lệnh, bạn phải chỉ định ID của tab bạn muốn tập lệnh để thực thi.

API này sẽ trả về lỗi nếu ID tab không được chỉ định.

Sau đó, nếu bạn muốn chọn khung nào của trang web để tiêm mã, bạn có thể chỉ định ID khung.

Lưu ý rằng với các tab API, bạn chỉ có thể chỉ định một ID.

Nhưng với kịch bản, bạn có thể chỉ định nhiều ID.

Nhưng giả sử tôi có nhiều mã hơn và nó sẽ trông sạch hơn nhiều nếu tôi có thể chứa nó trong nhiều tệp.

Trong tabs.executeScript API, tôi chỉ có thể chỉ định một tệp, nhưng trong scripting.executeScript, tôi có thể chỉ định nhiều tệp.

Tương tự, điều tương tự cũng có thể được thực hiện đối với insertCSS, nơi bạn có thể tiêm kiểu dáng trên trang web và tương tự đối với removeCSS, nơi bạn có thể xóa kiểu dáng được tiêm từ trang web.

Các API này có sẵn để sử dụng trong cả phiên bản Manifest 2 và 3.

Tuy nhiên, các tabs.executeScript APIs không có sẵn trong phiên bản 3.

Ngoài API kịch bản mới, cũng đã có một số sửa đổi nhỏ đối với một số API khác.

Một trong những sửa đổi này là dành cho web_accessible_resources.

Trong Bản kê khai phiên bản 2, nếu bạn muốn bao gồm các tài nguyên, bạn sẽ làm như vậy bằng cách chuyển một mảng các tệp mà bạn muốn một trang web có quyền truy cập.

Nhưng điều này có thể có vấn đề vì nó sẽ cung cấp cho bất kỳ trang web nào quyền truy cập vào tất cả các tài nguyên bạn chỉ định trong Bản kê khai.

Với định dạng mới trong phiên bản 3, bạn có quyền kiểm soát tài nguyên nào có sẵn trên bất kỳ trang web nhất định nào.

Hãy xem xét một ví dụ.

Trước đây, hình ảnh bánh quy và bánh có sẵn trên mọi trang web mà tiện ích mở rộng có quyền truy cập.

Nhưng bây giờ, với phiên bản 3, tôi chỉ có thể làm cho hình ảnh chiếc bánh có sẵn trên các URL của apple.com và hình ảnh cookie chỉ trên các trang webkit.org.

Bây giờ chúng ta hãy xem xét các sửa đổi đối với API hành động_trình duyệt và hành động_trang.

Trong bản kê khai 2, các hành động được chỉ định rõ ràng như thế này.

Nhưng vì các API này hoàn thành các vai trò tương tự, chúng đã được hợp nhất để chỉ sử dụng một API trong phiên bản 3, đó là hành động.

Chúng tôi cũng đã cập nhật cách bạn tuyên bố chính sách bảo mật nội dung cho tiện ích mở rộng của mình.

Trong phiên bản 2, chính sách của tiện ích mở rộng đã được xác định bằng cách sử dụng một chuỗi.

Tuy nhiên, trong phiên bản 3, chính sách được xác định bằng cách sử dụng một đối tượng có khóa "extension_pages".

Điều quan trọng cần lưu ý là các nguồn từ xa cho các tập lệnh không còn được phép cho phiên bản 3.

Thay đổi API cuối cùng là đối với API browser.extension.getURL bị phản đối.

API này không còn được hỗ trợ trong phiên bản 3.

Thay vào đó, hãy sử dụng API tương đương trong browser.runtime.

Vì vậy, tôi đã nói về các tính năng mới được giới thiệu trong Manifest phiên bản 3, bây giờ hãy thực hiện quy trình cập nhật tiện ích mở rộng của bạn để bạn có thể sử dụng các tính năng mới này.

Tôi sẽ cập nhật tiện ích mở rộng Sea Creator từ bản trình bày năm ngoái để sử dụng Manifest phiên bản 3.

Tiện ích mở rộng này thay thế tất cả các lần xuất hiện của từ cá bằng một biểu tượng cảm xúc.

Điều đầu tiên tôi sẽ làm là thay đổi số phiên bản từ 2 thành 3.

Và mặc dù tôi vẫn có thể sử dụng trang nền không liên tục cho phiên bản 3, tôi sẽ cập nhật trang này để sử dụng nhân viên dịch vụ để tiện ích mở rộng của tôi tương thích với Chrome.

Cuối cùng, tôi sẽ thay đổi hành động_trình duyệt thành hành động.

Và về cấu trúc của Bản kê khai, đây là những thay đổi chính mà tôi sẽ cần thực hiện để tiện ích mở rộng này tương thích với các thông số kỹ thuật mới trong phiên bản 3.

Vì vậy, để kiểm tra điều này, tôi sẽ xây dựng tiện ích mở rộng và kích hoạt nó trong Safari.

Sau đó, tôi sẽ điều hướng đến trang blog webkit.org nơi tôi sẽ sử dụng tiện ích mở rộng này để thay thế mọi trường hợp của từ cá bằng biểu tượng cảm xúc cá.

Nhưng có vẻ như có điều gì đó không ổn.

Như bạn có thể thấy, không có từ nào trên trang này được thay thế bằng biểu tượng cảm xúc.

Hãy kiểm tra cửa sổ bật lên để xem có bất kỳ thông báo lỗi nào không.

Trong tab bảng điều khiển, tôi thấy rằng có một thông báo lỗi nói rằng browser.tabs.executeScript không xác định.

Đó là bởi vì API này không còn khả dụng trong phiên bản 3, vì vậy tôi nên cập nhật tiện ích mở rộng của mình để sử dụng API kịch bản mới thay thế.

Trong Xcode, tôi sẽ quay lại tệp popup.js, và sau đó tôi sẽ thay đổi dòng này để sử dụng tập lệnh thay thế.

Tôi sẽ thêm thuộc tính đích, được sử dụng để chỉ định nơi tập lệnh nên được đưa vào.

Và với API kịch bản mới, tôi sẽ phải chỉ định ID của tab.

Tôi có thể làm điều này bằng cách sử dụng tabs.getCurrent API để lấy một đối tượng chứa thông tin của tab hiện tại.

Sau đó tôi có thể sử dụng đối tượng đó để truy xuất ID tab.

Tiếp theo, tôi sẽ thêm tệp chứa tập lệnh để chạy.

Cuối cùng, thay đổi cuối cùng tôi sẽ thực hiện là thêm quyền kịch bản trong Bản kê khai.

Tôi sẽ tiếp tục và xây dựng tiện ích mở rộng và sử dụng những thay đổi này trong Safari.

Và như bạn có thể thấy, tiện ích mở rộng này hiện hoạt động trong Safari, sử dụng các tính năng mới trong Manifest phiên bản 3.

Vì vậy, đó là cách đơn giản để nâng cấp tiện ích mở rộng của bạn.

Nhưng nếu bạn chưa cảm thấy thoải mái với những thay đổi mới này, rất nhiều tính năng như nhân viên kịch bản và dịch vụ cũng có sẵn để sử dụng trong phiên bản 2.

Bây giờ chúng ta hãy xem xét một số API mà chúng tôi đã cập nhật trong năm nay, bắt đầu với yêu cầu mạng khai báo.

Yêu cầu mạng khai báo là một API chặn nội dung cung cấp cho các tiện ích mở rộng web một cách nhanh chóng và bảo vệ quyền riêng tư để chặn hoặc sửa đổi các yêu cầu mạng bằng cách sử dụng các bộ quy tắc.

API này cho phép bạn ủy thác tất cả công việc chặn và sửa đổi các yêu cầu cho Safari và tất cả những gì bạn phải làm là chỉ định các quy tắc chặn nội dung cần được áp dụng.

Bạn có thể chỉ định một bộ quy tắc trong Bản kê khai.

Ở đây tôi đã thêm quyền yêu cầu mạng khai báo và tôi đã sử dụng khóa declarative_net_request để thêm một bộ quy tắc sẽ được áp dụng cho tất cả các trang.

Trước đây, tôi chỉ có thể khai báo tối đa 10 bộ quy tắc trong Bản kê khai.

Nhưng bây giờ với các bản cập nhật mới cho tính năng này, bạn có thể khai báo tối đa 50 bộ quy tắc, có nghĩa là tiện ích mở rộng của bạn có thể tùy chỉnh nhiều hơn.

Nhưng hãy nhớ rằng chỉ có 10 trong số các bộ quy tắc này có thể được kích hoạt cùng một lúc.

Để biết thêm thông tin về cách tạo bộ quy tắc, hãy xem bản trình bày năm ngoái trên Tiện ích mở rộng web Safari, nơi chúng tôi đi sâu hơn về API này.

Hãy chuyển sang một số tính năng mới cho yêu cầu mạng khai báo.

Trước đây, bạn chỉ có thể khai báo các bộ quy tắc trong Bản kê khai, nhưng bây giờ chúng tôi đã triển khai hai API sau đây sẽ cho phép bạn cập nhật các quy tắc của mình một cách linh hoạt.

API đầu tiên là updateSessionRules, cho phép bạn thêm hoặc xóa các quy tắc cho tiện ích mở rộng của mình.

Nhưng điều quan trọng cần lưu ý là các quy tắc này sẽ không tồn tại trên các phiên trình duyệt hoặc các bản cập nhật tiện ích mở rộng.

Nếu bạn muốn cập nhật các quy tắc sẽ tồn tại, hãy sử dụng API updateDynamicRules thay thế.

Điều này sẽ cho phép bạn cập nhật các quy tắc chặn của mình mà không cần cập nhật toàn bộ tiện ích mở rộng của bạn.

Hãy cùng xem cách chúng ta có thể sử dụng một trong những API này để sửa đổi các bộ quy tắc của mình.

Tôi sẽ chặn một số nội dung trên các trang web bằng cách sử dụng tiện ích mở rộng sea creator, và sau đó, tôi sẽ sử dụng các API mới để bỏ chặn nội dung trên các trang được chọn.

Trong Bản kê khai tiện ích mở rộng, điều đầu tiên tôi sẽ làm là thêm quyền yêu cầu mạng khai báo.

Sau đó, tôi sẽ sử dụng khóa yêu cầu mạng khai báo để thêm một bộ quy tắc.

Quy tắc đang được áp dụng nằm trong tệp rules.json.

Trong tệp này, tôi đã khai báo một quy tắc chặn tất cả hình ảnh trên tất cả các URL.

Hãy xây dựng tiện ích mở rộng và xem quy tắc này được áp dụng như thế nào trong Safari.

Như bạn có thể thấy, hình ảnh trên trang này đã biến mất.

Đó chính xác là những gì chúng tôi mong đợi.

Điều này cho thấy Safari đã áp dụng thành công quy tắc chặn nội dung của chúng tôi.

Và nếu tôi điều hướng đến trang Wikipedia này về cá, tôi sẽ thấy rằng hình ảnh trên trang web này cũng đã bị chặn.

Nhưng giả sử chúng tôi muốn cập nhật các quy tắc của mình để chặn hình ảnh trên tất cả các trang mong đợi các trang blog webkit.org.

Sử dụng một trong những API được cập nhật cho yêu cầu mạng khai báo, chúng tôi có thể làm điều đó.

Hãy quay lại Xcode và thực hiện một số thay đổi.

Trong tệp popup.js, tôi sẽ khai báo một hàm để cập nhật các quy tắc chặn nội dung của chúng tôi.

Tôi sẽ thiết lập quy tắc cho phép hình ảnh trên các trang webkit.org/blog-files.

Sau đó, tôi sẽ sử dụng updateSessionRules API để thêm quy tắc này vào bộ quy tắc của chúng tôi.

Cuối cùng, tôi sẽ xây dựng tiện ích mở rộng và kiểm tra các thay đổi của chúng tôi trong Safari.

Như bạn có thể thấy, hình ảnh trên bài đăng trên blog này đã được tải, cho thấy rằng quy tắc mới của chúng tôi để cho phép hình ảnh trên trang web này đã hoạt động.

Và nếu tôi truy cập trang Wikipedia, chúng ta sẽ thấy rằng các hình ảnh trên trang này vẫn bị chặn, cho thấy rằng quy tắc mới không được áp dụng cho trang này.

Vì vậy, đó là cách bạn có thể sử dụng API yêu cầu ròng khai báo mới để cập nhật các quy tắc chặn nội dung của mình.

Bây giờ, chúng ta hãy xem cách tiện ích mở rộng của bạn có thể giao tiếp với một trang web.

Tính năng tuyệt vời này cho phép các trang web tạo hành vi tùy chỉnh nếu người dùng đã bật tiện ích mở rộng của bạn.

API được gọi là externally_connectable.

Để sử dụng nó, bạn khai báo các mẫu khớp trong Bản kê khai.

Các mẫu kết hợp này xác định trang nào có thể giao tiếp với tiện ích mở rộng của bạn.

Và một điều quan trọng cần lưu ý là tính năng này chỉ hoạt động khi sử dụng không gian tên trình duyệt.

Và cuối cùng, người dùng phải cấp quyền truy cập tiện ích mở rộng của bạn vào trang trước khi nó có thể gửi hoặc nhận tin nhắn.

Hãy xem mã bạn sẽ thêm vào trang web để sử dụng tính năng này.

Đầu tiên, bạn sẽ cần lấy extensionID.

Đó là mã định danh gói của tiện ích mở rộng và mã định danh nhóm ở định dạng này.

Bạn có thể tìm thấy mã định danh nhóm của mình trên developer.apple.com, trong tab thành viên trong cài đặt tài khoản của bạn.

Sau đó, bạn sẽ sử dụng API gửi tin nhắn để gửi tin nhắn đến tiện ích mở rộng.

Bạn có thể xử lý phản hồi mà bạn sẽ nhận được từ tiện ích mở rộng bằng cách chuyển một hàm.

Bây giờ chúng ta hãy xem mã mà tiện ích mở rộng của bạn sẽ phải nhận tin nhắn.

Tiện ích mở rộng của bạn có thể nhận tin nhắn từ trang web bằng cách nghe sự kiện được gọi là onMessageExternal.

Tiện ích mở rộng có thể gửi tin nhắn trở lại trang web bằng cách sử dụng phương thức được chuyển cho trình nghe sự kiện.

Bởi vì có các cửa hàng web tiện ích mở rộng khác nhau cho các trình duyệt khác nhau, các tiện ích mở rộng có thể có nhiều số nhận dạng khác nhau.

Vì vậy, bạn sẽ cần xác định chính xác để sử dụng để đảm bảo rằng bạn đang nhắn tin cho tiện ích mở rộng web Safari chứ không phải tiện ích mở rộng Chrome hoặc Edge.

Để làm điều này, bạn có thể sử dụng browser.runtime.sendMessage API với một cuộc gọi đến Promise.all.

Tiếp theo, hãy xem xét một số mã ví dụ sẽ giúp bạn làm điều này.

Từ trang web, bạn có thể phát nhiều tin nhắn bằng cách sử dụng nhiều ID tiện ích mở rộng.

Bạn sẽ nhận được chính xác một phản hồi từ tiện ích mở rộng và điều đó sẽ cho bạn biết ID tiện ích mở rộng nào sẽ sử dụng để liên lạc thêm.

Ở đây, tôi có một hàm gọi là determineExtensionID.

Chức năng này gửi một tin nhắn đến tiện ích mở rộng bằng cách sử dụng browser.runtime.sendMessage API.

Nếu bạn có nhiều ID và bạn muốn xác định ID chính xác để sử dụng, thì bạn có thể sử dụng Promise.all để thực hiện nhiều cuộc gọi bằng cách sử dụng hàm determineExtensionID.

Promise.all nhận một mảng các lời hứa và sau đó trả về một lời hứa duy nhất với một mảng của tất cả các giá trị đã giải quyết.

Bạn có thể sử dụng mảng này để tìm tiện ích mở rộng mà người dùng đã cài đặt.

Trong trang nền của tiện ích mở rộng, bạn sẽ cần nghe tin nhắn từ trang web.

Khi bạn nhận được tin nhắn, bạn sẽ cần gửi lại một tin nhắn để thông báo cho trang web rằng tiện ích mở rộng của bạn đã được cài đặt.

Vì vậy, đó là cách bạn có thể sử dụng API có thể kết nối bên ngoài mới để cho phép tiện ích mở rộng của bạn giao tiếp với một trang web.

Tính năng tiếp theo mà chúng tôi đã cập nhật là tính năng yêu thích cá nhân của tôi và đó là lưu trữ không giới hạn.

Và tôi rất vui mừng thông báo rằng unlimitedStorage thực sự là không giới hạn!

Cho rằng tính năng này được bạn yêu cầu rất cao, chúng tôi rất vui được chia sẻ rằng tiện ích mở rộng của bạn sẽ không còn hạn ngạch 10 MB nữa.

Bạn có thể tự do sử dụng nhiều dữ liệu như bạn thấy phù hợp.

Mặc dù, điều quan trọng cần lưu ý là người dùng có khả năng xóa dữ liệu đang được tiện ích mở rộng của bạn sử dụng tại bất kỳ thời điểm nào.

Vì vậy, hãy đảm bảo chỉ lưu trữ dữ liệu thực sự cần thiết để người dùng không cảm thấy có xu hướng xóa dữ liệu của bạn.

Để sử dụng tính năng này, chỉ cần yêu cầu quyền lưu trữ và lưu trữ không giới hạn trong Bản kê khai và bạn đã sẵn sàng.

Vì vậy, đó là tất cả các API mà chúng tôi đã cập nhật cho các tiện ích mở rộng web trong năm qua.

Cuối cùng, hãy nói về một tính năng mới sẽ dễ dàng cho phép người dùng của bạn có được tiện ích mở rộng của bạn trên tất cả các thiết bị của họ.

Trong Safari 16, chúng tôi đã làm cho trải nghiệm sử dụng các tiện ích mở rộng liền mạch hơn.

Nếu người dùng bật tiện ích mở rộng của bạn trên một trong các thiết bị của họ, nó sẽ được bật trên tất cả các thiết bị của họ.

Trên hết, chúng tôi đã làm cho quá trình tải xuống tiện ích mở rộng của bạn đơn giản hơn nhiều.

Hãy cùng xem cái này hoạt động như thế nào.

Giả sử người dùng đã bật một trong các tiện ích mở rộng của bạn trên máy Mac của họ.

Trong Cài đặt Tiện ích mở rộng trên bất kỳ thiết bị nào khác của họ, họ sẽ được cung cấp tùy chọn tải xuống tiện ích mở rộng của bạn.

Sau khi tải xuống, nó sẽ tự động được bật trên thiết bị của họ, cải thiện trải nghiệm người dùng của họ.

Bây giờ, hãy đi sâu vào cách bạn có thể thiết lập điều này cho các tiện ích mở rộng web và trình chặn nội dung.

Đầu tiên, chúng tôi khuyên bạn nên liệt kê tiện ích mở rộng của mình cho iOS, iPadOS và macOS khi gửi đến App Store.

Bằng cách này, tiện ích mở rộng của bạn sẽ có sẵn trên tất cả các thiết bị của người dùng.

Sau đó, để cho phép tiện ích mở rộng của bạn đồng bộ hóa trên các thiết bị của họ, bạn sẽ cần sử dụng một trong hai phương pháp sau.

Cách đơn giản và được khuyến nghị, là áp dụng mua hàng phổ thông.

Mua hàng toàn cầu cho phép người dùng của bạn tận hưởng tiện ích mở rộng của bạn trên tất cả các nền tảng, bằng cách chỉ mua nó một lần.

Nếu bạn sử dụng phương pháp này, bạn đã sẵn sàng.

Người dùng của bạn sẽ nhận được tất cả các tính năng mà tôi đã hiển thị sau khi họ tải xuống tiện ích mở rộng của bạn một lần.

Để thiết lập mua hàng phổ quát, bạn sẽ cần sử dụng một mã định danh gói duy nhất trên các tiện ích mở rộng của mình để nó có thể được liên kết với cùng một bản ghi ứng dụng trong App Store Connect.

Để biết thêm thông tin về cách thực hiện việc này, hãy xem tài liệu của chúng tôi về cách thiết lập mua hàng phổ quát cho các tiện ích mở rộng của bạn.

Nhưng nếu bạn chọn không thiết lập mua hàng phổ thông, bạn có thể liên kết các ứng dụng của mình theo cách thủ công.

Để làm điều này, bạn sẽ sử dụng Xcode để thêm số nhận dạng gói trong danh sách thông tin cho các ứng dụng và tiện ích mở rộng mà bạn muốn đồng bộ hóa.

Để đồng bộ hóa ứng dụng iOS và tiện ích mở rộng của bạn với các ứng dụng macOS, bạn sẽ cần sử dụng các khóa cụ thể trong danh sách thông tin.

Bạn sẽ đặt khóa này vào danh sách ứng dụng macOS của mình và khóa này vào danh sách mở rộng macOS.

Tương tự, bạn sẽ làm theo quy trình tương tự để đồng bộ hóa ứng dụng macOS của mình.

Bằng cách thêm khóa này vào danh sách ứng dụng iOS và khóa này vào danh sách mở rộng iOS.

Hãy xem cái này hoạt động như thế nào trong Xcode.

Trong Xcode, điều đầu tiên chúng ta cần làm là cập nhật cài đặt cho từng mục tiêu để bao gồm các số nhận dạng gói của các tiện ích mở rộng và ứng dụng mà chúng ta muốn đồng bộ hóa.

Tôi sẽ bắt đầu bằng cách thêm mã định danh gói cho ứng dụng macOS tương ứng trong danh sách thông tin cho ứng dụng iOS.

Và như bạn có thể thấy, tôi đã thực hiện quy trình tương tự cho ứng dụng macOS bằng cách thêm mã định danh gói ứng dụng iOS.

Và tương tự cho tiện ích mở rộng iOS bằng cách thêm mã định danh gói tiện ích mở rộng macOS.

Và cuối cùng, cho tiện ích mở rộng macOS bằng cách thêm mã định danh gói tiện ích mở rộng iOS.

Và đó là cách đơn giản để liên kết các ứng dụng và tiện ích mở rộng của bạn để người dùng của bạn có thể sử dụng chúng ở mọi nơi.

Tóm lại, bạn có thể cung cấp tính năng này cho người dùng của mình bằng cách thiết lập mua hàng chung hoặc bằng cách thêm số nhận dạng gói cho mỗi ứng dụng iOS và macOS và tiện ích mở rộng trong Xcode.

Hôm nay chúng ta đã thảo luận về Manifest phiên bản 3, các API mà chúng ta đã cập nhật và đồng bộ hóa các tiện ích mở rộng trên nhiều thiết bị.

Tôi hy vọng bạn cũng hào hứng như tôi về tất cả những tính năng mới này cho Tiện ích mở rộng web Safari.

Vui lòng tải xuống dự án mẫu có chứa mã từ phiên hôm nay và chơi với một số API mà chúng tôi đã giới thiệu.

Tiếp theo, chúng tôi rất muốn biết bạn nghĩ gì.

Sử dụng Trợ lý Phản hồi để gửi lỗi hoặc trò chuyện với chúng tôi trên Diễn đàn Nhà phát triển Safari để cung cấp phản hồi về cách chúng tôi có thể giúp phát triển tiện ích mở rộng tốt hơn cho bạn.

Không, thật đấy. Chúng tôi muốn biết bạn nghĩ gì!

Cân nhắc tham gia nhóm cộng đồng WebExtensions để định hình tương lai của các tiện ích mở rộng web.

Cuối cùng, hãy xem bài thuyết trình WWDC của chúng tôi về việc tạo các tiện ích mở rộng trình kiểm tra web.

Cảm ơn vì đã theo dõi phiên này và chúc bạn có một phần còn lại tuyệt vời trong WWDC của bạn.