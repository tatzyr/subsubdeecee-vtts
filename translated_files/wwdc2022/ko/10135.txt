10135

Yann Ly-Gagnon: 안녕하세요. 제 이름은 Yann입니다.

저는 핵심 블루투스 엔지니어입니다.

오늘, 저는 Apple Watch의 블루투스 장치에 대한 시기적절한 알림에 대해 이야기하고 싶습니다.

먼저, watchOS 앱이 백그라운드에 있는 동안 합병증을 업데이트하는 방법을 검토할 것입니다.

그런 다음, 우리는 당신의 watchOS 앱에서 시기적절한 알림을 듣는 방법에 대해 자세히 알아볼 것입니다.

우리는 또한 watchOS 9에서 주변 장치를 발견할 수 있는 새로운 방법을 보게 될 것입니다.

마지막으로, 우리는 당신이 블루투스 액세서리를 디자인하는 데 도움이 되는 모범 사례와 권장 사항을 제공할 것입니다.

첫 번째 주제로 넘어갑시다: watchOS 앱의 백그라운드에서 합병증을 업데이트하는 방법.

작년에, watchOS 8에서, 우리는 백그라운드 앱 새로 고침 중에 블루투스 액세서리로 합병증을 업데이트하는 방법을 도입했습니다.

이것은 현재 기온을 보여주는 이 예와 같이 주기적으로 업데이트할 수 있는 데이터에 좋습니다.

빠른 재교육으로, 작년 watchOS를 사용하면 합병증을 업데이트하고 백그라운드에서 주기적으로 실행되는 백그라운드 앱 새로 고침을 사용할 수 있습니다.

백그라운드 앱 새로 고침이 발생할 때마다, 앱이 블루투스 주변 장치에 다시 연결하고, 데이터를 검색한 다음, 주변 장치에서 연결을 끊을 수 있습니다.

이에 대한 자세한 내용은 "블루투스 장치를 Apple Watch에 연결"이라는 비디오를 보세요.

하지만 사용자가 알고 싶어하는 블루투스 주변 장치에서 시간에 민감한 사건이 발생하면 어떻게 될까요?

watchOS 9에서는 백그라운드에서 블루투스 액세서리의 알림을 들을 수 있는 방법을 소개하고 있습니다.

이게 작동하는 방식이야.

앱이 실행 중일 때 장치를 연결하고, 특성을 모니터링하기 시작할 것입니다.

앱이 실행을 멈추면, 코어 블루투스는 당신을 대신하여 장치에 대한 연결을 유지하고, 당신의 특성에 대한 변화를 계속 경청합니다.

장치가 그 특성의 값을 변경하면, 앱은 그 이벤트를 처리하기 위한 런타임을 얻을 것이다.

예를 들어, 로컬 알림을 게시하거나 네트워크 요청을 보낼 수 있습니다.

이것은 사용자에게 그들이 신경 쓰는 시간에 민감한 정보를 제공하기 위한 것이다.

내가 음식 온도계를 가지고 있다고 가정해 봅시다.

오븐에서 음식을 꺼내야 할 때 알림을 받을 수 있도록 원하는 요리 온도를 설정할 수 있습니다.

온도가 원하는 온도에 접근함에 따라, 온도계는 특성의 값을 변경하고, 앱은 음식이 거의 준비되었다는 현지 알림을 게시합니다.

음식이 끝나면, 나는 원하는 알림을 받는다.

그리고 만약 기온이 계속 상승한다면, 나는 마지막 알림을 받는다.

먼저, 백그라운드 모드를 구성하는 방법을 검토해 봅시다.

Watch 앱의 Info.plist에서 UIBackgroundModes에 Bluetooth-central을 추가하세요.

Xcode에서는 "필수 백그라운드 모드"라고 불리며, "CoreBluetooth를 사용하여 통신하는 앱"을 추가해야 합니다.

백그라운드 실행을 중앙으로 사용하려면 Info.plist 항목은 iOS용 앱과 동일합니다.

iOS "서명 기능"에 의존하지 말고 watchApp info.plist를 수동으로 편집해야 합니다.

코드를 봅시다.

당신이 이미 연결되어 있다고 가정하면, 당신은 GATT 서비스를 찾았고 방금 GATT 특성을 발견했습니다.

당신은 didDiscoverCharacteristicFor 콜백을 받게 될 것입니다.

콜백 내에서, 값이 바뀔 때마다 알림을 받기로 결정할 수 있습니다.

이것은 watchOS 8과 동일한 API이며, 앱이 백그라운드에 있는 동안에도 작동한다는 차이점이 있습니다.

그런 다음 didUpdateValueFor로 특성 값의 변경을 처리하기 위해 위임 방법을 구현하십시오.

특성이 변경되면, 여기에 로컬 알림을 게시하거나, 네트워크 요청을 보내거나, 앱에 적합한 것을 보낼 수 있습니다.

이 방법은 전경과 백그라운드 모두에서 호출되므로, 두 경우 모두 올바른 작업을 수행해야 합니다.

이제, 당신이 고려해야 할 몇 가지 상황에 대해 이야기해 봅시다.

먼저, 블루투스 재연결 주제에 대해.

장치가 범위를 벗어나면, 시간 초과 후 블루투스 연결이 끊어집니다.

이런 일이 발생하면, 앱은 재연결을 시도하기 위해 "connectPeripheral"을 호출하는 백그라운드 런타임을 짧게 얻을 것입니다.

이것은 iOS에서 일어나는 것과 같다.

장치가 다시 범위에 들어오자마자, 코어 블루투스는 다시 연결될 것이다.

이제, 몇 가지 한계에 대해 이야기해 봅시다.

이러한 제한은 Apple Watch 사용자의 최적의 배터리 수명을 유지하는 데 중요합니다.

장치가 블루투스 범위의 가장자리에 있고 백그라운드 BLE 연결 중에 반복적으로 연결이 끊어지면, 재연결 범위가 줄어듭니다.

이것은 Apple Watch에 가까운 장치만 다시 연결된다는 것을 의미합니다.

이러한 제한은 24시간의 롤링 윈도우에서 계산되며 사용자가 앱에서 상호 작용할 때마다 재설정됩니다.

또 다른 제한은 시기적절한 경고를 위한 백그라운드 런타임 기회의 수에 관한 것이다.

사용자에게 중요한 일이 일어날 때만 변경될 특성을 모니터링하세요.

장치에서 정기적인 데이터를 수집해야 하는 경우, 백그라운드 앱 새로 고침으로 수행해야 합니다.

앱이 한도를 초과하려고 하면, LeGattNearBackgroundNotificationLimit 알림이 게시됩니다.

앱이 그 오류를 모니터링하고 사용자가 watchOS 앱과 상호 작용하지 않는다는 것을 깨닫는 것이 좋습니다.

이 경고가 중요하다면, 네트워크 요청이나 블루투스 주변 장치의 UI 변경과 같이 사용자와 통신할 수 있는 다른 방법을 찾을 수 있는 적절한 시기일 수 있습니다.

한도를 초과하면, LeGattExceededBackgroundNotificationLimit이라는 알림이 게시됩니다.

이 시점이 지나면, 앱은 더 이상 백그라운드 런타임을 받지 않으며 백그라운드 연결이 없고 백그라운드 앱 새로 고침만 있는 watchOS 8 동작으로 되돌아갑니다.

GATT 알림 업데이트의 오류 필드에서 두 개의 알림을 검색할 수 있습니다.

백그라운드 BLE 연결의 경우, 카운트다운 대신 오류를 사용하여 한도에 도달했을 때를 아는 것이 좋습니다.

watchOS 9의 경우, 백그라운드 런타임 제한은 5로 설정됩니다.

이 두 제한 모두 사용자가 앱과 상호 작용할 때마다 재설정됩니다.

그들은 또한 앱과의 사용자 상호 작용이 없을 경우를 대비하여 한도에 도달한 후 24시간 후에 재설정합니다.

참고: 이 제한은 블루투스 백그라운드 LE 연결에만 적용됩니다.

이러한 제한에 관계없이 합병증이 활성 시계 페이스에 있는 경우 백그라운드 앱 새로 고침은 계속 발생합니다.

각 이벤트를 처리하는 데 시간이 매우 짧습니다.

매우 복잡한 처리를 할 시간이 충분하지 않을 수도 있지만, 사용자에게 중요한 일이 일어나고 있다는 것을 알리기에 충분하다.

마지막으로, 백그라운드에서 시기적절한 알림을 들으려면 Apple Watch Series 6 이상이 필요합니다.

알림을 듣는 것이 백그라운드에서 할 수 있는 유일한 일은 아니다.

watchOS 9에서는 앱이 백그라운드에 있는 동안 주변 장치를 찾을 수 있습니다.

블루투스 의료 기기와 시기적절한 경고를 감지하는 watchOS 앱이 있다고 가정해 봅시다.

전력을 절약하기 위해, 주변 장치는 심각한 상태를 감지할 때까지 광고하지 않는다.

따라서, 장치와 Apple Watch 사이에는 아직 연결이 없습니다.

여기서, watchOS 앱은 의료 기기에서 고유한 서비스 UUID를 스캔할 것이다.

이제, 의료 기기가 무언가가 심각하다는 것을 감지하면, 광고를 시작한다.

Apple Watch는 이 주변 장치를 발견하고 백그라운드에서 앱을 실행합니다.

그런 다음 앱은 사용자에게 감지된 상태를 알릴 수 있다.

작동 방식은 다음과 같습니다: Watch 앱은 주변 장치 스캔을 시작하고, Core Bluetooth는 백그라운드에서 스캔을 계속합니다.

주변 장치의 광고가 감지되면, 앱에 백그라운드 런타임이 주어지며 연결을 시작할 수 있습니다.

이것을 실현하기 위해 코드에 뛰어들자.

API는 watchOS 8에서 변경되지 않았지만, 앱이 백그라운드에 있어도 스캔이 존중됩니다.

보고 싶은 서비스 UUID로 "scanForPeripherals"를 호출하세요.

앱이 포그라운드에 있는 동안 이것을 할 수 있으며, 앱이 백그라운드에 있는 동안 계속됩니다.

"allowDuplicatesKey" 옵션을 요청하면 앱이 전경에 있을 때만 사용할 수 있습니다.

이제, 몇 가지 한계에 대해 이야기해 봅시다.

앱 실행 사이에 앱이 백그라운드 런타임을 받는 횟수에는 제한이 있습니다.

이 제한은 GATT 특성이 변경될 때 이전에 본 백그라운드 런타임과 결합됩니다.

또한, 백그라운드에서 주변 장치를 스캔하려면 Apple Watch Series 6 이상이 필요합니다.

요약하자면, 우리는 이제 시계가 백그라운드에서 스캔하는 동안 제한된 수의 블루투스 서비스 UUID를 스캔할 수 있습니다.

이제 이러한 기능을 최대한 활용하기 위해 액세서리를 디자인하는 방법에 대해 이야기해 봅시다.

블루투스 액세서리를 디자인할 때 고려해야 할 전력 절충점이 있습니다.

전력 소비가 우려되는 경우, 장치가 깊은 잠자기에 들어갈 수 있고 경고가 발생했을 때만 관련 정보를 광고할 수 있는 토폴로지를 선택해야 합니다.

절충안은, 모든 시기적절한 경고에서 블루투스 발견 시간과 함께 추가 대기 시간을 가질 수 있지만, 더 많은 전력을 절약할 수 있다는 것입니다.

이것은 의료 기기와 함께 예시에서 제공된 토폴로지이다.

반면에, 시기적절한 경고를 위해 낮은 대기 시간이 필요하지만 전력이 그다지 문제가 되지 않는다면, 백그라운드 LE 연결을 사용하고 GATT 표시와 함께 경고를 보낼 수 있습니다.

각 앱에는 두 개의 블루투스 연결 제한이 있다는 점에 유의하십시오.

이것은 우리가 온도 센서 예시에서 본 토폴로지이다.

사용자가 시기적절한 알림으로 최고의 경험을 할 수 있도록, 시간에 중요한 데이터와 비시간에 중요한 데이터를 필터링하기 위해 주변 장치에 많은 처리와 인텔리전스를 추가하는 것을 고려하십시오.

우리의 온도 예로 돌아가서, 모든 온도를 전송하는 대신, 관련 이벤트 또는 온도가 변할 때만 보낼 수 있습니다.

이 접근 방식의 이점은 시간이 중요한 이벤트를 주기적인 데이터와 적절하게 분리하면 주변 장치와 Apple Watch 사용자 모두 전력을 절약하여 전반적으로 더 나은 경험을 할 수 있다는 것입니다.

장치가 연결이 끊어지면, 연결을 다시 설정하기 위해 광고하는 것이 좋습니다.

광고 간격은 다시 연결하는 속도, 배터리 수명 등과 같은 블루투스 주변 장치의 요구 사항에 따라 다릅니다.

액세서리 지침에서, 우리는 당신이 사용할 수 있는 몇 가지 다른 가치를 제공합니다.

예를 들어, 장치가 배터리가 부족한 경우, 1022.5밀리초의 값을 사용할 수 있습니다.

또 다른 예: 20밀리초의 속도로 광고하는 경우, 이상적인 조건에서 1초 이내에 탐지할 수 있어야 합니다.

중요한 사건이 발생하는 동안에만 이 높은 광고율을 사용할 수 있도록 설계할 수 있습니다.

이제 연결 간격에 대해 이야기해 봅시다.

장치가 백그라운드에서 연결된 토폴로지를 선택하는 경우, 최소 150밀리초와 같은 긴 연결 간격을 사용하는 것이 좋습니다.

이를 통해 주변 장치의 배터리를 절약하고 Apple Watch에서 최고의 사용자 경험을 제공할 수 있습니다.

블루투스 5.3은 연결 하위 등급과 함께 Apple Watch에 출시될 예정입니다.

이를 통해 블루투스 주변 장치가 유휴 상태인 동안 연결 간격을 늘리고 더 낮은 대기 시간이 필요할 때 더 작은 연결 간격으로 빠르게 변경할 수 있습니다.

여기 플랫폼 간의 차이점을 보여주는 표가 있습니다.

이것들은 블루투스 저에너지에 대해 현재 지원되는 구성이다.

작년에 우리는 watchOS의 백그라운드 앱 새로 고침을 새로운 백그라운드 실행 모드로 도입했습니다.

올해, 만약 당신이 시리즈 6 이상을 소유하고 있다면, 우리는 오늘 설명한 것처럼 시기적절한 경고로 백그라운드 실행을 개선했습니다.

봐줘서 고마워!

.