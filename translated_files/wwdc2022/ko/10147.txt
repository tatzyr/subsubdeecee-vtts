10147

♪ ♪

제이크: 안녕, 내 이름은 제이크야.

저는 AVKit 팀의 엔지니어이며, 훌륭한 비디오 재생 경험을 만드는 것을 환영합니다.

iOS와 iPadOS 16에서, 우리는 처음부터 완전히 새로운 미디어 플레이어를 구축하여 콘텐츠에 초점을 맞추고 더 넓은 범위의 앱에 맞도록 설계되었습니다.

우리는 또한 이 새로운 미디어 플레이어를 사용하는 것이 훨씬 더 직관적이고 원활하게 느껴지는 많은 새로운 상호 작용 모델을 구축했으며, 우리는 당신이 그것을 좋아할 것이라고 생각합니다.

이 세션에서, 우리는 새로운 시스템 미디어 플레이어에 대해 자세히 알아볼 것이다.

우리는 놀라운 재생 경험을 디자인하는 방법을 배울 것이다.

우리는 macOS와 iOS에서 몇 가지 흥미진진한 새로운 시각 지능 기능을 보게 될 것입니다.

나는 새로운 미디어 플레이어와 함께 오는 모든 새로운 인터스티셜 경험을 소개하고 tvOS에서 가져온 몇 가지 새로운 API를 살펴볼 것이다.

그리고 마지막으로, 우리는 AVKit의 새로운 기능을 살펴볼 것입니다: 선택 가능한 재생 속도.

tvOS 15.0을 위해 우리는 시스템 플레이어를 재설계하여 완전히 새로운 모양과 느낌뿐만 아니라 시스템 플레이어에 많은 새로운 기능과 유용성 개선을 가져왔습니다.

음, 우리는 네 요청을 들었어.

우리가 iOS 시스템 플레이어도 개편했다고 말하게 되어 기쁩니다.

우리는 tvOS 플레이어의 모양과 느낌을 채택하여 네이티브 미디어 플레이어를 완전히 재설계했지만, 터치 퍼스트 장치를 다시 상상했습니다.

우리는 전반적으로 크롬을 제거하여 인터페이스가 더 넓은 범위의 앱 내에서 네이티브처럼 느껴지고 플레이어에게 더 현대적인 느낌을 줄 수 있도록 했습니다.

우리가 만든 몇 가지 변화를 더 깊이 파고들자.

먼저, 우리는 더 쉽게 상호 작용할 수 있도록 전면과 중앙의 재생/일시 정지 및 건너뛰기 컨트롤을 가져왔습니다.

우리는 또한 건너뛰기 간격을 15초에서 10초로 조정하여 연속 건너뛰기로 얼마나 멀리 점프했는지 더 쉽게 추적할 수 있도록 했습니다.

다음으로, 우리는 타임라인의 유용성에도 상당한 개선을 했다.

우리는 타임라인의 현재 위치를 표시하는 슬라이더 손잡이를 제거하고 있습니다.

대신, 타임라인은 이제 슬라이더를 따라 어디에서나 상호 작용할 수 있습니다.

드래그는 더 이상 현재 시간 마커에서 시작할 필요가 없습니다.

이것은 당신이 가고 싶은 곳을 더 쉽게 찾을 수 있게 해준다.

우리는 또한 비디오 측면 컨트롤을 줌 제스처에 대한 더 직관적인 핀치로 대체했으며, 잠시 후에 보여줄 것입니다.

그리고 물론, 새로운 UI는 초상화 콘텐츠에도 잘 어울린다.

iPadOS에서 플레이어는 키보드, 트랙패드, 마우스, 게임 컨트롤러 등을 완벽하게 지원하는 시스템에 원활하게 통합됩니다!

우리는 또한 콘텐츠와 일반적인 상호 작용을 훨씬 더 쉽고 직관적으로 탐색할 수 있는 컨트롤과 상호 작용할 수 있는 많은 새로운 방법을 추가했습니다.

이것들을 살펴봅시다.

먼저, 우리는 비디오의 채우기 측면을 바꾸는 새로운 방법을 추가했습니다.

이제 핀치 제스처를 사용하여 사용 가능한 줌 레벨을 이동할 수 있습니다.

꼬집는 것은 디스플레이의 안전한 영역으로 비디오를 가져올 것이다.

핀치 아웃은 디스플레이를 완전히 채우기 위해 비디오를 확대할 것이다.

다음으로, 우리는 가장 일반적인 상호 작용 중 하나인 재생/일시 정지를 스트리밍합니다.

이제 비디오를 재생하고 일시 중지하기 위해 컨트롤이 숨겨져 있는 동안에도 디스플레이 중앙을 탭할 수 있습니다.

그리고 마지막으로, 우리는 미디어 타임라인을 탐색하는 새로운 방법을 추가했습니다.

이제 스크롤 보기에서 우리 모두가 알고 사랑하는 것과 동일한 상호 작용을 사용하여 비디오의 어느 곳에서나 타임라인을 스크롤할 수 있습니다.

비디오 프레임을 스크롤하기 시작하면 인터페이스가 사라지고 가장 관련성이 높은 UI만 남기고 콘텐츠에 집중할 수 있습니다.

우리는 또한 tvOS 플레이어에서 몇 가지 새로운 기능을 가져왔습니다.

AVPlayerViewController는 이제 전체 화면 UI 내에서 기본적으로 콘텐츠 제목, 자막 및 설명을 표시할 수 있습니다.

AVMetadataItems를 기존 AVKit API로 전달하여 이들 각각에 대한 문자열을 제공할 수 있습니다.

이게 어떻게 되는지 보자.

기본적으로, 제목, 자막 및 콘텐츠 설명은 미디어의 메타데이터에서 추출됩니다.

그러나, 필요한 경우 AVPlayerItem의 externalMetadata API를 통해 미디어의 값을 재정의할 수 있습니다.

식별자 commonIdentifierTitle로 AVMetadataItem을 만들고 playerItems externalMetadata 속성에 추가하여 제목을 추가할 수 있습니다.

제목은 UI를 어지럽히지 않도록 짧고 설명적이어야 합니다.

마찬가지로, 여기서 우리는 식별자 .iTunesMetadataTrackSubtitle으로 AVMetadataItem을 만들어 자막을 추가했습니다.

자막은 콘텐츠 제목 위에 표시되며 내용을 설명하는 몇 단어여야 합니다.

마지막으로, 식별자 .commonIdentifierDescription로 설명을 추가할 수 있습니다.

이것은 제목과 자막의 오른쪽에 쉐브론을 표시할 것이다.

제목을 선택하면 콘텐츠 설명이 포함된 정보 패널이 표시됩니다.

설명은 내용에 대한 더 많은 정보가 있는 몇 문장이어야 한다.

아무 곳이나 탭하면 정보 패널이 닫힙니다.

그래서 마무리하기 위해, 우리는 새로운 간소화된 터치 첫 번째 상호 작용 모델과 다른 많은 개선 사항으로 완전히 새로운 모양과 느낌으로 iOS 시스템 플레이어를 개조했습니다.

앱에서 AVPlayerViewController를 사용하면 Picture in Picture, SharePlay, Visual Analysis, Native Catalyst 지원, 새로운 하드웨어 및 기능 지원 등을 지원하는 시스템 플레이어를 완벽하게 지원할 수 있습니다.

그리고 물론, 이 모든 것은 단 몇 줄의 코드로 얻을 수 있습니다.

이제, 앱에서 놀라운 재생 경험을 디자인할 수 있는 방법에 대해 이야기해 봅시다.

우리가 시스템 미디어 플레이어를 재설계하기 시작했을 때, 우리는 과거에 구축한 것과 다른 플랫폼을 위해 구축한 것에서 한 걸음 물러서서 "좋은 사용자 경험을 만드는 것은 무엇인가?"라고 스스로에게 물었다.

우리는 이 과정을 당신과 공유하고 싶었습니다; 우리가 새로운 플레이어를 디자인하는 방법, 왜 우리가 했던 방식으로 디자인했는지, 그리고 우리가 생각하는 것이 놀라운 미디어 경험을 정의합니다.

우리는 미디어 경험을 훌륭하게 만드는 세 가지가 있다고 생각한다.

그 경험은 직관적이어야 한다.

한 번도 사용해 본 적이 없더라도 쉽고, 친숙하고, 자연스럽게 느껴져야 합니다.

그것은 당신의 앱과 시스템 모두에서 긴밀하게 통합되어야 합니다.

그리고 마지막으로, 그것은 앞으로 만족해야 한다.

결국, 사람들은 미디어를 경험하기 위해 그곳에 있으며 당신의 앱과 디자인은 그것을 반영해야 합니다.

이제 당신의 경험을 직관적으로 만드는 것부터 시작하여 이 세 가지에 대해 더 깊이 파고들어 봅시다.

종종, 앱이 직관적으로 느껴질 때 그 이유를 파악하기가 어려울 수 있습니다.

넌 그걸 보면 그냥 알잖아.

그래서 실제로 인터페이스나 경험을 직관적으로 느끼게 하는 것은 무엇인가요?

그리고 그걸 어떻게 디자인할 수 있어?

우리는 그것이 친숙함에서 시작한다고 생각한다.

과거의 경험을 바탕으로 새로운 것을 이해하는 데 도움을 줄 수 있을 때, 그것은 직관적이다.

그것이 어떻게 작동하는지에 대한 설명이 필요하지 않거나 심지어 그것이 어떻게 작동하는지에 대해 생각할 필요가 없을 때, 그것은 당신이 기대하는 대로 정확하게 작동합니다.

우리 모두는 매일 기술과 현실 세계를 상호 작용하는 경험을 쌓는다.

이 두 가지 모두 경험적 친숙함의 훌륭한 원천이며 종종 우리가 새로운 시스템 미디어 플레이어를 설계할 때 시작한 곳이다.

직관을 끌어낼 수 있는 많은 유형의 경험이 있지만, 나는 두 가지에 집중하고 싶다; 우리가 시스템 미디어 플레이어를 설계할 때 가장 자주 의존했던 두 가지.

플랫폼 패러다임과 현실 세계.

첫 번째는 매일 기술을 사용하는 우리의 경험에서 비롯된다.

몇 년 동안 TV 리모컨을 사용하면 화살표 키가 왼쪽과 오른쪽으로 초점을 이동한다는 것을 알 수 있습니다.

마찬가지로, 터치 퍼스트 장치의 볼륨 버튼을 탭하면 오디오가 음소거됩니다.

이러한 상호 작용은 익숙하기 때문에 직관적으로 느껴진다.

미디어 경험에서 이러한 유형의 친숙한 상호 작용을 사용하여 앱을 더 직관적이고 매력적이며 자연스럽게 사용할 수 있도록 할 수 있습니다.

반대로, 익숙하지 않거나 예상치 못한 상호 작용을 찾는 것은 혼란스럽고 때로는 실망스러울 수 있다.

시스템 플레이어에서 이러한 유형의 플랫폼 친숙함을 끌어낸 몇 가지 예를 살펴봅시다.

이것의 좋은 예는 iOS 시스템 플레이어의 프레젠테이션 및 해고 모델이다.

플레이어는 아래에서 프레젠테이션을 애니메이션화하여 플레이어를 다시 밀어내어 해고할 수 있는 미묘한 타격을 준다.

우리는 이 모델이 터치 퍼스트 장치에서 광범위하게 사용되는 것을 본다.

예를 들어, 음악에서 현재 재생 중인 UI는 하단의 미니 바에서 나타나며 대화형으로 아래로 스와이프하여 해제할 수 있습니다.

하지만 어떤 경우에는, 우리는 기술에 대한 이해가 아니라 일상 생활에서 경험을 얻을 수 있다.

이러한 유형의 경험은 현실 세계에서 나온다.

수백만 년의 진화는 우리가 자연 과정에 대한 깊은 본능적 이해를 발전시키는 데 도움을 주었다.

이 이해를 활용하여 소프트웨어에서 친숙하고 직관적인 경험을 구축할 수 있습니다.

이것의 좋은 예는 iOS 플레이어의 새로운 스크롤 제스처입니다.

장난감 자동차를 테이블을 가로질러 굴리는 것과 마찬가지로, 비디오를 스와이프할 때마다 모멘텀이 있으며, 타임라인이 천천히 멈출 때까지 직접적인 상호 작용을 지나 타임라인의 움직임을 계속한다.

여기서의 추진력만으로도 현실 세계의 움직이는 물체와의 연관성을 구축한다.

이 연관성은 당신이 상호 작용의 미묘한 깊이를 발견하는 데 도움을 준다.

장난감 차와 마찬가지로, 더 세게 밀거나 여러 번 연속으로 밀면 더 빨리 갈 수 있다.

그리고 내가 그것을 잡으면, 그것은 멈춘다.

그것은 자연스럽기 때문에 자연스럽게 느껴진다.

그리고 이것에 대한 가장 좋은 점은, 시스템 플레이어를 사용하면 앱이 직관적으로 느껴질 것이라는 것입니다.

우리가 구축한 모든 자연스러운 상호 작용과 사람들이 시스템 플레이어에 대한 직관과 친숙함을 물려받았으며, tvOS, iOS 및 macOS 사용자가 기본적으로 이해할 수 있는 방식으로 최적화된 모든 디자인 패러다임 - 이 모든 것은 단 몇 줄의 코드로 얻을 수 있습니다.

직관적인 디자인을 구축하는 것은 미디어 경험을 훌륭하게 만드는 한 측면이지만, 사람들이 기대하는 모든 기능과 통합 포인트가 없으면 앱은 실수로 콘텐츠에서 초점을 맞출 수 있습니다.

이것은 우리를 놀라운 미디어 경험의 두 번째 중요한 측면인 긴밀한 통합으로 이끈다.

경험이 긴밀하게 통합되면, 사람들이 작동하기를 기대하는 모든 기능, 기능 및 장치가 작동합니다.

그리고 중요한 것은, 그들은 그들의 기대와 일치하는 방식으로 일한다는 것이다.

사람들이 장치를 사용함에 따라, 그들은 플랫폼의 기능에 의존하는 데 익숙해진다.

예를 들어, 제어 센터를 아래로 당기고 지금 재생 중인 미디어 컨트롤에 채워진 콘텐츠를 보거나, TV 프로그램을 보는 동안 알림에 응답하고, 비디오가 Picture in Picture로 원활하게 계속되도록 합니다.

앱에 이 빡빡한 시스템 통합을 구축하는 것은 당신의 경험을 원활하게 만드는 열쇠입니다.

당신의 앱은 시스템의 기본 부분처럼 느껴져야 하며 우리는 그것을 가능하게 하는 데 필요한 도구를 제공하기 위해 열심히 노력하고 있습니다.

여기에는 콘텐츠를 검색할 수 있도록 하는 CoreSpotlight 통합, 콘텐츠가 시스템 미디어 UI에 표시될 수 있도록 지금 재생 정보, 앱이 키보드 또는 TV 리모컨에서 눌렀을 때 재생 버튼과 같은 것에 응답할 수 있도록 하는 MediaRemote 명령이 포함됩니다.

우리는 심지어 당신의 미디어를 TV 앱에 직접 통합하여 더 많은 청중에게 콘텐츠를 전달할 수 있는 기능을 제공합니다.

앱을 네이티브로 만드는 것 외에도, 사람들이 좋아하는 모든 기능을 제공하는 것이 중요합니다.

AirPlay, SharePlay 및 Picture in Picture와 같은 기능.

우리는 사람들이 이러한 기능을 기대하고 이를 제공함으로써 앱 사용 경험을 향상시킬 것이라고 생각합니다.

사람들은 많은 장치와 더 많은 입력 형식에서 당신의 앱을 사용할 것입니다.

이 모든 것에 대한 지원을 제공하는 것은 모든 사람이 당신의 경험에 접근할 수 있도록 하는 데 매우 중요합니다.

이것은 tvOS에서 특히 중요하며, 사용 가능한 모든 리모컨을 지원하는 것은 모든 사람이 앱을 사용할 수 있도록 하는 데 중요합니다.

이것이 우리가 항상 tvOS에서 시스템 미디어 플레이어를 사용하는 것을 권장하는 이유 중 하나입니다.

앱은 모든 TV 리모컨, 키보드, 트랙패드, 게임 컨트롤러 및 헤드폰 컨트롤로 유동적인 경험을 보장해야 합니다.

또한, 디스플레이의 둥근 모서리나 노치와의 충돌을 피하기 위해 앱의 UI 요소가 화면의 안전 영역 내에 그려지도록 해야 합니다.

우리는 이러한 모든 통합 지점, 기능 및 하드웨어 구성에 대한 지원을 구축하는 것이 어려울 수 있다는 것을 알고 있습니다.

이것이 우리가 AVPlayerViewController를 만든 이유이므로, 단 몇 줄의 코드로 앱을 사용하는 사람은 누구나 놀라운 미디어 경험을 할 수 있습니다.

그리고 이 모든 것은, 마지막으로, 미디어 경험을 디자인하는 데 있어 가장 중요한 측면으로 우리를 이끈다; 그것을 앞으로 콘텐츠로 만드는 것.

이것은 당신의 디자인의 주요 목표가 되어야 하며, 우리가 훌륭한 미디어 경험의 정의적인 측면을 고려하는 것입니다.

앱이 직관적으로 느껴질 때, 모든 통합 포인트와 사람들이 기대하는 모든 기능이 작동할 때, 콘텐츠에 초점을 맞추고, 다른 모든 것은 백그라운드로 사라집니다.

하지만, 콘텐츠를 디자인하는 데 특별히 명심해야 할 몇 가지 사항이 있습니다.

인터페이스와 시스템 모두에서 모든 적절한 메타데이터를 제공해야 합니다.

이 정보를 제공하는 것은 미디어에 맥락을 제공하는 데 도움이 되며 시스템이 제어 센터와 잠금 화면에서 더 나은 경험을 제공할 수 있도록 합니다.

여기에는 제목과 자막, 설명, 썸네일, 시즌 및 에피소드 정보 또는 라이브 스트림의 시작 및 종료 날짜와 같은 것들이 포함됩니다.

항상 미디어를 원래의 종횡비로 유지하세요.

이것은 시스템이 당신의 비디오를 화면에 올바른 위치에 배치할 수 있게 해준다.

레터 복싱 콘텐츠는 이런 경험으로 이어질 수 있습니다.

가능한 경우 최신 미디어 표준에 대한 지원을 포함해야 합니다.

예를 들어, HDR과 돌비 애트모스.

그리고 마지막으로, 가능한 한 많은 사람들이 미디어에 접근할 수 있도록 여러 언어의 오디오 및 자막 트랙을 포함해야 합니다.

이야기의 이 섹션에서 빼야 할 한 가지가 있다면, 그것은 당신이 당신의 콘텐츠에 집중해야 한다는 것입니다.

우리는 개발자로서 그 목표를 가능한 한 쉽게 만들기 위해 AVPlayerViewController를 통해 제공되는 시스템 미디어 플레이어를 구축했습니다.

이제, 새로운 시각 지능 기능부터 시작하여 AVPlayerViewController에 추가한 몇 가지 새로운 기능을 살펴봅시다.

이 예에서는 코드 스니펫이 있는 프레임에서 일시 정지된 비디오가 있습니다.

코드 스니펫을 길게 누르면 선택됩니다.

그런 다음 그것을 복사하여 놀이터에 직접 붙여넣어 시도해 볼 수 있습니다.

이것은 macOS에서도 잘 작동한다.

같은 코드 위에 커서를 올려놓으면 텍스트를 선택할 수 있음을 나타내는 I-빔이 표시됩니다.

그런 다음 커서를 사용하여 강조 표시하거나 CMD+A를 사용하여 모두 선택할 수 있습니다.

우리는 이 기능과 함께 새로운 API를 도입하고 있습니다.

iOS의 AVPlayerViewController와 macOS의 AVPlayerView에서 사용할 수 있으며, allowsVideoFrameAnalysis는 이 기능을 전환합니다.

이것은 새로운 SDK에 대해 연결하는 모든 앱에 의해 활성화될 것이다.

allowsVideoFrameAnalysis가 true로 설정되어 있고, 미디어가 일시 중지되면, AVKit은 설정된 기간 후에 현재 비디오 프레임을 분석하기 시작합니다.

성능상의 이유로 또는 FairPlay로 보호된 콘텐츠를 스크롤하는 동안 프레임을 분석하지 않을 것입니다.

일반적으로, 우리는 사람들이 대부분의 상황에서 이 기능을 기대할 것이라고 생각한다.

그러나, 응용 프로그램에서 적절한 시각적 분석을 비활성화하고 싶은 경우가 있습니다.

예를 들어, 비디오의 컬렉션 뷰와 같은 성능에 중요한 응용 프로그램이나 스플래시 스크린과 같이 비디오와의 상호 작용이 예상되지 않는 경우.

시각 인텔리전스 기능을 앱에 통합하는 방법에 대한 자세한 내용은 VisionKit에 대한 관련 회담을 참조하십시오.

다음으로, 우리가 인터스티셜에 대한 몇 가지 개선 사항을 살펴봅시다.

지금까지, 인터스티셜은 tvOS의 AVPlayerViewController에서만 지원되었다.

음, 저는 우리가 iOS에도 같은 수준의 지원을 제공하고 있다는 것을 발표하게 되어 기쁩니다.

스트림에서 또는 AVPlayerInterstitialEvents를 통해 로컬로 정의된 인터스티셜은 이제 타임라인을 따라 표시됩니다.

타임라인이 마커에 부딪히면, 우리는 중간 지점을 연주하기 시작할 것이다.

인터스티셜이 이미 HLS 재생 목록에 완전히 정의되어 있다면, 이 동작을 자동으로 받게 됩니다. 입양이 필요하지 않습니다.

그렇지 않거나, 앱에 더 많은 사용자 지정 동작이 필요한 경우, 우리는 새로운 API도 도입할 것입니다.

AVInterstitialTimeRange는 tvOS에서 iOS로 옮겨지고 있다.

이것들은 tvOS에서 가져온 AVPlayerItem 속성인 interstitialTimeRanges에 자동으로 채워질 것이다.

HLS 스트림을 사용할 때, AVInterstitialTimeRange는 스트림의 각 틈새에 대해 합성됩니다.

AVFoundation API를 통해 로컬로 인터스티셜 이벤트를 만들 때, AVInterstitialTimeRange는 각 AVPlayerInterstitialEvent에 대해 합성됩니다.

그러나 tvOS와 달리, interstitialTimeRanges는 읽기 전용 속성이다.

인터스티셜은 HLS 스트림 내에서 또는 AVPlayerInterstitialEvents를 통해 정의되어야 합니다.

tvOS 앱에서 지원을 마이그레이션하는 사람들을 위해, 이것은 본질적으로 translatesPlayerInterstitialEvents를 예로 설정하는 것과 같습니다.

우리는 또한 tvOS에서 두 가지 위임 방법을 가져오고 있다.

이것들은 인터스티셜이 언제 재생을 시작하거나 끝났는지 아는 데 사용될 수 있다.

이것들을 API에 사용하여 iOS의 프리롤 광고에 대한 건너뛰기 버튼을 추가하는 방법을 봅시다.

먼저, 우리는 기본 미디어 플레이어를 위한 AVPlayerInterstitialEventController를 만들 것입니다.

다음으로, 우리는 중간 사건을 만들 것이다.

우리는 그것에 대한 몇 가지 제한을 정의할 것이다.

이러한 제한은 틈새 내에서 찾는 것을 방지하고 틈새를 건너뛰는 것을 방지합니다.

그런 다음 우리는 이벤트 컨트롤러에 전면을 추가할 것이다.

그리고 마지막으로, 우리는 새로운 willPresentInterstitial delegate 콜백을 구현하여 설정된 간격 후에 광고 건너뛰기 버튼을 불러올 수 있습니다.

그리고 일단 버튼을 누르면, 우리는 틈새를 취소할 것이다.

그렇게 쉬워.

이 광고 건너뛰기 버튼과 같은 사용자 지정 UI 요소를 AVPlayerViewController에 추가할 때, 항상 contentOverlayView의 하위 뷰로 추가해야 합니다.

인터스티셜을 HLS 재생 목록에 바로 통합하는 방법 또는 AVFoundation 인터스티셜 API를 사용하는 방법에 대해 자세히 알아보려면 HLS 동적 프리롤 및 미드롤 탐색에 대한 관련 회담을 확인하십시오.

이제 우리는 올해 모든 플랫폼에서 추가한 새로운 기능을 살펴볼 것입니다; 재생 속도 제어를 위한 기본 지원.

AVPlayerView와 AVPlayerViewController는 이제 우리가 추가한 새로운 API를 사용하여 선택적으로 재생 속도 메뉴를 표시할 수 있습니다.

우리는 이것을 macOS, iOS 및 tvOS에서 사용할 수 있도록 하고 있습니다.

이게 어떻게 생겼는지 살펴봅시다.

tvOS에서는 전송 바에서 새로운 컨트롤을 볼 수 있습니다.

컨트롤을 선택하면 선택할 수 있는 사용 가능한 재생 속도 목록이 표시됩니다.

iOS에서, 이 메뉴는 전송 제어 오버플로 메뉴에 나타날 것이다.

그리고 마찬가지로, macOS에서는 오버플로 메뉴에 컨트롤이 나타날 것이다.

새로운 iOS, macOS 및 tvOS SDK에 연결된 모든 앱은 추가 변경 없이 이 기능을 자동으로 받게 됩니다.

그러나, 사용 사례에 따라, 일부 응용 프로그램은 속도 목록을 수정하거나, 프로그래밍 방식으로 속도를 선택하거나, 메뉴를 완전히 비활성화할 수 있습니다.

이러한 사용 사례를 수용하기 위해, 우리는 AVPlayerView와 AVPlayerViewController에 몇 가지 새로운 API를 추가했습니다.

이것들을 살펴봅시다.

먼저, 우리는 AVKit- AVPlaybackSpeed에 새로운 클래스를 추가했습니다.

AVPlaybackSpeeds는 재생 UI에서 사용자가 선택할 수 있는 속도 옵션을 나타내며 세 가지 속성이 있습니다.

초기화에 정의된 속도 값은 재생 속도가 선택될 때 플레이어에 설정됩니다.

접근성 시스템 내에서 재생 속도를 나타내는 데 사용되는 현지화된 이름 예를 들어, 2.5의 속도는 "두 배 반 속도"의 현지화된 이름을 사용할 수 있습니다.

그리고 지역화된 숫자 이름.

이 값은 속도 속성에서 합성되며 재생 속도 메뉴에 표시되는 문자열이 됩니다. 앱에 플레이어 외부의 사용자 지정 재생 속도 메뉴가 필요한 경우, 이 문자열을 사용하여 속도를 나타냅니다.

마지막으로, AVPlaybackSpeed는 가능할 때마다 사용해야 하는 시스템 기본 속도 목록을 정의합니다.

AVPlayerView 및 AVPlayerViewController의 새로운 API와 함께 AVPlaybackSpeed를 사용하여 이 기능을 앱에 맞게 조정할 수 있습니다.

속도 속성을 사용하면 사용자 지정 재생 속도 목록을 정의할 수 있습니다.

기본적으로 이 속성은 AVPlaybackSpeed systemDefaultSpeeds 목록으로 설정됩니다.

이것을 빈 목록으로 설정하면 메뉴가 숨겨질 것이다.

선택한 속도 속성은 현재 활성화된 속도를 반환합니다.

그리고 마지막으로, selectSpeed 기능은 현재 속도를 프로그래밍 방식으로 선택할 수 있게 해준다.

플레이어 UI 외부의 속도에 대한 명시적인 선택에 대한 응답으로만 이 기능을 사용해야 합니다.

선택한 재생 속도를 암시적으로 무시하지 마세요.

예를 들어 봅시다.

여기서 우리는 AVPlayerViewController를 만들고 그것을 제시하고 있습니다.

기본적으로 이것은 시스템이 제공한 재생 속도 목록을 사용합니다.

AVPlaybackSpeed를 만들고 AVPlayerViewController의 속도 목록에 추가하여 메뉴에 새로운 속도를 추가할 수 있습니다.

빈 속도 목록을 설정하여 메뉴를 비활성화할 수도 있습니다.

그것만큼 쉬워.

하지만, 재생을 시작하려면 항상 AVPlayer play()를 호출해야 합니다.

선택한 속도가 1.0이 아닐 수 있으므로 setRate:1.0을 호출하여 재생을 시작하지 마십시오.

그리고 그것으로, 나는 그 세션을 마무리하고 싶다.

우리는 새롭게 재설계된 iOS 시스템 플레이어를 보았다.

우리는 당신이 어떻게 당신만의 놀라운 재생 경험을 디자인할 수 있는지 들었습니다.

우리는 몇 가지 멋진 새로운 시각 지능 기능을 보았고, 새로운 인터스티셜과 재생 속도 API를 검토했습니다.

나는 당신이 세션을 즐겼기를 바라며 당신의 앱에서 이러한 기능을 볼 수 있기를 기대합니다.

남은 컨퍼런스를 즐기세요.