10095

♪ 부드러운 기악 힙합 음악 ♪

♪

미란다 저우: 안녕하세요, 제 이름은 미란다이고 저는 공유 팀의 엔지니어입니다.

엘라나 스테틴: 저는 엘라나이고 메시지 팀의 엔지니어입니다.

미란다: 이 비디오에서, 엘라나와 나는 당신의 앱에서 메시지와의 협업을 향상시키는 방법에 대해 살펴볼 것입니다.

그 기능이 무엇인지에 대한 소개부터 시작하겠습니다.

이 기능을 채택할 준비를 하는 방법과 메시지를 협업을 시작하는 과정에 연결하는 방법을 배우게 될 것입니다.

Elana는 앱에 Messages UI와의 협업을 추가하는 방법을 설명할 것이며, 마지막으로 협업이 업데이트될 때 최신 정보를 유지하는 방법에 대해 논의할 것입니다.

먼저, 메시지와의 협업을 소개하겠습니다!

iOS 16과 macOS Ventura에서, 우리는 협력하는 사람들 간의 의사 소통을 개선할 수 있는 새롭고 쉬운 방법을 추가했습니다.

공동 작업자는 메시지를 통해 공유함으로써 문서를 대화에 연결할 수 있다.

협업 활동은 메시지 대화와 진행 중인 FaceTime 통화에서 나타난다.

협업의 세부 사항을 관리하고 메시지 대화에 연결하기 위해 사용자 정의 가능한 협업 팝오버도 앱에 제공됩니다.

이것은 공유 시트와 드래그 앤 드롭과 같이 이미 사용하고 있는 기술을 기반으로 합니다.

다음으로, 우리가 지원하는 협업 인프라의 유형과 각각을 메시지 협업에 연결하는 방법을 살펴볼 것입니다.

우리는 세 가지 유형의 협업 인프라를 지원합니다: CloudKit, iCloud Drive 및 현재 사용할 수 있는 사용자 지정 협업 인프라!

이 비디오에서, 저는 주로 CloudKit과 iCloud Drive 사례에 초점을 맞출 것입니다.

사용자 지정 인프라를 사용하는 경우, 자세한 내용은 "사용자 지정 협업 앱을 메시지와 통합" 비디오를 시청하세요.

CloudKit 기반 협업을 사용하는 경우, 시스템이 협업을 위해 인식할 수 있는 객체를 만들기 위해 새로운 API를 제공했습니다.

이것은 NSSharingService와의 공유를 시작하거나 관리하기 위해 macOS Sierra API를 기반으로 합니다.

협업 객체가 있으면, 앱에서 공유를 시작하거나 관리하기 위해 UI를 보여주는 위치를 식별하세요.

기존 AppKit API를 더 이상 사용하지 않을 것임 때문에 메시지와의 협업을 강화하려면 새로운 API로 업데이트해야 합니다.

새로운 협업 객체 API는 NSItemProvider를 사용한다.

NSItemProvider는 시스템 서비스에서 앱의 데이터를 시스템의 다른 프로세스로 전송하는 데 사용됩니다.

공급자는 협업 항목에 대한 CKShare 또는 협업이 시작될 때 CKShare를 만들기 위해 준비 핸들러를 필요로 한다.

앱의 CKContainer도 필요합니다.

그리고 마지막으로, 협업을 위한 액세스 및 권한 옵션을 나타내는 CKAllowedSharingOptions 객체를 제공하십시오.

옵션의 값은 이전에 NSCloudSharingServiceDelegate 메소드에서 요청된 NSCloudKitSharingServiceOptions와 동일합니다.

다음은 CloudKit 협업 객체를 만드는 것이 어떻게 생겼는지에 대한 간략한 개요입니다.

협업이 시작되고 준비 핸들러를 통과하는 경우, 공유를 만들고 핸들러의 서버에 저장해야 합니다.

이미 시작되었다면, 관련 몫을 전달하세요.

등록 중인 CKAllowedSharingOptions 인스턴스는 기본 허용 옵션 세트를 반환하는 정적 표준 속성을 사용하고 있습니다.

CloudKit 채택자는 그것을 사용하거나 제한된 허용 옵션 세트에 대한 클래스의 사용자 지정 인스턴스를 만들 수 있습니다.

CloudKit을 채택하는 데 관심이 있는 사람들을 위해, CloudKit을 사용하면 자신의 서버 코드를 작성하지 않고도 iCloud를 앱의 데이터베이스로 사용할 수 있습니다.

또한 해당 데이터의 일부를 다른 iCloud 사용자와 공유하는 기본 방법을 얻을 수 있습니다.

자세한 내용은 "CloudKit의 새로운 기능" 비디오를 보세요.

iCloud Drive를 사용하는 경우, 협업을 위한 객체는 단순히 파일 URL입니다. 우리는 그것을 인식하기 위해 모든 작업을 할 것입니다!

일단 그것을 갖게 되면, 앱에서 협업을 시작하거나 관리할 진입점을 식별하고 새롭고 개선된 버전으로 대체할 준비를 하세요.

사용자 지정 협업 인프라의 경우, 협업 객체는 SWCollaborationMetadata라고 불리며, 새로운 NSItemProvider API로 래핑됩니다.

이 API를 사용하여 협업 UI를 업데이트하는 방법에 대한 자세한 내용은 "사용자 지정 협업 앱을 메시지와 통합" 비디오를 시청하세요.

이제 넌 갈 준비가 됐어.

다음으로, 협력을 시작합니다.

두 가지 방법이 있습니다: 새로운 협업 모드에서 공유 시트를 통해, 그리고 앱이나 iOS의 파일 앱과 macOS의 Finder에서 메시지로 드래그 앤 드롭을 통해.

새로운 공유 시트 협업 모드는 헤더의 지표로 식별할 수 있으며, 이는 협업과 복사본 전송 중 하나를 선택할 수 있습니다.

공유 시트에서 협업을 하려면, 이전에 준비한 협업 객체를 공유 시트에 제공하십시오.

macOS에서, 이 협업 표시기는 아름다운 새로운 공유 팝오버에 표시됩니다!

공유 팝오버는 또한 헤더의 제목과 이미지, 대화 제안의 행, 그리고 우리가 이미 제공한 모든 전송을 포함합니다.

이에 대한 자세한 내용은 WWDC22 "AppKit의 새로운 기능" 비디오를 시청하세요.

iOS와 Mac Catalyst에서 UIActivityViewController 클래스를 사용하여 공유 시트를 보여주세요.

macOS에서 NSSharingServicePicker를 사용하여 공유 팝오버를 보여주세요.

협업 객체를 UIActivityViewController에 활동 항목으로 전달하여 협업이 활성화된 상태로 제시하십시오.

그리고 마찬가지로, 협업 객체로 NSSharingServicePicker를 초기화하여 협업이 활성화된 것을 보여줍니다.

CloudKit 채택자는 헤더에 대한 제목과 이미지를 제공하기 위해 추가 조치를 취해야 합니다.

iOS에서 UIActivityItemsConfiguration 또는 UIActivityItemSource와 같은 기존 API를 사용하여 제목과 imageProvider와 함께 LPLinkMetadata 객체를 제공하십시오.

협업 객체로 구성을 만든 다음, 공유되는 항목에 대한 LPLinkMetadata 객체를 반환하도록 메타데이터 공급자를 설정하십시오.

마지막으로, 그 구성으로 UIActivityViewController를 초기화하세요.

macOS에는 헤더 메타데이터를 제공하기 위한 NSPreviewRepresenting ActivityItem이라는 새로운 API가 있습니다.

자세한 내용은 NSPreviewRepresenting ActivityItem 문서를 참조하십시오.

NSPreviewRepresenting ActivityItem을 사용하려면, 먼저 제목, 이미지 및 아이콘을 선택하십시오.

이미지는 공유되는 항목을 나타내는 반면, 아이콘은 공유되는 항목의 소스를 나타냅니다. 예를 들어, 앱 아이콘.

협업 객체, 제목, 이미지 및 아이콘으로 NSPreviewRepresenting ActivityItem을 만들고, 해당 미리보기 항목으로 NSSharingServicePicker를 초기화하십시오.

흥미롭게도, 공유 시트를 위한 새로운 SwiftUI ShareLink API는 협업 모드도 지원할 것입니다!

채택하려면, 당신이 공유하는 항목은 공유 및 데이터 전송을 위한 새로운 프로토콜인 Transferable로 표시되어야 합니다.

CloudKit 어답터는 양도 가능한 항목에서 반환된 CKShareTransferRepresentation을 통해 공유, 컨테이너 및 옵션을 제공합니다.

자세한 내용은 "Meet Transferable"과 WWDC22 "SwiftUI의 새로운 기능" 비디오를 시청하세요.

다음은 Notes와 같은 CloudKit 채택자가 ShareLink와 공유할 전송 가능한 객체를 만드는 방법의 예입니다.

이 메모는 기존 CKShare, CKContainer 및 CKAllowedSharingOptions 값으로 기존 값으로 구성된 CKShareTransferRepresentation 또는 CKContainer, CKAllowedSharingOptions 값 및 협업 객체에 대한 CKShare를 만들고 저장하기 위한 준비 핸들러로 구성된 CKShareTransferRepresentation을 제공합니다

iCloud Drive 채택자의 경우, 파일 URL은 ShareLink를 통해 공유하는 전송 가능한 객체입니다.

사용자 지정 협업 인프라가 있는 경우, "사용자 지정 협업 앱을 메시지와 통합" 비디오를 보고 전송 가능한 개체에서 SWCollaborationMetadata 개체를 반환하는 방법을 알아보세요.

전송 가능한 객체가 있으면, 공유할 항목으로 ShareLink 이니셜라이저에 전달하세요.

동시에, 공유 시트 헤더를 채우기 위해 제목과 이미지로 미리보기를 전달하세요.

공유 시트 협업 모드 헤더의 주목할 만한 기능 중 하나는 액세스 및 권한 옵션의 요약입니다.

이 요약을 탭하면 공동 작업자가 협업할 때 사용할 액세스 및 권한 옵션을 선택하는 보기가 나타납니다.

CloudKit 채택자의 경우, 이 보기는 협업 객체에 등록된 옵션 세트를 보여줍니다.

iCloud Drive 채택자는 iCloud Drive 옵션의 표준 세트를 보여줍니다.

사용자 지정 인프라가 있는 경우, 사용자 지정 옵션을 지정하고 이 보기에 표시하는 방법은 "사용자 지정 협업 앱을 메시지와 통합" 비디오를 시청하십시오.

협업을 시작하는 방법이 하나 더 있는데, 그것은 드래그 앤 드롭을 통해서이다.

공동 작업자는 단순히 문서를 메시지로 드래그하고 메시지에서 문서에 대한 새로운 협업 지원 리치 링크를 얻을 수 있습니다.

이 풍부한 링크는 협업과 복사본 전송, 그리고 협업 옵션을 선택할 수 있는 기능을 제공합니다.

채택하려면, iOS 16과 macOS Ventura에서 ShareLink를 통해 협업 객체를 제공하세요.

그리고 그것이 당신이 메시지와의 협업을 준비하고 시작하는 방법입니다.

다음으로, 앱의 협업 경험을 한 단계 끌어올리는 것에 대해 이야기할 Elana에게 넘길 것입니다.

엘라나: 고마워, 미란다!

이제 시작하는 방법을 알았으니, 협업 UI를 앱에 더 통합하는 방법에 대해 이야기하겠습니다.

우리는 협업 경험을 증폭시키기 위해 이러한 새로운 기능을 추가했습니다.

협업 버튼은 앱의 탐색에 배치되며 관련 메시지 그룹의 그룹 사진을 표시합니다.

또한 다른 사람들이 문서에 있을 때 표시되는 버튼 오른쪽에 활성 참가자 수가 있습니다.

협업 버튼을 탭하면, 새로운 협업 팝오버가 나타납니다.

사용자 정의 가능한 팝오버는 협업의 개요를 보여준다.

또한 사용자는 한 번의 탭으로 다른 참가자들과 소통을 시작할 수 있습니다.

이것은 그들에게 메시지와 페이스타임을 통해 실시간으로 함께 일할 수 있는 기능을 제공한다.

이러한 UI 요소는 모두 SharedWithYou 프레임워크의 단일 클래스로 구동됩니다: SWCollaborationView.

이 보기는 내비게이션의 버튼 보기를 나타냅니다.

SWCollaborationView를 초기화하기만 하면 팝오버 레이아웃과 프레젠테이션을 처리해 드리겠습니다.

사용자 지정 콘텐츠를 표시하려면, 팝오버에 추가될 보기를 제공할 것입니다.

이제, SWCollaborationView를 만들기 위해 코드를 검토하겠습니다.

itemProvider로 SWCollaborationView를 초기화하세요.

itemProvider에는 CloudKit 기반 앱용 CKShare, iCloud Drive 기반 앱의 fileURL 또는 사용자 지정 협업 인프라용 SW 협업 메타데이터가 포함되어 있습니다.

협업 보기에서 activeParticipantCount 속성을 설정하여 문서의 활성 참가자 수를 표시합니다.

그런 다음 collaborationView에서 contentView 속성을 설정하여 팝오버에 사용자 지정 콘텐츠를 제공합니다.

ContentView는 팝오버를 완전히 사용자 정의할 수 있게 해준다.

이것은 사용자가 협업에서 무슨 일이 일어나고 있는지에 대한 독특한 견해를 제공하기 위해 자신의 콘텐츠를 추가하는 곳입니다.

예를 들어, Pages에서 ContentView에는 현재 참가자 목록과 참가자 커서 토글이 포함되어 있습니다.

이제, "관리" 버튼을 살펴봅시다.

CloudKit 및 iCloud Drive 채택자의 경우, 이 관리 버튼은 참가자를 추가 및 제거하거나 공유 설정을 변경할 수 있는 관리 UI를 불러옵니다.

나는 곧 이것에 대해 더 이야기할 것이다.

협업 보기에서 manageButtonTitle 속성을 설정하여 제공된 버튼 제목을 사용자 정의하십시오.

이 속성을 설정하지 않으면, 제목은 기본적으로 "공유 관리"로 설정됩니다.

앱이 사용자 지정 협업 인프라를 사용하는 경우, contentView에 자신만의 관리 버튼을 포함하세요.

하나는 당신에게 제공되지 않을 것입니다.

Mac에서, 버튼이 Apple 디자인 권장 사항을 준수할 수 있는 투명한 배경을 가지고 있는지 확인하세요.

마지막으로, collaborationView를 사용자 지정 보기로 사용하여 여기에 표시된 것처럼 iOS에서 UIBarButtonItem을 만드세요.

Mac에서, UIBarButtonItem을 사용하여 NSToolbarItem을 초기화하세요.

그런 다음, 바 버튼 항목이나 도구 모음 항목을 ViewController의 navigationItem에 추가하십시오.

앞서 언급했듯이, CloudKit과 iCloud Drive 채택자에게는 협업 팝오버에 버튼이 제공됩니다.

이것은 당신이 항상 할 수 있었던 것과 같은 방식으로 주식을 관리할 수 있게 해준다.

제공된 관리 UI의 변경 사항은 이미 변경 사항을 관찰하는 데 사용된 동일한 위임 프로토콜을 준수하여 관찰할 수 있습니다: UICloudSharing ControllerDelegate 및 NSCloudSharing ServiceDelegate.

이제 새로운 협업 UI를 앱에 통합하는 방법을 이해하게 되었습니다.

다음으로, 협업에 대한 업데이트를 관찰하고 처리하는 방법을 살펴보겠습니다.

공유가 언제 시작되거나 멈출지 아는 것이 중요하다.

CloudKit 채택자를 위해, 우리는 당신에게 그것을 알리기 위해 CKSystemSharing UIObserver라는 새로운 프로토콜을 추가했습니다.

이 프로토콜을 사용하면 CloudKit 공유 UI 없이 CKShare가 저장되거나 제거될 때 해당하는 콜백을 받을 수 있습니다.

내가 지금 코드를 좀 안내해 줄게.

CKContainer를 사용하여 관찰자를 초기화하세요.

관찰자에서 CKShare가 저장될 때 실행할 클로저를 정의하고 systemSharingUI DidSaveShareBlock에 할당하십시오.

클로저에서, 공유가 올바르게 저장되었다면, 공유가 시작되었음을 나타내는 성공 결과와 함께 작업할 관련 CKShare를 얻을 수 있습니다.

저장이 실패하면, 실패 결과와 관련 오류를 받게 됩니다.

다음은 문서 소유자가 공유를 중단할 때의 폐쇄 구현입니다.

성공적인 경우, CKShare는 성공적으로 삭제되었다.

실패의 경우, 당신은 또한 관련 오류를 받게 될 것입니다.

주식을 시작하고 멈추는 것이 당신이 신경 쓸 수 있는 유일한 변화는 아니다.

몇 가지 변화, 당신은 심지어 사용자에게 거품을 주고 싶을 수도 있습니다.

관련 메시지 스레드 상단에 협업에 대한 업데이트를 요약한 공지를 게시할 수 있도록 API를 추가했습니다.

협력자들은 업데이트가 무엇이고 누가 변경했는지 보여준다.

공지를 게시하려면, Shared with You에서 협업 특정 유형의 하이라이트인 SWCollaborationHighlight를 검색하십시오.

그것을 사용하여 SWCollaborationHighlight 이벤트를 만드세요.

"앱에 공유 추가" 비디오에서 SWHighlights 및 기타 SharedWithYou API에 대해 자세히 알아보세요.

통지를 채택하기 위해 작업을 시작하기 전에 이 비디오를 보세요.

나는 예를 들어 CloudKit 앱을 사용하여 다른 공지를 게시하는 것에 대해 이야기할 것이다.

앱이 사용자 지정 협업 인프라를 사용하는 경우, "사용자 지정 협업 앱을 메시지와 통합" 비디오를 보고 자세한 지침을 확인하세요.

공지를 나타내기 위해, 우리는 SWHighlightEvent라는 프로토콜을 도입했습니다.

하이라이트 이벤트는 SWHighlightCenter API에서 검색된 SWHighlights로 초기화됩니다.

지원되는 이벤트 유형에는 콘텐츠 업데이트 또는 댓글에 대한 변경 이벤트, 사용자가 협업에서 언급될 때의 언급 이벤트, 콘텐츠가 이동, 이름 변경 또는 삭제될 때의 지속성 이벤트, 참가자가 문서에서 추가되거나 제거될 때의 멤버십 이벤트가 포함됩니다.

다음은 협업이 편집되었을 때 변경 이벤트를 게시하는 방법을 보여주는 예입니다.

하이라이트 센터 API를 사용하여 CKShare URL을 사용하여 협업 하이라이트를 검색하십시오.

기억하세요, 이 CKShare는 협업 시작 중에 정의한 것이므로, 콘텐츠가 변경될 때 앱에서 사용할 수 있어야 합니다.

다음으로, HighlightChangeEvent 인스턴스를 만드세요.

이니셜라이저는 하이라이트와 트리거 열거형 값을 취한다.

이 경우, 우리는 편집할 트리거 유형을 설정합니다.

마지막으로, 그 행사에 대한 공지를 하이라이트 센터에 게시하세요.

나머지 이벤트는 언급 이벤트라는 유일한 예외를 제외하고 비슷한 형식을 따르는데, 어떤 사용자가 언급되었는지 나타내기 위해 더 많은 정보가 필요하기 때문이다.

앱이 사용자 언급을 지원하는 경우에만 이러한 유형의 이벤트를 게시할 수 있습니다.

검색된 하이라이트와 언급된 CKShare 참가자의 핸들을 전달하여 mentionEvent를 만드세요.

이 통지는 언급된 사용자에게만 표시될 것이다.

콘텐츠를 이동, 이름 변경 또는 삭제할 때 지속성 이벤트 유형을 사용하세요.

여기서, 이름이 바뀐 트리거 유형은 문서 이름이 변경되었음을 나타내는 데 사용됩니다.

마지막으로, 여기 멤버십 이벤트가 있습니다.

멤버십 이벤트의 경우, 대신 addedCollaborator 또는 removedCollaborator 트리거 유형을 사용하세요.

Mentionevents와 함께, 문서 멤버십이 어떻게 변경되었는지 보여주기 위해 공지가 게시됩니다.

그러나, 우리는 또한 메시지 그룹 멤버십이 변경될 때 공유 문서의 공동 작업자를 동기화할 수 있도록 했습니다.

CloudKit과 iCloud Drive의 경우, 이것은 간단합니다: 우리는 당신을 위해 일을 합니다.

새로운 사람이 협업을 통해 메시지 그룹에 추가되면, 문서 소유자는 통지를 통해 공유에 추가하라는 메시지가 표시됩니다.

누군가가 제거될 때도 마찬가지입니다.

사용자 지정 협업 인프라가 있는 앱의 경우, 해야 할 일이 조금 더 있습니다.

"사용자 지정 협업 앱을 메시지와 통합"에서 자세히 알아볼 수 있는 SWCollaborationActionHandler API를 채택해야 합니다.

이제 CloudKit, iCloud Drive 또는 자신의 협업 인프라를 사용하든 메시지에서 협업을 시작하고 앱에 통합하는 방법을 알 수 있습니다.

새로운 공유 시트와 드래그 앤 드롭 API를 채택하여 협업을 시작할 수 있도록 앱을 준비하세요.

새로운 협업 UI를 통합하여 공유 문서에서 일어나는 일에 대한 맞춤형 개요를 제공합니다.

설정이 완료되면, 더 나아가 메시지 스레드 내에서 협업에 대한 변경 사항을 표시하는 통지를 채택하십시오.

미란다와 저는 당신의 앱이 메시지에서 이러한 새로운 협업 기능을 어떻게 활용하는지 빨리 보고 싶습니다!

둘 다: 봐줘서 고마워!

♪