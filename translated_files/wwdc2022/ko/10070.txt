10070

♪ ♪

모하메드: 안녕하세요, 저는 UIKit의 모하메드입니다.

데스크톱 클래스 iPad 앱을 만드는 데 깊이 관여해 주셔서 감사합니다.

이 비디오에서, 우리는 iPadOS 16 API를 사용하여 기존 iPad 앱을 데스크톱 수업 경험으로 업데이트할 것입니다.

우리는 새로운 내비게이션 바 API를 사용하여 강력한 기능을 표면화하고, UI 밀도를 높이며, 사용자 정의 기능을 제공하는 것으로 시작할 것입니다.

그런 다음, 우리는 복잡한 워크플로우와 여러 선택에 대한 빠른 작업을 가능하게 하기 위해 새로운 UICollectionView와 메뉴 API를 채택할 것입니다.

그리고 우리는 새로운 찾기 및 바꾸기 경험을 활성화하고 새로운 편집 메뉴로 텍스트 편집을 향상시킴으로써 모든 것을 마무리할 것입니다.

우리가 업데이트할 앱은 iPadOS 15용으로 제작된 마크다운 편집기입니다.

현대화 과정의 각 단계를 거치면서, 나는 우리의 선택 뒤에 있는 모범 사례와 동기에 대해 논의할 것이며, 비슷한 과정을 통해 자신의 앱을 가져가는 동안 고려해야 할 요인에 대한 아이디어를 제공할 것입니다.

시작하기 전에 약간의 입문서를 원한다면, "Meet Desktop Class iPad"에서 UIKit의 모든 새로운 iPadOS API에 대한 분석을 확인하고, "iPad 앱 디자인의 새로운 기능"에서 가능한 최고의 Desktop Class iPad 앱을 디자인하는 방법에 대한 팁을 확인하세요.

좋아, 바로 들어가자!

일을 시작하려면, 앱 컨트롤의 구성을 고려해 봅시다.

이 앱은 iPadOS 15용으로 설계되었기 때문에 이미 탐색 모음에서 가장 중요한 컨트롤을 노출하고 다양한 메뉴와 팝오버에 보조 컨트롤을 배치합니다.

iPadOS 16에서 UIKit은 기존 내비게이션 스타일을 공식화하고 밀도가 높고 사용자 정의 가능한 레이아웃으로 두 가지 새로운 스타일을 소개합니다.

이를 통해 앱은 UI의 최전선에 더 많은 기능을 제공하는 동시에 콘텐츠에 가장 적합한 레이아웃을 표현할 수 있습니다.

네비게이터 앱에는 친숙한 푸시/팝 내비게이션 모델이 있습니다.

이것은 일반적으로 설정과 같은 계층적 데이터를 표시하는 앱에 적합합니다.

사파리나 파일과 같은 브라우저는 여러 문서나 폴더 구조 사이를 둘러보고 탐색하는 데 이상적입니다.

그리고 편집자는 개별 문서를 집중적으로 보거나 편집하는 데 적합합니다.

마크다운 편집기이기 때문에, 이 스타일은 우리 앱을 위한 완벽한 선택입니다.

편집기 스타일은 제목을 막대의 앞쪽 가장자리로 정렬하여 새로운 항목 세트를 위한 중앙을 엽니다.

이를 통해 다른 보기나 메뉴에 숨겨져 있을 수 있는 추가 기능을 노출할 수 있습니다.

우리는 이 디자인을 가능한 한 많이 사용하기 위해 몇 가지 일을 할 것이다.

우리는 우리의 필요에 맞게 내장된 백 액션을 사용자 정의하는 것으로 시작할 것입니다.

그런 다음 문서 정보와 일반적인 문서 작업이 포함된 제목 메뉴를 추가할 것입니다.

우리는 또한 새로운 내장된 이름 바꾸기 UI를 통해 이름 바꾸기 지원을 추가할 것입니다.

그리고 마지막으로, 우리는 그것을 바의 중앙으로 가져와 이전에 묻힌 기능에 더 쉽게 접근할 수 있도록 할 것이다.

뷰 컨트롤러의 navigationItem의 스타일 속성을 .editor로 설정하여 편집기 스타일을 선택하는 것으로 시작합시다.

이것은 즉시 우리에게 최고의 정렬된 타이틀을 제공하고 중앙 영역을 열어준다.

그 후, 후행 완료 버튼을 제거하고 새로운 backAction API를 사용하여 교체합시다.

이런 식으로 우리는 이 보기를 무시하고 문서 선택기로 돌아가는 행동에 대해 더 표준적으로 볼 수 있습니다.

다음으로 우리 앱이 타이틀 메뉴의 혜택을 받을 수 있는지 알아봅시다.

이름에서 알 수 있듯이, 제목 메뉴는 탐색 모음의 제목 보기에서 표시됩니다.

전체 문서에 적용되는 문서 메타데이터와 표면 작업을 보여주기에 좋은 장소입니다.

앱이 문서 기반이 아니라면, 전체 보기에 적용되는 작업을 표면화하기에 좋은 장소일 수 있습니다.

우리 앱의 경우, 문서 메뉴의 헤더를 사용하여 문서에 대한 유용한 정보를 표시하는 것이 합리적입니다.

우리는 또한 문서의 드래그 가능한 표현과 공유 기능에 대한 쉬운 액세스를 제공할 수 있을 것이다.

그리고 이제 코드를 작성할 시간이야!

우리 앱은 UIDocument 백업되므로, UIDocument의 fileURL을 사용하여 UIDocumentProperties 객체를 인스턴스화할 수 있습니다.

다음으로, 우리는 같은 URL을 사용하여 NSItemProvider를 만들 것입니다.

그런 다음 항목 공급자를 사용하여 속성 객체의 dragItemsProvider에서 반환할 UIDragItem을 만들 것입니다.

우리는 또한 그것을 사용하여 속성 객체의 activityViewControllerProvider에서 반환할 UIActivityViewController를 구성할 것입니다.

그리고 마지막으로, 우리는 속성 객체를 편집기 뷰 컨트롤러의 navigationItem의 documentProperties로 설정할 것입니다.

우리가 방금 작성한 코드는 이 문서 헤더의 결과이며, 이는 이름, 크기 및 아이콘 표현을 포함한 문서의 빠른 개요를 제공합니다.

드래그 항목과 활동 보기 컨트롤러 공급자를 지정했기 때문에, 아이콘을 드래그하여 앱 외부에서 문서를 복사하거나 공유 버튼을 탭하여 활동 보기 컨트롤러를 불러올 수 있습니다.

문서 헤더를 표시하는 것 외에도, 제목 메뉴는 전체 문서에 적용되는 기능을 제공하기에 좋은 장소입니다.

이 메뉴에는 두 가지 종류의 작업이 있습니다: 미리 정의된 현지화된 제목과 기호 이미지가 있는 시스템 제공 작업과 앱이 제공하는 완전히 사용자 지정 작업입니다.

몇 가지 추가 행동과 함께 제공되기 때문에, 이름 바꾸기 작업부터 시작합시다.

이름 바꾸기 대리자 프로토콜을 준수하여 이 작업을 메뉴에 추가할 수 있습니다.

트리거되면, 이 작업은 바의 내장된 이름 바꾸기 UI를 보여준다.

먼저 우리는 뷰 컨트롤러를 내비게이션 항목의 renameDelegate로 할당할 것입니다.

그런 다음, 우리는 표시된 문서의 실제 이름 변경을 처리하기 위해 navigationItemDidEndRenamingWithTitle을 구현할 것입니다.

이 함수는 이름 바꾸기 작업이 커밋될 때 호출됩니다.

실제로 문서의 이름을 변경하여 이것을 처리하는 것은 앱의 책임이다.

API는 앱이 가질 수 있는 모든 종류의 데이터 모델을 지원하기 위해 의도적으로 개방형입니다.

다른 시스템에서 제공하는 작업으로 넘어가면, 먼저 편집기 뷰 컨트롤러에서 기능을 재정의해야 합니다.

여기서 우리는 중복 및 이동 기능을 구현했습니다.

UIKit은 navigationItem의 titleMenuProvider에서 이름 변경 작업을 포함하여 시스템 제공 작업을 제안된 UIMenuElements의 배열로 자동으로 표시합니다.

그것들을 우리의 제목 메뉴에 포함시키기 위해, 우리는 그것들을 반환된 메뉴의 아이들에 추가할 것입니다.

시스템 vended 작업 외에도, 우리는 완전히 사용자 지정 작업 또는 전체 메뉴 계층을 추가할 수 있습니다.

여기에 HTML 및 PDF 하위 작업으로 내보내는 내보내기 하위 메뉴를 추가했습니다.

그리고 그것으로, 제목 보기를 탭하면 문서 헤더와 방금 추가한 모든 작업이 있는 메뉴가 나타납니다.

그리고 이름 바꾸기를 선택하면, 내장된 이름 바꾸기 UI가 활성화되고 문서의 이름을 바꿀 수 있습니다.

이제 앱의 기본 구조를 구축하기 시작했으므로, Mac 촉매로 앱을 빌드할 때 상황이 어떻게 보이는지 확인할 수 있는 좋은 시기입니다.

Mac에서 앱을 실행할 때, 주요 정렬된 제목을 가진 편집기 스타일이 잘 번역되었다는 것을 알게 될 것입니다.

우리의 백 액션도 이월되었고, 클릭하면 파일 브라우저가 나타납니다.

시스템이 제공한 작업과 이름 바꾸기 기능은 앱의 파일 메뉴에서 자동으로 나타납니다.

titleMenuProvider는 Mac Catalyst에서 호출되지 않으므로 사용자 지정 작업은 파일 메뉴에 포함되지 않습니다.

이러한 작업을 노출하려면, 기본 UIMenuSystem을 사용하여 앱의 메인 메뉴에 수동으로 추가해야 합니다.

좋아, 우리의 현대화 과정을 계속하자.

우리는 목표를 향해 나아가면서 Mac을 계속 확인할 것이다.

바의 중심 지역에서 이용할 수 있는 기회를 고려해 봅시다.

iOS 15 버전의 앱에는 여러 보조 컨트롤과 도구가 있는 메뉴가 있습니다.

센터 아이템으로, 우리는 이 도구들을 더 쉽게 발견할 수 있게 만들 수 있다.

중앙 영역은 사용자 정의할 수 있기 때문에, 우리는 덜 일반적으로 사용되는 것으로 UI를 채우는 것에 대해 걱정하지 않고 큰 컨트롤 세트를 포함할 수 있습니다.

각 사람은 자신의 작업 흐름에 맞게 바의 내용을 조정할 수 있다.

사용자 지정을 활성화하는 첫 번째 단계는 탐색 항목에 사용자 지정 식별자를 지정하는 것입니다.

다음으로, 우리는 중앙 항목을 UIBarButtonItemGroups로 정의할 것입니다.

그룹은 UINavigationBar로 확장되고 iOS 16에서 사용자 지정을 지원하도록 향상된 기존 개념입니다.

이 스크린샷은 기본적으로 보여주고 싶은 중앙 항목 세트를 보여줍니다.

왼쪽의 동기화 스크롤 버튼은 다른 방법으로는 접근할 수 없는 중요한 기능을 제공하므로 UIBarButtonItem의 새로운 creatingFixedGroup() 함수를 사용하여 고정 그룹에 배치하는 것이 합리적입니다.

고정 그룹은 사용자 정의할 수 없으며 사용자가 이동할 수 없습니다.

반면에 링크 추가 버튼은 중요한 기능을 제공하지 않으며, 편집기에 링크 태그를 입력하여 동일한 작업을 수행할 수 있으므로, createOptionalGroup을 사용하여 완전히 사용자 정의 가능한 항목을 만들 것입니다.

그리고 우리는 앱 실행 전반에 걸쳐 사용자 지정이 유지되도록 고유한 사용자 지정 식별자를 제공할 것입니다.

우리는 비슷한 과정을 따라 기본 세트의 나머지 항목을 정의한 다음, 기본적으로 사용할 필요가 없는 우선 순위가 낮은 항목으로 넘어갈 것입니다.

그러한 항목 중 하나는 볼드체, 이탤릭체 및 밑줄 항목을 포함하는 텍스트 형식 그룹입니다.

기본적으로 보여주기에는 중요하지 않지만, 바에 드래그할 수 있도록 사용자 지정 팝오버에 넣고 싶습니다.

이를 달성하기 위해, 우리는 isInDefaultCustomization이 false로 설정된 UIBarButtonItemGroup의 선택적 그룹 이니셜라이저를 사용할 것입니다.

우리는 또한 그룹에 대표 항목을 제공해야 팝오버에 제목이 있고, 바 공간이 부족할 때 축소할 수 있는 컴팩트한 표현을 가질 수 있습니다.

iPad로 돌아가서, 우리가 정의한 중앙 항목이 바 중앙에 나타난다.

새로 추가된 더 보기 버튼을 클릭하면 메뉴에 사용자 지정 도구 모음 작업이 표시됩니다.

그리고 내가 그것을 클릭하면, 사용자 지정 모드가 활성화된다.

우리가 고정으로 표시한 동기화 스크롤 버튼은 강조되지 않고 정적이며, 다른 모든 항목은 들어 올리고 흔들어 사용자 정의할 수 있음을 보여줍니다.

포맷 그룹과 같은 선택적 항목은 팝오버에 나타나며 막대로 드래그할 수 있습니다.

Mac에서 앱을 실행할 때, 중앙 항목이 완전히 사용자 정의 가능한 macOS 도구 모음 버튼으로 변환되었다는 것을 알 수 있습니다.

넘어가기 전에, 잠시 iPad로 돌아가서 앱의 크기를 조정해 봅시다.

이제 도구 모음에서 사용 가능한 공간이 줄어들기 때문에, 중앙 항목은 더 이상 보이지 않습니다.

UIKit은 사용 가능한 공간에 대한 응답으로 센터 항목을 표시하고 숨기는 것을 자동으로 처리합니다.

맞지 않는 항목은 오버플로 메뉴에 표시됩니다.

표준 바 버튼 항목은 자동으로 메뉴 표현으로 변환되지만, 원한다면 사용자 지정 메뉴 표현을 제공할 수도 있습니다.

UIKit은 사용자 지정 보기 항목의 목적에 대한 통찰력이 없기 때문에 슬라이더 항목이 자동으로 번역되지 않습니다.

우리는 메뉴 표현을 수동으로 지정해야 할 것이다.

여기 우리의 슬라이더 아이템이 있습니다.

선택적 바 버튼 그룹으로 감싼 사용자 지정 보기가 있는 단일 바 버튼 항목입니다.

슬라이더의 핵심 기능을 제공하기 위해, 우리는 메뉴 표현을 감소, 재설정 및 증가 동작이 있는 UIMenu로 정의할 것입니다.

UIMenu의 새로운 preferredElementSize 속성을 사용하여, 우리는 메뉴에 더 컴팩트한 나란히 모양을 줄 수 있습니다.

그리고 새로운 keepsMenuPresented 속성을 사용하면 각 작업이 수행된 후 제시된 메뉴를 유지할 수 있으며, 메뉴를 무시하고 다시 표시하지 않고도 글꼴 크기를 여러 번 변경할 수 있습니다.

이걸 아이패드에서 다시 실행하자.

이제 오버플로 메뉴를 불러올 때, 슬라이더는 슬라이더의 모든 기능을 다루는 세 가지 나란히 동작이 있는 인라인 메뉴로 나타납니다.

작은 요소 크기가 Mac에 존재하지 않기 때문에, 작업은 표준 macOS 메뉴 항목으로 나타날 것이다.

그리고 그것은 UI 조직과 사용자 정의를 위한 것이다.

다음으로, 새로운 컬렉션 보기와 메뉴 API를 사용하여 앱의 일부 워크플로우 속도를 살펴보겠습니다.

우리 앱에는 문서를 빠르게 탐색하거나 최상위 태그에 대한 조치를 취하는 데 사용할 수 있는 목차 사이드바가 있습니다.

iOS 16 이전에 여러 항목을 편집할 수 있는 기능을 추가하는 것은 대량 작업이 도구 모음의 버튼으로 강등된 뚜렷한 편집 모드를 구현하는 것을 의미했을 것이다.

iOS 16은 메뉴가 어떤 항목에 영향을 미치는지 명확하게 전달하고 다중 항목 드래그로의 직접적인 전환을 제공하는 항목 무리와 함께 다중 항목 메뉴에 대한 새로운 디자인을 소개합니다.

데스크톱 클래스 iPad 앱에서, 이 새로운 메뉴 디자인은 더 가벼운 무게 선택 스타일과 가장 잘 어울립니다.

여기서 "경량"은 컬렉션 보기를 편집 모드로 전환하거나 앱의 UI를 크게 변경하지 않고 여러 항목을 선택하는 것을 의미합니다.

우리는 이것을 달성하고 기존 API를 사용하여 키보드 포커스를 활성화할 수 있습니다.

먼저, 우리는 allowsMultipleSelection을 true로 설정할 것이다.

그런 다음 allowsFocus를 true로 설정하여 키보드 포커스를 활성화할 것입니다.

그리고 우리는 selectionFollowsFocus를 true로 설정하여 포커스가 선택을 유도하도록 허용할 것입니다.

iPad에서 이것을 실행하면, 각 항목이 선택에 추가될 때 여전히 선택 작업이 실행되어 편집기 보기가 스크롤된다는 것을 즉시 알 수 있습니다.

우리 코드로 돌아가서 무슨 일이 일어나고 있는지 알아봅시다.

저기 있어!

didSelectItemAtIndexPath의 코드는 collectionView의 isEditing 속성을 확인하여 편집 모드에서 스크롤을 허용하지 않으려고 합니다.

이제 편집 모드 외부에서 다중 선택을 허용하므로, 이 코드는 모든 선택에 대해 실행됩니다.

우리는 새로운 UICollectionViewDelegate 방법을 사용하여 이것을 고칠 수 있습니다.

우리는 performPrimaryActionForItemAtIndexPath를 구현하고 스크롤 코드를 이 새로운 기능으로 옮길 것입니다.

이 기능은 단일 항목을 탭하고 컬렉션 보기가 편집되지 않을 때만 호출되기 때문에 더 이상 편집 모드를 확인할 필요가 없습니다.

그리고 우리는 선택과 관련된 행동이 없기 때문에, indexPath에서 선택한 항목의 구현을 제거할 수 있습니다.

iPad에서 여러 항목을 선택하면 더 이상 편집기 보기에서 해당 텍스트로 스크롤되지 않습니다.

그렇게 하면, 실제로 메뉴에 대한 지원을 추가해 봅시다.

iPadOS 16에서 UICollectionViewDelegate의 기존 단일 항목 메뉴 방법은 더 이상 사용되지 않습니다.

그것의 대체품은 0부터 많은 항목까지 메뉴를 표시하는 것을 지원한다.

주어진 indexPaths 배열의 항목 수는 선택된 항목의 수와 메뉴가 호출되는 위치에 따라 다릅니다.

배열이 비어 있다면, 메뉴는 셀 사이의 빈 공간에서 호출되었다.

단일 indexPath가 있는 경우, 선택 해제되거나 유일하게 선택된 항목에서 호출되었습니다.

하나 이상의 항목이 있는 경우, 다중 선택의 일부인 항목에서 메뉴가 호출되었습니다.

iPad로 돌아가서 상위 4개 항목을 다시 선택하고 선택한 항목 중 하나를 두 손가락으로 클릭하면 새로운 다중 항목 메뉴가 나타납니다.

내가 Mac에서 같은 일을 할 때, 선택한 셀 주위에 링이 그려져 강조 표시됩니다.

다중 항목 메뉴가 완료되면, 새로운 찾기 및 바꾸기 및 편집 메뉴 기능을 사용하여 텍스트 편집 경험을 향상시켜 봅시다.

우리 앱은 편집기에 UITextView를 사용하며 사용자 지정 찾기 및 바꾸기 동작이 필요하지 않으므로 기본 시스템 기능을 활성화하기 위해 해야 할 일은 텍스트 보기의 isFindInteractionEnabled 속성을 true로 설정하는 것입니다.

그 세트로, 텍스트를 편집하는 동안 Command+F를 누르면 찾기 및 바꾸기 UI가 나타납니다.

텍스트 보기의 편집 메뉴에 사용자 지정 작업을 추가하는 것은 많은 시간이 걸리지 않으며, 몇 가지 훌륭한 빠른 편집 기능을 활성화할 수 있습니다.

우리는 제안된 작업 범위의 텍스트에 대한 새로운 UITextViewDelegate 방법 편집 메뉴를 구현할 것입니다.

구현에서, 우리는 이 숨기기 작업과 같은 사용자 지정 작업을 시스템 메뉴와 결합한 UIMenu를 구성하고 반환할 수 있습니다.

그리고 이게 그 결과야. 텍스트를 선택하고 편집 메뉴를 불러올 때, 사용자 지정 작업과 시스템 제공 작업 모두 표시됩니다.

찾기 및 바꾸기 및 편집 메뉴에 대한 자세한 내용은 "데스크톱 클래스 편집 상호 작용 채택"을 확인하세요. 그리고 그게 다야!

이러한 몇 가지 변경 사항으로, 우리는 앱 데스크톱 클래스를 만들고 Mac으로 원활하게 번역하기 위한 몇 가지 훌륭한 기본 단계를 밟았습니다.

iPadOS 16에서 제공되는 API를 사용하여 비슷한 과정을 통해 자신의 앱을 가져가세요.

앱에 맞는 내비게이션 스타일을 선택하는 것으로 시작하세요.

문서 속성과 제목 메뉴로 문서 워크플로우를 향상시키세요.

그리고 중요한 기능을 표면화하고 센터 아이템으로 사용자 정의 가능성을 제공합니다.

다중 항목 메뉴로 여러 항목에 빠르게 작동할 수 있습니다.

그리고 찾기 및 바꾸기와 새로운 편집 메뉴를 사용하여 앱의 텍스트 편집 경험을 향상시키세요.

새 앱을 빌드하든 기존 앱을 업데이트하든, 이 새로운 도구로 만든 앱을 빨리 사용하고 싶습니다.

봐줘서 고마워.