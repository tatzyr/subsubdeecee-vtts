10133

앤: 안녕, 그리고 환영해!

저는 앤 히치콕이고, watchOS 소프트웨어 엔지니어입니다.

오늘, 저는 당신에게 watchOS에서 생산성 앱을 만드는 방법을 보여주고 싶습니다.

watchOS 6에 SwiftUI와 Independent Watch 앱이 도입된 이후로, 당신은 Watch 앱에서 더 많은 것을 할 수 있었습니다.

매년, watchOS의 SwiftUI는 더 많은 기능을 얻는다.

동시에, watchOS는 Watch를 위한 완전히 새로운 종류의 앱을 만들 수 있는 키보드와 같은 새로운 기능을 얻었다.

해야 할 일 목록을 추적할 수 있는 앱을 만들기 위해 그 기능 중 일부를 함께 짜는 방법을 보여주고 싶습니다.

우리는 새로운 Watch 앱을 만들고, 표시할 간단한 항목 목록을 추가하고, 사람들이 목록에 항목을 추가하도록 한 다음, 항목을 편집할 것입니다.

이러한 기능을 추가하면서, 우리는 Watch 앱의 일반적인 앱 탐색 전략과 올바른 것을 선택하는 방법에 대해 이야기할 것입니다.

우리는 짐을 공유하기 위해 친구와 아이템을 공유할 것이다.

그런 다음 우리는 생산성 추세를 파악하고 동기를 부여하는 데 도움이 되도록 앱에 차트를 추가할 것입니다.

그리고 우리는 디지털 크라운을 사용하여 더 큰 데이터 범위를 보여주기 위해 차트를 스크롤할 수 있도록 할 것입니다.

새로운 앱을 만드는 것으로 시작합시다.

Xcode에서 새 프로젝트를 만드세요.

watchOS 탭에서 앱을 선택하고 다음을 클릭하세요.

제품 이름을 선택한 후, 몇 가지 선택지가 있습니다.

가장 중요한 것은 시계 전용 앱을 만들 것인지 아니면 동반자 iOS 앱으로 시계 앱을 만들 것인지 여부입니다.

무엇이 훌륭한 Watch 앱을 만드는지 그리고 언제 컴패니언 iOS 앱을 원하는지에 대해 이야기해 봅시다.

훌륭한 시계 앱은 좋아하는 운동을 빠르게 시작할 수 있는 운동의 인터페이스와 같은 빠른 상호 작용을 가능하게 합니다.

아무도 서서, 팔을 들고, 무언가를 찾기 위해 두드리고 싶어하지 않는다.

훌륭한 시계 앱을 사용하면 중요한 정보와 기능에 쉽게 접근할 수 있습니다.

훌륭한 시계 앱은 앱의 필수적인 목적에 초점을 맞춘다.

예를 들어, 날씨 앱은 오늘의 예보, 관련 현재 조건 및 간단한 10일 예보를 표시합니다.

사람들이 필요한 정보와 행동을 쉽게 찾을 수 있도록 앱의 필수 요소에 집중하세요.

훌륭한 Watch 앱은 동반자 iPhone과 독립적으로 사용하도록 설계되었습니다.

예를 들어, 연락처 앱은 휴대폰과 동기화되지만, Apple Watch의 연락처 정보에 액세스하기 위해 iPhone이 근처에 있을 필요는 없습니다.

피트니스 앱과 같이 Apple Watch에서 캡처한 데이터의 기록이나 추세에 대한 자세한 분석을 제공하는 것을 포함하여 Watch 앱을 위한 컴패니언 iOS 앱을 원할 수 있는 많은 이유가 있습니다.

우리 앱은 집중된 기능 세트, 빠른 상호 작용 및 제한된 데이터를 가지고 있기 때문에, 우리는 시계 전용 앱을 만들 것입니다.

이 시점에서, 나는 만들어진 목표에 대해 몇 분 동안 이야기하고 싶다.

과거에 Watch 앱을 구축했다면, 프로젝트에는 Watch에 대한 두 가지 목표가 있습니다: 스토리보드, 자산 및 일부 현지화 관련 파일이 있는 WatchKit 앱 대상과 모든 앱 코드가 있는 WatchKit 확장 대상.

이러한 이중 목표는 watchOS 초기부터 보류되었으며, 더 이상 여러 Watch 대상에 대한 타당한 이유가 없습니다.

Xcode 14부터, 새로운 Watch 앱에는 단일 Watch 앱 타겟이 있습니다.

Watch 앱과 관련된 모든 코드, 자산, 현지화, Siri Intent 및 위젯 확장은 이 대상에 속합니다.

좋은 소식은 단일 타겟 워치 앱이 watchOS 7에서 다시 지원된다는 것입니다!

최신 watchOS를 실행하지 않는 고객을 지원하면서 프로젝트 구조를 단순화하고 혼란과 중복을 줄일 수 있습니다.

WatchKit 확장 대상이 있는 기존 앱이 있다면, 계속 작동하며, Xcode를 사용하여 앱을 계속 업데이트하고 App Store를 통해 앱을 게시할 수 있습니다.

이미 SwiftUI 수명 주기를 사용하는 Watch 앱이 있다면, Xcode 14의 마이그레이션 도구를 사용하여 단일 대상으로 쉽게 전환할 수 있습니다.

대상을 선택하고 편집기 메뉴에서 설정 유효성 검사를 선택하세요.

배포 대상이 watchOS 7 이상인 경우 대상 축소 옵션이 제공됩니다.

아직 도약하지 않았다면, 지금은 단일 타겟 Watch 앱의 단순성과 SwiftUI의 모든 기능을 즐기기 위해 SwiftUI 라이프 사이클을 사용하도록 앱을 변환하는 과정을 시작하기에 좋은 시기입니다.

목표는 우리가 Xcode 14에서 단순화한 유일한 것이 아닙니다!

우리는 또한 단일 1024x1024 픽셀 이미지만 요구하여 앱에 아이콘을 추가하는 것을 훨씬 쉽게 만들었습니다.

앱 아이콘 이미지는 모든 Watch 장치에 표시되도록 조정될 것입니다.

홈 화면, 알림 및 iPhone의 Watch 앱의 앱 설정에서 앱 아이콘으로 테스트해야 합니다.

필요한 경우 특정 작은 크기에 대한 사용자 지정 이미지를 추가할 수 있습니다.

예를 들어, 앱 아이콘에 더 작은 크기로 손실되는 이미지의 세부 사항이 있는 경우, 이미지 세부 사항이 제거된 해당 크기에 대한 특정 아이콘 이미지를 추가할 수 있습니다.

이제 작업 항목 목록을 추가하여 앱에 몇 가지 기능을 추가해 봅시다.

우리는 작업 목록에 대한 데이터 모델을 만드는 것으로 시작할 것이다.

ListItem 구조체는 식별 가능하고 해시할 수 있으며, 표시할 설명을 제공할 것입니다.

그런 다음, 데이터를 저장하고 목록 항목 배열을 게시할 간단한 모델을 만드세요.

그리고 마지막으로, 우리의 견해가 모델에 접근할 수 있도록 모델을 환경 객체로 추가하세요.

이제 데이터 모델로 SwiftUI에서 목록을 만들어 봅시다.

아직 작업이 없기 때문에, 우리가 이것을 미리 볼 때, 우리는 빈 목록을 얻는다.

우리는 그것에 대해 뭔가를 해야 해.

우리는 사람들에게 그들의 목록에 몇 가지 작업을 추가할 수 있는 방법을 제공해야 한다.

우리는 사람들이 탭하여 목록에 새 항목을 추가할 수 있는 버튼을 추가하고 싶습니다.

watchOS 9의 새로운 텍스트 필드 링크를 사용하면 버튼에서 텍스트 입력 옵션을 호출할 수 있으며, 앱에서 집처럼 느낄 수 있도록 몇 가지 스타일링 옵션을 제공합니다.

간단한 문자열로 TextFieldLink를 만들거나 더 많은 사용자 지정 버튼을 위해 라벨을 사용할 수 있습니다.

foregroundColor, foregroundStyle 및 buttonStyle을 포함한 보기 수정자로 버튼의 모양을 수정하십시오.

우리는 앱에서 사용하는 TextFieldLink의 스타일과 동작을 캡슐화하기 위해 AddItemLink 뷰를 만들 것입니다.

우리는 버튼에 사용자 지정 라벨을 사용할 것이며, 누군가가 텍스트를 입력할 때, 우리는 목록에 새 항목을 추가할 것입니다.

이제 TextFieldLink를 사용하여 새 목록 항목을 추가하는 버튼을 추가하기로 결정했으므로, TextFieldLink를 어디에 둘지 생각해야 합니다.

워치 앱의 목록에 작업을 추가할 때, 몇 가지 옵션이 있습니다.

짧은 목록의 주요 작업을 위해 목록 끝에 있는 버튼, 탐색 링크 또는 TextFieldLink를 사용하세요.

목록 끝에 항목으로 작업을 추가하는 것은 세계 시계의 도시 목록과 같은 짧은 항목 목록에서 주요 작업을 위한 좋은 선택입니다.

그러나, 긴 항목 목록을 예상한다면, 사람들은 행동을 하고 싶을 때마다 목록의 끝까지 계속 스크롤해야 할 것이다.

목록이 긴 일반적으로 사용되는 작업의 경우, 도구 모음 항목을 사용하세요.

도구 모음 항목을 추가하려면, 도구 모음 수정자를 목록에 추가하고, 작업 보기를 콘텐츠로 사용하세요.

이것은 자동 도구 모음 항목 배치로 목록에 단일 도구 모음 항목을 추가합니다.

나는 항상 할 일 목록을 짧게 유지할 것이라고 생각하고 싶지만, 나는 그렇게 하지 않을 것이라고 꽤 확신한다.

그래서 나는 쉽게 접근할 수 있도록 도구 모음 항목에 텍스트 필드 링크를 넣을 것이다.

잠시 시간을 내어 우리가 성취한 것을 검토해 봅시다.

우리는 목록 항목에 대한 모델을 만들고, 환경 객체로 저장하고, 항목을 표시할 목록을 만들고, 새 항목을 추가하기 위해 텍스트 필드 링크를 추가했습니다.

설명만으로 아이템을 만드는 것은 간단하지만, 그다지 유용하지는 않다.

우리는 항목을 완료로 표시해야 하며, 우선 순위를 설정하거나 작업에 대한 작업량에 대한 추정치를 추가하는 방법을 원할 수도 있습니다.

이것을 하기 위해, 우리는 세부 보기를 추가할 것이다.

우리가 이것을 하기 전에, 저는 Watch의 SwiftUI에서 앱 탐색 구조에 대한 옵션을 검토하고 싶습니다.

계층적 탐색은 목록-세부 관계가 있는 보기에 사용됩니다.

watchOS 9부터 SwiftUI NavigationStack을 사용하여 이러한 유형의 탐색 구조와 인터페이스를 만드세요.

페이지 기반 내비게이션은 모든 뷰가 피어인 평평한 구조의 뷰에 사용됩니다.

페이지 기반 탐색의 좋은 예는 운동 앱의 운동 중 보기로, 사람들이 운동 컨트롤, 메트릭 및 재생 컨트롤 사이를 쉽게 스와이프할 수 있습니다.

전체 화면 앱은 전체 디스플레이를 사용하는 단일 보기를 가지고 있다.

이것은 일반적으로 단일 메인 뷰를 가진 게임 및 기타 앱과 같은 앱에 사용됩니다.

전체 화면 보기의 경우, ignoresSafeArea 수정자를 사용하여 콘텐츠를 디스플레이 가장자리로 확장하고, 가시성 값이 숨겨진 도구 모음 수정자를 사용하여 탐색 모음을 숨깁니다.

모달 시트는 현재 보기 위로 미끄러지는 전체 화면 보기이다.

그것은 현재 워크플로우의 일부로 완료되어야 하는 중요한 작업에 사용되어야 한다.

계층적 흐름을 사용할 때와 모달 시트를 사용할 때를 구별하는 것이 중요하다.

메일은 계층적 스타일을 사용하여 메시지 목록을 표시하고 각 메시지나 스레드를 세부 보기로 표시합니다.

메시지 세부 사항에서 할 수 있는 조치가 있지만, 목록으로 돌아가기 전에 해야 할 일은 없습니다.

목록으로 돌아가서 새 메시지를 탭하면, 메일은 모달 시트를 사용하여 새 메시지 보기를 표시합니다.

계속하기 전에 새 메시지의 세부 사항을 입력하거나 취소해야 하기 때문에 모달 시트가 올바른 선택입니다.

모달 시트를 표시하려면, 시트 프레젠테이션 상태를 제어할 속성을 만드세요.

사용자 인터페이스의 작업을 기반으로 속성을 설정하고, 프레젠테이션 상태 속성이 참일 때 시트 수정자를 사용하여 사용자 지정 모달 시트 콘텐츠를 표시합니다.

모달 시트에 사용자 지정 도구 모음 항목을 추가하려면, 항목과 함께 도구 모음을 추가하십시오.

도구 모음 항목은 confirmationAction, cancellationAction 및 destructiveAction과 같은 모달 배치를 사용해야 합니다.

우리는 항목을 편집하고 완료하고 완료를 탭할 때까지 이 단일 작업에 집중하고 싶기 때문에 세부 보기를 위해 모달 시트를 사용할 것입니다.

NavigationStack 및 프로그래밍 방식 탐색에 대한 자세한 내용을 포함하여 SwiftUI의 탐색에 대해 자세히 알아보려면 "탐색을 위한 SwiftUI 요리책"을 확인하세요.

이제 세부 사항 보기로 이동하는 방법을 결정했으므로, 목록 항목 구조를 업데이트할 것입니다.

우리는 예상 작업, 생성 날짜 및 완료 날짜를 저장할 새로운 부동산을 가지고 있습니다.

사람들에게 이 세부 사항을 보고 편집할 수 있는 방법을 제공합시다.

우리는 설명을 편집하기 위해 TextField로 세부 보기를 만들고 작업을 완료 또는 완료로 표시하기 위한 토글을 만들 것입니다.

하지만 예상 작업으로 무엇을 해야 할까요?

우리는 값이 모두 숫자가 될 것이라는 것을 알고 있으며, 유효한 값의 범위를 지정할 수 있습니다.

watchOS 9부터, 우리는 스테퍼를 사용할 수 있다.

스테퍼는 순차적 값을 편집하기 위한 세분화된 제어를 제공하고 싶을 때 훌륭한 옵션입니다.

값의 범위를 지정하고 선택적으로 단계를 제공할 수 있습니다.

스테퍼를 사용하여 논리적으로 순차적으로 편집할 수도 있지만, 반드시 숫자 값은 아닙니다.

예를 들어, 우리는 한 항목에 대한 예상 스트레스 수준에 주목하고 싶을 수도 있다.

스트레스 수준을 나타내기 위해 이모티콘 배열을 만든 다음 스테퍼를 만들고, 값을 스트레스 수준 이모티콘 배열에서 선택한 인덱스에 바인딩하고 범위를 이모티콘 인덱스 범위로 설정할 수 있습니다.

값을 밟는 것은 우리가 그 항목에 대해 추정하고 있는 스트레스 수준을 높이거나 낮춘다.

WWDC 세션을 준비하는 것은 재미있지만, 여러분 모두와 훌륭한 Watch 앱 개발을 공유하는 것은 파티입니다.

내 목록에 스트레스가 많은 항목이 있거나, 내 목록에 스트레스를 주는 많은 항목이 있을 때, 나는 내 목록의 항목을 친구와 공유하여 도움을 요청하고 싶습니다.

우리는 사람들이 공유 시트를 사용하여 항목을 공유할 수 있도록 세부 보기에 버튼을 추가할 것입니다.

세부 정보 보기의 버튼을 탭하여 항목을 공유하고, 친구 목록에서 골라 도움을 요청하고, 메시지를 편집하고, 보내고 싶습니다.

이를 위해, 우리는 watchOS 9: ShareLink의 SwiftUI에서 사용할 수 있는 새로운 도구를 사용할 것입니다.

우리는 항목과 ShareLink를 만들어 목록 항목을 공유할 수 있습니다.

우리는 선택적으로 제목과 메시지로 메시지의 초기 텍스트를 사용자 정의할 수 있습니다.

그리고 누군가가 항목을 공유할 때 공유 시트에 표시할 미리보기를 제공하세요.

ShareLink를 사용하여 iOS, macOS 및 watchOS의 SwiftUI 앱에서 공유할 수 있습니다.

ShareLink에 대한 자세한 내용과 옵션을 알아보려면 "Meet Transferable"을 확인하세요.

이제 항목을 완료했을 때 추적하고 일을 끝내기 위해 도움을 요청할 수 있으므로, 생산성을 확인하기 위해 차트를 추가하고 싶습니다.

나는 단일 데이터 시리즈와 뚜렷한 데이터 값을 가지고 있기 때문에 막대 차트를 사용하기로 선택했다.

막대 차트는 내가 한 번에 표시하는 데이터의 양을 제한하는 한 시계 디스플레이에 이 데이터를 명확하게 보여줄 것이다.

우리는 앱의 탐색 구조에 차트 보기를 추가하는 것으로 시작할 것입니다.

항목 목록과 차트 사이에 목록 세부 관계가 없기 때문에 페이지 기반 탐색 전략을 선택했습니다.

누군가는 언제든지 목록과 차트 사이를 스와이프할 수 있다.

목록과 차트에 대한 페이지 기반 탐색을 추가하려면, 목록 보기를 캡슐화하는 ItemList 구조체로 만드는 것으로 시작합시다.

나는 콘텐츠 보기의 전체 내용을 이 새로운 항목 목록으로 옮겼다.

여기에 항목 목록을 캡슐화하면 콘텐츠 보기에서 간단하고 읽기 쉬운 탭 보기 코드를 가질 수 있습니다.

우리는 또한 차트 보기를 위한 구조를 만들어야 한다.

차트를 만들기 전에 내비게이션 구조에 집중할 수 있도록 일시적으로 자리 표시자를 넣을 것입니다.

이제 우리는 항목 목록과 차트의 2개의 탭이 있는 페이지 스타일 탭 보기로 콘텐츠 보기를 설정할 것입니다.

우리가 내비게이션 구조를 설정했기 때문에, 이 차트를 만드는 방법에 대해 이야기해 봅시다.

스위프트UI 캔버스를 사용하고 차트를 그릴 수 있다는 것을 알고 있지만, watchOS 9부터 더 쉬운 답이 있습니다: 스위프트 차트.

Swift 차트는 iOS, macOS 및 tvOS에서도 사용할 수 있으므로 SwiftUI를 사용하는 모든 곳에서 차트를 재사용할 수 있습니다.

우리는 차트를 만들고 싶은 데이터를 집계한 다음 스위프트 차트가 우리를 위해 표시하도록 할 것이다.

우리의 차트를 위해, 우리는 날짜별로 완료된 항목의 수를 보여주고 싶습니다.

우리는 차트의 집계 데이터를 저장하기 위한 구조를 만들 것이다.

그런 다음 우리는 목록 항목 데이터를 차트 데이터 요소로 집계하는 작은 방법을 작성할 것입니다.

표시할 데이터를 지정하고 데이터에서 시리즈를 정의하여 간단한 차트를 표시합니다.

우리는 날짜를 x-값으로 사용하고 완료된 항목의 수를 y-값으로 사용하고 있습니다.

시계 디스플레이에서 원하는 모양을 얻기 위해, 차트의 chartXAxis 수정자를 사용하여 x축을 사용자 정의하고 있습니다.

축 값 라벨의 형식 스타일을 지정하고 있습니다.

나는 또한 수직 격자선을 원하지 않기 때문에 AxisGridLine 마크를 생략했다.

나는 또한 chartYAxis 수정자를 사용하여 y축을 사용자 정의하고 있다.

나는 Watch의 차트와 잘 어울리는 격자선 스타일을 지정한다.

축 값 라벨을 정수로 포맷하고 차트 상단에서 잘리지 않도록 상단 라벨을 생략하고 있습니다.

스위프트 차트로 달성할 수 있는 놀라운 것들에 대해 자세히 알아보려면, "Hello Swift Charts"와 "Swift Charts: Raise the Bar"를 확인하세요.

우리의 차트는 꽤 좋아 보이지만, 나는 조금 더 많은 데이터를 보여주고 싶지만 여전히 훌륭한 시계 경험을 유지하고 싶기 때문에, 나는 그것을 스크롤할 수 있도록 할 것이다.

이를 달성하기 위해, 우리는 디지털 크라운 이벤트에 대한 콜백을 설정할 수 있는 새로운 digitalCrownRotation 수정자를 사용할 것이며, 차트에 대한 사용자 지정 스크롤 동작을 구현할 것입니다.

누군가가 차트를 스크롤할 때 상태를 저장할 몇 가지 속성을 추가하여 digitalCrownRotation 수정자를 추가할 준비를 합시다.

highlightedDateIndex는 현재 스크롤 위치에 대한 데이터 포인트의 인덱스입니다.

우리는 그 사람이 차트를 스크롤할 때 현재 크라운 위치를 표시할 수 있도록 크라운 오프셋을 저장할 것입니다.

이것은 왕관이 움직이는 동안 데이터 포인트에서 또는 데이터 포인트 사이의 중간 값이다.

누군가가 적극적으로 스크롤하고 있는지 추적하기 위해, 우리는 유휴 상태를 저장할 것이다.

우리는 이 정보를 사용하여 크라운 스크롤이 멈추고 시작될 때 약간의 애니메이션을 추가할 것입니다.

이제 값을 저장할 속성이 있으므로, digitalCrownRotation 수정자를 추가할 수 있습니다.

우리는 디텐트 값을 highlightedDateIndex 속성에 바인딩할 것입니다.

기계적 측면에서, 멈춤은 그것을 움직이기에 충분한 힘이 가해질 때까지 무언가를 위치에 유지하는 메커니즘이다.

예를 들어, 내가 차 문을 열 때, 문이 가라앉을 "정지" 위치가 있다.

나는 조금 더 세게 밀고 또 다른 "정지"를 위해 문을 더 넓게 열 수 있다.

그것을 닫으려면, 나는 "정지"에서 끌어내기 위해 저항을 극복할 수 있을 만큼 충분히 세게 당겨야 한다.

그렇지 않으면, 그것은 그 휴식 위치로 되돌아오를 것이다.

이건 멈춤이야.

자동차 문 정지는 우리가 이 API의 멈춤을 이해하는 데 도움을 준다.

디텐트는 당신의 시야에서 왕관의 휴식 노치 위치입니다.

onChange 콜백 핸들러에서, 우리는 크라운이 스크롤하고 있다는 것을 알고 있기 때문에 isCrownIdle의 값을 false로 설정하고, 스크롤하는 동안 차트의 현재 위치를 표시할 수 있도록 crownOffset 값을 현재 값으로 설정합니다.

onIdle 콜백 핸들러에서 isCrownIdle의 값을 true로 설정합니다.

이제 우리는 차트를 스크롤할 때 왕관의 위치를 표시할 수 있습니다.

이를 위해, 우리는 Swift Charts의 RuleMark를 사용할 수 있습니다.

룰마크는 차트의 직선입니다.

수평선이나 수직선을 표시하거나, 예를 들어 임계값을 표시하거나, 경사선을 표시하는 데 사용할 수 있습니다.

크라운 스크롤의 현재 위치를 표시하기 위해 크라운 오프셋 날짜 값으로 RuleMark를 만들 것입니다.

이것을 조금 더 좋게 보이게 하기 위해, 크라운이 움직임을 멈출 때 크라운 위치 라인이 희미해지도록 하고 싶습니다.

우리가 추가한 isCrownIdle 속성을 사용하여 이것을 애니메이션화하는 것은 간단합니다.

우리는 RuleMark의 foregroundStyle에서 사용하고 있는 색상의 불투명도를 저장하기 위해 속성을 추가할 것입니다.

그리고 차트에 onChange 수정자를 추가하여 isCrownIdle 값이 변경될 때 crownPositionOpacity 값 변경을 애니메이션화하십시오.

그런 다음 불투명도를 사용하도록 RuleMark의 foregroundStyle을 업데이트하세요.

스크롤할 때 차트의 막대 옆에 값을 표시하려면 BarMark에 주석을 추가할 수 있습니다.

마지막 막대일 때 막대의 상단 앞쪽에 주석을 배치할 것입니다.

그렇지 않으면, 우리는 그것을 상단 뒤쪽에 배치할 것이다.

잠시 시간을 내어 digitalCrownRotation 수정자, Swift 차트의 RuleMark, 그리고 간단한 SwiftUI 애니메이션으로 무엇을 성취했는지 봅시다.

사용자 지정 스크롤 가능한 차트를 만드는 마지막 단계는 누군가가 스크롤할 때 차트의 데이터 범위를 조정하는 것입니다.

보이는 범위를 저장할 속성을 만드세요.

차트에 범위의 데이터를 제공하기 위해 chartData 변수를 만드세요.

highlightedDateIndex가 변경되면, method를 호출하여 chartDataRange를 확인하고 필요한 경우 업데이트하십시오.

누군가가 디지털 크라운을 사용하여 차트를 스크롤할 때, 차트는 사용 가능한 데이터를 표시하기 위해 스크롤할 것이다.

이제 우리는 우리가 계획했던 모든 기능을 구현하는 것을 마쳤습니다.

watchOS 9에서 사용할 수 있는 새로운 SwiftUI 기능에 대해 자세히 알아보려면, "SwiftUI의 새로운 기능"을 확인하세요.

Watch 앱이나 새로운 Watch 앱 기능을 계획할 때, 무엇이 훌륭한 Watch 앱 경험을 만드는지 생각해 보세요.

앱을 디자인하는 동안, 앱이 쉽고 직관적일 수 있도록 앱 탐색 전략을 고려하세요.

그리고 더 간단하고 풍부한 개발 옵션을 위해 SwiftUI를 사용하세요.

훌륭한 시계 앱을 계속 만드세요.

그리고 기억하세요, 당신 때문에, 그것을 위한 앱이 있습니다!

.