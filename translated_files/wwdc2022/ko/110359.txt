110359

♪ 부드러운 기악 힙합 음악 ♪

♪

안녕하세요, 제 이름은 앤더스입니다.

이 비디오에서는 스위프트 패키지 플러그인을 시작하는 방법을 보여드리겠습니다.

스위프트 패키지는 Xcode 11에 도입되었다.

그들은 라이브러리를 소스 코드로 배포하는 좋은 방법을 제공한다.

Xcode 14는 이 접근 방식을 개발 워크플로우로 확장하여 플러그인을 사용하여 빌드 중에 소스 코드를 생성하거나 릴리스 작업을 자동화하는 것과 같은 작업을 수행할 수 있습니다.

우리는 패키지 플러그인이 무엇이고 어떻게 작동하는지 살펴본 다음, Xcode 14가 지원하는 두 종류의 패키지 플러그인에 대해 더 자세히 이야기할 것입니다: 명령 플러그인과 빌드 도구 플러그인.

그래서 우선, 플러그인이 뭐야?

패키지 플러그인은 스위프트 패키지나 Xcode 프로젝트에서 작업을 수행할 수 있는 스위프트 스크립트입니다.

플러그인은 Xcode가 특히 이 목적을 위해 제공하는 API를 사용합니다.

패키지 플러그인은 스위프트 패키지로 구현됩니다.

패키지는 라이브러리 및 실행 파일과 함께 플러그인을 제공할 수 있으며, 패키지는 플러그인 제공에만 집중할 수 있습니다.

패키지 플러그인은 하나 이상의 소스 파일을 사용하여 구현할 수 있으며, 스위프트 패키지는 하나 이상의 플러그인을 정의할 수 있습니다.

고도로 전문화된 플러그인은 그것을 제공하는 패키지에 비공개일 수 있으며, 이 경우 해당 패키지 내에서만 사용할 수 있습니다.

하지만 범용 플러그인은 패키지 제품으로 정의하여 다른 패키지에서 사용할 수 있습니다.

그것은 패키지가 다른 패키지의 라이브러리를 사용할 수 있는 방법과 유사한 방식으로 다른 패키지도 사용할 수 있게 해준다.

하지만 라이브러리와 달리, 플러그인에 대한 의존성은 런타임 콘텐츠를 앱에 가져오지 않습니다.

대신, 자신의 기계나 빌드 자동화에서 실행되는 개발 도구에 액세스할 수 있습니다.

그래서 패키지 플러그인은 무엇을 할 수 있나요?

음, Xcode 14에는 두 종류의 패키지 플러그인이 있습니다: 명령 플러그인과 빌드 도구 플러그인.

명령 플러그인은 원할 때마다 실행할 수 있는 사용자 지정 작업을 구현합니다.

그들은 소스 코드 포맷터나 린터를 실행하거나, 개발 워크플로우의 일부로 다른 작업을 수행할 수 있습니다.

여기에는 Git 기록을 기반으로 소스 파일의 기여자 목록이나 저작권 날짜를 업데이트하거나, 오늘 임의 스크립트가 있을 수 있는 다른 것들이 포함될 수 있습니다.

필요한 경우, 명령 플러그인은 패키지의 파일을 수정할 수 있는 권한을 요청할 수 있습니다.

그리고 그것은 코드 포맷에 특히 유용하다.

모든 명령 플러그인에 쓰기 권한이 필요한 것은 아니다.

일부 명령은 변경할 필요 없이 보고서를 만들거나 코드에 대한 메트릭을 계산할 수 있습니다.

빌드 도구 플러그인은 빌드 시스템의 종속성 그래프를 확장합니다.

그것들은 빌드의 일부로 소스 코드나 리소스를 생성하는 데 특히 유용하다.

한 번에 전체 패키지나 프로젝트에 대해 호출되는 명령 플러그인과 달리, 빌드 도구 플러그인은 필요한 각 대상에 적용됩니다.

Xcode에서 명령 플러그인을 사용하는 것을 살펴봅시다.

여기 다양한 종류의 기하학적 모양을 보여주는 작은 iOS 앱이 있습니다.

그것은 앱 프로젝트와 로컬 패키지로 구성되어 있다.

이 패키지는 앱의 핵심 데이터 유형과 논리를 제공하는 라이브러리를 구현합니다.

다른 사람들이 사용할 수 있도록 패키지를 자체 저장소로 분할할 생각이며, 이것의 일환으로 이 패키지의 코드를 커밋한 모든 사람을 나열하는 기여자 파일을 만들고 싶습니다.

나는 이것을 하기 위해 사용자 지정 스크립트를 쓸 수 있다.

하지만 저는 코드 작업을 위한 유용한 플러그인을 제공하는 패키지를 알고 있으며, 제가 원하는 것을 정확히 하는 플러그인이 있다고 생각합니다.

그 플러그인에 접근하기 위해, 나는 다른 패키지의 라이브러리가 필요한 것과 같은 일을 할 것이다: 나는 내 로컬 패키지의 매니페스트에 패키지 종속성을 추가할 것이다.

매니페스트를 저장하면, Xcode는 원격 패키지를 가져오고 패키지 종속성 섹션에 나타납니다.

나는 Xcode가 코드 포맷을 위한 인기 있는 도구인 SwiftFormat도 가져왔다는 것을 알아챘다.

이것은 유틸리티 패키지의 명령 플러그인 중 하나가 SwiftFormat에 의존하기 때문입니다.

이제 이 종속성을 추가했으므로, 패키지가 제공하는 모든 플러그인 명령에 액세스할 수 있습니다.

나는 명령을 적용하고 싶은 패키지의 상황에 맞는 메뉴를 사용한다.

이제 메뉴에 세 가지 새로운 명령이 있습니다. 하나는 SwiftFormat을 사용하여 소스 코드를 다시 포맷하는 것이고, 다른 두 개는 특수 작업을 제공합니다.

그들 중 하나는 Git의 커밋 기록을 기반으로 기여자 목록을 생성하거나 업데이트하고, 다른 하나는 내 소스 파일의 저작권 날짜를 업데이트합니다.

중간에 있는 명령은 정확히 내가 원하는 것을 한다.

패키지에서 플러그인 명령을 호출할 때, Xcode를 사용하면 플러그인에 전달할 대상을 선택할 수 있습니다.

이 경우, 나는 전체 패키지에서 그것을 호출할 것이다.

그리고 플러그인이 사용자 지정 인수를 받는다면, 여기에도 전달할 수 있습니다.

나는 실행을 클릭하고, 플러그인이 파일 시스템을 수정할 것이기 때문에, Xcode는 그것에 대해 나에게 경고한다.

내 코드를 수정하고 싶은 플러그인 작성자의 명시된 이유를 볼 수 있지만, 플러그인의 구현도 살펴보고 싶습니다.

그래서 나는 Show Command를 선택하고, Xcode는 나를 코드로 데려간다.

이 플러그인이 하는 일은 안전하기 때문에, 나는 명령을 다시 호출할 것이고 이번에는 실행을 선택할 것이다.

나는 Xcode에게 이 플러그인에 대한 나의 선택을 기억하라고 말할 것이다.

이 특정 플러그인은 Git 기록을 사용하여 기여자의 이름을 보여주는 파일 목록을 생성하지만, 명령 플러그인이 할 수 있는 일에는 많은 유연성이 있습니다.

이제 Xcode에서 명령 플러그인을 사용했으므로, 플러그인이 후드 아래에서 어떻게 작동하는지 자세히 살펴봅시다.

패키지 플러그인은 필요할 때 컴파일되고 실행되는 스위프트 스크립트입니다.

각 플러그인은 별도의 프로세스로 실행됩니다.

플러그인은 소스 파일을 포함하여 입력 패키지의 증류된 표현에 접근할 수 있다.

플러그인은 또한 패키지의 종속성에 대한 정보를 얻는다.

많은 플러그인은 작업의 일환으로 명령줄 도구를 호출합니다.

플러그인은 또한 파일과 디렉토리를 만들 수 있으며, Foundation과 같은 표준 라이브러리를 사용하여 다른 작업을 수행할 수 있습니다.

플러그인은 네트워크 액세스를 방지하고 빌드 출력 디렉토리와 같은 파일 시스템의 몇 곳에만 쓸 수 있는 샌드박스에서 실행됩니다.

하지만 명령 플러그인은 패키지 소스 디렉토리의 파일을 수정할 수 있는 권한을 요청할 수 있습니다.

사용자가 승인하면, 샌드박스는 해당 위치에 쓸 수 있도록 구성되어 있다.

플러그인은 또한 결과를 Xcode로 다시 보낼 수 있다.

경고와 오류를 방출할 수 있으며, 빌드 도구 플러그인은 빌드 중에 Xcode가 실행될 도구 호출을 정의할 수 있습니다.

모든 패키지 플러그인은 Xcode에서 제공하는 PackagePlugin 모듈의 API를 사용합니다.

이 API를 사용하면 플러그인이 입력 패키지에 액세스할 수 있으며, 적절한 경우 결과를 Xcode로 반환할 수 있습니다.

플러그인을 구현하는 주요 소스 파일도 주요 진입점을 정의합니다.

이것은 플러그인 유형과 일치하는 프로토콜을 준수하는 클래스 또는 구조체여야 합니다.

Xcode가 호출하는 특정 진입점 기능은 어떤 종류의 플러그인인지에 따라 다릅니다.

"스위프트 패키지 플러그인 만들기" 비디오에서 PackagePlugin API에 대해 자세히 알아볼 수 있습니다.

이전에, 우리는 패키지를 변경하기 위해 명령 플러그인을 사용했습니다.

명령 플러그인의 세부 사항을 좀 더 살펴봅시다.

명령 플러그인은 개발 워크플로우를 확장한다.

그것들은 빌드 중이 아닌 패키지에 직접 적용됩니다.

모든 명령 플러그인이 파일 시스템을 수정하는 것은 아닙니다. 파일을 변경하지 않는 유용한 작업이 있습니다.

하지만 명령이 파일 시스템에 쓰고 싶다면, 플러그인을 구현하는 패키지의 매니페스트에 그것을 선언해야 합니다.

이로 인해 Xcode는 플러그인을 실행하기 전에 사용자에게 권한을 요청합니다.

플러그인은 보통 꽤 작고, 종종 실제 작업을 하기 위해 다른 도구에 의존한다.

이전에, 우리는 플러그인 중 하나가 모든 실제 작업에 SwiftFormat을 사용하는 것을 보았다.

도구 패키지에 대한 종속성은 바이너리 또는 소스 코드일 수 있습니다 -- Xcode는 명령이 호출되기 전에 소스에서 필요한 도구를 빌드합니다.

플러그인은 의존하는 도구와 다른 패키지로 제공될 수 있습니다.

명령 플러그인의 구현에서, 주요 유형은 CommandPlugin 프로토콜을 준수하며, 플러그인은 performCommand 진입점을 구현합니다.

이 진입점은 사용자가 제공한 컨텍스트와 사용자 지정 인수를 취합니다.

명령 플러그인을 호출하는 다른 방법을 살펴봅시다.

이전과 같은 프로젝트를 사용할 것이며, 이전에 SourceCodeUtilities 패키지에 대한 종속성을 추가했기 때문에 터미널에서 동일한 플러그인을 호출할 수 있습니다.

먼저 디렉토리를 CoreLibs 패키지로 변경할 것입니다. 왜냐하면 그것이 명령 플러그인을 적용하고 싶은 패키지이기 때문입니다.

스위프트 패키지 관리자 5.6에는 플러그인에 대한 새로운 하위 명령이 있습니다.

어떤 플러그인을 사용할 수 있는지 확인하기 위해 "스위프트 패키지 플러그인 --List"를 입력하겠습니다.

이것은 Xcode의 메뉴와 동일한 플러그인을 보여줍니다.

여기 명령줄에서, 각 명령은 또한 그것을 실행하는 데 사용해야 하는 동사를 보여준다.

나는 Xcode에서 했던 것처럼 기여자 목록을 재생성하기 위해 동사를 사용할 것이다.

이 플러그인은 파일을 만들 것이기 때문에 파일 시스템에 쓸 수 있는 권한을 원합니다.

이것을 허용하기 위해 "예"를 입력하면, 플러그인은 기여자 목록을 실행하고 업데이트할 수 있습니다.

나는 또한 플러그인이 묻지 않고 파일 시스템에 쓸 수 있는 패키지 관리자 옵션을 사용할 수 있었다.

이것은 CI 시스템이나 다른 빌드 자동화에서 호출하는 경우 특히 유용합니다.

하지만 그 옵션을 사용하기 전에 플러그인이 무엇을 하고 있는지 알고 있는지 확인하세요.

Xcode와 마찬가지로, 나는 명령줄 인수를 플러그인에 전달할 수 있다.

플러그인의 동작 동사 이후의 모든 인수는 플러그인으로 전달됩니다.

이 경우, 실행되는 플러그인에서 더 많은 출력을 보기 위해 자세한 플래그를 전달합니다.

각 명령 플러그인은 지원하는 인수를 정의합니다.

지금까지, 우리는 주로 명령 플러그인에 대해 이야기해 왔습니다.

하지만 빌드 도구 플러그인에 대해 할 말이 몇 가지 더 있습니다.

명령 플러그인과 달리, 빌드 도구 플러그인은 즉시 작동하지 않습니다.

대신, 패키지가 빌드될 때 Xcode가 나중에 실행할 수 있도록 빌드 도구 호출을 생성하고 반환합니다.

각 도구 호출에는 실행할 명령줄이 있으며, Xcode에 언제 실행해야 하는지 알려주는 입력과 출력도 있습니다.

빌드 도구 플러그인은 빌드 중 또는 빌드 전에 실행되는 명령을 정의할 수 있습니다.

우리는 잠시 후에 그 차이를 살펴볼 것이다.

빌드 도구 플러그인에서 반환된 명령은 일반적으로 출력을 빌드 디렉토리에 쓰도록 구성되므로 증분 빌드 간에 지속됩니다.

그리고 플러그인 자체와 마찬가지로, 빌드 도구 플러그인에 의해 정의된 명령은 네트워크 액세스와 패키지 변경을 방지하는 샌드박스에서 실행됩니다.

빌드 도구 플러그인의 구현에서, 주요 유형은 BuildToolPlugin 프로토콜을 준수하고 플러그인은 createBuildCommands 진입점을 구현합니다.

이 진입점은 빌드 명령을 만들기 위한 컨텍스트와 대상을 취한다.

패키지가 빌드될 때 실행되어야 하는 사용자 지정 빌드 명령을 반환합니다.

빌드 도구 플러그인이 반환할 수 있는 두 가지 기본적인 종류의 빌드 명령이 있습니다.

일반 빌드 명령은 입력 및 출력 경로를 지정하며, 출력이 누락되었거나 입력이 변경된 경우에만 실행됩니다.

사전 빌드 명령은 빌드가 시작되기 전에 실행되며, 출력의 이름을 미리 알 수 없을 때 사용할 수 있습니다.

사전 빌드 명령은 모든 빌드 전에 실행되므로, 변경 사항이 없을 때 가능한 한 적은 작업을 수행해야 합니다.

빌드 명령과 사전 빌드 명령은 소스 코드나 리소스를 생성하는 데 적합합니다.

그렇다면 Xcode는 패키지 대상에 적용할 빌드 도구 플러그인을 어떻게 알 수 있나요?

SwiftPM 5.6 이상에서는 패키지 매니페스트에 타겟이 원하는 빌드 도구 플러그인을 나열하는 새로운 플러그인 매개 변수가 있습니다.

이 매개 변수는 대상에 필요한 모든 빌드 도구 플러그인을 지정하며, 의존하는 모든 런타임 라이브러리와 마찬가지로 해당 플러그인은 동일한 패키지 또는 다른 패키지에 있을 수 있습니다.

Xcode로 돌아가자.

빌드 도구 플러그인을 사용하도록 지오메트리 앱을 구성할 것입니다.

이 특별한 경우, 코어 라이브러리 대상의 일부 데이터 파일을 기반으로 스위프트 코드를 생성하는 사용자 지정 명령줄 도구가 있습니다.

구체적인 세부 사항은 중요하지 않지만, 내가 끝내고 싶은 것은 각 데이터에 대해 생성된 형식 안전 스위프트 접근자이다.

데이터 파일 외에도, 저장소에 체크인한 소스 코드를 생성하기 위해 사용자 지정 도구를 사용하고 있습니다.

저는 이 도구를 수동으로 실행하여 스위프트 래퍼 코드를 재생성하고 데이터 파일이 변경될 때마다 변경 사항을 커밋했습니다.

하지만 빌드 도구 플러그인으로, 나는 더 잘할 수 있다.

빌드 중에 코드를 생성할 수 있으며 생성된 코드를 저장소에 보관할 필요가 없습니다.

플러그인에 액세스하려면 패키지 매니페스트에 가서 사용하고 싶은 소스 생성기 플러그인을 제공하는 패키지에 대한 종속성을 추가합니다.

내 패키지의 대상은 이제 그 패키지에 정의된 모든 빌드 도구 플러그인에 접근할 수 있다.

이제 플러그인을 사용해야 하는 대상으로 가서, 그 정의에 플러그인 매개 변수를 추가합니다.

이것은 Xcode에게 그 패키지의 특정 빌드 도구를 내 대상에 적용하고 싶다고 말한다.

이제 내 저장소에서 생성된 소스 파일을 삭제할 수 있습니다.

그것들은 빌드 중에 필요에 따라 생성되거나 업데이트될 것이다.

저기, 그건 훨씬 더 깨끗해.

그리고 이제 앱을 빌드하고 실행할 때, 빌드 도구 플러그인은 Xcode에 데이터 파일이 변경될 때마다 코드 생성 도구를 호출하도록 알려줍니다.

생성된 코드는 내 빌드 폴더에 다른 빌드 파일과 함께 저장되어 저장소를 깨끗하게 유지합니다.

이 비디오에서, 우리는 스위프트 패키지 플러그인이 무엇이며 어떻게 작동하는지에 대해 이야기했습니다.

우리는 명령 플러그인과 빌드 도구 플러그인 간의 몇 가지 유사점과 차이점에 대해 논의했습니다.

두 가지 유형의 플러그인을 모두 사용하면 다양한 무작위 스크립트를 패키지에서 보다 구조화된 종류의 확장성으로 대체할 수 있습니다.

빌드 도구 플러그인을 사용하면 빌드 시스템을 확장하여 소스와 리소스를 생성하거나 빌드의 일부로 다른 사용자 지정 작업을 수행할 수 있습니다.

명령 플러그인을 사용하면 사용자 지정 작업으로 일반적인 개발 작업을 자동화할 수 있습니다.

그것들은 특정 워크플로우에 맞게 조정되거나 다양한 경우에 유용하도록 작성될 수 있다.

자신만의 패키지 플러그인을 만드는 방법을 배우려면, "스위프트 패키지 플러그인 만들기" 비디오를 확인하세요.

WWDC 2022의 나머지 부분을 시청하고 즐겨 주셔서 감사합니다.

♪