10035

에릭: 안녕! WWDC에 오신 것을 환영합니다!

제 이름은 에릭입니다.

저는 지도 팀의 엔지니어입니다.

오늘, 저는 제 동료 Yingxiu와 합류했고, 우리는 함께 MapKit의 새로운 기능을 탐구할 것입니다.

Apple Maps가 완전히 새로운 지도와 몰입형 Look Around 경험을 도입한 지 3년이 지났습니다.

원래 미국의 지원으로 시작된 완전히 새로운 지도와 Look Around 커버리지는 그 이후로 확장되어 왔으며 현재 캐나다, 많은 유럽 국가, 일본 등을 포함한다.

작년에, 애플 지도는 회전 차선, 횡단보도, 자전거 도로, 페리 빌딩과 같은 아름답게 수작업으로 만들어진 3D 랜드마크를 특징으로 하는 3D 도시 경험을 도입하여 한 단계 끌어올렸다.

지도의 추가 세부 사항을 통해 이전에는 불가능했던 컨텍스트와 정밀도를 제공할 수 있으며, 3D 지형 고도의 추가는 다른 지도와 비교할 수 없는 수준의 리얼리즘을 제공합니다!

올해 MapKit은 Apple Maps의 최신 혁신을 앱에 제공하여 사용자가 놀라운 세부 사항으로 세계를 탐험할 수 있도록 합니다.

이 강연에서, 우리는 몇 가지 새로운 MapKit 기능을 다룰 것이다.

먼저, 우리는 완전히 새로운 지도를 채택하고 지도 구성 API를 사용하여 완전히 활용하는 것에 대해 이야기할 것입니다.

다음으로, 우리는 당신의 콘텐츠를 지도와 원활하게 통합할 수 있도록 오버레이 API에 대한 다양한 개선 사항을 다룰 것입니다.

우리는 또한 새로운 혼합 모드 지원에 대해 논의하고 지도 콘텐츠의 프레젠테이션을 더욱 향상시키기 위해 어떻게 사용할 수 있는지 보여줄 것입니다.

그런 다음, 우리는 새로운 선택 가능한 지도 기능 API를 채택하여 지도를 더 인터랙티브하게 만드는 방법을 다룰 것입니다.

그리고 마지막으로, 우리는 몰입형 Look Around 경험을 애플리케이션에 직접 통합하는 것을 다룰 것입니다.

우리는 다루어야 할 것이 많으므로, 첫 번째 주제로 향할 때 안전벨트를 매세요: 완전히 새로운 지도를 채택하고 지도 구성 API를 사용하세요.

iOS, macOS 또는 tvOS 애플리케이션에서 완전히 새로운 지도를 채택하는 것은 더 쉬울 수 없습니다.

새로운 SDK로 앱을 다시 컴파일하기만 하면, 가능한 경우 3D City Experience를 포함한 완전히 새로운 Apple 지도에 자동으로 선택됩니다.

많은 응용 프로그램의 경우, 간단한 재컴파일이 필요한 전부입니다.

물론, 지도의 프레젠테이션을 더 잘 제어해야 하는 상황이 있을 수 있습니다.

iOS 15에서 지도를 구성하는 방법은 MKMapView의 다양한 속성을 통해 이루어집니다.

그러나 iOS 16에서, 우리는 이러한 속성을 부드럽게 사용하지 않으며, 대체품으로 새로운 지도 구성 API를 도입하고 있습니다.

MKMapConfiguration은 새로운 Map Configuration API의 중앙 클래스이다.

MKMapConfiguration은 세 개의 구체적인 하위 클래스가 있는 추상적인 기본 클래스이다.

이미지 맵 구성은 위성 스타일의 이미지를 제시하는 데 사용된다.

하이브리드 지도 구성은 도로 라벨 및 관심 지점과 같은 지도 기능이 추가된 이미지 기반 지도를 제시하는 데 사용됩니다.

표준 지도 구성은 완전한 그래픽 기반 지도를 제시하는 데 사용된다.

이 세 가지 지도 구성은 기존 지도 유형과 유사하기 때문에 친숙하게 들릴 수 있습니다.

기본 지도 구성 클래스는 평평하거나 사실적일 수 있는 elevationStyle 속성을 지원합니다.

평평한 고도 스타일은 땅이 평평해 보인다는 것을 의미한다.

다리와 고가도로를 포함한 도로도 평평해 보인다.

플랫은 기본 고도 스타일이다.

현실적인 고도 스타일은 지상 지형이 언덕과 산과 같은 실제 고도를 재현한다는 것을 의미한다.

도로는 현실적인 고도 세부 사항으로 묘사되어 있다.

이제 지도 구성 하위 클래스를 자세히 살펴봅시다.

이미지 지도 구성은 추가 지도 기능이 없는 위성 이미지만 표시하므로 다른 속성이 없습니다.

하이브리드 지도 구성에는 관심 지점 범주의 필터링과 트래픽을 표시할지 여부를 제어할 수 있는 추가 속성이 있습니다.

표준 지도 구성은 기본값이거나 음소거될 수 있는 emphasisStyle 속성을 지원합니다.

이름에서 알 수 있듯이, 이것은 달리 명시되지 않는 한 기본 강조 스타일이다.

음소거된 강조 스타일은 지도 세부 사항의 대비를 부드럽게 하여 상단에 보여주고 싶은 추가 그래픽 정보에 더 많은 관심을 기울일 수 있습니다.

표준 지도 구성에는 관심 지점 범주의 필터링과 트래픽을 표시할지 여부를 제어할 수 있는 추가 속성이 있습니다.

그리고 그것은 사용 가능한 지도 구성 클래스와 그 속성을 요약한다.

이 새로운 API는 지원되는 옵션 조합만 구성할 수 있도록 합니다.

또한 지도 구성을 원자적으로 변경할 수 있습니다.

우리는 이것이 기존 API에 비해 큰 개선이라고 생각한다.

우리가 방금 논의한 것을 요약하자면, 여기에 새로운 지도 구성 클래스와 MKMapType 속성 간의 대응을 보여주는 표가 있습니다.

3D 시티 경험을 갖춘 완전히 새로운 지도는 호환 가능한 하드웨어가 필요합니다.

iOS에서 새로운 지도 지원은 A12 기반 iPhone과 iPad 이상이 필요합니다.

macOS에서, 새로운 지도 지원은 M1 기반 컴퓨터 이상이 필요합니다.

3D 시티 익스피리언스를 사용할 수 없는 지역에서는, 지도가 자동으로 후퇴하여 평평한 고도의 완전히 새로운 지도를 표시합니다.

다른 모든 장치에서, 완전히 새로운 지도는 평평한 고도로 표시될 것이다.

M1 Mac에서 Xcode를 사용하면 OS 버전을 변경하여 두 경험을 모두 시뮬레이션할 수 있습니다.

앱이 모든 장치에서 멋지게 보이도록 두 가지를 모두 시도해 보는 것이 좋습니다!

3D 시티 익스피리언스는 전 세계의 많은 대도시 지역에서 이용 가능합니다.

우리는 지속적으로 이 목록에 새로운 도시를 추가하고 있으므로, 세션 노트에 링크된 기능 가용성 웹사이트의 3D 도시 경험 섹션을 확인하는 것이 좋습니다.

이것은 완전히 새로운 지도를 채택하고 지도 구성 API를 사용하는 것에 대한 우리의 섹션을 마칩니다.

이제 오버레이로 뛰어들자.

MapKit은 수년 동안 몇 가지 스타일링 옵션으로 오버레이를 지원해 왔다.

iOS 16에서는 오버레이가 지도와 원활하게 통합될 수 있도록 기존 API를 개선하고 있습니다.

오버레이 레벨의 빠른 요약부터 시작합시다.

오버레이는 두 가지 수준에서 렌더링될 수 있습니다: 도로 위와 라벨 위.

MapKit의 많은 오버레이 삽입 기능 중 하나를 사용하여 삽입 시간에 렌더링 수준을 지정할 수 있습니다.

위의 라벨은 라벨을 포함한 모든 것 위에 오버레이를 렌더링합니다.

라벨은 중요한 문맥 정보를 제공하기 때문에, 데이터가 지도와 전혀 상호 작용하는 것을 원하지 않는 드문 경우에만 위의 라벨을 사용하는 것이 좋습니다.

만약 당신이 달성하려고 하는 것이 당신의 콘텐츠가 지도에서 눈에 띄는 것이라면, 나중에 이야기할 음소거된 지도 강조 또는 혼합 모드를 사용하는 것을 고려할 수 있습니다.

위의 도로는 오버레이가 도로, 토지 커버 또는 수역을 포함한 지형 위에 표시된다는 것을 의미합니다.

그러나, 그것은 라벨 아래에 표시될 것이며, 어느 정도는 나무와 건물이 보일 것이다.

잠시 후에 그것에 대해 더.

위의 도로는 iOS 16의 새로운 기본 모드가 될 것이다.

다음으로, 투명한 건물이라고 불리는 iOS 16에 도입하는 새로운 기능에 대해 이야기해 봅시다.

오버레이 레벨이 도로 위에 있든 라벨 위에 있든, 오버레이는 피치 없이 하향식으로 볼 때 항상 건물 위에 렌더링됩니다.

그러나, 우리는 피치 지도와 함께 위의 도로를 사용할 때 경험을 약간 개선했습니다.

나무와 건물과 같은 지상 물체는 이제 오버레이 위에 나타날 때 자동으로 투명하게 렌더링되어 완전히 모호하지 않습니다.

알파 값은 지도의 피치 각도에 따라 다르다.

0º 피치 각도로 지도를 하향식으로 보여주는 것으로 되돌리면, 충돌하는 지상 물체는 시야에서 효과적으로 사라지고 오버레이를 완전히 볼 수 있습니다.

투명한 건물은 반투명 오버레이에서도 작동한다.

오버레이의 알파 값은 투명한 건물의 알파 값과 결합하기 위해 추가될 것이다.

우리가 오버레이에 만들고 있는 변화가 하나 더 있다.

현실적인 지형이 있는 지도에 오버레이를 추가할 때, MapKit은 자동으로 지도를 평면 표현으로 전환합니다.

마지막 오버레이를 제거하면 지도가 자동으로 현실로 돌아갑니다.

이 규칙의 한 가지 주목할 만한 예외는 MapKit의 방향 API를 통해 공급되는 오버레이이다.

그 오버레이는 자동으로 지형을 따른다.

그리고 그것으로, 나는 그것을 Yingxiu에게 넘길 것이다.

잉슈: 고마워, 에릭. 안녕! 저는 잉슈입니다.

저는 지도 팀의 엔지니어입니다.

저는 우리의 새로운 MapKit 기능을 시연하고 업데이트된 API로 아름다운 지도 경험을 구축하는 것이 얼마나 쉬운지 보여줄 것입니다.

나는 사용자가 샌프란시스코를 여행하기 위해 스쿠터를 대여하는 데 도움이 되는 샘플 앱을 사용할 것이다.

우리 앱은 이 테이블 뷰의 행에서 볼 수 있듯이 많은 기능을 제공합니다.

"운영 구역"은 사용자가 스쿠터를 어디로 가져갈 수 있는지 볼 수 있게 해준다.

"라이드"는 사용자를 금문교를 가로지르는 투어로 데려간다.

"탐색"은 사용자에게 해안가 근처의 명소를 탐험하는 데 사용할 수 있는 샌프란시스코 시내의 인터랙티브 지도를 제공합니다.

"하이라이트"는 꼭 봐야 할 장소를 자세히 살펴본다.

우리는 이 세션 내내 이러한 기능을 구현하거나 업그레이드할 것입니다.

시작하자!

먼저, 저는 운영 영역 기능을 사용하여 완전히 새로운 지도를 채택하는 것이 얼마나 쉬운지 보여줄 것입니다. 그런 다음 오버레이에 대한 몇 가지 개선 사항을 보여 드리겠습니다.

나는 이미 Xcode에서 프로젝트를 열었다.

iOS 16 SDK로 컴파일하고 어떻게 보이는지 봅시다.

여기 있어!

우리는 이미 완전히 새로운 지도를 선택했다.

우리는 지형에 대한 아름다운 조명과 언덕 음영 효과를 포함하여 풍부한 세부 사항이 있는 지도 보기를 얻을 수 있습니다.

우리가 확대할 때, 당신은 건물, 나무를 보게 될 것입니다...

...그리고 랜드마크.

이제 운영 영역을 시각화하기 위해 다각형 오버레이를 추가해 봅시다.

여기 나는 이미 운영 구역을 위한 다각형 데이터를 준비했다.

뷰가 로드되면, 우리는 먼저 지역과 카메라 경계를 설정할 것입니다.

우리가 올바른 영역을 살펴보도록 하세요.

그런 다음, 우리는 단순히 오버레이를 추가합니다.

그걸 만들고 확인해 보자!

다각형 오버레이는 똑바로 볼 때 불투명하다.

우리가 확대하고 투구할 때, 우리가 더 투구함에 따라 투명성이 증가하면서 건물들이 나타나기 시작한다.

이 효과는 오버레이 레벨 AboveRoads를 사용할 때만 사용할 수 있습니다.

투명한 건물과 나무를 활용하고 싶다면, 올바른 오버레이 레벨을 선택해야 합니다.

오버레이는 멋져 보이지만, 투구하지 않을 때에도 지도가 보여졌으면 좋겠다.

코드로 돌아가서 반투명하게 만들자.

알파를 0.8로 바꾸자.

이제 우리는 투명한 오버레이를 가지고 있고 나는 투구하지 않아도 도로와 건물을 볼 수 있다.

내가 지도를 확대하고 투구하면, 나는 여전히 투명성이 높아진다.

이거 멋져 보여!

그게 다각형 오버레이를 위한 거야.

다음으로, 현실적인 지형을 통합하고 높은 노선을 추가하는 방법을 보여주고 싶습니다.

이것은 금문교를 가로지르는 투어인 "라이드" 기능을 완성할 것이다.

지도 보기를 구성하는 것부터 시작합시다.

코드에서 고도 스타일을 변경하거나, 오른쪽에 있는 인터페이스 빌더 인스펙터를 열 수 있습니다.

다음은 사용 가능한 지도 보기 구성 설정입니다.

현실적인 고도를 선택합시다.

다음으로, 경로 작업을 합시다.

이 기능을 위해, 우리는 사용자가 경로 표시 스위치를 전환할 때 경로를 보여주고 싶습니다.

우리는 또한 경로에 초점을 맞추기 위해 카메라를 애니메이션화할 것이다.

우리는 금문교를 가로지르는 경로를 보여주고 싶기 때문에, 우리는 프레시디오 공원 입구를 출발점으로, 배터리 스펜서를 끝점으로 사용할 것이다.

지도 보기가 로드되면, 우리는 시작점과 목적지 지점을 표시하기 위한 주석을 만들 것입니다.

좌표와 제목을 설정하고, 주석 배열에 추가한 다음, 지도 보기에 추가하세요.

이제, 우리는 폴리라인 경로에 집중할 수 있다.

일반 오버레이는 지도를 평평하게 할 것이지만, MapKit의 Directions API에 의해 반환된 폴리라인은 현실적인 지형을 보존할 것이다.

이 작업 기능에서, 스위치가 켜지면, 위에 정의된 좌표로 장소 표시를 만들 것입니다.

그런 다음 우리는 소스와 목적지와 함께 방향 요청을 만듭니다.

마지막으로, 우리는 방향을 요청합니다.

가져오기 작업이 성공하면, 경로 폴리라인을 오버레이로 추가하기만 하면 됩니다.

알았어.

그걸 컴파일해서 어떻게 생겼는지 보자!

주석이 자동으로 새로운 그라디언트 모양으로 업그레이드된다는 것을 알게 될 것입니다.

그들은 또한 정확한 고도에서 매끄럽게 표시된다.

쇼 경로를 전환하면, 카메라가 투구할 것이다.

그러면, 당신은 그들을 더 잘 볼 수 있습니다.

보시다시피, 노선은 높은 지형을 따라갑니다.

이것은 복잡한 교차로를 탐색할 때 유용하다.

그것은 또한 다리를 건너는 길을 따라간다.

또한, 그 경로가 다리 기둥을 통해 어떻게 미묘하게 나타나는지 주목하세요.

마지막으로, 지도가 정말로 투구되었을 때, 당신은 그 앞에 서 있는 나무들을 통해 경로 쇼를 볼 수 있습니다.

음, 봐봐, 나무가 없는 여기 노선 색이 씻겨졌어.

축소하고 여기서 무슨 일이 일어나고 있는지 확인해 봅시다.

좋아, 경로의 이 부분은 터널을 통과해, 그래서 우리는 그것에 대한 투명성을 얻을 수 있어.

ElevationRealisticStyle과 높은 노선 기능은 A12 기반 iOS 장치에서 지원됩니다.

구형 iOS 기기에서 동일한 앱을 실행하면, 2D 지도에서 2D 경로를 자동으로 얻을 수 있습니다.

3D 도시 체험 지도에 고가 노선을 추가하는 것은 매우 간단합니다!

그것으로, 나는 그것을 에릭에게 돌려줄 것이다.

에릭: 고마워, 잉슈!

금문교를 가로지르는 스쿠터를 타는 것은 정말 멋져 보인다!

그래서 그것은 MapKit 오버레이의 새로운 기능 중 일부일 뿐입니다.

다음으로, 블렌드 모드에 대해 이야기해 봅시다.

이 새로운 API를 사용하면 오버레이의 모양과 느낌을 더 잘 제어할 수 있으며 다양한 새로운 창의적인 가능성을 열어줍니다.

저는 여러분 중 많은 사람들이 이미 사진 편집 앱이나 Apple의 CoreGraphics API의 혼합 모드에 익숙하다고 확신합니다.

블렌드 작업 중에, 두 개의 그래픽 레이어는 블렌드 모드로 지정된 일련의 방정식에 따라 결합됩니다.

이제, MapKit 컨텍스트에서 블렌드 모드를 어떻게 사용할 수 있는지에 대한 예를 살펴봅시다.

이 시나리오에서, 나는 이 지도의 중앙에 있는 샌프란시스코의 프레시디오 국립공원 지역을 강조하고 싶다.

먼저, 나는 프레시디오 모양의 컷아웃과 함께 전체 지도 영역을 덮는 오버레이를 만들 것이다.

저는 아직 어떤 블렌드 모드도 사용하지 않습니다.

이것은 큰 정사각형 도넛 모양의 평범한 오버레이일 뿐이다.

다음으로, 회색 채우기로 오버레이에 색조 혼합 모드를 할당합니다.

이것은 프레시디오 외부의 지도를 불포화시킨다.

다음으로, 나는 그 오버레이를 복제하고 짙은 회색 채우기로 하드 라이트 블렌드 모드를 할당할 것이다.

이것은 프레시디오 주변 지역을 어둡게 하는 효과가 있다.

이것은 이미 좋아 보이지만, 다른 오버레이를 추가하자.

이번에는 Presidio 모양의 오버레이를 추가하고 노란색 채우기로 채도 블렌드 모드를 할당할 것입니다.

와, 그건 정확히 내가 여기서 목표로 했던 효과가 아니야.

색깔이 너무 밝아.

다른 걸 시도해 보자.

우리는 회색 채우기로 컬러 번 블렌드 모드를 적용할 것입니다.

저기, 그건 조금 더 미묘해.

완벽해!

이제, 몇 가지 코드를 살펴봅시다.

우리가 방금 본 종류의 효과를 활성화하기 위해, 우리는 MKOverlayRenderer에 blendMode라는 속성을 추가했습니다.

오버레이 렌더러에서 원하는 CoreGraphics 블렌드 모드를 설정하기만 하면 됩니다!

앞서 언급했듯이, 블렌드 모드는 순서에 따라 다릅니다.

스택 하단의 오버레이는 지도와 혼합되고, 두 번째에서 마지막 오버레이는 이전 혼합 작업의 결과와 혼합됩니다.

MapKit에서 오버레이 순서는 삽입 시간에 결정됩니다.

MKMapView의 많은 오버레이 삽입 기능 중 하나를 사용하여 절대 또는 상대 위치를 사용할 수 있습니다.

MapKit은 다양한 혼합 모드를 지원하며 오늘날 모든 모드를 다룰 수는 없습니다.

나는 네가 그것들을 시도해 보라고 격려해.

그리고 그게 블렌드 모드를 위한 거야!

방금 보셨듯이, 블렌드 모드는 지도의 스타일을 제어하는 강력한 도구입니다.

당신은 그것을 사용하여 지리적 영역을 강조하고, 지도를 강조하여 콘텐츠를 돋보이게 하는 등 많은 것을 할 수 있습니다.

다음으로, 선택 가능한 지도 기능에 대해 이야기해 봅시다!

이것은 매우 요청된 기능이었고, 당신에게 그것을 보여주게 되어 정말 기쁩니다!

오늘 앱에서 MapKit을 사용하고 있다면, 도시, 관심 지점 또는 물리적 물체의 위치를 보여주기 위해 주석을 활용할 가능성이 높습니다.

POI 필터링을 사용하지 않는 한, 이미 Apple에서 제공하는 많은 유사한 주석이 포함된 지도에 주석을 배치하고 있습니다.

지금까지, 당신의 사용자들은 당신이 제공한 주석과만 상호 작용할 수 있었습니다.

iOS 16에서, 우리는 그것을 바꿀 것이다.

새로운 선택 가능한 지도 기능 API를 사용하면 이제 사용자가 지도에서 기능을 선택할 수 있는 옵션이 있습니다.

선택 가능한 지도 기능에는 상점, 레스토랑 및 랜드마크와 같은 관심 지점, 도시와 주와 같은 영토, 산맥과 호수와 같은 물리적 특징이 포함됩니다.

앱에서 선택 가능한 지도 기능을 채택하려면, 몇 가지 간단한 단계를 거치기만 하면 됩니다.

먼저, 어떤 기능 유형을 선택할 수 있는지 구성하세요.

방금 보았듯이, 세 가지 주요 기능 유형이 있으며, 모든 것이 앱의 맥락에서 상호 작용하는 것은 말이 되지 않을 수 있습니다.

관심 지점 기능의 경우, 기존 필터 API를 사용하여 어떤 관심 지점 카테고리가 나타날 수 있는지 더 제한할 수 있으므로 선택할 수 있습니다.

둘째, 선택 이벤트를 처리하기 위해 MKMapView 대리자 콜백을 구현하십시오.

당신은 당신이 원하는 대로 이 행사들을 자유롭게 처리할 수 있습니다.

선택한 기능이 어떻게 나타나는지 제어하거나, 선택 이벤트에 대한 응답으로 추가 UI를 표시하고 싶을 수도 있습니다.

셋째, 애플리케이션의 사용자 인터페이스에서 추가 장소 정보를 요청하고 표시하고 싶을 것입니다.

지도 기능에 포함된 정보는 화면에 보이는 것으로 제한됩니다.

사용자가 선택한 장소에 대한 더 많은 맥락을 제공하려면, 추가 정보를 요청해야 합니다.

각 단계에 대한 새로운 API를 안내해 드리겠습니다.

새로운 selectableMapFeatures 속성을 사용하여 어떤 지도 기능을 선택할 수 있는지 구성하는 것부터 시작하겠습니다.

관심 지점, 영토 및 물리적 특징의 조합을 선택할 수 있습니다.

선택 가능한 지도 기능을 구성하고 사용자가 해당 기능 중 하나를 탭하면, 선택 동작을 사용자 정의할 수 있는 새로운 대리자 콜백을 받기 시작할 것입니다.

당신이 받게 될 첫 번째 콜백은 새로운 didSelect 주석 콜백입니다.

이 콜백은 잠시 후에 다룰 새로운 요청 API를 사용하여 지도 항목에 대한 추가 데이터를 요청할 수 있는 좋은 기회입니다.

당신이 받게 될 두 번째 콜백은 주석 콜백을 위한 기존 뷰입니다.

이것은 당신이 선택한 상태에 대해 표시될 보기를 사용자 정의할 수 있는 곳입니다.

이것은 기존 API이지만, MapFeatureAnnotation이라는 새로운 유형의 주석 클래스를 추가했습니다.

이 클래스는 사용자가 지도 기능을 선택할 때 주석을 볼 수 있도록 전달됩니다.

MapFeatureAnnotation에는 많은 속성이 있다.

FeatureType 속성을 검사하여 지도 기능이 관심 지점, 영토 또는 물리적 기능인지 확인할 수 있습니다.

지도 기능이 관심 지점인 경우, pointOfInterestCategory 속성은 카테고리가 무엇인지 알려주고, iconStyle 속성을 사용하면 배경색과 아이콘 이미지 자체와 같은 아이콘에 대한 추가 정보를 얻을 수 있습니다.

viewFor 주석 콜백을 사용하여 주석 보기를 사용자 정의하는 방법의 예를 살펴보겠습니다.

지도 앱과 같은 선택 스타일을 달성하고 싶다면, nil을 반환하기만 하면 됩니다.

선택 스타일을 사용자 정의하려면, 자신의 주석과 같은 방식으로 annotationView를 반환할 수 있습니다.

markerAnnotationView는 훌륭한 옵션이다.

그것은 당신에게 지도 앱과 같은 풍선 스타일의 모양, 그라데이션 처리를 제공할 것이며, 자신만의 색상이나 아이콘을 선택할 수 있습니다.

여기 제 예에서, 저는 기능의 아이콘 스타일에서 얻은 것과 동일한 이미지를 사용하고 응용 프로그램의 색조 색상에 맞게 색상만 변경하도록 선택했습니다.

완전히 사용자 지정하고 싶다면, 당신이 만든 주석 보기 하위 클래스를 제공할 수 있습니다.

방금 보셨듯이, 기능 주석을 사용하여 선택한 기능에 대한 시각적 정보를 검색할 수 있습니다.

새로운 MKMapItemRequest API에 기능 주석을 전달함으로써, 선택한 기능에 대한 지도 항목을 검색할 수도 있습니다.

이 지도 항목에는 주소, 이름, 전화번호 및 URL과 같은 장소에 대한 추가 메타데이터가 포함되어 있습니다.

지도 항목은 또한 사용자가 MapKit을 통해 사용할 수 없는 추가 메타데이터를 보고 싶다면 지도 앱에 펀치 아웃하는 기능을 제공합니다.

그리고 이제, 나는 그것을 다시 Yingxiu에게 넘길 것이다.

잉슈: 고마워, 에릭.

에릭은 방금 당신에게 선택 가능한 지도 기능을 안내했습니다.

그 API를 활용하는 것이 얼마나 쉬운지 보여드리겠습니다.

이를 위해, 우리는 탐색 기능을 구현할 것이다.

우리는 사용자들이 해안가 근처의 흥미로운 장소를 탐험할 수 있기를 바랍니다.

그들이 POI를 탭하면, 주석이 나타날 것이다.

우리는 탭된 위치에 카메라 애니메이션을 수행하고, 하단에서 정보 카드를 보여줄 것이다.

먼저, 지도에서 관심 지점을 필터링하고 우리 투어와 관련이 없는 카테고리를 제거합시다.

코드에 필터를 적용하는 것 외에도, 인터페이스 빌더 인스펙터에서도 적용할 수 있습니다.

지도 보기를 선택하고, 오른쪽에 있는 검사관으로 이동합시다.

여기서, 우리는 제외 필터를 할 것이다.

나는 우리가 원하지 않는 카테고리를 선택할 것이다, 예를 들어: 공항, 렌터카, 병원, 그리고 세탁.

이제 우리는 지도 보기에서 원하는 관심 지점만 있어야 한다.

선택 가능한 지도 기능을 활성화하는 것은 매우 간단합니다.

우리가 해야 할 일은 원하는 선택 가능한 기능의 옵션 세트를 지정하는 것입니다.

이 샘플 앱의 범위에서, 우리는 단지 관심 지점을 사용할 것이지만, 우리는 또한 선택 가능한 물리적 기능과 영역을 지원한다는 것을 명심하세요.

기존 대리자 메서드 mapView viewForAnnotation을 사용하여 기능 주석에 대한 뷰를 만들 수 있습니다.

여기, 우리는 지금 당장 아무것도 돌려줄 거야...

MapKit에서 제공하는 기본 그라디언트 주석을 사용하려면.

우리는 나중에 그것을 맞춤화하기 위해 돌아올 것이다.

주석이 선택된 상태에 있다면, 우리는 새로운 대리 방법 mapView didSelectAnnotation을 통해 통보를 받을 것이다.

이 기능을 사용하여 카메라 애니메이션을 수행하고 선택한 기능을 확대해 봅시다.

먼저, 주석을 featureAnnotation으로 캐스팅한 다음, 그것으로 지도 항목 요청을 만들어 봅시다.

이것은 기능 주석으로 추가 장소 정보를 가져오는 새로운 API입니다.

요청을 발행합시다.

가져오기 작업이 성공하면, 우리는 지도 항목에 애니메이션을 할 것이다.

카메라 애니메이션이 완료되면, 우리는 기능 항목에서 세부 사항을 얻고 정보 카드에 보여줄 것입니다.

그것을 컴파일하고 어떻게 보이는지 보세요.

해안가에 있는 흥미로운 장소들을 확인해 보자.

그라디언트 주석이 나타난다.

카메라는 탭 위치로 애니메이션화된다.

그러면 정보 카드가 나타난다.

여기는 박물관이야.

여기 URL이 있습니다.

우리가 관심이 있다면 확인해 볼 수 있어.

그리고 우리는 전체 주소를 받았어.

그것이 랜드마크라면, 우리는 이 아름다운 도상학을 얻을 것이다.

이제 코드로 돌아가서 선택 상태에 대한 주석을 사용자 정의해 봅시다.

Nil 대신, MarkerAnnotationView를 만들어 봅시다.

우리는 먼저 주석을 featureAnnotation에 캐스팅할 것이므로, 특정 데이터를 사용하여 보기를 사용자 정의할 수 있습니다.

우리의 기업 아이덴티티와 일치하도록 보라색으로 주석을 칠합시다.

우리는 또한 주석 글리프를 사용자 정의할 수 있습니다.

SelectedGlyphImage는 선택된 상태의 주석을 위한 것이다.

글리프 이미지는 더 작다.

그것은 선택되지 않은 상태에 대한 주석을 위한 글리프이다.

선택되지 않은 상태에서 선택된 상태로의 원활한 전환을 위해 동일한 글리프를 할당하는 것이 좋습니다.

featureAnnotation에서 얻은 아이콘 스타일 이미지를 사용합시다.

MKIconStyle은 iOS16의 새로운 클래스이다.

그것은 선택된 POI의 도상과 색상 정보를 가지고 있다.

컴파일하고 앱에서 어떻게 보이는지 보세요.

여기 있어!

이제 우리는 기업 색상과 일치하는 주석을 가지고 있지만, 여전히 애플 아이코노그래피를 사용합니다.

그것이 당신이 선택 가능한 지도 기능을 활성화하고 자신의 앱에서 주석을 사용자 정의할 수 있는 방법입니다!

그것으로, 나는 그것을 에릭에게 돌려줄 것이다.

에릭: 고마워, 잉슈!

방금 보셨듯이, 선택 가능한 지도 기능 API를 사용하면 사용자가 완전히 새로운 방식으로 지도와 상호 작용할 수 있습니다.

MapFeatureAnnotation 클래스는 MapView 대리자 콜백과 함께 선택 모양과 느낌을 사용자 정의할 수 있으며, MapItemRequest를 사용하면 지도 항목에 대한 기능을 해결할 수 있으므로 선택한 지도 기능에 대한 추가 정보에 액세스할 수 있습니다.

다음으로, 주변을 둘러보는 것에 대해 이야기해 봅시다!

지도 앱은 iOS 13에서 Look Around를 도입했고, 사람들은 그것을 절대적으로 좋아한다.

Look Around를 사용하여 장소에 대한 진정한 감각을 얻을 수 있습니다.

Look Around 이미지는 3D 모델을 활용하여 다른 지도와 같은 수준의 리얼리즘을 제공하는 놀라운 수준의 디테일을 제공합니다.

Look Around는 이 도시들과 국가 전체를 포함하여 전 세계 많은 곳에서 이용할 수 있습니다!

우리는 지속적으로 새로운 지역에 대한 지원을 추가하고 있으므로, 세션 노트에 링크된 기능 가용성 웹사이트의 Look Around 섹션을 확인하는 것이 좋습니다.

iOS 16을 사용하면 Look Around를 MapKit에 도입하고 있으며, 이를 채택하려면 세 가지 간단한 단계만 거치면 됩니다.

먼저, 원하는 위치에서 데이터를 사용할 수 있는지 확인해야 합니다.

목표 지역에서 Look Around를 사용할 수 있더라도, 거리에서 모든 위치를 볼 수 있는 것은 아니므로, Look Around 이미지를 항상 사용할 수 있는 것은 아닙니다.

Look Around 데이터를 사용할 수 있는지 여부를 결정하면, 해당 데이터를 Look Around View Controller 또는 Look Around Snapshotter에 전달해야 합니다.

그리고 마지막으로, Look Around 데이터를 사용할 수 있다면, Look Around 미리보기를 보여주기 위해 앱 UI를 업데이트하고 싶을 것입니다.

이 세 가지 간단한 작업을 수행하기 위해 사용할 새로운 API를 살펴봅시다.

Look Around 미리보기를 표시하려는 첫 번째 단계는 데이터 가용성을 확인하는 것입니다.

이를 위해, iOS 16에서 소개하는 새로운 클래스인 LookAroundSceneRequest를 만들어야 합니다.

좌표 또는 지도 항목으로 새 인스턴스를 초기화할 수 있습니다.

다음으로, 당신은 그 장면 속성을 검색하고 싶을 것입니다.

이것은 선택적인 비동기 속성이다.

데이터를 사용할 수 있다면, 장면 인스턴스를 다시 얻을 수 있습니다.

데이터를 사용할 수 없다면, 대신 0을 돌려받을 수 있습니다.

그리고 만약 그 요청에 문제가 있다면, 오류가 발생할 것이다.

Look Around Scene은 속성이 없는 불투명한 물체이다.

그것은 요청된 위치에 대한 Look Around 이미지의 가용성을 보장하는 토큰 역할을 한다.

Look Around 장면의 대화형 미리보기를 표시하려면, 장면을 새로운 Look Around View Controller 인스턴스에 init 매개 변수로 전달하거나 기존 인스턴스의 읽기 쓰기 장면 속성에 할당하기만 하면 됩니다.

또는, 정적 이미지만 필요한 경우, 현장을 새로운 Look Around View Snapshotter 인스턴스에 init 매개 변수로 전달한 후 스냅샷 비동기 속성을 검색할 수도 있습니다.

Look Around 뷰 컨트롤러는 사용자가 탭하여 전체 화면 Look Around 대화형 세션을 입력할 수 있는 Look Around 이미지의 더 작은 정적 미리보기를 가능한 한 쉽게 삽입할 수 있도록 설계되었습니다.

그리고 이제, 우리는 그것을 Yingxiu에게 한 번 더 넘겨서 그녀가 모든 것을 하나로 모으는 것이 얼마나 쉬운지 보여줄 수 있도록 할 것이다.

잉슈: 고마워, 에릭.

에릭은 방금 우리에게 MapKit에 오는 몰입형 Look Around 경험 지원을 보여주었다.

샘플 앱에 통합하는 것이 얼마나 간단한지 보여드리겠습니다.

그것을 위해, 우리는 마지막 기능인 하이라이트로 넘어갈 것이다.

사용자는 꼭 봐야 할 장소를 현실적으로 볼 수 있다.

우리는 이미 화면 상단의 세그먼트 제어 표시줄에 샌프란시스코 랜드마크 이름이 몇 개 있습니다.

사용자가 그 중 하나를 탭할 때, 우리는 탭된 위치에 카메라 애니메이션을 수행하고 싶습니다.

우리는 또한 사용자가 전체 화면으로 확장할 수 있는 왼쪽 하단의 미리보기를 보여주고 싶습니다.

그거 하자!

먼저 Look Around 미리보기를 위한 컨테이너 뷰를 추가해야 합니다.

사이즈 검사관에게 가자.

위치와 크기를 주자.

처음에 이 미리보기를 숨기고 싶으니, 속성 관리자를 열고 숨김을 확인해 봅시다.

다음으로, 우리는 Look Around 뷰 컨트롤러를 만들어야 합니다...

그리고 그것을 컨테이너 뷰에 삽입하세요.

다른 세게와 마찬가지로, 나는 그것에 식별자를 줘야 한다.

그것을 "presentLookAroundEmbedded"라고 부르자.

그리고 나중에 가시성을 업데이트할 수 있도록 코드로 가져오세요.

그것을 "미리보기"라고 부르자.

여기, 우리는 이미 LookAroundViewController를 선언했습니다.

우리는 준비 기능에서 인스턴스를 잡기만 하면 됩니다.

세게 식별자가 일치하는지 확인하세요.

그런 다음, 세그먼트 제어 기능에서 랜드마크 이름으로 로컬 검색을 만들 것입니다.

요청이 성공하면, 우리는 다음 카메라 애니메이션과 Look Around 장면 검색에 사용될 지도 항목을 얻을 것이다.

카메라 애니메이션의 경우, 우리는 먼저 새로운 API로 카메라를 만들어야 합니다.

지도 항목을 보고 있는 MapCamera.

뷰 크기에 대해 맵 뷰 프레임 크기를 사용하고, 허용 피치를 true로 설정합시다.

이것은 우리에게 랜드마크에 대한 피치 뷰와 다른 장소에 대한 하향식 뷰를 제공할 것이다.

새 카메라를 할당하세요. 그게 다야.

카메라 애니메이션이 완료되면, 우리는 Look Around 미리보기를 보여줄 것이다.

먼저, 우리는 이 지도 항목에 Look Around 데이터를 사용할 수 있는지 확인해야 합니다.

그렇게 하려면, 우리는 새로운 LookAroundSceneRequest 클래스를 사용해야 합니다.

요청을 작성하고 지도 항목을 전달해 봅시다.

그런 다음 요청을 수행하세요.

장면 요청이 성공하면, LookAroundViewController에 장면을 할당하세요.

오류가 없지만 현장에 대해 0을 얻는다면, 요청 위치에서 Look Around 데이터를 사용할 수 없다는 것을 의미합니다.

마지막으로, 미리보기를 보여주는 것을 잊지 마세요.

앱에서 어떻게 보이는지 보자!

페리 빌딩으로 해보자.

여기 있어.

페리 빌딩은 랜드마크이기 때문에, 우리는 이 환상적인 큐레이팅된 카메라 프레임을 영웅 각도로 보는 것을 보고, Look Around 미리보기가 나타납니다.

다른 곳으로 시도해 보자, 드래곤 게이트.

드래곤 게이트는 랜드마크가 아니므로, 우리는 하향식으로 볼 수 있다.

미리보기를 탭하여 전체 화면으로 들어가자.

그것은 인터랙티브 뷰이기 때문에, 나는 돌아다닐 수 있다.

나는 또한 Look Around 전체 화면 보기에서 상점의 아름다운 아이콘과 라벨을 얻는다.

자신만의 앱에서 몰입형 Look Around 경험을 추가하는 것은 매우 쉽습니다.

그것으로, 나는 그것을 에릭에게 돌려줄 것이다.

에릭: 고마워, 잉슈!

Look Around에 대한 인터페이스 빌더 지원은 그것을 매우 쉽게 보이게 합니다!

그래서 우리는 오늘 완전히 새로운 지도와 새로운 지도 구성 API의 자동 채택, 오버레이에 대한 새로운 행동 및 발전, 선택 가능한 지도 기능 및 Look Around 지원과 같은 완전히 새로운 기능에 이르기까지 많은 주제를 다루었습니다.

우리는 당신이 앱의 지도 경험을 다음 단계로 끌어올리는 데 사용할 수 있는 많은 것이 있다는 것에 동의할 것이라고 생각하며, 우리는 당신이 그것으로 무엇을 성취할 수 있는지 빨리 보고 싶습니다.

내가 가기 전에, 너에게 남기고 싶은 게 몇 가지 있어.

항상 그렇듯이, 귀하의 피드백은 우리가 다음에 집중하는 것의 우선 순위를 정하는 데 도움이 되므로, 피드백 어시스턴트를 사용하여 버그 보고서와 앱에 가장 도움이 될 기능을 보내주십시오.

또한, 우리는 방금 논의한 것을 통합하기 위해 많은 기존 샘플을 업데이트했습니다.

우리는 당신이 그것들을 확인해 볼 것을 권장합니다.

그리고 마지막으로, 우리는 당신이 살펴보고 싶은 새로운 REST API 세트를 발표했습니다.

우리는 이러한 API가 지오코딩, ETA 결정 등에 대한 일반적인 호출을 서버로 옮기려는 사람들에게 정말 유용할 것이라고 생각합니다.

자세한 내용은 Meet Apple Maps Server APIs라는 제목의 세션을 확인하세요.

지도 팀을 대표하여, 시청해 주셔서 감사합니다...

둘 다: 그리고 멋진 WWDC를 보내!

.