110349

♪ ♪

안녕. 저는 스테파니 앙굴로입니다.

그리고 난 마커스 잭슨이야.

우리는 스위프트 플레이그라운드 콘텐츠 팀의 소프트웨어 엔지니어입니다.

오늘, 우리는 당신에게 Swift Playgrounds를 위한 매력적인 콘텐츠를 만들 수 있는 도구를 제공할 것입니다.

Swift Playgrounds 4는 iPad와 Mac에서 앱 개발을 도입했다.

그것은 App Store용 앱 구축에 대해 배우는 가장 좋은 방법입니다.

우리 팀은 앱 개발의 기초를 배우는 데 도움이 되는 많은 튜토리얼과 샘플 코드 제품을 출시했습니다.

우리는 관찰 가능한 데이터 모델을 사용하여 동적 SwiftUI 앱을 구축하고, 재미있는 SwiftUI 애니메이션과 모양으로 보기를 사용자 정의하고, 비동기 데이터 가져오기와 같은 고급 주제를 다룹니다.

오늘의 세션에서, 우리는 새로운 교육 시스템에 대한 개요를 제공하고, 프로젝트의 가이드 모듈을 사용하여 콘텐츠를 작성하고, 연습 및 실험 작업으로 몰입형 학습 경험을 구축할 것입니다.

시작하자.

학습자가 "Keep Going with Apps" 튜토리얼을 완료한다고 상상해 보세요.

그들은 "이모티콘 앱"이라는 앱으로 끝날 것이다.

이 앱에서, 그들은 목록에서 가장 좋아하는 모든 동물을 추적하고, 색상과 크기를 변경하고, 동물을 탭하여 "크리처 댄스" 보기에서 그루브를 볼 수 있습니다.

이 댄스 뷰는 재미있지만, 나는 그 분위기가 더 실제 댄스 파티가었으면 좋겠어.

그럼 계속해서 학습자에게 보여줄 수 있는 몇 가지 추가 기능을 추가해 봅시다.

여기서, 나는 "창조 춤" 보기에 코드를 조금 더 추가했다.

모든 파티에는 댄스 플로어가 필요하다.

그래서 나는 내 뷰의 배경으로 설정한 10x10 그리드를 만들었다.

그리고 그리드의 각 타일은 사용자 지정 보기 수정자를 사용하여 무작위로 색상을 업데이트합니다.

멋져 보이네 응?

나는 또한 우리가 가장 좋아하는 동물들이 우리의 도움 없이 춤을 출 수 있도록 하고 싶었기 때문에, 동물의 규모, 위치 오프셋 및 회전을 움직이는 데 도움이 되는 몇 가지 사용자 지정 수정자를 더 만들었습니다.

이 모든 사용자 지정 수정자에서, 이 애니메이션은 영원히 반복하도록 설정되어 있으며, 이는 우리 동물들이 새로운 댄스 플로어에서 밤새 춤을 출 수 있다는 것을 의미합니다.

그리고 마지막으로, 댄스 플로어를 정말 밝히기 위해, 나는 우리 시야의 꼭대기에 애니메이션 디스코 볼을 추가했다.

이 마지막 터치를 추가하면 궁극의 댄스 파티를 위해 모든 것이 합쳐진다.

나는 이 프로젝트에 꽤 많은 변경을 했고, 사용자 지정 보기 수정자의 세부 사항에도 뛰어들지 않았다.

그래서 우리는 이것을 학습자들에게 어떻게 설명해야 할까요?

학습자를 Apple의 문서로 안내할 수 있지만, 이제 Swift Playgrounds에서 프로젝트의 코드와 함께 이러한 개념을 가르칠 수도 있습니다.

우리 팀은 당신과 같은 저자가 학습자를 위한 매력적인 인앱 경험을 만들 수 있도록 설계된 이 새로운 교육 시스템을 구축했습니다.

오늘, 우리는 Swift Playgrounds 4에서 이 앱의 학습 콘텐츠를 만드는 방법을 안내해 드리겠습니다.

네가 뭘 가지고 떠날지 살짝 엿볼게.

학습자가 Swift Playgrounds에서 콘텐츠를 처음 열면, 친구 Byte에서 볼 수 있듯이 선택적 환영 메시지와 함께 프로젝트를 소개할 수 있습니다.

환영 메시지는 화면의 왼쪽에 있는 프로젝트의 소스 편집기 상단에 있으며, 화면의 오른쪽에는 학습 센터가 있습니다.

학습 센터는 학습자에게 콘텐츠를 설명하는 이미지와 교육 텍스트를 추가할 수 있는 지정된 공간입니다.

환영 메시지와 학습 센터에서, 우리는 이 프로젝트가 SwiftUI 색상, 모양 및 애니메이션의 도움으로 잼을 펌핑할 것이라는 것을 학습자들에게 알리고 있습니다.

학습 센터에는 또한 작업을 위한 섹션이 포함되어 있다.

작업은 저자가 학습자를 안내하는 데 도움이 되도록 작성할 수 있는 코딩 목표입니다.

그것들은 콘텐츠의 기본 구성 요소이다.

학습 센터에서 작업 버튼을 탭하면, 우리의 교육 시스템은 스위프트 파일을 열고 해당 파일 상단에 학습 자료가 있는 카드를 렌더링합니다.

이 카드는 텍스트, 이미지 및 코드 스니펫이 있는 일련의 페이지를 포함할 수 있습니다.

나중에, 마커스는 두 가지 작업 유형을 검토할 것이다: 연습과 실험.

높은 수준에서, 그것이 우리의 교육 시스템이 제공해야 하는 것이다.

올바른 산문과 올바른 작업으로, 당신은 학습자를 위한 매력적인 교육 경험을 구축할 수 있습니다.

이제, 자신만의 콘텐츠를 만들기 시작하려면, 먼저 가이드 모듈에 대해 이야기해야 합니다.

기본적으로, swiftpm 프로젝트의 파일 구조는 모든 소스 코드를 루트에 유지합니다.

교육 시스템을 활용하기 위해 프로젝트를 업그레이드하려면, 파일 구조를 변경해야 합니다.

우리는 먼저 앱 모듈을 만들어야 한다.

일단 그것이 만들어지면, 우리는 프로젝트의 모든 소스 코드와 자산을 그로 옮겨야 한다.

Package.swift 파일은 우리 프로젝트의 루트에 남겨야 합니다.

그러면 우리는 가이드 모듈을 만들어야 한다.

이 모듈은 앱 모듈 및 Package.swift 파일과 같은 수준에 있어야 합니다.

가이드 모듈 안에는 가이드 파일이 필요합니다.

이 파일에는 학습 내용의 모든 산문이 포함됩니다.

나는 이미 내 가이드 파일을 시작했으니, 내가 지금까지 쓴 내용을 확인해 보자.

가이드 파일에는 지침과 마크다운의 조합이 포함되어 있습니다.

지시어는 문자열과 같은 속성뿐만 아니라 마크다운 요소 및 기타 지시어와 같은 더 복잡한 유형을 속성으로 받아들일 수 있는 마크다운의 확장이다.

지침은 다른 지침의 컨테이너 역할을 할 수 있지만, 교육 시스템에서 UI 요소를 나타낼 수도 있습니다.

먼저 가이드 파일에서, 파일 전체를 감싸는 데 필요한 가이드북 지침을 추가했습니다.

그것은 우리의 모든 지침의 주요 컨테이너 역할을 한다.

매개 변수에는 제목, 아이콘 및 배경 이미지, 그리고 프로젝트를 열 때 처음 열고 싶은 파일이 포함됩니다.

가이드북 지침에 따라, 나는 환영 메시지 지침을 추가했다.

환영 메시지는 선택 사항이며 앞서 언급했듯이, 프로젝트를 처음 열 때 학습자에게 제공됩니다.

환영 메시지 지침 아래에, 나는 단계 지침을 둘러싼 가이드 지침을 추가했다.

가이드 지침은 학습 센터와 작업에 표시된 콘텐츠에 매핑된 단계와 단계를 위한 컨테이너 역할을 합니다.

학습 센터에 이미지와 교육용 텍스트를 추가하려면, 단계에 ContentAndMedia 지침을 포함해야 합니다.

그래서 나는 댄스 플로어, 멋진 환영 메시지, 그리고 학습 센터를 위한 산문을 추가하여 이 파티를 시작했다.

마커스, 이 파티를 계속하고 싶니?

마커스: 물론이지.

우리 생물들이 파티를 할 수 있는 멋진 댄스 플로어야.

이 효과는 정말 멋지지만, 아직 배우고 있는 사람에게는 너무 과할 수도 있다고 생각한다.

이 코드를 설명하기 위해, 우리는 연습 작업을 사용할 수 있습니다.

한 페이지짜리 연습으로 시작합시다.

나중에, 나머지를 어떻게 작성하는지 보여줄게.

스테파니는 이미 당신에게 가이드북의 시작과 유용한 환영 메시지를 보여주었습니다.

우리는 이미 당신이 작업을 만드는 데 필요한 첫 번째 지침인 단계 지침을 가지고 있습니다.

단계 지침은 우리의 연습 콘텐츠가 살 수 있는 곳이다.

한 걸음을 내딛으려면, 두 가지 다른 지침으로 채워야 합니다.

여기, 우리는 이미 콘텐츠와 미디어 지침을 추가했습니다.

이 지침에는 오른쪽에 있는 학습 센터로 들어가는 마크다운이 포함되어 있다.

이 지침의 본문은 모든 형태의 마크다운 텍스트를 포함할 수 있다.

이곳은 당신의 주제를 다루는 데 도움이 될 수 있는 더 긴 산문과 더 큰 이미지를 넣을 수 있는 곳입니다.

여기 놀이터에 표시되는 콘텐츠와 미디어 지침이 있습니다.

이 예에서 그 영역은 작아 보이지만, 이 보기는 더 아래로 확장될 수 있으며 스크롤 보기에 포함되어 있다.

이것은 더 긴 산문을 쓰고 다이어그램과 같은 복잡한 내용을 보여주기에 좋은 장소이다.

콘텐츠와 미디어를 작성하면, 우리는 두 번째 필수 지침인 작업을 추가할 수 있습니다.

우리는 작업 그룹이라고 불리는 또 다른 지침에 작업을 추가합니다.

작업 그룹은 작업 그룹을 함께 수집하려는 경우 단계 안에 넣을 수 있는 선택적 지침입니다.

여러 파일이나 다른 유형의 작업에서 동일한 주제를 다루는 콘텐츠가 있다면 이것을 고려할 수 있습니다.

작업 그룹 내에서, 우리는 짧은 텍스트를 추가할 수 있다.

이것은 학습 센터에 자막으로 표시될 것이다.

작업 그룹이 놀이터에 표시되는 방법은 다음과 같습니다.

이제 작업 그룹과 자막이 있으니, 작업 지시문을 추가하기 시작할 수 있습니다.

작업에는 몇 가지 매개 변수가 있습니다. 첫 번째 매개 변수는 유형입니다.

이를 통해 교육 시스템은 이 작업을 표시할 때 어떤 UI를 생성해야 하는지 알 수 있습니다.

다음으로, 모든 작업에는 신분증이 필요합니다.

ID는 당신이 원하는 무엇이든 될 수 있는 문자열입니다.

그러나, 가이드의 모든 신분증은 고유해야 합니다.

제목 매개 변수도 문자열이다.

이것은 또한 당신이 원하는 무엇이든 될 수 있으며 독특할 필요는 없습니다.

이 제목은 작업 카드 UI에 의해 렌더링될 것이다.

마지막으로, 파일 매개 변수는 학습자가 이 작업을 시작할 때 프로젝트의 어떤 파일을 열지 학습 센터에 알려줍니다.

놀이터에서 작업이 표시되는 방법은 다음과 같습니다.

제목은 버튼 안에 있으며, 연습 파일은 그 위에 나열되어 있다.

이제 우리는 연습 과제를 작성했습니다.

우리의 첫 페이지를 추가하자.

페이지 지시문은 작업의 본문에 들어가고 다음과 같은 필수 매개 변수를 가지고 있습니다: ID 매개 변수는 작업의 ID처럼 작동하므로 전체 가이드 파일에 대해 고유해야 합니다.

제목 매개 변수는 작업과 매우 비슷하게 작동한다.

그러나, 페이지에서 제목 문자열을 비워두면, 교육 시스템이 이 페이지를 표시할 때 작업의 제목을 사용할 수 있다는 것을 알 수 있습니다.

페이지 안에 콘텐츠 및 미디어 지침과 유사한 마크다운 텍스트를 추가할 수 있습니다.

그러나, 작업 보기는 학습 센터보다 훨씬 작다.

텍스트를 짧게 유지하고 학습자가 읽기 어려울 수 있으므로 다이어그램과 같은 복잡한 이미지를 사용하지 마십시오.

이것은 Swift Playgrounds가 렌더링한 연습의 첫 페이지입니다.

우리는 첫 번째 연습이 거의 끝났지만, 먼저 마지막 스크린샷에 표시된 것처럼 코드를 강조하는 방법을 보여줘야 합니다.

그것을 위해, 우리는 CreatureDance.swift에 마커를 추가해야 합니다.

내 연습이 표시되면, 첫 번째 사용자 지정 수정자인 animatedScalingEffect를 강조하고 싶습니다.

줄에 하이라이트를 추가하려면, 코드 전후에 줄에 한 쌍의 주석을 추가할 것입니다.

우리는 멀티라인 주석 구문으로 시작합니다, /* 주석 안에, 우리는 #-code -walkthrough를 쓰고, 그 다음에 한 쌍의 괄호를 씁니다.

괄호 안에, 우리는 강조하고 싶은 페이지 지시어의 ID를 씁니다.

이 경우, 1.modifier.

이제, 이것을 놀이터에서 시험해 봅시다.

이모티콘 앱 프로젝트를 열어봅시다.

프로젝트를 열면, 왼쪽에 소스 편집기와 오른쪽에 미리보기가 표시됩니다.

소스 편집기 위에는 우리의 친구 바이트가 어떤 학습 콘텐츠가 해야 하는지에 대한 개요를 제공하는 환영 메시지가 있습니다.

더 알아보기 버튼을 탭하겠습니다.

오른쪽의 미리보기는 학습 센터로 교체되었다.

맨 위에는 우리가 ContentAndMedia 지침에 쓴 산문이 있다.

그 아래에는 작업 그룹과 우리의 연습 제목이 있는 버튼이 있습니다.

연습은 학습 센터에서 바이트의 또 다른 친구인 전문가의 사진이 있는 버튼으로 표시됩니다.

이 버튼을 탭하면 몇 가지 일이 있습니다: 첫째, 학습 센터는 다시 한 번 미리보기로 바뀝니다.

둘째, 아직 열리지 않았다면, 작업의 파일 매개 변수에 지정된 파일이 소스 편집기에서 열립니다.

셋째, 작업 보기는 소스 편집기 위로 떨어집니다.

마지막으로, 소스 편집기는 코드 연습 주석에 표시된 코드를 강조한다.

콘텐츠가 화면에 없다면, 소스 편집기는 강조 표시되어야 하는 코드 줄이 나타날 때까지 스크롤할 것이다.

그리고 그것이 당신이 스위프트 플레이그라운드에서 워크스루를 작성하는 방법이지만, 여러 페이지가 있는 워크스루가 어떻게 생겼는지 궁금하다고 말하는 것이 공평하다고 생각합니다.

그렇게 하기 위해, 나는 Xcode에서 프로젝트를 열어 나머지 워크스루를 작성할 것이다.

이제 Xcode에서 가이드 파일을 열면, 연습에 몇 페이지를 더 추가하고 싶습니다.

뷰 수정자가 무엇인지에 대해 조금 설명했지만, 사용자 지정 뷰 수정자를 만드는 방법에 대해 더 설명하고 싶습니다.

내가 가서 그 페이지들을 추가할게.

좋아.

이제 사용자 지정 보기 수정자에 대한 연습이 있습니다.

나는 지금이 ViewModifier 프로토콜을 설명하기에 좋은 시간이라고 생각한다.

이런 식으로, 학습자는 원한다면 그들만의 ViewModifier를 만들려고 시도할 수 있다.

이것을 하기 위해, 나는 우리의 작업 그룹에 또 다른 연습 연습을 추가할 것이다.

우리는 이제 완전히 구체화된 한 쌍의 연습이 있다.

내 아이패드로 다시 바꿔서 어떻게 생겼는지 볼게.

우리가 프로젝트를 시작할 때, 이제 학습 센터에 두 개의 연습이 있다.

나는 첫 번째 연습을 탭하는 것으로 시작할 것이다.

이전과 마찬가지로, 보기 수정자 하이라이트와 작업 보기가 있는 줄은 이 코드가 무엇인지 설명하기 위해 아래로 떨어집니다.

이제 다음 버튼을 탭할 수 있습니다.

소스 편집기는 이제 수정자 구조체로 스크롤하여 이 구조체가 무엇을 위한 것인지 설명합니다.

다음 버튼을 다시 탭하면 수정자 구조체 내부의 본문 방법에 대해 자세히 설명하는 이 연습의 마지막 페이지로 이동합니다.

작업 보기의 하단 모서리에는 다음 연습으로 표시된 버튼이 있습니다.

이것을 탭하면 다음 연습 작업이 자동으로 시작됩니다.

이 기능은 진행해야 할 다른 작업이 있는 한 교육 시스템에 의해 무료로 제공됩니다.

이제 내가 여기 왔으니, 나는 이 연습의 나머지 부분을 탭할 것이다.

그리고 그것이 당신이 스위프트 플레이그라운드에서 워크스루를 만드는 방법입니다.

다음으로, 학습자가 스스로 코드를 추가하고 무슨 일이 일어나는지 볼 수 있는 다른 종류의 작업을 만드는 방법을 보여주고 싶습니다.

그래서 이 시점에서, 우리는 좋은 파티를 하고 있다.

우리 생물들은 춤을 추고 있으며, 배경에 조명이 있다.

기본적으로 그곳의 나이트클럽처럼 보이지만, 나는 우리가 조금 더 잘할 수 있다고 생각한다.

나는 그들이 작은 클럽의 스트로브 조명 아래에서 춤을 추는 것처럼 보이도록 우리 생물에 색을 추가하는 것이 좋을 것이라고 생각한다.

하지만 그건 그냥 나야. 넌 뭘 할 거야?

여기가 실험 과제가 들어오는 곳이다.

실험은 학습자가 더 호기심을 느끼거나 앱을 독특하게 만드는 방법을 원한다면 추가할 수 있는 선택적 코드입니다.

가이드 파일로 돌아가서, 우리는 이미 작업하고 있던 것과 같은 단계에 실험 작업을 추가할 수 있습니다.

나는 "실험"이라고 명명한 실험을 개최하기 위해 새로운 작업 그룹을 만들었다.

나는 우리의 첫 번째 실험 작업의 시작뿐만 아니라 자막으로 그것을 채웠다.

실험 작업과 연습의 첫 번째 차이점은 유형 매개 변수에 들어가는 것이다.

다른 매개 변수들은 워크스루 작업에 대한 비슷한 규칙을 따른다.

페이지 지시문은 연습에서 하는 것과 같은 방식으로 작동한다.

그러나, 실험을 위해, 우리는 하나의 선택적 매개 변수인 isAddable을 추가합니다.

isAddable 매개 변수를 사용하면 실험 작업이 소스 편집기에 직접 코드를 추가할 수 있습니다.

isAddable이 true로 설정되면, 코드 스니펫 옆의 학습 작업 카드에 추가 버튼이 나타납니다.

페이지 지시어의 코드는 트리플 백 틱 마크다운 구문을 사용하여 코드 블록으로 래핑되어야 합니다.

코드 블록을 열 줄 이하로 유지하는 것이 가장 좋습니다.

작업 보기는 필요한 경우 더 긴 코드 스니펫을 보여줄 수 있지만, 학습자가 스크롤할 필요가 없는 것이 좋습니다.

놀이터에서 코드 보기가 표시되는 방법은 다음과 같습니다.

코드 스니펫 오른쪽에는 isAddable 매개 변수가 true로 설정되었기 때문에 추가 버튼이 있습니다.

그것이 우리가 실험 과제를 작성하는 데 필요한 거의 모든 것이다.

하지만 추가할 수 있는 매개 변수를 기억하시나요?

이를 통해 실험 작업이 소스 편집기에 코드를 추가할 수 있지만, 플레이그라운드에 코드에서 스니펫을 추가할 위치를 알려야 합니다.

여기 우리는 다시 CreatureDance.swift에 있습니다.

나는 학습자가 불투명도 수정자 바로 아래에 색상 수정자를 추가하기를 원한다.

그래서 그것이 내가 실험 작업 코멘트를 추가할 곳이다.

실험 작업 주석은 한 줄이며, 이는 이중 슬래시로 시작한다는 것을 의미합니다.

그런 다음, 우리는 #- 학습 과제를 작성합니다.

그 후, 한 쌍의 괄호가 오고, 그 안에 우리는 실험 작업의 ID를 쓴다.

이제 우리는 실험 과제를 테스트하는 데 필요한 모든 것을 가지고 있다.

다시 한 번, 나는 스테파니와 내가 작업하고 있는 swiftpm 프로젝트에 이 모든 것을 이미 작성했다.

확인해 보자.

우리는 다시 한 번 학습 센터로 돌아왔다.

이번에는 우리의 첫 번째 실험이 있는 하위 작업 그룹에 집중하고 싶다.

실험은 바이트의 또 다른 친구인 블루에 의해 교육 시스템에 기록된다.

실험 과제를 탭해 봅시다.

다음에 일어나는 일은 친숙해 보일 것이다.

작업 보기가 떨어집니다.

그러나, 이번에는 작업 보기에 코드 보기가 포함되어 있다.

코드 보기 오른쪽에는 추가 버튼이 있습니다.

이것을 탭하면 소스 편집기에 코드가 바로 추가됩니다.

이제 코드가 추가되면서, CreatureDanceView에 어떤 변화가 있었는지 확인하고 싶습니다.

이 파티를 시작하자!

좋아.

이제 우리는 빛이 우리의 생물을 치는 것을 볼 수 있다.

이것은 꽤 멋지지만, 나는 우리가 타이머를 사용하여 몇 초마다 생물에게 임의의 색을 부여함으로써 그것을 한 단계 더 올릴 수 있다고 생각한다.

그렇게 하려면, 우리는 또 다른 실험을 추가해야 하므로, 이 프로젝트를 Xcode로 되돌리고 새로운 작업을 추가합시다.

두 번째 실험을 추가하기 전에, 이미 있는 실험에 페이지를 추가하는 것이 좋은 생각이라고 생각합니다.

학습자의 경우, 코드 블록을 추가하고 왜 또는 무엇을 하는지 모르는 것은 혼란스러울 수 있다.

그것을 돕기 위해, 코드 페이지 앞에 텍스트가 있는 페이지를 추가하겠습니다.

이제, 우리는 두 번째 작업을 추가할 준비가 되었습니다.

다시 말하지만, 저는 학습자가 프로젝트에 코드를 추가하기를 원하므로, 코드를 설명하는 페이지와 추가 가능한 코드 스니펫을 추가할 것입니다.

그리고 그것으로, 우리는 사용자 지정 보기 수정자로 할 수 있는 몇 가지에 대해 학습자에게 가르치기 위해 새로운 콘텐츠를 만들었습니다.

스테파니, 우리가 뭘 만들었는지 보여줄 준비 됐어?

스테파니: 그래, 하자.

iPad에서 콘텐츠의 최종 버전을 열고 내 변화와 마커스의 변화가 어떻게 함께 진행되는지 확인해 보겠습니다.

내가 그 프로젝트를 처음 열었을 때, 환영 메시지가 활기를 불어넣어 우리에게 크리처 파티를 소개한다.

환영 메시지에서 더 알아보기 버튼을 탭하면, 학습 센터가 열립니다.

굉장해.

우리 학습 센터는 맨 위에 내 설명과 마커스가 추가한 네 가지 과제가 있다.

첫 번째 연습을 탭해 봅시다.

여기서, 마커스는 내 AnimatedScalingModifier를 예로 사용하여 사용자 지정 보기 수정자를 사용하는 방법을 설명했다.

다음 연습 버튼을 탭하면, 두 번째 연습이 애니메이션으로 표시됩니다.

마커스는 프로토콜이 어떻게 작동하는지 설명하기 위해 View Modifier 프로토콜을 예로 사용했다.

두 번째 연습을 마친 후, 완료를 탭하면, 첫 번째 실험 작업이 진행됩니다.

Dancing in the Strobe Light 작업은 colorMultiply 수정자가 포함된 이 코드 스니펫을 추가하여 우리 생물에 색을 추가할 수 있다고 알려줍니다.

코드 스니펫을 추가하기 전에 이 댄스 파티가 어떻게 생겼는지 상기시켜 봅시다.

알았어, 좋아.

추가를 탭하고 파티 시작을 다시 탭하여 변경 사항을 확인하여 코드 스니펫을 추가하겠습니다.

좋아, 그 생물들은 색을 바꿨어.

나는 지금 이 실험 과제를 완료하고 마지막 과제로 전환할 것이다.

Switch It Up 실험 작업은 탭 제스처와 타이머로 동물의 색상을 사용자 정의할 수 있다고 알려줍니다.

나는 코드 스니펫을 추가하고 파티를 한 번 더 시작할 것이다.

그리고 이제 내가 동물들을 두드리면, 그들은 색을 바꾼다.

좋아.

나는 이 마지막 과제를 완료하고 학습 센터로 돌아갈 것이다.

이제, 모든 작업은 학습 센터에서 완료된 것으로 표시되며, 이는 우리가 이 샘플을 완료했다는 것을 의미합니다.

그리고 그것이 당신이 Swift Playgrounds 4의 새로운 콘텐츠 기능을 활용하는 방법입니다.

우리는 당신이 오늘 세션을 즐겼기를 바라며, 당신이 어떤 종류의 학습 경험을 쌓을지 보게 되어 매우 기쁩니다.

다른 스위프트 플레이그라운드 세션을 확인하는 것을 잊지 마세요, 스위프트 플레이그라운드에서 첫 번째 앱을 만드세요.

나머지 WWDC를 즐기세요.

마커스: 그리고 지금, 실례합니다만, 우리는 참석할 파티가 있습니다.