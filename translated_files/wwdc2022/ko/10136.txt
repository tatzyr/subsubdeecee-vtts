10136

♪ 기악 힙합 음악 ♪

♪

안녕하세요, 저는 도미니크입니다. SwiftUI에서 유익하고 즐거운 차트를 만들기 위한 Apple의 새로운 프레임워크인 Swift Charts를 소개하게 되어 기쁩니다.

데이터는 우리를 둘러싸고 세상을 이해하고 더 나은 결정을 내리기 위한 전례 없는 자원을 제공한다.

그러나, 데이터만으로는 거의 쓸모가 없다.

데이터를 유용하게 만들기 위해, 우리는 그것을 이해해야 한다.

잘 설계되고 접근 가능한 데이터 시각화는 복잡한 데이터를 명확하게 전달하고 데이터를 이해와 지식으로 바꿀 수 있다.

애플에서, 우리는 시각화를 위한 모범 사례를 연구하는 데 수년을 보냈다.

우리는 차트가 일정 기간 동안 주가의 추세와 변동, 마지막 운동 중 심박수, 그리고 저녁에 하루가 시원해질 때와 같은 데이터에 대한 추가적인 유용한 맥락을 보여줄 때 가장 잘 작동한다는 것을 배웠습니다.

그리고 이것들은 우리가 차트를 사용하는 모든 플랫폼에서 많은 예시 중 일부일 뿐입니다.

오늘, 앱에서 유익하고 즐거운 차트를 만들 수 있도록 새로운 프레임워크를 소개하게 되어 기쁩니다.

스위프트 차트에 인사하세요.

스위프트 차트는 애플이 디자인한 차트를 만들기 위한 유연한 프레임워크이다.

그것은 SwiftUI와 동일한 선언적 구문을 사용하므로, 당신은 이미 Swift Charts의 언어를 알고 있습니다.

그래서 오늘, 스위프트 차트로 유익하고, 접근 가능하며, 즐거운 시각화를 만들어 봅시다.

팀에서, 우리는 팝업 팬케이크 푸드 트럭이 앱으로 판매를 추적하는 것을 돕고 있다.

그 트럭은 카차파, 인헤라, 크레페, 지안 빙, 도사 또는 미국 팬케이크와 같은 다양한 달콤하고 짭짤한 팬케이크를 제공한다.

푸드 트럭은 지난 30일 동안 이 스타일에 걸쳐 4500개 이상의 팬케이크를 제공했다.

카차파는 가장 인기가 있었고 앱은 이미 제목에서 가장 중요한 정보를 보여준다.

여섯 개의 팬케이크에 대한 자세한 내역을 보여주는 차트를 추가합시다.

스위프트 차트에서 이 시각화를 만들기 위해, 우리는 스위프트UI와 동일한 선언적 구문을 사용할 수 있다.

스위프트 차트에서는 구성으로 차트를 만듭니다.

막대 차트의 주요 구성 요소는 데이터의 각 항목에 대한 시각적 요소인 막대입니다.

스위프트 차트는 이러한 시각적 요소를 "표시"라고 부른다.

이 차트를 만들기 위해 Xcode로 넘어갑시다.

우리는 차트를 추가하는 것으로 시작한다.

바를 만들기 위해, 나는 차트 안에 바마크를 추가한다.

카차파의 수에 대한 막대를 표시하려면, 우리는 이름과 판매를 설정해야 한다.

우리는 팬케이크 이름의 값에서 파생되도록 바의 x-위치를 설정했습니다 - 이 경우 "카차파."

.Value 공장 방법의 첫 번째 인수는 값에 대한 설명이고, 두 번째는 값 그 자체이다.

그리고 이제 우리는 미리보기에서 하나의 바를 얻는다.

Y 속성에 의해 설명된 각 바의 높이는 916인 판매된 카차파의 수로 설정되어야 한다.

바의 위치나 높이를 직접 설정하지 않는다는 것을 나타내기 위해, 우리는 .value를 사용합니다.

스위프트 차트는 막대뿐만 아니라 x축의 막대에 대한 라벨과 막대의 길이가 무엇을 의미하는지 보여주는 y축을 자동으로 생성합니다.

트럭이 850을 팔았던 injera의 두 번째 바를 추가하자.

이제, 개별 마크를 만들고 앱에 나타나는 것을 보는 것은 멋지다.

그러나, 우리는 보통 구조체 배열과 같은 컬렉션에 의해 구동되는 차트를 만들고 싶다.

팬케이크 판매를 위한 구조를 추가하는 것으로 시작하겠습니다.

그것은 문자열이라는 이름과 트럭이 얼마나 많은 팬케이크를 팔았는지를 가지고 있다.

우리는 그것을 반복하기 위해 사용하고 싶기 때문에, 우리는 그것을 식별할 수 있게 한다...

...그리고 이름을 반환하는 ID 계산 속성을 정의하세요.

이제 우리는 팬케이크 배열로 데이터 세트를 만들 수 있습니다.

우리는 이것을 외부 데이터 소스에서 로드할 수 있지만 여기서는 코드에서 정의할 것입니다.

카차파와 인제라 외에도 크레페도 추가한다.

우리는 ForEach로 구동되는 막대 차트 데이터를 만들 수 있다.

먼저, 두 번째 막대를 제거하세요.

그리고 우리가 지금 해야 할 일은 ForEach로 BarMark를 반복하는 것이다.

나는 루프에서 변수의 이름으로 "요소"를 선택한다.

그러면 우리는 x에 element.name을 사용할 수 있습니다...

...그리고 y를 위한 요소. 판매.

ForEach가 차트의 유일한 콘텐츠라면, 데이터를 차트 이니셜라이저에 직접 넣을 수도 있습니다.

우리는 이제 지안 빙, 도사, 아메리칸 팬케이크에 대한 나머지 세 개의 항목을 추가할 수 있습니다.

배열에 더 많은 항목을 추가하면, 차트에 새로운 막대 표시를 추가합니다.

마지막으로, 우리는 라벨이 서로 가까워지고 있는 것을 본다.

X와 y를 교환함으로써, 우리는 차트를 조옮김하고 각 막대에 대한 라벨에 더 많은 공간을 제공한다.

스위프트 차트 프레임워크는 차트를 아름답게 만들기 위해 적절한 축 스타일을 자동으로 선택합니다.

그리고 그것으로, 우리는 스위프트 차트에서 첫 번째 데이터 시각화를 만들었다.

그리고 Xcode의 새로운 변형 기능을 사용하여, 우리는 이 차트가 다크 모드에서 아름답게 보이고, 다양한 글꼴 크기, 장치 크기 및 방향에 적응하며, 접근성을 지원한다는 것을 알 수 있습니다.

시각적 표현으로 데이터에 접근하려면, 볼 수 있어야 합니다.

스위프트 차트는 시각화된 데이터를 VoiceOver에 노출하여 모든 사람이 인기 있는 팬케이크의 세부 사항을 탐색할 수 있도록 합니다.

내가 VoiceOver에서 차트를 탐색할 때, 그것은 판매된 팬케이크의 이름과 수를 말한다.

음성 해설: 카차파, 916. 인제라, 850. 크레페, 802.

지안핑, 753. 도사, 654. 미국인, 618.

도미니크: 그리고 물론, 이 차트는 소니피케이션을 포함하여 2021년에 애플이 발표한 오디오 그래프 기능을 지원합니다.

VoiceOver: 차트를 설명하세요. 차트 세부 사항.

오디오 그래프를 재생하세요.

완료.

도미니크: 우리는 방금 스위프트 차트를 사용하여 푸드 트럭 앱에 유익하고 접근 가능한 차트를 추가했습니다.

그 차트는 트럭이 각 스타일의 팬케이크를 얼마나 많이 팔았는지 보여준다.

각 스타일의 팬케이크에 대한 요약 외에도, 푸드 트럭에는 일일 판매 데이터도 있습니다.

트럭은 쿠퍼티노와 샌프란시스코에 주차할 수 있다.

우리는 푸드 트럭이 다른 요일에 어디에 주차해야 하는지 알 수 있도록 돕고 싶습니다.

이 질문에 답하기 위해, 데이터를 두 도시의 시계열로 시각화합시다.

다른 디자인을 탐구하는 것이 얼마나 쉬운지 보기 위해, 우리는 차트를 세 번 반복할 것이다.

우리는 쿠퍼티노의 막대 그래프를 만드는 것으로 시작할 것이다.

그런 다음, 우리는 샌프란시스코에 대한 데이터를 추가하고 피커를 추가할 것이다.

그리고 마지막으로, 우리는 데이터를 하나의 멀티시리즈 라인 차트로 결합할 것이다.

하루에 판매된 팬케이크의 평균 수를 보여주는 막대 차트부터 시작합시다.

판매 데이터에는 평일이 날짜로 저장되어 있고 트럭이 얼마나 많은 팬케이크가 정수로 팔렸는지.

쿠퍼티노의 데이터는 변수인 쿠퍼티노 데이터에 있다.

이전과 마찬가지로, 우리는 BarMark로 차트를 만들기 시작합니다.

우리는 날짜의 날부터 파생될 바의 x-위치를 설정했습니다...

...그리고 판매에서 파생되는 높이.

그리고 이것은 우리에게 쿠퍼티노의 요일 판매 데이터를 보여주는 차트의 첫 번째 반복을 제공한다.

두 번째 반복을 위해, 샌프란시스코의 데이터를 추가합시다.

이 차트를 사용하여, 우리는 팬케이크 트럭이 주중에 어디에 주차할지 결정하는 것을 돕고 싶습니다.

샌프란시스코의 판매 데이터는 sfData 변수에 있다.

우리는 두 도시 사이를 전환하고 각 도시의 막대 차트를 보고 싶습니다.

우리는 주 변수인 도시를 추가하는 것으로 시작합니다.

그리고 나서 우리는 도시를 위한 SwiftUI 피커를 뷰에 추가합니다.

도시 변수를 통해 두 도시의 판매 요약 사이를 전환하기 위해, 우리는 데이터 변수에 대한 스위치 문을 추가합니다.

그리고 우리가 지금 해야 할 일은 쿠퍼티노의 데이터를 쿠퍼티노와 샌프란시스코 사이에서 전환하는 데이터로 대체하는 것이다.

내가 토글을 바꾸면, 차트는 두 도시 사이를 전환한다.

스위프트 차트는 SwiftUI 애니메이션과 함께 작동하므로, 전환이 쉽게 애니메이션되어야 한다고 지정하면, 바는 두 도시 사이를 전환할 때 애니메이션화되며 한 번에 하나의 위치만 표시합니다.

이것은 우리의 앱에 올바른 모양과 느낌을 준다.

우리의 마지막 반복으로, 우리는 두 시리즈를 라인 차트로 보여줄 것이다.

이 라인 차트를 만들기 위해, 우리는 이전부터 쿠퍼티노의 막대 차트로 시작합니다.

쿠퍼티노와 샌프란시스코의 데이터는 일련의 시리즈에 있다.

시리즈 구조체에는 도시와 판매 데이터가 있다.

두 시리즈를 모두 보여주기 전에, 쿠퍼티노 데이터에 집중합시다.

차트에서, 우리는 시리즈 데이터를 반복할 수 있다.

기억하세요, 차트 이니셜라이저는 ForEach처럼 작동합니다.

그러면 우리는 쿠퍼티노의 특정 데이터를 시리즈의 판매 데이터로 대체할 수 있습니다.

두 도시의 데이터를 구별하기 위해, 나는 바의 색이 도시에서 파생되기를 원한다.

이를 위해, 우리는 시리즈의 도시에서 파생된 포그라운드 스타일을 설정했다.

색상이 어떤 도시를 나타내는지 보여주기 위해, 스위프트 차트는 차트 아래에 범례를 만든다.

이제, 저는 두 번째 위치에 대한 데이터를 추가합니다.

미리보기에서 볼 수 있듯이, 스위프트 차트는 샌프란시스코의 색상을 자동으로 선택하고, 차트에서 두 도시의 막대를 보여줍니다.

차트는 특정 상황에 대한 데이터를 보여주며 데이터나 질문이 변함에 따라 시각화가 변경되어야 할 수도 있습니다.

스위프트 차트를 사용하면 차트를 빠르게 변경하여 다양한 디자인을 탐색할 수 있습니다.

누적 막대 차트는 하루 평균 판매량을 보여주는 데 좋습니다. 하지만 두 도시를 비교하고 싶다면 어떨까요?

아마도 포인트나 라인 차트가 더 나을 것이다.

우리는 마크 유형을 BarMark에서 PointMark로 변경하여 포인트로 판매된 팬케이크를 표시하거나 LineMark로 데이터를 라인 차트로 표시합니다.

라인 차트는 우리가 매일 두 도시를 비교할 수 있기 때문에 판매 데이터에 잘 어울린다.

차트는 여러 마크를 결합할 수 있다.

예를 들어, 나는 포인트마크를 추가할 수 있다.

색상 없이 시리즈를 차별화할 수 있도록, 우리는 상징을 도시에서 파생하도록 설정했다.

이제 각 지점은 색상과 상징으로 도시를 나타낸다.

선에 점을 표시하는 것이 일반적이기 때문에, 스위프트 차트에는 기호 수정자를 라인마크에 적용하는 약자가 있습니다.

점의 스타일은 선에 적응한다.

이 차트는 훌륭해.

우리는 일주일 내내 판매 동향을 쉽게 비교할 수 있다.

우리는 일요일에 샌프란시스코에서 판매량이 특히 높다는 것을 관찰한다.

스위프트 차트는 우리가 단 몇 분 만에 많은 디자인을 매우 쉽게 반복할 수 있게 해주었다.

그래서 마무리하자면, 스위프트 차트가 어떻게 빠르게 반복할 수 있고 동시에 차트를 앱의 독특한 스타일에 원활하게 통합할 수 있을 만큼 유연하게 만드는지 살펴봅시다.

스위프트 차트에서는 마크 속성을 가진 마크의 구성으로 차트를 만듭니다.

팬케이크 앱에서, 우리는 세 개의 다른 마크와 네 개의 마크 속성으로 차트를 구성했다.

예를 들어, 우리는 x와 y 속성을 가진 막대 표시로 간단한 막대 차트를 만들었다.

우리는 또한 점이 있는 차트나 x와 y 속성이 있는 선 표시를 사용한 선 차트와 같은 디자인을 빠르게 탐색하기 위해 마크를 변경했습니다.

우리는 또한 선 차트에 여러 시리즈를 보여주기 위해 포그라운드 스타일과 같은 속성을 추가할 수 있다는 것을 보았다.

그리고 차트에는 한 개의 마크만 있을 필요는 없다.

우리는 점과 선을 결합했고, 두 개의 마크 속성으로 같은 값을 보여주었다.

스위프트 차트는 오늘날 우리가 사용했던 것보다 훨씬 더 많은 마크와 마크 속성을 지원합니다.

그것은 또한 확장 가능하며 사용자 지정 마크를 추가할 수 있습니다.

마크와 마크 속성은 스위프트 차트가 소수의 선언적 빌딩 블록으로 광범위한 차트 디자인을 표현할 수 있게 해준다.

이러한 빌딩 블록을 결합하여 앱에 대한 훌륭한 데이터 시각화를 만들 수 있는 많은 방법이 있습니다.

SwiftUI에서 이미 할 수 있는 것과 함께, 가능성은 정말 무궁무진합니다.

그리고 오늘 보여드렸듯이, 다크 모드, 다양한 장치 화면 크기, 동적 유형, 보이스오버 및 오디오 그래프를 무료로 지원할 수 있습니다.

게다가, 스위프트 차트는 고대비 모드를 지원합니다.

그리고 마지막으로, 스위프트 차트는 로케일에서 작동하며 멀티플랫폼이다.

같은 코드를 가진 차트는 모든 Apple 플랫폼에서 작동합니다.

그리고 동일한 사용자 지정이 모든 곳에서 작동하므로 각 플랫폼에 맞게 차트를 조정할 수 있습니다.

오늘, 저는 Swift Charts가 SwiftUI의 강력한 구성 구문을 사용하여 더 적은 코드로 더 많은 차트를 만들 수 있는 방법을 보여주었습니다.

스위프트 차트는 또한 풍부한 사용자 지정 옵션을 제공하므로, 애플리케이션과 일치하도록 차트의 스타일을 지정할 수 있습니다.

그리고 이제 새로운 영역을 차트화하고 차트를 만드는 방법을 알았으니, 문서와 후속 강연에서 사용자 정의하는 방법을 배울 수 있습니다.

♪