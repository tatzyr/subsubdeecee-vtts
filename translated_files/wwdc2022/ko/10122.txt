10122

램: 안녕. 내 이름은 램이야.

저는 계정 경험 팀의 엔지니어입니다.

저는 제 동료 패트릭과 함께 앱에 대한 Apple 로그인 경험을 향상시킬 수 있는 방법에 대해 이야기할 것입니다.

iOS 13에서 Apple로 로그인이 도입되었기 때문에 사람들은 빠르고 쉬운 계정 설정과 로그인을 좋아합니다.

단 몇 줄의 코드로, 양식이나 비밀번호 없이 빠른 원탭 계정 설정을 활성화할 수 있습니다.

모든 Apple 계정 로그인은 이미 사용자의 Apple ID를 보호하는 데 사용되는 강력한 이중 인증으로 보호됩니다.

사용자와 소통해야 하는 경우, Apple로 로그인하면 작동하는 이메일 주소를 제공합니다.

추가 확인이 필요하지 않습니다.

Apple로 로그인은 또한 사용자가 실제로 얼마나 진짜일 가능성에 대한 지표를 제공한다.

이것은 당신이 사기와 싸우는 데 도움이 될 수 있습니다.

그리고 Apple로 로그인은 직장과 학교에 사용하는 관리되는 Apple ID를 포함하여 어디에서나 작동합니다.

앱을 직장 및 학교 계정과 통합하는 방법에 대해 자세히 알아보려면, "Discover Sign in with Apple at Work & School" 세션을 확인하세요.

이 세션에서, 우리는 Apple로 로그인 경험을 향상시키고 간소화하는 방법에 대해 이야기할 것입니다.

먼저, 앱에서 기존 자격 증명을 확인하여 계정 중복을 방지하는 방법에 대해 논의하겠습니다.

다음으로, Apple ID 자격 증명에 대해 자세히 살펴본 다음, 자격 증명 변경을 모니터링하고 계정 삭제와 같은 시나리오를 처리하는 방법에 대해 논의할 것입니다.

그리고 마지막으로, 패트릭은 웹 및 기타 플랫폼에서 Apple과 로그인을 통합하는 방법에 대해 논의할 것이다.

시작하자.

Apple로 로그인은 전통적인 사용자 이름 및 암호 기반 인증에 대한 편리하고 안전한 대안이지만, 사용자는 여전히 암호로 잠금 해제된 계정을 가질 수 있습니다.

따라서 사용자가 이미 자신에게 맞는 계정을 가지고 있다면, 앱에 대한 두 번째 계정을 만들지 않는 것이 중요합니다.

로그인하는 동안 누군가가 올바른 결정을 내릴 수 있도록 어떻게 안내할 수 있는지 알아보겠습니다.

이것은 Apple로 로그인을 사용하는 샘플 앱인 Juice입니다.

이 비디오의 관련 링크에서 소스 코드를 찾을 수 있습니다.

전통적인 이메일과 비밀번호를 사용하거나 Apple로 로그인을 사용하여 Juice에 로그인할 수 있습니다.

사용자가 이미 이러한 자격 증명 중 하나를 가지고 있다면, 올바른 계정에 로그인하는 데 도움을 줄 수 있습니다.

우선, 기존 비밀번호 자격 증명이 로그인 화면의 키보드에 표시되도록 비밀번호 자동 완성을 구현해야 합니다.

이렇게 하면, 사용자는 한 번의 탭으로 자격 증명을 자동으로 채울 수 있습니다.

또한, 사용자에게 비밀번호 기반 계정을 Apple로 로그인하도록 제공해야 합니다.

업그레이드되면, 사용자는 보안이 내장된 계정을 받게 되며, 기억해야 할 비밀번호가 하나 줄어듭니다.

이것은 계정 인증 수정 확장을 사용하여 구현됩니다.

확장 기반 API는 사용자가 Apple로 로그인을 사용하여 로그인하는 방식을 업그레이드할 수 있는 원활한 경험을 제공합니다.

사용자 계정에 대한 보안 업그레이드를 제공하는 방법에 대한 자세한 내용은 "Apple로 로그인을 최대한 활용" 및 "원 탭 계정 보안 업그레이드" 문서를 확인하세요.

비밀번호 자동 완성을 제공하는 것 외에도, 앱이 실행되자마자 기존 자격 증명을 제시함으로써 한 걸음 더 나아갈 수 있습니다.

이렇게 하면, 사용자는 로그인 화면에 도달하기 전에 올바른 계정을 사용하여 로그인할 수 있습니다.

인증 서비스 API는 이런 식으로 정말 유연하다.

사용자가 Apple 자격 증명으로 로그인을 만들 수 있도록 허용하는 것 외에도, API는 비밀번호 기반 자격 증명을 포함한 기존 자격 증명을 제시할 수 있습니다.

이것을 채택하는 것은 정말 쉽다.

이것을 달성하는 방법에 대한 몇 가지 코드를 안내해 드리겠습니다.

이미 인증 서비스 API를 사용하고 있다면, 이 코드는 매우 친숙해야 합니다.

ASAuthorizationController의 인스턴스를 만드는 것으로 시작하고 ASAuthorizationAppleIDProvider와 ASAuthorizationPasswordProvider를 인증 요청 배열에 모두 포함합니다.

그런 다음 인터페이스를 제시하는 데 도움이 되도록 대리인과 객체를 설정해야 합니다.

그리고 마지막으로, 인증 컨트롤러에서 preferImmediatelyAvailableCredentials 옵션을 사용하여 performRequests를 호출해야 합니다.

이 옵션은 iOS 16의 새로운 기능입니다.

그것은 당신이 장치에서 즉시 사용할 수 있는 자격 증명만 원한다는 것을 시스템에 알려줍니다.

그것은 특히 앱 출시에 호출되도록 의도되었다.

이전 iOS 버전을 지원하려면, performRequests를 사용할 수 있습니다.

이렇게 하면, 기존 자격 증명 목록이 표시됩니다.

사용자는 이제 Apple 자격 증명으로 기존 로그인 또는 기존 비밀번호 자격 증명을 선택할 수 있습니다.

사용자가 자격 증명을 선택한 후, 시스템은 ASAuthorizationController 대리인에 대해 didCompleteWithAuthorization을 호출할 것이다.

사용자가 Apple 계정으로 로그인을 선택한 경우, appleIDCredential을 계속 사용할 수 있습니다.

사용자가 비밀번호 기반 계정을 선택한 경우, 반환된 비밀번호 자격 증명으로 로그인합니다.

사용자에게 기존 자격 증명이 없는 경우, API는 사용자에게 Apple 계정으로 로그인을 생성하도록 표시하지 않습니다.

대신, 시스템은 didCompleteWithError를 호출할 것이다.

그러한 시나리오에서 표준 로그인 흐름을 보여주는 것으로 되돌아가야 합니다.

그건 그렇고, 동일한 인증 서비스 API는 암호키에서도 원활하게 작동합니다.

비밀번호를 대체하는 차세대 인증 기술인 passkeys에 대해 자세히 알아보려면, "Meet passkeys" 세션을 확인하세요.

단 몇 줄의 코드로, 당신은 로그인 경험을 최대한 활용할 수 있습니다.

이제 사용자가 올바른 계정을 선택할 수 있도록 도울 수 있으며, 이것이 시스템에서 중복 계정이 생성되는 것을 방지할 수 있기를 바랍니다.

다음으로, Apple ID 자격 증명에 대해 자세히 알아보고 싶습니다.

아시다시피, Apple로 로그인을 사용하여 성공적인 인증 후 받는 응답은 ASAuthorizationAppleIDCredential 객체입니다.

사용자, fullName, 이메일, realUserStatus, identityToken 및 authorizationCode와 같은 값이 포함되어 있습니다.

내가 그들 각각을 간략하게 다룰게.

사용자는 독특하고 안정적인 식별자이다.

개발자 팀의 모든 앱에서 동일한 식별자입니다.

이것을 사용하여 시스템에서 사용자를 고유하게 식별하세요.

필요한 경우에만 전체 이름을 요청해야 합니다.

요청하면, 사용자는 원하는 이름을 공유할 수 있습니다.

사용자와 소통하고 싶다면, 이메일을 요청해야 합니다.

요청 시, 사용자는 이메일 주소를 공유할 수 있는 두 가지 옵션이 있습니다.

한 가지 옵션은 Apple ID와 연결된 이메일을 공유하는 것입니다.

다른 옵션은 "내 이메일 숨기기" 기능을 사용하는 것이다.

이것은 받은 편지함으로 연결되는 숨겨진 이메일 주소를 만듭니다.

그것은 양방향 릴레이이기 때문에, 답장도 처리할 수 있다.

어떤 옵션을 선택하든, 이메일 주소는 이전에 Apple에 의해 확인되었으며, 사용할 준비가 되었습니다.

또한, 모든 계정에 관련 이메일이 있는 것은 아니므로, 요청했더라도 이메일에 대한 가치가 없는 시나리오를 처리할 준비를 하세요.

RealUserStatus는 사용자가 실제일 가능성에 대한 높은 신뢰도 지표이다.

사용자의 개인 정보를 유지하면서 온디바이스 기계 학습, 계정 기록 및 하드웨어 증명을 사용하여 계산됩니다.

realUserStatus에는 세 가지 유형이 있습니다.

"아마도 진짜"는 사용자가 진짜 사람처럼 보인다는 것을 의미한다.

이 사용자에게 CAPTCHA와 같은 추가 사기 확인 확인을 건너뛰는 것과 같은 최고의 경험을 제공하십시오.

"알 수 없음"은 시스템이 사용자가 실제 사람인지 여부를 결정하지 않은 경우입니다.

추가 확인 단계가 필요한 제한된 정보가 있는 모든 계정과 마찬가지로 이 사용자를 신뢰하십시오.

사용자는 여전히 진짜일 수 있으므로, 앱을 사용하는 것을 차단하지 마세요.

그리고 마지막으로, "지원되지 않음"은 시스템이 이 결정을 내릴 수 없다는 것을 의미한다.

잠시 시간을 내어 fullName, 이메일 및 realUserStatus와 같은 속성은 계정이 처음 생성될 때만 반환된다는 것을 말해야 합니다.

후속 로그인 시 반환되지 않으므로, 시스템에서 계정이 생성되었는지 확인할 수 있을 때까지 fullName 및 이메일과 같은 속성을 안전하게 캐시해야 합니다.

identityToken은 사용자 정보를 포함하여 앱 서버에 필요한 대부분의 데이터를 포함하는 JSON 웹 토큰입니다.

이것은 인증에 대한 업계 표준 접근 방식이다.

JSON 웹 토큰 또는 JWT는 세 부분으로 구성되어 있습니다: base-64 URL로 인코딩된 헤더, base-64 URL로 인코딩된 페이로드 및 Apple이 서명한 서명.

응답이 변조되지 않았고 실제로 Apple ID 서버에서 왔는지 확인하기 위해 Apple의 공개 키로 서명을 확인해야 합니다.

앱 서버가 토큰의 유효성을 확인하는 것도 똑같이 중요합니다.

페이로드를 디코딩하면, 발행인이 appleid.apple.com인지 확인하고, 청중 필드가 앱의 번들 식별자인지 확인한 다음, 토큰이 유효한지 알 수 있도록 만료 타임스탬프가 현재 시간보다 큰지 확인하십시오.

제목은 당신의 사용자 식별자가 될 것입니다.

사용자의 이메일 주소를 요청했다면, 그것도 포함될 것입니다.

당신은 또한 실제 사용자 상태를 찾을 수 있습니다.

그 값은 "unsupported"의 경우 0, "unknown"의 경우 1, "아마도 real"의 경우 2가 될 것이다.

그리고 마지막으로, nonce가 승인 요청을 생성하기 전에 생성된 것과 동일한지 확인하십시오.

Nonce와 리플레이 공격을 완화하기 위해 인증 프로세스를 보호하는 방법에 대한 자세한 내용은 "Apple로 로그인을 최대한 활용하세요" 세션을 확인하세요.

AuthorizationCode는 새로 고침 토큰을 대가로 Apple ID 서버를 제공할 수 있는 수명이 짧은 일회용 토큰입니다.

만약 당신의 시스템이 이미 OAuth 2.0과 같은 개방형 표준을 사용하고 있다면, 이것은 당신에게 친숙할 것입니다.

새로 고침 토큰을 생성하려면, 인증/토큰 엔드포인트에 사후 요청을 보내야 합니다.

방금 받은 인증 코드와 함께 클라이언트 ID와 클라이언트 비밀을 전달합니다.

클라이언트 비밀을 만드는 방법에 대한 자세한 설명은 Apple Developer 문서에서 확인할 수 있습니다.

응답에서, 당신은 새로 고침 토큰, 액세스 토큰, 그리고 이전에 받은 것과 유사한 새로운 ID 토큰을 받게 될 것입니다.

만료된 액세스 토큰이 있는 경우, 새로 고침 토큰을 사용하여 동일한 엔드포인트를 사용하여 새 액세스 토큰을 얻을 수 있습니다.

무효화될 때까지 동일한 새로 고침 토큰을 계속 사용할 수도 있습니다.

토큰 확인이 실패하거나 사용자의 세션에 변경 사항이 있는 경우 새로 고침 토큰이 무효화될 수 있습니다.

사용자 세션에 대해 말하자면, 다음으로, 자격 증명 상태에 대한 변경 사항을 처리하고 모니터링하는 것에 대해 이야기하겠습니다.

신원 토큰을 확인한 후, 앱은 사용자 세션을 관리할 책임이 있습니다.

사용자 세션 변경을 유발할 수 있는 다양한 시나리오가 있습니다.

예를 들어, 사용자는 설정에서 앱에서 Apple ID 사용을 중단하거나 장치에서 로그아웃했을 수 있습니다.

세션 변경을 정상적으로 처리하려면 ASAuthorizationAppleIDProvider에서 getCredentialState(forUserID:)를 호출하십시오.

이 API는 앱이 실행되자마자 또는 상태를 확인하고 싶은 지점에서 호출하는 것이 좋습니다.

또한 자격 증명이 취소될 때 앱이 알림을 받을 수 있도록 자격 증명RevokedNotification을 준수해야 합니다.

상태의 변화를 관찰하면, 다른 사용자가 로그인하고 앱에서 현재 사용자에게 로그인했다고 가정해야 합니다.

앱 서버가 있다면, 서버 간 알림을 구독해야 합니다.

당신의 서버는 당신의 사용자와 그들의 계정에 대한 중요한 업데이트를 받게 될 것입니다.

알림은 다음 시나리오에 대해 각 앱 그룹에 전송됩니다: 사용자가 메일 전달 기본 설정을 비활성화하거나 활성화할 때; 사용자가 앱에서 Apple ID 사용을 중단할 때; 또는 사용자가 Apple ID를 영구적으로 삭제할 때.

알림 수신을 시작하려면, 먼저 Apple Developer 포털에 엔드포인트 URL을 등록해야 합니다.

모든 이벤트는 동일한 엔드포인트 URL에 도착합니다.

이벤트는 Apple이 서명한 JSON 웹 토큰으로 전송됩니다.

메일 전달이 비활성화된 경우, JWT의 페이로드에서 이메일 비활성화 이벤트를 받게 됩니다.

사용자가 앱에서 Apple ID 사용을 중단하면, 동의가 취소된 이벤트를 받게 됩니다.

이 이벤트를 받을 때 활성 사용자 세션을 무효화하는 것이 중요합니다.

그리고 사용자가 Apple ID를 삭제하면, 계정 삭제 이벤트를 받게 됩니다.

다시 말하지만, 활성 사용자 세션을 무효화하고 프로세스에 따라 계정을 업데이트해야 합니다.

이제 계정 삭제에 집중하고 싶습니다.

계정은 우리의 정체성의 일부이며, 우리는 가장 개인적이고 사적인 데이터 중 일부를 관리하기 위해 그것들을 사용합니다.

누군가는 자신의 계정을 삭제하고 싶을 수도 있으며, 당신은 앱에서 이것을 지원해야 합니다.

앱에서 계정 삭제를 시작하는 방법을 제공해야 하며, 전체 삭제 프로세스를 관리하는 것은 귀하의 책임입니다.

사용자 정보를 저장하는 앱 서버가 있는 경우, 일반적으로 앱은 서버에 사용자 계정을 삭제하도록 알립니다.

이제 삭제 과정의 일부로 Apple로 로그인을 포함할 수 있습니다.

이것은 서버가 앱과 연결된 계정을 삭제하는 데 사용할 수 있는 새로운 REST 엔드포인트를 사용하여 수행됩니다.

이 API를 간략하게 안내해 드리겠습니다.

계정을 삭제하려면, 유효한 새로 고침 토큰이나 사용자를 위한 유효한 액세스 토큰이 있어야 합니다.

토큰이 없다면, 인증/토큰 엔드포인트를 사용하여 생성할 수 있습니다.

토큰 중 하나를 갖게 되면, 필요한 매개 변수와 함께 auth/revoke 엔드포인트를 사용할 수 있습니다.

새로 고침 토큰을 사용할 때, 토큰 유형을 REFRESH_TOKEN으로 설정하세요.

액세스 토큰을 사용하여 삭제하려면, 토큰 유형을 ACCESS_TOKEN으로 설정하세요.

성공적인 응답을 받으면, 토큰과 사용자의 활성 세션은 즉시 무효화됩니다.

일단 삭제되면, 앱으로 돌아가서 Apple로 로그인을 사용하는 사용자는 앱으로 계정을 처음 만들었을 때와 비슷한 경험을 하게 될 것입니다.

그것으로, 나는 로그아웃하고 내 동료 패트릭에게 전달하여 웹 및 기타 플랫폼에서 Apple과 로그인을 사용하는 방법에 대해 논의할 것이다.

패트릭: 고마워, 램!

사람들은 Apple로 로그인이 모든 Apple 플랫폼에서 원활하게 작동하는 방식을 좋아합니다.

하지만 그건 거기서 멈추지 않아.

Apple로 로그인하면 웹 및 기타 플랫폼에서도 원활하게 작동합니다.

웹 및 기타 플랫폼을 지원하기 위해 Apple로 로그인 경험을 향상시킬 수 있는 방법에 대해 논의해 봅시다.

우리는 Ram이 이전에 당신에게 소개한 Juice라는 기존 iOS 앱을 가지고 있습니다.

우리는 웹으로 확장하여 더 많은 사용자에게 주스를 가져오고 싶습니다.

비슷한 앱을 함께 그룹화하는 방법에 대해 논의하는 것으로 시작합시다.

사용자 경험을 간소화하기 위해 관련 앱을 함께 그룹화하는 것이 좋습니다.

관련 앱을 함께 그룹화함으로써, 사용자는 앱과 정보를 공유하기 위해 한 번만 동의하면 됩니다.

예를 들어, 앱은 iOS와 macOS에서 사용할 수 있지만 각 플랫폼에 대해 다른 번들 식별자를 사용할 수 있습니다.

이 앱들을 함께 그룹화하는 것이 좋습니다.

Apple로 로그인을 사용할 때, 사용자는 기본 앱으로 설정한 앱의 앱 아이콘을 볼 수 있습니다.

웹사이트에서 Apple로 로그인을 지원하기 위해 서비스 ID를 구성하는 방법을 알아봅시다.

시작하려면, Apple 개발자 포털에 로그인하고 "인증서, 식별자 및 프로필"로 이동하십시오.

서비스 ID 옆에 있는 라디오 버튼을 선택한 다음 "계속"을 클릭하세요.

서비스에 대한 설명을 입력하십시오.

서비스에 대한 고유 식별자를 입력하고 계속을 클릭하세요.

Apple로 로그인 옆에 있는 확인란을 클릭한 다음 구성 버튼을 클릭하세요.

웹 인증 구성 화면의 드롭다운 메뉴에서 기본 앱 ID를 선택하세요.

다음으로, 당신의 웹사이트가 Apple로 로그인을 지원하는 데 사용할 도메인과 하위 도메인을 입력하십시오.

마지막으로, Apple이 성공적인 승인 후 사용자를 앱이나 웹사이트로 다시 리디렉션할 수 있도록 리디렉션 URL을 입력하십시오.

그게 다야!

웹사이트에서 Apple로 로그인을 지원하도록 서비스 ID를 구성했습니다.

웹사이트가 Apple로 로그인을 지원하는 것을 사용자에게 보여주려면 버튼이 필요합니다.

Apple은 Apple 버튼 이미지로 로그인을 생성하기 위해 고도로 구성 가능한 버튼 API를 제공합니다.

이것을 사용하여 앱이나 웹사이트에 원하는 버튼을 사용자 정의하고 삽입하세요.

Apple JS로 로그인은 웹에서 Apple과 로그인을 훨씬 더 쉽게 통합할 수 있는 간단한 자바스크립트 프레임워크입니다.

애플리케이션이나 웹사이트에서, Apple JavaScript 프레임워크로 로그인을 포함하는 것으로 시작하세요.

이 간단한 API를 사용하면 사용자를 인증하고 하나의 간단한 DIV로 만들 수 있는 Apple로 로그인 버튼과 같은 다른 자산을 얻을 수 있습니다.

버튼의 속성을 수정하여 앱이나 웹사이트에 맞게 버튼을 사용자 정의할 수도 있습니다.

예를 들어, 현재 속성을 사용하면 테두리와 기본 모서리 반경이 있는 흰색 "Apple로 로그인" 버튼을 얻을 수 있습니다.

데이터 색상 속성을 변경함으로써, 우리는 버튼의 다른 배경색을 선택할 수 있습니다.

데이터 유형을 "계속"으로 변경하면, 버튼 텍스트가 "Apple과 계속"으로 업데이트됩니다.

또는, 데이터 모드 속성을 로고 전용으로 설정하여 로고 전용 버튼을 만들 수 있습니다.

Apple Javascript Button API로 로그인은 훨씬 더 사용자 정의 가능한 속성을 제공합니다.

Apple로 로그인 버튼 리소스를 참조하여 이러한 많은 옵션을 쉽게 구성할 수 있습니다.

REST API를 사용하여 Apple로 로그인 버튼을 생성하려면, Apple ID 버튼 엔드포인트 중 하나를 사용하여 버튼을 생성할 수 있습니다.

중앙 정렬, 왼쪽 정렬 및 로고 버튼에는 별도의 엔드포인트가 있습니다.

쿼리 매개 변수를 사용하여 버튼을 사용자 정의할 수 있습니다.

이 예시 요청에서, 저는 테두리가 있는 Apple 버튼으로 흰색 로그인을 사용자 정의합니다.

PNG 이미지로 사용자 지정 버튼으로 응답을 받았습니다.

이제 Apple로 로그인 버튼을 개인화했으므로, 사용자를 인증할 때입니다.

필요한 매개 변수가 포함된 승인 요청을 Apple에 보내야 합니다.

이것들은 사용자가 성공적으로 로그인하기 위해 필요한 매개 변수입니다.

이미 Apple 플랫폼에서 Apple로 로그인을 구현했기 때문에, 이러한 매개 변수는 매우 친숙합니다.

먼저, 우리는 "clientID"를 설정해야 합니다.

이것은 앱이나 웹사이트를 위해 Apple Developer Portal에서 만든 서비스 ID가 될 것입니다.

다음으로, 앱이나 웹사이트에 이메일이나 이름이 필요한 경우, "범위" 매개 변수를 입력하십시오.

여러 범위를 요청하는 경우, 공간을 사용하여 각 범위를 분리하십시오.

필요한 데이터만 요청하는 것이 중요합니다.

"redirectURI" 매개 변수는 이전에 Apple Developer Portal에 등록한 URL을 추가하고 웹사이트에서 사용자를 어디로 안내할지 Apple에 알려주는 곳입니다.

요청을 확보하기 위해 "state"와 "nonce"를 추가할 수도 있습니다.

그리고 마지막으로, "usePopup" 매개 변수를 사용하면 별도의 팝업 창에 로그인 화면을 표시하거나 기존 창을 Apple 로그인 웹사이트로 리디렉션하도록 선택할 수 있습니다.

누군가가 사파리를 사용하고 있다면, 그들은 당신의 웹사이트에 로그인할 수 있는 일류 경험을 제공하는 이와 같은 기본 화면을 보게 될 것입니다.

Apple ID 서버가 인증 요청을 처리한 후, 인증 결과가 포함된 DOM 이벤트를 받게 됩니다.

성공 응답을 처리하려면, "AppleIDSignInOnSuccess"에 대한 이벤트 리스너를 추가하세요.

실패 응답을 처리하려면, "AppleIDSignInOnFailure"에 대한 이벤트 리스너를 추가하십시오.

인증이 성공했다면, 요청 시 인증 코드, 신원 토큰 및 사용자 정보가 포함된 응답을 받게 될 것입니다.

이것은 당신이 이미 Apple 플랫폼에서 익숙한 반응과 비슷합니다.

REST API를 사용하여 Apple ID 서버와 직접 통합하려면, 필요한 매개 변수를 사용하여 인증 엔드포인트로 인증 요청을 전달하십시오.

인증이 성공하면, 인증 코드, 신원 토큰 및 사용자 정보가 포함된 응답을 받게 됩니다.

이것은 당신이 이미 애플 플랫폼에서 익숙한 반응과 매우 유사합니다.

그게 다야!

당신은 당신의 웹사이트에서 Apple로 로그인을 성공적으로 채택했습니다!

마무리하기 위해, 저는 Apple로 로그인을 구현하는 동안 명심해야 할 몇 가지 중요한 사항을 강조하고 싶습니다.

앱에 중요한 계정 기반 기능이 필요하지 않는 한, 사람들이 로그인 없이 앱을 사용할 수 있도록 하세요.

예를 들어, 사용자가 Apple Pay를 사용하여 상품을 구매할 수 있도록 허용한 다음 선택적으로 구매가 완료된 후 계정에 구매를 연결하도록 제안할 수 있습니다.

기존 사용자에게 사용자 이름과 비밀번호 인증에서 Apple로 로그인으로 전환하여 계정 보안을 업그레이드할 수 있는 기능을 제공합니다.

사용자를 식별하기 위해 고유 식별자가 필요하다면, 이름이나 이메일을 수집하지 마세요.

그리고 Apple로 로그인을 통해 이메일을 수집하는 경우, 사용자의 선택을 존중해야 합니다.

추가 이메일을 요청해서는 안 됩니다.

앱이나 웹사이트를 사용할 수 있는 모든 플랫폼에서 Apple로 로그인을 구현하는 것이 중요합니다.

사용자는 여러 플랫폼을 사용할 수 있으며, 모든 곳에서 Apple로 로그인을 사용할 것으로 예상됩니다.

우리는 당신이 당신의 앱에서 Apple로 로그인으로 무엇을 하는지 보게 되어 정말 기쁘고, 당신의 피드백을 기대합니다.

시청해 주셔서 감사합니다, 그리고 남은 WWDC를 즐기세요!

.