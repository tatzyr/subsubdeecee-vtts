10078

♪ 부드러운 기악 힙합 음악 ♪

♪

안녕하세요, 저는 Vidhi Goel입니다. 이 비디오에서는 앱의 네트워킹 지연을 줄이고 더 빠르게 반응하도록 하는 방법에 대해 이야기하겠습니다.

먼저, 대기 시간을 줄이는 것이 앱을 반응형으로 만드는 데 왜 중요한지 설명하겠습니다.

다음으로, 불필요한 지연을 없애기 위해 앱과 서버에서 할 수 있는 일의 목록을 검토하겠습니다.

마지막으로, 네트워크 자체의 지연을 줄이기 위해 당신이 무엇을 할 수 있는지 보여드리겠습니다.

네트워크 대기 시간은 데이터가 한 엔드포인트에서 다른 엔드포인트로 이동하는 데 걸리는 시간이다.

그것은 당신의 앱에 콘텐츠가 얼마나 빨리 전달될 수 있는지를 결정합니다.

네트워킹을 사용하는 모든 앱은 느린 네트워크 트랜잭션의 영향을 받아 앱 경험이 좋지 않을 수 있습니다.

예를 들어, 화상 통화는 때때로 멈추거나 지연될 수 있으며, 이는 회의를 방해할 수 있다.

이 문제를 해결하기 위해, 사람들은 종종 대역폭을 업그레이드하기 위해 서비스 제공 업체에 전화하지만, 문제는 여전히 존재한다.

이 문제의 근본 원인을 파악하려면, 앱의 패킷이 네트워크에서 어떻게 이동하는지 이해해야 합니다.

앱이나 프레임워크가 서버에서 데이터를 요청할 때, 패킷은 네트워킹 스택에 의해 전송됩니다.

종종 패킷이 네트워크의 지연 없이 서버로 직접 간다고 가정한다.

하지만, 실제로, 네트워크의 가장 느린 링크는 보통 처리할 패킷의 큰 대기열을 가지고 있다.

그래서, 앱의 패킷은 실제로 그 앞에 있는 패킷이 처리될 때까지 이 큰 대기열 뒤에서 기다립니다.

가장 느린 링크에서 이 대기열은 앱과 서버 간의 각 왕복 여행 기간을 증가시킵니다.

이 문제는 앱의 요청에 대한 첫 번째 응답을 얻기 위해 여러 번 왕복해야 할 때 악화됩니다.

예를 들어, TCP를 통해 TLS 1.2를 사용할 때 첫 번째 응답 패킷을 얻는 시간은 각 왕복에 네 번의 여행을 곱한 기간이다.

각 왕복 시간이 이미 네트워크에서 대기열에 의해 부풀려졌다는 점을 감안할 때, 그 결과 총 시간은 단순히 너무 길다.

앱의 반응성을 결정하기 위해 함께 곱하는 두 가지 요소가 있습니다: 각 왕복 여행의 기간과 왕복 횟수.

이것들을 줄이면 앱의 대기 시간이 줄어들고 앱의 반응성이 높아집니다.

대역폭 증가와 페이지 로드 시간에 대한 대기 시간 감소의 영향을 조사하는 연구가 있었다.

첫 번째 테스트에서, 대기 시간은 고정된 상태로 유지되고 대역폭은 1에서 10Mbps로 점진적으로 증가한다.

처음에는 대역폭을 1에서 2Mbps로 늘리면 페이지 로드 시간이 거의 40% 줄어듭니다.

하지만 4Mbps 이후, 각각의 점진적인 증가는 페이지 로딩 시간에 거의 개선되지 않는다.

이것이 기가비트 인터넷으로 업그레이드한 후에도 앱이 느려질 수 있는 이유이다.

반면에, 대기 시간 테스트의 결과는 대기 시간이 20밀리초 감소할 때마다 페이지 로드 시간이 선형적으로 개선된다는 것을 보여준다.

그리고 이러한 결과는 앱의 모든 네트워크 활동에 적용됩니다.

이제, 대기 시간을 줄이고 앱을 더 빠르게 만들기 위해 취할 수 있는 몇 가지 간단한 조치를 검토하겠습니다.

IPv6, TLS 1.3 및 HTTP/3과 같은 최신 프로토콜을 채택하여 앱의 대기 시간을 크게 줄일 수 있습니다.

그리고 앱에서 URLSession과 Network.framework API를 사용하기만 하면 이러한 프로토콜이 서버에서 활성화되면 자동으로 사용됩니다.

출시 이후, 우리는 HTTP/3 사용량이 지속적으로 증가하는 것을 보았고, 단 1년 이내에 웹 트래픽의 20%가 이미 HTTP/3를 사용하고 있으며, 계속 증가하고 있다.

다른 HTTP 버전에 대한 사파리 트래픽을 비교할 때, HTTP/3은 그 중 가장 빠르다.

HTTP/3 요청은 중앙값 요청 완료 시간을 왕복 시간의 배수로 볼 때 HTTP/1에 비해 절반이 조금 넘는 시간이 걸린다.

이것은 당신의 앱의 요청이 훨씬 더 빨리 완료될 것이라는 것을 의미합니다.

장치가 Wi-Fi에서 셀룰러로 이동하면, 새로운 연결을 다시 설정하는 데 시간이 걸리고 애플리케이션이 지연될 수 있습니다.

연결 마이그레이션을 사용하면 그러한 스톨이 제거됩니다.

선택하려면, URLSession 구성 또는 NWParameters에서 multipathServiceType 속성을 .handover로 설정하십시오.

이 옵션을 활성화하고 앱에서 작동하는지 확인하세요.

UDP를 직접 사용하는 자체 프로토콜을 설계하는 경우, iOS 16과 macOS Ventura는 데이터그램을 보내는 더 나은 방법을 소개합니다.

QUIC 데이터그램은 일반 UDP에 비해 많은 이점을 제공하며, 가장 중요한 것은 QUIC 데이터그램이 네트워크의 혼잡에 반응하여 왕복 시간을 낮게 유지하고 패킷 손실을 줄이는 것입니다.

클라이언트를 선택하려면, QUIC 옵션에서 isDatagram을 true로 설정하고 사용할 최대 데이터그램 프레임 크기를 설정하십시오.

데이터그램 흐름을 만든 후, 다른 QUIC 스트림과 마찬가지로 보내고 받을 수 있습니다.

이제 대기 시간을 줄이기 위해 앱에서 무엇을 해야 하는지 알 수 있습니다.

다음으로, 서버가 앱의 반응성에 어떤 영향을 미치는지 설명하겠습니다.

종종 최고급 하드웨어에서 실행되지만, 서버가 실제로 앱의 속도가 느려지는 이유가 될 수 있습니다.

우리는 macOS Monterey에 네트워크 품질 도구를 도입했으며, 이 도구를 사용하여 서비스 제공 업체의 네트워크와 서버에서 버퍼 팽창을 측정할 수 있습니다.

네트워크 품질 도구의 목적지 역할을 하도록 서버를 구성해야 합니다.

그렇게 하면, 먼저 Apple의 기본 서버에 대해 그리고 나서 직접 구성된 서버에 대해 networkQuality 도구를 실행하세요.

기본 서버를 사용하여 도구가 좋은 점수를 받았지만, 자신의 서버와 대화할 때 그렇게 좋지 않다면, 서버의 응답성을 향상시킬 여지가 있을 수 있습니다.

이제, 여러분 모두가 지금 하고 있는 것을 개선하기 위해 이 기술을 사용한 예를 보여드리겠습니다 - 스트리밍 비디오.

당신은 비디오에서 다른 장소로 건너뛰고 그것이 리버퍼되는 동안 오랫동안 기다리게 되는 경험을 했을 수도 있습니다.

그래서, 우리는 무작위 접근이 느린 이유를 조사했다.

우리는 네트워크 품질 도구를 사용하여 스트리밍 서버의 동작을 테스트했고 응답성 점수가 좋지 않다는 것을 발견했습니다.

오른쪽에서, 나는 WWDC 비디오를 스트리밍했다.

그리고 나서, 나는 비디오에서 건너뛰었다.

비디오가 다시 버퍼링되는 동안 화면에는 아무것도 표시되지 않았다.

몇 초 후, 비디오가 나타났다.

macOS의 네트워크 품질 도구의 상세한 출력의 도움으로, 우리는 서버에 거대한 대기열이 있다는 것을 발견했다.

그래서 우리는 서버 구성을 살펴보았다.

특히 우리는 각각 4MB, 256KB 및 4MB로 구성된 TCP, TLS 및 HTTP 버퍼 크기를 살펴보았습니다.

RAM이 풍부하기 때문에 버퍼는 거대했다.

하지만 약간의 버퍼링이 좋다고 해서, 항상 더 많은 버퍼링이 더 낫다는 것을 의미하지는 않는다.

우리의 응답성 측정은 이 정확한 문제를 강조했다 - 새로 생성된 패킷은 이 큰 버퍼의 오래된 데이터 뒤에 대기열에 있었고, 이것은 가장 최근의 패킷을 전달하는 데 많은 추가 지연을 일으켰다.

그래서, 우리는 버퍼 크기를 HTTP의 경우 256KB, TLS의 경우 16KB, TCP의 경우 128KB로 줄였습니다.

이것은 구성된 옵션을 보여주는 아파치 트래픽 서버의 구성 파일입니다.

TCP가 전송되지 않은 저수 마크는 버퍼링을 낮출 수 있는 다른 옵션과 함께 128KB로 설정되었다.

TLS의 경우 동적 레코드 크기를 활성화하고 HTTP/2의 경우 저수 마크와 버퍼 블록 크기를 줄였습니다.

아파치 트래픽 서버에 이러한 구성을 사용하는 것이 좋습니다. 다른 웹 서버를 사용하는 경우 동등한 옵션을 찾으십시오.

이러한 변경을 한 후, 우리는 네트워크 품질 도구를 다시 실행했다.

그리고 이번에 우리는 높은 RPM 점수를 받았어!

오른쪽에서, 나는 같은 비디오를 스트리밍했지만, 이번에는 건너뛰었을 때, 비디오는 즉시 재개되었다.

서버에서 불필요한 대기열을 제거함으로써, 우리는 무작위 액세스를 훨씬 더 반응적으로 만들었다.

앱이 네트워킹을 사용하는 방식에 관계없이, 서버의 이러한 변경 사항은 앱이 더 빠르게 반응하고 더 나은 사용자 경험을 제공할 수 있습니다.

그것이 당신의 앱을 개선하고 서버를 업데이트하는 방법입니다.

반응성에 큰 영향을 미치는 세 번째 요인이 있다; 네트워크 자체.

애플은 iOS 15와 macOS Monterey에 네트워크 품질 도구를 도입했다.

그 이후로, 다른 사람들은 네트워크 품질 테스트를 개발하기 위해 같은 방법론을 사용했다.

파형은 버퍼블로트 테스트를 시작했다.

Go로 작성된 반응성 테스트의 오픈 소스 구현이 있습니다.

그리고 Ookla는 Speedtest 앱에 반응성 측정을 추가했다.

Ookla의 앱은 왕복 시간을 밀리초 단위로 보여주며, 60,000을 그 숫자로 나누면 분당 왕복 횟수 또는 RPM을 얻을 수 있습니다.

이 도구를 사용하여 자신의 네트워크가 얼마나 잘 작동하는지 측정할 수 있습니다.

네트워크의 지연을 이해하는 가장 좋은 방법은 지연에 민감한 응용 프로그램을 사용하는 것이다.

그래서, 원격 기계에 대한 내 화면 공유 경험을 보여줄게.

나는 그 네트워크를 공유하는 다른 장치의 트래픽과 함께 대표적인 액세스 네트워크를 모방하기 위해 네트워크 조건을 설정했다.

여기서, 저는 화면 공유를 사용하여 원격 컴퓨터에 로그인했습니다.

나는 다른 파인더 메뉴를 클릭했지만 각 메뉴의 표시가 매우 느렸다.

이 상호 작용이 얼마나 지연되었는지 확인하기 위해, 나는 로컬 컴퓨터에 시간을 표시하는 앱을 실행했고, 원격 컴퓨터에서 같은 앱을 실행했다.

이 컴퓨터의 시간이 동기화되어 있음에도 불구하고, 내 원격 화면은 정기적으로 업데이트되지 않았고 몇 초 지연된 시간을 보여주었다.

이 업데이트가 지연된 이유는 네트워크의 가장 느린 링크에 큰 대기열이 있었고 화면 공유 앱의 패킷이 이 큰 대기열에 갇혀 있었기 때문입니다.

이 대기열 문제를 해결하기 위해, 애플은 L4S라는 새로운 기술에 대해 네트워킹 커뮤니티와 협력하고 있다.

iOS 16과 macOS Ventura에서 베타 버전으로 사용할 수 있습니다.

L4S는 대기 지연을 크게 줄이고 혼잡 손실을 제로로 달성한다.

지속적으로 짧은 대기열을 유지하기 위해, 네트워크는 패킷을 삭제하는 대신 혼잡을 명시적으로 신호하고, 발신자는 네트워크의 혼잡 피드백에 따라 전송 속도를 조정합니다.

이를 통해 패킷 손실 없이 네트워크에서 대기열을 매우 낮게 유지할 수 있으며, 앱이 매우 반응할 수 있습니다.

이제, L4S가 어떻게 화면 공유를 개선했는지 살펴봅시다.

여기서, 나는 이번을 제외하고 같은 기계와 같은 네트워크를 사용했고, L4S를 활성화했다.

내가 다른 파인더 메뉴를 클릭했을 때, 그들은 즉시 열렸다.

나는 두 기계 모두에서 타임 앱을 실행했다.

그리고 이제, 원격 화면과 로컬 기계 모두의 시간은 거의 완벽하게 동기화되어 있다.

이 기술은 단지 화면 공유를 위한 것이 아니다.

L4S는 오늘날의 모든 앱을 개선하고, 오늘날에도 불가능할 미래의 앱의 문을 열어줍니다.

이 차트는 동일한 네트워크를 공유하는 다른 장치의 트래픽과 동시에 실행되는 화면 공유 앱에서 패킷의 관찰된 평균 왕복 시간을 플로팅합니다.

고전적인 대기열과 L4S를 비교하는 것은 L4S로 왕복 시간이 크게 줄어든다는 것을 보여준다.

이것이 내 화면 공유 경험이 극적으로 개선된 주된 이유이다.

L4S로 HTTP/3 또는 QUIC를 사용하는 앱을 테스트하세요.

iOS 16의 개발자 설정 또는 macOS Ventura에서 기본 쓰기를 통해 L4S를 활성화할 수 있습니다.

리눅스 서버를 사용하여 테스트하려면, QUIC 구현은 정확한 ECN과 확장 가능한 혼잡 제어 알고리즘을 지원해야 합니다.

L4S 지원 네트워크가 배포될 때 준비가 되었는지 확인하기 위해, L4S와의 호환성을 위해 앱을 테스트하고, 발생할 수 있는 문제에 대한 피드백을 제공하십시오.

이제 당신은 대기 시간을 줄이는 것이 앱의 반응성을 향상시키는 데 중요하다는 것을 알고 있습니다.

따라서, 왕복 횟수를 줄이고 앱에 콘텐츠를 더 빠르게 전달하기 위해 HTTP/3과 QUIC를 채택하세요.

더 반응이 빠른 상호 작용을 제공하기 위해 서버에서 불필요한 대기열을 제거하세요.

개발자 설정에서 활성화하여 L4S와 앱의 호환성을 테스트하고 피드백을 제공하세요.

그리고 마지막으로, L4S 지원을 활성화하는 것에 대해 서버 공급자와 상의하세요.

봐줘서 고마워!

♪