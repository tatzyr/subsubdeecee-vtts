10117

♪ 부드러운 기악 힙합 음악 ♪

♪

케빈 페렐: 안녕하세요, 제 이름은 케빈이고, 저는 iOS 앱의 워키토키 시스템 경험을 가능하게 하는 새로운 PushToTalk 프레임워크를 작업하는 엔지니어입니다.

나중에 저는 제 동료 트레버와 함께 이 새로운 프레임워크로 앱에서 음성 통신을 향상시킬 수 있는 방법에 대해 이야기할 것입니다.

먼저, PushToTalk 프레임워크를 소개하고 그것이 당신의 앱에 어떻게 맞는지 설명하겠습니다.

다음으로, 우리는 PushToTalk을 위해 앱을 구성하는 방법을 살펴볼 것입니다.

그 후, 트레버는 프레임워크를 사용하여 오디오를 전송하고 수신하는 방법을 살펴볼 것이다.

마지막으로, Trevor는 사용자의 배터리 수명을 보존하면서 Push To Talk 사용자 경험을 향상시키기 위한 모범 사례를 마무리할 것입니다.

새로운 PushToTalk 프레임워크의 주요 기능을 소개하는 것으로 시작하겠습니다.

PushToTalk 프레임워크를 사용하면 사용자에게 워키토키 스타일 경험을 제공하는 iOS에서 새로운 수준의 오디오 통신 앱을 구축할 수 있습니다.

푸시 투 토크 앱은 건강 관리 및 응급 서비스와 같이 신속한 통신이 필수적인 분야에서 많은 용도로 사용됩니다.

훌륭한 푸시 투 토크 경험을 제공하기 위해, 사용자는 오디오 전송 기능에 빠르게 액세스하는 동시에 누가 응답하는지 볼 수 있는 방법이 필요합니다.

동시에, Push To Talk 앱은 사용자가 앱을 사용하는 동안 하루 종일 배터리 수명을 유지할 수 있도록 전력 효율적이어야 합니다.

PushToTalk 프레임워크는 사용자가 앱을 직접 실행하지 않고도 시스템의 어느 곳에서나 액세스할 수 있는 시스템 UI를 활용할 수 있는 API를 제공합니다.

시스템 UI를 사용하면 사용자가 오디오 전송을 빠르게 활성화할 수 있으며, 백그라운드에서 앱을 실행하여 오디오를 녹음하고 서버에 스트리밍할 수 있습니다.

이 시스템은 앱이 서버에서 오디오를 재생할 때 누가 말하고 있는지 보여줌으로써 사용자에게 투명성을 제공합니다.

PushToTalk 프레임워크는 새로운 오디오를 재생할 수 있을 때 앱에 알리는 새로운 푸시 알림 유형을 도입하여 이를 수행합니다.

앱이 이 알림을 받으면, 오디오를 스트리밍하고 재생할 수 있도록 백그라운드에서 시작됩니다.

PushToTalk 프레임워크는 기존 엔드투엔드 통신 솔루션 및 백엔드 인프라와 호환되도록 설계되었습니다.

앱에서 Push To Talk 워크플로우를 이미 구현했다면, PushToTalk 프레임워크를 기존 코드에 쉽게 통합할 수 있습니다.

이 프레임워크를 통해 앱은 자체 오디오 인코딩 및 스트리밍 프로세스를 구현하여 사용자 간에 오디오를 전송할 수 있습니다.

이것은 앱에서 오디오 전송을 처리하는 방법에 대한 유연성을 제공하고 다른 플랫폼과의 호환성을 가능하게 합니다.

마지막으로, 많은 푸시 투 토크 앱은 오디오 녹음 및 전송을 트리거하기 위해 무선 블루투스 액세서리에 의존한다.

앱은 CoreBluetooth 프레임워크를 사용하여 이러한 액세서리와 계속 통합할 수 있으며 PushToTalk에서 오디오 녹음을 트리거할 수 있습니다.

첫 번째 Push To Talk 앱을 구축하는 경우, 코드 설계를 시작할 때 이러한 통합 고려 사항을 염두에 두십시오.

새로운 PushToTalk 프레임워크의 코드를 살펴보기 전에, Push To Talk 경험이 앱에서 어떻게 작동할 수 있는지 보여주고 싶습니다.

트레버와 나는 푸시투톡이 어떻게 작동하는지 보여주기 위해 데모 앱을 만들었다.

시작하려면, 가입 버튼을 눌러 우리가 채널이라고 부르는 푸시 투 토크 세션에 연결할 것입니다.

채널에 가입하면, 채널의 다른 회원들에게 오디오를 전송하고 받을 수 있습니다.

트레버와 몇몇 동료들은 우리가 하루 종일 소통할 수 있도록 같은 채널에 합류했다.

마이크 버튼을 사용하여 앱에서 직접 오디오를 전송할 수 있지만, PushToTalk 프레임워크를 사용하면 시스템 어디에서나 전송 기능에 액세스할 수 있습니다.

활성 푸시 투 토크 채널이 있을 때, 파란색 알약이 상태 표시줄에 나타날 것이다.

그 알약을 탭하면 시스템 UI가 표시됩니다.

시스템 UI는 내가 가입한 Push To Talk 채널의 이름과 사용자가 채널을 빠르게 식별할 수 있도록 앱에서 제공하는 이미지를 표시합니다.

대화 버튼을 길게 누른 다음 시스템 신호음이 내가 말을 시작할 수 있음을 나타낼 때까지 기다리면 채널을 통해 오디오를 전송할 수 있습니다.

안녕, 트레버.

WWDC 슬라이드를 다룰 준비가 되셨나요? 끝났어.

트레버 셰리던: 내 장치가 케빈의 메시지를 받았을 때, 그의 이름과 이미지가 포함된 통지를 표시했고, 내가 누구에게 메시지를 받고 있는지에 대한 투명성을 제공했다.

시스템 UI를 실행하면, 내가 하고 있는 일을 멈출 필요 없이 케빈의 메시지에 빠르게 응답하거나 채널을 떠날 수 있다.

케빈을 기다리게 하고 싶지 않아서, 지금 답장할게.

안녕, 케빈. 몇 분 안에 준비할게.

끝났어.

케빈: PushToTalk 시스템 UI는 잠금 화면에서도 액세스할 수 있으므로 사용자는 장치의 잠금을 해제하지 않고도 메시지를 받고 응답할 수 있습니다.

그래, 곧 보자! 끝났어.

이제 PushToTalk의 작동 방식에 대해 논의했으므로, 자신의 앱에 프레임워크를 통합하는 방법을 검토할 것입니다.

PushToTalk 프레임워크를 지원하기 위해 Xcode 프로젝트에 몇 가지 수정이 필요합니다.

먼저, 새로운 Push To Talk 배경 모드를 추가해야 합니다.

이를 통해 Push To Talk 이벤트에 응답할 때 백그라운드에서 앱을 실행할 수 있습니다.

다음으로, 프레임워크 기능을 활성화하려면 앱에 Push To Talk 기능을 추가해야 합니다.

APNS가 수신된 오디오를 재생하기 위해 백그라운드에서 앱을 깨울 수 있도록 푸시 알림 기능이 필요합니다.

마지막으로, 앱은 사용자에게 녹음 권한을 요청하고 Info.plist 파일에 마이크 목적 문자열을 포함해야 합니다.

이제 우리는 코드를 통합할 준비가 되었습니다.

푸시 투 토크 워크플로우의 첫 번째 단계는 채널에 가입하는 것이다.

그 채널은 시스템에 대한 푸시 투 토크 세션을 대표하고 설명한다.

당신의 앱은 채널 관리자를 통해 채널과 상호 작용합니다.

채널 관리자는 앱이 채널에 가입하고 오디오 전송 및 수신과 같은 작업을 수행할 수 있는 기본 인터페이스입니다.

채널에 가입하면 Push To Talk 시스템 UI를 사용할 수 있으며 앱은 채널 수명 동안 사용할 수 있는 APNS 장치 토큰을 받습니다.

오디오를 전송하고 받기 전에 채널에 가입해야 합니다.

첫 번째 단계는 클래스 이니셜라이저를 사용하여 채널 관리자를 만드는 것이다.

이 이니셜라이저는 채널 관리자 대리자와 채널 복원 대리자를 제공해야 합니다.

이니셜라이저를 여러 번 호출하면 동일한 공유 인스턴스가 반환되지만, 채널 관리자를 인스턴스 변수에 저장하는 것이 좋습니다.

ApplicationDelegate의 didFinishLaunchingWithOptions 방법으로 앱을 시작하는 동안 가능한 한 빨리 채널 관리자를 초기화하는 것이 중요합니다.

이를 통해 채널 관리자가 빠르게 초기화되어 기존 채널을 복원할 수 있으며 백그라운드에서 실행될 때 푸시 알림이 앱으로 전달됩니다.

이제 우리는 채널에 가입할 준비가 되었습니다.

누군가가 앱에서 채널에 가입할 때, 채널을 식별하기 위해 UUID와 시스템에 채널을 설명하는 설명자를 제공해야 합니다.

이 채널의 평생 동안 관리자와 상호 작용할 때 동일한 UUID가 사용될 것이다.

설명자는 이름과 이미지를 포함한다.

채널을 나타내는 고유한 이미지를 제공하면 사용자가 시스템과 상호 작용할 때 채널을 더 쉽게 식별할 수 있습니다.

당신의 앱은 채널 관리자에서 requestJoin 메소드를 호출하여 채널에 가입합니다.

앱이 포그라운드에서 실행 중일 때만 채널에 가입할 수 있습니다.

앱이 채널에 가입하면, 채널 관리자 대리인의 didJoinChannel 메소드가 호출됩니다.

이 위임 방법은 당신의 앱이 채널에 가입했다는 표시입니다.

또한, 대리인의 수신된EphemeralPushToken 메서드는 이 장치에 Push To Talk 알림을 보내는 데 사용할 수 있는 APNS 푸시 토큰으로 호출됩니다.

이 토큰은 푸시 투 토크 채널의 수명 동안만 활성화될 것이다.

APNS 푸시 토큰은 가변 길이이며 앱에 길이를 하드코딩해서는 안 된다는 것을 명심하세요.

다른 채널이 이미 활성화되어 있을 때 채널에 가입하려고 할 때와 같이 채널 가입 요청이 실패할 수 있습니다.

이런 일이 발생하면, 오류 처리기가 호출되고 오류는 실패의 이유를 나타낼 것이다.

사용자가 채널을 떠날 때, 대리인의 didLeaveChannel 메소드가 호출될 것이다.

사용자는 앱이 프로그래밍 방식으로 탈퇴를 요청한 결과로 채널을 떠날 수 있으며, 사용자는 시스템 UI에서 채널 탈퇴 버튼을 탭할 수 있습니다.

채널 관리자 대리인은 채널 탈퇴 요청이 실패할 경우 호출될 관련 LeaveChannel 오류 처리 방법을 가지고 있습니다.

PushToTalk은 종료 후 또는 장치 재부팅 후 앱이 다시 시작될 때마다 이전 채널 복원을 지원합니다.

시스템이 이를 수행하려면, 시스템을 업데이트하기 위해 채널 설명자를 제공해야 합니다.

여기에 복원 대리인에서 캐시된 채널 설명자를 가져오는 도우미 방법이 있습니다.

시스템 응답을 유지하려면 가능한 한 빨리 이 방법에서 돌아와야 하며 채널 설명자를 검색하기 위한 네트워크 요청과 같은 장기 실행 또는 차단 작업을 수행해서는 안 됩니다.

푸시 투 토크 세션의 수명 주기 동안, 채널에 대한 정보가 변경될 때마다 설명자에 대한 업데이트를 제공해야 합니다.

또한 서비스 상태 객체를 사용하여 네트워크 연결 또는 서버 가용성의 변경 사항에 대해 시스템에 알려야 합니다.

여기서 우리는 채널에 대한 설명자를 업데이트하고 있습니다.

채널 이름이나 이미지를 업데이트해야 할 때마다 이 방법을 호출할 수 있습니다.

이 예에서, 우리는 앱의 분리기 연결이 다시 연결 상태에 있음을 나타내기 위해 시스템에 대한 업데이트를 제공하고 있습니다.

이에 따라 시스템 UI를 업데이트하고 서비스 상태가 연결되거나 연결이 끊어진 경우 사용자가 오디오를 전송하는 것을 방지합니다.

연결이 다시 설정되면, 서비스 상태를 "준비"로 업데이트해야 합니다.

이제 PushToTalk을 사용하여 오디오를 보내고 받는 방법을 검토해 봅시다.

트레버, 나머지 API를 살펴볼 준비가 되었나요?

끝났어.

트레버: 응. 그들을 보내. 끝났어.

이제 PushToTalk 프레임워크를 구성하는 방법을 보았으니, 오디오를 전송하고 받는 방법을 살펴봅시다.

PushToTalk 프레임워크의 핵심 기능은 사용자가 오디오를 빠르게 전송할 수 있도록 하는 것입니다.

사용자는 앱 내에서 또는 시스템 Push To Talk UI에서 오디오 전송을 시작할 수 있습니다.

앱이 CoreBluetooth를 통해 블루투스 액세서리를 지원하는 경우, 주변 장치의 특성 변화에 대응하여 백그라운드에서 전송을 시작할 수도 있습니다.

전송할 때, PushToTalk 프레임워크는 장치의 마이크를 잠금 해제하고 앱의 오디오 세션을 활성화하여 백그라운드에서 오디오 녹음을 가능하게 합니다.

이 과정을 자세히 검토해 봅시다.

앱 내에서 전송을 시작하려면, requestBeginTransmitting 기능을 호출할 수 있습니다.

이것은 앱이 포그라운드에서 실행되거나 블루투스 주변 장치의 특성 변화에 반응할 때마다 호출할 수 있습니다.

시스템이 전송을 시작할 수 없는 경우, 대리인의 failedToBeginTransmitting InChannel 메서드가 실패 이유와 함께 호출됩니다.

예를 들어, 사용자가 진행 중인 셀룰러 통화를 활성화한 경우, 푸시 투 토크 전송을 시작할 수 없습니다.

전송을 중지하려면, 채널 관리자의 전송 중지 방법을 호출하세요.

사용자가 전송 상태가 아닐 때와 같이 전송을 중지하려고 할 때 실패를 처리하기 위해, 채널 관리자 대리인은 관련 failedToStopTransmitting InChannel 메소드를 가지고 있습니다.

앱 내에서 전송을 시작하든 사용자가 시스템 UI에서 시작하든, 채널 관리자 대리인은 "전송 시작" 콜백을 받게 됩니다.

전송 소스는 방법으로 전달되며 전송이 시스템 UI, 프로그래밍 방식 API 또는 하드웨어 버튼 이벤트에서 시작되었는지 여부를 나타냅니다.

전송이 시작되면, 시스템은 앱의 오디오 세션을 활성화할 것입니다.

이것은 당신이 이제 녹음을 시작할 수 있다는 신호입니다.

자신의 오디오 세션을 시작하거나 중단해서는 안 됩니다.

전송이 끝나면, 채널 관리자 대리인은 종료 전송 및 오디오 세션 비활성화 이벤트를 받게 됩니다.

전송이 활성화되어 있는 동안, 오디오 세션은 앱 내에서 처리해야 하는 전화 및 FaceTime 통화와 같은 다른 소스에 의해 중단될 수 있습니다.

또한 PushToTalk 프레임워크를 사용하면 앱이 백그라운드에서 다른 사용자의 오디오를 수신하고 재생할 수 있습니다.

이 과정은 Push To Talk 앱과 관련된 새로운 Apple 푸시 알림 유형에 의존합니다.

Push To Talk 서버에 사용자가 받을 수 있는 새로운 오디오가 있는 경우, 채널에 가입할 때 받은 장치 푸시 토큰을 사용하여 사용자에게 Push To Talk 알림을 보내야 합니다.

앱에서 푸시 알림을 받으면, 활성 스피커를 프레임워크에 보고해야 하며, 이로 인해 시스템이 앱의 오디오 세션을 활성화하고 재생을 시작할 수 있습니다.

새로운 Push To Talk 알림은 iOS의 다른 알림 유형과 유사하며 Push To Talk 앱에 전달하려면 설정해야 하는 특정 속성이 있습니다.

먼저, APNS 푸시 유형은 요청 헤더에서 "pushtotalk"로 설정되어야 합니다.

다음으로, APNS 주제 헤더는 끝에 ".voip-ptt" 접미사가 추가된 앱의 번들 식별자로 설정해야 합니다.

푸시 페이로드는 활성 스피커의 이름이나 세션이 종료되었고 앱이 Push To Talk 채널을 떠나야 한다는 표시와 같이 앱과 관련된 사용자 지정 키를 포함할 수 있습니다.

"Aps" 속성의 본문은 비워 둘 수 있습니다.

또한, 다른 통신 관련 푸시 유형과 마찬가지로, Push To Talk 페이로드는 더 이상 관련이 없는 오래된 푸시가 나중에 전달되는 것을 방지하기 위해 즉각적인 배달을 요청하기 위해 APNS 우선 순위가 10이고 APNS 만료가 0이어야 합니다.

서버가 푸시 투 토크 알림을 보내면, 앱이 백그라운드에서 시작되고 들어오는 푸시 대리자 메소드가 호출됩니다.

푸시 페이로드를 받으면, 푸시 알림의 결과로 어떤 작업을 수행해야 하는지 나타내기 위해 푸시 결과 유형을 구성해야 합니다.

원격 사용자가 말하고 있음을 나타내기 위해, 이름과 선택적 이미지를 포함한 활성 참가자의 정보가 포함된 푸시 결과를 반환하십시오.

이렇게 하면 시스템이 채널에서 활성 참가자를 설정하고 채널이 수신 모드에 있음을 나타냅니다.

그런 다음 시스템은 오디오 세션을 활성화하고 didActivateaudioSession 대리 메서드를 호출합니다.

재생을 시작하기 전에 이 방법이 호출될 때까지 기다려야 합니다.

서버가 사용자가 더 이상 채널에 가입해서는 안 된다고 결정한 경우, leaveChannel 푸시 결과를 반환할 수 있는 푸시 페이로드에 이를 나타낼 수 있습니다.

이 방법에서 PTPushResult를 가능한 한 빨리 반환하고 스레드를 차단하지 않아야 한다는 점에 유의하는 것이 중요합니다.

활성 원격 참가자를 설정하려고 하는데 이미지가 로컬에 저장되어 있지 않은 경우, 연사의 이름만 사용하여 activeRemoteParticipant를 반환할 수 있습니다.

그런 다음 별도의 스레드에서 이미지를 다운로드하고, 이미지가 검색되면 채널 관리자에서 setActiveRemoteParticipant를 호출하여 activeRemoteParticipant를 업데이트하십시오.

원격 참가자가 말하기를 마치면, activeRemoteParticipant를 nil로 설정해야 합니다.

이것은 당신이 더 이상 채널에서 오디오를 수신하지 않고 시스템이 오디오 세션을 비활성화해야 한다는 것을 시스템에 나타냅니다.

이것은 또한 시스템 Push To Talk UI를 업데이트하고 사용자가 다시 전송할 수 있도록 합니다.

이제 PushToTalk을 앱에 통합하는 방법에 대한 기본 사항을 다루었으므로, 사용자 경험을 최적화하고 배터리 수명을 보존하기 위한 몇 가지 모범 사례를 검토해 봅시다.

PushToTalk 프레임워크는 사용자가 전송을 시작하고 시스템 내 어느 곳에서나 채널을 떠날 수 있는 시스템 UI를 제공합니다.

또한, 유연하며 앱이 전경에 있을 때 사용자 지정 Push To Talk UI를 구현할 수 있습니다.

PushToTalk 프레임워크는 공유 시스템 자원을 활용한다.

한 번에 하나의 Push To Talk 앱만 시스템에서 활성화될 수 있으며, Push To Talk 통신은 셀룰러, FaceTime 및 VoIP 통화로 대체됩니다.

당신의 앱은 PushToTalk 실패를 정상적으로 처리하고 그에 따라 대응해야 합니다.

앞서 언급했듯이, PushToTalk 프레임워크는 오디오 세션의 활성화 및 비활성화를 처리합니다.

그러나, 앱이 실행될 때 재생하고 녹음하도록 오디오 세션의 카테고리를 구성해야 합니다.

이 시스템은 전송할 때 마이크가 활성화되고 비활성화된다는 것을 사용자에게 경고하는 내장 음향 효과를 제공합니다.

당신은 이 사건들에 대해 당신만의 음향 효과를 제공해서는 안 됩니다.

앱이 세션 중단, 경로 변경 및 실패와 같은 AVAudioSession 알림을 모니터링하고 응답하는 것도 중요합니다.

Push To Talk 앱은 시스템의 다른 오디오 앱과 마찬가지로 이러한 오디오 세션 이벤트의 영향을 받을 수 있습니다.

배터리 수명을 보존하기 위해 앱을 최적화하는 것이 중요합니다.

PushToTalk 프레임워크는 오디오를 전송하고 수신할 때와 같이 필요할 때 앱에 백그라운드 런타임을 제공합니다.

사용자가 앱을 사용하지 않을 때, 배터리 수명을 보존하기 위해 시스템에 의해 일시 중지됩니다.

자신의 오디오 세션을 활성화하거나 비활성화해서는 안 됩니다.

시스템은 적절한 시간에 오디오 세션 활성화를 처리할 것입니다.

이것은 당신의 오디오 세션이 시스템 내에서 적절한 우선 순위를 가지고 있으며 사용되지 않을 때 중단될 수 있도록 합니다.

Push To Talk 서버는 새로운 푸시 알림 유형을 사용하여 재생될 새로운 오디오가 있거나 Push To Talk 세션이 종료되었음을 앱에 알려야 합니다.

앱의 배터리 수명 개선에 대한 자세한 내용은 "전원 다운: 배터리 소비 개선" 세션을 참조하십시오.

Push To Talk 앱이 백그라운드에 있고 앱이 오디오를 전송하거나 수신하지 않으면 시스템에 의해 일시 중지됩니다.

앱이 일시 중지되면, 모든 네트워크 연결이 끊어집니다.

안전한 TLS 연결을 설정하고 초기 연결 속도를 향상시키는 데 필요한 단계를 줄이기 위해 Network.framework와 QUIC를 채택하는 것을 고려해야 합니다.

Network.framework에는 QUIC에 대한 지원이 내장되어 있습니다.

QUIC를 사용하는 방법에 대한 자세한 내용은 "더 반응이 빠른 앱을 위한 네트워킹 지연 줄이기" 세션을 확인하세요.

PushToTalk 프레임워크를 사용하면 앱 내에서 강력하고 전력 효율적인 워키토키 스타일의 커뮤니케이션 경험을 구축할 수 있습니다.

이미 iOS에서 워크토키 스타일 경험을 구현하는 앱이 있다면, 새로운 API를 사용하기 위해 기존 앱을 업데이트하기 시작해야 합니다.

새로운 워키토키 앱을 구현하는 경우, 지금 PushToTalk 프레임워크를 사용해야 합니다.

마지막으로, 새로운 프레임워크를 테스트하고 앱과 통합하기 시작할 때 피드백을 제출하십시오.

고마워 그리고 멋진 WWDC 보내!

오버 앤 아웃!

♪