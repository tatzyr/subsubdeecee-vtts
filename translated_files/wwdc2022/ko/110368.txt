110368

♪ 부드러운 기악 힙합 음악 ♪

♪

프랭클린 슈랜스: 안녕하세요, 제 이름은 프랭클린이고, 저는 Swift-DocC 팀의 엔지니어입니다.

제 동료 Ethan과 함께, 더 나은 문서를 만드는 데 도움이 되는 훌륭한 새로운 도구로 가득 찬 Xcode 14의 Swift-DocC 투어를 제공하게 되어 기쁩니다.

작년에 Xcode 13에서 Swift-DocC를 도입하여 Swift 프레임워크를 통해 개발자를 안내할 수 있습니다.

Swift-DocC를 사용하면 개별 API에 대한 참조 문서부터 이러한 API를 함께 사용하기 위한 더 높은 수준의 스토리를 제공하는 개념적 기사, 작업을 통해 사용자를 안내하는 단계별 튜토리얼에 이르기까지 포괄적인 콘텐츠를 작성할 수 있습니다.

올해 Swift-DocC는 Xcode 14를 통해 새롭고 흥미로운 워크플로우를 잠금 해제합니다.

프레임워크를 문서화하는 것 외에도, 우리는 이제 앱 프로젝트도 지원하게 되어 기쁩니다. 그래서 당신은 당신의 팀과 쉽게 협업할 수 있습니다.

이제 Swift-DocC를 사용하여 Objective-C 및 C API를 문서화하여 모든 프로젝트의 API를 함께 설명할 수 있습니다.

이제 GitHub 페이지와 같은 정적 호스팅 환경을 즉시 지원하여 웹사이트에 콘텐츠를 게시하는 것이 훨씬 쉬워졌습니다.

그리고 강력한 새로운 내비게이션 사이드바 덕분에, 개발자들은 당신의 콘텐츠를 그 어느 때보다 쉽게 발견할 수 있을 것입니다.

또한, Swift-DocC가 이제 오픈 소스 프로젝트가 됨 때문에, 이러한 새로운 기능은 오픈 소스 커뮤니티와의 긴밀한 협력을 통해 개발되었다.

이 세션에서, 우리는 Swift-DocC와 Xcode 14에서 잠금 해제되는 흥미진진한 새로운 워크플로우를 둘러볼 것입니다.

먼저, 우리는 소스 코드와 함께 프로젝트의 API를 문서화하는 방법을 발견할 것입니다.

그런 다음, 우리는 당신의 콘텐츠를 웹사이트에 원활하게 게시하는 것을 살펴볼 것입니다.

그리고 마지막으로, 우리는 웹에서 새로운 내비게이션 사이드바를 발견할 것이다.

문서를 작성하는 것부터 시작합시다.

좋은 문서는 모든 소프트웨어 프로젝트에 필수적이다.

프로젝트가 발전함에 따라, 개발자가 기여할 때 확실한 기준점을 가질 수 있도록 기능과 디자인을 설명하는 것이 중요합니다.

Xcode의 Swift-DocC는 코드를 개발하는 데 사용하는 것과 동일한 도구를 사용하여 환상적인 문서를 만드는 데 필요한 도구를 제공합니다.

그리고 올해, 우리는 Swift-DocC를 앱 프로젝트로 확장하게 되어 기쁩니다.

바로 뛰어들자.

우리는 Swift와 Objective-C 소스 파일이 모두 포함된 Slothy라는 내 팀과 함께 작업하고 있는 앱을 문서화할 것이다.

아직 문서를 작성하지 않은 새로운 프로젝트에서도 제품 메뉴를 열고 문서 빌드를 선택할 수 있으며, Xcode는 문서 창을 열어 Swift-DocC가 API를 위해 자동으로 생성하는 스텁을 볼 수 있습니다.

이것은 기여자들이 프로젝트를 탐색할 수 있도록 이 페이지를 작성하기 위한 훌륭한 출발점을 제공한다.

그래서, 이 콘텐츠를 우리 앱에 기여하기 위한 풍부하고 완전한 가이드로 바꾸기 위해 단계별로 진행해 봅시다.

시작하기에 좋은 곳은 각 API가 개별적으로 어떻게 작동하는지 가르치고, 거기에서 문서 카탈로그를 사용하여 더 높은 수준의 콘텐츠를 제공하는 것입니다.

SlothView라는 뷰를 설명하는 것으로 시작합시다.

이 문서를 Swift-DocC에서 볼 수 있도록, 세 개의 슬래시를 사용하여 주석을 시작하세요.

그런 다음, 당신의 견해에 대한 간결한 요약을 추가하세요.

구축된 문서 페이지에서, 이것은 보기 이름 바로 아래에 눈에 띄게 표시된 텍스트로 변환됩니다.

그런 다음, 추가 단락을 사용하여 더 자세한 내용을 추가하세요.

이 콘텐츠는 페이지의 개요 섹션에 나타납니다.

그리고 Swift-DocC의 링크 구문을 사용하여 API에 대한 참조를 활성 링크로 바꾸면 페이지로 빠르게 이동하여 자세히 알아볼 수 있습니다.

DocC는 빌드할 때 이러한 링크의 유효성을 검사하므로, 구식이 되면 경고를 받을 수 있습니다.

마지막으로, 이 보기를 사용하는 방법의 예를 제공하고 싶다면, 마크다운 코드 블록 구문을 사용하여 코드 목록을 추가하십시오.

이제, 기여자들은 이 견해를 어떻게 사용하는지 한 눈에 알고 있다.

몇 단계만 거치면, 내 견해의 문서는 이제 이 프로젝트의 기여자들에게 훨씬 더 도움이 된다.

다음으로, 이니셜라이저를 문서화해 봅시다.

다시, 요약을 쓰는 것으로 시작하세요.

이니셜라이저와 방법의 경우, 각 매개 변수를 개별적으로 설명하는 것이 좋습니다.

매개 변수가 무엇인지에 대한 간략한 설명과 함께 매개 변수 목록 항목을 추가하여 그렇게 합니다.

콘텐츠가 별도의 매개 변수 섹션에 어떻게 나타나는지 주목하세요.

이제 이 프로젝트에 정의된 Objective-C API를 살펴봅시다.

Xcode 14의 새로운 기능, 우리는 Objective-C 코드를 문서화하기 위해 Swift-DocC의 포괄적인 도구를 제공하게 되어 기쁩니다.

당신이 알고 사랑하는 것과 동일한 친숙한 마크다운 구문과 Xcode의 소스 편집기의 업데이트된 지원을 사용하여, 이제 모든 프로젝트의 API를 함께 설명하고 구성할 수 있습니다.

그리고 Swift와 Objective-C 모두에서 호출할 수 있는 코드의 경우, 코딩 중인 언어로 페이지를 탐색할 수 있는 멋진 언어 토글이 있습니다.

자세한 내용은 아래에 링크된 개발자 문서를 확인하세요.

이제, 이것을 우리의 Slothy 프로젝트에 적용해 봅시다.

SLOSound 클래스와 이니셜라이저를 설명하겠습니다.

이 클래스는 Swift와 Objective-C 코드 모두에서 사용할 수 있기 때문에 Xcode는 사용 중인 언어로 콘텐츠를 탐색할 수 있는 언어 토글을 표시합니다.

스위프트 코드에 사용하는 것과 동일한 마크다운 구문을 사용하여 클래스와 이니셜라이저를 설명합시다.

좋아, 이게 훨씬 더 좋아 보여.

요약, 개요, 이니셜라이저에 대한 매개 변수 섹션을 추가했습니다.

그리고 그것은 개별 API를 설명하는 것으로 마무리된다.

소스 코드에 몇 가지 문서 의견을 작성함으로써, 내 프로젝트에 기여하는 개발자들은 API를 사용하는 방법을 더 잘 이해할 수 있다.

이제, 우리 앱을 위한 훌륭한 최상위 페이지를 만드는 데 집중합시다.

이것은 기여자들이 보게 될 첫 번째 페이지이므로, 앱이 하는 일과 그것에 기여하는 방법에 대한 훌륭한 소개를 제공하고 싶습니다.

최상위 페이지를 사용자 정의하려면, 문서 카탈로그를 추가하는 것으로 시작하세요.

그렇게 하려면, 프로젝트의 소스 폴더를 마우스 오른쪽 버튼으로 클릭하고 새 파일을 선택하세요.

그런 다음 문서 카탈로그를 선택하세요.

문서 카탈로그는 소스 코드 문서를 보완하며 추가 마크다운 파일과 미디어를 포함합니다.

Xcode는 앱의 최상위 페이지에 대한 파일을 자동으로 추가합니다.

앱이 무엇을 하는지에 대한 개요를 작성해 봅시다.

소스 코드의 문서 주석에 사용하는 것과 동일한 구문을 사용하여 요약, 개요, 심지어 이미지와 같은 풍부한 콘텐츠를 추가했습니다.

좋아, 이건 훨씬 더 매력적으로 보여.

이제 기여자들은 내 앱이 무엇인지 한눈에 알 수 있다.

그리고 그게 다야! 나는 내 앱의 문서를 극적으로 개선했고 내 프로젝트의 기여자들에게 훌륭한 기준점을 제공했다.

그들은 프로젝트의 개요를 위해 최상위 페이지를 탐색하고, 각 페이지로 이동하여 각 API에 대한 자세한 정보를 얻을 수 있습니다.

이제 문서를 작성하고 작성하는 방법을 보았으므로, 기여자가 쉽게 탐색할 수 있도록 웹사이트에 게시할 때입니다.

너에게, 이선.

Ethan Kusters: 고마워, Franklin.

우리는 SlothCreator라는 더 일반적으로 유용한 Swift 패키지와 함께 모듈식 방식으로 Slothy 앱을 개발해 왔습니다.

나는 SlothCreator를 더 많은 청중에게 게시하여 Sloth 관련 앱을 만드는 다른 개발자들이 그것을 사용할 수 있도록 하는 것이 좋을 것이라고 생각한다.

이러한 노력의 일환으로, SlothCreator의 문서를 웹에서 쉽게 공유할 수 있는지 확인하고 싶으니, Swift-DocC의 새롭고 단순화된 출판 워크플로우를 살펴봅시다.

Xcode에서 문서를 만들 때, Swift-DocC는 문서를 포함하는 정적 번들을 생성합니다.

이 번들은 DocC 아카이브라고 불리며 문서를 위한 휴대용 컨테이너입니다.

Xcode의 문서 창에서 직접 내보내고 동료에게 보낼 수 있습니다.

그들은 아카이브를 두 번 클릭하기만 하면 문서를 열고 탐색할 수 있습니다.

하지만 DocC 아카이브는 Xcode에서 문서를 열기 위한 휴대용 컨테이너가 아닙니다.

그것은 또한 상자에서 꺼내자마자 완전한 기능을 갖춘 웹사이트를 포함하고 있다.

그리고 Xcode 14의 새로운 기능인 DocC 아카이브는 대부분의 웹 서버와 직접 호환됩니다.

이것은 당신의 문서를 그 어느 때보다 쉽게 웹에 게시할 수 있게 해준다.

대부분의 경우, 구축된 DocC 아카이브의 내용을 웹 서버의 루트에 복사하기만 하면 문서를 배포할 수 있습니다.

이것은 또한 DocC 아카이브가 이제 GitHub 페이지를 포함한 대부분의 관리 호스팅 서비스와 호환된다는 것을 의미합니다.

GitHub 페이지는 많은 개발자들이 GitHub.com에 바로 통합된 문서를 호스팅하는 인기 있는 방법입니다.

그리고 SlothCreator의 소스 제어를 위해 GitHub를 사용해왔기 때문에, 거기에도 문서를 게시하는 것이 합리적입니다.

GitHub 페이지 사용에 익숙하다면, 표준 서버와 달리 웹사이트가 URL의 루트 경로가 아니라 특정 기본 경로에 게시된다는 것을 알 수 있습니다.

이러한 종류의 호스팅 시나리오에서는 호환되는 DocC 아카이브를 생성하기 위해 추가 빌드 설정으로 웹사이트의 기본 경로를 지정해야 합니다.

이것이 어떻게 작동하는지, 그리고 GitHub 페이지와 같은 특정 호스팅 시나리오에서만 이 구성이 필요한 이유를 완전히 이해하려면, 자신의 도메인에서 호스팅되는 DocC 아카이브의 URL이 어떻게 보일지 살펴봅시다.

Slothy 앱을 위한 웹사이트가 이미 있다고 가정해 봅시다 -- slothy.example.com -- 그리고 우리는 SlothCreator에 대한 문서를 기존 웹사이트의 일부로 게시하고 싶습니다.

SlothCreator DocC 아카이브의 콘텐츠를 웹 서버의 루트로 복사하면 SlothCreator에 대한 참조 문서가 slothy.example.com/ documentation/slothcreator에 표시됩니다.

SlothCreator 패키지에 대한 모든 튜토리얼은 인접한 "튜토리얼" 경로에 있을 것이다.

그러나, 이 경우, 우리는 우리 자신의 도메인에 게시하지 않을 것이다.

대신, GitHub 저장소에 문서를 보관하기 위해, 우리는 GitHub 페이지가 제공하는 도메인에 게시할 것입니다.

저장소를 위한 GitHub 페이지 사이트를 만들 때, 그 웹사이트의 URL은 루트 경로에 있지 않습니다; 대신, 저장소의 이름에 해당하는 특정 기본 경로에 있습니다.

일반적으로 그것은 당신의 username.github.io 포워드 슬래시 저장소 이름과 같은 것입니다.

모든 참조 및 튜토리얼 문서 경로는 해당 기본 경로에 추가됩니다.

이 기본 경로는 저장소에 고유하기 때문에, GitHub 페이지에 게시하기 위해 DocC 아카이브를 구축하기 전에 Swift-DocC에 그것이 무엇인지 말하는 것이 중요합니다.

이 사용 사례에 대해 Xcode 14에 노출된 새로운 빌드 설정이 있습니다.

DocC 아카이브 호스팅 기본 경로 설정을 GitHub 저장소의 이름으로 구성한 후, 향후 모든 문서 빌드를 시작할 수 있습니다.

이것이 실제로 어떻게 작동하는지 살펴봅시다.

여기서, 저는 프랭클린이 이전에 Slothy 앱의 종속성으로 보여준 SlothCreator Swift 패키지를 열었습니다.

우리가 더 넓은 사용을 위해 이 패키지를 게시하는 것에 가까워지고 있기 때문에, 나는 우리가 준비한 문서를 GitHub 페이지에 게시할 것이다.

마우스를 Xcode의 프로젝트 네비게이터로 이동하고 SlothCreator 항목을 선택하여 프레임워크의 프로젝트 설정을 여는 것으로 시작하겠습니다.

다음으로, SlothCreator 대상을 선택한 다음, 빌드 설정 탭을 열겠습니다.

이 경우, 저는 Swift-DocC 관련 설정을 찾고 있으니, DocC를 필터링해 봅시다.

이제 DocC 아카이브 호스팅 기본 경로 설정을 저장소의 이름으로 설정하겠습니다: sloth-creator.

좋아!

다음으로, 문서를 작성해 봅시다.

마우스를 제품 메뉴로 옮기고 문서 빌드를 선택하겠습니다.

Xcode가 내 프로젝트를 컴파일하고 문서를 생성한 후, 문서 창이 열립니다.

여기 SlothCreator의 문서의 최상위 페이지가 있습니다.

가서 수출하자.

마우스를 문서 네비게이터와 SlothCreator 기술 항목으로 옮길 것입니다.

다음으로 상황에 맞는 메뉴를 클릭하고 내보내기를 선택하겠습니다.

내 저장소의 루트에 있는 "docs"라는 디렉토리로 내보낼 거야. 왜냐하면 이것이 내 문서 웹사이트를 게시하기 위해 GitHub 페이지를 구성한 방법이기 때문이야.

이제 나는 내 변경 사항을 GitHub에 커밋하고 푸시하기만 하면 된다.

Xcode 기본 창으로 돌아가서, 마우스를 소스 제어 메뉴로 이동하고 커밋을 선택합니다.

문서 내용이 있는 문서 디렉토리를 선택하고 커밋 메시지를 작성하겠습니다.

계속해서 변화를 추진합시다.

그리고 그게 다야.

출판된 사이트를 보러 가자.

나는 GitHub.com에서 내 저장소를 열 것이다.

나는 이미 README에 문서 사이트에 대한 링크를 배치했기 때문에, 그냥 클릭할 것이다.

그리고 여기 우리가 있어.

SlothCreator를 위해 작업한 문서를 웹에서 쉽게 접근할 수 있게 되어 매우 기쁩니다.

나는 이것이 그들 자신의 프로젝트에서 SlothCreator를 사용하는 데 관심이 있는 사람들에게 정말 도움이 될 것이라고 생각한다.

이제 SlothCreator에 대한 문서를 한 번 배포했으므로 저장소의 문서가 변경될 때마다 배포를 수행하기 위해 자동화를 설정하고 싶습니다.

SlothCreator를 Swift 패키지로 출시하기 때문에, 새로운 Swift-DocC Swift Package Manager 플러그인은 여기에 큰 도움이 될 것입니다.

Swift-DocC 플러그인을 사용하여 Swift 패키지에 대한 문서를 작성하는 과정을 단순화할 수 있습니다.

플러그인의 문서는 아래에 링크되어 있으며 GitHub 페이지 및 기타 호스팅 서비스에 대한 자동화된 문서 배포를 구성하기 위한 좋은 출발점으로 확인하는 것이 좋습니다.

그리고 물론, Swift-DocC는 Xcode 13에 도입된 xcodebuild docbuild 명령줄 인터페이스로 Xcode 프로젝트에 대한 훌륭한 명령줄 지원을 계속하고 있습니다.

Xcodebuild를 사용하여 GitHub 페이지 배포를 자동화하는 방법에 대한 문서는 아래에 링크되어 있습니다.

우리는 올해 웹에서 Swift-DocC를 위한 완전히 새로운 향상된 브라우징 및 내비게이션 경험을 출시하게 되어 기쁩니다.

새로운 내비게이션 사이드바가 SlothCreator 문서의 독자들이 프레임워크가 제공하는 것을 탐구하는 데 어떻게 도움이 될 수 있는지 살펴봅시다.

우리는 SlothCreator를 위한 GitHub 페이지 사이트로 돌아왔고, 페이지 왼쪽에는 새로운 탐색 사이드바가 있습니다.

마우스를 CareSchedule 항목으로 이동하고 펼침 삼각형을 클릭하여 확장할 것입니다.

이제 페이지를 완전히 열 필요 없이 CareSchedule의 자녀로 구성된 페이지를 볼 수 있습니다.

이 경우, 나는 그 유형의 이니셜라이저로 바로 점프하는 것에 관심이 있다.

나는 프레임워크를 계속 탐색하고, FoodGenerator와 SlothFood와 같은 다른 항목을 확장하고, 결국 나뭇가지 페이지를 열 수 있다.

페이지 사이를 탐색할 때, 내비게이션 사이드바의 상태는 일정하게 유지되어 내가 이미 방문한 페이지를 추적할 수 있게 해준다.

이것은 내가 정말 감사하는 틀에 대한 자연스러운 탐구를 가능하게 한다.

하지만 제가 이미 SlothCreator 프레임워크에 익숙하고 특정 기호에 대한 정보를 찾고 있다면 어떨까요?

새로운 내비게이션 사이드바 하단의 필터 필드는 이것에 완벽하다.

나는 나무늘보의 에너지 레벨을 높이는 데 도움이 될 API에 관심이 있다.

마우스를 네비게이터 하단으로 옮기고, 필터 바를 선택하고, "에너지"를 삽입할 것이다.

완벽해!

에너지 레벨 자산에 대한 이 문서는 정확히 내가 찾고 있던 것이다.

Xcode 14에서 Swift-DocC가 제공하는 새로운 브라우징 경험은 문서 사이트를 한 단계 끌어올릴 것입니다.

우리는 당신이 그것을 시도하게 되어 매우 기쁩니다.

Swift-DocC의 Xcode 통합은 이제 모든 프로젝트 문서화를 지원합니다.

여기에는 Xcode 프로젝트 또는 Swift 패키지로 패키지된 애플리케이션 및 프레임워크 대상의 Objective-C 및 Swift 코드가 포함됩니다.

Xcode 14에서 생성된 DocC 아카이브는 GitHub 페이지를 포함한 인기 있는 호스팅 서비스와 즉시 호환됩니다.

이것은 당신의 문서를 더 많은 청중에게 배포하기 위한 게임 체인저입니다.

그리고 마지막으로, Swift-DocC는 웹에서 강력하고 새로운 탐색 경험을 제공합니다.

내비게이션 사이드바는 당신의 사이트에서 문서를 탐색하고 찾는 새로운 방법을 열 것입니다.

새로운 Swift-DocC 사이드바와 새로운 기능을 활용하기 위해 문서를 가장 잘 작성하는 방법에 대해 자세히 알아보려면, "Swift-DocC 콘텐츠의 발견 가능성 개선" 세션을 확인하세요.

그리고 문서를 더욱 발전시키기 위해, "DocC를 사용하여 대화형 튜토리얼 구축" 세션을 확인하여 앱이나 프레임워크를 통해 개발자를 안내하는 단계별 워크스루를 구축하는 방법을 알아보세요.

우리는 당신이 Xcode 14로 작성하고 게시하는 모든 문서를 보게 되어 매우 기쁩니다.

봐줘서 고마워.

♪