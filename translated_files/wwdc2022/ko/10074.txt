10074

♪ ♪

제프 나도: 안녕하세요, AppKit의 새로운 기능에 오신 것을 환영합니다.

저는 AppKit 팀의 엔지니어인 Jeff Nadeau이며, macOS Ventura용 앱 구축에 있어 최신의 최고를 공유하기 위해 왔습니다.

Apple Silicon의 성능과 효율성, macOS의 힘, 그리고 그 어느 때보다 풍부한 앱 생태계 사이에서 Mac에게 이보다 더 흥미진진한 시간은 없었습니다.

당신의 앱은 그 이야기의 중요한 부분이며, 우리는 당신이 최고의 앱을 계속 구축할 수 있도록 AppKit을 계속 추진하고 있습니다.

스테이지 매니저부터 환경 설정, 컨트롤, SF 기호 및 공유 등 다양한 주제를 다룰 것입니다.

나는 무대 매니저와 함께 시작할 거야.

스테이지 매니저는 활성 창이 중앙 무대를 차지하는 동안 작업 공간의 비활성 창을 정리합니다.

고급 워크플로우를 위해, 당신은 또한 창을 그룹으로 교환하는 세트로 모을 수 있습니다.

이것은 당신의 앱 윈도우가 어떻게 나타나는지에 영향을 미칩니다.

무대 관리자는 작업 공간을 깔끔하게 유지하려고 노력하고 있으므로, 새 창이 표시되면, 기존 창은 공간을 만들기 위해 무대에서 나갈 것이다.

그것이 당신이 당신의 문서와 같은 "기본" 창에 원하는 것입니다.

패널, 팝오버, 설정 등과 같은 보조 창은 기존 창 위에 계속 나타나야 합니다.

NSWindow에는 이미 특정 창에 대해 원하는 동작을 정의하는 데 도움이 되는 많은 API가 있습니다.

기본적으로, 스테이지 매니저는 플로팅 패널, 모달 창 또는 기본 설정 스타일 도구 모음이 있는 창을 제시하면 다른 창을 바꾸지 않습니다.

무대 관리자는 또한 당신의 창문의 수집 행동을 존중합니다.

이 OptionSet은 창이 공간과 전체 화면에서 어떻게 작동하는지 정의하며, 이제 Stage Manager가 창이 보조 또는 플로팅으로 간주된다는 것을 이해하는 데 도움이 됩니다.

창의 collectionBehavior에 보조, moveToActiveSpace, 고정 또는 임시 옵션이 포함되어 있다면, 중앙 무대에서 활성 창을 대체하지 않습니다.

올바른 수집 동작으로 창을 설정하면 데스크톱 공간, 전체 화면 또는 현재 Stage Manager에서 모든 상황에서 잘 작동하는지 확인할 수 있습니다.

다음으로, 저는 환경 설정에 대한 몇 가지 중요한 변경 사항을 다루고 싶습니다.

macOS Ventura에서 시스템 환경 설정 앱은 새로워진 탐색 방식과 완전히 새로운 시각적 디자인으로 완전히 새로운 모습을 취했습니다.

다른 운영 체제의 설정 경험과 일치하기 위해, 우리는 또한 앱의 이름을 시스템 설정으로 변경했습니다.

이러한 변경 사항은 당신의 지원서에도 적용됩니다.

예를 들어, 오늘 시스템 환경 설정 앱에 나타나는 기본 설정 창 번들이 있을 수 있습니다.

앱 내부에 설정 영역이 있을 수도 있습니다.

설정 인터페이스나 검사관에 완벽하게 맞을 수 있는 제어가 풍부한 형태를 위한 새로운 디자인 시스템도 있습니다.

사용자 지정 prefpane 번들을 배송하면, 새로운 설정 앱에서 계속 작동합니다.

사용자 지정 창이 사이드바에 나타나고, 앱은 번들을 로드하고 몬터레이와 그 이전에 했던 것처럼 설정 UI를 표시합니다.

새로 이름이 바뀐 시스템 설정 앱과 일치하기 위해, 우리는 앱 내 환경 설정의 이름을 "설정"으로 변경했습니다.

시작하기 위해, 최신 SDK를 기반으로 빌드하면, AppKit은 앱 메뉴의 "환경설정" 메뉴 항목의 이름을 자동으로 업데이트합니다.

그러나, 창 제목, 설명 라벨 또는 앱 주변의 다른 컨트롤과 같은 다른 여러 곳에서 "환경 설정"이라는 단어를 사용할 수 있습니다.

현지화된 텍스트를 검색하여 업데이트가 필요한 장소를 찾으세요.

예를 들어, 텍스트 편집기의 설정 창은 "환경 설정"이라고 불렸고 우리는 시스템의 나머지 부분과 일치하도록 그 창의 이름을 설정으로 바꾸기로 결정했습니다.

시스템 설정 앱은 또한 모든 구성 옵션을 제시하기 위해 새로운 인터페이스 스타일을 사용합니다.

설정 인터페이스는 종종 컨트롤이 많기 때문에, 이 스타일은 명확하고 잘 조직된 방식으로 많은 컨트롤을 포함하는 형태를 제시하도록 설계되었습니다.

형태 자체가 많은 시각적 구조를 제공하기 때문에, 많은 시스템 컨트롤은 더 낮은 시각적 무게로 그림을 그리면서 롤오버에서 더 눈에 띄는 컨트롤 백킹을 드러냄으로써 이러한 맥락에 적응한다.

이 새로운 디자인을 사용하는 인터페이스를 작성하고 싶다면, SwiftUI는 그것을 매우 쉽게 만든다.

컨트롤을 양식 보기에 배치한 다음, "insetGrouped" 양식 스타일을 적용하세요.

SwiftUI는 나머지를 처리합니다: 시각적 스타일, 스크롤 동작 및 양식의 레이아웃은 모두 자동으로 적용됩니다.

아직 SwiftUI를 시작하지 않았다면, 이것은 시도해 볼 수 있는 좋은 기회입니다.

설정 창은 종종 앱 인터페이스의 독립형 영역이므로, 점진적으로 채택하기에 완벽한 장소입니다.

우리는 심지어 SwiftUI와 AppKit을 함께 사용하는 것에 대한 비디오를 만들었고, 이는 더 많은 것을 배우기에 좋은 장소입니다.

다음으로, 저는 우리의 컨트롤에 대한 몇 가지 업데이트를 공유하고 싶습니다.

우리는 NSComboButton이라는 새로운 컨트롤을 시작으로 공유할 수 있는 많은 흥미로운 컨트롤 향상을 가지고 있습니다.

우리는 또한 NSColorWell을 업데이트하고, NSToolbar API를 개선하고, NSAlert의 디자인을 조정하고, NSTableView의 성능을 개선했습니다.

먼저, NSComboButton.

NSComboButton은 즉각적인 버튼 동작과 추가 옵션을 위한 메뉴를 결합하는 것에 관한 것입니다.

오늘날의 제어 환경에서, 당신은 전통적으로 버튼을 사용하여 즉각적인 작업을 수행하거나, 풀다운 버튼을 사용하여 많은 옵션이 있는 메뉴를 표시할 것입니다.

NSComboButton은 두 요소를 하나의 컨트롤로 결합하여 기본 동작과 풀다운 메뉴를 결합합니다.

이 디자인은 일반적으로 메일에서 이와 같은 사용 사례에 사용되며, 예측된 폴더는 한 번의 클릭으로 이동할 수 있지만, 어디에서나 메시지를 보관할 수 있는 메뉴에 액세스할 수 있습니다.

이전에는 분할된 제어 API를 사용하여 이와 같은 것을 조립했을 수도 있지만, 지금은 전용 제어가 있습니다.

NSComboButton은 버튼의 모양과 동작을 모두 지시하는 두 가지 스타일로 제공됩니다.

기본 스타일은 "분할"이라고 불리며, 메뉴만을 위한 별도의 화살표 부분을 포함합니다.

두 번째 스타일인 "통일"은 훨씬 더 평범한 버튼처럼 보인다.

이 스타일은 클릭 시 기본 동작을 수행하며, 클릭하고 유지하면 메뉴가 표시됩니다.

그리고 그건 NSComboButton이야.

우리는 또한 새로운 모습으로 시작하여 NSColorWell에 대한 몇 가지 훌륭한 새로운 업데이트를 받았습니다.

고전적인 정사각형 그라데이션 외관 대신, 색상은 시스템 전체의 다른 버튼 베젤을 연상시키는 새로운 스타일을 채택했다.

이 변화는 완전히 자동이므로, 이 현대적인 외관을 얻기 위해 입양할 필요가 없습니다.

그러나, 우리는 컬러 피킹이 창의적이고 전문적인 응용 프로그램의 중요한 부분이라는 것을 알고 있으므로, 우리는 한 걸음 더 나아가 NSColorWell을 위한 두 가지 새로운 스타일을 도입했습니다.

첫 번째는 롤오버에 대한 공개 화살표를 보여주는 최소한의 스타일이며, 전체 NSColorPanel로 나눌 수 있는 옵션과 함께 색상 팔레트에서 즉시 선택할 수 있는 팝오버를 보여줌으로써 빠른 색상 선택 경험을 제공합니다.

기본적으로, 그것은 시스템 표준 색상 그리드를 사용하지만, 다른 UI나 팔레트를 염두에 두고 있다면 여기에 나타나는 것을 사용자 정의할 수 있습니다.

두 번째는 iWork 앱에서 알아볼 수 있는 확장된 스타일입니다.

이 스타일은 두 상호 작용 모델을 결합합니다: 왼쪽의 우물에는 빠른 피킹을 위한 동일한 공개 화살표와 팝오버가 있으며, 오른쪽의 버튼은 더 자세한 색상 피킹을 위해 전체 패널을 당깁니다.

그리고 그것으로, NSColorWell은 이제 색상을 고르는 세 가지 방법을 제공합니다.

각 스타일에 대한 사례가 있는 NSColorWell의 새로운 colorWellStyle 속성을 사용하여 이러한 스타일에 액세스할 수 있습니다: 기본값, 확장 및 최소.

NSColorWell은 또한 "풀다운 액션"을 위해 새로운 타겟 앤 액션 쌍을 얻었다.

이 작업은 최소 또는 확장된 색상의 풀다운 부분을 클릭할 때 어떤 일이 일어나는지 결정합니다.

기본적으로 이러한 속성은 nil이며, 이는 NSColorWell이 시스템 표준 팝오버를 사용해야 함을 의미합니다.

그러나, 이 작업을 사용자 정의하고 자신만의 사용자 지정 팝오버를 표시하거나, 메뉴와 같은 다른 선택 인터페이스를 표시할 수도 있습니다.

그리고 그것은 새로운 NSColorWell이다.

그것은 새로운 모습과 색상을 빠르게 선택할 수 있는 두 가지 새로운 방법을 가지고 있다.

다음으로, NSToolbar에 대한 몇 가지 뉴스는 사용자 지정을 더 잘 제어하고 레이아웃에 대한 유연성을 높이기 위해 다양한 API를 개선했습니다.

사용자 지정 측면에서, 우리는 도구 모음의 사용자 정의 가능성을 더 잘 제어할 수 있도록 두 가지 새로운 대리자 방법을 추가했습니다.

첫 번째는 "toolbarImmovableItemIdentifiers"이다.

항목 식별자 세트를 반환하기 위해 이 방법을 구현하면, 해당 항목은 사용자가 이동하거나 제거할 수 없으며, 사용자 지정 모드로 들어갈 때 애니메이션화되지 않습니다.

예를 들어, 메일 앱은 필터 버튼이 항상 메시지 목록 위에 나타나기를 원합니다.

이 API를 사용하면, 그들은 이 지점에서 멀어지는 것을 막을 수 있다.

두 번째 방법은 "toolbar itemIdentifier canBeInsertedAt"라고 불린다.

이 위임 방법은 도구 모음에서 특정 재정렬, 삽입 또는 제거에 대한 거부권을 부여합니다.

이를 사용하여 사용자 지정 규칙 세트를 구현할 수 있습니다. 예를 들어, 도구 모음의 한 섹션에서 허용되는 도구 모음 항목을 만들 수 있지만 다른 섹션에서는 허용되지 않습니다.

이제 새로운 centeredItemIdentifiers 속성을 사용하여 도구 모음에 여러 개의 중심 항목을 지정할 수 있습니다.

도구 모음을 사용자 정의할 수 있는 경우, 이 세트의 항목은 여전히 도구 모음에서 추가하거나 제거할 수 있지만, 중앙 그룹 내에서만 재정렬할 수 있습니다.

이 예에서, 사진 편집 도구는 선행 및 후행 섹션에 얼마나 많은 항목이 배치되는지에 관계없이 모두 도구 모음의 중앙에 붙어 있습니다.

도구 모음이 원하는 방식으로 사용자 정의되면, 항목이 이동하는 것을 원하지 않으며, 클릭하면 전환되는 메일의 음소거 및 음소거 버튼과 같은 다른 상태에 따라 의미를 변경하는 도구 모음 항목이 어려울 수 있습니다.

라벨의 크기가 다르기 때문에, 도구 모음의 다른 항목은 변경 사항을 수용하기 위해 이동해야 합니다.

이와 같은 시나리오에서는 NSToolbarItem의 새로운 possibleLabels 속성을 사용하여 항목에 사용할 현지화된 문자열 세트를 제공할 수 있습니다.

NSToolbar는 가장 긴 라벨에 맞게 항목의 크기를 자동으로 조정하므로 항목이 재구성되더라도 레이아웃은 동일하게 유지됩니다.

다음으로, 경고를 위한 디자인 업데이트.

macOS의 경고는 몇 가지 명확한 선택과 함께 소량의 텍스트에 최적화된 컴팩트한 레이아웃을 사용합니다.

그리고 일반적으로, 그것은 경보를 모으는 좋은 방법이다.

경고는 짧은 텍스트로 가장 잘 작동합니다: 메시지를 더 직접적으로 전달할 수 있으며, 사람들은 경고를 통과하기 전에 당신이 쓴 것을 읽을 가능성이 더 큽니다.

그러나, 때로는 특히 파일 시스템 데이터에 대한 정말 중요한 선택을 전달하는 이 디스크 유틸리티 경고와 같이 복잡하고 미묘한 것을 전달해야 하는 경우 설명을 단축할 수 없습니다.

컴팩트한 레이아웃은 이 상황에 적합하지 않다.

이러한 경우, 우리는 더 긴 텍스트에 적합한 더 넓은 레이아웃을 제공하기 위해 NSAlert를 적용했습니다.

이 적응은 정보 텍스트가 너무 길어서 컴팩트한 크기에 편안하게 맞지 않는 경고에 자동으로 발생합니다.

컴팩트한 경고 창에 맞추기에는 너무 큰 액세서리 보기가 있다면 이 스타일도 사용할 것입니다.

앱이 이 동작을 선택할 필요가 없습니다. 시스템 전체에 자동으로 적용됩니다.

레이아웃은 경고를 제시할 때 결정된다는 점에 유의하는 것이 중요하므로, 이미 화면에 있는 동안 수정하면 경고가 스타일을 바꾸지 않습니다.

가능한 한 경고 텍스트의 길이를 줄이는 것을 목표로 해야 하지만, 이 디자인 업데이트는 당신이 할 수 없는 경우에 대한 사용자 경험을 향상시킬 것입니다.

다음으로, NSTableView의 중요한 새로운 기능.

NSTableView는 스크롤할 때 뷰를 게으르게 채우고 재사용하여 매우 많은 수의 행을 효율적으로 처리하도록 설계되었습니다.

그러나, 각 행이 다른 높이를 가질 수 있는 테이블의 경우, 그것은 도전이 될 수 있습니다. 왜냐하면 좋은 스크롤 경험을 제공하기 위해 테이블은 스크롤 영역에서 각 행의 총 높이와 위치를 알아야 하기 때문입니다.

역사적으로, NSTableView는 테이블의 모든 행의 크기를 조정하여 이를 수행하며, 이는 초기 로드 시간에 영향을 미칠 수 있다.

macOS Ventura에서 NSTableView는 훨씬 더 나은 성능을 제공하면서 이러한 목표를 달성합니다.

각 행의 높이를 열심히 계산하는 대신, NSTableView는 이제 스크롤 뷰포트 내 또는 근처에 있는 행을 기반으로 행 높이를 게으르게 계산합니다.

아직 측정되지 않은 행의 경우, NSTableView는 이미 측정된 행 높이를 기반으로 실행 중인 예상 높이를 사용합니다.

테이블을 스크롤할 때, NSTableView는 필요에 따라 행 높이를 요청하며, 예상 높이를 실제 측정값으로 대체하며, 올바른 스크롤 위치를 유지하도록 관리합니다.

이 최적화는 매우 큰 테이블의 로드 시간을 크게 향상시킵니다.

이 변경 사항은 "테이블 뷰: 행의 높이"와 같은 대리자 호출의 타이밍을 변경하므로 NSTableView가 언제 행 높이를 요청할 것인지에 대해 가정해서는 안 됩니다.

이 최적화는 NSTableView와 SwiftUI의 목록 보기 모두에 적용되며, 채택 없이 macOS Ventura의 모든 앱에 자동으로 사용됩니다.

그리고 그것은 NSTableView 성능이다.

다음으로, SF 심볼에 대한 몇 가지 업데이트.

macOS 벤투라에는 모든 종류의 주제를 다루는 450개 이상의 새로운 심볼 이미지를 추가하는 SF 심볼 4가 포함되어 있습니다.

이 새로운 기호에는 월계관, 모든 종류의 가정 용품, 전 세계의 통화 기호, 심지어 다양한 스포츠 관련 기호가 포함됩니다.

수천 개의 기호 카탈로그로, SF 기호는 당신이 표현하고 싶은 모든 아이디어를 위해 전문적으로 설계된 아이콘을 포함할 가능성이 높습니다.

하지만 우리는 거기서 멈추지 않았어.

SF 심볼 4에는 또한 당신의 도상학을 더욱 향상시키기 위한 몇 가지 새로운 기능이 포함되어 있습니다.

요약하자면, 심볼 이미지는 디자인에 따라 선택할 수 있는 다양한 렌더링 모드를 지원합니다.

단일 색상을 사용하는 흑백, 기호의 특정 부분을 강조하기 위해 색상의 다른 불투명도를 사용하는 계층적, 기호의 각 부분에 대해 뚜렷한 색상을 지정할 수 있는 팔레트, 그리고 기호 아트워크에 직접 디자인된 색상을 사용하는 다색이 있습니다.

이러한 선택은 당신에게 다양한 디자인을 실현할 수 있는 유연성을 제공하지만, 우리는 또한 기호 이미지가 어떤 구성도 적용할 필요 없이 상자에서 꺼내자마자 최고로 보이기를 원합니다.

그것이 우리가 macOS Ventura의 기호에 새로운 기능을 도입한 이유입니다: 선호하는 렌더링 모드.

선호하는 렌더링 모드를 사용하면 기호가 선호하는 렌더링 스타일을 지정할 수 있으며, 런타임에 AppKit은 해당 스타일을 자동으로 사용합니다.

이것은 미세한 디테일의 선명도를 높이기 위해 계층적 스타일을 선호하는 AirPods Pro와 같은 기호에 적합합니다.

물론, 다른 디자인을 염두에 두고 있다면, 항상 NSImageSymbolConfiguration 객체를 사용하여 원하는 스타일을 선택할 수 있습니다.

일부 기호는 단지 개념을 나타내는 것이 아니라, Wi-Fi 신호 강도나 오디오 볼륨과 같은 가치나 양을 전달하기 위한 것입니다.

이와 같은 경우, 우리는 "가변 기호"라고 부르는 새로운 유형의 기호를 도입했습니다.

변수 기호를 사용하면 부동 소수점 값을 NSImage에 직접 제공하며, 기호는 숫자 임계값을 내장하여 각 경로가 해당 값에 따라 어떻게 달라져야 하는지 결정합니다.

여기 API가 있습니다.

변수 기호는 새로운 이니셜라이저를 사용하여 생성됩니다.

0과 1 사이의 부동 소수점 숫자인 값 매개 변수를 추가하여 기존 기호 이미지 이니셜라이저와 유사합니다.

기호 이미지가 변수 임계값을 정의하지 않으면, 이 값은 무시되고 기호는 평소와 같이 그려진다.

만약 그렇다면, 당신이 제공한 값에 따라 기호 경로가 다르게 그려지는 것을 볼 수 있습니다.

각 변수 기호는 고유한 방식으로 값을 나타낼 수 있으며, API 수준에서 해당 값을 제공함으로써 기호가 어떻게 구성되는지에 대한 세부 사항을 알 필요 없이 이러한 모든 변형에 액세스할 수 있습니다.

가변 기호는 팔레트 색상 및 다색과 같은 렌더링 스타일과 함께 잘 작동하므로 거의 모든 디자인에 적용할 수 있습니다.

마지막으로, 저는 macOS Ventura 공유에 대한 몇 가지 큰 업데이트를 다루고 싶습니다. macOS Ventura는 Mac에서 공유 경험을 향상시키고, 제안된 사람들과 같은 기능과 당신이 협력하고 있는 사람들을 초대하고 관리하는 새로운 방법을 소개합니다.

앱이 이러한 개선 사항을 최대한 활용할 수 있도록 채택할 수 있는 몇 가지 새로운 API가 있습니다.

공유 경험에 대한 가장 두드러진 업데이트는 새로운 공유 팝오버이다.

이것은 기존 공유 메뉴를 공유 중인 문서에 대한 더 많은 정보와 제안된 사람들과 같은 친숙한 기능을 포함하는 풍부한 인터페이스로 대체합니다.

이전 피커와 동일한 API와 위임 방법을 모두 지원하므로, 공유 서비스 목록을 필터링하거나 사용자 지정 서비스를 피커에 삽입하는 것과 같은 작업을 수행할 수 있습니다.

파일 URL을 공유하는 경우, NSSharingServicePicker는 파일에 대한 아이콘, 이름 및 기타 메타데이터로 헤더를 자동으로 채울 수 있습니다.

하지만 대신 사용자 지정 유형을 공유하는 경우, NSSharingServicePicker가 해당 정보를 요청하는 데 사용할 새로운 프로토콜에 항목을 준수할 수 있습니다.

이 프로토콜은 NSPreviewRepresentableActivityItem이라고 불린다.

준수 유형은 NSItemProvider와 같이 공유할 기본 항목을 반환할 수 있어야 하며, 선택적으로 제목, 이미지 제공자 및 아이콘 제공자를 반환할 수 있습니다.

편의를 위해, AppKit에는 기존 공유 항목을 메타데이터와 묶는 데 사용할 수 있는 NSPreviewRepresentingActivityItem이라는 준수 클래스가 있습니다.

각 이미지 매개 변수를 NSImage로 직접 제공하거나, 해당 이미지를 미리 생성하기에는 성능이 너무 집약적인 경우 NSItemProvider를 사용할 수 있습니다.

새로운 공유 선택기는 도구 모음 버튼과 같은 곳에서 공유를 시작하는 데 좋지만, 때로는 기본 메뉴 표시줄이나 앱 내에서 선택한 보기의 상황에 맞는 메뉴와 같은 메뉴에서 공유를 시작하고 싶을 때가 있습니다.

이전에는 공유 서비스를 열거한 다음 각각에 대한 메뉴 항목을 구축하여 이를 처리하기 위해 자신만의 메뉴를 구성했을 수도 있습니다.

그것은 작동하지만, 표준 피커를 우회하므로, 이제 당신은 그 모든 새로운 기능을 놓치고 있습니다.

macOS Ventura에서 NSSharingServicePicker는 "standardShareMenuItem"을 만들 수 있습니다.

모든 메뉴에 표준 항목을 추가하여 공유를 쉽게 시작할 수 있습니다.

일단 선택되면, 메뉴 항목은 공유 팝오버를 호출하고, 컨텍스트 메뉴의 경우, 메뉴를 생성한 것과 동일한 보기에 팝오버를 고정합니다.

macOS Ventura에서 협업을 관리하기 위한 많은 새로운 지원이 있습니다.

일부 추가 채택으로, 공유 가능한 항목은 사용자가 공유 선택기, 메시지로 드래그 앤 드롭 또는 FaceTime을 통해 시작할 수 있는 협업 초대장이 될 수 있습니다.

CloudKit 또는 iCloud Drive를 사용하여 콘텐츠를 공유하거나, 초대 흐름을 자신의 협업 서버와 연결할 수 있습니다.

이제 이것은 정말 큰 주제이기 때문에, 우리는 그것을 훨씬 더 깊이 설명하기 위해 몇 개의 비디오를 만들었습니다.

앱이 협업을 지원하는지, 아니면 추가를 시작하고 싶은지 꼭 봐야 합니다.

macOS Ventura를 시작할 때, Stage Manager에서 가장 잘 작동하도록 Windows를 설정해야 합니다.

그런 다음, NSComboButton과 NSColorWell과 같은 제어 향상으로 설계가 어떻게 도움이 될 수 있는지 고려하십시오.

SF 심볼의 최신 기호와 기능을 사용하여 도상학을 개선하세요.

그리고 마지막으로, 협업을 위해, macOS Ventura의 새로운 공유 경험을 최대한 활용할 수 있도록 최신 API를 채택하세요.

시청해 주셔서 정말 감사드리며, 훌륭한 Mac 애플리케이션을 계속 구축해 주셔서 감사합니다.