10072

♪ 부드러운 기악 힙합 음악 ♪

♪

안녕하세요, 저는 건강 앱의 엔지니어인 Sara Frederixon입니다. UIKit과 함께 SwiftUI를 사용하는 것에 대해 이야기하기 위해 왔습니다.

여러분 중 많은 사람들처럼, 저는 기존 UIKit 앱에서 작업합니다.

나에게 이것은 건강 앱이다.

건강 앱에는 사람들이 건강 데이터를 이해하는 데 도움이 되는 많은 시각화가 있지만, 이러한 견해를 구축하는 것은 꽤 복잡할 수 있다.

저는 SwiftUI를 활용하는 데 관심이 있어서, UIKit 및 SwiftUI 팀과 협력하여 둘 다 같은 앱에 통합하는 방법을 배웠습니다.

이 비디오에서는 자신의 UIKit 앱에서 SwiftUI를 사용하는 것이 얼마나 쉬운지 가르쳐 드리겠습니다.

먼저 더 많은 유연성을 추가하는 몇 가지 새로운 업데이트가 있는 기존 UIHostingController를 다룰 것입니다.

다음으로 앱에 이미 존재하는 데이터로 SwiftUI 뷰를 채우고, 데이터가 변경될 때 SwiftUI 뷰를 업데이트하는 방법에 대해 자세히 알아보겠습니다.

그런 다음 SwiftUI를 사용하여 UICollectionView 및 UITableView 셀을 구축할 수 있는 몇 가지 흥미로운 새로운 기능에 대해 이야기하겠습니다.

마지막으로, 셀 내부에서 SwiftUI를 사용할 때 수집 및 테이블 뷰와 함께 데이터 흐름의 독특한 측면을 살펴보겠습니다.

UIHostingController에 대해 이야기하는 것으로 시작합시다.

UIHostingController는 SwiftUI 뷰 계층 구조를 포함하는 UIViewController입니다.

UIKit에서 뷰 컨트롤러를 사용할 수 있는 모든 곳에서 호스팅 컨트롤러를 사용할 수 있습니다.

이것은 UIHostingController를 SwiftUI 사용을 시작하는 쉬운 방법으로 만든다.

호스팅 컨트롤러가 어떻게 작동하는지 살펴봅시다.

호스팅 컨트롤러는 뷰 컨트롤러입니다. 즉, 뷰 속성에 UIView가 저장되어 있습니다.

그리고 그 보기 안에는 SwiftUI 콘텐츠가 렌더링되는 곳이 있습니다.

호스팅 컨트롤러를 사용하는 방법의 예를 살펴봅시다.

여기서, 우리는 SwiftUI 뷰인 HeartRateView를 만듭니다.

그런 다음 HeartRateView를 루트 뷰로 사용하여 호스팅 컨트롤러를 만들고 제시합니다.

UIHostingController는 모든 UIKit 뷰 컨트롤러 API와 함께 작동합니다.

다른 예시를 살펴보자.

우리는 이전과 같은 HeartRateView와 호스팅 컨트롤러를 가지고 있습니다.

여기서 우리는 호스팅 컨트롤러를 자식 보기 컨트롤러로 추가합니다.

그런 다음 우리는 호스팅 컨트롤러의 뷰를 배치하고 크기를 조정할 수 있습니다.

UIHostingController 내부의 SwiftUI 콘텐츠가 변경되면, 보기의 크기를 조정해야 할 수도 있습니다.

iOS 16의 새로운 기능인 UIHostingController를 사용하면 뷰 컨트롤러의 기본 콘텐츠 크기와 뷰의 기본 콘텐츠 크기를 자동으로 업데이트할 수 있습니다.

UIHostingController의 새로운 sizingOptions 속성을 사용하여 이것을 활성화할 수 있습니다.

예를 들어 봅시다.

시작하기 위해, 우리는 HeartRateView를 만들고, 호스팅 컨트롤러를 만듭니다.

우리는 새로운 sizingOptions API를 사용하여 hostingController에게 선호하는ContentSize를 자동으로 업데이트하도록 말합니다.

그런 다음, 우리는 modalPresentationStyle을 팝오버로 설정했습니다.

새로운 sizingOptions API를 사용하면 팝오버가 항상 SwiftUI 콘텐츠에 맞게 적절하게 크기가 조정됩니다.

이제 UIHostingController에 익숙해졌으니, UIKit 앱의 다른 부분에서 SwiftUI로 데이터를 가져오고, 데이터가 변경될 때 SwiftUI 뷰가 업데이트되도록 하는 방법에 대해 이야기해 봅시다.

다음은 UIKit 앱의 다이어그램입니다. 여기에는 앱의 데이터 모델 객체를 소유하고 관리하는 기존 모델 레이어가 포함되어 있습니다.

당신의 앱에는 또한 많은 뷰 컨트롤러가 포함되어 있습니다.

SwiftUI를 사용하려면, 뷰 컨트롤러 중 하나에 SwiftUI 뷰가 있는 호스팅 컨트롤러가 필요합니다.

이 SwiftUI 보기를 기존 모델 레이어가 여전히 소유하고 있는 데이터로 채우고 싶을 것입니다.

이 섹션에서는 UIKit과 SwiftUI 사이의 경계를 넘어 데이터를 연결하는 방법에 초점을 맞출 것입니다.

SwiftUI는 앱에서 데이터를 관리하는 데 도움이 되는 다양한 데이터 흐름 기본 요소를 제공합니다.

다양한 옵션을 살펴봅시다.

SwiftUI 뷰에서 생성되고 소유한 데이터를 저장하기 위해, SwiftUI는 @State 및 @StateObject 속성 래퍼를 제공합니다.

우리는 SwiftUI 외부에서 소유한 데이터에 초점을 맞추고 있기 때문에, 이러한 속성 래퍼는 올바른 선택이 아닙니다.

그래서, 나는 이 비디오에서 이것들을 다루지 않을 것이다.

SwiftUI 뷰가 소유한 데이터에 대해 자세히 알아보려면 "SwiftUI의 Data Essentials"를 시청하세요.

SwiftUI 외부의 데이터를 처리하는 한 가지 방법은 뷰를 초기화할 때 직접 값을 전달하는 것입니다.

SwiftUI가 소유하거나 관리하지 않는 원시 데이터를 전달하기 때문에, 데이터가 변경될 때 UIHostingController를 수동으로 업데이트할 책임이 있습니다.

예를 들어 봅시다.

여기 HeartRateView라는 이름의 SwiftUI 보기가 있습니다.

이 보기에는 정수로 저장된 심박수 beatsPerMinute라는 단일 속성이 있으며 값을 텍스트로 표시합니다.

우리는 HeartRateViewController라는 기존 뷰 컨트롤러 안에 UIHostingController를 삽입하여 이 HeartRateView를 표시합니다.

나중에 루트 뷰를 업데이트할 수 있도록 호스팅 컨트롤러에 대한 참조를 저장합니다.

기억하세요, SwiftUI HeartRateView는 값 유형이므로, 그 자체로 저장하면 별도의 복사본을 만들 수 있으며, UI를 업데이트할 수 없습니다.

HeartRateViewController는 HeartRateView를 채우는 데 사용되는 데이터를 소유합니다.

이 데이터는 beatsPerMinute 속성에 저장되며, beatsPerMinute 값이 변경되면 뷰를 업데이트하는 방법을 호출합니다.

업데이트 방법 내에서, 우리는 최신 beatsPerMinute 값을 사용하여 새로운 HeartRateView를 만든 다음, 그 뷰를 호스팅 컨트롤러의 루트뷰로 할당합니다.

이것은 UIKit에서 SwiftUI로 데이터를 가져올 수 있는 간단한 방법이지만, 데이터가 변경될 때마다 호스팅 컨트롤러의 rootView를 수동으로 업데이트해야 합니다.

이러한 업데이트가 자동으로 이루어지도록 하기 위해 다른 SwiftUI 데이터 프리미티브를 살펴봅시다.

@ObservedObject 및 @EnvironmentObject 속성 래퍼를 사용하면 ObservableObject 프로토콜을 준수하는 외부 모델 객체를 참조할 수 있습니다.

이 속성 래퍼를 사용할 때, SwiftUI는 데이터가 변경될 때 자동으로 보기를 업데이트합니다.

우리는 이 비디오에서 @ObservedObject 속성 래퍼에 초점을 맞출 것이지만, 앞서 언급한 "SwiftUI의 데이터 필수" 비디오에서 EnvironmentObject에 대해 자세히 알아볼 수 있습니다.

@ObservedObject를 만드는 방법을 살펴봅시다.

첫 번째 단계는 앱의 기존 부분이 소유한 모델 객체를 취하고 ObservableObject 프로토콜을 준수하도록 하는 것입니다.

다음으로, 우리는 모델을 SwiftUI 뷰에 @ObservedObject 속성으로 저장합니다.

ObservableObject를 SwiftUI에 연결하면 속성 중 하나가 변경될 때 뷰를 업데이트할 수 있습니다.

HeartRateView 예제로 돌아가서 이것을 연결해 봅시다.

우리 앱에는 beatsPerMinute 속성을 포함하는 HeartData라는 클래스가 있습니다.

우리는 프로토콜을 준수하여 그것을 ObservableObject로 만든다.

그런 다음 @Published 속성 래퍼를 beatsPerMinute 속성에 추가합니다.

이 속성 래퍼는 SwiftUI가 변경 사항에 대한 견해를 업데이트하도록 트리거하는 것입니다.

HeartRateView에서, 우리는 @ObservedObject 속성 래퍼로 주석이 달린 속성에 HeartData를 저장합니다.

뷰의 본문에서, 우리는 HeartData에서 직접 beatsPerMinute를 표시합니다.

이제, 우리의 뷰 컨트롤러에서 이것들을 함께 사용합시다.

여기 HeartRateViewController가 있습니다.

그것은 HeartData ObservableObject를 속성에 저장합니다.

이 속성은 SwiftUI 뷰 안에 있지 않기 때문에, 여기서 속성 래퍼를 사용할 필요가 없습니다.

HeartRateViewController는 호스팅 컨트롤러의 rootView가 되는 HeartRateView를 만드는 데 사용되는 HeartData 인스턴스로 초기화됩니다.

다이어그램은 이것이 어떻게 합쳐지는지 보여준다.

우리는 분당 78비트의 심박수를 포함하는 현재 HeartData 인스턴스를 가져옵니다.

그런 다음 SwiftUI HeartRateView에 연결하는 HeartData 인스턴스로 새로운 HeartRateViewController를 만듭니다.

몇 초 후, 다음 심박수 데이터 샘플이 도착하면, 심장 데이터의 beatsPerMinute 속성이 94로 업데이트됩니다.

이것은 ObservableObject에 게시된 속성을 변경하기 때문에, HeartRateView는 새로운 값을 표시하도록 자동으로 업데이트됩니다.

데이터가 변경되면 더 이상 호스팅 컨트롤러를 수동으로 업데이트할 필요가 없습니다.

이것이 ObservableObject가 UIKit에서 SwiftUI로 데이터를 연결하는 좋은 방법인 이유입니다.

다음으로, 컬렉션 뷰와 테이블 뷰 셀에서 SwiftUI를 사용하는 것에 대해 이야기해 봅시다.

iOS 16의 새로운 기능은 UIHostingConfiguration으로, 기존 UIKit, 컬렉션 및 테이블 뷰 내에서 SwiftUI의 힘을 활용할 수 있습니다.

UIHostingConfiguration을 사용하면 추가 뷰 또는 뷰 컨트롤러를 삽입하는 것에 대해 걱정할 필요 없이 SwiftUI를 사용하여 사용자 지정 셀을 쉽게 구현할 수 있습니다.

UIHostingConfiguration에 대해 더 자세히 알아보기 전에, UIKit의 셀 구성을 검토해 봅시다.

셀 구성은 UIKit에서 셀의 콘텐츠, 스타일 및 동작을 정의하는 현대적인 방법입니다.

UIView 또는 UIViewController와 달리, 구성은 가벼운 구조체일 뿐입니다.

만드는 것은 저렴하다.

구성은 셀의 모양에 대한 설명일 뿐이므로, 효과를 내기 위해서는 셀에 적용해야 합니다.

구성은 구성 가능하며, UICollectionView와 UITableView 셀 모두에서 작동합니다.

자세한 내용은 "현대 셀 구성"을 볼 수 있습니다.

그것을 염두에 두고, UIHostingConfiguration을 사용하기 시작합시다!

UIHostingConfiguration은 SwiftUI ViewBuilder로 초기화된 콘텐츠 구성입니다.

그것은 우리가 SwiftUI 코드를 작성하여 그 안에 직접 뷰를 만들 수 있다는 것을 의미합니다.

호스팅 구성을 렌더링하기 위해 UICollectionView 또는 UITableView 셀의 contentConfiguration 속성으로 설정합니다.

사용자 지정 심박수 셀을 구축하기 위해 이 호스팅 구성에서 SwiftUI 코드를 작성하기 시작합시다.

우리는 "심박수"라는 텍스트와 심장 이미지가 있는 라벨을 만드는 것으로 시작할 것입니다.

SwiftUI 뷰는 사용되는 컨텍스트에 따라 기본 스타일을 받습니다.

하지만 우리는 표준 SwiftUI 뷰 수정자를 사용하여 스타일링을 사용자 정의할 수 있습니다.

라벨에 foregroundStyle과 글꼴 수정자를 추가하여 이미지와 텍스트를 굵은 글꼴로 분홍색으로 만들어 봅시다.

우리는 그냥 일반 SwiftUI 코드를 작성하고 있기 때문에, 우리가 원할 때 언제든지 코드를 독립형 보기로 분해할 수 있습니다.

여기서, 우리는 HeartRateTitleView라는 새로운 SwiftUI 뷰를 만들고, 우리가 가지고 있던 코드를 본문으로 이동한 다음, 호스팅 구성에서 HeartRateTitleView를 사용했습니다.

세포에서 볼 수 있듯이, 그것은 정확히 같은 결과를 낳는다.

이제 HeartRateTitleView 안에 더 많은 뷰를 추가할 수 있습니다.

스페이서가 있는 HStack 안에 라벨을 넣은 다음, 그 옆에 있는 텍스트 보기에 현재 시간을 추가했습니다.

그건 지금까지 꽤 좋아 보여.

HeartRateTitleView 아래의 이 사용자 지정 셀에 더 많은 콘텐츠를 추가해 봅시다.

이를 위해, 우리는 호스팅 구성 안에 VStack을 삽입하여 HeartRateTitleView 아래에 더 많은 콘텐츠를 추가할 수 있습니다.

그런 다음 HStack에 두 개의 텍스트 뷰를 모아 90 BPM을 표시한 다음 몇 가지 수정자를 적용하여 원하는 방식으로 스타일을 지정할 것입니다.

이전에 HeartRateTitleView와 마찬가지로, 우리는 이 새로운 코드를 자체 SwiftUI 보기로 옮길 수 있습니다.

이제 같은 코드가 HeartRateBPMView의 본문으로 추출됩니다.

우리 핸드폰은 멋져 보이지만, 우리가 추가할 수 있는 다른 것에 대한 아이디어가 있어.

iOS 16의 새로운 기능은 스위프트 차트 프레임워크로, 단 몇 줄의 코드로 아름다운 그래프로 데이터를 시각화할 수 있습니다.

셀 바로 안에 작은 선 차트를 표시하기 위해 그것을 사용해 봅시다.

새로운 차트 보기를 사용하여, 우리는 최근 심박수 샘플을 시각화하고 셀의 BPM 보기 옆에 표시하는 작은 선 차트를 만듭니다.

차트를 생성하기 위해, 우리는 심박수 샘플 모음을 전달하고, 모든 샘플을 연결하는 라인마크를 그립니다.

우리는 선의 각 샘플을 나타내기 위해 원 기호를 추가하고 분홍색 전경 스타일을 적용하여 차트를 HeartRateTitleView와 일치하도록 칠할 수 있습니다.

우리는 당신이 새로운 스위프트 차트 프레임워크로 할 수 있는 일의 표면만 긁고 있으므로, "Hello Swift Charts" 비디오를 확인하여 그것에 대해 자세히 알아보세요.

우리의 완성된 심박수 세포는 멋져 보일 뿐만 아니라, 단 몇 분 만에 만들기 쉬웠다.

UIHostingConfiguration과 SwiftUI로 사용자 지정 셀을 구축하는 것이 얼마나 쉬운지.

UIHostingConfiguration이 지원하는 네 가지 특별한 기능에 대해 이야기해 봅시다.

기본적으로 루트 레벨 SwiftUI 콘텐츠는 UIKit의 셀 레이아웃 여백에 따라 셀 가장자리에서 삽입됩니다.

이것은 셀 콘텐츠가 인접한 셀의 내용과 탐색 모음과 같은 다른 UI 요소와 적절하게 정렬되도록 합니다.

때때로, 당신은 다른 여백을 사용하거나, 내용을 셀의 가장자리까지 확장하고 싶을 수도 있습니다.

이러한 경우, UIHostingConfiguration의 여백 수정자를 사용하여 기본 여백을 변경할 수 있습니다.

SwiftUI를 사용하여 셀의 배경 모양을 사용자 정의하려면, UIHostingConfiguration에서 배경 수정자를 사용할 수 있습니다.

UIHostingConfiguration의 배경과 콘텐츠 사이에는 몇 가지 주요 차이점이 있습니다.

배경은 셀의 콘텐츠 보기에서 SwiftUI 콘텐츠 아래의 셀 뒷면에 호스팅됩니다.

또한, 콘텐츠는 일반적으로 셀의 가장자리에서 삽입되지만, 배경은 셀의 가장자리에서 가장자리로 확장됩니다.

마지막으로, 자체 크기 조정 세포를 사용할 때, 세포 함량만이 세포의 크기에 영향을 미친다.

다음으로, 컬렉션 뷰 목록이나 테이블 뷰 안에 셀이 있을 때 사용할 수 있는 UIHostingConfiguration의 두 가지 특별한 기능을 살펴보겠습니다.

목록에서 셀 아래의 구분 기호는 기본적으로 호스팅 구성의 SwiftUI 텍스트에 자동으로 정렬됩니다.

이 예에서, 구분 기호의 앞 가장자리가 셀의 텍스트와 정렬되도록 이미지를 지나서 어떻게 삽입되는지 주목하세요.

호스팅 구성에서 구분 기호를 다른 SwiftUI 보기로 정렬해야 하는 경우, alignmentGuide 수정자를 사용하세요.

컬렉션 뷰 목록이나 테이블 뷰 안에 있을 때, SwiftUI로 직접 행에 대한 스와이프 동작을 구성할 수 있습니다.

swipeActions 수정자 안에 버튼을 만들면, 셀을 스와이프하여 사용자 지정 작업을 표시하고 수행할 수 있습니다.

완전한 예시를 찾으려면 이 비디오의 샘플 코드를 다운로드하세요.

스와이프 동작을 정의할 때, 버튼이 표시된 항목에 대한 안정적인 식별자를 사용하여 동작을 수행하도록 하십시오.

셀이 보이는 동안 변경되어 스와이프 동작이 잘못된 항목에 작용할 수 있으므로 인덱스 경로를 사용하지 마십시오.

셀에서 UIHostingConfiguration을 사용할 때, 탭 처리, 강조 표시 및 선택과 같은 셀 상호 작용은 여전히 컬렉션 뷰 또는 테이블 뷰에서 처리된다는 것을 명심하십시오.

이러한 UIKit 셀 상태에 대해 SwiftUI 뷰를 사용자 정의해야 하는 경우, 셀의 configurationUpdateHandler 내에서 호스팅 구성을 만들고 SwiftUI 코드에 제공된 상태를 사용할 수 있습니다.

configurationUpdateHandler는 셀의 상태가 변경될 때마다 다시 실행되며, 새 상태에 대한 새로운 UIHostingConfiguration을 만들고 셀에 적용합니다.

이 예에서, 우리는 셀이 선택될 때 상태를 사용하여 체크 표시 이미지를 추가합니다.

이제 UIHostingConfiguration에 익숙해졌으니, 모델 레이어에서 SwiftUI를 사용하여 셀로 채워진 UICollectionView 또는 UITableView로의 데이터 흐름을 관리하는 방법에 대해 논의해 봅시다.

우리의 목표는 이 건강 상태 목록을 만드는 것이다.

이 예에서, 우리는 UICollectionView를 사용하고 있지만, 우리가 논의하는 모든 것은 UITableView에 동등하게 적용됩니다.

관련된 구성 요소를 살펴봅시다.

우리 앱에는 컬렉션 보기에 표시할 MedicalCondition 모델 개체 컬렉션이 있습니다.

이 컬렉션의 각 항목에 대해, 우리는 그 건강 상태를 표시하기 위해 컬렉션 보기에 셀을 만들고 싶습니다.

이를 위해, 우리는 컬렉션 뷰에 연결된 다양한 데이터 소스를 만들 것입니다.

그런 다음, 데이터 수집에서 MedicalCondition 모델 객체의 식별자로 분할 가능한 데이터 소스 스냅샷을 채워야 합니다.

분할 가능한 데이터 소스 스냅샷은 MedicalCondition 객체 자체가 아니라 각 MedicalCondition의 고유 식별자를 포함하는 것이 중요합니다.

이를 통해 분할 가능한 데이터 소스는 각 항목의 신원을 정확하게 추적하고 나중에 새 스냅샷이 적용될 때 올바른 변경 사항을 계산할 수 있습니다.

이러한 항목 식별자가 있는 스냅샷을 다른 데이터 소스에 적용하면 컬렉션 보기가 자동으로 업데이트되어 각 항목에 대한 새 셀이 생성됩니다.

각 셀은 UIHostingConfiguration에서 SwiftUI 뷰를 사용하여 하나의 MedicalCondition을 표시하도록 구성되어 있습니다.

이제 SwiftUI로 구축된 셀을 표시하고 있기 때문에, 데이터가 변경될 때 UI 업데이트를 처리해야 합니다.

우리가 별도로 처리해야 할 두 가지 유형의 변화가 있다.

첫 번째 유형은 데이터 수집 자체가 바뀔 때이다.

예를 들어, 항목이 삽입, 재정렬 또는 삭제될 때.

이러한 변경 사항은 분할 가능한 데이터 소스에 새 스냅샷을 적용하여 처리됩니다.

확산 가능한 데이터 소스는 이전 스냅샷과 새로운 스냅샷을 다르고 컬렉션 보기에 필요한 업데이트를 수행하여 셀을 삽입, 이동 또는 삭제합니다.

데이터 수집 자체의 변경 사항은 셀 내부의 어떤 것에도 영향을 미치지 않기 때문에, UIKit 또는 SwiftUI를 사용하여 셀을 구축하든 이러한 유형의 변경 사항을 동일하게 처리합니다.

우리가 처리해야 할 두 번째 유형의 변화는 개별 모델 객체의 속성이 변경될 때이다.

이러한 변화는 종종 기존 셀의 뷰를 업데이트해야 한다.

디퍼블 데이터 소스는 스냅샷에 항목 식별자만 포함되어 있기 때문에 기존 항목의 속성이 언제 변경되는지 알 수 없습니다.

전통적으로, UIKit을 사용할 때, 스냅샷에서 항목을 재구성하거나 다시 로드하여 이러한 변경 사항에 대해 다양한 데이터 소스에 수동으로 알려야 합니다.

하지만 셀에서 SwiftUI를 사용할 때, 이것은 더 이상 필요하지 않습니다.

SwiftUI 뷰의 ObservedObject 속성에 ObservableObject 모델을 저장함으로써, 모델의 게시된 속성에 대한 변경은 자동으로 SwiftUI를 트리거하여 뷰를 새로 고칩니다.

이것은 모델과 셀 내부의 SwiftUI 뷰 사이의 직접적인 연결을 설정합니다.

변경이 이루어지면, 셀의 SwiftUI 뷰는 디피터블 데이터 소스나 UICollectionView를 거치지 않고 직접 업데이트됩니다.

셀의 데이터가 변경되면, 새로운 콘텐츠에 맞게 셀이 성장하거나 축소해야 할 수 있습니다.

하지만 SwiftUI 셀 콘텐츠가 UIKit을 거치지 않고 직접 업데이트되고 있다면, 컬렉션 뷰는 셀의 크기를 조정하는 방법을 어떻게 알 수 있나요?

UIHostingConfiguration은 UIKit의 새로운 기능을 활용하여 이 작업을 합니다.

iOS 16에서 UICollectionView와 UITableView의 자체 크기 조정 셀도 이제 자체 크기 조정이 가능합니다!

이것은 기본적으로 활성화되어 있으므로 UIHostingConfiguration을 사용하고 SwiftUI 콘텐츠가 변경될 때 필요한 경우 포함된 셀의 크기가 자동으로 조정됩니다.

WWDC 2022의 "What's New in UIKit" 비디오에서 이 새로운 기능이 어떻게 작동하는지 자세히 알아볼 수 있습니다.

처리해야 할 데이터 흐름의 한 가지 측면이 더 있으며, 그것은 SwiftUI 보기에서 앱의 다른 부분으로 데이터를 다시 보내는 것입니다.

다시 한번, ObservableObject가 당신을 덮었습니다!

ObservableObject의 게시된 속성에 대한 양방향 바인딩을 만들 수 있습니다.

ObservableObject에서 SwiftUI로 데이터가 흐를 뿐만 아니라, SwiftUI는 모델 객체의 속성에 변경 사항을 다시 쓸 수 있습니다.

MedicalCondition 셀의 텍스트를 편집할 수 있게 하여 양방향 바인딩을 만드는 간단한 예를 살펴봅시다.

여기 우리의 ObservableObject, MedicalCondition이 있습니다.

ID 속성에 고유 식별자를 저장합니다.

이것은 다른 데이터 소스 스냅샷을 채우는 데 사용되는 식별자입니다.

그리고 이 출판된 재산은 건강 상태의 텍스트를 저장한다.

여기 각 셀 안에 건강 상태 텍스트를 표시하는 MedicalConditionView가 있습니다.

지금 이 텍스트는 읽기 전용이므로, 편집할 수 있도록 합시다.

우리가 해야 할 일은 텍스트 보기를 TextField로 변경하고 달러 기호 접두사를 추가하여 MedicalCondition의 텍스트 속성에 바인딩을 만드는 것입니다.

텍스트 필드에 입력할 때, 이 바인딩을 통해 SwiftUI는 변경 사항을 ObservableObject에 직접 다시 쓸 수 있습니다.

SwiftUI로 양방향 데이터 흐름을 설정하는 것은 정말 간단합니다.

UIHostingController는 SwiftUI 콘텐츠를 UIKit 앱에 삽입하는 강력한 방법입니다.

SwiftUI 뷰는 호스팅 컨트롤러의 뷰 내에서 렌더링되며, UIKit에서 뷰 컨트롤러를 사용할 수 있는 모든 곳에서 호스팅 컨트롤러를 사용할 수 있습니다.

UIHostingController를 사용할 때, 항상 앱에 뷰와 함께 뷰 컨트롤러를 추가해야 합니다.

도구 모음, 키보드 단축키 및 UIViewControllerRepresentable을 사용하는 보기와 같은 많은 SwiftUI 기능은 제대로 통합하기 위해 UIKit의 뷰 컨트롤러 계층에 연결해야 하므로 호스팅 컨트롤러의 보기를 호스팅 컨트롤러 자체와 분리하지 마십시오.

비교를 위해, UIHostingConfiguration을 셀에 적용할 때, SwiftUI 보기는 UIViewController 없이 셀에서 호스팅됩니다.

UIHostingConfiguration은 대부분의 SwiftUI 기능을 지원합니다.

하지만 UIViewControllerRepresentable에 의존하는 SwiftUI 뷰는 셀 내에서 사용할 수 없다는 것을 명심하세요.

UIHostingController와 UIHostingConfiguration을 사용하면 SwiftUI를 UIKit 앱에 통합하는 두 가지 좋은 방법이 있습니다.

SwiftUI는 기존 UIKit 앱에 원활하게 통합됩니다. UIHostingController를 사용하여 앱 전체에 SwiftUI를 추가하십시오.

UIHostingConfiguration을 사용하여 컬렉션과 테이블 보기에서 사용자 지정 셀을 만드세요.

그리고 ObservableObject를 활용하면 데이터와 UI가 항상 동기화됩니다.

오늘 앱에 SwiftUI를 추가하세요!

봐줘서 고마워!

♪