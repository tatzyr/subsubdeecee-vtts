110371

- 안녕. 저는 Xcode 팀의 디자이너인 Jake입니다.

멀티플랫폼 앱 개발은 Xcode 14에서 다음 단계로 나아가고 있다.

단일 앱 타겟은 이제 단일 공통 코드베이스를 유지하고, 기본적으로 설정을 공유하며, 필요한 경우 조건화할 수 있는 새로운 방법을 허용하면서 여러 플랫폼에서 더 많은 목적지를 지원할 수 있습니다.

먼저, 우리는 멀티플랫폼 앱 타겟이 무엇인지, 그리고 어떤 경우에 가장 잘 작동하는지 다룰 것입니다.

다음으로, 우리는 여러 목적지와 플랫폼을 지원하기 위해 프로젝트를 수정한 다음, 새로운 플랫폼에서 구축하고 실행하기 위해 프로젝트를 업데이트할 것입니다.

우리는 지원되는 각 플랫폼에서 앱이 멋지게 보이도록 할 것입니다...

그리고 마지막으로 우리는 Xcode Cloud를 프로젝트 변경 사항과 통합할 것입니다.

먼저, 앱이 여러 플랫폼을 지원할 수 있도록 어떤 기술을 사용하고 싶은지 이해합시다.

Xcode 14 이전에 앱이 iOS와 macOS를 지원하려면 두 개의 별도의 대상이 필요합니다.

프로젝트에 상당히 다른 코드베이스가 필요하거나, 다른 플랫폼 간에 설정을 거의 공유하지 않거나, 각 앱 대상이 다른 기본 기술에 크게 의존하는 경우 이것은 좋습니다.

만약 그것이 오늘날 당신의 프로젝트에서 여전히 사실이라면, 가장 좋은 방법은 각 플랫폼에 대해 별도의 목표를 계속 사용하는 것입니다.

Xcode 14에서 단일 앱 대상은 iPhone, iPad, Mac 및 Apple TV와 같은 많은 목적지에 대한 지원을 선언할 수 있습니다.

이것은 공통 코드베이스를 사용하고 필요할 때 사용자 지정을 허용하면서 모든 대상에서 대부분의 설정을 공유하는 앱에 적합합니다.

Xcode 14에서 멀티플랫폼 앱이 어떻게 작동하는지 살펴봅시다.

우리가 처음부터 시작한다면, 시작하는 좋은 방법은 Xcode에서 새로운 프로젝트를 만들 때 새롭고 개선된 멀티플랫폼 앱 템플릿을 사용하는 것입니다.

멀티플랫폼 앱 템플릿은 수명 주기와 인터페이스에 SwiftUI를 사용하며, 이는 iPhone, iPad 및 Mac을 지원하도록 기본적으로 구성된 타겟으로 시작합니다.

이것은 새로운 프로젝트를 위한 환상적인 구성이다.

우리는 SwiftUI를 사용하고 있기 때문에, 각 플랫폼 SDK의 전체 기능 세트에 액세스할 수 있으며, 각 플랫폼이 제공하는 것을 활용하는 놀라운 새로운 앱을 만들 수 있습니다.

기존 프로젝트는 또한 앱 대상의 여러 목적지에 대한 지원을 선언하고 SwiftUI를 사용하여 각 플랫폼의 SDK의 모든 기능에 액세스할 수 있습니다.

기존 iOS 앱에 Mac 대상을 추가하는 방법을 살펴봅시다.

나는 푸드 트럭 앱을 만들고 있는데, 아이폰과 아이패드에서 잘 작동한다.

저는 이 iOS 앱에 꽤 만족하며, 이제 Mac에 가져와 플랫폼과 기능을 수용하고 싶습니다.

Xcode에서 우리 프로젝트가 어떻게 생겼는지 살펴봅시다.

내 앱 대상을 살펴보면, 내 앱이 지원하는 모든 목적지 목록을 볼 수 있습니다.

당신은 내가 이미 iPad용으로 설계된 Mac 목적지를 가지고 있다는 것을 알 수 있습니다.

이를 통해 Apple Silicon이 탑재된 Mac 컴퓨터에서 수정되지 않은 iOS 앱을 실행할 수 있습니다.

이것은 Mac 지원을 시작하는 좋은 방법이지만, Mac 지원을 한 단계 끌어올리고 싶습니다.

말하자면, "Mac용으로 설계된" 경험을 추가해 봅시다.

지원되는 목적지 목록을 쉽게 편집하고 앱에 Mac 목적지를 추가할 수 있습니다.

Mac 목적지에는 몇 가지 옵션이 있습니다: Mac, Mac Catalyst 및 Designed for iPad, 내 앱이 이미 지원하기 때문에 마지막은 회색으로 표시됩니다.

Mac과 Mac Catalyst 중에서 선택하는 것은 주로 우리가 가장 관심이 있는 기술에 달려 있습니다.

우리 앱이 앱의 핵심에서 UIKit 또는 스토리보드를 많이 사용했다면, Mac Catalyst는 기존 iPad 앱을 호환 가능한 Mac 앱으로 변환하는 좋은 방법이 될 것입니다.

그러나, 우리의 앱은 "Mac 옵션"을 Mac 앱을 만들기 위한 최선의 선택으로 만드는 SwiftUI를 사용합니다.

우리는 제한 없이 macOS SDK의 모든 기능을 갖춘 놀라운 Mac 모양과 느낌을 즉시 얻을 수 있습니다.

즉, 유연성을 원한다면 iOS 앱에서 UIKit을 자유롭게 사용하고 macOS 앱에서 AppKit을 자유롭게 사용할 수 있습니다.

이 모든 것을 염두에 두고, SwiftUI로 작업하기 위한 최고의 옵션인 Mac을 선택합시다.

내가 선택하면, Xcode는 Mac 지원을 위해 프로젝트를 준비하는 데 필요한 몇 가지 변경 사항을 알려줄 것이다.

이 경우, Xcode는 Mac에서 지원되는 종속성과 프레임워크만 포함하도록 대상을 업데이트할 것이다.

Xcode가 내 코드를 변경하지 않는다는 점에 유의하는 것이 중요하므로, Mac에서 사용할 수 없는 API를 호출하는 경우, 그 문제를 직접 해결해야 합니다.

Mac 옵션을 선택하면, 지원되는 목적지 목록에 추가됩니다.

Xcode에서 개발할 때 하나 이상의 Mac 목적지를 갖는 것은 완전히 유효합니다.

이것은 "Mac Catalyst" 또는 "Designed for iPad"에서 전체 Mac 앱으로 전환하는 경우 특히 유용합니다.

이것은 내가 Xcode 내에서 각 Mac 제품을 계속 테스트할 수 있다는 것을 의미한다.

그리고 나는 내 앱을 개발할 때 반드시 하나의 선택에 국한되는 것은 아니다.

그러나, 네이티브 Mac 앱을 App Store에 게시한다면, Designed for iPad 앱은 고객이 더 이상 사용할 수 없으므로 Xcode는 이 목적지를 제거하는 빠른 방법을 제공합니다.

하지만 내 기본 Mac 경험에 만족하면 이 목적지를 제거하는 것을 고려할 것이다.

처음부터 시작하든 기존 앱에 새 목적지를 추가하든, Xcode에서 단일 대상을 사용하면 기본적으로 코드와 빌드 설정을 공유할 수 있습니다.

앱의 표시 이름이나 최소 배포 버전과 같은 개별 설정을 사용자 정의하고 싶은 경우가 있을 수 있습니다.

Xcode 14의 개선된 대상 편집기에서 그것을 하는 방법을 살펴봅시다.

많은 앱 대상 설정에는 이제 그 값을 조건화하는 방법이 포함되어 있다.

지원되는 설정에서, 프로젝트의 각 빌드 구성에 대한 기본값을 설정할 수 있는 편집기를 공개할 수 있습니다.

제가 추가한 사용자 지정 베타 구성과 새로운 Xcode 프로젝트와 함께 제공되는 표준 디버그 및 릴리스 구성이 있습니다.

베타 구성으로 빌드할 때 앱에 다른 표시 이름을 지정하고 싶기 때문에, 바로 여기에서 이름을 편집할 수 있습니다.

입력할 때, Xcode에서 앱의 표시 이름이 이제 표시 이름이 가질 수 있는 모든 가능한 값의 판독값으로 대체된 것을 볼 수 있습니다.

필요한 경우, 어떤 SDK가 사용되고 있는지에 따라 값을 지정할 수 있는 조건을 추가할 수도 있습니다.

이것은 내가 Mac용으로 빌드할 때 베타 구성에 대한 특정 이름을 설정할 수 있게 해준다.

좋아, 내 생각에 우리는 일반 탭에서 하고 싶은 편집을 끝낸 것 같아.

우리가 해야 할 다른 변경 사항에 대해 서명 및 기능 탭을 살펴봅시다.

좋은 소식은, 자동 서명이 켜져 있으면, 취할 추가 단계가 없다는 것이다.

Mac 대상을 추가했을 때, Mac에 필요한 서명 인증서와 프로비저닝 프로필이 저를 대신하여 생성되었습니다.

내 iOS와 macOS 앱 제품 모두 기본적으로 동일한 번들 식별자를 사용하며, 이는 굉장합니다. 왜냐하면 그것은 내가 그것들을 App Store에 게시할 때 유니버설 구매에 사용할 수 있다는 것을 의미하기 때문입니다.

그래서 내 iOS 앱을 사는 사람들은 내 Mac 앱도 자동으로 받게 될 것이다.

내 앱은 또한 푸시 알림과 같은 기능을 사용한다.

macOS 앱에 적용할 수 있는 iOS 앱에 사용했던 모든 기능은 추가 작업 없이 적용됩니다.

그들은 심지어 하나의 자격 파일로 결합된다.

이제 앱에 여러 목적지에 대한 지원을 추가했으므로, 우리의 다음 목표는 그것을 구축하는 것입니다.

특히 새로운 Mac 지원과 같은 새로운 SDK가 관련된 경우, 새로운 목적지를 위한 앱을 구축하는 데 문제가 발생하는 것은 정상입니다.

그래서 이 일반적인 문제들 중 몇 가지를 살펴봅시다.

일부 프레임워크는 모든 플랫폼에서 사용할 수 없습니다.

우리는 사용할 수 없는 프레임워크를 가져오거나 연결하지 않도록 해야 합니다.

새로운 대상에 대한 지원을 추가할 때 Xcode는 코드를 변경하지 않으므로, 앱의 설정을 조건화한 방법과 마찬가지로 SDK를 기반으로 코드를 조건화해야 합니다.

이것은 API에서도 사실이다.

일부 기능은 우리가 구축하고 있는 SDK에 따라 사용할 수 없는 것으로 표시됩니다.

스위프트는 우리가 구축하고 있는 SDK에서 사용할 수 있는 기능만 포함하도록 코드의 일부를 조건화하는 방법을 제공합니다.

Xcode를 사용하면 일부 SDK를 빌드할 때 개별 파일을 컴파일해야 하는지 지정할 수 있습니다.

만약 내가 지금 당장 내 프로젝트를 만든다면...

난 어떤 문제도 보이지 않아.

그것은 여전히 iOS SDK를 사용하는 도구 모음에서 목적지를 선택했기 때문입니다.

macOS SDK에 대해 빌드하려면 목록에서 "My Mac"을 선택해야 합니다.

건물은 이제 몇 가지 새로운 문제를 드러내며, 우리가 예상했듯이, 그것들은 주로 가용성과 관련이 있다.

내 파일 중 하나에서, 나는 Mac에서 사용할 수 없는 ARKit을 가져오고 있다.

나는 이 가져오기 문을 #if canImport로 묶어 조건화할 수 있다.

이것은 프레임워크를 사용할 수 있는 알려진 플랫폼 목록을 관리하고 싶지 않고 단순히 사용할 수 없다면 포함하지 말라고 말하는 경우에 유용합니다.

그러나, 저는 여전히 이 파일 전체에 ARKit을 사용하고 있으므로, 때로는 SDK에 대한 전체 파일을 조건화하는 것이 더 합리적입니다.

타겟으로 돌아가서 빌드 단계 탭으로 이동하면, 내 파일을 검색할 수 있습니다...

그리고 iOS용으로만 컴파일해야 한다고 명시하세요.

구축 후, 일단 변경하면, Xcode는 새로운 문제를 보고합니다. Mac에서 사용할 수 있는 프레임워크인 SwiftUI에는 사용할 수 없는 것으로 표시된 기능이 있습니다.

특히, 저는 사용자가 테이블과 목록에서 편집하고 콘텐츠를 선택할 수 있도록 iOS에서 EditMode를 사용하고 있지만, macOS에는 EditMode가 존재하지 않습니다!

사용자는 이미 Mac에서 콘텐츠 행을 자유롭게 선택하고 편집할 수 있으므로, 이 코드가 iOS에서만 실행되도록 합시다.

나는 내 환경 재산과 아래의 EditMode를 사용하던 모든 장소를 조절할 수 있다.

이제, 이 속성을 사용하고 있던 장소도 이 onChange 수정자와 같이 컨디셔닝되어 있는지 확인해야 합니다.

나는 전체 수정자를 "if os" 조건으로 포장할 수 있다.

그리고 마지막으로, 저는 iOS 전용 도구 모음에서 EditButton 보기를 사용하고 있습니다.

좋아, 우리 앱을 실행해 보자.

아! 그건 살아! 우리의 앱은 이제 Mac에서 빌드되고 실행됩니다!

우리의 앱이 이제 새로운 플랫폼에서 구축되고 실행되기 때문에 우리의 일이 끝났다는 것을 의미하지는 않습니다.

새로운 플랫폼의 사용자가 기대하는 것에 대해 앱 경험을 개선하고 싶은 경우가 있을 것입니다.

또한, iOS 전용 기능을 다듬는 것이 우리의 여정의 끝이 아니다.

우리는 이제 macOS SDK의 모든 기능을 가지고 있습니다.

이제 내 앱이 Mac에서 실행되는 것을 보았기 때문에, 나는 새로운 맥락에서 자연스럽게 느껴지지 않는 내 앱에 대한 단점을 알아차리고 있다.

이 그리드 뷰에 있는 이 도넛들은 너무 커 보인다!

그것은 우리의 그리드 아이템이 터치를 위해 설계되었기 때문이다.

이와 같은 상황은 UI 요소의 포인트 크기를 선언하거나 단일 플랫폼만 염두에 두고 컨트롤을 사용자 정의할 때 발생합니다.

Mac에서는 훨씬 더 정확한 포인팅 장치가 있기 때문에 버튼이나 썸네일을 그렇게 크게 만들 필요가 없습니다.

이것은 우리가 어떤 SDK를 구축하고 있는지에 따라 우리 프로젝트의 상수를 조건화할 수 있는 좋은 사례이다.

우리가 앱을 다른 플랫폼으로 가져올 때, 새로운 플랫폼의 기대에 따라 이러한 많은 선택을 재고하는 것이 중요합니다.

우리가 어떤 SDK를 만들고 있는지 기반으로 다른 값을 지정하는 것을 살펴봅시다.

내가 자주 사용하는 한 가지 기술은 상수를 계산된 속성으로 만들고, "#if os"를 사용하여 반환되는 것을 조건화하는 것이다.

이것을 계산된 속성으로 변환하고 이전에 상수였던 것을 반환합시다...

하지만 iOS에서만 그 값을 반환하세요.

아, 80은 훨씬 더 자연스럽게 느껴져.

이제, macOS SDK를 사용하는 것과 관련하여, SwiftUI에는 메뉴 표시줄에 자체 UI 요소를 추가할 수 있는 멋진 새로운 기능이 있습니다.

사용자가 빠르고 쉽게 접근할 수 있도록 하고 싶은 앱에 대한 요약 보기가 있습니다.

내 앱 선언으로 가자, 그리고 여기, 내 메뉴 바 엑스트라에 새로운 장면을 추가할 수 있어.

하지만, 이것은 macOS 전용 기능이기 때문에, macOS SDK를 위해 조건화해야 합니다.

만들고 달리고 한 번 보자.

아 좋아, 내 트럭 아이콘이 이제 메뉴 표시줄에 나타나.

멋져요, 이제 제 Mac 사용자는 메뉴 표시줄에서 바로 오늘의 정보를 빠르게 볼 수 있습니다.

SwiftUI를 사용할 때, 우리는 각 플랫폼의 전체 SDK에 액세스할 수 있으며 멋진 기능을 활용할 수 있습니다.

우리가 앱을 다른 플랫폼으로 가져올 때, 우리는 종종 새로운 플랫폼의 맥락에서 작업할 때 많은 과거의 선택을 재고해야 한다는 점에 유의하는 것이 중요합니다.

SwiftUI는 플랫폼의 기대치를 API에 직접 전달한다.

많은 인터페이스 요소는 각 플랫폼에서 멋지게 보이는 자동 모양을 얻을 것이다.

반대로, 그것은 우리가 컨트롤과 UI의 다른 부분을 크게 사용자 정의할 때 자동 스타일링을 잃을 수 있다는 것을 의미하므로, 우리는 항상 모든 곳에서 UI가 멋지게 보이는지 다시 확인해야 합니다.

즉, 우리가 멋진 앱을 구성할 때, 우리는 휴먼 인터페이스 지침에 명시된 모범 사례를 따라야 합니다.

이제 앱의 로컬 변경 사항에 만족했으므로, 앱 제품을 보관하고 Xcode에서 수행하거나 Xcode Cloud로 자동화할 수 있는 App Store Connect에 업로드할 때입니다.

준비가 되면, TestFlight의 내부 및 외부 테스터와 앱을 공유하고 App Store에 출시할 수 있습니다.

App Store Connect에 업로드하려면 제품을 보관해야 합니다.

우리가 하나의 목표를 가지고 있다고 해서 우리가 하나의 제품만 가지고 있다는 것을 의미하지는 않는다.

우리는 각 플랫폼에 대해 보관하고 개별적으로 업로드해야 합니다.

로컬로 구축하고 보관하는 경우, 아카이브를 만들 SDK가 있는 대상을 선택해야 합니다.

macOS 앱을 제작하려면, 목적지 목록에서 "내 Mac"을 선택해야 합니다. 그렇지 않으면 iOS 앱을 제작하기 위해 iOS 기기를 선택해야 합니다.

목적지를 선택하면, "제품 아카이브"를 선택하여 아카이브를 만들 수 있습니다.

아카이브가 완료되면, Xcode의 주최자 창을 사용하여 App Store Connect에 업로드할 수 있습니다.

Xcode Cloud를 사용하는 경우, 워크플로우에 작업을 추가하여 제품을 구축, 테스트 및 보관할 수 있습니다.

워크플로우의 작업 목록에서 각 제품을 구축, 테스트, 분석 및 보관할 새로운 항목을 만들 수 있습니다.

이 경우, 저는 iOS 앱과 macOS 앱을 가지고 있습니다.

한 걸음 더 나아가 App Store Connect에 앱 업로드를 자동화하기 위한 배포 준비를 포함할 수 있으며, 내부 TestFlight 팀에 즉시 빌드를 보내고 프레스에서 뜨거운 변경 사항에 대한 피드백을 받기 시작할 수도 있습니다.

요약하자면, Xcode 14는 이제 여러 플랫폼에서 더 많은 목적지를 지원할 수 있는 간소화된 앱 타겟으로 멀티 플랫폼 앱 개발을 한 단계 끌어올립니다.

단일 앱 타겟을 사용하면 기본적으로 공통 코드베이스와 공유 설정을 유지할 수 있습니다.

입증된 바와 같이, 우리는 필요에 따라 설정과 코드를 조건화하여 플랫폼 기대치에 가장 잘 맞도록 앱을 사용자 정의할 수 있습니다.

나머지는 너에게 달렸어.

올해 Xcode의 새로운 기능과 개선 사항에 대해 자세히 알아보려면, "Xcode의 새로운 기능"을 확인하세요.

Xcode와 SwiftUI의 힘으로 어떤 놀라운 아이디어를 실현하는지 빨리 보고 싶습니다.