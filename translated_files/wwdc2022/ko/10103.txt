10103

♪ ♪

안녕 그리고 환영해.

제 이름은 Apple의 GPU 소프트웨어 팀의 Kelvin Chiu입니다.

오늘, 저는 MetalFX 업스케일링으로 메탈 애플리케이션 성능을 향상시키는 방법에 대해 이야기하겠습니다.

MetalFX는 Metal 애플리케이션을 위한 플랫폼에 최적화된 그래픽 효과를 제공하는 새로운 API입니다.

고성능 확장을 가능하게 하여 렌더링 품질을 유지하면서 애플리케이션 성능을 향상시킬 수 있습니다.

고해상도로 프레임을 렌더링하는 것은 GPU 시간이 든다.

그 시간을 줄이기 위해, 더 낮은 해상도로 렌더링하는 것은 보통 트릭을 할 것이다.

그러나, 절충안은 렌더링 품질이 낮다.

MetalFX 업스케일링을 통해 애플리케이션은 이제 렌더링 품질을 손상시키지 않으면서 렌더링 시간을 단축하면서 더 낮은 해상도로 프레임을 렌더링할 수 있습니다.

MetalFX 업스케일링은 Apple 장치에서 가장 잘 실행되도록 최적화되어 있습니다.

그리고 그것은 또한 당신의 게임에서 채택하기 쉽습니다.

MetalFX는 두 가지 업스케일링 효과를 제공하며, 자세히 설명하겠습니다.

공간 업스케일링은 사용하기 쉽고 성능 향상을 제공합니다.

일시적인 안티앨리어싱과 업스케일링은 여러 프레임의 정보를 통합하여 더 높은 품질의 출력을 생성합니다.

그런 다음 이러한 효과를 사용하기 위한 모범 사례에 대해 이야기하겠습니다.

마지막으로, 나는 그들이 실제로 행동하는 것을 보여주는 데모로 세션을 끝낼 것이다.

공간 확장부터 시작합시다.

MetalFX 공간 업스케일링은 입력의 공간 정보를 분석하여 새롭고 확장된 샘플을 생성합니다.

공간 확장을 통합하는 것은 간단하다.

공간적으로 업그레이드된 색상 출력을 생성하기 위해 안티앨리어싱 입력 색상만 필요합니다.

일반적인 게임 렌더링 파이프라인에는 안티앨리어싱 렌더링과 다양한 후처리 효과를 포함한 다양한 렌더링 패스가 있습니다.

게임의 톤 매핑 프로세스가 완료된 직후 MetalFX 공간 확장을 추가하세요.

입력이 톤 매핑되고 지각 색상 공간에 있다면 가장 잘 작동할 것이다.

MetalFX 공간 업스케일링을 확인해 봅시다.

이 체스 장면은 4K 해상도의 고품질 참조 렌더러로 제작됩니다.

그것은 광선 추적 반사와 그림자와 같은 복잡한 그래픽 효과와 함께 추적된 경로이다.

여기 왼쪽에 540p 입력이 있는 나란히 비교가 있습니다...

...그리고 오른쪽에 MetalFX 공간 확장이 있는 1080p 출력.

왼쪽에 있는 여왕을 확대하면, 이미지는 디테일이 부족하고 해상도가 낮다.

오른쪽에서, 공간적으로 확장된 출력은 더 선명한 반사와 더 세련된 가장자리를 가지고 있다.

다음으로, MetalFX 공간 확장을 구현하는 방법을 안내해 드리겠습니다.

메탈에서는 일반적으로 명령을 명령 버퍼로 인코딩하고 효과에 대한 입력을 생성하는 명령 인코더를 만듭니다.

마찬가지로, MetalFX 효과 객체를 만들어 명령을 명령 버퍼로 인코딩하고 효과를 수행할 수 있습니다.

마지막으로, MetalFX 출력을 사용하는 명령을 인코딩하기 위해 세 번째 명령 인코더를 만드세요.

애플리케이션이 처음 시작되거나 디스플레이가 해상도를 전환할 때만 새로운 공간 스케일러 객체를 만들어야 합니다.

먼저, MTLFXSpatialScalerDescriptor를 만들고 구성하세요.

그런 다음, makeSpatialScaler() 메서드를 호출하여 스케일러 객체를 만드세요.

초기화 코드에서, 설명자로 시작하세요.

입력 및 출력 텍스처의 너비와 높이를 모두 채우세요.

그런 다음, 나중에 스케일러 객체에 설정될 텍스처의 텍스처 형식을 설정하세요.

색상 처리 모드를 설정하세요.

이것은 입력과 출력이 어떤 색 공간이 있는지 API에 알려줍니다.

값을 지각, 선형 또는 HDR 색 공간으로 설정할 수 있습니다.

설명자가 채워지면, 스케일러 객체를 만드세요.

스케일러 객체가 생성되면, 객체의 속성을 원하는 만큼 자주 수정하고 encode() 메서드를 호출하여 업스케일링 프로세스를 시작할 수 있습니다.

프레임당 그리기 코드에서 스케일링 효과를 명령 버퍼로 인코딩하기 전에 스케일러 객체에 올바른 입력 및 출력 텍스처가 설정되어 있는지 확인하십시오.

공간 확장은 성능을 향상시키는 간단한 방법을 제공한다.

그리고 더 높은 품질의 렌더링을 원할 때, 그것이 MetalFX 일시적인 안티앨리어싱과 업스케일링이 들어오는 곳입니다.

일시적인 AA와 업스케일링은 이전 프레임의 데이터를 사용하여 고품질의 업스케일 출력을 생성하는 기술이다.

이것은 이전 프레임의 업스케일링 출력이 현재 프레임 업스케일링의 입력 중 하나로 사용된다는 것을 의미합니다.

임시 AA와 업스케일링이 이전 프레임의 데이터를 필요로 하는 이유를 더 잘 이해하기 위해, 먼저 슈퍼샘플링의 개념을 검토하겠습니다.

슈퍼샘플링에서, 픽셀당 여러 샘플이 계산되며, 이는 단일 픽셀 값으로 통합됩니다.

픽셀당 더 많은 샘플을 통합할수록, 결과는 더 좋을 것이다.

그러나, 단일 프레임 내에서 픽셀당 여러 샘플을 계산하는 데는 큰 비용이 든다.

단일 프레임에서 픽셀당 여러 위치를 샘플링하는 대신, 시간 샘플링을 수행할 수 있습니다.

시간 샘플링은 주어진 프레임의 모든 픽셀에 대해 다른 샘플 위치를 렌더링하는 개념이다.

이를 통해 상당히 저렴한 비용으로 여러 프레임에서 슈퍼샘플링 품질을 달성할 수 있습니다.

여러 프레임에서 샘플을 축적하고 샘플 위치를 고려함으로써, 시간 AA 및 업스케일링은 대상 해상도 픽셀에 샘플을 적절하게 통합하여 고품질 안티 앨리어싱 업스케일드 출력을 얻을 수 있습니다.

그러나, 콘텐츠는 종종 프레임 간에 바뀌기 때문에, 이러한 변화를 감지하려면 더 많은 입력 데이터가 필요할 것이다.

이전 프레임 출력 외에도, 임시 AA 및 업스케일링은 장면의 모션 및 깊이 데이터뿐만 아니라 불안한 색상 입력도 필요합니다.

나는 그들이 왜 필요한지 설명하기 위해 그들 각각을 살펴볼 것이다.

불안한 색상 입력부터 시작합시다.

여기 지터 없이 렌더링된 빨간색 삼각형이 있습니다.

밝은 흰색 윤곽선은 렌더링되는 삼각형을 나타낸다.

각각의 작은 사각형은 픽셀을 나타낸다.

그리고 중간에 있는 회색 점이 픽셀이 샘플링되는 곳이다.

이것은 작은 지터로 렌더링될 때 같은 삼각형의 출력이다.

회색 점은 주어진 픽셀의 샘플링 위치를 보여준다.

지터 오프셋은 원하는 수의 샘플을 완전히 수집하기 위해 설정된 수의 프레임에 대해 고유해야 합니다.

나는 나중에 지터 시퀀스의 주제를 자세히 다룰 것이다.

다음은 현장의 모션 정보입니다.

장면의 모션 데이터는 물체가 이전 프레임에서 얼마나 많이 그리고 어떤 방향으로 이동했는지를 나타냅니다.

Temporal AA 및 업스케일링은 모션 정보를 사용하여 샘플을 올바르게 수집하기 위해 이전 프레임에서 해당 위치를 추적하고 찾습니다.

또 다른 입력은 현장의 깊이 정보이다.

장면의 깊이 데이터는 전경에 있는 것과 배경에 있는 것을 나타냅니다.

이것은 전경 가장자리 안티앨리어싱의 우선 순위를 정할 때 중요하며 이전 프레임에서 샘플을 수집할 때 다른 물체가 새로 노출될 수 있는 단서를 제공합니다.

마지막 입력 데이터는 이전 프레임의 출력이다.

이전 프레임의 출력에는 이전에 통합된 모든 샘플이 포함되어 있으며, 픽셀당 샘플 수를 늘리기 위해 현재 프레임의 흔들림 색상 입력과 혼합됩니다.

현재 프레임과 이전 프레임의 정보를 결합함으로써, 결과 이미지는 이제 더 많은 세부 사항을 가지고 있다.

MetalFX는 업스케일된 출력을 추적하므로, 현재 렌더링된 프레임에서 색상, 모션 및 깊이만 전달하면 됩니다.

일반적인 게임의 렌더링 파이프라인으로 돌아가서, MetalFX 임시 AA 및 업스케일링은 후처리 효과 전에 실행되어야 합니다. 이러한 효과는 업스케일링 결과를 방해할 것이기 때문입니다.

이번에는 MetalFX Temporal AA와 업스케일링을 사용하는 체스 렌더링이 다시 있습니다.

이것은 왼쪽의 1080p 입력과 오른쪽의 4K 업스케일드 출력의 나란히 비교입니다.

여왕에 더 가까이 확대하면, 입력은 저해상도와 별칭이며, 오른쪽의 일시적으로 업그레이드된 출력은 부드러운 윤곽을 가진 고해상도이며 반사에 더 미세한 세부 사항이 있습니다.

공간 스케일러와 마찬가지로, 새로운 시간 스케일러를 만드는 것은 비용이 많이 들고 애플리케이션이 처음 시작되거나 디스플레이가 해상도를 전환할 때만 수행해야 합니다.

먼저, MTLFXTemporalScalerDescriptor를 할당하고 작성해야 합니다.

그런 다음 makeTemporalScaler() 메서드를 호출하여 스케일러 객체를 만드세요.

초기화 코드에서, 설명자로 시작하세요.

입력 및 출력 텍스처의 너비와 높이를 모두 채우세요.

그런 다음 나중에 스케일러 객체에 바인딩될 텍스처의 지터 색상, 깊이 및 모션 텍스처 형식을 입력으로 설정하십시오.

마지막으로, MetalFX가 업그레이드된 출력을 저장할 출력 텍스처의 형식을 설정하세요.

설명자가 채워지면, 스케일러 객체를 만드세요.

스케일러 객체에서, 모션 스케일 속성을 설정하세요.

이것은 앱의 모션 데이터를 API가 기대하는 대로 확장하는 데 도움이 됩니다.

MetalFX는 현재 프레임의 위치에서 이전 프레임의 위치로 가는 방향으로 렌더링 해상도 픽셀 공간에서 모션 데이터를 기대합니다.

예를 들어, 나는 1080p의 렌더링 해상도를 사용할 것이다.

클립 공간 좌표(-0.75, -0.75)에서 움직이는 물체가 있다고 가정해 봅시다.

공간 좌표를 클립하기 위해 (0.25, 0.25).

모션 데이터는 (1, 1)로 저장됩니다.

MetalFX가 게임의 모션 데이터를 올바르게 해석할 수 있도록 모션 벡터 스케일 속성을 (-960, 540)로 설정하세요.

스케일러 객체의 속성을 원하는 만큼 자주 수정할 수 있습니다.

그리고 encode() 메소드를 호출하여 업스케일링 프로세스를 시작하세요.

프레임당 그리기 코드의 경우, 먼저 resetHistory 속성을 설정하세요.

애플리케이션이 첫 번째 프레임을 로드하거나 장면 컷이 있을 때 이것을 true로 설정하세요.

그런 다음 효과에 대한 입력인 텍스처를 설정하고, 그 다음에 출력 텍스처를 설정하세요.

다음으로, 깊이 값이 reversed-Z 매핑에 있는지 여부를 나타내기 위해 reversedDepth 속성을 설정하세요.

스케일링 효과를 인코딩하기 전에 설정할 마지막 속성은 현재 지터 오프셋이다.

지터 오프셋을 올바르게 얻는 것은 출력의 품질에 필수적이다.

지터 오프셋을 설정하는 방법을 빠르게 살펴봅시다.

예를 들어, 왼쪽에는 지터로 렌더링된 삼각형이 있다.

오른쪽에는 픽셀의 확대된 보기가 있다.

샘플은 (0.625, 0.78)에 있습니다.

픽셀 센터는 주황색 헷으로 표현된다.

그것은 (0.5, 0.5)에 위치해 있다.

이 예에서, 지터 오프셋은 (-0.125, -0.28)이다.

지터 오프셋은 항상 -0.5에서 0.5의 범위에 있다는 점에 유의하십시오.

올바른 지터 오프셋을 제공하고 있는지 확인하려면, 다른 지터 오프셋 시퀀스를 사용하여 카메라와 물체 움직임 없이 장면을 렌더링하십시오.

왼쪽에는 잘못된 지터 오프셋이 지정된 예가 있습니다.

정적 물체는 움직일 수 있고, 가는 선은 흐릿하다.

오른쪽에는 올바른 지터 오프셋이 지정되었을 때의 출력이 있습니다.

물체는 제자리에 있고, 잔주름은 점진적으로 해결된다.

MetalFX "임시 AA 및 업스케일링" 효과는 애플리케이션 성능을 향상시키고 기본 대상 해상도 렌더링의 품질과 비교할 수 있는 업스케일링 품질을 제공합니다.

두 가지 업스케일링 효과를 모두 사용할 때 최적의 품질과 성능을 얻기 위해, 이제 구현 모범 사례를 다룰 것입니다.

공간 확장으로 시작.

최고의 공간 업스케일링 품질을 위해, 색상 입력은 안티앨리어싱과 노이즈가 없어야 합니다.

이것은 노이즈 효과와 별칭 이미지가 좋은 가장자리 결정을 방해하여 공간 업스케일링 품질을 악화시키기 때문입니다.

최상의 성능을 위해, 지각 색상 처리 모드를 사용하세요.

즉, 입력 색상은 sRGB 색상 공간에서 0-1의 값으로 톤 매핑되어야 합니다.

그리고 마지막으로, 더 높은 질감 디테일을 위해 적절한 부정적인 렙 바이어스를 설정하세요.

공간 업스케일링에 권장되는 mip 바이어스 계산은 렌더링 해상도 너비의 log2를 대상 해상도 너비로 나눈 것입니다.

예를 들어, 각 렌더링 해상도 차원을 2배로 스케일링하면 -1의 mip 바이어스가 발생하는 반면, 각 차원을 1.5x로 스케일링하면 -0.58 mip 바이어스가 발생합니다.

낮은 mip 레벨은 고주파 패턴을 가진 텍스처가 깜박이는 결과를 초래할 수 있습니다.

그러한 아티팩트를 발견하면 특정 텍스처에 대한 mip 바이어스를 조정해야 합니다.

나는 다음으로 TemporalAA와 확장 모범 사례에 대해 이야기할 것이다.

Temporal AA와 업스케일링에서 최고의 품질을 얻으려면, 좋은 지터 시퀀스를 선택하는 것이 중요합니다.

확장된 대상 해상도의 모든 픽셀에 걸쳐 샘플의 좋은 분포를 제공할 지터 시퀀스를 찾으세요.

보통, 출력 픽셀당 8개의 지터 샘플은 고품질 안티앨리어싱 업스케일 출력을 생성합니다.

2배 업스케일링의 경우, 32개의 지터가 있는 Halton (2,3) 시퀀스를 사용하여 지터링된 색상 입력을 생성하는 것이 좋습니다.

다음은 Halton (2,3) 시퀀스의 처음 32개의 샘플 위치의 플롯이며, 출력 픽셀당 약 8개의 샘플을 생성합니다.

더 높은 질감 디테일을 위해 적절한 부정적인 렙 바이어스를 설정하는 것도 중요하다.

시간 AA 및 업스케일링에 대한 권장 mip 바이어스 계산은 렌더링 해상도 너비의 log2를 대상 해상도 너비로 나누고 1로 뺀 것입니다.

예를 들어, 각 렌더링 해상도 차원을 2배로 스케일링하면 -2의 mip 바이어스가 발생하는 반면, 각 차원을 1.5x로 스케일링하면 -1.58 mip 바이어스가 발생합니다.

다음으로, mip bias가 다른 상황에서 당신의 산출물에 어떤 영향을 미치는지에 대한 예를 보여드리겠습니다.

다음은 MetalFX 시간 AA와 0, -1 및 -2의 mip 바이어스를 사용하여 동일한 장면의 업스케일링 출력입니다.

-2의 Mip 바이어스는 가장 선명하고 선명한 출력을 생성하는 반면, 0의 mip 바이어스는 가장 부드럽고 흐릿한 출력을 생성합니다.

여기 시간적 업스케일링 효과를 사용하는 회로 기판의 세 가지 렌더링이 있습니다.

위에서 아래로, 샘플링 텍스처가 0, -1, -2일 때 적용된 mip 바이어스 값.

회로 기판의 질감은 작은 추적선과 같은 고주파 패턴을 가지고 있기 때문에, -2의 mip 바이어스는 깜박임과 모아레 효과를 생성합니다.

그러나, -1의 mip 편향은 이러한 효과를 크게 줄이고, 0의 mip 편향은 그것들을 완전히 제거한다.

낮은 mip 수준은 일반적으로 더 많은 세부 사항을 초래한다.

우리의 밉 바이어스 제안을 출발점으로 사용하지만, 고주파 패턴이 있는 텍스처에 대한 밉 바이어스를 선택할 때 유의하십시오.

MetalFX Temporal AA 및 업스케일링에서 안티앨리어싱, 고품질 업스케일 출력을 보장하기 위해 이러한 관행을 따르십시오.

마지막으로, MetalFX 업스케일링을 사용할 때 성능 모범 사례를 다룰 것입니다.

MetalFX 업스케일링으로 최고의 성능을 얻으려면, 두 개의 의존적이지 않은 렌더링 또는 컴퓨팅 패스에서 읽기와 쓰기를 위해 동일한 리소스를 바인딩하지 않도록 주의해야 합니다.

그렇게 하면 잘못된 의존성이 생긴다.

금속에서, 잘못된 의존성을 피하는 것은 항상 좋은 생각이다.

하지만 내가 다음에 설명할 것처럼, 이것은 MetalFX 업스케일링에 특히 중요하다.

이 예에는 두 개의 프레임이 있다.

그림자와 사후 처리 패스는 완전히 관련이 없으며 자원 의존성이 없다.

금속은 다음 프레임의 그림자 패스와 현재 프레임의 후처리 패스를 겹칠 것이다.

그러나, 섀도우 패스가 동일한 버퍼에서 읽는 동안 포스트 프로세싱 패스가 메탈 버퍼에 쓰는 경우, 메탈은 동시에 동일한 리소스를 읽고 쓰는 잠재적인 위험을 피하기 위해 GPU가 이 두 패스를 병렬로 실행하는 것을 방지할 것이다.

프레임 간의 잘못된 의존성은 MetalFX 업스케일링의 성능에 부정적인 영향을 미칠 수 있다.

프레임 사이에 잘못된 종속성이 없다면, 다음 프레임의 섀도우 패스는 이전 프레임의 MetalFX 업스케일링과 겹칠 수 있습니다.

그러나, 프레임 간의 잘못된 의존성 때문에, 성능 손실은 이제 MetalFX 업스컬링이 프로세스를 완료하는 데 걸리는 시간을 포함한다.

이상적으로, 다른 프레임 간에 워크로드가 겹칠 수 있도록 프레임 사이에 잘못된 종속성이 없도록 하여 MetalFX 업스케일링을 사용할 때 최적의 성능을 보장해야 합니다.

이 예에서는 대신 사후 처리 및 섀도우 패스에 대한 별도의 버퍼를 만들어 잘못된 종속성을 방지하여 독립적인 패스를 병렬로 실행할 수 있습니다.

잘못된 의존성을 피하는 것은 MetalFX 업스케일링을 채택할 때 항상 염두에 두고 싶은 것입니다.

이 두 가지 효과 중 어느 것을 선택할지 결정할 때, 명심해야 할 몇 가지 고려 사항이 있습니다.

음영 비용과 픽셀 수가 계속 증가함에 따라, 일시적인 AA와 업스케일링은 여기에 있습니다.

픽셀을 상환하는 것은 시각적 충실도를 일시적으로 증가시키고 성능을 향상시킨다.

아직 훌륭한 시간 AA 솔루션이 없고 불안한 색상, 모션 및 깊이 버퍼를 렌더링할 수 있다면, MetalFX 시간 AA 및 업스케일링은 고려해야 할 매력적인 플랫폼 최적화 솔루션을 제공합니다.

필요한 입력이 없거나 이미 잘 조정된 AA 솔루션이 있다면, MetalFX 공간 업스케일링을 사용하는 것을 고려해 보세요.

그것으로, 당신이 이제 어떤 업스케일링 효과를 선택할지 더 잘 이해할 수 있기를 바랍니다.

나는 다음으로 메탈 애플리케이션에서 라이브로 실행되는 이 두 효과의 예를 보여줄 것이다.

다음은 주변 폐색 및 체적 안개와 같은 실시간 렌더링 알고리즘을 특징으로 하는 "Modern Rendering with Metal" 샘플 코드의 "Bistro" 장면을 나란히 비교합니다.

왼쪽의 1080p의 기본 렌더링과 오른쪽의 MetalFX 공간 업스케일링이 있는 4K 출력.

이 샘플에는 MetalFX 공간 확장을 위한 입력으로 사용하는 자체 시간 안티앨리어싱 솔루션이 있습니다.

스쿠터를 더 가까이 확대하는 것...

왼쪽의 이미지는 약간 흐릿한 반면, 오른쪽의 공간적으로 확장된 출력은 더 깨끗한 가장자리로 더 선명한 이미지를 만듭니다.

핸들 바의 직선은 잘 정렬되지 않는다.

몸의 곡선 또한 훨씬 더 매끄럽다.

성과 비교를 해보자.

왼쪽에는 4K의 네이티브 렌더링이 있습니다.

오른쪽은 MetalFX 공간 업스케일링의 4K 출력입니다.

카메라가 움직이면서, 왼쪽의 기본 렌더링은 고르지 않은 프레임 속도로 실행되는 반면, 오른쪽의 공간적으로 확장된 출력은 훨씬 더 매끄럽다.

다음은 많은 반사와 그림자가 있는 광선 추적 장면의 나란히 비교입니다.

왼쪽에는 1080p의 기본 렌더링이 있습니다.

오른쪽은 MetalFX Temporal AA와 업스케일링이 있는 4K 출력입니다.

샹들리에에서 더 가깝게 확대...

왼쪽의 기본 출력은 별칭 모양을 가지고 있는 반면, 오른쪽의 일시적으로 업그레이드된 출력은 더 미세한 디테일을 가진 날카로운 모서리를 가지고 있다.

그림자는 흐릿해 보이기보다는 멋지고 선명하다.

그리고 샹들리에의 미세한 세부 사항은 이제 알아볼 수 있다.

성능 향상은 MetalFX Temporal AA와 업스케일링으로도 분명합니다.

왼쪽에는 4K의 네이티브 렌더링이 있습니다.

오른쪽은 MetalFX Temporal AA와 업스케일링이 있는 4K 출력입니다.

카메라가 움직이면서, 왼쪽의 기본 렌더링은 매우 낮은 프레임 속도로 실행되는 반면, 오른쪽의 일시적으로 업그레이드된 출력은 훨씬 더 매끄럽다.

선도적인 게임 개발자들은 MetalFX Upscaling의 기능에 흥분하고 있으며 올해 말에 "Grid: Legends", "Resident Evil: Village", "No Man's Sky"를 Mac에 선보일 예정입니다.

다음으로, 프레임워크를 사용한 초기 작업을 보여드리겠습니다.

이 장면에서, 우리는 MetalFX Temporal AA와 Upscaling을 사용하여 "No Man's Sky"의 놀라운 비주얼과 유동적인 게임플레이를 볼 수 있습니다.

요약하자면, MetalFX는 확장에 중점을 둔 새로운 API이다.

공간 업스케일링은 채택하기 쉽고 상당한 성능 향상을 제공하며, 임시 AA와 업스케일링을 사용하여 더 높은 품질의 렌더링을 제공할 수 있습니다.

앞서 이야기한 모범 사례를 따르면 MetalFX 업스케일링을 최대한 활용할 수 있습니다.

봐줘서 고마워.

♪ ♪