10170

♪ (부드러워 기악 힙합 음악) ♪

♪

안녕하세요, 제 이름은 마이클 섬너입니다.

저는 Siri와 App Intents에서 일하는 소프트웨어 엔지니어입니다.

이 세션에서, 저는 새로운 앱 인텐트 프레임워크를 사용하여 앱의 앱 단축키를 만드는 것에 대해 이야기하고 싶습니다.

앱 단축키가 무엇이며 앱 의도와 어떤 관련이 있는지에 대한 개요부터 시작하겠습니다.

그런 다음, 스위프트에서 앱 바로 가기를 만들고 매개 변수를 추가하는 과정을 살펴보겠습니다.

마지막으로, 사용자가 당신의 노력의 혜택을 누릴 수 있도록 앱 바로 가기를 발견할 수 있도록 하는 방법을 다루겠습니다.

앱 인텐트 프레임워크와 앱 단축키를 시작합시다.

사람들은 단축키를 사용하여 단축키 앱과 Siri에서 사용할 수 있는 앱으로 다단계 워크플로우를 만듭니다.

지금까지, 누군가가 당신의 의도를 사용하기 전에 먼저 Siri에 추가 버튼이나 단축키 앱을 통해 단축키를 설정해야 했습니다.

사용자 설정이 필요 없는 앱 단축키를 소개하게 되어 기쁩니다.

이것은 사람들이 당신의 지름길의 혜택을 그 어느 때보다 쉽게 얻을 수 있게 해준다.

앱 단축키와 통합하면, 앱이 설치되자마자 앱의 의도를 사용할 수 있습니다.

이것은 누군가가 당신의 앱의 기능을 쉽게 발견하고 사용할 수 있게 해준다.

그들은 더 이상 단축키 앱으로 향하거나 Siri에 추가 버튼을 사용하여 무엇이든 설정할 필요가 없습니다.

사용자가 만든 단축키와 같은 앱 단축키는 단축키 앱, Spotlight 및 Siri에서 실행할 수 있습니다.

이것은 사람들에게 시스템의 다양한 장소에서 애플리케이션을 발견하고 상호 작용할 수 있는 여러 가지 방법을 제공합니다.

예를 들어, Spotlight에서 검색할 때, 앱 바로 가기는 쉽게 접근할 수 있도록 검색 결과에 바로 표시됩니다.

앱 단축키를 구현함으로써, 사용자는 빠르고 가벼운 상호 작용으로 앱과 상호 작용하여 작업을 더 쉽게 완료하고 진행할 수 있습니다.

우리 팀은 사용자가 중요한 것에 집중할 수 있도록 일련의 오디오 프롬프트와 소리를 통해 명상할 수 있도록 도와주는 명상 앱을 개발하고 있다.

오늘날, 명상을 시작하려면, 사용자는 앱을 실행하고, 로그인하고, 실행하고 싶은 명상 세션을 찾아야 합니다.

앱 단축키와 통합함으로써, 사용자는 Siri에게 요청하는 것만으로 어디서나 이러한 기능에 빠르게 액세스할 수 있습니다.

그리고 세션을 더 빨리 시작함으로써, 사용자는 일하기 전 아침이나 저녁에 명상을 일상에 통합하여 긴 하루를 보낸 후 긴장을 풀 수 있습니다.

좋아요, 앱 인텐트를 만들고 앱 바로 가기로 바꾸는 데 필요한 코드로 바로 들어가 봅시다.

이전 단축키와 달리, 앱 단축키는 새로운 앱 인텐트 프레임워크로 구축됩니다.

앱 인텐트는 훌륭한 인텐트를 더 빠르고 쉽게 구축할 수 있도록 처음부터 구축된 새로운 스위프트 전용 프레임워크입니다.

앱 인텐트를 사용하면 모든 것이 별도의 메타데이터 파일 대신 스위프트 소스 코드에서 바로 정의됩니다.

이렇게 하면 코드 생성 단계를 제거하고 소스 편집기와 메타데이터 편집기 간에 컨텍스트를 전환하지 않고도 집중할 수 있습니다.

그들은 또한 코드 검토와 병합 충돌을 해결하는 것이 더 쉽다.

앱 단축키를 구축하려면, 앱 인텐트를 본격적인 단축키로 바꾸는 데 필요한 구문과 기타 메타데이터를 나열하는 AppShortcutsProvider를 작성해야 합니다.

그리고 이것들은 사용자 상호 작용 없이 설정되기 때문에, 트리거 문구에 애플리케이션의 이름을 포함해야 합니다.

인텐트는 AppIntent 프로토콜을 구현하는 Swift 구조체로 정의됩니다.

기본 인텐트에는 두 가지 요구 사항이 있습니다. 바로 가기 앱에서 인텐트를 표시하는 데 사용되는 제목과 perform라는 방법.

수행 방법은 의도의 논리를 실행하고 결과를 반환하는 곳입니다.

또한, 사용자에 대한 프롬프트를 트리거하고 응답을 기다릴 수 있습니다.

이 의도로, 나는 내 앱의 MeditationService를 사용하여 기본 명상 세션을 시작할 것이다.

수행 방법이 비동기이기 때문에, 세션을 시작하기 위해 비동기 코드를 실행할 수 있습니다.

세션이 시작되면, 사용자에게 표시되는 대화상자를 반환할 것입니다.

그리고 앱이 현지화되어 있다면, 모든 로케일에서 이 문자열을 현지화하고 싶을 것입니다.

지금까지, 내가 만든 것으로, StartMeditationIntent는 바로 가기를 작성할 때 바로 가기 앱에 나타날 것이다.

동기 부여된 사용자는 이 의도를 가지고 세션을 시작할 단축키를 만들 수 있습니다.

이 단축키에서, 나는 또한 포커스를 활성화하기 위한 두 번째 의도를 추가했다.

기본적으로, 내 앱 의도는 소스 코드에서 지정한 제목을 사용하여 렌더링됩니다.

작업에 대한 렌더링을 사용자 정의하려면, 앱 인텐트에 매개 변수 요약을 추가해야 합니다.

매개 변수 요약을 사용하면 의도의 모양을 사용자 정의하고 값을 인라인으로 표시할 수 있습니다.

그러나, 이 의도는 그 자체로 지름길로 잘 작동한다.

이상적으로, 누군가는 먼저 지름길을 작성할 필요 없이 내 의도를 실행할 수 있을 것이다.

앱 단축키를 만들면, 사용자를 대신하여 이 설정 단계를 수행할 수 있으므로, 앱이 설치되자마자 내 의도를 사용할 수 있습니다.

이제 내가 의도를 썼으니, 나는 그것을 위한 앱 단축키를 만들 것이다.

의도와 마찬가지로, 앱 단축키는 AppShortcutsProvider 프로토콜을 구현하여 Swift 코드로 정의됩니다.

프로토콜을 구현하기 위해, 사용자를 위해 설정하려는 모든 앱 단축키를 반환하는 단일 게터를 만들 것입니다.

당신의 앱은 총 10개의 앱 단축키를 가질 수 있습니다.

그러나, 대부분의 앱은 몇 개만 있으면 된다.

그래서 나는 StartMeditationIntent를 위한 하나의 AppShortcut을 만들 것이다.

시작하기 위해, 나는 내 의도의 사례를 전달할 것이다.

내 의도의 이니셜라이저가 매개 변수를 취했다면, 여기서 값을 지정할 수 있다.

둘째, 나는 Siri에서 AppShortcut을 호출할 일련의 음성 문구를 만들 것이다.

내 애플리케이션의 이름을 문자열에 직접 쓰는 대신, 나는 특별한 .applicationName 토큰을 사용했다는 것을 알게 될 것이다.

이것은 Siri가 내 애플리케이션의 기본 이름뿐만 아니라 내가 구성한 앱 이름 동의어도 삽입할 수 있게 해준다.

사용자가 명상을 시작하기 위해 다른 문구를 말할 수 있기 때문에, 나는 여기에 몇 가지 대체 문구를 더 제공할 것이다.

앱이 현지화되어 있다면, 이 문구들도 현지화해야 합니다.

좋아. 그래서 이제 누군가가 중재하고 싶을 때, 그들은 그냥 Siri에게 "명상을 시작하세요"라고 말한다.

Siri는 StartMeditationIntent를 호출하고 내가 돌아온 대화를 말할 것이다.

또한, 누군가가 스포트라이트에서 내 앱을 검색하면, 내 코드에 나열한 첫 번째 앱 단축키를 볼 수 있습니다.

사용자가 결과를 탭하면, 바로 가기는 애플리케이션을 실행하지 않고 즉시 실행됩니다.

의도가 앱 실행을 트리거하면 Spotlight에 표시되지 않는다는 점에 유의하는 것이 중요합니다.

그래서, 아주 적은 양의 코드로, 나는 이제 사용자가 내 앱으로 명상하는 것을 훨씬 더 간단하게 만들었다.

하지만 지금, Siri는 내 의도를 실행할 때마다 기본 보기를 보여준다.

이것은 괜찮지만, 나는 그들이 내 앱 단축키를 실행할 때 사용자에게 더 많은 정보를 보여주고 싶다.

이렇게 하려면, 내 의도가 실행될 때마다 Siri가 보여줄 수 있는 사용자 지정 보기를 구현해야 합니다.

앱 인텐트 프레임워크의 뷰는 SwiftUI를 사용하여 구축되며 위젯과 동일한 뷰 기술을 활용합니다.

이것은 개발자로서 사용자 지정 보기를 위한 별도의 UI 확장을 구축할 필요가 없다는 것을 의미합니다.

대신, 의도를 실행할 때 단순히 보기를 반환할 수 있습니다.

이것이 당신의 견해에 가져오는 구체적인 제약에 대해 생각하는 것이 중요합니다.

위젯과 마찬가지로, 사용자 지정 앱 의도 보기는 상호 작용이나 애니메이션과 같은 것을 포함할 수 없습니다.

UI를 디자인할 때 이것을 고려해야 합니다.

앱 인텐트는 값 확인, 인텐트 확인 및 인텐트가 완료된 후의 세 단계로 사용자 지정 UI를 표시하는 것을 지원합니다.

내 앱의 경우, 내 의도 실행이 끝날 때 사용자 지정 보기를 반환할 것이다.

이러한 다른 프롬프트를 사용하는 경우, 해당 단계에서 사용자 지정 UI를 통합하는 방법에 대해 생각해 보세요.

마지막으로, 내가 언급했듯이, 사용자 지정 UI를 표시하는 것은 쉽다.

당신은 단순히 당신의 의도에서 당신의 견해를 돌려보내야 합니다.

좋아, 코드에 뛰어들 시간이야.

사용자 지정 보기를 추가하는 것은 쉽다.

내가 언급했듯이, 나는 내 대화와 함께 보기를 되돌릴 것이다.

앱 인텐트 프레임워크는 시리 스니펫 안에 내 견해를 제시할 것이다.

당신의 견해는 스니펫 제목이나 확인 버튼과 같은 다른 Siri 견해와 함께 표시될 것이라는 점을 명심하세요.

그래서 당신은 당신의 스니펫의 디자인이 Siri 안에서 집처럼 느껴지기를 원할 것입니다.

다음으로, 매개 변수를 포함하도록 앱 단축키를 확장하는 방법을 확인해 봅시다.

이전 구현에서, 나는 기본 명상 세션을 시작하기로 결정했다.

하지만 내 앱에는 많은 훌륭한 세션 유형이 포함되어 있으며, 사용자는 염두에 두고 있는 특정 세션을 시작하고 싶어할 것이다.

이상적으로, 내 사용자는 내 의도를 실행할 때 시작하고 싶은 세션을 지정할 수 있을 것이다.

이러한 사용 사례를 지원하기 위해, 사용자가 실행하려는 세션을 캡처하는 매개 변수를 추가하여 의도를 확장해야 합니다.

매개 변수를 추가하려면, 먼저 매개 변수의 유형을 정의해야 합니다.

나는 세션에 대한 관련 정보가 있는 명상 세션 구조를 만들 것이다.

나는 이름을 포함할 것이고, UUID가 될 수 있는 식별자 필드를 줄 것이다.

이 구조자를 내 의도의 매개 변수로 사용하려면, AppEntity 프로토콜도 구현해야 합니다.

AppEntity 프로토콜을 구현하면 App Intents 프레임워크에 내 유형에 대해 알려주고 엔티티가 표시되는 방식과 같은 추가 정보를 지정할 수 있습니다.

엔티티 프로토콜은 내 유형에 내가 이미 제공한 식별자가 있어야 한다.

나는 정수나 문자열과 같은 다른 유형도 사용할 수 있다.

나는 또한 내 엔티티를 표시하는 방법에 대한 정보를 제공해야 한다.

이것은 바로 가기 앱과 내 엔티티가 표시되는 다른 장소에서 사용될 것이다.

마지막으로, 나는 기본 쿼리를 연결해야 한다.

나는 내 질문을 MeditationSessionQuery라고 부를 것이고, 다음에 그것을 구현할 것이다.

내 엔티티와 함께 작동하려면, 앱 인텐트 프레임워크는 식별자를 기반으로 내 엔티티를 찾을 수 있어야 한다.

이를 가능하게 하기 위해, EntityQuery 프로토콜은 단 하나의 요구 사항만 정의합니다: 식별자를 취하고 일치하는 엔티티를 반환하는 함수.

내 SessionManager에서 세션을 찾아 이 기능을 구현할 것이다.

다음으로, 매개 변수를 추가하기 위해 StartMeditationIntent를 업데이트하겠습니다.

매개 변수는 간단하다; 그것들은 내 구조체에 있는 일반적인 속성일 뿐이다.

하지만 앱 의도에 내 매개 변수에 대해 알리기 위해, 나는 또한 @Parameter 속성 래퍼를 추가해야 한다.

이 속성 래퍼는 앱 의도가 세션 속성이 내 의도의 일부라는 것을 알 수 있게 해준다.

또한 표시 이름과 같은 매개 변수 속성 래퍼에 추가 메타데이터를 지정할 수 있습니다.

이제 내 의도에 매개 변수를 추가했으므로, 사용자에게 어떤 세션을 실행하고 싶은지 물어봐야 합니다.

앱 인텐트 프레임워크는 내 인텐트의 매개 변수에 대한 값을 수집하기 위해 사용자에게 후속 질문을 하는 강력한 지원을 제공합니다.

이 프롬프트는 내 의도가 실행되는 모든 곳에 표시될 것이다.

Siri에서 실행하면, Siri는 질문을 말하고, 사용자에게 답을 말하도록 요청할 것이다.

스포트라이트와 단축키 앱에서, 사용자에게 터치 기반 UI에서 동일한 프롬프트가 표시됩니다.

앱 인텐트는 세 가지 유형의 값 프롬프트를 지원합니다.

명확성은 사용자에게 고정된 목록에서 선택하도록 요청한다.

의도의 매개 변수에 대한 작은 고정 옵션 세트가 있을 때 사용자에게 명확하게 제시하는 것이 좋습니다.

값 프롬프트를 사용하면 사용자에게 개방형 값을 요청할 수 있습니다.

이것들은 어떤 값이든 취할 수 있는 문자열이나 정수와 같은 유형에 적합합니다.

마지막으로, 확인은 사용자에게 특정 값을 확인하도록 요청하며, 사용자의 의도를 이해했는지 다시 확인하고 싶다면 도움이 될 수 있습니다.

가치를 촉구하는 것은 의도를 더 유연하게 만들고 사용자로부터 더 많은 정보를 수집할 수 있는 좋은 방법입니다.

하지만 그들은 또한 대화를 늦추고, 너무 자주 사용하면 사용자를 좌절시킬 수 있다.

훌륭한 의도를 디자인하는 것에 대한 더 많은 통찰력을 얻으려면, 린의 "디자인 앱 단축키"라는 제목의 세션을 확인하세요.

좋아요, 이제 StartMeditationIntent에 세션 매개 변수를 추가했으므로, 이 값을 표시하기 위해 수행 방법에 논리를 추가하겠습니다.

내 앱에는 사용자가 실행할 수 있는 소수의 고정된 세션이 있다.

세션이 아직 지정되지 않았다면, SessionManager에서 목록을 검색하고 사용자에게 명확성을 제시할 것입니다.

각 세션에 대한 표시 표현을 사용하여, 앱 인텐트는 세션을 목록 항목으로 포맷하고 사용자에게 표시합니다.

사용자가 하나를 선택하면, 선택한 항목이 나에게 반환될 것이다.

나는 선택한 세션을 명상 서비스에 전달할 것이고, 그것은 세션을 시작할 것이다.

그런 다음 의도가 시작되었다는 것을 사용자에게 알리기 위해 대화상자를 반환할 수 있습니다.

사용자가 세션을 제공했기 때문에, 사용자가 우리가 그들의 요청을 이해했다는 것을 알 수 있도록 대화상자에 세션 이름을 넣는 것이 좋습니다.

좋아요, 그래서 이제 내 사용자가 "명상을 시작하세요"라고 말할 때, 내 앱은 사용자에게 실행하고 싶은 특정 세션을 요청할 수 있습니다.

그러나, 내가 전에 언급했듯이, 사용자들은 빠르고 중요한 Siri 상호 작용을 선호한다.

이상적으로, 나는 사용자가 후속 질문이 아닌 초기 문구로 실행하고 싶은 세션을 Siri에게 말하게 할 수 있을 것이다.

음, 좋은 소식이 있어.

앱 단축키는 미리 정의된 매개 변수로 트리거 구문을 확장하는 것을 지원합니다.

매개 변수화된 문구를 구현함으로써, 내 앱은 "진정 명상 시작" 또는 "걷는 명상 시작"과 같은 발언을 지원할 수 있습니다.

매개 변수는 미리 Siri에 지정할 수 있는 잘 알려진 매개 변수 값의 고정된 세트가 있을 때 좋습니다.

내 앱의 경우, 나는 내 세션 이름을 사용할 것이다.

매개 변수는 개방형 값을 위한 것이 아니다.

예를 들어, 초기 발화에서 사용자로부터 임의의 문자열을 수집하는 것은 불가능합니다.

그래서, 내 앱은 X가 사용자의 입력일 수 있는 "내 일기에서 X를 검색"과 같은 문구를 지원할 수 없었다.

대신, 매개 변수 값은 앱이 실행 중일 때 미리 지정됩니다.

몇 가지 매개 변수화된 문구를 구현해 봅시다.

내 앱에서 매개 변수화된 문구를 구현하려면, 몇 가지 변경을 해야 합니다.

먼저, 매개 변수가 지정된 단축키에 대한 엔티티 목록을 반환하기 위해 suggestedResults() 메서드를 구현하기 위해 SessionEntity에 대한 쿼리를 업데이트할 것입니다.

둘째, 사용 가능한 SessionEntities 목록이 변경되면 앱 인텐트 프레임워크에 알려야 합니다.

이를 통해 앱 인텐트 프레임워크는 Siri에서 사용할 새로운 단축키 구문을 만들 수 있습니다.

세션 목록이 변경될 때마다 앱 인텐트 프레임워크에 알리기 위해 앱의 모델 레이어를 업데이트하여 이 작업을 수행할 것입니다.

마지막으로, StartMeditationIntent의 세션 매개 변수를 참조하는 앱 단축키에 몇 가지 새로운 문구를 추가할 것입니다.

그래서 먼저, 저는 suggestedEntities 기능을 구현하여 MeditationSessionQuery를 업데이트할 것입니다.

앱 인텐트 프레임워크는 이 함수에서 반환된 세션을 사용하여 매개 변수가 지정된 단축키를 만듭니다.

이 방법은 선택 사항이지만, 이 방법을 구현하지 않으면 매개 변수가 지정된 단축키를 전혀 얻을 수 없다는 점에 유의하는 것이 중요합니다.

둘째, 세션 목록이 변경될 때마다 앱 인텐트 프레임워크에 알리기 위해 앱의 모델 레이어를 업데이트해야 합니다.

내 앱에서, 나는 백그라운드에서 서버에서 가져오는 새로운 세션 유형을 자주 게시하지 않는다.

새 세션을 받을 때마다 updateAppShortcutParameters() 메서드를 호출하기 위해 SessionModel을 업데이트할 것입니다.

이 방법은 앱 인텐트 프레임워크에 의해 제공됩니다; 직접 구현할 필요가 없습니다.

호출되면, 앱 인텐트는 엔티티의 쿼리를 호출하여 바로 가기 구문의 매개 변수 목록을 수집합니다.

마지막으로, 내 의도에 대한 세션 키 경로를 포함하는 앱 단축키에 대한 새로운 문구를 추가할 것입니다.

앱 인텐트 프레임워크는 이 문구를 내 쿼리에서 반환된 모든 세션과 결합할 것이다.

각 값에 사용되는 텍스트는 SessionEntity의 표시 표현의 제목 속성에서 가져온다.

이전과 마찬가지로, 나는 사용자가 내 앱 단축키를 표현할 수 있는 몇 가지 다른 방법을 포함하고 싶다.

이것은 사용자가 선호하는 문구를 기억하지 못하는 경우 더 원활한 경험을 보장합니다.

좋아, 나는 이제 훌륭하고 모든 기능을 갖춘 앱 단축키를 가지고 있고, 내 사용자들이 그것을 시도해 보기를 기다릴 수 없어.

하지만 그런 일이 일어나기 위해서는, 나는 사용자가 내 새로운 단축키를 발견할 수 있도록 몇 가지 일을 해야 한다.

내가 가장 먼저 말하고 싶은 것은 훌륭한 문구를 고르는 것이다.

앱 단축키를 위한 훌륭한 문구는 짧고 기억에 남는다.

사용자는 앱 단축키를 지원하는 많은 앱을 휴대폰에 가지고 있을 것이며, 실제로 사용자는 단축키를 표현하는 방법을 정확히 기억하는 데 어려움을 겪을 수 있습니다.

그래서 가능하다면, 당신의 문구를 짧고 요점으로 유지하세요.

이 라인을 따라, 앱 이름을 명사나 동사로 사용할 수 있다면, 문구에서 그런 식으로 사용하는 것을 고려해 보세요.

내 앱에서, 나는 명상을 명사처럼 사용했기 때문에, 그 문구는 짧고 기억에 남을 수 있다.

마지막으로, 앱 이름 동의어는 사용자에게 엄청난 도움이 될 수 있습니다.

사용자가 앱을 앱의 표시 이름이 아닌 다른 것으로 부르는 경우, 앱 이름과 동의어를 추가하는 것을 고려해야 합니다.

iOS 11은 앱 이름 동의어 지원을 추가했다.

만약 당신이 하나를 만들지 않았다면, 지금이 그렇게 하기에 좋은 시기일지도 모릅니다.

다음으로 내가 이야기하고 싶은 것은 Siri 팁과 단축키 링크이다.

앱 단축키는 사용자 설정이 필요하지 않기 때문에, 사용자가 앱 단축키를 찾고 사용하는 데 발견 가능성은 매우 중요합니다.

앱 단축키를 사용하면 사용자는 더 이상 단축키를 추가하기 위해 Siri에 추가 버튼이 필요하지 않습니다.

그건 이미 추가됐어!

그러나, 우리는 Siri에 추가 버튼이 제공한 발견 가능성 혜택을 잃고 싶지 않습니다.

그것을 염두에 두고, 우리는 새로운 Siri 팁 보기를 만들었습니다.

이 보기는 과거에 Siri에 추가 버튼을 사용한 적이 있는 모든 곳에서 잘 작동합니다.

팁 보기는 SwiftUI와 UIKit 모두에서 사용할 수 있습니다.

그리고 우리는 팁이 모든 응용 프로그램에서 멋지게 보일 수 있도록 다양한 스타일을 제공했습니다.

Siri 팁은 화면의 콘텐츠와 관련이 있을 때 상황에 맞게 배치하는 것이 가장 좋습니다.

사용자가 앱에서 방금 주문한 경우, 주문 상태를 제공하는 단축키에 대한 팁을 보여주는 것을 고려해 보세요.

사용자가 가까운 장래에 앱 단축키에 참여할 가능성이 있다고 느낄 때, Siri 팁을 신중하게 배치해야 합니다.

Siri 팁은 또한 해고를 지원합니다.

이 보기에는 해제 버튼이 포함되어 있으며 탭하면 코드에서 사용자 지정 클로저를 트리거합니다.

레이아웃에서 보기를 제거하고, 관련이 있다고 느낄 때까지 다시 보여주지 않는 것을 고려해 보세요.

마지막으로, 우리는 또한 당신의 앱에서 바로 가기 목록으로 시작할 새로운 ShortcutsLink를 포함시켰습니다.

이 새로운 요소는 앱에 많은 앱 단축키가 있고 사용자가 모든 것을 탐색할 수 있도록 하고 싶다면 좋습니다.

이제, 앱 단축키의 좋은 점은 앱이 설치되자마자 사용할 수 있다는 것입니다.

앱이 처음 출시되기 전에도, 사용자는 Spotlight, Siri 및 단축키 앱에서 단축키를 보고 실행할 수 있습니다.

앱 단축키를 만들 때 이것을 고려해야 할 수도 있습니다.

예를 들어, 앱에 로그인 흐름이 필요한 경우, 사용자는 의도를 실행하기 전에 로그인하지 않았을 수 있습니다.

당신의 의도는 사용자에게 로그인해야 한다는 오류 메시지와 함께 정상적으로 실패해야 합니다.

둘째, 앱 단축키에 대한 매개 변수화된 구문은 앱이 실행되고 앱 인텐트 프레임워크에 새로운 매개 변수 값이 있음을 알릴 때까지 사용할 수 없습니다.

앱 단축키에 매개변수화되지 않은 문구가 포함되어 있지 않은 경우, 사용자는 앱을 처음 시작할 때까지 앱 단축키를 전혀 볼 수 없습니다.

이 문제를 피하기 위해 몇 가지 매개변수화되지 않은 문구를 추가하는 것을 고려할 수 있습니다.

또한, Siri는 "여기서 무엇을 할 수 있나요?"와 같은 문구에 대한 지원을 추가했습니다. 그리고 "명상으로 뭘 할 수 있을까?"

Siri는 앱 단축키 문구를 자동으로 수집하고 추천하고 당신을 대신하여 제시할 것입니다.

당신의 앱은 이 기능이 작동하기 위해 추가로 아무것도 할 필요가 없습니다.

마지막으로, Siri와 단축키 앱 모두에서 앱 단축키가 표시되는 순서는 소스 코드에 앱 단축키를 나열하는 순서에 따라 결정됩니다.

당신은 그들이 가장 많은 관심을 받을 수 있도록 가장 좋고 가장 유용한 앱 단축키를 우선시하는 것을 고려하고 싶을 것입니다.

마찬가지로, 구문 배열에 나열한 첫 번째 구문은 해당 앱 단축키의 기본 구문으로 간주됩니다.

기본 문구는 단축키 타일의 라벨로 사용되며, 사용자가 Siri에게 앱에 대한 도움을 요청할 때 표시됩니다.

좋아요, 우리는 앱 인텐트 프레임워크와 앱 단축키에 대해 많은 것을 다루었습니다.

나는 너에게 두 가지 중요한 생각을 남기고 싶어.

첫째, 앱 단축키를 사용하면 사용자가 시스템의 어느 곳에서나 앱을 쉽게 사용할 수 있으므로, 이 더 가벼운 모델에 맞는 앱의 최상의 사용 사례에 대해 생각해 보세요.

둘째, 일단 앱 단축키를 구현하면, 사용자는 당신이 그들에게 말하지 않는 한 그것에 대해 알지 못할 것입니다!

앱 단축키를 발견할 수 있게 만드는 방법에 대해 열심히 생각해 보세요.

앱에서 Siri 팁을 보여줄 수 있는 장소와 웹사이트나 상점의 사인과 같은 제품 외 위치를 고려하세요.

우리는 당신이 새로운 앱 인텐트 프레임워크로 만든 모든 훌륭한 앱 단축키를 빨리 보고 싶습니다.

앱 인텐트 프레임워크뿐만 아니라 디자인에 대해 더 깊이 파고들려면, 이번 주에 다른 회담을 꼭 확인하세요.

고마워, 그리고 멋진 WWDC 보내.

♪