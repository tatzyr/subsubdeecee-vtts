102

♪ ♪

♪ ♪

수잔 프레스콧: WWDC 2022를 위한 연합 플랫폼에 오신 것을 환영합니다.

우리는 항상 WWDC에 대해 흥분하고 있습니다. 왜냐하면 WWDC는 여러분 모두와 연결하고, 우리가 작업한 것에 대한 뉴스를 공유하고, 개발자 플랫폼에서 필요한 것을 더 잘 이해할 수 있는 기회이기 때문입니다.

당신이 개발자로서 하는 일은 놀랍습니다.

당신은 당신의 아이디어, 상상력을 변화시켜 사용자의 경험을 다른 차원으로 끌어올립니다.

그리고 우리는 당신이 당신의 아이디어를 더 발전시킬 수 있도록 돕고 싶습니다.

기조 연설에서, 우리는 이미 iPhone, iPad, Mac, Apple Watch 및 Apple TV의 몇 가지 새로운 기능과 가장 야심찬 아이디어에도 생명을 불어넣는 데 도움이 되는 Apple 실리콘의 놀라운 힘에 대해 이야기했습니다.

우리는 오늘 다룰 것이 많다. 몇 가지 업데이트부터 시작합시다.

올해 초, 우리는 바로 여기 Apple Park에서 Apple 엔지니어 및 디자이너와 연결하고 협업할 수 있도록 설계된 새로운 Apple Developer Center를 열었습니다.

그리고 지난 가을, 전 세계에서 온 수천 명의 사람들이 11개국과 5개 언어로 시작된 수백 개의 라이브 세션과 함께 우리의 새로운 온라인 기술 회담에 참석했습니다.

우리에게 테크 토크 시리즈의 가장 좋은 부분 중 하나는 일대일 회의였으며, 당신이 무엇을 하고 있는지 듣고 조언과 지침을 공유할 수 있는 좋은 기회였습니다.

지난 가을, Swift Playgrounds 4는 앱을 빌드하고 App Store에 직접 제출하고 SwiftUI를 지원하여 실험과 UI 프로토타이핑을 위한 놀라운 도구가 되었다.

그리고 물론, Xcode Cloud가 있습니다.

우리는 당신이 더 나은 앱을 더 빠르고 쉽게 만들 수 있도록 Xcode Cloud를 구축했습니다.

Xcode에 바로 내장되어 클라우드에서 호스팅되는 지속적인 통합 및 배달 서비스입니다.

Xcode Cloud는 모든 Apple 플랫폼의 개발을 지원합니다.

그것은 TestFlight와 App Store Connect뿐만 아니라 모든 주요 git 기반 소스 제어 공급자와 통합됩니다.

개발 워크플로우의 다른 측면에 연결하는 데 도움이 되는 REST API도 있습니다.

그것은 당신과 당신의 프로젝트를 보호하기 위해 고급 보안으로 만들어졌습니다.

그리고 저는 오늘부터 Xcode Cloud를 사용할 수 있다고 말하게 되어 기쁩니다.

우리는 거의 모든 개발 팀이 Xcode Cloud의 혜택을 받을 수 있다고 생각하며, 모든 규모의 개발자가 접근할 수 있도록 가격을 책정했습니다.

우리는 2023년 말까지 모든 Apple Developer Program 회원에게 월 25시간 무료 구독을 제공하고 있습니다!

그리고 이번 여름 말에 개발자 앱에서 Xcode Cloud 구독 수준을 구독할 수 있습니다.

오늘 우리는 세 가지 큰 주제에 대해 이야기할 것이다.

먼저, 우리는 Apple 플랫폼 개발에 대한 우리의 비전, 우리가 플랫폼과 함께 있는 곳, 그리고 우리가 향하고 있는 곳에 대해 더 많이 공유하고 싶습니다.

그런 다음, 우리는 당신의 앱이 Apple 플랫폼의 시스템 경험과 통합될 수 있는 몇 가지 강력한 새로운 방법을 공유할 것입니다.

그리고 마지막으로, 우리는 몇 가지 강력한 새로운 API에 대해 논의하고 앱으로 훨씬 더 야심찬 일을 할 수 있는 방법을 보여줄 것입니다.

개발자 플랫폼에 대한 비전과 그것이 어떻게 진화하고 있는지부터 시작합시다.

Josh는 당신에게 그것에 대해 모든 것을 말하기 위해 여기에 있습니다., Josh Shaffer: 훌륭한 개발자 플랫폼은 프로그래밍 언어, 프레임워크 및 도구 간의 긴밀한 통합을 제공합니다.

세 가지가 모두 서로를 완전히 보완할 때, 우리는 일반적인 것들이 쉽고, 심지어 흔하지 않은 것들이 가능하다는 것을 보장할 수 있다.

이제, 그 권리를 얻는 것은 훌륭한 앱을 만드는 길을 단축시키고, 모두에게 이익이 된다.

고객은 항상 완벽하게 느껴지는 스크롤과 같은 일관된 경험을 얻는다.

그리고 당신은 당신의 앱을 독특하게 만드는 것에 시간과 노력을 집중할 수 있습니다.

하지만 디자인은 진화하고, 하드웨어는 발전하며, 한때 최첨단이었던 것이 예상되는 기준선이 된다.

Objective-C 언어, AppKit & UIKit 프레임워크, 인터페이스 빌더는 여러 세대의 개발자들에게 힘을 실어주었다.

이 기술들은 서로를 위해 만들어졌고, 앞으로도 오랫동안 우리에게 도움이 될 것이지만, 시간이 지남에 따라 새로운 추상화가 필요하다.

한동안, 당신은 우리가 차세대 통합 언어, 프레임워크 및 도구인 Swift, SwiftUI 및 Xcode Previews를 정의하기 위해 열심히 노력하는 것을 보았습니다.

이와 같은 개발 플랫폼에서의 긴밀한 통합은 세 조각이 모두 함께 설계되고 진화되어야 하며, 서로 운전하고 운전해야 한다.

Swift 결과 빌더는 SwiftUI의 구성 구조에서 영감을 받았다.

SwiftUI의 선언적 뷰는 Swift 값 유형에 의해 활성화되었다.

그리고 Xcode Previews는 둘 모두를 위해 특별히 설계되고 활성화되었다.

이제, 그 결과는 우리가 구축한 최고의 개발 플랫폼이다.

그리고 올해 Swift, SwiftUI 및 Xcode는 모두 이 비전을 더욱 발전시키고 모든 플랫폼을 위한 훌륭한 앱을 더 쉽게 구축할 수 있는 환상적인 업데이트를 제공합니다.

그리고 그것은 모두 스위프트에서 시작된다.

이제 스위프트 팀의 벤이 다음 단계에 대해 모두 말해줄 거야.

♪ ♪

벤 코헨: 스위프트는 빠르고 현대적이며 안전하다.

그것은 강력한 타이핑된 언어의 속도와 읽고 쓰기 쉬운 표현 구문을 결합합니다.

그리고 그것의 디자인은 프로그래밍 오류의 전체 범주를 제거한다.

스위프트는 우리 기기에서 앱을 구축하기 위한 최고의 언어이다.

Swift는 또한 swift.org에서 조직된 놀라운 기여자 커뮤니티와 함께 오픈 소스이며, Swift의 다양성과 Swift 멘토링 프로그램과 같은 이니셔티브를 통해 서로를 지원하고, 서버의 Swift 및 C++ 상호 운용성과 같은 주제에 대한 작업 그룹과 함께 언어를 발전시킵니다.

지난 한 해 동안, 스위프트는 동시성 향상, 스위프트 코드를 더 쉽게 읽고 쓸 수 있도록 하는 업그레이드, 워크플로우를 사용자 정의하는 데 도움이 되는 도구, 그리고 놀라운 개선으로 훨씬 더 좋아졌습니다.

그것은 작년에 Swift Concurrency의 도입과 함께 시작되었다.

Swift Concurrency는 병렬로 실행되는 코드 읽기 및 쓰기를 극적으로 단순화했으며, App Store의 40,000개 이상의 앱이 첫 해에 채택하면서 큰 인기를 끌었습니다.

앱의 코드 기반에 대한 근본적이고 중요한 개선이기 때문에, 이제 지난 3년 동안 출시된 모든 운영 체제에 Swift Concurrency로 코드를 배포할 수 있습니다.

신속한 동시성은 또한 비동기 시퀀스를 도입했다.

올해, 스위프트의 풍부한 기존 시퀀스 알고리즘 세트에 동시성을 제공하는 새로운 오픈 소스 패키지가 있다.

그것은 비동기 알고리즘이라고 불린다.

예를 들어, 스위프트의 시퀀스 프로토콜이 두 시퀀스를 결합하는 zip 알고리즘을 지원하는 경우, 비동기 알고리즘은 두 개의 비동기 시퀀스를 압축하는 버전을 제공합니다.

비동기 시퀀스는 스위프트 언어에 직접 통합되기 때문에, 비동기/대기 구문 덕분에 일반 직선 코드처럼 보이는 'for' 루프와 같은 친숙한 구성을 사용합니다.

또한 친숙한 try/catch 패턴을 사용하여 네트워크를 통한 비동기 데이터 스트리밍의 네트워크 오류와 같은 것을 처리할 수 있습니다.

비동기 시퀀스의 핵심은 시간이 지남에 따라 데이터 값을 전달하는 방법이다.

스위프트에는 이제 시간 단위를 나타내는 새로운 클럭 유형 세트가 포함되어 있으며, 비동기 알고리즘은 시퀀스의 업데이트를 늦추는 데 도움이 될 수 있는 스로틀과 같은 많은 시간 기반 알고리즘을 제공하기 위해 구축됩니다.

스위프트의 동시성 모델은 비동기 코드를 동기 코드만큼 쉽고 안전하게 작성할 수 있도록 설계되었습니다.

그것의 큰 부분은 스위프트의 배우 모델이다.

액터를 사용하면 스레드로부터 안전한 동시 실행 코드를 사용하여 데이터를 분리할 수 있습니다.

스위프트는 실수로 병렬 스레드 간에 해당 상태를 공유하는 것을 방지하여 버그의 주요 원인을 정의합니다.

배우 간의 의사소통은 비동기/대기를 통해 쉽고 효율적이다.

이제, 스위프트는 분산된 배우들과 함께 배우 고립에 대한 아이디어를 더 발전시킨다.

분산된 행위자는 여러 프로세스나 장치에서 통신할 수 있다.

"분산된" 키워드는 Mac의 별도의 프로세스, 다른 장치 간의 피어 투 피어 또는 서버의 Swift로 작성된 백엔드와 대화하는 장치 간에 원격으로 액세스할 수 있는 이러한 배우와 방법을 표시합니다.

배우가 스위프트가 경쟁 조건으로부터 주 데이터를 보호하는 데 도움을 주는 것처럼, 분산된 배우가 스위프트가 플러그 가능한 전송 메커니즘을 사용하여 프로세스 외부에서 사용할 수 있도록 도와줍니다.

그런 다음 스위프트 컴파일러는 분산된 환경에서 올바른 동작을 보장하는 데 도움이 되는 검사를 수행하여 관심 있는 기능을 다시 작업할 수 있습니다.

분산 행위자 및 기타 동시성 기능은 구문 깊은 곳에서 개선이 만들어질 때 Swift 코드를 읽고 쓸 수 있는 것이 얼마나 쉬운지 보여줍니다.

스위프트의 사용성 향상에 대해 더 자세히 알려드리자면, 여기 켄이 있습니다.

켄 오르: 문자열은 모든 프로그래밍 언어의 가장 중요한 기능 중 하나이다.

하지만 문자열을 다루는 것은 좌절의 일반적인 원천이 될 수 있다.

개발자의 여정의 어느 시점에서, 그들은 이와 같은 문자열에서 정보를 추출해야 할 수도 있다.

문자열을 구문 분석하기 위한 코드를 작성하는 것은 실수하기 쉽고, 추적해야 할 많은 세부 사항이 있다.

그리고 결과 코드는 읽고 수정하기 어렵다.

정규 표현식은 이 도전에 대한 강력한 해결책이다.

문자열에서 볼 것으로 예상되는 패턴을 설명하고 캡처에 관심이 있는 정보를 지정할 수 있습니다.

올해, 스위프트는 새로운 정규 표현식 리터럴을 시작으로 정규 표현식에 대한 개발자 경험에 큰 개선을 제공하고 있다.

그것들은 언어에 직접 내장되어 있어, 스위프트 컴파일러가 정확성을 확인할 수 있다.

그리고 그들은 정규 표현식으로 정보를 추출할 때 스위프트의 유형 시스템의 힘을 잠금 해제합니다.

그리고 그들은 스위프트의 동급 최고의 유니코드 지원을 최대한 활용한다.

한 번 보자.

저는 주문 접수부터 판매 추적에 이르기까지 모든 것을 정리하는 푸드 트럭이라는 앱을 개발하고 있습니다.

그리고 일부 주문은 데이터로 가득 찬 문자열로 들어옵니다.

이제, 정규 표현식은 내가 원하는 세부 사항을 추출하는 데 완벽하며, 여기 놀이터에서 실험하기에 더 좋은 곳은 없다.

정규식 리터럴을 만드는 것으로 시작하겠습니다.

이제 나는 표현을 입력하고, 누가 주문했는지, 도넛 유형, 그리고 도넛의 수를 뽑을 것이다.

이제, 내가 입력할 때, 정규 표현식은 구문이 강조 표시되어 내 표현이 올바른지 확인하는 데 도움이 된다.

이제 내가 시도해 볼게.

위의 순서 문자열을 사용하고 정규 표현식의 첫 번째 일치를 찾으세요.

이제, 내가 플레이그라운드를 실행할 때, 나는 인라인 결과로 정규 표현식의 순서 문자열의 어떤 부분이 일치하는지 정확히 볼 수 있다.

그리고 여기, 내가 찾고 있던 것을 찾고 있어.

스위프트의 새로운 정규 표현식 지원은 여기서 멈추지 않는다.

로그 파일의 일부와 일치하는 것과 같이 리터럴이 더 복잡해짐에 따라, 스위프트는 이러한 패턴인 정규식 빌더를 만드는 더 나은 방법을 제공합니다.

그리고 문자 그대로를 건축업자로 변환하는 것은 쉽다.

이제 나는 코드를 가지고 있고, 그것은 더 쉽게 읽고 변경할 수 있게 해준다.

나는 이것을 더 단순화할 수 있다.

여기, 내가 16진수를 찾고 있는 곳에서, 나는 새로운 .hexDigit CharacterClass를 사용하여 내 의도를 더 명확하게 만드는 데 도움을 줄 것이다.

이제, 빌더 구문은 내가 표현을 만들고 확장하는 것을 훨씬 더 쉽게 만들고, 내가 찾고 있는 결과를 얻을 수 있게 해준다.

그리고 그것은 Swift의 정규 표현식에 대한 강력하고 새로운 개발자 경험이다.

벤: 문자열 구문 외에도, 스위프트는 제네릭으로 알려진 언어 기능의 개선을 통해 읽고 쓰기가 더 쉬워지고 있다.

문자열에서 사용자 지정 유형에 이르기까지 모든 종류의 요소를 보유하는 배열 유형과 같이 매일 사용하는 스위프트의 제네릭 파워 기능.

일반 코드는 자리 표시자 유형의 개념을 사용하여 나중에 결정될 다른 유형을 대신합니다.

특정 유형에 대한 가정을 제거함으로써, 코드의 의도에 대해 더 명확하게 할 수 있으며, 더 쉽게 재사용할 수 있습니다.

하지만 이것은 또한 당신의 코드를 읽기 어렵게 만들 수 있습니다.

예를 들어, 노래의 일반적인 컬렉션을 함수 매개 변수로 처리하고 싶다면, 의도를 표현하기 위해 꽤 많은 코드를 작성해야 합니다.

이제 스위프트에서 일부 노래 모음을 받아들이는 함수를 작성하는 것은 '일부' 키워드를 사용하여 스위프트에게 매개 변수에 대해 말하는 것만큼 쉽다.

당신은 같은 의미를 가지지만, 코드는 적습니다.

다른 경우에는, 이 음악 라이브러리의 재생 목록 배열과 같이 더 역동적인 행동이 필요할 수 있으며, 노래 모음 또는 노래 배열과 같은 다양한 유형의 노래 모음을 포함해야 할 수도 있습니다.

그것이 새로운 'any' 키워드가 도움이 될 수 있는 곳이다.

'Any' 키워드는 Swift에 내장되어 있으며, 모든 노래 컬렉션을 저장할 수 있는 유형을 표현할 수 있습니다.

그리고 그것은 일반 기능과도 원활하게 작동한다.

친숙한 구문을 채택하고 더 자연스러운 키워드를 사용함으로써, 스위프트에서 일반 코드를 작성하는 것이 그 어느 때보다 쉬워졌습니다.

스위프트 언어에 내장된 기능만큼 중요한 것은 그 주위에 구축된 도구이다.

스위프트 패키지 관리자를 사용하면 앱의 종속성을 쉽게 관리하고 전 세계 개발자가 게시한 환상적인 패키지를 활용할 수 있습니다.

지금까지, 그 개발자들은 수천 개의 스위프트 패키지를 출판했으며, 인증 및 웹 서비스에서 데이터 관리 및 재사용 가능한 UI 구성 요소에 이르기까지 모든 것을 돕는 코드를 제공합니다.

그리고 올해, 스위프트 패키지 관리자는 완전히 새로운 패키지 플러그인으로 코드를 만들고 빌드할 수 있는 방법을 증폭시키고 있습니다.

플러그인은 다른 종속성만큼 쉽게 프로젝트에 추가할 수 있는 스위프트 패키지입니다.

그들은 앱에서 코드가 되는 대신 앱을 빌드하는 데 도움이 되는 코드를 제외하고는 새로운 체크아웃에서 자동으로 다운로드하고 빌드합니다.

패키지 플러그인은 빌드 단계의 일부로 또는 주문형으로 명령줄이나 Xcode 내에서 호출할 수 있습니다.

그들은 코드를 읽거나 수정하기 전에 허가를 요청하는 샌드박스 환경에서 실행됩니다.

패키지 플러그인으로 워크플로우를 확장할 수 있는 무한한 가능성이 있습니다.

SwiftLint 또는 SwiftFormat와 같은 패키지와 팀 스타일 가이드와 일치하도록 코드를 린트하고 포맷하거나 Sourcery와 같은 도구를 사용하여 빌드 타임에 소스 코드를 자동으로 생성할 수 있습니다.

네가 일을 끝내는 데 도움이 되는 모든 것.

켄: 패키지 플러그인은 약간의 스위프트를 작성하는 것만으로도 Xcode를 확장할 수 있는 좋은 방법입니다.

그리고 당신은 두 가지 방법으로 그것을 할 수 있습니다.

주문형으로 사용하는 명령 플러그인과 프로젝트가 빌드될 때마다 플러그인을 빌드하세요.

이제, 여기 푸드 트럭 앱에서, 여기 제가 만든 명령 플러그인의 코드가 있습니다.

우리 팀은 독특한 코드 미학을 가지고 있다.

우리는 문자열 길이 순서로 정렬된 수입을 좋아합니다.

가장 짧은 것부터 가장 긴 것까지.

그리고 패키지 플러그인은 모두 사용자 지정과 제어에 관한 것이기 때문에, 우리는 SwiftFormat을 사용하여 그것을 처리하는 명령 플러그인을 만들었습니다.

그것은 로컬로 수정된 모든 파일을 찾은 다음, 가져오기를 분류한다.

자, 여기 상단에 정렬되지 않은 가져오기로 편집하고 있는 파일이 있습니다.

나는 전체 프로젝트에서 명령을 사용할 것이다.

나는 원하는 수의 목표를 선택할 수 있다. 내가 모든 걸 실행할게.

그리고 내가 원한다면 플러그인의 코드를 검토할 수 있다.

난 준비 다 됐어. 내가 명령을 실행할게.

그리고 나서, 그렇게, 플러그인은 내 파일에서 작동한다.

로컬로 수정된 모든 소스 파일을 찾은 다음 길이 순서대로 정렬합니다.

플러그인을 사용하면 포맷을 넘어설 수 있습니다.

소스 코드를 생성하고, git으로 작업하고, 사용자 지정 오류와 경고를 표시할 수도 있습니다.

내 코드가 잘 문서화되었는지 확인하기 위한 또 다른 플러그인이 있다.

그것은 빌드 플러그인이며, 오픈 소스 SwiftLint 패키지를 기반으로 합니다.

그래서 이제 내가 빌드할 때, 나는 문서를 추가해야 하는 코드의 모든 장소를 쉽게 볼 수 있다.

그리고 빌드 플러그인은 모든 빌드의 일부로 실행되는 Xcode Cloud까지 확장됩니다.

스위프트 패키지 플러그인을 사용하면, 제 팀과 저는 자체 명령을 만들고, 로컬 및 Xcode 클라우드에서 빌드를 사용자 정의한 다음, 다른 사람들과 플러그인을 공유할 수 있습니다.

모두 스위프트 몇 줄의 힘을 사용한다.

그리고 그것은 패키지 플러그인이 개발 워크플로우를 레벨업할 수 있는 방법을 빠르게 살펴보는 것입니다.

벤: 마지막으로, 스위프트는 후드 아래에 인상적인 변화가 있다.

스위프트 프로젝트를 구축하는 것은 그 어느 때보다 빠르다.

새로운 병렬화 노력 덕분에, 링크 시간은 최대 두 배 더 빠릅니다.

그리고 스위프트 동시성 런타임은 이제 OS와 더 긴밀하게 통합되어 비동기 작업의 우선 순위를 더 잘 보장하여 앱이 효율적이고 반응성을 유지할 수 있도록 도와줍니다.

마지막으로, Swift로 작성된 앱의 출시 시간은 iOS 16에서 극적으로 빠르며, Lyft 또는 Airbnb와 같은 앱은 동적 링커의 개선 덕분에 거의 두 배 빠르게 출시됩니다.

이러한 개선 사항, 툴링의 새로운 능력, 읽고 쓰기 쉬운 진화된 구문, 동시성의 개선으로 Swift에서 개발하기에 더 좋은 시기는 없었습니다.

스위프트는 우리 기기에서 앱을 구축하기 위한 최고의 언어이다.

하지만 언어는 최고의 앱을 만드는 데 필요한 것의 일부일 뿐입니다.

언어를 강력한 사용자 인터페이스 프레임워크와 페어링해야 합니다.

그리고 엘리자가 너에게 더 말해줄 거야.

엘리자 블록: 강력한 UI 프레임워크는 인터페이스를 쉽게 설명하고, 데이터로 채우고, 최신 상태로 유지할 수 있는 추상화를 제공합니다.

그것은 복잡성과 함께 잘 확장되어야 한다.

그리고 그것은 당신이 목표로 하는 플랫폼에 맞게 설계되어야 하며, 장치의 힘에 대한 완전한 접근 권한을 제공해야 합니다.

UI 프레임워크는 앱을 친숙하고 직관적으로 만드는 데 도움이 될 것입니다.

고급 사용자 지정 옵션으로 표준 컨트롤과 기본 상호 작용 패턴을 쉽게 만들 수 있어야 합니다.

그리고 아이디어를 빠르게 프로토타입하고 다양한 장치에서 결과를 볼 수 있는 표현적인 API가 있어야 합니다.

SwiftUI는 이 모든 것과 그 이상을 제공한다.

스위프트와 마찬가지로, 스위프트 UI는 앱을 만드는 가장 좋은 방법에 대한 강력한 의견으로 설계되었습니다.

그것은 읽고 쓰기 쉬운 선언적 구문을 가지고 있다.

당신은 인터페이스를 구축하는 방법 대신 인터페이스가 어떻게 생겼는지 설명합니다.

그리고 이것은 SwiftUI가 각 플랫폼에 대한 지능형 기본값을 제공할 수 있는 여지를 남깁니다.

SwiftUI는 기본 데이터 모델의 변경으로 인터페이스를 자동으로 최신 상태로 유지하므로 앱의 UI가 일관성 없는 상태로 끝나지 않습니다.

SwiftUI는 이러한 모든 세부 사항을 처리하므로, 앱을 독특하게 만드는 것에 시간과 에너지를 집중할 수 있습니다.

새로운 UI 프레임워크를 작성하는 것은 큰 사업이다.

도입 이후 우리는 당신의 피드백에 따라 SwiftUI의 API 범위를 지속적으로 확장해 왔습니다.

올해 우리는 기존 앱에서 SwiftUI를 점진적으로 채택하는 것을 훨씬 더 쉽게 만들었고, 앱 탐색을 시작으로 성능과 유연성을 몇 가지 흥미로운 개선 사항을 만들었습니다.

SwiftUI를 사용하면, 많은 앱에서 발견되는 일반적인 종류의 탐색 계층을 만드는 것은 항상 쉬웠다.

그리고 올해 SwiftUI는 완전히 새로운 내비게이션 API로 지원을 확장하고 있다.

새로운 내비게이션 API를 사용하면 앱의 요구에 가장 적합한 내비게이션 스타일을 쉽게 표현할 수 있습니다.

앱의 보기 프레젠테이션에 대한 강력한 프로그래밍 제어를 통해 선택을 쉽게 저장하고 복원할 수 있으며, 내비게이션 스택의 전체 내용을 대체할 수도 있습니다.

이것은 앱의 실행 상태를 설정하고, 크기 클래스 간의 전환을 관리하고, 딥 링크에 응답하는 것과 같은 중요한 행동을 처리할 때 정말 유용합니다.

SwiftUI는 또한 앱 인터페이스의 레이아웃을 제어할 때 크게 개선되었습니다.

많은 앱 인터페이스의 레이아웃은 SwiftUI의 수평 또는 수직 요소 스택 모델을 사용하여 설명할 수 있습니다.

그리고 이 모델은 많은 일반적인 레이아웃에서 작동하지만, 때로는 더 유연한 무언가가 필요합니다.

올해, 우리는 여러 행과 열에 정렬된 뷰 세트를 더 쉽게 배치할 수 있는 새로운 그리드 API를 추가하고 있습니다.

그리고 완전히 새로운 사용자 지정 레이아웃 API로 레이아웃을 더욱 발전시킬 수 있습니다.

사용자 지정 레이아웃 API는 원하는 모든 유형의 레이아웃을 구축할 수 있는 유연성을 제공합니다.

예를 들어, 더 많은 공간이 필요할 때 다음 열로 포장하여 신문의 내용처럼 레이아웃을 배열하는 흐름 레이아웃을 만들 수 있습니다.

또는 시계 화면의 숫자처럼 원으로 뷰를 그리는 방사형 레이아웃을 만들 수 있습니다.

사용자 지정 레이아웃 API를 사용하면 레이아웃 로직을 쉽게 재사용할 수 있으므로 보기 코드를 더 간단하고 쉽게 읽을 수 있습니다.

SwiftUI는 더 많은 유형의 인터페이스 요소를 제공하기 위해 계속 성장하고 있다.

메인 뷰 위로 미끄러지는 2차 뷰를 정의하는 하프 시트처럼.

이것들은 더 작은 화면의 정보에 빠르게 접근할 수 있게 해준다.

그리고 SwiftUI는 이제 공유 시트를 지원하므로, 앱은 사용자의 장치에서 사용할 수 있는 모든 공유 확장을 쉽게 활용할 수 있습니다.

공유 시트 지원은 앱 데이터를 전송하기 위한 형식에 안전한 API를 도입하는 새로운 전송 가능한 프로토콜에 의해 구동됩니다.

우리는 또한 SwiftUI 뷰를 호스팅할 수 있는 특별한 컬렉션 뷰 셀로 기존 앱에서 SwiftUI를 점진적으로 채택하는 것을 더 쉽게 만들었습니다.

UIKit 앱에 이미 컬렉션 보기가 있다면, 이제 SwiftUI의 선언 구문을 사용하여 사용자 지정 셀을 작성할 수 있습니다.

이 셀은 UIKit과 긴밀하게 통합되어 스와이프 동작, 셀 배경 및 UICollectionView의 다른 모든 기능을 지원합니다.

오늘 우리는 또한 SwiftUI를 보완하고 더 많은 인터페이스를 표현할 수 있는 새로운 프레임워크를 소개합니다.

여기 조가 더 말해줄게.

Jo Arreaza-Taylor: 오늘날의 세계는 데이터로 가득 차 있다.

이해하고, 결정을 내리고, 새로운 관점을 보는 데 도움이 되는 데이터.

잘 설계되고 접근 가능한 데이터 시각화는 명확하고 자연스러운 방식으로 사용자에게 복잡성을 전달할 수 있으며, 하루 종일 이동할 때 사용자에게 힘을 실어줄 수 있습니다.

건강의 변화하는 추세를 보여주고, 개인적인 목표를 향한 진전을 강조하고, 다가올 일에 대비하는 것을 돕는 것과 같다.

오늘, 우리는 사용자가 앱 내에서 데이터의 잠금을 해제할 수 있도록 새로운 프레임워크를 도입합니다.

스위프트 차트에 인사하세요.

Swift Charts는 SwiftUI 위에 구축된 고도로 사용자 정의 가능한 차트 프레임워크로, 멋진 시각화를 쉽게 만들 수 있습니다.

SwiftUI와 동일한 선언적 구문을 사용하여 시각적 정보를 전달하는 코드를 쉽게 읽고 쓸 수 있습니다.

스위프트 차트를 사용하면 앱의 요구에 가장 잘 맞는 정보 프레젠테이션을 사용자 정의하여 선 및 막대 차트에서 히트 맵 및 스트림 그래프와 같은 더 정교한 예제에 이르기까지 모든 것을 만들 수 있습니다.

그리고 스위프트 차트는 SwiftUI 위에 구축되었기 때문에, 차트는 사용자 정의하기 쉬운 훌륭한 즉시 사용 가능한 VoiceOver 경험과 같은 접근성 기능을 지원합니다.

SwiftUI를 기반으로 구축된다는 것은 또한 차트를 애니메이션화하여 앱에 올바른 모양과 느낌을 줄 수 있다는 것을 의미합니다.

그리고 물론, 스위프트 차트는 모든 장치에서 잘 작동합니다.

엘리자: 푸드 트럭 앱으로 돌아가서, Xcode의 완전히 재설계된 미리보기 영역에 있는 아름다운 새로운 스위프트 차트가 있습니다.

나는 또한 새로운 멀티컬럼 SwiftUI 테이블 뷰를 사용하고 있다.

이 차트를 만드는 것이 얼마나 쉬운지 보여드리겠습니다.

그리고 스크롤하면서, 소스 편집기에서 멋진 새로운 구조화된 헤더를 확인하세요.

그들은 당신이 파일에서 어디에 있는지 정말 쉽게 볼 수 있게 해준다.

여기 차트 코드가 있습니다.

이제, 이것은 실제로 쌓인 막대 차트이지만, 당신은 정말로 말할 수 없습니다.

각 도넛마다 자신만의 색을 사용하자.

바를 나란히 배치하면 도넛이 어떻게 비교되는지 보는 것이 더 쉬울 것이다.

나는 몇 가지 간단한 수정자로 이 모든 큰 변화를 만들 수 있는 방법을 좋아한다.

우리는 스타일링도 사용자 정의할 수 있습니다.

바가 도넛 색을 반영하도록 합시다.

그리고 우리는 다른 수정자로 막대에 주석을 추가할 수도 있습니다.

좋아 보인다.

미리보기는 이제 기본적으로 활성화되어 있으므로, 내 뷰와 즉시 상호 작용할 수 있습니다.

나는 정렬 순서를 바꿀 거야.

스위프트 차트가 모든 무거운 일을 하면서 바가 어떻게 아름답게 움직이는지 보세요.

더 많은 데이터를 가져오자.

차트와 표는 모두 모델이 변경됨에 따라 자동으로 업데이트됩니다.

차트는 심지어 새로운 합계를 반영하기 위해 Y축을 다시 계산한다.

차트 하나 더 보여줄게.

나는 우리가 보기에 추가할 수 있는 선 차트를 찔렀다.

나는 실행으로 넘어갈 것이다.

스위프트 차트가 있는 라인 차트에는 정말 멋진 옵션이 있습니다.

우리는 각 도넛에 기호를 추가할 수 있다.

우리는 줄에 주석을 달 수 있다.

우리는 심지어 다양한 보간 전략으로 곡선을 부드럽게 할 수 있다.

catmullRom을 사용하자.

마지막으로, 나는 나만의 매핑을 제공함으로써 차트 스케일 스타일을 재정의할 것이다.

그것은 내 차트가 앱의 색 구성표에 더 잘 맞도록 만들 것이다.

정말 좋아.

재설계된 미리보기 영역은 다른 환경에서 내 시야가 어떻게 보이는지 그 어느 때보다 쉽게 볼 수 있게 해준다.

캔버스에서 이 버튼을 누르면, 어둡고 밝은 모드에서 내 시야를 볼 수 있다.

나는 심지어 하나의 추가 미리보기를 추가하지 않고도 모든 인터페이스 방향에서 내 레이아웃을 볼 수 있다.

풍경을 확대해 봅시다.

내 UI가 여기에 잘 맞지 않는 것 같아.

몇몇 컨트롤은 화면 끄제이며, 차트는 어색한 종횡비를 가지고 있다.

우리가 이 레이아웃을 어디에 설명하고 있는지 봅시다.

여기의 이러한 견해는 암묵적인 Vstack에 있다.

올해 SwiftUI에는 더 유연한 레이아웃을 만들 수 있는 강력한 새로운 API가 있습니다.

여기서, 저는 사용 가능한 공간에 따라 ViewThatFits를 사용하여 수직 스택과 수평 스택 사이를 전환할 것입니다.

그게 훨씬 나아 보여.

메인 화면에서 탐색할 수 있도록 이것을 연결합시다.

저는 이것을 정말 쉽게 만드는 SwiftUI의 새로운 내비게이션 분할 보기를 사용하고 있습니다.

분할 보기에는 선택을 추적하는 사이드바와 사이드바 선택이 변경됨에 따라 콘텐츠를 변경하는 NavigationStack이 있습니다.

사이드바로 들어가서 도넛 챔피언 보기에 대한 내비게이션 링크를 추가하겠습니다.

그리고 나서, 우리는 인터랙티브 프리뷰에서 그것을 시도해 볼 수 있다.

가로로 분할 보기를 보고 싶기 때문에, 새로운 캔버스 설정을 사용하여 라이브 미리보기를 회전할 것입니다.

잘 돼.

나는 이것이 iPad에서 어떻게 보이는지에 만족하지만, 이제 나는 그것을 Mac으로 가져오고 싶고, 몇 번의 클릭만으로 할 수 있다.

저는 Mac SDK를 최대한 활용하고 싶기 때문에, 네이티브를 사용할 것입니다.

내 앱을 뒷받침하는 단일 타겟으로, 나는 거의 모든 코드를 공유할 수 있으며, SwiftUI는 내 앱을 각 플랫폼에서 멋지게 보이게 한다.

나는 또한 장치별 기능을 쉽게 추가할 수 있다.

내 Mac 앱의 경우, 메뉴 표시줄을 추가로 추가해 봅시다.

그것들은 Wi-Fi와 Spotlight와 같이 화면의 오른쪽 상단 모서리에 있는 작은 유용한 아이콘입니다.

SwiftUI는 이를 위한 새로운 API를 가지고 있다.

난 그냥 그걸 내 앱의 본문에 추가해.

이제 Mac용으로 이것을 실행해 봅시다.

우리의 도넛 챔피언 뷰는 상자에서 꺼내자마자 Mac에서 멋지게 보입니다.

그리고 여기 추가 메뉴 바가 있습니다.

그건 편리할 거야.

그리고 그것은 스위프트 차트와 스위프트UI와 Xcode의 몇 가지 개선 사항을 빠르게 살펴보는 것입니다.

그리고 이제 조쉬에게 돌아가.

조쉬: 우리는 앱과 시스템 인터페이스 전반에 걸쳐 SwiftUI의 채택을 계속 확장하고 있습니다.

예를 들어, iOS의 새로운 잠금 화면 위젯은 SwiftUI를 사용하여 처음부터 설계되었습니다.

새로운 폰트북 앱은 그것으로 완전히 다시 쓰여졌다.

그리고 새로운 macOS 시스템 설정 앱의 현대적이고 미래 지향적인 디자인은 그것을 사용하여 만들어졌다.

Swift와 SwiftUI는 처음부터 모든 Apple 플랫폼에 단일 모국어와 API를 제공하도록 설계되었습니다.

당신은 그것들을 한 번 배우고 모든 곳에 적용할 수 있습니다.

당신의 비전이 Apple Watch, MacBook Pro 및 iPad의 생산성 도구, iPhone의 새로운 경험 또는 Apple TV로 휴식을 취할 수 있는 새로운 방법이든, Swift, SwiftUI 및 Xcode는 모든 제품에 대한 앱을 구축하는 데 도움이 되는 차세대 통합 개발 플랫폼을 제공합니다.

이제, 기존 앱이 있다면, 이러한 새로운 기술을 점진적으로 채택하는 것은 쉽습니다.

그리고 만약 당신이 우리 플랫폼을 처음 접하거나 새로운 앱을 시작하는 경우, 앱을 만드는 가장 좋은 방법은 Swift와 SwiftUI를 사용하는 것입니다.

이제, 물론 그건 시작에 불과해.

우리는 또한 사용자를 참여시킬 수 있는 더 많은 방법을 제공하기 위해 플랫폼의 사용자 경험을 계속 발전시키고 있습니다.

그리고 더 말씀드리자면, 여기 세바스티앙이 있습니다.

Sebastien Marineau-Mes: 이제 앱은 아이디어, 코드 및 API를 사용자 경험으로 바꾸는 것입니다.

그리고 최고의 앱은 그들이 지금 있는 곳에서 사용자를 만날 수 있는 앱이다.

우리는 당신이 앱을 넘어서는 사용자 경험을 Apple 기기의 시스템 경험에 구축할 수 있도록 돕는 방법을 만들었습니다.

이 여정은 확장, 공유 시트와의 통합, 사용자 지정 키보드로 시작되었습니다.

그리고 최근에는 위젯을 사용하여 앱이 홈 화면에 주요 정보를 표시할 수 있는 기능이 포함되어 있습니다.

이제, 올해, 당신의 앱이 우리 플랫폼에서 시스템 경험과 통합할 수 있는 많은 새로운 방법이 있으며, 그것은 실제로 가장 큰 업데이트를 받는 잠금 화면으로 시작됩니다.

그것은 잠금 화면이 어떻게 보이고 어떻게 작동하는지 다시 상상하며, 당신의 아이디어와 앱에 사용자를 참여시킬 수 있는 또 다른 장소를 제공합니다.

그리고 더 말씀드리자면, 여기 로버트가 있습니다.

로버트 다엔: 잠금 화면을 다시 상상하면서, 우리는 일상적인 유용성을 개선하면서 훨씬 더 개인적이고 아름답게 만들기 시작했습니다.

이것의 일환으로, 우리는 완전히 새로운 잠금 화면에 위젯의 힘을 가져와야 한다는 것을 알고 있었다.

위젯은 앱에서 주요 정보를 높이고 사람들이 한 눈에 볼 수 있는 곳에 표시하는 놀라운 방법이었습니다.

그들은 홈 화면에서 바로 풍부하고 시기적절한 정보에 쉽게 접근할 수 있게 해준다.

잠금 화면은 iPhone을 픽업할 때마다 가장 먼저 보는 것이며, 항상 날짜와 시간을 확인하고 주요 메시지를 찾을 수 있는 장소였습니다.

여기에 더 많은 정보를 표시하기 위한 최고의 형식에 대해 생각할 때, 우리는 디자인 영감을 멀리 찾을 필요가 없었다.

Apple Watch의 합병증은 이미 한눈에 볼 수 있고 관련성이 있으며 최신 정보를 제공하며, 사용자가 필요할 때 아름답게 제공됩니다.

디자인 언어는 자연스럽게 iOS로 확장되며 새로운 잠금 화면에서 집처럼 느껴집니다.

그래서 WidgetKit을 사용하여, 우리는 작은 이미지, 게이지 또는 텍스트의 몇 문자를 표시하는 Circular를 포함하여 잠금 화면의 위젯에 동일한 디자인 중 일부를 가져왔습니다.

원형 위젯은 당신이 오늘 충분히 활동했는지 아니면 달리기를 위해 나가야 하는지를 표시하는 데 좋습니다.

직사각형은 다가오는 일기 예보와 같은 것들을 표시하기 위한 큰 캔버스를 제공한다.

인라인은 6일 월요일과 같은 시스템이 제공하는 날짜 문자열 옆에 있는 iPhone의 시계 위에 소량의 텍스트와 SF 기호로 정보를 전달하는 강력한 방법을 제공합니다.

그리고 그건 그렇고, 이 모든 위젯은 iOS와 watchOS 모두에서 작동합니다. 왜냐하면 watchOS 9에서 시작하는 컴플리케이션도 WidgetKit에 의해 구동되기 때문입니다.

처음으로, 동일한 코드를 사용하여 두 플랫폼 모두에서 한눈에 볼 수 있는 데이터를 생성할 수 있습니다.

WidgetKit은 기본적으로 적절한 시스템 글꼴을 사용하여 플랫폼 차이를 자동으로 관리하고, 최대한의 가독성을 위해 잠금 화면에서 위젯을 색칠합니다.

WidgetKit을 사용하여 동일한 코드를 사용하여 iPhone의 잠금 화면과 Apple Watch의 컴플리케이션을 위한 위젯을 만드는 방법을 보여주기 위해, 마이클에게 넘길 것입니다.

마이클 켄트: iPhone 잠금 화면에서 위젯을 만들고 Apple Watch에서 컴플리케이션을 만드는 것은 WidgetKit을 사용하면 정말 쉽습니다.

홈 화면 위젯을 만들었다면, 데이터와 타임라인이 업데이트되는 방식을 포함하여 이미 대부분의 길을 갈 수 있습니다.

푸드 트럭 앱에는 이미 사용자가 홈 화면에 추가하여 오늘 할당량에서 얼마나 많은 주문을 완료했는지 확인할 수 있는 작은 위젯 시스템이 있습니다.

이런 종류의 정보는 잠금 화면이나 시계 화면의 합병증에 표시하는 것이 좋을 것이다.

Circular 가족을 만드는 것부터 시작합시다.

우리는 먼저 지원 가족 배열에서 그것에 대한 지원을 선언할 것입니다.

당신은 우리가 여기서 몇 가지 플랫폼 조건을 사용하고 있다는 것을 알게 될 것입니다.

이것은 우리가 이 위젯이 systemSmall으로 macOS와 iOS를 계속 지원하기를 원하지만, 그 가족은 watchOS에서 사용할 수 없기 때문입니다.

그런 다음, 우리는 그 견해를 정의하기 위해 사례를 추가할 것이다.

사용자가 한 눈에 진행 상황을 빠르게 볼 수 있도록 0에서 일일 할당량까지의 현재 주문 수를 보여주는 게이지를 사용합시다.

우리는 현재 주문 수를 도넛 기호와 함께 중앙에 텍스트로 표시할 것입니다. 거기.

지금 Xcode Previews에서 이것을 살펴봅시다.

멋져! 그것은 잠금 화면에서 집처럼 느껴진다.

한 눈에 좀 더 자세히 보여주기 위해, 우리는 또한 직사각형 가족에 대한 지원을 추가할 수 있습니다.

이 보기를 위해, 우리는 표시된 데이터의 제목과 동일한 도넛 기호로 시작하는 VStack을 만들 것입니다.

글꼴에 헤드라인 스타일을 사용함으로써, 우리는 두 플랫폼 모두에서 멋지게 보이는 치료를 받게 될 것입니다.

그리고 우리는 그것이 widgetAccentable 수정자와 함께 튀어나오도록 할 것입니다.

직사각형 가족은 우리에게 조금 더 많은 공간을 제공하기 때문에, 우리는 멋진 사용자 지정 세그먼트 게이지를 보여주고 게이지 라벨의 일일 할당량에서 현재 주문 수를 표시할 것입니다.

캔버스를 되돌아보면, 미리보기에서도 직사각형 위젯을 볼 수 있습니다.

난 그 게이지가 정말 좋아.

이제 이 위젯이 시계 화면의 원형 합병증으로 어떻게 나타나는지 살펴봅시다.

음, 좋아, 모든 것이 있지만, 합병증을 위해, 우리는 또한 Xcode 미리보기의 기본값인 풀 컬러 렌더링 모드를 고려해야 합니다.

각 게이지에 색조를 추가하여 그렇게 합시다.

그리고 직사각형 헤드라인의 전경색.

풀 컬러의 약간의 팝을 위해, 우리는 환경 속성으로 렌더링 모드를 확인하여 원형과 직사각형 보기 모두에서 도넛 기호를 도넛 이모티콘으로 바꿀 수 있습니다.

그거 정말 멋져 보여!

미리보기의 새로운 변형 UI를 사용하면 코드 없이 미리 보고 있는 색상을 변경할 수 있습니다.

아니면 한 번에 몇 개를 보세요.

그리고 우리가 기본 간격, 시스템 글꼴 스타일을 사용하고 렌더링 모드에 적응했기 때문에, 잠금 화면과 시계 화면 모두에서 동일한 보기가 집에서 보입니다.

iOS 16의 새로운 잠금 화면에서 위젯을 만드는 것은 쉽고 watchOS 9에서는 큰 합병증을 모두 동일한 코드로 만들 수 있습니다.

하지만 이것이 우리가 WidgetKit의 힘을 잠금 화면에 가져온 유일한 방법은 아닙니다.

여기 너에게 더 말해줄 매트가 있어.

매트 셰퍼드: WidgetKit을 사용하면 사람들이 한눈에 볼 수 있는 정보에 접근할 수 있습니다.

하지만 실시간 업데이트, 활동과 관련된 정보 또는 그들이 지금 관심을 가지고 있는 이벤트가 필요한 순간은 어떨까요?

그것을 위해, 우리는 라이브 활동이라고 부르는 새로운 것을 연구하고 있다.

라이브 활동을 사용하면 잠금 화면에서 바로 실시간으로 일어나는 일을 더 쉽게 파악할 수 있습니다.

잠금 화면에서 바로 게임의 최신 점수, 승차 공유 진행 상황 또는 운동과 같은 것들, 그리고 항상 최신 상태입니다.

위젯과 마찬가지로, 위젯킷으로 라이브 활동을 만들 수 있습니다.

차이점은 라이브 활동의 프레젠테이션과 상태를 실시간으로 업데이트하는 것입니다.

SwiftUI로 구축되었기 때문에, 한 상태에서 다음 상태로 업데이트를 애니메이션화할 수도 있습니다.

이러한 업데이트는 사용자가 훑어보기로 선택할 때 라이브 활동에 최신 정보가 있는지 확인합니다.

라이브 활동은 올해 말 iOS 16 업데이트부터 사용할 수 있습니다.

그래서 그것들은 완전히 새로운 잠금 화면에 대한 업데이트입니다.

우리는 그들이 사람들에게 가장 필요한 순간에 더 많은 정보를 한 눈에 제공하는 데 도움이 되는 좋은 방법이 될 것이라고 생각합니다.

다음으로, 협업 경험을 향상시키는 새로운 방법에 대해 이야기해 봅시다.

더 말씀드리자면, 여기 피에르가 있습니다.

피에르 드 필리피스: 협업은 사람들이 iOS, iPadOS 및 macOS에서 하는 일의 중요한 부분이다.

그리고 그것은 많은 사람들이 모든 거리에서 협력하는 팀을 지원하기 위해 구축한 놀라운 풍부한 앱 덕분입니다.

Airtable의 제품 로드맵과 같은 일을 위한 협업이 있으며, Redfin에서 꿈의 집을 찾는 것과 같은 놀이를 위한 협업도 있습니다.

일을 위한 것이든 놀이를 위한 것이든, 협업은 종종 대화로 시작된다.

그리고 새로운 메시지 협업 API를 사용하면 앱의 기존 협업 경험을 메시지와 FaceTime으로 가져올 수 있습니다.

사용자가 앱에서 콘텐츠에 대한 링크를 공유할 때, API를 사용하면 해당 링크를 협업으로 쉽게 표시하여 원활한 경험을 할 수 있습니다.

우리는 당신이 필요한 식별자를 제공하므로 수신자가 가입할 링크를 탭할 때 즉시 접근할 수 있습니다.

그리고 물론, 이것은 사생활을 손상시키지 않고 작동한다.

메시지 ID와 앱 ID는 비공개로 유지되며 공유되지 않습니다.

그리고 가장 좋은 점은, 앱이 이미 사용하고 있는 기존 기술로 이것을 할 수 있다는 것입니다.

하나의 객체로, 사용자는 이미 익숙한 두 가지 편리한 방법으로 협업을 시작할 수 있습니다.

하나는 협업을 전면과 중앙에 두도록 업데이트된 공유 시트이며, 두 번째는 드래그 앤 드롭으로 메시지 대화로 직접 드래그하여 협업하고 싶은 콘텐츠를 공유할 수 있습니다.

그리고 대화가 시작되면, 콘텐츠 업데이트에 대한 공지를 메시지 대화에 바로 게시할 수도 있습니다.

몇 줄의 코드로, 사용자는 메시지에서 한 번의 탭으로 앱에서 다시 협업할 수 있습니다.

그리고 협업 팝오버를 통해 사용자는 앱에서 바로 메시지나 FaceTime의 대화로 돌아갈 수 있습니다.

그래서 메시지 협업 API를 통해, 당신의 앱은 진정으로 메시지와 페이스타임의 구조에 짜여져 있습니다.

우리는 당신이 앱에서 제공하는 강력한 협업 도구에 집중할 수 있도록 사용자에게 강력한 커뮤니케이션 도구를 제공합니다.

따라서 이것은 iOS, iPadOS 및 macOS에서 협업을 향상시켜 일이든 놀이를 위해 협력하는 사람들 사이의 연결에 깊이 뿌리를 둔 일관된 경험을 창출할 것입니다.

다음은 App Intents라는 새로운 프레임워크에 대해 알려줄 Ari입니다.

Ari Weinstein: 앱에서 앱의 기능을 시스템에서 사용할 수 있도록 하는 앱 인텐트 프레임워크에 대해 알려드리게 되어 기쁩니다. 그래서 사람들은 Siri와 단축키를 통해 자동으로 사용할 수 있습니다.

사람들은 앱에서 단축키를 사용하는 것을 좋아한다.

그들은 Siri에게 물어보거나 홈 화면의 단축키를 빠르게 탭하여 일을 빨리 끝낼 수 있게 해준다.

그리고 사람들이 사용자 지정 단축키로 앱 기능을 완전히 새로운 기능으로 리믹스하는 방법을 보는 것은 놀랍습니다.

오늘날, 사람들은 단축키를 사용하기 전에 수동으로 단축키를 추가해야 한다.

우리는 새로운 앱 인텐트 프레임워크로 iOS 16에서 이것을 자동으로 만들고 있습니다.

앱 인텐트는 단축키와 함께 작동하여 사람들이 "이봐, 시리, 룸바로 부엌을 청소하세요"와 같이 먼저 아무것도 설정할 필요 없이 시리와 함께 즉시 사용할 수 있는 앱 단축키를 형성합니다.

하지만 그건 그냥 Siri가 아니야.

앱 단축키는 사용자가 Spotlight와 같이 시스템 전반에 걸쳐 앱의 기능에 대한 맨 앞줄 자리를 제공합니다. 사람들이 앱을 검색할 때마다 단축키도 나타나며, 기부와 같은 추가 API를 채택할 필요 없이 앱 제안 바로 아래에 단축키가 제안됩니다.

단축키는 또한 사람들이 탭 한 번으로 실행할 수 있는 단축키 앱에 즉시 나타납니다.

앱 인텐트는 우리가 iOS10에 도입한 SiriKit 인텐트 프레임워크의 다음 단계입니다.

위젯이나 미디어 또는 메시징과 같은 도메인과 통합하기 위해 인텐트를 채택하는 경우, SiriKit 인텐트 프레임워크를 계속 사용해야 하지만, Siri 및 단축키에 대한 사용자 지정 인텐트를 구축하는 개발자의 경우, 앱 인텐트로 업그레이드해야 합니다.

인텐트 정의 파일에서 변환 버튼을 눌러 Xcode에서 앱 인텐트로 쉽게 업그레이드할 수 있습니다.

Xcode는 동등한 앱 인텐트 소스 코드를 생성한 다음, 인텐트 처리 코드로 빈칸을 채웁니다.

앱 인텐트 프레임워크는 처음부터 스위프트를 위해 설계되었기 때문에 개발하기가 정말 쉽고, 코드가 훨씬 적게 필요합니다.

당신이 작성하는 스위프트 코드는 진실의 유일한 원천이며, 동기화를 유지할 별도의 의도 정의 파일이나 코드 생성은 없습니다.

그리고 그 코드는 당신의 프로젝트에 쉽게 추가할 수 있습니다.

코드베이스를 재설계할 필요가 없습니다.

Objective-C 코드가 있더라도, Swift로 래핑하여 App Intents와 함께 사용할 수 있습니다.

앱 의도는 사람들이 앱 내에서 할 수 있는 것을 나타내며, 앱 외부에서 할 수 있습니다.

몇 줄의 코드로 인텐트를 정의하고 앱 단축키를 추가할 수 있습니다.

같이 해보자.

푸드 트럭 앱으로 돌아가서, 오늘이나 이번 주와 같은 주어진 기간 동안 가장 많이 팔린 도넛 상위 5개를 볼 수 있는 멋진 차트 보기가 있습니다.

나는 사람들이 그것을 매우 빨리 끌어올 수 있도록 이것을 시리와 단축키에 노출시키고 싶다. 그래서 먼저, Xcode에서, 나는 새로운 스위프트 파일로 갈 것이다.

나는 앱 인텐트 프레임워크와 SwiftUI를 가져올 것이다.

그런 다음 AppIntent 프로토콜을 준수하는 구조를 정의하여 의도를 정의합니다.

내가 제목을 줄게.

그리고 나는 어떤 트렌드를 볼 것인지에 대한 매개 변수를 추가할 것이다.

이것은 내 코드베이스에 이미 정의된 시간 프레임 열거형을 사용한다.

"오늘"과 "이번 주"와 같은 각 열거형 사례에 대해 사람이 읽을 수 있는 이름을 추출할 수 있도록 AppEnum 프로토콜을 준수하도록 확장해야 합니다.

다음으로, 의도에 따라, 나는 수행 방법을 구현할 것이다.

여기서, 저는 SwiftUI 차트 보기를 포함하는 결과를 반환합니다.

나는 또한 대화나 출력 값을 포함할 수 있다.

나는 사람들이 설정 없이 이 의도를 자동으로 사용할 수 있기를 원하기 때문에, 앱 바로 가기를 정의할 것이다.

여기에는 사람들이 Siri에게 이 의도를 사용하기 위해 말할 수 있는 문구가 포함되어 있다.

이 문구는 앱 이름을 변수로 포함해야 하며, 사람들이 "오늘의 푸드 트럭 트렌드" 또는 "이번 주 푸드 트럭 트렌드"라고 말할 수 있도록 시간 프레임 매개 변수를 포함했습니다.

내가 해야 할 마지막 일은 내 사용자들이 이것을 발견할 수 있도록 하는 것이다.

사람들은 어느 시점에서 그 문구를 볼 필요가 있다, 그래서 그들은 Siri에게 무슨 말을 해야 할지 알고 있다, 그래서 나는 우리가 몇 초 전에 보고 있던 상위 5개 도넛 보기의 파일로 전환할 것이다, 그리고 나는 Siri 팁을 추가할 것이다.

이제 나는 앱을 만들고 실행하고 내 핸드폰으로 넘어갈 수 있다.

한 번 해보자.

이제 단축키가 각 매개 변수 값에 대한 변형과 함께 단축키 앱에 나타나는 것을 볼 수 있으며, 탭하기만 하면 실행할 수 있습니다.

그리고 나는 "오늘의 푸드 트럭 트렌드"라는 문구를 말하는 것만으로 Siri에서 그것들을 실행할 수 있다.

아니면 나는 "이번 주 푸드 트럭 트렌드"라고 말할 수 있다.

사람들이 내 앱의 상위 5개 보기에 있을 때, 그들은 우리가 하단에 추가한 이 팁을 보게 될 것이므로, 이 기능을 요청하기 위해 Siri에게 무슨 말을 해야 할지 알고 있다.

마지막으로, 사람들은 이와 같이 앱을 검색할 때 Spotlight에서 이것들에 빠르게 접근할 수 있습니다.

그건 정말 유용해.

앱 인텐트는 이러한 모든 플랫폼에서 시스템 경험을 통해 앱의 기능을 그 어느 때보다 쉽게 사용할 수 있도록 할 것입니다.

다음으로, 리키는 우리에게 인증 기술에 대한 몇 가지 큰 업데이트에 대해 알려줄 것이다.

리키 몬델로: 우리가 기억할 수 있는 한, 우리는 비밀번호를 만들고 사용해 왔습니다.

하지만 비밀번호에는 피싱, 계정 간 재사용, 웹사이트 유출과 같은 심각한 문제가 있다.

좋은 소식은 우리가 함께 이 문제들을 해결할 수 있다는 것이다.

그리고 우리는 오늘 패스키로 이것을 할 수 있다.

암호키는 인증 흐름을 간소화하고 비밀번호로 가장 중요한 보안 문제를 해결할 것입니다.

패스키는 믿을 수 없을 정도로 사용하기 쉽도록 설계되었다.

이 인터페이스는 생체 인증을 위해 친숙한 자동 채우기 스타일의 UI와 FaceID 및 TouchID를 사용합니다.

이러한 요소들은 보안을 크게 향상시키면서 비밀번호에서 벗어나 원활한 전환을 만든다.

작동 중인 Passkeys를 확인해 봅시다.

암호키로 계정을 설정할 때, 비밀번호를 만들 필요가 없습니다.

사용자 이름을 입력하고 암호키를 iCloud 키체인에 저장할 것입니다.

이것은 이 암호키를 내 다른 모든 Apple 장치와 안전하게 동기화할 것이다.

그리고 내가 로그아웃하면, 다시 로그인하는 것은 산들바람이다.

그냥 얼굴 ID, 그리고 난 들어갈 거야.

패스키는 플랫폼이 채택하고 있는 개방형 산업 표준을 기반으로 구축되었기 때문에, 방금 iPhone에서 만든 패스키를 사용하여 친구의 PC에서 푸드 트럭 웹사이트에 로그인할 수 있습니다.

웹사이트에서 사용자 이름을 입력하고, 제출하고, 전화를 사용하여 로그인하고, QR 코드를 스캔하고, iPhone과 PC를 안전하게 연결하고, 로그인하는 옵션을 선택할 것입니다.

내 Mac의 Safari에서는 로그인하는 것이 훨씬 더 쉽다.

iCloud 키체인 덕분에 내 비밀번호는 이미 여기에 있으며, 웹사이트의 사용자 이름 필드에서 직접 로그인할 수 있습니다.

패스키를 기존 로그인 흐름에 통합하는 것은 쉽다.

예를 들어, 이 웹사이트의 사용자 이름 필드를 사용하면 비밀번호나 비밀번호로 로그인할 수 있습니다.

비밀번호 기반 계정의 사용자 이름을 입력하면, 빠르게 로그인할 수 있습니다.

암호키로, 그 장치는 힘든 일을 하고, 매번 안전하다.

암호키를 만들 때, 장치는 만들어진 웹사이트나 앱에 특정한 고유한 키를 생성하고 생체 인식 뒤에서 보호합니다.

약한 비밀번호를 갖는 것은 불가능하다.

그것은 잊혀지거나, 재사용되거나, 추측될 수 없다.

패스키는 공개 키 암호화를 기반으로 하며, 서버의 자격 증명 유출을 과거의 것으로 만든다.

유출되고 금이 갈 수 있는 소금에 절인 해시된 비밀번호를 저장하는 대신, 서버는 공개 키만 보관합니다.

공개 키는 진정으로 공개되도록 설계되었으며, 해커들에게 전혀 가치가 없다.

이것은 웹사이트 소유자로서 당신의 위험을 크게 줄여줍니다.

암호키와 함께- 그리고 이 점은 거대하다- 오늘날 우리가 알고 있는 자격 증명 피싱은 사라졌고, 사용자가 직면한 최고의 보안 취약점을 제거한다.

암호키는 본질적으로 그들이 설정한 웹사이트나 앱과 연결되어 있으므로, 사용자는 잘못된 웹사이트에서 암호키를 사용하도록 속일 수 없습니다.

그리고 비밀번호와 달리, 설득력 있는 가짜 웹사이트에 패스키를 입력하거나 복사하거나, 심지어 당신의 어깨 너머로 보는 사람에게 아무것도 줄 수 없습니다.

당신이 모든 것을 합치면, 우리가 여기서 말하는 것은 계정 보안의 새로운 시대입니다.

앱과 웹사이트에 암호키를 가져오는 것은 몇 단계밖에 걸리지 않습니다.

먼저, 계정 백엔드에 공개 키를 저장하고 인증 문제를 해결하도록 가르칠 것입니다.

그런 다음 웹사이트와 앱에서 사용자에게 암호키를 제공하고 API를 채택하여 새 암호키를 만들고 로그인할 수 있습니다.

패스키는 웹 인증 또는 WebAuthn 표준을 기반으로 하며, 이는 플랫폼 공급업체와 서비스 소유자 모두의 업계 전반에 걸친 공동 노력이었습니다.

표준 자체는 성숙하고 잘 문서화되어 있으며, 암호키는 장갑처럼 잘 맞습니다.

이 모든 것은 당신이 지금 당장 구축할 준비가 되어 있습니다.

차세대 보안, 원활한 사용자 경험, 그리고 전환 중에 비밀번호와 함께 아름답게 작동하는 디자인.

너에게 돌아가, 세바스티앙.

세바스티앙: 당신은 방금 모든 플랫폼에서 앱을 시스템 경험과 통합할 수 있는 몇 가지 최신 방법을 보았습니다.

그리고 이러한 통합 지점 외에도, 올해 당신과 당신의 앱에 더 많은 가능성을 열어주는 모든 플랫폼에 수많은 새로운 API와 프레임워크가 있습니다.

그리고 나는 다른 것들에 더 자세히 뛰어들기 전에 너에게 몇 가지를 안내하고 싶어.

iPadOS부터 시작합시다.

iPadOS 16을 사용하면 일관된 데스크톱과 같은 경험으로 가장 강력한 iPad 앱을 만들 수 있습니다.

앱이 자동으로 얻을 수 있는 UI 텍스트 보기에 대한 원활한 찾기 및 교체 경험과 탐색 표시줄, 도구 모음, 문서 메뉴에 대한 업데이트가 있어 사용자가 문서를 쉽게 관리하고 경험을 사용자 정의할 수 있습니다.

연결된 하드웨어로 iPad의 훨씬 더 강력한 응용 프로그램을 가능하게 하기 위해, DriverKit은 iPad에 제공되며, M1 칩의 놀라운 힘을 잠금 해제하는 데 도움을 줍니다.

오늘날 Mac에서 사용할 수 있는 것과 동일한 API로, 더 많은 청중에게 USB, 오디오 및 PCI 장치에 대한 지원을 쉽게 제공할 수 있습니다.

이제, watchOS는 시스템 서비스와의 더 깊은 통합을 통해 앱을 위한 새로운 기회를 창출하고 있다.

watchOS 9의 CallKit 프레임워크에는 앱이 FaceTime 오디오 및 전화 통화와 동일한 친숙한 사용자 경험으로 Apple Watch에서 직접 음성 통화를 할 수 있는 새로운 Voiceover IP 백그라운드 모드가 포함되어 있습니다.

그리고 블루투스로 연결된 의료 기기는 더 강력한 연결성과 데이터 전달을 통해 심각한 상태가 감지될 때 적시에 경고를 받을 수 있습니다.

이제 tvOS 16은 Apple TV의 앱과 주변 장치의 iPhone, iPad 또는 Apple Watch 앱 간에 연결된 경험을 만들 수 있는 새로운 방법을 제공합니다.

따라서 운동은 Apple Watch의 모션 데이터를 사용하거나 iPhone 또는 iPad를 턴 기반 게임을 위한 사용자 지정 컨트롤러로 사용할 수 있으며, tvOS는 장치 검색 및 연결을 관리하므로 앱이 다른 장치에서 실행될 필요도 없습니다.

사실, 앱이 설치되지 않은 경우, 사용자에게 App Store에서 바로 다운로드하라는 메시지가 자동으로 표시됩니다.

이제, 전화와 아이패드의 경우, 광고주를 위한 새로운 도구가 있다.

우리는 효과적인 광고가 많은 비즈니스에 중요하다는 것을 알고 있으며, 이것이 우리가 SKAdNetwork를 만든 이유입니다.

광고 네트워크와 광고주가 사용자를 추적하지 않고 캠페인의 성과를 측정하는 데 도움이 되는 API이며, 많은 제3자 광고 네트워크가 이를 채택하는 것을 보게 되어 기쁩니다.

이제, 우리는 광고 네트워크와 개발자로부터 피드백을 들었고, 올해 우리는 가장 큰 요청 중 일부를 반영하고 사용자 개인 정보를 손상시키지 않으면서 극적으로 더 많은 유연성을 제공하는 SKAdNetwork를 개선했습니다.

이제 iPhone과 iPad에는 ScanKit과 RoomPlan으로 AR 및 LiDAR 스캐닝을 사용하는 새로운 멋진 기능이 있습니다.

이 API를 사용하면 앱이 USD 및 USDZ 형식으로 풍부한 3D 파라메트릭 룸 모델을 만들 수 있습니다.

따라서 건축과 디자인에서 소매 및 환대에 이르기까지 다양한 워크플로우와 경험을 만들 수 있으며, 모델에는 소파, 캐비닛, TV, 심지어 주방 싱크대와 같은 범주에 대한 가구 분류가 포함됩니다.

이제, 작년에, 우리는 iPhone, iPad, Mac 및 Apple Watch용 Focus를 도입했으며, 이를 통해 앱이 사용자의 Focus를 기반으로 알림을 관리할 수 있는 방법을 도입했습니다.

그리고 올해, 포커스는 포커스 필터로 더 나아간다.

그것들은 앱 인텐트 위에 구축되었으며, 포커스 필터를 사용하면 사용자의 현재 포커스에 따라 앱의 콘텐츠를 조정할 수 있습니다.

예를 들어, 앱은 사용자가 작업 포커스에 있을 때만 작업 계정을 표시하는 포커스 필터를 만들 수 있습니다.

그리고 그 예시들은 정말 표면을 긁고 있다.

모든 수준에서 전반적으로, 그 어느 때보다 앱을 더 발전시키고 완전히 새로운 앱과 경험을 만드는 데 필요한 기능을 갖춘 새로운 도구와 API가 있습니다.

그래서 다음으로, 정말 다음 단계로 나아가는 기술인 메탈부터 조금 더 깊이 들어가자.

그리고 너에게 더 많은 것을 말해주기 위해, 사라에게 가자.

♪ ♪

사라 클로슨: 메탈은 애플 플랫폼을 위한 놀라운 게임과 프로 앱을 만드는 데 도움이 되는 강력한 그래픽 및 컴퓨팅 API입니다.

Metal을 사용하면 Apple 실리콘과 함께 배송되는 최신 iPhone, iPad 및 Mac 라인업에 걸친 획기적인 Apple GPU와 통합 메모리 시스템을 쉽게 활용할 수 있습니다.

그리고 올해, 우리는 더 높은 프레임 속도로 몰입형 그래픽을 렌더링하고 새로운 수준의 계산 성능을 가능하게 하는 데 도움이 되는 강력한 새로운 기능을 갖춘 Metal 3를 소개합니다.

예를 들어, 이제 새로운 Metal 백엔드를 사용하여 GPU로 ML 교육을 가능하게 하는 기계 학습 프레임워크인 PyTorch에 대한 엄청난 성능 향상을 얻을 수 있습니다.

그리고 가장 큰 초점 영역은 출시 시간과 새로운 레벨 로딩에 영향을 미칠 수 있는 게임 경험의 핵심 요소인 게임 로딩부터 시작하는 게임입니다.

현대 게임은 고품질 자산을 제공함으로써 풍부한 게임 경험을 제공하며, 이러한 자산을 스토리지에서 GPU로 빠르게 로드하는 것은 어려울 수 있습니다.

종종, 게임은 로딩 화면 뒤에 자산 로딩을 숨기고, 게임플레이를 더 빨리 시작하는 한 가지 기술은 고품질 비주얼을 사용할 수 있을 때까지 낮은 품질의 버전을 로드하고 그리는 것입니다.

사용자가 더 낮은 품질의 그래픽을 더 오래 보기 때문에 이것은 이상적인 게임 경험이 아니다.

Metal 3는 Apple GPU의 통합 메모리 아키텍처를 활용하여 로딩 오버헤드를 최소화하고 모든 Apple Silicon Mac과 함께 제공되는 고속 SSD 스토리지가 처리량을 극대화할 수 있는 충분한 요청을 대기열에 갖도록 하는 Metal IO API로 빠른 리소스 로딩을 도입합니다.

이 새로운 API는 더 빠르고 일관된 성능을 제공하므로 이상적인 품질로 그리는 데 더 많은 시간을 할애합니다.

스토리지에서 메모리로 리소스를 옮기는 것 외에도, 게임 로딩은 셰이더 컴파일에 관한 것이다.

셰이더는 항상 사용자의 고유한 하드웨어 구성을 위해 컴파일되어야 하며, 다양한 PC 하드웨어 순열을 통해 일반적으로 런타임에 수행해야 합니다.

이 게임 내 편집은 게이머의 경험에 영향을 미쳐 프레임이 떨어지고, 프레임 속도가 느리고, 로딩이 길어질 수 있다.

대조적으로, Apple Silicon과 Metal 3는 모든 Apple 장치를 지원하도록 함께 설계되었습니다.

그리고 이제 오프라인 셰이더 컴파일을 사용하면 프로젝트 빌드 시간에 GPU 셰이더 바이너리를 생성할 수 있으므로 게임 내 셰이더 컴파일을 제거하여 로드 시간을 줄이고 렌더링 성능을 향상시킬 수 있습니다.

게임의 또 다른 중요한 측면은 풍부하고 상세한 자산을 제공하는 것이며, 게임 그래픽의 시각적 충실도를 높이는 한 가지 방법은 훨씬 더 정교한 기하학적 메쉬를 생성하는 것입니다.

전통적으로 이것은 표면을 평가하고 나중에 렌더링 패스에 사용할 지오메트리를 생성하는 컴퓨팅 패스로 이루어진다.

문제는 이것이 대기 시간을 도입하고 예측할 수 없는 양의 메모리를 차지할 수 있다는 것이다.

메탈 3은 단일 렌더링 패스에서 최적화된 지오메트리 처리 파이프라인을 정밀하게 제어할 수 있는 새로운 메쉬 셰이딩 API를 소개합니다.

오브젝트 셰이더는 얼마나 많은 메쉬를 생성할지 결정하고, 메쉬 셰이더는 래스터라이저로 직접 보낼 실제 지오메트리를 생성하여 장치 메모리로의 이동을 피하고 성능을 향상시킵니다.

게이머들은 또한 가능한 가장 높은 프레임 속도로 이러한 놀라운 비주얼을 보고 싶어하지만, 초고해상도에서 고급 그래픽을 렌더링하는 것은 귀중한 밀리초의 비용이 들 수 있다.

MetalFX 업스케일링은 프레임당 더 짧은 시간에 몰입형 그래픽을 렌더링하는 데 도움을 줍니다.

이게 작동하는 방식이야.

이전에는 기본 해상도로 전체 프레임을 렌더링했지만, GPU 렌더링 시간이 목표 프레임 시간에 도달하지 못할 수도 있습니다.

이제 동일한 복잡한 장면을 낮은 해상도로 렌더링하여 대상 프레임 시간을 충족하고 MetalFX 프레임워크를 사용하여 시간 안티앨리어싱 및 대상 해상도로 업스케일링을 수행할 수 있습니다.

애플 실리콘과 메탈 3의 최적화된 기능으로, 게임은 Mac에서 그렇게 좋아 보인 적이 없었다.

그리고 개발자들은 동의한다.

선도적인 게임 스튜디오는 그리드 레전드와 같은 Mac에 타이틀을 가져올 계획을 가지고 있으며, Apple 실리콘을 활용하여 최대 속도에 도달할 수 있도록 도와줍니다.

또는 레지던트 이블 빌리지는 MetalFX 업스케일링과 같은 기능을 사용하여 잊혀지지 않는 아름다운 장면을 최고 해상도로 제공합니다.

그리고 No Man's Sky는 Metal 3를 활용하여 Mac과 iPad 모두에서 풍부하고 광활한 세계를 탐험합니다.

메탈 3는 앱의 성능을 향상시키고 놀라운 게임 경험을 제공하는 기능을 갖추고 있습니다.

이제 MapKit이 향하는 방향에 대해 더 자세히 알려주시면, 여기 Kathy가 있습니다.

캐시 린: 당신이 가장 좋아하는 레스토랑으로 이동하든, 다음 휴가를 계획하든, 당신이 가장 좋아하는 푸드 트럭이 지도에 어디에 주차되어 있는지 확인하든, 우리는 우리 주변의 세계를 탐험할 수 있도록 그 어느 때보다 우리의 장치에 의존합니다.

MapKit은 Apple Maps로 구동되고 개발자가 무료로 이용할 수 있는 풍부하고 유연한 매핑 및 위치 서비스로 사용자가 세계를 발견하고 탐색할 수 있도록 돕는 가장 좋은 방법입니다.

MapKit을 사용하면 앱에서 지도 또는 위성 이미지를 표시하고, 관심 지점을 찾아 호출하고, 주석과 오버레이를 추가하고, 길 안내 등을 할 수 있습니다.

MapKit은 Apple이 처음부터 만든 완전히 새로운 지도에 의해 구동됩니다.

그것은 향상된 세부 사항과 정확성을 제공하며, 앱에 유용한 매핑 및 위치 서비스를 제공할 수 있습니다.

iOS 16을 통해, 우리는 모든 개발자가 3D 도시 경험을 사용할 수 있도록 하는 것부터 시작하여 MapKit에 대한 가장 큰 업데이트를 소개하기 위해 이 지도를 구축하고 있습니다.

앱 사용자는 3D 고도, 회전 차선, 횡단보도 및 자전거 도로, 금문교 또는 페리 빌딩과 같은 놀라운 수공예 3D 랜드마크와 같은 놀라운 세부 사항을 볼 수 있습니다.

지도의 추가 세부 사항을 통해 이전에는 불가능했던 맥락과 정확성을 제공할 수 있습니다.

예를 들어, 관심 지점이 횡단보도와 자전거 차선이 시작되는 곳 사이에 있다는 것을 보여줄 수 있습니다.

다른 어떤 디지털 지도도 그렇게 할 수 없으며, 우리는 그것을 믿을 수 없을 정도로 쉽게 구현할 수 있게 만들었습니다.

더 많은 것을 보여주기 위해, 사용자가 새로운 지도의 세부 사항을 사용하여 자신이 가장 좋아하는 푸드 트럭이 주차된 곳을 쉽게 찾을 수 있는 경험을 만들어 봅시다.

이와 같은 지도 보기는 사용 가능한 3D 도시 경험을 자동으로 얻을 수 있습니다.

배포 대상으로 iOS 16을 선택하기만 하면 됩니다.

다음으로, 나는 푸드 트럭의 정확한 위치를 설명하기 위해 지도의 특별한 세부 사항을 활용할 수 있다.

MapKit에는 카메라를 3D 공간에 배치하여 지도를 정확하게 볼 수 있는 강력한 컨트롤이 있습니다.

여기서, 카메라의 중심 좌표 거리를 600미터로 설정하여 얼마나 확대하고 싶은지 선택할 수 있습니다.

피치와 방향을 조정하고 카메라를 3D로 기울이면, 회전 차선, 횡단보도, 심지어 나무와 같은 놀랍고 유용한 세부 사항을 볼 수 있습니다.

기본적으로, 고도는 평평해질 것이다.

사용자가 마주치게 될 지형을 이해할 수 있도록, 3D 고도를 포함하도록 elevationStyle '현실적'으로 선호하는 구성을 지정할 수 있습니다.

MapKit의 Directions API에서 가져온 주석이나 경로 라인을 추가할 때, MapKit은 자동으로 고도를 처리하고 3D 지형 위에 배치하여 주석이나 경로 라인을 조정합니다.

느린 팬을 추가하여 카메라 방향에 애니메이션을 만드는 것은 지도 보기에 생명을 불어넣는다.

사용자가 다크 모드로 전환하면, 지도는 나머지 UI와 함께 조정됩니다.

우리는 iOS 16을 사용하는 개발자들이 이 몰입형 경험을 이용할 수 있게 되어 매우 기쁩니다.

또한, 우리는 또 다른 인기 있는 Apple Maps 기능을 MapKit, Look Around에 도입하고 있으며, 이는 고해상도 3D 사진과 부드러운 애니메이션으로 지상에서 세계를 탐험할 수 있는 좋은 방법입니다.

사용자는 간단히 탭하여 거리를 따라 이동할 수 있습니다.

뷰 컨트롤러를 드롭하고 MapItem을 지정하여 지도 바로 아래에 정적 Look Around 미리보기를 추가할 수 있습니다.

Look Around 보기는 자동으로 위치를 올바르게 구성한다.

사용자가 미리보기를 탭하면, 사용자가 주소, 이미지가 수집된 날짜를 볼 수 있는 전체 화면 Look Around 보기를 제공하도록 선택할 수 있으며, 주변 환경을 더 잘 이해하기 위해 자유롭게 이동할 수 있습니다.

iOS 16- Apple Maps Server API에서 MapKit에 도입하는 요청이 높은 새로운 기능이 하나 더 있습니다.

지도 서버 API는 RESTful이며 MapKit에서 가장 많이 사용되는 네 가지 기능을 지원합니다: lat/long을 주소로 바꾸는 지오코드; 반대로 하는 역방향 지오코드- 주소를 GPS 좌표로 바꾸는; 검색; 그리고 예상 도착 시간.

우리의 새로운 Maps Server API는 자신만의 백엔드 서비스를 더 풍부하고 성능 있게 만들 수 있는 좋은 방법입니다.

물론, MapKit은 Apple Maps와 동일한 개인 정보 보호 기반 위에 처음부터 구축되었으며, 사용자의 데이터를 신원과 연결하거나 그들이 있었던 곳의 기록을 보관하지 않습니다.

그리고 그것은 iOS 16에서 MapKit의 새로운 기능을 빠르게 살펴봅니다.

이제 날씨, 또는 적어도 앱에 구축할 수 있는 방법을 위해, 여기 Novall이 있습니다.

노발 칸: 우리는 오늘 날씨 앱을 iPad와 Mac에 도입하고, 악천후 알림, 풍부한 세부 정보 보기, 10일간의 시간별 온도 및 강수량 예보를 포함한 강력한 새로운 기능을 도입한다고 발표했습니다.

그리고 Apple 장치와 플랫폼에는 Siri에게 오늘의 예측을 요청하는 것부터 홍수에 대한 내비게이션 경로 변경에 이르기까지 우리가 제공하는 날씨 데이터로 인해 더 좋아지는 모든 종류의 다른 경험이 있습니다.

그 모든 것은 우리의 Apple Weather 서비스를 기반으로 합니다.

Apple Weather는 기계 학습 및 예측 알고리즘과 결합된 고해상도 기상 모델을 사용하여 세계적 수준의 글로벌 일기 예보를 제공합니다.

Apple Weather는 현재 날씨, 10일 시간별 예보, 일일 예보 및 과거 날씨를 제공하므로 데이터의 추세를 평가할 수 있습니다.

전 세계 일부 국가에서는 악천후 경보와 분 단위 강수량도 이용할 수 있습니다.

예측은 10일의 시간별 온도, 강수량, UV 지수 예측 등을 특징으로 한다.

그리고 이 모든 데이터는 WeatherKit을 통해 사용할 수 있습니다.

WeatherKit은 모든 Apple 플랫폼을 위한 기본 Swift API이며, 어디서나 사용할 수 있는 REST API입니다.

이 API는 사용자가 안전하고, 정보를 얻고, 준비할 수 있도록 정확한 하이퍼로컬 일기 예보를 제공합니다.

빠른 데모에서 WeatherKit의 훌륭한 Swift API를 통해 날씨 정보를 얻는 것이 얼마나 쉬운지 보여드리겠습니다.

푸드 트럭 앱을 다시 살펴봅시다.

내 고객이 비에 걸리지 않도록 하기 위해, 내 앱은 맑은 하늘의 주차 공간을 추천하도록 설정되어 있다.

내가 어떻게 날씨를 알 수 있는지 보여줄게.

여기 안전한 주차 장소 목록이 있습니다.

저는 이미 Xcode에 WeatherKit 기능을 추가했고, 몇 줄의 코드만 있으면 됩니다.

스위프트 동시성을 사용하면 날씨를 요청하는 것이 간단합니다.

우리는 WeatherService에서 날씨(for:)를 부르고, 장소를 통과합니다.

그러면 상태, 강수량 및 구름 덮개와 같은 앱에 필요한 관련 데이터를 얻을 수 있습니다.

이제 각 주차 공간에 필요한 데이터가 있으므로, 앱을 실행할 때 사용자 지정 보기가 하늘이 맑은 위치를 추천하도록 업데이트되었습니다.

날씨 데이터를 사용하여 앱의 경험을 개선할 수 있는 모든 종류의 방법이 있습니다.

재고를 돕기 위해 일기 예보를 사용할 수 있으며, 아이스크림으로 채워진 도넛이 더운 날에 인기 있는 주문이 될 것이라고 예측할 수 있으므로, 아이스크림을 비축해야 합니다.

그것이 우리 푸드 트럭의 날씨를 얻는 데 필요한 전부이며, WeatherKit으로 밝혀야 할 것이 훨씬 더 많습니다.

개인 정보 보호에 대한 애플의 약속에 따라, 위치는 일기 예보를 제공하기 위해서만 사용되며, 개인 식별 정보와 관련이 없으며, 절대 공유되거나 판매되지 않습니다.

개인 정보 보호는 공동의 책임이며, WeatherKit을 통해 사용자 개인 정보를 보호하면서 정확한 날씨 데이터를 얻을 수 있습니다.

우리는 당신이 WeatherKit을 쉽게 시작할 수 있도록 하고 싶기 때문에, Apple Developer Program 멤버십에 매월 500,000개의 날씨(for:location) API 호출을 포함하고 있습니다.

더 필요한 사람들은 올 가을부터 개발자 앱에서 바로 추가 서비스 계층을 구매할 수 있습니다.

그래서 그것은 Apple Weather 서비스에 의해 구동되는 정확한 하이퍼로컬 일기 예보인 WeatherKit입니다.

우리는 베타 버전으로 시작하고 있으며, 이제 모든 플랫폼에서 사용할 수 있습니다.

앱에서 WeatherKit을 사용할 수 있는 창의적인 방법이 많이 있습니다.

그리고 이제 라이언이 당신의 앱이 라이브 텍스트로 무엇을 볼 수 있는지에 대한 관점을 제공합니다.

라이언 딕슨: 우리 사용자들은 라이브 텍스트를 사랑하고 있으며, 우리는 여러분 중 많은 사람들로부터 당신이 그것을 당신의 앱에 가져오고 싶다고 들었습니다.

그래서 올해, 우리는 당신이 그렇게 할 수 있는 두 개의 새로운 API로 VisionKit을 확장하고 있습니다.

라이브 텍스트 API는 이미지 콘텐츠를 분석하는 기능을 잠금 해제하여 사용자가 사진과 일시 중지된 비디오 프레임에서 발견된 텍스트 및 QR 코드와 상호 작용할 수 있도록 하며, 사용자가 탭 한 번으로 관련 데이터에 대한 조치를 취할 수 있도록 빠른 작업을 제공합니다.

아폴로 레딧이나 비메오와 같은 시각적 미디어를 표시하는 모든 앱에 적합합니다.

그리고 데이터 스캐너 API는 라이브 카메라 피드를 분석할 수 있는 기능을 해제합니다.

그것은 사용자를 위한 텍스트와 바코드 섭취를 극적으로 단순화한다.

앱의 요구에 맞게 라이브 카메라 경험을 맞춤화하는 오버레이 또는 사용자 지정 컨트롤을 추가하기만 하면 됩니다.

이것은 창고 재고 관리, 픽업 및 포장 배달 서비스 및 판매 시점 키오스크를 위해 만들어진 QR 코드 또는 엔터프라이즈 앱에 의존하는 소비자 앱에 특히 유용합니다.

라이브 텍스트와 데이터 스캐너 API는 모두 올해 일본어와 한국어의 추가를 포함하여 9개 언어의 자동 감지를 지원합니다.

이 VisionKit API는 단 몇 줄의 코드로 앱에 수년간의 컴퓨터 비전 혁신을 가져올 것입니다.

여기 어떻게 하는지 보여줄 제니가 있어.

제니 첸: 데모를 보여주기 위해, 우리는 신뢰할 수 있는 팝업 푸드 트럭 앱으로 돌아왔습니다.

우리는 사용자가 해시태그 #freedonut와 앱에서 그들의 주소로 가입하는 소셜 채널에 사진을 게시하는 프로모션을 하고 있습니다. 우리는 그들의 주소로 운전하여 그들에게 무료 도넛을 배달할 것입니다.

우리는 소셜 도넛 피드로 향할 거야.

우리는 운전자가 배달 주소를 얻기 위해 텍스트를 추출할 수 있도록 이미지에 라이브 텍스트를 추가하고 싶습니다.

여기가 새로운 라이브 텍스트 API가 재생되는 곳입니다.

내 보기 위에 ImageInteraction을 쉽게 추가할 수 있으며, 빠른 작업 지원과 함께 라이브 텍스트 버튼을 추가할 수 있습니다.

라이브 텍스트 버튼은 일반적으로 오른쪽 하단에 있지만, 이미 앱에 하트 버튼이 있으므로 사용자 지정 삽입을 사용하여 배치를 조정할 수 있습니다.

내 앱과 더 잘 일치하도록 버튼의 스타일을 사용자 정의하도록 버튼 구성을 설정할 수도 있습니다.

이제 추가했으니, 라이브 텍스트 버튼을 탭하거나, 텍스트를 선택하거나, 빠른 동작을 사용하여 주소를 쉽게 잡을 수 있습니다.

나는 사용자가 라이브 텍스트 경험과 동일한 사용 편의성을 제공하기 때문에 새로운 상호 작용 모델을 배울 필요가 없다는 것을 좋아한다.

UI는 일관되고 친숙하다.

OS와 통합된 느낌이지만, 나만의 사용자 지정 UI가 있어도 배치를 조정할 수 있습니다.

물론, 다른 좋은 배달 앱과 마찬가지로, 우리는 또한 고객에게 최고의 서비스를 제공하고 사람들에게 올바른 도넛을 제공하고 있는지 확인하고 싶습니다.

그래서 우리는 QR 코드를 통해 도넛 주문을 추적합니다.

새로운 데이터 스캐너 API를 사용하면 고객 상호 작용의 첫 번째 단계로 쉽게 추가할 수 있습니다.

지금 당장, 그 버튼은 아무것도 하지 않지만, 내 앱으로 가져올 수 있는 텍스트, QR 코드 또는 바코드를 찾는 새로운 DataScanner 객체를 쉽게 인스턴스화할 수 있습니다.

몇 줄의 코드로, 카메라를 가져오고, QR 코드를 원하는 것을 지정하고, 스캔을 시작할 수 있습니다!

운전자가 QR 코드를 탭할 때, 나는 스캔이 성공적이라는 것을 보여주고 싶다.

Xcode에 대리자 핸들러를 추가하겠습니다...

...그리고 탭에서, 내가 도넛 주문을 시작할 수 있도록 스캔이 성공적이었다는 경고를 사용자에게 보여줘.

이제 앱을 실행할 때, 이것은 카메라 보기가 있는 뷰 컨트롤러를 가져오고, QR 코드를 강조하는 안내와 레티클 보기를 볼 수 있습니다.

QR 코드를 탭하면 스캔이 성공했고 도넛 주문이 확인되었음을 알 수 있습니다.

그리고 그것과 함께, 내 #freedonut 배달이 진행 중이다.

VisionKit을 사용하면 새로운 라이브 텍스트 및 데이터 스캐너 API를 사용하면 이러한 강력한 비전 기능을 앱에 쉽게 가져올 수 있습니다.

그리고 이제, 수잔에게 돌아가.

수잔: 앱을 만드는 것은 흥미진진한 시간이다.

Xcode Cloud는 이제 더 나은 앱을 더 빨리 만들 수 있도록 도울 준비가 되었습니다.

Swift와 SwiftUI를 사용하면 그 어느 때보다 쉽게 아이디어를 Apple 플랫폼에서 작동하는 앱으로 변환할 수 있습니다.

앱이 당신의 아이디어를 시스템 경험에 더 깊이 가져올 수 있는 멋진 새로운 방법이 있습니다.

잠금 화면 위젯과 라이브 활동은 앱을 잠금 화면으로 가져옵니다.

메시지 협업은 사용자가 연결하고 협업하는 것을 믿을 수 없을 정도로 쉽게 만든다.

그리고 앱 인텐트는 앱을 Siri와 통합하는 데 도움을 줍니다.

WeatherKit, MapKit, Live Text 및 Metal과 같은 기존 API에 대한 완전히 새로운 API와 주요 업데이트가 있습니다.

그리고 그게 이야기의 끝이 아니야.

175개의 세션, 수백 개의 실험실, 그리고 일주일 내내 진행되는 디지털 라운지 활동이 있는 올해 또 다른 큰 WWDC이다.

우리는 이번 주에 당신과 빨리 연락하고 싶고, 더 중요한 것은, 이번 주는 당신을 위한 것입니다.

우리는 당신이 다음에 무엇을 만드는지 보고 싶습니다.

고마워!

♪ ♪

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.