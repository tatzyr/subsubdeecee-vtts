10016

♪ 기악 힙합 음악 ♪

안녕하세요, "CarPlay로 앱에서 더 많은 마일리지를 받으세요"에 오신 것을 환영합니다.

제 이름은 안드레이고, 오늘 세션을 안내해 드리겠습니다.

아시다시피, CarPlay는 차 안에서 iPhone을 사용하는 더 똑똑하고 안전한 방법입니다.

오늘의 세션은 당신의 앱과 CarPlay에서 앱을 활성화하는 방법에 관한 것입니다.

지원되는 앱 유형에 대한 빠른 재교육으로 시작한 다음, 올해 활성화할 몇 가지 새로운 앱 유형에 대해 이야기하고, 마지막으로 앱 개발을 지원하기 위해 사용할 수 있는 새로운 도구를 살펴볼 것입니다.

우리는 오늘 내비게이션 앱과 관련된 중요한 새로운 기능으로 마무리할 것입니다.

더 이상 고민하지 말고, 바로 들어가자!

CarPlay의 가장 근본적인 점 중 하나는 운전자를 위해 만들어졌다는 것이다.

적극적으로 운전하는 사람들은 앱을 만들 때 고려해야 할 주요 사용자입니다.

결과적으로, 운전 중에 관련된 사용 사례만 활성화해야 하며, 사람들이 운전하는 동안 해서는 안 되는 사용 사례는 생략해야 합니다.

일회성 구성, 앱에 로그인 또는 이용 약관 읽기와 같은 것들은 운전 전이나 후에 하는 것이 더 좋기 때문에 앱의 CarPlay UI에 나타나지 않아야 합니다.

앱이 CarPlay에 나타나려면 자격이 필요하다는 점에 유의하십시오.

사용하려는 앱의 유형에 따라 Apple CarPlay 개발자 웹사이트에서 자격을 요청할 수 있습니다.

오늘 CarPlay에서 지원하는 앱 유형은 다음과 같습니다.

이것들은 운전자가 운전하는 동안 하고 싶어할 수 있는 다양한 작업을 다루지만, 우리는 여러분 중 많은 사람들로부터 당신이 활성화하고 싶은 더 많은 운전 관련 앱이 있다는 것을 들었습니다.

올해 목록에 연료 공급 및 운전 작업 앱이라는 두 가지 새로운 유형을 추가한다고 발표하게 되어 기쁩니다.

우리는 이것들을 곧 더 자세히 살펴볼 것이지만, 먼저, 빠른 피트 스톱을 하고 템플릿에 대해 조금 이야기해 봅시다.

템플릿은 CarPlay의 앱이 UI를 표시하는 방식이다.

당신의 앱은 데이터를 공급하고, 시스템은 당신을 대신하여 차량 디스플레이에 UI를 그립니다.

이 템플릿 시스템은 앱이 채택하기 쉽고 도로에 적합하도록 앱을 조종하는 것을 포함하여 몇 가지 이점이 있습니다.

글꼴 크기와 같은 것에 대해 걱정할 필요가 없으며, 템플릿은 UI의 복잡성을 낮추는 데 도움이 되며, 마지막으로 앱의 UI는 CarPlay의 다른 앱과 일치하여 사용자가 필요에 따라 신속하게 조치를 취할 수 있습니다.

마찬가지로 중요한 것은, 템플릿은 화면의 크기나 자동차에 사용되는 입력 장치의 유형에 관계없이 CarPlay를 지원하는 모든 자동차에서 앱의 UI가 잘 작동하는지 확인합니다.

당신은 여전히 다른 구성으로 앱을 테스트하고 싶을 수도 있으며, 나중에 세션에서 테스트에 대해 더 이야기할 것이지만, 템플릿이 대부분의 작업을 처리한다고 말하는 것으로 충분합니다.

앱을 빌드할 때 선택할 수 있는 몇 가지 템플릿이 있습니다.

버튼 배열을 보여주는 그리드 템플릿에서 테이블을 보여주는 목록 템플릿에 이르기까지, 이러한 템플릿은 개발자와 iOS 사용자 모두에게 친숙해야 합니다.

가장 중요한 것은, CarPlay 전체에 나타나기 때문에 CarPlay로 운전하는 사용자에게 친숙할 것입니다.

우리는 바로 전에 CarPlay에서 지원하는 다양한 유형의 앱에 대해 이야기했습니다.

이 템플릿들 중 일부는 다른 것들보다 그 유형들 중 일부와 더 관련이 있다.

이 차트는 어떤 유형인지에 따라 앱이 사용할 수 있는 템플릿을 이해하는 데 도움이 됩니다.

나는 이것을 읽으려고 하는 것이 DMV 시력 검사를 받는 것과 같다는 것을 알고 있지만, 두려워하지 마세요, 온라인 개발자 문서에서 이 정확한 차트를 찾을 수 있습니다.

지금 여기서 가져가야 할 것은 앱이 사용할 수 있는 템플릿이 유형에 따라 다르다는 것입니다.

특정 앱 유형과 관련이 있고 적절한 템플릿만 허용됩니다.

이제 템플릿에 대해 이야기했으므로, iOS 16으로 출시하는 새로운 앱 유형을 자세히 살펴봅시다.

먼저 새로운 Fueling 앱 유형에 대해 이야기해 봅시다.

기억하실 수 있듯이, iOS 14에서 우리는 EV 충전 앱에 대한 지원을 시작했습니다.

이 앱들은 단지 EV 충전기의 위치를 찾기 위한 것이 아니라, 그 이상을 합니다. 예를 들어, 사용자가 올바른 충전소에 연결하고 시작하는 데 도움이 될 수 있습니다.

우리는 많은 개발자들로부터 이러한 유형의 기능이 단순한 전기 자동차 그 이상에 좋을 것이라고 들었다.

전통적인 가솔린 지원 자동차이든 대체 연료 차량이든, 이 새로운 카테고리를 사용하면 연료 공급 앱에서 CarPlay를 지원할 수 있습니다.

많은 사용자가 내비게이션 앱을 사용하여 특정 위치를 찾고 운전하므로, 연료 공급 앱은 단순히 위치를 찾는 것보다 CarPlay UI에서 더 많은 기능을 활성화해야 합니다.

앱이 활성화할 수 있는 것의 좋은 예는, 예를 들어, 가스 펌프를 시작하는 것입니다.

이제, 운전 작업 응용 프로그램에 대해 이야기해 봅시다.

드라이빙 태스크는 다양한 매우 간단한 앱을 사용할 수 있도록 설계된 새로운 유형의 CarPlay 앱입니다.

이 앱의 주요 목적은 사람들이 운전하는 동안 해야 하는 작업을 가능하게 하는 것이어야 한다는 것을 명심하세요. 운전하는 동안 수행해야 하는 작업뿐만 아니라 실제로 드라이브에 도움이 되는 작업을 위한 것입니다.

이 유형에 속하는 앱의 몇 가지 예로는 자동차 액세서리를 제어하는 데 도움이 되는 앱, 운전 또는 도로 상태 및 정보를 제공하는 앱, 드라이브의 시작과 끝에서 작업을 돕는 앱이 있습니다.

이것들에 대한 좀 더 구체적인 예를 살펴봅시다.

먼저, 여기에 중요한 도로 정보에 대해 사용자에게 알릴 수 있는 도로 상태 앱이 있습니다.

이 앱은 CPPointOfInterestTemplate를 사용하여 만들어졌습니다.

이 앱을 사용하는 사용자가 운전 중이므로, 이와 같은 앱은 사용자가 위치한 곳 근처의 중요한 항목의 매우 짧은 목록을 제공해야 합니다.

이것은 사용자가 드라이브보다 앞서 전체 경로 계획을 세울 수 있도록 돕는 앱을 위한 것이 아닙니다.

이 앱에서, 사용자가 위치를 선택할 때 보는 것은 다음과 같습니다.

텍스트 공간의 양은 이 정보를 한눈에 볼 수 있도록 의도적으로 제한되므로, 여기서 선택한 언어로 간결해야 합니다.

다음으로, 자동차 액세서리를 제어하도록 설계된 응용 프로그램을 살펴보겠습니다. 이 경우 트레일러 컨트롤러입니다.

이 앱은 CPInformationTemplate를 사용하여 연결된 액세서리에 대한 기본 정보와 사용자가 조치를 취할 수 있는 몇 개의 버튼을 제공합니다.

이 예에서, 이것은 CarPlay에 있는 앱의 전체 UI입니다.

다른 화면은 없어!

물론, 이 앱에는 페어링된 액세서리를 관리하는 기능과 같은 다른 많은 기능이 있지만, 운전에 필요하지 않은 기능은 해당 앱의 CarPlay UI에 포함되지 않습니다.

사용자는 차량에서 내렸을 때 iPhone에서 앱의 기본 UI를 사용하여 비운전 작업을 수행하는 것이 가장 좋습니다.

마지막으로, CPGridTemplate을 사용하는 몇 가지 예를 살펴봅시다.

이것은 두 개의 버튼이 있는 매우 간단한 앱입니다 - 그게 다입니다!

그리고 사용자가 자신의 마일을 개인 또는 비즈니스 마일로 추적할 수 있게 해준다.

이 앱은 다른 중요하지 않은 작업을 활성화하지 않고도 사용자가 운전하는 동안 수행해야 하는 매우 간단한 작업을 가능하게 하기 때문에 새로운 운전 작업 앱 유형에 완벽하게 맞습니다.

간단하고, 요점까지.

이 스타일의 UI가 여러 유형의 앱을 제공할 수 있다는 것을 보여주기 위해, 여기에 거의 동일한 UI를 가진 또 다른 예가 있습니다.

이것은 CPGridTemplate를 사용하여 사용자가 차에 탑승자 수를 선택할 수 있도록 하는 고속 차선 통행료 트랜스폰더 앱입니다.

그것은 이전 예시와 정확히 같은 목표를 충족하며 또 다른 완벽한 운전 작업 앱이다.

요약하자면, 운전 작업 앱을 디자인할 때, 사용자가 운전하는 동안 필요한 최소한의 기능을 제공하고 몇 초 안에 수행할 수 있는 작업만 활성화하는 단일 화면 앱을 만드는 것을 고려하십시오.

복잡하거나 드문 사용 사례를 활성화하는 것을 피해야 합니다.

이것의 좋은 예는 처음 설정하거나 상세한 구성이다.

그리고 마지막으로, 자동차와 관련이 있더라도 운전하는 동안 필요하지 않은 기능을 앱에 추가해서는 안 됩니다.

부엌 싱크대, 이건 아니야.

그리고 그것은 드라이빙 태스크 앱의 것이다.

이제 기어를 조금 바꾸고 CarPlay 앱을 테스트하는 방법에 대해 이야기해 봅시다.

우리는 당신이 이것에 대해 할 수 있는 다양한 방법을 검토할 것이며, CarPlay Simulator라는 새로운 도구를 소개할 것입니다.

개발자로서, 당신은 CarPlay 지원 앱을 테스트할 수 있는 몇 가지 다른 도구를 가지고 있습니다.

먼저, CarPlay 창이 내장된 Xcode 시뮬레이터를 사용할 수 있습니다.

이미 Xcode 시뮬레이터를 사용하여 나머지 앱을 테스트하고 있다면, 이것은 CarPlay UI를 빠르게 테스트할 수 있는 좋은 방법입니다.

둘째, 실제 iPhone에서 앱을 테스트하기 위해, 물론 휴대폰을 실제 CarPlay 지원 차량 또는 애프터마켓 헤드 유닛에 연결할 수 있습니다.

최근까지, 이것은 실제 iPhone에서 실행되는 앱의 CarPlay UI를 테스트하는 유일한 방법이었지만, 당신이 가장 좋아하는 CarPlay Simulator가 될 수 있는 세 번째 옵션이 있다고 보고하게 되어 기쁩니다!

이것을 좀 더 자세히 살펴봅시다.

그래서 그게 뭐야?

CarPlay Simulator는 CarPlay 환경을 복제하는 독립형 Mac 응용 프로그램입니다.

Apple 개발자 웹사이트에서 "Additional Tools for Xcode" 패키지를 다운로드하고, 앱을 실행하고, 케이블을 사용하여 iPhone을 Mac에 연결하기만 하면 됩니다.

CarPlay는 휴대폰에서 시작하여 실제 차에 연결된 것처럼 동일하게 실행됩니다.

그래서 뭐가 큰 문제야, 그리고 왜 이걸 사용하고 싶어?

음, 몇 가지 이점이 있습니다.

우선, CarPlay 시뮬레이터를 사용할 때, CarPlay는 실제로 실제 차에서와 같은 방식으로 iPhone에서 실행됩니다.

즉, 주차장으로 계속 앞뒤로 돌아가거나 애프터마켓 헤드 유닛을 구매할 필요 없이 휴대폰에서 실행되는 앱을 테스트할 수 있습니다.

또 다른 큰 이점은 CarPlay Simulator를 사용할 때 휴대폰이 Mac에 연결되어 있기 때문에 Xcode에서 디버깅이든 Instruments에서 성능을 튜닝하든 Mac에서 다른 모든 환상적인 개발자 도구를 동시에 사용할 수 있다는 것입니다.

iOS 측면에서도 마찬가지로, 앱이 실제 iPhone에서 실행되기 때문에, 완전한 iPhone 기능에 액세스할 수 있습니다.

일부 시나리오는 실제 CarPlay 시스템이나 현재 CarPlay Simulator 없이는 테스트할 수 없습니다.

좋은 예는 내비게이션 앱의 음성 명령이 FM 라디오와 같은 자동차의 기본 오디오 소스와 올바르게 혼합되었는지 테스트하는 것입니다.

이제 책상에서 편리하게 이것을 테스트할 수 있습니다.

마지막으로, CarPlay Simulator를 사용하여 디스플레이 크기가 다른 자동차와 같은 여러 가지 구성의 자동차를 테스트할 수 있습니다.

CarPlay Simulator가 어떻게 동작하는지 봅시다.

그래서 여기 있어.

보시다시피, 연결된 iPhone의 CarPlay 디스플레이는 여러 컨트롤과 함께 앱에 바로 나타납니다.

이것들 중 일부가 하는 일을 살펴봅시다.

화면 하단에는 자동차의 다양한 하드 키와 손잡이 컨트롤을 시뮬레이션하는 버튼이 있습니다.

CarPlay 보기에서 직접 클릭하여 터치스크린 차량의 터치를 시뮬레이션할 수도 있습니다.

창문 상단에는 몇 가지 빠른 컨트롤이 있습니다.

제한 UI 버튼을 사용하면 움직이는 자동차가 CarPlay를 요청할 때 화면의 특정 콘텐츠를 제한할 때 시뮬레이션할 수 있습니다. 예를 들어, 오디오 앱의 목록 내용을 단축할 수 있습니다.

다음 두 버튼은 자동차가 각각 UI와 지도 콘텐츠에 대해 어둡거나 밝은 모습을 요청할 때 시뮬레이션하는 것입니다.

마지막 버튼을 사용하면 휴대폰을 분리하고 CarPlay에 다시 연결하는 것을 빠르게 시뮬레이션할 수 있습니다.

이 버튼을 사용할 때 휴대폰은 여전히 Mac에 연결되어 있기 때문에, Xcode를 사용하여 앱에서 CarPlay 재연결 시나리오를 디버깅할 수 있습니다.

하지만 내가 건너뛴 첫 번째 버튼은 어때?

짐작하셨겠지만, 이것은 더 고급 기능을 갖춘 보조 창을 팝업할 것입니다.

이제 그 고급 기능을 살펴봅시다.

일반 탭에서 메인 CarPlay 디스플레이의 디스플레이 크기를 선택할 수 있습니다.

애플리케이션 UI가 템플릿으로만 구성되어 있다면, 다른 차에서 UI가 어떻게 보일지 보기 위해 다른 크기를 시도할 수 있지만, 이전에 이야기했듯이, 시스템은 상관없이 모든 것이 잘 작동하는지 확인할 것입니다.

그러나 앱이 내비게이션 앱이라면, 지도 그리기 코드가 올바르게 작동하는지 확인하기 위해 다양한 크기와 종횡비를 시도하는 것이 매우 중요합니다.

다음은 앱으로 테스트할 수 있는 권장 디스플레이 크기입니다.

클러스터 디스플레이 탭을 살펴봅시다.

여기서 볼 수 있듯이, 계기판에서 두 번째 디스플레이로 자동차를 시뮬레이션할 수 있습니다!

활성화하려면 상자를 선택하고 세션을 다시 시작하면 기본 디스플레이와 함께 계기판에 대한 두 번째 창이 나타납니다.

다시 말하지만, 이것은 내비게이션 앱과 가장 관련이 있다.

계기판 디스플레이는 자동차 계기판의 시야에서 운전자를 위한 지도나 턴 카드를 표시하는 데 사용됩니다.

우리는 잠시 후에 계기판에 대해 더 많은 이야기를 나눌 것이지만, 그것은 새로운 CarPlay Simulator 앱의 빠른 둘러보기입니다.

우리는 당신이 그것이 우리만큼 유용하기를 바랍니다!

우리는 방금 CarPlay가 어떻게 계기판에서 라이브 지도를 그릴 수 있는지 보았다.

하지만 네 내비게이션 앱은 어때?

앱에서 계기판 지원을 어떻게 추가하고 테스트할 수 있나요?

한 번 보자.

iOS 13에서 내비게이션 앱이 CarPlay 대시보드에 나타날 수 있도록 API를 추가했다는 것을 기억할 수 있습니다.

이를 위해 앱의 Info.plist를 편집하여 대시보드에 대한 지원을 선언하고 필요한 대리자를 구현했습니다.

대표단은 대시보드에 나타나고 사라질 때 앱을 알리고, 지도 콘텐츠를 그릴 수 있는 UIWindow를 앱으로 전달합니다.

그건 쉬워.

만약 당신이 이미 이것을 했다면, 좋은 소식은 정확히 같은 패턴을 따르기 때문에 계기판 지원을 추가하는 것입니다.

내 내비게이션 테스트 앱인 Space Roads에서 내가 이걸 어떻게 했는지 보자.

인스트루먼트 클러스터 내비게이션 장면에 대한 지원을 선언하기 위해 Info.plist를 편집하고 필요한 장면 세션 역할을 추가했습니다.

그런 다음 CPTemplateApplicationInstrumentCluster Scene delegate와 CPInstrumentClusterControllerDelegate를 구현했습니다.

이것들은 둘 다 당신에게 콘텐츠를 그릴 수 있는 창을 제공할 뿐만 아니라 인스트루먼트 클러스터가 시작되고 끝날 때 알려주며, 인스트루먼트 클러스터 뷰를 볼 수 있도록 합니다.

그것이 당신의 지도가 자동차의 계기판에 라이브로 나타나도록 하는 데 필요한 전부입니다!

이것은 모두 대시보드 지원을 구현하는 것과 매우 유사하지만, 계기판과 관련된 몇 가지 고려 사항이 더 있습니다.

우선, 계기판은 사용자가 지도를 확대 및 축소할 수 있도록 할 수 있다.

CPInstrumentClusterControllerDelegate를 사용하여 앱에서 이것을 구현하는 것은 당신의 책임입니다.

마찬가지로, 앱에 나침반이나 속도 제한이 포함되어 있다면, 해당 대표단은 앱을 그리는 것이 적절한지 아닌지 알려줄 것입니다.

마지막으로, 계기판 보기가 자동차 계기판의 다른 요소에 의해 부분적으로 가려질 수 있다는 점에 유의하십시오.

물론, iOS는 이미 그러한 안전한 영역을 다루기 위한 일류 메커니즘을 가지고 있습니다!

보기 컨트롤러에서 viewSafeAreaInsetsDidChange를 재정의하여 안전 영역이 언제 변경되는지 알 수 있으며, 클러스터 보기에서 safeAreaLayoutGuide를 사용하여 보기 영역에서 중요한 콘텐츠를 볼 수 있도록 유지할 수 있습니다.

예를 들어, 사용자의 위치를 보여주는 파란색 경로 라인이 있다면, 중요한 부분이 안전 영역에 포함되어 있는지 확인하고 싶을 것입니다.

우리는 방금 CarPlay 앱을 만드는 개발자로서 당신을 위한 몇 가지 새로운 기능을 보았고, 앱을 테스트할 수 있는 새로운 도구를 보았습니다.

그것을 실제로 살펴보자.

먼저, 저는 제 Mac에서 시작해서 당신에게 CarPlay 시뮬레이터를 보여줄 것입니다.

나는 앱을 실행하고 있고, 그냥 내 핸드폰을 연결할 거야.

그리고 voilà, 여기서 CarPlay를 운영하고 있다.

앱을 테스트할 때 CarPlay Simulator가 어떻게 도움이 될 수 있는지 봅시다.

앱이 주로 템플릿을 기반으로 하더라도, 앱의 아트워크가 밝은 모습과 어두운 모습 모두에서 잘 작동하는지 확인하는 데 사용할 수 있습니다.

익스프레스 레인 앱을 실행할게요...

그리고 도구 모음의 버튼을 사용하여 밝은 모습과 어두운 모습 사이를 전환할 수 있습니다.

내 앱이 두 스타일 모두에 대해 어떻게 다른 작품을 제공했는지 주목하세요.

좋아 보인다.

이제 제가 작성한 내비게이션 테스트 앱인 Space Roads로 전환해 봅시다.

나는 메인 구성 패널을 사용하여 다른 화면 크기로 지도 그리기 코드를 시도할 것이다.

그리고 마지막으로, 나는 인스트루먼트 클러스터 디스플레이가 인스트루먼트 클러스터 지원을 테스트할 수 있도록 할 것이다.

여기 있어. 그건 잘 작동해!

이전에, 나는 CarPlay Simulator에서 내 앱을 완전히 테스트했기 때문에, 이제, 나는 그들이 실제 차에서 잘 작동할 것이라고 확신한다.

한 번 해보자!

좋아, 여기 우리는 내 차에 있어, 그리고 네가 볼 수 있듯이, 나는 내 핸드폰을 차량에 연결하고 CarPlay를 운영하고 있어.

먼저, 연결된 트레일러 컨트롤러 앱을 실행해 봅시다. 그러면 템플릿이 손잡이가 있는 차량에서 앱이 어떻게 잘 작동하는지 보여줄 수 있습니다.

이 특정 차량에는 터치 스크린과 손잡이 컨트롤러가 모두 있지만, 많은 사용자가 운전 중에 손잡이 컨트롤러를 사용하는 것을 좋아하므로 앱이 손잡이를 사용하여 잘 작동하는 것이 중요합니다.

보시다시피, 저는 여기 앱의 버튼에 완전히 접근할 수 있으며, 가장 좋은 점은 특별한 일을 할 필요가 없었다는 것입니다 - 템플릿은 저를 위해 모든 일을 했습니다!

다음으로, 내 내비게이션 앱인 Space Roads로 전환합시다.

우리는 앱을 시작할 거야...

그리고 우리는 내비게이션을 시작할 거야...

그리고 나서 나는 이동을 눌러.

붐!

내 앱은 이제 중앙 콘솔과 계기판 모두에서 실시간 지도 보기를 보여줍니다!

운전자로서 내 시야에 라이브 지도를 가지고 있어서 좋다.

나는 당신의 내비게이션 앱을 사용하는 운전자들도 그것을 좋아할 것이라고 확신합니다.

음, 그게 내가 오늘 너를 위해 가진 전부야.

자세한 내용은 developer.apple.com/carplay에서 CarPlay 개발자 포털을 확인하세요. 감사합니다, 그리고 행복한 길, 여러분! ♪♪