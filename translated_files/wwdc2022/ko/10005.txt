10005

♪ 부드러운 기악 힙합 음악 ♪

♪

안녕하세요, WWDC에 오신 것을 환영합니다.

제 이름은 카림이고, 저는 헬스킷 엔지니어입니다.

HealthKit 프레임워크는 훌륭한 건강 경험을 구축하기 위한 기반을 제공하며, Apple Watch는 당신을 주시하는 많은 건강 및 안전 기능으로 가득합니다.

가장 인기 있는 것 중 하나는 수면 추적이며, 우리는 더 자세한 수면 데이터를 캡처하기 위해 업데이트를 하고 있습니다.

우리는 또한 올해 HealthKit에 다른 훌륭한 새로운 추가 사항이 있습니다.

우리는 Swift async로 데이터를 더 쉽게 쿼리할 수 있도록 API를 개선했습니다.

우리는 더 풍부한 운동 표현으로 운동을 개선하고 있습니다.

그리고 우리는 물리적 처방전의 디지털 사본을 포함하여 시력 처방전을 저장하기 위한 지원을 추가하고 있습니다.

이 모든 업데이트와 앱이 이를 활용할 수 있는 방법에 대해 더 자세히 알려드리게 되어 기쁩니다.

시작하자!

수면은 우리의 몸과 마음을 재충전할 수 있는 필수적인 기능이며, 저는 Apple Watch를 사용하여 수면 일정을 관리하고 수면을 이해하고 개선하는 데 도움이 되는 통찰력을 얻는 것을 좋아합니다.

올해 우리는 수면 단계를 도입하여 수면 추적을 더욱 개선하고 있습니다.

Apple Watch는 당신이 잠들었을 때 겪는 모든 다른 수면 단계를 자동으로 추적하며, 이 데이터는 건강 앱에서 액세스할 수 있으며 HealthKit에 저장됩니다.

물론, 당신의 앱은 수면 단계 데이터를 읽고 저장할 수 있을 것입니다.

Apple Watch 또는 앱에 저장된 수면 데이터는 식별자 sleepAnalysis가 있는 카테고리 샘플로 HealthKit에 표시됩니다.

우리는 세 가지 수면 단계를 지원할 것입니다: REM, 코어, 그리고 딥.

수면 데이터를 HealthKit에 저장할 때, 주어진 수면 단계에서 각 연속 기간에 대해 하나의 샘플을 만들어야 합니다.

이것이 수면 샘플 값 열거형의 모습이다.

우리는 미국 수면 의학 아카데미 또는 AASM의 채점 모델의 1단계와 2단계에 해당하는 asleepCore로 시작하여 수면 단계를 나타내는 세 가지 사례를 추가하고 있습니다. AASM 채점 모델의 3단계에 해당하는 asleepDeep, 그리고 마지막으로 빠른 안구 이동 단계에 해당하는 asleepREM입니다.

이제 수면 단계를 추가했으므로, 사용자가 자고 있지만 수면 단계가 지정되지 않았음을 나타내는 asleepUnspecified를 위해 수면 케이스를 더 이상 사용하지 않습니다.

업데이트된 수면 샘플 열거형을 사용하면 이제 HealthKit에서 수면 단계 데이터를 저장하고 읽을 수 있습니다.

우리는 주어진 단계에서 수면 샘플을 쉽게 읽을 수 있도록 새로운 술어에 추가했습니다.

REM 단계에서 수면 샘플을 읽고 싶다고 가정해 봅시다.

먼저, asleepREM을 값으로 사용하는 새로운 predicateForSamples 방법을 사용하여 술어를 만듭니다.

이제, 나는 내 질문을 만들기 시작할 수 있다.

수면 분석 샘플 유형과 수면 단계 술어로 쿼리에 대한 술어를 만듭니다.

그리고 이 쿼리 조건자로, 나는 이제 내 쿼리를 만들 수 있다.

쿼리를 실행하면 REM 단계에서 수면 샘플 배열을 돌려받을 수 있습니다.

그러나, 지정되지 않은 것을 포함하여 모든 수면 단계에 대한 샘플을 읽는 데 관심이 있다면, 술어를 만들 때 새로운 .allAsleepValues를 사용하도록 앱을 업데이트하는 것이 중요합니다.

작년 이후로 HealthKit을 보지 않았다면, 쿼리를 위한 이 짧은 구문은 당신에게 익숙하지 않은 것처럼 보일 수 있습니다.

iOS 15.4 이후, 우리는 Swift 비동기를 지원하기 위해 쿼리 API를 업데이트했습니다.

쿼리는 HealthKit의 필수적인 부분이며, Swift 비동기 지원을 통해 더 간결한 구문으로 사용하기가 더 쉽습니다.

쿼리를 사용하면 HealthKit에서 다양한 데이터를 읽고, 조건자를 사용하여 결과를 필터링하고, 들어오는 새로운 데이터를 관찰할 수 있습니다.

모든 쿼리는 HKQuery의 하위 클래스입니다.

특정 기간 동안 소모된 총 칼로리를 알고 싶다면, 이러한 계산된 통계를 얻기 위한 훌륭한 쿼리는 HKStatisticsCollectionQuery입니다.

초기 결과를 얻으려면, 쿼리의 initialResultsHandler 폐쇄를 설정해야 합니다.

그리고 업데이트를 보고 싶다면, statisticsUpdateHandler 폐쇄를 추가로 설정할 수 있습니다.

쿼리가 시작되면, 이러한 폐쇄는 결과와 함께 호출될 것이다.

스위프트 비동기 덕분에, 우리는 이것을 훨씬 더 간단하게 만들고 있다.

각 쿼리에는 이제 일치하는 쿼리 설명자가 있으므로 HKStatisticsCollectionQuery는 HKStatisticsCollectionQuery 설명자가 됩니다.

단순히 async result(for:) 메소드를 호출하여 초기 결과를 얻을 수 있습니다.

반면에, 초기 결과를 얻고 업데이트를 보고 싶다면, 결과를 읽기 위해 반복할 수 있는 AsyncSequence를 반환하는 results(for:)를 호출합니다.

HealthKit은 운동과 소모된 칼로리와 같은 관련 지표를 추적하는 데 적합합니다.

이번 주에 얼마나 많은 칼로리를 태웠는지 알아내기 위해, 통계 수집 쿼리 설명자를 사용할 수 있습니다.

먼저, 칼로리 샘플과 일치하는 술어로 쿼리 설명자를 만듭니다.

나는 총 합계를 원하기 때문에 cumulativeSum 옵션을 사용한다.

저는 이번 주 데이터에 관심이 있어서, 이번 일요일을 앵커 날짜로 사용합니다.

그리고 마지막으로, 나는 내 칼로리 합계가 일주일의 시간 간격으로 계산되기를 원한다.

쿼리 설명자를 만들면, healthStore 객체로 result(for:)를 호출하기만 하면 됩니다.

반환된 statisticsCollection 객체는 현재 데이터의 스냅샷을 제공합니다.

하지만 칼로리가 변함에 따라 실시간 업데이트를 원한다면, 결과(for:)를 호출하고 반환된 비동기 시퀀스를 반복하여 결과를 읽는 것만큼 간단합니다.

내가 업데이트를 보고 나면, 나는 그냥 루프에서 벗어나서 쿼리를 멈출 것이다.

이제, 운동에 대해 이야기해 봅시다.

HealthKit은 캐주얼한 자전거를 타거나 경주에서 한계에 도달하든 운동과 모든 관련 지표를 저장할 수 있는 좋은 장소입니다.

그리고 종종, 운동은 하나 이상의 뚜렷한 활동을 포함할 수 있다.

인터벌 트레이닝과 같은 운동을 반복하거나 수영, 사이클링, 달리기로 구성된 철인 3종 경기에 참여할 수 있습니다.

우리는 이러한 유형의 운동과 각 활동에 대한 관련 통계를 캡처할 수 있도록 iOS 16 및 watchOS 9의 운동 API를 업데이트하고 있습니다.

이것은 내가 최근에 한 수영 자전거 달리기 운동의 타임라인이다.

나는 수영을 시작했고, 그 후 운동의 사이클링 부분을 준비하는 데 약간의 시간이 걸렸고, 마침내 달렸다.

각 활동은 HKWorkoutActivity 객체로 표시됩니다.

각 운동 활동은 활동 유형을 포함하는 자체 운동 구성으로 만들어집니다.

운동 활동은 활동 중에 발생한 이벤트 목록을 보유하고 있다.

그리고 각 활동에 대한 통계를 읽을 수 있으며, 이는 특정 활동 중에 일어난 일을 분석하는 데에만 관심이 있을 때 좋습니다.

내 타임라인으로 돌아가서, 내 세 가지 활동은 적절한 활동 유형으로 구성되어 있다.

활동은 시간에 따라 겹칠 수 없다.

그리고 각 활동 사이에 전환 기간이 있을 수 있기 때문에, 그들은 연속적일 필요가 없다.

전환 기간 동안 무슨 일이 일어났는지 분석하는 데 관심이 있다면, 유형 전환으로 각 전환에 대한 HKWorkoutActivity를 만들 수 있습니다.

이러한 모든 활동은 workoutActivities 속성 아래의 HKWorkout 객체로 저장됩니다.

HKWorkoutBuilder를 사용하여 HealthKit에 운동을 추가하는 경우, 활동을 추가하는 것은 workoutConfiguration, 시작 및 종료 날짜, 선택적 메타데이터로 HKWorkoutActivity 객체를 만드는 것만큼 쉽습니다.

그런 다음, 운동 빌더에서 addWorkoutActivity를 호출하기만 하면 됩니다.

Apple Watch에서는 운동 세션을 사용하여 수영 자전거 달리기 운동을 추적하고 관련 운동 빌더를 사용하여 HealthKit에 운동을 저장할 수 있습니다.

내 운동 타임라인으로 돌아가자.

Apple Watch에서 이 운동을 추적하려면, 운동 세션과 빌더를 설정해야 합니다.

저는 swimBikeRun 유형으로 운동 구성을 만드는 것으로 시작합니다.

그런 다음 내 구성을 사용하여 HKWorkoutSession을 만듭니다.

운동을 시작할 때 나는 단순히 세션에서 startActivity를 부르고, 관련 운동 빌더에서 Collection을 시작합니다.

이제 세션과 빌더가 준비되었으므로, 수영 운동 구성과 시작 날짜와 함께 beginNewActivity 방법을 사용하여 첫 번째 활동을 추가할 수 있습니다.

각 활동을 시작할 때, 관심 있는 데이터 유형만 수집하기 위해 운동 빌더 데이터 소스를 업데이트해야 합니다.

이것은 수영 활동이기 때문에, 나는 수영 거리를 모으고 싶다.

활동이 끝날 때, 나는 종료 날짜와 함께 endCurrentActivity를 부른다.

수영에서 사이클링으로의 전환 기간을 분석하는 데 관심이 있기 때문에, 수영이 끝난 직후에 새로운 전환 활동을 시작할 것이다.

다시 말하지만, 이것이 활동의 시작이기 때문에, 더 이상 관련이 없기 때문에 수영 거리 수집을 비활성화하기 위해 빌더 데이터 소스를 업데이트합니다.

나는 사이클링이 시작되기 직전에 전환 활동을 끝낸다.

나는 내 운동의 나머지 활동을 같은 방식으로 추적할 수 있다.

운동이 끝나면, 세션을 끝내면 모든 달리기 활동도 끝난다.

그러면 나는 HKWorkout 객체를 저장하고 반환할 운동 빌더를 끝낼 수 있다.

반환된 운동을 사용하여 totalEnergyBurned 및 totalDistance와 같은 관련 지표 중 일부를 읽고 앱에 운동 요약을 표시할 수 있습니다.

그러나, 이 작은 속성 세트는 더 이상 충분하지 않다.

totalSwimmingStrokeCount는 모든 운동과 관련이 없으며, 일부 운동은 더 많은 지표를 수집할 수 있습니다.

모든 종류의 운동에 대한 메트릭을 더 쉽게 읽을 수 있도록, 우리는 주어진 수량 유형에 대한 통계를 반환하는 새로운 방법을 선호하여 이러한 속성을 사용하지 않습니다.

상기시켜 드리자면, 이 방법은 HKWorkoutActivity에서도 사용할 수 있으므로 활동 중에 일어난 일에 집중할 수 있습니다.

이러한 통계는 HKWorkoutBuilder 또는 HKLiveWorkoutBuilder를 사용하는 경우에만 운동으로 수집된 모든 샘플에서 자동으로 계산됩니다.

이 더 풍부한 운동 표현과 함께, 우리는 또한 분석이나 시각화를 추진할 때 관심 있는 운동만 쿼리하는 데 도움이 되는 새로운 술어 세트를 가지고 있습니다.

예를 들어, 여기 각 활동의 평균 심박수가 있는 최근 운동 목록이 있습니다.

평균 심박수가 150 이상인 고강도 활동으로 운동을 하고 싶습니다.

먼저, 저는 운동 활동에 작용할 새로운 predicateForWorkoutActivities 방법을 사용하여 술어를 만드는 것으로 시작합니다.

나는 평균 심박수가 분당 150회보다 컸으면 좋겠어.

다음으로, 운동을 묻고 싶기 때문에, 나는 운동 술어 안에 심박수 술어를 감싼다.

그런 다음, 나는 그 술어를 사용하여 쿼리를 만든다.

그리고 나는 내 술어와 일치하는 운동 목록을 얻기 위해 내 쿼리 설명자의 결과(for: healthStore) 메소드를 부른다.

그리고 그게 내가 관심 있는 운동에 대해 질문할 수 있는 방법이야.

나의 최근 운동 중 하나는 네 번의 달리기 간격으로 구성되었다.

HKWorkoutActivity를 사용하는 것은 이러한 간격을 포착하는 좋은 방법입니다.

인터벌 운동의 모든 활동이 운동과 동일한 활동 유형을 가지고 있는지 확인하기만 하면 됩니다.

그래서 달리기 운동의 경우, 모든 활동은 .running 유형으로 구성됩니다.

운동 활동을 사용하여 간격을 추적하는 한 가지 이점은 각 간격에 대한 통계를 얻을 수 있다는 것입니다.

이러한 업데이트를 통해, 운동은 이제 그들의 활동과 그들을 둘러싼 맥락에 대한 보다 포괄적인 그림을 포함한다.

더 풍부한 그림을 제공하기 위해, 우리는 Apple Watch Series 6, SE 및 최신 모델에서 자동으로 수집될 새로운 실행 메트릭을 도입하고 있습니다 - 주행 보폭 길이 또는 전력과 같은 메트릭.

수영 운동을 위해, 우리는 SWOLF 점수를 추가하고 있습니다.

그것은 주어진 길이에서 찍은 스트로크의 수와 그 길이를 헤엄치는 데 걸린 시간으로 정의된다.

이 점수는 Apple Watch에 기록된 수영 운동을 위한 각 랩 이벤트와 세그먼트 이벤트에 대해 계산됩니다.

이러한 지표는 운동을 풍부하게 하고 어떻게 수행했는지 더 잘 이해할 수 있게 해주지만, 운동이 끝난 후 기록되는 또 다른 중요한 지표는 심박수 회복입니다.

운동 후 심박수가 얼마나 빨리 낮아지는지에 대한 추정치이며, 스트레스 후 심장이 어떻게 회복되는지 이해하고 잠재적인 건강 문제를 밝히는 데 사용할 수 있습니다.

iOS 16과 함께, 우리는 새로운 심장 복구 데이터 유형을 도입하고 있습니다.

건강 앱에서 액세스할 수 있으며, 앱은 HealthKit에서 이 데이터를 읽고 저장할 수 있습니다.

심박수 회복은 식별자 .heartRateRecoveryOneMinute가 있는 수량 유형입니다.

각 심박수 회복 샘플에 대한 추가 컨텍스트 정보를 메타데이터로 추가할 수 있습니다.

최근 수영 자전거 달리기 운동에서, 나는 내 한계까지 밀어붙였고, 그리고 나서 내 심박수의 회복률을 관찰했다.

운동을 완료하는 데 약 3시간 반이 걸렸다.

나는 달릴 때 분당 184비트의 최대 심박수에 도달했다.

그리고 운동 후 1분 동안, 내 심박수는 50회 떨어졌다.

Apple Watch에서 HKLiveWorkoutBuilder를 사용할 때, 심박수 복구 샘플은 주변 컨텍스트와 함께 운동 후 HealthKit에 자동으로 저장됩니다.

그렇지 않으면, 심박수 회복 샘플을 저장하기 위해, .heartRateRecoveryOneMinute 유형으로 수량 샘플을 만듭니다.

내 심박수는 운동 후 1분에 50회 감소했기 때문에, 나는 그것을 내 샘플의 양으로 설정했다.

나는 또한 샘플의 시작일과 종료일을 정했다.

그런 다음, 복구 테스트 유형부터 시작하여 메타데이터 사전에 추가 컨텍스트 정보를 넣었습니다.

내 운동은 전면적인 노력이었기 때문에, 테스트 유형은 .maxExercise이다.

내 운동은 swimBikeRun이었기 때문에, 나는 그것을 활동 유형으로 설정했다.

HeartRateRecoveryActivity Duration 키를 사용하여 운동 기간을 추가할 수도 있습니다.

마지막으로, 나는 운동 중에 관찰된 최대 심박수를 추가했는데, 이는 분당 184회였다.

이러한 업데이트로, 이제 수영 자전거 달리기와 인터벌 운동을 추적하는 것이 그 어느 때보다 쉬워졌습니다.

또한, 새로운 지표의 도입은 운동에 대한 보다 포괄적인 그림과 시간이 지남에 따라 진행 상황을 평가하는 새로운 방법을 제공합니다.

활동과 피트니스는 모든 사람에게 영향을 미치는 것이지만, 시력과 같이 우리 중 많은 사람들에게 영향을 미치는 건강의 다른 측면이 있다.

사실, 미국 비전 위원회에 따르면, 미국 성인의 약 75%가 처방 안경이나 콘택트 렌즈로 시력 교정에 의존한다.

그러나 이러한 처방전은 잃어버리기 쉽고, 처방 안경이나 콘택트 렌즈를 주문할 때 가지고 있어야 할 것이 하나 더 있습니다.

그러니 그것들을 우리 핸드폰에 넣자.

iOS 16부터 앱은 이제 HealthKit에서 안경과 연락처 처방전을 저장할 수 있습니다.

시력 처방은 시력 처방 유형이 있는 샘플이다.

샘플의 시작일은 처방전의 발행일에 해당하는 반면, 종료일은 만료일에 해당한다.

선택적으로, 물리적 처방전의 디지털 사본을 샘플에 첨부할 수 있습니다.

안경이나 콘택트 렌즈 처방 샘플은 HKVisionPrescription의 하위 클래스입니다.

안경의 경우 HKGlassesPrescription 서브클래스를 사용하고 연락처의 경우 HKContactsPrescription 서브클래스를 사용합니다.

각 안경 처방전은 두 개의 안경 렌즈 사양 개체를 사용하여 만들어집니다; 각 눈에 하나씩.

그리고 마찬가지로, 콘택트 렌즈 처방전은 두 개의 콘택트 렌즈 사양 개체로 만들어집니다.

이제, 내 독서용 안경 처방전을 HealthKit에 저장하자.

첫 번째 단계는 각 눈에 대한 HKGlassesLensSpecification을 만드는 것입니다.

정점 거리와 프리즘과 같은 일부 매개 변수는 선택 사항입니다.

나는 같은 방식으로 올바른 눈 렌즈 사양을 만들 수 있다.

다음으로, 오른쪽 눈과 왼쪽 눈 렌즈 사양으로 안경 처방 샘플을 만듭니다.

이 처방전은 내 독서용 안경을 위한 것이므로, 설명에 추가하고 있습니다.

그런 다음, 저는 처방전으로 헬스스토어에 세이브를 요청합니다.

그리고 그것으로, 내 처방전은 이제 HealthKit에 저장되었다.

나는 또한 그것의 사진을 찍었고, 방금 저장한 샘플에 첨부하고 싶다.

첨부 파일은 HKAttachment 객체로 표시됩니다.

HKAttachmentStore를 사용하여 첨부 파일을 저장하고 읽습니다.

정적 이미지나 PDF 파일만 처방전에 첨부할 수 있습니다.

내가 찍은 사진을 처방전 샘플에 첨부하기 위해, 나는 healthStore를 사용하여 HKAttachmentStore 객체를 만드는 것으로 시작한다.

그런 다음 처방전 샘플과 함께 addAttachment(to:)를 호출합니다.

나는 첨부 파일의 이름을 설정했다.

여기, PNG 파일을 첨부합니다.

그리고 마지막으로, 파일의 URL을 전달하세요.

방금 첨부한 처방전에는 렌즈 사양보다 훨씬 더 많은 정보가 포함되어 있습니다 - 제 이름과 생년월일과 같은 민감한 정보.

HealthKit의 핵심 원칙 중 하나는 개인 정보를 보호하고 공유하는 데이터를 항상 제어할 수 있도록 하는 것입니다.

첨부 파일이 포함된 처방전으로 의도한 것보다 더 많은 데이터를 쉽게 공유할 수 있기 때문에, 우리는 처방전에 대한 새로운 승인 모델을 도입하고 있습니다.

읽기 허가는 각 처방 대상에 대해 별도로 부여됩니다.

사용자는 앱에 액세스 권한을 부여하는 처방전을 정확히 선택하고 언제든지 선택을 업데이트할 수 있습니다.

우리는 시력 처방 대상에 대한 허가를 요청하기 위한 새로운 API를 가지고 있습니다.

다른 데이터 유형과 마찬가지로, 쿼리를 사용하여 앱이 액세스할 수 있는 처방전을 읽을 수 있습니다.

특정 처방전에만 관심이 있다면, 술어를 사용할 수 있습니다.

인증을 요청하려면, visionType을 사용하여 healthStore의 requestPerObjectRead 인증 방법을 호출하기만 하면 됩니다.

그렇게 하면 항상 당신의 술어와 일치하는 모든 처방전 목록과 함께 앱에 인증 프롬프트가 표시됩니다.

최고의 사용자 경험을 보장하기 위해 적절한 맥락에서 승인을 요청하고 있는지 확인하세요.

이것들은 당신의 앱이 더 나은 건강과 피트니스 경험을 제공할 수 있도록 HealthKit에 추가한 새로운 것들 중 일부일 뿐입니다.

우리는 당신이 다음에 무엇을 만들 것인지 빨리 보고 싶습니다.

멋진 WWDC를 보내며, 질문이 있으시면, 개발자 포럼에서 기꺼이 도와드리겠습니다.

♪