10100

♪ ♪

안녕하세요, 저는 WebKit 팀의 엔지니어인 Devin Rousso입니다. 오늘 Safari의 Web Inspector를 위한 확장 프로그램을 만들 수 있는 흥미로운 새로운 기회를 공유하기 위해 왔습니다.

웹 인스펙터는 모든 Apple 플랫폼에서 웹 콘텐츠를 디버깅하기 위한 주요 개발자 도구입니다.

그것은 이미 웹사이트 디버깅을 위한 수많은 내장 기능을 가지고 있지만, 일반화된 개발자 도구로 구축하기 어려운 웹 개발 영역이 종종 있다.

인기 있는 자바스크립트 라이브러리를 디버깅하고 있거나, 작업 중인 작업에 대해 좀 더 구체적인 것이 필요할 수도 있습니다.

웹 인스펙터 확장은 이러한 개인 워크플로우 시나리오를 위한 환상적인 솔루션입니다.

크로스 브라우저 웹 확장과 DevTools API를 활용하여, 이제 Safari 16의 웹 인스펙터에 자신만의 탭을 추가할 수 있습니다.

실행 중인 웹 인스펙터 확장을 빠르게 살펴본 다음, 자신만의 확장을 어떻게 구축할 수 있는지 보여드리겠습니다.

먼저 사파리의 확장 환경 설정을 열겠습니다.

그리고 Web Inspector 확장을 활성화하세요.

그런 다음 사파리의 확장 환경 설정을 닫고 페이지를 검사하겠습니다.

개발 메뉴, 웹 인스펙터 보기에서 그렇게 할게.

웹 인스펙터에서는 요소 탭과 같은 많은 내장 탭뿐만 아니라 방금 활성화한 웹 인스펙터 확장 탭도 볼 수 있습니다.

그러나 우리가 방금 이 확장을 활성화했기 때문에, 먼저 현재 검사된 페이지에서 작업할 수 있는 권한을 부여해야 합니다.

저는 웹 인스펙터 외부의 다른 확장과 동일한 권한 기간 옵션을 가지고 있으므로, 지금은 하루 동안 액세스 권한을 부여합시다.

이 오픈 그래프 확장은 내가 이 세션에서 구축할 것이다.

그것은 대부분의 웹사이트가 메시지 및 기타 소셜 미디어 사이트의 링크 미리보기에서 사용하기 위해 페이지에 넣는 일반적인 소셜 미디어 메타데이터를 표시합니다.

이제 웹 인스펙터 확장이 무엇을 할 수 있는지 빠르게 살펴보았으니, 그들이 어떻게 구축되었는지에 대해 이야기해 봅시다.

다른 사파리 웹 확장 프로그램과 마찬가지로, 웹 인스펙터 확장 프로그램은 App Store의 앱을 통해 배포됩니다.

자신만의 웹 인스펙터 확장 프로그램을 구축하려면, Mac 및 iOS 앱을 구축하기 위한 Apple의 앱 생성 도구인 Xcode가 있어야 합니다.

Xcode는 또한 새로운 사파리 확장 앱을 만드는 데 도움이 되는 프로젝트 템플릿과 함께 제공됩니다.

다른 브라우저를 위해 만든 기존 웹 확장 프로그램이 이미 있다면, Xcode의 번들 변환 도구를 사용할 수도 있습니다.

터미널에서 safari-web-extension-converter를 실행하여 manifest.json 파일이 포함된 확장 디렉토리의 경로를 전달하기만 하면 됩니다.

그런 다음 빌드하고 실행할 준비가 된 확장 프로그램을 위한 전체 앱 프로젝트가 생성됩니다.

이 도구에 대한 자세한 내용은 WWDC 2020의 Meet Safari 웹 확장 프로그램과 온라인 문서를 확인하세요.

그래서 오늘 저는 웹 인스펙터 확장 프로그램의 기본 구조를 검토하고, 그 확장 프로그램에서 코드를 가장 잘 평가하는 방법을 다루고, 사용자를 위한 몇 가지 좋은 모범 사례에 대해 논의할 것입니다.

시작하자.

웹 인스펙터 확장 프로그램은 다른 사파리 웹 확장 프로그램과 마찬가지로 도구 모음 아이콘, 배경 페이지, 콘텐츠 스크립트 등으로 구성되어 있지만 전용 devtools 배경 페이지도 있습니다.

그것이 실제로 어떻게 작동하는지 살펴봅시다.

일반적인 사파리 웹 확장 프로그램의 구조는 이름, 아이콘, 설명 등과 같은 확장 프로그램에 대한 기본 세부 사항을 선언하는 매니페스트 파일로 시작됩니다.

확장 프로그램의 모든 비하인드 스토리 로직을 처리하기 위해 백그라운드 페이지를 선언할 수 있으며, 사용자가 방문한 웹 페이지에 기능을 주입하는 데 사용되는 콘텐츠 스크립트를 선언할 수도 있습니다.

웹 인스펙터 확장의 경우, 몇 개의 다른 페이지가 믹스에 들어갑니다.

먼저 웹 인스펙터 확장의 비하인드 로직에 필요한 devtools 배경 페이지가 있습니다.

이 페이지는 고유한 devtools API와 제한된 콘텐츠 스크립트 API 세트에만 액세스할 수 있습니다.

이 devtools 배경 페이지에서 웹 인스펙터에 표시될 devtools 탭 페이지를 만들 수 있습니다.

하지만 그 모든 것은 단지 하나의 웹 인스펙터를 위한 것이다.

여러 웹 인스펙터가 있는 경우, 각각은 동일한 devtools 배경 페이지의 자체 인스턴스를 가지고 있으며, 관련 웹 인스펙터가 열려 있는 기간 동안 살아 있습니다.

따라서, 각 devtools 탭 페이지의 여러 인스턴스가 있을 수도 있습니다.

이 구조가 실제로 어떻게 보이는지 살펴보고, Open Graph Web Inspector 확장 프로그램을 구축하기 시작합시다.

나는 Xcode에서 새로운 프로젝트를 만드는 것으로 시작할 것이다.

내가 만들 프로젝트 유형은 사파리 확장 앱이다.

나는 macOS만 정말 필요하지만, 나중에 iOS 기능을 추가하고 싶을 경우를 대비하여 멀티플랫폼에서 그대로 둘 것이다.

나는 이것을 "오픈 그래프"라고 명명하고, 나머지 기본값을 유지할 것이다.

사용 중인 Apple 개발자 계정을 기반으로 팀과 번들 식별자를 선택해야 합니다.

그리고 마지막으로, 나는 이것을 데스크톱에 저장할 것이다.

이제 저는 수정할 준비가 된 일반적인 사파리 웹 확장 프로젝트를 가지고 있습니다.

나는 먼저 모든 웹 확장자에 대한 루트 구성 파일인 manifest.json 파일로 옮겨진다.

매니페스트 파일은 확장자를 구성하는 다른 리소스(현지화, 이미지, 페이지, 스크립트, 스타일 등을 참조합니다.

웹 인스펙터 확장의 경우, 배경 페이지, 콘텐츠 스크립트 또는 팝업과 같은 일부 파일이 필요하지 않으므로 매니페스트와 전체 프로젝트에서 삭제할 것입니다.

좋아, 이걸 웹 인스펙터 확장으로 만들기 시작하자.

그렇게 하려면 매니페스트에 devtools 배경 페이지를 추가하고 해당 파일과 그 안에 사용할 자바스크립트 파일을 만들어야 합니다.

나는 파일 - 신규 - 파일로 갈 거야...

그리고 빈 파일 템플릿을 찾으려면 아래로 스크롤하세요.

매니페스트에서 사용한 이름과 일치하도록 이 파일을 "devtools_background.html"이라고 부를 것이다.

그 위치는 이미 내 다른 자원과 올바른 목표의 일부 바로 옆에 있도록 설정되어 있으므로, 나는 여기서 아무것도 바꿀 필요가 없다.

자바스크립트 파일로 같은 단계를 다시 반복하겠습니다...

...나는 "devtools_background.js"라고 부를 것이다.

마지막으로, devtools 배경 페이지에 자바스크립트 파일을 포함시켜야 합니다.

기억하세요, 이 페이지는 웹 인스펙터가 열릴 때 생성되며, 웹 인스펙터에 나타나는 사용자 지정 탭을 만들 책임이 있습니다.

나는 필요한 경우 이전에 본 권한이 다른 장소가 아닌 인라인으로 사용자에게 표시되도록 거의 항상 탭을 만들고 싶습니다.

이 devtools 패널은 세 가지 간단한 인수를 사용합니다.

첫 번째는 탭의 이름이다.

이를 위해, 저는 내 확장 프로그램의 현지화된 이름을 찾기 위해 현지화 방법을 사용하고 있습니다.

다음 인수는 사용할 아이콘 경로이다.

사용자가 사용자 인터페이스를 확대하기로 선택한 경우 모든 크기로 원활하게 확장할 수 있는 벡터 이미지여야 합니다.

하지만 이 아이콘을 사용하려면, 확장에 필요한 다른 모든 아이콘과 함께 프로젝트의 일부인지 확인해야 합니다.

"이미지" 폴더의 아이콘은 여전히 프로젝트 템플릿의 기본값입니다.

그러니 이것들을 프로젝트에서 삭제합시다.

그리고 그것들을 내가 이전에 만든 몇 가지 아이콘으로 바꾸세요...

...Devtools 탭을 만들 때 사용하려고 하는 "logo.svg"를 포함하여.

이제 이것이 여기에 있으니, 나는 devtools 배경 스크립트로 돌아갈 것이다.

세 번째 인수는 웹 인스펙터의 탭에서 사용하는 HTML이다.

그리고 조금 전 이미지와 마찬가지로, 사용하기 전에 이 페이지를 만들어야 합니다.

내가 API에 준 이름과 일치하도록 이 이름을 "devtools_tab.html"이라고 지을 것이다.

그러나 devtools 배경 페이지와 달리, 이 devtools 탭 페이지는 실제로 사용자에게 표시되므로, 이번에는 자바스크립트와 CSS 파일을 모두 만들 것입니다.

자바스크립트 파일의 이름을 "devtools_tab.js"로 지을게...

...그리고 CSS 파일 "devtools_tab.css".

내가 이미 이 구조를 설정한 것은 좋지만, 지금은 일이 제대로 작동하는지 확인하기 위해 일반적인 "Hello World"를 추가할 것이다.

하지만 걱정하지 마세요, 우리는 조금 나중에 이것에 대해 더 깊이 파고들 것입니다. 왜냐하면 먼저, 우리는 여전히 이 확장이 일관된 모습을 가지고 있는지 확인하기 위해 교체할 아이콘이 몇 개 더 있기 때문입니다.

먼저 우리는 기본 큰 아이콘을 교체해야 합니다...

...그것을 삭제함으로써...

...그리고 내 큰 아이콘을 그 자리에 끌고 간다.

그러나 이 큰 아이콘은 앱의 일부이기 때문에, 올바른 대상에 추가해야 합니다.

나머지 아이콘은 모두 자산 카탈로그, 특히 AppIcon 세트의 일부입니다.

나는 이미 이 아이콘들을 준비했으니, 그냥 붙여넣을게.

그리고 그것으로, 나는 우리가 모든 기본 아이콘을 교체했다고 생각한다, 그래서 나는 이제 내 확장을 실행할 것이다.

프로젝트가 처음 구축될 때 몇 초가 걸릴 수 있습니다.

그리고 저기 있어!

이 UI의 대부분은 Xcode 템플릿에서 가져온 것이지만, 나는 기본 아이콘 대신 내 아이콘을 올바르게 본다.

사파리 확장 앱을 적어도 한 번 실행하면, 사파리가 픽업하기 위해 앱을 더 이상 실행할 필요가 없기 때문에 닫을 수 있습니다.

하지만 사파리에서 볼 수 있기 전에, 이것은 로컬로 만들어진 서명되지 않은 앱이기 때문에 개발 메뉴에서 서명되지 않은 확장을 허용해야 합니다.

이제 사파리의 확장 환경 설정에서 오픈 그래프를 볼 수 있습니다. 내가 켤게.

내 확장 프로그램을 사용해 볼 수 있도록 사파리 탭을 열고 apple.com을 찾아볼 거야.

그리고 우리는 이미 내 아이콘이 도구 모음에 있다는 것을 알 수 있다.

그리고 내 확장 탭은 이제 탭 바에 있다.

그것으로 전환하면, 우리는 이전에 본 것과 같은 권한 프롬프트를 볼 수 있다.

확장에 권한이 필요한 경우 이 권한 프롬프트가 자동으로 표시됩니다.

이전처럼, 나는 하루 동안 그것을 허용할 것이다.

그리고 이전에 devtools 탭 페이지에 추가한 "Hello World"가 있습니다.

그것들은 사파리 16용 웹 인스펙터 확장 프로그램을 만드는 방법의 기본 사항입니다.

요약하자.

Devtools 배경 페이지를 선언하고 Xcode 프로젝트에 추가했습니다.

거기에서, 나는 내 사용자 지정 도구를 보여주기 위해 웹 인스펙터에서 새 탭을 만들 수 있었다.

그리고 마지막으로, 나는 확장에 필요한 권한을 고려하기 시작했다.

웹 인스펙터 확장의 경우, 이것은 종종 검사된 페이지의 코드를 평가하는 것으로 귀결되며, 일반적으로 웹 인스펙터 내부에 표시할 일부 데이터를 추출합니다.

웹 확장은 이미 코드를 평가하는 여러 가지 방법을 가지고 있다.

웹 인스펙터 확장의 경우, 검사된 페이지 내에서 스크립트를 평가하는 데 선호되는 또 다른 API가 있습니다.

이 API를 살펴보고 OpenGraph 확장 프로그램에 어떻게 사용할 수 있는지 봅시다.

검사된 창에서 자바스크립트를 평가하는 이 devtools 확장 API는 빠른 결과를 얻는 가장 좋은 방법입니다.

확장 프로그램이 실행 중인 웹 인스펙터와 관련된 페이지를 자동으로 타겟팅합니다.

사용자가 동시에 여러 페이지를 검사할 수 있다는 것을 기억하세요.

이 API에는 올바른 결과를 얻는 데 도움이 되는 몇 가지 유용한 옵션도 있습니다.

기본적으로 이 API에 주어진 표현식은 검사된 페이지의 메인 프레임의 맥락에서 평가됩니다.

하지만 frameURL 옵션을 사용하여 다른 프레임 내부의 평가를 지정할 수 있습니다.

이것은 확장 프로그램이 페이지의 많은 가능한 하위 프레임 중 하나에서 데이터를 추출해야 할 때 필요합니다.

OpenGraph 확장의 경우, 메인 프레임에 대해서만 걱정하면 되지만, 웹 인스펙터 확장에 대한 스크립트를 평가할 때 이것을 명심하는 것이 좋습니다.

내 확장 프로그램에서 이 기능을 사용하여 검사된 페이지에서 데이터를 가져오고 표시할 수 있는 방법을 살펴봅시다.

이전에 추가한 자리 표시자 "Hello World"를 실제로 CSS와 자바스크립트 파일을 로드하는 HTML로 교체하는 것으로 시작하겠습니다.

그런 다음 devtools 탭에 좋은 스타일을 주기 위해 몇 가지 기본 CSS를 추가할 것입니다.

내 devtools 탭이 나머지 웹 인스펙터와 맞는지 확인하고 싶어서, 내 devtools 탭이 나머지 웹 인스펙터의 모양과 일치하도록 하는 루트 `color-scheme` 속성을 선언했습니다.

저는 시스템 글꼴 패밀리를 사용하고 글꼴 크기를 상속하고 더 중요한 텍스트의 색상을 일치시키고 있습니다.

기능에 관해서는, 페이지에 오픈그래프 메타데이터가 없을 경우를 대비하여 텍스트를 추가하는 것으로 시작하겠습니다.

웹 확장 프로그램의 다른 곳에서 할 수 있는 것처럼 웹 인스펙터에서 웹 확장 지역화된 문자열을 사용할 수 있습니다.

하지만 그렇게 하려면, 동일한 현지화된 문자열 식별자를 현지화된 문자열 파일에 추가해야 합니다.

다음으로, 검사된 페이지에서 평가할 수 있는 강력한 devtools inspectedWindow eval API에 제공할 자바스크립트를 만들 것입니다.

이 경우, 검사된 페이지의 DOM에서 몇 가지 일반적인 오픈그래프 메타데이터, 특히 제목, 설명을 쿼리하고 싶습니다...

...그리고 이미지와 검사된 페이지의 문서의 현재 준비 상태는 모두 함께 묶어 반환 값을 통해 devtools 페이지로 다시 보냅니다.

완료되면, 이러한 각 속성에 해당하는 HTML 요소를 잡고 수집된 데이터를 표시하도록 구성할 수 있습니다.

그리고 문서가 아직 준비되지 않았다면, 짧은 지연 후에 다시 시도할 수 있습니다.

나는 또한 검사된 페이지가 탐색될 때마다 이 모든 것을 다시 하고 싶기 때문에, devtools 네트워크 onNavigated의 리스너를 추가할 것이다.

이 모든 것이 멋져 보이기 때문에, 나는 그것을 테스트하기 위해 다시 만들 것이다.

이제, 웹 인스펙터를 열거나 이미 열려 있는 웹 인스펙터로 탐색할 때마다, 모든 페이지의 오픈그래프 제목, 설명 및 이미지를 볼 수 있습니다.

그리고 그것은 많은 새롭고 강력한 웹 인스펙터 확장 API 중 일부를 사용하는 방법의 간단한 예입니다.

내 OpenGraph 확장 프로그램은 매우 잘 진행되고 있다.

내 웹 인스펙터 확장 프로그램의 devtools 탭 페이지는 이제 검사된 페이지에서 평가할 수 있습니다.

결과 데이터를 가져와서 처리하여 빠른 액세스를 위해 사용자 친화적인 형식으로 표시할 수 있습니다.

그래서 웹 인스펙터 확장을 만들 때 훌륭한 사용자 경험을 만들 수 있는 좋은 방법은 무엇인가요?

항상 devtools 배경 페이지에서 devtools 탭 페이지를 만드세요.

이렇게 하면, 사용자는 이러한 탭이 웹 인스펙터에서 어디에 나타날지 볼 수 있으며, 적절한 권한 프롬프트가 인라인으로 표시됩니다.

특정 호스트 권한을 요청하는 대신, activeTab 권한을 사용하여 웹 인스펙터 확장을 가능한 한 타겟으로 유지하십시오.

그리고 CSS 색상 계획 속성 또는 웹 확장 devtools 테마 API를 사용하여 웹 인스펙터의 전체 테마와 일치해야 합니다.

그래서 오늘 저는 웹 인스펙터 확장으로 완전히 새로운 디버깅 도구를 만드는 방법을 보여주었고 그렇게 하는 동안 명심해야 할 몇 가지 훌륭한 모범 사례를 다루었습니다.

더 자세히 살펴보고 싶다면 이 세션의 관련 리소스에서 OpenGraph Web Inspector 확장 프로그램을 다운로드할 수 있습니다.

우리는 당신의 생각을 듣는 데 매우 관심이 있으므로, 피드백 어시스턴트를 사용하여 버그와 기능 요청을 제출하거나, 사파리 개발자 포럼에서 우리와 채팅하세요.

그리고 심지어 웹 확장의 미래를 형성하는 데 도움을 주기 위해 WebExtensions 커뮤니티 그룹에 가입하는 것을 고려해 보세요.

또한, 올해 새로운 기능에 대해 자세히 알아보려면 Safari Web Extensions의 새로운 기능 및 온라인 문서를 확인하십시오.

웹 인스펙터 내에서 사용자 지정 도구를 만드는 놀라운 새로운 기능에 대해 배우는 것을 즐겼기를 바랍니다.

우리는 당신이 어떤 멋진 웹 인스펙터 확장을 만들 것인지 빨리 보고 싶고, 당신이 가능한 것의 한계를 뛰어넘을 수 있는 모든 방법을 기대합니다.

들어주셔서 정말 감사드리며, WWDC에서 환상적인 휴식을 보내시길 바랍니다. ♪ ♪