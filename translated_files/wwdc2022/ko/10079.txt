10079

Qiaoyu Deng: 안녕하세요.

"앱과 서버의 DNS 보안 개선"에 오신 것을 환영합니다. 제 이름은 Qiaoyu Deng입니다.

이 비디오에서, 우리는 DNS가 종종 안전하지 않은 이유와 DNSSEC와 DDR로 암호화된 DNS를 사용하여 DNS를 보호하는 방법에 대해 이야기할 것입니다.

먼저, DNS가 안전하지 않은 이유에 대해 이야기해 봅시다.

DNS는 인터넷의 전화번호부이다.

그것은 사람이 읽을 수 있고 기억하기 쉬운 도메인 이름을 기계를 위해 만들어진 IP 주소로 변환한다.

TCP, TLS 및 QUIC와 같은 다른 인터넷 프로토콜은 IP 주소를 갖는 것에 의존하므로 모든 것은 DNS로 시작됩니다.

오늘날, TLS는 인터넷 통신을 보호하기 위해 널리 사용된다.

그것은 훌륭하지만, 기본 계층인 DNS에는 몇 가지 보안 문제가 있다.

DNS는 역사적으로 안전하지 않다.

그것은 몇 가지 보안 고려 사항으로 1983년에 설계되었다.

그 후 몇 년 동안, 많은 DNS 공격이 만들어졌다.

한 가지 예는 DNS 캐시 중독으로, 공격자가 DNS 리졸버의 결함을 악용하여 잘못된 IP 주소를 캐시하여 클라이언트가 악의적인 호스트에 연결하게 합니다.

이것은 DNS의 한 가지 취약점을 드러낸다: 그것은 인증되지 않았다.

오늘날 전통적인 DNS 클라이언트는 답변을 검증할 방법이 없기 때문에 쉽게 스푸핑될 수 있다.

또 다른 일반적인 공격은 공격자가 클라이언트와 DNS 서버 간의 DNS 트래픽을 감시하여 클라이언트의 기록을 수집하는 DNS 스니핑이다.

이것은 사용자 사생활에 심각한 문제이다.

이 공격이 가능한 이유는 DNS 트래픽이 원래 암호화되지 않았기 때문이다.

그 위에 구축된 프로토콜의 안전한 출발점이 되려면, DNS는 인증되고 암호화되어야 한다.

DNSSEC를 사용하여 DNS 응답에 서명할 때, 인증을 제공합니다.

TLS와 HTTPS를 사용하여 DNS 해상도를 암호화하면 개인 정보를 보장합니다.

다음으로, DNSSEC에 대해 이야기해 봅시다.

DNSSEC는 IETF가 만든 확장 사양 모음이다.

많은 DNS 서비스 제공 업체가 이미 그것을 지원하지만, 고객 지원은 여전히 증가하고 있다.

iOS 16과 macOS Ventura는 이제 클라이언트 측 DNSSEC 검증을 지원합니다.

DNSSEC는 디지털 서명을 추가하여 데이터 인증을 보장합니다.

그것은 데이터 무결성을 보호한다.

그것은 답이 존재하지 않을 때 존재의 부정을 인증한다.

그것은 또한 암호화 인증을 제공한다.

DNSSEC는 응답에 서명을 첨부하여 데이터 무결성을 보호합니다.

공격자가 응답을 변경하면, 변경된 데이터의 서명이 원본과 일치하지 않습니다.

이 경우, 고객은 변경된 응답을 감지하고 폐기할 수 있습니다.

DNSSEC는 또한 NSEC 레코드와 같은 특별한 유형의 DNS 레코드를 사용하여 영역에서 레코드의 존재와 존재하지 않음을 주장한다.

NSEC 레코드는 다음 레코드 이름이 무엇인지 알파벳순으로 안전하게 알려줍니다.

목록에 있는 이름은 존재하는 이름이며, 목록에 없는 이름은 존재하지 않는다.

예를 들어, 우리는 여기에 세 개의 NSEC 기록을 가지고 있다.

기록 세트는 구역 조직이 A.org, C.org 및 E.org의 세 가지 레코드 이름만 가지고 있음을 보여준다.

이제, A.org가 존재하지 않는다고 말하는 공격자가 있다면, 클라이언트는 이 공격을 감지할 수 있다.

A.org는 첫 번째 NSEC 기록에 등재되어 있기 때문에 존재한다.

마찬가지로, 공격자가 D.org가 존재한다고 말하면, 두 번째 NSEC 기록에 따르면, D.org는 C.org와 E.org 사이에 있고 두 이름 사이에 이름이 없어야 하기 때문에 클라이언트도 그것을 감지할 수 있다.

DNSSEC는 신뢰 사슬을 구축하여 기록을 인증한다.

여기 예시가 있어.

장치는 DNSSEC 유효성 검사가 활성화된 상태에서 www.example.org를 해결하려고 합니다.

IP 주소, 서명 및 키를 요청하는 쿼리를 보냅니다.

응답으로, 신뢰 관계는 IP 주소에서 키 1번까지 구축될 수 있다.

그런 다음 클라이언트는 상위 영역인 조직에 쿼리를 보내 키 번호 1을 인증하는 데 사용할 수 있는 레코드를 요청하여 키 번호 1에서 키 번호 2까지 신뢰 관계를 구축할 수 있습니다.

그래서 장치는 뿌리에 도달할 때까지 이 과정을 재귀적으로 반복한다.

이제, 다이어그램에서 키 번호 3인 루트 키를 신뢰할 수 있다면, IP 주소에서 키 번호 3까지의 신뢰 관계를 인증할 수 있습니다.

루트 키의 해시는 항상 장치에 안전하게 저장됩니다.

DNSSEC에서는 루트 트러스트 앵커라고 불린다.

키 번호 3의 해시는 사전 설치된 앵커와 일치하면, 신뢰 체인을 안전하게 설정할 수 있습니다.

신뢰 체인을 통해, www.example.org의 IP 주소는 이제 인증되었습니다.

앱에서 DNSSEC 검증을 요구하려면, 여기에 해야 할 일이 있습니다.

도메인에 IPv6를 지원하세요.

IPv6 전용 환경에서, IPv4 전용 주소는 합성 IPv6 주소로 변환됩니다.

도메인이 서명된 경우, 합성된 주소는 DNSSEC 검증을 통과할 수 없습니다. DNSSEC가 활성화된 상태에서는 연결할 수 없습니다.

그러니 당신의 도메인이 IPv6를 지원하는지 확인하세요.

DNS 서비스 제공 업체가 DNSSEC로 도메인에 서명하는지 확인하세요.

도메인에 서명하지 않고 앱에서 DNSSEC를 활성화하면 혜택이 없지만, 서명되지 않은 도메인에 대한 인증을 시도하기 위해 추가 DNS 트래픽과 확장된 해결 시간을 얻을 수 있습니다.

해당 인프라 지원을 받으면, 앱에 DNSSEC를 채택하는 데 필요한 코드가 있습니다.

NSURLSession 클라이언트인 경우, URL 요청에 대해 DNSSEC 검증을 요구할 수 있습니다.

여기 예시가 있어.

먼저 기본 세션 구성을 만들 것입니다.

그러면 DNSSEC 검증이 필요합니다.

다음으로, 수정된 구성으로 세션을 만들 것입니다.

이 세션에서 생성된 모든 URL 요청에 대해 DNSSEC를 활성화합니다.

전체 세션에 대해 DNSSEC를 활성화하고 싶지 않다면, 요청 수준에서도 할 수 있습니다.

먼저, DNSSEC 유효성 검사가 비활성화된 기본 구성으로 세션을 만드세요.

그런 다음 요청에서 활성화하세요.

이제, 이 세션 작업은 DNSSEC 검증이 완료된 경우에만 시작됩니다.

Network.framework 클라이언트인 경우, 연결에 대해 DNSSEC 검증을 요구할 수도 있습니다.

먼저, 매개 변수 객체를 만들 때, DNSSEC 유효성 검사가 필요합니다.

그런 다음 매개 변수 객체로 NWConnection을 만드세요.

이제 연결을 시작하면 DNSSEC 유효성 검사가 완료되고 검증된 IP 주소에 대한 연결이 설정되었을 때만 준비 상태로 이동합니다.

DNSSEC가 활성화되면, 검증된 주소만 연결을 설정하는 데 사용됩니다.

HTTPS에서, 오류는 API를 통해 보고된다.

DNSSEC에서는 유효성 검사 실패에 대한 오류가 반환되지 않습니다.

검증에 실패한 응답을 받는 것은 어떤 응답도 받지 못하는 것과 같다.

응답을 조작하는 DNS 공급자가 있다면, 주소는 인증 검사를 통과하지 못하므로 직접 폐기됩니다.

장치가 DNS 공급자가 응답을 변조하지 않는 새로운 네트워크에 합류하면, 유효성 검사가 다시 진행되며 해상도는 자동으로 정상으로 돌아갑니다.

다음은 DNSSEC 실패를 일으킬 수 있는 몇 가지 사례입니다.

원래 DNS 응답이 변경되면, 일치하지 않는 서명은 DNSSEC 검사를 통과하지 못해 유효성 검사가 실패합니다.

장치가 사전 설치된 신뢰 앵커에 도달할 수 없고 신뢰 체인을 설정할 수 없는 경우.

네트워크가 DNSSEC 활성화 비트를 전달하는 TCP를 통한 DNS 및 EDNS0 옵션과 같은 DNSSEC에 필요한 프로토콜을 지원하지 않는 경우.

서명된 도메인이 IPv6를 지원하지 않는 경우, 인터넷 서비스 제공 업체가 제공하는 합성된 IPv6 주소는 검증에 실패합니다.

그래서 그것이 DNSSEC로 DNS 응답을 인증하는 방법이지만, 여전히 암호화되지 않은 경우, 네트워크의 누구나 그것을 볼 수 있습니다.

다음으로, 우리는 DDR로 DNS 암호화를 자동으로 활성화하는 방법에 대해 이야기할 것입니다.

iOS 14와 macOS Big Sur에서는 개인 정보 보호를 위해 암호화된 DNS를 도입했습니다.

앱의 NEDNSSettingsManager 또는 프로필의 DNSSettings를 사용하여 암호화된 DNS 시스템 전체를 수동으로 구성할 수 있습니다.

NWParameters의 PrivacyContext를 사용하여 앱에 암호화된 DNS를 선택할 수도 있습니다.

자세한 내용은 "암호화된 DNS 활성화"를 참조하십시오.

iOS 16과 macOS Ventura의 새로운 기능인 암호화된 DNS를 자동으로 사용할 수 있습니다.

네트워크가 DDR이라고도 불리는 지정 리졸버 검색을 지원하는 경우, DNS 쿼리는 자동으로 TLS 또는 HTTPS를 사용합니다.

암호화된 DNS를 사용하려면, 장치는 리졸버가 TLS 또는 HTTPS를 지원한다는 것을 알아야 하며, 포트 또는 URL 경로도 배워야 할 수도 있습니다.

DHCP 또는 라우터 광고와 같은 일반적인 메커니즘은 일반 IP 주소만 제공합니다.

DDR은 다른 산업 파트너와 협력하는 애플이 IETF에서 개발한 새로운 프로토콜이다.

그것은 DNS 클라이언트가 특별한 DNS 쿼리를 사용하여 필요한 정보를 배울 수 있는 방법을 제공한다.

장치가 새 네트워크에 연결되면, "_dns.resolver.arpa"에 대한 서비스 바인딩 쿼리를 발행합니다.

DNS 서버가 DDR을 지원하는 경우, 하나 이상의 구성으로 응답할 것입니다.

그런 다음, 장치는 이 정보를 사용하여 지정된 리졸버에 대한 암호화된 연결을 설정합니다.

암호화되지 않은 리졸버의 IP 주소가 지정된 리졸버의 TLS 인증서에 포함되어 있는지 확인합니다.

이것은 암호화되지 않은 리졸버와 암호화된 리졸버가 동일한 엔티티에 속하도록 하기 위해 수행됩니다.

모든 것이 좋아 보인다면, 장치는 이제 기본적으로 암호화된 DNS를 사용합니다.

DDR은 한 번에 단일 네트워크에 적용된다.

당신의 장치는 현재 네트워크가 지원하는 경우에만 암호화된 DNS를 자동으로 사용할 것입니다.

DNS 서버의 IP 주소가 개인 IP 주소인 경우 DDR이 작동하지 않는다는 점에 유의하는 것도 중요합니다.

소유권을 확인할 수 없기 때문에 이러한 IP 주소가 TLS 인증서에서 허용되지 않기 때문입니다.

iOS 16과 macOS Ventura에서는 NEDNSSettingsManager 또는 DNSSettings 프로필을 사용하여 구성 설정을 위해 암호화된 DNS를 사용할 때 클라이언트 인증을 지정할 수 있는 기능도 지원합니다.

클라이언트 인증을 사용하면 서버가 액세스를 허용하기 전에 클라이언트를 검증해야 하는 엔터프라이즈 환경에서 암호화된 DNS 서버를 사용할 수 있습니다.

이제 NEDNSSettings의 identityReference 속성을 사용하여 클라이언트 인증서를 구성할 수 있습니다.

이것은 VPN의 클라이언트 인증서처럼 작동한다.

이것들은 TLS를 통한 DNS와 HTTPS를 통한 DNS 모두에 적용될 수 있습니다.

이것이 DNS를 보호하는 길이다.

DNSSEC로 도메인에 서명하고 IP 주소를 인증하려면 앱에서 DNSSEC 유효성 검사를 요구하십시오.

클라이언트가 더 나은 사용자 개인 정보를 위해 암호화된 DNS로 자동으로 전환할 수 있도록 네트워크에서 DDR을 활성화하십시오.

더 나은 접근 제어가 필요한 기업에서 고객 인증을 채택하세요.

저는 당신이 미래에 구축하는 데 도움이 되는 더 안전한 DNS 기반을 기대하고 있습니다.

봐줘서 고마워!

.