10148

저스틴 레넬: 안녕하세요, WWDC에 오신 것을 환영합니다.

제 이름은 저스틴이고, 저는 애플 뮤직 개발 팀의 엔지니어입니다.

오늘 저는 Apple Music API 사용의 기본 사항에 중점을 둔 MusicKit에 대해 소개할 것입니다.

이 세션에서는 MusicKit 클라이언트 프레임워크와 Apple Music API 웹 서비스와 통합하는 방법에 대한 개요를 제공할 것입니다.

개발자로서 액세스하는 방법과 Apple Music API 사용에 대한 구체적인 세부 사항을 설명하겠습니다. 콘텐츠 및 리소스 요청, 제한 및 페이지 매김을 사용하여 대규모 리소스 컬렉션 작업, 검색 엔드포인트로 카탈로그에서 콘텐츠를 찾는 방법.

마지막으로, Apple Music 구독자가 사용할 수 있는 몇 가지 개인화된 기능과 앱에서 액세스할 수 있는 방법을 살펴보겠습니다.

MusicKit과 Apple Music API에 대한 간략한 소개로 시작하겠습니다.

MusicKit은 2017년 WWDC에서 처음 발표되었다.

그 이후로, 우리는 Apple Music과 더 쉽게 통합하고 추가 기능에 대한 지원을 계속 추가할 수 있도록 개선했습니다.

MusicKit은 클라이언트 프레임워크와 Apple Music API의 조합이다.

함께 사용하면 앱에 Apple Music 기능을 추가할 수 있습니다.

카탈로그를 검색하고 인기 차트를 검색하는 기능을 통해 아티스트, 앨범, 재생 목록 등을 포함한 Apple Music에서 콘텐츠를 검색하고 가져올 수 있습니다.

사용자의 동의가 있는 MusicKit 및 Apple Music API를 사용하면 구독자를 인증하여 사용 가능한 콘텐츠를 재생하고 음악 라이브러리, 추천 및 최근 재생 기록을 포함한 개인화된 기능에 대한 액세스를 제공할 수 있습니다.

MusicKit 클라이언트 프레임워크는 구독자를 인증하고 장치에서 재생을 시작하고 제어하는 데 필요한 API를 제공합니다.

클라이언트 프레임워크는 Apple 플랫폼의 앱, JavaScript를 사용하는 웹 애플리케이션 및 사용 가능한 SDK를 사용하는 Android 애플리케이션에서 사용할 수 있습니다.

Apple 플랫폼의 MusicKit은 Apple Music을 앱에 통합하는 데 필요한 모든 것을 갖추고 있습니다.

구독자는 앱 내에서 인증하거나 가입하여 재생을 시작하고 제어하고 다른 개인화된 기능에 액세스할 수 있습니다.

사용 가능한 API는 리소스 및 페이지 매김에 대한 기본 지원을 통해 Apple Music의 콘텐츠를 검색하고 액세스하기 위한 호출을 가속화합니다.

Apple Music API에 직접 액세스하고 요청하는 것에 대해 나중에 다룬 많은 주제는 Apple 플랫폼의 MusicKit에서 자동으로 처리됩니다.

Apple 플랫폼용 앱을 작성하는 개발자는 해당 API에 대한 소개를 위해 "Meet MusicKit for Swift" 세션과 더 많은 기능을 위해 "MusicKit으로 더 많은 콘텐츠를 탐색" 세션을 시청하는 것이 좋습니다.

웹의 MusicKit을 사용하면 자바스크립트를 사용하여 Apple Music을 애플리케이션에 쉽게 가져올 수 있습니다.

Apple Music 콘텐츠를 발견할 수 있으며, 구독자가 로그인하여 개인화된 기능에 액세스하고 웹사이트에서 직접 콘텐츠를 재생할 수 있습니다.

Apple Music API에 대한 완전한 액세스는 독특한 음악 경험을 만들 수 있는 힘을 제공합니다.

MusicKit은 모든 기능을 갖춘 미디어 플레이어를 포함한 내장 웹 구성 요소 모음을 제공합니다.

이러한 구성 요소를 사용하면 쉽게 시작할 수 있으며 경험에 맞게 사용자 정의할 수 있습니다.

Android용 MusicKit을 사용하면 Apple Music을 Android 애플리케이션에 통합할 수 있습니다.

Apple Music 구독자 인증, 콘텐츠 재생 제어 및 Apple Music API에 대한 전체 액세스를 지원하면 풍부한 음악 경험을 구축할 수 있습니다.

Apple Music API는 검색 기능과 Apple Music 카탈로그 콘텐츠에 대한 액세스를 제공하는 일반적인 JSON 웹 서비스입니다.

인증된 구독자는 음악 라이브러리, 추천 및 최근 재생 기록을 포함한 개인화된 기능에 액세스할 수 있습니다.

다음으로, 나는 접근하는 방법을 설명할 것이다.

Apple Music API에 요청하려면, 개발자 토큰이 필요합니다.

Apple 플랫폼의 애플리케이션의 경우, 앱에 MusicKit 서비스를 활성화하여 자동 토큰 관리를 활용할 수 있습니다.

이 서비스는 여기에 표시된 Apple 개발자 포털의 앱 ID 섹션에서 찾을 수 있습니다.

다른 플랫폼의 애플리케이션의 경우, Apple 개발자 포털에서 MusicKit 개발자로 등록하여 개발자 토큰을 얻을 수 있습니다.

거기에서, 당신은 개인 키를 요청하고 다운로드할 수 있습니다.

JSON 웹 토큰을 생성하고 다운로드한 개인 키로 서명해야 합니다.

JSON 웹 토큰은 두 부분으로 나뉩니다.

첫 번째 부분은 ES256이어야 하는 서명 알고리즘 "alg"와 개인 키 다운로드의 일부로 포함된 키 식별자 "kid"를 포함한 필수 헤더입니다.

토큰의 두 번째 부분은 주장이다.

Apple Music API에는 세 가지 필수 클레임이 있습니다: 발행인 ID "iss"는 Apple 개발자 포털의 멤버십 섹션에서 찾을 수 있는 팀 ID이며, Epoch 이후의 초 수와 만료 시간 "exp"로 표시됩니다.

이것은 발행된 시간과 같은 시간 형식이다.

토큰은 발행된 날로부터 최대 6개월 동안 만료되도록 생성될 수 있습니다.

웹 애플리케이션의 경우, 귀하의 웹사이트에만 유효한 토큰을 발행하는 원산지 클레임을 제공하는 것이 좋습니다.

Apple Music API에 대한 모든 요청에 대해 인증 헤더에 유효하고 서명된 토큰을 제공해야 합니다.

Apple 플랫폼의 애플리케이션에 대해 MusicKit 서비스가 활성화되면, 이것은 자동으로 수행됩니다.

웹의 MusicKit은 Apple Music API에 요청하기 위해 생성한 토큰으로 구성해야 합니다.

JSON 웹 토큰 생성에 대한 자세한 정보는 Apple Music API 문서에서 찾을 수 있습니다.

이제 Apple Music API를 사용하여 리소스를 요청하는 방법을 보여드리겠습니다.

리소스는 아티스트, 앨범, 노래, 재생 목록 등과 같은 Apple Music 콘텐츠를 모델링합니다.

각각은 그에 상응하는 유형을 가지고 있다.

리소스는 검색과 같은 검색 기능을 통해 또는 식별자를 사용하여 Apple Music API 엔드포인트에서 가져올 수 있습니다.

다음은 식별자를 사용하여 API에서 재생 목록 리소스를 가져오기 위한 요청 URL의 예입니다.

Apple Music API는 api.music.apple.com에서 호스팅됩니다.

URL의 경로는 RESTful 패턴을 사용하며 자원이나 기능의 위치를 나타냅니다.

그 위치의 첫 번째 요소는 현재 버전 1인 API 버전이다.

중요한 변경 사항이 도입되면 새로운 버전을 사용할 수 있습니다.

버전은 리소스와 새로운 기능을 개선할 수 있음에도 불구하고 기존 호출과의 이전 버전과의 호환성을 유지합니다.

Apple Music 카탈로그 내의 요청의 경우, 위치의 다음 섹션은 가져올 특정 카탈로그를 나타냅니다.

Apple Music은 전 세계 스트리밍 서비스이며, 콘텐츠는 우리가 상점이라고 부르는 지역마다 다를 수 있습니다.

상점과 콘텐츠 가용성에 대한 정보는 "Apple Music API를 사용한 교차 참조 콘텐츠"라는 제목의 세션을 시청하세요.

이 예에서, 저는 두 글자의 국가 코드 "우리"로 표시된 미국 매장의 카탈로그에서 재생 목록을 가져올 것입니다. 이 위치의 마지막 부분은 자원의 정체성이며, "플레이리스트" 유형과 식별자로 표시됩니다.

Apple Music은 많은 지역에서 사용할 수 있기 때문에, 선택적 언어 태그 쿼리 매개 변수 "L"을 사용하여 현지화를 지원할 수 있습니다.

여기서, 저는 영어의 언어 태그 "en-US"를 지정하고 있습니다.

스페인어로 현지화된 콘텐츠를 가져오려면, "es-MX" 태그를 지정할 수 있습니다. 간단하게 유지하기 위해, 나는 이 예제에서 언어 태그를 지정하지 않을 것이며, 이는 상점의 기본 현지화를 초래한다.

Apple Music을 사용할 수 있는 상점과 지원되는 현지화는 상점 참조 엔드포인트에 액세스하여 찾을 수 있습니다.

자세한 내용은 Apple Music API 문서에서 확인할 수 있습니다.

재생 목록에 대한 GET 요청을 하는 것을 살펴보겠습니다.

이것은 재생 목록 리소스를 포함하는 "데이터" 배열이 있는 리소스 수집 응답을 반환합니다.

리소스 객체는 ID 값과 유형으로 콘텐츠의 신원을 나타냅니다.

ID와 유형의 조합은 자원의 고유한 정체성을 나타낸다.

Href 값은 자원을 가져올 수 있는 API의 위치를 나타냅니다.

이 경우, 위치는 우리가 요청한 경로와 동일하다는 점에 유의하십시오.

콘텐츠의 메타데이터 값은 자원의 속성 맵에서 찾을 수 있습니다.

이 재생 목록 큐레이터와 트랙과 같은 다른 리소스에 대한 직접적인 연결은 관계 맵에서 찾을 수 있습니다.

재생 목록의 메타데이터 값이 포함된 속성 맵을 자세히 살펴보겠습니다.

재생 목록의 이름, 큐레이터 이름 및 설명 속성을 사용하는 오른쪽 위젯에서 이러한 속성 중 일부를 사용하는 예를 살펴보겠습니다.

playParams는 구독자가 콘텐츠를 스트리밍할 수 있는 시기를 나타내는 많은 리소스 유형의 공통 속성입니다.

이것은 playParams가 없는 콘텐츠를 재생할 수 없기 때문에 재생 제어를 활성화해야 하는지 결정하는 데 사용할 수 있습니다.

아트워크는 이미지를 로드할 수 있는 URL과 함께 이미지의 최대 너비와 높이 값을 포함하는 많은 리소스 유형의 또 다른 일반적인 속성입니다.

Apple에서 개발자 피드백은 매우 중요하며 모두를 위한 API와 서비스를 개선하는 데 도움이 됩니다.

올해, 우리는 가장 많이 요청된 기능 중 하나의 추가를 발표하게 되어 기쁩니다.

아티스트 아트워크는 이제 Apple Music API에서 사용할 수 있으며, 평범한 실루엣을 과거의 것으로 만든다.

모든 신규 및 기존 앱은 아티스트 리소스에 추가된 아트워크 속성을 찾아 이러한 이미지에 대한 지원을 추가할 수 있습니다.

아티스트 아트워크는 다른 콘텐츠 유형의 아트워크와 같은 방식으로 로드할 수 있습니다.

다음은 우리가 이전에 보고 있던 재생 목록의 삽화 URL의 축약된 예입니다.

아트워크 URL에는 파란색으로 강조 표시된 "w", 너비 및 "h", 높이 토큰이 포함되어 있습니다.

이 URL을 사용하여 아트워크를 로드하려면, 이 토큰을 디스플레이에 원하는 해상도로 바꾸세요.

재생 목록 삽화는 정사각형이기 때문에, 나는 너비와 높이 모두에 대해 동일한 해상도를 사용할 것이다.

다음은 400 x 400, 300 x 300, 200 x 200의 결의안을 요청하는 예입니다.

각 해상도에서 표시하기 위한 이미지 스케일과 더 작은 이미지의 경우 파일 크기가 줄어듭니다.

모든 리소스 유형에는 해당 리소스의 공통 또는 기본 메타데이터를 나타내는 기본 속성 세트가 있습니다.

일부 리소스에는 "확장된 속성"으로 알려진 가져올 수 있는 추가 속성이 있습니다.

이러한 확장 속성은 확장 쿼리 매개 변수를 사용하여 요청할 수 있습니다.

예를 들어, Apple Music 재생 목록의 트랙은 노래나 뮤직 비디오이다.

재생 목록에 포함된 트랙의 유형을 알고 싶다면, trackTypes 확장 속성을 요청할 수 있습니다.

확장된 속성은 기본 속성과 함께 리소스의 속성 맵에 나타납니다.

재생 목록의 트랙이 노래가 아닌 뮤직 비디오인 경우, 재생 버튼을 사용자 정의하여 시청자에게 알릴 수 있습니다.

지금 관계 지도를 보면 이 재생 목록에서 다른 자원으로의 몇 가지 직접적인 연결을 보여줍니다.

많은 리소스에는 일부 콘텐츠를 직접 요청할 때 반환되는 자동 관계가 있습니다.

재생 목록의 자동 관계는 큐레이터와 트랙이다.

관계는 이 재생 목록의 큐레이터와 같이 연결이 무엇인지 나타내기 위해 명명되었다.

그들은 관계를 직접 가져올 수 있는 href 위치와 관련 리소스 수집을 위한 데이터 배열을 가지고 있다.

재생 목록의 경우, 큐레이터 관계는 자동으로 관련되며, 이는 관련 자원의 정체성만 존재한다는 것을 의미합니다.

이를 통해 ID 또는 href를 사용하여 이 리소스에 쉽게 연결할 수 있습니다.

재생 목록에는 이미 큐레이터의 이름이 속성으로 포함되어 있기 때문에, 관련 큐레이터 리소스에 다른 메타데이터를 포함할 필요가 없을 수도 있습니다.

자원의 신원은 큐레이터 이름을 링크로 만드는 데 사용될 수 있으며, 사람들이 원한다면 큐레이터로 이동하여 추가 콘텐츠를 발견할 수 있도록 합니다.

아트워크와 같은 재생 목록과 함께 큐레이터에 대한 추가 정보를 표시하려면, 큐레이터의 메타데이터를 가져와야 합니다.

포함 매개 변수를 사용하여 관련 리소스 메타데이터를 원하는 관계를 지정하십시오.

일부 리소스 유형에는 이 매개 변수로 요청할 수 있는 기본적으로 포함되지 않은 추가 관계가 있습니다.

관계를 포함하면 응답의 크기가 증가하고 앱의 속도에 부정적인 영향을 미칠 수 있습니다.

관련 자원에서 원할 수 있는 많은 유용한 값은 원래 자원의 속성으로 직접 찾을 수 있습니다.

최상의 성능을 위해, 응답에 필요한 관계와 메타데이터만 포함하는 것이 좋습니다.

리소스 유형과 사용 가능한 속성 및 관계에 대한 자세한 정보는 Apple Music API 문서에서 찾을 수 있습니다.

확장된 속성, 관계 및 뷰라고 불리는 특별한 관계에 대한 자세한 내용은 "Apple Music API로 카탈로그를 탐색하세요" 세션을 시청하세요. 예제 재생 목록의 관계를 재검토하면 재생 목록의 트랙이 자동으로 포함되며, 이는 관련 트랙 리소스의 속성 메타데이터가 응답에 나타난다는 것을 의미합니다.

관련 트랙의 속성은 오른쪽 위젯에 표시된 아트워크 및 기타 메타데이터를 사용하여 재생 목록의 트랙 목록을 표시하는 데 사용할 수 있습니다.

이전 섹션에서, 나는 카탈로그에서 트랙과 함께 재생 목록 리소스를 가져오는 예를 보여주었다.

이 섹션에서는 많은 자원과의 관계를 처리하는 방법을 설명하겠습니다.

관계에 대한 관련 자원은 데이터 배열에 나타난다.

관련 자원의 수가 적을 때, 모든 자원은 하나의 응답으로 나타날 것이다.

단일 응답에 나타나는 것보다 더 많은 관련 자원과의 관계는 페이지라고 불리는 여러 부분에서 가져와야 합니다.

나는 예를 들어 큰 재생 목록에 트랙 관계를 사용할 것이다.

기본적으로 재생 목록의 처음 100개 트랙만 포함됩니다.

재생 목록에 100개 이상의 트랙이 있는 경우, 추가 트랙은 후속 페이지에서 가져와야 합니다.

다음은 100개 이상의 트랙이 있는 재생 목록에 대한 예시 응답입니다.

트랙 관계에 대한 href 및 자원 수집 데이터는 이전에 본 것처럼 응답에 나타납니다.

이 재생 목록에는 응답에 포함된 것보다 더 많은 트랙이 있기 때문에, 다음 위치는 데이터의 형제로 나타납니다.

다음 위치는 컬렉션의 나머지 자원을 가져올 수 있는 곳을 나타낸다.

다음 위치를 가져오면 직접 관계를 가져오고 제공된 오프셋에서 시작하여 관계의 자원 수집 데이터를 반환합니다.

관계의 기본 한도는 각 페이지에 적용될 것이다.

제한 매개 변수를 제공하여 자신만의 페이지 크기를 선택할 수 있습니다.

페이지 크기 제한은 문서에서 찾을 수 있는 특정 관계의 최대 페이지 크기와 하나 사이일 수 있습니다.

관계에 대한 리소스 컬렉션에 페이지에 반환된 리소스를 초과하는 추가 리소스가 포함된 경우, 다음 위치는 데이터에 대한 형제로 계속 나타날 것입니다.

자원 수집이 소진되면, 다음 위치는 존재하지 않을 것이다.

다음 위치는 요청에 대해 선택한 페이지 크기를 반영하지 않는다는 점에 유의하십시오.

기본값과 다른 페이지 크기를 사용하려면 각 요청에 제한 매개 변수를 제공해야 합니다.

항상 리소스 컬렉션에 대한 응답에서 다음 위치를 사용하세요.

자신의 오프셋을 계산하려고 하면 잘못된 위치나 중복 결과에 문제가 발생할 수 있습니다.

다음 섹션에서는 Apple Music API를 사용하여 Apple Music 카탈로그에서 fof 콘텐츠를 검색하는 방법을 보여드리겠습니다.

Apple Music API는 검색어를 사용하여 카탈로그에서 콘텐츠를 찾을 수 있는 기능을 제공합니다.

검색 요청은 /search를 위치로 하고 검색어를 매개 변수로 하는 카탈로그 리소스 요청과 유사합니다.

유형 매개 변수와 제한을 사용하여 각 유형에 포함할 최대 결과 수로 관심 있는 콘텐츠 유형을 지정할 수 있습니다.

요청된 한도를 초과하여 더 많은 결과가 발견되면, 페이지 매김을 사용하여 검색을 계속할 수 있습니다.

다음은 "팝"이라는 용어로 앨범과 노래를 검색한 것에 대한 반응입니다.

검색 엔드포인트는 일치하는 콘텐츠와 함께 요청된 각 유형에 대한 그룹을 포함하는 결과 객체와 함께 응답을 반환합니다.

이 요청을 위해, 앨범과 노래에 대한 일치 항목이 발견되었다.

응답은 또한 관련성에 기반한 결과 그룹에 대한 권장 순서를 포함하는 메타 객체를 포함한다.

이것은 한 번에 여러 콘텐츠 유형을 처리하는 검색 경험을 구축하는 경우 도움이 될 수 있습니다.

각 결과 그룹에는 결과가 가져온 href와 검색어에 대한 관련 유형의 일치하는 리소스를 포함하는 리소스 수집 데이터 배열이 있습니다.

결과 그룹에 대한 더 많은 일치를 사용할 수 있는 경우, 그룹에는 추가 일치를 가져올 수 있는 다음 위치가 포함됩니다.

다음 위치를 요청하면 오프셋에서 시작하여 선택한 유형에 대해 더 많은 결과를 반환합니다.

마지막 섹션에서, 나는 Apple Music API에서 개인화된 기능에 접근하는 것에 대해 논의할 것이다.

Apple Music API와 MusicKit은 특정 사용자에게 개인화된 기능에 대한 액세스를 제공합니다.

이러한 기능을 사용하면 구독자가 즐기는 콘텐츠를 추가하고 새로운 재생 목록을 만들 수 있는 기능을 포함하여 Apple Music 라이브러리에서 콘텐츠를 보고 검색할 수 있는 지원을 추가할 수 있습니다.

개인화된 추천은 개별 음악 취향에 따라 표면화될 수 있다.

그리고 당신은 사람들이 최근에 듣고 있는 음악을 재발견하여 중단한 곳에서 다시 시도하거나 완전히 새로운 경험을 제공하도록 할 수 있습니다.

Apple Music에 활성 구독이 있는 사람들은 개인화된 기능을 사용할 수 있습니다.

이러한 기능을 지원하려면, 먼저 MusicKit을 사용하여 앱으로 사람을 인증하고 음악 데이터에 액세스할 수 있는 권한을 요청해야 합니다.

권한이 부여되면, 음악 사용자 토큰을 사용할 수 있습니다.

이 토큰은 음악 사용자 토큰 헤더의 Apple Music API 요청에 추가되며 개인화된 데이터에 대한 액세스를 인증하는 데 사용됩니다.

음악 사용자 토큰은 앱과 사용자가 인증한 장치에만 해당됩니다.

한 번에 단일 장치에 대한 권한이 부여되기 때문에 이 토큰은 장치 간에 공유되어서는 안 됩니다.

토큰은 사람의 구독 또는 비밀번호 변경 또는 앱에 대한 액세스 취소에 따라 유효하지 않을 수 있습니다.

그것은 또한 시간이 지남에 따라 만료될 수 있다.

다시 로그인하고 앱에 대한 권한을 부여하라는 메시지를 표시하여 인증을 새로 고칠 수 있습니다.

이 토큰은 Apple 플랫폼의 MusicKit과 웹의 MusicKit에 의해 자동으로 관리됩니다.

자세한 내용은 사용 중인 프레임워크에 대한 문서를 참조하십시오.

오늘 세션에서는 MusicKit 및 Apple Music API를 사용하여 Apple Music을 앱에 통합하는 방법, MusicKit 클라이언트 프레임워크를 지원하는 플랫폼을 빠르게 살펴보고, Apple Music API를 사용하여 카탈로그의 콘텐츠에 액세스하고 찾는 방법, 구독자가 사용할 수 있는 몇 가지 개인화된 기능을 보여주었습니다.

Apple 플랫폼에서 MusicKit에 대한 올해의 업데이트에 대한 자세한 내용은 "MusicKit으로 더 많은 콘텐츠를 탐색하세요" 세션을 확인하세요. 시청해 주셔서 감사드리며, 올해 남은 WWDC를 즐기시기 바랍니다.

.