110348

- "스위프트 플레이그라운드에서 첫 번째 앱을 만드세요"에 오신 것을 환영합니다.

저는 Swift Playgrounds 팀의 엔지니어인 Collett Charlton입니다.

- 그리고 저는 스위프트 플레이그라운드 팀의 또 다른 엔지니어인 코너 와카모입니다.

- 스위프트 플레이그라운드는 스위프트에서 코딩을 배우기 위한 훌륭한 도구였으며, 이제 한 걸음 더 나아가 앱을 만들 수 있습니다!

오늘, 우리는 빈 템플릿부터 시작하여 Swift Playgrounds에서 앱을 구축하는 과정을 진행할 것입니다.

그런 다음 미리보기와 콘솔을 사용하여 문제를 디버깅하는 방법을 보여주고, 마지막으로 앱을 TestFlight에 제출할 것입니다.

우리 팀이 정말 좋아하는 것은 차를 만들고 마시는 것이다.

우리는 그것을 너무 좋아해서 그것을 위한 앱을 만들고 싶다.

코너와 나는 티타임에 우리를 돕기 위해 작은 앱을 만들 거야, 우리가 매일 마실 것을 고르는 데 도움이 되는 차 목록을 줄 거야.

스위프트 플레이그라운드는 Mac과 iPad에서 잘 작동합니다.

나는 오늘 내 맥을 가지고 있어서, 거기서 이 앱을 만들기 시작할 거야.

코딩을 처음 접하든 경험이 풍부한 개발자이든, Swift Playgrounds는 시작할 수 있도록 다양한 템플릿과 교육 콘텐츠를 제공합니다.

차 앱의 경우, 화면 왼쪽 하단 모서리에 있는 빈 앱 템플릿을 클릭하여 시작하겠습니다.

이제 템플릿이 있으니, 두 번 클릭하여 열자.

좋아. 오른쪽에는 Hello World 텍스트를 보여주는 라이브 인터랙티브 미리보기가 있습니다.

코딩을 시작하기 전에, 앱 설정을 사용하여 앱을 약간 사용자 정의해 봅시다.

이렇게 하려면, 사이드바의 왼쪽 상단 모서리에 있는 앱 설정 버튼을 클릭하겠습니다.

여기서 앱 이름과 악센트 색상과 같은 다양한 프로젝트 속성을 사용자 정의할 수 있습니다.

사용자 지정 또는 자리 표시자 앱 아이콘, 기능 또는 목적 문자열과 번들 ID를 추가할 수도 있습니다.

앱 이름을 티타임으로 업데이트하겠습니다.

악센트 색을 갈색으로 설정할게.

그리고 나는 자리 표시자 아이콘을 머그잔으로 업데이트할 것이다.

좋아. 이제 중요한 부분이 없어졌으니, 템플릿 텍스트를 선택하고 라이브러리의 첫 번째 보기로 대체하여 코드를 작성하기 시작합시다.

라이브러리는 프로젝트 도구 모음에서 더하기 버튼을 클릭하여 액세스할 수 있습니다.

여기에는 다양한 보기, 수정자, SF 기호 및 색상의 사용하기 쉬운 스니펫이 포함되어 있습니다.

우리는 목록 보기를 사용하여 차 목록을 표시할 것이므로, 검색 필드에 목록을 입력하고 클릭하여 하나를 삽입할 것입니다.

이제 목록 보기가 있으니, 차 아이템을 몇 개 추가해 봅시다.

나는 텍스트를 타이핑하기 시작할 거야...

그리고 반환 키를 사용하여 인라인 코드 완성 패널에서 코드 완성 제안을 수락하고 삽입하십시오.

좋아요, 이제 차 한 잔이 추가된 목록 보기가 있습니다.

좀 더 추가하자.

잠깐, 내가 실수로 재스민 그린을 두 번 추가한 것 같아.

차가 중복되는 것을 피하기 위해, 우리는 그것들을 주문 세트로 보관해야 한다.

운 좋게도, 애플의 신속한 수집 패키지는 바로 그것을 제공한다.

그래서, 우리 프로젝트에 신속한 수집 패키지를 추가합시다.

이렇게 하려면, 파일 메뉴를 열고 패키지 추가를 선택합시다.

Swift-collections 패키지의 URL을 입력한 다음 return 키를 누르는 것으로 시작하겠습니다.

패키지를 가져온 후, 우리는 패키지 버전과 프로젝트에 추가할 수 있는 다른 제품을 볼 수 있습니다.

이 앱의 경우, 컬렉션만 선택한 다음 프로젝트에 추가를 클릭하세요.

이제 우리는 패키지 아래의 사이드바에서 프로젝트에 신속한 컬렉션을 추가했습니다.

차 목록을 저장하기 위해 OrderedSet of String을 만들어 봅시다.

기다려. 우리에게 문제가 있는 것 같아.

문제 아이콘을 클릭하여 살펴봅시다.

"범위에서 정렬된 유형을 찾을 수 없습니다."

오, 뭐가 문제인지 알겠어.

우리 프로젝트에서 컬렉션 모듈을 가져오는 걸 깜빡했어.

그것을 가져오자, 그리고 그 문제는 해결되어야 한다.

이제 그 문제를 해결했으니, 방금 만든 컬렉션을 사용하기 위해 목록 보기를 업데이트합시다.

이것을 하기 위해, 우리는 ForEach View를 사용할 것이다.

좋아, 거기 있어-- 우리 차 컬렉션에서 전시되고 있는 차 목록이야.

이 프로젝트를 진행하면서, 추가할 기능에 대한 아이디어가 점점 더 많아지고 있다.

우리 앱이 휘파람 부는 차 주전자를 듣고 언제 쏟아야 하는지 알려줄 수 있다면 정말 멋질 거야.

나는 지금 이것을 구현하지 않을 것이지만, 왜 우리 앱이 마이크를 사용해야 하는지 사용자에게 설명하기 위해 취할 단계를 살펴봅시다.

이것을 추가하려면, 앱 설정으로 돌아가자...

그리고 기능을 클릭하세요.

오른쪽 상단 모서리에 있는 더하기 버튼을 사용하면 프로젝트에 추가할 수 있는 기능 목록을 얻을 수 있습니다.

마이크를 찾아서 클릭하여 추가합시다.

목적 문자열을 위해, 우리는 다음과 같이 쓸 것이다: "티 타임은 마이크를 사용하여 휘파람을 부는 차 주전자를 듣는다."

추가를 클릭한 다음, 앱 설정을 닫겠습니다.

좋아, 우리는 오늘 많은 것을 했고, 나는 그 프로젝트와 내가 코너와 가진 멋진 아이디어를 공유하게 되어 신나.

공유된 iCloud 폴더에 추가하여 코너와 공유할 것입니다.

하지만 먼저, 내 앱보다 더 나은 파일 이름을 지정해 봅시다.

이제, 공유된 iCloud 폴더로 드래그하겠습니다.

이제 끝났으니, 앱을 끝내기 위해 코너에게 넘겨줄 거야.

고마워 콜렛. 나는 아이패드로 물건을 가지러 갈 거야.

iCloud 공유 폴더를 통해 프로젝트를 공유하고 있기 때문에, 주요 프로젝트 목록에 표시되지 않습니다.

하지만 "위치"를 탭하면 iCloud의 다른 곳이나 타사 문서 제공 업체에서 프로젝트에 액세스할 수 있습니다.

저는 이미 공유 폴더에 있으므로, Tea Time을 탭하여 프로젝트를 열겠습니다.

내가 만든 모든 변경 사항은 공유 프로젝트에 자동으로 반영될 것이다.

콜렛은 프로젝트를 iCloud에 업로드하는 것만으로도 몇 가지 추가 기능을 추가한 훌륭한 엔지니어인 것 같습니다!

그녀는 여기에 TabView를 구현했기 때문에 우리는 차 목록뿐만 아니라 조수도 가지고 있다.

어시스턴트 탭을 탭하면, 약간 맨 뼈이지만, 그 일을 한다.

나는 추천을 요청할 수 있고, 그것은 내가 마셔야 할 차를 줄 것이다.

오늘은 재스민 그린을 먹어야 할 것 같아.

이제 나는 콜렛이 여기에 약간의 여분의 피자를 주기 위해 차를 고르는 재미있는 새로운 방법을 연구하고 있다는 것을 안다.

사이드바를 열어서 찾아보자.

TeaWheelView는 유망해 보이므로, 그것을 탭하여 열자.

우리는 데이터 수집을 취하는 뷰를 가지고 있다.

메인 앱의 일부가 되기 전에 TeaWheelView를 시도해 볼 수 있도록 뷰 미리보기를 추가합시다.

파일 하단으로 스크롤할게...

그리고 나는 "미리보기 제공자"를 입력하기 시작할 것이다.

Return 키를 눌러 코드 완성 제안을 수락하고, 이름을 TeaWheelView_Previews로 지을 것입니다.

페이지 점은 이제 미리보기 영역 하단에 나타났는데, 이는 Swift Playgrounds가 내 미리보기 공급자를 인식한다는 것을 알려줍니다.

앱 미리보기 아래의 오른쪽 쉐브론을 탭하면... 앱 미리보기 대신 보기 미리보기를 사용할 수 있습니다.

지금 당장은 그냥 "안녕, 세상에!"라고 쓰여 있어.

그래서 TeaWheelView를 만들기 위해 코드를 추가해 봅시다.

먼저 내 미리보기에서 사용할 수 있도록 몇 가지 항목이 있는 배열을 정적 속성으로 추가할 것입니다.

두 대괄호 사이에 삽입 지점을 두고 닫는 괄호를 드래그하여 몇 가지 항목에 대한 자리 표시자를 만들 것입니다.

다음으로, 나는 자리 표시자를 우리의 아이템으로 사용할 몇 개의 문자열로 교체할 것이다.

이제 몇 가지 항목이 있으니, TeaWheelView를 추가해 봅시다.

내가 안녕, 세상을 선택할게! 예를 들어 내 아이템을 표시하는 TeaWheelView로 바꾸세요.

나는 또한 약간의 패딩을 추가할 것이다.

좋아! 이제 우리의 뷰 프리뷰는 바퀴를 보여주고 있으며, 얼마나 아름다운 바퀴인가!

나는 그것을 돌릴 수 있고, 그것이 착륙하는 곳에 따라 다른 아이템을 고를 것이다.

보조 탭으로 돌아가서 이 바퀴를 추가합시다.

사이드바를 사용하여 AssistantTab Swift 파일을 열고, 버튼을 삭제하고 대신 TeaWheelView로 바꿀 것입니다.

TeaWheelView는 선택적으로 바퀴가 회전을 멈출 때 호출되는 액션 클로저를 취합니다.

마지막으로 고른 차를 선택한 차에 설정하는 데 사용할 것이며, SwiftUI가 경고를 표시할 수 있도록 show pick alert를 true로 설정할 것입니다.

그래, 좋아! 우리는 여기에 바퀴가 있어, 그러니 이제 시도해 보자!

나는 그것을 돌리기 위해 스와이프할 거야... 그리고 그것은 나에게 Byte의 Oolong을 마시라고 말했어.

내가 다시 스와이프할게...

그리고 그것은 여전히 바이트의 우롱이다.

한 번 더.

흠. 뭔가 잘못된 것 같아.

비록 그것이 바퀴의 다른 장소에 착륙하고 있지만, 그것은 항상 나에게 바이트의 우롱을 마시라고 말하고 있다.

그것은 좋은 차이지만, 나는 약간의 다양성을 원해.

휠 뷰로 돌아가서 무슨 일인지 알아봅시다.

바퀴가 회전하고 다른 지점에 착륙하기 때문에, 무엇이 잘못되고 있는지는 분명하지 않다.

미리보기가 깨졌는지 확인하기 위해 보기 미리보기에 인쇄 문구를 추가해 봅시다.

이제 내가 바퀴를 돌릴 때...

소스 편집기의 왼쪽 하단에 콘솔 메시지가 나타납니다.

항목 하나...

항목 하나... 항목 하나.

아하! 각 스핀은 우리에게 항목 하나를 제공하며, 이는 무언가가 제대로 연결되어 있지 않다는 것을 시사한다!

매번 나에게 첫 번째 것을 주기 때문에, 나는 프로젝트 전체 검색을 사용하여 먼저 검색할 것이다.

화면 왼쪽의 사이드바 상단에 있는 검색 필드를 탭한 다음 "먼저"를 입력하고 Return을 누르겠습니다.

그 결과는 유망해 보이기 때문에, 나는 그것을 탭할 것이다.

아, 콜렛이 여기에 올바른 결과 대신 매번 첫 번째 항목을 반환하는 디버깅 코드를 남긴 것 같습니다.

그걸 정말 빨리 고치고 나서 한 번 더 돌리자.

항목 2...

항목 네.

좋아! 지금 작동하는 것 같아.

미리보기 아래의 왼쪽 쉐브론을 탭하여 앱 미리보기로 다시 전환하면 실제 앱에서 시도해 볼 수 있습니다.

나는 바퀴를 돌릴 거야, 그리고 그것은 나에게 영국식 아침을 먹으라고 말하고 있어.

그래서 이제 우리는 일하는 조수가 있어.

멋져! 앱이 모든 크기에서 잘 작동하는지 확인하기 위해, 화면 왼쪽 상단의 실행 버튼을 눌러 자체 창에서 실행할 수 있습니다.

그래, 모든 게 여기 있는 것 같아.

나는 내 차 목록을 가지고 있고, 여기에 바퀴와 모든 것을 가진 조수가 있다.

상태 표시줄의 작은 스위프트 아이콘을 탭한 다음 팝업 시트에서 "프로젝트 표시" 버튼을 선택하여 스위프트 플레이그라운드에서 프로젝트로 돌아갈 수 있습니다.

저는 이 앱을 직접 그리고 친구 및 가족과 함께 테스트할 준비가 되었습니다.

Swift Playgrounds를 사용하면 Swift Playgrounds 내에서 TestFlight에 직접 제출할 수 있기 때문에 쉽게 테스트할 수 있습니다!

앱 설정 시트를 가져오고 하단으로 스크롤하면, "App Store Connect에 업로드" 버튼이 있습니다.

내가 그것을 탭하면, Swift Playgrounds는 앱 레코드를 만들고 내 앱을 App Store Connect에 업로드하는 모든 노력을 수행하여 TestFlight와 결국 App Store에 배포할 수 있습니다.

이제 내 앱이 업로드 되었으니, App Store Connect로 가서 베타 앱 검토를 위해 제출할 수 있습니다.

조금 기다린 후, 우리는 TestFlight 앱으로 가서 iPhone에서도 설치할 수 있습니다!

티타임을 설치하려면 "설치"를 탭하겠습니다.

이제 설치되었으니, "열기"를 눌러서 열겠습니다.

나는 테스트 노트와 피드백을 제공하는 방법에 대한 지침을 탭할 것이다.

그리고 여기 있습니다-- 우리 앱은 iPhone에서 실행되고 있습니다.

오늘 어떤 차를 마셔야 하나요?

내가 Matt P의 티 파티를 하는 것 같아.

오늘, 콜렛과 저는 Mac과 iPad에서 Swift Playgrounds를 사용하여 앱을 만드는 방법을 보여주었습니다.

우리는 라이브러리와 코드 완성을 사용하여 새 코드를 삽입하는 것을 시연했고, iCloud 공유 폴더를 통해 프로젝트를 공유했으며, 보기 미리보기와 콘솔을 사용하여 코드 문제를 디버깅했습니다.

우리는 심지어 iPad에서 바로 TestFlight에 앱을 제출했습니다!

당신이 그 과정에서 한두 가지를 배웠기를 바라며, 우리는 당신이 Swift Playgrounds로 무엇을 만드는지 빨리 보고 싶습니다.

시청해 주셔서 감사합니다, 그리고 남은 WWDC를 즐기세요!