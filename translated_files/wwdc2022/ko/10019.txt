10019

♪ 기악 힙합 음악 ♪

♪

안녕하세요, 저는 알레한드로입니다.

저는 CreateML 팀의 엔지니어입니다.

오늘 저는 구성 요소를 사용하여 기계 학습 모델을 구축하기 위한 새로운 API에 대해 이야기할 것입니다.

Create ML은 기계 학습 모델 교육을 위한 간단한 API를 제공합니다.

그것은 이미지 분류, 사운드 분류 등 지원되는 일련의 작업을 기반으로 합니다.

WWDC 2021에서, 우리는 Create ML 프레임워크에 대한 두 가지 훌륭한 강연을 발표했다.

아직 확인하지 않았다면 꼭 확인해 보세요.

하지만 나는 미리 정의된 작업을 넘어서는 것에 대해 이야기하고 싶다.

Create ML이 제공하는 것 이상으로 특정 문제에 맞게 작업을 사용자 정의하고 싶다면 어떨까요?

아니면 다른 유형의 작업을 만들고 싶다면 어떨까요?

구성 요소를 사용하여, 이제 새롭고 창의적인 방식으로 작업을 구성할 수 있습니다.

파고들자.

나는 ML 작업을 나누고 각 구성 요소가 무엇을 하는지 설명하는 것으로 시작할 것이다.

그런 다음, 구성 요소를 어떻게 조립할 수 있는지에 대해 이야기하겠습니다.

사용자 지정 이미지 작업의 예를 따랐다.

그럼, 나는 표 작업들에 대해 이야기할 거야.

그리고 나는 배치 전략으로 끝낼 것이다.

무엇이 들어가고 어떻게 작동하는지 이해할 수 있도록 기계 학습 작업의 내부를 탐구하는 것으로 시작하겠습니다.

이렇게 하면, 우리가 맞춤 작업을 만들기 시작할 때, 내가 무슨 말을 하는지 알잖아.

나는 이미지 분류기를 예로 사용할 것이다.

이미지 분류기는 라벨이 지정된 이미지 목록을 사용하여 모델을 훈련시킨다.

이 예에서, 나는 각각의 라벨이 있는 고양이와 개의 이미지를 가지고 있다.

하지만 각 단계에서 이미지가 어떻게 변형되는지 살펴봅시다.

그렇게 하기 위해, 나는 이미지 분류 작업을 확장하여 안에 무엇이 있는지 볼 것이다.

개념적으로, 이미지 분류기는 매우 간단하다.

그것은 특징 추출기와 분류기로 구성되어 있다.

하지만 중요한 부분은 Create ML 구성 요소를 사용하면 이러한 구성 요소에 독립적으로 액세스할 수 있다는 것입니다.

새로운 작업을 구성하기 위해 구성 요소를 추가, 제거 또는 전환할 수 있습니다.

나는 부품을 상자로 나타낼 것이다.

화살표는 데이터의 흐름을 나타낸다.

이미지 분류기의 첫 번째 단계를 확대해 봅시다: 기능 추출.

일반적으로, 특징 추출기는 흥미로운 부분인 특징만 유지함으로써 입력의 차원을 줄인다.

이미지의 경우, 특징 추출기는 이미지에서 패턴을 찾는다.

Create ML은 Vision Framework에서 제공하는 우수한 이미지 기능 추출기인 Vision Feature Print를 사용합니다.

이제, 두 번째 작품에 대해 이야기해 봅시다: 분류기.

분류기는 분류를 배우기 위해 일련의 예시를 사용한다.

몇 가지 일반적인 구현은 로지스틱 회귀, 부스트 트리 및 신경망이다.

따라서 이미지 분류기 훈련은 주석이 달린 이미지로 시작하고, 주석이 달린 기능으로 가고, 분류기로 끝납니다.

하지만 우리는 왜 그것을 조각으로 나누고 싶어 하나요?

그 이유는 우리가 가능성을 확장하고 싶기 때문이다.

대비를 늘려서 전처리를 하고 싶을 수도 있습니다.

또는 기능을 추출하기 전에 균일한 밝기를 갖도록 모든 이미지를 정상화하고 싶을 수도 있습니다.

아니면 다른 기능 추출기를 시도해 보고 싶을 수도 있습니다.

아니면 다른 분류기를 시도해 보고 싶을 수도 있습니다.

가능성은 끝이 없다.

이것들은 단지 몇 가지 옵션일 뿐이다.

그것이 우리가 macOS, iOS, iPadOS 및 tvOS에서 ML 구성 요소에 대한 지원을 추가한 이유입니다.

우리의 희망은 우리가 제공하는 구성 요소 중 일부와 함께 자체 구성 요소 또는 지역 사회의 다른 사람들이 만든 구성 요소를 사용하여 새로운 모델을 구성할 수 있기를 바랍니다.

그리고 당신은 우리의 모든 플랫폼에서 그것을 활용할 수 있습니다.

다음은 Create ML 구성 요소에 내장된 몇 가지 구성 요소입니다.

하지만 한 걸음 물러서서 몇 가지 개념을 소개하겠습니다.

두 가지 유형의 구성 요소가 있다: 변압기와 추정기.

변압기는 단순히 약간의 변형을 수행할 수 있는 유형이다.

그것은 입력 유형과 출력 유형을 정의한다.

예를 들어, 이미지 기능 추출기는 입력 이미지를 가져와 모양의 기능 배열을 생성합니다.

반면에, 추정자는 데이터로부터 배워야 한다.

그것은 입력 예시를 취하고, 약간의 처리를 하고, 변압기를 생산한다.

우리는 이 과정을 "적합"이라고 부른다.

좋아. 이러한 개념을 벗어나면, Create ML Components를 통해 구성을 사용하여 개별 구성 요소에서 이미지 분류기를 만들 수 있는 방법에 대해 이야기하겠습니다.

이것은 구성 요소를 사용하는 이미지 분류기입니다.

기능 추출기로 ImageFeaturePrint가 있고 분류기로 LogisticRegressionClassifier가 있습니다.

구성 요소가 변압기인지 추정자인지에 관계없이, 당신은 추가 방법을 사용하여 그것들을 결합합니다.

그리고 이것은 구성 요소가 무한한 가능성을 제공하는 곳이다.

간단한 변경으로 로지스틱 회귀 대신 완전히 연결된 신경망을 분류기로 사용할 수 있습니다.

또는 CoreML 모델에서 사용자 지정 기능 추출기를 사용할 수 있습니다.

예를 들어, 모델 갤러리에서 찾을 수 있는 헤드리스 ResNet-50 모델.

두 구성 요소를 구성할 때, 첫 번째 구성 요소의 출력은 두 번째 구성 요소의 입력과 일치해야 합니다.

이미지 분류기의 경우, 기능 추출기의 출력은 CoreML 프레임워크의 모양의 배열입니다.

이는 로지스틱 회귀 분류기의 입력이기도 하다.

추가 방법을 사용할 때 컴파일러 오류가 발생하면, 이것이 가장 먼저 확인해야 합니다.

유형이 일치하는지 확인하세요.

하지만 피팅에 관한 중요한 점을 명확히 하겠습니다.

나는 그 피팅이 추정기에서 변압기로 가는 과정이라고 전에 말했다.

구성된 추정자의 관점에서 이것을 살펴봅시다.

구성된 추정기가 이미지 분류기의 경우와 같이 변압기와 추정기를 모두 가지고 있을 때, 추정기 조각만 장착됩니다.

하지만 변압기는 추정자의 피팅 방법에 올바른 기능을 공급하는 데 사용되기 때문에 프로세스의 중요한 부분입니다.

여기 코드가 있습니다.

이미지 분류기는 특징이 이미지이고 주석이 문자열인 주석이 달린 기능 모음이 필요합니다.

우리는 데모에 들어갈 때 기능을 로드하는 것에 대해 이야기할 것이다.

일단 내가 데이터를 갖게 되면, 나는 맞는 방법을 부를 수 있다.

이것은 훈련된 모델인 변압기를 반환한다.

그리고 피팅할 때 사용되는 유형은 관련이 있지만 결과 변압기의 유형과 다르다는 점에 유의하는 것이 중요합니다.

특히, 피팅된 방법에 사용되는 유형은 항상 컬렉션이다.

그리고 감독된 추정자의 경우, 기능에는 주석이 포함되어야 한다.

Create ML Components는 AnnotatedFeature 유형을 사용하여 주석과 함께 기능을 나타냅니다.

일단 내가 모델을 갖게 되면, 나는 예측을 할 수 있다.

내가 방금 장착한 모델인지, 아니면 디스크에서 매개 변수를 로드하고 있는지는 중요하지 않다.

API는 두 경우 모두 동일합니다.

내가 분류기를 훈련하고 있기 때문에, 그 결과는 분류 분포이다.

분포는 각 라벨에 대한 확률을 포함한다.

이 경우, 저는 이미지에 대한 가장 가능성이 높은 라벨을 인쇄하고 있습니다.

피팅된 방법은 또한 검증 지표를 포함한 훈련 이벤트를 관찰할 수 있는 메커니즘을 제공한다.

이 예에서, 저는 검증 데이터를 전달하고 검증 정확도를 인쇄하고 있습니다.

감독된 추정자만이 검증 지표를 제공한다는 점에 유의하십시오.

모델을 훈련시키면, 나중에 재사용하거나 앱에 배포하기 위해 학습한 매개 변수를 저장할 수 있습니다.

당신은 쓰기 방법을 사용하여 이것을 합니다.

나중에, 당신은 읽기 방법을 사용하여 읽을 수 있습니다.

그리고 그건 구성이야.

여기가 흥미로워지는 곳이야.

Create ML이 지금까지 지원하지 않았던 새로운 작업을 작성하는 것에 대해 이야기하겠습니다.

이미지를 채점하기 위해 모델을 훈련시키고 싶다면 어떨까요?

과일 사진이 있다고 가정해 봅시다, 하지만 과일을 분류하는 대신, 당신은 그것을 평가하고 싶었습니다.

그것이 얼마나 익었는지에 따라 점수를 주세요.

이렇게 하려면, 분류 대신 회귀를 해야 합니다.

그래서 성숙도에 따라 바나나 이미지에 점수를 주는 이미지 리그레이터를 작성하겠습니다.

나는 각 이미지에 1에서 10 사이의 성숙도 값을 줄 것이다.

이미지 회귀자는 이미지 분류기와 매우 유사하다.

유일한 차이점은 우리의 추정자가 분류기 대신 회귀자가 될 것이라는 것이다.

당신이 이미 짐작했듯이, 이것은 쉬울 것입니다.

당신의 기억을 되살리기 위해, 여기 우리의 이미지 분류기가 있습니다.

그리고 이것은 이미지 회귀자이다.

나는 로지스틱 회귀 분류기를 선형 회귀자로 대체했다.

이 간단한 변화는 또한 예상 입력을 맞는 방법으로 바꾼다.

이전에, 그것은 이미지와 라벨을 예상했다.

이제, 그것은 이미지와 점수를 기대한다.

하지만 개념으로는 충분해.

실제 코드로 이것을 시연하겠습니다.

사용자 지정 이미지 리그레시터를 작성하는 방법을 보여드리겠습니다.

코드를 캡슐화하기 위해 ImageRegressor 구조를 정의하는 것으로 시작하겠습니다.

나는 다른 수준의 성숙도의 바나나 이미지가 있는 폴더를 가지고 있다.

나는 그 URL을 정의하는 것으로 시작할 것이다.

다음 단계는 기차 방법을 추가하는 것이다.

이곳은 훈련 데이터를 사용하여 모델을 생성하는 곳입니다.

구성된 추정치에서 단계를 추가하거나 수정할 때 반환 유형이 변경되지 않도록 반환 유형에 "일부" 키워드를 사용할 것입니다.

이제, 나는 추정자를 정의할 것이다.

그것은 단순히 선형 회귀기가 추가된 특징 추출기이다.

그리고 이제, 나는 그들의 점수와 함께 훈련 이미지를 로드해야 한다.

URL과 문자열 레이블이 포함된 AnnotatedFeatures 모음인 AnnotatedFiles를 사용할 수 있습니다.

그것은 내 필요에 맞는 편리한 이니셜라이저를 제공한다.

내 파일은 이름, 대시, 성숙도 값으로 구성되어 있다.

그래서 나는 구분 기호가 대시이고 주석이 인덱스에 있다는 것을 명시할 것이다: 파일 이름 구성 요소의 1.

나는 또한 유형 인수를 사용하여 이미지 파일만 요청할 것이다.

이제 URL이 있으니, 이미지를 로드해야 합니다.

나는 mapFeatures 방법과 ImageReader를 사용하여 이것을 할 수 있다.

나는 또한 점수를 문자열에서 부동 소수점 값으로 변환해야 한다.

나는 이것을 하기 위해 mapAnnotations 방법을 사용할 수 있다.

그리고 그것으로, 나는 훈련 데이터를 가지고 있다.

하지만 나는 검증을 위해 그것의 일부를 제쳐두고 싶다.

나는 이것을 하기 위해 randomSplit 방법을 사용할 수 있다.

나는 훈련을 위해 80퍼센트를 유지하고 나머지는 검증을 위해 사용할 것이다.

이제, 난 맞을 준비가 됐어.

그리고 나는 내 앱에 배포할 수 있도록 훈련된 매개 변수를 저장할 것이다.

내가 저장할 장소를 선택할게.

그리고 내가 쓰기 방법을 부를게.

마지막으로, 내가 변압기를 돌려줄게.

이것은 구성 요소를 사용하여 모델을 정의하고 훈련하는 것의 본질이다.

나는 구성된 추정기를 정의하고, 훈련 데이터를 로드하고, 맞는 방법을 불렀고, 매개 변수를 저장하기 위해 쓰기를 사용했다.

하지만 내가 개선할 수 있는 몇 가지가 있다.

우선, 저는 유효성 검사 데이터 세트를 전달하고 있지만 유효성 검사 오류를 관찰하지 않기 때문에 그렇게 할 것입니다.

맞는 방법은 메트릭을 수집하는 데 사용할 수 있는 이벤트 핸들러를 사용합니다.

지금은 훈련과 유효성 검사 최대 오류 값을 모두 인쇄하겠습니다.

나는 또한 최종 모델의 평균 절대 오차를 원한다.

나는 장착된 변압기를 유효성 검사 기능에 적용한 다음 실제 점수와 함께 meanAbsoluteError 함수에 전달하여 계산한다.

나는 이것을 실행했지만 훌륭한 모델을 얻지 못했다 - 오류가 높았다.

왜냐하면 나는 바나나 이미지가 그렇게 많지 않기 때문이다.

나는 더 많은 이미지를 얻어야 하지만, 그렇게 하기 전에, 나는 내 데이터 세트를 보강해 볼 수 있다.

더 많은 예시를 얻기 위해 이미지를 회전하고 크기를 조정할 수 있습니다.

이것을 하기 위해, 나는 주석이 달린 이미지를 가져와서 보강하는 새로운 방법을 쓸 것이다.

주석이 달린 이미지 배열을 반환합니다.

내가 할 첫 번째 증강은 회전이다.

나는 -pi와 pi 사이의 각도를 무작위로 선택하고 그것을 사용하여 이미지를 회전시킬 것이다.

나도 무작위 척도를 할 거야.

그리고 나는 세 개의 이미지를 반환할 것이다: 원본, 회전된 이미지, 그리고 스케일링된 이미지.

이제 증강 기능이 있으니, flatMap을 사용하여 훈련 이미지를 증강하는 데 사용할 것입니다.

내 데이터 세트의 각 요소는 배열로 변환될 것이다.

FlatMap은 배열 배열을 단일 배열로 평평하게 하는데, 이는 내가 피팅된 방법에 필요한 것이다.

증강은 예측을 할 때가 아니라 적합할 때만 적용된다는 점에 유의하십시오.

그래, 이건 내 정확성을 높인 거야.

하지만 제 모델을 더 좋게 만들 수 있는 개선 사항에 대해 한 가지 더 이야기하겠습니다.

나는 비전 프레임워크를 사용하여 이미지를 두드러진 물체로 자르고 싶다.

이것은 내 훈련 데이터의 이미지 중 하나이다.

누군가가 배경에 다른 과일과 함께 바나나를 들고 있다.

그 모델은 사진의 다른 물체에 의해 혼란스러울 수 있다.

비전 프레임워크 API를 사용하여 이미지를 가장 눈에 띄는 물체로 자동으로 자를 수 있습니다.

이렇게 하려면, WWDC 2019의 비전 토크를 확인하세요.

맞춤 변압기를 작성하면 피팅과 예측을 받을 때 이 변환을 모든 이미지에 쉽게 적용할 수 있습니다.

어떻게 하는지 보여줄게.

변압기 프로토콜을 준수하기 위해 내가 해야 할 유일한 일은 적용된 방법을 구현하는 것이다.

그리고 이 경우, 나는 그것이 이미지를 찍고 이미지를 반환하기를 원한다.

나는 두드러진 물체를 얻지 못하면 원본 이미지를 반환할 것이라고 말하는 것을 제외하고는 이 코드에 들어가지 않을 것이다.

이제 내 커스텀 트랜스포머가 있으니, 나는 그것을 내 이미지 리그레시터에 추가할 것이다.

기능 추출 전에 사용자 지정 변압기를 사용하기만 하면 됩니다.

이제 현저함이 내 작업 정의의 일부이기 때문에, 그것은 모든 훈련 이미지를 자르는 데 사용될 것이며, 추론을 할 때도 사용될 것이다.

이것은 교육과 추론 사이에서 작업 정의를 공유하는 것의 장점 중 하나이다.

다음 작업으로 넘어가기 전에, 몇 가지 중요한 점을 강조하겠습니다.

구성 요소를 사용하여, 이제 사용자 지정 작업을 만들 수 있습니다.

나는 추가 방법을 사용하여 이것을 했다.

주석이 달린 파일 이름으로 파일을 로드하기 위해 AnnotatedFiles를 사용했지만, 디렉토리로 주석이 달린 파일을 로드할 수도 있습니다.

ImageReader를 사용하여 URL을 이미지에 매핑하고 문자열에서 값으로 주석을 매핑했습니다.

나는 검증 데이터 세트를 따로 설정하기 위해 randomSplit을 사용했고, 나중에 사용하기 위해 훈련된 매개 변수를 저장했다.

그런 다음 나는 내 모델을 개선하기 위해 증강을 추가하고 사용자 지정 변압기를 정의했다.

하지만 이것은 단순한 이미지 이상의 것을 위해 작동한다.

나는 기어를 바꾸고 다른 유형의 작업에 대해 이야기할 것이다: 표 작업.

이것들은 표 데이터를 사용하는 작업이다.

표 데이터는 다른 유형의 여러 특징을 갖는 것이 특징이다.

그것은 수치 데이터와 범주형 데이터를 모두 포함할 수 있다.

인기 있는 예는 집 가격 데이터이다.

당신은 지역과 나이와 같은 것들을 가지고 있지만, 이웃, 건물 유형 등과 같은 것들도 있습니다.

그리고 당신은 가치를 예측하는 법을 배우고 싶습니다; 예를 들어, 판매 가격.

2021년에, 우리는 TabularData 프레임워크를 도입했다.

이제 Create ML Components와 함께 TabularData 프레임워크를 사용하여 표 분류기와 회귀자를 구축하고 훈련시킬 수 있습니다.

나는 또한 TabularData에 대한 기술 토크를 추천한다.

표 작업을 작성할 때 필요할 수 있는 데이터 탐색에 대한 훌륭한 소개입니다.

뛰어들자.

표 데이터를 다룰 때, 테이블의 각 열은 다른 유형의 기능을 가질 것이다.

그리고 포함된 정보의 유형, 분포, 값 범위 및 기타 요인에 따라 각 열을 다르게 처리하고 싶을 수도 있습니다.

ML 구성 요소 생성을 사용하면 ColumnSelector를 사용하여 이 작업을 수행할 수 있습니다.

여기 예시가 있어.

나는 집값을 언급했지만, 그건 말도 안 돼.

나는 대신 아보카도 가격을 사용할 거야.

저는 이 아보카도 가격 표가 있습니다.

나는 이것을 바탕으로 아보카도 가격을 예측하기 위해 표형 레그레이터를 만들고 싶다.

가방, 연도 및 부피와 같은 숫자 데이터가 있는 열과 유형 및 지역과 같은 범주형 데이터가 있는 열이 포함되어 있습니다.

일부 퇴행자들은 이러한 가치를 더 잘 표현함으로써 이익을 얻는다.

예를 들어, 이것은 데이터 세트의 볼륨 값의 분포이다.

그것은 정규 분포에 가깝지만, 큰 가치는 약 15,000을 중심으로 한다.

나는 이것이 정상화의 혜택을 받을 수 있는 데이터 세트의 좋은 예라고 생각한다.

그래서 내가 하고 싶은 첫 번째 일은 이 가치들을 정상화하는 것이다.

이렇게 하려면, 정규화하고 싶은 열 이름을 ColumnSelector에 전달한 다음 표준 스케일러를 사용할 수 있습니다.

여기 코드가 있습니다.

먼저 열 선택기를 만듭니다.

그런 다음 나는 확장하고 싶은 열 이름을 전달한다.

모든 열은 동일한 유형의 요소를 포함해야 합니다; 이 경우, 더블.

그런 다음 나는 선택 사항의 포장을 해제한다.

나는 누락된 가치가 없다는 것을 알기 때문에 이것을 할 수 있다.

하지만 나는 또한 누락된 값을 대체하는 imputer를 사용할 수 있다.

그리고 나서 나는 언래퍼에 StandardScaler를 추가한다.

그래서 나는 가방 번호가 수만 개이고 양이 수십만 개인 이 테이블에서 시작했다.

그리고 그 열들을 확장한 후, 나는 이제 내 모델의 성능을 향상시킬 수 있는 규모에 가까운 값을 갖게 된다.

좀 더 구체적으로 말하자면, 내 가치는 이제 0의 평균과 1의 표준 편차를 가지고 있다.

여기에 비슷한 예가 있지만, 이 예에서는 문자열 유형과 영역 열을 선택하고 원 핫 인코딩을 수행하고 있습니다.

원 핫 인코딩은 각 범주의 존재를 나타내기 위해 배열을 사용하여 범주형 데이터를 인코딩하는 것을 의미합니다.

이 예에서, 나는 세 가지 범주가 있다: 청동, 은, 그리고 금.

각각은 배열 내에서 고유한 위치를 가지며, 그 위치에 있는 것으로 표시된다.

대안은 각 범주에 연속적인 숫자를 제공하는 서수 인코더를 사용하는 것이다.

몇 가지 범주만 있고 그렇지 않으면 서수 인코더가 있을 때 원 핫 인코더를 사용하세요.

이제 이 모든 것을 모아서 표형 회귀를 만들겠습니다.

이전과 마찬가지로, 나는 구조자를 만들고 데이터 URL과 매개 변수 URL을 정의하기 시작할 것이다.

나는 또한 내가 예측하고 싶은 열의 열 ID를 정의하고 싶다: 가격.

기차 방법과 예측 방법 모두에서 사용할 수 있도록 내 작업을 별도로 정의할 것이다.

내가 언급했듯이, 나는 볼륨을 정상화할 것이다.

그런 다음 나는 가격을 예측하기 위해 부스트 트리 리그레시터를 사용할 것이다.

그것은 결과 예측의 열이기도 한 주석 열의 이름을 취하고 세 가지 기능 열의 이름을 모두 취한다.

이 세 개의 칼럼부터 시작하겠습니다.

그런 다음 추가 방법을 사용하여 조각을 결합하고 작업을 반환할 것입니다.

이제 내 작업 정의를 가졌으니, 나는 이전과 같이 기차 방법을 추가할 것이다.

그리고 이전과 마찬가지로, 나는 반품 유형이 내 모델의 세부 사항에 의존하지 않도록 하고 싶다.

첫 번째 단계는 CSV 파일을 데이터 프레임에 로드하는 것이다.

저는 이것을 하기 위해 TabularData 프레임워크를 사용하고 있습니다.

그리고 이전과 마찬가지로, 나는 검증을 위해 일부 데이터를 나누고 싶다.

나는 훈련과 검증 데이터 세트를 맞는 방법으로 전달할 것이다.

나는 또한 이전과 같이 유효성 검사 오류를 보고할 것이며, 나중에 사용할 수 있도록 훈련된 매개 변수를 저장할 것이다.

마지막으로, 내가 변압기를 돌려줄게.

훈련된 변압기가 있으면, 데이터 프레임에 대한 가격 예측을 하는 데 사용할 수 있습니다.

나는 이것을 하기 위해 예측 방법을 쓸 것이다.

작업 정의와 매개 변수 URL에서 모델을 로드하는 것으로 시작하겠습니다.

예측에 사용하는 데이터 프레임에 유형, 지역 및 볼륨과 같은 기능으로 사용한 열이 있는지 확인해야 합니다.

예측된 가치는 가격 열에 있을 것이다.

나는 내가 맨 위에 정의한 열 ID를 사용할 것이다.

그리고 그것은 나의 표 회귀를 끝낸다.

훈련된 매개 변수를 생성하기 위해 한 번만 호출하면 되는 기차 방법과 아보카도 가격, 유형, 지역 및 아보카도의 양에 따른 예측을 반환하는 예측 방법이 있습니다.

그게 내가 내 앱에서 이것을 사용하는 데 필요한 전부야.

표 작업을 할 때 명심해야 할 몇 가지 사항이 있습니다.

ColumnSelector 작업을 사용하여 특정 열을 처리할 수 있습니다.

트리 분류기와 회귀자는 모두 표 형식이지만, AnnotatedFeatureProvider를 사용하는 표 작업에서 선형 회귀자와 같은 비표 형식 추정기를 사용할 수도 있습니다.

문서를 참조해 주세요.

예측을 할 때, 필요한 열로 데이터 프레임을 만들고, 올바른 유형을 사용하도록 하세요.

이제 사용자 지정 작업을 만드는 방법을 알았으니, 배포에 대해 이야기해 봅시다.

지금까지, 나는 훈련과 추론을 위해 같은 API를 사용했다.

Create ML Components를 사용할 때, 당신의 모델이 당신의 코드라는 것을 지적하고 싶습니다.

파일에서 훈련된 매개 변수를 로드할 때에도 작업 정의가 필요합니다.

이것은 어떤 상황에서는 유용하지만, 때로는 배포를 위해 Core ML을 사용하고 싶을 수도 있습니다.

Core ML을 사용할 때, 코드를 남깁니다.

그 모델은 모델 파일로 완전히 표현된다.

Core ML을 사용할 준비가 되었다면, 이것은 좋은 워크플로우가 될 수 있습니다.

그리고 그것은 최적화된 텐서 연산의 장점이 있다.

하지만 당신이 명심해야 할 몇 가지 고려 사항이 있습니다.

모든 작업이 Core ML에서 지원되는 것은 아니다.

특히, 사용자 지정 변압기와 추정기는 지원되지 않습니다.

그리고 Core ML은 이미지와 모양의 배열과 같은 몇 가지 유형만 지원합니다.

사용자 지정 유형을 사용하는 경우, Core ML 모델을 사용할 때 앱에서 변환해야 할 수도 있습니다.

이것이 변압기를 코어 ML 모델로 내보낼 수 있는 방법입니다.

변압기에 지원되지 않는 작업이 포함되어 있다면, 오류가 발생합니다.

훈련된 매개 변수와 함께 작업 정의를 배포하는 것을 고수하고 싶다면, 스위프트 패키지에 번들링하는 것을 고려해야 합니다.

이렇게 하면 매개 변수를 로드하고 예측을 수행하는 간단한 방법을 제공할 수 있습니다.

스위프트 패키지 리소스에 대한 자세한 내용은 WWDC 2020의 스위프트 패키지 토크를 확인하세요.

그게 내가 가진 전부야.

기억해야 할 가장 중요한 것은 이제 구성으로 사용자 지정 작업을 만들 수 있다는 것입니다.

가능성은 끝이 없다.

나는 네가 무엇을 만드는지 보기를 기대하고 있어.

오디오 및 비디오 작업을 포함한 고급 기술을 보려면, 제 동료 데이비드가 고급 사용자 지정 작업을 발표할 "ML 구성 요소 생성으로 고급 모델 구성"을 확인하세요.

감사합니다 그리고 남은 WWDC 2022를 즐기세요!

♪