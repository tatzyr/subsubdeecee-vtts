10121

♪ ♪

젠: 안녕하세요, 저는 여기 애플의 사파리와 웹킷 전도사인 젠 시몬스입니다.

WebKit에게 환상적인 한 해였다.

우리는 이미 올해 내내 Safari의 여러 릴리스에서 140개 이상의 새로운 웹 기술을 출시했으며, 올 가을에 수십 개의 새로운 웹 기술이 출시될 예정입니다.

너무 많아서, 우리가 모든 것을 다룰 수 있는 방법이 없기 때문에, 우리는 CSS에 집중하기로 결정했습니다.

이 세션에서는 레이아웃의 새로운 가능성, 오늘날의 놀라운 디스플레이를 최대한 활용하는 전체 세대의 컬러 도구, 새로운 의사 클래스로 까다로운 문제를 해결하는 생산적인 방법, 타이포그래피를 한 단계 끌어올릴 수 있는 CSS를 포함하여 CSS에서 가장 흥미로운 새로운 기능을 살펴볼 것입니다.

나는 이미 배송된 것들, 사파리 17에서 배송될 것들, 그리고 우리가 미래를 위해 작업하고 있는 것들을 공유할 것이다.

오늘 미래를 보려면, 사파리 기술 미리보기를 다운로드하세요.

거기서 석공 레이아웃을 찾을 수 있을 거야.

수년 동안, 이것은 웹에서 인기 있는 레이아웃 패턴이었다.

다양한 크기의 콘텐츠를 포장할 수 있는 좋은 방법입니다.

콘텐츠 순서가 첫 번째 열에서 시작하여 뷰포트 아래로 흐르고, 두 번째 열의 맨 위로 올라가고, 아래로 흐르고, 세 번째 열로 내려가는 것이 괜찮다면 CSS 멀티컬럼을 사용하여 이 모양으로 레이아웃을 달성할 수 있습니다.

이것이 당신의 프로젝트에 효과가 있다면, 좋아요.

CSS 멀티컬럼은 수십 년 동안 브라우저에 있었던 레이아웃 메커니즘이다.

하지만 이것은 종종 작동하지 않는다.

대신, 디자이너들은 그들의 콘텐츠가 페이지를 가로질러 흐르기를 원하며, 각 항목을 가능한 한 맨 위에 두는 열에 배치한다.

사용자가 스크롤할 때 더 많은 콘텐츠가 하단에 로드될 때 특히 필요합니다.

그래서 웹사이트는 이것을 달성하기 위해 자바스크립트를 사용해야 했다.

하지만 자바스크립트는 CSS보다 레이아웃이 느리고, 더 취약하다.

코딩하기가 더 어려워.

레이아웃은 정말 CSS에 속한다.

CSS 그리드의 일부로 메이슨리를 만들기 위한 제안은 몇 년 전에 시작되었고 플래그 뒤의 실험으로 파이어폭스에서 구현되었다.

우리는 이 아이디어를 믿고 그것이 웹에 오는 것을 보고 싶습니다. 그래서 이제 Safari Technology Preview에 있습니다-- 기본적으로-- 당신이 그것을 시도하고, 당신의 생각을 말하고, 우리가 앞으로 나아갈 수 있도록 도울 수 있습니다.

여기 예시가 있어.

나는 아주 적은 CSS로 이 전형적인 석공 레이아웃을 만들었다.

디스플레이: 그리드는 우리를 시작하고, 그리드 템플릿 열은 더 많은 공간을 사용할 수 있을 때 자동으로 수를 늘리는 유연한 열을 제공합니다.

그런 다음 그리드 템플릿 행: 벽돌은 한 줄의 코드로 행 방향의 벽돌 패턴으로 아이템을 포장합니다.

CSS 그리드의 이 부분을 만드는 것은 우리에게 엄청난 유연성을 제공한다.

한 차원에서 석공술을 정의할 수 있으며, 그리드의 힘을 사용하여 fr 단위로 열을 다른 크기로 만들거나 첫 번째 열을 고정 너비로 만드는 것과 같이 다른 차원에서 원하는 모든 것을 할 수 있으며, 중간은 fr 단위를 사용하여 유연하고 세 번째 열은 minmax 값으로 유연하게 만들 수 있습니다.

석공과 그리드를 결합하는 것은 인기 있는 자바스크립트 라이브러리보다 훨씬 더 강력한 메커니즘을 만든다.

이 모든 것은 여전히 진행 중인 작업이다.

브라우저 제작자와 다른 사람들이 완전히 접근할 수 있도록 하는 작업을 포함하여 앞으로 나아갈 길에 동의하기 위해 모이는 CSS 워킹 그룹에서 더 많은 논의가 필요합니다.

우리는 그것이 준비되면 사파리에서 메이슨리를 배송하기를 기대합니다.

오늘 브라우저에서 배송할 준비가 된 것은 무엇인가요?

마진 트림.

새로운 마진 트림 속성은 컨테이너에 밀어붙이는 요소에서 마진을 쉽게 제거할 수 있게 해준다.

내가 설명할게.

우리가 헤드라인과 세 단락을 가지고 있다고 상상해 보세요.

그들은 모두 그들 사이의 공간뿐만 아니라 전체 그룹 위와 아래의 공간을 제공하는 상단과 하단 여백을 가지고 있다.

카드 클래스가 있는 기사 요소인 컨테이너에 적용된 패딩도 있습니다.

헤드라인 위의 여백과 컨테이너의 상단 패딩을 함께 추가하여 상자의 상단 가장자리와 텍스트의 첫 번째 줄 사이에 얼마나 많은 공간이 있는지 결정합니다.

바닥도 마찬가지야.

마지막 단락 아래의 여백은 컨테이너의 하단 패딩에 추가되며, 이는 아마도 의도한 것보다 더 많은 공백을 추가할 것이다.

대신 우리가 원하는 것은 상단과 하단에 패딩만 있고 마진이 없는 것이다.

이것은 우리에게 상자 주변에 더 균일한 공간을 줄 것이다.

우리가 필요한 것은 컨테이너를 밀어 올리는 마진을 제거하는 방법이다.

당신은 아마도 헤드라인에서 상단 여백과 마지막 단락에서 하단 여백을 수동으로 제거하고, 음, 최선을 다하여 이것을 처리하려고 시도했을 것입니다.

하지만 예상치 못한 내용이 나타난다.

아마도 또 다른 인스턴스는 h3로 시작하고, 아무도 그 코드를 작성하지 않거나, 누군가가 중간에 h2를 꽂고 상단 여백을 놓치고 있다.

마진 트림은 우리에게 더 나은 해결책을 제공한다.

대신, 컨테이너에 margin-trim: block을 적용하여 원하는 것을 정확히 요청할 수 있습니다.

우리는 사파리 16.4에서 마진 트림에 대한 지원을 추가했습니다.

또한 margin-trim: 인라인을 사용하여 인라인 방향으로 여백을 다듬을 수 있습니다.

그건 마진 트림이야.

그것은 단순히 더 강력한 방식으로 일반적인 필요를 해결한다.

레이아웃용 CSS는 2017년 3월 CSS 그리드의 출현 이후 지난 6년 동안 정말 성숙했다.

오늘날의 레이아웃은 우리가 10년 전에 했던 것에 비해 급격한 개선이다.

같은 기간에, 웹 디자이너와 개발자들이 조금 눈에 띄지 않은 또 다른 급진적인 도약이 있었다: 색상의 도약.

세상은 특히 밖에서 색채로 가득 차 있다.

다이내믹 레인지, 채도, 모든 뉘앙스와 가능성.

이 도표가 인간의 눈이 볼 수 있는 모든 색을 나타낸다고 상상해 보세요.

이러한 색상의 하위 집합 주변의 선은 웹의 기본 색 영역인 sRGB에서 표현할 수 있는 것을 보여줍니다.

우리가 90년대에 사용한 것보다 확실히 낫지만, sRGB의 한계를 넘어 더 많은 시각적 스펙트럼을 전달하는 것이 좋을 것이다.

P3 색상은 바로 그것을 한다.

애플은 7년 전에 하드웨어와 소프트웨어에서 광역 디스플레이 P3를 지원하기 시작했으며, 처음에는 2015년 후반에 아이맥에서, 그 다음에는 아이패드, 아이폰 7을 시작으로 아이폰을 시작했다.

P3 색재현율은 sRGB보다 50% 더 많은 색상을 표시할 수 있다.

현대 장치의 디스플레이는 놀랍다.

이것들은 모두 더 밝은 색상과 더 깊은 채도를 가진 넓은 영역 P3를 지원합니다.

그리고 웹 디자인을 최대한 활용하는 것은 오랜 시간이 지났다.

사용자의 하드웨어와 소프트웨어가 할 수 있는 일에 따라 CSS를 조건부로 지정할 수 있는 방법이 필요할 때 색상 영역 지원을 테스트하기 위해 CSS에 미디어 쿼리가 있습니다.

우리는 2016년에 Safari 10.0에서 Color Gamut Media Query에 대한 지원을 배송했습니다.

색상을 선택할 때, 물론 많은 방법이 있습니다; 명명된 색상, 16진수 값, 빨간색, 녹색, 파란색으로 생각하는 RGB 함수.

색조, 채도, 가벼움을 위한 HSL, 그리고 색조, 순백, 그리고 어두움을 가진 HWB.

색상을 모델링하는 이러한 모든 방법은 동일한 결과를 만들 수 있다.

이 모든 모델은 sRGB 색 영역으로 제한됩니다.

이 색상 모델을 사용하면 P3에만 존재하는 색상을 나타내는 것은 불가능합니다.

그 때문에, 이제 CSS에 정의된 네 개의 새로운 것이 있다.

LCH, OKLCH, LAB, 그리고 OKLAB.

이 모델들은 디스플레이 P3 또는 미래에 웹에 올 수 있는 다른 색 영역을 포함한 모든 영역의 색상을 나타낼 수 있습니다.

그것들은 각각 세 가지 값으로 정의된다.

네 가지 모두에서, "L"은 가벼움 LCH를 나타내며 OKLCH는 또한 크로마, 또는 그 색상이 얼마나 강렬한지, 색조, 또는 색상 스펙트럼의 어디에 있는지에 대한 값을 취한다.

LAB과 OKLAB은 A축을 따라 값을 선언합니다-- 또는 색상이 녹색에서 빨간색으로 이어지는 축을 따라 있는 곳-- 그리고 B축--또는 파란색에서 노란색으로 가는 방법을 선언합니다.

각각 새로운 기능을 사용하여 LCH, OKLCH, LAB 및 OKLAB으로 색상을 만들 수 있습니다.

브라우저가 P3에 대한 지원을 추가했다면, 이러한 기능은 sRGB 내에서뿐만 아니라 P3에만 존재하는 색상을 나타낼 수 있습니다.

우리는 사파리 15.0과 15.4에서 이러한 기능에 대한 지원을 제공했습니다.

크롬, 엣지, 파이어폭스는 Interop 2023 프로젝트 덕분에 올해 지원을 추가하고 있다.

또한 color() 함수로 색상을 정의하고 사용할 색 영역을 지정할 수 있습니다.

색상 함수는 슬래시 후에 빨간색, 녹색, 파란색과 알파의 값을 취한다.

하지만 예를 들어, 100% 녹색이 만드는 색은 색영역에 달려 있다.

우리는 6년 전에 Safari 10.1에서 이 색상 기능을 사용하여 CSS에서 P3 색상을 만들 수 있는 기능을 처음 출시했습니다.

이러한 색 영역과 색상 모델의 출현과 함께, CSS 워킹 그룹은 그들의 힘을 활용하는 추가 도구를 정의했다.

그들의 웹 표준은 마침내 우리가 올해 이 도구들을 배송할 수 있을 만큼 충분히 성숙했다.

다른 색상을 언급하면서 CSS에서 색상을 정의하고 싶었던 적이 있나요?

한동안 전처리기에서 비슷한 일을 하는 것이 가능했다.

이제, 상대적인 색상 구문을 사용하면 그렇게 할 수 있습니다.

색상을 정의하는 많은 방법과 마찬가지로, 색상 기능 중 하나로 시작합니다.

이것은 새로운 색상을 만드는 것과 관련된 수학적 계산을 수행하는 데 사용되는 색상 모델을 결정합니다.

다음으로, 어떤 기존 색상부터 시작하고 싶은지 명시하세요.

그런 다음 기능에서 채널을 가져와서 조작하세요.

첫 번째 예에서, R, G 및 B 채널은 그대로 있는 반면, / 0.7은 브라우저에 이 색상에 70%의 불투명도를 부여하도록 지시한다.

LAB의 두 번째 예에서, 나는 브라우저에 L을 2로 나누어 계산하라고 말했고, 이는 A와 B 채널을 그대로 두면서 밝기를 반으로 줄이고 색상을 더 어둡게 만든다.

그리고 세 번째 예에서, OKLCH에서, 나는 색상에서 강도를 빼내는 C, 크로마를 3분의 1로 자르는 동안 L과 H 채널을 그대로 둘 것이다.

상대 색상 구문을 사용하면 디자인 시스템을 만들 때 편리한 전체 색상 팔레트를 빠르게 정의할 수 있습니다.

새로운 색상 모델은 또한 우리가 그라디언트를 정의할 수 있는 방법을 개선한다.

여기 흰색에서 파란색으로 가는 간단한 선형 그라디언트가 있습니다.

수년 동안, 이러한 종류의 그라디언트는 항상 sRGB 색 공간을 사용하여 계산되었다.

이제, 사파리 16.2부터, 우리는 그라디언트가 sRGB에서 계산되기를 원한다고 명시적으로 말할 수 있습니다.

아니면 우리는 색 공간을 바꿀 수 있어.

sRGB-선형은 sRGB와 비슷하지만, 색상 간의 전환을 더 선형적인 방식으로 부드럽게 한다.

하지만 당신은 이 두 가지 모두 보라색 톤을 통해 전환하는 것을 알 수 있습니다.

우리가 OKLAB으로 전환한다면, 중간에 계산된 색상은 훨씬 더 파란색이며, 아마도 그것이 우리가 선호하는 것일 것이다.

LCH는 동일하지는 않지만 비슷한 결과를 만들어낸다.

OKLCH는 노란색, 녹색, 청록색의 스펙트럼을 통해 전환한다.

실험실은 훨씬 더 보라색이다.

또는 우리가 이 결과를 좋아한다면 HSL이나 HWB를 사용할 수 있습니다.

그것은 정말로 우리가 원하는 프로젝트와 디자인 효과에 달려 있다.

이것들 중 어느 것도 옳거나 틀리지 않다. 그들 중 누구도 최고가 아니야.

상황에 따라 달라.

그라디언트를 정의하기 위한 많은 새로운 옵션이 있다.

색상 공간을 바꾸는 것은 큰 영향을 미친다.

이것은 또한 색의 변화를 애니메이션화하기 위한 것이다.

색 공간은 그 사이에 일어나는 일의 보간에 영향을 미친다.

색상을 함께 섞을 때 같은 영향이 적용된다.

네, 이제 CSS에서 색상을 섞을 수 있습니다.

사파리 16.2부터 새로운 컬러 믹스 기능이 있습니다.

혼합할 두 가지 색상을 나열하고 사용할 색 공간을 지정하면 브라우저가 함께 혼합합니다.

그라데이션의 중간에서 이 자줏빛 파란색을 알아볼 수 있습니다.

우리는 대신 그라디언트와 함께 사용하기 위해 살펴본 다른 색 공간으로 전환할 수 있습니다.

이것들은 모두 다른 결과를 낳는다.

기본적으로, 컬러 믹스는 한 색상의 50%와 다른 색상의 50%에서 새로운 색상을 만든다.

하지만 원하는 비율, 80/20 또는 30/70으로 변경할 수 있습니다.

또한 두 숫자를 총 100% 미만으로 설정하여 색상을 반투명하게 만들 수 있습니다.

여기서, 나는 흰색을 30%로, 파란색을 30%로 설정하여 결과 색상에 60%의 불투명도를 부여했다.

Currentcolor 키워드를 사용하여 현재 텍스트 색상을 원하는 것과 섞을 수도 있습니다.

이 경우, 저는 호버 색상과 함께 사용할 밝은 녹색을 만들기 위해 짙은 녹색 링크 색상과 40% 흰색을 혼합하고 있습니다.

여기 많이 있어.

P3 색상 영역, 새로운 색상 모델 및 기능, 그라디언트와 애니메이션의 색상 공간을 변경할 수 있는 기능, 기존 색상의 채널을 변경하거나 혼합을 통해 색상을 정의하는 새로운 방법 - 웹용 디자인에서 색상을 활용하는 데는 많은 잠재력이 있습니다.

P3 색상 지원에 대해 알아야 할 마지막 한 가지.

브라우저는 P3 색상을 사용하는 CSS 또는 JavaScript의 특정 기능을 지원해야 할 뿐만 아니라, 물론 사용자의 운영 체제와 디스플레이가 이를 지원해야 할 뿐만 아니라, 브라우저는 DOM의 다른 부분에서 웹 페이지의 각 특정 부분에 대해 P3 렌더링을 지원해야 합니다.

보편적으로 작동한다고 가정하기 전에 각 브라우저의 세부 사항을 확인하고 싶을 것입니다.

사파리에서 P3에 대한 업데이트를 알려드리겠습니다.

우리는 7년 전 Safari 10.0에서 P3의 이미지 지원을 배송했습니다.

사파리 10.1에서, 우리는 대부분의 웹 페이지에 P3에 대한 전반적인 지원을 추가했습니다.

사파리 15.2에서, 우리는 캔버스 요소 내부에 지원을 추가했습니다.

그리고 Safari 16.4에서, 우리는 drawingBufferColorSpace를 사용하여 WebGL Canvas에서 P3에 대한 지원을 추가했습니다.

개발자 도구의 경우, Safari 13.1에서 우리는 P3에서만 사용할 수 있는 색상을 쉽게 찾거나 한 색상 모델에서 다른 색상 모델로 색상을 변환할 수 있는 웹 인스펙터의 색상 선택기를 제공했습니다.

그리고 사파리 15.2에서, 우리는 웹 인스펙터 그래픽 탭에 P3에 대한 지원을 추가했습니다.

우리는 아직 할 일이 조금 더 있다.

첫째, unpackColorSpace의 사용을 포함하도록 WebGL 캔버스 내부의 지원을 확장합니다.

그리고 아직 하지 않은 SVG 필터에 P3에 대한 지원을 추가하기 위해, 웹 표준에 대한 지속적인 논쟁이 아직 진행 중이기 때문입니다.

현재로서는, SVG 필터를 적용하면, 모든 브라우저에서 색상이 sRGB로 평평해질 것입니다.

특히 이러한 많은 기능이 마침내 브라우저에서 사용할 수 있기 때문에 웹에서 색상을 다시 생각하는 것은 정말 신나는 시간입니다.

CSS의 발전은 디자인이 가능한 것을 바꿀 뿐만 아니라, 그 디자인을 더 쉽게 코딩할 수 있게 해준다.

:User-valid 및 :user-invalid 의사 클래스는 사용자가 필드를 올바르게 작성했는지 여부에 따라 양식의 스타일을 지정하는 방법을 제공합니다.

수년 동안, :valid와 :invalid 의사 클래스는 정말 도움이 될 것처럼 보였다.

사용자가 실수를 했을 때 알리기 위해 이 양식 필드의 스타일을 지정하고 싶습니다.

그래서 나는 유효하지 않은 입력을 선택하기 위해 :invalid 의사 클래스를 시도할 것이다.

:Has input:invalid로, 나는 라벨을 목표로 할 것이다.

그리고 ::before 의사 요소로, 나는 "x"를 삽입할 것이다, 그래서 의사소통은 색상에만 의존하지 않는다.

결과를 봅시다.

누군가가 시작할 때-- 그래, 그건 좋지 않아.

사용자가 입력하기 시작하자마자, 브라우저는 아직 유효한 이메일 주소가 아니기 때문에 유효하지 않다고 표시합니다.

:Invalid는 사용자가 제대로 할 수 있는 기회를 갖기도 전에 입력을 잘못 표시하기 때문에, 개발자들은 대신 자바스크립트를 사용하고 있다.

User-valid와 user-invalid는 이 문제를 해결합니다.

그들은 양식 필드가 유효하거나 유효하지 않은 것으로 간주될 때를 결정하기 위해 더 복잡한 알고리즘을 사용한다.

우리는 그것을 사파리 16.5로 배송했다.

이제 우리는 개선된 결과를 볼 수 있다.

그들이 옳았다면 빨간 경고는 없다.

그리고 누군가가 필드를 잘못 작성하면, 우리가 그들에게 돌아가서 고치라고 경고하고 싶을 때, 그들이 필드를 떠난 후에 빨간색 경고가 나타납니다.

보시다시피, :user-invalid는 :has()와 결합될 때 특히 강력합니다.

사실, 올해 우리는 더 많은 사이비 클래스와 함께 작동하도록 함으로써 :has()의 힘을 증가시켰다.

:Has(:lang())는 특정 언어의 존재에 따라 페이지의 모든 스타일을 지정할 수 있게 해준다.

그리고 미디어 의사 클래스에 대한 :has() 지원은 오디오 및 비디오 재생 상태에 따라 조건부 스타일을 제공합니다.

:Dir 의사 클래스는 언어 방향을 지원할 때 격차를 메운다.

타이핑되는 언어에 따라, 텍스트는 왼쪽에서 오른쪽으로, 또는 오른쪽에서 왼쪽으로 흐를 수 있다.

이것은 종종 LTR과 RTL로 축약된다.

요즘 CSS는 점점 더 논리적인 속성을 가지고 있어 왼쪽이나 오른쪽 대신 텍스트 흐름의 시작과 끝을 참조할 수 있습니다.

예를 들어, margin-left와 margin-right 대신 margin-inline-start와 margin-inline-end를 사용하여 모든 언어에서 작동하는 CSS를 쉽게 작성하십시오.

하지만 당신의 디자인의 모든 것이 논리적 속성을 사용하여 처리될 수 있는 것은 아닙니다.

이것은 새로운 방향 의사 수업이 도움이 될 수 있는 곳이다.

여기, 텍스트의 방향에 따라 변환하고 싶은 아이콘이 있습니다.

헤더에 LTR 방향이 있을 때, 나는 SVG를 한 방향으로 회전할 것이고, 헤더가 RTL일 때, 나는 그것을 다른 방향으로 회전할 것이다.

이것은 과거에 여러 언어 방향을 지원하기 위해 사용되었던 것보다 훨씬 간단한 기술이다.

:User-valid와 유효하지 않은, :has()에 대한 추가, 그리고 :dir 의사 클래스는 모두 강력하고 간결한 코드를 더 쉽게 작성할 수 있게 해준다.

올해는 또한 타이포그래피의 세부 사항을 완벽하게 다듬을 수 있는 몇 가지 기능을 제공합니다.

새로운 라인 높이 유닛을 살펴보는 것부터 시작합시다.

CSS에는 길이를 정의하는 데 사용할 수 있는 다양한 종류의 단위가 있습니다.

일부 단위는 svh 및 lvh와 같은 뷰포트 크기에 상대적이거나 cqb 및 cqi와 같은 컨테이너 크기에 상대적입니다.

다른 단위는 타이포그래피의 크기와 관련이 있다.

하나의 ex는 글꼴의 x 높이와 같다.

문자의 경우 한 ch는 글꼴의 0 문자의 인라인 크기와 일치합니다.

그리고 하나의 ic는 CJK 스크립트에서 이데올로기 문자의 인라인 크기입니다. 인라인 크기는 수평 쓰기 모드에서 너비 또는 수직 쓰기 모드에서 높이입니다.

이 장치들은 한동안 브라우저에서 지원되어 왔다.

음, 타이포그래피의 크기에 상대적인 새로운 단위가 있습니다: 라인 높이의 경우 lh 단위, 루트 라인 높이의 경우 rlh.

이 유닛들은 우리가 레이아웃의 모든 것을 선 사이의 공간에 연결할 수 있게 해준다.

예를 들어, 루트 HTML 요소에서 줄 높이를 1.4로 설정했습니다.

그런 다음 나는 이 화이트 카드인 섹션 요소에 2rlh의 패딩을 넣었다.

그런 다음 블록 방향의 헤드라인과 단락 여백을 1rlh로 설정했습니다.

이제 텍스트 줄 사이에는 마치 공간 대신 텍스트가 있는 것처럼 정확히 많은 공간이 있다.

그것은 타이포그래피에서 수직 리듬으로 알려진 것을 설정한다.

라인 높이 단위는 수직 리듬을 방해할 수 있는 상황을 방지하지 않지만, 이 오랜 타이포그래피 전통을 여는 데 훨씬 더 가까워지는 믿을 수 없을 정도로 간단한 도구를 웹에 가져와 유형과 유형 주변의 공백 사이의 친밀한 연결을 만들 수 있습니다.

웹에서 디지털 타이포그래피를 전통적인 조판의 높은 기준에 따라 연마하는 데는 많은 어려움이 있다.

이것들 중 하나는 글꼴 크기 조정과 관련이 있다.

만약 당신이 웹 디자이너라면, 글꼴 패밀리와 글꼴 크기를 신중하게 선택할 가능성이 높습니다.

하지만 원하는 글꼴은 다운로드되지 않거나 사용자의 운영 체제에서 사용할 수 없을 수도 있습니다.

그렇기 때문에 브라우저에 대체 계획을 제공하기 위해 글꼴 패밀리의 글꼴 스택을 선언하는 것이 가장 좋습니다.

발견된 첫 번째 글꼴은 사용되는 글꼴이다.

마찬가지로, 글꼴이 특정 크기로 시각적으로 나타나는 크기는 웹 개발자가 제어할 수 있는 것이 아니다.

왼쪽에는 SF Hello가 있고, 오른쪽에는 Baskerville이 있습니다.

그것들은 정확히 같은 크기로 조판되었지만, SF Hello는 라인 박스 안에 더 많은 공간을 채우기 때문에 훨씬 더 커 보인다.

그것은 더 큰 x 높이를 가지고 있다.

이 차이는 글꼴 파일이 생성되었을 때 만들어진 선택으로 인해 발생합니다.

여기, 글꼴 크기: 1.4rem으로 기사를 조판하는 예가 있으며, 그 기사 안에 있는 모든 코드에 대한 간단한 글꼴 스택을 정의하고 있습니다.

코드가 단락 텍스트보다 어떻게 작아 보이는지 알 수 있습니다.

F를 비교하면 특히 눈에 띈다.

코드가 모노스페이스로 되돌아가면, 단락 텍스트보다 더 커 보인다.

우리는 코드의 글꼴 크기를 기사 글꼴 크기의 120%로 조정하여 보상하려고 시도할 수 있으며, 이는 택배를 사용할 때 크기를 능가할 수 있지만, 브라우저가 모노스페이스로 떨어지면 코드는 단락 텍스트보다 훨씬 더 커집니다.

우리가 필요한 것은 브라우저에 "이 두 글꼴이 같은 크기인 것처럼 보이게 해주세요"라고 말하고 방법을 알아내는 방법입니다.

그것이 바로 글꼴 크기 조정이 하는 일이다.

시각적 일관성을 만들기 위해 글꼴의 크기가 얼마나 큰지 조정합니다.

CSS 한 줄을 추가했습니다-- font-size-adjust: 0.47-- 그리고 이제 제 조판 코드는 스택의 두 글꼴 모두에서 단락 텍스트와 시각적으로 일치합니다.

근데 왜 0.47이야? 이 숫자는 무슨 뜻이야?

웹에서 사용할 수 있는 모든 라틴 글꼴의 경우, 글꼴의 크기와 x 높이 사이에 비율이 있습니다.

그 비율이 약간 임의적이지만, 보통은 약 50%이다.

글꼴 크기 조정: 기사 요소에 0.47을 적용함으로써, 나는 실제로 브라우저에 기사 내부의 모든 글꼴의 크기를 조정하라고 말하고 있습니다-- 단락 글꼴, 코드 글꼴, 어느 글꼴이 어느 스택에서 사용되든 상관없이-- 그래서 각각의 x-높이는 항상 지정된 글꼴 크기의 47%입니다.

나는 0.47을 골랐다. 왜냐하면 그것이 아이오와 올드 스타일을 글꼴 크기 조정을 적용하지 않고 똑같이 보이게 만들었기 때문이다.

우리는 Safari 16.4에서 글꼴 크기 조정의 이러한 기본 기능에 대한 지원을 제공했습니다.

사파리 17에서, 우리는 고급 기능에 대한 지원을 추가하고 있습니다.

모든 글꼴이 기본 글꼴과 일치하도록 하기 위해 0.47과 같은 마법의 숫자를 추적할 필요가 없다면 더 낫지 않을까요?

From-font 값을 사용하면 브라우저에 모든 것을 알아내라고 말할 수 있습니다.

또한 Safari 17에서는 크기 일관성을 만들 때 어떤 메트릭을 사용해야 하는지 지정할 수 있는 두 값 구문에 대한 지원을 추가하고 있습니다.

기본적으로 ex-height이지만, 대신 cap-height, ch-width, ic-width 또는 ic-height를 사용할 수 있습니다.

사파리 17은 또한 크기 조정 설명자에 대한 지원을 추가하여 @font-face 규칙으로 글꼴을 설정할 때 비슷한 종류의 조정을 할 수 있습니다.

그건 글꼴 크기 조정이야.

글꼴 크기만으로는 쉽게 제어할 수 없는 것을 좀 더 제어할 수 있습니다.

하지만 새로운 라인 높이 단위와 유형의 시각적 크기를 조정할 수 있는 능력에도 불구하고, 라인 박스 크기 조정에 불안정한 불균형을 만들 수 있는 것들이 여전히 있습니다.

우리는 이 문제에 대한 몇 가지 해결책을 연구하고 있다.

텍스트 상자 트림은 그들 중 하나이다.

어떤 면에서, 텍스트 상자 트림은 여백 트림과 비슷하다.

둘 다 원치 않는 공백을 다듬을 수 있지만, 이 경우 텍스트 상자에 있습니다.

웹에서 수직으로 정렬할 무언가를 얻기 위해 고군분투해 본 적이 있나요?

이 이름은 수직 중심이 아니다.

내가 중간에 선을 그리면 더 명확할지도 몰라.

그 텍스트는 시각적으로 중심보다 낮다.

이것은 웹에서 항상 일어난다.

하지만 왜?

음, 사실 텍스트 상자는 수직 중앙에 있어.

하지만 글리프는 이 상자 안에 더 아래에 앉아 있다.

글꼴로 예약된 글자 위와 아래에 추가 공간이 있습니다.

위와 아래의 추가 공간의 양은 같지 않습니다. 왜냐하면 글꼴은 위만큼 아래가 필요하지 않고 수직 센터링을 던지고 있기 때문입니다.

이 여분의 공간은 매우 중요하다.

그것은 악센트 표시, 모음 표시 등을 위해 예약되었다.

하지만 그것은 웹에서 타이포그래피 레이아웃을 버릴 수 있다.

Text-box-trim은 모든 글리프 전체를 보여주면서 레이아웃을 위해 이 여분의 공간을 다듬을 수 있는 방법을 제공합니다.

이것은 수직 센터링에만 도움이 되지 않는다.

다음은 캡 높이 위의 글꼴을 위해 예약된 추가 공간으로 인해 헤드라인의 상단을 이미지 상단과 정렬하는 것을 쉽게 얻을 수 없는 예가 있습니다.

여분의 공간을 다듬어주면, 물건을 세우는 것이 쉬워진다.

이것은 모두 진행 중인 작업이다.

속성 이름은 이미 leading-trim에서 text-box-trim으로 바뀌었다.

사파리 기술 미리보기 171 기준으로, 화면에 보이는 코드는 작동 방식이지만, 이러한 세부 사항에 너무 집착하지 마십시오.

우리는 그것이 계속 변할 것으로 예상한다.

아마 이렇게 될 거야.

Safari Technology Preview에서 시도해 보고 어떻게 생각하는지 알려주세요.

당신과 같은 웹 디자이너와 개발자의 초기 피드백은 CSS가 최고가 되는 방법입니다.

한편, 브라우저 전반에 걸쳐 훌륭한 지원을 제공하는 것이 있으며 곧 사파리 17, 카운터 스타일에 올 것입니다.

당신은 아마도 CSS를 사용하는 것이 어떤 번호 매겨진 시스템이 사용되는지 변경할 수 있는 쉬운 메커니즘을 제공하는 HTML의 정렬된 목록에 매우 익숙할 것입니다.

여기서 저는 목록 스타일을 적용하고 있습니다: 데바나가리.

한 줄의 CSS로 적용할 수 있는 수십 개의 다른 미리 정의된 번호 매기 시스템이 있으며, 전 세계의 많은 언어를 다룹니다.

하지만 전부는 아니야.

세르보크로아티아인은 어때?

목록 스타일을 지정하면: upper-serbo-croatian, 나는 기본 서양 아랍어 숫자를 얻는다.

여기가 카운터 스타일이 들어오는 곳이다.

나는 브라우저가 하는 방식과 비슷한 번호 매기 시스템을 정의할 수 있다.

@Counter-style, 그리고 내가 주고 싶은 이름, 그리고 나서 나는 그 스타일의 자질을 정의한다.

이 경우, 시스템을 알파벳으로 설정하고 기호를 나열합니다.

W3C 국제화 실무 그룹은 전 세계 수백 개의 문화를 다루는 기성품 카운터 스타일 문서를 출판했다.

우리는 WebKit에서 지원하는 언어의 수를 늘렸고, 모든 브라우저가 이 모든 것을 지원하는 것에 대해 CSS 워킹 그룹에서 논의를 시작했습니다.

하지만 그렇게 될 때까지, 이 문서에서 코드 스니펫을 복사하여 코드에 붙여넣을 수 있습니다.

당신은 또한 스타일 목록 카운터를 완전히 맞춤화할 수 있습니다.

나는 최소 네 자리의 이진 항목으로 계산하기 위해 이 목록을 스타일링했다.

그리고 이것은 이모티콘 세트를 반복해서 순환하는 것이다.

CSS 카운터는 목록 외에도 페이지의 다른 콘텐츠에 번호를 매길 때도 사용할 수 있습니다.

긴 문서에서 각 섹션을 시작하는 헤드라인처럼.

여기 예시가 있어.

나는 각 헤드라인에 단어만 있는 세 개의 H2 헤드라인을 가지고 있다.

CSS에서, 나는 카운터 리셋을 선언하여 카운터를 만든다.

나는 그것을 "번호 매기기"라고 명명했고 0 이후에 계산을 시작하도록 설정했다.

그런 다음, :before 의사 요소를 사용하여, 나는 브라우저에 카운터를 증가시키고 콘텐츠에 표시하라고 말한다.

기본적으로 카운터는 서양 아랍어 숫자--1, 2, 3--를 사용하지만 우리는 그것을 바꿀 수 있다.

이전과 마찬가지로, 나는 카운터를 내가 원하는 무엇이든 스타일링할 수 있다.

그것이 카운터를 만들고 스타일링하는 방법이다.

하지만 그것이 당신이 타이포그래피를 다음 단계로 끌어올릴 수 있도록 올해 우리가 하는 전부는 아닙니다.

사실, 올해 더 많은 CSS가 출시될 것이다.

Safari 16.2에서, 우리는 또한 그리드와 플렉스박스에 대한 마지막 기준선 정렬에 대한 지원과 글꼴-변형-대체 및 @font-feature-값 내부의 여러 기능을 추가하여 오픈 타입 기능을 추가로 지원했습니다.

사파리 16.4는 또한 미디어 쿼리 범위 구문과 부울 논리, @property 등에 대한 지원을 추가했습니다.

사파리 16.5는 또한 CSS 중첩에 대한 지원을 추가했다.

그리고 Safari 17에서, 우리는 또한 글꼴 기술 및 글꼴 형식의 기능 감지, 내재적 크기 포함, 텍스트 변환: 전체 너비 및 전체 크기 가나 등을 추가하고 있습니다.

우리는 문제를 제기하거나, 소셜 미디어에서 우리를 핑하거나, 어떤 웹 기술을 가장 구현하거나 개선해야 하는지 알려주기 위해 블로그 게시물을 작성하는 모든 사람들에게 큰 감사를 전하고 싶습니다.

우리는 듣고 있으며, 당신의 의견은 영향을 미칩니다.

또 뭐가 필요한지 알려주세요.

WebKit의 문제 추적기인 bugs.webkit.org에서 웹 기술에 대한 버그 보고서와 기능 요청을 제출할 수 있습니다.

Safari의 인터페이스 또는 iOS, iPadOS 및 macOS에 관한 모든 문제는 feedbackassistant.apple.com에 제출하십시오.

사파리에서 지원되는 것에 대한 최신 정보를 가지고 있는지 확인하세요.

우리는 종종 개발자들로부터 실제로 이미 배송된 것을 구현해 달라는 요청을 듣는다.

Caniuse는 이것을 위한 환상적인 자원이다.

또한 webkit.org에서 최신 뉴스를 확인할 수 있으며, 여기에서 Safari의 각 릴리스에 대한 심층 기사, Safari Technology Preview의 릴리스 노트, Web Inspector에 대한 광범위한 문서 등을 찾을 수 있습니다.

미래에 일어날 일을 따라잡기 위해 사파리 기술 미리보기를 다운로드하세요.

그것은 약 2주마다 업데이트되므로, WebKit에 최신 추가 사항이 있습니다.

사파리 기술 미리보기에는 또한 기본적으로 미리 볼 수 있는 모든 새로운 기능이 있습니다.

또는 Safari 17에서 시작하여 Safari 설정의 새로운 기능 플래그 창에서 기능을 켜고 끌 수 있습니다. 완전히 재설계된 개발 메뉴에서 Mac의 웹 인스펙터를 iPhone, iPad 또는 기타 장치의 웹 및 웹 앱에 무선으로 연결하거나, 무료 장치 시뮬레이터를 다운로드하고 개발 메뉴 또는 재설계된 반응형 웹 디자인 모드에서 점프하여 가지고 있지 않은 장치에서 테스트할 수 있습니다.

WWDC23에서 "사파리 개발자 기능 재발견"을 보고 모든 것에 대해 알아보세요.

웹 앱이 Mac에 출시되고 있다.

게다가 우리는 iPhone과 iPad의 웹 앱에 대한 개선으로 가득 찬 한 해를 가득 채웠다.

"웹 앱의 새로운 기능"은 모든 것을 다룹니다.

그리고 JPEG XL을 포함한 Safari와 WebKit에 오는 새로운 이미지 형식과 "웹용 미디어 형식 탐색"의 새로운 관리 미디어 소스 API에 대해 알아보세요.

우리는 올해 WebKit과 Safari에서 얼마나 많은 새로운 웹 기술이 출시되고 있는지에 대해 매우 기쁘고 당신도 그러길 바랍니다.

그리고 우리는 네가 그걸로 뭘 만드는지 빨리 보고 싶어.

봐줘서 고마워.