10278

♪ ♪

Romain: 안녕하세요, 제 이름은 Romain이고, 저는 Xcode Cloud에서 일하는 엔지니어입니다.

Xcode Cloud는 팀의 개발 프로세스에 바로 통합될 수 있을 만큼 유연한 강력한 도구입니다.

그것은 생산성을 높이고 고객에게 더 나은 앱을 제공하는 데 도움을 줄 수 있다.

이 세션에서, 저는 현실 세계에서 만날 수 있는 상황을 기반으로 Xcode Cloud에서 워크플로우를 만드는 것에 대해 이야기할 것입니다.

팀은 다양하고 독특한 개발 프로세스와 함께 모든 형태와 크기로 제공됩니다.

실용적인 워크플로우를 설계하는 데 도움을 주기 위해, 우리는 세 가지 가상의 사례 연구를 상상할 것이다.

이러한 각 사례 연구는 사람들이 Xcode Cloud를 채택할 때 볼 수 있는 일반적인 상황과 비슷할 것이다.

우리는 단일 앱에서 작업하는 솔로 개발자를 보는 것으로 시작할 것입니다.

그런 다음, 우리는 레거시 코드와 복잡한 개발 프로세스를 다루는 대규모 팀으로 올라갈 것입니다.

이 세션에서, 우리는 모든 팀에 적합한 워크플로우를 만들고 사용자 정의할 수 있는 많은 옵션 중 일부를 시연할 것입니다.

우리의 첫 번째 사례 연구부터 시작합시다.

우리에게 솔로 개발자가 있다고 가정해 봅시다.

그들은 iOS와 macOS 모두에서 사용할 수 있는 하나의 앱을 가지고 있다.

대부분의 코딩 작업은 모든 새로운 코드 변경 사항이 푸시되는 메인 브랜치에서 수행됩니다.

물론, 그들은 때때로 새로운 API와 플랫폼 기능을 실험할 때 다른 지점을 사용할 것이지만, 대부분의 경우 주요 지점을 사용합니다.

그들의 코드는 몇 가지 종속성에 의존하며 그들은 Cocoapods를 다운로드하여 프로젝트에 통합하기 위해 선택했다.

마지막으로, 그들은 TestFlight를 통해 앱에 대한 피드백을 테스트하고 제공할 수 있는 일부 친구와 가족에게 앱 빌드를 배포합니다.

때때로, 그들은 앱 스토어에 새 버전의 앱을 수동으로 출시한다.

이 개발자는 1인 쇼이다.

그들은 앱을 만드는 것부터 앱 스토어에 배포하는 것까지 모든 것을 스스로 관리하고 있다.

그들에게는 단순함이 핵심이 될 것이다.

그들은 의지하고 유지할 수 있는 무언가가 필요할 것이다.

Xcode Cloud를 사용하면 새로운 코드를 푸시하고, 앱을 구축하고, 테스터에게 배포하는 전체 프로세스를 하나의 작지만 강력한 워크플로우에서 수행할 수 있습니다.

이 워크플로우가 어떻게 생겼는지 자세히 알아보기 전에, Xcode Cloud 워크플로우가 무엇인지 일시 중지하고 새로 고쳐봅시다.

예를 들어, 애플리케이션을 구축하고, 테스트를 실행하고, 테스터에게 배포하는 등.

"어디"는 Xcode 버전과 사용하려는 macOS 버전과 환경 변수와 같은 다른 구성입니다.

함께, 그들은 당신의 워크플로우가 실행되기를 원하는 환경을 형성합니다.

마지막으로, "언제"는 이러한 행동이 일어나기를 원하는 때입니다.

특정 브랜치에 코드를 푸시할 때 시작하시겠습니까?

아니면 매일 오후 4시에?

하나 이상의 시작 조건을 정의하면 워크플로우를 실행할 때의 기준이 설정됩니다.

좋아.

이제 우리의 기억에 신선하게, "무엇", "어디서", "언제"를 솔로 개발자의 상황에 적용해 봅시다.

나는 그들이 모든 프로세스를 자동화하는 데 사용할 수 있는 Xcode Cloud 워크플로우를 만들 것이다.

여기, 저는 이미 Xcode Cloud에 프로젝트를 설정했습니다.

보고서 네비게이터에서 클라우드 아이콘을 선택하고 제품 이름을 마우스 오른쪽 버튼으로 클릭한 다음 "워크플로 관리"를 선택합니다.

이렇게 하면 더하기 기호를 클릭하여 메뉴를 열고 첫 번째 항목을 선택하여 앱에 대한 새로운 워크플로우를 만드는 워크플로우 편집기가 열립니다.

이름 필드에 "CI 워크플로우"를 입력하겠습니다.

나는 설명 필드를 건너뛸 것이지만, 세부 사항을 자유롭게 추가할 수 있다.

이제, 환경 섹션을 살펴봅시다.

이 섹션에서는 최신 버전의 Xcode와 최신 버전의 MacOS가 기본적으로 선택되어 있음을 알 수 있습니다.

이것은 나에게 좋아 보인다, 그래서 나는 거기서 어떤 변화도 하지 않을 것이다.

각각의 새로운 워크플로우에는 기본 시작 조건이 있습니다.

한 번 보자.

이 시작 조건은 변경 사항이 기본 브랜치로 푸시될 때마다 빌드를 생성합니다. 이 경우 메인입니다.

이것은 거의 정확하지만, 이 솔로 개발자는 코드가 주요 브랜치뿐만 아니라 모든 브랜치로 푸시될 때 빌드를 시작하고 싶어 한다.

소스 브랜치 옵션을 "모든 브랜치"로 변경하겠습니다.

이 워크플로우의 목표는 애플리케이션을 구축하고 배포하는 것이다.

우리는 배포를 위한 빌드를 준비하는 아카이브 작업이 필요하다.

작업 섹션 옆에 있는 더하기 쪽을 클릭하고 아카이브를 선택할 것입니다.

보시다시피, iOS 플랫폼은 이미 선택되어 있으므로, 배포 준비 섹션에서 "TestFlight 및 App Store" 옵션을 선택하려고 합니다.

이제 우리의 워크플로우가 배포할 수 있는 빌드를 생성할 것이기 때문에, 저는 빌드를 App Store Connect에 업로드하는 포스트 액션을 추가할 것입니다.

그렇게 하려면, 게시물 작업 섹션에서 더하기 기호를 클릭하고 "TestFlight 외부 테스트"를 선택할 것입니다.

거기에서, 나는 그룹 섹션에서 더하기 면을 클릭하고 "친구와 가족" 테스터 그룹을 선택할 것이다.

그리고 그렇게, 우리는 거의 끝났어.

우리의 솔로 개발자는 iOS와 macOS를 대상으로 하는 애플리케이션에서 작업하기 때문에, 저는 제 워크플로우가 두 플랫폼 모두에서 앱을 보관하고 출시하기를 원합니다.

그렇게 하기 위해, 나는 또 다른 아카이브 작업을 추가할 것이다.

macOS 플랫폼과 TestFlight App Store 배포 준비를 선택하세요.

그런 다음, 나는 또 다른 TestFlight 외부 테스트 사후 조치를 추가할 것이다.

"아카이브 - macOS" 아티팩트를 선택하세요.

그리고 테스터를 위해 같은 그룹을 선택하세요.

마지막으로, 나는 워크플로우를 만들기 위해 저장을 누를 것이다.

우리는 이전에 이 개발자가 Cocoapods를 사용하여 앱에 필요한 종속성을 포함한다고 언급했습니다.

Xcode Cloud는 Swift Package Manager를 지원합니다.

그것은 Xcode에 바로 내장되어 있다.

하지만, 다른 종속성 관리자는 Xcode Cloud에서도 사용할 수 있습니다.

소량의 구성만 있으면 됩니다.

더 인기 있는 종속성 관리자를 사용하는 방법에 대한 몇 가지 문서가 있습니다.

그 문서는 다른 사람들을 사용하는 방법에 대한 가이드로 사용될 수 있다.

이 솔로 개발자의 경우, 문서는 복제 후 사용자 지정 스크립트를 사용하여 Cocoapods 도구를 설치하고 실행할 것을 제안합니다.

사용자 지정 빌드 스크립트는 Xcode Cloud 빌드의 특정 지점에서 추가 작업을 실행할 수 있는 방법을 제공합니다.

이 예에서, 복제 후 스크립트는 모든 소스 코드가 임시 빌드 환경으로 복제된 후에 실행됩니다.

우리는 추후 사례 연구에서 사용자 지정 스크립트의 또 다른 예를 보게 될 것이다.

그리고 그것은 솔로 개발자의 워크플로우이며, 갈 준비가 되었습니다!

다음에 코드를 푸시할 때, Xcode 클라우드 빌드가 시작되고, 앱은 iOS와 macOS 모두에서 보관될 것이다.

그런 다음, 새로운 빌드는 앱에 대한 피드백을 테스트하고 제공할 친구와 가족 그룹의 손에 들어갈 것이다.

이제, 한 단계 올라가서 우리의 두 번째 사용 사례를 살펴봅시다: 중간 규모의 팀.

전 세계에 퍼져 있는 개발자, 프로젝트 관리자 및 QA 엔지니어로 구성된 팀을 상상해 봅시다.

그들은 iPhone과 iPad에서 사용할 수 있는 iOS 앱을 만든다.

각 개발자는 각자의 지점에서 일한다.

그들은 풀 리퀘스트를 사용하여 변경 사항을 "베타"라는 브랜치로 다시 병합합니다.

그들의 내부 QA 팀은 앱과 기능이 의도한 대로 작동하는지 확인하기 위해 특정 지점에서 만든 빌드를 설치하고 테스트합니다.

새 버전의 앱을 출시하고 싶을 때, 베타 브랜치를 릴리스 브랜치로 병합하고 릴리스를 표시하기 위해 새 태그를 푸시합니다.

버그를 포착하고 회귀를 피하기 위해, 이 앱은 단위와 UI 테스트 모두에서 매우 잘 테스트되었습니다.

그들은 TestFlight를 사용하여 개발 중 다른 지점에서 내부 및 외부 테스터에게 앱을 배포합니다.

마지막으로, 그들은 슬랙을 통해 그들의 일에 대해 소통하고 협업한다.

이것은 꽤 흔한 예이다.

그들은 고품질의 바를 유지하면서 동시에 작업하고 협업하기 위해 도구를 사용하고 있다.

그들의 프로세스는 세 개의 Xcode Cloud 워크플로우로 구현될 수 있다.

먼저, 베타 브랜치를 변경하는 데 도움이 되는 풀 리퀘스트 워크플로우를 만들 것입니다.

그런 다음, 나는 QA 팀의 손에 내부 빌드를 제공하는 베타 워크플로우를 만들 것이다.

마지막으로, 나는 외부 테스터와 App Store에 새로운 버전의 앱을 출시하기 위한 최종 워크플로우를 만들 것이다.

각 워크플로우를 그 순서대로 살펴봅시다.

팀은 풀 리퀘스트를 사용하여 모든 새로운 코드 변경 사항을 앱에 통합하는 것을 관리합니다.

개발자가 풀 리퀘스트를 열면, 팀원들은 코드를 검토하고, 앱이 예상대로 작동하는지 확인하기 위해 테스트를 실행합니다.

이 첫 번째 워크플로우는 새로운 풀 리퀘스트가 열리거나 기존 풀 리퀘스트가 업데이트될 때 테스트가 실행되도록 하는 것입니다.

이 작업 흐름을 만들어 봅시다.

먼저, 저는 더하기 기호를 클릭하여 제 제품에 대한 새로운 워크플로우를 만들 것입니다.

이름 필드에 "Pull Requests"를 입력하겠습니다.

이 워크플로우의 경우, 팀은 풀 리퀘스트가 열릴 때 Xcode Cloud가 빌드를 시작하기를 원하지만, "베타" 브랜치를 대상으로 할 때만 가능합니다.

각 빌드에 대해, 그들은 테스트를 실행하기를 원한다.

새로운 시작 조건을 추가하는 것으로 시작합시다.

시작 조건 섹션에서 더하기 기호를 클릭하고 "변경 요청 취소" 항목을 선택합니다.

기본적으로 모든 브랜치에 대한 빌드가 시작되므로 대상 브랜치 섹션에서 "사용자 지정 브랜치"를 선택한 다음 더하기 기호 버튼을 클릭하고 "베타"를 입력합니다.

우리는 하나의 시작 조건만 필요하므로, "지점 변경"을 제거할 수 있습니다.

이제 나는 테스트를 실행하기 위해 새로운 행동을 추가할 것이다.

작업 섹션 옆에 있는 더하기 기호를 클릭하고 "테스트"를 선택하겠습니다.

이 앱은 iOS와 iPadOS를 모두 대상으로 하므로, 팀은 테스트가 다른 화면 크기와 기능의 장치에서 통과하는지 확인하고자 합니다.

목적지 섹션에서, 나는 작은 아이폰 하나, 아이폰 13, 큰 아이폰 하나, 아이폰 14 프로 맥스를 선택할 것이다...

...작은 아이패드 하나, 아이패드 미니...

..그리고 마침내, 당신은 그것을 추측했습니다, 하나의 큰 아이패드, 아이패드 프로.

그럼 난 저장을 누를 거야.

굉장해.

이제, Xcode Cloud에서 성공적으로 빌드한 후, 바라건대 팀원들의 철저한 코드 검토를 통해, 개발자는 풀 리퀘스트를 병합하고 베타 브랜치로 변경 사항을 얻을 수 있을 것이다.

편리하게, 이것은 우리를 다음 워크플로우로 데려옵니다: 베타 빌드 워크플로우.

베타 브랜치는 다가오는 모든 변경 사항이 있는 곳이다.

개발자가 풀 리퀘스트를 병합할 때, QA 팀은 몇 가지 검증 테스트를 수행할 수 있도록 새로운 변경 사항이 포함된 앱 빌드를 얻고 싶어합니다.

이것은 QA 팀에 빌드를 배포하는 이 새로운 워크플로우의 기초가 될 것이다.

Xcode로 돌아가서 이 워크플로우를 만들어 봅시다.

이 베타 워크플로우는 내가 이전에 만든 워크플로우의 혼합이다.

그 팀은 변경 사항이 "베타" 브랜치에 병합될 때마다 빌드를 출시하기를 원한다.

그들은 테스트를 실행하고, 앱을 보관하고, App Store Connect에 업로드하는 워크플로우가 필요합니다.

그것을 달성하기 위해, 새로운 워크플로우를 만들어 봅시다.

"베타 릴리스"라고 부르세요.

그리고 그에 따라 시작 조건을 업데이트하세요.

기존 지점 변경 시작 조건을 선택하고 지점을 메인에서 베타로 변경할 것입니다.

그런 다음, 나는 아카이브 빌드 작업을 추가할 것이다.

그리고 배포 준비에서 "TestFlight 내부 테스트"를 선택하세요.

여기서, 우리는 이 빌드가 실수로 생산에 배포되는 것을 원하지 않기 때문에 내부 배포를 사용하고 있습니다.

이제, 저는 App Store Connect에 업로드되는 포스트 빌드 액션을 추가할 것입니다.

이 포스트 액션은 내부 테스터 그룹에 애플리케이션을 배포할 것이다.

나는 TestFlight 내부 테스트 포스트 액션을 추가할 것이다.

그룹 섹션 아래의 더하기 기호를 클릭하고, "QA 팀"을 선택하세요.

좋아, 우리는 여기서 멈출 수 있지만, 고장난 빌드를 배포하는 위험을 감수하고 싶지 않아.

안전망으로서, 우리는 그 워크플로우의 일부로 테스트를 실행할 것이다.

나는 풀 리퀘스트 워크플로우에서 테스트 작업을 반복할 것이다.

다시 한 번, 저는 작은 아이폰 하나, 큰 아이폰 하나, 작은 아이패드 하나를 선택할 것입니다...

...그리고 큰 아이패드 하나.

이제 저장을 눌러 이 워크플로우의 생성을 마무리할 수 있습니다.

베타 빌드 워크플로우는 QA 팀의 손에 들어가지만, 팀이 하고 싶은 일이 하나 더 있다.

그들은 베타 빌드에 대체 앱 아이콘을 사용하고 싶어 한다.

그렇게 하면, 그들은 어떤 빌드가 내부적이고 어떤 빌드가 App Store에 준비되어 있는지 빠르게 결정할 수 있다.

이것은 Xcode Cloud의 사용자 지정 스크립트가 도움이 될 수 있는 또 다른 완벽한 상황입니다.

이전에, 우리는 소스 코드가 복제된 후 실행되는 사용자 지정 스크립트를 보았다.

여기서, 우리는 아이콘을 변경하기 위해 사전 빌드 스크립트를 사용할 것입니다.

스크립트에서 사용할 수 있는 환경 변수를 사용하여, 베타 워크플로우의 빌드 단계에서만 아이콘을 교체할 것입니다.

이를 달성하는 방법에 대해 더 알고 싶다면, 이 정확한 사용 사례가 자세히 다루는 WWDC21의 세션인 "고급 Xcode 클라우드 워크플로우 사용자 정의"를 참조하십시오.

우리는 사용 가능한 세 가지 유형의 사용자 지정 스크립트 중 두 가지만 사용했습니다.

어떤 다른 스크립트를 사용할 수 있는지, 어떤 환경 변수를 사용할 수 있는지 궁금하다면, 우리의 문서는 이 모든 것을 자세히 설명합니다.

그리고 그것은 베타 빌드 워크플로우를 위한 것이다.

이제 이 팀의 최종 워크플로우인 출시 워크플로우를 살펴봅시다.

많은 변경 사항이 베타 브랜치에 도착하고 QA에 의해 검증된 후, 팀은 새로운 릴리스를 준비할 것이다.

그들의 프로세스는 개발자 중 한 명이 베타 브랜치를 릴리스 브랜치에 병합한 다음 릴리스를 표시할 태그를 만들어야 합니다.

태그의 이름은 단어 릴리스로 시작한 다음 버전으로 시작해야 합니다.

이것이 완료되면, 앱은 구축되고, App Store Connect에 업로드되며, 내부 이해 관계자 그룹과 일부 열성적인 고객에게 배포됩니다.

우리의 세 번째이자 마지막 워크플로우는 새로운 릴리스 태그가 푸시되었을 때 빌드가 생성되기를 원한다는 점을 제외하고는 베타 워크플로우와 매우 유사합니다.

Xcode로 돌아가서 이 워크플로우를 만들어 봅시다.

이 워크플로우에 필요한 단계는 내가 베타 워크플로우에서 만든 단계와 거의 동일하다.

나는 시작 조건을 만들고, 앱을 보관하는 것과 같은 모든 단계를 거칠 수 있다.

대신, 베타 워크플로우를 복제할 수 있는 Xcode Cloud 기능으로 안내하고 싶습니다.

먼저, 베타 워크플로우를 마우스 오른쪽 버튼으로 클릭하고, 복제를 선택한 다음, 워크플로우의 이름을 베타에서 릴리스로 바꿀 것입니다.

그러면, 나는 새로운 시작 조건을 추가할 것이다.

그래서 나는 시작 조건 섹션에서 더하기 기호를 클릭하고 "태그 변경"을 선택할 것이다.

브랜치 변경과 마찬가지로, 태그가 푸시될 때마다 빌드를 만들고 싶지는 않지만, 태그의 이름이 "릴리스"라는 단어로 시작할 때만 가능합니다.

나는 "태그" 섹션에서 "사용자 지정 태그"를 선택할 것이다.

"해제/"를 입력하세요...

...그리고 메뉴에서 "출시/로 시작하는 태그"를 선택하세요.

이 시작 조건이 생성되면, 기존 "지점 변경" 시작 조건으로 돌아가서 삭제할 것입니다.

이제, 기존 아카이브 작업으로 넘어가자.

베타 워크플로우는 내부적으로, 특히 QA 팀에 빌드를 배포하기 위해 만들어졌습니다.

여기서, 팀은 외부 테스트와 App Store를 위한 출시를 준비하고 싶어 한다.

배포 준비 섹션에서 "Testflight and App Store" 옵션을 선택할 것입니다.

그렇긴 하지만, 우리는 여전히 내부 이해 관계자 팀에 빌드를 배치하고 싶습니다.

기존 포스트 빌드 작업을 선택하고 QA 팀 그룹을 제거할 것입니다.

그런 다음, 나는 더하기 기호를 클릭하고 "Executive Stakeholders" 그룹을 선택할 것이다.

마지막 단계로, 나는 또 다른 포스트 액션을 추가할 것이지만, 이번에는 TestFlight 외부 테스트를 선택하세요.

Post Actions 섹션에서 더하기 기호를 클릭하고 TestFlight External Testing을 선택할 것입니다.

그런 다음, 그룹 섹션에서 더하기 기호를 클릭하고 얼리 어답터 그룹을 선택하겠습니다.

이제, 출시 워크플로우가 거의 준비되었습니다.

우리는 이전에 이 팀이 슬랙을 사용하여 서로 소통하고 협업한다고 언급했다.

이 팀의 경우, 슬랙에서 빌드에 대한 업데이트를 받는 것은 개발 프로세스와 완벽하게 일치할 것이다.

빌드가 실패하고 출시할 수 없는 경우 이것은 특히 중요합니다.

작업 흐름에 마지막 단계를 추가합시다.

릴리스 워크플로우에서, 나는 사후 작업 섹션에서 더하기 기호를 클릭하고 통지를 선택할 것이다.

Xcode Cloud는 이메일과 슬랙을 통해 알림 전송을 지원합니다.

여기서, 슬랙 아래의 더하기 기호를 클릭하고 "리출시 피드" 채널을 선택한 다음 확인을 누르겠습니다.

그것으로 우리의 두 번째 사용 사례를 마칩니다.

이 세 가지 워크플로우는 팀의 모든 개발 과정을 다룹니다.

그들은 앱을 구축하고 지속적으로 테스트를 실행하여 개발자들이 자신감을 가지고 기여할 수 있도록 한다.

그들은 앱을 자주 보관하고 배포하여 다양한 그룹의 사람들이 피드백을 제공할 수 있도록 합니다.

이것은 팀이 모든 프로세스에 적응하는 도구의 도움으로 훌륭한 품질의 앱을 출시할 수 있는 매우 일반적인 상황입니다.

더 큰 팀이 Xcode Cloud로 마이그레이션하고자 하는 세 번째이자 마지막 사용 사례를 살펴봅시다.

우리의 마지막 사례 연구를 위해, 우리에게 대규모 개발자 팀이 있다고 말하세요.

이 팀은 우리가 방금 살펴본 중간 규모의 팀과 많은 유사점을 공유하며, 약간의 반전이 있다.

그 팀은 더 크고 코드 기반은 훨씬 더 복잡하다.

그들은 App Store가 시작된 이래로 존재해 온 iOS와 iPadOS에 앱을 가지고 있다.

그 이후로 여러 번 재설계되고 업데이트되었으며, 개발자들은 특히 QA를 할 때 많은 레거시 코드와 복잡성을 다루고 있다.

그들은 많은 시험이 있다.

최근에, 그들은 테스트 중심의 개발 접근 방식을 채택했고 새로운 코드 변경마다 많은 새로운 테스트가 추가되고 있다.

많은 사람들이 앱의 성공적인 업데이트에 참여하기 때문에, 그들은 종종 피드백을 수집하기 위해 내부와 외부의 다양한 TestFlight 그룹에 새로운 빌드를 배포합니다.

그 팀은 전 세계에서 일하는 많은 개발자들을 포함하며, 슬랙을 사용하여 소통하고 협업한다.

하지만 여기 흥미로운 반전이 있습니다.

그들은 이미 그들의 일을 끝내기 위해 지속적인 통합과 지속적인 배치에 의존하고 있다.

현재, 그들은 팀원 중 한 명이 유지하고 운영하는 사내 솔루션을 사용한다.

이 시스템에 대한 접근과 지식은 제한되어 있어, 문제를 조사하기 어렵고 해결하기가 훨씬 더 어렵다.

이러한 이유로, 그들은 이 사내 시스템을 대체하기 위해 Xcode Cloud로 전환하는 것을 고려하고 있다.

게다가, 그들은 프로젝트 관리 도구를 사용하여 그들이 하고 있는 일을 추적, 조정 및 우선순위를 정한다.

그들은 또한 다양한 대시보드와 상태 페이지를 만들었다.

그렇게 하면, 앱 개발에 직접 관여하지 않은 사람들은 프로젝트의 진행 상황을 추적할 수 있다.

Xcode Cloud는 이런 종류의 팀에 매우 적합하지만, 이러한 복잡성의 프로젝트를 새로운 CI 시스템으로 마이그레이션하는 것은 어렵고 압도적으로 느껴질 수 있습니다.

이 상황에서, 내 추천은 이 이주를 다른 이정표로 나누는 것이다.

각 이정표는 일정 기간 동안 기존 시스템에서 Xcode Cloud로 워크로드를 옮기는 것을 포함한다.

여기서 주요 초점은 팀을 생산적이고 행복하게 유지하면서 성공적인 이주를 허용하는 것이다.

워크플로우 구성을 보는 대신, 그 이정표가 무엇인지 살펴봅시다.

내 추천은 이 이주를 뚜렷한 이정표로 나누는 것이다.

첫 번째 단계는 App Store에 출시할 수 있는 앱 버전을 만드는 워크플로우를 만드는 것입니다.

두 번째는 테스트가 안정적으로 작동하도록 하는 것이다.

세 번째는 팀의 개발 프로세스와 일치하고 개선하는 나머지 워크플로우를 수립하는 것이다.

우리는 릴리스 워크플로우를 만드는 것부터 시작하여 이러한 각 단계를 자세히 살펴볼 것입니다.

Xcode Cloud로 마이그레이션할 때, 앱의 App Store 지원 빌드를 보관하고 업로드하는 워크플로우를 만드는 것이 좋습니다.

이것은 우리가 이미 만든 몇 가지 예시 워크플로우와 같으며 나머지 팀의 중단 없이 달성할 수 있습니다.

거기서부터 시작하면, Xcode Cloud에 바로 내장된 클라우드 코드 서명 기능을 사용할 수 있습니다.

빌드에 서명하기 위해 인증서와 프로비저닝 프로필을 망칠 필요가 없습니다.

이것은 또한 종속성 및 기타 구성 변경과 관련하여 앱을 성공적으로 구축하기 위해 필요한 것을 볼 수 있는 좋은 방법입니다.

이 워크플로우가 준비되면, App Store 지원 빌드를 만드는 부분으로 팀의 정기적인 개발 프로세스에 포함될 수 있습니다.

이것은 기존 시스템에서 Xcode Cloud로 이동한 첫 번째 작업이다.

다음으로, 테스트가 안정적으로 작동하도록 하는 데 집중할 시간이다.

지속적인 통합 시스템에서 테스트는 매우 까다로울 수 있다.

종종, 테스트는 그들이 만들어졌을 때 사용되었던 CI 환경에서 실행되도록 맞춤화되었을 것이다.

새로운 CI 환경에서 실행할 때, 그들은 안정적으로 실행되지 않아 빌드가 실패할 수 있다.

Xcode Cloud를 만드는 동안, 우리는 이 특정 문제에 대해 생각했고, 팀이 테스트를 원활하게 실행하는 데 정말로 도움이 될 수 있다고 믿는 기능을 구축했습니다.

이 기능은 Xcode Cloud가 워크플로우의 일부 작업의 실패를 무시하고 빌드를 완료하게 합니다.

이 기능을 활성화하려면, 워크플로우 작업에서 "요구 사항" 아래의 "통과하지 않아도 됩니다" 옵션을 선택하세요.

통과할 필요가 없는 작업을 지정함으로써, 이 작업의 결과는 Xcode Cloud 빌드의 최종 결과에 영향을 미치지 않습니다.

테스트는 실패할 수 있지만, 그럼에도 불구하고 빌드는 성공할 것이다.

Xcode Cloud와 빌드 소스 코드 관리의 커밋 상태에는 여전히 녹색 체크 표시가 표시됩니다.

이것은 당신이 중요한 경로에서 지속적으로 테스트를 실행할 수 있다는 것을 의미하기 때문에 유용합니다.

그렇게 하면, 데이터를 집계하여 그들이 어떻게 수행하고 있는지 그리고 충분히 신뢰할 수 있는지 평가할 수 있습니다.

이 기능을 사용하여 Xcode Cloud에서 테스트를 진행하는 방법을 살펴봅시다.

그 팀은 앱의 많은 측면을 다루는 꽤 많은 테스트를 가지고 있다.

이 상황에서, 제 추천은 모든 풀 리퀘스트에 대해 실행되는 새로운 워크플로우를 만드는 것으로 시작하는 것입니다.

이 워크플로우에서 빌드 작업은 모든 테스트를 실행하지만 통과할 필요가 없는 것으로 표시됩니다.

테스트가 통과했는지 실패했는지 여부는 풀 리퀘스트가 아직 병합되는 것을 막지 않을 것이다.

지금 당장, 그 아이디어는 시험이 얼마나 신뢰할 수 있는지 평가하는 것이다.

기억합시다, 테스트는 여전히 기존 솔루션에서 실행되고 있으므로, 풀 리퀘스트는 일주일 정도 후에도 여전히 자신감 있게 병합됩니다.

팀은 풀 리퀘스트 빌드에서 테스트 결과 데이터를 보고 Xcode Cloud에서 어떤 테스트를 안정적으로 통과했는지 확인할 수 있습니다.

이러한 테스트는 신뢰할 수 있는 테스트라고 불리는 새로운 테스트 계획으로 이동할 수 있습니다.

그런 다음, 팀은 기존 풀 리퀘스트 워크플로우를 편집하고 특정 테스트 계획에서 테스트를 실행할 새로운 테스트 작업을 추가할 수 있습니다.

이번에는 풀 리퀘스트가 병합되기 전에 테스트 작업을 통과해야 합니다.

Xcode Cloud에서 테스트 계획을 사용하는 방법에 대한 자세한 내용은 WWDC22의 "Xcode Cloud에 대한 빠르고 신뢰할 수 있는 테스트"를 참조하십시오.

테스트 계획을 사용하여 코드 평가를 개선하는 방법에 대한 문서를 참조할 수도 있습니다.

현재 안정적으로 수행되지 않는 나머지 테스트는 신뢰할 수 있게 만들기 위해 어떤 변화가 필요한지 알아내기 위해 더 조사할 수 있다.

시간이 지남에 따라 변화가 이루어지면서, 그 테스트들은 다시 신뢰할 수 있다.

그들은 마침내 신뢰할 수 있는 테스트 계획으로 옮겨지고 변경 사항을 다시 검증하는 데 사용될 수 있다.

이 접근 방식을 사용하면 테스트를 단계별로 중요한 경로로 이동하고 Xcode Cloud 워크플로우에서 검증 및 테스트 범위를 제공할 수 있습니다.

테스트가 실행되고 있다는 것을 알게 되면, 이제 Xcode Cloud에서 안정적으로 실행되는 App Store 지원 빌드와 테스트가 있습니다.

이 두 워크로드는 기존 CI 솔루션에서 제거될 수 있다.

이제 세 번째이자 마지막 단계가 남았습니다: 팀의 개발 과정에 필요한 나머지 워크플로우를 구축하는 것입니다.

그 워크플로우 중 일부는 우리가 이 세션의 사례 연구에서 이미 본 것과 비슷할 것이다.

조건과 작업을 시작하기 위해 만들 수 있는 다양한 사용자 지정을 통해 CI 및 CD 프로세스를 자동화하는 데 도움이 되는 정말 강력한 워크플로우를 만들 수 있습니다.

우리는 또한 이 팀이 CI 시스템 외부에서 도구와 대시보드를 만들었다고 언급했다.

이러한 도구는 개발 프로세스를 유지하는 데 도움이 되며, Xcode Cloud와 통합될 수도 있습니다.

예를 들어, 웹훅 기능을 사용할 수 있습니다.

웹훅이 구성된 후, 빌드가 완료될 때마다, 빌드, 시작한 워크플로우 등에 대한 정보가 담긴 요청이 서버로 전송됩니다.

거기에서, 빌드가 베타 워크플로우에서 생성되었고 성공했다면, 작업 관리 시스템에서 새 티켓을 만들어 이 특정 빌드에서 QA 프로세스를 추적할 수 있습니다.

웹훅과 특히 그러한 요청이 전송될 때와 어떤 정보를 사용할 수 있는지에 대해 더 알고 싶다면, 우리의 문서를 참조할 수 있습니다.

또 다른 접근 방식은 Xcode Cloud 공용 API를 사용하는 것이다.

무엇보다도 최근 빌드에 대한 정보를 가져와 대시보드나 상태 페이지에 표시할 수 있습니다.

다시 한 번, 문서를 참조하여 Xcode Cloud의 공개 API를 사용하고 워크플로우에 통합하는 방법을 배울 수 있습니다.

Xcode Cloud의 공용 API와 웹훅 메커니즘은 규모에 관계없이 팀에 매우 유용한 기능입니다.

사용 가능한 모든 옵션을 결합할 때, 가능성은 무궁무진하다.

더 많은 예제를 보려면 WWDC22의 "팀을 위한 Xcode Cloud 딥 다이브" 세션을 참조할 수 있습니다.

이 세션에서, 우리는 당신의 팀이 생산성을 높일 수 있도록 만들 수 있는 다양한 유형의 간단하지만 강력한 워크플로우를 살펴보았습니다.

우리는 빌드의 다양한 지점에서 빌드 스크립트를 사용하여 빌드 프로세스를 사용자 정의하는 방법에 대한 몇 가지 예를 보여주었습니다.

마지막으로, 우리는 일부 기능을 통해 Xcode Cloud 위에 도구를 구축하고 외부 도구와 통합할 수 있다는 것을 보여주었습니다.

우리는 이 세 가지 사례 연구가 Xcode Cloud가 어떻게 당신의 팀에 적합하고 일상 업무를 개선할 수 있는지 깨닫는 데 도움이 되기를 바랍니다.

봐줘서 고마워.

♪ ♪