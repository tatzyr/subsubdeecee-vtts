10058

♪ ♪

제임스: 안녕. 저는 UIKit의 James Magahern이고, 텍스트와 텍스트 상호 작용의 새로운 기능에 대한 당신의 가이드가 될 것입니다.

텍스트는 모든 응용 프로그램에서 중요한 역할을 한다.

그것은 정보를 소비하고 소통하는 주된 방법이다.

이제 우리는 처음부터 시작하든 높은 수준의 추상화에서 시작하든 앱에서 강력한 텍스트 경험을 만들 수 있는 더 많은 도구를 제공하고 있습니다.

시스템 선택 UI에 대한 몇 가지 변경 사항, UITextViews에 텍스트 항목 작업 및 메뉴 추가, TextKit 2의 목록 및 글머리 기호, macOS의 받아쓰기 UI, 국제화를 위한 몇 가지 중요한 업데이트를 포함하여 텍스트 경험을 만들고 앱에서 활용하는 방법에 대한 많은 개선 사항을 검토할 것입니다.

우리는 선택 UI의 몇 가지 변경 사항에 대해 이야기하는 것으로 시작할 것입니다.

모든 플랫폼의 새로운 것은 완전히 재설계된 텍스트 커서입니다.

우리는 이제 입력 언어를 변경할 때 인라인 대화형 스위처를 표시하고, 범위를 선택할 때 더 인체 공학적 선택 핸들을 표시하며, 큰 텍스트 본문에 커서를 더 쉽게 배치할 수 있도록 완전히 새로운 루프가 있습니다.

앱이 UITextViews 또는 UITextFields를 사용하는 경우, 이 모든 새로운 UI를 자동으로 얻을 수 있습니다.

또한, 우리는 UITextInteraction의 고객도 새로운 선택 UI를 얻을 수 있도록 했습니다.

그러나, 텍스트를 표시하기 위한 고도로 맞춤화된 UI가 있다면, 특히 UITextInteraction을 채택할 수 없는 경우, 자체 구현에서 이러한 변경 사항을 따라잡는 것이 어려울 수 있습니다.

이것이 iOS 17에서 UITextInteraction에 포함된 제스처 없이 선택 UI를 제공하는 UITextSelectionDisplayInteraction을 추가한 이유입니다.

UITextSelectionDisplayInteraction은 모든 UIView에 설치할 수 있는 새로운 유형의 UIInteraction입니다.

또한 보기에서 선택 상태를 얻기 위해 상호 작용을 위한 다양한 방법을 정의하는 UITextInput 프로토콜을 구현하는 객체를 제공해야 합니다.

그런 다음 UITextSelectionDisplayInteraction은 커서 보기와 커서 액세서리뿐만 아니라 범위 하이라이트 및 선택 핸들을 제공하여 모든 무거운 작업을 수행할 것입니다.

이 모든 보기도 교체할 수 있으므로, 필요한 경우 동작을 사용자 정의할 수 있습니다.

다음은 코드에서 이것을 하는 방법의 예를 간략하게 살펴보겠습니다.

먼저, 선택 표시 상호 작용을 만들고 UITextInput 프로토콜을 구현하는 문서 객체를 제공합니다.

해당되는 경우, 이것은 당신의 견해와 같을 수 있습니다.

다음으로, 선택 UI를 표시하려는 보기에 상호 작용을 추가하기만 하면 됩니다.

이것은 컨테이너 뷰 또는 문서를 렌더링하는 뷰일 수 있습니다.

선택 상태가 변경될 때마다, 상호 작용에서 setNeedsSelectionUpdate를 호출하면 상호 작용이 새로운 선택 상태를 반영하기 위해 모든 뷰를 업데이트할 것입니다.

UITextSelectionDisplayInteraction 외에도, 우리는 또한 돋보기를 표시하기 위한 새로운 API를 추가했습니다.

모든 보기에서 사용할 수 있으며, UITextSelectionDisplayInteraction 또는 UITextInput을 사용할 필요가 없습니다.

루페의 업데이트를 구동하려면 UIPanGestureRecognizer와 같은 제스처 인식기를 사용하는 것이 좋습니다.

코드에서 루페 세션을 관리하는 방법은 다음과 같습니다.

팬 제스처 인식기를 사용할 때, 콜백에서 제스처의 위치와 선택 위젯, 이 경우 커서 보기를 잡으세요.

다음으로, 제스처가 시작되면, begin(at:)를 호출하여 새로운 UITextLoupeSession을 만들어 루페의 시작 위치, 선택 위젯 및 좌표 공간을 제공합니다.

그런 다음 제스처가 움직일 때, 기존 돋보기 세션에서 move(to:)를 호출하여 위치를 업데이트하십시오.

마지막으로, 제스처 인식기가 끝나면, 루페 세션에서 무효를 호출하여 해제해야 합니다.

다음으로 텍스트 항목 작업과 텍스트 보기 안에 메뉴를 표시하는 데 사용할 수 있는 방법을 검토하고 싶습니다.

UITextView의 텍스트 항목 상호 작용은 이제 UITextViewDelegate의 새로운 API를 사용하여 훨씬 더 사용자 정의할 수 있습니다.

이러한 새로운 추가를 통해 텍스트 항목의 기본 작업을 수정하거나 번역 앱에 표시된 후보 메뉴와 같은 메뉴를 표시할 수 있습니다.

이전에 UITextView를 통해 개발자는 링크와 첨부 파일에 대한 UITextViewDelegate의 shouldInteractWith API를 통해 항목 상호 작용을 비활성화할 수 있습니다.

iOS 17에서는 이제 텍스트 보기에서 텍스트 항목에 대한 항목 상호 작용을 사용자 정의할 수 있습니다.

UITextViewDelegate는 기본 작업을 모두 사용자 정의하거나 특정 텍스트 항목에 대한 메뉴를 제공하는 새로운 방법을 얻었습니다.

다음은 텍스트 항목이 실제로 무엇이며 앱과 어떻게 통합되는지에 대한 간략한 검토입니다.

텍스트 항목은 항목 상호 작용을 지원하는 콘텐츠를 나타냅니다.

여기에는 NSTextAttachment로 표시되는 텍스트 첨부 파일과 NSLinkAttributeName으로 표시되는 링크가 포함됩니다.

UITextItem은 이제 상호 작용을 위한 텍스트의 사용자 지정 범위 태그를 지원합니다.

상호 작용 범위에 태그를 지정하려면, 대화형으로 만들고 싶은 텍스트 범위를 나타내는 속성 문자열에서 UITextItemTagAttributeName을 사용하세요.

이러한 새로운 API를 사용하면 이제 텍스트 항목이 상호 작용할 때 기본 탭 또는 메뉴 동작을 변경할 수 있습니다.

예를 들어, 알려진 링크를 앱 내의 기존 보기로 리디렉션하거나 텍스트 부분에 사용자 지정 메뉴를 추가할 수 있습니다.

기본 작업이나 메뉴를 계속 억제하거나 비활성화하려면, menuConfiguration 또는 primaryAction 대리자 메서드에 대해 nil을 반환하기만 하면 됩니다.

다음은 사용자가 UITextView 내부의 링크를 탭하는 것에 대한 응답으로 메뉴를 표시하는 방법을 보여주는 작은 코드 예입니다.

UITextViewDelegate의 menuConfigurationFor:defaultMenu: 메소드를 구현하고 표시하려는 메뉴가 포함된 메뉴 구성을 반환하십시오.

나머지 상황에 맞는 메뉴와 인라인으로 표시하기 위해 메뉴 구성의 일부로 미리보기를 제공할 수도 있습니다.

목록과 글머리 기호 지원도 TextKit 2에 추가되었습니다.

지원서에서 이것을 어떻게 활용할 수 있는지 살펴볼게.

여러 종류의 글머리 기호 항목을 지원하는 것 외에도, 로마 숫자, 알파벳 및 소수점 순서도 지원됩니다.

각각은 장치나 앱의 구성된 로케일에 따라 자동으로 현지화되므로, 전 세계적인 국제화가 내장되어 있습니다.

다음은 속성 문자열을 사용하여 텍스트 목록을 시작하는 방법에 대한 빠른 예입니다.

NSParagraphStyle의 textLists 속성을 사용하여 정렬된 목록이 적용된 단락을 정의하십시오.

시스템은 줄 바꿈과 같은 줄 끝 문자를 기반으로 항목에 자동으로 번호를 매기고, UITextView는 입력 속성을 기반으로 단락 스타일을 자동으로 전파합니다.

macOS 소노마에서 받아쓰기가 작동하는 방식에는 몇 가지 큰 변화가 있다.

사용자 지정 텍스트 요소가 새로운 디자인과 잘 작동하는지 확인하는 데 도움이 되는 몇 가지 새로운 API가 있습니다.

이것이 새로운 받아쓰기 표시기가 macOS 14에서 작동하는 방식입니다.

iOS와 마찬가지로, 받아쓰기는 말하는 동안 후행 발광 효과가 있으며, 정지할 때 마이크 표시기가 나타납니다.

스크롤 후, 커서 옆의 표시기는 스크롤 보기의 가장자리에 달라붙고, 문서의 현재 위치로 돌아갈 수 있는 버튼을 제공한다는 점에 유의하십시오.

NSTextView와 같은 AppKit에서 표준 텍스트 컨트롤을 사용하는 경우, 이 동작을 즉시 사용할 수 있습니다.

앱이 삽입 지점을 보여주기 위한 맞춤형 구현을 제공하는 경우, 이 새로운 동작을 지원하기 위해 해야 할 약간의 작업이 있습니다.

iOS용 UITextSelectionDisplayInteraction과 마찬가지로, 이제 시스템의 선택 UI와 일관성을 유지할 수 있는 macOS용 새로운 API가 있습니다.

자신만의 커서를 그리는 대신, 커서 위치를 나타내기 위해 문서의 보기 안에 배치할 수 있는 사용자 정의 가능한 NSView 하위 클래스인 NSTextInsertionIndicator를 채택하십시오.

그것의 외관은 사용자 정의할 수 있다.

색상과 크기를 변경할 수 있습니다.

기본적으로, 그것은 현재 악센트 색상을 따를 것이다.

그것은 받아쓰기 효과를 정말 쉽게 지원한다.

시스템이 계층 구조에 적절한 뷰를 삽입할 수 있도록 약간의 구성이 필요합니다.

macOS에서 NSTextInsertionIndicator를 사용하는 방법은 다음과 같습니다.

NSTextInsertionIndicator 보기를 만들고 문서의 내용을 표시하는 모든 보기에 하위 보기로 추가하기만 하면 됩니다.

완료되면, effectsViewInserter를 시스템에서 제공하는 뷰를 문서의 뷰 계층 구조에 삽입하는 블록으로 설정하십시오.

시스템은 효과 뷰를 자동으로 배치하고 삽입 표시기가 움직일 때 업데이트되도록 합니다.

사용자 지정 텍스트 보기가 응답자 상태를 사임하면, displayMode를 숨김으로 설정하여 커서를 숨겨야 합니다.

텍스트가 삽입되면, 받아쓰기가 입력 소스로 사용되는 경우 프레임 업데이트가 자동으로 글로우 효과로 애니메이션됩니다.

글로우 효과를 비활성화해야 하는 경우, automaticModeOptions에서 showEffectsView 옵션을 제거하십시오.

사용자가 입력 모드를 변경하면, 효과 보기가 커서 아래에 수평 텍스트로 표시되어 언어 선택 UI를 표시합니다.

이 UI의 배치를 재정의해야 하는 경우, NSTextInputClient 구현에서 preferredTextAccessoryPlacement를 지정할 수 있습니다.

시스템은 액세서리를 그릴 위치를 결정하기 위해 이 속성의 값을 확인합니다.

받아쓰기 중에 텍스트 커서가 화면 밖에서 스크롤되면, 시스템은 또한 커서의 상대적인 위치를 나타내고 받아쓰기 지점으로 돌아갈 수 있는 여유를 제공하기 위해 스크롤 어웨이 표시기를 표시합니다.

이 동작이 사용자 지정 텍스트 보기에서 지원되는지 확인하려면 NSTextInputClient를 채택하고 selectionRect 및 documentVisibleRect 속성을 구현하십시오.

textInputClientWillStartScrollingOrZooming 및 willEndScrollingOrZooming을 호출하여 스크롤 시작과 종료에 대해 시스템에 알리십시오.

앱이 모든 언어로 잘 작동하는지 확인하는 것은 뛰어난 텍스트 경험을 제공하는 데 매우 중요합니다.

우리는 표준 텍스트 컨트롤을 몇 가지 중요한 변경하여 더 넓은 범위의 언어에서 가독성과 인체 공학을 향상시켰습니다.

앱에서 동적 유형을 지원하는 것은 모든 언어로 UI 레이아웃을 개선하는 데 큰 도움이 됩니다.

앱에서 텍스트 요소를 배치할 때 고려해야 할 중요한 것은 많은 언어가 레이아웃 방향과 글꼴 스타일 외에도 다양한 줄 높이를 가질 수 있다는 사실입니다.

언어 간의 가변 줄 높이를 다룰 때 발생하는 일반적인 문제는 잘린 텍스트의 문제이다.

이것은 나쁘게 보일 뿐만 아니라 가독성에 큰 영향을 미치고 앱의 전반적인 사용자 경험을 크게 방해할 수 있습니다.

이러한 문제는 특히 모든 언어로 앱을 테스트할 수 없는 경우 알아차리기 어려울 수 있습니다.

우리는 대부분의 경우 이 문제를 자동으로 해결하기 위해 UITextField 및 UILabel과 같은 표준 텍스트 요소를 개선했습니다.

그러나, 시스템이 이러한 요소의 클리핑을 방지할 수 있도록 여전히 따라야 할 몇 가지 모범 사례가 있습니다.

이러한 일반적인 클리핑 문제를 방지하기 위해, 우리의 모든 플랫폼은 이제 매우 역동적인 선 높이를 가진 언어를 수용하기 위해 UILabel 또는 UITextField의 선 높이를 자동으로 조정할 것입니다.

이 새로운 행동은 특정한 경우에만 일어난다.

먼저, 선 높이는 이제 장치의 구성된 기본 언어에 따라 달라진다는 것을 명심하세요.

둘째, 이 조정은 전체 사용자 인터페이스에 영향을 미치며, 일반적으로 추가 공간이 필요하지 않은 영어와 같이 고정 줄 높이로 스크립트를 표시하는 모든 텍스트 요소의 줄 높이를 증가시킵니다.

이것은 모든 텍스트 요소에서 시각적 일관성을 보장하기 위한 의도이다.

마지막으로, 이 자동 조정은 텍스트 스타일을 사용하는 텍스트 요소에만 적용됩니다.

사용자 지정 글꼴은 고정된 줄 높이를 계속 사용할 것이다.

이 행동은 여러 릴리스에서 시행되었기 때문에 완전히 새로운 것은 아니다.

그러나, iOS 17에서는 훨씬 더 역동적이며, 정확한 조정은 사용된 텍스트 스타일과 언어 모두에 따라 다릅니다.

이 동작을 활용하려면, preferredFont(forTextStyle:) 메서드로 UIFont를 명시적으로 만들고 UILabel과 같은 텍스트 요소에 할당하여 텍스트 스타일을 채택하십시오.

다음으로, 텍스트 요소에 clipsToBounds를 설정하지 마세요.

태국어와 힌디어와 같은 언어의 어센더와 디센더는 종종 선 높이 경계를 넘어 튀어나올 것이다.

이것은 일반적으로 이웃 요소 주변에 여분의 공간이 있기 때문에 대부분의 레이아웃에서 일반적으로 허용되지만, clipsToBounds를 설정하면 해당 텍스트 요소가 잘린다는 것을 의미합니다.

UIKit은 또한 이전에 기본적으로 활성화된 이 설정의 불필요한 사용을 방지하기 위해 업데이트되었습니다.

마지막으로, 텍스트 요소가 이제 수직으로 성장할 수 있으므로 UI가 높이 변화에 반응하고 다른 모든 컨트롤이 정렬된 상태로 유지되도록 하십시오.

우리는 또한 중국어, 독일어, 일본어, 한국어와 같은 언어에 대한 줄 바꿈 행동을 상당히 개선했습니다.

이러한 개선 사항은 UI에서 사용하는 텍스트 스타일과 표시되는 언어에 따라 다른 규칙을 적용합니다.

예를 들어, 이전에는 한국어 텍스트 내의 단어가 줄로 나뉘었을 수도 있다.

이제 UIKit은 제목 텍스트 스타일의 분할을 방지하여 보다 원활한 읽기 경험을 보장합니다.

앱에서 이 새로운 행동의 혜택을 받으려면, 마찬가지로 텍스트 스타일을 채택하세요.

그래서 그것이 당신이 iOS 17의 앱에서 강력한 텍스트 경험을 만들기 위해 알아야 할 모든 것입니다.

앱에서 사용자 지정 텍스트 보기를 사용하는 경우, 시스템 선택 UI를 사용하여 OS의 모든 새로운 기능을 활용하십시오.

텍스트 항목을 사용하여 텍스트 보기의 링크와 더 나은 상호 작용을 만드세요.

TextKit 2의 강력한 새로운 기능을 활용하여 더 풍부한 텍스트 편집 경험을 제공하십시오.

그리고 언어나 선호하는 텍스트 크기에 관계없이 모든 사람에게 훌륭한 사용자 경험을 보장하기 위해 일반적인 텍스트 요소에 텍스트 스타일을 채택하십시오.

지금은 그게 다야.

봐줘서 고마워.

별 5개를 평가하고 아래에 댓글을 남겨주세요.

♪ ♪