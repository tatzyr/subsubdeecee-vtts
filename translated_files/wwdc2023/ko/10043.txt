10043

♪ ♪

제프: 안녕, 난 제프야.

저는 MapKit 팀의 엔지니어이며 SwiftUI용 MapKit을 소개하게 되어 기쁩니다.

크게 확장된 SwiftUI API를 통해 모든 플랫폼에서 지도를 앱에 통합하는 것이 그 어느 때보다 쉬워졌습니다.

우리는 당신이 SwiftUI용 MapKit을 사용하여 사용자를 위한 강력한 매핑 경험을 만드는 것을 좋아할 것이라고 생각합니다.

그것이 얼마나 쉬운지 보여주기 위해, 나는 처음부터 완전한 기능을 갖춘 여행 플래너를 만들 것이다.

내가 모든 단계를 안내해 줄게 그리고 우리는 이 세션이 끝나기 전에 끝날 거야.

우리 가족은 이번 주말에 뉴잉글랜드로 돌아가고, 우리는 토요일에 아름다운 도시 보스턴을 탐험하며 보낼 것이다.

우리는 아침에 도시를 걷고 명소를 볼 것이고, 역사적인 노스 엔드에서 점심을 먹을 것이고, 아마도 디저트로 카놀리를 먹을 것이다.

날씨도 완벽해 보여, 그래서 우리는 오후에 해변으로 가서 발가락 사이의 모래를 느낄 거야.

정말 재미있을 거야.

나는 우리가 하루를 계획하는 데 도움이 되는 앱을 만들 것이다.

나는 지도에서 장소를 표시하기 위해 주석을 사용할 것이다.

각 마커를 탭하여 그 장소에 대해 더 많이 배울 수 있도록 선택을 활성화하겠습니다.

나는 우리가 방문하고 싶은 곳을 탐험하기 위해 Look Around를 통합할 것이다.

해변으로 가는 운전 경로를 보여주는 오버레이를 추가할게.

나는 지도를 사용하여 다른 위치와 지역을 표시할 것이다.

나는 현실적인 고도를 가능하게 하여 지도에 또 다른 차원을 추가할 것이다.

위성과 비행 이미지를 표시하는 방법도 보여드리겠습니다.

내가 어디에 있는지 알아낼 수 있도록 사용자 위치 버튼을 포함하여 몇 가지 컨트롤을 지도에 추가할 것이다.

우리는 다루어야 할 것이 많다. 바로 시작하자!

나는 새로운 SwiftUI 프로젝트로 시작할 것이다.

나는 MapKit을 사용할 거야.

그리고 내가 지도를 추가할게.

좋아!

나는 한 줄의 코드만 있는 인터랙티브 지도를 가지고 있어!

우리 가족은 우리가 돌아다닐 수 있도록 도시로 운전하고 주차하는 것으로 하루를 시작할 것이다.

보스턴 근처에 "cah"를 "pahk"해야 할 특별한 장소가 있다고 들었는데, 나는 커먼 바로 아래에 있는 주차장이 마음에 들어.

보스턴 커먼은 모든 것의 한가운데에 있는 아름다운 공원이며, 우리의 도보 여행을 위한 환상적인 출발점이 될 것이다.

내가 가장 먼저 할 일은 주차장을 표시하기 위해 지도에 콘텐츠를 추가하는 것이다.

나는 차량이 차고에 접근하는 데 사용하는 경사로 바로 위에 있는 지점을 표시할 것이다. 엘리베이터 근처에서 우리는 걷기 시작할 것이다.

마커와 주석을 사용하여 지도의 특정 좌표에 콘텐츠를 표시하는 방법에 대해 배우게 될 것입니다.

그래서, 차를 주차하고 걷기 시작하자!

MapContentBuilder 클로저를 사용하여 지도에 마커를 추가할 것입니다.

멋지다!

SwiftUI에 익숙하다면, 지도에 마커를 추가하는 것은 목록에 보기를 추가하는 것과 매우 비슷합니다.

마커를 보여주기 위해 확대하여 지도가 어떻게 자동으로 콘텐츠를 구성했는지 확인하세요.

그래서 마커가 뭐야?

콘텐츠 빌더를 사용하여 발표할 수 있는 다른 유형의 콘텐츠가 있나요?

마커는 지도의 특정 좌표에서 콘텐츠를 표시하는 데 사용됩니다.

풍선 모양은 당신에게 친숙해 보일 수 있습니다.

App Store에서 찾을 수 있는 다양한 앱을 포함하여 지도 앱과 플랫폼에서 사용되는 마커를 찾을 수 있습니다.

마커와 마찬가지로, 주석은 특정 좌표에서 콘텐츠를 표시하는 데 사용됩니다.

마커의 풍선 대신, 주석은 SwiftUI 보기를 표시합니다.

콘텐츠 빌더는 오버레이 콘텐츠를 제시하는 데에도 사용할 수 있습니다.

너는 이것들에 대해 조금 나중에 더 알게 될 거야.

현재로서는, 당신이 정말로 알아야 할 것은 콘텐츠 빌더 클로저를 사용하여 모든 종류의 콘텐츠를 지도에 추가할 수 있다는 것입니다.

주차 공간에 대한 사용자 지정 SwiftUI 보기를 표시하고 싶기 때문에, 주석을 사용하여 표시할 것입니다.

여기서, 저는 ZStack을 사용하여 모양과 이미지를 구성하고 있습니다.

이 SwiftUI 보기는 주차 좌표를 중심으로 지도에 표시됩니다.

대신 뷰를 좌표 위에 배치하고 싶다면, 주석의 앵커 매개 변수를 사용할 수 있습니다.

"하단"의 앵커 값을 지정하면 주석의 좌표 오른쪽에 뷰의 하단이 배치됩니다.

알았어!

그 앱은 우리가 도보 여행을 시작할 곳을 표시한다.

저는 MapContentBuilder를 사용하여 지도에 주석 내용을 표시했습니다.

다음으로, 저는 이 앱이 지도를 보면서 장소의 감각을 전달하고 싶습니다.

나는 mapStyle을 사용하여 현실적인 지형 고도를 가능하게 함으로써 그것을 달성할 것이다.

mapStyle을 사용하여 위성이나 비행 이미지를 표시하는 방법도 배우게 될 것입니다.

mapStyle 수정자를 사용하여 스타일을 설정할 수 있습니다.

이것은 표준 지도 스타일이다.

기본적으로, 그것은 실제 종이 지도와 같은 평평한 프레젠테이션을 제공한다.

석호를 가로지르는 다리가 있는 것 같아서, 한 쪽에서 다른 쪽으로 걸어갈 수 있습니다.

하지만 이 평면 지도는 정말 상상력에 무언가를 남긴다.

나는 현실적인 높은 지형을 가능하게 하여 지도에 작업할 수 있는 또 다른 차원을 제공할 것이다.

현실적인 고도를 가능하게 하는 것은 지도에 생명을 불어넣는다.

지금 석호를 보면서, 나는 여름에 순항하는 백조 보트 중 하나를 타고 다리 밑을 지나가는 보트를 상상하는 것을 상상할 수 있다.

이미지 지도 스타일을 사용하는 것은 사용자에게 장소 감각을 제공하는 또 다른 좋은 방법입니다.

이미지 지도 스타일은 위성 또는 비행 이미지를 사용하여 렌더링된 지도를 표시합니다.

하이브리드 지도 스타일은 이미지와 도로 및 라벨을 결합합니다.

요약하자면, 저는 표준 mapStyle을 사용하여 현실적인 고도를 활성화했고 다른 지도 스타일을 사용하는 방법도 보여주었습니다.

다음으로, 저는 이 앱이 우리가 방문하고 싶은 장소를 검색하는 데 도움을 주고 싶습니다.

우리 아이들은 우리와 함께 보스턴을 돌아다닐 거야, 그리고 나는 우리의 아침이 그들에게도 재미있었으면 좋겠어.

어른들은 역사를 보는 것을 감상할 수 있고 아이들은 그네와 슬라이드와 원숭이 바를 감상할 수 있다!

나는 놀이터를 검색하는 버튼과 해변을 검색하는 버튼을 추가할 것이다.

앱은 각 검색 결과에 마커를 추가할 것이다.

마커에 대해 조금 더 배우고 검색 결과를 방해하지 않고 지도 위에 자신의 UI를 표시하는 방법도 배우게 될 것입니다.

오늘 일찍, 나는 작은 BeantownButtons View를 만들었다.

버튼을 탭하면 놀이터나 해변의 간단한 쿼리로 검색 기능이 호출됩니다.

검색 기능은 MKLocalSearch를 사용하여 보스턴 커먼 주차장 근처의 장소를 찾고 바인딩을 사용하여 결과를 작성합니다.

앱의 기본 ContentView로 돌아가서, 검색 결과를 추적하기 위해 상태를 추가할 것입니다.

BeantownButtons UI가 검색을 수행하면, 바인딩을 사용하여 결과를 이 상태로 다시 쓸 것이다.

화면 하단의 지도 위에 버튼을 추가하겠습니다.

safeAreaInset을 사용하면 앱의 UI가 내가 추가하는 콘텐츠나 Apple Maps 로고 및 법률 링크와 같이 지도에 나타날 수 있는 시스템 제공 컨트롤을 가리지 않도록 할 수 있습니다.

다음으로, 콘텐츠 빌더를 사용하여 검색 결과 마커를 추가할 것입니다.

각 검색 결과에 마커를 추가하기 위해 ForEach를 사용하고 있습니다.

내가 이 버튼들을 시도해 볼게. 놀이터를 좀 찾아보자.

봐! 운동장!

지도는 모든 것을 볼 수 있도록 축소하여 자동으로 프레임을 그렸다.

몇몇 해변은 어때?

검색 결과는 MKLocalSearch와 같은 MapKit API가 장소를 나타내는 데 사용하는 유형인 MKMapItems입니다.

여기, 저는 마커의 지도 항목 이니셜라이저를 사용하고 있습니다.

이런 식으로 만들어진 마커는 지도 항목의 이름을 제목으로 사용하고 지도 항목의 정보를 사용하여 장소를 나타내는 아이콘과 색조 색상을 표시합니다.

이 검색 결과의 대부분은 밝은 파란색 비치 파라솔 마커로 표시됩니다.

지도 항목으로 작업할 때, 마커의 자동 콘텐츠와 스타일 지원은 매우 편리합니다.

하지만 지도 항목을 사용하지 않더라도, 당신은 여전히 마커의 프레젠테이션을 제어할 수 있습니다.

기본적으로, 마커는 여기에서 볼 수 있듯이 풍선에 지도 핀 아이콘을 보여줍니다.

이미지 자산이나 시스템 이미지를 사용하여 자신만의 아이콘을 제공할 수 있습니다.

모노그램을 사용하여 최대 세 글자의 텍스트를 표시할 수도 있습니다.

색조 수정자를 사용하여 마커의 색상을 변경할 수 있습니다.

요약하자면, 저는 safeAreaInset을 사용하여 검색 결과 마커를 가리지 않도록 하면서 지도 위에 몇 가지 버튼을 표시했습니다.

다음으로, 나는 앱이 지도에 표시되는 것을 제어할 것이다.

나는 지도에 콘텐츠를 추가하고 있어.

내가 가질 때마다, 지도는 자동으로 나를 위해 내 콘텐츠를 액자에 넣었다.

필요할 때 이 편리한 행동을 활성화하는 방법을 보여드리겠습니다.

또한 보스턴 지역의 노스 쇼어 해안선과 같은 완전히 다른 것을 전시하는 방법을 보여드리겠습니다.

지금, 우리는 해변을 보고 있어.

만약 내가 멀리 가서 놀이터를 찾는다면...

지도는 더 이상 보스턴 커먼 주차장 근처의 결과를 자동으로 표시하지 않습니다.

사용자가 지도와 상호 작용한 후 검색 결과를 표시하려면, 지도가 마커를 프레임할 수 있도록 지도의 카메라 위치 상태를 다시 설정해야 합니다...

그래서, 나는 위치를 추적하기 위해 상태를 추가할 것이다.

나는 우리가 지도에 추가한 콘텐츠를 프레임하는 기본 자동 위치를 사용할 것이다.

그리고 나는 맵의 이니셜라이저에 바인딩을 전달할 것이다.

검색 결과가 언제 업데이트되는지 알아내기 위해 onChange 수정자를 사용할 것입니다.

그들이 있을 때, 나는 그들이 보이는지 확인하기 위해 카메라 위치를 자동으로 다시 설정할 것이다.

한 번 해보자.

내가 해변을 찾아볼게, 결과를 봐...

그리고 나서 놀이터를 찾기 전에 이동하세요.

멋지다!

이제 내가 검색을 수행할 때, 내가 로드아일랜드까지 패닝했더라도 결과가 모두 표시됩니다.

이 위치 상태를 사용하여 내가 하고 싶은 또 다른 일이 있다.

보스턴에서 즐거운 아침을 보낸 후, 우리 가족은 해변에서 오후를 보내기 위해 북쪽으로 운전할 것이다.

나는 우리가 어디로 갈지 느낄 수 있도록 북해안 해안선을 쉽게 볼 수 있도록 앱을 만들고 싶다.

나는 그것을 하기 위해 위치 상태를 사용할 것이다.

나는 도시와 노스 쇼어의 조정 지역을 추가할 것이다.

나는 BeantownButtons UI로 전환하고 우리의 위치 상태에 대한 바인딩을 추가할 것이다.

나는 몇 개의 버튼을 추가할 것이고, 각각 카메라 위치를 지역으로 설정할 것이다.

내가 도시 버튼을 누르면, 지도에 보스턴이 보일 것이다.

웨이브 버튼을 누르면, 지도는 북쪽 해안 해안선을 보여줄 것이다.

ContentView로 다시 전환하고 버튼 UI에 바인딩된 위치를 전달할 것입니다.

한 번 해보자!

내가 "파도" 버튼을 눌렀을 때, 지도의 위치는 북쪽 해안 해안 지역을 보여주기 위해 업데이트되었다.

"도시" 버튼을 탭하면, 보스턴을 보여주기 위해 업데이트됩니다.

무대 뒤에서, 지도가 보여주는 것은 궁극적으로 MapCamera에 의해 제어된다.

카메라는 특정 거리에서 지상의 좌표를 보고 카메라의 방향은 지도에서 보이는 것을 결정한다.

내가 만들고 있는 앱은 카메라 자체를 만들거나 구성할 수 없었다.

대신, 그것은 단순히 MapCameraPosition을 사용하여 무엇을 봐야 하는지 지정합니다.

MapKit은 나를 위해 카메라를 관리한다.

이 앱은 자동 카메라 위치를 사용하여 검색 결과와 같은 콘텐츠를 프레임합니다.

그것은 보스턴과 노스 쇼어를 보여주기 위해 지역 위치를 사용한다.

다른 것들도 프레임하기 위해 카메라 위치를 지정할 수 있습니다.

Rect 위치는 우리가 지역을 사용한 방식과 마찬가지로 영역을 보여주는 데 사용됩니다.

그것은 단순히 좌표 영역 대신 그 영역을 나타내기 위해 지도 rect를 사용한다.

아이템, 카메라 및 사용자 위치 카메라 위치를 자세히 살펴봅시다.

MKMapItem을 사용하면 특정 장소를 보여줄 수 있습니다.

이것은 모든 종류의 지도 항목에서 작동합니다.

지도 항목이 Cape Cod Bay를 나타내는 경우, MapKit은 자동으로 축소하여 적합합니다.

노스 엔드의 특정 공원을 보여주려고 한다면, 카메라는 주변을 보여주고 장소 감각을 전달하기 위해 확대할 것입니다.

또한 원하는 방식으로 정확하게 구성된 MapCamera를 간단히 제공할 수 있습니다.

피치 각도로 MapCamera를 사용하는 것은 3D 관점을 제공하는 좋은 방법입니다.

또는, 카메라가 찰스 강을 따라 걸을 때 사용자의 위치를 따라가기를 원하실 수도 있습니다.

위치 권한이 부여되지 않았거나 장치가 위치 수정을 시도하는 동안과 같이 사용자의 위치를 알 수 없을 때 사용되는 대체 위치를 제공할 수 있습니다.

카메라 위치 상태에 바인딩을 제공하는 경우, MapKit은 카메라 위치가 변경될 때 업데이트합니다.

여기 사용자 위치 카메라 위치가 있습니다. followsUserLocation 속성은 참입니다.

사용자가 이동하면, 카메라는 더 이상 사용자의 위치를 따라가지 않습니다.

사용자가 지도와 상호 작용할 때, 카메라 위치 상태는 사용자에 의해 배치됩니다.

앱이 카메라 위치 상태를 userLocation으로 다시 설정하면, 카메라는 사용자의 위치를 따른다.

앱이 카메라 위치 상태를 설정하면, 사용자에 의해 배치되지 않습니다.

사용자는 어떤 유형의 카메라 위치를 지정하든 지도와 상호 작용하여 카메라를 배치할 수 있습니다.

알았어! 그 앱은 이제 지도에서 볼 수 있는 것을 제어할 수 있다.

사용자가 지도와 상호 작용한 후에도 검색 결과가 표시되도록 자동 카메라 위치를 사용했습니다.

나는 보스턴과 노스 쇼어를 표시하기 위해 지역 카메라 위치를 사용했다.

다음으로, 보스턴 코먼 근처에서만 검색하는 대신, 제가 방문하고 싶은 지역으로 지도를 이동하고 대신 검색하고 싶습니다.

카메라가 바뀔 때 보이는 영역을 얻는 방법을 보여드리겠습니다.

지도에서 보이는 지역을 추적하기 위해 주를 추가할 것이다.

업데이트 컨텍스트에서 보이는 영역을 잡고 내 상태로 보관하는 onMapCameraChange 수정자를 추가할 것입니다.

기본적으로, onMapCameraChange에 제공된 폐쇄는 사용자가 지도와의 상호 작용을 마쳤을 때 호출됩니다.

사용자가 지도와 상호 작용하는 동안 폐쇄를 호출하려면, 주파수 매개 변수를 전달하여 지속적인 업데이트를 요청할 수 있습니다.

내가 여기서 사용하고 있는 지역 속성 외에도, 컨텍스트에는 보이는 지도 rect에 대한 속성과 지도 카메라 자체에 대한 속성이 있습니다.

내 필요에 따라, 나도 그것들을 사용할 수 있다.

사용자가 볼 수 있는 지역 내에서 검색할 수 있도록 BeantownButtons를 업데이트하겠습니다.

버튼에 visibleRegion을 추가하겠습니다.

그리고 나는 그것을 검색 요청에 사용할 것이다.

ContentView에서, 나는 visibleRegion을 버튼 UI로 전달할 것이다.

노스 쇼어 해변을 찾아보자!

노스 쇼어가 있어. 해변 좀 보여줘!

좋아! 로드아일랜드는 어때?

멋지다! 이제 나도 로드아일랜드의 해변을 찾을 수 있어!

나는 볼 수 있는 것에 변화가 있을 때 우리에게 알려주는 onMapCameraChange를 사용하여 이것을 활성화했다.

다음으로, 나는 그 앱이 우리가 어느 해변에 갈지 좀 더 쉽게 선택할 수 있게 해주길 원해.

확실히 선택할 수 있는 것이 많다.

시작하기 위해, 검색 결과 선택에 대한 지원을 추가하겠습니다.

지금 당장, 내가 검색 결과 마커를 탭하면, 아무 일도 일어나지 않을 것이다.

선택 상태가 없으므로 마커를 선택할 수 없습니다.

선택을 활성화하기 위해, 나는 우리의 지도에 선택 바인딩을 추가할 것이다.

이제 내가 결과를 탭하면 어떻게 되는지 보자.

풍선은 그것이 선택되었다는 것을 보여주기 위해 움직입니다!

저는 MKMapItem을 선택 유형으로 사용하고 있으므로, 이제 지도 항목을 나타내는 각 마커를 선택할 수 있습니다.

주차 공간 주석은 지도 항목을 나타내지 않으므로 선택할 수 없습니다.

반드시 같은 유형의 신원을 가지고 있지 않은 마커와 주석에 대한 선택을 지원하고 싶다면, 단순히 태그를 지정할 수 있습니다.

이것은 피커와 리스트로 선택을 관리할 때와 같은 방식으로 작동합니다.

여기서, 선택된 태그 상태는 Int입니다.

각 마커는 Int로 태그되어 있으므로, 바인딩을 통해 둘 다 선택할 수 있습니다.

태그를 사용하여 선택을 활성화할 때, 선택 상태에 대해 해시블을 준수하는 모든 유형을 사용할 수 있습니다.

요약하자면, MKMapItem 선택 바인딩을 Map에 추가하여 검색 결과 마커를 선택할 수 있습니다.

다음으로, 앱은 선택한 검색 결과에 대한 몇 가지 추가 정보를 표시해야 합니다.

해변을 살짝 엿볼 수 있도록 미리보기를 추가하고, 해변의 이름과 운전 시간도 추가할 것이다.

오늘 일찍, 내가 BeantownButtons View를 쓰고 있을 때, 나는 또한 보여주는 작은 ItemInfoView를 썼다...

제목, 예상 여행 시간, 그리고 둘러보기 미리보기.

Look Around Preview는 선택된 해변이 어떻게 생겼는지 보여줄 것이다.

미리보기는 주변 장면을 보여준다.

MKLookAroundSceneRequest를 사용하여 주어진 지도 항목의 장면을 얻을 수 있습니다.

그 장면은 보기가 표시될 때, 그리고 선택한 검색 결과가 바뀔 때마다 다시 가져올 것이다.

마지막으로, DateComponentsFormatter를 사용하여 표시를 위해 MKRoute의 예상 이동 시간을 포맷하는 속성이 있습니다.

ContentView로 다시 전환하고 이 ItemInfoView를 추가하겠습니다.

가장 먼저: 나는 주차장에서 선택한 검색 결과로 가는 경로를 얻을 것이다.

경로를 추적하기 위해 주를 추가할게...

그리고 나는 하나를 얻기 위해 MKDirections를 사용하는 기능을 추가할 것이다...

그리고 국가를 정해.

선택이 변경될 때 함수를 호출하기 위해 또 다른 onChange 수정자를 추가할 것입니다.

앱은 선택된 검색 결과가 있을 때 항목 정보 보기를 보여줄 것입니다.

내가 그것을 하는 동안, 나는 지도의 모양을 조금 정리하기 위해 검색 결과의 마커 제목을 숨길 것이다.

ItemInfoView는 대신 선택한 장소의 이름을 표시할 것이다.

알았어! 우리가 뭘 얻었는지 보자.

있잖아, 이 근처에 놀이터가 있다고 들었어... 꽤 좋아 보여.

이런 식으로 뭐가 끝났는지 궁금해?

좋아! 놀이터가 있는 해변, 바로 거기?

우리 가족에게, 그건 이기기 꽤 어려울 거야.

보스턴 커먼에서 약 30분 거리에 있어.

좋은 장소인 것 같아.

요약하자면, 마커가 선택되었을 때 표시될 미리보기를 추가했습니다.

MKRoute에서의 예상 여행 시간과 함께, 이것은 우리가 해변을 고르는 데 정말 도움이 될 것이다.

다음으로, 우리는 이미 여행 시간을 보여줄 경로가 있기 때문에, 보스턴 커먼에서 선택한 검색 결과까지의 운전 경로를 표시하기 위해 그것을 완전히 사용해야 합니다.

경로를 보여주기 위해 MapPolyline 오버레이를 추가하고, 추가할 수 있는 다른 유형의 오버레이 콘텐츠도 보여드리겠습니다.

경로가 가능할 때, 나는 MapPolyline을 추가하고 파란색으로 쓰다듬을 것이다.

지도에서 보자.

꽤 괜찮은 드라이브인 것 같아!

MKRoute와 함께 MapPolyline을 사용하는 것은 꽤 쉬웠다.

MapPolyline을 사용하여 자신의 위치 데이터를 표시할 수도 있습니다.

StrokeStyle을 사용하여 대시와 그라디언트와 같은 꽤 멋진 것들을 전달할 수 있습니다.

영역을 강조하고 싶다면, MapPolygon 또는 MapCircle을 사용하고 싶을 것입니다.

여기 몇 개의 공원을 표시하는 두 개의 다각형이 있습니다.

여기 같은 공원을 표시하는 두 개의 원이 있습니다.

각 원에 오버레이 레벨이 지정되어 있다는 것을 알게 될 것입니다.

분홍색 원은 지도의 라벨을 원 위에 두는 도로 위의 기본 오버레이 레벨을 사용하고 있다.

청록색 원은 위의 라벨을 사용하고 있다.

그 앱은 정말 구체화되고 있어.

해변으로 가는 운전 경로를 보여주기 위해 MapPolyline을 추가했고, 당신이 사용할 수 있는 몇 가지 다른 오버레이 유형도 보여주었습니다.

다음으로, 나는 그 앱이 내가 어디에 있는지 정말 쉽게 알아낼 수 있게 해주길 바란다.

우리가 보스턴에 도착해서 돌아다니기 시작하면, 우리가 조금 길을 잃을 수도 있고, 어쩌면 그럴 수도 있다.

내가 어디에 있는지 보여주기 위해 UserAnnotation을 콘텐츠로 추가하고, 나 자신을 찾기 위해 MapUserLocationButton을 추가할 것이다.

사용할 수 있는 몇 가지 다른 유형의 지도 컨트롤에 대해 배우게 될 것입니다.

그래서 내가 나 자신을 찾으려고 할 때, 나는 보통 지도에서 작은 파란색 점들을 찾는 것으로 시작한다.

내 지도 콘텐츠에 UserAnnotation을 추가했기 때문에, 이제 내 위치가 지도에 나타난다.

나 어디 있어?

나 여기 있어!

우리가 확인했던 그 놀이터와 해변에서 꽤 멀리 떨어져 있는 것 같아.

나는 확실히 애플 파크로 가기 위해 축소하고 팬을 많이 해야 했다.

MapUserLocationButton은 그것을 더 쉽게 만들 것이다.

이제, 버튼을 눌러 내 위치를 표시할 수 있습니다.

내가 돌아다닐 때 지도 카메라가 나를 따라갈 것이다.

나는 또한 MapCompass와 MapScaleView를 추가했다.

기본 mapControls 구성은 지도가 회전할 때 나침반과 사용자가 확대하거나 축소하는 동안 스케일 표시기를 보여줍니다.

이 앱에서도 이러한 기본 컨트롤을 원하므로, 사용자 위치 버튼 외에도 지정했습니다.

mapControls 수정자를 사용하여 이 모든 것을 추가했으므로 지도가 기본 위치에 자동으로 표시됩니다.

여기에는 macOS에서 찾을 수 있는 MapZoomStepper와 MapPitchSlider를 포함한 모든 플랫폼의 지도 컨트롤이 포함됩니다.

이러한 컨트롤을 직접 배치하고 싶다면, 자신만의 UI에 표시할 수 있습니다.

지도 컨트롤은 단순히 보기이므로, mapControls 수정자를 사용하는 대신 다른 보기와 마찬가지로 추가할 수 있습니다.

이렇게 할 때, mapScope 수정자를 사용하여 컨트롤을 특정 맵 범위와 연결해야 합니다.

우리는 발표가 거의 끝났으니, 오늘 우리가 배운 것을 요약해 봅시다.

SwiftUI용 MapKit은 지도를 앱에 통합할 수 있는 믿을 수 없을 정도로 강력하고 사용하기 쉬운 API입니다.

마커, 주석 및 오버레이를 사용하여 지도에 콘텐츠를 표시할 수 있습니다.

지도 카메라와 지도 컨트롤을 사용하면 필요에 맞게 지도를 조정할 수 있습니다.

마지막으로, MapStyle과 Look Around는 사용자에게 진정한 장소 감각을 제공합니다.

이것들은 SwiftUI용 MapKit의 기능 중 일부일 뿐이므로, 자세한 내용은 개발자 문서를 확인하십시오.

그리고 물론, 이것은 SwiftUI이기 때문에, 당신의 지도는 모든 플랫폼에서 멋지게 보일 것입니다!

우리가 마무리할 때 몇 가지 마지막 생각.

우리는 자동 완성과 방향을 지원하기 위해 Apple Maps Server API를 확장했습니다.

서버 API를 사용하는 방법에 대해 자세히 알아보려면, 작년의 더빙 더빙 세션 "Apple Maps Server API를 만나보세요"를 확인하세요. 언제나처럼, 우리는 당신의 피드백을 듣고 싶습니다!

피드백 어시스턴트를 사용하여 당신의 생각을 들려주세요.

마지막으로, 올해 SwiftUI의 새로운 기능을 확인하는 것이 좋습니다.

애니메이션 계획은 지도에 애니메이션을 추가할 수 있는 좋은 방법입니다!

아래 세션에서 그것들을 확인하세요.

그게 다야! 봐줘서 정말 고마워!

해변에서 보자!

♪ ♪