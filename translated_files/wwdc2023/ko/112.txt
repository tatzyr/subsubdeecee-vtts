112

♪ ♪

♪ ♪

다린 애들러: 2023년 연합 플랫폼에 오신 것을 환영합니다!

우리는 당신이 우리의 새로운 릴리스에서 다가오는 것을 어떻게 활용할 수 있는지에 대해 더 많이 공유하게 되어 기쁩니다.

시스템 전반에 걸쳐 앱을 표시할 수 있는 더 많은 방법을 제공하는 iOS 및 iPadOS의 대화형 위젯, macOS의 새로운 위젯 경험, watchOS 10의 아름다운 디자인, tvOS의 연속성 카메라, 그리고 물론 visionOS가 있는 완전히 새로운 플랫폼.

Platforms State of the Union은 올해 출시에서 가장 흥미롭고, 영향력 있고, 중요한 발전에 대해 배울 수 있는 기회이다.

그리고 우리가 당신을 위해 가지고 있는 것은 그 모든 전선에서 전달합니다.

우리가 뛰어들기 전에, 나는 훌륭한 플랫폼과 훌륭한 앱을 만드는 것에 대해 잠시 이야기하고 싶다.

훌륭한 플랫폼은 프레임워크와 기술의 모음 그 이상이다.

그것은 진정으로 특별한 것을 만들기 위해 함께 모이는 핵심 재료이다.

그것은 원활하게 함께 작동하도록 만들어진 언어, 프레임워크, 도구 및 서비스의 조합이므로, 코드를 작성하는 가장 자연스러운 방법도 가장 좋습니다.

앱이 열려 있든 없든 시스템과 깊이 통합되는 놀라운 경험을 만드는 데 도움이 되는 풍부한 API 세트.

다양한 제품에서 최첨단 하드웨어 기술을 안전하게 활용할 수 있는 사려 깊은 방법.

그리고 마지막으로, 훌륭한 플랫폼은 새로운 도전에 대처하기 위해 진화하여 사용자가 등장할 때 바로 사용자의 요구를 충족시킬 수 있습니다.

우리 플랫폼의 300개 이상의 프레임워크는 블록을 만들고 있으며, 앱에 대해 혁신적이고 창의적이며 다른 것을 바로 얻을 수 있습니다.

그들은 단지 시간을 절약하거나 특정 기능을 추가하는 것을 돕는 것 이상으로 나아갑니다.

이러한 플랫폼 기초를 목적에 맞게 사용할 때, 앱은 아름답게 맞고 시스템 자체를 확장합니다.

그리고 그것이 훌륭한 앱으로 가는 길이다.

훌륭한 앱은 올바른 장소에서 적시에 사용자에게 올바른 정보를 제공합니다.

그 장소는 잠금 화면, 스포트라이트, 시리 또는 다른 여러 장소의 공유 시트일 수 있습니다.

훌륭한 앱은 이러한 기능을 손끝에 제공하는 프레임워크의 도움으로 새로운 센서나 강력한 칩과 같은 하드웨어를 활용합니다.

그리고 훌륭한 앱은 사용자의 개인 정보를 존중하는 안전하고 접근하기 쉬운 제품을 만드는 것과 같이 올바르게 하는 데 매우 중요한 일을 합니다.

우리의 플랫폼과 당신의 앱은 사람들이 가치 있고 기대하는 일관성과 신뢰성으로 이 모든 것을 제공하기 위해 함께 모입니다.

그리고 이건 큰 문제야.

우리는 훌륭한 플랫폼과 훌륭한 앱에 대해 믿을 수 없을 정도로 열정적입니다.

사용자는 그들이 만드는 차이를 알 수 있다.

iOS, iPadOS, macOS, tvOS, watchOS 및 현재 visionOS의 공유 기반은 모든 Apple 플랫폼과 제품에 걸쳐 앱을 제공할 수 있는 응집력 있는 생태계를 형성합니다.

당신의 앱은 이 생태계의 핵심입니다.

그들은 한 장치에서 다른 장치로 원활하게 이동하는 사용하기 쉬운 경험으로 하루를 보내면서 사람들에게 힘을 실어줍니다.

애플에서, 우리는 종종 우리가 사용하고 싶은 것들을 만드는 것에 대해 이야기하며, 그것은 우리의 플랫폼에 대한 우리의 접근 방식보다 더 사실일 수 없다.

왜냐하면 우리도 개발자이기 때문이야!

우리는 여기 애플에서 같은 언어, 도구 및 프레임워크를 사용합니다.

그래서 오늘, 우리는 다룰 것이 많다.

우리는 Swift와 SwiftUI의 최신 개발과 모든 플랫폼에서 놀라운 경험을 창출하기 위해 그것들을 어떻게 사용할 수 있는지부터 시작할 것입니다.

우리는 당신이 하드웨어 기능을 활용할 수 있는 방법과 당신이 구축한 경험에서 가치의 우선순위를 정하는 방법에 대해 이야기할 것입니다.

그리고 우리는 우리 모두가 매일 사용하는 강력한 도구에 대한 개선 사항을 안내할 것입니다.

마지막으로, 우리는 최신 플랫폼인 visionOS의 기술에 대해 자세히 알아보고 Apple Vision Pro용 차세대 앱을 구축하는 방법을 보여드리겠습니다.

일을 시작하기 위해, 나는 스위프트의 새로운 것에 대해 이야기하기 위해 홀리에게 넘길 것이다.

홀리 볼라: 당신이 매일 사용하는 많은 API의 기초는 스위프트입니다.

그것은 빠르고, 현대적이며, 안전하며, 효율적이고, 표현력이 뛰어나며, 정확한 코드로 안내합니다.

API를 사용하면 라이브러리와 플랫폼 기능을 활용하고 앱에 고유한 경험을 만들 수 있습니다.

하지만 일부 API는 사용하기 어려울 수 있으며, 시작하기 위해 많은 상용구 코드를 작성해야 합니다.

그것이 바로 스위프트가 사용하기 쉽고 매크로 도입으로 바로 얻을 수 있는 새로운 종류의 API를 잠금 해제하는 이유입니다.

그리고 이 매크로들은 신속한 방식으로 이루어진다.

매크로는 코드 구조를 사용하여 프로젝트로 구축된 새로운 코드를 생성하는 주석입니다.

매크로는 코드에 속성으로 첨부하거나 해시 기호로 철자할 수 있습니다.

매크로는 API가 언어의 일부인 것처럼 느끼게 하며, 주석만으로 새로운 API를 사용할 수 있는 많은 방법이 있습니다.

매크로는 생성된 코드가 프로젝트의 일부인 것처럼 느껴지는 Xcode에서 살아나게 됩니다.

내가 보여줄게.

유효한 URL 문자열을 확인하는 URL 매크로를 만들었습니다.

매크로는 일반 스위프트 코드를 생성하기 때문에, Xcode의 "매크로 확장" 기능을 사용하여 그들이 무엇을 하는지 정확히 볼 수 있습니다.

이 매크로는 정말 간단해 보인다.

그것은 URL 이니셜라이저를 호출하고 결과를 강제로 언랩한다.

하지만 URL 매크로는 그것보다 더 많은 일을 한다.

컴파일 타임에 문자열이 유효한 URL인지 확인합니다.

예를 들어, URL은 공백을 가질 수 없으므로, 하나를 추가하면 매크로는 사용자 지정 오류 메시지와 문자열에서 공백을 자동으로 제거하는 수정을 제공합니다.

이것은 내 앱이 실행 중일 때 오류가 되었을 것을 내가 코드를 작성하는 동안 피드백으로 이동시키므로, 나는 즉시 실수를 고칠 수 있다.

모든 매크로는 올바른 코드를 작성하는 데 도움이 되는 사용자 지정 피드백을 제공할 수 있습니다.

첨부된 매크로는 당신이 이미 작성한 코드에 새로운 기능을 추가할 수 있기 때문에 더 나아갑니다.

첨부된 매크로가 무엇을 할 수 있는지 살펴봅시다.

비동기 작업을 수행하고 완료 핸들러를 사용하는 fetchContent라는 함수가 있지만, async/await를 사용하고 싶습니다.

다른 fetchContent 기능을 구현하는 대신, AddAsync 매크로를 첨부할 수 있습니다.

그리고 그게 다야!

이제, fetchContent를 호출할 때 완료 핸들러를 전달하는 대신, 나는 단순히 결과를 기다릴 수 있다.

다른 API와 마찬가지로, 매크로에서 빠른 도움말을 사용하여 문서를 볼 수 있습니다.

하지만 이것이 후드 아래에서 어떻게 작동하는지 이해하고 싶다면, 중단점을 설정하고, 코드를 실행하고, 비동기 함수에 들어갈 수 있으며, Xcode는 소스 편집기에서 바로 매크로를 확장할 것입니다.

비밀이 없기 때문에, 이건 정말 멋져.

디버깅하는 동안 확장된 매크로에 들어가는 것은 무대 뒤에서 엿보고 내 코드에서 무슨 일이 일어나고 있는지 이해하는 데 도움이 되는 자연스러운 방법이다.

자신만의 매크로를 작성할 수 있으므로, 이전에 Swift 컴파일러에서 기능을 구현해야만 가능했던 방식으로 언어를 확장할 수 있습니다.

스위프트는 오픈 소스로 개발되었기 때문에, 개발자들은 이미 매크로를 사용하여 주장 실패에 대한 풍부한 설명을 자동으로 생성하고, 사용자 정의 가능한 기본 프로토콜 적합성을 제공하는 것을 포함하여 가장 일반적으로 요청되는 언어 기능 중 일부를 구축하고 있으며, 목록은 계속 증가하고 있습니다.

또한 올해의 많은 새로운 API에서 사용되는 매크로를 볼 수 있습니다.

스위프트 패키지를 통해 커뮤니티에서 작성한 매크로의 혜택을 받거나 다른 사람들과 자신의 매크로를 공유할 수 있습니다.

매크로와 같은 언어 발전은 Swift가 그 어느 때보다 더 많은 프로젝트에 채택될 수 있게 해준다.

Swift로 작성되지 않은 모든 코드에 대해 이야기해 봅시다.

처음부터, Swift는 C와 Objective-C와의 양방향 상호 운용성을 제공해 왔다.

전체 코드베이스를 다시 작성하지 않고도 한 번에 단일 파일이나 모듈로 프로젝트에 Swift를 도입할 수 있습니다.

스위프트는 상호 운용성을 C++로 확장하고 있다.

Swift-C++ 상호 운용성을 사용하면 중간 브리징 레이어 없이 동일한 프로젝트에서 두 언어를 모두 사용할 수 있습니다.

컴파일러 플래그를 설정하여 두 언어 모두에서 벡터와 같은 클래스, 함수 및 템플릿 전문 분야를 공유할 수 있습니다.

Swift에서 C++를 사용하면 초기화되기 전에 변수를 사용하는 것과 같은 코드에서 정의되지 않은 행동의 많은 소스를 제거할 수 있습니다.

그리고 브리징은 효율적입니다: 호출은 최소한의 오버헤드로 Swift와 C++ 코드 사이에서 기본적으로 이루어집니다.

스위프트-C++ 상호 운용성은 이미 오픈 소스에서 사용되고 있으며, 스위프트 컴파일러 자체를 C++에서 스위프트로 전환하는 데 도움이 되며, 스위프트를 사용하여 스위프트를 구현하게 되어 매우 기쁩니다.

안전하고 표현적인 코드에 대한 스위프트의 근본적인 목표는 그것으로 만들어진 라이브러리에 뿌리박혀 있다.

그리고 SwiftUI보다 더 명백한 곳은 없다.

여기 조쉬가 더 말해줄게.

Josh Shaffer: 모든 Apple 플랫폼에서 현대적인 사용자 인터페이스를 구축하는 가장 좋은 방법은 SwiftUI를 사용하는 것입니다.

SwiftUI를 사용하면 더 적은 코드로 더 나은 앱을 작성할 수 있으므로 앱에 고유한 것에 집중할 수 있습니다.

또한 인터페이스 코드를 재사용할 수 있는 능력을 극대화합니다.

Crunchy Bagel의 건강한 습관 앱 Streaks는 좋은 예이다.

그들은 iOS용 위젯을 만들 때 SwiftUI를 처음 사용하기 시작했다.

그런 다음 그들은 그 코드를 watchOS 앱과 공유하고, 아름다운 애니메이션으로 보강했다.

그리고 이제, 그들은 같은 코드를 원래의 iOS 앱에 다시 통합했다.

점진적인 채택을 통해 그들은 자신의 속도로 UI 코드를 공유할 수 있었고, 기존 앱에서 SwiftUI의 이점을 볼 수 있었다.

SwiftUI는 또한 믿을 수 없을 정도로 강력하며, iPad용 새로운 Logic Pro 및 Final Cut Pro와 같은 앱의 정교한 인터페이스를 강화하는 데 도움을 줍니다.

앱에 SwiftUI를 채택하면 차세대 사용자 인터페이스를 구축할 수 있습니다.

그리고 SwiftUI로 구축할 수 있는 것은 계속 확장됩니다.

항상 그렇듯이, 올해 릴리스의 새로운 기능은 파이 차트에 대한 새로운 지원과 스위프트 차트의 선택, 새로운 인스펙터 API, 오버레이, Look Around 등을 포함한 확장된 MapKit 지원과 같은 영향력이 큰 영역과 최고의 개발자 요청에 중점을 둡니다.

이러한 개선 사항은 광범위한 기능을 다루지만, 그 중 다수는 애니메이션 개선에 초점을 맞추고 있다.

이것은 핵심 영역입니다. 왜냐하면 잘 설계된 애니메이션은 인터페이스를 사용하기 쉽게 해주기 때문입니다.

그들은 사용자가 무슨 일이 일어나고 있는지 알 수 있도록 피드백을 제공할 수 있습니다.

또는 그들은 작업이 성공적으로 완료되었음을 확인할 수 있다.

그리고 그것이 SwiftUI가 처음부터 뒤집을 수 있고, 중단 가능하고, 취소 가능한 애니메이션과 같은 고급 기능을 가진 이유입니다.

올해, SwiftUI는 애니메이션을 더욱 발전시키고 있다.

그것은 그들이 움직이는 방식에서 시작한다.

애니메이션은 종종 사용자의 제스처에 의해 트리거된다.

이제 SwiftUI는 제스처의 속도를 애니메이션으로 자동으로 전송하여 원활한 전환을 제공할 수 있습니다.

그리고 애니메이션은 이제 두 가지 간단한 매개 변수로 구성할 수 있는 스프링 기반 모션으로 기본 설정됩니다: 지속 시간과 바운스.

SwiftUI는 또한 SF 심볼의 새로운 애니메이션 효과를 활용하여 앱의 아이콘에 생명을 불어넣을 수 있습니다.

마지막으로, 여러 부분으로 구성된 애니메이션을 구축해야 할 때, SwiftUI에는 몇 줄의 코드로 정교한 애니메이션을 빌드하는 데 도움이 되는 AnimationPhase라는 새로운 API가 있습니다.

Apple Park의 아름다운 풍경에서 영감을 받은 AnimationPhase와 같은 새로운 API를 설명하기 위해 샘플 앱을 만들었습니다.

그것은 사용자가 야외 공간을 만들고 방문하는 새들을 위한 음식과 음료를 제공할 수 있는 차분한 경험을 제공한다.

내가 새로운 새를 절대 놓치지 않도록 하기 위해, 나는 목록의 맨 위에 알림을 추가했다.

그 보기에만 초점을 맞춘 미리보기로 전환합시다.

나는 애니메이션을 추가하여 이 SF 심볼을 돋보이게 하고 싶다.

먼저, 사용자 지정 애니메이션에서 다른 상태를 정의하기 위해 열거형을 추가할 것입니다.

다음으로, 나는 'PhaseAnimator'로 내 견해를 마무리할 것이다.

이것은 일련의 상태 사이에서 자동으로 움직이는 새로운 보기이다.

그리고 마지막으로, 나는 '.highlighted' 애니메이션 단계에서 아이콘을 확장하고 회전할 것이다.

이것은 좋아 보이지만, 배경이 아이콘과 함께 애니메이션된다면 훨씬 더 좋아 보일 것이라고 생각합니다. 그래서 수정자를 몇 개 더 추가하겠습니다.

이제, 훨씬 더 고급 애니메이션을 위해, 올해 SwiftUI는 키프레임에 대한 완전한 지원을 추가합니다.

이 강력한 API를 사용하면 새로운 SwiftUI 기반 MapKit API의 속성을 포함하여 무엇이든 애니메이션화할 수 있습니다.

키프레임을 사용하면 애니메이션 내의 특정 시간에 여러 속성의 값을 정의한 다음 SwiftUI가 중간 값을 보간할 수 있습니다.

여기서, 나는 키프레임을 사용하여 쿠퍼티노의 다른 랜드마크를 방문하는 지도 카메라를 애니메이션화했다.

키프레임을 사용하면 다양한 속성에 대한 모션을 정의할 수 있기 때문에, 우리는 쿠퍼티노와 애플 파크까지 부드럽고 지속적인 움직임을 달성하기 위해 카메라의 피치, 방향 및 위치를 독립적으로 애니메이션화할 수 있습니다.

SwiftUI에서 애니메이션을 사용하여 앱의 느낌을 만드는 것이 그 어느 때보다 쉬워졌습니다.

다음으로, 데이터 흐름에 대해 이야기해 봅시다.

SwiftUI로 앱을 빌드할 때, 데이터를 뷰로 가져올 수 있는 몇 가지 옵션이 있습니다.

SwiftUI는 귀하의 보기에 로컬 데이터를 관리하고 다른 곳에서 소유한 데이터를 참조하기 위한 속성 래퍼 세트를 제공합니다.

올해 데이터 흐름은 점점 더 간단해지고 있으며, 주와 환경에만 집중할 수 있습니다.

모델을 SwiftUI에 노출하고, ObservableObject를 준수하고, 각 속성에 게시된 속성 래퍼를 추가할 때 이와 같은 코드를 작성했을 수 있습니다.

스위프트의 새로운 매크로 지원은 새로운 관찰 가능한 매크로가 그 자리를 차지하면서 이것을 훨씬 더 간단하게 만든다.

@Observable로 수업에 주석을 달면 끝입니다.

공개적으로 보이는 모든 속성은 자동으로 게시됩니다.

그리고 SwiftUI 보기에서 Observable을 사용할 때, 보기 업데이트를 트리거하기 위해 속성 래퍼를 사용할 필요가 없습니다.

변수를 직접 참조하기만 하면 됩니다.

당신은 더 적은 코드를 작성하고, 기본적으로 빠르고 올바른 동작을 얻을 수 있습니다.

Observable을 사용하면 SwiftUI가 필드별 수준에서 액세스를 추적할 수 있으므로, 뷰에서 사용하는 특정 속성이 변경될 때만 뷰의 본문이 재평가됩니다.

보기에서 사용하지 않는 필드를 수정하면 무효화되지 않습니다.

그래서 이제 모델을 뷰에 연결할 때, 다른 SwiftUI와 마찬가지로, 쓸 수 있는 가장 자연스러운 코드는 쓸 수 있는 올바른 코드이기도 합니다.

스위프트UI는 스위프트를 위해 설계된 차세대 프레임워크의 시작이었다.

하지만 스위프트 네이티브 프레임워크의 이점은 UI 코드에서 멈추지 않습니다.

코어 데이터는 오랫동안 데이터 관리를 위한 도구를 제공해 왔지만, 그 디자인은 오브젝티브-C 시대에 탄생했으며, 스위프트가 제공하는 모든 것을 최대한 활용하지는 못한다.

여러분 중 많은 사람들이 스위프트의 모든 기능에 대한 일류 지원으로 설계된 데이터 관리에 대한 스위프트 네이티브 솔루션을 요청해 왔습니다.

SwiftData를 소개해 드리겠습니다.

SwiftData는 데이터 모델링 및 관리를 위한 프레임워크이다.

그것은 Core Data의 입증된 지속성 계층 위에 구축되었지만, Swift를 위해 완전히 재설계되고 재창조된 API를 가지고 있다.

SwiftUI와 마찬가지로, 그것은 외부 파일 형식 없이 코드에 전적으로 초점을 맞추고 있다.

대신 스위프트의 새로운 매크로 시스템을 사용하여 간소화된 API를 제공합니다.

스위프트에서 모델을 정의하고 있다면, 일반 스위프트 유형을 사용하여 이와 같은 코드를 작성할 수 있습니다.

코어 데이터로 이것을 관리하려면, Xcode에 내장된 모델 편집기를 사용하여 동일한 모델을 재정의해야 합니다.

하지만 SwiftData를 사용하면 @Model 매크로로 수업에 주석을 달 수 있습니다.

이 한 줄의 코드는 자동 지속성 활성화, iCloud 동기화, 실행 취소 및 다시 실행 등과 같은 많은 기능을 갖추고 있습니다.

그런 다음 값이 모든 인스턴스에서 고유해야 한다는 것을 나타내는 것과 같이 추가 속성으로 속성에 주석을 달고 이러한 자동 동작을 구체화할 수 있습니다.

그리고 SwiftData는 Codable 프로토콜을 사용하여 구조체와 열거형을 이해하므로, 이미 알고 있는 도구로 데이터를 모델링할 수 있습니다.

이러한 유형은 기본 데이터 저장소에서 완전히 모델링되어 복잡한 구조화된 데이터에서도 빠르고 효율적인 쿼리를 수행할 수 있습니다.

그리고 물론, SwiftData를 SwiftUI와 통합하는 것은 간단합니다.

이제, 우리는 SwiftUI 보기 업데이트를 구동하기 위해 새로운 Observable 매크로를 사용하여 데모 앱을 구축하기 시작했습니다.

그래서 내 인터페이스는 새로운 새를 볼 때 업데이트되지만, 내 편집은 실행에 저장되지 않는다.

SwiftData를 가져오면, 지속성에 대한 지원을 정말 쉽게 추가할 수 있습니다.

기존 클래스의 두 개의 관찰 가능한 매크로를 SwiftData의 모델 매크로로 교체하고 모델이 준비되었습니다.

내 앱의 루트에서, 나는 SwiftData 컨테이너를 설정하기 위한 수정자를 추가할 것이다.

그리고 내가 새로운 뒷마당을 만들 때, 나는 그것이 지속되도록 모델 컨텍스트에 삽입할 것이다.

그리고 마지막으로, 나는 내 BackyardList 보기를 지속된 데이터에 연결할 것이다.

새로운 @Query 속성 래퍼로 정말 쉽게 할 수 있습니다.

이제 저장된 데이터를 로드하고 있기 때문에, 프로토타이핑할 때 사용한 기본 샘플 데이터를 제거할 수 있습니다.

우리가 그것을 테스트하기 전에, 내가 작업하고 있는 위젯도 업데이트하자.

난 그냥 컨테이너를 설정하고 같은 방식으로 질문할 거야.

앱의 공유 컨테이너가 활성화되면, SwiftData는 동일한 API를 사용하여 위젯으로 내 데이터에 직접 액세스할 수 있도록 합니다.

뒷마당은 이제 SwiftData에 의해 지속되며, @Query에 의해 보기로 전달됩니다.

우리가 시작하기 전에, 나는 데이터베이스를 초기 데이터로 채웠기 때문에, 당신은 이미 새 방문객을 볼 수 있습니다.

그리고 새로운 뒷마당 물체를 추가하면, 목록으로 돌아가면 추가 작업 없이 나타날 것이다.

그리고 SwiftData는 자동으로 작동하는 실행 취소 및 다시 실행에 대한 지원과 같은 것을 포함하여 단순한 지속성 이상의 것을 제공합니다.

그리고 보시다시피, 제 위젯은 이미 우리가 방금 만든 뒷마당을 보여주고 있습니다.

그리고 그것은 SwiftData를 사용하여 데이터를 저장하고 복원하는 것이 얼마나 쉬운지 살펴보는 것입니다.

SwiftUI와 SwiftData는 매력적이고 강력한 앱을 구축할 수 있도록 협력합니다.

그들은 당신이 상용구에 더 적은 시간을 보내고 아이디어를 구축하는 데 더 많은 시간을 할애할 수 있도록 스위프트가 가능하게 하는 개발에 대한 새로운 접근 방식의 기초를 형성합니다.

다음으로, 조나단은 시스템 전반에 걸쳐 새로운 방식으로 앱을 향상시키기 위해 이러한 기술을 적용하는 방법을 보여줄 것입니다.

조나단 토마스시안: 네 가지 새로운 앱 경험에 대해 이야기하게 되어 정말 기쁩니다.

WidgetKit을 사용하면 시스템 전체의 여러 곳에서 콘텐츠를 표시할 수 있습니다.

앱 인텐트를 사용하면 앱의 기능이 시스템에 더욱 원활하게 통합됩니다.

TipKit을 사용하면 앱에서 직접 아름다운 팁을 표시할 수 있습니다.

그리고 AirDrop을 사용하면 사용자가 주변 사람들과 콘텐츠를 공유하는 것을 훨씬 더 편리하게 만들 수 있습니다.

위젯킷부터 시작합시다.

위젯은 앱의 중요한 정보를 높여 사용자가 하루를 보낼 때 앱 경험을 더 한눈에 볼 수 있고 사용할 수 있도록 합니다.

위젯은 홈 화면에서 시작되었지만, 이제 사용자가 필요할 때 바로 경험을 제공할 수 있는 더 많은 장소에 있습니다.

그리고 올해, 위젯은 훨씬 더 강력해지고 있다.

몇 가지 간단한 변경으로 iOS 17로 재구축하면, 기존 위젯은 iPhone의 StandBy에서 멋지게 보일 것입니다.

그들은 배경이 제거된 상태에서 확장되고 가장자리로 당겨진 것처럼 보일 것이므로 나란히 멋지게 보입니다.

그들은 또한 iPad의 잠금 화면에서 사용할 수 있으며, 다시 가장자리에 그려지고 배경이 제거됩니다.

여기서, 그들은 균일한 시각적 외관을 가질 것이므로 잠금 화면과 완벽하게 조화를 이룰 것이다.

그리고 macOS Sonoma에서는 데스크톱에서 풀 컬러로 사용할 수 있으며, 창에 초점이 있을 때 배경으로 물러날 수 있습니다.

그리고 이제 상호 작용에 대한 새로운 지원으로 위젯을 더 유용하게 만들 수 있습니다.

알림을 확인하는 것과 같이 탭으로 수행할 수 있는 간단한 작업은 이제 위젯에서 직접 처리할 수 있습니다.

이 모든 새로운 위젯 업데이트는 SwiftUI 기반 아키텍처에 의해 활성화되었다.

위젯의 코드는 콘텐츠를 생성하기 위해 비동기적으로 실행되며, 빌드된 SwiftUI 뷰는 아카이브에 저장됩니다.

나중에, 위젯을 그려야 할 때, 아카이브를 로드하고, 백그라운드에서 렌더링한 다음, 시스템 UI의 일부로 표시할 수 있습니다.

사용자가 버튼을 탭하면, 작업을 처리하고 UI를 업데이트하기 위해 확장 프로그램이 다시 실행됩니다.

이 아키텍처는 또한 iPhone 위젯을 Mac에 원활하게 표시할 수 있게 해준다.

연속성의 마법 덕분에, 위젯 아카이브는 네트워크를 통해 Mac으로 보낼 수 있으며, 사용자 상호 작용은 iPhone에서 처리하기 위해 다시 보낼 수 있습니다.

기존 위젯을 준비하는 것이 더 쉬울 수 없습니다.

위젯의 배경을 식별하고 위젯킷에서 제공하는 기본값을 사용하도록 패딩을 업데이트하세요.

SwiftUI의 스택 기반 레이아웃을 통해 시스템은 상황에 따라 위젯의 색상과 간격을 조정할 수 있습니다.

위젯에 SwiftUI 버튼이나 토글을 추가하여 상호 작용을 쉽게 채택할 수 있습니다.

이러한 컨트롤에서 앱 인텐트를 트리거하기 위한 새로운 지원은 필요에 따라 확장을 시작합니다.

위젯의 콘텐츠가 업데이트되면, 시스템은 Keynote의 Magic Move처럼 작동하는 전환 애니메이션을 트리거합니다.

이동된 요소는 새로운 위치로 이동하고, 추가되거나 제거된 요소는 부드럽게 퇴색하고 흐릿하게 흐리게 한다.

표준 SwiftUI 전환 API를 사용하여 추가로 사용자 정의하고 원하는 효과를 정확하게 얻을 수 있습니다.

기존 위젯에 이러한 새로운 기능을 포함하는 것이 얼마나 쉬운지 살펴봅시다.

우리의 샘플 앱에는 뒷마당에서 주목할 만한 이벤트를 추적하는 위젯이 있습니다.

내가 가장 먼저 해야 할 일은 그것의 배경을 확인하는 것이다.

여기 위젯 보기가 있으며 바로 여기 ZStack에서 배경을 볼 수 있습니다.

내가 해야 할 일은 그것을 새로운 컨테이너 배경 뷰 수정자로 옮기는 것이다.

그리고 iOS 17부터 위젯 패딩이 제공되므로, 이전에 추가했던 패딩을 제거하겠습니다.

이제 Swift Macros 덕분에 Xcode 미리보기에서 전체 위젯 타임라인을 직접 볼 수 있습니다.

여기 미리보기 캔버스 하단에 내 모든 타임라인 항목이 있습니다.

그리고 그것들을 클릭하면 내 위젯이 업데이트될 때 어떻게 움직이는지 보여준다.

이 전환은 훌륭하지만, 우리가 조금 더 새가 도착하는 것처럼 느껴지는 무언가를 할 수 있는지 봅시다.

내 앱과 마찬가지로, 나는 표준 SwiftUI 전환을 사용할 수 있다.

여기 편집기에서, 나는 BirdView에 전환 수정자를 추가할 것이다.

최첨단 푸시를 시도해 봅시다.

그거 좋아 보인다.

업데이트된 미리보기 캔버스를 사용하면 새로운 iPad 잠금 화면이나 iPhone의 StandBy와 같은 다양한 맥락에서 위젯이 어떻게 보이는지 쉽게 볼 수 있습니다.

스탠바이를 봅시다.

배경이 제거되면, 나는 내 새가 눈에 띄기를 원한다.

그리고 그것의 발은 여기서 조금 길을 잃었으니, 새 목욕을 추가하자.

SwiftUI는 배경이 제거될 때 위젯의 모양을 사용자 정의할 수 있는 새로운 showsWidgetContainerBackground 변수를 제공합니다.

좋아!

여러분 중 많은 사람들이 위젯에서 앱과 상호 작용할 수 있는 기능을 요청했고 지금은 할 수 있습니다.

내 새의 물을 다시 채울 버튼을 추가하자.

저는 이미 이 작업에 대한 앱 의도를 정의했기 때문에, 위젯의 버튼과 연결하기만 하면 됩니다.

시뮬레이터에서 시도해 보자.

그리고 그렇게, 나는 내 새의 물을 다시 채웠다.

그리고 그건 위젯킷이야.

시스템 전체의 많은 곳에서 콘텐츠를 표면화하는 것이 그 어느 때보다 쉬워졌습니다.

우리는 당신이 위젯을 향상시키기 위해 상호 작용과 애니메이션 전환을 사용할 수 있는 모든 방법에 대해 흥분하고 있습니다.

이제, 앱 의도는 위젯의 단순한 상호 작용 그 이상이다.

그들은 Spotlight, 단축키 및 Siri에서 시스템 전반에 걸쳐 앱의 기능을 향상시킵니다.

이제 앱 단축키로 인텐트를 래핑하면 Spotlight 결과의 앱 아이콘 바로 옆에 더 풍부하고 대화형 프레젠테이션으로 표시됩니다.

당신은 몇 가지만 제공하면 됩니다.

앱 단축키에서, 짧은 제목과 이미지 또는 기호.

그리고 앱의 Info.plist에서 앱 아이콘을 보완하는 배경색입니다.

그리고 앱 단축키는 업데이트된 단축키 앱에서 표면화되며, 사용자가 자동으로 실행되도록 설정하거나, 홈 화면에 추가하거나, 자신만의 단축키를 만드는 데 사용할 수 있습니다.

Siri도 훨씬 나아졌어.

사용자는 단축키를 호출할 수 있는 더 많은 자연어 유연성을 가지고 있다.

위젯킷과 앱 인텐트를 통해 사용자는 완전히 새로운 방식으로 앱의 기능에 액세스할 수 있습니다.

다음으로, 앱의 기능 발견에 대해 이야기해 봅시다.

매년, 우리 개발자들은 사용자가 좋아할 것이라고 생각하는 기능을 구축하는 데 시간을 보내지만, 때때로 가장 많은 혜택을 받을 수 있는 사용자는 그 기능이 존재한다는 것을 모릅니다!

TipKit이라는 새로운 프레임워크는 사용자에게 적시에 적절한 기능에 대해 지능적으로 교육함으로써 이 문제를 해결하는 데 도움을 준다.

TipKit에는 사용자가 시스템 앱에서 보는 데 익숙한 것과 일치하는 템플릿이 포함되어 있으며, 앱의 모양과 느낌에 맞게 쉽게 사용자 정의할 수 있습니다.

TipKit의 힘은 턴키 성격이다.

템플릿을 사용자 정의하고 타겟팅을 추가하여 사용자에게 현재 컨텍스트와 관련된 기능을 교육하기만 하면 됩니다.

또한 사용자가 다른 장치에서 보았더라도 이미 본 팁을 표시하지 않도록 전체 주파수를 관리할 수 있습니다.

마지막으로, 우리는 사용자가 AirDrop으로 앱의 콘텐츠를 공유할 수 있도록 도와주는 재미있는 새로운 방법을 가지고 있습니다.

iOS 17에서 사용자는 공유 시트를 건너뛰고 근처의 다른 장치로 콘텐츠를 빠르게 보낼 수 있습니다.

SwiftUI에서 ShareLink를 사용하거나 앱의 UIKit 뷰 컨트롤러에서 activityItemsConfiguration을 채택할 수 있습니다.

그리고 ShareSheet 및 QuickLook과 같은 시스템 제공 뷰 컨트롤러는 이미 기본적으로 작동합니다.

WidgetKit, App Intents, TipKit 및 AirDrop은 사용자가 앱의 콘텐츠를 적시에 적시에 사용할 수 있도록 하는 경험을 구축하는 데 도움이 될 것입니다.

우리는 당신이 앱을 더 발전시키기 위해 이것들을 어떻게 사용할지 기대하고 있습니다.

그리고 이제, 다린으로 돌아가.

다린: 우리의 플랫폼은 당신이 우리 제품의 독특한 하드웨어 기능에 바로 접근할 수 있도록 만들어졌습니다.

사진을 처리하기 위해 신경 엔진을 두드리든, 수면 움직임을 측정하기 위해 가속도계를 사용하든, 우리의 API는 하드웨어 기술의 힘을 쉽게 활용할 수 있는 기능을 제공합니다.

다음으로, 우리는 게임, 카메라, 디스플레이 및 Apple Watch에 대한 올해의 개선 사항을 살펴볼 것입니다.

이 모든 것이 어떻게 진행되는지 알려주는 브랜든이 있습니다.

브랜든 코리: 애플 실리콘 맥의 놀라운 성능, 긴 배터리 수명, 놀라운 그래픽은 하이엔드 게임을 실행하기 위한 완벽한 플랫폼입니다.

그리고 이제, macOS Sonoma의 게임 모드는 Mac에서 게임을 훨씬 더 좋게 만든다.

Mac이 그 어느 때보다 인기가 많기 때문에, 수백만 명의 새로운 플레이어에게 게임을 제공하기에 이보다 더 좋은 시기는 없었습니다.

Windows 또는 게임 콘솔용 게임을 만드는 개발자라면, 세 가지 간단한 단계를 사용하여 개발을 크게 가속화하는 새로운 게임 포팅 툴킷을 사용하여 게임을 Mac으로 가져오는 것이 그 어느 때보다 쉽다는 것을 알게 될 것입니다.

먼저, 제공된 에뮬레이션 환경을 사용하여 기존 Windows 게임이 Mac에서 얼마나 잘 실행될 수 있는지 평가할 수 있습니다.

이를 통해 게임의 잠재적인 성능을 즉시 분석하여 몇 달 간의 선행 작업을 없앨 수 있습니다.

두 번째 단계에서, 당신은 셰이더를 변환하고 컴파일할 것입니다.

게임 포팅 툴킷에는 지오메트리, 테셀레이션, 메쉬 및 레이 트레이싱 단계와 같은 게임의 모든 고급 셰이딩 파이프라인을 포함하여 기존의 모든 HLSL GPU 셰이더를 메탈로 자동으로 변환하는 데 사용할 수 있는 새로운 메탈 셰이더 컨버터가 포함되어 있습니다.

Xcode에서 게임을 빌드하는 동안 또는 셰이더 컴파일을 위한 사용자 지정 Windows 기반 툴체인에서 이 도구를 사용할 수 있습니다.

3단계로 넘어가세요: 그래픽 코드를 변환하고 게임을 최적화하세요.

메탈은 현대 하이엔드 게임에서 사용되는 모든 고급 그래픽과 컴퓨팅 기능을 제공하여 그래픽 코드를 믿을 수 없을 정도로 쉽게 변환할 수 있습니다.

그리고 Xcode에 바로 통합된 강력한 그래픽 성능과 디버깅 도구는 게임을 완전히 최적화하는 데 필요한 모든 지침을 제공합니다.

우리는 당신이 이러한 도구를 사용하여 Apple 실리콘의 놀라운 성능과 강력한 그래픽, 디스플레이, 오디오, 입력 및 게임 기술을 활용하여 그 어느 때보다 빠르게 Mac에 게임을 가져오는 것을 빨리 보고 싶습니다.

더 빠른 성능에 대해 말하자면, 우리는 또한 카메라에 대해 공유할 소식이 있다.

애플은 모바일 사진을 계속 추진하고 세계에서 가장 인기 있는 카메라로 놀라운 일을 할 수 있는 API를 확장하고 있다.

AVCapture는 창의성에서 생산성, 소셜 미디어, 심지어 건강에 이르기까지 모든 범주에서 iOS 앱의 3분의 1 이상에서 사용되며, 올해 강력한 성능 개선을 얻고 있습니다.

제로 셔터 지연을 사용하면 셔터를 눌렀을 때의 정확한 순간을 포착할 수 있습니다.

겹치는 캡처로, 카메라는 셔터를 빠르게 누를 때 이미지 품질을 동적으로 조정합니다.

그리고 지연 처리를 통해 딥 퓨전을 포함한 고품질 이미지를 백그라운드에서 처리할 수 있습니다.

이러한 개선 사항은 고품질 이미지를 캡처하는 동안에도 iOS 또는 iPadOS 앱에서 셔터를 누르는 사이에 샷 투 샷 시간을 최대 3배 더 빠르게 만들 것입니다.

그리고 올해 말에, 당신은 또한 볼륨과 위아래 버튼을 사용하여 카메라 셔터를 트리거할 수 있을 것입니다.

앱에 사진을 표시하는 것에 대한 큰 뉴스도 있습니다.

최근 몇 년 동안 HDR 지원 디스플레이는 iPhone, iPad 및 Mac을 포함하여 널리 사용할 수 있게 되었다.

HDR 사진은 실제 장면에서 장면을 경험한 것처럼 그 어느 때보다 더 충실하고 사실적으로 밝은 하이라이트와 어두운 그림자를 표시하기 위해 추가 다이내믹 레인지를 캡처하여 활용합니다.

애플은 아이폰 12 이상에서 수조 장의 HDR 사진을 캡처하여 HDR 사진을 주류로 가져오는 데 있어 선두주자였다.

이를 위해, 카메라 앱은 장면을 지능적으로 분석하고 캡처 시간에 추가 하이라이트와 섀도우 데이터를 저장합니다.

하지만 HDR 비디오에 대한 업계 표준이 있지만, HDR 사진을 저장하고 표시하는 표준이 없었기 때문에 작업하기가 어려웠습니다.

하지만 올해는 모든 것이 바뀌고 있어.

애플은 최근 국제 표준 기구가 비준한 HDR 사진을 인코딩하고 표시하기 위한 사양을 만들어 산업 전반의 노력을 기울였다.

이제 iOS, iPadOS 및 macOS에서 API로 사용할 수 있으므로 몇 줄의 코드로 앱에서 호환 가능한 사진을 표시할 수 있습니다.

이것은 사진뿐만 아니라 이미지를 표시하는 모든 앱에 좋은 소식입니다.

생성 콘텐츠 앱은 추가 다이내믹 레인지로 이미지를 팝업하는 데 사용할 수 있습니다.

이제 완전한 HDR 워크플로우가 가능할 것입니다: 캡처에서 편집, 공유에 이르기까지, 사진작가가 경험한 것처럼 모든 사람이 완전한 HDR 영광을 즐길 수 있을 것입니다.

다음으로, 비디오에 대해 이야기해 봅시다.

우리 모두는 요즘 화상 회의나 창의적인 앱에서 카메라로 많은 시간을 보낸다.

우리는 이러한 새로운 반응, 제스처 및 발표자 오버레이 효과와 같은 비디오 조명 및 효과에 계속 투자해 왔습니다.

그것들은 당신이 받는 카메라 피드에 내장되어 있으므로, 당신의 앱에서만 작동할 것입니다.

앱은 이러한 효과가 언제 호출되는지 관찰할 수 있으며 모든 사람이 반응하는 것을 볼 수 있도록 사용자의 타일을 홍보하는 것과 같은 추가 작업을 수행할 수 있습니다.

화상 회의 앱이 있다면, ScreenCaptureKit의 화면 공유 및 카메라 기능에 많은 개선 사항이 있습니다.

새로운 ScreenCaptureKit 선택기는 사용자가 더 개인적이고 안전한 방식으로 화면 공유를 더 쉽게 시작할 수 있게 해준다.

또한 피커를 사용하면 앱이 여러 창이나 여러 앱을 한 번에 쉽게 캡처할 수 있습니다.

사용자는 자신이 있는 앱에서 바로 공유를 시작할 수 있으며 새로운 비디오 효과 메뉴에서 공유되는 내용의 미리보기를 볼 수 있다는 것에 감사할 것입니다.

ScreenCaptureKit의 또 다른 이점은 단일 창을 공유할 때 더 나은 화면 공유를 위한 고해상도 콘텐츠입니다.

우리는 또한 iPad에 외부 카메라 지원을 도입했습니다.

이제 모든 USB 카메라를 iPad 앱 내에서 연결하고 사용할 수 있습니다.

그리고 우리는 완전히 새로운 플랫폼인 tvOS에 카메라와 마이크 기능을 추가하게 되어 기쁩니다.

tvOS의 연속성 카메라를 사용하면 iPhone과 iPad를 활용하여 처음으로 tvOS 앱에 비디오와 오디오를 통합할 수 있습니다.

그리고 거실을 무대로, 앱으로 놀라운 일을 할 수 있는 많은 잠재력이 있습니다.

예를 들어, 회의 앱은 집에서 가장 큰 화면에서 그룹 화상 통화를 더 역동적으로 만드는 센터 스테이지를 사용할 수 있습니다.

게임은 카메라와 오디오 피드를 액션에 직접 통합할 수 있다.

그리고 창의적인 앱은 인물 사진 모드와 다른 재미있는 효과를 적용하면서 비디오를 스트리밍하거나 녹화할 수 있습니다.

이미 Apple TV에 앱이 있다면, 이미 익숙한 프레임워크를 활용하여 훨씬 더 연결되고 사교적인 경험을 할 수 있습니다.

그리고 연속성 카메라를 활용하고 싶지만 아직 tvOS용으로 개발하지 않은 사람들을 위해, SwiftUI를 시작하는 것은 매우 쉽습니다.

그게 어떻게 작동하는지 보여줄게.

그래서 여기 재미있는 필터로 셀카를 찍는 iPad 앱인 PartyCam이 있습니다.

먼저, 우리는 Apple TV를 목적지로 추가할 것이다.

다음으로, 사용자가 어떤 휴대폰을 선택해야 할지 알 수 있도록 피커를 추가해야 합니다.

그런 다음 우리는 피커를 제시하기 위해 코드를 추가할 것입니다.

그리고 나서 우리는 달린다.

그리고 이제, 난 그냥 리모컨을 들고 사진을 찍는다.

안녕, 나 수잔과 세레니티야!

멋져!

우리는 네가 어떻게 거실을 더 즐겁게 만드는지 빨리 보고 싶어.

이제, watchOS의 새로운 기능을 가지고 로리에게 넘어가세요.

Lori Hylan-Cho: 우리의 첫 번째 웨어러블 장치인 Apple Watch는 개발자들이 시기적절한 알림, 건강 및 피트니스 통찰력, 편리한 앱 경험을 사람들의 손목에 제공할 수 있는 새로운 가능성을 열었습니다.

올해 watchOS 10은 최신 Apple Watch 모델의 더 크고 밝은 디스플레이와 더 유능하고 연결된 하드웨어를 활용하는 거대한 디자인 새로 고침을 얻고 있다.

SwiftUI는 이 재설계의 핵심이다.

우리는 거의 모든 앱을 더 역동적이고, 더 다채롭고, 더 한눈에 볼 수 있도록 업데이트하기 위해 시스템 전반에 걸쳐 그것을 사용했습니다.

몇 가지 예를 보여드릴게요.

watchOS 10에는 페이지 매김에 새롭게 초점을 맞추고 있으며, Vertical TabViews는 다양한 페이지 크기를 허용하여 모든 귀중한 콘텐츠를 위한 공간을 희생하지 않고 앱 내에서 스크롤하기 위해 크라운을 더 잘 활용할 수 있습니다.

새로운 컨테이너 배경 수정자를 사용하면 가독성을 위해 그라디언트 채우기와 함께 색상을 사용하여 사용자가 앱 내에서 어디에 있는지 이해하거나 데이터를 더 쉽게 볼 수 있도록 도와줍니다.

화면을 채우는 앱 디자인의 경우, 새로운 ToolbarItem 배치는 모서리를 더 잘 활용하고 필요한 경우 자동으로 중앙으로 이동하는 시간을 허용합니다.

그리고 강력한 소스 목록/세부 보기 연결이 있는 레이아웃의 경우, NavigationSplitView는 다른 플랫폼에서 사용하는 것과 동일한 코드를 사용하여 Apple Watch에서 그 어느 때보다 매력적입니다.

그리고 Apple Watch의 세부 보기 안팎의 피벗은 SwiftUI의 새로운 인터랙티브 스프링 애니메이션을 사용합니다.

이 애니메이션은 사용자의 손가락의 속도에 의해 구동되는 뷰의 크기와 위치를 모두 애니메이션화하는 애니메이션 계획을 위한 12개의 개별 트랙으로 구성되어 있습니다.

그리고 물론, 모든 주요 UI 구성 요소는 어떤 배경에서도 읽을 수 있도록 재료 처리로 업데이트되었으며, 하드웨어에 맞게 자동으로 크기가 조정됩니다.

앱에서 이미 SwiftUI를 채택한 경우, watchOS 10 SDK로 빌드할 때 이러한 업데이트를 자동으로 받을 수 있습니다.

제가 원래 watchOS 9용으로 디자인한 Backyard Birds 앱이 무슨 뜻인지 보여드리겠습니다.

NavigationStack을 사용하여 구축된 목록/세부 사항 앱이며, 코드 변경 없이도 watchOS 10으로 다시 컴파일할 때 이미 잘 작동합니다.

보기는 새로운 내비게이션 바 높이를 수용하기 위해 자동으로 조정되며, 큰 제목은 스크롤할 때 시간 아래의 위치로 축소되고 애니메이션됩니다.

이제 watchOS 10에서 앱이 훨씬 더 집에서 느낄 수 있도록 몇 가지 편집을 합시다.

항상 목록에서 선택해야 하는 것이 아니라 앱을 시작할 때마다 기본 마당의 현재 상태를 보고 싶습니다.

NavigationSplitView는 강력한 소스 목록/세부 관계가 있는 앱을 위해 특별히 설계되었으므로, NavigationStack을 NavigationSplitView로 바꿀 것입니다.

더 이상 앱의 진입점이 아니기 때문에 소스 목록에서 탐색 제목을 제거하고 기본적으로 열어야 하는 세부 보기를 표시할 것입니다.

소스 목록은 이제 세부 사항 보기 뒤에 숨겨져 있으며, 나는 세부 사항에 집중하고 있다.

하지만 내 디테일은 꽤 길어.

세 개의 명확한 섹션이 있는 스크롤 목록이므로, 각 섹션에 대해 별도의 페이지가 있는 목록을 수직 탭뷰로 변환하여 내용을 나눌 것입니다.

이 페이지들 각각은 기본적으로 화면의 높이가 될 것이며, 마지막 섹션에는 ForEach 루프가 포함되어 있기 때문에, 각 새는 자체 페이지를 갖게 됩니다.

화면 높이를 초과하면 스크롤하는 단일 탭에 모든 새 목록을 두는 것이 더 낫기 때문에, 이 ForEach를 목록으로 변경하여 스크롤 가능한 보기로 만들 것입니다.

다음으로 탭을 구별하기 위해 색상을 추가하고 싶기 때문에, 각 탭에 .containerBackground 수정자를 추가하겠습니다.

그리고 음식이나 물이 부족할 때 빠르게 발견하기 위해, 나는 생계 배경을 역동적으로 만들 것이다.

공급 수준에 따라 녹색, 노란색 또는 빨간색이 될 것입니다.

라이브 미리보기의 변경 사항을 보면, 배경색이 어떻게 앱 내에서 장소감을 주고 음식이나 물을 다시 채워야 할 때 더 쉽게 발견할 수 있는지 알 수 있습니다.

마지막 탭을 사용하면 콘텐츠가 화면의 경계를 넘어 스크롤할 수 있으며, 소스 목록 버튼을 탭하여 뒷마당 목록에 도달할 수 있습니다.

내 앱을 watchOS 10에 바로 맞추려면 몇 가지 변경만 하면 됩니다.

SwiftUI는 시스템의 모든 앱을 멋지게 보이게 하기 위해 노력하면서 우리의 삶을 더 쉽게 만들었고, 방금 보았듯이, 이러한 새로운 디자인 패러다임을 위해 앱을 쉽게 업데이트할 수 있습니다.

아직 앱에서 SwiftUI로 이동하지 않았다면, 지금이 그 때입니다.

이러한 SwiftUI 기반 앱 업데이트 외에도, watchOS 10에는 AppIntents 관련성이 위젯이 적시에 스마트 스택을 이동하는 데 도움이 되는 새로운 시스템 공간이 있습니다.

그리고 앞서 언급한 것과 동일한 .containerBackground 수정자를 사용하여 위젯을 아름다운 사용자 지정 배경으로 정말 빛나게 할 수 있습니다.

운동 앱을 구축하는 사람들을 위해, 앱에서 피트니스 계획을 공유할 수 있는 새로운 사용자 지정 운동 API와 골프와 테니스와 같은 스포츠의 스윙 분석을 개선하는 데 도움이 되는 모션 및 가속도계 데이터의 더 높은 충실도를 캡처할 수 있는 새로운 CoreMotion API를 통해 사용자가 Apple Watch의 피트니스 추적 기능을 활용할 수 있도록 도울 수 있습니다.

그리고 우리는 여러분 모두가 얼마나 창의적일 수 있는지 알고 있기 때문에, 이 데이터는 어떤 종류의 운동을 할 때 사용할 수 있습니다.

우리는 당신이 그것으로 어떤 종류의 경험을 쌓을지 빨리 보고 싶습니다.

그리고 그것은 올해 watchOS에 오는 몇 가지 큰 변화를 엿볼 수 있다.

그리고 이제, 다린으로 돌아가.

다린: 플랫폼은 또한 그것을 사용하는 사람들과 그 안에 처음부터 내장된 가치에 관한 것이다.

이러한 핵심 가치는 애플에서 우리에게 많은 것을 의미하며, 우리는 그것들이 당신에게도 많은 것을 의미한다는 것을 알고 있습니다.

우리는 함께 당신의 앱이 사람들의 요구에 적응하도록 할 수 있으므로 누구나 그것을 사용하고 자신을 보호하고 데이터를 보호해야 하는 각 사용자의 필요를 존중하는 앱을 만들 수 있습니다.

우리의 플랫폼이 제공하는 것부터 시작하면 이 중요한 일을 더 쉽게 할 수 있습니다.

더 말씀드리자면, 여기 크리스가 있습니다.

크리스: 우리는 모든 사람들이 그들이 좋아하는 것을 하기 위해 우리의 장치를 사용할 수 있어야 한다고 믿습니다.

그것이 우리 제품에 접근할 수 있도록 하는 것이 Apple의 핵심 가치인 이유입니다.

세계 보건 기구에 따르면, 전 세계적으로 10억 명이 넘는 사람들이 장애를 가지고 있다.

접근 가능한 기술을 구축하는 것은 더 많은 사람들에게 창조하고, 배우고, 연결 상태를 유지하고, 그들의 조건에 따라 살 수 있는 최고의 도구를 제공하는 것을 의미합니다.

그렇기 때문에 Apple 제품은 시각 장애인 또는 저시력, 청각 장애 또는 난청, 말을 하지 않거나 언어 손실 위험이 있는 사용자, 신체 또는 운동 장애가 있는 사용자 및 인지 장애가 있는 사용자를 위해 즉시 사용할 수 있는 접근성 기능을 갖추고 있습니다.

당사의 프레임워크에는 모든 사람이 앱에 액세스할 수 있도록 도와주는 도구 및 API와 함께 이러한 접근성 기능에 대한 지원이 내장되어 있습니다.

종종, 접근성은 큰 영향을 미치는 작은 단계를 밟는 것으로 귀결된다.

예를 들어, 작년에 우리는 확대기 앱에서 문을 감지하고 설명할 수 있는 기능을 추가하여 사람들이 독립적으로 환경을 탐색할 수 있도록 도왔습니다.

올해, 우리는 애니메이션과 깜박이는 불빛에 민감한 사용자에 대한 지원을 확대하고 있습니다.

이 사용자들은 종종 깜박이는 불빛 경고로 시작하는 영화와 같은 잠재적으로 위험한 콘텐츠를 피하거나 충분한 정보 없이 소비하는 것 사이에서 어려운 선택에 직면하며, 이는 발작과 같은 건강 위험에 노출될 수 있다.

우리의 프레임워크에는 이제 이러한 사용자가 앱의 콘텐츠에 더 쉽게 접근할 수 있는 두 가지 기능에 대한 API가 포함되어 있습니다.

첫 번째 기능은 애니메이션 이미지 일시 정지로, 사파리, 메시지 등에서 애니메이션 GIF의 움직임을 멈춥니다.

그리고 앱에 쉽게 추가할 수 있습니다.

SwiftUI에서 TimelineView로 일련의 이미지를 애니메이션화한다고 가정해 봅시다.

새로운 환경 속성을 사용하여 사용자가 애니메이션 이미지를 일시 중지하는 것을 선호하는지 이해할 수 있으며, 그렇게 하는 경우 애니메이션 이미지를 정적 이미지로 대체하여 선택을 존중할 수 있습니다.

두 번째 기능은 Dim Flashing Lights로, 밝고 깜박이는 빛의 시퀀스 동안 비디오 디스플레이를 자동으로 어둡게 합니다.

AVFoundation의 비디오 렌더링 파이프라인에는 깜박이는 요소를 식별하고 어둡게 하는 새로운 단계가 있습니다.

AVFoundation을 사용하여 앱에서 미디어를 재생하는 경우, 이 기능을 지원하는 추가 작업이 없습니다.

그러나 앱이 사용자 지정 미디어 플레이어를 사용하는 경우, 새로운 API를 사용하여 깜박이는 표시등으로 비디오 콘텐츠를 식별하고 자동으로 어둡게 할 수 있습니다.

우리는 심지어 알고리즘을 오픈 소스화했기 때문에, 당신은 이 기능 뒤에 있는 과학을 이해할 수 있습니다.

각 제품과 프레임워크에 접근성을 구축하려는 우리의 약속은 우리의 최신 플랫폼인 visionOS로 확장됩니다.

우리는 세계 최고의 기술이 모든 사람의 요구에 적응해야 한다고 믿기 때문에, visionOS는 처음부터 기초에 내장된 수십 가지 접근성 기능을 제공합니다.

그리고 개발자로서, 당신은 오늘날 iPadOS와 iOS에서 사용하는 것과 동일한 도구와 API를 사용하여 모든 사람이 visionOS 앱에 액세스할 수 있도록 함으로써 중요한 역할을 할 것입니다.

우리는 다양한 사용자에게 공간 컴퓨팅을 제공하기 위해 당신과 함께 일하게 되어 매우 기쁘며, 곧 Vision Pro의 접근성에 대해 더 많이 듣게 될 것입니다.

이제, 케이티에게 사생활에 대해 이야기해.

케이티 스키너: 애플에서, 우리는 사생활이 기본적인 인권이라고 믿습니다.

우리는 사용자들로부터 그들이 그것에 대해 얼마나 신경 쓰는지 듣고, 우리는 당신이 당신의 기능과 함께 훌륭한 프라이버시를 제공할 수 있도록 돕기 위해 여기에 있습니다.

수년에 걸쳐 우리는 당신이 앱에 프라이버시를 구축할 수 있도록 많은 방법을 구축했습니다.

올해 우리는 개인 정보 보호 프롬프트 개선부터 시작하여 여러 분야에서 사용자에게 강력한 개인 정보 보호 경험을 더 쉽게 제공할 수 있도록 하고 있습니다.

달력 권한부터 시작합시다.

우리는 많은 경우에 앱이 캘린더에 대한 읽기 액세스가 필요하지 않다는 것을 알고 있습니다. 그들은 단지 새로운 이벤트를 작성하기만 하면 됩니다.

이러한 경우, 우리는 새로운 추가 전용 권한을 만들었습니다.

이것은 당신이 필요한 접근을 얻는 데 도움이 될 것이며, 사용자는 그들에게 의미가 있는 프롬프트를 받게 될 것입니다.

그리고 사진에서, 우리는 사용자가 앱에 사진을 제공할 수 있는 두 가지 선택을 제공했습니다. 그들은 공유할 사진을 선택하거나 전체 라이브러리에 대한 액세스를 제공할 수 있습니다.

우리는 사용자가 앱과 공유할 사진을 더 쉽게 선택할 수 있도록 돕고 싶었기 때문에, 필요한 것을 정확히 얻을 수 있고 사용자는 의도한 것만 공유할 수 있습니다.

그래서 우리는 당신이 앱에 삽입할 수 있는 새로운 사진 선택기를 추가하고 있으므로, 사용자는 당신의 경험 내부에서 공유할 사진을 쉽게 선택할 수 있습니다.

다음으로, 앱 개인 정보 보호.

사용자가 데이터를 보호하는 방법을 이해하도록 돕는 것이 중요하므로, 우리는 당신이 그렇게 하는 데 도움이 되는 기능을 구축했습니다.

예를 들어, 개인 정보 보호 영양 라벨은 사용자가 어떤 데이터를 수집하고 어떻게 사용하는지 이해하는 데 도움을 줍니다.

여러분 중 많은 사람들이 훌륭한 기능을 제공할 수 있는 타사 SDK를 앱에 포함합니다.

하지만 그것들을 포함하면 라벨을 올바르게 얻기가 더 어려워질 수 있습니다. 왜냐하면 당신은 그들이 사용자 데이터를 어떻게 처리하는지 이해하지 못할 수도 있기 때문입니다.

그리고 그들은 당신의 소프트웨어 공급망에 보안 문제를 도입할 수 있습니다.

그래서 올해, 우리는 두 가지 업데이트를 소개합니다.

첫째, 제3자 SDK가 데이터를 어떻게 사용하는지 이해할 수 있도록, 우리는 개인 정보 보호 매니페스트를 도입했습니다.

이것들은 앱에서 타사 코드의 개인 정보 보호 관행을 표준 형식으로 설명하는 파일입니다.

앱을 배포할 준비를 할 때, Xcode는 사용 중인 모든 타사 SDK의 모든 매니페스트를 사용하기 쉬운 단일 보고서로 결합합니다.

모든 타사 SDK에 대한 하나의 요약 보고서를 통해 App Store Connect에서 정확한 라벨을 만드는 것이 그 어느 때보다 쉬워졌습니다.

우리는 또한 당신이 소프트웨어 공급망의 무결성을 개선할 수 있도록 돕고 싶습니다.

타사 SDK를 사용할 때, 다운로드한 코드가 기대하는 개발자가 작성했는지 알기 어려울 수 있습니다.

그것을 해결하기 위해, 우리는 제3자 SDK에 대한 서명을 도입하고 있습니다.

이제 앱에서 새 버전의 타사 SDK를 채택할 때, Xcode는 동일한 개발자가 서명했는지 확인하여 더 안심할 수 있습니다.

타사 SDK를 위한 개인 정보 보호 매니페스트와 서명을 통해 사용자를 더 쉽게 보호하고 데이터가 어떻게 사용될지 이해할 수 있도록 돕고 있습니다.

그리고 마지막으로, 우리 플랫폼에서 아이들을 보호하기 위해 개인 정보 보호 기술을 사용하는 통신 안전.

우리의 플랫폼과 당신이 만든 앱은 전 세계 많은 가족의 삶, 특히 그들이 소통하는 방식에서 중요한 역할을 합니다.

iOS 15에서 우리는 Apple 기기를 사용하는 어린이들에게 더 많은 보호를 제공하기 위해 메시지에 통신 안전 기능을 도입했습니다.

여러분 중 많은 사람들이 사용자가 콘텐츠를 공유하고 취약한 상황에서 아이들을 보호하고 싶어하는 앱을 만듭니다.

우리는 안전하지 않은 콘텐츠를 분류하기 위한 모델을 교육하고 구현하는 것이 해결하기 어려운 문제일 수 있으며 수행해야 할 많은 작업이 될 수 있다는 것을 알고 있습니다.

그래서 우리는 민감한 콘텐츠 분석 프레임워크를 통해 전체 플랫폼에 통신 안전을 가져오고 있습니다.

단 몇 줄의 코드로, 이 프레임워크는 누드가 포함된 이미지와 비디오를 감지하는 데 도움이 되며, 이는 전적으로 장치에서 발생합니다.

따라서 통신 안전을 활성화한 아이들을 위해 앱에서 긍정적인 경험을 쌓을 수 있습니다.

민감한 콘텐츠 분석 프레임워크는 통신 안전을 뒷받침하는 것과 동일한 기술을 사용합니다.

이 프레임워크는 이미지와 비디오를 전적으로 장치에서 처리하여 사용자의 개인 정보를 보호합니다.

또한, 우리는 모든 사람에게 민감한 콘텐츠 경고로 민감한 콘텐츠를 흐리게 할 수 있는 기능을 제공하고 싶었습니다.

민감한 콘텐츠 분석 프레임워크는 사용자가 통신 안전 또는 민감한 콘텐츠 경고를 활성화했는지 알려 주므로, 활성화된 기능에 따라 앱 경험을 조정할 수 있습니다.

이러한 새로운 기능을 사용하면 사용자에게 개인 정보 보호와 마음의 평화를 그 어느 때보다 쉽게 제공할 수 있습니다.

다음으로, 크리스는 우리에게 앱스토어의 새로운 기능을 알려줄 것이다.

Chris Markiewicz: 사용자가 안전, 개인 정보 보호 및 성능에 대한 높은 기준을 충족하는 앱을 발견할 수 있는 신뢰할 수 있는 장소가 있으며, 그것은 App Store입니다.

App Store를 사용하면 인앱 구매와 같은 다양한 비즈니스 모델을 사용하여 전 세계적으로 앱 배포를 확장할 수 있습니다.

StoreKit은 안전하고 신뢰할 수 있는 인앱 구매의 기초입니다.

우리는 당신의 제품을 앱의 UI에 연결할 수 있는 강력한 데이터 모델을 제공합니다.

인앱 구매를 제공하는 경우, 사용자가 정보에 입각한 구매를 할 수 있도록 가격 및 구독 기간과 같은 주요 세부 사항을 제시하는 것이 중요하다는 것을 알고 있습니다.

그리고 우리는 많은 개발자들이 이것을 바로잡기 위해 고군분투한다는 것을 알고 있다.

올해, 우리는 휴먼 인터페이스 지침의 모범 사례를 사용하여 모든 플랫폼에서 앱의 머천다이징 UI를 강화하기 위한 새로운 뷰 컬렉션으로 StoreKit을 더욱 발전시키고 있습니다.

SwiftUI의 선언적 구문을 사용하여 머천다이징 경험을 만들 수 있으며 StoreKit이 나머지를 처리합니다.

몇 가지 예를 봅시다.

ProductView를 사용하면 App Store Connect에서 정의한 데이터를 사용하여 제품을 표시할 수 있습니다.

앱의 모양과 느낌에 맞게 쉽게 사용자 정의할 수 있습니다.

SubscriptionStoreView는 구독을 위한 목적으로 만들어진 보기입니다.

한 줄의 코드로, 각 서비스 수준에 대한 설명, 가격 및 기간이 사용자에게 명확하게 표시됩니다.

이 견해들은 아이폰만을 위한 것이 아니다.

동일한 코드는 모든 Apple 장치에서 플랫폼 경험과 일치하는 뷰를 만듭니다.

그리고 그것은 심지어 Apple Watch의 컴팩트한 디스플레이에 맞게 확장되기도 한다.

그리고 물론, 그것들은 모든 사용자를 위한 접근성과 현지화를 염두에 두고 만들어졌다.

SubscriptionStoreView를 내 앱에 통합하는 것은 매우 쉽다.

Backyard Birds Pass 구독 제공에 대해 작업해 봅시다.

뒷마당 새의 모양과 느낌에 맞추기 위해 SubscriptionStoreView에 몇 가지 선언을 추가하기 위해 Xcode로 들어갈 것입니다.

나는 보기로 마케팅 콘텐츠를 사용자 정의하고, 컨테이너 배경을 추가하고, 구독 옵션의 스타일을 변경할 것이다.

이제 우리는 멋져 보이고 앱의 브랜딩과 일치하는 것을 가지고 있습니다.

또한 내 사용자와 같은 완전한 경험을 얻을 수 있는 시뮬레이터를 빠르게 살펴봅시다.

여기서 제안을 선택하고, 구독을 클릭하고, 구매를 완료할 수 있습니다.

그것이 사용자에게 정보에 입각한 결정을 내리는 데 필요한 모든 정보를 보여주기 위해 맞춤형 구매 경험을 구축하는 데 필요한 전부입니다.

우리는 또한 사용자의 구매 내역이나 구독 상태에 따라 제시하는 제안을 사용자 정의하는 것이 얼마나 어려운지 알고 있습니다.

그렇기 때문에 SubscriptionStoreView는 자동으로 사용자 자격을 결정하고 올바른 제안을 표시합니다.

새로운 StoreKit 보기는 인앱 구매를 상품화하는 가장 좋은 방법입니다.

비즈니스 성장의 또 다른 중요한 측면은 광고가 사용자가 앱을 발견하는 데 어떻게 도움이 되는지 이해하는 것입니다.

그것이 SKAdNetwork가 광고 네트워크가 사용자 개인 정보를 유지하면서 광고 캠페인이 앱 다운로드를 성공적으로 유도하는 방법을 측정하는 데 도움을 주는 이유입니다.

다운로드를 측정하는 것 외에도, 우리는 광고가 어떻게 사용자를 앱으로 다시 데려올 수 있는지 이해하는 것이 중요하다는 것을 알고 있습니다.

SKAdNetwork 5는 재참여 측정을 지원할 것이다.

사용자가 앱을 다운로드한 후 전환을 측정하는 것 외에도, 사용자가 광고를 탭하여 앱을 연 후 전환을 측정할 수 있습니다.

버전 5는 올해 말에 출시될 iOS 릴리스에서 사용할 수 있습니다.

인앱 구매와 SKAdNetwork를 위한 우리의 새로운 기능은 사용자 개인 정보를 존중하면서 책임감 있게 비즈니스를 성장시키고 사용자에게 투명성과 마음의 평화를 제공하는 데 도움이 될 것입니다.

이제, 다린으로 돌아가.

다린: 우리의 프로그래밍 언어와 프레임워크와 마찬가지로, 우리의 도구는 서로를 위해 만들어졌다.

Xcode는 모든 플랫폼에서 앱을 개발, 테스트 및 배포하는 데 필요한 모든 것을 제공합니다.

TestFlight와 Xcode Cloud는 코드의 첫 번째 줄부터 App Store의 첫 번째 다운로드까지 원활한 경험을 제공합니다.

이제 켄은 우리에게 최신 발전을 살펴볼 것이다.

Ken Orr: 모든 Apple 플랫폼의 경우, 하나의 도구가 개발자 경험의 중심에 있으며, 모든 훌륭한 앱을 구축하는 데 도움이 됩니다: Xcode.

그것은 코드를 만들고 대화형 미리보기 및 라이브 애니메이션과 사용자 인터페이스를 디자인하는 편집기, 그리고 팀과 변경 사항을 만들고, 검토하고, 공유하기 위한 내장 소스 컨트롤과 같은 강력한 기능을 제공합니다.

앱을 평가하고 구체화하는 데 도움이 되는 디버깅, 프로파일링 및 테스트 도구는 모두 TestFlight 및 App Store로의 배포를 단순화하는 지속적인 통합 및 제공 서비스인 Xcode Cloud에 연결되어 있습니다.

Xcode 15의 경우, 몇 가지 큰 업데이트가 있습니다.

대부분의 시간을 보내는 곳에서 시작합시다: 소스 편집기.

코드 완성은 실수가 적고 원하는 코드를 더 빨리 얻을 수 있도록 도와줍니다.

Xcode 15를 사용하면 우선 순위를 지정하기 위해 주변 코드를 사용하여 편집기와 함께 가장 관련성이 높은 완성으로 시작할 수 있습니다.

그것이 당신이 사용하고 있는 특정 보기에 가장 적합한 수정자인지 아니면 보기를 사용자 정의할 때 수정자를 연결할 때인지.

그리고 Xcode는 자산 카탈로그 리소스에 대한 기호를 자동으로 생성합니다. 즉, 코드 완성에 표시되고 코드에서 사용하기 쉽습니다.

이것은 런타임에 자산을 사용할 수 있다는 유형의 안전과 마음의 평화를 제공합니다.

이러한 자산을 사용하기에 좋은 장소는 SwiftUI 뷰에 있습니다.

Xcode의 미리보기는 앱의 코드와 함께 디자인할 때 거의 즉각적인 피드백과 함께 UI를 반복할 수 있는 원활한 방법입니다.

Xcode 15에서 미리보기는 사용하기 쉽고 더 많은 곳에서 사용할 수 있습니다.

그것은 쓰기 쉽고 기억하기 쉬운 스위프트 매크로를 사용하여 만들어진 새로운 구문으로 시작한다.

이제 다른 플랫폼과 장치로 작업하는 것이 더 쉬워졌습니다.

당신은 당신의 전망이 모든 곳에서 멋지게 보이도록 캔버스에서 바로 선택할 수 있습니다.

그리고 이제 모든 UI 프레임워크에서 미리보기를 사용할 수 있습니다!

SwiftUI, UIKIt 또는 AppKit을 사용하는 곳이라면, 코드의 어느 곳에서나 일관된 경험으로 UI를 반복할 수 있습니다.

이제, 변경 사항을 빠르게 만들고 미리 보는 것에 보조를 맞추기 위해, Xcode는 이러한 변경 사항을 검토하고 커밋하는 방법을 간소화합니다.

여러분 중 많은 사람들이 워크플로우에서 git 스테이징을 사용하며, 이제 Xcode에 직접 통합됩니다!

클릭 한 번으로 변경 사항을 단계화하거나 단계 해제할 수 있으며, 코드를 남기지 않고 다음 커밋을 만들 수 있습니다.

소스 컨트롤 네비게이터에서 단일 보기에서 모든 변경 사항을 검토하여 커밋을 마무리할 수 있습니다.

그리고 Xcode는 푸시되지 않은 커밋도 표시하므로, 모든 커밋을 풀 리퀘스트에 완벽하게 모을 수 있습니다.

테스트에 대해 이야기해 봅시다.

그것은 고품질 앱을 만드는 데 필수적인 부분이다.

많은 플랫폼, 장치, 언어 및 사용자 기능에서 코드가 성장함에 따라 테스트 결과를 탐색하고 어디에 집중해야 할지 아는 것은 어려울 수 있습니다.

Xcode 15에는 테스트 보고서의 완전한 재설계가 포함되어 있어 결과를 더 잘 이해하고 조치를 취할 수 있는 새로운 도구를 제공합니다.

그리고 그것은 아름다운 결과 개요로 시작한다.

그것은 나에게 같은 주장 메시지를 가진 것과 같은 일반적인 실패 패턴을 포함한 최고의 통찰력을 보여준다.

나는 또한 내 테스트가 장치와 언어와 같은 구성에서 어떻게 실행되었는지에 대한 포괄적인 요약을 얻었고, 그것은 내가 패턴을 발견하는 데 도움이 된다.

그리고 어디에 집중해야 할지 빠르게 보여줄 수 있는 히트 맵이 있어.

이제, 저는 Backyard Birds 앱의 기능을 작업하고 있습니다.

그리고 내 최신 시운전을 보면, 몇 가지 문제가 있다는 것을 알 수 있다.

이 통찰력을 클릭하여 시작하겠습니다.

내 새로운 시험에서 탭 제스처가 실패하는 것 같아.

실패한 이 테스트를 클릭하면 오른쪽에 있는 앱 UI의 전체 기록과 함께 여기 왼쪽에 있는 테스트 활동에 대한 자세한 보기를 볼 수 있습니다.

나는 특정 활동을 선택할 수 있다.

아니면 나는 새로운 타임라인을 사용하여 언제든지 점프할 수 있다.

테스트가 이 보기를 여기로 스크롤했을 때 또는 검색 필드를 탭한 곳과 같은 흥미로운 점에 대한 표시를 볼 수 있습니다.

그리고 이것은 나에게 훨씬 더 많은 세부 사항을 제공하는 전체 비디오 녹화이며, 시험이 실패하기 전에 정확히 무슨 일이 일어났는지 보여준다.

무슨 일이 일어났는지 보기 위해 연주할게.

여기서, 그 시험은 새에게 먹이를 줄 음식을 고르는 것이다.

새는 날아다니기 시작하고, 내 행동이 완료되기 전에 사라지고, 그것이 내 테스트가 실패하게 만들었다.

타임라인과 비디오 녹화가 포함된 이 새로운 테스트 세부 사항을 통해 애니메이션, 제스처 및 기타 UI 경험에 대한 테스트를 훨씬 빠르게 검토할 수 있습니다.

그리고 비디오 이상의 것이 필요할 때, 접근성 프레임을 볼 수 있어, 내 견해에 대한 더 많은 통찰력을 얻을 수 있다.

모두 합쳐진 새로운 보고서 경험은 테스트를 최대한 활용할 수 있도록 깊은 통찰력, 더 세밀한 세부 사항 및 더 많은 상호 작용을 제공합니다.

그리고 그것은 Xcode와 Xcode Cloud에서 원활하게 작동합니다.

Xcode Cloud는 모든 Apple 플랫폼에서 앱을 구축, 테스트 및 공유하는 데 도움이 되는 지속적인 통합 및 제공 서비스입니다.

Xcode에 깊이 통합되어 한 곳에 집중하여 시간을 절약할 수 있습니다.

Apple의 클라우드 인프라를 활용하여 배포를 위한 빌드, 테스트 및 코드 서명을 오프로드합니다.

그것은 TestFlight 및 App Store Connect와 같은 Apple 서비스와 연결됩니다.

그리고 그것은 당신과 당신의 프로젝트를 보호하기 위해 고급 보안으로 만들어졌습니다.

작년에, 우리는 Apple Developer Program의 모든 회원에게 Xcode Cloud를 제공했습니다.

수만 개의 팀이 Xcode에서 직접 프로젝트를 온보딩했고 피드백은 훌륭했습니다!

그리고 우리는 계속해서 Xcode Cloud를 더 좋게 만들고 있습니다.

우리는 공연에 정말 관심이 있어.

작년부터, 우리는 당신이 컴퓨팅 시간으로 더 많은 것을 할 수 있도록 상당한 투자를 했습니다.

우리는 또한 당신의 가장 중요한 요청을 추가했습니다.

TestFlight에 배포할 때, 이제 테스터 노트를 만들고 공유하여 모든 사용자가 최신 개선 사항을 최신 상태로 유지할 수 있습니다.

Xcode Cloud는 또한 DeveloperID로 배포할 때 macOS 공증을 지원하므로 사용자와 공유하기 전에 앱에 악성 구성 요소가 있는지 자동으로 확인할 수 있습니다.

워크플로우를 설정하는 데 단 몇 분만 있으면, 몇 시간의 컴퓨팅 시간을 활용하여 앱을 구축, 테스트 및 배포할 수 있습니다.

우리는 Xcode Cloud를 더 빠르고 안전하며 유연하게 만들기 위해 Xcode Cloud의 미래에 대해 기쁘게 생각합니다.

지난 한 해 동안, 우리는 모든 빌드를 더 빠르고 확장 가능하게 만들기 위해 Apple 실리콘의 멀티코어 아키텍처를 위한 컴파일러를 최적화했습니다.

링커는 처음부터 재설계되어 링크 속도가 크게 향상되었다.

연결은 최대 5배 더 빠릅니다!

새로운 링커는 또한 디버그 바이너리의 크기를 최대 30%까지 줄인다.

그리고 많은 프레임워크를 포함하는 앱의 경우, 개발 중에 더 빠른 빌드를 제공하고 앱 크기를 줄이고 생산을 위한 더 빠른 출시 시간을 제공하는 새로운 프레임워크 유형이 있습니다.

마지막으로, 우리는 Xcode를 더 빠르고 쉽게 시작할 수 있도록 계속하고 있습니다.

Mac App Store에서 Xcode는 이제 50% 더 작아졌고, 모든 시뮬레이터는 주문형으로 다운로드할 수 있습니다.

즉, 빠르게 시작하고 적시에 필요한 플랫폼을 설치할 수 있습니다.

그리고 이제, 다린으로 돌아가.

다린: 우리가 새로운 플랫폼을 도입할 때 모두 함께 작동하는 언어, 프레임워크, 도구 및 서비스를 구축하는 우리의 독특한 접근 방식은 진정으로 살아난다.

공유 재단의 사용은 개인의 강점을 빛나게 하면서 플랫폼을 친숙하게 보이게 하는 데 도움을 준다.

visionOS는 우리가 수년 동안 플랫폼에서 해온 투자를 활용하고 이 접근 방식의 이점을 보여줍니다.

여기 그것에 대해 말해줄 마이크가 있어.

마이크 록웰: 애플 비전 프로의 출시는 공간 컴퓨팅에서 함께하는 여정의 시작을 나타낸다.

당신은 이제 이전에 가능하다고 이해했던 것 이상으로 나아가고 연결되고, 생산적이며, 즐겁게 하는 것이 무엇을 의미하는지 다시 상상할 수 있습니다.

비전 프로는 많은 획기적인 기술을 가지고 있다.

당신의 앱은 새로운 요소를 사용하여 사용자의 공간과 상호 작용하고 그들의 방과 원활하게 조화를 이룰 것입니다.

이것은 당신이 이미 알고 있는 강력한 기술을 사용하여 모두 가능합니다: SwiftUI, RealityKit 및 ARKit - 이제 visionOS용으로 확장되었습니다.

이 견고한 기반과 업데이트된 개발자 도구 세트로, 당신은 Apple Vision Pro를 위한 완전히 새로운 앱 세계를 만드는 집에서 바로 느낄 것입니다.

오늘 우리는 기본 빌딩 블록에서 중요한 프레임워크, 도구 및 기술에 이르기까지 visionOS를 시작하는 데 필요한 모든 것을 다룰 것입니다.

Vision Pro에서 앱에 생명을 불어넣을 때 우리가 당신을 지원하기 위해 출시하는 활동과 프로그램에 대해 배우게 될 것입니다; Vision Pro의 무한한 캔버스를 활용하거나 방을 몰입형 미디어 환경으로 바꾸는 앱.

그러니 소매를 걷어붙이자.

Vision Pro를 사용하면 앱 경험을 위해 무엇이 가능한지 다시 생각해 볼 수 있습니다.

당신이 만들고 있는 앱의 종류에 관계없이, 당신은 그것이 사용자의 공간에서 3D로 어떻게 존재할지 이해해야 합니다.

이것은 당신이 개발자로서 내리는 결정을 알려줄 것입니다.

그 이해는 Vision Pro의 기능을 활용하는 데 도움이 될 것이며, 지금까지는 불가능했던 방식으로 앱에 집중과 몰입도를 제공합니다.

기본적으로, 앱은 공유 공간으로 시작됩니다.

공유 공간은 Mac 데스크톱의 여러 앱과 마찬가지로 앱이 나란히 존재하는 곳이다.

사용자는 원하는 곳 어디든 앱을 재배치할 수 있는 완전한 에이전시를 가지고 있다.

친숙한 창부터 시작하여 공간 내에서 사용할 수 있는 요소에 대해 이야기해 봅시다.

visionOS에서, 당신의 앱은 SwiftUI 장면인 하나 이상의 창을 열 수 있으며, 당신이 기대하는 대로 우주의 비행기처럼 행동할 수 있습니다.

그들은 전통적인 뷰와 컨트롤을 포함할 수 있으며, 심지어 3D 객체와 RealityViews를 지원하여 3D 콘텐츠가 2D 콘텐츠와 나란히 앉을 수 있도록 합니다.

또한, 앱은 SwiftUI 장면인 3차원 볼륨을 만들고 게임 보드나 지구본과 같은 3D 개체를 선보일 수 있습니다.

볼륨은 이 공간에서 이동할 수 있고 모든 각도에서 볼 수 있다.

경우에 따라, 사용자가 비디오를 보거나, 게임을 하거나, 프레젠테이션을 리허설할 수 있도록 앱의 몰입 수준을 더 잘 제어하고 싶을 수도 있습니다.

앱, 창, 볼륨 및 3D 개체만 사용자의 보기에 나타나는 전용 전체 공간을 열어 이를 수행할 수 있습니다.

그래서 그것들은 공간 컴퓨팅의 기본 요소이다: 창문, 볼륨, 그리고 공간.

그들은 당신에게 몰입의 연속성을 아우를 수 있는 앱을 만들 수 있는 유연한 도구 세트를 제공합니다.

이제, 앱 구축을 시작하는 방법에 대해 더 자세히 알려드리기 위해, 여기 제프가 있습니다.

제프 스탈: 비전 프로는 여러 종류의 앱을 지원합니다.

기존 iPad 및 iPhone 앱은 각각 원래의 모양과 느낌으로 확장 가능한 단일 2D 창으로 지원됩니다.

하지만 그것은 가능한 것의 시작에 불과하다.

핵심적으로, visionOS는 iPadOS와 iOS와 유사하며, 많은 동일한 기본 프레임워크를 포함한다.

SwiftUI와 UIKit을 사용하여 사용자 인터페이스를 구축하고, RealityKit을 사용하여 3D 콘텐츠, 애니메이션 및 시각 효과를 제시하고, ARKit을 사용하여 사용자 주변의 공간을 이해합니다.

이것들은 모두 visionOS SDK의 일부입니다.

그래서 당신의 앱을 Vision Pro로 가져오려면 어떻게 해야 하나요?

먼저, Xcode에서 프로젝트에 visionOS 대상을 추가하세요.

이제, 재구축할 때, 당신의 앱은 자동으로 정말 멋진 개선을 얻습니다.

visionOS 모양과 느낌이 있는 재료, 눈과 손 입력을 위해 조정된 간격이 있는 완전히 조정 가능한 창, 사용자 지정 컨트롤에 대한 하이라이트 조정에 대한 액세스.

그런 다음, visionOS별 코드를 추가하여 앱을 창, 볼륨 또는 공간 모음으로 확장할 수 있습니다.

여기에서 SwiftUI, RealityKit 및 ARKit의 확장된 기능을 활용할 수 있습니다.

여기 어떻게 하는지 알려주는 엔리카가 있습니다.

엔리카 카수치: 비전OS에서, 우리의 많은 프레임워크가 공간 경험을 지원하기 위해 확장되었다.

SwiftUI를 사용하면 이제 창 안에 깊이를 추가하거나 3D 개체를 추가할 수 있습니다.

iOS와 MacOS에서 ZStack은 일반적으로 레이어링 뷰에 사용됩니다.

visionOS는 더 나아가고, 당신은 그것들을 깊이로 분리할 수 있습니다.

이것은 당신의 2차원 앱에 3차원적인 느낌을 줍니다.

새로운 z-offset 뷰 수정자를 사용하여 UI 요소에 미묘한 변화를 깊이 추가할 수 있습니다.

더 높은 오프셋 값은 더 낮은 값을 가진 뷰 앞에서 뷰를 보여준다.

그리고 예를 들어 선택에 대한 세부 사항을 표시할 때 강조를 표시하거나 양식의 변화를 나타내기 위해 이것을 사용할 수 있습니다.

그리고 추가 보기 수정자를 사용하면 너비, 높이 및 깊이를 더 잘 제어할 수 있습니다.

Vision Pro에서는 제스처조차도 추가 공간을 알고 있다.

우리는 모두 화면 주위로 물건을 끄는 데 익숙하다.

이제, 사람들은 물리적 공간의 어느 곳에서나 물체를 움직이거나 회전시킬 수 있을 것이다.

SwiftUI로 볼륨을 만들 수도 있습니다.

그것은 앱 창 옆에 존재할 수 있으며, 공유 공간에서 실행할 때 다른 앱과 나란히 있습니다.

그리고 SwiftUI 창과 볼륨은 사용자의 방 어디에나 3D 개체와 SwiftUI 요소를 배치할 수 있는 전체 공간 안에 있을 수 있습니다.

SwiftUI는 앱을 visionOS에 빠르고 쉽게 가져올 수 있을 뿐만 아니라, 완전히 몰입감 있는 경험을 제공할 수도 있습니다.

그리고 SwiftUI는 이제 RealityKit을 통해 렌더링되므로 SwiftUI와 RealityKit API를 쉽게 혼합할 수 있습니다.

장식품, 재료 및 호버 효과와 같은 UI 향상을 활용할 수 있습니다.

장식품을 사용하면 창과 볼륨의 가장자리에 UI 구성 요소를 부착할 수 있습니다.

그것들은 도구 모음과 메뉴와 같은 것들에 아주 좋습니다.

호버 효과는 사용자가 보이는 곳에 반응하여 UI 요소를 강조한다.

시스템 컨트롤이 자동으로 이러한 효과를 받는 동안, 사용자 지정 컨트롤이 하이라이트 또는 빛을 표시할지 여부를 결정할 수 있는 옵션이 있습니다.

그리고 재료는 사용자 주변의 세계에 적응합니다.

역동적인 흐림과 생동감은 조건에 상관없이 앱을 읽을 수 있게 합니다.

다른 플랫폼과 마찬가지로, SwiftUI를 사용하여 visionOS 앱을 구축하는 것이 좋습니다.

UIKit으로 구축된 기존 앱도 visionOS용으로 다시 컴파일할 수 있으며, 장식품, 호버 효과, 재료 및 기본 모양과 느낌에 액세스할 수 있습니다.

SwiftUI는 visionOS에서 공간 경험을 구축하는 데 사용할 프레임워크 중 하나일 뿐입니다.

에드윈은 당신의 여행에 도움이 될 몇 가지를 더 안내할 것입니다.

에드윈 이스칸다르: 동적 3D 모델, 애니메이션 및 시각 효과의 전체 장면으로 앱을 확장할 준비가 되면, 공간 경험을 렌더링하기 위해 처음부터 구축된 Apple의 3D 렌더링 엔진인 RealityKit을 사용하고 싶을 것입니다.

우리는 2019년에 RealityKit과 SwiftUI를 독립적인 프레임워크로 함께 도입했습니다.

Apple Vision Pro에서는 깊이 통합되어 있어 선명하고 반응이 빠르며 부피가 큰 인터페이스를 구축할 수 있습니다.

3D 콘텐츠는 SwiftUI 뷰와 상태에 바인딩할 수 있으며, 2D 및 3D 시각적 요소를 원활하게 결합할 수 있습니다.

RealityKit은 물리적 조명 조건에 자동으로 조정하고 바닥과 테이블에 그림자를 던져 실제 경험을 제공합니다.

이것은 당신의 앱이 방에 속한 것처럼 보이게 합니다.

RealityKit은 또한 키노트에서 본 공룡과 같은 3D 장면으로 포털을 만들어 믿을 수 없을 정도로 선명한 텍스트를 렌더링하여 편안하게 읽을 수 있고, 놀라운 시각 효과를 만들 수 있는 사용자 정의 가능한 재료 시스템을 포함하여 중요한 새로운 기능을 가지고 있습니다.

또한, 렌더링은 Dynamic foveation이라는 기술을 사용하여 Apple Vision Pro에서 훨씬 더 효율적입니다.

RealityKit은 아이트래킹을 활용하여 사용자가 매우 높은 충실도로 집중하고 있는 영역을 선택적으로 렌더링하여 주변 콘텐츠의 렌더링 비용을 줄이고 앱이 장치의 처리 능력을 극대화할 수 있도록 합니다.

RealityKit은 반사 또는 금속과 같은 물리적 특성을 지정할 수 있도록 하여 놀라운 사실적인 결과로 3D 모델을 렌더링합니다.

기본적으로 RealityKit은 가상 콘텐츠를 렌더링하여 조명이 실제 방의 조명 조건에 연결되도록 합니다.

창의적인 의도에 따라 리얼리즘을 사용자 정의하거나 확장하고 싶다면, 이미지 기반 조명 자산 또는 IBL을 제공하여 모양을 개별화할 수 있습니다.

자료를 작성하기 위해 RealityKit은 주요 영화, 시각 효과, 엔터테인먼트 및 게임 회사에서 사용하는 표면 및 지오메트리 셰이더를 지정하기 위한 개방형 표준인 MaterialX를 채택했습니다.

다양한 업계 최고의 제작 도구에서 MaterialX에 대한 광범위한 지원은 셰이더를 훨씬 쉽게 작성할 수 있게 해준다.

MaterialX를 사용하면 음영 특성을 정의할 수 있도록 하여 개별 재료의 모양을 설계하고 빠르게 반복할 수 있습니다.

선택할 수 있는 자료의 저장소와 자신만의 사용자 지정 셰이더를 작성하는 데 사용할 수 있는 Houdini와 Maya와 같은 유용한 도구가 있습니다.

RealityKit은 RealityView라는 새로운 SwiftUI 뷰를 제공합니다.

RealityView는 창, 볼륨 및 공간 내에서 사용할 수 있으며, 제어하는 장면 내에서 원하는 곳에 3D 콘텐츠를 배치할 수 있습니다.

또한 3D 콘텐츠에 2D SwiftUI 뷰를 삽입할 수 있는 첨부 파일을 지원합니다.

SwiftUI와 RealityKit과 함께, 세 번째 강력한 프레임워크를 사용하면 사용자의 주변 환경을 최대한 활용할 수 있습니다: ARKit.

ARKit은 사용자 주변의 공간을 이해하여 바닥에서 튀는 공이든 벽에 튀는 물이든 앱 콘텐츠가 방과 상호 작용할 수 있도록 합니다.

ARKit은 다양한 핵심 시스템 기능을 지원하는 visionOS의 실시간 알고리즘을 호스팅합니다.

이러한 알고리즘은 항상 실행되며, 이는 앱이 어떻게 구축되든 공유 공간에서 ARKit의 혜택을 자동으로 받는다는 것을 의미합니다.

지속성과 세계 매핑은 시스템에 의해 처리된다.

세분화, 매트 및 환경 조명은 전체 공간에 자동으로 적용됩니다.

그리고 사용자의 허가를 받으면, ARKit 기능을 Full Space 앱에서 직접 사용할 수 있습니다.

전체 공간 내에서 앱은 iOS에서 ARKit과 동일한 앵커 개념을 사용하는 ARKit의 평면 추정, 장면 재구성, 이미지 앵커링 및 세계 추적을 활용하여 방과 현실적으로 상호 작용할 수 있습니다.

이를 통해 기존 ARKit 앱을 visionOS로 쉽게 마이그레이션할 수 있습니다.

그리고 visionOS에서는 이제 골격 손 추적에 액세스할 수 있습니다.

손 추적을 사용하여 앱 경험을 위한 사용자 지정 제스처를 만들거나 디지털 정보로 사용자의 손을 보강할 수도 있습니다.

ARKit은 iOS에 도입된 동일한 골격 모델에서 관절의 위치와 방향을 제공한다.

SwiftUI, RealityKit 및 ARKit 전반에 걸친 통합 접근 방식을 통해 수년 동안 이미 Apple 플랫폼에 투자한 학습과 투자를 활용할 수 있습니다.

그리고 그것은 당신이 앱에 접근할 수 있도록 하기 위해 기울인 노력을 포함합니다.

공간 컴퓨팅이 접근성을 위한 새로운 기회를 열어주기 때문에 이것은 특히 의미가 있다.

Apple Vision Pro에서 신체 및 운동 장애가 있는 사용자는 눈이나 목소리 또는 이 둘의 조합으로 장치와 완전히 상호 작용할 수 있습니다.

사용자는 또한 검지 손가락, 손목 또는 머리로 Vision Pro를 탐색하기 위한 대체 포인터로 선택할 수 있습니다.

다른 플랫폼에서 수년 동안 사용한 것과 동일한 기술로 visionOS에서 앱에 액세스할 수 있습니다.

접근성 검사기는 visionOS 앱의 접근성 문제를 분석하고 보고하며, 더 쉽게 접근할 수 있도록 하는 방법에 대한 제안을 제공합니다.

그리고 프레임워크에 내장된 접근성 지원을 통해 장애가 있는 사용자에게 visionOS 앱과 경험을 쉽게 제공할 수 있습니다.

예를 들어, VoiceOver가 물체의 물리적 외관과 같은 정보를 전달하는 라벨과 설명을 추가하여 시각 장애가 있거나 시력이 낮은 사용자에게 앱의 물체를 설명할 수 있도록 도울 수 있습니다.

또한 더 큰 텍스트 크기를 위한 동적 유형, 더 나은 가독성을 위한 투명도 감소, 헤드 잠금 콘텐츠에 대한 대안과 같은 디자인에 따라 앱에 더 쉽게 접근할 수 있도록 사용자 환경 설정을 통합할 수 있습니다.

이러한 친숙한 API와 도구를 사용함으로써, 당신의 앱은 전 세계 사용자가 공간 컴퓨팅에 접근할 수 있도록 하는 데 큰 역할을 할 것입니다.

그래서 그것은 놀라운 visionOS 앱을 만드는 데 사용할 수 있는 강력한 프레임워크에 대한 소개입니다.

이제 당신이 사용할 수 있는 모든 도구에 대해 이야기할 테사가 있습니다.

Thessa Buscar-Alegria: Vision Pro용 앱을 구축하기 시작하면, 프레임워크 이상의 것을 인식할 수 있습니다.

우리의 개발자 도구도 visionOS를 지원하기 위해 업데이트되었습니다.

다른 모든 플랫폼과 마찬가지로, Xcode는 Vision Pro를 위한 개발 경험의 중심에 있습니다.

기존 프로젝트에 visionOS 대상을 추가하거나, 이 플랫폼의 고유한 기능에 전념하는 완전히 새로운 앱을 만들 수 있습니다.

앱을 구축하는 첫 번째 단계는 2D 및 3D 콘텐츠 모두에서 올바른 모습을 얻는 것입니다.

Xcode 미리보기를 사용하면 편집기를 떠나지 않고도 모양을 빠르게 반복할 수 있습니다.

전체 앱 테스트를 시작할 때가 되면, 앱을 실행하고 디버깅할 수 있는 강력한 환경을 제공하는 시뮬레이터로 이동할 수 있습니다.

키보드, 트랙패드 또는 호환 가능한 게임 컨트롤러를 사용하여 장면을 이동하고 둘러볼 수 있습니다.

그리고 시스템 제스처를 시뮬레이션하여 앱과 상호 작용할 수 있습니다.

시뮬레이터는 또한 앱을 시각화하는 데 도움이 되도록 주간 및 야간 조명 조건으로 세 가지 시뮬레이션 장면을 제공합니다.

Vision Pro로 개발할 때, 작동하고 있는지 확인하기 위해 장치에서 앱을 구축하고 실행할 것입니다.

당신이 일하는 방식을 바꿀 이 추가 기능을 공유하게 되어 매우 기쁩니다.

Mac 가상 디스플레이를 사용하면 Mac의 하이파이 4K 가상 모니터를 보는 것만으로 Vision Pro로 바로 가져올 수 있습니다.

장치 내에서 Mac의 모든 기능을 사용할 수 있으며, 여기에는 Xcode가 포함됩니다.

이것은 놀라운 엔드투엔드 개발 경험입니다: 중단이나 컨텍스트의 손실 없이 Vision Pro에서 앱을 코딩, 테스트 및 디버깅합니다.

때때로, 당신은 앱의 콘텐츠가 현실 세계와 어떻게 관련되는지에 대한 세부 사항을 파헤쳐야 합니다.

앱이 사용자의 방과 상호 작용할 때, 벽을 시각적으로 클리핑하는 3D 콘텐츠와 같은 독특한 과제를 제시할 수 있습니다.

Xcode는 3D 콘텐츠와 관련하여 충돌, 폐색 및 장면 이해를 탐구하는 데 도움이 되는 실용적인 디버그 시각화를 제공합니다.

이러한 시각화는 시뮬레이터와 Vision Pro 모두에서 작동합니다.

비전OS 앱을 발전시키면서, 그것들은 더 공간적이 되어 평평한 창의 경계를 벗어나 이전과는 달리 사용자에게 3D 경험을 제공할 것입니다.

이것을 올바르게 하려면 새로운 시각적 도구가 필요하다.

그것이 우리가 Reality Composer Pro를 만든 이유이다.

Reality Composer Pro는 visionOS 앱의 3D 콘텐츠를 미리 보고 준비할 수 있는 응용 프로그램입니다.

3D 모델, 애니메이션, 이미지 및 사운드와 같은 자산을 가져오고 구성할 수 있습니다.

Xcode 빌드 프로세스와 긴밀하게 통합되어 Vision Pro에서 사용할 수 있도록 자산을 최적화합니다.

콘텐츠를 Vision Pro로 쉽게 보내 미리보기, 크기 조정 및 회전할 수 있습니다.

언제든지 새로운 변경 사항을 푸시하고, 코드 한 줄을 입력하기 전에 콘텐츠가 어떻게 보이는지 보세요.

여기 당신에게 투어를 해줄 제이슨이 있습니다.

제이슨 케이힐: 저는 당신을 태양계를 통과하는 샘플 프로젝트 중 하나를 진행하고 있습니다.

저는 제 3D 콘텐츠가 훌륭한 Vision Pro로 보이도록 하고 싶고, 지금 Reality Composer Pro를 사용하여 업데이트할 것입니다.

3D 모델링 응용 프로그램에서 만든 위성 모델과 이미지를 가져오는 것으로 시작하겠습니다.

이 모델은 많은 세부 사항을 가지고 있지만, 현재 재료는 없다.

Reality Composer Pro에서 사용자 지정 자료를 만든 다음, 사용자 정의할 수 있는 셰이더 그래프로 이동할 것입니다.

코드에 들어갈 필요 없이 개체의 모양을 변경하기 위해 간단한 이미지와 기능 노드를 추가하는 것은 쉽고 재미있습니다.

당신은 무언가를 시도하고 결과를 즉시 볼 수 있으며, 핸드 타입 셰이더로 인해 컴파일러 오류가 발생하지 않을 것입니다.

나는 다른 노드들에게도 이것을 반복할 것이다.

언제든지 Vision Pro에서 바로 작업을 미리 볼 수 있습니다.

나는 그것을 확장하거나, 움직이거나, 회전시킬 수 있고, 내가 원하는 대로 보이고 느껴지는지 확인할 수 있다.

난 이 변화들이 좋아.

그런 다음 내 변경 사항이 내 프로젝트에 반영되어 Xcode 미리보기 또는 시뮬레이터에서 사용할 준비가 된 Xcode로 다시 이동하세요.

그렇게, 내가 코드를 로드하고 내 앱에서 사용할 준비가 됐어!

Reality Composer Pro를 사용하면 visionOS 개발 프로세스에 Xcode와 나란히 작동하는 강력한 새로운 도구가 있어 코드를 구축하고 실행하는 것만큼 쉽게 3D 콘텐츠를 미리 보고 준비할 수 있습니다.

테사: 앱을 베타 테스트할 준비가 되면, TestFlight는 처음부터 Vision Pro에서 사용할 수 있습니다.

App Store Connect, Xcode 또는 Xcode Cloud를 통해 예상대로 TestFlight에 새 빌드를 제출하면 테스터는 이를 설치하고 기본 TestFlight 앱에서 바로 귀중한 피드백을 제공할 수 있습니다.

그들은 또한 Vision Pro에서 호환 가능한 iPad 및 iPhone 앱의 베타 빌드에 액세스할 수 있습니다.

Xcode에서 TestFlight, 그리고 Reality Composer Pro에 이르기까지 이 개발 도구 및 서비스를 통해 Vision Pro를 위한 놀라운 앱을 만들 수 있습니다.

그리고 이제, 마이크에게 돌아가.

마이크: 여러분 중 많은 사람들이 유니티로 3D 앱과 게임을 만드는 데 수년을 투자했습니다.

앱을 Vision Pro로 쉽게 가져올 수 있도록, Apple과 Unity는 RealityKit 위에 Unity의 실시간 엔진을 계층화하고 visionOS를 대상으로 하는 개발 도구를 활성화하기 위해 깊이 협력해 왔습니다.

이것은 유니티가 만든 앱이 공유 공간의 다른 visionOS 앱과 공존할 수 있으며, Apple Vision Pro의 고유한 이점을 최대한 활용할 수 있다는 것을 의미합니다.

더 말씀드리자면, 유니티의 랄프를 소개하고 싶습니다.

랄프 하우어트: 고마워, 마이크.

visionOS에 대한 깊은 통합에 대해 Apple과 협력하는 것은 정말 흥미로웠습니다.

이제 Unity의 강력하고 친숙한 저작 도구를 사용하여 새로운 visionOS 게임과 앱을 만들 수 있습니다.

그리고 기존 Unity에서 만든 프로젝트를 Vision Pro로 가져와 이 새로운 플랫폼에 대한 경험을 다시 상상할 수 있습니다.

당신의 앱은 AR Foundation과 같은 친숙한 Unity 기능 외에도 고해상도 패스스루 및 Dynamic Foveated Rendering과 같은 visionOS의 모든 이점에 액세스할 수 있습니다.

그리고 Unity와 visionOS 간의 깊은 통합을 통해, 당신의 앱은 공유 공간에서 다른 앱과 함께 나타날 수도 있습니다.

Unity의 저작 및 시뮬레이션 기능을 RealityKit의 관리 앱 렌더링과 결합함으로써, Unity로 만든 콘텐츠는 visionOS에서 집처럼 보이고 느껴집니다.

유니티를 사용하면 커뮤니티, 튜토리얼 및 템플릿을 빠르게 시작할 수 있습니다.

우리는 Apple Vision Pro가 공간 컴퓨팅의 새로운 개척을 출시했다고 믿으며, 당신이 만들 새로운 앱과 게임을 보게 되어 정말 기쁩니다.

마이크: 정말 고마워, 랄프.

너와 함께 일하다니 정말 멋졌어.

다음 단계를 계획할 때 알아야 할 visionOS의 몇 가지 기본 기능이 있습니다.

여기 제프가 당신에게 모든 세부 사항을 알려드리겠습니다.

제프 노리스: Vision Pro용 앱을 만드는 데 사용하는 프레임워크는 최소한의 노력으로 플랫폼의 강력한 하드웨어와 소프트웨어를 활용하고 사용자 개인 정보를 보존하는 두 가지 목표를 염두에 두고 설계되었습니다.

앱이 주변 환경과 조화를 이루는 방식부터 자연스러운 사용자 상호 작용, 협업을 위한 새로운 가능성에 이르기까지 시스템 전반에 걸쳐 이러한 원칙을 볼 수 있습니다.

visionOS는 현실적인 조명과 그림자를 가능하게 하기 위해 사용자 주변의 3D 모델을 구축한다.

결과적으로, 앱은 카메라 데이터에 접근할 필요 없이 자연스럽게 주변 세계와 조화를 이룰 수 있다.

visionOS는 동일한 3D 모델을 사용하여 앱에 차세대 공간 오디오를 활성화합니다.

현실 세계에서, 소리는 공간을 통해 그리고 그 주변에서 반향을 일으키며, 사람의 귀에 도착하기 전에 벽과 가구에서 튀어나와 있다.

앱의 가상 사운드는 같은 방식으로 작동해야 합니다.

이를 위해서는 사용자의 주변 환경에 대한 정교한 이해가 필요하다.

visionOS의 PHASE 공간 오디오 엔진은 음향 감지와 3D 장면 이해를 융합하여 공간의 음향 특성에 대한 상세한 모델을 만듭니다.

음원과 사용자가 환경을 이동함에 따라, PHASE는 오디오 광선 추적 시뮬레이션을 실시간으로 업데이트합니다.

이 모델은 Apple의 맞춤형 공간 오디오 기술과 결합하여 각 개인과 주변 환경에 맞게 경험을 자동으로 조정합니다.

이 모든 놀라운 복잡성은 당신을 위해 관리되며, 사용자의 물리적 공간에 대한 세부 사항에 접근할 필요가 없습니다.

RealityKit을 사용하면 소리가 어디에서 올지 결정하고, visionOS는 자연스럽게 그것들을 현실 세계로 혼합합니다.

앱에서 사실적인 조명과 오디오를 지원하는 알고리즘과 마찬가지로, visionOS의 사용자 입력은 자동으로 작동하며 설계상 비공개입니다.

Hover 효과는 SwiftUI 또는 RealityKit을 사용하여 구축된 모든 UI 요소에 대해 자동으로 렌더링됩니다.

사용자가 버튼을 보면, 탭하기 전에 강조 표시됩니다.

그리고 마우스를 클릭하거나 iPhone을 탭하는 것처럼, 사용자가 손가락을 탭할 때 앱에 선택 사항이 표시됩니다.

사용자는 필요한 시각적 피드백을 받고, 사용자가 탭하기 전에 어디를 보는지 알 필요 없이 기대하는 상호 작용을 받습니다.

공유와 협업은 비전 프로 경험의 중심 부분이다.

macOS와 마찬가지로, Vision Pro 사용자는 FaceTime 통화에서 다른 사람들과 앱 창을 공유할 수 있습니다.

그리고 SharePlay를 통해 차세대 공유 경험이 가능합니다.

앱이 GroupActivities API와 함께 SharePlay를 채택하면, 각 창에 대한 공유 제어는 통화 중인 모든 사람을 위해 앱을 실행하는 옵션을 추가합니다.

이것은 그들이 실시간으로 함께 진정으로 공유된 경험에 참여할 수 있게 해준다.

다른 플랫폼에서 SharePlay와 마찬가지로 앱을 공동으로 사용할 수 있는 방법을 결정합니다.

FaceTime 통화의 Vision Pro 사용자는 다른 참가자들에게 얼굴과 손의 움직임과 동적으로 일치하는 고급 기계 학습 기술로 만들어진 자연스러운 표현인 페르소나로 나타납니다.

페르소나들은 3차원 볼륨과 깊이를 가진 다른 Vision Pro 사용자에게 나타난다.

하지만 우리는 Vision Pro에서 FaceTime을 한 단계 끌어올리고 사용자가 실제로 함께 방에 있는 것처럼 어디서나 상호 작용할 수 있도록 권한을 부여하고 싶습니다.

이 경험은 여전히 초기 형태이며, 우리는 여기서 처음으로 당신과 공유하게 되어 기쁩니다.

공간 페르소나를 통해 Vision Pro 사용자는 친숙한 FaceTime 타일에서 벗어나 같은 물리적 공간에 모인 것처럼 더 많은 존재감을 느낄 수 있습니다.

visionOS는 사용자와 앱이 공유되고 일관된 공간적 맥락을 가질 수 있도록 보장합니다.

당신의 앱은 SharePlay로 이 새로운 맥락을 활용할 수 있습니다.

이제 사용자 간에 앱의 변경 사항을 동기화하는 것 외에도 사용자의 물리적 행동에 대응할 수 있으므로 프리폼 보드에 함께 서 있거나 탁상 게임에서 조각을 움직이는 것이 자연스럽게 느껴질 수 있습니다.

우리는 당신의 앱이 이 놀라운 새로운 경험의 일부가 되기를 바라며, 당신의 피드백은 계속 발전함에 따라 중요할 것입니다.

그것이 우리가 올해 말에 공간 페르소나를 사용할 수 있는 개발자 미리보기를 만드는 이유입니다.

이것들은 비전OS에서 활용할 수 있는 풍부하고 광범위한 기술의 몇 가지 예일 뿐입니다.

이제, 여기 당신이 여기서 어디로 갈지에 대해 이야기할 린다가 있습니다.

린다 동: 이제 Apple Vision Pro와 visionOS에 소개되었으니, 다음은 무엇입니까?

당신의 개발 여정은 오늘 시작됩니다.

우리는 당신이 Vision Pro를 위한 설계, 개발 및 테스트를 시작할 때 가능한 한 많이 뛰어들고 배울 것을 권장합니다.

업데이트된 Xcode 및 Simulator, Reality Composer Pro와 함께 visionOS SDK는 이번 달 말에 사용할 수 있으므로 아이디어 작업을 시작할 수 있습니다.

또한 광범위한 기술 문서, 새로운 디자인 키트 및 도구, 그리고 visionOS에 대한 업데이트된 휴먼 인터페이스 지침에 액세스할 수 있습니다.

비전 프로 시뮬레이터 외에도, 비전 프로에서 앱이 어떻게 작동하는지 볼 수 있는 옵션도 있습니다.

이번 여름에 우리는 Vision Pro 하드웨어에서 앱을 테스트할 수 있는 Apple Vision Pro Developer Labs를 출시할 예정입니다.

Vision Pro가 고객에게 출시되기 전에 실무 지원과 경험을 미리 볼 수 있습니다.

이 실험실들은 여기 쿠퍼티노에 있는 개발자 센터를 포함하여 전 세계 여러 곳에 위치할 것이다.

그리고 당신이 어디에 있든, Vision Pro와 앱의 호환성을 평가하기 위한 요청을 제출할 수 있습니다.

우리는 당신의 앱을 설치하고 우리가 찾을 수 있는 모든 문제를 공유할 것입니다.

이러한 흥미로운 기회에 대한 추가 업데이트를 받으려면, 개발자 웹사이트를 방문하세요.

그리고 물론, Vision Pro는 새로운 App Store와 함께 출시될 것이므로, 사람들은 당신이 만든 놀라운 앱을 발견하고 다운로드할 수 있습니다.

우리는 당신이 이 플랫폼에 대한 당신의 아이디어를 공유하도록 초대하며, 당신이 그것들을 실현할 때 당신을 계속 지원할 것입니다!

이제, 다린으로 돌아가.

다린: 정말 신나는 한 해였어!

VisionOS의 놀라운 기회, 위젯킷으로 앱을 표시할 수 있는 더 많은 장소, 연속성 카메라의 확장, watchOS의 새로운 디자인과 같은 각 플랫폼에 많은 사려 깊은 추가.

매크로와 스위프트 데이터로 스위프트의 주요 개선 사항과 Xcode 미리보기로의 큰 업그레이드.

언어, 프레임워크, 도구 및 서비스에 걸친 올해의 개발은 플랫폼에서 수십억 개의 장치에 대한 독특한 경험을 만들 수 있도록 돕는 우리의 깊은 헌신을 나타냅니다.

이러한 플랫폼은 개발자와 사용자에게 차이를 만드는 수준의 일관성과 통합으로 점점 더 다양한 제품에 걸쳐 있습니다.

우리는 플랫폼의 새로운 것의 표면을 성공적으로 긁었다.

하지만 더 나아가, 우리는 175개의 심층 비디오 세션(visionOS만을 위한 40개)과 함께 훌륭한 앱을 만들 때 불타는 질문에 답하기 위해 Apple 전문가가 배치된 200개 이상의 실험실이 있습니다.

애플 개발자가 되기에 이보다 더 좋은 시기는 없었으며, 당신이 만든 것이 당신의 사용자를 놀라게 하고 기쁘게 할 것이라는 데는 의심의 여지가 없습니다.

멋진 WWDC 되세요!

♪ ♪

♪ ♪