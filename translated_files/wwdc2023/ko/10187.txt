10187

♪ ♪

벤: 안녕하세요, 저는 벤 트럼불이고, 당신에게 SwiftData를 소개하게 되어 기쁩니다.

SwiftData는 데이터 모델링 및 관리를 위한 강력한 프레임워크이며 최신 Swift 앱을 향상시킵니다.

SwiftUI와 마찬가지로, 외부 파일 형식이 없는 코드에 전적으로 초점을 맞추고 Swift의 새로운 매크로 시스템을 사용하여 원활한 API 경험을 만듭니다.

SwiftData는 원활한 API 경험을 만들기 위해 새로운 Swift 언어 매크로가 제공하는 표현력에 의존합니다.

그리고 그것은 자연스럽게 SwiftUI와 통합되며 CloudKit 및 위젯과 같은 다른 플랫폼 기능과 함께 작동합니다.

이 세션에서는 새로운 @Model 매크로와 Swift 코드에서 직접 데이터를 모델링하는 기능을 살펴보고, SwiftData로 데이터를 가져오고 수정하는 방법을 소개한 다음 SwiftData와 원활하게 작동하는 다른 플랫폼 프레임워크에 대한 개요를 제공하여 마무리하겠습니다.

이제 우리는 @Model에 대해 더 자세히 살펴볼 것이다.

@Model은 스위프트 코드에서 모델의 스키마를 정의하는 데 도움이 되는 새로운 스위프트 매크로입니다.

SwiftData 스키마는 일반 Swift 코드이지만, 필요한 경우 추가 메타데이터로 속성에 주석을 달 수 있습니다.

이 스키마를 사용하여, SwiftData는 모델 객체에 강력한 기능을 추가합니다.

@Model로 수업을 꾸미는 것만큼 간단하며, 스키마가 생성됩니다.

SwiftData의 모델은 애플리케이션의 스키마에 대한 진실의 원천이며 지속성 경험을 유도합니다.

이 경험의 일부는 클래스의 저장된 속성을 변환하고 지속적인 속성으로 바꿀 것이다.

모델에 @Model을 추가하면 가능성의 세계가 열립니다.

SwiftData는 값 유형 속성을 즉시 속성으로 사용할 수 있도록 기본적으로 조정합니다.

이러한 속성에는 string, int 및 float와 같은 기본 값 유형이 포함됩니다.

그들은 또한 컬렉션을 포함하여 구조체, 열거형 및 코데블 유형과 같은 더 복잡한 값 유형을 포함할 수 있다.

SwiftData는 참조 유형을 관계로 모델링한다.

모델 유형과 관계 및 모델 유형 컬렉션 간의 링크를 만들 수 있습니다.

@Model은 당신의 유형에 저장된 모든 속성을 수정할 것입니다.

SwiftData가 속성의 메타데이터를 사용하여 스키마를 구축하는 방법에 영향을 미칠 수 있습니다.

@Attribute를 사용하면 고유성 제약을 추가할 수 있습니다.

@Relationship을 사용하여 verses의 선택을 제어하고 삭제 전파 규칙을 지정할 수 있습니다.

이것들은 모델 간의 연결의 행동을 바꾼다.

SwiftData에 Transient 매크로에 특정 속성을 포함하지 말라고 말할 수 있습니다.

여기 우리의 이전 여행 예시가 있습니다.

저장된 속성에 메타데이터를 추가하여 SwiftData의 스키마 생성을 조정할 것입니다.

@Attribute를 이름에 추가하고 고유해야 한다고 지정할 수 있습니다.

또한 @Relationship과의 버킷리스트 관계를 장식하고 Swift Data에 이 여행이 삭제될 때마다 모든 관련 버킷리스트 항목을 삭제하도록 지시할 수 있습니다.

SwiftData 모델링에 대해 자세히 알아보려면, "SwiftData로 스키마 모델링" 세션을 확인하세요.

이제 모델 유형과 작업을 수행하는 데 사용할 두 가지 주요 객체인 SwiftData의 ModelContainer와 ModelContext로 작업하는 방법을 다루겠습니다.

모델 컨테이너는 모델 유형에 대한 영구 백엔드를 제공합니다.

스키마를 지정하기만 하면 기본 설정을 사용하거나 구성 및 마이그레이션 옵션으로 사용자 정의할 수 있습니다.

저장할 모델 유형 목록을 지정하기만 하면 모델 컨테이너를 만들 수 있습니다.

컨테이너를 더 사용자 정의하려면 구성을 사용하여 URL, CloudKit 및 그룹 컨테이너 식별자 및 마이그레이션 옵션을 변경할 수 있습니다. 컨테이너를 설정하면 모델 컨텍스트로 데이터를 가져오고 저장할 수 있습니다.

또한 SwiftUI의 뷰 및 장면 수정자를 사용하여 컨테이너를 설정하고 뷰 환경에서 자동으로 설정할 수 있습니다.

모델 컨텍스트는 모델의 모든 변경 사항을 관찰하고 이를 작동하기 위한 많은 작업을 제공합니다.

그것들은 업데이트를 추적하고, 데이터를 가져오고, 변경 사항을 저장하고, 심지어 변경 사항을 취소할 수 있는 인터페이스입니다.

SwiftUI에서는 일반적으로 모델 컨테이너를 만든 후 뷰의 환경에서 modelContext를 얻을 수 있습니다.

뷰 계층 구조 밖에서, 모델 컨테이너에 공유된 메인 액터 바인딩 컨텍스트를 제공하도록 요청하거나, 단순히 주어진 모델 컨테이너에 대한 새로운 컨텍스트를 인스턴스화할 수 있습니다.

컨텍스트가 생기면, 데이터를 가져올 준비가 된 것입니다.

SwiftData는 술어 및 가져오기 설명자와 같은 새로운 Swift 네이티브 유형뿐만 아니라 Swift의 네이티브 정렬 설명자에 대한 상당한 개선의 이점을 누릴 수 있습니다.

iOS 17의 새로운 기능, 술어는 네이티브 스위프트 유형과 함께 작동하며 강력한 형식의 구성을 위해 스위프트 매크로를 사용합니다.

그것은 NSPredicate를 위한 완전한 타입 체크 현대식 대체품이다.

자동 완성과 같은 Xcode 지원으로 술어 구현도 쉽습니다.

다음은 샘플 여행 앱의 조건자 구축에 대한 몇 가지 예입니다.

먼저, 나는 목적지가 뉴욕인 모든 여행을 명시할 수 있다.

나는 우리의 질문을 생일에 대한 여행으로 좁힐 수 있으며, 과거의 모험과는 달리 미래를 위해 계획된 여행에만 관심이 있다고 명시할 수 있다.

어떤 여행을 가져오는 데 관심이 있는지 결정하면, 새로운 FetchDescriptor 유형을 사용하고 ModelContext에 해당 여행을 가져오도록 지시할 수 있습니다.

FetchDescriptor와 함께 작업하는 Swift SortDescriptor는 네이티브 Swift 유형과 키 경로를 지원하기 위한 몇 가지 업데이트를 받고 있으며, SortDescriptor를 사용하여 가져온 여행을 구성할 순서를 지정할 수 있습니다.

FetchDescriptor는 SwiftData 쿼리를 조정할 수 있는 다른 많은 방법을 제공합니다.

조건자와 정렬 외에도, 프리페치할 관련 객체를 지정하고, 결과 수를 제한하고, 결과에서 저장되지 않은 변경 사항을 제외할 수 있습니다.

SwiftData를 사용하면 ModelContext를 사용하여 이러한 작업을 수행하여 데이터를 쉽게 생성, 삭제 및 변경할 수 있습니다.

다른 Swift 클래스와 마찬가지로 모델 객체를 만든 후, 컨텍스트에 삽입하고 변경 추적 및 지속성과 같은 SwiftData 기능을 사용할 수 있습니다.

영구 객체를 삭제하는 것은 ModelContext에 삭제를 위해 표시하도록 말하는 것만큼 쉬우며, ModelContext에 저장하고 영구 컨테이너에 커밋하도록 요청하여 이러한 변경 사항 및 기타 보류 중인 변경 사항을 저장할 수 있습니다.

모델 객체의 속성 값을 변경하는 것은 평소처럼 속성 세터를 사용하는 것만큼 간단합니다.

모델 매크로는 저장된 속성을 수정하여 ModelContext가 변경 사항을 자동으로 추적하고 다음 저장 작업에 포함시킬 수 있도록 도와줍니다.

SwiftData 컨테이너와 컨텍스트 및 운영에 대해 자세히 알아보려면, "Dive Deeper into SwiftData" 세션을 확인하세요.

SwiftData는 SwiftUI를 염두에 두고 만들어졌으며, 함께 사용하는 것이 더 쉬울 수 없었다.

SwiftUI는 SwiftData를 사용하는 가장 쉬운 방법입니다.

SwiftData 컨테이너를 설정하든, 데이터를 가져오든, 보기 업데이트를 실행하든, 우리는 이러한 프레임워크를 직접 통합하는 API를 구축했습니다.

새로운 SwiftUI 장면과 보기 수정자는 SwiftData 애플리케이션 구축을 시작하는 가장 쉬운 방법입니다.

SwiftUI를 사용하면 데이터 저장소를 구성하고, 옵션을 변경하고, 실행 취소를 활성화하고, 자동 저장을 전환할 수 있습니다.

SwiftUI는 환경에서 모델 컨텍스트를 전파할 것입니다.

일단 설정하면, 데이터 사용을 시작하는 가장 쉬운 방법은 새로운 @Query 속성 래퍼입니다.

한 줄의 코드로 데이터베이스에 저장된 모든 것을 쉽게 로드하고 필터링할 수 있습니다.

SwiftData는 모델링된 속성에 대한 완전히 새로운 관찰 가능한 기능을 지원합니다.

SwiftUI는 관찰된 속성에 대한 변경 사항을 자동으로 새로 고칠 것이다.

SwiftUI와 SwiftData는 매력적이고 강력한 앱을 구축할 수 있도록 협력합니다.

"SwiftData로 앱 만들기" 세션에서 이러한 프레임워크를 함께 사용하는 방법에 대해 자세히 알아보세요.

SwiftData는 Swift의 기능에 대한 일류 지원으로 설계된 데이터 관리를 위한 강력한 새로운 솔루션입니다.

스위프트의 새로운 매크로 시스템을 사용하여 코드에 전적으로 집중합니다.

@Model을 사용하여 스키마를 설정하고, 모델 컨테이너로 지속성 경험을 구성하세요.

지속성, 실행 취소 및 다시 실행, iCloud 동기화, 위젯 개발 등을 쉽게 활성화할 수 있습니다.

SwiftUI의 원활한 통합을 활용하여 SwiftData를 앱에 바로 구축하세요.

우리는 당신이 SwiftData로 무엇을 만드는지 보게 되어 기쁘고, 시청해 주셔서 감사합니다.

♪ ♪