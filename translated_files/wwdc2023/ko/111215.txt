111215

♪ 부드러운 기악 힙합 ♪

♪

그레이스 켄달: 안녕하세요 여러분, "공간 컴퓨팅을 위한 UIKit을 만나보세요!"에 오신 것을 환영합니다.

제 이름은 그레이스 켄달이고 UIKit 팀의 엔지니어입니다.

제 동료 앤드류와 저는 이 비디오에서 기존 UIKit 앱을 새로운 차원으로 가져오는 것에 대해 당신과 이야기하게 되어 매우 기쁩니다.

새로운 장치는 공간 경험을 위한 놀라운 플랫폼을 가지고 있으며 수많은 새로운 3D 기능을 소개합니다.

그리고 무엇보다도, 그것은 당신이 이미 알고 있고 좋아하는 UI 프레임워크를 사용합니다.

이 비디오는 전적으로 UIKit 측면에 초점을 맞추고 있다.

플랫폼에서 SwiftUI에 대해 자세히 알아보려면, "공간 컴퓨팅을 위한 SwiftUI를 만나세요"와 "공간 컴퓨팅을 위한 윈도우 앱 향상"을 확인하세요.

이 비디오에서, 우리는 새로운 플랫폼을 위한 앱을 구축하는 방법과 그 과정에서 취할 단계에 대해 이야기하는 것으로 시작할 것입니다.

그런 다음 다른 Apple 플랫폼과 독특하고 다르게 만드는 몇 가지 특성과 코드에서 처리하는 방법에 대해 알아볼 것입니다.

그 후, 우리는 UIKit에 도입된 새로운 API로 당신의 앱을 연마할 것입니다.

그리고 마지막으로, 우리는 UIKit 외에도 SwiftUI를 사용하여 새로운 3D 기능을 추가하는 것을 살펴볼 것입니다.

그럼 시작하자!

여기 UIKit을 사용하여 iOS용으로 작성된 데모 픽셀 아트 애니메이션 앱이 있습니다.

내 가장 친한 친구 중 몇몇은 그것에 예술을 기여했다.

iPad에서 멋지게 보이고 느껴지며, 많은 시스템 구성 요소, 동적 애니메이션을 사용하고 Apple Pencil을 통합합니다.

공간 컴퓨팅을 위해 준비합시다.

내가 가장 먼저 해야 할 일은 Xcode 프로젝트의 일반 탭으로 가서 새로운 실행 대상을 추가하는 것이다.

이제, 여기 자산 카탈로그에서, 저는 새로운 앱 아이콘을 추가할 수 있습니다.

그것은 이 플랫폼의 아이콘이 특별하기 때문이다.

그것들은 누군가가 당신의 앱 아이콘을 볼 때 동적으로 반응하는 서로 위에 겹쳐진 세 개의 이미지입니다.

우리 팀원 중 한 명인 제시카는 매우 재능 있는 예술가이며 이를 준비하기 위해 앱의 새로운 아이콘을 조롱했기 때문에, 이제 이 파일들을 추가할 수 있습니다.

다음으로, 나는 새로운 장치 시뮬레이터를 타겟으로 선택하고 빌드할 것이다.

좋아, 몇 가지 빌드 오류가 있어.

iPad 앱에 사용된 API 중 일부는 이 플랫폼에서 사용할 수 없는 것 같습니다.

왜 그런지 얘기해 보자.

이것은 다른 애플 플랫폼과 다른 새로운 기능과 특성을 가진 새로운 플랫폼이다.

그래서 여기 앱을 가져올 때 조심해야 할 몇 가지 사항이 있습니다.

앱을 처음 가져올 때, 조사해야 할 두 가지 공통 영역은 이전 iOS 릴리스에서 더 이상 사용되지 않는 API와 이 플랫폼으로 잘 번역되지 않는 API입니다.

이 장치는 iOS 14 이전에 더 이상 사용되지 않는 API를 지원하지 않습니다.

이 새로운 플랫폼을 사용하면 더 이상 사용되지 않는 API에서 벗어나 공유 코드베이스를 업데이트하여 최신의 최고를 채택할 수 있는 좋은 기회입니다.

이 플랫폼으로 번역되지 않는 API 모음도 있습니다.

예를 들어, UIDeviceOrientation.

이 API는 장치가 여러 방향으로 사용될 수 있다고 가정하며, 여기에는 적용되지 않습니다.

UIScreen은 또 다른 예이다.

이 장치로, 하드웨어 화면의 단일 표현의 전제는 유지되지 않는다.

그리고 탭 바는 디자인이 매우 다르며 leading-to-trailing을 배치하지 않으므로 leadingAccessoryView와 trailingAccessoryViews를 사용할 수 없습니다.

이것들은 적용되지 않기 때문에 사용할 수 없는 것으로 표시된 API의 세 가지 예일 뿐이지만, 다른 API도 있습니다.

자세한 내용은 문서를 확인하세요.

이제 코드로 돌아가서 무엇이 문제였을지 조사해 봅시다.

여기서 오류를 확인해 봅시다.

EditorViewController 확장 프로그램에는 UIPencilInteraction이 있습니다.

이 장치는 Apple Pencil을 지원하지 않으므로, 이 API는 플랫폼에서 사용할 수 없습니다.

나는 이 코드를 쉽게 조건화하여 컴파일할 수 있다.

가서 다시 만들고 실행해 봅시다.

알았어! 우리가 일어나서 달리고 있는 것 같아!

이것은 정말 좋아 보이고, 공유 공간에서 앱이 실행되는 것을 보는 것은 흥미롭다.

하지만 나는 이미 내가 개선할 수 있다고 생각하는 몇 가지를 알아차리고 있다.

지금 앱을 통해 둘러보고 모든 것을 확인하고 연마할 몇 가지를 찾아봅시다.

시뮬레이터에서 마우스로 클릭하면 누군가가 그 지점을 보고 손가락을 함께 두드리는 것을 시뮬레이션합니다.

내가 가장 먼저 알아차린 것은 앱의 아름다운 유리 배경이다.

그리고 내가 모든 예술을 볼 때, 앱을 활기차고 인터랙티브하게 만드는 정말 멋진 호버 비주얼이 있다.

검색 표시줄은 또한 오목한 모습으로 새로운 모습을 하고 있다.

나는 여전히 다른 예술 작품을 열 수 있고 내 마음의 만족을 픽셀화할 수 있다.

좋아, 내가 개선할 수 있는 한 가지는 제목의 검은색 텍스트와 예술의 자막의 회색 텍스트야.

검은색 텍스트는 iPad의 흰색 배경에서 정말 멋져 보였지만, 나는 여기 유리에서 어떻게 보이는지 좋아하지 않는다.

내 생각에 그건 조금 더 터질 수 있을 것 같아.

그리고 나는 검색창의 모양과 차원이 정말 마음에 든다.

제목 텍스트 필드에도 그걸 갖고 싶은 것 같아.

시맨틱 색상은 새로운 것은 아니지만, 이 플랫폼에 특히 가치가 있다.

앱의 모양이 플랫폼, 모양 및 접근성 설정에 적응할 수 있도록 의미론적 색상, 글꼴 및 자료를 사용하는 것이 중요합니다.

UIColor.label과 같은 많은 것들은 모든 것이 픽셀처럼 완벽하게 보이도록 새로운 가치를 가지고 있다.

시맨틱 색상은 플랫폼에 적응하므로 RGB 값으로 색상을 직접 정의하는 대신 앱이 실행되는 플랫폼에 관계없이 올바른 모양을 얻을 수 있는 시스템 제공 색상을 사용하십시오.

예를 들어, 시스템 시안은 iOS, macOS 및 watchOS에서 약간 다른 파란색 음영이다.

iPad에서, 이것은 밝은 모습과 어두운 모습 사이에 적응하는 추가적인 이점이 있다.

그리고 이 플랫폼에서 systemBackgroundColor는 유리 위에 놓을 때 기본적으로 생생합니다.

마찬가지로, 정적 글꼴 크기를 설정하는 대신 Headline이나 Body와 같은 의미론적 글꼴 스타일을 사용하면 더 읽기 쉬운 앱을 얻을 수 있습니다.

그것은 또한 접근성을 위해 해야 할 옳은 일이다.

시맨틱 글꼴 크기는 가독성을 보장하기 위해 동적 유형으로 확장됩니다.

여기서, TextField 텍스트와 자막 라벨의 색상은 RGB 정의 UIColors를 사용하고 있습니다.

그것들을 사용하는 대신, iPad에서 여전히 멋지게 보이면서 이 플랫폼에 더 잘 적응할 수 있는 기본 및 보조 라벨 시맨틱 색상을 사용하세요.

게다가, 시맨틱 색상을 사용하는 모든 UILabels는 기본적으로 활기를 진다.

텍스트 필드의 테두리 스타일을 roundedRect로 설정할 수도 있습니다.

이것은 이 전망에 오목한 모습을 추가할 것이다.

그리고 짓고 달린 후에...

... 난 이게 훨씬 더 좋아!

라벨은 읽기 쉽고, 텍스트 필드를 사용하여 예술의 제목을 편집할 수 있다는 것은 분명하다.

다음으로, 자료에 대해 이야기해 봅시다.

재료는 이 플랫폼의 거대한 초석이다.

그들은 당신의 앱을 정말 아름답게 보이게 하고 주변 환경의 일부처럼 느껴지도록 도와줍니다.

그들은 또한 어떤 맥락에서든 가독성을 보장한다.

재료는 조명 조건과 그 뒤에 있는 물체의 색상에 따라 대비와 색상 균형을 조정합니다.

이 때문에, 이 플랫폼에서는 어둡고 밝은 모습 사이에 구별이 없다.

모든 내장 컨트롤과 컨테이너는 기본적으로 생생한 재료를 사용하여 앱이 멋지게 보이도록 합니다.

이제 앱의 배경 역할을 하는 유리는 정말 멋져 보인다.

이것은 모든 UINavigationController와 UISplitViewController에 대해 기본적으로 제공됩니다.

그리고 이것은 주변 환경의 세부 사항이 피를 흘릴 수 있게 해준다.

UIViewController에서 새로운 preferredContainer BackgroundStyle 속성을 재정의하여 .automatic, .glass 또는 .hidden을 반환할 수도 있습니다.

다음으로, 앱의 일부 보기 위에 마우스를 올려놓으면 희미한 하이라이트가 나타납니다.

이것은 앱이 반응하는 느낌을 주는 데 정말 도움이 된다.

컨트롤이나 목록과 같은 시스템 구성 요소를 사용하면 기본적으로 이러한 호버 효과, 재료, 활기 등을 얻을 수 있습니다.

호버 효과는 상호 작용을 나타낸다.

보기에 호버 효과를 추가하면 타겟팅이 더 쉬워집니다.

이 플랫폼의 한 가지 중요한 점은 누군가가 찾고 있는 정확한 곳이 앱의 프로세스에 전달되지 않는다는 것이다.

UIKit에는 호버 효과를 추가, 사용자 지정 또는 비활성화할 수 있는 새로운 API가 있습니다.

UIView에는 새로운 속성인 HoverStyle이 있습니다.

많은 대화형 구성 요소는 기본적으로 컨트롤과 같은 호버 효과를 가지고 있다.

HoverStyle 속성을 설정하고 하이라이트 또는 리프트 효과를 제공하여 뷰의 hoverStyle을 사용자 정의할 수 있습니다.

그리고 호버 효과를 제거하려면, 이 속성을 nil로 설정할 수 있습니다.

그리고 더 나아가, 새로운 UIShape API를 사용하여 호버 효과의 모양을 제공할 수 있습니다.

나는 이미 컬렉션 뷰 셀에 호버 모양이 있다는 것을 좋아하지만, 모서리가 둥글었으면 좋겠다.

대신 둥근 직사각형을 호버 모양으로 사용하려면, 셀에 hoverStyle 속성을 설정하고 둥근 직사각형 모양으로 전달해야 합니다.

그리고 그것은 정사각형 모서리가 있는 이 직사각형에서 셀의 호버 모양을 취한다...

...이 둥근 직장에.

나는 이것이 텍스트 필드와 배경의 둥근 모서리와 정말 잘 어울린다고 생각한다.

이제 내가 각 컬렉션 뷰 셀을 볼 때, 그들의 호버 모양은 둥글게 될 것이다.

내가 마지막으로 보고 싶은 게 하나 있는데, 그건 입력이야.

이 플랫폼은 콘텐츠와 상호 작용하기 위한 완전히 새로운 입력 시스템을 소개합니다.

요소를 보고 손가락을 꼬집고 놓는 것은 TapGesture와 같다.

꼬집고, 손을 움직이고, 풀어주는 것은 PanGesture이다.

앱에 충분히 가깝다면, 손을 뻗어 만질 수도 있습니다.

트랙패드를 페어링하면, 그것을 사용하여 시스템과 상호 작용할 수도 있습니다.

그리고 애플의 접근성 기술은 장치에서도 사용할 수 있다.

VoiceOver와 Switch Control은 모든 사람에게 앱을 제공합니다.

시스템 제스처 인식기는 트랙패드를 포함한 모든 입력 방법으로 작동합니다.

하지만 각 손이 하나의 뚜렷한 터치만 생성할 수 있기 때문에 이 플랫폼에는 최대 두 개의 동시 입력이 있다는 점에 유의하는 것이 중요합니다.

실제로 iPad 앱에는 네 손가락 스와이프를 사용하여 기존 예술을 모두 삭제하고 새롭게 시작하는 사용자 지정 제스처가 있었다.

나는 그 제스처를 유지하고 싶어서, 그것을 컴파일하지 않을 것이다.

대신, 사용자 인터페이스 관용구를 확인하기 위해 이 코드를 변경할 수 있으며, 그것이 현실이라면, 필요한 터치 수를 두 개로 설정할 수 있습니다.

앱을 연마하기 위해 이 모든 변경을 한 후, 이제 이 예제 앱을 다음 단계로 끌어올릴 준비가 된 것 같아요.

내 동료 앤드류에게 더 말해줄게.

앤드류 핀케: 고마워, 그레이스!

안녕! 저는 앤드류이고 UIKit 팀의 엔지니어입니다.

UIKit 앱을 2D 범위에서 벗어나 3차원으로 가져올 때입니다.

그레이스의 업데이트로, 예시 앱은 좋아 보인다!

그리고 기존 UIKit 앱뿐만 아니라 새로운 공간 API로 더 나아갈 수 있습니다.

나는 훌륭한 공간 경험을 만들기 위해 기존 앱을 업데이트하는 세 가지 쉬운 방법에 대해 이야기할 것이다.

첫째, UIKit 프레젠테이션에는 뷰 컨트롤러 전환에 깊이를 더하는 흥미진진한 새로운 공간 스타일이 있습니다.

둘째, 이전에는 없었던 곳으로 콘텐츠를 가져갈 수 있는 새로운 API가 있습니다...

장면 밖에서!

이것들은 장식품이라고 불린다.

마지막으로, RealityKit 콘텐츠를 앱에 바로 추가할 수 있는 강력한 새로운 방법이 있습니다.

이들 각각이 어떻게 예제 앱을 다음 단계로 끌어올릴 수 있는지 살펴봅시다.

당신이 알고 사랑하는 UIKit 프레젠테이션은 공간 데뷔를 하고 있습니다.

iPad에서 예제 앱은 시트, 알림 및 팝오버를 사용합니다.

그들이 새로운 플랫폼에서 어떻게 행동하는지 살펴봅시다.

먼저, 앱 설정을 열어봅시다.

공간 시트는 제시된 뷰 컨트롤러를 뒤로 밀고 어둡게 한다.

iPad와 달리, 뷰 컨트롤러의 isModalInPresentation 속성에 관계없이 경계 밖의 터치나 다른 제스처로 인해 해제되지 않습니다.

다음으로, 새로운 경고 스타일을 확인해 봅시다.

앱 아이콘의 2D 표현은 바로 상단에 있습니다.

시트와 마찬가지로, 당신은 항상 뒤로 미뤄야 하는 뷰 컨트롤러의 경고를 제시해야 합니다.

마지막으로 문서 세부 사항 팝오버를 열어봅시다.

오, 이건 좀 안 좋아 보여.

그것은 경계를 벗어나고 있으며, 이는 멋지지만, 앱의 중심에서 멀리 떨어져 있다.

이것을 고치기 위해 코드로 들어가자.

뷰 컨트롤러가 생성되고 있는 것 같고, 팝오버 스타일로 설정되어 있습니다...

아, 문제가 보여.

허용된 ArrowDirections는 오른쪽으로만 설정되어 있다.

iPad에서 팝오버는 장면으로 제한되지만, 공간 플랫폼에서는 macOS와 유사하게 동일한 제약이 존재하지 않는다.

항상 시스템 선호 배치를 사용하도록 이것을 업데이트합시다.

이제, 내가 정보 버튼을 탭하면, 내가 기대했던 팝오버 배치를 얻는다.

iPad 앱에서 표준 프레젠테이션을 사용하는 경우, 공간 앱은 이미 경계를 벗어나고 있을 수 있습니다.

UIKit은 플랫폼 가정을 하드 코딩하지 않는 한 모든 세부 사항을 처리합니다.

예시 앱을 올리는 다음 방법은 장식품을 사용하는 것이다.

앱의 프레젠테이션은 이제 공간적이지만, 편집자 자체는 아직 플랫폼의 추가 공간을 활용하지 못하고 있다.

편집자...

...어, 좀 비좁아 보여.

하지만 장식품으로, 우리는 이전에는 할 수 없었던 방식으로 공간 플랫폼이 제공하는 여분의 공간을 활용할 수 있다.

장식품은 합리적인 한도 내에서 앱의 장면 주위에 콘텐츠를 배치할 수 있게 해준다.

UIKit 구성 요소도 팝오버와 같은 장식품을 사용합니다.

그것이 예시 앱 팝오버가 잘리지 않고 장면 밖에서 나타난 방법이다.

장치에 내장된 많은 앱들도 장식품을 사용하고 있다.

여기 헤드셋의 TV를 멋지게 볼 수 있습니다.

이 앱은 장면의 앞 가장자리에 있는 장식품에 탭 바를 배치하는 SwiftUI 탭 뷰를 사용합니다.

사파리는 장식을 사용하여 웹 페이지 위에 내비게이션 바를 가져온다.

그리고 프리폼은 장식품을 사용하여 하단 도구 모음을 만듭니다.

장식품으로, 이 앱들은 기본 콘텐츠를 중앙에 유지하여 컨트롤을 가장자리로 밀어붙인다.

그리고 장식품은 앞으로 들어 올려 깊이를 더한다.

그들은 모든 방향으로 경계를 벗어나고 있다!

예시 앱의 경우, 도구 모음 장식에 모든 편집 컨트롤을 모으는 것이 완벽할 것이라고 생각합니다.

이것을 추가하기 위해 Xcode로 돌아가자.

장식품은 SwiftUI 콘텐츠를 호스팅합니다. 이 파일에서 이미 수행한 SwiftUI를 가져와야 합니다.

다음으로, 나는 새로운 장식품을 정의할 것이다.

정렬 매개 변수를 사용하면 필요에 가장 적합한 콘텐츠의 레이아웃을 쉽게 표현할 수 있습니다.

예를 들어, 장식품이 내 장면의 앞쪽 가장자리에 매달려 있기를 원한다면 나는 앞쪽 장면 정렬과 후행 콘텐츠 정렬을 설정할 것이다.

대신 장식품이 장면 안에 매달려 있기를 원한다면, 나는 주요 콘텐츠 정렬을 사용할 것이다.

편집 도구 모음의 경우, 나는 그것이 장면의 하단에 매달려 있기를 원하지만, 도구가 가장자리를 중심으로 하여 여전히 편집기의 일부로 느껴진다.

이것은 내가 하단 장면 정렬과 중앙 콘텐츠 정렬을 원한다는 것을 의미한다.

내가 그 정렬을 추가할게.

콘텐츠를 위해, 나는 이미 이전에 새로운 EditingControlsView를 만들었고, 여기서 그것을 사용할 것이다.

장식품은 자동으로 배경을 추가하지 않는다.

올바른 배경을 선택하는 것은 당신의 콘텐츠에 가장 적합한 것에 달려 있기 때문입니다.

나는 도구 모음이 내 편집기와 같은 유리 배경을 갖기를 원하기 때문에, 새로운 수정자를 사용할 것이다.

다음으로, UIViewController의 새 장식품 속성을 새 장식품만 있는 배열로 설정하겠습니다.

만약 내가 여러 개의 장식품을 가지고 있다면, 나는 그것들을 이 배열에도 포함시킬 것이다.

장식품은 뷰 컨트롤러의 수명 주기를 공유한다.

뷰 컨트롤러가 계층 구조에서 제거되면, 장식품도 제거됩니다.

이 연관성은 시스템 상호 작용에 매우 중요하다.

예를 들어, 시트 프레젠테이션은 전환 중에 뷰 컨트롤러와 관련된 장식품을 유지합니다.

마지막으로, 의도치 않게 중복이 발생할 수 있는 경우를 피하기 위해 주의를 기울이세요.

코드에서 마지막으로 변경해야 할 사항이 하나 있습니다.

컨트롤을 장식품으로 옮겼기 때문에, 이제 메인 에디터를 위한 공간이 더 많아졌다.

내 커스텀 edgeToEdge 스타일을 사용하여 조금 더 크게 만들 거야.

앱을 실행할 시간이야.

완벽해!

도구 모음은 내가 원했던 바로 그 곳에 있으며, 편집기의 맨 아래에 있다.

정말 멋져.

장식품을 활용함으로써, 예제 앱은 편집 도구를 가까이 유지하면서 제작자가 가장 신경 쓰는 콘텐츠에 대한 주요 영역을 더 많이 사용할 수 있습니다.

장식품을 만드는 것은 매우 쉽다.

그것은 당신이 당신의 앱을 독특하게 만드는 것에 시간과 노력을 집중할 수 있게 해줍니다.

마지막으로, UIKit 앱에 RealityKit을 추가하는 것에 대해 이야기하겠습니다.

RealityKit 콘텐츠를 호스팅하는 새로운 SwiftUI View, RealityView가 있습니다.

이것은 엔티티가 SwiftUI 계층에서 부모가 될 수 있게 해준다.

RealityView에 더 깊이 들어가려면, "RealityKit으로 공간 경험 구축"을 확인하세요.

SwiftUI 뷰를 호스팅하는 기존 API인 UIHostingController도 있습니다.

즉, UIKit 앱을 다시 작성할 필요 없이 RealityView와 SwiftUI의 다른 새로운 API를 활용할 수 있습니다.

예시 앱의 경우, RealityKit을 사용하여 픽셀에 생명을 불어넣고 싶습니다.

마법을 만들기 위해 Xcode를 열자.

저는 이미 PixelArtEntityView라는 새로운 SwiftUI 뷰를 만들었습니다.

RealityView를 사용하여 예술의 픽셀을 RealityKit 엔티티로 렌더링합니다.

나는 시작할 새로운 인스턴스를 만들 것이다.

그런 다음 엔티티 뷰를 루트 뷰로 사용하여 UIHostingController를 설정하겠습니다.

호스팅 컨트롤러를 EditorViewController의 자식으로 추가하고 호스팅 컨트롤러의 보기를 EditorViewController의 보기의 하위 보기로 추가할 것입니다.

다음으로, 나는 호스팅 컨트롤러에게 그것이 새로운 부모에게 옮겨졌다고 말할 것이다.

마지막으로, 미리보기를 배치하기 위해 사용자 지정 레이아웃 기능을 호출하겠습니다.

좋아요, 호스팅 컨트롤러 설정이 완료되었습니다.

상영 시간이야.

재생 버튼을 누르고 3D 미리보기를 탭하면 작동 중인 새 코드를 볼 수 있습니다.

그렇게, 나는 앱에 실제 깊이가 있는 픽셀을 추가했다.

시뮬레이터 궤도 제어를 통해, 나는 심지어 내 관점에 따라 조명이 어떻게 변하는지 볼 수 있다.

이거 정말 멋지다!

그리고 그것은 모두 UIKit 앱에서 일어나고 있다.

RealityView는 애니메이터 미리보기를 평준화했다.

그리고 UIHostingController 덕분에, 쉽게 추가할 수 있었다.

이 API들은 함께 훌륭한 공간 앱을 만드는 길을 단축시킨다.

표준 UIKit 프레젠테이션을 사용하고, 편집기 컨트롤을 장식에 넣고, RealityKit으로 3D 픽셀을 추가함으로써, 예제 앱은 이 새로운 공간 세계에서 멋지게 보입니다.

그리고 모두 단 몇 줄의 코드로.

이러한 공간 경험에 대한 디자인 지침에 대해 알아보려면, "공간 디자인의 원칙"을 확인하세요.

우리는 이 비디오에서 많은 것을 다루었으므로, 다음에 해야 할 일은 다음과 같습니다.

프로젝트에 새로운 목적지를 추가하는 것으로 시작하세요.

장치별 API의 사용을 업데이트하고, 더 이상 사용되지 않는 API에서 벗어나세요.

시맨틱 스타일, 호버 효과 및 표준 프레젠테이션을 사용하여 앱이 플랫폼 모양과 일치하도록 하세요.

장식품으로 당신의 아이디어와 상상력을 경계를 넘어 확장하세요.

그리고 UIKit에서 바로 새로운 공간 SwiftUI 기능으로 앱을 더욱 발전시키세요.

봐줘서 고마워!

그레이스와 저는 완전히 새로운 차원에서 당신의 앱을 보게 되어 매우 기쁩니다.

♪