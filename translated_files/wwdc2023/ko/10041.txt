10041

♪ ♪

사이러스: 안녕하세요, "선언적 장치 관리의 발전 탐구" 세션에 오신 것을 환영합니다.

제 이름은 사이러스 다부이고, 저는 장치 관리 고객 팀의 엔지니어입니다.

저는 당신에게 선언적 장치 관리의 흥미진진한 새로운 기능을 설명하기 위해 왔습니다.

선언적 장치 관리는 모든 Apple 기기를 위한 새로운 장치 관리 솔루션입니다.

그것은 장치가 서버에서 프롬프트하지 않고 관리 로직을 적용할 수 있는 자율적이고 사전 예방적인 관리 기능을 제공하며, 비동기 상태 보고를 지원하여 서버가 장치를 폴링할 필요가 없습니다.

또한, 기존 제품과 쉽게 전환하고 통합할 수 있도록 MDM에 내장되어 있습니다.

WWDC22에서 우리는 "미래 프로토콜 기능의 초점은 선언적 장치 관리가 될 것"이라고 말했다.

그리고 우리는 이 릴리스에 대해 "새로운 프로토콜 기능의 초점은 선언적 장치 관리입니다."라고 후속 조치를 취하고 있습니다.

이 릴리스에는 선언적 장치 관리를 통해서만 사용할 수 있는 새롭고 매력적인 기능이 있습니다.

여기에는 MDM과 더 많은 패리티를 제공하고 MDM에서 전환하는 데 도움이 되는 기능이 포함됩니다.

WWDC21에서 처음 소개되고 WWDC22에서 더 기본적인 기능으로 강화된 선언적 장치 관리는 MDM 개발자와 기업 관리자들 사이에서 많은 흥분을 불러일으켰다.

몇몇 MDM 개발자들은 이미 선언적 장치 관리 지원을 갖춘 MDM 서버를 구현하고 배송했다.

이 릴리스의 새로운 기능으로, 더 많은 사람들이 고객에게 향상된 관리 기능 세트를 제공하기 위해 그렇게 하고 싶어 할 것이다.

선언적 장치 관리가 무엇이며 제품에 채택하는 방법에 대한 심층적인 내용은 WWDC21과 WWDC22의 세션을 검토하십시오.

플랫폼 지원에 대한 빠른 업데이트.

MDM과 선언적 장치 관리는 이제 watchOS에서 사용할 수 있습니다.

자세한 내용은 "Apple Watch용 장치 관리 충족" 세션에서 확인할 수 있습니다.

선언적 장치 관리는 MDM 개발자와 기업 관리자에게 강력하고 안전한 솔루션을 제공하는 것을 목표로 하는 Apple 내의 여러 팀 간의 협력입니다.

우리의 초점은 항상 사용자와 장치의 개인 정보 보호와 보안을 보호하는 원활한 사용자 경험을 제공하는 동시에 관리자에게 기업 데이터를 보호하고 정책을 준수하는 데 필요한 도구를 제공하는 것입니다.

그것은 또한 MDM 개발자 및 기업 관리자와의 협력이다.

당신의 피드백은 우리가 이 릴리스에서 제공하는 기능의 우선 순위를 정하는 데 도움이 되었습니다.

선언적 장치 관리의 기본 요소와 함께, 우리의 초점은 핵심 관리 기능을 구현하는 것으로 옮겨졌다.

그것들이 무엇인지 살펴봅시다.

첫째, 소프트웨어 업데이트를 시행하는 새로운 방법이다.

둘째, 앱을 관리하는 것이다.

셋째, 시스템 서비스를 잠그고 백그라운드 작업을 모니터링하여 장치를 보호하는 것이다.

그 다음에는 장치에서 사용할 인증서와 신원 자격 증명을 설치합니다.

그리고 마지막으로, MDM에서 선언적 장치 관리로 프로필을 더 쉽게 전환하는 새로운 행동.

소프트웨어 업데이트 팀과 협력하여, 우리는 선언적 장치 관리를 기반으로 구축된 macOS, iOS 및 iPadOS 장치에 새로운 관리 소프트웨어 업데이트 경험을 제공하고 있습니다.

I.T. 관리자는 필요한 기능과 수정을 보장하기 위해 사용자의 장치에 최신 시스템 소프트웨어 업데이트가 설치되어 있는지 확인해야 합니다.

관리자는 소프트웨어 업데이트를 시행하고, 조직 앱 및 서비스와 호환되는지 확인하기 위해 새로운 OS 릴리스를 테스트할 수 있도록 짧은 기간 동안 연기해야 합니다.

그들은 또한 그렇게 하도록 명령받았을 때 장치가 제대로 업데이트되었는지 확인해야 한다.

대규모 장치의 경우, 이것은 시간이 많이 걸리는 작업이 될 수 있다.

오늘날, 관리자는 MDM 명령을 사용하여 감독되는 장치에 업데이트를 설치할 수 있습니다.

그들은 서버가 장치를 폴링할 때 업데이트 상태에 대한 피드백을 받을 수 있다.

관리자는 또한 프로필을 통해 사소한 및 주요 업데이트를 연기하여 감독된 장치가 지정된 기간 동안 사용자에게 소프트웨어 업데이트를 제공하는 것을 방지할 수 있습니다.

하지만 당신의 피드백을 바탕으로, 우리는 관리자와 사용자 모두를 위한 전반적인 관리 소프트웨어 업데이트 경험을 개선하고 싶습니다.

선언적 장치 관리는 관리자에게 업데이트 프로세스에 대한 더 많은 통제권을 제공하고 사용자에게 더 유익한 경험을 제공하는 동시에 업데이트가 적시에 이루어지도록 하는 메커니즘입니다.

여기 방법이 있어.

구성은 소프트웨어 업데이트 동작을 정의하는 데 사용될 수 있다.

이 장치는 사용자에게 업데이트 프로세스에 대한 정보를 제공하고 마감일 전에 스스로 업데이트할 수 있는 기회를 제공하면서 이러한 지침을 사전에 수행할 수 있습니다.

전제는 장치가 시드 및 GM 빌드로 업그레이드되거나 신속한 보안 응답을 사용할 수 있게 됨에 따라 소프트웨어 업데이트의 순서를 제어하기 위해 정교한 논리를 강화하는 데 사용할 수 있습니다.

그리고 비동기 상태 보고는 관리자가 소프트웨어 업데이트 흐름을 최신 상태로 유지하여 문제가 발생하면 신속하게 해결할 수 있도록 합니다.

이것이 어떻게 구현되는지 살펴봅시다.

특정 시간까지 감독되는 장치의 강제 소프트웨어 업데이트를 관리하기 위한 구성이 추가되었습니다.

설치 상태와 실패 이유에 대한 세부 사항을 포함하여 장치의 소프트웨어 업데이트 흐름을 보고하는 일련의 새로운 상태 항목도 있습니다.

몇 가지 예를 공부해 봅시다.

이 예제 구성은 특정 OS 버전에 대한 소프트웨어 업데이트를 적용하고 특정 시간에 빌드합니다.

TargetOSVersion 키는 장치가 업데이트해야 하는 OS 버전을 나타냅니다.

선택적 TargetBuildVersion 키를 사용하면 필요한 경우 특정 시드 빌드를 타겟팅할 수 있습니다.

둘 다 설정되면 TargetBuildVersion이 TargetOSVersion보다 우선합니다.

지정된 버전에 대한 업데이트를 찾을 수 없는 경우, 장치는 소프트웨어 업데이트 서버에서 판매한 기본 업데이트를 검색합니다.

TargetLocalDateTime 키는 업데이트가 강제될 현지 날짜와 시간을 지정합니다.

다음은 소프트웨어 업데이트 상태 항목에 대한 상태 보고서의 예입니다.

설치 이유 상태 항목은 설치가 발생한 이유를 설명하는 일련의 이유이다.

여기에는 업데이트가 선언, 시스템 또는 사용자 또는 이들의 조합에 의해 시작되었는지 여부를 보여주는 것이 포함됩니다.

보류 중인 버전 상태 항목은 시스템이 설치하려는 소프트웨어 업데이트 버전을 나타냅니다.

설치 상태 상태 항목은 업데이트와 관련하여 시스템이 현재 어떤 상태에 있는지 식별합니다.

실패 이유 상태 항목은 오류의 수와 최신 오류의 이유와 타임스탬프를 지정합니다.

사용자의 관점에서 이것이 어떻게 생겼는지 살펴봅시다.

사용자는 어떤 업데이트가 언제 시행되고 있는지 명확하게 식별할 수 있을 것이다.

그들은 마감일 전에 업데이트하거나 그날 밤 일정을 잡을 수 있다.

사용자가 "오늘 밤 업데이트"를 선택하면, 업데이트가 다운로드되고 준비되며, 장치가 충분히 충전되고 충분히 비활성 상태인 그날 밤 업데이트하기 위해 대기열에 있습니다.

사용자가 즉시 업데이트를 트리거하지 않으면, 소프트웨어 업데이트는 마감일까지 매일 사용 가능한 업데이트 알림을 게시합니다.

macOS에서 사용자는 알림이 나타날 때 "Install" 또는 "Try Tonight"을 선택할 수 있는 옵션이 있습니다.

마감일 24시간 전에, 이 알림은 매시간 표시되며 방해금지 모드를 무시합니다.

마감일 한 시간 전에, 알림은 30분마다, 그리고 10분마다 나타난다.

사용자가 휴가 중이었기 때문에 장치를 껐고, 결과적으로 마감일을 놓쳤다고 가정해 봅시다.

사용자가 장치를 다시 시작하면, 소프트웨어 업데이트는 업데이트 기한이 지났다는 알림을 게시할 것이며, 업데이트는 다음 한 시간 이내에 시도될 것입니다.

iOS와 iPadOS에서도 비슷한 경험이 일어난다.

여기서, 관리자는 하단의 강조 표시된 섹션과 같이 iOS 17.0에 대한 업데이트를 시행하고 있습니다.

사용자는 지금 업데이트 또는 오늘 밤 업데이트를 쉽게 선택할 수 있으며, macOS와 마찬가지로 마감일 전에 업데이트가 설치되도록 할 수 있습니다.

그리고 macOS와 마찬가지로, 업데이트 자체를 트리거하지 않기로 선택하면 알림 알림이 증가하는 케이던스로 전송됩니다.

그리고 같은 기한이 지난 행동이 일어날 것이다.

소프트웨어 업데이트 선언과 MDM 명령 및 프로필이 공존할 수 있습니다.

그러나, 선언에 의해 시행되는 소프트웨어 업데이트는 항상 MDM 명령과 프로필보다 우선합니다.

소프트웨어 업데이트 구성 및 상태 항목은 macOS, iOS 및 iPadOS에서 사용할 수 있습니다.

이제 장치 관리의 또 다른 중요한 측면인 앱으로 관심을 돌봅시다.

관리자는 관리되는 장치에서 앱의 라이선스, 설치, 업데이트 및 제거를 관리해야 합니다.

여기에는 문제가 발생할 경우 지원을 제공하고 조직에서 다양한 역할을 하는 다른 사용자에게 할당된 장치를 다시 프로비저닝하는 것이 포함됩니다.

MDM 개발자는 관리자가 앱을 관리하고, MDM 앱 관련 명령을 사용하고, Apple 서버 API를 사용하여 앱 메타데이터를 찾고 라이선스를 관리하는 데 도움이 되는 다양한 도구를 제공합니다.

MDM의 필수 폴링 특성은 관리자가 문제가 발생하거나 사용자가 역할을 변경하거나 장치 간에 장치를 순환해야 할 때 적시에 대응하기 위해 고군분투한다는 것을 의미합니다.

또한, 사용자는 장치를 처음 설정하거나 변경할 때 느리게 반응하게 한다.

선언적 장치 관리는 관리자에게 앱 관리와 관련하여 새롭고 더 효율적인 경험을 제공할 수 있으며, 사용자에게 더 반응이 빠르고 신뢰할 수 있는 경험을 제공할 수 있습니다.

여기 방법이 있어.

구성을 사용하여 필요할 때 장치에서 사용할 수 있는 앱을 지정할 수 있습니다.

장치 조건이 사용을 지시할 때 이미 존재할 수 있도록 미리 장치로 보낼 수 있습니다.

술어들은 서버가 설정한 장치 상태 또는 관리 속성에 따라 사용자가 사용할 수 있는 앱 세트를 제어하기 위해 전원 논리에 사용할 수 있습니다.

따라서 관리자는 필요에 따라 앱 세트 사이를 빠르게 전환할 수 있습니다.

앱을 설치할 필요 없이 사용자에게 보여줄 수 있으므로, 사용자는 서버 개입 없이 언제 설치할지 선택할 수 있습니다.

이것은 또한 관입적인 사용자 동의 프롬프트의 필요성을 피한다.

그리고 비동기 상태 보고는 관리자가 관리되는 앱의 변경 사항을 최신 상태로 유지하여 문제가 발생하면 신속하게 해결할 수 있도록 합니다.

이것이 어떻게 구현되는지 살펴봅시다.

개별 앱의 설치, 업데이트 및 제거를 관리하기 위한 구성이 추가되었습니다.

관리되는 앱 목록에 보고하는 새로운 상태 항목도 있습니다.

앱은 App Store에서 제공되거나 MDM과 유사한 매니페스트에 의해 지정된 엔터프라이즈 앱일 수 있습니다.

macOS에서는 패키지가 지원되지만, 하나의 앱만 포함해야 합니다.

또한, 앱 설치는 사용자가 트리거할 수 있는 선택 사항으로 표시될 수 있습니다.

몇 가지 예를 공부해 봅시다.

이 예시 관리 앱 구성은 앱 스토어에서 페이지 앱을 설치합니다.

설치 동작은 앱이 필요하다는 것을 나타냅니다.

그러면 구성이 활성화되면 앱을 즉시 설치하고 관리할 수 있습니다.

그 앱은 또한 사용자가 제거할 수 없을 것이다.

또는, 설치 동작을 "선택 사항"으로 설정할 수 있습니다. 구성이 활성화되면, 사용자가 원할 때 앱을 다운로드할 수 있습니다.

사용자는 또한 원할 때마다 앱을 제거할 수 있습니다.

제어 관리에 대한 다른 속성은 앱별 VPN과 같은 구성에 존재합니다.

이 예제는 설치가 완료된 페이지 앱의 상태 항목을 보여줍니다.

식별자 키는 상태 객체의 고유 식별자이며 앱의 번들 식별자로 설정됩니다.

선언 식별자 키는 앱을 관리하는 구성의 식별자이다.

장치에서 변경 사항이 발생함에 따라 상태는 비동기적으로 업데이트되므로 폴링이 필요하지 않습니다.

이제 사용자 경험에 관심을 돌봅시다.

많은 MDM 개발자들은 사용자에게 관리 경험을 제어할 수 있는 옵션을 제공하는 앱을 제공합니다.

종종, 사용자가 무엇을 언제 설치할지 선택할 수 있도록 앱 목록이 존재한다.

사용자는 앱을 탭하여 설치를 트리거할 수 있습니다.

이를 구현하려면 앱과 MDM 서버 사이에 개인 프로토콜이 필요하여 앱 목록을 전달한 다음 사용자의 작업을 서버로 다시 보내야 합니다.

그런 다음 서버는 설치를 트리거하기 위해 MDM 명령을 보내야 합니다.

이 모든 것은 사용자 경험에 추가적인 대기 시간을 도입한다.

우리는 보안을 유지하면서 선택적 앱 설치를 간단하고 빠르게 함으로써 이것을 개선하고 싶습니다.

새로운 관리형 앱 배포 프레임워크는 제3자 관리 앱을 사용할 수 있습니다.

그것을 사용하려면 자격이 필요하며, App Store 제출 절차의 일부로 신청할 수 있습니다.

프레임워크에는 각 관리되는 앱을 사용자 정의 가능한 레이아웃에 배치할 수 있는 SwiftUI 뷰로 노출하는 SwiftUI 뷰 확장이 포함되어 있습니다.

사용자는 앱의 세부 사항을 보고 탭하여 설치할 수 있습니다.

이것은 MDM 서버에 대한 왕복 대기 시간을 제거하고, 앱을 즉시 설치할 수 있으며, 진행 상황에 대한 더 나은 피드백을 제공함으로써 사용자 경험을 향상시킵니다.

당신이 만들 수 있는 앱에서 이것이 어떻게 생겼는지 살펴봅시다.

이 슬라이드는 새로운 보기 서비스를 사용하여 사용자에게 앱 목록을 보여주는 iOS의 MDM 관리 앱을 보여줍니다.

현재 하나의 앱이 설치되어 있습니다.

하나는 실시간 진행 상황을 보여주는 다운로드이다.

그리고 다른 하나는 선택 사항이며 설치를 기다리고 있습니다.

앱 보기의 스타일은 사용자 정의할 수 있으며, 이 경우 표준 목록 스타일을 사용합니다.

macOS에서는 다른 스타일의 앱 뷰를 사용하여 여기에 표시된 그리드 레이아웃과 같은 더 광범위한 레이아웃을 사용할 수 있습니다.

뷰 서비스를 사용하는 앱은 적절한 방식으로 앱 세트를 정렬하고 그룹화할 수 있습니다.

이미 앱 목록을 보여주는 관리 앱이 있다면, 이 보기 서비스는 대안으로 사용할 수 있으며 사용자에게 더 나은 경험을 제공할 수 있습니다.

관리 앱을 제공할 계획이라면, 이 보기 서비스는 그것을 구현하기 위한 출발점을 제공할 것입니다.

새로운 관리 앱 구성의 선택적 설치 동작을 사용하려는 경우, 사용자에게 자체 관리 앱을 제공해야 합니다.

관리 앱 구성 및 상태 항목, 공용 프레임워크 및 보기 확장은 macOS, iOS 및 iPadOS에서 사용할 수 있습니다.

또한, 앱 관리 경험을 개선하려는 목표의 일환으로, 즉시 사용할 수 있는 새로운 "조직용 앱 및 도서" 서버 API를 발표하게 되어 기쁩니다.

이것은 기존 contentMetadataLookup 서버 API를 대체합니다.

새로운 API는 더 나은 성능과 가동 시간 외에도 새로운 사용자 지정 및 버전 설정 기능을 제공합니다.

새로운 API 사용에 대한 자세한 내용은 developer.apple.com 사이트를 방문하십시오.

이제 선언적 장치 관리가 macOS 시스템 서비스 및 백그라운드 작업에 대한 보안 준수를 시행하고 확인하는 데 어떻게 사용될 수 있는지 살펴봅시다.

관리자는 종종 그들이 지원하는 장치가 일관되고 안전한 방식으로 작동하는지 확인해야 한다.

일관성을 보장하는 것은 모두 같은 방식으로 구성되어 있다는 점을 감안할 때 대규모 장치를 지원하는 것이 더 쉽다는 것을 의미합니다.

규정 준수를 보장하는 것은 장치가 기본 수준의 보안을 가지고 있는 것으로 알려져 있으며, 조직 데이터가 안전하다는 확신을 제공한다는 것을 의미합니다.

그리고 모든 장치에서 변경해야 하거나 새로운 장치가 인벤토리에 추가될 때, 이것은 빠르고 효율적인 방식으로 이루어져야 합니다.

이 요구 사항의 한 부분은 장치에 설치된 시스템 또는 제3자 서비스를 구성하고 모니터링하는 것을 포함한다.

macOS는 시스템 구성 파일을 통해 제어되는 많은 시스템 서비스와 함께 제공됩니다.

예를 들어, sshd는 /etc/ssh 디렉토리의 파일을 통해 구성됩니다.

이러한 시스템 서비스의 대부분은 조직이 요구하는 일관성과 준수를 보장하기 위해 관리자가 안전하게 구성해야 합니다.

따라서, 사용자가 의도적으로 또는 실수로 이러한 시스템 구성을 변경할 수 없도록 하는 것이 중요합니다.

그러나, 사용자가 종종 시스템 구성 파일을 수정하거나 사용자 지정 구성 파일을 사용하기 위해 시스템 서비스를 재정의할 수 있기 때문에, 이것은 달성하기 어렵다.

선언적 장치 관리는 시스템 무결성 보호에 의해 보호되는 시스템 서비스의 구성을 지원하고 장치 일관성과 보안 준수를 보장하기 위해 백그라운드 작업을 모니터링하는 수단을 제공하는 안전하고 신뢰할 수 있는 메커니즘을 제공하는 이상적인 위치에 있습니다.

여기 방법이 있어.

선언적 장치 관리 구성은 다른 시스템 서비스에 대한 변조 방지 시스템 구성 파일 세트를 지정하는 데 사용할 수 있습니다.

상태는 백그라운드 작업이 오고 가는 것을 모니터링하는 데 사용될 수 있다.

그리고 술어들은 필요한 경우 순전히 자율적인 방식으로 장치 상태를 트리거하는 정교한 준수 규칙을 강화할 수 있다.

이것이 어떻게 구현되는지 살펴봅시다.

시스템 서비스 구성 파일 관리를 지원하기 위해 선언적 장치 관리 구성이 추가되었습니다.

구성은 ZIP 아카이브를 제공하는 데이터 자산을 참조합니다.

구성이 활성화되면, 아카이브가 다운로드되어 변조 방지 서비스 전용 위치로 확장됩니다.

이 위치는 모든 시스템 서비스가 관리 서비스 구성 파일을 채택할 수 있도록 새 라이브러리에서 함수를 호출하여 프로그래밍 방식으로 찾을 수 있습니다.

내장 시스템 서비스는 관리 서비스 구성 파일을 찾기 위해 수정되며 항상 기본 또는 재정의된 시스템 구성보다 먼저 사용됩니다.

제3자 서비스는 또한 같은 방식으로 관리 서비스 구성 파일을 채택할 수 있다.

우리는 당신이 사용하는 제3자 서비스의 개발자에게 연락하여 새로운 기능을 채택하도록 하는 것이 좋습니다.

이것이 어떻게 작동하는지 살펴봅시다.

이 예제 구성은 sshd 서비스에 대한 관리 서비스 구성 파일을 설치합니다.

그것은 데이터 자산에 대한 참조를 포함한다.

여기 예시 데이터 자산이 있습니다.

자산 유형은 새로운 유형이며 임의의 데이터를 전달하는 데 사용됩니다.

또한 자산 데이터를 검색할 때 어떤 유형의 인증이 사용되는지 나타내는 새로운 방법입니다.

이를 통해 자산이 호스팅되는 위치와 데이터에 안전하게 접근하기 위해 인증 및 인증이 어떻게 이루어지는지에 대한 더 큰 유연성을 제공합니다.

자산의 데이터 URL은 참조 구성이 활성화되면 ZIP 아카이브 파일을 다운로드할 수 있는 위치를 가리킵니다.

아카이브는 sshd 프로세스가 액세스하고 관리 서비스 구성으로 사용할 수 있는 변조 방지 서비스별 위치로 확장됩니다.

이 기능을 채택한 첫 번째 내장 서비스는 다음과 같습니다: sshd, sudo, PAM, CUPS, Apache httpd, 그리고 마지막으로, bash 및 zee shells 시스템 서비스 구성을 잠그는 것 외에도, 이 릴리스는 설치된 백그라운드 작업 목록을 보고하는 새로운 상태 항목을 추가합니다.

이를 통해 관리자는 필요한 작업이 실행 중이고 원치 않는 작업이 실행되고 있지 않은지 빠르게 확인할 수 있습니다.

이게 어떻게 생겼는지 살펴봅시다.

이 예제는 백그라운드 작업의 상태 배열 항목을 보여줍니다.

세부 사항은 다음과 같습니다: 작업의 고유 식별자.

작업을 실행하는 사용자 계정의 uid.

그것의 상태.

데몬, 에이전트, 로그인 항목, 앱 또는 사용자 항목인 작업 유형.

또한 라벨 및 프로그램 인수와 같은 launchd 세부 사항과 서비스를 로드하는 데 사용되는 launchd 속성의 체크섬 해시를 사용할 수 있습니다.

또한, 이 릴리스는 macOS 부팅 볼륨의 FileVault 활성화 상태를 보고할 상태 항목을 추가합니다.

FileVault가 활성화되었는지 여부를 나타내는 부울 값을 반환하며, 활성화 조건자에서 사용하기 쉽기 때문에 보안에 민감한 구성은 안전할 때만 설치할 수 있습니다.

관리 서비스 구성 파일, 백그라운드 작업 및 FileVault 상태 보고의 이러한 조합을 통해 관리자는 이제 조직의 모든 macOS 장치에서 일관성과 규정 준수를 보장할 수 있는 강력한 방법을 갖게 되었습니다.

이제 선언적 장치 관리에서 보안 인증서와 신원에 대해 논의해 봅시다.

관리자는 내부 및 외부 네트워크에서 호스팅되는 조직 자원에 대한 안전한 액세스를 보장해야 합니다.

종종 이것은 전송 계층 보안이나 앱 서비스에 대한 인증된 액세스를 보장하기 위해 장치에 인증서와 신원을 추가해야 합니다.

다른 앱 서비스는 동일한 인증서나 신원을 사용할 수 있으며, 그러한 관계를 관리할 수 있는 것이 중요합니다.

인증서는 또한 한정된 수명을 가지고 있으므로, 그것들을 새로 고칠 수 있는 신뢰할 수 있는 방법이 있어야 한다.

또한, 비밀번호 인증을 더 빠르고, 사용하기 쉽고, 피싱에 강한 암호키와 같은 보안 기술로 대체하는 것이 바람직하다.

따라서 MDM 개발자가 관리자가 인증서와 신원을 관리할 수 있는 안정적이고 효율적인 방법을 제공하는 것이 중요합니다.

MDM에는 이미 장치의 키체인에서 인증서와 ID를 만드는 데 사용할 수 있는 프로필 페이로드가 포함되어 있습니다.

또한 ACME 및 SCEP 프로토콜을 통한 프로비저닝 ID를 지원하고 인증서 목록 명령을 통해 인증서 검색을 지원합니다.

하지만 MDM이 할 수 있는 것에는 몇 가지 제한이 있다.

MDM 인증서 또는 ID 페이로드는 동일한 프로필 내에서 하나 이상의 다른 페이로드에 의해 참조될 수 있습니다.

그러나, 다른 프로필의 인증서나 신원에 대한 참조는 허용되지 않습니다.

이것은 프로필이 동일한 항목을 참조하는 모든 페이로드를 수용하기 위해 더 커져야 하거나 인증서와 신원이 여러 프로필에서 복제되어야 한다는 것을 의미하며, 이는 최신 상태로 유지하기 위해 더 많은 작업을 의미합니다.

또한, 인증서나 신원을 새로 고쳐야 할 때, 프로필의 다른 모든 페이로드가 시스템에서 업데이트되어 사용자 경험을 방해할 수 있습니다.

선언적 장치 관리는 선언 데이터 모델의 모든 기능을 활용하여 인증서와 신원을 관리하기 위한 보다 효율적인 메커니즘을 제공할 수 있다.

여기 방법이 있어.

인증서와 신원은 자산 신고로 정의될 수 있으며, 구성은 해당 자산을 참조할 수 있습니다.

여러 구성은 동일한 인증서 또는 ID를 참조할 수 있으며, 여러 인증서 또는 ID는 동일한 구성으로 참조할 수 있습니다.

그리고 인증서나 신원을 새로 고쳐야 할 때만 자산을 업데이트해야 합니다.

이러한 자산과 구성의 조합은 MDM 프로필 페이로드의 많은 한계를 해결합니다.

또한, 폴링 없이 ACME 및 SCEP ID가 프로비저닝될 때 빠른 피드백을 제공하는 것을 포함하여 인증서 및 ID의 상태도 보고할 수 있습니다.

이 모든 것이 어떻게 구현되는지 살펴봅시다.

인증서 또는 신원 데이터를 제공하기 위해 일련의 자산이 추가되었습니다.

인증서는 PEM 또는 DER 데이터 형식을 사용합니다.

신원은 PKCS #12 형식을 사용하거나 ACME 또는 SCEP 프로토콜을 통해 프로비저닝할 수 있습니다.

여기에는 사용 가능한 하드웨어 바인딩 키의 사용이 포함됩니다.

새로운 상태 항목은 또한 자산을 통해 설치된 각 인증서 또는 신원에 대해 보고할 수 있습니다.

몇 가지 예를 공부해 봅시다.

이 예시 자산은 인증서를 설치할 것이다.

참조 세부 사항은 실제 인증서 데이터를 장치에 전달하는 URL을 제공합니다.

또 다른 예는 ACME 서버를 통해 신원을 프로비저닝하는 자산을 보여준다.

이 경우, 참조 세부 사항은 ACME 프로토콜 교환에 필요한 속성을 포함하는 JSON 문서를 제공하는 URL을 제공합니다.

다음은 ACME 속성 JSON 문서의 예입니다.

디렉토리 URL은 ACME 서버의 URL을 지정합니다.

어떤 유형의 키가 생성되는지 정의하는 속성 세트와 생성된 인증서에 대한 속성 세트가 있습니다.

이제, 상태를 살펴봅시다.

이 예제는 두 개의 인증서가 있는 상태 배열 항목을 보여줍니다.

각 항목에는 관련 자산의 선언 식별자, DER로 인코딩된 인증서 데이터 및 인증서가 신원에 해당하는지 여부에 대한 지표가 포함되어 있습니다.

이제 우리는 인증서와 신원에 대한 자산을 가지고 있으므로, 몇 가지 신규 및 기존 구성에서 사용할 수 있습니다.

먼저, 독립형 인증서와 ID를 설치하는 데 사용할 수 있는 두 가지 새로운 구성이 있습니다.

둘 다 실제 인증서나 신원 데이터를 제공하기 위해 자격 증명 자산을 참조한다.

인증서 구성은 키체인에 단일 인증서를 설치합니다.

인증서가 자체 서명되고 인증 기관인 경우, 트러스트 스토어에도 추가됩니다.

신원 구성은 키체인에 단일 신원을 설치합니다.

이러한 구성은 모든 플랫폼에서 사용할 수 있습니다.

다음으로, 우리는 엔터프라이즈 패스키를 배포하기 위한 구성이 있습니다.

WWDC22는 웹사이트와 앱에서 비밀번호 사용을 없애기 위한 솔루션으로 암호키를 도입했다.

이 릴리스에서, 우리의 초점은 인증된 장치와 사용자만 프로비저닝할 수 있도록 함으로써 암호키를 기업에 쉽게 배포할 수 있도록 하는 것으로 바뀌었다.

이를 지원하기 위해, 구성에 지정된 사이트를 방문할 때 장치에서 사용자의 암호키를 안전하게 생성하는 데 사용할 수 있는 새로운 엔터프라이즈 암호키 증명 구성이 있습니다.

구성은 신원 자산을 참조한다.

그런 다음 신원은 생성된 암호키의 표준 WebAuthn 증명을 수행하는 데 사용됩니다.

그런 다음 WebAuthn 의존 당사자는 이 증명을 확인하고 관련 사이트에 대한 액세스를 허용할 수 있습니다.

따라서, 관리자는 특정 암호키를 관리되는 장치로만 제한할 수 있습니다.

이 기능은 macOS, iOS 및 iPadOS에서 사용할 수 있습니다.

MDM 서버와 의존 당사자가 이 흐름을 구현하기 위해 어떻게 협력하는지에 대한 자세한 내용은 "직장에서 패스키 배포" 세션에서 찾을 수 있습니다.

마지막으로, Mail 및 Exchange 계정 구성은 MDM 프로필 페이로드 등가물과 기능 패리티를 제공하기 위해 S/MIME을 지원하도록 업데이트되었습니다.

구성은 이제 S/MIME 서명 및 암호화에 사용할 수 있는 ID 자산을 참조할 수 있습니다.

이것은 iOS와 iPadOS에서 사용할 수 있습니다.

마지막 항목을 위해, MDM 프로필에서 구성으로 쉽게 전환할 수 있는 새로운 행동에 대해 논의해 봅시다.

선언적 장치 관리는 MDM에 내장되어 있으며 MDM과 병행하여 새로운 관리 기능을 추가하여 시간이 지남에 따라 제품을 전환할 수 있습니다.

MDM에서 선언적 장치 관리를 구현하는 것은 MDM DeclarativeManagement 명령을 장치로 보내고 장치에서 활성화되는 일련의 선언을 통해 동기화하는 것만큼 간단합니다.

그런 다음 서버는 들어오는 상태 보고서를 듣습니다.

이러한 전환을 쉽게 하기 위해 기존 MDM 프로필을 구성으로 보낼 수 있도록 레거시 프로필 구성이 생성되어 프로필이 선언적 장치 관리의 자율적이고 사전 예방적인 동작을 최대한 활용할 수 있도록 했습니다.

그렇게 하려면 먼저 기존 MDM 프로필을 제거한 다음 동일한 프로필을 설치하는 구성을 보내고 활성화해야 합니다.

이것은 파괴적인 과정이 될 수 있으며, 계정이 모든 데이터를 새로 고쳐야 하거나, 잠시 동안 장치에서 제한이 누락된 관리 격차를 남길 수 있습니다.

MDM 개발자들은 MDM 프로필 사용에서 레거시 프로필 구성으로 전환하는 더 쉬운 방법을 요청했다.

그리고 이제 이게 가능해.

여기 방법이 있어.

선언적 장치 관리는 이제 제거할 필요 없이 이미 설치된 MDM 프로필의 관리를 인수할 수 있도록 지원합니다.

이를 사용하려면, 서버가 해야 할 일은 MDM에 의해 이미 설치된 것과 동일한 프로필이 포함된 구성을 보내고 활성화하는 것입니다.

선언적 장치 관리 시스템은 다시 설치하거나 업데이트하지 않고도 해당 프로필의 관리를 인수할 것이다.

그 시점에서, 선언적 장치 관리가 프로필을 소유하고 있다.

MDM은 그것을 변경할 수 없을 것이다.

프로필이 관리하는 장치 상태에는 중단이 없습니다.

그리고 관리 격차는 없다.

이것은 MDM에서 선언적 장치 관리로 훨씬 쉽게 전환할 수 있게 해준다.

이 새로운 행동은 모든 플랫폼에서 사용할 수 있다.

그것은 우리가 선언적 장치 관리의 출시를 위해 당신에게 제공하는 흥미진진한 새로운 기능을 다루는 우리의 마지막 의제 항목을 마칩니다.

이제 마무리하자.

기본 요소와 함께, 이 릴리스는 선언적 장치 관리의 힘을 사용하여 주요 관리 기능을 구축하는 데 초점을 맞추었다.

이러한 기능 중 상당수는 귀하의 피드백을 통해 받은 요청의 결과이며, 이에 감사드립니다.

선언적 장치 관리가 계속 발전함에 따라, 우리는 당신에게 중요한 기능의 우선 순위를 정하는 데 도움이 되는 더 많은 피드백을 환영합니다.

새로운 관리 기능이 선언적 장치 관리에만 추가됨에 따라, 아직 그렇게 하지 않았다면 제품에 지원을 구축하는 것이 중요합니다.

이미 지원이 있다면, 이 릴리스의 새로운 기능은 고객이 좋아할 훌륭한 제품을 만들 수 있는 더 많은 기회를 제공할 것입니다.

이 릴리스의 다른 새로운 관리 기능에 대한 정보는 "Apple 장치 관리의 새로운 기능" 세션에서 찾을 수 있습니다.

새로운 구성, 자산 및 상태 항목에 대한 스키마는 오픈 소스 스키마 저장소에서 사용할 수 있으며, 세션 참조 세부 정보에서 링크를 찾을 수 있습니다.

봐줘서 고마워.

♪ ♪