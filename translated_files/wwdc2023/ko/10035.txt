10035

♪ ♪

Bhavya: 안녕하세요, 제 이름은 Bhavya이고, 저는 접근성 팀의 엔지니어입니다.

오늘 세션에서, 우리는 당신의 앱에서 접근성 감사를 수행하는 방법에 초점을 맞출 것입니다.

먼저, UI 테스트에서 자동화된 접근성 감사를 수행하는 것이 얼마나 쉬운지 다룰 것입니다.

그리고 나서 우리는 훌륭한 테스트 경험과 훌륭한 접근성 경험을 동시에 제공하는 방식으로 요소를 노출하는 방법에 대해 논의할 것입니다.

접근성 감사부터 시작합시다.

테스트는 앱 개발 과정의 기본 구성 요소이다.

테스트를 작성함으로써, 우리는 코드를 배송하기 전에 버그를 포착하고 수정할 수 있습니다.

그것이 우리가 제품의 품질을 보장하는 방법이다.

그리고 접근 가능한 제품은 고품질 제품이다.

전 세계 약 7명 중 1명은 세계와 그들의 장치와 상호 작용하는 방식에 영향을 미치는 장애를 가지고 있다.

사람들은 VoiceOver와 같은 도구를 사용하여 그들에게 가장 적합한 방식으로 앱과 상호 작용합니다.

고품질 제품을 제공한다는 것은 모든 사람이 액세스할 수 있는 애플리케이션을 제공하여 앱에서 최고 품질의 경험을 할 수 있도록 하는 것을 의미합니다.

나는 개인적인 경험을 통해 접근성이 얼마나 깊고 복잡한 주제가 될 수 있는지 알고 있다.

접근성 감사가 어떻게 이것을 간단한 작업으로 만들 수 있는지 살펴봅시다.

Xcode는 접근성 검사기라는 도구와 함께 제공됩니다.

이 도구는 앱 내에서 접근성 문제를 찾고, 진단하고, 해결할 수 있는 쉬운 방법을 제공합니다.

이 도구를 활용할 수 있는 강력한 방법 중 하나는 내 앱에서 감사를 수행하는 것이다.

검사관은 일반적인 접근성 문제에 대해 앱의 개별 보기를 감사할 수 있습니다.

이건 내 샘플 앱이야. 탭이 두 개 있어.

첫 번째 탭은 나에게 동기 부여 인용문을 제공하고, 두 번째 탭은 자기 반성을 위해 내 생각을 적을 수 있게 해준다.

견적 탭에는 견적을 표시하는 텍스트 보기가 있습니다.

그리고 이 텍스트 보기는 배경 이미지 위에 배치됩니다.

견적을 새로 고치는 새 견적 버튼도 있습니다.

접근성 검사기를 실행하고 앱에 대한 감사를 수행할 수 있습니다.

검사관은 충분한 요소 설명을 제공하고 적절한 대비를 보장하는 것과 같은 모든 종류의 문제를 확인합니다.

그리고 그것이 발견한 문제는 각 문제에 대한 자세한 설명이 있는 표에 표시됩니다.

접근성 감사는 강력하며, 이제 자동화할 수 있다.

이제 UI 테스트에서 감사를 수행할 수 있습니다.

XCUIApplication에서 performAccessibilityAudit를 호출하면 인스펙터와 마찬가지로 접근성 문제에 대한 현재 보기를 감사할 것입니다.

주장이 필요하지 않습니다: 문제가 발견되면, 테스트는 자동으로 실패합니다.

이것을 실제로 보기 위해 빠른 데모에 뛰어들어 봅시다.

Xcode에서 데모 앱을 열었습니다.

그것은 스위프트로 작성되었으며 표준 UIKit 뷰를 사용합니다.

나는 이미 화면의 요소가 존재하는지 확인하는 몇 가지 합격 테스트를 작성했다.

예를 들어, testQuoteTabView는 이미지 보기와 텍스트 보기가 인용 탭에 있는지 확인합니다.

주목해야 할 한 가지는 이 테스트들이 또한 접근성을 테스트하는 데 도움이 된다는 것이다.

XCTest가 이러한 견해를 찾으려면, 그것들은 접근성 요소여야 한다.

그것은 당신의 UI 테스트가 요소를 찾을 수 있다면, 우리의 보조 기술도 찾을 수 있다는 것을 의미합니다.

이런 식으로 약간의 접근성 테스트를 받는 것은 좋지만, 모든 종류의 문제를 파악하고 있는지 확인하기 위해 테스트에 몇 가지 감사를 추가하고 싶습니다.

나는 testAccessibilityQuoteTabView라는 또 다른 테스트를 만들 것이다.

앱을 실행하고 견적 탭으로 이동하기 위해 몇 가지 설정을 할 것입니다.

그리고 마지막으로, 나는 애플리케이션에 대해 performAccessibilityAudit에 전화할 것이다.

감사는 여러 문제를 보고할 수 있으므로, 내 테스트가 첫 번째 실패 후에도 문제를 계속 보고할 수 있도록 continueAfterFailure를 true로 설정하겠습니다.

그게 다야.

테스트 다이아몬드를 클릭하여 테스트를 실행합시다.

내 시험이 실패한 것 같아.

문제는 Xcode 소스 편집기 내에서 인라인으로 보고됩니다.

내 감사는 두 가지 문제를 발견했다: 요소에는 설명이 없고, 라벨은 사람이 읽을 수 없다.

문제가 있는 요소가 무엇인지 알아봅시다.

보고서 네비게이터로 이동하여 테스트를 클릭한 다음 테스트 옆에 있는 펼침 삼각형을 클릭하여 이 두 가지 문제를 더 깊이 파고들 수 있습니다.

이 보기는 테스트 실행과 문제에 대한 자세한 분석을 보여줍니다.

첫 번째 문제인 "요소에는 설명이 없습니다."는 이미지 보기에 설명이 없다는 것을 보여주는 요소 스크린샷을 두 번 클릭할 수 있습니다.

나는 두 번째 문제에 대해 비슷하게 할 수 있는데, 이는 텍스트 보기의 라벨이 사람이 읽을 수 없다는 것을 보여준다.

제 감사가 방금 발견한 문제를 처리하는 방법에 대해 잠시 논의해 봅시다.

보조 기술에 의존하는 앱 사용자에게 실제 상호 작용 또는 탐색 문제로 이어질 수 있으므로 각 문제를 개별적으로 탐색하고 해결하는 것이 중요합니다.

필터링되고 무시되어야 하는 문제에 직면할 수 있다는 것을 인정하는 것도 중요합니다.

아마도 그 문제는 거짓 긍정 또는 예상되는 행동일 것이다.

접근성 감사는 이러한 종류의 문제를 쉽게 무시할 수 있게 해준다.

우리는 나중에 대화에서 문제를 무시하는 예시를 다룰 것이다.

접근성의 모범 사례에 대해 자세히 알아보려면, "뛰어난 접근성 경험 제공"이라는 제목의 2018년 강연을 확인하세요.

내 감사에서 발견한 첫 번째 문제를 조사해 봅시다: 텍스트 보기의 접근성 라벨은 사람이 읽을 수 없습니다.

스토리보드에서 텍스트 보기를 검사하면 접근성 라벨이 QUOTE_TEXTVIEW로 설정되어 있음을 알 수 있습니다.

VoiceOver와 같은 보조 기술에 의존하는 사용자는 먼저 접근성 라벨을 듣고, 그 다음에는 이와 같은 접근성 값을 듣게 될 것이다.

VoiceOver: QUOTE_TEXTVIEW, "한 번에 하루씩 살고 그것을 걸작으로 만드세요."

Bhavya: 라벨은 훌륭하게 들리지 않으며, 이상적으로는 VoiceOver를 건너뛰고 인용문 자체만 말해야 합니다.

접근성 라벨을 삭제할 수 있지만, 텍스트 보기를 식별하기 위해 이 라벨에 의존하기 때문에 UI 테스트가 중단될 것입니다.

이상적으로, 이 문자열은 접근성 식별자로 설정되어야 한다.

접근성 식별자를 사용하면 접근성이나 UI 경험에 영향을 미치지 않고 UI 테스트를 작성할 때 요소를 고유하게 식별할 수 있습니다.

내 스토리보드로 갈게.

내 텍스트 보기를 선택하고, 라벨에서 이 문자열을 잘라내고, 식별자에 붙여넣을 것이다.

내 감사에서 발견한 또 다른 문제는 이미지 뷰에 설명이 없다는 것이었다.

일반적으로, 설명적이지만 간결한 라벨로 이미지에 접근할 수 있는 것이 중요하다.

하지만, 내 앱에서, 이것은 장식적인 배경 이미지이다.

그것은 주요 내용의 일부가 아니며 인용문 자체에 추가적인 의미를 추가하지 않는다.

이상적으로, VoiceOver와 같은 기술은 이 이미지 보기를 건너뛰어야 한다.

뷰 컨트롤러의 보기에서 접근성 요소를 재정의하여 이 동작을 달성할 수 있습니다.

인용 텍스트 보기와 새 인용 버튼으로만 설정하면 VoiceOver는 더 이상 이미지 보기에 착륙하지 않습니다.

Xcode로 가서 지금 해보자.

나는 뷰 컨트롤러 파일로 가서 접근성 요소를 설정할 것이다.

굉장해.

내 감사로 돌아가서 내 테스트 케이스를 실행해서 내가 모든 문제를 해결했는지 보자.

좋아. 내 감사는 이제 통과되고 있어.

당신은 내 UI 테스트 중 하나가 지금 실패하고 있다는 것을 알게 될 것이지만, 우리는 나중에 다시 돌아올 것입니다.

접근성 감사를 추가할 때, 필터링해야 하는 문제가 발생할 수 있습니다.

예를 들어, 내 감사가 특정 라벨에서 대비가 너무 낮은 문제를 발견했다고 가정해 봅시다.

조사 후, 대조는 괜찮은 것으로 밝혀졌고, 그 문제는 거짓 긍정인 것 같다.

내가 어떻게 이 문제를 무시할 수 있는지 살펴봅시다.

performAccessibilityAudit 기능은 추가 매개 변수를 사용합니다.

첫 번째 매개 변수를 사용하면 실행하려는 감사 범주의 옵션 세트를 지정할 수 있습니다.

이것들은 동적 유형과 대비와 같은 범주이며, 접근성 검사기에서 이미 익숙한 것과 동일한 범주입니다.

이 예에서, 저는 동적 유형과 대비 문제에 대해서만 감사하기로 선택하고 있습니다.

두 번째 매개 변수는 내가 폐쇄를 지정할 수 있게 해준다.

이 폐쇄는 감사에서 발견된 모든 문제에 대해 요구되며 어떤 문제를 무시하고 어떤 문제를 보고할지 선택할 수 있습니다.

shouldIgnore라는 변수를 false로 정의하는 것으로 시작하겠습니다.

기본적으로, 문제는 무시되어서는 안 된다.

"내 라벨"이라는 라벨이 있는 요소의 대비 문제를 무시하고 싶다고 가정해 봅시다.

Issue.element를 사용하여 문제와 관련된 XCUIElement를 얻을 수 있습니다.

이 요소에 "내 라벨" 라벨이 있고 문제의 유형이 대조 문제라면, 나는 올바른 문제가 있다는 것을 알고 있으므로 shouldIgnore를 true로 설정하겠습니다.

그것을 true로 설정하면 그 문제가 무시되기를 원함을 나타냅니다.

결국, 나는 무시해야 할 것이다.

위의 조건이 충족되지 않으면, shouldIgnore는 거짓이 될 것이며, 이는 문제가 실패로 보고되어야 함을 나타냅니다.

그리고 그게 다야.

이 예제를 확장하고 요소 유형이나 식별자 등 다른 속성을 사용하여 무시하는 기준을 사용자 정의할 수 있습니다.

자신의 앱에 대한 접근성 감사를 작성하기 시작할 때, 다음과 같은 고려 사항을 명심하는 것이 도움이 됩니다.

감사는 화면의 요소로 제한됩니다.

즉, 완전한 커버리지를 제공하기 위해, 앱이 표시할 수 있는 모든 다른 보기에 대한 접근성 감사 테스트를 추가해야 합니다.

샘플 앱의 경우, 두 번째 탭으로 이동하여 감사를 실행하는 다른 테스트를 추가해야 합니다.

여러 테스트에 대한 감사를 즉시 추가하는 빠른 방법은 해체에서 감사를 재정의하고 수행하는 것입니다.

수업 범위에서 변수를 정의할 수 있습니다.

이런 식으로, 테스트는 이러한 변수를 재정의하여 감사를 선택하거나 거부하고 테스트가 문제를 무시하기 위해 폐쇄를 사용자 정의할 수 있도록 할 수 있습니다.

테스트 계획은 프로젝트에서 감사별 테스트를 그룹화하는 훌륭한 방법입니다.

테스트 계획에서 테스트 대상, 사례 또는 개별 방법을 선택적으로 활성화할 수 있습니다.

그리고 마지막으로, 감사는 실제 테스트를 보조 기술로 대체해서는 안 된다.

궁극적으로, VoiceOver 또는 Dynamic Type과 같은 기술을 켜서 앱을 테스트하는 것이 고품질 경험을 보장하는 가장 좋은 방법입니다.

어느 쪽이든 타협하지 않고도 훌륭한 접근성과 훌륭한 테스트를 달성할 수 있습니다.

자동화 요소를 사용하면 이러한 요소의 접근성에 영향을 미치지 않고 자동화 목적으로 특별히 요소를 노출할 수 있습니다.

이제 UIKit에서는 이 API를 활용하여 자동화에 필요한 요소를 정확히 노출할 수 있으며, 동시에 이러한 요소에 대한 접근성을 사용자 정의할 수 있습니다.

당신은 이전에 내가 감사에서 문제를 해결했을 때, 내 UI 테스트 중 하나를 깨뜨렸다는 것을 기억할 것입니다.

이미지 보기는 더 이상 사용할 수 없는 것 같습니다.

접근성에서도 누락되었기 때문에 내 UI 테스트에서 누락되었습니다.

이 이미지 보기는 장식적이었기 때문에, 나는 접근성 요소를 극복하여 접근성에서 제외했다.

그러나, 그렇게 함으로써, 나는 또한 그것이 내 UI 테스트에서 제외되게 했다.

자동화 요소가 내 이미지 뷰를 UI 테스트에 노출하는 데 어떻게 도움이 될 수 있는지 살펴봅시다.

Xcode의 뷰 컨트롤러 파일로 갈게요.

그리고 나는 뷰 컨트롤러의 뷰에서 automationElements를 이미지 뷰로 설정할 것이다.

automationElements를 재정의할 때 자동화에 노출되어야 하는 모든 요소를 지정해야 한다는 것을 명심하세요.

그것은 또한 내 목록에 텍스트 보기와 버튼을 추가해야 한다는 것을 의미한다.

자동화 요소를 재정의할 때, 이미 자동화에 노출된 기존 요소를 재정의하는 것입니다.

테스트 케이스를 실행하여 다시 통과되는지 확인해 봅시다.

굉장해.

우리는 훌륭한 UI와 접근성 테스트를 작성하고 접근성 문제도 해결할 수 있었습니다.

접근성 감사는 앱에 쉽고 자동화된 접근성 테스트를 추가하는 환상적인 방법입니다.

감사에 의해 확인된 문제를 해결하면 모든 사람이 앱을 즐길 수 있도록 도와줍니다.

둘 중 하나를 선택하지 않고도 훌륭한 접근성과 자동화 경험을 만드세요.

자동화 요소를 사용하면 접근성 경험에 영향을 미치지 않고 UI 테스트를 위한 요소를 노출할 수 있습니다.

UI 테스트로 가서 접근성 감사 수행을 위해 빠른 통화를 추가하는 것이 좋습니다.

고마워.