10158

♪ ♪

제이콥: 안녕하세요, 저는 제이콥입니다.

우리가 만드는 UI는 모든 곳에서 변화와 움직임과 함께 더 역동적으로 성장하고 있다.

사람들은 이걸 좋아해.

그것은 인터페이스를 더 생생하게 만들고, 무슨 일이 일어나고 있는지 더 쉽게 이해할 수 있게 하며, UI와 상호 작용하는 데 즐거움을 선사합니다.

그리고 이러한 역동적인 상호 작용을 만들기 위해 함께 오는 많은 것들이 있다.

우리가 한 장면에서 다른 장면으로 이동하는 전환이 있다.

그리고 우리가 장치와 직접 상호 작용하는 제스처가 있다.

그리고 마지막으로, 화면상의 물체가 움직이거나, 성장하거나, 시각적 속성을 변경하는 애니메이션이 있다.

이것들은 모두 함께 작동하며 유동적이고 인터랙티브한 UI를 만드는 데 도움을 준다.

오늘, 우리는 훌륭한 애니메이션을 만드는 데 깊이 빠져들 것이다.

애니메이션의 차이점은 미묘할 수 있지만, 애니메이션이 맞을 때, 사용자는 그것을 느낄 수 있습니다.

그래서 저는 당신의 앱의 애니메이션을 우아하고 자연스럽게 만드는 방법을 당신과 공유하고 싶습니다.

그리고 우리는 강력하고, 다재다능하며, 심지어 재미있는 단 하나의 도구에 초점을 맞출 것입니다: 스프링!

우리는 왜 스프링이 애니메이션에 적합한지 논의하는 것으로 시작할 것이다.

그런 다음 우리는 스프링이 어떻게 작동하는지에 대한 몇 가지 세부 사항을 알아볼 것이다.

그리고 마지막으로, 우리는 앱에서 스프링을 사용하는 방법에 대해 이야기할 것입니다.

그렇다면 왜 스프링이 애니메이션에 유용한가요?

그것에 답하기 위해, 우리는 한 발 물러서서 무엇이 훌륭한 애니메이션을 만드는지 논의해야 한다.

몇 가지 애니메이션이 있는 맥락을 살펴봅시다: 간단한 토글.

이 토글에 집중하자.

우리는 여러 가지 이유로 애니메이션을 사용하지만, 가장 중요한 것 중 하나는 그것이 우리에게 더 나은 연속성을 준다는 것이다.

물체가 한 곳에서 시작해서 갑자기 다른 곳에 나타나면, 거슬리게 느껴지고, 때로는 혼란스러울 수 있다.

물체가 한 곳에서 다른 곳으로 이동하는 것을 보면 훨씬 더 자연스럽게 느껴진다.

하지만 그것은 단지 위치에 관한 것이 아니다.

물체의 속도가 갑자기 바뀌면, 그것도 부자연스럽게 느껴진다.

예를 들어, 토글의 손잡이는 속도 점프로 시작하고 끝나며, 제대로 느껴지지 않습니다.

그래서 우리가 가진 한 가지 목표는 애니메이션이 지속적인 위치와 속도를 갖도록 하는 것이다.

몇 가지 애니메이션 유형을 살펴보고 그들이 그 요구 사항을 어떻게 하는지 봅시다.

그리고 우리의 토글은 완전한 애니메이션의 유용한 예이지만, 나는 손잡이의 움직임에만 집중하고 싶기 때문에, 단 하나의 애니메이션에서 무슨 일이 일어나고 있는지 더 쉽게 볼 수 있다.

안팎으로 쉽게 살펴보는 것부터 시작합시다.

이것은 베지어 곡선 애니메이션의 일종으로, 그 움직임이 곡선과 지속 시간의 조합으로 정의된다는 것을 의미한다.

이 물체의 움직임을 보면, 갑자기 점프하는 것처럼 느껴지지 않는다.

이것이 사실인지 확인하기 위해, 우리는 또한 이 애니메이션의 모션 차트를 검토할 수 있다.

우리는 이 차트들 중 몇 개를 살펴볼 예정이므로, 그것이 무엇을 보여주고 있는지 논의해 봅시다.

수평 축은 시간을 나타내고, 하단 라인은 애니메이션의 초기 위치를 보여주며, 상단 라인은 대상 위치를 보여줍니다.

그리고 우리가 애니메이션을 반복해서 재생하면서, 우리는 이 곡선을 통해 반복적으로 진행할 것이다.

이제 애니메이션을 다시 시작합시다.

차트의 곡선이 어떻게 점프가 없는지 주목하세요, 그것은 그 위치가 연속적이라는 것을 의미합니다.

그리고 속도를 보여주기 위해 차트를 업데이트하면 속도에도 점프가 없다는 것을 확인할 수 있습니다. 따라서 속도도 연속적입니다.

대신 선형 애니메이션의 움직임을 보면, 애니메이션이 시작되고 끝날 때 날카로운 모서리와 속도 점프가 있다.

선형 애니메이션은 반복 회전 표시기와 같은 일부 장소에서 특수 도구로 유용할 수 있지만, 그렇지 않으면 일반적으로 적절하지 않은 비물리적 행동이 있는 움직임에 사용하는 것에 대해 주의해야 합니다.

다음으로, 봄 애니메이션의 연속성을 확인해 봅시다.

우리가 원하는 것처럼, 이것은 지속적인 위치와 속도도 가지고 있다.

지금까지, 쉬운 안팎과 봄 애니메이션은 우리의 최선의 선택이지만, 우리는 애니메이션이 휴식 위치에서 시작하는 경우만 살펴보고 있다.

애니메이션과 함께 제스처를 사용하면 어떻게 되는지 살펴봅시다.

움직일 수 있는 손잡이를 아이패드로 가져가서 손가락으로 드래그합시다.

우리는 이 두 위치 중 하나에 그것을 떨어뜨릴 수 있다.

하지만 우리는 또한 중간 어딘가에서 제스처를 끝내고 손잡이를 한쪽으로 던질 수 있다.

쉬운 안팎의 애니메이션으로, 그것은 끝까지 애니메이션되지만, 제스처가 끝날 때 움직임이 멈춘다.

이러한 유형의 애니메이션은 미리 지정된 곡선일 뿐이므로, 초기 속도를 나타낼 방법이 없습니다.

우리가 손잡이를 2차원의 어떤 위치로든 드래그할 수 있다면 이것은 더욱 악화된다.

이것을 다시 시도해 봅시다, 하지만 봄 애니메이션으로.

봄은 어떤 초기 속도로도 시작할 수 있으므로, 우리는 제스처가 끝나는 바로 그 곳에서 애니메이션이 포착되는 자연스러운 느낌을 받는다.

그리고 이것은 또한 2차원 드래그에 잘 작동한다.

SwiftUI는 이제 제스처가 속성을 변경할 때마다 속도를 자동으로 추적하므로 추가 작업 없이 이 동작을 얻을 수 있습니다.

따라서 스프링은 정적 사례와 초기 속도를 가진 사례 모두에서 연속성을 유지하는 유일한 유형의 애니메이션이다.

우리가 조사할 수 있는 스프링의 다음 이점은 그들의 움직임의 모양이다.

봄의 움직임을 들을 때, 당신은 이런 것을 생각하고 있을지도 모릅니다.

하지만 봄 애니메이션은 탄력 있는 애니메이션만을 의미하는 것이 아니다.

스프링이 바운스를 가질 수 있고, 훌륭한 도구가 될 수 있다는 것은 사실이지만, 그것이 우리가 스프링을 사용하는 주된 이유는 아니다.

나중에, 우리는 바운스가 있는 스프링을 사용하는 것이 언제 말이 되는지 살펴볼 것이지만, 바운스가 없는 스프링도 좋습니다!

이러한 유형의 튀지 않는 스프링은 iOS 전역의 애니메이션에 사용됩니다.

그래서 만약 그것이 단지 바운스에 관한 것이 아니라면, 봄의 움직임에 대해 무엇이 그렇게 좋은가요?

간단한 봄 애니메이션을 다시 살펴보고, 애니메이션이 어떻게 끝나는지 주목합시다.

그것은 매우 천천히 그리고 서서히 휴식을 취한다.

물체가 갑자기 완료될 때 단일 지점은 없다.

이것은 이것이 움직이고 멈추는 물체인지 우리가 볼 것으로 예상했던 것과 훨씬 더 비슷하게 느껴진다.

그리고 이 버전이 우리에게 더 자연스럽게 느껴지는 이유가 있다.

봄 애니메이션은 물리적 세계에서 봄에 부착된 물체의 행동을 기반으로 하므로, 그것이 움직이는 것을 볼 때 우리의 눈에 더 자연스럽고 믿을 수 있게 느껴진다.

이제 당신은 스프링으로 움직이는 다른 속성이 다른 시간에 끝날 수 있다는 것을 들었을 것입니다.

타이밍 곡선 애니메이션에 익숙하다면, 이것은 이상하게 느껴질 수 있습니다.

우리는 모든 애니메이션이 동시에 시작되고 멈추기를 원하지 않나요?

대답은 아니오야!

우리는 우리의 애니메이션이 우리가 익숙한 물리적 세계에서 물체의 움직임처럼 느껴지기를 원한다.

그리고 일반적으로, 이것들은 마찰에 의해 느려지기 때문에 그들 자신의 시간에 시작하고 멈추기 때문에, 이 시간은 보통 완벽하게 정렬되지 않는다.

사실, 다중 속성 애니메이션을 위해 더 나아가는 것은 때때로 유용하다.

여기 iOS에서 실행되는 앱의 애니메이션이 있습니다.

언뜻 보기에, 그것은 단지 하나의 균일한 애니메이션처럼 보일 수 있지만, 우리가 애니메이션의 속도를 늦추면, 당신은 어떻게 다른 봄, 다른 시작 시간, 그리고 다른 종료 시간이 함께 모여 놀랍고 자연스럽게 느껴지는 애니메이션을 형성하는지 알 수 있습니다.

이제 스프링이 왜 애니메이션을 위한 훌륭한 도구인지 알았으니, 스프링이 어떻게 작동하고 어떻게 가장 잘 사용하는지 이해하기 위해 스프링을 더 자세히 살펴봅시다.

우리가 스프링 애니메이션을 사용할 때, 우리는 스프링에 부착된 물체의 움직임으로 모델링하고 있다.

우리가 물리학으로 돌아가면, 이 움직임은 3가지 속성으로 정의된다: 물체의 질량, 스프링의 강성, 그리고 시스템의 감쇠, 이는 주변 환경에 의해 물체에 얼마나 많은 마찰이 가해지는지에 대한 척도이다.

그런 다음 우리는 애니메이션의 초기 위치를 물체의 초기 위치로 사용하고, 애니메이션의 목표 위치를 사용하여 물체가 당겨질 스프링의 휴식 위치를 정의합니다.

그러면 우리는 애니메이션을 시작하기 위해 물체를 놓을 수 있다.

스프링 시스템을 정의하는 데 사용하는 속성은 발생하는 움직임의 유형을 결정하고, 변경하면 결과 애니메이션이 변경됩니다.

따라서 스프링 애니메이션을 만들 때, 질량, 강성 및 댐핑의 동일한 특성을 사용하여 어떤 종류의 스프링을 사용할지 구성할 수 있습니다.

하지만 이것들은 물리적 시스템을 모델링하는 자연스러운 방법이지만, 봄 애니메이션을 정의하는 데는 그다지 직관적이지 않다.

여기에는 질량이 있는 실제 물체나 강성이 있는 스프링이 없으며, 곡선을 바꾸기 위해 이러한 값을 구성하는 것은 쉽지 않다.

그래서 우리는 이해하기 쉽고 작업하기 쉬운 스프링을 구성하는 새로운 방법을 개선하고 있습니다.

그것은 단지 두 가지 매개 변수를 사용한다: 지속 시간과 바운스.

이것들은 당신이 기대하는 것을 하며, 지속 시간을 늘리면 애니메이션이 더 오래 걸립니다.

그리고 바운스를 늘리면 애니메이션에 바운스가 추가됩니다.

그리고 우리는 애플의 설계 및 엔지니어링 노력 전반에 걸쳐 이것들을 보편적으로 채택하고 있다.

그래서 스프링을 지원하는 우리의 모든 프레임워크는 그것들을 사용할 것이다.

이 스프링 매개 변수를 가지고 놀 때, 곡선에서 다양한 유형의 모양을 볼 수 있습니다.

바운스가 0보다 클 때, 우리는 목표를 초과하는 탄력 있는 스프링을 얻는다.

바운스가 0일 때, 우리는 긴 꼬리가 점차 목표를 향해 가는 이 부드러운 곡선을 얻는다.

그리고 또 다른 종류의 봄도 있다.

이것은 흔하지 않지만, 부정적인 바운스 값으로, 당신은 점차적으로 목표에 접근하는 긴 꼬리를 가진 스프링을 얻을 수 있지만, 그것은 0의 바운스로 얻는 것보다 조금 더 아첨합니다.

스프링의 물리학에서, 이것들은 저압, 비판적으로 감쇠되고, 과도하게 감쇠된 스프링이라고 불린다.

하지만 나는 그것들을 탄력 있고, 매끄럽고, 평평하다고 생각하는 것을 좋아한다.

그리고 눈치채셨겠지만, 이 바운스 값은 퍼센트이므로, 탄력 있는 스프링은 최대 100%의 바운스 값을 가지고 있고 평평한 스프링은 0에서 -100% 사이의 바운스 값을 가지고 있습니다. 이제 저는 이 스프링을 조금 더 파고들고 싶습니다.

스프링은 때때로 약간 위협적으로 보일 수 있으며, 그들의 움직임은 이해하기 어려워 보일 수 있다.

하지만 우리가 무슨 일이 일어나고 있는지 분석한다면, 그것은 실제로 몇 가지 간단한 것들을 함께 결합하는 것이다.

나를 위해, 이 곡선 뒤에 있는 수학을 이해할 수 있다는 것은 스프링을 더 친근하게 만드는 데 도움이 되므로, 나는 그것을 당신과도 공유하고 싶다.

하지만 수학이 당신의 머리를 회전시킨다면, 걱정하지 마세요, 그것은 완전히 선택 사항입니다.

우리는 당신을 위해 이 모든 수학을 구현합니다.

그러니 탄력 있는 곡선으로 시작합시다.

당신은 이 봄의 오버슛이 더 복잡한 종류의 사인 또는 코사인 파동처럼 진동한다는 것을 알 수 있습니다.

그리고 우리가 이번 봄의 바운스를 최대 값인 100%까지 가져간다면, 이제 그것이 정확히 앞뒤로 진동하는 코사인 파동의 행동이라는 것을 알 수 있습니다.

이것에 대한 물리적 해석은 마찰이 작용하지 않는 스프링이기 때문에 속도를 늦추지 않고 영원히 진동하며 실제로 목표 위치에 도달하지 못한다는 것이다.

당신이 예상했듯이, 이것에 대한 수학은 꽤 간단합니다: 그것은 단지 코사인 곡선이며, 시간은 기간으로 나뉩니다.

그래서 이 바운스 값의 경우, 지속 시간은 곡선의 기간에 정확히 해당한다.

우리가 바운스를 줄이면서, 그것은 물리적으로 스프링에 마찰이나 감쇠를 추가하는 것과 동일하며, 이는 스프링이 진행됨에 따라 속도를 늦춘다.

그리고 우리는 여전히 그 진동을 가지고 있다.

사실, 이전의 코사인 곡선은 여전히 거기에 있으며, 위에 겹쳐서 그리면 더 분명하다.

이것은 이전과 같은 방정식이며, 상수가 다르고 수평으로 약간 이동했다.

그래서 이것은 곡선의 탄력성을 설명하지만, 분명히 우리는 다른 것도 필요하다.

원래 곡선에서, 진동의 크기는 시간이 지남에 따라 점점 작아지거나 쇠퇴하고 있다.

그리고 그게 빠진 부분이야.

이 추가 곡선은 기하급수적 붕괴 곡선이다.

그리고 그것은 우리의 움직임의 마지막 부분이며, 우리에게 휴식을 취하는 점진적인 느낌을 주는 부분이다.

그래서 복잡한 곡선처럼 보였던 것은 감쇠된 코사인 또는 사인파라고 불리는 이 두 구성 요소의 산물일 뿐이다.

그것은 꽤 만족스럽지만, 차트를 자세히 살펴보면, 조금 이상하게 보일 수 있는 한 가지가 있습니다: 왜 우리의 코사인 곡선은 이제 처음에 이 하락을 가지고 있습니까?

이것은 우리가 앞서 논의한 것과 관련이 있다: 속도 보존.

이 기본 사례의 경우, 우리는 처음에 0의 속도를 유지해야 한다는 것을 기억하세요.

그래서 우리의 두 구성 요소 곡선의 곱의 속도는 0 주변에서 평평해야 한다.

하지만 우리의 붕괴 곡선은 위쪽을 가리키는 경사로 시작한다는 것을 주목하세요.

만약 우리가 코사인 곡선을 평평하게 시작한다면, 우리의 초기 속도도 위쪽을 가리킬 것이다.

그래서 우리의 코사인 곡선은 붕괴를 상쇄하고 우리에게 평평한 시작을 주기 위해 아래쪽을 가리키기 시작해야 한다.

그리고 이것이 스프링이 우리에게 올바른 시작을 제공하기 위해 코사인 곡선에서 다른 시프트와 스케일을 사용하여 초기 속도와 일치할 수 있는 방법입니다.

이 초기 속도는 우리가 앞서 논의한 것처럼 제스처가 끝날 때 제스처의 속도에서 나올 수 있다.

그리고 이 초기 속도가 올 수 있는 또 다른 장소가 있다.

아이패드로 살펴봅시다.

여기서, 우리는 탭하여 손잡이를 움직이고, 목표 위치에서 손잡이의 희미한 이미지를 보여줄 수 있습니다.

우리는 또한 더 느린 봄을 사용할 것이므로 무슨 일이 일어나고 있는지 더 쉽게 추적할 수 있습니다.

때때로, 애니메이션이 아직 끝나지 않은 동안, 새로운 목표 값으로 변경되는 새로운 애니메이션이 시작됩니다.

그런 일이 일어날 때, 스프링 애니메이션은 새로운 목적지를 향한 초기 속도로 리타겟팅되었을 때의 속도를 사용하며, 이 동일한 속도 보존은 이러한 종류의 중단을 매끄럽고 자연스럽게 느끼게 한다.

그래서 그것이 속도 보존과 탄력 있는 스프링이 작동하는 방식이다.

이제 우리가 바운스를 줄이면, 진동은 점점 더 멀어지고, 바운스가 0이 될 때까지, 진동은 완전히 사라지고 우리는 우리의 부패에 의해 곱해지고 있는 직선이 있다.

그래서 이 방정식들은 훨씬 더 간단하다.

우리는 단지 선의 기본 방정식이 필요하고, 그런 다음 동일한 지수를 곱하여 결과 곡선을 제공합니다.

음의 바운스가 있는 스프링인 평평한 곡선은 매우 유사하게 작동하지만, 선 대신 함께 추가된 두 개의 지수 함수를 사용한다.

이러한 유형의 스프링은 덜 일반적이지만, 기하급수적인 붕괴로 표현된다는 사실은 스크롤 뷰에서 일어나는 것과 같이 붕괴 속도를 모델링하는 데 유용하다.

애니메이션에 스프링을 사용할 때 궁금할 수 있는 한 가지는: 봄 애니메이션이 실제로 끝날 때까지 얼마나 걸리나요?

우리가 보았듯이, 그 질문은 약간 미묘하다.

봄의 기하급수적인 붕괴는 기술적으로 점점 더 작은 움직임으로 영원히 움직인다는 것을 의미한다.

물론, 우리는 봄 애니메이션이 영원히 지속되는 것을 원하지 않기 때문에, 더 이상 UI에 눈에 띄는 변화에 기여하지 않을 때 그것을 제거할 시간을 선택해야 합니다.

봄 애니메이션이 제거할 만큼 충분히 끝날 때까지의 시간을 정착 기간이라고 한다.

이 정착 기간은 스프링을 구성하기 위한 기간 매개 변수와 다릅니다.

정착 기간은 많은 다른 요인에 따라 달라지므로 약간 예측할 수 있지만, 기간 매개 변수는 봄 변화의 다른 매개 변수와 마찬가지로 예측 가능하고 움직이지 않도록 선택된 지각 기간이다.

예측할 수 없는 특성 때문에, 사용자 대면 변경을 위한 정착 기간을 기다려서는 안 됩니다.

스프링이 대부분 완료되었을 때 UI를 변경하고 싶다면, 정착 기간 대신 지각 기간을 사용하는 SwiftUI의 새로운 완료 핸들러 지원을 사용할 수 있습니다.

이제 스프링이 어떻게 작동하는지 모두 알았으니, 코드에서 스프링을 사용하는 것에 대해 논의해 봅시다.

스프링은 애니메이션을 위한 훌륭한 도구이기 때문에, 우리는 이제 그것들을 SwiftUI의 기본 애니메이션으로 사용하므로, 스프링으로 시작하기 위해 withAnimation을 호출하기만 하면 됩니다.

우리는 또한 애니메이션을 위해 스프링을 명시적으로 사용하는 것을 더 쉽게 만들었습니다.

우리는 iOS에서 사용되는 스프링 값을 기반으로 몇 가지 스프링 프리셋을 만들었습니다.

어떤 스프링 매개 변수를 사용해야 할지 잘 모르겠다면, 이것들은 기분 좋은 것을 얻을 수 있는 좋은 방법입니다.

애니메이션이 필요할 때 사전 설정을 직접 사용하여 코드에서 사용할 수 있습니다.

하지만 스프링 애니메이션을 사용하는 중요한 부분은 필요한 정확한 컨텍스트에 맞게 조정하는 것이므로, 이러한 사전 설정은 조정 가능한 시작점으로도 사용할 수 있습니다.

사전 설정을 취하고 지속 시간이 달라야 한다고 지정하거나, 추가할 상대적인 양의 추가 바운스를 지정하여 조금 더 많거나 적은 바운스를 줄 수 있습니다.

이 프리셋은 앱에 스프링을 도입하기 시작하는 좋은 방법입니다.

하지만 더 나아가고 싶다면, .spring 애니메이션으로 완전히 맞춤형 스프링을 만들 수도 있습니다.

이를 통해 봄의 지속 시간과 바운스를 완전히 지정할 수 있습니다.

그리고 이 바운스 값은 -1.0에서 1.0까지의 범위를 가지고 있다.

또한 동일한 매개 변수를 사용하여 UIKit 및 Core Animation에서 봄 애니메이션을 만들 수 있습니다.

더 나아가고 싶다면 사용할 수 있는 또 다른 새로운 봄 도구가 있습니다.

매개 변수를 포함하여 스프링의 표현을 만들 수 있는 스프링 모델 유형을 SwiftUI에 추가했습니다.

이를 통해 매개 변수를 프로그래밍 방식으로 변환하여 지정할 수 있습니다.

질량, 강성 및 댐핑과 같은 일련의 매개 변수로 스프링 모델을 만든 다음 스프링 애니메이션으로 직접 사용할 수도 있습니다.

하지만 당신이 정말로 스스로 변환을 하고 싶다면, 여기 바운스와 지속 시간 값에서 질량, 강성 및 댐핑으로 변환하는 세 가지 방정식이 있습니다.

매개 변수를 변환하는 것 외에도, 스프링 모델을 사용하여 자신만의 고급 스프링 동작을 구축할 수 있습니다.

봄에 메소드를 호출하여 스스로 봄 평가 수학을 얻을 수 있습니다.

예를 들어, 스프링의 위치를 얻기 위해 값을 호출할 수 있습니다.

당신은 봄이 향하고 있는 목표, 그리고 당신이 그것을 평가하고 싶은 시간을 통과합니다.

또한 속도 방법에서 동일한 입력을 사용하여 시간이 지남에 따라 스프링의 속도를 평가할 수 있습니다.

이를 통해 시뮬레이션에 유용할 수 있는 자체 코드에서 스프링을 쉽게 사용하거나 이 세션의 것과 같은 차트 값을 얻을 수 있습니다.

이것을 사용하여 자신만의 사용자 지정 애니메이션을 만들 수도 있습니다.

스프링 모델을 호출하면 입력이나 출력을 수정하여 스프링 애니메이션에 사용자 지정을 적용할 수 있습니다.

SwiftUI 애니메이션을 탐색하여 사용자 지정 애니메이션 제작에 대한 자세한 내용을 알아보세요.

제가 마지막으로 논의하고 싶은 것은 스프링에 사용할 매개 변수를 선택하는 방법입니다.

애니메이션에 적합한 값을 선택하려면, 일반적으로 당신이 좋아하는 페이스를 제공하는 지속 시간 값을 찾는 것으로 시작하는 것이 가장 좋습니다.

일단 당신이 그것을 결정하면, 당신은 이 애니메이션이 어떤 종류의 캐릭터와 느낌을 갖고 싶은지 선택하기 위해 바운스의 양을 조정하기 시작할 수 있습니다.

당신은 다른 바운스 가치가 질적으로 다르게 느껴진다는 것을 알게 될 것입니다.

0의 바운스는 매끄럽고 점진적인 변화처럼 느껴진다.

약 15%와 같은 작은 바운스는 아직 탄력이 느껴지지 않지만, 긴 꼬리는 조금 더 활발하게 느껴진다.

그리고 30%와 같은 더 큰 바운스 값의 경우, 당신은 눈에 띄는 탄력을 느끼기 시작합니다.

만약 당신이 더 멀리 간다면, 당신은 꽤 극도의 탄력을 얻을 수 있습니다.

하지만 UI 요소에 대해 너무 과장된 것처럼 느껴질 수 있기 때문에 약 0.4보다 높은 값을 사용하는 것에 대해 주의해야 합니다.

그래서 실제로 어떤 바운스 값을 사용해야 하나요?

확실하지 않을 때, 바운스 0이 있는 스프링을 사용하세요. 바운스를 지정하지 않으면 얻을 수 있는 것입니다.

이것은 당신에게 가장 다재다능한 훌륭한 범용 스프링을 제공합니다.

그런 다음 애니메이션이 좀 더 장난스럽게 느껴지기를 원한다면, 바운스를 추가할 수 있습니다.

바운스는 또한 제스처가 끝날 때 사용될 것인지와 같이 애니메이션이 더 육체적으로 느껴지기를 원할 때 의미가 있을 수 있습니다.

그리고 당신이 명심해야 할 한 가지는 일관성입니다.

당신의 앱이 어떤 종류의 캐릭터를 가지고 있는지 생각해 보세요.

심각해 아니면 장난기 많아?

편안하게 느껴야 하나요 아니면 빠르게 진행해야 하나요?

그것은 당신이 그들 주변의 UI의 느낌과 일치하는 봄 가치를 선택하는 데 도움이 될 수 있습니다.

그래서 그것은 애니메이션을 위해 스프링을 사용하는 빠른 투어이다.

봄은 훌륭한 애니메이션을 만들기 위해 튕겨낼 필요가 없다는 것을 기억하세요.

훌륭한 출발점인 새로운 스프링 프리셋 세트도 있지만, 지속 시간과 바운스를 사용하여 더 나아가야 할 때 사용자 정의할 수 있습니다.

그리고 가장 중요한 것은, 스프링이 가진 모든 독특한 장점을 본 후, 스프링 애니메이션을 사용하여 앱을 유동적이고 즐겁게 사용할 수 있게 되어 기쁘기를 바랍니다.

고마워.

♪ ♪