10252

♪ ♪

Kevin Cathey: 안녕하세요, 제 이름은 Kevin이고, 저는 Previews에서 일하고 있습니다.

소프트웨어, 특히 앱을 구축하는 것은 정말 반복적이고 창의적인 과정이므로, 코드를 테스트하고 당신이 만들고 있는 것을 경험할 수 있는 가장 빠른 방법을 원합니다.

그것이 우리가 미리보기를 만든 이유입니다; 그래서 당신은 창의성에 집중할 수 있도록 거의 즉각적인 시각적 피드백을 받을 수 있습니다.

그리고 미리보기는 유연하게 만들어졌다.

다양한 종류의 보기, 데이터 및 장치로 전체 앱에서 사용할 수 있습니다.

미리보기를 처음 접하든, 한동안 사용해 왔든, 저는 당신이 그것들을 최대한 활용할 수 있도록 돕고 싶습니다.

우리는 이것을 세 부분으로 할 것이다.

먼저, 우리는 미리보기가 무엇인지 검토할 것이다.

그들이 어떻게 작동하는지 그리고 그들이 프로젝트의 나머지 코드와 어떻게 관련되는지 조금 이해하는 것이 도움이 됩니다.

둘째, 미리보기를 위한 콘텐츠를 제공할 수 있는 두 가지 방법이 있습니다: 보기와 위젯.

이것들과 Xcode에서 독특한 워크플로우를 작성하는 방법을 보여드리겠습니다.

그리고 마지막으로, 프로젝트에서 미리보기를 채택하기 시작할 때, 당신이 직면하게 될 몇 가지 일반적인 시나리오나 질문이 있습니다.

당신의 프로젝트에서 더 많은 미리보기를 하는 데 도움이 되는 몇 가지 팁과 요령을 드리고 싶습니다.

시작하자.

그래서 미리보기가 뭐야?

미리보기는 뷰를 만들고 구성하는 코드의 스니펫이다.

그것들은 소스 파일의 최상위 수준에서 작성되며, 이는 어떤 유형이나 기능도 중첩되지 않는다는 것을 의미합니다.

그리고 그들은 말 그대로 이렇게 간단할 수 있다.

#Preview 매크로를 사용하고, 보기를 반환합니다.

미리보기는 나머지 앱 코드 및 리소스와 함께 앱으로 컴파일됩니다.

미리보기는 이러한 기호와 리소스에 액세스할 수 있기 때문에, 미리보기는 정말 유연합니다.

앱의 모든 보기에 대한 미리보기를 설정하는 데 필요한 모든 것을 할 수 있으며 Xcode의 캔버스에 바로 표시됩니다.

하지만 미리보기는 또한 더 빨리 반복하는 것에 관한 것이다.

프로젝트에서 Swift 코드를 편집할 때, Xcode는 자동으로 두 가지 일을 할 것입니다.

먼저, 그것은 당신이 만든 변경 사항을 검토하고 최소한의 코드를 다시 컴파일할 것입니다.

그리고 나서, 두 번째로, 미리보기를 다시 실행하세요.

즉, 코드를 작성하고 반복하는 데 집중할 수 있으며, Xcode는 미리보기를 자동으로 빌드, 실행 및 업데이트합니다.

그리고 미리보기가 정의되면, Xcode는 추가 코드를 작성할 필요 없이 다른 컨텍스트에서 미리보기를 자동으로 실행할 수 있습니다.

예를 들어, 다크 모드 또는 다른 유형 크기와 방향에서 테스트할 수 있습니다.

이것은 완벽한 비유는 아니지만, 테스트와 유사한 미리보기를 생각하는 것이 도움이 될 수 있다.

테스트와 마찬가지로, 미리보기는 실제 프로젝트에서 실제 코드를 실행합니다.

우리는 코드를 모방하거나 해석하지 않습니다.

이것은 당신이 테스트하고 미리 보고 있는 것이 당신의 앱을 사용할 사람들도 경험할 것을 나타낸다는 확신을 가지고 있다는 것을 의미합니다.

둘째, 테스트와 미리보기 작성에 투자하면, 궁극적으로 더 빨리 개발하는 데 도움이 됩니다. 조금이라도 먼 길을 갈 수 있다.

셋째, 앱의 다른 레이어를 테스트하고 미리 볼 수 있습니다.

예를 들어, 테스트를 통해 앱 기능의 상당 부분을 수행하는 높은 수준의 UI 테스트를 할 수 있으며, 개별 구성 요소를 테스트하는 더 작은 단위 테스트를 할 수 있습니다.

마찬가지로, 많은 애플리케이션을 포함하는 뷰에 대한 미리보기를 가질 수 있으며, 개별 리프 뷰를 보여주는 미리보기를 가질 수 있습니다.

그것은 미리보기가 어떻게 작동하는지에 대한 빠른 시각이다.

다음으로, 그것들을 작성하는 방법과 미리 볼 수 있는 콘텐츠의 종류에 집중합시다.

미리보기에 관계없이, 당신이 정의하는 모든 미리보기는 세 조각으로 동일한 기본 모양을 가지고 있습니다.

먼저, 소스 파일의 최상위 수준에서 미리보기 매크로 이니셜라이저로 시작하세요.

그런 다음, 콘텐츠의 하나 이상의 후행 폐쇄를 반환하세요.

이것은 당신이 미리 보고 싶은 시나리오에 대해 UI를 구성할 수 있는 곳입니다.

그리고 그것이 미리보기를 만드는 데 필요한 전부이지만, 선택적으로 더 많은 유연성을 위해 미리보기 자체를 구성할 수도 있습니다.

이름을 지정할 수 있으며, 미리보기의 내용에 따라 이니셜라이저에서 추가 구성이 필요하거나 전달하고 싶을 수 있습니다.

우리는 이것의 몇 가지 예를 살펴볼 것이다.

미리 볼 수 있는 콘텐츠의 종류에 대해 이야기해 봅시다.

두 가지 주요 종류가 있습니다: 뷰와 위젯.

뷰는 SwiftUI, UIKit 또는 AppKit에서 나올 수 있습니다.

SwiftUI의 경우, 작업 중인 보기를 반환하기만 하면 됩니다.

하지만 당신은 당신이 작업하고 있는 뷰를 그냥 지나칠 필요가 없습니다; 당신은 당신이 필요로 하는 다른 뷰에 그것을 배치할 수 있습니다.

그리고 이것은 종종 더 넓은 맥락에서 관점으로 작업하기를 원하기 때문에 도움이 됩니다.

예를 들어, 항상 목록에 있는 것으로 의도된 견해.

이곳은 또한 미리보기 중인 뷰가 필요한 경우 환경을 통해 데이터를 제공하는 수정자를 첨부할 수 있는 장소이기도 합니다.

미리보기는 앱의 최상위 수준에서 정의한 장면과 비슷합니다.

장면은 앱의 진입점 역할을 합니다.

당신은 데이터를 설정하고 당신의 견해를 전달합니다.

미리보기는 같은 목적을 제공하므로 미리보기를 사용하여 데이터와 자산을 설정한 다음 미리보기 중인 보기로 전달할 수 있습니다.

미리보기를 구성할 때, 이름을 지정할 수 있습니다.

그리고 SwiftUI와 같은 뷰 기반 미리보기는 하나 이상의 구성 특성을 가변 인수 목록으로 전달하는 것을 지원합니다.

예를 들어, 미리 보고 있는 장치의 시작 방향을 설정할 수 있습니다.

API의 모양은 UIKit과 AppKit에서 동일합니다.

SwiftUI 보기 대신, 보기 컨트롤러를 만들고 필요에 따라 구성하세요.

뷰 컨트롤러 외에도 UIView 또는 NSView를 직접 미리 볼 수도 있습니다.

그래서 당신이 무엇을 만들려고 하는지에 따라 많은 유연성이 있습니다.

미리보기를 사용하는 방법과 미리보기를 매우 유연하게 만드는 몇 가지 도구를 사용할 수 있도록 우리가 지금까지 이야기한 것을 보여주고 싶습니다.

나는 이미지 콜라주를 만드는 앱을 쓰는 중이야.

사진을 고를 수 있고, 레이아웃을 고를 수 있고, 필터를 추가할 수 있다.

Xcode로 가서 미리보기 캔버스의 기능을 살펴봅시다.

나는 이미지에 필터를 추가할 수 있는 뷰를 쓰기 시작했다.

이 뷰를 반복하는 데 도움이 되도록, 미리보기가 필요합니다.

시작하려면, 편집기의 오른쪽 상단으로 가서 옵션 메뉴를 클릭하여 캔버스 모드가 활성화되었는지 확인하겠습니다.

캔버스 모드는 새 프로젝트에 대해 기본적으로 활성화되어 있지만, 기존 프로젝트가 있다면, 이것을 켜야 할 수도 있습니다.

하지만 캔버스 모드가 활성화되어 있어도, 파일에 정의된 미리보기가 없는 한 캔버스는 숨겨져 있으므로, 하나를 추가해 봅시다.

내가 #Preview를 입력하기 시작할 때, Xcode는 나에게 미리보기를 제안한다.

완료를 수락하면, Xcode는 미리보기를 빌드하고 실행하며, 내 보기는 캔버스에 바로 나타납니다.

내 관점에서 작업하는 데 사용할 수 있는 세 가지 모드가 있다.

이것들은 캔버스의 왼쪽 하단 모서리에 나타난다.

첫 번째 및 기본 모드는 라이브 또는 인터랙티브 모드입니다.

나는 이 슬라이더를 드래그하는 것처럼 캔버스에서 내 뷰와 상호 작용할 수 있기 때문에 대부분의 시간을 이 모드에서 보낸다.

애니메이션을 테스트할 수도 있고 비동기 코드를 호출하고 응답할 수도 있습니다.

두 번째 모드는 선택 또는 정적 모드이다.

이 모드는 내 뷰의 스냅샷을 취하고 캔버스의 요소와 상호 작용할 수 있게 해준다.

보기를 클릭하면 소스 편집기에서 만든 코드 줄이 강조 표시됩니다.

그리고 이 라벨과 같은 특정 텍스트 보기를 두 번 클릭하면 초점이 소스 편집기로 이동되어 빠르게 변경할 수 있습니다.

비네트는 더 간결한 라벨이다.

환경에 대해 이야기해 봅시다.

즉, 미리보기 환경이다.

캔버스는 라이트 모드에서 미리보기를 보여주고 있지만, 다크 모드에서 보고 싶다면 어떻게 해야 하나요?

색 구성표를 설정하기 위해 코드를 편집할 수 있지만, 종종 어두운 모드에서 빠르게 확인하고 몇 가지 조정을 하고 싶습니다.

대신 캔버스에서 장치 설정 팝오버를 사용할 것입니다.

하단 표시줄에서, 컨트롤 아이콘을 클릭하여 설정을 불러옵니다.

이제 다크 모드나 특정 동적 유형 크기를 활성화할 수 있습니다.

하지만 두 색 구성표에서 내 견해가 동시에 어떻게 생겼는지 보고 싶다면 어떨까요?

음, 이를 위해, 나는 미리보기의 세 번째 모드를 사용할 것이다: 변형.

캔버스 하단의 변형 모드를 클릭하면, 색 구성표 또는 모든 동적 유형 크기와 같은 모든 값을 보고 싶은 장치 설정을 선택할 수 있습니다.

나는 그것을 클릭하여 개별 변형을 검사할 수 있고, 그런 다음 각 변형을 훑어볼 수 있다.

흠.

내가 이 더 큰 다이나믹 타입 사이즈에 도달하면, 내 시야는 정말 무너지기 시작해, 그렇지 않니?

고치자.

VStack 대신, 나는 컨트롤 그룹에 완벽한 양식을 사용할 것이다.

그리고 컨트롤이 섹션에 배치될 때 양식이 멋지게 보입니다.

각 HStack을 섹션으로 만들자.

멀티커서 편집을 활용하여 모든 HStack 인스턴스에서 이러한 변경을 할 수 있습니다.

첫 번째 HStack을 선택한 다음 Command-Option-E를 눌러 HStack의 각 인스턴스에 대한 커서를 찾아 삽입합니다.

나는 이것들 각각을 섹션으로 바꿀 것이다.

나는 또한 두 번째 후행 폐쇄에서 제공되는 각 섹션에 대한 헤더를 원한다.

화살표를 아래로 화살표하고 추가 후행 폐쇄를 추가하세요.

이 헤더에 이미 가지고 있는 라벨을 사용합시다.

라벨로 다시 올라가서 Command-Option-Right Brace를 눌러 라벨을 헤더로 아래로 이동하십시오.

그리고 와, 우리 전망이 훨씬 좋아 보여.

이러한 동일한 기능은 모두 AppKit 및 UIKit 뷰 및 뷰 컨트롤러에서도 잘 작동합니다.

CoreImage를 사용하여 필터를 렌더링하는 뷰 컨트롤러로 탭을 전환하고 캔버스를 다시 라이브 모드로 전환하겠습니다.

이제, 저는 이미 이 뷰 컨트롤러에 대한 미리보기를 만들었고, SwiftUI와 정말 비슷해 보입니다.

미리보기 매크로에서, 나는 뷰 컨트롤러를 만들고 샘플 이미지를 전달했다.

하지만 필터를 적용하여 이 이미지를 테스트하고 싶기 때문에, 뷰 컨트롤러에 필터를 전달하는 코드를 추가하겠습니다.

그리고, 아, 꽃과 비네팅. 절대 늙지 않아.

뷰 컨트롤러를 구성하는 것 외에도 미리보기를 구성할 수도 있습니다.

모든 미리보기는 첫 번째 인수로 선택적 이름을 가질 수 있습니다.

그리고 SwiftUI와 UIKit과 같은 보기 미리보기를 사용하면 이름 뒤에 가변 목록에 하나 이상의 특성을 추가할 수 있습니다.

예를 들어, 가로에서 시작하도록 미리보기를 설정할 수 있습니다.

그것은 글쓰기 뷰 프리뷰의 빠른 투어이다.

미리 볼 수 있는 콘텐츠의 두 번째 주요 범주는 위젯입니다.

위젯은 미리보기가 얼마나 빠를 수 있는지 정말 강조한다.

미리 볼 수 있는 두 종류의 위젯이 있습니다.

첫째, 개별 항목을 생성하는 타임라인 공급자를 사용하는 위젯.

Xcode에서는 전체 타임라인 공급자를 미리 보거나 미리보기에서 자신만의 항목 타임라인을 만들 수 있습니다.

Xcode로 가서 이들 각각의 예를 봅시다.

내 이미지 콜라주 앱에는 매 시간마다 무작위로 만들어진 콜라주를 보여주는 타임라인 공급자가 있는 위젯이 있다.

내 타임라인 제공자를 위해, 나는 세 가지로 미리보기를 만들 것이다: 첫째, 내가 미리 보고 싶은 위젯.

둘째, 타임라인 제공자.

그리고, 셋째, 미리보기에 사용할 위젯 제품군.

그것은 소량의 코드이지만, Xcode에서 훌륭한 워크플로우를 제공합니다.

이 위젯은 매 시간마다 무작위 콜라주를 만들 것이지만, 타임라인의 모든 항목을 보기 위해 한 시간을 기다릴 필요가 없습니다.

각 타임라인 항목을 스냅샷으로 미리 보고 캔버스에 표시합니다.

나는 그것들을 클릭하거나 화살표 키를 사용할 수 있다.

그리고 내가 할 때, Xcode는 내 위젯과 통신하고 이러한 항목 사이의 애니메이션으로 전환을 보여 주므로, 사용자 인터페이스뿐만 아니라 타임라인의 다른 지점 간의 변경 사항을 발견할 수 있습니다.

여기처럼, 항목 8과 9 사이.

여기 애니메이션은 좋지 않아. 그건 그냥 크로스 페이드야.

이 시나리오를 고치고 싶지만, 내 타임라인 제공자는 무작위라서, 테스트할 때 이 시나리오를 다시 볼 수 있을지 모르겠어.

이것은 특정 항목의 타임라인이 유용한 곳이다.

나는 내가 반복하고 싶은 정확한 시나리오를 만들 수 있다.

나는 timelineProvider를 바꿀 것이다: 미리보기에서 타임라인으로, 그리고 나서, 타임라인 공급자를 반환하는 대신, 내가 고치고 싶은 케이스를 복제하는 두 개의 항목을 반환할 것이다.

하지만 이 전환을 위해 수정해야 하는 코드는 다른 파일에 있으며, 탐색할 때 이 미리보기를 잃고 싶지 않습니다.

편리하게, 나는 고정을 사용하여 캔버스에 미리보기를 유지할 수 있다.

캔버스의 왼쪽 상단에 있는 핀 버튼을 클릭하면, 다른 파일로 이동할 때에도 미리보기를 활성 상태로 유지합니다.

여기 콜라주를 그리고 전환을 포함하는 견해가 있습니다.

문제를 해결하는 데 집중할 수 있도록 캔버스에서 타임라인의 재생 버튼과 루프 버튼을 누를 수 있습니다.

이제 Xcode는 내가 코드를 고치는 동안 이 전환을 계속 재생할 것이다.

그리고, 아, 여기 문제가 있어.

콜라주가 행으로 구성될 때, 나는 전환을 첨부했지만, 콜라주가 열로 구성되었을 때는 전환이 없다.

나는 전환을 복사해서 붙여넣을 수 있다.

그리고 그것은 더 낫지만, 그것은 후행 가장자리에서 애니메이션을 하고 있다.

바닥을 밀어내는 게 더 나을 것 같아.

그리고 여기 우리가 간다.

미리보기를 통해 타임라인 공급자뿐만 아니라 빠르게 반복할 수 있었지만, 특정 이벤트를 사용하여 애니메이션을 미세 조정할 수 있었습니다.

그것은 정말 내 UI를 더 빠르고 재미있게 만들고 반복할 수 있게 해준다.

이러한 동일한 위젯 워크플로우는 미리 볼 수 있는 두 번째 종류의 위젯에서도 사용할 수 있습니다: 라이브 활동.

API는 거의 동일하게 보이지만 타임라인 공급자와 항목을 제공하는 대신 라이브 활동 속성 세트와 상태 세트를 제공합니다.

여기 예시가 있어.

먼저, 이니셜라이저에서 사용하고 싶은 속성을 전달하세요.

그런 다음, 그 속성에 대한 콘텐츠 상태를 전달하세요.

예를 들어, 피자를 주문하기 위한 위젯을 만들고 있다면, 그 피자의 베이킹과 배달이 어떻게 진행되는지에 대한 사용자 지정 상태 세트를 제공한 다음, 그 모든 상태 간의 애니메이션을 테스트할 수 있습니다.

난 그냥 네가 위젯 미리보기로 할 수 있는 일의 표면을 긁고 있어.

자세한 내용은 "Widgets to Life" 세션을 확인하세요.

우리가 이 이야기의 마지막 부분으로 넘어가면서, 저는 당신이 당신의 프로젝트에서 미리보기를 최대한 활용할 수 있도록 돕고 싶습니다.

우리는 프로젝트 설정, 데이터 제공 및 장치의 기능 활용에 영향을 미치는 세 가지 시나리오를 조사할 것입니다.

먼저, 저는 라이브러리 타겟에서 콘텐츠를 미리 보는 것에 대해 이야기하고 싶습니다.

여기에는 프레임워크, 스위프트 패키지 또는 동적 라이브러리가 포함됩니다.

도서관을 사용하는 데는 여러 가지 이유가 있습니다.

예를 들어, 라이브러리를 사용하여 프로젝트를 모듈화하거나, 다른 사람들에게 배포할 라이브러리를 개발할 수 있습니다.

미리보기는 이러한 대상에서 잘 작동하지만, 깔끔한 것은 라이브러리 대상을 활용하여 모든 프로젝트에서 미리보기를 더 많이 할 수 있다는 것입니다.

라이브러리를 활용하는 첫 번째 단계는 미리보기가 코드를 실행하는 데 사용하는 실행 파일을 이해하는 것입니다.

미리보기는 미리보기를 시작하고 렌더링하려면 실행 파일, 앱 또는 위젯이 필요합니다.

보통 이것은 당신의 앱이지만, 앱이 없다면, 어떻게 작동하나요?

미리보기는 어떤 실행 파일을 사용할지 알아내기 위해 세 가지를 사용한다.

하나, 당신이 작업하고 있는 소스 파일.

둘째, 그 파일과 그 대상의 모든 종속성을 포함하는 대상.

그런 다음 세 번째, 미리보기는 당신이 선택한 계획의 대상과 대상 종속성을 교차합니다.

미리보기는 활성 계획에 있는 앱만 선택합니다.

몇 가지 예를 살펴봅시다.

가장 간단한 경우, 애플리케이션 대상의 구성원인 단일 소스 파일에서 작업할 수 있습니다.

이것이 우리가 미리보기에 사용할 앱이라는 것은 놀라운 일이 아닐 것이다.

하지만 두 개의 타겟에 소스 파일이 있다면 어떨까요?

예를 들어, 앱의 평가판과 앱의 정식 버전.

여기가 그 계획이 들어오는 곳이다.

미리보기는 활성 계획에 있는 앱만 사용합니다.

여기에 또 다른 예가 있습니다: 두 개의 스위프트 파일이 열려 있다고 가정해 봅시다. 각 파일은 다른 패키지로 가져올 수도 있는 패키지에 속하며, 이 파일은 모두 앱에 의해 가져옵니다.

우리는 그 파일들을 가로질러 상단에 있는 첫 번째 공통 실행 파일을 찾을 것이다.

그것을 염두에 두고, 이제 우리는 우리가 시작한 질문으로 돌아갈 수 있습니다: 만약 내가 앱이 전혀 없다면 어떨까요?

이 경우, 미리보기는 당신을 대신하여 XCPreviewAgent라는 앱을 만들어 라이브러리를 로드합니다.

이 모든 것은 자동으로 발생하지만, 코드가 어디에서 실행되고 있는지 알 수 있도록 이것이 어떻게 작동하는지, 특히 이 프로세스의 이름을 아는 것이 도움이 됩니다.

예를 들어, XCPreviewAgent에 대한 충돌 보고서가 있다면, 코드에서 일어나고 있다는 것을 알 수 있고 문제가 어디에 있는지 찾을 수 있습니다.

하지만, 적어도 두 가지 방법으로 프로젝트에서 미리보기가 더 잘 작동하도록 라이브러리 목표를 활용할 수 있습니다.

우리는 이것들 각각에 대해 이야기하는 데 많은 시간을 할애할 수 있지만, 나는 적어도 그것들을 간단히 언급하고 싶다.

첫째, 앱을 라이브러리로 모듈화하면, 더 나은 빌드 시간을 얻거나 프로젝트의 한 부분에 집중할 수 있도록 더 작은 계획을 만들 수 있습니다.

그리고 비록 당신이 목표의 하위 집합과 함께 더 작은 계획을 사용하고 있지만, 당신은 여전히 미리보기의 모든 힘을 얻을 수 있습니다.

둘째, 코드를 라이브러리로 모듈화하면, 앱 타겟이 제공한 필수 자격이나 Info.plist 키가 필요한 뷰가 있을 수 있습니다.

미리보기를 위해 작은 앱을 만들어 이러한 보기를 미리 볼 수 있습니다.

여기 방법이 있어.

특정 Info.plist 키가 필요한 사진 라이브러리를 사용하는 뷰를 만들고 있다고 가정해 봅시다. 예를 들어, SamplePhotoLibraryUtilities와 같은 라이브러리에 그 뷰를 넣었습니다.

새로운 앱 타겟을 만들어 올바른 기능으로 미리 볼 수 있습니다.

그럼, 내가 필요한 모든 기능을 추가할게.

이 경우 Info.plist 키를 추가해야 하므로 빌드 설정으로 이동하여 사진 라이브러리 사용 문자열을 필터링하고 설정합니다.

다음으로, 내가 작업하고 있는 뷰가 있는 내 라이브러리가 내 앱에 포함되어 있는지 확인할 것이다.

빌드 단계 탭을 사용하여, 나는 그것을 대상 종속성으로 추가하고, 복사 파일 단계에 포함할 것이다.

이제 이 미리보기 앱과 라이브러리만 포함된 계획을 선택할 준비가 되었습니다.

내 뷰를 미리 볼 때, 미리보기를 위해 방금 만든 앱을 사용할 것이며, 모든 올바른 Info.plist 키가 제자리에 있을 것입니다.

이것은 내가 작업하고 있는 모든 뷰를 미리 볼 수 있는 기능을 유지하면서 더 빠른 빌드 시간을 가진 더 작은 계획을 활용할 수 있게 해준다.

다음으로, 데이터와 자산을 미리보기에 넣는 방법에 대해 이야기해 봅시다.

나는 이미 이것을 이전 데모에 몰래 넣었지만, 돌아가서 내가 한 일을 검토하고 싶다.

이전에 보고 있던 필터를 렌더링한 뷰 컨트롤러로 돌아가 봅시다.

미리보기를 구성했을 때, 나는 샘플 이미지를 통과했다.

이 이미지는 내 프로젝트의 자산 카탈로그에서 나온 것이다.

프로젝트 네비게이터를 공개하면, 자산 카탈로그는 미리보기 콘텐츠 폴더 안에 있습니다.

이 이미지들은 개발 중에 다른 시나리오를 테스트하는 데 도움이 되며 사진으로 테스트하는 모든 장치를 구성할 필요가 없습니다.

하지만 나는 이것들을 내 앱에 배송하고 싶지 않아.

나는 개발 자산이라는 기능으로 그것을 피할 수 있다.

이것들은 빌드 설정에서 구성하는 프로젝트의 폴더이며, App Store에 제출할 때 해당 폴더의 모든 것이 앱에서 제거됩니다.

여기에는 자산 카탈로그나 미리보기를 돕기 위해 사용하는 모든 리소스가 포함될 수 있습니다.

이 미리보기 콘텐츠 폴더를 개발 자산 경로로 추가합시다.

프로젝트 설정에서 빌드 설정 탭으로 이동하면 개발 자산을 필터링할 수 있습니다.

편집을 두 번 클릭한 후, 수동으로 경로를 입력하거나 미리보기 콘텐츠 폴더를 팝오버로 드래그할 수 있습니다.

그것이 추가되면, 이제 내가 App Store에 제출할 때 이 경로는 내 앱에서 제거될 것이다.

개발 자산 경로는 새 프로젝트나 앱 대상을 만들 때 자동으로 설정되지만, 추가 경로를 추가하거나 다른 대상 유형이나 기존 프로젝트에 추가할 수 있습니다.

그 데모는 개발 자산을 사용하여 프로젝트에 추가하여 미리보기에 자산을 제공하는 한 가지 방법을 강조합니다.

이것은 모든 장치와 팀 전체에서 이러한 모든 자산을 공유하고 싶다면 잘 작동합니다.

하지만 빠르게 시작하고 실행하려면 데이터와 이미지를 제공하는 또 다른 방법이 있습니다.

우리 중 많은 사람들이 이미 장치에 자산과 데이터를 가지고 있다.

미리보기를 사용하면 그것들을 활용할 수 있습니다.

Xcode의 시뮬레이터는 많은 것을 할 수 있으며 대부분의 개발을 위한 환상적인 출발점이다.

미리보기는 시뮬레이터에서 잘 작동하며, 물리적 장치에서도 잘 작동합니다.

앱이 궁극적으로 출시될 장치에서 미리 보고 싶은 이유가 있습니다.

예를 들어, 당신은 카메라나 센서에 접근하고 싶습니다.

또 다른 이유는 당신의 장치가 이미 사진이나 파일과 같은 많은 실제 데이터를 가지고 있기 때문입니다.

장치의 데이터를 활용하는 방법의 예를 보여드리고 싶습니다.

제가 작업하고 있는 또 다른 보기에는 iCloud 사진 라이브러리에서 사진을 선택한 다음 레이아웃을 골라 새 콜라주를 만들 수 있는 버튼이 있습니다.

다른 보기에서 반복한 것과 같은 방식으로 테스트하고 싶지만, 다양한 사진이 있는 장치를 사용해야 합니다.

캔버스 하단의 미리보기 장치 선택기를 사용하여 미리보기에 사용되는 장치를 변경할 것입니다.

몇 가지 옵션에 뛰어들어 봅시다.

대부분의 경우, 선택한 실행 대상의 장치 제품군을 추적하는 자동 모드를 계속 사용할 수 있습니다.

메뉴의 말 그대로 반대편에는 더 많은 하위 메뉴가 있다.

여기에는 장치 창에 추가한 모든 시뮬레이터 장치가 나열되므로, 원하는 모델을 정확히 선택할 수 있습니다.

하지만, 때때로, 당신은 그 기능으로 장치를 선택하고 싶을 때가 있습니다.

메뉴의 중간 섹션은 일반적인 기능으로 장치를 제공하므로 예를 들어 어떤 모델에 Touch ID가 있는지 정확히 기억할 필요가 없습니다.

하지만 저는 제 옆에 있는 이 장치를 사용하고 싶습니다, 그래서 저는 제 도서관에서 큰 사진 세트에 접근할 수 있습니다.

미리보기 장치 선택기는 또한 내 Mac에 연결된 모든 장치를 포함한다.

이러한 연결된 장치 중 하나를 선택하면, Xcode는 시뮬레이터를 완전히 우회하여 이 장치 전용으로 빌드하고 미리 볼 것입니다.

그리고 그렇게, 나는 실제 장치에서 내 견해를 가지고 있다.

하지만 그것이 내 장치에 있다고 해서 우리가 지금까지 이야기한 미리보기의 기능을 사용할 수 없다는 의미는 아니다.

나는 여전히 캔버스의 모든 모드를 사용할 수 있고 심지어 장치 설정을 설정할 수도 있다.

예를 들어, 이것은 다크 모드에서 어떻게 생겼나요?

그리고 내 코드에 대한 업데이트는 내 장치에 즉시 나타난다.

이 보기에는 내비게이션 제목이 필요하므로 코드에 navigationTitle을 추가한 다음 제목을 사용자 정의하고 장치에서 즉시 검토하겠습니다.

그건 정말 빨라!

이제 이 휴대폰의 모든 이미지를 사용하여 사진 라이브러리 통합을 테스트할 준비가 되었습니다.

사진에서 추가를 탭하고, 사진 몇 장을 선택할게-- 아, 이 다람쥐는 귀여워-- 그리고 추가를 탭해.

이 전망은 잘 작동하고 있다.

내 사진은 레이아웃 선택기에 나타나며, 다른 레이아웃을 빠르게 테스트할 수 있다.

난 이게 좋아.

Xcode에서 편집하고 내 견해를 경험하는 것은 결코 늙지 않는다.

그리고 그것은 당신의 프로젝트에서 미리보기를 사용하기 위한 세 가지 팁과 요령입니다.

마무리해야 할 몇 가지 사항: 미리보기 API는 전체 애플리케이션과 모든 플랫폼에서 UI에 대한 미리보기를 정의할 수 있는 유연성을 제공합니다.

SwiftUI, UIKit, AppKit 및 여러 종류의 위젯을 사용할 수 있습니다.

미리보기는 또한 필요한 대로 미리보기를 정확하게 구성할 수 있도록 유연합니다.

샘플 데이터와 자산을 전달하고, 코드로 환경을 설정하고, 다른 장치 설정을 테스트하기 위해 Xcode의 기능을 활용할 수 있습니다.

그리고 미리보기는 또한 캔버스에서 바로 시뮬레이터의 편리함이든, 물리적 장치를 사용하여 가장 높은 충실도를 얻거나 데이터와 사진에 액세스하는 등 다양한 장치에서 미리 볼 수 있는 유연성을 제공합니다.

하지만 어떤 장치를 선택하든 여전히 미리보기의 모든 기능을 얻을 수 있습니다.

마지막으로, 애플리케이션의 적어도 일부를 라이브러리로 모듈화한다면, Xcode에서 계획을 만들어 더 나은 빌드 시간을 얻고 작업 중인 한 가지에 집중할 수 있습니다.

미리보기는 당신이 창의력을 발휘할 수 있도록 돕기 위해 여기에 있습니다.

봐줘서 고마워.