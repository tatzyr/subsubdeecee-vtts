10004

♪ ♪

숀: 안녕, 나는 숀이야.

저는 인터넷 기술 팀의 엔지니어입니다.

오늘, 우리는 L4S로 앱의 네트워크 지연을 줄이는 것에 대해 이야기할 것입니다.

L4S는 낮은 대기 시간, 낮은 손실 및 확장 가능한 처리량을 의미합니다.

네트워크 지연이 사용자 경험에 영향을 미칠 수 있는 앱의 성능을 획기적으로 향상시키는 놀라운 기술이다.

몇 가지 이점만 언급하면, 앱이 콘텐츠 로드 시간을 줄이고, 비디오 품질을 개선하며, 사용자 간의 반응이 빠른 협업을 가져오는 데 도움이 될 수 있습니다.

오늘, 우리는 먼저 L4S가 어떻게 작동하고 네트워크 지연을 줄이는 방법을 살펴볼 것입니다.

그런 다음, L4S용 앱을 준비하는 방법과 서버에서 L4S를 켜는 방법을 살펴볼 것입니다.

마지막으로, 우리는 L4S 네트워크를 구성하고 앱을 테스트하기 위해 취할 수 있는 단계에 대해 이야기할 것입니다.

먼저, L4S의 이점과 그것이 어떻게 작동하는지 살펴봅시다.

바쁜 네트워크는 실시간 오디오 및 비디오와 같은 기능에 의존하는 앱에서 특히 어려울 수 있습니다.

네트워크가 한 번에 많은 장치에서 사용될 때, 종종 이러한 유형의 앱에서 높은 대기 시간과 패킷 손실을 유발할 수 있습니다.

예를 들어, 같은 네트워크를 사용하는 다른 사람이 영화를 보거나 비디오 게임을 다운로드할 때 화상 통화 중에 지연이나 비디오 멈춤을 경험했을 수 있습니다.

L4S가 어려운 상황에서 얼마나 도움이 될 수 있는지 보여주기 위해, 우리는 두 장치 간에 화상 통화를 하는 샘플 앱을 만들었습니다.

다른 시간에 만든 샘플 앱으로 두 번의 화상 통화를 보여 드리겠습니다. 하나는 L4S가 없고 다른 하나는 L4S가 켜져 있습니다.

이 두 통화 모두에서, 나는 낮은 대역폭으로 동일한 제한된 네트워크를 사용했다.

또한, 동시에 동일한 네트워크를 적극적으로 사용하는 여러 개의 다른 장치도 있습니다.

이것이 실제로 실행되는지 봅시다.

당신은 두 통화 사이의 비디오 품질의 현저한 차이를 알게 될 것입니다.

레거시 하나는 특히 움직이는 동안 가끔 비디오 스톨과 지연을 보여준다.

그러나, L4S를 사용하면, 비디오는 상당한 지연 없이 매끄럽고 반응이 빠르다.

이제 무슨 일이 일어나고 있는지 이해하기 위해 방금 목격한 영상 통화를 분석해 봅시다.

이 데모에서, L4S는 우리 앱이 모든 주요 네트워킹 지표에서 상당한 개선을 달성할 수 있도록 했다.

먼저, 이 영상 통화 중 패킷의 왕복 시간 분포를 살펴봅시다.

더 짧은 왕복 시간은 네트워크에서 더 낮고 더 나은 대기 시간을 나타냅니다.

이와 같은 대화형 앱의 경우, 테일 레이턴시는 사용자가 경험하는 최악의 경우를 보여주기 때문에 매우 중요합니다.

우리의 테스트 네트워크는 최소 왕복 시간이 20밀리초입니다.

그러나, L4S가 없으면, 패킷은 최대 45밀리초의 왕복 시간을 경험했다.

하지만 L4S를 켜면, 최악의 지연 시간도 50% 줄어들고 25밀리초 미만으로 줄었다.

다음으로, 패킷 손실을 살펴봅시다.

더 낮은 패킷 손실은 장치 간의 더 안정적인 연결을 나타낸다.

레거시와 함께, 패킷 손실률은 40% 이상에 달했다.

하지만 L4S로, 우리의 화상 통화에서 패킷 손실은 거의 제거되었다.

그것은 데이터 손실로 인한 프레임 드롭이나 지연이 훨씬 적다는 것을 의미한다.

향상된 대기 시간과 패킷 손실 속도는 화상 통화의 더 나은 렌더링 메트릭으로 직접 변환됩니다.

먼저, 비디오 스톨 비율을 살펴봅시다.

낮은 실속 비율은 화상 통화 중 동결이 적다는 것을 의미한다.

L4S 없이, 우리는 때때로 앱에서 비디오 스톨을 경험했다.

하지만 L4S와 함께, 비디오 가판대는 거의 완전히 제거되었다.

다음으로, 수신된 비디오 프레임 속도를 살펴봅시다.

더 높고 일관된 수신 비디오 프레임 속도는 더 풍부하고 부드러운 화상 통화를 의미합니다.

L4S의 경우, 수신된 비디오 프레임 속도는 대부분의 시간 동안 초당 25프레임 이상이었다.

그러나, 레거시 하나는 때때로 초당 0프레임으로 떨어졌고, 이는 완전한 비디오 스톨을 의미한다.

전체적으로, 이러한 개선은 제한된 네트워크에서도 훨씬 더 나은 사용자 경험을 제공한다.

L4S를 채택하여 앱에 동일한 개선 사항을 가져올 수 있습니다.

이제, L4S가 어떻게 작동하는지 살펴봅시다.

L4S가 대기열과 패킷 손실을 줄이기 때문에 우리는 놀라운 개선을 본다.

먼저 네트워크에서 대기열이 어떻게 구축되는지 살펴봅시다.

앱에서 패킷이 전송되면, 서버에 도달하기 전에 다른 네트워크 홉을 통해 라우팅됩니다.

패킷 트래버스의 이 홉 세트는 네트워크 경로라고 불립니다.

네트워크를 통한 경로에서, 병목 현상이라고 불리는 가장 느린 홉에 의해 지원되는 속도로만 데이터를 종단간 전달할 수 있습니다.

많은 사람들에게 이것은 인터넷 서비스 제공 업체 연결이며, 패킷을 처리할 수 있는 가장 높은 속도는 경로에서 지원되는 최대 처리량을 결정합니다.

발신자가 최대 처리량을 초과하면, 병목 현상에 대기열이 형성되어 후속 패킷이 지연됩니다.

L4S가 없다면, 대기열은 더 이상 패킷을 수용할 수 없을 때까지 계속 증가할 것이다.

그런 일이 발생하면, 패킷이 삭제되어 대기 시간과 처리량 모두에 해를 끼친다.

L4S는 클라이언트, 서버 및 병목 현상 간의 협력을 통해 이 문제를 해결합니다.

L4S를 사용하면 패킷을 보내는 클라이언트 또는 서버는 네트워크 혼잡을 관리하기 위해 협력할 것이라는 신호를 보내야 합니다.

이를 위해, L4S 지원 발신자는 ECN으로도 알려진 명시적 혼잡 알림이라는 기술을 사용할 것이다.

패킷을 전송할 때, 발신자는 패킷의 IP 헤더에서 ECN 비트를 사용하여 L4S에 대한 지원을 나타냅니다.

L4S 홉이 이 패킷을 받으면, L4S 대기열 관리를 적용할 것이다.

병목 현상에서 대기열이 쌓이기 시작하면, L4S 대기열 관리는 패킷에 다른 ECN 라벨을 설정하여 혼잡이 있음을 나타냅니다.

이 라벨은 네트워크가 다음 홉으로 전달하기 전에 혼잡을 경험했음을 나타냅니다.

이 패킷을 받으면, 수신자는 혼잡 라벨로 표시된 패킷의 수를 계산하고 그 번호를 발신자에게 다시 보고합니다.

발신자가 이 번호를 받으면, 네트워크의 혼잡을 이해하기 위해 이 피드백을 사용합니다.

그런 다음 발신자는 병목 현상의 혼잡 수준에 따라 전송 속도를 조정하여 최대 처리량을 초과하지 않도록 합니다.

조정된 전송 속도를 통해, 발신자는 병목 현상에서 큰 패킷 대기열을 만드는 것을 피할 수 있다.

이것은 L4S가 처리량을 극대화하고 동시에 낮은 엔드 투 엔드 대기 시간을 달성할 수 있게 해준다.

이제, 이 협업이 사용자에게 이러한 이점을 제공할 수 있도록 하기 위해 무엇을 해야 하는지 살펴봅시다.

먼저, L4S를 위해 앱을 어떻게 준비할 수 있는지 논의해 봅시다.

URLSession 및 네트워크 프레임워크에서 네트워킹 API를 사용하는 것은 앱에서 L4S를 채택하는 가장 좋은 방법입니다.

앱이 이러한 프레임워크 내에서 HTTP/3 또는 QUIC를 사용하는 경우, L4S 지원이 자동으로 내장되어 있습니다.

앱에 코드를 변경할 필요가 없습니다.

또는, 앱이 HTTP/2 또는 TCP를 사용하는 경우, iOS 17 및 macOS Sonoma에는 이러한 프로토콜의 다운로드에 대한 L4S 지원이 내장되어 있습니다.

이것들은 코드 변경이 필요하지 않기 때문에 앱에 L4S 지원을 추가하는 가장 좋은 방법입니다.

그러나, 앱이 사용자 지정 프로토콜을 사용하는 경우, 앱에서 L4S를 지원하기 위해 구현해야 할 몇 가지 사항이 있습니다.

RFC 9330은 L4S 요구 사항에 대해 배울 수 있는 좋은 출발점이다.

당신은 몇 가지 새로운 행동을 실행해야 할 것입니다.

예를 들어, 당신의 프로토콜은 네트워크의 L4S 혼잡 피드백을 이해하고 그에 따라 전송 속도를 조정해야 합니다.

그렇게 하려면, 확장 가능한 혼잡 제어 알고리즘을 구현해야 합니다.

그런 다음, 네트워크가 ECN 비트를 통과할 때만 앱이 L4S 트래픽을 보내는지 확인해야 합니다.

그렇게 하려면, ECN 표백과 같이 ECN을 방해할 수 있는 네트워크 문제를 확인하는 ECN 검증 메커니즘을 구현하십시오.

수신기 역할을 할 때, 당신의 프로토콜은 또한 네트워크의 ECN 피드백을 발신자에게 되풀이하는 릴레이 메커니즘이 있어야 합니다.

구현이 네트워크 프레임워크를 기반으로 하는 경우, 패킷 메타데이터의 ECN 속성을 사용하여 사용자 지정 프로토콜에 대한 ECN 플래그를 보내고 받을 수 있습니다.

소켓을 사용하는 경우, 설정 소켓 옵션을 사용하거나 메시지 시스템 호출을 보내고 받을 수 있습니다.

이제 L4S를 위해 앱을 준비하는 방법을 다루었습니다. 서버를 설정하는 방법을 살펴봅시다.

앱이 QUIC를 사용하는 경우, 서버의 QUIC 구현도 L4S 및 ECN 마킹을 지원해야 합니다.

서버 측에서 사용할 수 있는 수많은 QUIC 구현이 있다.

서버 공급자에게 ECN과 L4S를 활성화하는 방법에 대해 물어보세요.

아직 L4S 트래픽 전송을 지원하지 않는다면, ECN이 서버에서 L4S 트래픽을 수신할 수 있도록 할 수 있습니다.

지금은 그들이 L4S를 완전히 지원하도록 격려할 좋은 시간이다.

앱이 TCP를 사용하는 경우, 서버의 TCP 구현에 L4S 지원을 추가해야 합니다.

리눅스 기반 서버의 경우, 이 GitHub 페이지의 지침에 따라 서버에 지원을 추가하십시오.

당신은 또한 이 비디오의 관련 항목에서 기사에서 더 자세한 내용을 찾을 수 있습니다.

다른 모든 서버 플랫폼의 경우, L4S를 지원하기 위해 추가 구성이나 변경이 필요할 수 있으므로 서버 공급자에게 문의하십시오.

이제 L4S를 위해 앱과 서버를 설정하는 방법을 다루었으니, 앱을 테스트하기 위해 L4S 네트워크를 설정하는 방법을 살펴보겠습니다.

먼저, 무엇이 네트워크 L4S를 가능하게 만드는지 검토해 봅시다.

네트워크는 ECN 표시를 차단해서는 안 된다.

ECN 표시는 발신자, 병목 현상 및 수신자 간의 네트워크에 대한 정보를 전달하는 데 사용됩니다.

네트워크가 ECN 마킹을 방해하면 L4S가 작동하지 않습니다.

이 문서에는 네트워크가 ECN과 호환되는지 확인하는 데 사용할 수 있는 추가 도구와 함께 따를 수 있는 단계가 있습니다.

다음으로, 네트워크 병목 현상은 L4S 대기열 관리를 지원해야 한다.

이것은 L4S의 이점을 볼 수 있도록 필수적이다.

네트워크가 ECN과 호환된다는 것을 확인하면, 병목 현상에 L4S 대기열 관리를 추가하기만 하면 됩니다.

L4S 대기열 관리를 지원하는 테스트 네트워크를 설정하려면, 가장 좋은 방법은 인터넷 공유를 사용하는 것입니다.

macOS 소노마에서 인터넷 공유는 L4S 대기열 관리를 지원합니다.

장치가 인터넷 공유를 통해 Mac에서 만든 네트워크에 연결하면, Mac 자체는 장치와 서버 사이의 추가 네트워크 홉이 됩니다.

Mac을 네트워크의 병목 현상으로 구성하면, L4S 대기열 관리를 통과하는 트래픽에 적용하여 완전한 L4S 네트워크를 구축할 수 있습니다.

macOS에서 인터넷 공유를 활성화하려면, 시스템 설정에서 인터넷 공유 창으로 이동하십시오.

공개 버튼을 클릭하여 공유할 인터페이스와 테스트 장치가 연결할 인터페이스를 선택하십시오.

Mac이 이 네트워크에서 병목 현상 역할을 하려면, 대역폭을 조절해야 합니다.

공유 중인 인터페이스와 장치가 연결할 인터페이스와 함께 터미널에서 이 ifconfig 명령을 사용하세요.

이 명령의 인터페이스 이름을 사용 중인 인터페이스의 이름으로 바꾸세요, 예를 들어, en1.

그런 다음, 테스트 장치에서 네트워크에 가입하고 앱을 테스트하여 L4S의 이점을 확인하세요.

Mac에서 대역폭 스로틀링을 되돌리려면, 재부팅하거나 동일한 ifconfig 명령을 실행할 수 있지만 대역폭을 초당 10메가비트 대신 0으로 변경할 수 있습니다.

iOS 17과 macOS 소노마에서 L4S는 무작위 사용자 세트로 점진적으로 출시될 것이다.

테스트 장치에 L4S가 켜져 있는지 확인하려면, 개발자 설정으로 이동하여 L4S를 켜세요.

macOS에서는 테스트하기 전에 이 기본 쓰기 명령을 실행하여 L4S를 활성화할 수 있습니다.

네트워크나 서버가 L4S를 지원하지 않는 경우, TCP와 QUIC는 레거시 모드에서 계속 작동합니다.

그러나, L4S를 켜고 응용 프로그램을 테스트하여 문제를 식별해야 합니다.

문제가 발생하면 피드백 어시스턴트를 사용하여 피드백을 제공하십시오.

이 문서는 또한 앱에서 L4S 디버깅 및 테스트에 대한 유용한 정보를 제공합니다.

앱과 네트워크가 이제 L4S로 지연 시간을 줄이고 패킷 손실을 줄일 수 있게 되어 매우 기쁩니다.

오늘 L4S를 지원하는 네트워크와 그렇지 않은 네트워크에서 iOS 17과 macOS Sonoma에서 앱을 테스트하세요.

아직 하지 않았다면, 서버 또는 CDN 공급자와 협력하여 앱 서버에서 L4S에 대한 지원을 활성화하십시오.

피드백 어시스턴트를 사용하여 앱에서 L4S가 켜진 문제를 보고하십시오.

봐줘서 고마워.

L4S를 사용하여 당신과 함께 더 나은 앱을 만들기를 기대하고 있습니다.

♪ ♪