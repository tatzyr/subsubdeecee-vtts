10140

♪ ♪

리키: 안녕하세요, 저는 리키입니다. "StoreKit 2의 새로운 기능 및 Xcode의 StoreKit 테스트"에 오신 것을 환영합니다.

이 세션에서, 저는 올해 StoreKit에 가져올 새로운 기능과 Xcode의 테스트 경험에 대한 개선 사항에 대해 이야기할 것입니다.

StoreKit 2는 2021년 WWDC에서 Swift를 사용하는 새롭고 유연한 API와 함께 처음 소개되었습니다.

올해, StoreKit 2를 더 좋게 만드는 새로운 기능을 보여드리게 되어 기쁩니다.

먼저, 새로운 StoreKit 프레임워크 기능을 검토한 다음, StoreKit을 사용하여 SwiftUI 앱을 구축하기 위한 몇 가지 업데이트를 공유하고, 마지막으로 Xcode에서 StoreKit 테스트의 새로운 기능을 다룰 것입니다.

iOS 16.4부터 사용할 수 있는 프로모션 인앱 구매를 관리하기 위한 새로운 스위프트 API를 소개하게 되어 기쁩니다.

프로모션 인앱 구매는 각각 전용 프로모션 이미지가 있는 App Store 제품 페이지에서 제품을 상품화할 수 있는 기능입니다.

인앱 구매를 홍보하는 것은 제품의 가시성을 높이는 좋은 방법이며, App Store Connect에서 홍보 구매를 쉽게 설정할 수 있습니다.

프로모션된 인앱 구매 구성에 대해 자세히 알아보려면, "App Store Connect의 새로운 기능"을 확인하세요.

프로모션된 인앱 구매가 App Store에 나열되기 때문에, 고객이 프로모션된 제품을 구매할 때, 그들의 상호 작용은 구매 버튼을 탭하여 여기에서 시작됩니다.

그런 다음, App Store는 구매 데이터를 앱으로 전송하여 이 정보를 듣고 구매를 완료하도록 요청할 수 있습니다.

프로모션 구매를 들으려면, 고객이 App Store에서 프로모션된 제품에 대한 구매를 시작할 때마다 새로운 구매 의도를 받는 Swift 비동기 시퀀스를 사용하세요.

먼저, PurchaseIntent.intents를 사용하여 구매 의도를 받을 리스너를 만드세요.

시퀀스가 새 객체를 받을 때마다, 구매와 관련된 StoreKit 제품이 포함되어 있습니다.

익숙한 지불 시트를 표시하고 그곳에서 상호 작용을 완료할 수 있는 purchase()에 전화하여 고객에게 평소와 같이 이러한 제품을 구매하도록 요청할 수 있습니다.

앱이 구매를 완료할 준비가 되지 않았다면, 인텐트를 로컬에 저장하고 연기할 수도 있습니다.

당신은 항상 나중에 그것을 처리할 수 있습니다.

인앱 구매를 홍보하는 또 다른 기능은 제품이 현재 장치에 로컬로 표시되는 방식을 사용자 정의할 수 있다는 것입니다.

예를 들어, 고객이 이러한 제품 중 하나를 구매하는 경우, 앱을 검색하거나 검색할 때 App Store가 다시 표시되지 않도록 숨길 수 있습니다.

또한 앱의 현재 상태(예: 게임의 레벨 향상)에 따라 제품 주문 또는 추천 제품의 하위 집합을 변경할 수 있습니다.

이러한 모든 사례를 다루기 위해, 프로모션된 인앱 구매의 주문과 가시성을 사용자 정의하는 데 사용할 수 있는 새로운 Swift API를 보여드리게 되어 기쁩니다.

빠른 시연을 봅시다.

StoreKit을 가져온 후, Product.PromotionInfo.currentOrder로 현재 프로모션 주문을 확인할 수 있습니다.

이것은 현재 설정된 순서대로 PromotionInfo 객체의 시퀀스를 반환합니다.

이 목록이 비어 있다면, 이 장치에 대해 설정된 로컬 재정의가 없으며, 사람들이 App Store에서 보는 제품은 App Store Connect에서 구성한 것과 동일한 순서입니다.

이 순서의 각 객체에는 앱에서 홍보된 제품에 관한 정보가 포함되어 있습니다.

프로모션의 사용자 지정 순서를 설정하려면 Product.PromotionInfo.updateProductOrder API를 사용하고 이 장치의 App Store에 표시할 순서대로 제품 식별자 목록을 전달할 수 있습니다.

완전히 새로운 주문을 하지 않고도 제품을 숨기고 보여줄 수도 있습니다.

이것은 홍보된 인앱 구매와 관련된 가시성 속성을 변경하여 수행할 수 있습니다.

가시성 상태는 표시, 숨김 또는 기본값일 수 있으며, 이는 App Store Connect에서 구성한 설정을 따르고 앱에서 설정한 로컬 재정의가 없는 모든 장치에 적용됩니다.

코드에서 이것을 어떻게 바꿀 수 있는지 봅시다.

가시성 값은 몇 가지 다른 방법으로 바뀔 수 있다.

앱은 Product.PromotionInfo. updateProductVisibility API를 호출하고 새로운 가시성 상태와 인앱 구매의 식별자를 모두 전달하여 단일 제품의 값을 변경할 수 있습니다.

또는, 각 PromotionInfo 객체에 회원 속성을 설정하여 가시성 값을 변경할 수도 있습니다.

그런 다음, 변경 사항을 저장하려면, 방금 수정한 동일한 객체에 대해 update()를 호출하세요.

그리고 그것이 StoreKit 2로 프로모션된 인앱 구매를 사용하는 데 필요한 모든 것입니다.

이제, StoreKit 2의 핵심 데이터 모델에 대한 몇 가지 개선 사항을 보여드리고자 합니다.

이러한 모델은 인앱 구매 및 관련 정보(예: 구매일 및 구독 상태)를 관리하는 데 유용합니다.

많은 사람들이 요청한 큰 개선을 가져오는 Transaction and RenewalInfo 데이터 모델에 추가하고 있는 새로운 분야에 뛰어들어 봅시다.

첫 번째 새로운 필드는 storefront이며, storefrontCountryCode와 함께 거래 모델에 나타납니다.

다음 새로운 분야는 이유라고 불린다.

고객이 구매를 시작했는지, 아니면 거래가 자동 구독 갱신인지 알려줍니다.

Product.SubscriptionInfo 아래의 RenewalInfo 모델에는 nextRenewalDate라는 새로운 멤버가 있습니다.

이것은 이 구독 갱신이 언제 처리될지 알려줍니다.

이러한 모든 새로운 필드는 Xcode 15로 빌드한 앱에서 사용할 수 있으며, 처음에는 iOS 17과 함께 출시되었지만 대부분은 StoreKit 2를 사용할 때 이전 버전의 iOS에서도 소급하여 작동합니다.

다음으로, 저는 StoreKit 메시지와 우리가 방금 추가한 훌륭한 새로운 기능에 대해 이야기하고 싶습니다.

우리는 App Store가 고객에게 중요한 정보를 알리는 방법으로 작년에 WWDC 2022에서 메시지 API를 도입했습니다.

메시지에는 메시지의 목적을 알려주는 Reason 값이 있습니다.

당신의 앱은 메시지를 연기할지 억제할지 선택할 수 있습니다.

예를 들어, 메시지를 표시하면 상호 작용 흐름 중에 고객을 방해할 수 있습니다.

그렇지 않으면, StoreKit은 앱이 실행될 때 활성 메시지를 자동으로 표시합니다.

올해, 우리는 billingIssue라는 새로운 메시지 이유를 추가했습니다.

이 메시지는 iOS 16.4부터 사용할 수 있습니다.

App Store는 청구 문제로 인해 구독이 갱신되지 않을 때 이 메시지를 보냅니다.

StoreKit은 청구 문제 시트를 표시하며, 고객은 앱을 떠나지 않고도 문제를 해결할 수 있습니다.

이 새로운 속성은 이미 샌드박스에서 활성화되어 테스트할 시간을 제공합니다.

올해 말에 Apple Developer 웹사이트에서 모든 고객에게 언제 활성화될지에 대한 업데이트를 다시 확인하세요.

App Store가 구독을 갱신하지 못하면, 구독은 청구 재시도 상태로 전환됩니다.

샌드박스에서 이 기능을 테스트하는 방법에 대해 알아보려면, 인앱 구매 테스트에 대한 WWDC 세션을 참조하십시오.

이제, 몇 가지 보안 관련 업데이트를 검토해 봅시다.

최신 보안 관행으로 StoreKit을 최신 상태로 유지하기 위해, 우리는 영수증 서명 인증서를 SHA-1에서 SHA-256으로 마이그레이션하고 있습니다.

OpenSSL과 같은 최신 버전의 암호화 라이브러리는 이미 SHA-256을 지원하지만, 앱이 장치 내 영수증 유효성 검사를 수행하는 경우 새 인증서를 올바르게 처리하는지 확인하는 것이 중요합니다.

새로운 SHA-256 서명 인증서는 6월 20일부터 샌드박스에서 영수증에 서명하는 데 사용되며, iOS 16.6 및 macOS 13.5 이상을 실행하는 장치에서 테스트할 수 있습니다.

8월 14일 이후, 새로운 인증서는 App Store에 제출된 모든 새로운 앱과 앱 업데이트에 대한 영수증에 서명하는 데 사용될 것이다.

이 타임라인에 대한 자세한 내용은 Apple Developer 웹사이트를 확인할 수 있습니다.

앱이 StoreKit 2를 사용하는 경우, 아무것도 할 필요가 없습니다.

StoreKit 2의 서명된 거래, 갱신 정보 및 앱 거래는 이미 오늘 SHA-256을 사용하고 있습니다.

그리고 App Store 서버 API를 사용하여 영수증 유효성 검사를 수행하는 경우, 새로운 형식을 자동으로 처리하기 때문에 변경할 필요가 없습니다.

다음으로, SwiftUI를 사용하여 앱에서 인앱 구매를 매우 쉽고 빠르게 상품화할 수 있는 StoreKit의 완전히 새로운 기능 세트를 보여드리게 되어 기쁩니다.

단일 인앱 구매, 전체 제품 스토어, 심지어 구독과 관련된 일부 사용자 지정을 위한 SwiftUI 뷰를 만드는 새로운 API가 있습니다.

이러한 기능은 일반적인 SwiftUI 보기와 같으며 구현하기 위해 최소한의 코드가 필요하므로 가능한 한 빨리 앱을 시작하고 실행할 수 있습니다.

이 새로운 견해를 살펴봅시다.

이 제품 보기를 사용하면 현지화된 제목, 설명 및 선택적 홍보 이미지로 완성된 단일 인앱 구매를 나타낼 수 있습니다.

제품 식별자를 ProductView에 전달하여 만들 수 있습니다.

그리고 StoreKit 제품을 로드할 필요도 없습니다.

제품 ID 문자열을 사용할 수 있습니다.

StoreKit과 SwiftUI가 나머지를 처리할 것이다.

앱의 상점과 같은 전체 제품 컬렉션을 표시할 수 있는 새로운 보기도 있습니다.

단일 제품 식별자를 전달하는 대신, StoreView와 함께 productID 컬렉션을 사용하여 상품에 대한 제품 목록을 만든 다음 SwiftUI 구성 요소를 사용하여 추가로 사용자 정의할 수 있습니다.

StoreView는 여기에 표시된 것처럼 설정하는 데 몇 줄의 코드만 필요하기 때문에 앱이나 게임을 시작하고 인앱 구매를 지원하는 좋은 방법입니다.

마지막으로, 사용 가능한 모든 수준의 서비스와 함께 상품 구독에 대한 새로운 관점이 있습니다.

SubscriptionStoreView를 사용하여 이와 같은 구독 그룹의 사용자 지정 페이지를 빠르게 만드세요.

일반적으로 App Store Connect에서 찾을 수 있는 subscriptionGroupID만 있으면 되지만, 이제 Xcode의 StoreKit 구성에서도 사용할 수 있습니다.

이러한 새로운 보기 유형에 쉽게 추가할 수 있는 많은 가능한 사용자 지정이 있습니다.

예를 들어, 사용자 지정 배경을 만들기 위해 몇 줄의 코드를 변경하면 이 SubscriptionStoreView의 모양이 어떻게 크게 바뀔 수 있는지 확인하세요.

이러한 새로운 구독 변경 사항과 함께, 우리는 또한 사람들이 StoreKit 앱에서 상호 작용하고 구독을 선택할 수 있는 방법에 대한 새로운 경험을 제공하기 위해 추가 관리 구독 시트를 추가하고 있습니다.

한 번 보자.

여기에서 구독을 관리하는 친숙한 흐름을 볼 수 있으며, 이는 고객에게 현재 활성 계층이 있는 시트를 보여주고 각 계층을 탭하여 해당 구독 그룹에서 사용할 수 있는 다른 계층의 목록을 볼 수 있는 옵션을 제공합니다.

이 과정을 더 빠르게 만들고 더 많은 사용자 지정을 제공하기 위해, 이제 단계를 건너뛰고 보여주고 싶은 구독 그룹으로 바로 이동할 수 있는 또 다른 보기가 있습니다.

예를 들어, 하나 이상의 구독 그룹이 있는 경우 앱의 컨텍스트에서 관련 구독 그룹을 선택하고 고객이 선택할 수 있는 다른 서비스 수준을 보여줄 수 있습니다.

이 시트는 일반 API와 동일한 API와 함께 사용할 수 있습니다: .manageSubscriptionsSheet.

이번에는 subscriptionGroupID 매개 변수를 추가로 전달하세요.

StoreKit으로 SwiftUI 앱을 만드는 주제에 대해 보여줄 것이 훨씬 더 많으며, 앱의 미학에 맞게 적용할 수 있는 다른 많은 보기와 사용자 지정이 있습니다.

더 알고 싶다면, 그렉은 "SwiftUI를 위한 StoreKit을 만나세요"에서 그것에 대해 알려줄 것입니다.

StoreKit에서 인앱 구매의 새로운 기능을 살펴본 후, Xcode 15부터 시작하여 Xcode의 StoreKit 테스트에서 새로운 도구를 사용하여 어떻게 테스트할 수 있는지 봅시다.

Xcode의 StoreKit 테스트를 사용하면 App Store Connect에서 무언가를 설정하기 전에도 StoreKit을 사용하여 앱을 빌드를 시작할 때부터 훌륭한 경험을 제공할 수 있습니다.

이를 통해 Mac에서 테스트하는 동안 StoreKit과 관련된 작업을 테스트, 관리, 편집 및 만들 수 있으며, 시뮬레이터와 장치 모두에서 지원됩니다.

거래 관리자부터 시작하여, 앱을 디버깅하고 테스트하기 위한 새로운 기능이 있습니다.

이제 모든 테스트 앱을 구성합니다.

네비게이터에서 테스트를 위해 StoreKit 구성을 사용하여 현재 StoreKit 앱이 설치된 현재 연결된 모든 장치와 시뮬레이터를 볼 수 있습니다.

이를 통해 여러 장치에서 동시에 훨씬 더 쉽고 빠르게 테스트할 수 있으며, 구매 내역을 보기 위해 앱을 실행할 필요가 없습니다.

뛰어들어 그게 어떻게 생겼는지 보자.

나는 내 Mac에 연결된 iPhone과 실행 중인 시뮬레이터를 모두 가지고 있다.

그리고 저는 새로운 개발 중인 게임인 Backyard Birds를 사용하고 있습니다.

Xcode를 열 때, 프로젝트가 열렸든 열렸든 아니든, 디버그, StoreKit, 거래 관리로 이동하여 이미 익숙한 거래 관리자 보기를 볼 수 있습니다.

네비게이터에서, 당신은 당신의 Mac에 연결된 모든 현재 장치를 볼 수 있습니다.

제 경우에는, 이것은 실제 아이폰과 시뮬레이터입니다.

둘 다 뒷마당 새를 포함하여 이 목록에 표시되는 몇 가지 앱을 어떻게 가지고 있는지 주목하세요.

이것들은 디버그 세션 외부에서 검사할 수 있는 Xcode에서 StoreKit 테스트를 사용하는 모든 앱입니다.

이 장치 중 하나에서 앱을 클릭하면 해당 앱의 StoreKit 거래 목록을 볼 수 있으며, 작년에 보여준 세부 사항 사이드바를 통해 각각을 개별적으로 검사할 수 있습니다.

예를 들어, 뒷마당 새를 위한 Xcode 프로젝트를 열고 시뮬레이터에서 실행하면 이것도 작동합니다.

이 경우, 앱 이름 옆에 이 작은 표시기가 있기 때문에 어떤 앱이 적극적으로 디버깅되고 있는지 볼 수 있습니다.

이것은 거래 관리자에게 새로운 것이 전부는 아니다.

이제 Xcode를 사용하여 Mac에서 바로 앱에 대한 인앱 구매를 할 수 있다는 것을 보여드리게 되어 기쁩니다.

또한, 새로운 구매를 만들 때, 소모품의 수량과 같은 다양한 구매 매개 변수를 사용자 정의하거나 구독에 대한 제안 코드를 선택할 수 있습니다.

뒷마당 새를 사용하여 실제로 어떻게 작동하는지 봅시다.

먼저 테스트하고 싶은 앱을 선택해야 합니다.

그런 다음, 필터 바 왼쪽에 있는 더하기 버튼을 클릭하여 새로운 구매를 만드세요.

팝업에는 이 앱에서 사용 가능한 모든 인앱 구매가 나열되어 있습니다.

이것들은 우리가 StoreKit 구성에서 구성한 것과 동일한 제품입니다.

저는 먼저 소모품을 구매할 예정이므로, 영양 펠렛을 선택하고 다음을 클릭할 수 있습니다.

이제, 저는 이 새로운 구매를 구성할 기회가 있지만, 건너뛰고 싶다면 기본 옵션도 유효합니다.

저는 이 설정에 만족하므로, 완료를 클릭하여 이 매개 변수를 사용하여 구매를 완료합시다.

앱이 시뮬레이터에서 실행되지는 않지만, StoreKit은 새로운 구매를 받고 처리했습니다.

거래 목록을 보면, 이제 상단에 새로운 항목이 있습니다.

그것을 클릭하면, 이 새로운 거래에 대한 세부 사항을 검사할 수 있습니다.

그러나 구독은 다르므로, 다른 구매를 합시다.

나는 새로운 구매를 만들기 위해 더하기 버튼을 다시 클릭할 것이고, 이번에는 이 앱에서 구독 이름을 검색한 다음, 내가 찾고 있는 것을 선택하고, 다음을 클릭할 것이다.

이것은 다른 유형의 인앱 구매이기 때문에 구매를 구성하는 옵션이 변경되었습니다.

일부는 구매일과 동일하지만, 새로운 것들도 있으니, 그들이 무엇을 하는지 살펴봅시다.

그건 그렇고, 기본 속성은 여기서도 유효합니다.

StoreKit 구성에 설정된 경우, 이 구독에 대한 제안 코드를 선택할 수 있는 옵션이 있습니다.

고객은 제안 코드와 프로모션을 입력해야 하지만, 테스트를 더 쉽게 하기 위해, 우리는 이 제품 ID에 사용 가능한 제안 목록을 제공합니다.

이 경우 구매일을 변경하고 작년 WWDC에서 이 서비스를 처음 구독한 것처럼 정확히 1년 전으로 설정하고 싶습니다.

다음으로, 이 구독이 자동으로 갱신되어야 하는지 아니면 정확히 한 구독 기간 동안만 구독해야 하는지 선택할 수 있으며, 이 제품의 경우 한 달이 될 것입니다.

앱을 사용하기 전에 활성 구독을 어떻게 처리하는지 테스트할 수 있도록 자동 갱신을 활성화하고 싶습니다.

완료를 클릭하여 구매를 완료하고 거래 목록을 필터링하여 결과를 봅시다.

예상대로, 나는 작년부터 매달 한 번 갱신이 있다.

이것들은 모두 현재 미완성으로 표시되어 있습니다. 왜냐하면 앱이 실행되지 않았고 그것들을 받을 기회가 없었기 때문입니다. 그래서 저는 시뮬레이터에서 실행하고 이제 Backyard Birds Pass에 접근할 수 있는지 확인할 것입니다.

거래 관리자의 새로운 기능은 iOS 17 및 macOS 14부터 이미 Xcode에서 StoreKit 테스트를 지원하는 모든 장치와 플랫폼에서 작동합니다.

그리고 그것들은 iPadOS, watchOS 및 tvOS를 포함한 다른 플랫폼에서도 지원됩니다.

이전 버전의 운영 체제를 실행하는 경우, 아무것도 변경되지 않습니다: 트랜잭션 관리자는 활성 디버그 세션을 사용할 때 이전과 동일한 모든 기능과 여전히 호환됩니다.

다음으로, StoreKit 앱이 다양한 시나리오에서 어떻게 작동하는지 보다 심층적으로 테스트할 수 있는 StoreKit 구성의 새로운 기능을 소개하고자 합니다.

이것을 증명하기 위해, 나는 Backyard Birds를 위한 Xcode 프로젝트를 열고 StoreKit 구성으로 갈 것이다.

이제 구성된 인앱 구매 위에 구성 설정이라는 새로운 항목이 있습니다.

이것은 앱의 테스트 환경에 대한 구성 가능한 옵션을 제공하기 위해 추가한 새로운 메뉴이며, 일부는 이미 익숙할 수 있으며, Xcode 15로 시작하는 새로운 옵션도 있습니다.

이 첫 번째와 두 번째 섹션은 기본 상점과 앱이 가격 및 가용성을 위해 사용해야 하는 로케일과 같은 모든 기존 옵션과 구독 갱신 속도 또는 강제 구매 요청 기능과 같은 모든 기존 옵션을 다룹니다.

이전 버전의 Xcode에서는 StoreKit 구성이 열릴 때 편집기 메뉴에서 이것들을 찾을 수 있으며, 여전히 거기에 있으며 서로 바꿔서 사용할 수 있습니다.

StoreKit 테스트 옵션에 대해 이야기하는 동안, 올해 iOS 16.4에 추가한 새로운 구독 갱신율이 있습니다.

이것들은 갱신별로 구독 만료를 변경하도록 설계되었으며, 구독의 실제 기간보다 더 빨리 일관된 갱신을 생성할 수 있도록 도와줍니다.

이것은 구독의 장기 상태에 대한 빠르고 신뢰할 수 있는 테스트에 정말 도움이 됩니다.

편집기 메뉴와 Xcode 15의 StoreKit 구성 설정 모두에서 이러한 새로운 구성 가능한 요금을 찾을 수 있습니다.

StoreKit 구성 설정의 세 번째 섹션에서는 많은 사람들이 많이 요청한 기능인 앱에서 StoreKit 오류를 시뮬레이션하는 데 사용할 수 있는 옵션을 다룹니다.

편집기 메뉴에 있던 실패 트랜잭션 하위 메뉴를 확장하고, 더 많은 StoreKit API와 오류 유형을 지원합니다.

각 옵션은 앱이 사용할 수 있는 StoreKit 2 API를 나타내며 앱이 호출할 때마다 API가 발생해야 하는 오류를 선택할 수 있습니다.

이 기능은 수많은 API를 지원합니다.

제품 로딩 문제, 구매 실패, 영수증 및 거래 확인 문제, 환불 요청 등을 테스트할 수 있습니다.

이것이 실제로 어떻게 생겼는지 봅시다.

뒷마당 새를 위한 Xcode 프로젝트가 왼쪽에 열려 있고 오른쪽의 시뮬레이터에서 실행되는 앱이 있습니다.

StoreKit 구성에서 구매 API 이름 옆의 확인란을 사용하여 구매 오류를 활성화하고 발생해야 할 오류를 선택할 수 있습니다.

고객이 매장을 변경할 때 앱이 구매를 어떻게 처리하는지 테스트하고 싶기 때문에, 사용할 수 없는 제품을 선택하겠습니다.

이 파일은 편집에 자동으로 저장되며, 앱이 실행 중일 때 장치에 동기화되므로 앱을 다시 실행할 필요 없이 즉시 변경 사항을 테스트할 수 있습니다.

제품을 구매하고 무슨 일이 일어나는지 봅시다.

예상대로, 그것은 실패했다.

이 제품을 구매할 수 없으며 더 많은 정보를 위해 개발자에게 연락해야 합니다.

이제 구매 오류를 비활성화하고 이번에는 성공적으로 완료될 수 있도록 다시 시도해 봅시다.

이 단계를 통해, 저는 이제 이 앱의 코드가 구매할 때 이러한 종류의 오류를 처리할 수 있는지 효과적으로 테스트했습니다.

이 방법은 StoreKit 구성 설정의 API 및 오류 옵션에 적용하여 여러 시나리오를 다루고 앱이 강력한지 확인할 수 있습니다.

이러한 오류는 모두 StoreKit의 일부이며, 이미 발생했을 수도 있습니다.

그들 각각은 당신의 앱에서 실패의 명백한 사례를 나타냅니다.

그리고 그것은 Xcode에서 StoreKit 테스트를 위한 모든 새로운 기능이다.

오늘, 저는 디버그 세션 이외의 여러 장치에서 거래를 검사하고 관리하는 방법, 앱이 기존 구매를 처리하는 방법을 테스트하기 위해 거래 관리자에서 제품을 구매하는 방법, 그리고 많은 가능한 실패 시나리오를 다루기 위해 StoreKit 오류를 시뮬레이션하는 방법을 보여주었습니다.

Xcode의 이러한 모든 새로운 기능은 StoreKit Test 프레임워크를 사용하여 앱에 대한 단위 테스트를 작성하는 코드에서도 사용할 수 있으므로 모든 동일한 작업을 수행하는 자동화를 작성할 수 있습니다.

장치 밖에서 구매를 만들고 XCTest 세션에서 시뮬레이션된 오류를 설정하기 위한 새로운 API를 살펴봅시다.

새로운 인앱 구매를 만들기 위해, StoreKitTest에는 StoreKit 구매(_:) API와 동일한 방식으로 작동하는 새로운 Swift API가 있으며, 동일한 구매 옵션도 있습니다.

구매일 변경과 같은 새로운 구매 기능을 지원하기 위해, 우리는 또한 테스트를 위해서만 새로운 구매 옵션을 추가했습니다.

예를 들어 봅시다.

SKTestSession을 설정한 후, 저는 구독을 위해 장치 밖에서 구매하고 구매일을 오늘부터 1년 전으로 재정의하고 있습니다.

이것은 내가 거래 관리자에서 구매한 것과 동일하며, 정확히 같은 방식으로 작동하므로 반복 가능한 결과를 만들고 앱에 대한 테스트를 자동화할 수 있습니다.

또한 StoreKitTest에는 SKTestSession에서 StoreKit 오류를 시뮬레이션하기 위한 몇 가지 새로운 API가 있으며, StoreKit 구성 설정에서 시뮬레이션된 오류와 같은 방식으로 작동합니다.

테스트 세션을 만든 후, 테스트하려는 오류 유형과 시뮬레이션해야 하는 StoreKit API로 setSimulatedError를 호출할 수 있습니다.

이 예에서, 저는 loadProducts API에 대한 네트워크 오류를 시뮬레이션하도록 선택하고 있습니다.

이 테스트에서 loadProducts API를 호출할 때마다, 항상 같은 오류가 발생합니다.

시뮬레이션된 실패를 비활성화하려면, 동일한 세터 API를 사용하고 오류 유형 대신 nil을 통과하십시오.

마지막으로, 새로운 구독 갱신 요금에 대한 API도 있습니다.

이것들은 timeRate라고 불리는 SKTestSession의 회원을 통해 기존 것과 같은 방식으로 접근할 수 있다.

구독 구매를 위한 이 예제 테스트에서, 저는 더 빠른 갱신율을 설정하고 여러 갱신을 빠르게 생성하기 위해 추가 코드 줄을 추가했습니다.

Xcode 기능의 많은 새로운 StoreKit 및 StoreKit 테스트가 오늘 다루어졌다.

StoreKit에는 인앱 구매 홍보를 지원하는 새로운 API가 있으며, Transaction 및 RenewalInfo의 데이터 모델은 더 중요한 정보를 제공하기 위해 몇 가지 개선되었으며, 청구 문제를 처리하기 위해 들을 수 있는 새로운 메시지 유형이 있습니다.

SwiftUI의 새로운 StoreKit 보기는 제품 머천다이징을 지원하는 앱을 빠르게 구축할 수 있는 훌륭한 도구이며, 모든 장치에서 작동하는 데 추가 코드가 필요하지 않습니다.

그리고 마지막으로, Xcode에서 StoreKit 테스트와 함께 제공되는 훌륭한 도구를 사용하여 앱의 모든 StoreKit 기능을 검증할 수 있습니다.

StoreKit 2는 멋진 앱을 만들고 비즈니스를 성장시킬 수 있는 많은 훌륭한 기능으로 가득합니다.

우리는 Swift를 최대한 활용하는 많은 도구를 추가했으며, 간단하지만 강력한 새로운 API를 사용하면 고객을 위해 구축하고 있는 경험에 더 집중할 수 있습니다.

제품과 구독을 상품화하려는 모든 앱은 이제 StoreKit 2를 사용하여 구축할 수 있습니다.

아직 StoreKit 2를 사용하지 않는다면, 시도해 보세요, 만약 그렇다면, 제가 오늘 보여준 새로운 기능에 대해 어떻게 생각하는지 알려주세요.

기존 앱에서 새로운 인앱 구매 머천다이징 뷰를 사용하여 경험을 추가로 사용자 정의하거나, 이러한 새로운 API만을 사용하여 새로운 경험을 만드세요.

그리고 Xcode의 StoreKit 테스트를 사용하면 코드를 테스트하고 모든 것이 잘 작동하고 모든 조건에서 고객에게 최고의 경험을 제공할 수 있도록 할 수 있습니다.

다른 StoreKit 기능에 대한 자세한 내용은 아래에 링크된 세션을 확인하세요.

우리는 당신이 StoreKit 2를 사용하여 만드는 것을 보기를 기대합니다.

봐줘서 고마워.