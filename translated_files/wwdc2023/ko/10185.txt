10185

♪ ♪

제프: 안녕하세요, 저는 라이브 활동 팀의 엔지니어인 제프입니다.

푸시 알림으로 라이브 활동을 업데이트하는 것을 당신과 공유할 수 있게 되어 기쁩니다.

라이브 활동은 진행 중인 활동에 대해 누군가에게 눈길을 수 있는 정보를 표시할 수 있는 좋은 방법입니다.

ActivityKit을 사용하면 앱이 라이브 활동을 시작, 업데이트 및 종료할 수 있습니다.

그런 다음, WidgetKit과 SwiftUI를 활용하여 사용자에게 정보를 표시하는 UI를 구축할 수 있습니다.

이러한 기술에 대해 더 알고 싶다면, Can의 "Meet ActivityKit" 세션을 확인하세요.

"Meet ActivityKit" 세션에서, 영웅의 모험 상태를 표시하기 위해 이모티콘 레인저에 새로운 라이브 활동을 추가할 수 있습니다.

하지만 영웅에게 동반자가 있다면 더 재미있을 것 같아.

그래서 저는 여러 사용자가 영웅과 파티를 형성하고 함께 모험을 보낼 수 있는 새로운 기능을 추가하고 싶습니다.

최고의 사용자 경험을 제공하기 위해, 파티의 모든 영웅을 위한 이벤트를 보여주기 위해 라이브 활동을 업데이트할 것입니다.

이를 달성하기 위해, 나는 장치에서 하는 대신 모험을 추적할 수 있는 서버를 소개할 것이다.

서버는 라이브 활동을 최신 상태로 유지할 책임이 있다.

그리고 계산은 서버에서 이루어지기 때문에, 앱은 라이브 활동을 업데이트하기 위해 포그라운드 런타임이 필요하지 않습니다.

이것은 사용자의 배터리 수명에 미치는 영향을 낮출 것이다.

ActivityKit 푸시 알림으로 라이브 활동을 업데이트하는 것이 이 기능을 구현하는 좋은 방법이라고 생각합니다.

이 세션에서 가장 먼저 다룰 것은 푸시 업데이트로 라이브 활동을 업데이트할 수 있도록 준비해야 합니다.

그럼 내가 네 컴퓨터에서 첫 번째 푸시 업데이트를 보내도록 안내해 줄게.

셋째, 우리는 업데이트 우선 순위와 사용자에게 경고하는 방법의 차이점에 대해 논의할 것입니다.

마지막으로, 푸시 업데이트를 통해 다음 단계로 끌어올릴 수 있는 추가 개선 사항을 살펴보겠습니다.

준비를 시작합시다.

푸시 업데이트로 라이브 활동을 업데이트하기 전에, 앱과 서버가 Apple 푸시 알림 서비스와 어떻게 상호 작용하는지 이해하는 것이 도움이 됩니다.

모든 것은 당신의 앱으로 시작됩니다.

새로운 라이브 활동이 시작되면, ActivityKit은 Apple 푸시 알림 서비스 또는 줄여서 APNs에서 푸시 토큰을 얻습니다.

이 푸시 토큰은 요청하는 각 라이브 활동에 대해 고유합니다.

그렇기 때문에 앱이 푸시 업데이트를 보내기 전에 서버로 보내야 합니다.

그런 다음, 라이브 활동을 업데이트해야 할 때마다, 서버는 토큰을 사용하여 APNs에 푸시 요청을 보냅니다.

마지막으로, APNs는 페이로드를 장치로 보내고, UI를 렌더링하기 위해 위젯 확장을 깨울 것입니다.

이 새로운 기능을 지원하기 위해, APNs는 새로운 활동 푸시 유형을 도입했다.

이 푸시 유형은 APN에 토큰 기반 연결이 있는 서버에서만 사용할 수 있습니다.

푸시 요청을 보내는 방법에 대한 자세한 내용은 "APNs에 알림 요청 보내기" 문서를 참조하십시오.

토큰 기반 연결에 대한 자세한 내용은 "APN에 대한 토큰 기반 연결 설정"을 참조하십시오.

다음 단계는 라이브 활동이 푸시 업데이트를 받도록 구성되도록 앱을 수정하는 것입니다.

Xcode에서 앱 타겟으로 이동하세요.

"서명 및 기능" 탭에서 푸시 알림 기능을 추가하세요.

이를 통해 ActivityKit은 앱을 대신하여 푸시 토큰을 요청할 수 있습니다.

나는 이제 코드에 뛰어들 것이다.

여기 라이브 활동을 요청하는 이모티콘 레인저스의 코드 조각이 있습니다.

나는 활동 요청 방법에 모험의 속성과 초기 콘텐츠 상태를 제공한다.

푸시 업데이트 수신을 지원하려면, 푸시타입 매개 변수를 메소드에 추가하고 값을 "토큰"으로 설정하십시오.

이렇게 하면 ActivityKit이 생성 시 라이브 활동에 대한 푸시 토큰을 요청할 수 있습니다.

활동이 생성되면, 앱은 푸시 토큰을 서버로 보내야 합니다.

활동 유형에는 푸시 토큰에 동기적으로 액세스할 수 있는 pushToken 속성이 있습니다.

그러나, 활동이 생성된 직후에 접근하지 마세요.

당신이 얻는 가치는 대부분의 경우 0이 될 것입니다.

푸시 토큰을 요청하는 것은 비동기 과정이기 때문이다.

또한, 시스템은 활동 기간 동안 푸시 토큰을 업데이트할 수 있습니다.

그래서 당신의 앱은 그에 따라 그것을 처리해야 합니다.

푸시 토큰을 제대로 처리하는 방법은 먼저 비동기 작업을 만드는 것이다.

그런 다음 활동의 pushTokenUpdates 비동기 시퀀스의 값을 관찰하는 for-await 루프를 시작하세요.

For 루프 내부의 코드는 라이브 활동에 대한 새로운 푸시 토큰이 있을 때마다 실행됩니다.

첫 번째 푸시 토큰뿐만 아니라 후속 푸시 토큰 업데이트도 처리할 수 있기 때문에 여기서 비동기 루프를 사용하는 것이 중요합니다.

토큰을 받으면, 16진수 문자열로 변환하고, 디버그 콘솔에 기록하세요.

이것은 다음 섹션에서 테스트하는 동안 유용할 것이다.

그런 다음 마지막으로, 앱에 필요한 다른 데이터와 함께 푸시 토큰을 서버로 보내세요.

푸시 토큰은 각 활동에 대해 고유하므로, 사용자가 시작하는 각 라이브 활동에 대해 추적하는 것이 중요합니다.

또한, 시스템이 기존 활동에 대한 새로운 푸시 토큰을 요청할 때, 앱에는 그에 따라 처리할 수 있는 포그라운드 런타임이 주어집니다.

새 푸시 토큰을 서버로 보내고 이전 토큰을 무효화하는 것이 중요하므로 후속 푸시 업데이트가 올바르게 전송됩니다.

이제 준비가 완료되었습니다, 첫 번째 푸시 업데이트를 보낼 시간입니다.

푸시 업데이트를 보내려면, APNs에 HTTP 요청을 보내야 합니다.

요청은 APNs 헤더와 APNs 페이로드의 두 부분으로 구성되어 있다.

일반 HTTP 헤더 외에도 제공해야 하는 세 개의 헤더가 있습니다.

첫 번째는 apns 푸시 타입이다. 그 가치는 생활이다.

다음은 앱의 번들 ID인 apns-topic이며, 그 다음은 .push-type.liveactivity입니다.

세 번째는 apns-priority이며, 5 또는 10의 값이 될 수 있다.

5는 이 푸시 요청이 우선 순위가 낮다는 것을 나타내는 반면, 10은 높은 우선 순위를 나타냅니다.

라이브 액티비티를 즉시 업데이트하기 때문에 테스트 중에 높은 우선 순위를 사용할 것입니다.

첫 번째 APNs 페이로드의 경우, 세 개의 필드로 구성된 것을 보낼 것입니다.

첫 번째는 1970년 이후 초 단위의 시간 간격인 "타임스탬프"이다.

시스템은 타임스탬프를 사용하여 항상 최신 콘텐츠 상태를 렌더링하고 있는지 확인합니다.

두 번째는 "이벤트"이다.

그것은 당신이 라이브 활동에서 수행하고 싶은 행동입니다.

그것의 값은 "업데이트" 또는 "종료"이다.

이 초기 APNs 요청에 대해 "업데이트"로 설정해야 합니다.

세 번째 필드는 "콘텐츠 상태"이다.

이것은 활동의 콘텐츠 상태 유형으로 디코딩할 수 있는 JSON 객체입니다.

콘텐츠 상태를 올바른 형식으로 얻으려면, 앱 내에서 Foundation의 JSONEncoder 유형을 사용할 수 있습니다.

여기서, 저는 라이브 활동의 ContentState의 인스턴스를 만듭니다.

그런 다음 JSONEncoder를 인스턴스화합니다.

마지막으로, 콘텐츠 상태를 JSON 데이터로 인코딩하고 문자열 표현을 콘솔에 기록합니다.

낙타 케이스 키가 있는 이 JSON 출력은 내가 예상했던 것과 똑같이 보인다.

콘텐츠 상태 JSON은 항상 기본 디코딩 전략이 있는 JSONDecoder를 사용하여 디코딩됩니다.

따라서 콘텐츠 상태를 인코딩할 때, 사용자 지정 인코딩 전략을 설정하지 마세요.

그렇지 않으면, 당신의 JSON은 일치하지 않을 것이며, 시스템은 당신의 라이브 활동을 업데이트하지 못할 것입니다.

이제 푸시 요청에 무엇이 수반되는지 알았으니, 다음 단계는 하나를 보내는 것을 테스트하는 것입니다.

나는 개발 중에 빠르게 반복할 수 있는 열렬한 팬이다.

그래서 저는 서버를 수정할 필요 없이 라이브 활동 푸시 알림을 테스트하는 것을 좋아합니다.

터미널에서 직접 APNs에 푸시 요청을 보내면 이것을 달성할 수 있습니다.

이를 위해 명령줄을 설정하려면, "명령줄 도구를 사용하여 푸시 알림 보내기" 문서를 참조하십시오.

"토큰을 사용하여 푸시 알림 보내기" 섹션의 지침을 따르고 있는지 확인하세요.

인증 토큰 변수를 인쇄하여 모든 것이 올바르게 설정되었는지 빠르게 확인할 수 있습니다.

당신이 필요한 다음 정보는 푸시 토큰입니다.

이전 섹션에서, 나는 푸시 토큰을 콘솔에 기록하기 위한 코드를 추가했다.

그래서 그게 내가 그걸 얻을 곳이야.

같은 접근 방식을 취했다면, 앱을 장치에 배포하고 라이브 활동을 시작하세요.

당신의 앱은 활동이 시작된 직후에 푸시 토큰을 기록할 것입니다.

푸시 토큰을 복사하여 터미널에서 활동 푸시 토큰 변수로 설정하세요.

APNs 요청을 보내려면, 당신은 curl 명령을 실행할 것입니다.

여기 제가 모험 라이브 활동을 위해 만든 것이 있습니다.

"Apns-topic" 헤더는 앱의 번들 ID와 푸시 유형 접미사로 설정됩니다.

그런 다음 "apns-push-type" 헤더는 liveactivity로 설정됩니다.

셋째, "apns-priority"는 10으로 설정되어 있으므로, 제 요청은 즉시 전달될 것입니다.

최종 HTTP 헤더인 "승인"은 "bearer"로 설정되고 그 다음에 인증 토큰 변수가 있습니다.

데이터에 관해서는, 그것은 전체 APNs 페이로드를 포함한다.

숫자가 두 번째까지 정확한지 확인하기 위해 타임스탬프를 자동으로 만들기 위해 날짜 명령을 사용하고 있습니다.

마지막으로, URL의 경우, HTTP2를 사용하고 있는지 확인하세요.

그리고 URL의 끝에서, 나는 이전 단계에서 설정된 활동 푸시 토큰 변수를 참조한다.

그리고 그게 다야.

이 curl 명령을 실행하면, 라이브 활동은 페이로드에 제공된 새로운 콘텐츠 상태로 업데이트됩니다.

때때로, 당신은 당신의 라이브 활동이 예상했을 때 업데이트되지 않은 상황을 볼 수 있습니다.

가장 먼저 확인해야 할 것은 curl 명령을 실행할 때 오류 응답이 없다는 것입니다.

오류는 요청에 잘못된 필드를 나타내거나 환경을 설정할 때 문제가 있을 수 있습니다.

APNs가 성공적인 응답을 반환했지만 라이브 활동이 여전히 업데이트되지 않은 경우, 콘솔 앱을 사용하여 장치 로그를 보고 문제를 선별할 수 있습니다.

관련 로그가 있을 수 있는 프로세스는 liveactivitiesd, apsd 및 chronod입니다.

라이브 활동이 푸시 알림으로 업데이트되는 방식에 만족하면, 실제 푸시 업데이트를 보내기 위해 서버를 수정할 때가 될 것입니다.

그리고 그것은 당신의 사용자 경험, 우선 순위 및 경고를 설계하는 데 중요한 부분으로 저를 데려갑니다.

최고의 사용자 경험을 보장하기 위해, 각 업데이트에 대한 올바른 푸시 우선 순위를 선택하는 것이 중요합니다.

항상 먼저 사용하는 것을 고려해야 하는 우선 순위는 낮은 우선 순위입니다.

우선 순위가 낮은 업데이트는 기회적으로 전달되어 사용자의 배터리 수명에 미치는 영향을 낮춥니다.

그러나, 이것은 푸시 요청이 전송될 때 라이브 활동이 즉시 업데이트되지 않을 수 있음을 의미합니다.

따라서 시간에 덜 민감한 업데이트에는 낮은 우선 순위를 사용해야 합니다.

내 모험 라이브 활동을 위해, 일반적인 전리품을 찾거나 몇 가지 건강 포인트를 치유하는 영웅을 찾는 것과 같은 업데이트는 사용자의 즉각적인 관심을 필요로 하지 않습니다.

그것이 그들이 우선 순위가 낮은 업데이트를 사용하기에 좋은 후보자인 이유이다.

낮은 우선 순위를 사용하는 또 다른 이점은 보낼 수 있는 업데이트 수에 제한이 없다는 것입니다.

이를 활용하려면, 대부분의 라이브 활동 업데이트에 낮은 우선 순위를 사용해야 합니다.

반면에, 특정 업데이트는 영웅이 쓰러지거나 주요 보스가 패배할 때와 같이 사용자의 즉각적인 주의가 필요합니다.

이러한 경우, 나는 우선 순위가 높은 업데이트를 선택할 것이다.

우선 순위가 높은 업데이트는 즉시 전달됩니다.

그것이 그들이 시간에 민감한 업데이트에 완벽한 이유이다.

그러나, 사용자의 배터리 수명에 미치는 영향으로 인해, 시스템은 장치 상태에 따라 예산을 부과한다.

앱이 예산을 초과하면, 시스템은 푸시 업데이트를 제한할 것이며, 사용자 경험에 극적인 영향을 미칠 것입니다.

당신은 당신의 앱을 가장 잘 알고 있으므로, 어떤 업데이트에 어떤 우선 순위를 사용해야 하는지 신중하게 고려하는 것이 중요합니다.

이모티콘 레인저스에서, 나는 파티가 한 명의 주요 보스와 차례로 싸우는 특별한 유형의 모험을 소개하고 있다.

이 집중적인 라이브 활동에 대한 최고의 사용자 경험을 제공하기 위해, 최신 상태로 유지하기 위해 우선 순위가 높은 푸시를 자주 보내는 서버가 필요합니다.

이를 지원하기 위해, 저는 앱의 라이브 활동 빈번한 업데이트 기능을 활성화할 것입니다.

이 기능을 활성화하면 앱이 더 높은 업데이트 예산을 얻을 수 있으므로 라이브 활동 업데이트가 제한될 가능성이 적습니다.

이 기능을 채택하려면 NSSupportsLiveActivitiesFrequentUpdates라는 정보 plist에 새 키를 추가하고 값을 YES로 설정하기만 하면 됩니다.

사용자는 설정에서 라이브 활동과 독립적으로 빈번한 업데이트를 비활성화할 수 있습니다.

따라서 ActivityAuthorizationInfo frequentPushesEnabled 속성에 액세스하여 빈번한 업데이트 기능의 상태를 감지할 수 있습니다.

서버는 이 값에 따라 업데이트 빈도를 조정해야 하므로, 푸시 업데이트를 보내기 전에 서버로 보내야 합니다.

활동이 시작된 후 이 값을 한 번만 확인하면 됩니다.

이 값이 변경되면, 시스템은 진행 중인 모든 활동을 종료하므로, 서버는 활동 수명 동안 잦은 업데이트가 전환되는 것에 대해 걱정할 필요가 없습니다.

모험 라이브 활동에서, 영웅이 쓰러질 때, 즉시 업데이트하는 것 외에도, 나는 또한 사용자의 관심을 끌고 싶어, 그래서 그들은 즉시 앱에 들어가서 치유 물약을 사용할 수 있다.

이를 위해, 나는 페이로드에 세 개의 필드가 있는 추가 "경고" 객체를 추가할 것이다.

"제목"은 알림의 제목이 될 것이다.

"바디"는 업데이트에 대한 짧은 메시지가 될 것이다.

"소리"는 경고가 트리거될 때 재생되는 소리를 나타냅니다.

이모티콘 레인저스는 여러 언어를 지원하므로, 영어로만 알림을 보내는 것은 이상적이지 않지만, 내 서버에서 현지화를 처리하는 것은 매우 까다롭다.

고맙게도, 경고 객체의 "title"과 "body" 필드를 설정하는 또 다른 방법이 있습니다.

문자열을 전달하는 대신, 지역화된 문자열 객체로 설정할 수 있습니다.

"Loc-key" 필드는 앱의 현지화 파일에서 찾을 수 있는 현지화 키입니다.

"Loc-args" 필드는 지역화된 문자열에 삽입될 값 목록이 될 것이다.

이제 장치는 사용자의 로케일에 따라 알림을 자동으로 현지화할 것입니다.

경고에 마지막 터치를 추가하기 위해, 다른 업데이트에 대한 사용자 지정 사운드를 추가하고 싶습니다.

이를 달성하기 위해, 먼저, 사운드 파일을 앱의 대상에 리소스로 추가해야 합니다.

그런 다음 경고 객체의 "소리" 필드를 내 사운드의 파일 이름으로 설정하세요.

그리고 그게 다야. 이제 내 경고가 좋아 보이고 멋지게 들린다.

이제 저는 라이브 액티비티 사용자 경험을 정말 세련시키기 위해 개선할 것입니다.

모험이 끝나면, 나는 라이브 활동을 끝내고 일정 시간 후에 그것을 무시하고 싶다.

나는 이벤트가 끝나도록 설정된 푸시 페이로드를 보내서 이것을 할 것이다.

잠금 화면에서 라이브 활동을 언제 제거해야 하는지 제어하고 싶기 때문에 사용자 지정 "해고 날짜"를 제공합니다.

이 필드를 생략하여 시스템이 언제 라이브 활동을 해제할지 결정할 수 있도록 할 수 있습니다.

"해고 날짜"의 값은 1970년 이후 초 단위의 시간 간격이어야 한다.

저는 또한 라이브 활동에 최종 업데이트를 제공하기 위해 최종 콘텐츠 상태를 제공하고 있습니다.

이것은 또한 선택 사항이며, 제외되면, 활동은 기각될 때까지 이전 콘텐츠 상태를 계속 표시할 것입니다.

때때로, 사용자의 장치는 푸시 알림을 받지 못할 수 있다.

그리고 모험 라이브 활동은 여전히 오래된 건강 가치를 보여줄 수 있다.

이러한 시나리오에서, 저는 라이브 활동 UI의 사용자에게 부정확한 정보를 표시할 수 있다고 경고하고 싶습니다.

이를 달성하기 위해, 나는 페이로드에 "stale-date" 필드를 추가한다.

시스템은 당신의 오래된 보기를 렌더링할 시기를 결정하기 위해 이 날짜를 사용할 것입니다.

위젯 확장에 선언된 ActivityConfiguration에서 오래된 보기를 제공할 수 있습니다.

내가 해야 할 일은 내 견해가 ActivityViewContext의 isStale 속성 값에 반응하도록 하는 것이다.

동시에 여러 모험 라이브 활동이 있을 때, 잠금 화면에서 올바르게 주문되었는지 확인하고 싶습니다.

더 중요한 업데이트가 있는 것은 정상 근처에 있어야 하며, 가장 중요한 것은 다이나믹 아일랜드에 있어야 한다.

나는 선택적인 "관련 점수" 필드를 제공함으로써 이것을 정리할 수 있다.

숫자가 높을수록 관련성이 높다는 것을 나타낸다.

이제 푸시 알림으로 라이브 활동을 업데이트하는 방법을 알았으니, 앱에 추가할 시간입니다.

가장 먼저 해야 할 일은 ActivityKit 푸시 알림을 지원하도록 서버와 앱을 구성하는 것입니다.

그런 다음 빠르게 반복하기 위해 터미널에서 푸시 업데이트를 보내는 것을 테스트하세요.

그것에 만족하면, 서버에서 엔드 투 엔드 지원을 구현하기 시작하세요.

한편, 사용자 경험을 염두에 두고, 적절한 우선 순위를 사용하고, 필요한 경우 사용자에게 경고해야 합니다.

나는 네가 나와 함께 라이브 활동에 대해 배우는 것을 즐겼기를 바란다.

나는 네가 다이나믹 아일랜드와 잠금 화면에 가져올 모든 창의적인 아이디어를 빨리 보고 싶어.

봐줘서 고마워.

♪ ♪