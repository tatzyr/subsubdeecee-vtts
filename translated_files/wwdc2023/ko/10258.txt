10258

♪ ♪

아난트: 안녕. "앱의 애니메이션 기호"에 오신 것을 환영합니다.

제 이름은 아난트이고, 저는 UIKit의 엔지니어입니다.

SF 심볼은 애플 인터페이스의 상징적인 부분이다.

그들은 메뉴, 도구 모음, 사이드바 등에서 멋져 보인다.

그리고 사람들은 기호에 익숙하기 때문에, 그들은 당신의 앱을 더 직관적으로 사용할 수 있게 만듭니다.

iOS 17과 macOS 소노마에서는 애니메이션으로 기호를 강화하여 그 어느 때보다 앱에 더 많은 생명을 불어넣고 있습니다.

"기호 효과"라고도 불리는 새로운 심볼 애니메이션 투어로 시작하겠습니다.

그런 다음, 앱에 심볼 효과를 추가하기 위해 SwiftUI, UIKit 및 AppKit의 새로운 API를 안내해 드리겠습니다.

그리고 마지막으로, 상징 효과를 정말 빛나게 하기 위한 몇 가지 팁을 드리겠습니다.

그럼 뛰어들자.

iOS 17과 macOS 소노마는 모든 기호 이미지, 심지어 사용자 지정 기호에도 적용할 수 있는 범용 애니메이션 컬렉션을 소개합니다.

이 애니메이션은 바운스, 펄스, 가변 색상, 스케일, 나타나기, 사라지기 및 교체라고 불린다.

"SF Symbols 5의 새로운 기능" 세션을 확인하여 인터페이스 설계에 대한 모범 사례를 포함하여 애니메이션 자체에 대해 자세히 알아보는 것이 좋습니다.

API에서, 이러한 애니메이션은 "기호 효과"라고 불리며, 새로운 심볼 프레임워크는 그들 모두의 본거지이다.

SwiftUI, AppKit 또는 UIKit을 사용하여 앱을 빌드할 때 무료로 제공됩니다.

심볼 프레임워크의 정말 멋진 특징은 각 효과에 간단한 점 구분된 이름이 있다는 것이다.

그래서 바운스 효과를 만들려면, 코드에 ".bounce"를 쓸 수 있습니다.

이 돏으로 구분된 이름은 또한 효과를 구성하는 방식으로 확장됩니다.

예를 들어, 기호가 위쪽 또는 아래쪽으로 튕겨야 한다고 지정할 수 있지만, 대부분의 경우 아무것도 지정할 필요가 없습니다.

프레임워크는 자동으로 가장 적절한 방향을 사용할 것이다.

일부 효과는 많은 구성 옵션을 특징으로 한다.

예를 들어, 가변 색상에는 세 가지 다른 설정이 있습니다.

옵션을 함께 연결함으로써, 당신은 매우 구체적인 효과를 쉽게 구성할 수 있습니다.

효과 이름은 실제 스위프트 코드이다.

아무런 조건도 붙어 있지 않아.

Xcode는 이름의 각 부분을 자동으로 완성하며, 효과가 잘못 구성되면 컴파일 시간에 오류가 발생합니다.

모든 새로운 애니메이션을 탐색하는 가장 좋은 방법은 SF 심볼 앱이다.

새로운 애니메이션 탭에서, 각 효과에 대해 사용 가능한 모든 구성 옵션에 대해 배울 수 있습니다.

코드에서 직접 사용할 점으로 구분된 효과 이름을 복사할 수도 있습니다.

모든 효과 유형과 구성 옵션을 통해, 매우 다양한 애니메이션을 사용할 수 있습니다.

하지만 이러한 모든 효과는 실제로 작은 행동 세트를 포함한다.

예를 들어, 바운스는 기호에 일회성 애니메이션을 재생한다.

이것은 별개의 행동으로 여겨진다.

반면에 스케일 효과를 추가하면 기호의 스케일 레벨이 변경되고 무기한으로 유지됩니다.

규모는 무기한 행동을 지원한다고 한다.

개별 효과와 달리, 무기한 효과는 명시적으로 제거될 때만 끝난다.

나타나고 사라지는 지원 전환 행동.

그들은 상징을 시야 안팎으로 전환할 수 있다.

그리고 마지막으로, 교체는 콘텐츠 전환이다.

그것은 한 상징에서 다른 상징으로 움직이는 것이다.

그래서 그것은 네 가지 다른 행동이다: 이산, 무기한, 전환, 그리고 콘텐츠 전환.

심볼 프레임워크에서, 각 행동은 프로토콜에 해당한다.

효과는 이러한 프로토콜을 준수함으로써 지원되는 행동을 선언한다.

다음은 사용 가능한 모든 효과와 지원되는 행동에 대한 분석입니다.

나는 이 세션에서 이것을 더 자세히 다룰 것이다.

효과의 행동이 어떤 UI 프레임워크 API와 함께 작동할 수 있는지 결정한다는 것을 알아두세요.

그리고 UI 프레임워크 API에 대해 말하자면, SwiftUI, UIKit 및 AppKit 앱에 이러한 모든 멋진 효과를 추가하는 방법에 대해 이야기해 봅시다.

SwiftUI에는 새로운 뷰 수정자인 symbolEffect가 있다.

수정자를 추가하고 원하는 효과를 전달하기만 하면 됩니다.

여기서, 나는 variableColor를 전달했고, 이제 기호는 기본 가변 색상 애니메이션을 재생하고 있다.

AppKit과 UIKit에서도 이것을 하는 것은 쉽다.

이미지 보기에서 새로운 addSymbolEffect 방법을 사용하여 가변 색상 효과를 추가하세요.

점 구문을 사용하여 가변 색상 효과를 구성할 수 있습니다.

여기서, 나는 효과를 variableColor.iterative.reversing으로 변경하여 다른 가변 색상 애니메이션을 만든다.

내 앱이 네트워크에 연결되어 있다는 것을 보여주는 좋은 방법이다.

다른 효과를 결합하는 것도 가능하다.

여기, 저는 스케일업 효과를 추가합니다.

이제 그 기호는 확장되는 동안 가변 색상에 애니메이션을 더하고 있다.

이 API는 기호 이미지에 무기한 효과를 추가하는 간단한 방법을 제공합니다.

무기한 효과는 효과가 제거될 때까지 기호의 일부 측면을 무기한으로 바꾼다는 것을 기억하세요.

따라서 symbolEffect 수정자를 사용하여 애니메이션을 지속적으로 재생하는 가변 색상 효과를 적용할 수 있습니다.

하지만 나는 또한 효과가 활성화될 때 통제할 수 있는 방법이 필요하다.

내 앱이 네트워크에 성공적으로 연결된 후에 이 애니메이션이 계속 재생되는 것을 원하지 않을 것이다.

이것은 부울 isActive 매개 변수를 추가하여 수행할 수 있습니다.

여기서, 나는 인터넷에 연결할 때만 효과를 적용한다.

앱이 연결을 마치면, 심볼 애니메이션이 원활하게 끝납니다.

AppKit과 UIKit에서 removeSymbolEffect 방법을 사용하여 무기한 효과를 종료하십시오.

일회성 애니메이션을 수행하는 개별 효과는 어떤가요?

나는 이전에 이것의 예로 바운스를 언급했다.

당신의 앱은 특정 이벤트에 대응하여 바운스 효과를 유발할 수 있습니다.

SwiftUI에서는 동일한 symbolEffect 수정자를 사용하여 개별 효과를 추가할 수 있습니다.

그러나, 나는 또한 SwiftUI에 가치를 제공해야 한다.

값이 바뀔 때마다, SwiftUI는 이산 효과를 유발한다.

눌렀을 때 기호를 튕기는 버튼을 추가해 봅시다.

버튼의 핸들러는 단순히 bounceValue를 증가시켜야 한다.

SwiftUI는 bounceValue의 변화를 보고 bounce를 트리거할 것이다.

이미지 보기에 바운스 효과를 추가하여 AppKit과 UIKit에서 이것을 할 수 있습니다.

바운스는 개별 동작만 지원하기 때문에, 효과를 추가하면 단일 바운스가 수행됩니다.

나중에 그 효과를 제거할 필요가 없다.

이제, 그 상징이 한 번만 튀는 것을 원하지 않는다고 가정해 봅시다.

두 번 튕기는 건 어때?

SwiftUI, AppKit 및 UIKit은 선호하는 반복 수를 지정할 수 있는 옵션 매개 변수를 지원합니다.

이제, 효과가 트리거되면 기호가 두 번 튕겨진다.

바운스가 개별적인 행동을 할 수 있는 유일한 효과는 아니다.

앞서 다루었던 두 가지 효과인 펄스와 가변 색상은 무기한 행동뿐만 아니라 이산적인 행동도 지원합니다.

즉, 그들은 바운스처럼 일회성 애니메이션을 재생할 수 있다.

그것은 내가 이전 바운스 예시를 가지고 그것을 variableColor로 바꿀 수 있다는 것을 의미한다.

가변 색상은 반복되지 않는 방식으로 적용되기 때문에 개별 동작을 사용하도록 전환합니다.

이제, 버튼을 누르면 두 개의 가변 색상 주기가 수행됩니다.

다음으로, 콘텐츠 전환 효과에 대해 이야기해 봅시다.

두 개의 다른 기호 이미지 사이에서 움직이는 교체 효과는 이것의 주요 예이다.

여기, 일시 정지 기호와 재생 기호 사이를 전환하는 이미지가 있습니다.

SwiftUI에는 Replace와 함께 사용할 수 있는 symbolEffect라는 새로운 콘텐츠 전환 유형이 있습니다.

그래서 어떤 기호가 표시되는지 토글하는 버튼에 이미지를 넣으면, 변경 사항은 이제 애니메이션화됩니다.

AppKit과 UIKit에서 새로운 setSymbolImage 방법을 사용하여 기호 콘텐츠 전환을 사용하여 이미지를 변경할 수 있습니다.

마지막으로, 우리는 독특한 애니메이션으로 기호를 표시하고 숨길 수 있는 Appear and Disappear가 있습니다.

이러한 효과는 전환 효과로 독특하게 분류된다.

하지만 우리가 그것에 들어가기 전에, 우리는 평행 우주에 대해 이야기해야 한다.

그래도 걱정하지 마. 보이는 것만큼 복잡하지 않아.

한 우주에서, 이미지는 사라지지만, 이미지 뷰는 여전히 계층 구조에 있다.

다시 말해, 레이아웃에는 변화가 없다.

정사각형과 원은 서로 같은 거리를 유지한다.

평행 우주에서, 이미지 뷰는 진정으로 계층 구조에서 추가되고 제거된다.

결과적으로, 주변 전망의 레이아웃이 바뀔 수 있다.

좋은 소식은 Appear와 Disappear가 두 가지 행동을 모두 지원한다는 것이다.

나타나고 사라지는 것은 무기한 효과이기 때문에 첫 번째 행동이 가능하다.

당신은 이미 무기한 효과를 사용하는 방법을 알고 있습니다.

SwiftUI에서 .symbolEffect 수정자를 사용하고 .disappear를 전달하세요.

isMoonHidden의 값이 업데이트됨에 따라, 사라지는 효과가 적용됩니다.

AppKit과 UIKit에서 addSymbolEffect를 사용하고 .disappear 또는 .appear를 통과하세요.

여기서 요점은 무기한 효과가 레이아웃을 전혀 바꾸지 않는다는 것이다.

그들은 이미지 보기 내에서 기호의 렌더링만 변경합니다.

그래서 그것은 첫 번째 행동을 다룬다.

주변 레이아웃이 바뀌는 평행 우주로 이동하려면 어떻게 해야 하나요?

이것이 전환 행동이 들어오는 곳이다.

전환 효과는 뷰 계층 구조에서 뷰의 삽입 또는 제거를 애니메이션화하는 SwiftUI의 내장 전환 수정자와 함께 사용할 수 있습니다.

전환 동작을 사용하기 위해 이전 코드를 변환해 봅시다.

조건부로 사라지는 효과를 적용하는 대신, 나는 대신 조건부로 뷰 계층 구조에 기호를 추가할 것이다.

그런 다음, 전환 수정자를 추가하겠습니다.

SwiftUI에는 - 당신은 추측했습니다 - symbolEffect라는 새로운 전환 유형이 있습니다.

.Disappear를 통과함으로써, 기호는 이제 애니메이션과 함께 추가되고 제거됩니다.

자동이라고 불리는 독특한 전환 효과를 사용할 수도 있습니다.

이 효과는 이 기호에 가장 적합한 전환 애니메이션을 자동으로 수행할 것이다.

SwiftUI를 사용하지 않는다면, 계층 구조에서 이미지 보기를 수동으로 추가하고 제거해야 합니다.

UIKit은 도움이 될 수 있는 효과를 위한 완성 핸들러를 특징으로 한다.

단순히 사라지는 효과를 추가하고, 효과가 끝나면, 계층 구조에서 이미지 보기를 제거하세요.

그래서 거기 있어.

그것은 SwiftUI, AppKit 및 UIKit의 기호 효과입니다.

이제 기본을 알았으니, 앱에서 심볼 효과를 한 단계 끌어올릴 수 있는 몇 가지 팁이 있습니다.

우선, UIImageView의 새로운 UIKit 방법은 UIBarButtonItem에서도 사용할 수 있습니다.

이를 통해 기호 애니메이션을 사용하여 도구 모음에 쉽게 생명을 불어넣을 수 있습니다.

일부 UIKit 컨트롤에는 iOS 17에 기호 애니메이션이 내장되어 있습니다.

예를 들어, UISlider는 이제 엄지손가락이 트랙의 끝에 도달하면 이미지를 튕깁니다.

이러한 애니메이션이 UIControl 및 UIBarButtonItem의 새로운 isSymbolAnimationEnabled 속성으로 재생되는지 여부를 제어할 수 있습니다.

SwiftUI에는 기호 효과를 비활성화하기 위한 몇 가지 특별한 고려 사항도 있습니다.

SwiftUI의 다른 수정자와 마찬가지로, symbolEffect 수정자는 뷰 계층 구조를 통해 전파됩니다.

이것은 부모 보기에 수정자를 추가하여 여러 이미지에 효과를 적용할 수 있다는 것을 의미합니다.

symbolEffectsRemoved 수정자를 사용하여 뷰가 심볼 효과를 상속하는 것을 방지하십시오.

이제, Appear, Disappear 및 Scale과 같은 일부 기호 효과는 애니메이션으로 기호의 모양을 바꿉니다.

애니메이션 없이 기호를 처음에 확장하거나 처음에 사라지는 데 관심이 있을 수 있습니다.

SwiftUI에서는 애니메이션이 비활성화된 거래를 사용하여 이 작업을 수행할 수 있습니다.

여기서, 나는 애니메이션 없이 scale.up 효과를 적용하기 위해 그것을 사용한다.

AppKit과 UIKit에서 addSymbolEffect의 애니메이션 매개 변수를 사용하여 애니메이션 없이 효과를 적용하십시오.

마지막으로, 가변 가치에 대해 이야기해 봅시다.

iOS 16과 macOS Ventura는 볼륨 레벨과 신호 강도와 같은 개념을 나타내는 기호의 또 다른 차원으로 가변 값을 도입했다.

iOS 17과 macOS 소노마에서, 우리는 임의의 변수 값 사이를 매우 쉽게 크로스페이드할 수 있도록 하고 있다.

SwiftUI에서는 아무것도 할 필요가 없습니다.

여기, 변수 값이 일부 상태를 기반으로 하는 Wi-Fi 기호가 있습니다. 이 경우 현재 신호 강도입니다.

신호 강도가 변함에 따라, Wi-Fi 기호는 자동으로 업데이트되며, 가변 값에 걸쳐 애니메이션을 표시합니다.

AppKit과 UIKit에서 자동 기호 콘텐츠 전환을 사용하세요.

그것은 새로운 심볼 이미지가 다른 변수 값을 가지고 있는지 감지하고, 만약 그렇다면, 새로운 값으로 크로스페이드한다.

오늘 나와 함께 해줘서 정말 고마워.

기호를 애니메이션화하는 방법에는 여러 가지가 있으므로, SF 기호 앱을 사용하여 무엇이 가능한지 알아보세요.

심볼 프레임워크를 살펴보고, SwiftUI, AppKit 및 UIKit에서 새로운 심볼 효과 API를 사용해 보세요.

그리고 마지막으로, 애니메이션을 채택하여 앱의 인터페이스를 그 어느 때보다 즐겁게 만드세요.

기호 애니메이션에 대한 휴먼 인터페이스 지침과 모든 효과를 지원하기 위해 사용자 지정 기호를 업데이트하는 다른 기호 세션도 확인하세요.

고마워, 그리고 행복한 코딩.