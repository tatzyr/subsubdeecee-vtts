10118

♪ ♪

라즈반: 안녕!

저는 WebKit Developer Experience 팀의 엔지니어인 Razvan입니다. 올해 Web Inspector에 대한 몇 가지 새로운 기능과 개선 사항에 대해 말씀드리겠습니다.

웹 인스펙터는 macOS의 Safari의 일부이며, 웹사이트, 웹 앱, 웹 확장 또는 홈 화면 웹 앱의 모든 리소스와 활동을 검사할 수 있는 강력한 도구 세트를 제공합니다.

새로운 타이포그래피 검사 도구, 사용자 선호도를 에뮬레이트하는 방법, 이벤트 리스너 및 스크롤 컨테이너가 있는 요소에 대한 새로운 배지와 같은 작년부터 추가한 새로운 기능과 개선 사항 중 일부를 보여드리게 되어 기쁩니다. 그리고 중단점을 개선하여 자바스크립트 디버깅 경험을 개선했습니다.

이전에 웹 인스펙터를 사용해 본 적이 없다면, 활성화해야 합니다.

사파리의 설정 창을 열고 고급 탭으로 전환하세요.

하단에는 "웹 개발자를 위한 기능 표시" 설정이 있습니다.

이것을 활성화하려면 확인란을 클릭하세요.

개발 메뉴는 이제 메뉴 모음에서 사용할 수 있습니다.

웹 인스펙터 표시라는 메뉴 항목을 사용하거나 웹 페이지에서 키보드 단축키 Option+Command+I를 눌러 웹 인스펙터를 열 수 있습니다.

올해, 우리는 장치에서 웹 콘텐츠를 페어링하고 검사하는 간소화된 방법, 시뮬레이터에서 웹 페이지를 여는 빠른 방법, 새로 고침된 반응형 디자인 모드 등을 포함하여 Safari의 모든 개발자 기능을 많이 개선했습니다.

더 알아보려면, 올해 WWDC에서 "사파리 개발자 기능 재발견"이라는 제목의 세션을 시청하세요.

이제 웹 인스펙터가 활성화되었습니다. 타이포그래피 검사를 위한 새로운 도구를 살펴보는 것으로 시작합시다.

웹 개발자는 사용자 지정 글꼴을 사용하여 읽을 수 있고 눈에 띄는 유형으로 아름다운 콘텐츠를 만듭니다.

하지만 웹에서 타이포그래피를 바로 얻는 것이 항상 쉬운 것은 아니다.

먼저, 올바른 글꼴 파일을 로드해야 합니다.

브라우저에서 지원하는 형식과 올바른 기능이 있어야 합니다.

그리고 그것은 그것이 나타낼 서면 언어의 문자에 대한 올바른 글리프를 포함해야 한다.

그런 다음, 글꼴이 화면에서 렌더링되는 방식에 영향을 미치는 많은 CSS 속성이 있습니다.

그리고 그들 중 대부분은 캐스케이드를 통해 상속받을 수 있으며, 때로는 "어떤 글꼴이 실제로 사용되었나요?"와 같은 혼란을 야기한다.

아니면 "왜 이게 대담해?" 아니면 "이 스타일이 정말 이탤릭체인가요?"

웹 인스펙터는 다양한 타이포그래피 검사 도구를 도울 수 있다.

글꼴 패널의 요소 탭의 세부 정보 사이드바에서 찾을 수 있습니다.

사용된 기본 글꼴의 이름과 같이 선택한 요소에 사용된 글꼴의 속성과 기능을 보여줍니다.

당신이 예상했던 글꼴이 실제로 사용되었는지 빠르게 확인하기 위해 이것을 참조할 수 있습니다.

이것은 기본 글꼴만 식별한다는 것을 명심하세요.

선택한 노드에 기본 글꼴에 글리프가 없는 문자가 포함된 경우, 대체 글꼴이 사용됩니다.

다음으로, 글꼴 패널은 글꼴 크기, 스타일, 무게 및 스트레치와 같은 기본 글꼴 속성의 요약을 보여줍니다.

지원되는 글꼴 기능 속성과 사용된 값을 보여주는 섹션도 있습니다.

글꼴이 지원하는 것에 따라 합자, 소문자 대신 작은 대문자, 특수 숫자 스타일 등과 같은 서체의 특별한 측면을 전환합니다.

올해 새로운 글꼴 패널은 합성 굵거나 비스듬한 스타일에 대한 경고를 보여줍니다.

합성 스타일이 뭐야? 이탤릭체로 보자.

이탤릭체 스타일은 종종 일반 직립 스타일과는 별도로 자체 글꼴 파일로 제공됩니다.

적절한 이탤릭체 스타일이 없을 때, 웹킷은 그것을 위한 인위적인 표현을 생성합니다.

그것은 일반 직립 글꼴 스타일에 대한 알고리즘을 실행하고 개별 글리프를 왜곡하여 비스듬한 스타일을 생성합니다.

이것은 합성 사선이라고 불린다.

글꼴 디자이너는 이탤릭체 스타일을 만들 때 많은 관심을 기울인다.

종종, 이것들은 직립 스타일의 기울어진 버전이 아니지만, 대신 특정한 미학을 전달하기 위해 특별히 고안된 필기체이다.

글리프의 스트로크가 인위적으로 두꺼워지는 합성 볼드에서도 비슷한 일이 일어난다.

모든 글꼴이 이것을 지원하는 것은 아니라는 것을 명심하세요.

웹 인스펙터는 이제 합성 볼드 또는 비스듬한 것을 사용할 때 경고를 표시합니다.

글꼴 패널의 기본 속성 섹션에서 합성된 무게나 스타일 옆에 표시됩니다.

이 경고는 예상 글꼴 파일이 로드되지 않았다는 힌트가 될 수 있습니다.

하지만 때때로, 글꼴 파일이 당신이 요청한 정확한 값을 지원하지 않을 수도 있습니다.

그곳이 가변 글꼴이 도움이 될 수 있는 곳이다.

가변 글꼴이 뭐야?

간단히 말해서, 무게, 너비, 기울기 등과 같은 글꼴의 여러 스타일 변형을 생성하는 데 필요한 모든 정보를 단일 파일에 포함할 수 있는 글꼴 형식입니다.

그리고 지원되는 각 스타일에 대해, 가변 글꼴은 정적 글꼴 파일의 몇 가지 개별 값에 비해 값의 스펙트럼을 제공합니다.

이것은 당신의 콘텐츠에 맞는 정확한 스타일을 선택할 수 있는 더 많은 유연성을 제공합니다.

가변 글꼴은 훨씬 더 가능하다.

글꼴 디자이너는 획의 두께, 글리프의 곡선, 문자의 너비 등 글꼴의 거의 모든 측면을 구성할 수 있습니다.

가능성은 정말 방대하다.

구성할 수 있는 가변 글꼴의 모든 측면은 변형 축으로 표현됩니다.

어떤 것이 가능한지 알고하려면, 글꼴의 문서를 읽거나 이 정보를 드러내는 특별한 도구를 사용해야 합니다.

웹 인스펙터가 여기서 도울 수 있다.

가변 글꼴을 사용하는 요소를 검사할 때, 글꼴 패널은 지원되는 변형 축 목록을 보여줍니다.

각각에 대해, 그것은 축 태그-- 4자 식별자-- 선택적 축 라벨, 지원되는 최소 및 최대 값, 현재 값 또는 CSS에 지정되지 않은 경우 기본값을 보여줍니다.

올해, 우리는 변형 축의 값을 편집하고 검사된 페이지에서 결과를 실시간으로 볼 수 있는 대화형 컨트롤을 추가했습니다.

이것은 글꼴 스타일이 맞을 때까지 조정할 수 있는 좋은 방법을 제공합니다.

내가 보여줄게.

여기 제가 여행 사진 블로그를 위해 만들고 있는 웹 페이지가 있습니다.

나는 사진 갤러리와 라벨에 의한 내비게이션과 함께 내가 원하는 대로 레이아웃을 가지고 있지만, 여전히 제목의 모양에 대해 확신할 수 없다.

제목 요소를 검사하기 위해 마우스 오른쪽 버튼을 클릭하겠습니다.

글꼴 패널에서, 나는 이것이 가변 글꼴을 사용하고 있다는 것을 알 수 있다.

내가 가지고 놀 수 있는 사용 가능한 변형 축에 대한 컨트롤을 가지고 있기 때문에 알 수 있다.

예를 들어, 무게 축의 슬라이더를 드래그할 수 있습니다.

이것은 검사된 페이지에서 제목의 글꼴 무게를 즉시 바꿉니다.

해당 CSS 글꼴 가중치 속성이 스타일 패널에 어떻게 쓰여지는지 주목하세요.

정적 글꼴은 100 단위로 무게에 대한 몇 개의 글꼴 면만 가질 것이다.

하지만 가변 글꼴을 사용하면 변형 축의 범위 내에서 어떤 값이든 선택할 수 있습니다.

또한 너비의 변동 축을 시도하여 이것이 어떻게 더 넓거나 좁아 보이는지 봅시다.

축 값 입력 필드를 입력하거나 ArrowUp 또는 ArrowDown 키를 눌러 값을 정확한 단위로 변경할 수도 있습니다.

나는 이 약간 압축된 버전이 좋아.

조금 더 대담하게 하고 싶지만, 이 너비를 유지하고 싶다.

이 가변 글꼴은 또한 글꼴의 등급을 변경하기 위한 사용자 지정 변형 축을 제공합니다.

내가 이것을 위해 슬라이더를 드래그할 때, 개별 문자가 내가 무게 축을 바꿨을 때 그랬던 것처럼 위치를 바꾸지 않고 제자리에서 두꺼워진다는 것을 알아차렸다.

이거 좋아 보인다.

이러한 변경 사항을 내 프로젝트에 다시 통합하기 위해, 스타일 패널이나 변경 패널에서 새로운 CSS 속성을 복사할 수 있습니다.

우리는 타이포그래피를 검사하는 방법과 가변 글꼴로 글꼴 스타일을 조정하는 방법을 보았습니다.

이제, 사용자 환경 설정을 에뮬레이트하여 만들고 있는 콘텐츠가 사용자의 요구에 맞게 조정할 수 있도록 하는 웹 인스펙터의 또 다른 새로운 기능으로 넘어가겠습니다.

모든 Apple 제품은 모션 감소, 색상 대비 증가, 색상 필터 등을 제어하는 내장 화면 판독기, VoiceOver 또는 디스플레이 환경 설정과 같은 것을 제어하는 macOS의 접근성 설정과 같이 사람들이 자신의 필요와 선호도에 적응하도록 장치를 구성할 수 있는 다양한 설정을 제공합니다.

사람들이 장치에서 하는 가장 인기 있는 일 중 하나는 웹을 검색하는 것이다.

그래서 모두를 환영하기 위해 노력하는 웹사이트와 웹 앱을 만드는 것이 합리적이다.

그렇게 하려면, 때때로 다른 사람들이 사용자 선호도를 설정할 때와 같은 방식으로 웹을 경험해야 합니다.

감소된 움직임에 대한 선호도로 웹사이트를 테스트하려면, macOS의 접근성 설정으로 이동하여 설정할 수 있습니다.

하지만 그것은 사파리와 당신의 웹사이트뿐만 아니라 전체 시스템에 영향을 미칠 것입니다.

당신이 자주 원하는 것은 당신이 테스트하고 있는 페이지를 위해 그것을 설정하는 것입니다.

당신을 돕기 위해, 우리는 사용자 선호도를 에뮬레이트하기 위해 웹 인스펙터에 새로운 도구를 도입했습니다.

요소 탭에서 새 아이콘을 클릭하여 사용자 환경 설정 재정의 팝오버를 표시합니다.

여기서, 웹 인스펙터가 열려 있는 동안 검사된 페이지에 대한 사용자 환경 설정을 재정의하는 토글 세트를 찾을 수 있습니다.

이러한 환경 설정은 웹 페이지의 스타일과 동작을 조정하는 데 사용할 수 있는 CSS 미디어 기능에 매핑됩니다.

예를 들어, 색 구성표에 대한 선호도는 CSS의 prefers-color-scheme 미디어 기능에 매핑됩니다.

사용 방법은 다음과 같습니다: 기본 조명 색 구성표에 대한 요소의 스타일을 설정할 수 있습니다.

그런 다음, prefers-color-scheme 미디어 기능을 사용하여 어두운 색 구성표가 선호되는지 확인하고 스타일을 업데이트하십시오.

사용자 환경 설정 재정의 팝오버를 사용하여 페이지가 어떻게 적응하는지 확인하세요.

외관 섹션에서, 색 구성표 선호도를 어두운 색으로 재정의하세요.

아이콘은 재정의가 적용되었음을 나타내기 위해 색을 바꾼다.

오버라이드가 활성화되고 웹 인스펙터가 열려 있는 동안 어두운 색 구성표의 스타일이 적용됩니다.

색 구성표에 대한 이 컨트롤은 독립형 버튼이었다.

이제 팝오버에서 기본 설정 재정의를 위한 다른 컨트롤에 합류합니다.

다음으로, 감소된 움직임에 대한 선호도를 무시하는 방법을 보여드리겠습니다.

이 다음 섹션은 움직임이 많은 애니메이션을 표시합니다.

만약 당신이 이것에 민감하다면, 이 비디오의 다음 3분을 건너뛰고 싶을 수도 있습니다.

내 페이지로 돌아가서, 확대하기 위해 사진을 클릭할 때 실행되는 이 애니메이션은 아마도 너무 많을 것이다.

어떤 사람들은 특히 z축에서 일어날 때 빠르고 갑작스러운 움직임으로 애니메이션에 의해 방향을 잃을 수 있다.

그것은 메스꺼움이나 두통과 같은 불편함을 유발할 수 있다.

이것은 확실히 그들에게 환영받는 경험이 아니다.

사람들은 웹사이트와 웹 앱이 적응하기를 원한다는 신호를 보내기 위해 장치에서 감소된 움직임에 대한 선호도를 설정할 수 있다.

우리 웹 개발자들은 그것을 존중해야 한다.

이것은 선호 감소 모션 CSS 미디어 기능이 유용한 곳이다.

애니메이션이 단지 장식을 위한 것이라면, 당신은 그것을 제거할 수 있습니다.

하지만 기억하세요, 일부 애니메이션은 인터페이스에서 의미를 전달하는 데 유용합니다.

그것들을 제거하는 것은 유용성에 영향을 미칠 수 있다.

더 느리고 미묘한 페이드 애니메이션은 여전히 변화를 전달하고 사람들의 요구를 충족시키기 위해 잘 작동할 수 있다.

내 웹 페이지에서 그 변화를 시도해 보자.

먼저, 사진을 검사하고 웹 인스펙터의 요소 탭에서 그림 요소를 선택하겠습니다.

이것은 스타일 패널에서 일치하는 모든 CSS 규칙을 보여준다.

여기 많은 움직임으로 애니메이션을 설정하는 CSS 속성이 있습니다.

그것은 지금 모두를 위해 달린다.

다음으로, 이 CSS 규칙의 소스 코드 위치를 클릭하여 스타일시트에 정의된 곳으로 이동할 것입니다.

이것은 소스 패널을 열고 내가 바꾸고 싶은 애니메이션이 있는 CSS 규칙 바로 옆에 놓습니다.

내가 이전에 준비한 이 코드 블록의 주석을 해제할 것이다.

그것은 선호 감소 모션 CSS 미디어 기능에 의해 보호된다.

여기서, 나는 사진을 확대하는 애니메이션 대신 페이드 애니메이션을 변경하고, 애니메이션 지속 시간을 늘려 갑작스럽게 느껴지지 않도록 한다.

이제 페이지의 이미지를 다시 클릭하여 그것이 어떻게 보이는지 볼 것이다.

오! 그것은 여전히 같은 애니메이션을 실행한다.

그것은 내가 선호하는 감소된 모션 미디어 기능으로 보호되는 새로운 애니메이션을 정의했기 때문에 일어나고 있다.

하지만 이 페이지는 여전히 꺼짐으로 설정된 이 기본 설정에 대한 기본 시스템 값을 존중합니다.

그걸 조정하자.

요소 탭으로 다시 클릭하겠습니다.

여기서, 사용자 환경 설정 재정의 팝오버를 열겠습니다.

접근성 섹션에서, "동작 줄이기"에 대한 사용자 선호도를 재정의하기 위해 팝업 메뉴를 열 것입니다.

내 시스템의 기본값에서 변경하고 켜짐으로 설정할 것이다.

이제, 나는 내 페이지의 사진을 다시 클릭할 것이다.

그리고 봐. 그 사진은 이제 서서히 시야로 사라진다.

더 이상 혼란스러운 움직임은 없다.

이것은 감소된 움직임을 선호하는 사람들에게 더 나은 경험이다.

나는 이러한 변화를 내 프로젝트에 다시 통합하는 것을 기억할 것이다.

사용자 환경 설정 오버라이드 팝오버의 마지막 항목인 "대비 증가"는 선호하는 대비 CSS 미디어 기능에 매핑됩니다.

이상적으로, 당신은 모두를 위한 높은 수준의 색상 대비를 가진 콘텐츠를 만들고 싶습니다.

하지만 당신의 디자인 시스템이 당신을 제한한다면, 이 미디어 기능을 사용하여 증가된 대비의 혜택을 받는 사람들을 위해 당신의 스타일을 조정하세요.

그런 다음, 검사된 페이지의 스타일이 그에 따라 조정되는지 확인하세요.

"대비 증가"에 대한 선호도를 On으로 무시하세요.

우리는 당신이 이 기능을 사용하여 더 많은 사람들이 즐길 수 있는 콘텐츠를 만들기를 바랍니다.

다음으로, 웹 인스펙터의 요소 탭에 있는 새로운 요소 배지에 대해 말씀드리고 싶습니다.

요소 탭의 노드 트리 보기에서, 당신은 이미 CSS 플렉스 또는 CSS 그리드 컨테이너 역할을 하는 요소 옆에 배지를 볼 수 있습니다.

요소 배지는 특정 관심 노드를 한 눈에 식별할 수 있는 빠른 방법을 제공합니다.

이 경우, CSS 그리드 또는 플렉스 레이아웃 컨텍스트를 만드는 노드.

그리드와 플렉스 요소 배지를 클릭하여 해당 노드의 특수 페이지 오버레이를 전환할 수 있습니다.

배지의 하이라이트 색상은 페이지 오버레이의 색상과 일치합니다.

CSS 그리드와 플렉스박스 페이지 오버레이는 레이아웃을 결정하는 선, 간격 및 사용 가능한 공간을 보여주는 가이드를 보여줍니다.

페이지 오버레이로 CSS 그리드와 플렉스박스 레이아웃을 디버깅하는 방법에 대해 자세히 알아보려면, 지난 몇 년 동안의 이 세션을 시청하세요.

디버깅하기 가장 까다로운 CSS 레이아웃 문제 중 하나는 내부의 콘텐츠가 사용 가능한 너비에 맞지 않기 때문에 수평으로 스크롤하는 컨테이너와 같은 원치 않는 스크롤입니다.

이러한 유형의 문제는 스크롤 막대가 기본적으로 보이지 않을 때 오랫동안 감지되지 않을 수 있습니다.

원치 않는 스크롤을 식별할 수 있도록, 스크롤 컨테이너 옆에 나타나는 새로운 요소 배지를 추가했습니다.

요소의 콘텐츠가 경계를 넘치고 스크롤 바가 적용될 때 노드 트리에 빠른 시각적 힌트를 제공합니다.

원치 않는 스크롤의 일반적인 예와 그것을 고치는 방법을 살펴봅시다.

내 페이지로 돌아가서, 나는 사진 갤러리 상단에 있는 이 라벨들이 사용 가능한 모든 수평 공간을 사용하기 위해 멋지게 배치된 것을 본다.

하지만 내가 스와이프하려고 할 때, 나는 이 컨테이너에 짧은 수평 스크롤이 있다는 것을 알아차렸다.

이건 내가 원하지 않는 거야.

그리고 마지막 라벨은 약간 잘렸다.

창문 크기를 조정하면 더 나빠진다.

요소 탭의 노드 트리에서 라벨 컨테이너 옆에 "스크롤" 배지가 있습니다.

이 요소를 클릭하여 스타일 패널에서 일치하는 CSS 규칙을 표시할 것입니다.

이 플렉스박스 컨테이너는 맞아 보인다.

플렉스 아이템, 라벨 자체는 어때?

최소 너비 속성에 대한 지나치게 정확한 값은 이상하게 보인다.

브라우저에 내가 원하는 것을 말하고 수학을 하도록 하는 대신 브라우저에 정확히 무엇을 해야 할지 말하려는 순진한 시도였을 것이다.

이것을 해결하기 위해, 나는 이 최소 너비 선언에 대해 언급할 것이다.

이제, 각 라벨은 필요한 만큼의 공간을 차지한다.

하지만 사용하지 않는 공간이 많이 남아 있다.

이것을 고치기 위해, 나는 1의 값을 가진 플렉스 속성을 추가할 것이다.

이것은 사용하지 않는 공간을 각 라벨에 분배하여 컨테이너를 채웁니다.

그리고 노드 트리의 컨테이너 옆에 누락된 "스크롤" 배지에 의해 확인된 바와 같이, 더 이상 원치 않는 수평 스크롤은 없습니다.

다음으로, 새로운 이벤트 배지에 대해 말씀드리고 싶습니다.

자바스크립트 이벤트 리스너가 연결된 요소 옆에 나타납니다.

포인터 또는 UI 이벤트와 같은 내장 이벤트와 코드에서 발송하는 사용자 지정 자바스크립트 이벤트 모두에서 작동합니다.

노드 트리에서 옆에 이벤트 배지가 있는 요소를 찾고 배지를 클릭하여 해당 요소에 연결된 모든 이벤트 리스너가 있는 팝오버를 표시합니다.

여기서 각 이벤트 리스너에 대한 개요를 얻을 수 있습니다: 이벤트 유형, 이벤트를 처리하는 자바스크립트 함수의 이름, 그리고 해당 함수가 정의된 소스 코드의 위치.

DOM 트리를 통해 버블링되는지 또는 한 번만 실행한 후 자동으로 제거되는지 여부와 같은 이벤트 리스너의 다양한 구성 옵션.

그런 다음, 이벤트 리스너를 비활성화하는 옵션이 있으므로 실행하지 않고 코드를 디버깅할 수 있습니다.

또는 단계별로 디버깅하고 싶다면, 이벤트 중단점을 설정할 수 있습니다.

이것은 다음에 핸들러가 호출될 때 자바스크립트 실행을 일시 중지할 것이다.

브레이크포인트로 디버깅 경험을 개선한 것에 대해 이야기하기에 좋은 시간이다.

자바스크립트를 디버깅할 때, console.log() 문을 코드에 추가하는 데 사용될 수 있습니다.

반면에 브레이크포인트는 소스를 변경하지 않고도 자바스크립트를 일시 중지하고 단계적으로 디버깅하는 강력한 방법입니다.

이전에 중단점을 사용한 적이 없다면, 시작하는 가장 쉬운 방법은 소스 탭의 홈에 있는 스크립트 파일의 줄 번호를 클릭하는 것입니다.

이것은 스크립트의 그 줄에 자바스크립트 중단점을 설정합니다.

다음에 그 줄이 실행될 때, 웹 인스펙터는 그 시점에서 자바스크립트 실행을 일시 중지할 것이다.

일시 정지하는 동안, 호출 스택을 관찰하고, 범위에서 객체와 변수의 상태를 검사하고, 콘솔을 통해 변경할 수도 있습니다.

자바스크립트 실행을 재개하거나, 상단의 스테핑 컨트롤을 사용하여 한 번에 하나의 표현식으로 코드를 진행할 수 있습니다.

중단점을 마우스 오른쪽 버튼으로 클릭하고 중단점 편집을 선택하여 구성할 수 있습니다.

여기에는 중단점이 눌렸을 때 제어하고 중단점이 눌렀을 때 실행하도록 설정할 수 있는 많은 옵션이 있습니다.

그것들 중 몇 개를 보자.

조건을 설정하여 중단점이 부딪힐 때를 제어할 수 있습니다.

이것은 중단점이 설정된 것과 동일한 범위에서 자바스크립트로 평가됩니다.

조건이 사실이라면, 중단점이 맞을 것이다.

때때로, 당신은 여러 번 중단점을 건너뛰는 것이 더 쉬울 수 있습니다.

예를 들어, 처음 몇 번의 반복을 멈추는 데 관심이 없는 루프 안에 있는 동안.

여기서, 중단점을 무시할 횟수를 설정할 수 있습니다.

자바스크립트를 평가하는 것과 같이 중단점에 부딪혔을 때 작업을 실행할 수도 있습니다.

이것은 중단점이 설정된 것과 같은 범위에서 실행된다.

계속하기 전에 이것을 사용하여 스크립트의 상태를 수정할 수 있습니다.

자바스크립트가 일시 중지된 순간에 변수와 객체의 상태에 액세스할 수 있는 표현식으로 콘솔에 메시지를 기록할 수도 있습니다.

이것은 코드에 console.log() 문을 추가하는 것과 비슷하지만, 소스를 수정할 필요가 없습니다.

변수와 객체를 콘솔에 로깅하는 대신, 프로브 표현식 작업을 사용할 수도 있습니다.

이를 통해 소스 탭의 세부 사이드바 패널에서 주어진 표현식의 상태를 검사할 수 있습니다.

물론, 이러한 행동은 매우 유용하지만, 때때로 당신은 실제로 중단점에서 멈추고 수동으로 재개하지 않고 그것들을 실행하고 싶을 때가 있습니다.

이러한 경우, 표현을 평가한 후 자동으로 계속할 수 있는 옵션을 사용하세요.

이 옵션은 로그 메시지 작업이 console.log() 문처럼 작동하도록 합니다: 기록되지만 일시 중지되지 않습니다.

마찬가지로, 중단점 위치에서 자바스크립트를 평가하고 이미 소스 코드에 있는 것처럼 계속할 수 있습니다.

당신이 설정할 수 있는 다른 많은 종류의 중단점이 있습니다.

중단점 섹션에서 더하기 버튼을 클릭하여 fetch() 또는 XMLHTTPRequest와 같은 방법을 통해 네트워크 요청이 실행될 때 트리거되는 URL 중단점, "클릭"에 대한 이벤트 배지에서 이전에 본 것과 같은 이벤트 중단점, 마이크로 작업, 애니메이션 프레임, 시간 초과 또는 간격이 처리될 때 트리거되는 중단점과 같은 설정할 수 있는 모든 중단점 목록을 표시하고, 올해 새로운 기능은

심볼릭 중단점은 내장된 자바스크립트 함수에 대한 호출을 디버깅하거나 같은 이름의 여러 함수에서 일시 중지하는 데 유용합니다.

상징적인 중단점을 추가할 때, 원하는 만큼 구체적이거나 일반적일 수 있습니다.

대소문자 구분을 포함하여 함수 이름과 정확히 일치하거나, 패턴과 일치하는 여러 함수에서 중단하고 싶거나, 전체 함수 이름을 잘 기억하지 못하는 경우 정규식을 사용하세요.

심볼릭 중단점이 내 코드에 있는 문제를 디버깅하는 데 어떻게 도움이 되는지 봅시다.

내 페이지의 각 사진에는 친구들과 링크를 공유할 수 있는 공유 버튼이 있습니다.

하지만 나는 그들이 받은 URL이 사진 페이지를 가리키지 않는다는 버그 보고서를 받았다.

조사해 보자.

내가 이것을 작업한 지 꽤 됐고, 그것이 어떻게 만들어졌는지 잘 기억나지 않는다.

이것을 디버깅하는 방법은 여러 가지가 있지만, 나는 상징적인 중단점을 시도해 볼 것이다.

소스 탭으로 전환하고 클릭하여 새로운 심볼릭 중단점을 추가하겠습니다.

내 쪽에서 실행되는 코드가 무엇이든, 결국 시스템 팝오버를 보여주는 navigator.share() 브라우저 API를 호출해야 한다.

Share() 함수가 호출되기 전에 중단점을 설정해 봅시다.

나는 내 상징적인 중단점을 설정하기 위해 클릭할 것이다.

그리고 이제 나는 내 페이지의 사진에 있는 공유 버튼을 클릭할 것이다.

그리고 보세요, 웹 인스펙터는 navigator.share()가 호출되기 전에 일시 중지되었습니다.

이 방법으로 전달된 데이터 객체 위에 마우스를 올려놓을 것이다.

여기서, 나는 그 물건의 내용을 볼 수 있다.

공유되는 URL 키의 값은 실제로 잘못된 것 같다.

이건 어디서 온 거야?

소스 탭의 콜 스택 섹션에서, 이 지점에 도달하기 위해 호출된 함수 체인을 볼 수 있습니다.

클릭 이벤트 핸들러가 이전에 호출된 것 같습니다.

그 기능으로 이동하기 위해 콜 스택에서 항목을 선택할 것이다.

여기서, 나는 sharePhoto() 함수에 전달되는 데이터 객체를 만드는 코드를 볼 수 있다.

그리고 여기 코드 주석을 보면, 나는 이것을 구현하려고 했지만, 잊어버렸다.

지금 그걸 고치자.

이 줄에 중단점을 설정하려면 클릭하겠습니다.

그런 다음, 마우스 오른쪽 버튼을 클릭하고 중단점 편집을 선택하겠습니다.

조건을 설정할 필요는 없지만, 자바스크립트 작업을 실행하도록 구성할 것입니다.

표현식 필드 내에서, 공유 함수로 전달되기 전에 url 속성을 수정하기 위해 데이터 객체를 수정할 것입니다.

여기서 멈추기 위해 이 중단점이 필요하지 않으므로, 이 표현을 평가한 후 자동으로 계속하려면 옵션을 클릭하겠습니다.

다음으로, 자바스크립트 실행을 재개하기 위해 버튼을 클릭하겠습니다.

이제 공유 버튼을 클릭하면 이전에 설정한 기호 중단점에 다시 도달합니다.

하지만 이제 그것이 얻는 데이터 객체는 올바른 URL 값을 가지고 있다.

다른 중단점의 자바스크립트 동작은 값을 수정하고 일시 중지하지 않고 이 함수로 보냈다.

이것은 내가 거기서 만든 변화가 실제로 그 문제를 해결했다는 것을 확인시켜 준다.

이것은 중단점에 의해 활성화된 많은 훌륭한 디버깅 워크플로우의 한 예일 뿐입니다.

더 많은 것이 있으며, 저는 당신이 당신의 프로젝트에서 그것들을 시도해 볼 것을 권장합니다.

우리는 이 세션에서 새로운 타이포그래피 검사 도구부터 사용자 선호도를 재정의하고, 새로운 요소 배지를 사용하는 것에 이르기까지 많은 것을 다루었고, 중단점 향상을 살펴보았습니다.

그리고 그건 그냥 표면을 긁는 거야.

올해 웹 인스펙터에는 이 세션에서 다룰 시간이 없었던 다른 많은 새로운 기능과 개선 사항이 있습니다.

그리고 웹 인스펙터가 할 수 있는 일이 훨씬 더 많다.

이것들과 당신이 사용할 수 있는 다른 많은 기능에 대해 더 알고 싶다면, webkit.org로 가서 심층적인 블로그 게시물과 문서를 찾아보세요.

우리도 네 소식을 듣고 싶어.

문제가 발생하거나 웹 인스펙터를 개선할 수 있는 방법에 대한 아이디어가 있는 경우, 인스펙터 제품에 대한 WebKit의 버그 추적기에 문제를 제출하여 알려주십시오.

저는 또한 당신이 사파리 기술 미리보기를 다운로드하도록 권장하고 싶습니다.

몇 주마다 출시되며 다음 버전의 Safari에 도달하기 전에 WebKit의 최신 도구와 기술뿐만 아니라 버그 수정 및 개선 사항이 포함되어 있습니다.

제가 가기 전에, 올해 사파리 개발자를 위한 새로운 기능에 대해 더 알고 싶다면, "사파리 개발자 기능 재발견"과 "CSS의 새로운 기능"이라는 훌륭한 세션을 확인하세요.

봐줘서 고마워.