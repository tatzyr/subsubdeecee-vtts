10080

♪ 부드러운 기악 힙합 ♪

♪

안녕. 저는 존이고, RealityKit 팀의 엔지니어입니다.

오늘, 공간 경험을 만들기 위한 새로운 RealityKit을 소개하게 되어 기쁩니다.

RealityKit은 3D 모델과 효과를 현실적으로 렌더링, 애니메이션 및 시뮬레이션하기 위한 프레임워크입니다.

우리는 2019년에 RealityKit을 도입했고 그 이후로 많은 새로운 기능을 추가했습니다.

다른 장치에서 앱을 구축하기 위해 이미 RealityKit을 사용했다면, 공통점이 많다는 것을 알게 될 것입니다.

RealityKit을 사용하면 앱의 2D 창을 3D 콘텐츠로 보강하거나, 별도의 창에서 3D 콘텐츠를 전면과 중앙에 가져오거나, 자신과 환경을 몰입형으로 만들 수 있습니다.

RealityKit은 Apple 플랫폼의 핵심 3D 프레임워크이다.

그리고 특히 xrOS에서는 많은 기능을 제공합니다.

이 프레젠테이션에서는 엔티티, 구성 요소 및 RealityView와 같은 몇 가지 주요 기능에 초점을 맞출 것이며, RealityKit을 소개하고 사용 방법을 보여줄 것입니다.

나는 또한 다른 개념을 다루거나 더 자세히 설명하는 세션을 언급할 것이다.

시작하자.

나는 이 프레젠테이션의 개념을 설명하기 위해 Hello World 경험을 사용할 것이다.

하지만 그 개념에 도달하기 전에, 이 경험의 일부인 세 가지 다른 모듈을 안내해드리겠습니다.

첫 번째 모듈인 Planet Earth는 모든 각도에서 상호 작용할 수 있는 자체 창에 3D 지구본을 제공합니다.

두 번째 모듈인 궤도의 물체는 지구, 달 및 위성의 모델에 몰입하여 위성을 따르는 흔적과 같은 애니메이션, 공간 오디오 및 사용자 지정 동작을 보여줍니다.

세 번째 모듈인 태양계에는 다른 세션에서 더 많이 배울 수 있는 완전한 몰입형 경험이 포함되어 있습니다.

SwiftUI, RealityKit 및 Reality Composer Pro를 사용하여 이 Hello World 경험의 3D 요소를 구축하는 방법을 보여드리겠습니다.

뛰어들자.

SwiftUI와 함께 RealityKit을 사용하여 앱을 다음 차원으로 끌어올리는 방법에 대해 이야기하는 것으로 시작하겠습니다.

다음으로, 저는 RealityKit의 빌딩 블록, 지구 모델과 같은 엔티티 및 그 동작을 구현하는 구성 요소를 검토할 것입니다.

3D 모델과 효과를 위한 새로운 SwiftUI 보기인 RealityView의 기능에 대해 배우게 될 것입니다.

그런 다음 애니메이션과 공간 오디오로 입력을 처리하고 앱에 생명을 불어넣는 방법을 설명하겠습니다.

마지막으로, 맞춤형 구성 요소와 시스템으로 RealityKit의 잠재력을 여는 것에 대해 이야기하겠습니다.

RealityKit과 SwiftUI가 어떻게 함께 작동하는지 탐구하는 것으로 시작합시다.

SwiftUI는 뷰와 창을 정의하는 방법이며, RealityKit을 사용하면 3D 요소를 추가할 수 있습니다.

예를 들어, 월드 앱은 SwiftUI를 사용하여 몇 개의 버튼이 있는 표준 2D 창을 표시합니다.

왼쪽의 행성 지구 버튼을 탭하면 지구의 2D 삽화를 보여주는 세부 보기로 이동합니다.

하지만 그 2D 이미지를 3D 글로브로 바꾸고 싶다면 어떨까요?

RealityKit의 모델 3D 뷰를 사용하여 2D 창에 3D 콘텐츠를 쉽게 추가할 수 있습니다.

코드를 검토해 봅시다.

여기 지구 이미지를 표시하는 SwiftUI 보기가 있습니다.

RealityKit을 가져오고 이미지를 모델 3D 보기로 변경하여 Globe라는 프로젝트에서 USD 파일을 참조하여 3D globe를 표시하도록 변경할 것입니다.

두 개의 코드를 추가하여 표시하기 전에 로드된 모델을 사용자 정의할 수 있습니다: 반환된 모델의 콘텐츠 클로저와 모델이 로드되는 동안 표시되는 뷰를 지정하는 자리 표시자 뷰 빌더.

콘텐츠 클로저에서, 나는 모델이 내 UI의 사용 가능한 공간에 맞는지 확인하기 위해 크기 조정 가능하고 확장된 ToFit 수정자를 추가할 것이다.

그리고 모델 3D는 모델을 비동기적으로 로드하기 때문에, 로딩 과정에서 표시되는 뷰를 사용자 정의하는 데 사용할 수 있는 자리 표시자 뷰 빌더가 있습니다.

이 경우, 저는 내장된 ProgressView를 사용하여 스피너를 표시하고 있습니다.

마지막으로, 지구 3D 모델을 앱이나 스위프트 패키지에 리소스로 추가해야 합니다.

그리고 이제 모델은 Quick Look 또는 Reality Composer Pro와 동일한 모양으로 앱에 줄지어 나타납니다.

2D 창에 3D 콘텐츠를 배치하는 것은 좋지만, 나는 내 3D 모델이 전면과 중앙에 있기를 원한다.

그것을 달성하기 위해, 나는 지구를 별도의 창문에 놓을 것이다.

앱의 세부 보기에 버튼을 추가하여 새 창을 열겠습니다.

그리고 2D 배경에 내용을 표시하는 일반 창을 사용하는 대신, 내용을 볼륨에 배치하는 새로운 창 스타일을 사용할 것입니다.

이것은 체적 창이라고 불리며, 3D 콘텐츠를 보기에 좋습니다.

2D 창과 달리, 부피 측정 창은 어떤 각도에서든 사용할 수 있으므로 3D 모델에 이상적입니다.

체적 창은 또한 실물에 충실한 고정된 크기를 유지한다.

체적 창에서 모델을 1미터로 확장할 수 있으며, 항상 정확히 그 크기로 표시됩니다.

나는 그것이 Hello World의 세계에 아주 잘 어울린다고 생각한다.

체적 창을 추가하는 과정을 진행해 봅시다.

먼저, 나는 내 앱에 윈도우 그룹을 추가할 것이다.

창 그룹은 앱이 새 창을 여는 데 사용할 수 있는 템플릿 역할을 한다.

이 앱의 메인 창과 구별하기 위해 새 창에 식별자를 제공할 것입니다.

다음으로, 나는 윈도우 그룹에 windowStyle 체적 수정자를 추가할 것이다.

나는 또한 이 창에 미터 단위의 크기를 주기 위해 defaultSize 수정자를 추가할 것이다.

마지막으로, 나는 세부 보기에 버튼을 추가할 것이다.

버튼이 방금 추가한 창을 열도록 하려면, SwiftUI 환경에서 열린 창 작업에 액세스할 수 있는 속성을 추가할 것입니다.

그럼 내 버튼에서 그 동작을 부를게.

시뮬레이터에서 이 앱을 실행합시다.

글로브 보기 버튼을 누르면, 부피 측정 창이 나타납니다.

이제 나는 전면뿐만 아니라 여러 각도에서 지구와 상호 작용할 수 있다.

하지만 때때로, 당신이 만들고 싶은 경험을 여는 열쇠는 몰입이다.

World 앱의 Objects in Orbit 모듈에서, 당신은 그들의 궤도를 보여주는 지구와 위성의 애니메이션 모델에 몰입할 수 있습니다.

이것은 앱이 우주의 어느 곳에나 3D 요소를 배치할 수 있는 새로운 장면 유형인 몰입형 공간을 사용합니다.

몰입형 공간을 열면, 앱은 창의 경계를 넘어 마법 같은 경험을 제공할 수 있습니다.

몰입형 공간을 추가하는 것은 창 그룹을 추가하는 것과 비슷하다.

그건 내 앱의 본문에 있는 새로운 장면이야.

여기서 저는 모델 3D보다 장면을 더 잘 제어할 수 있는 RealityView를 사용하고 있습니다.

몇 분 안에 RealityView를 더 자세히 살펴보겠습니다.

이전과 마찬가지로, 나는 앱의 세부 보기에 버튼을 추가할 것이다.

나는 환경에서 openImmersiveSpace 액션을 얻고 내가 정의한 장면의 식별자로 부를 것이다.

openImmersiveSpace 액션은 비동기적이라는 점에 유의하십시오.

공간이 열리면 완료됩니다.

궤도 보기 버튼을 누르면, 몰입형 공간이 나타납니다.

이것은 이미 놀랍지만, RealityKit으로 상호 작용, 애니메이션 및 오디오를 추가하여 더 매력적으로 만들 수 있습니다.

3D 콘텐츠가 포함된 2D 창으로 작업하든, 3D 모델을 강조하는 체적 창으로 작업하든, 아직 하지 않았다면 이 SwiftUI 세션을 확인하는 것이 좋습니다.

"공간 컴퓨팅을 위한 SwiftUI를 만나세요" 세션은 이 플랫폼에서 SwiftUI의 새로운 기능에 대한 개요입니다.

"SwiftUI를 다음 차원으로 가져가세요" 세션은 창에서 3D 콘텐츠를 최대한 활용하는 방법을 보여줍니다.

또한 여러 가지 몰입 스타일이 있다.

헬로 월드의 태양계 모듈은 패스스루를 숨기고 자체 배경을 표시하는 완전히 몰입형 공간을 사용합니다.

"SwiftUI로 창 너머로 이동" 세션은 모든 스타일의 몰입형 공간에 대해 자세히 설명합니다.

몰입형 경험을 만드는 것에 대해 생각하고 있다면, 이 강연을 강력히 추천합니다.

SwiftUI 보기에서 RealityKit을 사용하는 두 가지 방법, 사용하기 쉬운 모델 3D와 RealityView를 만났습니다.

RealityView는 RealityKit 엔티티를 사용하여 3D 콘텐츠를 구성할 수 있기 때문에 이 세션의 나머지 부분에 사용할 것입니다.

그래서 RealityKit 엔티티는 무엇인가요?

엔티티는 컨테이너 객체이다.

코드에서 빈 엔티티를 만들면, 아무것도 하지 않을 것이다.

엔티티를 렌더링하거나 동작을 제공하려면 구성 요소가 있어야 합니다.

각 구성 요소는 엔티티에 대한 특정 행동을 가능하게 한다.

여기 몇 가지 예가 있습니다.

이 앱의 지구 엔티티는 두 가지 구성 요소로 구현됩니다: 엔티티에 메쉬와 재료를 제공하는 모델 구성 요소와 3D 공간에 엔티티를 배치하는 변환 구성 요소.

위성 엔티티도 마찬가지입니다.

모델 구성 요소는 메쉬를 렌더링하고 재료를 적용합니다.

이 지구와 위성 모델은 디지털 콘텐츠 제작 도구로 만들어졌고, USDZ 파일로 내보내고, RealityKit에 로드되었다.

이 메쉬에는 최종 외관을 제공하기 위해 물리적 기반 재료가 적용되어 있다.

재료는 메쉬의 표면이 빛에 어떻게 반응하는지 설명하기 위해 일련의 질감과 셰이더를 사용한다.

자료에 대해 더 알아보려면, 닐스의 세션인 "Reality Composer Pro에서 자료 탐색"을 보는 것이 좋습니다.

모델 외에도, 이 엔티티들은 변환 구성 요소를 가지고 있다.

변환 구성 요소는 3D 공간에 엔티티를 배치한다.

변환 구성 요소의 속성을 설정하고 엔티티의 부모를 설정하여 엔티티의 위치, 방향 및 규모를 제어할 수 있습니다.

RealityKit은 ARKit 및 다른 많은 3D 엔진과 동일한 3D 좌표 규칙을 사용합니다.

기원은 RealityView의 중심에 있다.

Y축은 위쪽을 가리키고, z축은 당신을 가리키고, x축은 당신의 오른쪽을 가리킵니다.

한 단위는 1미터이다.

이러한 규칙은 SwiftUI의 규칙과 다르다는 점에 유의하십시오.

RealityView의 콘텐츠 인스턴스에는 RealityKit과 SwiftUI 좌표 공간 사이를 쉽게 앞뒤로 변환할 수 있는 기능이 있습니다.

모든 엔티티에는 변형이 있지만, 모든 엔티티에 모델이 있는 것은 아니다.

때때로 엔티티는 여러 자식 엔티티에서 조립되며, 각각은 자체 구성 요소 세트를 가지고 있다.

이것은 당신에게 더 많은 프로그래밍 제어를 제공합니다.

예를 들어, 자식 엔티티의 변형에 대한 개별 애니메이션을 재생할 수 있습니다.

RealityKit에는 당신이 하고 싶은 것에 따라 다양한 구성 요소가 포함되어 있습니다.

오늘 몇 가지 특정 구성 요소, 충돌, 입력 대상 및 호버 효과에 대해 이야기하겠습니다.

나는 또한 당신만의 구성 요소를 만드는 방법을 보여줄 것이다.

이제 엔티티와 구성 요소가 어떻게 작동하는지 이해했으므로, RealityView를 사용하여 앱에 해당 엔티티를 배치해 봅시다.

RealityView는 원하는 수의 엔티티를 포함하는 SwiftUI 뷰입니다.

렌더링, 애니메이션 및 시뮬레이션을 위해 엔티티를 RealityView에 추가해야 합니다.

그래서, RealityView는 어떻게 작동하나요?

RealityView는 보기에 엔티티를 추가할 수 있는 콘텐츠 인스턴스를 제공합니다.

이것은 이미 엔티티를 로드했거나 프로그래밍 방식으로 엔티티를 만들고 싶다면 시작하는 쉬운 방법입니다.

하지만 이 클로저는 비동기적이므로, 파일에서 엔티티를 로드하고 보기에 표시하는 것은 간단합니다.

여기서 USD 파일에서 지구 모델을 비동기적으로 로드하고 로드가 완료되면 콘텐츠 인스턴스에 추가합니다.

또한 하나 이상의 모델을 로드하고 둘 다 RealityView에 배치할 수 있습니다.

서로 옆에 배치되는 대신, 이 모델들은 우주에서 일치할 것이다.

그것이 당신이 원하는 것이 아니라면, 보기에 추가된 엔티티의 위치를 변경할 수 있습니다.

이 예시는 달 엔티티를 오른쪽으로 0.5미터 배치한다.

RealityView를 설정하면, 앱의 상태를 RealityKit 구성 요소에 저장된 속성에 연결할 수 있습니다.

RealityView를 사용하면 SwiftUI 관리 상태와 RealityView의 엔티티 간의 연결을 업데이트 클로저로 표현할 수 있습니다.

이를 통해 앱의 데이터 모델에서 진실의 원천으로 3D 모델의 동작을 쉽게 구동할 수 있습니다.

이 뷰는 모델을 로드하고 뷰를 사용하는 사람이 제어하는 회전을 적용합니다.

업데이트 섹션의 코드는 값이 변경될 때만 실행된다는 점에 유의하십시오.

2D와 3D 요소의 조합으로 UI를 구축하는 경우, 때때로 뷰와 엔티티 간의 좌표를 변환해야 합니다.

RealityView는 SwiftUI 뷰 좌표 공간과 RealityKit 엔티티 좌표 공간 간의 좌표 변환 기능을 제공합니다.

RealityView의 콘텐츠 인스턴스는 포인트, 경계 상자를 변환하고 SwiftUI 좌표 공간에서 엔티티의 로컬 공간으로 또는 그 반대로 변환하는 변환 기능을 제공합니다.

여기서, 나는 뷰 차원의 최소 길이를 얻고 사용 가능한 공간에 맞게 로드된 엔티티의 크기를 조정한다.

RealityView는 또한 엔티티와 구성 요소에 의해 게시된 이벤트를 구독하기 위한 메커니즘을 제공한다.

이 예에서는 로드가 완료된 후 로드된 USD 파일에서 작성된 애니메이션을 재생합니다.

콘텐츠 인스턴스에는 이벤트 핸들러를 추가하는 구독 기능이 있습니다.

이 예제는 애니메이션이 완료되면 일부 코드를 실행합니다.

애니메이션에서 물리학, 오디오에 이르기까지 모든 종류의 것들에 대해 게시된 RealityKit 이벤트가 있습니다.

엔티티에 SwiftUI 뷰를 첨부할 수도 있습니다.

RealityView의 첨부 기능 덕분에 3D 공간에서 뷰를 쉽게 배치할 수 있습니다.

자세한 내용은 유진의 세션인 "RealityKit으로 공간 컴퓨팅 앱 강화"를 확인하세요.

RealityView로 할 수 있는 일이 많습니다.

하지만 우리의 천체로 돌아가서 그들에게 생명을 불어넣자.

먼저, 지구 엔티티를 재배치할 수 있도록 드래그 제스처를 추가하는 방법을 보여드리겠습니다.

그리고 나서 나는 애니메이션과 공간 오디오를 설명할 것이다.

다음은 세 개의 엔티티를 포함하는 RealityView의 예입니다.

다른 SwiftUI 보기와 마찬가지로 RealityView에 제스처를 추가할 수 있으며, 해당 보기의 엔티티에 대한 테스트를 할 수 있습니다.

입력을 받으려면, 엔티티에는 입력 대상 구성 요소와 충돌 구성 요소가 모두 있어야 합니다.

터치 이벤트가 RealityView에 의해 처리되면, 충돌과 입력 대상이 모두 없는 엔티티를 무시합니다.

이 마지막 엔티티만이 두 구성 요소를 모두 가지고 있으므로, 이 RealityView에 추가된 제스처는 이 엔티티를 향한 입력에만 반응할 것이다.

지구 엔티티를 드래그할 수 있도록, 입력 대상 구성 요소와 충돌 구성 요소를 제공하고, RealityView에 드래그 제스처를 추가할 것입니다.

구성 요소를 추가하기 위해, 나는 Reality Composer Pro를 사용할 것이다.

Reality Composer Pro는 3D 콘텐츠를 구성, 편집 및 미리 볼 수 있는 새로운 개발자 도구입니다.

나는 엔티티에 몇 가지 구성 요소를 추가하는 데 사용할 것이다.

리얼리티 컴포저 프로로 할 수 있는 일에 대해 자세히 알아보려면, 에릭의 세션인 "리얼리티 컴포저 프로를 만나세요"를 확인하세요.

월드 앱은 이미 이 경험이 사용하는 USD 파일이 포함된 월드 자산 패키지를 가지고 있다.

나는 Reality Composer Pro에서 그 패키지를 열 것이다.

지구 모델은 독립적이고 수정될 수 없는 USDZ 아카이브에 있다.

그 자산을 수정하는 대신, 나는 새로운 USD 장면 파일을 만들고 지구 자산을 참조할 것이다.

USD 파일은 다른 USD를 참조하고 실제로 참조된 파일을 변경하지 않고 제자리에서 수정할 수 있습니다.

이와 같은 비파괴 편집은 다른 사람이 작업 중인 USD 파일을 약간 변경해야 할 때 정말 편리합니다.

DraggableGlobe라는 새로운 장면을 만들고 지구본 파일을 드래그하여 참조를 만들 것입니다.

이제 나는 그것에 구성 요소를 추가할 수 있다.

나는 입력 대상 구성 요소와 충돌 구성 요소를 추가할 것이다.

충돌 구성 요소의 기본 모양은 큐브이다.

모델과 더 잘 어울릴 수 있도록 구체로 바꿀 거야.

충돌 모양이 시각적 모델의 합리적인 근사치가 되는 것이 중요하다.

경기가 가까워질수록, 모델과의 더 직관적인 상호 작용이 있을 것이다.

나는 지구 모델을 움직일 수 있기를 원하기 때문에, RealityView에 드래그 제스처를 추가할 것이다.

표준 SwiftUI 드래그 제스처는 작동하지만, 제스처에 targetedToEntity 수정자를 추가하여 제스처가 전체 보기가 아닌 특정 엔티티를 조작할 수 있습니다.

제스처의 값이 바뀌면, 나는 엔티티의 위치를 일치하도록 바꿀 것이다.

하지만 한 가지 중요한 세부 사항이 있다.

제스처의 값은 SwiftUI의 좌표 공간에 있으므로, 엔티티의 위치를 변경하려면 RealityKit의 좌표 공간으로 변환해야 합니다.

모든 조각들은 이제 제자리에 있다.

그래서 궤도 모듈의 물체에서, 나는 이제 지구를 움직이기 위해 꼬집고 끌 수 있다.

좋아요, 우리 앱은 이제 대화형입니다.

하지만 나는 내 지구 실체가 그것이 상호 작용한다는 것을 나타내기를 싶다.

이를 위해 사용할 수 있는 RealityKit 구성 요소인 HoverEffectComponent가 있습니다.

SwiftUI와 RealityKit이 제공하는 호버 효과는 앱이 당신이 보고 있는 곳에 반응하도록 하는 유일한 방법입니다.

이 효과는 개인 정보 보호 방식으로 앱의 프로세스 외부에 적용됩니다.

RealityView에 추가되면 지구 엔티티에 호버 효과 구성 요소를 추가할 것입니다.

이제, 포인터가 그 위에 있을 때 지구 모델이 켜지면 내가 그것과 상호 작용할 수 있다는 것을 나타낸다.

다음으로, 애니메이션으로 넘어가자.

RealityKit에는 초기 값에서 최종 값으로 속성을 애니메이션화하는 from-to-by 애니메이션, 엔티티가 부모를 중심으로 회전하게 하는 궤도 애니메이션, 일련의 값을 통해 프레임 단위로 진행하는 타임 샘플링 애니메이션과 같은 다양한 내장 애니메이션 유형이 있습니다.

나는 달에 궤도 애니메이션을 설정할 것이다.

달은 전체 궤도를 완료하는 데 30초가 걸릴 것이며 궤도 축은 y축이 될 것이다.

그리고 나는 궤도가 달의 현재 위치에서 시작되도록 할 것이다.

이 궤도 애니메이션의 속성을 정의하면, 나는 그것을 위한 애니메이션 리소스를 생성하고 달 엔티티에서 그 애니메이션을 재생할 것이다.

그리고 이제 달은 지구를 공전한다.

나에게 이것은 마법의 순간이다.

애니메이션이 제자리에 있으면, 그 장면은 생생하게 느껴진다.

하지만 애니메이션은 3D 콘텐츠에 생명을 불어넣는 데 도움이 되지만, 공간 오디오는 모델이 실제로 존재하는 것처럼 느끼게 합니다.

RealityKit에는 세 가지 유형의 오디오가 있습니다: 공간, 주변 및 채널.

그들 각각을 더 자세히 살펴봅시다.

RealityKit 사운드는 기본적으로 공간적이므로, 오디오 소스는 실제로 주변 환경에 존재하는 것처럼 들립니다.

공간 오디오 구성 요소를 사용하면 물체가 공간으로 소리를 방출하는 방법을 사용자 정의하여 더 현실적이거나 예술적으로 만들 수 있습니다.

지향성을 사용하여 모든 방향으로 소리를 내거나 특정 방향으로 소리를 투사하세요.

앰비언트 오디오 컴포넌트는 환경의 사운드를 캡처하는 멀티채널 파일에 적합합니다.

주변 소스에는 추가 잔향이 추가되지 않습니다.

분위기의 각 채널은 고정된 방향에서 재생된다.

그리고 마지막으로, 채널 오디오 컴포넌트는 공간 효과 없이 오디오 파일 채널을 스피커로 직접 보냅니다.

이것은 어떤 시각적 요소와도 연결되지 않은 배경 음악에 이상적입니다.

Reality Composer Pro에서 장면에 오디오를 추가하고 RealityKit을 사용하여 인터페이스할 수 있습니다.

또는 코드에 오디오를 연결할 수 있습니다.

한 번 보자.

나는 궤도를 도는 위성에 약간의 반복 오디오를 추가할 것이다.

먼저, 오디오 소스 역할을 할 빈 엔티티에 공간 오디오 구성 요소를 추가할 것입니다.

0.75의 지향성은 특정 방향으로 단단한 음광을 만들어낸다.

오디오가 내가 원하는 방향으로 투사되도록 오디오 소스 엔티티를 y축으로 회전시킬 것이다.

그런 다음 리소스에서 반복 오디오 클립을 로드하고 playAudio를 호출하여 audioSource 엔티티에서 재생할 것입니다.

이것이 실제로 실행되는지 봅시다.

공간 오디오 소스는 단단히 초점을 맞춘 지향성으로 구성되어 있기 때문에, 오디오는 지구의 내 쪽에서 명확하게 들을 수 있지만, 위성이 반대편에 있을 때는 더 조용하다.

그것은 입력, 애니메이션, 그리고 오디오였다.

다양한 방식으로 기존 기능을 결합하여 RealityKit에서 더 많은 기능을 구축할 수 있습니다.

이 목적을 위해 사용할 수 있는 두 가지 주요 도구가 있습니다. 자신만의 구성 요소를 정의하고 자신만의 시스템을 정의합니다.

구성 요소는 3D 경험의 한 측면을 제어하는 데이터를 포함한다.

구성 요소는 엔티티로 그룹화된다.

구성 요소가 없으면, 엔티티는 아무것도 하지 않는다.

각 구성 요소는 엔티티 구현의 단일 요소를 제공한다.

변환 구성 요소가 엔티티를 배치하고 모델 구성 요소가 3D 모델을 렌더링한다는 것을 배웠습니다.

RealityKit이 제공하는 미리 정의된 구성 요소 외에도, 자신만의 구성 요소를 정의할 수 있습니다.

다음은 제 동료 폴이 만든 traceMesh 객체를 포함하는 사용자 지정 구성 요소의 예입니다.

추적 구성 요소 유형은 구성 요소 프로토콜을 준수하므로 런타임에 모든 엔티티에서 이 구성 요소를 가져오고 설정할 수 있습니다.

또한 Swift 패키지의 구성 요소를 정의하고 Codable 프로토콜을 준수하여 데이터 기반 워크플로우를 채택할 수 있습니다.

코딩 가능한 구성 요소는 Reality Composer Pro 인터페이스에 나타나며 디자인 시간에 엔티티에 직접 추가할 수 있습니다.

"Xcode에서 Reality Composer Pro 콘텐츠 작업" 강연에서 사용자 지정 구성 요소에 대해 자세히 알아볼 수 있습니다.

나는 이미 이 이야기의 앞부분에서 엔티티를 살펴보았고, 방금 구성 요소를 다루었다.

다음으로, 시스템에 대해 이야기해 봅시다.

시스템에는 엔티티와 구성 요소에 작용하는 코드가 포함되어 있다.

엔티티, 구성 요소 및 시스템 또는 ECS는 3D 경험의 모양과 행동을 모델링하는 도구입니다.

시스템은 앱의 동작을 구현하는 코드를 구성하는 방법입니다.

시스템의 코드는 구성 요소의 현재 상태에 따라 정기적으로 실행됩니다.

예를 들어, 이 TraceSystem은 지구를 공전할 때 위성 엔티티 뒤에서 추적되는 라인 메쉬를 업데이트합니다.

각 업데이트는 엔티티의 현재 위치를 추적에 추가합니다.

시스템이 등록되면, RealityKit을 사용하는 앱의 모든 곳에 자동으로 적용됩니다.

내 앱의 이니셜라이저에 추적 시스템을 등록하면 모든 관련 엔티티에 대해 업데이트됩니다.

하지만 어떤 엔티티가 관련이 있으며, 시스템은 언제 업데이트되나요?

이 시스템은 추적 구성 요소로만 엔티티를 업데이트하기를 원하므로, 추적 구성 요소가 있는 엔티티로 필터링하는 엔티티 쿼리를 만듭니다.

업데이트 기능에서, 시스템은 엔티티 쿼리를 전달하고 렌더링할 때 엔티티를 업데이트할 것을 지정합니다.

렌더링 조건은 이 시스템이 부드러운 애니메이션을 위해 적절한 속도로 업데이트된다는 것을 의미합니다.

유체 사용자 지정 애니메이션을 생성하기 위해 엔티티의 위치를 라인 메쉬에 추가하는 추적 시스템이 있습니다.

시스템은 다양한 효과와 행동을 구현하는 정말 효과적인 방법이다.

RealityKit에는 3D 앱을 쉽게 만들 수 있는 많은 기능이 있습니다.

RealityKit과 RealityView를 사용하여 SwiftUI로 정의된 뷰, 창 및 몰입형 공간에 3D 요소를 추가할 수 있습니다.

RealityKit을 사용하여 USD 파일을 로드하고, 제스처를 처리하고, 애니메이션과 공간 오디오를 재생할 수 있습니다.

RealityKit은 많은 사전 정의된 구성 요소를 제공하지만, 앱의 특정 요구에 맞는 사용자 지정 구성 요소와 시스템을 정의할 수도 있습니다.

그것으로, 저는 당신이 RealityKit을 시작하는 데 필요한 개념을 다루었습니다.

유진의 세션인 "RealityKit으로 공간 컴퓨팅 앱 강화"는 포털, 입자 방출기, 첨부 파일 등과 같은 RealityKit의 더 많은 기능을 안내합니다.

그리고 아만다의 세션 "Xcode에서 Reality Composer Pro 콘텐츠 작업"은 Reality Composer Pro, RealityKit, Xcode 미리보기 및 시뮬레이터를 사용하여 몰입형 앱을 구축하는 과정을 안내합니다.

RealityKit에는 앱에서 사용할 수 있는 흥미로운 기능이 많이 있습니다.

당신이 만들 멋진 경험을 보게 되어 정말 기쁩니다.

봐줘서 고마워.

♪