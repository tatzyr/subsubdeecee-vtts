10241

♪ ♪

아담: 안녕. 제 이름은 아담이고, 저는 SharePlay 팀의 엔지니어입니다.

오늘 우리는 여러분 중 많은 사람들이 요구해 온 흥미진진한 새로운 기능에 대해 이야기할 것입니다.

세션 제목으로 짐작하셨겠지만, 우리는 SharePlay를 통해 파일을 공유하는 것에 대해 이야기할 것입니다.

먼저 첨부 파일을 전송하는 것이 무엇을 의미하는지에 대해 이야기하겠습니다.

우리는 파일이나 당신이 공유하고 싶은 많은 양의 데이터를 "첨부 파일"이라고 부를 것입니다.

그런 다음 GroupActivities의 새로운 API인 GroupSessionJournal에 대해 이야기할 것입니다.

그 후, 우리는 늦은 참여자에 대해 이야기할 것이고, 마지막으로, 우리는 DrawTogether 앱에서 GroupSessionJournal을 채택하는 것이 얼마나 쉬운지 살펴볼 것입니다.

첨부 파일을 옮기는 것이 무엇을 의미하는지부터 시작합시다.

드로잉 앱을 통해 이야기해 봅시다.

우리는 GroupSessionMessenger와 두 장치 간에 도면을 동기화할 수 있도록 그것을 가지고 있습니다.

하지만 이미지를 캔버스에 떨어뜨리면 어떻게 되나요?

음, GroupSessionMessenger의 크기 제한 때문에, 이전에는 SharePlay를 활용할 수 없었습니다.

하지만 이제, 우리는 장치 간에 초고속 메시징을 제공하는 동일한 Apple 인프라가 이제 첨부 파일도 전송할 수 있도록 만들었습니다.

그래서 이제 강아지의 귀여운 사진을 캔버스에 떨어뜨리면, 그 어느 때보다 빠르게 클라우드 인프라를 통해 전송됩니다.

이것은 전송에 필요한 데이터를 최소화하고 유휴 대기 시간을 최소화하기 위해 여러 계층의 Apple 기술을 활용하며, 모두 가능한 한 빨리 경험을 하고 이 모든 것이 시스템 계층에서 발생합니다.

하지만 그게 아니야.

SharePlay는 사용자 개인 정보 보호를 염두에 두고 구축되므로 전송 중인 데이터가 장치 간에 종단간 암호화되도록 하는 동안 이 모든 것이 수행됩니다.

애플은 전송된 데이터의 내용에 대해 모른다.

그리고 이것은 Mochi의 귀여운 개 사진만을 위한 것이 아니라, 당신이 원하는 무엇이든 할 수 있습니다!

PDF와 같은 파일이 있나요? 해봐! 음성 녹음이나 주석은 어때?

협업 중인 모든 사용자 콘텐츠는 이제 이 새로운 API로 그 어느 때보다 빠르게 구동될 수 있습니다.

그래서, 이제 API는 어떻게 생겼나요?

음, 바로 뛰어들자!

익숙해져야 할 우리의 주요 목적은 "GroupSessionJournal"입니다.

이 객체는 iOS 17에 새로운 것이다.

"GroupSessionMessenger"에 익숙한 것처럼, "GroupSession"으로 초기화됩니다.

하지만 이 물건의 목적을 이해하는 것은 중요하다.

그것은 GroupSession의 모든 사람에게 일관성을 유지하는 대상이다.

이것은 당신이 저널에서 취하는 행동이 모든 사람에게 영향을 미치고 저널의 속성이 모든 사람에게 비슷하게 동기화된다는 것을 의미합니다.

몇 가지 예를 살펴보자.

저널을 갖게 되면, "첨부" AsyncSequence를 통해 첨부 돌연변이를 관찰할 수 있습니다.

그리고 "추가" 기능으로 사용자 지정 첨부 파일을 업로드할 수 있습니다.

당신이 해야 할 일은 당신의 유형을 전송 가능한 프로토콜에 따르도록 하는 것뿐입니다!

그래서 이제, 한 장치가 "추가"를 호출할 때, 그들의 "첨부 파일" AsyncSequence는 새로운 첨부 파일을 제공할 뿐만 아니라, GroupSession의 모든 사람들이 동일한 이벤트가 발생하는 것을 보고 업로드 중인 첨부 파일을 로드할 수 있습니다!

마찬가지로, "제거" 기능을 호출하여 첨부 파일을 제거하면, 모든 사람의 "첨부" AsyncSequence가 이벤트에 대해 업데이트됩니다.

그리고 그게 거의 다야.

이 새로운 API를 통해 첨부 파일을 얼마나 쉽게 업로드하고 받을 수 있는지 알 수 있습니다.

DrawTogether 앱에서 이것을 구현하기 전에, 이 새로운 API를 활용할 때 몇 가지 큰 고려 사항에 대해 이야기해 봅시다.

그리고 첨부 파일의 크기는 무한할 수 없으며, 실제로는 100MB로 제한됩니다.

이것은 우리가 사용자 경험에 대해 신중하게 생각할 수 있도록 하기 위한 것이다.

이러한 경험은 빨라야 하며 장치는 데이터를 매우 빠르게 업로드하고 다운로드할 수 있습니다.

그러므로, 당신은 항상 전송되는 첨부 파일의 크기를 최소화하려고 노력해야 합니다.

그것은 당신이 드로잉 앱이라면, 캔버스에서 허용되는 사진을 100MB 이하로 제한한다는 것을 의미할 수 있습니다.

사용자 생성 콘텐츠를 중심으로 한 모든 데이터는 여기서 완벽하지만, 영화와 같이 사용자가 생성되지 않은 더 큰 첨부 파일은 사용자의 장치가 아닌 자체 서버에서 제공되어야 합니다.

그리고 수명 주기가 있다.

저널에 실린 모든 것은 그룹세션에 누군가가 있는 한 주변에 있을 것이다.

이것은 저널에 첨부 파일을 추가하는 사람이 GroupSession에서 연결이 끊어지더라도 첨부 파일이 계속 유지된다는 것을 의미합니다.

하지만 모두가 GroupSession을 떠나면, 첨부 파일은 그들과 함께 제거됩니다.

GroupSessionMessenger와 통합하는 데 익숙하다면 이 주제를 기억할 수 있습니다: 늦은 참여자.

일반적으로 새로운 사람이 GroupSession에 가입할 때, 당신의 신청서는 그들이 그룹의 나머지 부분을 따라잡을 수 있도록 당신의 세계 상태를 그 사람에게 다시 전송해야 합니다.

이것은 GroupSessionMessenger를 채택한 애플리케이션에 의해 관리되며 각 장치가 따라잡기가 필요한 사람에게 메시지를 보내는 것을 포함하며, 이는 꽤 비쌀 수 있습니다.

다음 예를 들어 봅시다.

그룹 세션에 두 사람이 있다고 말하세요.

아담과 브라이언이 있어. 한편 클라라는 아직 합류하지 않았다.

그래서, 클라라가 합류하기 전에, 아담과 브라이언은 재미있게 그림을 그리고 있다.

아담은 계속해서 개 뼈를 그리고 브라이언도 그의 편에서 그것을 업데이트한다.

이제, 클라라는 계속해서 합류하지만, 그녀가 합류할 때 그녀의 캔버스는 비어 있다!

그녀의 장치는 그녀가 그들을 따라잡을 수 있도록 아담과 브라이언이 하고 있던 정보를 얻어야 한다.

이 시점에서 아담과 브라이언은 둘 다 클라라에게 그들의 세계 상태를 이해하는 것을 보내야 할 것이고 클라라의 장치는 그녀가 같은 지점에 있도록 수렴할 것이다.

이제 그 그림의 첨부 파일을 추가하면 아담과 브라이언이 보낸 메시지는 꽤 커질 수 있습니다.

당신이 상상할 수 있듯이, 이것은 문제가 된다.

당신은 한 장치에 이미지를 제공하기 위해 각 사람이 100MB를 다시 업로드하도록 할 것입니다.

음, 이제 늦은 조인들은 GroupSessionJournal에서 당신을 위해 처리됩니다.

늦은 조인들은 다른 사람들로부터 재업로드하지 않고 저널에 업로드된 첨부 파일을 받게 되며, 이는 더 빠르고 적은 대역폭 확장 경험을 가능하게 합니다.

이제 그것은 많은 정보였기 때문에, 재미있는 부분에 뛰어들어 직장에서 마법을 보고 DrawTogether 앱에서 GroupSessionJournal을 채택하는 방법을 살펴봅시다.

이것은 우리가 수정할 DrawTogether 앱입니다.

보시다시피, 하단에 SharePlay 세션을 시작할 수 있는 몇 가지 버튼과 세션을 재설정할 수 있는 휴지통 버튼이 있습니다.

여기 하단에 캔버스에 넣고 싶은 사진을 선택할 수 있는 버튼이 있다면 꽤 좋을 것 같아.

SwiftUI는 이것을 쉽게 시작할 수 있게 해주므로, 바로 시작합시다!

우리가 수정해야 할 네 가지 주요 구성 요소가 있다.

먼저, 우리의 "캔버스" 모델이 있습니다.

이것은 전체 앱의 주요 모델 객체입니다.

그것은 지역 및 원격 참가자 모두를 위한 모든 스트로크를 추적하며 GroupActivities에 대한 우리의 인터페이스입니다.

그러면 우리는 세 가지 견해를 가지고 있다.

다른 두 뷰에 대한 모든 하위 뷰가 있는 "ContentView"가 있습니다. 이전에 본 하단의 버튼을 유지하는 "ControlBar" 보기와 스트로크를 위해 모델의 모든 개체를 그리는 "CanvasView"와 곧 이미지도 있습니다.

우리 모델부터 시작하자.

우리는 두 가지를 추적하기 위해 이것이 필요하다.

먼저, 저널에서 얻은 모든 이미지는 새로운 구조인 "CanvasImage"로 추적할 것입니다.

둘째, 우리가 하나를 배치하려고 한다면, 로컬로 선택된 이미지와 모든 이미지.

이제 캔버스가 "GroupSessionJournal"을 만들고 configureGroupSession 기능에서 수행할 모든 첨부 파일을 처리합시다.

그리고 우리는 우리의 관점에서 호출할 수 있는 로컬로 선택된 이미지를 저널에 추가하는 기능을 만들 것입니다.

이제 우리는 모든 비UI 조각을 가지고 있습니다. 계속해서 몇 가지 견해를 수정합시다.

우리는 사진을 선택하기 위한 버튼으로 시작할 것이다.

이전부터 기억한다면, 우리는 ControlBar에 이 버튼을 추가하고 싶었습니다.

PhotosUI를 가져오고 "PhotosPicker" 보기를 사용하여 새 버튼을 추가하고 "selectedImageData"로 모델에 바로 넣자.

우리는 선택한 사진을 시각화하고 캔버스에서 원하는 곳으로 이동할 수 있는 PhotoPlacementView라는 간단한 보기를 만들었습니다.

지금 그 보기를 ContentView에 추가해 봅시다.

우리의 진행 상황을 보자.

우리는 세션을 시작한 다음 사진 버튼을 얻을 수 있습니다.

사진을 고르자, 그리고 bam! 우리는 끌 수 있는 이미지가 있다.

이제 마지막 부분은 모델의 모든 이미지를 시각화하기 위해 "캔버스" 보기를 수정하는 것입니다.

이제 우리가 그것을 시도한다면, 우리는 이미지의 마지막 지점을 선택하자마자 이미지가 양쪽에 나타나는 것을 볼 수 있다.

휴.

이제 우리는 끝났고 나는 우리가 꽤 멋진 경험을 했다고 생각해.

시청해 주셔서 감사합니다.

이제 이 세션을 보았으니, GroupActivities로 어떤 종류의 놀라운 경험을 쌓을 수 있는지 보세요.

아직 GroupActivities를 채택하지 않았다면, SharePlay가 앱에 무엇을 의미하는지에 대한 소개로 "앱에 SharePlay 추가"를 확인하세요.

그리고 우리가 이 DrawTogether 앱을 어떻게 시작했는지 보거나 GroupActivities를 채택하는 방법의 몇 가지 예를 보고 싶다면, "GroupActivities로 사용자 지정 경험 구축"을 확인하세요.

다시 한 번 고마워, 그리고 우리는 네가 뭘 만드는지 빨리 보고 싶어!

♪ ♪