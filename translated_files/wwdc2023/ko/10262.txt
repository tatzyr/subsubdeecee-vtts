10262

♪ 부드러운 기악 힙합 ♪

♪

안녕하세요, 저는 웹킷 개발자 경험 팀의 엔지니어인 패트릭입니다. 오늘 사파리에서 웹 개발자가 사용할 수 있는 기능을 둘러보게 되어 기쁩니다.

사파리에는 웹 개발자와 디자이너가 웹 페이지, 웹 앱, 자바스크립트 및 웹 뷰가 있는 앱, 확장 프로그램 등을 검사할 수 있는 풍부한 도구 세트에 액세스할 수 있는 기능이 포함되어 있습니다.

그리고 이러한 도구는 Mac과 페어링할 때 iOS, iPadOS, tvOS 및 xrOS에서 원활하게 작동합니다.

오늘 우리는 macOS에서 웹 페이지를 검사하는 데 도움이 되는 도구를 간략하게 살펴보는 것부터 시작하여 Safari에서 사용할 수 있는 개발자 도구의 폭을 다룰 것입니다.

그런 다음 Safari와 iOS, iPadOS 및 xrOS 시뮬레이터에서 반응형 레이아웃을 미리 볼 수 있는 방법을 살펴보겠습니다.

다음으로, 우리는 당신의 Mac을 넘어 Mac에서 iPhone이나 xrOS를 실행하는 장치와 같은 다른 장치에서 실행되는 콘텐츠를 어떻게 디버깅할 수 있는지 살펴볼 것입니다.

그런 다음, WebDriver를 사용하여 크로스 브라우저 및 크로스 플랫폼 방식으로 자동화된 테스트를 수행하는 방법을 살펴보겠습니다.

그리고 마지막으로, 재설계된 기능 플래그 설정을 사용하여 미래의 웹 플랫폼 기능을 탐색하는 방법을 살펴보겠습니다.

하지만, 우리가 그 주제를 파고들기 전에, 이전에 사파리에서 개발자 기능을 사용하지 않았다면, 그것들을 활성화해야 할 것입니다.

사파리 설정에서 웹 개발자를 위한 기능을 표시하는 옵션을 찾을 수 있습니다.

거기에 가려면, 메뉴 표시줄에서 사파리를 선택한 다음, 설정을 선택하세요.

설정 창에서 고급 탭을 클릭하세요.

여기서 웹 개발자를 위한 기능 표시 확인란을 찾을 수 있습니다.

설정을 활성화하세요.

이제 웹 개발자를 위한 기능을 활성화했으므로, Safari의 도구를 사용하여 열린 웹 페이지를 검사하는 방법을 빠르게 살펴보는 것으로 시작합시다.

여기 제가 배경색을 바로 잡으려고 노력해 온 웹 페이지가 있습니다.

그리고 나는 정말로 모든 것을 하나로 모을 수 있는 것은 내가 우주비행사의 헬멧에서 색을 잡는 것이라고 생각한다.

웹 인스펙터를 사용하여 이 페이지의 배경 그라디언트의 일부가 될 색상을 선택할 수 있는 방법을 살펴봅시다.

작업 중인 페이지를 검사하기 위해 웹 인스펙터를 빠르게 여는 두 가지 방법이 있습니다.

첫 번째는 웹 콘텐츠를 디자인하고 개발하는 동안 사용할 수 있는 주요 도구를 더 쉽게 찾을 수 있도록 올해 다시 생각한 개발 메뉴에 있습니다.

메뉴에는 웹 인스펙터를 탭이나 작업으로 바로 열 수 있는 몇 가지 항목이 있습니다.

나는 단지 웹 인스펙터를 열고 특정 탭으로 이동하지 않고 싶었기 때문에, 여기서 웹 인스펙터 보기를 선택할 것이다.

하지만 당신에게 보여주고 싶은 웹 인스펙터를 여는 또 다른 편리한 방법이 있습니다.

웹 페이지의 어느 곳에서나 Control-클릭하여 컨텍스트 메뉴를 표시하고 Inspect Element를 선택할 수 있습니다. Inspect Element는 웹 인스펙터를 표시할 뿐만 아니라 요소를 선택하여 세부 정보 사이드바에 스타일 및 기타 정보를 표시합니다.

검사 요소 항목을 사용하는 것은 웹 인스펙터가 표시된 후에도 작동합니다.

같은 방식으로 다른 요소를 선택하거나, 요소 선택 도구를 사용하여 선택기, 여백, 모양 윤곽 및 접근성 역할과 같은 레이아웃 정보를 포함하여 맴돌고 있는 각 요소에 대한 정보를 볼 수 있습니다.

요소 선택 모드를 클릭하면, 웹 인스펙터에서 요소가 선택됩니다.

하지만 이제 웹 인스펙터를 열었으니, 제 페이지의 배경 그라디언트를 보고 싶습니다.

나는 그들의 바이저에서 약간의 색을 샘플링하여 우주비행사를 집에서 더 많이 만들고 싶다.

그라디언트를 편집하려면, 스타일 사이드바의 그라디언트 옆에 있는 미리보기 견본을 클릭할 수 있습니다.

편집하고 싶은 그라디언트 부분을 선택한 다음, 색상 선택기를 사용하여 우주비행사의 바이저와 같은 화면 어딘가에서 색상을 잡으세요.

흠, 그건 내 취향에 비해 너무 밝아.

어쩌면 이건 그렇게 좋은 생각이 아니었을지도 몰라.

전에는 더 좋아 보였던 것 같아.

나는 Command-Z로 변경을 취소하고 지금은 색을 동일하게 유지할 것이다.

물론, 이것은 웹 인스펙터가 웹 페이지를 검사하는 데 도움이 되는 많은 방법 중 하나일 뿐입니다.

웹 인스펙터에서 사용할 수 있는 도구에 대해 더 알고 싶다면, WWDC21의 "웹 인스펙터의 새로운 기능"과 "웹 인스펙터 개선 사항 발견"을 확인하십시오.

이제, 사용자의 디스플레이에 적응할 수 있는 페이지의 능력을 테스트하여 웹 페이지의 디자인을 개선하는 데 도움이 되는 또 다른 도구를 살펴봅시다.

사파리에는 이 작업을 위한 반응형 디자인 모드라는 도구가 있으며, 반응형 디자인 모드 입력 항목을 사용하여 개발 메뉴에서 액세스할 수 있습니다.

이전에 반응형 디자인 모드를 사용한 적이 있다면, 모든 화면 크기에서 콘텐츠 레이아웃의 반응성에 집중할 수 있도록 조정했다는 것을 눈치챘을 것입니다.

창이나 화면보다 더 큰 뷰포트 크기를 시도해 볼 수 있습니다.

뷰포트 측면의 핸들을 드래그하면, 뷰포트는 모든 페이지를 계속 표시하도록 확장되며, 텍스트와 이미지와 같은 요소를 새 뷰포트에 맞게 리플로우합니다.

뷰포트 위의 너비와 높이를 입력하여 특정 크기를 타겟팅할 수도 있습니다.

너비와 높이의 오른쪽에는 뷰포트가 렌더링되는 실제 크기의 비율인 배율 계수를 볼 수 있습니다.

뷰포트의 현재 높이가 800픽셀이기 때문에 스케일 계수는 100%가 아니지만, 창은 전체 뷰포트를 보여줄 만큼 충분히 높지 않았기 때문에 사파리는 뷰포트의 디스플레이를 전체 크기의 78%로 축소했다.

반응형 디자인 모드를 사용하면 픽셀 비율을 변경할 수 있으므로, 다른 디스플레이의 픽셀 비율에 맞는 이미지 자산과 기타 스타일을 제공하여 반응성의 추가 차원을 테스트할 수 있습니다.

이미지 태그의 소스 세트, 이미지가 있는 곳 어디에서나 사용할 수 있는 CSS 이미지 세트 기능, 해상도 미디어 쿼리를 포함하여 웹에서 디스플레이의 픽셀 비율에 응답하는 몇 가지 방법이 있으며, 디스플레이의 픽셀 비율에 응답하여 테두리 크기와 같은 페이지 스타일의 모든 측면을 조정할 수 있습니다.

하지만 때로는 macOS뿐만 아니라 iOS, iPadOS 및 xrOS에서도 페이지의 응답성을 테스트하려고 할 수도 있습니다.

올해 새로, 우리는 사파리에서 시뮬레이터로 빠르게 뛰어들 수 있는 기능을 도입했습니다.

시뮬레이터는 물리적 장치 없이 iOS, iPadOS 및 xrOS에서 웹 콘텐츠를 테스트할 수 있는 좋은 방법입니다.

iOS 및 iPadOS 시뮬레이터는 Xcode에 포함되어 있으며 해당 플랫폼용 Safari를 포함합니다.

Xcode는 Mac App Store에서 무료로 다운로드할 수 있습니다.

그리고 설정을 완료하기 위해 Xcode를 한 번 실행한 후, 다음에 Safari를 시작할 때 시뮬레이터를 사용할 수 있습니다.

시뮬레이터로 열기를 클릭하면, 설치된 시뮬레이터 목록이 표시되며, 현재 실행 중인 시뮬레이터는 쉽게 접근할 수 있도록 맨 위로 이동합니다.

Xcode가 설치되어 있지 않거나 다른 장치용 시뮬레이터를 추가하려는 경우, 메뉴의 링크를 따라 시작하는 데 도움이 되는 문서를 볼 수 있습니다.

시뮬레이터에서 현재 페이지를 열자.

이 시뮬레이터는 이미 실행 중이었지만, 시뮬레이터가 아직 실행되고 있지 않다면, 당신을 위해 시작될 것입니다.

주목해야 할 중요한 것은 macOS의 시뮬레이터와 사파리 간의 페이지 레이아웃의 차이이다.

iOS의 Safari는 거의 같은 너비에서도 더 많은 화면 부동산을 사용할 수 있는 것처럼 페이지를 배치합니다.

시뮬레이터의 다른 훌륭한 측면 중 하나는 부드러운 스크롤과 더블 탭으로 확대/축소와 같이 사용자가 iOS에서 작업할 것으로 기대하는 동작을 테스트하여 iPhone이 없어도 훌륭한 사용자 경험을 보장할 수 있다는 것입니다.

그리고 시뮬레이터에서 웹 페이지를 열면, 시뮬레이터를 찾은 다음 검사하려는 시뮬레이터에서 웹 페이지를 선택하여 개발 메뉴에서 웹 인스펙터를 사용하여 검사할 수도 있습니다.

그런 다음 웹 인스펙터는 자체 창에서 열리고 시뮬레이터에서 선택한 페이지를 검사합니다.

iOS와 iPadOS 외에도, xrOS 시뮬레이터를 활용하여 해당 플랫폼에서 웹 콘텐츠를 테스트할 수 있습니다.

시뮬레이터가 설치되어 있지 않다면, 시뮬레이터 열기 메뉴에서 시뮬레이터 추가를 선택하여 추가하는 방법을 배우세요.

시뮬레이터를 설치하면, Mac에서 Safari를 사용하여 웹 콘텐츠를 검사하는 것을 포함하여 iOS 시뮬레이터와 같은 방식으로 사용할 수 있습니다.

사파리의 개발 메뉴에서 시뮬레이터를 찾고 검사할 콘텐츠를 선택하세요.

사실, macOS의 Safari에서 시뮬레이터를 검사할 수 있을 뿐만 아니라 Mac의 Safari에서 iOS, iPadOS, tvOS 및 xrOS 장치를 검사할 수도 있습니다.

시뮬레이터와 달리, Safari 및 검사 가능한 다른 앱에서 열린 웹 페이지 목록을 제공하기 위해 장치를 선택하기 위해 Mac을 사용하여 검사하기 전에 장치의 콘텐츠 검사를 활성화해야 합니다.

iOS와 iPadOS의 경우, 설정 앱에서 이것을 할 수 있습니다.

아래로 스크롤하여 사파리를 선택한 다음, 하단으로 스크롤하여 고급을 선택하세요.

이제 웹 인스펙터를 전환하세요.

마지막으로, 케이블을 사용하여 장치를 Mac에 연결하세요.

여기서, 저는 사파리 창과 홈 화면 웹 앱을 포함하여 iPad에서 몇 가지 웹 콘텐츠를 열었습니다.

이제 Mac으로 돌아가서 이 콘텐츠를 검사해 봅시다.

Mac의 개발 메뉴에서, 이전에 사용했던 시뮬레이터와 같은 장소에서 방금 연결한 장치에 대한 항목을 볼 수 있습니다.

그리고 시뮬레이터와 마찬가지로, Safari에서 열었던 웹 페이지, 홈 화면 웹 앱 및 서비스 작업자를 포함하여 검사 가능한 콘텐츠를 볼 수 있습니다.

이전에 했던 것처럼, 우리는 홈 화면 웹 앱과 같은 메뉴에서 검사 가능한 콘텐츠를 선택할 수 있습니다.

그리고 이전과 마찬가지로, 웹 인스펙터가 나타나 Mac에서 장치의 콘텐츠를 검사합니다.

하지만 Mac에서 장치를 검사하기 위해 항상 케이블을 사용할 필요가 없다면 좋지 않을까요?

Mac으로 돌아가서 네트워크를 통해 장치에 연결할 수 있는 방법을 살펴봅시다.

개발 메뉴로 돌아가면, 네트워크를 통한 연결이라는 제목의 항목을 찾을 수 있습니다.

일단 선택되면, 이제 Mac과 장치가 모두 동일한 네트워크에 있는 한 전선 없이 장치를 연결할 수 있습니다.

그리고 장치에 대해 해당 설정을 활성화하면, 이제 장치의 플러그를 뽑고 무선으로 검사할 수 있습니다.

올해, 당신은 또한 macOS Sonoma를 실행하는 Mac에서 xrOS 장치를 검사할 수 있습니다.

그러나, 시작하는 것은 iOS와 iPadOS와는 조금 다를 것이다.

Mac에 유선 연결 없이 장치를 검사할 수 있도록, 우리는 네트워크를 통해 이 플랫폼과의 페어링을 지원합니다.

내 동료의 장치와 페어링하자.

시작하려면, 설정을 열고, 앱을 선택한 다음 사파리를 선택하세요.

아래로 스크롤하여 고급을 선택한 다음, 웹 인스펙터를 활성화하세요.

이제, 장치를 Mac과 페어링해야 합니다.

Mac과 장치가 모두 동일한 네트워크에 연결되어 있는지 확인하고 싶을 것입니다.

그런 다음 설정 앱에서 일반을 선택한 다음 원격 장치를 선택하세요.

원격 장치 화면이 보이는 동안, 당신의 장치는 macOS에서 페어링할 수 있습니다.

Mac에서 Safari에서 개발 메뉴를 열고, 장치의 하위 메뉴에서 개발을 위해 사용을 선택하세요.

장치에는 6자리 페어링 코드가 표시되며, Mac에는 페어링 코드를 입력할 수 있는 창이 나타납니다.

Mac에 코드를 입력하세요.

코드를 입력하면 페어링이 자동으로 완료되며, Mac은 장치의 원격 장치 목록에 나열됩니다.

장치가 페어링되면, iOS 장치와 같은 방식으로 Safari를 열고 Mac으로 웹 페이지 및 기타 콘텐츠를 검사할 수 있습니다.

심지어 요소 선택 모드도 작동합니다.

macOS에서 이전에 했던 것과 같은 방식으로 요소 선택 모드를 입력하고, 웹 페이지에서 검사하고 싶은 노드를 보고, 핀치로 선택하세요.

xrOS용 웹 콘텐츠 설계 및 개발에 대해 더 알고 싶다면, "공간 컴퓨팅을 위한 사파리를 만나세요"를 확인하세요.

웹 콘텐츠는 사파리와 웹 앱을 넘어 확장된다.

웹 페이지와 자바스크립트는 Apple의 플랫폼에서 백만 개 이상의 앱에서 사용되며, 올해 새로운 기능은 앱의 출시 버전에서 해당 콘텐츠를 검사할 수 있는 기능입니다.

앱은 사용자 인터페이스의 일부로 웹 콘텐츠를 사용하거나 자바스크립트를 사용하여 앱의 일부를 제어할 수 있습니다.

이러한 경우, macOS 13.3 이상, iOS 및 iPadOS 16.4 이상, xrOS에서 사용할 수 있는 API가 있어 앱의 콘텐츠를 검사할 수 있습니다.

이 API는 WKWebView와 JSContext 모두에서 사용할 수 있습니다.

검사할 수 있도록 할 때 각 JSContext에 이름을 제공하는 것이 좋습니다. 여러 JSContext를 구별할 수 있도록 Safari의 개발 메뉴에 표시됩니다.

그리고, 애플리케이션이 일부 콘텐츠의 검사를 활성화하면, 장치에서 다른 웹 콘텐츠를 검사하는 것처럼 사파리의 개발 메뉴에서 검사할 수 있습니다.

이제 여러 장치에서 콘텐츠를 검사하고 디버깅할 수 있으므로, WebDriver로 콘텐츠가 예상대로 계속 작동하도록 할 수 있는 방법에 대해 이야기해 봅시다.

웹이 발전함에 따라, 웹 페이지가 예상대로 작동하는지 확인하기 위해 지속적으로 테스트하는 것이 중요합니다.

WebDriver는 브라우저별 코드 없이 플랫폼의 모든 주요 브라우저에서 지원하는 웹 콘텐츠의 테스트를 자동화하기 위한 크로스 브라우저 API입니다.

HTTP 요청을 수락하는 로컬 웹 서버를 호스팅하여 다양한 테스트 설정에서 자동화 명령을 수락할 수 있으며, 요소를 찾고, 요소의 접근성 역할을 얻고, 자바스크립트를 실행하고, 심지어 스크린샷을 찍는 것과 같이 웹 페이지에 대한 자동화된 테스트를 실행하는 데 사용할 수 있는 수많은 명령을 제공합니다.

대부분의 경우, 당신은 제3자 라이브러리를 사용하여 WebDriver와 상호 작용할 것입니다.

그러한 인기 있는 라이브러리 중 하나는 파이썬, 자바, PHP, 자바스크립트 등으로 API를 제공하는 셀레늄이다.

다음은 셀레늄으로 사파리를 자동화하는 데 사용할 수 있는 파이썬 스크립트의 예입니다.

그것은 사파리의 기본 옵션이 있는 드라이버를 만들 것이다.

그런 다음 webkit.org의 웹 인스펙터 문서로 이동합니다.

거기에 도착하면, 우리는 검색 필드를 찾고 거기에 "장치"를 입력할 것이다.

끝내기 위해, 우리는 여전히 장치 설정 링크를 찾을 수 있다고 주장할 것이다.

그리고 우리가 모두 끝나면, 우리는 사파리가 우리가 열었던 창을 정리할 수 있도록 자동화 세션을 끝낼 것이다.

이 스크립트를 실행하자.

이 창이 자동화되고 있음을 나타내는 주황색 제목 표시줄로 새 창이 생성됩니다.

우리는 테스트가 사용자와 마찬가지로 타이핑과 같은 상호 작용을 수행한다는 것을 알 수 있다.

믿거나 말거나, 그것은 무슨 일이 일어나고 있는지 더 쉽게 볼 수 있도록 느려졌다.

전속력으로, 시험은 시작하자마자 거의 끝난다.

그리고 이것은 웹드라이버와 사파리로 가능한 것의 맛일 뿐입니다.

테스트는 iOS 및 iPadOS 시뮬레이터뿐만 아니라 실제 iPhone 또는 iPad에서도 실행할 수 있습니다.

이제 오늘 이용 가능한 것을 탐구했으므로, 웹 플랫폼의 미래를 어떻게 탐구할 수 있는지 살펴봅시다.

웹은 끊임없이 진화하고 있다.

잠재적인 미래의 도구와 기술을 보는 것은 흥미로울 수 있으며, 웹 브라우저에서 출시되기 전에 실험을 시작하는 것은 더욱 흥미로울 수 있다.

Safari를 사용하면 기능 플래그를 선택하여 개발 메뉴에서 열 수 있는 새로운 기능 플래그 설정을 사용하여 이러한 기능을 활성화할 수 있습니다.

기능 플래그는 이전에 사파리에서 실험적 기능이라고 불렸던 것이다.

기능 플래그는 애니메이션, CSS, 자바스크립트, 미디어 등과 같은 주제별로 구성되어 기능을 쉽게 찾을 수 있습니다.

그리고 기능도 검색할 수 있습니다.

예를 들어, 우리는 모든 관련 기능을 찾기 위해 색상을 검색할 수 있습니다.

기능을 활성화하는 것도 빠르다.

체크박스를 체크하기만 하면 갈 준비가 된 것입니다.

그리고 CSS Masonry Layout이 활성화되고 기본이 아닌 상태를 나타내기 위해 굵은 글꼴로 표시되는 경우와 같이 활성화된 기능을 한 눈에 빠르게 볼 수 있습니다.

"CSS의 새로운 기능"에서 올해 사파리에서 출시되는 Masonry Layout 및 기타 새로운 CSS 기능과 같은 향후 기능에 대해 자세히 알아볼 수 있습니다.

당신은 또한 창의 오른쪽에 각 기능에 대한 상태가 있다는 것을 알아차렸을 수도 있습니다.

각 기능은 네 가지 상태 중 하나로 분류된다.

첫 번째 상태인 안정은 최근 사파리에서 배송되기 시작했고 기본적으로 켜져 있는 기능을 나타냅니다.

이러한 기능은 기능이 문제를 일으키는지 확인하거나 사이트가 모든 브라우저에서 아직 출시되지 않은 기능에 대한 기능의 부재를 여전히 우아하게 처리하도록 하기 위해 토글할 수 있습니다.

안정적인 기능은 결국 전환 가능한 기능 목록에서 제거될 것이다.

다음으로, 테스트 가능한 기능은 황금 시간대에 대한 준비가 되지 않았지만 초기 피드백을 받을 준비가 되어 있거나 구현 중일 수 있는 기능입니다.

그것들은 완전히 완전하지 않을 수도 있지만, 테스트 가능한 기능은 사양이 웹 개발자를 위해 작동하는지 확인하기 위해 기능이 기반으로 하는 표준을 알리는 데 도움이 될 수 있습니다.

이 기능들은 기본적으로 비활성화되어 있습니다.

마지막 공통 기능 상태는 미리보기이다.

이 상태는 개발자가 테스트를 시작할 준비가 된 기능을 위한 것입니다.

이러한 기능은 테스트 가능한 기능보다 더 완벽하지만 여전히 버그가 있을 수 있습니다.

이러한 기능은 Safari에서 기본적으로 비활성화되어 있지만, Safari Technology Preview에서는 기본적으로 활성화됩니다.

Safari Technology Preview는 약 2주마다 출시되며 플랫폼에 포함된 Safari 버전에 나타나기 전에 웹 플랫폼 기능에 대한 최신 업데이트에 대한 조기 액세스를 제공합니다.

개발자 기능에 대한 기능 상태도 있습니다.

이것들은 개발을 위해 WebKit의 동작을 조정하거나 테스트를 위해 더 이상 사용되지 않는 API를 다시 활성화하는 설정일 수 있습니다.

각 기능 플래그의 기본 설정은 고객이 일반적으로 콘텐츠를 경험하는 방식이라는 것을 명심하십시오.

Safari를 업데이트할 때 기능 플래그가 자동으로 기본 상태로 재설정된다는 것을 기억하는 것도 중요합니다.

그리고 그것으로, 우리는 당신과 같은 개발자를 돕기 위해 사파리에서 사용할 수 있는 도구와 기능에 대한 투어의 끝에 도달했습니다.

그리고 우리는 표면만 닦았어.

오늘 이야기한 모든 것 외에도, 사파리는 올해 사파리의 모든 기능과 개선 사항을 포함하여 콘텐츠를 디버깅하는 데 도움이 되는 더 많은 것을 가지고 있습니다.

우리는 또한 웹 개발자가 사용할 수 있는 도구와 시작하는 방법을 그 어느 때보다 쉽게 발견할 수 있도록 웹 개발자를 위한 Safari 기능에 대한 새로운 문서를 작성했습니다.

또한, 웹 인스펙터의 기능의 폭과 깊이를 푸는 데 도움이 되는 webkit.org에서 웹 인스펙터에 대한 심층적인 문서를 찾을 수 있습니다.

우리는 또한 당신의 소식을 듣고 싶습니다.

버그를 발견하거나 웹 개발자를 위한 기능을 개선할 수 있는 방법에 대한 제안이 있는 경우, 피드백 어시스턴트에 피드백을 제출하고 피드백 영역으로 사파리를 선택한 다음 세부 정보 아래에서 개발자 도구를 선택하십시오.

오늘 저희 플랫폼에서 콘텐츠를 개발, 수정 및 테스트하는 데 사용할 수 있는 Safari의 기능을 둘러보는 시간을 즐겼기를 바랍니다.

그리고 우리는 네가 뭘 만드는지 빨리 보고 싶어.

고마워.

♪