10162

♪ ♪

코디: 안녕하세요, "집중을 위한 SwiftUI 요리책"에 오신 것을 환영합니다.

저는 코디이고, 오늘은 정말 훌륭한 사용자 경험을 제공하기 위해 SwiftUI의 포커스 API로 할 수 있는 몇 가지에 대해 논의할 것입니다.

이 비디오에서, 나는 일련의 훌륭한 코드 예제와 함께 맛있는 API 세부 사항의 고정 메뉴에서 세 가지 코스 식사를 제공할 것이다.

애피타이저로서, 나는 초점의 기본 사항을 검토하는 데 시간을 할애할 것이다: 그것은 무엇이며, 어떤 일을 하는가?

첫 번째 코스의 경우, 집중 경험을 만드는 재료를 살펴보고 미각을 연마하세요.

그 재료들로, 나는 정말로 요리를 시작할 수 있다.

메인 코스의 경우, 초점 모양을 제어하고, 초점 움직임을 관찰하고, 사용자 지정 컨트롤로 키보드 입력에 응답하기 위한 몇 가지 레시피를 파헤칠 것입니다.

그래서, 초점이 뭐야?

포커스는 누군가가 키보드의 키를 누르거나, Apple TV 리모컨을 스와이프하거나, 시계에서 디지털 크라운을 돌릴 때 어떻게 반응할지 결정하는 도구입니다.

이러한 입력 방법은 한 가지 중요한 공통점을 가지고 있다.

그들 스스로, 그들은 그들의 입력이 어떤 화면 제어를 위한 것인지 식별하기에 충분한 정보를 제공하지 않는다.

이것을 마우스, 트랙패드, 터치 스크린과 같은 것들과 비교하세요.

마우스나 트랙패드를 사용할 때, 화면 커서는 클릭을 시스템이 상호 작용의 대상을 찾는 데 사용하는 화면 좌표와 연결합니다.

포커스는 포인터 커서 없이 시스템이 직접 입력해야 하는 추가 정보를 제공합니다.

뷰에 초점이 있을 때, 시스템은 그것을 키보드, Apple TV 리모컨 및 Apple Watch 디지털 크라운의 입력에 응답하는 출발점으로 사용할 것이다.

초점은 단순한 구현 세부 사항이 아니다.

그것은 당신의 앱을 사용하는 사람들에게 똑같이 중요하며, 이것이 집중된 보기가 특별히 강조되는 이유입니다.

macOS는 키보드 입력을 받을 것이라는 것을 보여주기 위해 집중된 보기 주위에 테두리를 자동으로 추가합니다.

watchOS는 디지털 크라운을 회전하여 컨트롤의 값을 변경할 수 있음을 알리기 위해 컨트롤 주위에 녹색 테두리를 그립니다.

그리고 tvOS에서, 집중된 뷰는 다른 컨트롤의 평면 위로 들어 올리는 호버 효과를 받는다.

포커스 뷰를 강조하는 것은 몇 가지 방법으로 사람들에게 도움이 된다.

그들은 키보드로 입력하거나 리모컨을 스와이프할 때 입력이 어디로 갈지 예측할 수 있다.

그리고 복잡하거나 상세한 레이아웃에서, 그것은 사람들에게 그들이 상호 작용하는 앱의 어느 부분을 한 눈에 상기시킨다.

초점은 특별한 종류의 커서처럼 행동한다.

마우스 커서처럼 화면의 지점을 추적하는 대신, UI의 어느 부분이 초점 입력의 대상인지 추적합니다.

이러한 이유로, 나는 초점을 사용자의 관심을 끌기 위한 커서로 생각하는 것을 좋아한다.

이제 초점이 무엇이고 앱에 어떻게 나타나는지 조금 알았으니, 모든 앱의 초점 경험에 들어가는 기본 요소인 집중 가능한 뷰, 초점 상태, 집중된 가치 및 초점 섹션과 같은 첫 번째 과정을 배치할 수 있습니다.

집중적으로 요리할 때 고려해야 할 주요 요소는 집중된 관점 그 자체이다.

이것은 시스템이 초점 입력에 응답할 때 시작점으로 사용하는 견해이다.

다른 통제는 다른 상황에서, 그리고 다른 이유로 집중할 수 있다.

macOS와 iPadOS의 텍스트 필드와 버튼을 비교하세요.

텍스트 필드를 탭하든 탭 키를 눌러 이전 컨트롤에서 초점을 이동하든 항상 초점을 맞출 수 있습니다.

이러한 종류의 제어는 지속적인 초점 입력을 캡처하는 것이기 때문에 편집을 위한 초점을 지원합니다.

버튼은 달라. 그들의 임무는 클릭과 탭을 처리하는 것이다.

macOS와 iPadOS는 버튼을 탭할 때 버튼에 초점을 맞추지 않으며, 탭 키로 버튼에 접근할 수 있는 유일한 방법은 시스템 전체에서 키보드 내비게이션을 켜는 것입니다.

이 설정에 익숙하지 않다면, macOS 시스템 설정의 키보드 설정 창에서 찾을 수 있습니다.

그것은 "키보드 내비게이션"이라고 표시된 스위치입니다.

그 스위치를 뒤집은 후, 탭 키를 눌러 버튼에 초점을 맞추고, 스페이스 바를 눌러 활성화할 수 있습니다.

버튼은 활성화를 위한 초점을 지원합니다.

이러한 컨트롤은 작업을 수행하기 위해 집중이 필요하지 않지만, 클릭 및 탭에 대한 초점 기반 대안을 지원하기 위해 시스템이 허용하는 경우 초점을 맞출 것입니다.

iOS 17과 macOS 소노마에는 포커스 시스템에 참여할 수 있는 사용자 지정 컨트롤을 위한 새로운 API가 있습니다.

"초점 가능" 뷰 수정자를 적용하면, 이제 컨트롤이 지원하는 초점 상호 작용의 종류를 지정하여 결과 동작을 미세 조정할 수 있습니다.

시간이 지남에 따라 상태를 업데이트하기 위해 초점을 사용하는 컨트롤의 경우, 편집 상호 작용을 지정하십시오.

직접 포인터 활성화의 대안으로 포커스를 사용하는 컨트롤의 경우, 활성화 상호 작용을 지정하십시오.

만약 당신이 어떤 주장도 제공하지 않는다면, 시스템은 모든 상호 작용에 대한 통제 초점을 제공합니다.

macOS 소노마 이전에, 초점을 맞출 수 있는 수정자는 활성화 의미만 지원했다.

이미 macOS 코드에서 포커스 가능한 수정자를 사용하고 있다면, 새로운 동작이 사용 사례에 맞는지 확인하세요.

"인터랙션" 인수를 추가하여 코드를 업데이트해야 할 수도 있습니다.

다음 성분은 순간순간 초점 시스템의 상태와 관련이 있다.

이 성분은 적절하게 "FocusState"라고 불린다.

시스템은 어떤 보기에 초점이 있는지 추적하며, 앱은 논리에서 해당 정보를 사용하여 입력을 처리하는 방법과 뷰 스타일을 지정하는 방법을 결정할 수 있습니다.

시스템의 상태를 관찰하기 위해, 특정 관점에 중점을 두고 제공하는 값을 연관시키는 바인딩을 만듭니다.

뷰는 이러한 바인딩을 읽고 뷰가 포커스가 바뀔 때 또는 포커스가 해제될 때 알림을 받을 수 있습니다.

부울 값을 가진 포커스 상태 속성은 여기에 표시된 것처럼 단일 보기가 집중되어 있는지 알려줍니다.

더 복잡한 경우, 사용자 지정 데이터 유형을 사용할 수도 있습니다.

나중에, 나는 이것의 예를 논의하고, 초점 상태가 프로그래밍 방식으로 어떻게 바뀔 수 있는지 보여줄 것이다.

다음으로, Focused Values API.

Focused Values API는 사용자 인터페이스의 원격 부분을 연결하는 데이터 종속성을 구축하는 방법을 해결하는 문제를 해결합니다.

이 API를 사용하여 활성 장면에서 일어나는 일에 따라 앱의 명령을 업데이트하십시오.

집중된 값은 이러한 다른 요소들 사이의 데이터 흐름을 가능하게 한다.

나는 사용자 지정을 정의하고 그것을 사용하여 메인 메뉴 콘텐츠를 만들 것이다.

집중된 값을 만들고 사용하는 것은 사용자 지정 환경 키와 객체를 만들고 사용하는 것과 유사합니다.

"FocusedValueKey" 프로토콜을 사용하여 새 키를 정의한 다음, 새 키를 사용하여 값을 가져오고 설정하는 계산된 속성으로 "FocusedValues"를 확장합니다.

사용하는 데이터는 장면의 보기에서 비롯되며, 값, 바인딩 또는 관찰 가능한 객체가 될 수 있습니다.

어쨌든, 뷰 수정자 제품군을 사용하여 뷰 계층 구조의 해당 부분에 있는 초점과 데이터를 연결합니다.

환경 값과 마찬가지로, 동적 속성을 선언하여 집중된 값에 액세스합니다.

이 예에서, 나의 집중된 값은 바인딩이므로, 나는 "@FocusedBinding" 속성 래퍼를 사용하고 사용자 지정 키 경로를 제공한다.

"@FocusedBinding"은 현재 키와 관련된 바인딩이 있는지 확인하기 위해 집중된 뷰와 그 조상을 살펴봅니다.

속성 래퍼는 바인딩을 자동으로 풀기 때문에 바인딩된 값으로 직접 작업할 수 있습니다.

내가 해야 할 유일한 다른 일은 뷰의 몸에서 내 새로운 재산을 사용하는 것이다.

시간이 지남에 따라, 초점이 다른 컨트롤 사이에서 이동하고 다른 창이 활성화됨에 따라, 시스템은 새로운 컨텍스트에서 찾은 값을 반영하기 위해 뷰를 업데이트할 것이다.

마지막 성분은 포커스 섹션 API이다.

초점 섹션은 누군가가 Apple TV 리모컨에서 스와이프하거나 키보드의 탭 키를 누를 때 초점이 어떻게 움직이는지에 영향을 미칠 수 있는 방법을 제공합니다.

기본적으로, 초점은 화면의 앞 가장자리에 가장 가까운 최상위 컨트롤에서 시작됩니다.

거기에서 탭을 누르면 현재 로케일의 레이아웃 순서에 따라 한 컨트롤에서 다음 컨트롤로 포커스를 이동합니다.

화면의 마지막 컨트롤에 도달하면, 탭을 다시 누르면 시퀀스가 다시 시작됩니다.

Apple TV 리모컨으로 초점 이동은 방향성이다.

위, 아래, 왼쪽, 오른쪽으로 스와이프하여 컨트롤 간에 초점을 이동할 수 있습니다.

방향 이동은 인접한 목표 사이에서만 작동한다.

이 예에서, 나는 크림 브륄레 버튼에서 다른 디저트 중 하나로 오른쪽으로 스와이프할 수 있다.

하지만 식료품 목록에 크림 브륄레 고정을 추가하고 싶다면, 아래로 스와이프할 수 없습니다.

그 버튼은 크림 브륄레 버튼 바로 아래에 있지 않기 때문에, 내 제스처는 실패한다.

이러한 초점 목표를 정렬하기 위해, 나는 하단 버튼의 컨테이너를 초점 섹션으로 표시할 것이다.

초점 섹션은 움직임 제스처의 대상이 되지만, 초점을 맞출 수 없다.

대신, 그들은 가장 가까운 초점을 맞출 수 있는 콘텐츠로 초점을 맞춘다.

효과적이려면, 초점 섹션은 내용보다 더 많은 공간을 차지해야 한다.

이 경우, 화면 너비에 맞게 스택이 커지도록 버튼 전후에 스페이서를 추가할 것입니다.

더 큰 초점 목표가 제자리에 있으면, 이제 어디에서든 아래로 스와이프하여 하단 버튼에 도달할 수 있습니다.

나는 이미 그 크림 브륄레를 맛볼 수 있어!

사용자 지정 컨트롤의 모양과 느낌을 연마하고 일반적인 작업에서 마찰을 제거하기 위해 방금 설명한 주요 재료를 결합한 몇 가지 레시피를 안내해 드리겠습니다.

최근에, 나는 동료 셰프 커트가 만든 요리책 앱을 사용하고 있다.

당신은 그의 WWDC22 비디오에서 그것을 알아볼 수 있습니다.

이 섹션의 레시피는 내가 작업해온 몇 가지 새로운 기능을 기반으로 하며, 이는 행동에 집중하는 데 도움이 될 것이다.

예를 들어, 나는 다음 식료품점 여행에서 무엇을 사야 할지 기억할 수 있도록 인앱 식료품 목록을 추가했다.

이 첫 번째 레시피는 프로그래밍 방식의 초점 움직임이 어떻게 내 식료품 목록을 편집하는 것을 즐거운 경험으로 만들 수 있는지 보여준다.

식료품 목록 시트가 나타나면, 항상 끝에 빈 항목이 있다.

빈 항목을 탭하면 키보드가 올라와서 내가 무엇을 사야 하는지 설명할 수 있다.

식료품을 추가하는 것은 빈번한 작업이므로, 목록이 나타날 때마다 빈 항목에 자동으로 초점을 맞춰 탭을 절약하고 싶습니다.

이전에, 나는 포커스 스테이트 API를 사용하여 어떤 뷰에 포커스가 있는지 관찰하고 업데이트하는 방법을 보여주었다.

나는 여기서 같은 API를 사용할 것이다.

이전 예제는 단일 뷰에 초점이 있는지 여부를 알리기 위해 플래그를 사용했다.

내 식료품 목록의 경우, 관찰해야 할 많은 텍스트 필드가 있다.

FocusState의 값은 이와 같은 경우에 해시블 유형이 될 수 있다.

이 화면에 추가하는 각 성분에는 고유한 ID가 있으며, 집중된 텍스트 필드와 관련된 ID를 저장하여 초점을 추적할 수 있습니다.

나는 각 텍스트 필드와 그 성분 사이의 링크를 만들기 위해 "focused(_:equals:)" 수정자를 사용할 것이다.

이 수정자에게 두 가지 인수를 제공해야 합니다: 내 "focusedItem" 속성에 대한 바인딩과 포커스가 해당 텍스트 필드에 있을 때 바인딩을 업데이트해야 하는 성분 ID.

이제 앱을 실행하고 식료품 목록을 탭할 때 "focusedItem" 속성이 다른 ID 값으로 업데이트되었는지 확인할 수 있습니다.

초점 상태 바인딩을 사용하면, 식료품 목록이 화면에 처음 나타날 때 프로그래밍 방식으로 초점을 텍스트 필드로 이동하는 데 필요한 것이 있습니다.

이제 iOS 17에서도 사용할 수 있는 "defaultFocus(_:_:)" 보기 수정자를 내 목록에 추가하여 이 작업을 수행합니다.

시스템이 이 화면에서 처음으로 초점을 평가할 때, 마지막 식료품 목록 항목의 ID로 바인딩을 업데이트하려고 시도할 것입니다.

이러한 변화와 함께, 내 식료품 목록에 추가하는 것은 이제 2단계 과정이다.

도구 모음 버튼을 눌러 시트를 표시한 다음, 입력을 시작하세요.

세 번째 단계는 없다.

내 쇼핑 목록이 커짐에 따라, 나는 도구 모음의 추가 버튼을 탭하면 새로운 빈 목록 항목이 생성되지만, 초점은 그대로 남아 있다.

초점을 맞추기 위해 빈 항목을 탭해야 합니다.

이것은 새 항목이 나타나자마자 타이핑을 시작할 수 있도록 앱이 프로그래밍 방식으로 초점을 이동하기를 원하는 또 다른 경우입니다.

차이점은 이제 내가 변화의 타이밍을 통제하고 싶다는 것이다.

다행히도, 기본 포커스를 설정하기 위해 만든 것과 동일한 포커스 상태 바인딩을 사용할 수 있습니다.

내 GroceryListView에는 내 모델에 새로운 항목을 추가하는 "addEmptyItem" 방법이 있다.

그리고 이미 새 항목의 TextField를 "currentItemID" 속성과 연결했기 때문에, 도구 모음 버튼 작업의 일부로 새 ID로 속성을 업데이트하기만 하면 됩니다.

Voilà!

이제 식료품 목록을 시작하거나 업데이트하고 싶을 때, 필요한 곳에 초점을 맞추기 위해 아무것도 탭할 필요가 없습니다. 그냥 타이핑을 시작할 수 있습니다.

다음으로, 제가 만든 사용자 지정 컨트롤의 초점 상호 작용을 개선하기 위해 더 많은 재료를 사용합시다.

이 시점에서, 나는 많은 레시피를 분류했다.

내가 각각을 시험해 볼 때, 나는 어떤 것이 잘 나오는지 그리고 어떤 것이 다시 생각해야 할지, 아니면 적어도 조금 더 소금이 필요한지 기억하고 싶다.

이를 돕기 위해, 저는 요리 여행의 최고점과 최저점을 포착하기 위해 이모티콘으로 사용자 지정 피커 컨트롤을 만들었습니다.

이모티콘을 탭하여 각 레시피를 평가할 수 있지만, 키보드 내비게이션 라이프스타일을 사는 사람으로서, 탭 키로 컨트롤에 집중하고 화살표 키를 사용하여 선택을 변경할 수 있기를 정말 싶습니다.

그렇게 하자.

여기 내 이모티콘 선택기의 기본 구조가 있습니다: 내가 해야 할 첫 번째 일은 제어에 초점을 맞출 수 있도록 하는 것입니다.

나는 인수 없이 "집중 가능한" 수정자를 추가하는 것으로 시작한다.

이것은 내가 탭 키를 누를 때 내 컨트롤에 초점을 맞출 수 있게 해주지만, 다른 버튼과 유사한 컨트롤에서는 볼 수 없는 몇 가지 추가 동작을 알아차린다.

예를 들어, 내 컨트롤은 클릭에 초점을 맞추는 반면, 버튼과 분할된 컨트롤은 그렇지 않다.

이러한 컨트롤에 초점을 맞추기 위해서는 "키보드 내비게이션"이 필요합니다.

내 것도 그래야 해.

그 행동을 얻기 위해, 나는 활성화를 위해 집중할 수 있는 것으로 내 통제권을 명시할 것이다.

활성화를 위해 초점을 맞출 수 있는 컨트롤은 클릭에 초점을 맞추지 않으며, 키보드로 초점을 맞추려면 "키보드 내비게이션"을 켜야 합니다.

다음으로 내가 알아차린 것은 macOS가 내 컨트롤 주위에 그리는 초점 링이 직사각형이라는 것이다.

더 세련된 모습을 위해, 나는 초점 링이 캡슐 모양의 배경의 경로를 따르기를 원한다.

포커스 링은 항상 뷰의 콘텐츠 모양을 따르며, 제 경우에는 기본적으로 직사각형입니다.

나는 "contentShape" 수정자를 사용하고 뷰를 시각적으로 클립하는 데 사용하는 것과 동일한 캡슐 모양을 전달할 것이다.

이제 내 컨트롤이 초점을 맞출 수 있기 때문에, 다음 단계는 키 누르기를 처리하도록 하는 것이다.

왼쪽과 오른쪽 화살표 키를 사용하여 선택한 등급을 변경할 수 있기를 원합니다.

"onMoveCommand" 수정자를 사용하면 Mac 키보드에서 화살표 키를 누르거나 Apple TV 리모컨에서 방향 가장자리를 탭할 때와 같이 플랫폼에 적합한 이동 명령에 대한 응답으로 수행할 작업을 제공할 수 있습니다.

시스템은 움직임의 방향으로 행동을 호출하므로, 나는 그것을 바탕으로 등급 선택을 왼쪽이나 오른쪽으로 옮길 것이다.

아랍어와 히브리어와 같은 오른쪽에서 왼쪽 언어를 사용하는 사람들을 위해 제어 콘텐츠는 수평으로 뒤집어야 한다.

이동 명령 동작이 이를 설명하기 위해 환경의 "layoutDirection"을 사용하는지 확인하세요.

초점 동작을 구현하는 것에 대한 깔끔한 점 중 하나는 동일한 제어를 하고 Apple Watch 앱에서 훌륭한 결과를 얻을 수 있다는 것입니다.

watchOS에서 포커스 입력을 처리하기 위해, 저는 "onMoveCommand" 수정자 대신 "digitalCrownRotation" 수정자를 사용합니다.

그리고 나는 isFocused 환경 값을 사용하여 초점이 있을 때 컨트롤 주위에 친숙한 녹색 테두리를 그릴 것이다.

이 몇 가지 수정자만으로, 나는 간단한 제어를 하고 키보드와 디지털 크라운에 대한 지원을 추가할 수 있었다.

마지막 레시피는 내가 완성한 결과의 사진을 보여주기 위해 만들고 있는 초점을 맞출 수 있는 그리드 뷰를 위한 것이다.

나는 이것을 게으른 그리드로 만들고 있으며, 이미 몇 가지 선택 행동을 구현했다.

따라서 이미지를 클릭하면 선택하고 두 번 클릭하면 레시피의 세부 보기로 이동합니다.

이제 나는 그것이 집중 상호 작용을 어떻게 처리해야 하는지 고려해야 한다.

특히, 나는 Tab 키를 누를 때 그리드가 초점을 맞출 수 있기를 바란다.

초점을 맞출 때, 화살표 키를 사용하여 선택을 업데이트하고, Return 키를 사용하여 선택한 레시피의 세부 사항으로 이동하기를 원합니다.

나는 전에 이야기했던 몇 가지 재료와 키 프레스를 처리하고 초점이 있을 때 그리드가 어떻게 나타나는지 사용자 정의하는 데 도움이 되는 몇 가지 추가 재료를 사용할 것이다.

이전 예시에서와 같이, 첫 번째 단계는 그리드에 초점을 맞출 수 있도록 하는 것이다.

이 경우, 나는 어떤 상호 작용도 명시할 필요가 없다.

기본적으로, 그리드는 내가 클릭할 때 초점을 맞추고 키보드를 사용하여 탭할 때, "키보드 내비게이션"이 활성화되었는지 여부에 관계없이 초점을 맞춥니다.

이게 바로 내가 원하는 거야.

이제 그리드에 초점을 맞출 수 있게 만들었으니, 시스템은 자동으로 그 주위에 초점 링을 그립니다.

선택 가능한 콘텐츠의 컨테이너의 경우, 그 효과는 중복된다.

내가 선택한 레시피 주변에 추가한 컬러 테두리는 이미 그리드에 초점이 있는지 여부를 전달한다.

"focusEffectDisabled" 수정자를 사용하여 자동 초점 링을 끌 수 있습니다.

보기가 선택된 테두리 및 기타 표시기에 "SelectionShapeStyle"을 사용하세요.

그것은 내가 선택한 악센트 색상에 자동으로 적응하며, 초점이 그리드에서 사이드바로 이동할 때와 같이 조상 보기에 초점이 없을 때 회색으로 변합니다.

다음으로 하고 싶은 일은 선택한 레시피를 즐겨찾기로 표시하기 위해 메인 메뉴 명령을 연결하는 것입니다.

나는 이것을 위해 Focused Values API를 사용할 것이고 필요에 따라 업데이트하기 위해 메뉴 명령을 위해 내 선택에 바인딩을 전달할 것이다.

화살표 키 선택을 지원하기 위해, 나는 onMoveCommand 수정자를 사용할 것이다.

그리고 시스템이 호출되면, 나는 이동 방향을 사용하여 그리드에서 선택한 레시피를 업데이트할 것이다.

마지막으로, 저는 선택에 따라 행동하고 Return 키를 눌렀을 때 탐색하는 방법을 원합니다.

macOS Sonoma와 iOS 17의 새로운 "onKeyPress" 수정자로 이것을 할 수 있습니다.

이 수정자는 연결된 하드웨어 키보드에서 해당 키를 누를 때 수행할 키 또는 문자 세트와 작업을 수행합니다.

작업이 언론을 처리하지 않으면 "무시"를 반환하고 디스패치는 뷰 계층 구조를 계속해야 합니다.

그리고 보너스 기능을 위해, 저는 또한 "onKeyPress"를 사용하여 유형 선택을 구현할 것이므로, 이름의 첫 글자를 입력하여 레시피로 빠르게 스크롤하고 선택할 수 있습니다.

이제 macOS에서 그리드를 위한 훌륭한 키보드 경험을 구축했으니, tvOS에서 그리드로 전환해 봅시다.

tvOS에서, 그리드의 각 셀은 초점을 맞출 수 있으므로, 초점이 리모컨으로 다른 방향으로 이동함에 따라, 그 방향의 셀은 초점이 되고 시각적으로 다른 셀 위로 들어 올립니다.

이 시스템은 기본적으로 버튼과 내비게이션링크와 함께 "리프트" 호버 효과를 사용합니다.

그리고 이 효과는 텍스트가 있는 뷰나 텍스트와 이미지를 결합한 뷰에 적합합니다.

그러나, 이 레시피 사진들은 다른 효과로부터 이익을 얻을 것이다.

tvOS 17의 새로운 기능, 초점 가능한 뷰에 하이라이트 호버 효과를 적용할 수 있습니다.

이 효과는 리모컨을 스와이프할 때 초점을 맞춘 항목에 원근법 변화와 반사광을 추가하며, 내 레시피 썸네일과 같은 삽화와 사진과 잘 어울립니다.

그리고 내 tvOS 앱의 맨 위에 체리로, 나는 포커스 섹션을 추가할 것이다.

그리드는 버튼 목록 옆에 있으며, 나는 종종 이 두 그룹 사이를 탐색해야 할 것이다.

앱을 사용할 때, 나는 익숙한 문제를 알아차렸다.

초점이 그리드의 아래쪽 행 중 하나에 있을 때, 초점 대상이 서로 인접하지 않기 때문에 왼쪽으로 스와이프하여 카테고리 버튼을 이동할 수 없습니다.

레이아웃의 전체 높이에 걸쳐 있는 포커스 섹션에 카테고리 목록을 배치하겠습니다.

이제 내가 크림 브륄레에서 왼쪽으로 스와이프할 때, 내가 예상했던 것처럼, 초점은 카테고리로 이동한다.

그리고 그리드는 완성되었다.

벨리시모!

나는 이 비디오에서 많은 것을 다루었다.

집중 재료를 모으고 무엇을 만들 수 있는지 볼 시간입니다.

키보드 탐색이 활성화된 macOS 및 iPadOS 앱을 테스트하세요.

기본 초점을 가장 유용할 곳에 두세요.

불규칙한 레이아웃을 통해 움직임을 안내할 수 있도록 초점 섹션에서 컨트롤을 구성하세요.

고마워, 그리고 맛있게 먹어!