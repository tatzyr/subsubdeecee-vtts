10109

♪ 부드러운 기악 힙합 ♪

♪

안녕하세요, "공간 컴퓨팅을 위한 SwiftUI를 만나보세요"에 오신 것을 환영합니다.

저는 SwiftUI 팀의 엔지니어인 Andrew입니다.

우리는 공간 컴퓨팅에 대해 매우 흥분된다.

그것은 획기적인 애플리케이션을 구축하기 위한 새로운 가능성의 세계를 열어준다.

이 강연에서, 플랫폼을 위한 자신만의 훌륭한 앱과 모든 것을 가능하게 하는 SwiftUI의 강력한 새로운 기능을 구축하기 위해 알아야 할 것을 안내해 드리겠습니다.

공간 컴퓨팅을 위한 앱을 만들 때, 그것을 만드는 가장 좋은 방법은 SwiftUI를 사용하는 것입니다.

우리는 볼륨, 풀 스페이스를 통한 몰입형 경험, 새로운 3D 제스처, 효과 및 레이아웃, RealityKit과의 깊은 통합 등과 같은 완전히 새로운 3D 기능을 통해 SwiftUI를 대담한 새로운 미래로 가져오고 있습니다.

이러한 새로운 기능은 SwiftUI에만 존재한다.

앱에 대한 기존 코드가 있다면, 대부분은 여전히 플랫폼에서 작동할 것입니다.

모든 새로운 코드의 경우, 그것을 작성하는 가장 좋은 방법은 SwiftUI를 사용하는 것이다.

우리는 SwiftUI를 너무 깊이 믿기 때문에 SwiftUI를 사용하여 처음부터 시스템을 구축했습니다.

Buttons, Toggles 및 TabViews와 같은 앱의 핵심 빌딩 블록부터 Home View 및 Control Center와 같은 핵심 요소, TV 및 Safari와 같은 친숙한 앱, Freeform의 3D 보드 및 Keynote의 몰입형 리허설과 같은 완전히 새로운 경험에 이르기까지 SwiftUI는 이러한 모든 것을 지원합니다.

SwiftUI를 사용하면 앱의 사용자 인터페이스를 설명하여 시스템이 지능형 기본값을 선택할 수 있으므로 이러한 개념을 한 번 배우고 어디서나 적용할 수 있습니다.

이것은 완전히 새로운 플랫폼에서 훨씬 더 유용하다.

기존 SwiftUI 지식은 완전히 새로운 모양과 느낌으로 원활하게 전달됩니다.

버튼을 고려해 보세요.

시스템의 버튼은 당신이 이미 알고 있고 다른 플랫폼에서 좋아하는 버튼과 공통점이 많습니다.

예를 들어, macOS와 마찬가지로, 이 플랫폼의 버튼은 기본적으로 테두리 스타일을 사용합니다.

하지만 버튼은 또한 플랫폼의 관용구에 적응하기 위한 몇 가지 주요 차이점이 있다.

시뮬레이터를 확대해서 자세히 살펴봅시다.

이와 같은 테두리 버튼은 생생한 소재 배경을 사용합니다.

그리고 모든 버튼은 눈, 손, 포인터 입력에 반응하는 풍부한 호버 효과를 얻습니다.

그들은 또한 눌렀을 때 크기를 낮추고 오디오 피드백을 제공할 수 있다.

그리고 내비게이션 바와 같은 장소에 있는 버튼을 사용하면, 사람들이 볼 때 버튼의 라벨과 함께 도구 팁을 자동으로 표시할 수 있습니다.

또는 앱의 측면에 매달려 앱의 콘텐츠를 방해하지 않고 빠르고 쉬운 탐색을 제공하는 TabView를 고려하십시오.

그리고 TabView는 보기만 해도 각 탭의 라벨과 같은 더 많은 세부 사항을 표시하도록 확장됩니다.

TabView는 SwiftUI가 앱의 인터페이스가 당신이 보고 있는 곳에 반응하도록 하는 것과 같이 플랫폼을 독특하게 만드는 것을 어떻게 활용할 수 있는지 보여주는 대표적인 예입니다.

우리는 탐색 및 프레젠테이션에서 제어 및 상호 작용에 이르기까지 앱의 모든 핵심 구성 요소에 동일한 사려 깊은 디자인을 적용했습니다.

우리는 이러한 지능형 플랫폼 기본값을 제공하므로 앱이 처음부터 바로 들어갈 수 있으므로 앱을 훌륭하게 만드는 것에 집중할 수 있습니다.

하지만 우리는 거기서 멈추지 않았어.

SwiftUI에는 또한 3D 환경을 위해 특별히 제작된 새로운 API 제품군이 포함되어 있습니다.

그리고 그 API는 장면으로 시작한다.

SwiftUI의 앱은 장면으로 구성되어 있고, 장면은 뷰로 구성되어 있다는 것을 기억하세요.

장면은 하나 이상의 창을 표시하기 위한 WindowGroup과 같이 앱의 최상위 진입점을 형성합니다.

공간 컴퓨팅을 사용하면 앱을 구성하는 세 가지 종류의 장면이 있습니다: 창, 볼륨 및 전체 공간.

Windows는 Safari 또는 Freeform과 같은 풍부하고 완전한 앱부터 Mindfulness와 같은 몰입형 경험의 진입점 역할을 하는 메뉴에 이르기까지 전통적이고 친숙한 인터페이스를 구축하는 데 적합합니다.

볼륨은 제한된 공간에서 물체나 경험을 표시하기 위해 특별히 제작된 새로운 3D 창 스타일입니다.

볼륨은 또한 다른 앱과 함께 표시될 수 있어, 퀵 룩으로 3D 모델을 미리 보는 것부터 친구들과 FaceTime을 통해 보드 게임을 하는 것까지 가벼운 3D 경험을 구축하기 위한 훌륭한 도구입니다.

마지막으로, 우리는 풍부하고 몰입감 있는 앱을 만드는 새로운 방법인 Full Spaces를 가지고 있습니다.

전체 공간은 앱을 완벽하게 제어하여 다른 앱에서 창을 숨기고 콘텐츠를 어디에나 배치할 수 있도록 합니다.

전체 공간은 사람들을 주변 환경에 기반을 두면서 현실 세계를 보강하거나, 사람들을 놀라운 새로운 경험에 완전히 몰입시킬 수 있다.

기조 연설의 현실적인 리허설부터 스릴 넘치는 새로운 종류의 게임에 이르기까지, 풀 스페이스는 새로운 가능성의 세계를 열어줍니다.

그리고 이 장면 유형들은 함께 사용하도록 설계되었다.

각각은 다른 사용 사례를 위해 특별히 제작되었으며, 앱에 적합한 어떤 방식으로든 믹스 앤 매치할 수 있습니다.

건축 모델의 경량 3D 미리보기를 보여주는 것처럼 창에서 볼륨을 제시할 수 있습니다.

또는 사람들을 그 모델에 완전히 몰입시키기 위해 볼륨에서 전체 공간을 제시할 수 있습니다.

또한 같은 유형의 여러 장면을 사용할 수 있으며, 이는 사람들이 독립적으로 열고 닫을 수 있는 별도의 조각으로 앱을 구성하는 좋은 방법입니다.

창문부터 시작하여 각 장면 유형에 대해 조금 더 깊이 파고들자.

저는 천문학의 열렬한 팬이며, 다른 사람들이 지구와 태양계에 대해 더 많이 배울 수 있도록 동료 스타게이저와 함께 앱을 개발하고 있습니다.

이제, 그들은 이미 이 앱에서 좋은 출발을 했고, 창에 이 멋진 소개 페이지를 구축했다.

하지만 나는 더 멀리 갈 큰 계획이 있어.

창을 보여주기 위해, 저는 다른 모든 플랫폼에서 작동하는 동일한 WindowGroup API를 사용하고 있습니다. WindowGroup을 사용하여 macOS 또는 iPadOS와 마찬가지로 여러 창을 만드는 것을 자동으로 지원합니다.

이제, 저는 앱에 새로운 기능을 추가하고 싶었습니다: 동료 우주 학생들이 계속 배울 수 있도록 태양계와 우주에 대한 모든 종류의 재미있는 사실을 수집하는 도서관.

하지만 나는 앱에서 이 기능을 어디에 넣을지 알아내려고 애쓰고 있다.

그 질문에 답하기 위해, 창문의 구조를 빌딩 블록으로 분해해 봅시다.

시스템의 윈도우는 아름다운 유리 배경으로 시작하며, 앱의 콘텐츠를 쉽게 볼 수 있도록 하면서 주변 환경을 보여줌으로써 사람들을 접지 상태로 유지합니다.

내 창 안에서, 나는 다른 플랫폼에서 이미 익숙한 것과 같은 내비게이션 컨테이너를 사용할 수 있다.

예를 들어, TabView를 사용하여 앱을 창의 앞 가장자리에 표시된 몇 가지 최상위 구성 요소로 구성할 수 있습니다.

또한 내비게이션 스택과 분할 뷰를 사용하여 iPadOS와 유사한 구조에 따라 앱의 계층 구조를 구성하고 풍부한 정보를 표시할 수 있습니다.

목록은 딱 맞는 아름다운 새로운 스타일로 정보를 정리하는 또 다른 강력한 도구입니다.

그리고 물론, 버튼, 토글 및 피커와 같은 내장 컨트롤을 사용하여 앱에 상호 작용을 추가할 수 있습니다.

이제, 저는 이 라이브러리 보기가 탭뷰를 잘 사용할 것이라고 생각합니다. 탭뷰는 항상 내 앱에 대한 최상위 진입점에 액세스할 수 있도록 하는 데 완벽하므로 더 깊은 지식은 항상 탭 한 번이면 됩니다.

그렇게 하기 위해, 나는 내 콘텐츠를 TabView로 감싸고, 각 탭에 대한 라벨이 있는 tabItem을 제공할 것이다.

좋아 보인다!

탭뷰는 내 창문 가장자리에 매달려 있는 독특한 외관을 가지고 있다.

TabView는 우리가 SwiftUI에 추가한 새로운 개념의 좋은 예입니다: 장식품.

장식품을 사용하면 앱의 창과 관련하여 액세서리 뷰를 배치할 수 있으며, 창의 경계 밖으로 확장할 수도 있습니다.

이것들은 창 자체에 속하지 않는 추가 컨트롤을 표시하는 데 적합하며 앱의 콘텐츠를 방해하는 것을 피할 수 있습니다.

그리고 우리는 심지어 새로운 장식품 수정자를 사용하여 우리만의 장식품을 만들 수도 있다.

내가 작업하고 있는 도서관 상세 보기를 살펴봅시다.

나는 이미 이 페이지를 시작했고, 몇 가지 섹션으로 나뉘었다: 몇 가지 요약 텍스트, 흥미로운 통계의 그리드, 그리고 재미있는 사실의 수평 스크롤 목록.

하지만 이 부분들은 뭔가를 놓치고 있다.

무엇인지 알아내기 위해, 우리 앱의 자료를 자세히 살펴봅시다.

윈도우는 기본적으로 아름답고 새로운 유리 배경에 접지되어 있다.

유리는 앱에 시각적 계층 구조를 제공하는 데 도움이 되는 새롭고 생생한 재료로 구성되도록 설계되었습니다.

Glass는 환경에 자동으로 적응하여 어디에서 사용되든 콘텐츠를 읽을 수 있도록 유지하여 어떤 환경에서도 앱이 멋지게 보일 수 있도록 합니다.

이것은 이 플랫폼에서 앱에 어둡거나 밝은 외관이 없다는 것을 의미합니다.

재료는 당신을 위해 열심히 일합니다.

통계 그리드부터 시작하여 자료를 사용하여 라이브러리 탭을 적합하게 하고 가독성을 개선하는 방법을 알아봅시다.

내 통계 그리드 섹션은 현재 제목과 그리드 자체가 있는 VStack으로 구성되어 있다.

물질적인 배경을 주고 이 카드를 정말 돋보이게 해보자.

그렇게 하기 위해, 나는 내 카드의 모양을 접지하고 세부 텍스트의 가독성을 향상시키는 창문 유리 위에 생생하고 어두운 배경을 추가하는 일반 재료를 사용했다.

나는 둥근 직선 모양을 사용하고 카드가 딱 맞는 느낌을 하도록 패딩을 추가했다.

나는 우리의 재미있는 팩트 카드에도 같은 대우를 적용할 것이다.

그게 훨씬 더 좋아 보여!

다음으로, 우리의 재미있는 팩트 카드로 가서 자세히 보기 위해 확대해 봅시다.

이 카드는 내가 누를 때 사실에 대한 자세한 내용을 보여줄 수 있는 버튼으로 만들어졌다.

나는 또한 멋진 재료 배경을 제공하는 사용자 지정 버튼 스타일을 사용했다.

버튼의 내용은 제목, 세부 본문, 그리고 사람들이 더 많은 것을 배우기 위해 탭하도록 초대하는 각주로 구성되어 있다.

하지만, "더 알아보기" 텍스트는 너무 무거워 보인다.

그것을 고치기 위해, 나는 내 텍스트에 보조 전경 스타일을 사용할 것이다.

이 보조 스타일은 우리의 배경 자료 내에서 자동으로 적응하여 아름답고 새로운 생동감 넘치는 치료법을 사용하며, 여전히 2차 텍스트를 읽을 수 있도록 유지하면서 내 콘텐츠에 더 큰 시각적 가중치를 부여합니다.

이러한 계층적 모양 스타일은 상대적인 시각적 무게를 표현하는 데 적합하며, SwiftUI가 상황에 따라 사용할 특정 재료를 자동으로 조정할 수 있도록 합니다.

앱에서 그것들과 다른 풍부한 모양 스타일과 재료 API를 사용하여 어떤 상황과 플랫폼에서도 멋지게 보이는 멋진 인터페이스를 만드세요.

다음으로, 상호 작용으로 넘어가자.

공간 컴퓨팅을 사용하면 앱과 상호 작용할 수 있는 새로운 방법이 있습니다.

가장 일반적인 형태의 상호 작용은 단순히 요소를 보고 간접적인 핀치 제스처를 사용하여 탭을 수행하는 것이다.

손을 잡고 만지는 것만으로도 손을 사용하여 앱과 직접 상호 작용할 수 있습니다.

그리고 연결된 트랙패드나 손 제스처를 사용하면 가장 정확한 입력을 위해 포인터를 사용할 수 있습니다.

이 시스템은 또한 연결된 하드웨어 키보드와 함께 작동하며, 키보드 단축키, 포커스 및 키 수정자를 지원하여 앱의 생산성을 향상시킵니다.

마지막으로, 이 시스템은 VoiceOver 및 Switch Control과 같은 다른 플랫폼에서 이미 익숙한 것과 동일한 훌륭한 접근성 기술을 지원합니다.

가장 좋은 점은 SwiftUI 컨트롤이 즉시 액세스할 수 있도록 구축되어 많은 무거운 작업을 수행하여 모든 사람이 앱을 사용할 때 동일한 훌륭한 경험을 얻을 수 있다는 것입니다.

SwiftUI에서 이미 익숙한 제스처는 TapGesture 및 DragGesture와 같은 각 형태의 상호 작용에 자동으로 적응하여 잘 작동합니다.

그리고 우리는 두 손이나 연결된 트랙패드를 사용하여 RotateGesture3D와 같은 완전히 새로운 종류의 풍부한 3D 상호 작용을 가능하게 하는 새로운 제스처를 추가했습니다.

그리고 물론, 다른 플랫폼의 모든 동일한 접근성 API와 기술은 VoiceOver와 로터에서 Dynamic Type 및 Invert Colors에 이르기까지 잘 작동합니다.

그리고 이러한 기능 중 많은 부분이 플랫폼을 위해 재창조되었다.

사람들이 눈만 사용하여 앱을 사용하고 탐색할 수 있는 Dwell Control처럼.

이러한 훌륭한 기능과 모든 사람이 앱에 액세스할 수 있도록 하는 방법에 대해 자세히 알아보려면, "접근 가능한 공간 경험 만들기"를 확인하세요.

공간 컴퓨팅으로 상호 작용을 쉽고 직관적으로 만드는 중요한 도구는 호버 효과이다.

예를 들어, 단순히 대화형 뷰를 보는 것만으로, 시스템은 당신이 상호 작용할 수 있는 피드백을 제공하기 위해 뷰에 대한 미묘한 하이라이트 효과를 보여줍니다.

이러한 효과는 각 형태의 입력에 자동으로 적응하여 사람들에게 그들이 상호 작용하는 것에 대한 자신감을 준다.

호버 효과는 반응형 피드백을 제공할 뿐만 아니라 타겟팅을 돕는 데에도 유용하다.

그리고 호버 효과는 앱이 사람들이 보고 있는 곳에 정확히 반응하도록 하는 유일한 방법입니다.

이러한 효과는 사람들의 사생활을 존중하기 위해 앱의 프로세스 외부에 적용됩니다.

호버 효과는 버튼, 토글, 텍스트 필드 등과 같은 대부분의 컨트롤에 자동으로 추가됩니다.

SwiftUI에서 제공하는 내장 스타일을 사용하면 앱에서 이러한 효과를 자동으로 얻을 수 있습니다.

사용자 지정 컨트롤이나 스타일을 사용하는 경우, 호버 효과를 추가하여 반응이 빠르고 사용하기 쉽게 느껴지도록 하세요.

내 앱에 추가한 재미있는 팩트 카드로 돌아가서 호버 효과와 어떻게 작동하는지 확인해 봅시다.

그 카드들은 멋져 보이지만, 한 가지 큰 문제가 있다.

저는 사용자 지정 ButtonStyle을 사용하고 있기 때문에, 이제 나만의 호버 효과를 제공하는 것을 담당하고 있습니다.

하나 없이는, 이 카드들이 실제로 상호 작용한다는 피드백이 없다.

좋은 소식은 그것이 고치기 매우 쉽다는 것이다.

내 버튼스타일은 현재 버튼의 라벨에 패딩과 사용자 지정 재료 배경을 추가합니다.

누락된 호버 피드백을 수정하기 위해, 나는 내 ButtonStyle에 hoverEffect 수정자를 추가할 것이다.

이것은 문맥에 적합한 자동 효과를 선택한다.

이 경우, 그것은 하이라이트 효과가 될 것이다.

좀 더 자세히 살펴보자.

이 카드 버튼을 볼 때, 나는 이제 그들이 상호 작용한다는 것을 분명히 하는 멋지고 미묘한 하이라이트 효과를 얻는다.

그 효과는 심지어 내 버튼의 배경 모양과 자동으로 일치하여 아무도 재미있는 사실을 배울 기회를 놓치지 않도록 한다.

훌륭한 윈도우 앱을 만드는 것에 대해 다루어야 할 것이 더 많다.

더 나아가려면, "공간 컴퓨팅을 위한 윈도우 앱 향상"을 확인하세요. 여기서 멀티플랫폼 앱을 업데이트하고, 장식품을 추가하는 방법을 배우고, 호버 효과, 재료 등에 대해 더 깊이 파고들 수 있습니다.

다음으로 우리 앱을 볼륨과 함께 다음 차원으로 가져가자.

나는 동료 우주 관찰자들이 우리가 집이라고 부르는 행성에 대한 새로운 관점을 얻을 수 있도록 돕고 싶다.

그리고 볼륨은 그것을 하기에 완벽하다.

앱에 볼륨을 추가하려면, 메인 창에 사용한 것과 동일한 WindowGroup 장면을 사용하고, 단순히 부피 측정 창 스타일을 지정할 것입니다.

나는 또한 우리의 콘텐츠에 맞을 수 있도록 창에 기본 3D 크기를 제공할 수 있다.

시뮬레이터에서 볼륨을 확인해 봅시다.

내 볼륨의 콘텐츠 내에서, 나는 RealityKit의 새로운 Model3D API를 사용하여 디자이너가 조립한 3D 지구 모델을 표시하고 있다.

그리고 Model3D를 사용하면, 내 앱에 3D 콘텐츠를 추가하는 것이 정말 쉽습니다.

Model3D는 이미지와 유사하여 아름다운 3D 콘텐츠를 쉽게 로드하고 표시할 수 있습니다.

이미지와 달리, Model3D는 3D 콘텐츠를 로드하고 표시할 준비가 되는 데 시간이 걸릴 수 있기 때문에 항상 비동기적으로 로드됩니다.

AsyncImage 보기와 마찬가지로, Model3D는 콘텐츠가 로드될 때까지 기다리는 동안 자리 표시자 보기를 자동으로 표시할 수 있습니다.

아니면 내가 완전히 통제하고 대신 내 자리 표시자를 표시할 수 있어.

Model3D가 또 다른 SwiftUI 뷰라는 것을 잠시 알아차릴 가치가 있습니다.

SwiftUI 앱에 3D를 가져오는 것은 레이아웃 시스템, 시각 효과, 제스처 등에 대한 자연스러운 확장에 이미 익숙한 것과 동일한 개념을 기반으로 합니다.

우리가 어떻게 하는지 이해할 수 있도록 이 예시를 바탕으로 합시다.

나는 지구에 생명을 불어넣는 데 도움이 되는 몇 가지 컨트롤을 추가하고 싶다.

저는 이미 제어판 UI를 구축했고, 그것을 지구 모델 앞에 놓고 싶습니다.

그렇게 하기 위해, 나는 단순히 ZStack 레이아웃을 사용할 수 있다.

ZStack과 같은 레이아웃은 너비와 높이와 마찬가지로 콘텐츠의 깊이를 자동으로 인식합니다.

그리고 기본적으로 Model3D는 이미지가 2D인 것처럼 모든 3차원의 콘텐츠에 맞게 크기가 조정됩니다.

사실, 전체 레이아웃 시스템은 콘텐츠의 깊이와 사용 가능한 공간을 인식하고 그에 따라 레이아웃을 조정합니다.

그리고 앞면이나 뒷면을 따라 SwiftUI 뷰 사이에 간격을 추가하는 새로운 padding3D 수정자와 같이 앱의 레이아웃에서 깊이가 어떻게 작동하는지 제어하는 새로운 수정자도 있습니다. 여기서 컨트롤에 숨을 쉴 수 있는 공간을 제공하는 데 사용할 수 있습니다.

볼륨은 어떤 각도에서든 볼 수 있도록 설계되었으므로, 앱의 콘텐츠가 세 가지 차원 모두에서 어떻게 배열되는지 생각하는 것이 중요합니다.

마지막으로, 내 컨트롤이 멋지게 보이고 접지된 느낌을 주기 위해, 나는 새로운 glassBackgroundEffect 수정자를 사용하여 우리가 전에 표준 창에서 가졌던 것과 같은 아름다운 유리 처리를 할 것이다.

이제 이 컨트롤들은 흔들릴 준비가 된 것 같습니다.

내가 우리의 3D 글로브에 추가하고 싶은 또 다른 것은 지구를 임의의 장소로 돌리는 쉬운 방법이며, 이는 내가 다음 휴가 목적지를 계획하는 가장 좋아하는 방법이다.

그렇게 하기 위해, 나는 내 Model3D에 3D 회전 효과를 추가할 것이다, 이 경우 y축에 대해.

그리고 나는 사용할 회전을 추적하기 위해 상태 변수를 사용할 것이다.

그런 다음 탭 제스처를 추가하고 발사되면 새로운 탄력있는 스프링 애니메이션으로 회전을 임의의 양으로 변경할 것입니다.

이거 한 번 해 보자.

아 그래, 서반구.

그건 정말 내 여름 계획을 좁혀!

우리가 방금 지구에 적용한 회전 효과가 진정한 3D라는 것을 주목하세요.

우리는 당신이 이미 알고 있는 스케일, 오프셋 및 사용자 지정 3D 변환을 포함한 새로운 3D 기능과 함께 사용하는 방법을 업그레이드했습니다.

이제 이것은 이미 지구를 확인하는 좋은 방법이지만, 나는 우리가 그것을 더 좋게 만들 수 있다고 생각한다.

그렇게 하기 위해, 나는 RealityKit의 모든 기능에 쉽게 접근할 수 있는 새로운 SwiftUI View인 RealityView를 사용할 것이다.

RealityView를 사용하면 RealityKit 콘텐츠를 로드하고 만들기 위한 클로저를 제공합니다.

내 지구 모델을 표시하기 위해, 나는 ModelEntity를 만들고 그것이 로드될 때까지 기다릴 것이다.

그리고 로딩이 완료되면, RealityView의 콘텐츠에 추가하여 표시할 것입니다.

RealityView의 폐쇄에서 async-await를 직접 사용할 수 있습니다.

Model3D와 마찬가지로, 내 콘텐츠가 로드될 때까지 자동으로 자리 표시자가 표시됩니다.

이제 지구 엔티티를 로드했으므로, 내 콘텐츠를 정말 빛나게 하기 위해 RealityKit API의 풍부한 라이브러리에 액세스할 수 있습니다.

이 경우, 나는 더 햇볕이 잘 드는 처분을 주기 위해 지구에 약간의 조명을 추가하고 싶다.

저는 이미 특별한 이미지 기반 조명을 추가하기 위해 RealityKit 코드를 작성했으므로, 여기서 전화하겠습니다.

이제 그건 즐거워 보여!

RealityView로 다룰 것이 훨씬 더 많다.

RealityView를 사용하면 사용자 인터페이스와 풍부한 3D 경험을 혼합하는 것이 그 어느 때보다 쉬워졌습니다.

RealityKit을 사용하면 사용자 지정 재료와 셰이더, 물리학 및 복잡한 애니메이션 등과 같은 모든 종류의 풍부한 동작을 추가할 수 있습니다.

RealityView와 RealityKit에 대해 더 알아보기 위해, 우리는 훨씬 더 깊이 들어가는 몇 가지 회담을 준비했습니다.

다이빙할 준비가 되면 "RealityKit으로 공간 경험 구축"을 확인하세요.

지금은 RealityView의 두 가지 멋진 기능인 제스처와 첨부 파일에 집중해 봅시다.

RealityView를 사용하면 SwiftUI 제스처가 자동으로 작동하여 그 어느 때보다 쉽게 3D 콘텐츠를 구현할 수 있습니다.

나는 우리가 전에 추가한 탭 제스처를 기반으로 내가 탭한 곳을 기반으로 지구에 마커를 배치하여 다음에 어디로 여행해야 할지 정확히 알고 싶다.

그렇게 하기 위해, 나는 이제 탭의 전체 3D 위치를 제공하는 SpatialTapGesture를 사용할 것이다.

내가 탭한 지구의 개체의 위치를 식별하는 데 도움을 주기 위해, 나는 새로운 targetedToAnyEntity 제스처 수정자를 사용할 것이다.

이것은 내가 탭한 엔티티와 그 엔티티에 상대적인 위치와 같이 내가 필요한 맥락을 제공하며, 나는 내 핀의 위치를 찾는 데 사용할 것이다.

내 글로브에 핀을 표시하려면, RealityView 첨부 파일을 사용할 수 있습니다.

첨부 파일은 사용자 지정 SwiftUI 뷰를 RealityKit 엔티티와 인라인으로 혼합하는 데 적합합니다.

RealityView의 첨부 파일 클로저 내에 다른 SwiftUI 뷰를 직접 추가하여 RealityView의 어느 곳에서나 RealityKit 엔티티로 배치할 수 있습니다.

여기에 핀 첨부 파일을 추가하고 식별하는 데 사용할 수 있는 태그를 드리겠습니다.

그런 다음 업데이트 종료에서 첨부 파일의 엔티티를 찾아 RealityView의 콘텐츠에 추가하여 표시할 것입니다.

그리고 나서 나는 탭 위치와 일치하도록 그 엔티티를 배치할 것이다.

이걸 한 번 더 돌리자!

짐 싸는 게 좋을 것 같아!

우리는 놀라운 체적 앱을 구축할 수 있는 가능성에 대해 매우 기쁩니다. SwiftUI 앱을 다음 차원으로 끌어올리는 데 도움이 되는 전체 대화를 준비했습니다. 여기서 RealityKit과 함께 SwiftUI 사용, 풍부한 3D 상호 작용 구축, 레이아웃에 깊이 추가 등에 대해 자세히 알아볼 수 있습니다.

마지막으로, SwiftUI를 사용하여 풍부하고 몰입감 있는 3D 경험을 구축하는 새로운 방법인 Full Spaces로 이 앱을 창 너머로 가져가자.

완전한 공간으로, 당신은 완전한 통제권을 가질 수 있습니다.

창의적인 새로운 방식으로 사람들의 주변 환경을 강화하기 위해 환경 어디에나 콘텐츠를 배치할 수 있습니다.

또는 주변 환경을 숨기고 놀라운 새로운 경험을 만들어 사람들을 완전히 몰입시킬 수 있습니다.

우주로 뛰어들어 태양계에 생명을 불어넣자.

나는 이미 메인 윈도우의 이 페이지에서 앞서 시작했고, 안락의자 우주비행사들이 스스로 우주 공간을 볼 수 있도록 초대했다.

이제 나는 내 공간을 만들고 이륙을 위해 이 버튼을 연결하기만 하면 된다.

내 앱에 전체 공간을 추가하려면, WindowGroups에서 했던 것처럼 새로운 ImmersiveSpace 장면을 추가하기만 하면 됩니다.

그것의 몸 안에서, 나는 내 공간의 내용에 대한 루트 뷰를 제공할 것이다.

또한 메인 창에서 프로그래밍 방식으로 열 수 있도록 내 공간의 ID를 제공할 것입니다.

이 공간을 열기 위해, 나는 새로운 openImmersiveSpace 환경 액션을 사용할 것이다.

내 버튼 안에서, 나는 그 행동을 호출하고 우리 공간의 ID를 전달할 것이다.

그리고 그냥 그렇게...

...우리는 이륙이 있어!

이건 좋은 시작이야.

나는 전에는 할 수 없었던 방식으로 지구에 가까이 갈 수 있으며, 현실적인 구름과 같은 모든 풍부한 세부 사항에 정말 감사할 수 있다.

하지만 여기에 뭔가 빠진 게 있어.

나는 이 공간에 진정으로 몰입하고 싶다.

그렇게 하기 위해, 나는 강력한 공간 도구를 사용할 것이다: 몰입 스타일.

풀 스페이스는 여러 몰입 스타일 중 하나로 올 수 있으며, 즉석에서 이러한 스타일 사이를 전환할 수 있습니다.

혼합된 몰입으로, 당신의 공간의 콘텐츠는 현실 세계와 공존하며, 이는 가벼운 경험과 사람들의 주변 환경을 보강하는 데 적합합니다.

완전한 몰입으로, 당신의 앱은 완전히 몰입할 수 있고 사람들의 주변 환경을 숨길 수 있으며, 그들을 놀라운 새로운 세계로 옮길 수 있습니다.

그리고 점진적인 몰입은 사람들을 주변부의 현실 세계에 기반을 두는 경험을 위한 훌륭한 중간 지점이다.

점진적인 몰입을 통해, 사람들은 또한 장치의 디지털 크라운을 사용하여 얼마나 몰입감이 그들에게 맞는지 정확히 알 수 있다.

이제 나는 완전히 몰입할 수 있는 공간이 내 앱이 이 세상에서 진정으로 벗어날 수 있도록 완벽하게 적합할 것이라고 생각한다.

그렇게 하기 위해, 나는 ImmersiveSpace 장면으로 돌아가서 완전한 몰입 스타일로 새로운 immersionStyle 수정자를 추가할 것이다.

여기서 지원되는 스타일 목록과 현재 선택을 모두 제공하여 즉석에서 스타일을 변경할 수 있습니다.

내가 완전한 몰입을 사용할 때, 그 시스템은 사람들의 실제 환경을 완전히 숨긴다.

그래서 나는 내 앱을 사용하는 사람들을 몰입시킬 수 있는 가상 환경을 제공해야 한다.

그리고 물론, 우주 공간 자체보다 사용하기에 더 좋은 환경은 무엇입니까?

우리는 우리의 별 필드를 표시하기 위해 새로운 RealityView를 만들어 우리의 환경과 함께 별에 손을 뻗을 것이다.

RealityView의 마감 내에서, 나는 우리의 스타 필드 엔티티를 로드할 것이고, 준비가 되면, RealityView의 콘텐츠에 추가할 것이다.

그런 다음 나는 지구와 태양과 함께 태양계의 몸에 스타필드 뷰를 추가할 것이다.

자세히 보기 위해 확대해 봅시다.

이제 이것은 나를 정말 별에 뗏기게 만들고 있어.

내 공간을 한 단계 끌어올리기 위해, 나는 ARKit을 사용할 수 있다.

ARKit은 시스템과 깊이 통합된 강력한 프레임워크로, 실제 표면에 콘텐츠를 배치할 수 있는 세계 추적 및 장면 이해와 같은 API를 통해 사람들의 실제 환경에 대한 풍부한 실시간 이해를 제공합니다.

그리고 손 추적은 사용자 지정 손 제스처를 만들고, 현실적인 물리학을 사용하여 콘텐츠와 상호 작용하는 데 사용할 수 있는 놀라운 새로운 도구입니다.

공간에서 ARKit을 사용하는 방법에 대해 자세히 알아보려면, "공간 컴퓨팅을 위한 ARKit 만나기"를 확인하세요.

이제 나는 ARKit이 내 앱으로 잠금을 해제할 수 있는 가능성에 대해 너무 흥분해서 내가 작업해온 기능을 하나 더 살짝 엿보고 싶었다.

ARKit을 내 공간에 통합함으로써, 나는 지구를 소환하기 위해 새로운 손 제스처를 구현할 수 있었다.

그래서 당신은 당신의 손바닥으로 세상을 잡을 수 있습니다.

우리는 당신이 풀 스페이스로 할 수 있는 일의 표면을 긁고 있습니다.

그리고 우리는 당신이 우주로 발사할 수 있도록 또 다른 이야기를 준비했습니다.

"SwiftUI로 창 너머로 이동"을 확인하여 공간의 기본에 대해 더 깊이 파고들고 주변 환경에 효과 추가, 가상 손 표시, SharePlay와의 통합 등과 같은 고급 도구에 대해 알아보세요.

그리고 공간의 콘텐츠 렌더링에 대한 완전한 제어가 필요한 경우, Metal과 새로운 CompositorServices 프레임워크를 사용하여 그렇게 할 수 있습니다.

자세한 내용은 "몰입형 앱을 위한 금속 발견"을 확인하세요.

우리는 당신이 SwiftUI를 사용하여 만들 모든 놀라운 새로운 앱을 빨리 확인하고 싶습니다.

아름다운 창문부터 볼륨이 있는 완전히 새로운 차원, 풀 스페이스의 놀라운 몰입형 경험에 이르기까지, 새로운 가능성의 세계가 당신을 기다리고 있습니다.

더 깊이 파고들 준비가 되었다면, 앱을 정말 빛나도록 디자인하는 방법에 대해 더 많이 배울 수 있는 "공간 설계 원칙"과 같이 더 많은 훌륭한 대화가 있습니다.

그리고 플랫폼에 가져오고 싶은 기존 UIKit 코드가 있다면, "공간 컴퓨팅을 위한 UIKit 만나기"를 확인하세요.

시청해 주셔서 감사합니다, 그리고 공간 컴퓨팅으로 즐거운 시간 보내세요!

♪