10229

♪ ♪

Ellie: 안녕하세요, 저는 Apple의 교육 디자인 관리자인 Ellie Gattozzi입니다. 저는 TipKit으로 발견할 수 있는 기능을 만드는 것에 대해 이야기할 것입니다.

첫 번째 팁을 만들고, 누가 팁을 봐야 하는지 지정하는 규칙을 추가하고, 앱에서 교육 메시징의 빈도를 제어하기 위해 언제 표시되고 해제되는지 관리하고, 팁을 테스트하는 방법을 배우게 됩니다.

하지만 뛰어들기 전에, TipKit에 대한 약간의 배경.

당신은 사람들이 좋아할 것이라는 것을 알고 있는 기능을 연구하지만, 먼저, 그들은 그것들을 발견해야 합니다.

TipKit은 앱에서 팁을 쉽게 표시할 수 있는 새로운 프레임워크입니다.

Apple의 모든 사용자 교육에서 일하는 교육 제품 팀으로서, 우리는 특별히 교육을 염두에 두고 TipKit을 설계했습니다.

예를 들어, TipKit은 누군가에게 새로운 기능에 대해 가르치거나, 숨겨진 기능을 발견하는 데 도움을 주거나, 작업을 수행하는 더 빠른 방법을 보여줄 수 있습니다.

그리고 iPhone, iPad, Mac, Apple Watch 및 Apple TV에서 사용할 수 있습니다.

그것으로, 나는 팁을 만들기 시작할 것이다.

뒷마당 새 앱에는 뒷마당을 선호하는 기능이 있습니다.

좋아하는 것은 사람이 가장 아끼는 뒷마당에 쉽게 갈 수 있게 해주며, 이는 팁을 위한 훌륭한 후보가 된다.

팁의 기능을 확인하면, Xcode로 전환할 준비가 되었습니다.

나는 가장 좋아하는 뒷마당 기능에 대한 새로운 팁을 정의하는 것으로 시작할 것이다.

팁은 제목과 메시지로 구성되어 있으므로, 그것들을 추가하겠습니다.

유용한 팁에는 기능이 무엇인지 말하는 제목과 기억하기 쉬운 혜택 정보 또는 지침이 있는 메시지로 직접 작업 문구가 있어 사용자가 기능을 사용하고 싶은 이유를 알고 나중에 스스로 작업을 수행할 수 있습니다.

다음은 효과적인 팁의 몇 가지 예입니다.

이 모든 것은 실행 가능하고, 교육적이며, 기억하기 쉽다.

다음은 TipKit을 사용하지 않을 때의 몇 가지 예입니다.

첫 번째는 홍보용이고 두 번째는 오류 메시지이며, 둘 다 교육적이지 않다.

세 번째로, 그 기능이 더 좋다는 것은 좋지만, 사람들은 아무것도 할 필요가 없다.

마지막은 유용하지만, 그 순간에 읽고 기억하기에는 너무 복잡하다.

이제 내 팁으로 돌아가.

저는 이미 제목과 메시지를 가지고 있으므로, 다음으로 팁 보기의 기본 구조를 넣고 TipsCenter를 구성할 것입니다.

TipsCenter는 팁과 관련 이벤트가 앱 실행 사이에 지속되고 팁을 더 쉽게 테스트할 수 있도록 하는 것을 포함하여 주요 TipKit 기능을 가능하게 합니다.

TipsCenter의 기본 공유 인스턴스가 제공되며 제가 여기에 추가한 것입니다.

TipsCenter가 구성되면, 이제 팁을 볼 수 있습니다.

좋아 보이지만, 더 좋아 보일 수 있다.

앱과 일치하도록 텍스트 색상을 인디고로 변경하고, 관심을 끌고 팁을 기능과 시각적으로 연관시키는 데 도움이 되는 아이콘을 넣을 것입니다.

팁이 선호에 관한 것이기 때문에 나는 별 기호를 선택했다.

기능에 사용자 정의할 수 있는 설정이 있다면, 작업 버튼을 추가할 수 있습니다.

액션 버튼은 사람들을 그 설정으로 직접 데려갈 수 있으므로 빠르게 조정할 수 있습니다.

또는 사람들이 특히 유용하다고 생각하는 더 많은 정보가 있다고 생각한다면, 또 다른 옵션은 온보딩 흐름과 같은 추가 리소스에 연결하는 것입니다.

좋아, 내 교육 팁이 있는데 좋아 보여.

이제 나는 그것에 대한 최고의 치료와 배치를 확인할 것이다.

팁 보기에는 두 가지 유형이 있습니다: 첫 번째는 앱의 UI에 팁이 나타날 수 있는 팝오버 보기입니다.

버튼이나 다른 요소를 직접 가리킬 수 있으며 현재 앱 화면을 변경하지 않고 사용자를 안내하는 데 특히 유용합니다.

tvOS에서는 팝오버 보기가 독점적으로 사용됩니다.

두 번째는 UI가 차단되지 않도록 앱의 UI를 일시적으로 조정하는 인라인 뷰입니다.

두 뷰를 사용할 때, 팁이 당신이 부르고 있는 관련 버튼이나 요소에 가깝게 나타나도록 하는 것이 도움이 됩니다.

뒷마당을 선호하기 위해, 나는 팝오버 뷰로 가서 오른쪽 상단 모서리에 있는 별 버튼을 가리키도록 배치할 것이다.

그리고 그게 내 앱의 첫 번째 팁이야.

그것은 멋져 보이고 맥락에 있다.

하지만 최고의 시간에 이상적인 청중에게 다가갈 수 있는 TipKit의 힘을 실제로 활용하기 위해, 우리는 몇 가지 규칙을 추가하고 싶을 것입니다.

팁을 다음 단계로 끌어올리는 방법에 대해 이야기하기 위해 찰리에게 넘길게.

찰리: 고마워, 엘리.

안녕하세요, 저는 Instructional Products 팀의 소프트웨어 엔지니어링 매니저인 Charlie Parks입니다.

새로운 기능을 발견하는 것은 놀라움과 기쁨의 느낌을 불러일으킬 수 있지만, 그 기능이 그 사람에게 관심이 있고, 그것에 대한 교육이 스팸이나 무관한 것으로 간주되지 않는 경우에만 가능합니다.

뒷마당을 좋아하는 것에 대한 팁은 유용하지만, 모든 사람, 특히 이미 그 기능을 발견한 사람들을 위한 것은 아닐 수도 있다.

그것은 또한 앱을 자주 사용하지 않는 사람들에게 덜 흥미로울 수 있다.

애플에서, 우리는 인앱 교육이 그것으로부터 이익을 얻을 수 있는 사람들에게 초점을 맞추어야 한다고 믿으며, 그들이 앱에서 무언가를 성취하려고 하는 동안 개인이 방해하는 것을 피하는 것을 목표로 합니다.

팁이 가장 이상적인 시간에 가장 관련성이 높은 청중에게만 표시되도록 하기 위해, TipKit은 팁이 언제 표시되어야 하는지 정확히 결정하기 위해 단독으로 또는 함께 사용할 수 있는 여러 자격 규칙을 제공합니다.

두 가지 주요 유형의 규칙이 있다. 첫 번째는 매개 변수 기반 규칙이다.

매개 변수 기반 규칙은 지속적이며 표현식을 작성하고 싶은 Swift 값 유형을 기반으로 한 팁을 보여주는 데 가장 적합합니다.

두 번째는 이벤트 기반 규칙이다.

이벤트 기반 규칙을 사용하면 사람이 팁을 받기 전에 수행해야 하는 작업을 정의할 수 있습니다.

내가 가장 좋아하는 뒷마당 팁을 위해, 내가 가장 먼저 하고 싶은 일은 그 사람이 자신의 계정에 로그인했는지 확인하는 것이다.

나는 그것을 달성하기 위해 매개 변수 기반 규칙을 구현할 것이다.

먼저, 매개 변수의 초기 값을 false로 설정하겠습니다.

그럼, 나는 이것을 팁의 규칙에 추가할 것이다.

좋아. 나는 누가 팁을 받을지 좁혔지만, 지금은 더 좁히고 싶다.

나는 사람들이 앱을 사용하고 그들에게 찔러내기 전에 그 기능을 유기적으로 발견할 수 있기를 바란다.

내가 그렇게 할 방법은 사람이 뒷마당 세부 보기에 적어도 세 번 간 후에만 팁이 표시되도록 하는 이벤트 기반 규칙을 만드는 것이다.

그래서, 먼저, 나는 그 이벤트를 만들 거야.

그런 다음, 규칙이 true로 평가되기 전에 이벤트가 트리거되기를 원하는 횟수를 계산하도록 할 것이다.

이 경우, 나는 그 사람이 팁을 제시하기 전에 뒷마당 세부 보기에 세 번 들어가기를 원한다.

내가 마지막으로 해야 할 일은 그 행사를 기부하는 것이다.

그래서 BackyardDetailView에서, 나는 뷰가 나타날 때마다 이벤트를 기부할 것이다.

이 규칙들이 함께 오고 있지만, 만약 내가 그것들을 조금 더 강화하고 싶다면?

지금까지, 나는 뒷마당 디테일 뷰에 자주 가는 사람들에게 집중했지만, 뒷마당을 선호한 적이 없다.

이제, 나는 또한 정기적으로 앱을 사용하는 사람들에게만 팁을 보여주고 싶다.

이벤트 기반 규칙에 날짜 쿼리 수정자를 추가하여 누군가가 지난 5일 동안 뒷마당 상세 보기에 세 번 갔을 때만 true로 평가되도록 할 것입니다.

또 다른 매우 강력한 TipKit 기능은 각 이벤트 기부에 관련 유형을 추가하고 해당 유형을 기반으로 이벤트를 쿼리하여 사용자 지정 기부를 만들 수 있는 기능입니다.

관련 유형을 사용하여 이벤트 기반 규칙을 더 구체화할 수 있으므로, 누군가가 특정 뒷마당 세부 보기로 갔을 때만 일치합니다.

먼저, DetailViewDonation을 만들고 특정 뒷마당 뷰의 ID를 제공할 것입니다.

그런 다음, 내 기부에, 나는 사람이 현재 있는 뒷마당 전망의 ID를 포함할 것이다.

둘 다 설정되면, 고유한 뒷마당 ID를 기반으로 이벤트를 쿼리하기 위해 규칙을 업데이트할 것입니다.

이러한 맞춤형 기부를 정의할 때, 저장되는 데이터의 크기를 명심하세요.

크기가 클수록, 쿼리가 더 느리고 성능이 떨어집니다.

TipKit의 규칙은 구성하기 쉽고, 팁이 가장 많은 혜택을 받을 수 있는 사람들에게 보여줄 수 있는 강력하고 간단한 방법을 제공합니다.

규칙은 필요에 따라 일반적이거나 구체적일 수 있으며 가장 좋은 시기에 이상적인 청중을 타겟팅하기 위해 결합될 수 있습니다.

일단 팁이 내 앱에 나타나면, 나는 그것이 화면에 영원히 남아 있는 것을 원하지 않으며, 사람이 팁에 설명된 기능을 사용했다면 오래 머무르는 것을 원하지 않는다.

그리고 만약 내가 여러 가지 팁을 가지고 있다면, 나는 그것들이 모두 한 번에 나타나는 것을 원하지 않는다. 왜냐하면 그것은 압도적일 수 있고 그 사람이 하려고 하는 것을 방해할 수 있기 때문이다.

TipKit은 몇 가지 디스플레이 및 해고 행동을 제공하므로, 팁은 유용한 한 좋은 케이던스로 나타납니다.

앱에 몇 가지 팁을 더 추가했다고 가정해 봅시다. 그래서 이제 Backyard Birds 앱에 다섯 가지 팁이 있습니다.

팁은 모두 유용하지만 모두 한 번에 나타나면 덜 효과적일 것이다.

TipKit을 사용하면 팁의 표시 주파수를 설정할 수 있으므로 더 이상적인 케이던스로 나타납니다.

TipsCenter에서 다른 팁이 나타나기 전에 통과해야 하는 시간을 지정할 수 있습니다.

24시간마다 하나의 팁 쇼를 원한다면 매일 사용할 수 있고, 60분마다 하나의 팁 쇼를 원한다면 매시간마다 사용할 수 있으며, 유효한 TimeInterval 값을 제공하여 사용자 지정 기간을 지정할 수 있습니다.

그리고 만약 내가 정말로 교육이 즉시 필요하다고 느낀다면, 나는 또한 .immediate 수정자를 사용할 수 있다.

이렇게 하면, 사람들은 최근에 다른 팁이 나타나거나 화면에 있더라도 자격이 있는 순간에 자격이 있는 모든 팁을 볼 수 있습니다.

TipsCenter 수준에서 표시 빈도를 무시하는 대신, 팁당 일회성으로 무시하는 것이 더 유용할 수 있습니다.

그렇게 하기 위해, 특정 팁에 .ignoresDisplayFrequency 옵션을 추가할 수 있습니다.

이제, 그 특정 팁만이 두 번째 사람이 자격이 있다는 것을 보여줄 것이며, 내 앱의 나머지 팁은 내가 TipsCenter 수준에서 설정한 디스플레이 케이던스를 계속 따를 것이다.

일단 팁이 나타나면, 나는 그들이 유용한 한 화면에 머물기를 원한다.

따라서 누군가가 팁에 설명된 기능을 사용하는 경우, 이는 그들이 행동을 수행했다는 것을 의미하거나, 팁을 받을 자격이 있지만 여전히 관심이 없다면, 팁은 기각되어야 합니다.

앱을 사용하는 사람이 팁 디스플레이에 대한 모든 규칙을 만족했다고 가정해 봅시다: 그들은 로그인했고, 지난 5일 동안 뒷마당 상세 보기를 세 번 열었지만, 뒷마당에서 가장 좋아하는 버튼을 탭한 적이 없습니다.

그들이 팁을 보고 즐겨찾기 버튼을 탭하면, 나는 원하는 결과가 수행되었고 팁이 기각될 것임을 나타내기 위해 ".userPerformedAction"이라는 이유로 무효화 방법을 호출할 것이다.

팁을 무시할 수 있는 또 다른 방법은 팁이 정의된 .maxDisplayCount보다 더 많이 표시되는 경우입니다.

이 경우, 팁이 다섯 번 표시되고 아무런 조치도 취하지 않으면, 다음에 개인이 뒷마당 세부 보기에 들어갈 때 표시해서는 안 됩니다.

이것들은 TipKit이 제공하는 내장 기능을 사용하여 팁을 무시할 수 있는 몇 가지 방법입니다.

하지만 앱을 가장 잘 알고 있기 때문에, .invalidate() 메서드를 사용하여 적합하다고 생각하는 상호 작용이나 기준에 따라 팁을 무시할 수 있습니다.

TipKit은 또한 iCloud를 통해 팁 상태를 동기화하여 한 장치에서 볼 수 있는 팁이 다른 장치에서 볼 수 없도록 할 수 있습니다.

예를 들어, 앱을 사용하는 사람이 iPad와 iPhone 모두에 설치되어 있고, 두 장치에서 기능이 동일하다면, 두 장치에 모두 해당 기능에 대해 교육하지 않는 것이 가장 좋습니다.

TipKit이 제공하는 API 테스트와 다음 단계에 대해 이야기하기 위해 지금 Ellie에게 돌려드리겠습니다.

엘리: 테스트를 쉽게 하기 위해, TipKit에는 자격 규칙을 우회하는 데 사용할 수 있는 몇 가지 편리한 API가 제공되므로 필요에 따라 팁을 표시하거나 숨길 수 있습니다.

설정된 규칙을 충족할 필요 없이 앱의 모든 팁을 검사할 수 있습니다.

그렇게 하려면, TipsCenter의 구성에 .showAllTips를 추가하세요.

테스트할 때 특정 팁만 표시하려면, .showTips를 사용하고 특정 팁 ID를 통과하거나, .hideTips를 사용하여 특정 팁이 표시되지 않도록 하십시오.

그리고 팁이 표시되지 않도록 하고 싶다면, 앱의 다른 기능에 집중할 수 있도록, .hideAllTips를 사용하세요.

또한 .resetDatastore를 사용하여 TipKit 데이터 저장소의 모든 정보를 제거하여 앱의 각 빌드에서 깨끗한 상태를 설정할 수 있습니다.

API를 통해 호출할 수 있는 모든 테스트 옵션은 프로젝트의 계획에 추가할 수 있는 실행 인수로도 사용할 수 있습니다.

이 중 하나를 사용하여 빠른 현장 점검을 하거나 전체 기능을 테스트할 수 있습니다.

그리고 그것으로, 넌 다 준비됐어.

팁을 만들고, 규칙을 추가하고, 앱에서 팁의 빈도를 설정했으며, 이제 모든 것이 예상대로 작동되도록 테스트 중입니다.

요약하자면, 팁은 사용자가 앱에서 기능을 발견하는 데 도움이 됩니다.

팁을 짧고, 교육적이며, 실행 가능한 상태로 유지하고, 정의하기 쉽지만 강력한 규칙을 사용하여 이상적인 청중을 타겟팅하는 것을 잊지 마세요.

TipKit의 샘플 코드는 developer.apple.com에서 사용할 수 있으며, TipKit 휴먼 인터페이스 지침을 주시하여 훌륭한 팁을 만드는 방법에 대한 추가 정보를 얻으십시오.

이제 앱의 발견 가능성 기회를 검토하고, 새로운 기능을 작업할 때 TipKit을 염두에 두세요.

교육 제품 팀을 대표하여, 시청해 주셔서 감사합니다.