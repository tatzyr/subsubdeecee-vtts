10120

♪ ♪

안녕하세요, 저는 레이첼입니다. 저는 사파리 팀의 엔지니어입니다.

오늘, 저는 웹 앱의 새로운 기능을 공유하게 되어 기쁩니다.

우리는 첫 번째 iPhone이 출시된 이후로 웹 앱으로 여행을 해왔고, 그들은 계속 나아지고 있다.

iOS 및 iPadOS 16.4에서는 배지를 지원하는 웹 푸시 표준을 사용하여 홈 화면 웹 앱에 알림을 추가했습니다.

우리는 또한 홈 화면에 추가를 채택하기 위해 iOS 및 iPadOS 브라우저용 API를 추가했습니다.

iOS 및 iPadOS 17의 새로운 기능, 이제 Safari View Controller에서 홈 화면에 추가를 사용할 수 있습니다.

따라서 이제 사용자는 iOS 브라우저와 많은 인앱 브라우저에서 홈 화면 웹 앱을 추가할 수 있습니다.

macOS 소노마의 새로운 기능인 우리는 이제 Mac에 웹 앱이 있습니다.

Mac의 웹 앱을 사용하면 나머지 브라우징과 분리된 전용 방식으로 항상 사용하는 웹사이트에 집중할 수 있습니다.

iOS와 마찬가지로, 웹 앱을 만드는 방법은 Dock에 웹사이트를 추가하는 것이다.

저는 위키피디아를 둘러보고 있으며, 그것을 독에 추가하고 싶습니다.

파일 메뉴를 열고 "독에 추가..."를 선택할 거야.

이제 이 사이트의 아이콘, 이름 및 URL을 볼 수 있습니다.

나는 이름을 단순화할 거야.

원한다면 아이콘을 수정할 수도 있지만, 이것은 좋아 보인다.

"추가"를 누르면, 이제 내 독에 새로운 아이콘이 있습니다.

나는 지금 사파리를 닫고 위키피디아 웹 앱을 열 거야.

이제 이 웹 앱을 실행하면, 앱처럼 느껴지는 방식으로 이 사이트를 사용할 수 있습니다.

난 여전히 내 계정에 로그인했어.

그것은 사파리가 독에 추가될 때 웹사이트 쿠키를 복사하기 때문이다.

내비게이션 버튼이 있는 단순화된 도구 모음이 있습니다.

그리고 사이트의 테마 색상은 도구 모음에 섞여 있다.

개발자로서, 당신은 내비게이션 버튼이 표시되는지 여부를 제어할 수 있습니다.

오늘, 우리는 먼저 Mac의 웹 앱이 모든 웹사이트에서 즉시 작동하는 방법을 다룰 것입니다.

그런 다음 사용자에게 최고의 경험을 제공하기 위해 웹 앱의 동작을 사용자 정의하는 방법에 대해 알려드리겠습니다.

마지막으로, 사운드와 배지를 포함한 알림에 대해 논의하여 사용자가 웹 앱을 적극적으로 사용하지 않을 때에도 사용자에게 다가갈 수 있는 방법을 제공합니다.

웹 앱이 즉시 작동하는 방식부터 시작합시다.

Mac의 웹 앱은 개발자가 채택할 필요 없이 잘 작동합니다.

모든 웹사이트는 웹 앱이 될 수 있다.

Mac의 웹 앱은 macOS의 네이티브 앱에서 기대할 수 있는 많은 기능과 완전히 통합되어 있습니다.

제가 이미 Dock에 추가한 웹 앱을 살펴봅시다.

이 사이트에는 웹 앱 매니페스트와 같은 웹 앱별 기능이 없으며, 독립형 웹 앱으로 멋지게 보이고 기능합니다.

모든 Mac 앱과 마찬가지로, 웹 앱은 스테이지 관리자, 미션 컨트롤 및 명령 + 탭과 같은 키보드 단축키와 잘 작동합니다.

웹 앱은 독, 런치패드 및 스포트라이트 검색에서 열 수 있습니다.

웹 앱은 iCloud 키체인과 자격 증명 공급자 확장 API를 채택한 타사 앱의 자동 완성 자격 증명과 함께 작동합니다.

우리는 사람들이 개인 정보를 제어할 수 있도록 하여 시스템 권한 프롬프트와 시스템 설정의 개인 정보 보호 및 보안 섹션을 통해 네이티브 앱과 같은 방식으로 웹 앱에 대한 카메라, 마이크 및 위치 액세스 권한을 부여할 수 있습니다.

그것은 기본 행동이었지만, 당신은 당신의 웹사이트를 사용하는 사람들을 위한 경험을 맞춤화하고 싶을 수도 있습니다.

웹 페이지가 macOS의 Dock에 추가되면, 항상 웹 앱으로 취급됩니다.

개발자로서, 당신은 웹 앱 창의 도구 모음의 초기 동작을 제어할 수 있습니다.

기본 동작은 내비게이션 컨트롤이 있는 도구 모음을 보여줍니다.

이것은 자체 내비게이션 컨트롤이 없는 사이트를 탐색하는 데 유용합니다.

사이트에 자체 탐색 컨트롤이 있거나 사이트의 맥락에서 탐색 컨트롤이 필요하지 않은 경우 도구 모음을 표시하고 싶지 않을 수 있습니다.

이것은 독립형 디스플레이 모드라고 불린다.

iOS의 기본 동작은 macOS와 다르다.

홈 화면에 추가된 웹사이트가 기본 브라우저에서 열립니다.

이것은 사용자가 홈 화면에서 바로 일반적으로 사용되는 사이트에 액세스할 수 있는 빠른 방법을 제공합니다.

독립형 디스플레이 모드로 iOS 및 iPadOS의 홈 화면에 추가된 웹사이트는 홈 화면 웹 앱이 됩니다.

홈 화면 웹 앱은 iOS에서 별도의 쿠키와 저장 공간이 있는 독립형 앱과 같은 경험을 제공합니다.

도구 모음과 같은 브라우저에서 제공하는 UI는 없으며, 모든 콘텐츠는 웹 페이지에서 가져온 것입니다.

사이트에서 iOS에서 웹 푸시와 배지를 사용할 수 있도록 하려면, 독립형 디스플레이 모드를 사용해야 합니다.

디스플레이 모드를 설정하기 위해. 나는 내 사이트에 웹 앱 매니페스트를 추가할 것이다.

웹 앱 매니페스트는 웹사이트가 웹 앱 관련 기능에 대한 의도된 동작을 시스템과 전달하는 방법입니다.

웹사이트에 웹 앱 매니페스트를 추가하려면, HTML 헤드의 JSON 파일에 rel="manifest" 링크를 추가하기만 하면 됩니다.

나는 내 것을 "manifest.json"이라고 불렀다.

해당 매니페스트 파일에서, 당신의 웹사이트에 적용되는 키와 값을 추가하세요.

내 이름은 꽤 길기 때문에 웹사이트 제목이 아니라 웹 앱 이름으로 사용하고 싶기 때문에 먼저 이름을 설정할 것이다.

디스플레이 모드를 변경하려면, 디스플레이를 "독립형"으로 설정할 것입니다.

macOS에서는 웹 앱에 도구 모음이 없습니다.

iOS와 iPadOS에서, 이 사이트는 기본 브라우저 대신 홈 화면 웹 앱에서 열립니다.

이제, 웹 앱 내에서 클릭한 링크가 열리는 곳을 다루겠습니다.

모든 웹 앱에는 관련 범위가 있습니다.

범위 내의 링크는 웹 앱 내에서 열립니다.

기본 범위는 웹 앱을 만드는 데 사용되는 웹 페이지의 호스트입니다.

웹 앱 매니페스트를 사용하여 범위를 더 구체화하여 사이트의 특정 경로로 제한할 수 있습니다.

예를 들어, Browser Pets 웹 앱에서 이 링크를 클릭하여 다른 페이지 "webkittens"로 이동하면, Web Kittens는 example.com에서 우리 사이트의 또 다른 페이지이기 때문에 우리가 웹 앱 내에 머물러 있다는 것을 알 수 있습니다.

이제 apple.com 링크를 클릭하면 기본 브라우저에서 열립니다. example.com의 범위를 벗어나기 때문입니다.

Apple.com 링크와 같이 기본 브라우저에서 Web Kittens에 대한 링크를 열고 싶다면, 웹 앱 매니페스트에서 범위를 조정할 수 있습니다.

범위를 조정하려면, 먼저 "start_url"을 추가하여 시작하겠습니다.

Start_url은 웹 앱이 처음 열릴 때 로드되는 URL입니다.

이것은 브라우저 애완동물의 홈페이지를 열 것이다.

이제 내가 범위를 추가할게.

브라우저 펫과 웹 새끼 고양이를 다른 웹 앱으로 분리하고 싶다고 가정하면, 범위를 브라우저 펫으로 제한할 수 있습니다.

범위는 매니페스트 URL의 하위 디렉토리이다.

이 경우, 범위는 example.com/browserpets가 될 것이다.

범위 내의 모든 링크는 웹 앱 내에 유지되며 범위 밖의 링크는 기본 브라우저에서 열립니다.

iOS의 홈 화면 웹 앱에서 범위 밖의 링크가 사파리 뷰 컨트롤러에서 열립니다.

그래서 이 홈 화면 웹 앱에서 이 링크를 탭하면 사파리 뷰 컨트롤러에서 열립니다.

우리는 매일 사용하는 많은 웹사이트를 최대한 활용하기 위해 로그인해야 합니다.

앞서 언급했듯이, 대부분의 사용자가 웹 앱을 즉시 사용할 수 있도록 하기 위해, 우리는 Mac의 웹 앱이 Dock에 추가될 때 웹사이트 쿠키를 복사합니다.

많은 경우, 사용자는 원활한 경험을 위해 웹 앱을 열 때 로그인 상태를 유지합니다.

그 시점부터, 쿠키는 사파리와 웹 앱 사이에 분리되어 있다.

인증 상태가 사이트의 쿠키에만 저장되는 경우, Safari가 Dock에 추가될 때 웹사이트의 쿠키를 웹 앱에 복사하기 때문에 사용자는 Dock에 추가할 때 웹 앱에 자동으로 로그인해야 합니다.

일부 웹사이트는 쿠키와 로컬 저장소 간에 인증 상태를 나눕니다.

웹 앱이 생성될 때 로컬 저장소가 복사되지 않기 때문에, 사용자는 사이트를 웹 앱으로 계속 사용하려면 다시 인증해야 합니다.

사용자에게 원활한 경험을 제공하기 위해, 쿠키 내에 인증 상태를 저장하십시오.

전에 언급했듯이, 웹 앱의 범위를 벗어나는 링크는 기본 브라우저에서 열립니다.

사용자가 기본 브라우저에서 웹 페이지에 로그인하면, 웹 앱이 추가된 후 쿠키와 저장소가 분리되기 때문에 이미 독에 추가된 웹 앱에 로그인하지 않습니다.

제3자 도메인의 OAuth를 통한 인증은 여전히 웹 앱에서 열립니다.

이것은 휴리스틱을 통해 이루어진다.

OAuth 흐름이 사용자의 기본 브라우저에서 인증 경험을 여는 것을 테스트하고 발견하면, apple.com/feedback을 사용하여 피드백을 보내주십시오.

OAuth 흐름이 사용자의 기본 브라우저에서 열리지 않도록 하려면, window.open을 사용할 수 있습니다.

Window.open을 통해 로드된 링크는 범위에 관계없이 웹 앱에서 항상 열립니다.

애플은 개발자들에게 인증 도메인에 대한 링크가 웹 앱의 맥락 내에 있어야 한다는 것을 나타내는 방법을 제공하기 위해 표준 기관과 협력하고 있다.

일부 웹사이트는 이메일 링크를 사용하여 링크를 열어 사용자에게 자동으로 로그인합니다.

이메일의 링크가 기본 브라우저에서 열리기 때문에, 사용자가 이미 가지고 있는 웹 앱에 자동으로 로그인하지 않습니다.

사용자가 사이트의 로그인 흐름에 쉽게 입력할 수 있는 대체 일회성 코드를 이메일에 제공할 수 있습니다.

더 편리하고 안전한 인증 경험을 위해, 사이트에서 인증을 위해 패스키를 채택하는 것을 고려해 보세요.

자세한 내용은 WWDC22의 "Meet passkeys"를 확인하세요.

Mac의 웹 앱의 알림은 macOS Ventura의 Safari와 iOS 16.4의 홈 화면 웹 앱에 대한 기존 표준 기반 웹 푸시 지원에 흥미롭게 추가됩니다.

이제 배지와 소리를 포함한 알림을 웹 앱에 통합하는 방법을 알려드리겠습니다.

이미 웹 표준에 따라 웹 푸시를 구현한 경우, 푸시 알림은 추가 작업 없이 Mac의 웹 앱으로 웹 페이지에서 작동해야 합니다.

Mac의 웹 앱에 대한 알림은 알림에서 웹 앱의 애플리케이션 아이콘을 사용합니다.

Safari에서 시작된 웹 푸시 알림은 Safari 아이콘을 표시하는 반면, Mac의 웹 앱의 알림은 알림에서 웹 앱의 아이콘을 사용하여 사용자에게 컨텍스트를 제공합니다.

사용자의 관심을 끌기 위해 알림을 받을 때 사용자의 장치에서 사운드가 재생되기를 원할 수 있으므로, 이제 macOS, iOS 및 iPadOS에서 어떻게 작동하는지 알려드리겠습니다.

알림 API를 사용하여 알림에 소리가 나는지 여부를 지정할 수 있습니다.

플랫폼 규칙에 따라, 사운드는 iOS와 iPadOS에서 기본적으로 켜져 있고, 사운드는 macOS에서 기본적으로 꺼져 있습니다.

플랫폼 기본값을 재정의하려면, 자동 값을 명시적으로 지정하십시오.

알림이 무음이어야 하는 경우, 알림을 요청할 때 옵션에서 무음으로 설정하십시오.

알림이 소리를 내야 한다면, 무음으로 false로 설정하세요.

네이티브 앱 알림과 마찬가지로, 사용자는 알림 설정을 사용하여 알림 소리를 제어할 수 있습니다.

배지는 웹 앱에 해결해야 할 것이 있다는 것을 사용자에게 알리는 데 유용합니다.

iOS 16.4의 홈 화면 웹 앱과 마찬가지로, Mac의 웹 앱은 배지를 지원합니다.

배지와 푸시 알림은 macOS, iOS 및 iPadOS에서 매우 밀접하게 연관되어 있기 때문에, 사용자가 웹 앱이 알림을 보낼 수 있도록 허용할 때, 여기에는 웹 앱이 배지를 사용할 수 있는 권한이 포함됩니다.

웹 앱이 열려 있고 푸시 이벤트가 백그라운드에서 처리될 때 배지를 업데이트할 수 있습니다.

사용자는 항상 설정에서 배지를 구성할 수 있습니다.

배지 API 채택에 대한 자세한 내용은 webkit.org에서 "홈 화면 웹 앱 배지"를 확인하세요.

표준 기반 웹 푸시 채택에 대한 자세한 내용은 WWDC22의 "Meet Web Push for Safari"를 확인하세요.

iOS의 홈 화면 웹 앱과 Mac의 웹 앱은 Focus와 통합되어 사용자가 알림을 제어할 수 있습니다.

사용자는 다른 초점 모드에서 보고 싶은 알림을 설정하고 모든 장치에서 초점 모드에 기본 설정을 적용할 수 있습니다.

우리의 웹 앱 매니페스트를 다시 살펴봅시다.

"Id" 매니페스트 키는 동일한 도메인 내의 고유한 웹 앱을 정의합니다.

이것은 포커스 모드를 동기화하는 데 사용되며 동일한 도메인에서 별개의 웹 앱으로 취급되어야 하는 웹사이트의 여러 부분이 있는 경우 유용할 수 있습니다.

주어진 도메인에 대한 웹 앱이 하나만 있다면, ID를 설정할 필요가 없습니다.

제공된 ID가 없는 경우 대체는 start_url입니다.

포커스의 가장 큰 부분 중 하나는 사용자의 모든 장치에서 포커스 모드가 동기화되는 방식이다.

당신과 당신의 사용자 모두 포커스 모드 설정이 동기화되는 방식을 제어합니다.

개발자로서 당신은 사이트의 다른 부분에 대한 뚜렷한 웹 앱을 가질 수 있습니다.

예를 들어, 상점을 위한 하나의 웹 앱과 포럼을 위한 하나의 웹 앱이 있을 수 있습니다.

여기서, "이름" 열은 사용자의 iPhone 또는 Mac에서 웹 앱의 이름입니다.

웹 앱 매니페스트의 id 키는 id "shop"로 만든 웹 앱이 상점을 위한 것이고 id "forums"로 만든 웹 앱은 커뮤니티를 위한 포럼을 위한 것임을 나타내는 데 사용할 수 있습니다.

이렇게 하면 사용자가 상점 및 포럼 웹 앱에 대해 다른 알림 기본 설정을 설정할 수 있습니다.

초점 모드는 이름과 ID가 정렬될 때 사용자의 장치에서 동기화됩니다.

사용자는 장치에서 주어진 사이트에 대한 웹 앱의 여러 인스턴스를 만들 수 있습니다.

이것은 업무와 개인 계정을 분리하는 데 유용할 수 있다.

사용자는 각 인스턴스에 대해 다른 이름을 선택할 수 있습니다.

이 예에서 "포럼"과 "포럼 - 작업".

이렇게 하면 사용자는 모든 장치에서 동기화되는 각 포럼 웹 앱에 대해 다른 알림 및 포커스 설정을 설정할 수 있습니다.

올해 WebKit에 추가한 몇 가지 API가 있으며 웹사이트를 만들 때 도움이 될 수 있습니다.

우리는 일시적이거나 끈적끈적한 사용자 활성화가 발생했을 때 웹사이트에 알려주는 사용자 활성화 API를 지원합니다.

이것은 알림을 보낼 수 있는 권한을 요청하는 것과 같이 사용자 활성화에 의존하는 기능을 호출해도 괜찮은지 결정하는 데 도움이 됩니다.

우리는 macOS 및 iPadOS용 Safari 16.4에서 업데이트되고 접두사가 없는 전체 화면 API를 배송했습니다.

우리는 또한 유형 및 각도 속성과 onChange 이벤트 핸들러를 포함하여 화면 방향 API에 대한 예비 지원을 추가했습니다.

자세한 내용은 webkit.org에서 "Safari 16.4의 WebKit 기능"을 확인하세요.

Mac의 웹 앱은 모든 웹사이트에서 즉시 작동합니다.

웹 앱 매니페스트를 사용하여 웹사이트가 Dock에 추가될 때의 동작을 사용자 정의할 수 있습니다.

웹 푸시 및 배지와 같은 웹 앱에 맞춤화된 기능을 구현할 수 있습니다.

Safari에서 웹사이트 개발 및 디버깅에 대한 자세한 내용은 WWDC23의 "Safari 개발자 기능 재발견"과 "웹 인스펙터의 새로운 기능"을 확인하세요.

봐줘서 고마워.

WWDC23을 즐기세요.

♪ ♪