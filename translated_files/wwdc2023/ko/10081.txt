10081

♪ 부드러운 기악 힙합 ♪

♪

안녕하세요, 제 이름은 유진이고, 저는 RealityKit 팀의 엔지니어입니다.

오늘, 공간 컴퓨팅 앱을 향상시키는 데 사용할 수 있는 RealityKit의 새로운 기능을 보여드리겠습니다.

2019년에 RealityKit을 출시한 이후로, 우리는 앱이 풍부한 기능 세트를 사용하여 놀라운 경험을 만드는 것을 보았습니다.

이제 공간 컴퓨팅은 포털, 입자 이미미터, RealityView 첨부 파일 등과 같은 RealityKit에 더 많은 기능을 추가합니다.

"RealityKit으로 공간 경험 구축"이라는 제목의 세션에서 우리는 RealityKit의 기본 빌딩 블록에 대해 배웠습니다: 컨테이너 객체인 엔티티; 엔티티에 대한 특정 동작을 정의하는 구성 요소; 그리고 기능을 추가하기 위해 엔티티와 구성 요소 모두에서 작동하는 시스템.

우리는 SwiftUI와 RealityKit 사이의 다리 역할을 하는 RealityView API를 다루었습니다.

우리는 또한 RealityKit 장면에 상호 작용, 애니메이션 및 공간 오디오를 추가하는 방법을 보여주었습니다.

아직 보지 않았다면, 그 세션을 확인하는 것을 강력히 추천합니다.

이 세션에서, 우리는 당신의 앱을 더욱 매력적이고 몰입감 있게 만드는 데 도움이 될 RealityKit의 새로운 기능을 다룰 것입니다.

먼저, 우리는 RealityView의 첨부 파일을 사용하여 SwiftUI 뷰를 RealityKit 콘텐츠에 삽입하는 방법을 배울 것입니다.

다음으로, 우리는 RealityKit 장면 내에서 비디오 재생을 추가하는 방법을 살펴볼 것입니다.

그런 다음 우리는 포털을 사용하여 대체 세계로 가는 창을 여는 방법을 배울 것이다.

우리는 시각 효과로 장면을 향상시키기 위해 Particle Emitters API를 사용하는 방법을 살펴볼 것입니다.

마지막으로, 우리는 RealityKit의 앵커를 사용하여 벽과 같은 실제 위치에 3D 콘텐츠를 연결하는 방법을 배울 것입니다.

RealityView 첨부 파일을 시작합시다.

첨부 파일은 SwiftUI 콘텐츠를 RealityKit 장면에 삽입하는 유용한 방법입니다.

이 예제 앱에서, 저는 지구와 달의 모델 아래에 텍스트 라벨을 붙이기 위해 첨부 파일을 사용했습니다.

나는 또한 달이 우리 바다의 조수에 어떤 영향을 미치는지 설명하는 견해를 첨부했다.

이것을 코드로 만드는 방법을 봅시다.

내 앱 내에서, 나는 RealityView를 사용하여 지구 모델을 렌더링하고 있다.

RealityView는 RealityKit 엔티티를 추가할 수 있는 뷰입니다.

렌더링, 애니메이션 및 시뮬레이션을 위해 엔티티를 RealityView에 추가해야 합니다.

여기서 우리는 단순히 지구를 위한 엔티티를 로드하고 RealityView의 콘텐츠에 추가합니다.

이제 첨부 파일을 사용하도록 RealityView를 변경해 봅시다.

첨부 파일은 RealityKit 콘텐츠와 관련하여 특정 위치에 배치할 수 있는 보기입니다.

첨부 파일을 설정하는 데는 두 부분이 있다.

먼저, RealityView의 폐쇄에 추가된 매개 변수가 있습니다.

둘째, RealityView에 추가된 첨부 파일 뷰 빌더가 있습니다.

첨부 파일 뷰 빌더를 먼저 다루자.

여기서 RealityKit 콘텐츠에 추가하고 싶은 SwiftUI 뷰를 제공할 수 있습니다.

이 예시에서, 나는 지구에 라벨을 붙이기 위해 텍스트 보기를 추가했다.

우리는 또한 뷰에 태그 수정자를 추가하여 나중에 우리의 뷰가 엔티티로 클로저로 전달될 때 식별할 수 있도록 할 것입니다.

이 태그는 해시 가능한 값이 될 수 있다.

여기서 나는 문자열 earth_label을 사용했다.

RealityView의 종료에서, 첨부 파일 매개 변수에는 현재 엔티티로 표시되는 뷰가 포함되어 있습니다.

엔티티 형태로 보기를 얻기 위해, 우리는 첨부 파일에서 엔티티(for:)를 호출하고 뷰 빌더인 earth_label에서 제공한 것과 동일한 태그를 전달합니다.

우리가 얻는 결과는 다른 엔티티와 마찬가지로 RealityKit 콘텐츠에 추가할 수 있는 보기 첨부 엔티티입니다.

라벨이 지구 아래에 나타나게 하기 위해, 우리는 첨부 파일을 지구 실체의 자녀로 추가하고 약간 아래에 배치할 것입니다.

우리는 이제 각각 다른 태그를 사용하여 추가하고 싶은 다른 모든 첨부 파일에 대해 이 과정을 반복할 수 있습니다.

Xcode에서 살펴봅시다.

내 샘플 앱에서, 나는 RealityView에 세 개의 첨부 파일을 추가할 것이다.

먼저, 나는 지구 아래에 라벨을 추가할 것이다.

나도 달을 위해 똑같이 할 거야.

마지막으로, 나는 조수에서 달의 궤도의 역할을 설명하는 짧은 단락을 추가할 것이다.

나는 SwiftUI에서 glassBackgroundEffect를 사용하여 이것을 스타일링했다.

RealityView를 닫을 때, 나는 내 콘텐츠에 해당 엔티티를 추가할 것이다.

먼저, 나는 지구 아래에 지구 부착을 추가할 것이다.

나도 달을 위해 똑같이 할 거야.

마지막으로, 나는 내 컨테이너 엔티티의 왼쪽에 조수 설명자를 놓을 것이다.

나는 내 앱을 만들고 실행할 것이고, 내가 만든 첨부 파일이 내 모델 옆에 표시되는 것을 보게 될 것이다.

첨부 파일에 대한 데이터 흐름을 요약해 봅시다.

첨부 파일은 RealityView의 첨부 파일 보기 빌더에서 시작됩니다.

여기서, 우리는 RealityKit 장면에 추가하고 싶은 SwiftUI 뷰를 제공할 수 있습니다.

RealityView를 닫을 때, 우리는 첨부 파일을 엔티티로 다시 가져와서 장면에 추가할 수 있습니다.

우리는 또한 업데이트 폐쇄 내부의 엔티티를 업데이트할 수 있습니다.

이 폐쇄는 SwiftUI 뷰 상태가 변경될 때 호출됩니다.

이것을 사용하여 RealityView에서 동적으로 변화하는 콘텐츠에 대응할 수 있습니다.

첨부 파일의 더 자세한 사용법은 "Xcode에서 Reality Composer Pro 콘텐츠 작업" 세션을 확인하세요.

RealityView 첨부 파일은 다른 UI 요소의 텍스트 콘텐츠를 장면에 추가하는 유용한 방법입니다.

또한, 우리는 더 매력적으로 만들기 위해 앱에 비디오를 추가할 수도 있습니다.

이렇게 하려면, VideoPlayerComponent를 사용합시다.

비디오 플레이어 구성 요소는 3D 장면 내부에 비디오 콘텐츠를 삽입하는 데 사용되는 RealityKit의 새로운 구성 요소 유형입니다.

상기시켜 드리자면, 구성 요소는 엔티티에 첨부할 수 있는 특정 동작을 정의합니다.

VideoPlayerComponent를 사용하여 비디오를 재생하려면, 먼저 리소스 번들에서 비디오 파일을 로드합니다.

그런 다음 우리는 그것을 사용하여 AVPlayer 인스턴스를 만들 것입니다.

그것으로, 우리는 이제 VideoPlayerComponent를 만들 수 있습니다.

VideoPlayerComponent를 엔티티에 연결하면 비디오의 종횡비와 일치하는 직사각형 메쉬가 자동으로 생성됩니다.

이 동작은 SwiftUI의 VideoPlayer와 Core Animation의 AVPlayerLayer와 같은 기존 비디오 플레이어 API와 유사합니다.

그러나 RealityKit은 3D 프레임워크이기 때문에 비디오는 3D 공간에서 이동하고 배치할 수 있도록 메쉬가 있는 엔티티로 표시됩니다.

AV Foundation에서 지원하는 모든 비디오 포맷은 MV-HEVC를 사용하는 2D 비디오 포맷과 3D 비디오를 포함하여 VideoPlayerComponent와 함께 작동합니다.

마지막으로, VideoPlayerComponent는 AVPlayer를 통해 제공되는 캡션을 자동으로 표시합니다.

3D 비디오를 포함한 자신만의 비디오 콘텐츠를 만드는 방법에 대해 자세히 알아보려면, "공간 경험을 위한 비디오 콘텐츠 전달"이라는 제목의 세션을 확인하세요.

내 RealityKit 장면에 비디오를 추가하려면, 먼저 내 비디오 자산의 URL을 사용하여 AVPlayerItem을 만들 것입니다.

그러면 우리는 AVPlayer를 만들 것이다.

엔티티에서, 우리는 방금 만든 AVPlayer로 초기화된 VideoPlayerComponent를 추가할 것입니다.

VideoPlayerComponent는 내 비디오의 종횡비에 따라 크기의 메쉬를 자동으로 생성합니다.

RealityKit은 실제 장치에서 작동하기 때문에, 기본적으로 비디오의 높이는 1미터가 될 것이다.

비디오를 다른 크기로 만들기 위해, 우리는 엔티티를 확장할 수 있다.

제 경우, 저는 비디오의 높이가 40센티미터가 되기를 바랍니다. 그래서 우리는 엔티티 스케일에 0.4를 곱할 것입니다.

마지막으로, 우리는 비디오를 재생할 준비가 되었습니다.

우리는 현재 항목을 AVPlayerItem으로 설정한 다음, AVPlayer에서 재생을 호출할 것입니다.

이 코드로 앱을 재구축하고 실행합시다.

우리 앱에 더 알아보기 버튼을 추가했는데, 이는 우리 장면에 비디오 엔티티를 추가할 것이다.

버튼을 클릭하면 불투명도 구성 요소와 fromToByAnimation을 사용하여 비디오가 페이드됩니다.

우리의 비디오 콘텐츠를 위해, 나는 지구의 떠오르는 조수에서 달의 중력의 역할을 설명하는 짧은 클립을 준비했다.

한 번 보자.

달은 우리 행성을 공전한다.

그것의 중력은 우리 바다에 강력한 힘을 발휘하여 달의 구체를 향해 약간 부풀어 오르게 한다. < VideoPlayerComponent는 캡션에 대한 시스템 차원의 선호도를 존중합니다.

접근성 섹션 아래의 설정 앱에서 그것들을 켜 봅시다.

그래서, 하루에 두 번, 끝없는 주기에서, 지구와 달의 끊임없는 상호 작용에 의해 조수가 오르락내린다. < VideoPlayerComponent는 또한 패스스루 색조를 지원합니다.

이 기능이 활성화되면, 패스스루 콘텐츠는 비디오의 색상과 일치하도록 조정됩니다.

이것은 이 플랫폼의 TV 앱 내에서 영화와 TV 프로그램을 볼 때 사용되는 것과 동일한 치료법입니다.

패스스루 틴팅을 사용하려면, isPassthroughTintingEnabled 속성을 true로 설정할 수 있습니다.

또한 VideoPlayerEvents를 구독하여 콘텐츠 유형, 보기 모드 및 비디오 크기와 같은 VideoPlayerComponent의 속성이 변경될 때 알림을 받을 수 있습니다.

이벤트를 구독하려면, RealityViews 콘텐츠의 구독 기능을 호출하고 이벤트 유형과 엔티티를 지정할 수 있습니다.

이벤트 핸들러 폐쇄 내부의 이벤트에 응답할 수 있습니다.

VideoPlayerComponent는 우리의 3D 장면에 훌륭한 추가이다.

지금까지, 우리의 앱은 지구와 달의 모델을 특징으로 하지만, 나는 우주 공간을 배경으로 그것을 제시하고 싶다.

나는 우리가 우주에서 달의 궤도를 드러내는 방에서 마법의 창을 만들 수 있다면 꽤 멋질 것이라고 생각한다.

우리는 우리의 장면을 렌더링하기 위해 포털을 사용하여 이것을 할 수 있다.

포털은 메쉬 표면을 통해 볼 수 있는 다른 세계로의 개방을 만든다.

이 세상 내부의 실체는 별도의 조명을 사용하고 포털의 기하학에 의해 가려진다.

이 예제는 RealityKit의 세 가지 뚜렷한 기능을 보여줍니다.

첫째, 포털은 우주 공간에서 장면을 렌더링하는 데 사용된다.

그런 다음 입자 효과는 포털의 테두리를 장식하는 데 사용됩니다.

마지막으로, 앵커링은 우리 방의 벽에 포털을 배치하는 데 사용된다.

포털부터 시작합시다.

포털을 만들기 위해, 우리는 먼저 세상을 만들어야 한다.

이를 위해, 우리는 월드 구성 요소가 있는 엔티티를 장면에 추가합니다.

이 구성 요소는 엔티티 트리를 다른 세계에 속하는 것으로 표시한다.

세계의 실체는 포털 표면을 통해서만 볼 수 있다.

우리 세계에 콘텐츠를 추가하기 위해, 우리는 엔티티를 세계 엔티티의 자녀로 첨부할 수 있다.

여기서, 우리는 하늘, 지구, 달의 모델과 세계 내부의 조명을 정의하기 위한 ImageBasedLight를 추가할 것입니다.

세계 실체의 모든 후손들은 이 세상 안에서만 나타날 것이다.

다음으로, 우리는 포털을 만들 것이다.

이를 위해, 우리는 모델 구성 요소가 있는 엔티티를 추가합니다.

모델 구성 요소는 메쉬와 재료의 두 가지 특성을 포함한다.

메쉬의 경우, 우리는 포털의 표면 역할을 하는 원형 평면을 생성할 것이다.

자료의 경우, 우리는 메쉬가 포털로 나타나도록 하기 위해 새로운 포털 자료를 할당할 것입니다.

포털을 우리의 세계와 연결하기 위해, 우리는 엔티티에 포털 구성 요소를 추가하고 대상 속성을 세계 엔티티에 설정할 것입니다.

이것은 포털이 우리 세계 내부의 내용을 드러내는 마스크 역할을 할 수 있게 해준다.

이것이 코드에서 어떻게 보이는지 봅시다.

RealityView에서 makeWorld와 makePortal을 구현할 두 가지 기능에 대한 호출을 추가했습니다.

makeWorld 기능에서, 우리는 세계 엔티티를 만들고 포털의 콘텐츠로 채울 것입니다.

makePortal 기능에서, 우리는 포털을 만들고 우리가 방금 만든 세계에 연결할 것입니다.

마지막으로, 우리는 이 두 엔티티를 RealityView의 콘텐츠에 추가할 것입니다.

이 기능들 각각에 대해 자세히 알아봅시다.

makeWorld 기능 내에서, 우리는 엔티티를 만들고 WorldComponent를 첨부합니다.

다음으로, 우리는 ImageBasedLight로 사용할 EnvironmentResource를 로드합니다.

우리는 이것을 ImageBasedLight 구성 요소와 ImageBasedLight ReceiverComponent를 사용하여 세계에 적용할 것입니다.

RealityKit의 이미지 기반 조명에 대해 자세히 알아보려면, "공간 컴퓨팅을 위한 렌더링 탐색" 세션을 확인하세요.

다음으로, 우리는 우리의 내용으로 세상을 채울 것이다.

나는 지구, 달, 하늘을 위한 모델을 로드하고, 그것들을 어렸을 때 세상에 추가할 것이다.

이 단체들은 세계의 아이들이기 때문에, 그들은 포털을 통해서만 볼 수 있을 것이다.

makePortal 기능으로 넘어갑시다.

포털을 만들려면, 우리는 먼저 메쉬가 필요하다.

우리는 엔티티를 위한 모델 구성 요소를 만들어 하나를 만들 것이다.

포털을 원형으로 만들기 위해, 우리는 크기가 절반인 동일한 크기와 모서리 반경을 가진 평면을 생성할 것입니다.

나는 또한 ModelComponent의 자료로 사용할 PortalMaterial을 만들 것이다.

마지막으로, 우리는 또한 우리가 이전에 만든 세계 엔티티로 초기화된 포털 구성 요소를 첨부할 것입니다.

이것은 우리가 메시를 통해 세계의 콘텐츠를 볼 수 있도록 포털을 세계와 연결한다.

다음으로, 포탈의 테두리를 입자 효과로 장식합시다.

이를 위해, 우리는 RealityKit에서 제공되는 ParticleEmitterComponent를 사용할 수 있습니다.

입자 방출기를 사용하여 RealityKit에서 불꽃, 눈 및 충격 효과와 같은 다양한 시각 효과를 나타낼 수 있습니다.

파티클 이미터는 Reality Composer Pro를 통해 또는 ParticleEmitterComponent를 통해 RealityKit을 사용하여 런타임에 만들 수 있습니다. 여기서 저는 Reality Composer Pro를 사용하여 파티클 자산을 준비했습니다.

우리는 이것을 사용하여 이전에 만든 포털을 장식할 수 있습니다.

이것을 장면에 로드하고 RealityKit을 사용하여 런타임에 입자 속성을 수정합시다.

시간이 지남에 따라 입자를 업데이트하기 위해, 나는 ParticleTransitionSystem이라는 사용자 지정 시스템을 만들었다.

여기서, 우리는 EntityQuery를 사용하여 ParticleEmitterComponent가 있는 엔티티를 찾을 것입니다.

시스템 업데이트 내부에서, 우리는 쿼리를 수행하고 결과 엔티티를 반복할 것입니다.

각 엔티티에서, 우리는 다음에 구현할 함수 updateParticles를 호출할 것이다.

RealityKit의 사용자 지정 시스템에 대해 자세히 알아보려면, "RealityKit으로 공간 경험 구축" 세션을 확인하세요.

updateParticles 기능 내에서, 우리는 먼저 엔티티에서 ParticleEmitterComponent를 얻을 것이다.

ParticleEmitterComponent에는 입자 모양과 행동의 다양한 측면을 제어하는 많은 속성이 포함되어 있습니다.

여기서, 우리는 엔티티의 규모에 따라 lifeSpan과 vortexStrength 속성을 설정하여 엔티티의 크기가 커짐에 따라 입자가 포털 주변에서 더 빨리 회전하기 시작할 것입니다.

마지막으로, 구성 요소를 엔티티에 다시 할당하여 변경 사항을 적용합시다.

그리고 우리는 준비됐어.

입자 이미터의 모든 다른 특성에 대해 알아보려면, "Reality Composer Pro를 만나세요" 세션을 확인하세요.

우리는 앱에 마지막 터치를 추가하는 것을 거의 마쳤다.

끝내기 위해, 우리 방의 벽에 포털을 부착합시다.

이를 위해, 우리는 RealityKit에서 앵커를 사용할 수 있습니다.

앵커는 머리나 손과 관련된 벽, 바닥 또는 위치에 콘텐츠를 배치하는 데 사용할 수 있습니다.

RealityKit의 앵커는 .continuous와 .once의 두 가지 추적 모드를 지원합니다.

연속 추적 모드를 사용할 때, 앵커 엔티티는 머리가 움직일 때와 같이 시간이 지남에 따라 앵커와 함께 움직입니다.

한 번 추적 모드를 사용할 때, 앵커 엔티티는 한 번 배치된 후 움직이지 않습니다.

엔티티가 고정될 때 들으려면, RealityKit에서 AnchoredStateChanged 이벤트를 구독할 수 있습니다.

부모 엔티티에 앵커를 사용하여 3D 콘텐츠를 배치할 수 있지만, 앵커 자체의 명시적인 변환은 사용자 개인 정보를 보호하기 위해 앱에서 볼 수 없습니다.

앵커 변환에 액세스하려면, ARKit을 사용해야 합니다.

이에 대한 자세한 내용은 "공간 컴퓨팅을 위한 ARKit을 만나보세요" 세션을 확인하세요.

앱에서 앵커를 사용하려면, 먼저 몰입형 공간을 사용하도록 앱을 수정해야 합니다.

몰입형 공간은 앱이 창 밖에서 콘텐츠를 렌더링할 수 있는 특별한 유형의 컨테이너입니다.

이를 위해, 우리는 SwiftUI 장면에 ImmersiveSpace를 추가할 수 있습니다.

우리는 또한 .immersionStyle 수정자를 추가하고 혼합으로 설정할 것입니다.

ImmersiveSpace 내부에서, 우리는 RealityView를 사용하여 고정될 콘텐츠를 배치할 수 있습니다.

몰입형 공간에 대해 자세히 알아보려면, "SwiftUI로 창 너머로 이동" 세션을 확인하세요.

RealityView 내부에서는 앵커 엔티티를 포털의 컨테이너로 사용할 수 있습니다.

우리는 콘텐츠를 고정하고 싶은 표면 유형의 사양으로 앵커 엔티티를 초기화합니다.

우리의 경우, 우리는 최소 크기가 1미터 x 1미터인 수직 벽을 찾고 있습니다.

사양과 일치하는 앵커가 발견되면, RealityKit은 자동으로 콘텐츠를 벽에 부착합니다.

그리고 우리는 마침내 끝났어.

우리가 앱을 실행할 때, 우리는 벽에 부착된 포털을 얻는다.

포털과 입자에서 앵커와 첨부 파일에 이르기까지, RealityKit은 몰입형 경험을 구축할 수 있는 많은 기능을 제공합니다.

이 세션에서 우리가 검토한 모든 것을 요약해 봅시다.

RealityView의 첨부 파일을 사용하면 엔티티 계층 구조 내에 SwiftUI 콘텐츠를 포함할 수 있으므로 3D 요소와 함께 UI 요소를 배치할 수 있습니다.

VideoPlayerComponent, 포털 및 입자 효과를 사용하면 RealityKit에서 장면을 향상시키기 위해 동적 요소를 추가할 수 있습니다.

마지막으로, 앵커를 사용하면 바닥이나 벽과 같은 실제 표면에 3D 콘텐츠를 부착할 수 있습니다.

"RealityKit으로 공간 경험 구축" 세션은 엔티티, 구성 요소 및 RealityView와 같은 주요 개념을 살펴갑니다.

"Xcode에서 Reality Composer Pro 콘텐츠 작업" 세션은 RealityKit과 함께 Reality Composer Pro를 사용하여 몰입형 앱을 구축하는 과정을 안내합니다.

RealityKit의 이러한 새로운 기능을 사용하여 당신이 만들 모든 것을 빨리 보고 싶습니다.

봐줘서 고마워.

♪