10180

♪ ♪

시라즈: 안녕하세요, 여러분.

제 이름은 시라즈이고, 저는 CoreLocation의 엔지니어입니다.

위치를 얻기 위한 새로운 CoreLocation API에 대해 이야기할 "Discover Streamlined Location Updates"에 참여해 주셔서 감사합니다.

시작하자.

지금 위치 업데이트를 받는 것은 이 한 줄의 코드를 작성하는 것만큼 간단합니다.

정말 멋지다! 그렇지 않아?

이것은 우리의 새로운 스위프트 네이티브 API로, 위치 업데이트를 받기 위한 현대적인 신속한 동시성을 즉시 지원합니다.

그럼 깊은 다이빙을 해보자.

우리는 새로운 CLLocationUpdate API의 구조를 자세히 설명하고, 이 API를 사용하여 위치 업데이트를 받는 방법을 설명함으로써 이야기를 시작할 것입니다.

그런 다음 백그라운드에서 위치 업데이트를 받기 위해 해야 할 일을 검토하겠습니다.

업데이트가 자동으로 일시 중지되고 재개되는 방법.

마지막으로, 이 API를 통해 업데이트되는 앱의 수명 주기를 설명하여 마무리하겠습니다.

CLocationUpdate API의 구조를 살펴봅시다.

우리는 Updates라는 AsyncSequence를 반환하는 정적 함수 liveUpdates가 있는 새로운 클래스 CLLocationUpdate를 소개합니다.

For/try/await를 사용하여 직접 반복할 수 있으며, CLLocationUpdate 유형의 요소를 생성하며, CLLocation 유형의 위치와 자동, 일시 정지 및 재개를 관리하기 위한 부울 플래그 isStationary를 포함합니다.

liveUpdates는 또한 LiveConfiguration 열거형 유형의 선택적 인수를 사용합니다.

이제, 코드 연습을 하고 이 새로운 API를 사용하여 어떻게 업데이트를 받을 수 있는지 봅시다.

포그라운드에서 위치 업데이트를 시작하는 기본 앱을 만들어 봅시다.

첫 번째 가져오기 CoreLocation.

그런 다음 CLLocationUpdate 클래스에서 제공하는 정적 팩토리 함수 liveUpdates를 호출하여 Updates AsyncSequence를 가져올 것입니다.

클로저에서 CLLocationUpdate를 얻기 위해 for/try/await를 사용하여 직접 반복할 수 있습니다.

그리고 나서 위치 속성에 접근하여 위치를 얻으세요.

좋아, 그래서 이 시점에서 우리의 업데이트가 시작됐어.

우리가 그걸 멈춰야 한다면 어때?

멈추는 것은 for 루프에서 끊는 것만큼 간단하다.

isStationary를 기억하나요?

이 isStationary가 사실로 보고되면 for 루프에서 벗어나 자동으로 업데이트를 중지합시다.

명시적인 시작 및 중지 메시지는 더 이상 필요하지 않습니다.

CLLocationUpdate API에서 반환된 AsyncSequence를 확인해 봅시다.

요소를 찾고, 선택하고, 제외하는 것과 같은 AsyncSequence를 통해 할 수 있는 모든 강력한 것들도 이 업데이트 시퀀스에서 수행할 수 있습니다.

이 예에서는 AsyncSequence에서 첫 번째 필터를 직접 사용하는 방법을 안내해 드리겠습니다.

후드 아래에서 업데이트가 시작되고 각 요소의 위치가 속도를 확인합니다.

속도가 200 이상인 업데이트가 발견되자마자, 첫 번째 요소가 반환되어 작업이 완료됩니다.

첫 번째 경기가 발견되면 업데이트가 자동으로 중단됩니다.

하지만 여기서 속도를 알아챘어?

이것은 초당 200미터이므로, 대략 시속 약 447마일이다.

그거 너무 빠르지, 그렇지?

따라서 일치 항목이 발견될 때까지 실행이 중단되기 때문에 이러한 필터를 사용하는 동안 주의해야 하며, horizontalAccuracy를 기반으로 위치를 필터링하기 위해 이것을 사용하려고 하면 더욱 주의해야 합니다.

좋아요, 이것은 liveUpdates에 대한 구성을 지정하지 않는 업데이트를 받기 위한 이전 슬라이드의 샘플 코드입니다.

그래서 그들은 기본 설정으로 자동으로 구성됩니다.

하지만 liveUpdates API는 명시적인 구성을 취할 수 있다.

이 구성은 우리가 이 API의 일부로 도입하는 새로운 열거형 유형이다.

이 열거형 유형의 구성원과 그 용도가 무엇인지 봅시다.

LiveConfiguration 열거형은 앱이 업데이트를 시작하기 위해 선택할 수 있는 미리 구운 구성 모음입니다.

그것은 기본, 자동차 내비게이션, 기타 내비게이션, 피트니스 및 에어본을 회원으로 가지고 있다.

앱이 이미 기존 위치 업데이트 API와 함께 특정 CLActivityType을 사용하고 있다면, 새로운 API를 채택하는 동안 동일한 위치 경험을 갖도록 해당 LiveConfiguration 멤버를 선택할 수 있습니다.

하지만 특정 활동 유형이 필요하지 않다면, 기본 구성으로 업데이트를 시작하거나 구성을 전혀 지정하지 않을 수 있습니다.

그래서 이 "업데이트" AsyncSequence는 무엇을 산출하나요?

반복하면 CLLocationUpdate 유형의 객체를 제공합니다.

그것은 CLLocation 유형의 선택적 위치를 포함한다.

사용 가능한 위치가 없다면, 우리는 위치가 0으로 표시된 업데이트를 제공합니다.

또한 위치 업데이트의 자동 일시 중지/재시 등을 관리하는 부울 속성 isStationary가 포함되어 있습니다.

좋아, 그래서 우리는 전경에서 업데이트를 받는 방법을 다뤘어.

이제 앱이 백그라운드에서 실행될 때 업데이트를 받는 방법에 대해 이야기해 봅시다.

LiveActivity는 배경 위치 업데이트를 활성화하는 가장 좋은 방법입니다.

LiveActivity가 활성화되어 있는 한, 앱은 다른 추가 설정 없이 업데이트를 받을 수 있습니다.

하지만 당신의 앱에 아직 LiveActivity가 없다면 걱정하지 마세요.

이것은 새로운 API를 채택하기 위한 차단기가 되지 않을 것이다.

대신 CLBackgroundActivitySession을 사용할 수 있습니다.

그것이 어떻게 작동하는지 살펴봅시다.

여러분 중 많은 사람들이 사용 중으로 승인된 앱이 백그라운드에서 업데이트를 받을 때 표시되는 이 파란색 배경 위치 표시기에 이미 익숙할 것입니다.

CLBackgroundActivitySession은 동일한 지표를 사용하여 앱에 백그라운드 위치 기능을 제공합니다.

그것은 백그라운드에서 사용되는 위치 서비스에 대한 사용자의 가시성을 유지함으로써 그렇게 한다.

그리고 가시성이 유지되기 때문에, 앱을 효과적으로 유지하여 백그라운드에서도 위치에 액세스할 수 있도록 합니다.

CLBackgroundActivitySession은 앱 전체의 인증을 지원합니다.

따라서 앱이 백그라운드에서 업데이트를 받을 수 있을 뿐만 아니라 CLMonitor를 사용하여 이벤트를 모니터링할 수 있습니다.

BackgroundActivitySession은 시작되는 업데이트에 의존하지 않습니다.

세션을 만들기만 하면 앱이 백그라운드에 있을 때 표시기가 표시되며, 필요에 따라 업데이트와 이벤트를 받을 수 있습니다.

CLBackgroundActivitySession을 사용하려면, 그것을 인스턴스화하고 유지해야 합니다.

객체 할당 해제는 잠재적으로 백그라운드 위치에 대한 앱의 액세스를 종료할 수 있는 세션을 자동으로 무효화하기 때문에 보류 부분에 대해 주의하십시오.

BackgroundActivitySession이 효과적으로 작동하려면 앱이 UIBackgroundModes 배열에 위치가 있어야 합니다.

뛰어난 세션이 없다면, 전경에서 새 세션을 시작해야 하지만, 백그라운드에서 기존 세션만 다시 참여할 수 있습니다.

빠른 코드 워크를 하고 backgroundActivitySession을 사용하는 방법을 봅시다.

이것은 이전 섹션의 동일한 "업데이트를 받는 방법" 코드 슬라이드입니다.

업데이트를 시작하기 전에, 새 세션을 시작하기 위해 CLBackgroundActivitySession 객체를 인스턴스화해야 합니다.

참고로, 우리는 세션을 로컬 변수가 아닌 속성인 self.backgroundActivity에 할당하고 있습니다.

그리고 이것은 우리가 지역 변수를 사용하면 범위를 벗어나면 보유하고 있는 객체가 할당 해제되어 세션을 무효화하고 잠재적으로 앱의 위치에 대한 액세스를 종료할 수 있기 때문에 중요합니다.

그런 다음 세션을 끝내고 싶을 때, 무효화 메시지를 보내거나 객체를 파괴함으로써 그렇게 할 수 있습니다.

그래서 그것이 당신의 앱이 LiveActivity 또는 CLBackgroundActivitySession을 통해 백그라운드에서 업데이트를 받을 수 있는 방법입니다.

이제 이 새로운 API가 업데이트를 자동으로 일시 중지하고 재개하여 배터리 수명에 어떻게 기여하는지 봅시다.

사용자가 이동하는 동안 앱이 업데이트를 받고 있다고 가정해 봅시다.

하지만 하루에 여러 번, 그 장치는 정지될 것이다.

예를 들어, 사용자가 사무실에 도착하면, 그들은 기기를 책상 위에 둘 수 있다.

그러한 상황에서 우리는 당신의 앱에 같은 위치를 반복해서 제공할 것입니다.

대신, 우리는 업데이트를 일시 중지함으로써 전력 효율을 가질 수 있다.

이것은 처리할 중복 위치를 제공하지 않음으로써 앱도 로드됩니다.

따라서 장치가 충분한 시간 동안 정지 상태에 있으면, CLLocationUpdate API는 이것을 인식하고 자동 일시 정지를 트리거합니다.

일시 정지가 트리거되면, 우리는 nil이 아닌 위치와 True로 표시된 isStationary 플래그로 업데이트를 보낼 것입니다.

이것은 사용자가 위치를 사용할 수 없게 되는 대신 이동을 중단했다는 것을 아는 방법입니다.

나중에, 장치가 비정지 상태가 되면, 사용자 상호 작용 없이 업데이트가 자동으로 재개됩니다.

이 재개 업데이트를 통해, 우리는 False로 표시된 isStationary를 보내 앱에 대한 업데이트 전달을 계속할 것입니다.

따라서 앱이 백그라운드에 있는 동안 업데이트를 자동으로 일시 중지하고 재개하는 것은 수명 주기에 영향을 미칩니다.

백그라운드에서 실행되는 동안 앱이 겪게 될 다양한 수명 주기 단계를 살펴보고, 백그라운드 업데이트의 연속성을 유지하기 위해 어떤 조치를 취해야 하는지 살펴보겠습니다.

포그라운드에서 실행하고 업데이트를 받는 동안 앱은 포그라운드 실행에서 백그라운드 실행으로 전환될 수 있으며 그 반대의 경우도 마찬가지입니다.

하지만 이제 이 새로운 API를 사용하면 때때로 앱이 백그라운드 실행 상태에서 일시 중지된 상태로 전환할 수 있습니다.

이것은 제공할 업데이트가 없을 때 일어날 것이다.

예를 들어, 자동 일시 정지로 인해, 고정 장치로 인해, 또는 위치 서비스가 위치 수정을 계산할 수 없기 때문입니다.

하지만 걱정하지 마!

CLLocationUpdate는 당신의 앱을 정지된 상태로 두지 않을 것입니다.

대신, 자동 이력서가 시작되거나 위치를 사용할 수 있기 때문에 업데이트를 사용할 수 있게 되자마자, 우리는 당신의 앱을 중단 해제하여 백그라운드 실행 상태로 다시 전환할 것입니다.

앱이 일시 중지된 상태에서 재개되면, 백그라운드에서 업데이트를 계속하기 위한 조치가 필요하지 않습니다.

정지된 것은 유일한 주가 아니다.

앱이 종료된 상태로 전환할 수 있습니다.

그리고 이 전환은 여러 가지 방법으로 일어날 수 있다.

그것들을 살펴봅시다.

첫째, 앱 충돌로 인해 백그라운드에서 직접 실행하거나, 리소스가 제한될 때 사용자 종료 또는 시스템 종료.

둘째, 앱은 사용자 폐쇄 또는 리소스 제약으로 인해 정지된 상태에서도 종료된 상태로 전환할 수 있습니다.

하지만 우리는 너에게 좋은 소식이 있어.

우리의 API는 종료되고 전혀 실행되지 않더라도 대부분의 경우 앱을 복구할 수 있습니다.

백그라운드에서 실행하여 위치 업데이트를 사용할 수 있는 즉시 앱을 복구할 것이며, 이는 앱을 종료에서 백그라운드 실행으로 전환할 것입니다. 그러나 실행을 받은 후, 백그라운드 위치 세션이 계속될 수 있도록 몇 가지 단계를 수행해야 합니다.

liveUpdates를 호출하여 업데이트를 다시 시작해야 하며, 앱이 이전에 백그라운드 활동 세션을 사용했다면 CLBackgroundActivitySession을 다시 만들어야 합니다.

제가 언급한 것을 기억하세요, 당신은 백그라운드에서 기존 CLBackgroundActivitySession에만 다시 참여할 수 있지만, 새로운 것을 시작할 수는 없나요?

여기 그것에 대한 더 많은 설명이 있습니다.

방금 재현한 배경 활동 세션 개체?

그것은 새로운 세션의 시작이 아니다.

당신은 방금 새로운 세션 객체를 만들었습니다.

이제 앱이 종료되기 전에 이미 세션을 시작했기 때문에, 이 레크리에이션을 통해 앱이 백그라운드에서 기존 세션에 다시 참여할 수 있어 앱이 백그라운드 위치 업데이트를 계속할 수 있습니다.

좋아요, 그래서 우리는 백그라운드 앱 실행을 받은 후 라이브 업데이트와 백그라운드 활동 세션을 어떻게 다시 만들어야 하는지에 대해 논의했습니다.

레크리에이션과 관련하여, 당신이 조심해야 할 몇 가지 사항이 있습니다.

당신의 앱은 백그라운드 앱 실행을 받는 즉시 레크리에이션을 수행해야 합니다.

앱이 백그라운드 실행을 받을 때 실행될 어딘가에 이러한 객체의 재현을 배치하세요.

샘플 앱의 경우, 우리는 앱 실행이 완료되면 호출되는 UIApplicationDelegate의 didFinishLaunchingWithOptions에 레크리에이션을 배치했습니다.

알았어!

그래서 이것은 단순화된 채택과 향상된 배터리 성능을 갖춘 우리의 새로운 위치 업데이트 API입니다.

그것은 올해부터 모든 플랫폼에서 이용 가능할 것이다.

여러분 모두가 앱에서 CLLocationUpdate를 시도하고 피드백 어시스턴트를 통해 귀중한 피드백을 제공하는 것이 좋습니다.

또한 리소스 섹션에서 다운로드할 수 있는 이 새로운 API를 사용하는 방법을 보여주는 샘플 앱이 있습니다.

CLLocationUpdate의 Apple Developer 문서는 더 많은 API 세부 사항도 사용할 수 있습니다.

또한 올해 추가할 핵심 위치 모니터링 API를 다루는 "Meet Core Location Monitor" 세션을 보는 것이 좋습니다.

그것은 "수정화된 위치 업데이트 발견"에 대한 내 편이다.

봐줘서 고마워!

♪ ♪