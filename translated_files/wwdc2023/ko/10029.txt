10029

♪ ♪

캘빈: 안녕. 저는 watchOS 팀의 엔지니어인 Calvin Gaisford입니다.

이 코드와 함께하는 세션에서, 우리는 Apple Watch의 새로운 스마트 스택을 위한 위젯을 만들 것입니다.

AppIntent 구성을 사용하여 위젯을 만드는 전체 과정을 안내해 드리겠습니다.

그 과정에서, 우리는 최신 WidgetKit과 SwiftUI 업데이트를 사용할 것입니다.

우리는 코드와 함께 Backyard Birds 앱을 사용할 것입니다.

Backyard Birds는 방문하는 새들을 끌어들이는 뒷마당을 만들고 관리할 수 있는 앱입니다.

우리의 위젯은 뒷마당의 상태를 보여줄 것이다.

새가 방문한다면, 그것은 새를 보여주고 뒷마당의 상태도 포함할 것이다.

위젯은 스마트 스택에 관련 날짜를 제공하므로 가장 관련성이 있을 때 위젯의 우선 순위를 지정할 수 있습니다.

따라가고 싶다면, 이 세션과 관련된 샘플 코드를 다운로드하고 Backyard Birds Xcode 프로젝트를 열 수 있습니다.

우리는 이미 BackyardVisitorsWidget 파일을 포함한 일부 파일을 생성하는 프로젝트에 위젯 확장 프로그램을 추가했습니다.

우리는 이 파일을 업데이트하는 데 대부분의 시간을 할애할 것이다.

여기 우리가 다룰 것이 있습니다.

먼저, 우리는 위젯을 정의하는 위젯 구조를 살펴볼 것입니다.

우리는 또한 위젯 구성 의도에 대한 간략한 개요를 할 것입니다.

그런 다음, 위젯 뷰에 대한 데이터를 보유하기 위해 TimelineEntry 구조를 사용자 정의하고 타임라인을 구축할 것입니다.

타임라인에 미리보기를 활성화하는 데 필요한 데이터가 있으면, 위젯의 뷰를 구축할 것입니다.

우리의 견해가 구축된 후, 우리는 타임라인을 마무리하기 위해 돌아올 것이다.

마지막으로, 우리는 관련 의도 관리자를 살펴보고 watchOS 스마트 스택에서 위젯의 우선 순위를 지정해야 하는 날짜에 대한 의도를 설정할 것입니다.

코드의 위젯 구조를 보고 위젯 구성을 시작합시다.

위젯 구조는 위젯의 구성이 정의된 곳이다.

watchOS의 새로운 기능은 AppIntentConfigurations입니다.

우리는 위젯에서 AppIntentConfiguration을 사용할 것입니다.

우리가 WidgetExtension을 만들 때 구성 의도, 공급자 및 보기가 모두 삭제되었습니다.

우리는 각각을 살펴보고 뒷마당 새 위젯을 위해 그것들을 구현할 것이다.

이 위젯 정의는 좋아 보이므로, 다음으로 이동하여 WidgetConfigurationIntent를 살펴봅시다.

우리의 위젯은 두 가지 일을 할 수 있도록 앱 의도 구성을 사용하고 있습니다.

먼저, 우리의 위젯은 watchOS 위젯 갤러리에서 사전 구성된 위젯 세트를 제공할 수 있습니다.

Backyard Birds의 경우, 우리는 앱에서 각 마당에 대한 구성을 제공할 것입니다.

둘째, WidgetConfigurationIntent는 위젯이 가장 관련성이 높은 날짜를 지정하는 데 사용됩니다.

스마트 스택은 이 정보를 사용하여 스마트 스택에서 위젯의 우선 순위를 지정할 것입니다.

위젯의 구성 앱 의도를 살펴봅시다.

뒷마당 새들의 각 마당에는 고유한 ID가 있다.

저는 이미 backyardID라는 매개 변수를 추가했으므로, 이것은 뒷마당 ID로 식별된 각 야드에 대해 하나씩 위젯 인텐트 세트를 만드는 데 사용할 수 있습니다.

우리가 만들고 있는 위젯의 경우, 그것이 우리가 필요한 유일한 매개 변수이다.

앱 인텐트와 WidgetConfigurationIntent를 더 사용하는 방법에 대해 자세히 알아보려면, 앱 인텐트에 대한 이 세션을 확인하세요.

우리는 위젯 구조와 뒷마당 ID를 보유할 수 있는 WidgetConfigurationIntent를 정의했습니다.

위젯 타임라인으로 이동하여 TimelineEntry 구조를 살펴봅시다.

TimelineEntry 구조는 위젯 뷰가 특정 날짜에 렌더링해야 하는 모든 데이터를 보유합니다.

BackyardVisitorsWidget 파일로 돌아가서, 생성된 SimpleEntry 구조를 찾으세요.

이 파일이 생성되었을 때 날짜와 구성 속성이 추가되었습니다.

위젯 뷰에 필요한 추가 속성을 정의해야 합니다.

우리의 위젯은 이름, 음식, 물 상태와 함께 뒷마당의 상태를 보여줄 것이다.

만약 새가 방문한다면, 그것은 방문하는 새와 새의 이름을 보여줄 것이다.

새가 없다면, 얼마나 많은 새들이 마당을 방문했는지 보여줄 것이다.

마당에 대한 정보를 표시하기 위해, 우리는 주어진 시점에 뒷마당에 대한 모든 정보를 보유하고 있는 Backyard Birds 앱의 구조를 사용할 것입니다.

TimelineEntry에 미래의 날짜가 있을 수 있기 때문에 이것은 중요하다.

뒷마당 부동산을 타임라인 엔트리에 추가합시다.

이제, 우리가 방금 추가한 뒷마당 부동산을 기반으로 몇 가지 계산된 부동산을 추가해 봅시다.

먼저, 위젯 보기에서 새가 방문하는지 확인하고 표시할 수 있도록 새 속성을 추가해 봅시다.

이제 우리의 견해가 마당에 대한 더 많은 정보를 보여주기 위해 사용할 두 개의 속성을 더 추가해 봅시다.

물 기간과 음식 기간은 물과 음식이 얼마나 오래 지속될지 보여주기 위해 사용될 것이다.

이것들은 TimelineEntry의 날짜 속성에서 계산됩니다.

TimelineEntry는 또한 구현되면 watchOS 스마트 스택에 어떤 타임라인 항목이 가장 중요한지 알 수 있는 관련성이라는 속성을 가지고 있다.

TimelineEntry에 관련성 속성을 추가합시다.

내부에서, 뒷마당에 TimelineEntry 날짜에 대한 방문객이 있는지 확인해 봅시다.

방문하는 새가 있다면, 우리는 TimelineEntryRelevance 구조를 반환할 것입니다.

TimelineEntryRelevance 구조는 점수와 기간이라는 두 가지 매개 변수를 사용합니다.

점수는 같은 타임라인의 다른 항목에 대한 항목의 우선 순위를 정하는 데 사용됩니다.

우리는 방문자가 없는 항목보다 방문자가 있는 항목의 순위를 매기기 위해 점수를 10으로 설정할 것입니다.

이 값은 임의적이며 타임라인에서 항목의 순위를 매기는 데 필요한 값의 범위를 가질 수 있습니다.

기간은 스마트 스택에 이 관련 항목이 얼마나 유효한지 알려주는 데 사용됩니다.

우리는 방문자의 종료일까지 지속 시간을 설정했습니다.

방문자가 없다면, 0점의 관련성 구조를 반환합시다. 이것은 스마트 스택에 어떤 타임라인 항목이 가장 중요한지 알려줄 것입니다.

그 당시에 무슨 일이 일어나고 있는지에 따라, 우리의 위젯은 watchOS 스마트 스택에서 우선 순위가 높아질 수 있습니다.

우리의 타임라인 엔트리는 멋져 보이고 위젯 보기가 제대로 렌더링하는 데 필요한 모든 것을 갖추고 있습니다.

다음으로 넘어가서 TimelineProvider를 구축합시다.

TimelineProvider를 위해 완료해야 할 네 가지 기능이 있습니다: 자리 표시자, 스냅샷, 타임라인 및 권장 사항.

자리 표시자 기능은 위젯이 처음 표시되고 빠르게 돌아와야 할 때 사용됩니다.

우리가 뒷마당을 차지하기 위해 TimelineEntry를 업데이트했기 때문에, 우리는 하나를 공급해야 한다.

앱의 데이터 모델에서 임의의 뒷마당을 추가하여 그것을 해결합시다.

그거 좋네. 계속 진행하자.

스냅샷 기능은 위젯이 일시적인 상황에 있을 때 사용됩니다.

이 기능은 빨리 돌아와야 하므로, 가져오는 데 몇 초 이상 걸리지 않는 한 샘플 데이터를 사용하는 것은 괜찮습니다.

우리는 자리 표시자 기능에서 했던 것과 같은 일을 할 수 있고 임의의 마당을 통과할 수 있다.

좋아 보이지만, 우리는 더 잘할 수 있어.

스냅샷 함수는 이전에 추가한 backyardID 속성을 가진 구성 의도를 전달합니다.

우리의 데이터는 모두 로컬이므로, 무작위 뒷마당을 사용하는 대신 적절한 뒷마당을 빠르게 찾아보고 반환할 수 있습니다.

구성의 뒷마당 ID에서 구성된 뒷마당을 가져오자.

이제 뒷마당을 확인하고 방문자 이벤트를 받을 수 있는지 봅시다.

방문자 날짜로 구성된 항목을 반환하고, 방문자가 없는 경우, 현재 날짜로 구성된 마당을 반환할 것입니다.

이것은 구성된 뒷마당을 보여주기 때문에 사용자에게 더 나은 미리보기를 제공할 것이다.

타임라인 기능에 뛰어들기 전에, Xcode 캔버스 미리보기를 켜고 싶습니다.

마지막 SimpleEntry를 고치고 미리보기를 볼 수 있도록 뒷마당을 합시다.

이제 캔버스를 켜자.

Xcode의 새로운 기능은 위젯 타임라인을 미리 볼 수 있는 기능이다.

캔버스는 직사각형 위젯의 미리보기를 보여주고 있으며, 하단에는 위젯의 타임라인을 구성하는 일련의 타임라인 엔트리가 있습니다.

캔버스 미리보기는 위젯을 추가할 때 생성된 기본 보기를 사용하고 있습니다.

타임라인 제공자를 끝내기 전에, 우리가 타임라인을 만들 때 타임라인을 더 잘 시각화할 수 있도록 뷰를 구축합시다.

BackyardBirdsWidgetEntryView를 찾으세요.

각 가족에 대해 특별히 뷰를 만들 수 있도록 widgetFamily에 대한 환경 속성을 추가합시다.

각 accessoryWidget 제품군에 대한 뷰를 구현할 수 있도록 본체를 스위치 문으로 교체합시다.

이제, 항목을 매개 변수로 사용하는 뷰로 accessoryRectangular용 케이스를 만들어 봅시다.

우리는 아래에서 이 견해를 구현할 것이다.

직사각형 보기는 watchOS 스마트 스택에 표시된 위젯의 보기라는 점에서 독특합니다.

직사각형 보기를 위해, 우리는 왼쪽에 이미지가 있고 오른쪽에 세 줄의 텍스트가 있는 일반적인 패턴을 따를 것입니다.

파일 하단으로 가서 RectangularBackyardView를 만들자.

그 뷰는 뒷마당 데이터를 포함하기 위해 이전에 수정한 TimelineEntry를 사용한다.

계속하기 전에, 캔버스 보기를 스마트 스택 직사각형 보기로 전환합시다.

이것은 우리가 위젯을 만들 때 시각화할 수 있게 해줄 것이다.

이제 우리 보기의 HStack에 이미지와 세 줄의 텍스트를 넣어 봅시다.

미리보기를 봐. 그건 정확히 그게 아니야.

그들만의 VStack에 텍스트 줄을 넣자.

그래, 그건 가까워.

항목의 보기에 실제 데이터를 넣자.

먼저, 우리는 새를 표시할 수 있는 Backyard Birds 앱의 ComposedBird 보기를 사용할 것입니다.

그 새는 선택 사항이므로, 우리는 그것을 풀어야 한다.

ComposedBird 뷰와 VStack을 if-let 안에 넣어서 항목에 새가 있는지 확인해 봅시다.

새가 없다면, 마당에 분수 이미지와 새가 없는 텍스트를 넣자.

우리는 이제 타임라인을 살펴보고 세 줄의 텍스트가 있는 새를 보여주는 항목과 새가 없는 항목을 볼 수 있습니다.

먼저 새가 있는 경우에 대한 세부 사항을 작성해 봅시다.

첫 번째 줄에, 우리는 새의 이름, 두 번째 줄, 뒷마당의 이름, 그리고 세 번째 줄에 마당의 음식과 물에 대한 정보를 추가할 것입니다.

새가 없는 경우, 마당 이름, 음식과 물 정보, 그리고 이 마당의 방문객 수를 보여주세요.

우리의 항목이 어떻게 생겼는지 봅시다.

그거 좋네, 하지만 레이아웃을 좀 고쳐보자.

먼저, ComposedBird를 업데이트합시다.

보기를 scaledToFit으로 만들고 widgetAccentable로 만들어 착색된 시계 페이스에 사용할 때 색조가 되게 합시다.

새의 이름에 헤드라인 글꼴을 추가하고, 크기를 조정하고, 시계 페이스로 색을 칠할 수 있도록 widgetAccentable로 만들어 봅시다.

우리는 또한 포그라운드 스타일을 사용하여 텍스트가 새 날개의 색을 하도록 할 것이다.

이름이 길어질 경우를 대비하여 다른 두 견해에 배율 요소를 추가합시다.

마지막 줄의 포그라운드 스타일을 보조로 설정해 봅시다.

마지막으로, 세 개의 텍스트 뷰가 정렬되도록 스택 리드를 정렬합시다.

우리의 견해는 꽤 좋아 보인다.

새가 없을 때 다른 진술의 견해에 이 모든 동일한 업데이트를 적용합시다.

이제 우리의 위젯이 더 좋아 보인다.

우리의 위젯은 새나 마당을 보여줄 때 간격이 다르다는 것을 주목하세요.

새 보기와 이미지 보기에 프레임을 추가하여 그것들을 일치시키자.

우리는 또한 VStacks에 프레임을 추가하여 제대로 정렬할 것입니다.

watchOS 스마트 스택의 위젯을 완성하기 위해 추가해야 할 옵션이 하나 더 있습니다.

SwiftUI의 새로운 것은 컨테이너 배경이다.

컨테이너 배경을 뒷마당의 그라디언트로 교체합시다.

우리는 컨테이너 배경 배치를 위젯으로 설정할 것이다.

컨테이너 백그라운드는 시스템에서 선택적으로 사용되며 시계 화면이 아닌 watchOS 스마트 스택에만 표시됩니다.

이제 우리의 견해는 watchOS 스마트 스택에 대한 준비가 되었습니다.

전망이 좋아 보이니, TimelineProvider로 돌아가서 타임라인 구축을 끝내자.

타임라인 기능은 위젯이 위젯의 보기를 렌더링하기 위한 데이터가 포함된 타임라인 항목 모음을 생성하는 곳입니다.

이것은 위젯의 주력 기능이다.

지금은 무작위 뒷마당 데이터로 다섯 개의 항목을 생성하고 있다.

그것을 새 방문으로 가득 찬 타임라인으로 바꾸자.

함수의 상단에는 타임라인 엔트리 배열이 있다.

우리는 이것을 사용하여 타임라인을 만들 것이다.

먼저, 생성된 타임라인 코드를 제거해 봅시다.

이제, ConfigurationAppIntent의 backyardID를 사용하여 구성된 마당을 얻자.

뒷마당 구조에는 그 마당의 모든 방문자 이벤트를 포함하는 재산이 있다.

검색된 마당에 대한 방문자 이벤트를 반복해 봅시다.

각 이벤트에 대해, visitorEvent의 시작 날짜를 포함하는 TimelineEntry를 만들고 구성된 뒷마당에 전달합시다.

타임라인 미리보기가 업데이트되었습니다. 그게 어떻게 변했는지 보자.

이제 우리가 타임라인 항목을 선택할 때, 우리는 새들이 나타나는 것을 본다.

그게 우리가 기대했던 거야. 하지만, 모든 입장에는 방문객이 있다.

우리는 새들이 떠날 때에도 항목을 추가해야 한다.

두 번째 항목을 만들고 visitorEvent의 endDate를 사용합시다.

우리는 같은 뒷마당을 사용하고 항목 배열에 항목을 추가할 것입니다.

이제 타임라인을 봅시다.

좋아, 우리는 새들이 언제 방문하고 언제 떠날지에 대한 항목이 있어.

우리의 위젯 타임라인은 멋져 보이며, 이 새로운 타임라인 미리보기는 놀랍습니다.

그것은 위젯과 타임라인을 훨씬 쉽게 만들 것이다.

마지막으로, 타임라인 제공자의 추천 기능을 구현해 봅시다.

여기서, 우리는 backyardID를 보유하는 WidgetConfigurationIntent를 포함할 AppIntentRecommendations 배열을 반환해야 합니다.

기본 구현을 제거해 봅시다.

반환할 일련의 추천을 만들어 봅시다.

다음으로, 우리는 앱에서 각 뒷마당에 대한 추천을 만들고 싶으니, 모든 뒷마당을 반복해 봅시다.

각 뒷마당에 대해, 우리는 ConfigurationAppIntent를 만들고 뒷마당 ID를 설정할 것입니다.

그리고 마지막으로, ConfigurationIntent를 사용하여 AppIntentRecommendation을 만들고 배열에 추가해 봅시다.

우리는 뒷마당의 이름을 설명할 것이다.

추천 기능은 이제 사람이 뒷마당 새 위젯을 선택할 때 위젯 갤러리에서 각 뒷마당에 하나씩 위젯 구성 목록을 제공합니다.

축하해.

이제 시계 페이스 컴플리케이션과 watchOS 스마트 스택으로 나타날 watchOS에 위젯을 구축했습니다.

이전에, 우리는 TimelineEntry에서 관련성 속성을 구현했을 때 관련성에 대해 조금 이야기했지만, 우리가 할 수 있는 일이 더 많습니다.

뒷마당 새 앱의 각 마당은 새들이 사용할 수 있는 물과 음식을 추적한다.

우리의 새로운 위젯도 그 정보를 보여줄 것이다.

우리는 물이나 음식이 부족하다는 것을 알고 있는 기간 동안 관련 의도 목록을 시스템에 제공할 수 있습니다.

우리의 위젯은 그 기간 동안 우선순위가 매길 것이며, 사람들에게 그들의 마당에 주의가 필요하다는 것을 알릴 것이다.

코드로 돌아가서, 가능한 위젯에 대한 관련 인텐트를 구축한 다음 해당 인텐트로 RelevantIntentManager를 업데이트하는 새로운 기능을 만들어 봅시다.

우리는 updateBackyardRelevantIntents라는 새로운 함수를 만들 것입니다.

그 기능에서, 우리는 관련 의도의 배열이 필요하다.

그리고 우리는 그 배열로 RelevantIntentManager를 업데이트할 것이다.

관련 의도 배열을 작성하기 위해, 우리는 앱의 모든 뒷마당을 반복할 것입니다.

다음으로, 우리는 뒷마당에 대한 구성 의도를 만들고 뒷마당 ID를 현재 뒷마당으로 설정할 것입니다.

우리는 날짜를 기반으로 RelevantContext를 만들 것이다.

이 경우, 우리는 뒷마당의 미래의 낮은 음식 날짜와 미래의 빈 음식 날짜를 사용할 것이다.

마지막으로, 우리는 관련 의도를 만들 것이다.

우리는 위젯, 위젯의 종류, 그리고 우리가 방금 만든 relevantDateContext에 configurationIntent를 사용하고 이것을 배열에 추가할 것입니다.

이제, 뒷마당의 낮은 물과 빈 물 날짜에 대해서도 똑같이 합시다.

그거 좋아 보인다.

이제 RelevantIntentManager는 위젯의 가능한 각 구성이 더 높은 관련성을 가질 때 날짜 범위를 가지고 있습니다.

적절한 경우 관련 의도가 업데이트되도록 이 기능을 주요 구성 요소에 추가해 봅시다.

먼저, 타임라인 제공자의 타임라인 기능으로 돌아가 봅시다.

타임라인을 반환하기 직전에 함수를 호출합시다.

이것은 우리가 위젯 타임라인을 업데이트할 때마다 관련 의도를 최신 상태로 유지할 것이다.

뒷마당 새 앱으로도 가자.

Backyard Birds 앱은 각 마당에 대한 세부 보기를 가지고 있으며 사람이 음식과 물을 다시 채울 수 있는 페이지를 제공합니다.

이곳은 또한 식량과 물 공급이 바뀔 수 있기 때문에 관련 의도를 업데이트하기에 이상적인 장소이다.

BackyardContentTab에서 리필 버튼을 탭하면 updateBackyardRelevantIntents 기능으로 작업을 추가할 것입니다.

음식과 물이 방금 업데이트되었다는 것을 알고 있기 때문에, 우리는 또한 WidgetKit에 전화를 걸어 위젯의 타임라인을 다시 로드해야 합니다.

이제 우리의 관련 의도가 업데이트되고 사람이 마당에서 물과 음식을 다시 채울 때 위젯의 타임라인이 다시 로드될 것입니다.

우리는 이제 watchOS 스마트 스택을 위한 위젯을 만들었고 가장 관련성이 있을 때 위젯의 우선 순위를 지정하기 위해 날짜 의도로 RelevantIntentManager를 업데이트했습니다.

따라와줘서 고마워.

우리는 당신이 watchOS 스마트 스택을 위해 만든 위젯을 보기를 기대합니다.

위젯, 스마트 스택 및 앱 인텐트에 대한 자세한 내용은 이 세션을 확인하세요.

모험적이고 코딩을 멈추지 마세요.