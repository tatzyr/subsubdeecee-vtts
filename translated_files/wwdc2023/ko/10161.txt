10161

♪ ♪

닉: 안녕하세요, 저는 SwiftUI 팀의 엔지니어인 닉입니다.

인스펙터는 SwiftUI의 흥미진진한 새로운 요소이다.

검사관이 무엇이고 API를 어떻게 사용하는지 살펴볼게.

그 후, 나는 프레젠테이션 사용자 지정을 위한 수정자를 검토할 것이다.

인스펙터는 선택한 콘텐츠의 추가 세부 사항을 보여주는 뷰의 이름입니다.

당신은 아마 전에 한 명과 상호 작용한 적이 있을 것입니다.

Keynote는 인스펙터를 사용하여 선택에 대한 서식 세부 사항을 표시합니다. 이 경우 모양 포맷터입니다.

여기서 검사관은 후행 사이드바로 제시한다.

검사관의 또 다른 일반적인 사용 사례는 앱의 주요 콘텐츠를 보완하는 콘텐츠를 보여주는 것이다.

단축키는 이 목적을 위해 검사관을 사용한다.

메인 인터페이스는 사용자가 편집하는 바로 가기이며, 검사관은 사용 가능한 앱과 작업의 라이브러리로 이를 보완합니다.

나는 이 샘플 앱을 사용하여 인스펙터 API를 탐색할 것이다.

나는 애플 파크 안팎의 동물들을 알아가고 있다.

이 앱은 내가 만난 동물을 저장하고, 그들의 이름을 추적하고, 그들이 가장 좋아하는 과일을 추적하며, 나중에 "의심 수준"이라는 라벨이 붙을 수 있는 이 칼럼이 있습니다.

그리고 이제, SwiftUI의 검사관을 만나세요!

검사관은 선택된 동물에 대한 세부 사항의 읽기-쓰기 보기를 보여준다.

여기서 나는 파브리치오 피쉬의 의심 수준을 "매우 의심"으로 조정하고 있다.

사실 나는 그를 어지럽게 할 거야.

인스펙터는 macOS, iPadOS 및 iOS의 SwiftUI 개발자도 사용할 수 있습니다!

인스펙터 API에는 열 너비에 대한 프로그래밍 제어가 포함되어 있어 후행 열의 너비를 조정할 수 있습니다.

API에는 제시된 상태에 대한 프로그래밍 방식의 제어가 포함되어 있어 필요에 따라 검사관을 숨기고 표시할 수 있습니다.

인스펙터는 단순한 후행 사이드바보다 더 높은 수준의 추상화이다.

컴팩트한 크기 클래스에서는 크기 조정 가능한 시트에 적응하고 검사기는 더 큰 iPad의 분할 화면에 자동으로 오버레이됩니다.

SwiftUI는 이미 기존의 구조적 API 세트를 가지고 있다.

인스펙터는 내비게이션 구성 요소와 프레젠테이션의 특성을 모두 갖춘 이러한 API와 함께 적합합니다.

NavigationSplitView 및 NavigationStack과 마찬가지로, 인스펙터는 장면의 비계를 구축하는 데 사용됩니다.

시트, 팝오버, 경고 및 확인 대화와 마찬가지로, 인스펙터는 필요에 따라 기각하고 발표하는 프레젠테이션입니다.

새로운 검사관 API를 채택하는 방법을 배울 시간이다.

이전에, 나는 이 세션을 위해 만든 샘플 앱을 선보였다.

당신은 내가 각 동물의 의심 수준을 추적하고 있다는 것을 눈치챘을 것입니다.

그건 내가 고위험 미스터리를 풀려고 노력하고 있기 때문이야.

누군가 애플 파크에서 모든 과일을 먹고 있어!

닉 경위가 각 동물의 세부 사항을 수집할 수 있도록 내 앱에 검사관을 추가했다.

검사관 API를 채택하는 것이 얼마나 쉬웠는지 보여 드리겠습니다. 그리고 아마도 그 과정에서 이 과일 미스터리를 해결할 수 있을 것입니다.

빨리, Xcode로! 그 게임은 과일이야!

인스펙터를 추가하는 첫 번째 단계는 새로운 수정자인 인스펙터를 사용하는 것이다.

다른 프레젠테이션과 마찬가지로, 이것은 Bool 제시된 바인딩과 후행 뷰 빌더의 검사관의 내용이 필요합니다.

검사관 내용을 위해, 저는 기성된 AnimalInspectorForm을 가지고 있습니다.

나는 현재 검사 중인 동물을 통과하기 위한 몇 가지 맞춤형 방법이 있다.

그리고 여기 macOS에서 후행 칼럼으로 제시하는 내 검사관이 있다.

나는 훌륭한 검사관 경험의 씨앗을 심었다.

이 AnimalForm은 그룹화된 스타일을 사용하고 있다.

이전에 양식 스타일을 접해 본 적이 없는 경우, 이렇게 적용됩니다.

하지만 인스펙터 컨텍스트는 기본적으로 그룹화된 스타일을 사용하기 때문에, 내가 직접 스타일링할 필요가 없다.

나는 심지어 미리보기의 캔버스에서 검사관과 상호 작용할 수 있다.

아, 이것은 검사관이 기본적으로 붕괴할 수 있지만, 기본적으로 크기를 조정할 수 없다는 것을 상기시켜줍니다.

인스펙터 열 너비 수정자를 사용하여 변경할 수 있습니다.

나는 몇 가지 합리적인 기본값을 사용할 것이다.

최소 200개, 이상 300개, 최대 400개.

이 이상적인 매개 변수는 첫 번째 실행 시 열의 크기이지만, 사용자가 인스펙터의 크기를 조정하면 시스템은 실행 시 해당 크기를 유지합니다.

마지막으로, 제시된 상태를 전환하기 위해 도구 모음 항목을 추가하겠습니다.

나는 제시된 속성을 토글하는 버튼을 사용할 것이고, 그 라벨은 info.circle 시스템 이미지를 사용하여 라벨을 사용할 것이다.

도구 모음 항목은 인스펙터의 뷰 빌더 내에서 선언되기 때문에 인스펙터 위의 도구 모음 섹션에 나타납니다.

내가 스크롤할 때, 도구 모음은 내가 예상했던 것과 똑같이 작동하며, 충분한 콘텐츠가 도구 모음 아래에 있을 때 그림자 주머니를 보여준다.

나는 뷰 계층 구조의 다른 지점이 아닌 AnimalTable에서 인스펙터 수정자를 의도적으로 사용했다.

많은 SwiftUI API와 마찬가지로, 인스펙터 수정자는 적용되는 맥락에 따라 다른 동작을 한다.

특히, 배치는 도구 모음과 콘텐츠 사이에 분리가 없는 전체 높이 스타일이 사용되는지, 또는 인스펙터가 도구 모음 아래에 중첩된 아래의 도구 모음 스타일이 사용되는지 결정합니다.

제목 구분 기호가 도구 모음 아래 모양에서 창의 전체 너비에 걸쳐 있다는 점에 유의하십시오.

마찬가지로, 도구 모음 콘텐츠는 주요 콘텐츠의 도구 모음에 배치됩니다...

또는 도구 모음 수정자가 사용되는 위치에 따라 관리자의 도구 모음에서.

검사관 API를 사용할 때 고려해야 할 두 가지 사항이 있습니다.

먼저, 검사관은 NavigationStack 또는 NavigationSplitView와 같은 탐색 구조의 내부 또는 외부에 배치될 것인가?

둘째, 도구 모음 콘텐츠는 검사관의 뷰 빌더 내부 또는 외부에 있어야 합니까?

나는 이 구조물들 중 두 개를 걸을 것이다.

먼저, 탐색 구조 안에 인스펙터를 배치하고, 도구 모음 콘텐츠는 검사관 외부에 배치합니다.

인스펙터가 내비게이션 스택에 포함되어 있을 때, 인스펙터는 내비게이션 스택의 도구 모음 아래에 있습니다.

여기서, 도구 모음 콘텐츠는 기본 콘텐츠의 관리자 외부에서 선언되고 탐색 스택의 도구 모음에서 렌더링됩니다.

컴팩트한 수평 크기 클래스에서, 인스펙터는 시트로 표시되고 도구 모음 항목은 주요 콘텐츠의 도구 모음에 남아 있습니다.

내 가능성의 테이블로 돌아가.

두 번째 건설의 경우, 인스펙터 뷰 빌더 내부의 도구 모음 콘텐츠와 함께 탐색 구조 외부에 인스펙터를 배치하는 것을 살펴볼 것입니다.

검사관 수정자가 내비게이션 구조 외부에 배치될 때, 검사관은 배치할 후행 기둥의 전체 높이가 주어진다.

인스펙터에 도구 모음 콘텐츠가 있는 경우, 해당 콘텐츠는 인스펙터를 위해 특별히 도구 모음 섹션에 배치됩니다.

이 두 도구 모음 항목은 주요 배치와 함께 배치되며 인스펙터 위의 탐색 도구 모음 중앙에 있습니다.

그러나 이번에는 도구 모음 콘텐츠가 인스펙터의 뷰 빌더 안에 있기 때문에 인스펙터가 시트로 표시될 때 도구 모음 콘텐츠가 시트에 있습니다.

이러한 원칙은 인스펙터가 macOS에서 시트로 나타나지 않는 것을 제외하고는 macOS로 확장되므로 테이블이 더 간단해집니다.

걱정해야 할 유일한 축은 내비게이션 구조 내부 또는 외부이다.

마지막이지만 중요한 참고 사항: NavigationSplitView 내에서 인스펙터를 사용하는 경우, 인스펙터는 세부 열의 뷰 빌더에 배치해야 하며, 이전과 마찬가지로 탐색 구조 외부에 배치할 수도 있습니다.

와, 이 모든 미스터리 해결은 나를 배고프게 해!

오!

나는 앱에서 니블 게시판을 받고 있어!

이 앱은 과일을 언제 어디서 갉아먹었는지에 대한 정보와 함께 크기 조정 가능한 시트로 Nibble Bulletins를 보여줍니다.

iOS 16.4와 함께 출시된 SwiftUI의 프레젠테이션 사용자 지정에 대해 이야기할 수 있는 좋은 시간입니다.

과일 간식 게시판은 검사관이 아니라 시트이다.

프레젠테이션 수정자는 시트와 팝오버와 같은 다른 프레젠테이션을 깊이 있게 사용자 정의할 수 있습니다.

내가 그것들 중 몇 개를 시도해 볼게.

프레젠테이션 배경 수정자는 적절하게 명명되었다.

그것은 프레젠테이션의 배경을 설정할 것이다.

기존 배경 수정자와 달리, 프레젠테이션 특정 수정자는 전체 프레젠테이션을 채우고 기본 콘텐츠를 보여줄 수 있습니다.

그래서, 내가 얇은 재료를 사용한다면, 시트 뒤에 있는 목록의 힌트를 볼 수 있을 것이다.

목록을 스크롤하고 Nibble Bulletin을 읽는 동안 용의자를 보고 싶을 경우를 대비하여 시트 뒤에 있는 콘텐츠와의 상호 작용을 허용하고 싶습니다.

이것은 프레젠테이션 배경 상호 작용이 활성화된 것만큼 간단합니다.

디밍 뷰가 제거되었고 이제 배경 콘텐츠와 상호 작용할 수 있습니다.

PresentationBackgroundInteraction 유형은 또한 프레젠테이션 디텐트를 수락하는 upThrough 매개 변수를 가질 수 있습니다.

제공된 인수가 주어진 프레젠테이션의 디텐트 중 하나와 일치하는 한, SwiftUI는 upThrough 인수보다 큰 디텐트에서만 디밍 뷰를 제공할 것이다.

나는 200 이상의 높이에서 디텐트에서 어둡게 하고 싶기 때문에, 먼저 presentationDetents 수정자를 사용하여 200의 높이 디텐트를 추가할 것이다.

나는 현재 매체의 멈춤에서 시트를 조정할 것이다...

내 맞춤 높이 200까지.

200까지만 백그라운드 인터랙션을 활성화하면, 디밍 뷰는 중간 및 대형 멈춤에 대해 돌아올 것이다.

프레젠테이션을 위한 완벽한 모양과 느낌을 얻기 위해 더 많은 사용자 지정을 사용할 수 있습니다.

이러한 수정자 중 다수는 시트뿐만 아니라 다른 프레젠테이션에도 영향을 미친다.

그리고 프레젠테이션 수정자에 대해 한 가지 더.

그 같은 수정자는 검사관이 시트로 제시할 때 검사관과 함께 구성된다.

이전 검사관의 경우, 중간 멈춤에서 배경 콘텐츠 상호 작용을 비활성화하기 위해, 이전과 동일한 정확한 코드를 사용할 수 있습니다...

높이 멈춤을 선언하고, 동일한 멈춤을 통해서만 백그라운드 상호 작용을 가능하게 합니다.

이제 검사관은 중간 멈춤과 그 이상에서 어두워진다.

그리고 그것은 SwiftUI의 검사관이다.

이 비디오에서, 나는 인스펙터 API와 그것을 사용하는 뉘앙스를 소개했다.

나는 시연하기 위해 내가 가장 좋아하는 시트 프레젠테이션 수정자 중 일부를 골랐고, 그들이 검사관들과 어떻게 구성할 수 있는지 보여주었다.

그래서 뭘 기다리고 있어?

나가서 검사해.

앱 어딘가에 검사관을 배치하세요.

프레젠테이션을 커스터마이징하여 계속 진행하세요.

그리고 니블러에 관해서는, 이 미스터리를 해결하려는 우리의 노력은 결실을 맺지 않은 것 같다.

♪ ♪