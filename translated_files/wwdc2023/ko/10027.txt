10027

♪ ♪

캐서린: 안녕! 저는 Kathryn이고, System Experience에서 일하는 엔지니어입니다.

오늘 저는 위젯의 새로운 위치와 모든 곳에서 멋지게 보이도록 위젯을 쉽게 최적화할 수 있는 방법에 대해 이야기할 것입니다.

먼저, 위젯의 빠른 역사를 살펴봅시다.

iOS 14는 홈 화면에 위젯을 도입했고, iOS 16은 동일한 쉬운 WidgetKit API를 사용하여 위젯을 잠금 화면으로 가져왔습니다.

올해 위젯 생태계는 Mac의 데스크톱, iPad의 잠금 화면, iPhone의 새로운 대기 모드, Apple Watch의 새로운 스마트 스택의 네 가지 새로운 위치로 확장되고 있습니다.

이것은 사람들이 더 많은 장소에서 그들이 가장 좋아하는 모든 위젯을 볼 수 있다는 것을 의미한다.

위젯은 이러한 모든 위치에 자동으로 나타날 수 있으므로, 어디에 표시되든 멋지게 보이는지 확인하는 것이 중요합니다.

Mac의 iPhone 위젯 덕분에, 현재 macOS 앱이 없더라도 사람들은 Mac에서 위젯을 사용할 수 있습니다.

내 친구 데본과 그레이엄은 이 새로운 장소를 준비하기 위해 이모티콘 레인저 위젯을 업데이트하는 것을 도와달라고 요청했다.

WWDC20의 "Widgets code-along"과 WWDC22의 "Complications and widgets: Reloaded"에서 이 프로젝트를 기억할 수 있습니다.

우리는 위젯의 새로운 콘텐츠 마진과 Apple Watch에서 위젯으로 전환하는 방법을 검토하는 것으로 시작할 것입니다.

다음으로, 우리는 위젯에 자동으로 제거 가능한 배경을 추가할 것입니다.

그런 다음, 우리는 환경에 맞게 레이아웃을 동적으로 확장할 수 있도록 위젯을 수정할 것입니다.

마지막으로, 우리는 위젯의 요소가 생생하게 렌더링할 준비가 되었는지 확인할 것입니다.

시작하자.

올해 위젯의 새로운 것은 콘텐츠 마진이다.

콘텐츠 여백은 위젯의 본문에 자동으로 적용되는 패딩으로, 콘텐츠가 위젯 컨테이너의 가장자리에 가까워지는 것을 방지합니다.

이러한 여백은 위젯이 표시되는 환경에 따라 더 크거나 작을 수 있습니다.

watchOS 9 이하에서 위젯은 시스템 정의 안전 영역을 사용하여 콘텐츠가 가장자리에 너무 가까워지지 않도록 합니다.

위젯은 보기에 ignoresSafeArea와 같은 수정자를 추가하여 안전한 영역 외부로 확장할 수 있습니다.

watchOS 10 이상에서 위젯의 안전 영역은 콘텐츠 여백 사용으로 대체되었습니다.

이것은 ignoresSafeArea와 같은 수정자가 더 이상 위젯에 영향을 미치지 않는다는 것을 의미합니다.

대부분의 위젯의 경우, 이 변경 사항은 위젯의 모양에 영향을 미치지 않습니다.

그러나, 위젯에 안전 영역을 무시하는 데 사용되는 콘텐츠가 있는 경우, 위젯 구성에 contentMarginsDisabled 수정자를 추가하여 동일한 효과를 얻을 수 있습니다.

그런 다음, 기본 콘텐츠 여백 내에 남아 있어야 하는 콘텐츠의 경우, 패딩을 다시 추가하기만 하면 됩니다.

widgetContentMargins 환경 변수를 사용하여 현재 환경의 기본 여백을 얻을 수 있습니다.

이러한 새로운 수정자 및 변수와 함께 콘텐츠 여백은 위젯이 표시되는 모든 플랫폼에서 사용할 수 있습니다.

이제, 이모티콘 레인저스 위젯에 이동식 배경을 추가해 봅시다.

우리의 기존 액세서리 위젯 제품군은 iPhone과 마찬가지로 iPad 잠금 화면에서 자동으로 작동합니다.

iPad는 또한 그들 바로 옆에 시스템 작은 위젯을 보여줄 수 있다.

지금 잠금 화면에서 우리의 모습은 다음과 같습니다.

다른 위젯과 더 잘 일치하도록 이 환경에서 배경을 제거해야 합니다.

운 좋게도, 이것을 하는 것은 매우 간단하다.

여기 우리 시스템 스몰 위젯의 보기에 대한 코드가 있습니다.

현재, 그것은 ZStack을 사용하여 게임 배경 색상 위에 계층화된 AvatarView로 구성되어 있습니다.

배경색을 제거하려면, 우리가 변경해야 할 것은 보기에 containerBackground 수정자를 추가하고, 게임Background 색상을 안으로 옮기는 것입니다.

일단 그렇게 하면, 시스템은 표시되는 위치에 따라 위젯의 배경을 자동으로 꺼낼 수 있습니다.

Apple Watch의 스마트 스택은 또한 이 새로운 컨테이너 배경을 활용할 수 있다.

기본적으로, 액세서리 직사각형 위젯은 이 환경에서 어두운 재료 배경을 받게 됩니다.

동일한 containerBackground 수정자를 보기에 추가함으로써, 위젯은 다른 위젯과 동일한 배경에 배치되어 앱의 시각적 아이덴티티와 연결됩니다.

이 새로운 환경에 대해 더 자세히 알아보시자면, "Apple Watch의 스마트 스택을 위한 디자인 위젯"을 확인하세요.

사진 및 지도 위젯과 같은 일부 위젯에는 뚜렷한 전경 콘텐츠가 없으므로 제거할 수 있는 배경이 없습니다.

이 경우, containerBackgroundRemovable 수정자를 WidgetConfiguration에 추가하고 false로 설정할 수 있습니다.

이제, iPad 잠금 화면과 대기 모드에 있을 때 레이아웃을 최적화해 봅시다.

날씨 위젯은 위젯 배경이 제거될 때 레이아웃을 변경하는 방법의 좋은 예입니다.

위젯이 여전히 같은 정보를 포함하고 있지만, 공간을 활용하도록 최적화되어 있습니다.

내용은 가장자리까지 밀려나고, 중요한 요소는 확대된다.

이러한 조정은 위젯을 멀리서 더 쉽게 읽을 수 있게 하고, 대기 모드에 더 원활하게 통합합니다.

이러한 레이아웃 변경은 또한 위젯이 iPad 잠금 화면의 액세서리 제품군 위젯과 혼합되어 모든 가족에 걸쳐 보다 일관된 모습을 유지하는 데 도움이 됩니다.

우리 자신의 위젯에서 이러한 변경 사항을 구현하기 위해 Xcode로 이동합시다.

여기 우리가 systemSmall 위젯에 사용하는 AvatarView의 코드가 있습니다.

오른쪽에서, 나는 Xcode 미리보기에서 위젯이 어떻게 생겼는지에 대한 실시간 미리보기를 볼 수 있다.

컨테이너 배경이 제거된 컨텍스트에 표시되면, widgetContentMargins는 자동으로 축소되어 콘텐츠를 가장자리에서 가장자리로 가져옵니다.

showsWidgetContainerBackground 환경 변수를 사용하여 위젯 배경이 제거되었는지 감지할 수 있습니다.

그럴 때, HeroNameView에서 영웅의 레벨과 XP에 대한 세부 사항을 생략하고, 대신 아래의 세부 사항을 보여주세요.

이것은 또한 이 환경에서 우리의 영웅의 이름을 더 크게 만들 것이다.

이제 이러한 컨텍스트 사이를 전환할 때, 레이아웃은 원래 보기에서 새로운 확대된 보기로 자동으로 변경됩니다.

액세서리 제품군 위젯과 마찬가지로, 시스템 제품군 위젯은 iPad 잠금 화면의 생생한 렌더링 모드로 표시됩니다.

이것은 당신의 위젯이 불포화되고, 잠금 화면 배경에 적절하게 채색된다는 것을 의미합니다.

이렇게 렌더링될 때, 대비 문제는 위젯의 가독성에 영향을 미칠 수 있습니다.

예를 들어, 우리 영웅의 아바타는 원형 배경과 구별하기 어려워진다.

Xcode로 돌아가서, 생생한 렌더링 모드에서 그 배경을 제거하기 위해 위젯을 수정합시다.

StandBy Night 모드에서 이것을 확인해 봅시다.

widgetRenderingMode 환경 변수를 사용하여 우리가 어떤 렌더링 모드에 있는지 감지할 수 있습니다.

아바타의 백그라운드 매개 변수를 변경하여 생생한 렌더링 모드에 있는지 확인해 봅시다.

StandBy Night 모드는 또한 생생한 렌더링을 사용하므로, 우리의 아바타는 이러한 맥락에서도 명확하게 볼 수 있습니다.

위젯 렌더링 모드에 대해 자세히 알아보려면, WWDC22의 "컴플리케이션 및 위젯: 리로디드"를 보세요.

그리고 위젯의 새로운 기능에 대한 자세한 내용은 "위젯에 생명을 불어넣기"를 확인하세요.

저는 위젯에 오는 모든 변화에 대해 매우 흥분하고 있으며, 이러한 새로운 기능으로 위젯을 향상시키기 위해 어떤 아이디어를 생각해 내는지 빨리 보고 싶습니다.

고마워, 그리고 즐겨!

♪ ♪