10096

♪ 부드러운 기악 힙합 ♪

♪

안녕! 저는 트리샤 그레이이고, 리얼리티킷 툴 팀에서 일하고 있습니다.

"공간 컴퓨팅을 위한 훌륭한 게임 만들기"에 오신 것을 환영합니다.

오늘 이 새로운 장치를 위한 게임을 만드는 것에 대해 당신과 이야기하게 되어 정말 기쁩니다.

공간 컴퓨팅은 모든 종류의 새로운 게임 유형을 가능하게 한다.

그것은 독특한 렌더링, 오디오 및 입력 특성을 가지고 있다.

게임을 구축하는 데 사용할 수 있는 프레임워크와 도구에 관해서는 몇 가지 선택이 있으며, 여기에는 RealityKit이 포함됩니다.

하지만 먼저, 이 새로운 플랫폼에서 어떤 종류의 게임이 가능한지에 대한 아이디어를 드리겠습니다.

이것은 독립형 공간 컴퓨팅 장치이다.

그것은 고해상도 화면, 넓은 시야각, 그리고 훌륭한 재생률을 가지고 있다.

공간 오디오는 놀랍다.

그리고 손의 움직임과 플레이어 주변의 방 모양을 모두 추적하는 LiDAR가 있습니다.

그리고 플레이어는 장치의 고품질 패스스루를 사용하여 주변 환경과 연결 상태를 유지할 수 있습니다.

이것은 흥미진진한 가능성을 가지고 있으며 다양한 게임 유형을 만들 수 있습니다.

플레이어의 관심을 얼마나 많이 받고 싶은지에 따라 몰입의 스펙트럼을 아우르는 게임을 만들 수 있습니다.

모든 앱과 게임은 공유 공간에서 시작됩니다.

이것은 당신의 게임이 다른 게임과 앱, 그리고 플레이어의 주변 환경과 함께 우주에서 살 수 있다는 것을 의미합니다.

플레이어의 실제 데스크톱에는 활동적인 체스 게임을 나타내는 가상 체스판이 있거나 바닥에 앉아 있는 가상 애완 동물이 있을 수 있습니다.

이 모든 앱은 함께 살고 있으며, 플레이어는 원하는 앱과 상호 작용할 수 있습니다.

풀 스페이스로 이동할 때 게임에 모든 주의를 기울일 수 있습니다.

이것은 다른 모든 창과 볼륨을 닫고, 콘텐츠에 대한 경험을 집중시키면서, 패스스루를 통해 플레이어를 주변 환경에 연결된 상태로 유지합니다.

이것은 액션 게임에 적합할 수 있습니다 - 당신이 적극적으로 플레이하고 있지만 여전히 현실 세계와 상호 작용하는 것입니다.

예를 들어, 우주선이 벽의 구멍을 통해 들어오게 할 수 있습니다.

완전히 몰입감 넘치는 경험은 게임이 전체 시야를 장악할 때이다.

당신의 방 대신에, 환경이 있고 당신은 더 이상 현실 세계를 볼 수 없습니다.

물론, 전통적인 2D 게임도 만들 수 있습니다.

그들은 가상 창에서 실행되며, 플레이어는 그 창을 원하는 만큼 크거나 작게 만들 수 있다.

그것은 심지어 수직 창문일 필요도 없고, 땅에 놓인 평평한 표면일 수도 있다.

그들은 그것을 벽에 걸거나 책상 위에 놓거나, 얼굴 바로 앞에 있는 가장 큰 화면으로 가질 수 있다.

플레이어는 iOS에서와 마찬가지로 게임과 상호 작용할 수 있지만, 화면을 터치하는 대신 물체를 보고 손가락을 탭하여 선택합니다.

iOS에서 할 수 있는 것처럼 블루투스 컨트롤러나 키보드를 연결할 수도 있으며, 사용 중인 컨트롤러를 내려다보고 볼 수 있기 때문에 패스스루가 도움이 됩니다.

3D 요소를 추가하여 2D 게임을 더할 수도 있습니다.

예를 들어, 창에는 실제 깊이가 있으므로 개체를 별도의 레이어로 렌더링하고 실제 시차 효과를 얻을 수 있습니다.

연기나 불꽃과 같이 비행기에서 나오는 요소도 가질 수 있습니다.

또는 사용자 지정 손 제스처에 대한 지원을 추가할 수 있습니다.

이 모든 옵션으로, 당신은 생각할 것이 많습니다.

게임을 디자인할 때, 거대한 고해상도 화면을 갖는 것부터 자신의 방에서 플레이할 수 있는 개인적인 것에 이르기까지 게임 플레이 경험을 위한 이러한 새로운 기회를 어떻게 활용할 수 있는지 생각해 보세요.

당신의 게임은 플레이어의 책상 위에 나타날 수 있습니다.

그들은 그것을 벽에 놓을 수 있다.

무언가가 날아가서 플레이어의 손에 착륙할 수 있다.

당신은 그들 주변의 현실 세계를 이용하거나 완전히 다른 장소로 옮길 수 있습니다.

렌더링, 오디오 및 입력은 이 장치에서 다른 플랫폼에서 사용되는 것과 다르게 작동합니다.

공유 공간에서 실행할 때, 게임의 콘텐츠는 다른 앱, 시스템 UI 및 패스스루의 콘텐츠와 함께 그려집니다.

렌더링이 공유되기 때문에, 프레임워크는 모든 앱이 좋은 시민이고 렌더링이 다른 앱을 방해하지 않도록 합니다.

이 모드에서는 MaterialX를 통해 표면 셰이더와 지오메트리 셰이더를 사용할 수 있습니다.

xrOS에서의 렌더링은 당신이 익숙한 것과는 조금 다르게 작동합니다.

모든 픽셀을 렌더링하는 대신, 렌더링해야 하는 모든 모델, 텍스처 및 셰이더를 설명한 다음 장치는 각 눈에 대해 자동으로 렌더링합니다.

게임을 위한 플랫폼 렌더링의 또 다른 이점은 해상도를 높이기 위해 동적 포브레이션을 적용할 수 있다는 것입니다.

동적 포브레이션은 렌더러가 플레이어의 눈이 보고 있는 디스플레이 부분에서 더 높은 해상도를 사용하는 기술이다.

이것은 당신이 힘든 일을 할 필요 없이 전체 장면을 렌더링하는 비용을 지불하지 않고도 그 장소에서 더 선명한 해상도를 얻을 수 있다는 것을 의미합니다.

기본적으로 RealityKit은 주변의 실제 물체와 현실적으로 혼합되는 방식으로 물체를 렌더링합니다.

RealityKit은 플레이어의 방에서 실제 조명을 샘플링하고 렌더링하는 물체에 동일한 조명을 적용합니다.

재료의 경우, RealityKit은 거칠기, 반사 및 금속과 같은 일반적인 매개 변수를 가진 물리적 기반 조명 모델을 사용합니다.

이것은, 샘플링된 조명과 함께, 당신에게 현실적인 모습을 제공합니다.

하지만 당신은 현실적인 것부터 환상적인 것까지 당신이 원하는 곳을 선택할 수 있습니다.

내장된 PBR 셰이더를 사용하는 대신, MaterialX를 사용하여 맞춤형 셰이더 콘텐츠를 만들고 Reality Composer Pro 또는 기타 그래픽 패키지에서 셰이더 그래프를 편집할 수 있습니다.

사용자 지정 조명 효과를 위해 개체에 사용자 지정 IBL을 할당할 수도 있습니다.

또 다른 고려 사항은 렌더링된 콘텐츠에 적용되는 시스템 차원의 효과가 있다는 것이다.

이것의 목적은 게임이 다른 앱과 더 잘 작동하도록 하고 플레이어를 보호하는 것입니다.

깊이 완화는 플레이어 주변의 물체 뒤에 숨겨져 있을 때 콘텐츠를 약간 투명하게 만듭니다.

이것은 물건이 방에 떠 있다는 느낌을 없애준다.

근거리 비네팅은 플레이어가 너무 가까워지면 콘텐츠가 페이드됩니다.

이것은 가까운 비행기에 대한 콘텐츠 클리핑 문제를 방지합니다.

돌파구는 당신에게 접근하는 사람이 렌더링된 뷰를 돌파할 수 있게 해주므로, 그들은 당신이 눈치 채 당신을 마주치지 않습니다.

마지막으로, 접지 그림자는 실제 물체 근처에 배치될 때 렌더링된 물체에 추가되어 장면에 더 통합되어 있다고 느끼게 한다.

완전 몰입형 렌더링은 공유 렌더링과 유사하게 작동하지만, 이 경우 패스스루 및 기타 앱과 화면을 공유하는 대신 앱이 유일하게 볼 수 있습니다.

이 모드에서는 플레이어 주변의 실제 시야를 대체하는 환경을 렌더링합니다.

이 모드에서의 렌더링은 공유 모드에서의 렌더링과 유사하게 작동합니다.

당신은 여전히 그 장면을 설명하고 장치는 그것을 렌더링합니다.

하지만 당신이 플레이어가 보는 모든 것을 통제하기 때문에, 당신은 더 많은 자유를 가질 수 있습니다.

예를 들어, 플레이어가 있는 방과 같은 조명 환경을 사용할 필요가 없습니다.

당신은 세상을 당신이 원하는 만큼 밝거나 어둡게 만들 수 있습니다.

장치의 강점은 공유 모드에 있지만, 플레이어를 다른 장소로 옮기고 싶을 때 완전히 몰입감 있는 경험이 있습니다.

자신만의 엔진을 작성하고 싶다면, CompositorServices API를 사용하면 xrOS에서 Metal 렌더링에 액세스할 수 있습니다.

세계 추적과 손 추적을 추가하여 완전히 몰입감 있는 경험을 만드는 ARKit과 결합할 수 있습니다.

이 모드에서는 화면에 완전히 액세스하고 각 눈의 장면을 렌더링할 수 있습니다.

완전히 사용자 지정 금속 셰이더와 포스트 프로세서를 사용할 수 있습니다.

이를 통해 실제 콘텐츠를 자신의 가상 콘텐츠로 완전히 대체할 수 있습니다.

패스스루와 다른 앱들은 숨겨져 있다.

이에 대한 자세한 내용은 "몰입형 앱을 위한 Discover Metal"을 확인하세요.

오디오도 몰입할 수 있다.

xrOS는 공간 오디오를 사용하여 플레이어의 공간에서 물체에 생명을 불어넣고, 리버브와 실제 방 음향을 자동으로 일치시킵니다.

AVAudioEngine과 같은 표준 iOS 오디오 API를 사용하여 오디오를 재생하는 경우, 오디오는 앱 창을 기준으로 배치됩니다.

플레이어 공간의 장면의 다른 물체에서 소리가 나오기를 원한다면, 장면의 특정 엔티티에서 RealityKit을 통해 오디오를 재생해야 합니다.

또한 Apple 또는 외부 API를 사용하여 자신만의 오디오를 할 수 있는 옵션이 있습니다.

오디오를 추적하려면, ARKit을 사용하여 플레이어의 머리 위치를 확인해야 합니다.

그래픽과 오디오 외에도, 상호 작용은 몰입형 경험의 또 다른 핵심 부분이다.

결국, 모든 게임은 입력이 필요하며, 이 플랫폼은 장치와 상호 작용할 수 있는 여러 가지 방법을 제공한다.

SwiftUI와 드래그 및 확대와 같은 다른 표준 시스템 제스처를 통해 장면의 개체에 대한 입력 이벤트를 얻을 수 있습니다.

이것은 물리학 충돌을 기반으로 한다.

제스처가 물체에서 작동하도록 하려면, 충돌 모양을 제공하는 CollisionComponent와 상호 작용 가능한 것으로 표시하는 InputTargetComponent가 모두 있어야 합니다.

공간 입력은 플레이어에게 꽤 마법처럼 느껴질 수 있지만, 게임 입력을 위한 다른 옵션도 있습니다.

심지어 게임 컨트롤러도!

시스템 룩 앤 탭 제스처는 자연스럽게 느껴지지만, 볼 수 있는 눈은 한 세트와 두드리거나, 꼬집거나, 잡을 수 있는 두 손만 있습니다.

몇몇 게임은 더 많은 입력 포인트가 필요하다.

한 가지 가능성은 표준 블루투스 컨트롤러를 사용하는 것이다.

xrOS는 트랙패드, 마우스, 키보드뿐만 아니라 블루투스 기반 게임 컨트롤러를 지원합니다.

이것은 전통적인 게임에 좋은 선택이 될 수 있다.

그리고 xrOS는 또한 자신의 몸을 컨트롤러로 사용하는 것과 같은 더 틀에 얽매이지 않는 입력을 허용합니다.

핸드 트래킹을 사용하여 플레이어가 가상 물체를 잡거나 물체를 가리키거나 가라데를 자르는 것과 같은 사용자 지정 제스처를 구현할 수 있습니다.

ARKit을 통해 손 추적에 액세스하면, 장치는 앱이 당신의 위치나 마이크를 사용하고 싶을 때와 마찬가지로 플레이어에게 권한을 요청합니다.

이 입력을 설계할 때 고려해야 할 몇 가지 사항이 있습니다.

손은 카메라에 보일 때만 추적할 수 있다.

정말 빠른 손 움직임은 추적하기 어려울 수 있다.

그걸 고려해.

풀 스페이스에서 일할 때, 장면 이해를 요청할 수 있습니다.

장면 이해는 플레이어 주변의 방을 나타내는 가상 메쉬를 제공한다.

그것은 또한 수평 및 수직 표면을 찾기 위해 평면 감지를 할 수 있다.

카펫이든 나무든 그 표면의 재료를 얻을 수도 있습니다.

이를 통해 게임 입력의 일부로 방 자체를 사용할 수 있습니다.

손 추적과 마찬가지로, 이것은 플레이어의 허가가 필요하다.

모든 입력 옵션으로, 당신은 당신의 게임에 적합한 것이 무엇인지 알아내야 합니다.

직접 입력을 위해 플레이어의 몸을 사용하는 것은 그들을 참여시키는 좋은 방법이다.

하지만 손을 들고 몸짓을 하는 것도 시간이 지남에 따라 피곤해질 수 있다.

게임이 오랜 시간 동안 플레이되거나 많은 빠른 행동이 필요하다면, 간접적인 제스처와 시선을 어떻게 사용할 수 있는지 생각해 보세요.

그렇게 하면 플레이어는 무릎에 편안하게 손을 얹고 손을 움직이는 대신 Look & Tap을 할 수 있습니다.

그 장치는 당신이 매일 사용하는 것이 되기 위한 것이므로, 편안함이 중요합니다.

그리고 그것이 말이 된다면, 당신은 또한 더 전통적인 게임 컨트롤러로 갈 수 있습니다.

이 플랫폼은 다른 플랫폼에서 익숙한 모든 멀티플레이어 및 네트워킹 기능을 지원합니다.

웹 기반 네트워킹, 저수준 소켓 기반 네트워킹 및 멀티피어 연결을 모두 사용할 수 있습니다.

SharePlay는 또한 플레이어가 더 친밀한 방식으로 쉽게 사교할 수 있게 해준다.

일부 플레이어가 iPhone이나 iPad에서 플레이하고 여전히 이 훌륭한 장치에 연결할 수 있는 네트워킹을 사용하여 게임을 만들 수도 있습니다.

iPad를 가지고 있는 친구와 함께 도미노 게임을 상상해 보세요, 그리고 그들은 당신이 풍부하고 몰입감 있는 3D 경험을 하는 동안 2D 경험을 할 수 있습니다.

이제 게임 장치로서 이것에 대해 조금 더 알게 되었으니, 게임을 만드는 데 사용할 수 있는 프레임워크가 있습니다.

2D 게임, 볼륨에 있는 게임 또는 완전 몰입형 게임을 만들고 싶은지에 따라 RealityKit, 몰입형 프레임워크를 사용하거나 Metal 위에 직접 무언가를 작성하거나 Unity를 사용하는 것과 같은 다양한 옵션이 있습니다.

이미 iPhone 또는 iPad용 게임을 만들었다면, 대부분의 경우, 게임은 Look & Tap을 사용하여 가상 창의 장치에서 자동으로 실행됩니다.

이것은 호환 가능한 3D 게임에도 적용된다는 점에 유의하십시오.

그들은 장치의 평평한 창문에서 달릴 것이다.

게임이 입체적이 되기를 원한다면, 공간 컴퓨팅 API를 사용해야 합니다.

호환 가능한 게임을 실행할 수 있다는 것은 훌륭하지만, 장치를 최대한 활용하고 싶다면, 그것을 목표로 게임을 구축하세요.

그렇게 하면 입력에 제스처를 사용하거나 원근법이나 체적 연기와 같은 2.5D 요소를 추가할 수 있습니다.

SwiftUI 또는 SpriteKit과 같은 2D 프레임워크를 사용하여 장치용 2D 게임을 만들 수 있습니다.

유니티를 사용하여 xrOS용 게임을 만들 수 있습니다.

이미 포팅하고 싶은 유니티 게임이 있거나 유니티 개발자라면 이것은 훌륭한 옵션입니다.

유니티 사용에 대해 더 알고 싶다면, "유니티 VR 앱을 완전한 몰입형 공간으로 가져오세요" 또는 "몰입형 유니티 앱 만들기" 세션으로 가세요.

마지막으로, 몰입형 공간 경험을 구축하기 위한 Apple의 실시간 렌더링 프레임워크인 RealityKit이 있습니다.

API에는 xrOS용 3D 게임을 만드는 좋은 방법으로 만들 수 있는 많은 새로운 기능이 있습니다.

RealityKit은 훌륭한 게임을 만드는 데 필요한 모든 기능을 지원합니다.

사용자 지정 동작을 위한 엔티티 구성 요소 시스템과 물리학, 애니메이션, 입자 및 오디오 지원과 함께 확장성이 있습니다.

렌더링 측면에서, RealityKit은 USD 모델과 사용자 지정 메쉬를 모두 지원합니다.

세계에서 당신의 물건을 접지하기 위해, MaterialX와 IBL 조명이 있습니다.

첨부 파일, 풍부한 SwiftUI를 RealityKit 객체에 직접 연결할 수 있는 새로운 기능.

SwiftUI를 사용하면 Windows, 볼륨, 공간, 앵커 및 포털과 같은 기능을 사용하여 다양한 방식으로 패스스루 및 렌더링된 콘텐츠를 혼합할 수 있습니다.

입력을 위해 시스템 제스처를 사용하거나 ARKit을 사용하여 손 추적 및 장면 이해에 액세스할 수 있습니다.

xrOS용 게임 구축을 시작하려면, xrOS 템플릿에서 새로운 Xcode 프로젝트를 만드세요.

이것은 당신에게 RealityView가 있는 SwiftUI 창을 제공합니다.

SwiftUI 계층 구조의 RealityView는 게임을 위한 3D 렌더링과 시뮬레이션을 제공합니다.

아직 SwiftUI에 익숙하지 않다면, 그것에 대해 조금 배울 가치가 있습니다.

기본적으로, 3D 콘텐츠는 창에 의해 형성된 부피 측정 상자에 나타납니다.

당신의 콘텐츠는 그 창에 국한되어 있으며 움직일 때 따라갈 것입니다.

RealityKit은 Swift API이다.

스위프트는 게임을 만드는 데 훌륭한 언어가 될 수 있지만, 다른 언어를 사용하고 싶다면, 할 수 있습니다.

당신은 그 언어와 Swift API 사이에 다리를 만들기만 하면 됩니다.

Xcode는 시뮬레이터와 함께 제공됩니다.

장치 없이 바로 게임 개발을 시작할 수 있습니다.

물론, 실제 장치에서 테스트하는 것은 항상 최선이다.

3D 콘텐츠는 기본적으로 SwiftUI 창에 표시됩니다.

게임 개발자로서 가장 먼저 하고 싶은 일 중 하나는 그 창에서 벗어나 플레이어의 주변에서 콘텐츠를 그리는 것입니다.

당신은 그것을 하기 위한 몇 가지 다른 옵션이 있습니다.

볼륨을 사용할 수 있습니다.

볼륨은 창문과 비슷하며, 한 가지 중요한 차이점이 있다.

창으로, 플레이어는 크기를 제어한다.

그들은 모퉁이를 끌고 원하는 만큼 크거나 작게 만들 수 있으며, 당신의 콘텐츠는 적응해야 합니다.

윈도우가 당신의 콘텐츠에 비해 너무 작다면, 당신의 콘텐츠는 잘릴 것입니다.

볼륨으로, 그것은 그 반대이다.

볼륨으로, 당신은 "나는 상자가 이렇게 크고, 이렇게 높고, 이렇게 깊기를 원한다"고 말한다.

플레이어는 여전히 그들이 원하는 곳에 그 상자를 놓을 수 있지만, 상자는 항상 같은 크기일 것이다.

그래서 당신은 상자가 당신의 전체 경험에 맞을 만큼 충분히 큰지 확인할 수 있으며, 콘텐츠가 클립되지 않는다는 것을 확신할 수 있습니다.

상자를 전혀 사용하고 싶지 않다면, 공간을 사용할 수 있습니다.

이를 통해 현실 세계에서 플레이어 주변의 콘텐츠를 렌더링할 수 있습니다.

예를 들어, 당신은 윙윙거리는 벌로 플레이어를 둘러쌀 수 있습니다.

다른 게임 유형에 해당하는 다양한 종류의 공간이 있다.

공유 공간을 사용하여 다른 앱과 함께 실행할 수 있으며, 게임이 실행되는 유일한 것이 되기를 원한다면 전체 공간을 사용할 수 있습니다.

앵커를 사용하면 장면을 현실 세계의 물체에 고정하고 움직일 때 따라갈 수 있습니다.

수평 또는 수직 표면 앵커를 사용하여 엔티티를 책상이나 벽에 고정할 수 있습니다.

플레이어의 손에 콘텐츠를 고정할 수 있는 핸드 앵커도 있습니다.

포털을 사용하면 플레이어의 현실에 구멍을 뚫어 자신만의 환상적인 현실을 만들 수 있습니다.

포털을 실제 벽에 고정하고 그 포털이 벽에 구멍을 뚫어 구멍 내부의 렌더링된 세계를 엿볼 수 있도록 할 수 있습니다.

당신은 그 포털 안에서 원하는 무엇이든 렌더링할 수 있으며, 포털 내부의 물체도 현실 세계로 나타날 수 있습니다.

RealityKit은 USD 파일을 로드하고 렌더링할 수 있습니다.

체적 콘텐츠를 시작하는 가장 쉬운 방법 중 하나는 미리 만들어진 물체로 장면을 조립하는 것이지만, 그것을 위해서는 일종의 시각적 도구가 필요합니다.

Reality Composer Pro는 Xcode와 함께 번들로 제공되는 도구입니다.

USD 모델을 로드하고 장치에서 어떻게 보일지 미리 볼 수 있습니다.

Reality Composer Pro로 프로젝트를 빌드할 때, 자산은 장치에서 사용하도록 자동으로 최적화됩니다.

이 세션에서 Reality Composer Pro에 대해 더 많이 배울 수 있습니다.

이 세션이 공간 컴퓨팅에 도움이 되는 게임 개발 로드맵이 되었으면 좋겠다.

이용 가능한 여러 프레임워크 세션에서 더 깊이 파고들세요.

이것은 다른 사람들과 어울리고 게임을 할 수 있는 훌륭한 플랫폼이다.

네가 그걸 위해 뭘 개발하는지 빨리 보고 싶어.

♪