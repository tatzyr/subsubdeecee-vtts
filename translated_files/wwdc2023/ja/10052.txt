10052

♪ ♪

アダム:こんにちは、私はアダムです。

このビデオでは、あなたのアプリがカレンダーとEventKitで時間を管理するのにどのように役立つかについて説明します。

まず、アプリがカレンダーと統合できるいくつかの方法を確認し、関連するフレームワークの概要を説明します。

次に、これらのフレームワークを使用して、イベントの追加、フルアクセスによるイベントの取得、仮想会議拡張の実装など、共通の機能を実装する方法の具体的な例を説明します。

人々は自分の時間を追跡し、将来の計画を立てるためにカレンダーに頼っていますが、カレンダーは1つのアプリ以上のものです。

カレンダーと統合するときにアプリが満たすことができるさまざまな役割があり、まとめると、これらの異なる役割はより豊かなカレンダー体験を提供します。

一部のアプリは、予約、チケットの購入、またはミートアップの手配をサポートしています。

彼らはイベントを追加して参加します。

一部のアプリは、カスタムカレンダーウィジェットやプランナーのために、イベントを表示して参加します。

他のアプリは両方向で貢献します。

彼らは、イベントを表示および編集することで、人々がスケジュールを管理するのに役立ちます。

音声通話やビデオ通話をサポートするアプリも参加できます。

仮想会議の拡張機能は、カレンダーアプリのエクスペリエンスを向上させるだけでなく、アプリへのショートカットも提供します。

これらすべてが一緒にフィットし、時間を管理するためのまとまりのある経験を提供します。

後で、これらの各分野で始めるために、いくつかの具体的な例を見ていきます。

カレンダーと統合するために使用できるフレームワークは2つあります。

EventKitフレームワークは、カレンダーデータを直接操作するために使用されます。

EventKitUIは、アプリにカレンダーUIを表示するためのビューコントローラーを提供するiOSとMacのCatalystフレームワークです。

それぞれを詳しく見てみましょう...

EventKitの基本的なタイプのいくつかから始めます。

EKEventStoreは、カレンダーデータの主な連絡先です。

イベントストアを使用してアクセスを要求し、取得または保存します。

申請にはこれらのうちの1つだけが必要です。

EKEventクラスは特定のイベントを表し、タイトル、開始日、終了日、場所などのプロパティがあります。

各イベントは、EKCalendarクラスで表されるカレンダーに属します。

カレンダーにはタイトルと色があり、イベントの色付けに役立ちます。

最後に、各カレンダーアカウントは、カレンダーのコレクションであるEKSourceで表されます。

ソースは、UIでカレンダーをグループ化するのに便利です。

EventKitは、カレンダーデータと対話するための基本的なフレームワークです。

EventKitUIは、いくつかの便利な組み込みビューを提供するために、EventKitの上に構築されています。

EventKitUIが提供する3つのビューコントローラーがあります。

EKEventEditViewControllerはイベントエディタを表示します。

これを使用して、新しいイベントを追加したり、既存のイベントを変更したりします。

EKEventViewControllerはイベントの詳細を表示します。

これを使用して、既存のイベントに関する情報をアプリに表示します。

また、EKCalendarChooserはカレンダーリストを表示し、単一選択または複数選択のいずれかをサポートします。

これを使用して、イベントを追加するカレンダーを選択したり、アプリで表示するカレンダーを選択したりできます。

カレンダーは非公開なので、システムはアプリが許可なくカレンダーイベントを読んだり書いたりするのを防ぎます。

アプリがカレンダーに持つことができるアクセスには、アクセスなし、書き込み専用アクセス、またはフルアクセスの3つのレベルがあります。

カレンダーにアクセスできないアプリは、EventKitUIまたはSiriイベントの提案を使用してイベントを追加できます。

書き込み専用アクセスのアプリは、EventKitを使用して直接イベントを追加できます。

また、フルアクセスのアプリは、既存のイベントを取得または変更したり、既存のカレンダーにアクセスしたり、新しいカレンダーを作成したりできます。

カレンダーと統合する最も一般的な方法の1つは、新しいイベントを追加することです。

イベントは、いくつかの異なる方法でカレンダーに追加できます。

EventKitUIまたはSiriイベント提案を使用して、一度に1つのイベントを追加します。

または、イベントを直接保存するには、EventKitを使用してください。

カレンダーにイベントを追加する最も簡単な方法は、EventKitUIにほとんどの作業をさせることです。

EKEventEditViewControllerを提示して、イベントの詳細が記入されたエディタを表示します。

これにより、イベントを保存するかどうかを決定する前に、カレンダーを選択したり、その他の変更を加えたりする機会が得られます。

iOS 17では、このUIは別のプロセスで実行されるため、カレンダーへのアクセスをリクエストする必要はありません。

EventKitUIでイベントを追加するのは4段階のプロセスです。

まず、イベントストアを作成します。

次に、イベントを作成し、詳細を入力します。

次に、イベントを編集するように設定されたビューコントローラーを作成します。

そして最後に、ビューコントローラーを提示します。

いくつかのコードでこれをより詳細に説明しましょう。

イベントストアを作成することから始めます。

次に、イベントを作成し、詳細を入力します。

ここで設定した詳細は、エディタUIで使用されます。

エディタが表示されると、人々は変更を加える機会がありますが、理想的には、追加ボタンをタップして確認できるため、適切な詳細を入力すると時間を節約できます。

すべてのイベントにはタイトルが必要です。

タイトルはウィジェットや通知を含む多くの場所で使用されているため、シンプルにしてください。

最も重要なプロパティは、開始日と終了日です。

日付コンポーネントを使用して開始日を作ります。

開始日が決まったら、期間を加えて終了日を計算します。

日付計算にFoundationのカレンダーとDateComponentsタイプを使用すると、夏時間の周りに驚くべき結果が得られます。

ここで、サンプルは開始日に2時間を追加します。

イベントが特定のタイムゾーンで行われる場合は、それも必ず設定してください。

デフォルトのタイムゾーンは、現在のシステムタイムゾーンになります。

イベントがどこで行われるかを人々に知らせる場所を設定します。

完全なアドレスを含めるか、MapKitハンドルを使用すると、マップの提案やアラートを残す時間などの機能が有効になります。

最後に、いくつかの詳細を提供するためにいくつかのメモを追加します。

イベントプロパティを設定したら、次のステップはEKEventEditViewControllerを作成することです。

イベントストアとイベントストアのプロパティを割り当てます。

エディタでは、イベントを追加したり、キャンセルしたりできます。

イベントを追加したかどうかを知りたい場合は、デリゲートプロパティを使用し、EKEventEditViewDelegateプロトコルを実装します。

最後に、編集者を提示してください。

現時点では、イベントはまだカレンダーに入っていません。

追加ボタンをタップすると保存され、キャンセルをタップすると何も保存せずにエディタが閉じられます。

EventKitUIでイベントを追加するより完全な例については、「EventKitとEventKitUIを使用してカレンダーにアクセスする」サンプルコードの「DropInLessons」ターゲットをチェックしてください。

カレンダーにイベントを追加するもう1つの方法は、アプリでの予約にSiriイベントの提案を使用することです。

Siri Event Suggestions APIは、Intents Frameworkの一部です。

カレンダーアクセスのプロンプトを必要とせず、アプリにUIも表示されません。

代わりに、これらのイベントは招待状のようにカレンダーの受信トレイに表示されます。

その後、カレンダーに追加するか、無視することができます。

Siriイベントの提案は、レストランやホテルの予約、フライトやレンタカーなどの旅行予約、コンサートやスポーツイベントなどのチケット付きイベントをサポートします。

予約が後でキャンセルまたは変更された場合、イベントを更新できます。

Siri Event Suggestions APIの使用は4段階のプロセスです。

まず、INReservationを作成します。

次に、意図と応答で予約をラップします。

次に、INInteractionを作成します。

最後に、インタラクションをシステムに寄付します。

サンプルコードに飛び込みましょう。

予約には、システムがそれを識別するために使用する一意の参照が必要です。

一意の語彙識別子と話し言葉のフレーズを持つINSpeakableStringのインスタンスを作成して、その参照を作成します。

このフレーズは、Siriと話すときにこの予約を参照するために使用できます。

INDateComponentsRangeを使用して、予約の開始時刻と終了時刻を設定します。

CLPlacemarkタイプを使用して、イベントに場所を指定します。

次に、INReservationのサブクラスの1つのインスタンスを作成して、それをすべてまとめます。

レストランの予約には、INRestaurantReservationを使用してください。

この初期化子には、表示されないいくつかのオプションの引数があり、各サブクラスには独自の特定のオプションがあります。

詳細については、ドキュメントを確認してください。

次のステップは、予約参照でINGetReservationDetailsIntentを作成することです。

次に、予約オブジェクトでINGetReservationDetailsIntentResponseを作成します。

次に、意図と応答でINInteractionを作成します。

最後に、インタラクションの寄付方法を呼び出します。

この例は、Siriイベントの提案でできることの表面を引っ掻くだけです。

Siriイベント提案の作成の詳細については、WWDC20の「Siriイベント提案でリーチを広げる」ビデオをご覧ください。

EventKitUIまたはSiriイベントの提案は、イベントを追加するための最良の体験を提供します。

アプリがカスタム編集UIを表示したり、同時に複数のイベントを追加したり、ユーザーとの対話なしでカレンダーにイベントを追加したりする必要がある場合にのみ、書き込み専用アクセスを使用してください。

書き込み専用アクセスをリクエストするには、Info.plistにNSCalendarsWriteOnlyAccess UsageDescriptionキーを記載して、アプリがアクセスを必要とする理由を説明します。

この文字列はリクエストプロンプトに表示されます。

サンプルアプリケーションのプロンプトは次のとおりです。「繰り返しレッスンを選択したカレンダーに保存します。」

書き込み専用アクセスにもいくつかの制限があります。

一つには、人々はアクセスを許可しないことを選択するかもしれません。

アクセスが許可されている場合、アプリは、同じアプリによって追加されたイベントを含め、カレンダーから既存のイベントを読み取ることができません。

アプリはまた、カレンダーリストを読んだり、新しいカレンダーを作成したりすることはできません。

書き込み専用アクセスは、iOS 17とmacOS Sonomaで新しく追加されたものです。

これが既存のアプリにどのように影響するかの詳細については、「プライバシーの新機能」ビデオをご覧ください。

書き込み専用アクセスで新しいイベントを追加すると、EventKitUIを使用して新しいイベントを追加するのと似ています。

それは同じように始まります: イベントストアを作成します。

次に、書き込み専用アクセスを要求します。

アクセスが許可されている場合は、新しいイベントを作成し、詳細を入力します。

最後に、イベントを保存します。

それをもっと詳しく調べてみましょう。

イベントストアを作成することから始めます。

次に、requestWriteOnlyAccessToEventsメソッドを呼び出して、書き込み専用アクセスを要求します。

戻り値は、アクセスが許可されたかどうかを示します。

人々はアクセスを拒否することを選ぶことができるので、それを優雅に処理してください。

アクセス要求は、アプリがアクセスを必要とする理由を人々が理解したときに承認される可能性が最も高いので、誰かが最初にそれを必要とする機能と対話したときにアクセスを要求する必要があります。

次に、イベントを作成し、詳細を入力します。

ここにはもう一つの重要な違いがあります。

EventKitUIを使用すると、入力した詳細がエディタに表示され、入力されていないものはデフォルト値になります。

EventKitで直接イベントを保存すると、何も入力されなくなります。

あなたが設定したものは、保存されるものです。

入力する必要があるプロパティがいくつかあります。そうしないと、保存が失敗します。

必要なプロパティの1つはカレンダーです。

イベントストアのdefaultCalendarForNewEventsプロパティを使用して、設定でデフォルトとして設定されたカレンダーを使用します。

その他の必要なプロパティは、タイトル、開始日、終了日です。

それ以外はすべてオプションですが、できるだけ記入するのが良いです。

詳細が入力されたら、イベントストアの保存方法を使用してイベントを保存します。

EventKitでイベントを追加する完全な例を見るには、「EventKitとEventKitUIを使用してカレンダーにアクセスする」サンプルプロジェクトの「RepeatingLessons」ターゲットをチェックしてください。

カレンダーにイベントを追加したいアプリは、EventKitUI、Siriイベントの提案、または書き込み専用アクセスを使用する必要があります。

カレンダーデータを読む必要があるごく少数のアプリには、フルアクセスがあります。

アプリに既存のイベントの表示、更新、または削除が必要なコア機能がある場合にのみ、フルアクセスをリクエストしてください。

フルアクセスをリクエストするには、Info.plistにNSCalendars FullAccessUsageDescriptionキーを含めてください。

この文字列はリクエストプロンプトに表示されます。

カレンダーには機密情報が含まれており、フルアクセスのプロンプトには、含まれているデータ量が記載されています。

アプリがカレンダーを読むことを許可するには、多くの信頼が必要です。

人々がまだあなたのアプリを信頼していない場合、リクエストは拒否される可能性があります。

アプリのコアエクスペリエンスに不可欠な場合にのみフルアクセスを要求し、アクセスが必要な理由が明確になったときにのみ要求してください。

アプリがコア機能のフルアクセスが必要な場合は、おそらくイベントを取得する必要があります。

これを行うには、まずイベントストアを作成します。

次に、フルアクセスをリクエストします。

次に、述語を作成します。

そして最後に、イベントストアからイベントを取得します。

そのコードをチェックしてみましょう。 

他の例と同様に、イベントストアを作成することから始めます。

アプリにはイベントストアが1つしかないので、必ずこれを再利用してください。

次に、requestFullAccessToEventsメソッドを呼び出してフルアクセスを要求します。

これにより、プロンプトが表示され、アクセスが許可されたかどうかが返されます。

フルアクセスプロンプトはより頻繁に拒否されるので、必ず処理してください。

フルアクセスができたら、イベントストアのpredicateForEventsメソッドを呼び出して述語を作成します。

述語は、日付範囲とオプションのカレンダーリストでフェッチするイベントを記述します。

このコードは、現在の月の範囲を使用します。

最高のパフォーマンスのために、可能な限り最短範囲を使用してください。

カレンダーの引数がnilのままの場合、結果にはすべてのカレンダーのイベントが含まれます。

最後に、一致するイベントの配列を返すイベントストアのevents(matching:)メソッドに述語を渡すことで、イベントを取得します。

この配列のイベントは必ずしも順序付けられていないので、必要に応じて結果を並べ替えてください。

イベントの取得の完全な例で遊びたい場合は、「EventKitとEventKitUIを使用してカレンダーにアクセスする」サンプルプロジェクトの「MonthlyEvents」ターゲットをチェックしてください。

iOS 17とmacOS Sonomaより前のリリースをサポートするには、ランタイムの可用性チェックを実行します。

iOS 17とmacOS Sonoma以降の新しいrequestAccessメソッドを呼び出します。

以前のOSでは、レガシーrequestAccessメソッドを呼び出します。

iOS 17またはmacOS Sonomaの前には、追加の使用文字列が必要です。

カレンダーへのアクセスを要求するためのNSCalendarsUsageDescriptionキーを含めます。

EventKitUIを使用するアプリには、EventKitUIがアプリの連絡先アクセスを要求するため、NSContactsUsageDescriptionキーも含める必要があります。

アクセスを要求するときにアプリにこれらの文字列が欠落している場合、クラッシュします。

これまでのところ、イベントを追加する方法とイベントの取得方法についていくつか説明しましたが、イベントを扱うことはカレンダーと統合する唯一の方法ではありません。

アプリが音声通話またはビデオ通話をサポートしている場合は、仮想会議拡張機能を使用して、通話をイベントに直接追加できるようにします。

これらの拡張機能を使用するには2つの方法があります。

イベントに場所を追加すると、カスタム仮想会議オプションが場所ピッカーに表示されます。

この例には、FaceTimeとSkypeの仮想会議の拡張機能によって提供されるオプションがあります。

これらのいずれかをタップすると、その仮想会議がイベントに追加されます。

仮想会議があるイベントには、イベントの詳細にカスタム参加オプションが表示されます。

仮想会議の拡張には、ほんの数ステップで実行できます。

まず、Xcodeで新しい仮想会議拡張ターゲットを作成します。

次に、拡張プロトコルには実装する2つの方法があります。

fetchAvailableRoomTypesを実装して利用可能なルームタイプを提供し、fetchVirtualConferenceを実装して、選択したルームタイプの仮想会議オブジェクトを提供します。

例を見てみましょう。 例を見てみましょう。

まず、Xcodeで仮想会議の拡張ターゲットを作成します。

新しいターゲットには、EKVirtualConferenceProviderのスタブされたサブクラスがあります。

オーバーライドする最初の方法は、fetchAvailableRoomTypesです。

部屋タイプはロケーションピッカーに表示されます。

各部屋タイプのタイトルを選択してください。

これは、アプリアイコンの横にあるUIに表示されます。

また、各部屋タイプの一意の識別子を選択します。

この識別子は、どの部屋タイプが選択されたかを拡張機能に知らせるために使用されます。

タイトルと識別子を使用して、EKVirtualConferenceRoomTypeDescriptorのインスタンスを作成します。

アプリが複数の部屋タイプをサポートしている場合は、それぞれにインスタンスを作成してください。

最後に、部屋タイプの配列を返します。

次に実装する方法はfetchVirtualConferenceです。

これは、部屋タイプの1つが選択されたときに呼び出されます。

識別子引数は、どの部屋が選択されたかを示します。

仮想会議には、カレンダーに参加方法を伝える1つ以上のURL記述子があります。

開くURLとオプションのタイトルを持つEKVirtualConferenceURLDescriptorを作成します。

URLにユニバーサルリンクを使用して、アプリを直接開くことができます。

タイトルは、複数の参加オプションを区別するのに役立ちます。

参加する方法は1つしかないので、ここでは必要ありません。

詳細文字列に追加情報を入力します。

このテキストは、イベント詳細UIの特別な仮想会議セクションに含まれます。

最後に、これらすべてをまとめて、EKVirtualConferenceDescriptorを作成して返します。

ここのタイトルは、複数の部屋タイプを区別するのに役立ちます。

この例には1つの部屋タイプしかないので、タイトルはゼロのままです。

これら2つの方法だけで、アプリは仮想会議のオプションとしてカレンダーアプリのロケーションピッカーに表示されます。

カレンダーと統合するいくつかの異なる方法を取り上げたので、アプリがどのように貢献できるかを考えてください。

EventKitUIまたはSiriイベントの提案を使用して、アクセスを要求せずにイベントを追加します。

アクセスをリクエストする必要がある場合は、必要な最小限のアクセスをリクエストし、必要な場合にのみリクエストしてください。

また、音声またはビデオ通話アプリをお持ちの場合は、仮想会議拡張機能を実装してください。

あなたのアプリがカレンダーとどのように統合されるかを見るのが待ちきれません。

見てくれてありがとう。

♪ ♪