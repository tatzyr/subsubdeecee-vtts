10155

♪ ♪

マリーナ：こんにちは、WWDCへようこそ。

私の名前はマリーナで、後で同僚のマットが加わります。

私たちはAppleのローカリゼーションチームから来ており、今日はストリングカタログをお見せできることを嬉しく思います。

ここアップルでは、アクセシビリティと包括性を強く信じています。

アプリをローカライズすることは、コンテンツが世界中のより多くの人々に届くようにする1つの方法です。

実際、今日、私たちは40以上の言語でオペレーティングシステムを出荷し、誰もが母国語で製品を使用できるように、この数を継続的に拡大しています。

私たちのチームは、ローカリゼーションをできるだけ簡単にするためにXcodeでツールを提供することにコミットしており、今日、私たちはあなたのプロジェクトでローカライズされたコンテンツを管理するための新しい改善とワークフローを提示することに興奮しています。

以前は、アプリをローカライズしたい場合は、文字列とstringsdictファイルを維持する必要がありました。

これにより、すべての文字列を手動でコードと同期させる必要があり、多くの場合、コンテンツのローカライズを見逃す可能性があります。

これにより、ユーザーにローカライズされていない文字列が発生する可能性があります。

私たちのプロジェクトは長年にわたってこのプロセスに依存してきましたが、Xcode 15では文字列カタログを導入しています。

時間が経つにつれて、この新しいフォーマットはXcodeの文字列とstringsdictファイルの両方に取って代わります。

文字列カタログを使用すると、すべての文字列を1か所で簡単に管理でき、出荷前にコンテンツが完全にローカライズされていることを確信できます。

それがどのように機能するか見てみましょう。

このコードでは、SwiftUIコントロールを使用してビューを構築し、コンテンツに入力しています。

そして、これは文字列カタログです。

Swiftコードで見たすべての文字列は、Xcodeによって自動的に抽出されました。

自分で追加する必要はありませんでした。

ブラジルの友人がこのアプリを使えるようにしたいので、ポルトガル語に翻訳しました。

私はこの裏庭を訪れた最近の鳥を展示するこのビューを持っています。

ここでは、裏庭を訪れた鳥の実際の数を表示したいので、この数を表す変数を追加させてください。

そして、これはプレビューにあります。

今、私たちは鳥の数を見ることができます。

プロジェクトを構築し、カタログに戻ります。

それは簡単でした。これが新しい文字列です。

そして、私の翻訳の進捗状況が下がっていることがわかります。

文字列カタログには、複雑な操作を簡単に実行できる強力な編集機能も付属しています。

たとえば、この文字列にはタップという単語がありますが、これはマルチプラットフォームアプリなので、Macデバイスの場合、正しい単語を使用していることを確認したいです。

だから、私の英語の弦に戻って、「もっと学ぶためにタップ」という弦を見つけましょう。

ここにあります。

右クリックします。

選択はデバイスによって異なります。Macを選んでください。

そして、テキストを正しく適応させます。

そして、それだけです。

さて、自分のビューに戻り、実行先をMacに変更すると...

プレビューを使って私の作品をチェックすることができます。

それは簡単でした。

ストリングカタログでできることはたくさんあります。

すべてがどのように機能するかを詳しく見てみましょう。

文字列を抽出できる場所から始め、文字列カタログと対話するためのXcodeのネイティブエディタを探索し、ローカリゼーションのエクスポートプロセスを確認します。

次に、ストリングカタログがどのように構築され、既存のプロジェクトでどのように採用できるかを見ていきます。

まず、私はそれをマットに引き渡して、ローカライズ可能な文字列とそれらがどこから来たのかについて話し合います。

マット：ありがとう、マリーナ！

ローカライズ可能な文字列は、単に実行時にユーザーに表示されるテキストの文字列であるため、アプリがサポートするすべての言語に翻訳する必要があります。

ローカライズ可能な文字列には4つのコンポーネントがあります。キーは文字列の一意の識別子であり、多くの場合、文字列自体と同等です。

これは、表示する適切な値を検索するために実行時に使用されるものです。

デフォルト値は必要に応じて明示的に指定できますが、それ以外の場合はデフォルトのローカリゼーションのキーにフォールバックします。

Xcode 14.3では、プロジェクトエディタを使用してプロジェクトのデフォルトのローカリゼーションを変更する機能を導入しました。

これは、ソースコードの文字列が英語でない場合に便利です。

次に、文字列コメントは、文字列がユーザーインターフェイスでどこでどのように使用されているかについて、翻訳者にコンテキストを与える方法を提供します。

翻訳者の曖昧さを解決するために、文字列にコメントを追加することをお勧めします。

最後に、各ローカライズ可能な文字列は、翻訳が保存される1つ以上のファイルに対応する文字列テーブルに属します。

デフォルトでは、コードの文字列は「Localizable」テーブルに配置されますが、文字列を他の方法で整理したい場合はカスタマイズできます。

文字列テーブルを詳しく見てみましょう。

.Stringsファイルを使用する既存のアプリケーションの場合、単一の文字列テーブルには、実際にはサポートされている各言語のlprojディレクトリ内に.stringsとおそらく.stringsdictファイルが含まれています。

ここに表示されているすべてのファイルは、「ローカライズ可能な」文字列テーブルを構成する。

一方、文字列カタログには、文字列テーブル全体が1つのファイルに含まれています。

これには、そのテーブル内の各ローカライズ可能な文字列のすべての翻訳と追加のメタデータが含まれます。

文字列を複数の文字列テーブルに整理したい場合は、複数の文字列カタログを作成できます。

各カタログには、そのテーブルに属する文字列キーと、アプリがサポートするすべての言語での翻訳が含まれています。

キーは包含テーブル内で常に一意ですが、キーがテーブル間で一意である必要はありません。

例えば、「WWDCへようこそ!」文字列は、アプリ内の異なるコンテキストで表示される可能性があるため、ここでは両方のファイルに存在します。

Marinaが以前に述べたように、Xcode 15は自動的に文字列カタログに入力し、プロジェクトで見つかったローカライズ可能な文字列と同期させるために最善を尽くします。

しかし、Xcodeはこれらのローカライズ可能な文字列をどこで見つけますか?

まあ、ローカライズ可能な文字列が住んでいるかもしれない様々な場所があります。

Xcodeは、ソースコード、インターフェイスビルダーファイル、さらには文字列カタログに含める情報plistの文字列を見つけることができます。

しばらく前からアプリをローカライズしているなら、これらの多くは馴染みがあるはずです。

それらのいくつかを詳しく見てみましょう。

SwiftUIから始めます。

SwiftUIは、ビュー内で文字列リテラルを指定するたびに、その文字列は自動的にローカライズ可能と見なされるため、ローカリゼーションをシームレスにします。

これらの文字列はすべてローカライズ可能と見なされ、存在する場合はLocalizable.xcstringsという名前の文字列カタログに抽出されます。

これは、LocalizedStringKeyのタイプを受け入れる任意のパラメータに対して機能します。

SwiftUI文字列は、テキストビューを使用して、コメント、カスタムテーブル名、または文字列ルックアップ用のバンドルを指定できます。

また、クライアントに対してローカライズ可能と見なされるべき文字列を受け入れる独自のカスタムビューを定義することもできます。

ここでは、StringタイプとしてLocalizedStringResourceを使用していることに注意してください。

Xcodeは、コールサイトでLocalizedStringResourceをインスタンス化するために文字列リテラルが使用されているのを見ると、文字列がローカライズ可能であることがわかります。

LocalizedStringResourceは、ローカライズ可能な文字列を表現して渡すための推奨型です。

文字列リテラルを使用した初期化をサポートするだけでなく、コメント、テーブル名、または文字列キーとは異なるデフォルト値も提供できます。

では、より一般的にSwiftコードに注意を向けましょう。

ここには、後で提示される文字列を含むモデルコードがいくつかあります。

StringとAttributedStringのローカライズされた初期化子を使用して、実行時にユーザーに表示される文字列を指定しています。

LocalizedStringResourceは、Foundationをインポートした場所ならどこでも直接使用できます。

文字列カタログは、ローカライズ可能なSwift文字列を抽出するために、Swiftコンパイラの強力な技術を利用します。

このため、ビルド設定「コンパイラを使用してスウィフト文字列を抽出する」を有効にしてください。

しかし、文字列カタログは、Swiftコード以上のものから文字列を抽出することができます。

NSLocalizedStringを使用したObjective-Cコードの例を次に示します。

NSLocalizedStringマクロに埋め込まれた文字列リテラルは、自動的にローカライズ可能と見なされ、検出可能な独自の同様のマクロを定義することもできます。

同じ概念は、CFCopyLocalizedStringを使用してCコードでも使用できます。

CまたはObjective-Cでカスタムローカライズされた文字列マクロを指定するには、ローカライズされた文字列マクロ名のビルド設定を使用します。

これがソースコードでどのように機能するかを見たので、Interface Builderでローカライズ可能な文字列を探りましょう。

インターフェイスビルダーで指定された文字列は、自動的にローカライズ可能として扱われます。

インスペクタを使用して、これらの文字列のコメントを指定して、翻訳者に表示される場所に関するコンテキストを提供することもできます。

文字列カタログがストーリーボードまたはxibとペアリングされている場合、インターフェイスビルダーからのすべてのローカライズ可能な文字列がカタログに存在します。

ソースコードと同様に、Xcodeはプロジェクトが構築されるたびにカタログを更新します。

このプロセスは、Info plistファイルでも同様に機能します。

このためには、InfoPlist.xcstringsファイルをプロジェクトに追加し、目的のターゲットに追加するだけです。

ビルドするたびに、Xcodeはローカライズ可能な情報plistキーの既知のセットをカタログに追加し、必要に応じて手動で追加できます。

最後に、Xcodeには、App Shortcutのフレーズをローカライズする方法に、今年いくつかの大きな改善が含まれています。

詳細については、今年の講演「Spotlight your app with App Shortcuts」を必ずチェックしてください。

Xcodeがローカライズ可能な文字列を見つけることができるさまざまな場所を見学したので、これらの文字列が文字列カタログにどのようになるかについてもう少し話しましょう。

ビルドするたびに、Xcodeは現在のスキームとプラットフォームでローカライズ可能な文字列を発見します。

ソースコードからの文字列は、ローカライズ可能な文字列の真実のソースとして機能しますが、文字列カタログのソース文字列は同期されます。

コードで新しい文字列が検出されると、Xcodeはそれらを文字列カタログに追加します。

この時点で、文字列は翻訳する準備ができています。

先に説明したように、ローカライズ可能な文字列は、コードで指定されたデフォルトのソース値を持つ可能性があります。

その場合、カタログはコードから新しい値で更新されます。

Xcodeは、コードから文字列を削除したときに検出することもできます。

文字列がまだ翻訳されていない場合、Xcodeはあなたのためにそれを削除します。

ただし、文字列の翻訳をすでに提供してから削除した場合、Xcodeはそれをそのままにして、古いものとしてマークします。

これは、文字列がコードで見つからなかったことを示しています。

不要になったことを確認できれば、文字列とその翻訳を削除できます。

または、インスペクタを使用して、その特定の文字列を手動で管理したいことをXcodeに伝えることもできます。

手動で管理された文字列は、ビルド後にローカリゼーションを同期するときにXcodeによって更新または削除されることはありません。

これは、キーがコードで動的に構築されているか、おそらくデータベースに由来する文字列に役立ちます。

すべての文字列を文字列カタログに抽出したので、文字列カタログエディタが翻訳を簡単に管理する方法を詳しく見てみましょう。

文字列カタログには、アプリをローカライズする際に、状態と翻訳の進捗状況を追跡するためのファーストクラスのサポートが付属しています。

コードに文字列が見つからなくなったときに、Xcodeがどのように文字列を古いものとして表示するかについては、すでに話しました。

しかし、あなたが知っておくべき他の3つのローカリゼーション状態があります。

「新規」は、文字列がまだ選択した言語に翻訳されていないことを示します。

コードに新しい文字列を追加した後、これが表示されます。

「レビューが必要」は、値を変更する必要がある可能性があるため、文字列がローカライザーの注意を必要とすることを示します。

現在の値を使用する場合は、コンテキストメニューから「レビュー済みとしてマーク」を選択するだけです。

このメニューを使用して、ローカライザーによるレビューのために文字列をマークすることもできます。

これは、翻訳の欠陥に関するバグレポートを受け取った場合に便利です。

最後に、選択した言語で翻訳された文字列には緑色のチェックマークが表示されます。

これは、それ以上の行動が必要ないことを示しています。

開発者として、もう1つの一般的なローカリゼーションの課題は複数化です。

たとえば、Marinaが以前にBackyard Birdsに追加した文字列で、最近の訪問者数が表示されます。

英語では、数字が1か他の数字かに応じて、文字列の文法を変更する必要があります。

しかし、ウクライナ語のような言語では、考慮すべきケースがさらに増えるかもしれません。

この問題を解決するには、渡された番号の値に基づいて文字列を変更する方法が必要です。

以前は、多数の言語でこの問題を解決するには、stringsdictファイルが必要でした。

このplist形式は正しく使用するのが難しく、文字列を複数形にするなどの単純なタスクにかなり高い障壁をもたらします。

現在、文字列カタログエディタには、文字列バリエーションワークフローのサポートが組み込まれています。

文字列のコンテキストメニューを表示すると、文字列を変更するオプションが表示されます。

また、デフォルトのローカリゼーションで文字列を変更すると、翻訳も自動的に変更されます。

2つの変数で複数のバリエーションを使用する必要がある文字列のより複雑な例を次に示します。

実行時には、いくつかの異なるシナリオで終わる可能性があります。

1つの裏庭に1羽の鳥、1つの裏庭に複数の鳥、複数の裏庭に複数の鳥、または複数の裏庭があるにもかかわらず1羽の鳥がいるかもしれません。

いずれの場合も、数字を囲む文字列は、文法的な一致を維持するために少し異なる方法で翻訳する必要があります。

文字列カタログエディタを使用すると、これも簡単にできます。

ここで代替品の出番です。

ここでは、文字列の両方の引数を複数形で変更しました。

@記号の接頭辞が付いた各置換は、複数のケースとその値の辞書を格納します。

この例には、鳥の数をフォーマットするための「鳥」の置換と、裏庭の数をフォーマットするための「ヤード」の置換が含まれています。

実行時に、ここに示されているトップレベルの文字列が使用され、参照される各置換から適切な複数形のケースで置き換えられます。

したがって、この例では、これらの文字列のいずれかを生成し、各置換の可能な複数のケースの順列を効果的に作成できます。

置換は通常、文字列に渡された引数に対応し、多くの場合、文字列補間を使用します。

インスペクタでは、Xcodeは、数値に使用する引数の位置に関する情報と、渡されるタイプのCスタイルの書式指定子を表示します。

ここに示されているヤード置換は、ソースコードで使用される2番目の文字列補間であるため、引数2に対応しています。

Backyards.countの値は、この置換内で1つまたは他のケースを使用するかどうかを判断するために使用されます。

このようにして、文字列カタログは、このような高度なユースケースをサポートしながら、さまざまな文字列にシンプルなUIを提供します。

さて、これらのテクニックを実行するためにマリーナに戻ります。

マリーナ:ありがとう、マット。

Backyard Birdsアプリに戻ると、文字列カタログエディタを使用すると、探している文字列を簡単に見つけることができます。

「学ぶ」という単語を含むすべての文字列を見つけるためにフィルタリングしたり、状態別に並べ替えて、上部に最も重要な状態を表示したりできます。

マットが指摘したように、コードにないがアプリに表示される文字列があるかもしれません。

例えば、私のアプリは、アプリの加入者のためにクラウドから来る特別な種類の鳥を表示するかもしれないことを知っています。

この場合、ここでプラスボタンを使用して、手動文字列を定義し、キーとコメントを与えることができます。

手動で管理された文字列は、Xcodeによって更新または削除されないことを覚えておいてください。

Xcodeにコードから文字列の抽出を開始したい場合は、インスペクタを展開してください...

そして、文字列を自動的に管理するように設定します。

Xcodeでは、ローカリゼーションの進捗状況を簡単に追跡できます。

各文字列の横には、翻訳状態を表すバッジが表示されます。

文字列がコードから追加されたとき、または私たちがやったように手動で追加されたとき、あなたはそれが「NEW」とマークされているのを見るでしょう、つまり、まだ翻訳されていないことを意味します。

ソース文字列が変更されるたびに、翻訳はレビューのためにマークされます。

以前、この文字列を英語で変更したので、既存の翻訳はレビューのためにマークされました。

この文字列がそのままで大丈夫であれば、文字列を右クリックして「レビュー済みとしてマーク」を選択するだけです。

私はポルトガル語を話すので、この翻訳を更新する必要があることを知っています。

この変更により、サイドバーでローカリゼーションの割合が上昇したことがわかります。

言語が完全にローカライズされると、サイドバーに緑色のチェックマークが表示されます。

Xcodeでローカリゼーションの進捗状況を追跡し、App Storeに送信する前にアプリが完全にローカライズされていることを確信できるのはこれが初めてです。

また、このアプリをウクライナ語でローカライズできるように準備したいです。

プラスボタンを押して、このリストから新しい言語を選択することで、文字列カタログエディタから直接これを行うことができます。

そして、これはまだ翻訳されていない私のウクライナのカタログです。

これは先ほど追加した文字列で、複数形で変更する必要があるようです。

そのために、英語に戻りましょう。

この文字列を右クリックして「複数形」を選択します。

英語では、複数形と単数形を区別する必要があることを知っているので、それを修正しましょう。

ポルトガル語では、複数形のケースは英語と同じです。

しかし、ウクライナ語を覗くと、複数のケースの別のセットが追加されたことがわかります。

私のウクライナの翻訳者は、これをどうするかを正確に知っているでしょう。

私の見解に戻って、私はそれぞれの裏庭に鳥の数を示す別のラベルを追加したいと思いました。

だから、それを追加させてください...

ビルド...

そして、私のカタログに戻ります。

そして、これは私のカタログにあります。

また、文字列を複数形に変化させたいのですが、複数の引数が含まれています。

今回は、文字列を右クリックして複数形を選択すると、どの引数を変えたいかを選択できます。

両方で変えましょう。

次に、実行時に複数化できるように置換を設定します。 置換

議論に同意する必要がある言葉を移動しましょう。

だから、「鳥」は「鳥」の置換に、「裏庭」は「ヤード」の置換に。

読みやすさのために、変数がどの引数に対応するかを知るために、置換の名前を変更したいと思います。

それは理解しやすいです。

今、マットは、ウクライナ語の翻訳のためにそれらを送信するために私たちの文字列をエクスポートする方法を教えてくれます。

マット:ありがとう、マリーナ。

すでに見たように、Xcodeを使用すると、文字列カタログで直接翻訳を簡単に提供および編集できますが、多くの場合、翻訳者と協力してXcodeの外部でアプリの文字列をローカライズする必要があります。

このシナリオでは、Xcodeはローカリゼーションのエクスポートオプションを提供します。

これにより、言語ごとに1つのローカリゼーションカタログが生成され、翻訳のために送信できます。

Xcode 10で最初に導入されたローカリゼーションカタログは、プロジェクトまたはワークスペース内のすべてのローカライズ可能なコンテンツを含むパッケージ形式です。

今のところ、すべてのローカライズ可能な文字列とその翻訳を含む内部XLIFFファイルに焦点を当てます。

XLIFFは、ローカリゼーションを保存および転送するための業界標準のフォーマットです。

あなたやツールがXLIFFファイルで直接作業する場合は、文字列カタログを使用してプロジェクトでさまざまな文字列がどのように表現されるかにいくつかの変更を認識する必要があります。

これは、もともと.stringsdictファイルで定義された複数文字列のXLIFF表現の例です。

ここに示されているトランスユニット識別子は、stringsdict plist形式へのパスとして機能します。

さまざまな文字列が代わりに文字列カタログに由来する場合、代わりにこのようになります。

文字列キー、セパレータシーケンス、そして最後にドット区切り構成文字列が含まれています。

この構成文字列は、単純な複数の指定子、デバイス指定子、複数の条件のチェーン、または置換内の複数のケースへのパスである可能性があります。

自動化ツールがこれらのキーを読みやすいだけでなく、人間が一目で読みやすく理解しやすいように設計しました。

翻訳ツールは、XLIFFの翻訳ユニットを目的のバリエーション構造に置き換えることで、以前は変更されていなかった文字列を変化させることもできます。

たとえば、現在まったく変化していない文字列を次に示します。

しかし、ポルトガル語では、特にApple Watchでより短い文字列を提供したいと思います。

そのユニットをXLIFFのdevice.applewatchとdevice.otherバリアントに置き換えることで、次のインポート時にこの言語に存在するバリエーション構造に影響を与えることができます。

ローカリゼーションをエクスポートするときにXLIFFがデフォルトで文字列カタログ形式を使用していることを確認するには、ローカリゼーションが文字列カタログを好むことを「はい」に設定してください。

翻訳者から翻訳されたローカリゼーションカタログを受け取ったら、それをプロジェクトにインポートすることができます。

文字列カタログから来た文字列の場合、インポートされたファイルで指定された翻訳は、適切な文字列カタログに自動的に追加されます。

裏庭の鳥でこれを試してみましょう。

マリーナ:私はポルトガル語を話すので、すでにアプリをポルトガル語に翻訳しましたが、ローカライズされたコンテンツを提供するために翻訳者のためにウクライナのローカリゼーションカタログを送信する必要があります。

まず、製品メニューのここをクリックし、ローカリゼーションのエクスポートを選択し、エクスポートする言語を選択します。

この場合、ウクライナ語だけです。

これで、エクスポートをクリックできます。

彼らが私に翻訳を送り返したら、私はそれらを私のアプリにインポートすることができます。

ああ、彼らはここにいます。

翻訳の準備ができたら、アプリに戻り、今回は製品メニューをクリックし、ローカリゼーションのインポートを選択し、ウクライナのローカリゼーションカタログを選択します。

さて、すべてがどのように見えるか見てみましょう。

完璧です、私のウクライナ語の翻訳は整っています、そして今、私は両方の言語に完全にローカライズされた私のアプリを持っています。

ポルトガル語でどのように見えるか見てみましょう。

スキームセレクタをクリックし、[スキームの編集]を選択します。

オプションでは、アプリの言語をシステムからポルトガル語に変更できます。

そして、私はアプリを実行します。

かっこいい、ここに私たちが一緒に働いた文字列のいくつかがあります。

翻訳が終わったので、引き継いでください、マット。

マット：アプリのコンテンツが完全に翻訳されたので、ビルド中に何が起こるかを簡単に議論しましょう。

文字列カタログは、Xcodeプロジェクト内のインタラクションのために特別に設計されています。

ボンネットの下のJSONファイルとして、ソース管理でも簡単に差分できるはずです。

次に、ビルド時に、これらのファイルは.stringsと.stringsdictファイルにコンパイルされます。

これらのファイル形式は長年にわたって当社のオペレーティングシステムでサポートされているため、最小展開目標を更新することなく、すぐに文字列カタログの使用を開始できることを嬉しく思います。

また、コードから抽出されたソース文字列が最終ビルドに含まれていないことも注目に値します。

これにより、実行時に表示される文字列に影響を与えることなく、ディスク容量を節約できるはずです。

これらすべての利点が実際にあるのを見たので、マリーナは既存のプロジェクトでストリングカタログを使い始める方法を紹介します。

Marina: Xcodeを使用すると、既存のプロジェクトを簡単に移行して文字列カタログを使用できます。

そして、あなたは自分のペースでこれを行うことができます。

準備ができたらいつでも、どの文字列ファイルとターゲットを移行するかを選択できます。

これは、昨年ローカライズした既存のアプリ、FoodTruckです。

ここでは、文字列とstringsdictファイルがあることがわかります。

文字列カタログはレガシーフォーマットと共存できるため、準備ができたらいつでもLocalizableテーブルを移行することを選択できます。

今これをやりましょう。

ファイルを右クリックして「文字列カタログにマイグレーション」を選択します。

Xcodeには、私のプロジェクト内のすべての移行可能なファイルを一覧表示する移行アシスタントが組み込まれています。

ここでは、FoodTruckターゲットの一部であるローカライズ可能なテーブルを見ることができます。

今からこれを移行します。

いいね！移行後、Xcodeは文字列を抽出するためのプロジェクトを構築します。

カタログがビルド後にどのように見えるか見てみましょう。

ここでは、私の文字列ファイルのすべての文字列と、stringsdictファイルの複数形さえも移行されたことがわかります。

私のアラビア語の翻訳はすべて整っていますが、ここではフランス語の翻訳の進捗状況が100%ではないことがわかります。

文字列カタログは、すでに私のプロジェクトでローカライズされていない文字列を見つけるのに役立っています。

FoodTruckには、まだローカライズされていない迅速なパッケージFoodTruckKitもあります。

ストリングカタログを使えば、新しいパッケージやプロジェクトのローカライズを始めるのはとても簡単です。

まず、パッケージマニフェストにデフォルトのローカリゼーションを追加し、Swift Toolsバージョン5.9を使用していることを確認します。

次に、デフォルトのテーブル名「Localizable」で新しい文字列カタログをパッケージに追加します。

プロジェクトを構築した後、パッケージ全体からすべての文字列を見ることができます。

新しいプロジェクトやパッケージのローカライズを始めるのはとても簡単です。

文字列カタログは、Xcodeのローカリゼーションの新しい基盤であり、プロジェクトの翻訳を管理するプロセスを簡素化します。

既存の文字列を移行して、今日から始められることを願っています。

そして、これまでにアプリをローカライズしたことがないなら、始めるのがいかに簡単かに触発されることを願っています。

Obrigada pela companhia hoje.

私たちに参加してくれてありがとう、そして幸せなバードウォッチング。

♪ ♪