10107

♪ ♪

ジャスティン：こんにちは！私の名前はジャスティンで、写真チームの一員です。

今日は、システムフォトピッカーの新しい改善と、アプリで使用できるすべての素晴らしい新しいAPIについてお連れします。

iOS 14で再設計されたピッカーUIを導入しました。

検索やズーム可能なグリッドなど、多くの素晴らしい機能を備えています。

さらに良いことに、それを使用するためにフォトライブラリへのアクセスをリクエストする必要はありません。

可能な限り、カスタムピッカーをシステムピッカーに置き換えることをお勧めします。

APIも本当に使いやすいです。

わずか数行のコードで、ピッカーを表示し、ユーザーが選択した画像を受け取ることができます。

昨年の「フォトピッカーの新機能」セッションでは、新しいAPIについて深く話しました。

このセッションでは、アプリにシステムピッカーを埋め込むために活用できる新しいAPIに焦点を当て、写真ピッキング体験をよりシームレスにします。

後で、新しいオプションメニューと、HDR写真、HDRビデオ、シネマティックモードビデオをサポートしたい場合のベストプラクティスについても説明します。

しかし、飛び込む前に、ピッカーのアクセスモデルを簡単に要約しましょう。

これはあなたがさっき見たピッカーです。

アプリで実行されているように見えますが、実際にはアプリの上にレンダリングされた別のプロセスで実行されています。

アプリはピッカーに直接アクセスできず、ピッカーコンテンツのスクリーンショットを撮ることさえできません。

ユーザーが実際に選択したものだけがアプリに返されます。

今年は、プロセス外のピッカーにより多くの構成オプションを導入します。

新しい「.photosPickerDisabledCapabilities」修飾子を使用すると、特定のピッカー機能を無効にできるため、独自のバージョンを実装できます。

たとえば、選択アクションを無効にすると、「キャンセル」ボタンと「追加」ボタンを非表示にすることができます。

新しい「.photosPickerAccessoryVisibility」修飾子を使用すると、ナビゲーションバーやツールバーなどのピッカーコンテンツの周りのアクセサリUIを非表示にすることができます。

「.frame」や「.padding」などの標準のSwiftUI修飾子を使用して、ピッカーのサイズと位置を指定することもできます。

「「追加」ボタンが非表示になっている場合、私のアプリはどのようにして複数選択モードでユーザーが選択したアセットを受け取ることができますか?」と疑問に思うかもしれません。

選択動作を「.continuous」に設定して、ライブ選択の更新を受信できるようになりました。

そして最後に、新しい「.photosPickerStyle(.inline)」修飾子を使用して、別のシートとして表示するのではなく、アプリにピッカーを埋め込むことができます。

ピッカーが埋め込まれていても、別のプロセスでレンダリングされます。

一部のユーザーは、アプリがライブラリへのアクセスを要求せずにすべての写真を表示するのを見ると心配するかもしれません。

アプリを使用するときにユーザーが安全に感じられるようにしたいので、埋め込みピッカーが初めて表示されると、アプリが選択した写真にしかアクセスできないことを説明するオンボーディングUIが自動的に表示されます。

写真のプライバシーバッジは、ピッカーが非公開でプロセス外であることを示します。

アプリがすでにフルサイズピッカーを表示している場合は、ユーザーがiOS 17にアップグレードすると、却下可能なバナーが表示されます。

プライバシー設定UIも更新され、より詳細な説明が記載されています。

さらに、ライブラリのアクセス許可プロンプトにいくつかの変更を加えました。

これらの変更の詳細については、「プライバシーの新機能」セッションをご覧ください。

さて、実際のAPIに戻りましょう。

まず彼らのユースケースを詳しく確認してから、各APIを詳しく説明します。

プロセス外のピッカーを埋め込みたい場合は、「.photosPickerStyle」修飾子を使用してください。

ピッカーの周りに独自のUIを配置するには、「.photosPickerAccessoryVisibility」を使用します。

また、指定されたエッジの周りのアクセサリを制御できるオプションの引数もあります。

デフォルト値はすべてのエッジです。

いくつかのピッカー機能の独自の代替品を実装したい場合は、「.photosPicker DisabledCapabilities」修飾子を使用してください。

最後に、選択の更新をリアルタイムで調整または応答する必要がある場合は、「selectionBehavior」が「.continuous」に設定されていることを確認してください。

では、正確には何がアクセサリーと見なされますか?

iOSでは、一番上のアクセサリはナビゲーションバーで、一番下のアクセサリはツールバーです。

iPadOSとmacOSでは、主要なアクセサリは、表示されているときのサイドバーです。

上部と下部のアクセサリーは、iOSが持っているものと似ています。

次に、無効にできるピッカー機能と、それらがピッカーUIにどのように影響するかを説明します。

検索機能が無効になっている場合、検索バーは非表示になります。

コレクションナビゲーションが無効になっている場合、アルバムタブは非表示になります。

iPadOSとmacOSでは、サイドバーも非表示になります。

ステージングエリアが無効になっている場合、ツールバーボタンはステータスラベルに置き換えられます。

連続選択せずに選択アクションを無効にした場合、「キャンセル」ボタンのみが非表示になり、「追加」ボタンは引き続き表示されます。

そうしないと、アプリはユーザー選択を受信できなくなります。

選択動作を「.continuous」に設定すると、両方のボタンが非表示になります。

では、新しいピッカースタイルを見てみましょう。

「.Presentation」スタイルと「.inline」スタイルに加えて、ピッカーは別の「.compact」スタイルもサポートしています。

これはデフォルトの「.presentation」スタイルです。

これは、すべてのアクセサリーが隠されている「.inline」スタイルです。

そして、これは「.コンパクト」スタイルです。

単一行ピッカーを使用すると、利用可能な垂直スペースが深刻に制約されているより多くの場所に埋め込むことができます。

デモですべてをつなげる時が来ました。

私はすでにテキストの説明で画像に注釈を付けることができるシンプルなアプリを作りました。

今何ができるかをお見せしましょう。

ピッカーをモーダルシートとして表示し、いくつかの画像を選択し、いくつかの説明を追加することができます。

デモでは、「写真を選択」ボタンを埋め込みピッカーに置き換えたいです。

「.photosPickerStyle(.inline)」修飾子を追加して試してみます。

うまくいきますが、まだ良く見えません。

リストを更新するには「追加」ボタンをタップする必要があり、ピッカーのサイズが変更された場合、ツールバーはデバイスの下端まで拡張されません。

でも、心配しないでください。

ほんの少しの微調整で、それははるかに良く見えることができます。

まず、ピッカーは安全なエリアの挿入を優雅に処理できるため、「.ignoresSafeArea」修飾子を使用して、ピッカーが画面の下端まで展開できます。

次に、ピッカーで写真を選択するとすぐにリストを更新できることを確認します。

実際、変更するのはとても簡単です。

選択動作を「.continuous」に設定することは、私がする必要があるすべてです。

リストがライブ更新されたので、ナビゲーションバーのボタンをもう保持する必要はありません。

「.photosPicker DisabledCapabilities」修飾子を使用して削除できます。

ピッカーは完全に機能しています。

しかし、ピッカーも素敵に見えるようにしたいです。

ナビゲーションバーとツールバーを非表示にすべきだと思います。

私はまた、ピッカーに固定された高さを与えたいです。

「.photosPicker AccessoryVisibility」修飾子を使用して、バーを非表示にし、他のSwiftUIビューと同様にピッカーの高さを調整できます。

今、それは素晴らしく見えます。

ほんの数分以内に、新しい埋め込みピッカーを表示するようにアプリを更新しました。

実際のデバイスでテストできるように、ビルドして実行します。

ズーム可能なグリッドを使用して、選択したい写真にすばやく移動できます。

選択した写真は自動的に私のアプリに表示されます。

私のアプリの写真ピッキング体験は、新しい埋め込みピッカーで大幅に改善されました。

デモはそれだけです。

私はデモでiPhoneを使用していましたが、同じAPIがiOS、iPadOS、macOSで利用可能です。

SwiftUIに加えて、同じAPIがUIKitとAppKitアプリでも利用可能です。

UIKitとAppKit APIを見てみましょう。

埋め込みピッカーは、同じPHPickerConfiguration APIを介して利用できます。

「選択」を「.continuous」に設定して、連続選択動作をオプトインできるようになりました。

「モード」を「.compact」に設定して、ピッカーを1行のレイアウトに設定することもできます。

「edgesWithoutContentMargins」を使用してナビゲーションバーなどのアクセサリを非表示にし、「disabledCapabilities」を使用して特定のピッカー機能を無効にすることができます。

「.photosPickerStyle(.inline)」修飾子を使用してピッカーを埋め込むことができるSwiftUI APIとは異なり、コンテナコントローラーに子ビューコントローラーとして追加する必要があります。

ピッカーのフレームを手動で設定するか、自動レイアウト制約を使用してピッカービューのサイズと配置を行うことができます。

サブビューを追加した後、追加されたことをピッカーに通知するだけです。

新しい「PHPickerConfiguration.Update」APIを使用すると、ユーザーに表示されている間にピッカーを更新できます。

既存の「deselectAsset」および「moveAsset」APIを使用して、選択したアセットの選択を解除または並べ替えることもできます。

次に、新しいオプションメニューと、それがアプリにどのように影響するかについて説明します。

新しいオプションメニューを使用すると、ユーザーはアプリと共有できるものをより詳細に制御できます。

デフォルトでは、すべての画像メタデータが含まれていますが、ユーザーは選択した写真から場所などの機密性の高いメタデータを削除できるようになりました。

「PhotosPicker」と「Transferable」APIを使用している場合は、新しいオプションメニューをサポートするために採用作業を行う必要はありません。

同様に、「PHPickerViewController」APIを使用している場合、採用作業は必要ありません。

オプションメニューは、レガシー「UIImagePickerController」APIを使用するアプリ、または完全なライブラリアクセスを持つアプリではサポートされません。

さて、それはオプションメニューです。

次に、システムピッカーを使用する場合、HDR画像、HDRビデオ、シネマティックモードビデオをサポートする方法について説明します。

ピッカーは、デフォルトでは、JPEGなどの互換性のあるフォーマットにアセットを自動的にトランスコードすることがあります。

ただし、トランスコードされた資産には、元の資産に含まれるすべての情報が含まれていない場合があります。

したがって、HDRコンテンツを受信したい場合は、自動トランスコーディングを避けるのが最善です。

「.Current」エンコーディングポリシーを使用し、「.image」や「.movie」などの一般的なコンテンツタイプを要求することで、元の形式で写真やビデオを取得できます。

「.Jpeg」などの特定のコンテンツタイプをリクエストすると、エンコーディングポリシーが「.current」に設定されていても、アセットがトランスコードされる可能性があります。

HDRのサポートの追加の詳細については、今年の「アプリでHDR画像をサポートする」セッションをご覧ください。

以下は、元の形式で画像を受け取るコード例です。

「preferredItemEncoding」が「.current」に設定され、「importedContentType」が「.image」に設定されていることがわかります。

シネマティックモードのビデオが選択されている場合、ピッカーはレンダリングされたバージョンを提供し、すべての深度効果が焼き込まれます。

すべての決定ポイントを取得したい場合は、フォトライブラリへのアクセスを要求し、代わりにPhotoKitを使用してビデオを取得する必要があります。

シネマティックモードのビデオの詳細については、「アプリでシネマティックモードのビデオをサポート」セッションをご覧ください。

最後に、新しい組み込みピッカーは多くの柔軟性をもたらし、私はあなたがそれで何ができるかを見るのが待ちきれません。

オプションメニューでは、ユーザーは何を共有するかをより詳細に制御できるため、本当に必要でない限り、フォトライブラリへのアクセスを要求しないでください。

ありがとう、そしてハッピーコーディング!

♪ ♪