10043

♪ ♪

ジェフ：こんにちは、私はジェフです。

私はMapKitチームのエンジニアで、SwiftUI用のMapKitを紹介することに興奮しています。

大幅に拡張されたSwiftUI APIにより、すべてのプラットフォームでマップをアプリに統合することがこれまで以上に簡単になりました。

MapKit for SwiftUIを使用して、ユーザーに強力なマッピング体験を提供するのが好きになると思います。

それがどれほど簡単かを示すために、私は完全に機能する旅行プランナーをゼロから構築します。

すべてのステップを順を追って説明し、このセッションが終了する前に完了します。

私の家族は今週末にニューイングランドに帰り、土曜日はボストンの美しい街を探索して過ごします。

私たちは午前中に街を歩いて観光スポットを見て、歴史的なノースエンドで昼食をとり、おそらくデザートにカンノリを食べます。

天気も完璧そうなので、午後にビーチに向かい、つま先の間に砂を感じます。

すごく楽しくなりそうだ。

その日の計画を立てるのに役立つアプリを作ります。

注釈を使って地図上の場所をマークします。

各マーカーをタップしてその場所について詳しく知ることができるように、選択を有効にします。

Look Aroundを統合して、訪れたいかもしれない場所を探索します。

ビーチへの運転ルートを示すオーバーレイを追加します。

地図を使って、さまざまな場所や地域を表示します。

現実的な標高を有効にすることで、地図に別の次元を追加します。

衛星とフライオーバー画像の表示方法もお見せします。

自分がどこにいるかを把握できるように、ユーザーの位置ボタンを含むいくつかのコントロールを地図に追加します。

私たちはカバーすることがたくさんあります。すぐに入りましょう！

私は真新しいSwiftUIプロジェクトから始めます。

私はMapKitを使います。

そして、地図を追加します。

いいね！

私はたった1行のコードでインタラクティブな地図を持っています!

私の家族は、私たちが歩き回れるように、街に運転して駐車して一日を始めます。

ボストンの近くにあなたの「cah」を「pahk」すべき特定の場所があると聞きましたが、私はコモンのすぐ下にある駐車場が好きです。

ボストンコモンは、すべての真ん中にある美しい公園で、ウォーキングツアーの素晴らしい出発点になります。

私が最初に行うことは、駐車場をマークするために地図にいくつかのコンテンツを追加することです。

車両がガレージにアクセスするために使用するランプのすぐ上の場所をマークします。エレベーターの近くで、私たちは歩き始めます。

マーカーと注釈を使用して、地図上の特定の座標にコンテンツを表示する方法を学びます。

では、車を駐車して歩き始めましょう！

MapContentBuilderクロージャを使用して、マップにマーカーを追加します。

かっこいい！

SwiftUIに精通している場合、マップにマーカーを追加すると、リストにビューを追加するのとよく似ています。

マーカーを表示するためにズームインすることで、マップがどのように自動的にコンテンツをフレーミングしたかを確認してください。

では、マーカーとは何ですか?

コンテンツビルダーを使用して提示できる他の種類のコンテンツはありますか?

マーカーは、地図上の特定の座標にコンテンツを表示するために使用されます。

風船の形はあなたに見覚えがあるかもしれません。

App Storeで見つけることができる多種多様なアプリを含め、マップアプリやプラットフォーム全体で使用されているマーカーを見つけることができます。

マーカーと同様に、注釈は特定の座標でコンテンツを表示するために使用されます。

マーカーのバルーンの代わりに、アノテーションはSwiftUIビューを表示します。

コンテンツビルダーは、オーバーレイコンテンツを表示するためにも使用できます。

これらについては、少し後で詳しく学びます。

今のところ、あなたが本当に知る必要があるのは、コンテンツビルダーのクロージャを使用して、あらゆる種類のコンテンツをマップに追加できることです。

駐車場のカスタムSwiftUIビューを表示したいので、注釈を使ってマークします。

ここでは、ZStackを使用していくつかの図形と画像を作成しています。

このSwiftUIビューは、駐車座標の中央に地図に表示されます。

ビューを座標の上に配置したい場合は、アノテーションのアンカーパラメータを使用できます。

「下」のアンカー値を指定すると、ビューの下部が注釈の座標の右側に配置されます。

わかった！

このアプリは、ウォーキングツアーを開始する場所をマークします。

MapContentBuilderを使用して、地図上に注釈コンテンツを表示しました。

次に、地図を見ながら、このアプリに場所の感覚を伝えたいと思います。

mapStyleを使用して、現実的な地形の標高を有効にすることでそれを達成します。

mapStyleを使用して衛星やフライオーバー画像を表示する方法も学びます。

mapStyle修飾子を使用してスタイルを設定できます。

これが標準的な地図スタイルです。

デフォルトでは、物理的な紙の地図のようなフラットなプレゼンテーションを提供します。

ラグーンに橋があるように見えるので、片側から反対側まで歩くことができます。

しかし、この平らな地図は本当に想像力に何かを残します。

現実的な高架地形を有効にして、地図に別の次元を与えます。

現実的な標高を有効にすると、本当に地図に命を吹き込みます。

今ラグーンを見ると、夏にクルーズする白鳥のボートの1つに乗って、ボートが橋の下を通り過ぎるのを想像できます。

画像マップスタイルを使用することは、ユーザーに場所の感覚を提供するもう1つの素晴らしい方法です。

画像マップスタイルは、衛星またはフライオーバー画像を使用してレンダリングされた地図を表示します。

ハイブリッドマップスタイルは、画像と道路やラベルを組み合わせたものです。

要約すると、標準のマップスタイルを使用して現実的な標高を有効にし、他のマップスタイルを使用する方法も示しました。

次に、私たちが訪れたい場所を検索するのに役立つアプリが欲しいです。

私たちの子供たちは私たちと一緒にボストンを歩き回ります、そして私は私たちの朝も彼らのために楽しいものになりたいです。

子供たちはブランコやスライド、モンキーバーを鑑賞しながら、大人は歴史を見て鑑賞することができます!

遊び場を検索するボタンと、ビーチを検索するボタンも追加します。

アプリは検索結果ごとにマーカーを追加します。

マーカーについてもう少し学び、検索結果の邪魔をせずに地図の上に自分のUIを表示する方法も学びます。

今日早く、私は小さなBeantownButtons Viewを作りました。

ボタンをタップすると、遊び場またはビーチのいずれかの簡単なクエリで検索機能が呼びます。

検索機能は、MKLocalSearchを使用してボストンコモン駐車場の近くの場所を検索し、バインディングを使用して結果を書き込みます。

アプリのメインのContentViewに戻り、検索結果を追跡するためにStateを追加します。

BeantownButtons UIが検索を実行すると、バインディングを使用して結果をこの状態に書き戻します。

画面の下部にある地図の上にボタンを追加します。

safeAreaInsetを使用すると、アプリのUIが、私が追加しているコンテンツや、Apple Mapsのロゴやリーガルリンクなど、地図に表示される可能性のあるシステムが提供するコントロールを不明瞭にしないようにします。

次に、コンテンツビルダーを使用して検索結果マーカーを追加します。

ForEachを使用して、検索結果ごとにマーカーを追加しています。

これらのボタンを試してみます。遊び場を見つけましょう。

見て！遊び場！

マップは、それらがすべて見えるようにズームアウトすることで自動的にそれらをフレーム化しました。

いくつかのビーチはどうですか?

検索結果はMKMapItemsで、MKLocalSearchのようなMapKit APIが場所を表すために使用するタイプです。

ここでは、マーカーのマップアイテムイニシャライザを使用しています。

この方法で作成されたマーカーは、タイトルにマップアイテムの名前を使用し、マップアイテムの情報を使用して、その場所を表すアイコンと色合いを表示します。

これらの検索結果のほとんどは、水色のビーチパラソルマーカーとして表示されます。

マップアイテムを操作しているとき、マーカーの自動コンテンツとスタイルのサポートは非常に便利です。

ただし、マップアイテムを使用していなくても、マーカーのプレゼンテーションを制御できます。

デフォルトでは、マーカーはここで見られるように、バルーンにマップピンアイコンを表示します。

画像アセットまたはシステムイメージを使用して、独自のアイコンを提供できます。

モノグラムを使用して、最大3文字のテキストを表示することもできます。

ティント修飾子を使用してマーカーの色を変更できます。

要約すると、safeAreaInsetを使用して、検索結果マーカーを覆い隠さないようにしながら、マップの上にいくつかのボタンを表示しました。

次に、地図に表示されているものをアプリに制御します。

地図にコンテンツを追加しています。

私が持っているたびに、地図は自動的に私のために私のコンテンツをフレーミングしました。

必要なときにこの便利な動作を有効にする方法を紹介します。

また、ボストン地域のノースショアの海岸線など、他のものを完全に表示する方法も紹介します。

今、私たちはビーチを見ています。

パンを離れて遊び場を検索したら...

地図は、ボストンコモンの駐車場の近くで結果を自動的に表示しなくなりました。

ユーザーがマップと対話した後に検索結果を表示するには、マップがマーカーをフレーム化するように、マップのカメラ位置状態を再設定する必要があります...

だから、位置を追跡するために状態を追加します。

マップに追加したコンテンツをフレームにするデフォルトの自動位置を使用します。

そして、バインディングをMapの初期化子に渡します。

onChange修飾子を使用して、検索結果がいつ更新されるかを調べます。

そうしたら、カメラの位置を自動に戻して、見えるようにします。

試してみましょう。 

ビーチを検索して、結果を見ます...

そして、遊び場を探す前にパンします。

かっこいい！

検索を実行すると、ロードアイランドまでパンしていたとしても、結果がすべて表示されます。

このポジション状態を使ってもう一つやりたいことがあります。.

ボストンでの楽しい朝の後、私の家族はビーチで午後を過ごすために北に運転します。

ノースショアの海岸線を見やすくして、どこに行くのかを感じられるようにアプリが欲しいです。

ポジションステートを使ってそれを行います。

都市とノースショアのコーディネート地域を追加します。

BeantownButtons UIに切り替えて、位置状態のバインディングを追加します。

いくつかのボタンを追加し、それぞれがカメラの位置をリージョンに設定します。

シティボタンを押すと、地図にボストンが表示されます。

波ボタンを押すと、地図に北岸の海岸線が表示されます。

ContentViewに戻り、ボタンUIに位置バインディングを渡します。

やってみよう！だ！

「波」ボタンをタップすると、地図の位置が更新され、北岸の海岸線地域が表示されました。

「都市」ボタンをタップすると、ボストンを表示するように更新されます。

舞台裏では、マップが示すものは最終的にMapCameraによって制御されます。

カメラは特定の距離から地面の座標を見て、カメラの向きが地図に表示されているものを決定します。

私が構築しているアプリは、カメラ自体を作成したり設定したりする必要がありませんでした。

代わりに、MapCameraPositionを使用して表示すべきものを指定するだけです。

MapKitは私のためにカメラの世話をします。

このアプリは、自動カメラ位置を使用して、検索結果などのコンテンツをフレーム化します。

地域の位置を使用して、ボストンとノースショアを示しています。

カメラの位置を指定して、他のものをフレーミングすることもできます。

直位は、領域を使用した方法と同様に、領域を表示するために使用されます。

座標領域ではなく、単にマップrectを使用してその領域を表します。

アイテム、カメラ、ユーザーの位置、カメラの位置を詳しく見てみましょう。

MKMapItemを使用すると、特定の場所を表示できます。

これはあらゆる種類の地図項目で機能します。

マップアイテムがケープコッドベイを表す場合、MapKitは自動的にズームアウトしてフィットします。

ノースエンドの特定の公園を表示しようとしている場合、カメラはズームインして周囲を表示し、場所の感覚を提供します。

また、あなたが望むように正確に設定されたMapCameraを単に供給することもできます。

ピッチアングルでMapCameraを使用することは、3Dパースペクティブを提供する素晴らしい方法です。

または、チャールズ川沿いを歩いているときに、カメラがユーザーの位置をたどるようにしたいかもしれません。

位置認証が付与されていない場合や、デバイスが位置修正を取得しようとしているときなど、ユーザーの位置が不明な場合に使用されるフォールバック位置を指定できます。

カメラの位置状態にバインディングを提供すると、カメラの位置が変更されたときにMapKitはそれを更新します。

これがユーザーの位置カメラの位置です。followsUserLocationプロパティはtrueです。

ユーザーがパンを離すと、カメラはユーザーの位置をたどっていなくなります。

ユーザーがマップと対話すると、カメラの位置状態はpositionionsByUserになります。

アプリがカメラの位置状態をuserLocationに戻すと、カメラはユーザーの位置に従います。

アプリがカメラの位置状態を設定すると、それはUserによって配置されません。

ユーザーは、指定したカメラの位置の種類に関係なく、マップと対話することでカメラを配置できます。

わかった！アプリは現在、地図上の表示されているものを制御できます。

自動カメラの位置を使用して、ユーザーが地図を操作した後でも検索結果が表示されるようにしました。

地域のカメラの位置を使用して、ボストンとノースショアを表示しました。

次に、ボストンコモンの近くだけを検索するのではなく、訪問したい地域に地図をパンして、代わりにそこで検索したいと思います。

カメラが変わったときに可視領域を取得する方法を紹介します。

地図に表示されている地域を追跡するために状態を追加します。

onMapCameraChange修飾子を追加します。ここでは、更新コンテキストから可視領域を取得して、自分の状態に保管します。

デフォルトでは、onMapCameraChangeに提供されたクロージャは、ユーザーがマップとのやり取りを終えたときに呼び出されます。

ユーザーがマップと対話している間にクロージャを呼び出すには、周波数パラメータを渡すことで継続的な更新を要求できます。

ここで使用している地域プロパティに加えて、コンテキストには、可視マップrectのプロパティとマップカメラ自体のプロパティもあります。

私のニーズに応じて、それらも使うことができます。

BeantownButtonsを更新して、ユーザーに表示される地域内で検索できるようにします。

ボタンに可視領域を追加します。

そして、検索リクエストでそれを使用します。

ContentViewでは、visibleRegionをボタンUIに渡します。

ノースショアのビーチを探しましょう！

ノースショアがあります。ビーチをいくつか見せて！

甘い！ロードアイランド州はどうですか？

かっこいい！ロードアイランド州のビーチも検索できるようになりました！

目に見えるものに変更があったときに通知するonMapCameraChangeを使用してこれを有効にしました。

次に、どのビーチに行くかを選ぶのを少し簡単にするために、アプリが欲しいです。

確かに選択肢はたくさんあります。

はじめに、検索結果を選択するためのサポートを追加します。

今、検索結果マーカーをタップしても、何も起こりません。

選択状態がないため、マーカーは選択できません。

選択を有効にするには、マップに選択バインディングを追加するだけです。

では、結果をタップするとどうなるか見てみましょう。

風船は、それが選択されたことを示すためにアニメーション化します!

選択タイプとしてMKMapItemを使用しているので、マップアイテムを表す各マーカーが選択可能になりました。

駐車場の注釈は地図項目を表していないので、選択できません。

必ずしも同じタイプのアイデンティティではないマーカーとアノテーションの選択をサポートしたい場合は、単にタグを付けることができます。

これは、ピッカーとリストで選択を管理する場合と同じように機能します。

ここで、選択したタグの状態はIntです。

各マーカーはIntでタグ付けされているため、バインディングは両方の選択を可能にします。

タグを使用して選択を有効にする場合、選択状態にハッシュ可能な任意のタイプを使用できます。

要約すると、MKMapItem選択バインディングをマップに追加し、検索結果マーカーの選択を有効にしました。

次に、アプリは選択した検索結果に関する追加情報を表示する必要があります。

ビーチのスニークピークを提供するためにプレビューを追加し、ビーチの名前とドライブ時間も追加します。

今日早く、私がBeantownButtons Viewを書いていたとき、私はまた、示す小さなItemInfoViewを書きました...

タイトル、推定移動時間、ルックアラウンドプレビュー。

Look Around Previewでは、選択したビーチがどのように見えるかが表示されます。

プレビューには、ルックアラウンドシーンが表示されます。

MKLookAroundSceneRequestを使用して、特定のマップアイテムのシーンを取得できます。

ビューが表示されるとシーンが取得され、選択した検索結果が変更されるごとに再び取得されます。

最後に、DateComponentsFormatterを使用して、表示のためにMKRouteの予想移動時間をフォーマットするプロパティがあります。

ContentViewに戻り、このItemInfoViewを追加します。

まず最初に：駐車場から選択した検索結果までのルートを取得します。

ルートを追跡するために州を追加します...

そして、MKDirectionsを使用して1つを取得する機能を追加します...

そして、状態を設定します。

選択が変更されたときに関数を呼び出すために別のonChange修飾子を追加します。

アプリには、検索結果が選択されると、アイテム情報ビューが表示されます。

その間、検索結果のマーカーのタイトルを隠して、マップの外観を少しクリーンアップします。

ItemInfoViewは、代わりに選択した場所の名前を表示します。

オーケー！私たちが得たものを見てみましょう。

ええ、この近くに遊び場があると聞きました...かなり素敵に見えます。

こんな風に何があるのかしら？

いいね！遊び場のあるビーチ、すぐそこ？

私たちの家族にとって、それはかなり打ち負かすのは難しいでしょう。

ボストンコモンから約30分です。

素晴らしい場所のようです。

要約すると、マーカーが選択されたときに表示されるルックアラウンドプレビューを追加しました。

MKRouteからの推定移動時間に加えて、これは本当にビーチを選ぶのに役立ちます。

次に、移動時間を表示するルートがすでにあるため、ボストンコモンから選択した検索結果までの運転ルートを表示するために完全に使用する必要があります。

ルートを表示するためにMapPolylineオーバーレイを追加し、追加できる他の種類のオーバーレイコンテンツもお見せします。

ルートが利用可能になったら、MapPolylineを追加し、青でストロークします。

地図で見てみましょう。

かなり素敵なドライブのように見えます!

MKRouteでMapPolylineを使用するのはとても簡単でした。

MapPolylineを使用して、独自の位置データを表示することもできます。

StrokeStyleを使用して、ダッシュやグラデーションなど、かなり派手なものを提供できます。

エリアを強調表示したい場合は、MapPolygonまたはMapCircleを使用することをお勧めします。

ここにいくつかの公園をマークする2つのポリゴンがあります。

ここに同じ公園を示す2つの円があります。

各円にオーバーレイレベルが指定されていることに気づくでしょう。

ピンクの円は、地図のラベルを円の上に配置する上記の道路のデフォルトのオーバーレイレベルを使用しています。

シアンサークルは上記のラベルを使用しています。

アプリは本当に形になりつつあります。

ビーチへの運転ルートを示すためにMapPolylineを追加し、使用できる他のオーバーレイタイプをいくつかお見せしました。

次に、アプリが私がどこにいるかを本当に簡単に把握できるようにしたい。

ボストンに着いて歩き始めると、少し迷子になる可能性もあります。

私がどこにいるかを示すためにUserAnnotationをコンテンツとして追加し、自分自身を見つけるためにMapUserLocationButtonを追加します。

使用できる他のいくつかのタイプのマップコントロールについても学びます。

だから、自分自身を見つけようとしているとき、私は通常、地図上の小さな青い点を探すことから始めます。

地図のコンテンツにUserAnnotationを追加したので、私の場所が地図上に表示されます。

私はどこにいるの?

私はそこにいます!

私たちがチェックしている遊び場やビーチから本当にかなり離れているように見えます。 

アップルパークに行くには、ズームアウトしてたくさんパンしなければなりませんでした。

MapUserLocationButtonはそれを確実に簡単にします。

これで、ボタンをタップして自分の位置を表示できます。

私が動き回ると、地図カメラがついてきます。

MapCompassとMapScaleViewも追加しました。

デフォルトのmapControls設定には、マップが回転しているときにコンパスが表示され、ユーザーがズームインまたはズームアウトしているときにスケールインジケーターが表示されます。

このアプリにもこれらのデフォルトのコントロールが欲しいので、ユーザーの位置情報ボタンに加えて指定しました。

mapControls修飾子を使用してこれらすべてを追加したので、マップは自動的にデフォルトの場所に表示します。

これには、macOSにあるMapZoomStepperやMapPitchSliderなど、すべてのプラットフォームでのマップコントロールが含まれます。

これらのコントロールを自分で配置したい場合は、独自のUIで表示できます。

マップコントロールは単なるビューなので、mapControls修飾子を使用する代わりに、他のビューと同じように追加できます。

これを行う場合は、mapScope修飾子を使用して、コントロールを特定のマップスコープに関連付ける必要があります。

プレゼンテーションがもうすぐ終わるので、今日学んだことをまとめましょう。

MapKit for SwiftUIは、マップをアプリに統合するための非常に強力で使いやすいAPIです。

マーカー、注釈、オーバーレイを使用して、コンテンツを地図上に表示できます。

マップカメラとマップコントロールを使用すると、ニーズに合わせてマップを調整できます。

最後に、MapStyleとLook Aroundは、ユーザーに本当の場所の感覚を与えます。

これらはSwiftUI用のMapKitの機能のほんの一部ですので、詳細については、開発者ドキュメントを確認してください。

そしてもちろん、これはSwiftUIなので、あなたの地図はすべてのプラットフォームで素晴らしく見えます!

私たちが締めくくるとき、いくつかの最後の考え。

オートコンプリートと道順をサポートするために、Apple Maps Server APIを拡張しました。

サーバーAPIの使用方法の詳細については、昨年のダブダブセッション「Meet Apple Maps Server APIs」をご覧ください。いつものように、私たちはあなたのフィードバックを聞きたいです!

フィードバックアシスタントを使って、あなたの考えを聞かせてください。

最後になりましたが、今年はSwiftUIの新機能をチェックすることをお勧めします。

アニメーション計画は、あなたの地図にアニメーションを追加する素晴らしい方法です!

以下のセッションでそれらをチェックしてください。

それでおそれ！見てくれてありがとう!

ビーチで会いましょう！そしてビーチで会いましょう

♪ ♪