10004

♪ ♪

ショーン:こんにちは、私はショーンです。

私はインターネット技術チームのエンジニアです。

今日は、L4Sでアプリのネットワーク遅延を減らすことについて話します。

L4Sは、低遅延、低損失、スケーラブルなスループットの略です。

これは、ネットワーク遅延がユーザーエクスペリエンスに影響を与える可能性のあるアプリのパフォーマンスを劇的に向上させる素晴らしい技術です。

いくつかの利点を挙げると、アプリのコンテンツの読み込み時間を短縮し、ビデオ品質を向上させ、ユーザー間のより応答性の高いコラボレーションをもたらすのに役立ちます。

今日はまず、L4Sがどのように機能し、どのようにネットワークの遅延を削減するかを探ります。

次に、L4S用にアプリを準備する方法と、サーバーでL4Sを有効にする方法について説明します。

最後に、L4Sネットワークを設定し、アプリをテストするための手順について説明します。

まず、L4Sの利点とそれがどのように機能するかを探りましょう。

ビジーネットワークは、リアルタイムのオーディオやビデオなどの機能に依存するアプリにとって特に難しい場合があります。

ネットワークが一度に多くのデバイスで使用される場合、多くの場合、これらのタイプのアプリで高いレイテンシーとパケット損失を引き起こす可能性があります。

たとえば、同じネットワークを使用している他の誰かが映画を見たり、ビデオゲームをダウンロードしたりしているときに、ビデオ通話中に遅延やビデオ停止を経験した可能性があります。

このような困難な状況でL4Sがどれだけ役立つかを示すために、2つのデバイス間でビデオ通話を行うサンプルアプリを作成しました。

異なる時間に作られた私のサンプルアプリで2つのビデオ通話をお見せします。1つはL4Sなし、もう1つはL4Sがオンになっています。

これらの両方の呼び出しで、私は低帯域幅で同じ制約付きネットワークを使用しました。

さらに、同時に同じネットワークを積極的に使用している他の複数のデバイスもあります。

これを実際に見てみましょう。

2つの通話間のビデオ品質の顕著な違いに気づくでしょう。

従来のものは、特に動きの間に、時折ビデオの失速と遅延を示しています。

しかし、L4Sでは、ビデオはスムーズで応答性が高く、大きな遅延はありません。

それでは、何が起こったのかを理解するために、目撃したばかりのビデオ通話を分析しましょう。

このデモでは、L4Sは、私たちのアプリがすべての主要なネットワーク指標で大幅な改善を達成することを可能にしました。

まず、これらのビデオ通話中のパケットの往復時間の分布を見てみましょう。

より短い往復時間は、ネットワーク上のより低く、より優れたレイテンシーを示します。

このようなインタラクティブなアプリでは、ユーザーが経験する最悪のケースを示すため、テールレイテンシは非常に重要です。

当社のテストネットワークの最小往復時間は20ミリ秒です。

しかし、L4Sがなければ、パケットは最大45ミリ秒の往復時間を経験しました。

しかし、L4Sをオンにすると、最悪の場合のレイテンシも50%削減され、25ミリ秒未満に減少しました。

次に、パケット損失を見てみましょう。

より低いパケット損失は、デバイス間のより信頼性の高い接続を表します。

レガシーでは、パケット損失率は40%以上に達しました。

しかし、L4Sでは、ビデオ通話のパケット損失はほぼ排除されました。

これは、データの損失によるフレームの低下や失速がはるかに少ないことを意味します。

改善されたレイテンシとパケット損失率は、ビデオ通話のより良いレンダリングメトリックに直接変換されます。

まず、ビデオの失速率を見てみましょう。

失速率が低いということは、ビデオ通話中のフリーズが少ないことを意味します。

L4Sがなければ、私たちは時々アプリでビデオストールを経験しました。

しかし、L4Sでは、ビデオストールはほぼ完全に排除されました。

次に、受信したビデオフレームレートを見てみましょう。

より高く、より一貫性のある受信ビデオフレームレートは、より豊かでスムーズなビデオ通話を意味します。

L4Sでは、受信したビデオフレームレートはほとんどの場合、毎秒25フレームを超えていました。

しかし、レガシーのものは時々毎秒0フレームまで低下し、これは完全なビデオストールを意味します。

全体として、これらの改善は、制約されたネットワークでもはるかに優れたユーザーエクスペリエンスを提供します。

L4Sを採用することで、これらの同じ改善をアプリにもたらすことができます。

では、L4Sの仕組みを見てみましょう。

L4Sはキューイングとパケット損失を減らすため、このような顕著な改善が見られます。

まず、ネットワーク内でキューがどのように構築されるかを見てみましょう。

パケットがアプリから送信されると、サーバーに到達する前に異なるネットワークホップを介してルーティングされます。

パケットがトラバースするこのホップのセットは、ネットワークパスと呼ばれます。

ネットワークを通るパスでは、ボトルネックと呼ばれる最も遅いホップでサポートされている速度でデータをエンドツーエンドでしか配信できません。

多くの人にとって、これはインターネットサービスプロバイダの接続であり、パケットを処理できる最高レートは、パスでサポートされている最大スループットを決定します。

送信者が最大スループットを超えると、ボトルネックでキューが形成され、後続のパケットの遅延が発生します。

L4Sがなければ、キューがこれ以上のパケットに対応できなくなるまで、キューは増え続けます。

それが起こると、パケットはドロップされ、レイテンシとスループットの両方に損害を与えます。

L4Sは、クライアント、サーバー、およびボトルネック間のコラボレーションを通じてこの問題を解決します。

L4Sでは、パケットを送信するクライアントまたはサーバーは、ネットワークの混雑を管理するために協力することを通知する必要があります。

これを行うには、L4S対応の送信者は、ECNとも呼ばれる明示的な輻輳通知と呼ばれる技術を使用します。

パケットを送信するとき、送信者はパケットのIPヘッダーのECNビットを使用してL4Sのサポートを示します。

L4Sホップがこれらのパケットを受信すると、L4Sキュー管理が適用されます。

ボトルネックでキューが構築され始めると、L4Sキュー管理は、パケットに別のECNラベルを設定することで、混雑があることを示します。

このラベルは、次のホップに転送する前にネットワークが輻輳を経験したことを示します。

これらのパケットを受信すると、受信者は混雑ラベルでマークされたパケットの数をカウントし、その番号を送信者に報告します。

送信者がこの番号を受信すると、このフィードバックを使用してネットワーク上の混雑を理解します。

その後、送信者は、最大スループットを超えないように、ボトルネックの輻輳のレベルに応じて送信速度を調整します。

送信レートを調整することで、送信者はボトルネックでパケットの大きなキューを構築することを避けることができます。

これにより、L4Sはスループットを最大化し、同時にエンドツーエンドのレイテンシを短縮できます。

では、このコラボレーションがこれらの利点をユーザーに提供できるようにするために何をする必要があるかを探りましょう。

まず、L4S用にアプリを準備する方法について話し合いましょう。

URLSessionとネットワークフレームワークでネットワークAPIを使用することは、アプリにL4Sを採用するための最良の方法です。

アプリがこれらのフレームワーク内でHTTP/3またはQUICを使用している場合、L4Sのサポートは自動的に組み込まれます。

アプリにコード変更を加える必要はありません。

あるいは、アプリがHTTP/2またはTCPを使用している場合、iOS 17とmacOS Sonomaには、これらのプロトコルでのダウンロードに対するL4Sサポートが組み込まれています。

これらは、コードの変更を必要としないため、アプリにL4Sサポートを追加する最良の方法です。

ただし、アプリがカスタムプロトコルを使用している場合は、アプリでL4Sをサポートするために実装する必要があることがいくつかあります。

RFC 9330は、L4Sの要件について学ぶための良い出発点です。

いくつかの新しい動作を実装する必要があります。

たとえば、プロトコルはネットワークからのL4S輻輳フィードバックを理解し、それに応じて送信レートを調整する必要があります。

これを行うには、スケーラブルな輻輳制御アルゴリズムを実装する必要があります。

次に、ネットワークがECNビットを通過させる場合にのみ、アプリがL4Sトラフィックを送信することを確認する必要があります。

これを行うには、ECN漂白など、ECNに干渉している可能性のあるネットワークの問題をチェックするECN検証メカニズムを実装します。

受信者として機能する場合、プロトコルには、ネットワークのECNフィードバックを送信者にエコーするリレーメカニズムも必要です。

実装がネットワークフレームワークに基づいている場合は、パケットメタデータのECNプロパティを使用して、カスタムプロトコルのECNフラグを送受信できます。

ソケットを使用している場合は、セットソケットオプションを使用するか、メッセージシステムコールを送受信してECNフラグを送受信できます。

それでは、L4S用にアプリを準備する方法について説明しました。サーバーの設定方法を探りましょう。

アプリがQUICを使用している場合、サーバーのQUICの実装もL4SとECNマーキングをサポートする必要があります。

サーバー側で利用可能な多数のQUIC実装があります。

ECNとL4Sを有効にする方法については、サーバープロバイダーに尋ねてください。

L4Sトラフィックの送信をまだサポートしていない場合でも、ECNがサーバーでL4Sトラフィックを受信できるようにすることができます。

今、彼らがL4Sを完全にサポートすることを奨励する絶好の機会です。

アプリがTCPを使用している場合は、サーバーのTCP実装にL4Sサポートを追加する必要があります。

Linuxベースのサーバーの場合は、このGitHubページの指示に従って、サーバーにサポートを追加してください。

また、このビデオの関連項目の記事から詳細を見つけることができます。

他のすべてのサーバープラットフォームについては、L4Sをサポートするために追加の構成や変更が必要になる可能性があるため、サーバープロバイダーに相談してください。

アプリとサーバーをL4Sに設定する方法について説明したので、アプリをテストするためにL4Sネットワークを設定する方法を探りましょう。

まず、ネットワークL4Sが可能な理由を確認しましょう。

ネットワークはECNマーキングをブロックしてはいけません。

ECNマーキングは、送信者、ボトルネック、および受信者の間でネットワークに関する情報を通信するために使用されます。

ネットワークがECNマーキングに干渉した場合、L4Sは機能しません。

ドキュメントには、ネットワークがECNと互換性があるかどうかを確認するために使用できる追加のツールとともに、従うことができる手順があります。

次に、ネットワークのボトルネックはL4Sキュー管理をサポートする必要があります。

これは、L4Sの利点を見るために不可欠です。

ネットワークがECN互換であることを確認したら、ボトルネックにL4Sキュー管理を追加するだけです。

L4Sキュー管理をサポートするテストネットワークを設定するには、インターネット共有を使用するのが最善の方法です。

macOS Sonomaでは、インターネット共有はL4Sキュー管理をサポートしています。

デバイスがインターネット共有でMacによって作成されたネットワークに参加すると、Mac自体はデバイスとサーバーの間の追加のネットワークホップになります。

Macをネットワークのボトルネックに設定すると、それを通過するトラフィックにL4Sキュー管理が適用され、完全なL4Sネットワークを構築できます。

macOSでインターネット共有を有効にするには、システム設定のインターネット共有ペインに移動します。

開示ボタンをクリックして、共有するインターフェイスと、テストデバイスが接続するインターフェイスを選択します。

Macをこのネットワークのボトルネックとして機能させるには、帯域幅を抑制する必要があります。

ターミナルでこのifconfigコマンドを、共有しているインターフェイスと、デバイスが接続するインターフェイスで使用します。

このコマンドのインターフェイス名を、使用しているインターフェイスの名前（例：en1）に置き換えます。

次に、テストデバイスでネットワークに参加し、アプリをテストしてL4Sの利点を確認します。

Macの帯域幅スロットリングを逆にするには、再起動するか、同じifconfigコマンドを実行しますが、帯域幅を毎秒10メガビットではなく0に変更できます。

iOS 17とmacOS Sonomaでは、L4Sはランダムなユーザーに徐々に展開されます。

テストデバイスでL4Sがオンになっていることを確認するには、開発者設定に移動してL4Sをオンにします。

macOSでは、テスト前にこのデフォルトの書き込みコマンドを実行することで、L4Sを有効にすることができます。

ネットワークまたはサーバーがL4Sをサポートしていない場合、TCPとQUICはレガシーモードで引き続き動作します。

ただし、L4Sをオンにしてアプリケーションをテストして問題を特定する必要があります。

問題が発生した場合は、フィードバックアシスタントを使用してフィードバックを提供してください。

このドキュメントでは、アプリでのL4Sのデバッグとテストに関する有用な情報も提供しています。

アプリとネットワークがL4Sでレイテンシの削減とパケット損失の削減をサポートできるようになったことにとても興奮しています。

L4Sをサポートするネットワークとサポートしないネットワークで、iOS 17とmacOS Sonomaでアプリを今すぐテストしてください。

サーバーまたはCDNプロバイダーと協力して、アプリのサーバーでL4Sのサポートを有効にしてください。

フィードバックアシスタントを使用して、アプリでL4Sがオンになっている問題が発生した場合に報告します。

見てくれてありがとう。

L4Sを使ってあなたと一緒にさらに良いアプリを構築することを楽しみにしています。

♪ ♪