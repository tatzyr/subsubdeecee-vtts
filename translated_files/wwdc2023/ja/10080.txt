10080

♪まろやかなインストゥルメンタルヒップホップ♪

♪

こんにちは。私はジョンで、RealityKitチームのエンジニアです。

今日は、空間体験を作成するための新しいRealityKitを紹介できることを嬉しく思います。

RealityKitは、3Dモデルとエフェクトを現実的にレンダリング、アニメーション化、シミュレートするためのフレームワークです。

2019年にRealityKitを導入し、それ以来多くの新機能を追加しました。

すでにRealityKitを使用して他のデバイスでアプリを構築している場合は、多くの共通点があることがわかります。

RealityKitを使用すると、アプリの2Dウィンドウを3Dコンテンツで拡張したり、3Dコンテンツを前面と中央に別のウィンドウに配置したり、自分自身と環境を没入感のある体験にしたりできます。

RealityKitは、Appleプラットフォーム上のコア3Dフレームワークです。

そして、特にxrOSでは、多くの機能を提供しています。

このプレゼンテーションでは、エンティティ、コンポーネント、RealityViewなどの重要な機能に焦点を当て、RealityKitを紹介し、その使用方法を紹介します。

また、他の概念をカバーするセッションや、より詳細なセッションについても言及します。

始めましょう。

Hello Worldの経験を使って、このプレゼンテーションの概念を説明します。

しかし、これらの概念にたどり着く前に、この経験の一部である3つの異なるモジュールを案内しましょう。

最初のモジュールであるPlanet Earthは、任意の角度から対話できる独自のウィンドウに3D地球儀を提示します。

2番目のモジュール「軌道の物体」は、地球、月、衛星のモデルに没頭し、衛星に続くトレースのようなアニメーション、空間オーディオ、カスタム動作を実演します。

3番目のモジュールである太陽系には、完全に没入型の体験が含まれており、他のセッションで詳しく学ぶことができます。

SwiftUI、RealityKit、Reality Composer Proを使用して、このHello Worldエクスペリエンスの3D要素を構築する方法を紹介します。

飛び込みましょう。

RealityKitをSwiftUIと一緒に使用して、アプリを次の次元に引き込む方法について話すことから始めます。

次に、RealityKitの構成要素、地球モデルのようなエンティティ、およびその動作を実装するコンポーネントを調べます。

3Dモデルとエフェクト用の新しいSwiftUIビューであるRealityViewの機能について学びます。

次に、入力を処理し、アニメーションと空間オーディオでアプリに命を吹き込む方法を説明します。

最後に、カスタムコンポーネントとシステムでRealityKitの可能性を解き放つことについて話します。

RealityKitとSwiftUIがどのように連携するかを探ることから始めましょう。

SwiftUIはビューとウィンドウを定義する方法であり、RealityKitでは3D要素を追加できます。

たとえば、WorldアプリはSwiftUIを使用して、いくつかのボタンで標準の2Dウィンドウを表示します。

左側の惑星地球ボタンをタップすると、地球の2Dイラストを示す詳細ビューに移動します。

しかし、その2D画像を3D地球儀に置き換えたい場合はどうなりますか?

RealityKitのモデル3Dビューを使用して、2Dウィンドウに3Dコンテンツを追加するのは簡単です。

コードを調べてみましょう。

これは、その地球画像を表示するSwiftUIビューです。

RealityKitをインポートし、画像をモデル3Dビューに変更し、Globeと呼ばれるプロジェクトのUSDファイルを参照して、3Dグローブを表示するように変更します。

2つのコードを追加することで、表示する前にロードされたモデルをカスタマイズできます。返されるモデルのコンテンツクロージャと、モデルのロード中に表示されるビューを指定するプレースホルダビュービルダーです。

コンテンツクロージャでは、サイズ変更可能でスケーリングされたToFit修飾子を追加して、モデルがUIの利用可能なスペースに収まるようにします。

また、モデル3Dはモデルを非同期にロードするため、ロードプロセス中に表示されるビューをカスタマイズするために使用できるプレースホルダビュービルダーがあります。

この場合、組み込みのProgressViewを使用してスピナーを表示しているだけです。

最後に、アプリまたはSwiftパッケージにリソースとしてグローブ3Dモデルを追加する必要があります。

そして今、モデルはQuick LookやReality Composer Proと同じ外観でアプリに表示されます。

3Dコンテンツを2Dウィンドウに配置するのは素晴らしいことですが、3Dモデルを前面と中央にしたいです。

それを達成するために、私は地球を別の窓に置くつもりです。

アプリの詳細ビューにボタンを追加して、その新しいウィンドウを開きます。

そして、2Dの背景に対して内容を表示する通常のウィンドウを使用する代わりに、その内容をボリュームに配置する新しいウィンドウスタイルを使用します。

これは体積ウィンドウと呼ばれ、3Dコンテンツを表示するのに最適です。

2Dウィンドウとは異なり、体積ウィンドウはあらゆる角度から使用することを意図しているため、3Dモデルに最適です。

体積窓はまた、生活に忠実な固定サイズを保ちます。

体積ウィンドウでモデルを1メートルに拡大縮小することができ、常に正確にそのサイズで表示されます。

それはハローワールドの地球にぴったりだと思います。

体積ウィンドウを追加するプロセスを見てみましょう。 ボリュームウィンドウを追加します。

まず、アプリにウィンドウグループを追加します。

ウィンドウグループは、アプリが新しいウィンドウを開くために使用できるテンプレートとして機能します。

新しいウィンドウに、このアプリのメインウィンドウと区別するための識別子を与えます。

次に、windowStyleの体積修飾子をウィンドウグループに追加します。

また、defaultSize修飾子を追加して、このウィンドウにメートル単位のサイズを与えます。

最後に、詳細ビューにボタンを追加します。

追加したばかりのウィンドウを開くために、SwiftUI環境から開いているウィンドウアクションにアクセスできるプロパティを追加します。

それから、私のボタンからそのアクションを呼び出します。

シミュレーターでこのアプリを実行しましょう。

View Globeボタンを押すと、体積ウィンドウが表示されます。

今、私は正面だけでなく、複数の角度から地球と対話することができます。

しかし、時には、あなたが作りたい経験のロックを解除するための鍵は没入です。

WorldアプリのObjects in Orbitモジュールでは、軌道を示す地球とその衛星のアニメーションモデルに没頭しています。

これは、アプリが空間のどこにでも3D要素を配置できる新しいシーンタイプである没入型スペースを使用します。

没入型スペースを開くと、アプリは窓の境界を超えて魔法のような体験を提供することができます。

没入型スペースの追加は、ウィンドウグループの追加に似ています。

それは私のアプリの本体の新しいシーンです。

ここでは、Model 3DよりもシーンをコントロールできるRealityViewを使用しています。

数分後にRealityViewについて詳しく説明します。

以前と同様に、アプリの詳細ビューにボタンを追加します。

環境からopenImmersiveSpaceアクションを取得し、定義したシーンの識別子で呼び出します。

openImmersiveSpaceアクションは非同期であることに注意してください。

スペースの開放が終わると完了します。

View Orbitsボタンを押すと、没入型空間が現れます。

これはすでに素晴らしいですが、RealityKitでインタラクティブ性、アニメーション、オーディオを追加することで、より魅力的にすることができます。

3Dコンテンツを含む2Dウィンドウでも、3Dモデルを強調する体積ウィンドウでも、まだチェックしていない場合は、これらのSwiftUIセッションをチェックすることをお勧めします。

「空間コンピューティングのためのSwiftUIに会う」セッションは、このプラットフォームのSwiftUIの新機能の概要です。

「SwiftUIを次の次元へ」セッションは、ウィンドウで3Dコンテンツを最大限に活用する方法を示しています。

没入のスタイルも複数あります。

ハローワールドの太陽系モジュールは、パススルーを隠し、独自の背景を表示する完全に没入型のスペースを使用しています。

「SwiftUIでウィンドウを越えて」セッションでは、没入型スペースのすべてのスタイルについて詳しく説明します。

没入型体験を生み出すことを考えているなら、この講演を強くお勧めします。

SwiftUIビューでRealityKitを使用する2つの方法、使いやすいModel 3DとRealityViewに遭遇しました。

RealityViewは、RealityKitエンティティを使用して3Dコンテンツを作成できるため、このセッションの残りの部分に使用するものです。

では、RealityKitエンティティとは何ですか?

エンティティはコンテナオブジェクトです。

コードから空のエンティティを作成しても、何もしません。

エンティティをレンダリングまたは動作させるには、コンポーネントが必要です。

各コンポーネントは、エンティティの特定の動作を可能にします。

ここにいくつかの例があります。

このアプリの地球エンティティは、エンティティにメッシュと材料を与えるモデルコンポーネントと、エンティティを3D空間に配置する変換コンポーネントの2つのコンポーネントで実装されています。

衛星エンティティにも同じことが当てはまります。

モデルコンポーネントはメッシュをレンダリングし、それに材料を適用します。

これらの地球と衛星モデルは、デジタルコンテンツ作成ツールで作成され、USDZファイルにエクスポートされ、RealityKitにロードされました。

これらのメッシュには、最終的な外観を与えるために物理的ベースの材料が適用されています。

素材は、メッシュの表面が光にどのように反応するかを説明するために、一連のテクスチャとシェーダーを使用します。

資料の詳細については、ニールスセッション「Explore materials in Reality Composer Pro」を見ることをお勧めします。

モデルに加えて、これらのエンティティには変換コンポーネントがあります。

変換コンポーネントは、エンティティを3D空間に配置します。

エンティティの位置、向き、およびスケールを制御するには、変換コンポーネントのプロパティを設定するだけでなく、エンティティの親を設定することもできます。

RealityKitは、ARKitや他の多くの3Dエンジンと同じ3D座標規則を使用しています。

起源はRealityViewの中心にあります。

Y軸は上を指し、z軸はあなたを指し、x軸は右を指しています。

1ユニットは1メートルです。

これらの慣習は、SwiftUIの慣習とは異なることに注意してください。

RealityViewのコンテンツインスタンスには、RealityKitとSwiftUI座標空間の間で簡単に変換できる機能があります。

すべてのエンティティには変換がありますが、すべてのエンティティにモデルがあるわけではありません。

エンティティは、それぞれが独自のコンポーネントセットを持つ複数の子エンティティから組み立てられることがあります。

これにより、よりプログラムによる制御が提供されます。

たとえば、子エンティティの変換で個々のアニメーションを再生できます。

RealityKitには、やりたいことに応じてさまざまなコンポーネントが含まれています。

今日は、いくつかの特定のコンポーネント、衝突、入力ターゲット、ホバー効果について説明します。

また、独自のコンポーネントを作成する方法も実演します。

エンティティとコンポーネントがどのように機能するかを理解したので、RealityViewを使用してそれらのエンティティをアプリに配置しましょう。

RealityViewは、任意の数のエンティティを含むSwiftUIビューです。

レンダリング、アニメーション化、シミュレートするには、エンティティをRealityViewに追加する必要があります。

では、RealityViewはどのように機能しますか?

RealityViewは、ビューにエンティティを追加できるコンテンツインスタンスを提供します。

これは、すでにエンティティをロードしている場合、またはプログラムでエンティティを作成したい場合は、簡単に開始できます。

しかし、このクロージャは非同期なので、ファイルからエンティティをロードしてビューに表示するのは簡単です。

ここでは、USDファイルから地球モデルを非同期にロードし、ロードが完了したらコンテンツインスタンスに追加します。

また、複数のモデルをロードして、両方をRealityViewに配置することもできます。

隣り合う代わりに、これらのモデルは宇宙で一致します。

それがあなたが望むものでない場合は、ビューに追加されたエンティティの位置を変更できます。

この例では、月の実体を半メートル右に配置します。

RealityViewを設定したら、アプリの状態をRealityKitコンポーネントに保存されているプロパティに接続したいと思うかもしれません。

RealityViewを使用すると、SwiftUI管理状態とRealityView内のエンティティ間の接続を更新クロージャで表現できます。

これにより、アプリのデータモデルからの真実のソースを使用して、3Dモデルの動作を簡単に推進できます。

このビューはモデルをロードし、ビューを使用する人によって制御される回転を適用します。

更新セクションのコードは、依存する値が変更された場合にのみ実行されることに注意してください。

2D要素と3D要素を組み合わせてUIを構築する場合は、ビューとエンティティ間の座標を変換する必要がある場合があります。

RealityViewは、SwiftUIビュー座標空間とRealityKitエンティティ座標空間の間の座標変換関数を提供します。

RealityViewのコンテンツインスタンスは、ポイント、境界ボックスを変換し、SwiftUI座標空間からエンティティのローカル空間、またはその逆に変換する変換関数を提供します。

ここでは、ビューの寸法の最小長を取得し、利用可能なスペースに収まるようにロードされたエンティティをスケーリングします。

RealityViewは、エンティティとコンポーネントによって公開されたイベントを購読するメカニズムも提供します。

この例では、ロードが完了した後、ロードされたUSDファイルで作成されたアニメーションを再生します。

コンテンツインスタンスには、イベントハンドラを追加するsubscribe to:関数があります。

この例では、アニメーションが完了したときにいくつかのコードを実行します。

アニメーションから物理学、オーディオまで、あらゆる種類のものに対して公開されたRealityKitイベントがあります。

SwiftUIビューをエンティティに添付することもできます。

RealityViewのアタッチメント機能により、3D空間でビューを簡単に配置できます。

詳細については、ユージーンのセッション「RealityKitで空間コンピューティングアプリを強化する」をご覧ください。

RealityViewでできることはたくさんあります。

しかし、私たちの天体に戻って、それらを生き生きとさせましょう。

まず、地球のエンティティの位置を変更できるように、ドラッグジェスチャーを追加する方法を紹介します。

そして、アニメーションと空間オーディオについて説明します。

これは、3つのエンティティを含むRealityViewの例です。

他のSwiftUIビューと同様に、RealityViewにジェスチャーを追加することができ、そのビューのエンティティに対してテストにヒットします。

入力を受信するには、エンティティに入力ターゲットコンポーネントと衝突コンポーネントの両方が必要です。

タッチイベントがRealityViewによって処理されると、衝突と入力ターゲットの両方を持つエンティティは無視されます。

この最後のエンティティだけが両方のコンポーネントを持っているので、このRealityViewに追加されたジェスチャーは、このエンティティに向けられた入力にのみ反応します。

地球のエンティティをドラッグ可能にするために、入力ターゲットコンポーネントと衝突コンポーネントを与え、RealityViewにドラッグジェスチャーを追加します。

コンポーネントを追加するには、Reality Composer Proを使用します。

Reality Composer Proは、3Dコンテンツを構成、編集、プレビューできる新しい開発者ツールです。

エンティティにいくつかのコンポーネントを追加するだけです。

Reality Composer Proでできることの詳細については、エリックのセッション「Meet Reality Composer Pro」をご覧ください。

Worldアプリには、このエクスペリエンスが使用するUSDファイルを含むWorld Assetsパッケージがすでに設定されています。

Reality Composer Proでそのパッケージを開きます。

地球モデルはUSDZのアーカイブにあり、これは自己完結型であり、変更されるものではありません。

その資産を変更する代わりに、新しいUSDシーンファイルを作成し、地球の資産を参照します。

USDファイルは、参照されたファイルを実際に変更することなく、他のUSDを参照して変更することができます。

このような非破壊編集は、他の誰かが取り組んでいるUSDファイルに小さな変更を加える必要があるときに本当に便利です。

DraggableGlobeという名前の新しいシーンを作成し、グローブファイルをドラッグして参照を作成します。

今、私はそれにコンポーネントを追加することができます。

入力ターゲットコンポーネントと衝突コンポーネントを追加します。

衝突コンポーネントのデフォルトの形状は立方体です。

モデルによりよく一致するように、球体に変更します。

衝突形状が視覚モデルの合理的な近似であることが重要です。

試合が近ければ近いほど、モデルとのより直感的な相互作用になります。

地球モデルを移動できるようにしたいので、RealityViewにドラッグジェスチャーを追加します。

標準のSwiftUIドラッグジェスチャーは機能しますが、ジェスチャーに targetedToEntity修飾子を追加することで、ビュー全体ではなく特定のエンティティを操作できるようにすることができます。

ジェスチャーの値が変更されたら、エンティティの位置を一致するように変更します。

しかし、重要な詳細が1つあります。

ジェスチャーの値はSwiftUIの座標空間にあるので、エンティティの位置を変更するには、RealityKitの座標空間に変換する必要があります。

すべてのピースが所定の位置に整っています。

したがって、Orbitモジュールのオブジェクトでは、ピンチしてドラッグして地球を動かすことができます。

素晴らしい、私たちのアプリはインタラクティブになりました。

しかし、私の地球エンティティは、それがインタラクティブであることを示すことをしたいと思います。

このために使用できるRealityKitコンポーネント、HoverEffectComponentがあります。

SwiftUIとRealityKitが提供するホバー効果は、アプリが探している場所に反応させる唯一の方法です。

この効果は、プライバシーを保護する方法でアプリのプロセスの外で適用されます。

RealityViewに追加されると、地球エンティティにホバー効果コンポーネントを追加します。

今、地球モデルはポインタが上にあるときに点灯し、私がそれと対話できることを示しています。

次に、アニメーションに移りましょう。

RealityKitには、初期値から最終値にプロパティをアニメーション化するfrom-to-byアニメーション、エンティティが親の周りを回転させる軌道アニメーション、一連の値を介してフレームごとに進行するタイムサンプリングアニメーションなど、多くのアニメーションタイプが組み込まれています。

月に軌道アニメーションを設定します。 軌道アニメーションを設定します。

月は全軌道を完了するのに30秒かかり、軌道軸はy軸になります。

そして、軌道が月の現在の位置から始まることを確認します。

この軌道アニメーションのプロパティを定義したら、そのためのアニメーションリソースを生成し、そのアニメーションを月のエンティティで再生します。

そして今、月は地球を周回しています。

私にとって、これは魔法の瞬間です。

アニメーションを配置すると、シーンは生き生きとしています。

しかし、アニメーションは3Dコンテンツに命を吹き込むのに役立ちますが、空間オーディオはモデルが本当にそこにあるように感じさせます。

RealityKitには、空間、アンビエント、チャンネルの3種類のオーディオがあります。

それぞれをもっと詳しく見てみましょう。 

RealityKitの音はデフォルトでは空間的なので、オーディオソースは実際に周囲に存在するように聞こえます。

空間オーディオコンポーネントを使用すると、オブジェクトが空間に音を放出する方法をカスタマイズして、さらに現実的または芸術的にすることができます。

指向性を使用して、あらゆる方向に音を発したり、特定の方向に音を投影したりします。

アンビエントオーディオコンポーネントは、環境の音をキャプチャするマルチチャンネルファイルに最適です。

アンビエントソースには追加のリバーブは追加されません。

雰囲気の各チャンネルは固定された方向から再生されます。

そして最後に、チャンネルオーディオコンポーネントは、空間効果なしでオーディオファイルチャンネルをスピーカーに直接送信します。

これは、視覚的要素に接続されていないバックグラウンドミュージックに最適です。

Reality Composer Proでシーンにオーディオを追加し、RealityKitを使用してインターフェイスすることができます。

または、コードでオーディオを接続することもできます。

見てみましょう。 

軌道上の衛星にループオーディオを少し追加します。

まず、オーディオソースとして機能する空のエンティティに空間オーディオコンポーネントを追加します。

0.75の指向性は、特定の方向にタイトな音のビームを作成します。

オーディオが望む方向に投影されるように、そのオーディオソースエンティティをy軸の周りに回転させます。

次に、リソースからループオーディオクリップをロードし、playAudioを呼び出してaudioSourceエンティティで再生します。

これを実際に見てみましょう。

空間オーディオソースはしっかりと焦点を絞った指向性で構成されているため、オーディオは地球の私の側ではっきりと聞くことができますが、衛星が反対側にあるときは静かです。

それは入力、アニメーション、オーディオでした。

既存の機能をさまざまな方法で組み合わせることで、RealityKitでより多くの機能を構築できます。

この目的のために使用できる2つの主要なツールは、独自のコンポーネントを定義し、独自のシステムを定義します。

コンポーネントには、3Dエクスペリエンスの1つの側面を制御するデータが含まれています。

コンポーネントはエンティティにグループ化されます。

コンポーネントがなければ、エンティティは何もしません。

各コンポーネントは、エンティティの実装の単一の要素を提供します。

変換コンポーネントがエンティティを配置し、モデルコンポーネントが3Dモデルをレンダリングすることを学びました。

RealityKitが提供する事前定義されたコンポーネントに加えて、独自のコンポーネントを定義できます。

以下は、同僚のPaulが作成したtraceMeshオブジェクトを含むカスタムコンポーネントの例です。

トレースコンポーネントタイプはコンポーネントプロトコルに準拠しているため、実行時に任意のエンティティでこのコンポーネントを取得して設定できます。

また、Swiftパッケージでコンポーネントを定義し、Codableプロトコルに準拠することで、データ駆動型のワークフローを採用することもできます。

コード可能なコンポーネントは、Reality Composer Proインターフェイスに表示され、設計時にエンティティに直接追加できます。

カスタムコンポーネントの詳細については、トーク「XcodeでReality Composer Proのコンテンツを操作する」を参照してください。

この講演の早い段階ですでにエンティティを調べましたが、コンポーネントを取り上げました。

次に、システムについて話しましょう。

システムには、エンティティとコンポーネントに作用するコードが含まれています。

まとめると、エンティティ、コンポーネント、システム、またはECSは、3Dエクスペリエンスの外観と動作をモデル化するためのツールです。

システムは、アプリの動作を実装するコードを構造化する方法です。

システム内のコードは定期的に実行され、コンポーネントの現在の状態に応じて作用します。

たとえば、このTraceSystemは、地球を周回する際に衛星エンティティの後ろにトレースされたラインメッシュを更新します。

更新のたびに、エンティティの現在の位置がトレースに追加されます。

システムが登録されると、RealityKitを使用するアプリのどこにでも自動的に適用されます。

アプリの初期化子にトレースシステムを登録すると、関連するすべてのエンティティが更新されます。

しかし、どのようなエンティティが関連し、システムはいつ更新されますか?

このシステムは、トレースコンポーネントを持つエンティティのみを更新したいので、トレースコンポーネントを持つエンティティにフィルタリングするエンティティクエリを作成します。

更新機能では、システムはエンティティクエリを渡し、レンダリング時にエンティティを更新することも指定します。

レンダリング条件は、このシステムがスムーズなアニメーションのために適切な速度で更新されることを意味します。

これが動作中のトレースシステムで、流体カスタムアニメーションを生成するために、エンティティの位置をラインメッシュに追加します。

システムは、さまざまな効果と行動を実装するための本当に効果的な方法です。

RealityKitには、3Dアプリを簡単に構築できる機能がたくさんあります。

RealityKitとRealityViewを使用して、SwiftUIで定義されたビュー、ウィンドウ、没入型スペースに3D要素を追加できます。

RealityKitを使用して、USDファイルをロードしたり、ジェスチャーを処理したり、アニメーションや空間オーディオを再生したりできます。

RealityKitは多くの事前定義されたコンポーネントを提供しますが、アプリの特定のニーズに合わせてカスタムコンポーネントやシステムを定義することもできます。

私はそれを使って、RealityKitを使い始めるために必要な概念を取り上げました。

ユージーンのセッション「Enhance Your spatial computing app with RealityKit」では、ポータル、パーティクルエミッタ、添付ファイルなど、RealityKitのより多くの機能について説明します。

そして、アマンダのセッション「XcodeでReality Composer Proコンテンツを使用する」では、Reality Composer Pro、RealityKit、Xcodeプレビュー、およびシミュレータを使用して没入型アプリを構築するプロセスを説明します。

RealityKitには、アプリで使用できるエキサイティングな機能がたくさんあります。

あなたが生み出す素晴らしい経験を見るのが本当に楽しみです。

見てくれてありがとう。

♪