10120

♪ ♪

こんにちは、私はレイチェルです。私はSafariチームのエンジニアです。

今日は、ウェブアプリの新機能を共有することに興奮しています。

私たちは最初のiPhoneのリリース以来、ウェブアプリで旅をしてきましたが、彼らはますます良くなっています。

iOSとiPadOS 16.4では、バッジをサポートするWebプッシュ標準を使用して、ホーム画面のWebアプリに通知を追加しました。

また、ホーム画面に追加を採用するために、iOSとiPadOSブラウザ用のAPIを追加しました。

iOSとiPadOS 17の新機能、ホーム画面に追加がSafari View Controllerで利用可能になりました。

そのため、ユーザーはiOSブラウザや多くのアプリ内ブラウザでホーム画面のウェブアプリを追加できるようになりました。

macOS Sonomaの新機能で、Macにウェブアプリがあります。

Macのウェブアプリを使用すると、他のブラウジングとは別の専用の方法で、常に使用しているウェブサイトに集中できます。

iOSと同様に、ウェブアプリを作成する方法は、Dockにウェブサイトを追加することです。

ウィキペディアを閲覧していますが、Dockに追加したいです。

ファイルメニューを開き、「ドックに追加...」を選択します。

これで、このサイトのアイコン、名前、URLを見ることができます。

名前を簡略化します。

必要に応じてアイコンを変更することもできますが、これは良さそうです。

「追加」を押すと、Dockに新しいアイコンが表示されます。

とりあえずSafariを閉じて、ウィキペディアのウェブアプリを開きます。

このウェブアプリを立ち上げたら、アプリのように感じる方法でこのサイトを使用することができます。

私はまだ自分のアカウントにログインしています。

これは、SafariがDockに追加されたときにウェブサイトのクッキーをコピーするためです。

ナビゲーションボタン付きの簡略化されたツールバーがあります。

そして、サイトのテーマの色はツールバーに溶け込みます。

開発者として、ナビゲーションボタンを表示するかどうかを制御できます。

今日はまず、すべてのWebサイトでMac上のWebアプリが箱から出してどのように機能するかについて説明します。

次に、ウェブアプリの動作をカスタマイズして、ユーザーに最適なエクスペリエンスを作成する方法についてお教えします。

最後に、音声やバッジなどの通知について説明し、ウェブアプリを積極的に使用していない場合でも、ユーザーにリーチする方法を提供します。

ウェブアプリが箱から出してすぐにどのように機能するかから始めましょう。

Mac上のウェブアプリは、開発者が採用を必要とせず、うまく機能します。

どのウェブサイトもウェブアプリになることができます。

Macのウェブアプリは、macOSのネイティブアプリに期待される多くの機能と完全に統合されています。

すでにDockに追加したウェブアプリを見てみましょう。

このサイトには、ウェブアプリマニフェストなどのウェブアプリ固有の機能はなく、見た目も素晴らしく、スタンドアロンのウェブアプリとして機能します。

すべてのMacアプリと同様に、WebアプリはStage Manager、Mission Control、およびコマンド+タブなどのキーボードショートカットでうまく機能します。

ウェブアプリは、Dock、Launchpad、Spotlight Searchから開くことができます。

ウェブアプリは、iCloudキーチェーンおよびCredential Provider Extension APIを採用したサードパーティのアプリからの自動入力資格情報で動作します。

私たちは人々がプライバシーをコントロールできるようにし、システム許可プロンプトとシステム設定のプライバシーとセキュリティセクションで、ネイティブアプリと同じ方法でウェブアプリへのカメラ、マイク、および位置情報アクセスを許可することができます。

それはデフォルトの動作でしたが、あなたのウェブサイトを使用する人々のために体験をカスタマイズしたいかもしれません。

ウェブページがmacOSのDockに追加されると、常にウェブアプリとして扱われます。

開発者として、ウェブアプリのウィンドウのツールバーの初期動作を制御できます。

デフォルトの動作は、ナビゲーションコントロール付きのツールバーを示しています。

これは、独自のナビゲーションコントロールがないサイトをナビゲートするのに役立ちます。

サイトに独自のナビゲーションコントロールがある場合、またはサイトのコンテキストでナビゲーションコントロールが不要な場合は、ツールバーを表示したくない場合があります。

これはスタンドアロン表示モードと呼ばれます。

iOSのデフォルトの動作はmacOSとは異なります。

ホーム画面に追加されたウェブサイトがデフォルトのブラウザで開きます。

これにより、ユーザーはホーム画面から直接一般的に使用されるサイトにすばやくアクセスできます。

スタンドアロンの表示モードで、iOSとiPadOSのホーム画面に追加されたウェブサイトは、ホーム画面のウェブアプリになります。

ホーム画面のウェブアプリは、ブラウザとは別のクッキーとストレージを備えた、iOSでスタンドアロンのアプリのような体験を提供します。

ツールバーなどのブラウザが提供するUIはなく、すべてのコンテンツはウェブページからのものです。

サイトがiOSでWebプッシュとバッジを使用できるようにしたい場合は、スタンドアロンの表示モードを使用する必要があります。

表示モードを設定するには。ウェブアプリのマニフェストを自分のサイトに追加します。

ウェブアプリマニフェストは、ウェブサイトがウェブアプリ関連の機能の意図した動作をシステムに伝える方法です。

WebアプリマニフェストをWebサイトに追加するには、HTMLの先頭にあるJSONファイルにrel="manifest"のリンクを追加するだけです。

私は「manifest.json」と呼びました。

対応するマニフェストファイルに、Webサイトに適用されるキーと値を追加します。

私の名前はかなり長いので、これはウェブサイトのタイトルではなく、ウェブアプリの名前として使いたいので、最初に名前を設定します。

表示モードを変更するには、表示を「スタンドアロン」に設定します。

macOSでは、ウェブアプリにはツールバーがありません。

iOSとiPadOSでは、サイトはデフォルトのブラウザではなく、ホーム画面のウェブアプリで開きます。

では、ウェブアプリ内でクリックされたリンクが開いた場所を取り上げましょう。

すべてのウェブアプリには関連するスコープがあります。

スコープ内のリンクは、ウェブアプリ内で開きます。

デフォルトのスコープは、ウェブアプリの作成に使用されるウェブページのホストです。

ウェブアプリマニフェストを使用してスコープをさらに絞り込み、サイトの特定のパスに制限することができます。

たとえば、ブラウザペットウェブアプリでこのリンクをクリックして別のページ「webkittens」に移動すると、Web Kittensはexample.comの下で私たちのサイトの単なる別のページであるため、私たちはウェブアプリ内にとどまっていることに気付くでしょう。

Apple.comへのリンクをクリックすると、example.comの範囲外であるため、デフォルトのブラウザで開きます。

apple.comへのリンクのように、デフォルトのブラウザでWeb Kittensへのリンクを開きたい場合は、Webアプリのマニフェストでスコープを調整できます。

スコープを調整するには、まず「start_url」を追加することから始めます。

start_urlは、ウェブアプリが最初に開いたときに読み込まれるURLです。

これにより、ブラウザペットのホームページが開きます。

では、スコープを追加します。

ブラウザペットとウェブ子猫を別のウェブアプリに分けたいとすると、範囲をブラウザペットだけに制限できます。

スコープはマニフェストURLのサブディレクトリです。

この場合、スコープはexample.com/browserpetsになります。

スコープ内のリンクはウェブアプリ内にとどまり、スコープ外のリンクはデフォルトのブラウザで開きます。

iOSのホーム画面のウェブアプリでは、スコープ外のリンクがSafari View Controllerで開きます。

したがって、このホーム画面のウェブアプリでこのリンクをタップすると、Safari View Controllerで開きます。

日常的に使用している多くのウェブサイトを最大限に活用するには、ログインする必要があります。

先に述べたように、ほとんどのユーザーにとってウェブアプリを箱から出してすぐに機能させるために、Mac上のウェブアプリがDockに追加されたときにウェブサイトのクッキーをコピーします。

多くの場合、シームレスな体験のためにウェブアプリが開かれたとき、ユーザーはログインしたままです。

その時点で、クッキーはSafariとウェブアプリの間で分離されています。

認証状態がサイトのクッキーにのみ保存されている場合、SafariがDockに追加されたときにWebサイトのCookieをWebアプリにコピーするため、ユーザーはDockに追加するときにWebアプリに自動的にログインする必要があります。

一部のウェブサイトは、クッキーとローカルストレージの間で認証状態を分割します。

ウェブアプリの作成時にローカルストレージがコピーされないため、ユーザーはサイトをウェブアプリとして使い続けるために再認証する必要があります。

ユーザーにスムーズな体験を提供するには、認証状態をクッキー内に保存してください。

前に述べたように、ウェブアプリの範囲を超えたリンクはデフォルトのブラウザで開きます。

ユーザーがデフォルトのブラウザでWebページにログインすると、Webアプリが追加された後、Cookieとストレージが分離されるため、Dockにすでに追加されたWebアプリにログインされません。

サードパーティのドメインでのOAuthによる認証は、引き続きウェブアプリで開きます。

これはヒューリスティックによって行われます。

テストして、OAuthフローがユーザーのデフォルトブラウザで認証エクスペリエンスを開くことが判見された場合は、apple.com/feedbackを使用してフィードバックを送信してください。

ユーザーのデフォルトブラウザでOAuthフローが開かないようにしたい場合は、window.openを使用できます。

Window.openから読み込まれたリンクは、スコープに関係なく、常にウェブアプリで開きます。

Appleは、認証ドメインへのリンクがウェブアプリのコンテキスト内にとどまるべきであることを示す方法を開発者に提供するために、標準化団体と協力しています。

一部のWebサイトでは、電子メールリンクを使用して、リンクを開いてユーザーに自動的にサインインします。

電子メールからのリンクはデフォルトのブラウザで開くため、ユーザーがすでに持っているウェブアプリに自動的にサインインすることはありません。

ユーザーがサイトのサインインフローに簡単に入力できる代替のワンタイムコードを電子メールで提供することをお勧めします。

より便利で安全な認証体験のために、サイトでの認証にパスキーを採用することを検討してください。

詳細については、WWDC22の「Meet passkeys」をチェックしてください。

MacのWebアプリの通知は、macOS VenturaのSafariとiOS 16.4のホーム画面のWebアプリの既存の標準ベースのWebプッシュサポートへのエキサイティングな追加です。

次に、バッジやサウンドなどの通知をウェブアプリに統合する方法を説明します。

すでにWeb標準に従ってWebプッシュを実装している場合、プッシュ通知は追加の作業なしでMac上のWebアプリとしてWebページで動作するはずです。

Mac上のウェブアプリの通知は、通知のウェブアプリのアプリケーションアイコンを使用します。

SafariからのWebプッシュ通知にはSafariアイコンが表示され、MacのWebアプリからの通知は通知のWebアプリのアイコンを使用し、ユーザーにコンテキストを提供します。

ユーザーの注意を引くための通知を受け取ったときに、ユーザーのデバイスでサウンドを再生したいかもしれないので、macOS、iOS、iPadOSでそれがどのように機能するかを説明します。

通知APIを使用すると、通知に音声があるかどうかを指定できます。

プラットフォームの慣習に従って、サウンドはiOSとiPadOSではデフォルトでオンになっており、macOSではサウンドはデフォルトでオフになっています。

プラットフォームのデフォルトを上書きするには、サイレント値を明示的に指定します。

通知がサイレントでなければならない場合は、通知をリクエストするときにオプションでサイレントをtrueに設定します。

通知が鳴る場合は、サイレントをfalseに設定します。

ネイティブアプリの通知と同様に、ユーザーは通知設定を使用して通知音を制御できます。

バッジは、ウェブアプリに何か対処すべきものがあることをユーザーに警告するのに便利です。

iOS 16.4のホーム画面のウェブアプリと同様に、Macのウェブアプリはバッジをサポートしています。

バッジとプッシュ通知はmacOS、iOS、iPadOSで非常に密接に関連しているため、ユーザーがウェブアプリが通知を送信することを許可する場合、ウェブアプリがバッジを使用する許可が含まれます。

バッジは、ウェブアプリが開いているときや、プッシュイベントがバックグラウンドで処理されているときに更新できます。

ユーザーはいつでも設定でバッジを設定できます。

Badging APIの採用の詳細については、webkit.orgの「ホーム画面Webアプリのバッジ」をご覧ください。

標準ベースのWebプッシュの採用の詳細については、WWDC22の「Meet Web Push for Safari」をご覧ください。

iOSのホーム画面のウェブアプリとMacのウェブアプリはFocusと統合され、ユーザーが通知を制御できるようにします。

ユーザーは、異なるフォーカスモードで見たい通知を設定し、すべてのデバイスでフォーカスモードに設定を適用できます。

ウェブアプリのマニフェストを振り返ってみましょう。

「Id」マニフェストキーは、同じドメイン内の一意のウェブアプリを定義します。

これはフォーカスモードの同期に使用され、同じドメインで異なるWebアプリとして扱われるべきWebサイトの複数の部分がある場合に便利です。

特定のドメインのウェブアプリが1つしかない場合は、IDを設定する必要はありません。

IDが提供されない場合のフォールバックはstart_urlです。

フォーカスの大きな部分の1つは、フォーカスモードがユーザーのすべてのデバイスでどのように同期するかです。

あなたとあなたのユーザーの両方が、フォーカスモードの設定の同期方法を制御します。

開発者として、サイトのさまざまな部分に対して異なるウェブアプリを持っているかもしれません。

たとえば、ショップ用のウェブアプリが1つ、フォーラム用のウェブアプリが1つあります。

ここでは、「名前」列は、ユーザーのiPhoneまたはMac上のウェブアプリの名前です。

ウェブアプリマニフェストのIDキーは、ID「ショップ」で作成されたウェブアプリがあなたのショップ用であり、ID「フォーラム」で作成されたウェブアプリがあなたのコミュニティのフォーラム用であることを示すために使用できます。

このようにして、ユーザーはショップとフォーラムのウェブアプリに異なる通知設定を設定できます。

フォーカスモードは、名前とIDが一致すると、ユーザーのデバイス間で同期します。

ユーザーは、デバイス上の特定のサイトのウェブアプリの複数のインスタンスを作成できます。

これは、仕事と個人のアカウントを分離するのに役立ちます。

ユーザーは、インスタンスごとに異なる名前を選択できます。

この例では、「フォーラム」と「フォーラム - 仕事」。

このようにして、ユーザーは、すべてのデバイス間で同期するフォーラムウェブアプリごとに異なる通知とフォーカス設定を設定できます。

今年WebKitに追加したAPIがいくつかありますが、ウェブサイトを作成する際に役立つかもしれません。

一時的またはスティッキーなユーザーアクティベーションが発生したときにウェブサイトに通知するユーザーアクティベーションAPIをサポートしています。

これは、通知を送信する許可を要求するなど、ユーザーのアクティベーションに依存する関数を呼び出しても大丈夫かどうかを判断するのに役立ちます。

macOSとiPadOS用のSafari 16.4で、更新されたプレフィックスなしのフルスクリーンAPIを出荷しました。

また、タイプと角度のプロパティ、onChangeイベントハンドラなど、スクリーンオリエンテーションAPIの予備的なサポートを追加しました。

詳細については、webkit.orgの「Safari 16.4のWebKit機能」をチェックしてください。

Mac上のウェブアプリは、すべてのウェブサイトで箱から出して動作します。

ウェブアプリマニフェストを使用して、ウェブサイトがDockに追加されたときの動作をカスタマイズできます。

ウェブプッシュやバッジなど、ウェブアプリに合わせた機能を実装できます。

SafariでのWebサイトの開発とデバッグの詳細については、WWDC23の「Safari開発者機能の再発見」と「Web Inspectorの新機能」をご覧ください。

ご覧いただきありがとうございます。

WWDC23をお楽しみください。

♪ ♪