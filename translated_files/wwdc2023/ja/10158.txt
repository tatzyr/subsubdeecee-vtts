10158

♪ ♪

ジェイコブ:こんにちは、私はジェイコブです。

私たちが構築するUIは、どこでも変化と動きで、よりダイナミックに成長し続けています。

人々はこれが大好きです。

インターフェイスをより生き生きと感じさせ、何が起こっているのかを理解しやすくし、UIとのやり取りに楽しさをもたらします。

そして、これらのダイナミックな相互作用を作るために一緒に来るものがたくさんあります。

あるシーンから別のシーンに移動するトランジションがあります。

そして、デバイスと直接やり取りするジェスチャーがあります。

そして最後に、画面上のオブジェクトが視覚的なプロパティを移動、成長、または変更するアニメーションがあります。

これらはすべて連携し、流動的でインタラクティブなUIを作るのに役立ちます。

今日は、素晴らしいアニメーションの構築を深く掘り下げます。

アニメーションの違いは微妙かもしれませんが、アニメーションがちょうどいいとき、ユーザーはそれを感じることができます。

だから、あなたのアプリのアニメーションをエレガントで自然に感じさせる方法をあなたと共有したいと思います。

そして、私たちは強力で、汎用性があり、さらには楽しい1つのツールに焦点を当ててそれを行うつもりです:スプリング!

スプリングがアニメーションに適している理由について議論することから始めます。

次に、スプリングの仕組みの詳細について説明します。

そして最後に、アプリでスプリングを使用する方法について話します。

では、なぜスプリングはアニメーションに役立つのでしょうか?

それに答えるには、一歩下がって、何が素晴らしいアニメーションを作るのかを議論する必要があります。

いくつかのアニメーションがあるコンテキストを調べてみましょう。簡単なトグルです。

このトグルに集中しましょう。

私たちはいくつかの理由でアニメーションを使用していますが、最も重要なことの1つは、より良い継続性を与えてくれることです。

オブジェクトが1つの場所で始まり、突然別の場所に現れた場合、それは耳障りに感じられ、時には混乱することがあります。

物体が1つの場所から次の場所に移動するのを見ると、はるかに自然に感じます。

しかし、それはポジションだけではありません。

物体の速度が突然変化すると、それも不自然に感じます。

たとえば、ここでは、トグルのノブは速度のジャンプで開始および終了し、正しく感じません。

したがって、私たちが持っている1つの目標は、アニメーションを連続した位置と速度にすることです。

いくつかのアニメーションタイプを見て、その要件でどのように行うかを見てみましょう。

そして、私たちのトグルは完全なアニメーションの便利な例ですが、ノブの動きだけに焦点を当てたいので、1つのアニメーションで何が起こっているのかを簡単に見ることができます。

イージーインとアウトを見ることから始めましょう。

これはベジェ曲線アニメーションの一種で、その動きは曲線と持続時間の組み合わせによって定義されることを意味します。

この物体の動きを見ると、突然のジャンプがあるようには感じません。

これが事実であることを確認するために、このアニメーションの動きのチャートを調べることもできます。

これらのチャートのいくつかを見ていきますので、それが何を示しているかについて話し合いましょう。

水平軸は時間を表し、下線はアニメーションの初期位置を示し、上線はターゲット位置を示します。

そして、アニメーションを繰り返し再生すると、この曲線を繰り返し進みます。

では、アニメーションをもう一度始めましょう。

チャートの曲線にジャンプがないことに注意してください。つまり、その位置は連続的です。

また、速度も表示するようにチャートを更新すると、速度にもジャンプがないことを確認できるため、速度も連続しています。

代わりにリニアアニメーションの動きを見ると、アニメーションの開始と終了時に鋭い角と速度のジャンプがあります。

リニアアニメーションは、繰り返し回転インジケーターなど、いくつかの場所で特殊なツールとして役立ちますが、それ以外の場合は、一般的に場違いに感じるこの非物理的な行動を持つ動きのために、特にそれらを使用することに注意する必要があります。

次に、春のアニメーションの連続性を確認しましょう。

私たちが望むように、これには連続的な位置と速度もあります。

これまでのところ、イージーインとアウトと春のアニメーションが最良の選択肢ですが、アニメーションが静止位置から始まるケースのみを見てきました。

ジェスチャーをアニメーションと一緒に使うとどうなるか調べてみましょう。

可動式ノブをiPadに持って行き、指でドラッグしましょう。

この2つのポジションのいずれかに落とすことができます。

しかし、その間のどこかでジェスチャーを終了し、ノブを片側に投げることもできます。

簡単なインとアウトアニメーションで、それは最後までアニメーション化しますが、ジェスチャーが終了するとその動きは停止します。

このタイプのアニメーションは事前に指定された曲線にすぎないため、初期速度を表す方法はありません。

ノブを2次元の任意の位置にドラッグできるようにすると、これはさらに悪化します。

もう一度やってみましょう、でも春のアニメーションで。

春はどんな初期速度でも始めることができるので、ジェスチャーが終わるところでアニメーションが拾う自然な感覚を得ます。

そして、これは2次元のドラッグにも最適です。

SwiftUIは、ジェスチャーがプロパティを変更するときはいつでも速度を自動的に追跡するので、余分な作業なしでこの動作を得ることができます。

したがって、スプリングは、静的ケースと初期速度のケースの両方で連続性を維持する唯一のタイプのアニメーションです。

私たちが調べることができるスプリングの次の利点は、その動きの形です。

春の動きを聞くと、このようなことを考えているかもしれません。

しかし、春のアニメーションは弾力のあるアニメーションを意味するだけではありません。

スプリングがバウンスを持つことができるのは事実であり、それは素晴らしいツールになる可能性がありますが、それは私たちがスプリングを使用する主な理由ではありません。

後で、バウンス付きのスプリングを使用するのが理にかなっているときを見ていきますが、バウンスのないスプリングも素晴らしいです!

これらのタイプの非弾力性スプリングは、iOSのアニメーションで使用されています。

だから、それがバウンスだけではないなら、春の動きの何がそんなに良いのですか?

シンプルな春のアニメーションをもう一度見て、アニメーションがどのように終わるかに注目しましょう。

それは非常にゆっくりと徐々に休むようになる。

オブジェクトが突然行われたとき、単一のポイントはありません。

これは、これが動いて停止していた物体であるかどうか、私たちが期待するもののように感じます。

そして、このバージョンが私たちにとってより自然に感じるのには理由があります。

春のアニメーションは、物理的な世界で春に取り付けられた物体の挙動に基づいているので、それが動くのを見ると、私たちの目にはより自然で信憑性を感じます。

今、あなたはスプリングでアニメーション化する異なるプロパティが異なる時間に終了することができると聞いたことがあるかもしれませんが、それは本当です。

タイミングカーブアニメーションに慣れているなら、これは奇妙に感じるかもしれません。

すべてのアニメーションを同時に開始および停止したくありませんか?

答えはノーです!

私たちは、アニメーションが私たちが慣れている物理的な世界の物体の動きのように感じることを望んでいます。

そして一般的に、これらは摩擦によって減速されるため、自分の時間に開始および停止するため、これらの時間は通常完璧に並んでいません。

実際、マルチプロパティアニメーションのためにさらに進むことは時々有用です。

これはiOSで起動するアプリのアニメーションです。

一見すると、それは単一の均一なアニメーションのように見えるかもしれませんが、アニメーションを遅くすると、異なるスプリング、異なる開始時間、異なる終了時間が一緒になって、信じられないほど自然に感じるアニメーションを形成することがわかります。

スプリングがアニメーションに最適なツールである理由がわかったので、スプリングがどのように機能し、どのように使用するのが最善かを理解するために、スプリングをより詳しく調べましょう。

スプリングアニメーションを使用する場合は、スプリングに取り付けられたオブジェクトの動きでモデリングしています。

物理学に戻ると、この動きは3つの特性によって定義されます。オブジェクトの質量、スプリングの剛性、およびシステムの減衰です。これは、周囲によってオブジェクトにどれだけの摩擦が適用されるかの尺度です。

次に、アニメーションの初期位置をオブジェクトの初期位置として使用し、アニメーションのターゲット位置を使用して、オブジェクトが引っ張られるスプリングの静止位置を定義します。

その後、オブジェクトを解放してアニメーションを開始できます。

スプリングシステムを定義するために使用するプロパティは、発生する動きのタイプを決定し、それらを変更すると、結果のアニメーションが変更されます。

したがって、スプリングアニメーションを作成するときは、質量、剛性、減衰のこれらの同じ特性を使用して、使用するスプリングの種類を設定できます。

しかし、これらは物理的なシステムをモデル化する自然な方法ですが、春のアニメーションを定義するにはあまり直感的ではありません。

ここには質量のある実際の物体や剛性のあるバネはなく、曲線を変えるためにこれらの値を作るのは簡単ではありません。

そのため、理解しやすく、作業しやすいスプリングを設定する新しい方法を洗練してきました。

持続時間とバウンスの2つのパラメータのみを使用します。

これらはあなたが期待することを行い、持続時間を増やすとアニメーションに時間がかかります。

そして、バウンスを増やすと、アニメーションにバウンスが追加されます。

そして、私たちはAppleの設計とエンジニアリングの取り組みを通じてこれらを普遍的に採用しています。

したがって、スプリングをサポートするすべてのフレームワークがそれらを使用します。

これらのスプリングパラメータで遊ぶと、曲線にさまざまな種類の図形を見ることができます。

バウンスが0より大きい場合、ターゲットをオーバーシュートする弾力のあるスプリングが得られる。

バウンスが0の場合、この滑らかな曲線を取得し、長い尾が徐々に目標に向かっています。

そして、もう1つのタイプの春もあります。

これはそれほど一般的ではありませんが、負のバウンス値では、長い尾が徐々に目標に近づいているスプリングを得ることができますが、それは0のバウンスで得られるものよりも少し平らです。

スプリングの物理学では、これらはアンダーダンピング、クリティカルダンピング、オーバーダンピングスプリングと呼ばれます。

しかし、私はそれらを弾力があり、滑らかで、平らだと考えるのが好きです。

そして、お気づきかもしれませんが、これらのバウンス値はパーセントなので、バウンシースプリングは最大100%のバウンス値を持ち、平坦化されたスプリングは0から-100%の間のバウンス値を持っています。今、私はこれらのスプリングをもう少し掘り下げたいです。

スプリングは時々少し威圧的に見え、その動きは理解するのが難しいように見えることがあります。

しかし、何が起こっているのかを分解すると、実際にはいくつかの簡単なことを組み合わせるだけです。

私にとって、これらの曲線の背後にある数学を理解できることは、春をより親しみやすく感じさせるのに役立つので、私もそれをあなたと共有したいと思います。

しかし、数学があなたの頭を回転させるだけなら、心配しないでください、それは完全にオプションです。

私たちはあなたのためにこの数学のすべてを実装します。

では、弾力のある曲線から始めましょう。

この春のオーバーシュートは、より複雑な種類の正弦波または正弦波のように振動していることに気付くかもしれません。

そして、この春のバウンスを最大値の100%まで上げると、それがまさにコサイン波の挙動であり、前後に振動していることがわかります。

これの物理的な解釈は、摩擦が作用しないバネであるため、減速することなく永遠に振動し、実際に目標位置に到達することはないということです。

予想通り、この数学は非常に簡単です:それは単なるコサイン曲線であり、時間は期間で割られます。

したがって、このバウンス値の場合、期間は曲線の期間に正確に対応します。

バウンスを減らすと、スプリングに摩擦や減衰を加えることに物理的に相当し、それが進むにつれて遅くなります。

そして、私たちはまだそれらの振動を持っています。

実際、以前からのコサイン曲線はまだそこにあり、上に重ねて描くとより明確になります。

これは以前と同じ方程式で、定数が異なり、水平方向に少しシフトしています。

したがって、これは曲線の弾力性を説明していますが、明らかに何か他のものも必要です。

元の曲線では、振動のサイズは時間の経過とともに小さくなったり、減衰したりしています。

そして、それが欠けている部分です。

この追加曲線は指数減衰曲線です。

そして、それは私たちの動きの最後の部分であり、私たちに休むという緩やかな感覚を与える部分です。

したがって、複雑な曲線のように見えたのは、減衰コサインまたはサイン波と呼ばれるこれら2つのコンポーネントの産物です。

それはかなり満足のいくものですが、チャートをよく見ると、少し奇妙に思えるかもしれないことが1つあります。なぜ私たちのコサイン曲線は今、最初にこのディップを持っているのですか?

これは、先ほど説明した速度の維持に関連しています。

この基本ケースでは、最初に0の速度を維持する必要があることを覚えておいてください。

したがって、2つの成分曲線の積の速度は0前後で平坦でなければなりません。

しかし、私たちの減衰曲線は上向きの傾きから始まることに注意してください。

コサイン曲線をフラットに開始すると、初期速度も上向きになります。

だから、私たちのコサイン曲線は、減衰でキャンセルし、私たちにフラットなスタートを与えるために、下向きから始めなければなりません。

そして、これは、正しいスタートを与えるために私たちのコサイン曲線で異なるシフトとスケールを使用することによって、スプリングが任意の初期速度を一致させることができる方法です。

この初期速度は、先に説明したように、ジェスチャーが終了し、アニメーションに手渡すときの速度から来ることができます。

そして、この最初の速度がどこから来ることができる別の場所があります。

iPadで調べてみましょう。

ここでは、タップしてノブを動かし、ターゲット位置にノブの暗い画像を表示できます。

また、何が起こっているのかを簡単に追跡できるように、より遅いスプリングを使用します。

アニメーションがまだ終了していない間に、新しいターゲット値に変わる新しいアニメーションが始まることがあります。

それが起こると、春のアニメーションは、新しい目的地への初期速度として再ターゲット化されたときの速度を使用し、この同じ速度の保存は、この種の中断を滑らかで自然に感じさせます。

だから、それが速度保存と弾力のあるスプリングの仕組みです。

さて、バウンスを減らすと、振動はどんどん遠くなり、バウンスが0になるまで、振動は完全になくなり、直線が下がって消えて、減衰で乗算されます。

したがって、これらの方程式はさらに単純です。

線の基本的な方程式が必要で、それに同じ指数関数を掛けて、結果の曲線が得られます。

負のバウンスを持つスプリングである平坦な曲線は、非常に同様に機能しますが、線の代わりに2つの指数関数を一緒に追加します。

このタイプのスプリングはあまり一般的ではありませんが、指数関数的な減衰で表されるという事実は、スクロールビューで起こるような減衰速度のモデリングに役立ちます。

アニメーションにスプリングを使用するときに疑問に思うかもしれないことの1つは、春のアニメーションが実際に終了するまでにどれくらいの時間がかかりますか?

私たちが見たように、その質問は少し微妙です。

スプリングの指数関数的な減衰は、技術的には、より小さく、より小さな動きで永遠に動き続けることを意味します。

もちろん、春のアニメーションが永遠に続くことを望んでいないので、UIに顕著な変化をもたらさなくなったときに、それを削除する時間を選択する必要があります。

春のアニメーションが削除するのに十分なほど終了するまでの時間は、セトリング期間と呼ばれます。

このセトリング期間は、スプリングを設定するための期間パラメータとは異なります。

セトリング期間は多くの異なる要因に依存するため、少し予測できない可能性がありますが、期間パラメータは、春の他のパラメータが変化しても、予測可能で動き回らないように選択される知覚期間です。

その予測不可能な性質のため、ユーザー向けの変更のセトリング期間を待つべきではありません。

スプリングがほぼ完了したときにUIの変更を行う場合は、SwiftUIで新しい完了ハンドラーサポートを使用できます。SwiftUIでは、セトリング期間の代わりに知覚期間を使用します。

スプリングの仕組みがすべてわかったので、コードでの使用について話し合いましょう。

スプリングはアニメーションに最適なツールであるため、SwiftUIのデフォルトのアニメーションとして使用しているため、withAnimationを呼び出すだけでスプリングから始めることができます。

また、アニメーションにスプリングを明示的に使用しやすくしました。

iOSで使用されているスプリング値に基づいて、いくつかのスプリングプリセットを組み込みました。

どのスプリングパラメータを使用するかわからない場合、これらは気持ちの良いものを得るための素晴らしい方法です。

アニメーションが必要なときにプリセットを直接使用することで、これらをコードで使用できます。

しかし、春のアニメーションを使用する重要な部分は、必要な正確なコンテキストに合わせてチューニングすることなので、これらのプリセットは調整可能な出発点としても使用できます。

プリセットを取り、その期間が異なるように指定するか、追加する余分なバウンスの相対量を指定することで、多かれ少なかれバウンスを与えることができます。

これらのプリセットは、アプリにスプリングを導入し始めるのに最適な方法です。

しかし、さらに進みたい場合は、.springアニメーションで完全にカスタムスプリングを作ることもできます。

これにより、スプリングの持続時間とバウンスを完全に指定できます。

そして、これらのバウンス値は-1.0から1.0の範囲です。

これらの同じパラメータを使用して、UIKitとCore Animationで春のアニメーションを作成することもできます。

さらに進みたい場合は、使用できる別の新しいスプリングツールがあります。

SwiftUIにSpringモデルタイプを追加しました。これにより、パラメータを含むスプリングの表現を作成できます。

これにより、パラメータを指定するさまざまな方法間でパラメータをプログラムで変換できます。

また、質量、剛性、減衰などの一連のパラメータを使用してスプリングモデルを作成し、スプリングアニメーションとして直接使用することもできます。

しかし、本当に自分で変換したい場合は、バウンスと持続時間の値から質量、剛性、減衰に変換する3つの方程式があります。

パラメータの変換に加えて、スプリングモデルを使用して独自の高度なスプリングビヘイビアを構築できます。

春にメソッドを呼び出すと、内蔵の春の評価数学を自分で取得できます。

たとえば、値を呼び出すと、スプリングの位置を取得できます。

春が向かっている目標と、それを評価したい時間を通過するだけです。

また、速度法で同じ入力を使用して、時間の経過とともにスプリングの速度を評価することもできます。

これにより、独自のコードでスプリングを簡単に使用でき、シミュレーションや、このセッションのようなチャートの値を取得するのに便利です。

これを使用して、独自のカスタムアニメーションを作成することもできます。

スプリングモデルを呼び出すだけで、入力または出力を変更して、スプリングアニメーションにカスタマイズを適用できます。

Explore SwiftUIアニメーションをチェックして、カスタムアニメーションの作成の詳細を学んでください。

最後に議論したいことは、スプリングに使用するパラメータを選択する方法です。

アニメーションに最適な値を選択するには、一般的に、好きなペースを与える持続時間値を見つけることから始めるのが最善です。

それを決めたら、このアニメーションにどのようなキャラクターと感情が欲しいかを選択するために、バウンスの量を調整し始めることができます。

異なるバウンス値が質的に異なると感じることがわかります。

0のバウンスは、スムーズで緩やかな変化のように感じます。

約15%のような小さなバウンスは、まだあまり弾力を感じませんが、長い尾はもう少し活発に感じます。

そして、30%のようなより大きなバウンス値のために、あなたはいくつかの顕著な弾力性を感じ始めます。

さらに進むと、かなり極端な量の弾力性を得ることができます。

しかし、UI要素には誇張されすぎていると感じる可能性があるため、約0.4よりも高い値を使用することには注意する必要があります。

では、実際にどのバウンス値を使うべきですか?

わからない場合は、バウンス0のスプリングを使用してください。これは、バウンスを指定しない場合にも得られるものです。

これにより、最も汎用性の高い素晴らしい汎用スプリングが得られます。

その後、アニメーションをもう少し遊び心のある感じにしたい場合は、バウンスを追加し始めることができます。

バウンスは、ジェスチャーの最後に使用される場合など、アニメーションをより物理的に感じさせたい場合にも意味があります。

そして、あなたが心に留めておくべきことの1つは一貫性です。

あなたのアプリがどのようなキャラクターを持っているか考えてみてください。

それは深刻ですか、それとも遊び心がありますか?

それはリラックスした気分になるべきですか、それともテンポが速いと感じるべきですか?

それは、その周りのUIの感覚と一致していると感じる春の値を選択するのに役立ちます。

だから、それはアニメーションにスプリングを使用する簡単なツアーです。

春は素晴らしいアニメーションを作るために跳ね返る必要がないことを覚えておいてください。

素晴らしい出発点である新しいスプリングプリセットのセットもありますが、さらに進む必要があるときに持続時間とバウンスを使用してカスタマイズできます。

そして最も重要なことは、スプリングが持つすべてのユニークな利点を見た後、あなたのアプリを流動的で楽しい気分にさせるために春のアニメーションを使用することに興奮していることを願っています。

ありがとうございます。

♪ ♪