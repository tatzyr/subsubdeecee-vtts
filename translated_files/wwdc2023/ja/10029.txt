10029

♪ ♪

カルビン：こんにちは。私はwatchOSチームのエンジニア、カルビン・ゲイスフォードです。

このコードアロングセッションでは、Apple Watchの新しいスマートスタックのウィジェットを構築します。

AppIntent設定を使用してウィジェットを構築するプロセス全体を順を追って説明します。

その過程で、最新のWidgetKitとSwiftUIのアップデートを使用します。

コードアロングにはBackyard Birdsアプリを使用します。

Backyard Birdsは、訪れる鳥を引き付ける裏庭を作成して管理できるアプリです。

私たちのウィジェットは裏庭のステータスを表示します。

鳥が訪れている場合は、鳥が表示され、裏庭のステータスも含まれます。

ウィジェットはスマートスタックに関連する日付を提供するので、最も関連性の高いときにウィジェットに優先順位を付けることができます。

フォローしたい場合は、このセッションに関連付けられているサンプルコードをダウンロードし、Backyard Birds Xcodeプロジェクトを開くことができます。

BackyardVisitorsWidgetファイルを含むいくつかのファイルを生成したプロジェクトにウィジェット拡張機能をすでに追加しました。

私たちはほとんどの時間をこのファイルの更新に費やします。

これが私たちがカバーするものです。

まず、ウィジェットを定義するウィジェット構造を見ていきます。

また、ウィジェットの設定意図の概要も簡単に説明します。

次に、TimelineEntry構造をカスタマイズしてウィジェットビューのデータを保持し、タイムラインを構築します。

タイムラインにプレビューを有効にするために必要なデータを取得したら、ウィジェットのビューを構築します。

ビューが構築されたら、タイムラインを完成させるために戻ってきます。

最後に、関連するインテントマネージャーを見て、watchOSスマートスタックでウィジェットを優先する日付のインテントを設定します。

コードのウィジェット構造を見て、ウィジェットの設定を始めましょう。

ウィジェット構造は、ウィジェットの設定が定義されている場所です。

watchOSの新機能にはAppIntentConfigurationsがあります。

ウィジェットでAppIntentConfigurationを使用します。

WidgetExtensionを作成したときに、設定の意図、プロバイダー、およびビューはすべてスタブアウトされました。

それぞれを見て、Backyard Birdsウィジェットに実装します。

このウィジェットの定義は良さそうなので、先に進んでWidgetConfigurationIntentを見てみましょう。

私たちのウィジェットは、App Intent Configurationを使用して、2つのことをできるようにしています。

まず、私たちのウィジェットは、watchOSウィジェットギャラリーで事前に設定されたウィジェットのセットを提供することができます。

Backyard Birdsの場合、アプリで各庭の設定を提供します。 では各庭の設定を提供します。

第二に、WidgetConfigurationIntentは、ウィジェットが最も関連性の高い日付を指定するために使用されます。

スマートスタックは、この情報を使用して、スマートスタックのウィジェットに優先順位を付けます。

ウィジェットの構成アプリの意図を見てみましょう。

Backyard Birdsの各庭には固有のIDがあります。

私はすでにbackyardIDという名前のパラメータを追加したので、これは裏庭IDで識別される各ヤードに1つずつ、一連のウィジェットインテントを作成するために使用できます。

私たちが構築しているウィジェットのために、それが私たちが必要とする唯一のパラメータです。

App IntentsとWidgetConfigurationIntentのさらなる使用方法の詳細については、App Intentsに関するこれらのセッションをチェックしてください。

ウィジェット構造が定義されており、裏庭IDを保持できるWidgetConfigurationIntentがあります。

ウィジェットのタイムラインに移り、TimelineEntryの構造を見てみましょう。

TimelineEntry構造は、ウィジェットビューが特定の日付にレンダリングする必要があるすべてのデータを保持します。

BackyardVisitorsWidgetファイルに戻り、生成されたSimpleEntry構造を見つけます。

このファイルが生成されたときに、日付と設定のプロパティが追加されました。

ウィジェットビューに必要な追加のプロパティを定義する必要があります。

私たちのウィジェットは、その名前、食べ物、水の状態を含む裏庭のステータスを表示します。

鳥が訪れている場合は、訪れる鳥と鳥の名前が表示されます。

鳥がいなければ、何羽の鳥が庭を訪れたかが示されます。

庭に関する情報を表示するには、特定の時点で裏庭に関するすべての情報を保持するBackyard Birdsアプリの構造を使用します。

TimelineEntryには将来の日付がある可能性があるため、これは重要です。

裏庭のプロパティをTimelineEntryに追加しましょう。

それでは、追加したばかりの裏庭のプロパティに基づいて、いくつかの計算されたプロパティを追加しましょう。

まず、ウィジェットビューが鳥が訪れているかどうかをチェックして表示できるように、鳥のプロパティを追加しましょう。

それでは、私たちのビューが庭に関する詳細情報を表示するために使用する2つのプロパティを追加しましょう。

waterDurationとfoodDurationは、水と食べ物がどれくらい続くかを示すためにビューで使用されます。

これらは、TimelineEntryのdateプロパティから計算されます。

TimelineEntryには、実装された場合、どのタイムラインエントリが最も重要であるかをwatchOSスマートスタックに伝えることができる関連性という名前のプロパティもあります。

関連性プロパティをTimelineEntryに追加しましょう。

中で、裏庭にタイムラインエントリーの日付の訪問者がいるかどうかを確認しましょう。

訪れる鳥がいる場合は、TimelineEntryRelevance構造を返します。

TimelineEntryRelevance構造は、スコアと期間の2つのパラメータを取ります。

スコアは、同じタイムライン内の他のエントリに対してエントリに優先順位を付けるために使用されます。

スコアを10に設定して、訪問者のいないエントリよりも訪問者のエントリを上位にランク付けします。

この値は任意であり、タイムラインでエントリをランク付けするために必要な値の範囲を持つことができます。

期間は、この関連性エントリが有効期間をスマートスタックに伝えるために使用されます。

訪問者の終了日までの期間を設定しました。

訪問者がいない場合は、スコアがゼロの関連性構造を返しましょう。これは、どのタイムラインエントリが最も重要であるかをスマートスタックに伝えます。

その時点で他に何が起こっているかによっては、ウィジェットがwatchOSスマートスタックで優先されるかもしれません。

私たちのTimelineEntryは見栄えがよく、ウィジェットビューが適切にレンダリングするために必要なものがすべて揃っています。

先に進んで、TimelineProviderを構築しましょう。

TimelineProviderには、プレースホルダ、スナップショット、タイムライン、推奨事項の4つの機能を完了する必要があります。

プレースホルダ機能は、ウィジェットが初めて表示されたときに使用され、すぐに戻ってくるはずです。

裏庭を取るためにタイムラインEntryを更新したので、裏庭を供給する必要があります。

アプリのデータモデルからランダムな裏庭を追加して、それを修正しましょう。

それはいいですね。先に進みましょう。

スナップショット機能は、ウィジェットが一時的な状況にあるときに使用されます。

この関数はすぐに返されるはずなので、フェッチに数秒以上かからない限り、サンプルデータを使用することは問題ありません。

プレースホルダ関数で行ったのと同じことを行い、ランダムなヤードを渡すことができます。

それは良さそうですが、私たちはもっとうまくやることができます。

スナップショット関数には、先ほど追加したbackyardIDプロパティを持つ設定インテントが渡されます。

私たちのデータはすべてローカルなので、ランダムな裏庭を使用するのではなく、適切な裏庭をすばやく検索して返すことができます。

構成のbackyardIDから設定された裏庭を取得しましょう。

では、裏庭をチェックして、そこからビジターイベントを取得できるかどうか見てみましょう。

訪問者の日付で設定されたエントリを返しましょう。訪問者がない場合は、現在の日付で設定されたヤードを返します。

これは、設定された裏庭が表示されるため、ユーザーにより良いプレビューを提供します。

タイムライン機能に飛び込む前に、Xcodeキャンバスプレビューをオンにしたい。

最後のSimpleEntryを修正して、プレビューを見ることができるように裏庭を与えましょう。

では、キャンバスをオンにしましょう。

Xcodeの新機能は、ウィジェットのタイムラインをプレビューする機能です。

キャンバスには長方形のウィジェットのプレビューが表示されており、下部にはウィジェットのタイムラインを構成する一連のタイムラインエントリがあります。

キャンバスのプレビューは、ウィジェットを追加したときに生成されたデフォルトのビューを使用しています。

タイムラインプロバイダーを完成させる前に、ビューを構築して、タイムラインをよりよく視覚化できるようにしましょう。

BackyardBirdsWidgetEntryViewを探します。

各ファミリー専用のビューを構築できるように、ウィジェットファミリーの環境プロパティを追加しましょう。

各accesslementWidgetファミリのビューを実装できるように、本体をswitchステートメントに置き換えましょう。

では、エントリをパラメータとして取るビューで、access accessoryRectangular のケースを作成しましょう。

この見解を以下に実装します。

長方形のビューは、watchOSスマートスタックに表示されるウィジェットのビューになるという点でユニークです。

長方形のビューでは、左側に画像、右側に3行のテキストがある共通のパターンに従います。

ファイルの一番下に移動して、RectangularBackyardViewを作成しましょう。

このビューは、裏庭のデータを含むように以前に修正したTimelineEntryを使用します。

続ける前に、キャンバスビューをスマートスタック長方形ビューに切り替えましょう。

これにより、ウィジェットを構築する際にウィジェットを視覚化できます。

それでは、ビューのHStackに画像と3行のテキストを入れましょう。

プレビューを見てください。それは正確にはそうではありません。

テキストの行を独自のVStackに入れましょう。

オーケー、それは近い。

エントリからビューに実際のデータを入れましょう。

まず、鳥を表示できるBackyard BirdsアプリのComposedBirdビューを使用します。

鳥はオプションなので、包みを解く必要があります。

ComposedBirdビューとVStackをif-letチェックに入れて、エントリに鳥がいるかどうかを確認します。

鳥がいない場合は、庭に噴水の画像と鳥がいないことを示すテキストを入れましょう。

タイムラインを見て、3行のテキストで鳥を示すエントリと、鳥が表示されないエントリを見ることができます。

最初に鳥がいる場合の詳細を記入しましょう。

最初の行では、鳥の名前、2行目、裏庭の名前を表示し、3行目には、庭の食べ物と水に関する情報を追加します。

鳥がいない場合は、庭の名前、食べ物と水の情報、そしてこの庭への訪問者数を示しましょう。

私たちのエントリーがどのように見えるか見てみましょう。

それは素晴らしいことですが、レイアウトを少し修正しましょう。

まず、ComposedBirdを更新しましょう。

ビューをscaledToFitにして、widgetAccentableにして、着色された時計の文字盤で使用すると色合いになるようにしましょう。

鳥の名前に、見出しフォントを追加し、拡大縮小し、watch faceで着色するようにwidgetAccentableにしましょう。

また、foregroundStyleを使用して、テキストを鳥の翼の色に合わせます。

名前が長になった場合に備えて、他の両方のビューにスケールファクターを追加しましょう。

最後の行のforegroundStyleをセカンダリに設定しましょう。

最後に、3つのテキストビューが整列されるように、スタック先頭を整列させましょう。

私たちの景色はかなり良さそうです。

鳥がいない場合は、これらの同じ更新をすべてelseステートメントのビューに適用しましょう。

今、私たちのウィジェットは見栄えが良くなっています。

鳥や庭を表示するとき、ウィジェットの間隔が異なることに注意してください。

バードビューと画像ビューにフレームを追加して、それらを一致させましょう。

また、適切に整列するように、VStacksにフレームを追加します。

watchOSスマートスタックのウィジェットを完成させるために追加する必要があるオプションがもう1つあります。

SwiftUIの新機能には、containerBackgroundがあります。

コンテナの背景を裏庭からのグラデーションに置き換えましょう。

コンテナの背景配置をウィジェットに設定します。

containerBackgroundはシステムによって選択的に使用され、ここではwatchOSスマートスタックにのみ表示され、文字盤には表示されません。

これで、watchOSスマートスタックの準備が整いました。

景色は素晴らしく見えるので、TimelineProviderに戻り、タイムラインの構築を終わらせましょう。

タイムライン関数は、ウィジェットがウィジェットのビューをレンダリングするためのデータを含むタイムラインエントリのコレクションを生成する場所です。

これはウィジェットの主力機能です。

現在、ランダムな裏庭データで5つのエントリを生成しています。

それを鳥の訪問でいっぱいのタイムラインに置き換えましょう。

関数の上部には、TimelineEntriesの配列があります。

これを使ってタイムラインを構築します。

まず、生成されたタイムラインコードを削除しましょう。

それでは、ConfigurationAppIntentからbackyardIDを使用して、設定されたヤードを取得しましょう。

裏庭の構造には、その庭のすべての訪問者イベントを含むプロパティがあります。

取得したヤードの訪問者イベントを反復しましょう。

イベントごとに、visitorEventのstartDateを含むTimelineEntryを作成し、設定された裏庭に渡しましょう。

タイムラインのプレビューが更新されました。それがどのように変わったか見てみましょう。

タイムラインのエントリを選択すると、鳥が現れます。

それは私たちが期待していたことです。ただし、すべてのエントリには訪問者がいます。

鳥が去るときのエントリも追加する必要があります。

2番目のエントリを作成し、visitorEventのendDateを使用しましょう。

同じ裏庭を使用し、エントリ配列にエントリを追加します。

では、タイムラインを見てみましょう。

さて、鳥がいつ訪れ、いつ出発するかのエントリーがあります。

私たちのウィジェットのタイムラインは素晴らしく見え、この新しいタイムラインプレビューは素晴らしいです。

ウィジェットとタイムラインの構築がずっと簡単になります。

最後に、タイムラインプロバイダーの推奨機能を実装しましょう。

ここでは、backyardIDを保持するWidgetConfigurationIntentを含むAppIntentRecommendationsの配列を返す必要があります。

デフォルトの実装を削除しましょう。

返す推奨事項の配列を作成しましょう。

次に、アプリで各裏庭の推奨事項を作成したいので、すべての裏庭を反復してみましょう。

裏庭ごとに、ConfigurationAppIntentを作成し、backyardIDを設定します。

そして最後に、ConfigurationIntentを使用してAppIntentRecommendationを作成し、配列に追加しましょう。

説明として裏庭の名前を挙げます。

推奨事項機能は、人が裏庭の鳥のウィジェットを選択しているときに、ウィジェットギャラリーで、各裏庭に1つずつウィジェット構成のリストを提供するようになりました。

おめでとうございます。

これで、ウォッチフェイスのコンプリケーションとwatchOSスマートスタックとして浮上するウィジェットをwatchOS上に構築しました。

先ほど、TimelineEntryに関連性プロパティを実装したときに関連性について少し話しましたが、できることはもっとあります。

Backyard Birdsアプリの各ヤードは、鳥が利用できる水と食べ物を追跡します。

私たちの新しいウィジェットもその情報を表示します。

水や食料が不足していることを知っている期間中に、関連する意図のリストをシステムに提供することができます。

私たちのウィジェットは、その時期に優先され、庭に注意が必要であることを人々に知らせます。

コードに戻って、可能なウィジェットに関連するインテントを構築する新しい関数を作成し、それらのインテントでRelevantIntentManagerを更新しましょう。

updateBackyardRelevantIntentsという名前の新しい関数を作成します。

この関数では、関連するインテントの配列が必要です。

そして、RelevantIntentManagerをその配列で更新します。

relevantIntents配列に記入するには、アプリ内のすべての裏庭をループします。

次に、裏庭のconfigurationIntentを作成し、backyardIDを現在の裏庭に設定します。

日付に基づいてRelevantContextを作成します。

この場合、裏庭の将来の低食料の日付と将来の空の食料の日付を使用します。

最後に、関連するインテントを作成します。

ウィジェット、ウィジェットの種類、および作成したばかりの relevantDateContextにconfigurationIntentを使用し、これを配列に追加します。

さて、裏庭の低水と空の水の日付に同じことをしましょう。

それは良さそうですね。

これで、ウィジェットの各可能な構成の関連性が高い場合、RelevantIntentManagerは日付範囲を持ちます。

適切なときに関連するインテントが更新されるように、この機能を主要なコンポーネントに追加しましょう。

まず、タイムラインプロバイダのタイムライン関数に戻りましょう。

タイムラインを返す直前に関数を呼び出しましょう。

これにより、ウィジェットのタイムラインを更新するたびに、関連する意図が最新の状態に保たされます。

Backyard Birdsアプリにも行きましょう。

Backyard Birdsアプリには、各庭の詳細ビューがあり、人が食べ物と水を補充できるページを提供します。

これは、食料と水の供給が変わる可能性があるため、関連する意図を更新するのにも理想的な場所です。

BackyardContentTabでは、リフィルボタンをタップすると、updateBackyardRelevantIntents機能でタスクを追加します。

食べ物と水が更新されたばかりであることを知っているので、WidgetKitに電話をかけて、ウィジェットのタイムラインをリロードする必要があります。

これで、関連する意図が更新され、人が庭で水と食べ物を補充すると、ウィジェットのタイムラインがリロードされます。

watchOS Smart Stack用のウィジェットを構築し、RelevantIntentManagerを日付インテントで更新し、最も関連性の高いときにウィジェットに優先順位を付けました。

フォローしてくれてありがとう。

watchOSスマートスタック用にビルドしたウィジェットを楽しみにしています。

ウィジェット、スマートスタック、アプリインテントの詳細については、これらのセッションをチェックしてください。

冒険心を持ち、コーディングを決してやめないでください。