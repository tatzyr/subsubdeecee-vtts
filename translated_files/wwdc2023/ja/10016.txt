10016

♪ ♪

Tu:こんにちは、私の名前はTu Nguyenで、ワークアウトチームのエンジニアです。

今日は同僚のAbhirajと一緒にここにいて、Apple Watch用のカスタムワークアウトを構築する方法を説明します。

watchOS 9では、ユーザーが理想的なワークアウト体験を作成してカスタマイズできるように、ワークアウトアプリに新しいワークアウトタイプを導入しました。ユーザーが距離、エネルギー、時間などの単一の目標でワークアウトを実行できる目標ベースのワークアウト。

ペースやスピードの前面と中央に重点を置くペイサーワークアウト。

トライアスリートのためのスイムバイクランニングワークアウトは、スイム、バイク、ランニングアクティビティをシームレスに移行します。

そして、カスタムワークアウト、カスタム目標とアラートを組み合わせた構造化されたステップ。

そのため、iOS 17とwatchOS 10では、これらのワークアウトタイプをすべてWorkoutKitと呼ばれる新しいフレームワークに導入しています。

WorkoutKitはまったく新しいSwiftフレームワークです。

これにより、ユーザーが自分のアプリ内でワークアウトアプリで作成できるさまざまなワークアウトタイプをすべて作成およびカスタマイズできます。

また、ユーザーが実行できるように、これらのワークアウトをワークアウトアプリに取り込むのに役立つブリッジでもあります。

WorkoutKitは、プレビューUIとスケジュールされたワークアウトを同期する機能を提供します。

これら4つのワークアウトタイプをWorkoutKitに持ち込み、今日はカスタムワークアウトに焦点を当てます。

このセッションでは、カスタムワークアウトの構築、エクスポートのプレビュー、ワークアウトのスケジュール方法について説明します。

まず、カスタムワークアウトの構築に飛び込みましょう。

カスタムワークアウトは、ユーザーが構造化された方法でワークアウトを集中させるのに最適な方法です。

それらには、ワークアウトを通してユーザーを導く一連の異なるステップが含まれています。

カスタムワークアウトを見ると、3つの異なる段階があります。

まず、ワークアウトの開始時にステップがあります。

これはウォームアップステップです。

次に、ステップの独自の組み合わせを含む反復可能なブロックの順序付けられたコレクションがあります。

これらのブロックは、ワークアウトの大部分を占めています。

そして最後に、クールダウンステップと呼ばれるワークアウト終了時のステップ。

さて、ウォームアップ、クールダウン、または反復可能なブロック内のステップのいずれであっても、すべてのステップには2つの重要な属性が含まれています。

まず、すべてのステップには単一の目標が含まれています。

目標は、カスタムワークアウト内のステップの進行を定義します。

目標が完了すると、カスタムワークアウトは次のステップに進みます。

カスタムワークアウト内のステップは、該当する場合、時間または距離の目標を持つことができます。

また、オープン目標を設定することもできます。これにより、ユーザーは手動でステップを進める必要があります。

第二に、すべてのステップに単一のアラートを含めることができます。

アラートは、現在のパフォーマンスを示す特定の指標をユーザーに通知します。

たとえば、ユーザーは、心拍が特定のしきい値を超えたときに警告を受けたい場合があります。

そして、ペース、ケイデンス、パワー、心拍数アラートのサポートももたらしています。

何がステップを構成するかがわかったので、ブロックを詳しく見てみましょう。

ブロックには、作業ステップまたは回復ステップとして区別されるステップが含まれています。

ブロック内のステップには、以前に見たように、独自の目標とアラートが含まれており、ブロック内の任意の順序で任意の数のステップを持つことができます。

ブロックも再現可能です。

ブロックを繰り返す反復回数を指定できます。

では、これがApple Watchでのワークアウト体験にどのように変換されるかを見てみましょう。

まず、ユーザーの現在のステップはブロック内の作業ステップであることがわかります。

このステップには距離目標があるため、残り0.2マイルで現在の目標の進捗状況がわかります。

このステップには、現在の電力のアラートもあり、下部に表示されます。

このステップのアラートを指定しない場合は、ユーザーの現在の心拍数が表示されます。

そして最後に、次のステップは時間ベースの目標を持つ回復ステップであるというプレビューも提供します。

ステップとブロックを使用すると、完全なカスタムワークアウトを構築できます。

繰り返しになりますが、最初はウォームアップステップがあり、次に作業と回復のステップを含む一連の反復可能なブロックがあり、ほとんどの時間をワークアウトに費やし、最後にクールダウンステップがあります。

今、私はそれを同僚のAbhirajに渡して、WorkoutKitで独自のカスタムワークアウトを構築する方法を紹介します。

Abhiraj:こんにちは、私はAbhirajです。私はワークアウトチームのエンジニアです。

Tuが述べたように、WorkoutKitを使用すると、ゴール、ペーサー、スイムバイクラン、カスタムワークアウトのワークアウトを作成できます。

カスタムアウトドアサイクリングワークアウトの例を見てみましょう。

このトレーニングには、ウォームアップ、仕事と回復の2つの繰り返しブロック、トレーニングを終了するためのクールダウンの4つのステップがあります。

ウォームアップステップでは、オープンゴールを使用します。

最初のブロックでは、距離目標とペースアラートを備えた作業ステップと、距離目標と心拍数アラートを備えた回復ステップがあります。

このブロックには4つの反復があります。

2番目のブロックでは、時間目標とパワーアラートを備えた作業ステップと、時間目標と心拍数アラートを備えた回復ステップがあります。

最後に、クールダウンのステップには時間ベースの目標があります。これをコードで表現する方法を見てみましょう。

ウォームアップステップから始めましょう。

まず、WorkoutKitをインポートします。

前に述べたように、私たちのウォームアップステップには、アラートのないオープンな目標があります。

したがって、この場合、デフォルトの初期化子で作成します。

このワークアウトの最初のブロックに移りましょう。

この最初のブロックでは、2つのステップがあります。

最初のステップは、距離目標とペースアラートを備えた作業ステップです。

目標とアラートを表すためにHKQuantityとHKUnitを活用しているため、ここにHealthKitをインポートする必要があります。

これから、WorkoutGoalを使って2マイルの目標を設定します。

また、このステップにペースアラートを追加し、時速10マイルのペースを目指します。

まず、時速10マイルでHKQuantity of pace valueを作成しましょう。

このアラートを作成するには、WorkoutAlertを使用します。

WorkoutAlertを作成するには、WorkoutAlertTargetType、この場合は時速10マイルのターゲット、この場合は現在のペースのWorkoutAlertTypeが必要です。

そして今、私たちはペースのWorkoutAlertを作成することができます。

さて、作業ステップを作成するために、twoMileGoalとpaceAlertでタイプワークのBlockStepを使用します。

このブロックの2番目のステップは回復ステップです。

心拍数ゾーン1アラートで回復のための1/2マイルの目標を作成します。

その後、タイプレストの回復ブロックステップを作成できます。

これで、先ほど定義した作業手順と回復手順でブロックを作成できます。

これを行うには、ステップの配列と反復を4に設定したIntervalBlockを使用します。

そして、それで、私たちの最初のブロックは完了です。

では、2番目のブロックに移りましょう。

このブロックには、2つのステップもあります。

最初のステップは、時間目標とパワーアラートを備えた作業ステップです。

私たちは2分間の目標を設定しました。

この作業ブロックでは、250〜275ワットの範囲の電力範囲アラートを作成できます。

タイプ範囲のWorkoutTargetTypeを作成し、WorkoutAlertを作成します。

最後に、先ほど作成した目標とアラートを使用してBlockStepを作成します。

このブロックの2番目のステップは回復ステップです。

心拍数ゾーン1アラートで30秒の目標を作成します。

その後、回復ステップを作成できます。

これで、反復を2に設定して定義した作業と回復のステップで2番目のブロックを作成できます。

最後に、クールダウンのステップに移りましょう。

クールダウンのステップに時間ベースの目標を持たせたかったので、ここで作成しましょう。

タイプ時間のWorkoutGoalを作成し、それを使用して、目標を5MinuteGoalに設定したCooldownStepを作成します。

さあ、それをすべてまとめましょう。

これまでに構築したすべてのもの、ウォームアップステップ、ブロック1、ブロック2、クールダウンステップを使用して、カスタムワークアウト構成を作成できます。

アクティビティの種類をサイクリングに設定し、場所を屋外に設定しました。

CustomWorkoutCompositionの初期化子のLocationTypeパラメータはオプションで、デフォルトでは屋外に設定されています。

これらすべてを組み合わせて、「マイワークアウト」という名前のカスタムワークアウトを作成しましょう。

また、CustomWorkoutCompositionの初期化子に試行が先行する理由を疑問に思うかもしれません。

それは、構成を検証しているからです。

ワークアウトの構成を検証することの重要性について話し合いましょう。

検証は、一貫したワークアウト構造を確保し、ワークアウトランタイム中の問題を防ぎます。

たとえば、距離目標は、非距離ベースのワークアウト構成には使用しないでください。

同様に、ペースアラートは、エリプティカルなどのペースをサポートしていないトレーニングに適用すべきではありません。

これを助けるために、特定のプロパティが設定されたとき、例、ワークアウトアクティビティタイプ、または特定のAPIを実行したときに実行される一連の検証があります。

また、追加の操作を実行するために、WorkoutCompositionラッパーを作成しました。

たとえば、ワークアウトコンポジションをデバイス間で共有できるファイルにインポートおよびエクスポートするAPIも作成しました。

dataRepresentationを使用して、JSONまたはバイナリでエクスポートします。

はるかに小さいサイズで、コンポジションをバイナリ形式でエクスポートすることをお勧めします。

そして今、私はそれをTuに引き渡して、コンポジションをプレビューする方法について話します。

Tu:どうもありがとう、アビラジ。

これらのAPIを活用して完全にカスタムワークアウトを構築する方法を見るのは素晴らしいことです。

では、ワークアウトの構成ができたら何ができるかを見てみましょう。

ワークアウトの構成では、WorkoutKitでそれらを使ってできることがいくつかあります。

まず、Abhirajが先に述べたように、共有と配布のために.workout拡張子を持つファイルにコンポジションをエクスポートできます。

特定のAPIを呼び出すと検証が自動的に行われ、コンポジションのエクスポートはその一例であることを忘れないでください。

また、コンポジションの内容のプレビューをユーザーに提示するためのAPIもあります。

さて、これはiOSとwatchOSで異なる動作をしています。

iOSでは、コンポジションのプレビューAPIを呼び出すと、プロセス外のUIがアプリの上に表示され、ワークアウトコンポジションの内容全体が表示されます。

この例では、カスタムワークアウト構成があります。

タイトルは上部に目立つように表示され、目標とアラートを含むステップとブロックのリスト、およびユーザーがワークアウトをApple Watchのワークアウトアプリに直接保存するためのオプションが表示されます。

さて、watchOSに目を向けると、プレビューAPIを呼び出すと、ワークアウト構成の内容を含むワークアウトアプリが起動します。

ここから、ユーザーはすぐにワークアウトを開始するか、後で保存することができます。

繰り返しになりますが、Abhirajに渡して、WorkoutKitでこれらのプレビューオプションをお見せします。

Abhiraj:今、私たちは素晴らしいトレーニングをしたので、ユーザーによってそれを保存しましょう。

先に説明したように、WorkoutCompositionを使用して、検証などのワークアウトの追加操作を実行できます。

WorkoutCompositionを使用すると、ユーザーにプレビューを表示できます。

プレビューAPIは、iOSとwatchOS用に最適化されており、ユーザーがプレビュー、保存、またはワークアウトを開始するための便利な方法を提供します。

だから、私たちが以前に作成したサイクリングワークアウトを取り、それをワークアウトコンポジションでラップしましょう。

Tuが先に言及したワークアウトタイプは、WorkoutCompositionで使用できます。

これで、outreoutCompositionのpresentPreview機能を使用してプレビューを表示しましょう。

このAPIはSwiftの最新の並行性機能で動作するように設計されているため、ここではタスクブロックを使用します。

前述のように、presentPreviewは、実行中のプラットフォームに応じて、ワークアウトのプレビューを異なる方法で表示します。

これがどのように機能するか見てみましょう。

iOSでは、この機能はアプリの上にリモートビューを表示します。

ワークアウトと、ユーザーがApple Watchのワークアウトアプリに直接保存するためのオプションが表示されます。

「ウォッチに追加」ボタンは、ワークアウトアプリを新しいワークアウトで更新します。

プレビュー機能はApple Watchでは動作が異なります。

watchOSのプレビュー機能を呼び出すと、アプリでシートを表示するのではなく、ワークアウトのプレビューでワークアウトアプリが起動します。

そして今、私はそれをTuに返して、トレーニングのスケジューリングについて話します。

Tu:ありがとう、アビラジ。

これらのプレビューオプションは、迅速なインタラクションのためにユーザーの前で単一のワークアウト構成を取得するのに本当に役立ちます。

しかし、ユーザーが一定期間にわたって実行するためのワークアウトのコレクションがある場合はどうなりますか?

たとえば、今日ユーザーのためにサイクリングが予定されているとします。週の後半、ハイキング、その数日後、ゴルフ、おそらく予定された休憩、さらにサイクリングの前に。

コンポジションとプレビューAPIを使用して、ワークアウトをワークアウトアプリに直接保存できますが、現在、ユーザーはこれらのワークアウトをすべて管理し、いつ完了する必要があるかを記憶する責任があります。

それはあまりスケーラブルではありません。

このプロセス全体を簡素化するために、WorkoutKitの一部として、アプリはワークアウトアプリに直接ワークアウトをスケジュールすることができます。

それがどのように見えるか見てみましょう。

ワークアウトをスケジュールすると、アプリにはワークアウトアプリの上部に専用のスペースがあります。

この専用スペースは、アプリのアイコンと名前、およびその日の次のワークアウトのプレビューでスタイル設定されます。

ここをタップすると、表示されたスケジュールされたワークアウトがすぐに開始されます。

省略記号をタップすると、同期した今後のスケジュールされたワークアウトなど、詳細が表示されます。

ワークアウトのスケジューリングにはユーザーの許可が必要で、同期はローカルで処理されます。

ユーザーは、次の7日間と過去7日間に予定されているワークアウトを見ることができます。

一度に最大15のワークアウトを同期でき、ユーザーがアプリから完了したスケジュールされたワークアウトを照会できます。

スケジュールされたワークアウトを照会するときは、作成したコンポジション、スケジュールされた日付、およびワークアウトがユーザーによって完了したかどうかのみが含まれます。

健康データは含まれていません。 それらには含まれていません。

したがって、完了したワークアウトから実際の健康統計が必要な場合は、HealthKit APIを参照してください。

また、WorkoutKitの一環として、可能であれば、ワークアウトの構成を取得するためのHKWorkoutの拡張機能を提供しています。

次に、Abhirajに渡して、WorkoutKitを使用してワークアウトをスケジュールする方法を紹介します。

アビラジ:ありがとう、トゥ。

ユーザーがワークアウトをスケジュールするアプリのために、ワークアウトアプリ内で使用するためにワークアウトコンポジションをApple Watchに同期することをサポートする一連のAPIを提供しています。

WorkoutKit APIを活用したアプリを実際に作りましょう。

スケジュールされた日付をワークアウトの構成に関連付けて、それらを同期する必要があります。

やり方をお見せしましょう。

WorkoutKit APIと対話するためのプレースホルダを持つアプリを構築し始めました。

WorkoutKitを活用してこれを機能させる方法を見てみましょう。

ワークアウトをワークアウトアプリに同期する前に、ユーザーから許可を得る必要があります。

WorkoutPlanのauthorizationStateを呼び出すと、アプリの現在の権限を確認できます。

まだ許可を要求していないので、WorkoutPlanのrequestAuthorizationを呼び出すことで、ユーザーに承認を要求できます。

「承認のリクエスト」ボタンをタップします。

requestAuthorization()を呼び出すと、ユーザーは同期をオプトアウトするアラートが表示されます。

ユーザーは、iOSのWatchアプリとwatchOSの設定アプリからワークアウト設定でこの設定を変更することもできます。

アプリを承認したので、Apple Watchのワークアウトアプリから現在のワークアウトプランを取得します。

WorkoutPlan.currentを使用してWorkoutPlanを照会できます。

WorkoutPlanは、アプリからスケジュールされたワークアウトを保存および変更するためのインターフェースです。

「ワークアウトプランを取得」ボタンをタップします。

まだトレーニングを予定していないので、計画にはスケジュールされたトレーニングはありません。

次に、いくつかのワークアウトを作成してスケジュールしてみましょう。

今日はゴルフに行って、今週後半にサイクリングをしたいと思っています。

だから、いくつかの新しいワークアウト構成でそのスケジュールを作成しましょう。

ScheduledWorkoutCompositionオブジェクトには、ワークアウトの構成、スケジュールされた日付、および完了状態が含まれています。

私は今日、明後日のゴルフ予定日とサイクリング予定日を割り当てました。

それが私のアプリでどのように見えるか見てみましょう。

ご覧のとおり、今日はゴルフトレーニングが予定されており、数日後にはサイクリングトレーニングが予定されています。

スケジュールを作成したので、ワークアウトアプリに同期しましょう。

現在のワークアウトプランを使用して、これらの新しいスケジュールされたワークアウトをスケジュールされた構成配列に追加します。

最後に、これらのワークアウトをワークアウトアプリに追加するには、outreoutPlan.save()と呼びます。

これが実際にどのように機能するか見てみましょう。

すごい。今、これらのトレーニングは同期されています。

Tuが述べたように、ワークアウトをスケジュールすると、アプリにはワークアウトアプリの上部に専用のスペースがあります。

それがどのように見えるか掘り下げてみましょう。

ワークアウトアプリを開きましょう。

ご覧のとおり、私のアプリのアイコンと名前が存在します。

今日はゴルフワークアウトが予定されているので、ここをタップするとワークアウトが始まります。

省略記号をタップすると、今後のスケジュールを確認できます。

最初の画面では、今日予定されているすべてのワークアウトが表示されます。

「もっと見る」をタップすると、次の7日間と過去7日間に予定されているワークアウトを見ることができます。

ここでは、今日のゴルフワークアウトと、以前に同期した今後のサイクリングワークアウトの両方を見ることができます。

これで、スケジュールされたワークアウトがどのように提示され、アプリがワークアウトアプリ内に専用スペースを持つことができるかを理解できます。

ご存知のように、今日はゴルフのラウンドを計画しています。

私のティータイムはもうすぐです。

よろしければ、すぐに戻ってきます。

ただ今 

私は素晴らしいゴルフラウンドを行い、バックナインで72を撃ちました。

ユーザーがワークアウトアプリでスケジュールされたワークアウトを完了すると、完了状態が更新されます。

WorkoutPlan.currentを使用してWorkoutPlanを照会して、どのワークアウトが完了したかを判断できます。

ワークアウトがアプリで完了としてマークされている場合は、完了状態を更新して、ユーザーが最新の情報をどこにでも持っていることを確認する必要があります。

私たちのコードに戻りましょう。

サンプルアプリでは、スケジュールされた構成が完了したかどうかを確認できます。

もしそうなら、私たちはそれを完了としてマークしています。

これを実際に見てみましょう。

アプリをワークアウトアプリと同期させるのは素晴らしい練習です。

これで、承認のリクエストからワークアウトアプリへのコンポジションの同期まで、ワークアウトスケジュールAPIの実装方法の基本的な理解がわかりました。

それで、私はそれをTuに返します。

Tu:ありがとう、Abhiraj、そしてあなたがゴルフゲームを改善しているのを見てうれしいです。

それでは、アプリにWorkoutKitを採用する際に留意すべきベストプラクティスをいくつかまとめましょう。

ユーザーに表示したいワークアウト体験に最も適したコンポジションタイプを検討してください。

特にトレーニングがカスタム目標とアラートで異なるレベルの労力と注意を必要とする場合、カスタムワークアウトは非常に有用な構成タイプであることがわかりました。

ただし、水泳はカスタムワークアウトではサポートされていません。

代わりに目標構成を使用する必要があります。

また、アラートはカスタムワークアウトでのみ利用できます。

30分間のランニングのような単純なものに独自のアラートを指定する必要がない場合は、代わりにゴールまたはペーサーの構成を使用することを検討してください。

ワークアウトの構成の検証を必ず処理してください。

非常に詳細な検証エラーを提供し、非互換性やエラーの原因を特定するのに役立ちます。

リマインダーとして、すべてのアクティビティタイプが距離をサポートしているわけではありません。

代わりに、時間またはオープンゴールを使用することを検討してください。

また、すべてのアクティビティタイプがカスタムワークアウトで特定のアラートをサポートするわけではありません。

心拍数ゾーンアラートなどの代替案を検討してください。

スケジュールされたトレーニングを最新の状態に保ちます。

アプリがそうしなければならないかもしれないフォアグラウンドまたはバックグラウンドランタイムを活用してください。

そして最後に、フィードバックをお送りください。

APIを試してみてください。

今日見たサンプルコードはすべてdeveloper.apple.comで入手できます。

また、ワークアウトセッションの同期に関するHealthKitセッションをチェックすることを忘れないでください。

見てくれてありがとう。

♪ ♪