10229

♪ ♪

エリー：こんにちは、私はAppleのインストラクショナルデザインマネージャーであるエリー・ガットッツィです。TipKitで機能を検出可能にすることについて話します。

最初のヒントを作成する方法を学び、誰がヒントを見るべきかを指定するルールを追加し、いつ表示され、却下されるかを管理して、アプリの教育メッセージングの頻度を制御し、ヒントをテストします。

しかし、飛び込む前に、TipKitのちょっとした背景。

あなたは人々が愛することを知っている機能に取り組んでいますが、まず、彼らはそれらを発見する必要があります。

TipKitは、アプリにヒントを簡単に表示できる新しいフレームワークです。

Appleのすべてのユーザー教育に取り組む教育製品チームとして、私たちは教育を特に念頭に置いてTipKitを設計しました。

たとえば、TipKitは、まったく新しい機能について誰かに教えたり、隠された機能の発見を手伝ったり、タスクを達成するためのより迅速な方法を示すことができます。

また、iPhone、iPad、Mac、Apple Watch、Apple TVで利用できます。

それで、私はヒントを作り始めます。

Backyard Birdsアプリには、Backyard Favoriting a Backyardという機能があります。

好意的により、人が最も気にかけている裏庭に簡単に行くことができるため、ヒントの優れた候補になります。

ヒントの機能を特定したら、Xcodeに目を向ける準備が整いました。

Favorite a Backyard機能の新しいヒントを定義することから始めます。

ヒントはタイトルとメッセージで構成されているので、それらを追加します。

便利なヒントには、機能が何であるかを述べるタイトルと、覚えやすい利点情報や指示を含むメッセージとして直接的なアクションフレーズがあり、ユーザーはなぜこの機能を使用したいのかを知り、後で自分でタスクを達成することができます。

効果的なヒントの例をいくつか紹介します。

これらはすべて実用的で、教育的で、覚えやすいです。

TipKitを使用しないときの例をいくつか紹介します。

1つ目はプロモーションで、2つ目はエラーメッセージで、どちらも教育的ではありません。

3つ目は、機能が優れているのは素晴らしいことですが、人々は何もする必要はありません。

最後は便利ですが、その瞬間に読んで覚えておくには複雑すぎます。

さて、私のヒントに戻ります。

私はすでにタイトルとメッセージを持っているので、次にチップビューの基本構造を入れて、TipsCenterを設定します。

TipsCenterは、ヒントと関連するイベントがアプリの起動の間に持続するなど、主要なTipKit機能を有効にし、ヒントのテストを容易にします。

TipsCenterのデフォルトの共有インスタンスが提供され、ここに追加したものです。

TipsCenterを設定すると、ヒントが表示されるようになりました。

それは良さそうに見えますが、より良く見えることがあります。

テキストの色をインディゴに変更してアプリと一致し、注意を引き、ヒントを視覚的に機能と関連付けるのに役立つアイコンを入れます。

ヒントはお気に入りに関するものなので、私は星のシンボルを選びました。

機能にカスタマイズできる設定がある場合は、アクションボタンを追加することをお勧めします。

アクションボタンは、人々をこれらの設定に直接連れて行くことができるので、彼らは迅速に調整することができます。

または、人々が特に役に立つより多くの情報があると感じた場合、別のオプションは、オンボーディングフローなどの追加のリソースにリンクすることです。

さて、私は私の指導のヒントを持っており、それは素晴らしく見えます。

今、私はそれのための最良の治療と配置を特定します。

チップビューには2つのタイプがあります。1つ目はポップオーバービューで、チップをアプリのUIに表示できます。

ボタンやその他の要素を直接指すことができ、現在のアプリ画面を変更せずにユーザーを誘導するのに特に便利です。

tvOSでは、ポップオーバービューが排他的に使用されています。

2つ目はインラインビューで、アプリのUIが一時的に収まるように調整し、UIがブロックされないようにします。

いずれかのビューを使用する場合は、先端を呼び出している関連するボタンまたは要素の近くに表示させると便利です。

裏庭をお気に入りにするために、私はポップオーバービューで行き、右上隅の星のボタンを指すように配置します。

そして、それが私のアプリの最初のヒントです。

それは見栄えが良く、文脈にあります。

しかし、最高のタイミングで理想的な視聴者にリーチするTipKitの力を本当に活用するには、いくつかのルールを追加したいと思います。

チャーリーに渡して、ヒントを次のレベルに引き上げる方法について話します。

チャーリー:ありがとう、エリー。

こんにちは、インストラクショナル製品チームのソフトウェアエンジニアリングマネージャー、チャーリー・パークスです。

新機能を発見すると、驚きと喜びの感覚を呼び起こすことができますが、その機能がその人にとって興味深く、それに関する教育がスパムや無関係ではない場合に限ります。

裏庭をお気に入りにすることについてのヒントは便利ですが、それはすべての人、特にすでに機能を発見した人々のためではないかもしれません。

また、アプリをあまり使わない人には興味がないかもしれません。

Appleでは、アプリ内教育は、その恩恵を受ける人々に焦点を当てるべきだと考えており、アプリで何かを成し遂げようとしている間、個人の邪魔にならないようにすることを目指しています。

ヒントが最も理想的な時間に最も関連性の高いオーディエンスにのみ表示されるように、TipKitは、チップをいつ表示すべきかを正確に決定するために、単独で、または一緒に使用できる多くの適格性ルールを提供します。

ルールには主に2つのタイプがあります。1つ目はパラメータベースのルールです。

パラメータベースのルールは永続的であり、式を書きたいSwift値タイプに基づいてヒントを表示するのに最適です。

2つ目は、イベントベースのルールです。

イベントベースのルールを使用すると、人がチップの対象となる前に実行する必要があるアクションを定義できます。

私のお気に入りの裏庭のヒントのために、私が最初にしたいことは、その人が自分のアカウントにログインしていることを確認することです。

それを達成するために、パラメータベースのルールを実装します。

まず、パラメータの初期値をfalseに設定します。

次に、これをチップのルールに追加します。

すごい。誰がチップを受け取るかを絞り込みましたが、今はさらに絞り込みたいです。

私は、人々にアプリを使用して、彼らにナッジを与える前に有機的に機能を発見できるようにしたい。

私がそれを行う方法は、人が裏庭の詳細ビューに少なくとも3回行った後にのみチップが表示されるようにするイベントベースのルールを作成することです。

だから、まず、私はイベントを作成するつもりです。

次に、ルールがtrueに評価される前に、イベントをトリガーしたい回数をルールカウントします。

この場合、ヒントを提示する前に、裏庭の詳細ビューに3回入力してもらいたい。

私がする必要がある最後のことは、イベントを寄付することです。

したがって、BackyardDetailViewでは、ビューが表示されるときはいつでもイベントを寄付します。

これらのルールは一緒に来ていますが、もう少し引き締めたい場合はどうなりますか?

これまでのところ、私は頻繁に裏庭の詳細ビューに行くが、裏庭をお気に入りにしたことがない人に焦点を当ててきました。

今、私はまた、定期的にアプリを使用している個人にのみヒントを表示したいと思います。

イベントベースのルールに日付クエリ修飾子を追加します。これは、過去5日間に誰かがバックヤード詳細ビューに3回行った場合にのみ真に評価されることを保証します。

もう1つの非常に強力なTipKit機能は、各イベント寄付に関連タイプを追加し、それらのタイプに基づいてイベントを照会することで、カスタム寄付を作成する機能です。

関連するタイプを使用すると、イベントベースのルールをさらに絞り込むことができるので、誰かが特定のバックヤード詳細ビューに行った場合にのみ一致します。

まず、DetailViewDonationを作成し、特定の裏庭ビューのIDを入力します。

その後、私の寄付には、人が現在いる裏庭ビューのIDを含めます。

両方が確立されたら、ルールを更新して、一意の裏庭IDに基づいてイベントを照会します。

これらのカスタム寄付を定義するときは、保存されているデータのサイズを覚えておいてください。

サイズが大きいほど、クエリの実行は遅くなり、パフォーマンスが低下します。

TipKitのルールは作成が簡単で、ヒントから最も利益を得る人々に提示されるようにするための強力で簡単な方法を提供します。

ルールは、必要に応じて一般的または具体的にすることができ、最高のタイミングで理想的なオーディエンスをターゲットにするために組み合わせることができます。

ヒントが私のアプリに表示されたら、私はそれが永遠に画面にとどまることを望んでいません、そして、人がヒントに記載されている機能を使用した場合、私はそれが長引くことを望んでいません。

そして、私が複数のヒントを持っている場合、私はそれらがすべて一度に現れることを望んでいません。なぜなら、それは圧倒的であり、その人がやろうとしていることの邪魔になる可能性があるからです。

TipKitはいくつかの表示と解雇の動作を提供するので、ヒントは良いケイデンスで、有用である限り表示されます。

アプリにさらにいくつかのヒントを追加したので、Backyard Birdsアプリに5つのヒントがあります。

ヒントはすべて便利ですが、それらがすべて一度に現れた場合、あまり効果的ではありません。

TipKitを使用すると、チップの表示頻度を設定できるため、より理想的なケイデンスで表示されます。

TipsCenterでは、別のチップが表示される前に経過しなければならない時間の長さを指定できます。

24時間ごとに1つのチップショーをしたい場合は.daily、60分ごとに1つのチップショーをしたい場合は.hourly、または有効なTimeInterval値を指定してカスタム期間を指定できます。

そして、教育がすぐに必要だと本当に感じる場合は、.immediate修飾子を使用することもできます。

このようにして、人々は、別のヒントが最近現れたり、画面に表示されたりしても、資格のある瞬間に資格のあるヒントを見ることができます。

TipsCenterレベルでの表示頻度を無視する代わりに、1回限りのチップベースで無視する方が便利かもしれません。

これを行うには、特定のチップに.ignoresDisplayFrequencyオプションを追加できます。

さて、その特定のヒントだけが2番目の誰かが適格であることを示し、私のアプリの残りのヒントは、TipsCenterレベルで設定した表示ケイデンスに従い続けます。

ヒントが表示されたら、役に立つ限り画面に残ってほしい。

したがって、誰かがチップに記載されている機能を使用している場合、つまりアクションを実行した場合、またはチップの資格があるが、まだ興味がない場合は、チップを却下する必要があります。

アプリを使用している人がチップディスプレイを持つためのすべてのルールを満たしたとしましょう。彼らはログインし、過去5日間に裏庭の詳細ビューを3回開いたが、どの裏庭でもお気に入りのボタンをタップしたことがない。

ヒントを見てお気に入りのボタンをタップしたら、目的の結果が実行され、ヒントが却下されることを示すために、理由「.userPerformedAction」で無効化メソッドを呼び出します。

チップを却下するもう1つの方法は、チップが定義された.maxDisplayCountよりも多く表示される場合です。

この場合、チップが5回表示され、アクションが取られていない場合、次回個人がバックヤード詳細ビューに入ったときに表示されるべきではありません。

これらは、TipKitが提供する組み込み機能を使用してヒントを却下する方法の一部です。

しかし、あなたはあなたのアプリを最もよく知っているので、.invalidate()メソッドを使用して、あなたが適切だと思う相互作用や基準に基づいてヒントを却下することができます。

TipKitは、iCloud経由でチップステータスを同期して、一方のデバイスで見られるヒントがもう一方のデバイスで見られないようにすることもできます。

たとえば、アプリを使用している人がiPadとiPhoneの両方にインストールされており、両方のデバイスで機能が同じである場合、両方のデバイスで機能について教育しないことがおそらく最善です。

TipKitが提供するAPIのテストと次のステップについて話すために、今それをエリーに返します。

エリー：テストを簡単にするために、TipKitには、必要に応じてヒントを表示または非表示にできるように、適格性ルールを回避するために使用できる便利なAPIが付属しています。

設定されたルールを満たさなくても、アプリ内のすべてのヒントを検査できます。

これを行うには、TipsCenterの設定に.showAllTipsを追加します。

テスト時に特定のヒントのみを表示したい場合は、.showTipsを使用して特定のヒントIDを渡すか、.hideTipsを使用して特定のヒントが表示されないようにします。

また、アプリの別の機能に集中できるように、ヒントが表示されないようにしたい場合は、.hideAllTipsを使用してください。

また、.resetDatastoreを使用して、TipKitデータストア内のすべての情報を消去し、アプリの各ビルドで手付かずの状態を設定することもできます。

API経由で呼び出すことができる同じテストオプションはすべて、プロジェクトのスキームに追加できる起動引数としても利用できます。

これらのいずれかを使用して、クイックスポットチェックをしたり、完全な機能をテストしたりできます。

そしてそれで、あなたは準備万端です。

チップを作成し、ルールを追加し、アプリでチップの頻度を設定し、すべてが期待どおりに機能するようにテストしています。

要約すると、ヒントは、ユーザーがアプリの機能を発見するのを助けるのに最適です。

ヒントを短く、教育的で、実行可能に保ち、定義が簡単だが強力なルールを使用して、理想的なオーディエンスをターゲットにすることを忘れないでください。

TipKitのサンプルコードはdeveloper.apple.comで入手できます。素晴らしいヒントの作成に関する追加情報を入手するには、TipKitヒューマンインターフェースガイドラインに注目してください。

さあ、アプリの発見可能性の機会を確認し、新機能に取り組んでいる間、TipKitを念頭に置いてください。

インストラクショナルプロダクツチームを代表して、ご覧いただきありがとうございます。