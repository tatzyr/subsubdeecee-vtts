10110

♪まろやかなインストゥルメンタルヒップホップ♪

♪

こんにちは！

私はハーランで、SwiftUIに取り組んでいます。

この新しい空間プラットフォームで、ウィンドウ付きアプリを本当に壮観にするお手伝いができることにワクワクしています。

空間コンピューティングでは、アプリは物理的な環境内に存在し、まったく新しいクラスの素晴らしい3次元体験を可能にします。

そして、すべてのAppleプラットフォームと同様に、アプリを構築する最善の方法はSwiftUIです。

SwiftUIは、この新しいプラットフォームが提供するすべてのものを利用する一連のAPIとビヘイビアを追加しました。

まだ見ていない場合は、「空間コンピューティングのためのSwiftUIに会う」を見て、このデバイスでSwiftUIを使用できるすべての新しい方法の概要をご覧ください。

私はSwiftUIに焦点を当てますが、UIKitで作業している場合は、利用できるものがたくさんあります。

「空間コンピューティングのためのUIKitに会う」をチェックして、最高のUIKit体験を可能にする方法を学んでください。

既存のiPhoneまたはiPadアプリをお持ちで、iOSエクスペリエンスを維持したい場合は、「共有スペースでiPadとiPhoneアプリを実行する」をチェックしてください。

別のAppleプラットフォームからアプリを持ち込む場合でも、新しいものを作る場合でも、SwiftUIは、どこにいてもアプリを自宅のように感じさせるための最良の方法です。

このセッションでは、このプラットフォームのSwiftUIアプリを更新します。

組み込みのコントロールが読みやすさと相互作用のために自動的にどのように適応するかを探ることから始めます。カスタムビューとコントロールがこのデバイスの新しいビジュアルと入力技術を利用するようにする方法について説明します。そして、このデバイスでのみ可能ないくつかの真新しい機能を採用します。

このプラットフォームは、SwiftUIを念頭に置いてゼロから構築されました。

実際、ほとんどのシステムアプリケーションは、Keynote、Freeform、TVなどのSwiftUIで書かれており、すべて使い慣れたインターフェイスを周囲にもたらします。

これらのアプリはiPadのアプリに似ていますが、このプラットフォームの新しいデザイン言語とインタラクション方法を最大限に活用しています。

iPadアプリを一緒に更新することで、アプリで同じことをする方法を探りましょう。

これは裏庭の鳥で、あなたの庭を訪れるすべての鳥に餌を与え、記録できる仮想バードウォッチングアプリのようなものです。

スウィフトの開発者として、私は鳥が大好きです。

これは私の種類のアプリです。

裏庭の鳥はSwiftUIで書かれています。

これは、マルチプラットフォームのSwiftUIアプリの素晴らしい例です。

iPhone、iPad、Mac、Apple Watchをサポートしています。

そのリストにもう1つのプラットフォームを追加したいと思います。

共有スペースで裏庭の鳥を本当に歌わせましょう。

まず、Xcodeの「サポートされているプラットフォーム」メニューに追加して、アプリがこの新しいプラットフォームをサポートしていることを確認してください。

これにより、新しい実行先が追加されるので、それを選択してシミュレーターでアプリを実行しましょう。

ここシミュレーターでは、カーソルを動かすと、まるで目で周りを見回しているかのようにアプリが反応します。

Backyard Birdsを実行すると、すぐにiPadと同じ基本的なレイアウトであることがわかりますが、少し違って見えるものもあります。

私が最初に気づいた違いは、アプリがガラスの背景になったことです。

ガラスは、デフォルトでウィンドウに提供される標準的な背景です。

照明条件とその背後にある物体の色に基づいて、コントラストとカラーバランスを調整します。

そのため、このプラットフォームは明るい外観と暗い外観を区別しません。

Glassは、どこで使用していても、アプリが判読可能であることを自動的に保証します。

裏庭の鳥をもう少し探検しましょう。

Backyard Birdsには、トップレベルにナビゲーションスプリットビューがあり、トップレベルビューを切り替えるためのこのサイドバーを提供します。

サイドバーは自動的にガラスの上の背景を暗くし、ディテールビューから視覚的に分離します。

これらのリスト行にカーソルを合わせると、微妙に強調表示されます。

iPadと同じように、これらの行をタップしてビューを切り替えることができます。

スプリットビューの右側にはナビゲーションスタックがあります。

裏庭の1つをタップすると、詳細ビューに移動します。

ここから、この庭の鳥のためにどれだけの種と水が残っているかがわかります。

下にスクロールすると、最近訪れたすべての鳥のリストを見ることができます。

ナビゲーションバーにはこれらの円形のボタンがあり、それらを見ると強調表示されます。

お気に入りボタンを押すと、サイズが縮小され、お気に入りの状態が切り替えます。

これらは、SwiftUIが共有スペースのすべてのアプリを強化するために行ったことのほんの一部です。

裏庭の鳥を散策し、組み込みのコントロールが提供する新しい自動動作のいくつかを見つけたので、カスタムビューとコントロールを自宅のように感じさせる方法を調査しましょう。

裏庭のリストを見学している間、私は何か微妙なものを見つけました。

アプリに本当に近づくと、鳥や植物は鮮明なままですが、噴水は少しぼやけます。

噴水は固定解像度で描かれていると思います。

このデバイス上のアプリは、あなたの物理的な環境に配置されます。

また、他のプラットフォームとは異なり、コンテンツが描画できる品質を定義する物理的なピクセルを持つ画面はありません。

アプリはどこにでも配置できます。

彼らはあなたから遠くに押されたり、クローズアップされたり、斜めに見られるかもしれません。

このシステムは、コンテンツを動的にスケーリングすることで、これらすべての状況でアプリが素晴らしく見えるようにします。

システムがこれを行うには、ビットマップは品質を低下させずにスケーリングできないため、ベクターアセットを提供する必要があります。

テキストとSFシンボルはすでにベクターですが、カスタムアイコンやグラフィックを使用している場合は、ベクターを使用して動的コンテンツスケーリングを利用してください。

その噴水がビットマップ画像であるかどうかを確認しましょう。

ああ、スケールオプションを見ると、それは個々のスケールで指定されています。

ありがたいことに、私はすでにこの資産のベクトルを持っているので、それを単一のスケールに切り替え、既存の資産を削除し、ベクトルに置き換えます。

次に、コンテンツを任意のサイズに拡大縮小できる[ベクトルデータの保存] ボックスをオンにします。

この設定は、すべてのAppleプラットフォームでサポートされています。

その方がいい。

今、噴水は鋭く、私が近づいたり遠ざかったりすると、それは高品質のままです。

他のタブのいくつかを覗いてみましょう。

植物タブには、すべての植物のグリッドが表示され、植物の背後にあるこれらの円は明るく場違いに見えます。

コードを検査すると、答えが見つかります。背景は無地です。

このような単色は、ガラスとのコントラストが固定されており、周囲に調整できません。

ここには、iOSの一般的な慣行であるダークモードで少し暗い色を使用するためのチェックがあります。

このプラットフォームは、その配色が暗いと報告しているので、これは植物の後ろに見える色です。

しかし、このプラットフォームは明るいカラースキームと暗いカラースキームを区別しないことを覚えておいてください。

代わりに、ガラスから入ってくるものに関係なく、コンテンツが読みやすいことを確認する最善の方法は、活気を採用することです。

鮮やかな素材は、ガラスの上のコンテンツが何が輝いていても読みやすいように、追加のコントラストと明るさを導入します。

すべての組み込みコントロールとコンテナは、デフォルトでこれらの鮮やかな素材を使用しているため、標準コントロールを使用している場合は、ここで余分な作業はありません。

SwiftUIのセマンティックスタイルは、各プラットフォームで自動的に適切な外観を採用します。

このデバイスでは、ガラスの上に置くと鮮やかに見えます。

独自のカスタムビューやコンテナを構築する場合は、これらのセマンティックスタイルを使用して、ガラスが周囲にどのように適応してもコンテンツを読みやすくします。

これらの植物のアイコンを変更して、単色ではなくセマンティックな塗りつぶし色を使いましょう。

セマンティックマテリアルを使用しているので、カラースキームチェックを完全に削除できます。

これで、コードはすべてのプラットフォームでよりシンプルで正確になりました。

うわー、これらのアイコンははるかに良いです。

彼らはあらゆる照明条件でガラスに対して美しくポップします。

アプリのビジュアルの改善に時間を費やしたので、すべてのインタラクティブコンポーネントが明確でターゲット設定が簡単であることを確認しましょう。

「空間コンピューティングのためのSwiftUIに会う」で学んだように、アプリと対話する方法は4つあります。

最も一般的なインタラクションは、コントロールを見て、指をつまんでタップを実行する間接的なピンチジェスチャーです。

アプリが近くにある場合は、手を差し伸べて触れるだけで直接やり取りできます。

トラックパッドをペアリングした場合は、正確な入力のためのポインタとして使用できます。

そして、あなたがすでにAppleプラットフォームに精通している世界クラスのアクセシビリティ技術は、このデバイスでも利用可能です。

VoiceOverやスイッチコントロールなどのツールを使用すると、誰もがあなたのアプリを使って同じ素晴らしい体験をすることができます。

このプラットフォームでは、ホバー効果を使用して対話可能なコンテンツが強調表示されます。

たとえば、ボタンやリストなどのコントロールを見ると、ビューの境界に対する微妙なハイライト効果により、操作できることが明確になります。

これらのホバー効果は、アプリを反応性に感じさせるのに不可欠です。

彼らは、彼らが見ている、または手を伸ばしている見解が、彼らが相互作用する見解であるという自信を人々に与えます。

ホバー効果は、すべてのシステムコントロールに自動的に追加されます。

SwiftUIが提供する組み込みのコントロールを使用すると、アプリでこれらの効果を無料で入手できます。

アプリの「Birds」タブにホバー効果が欠けていることに気づきました。

私はこれらの鳥の1つをタップすることができますが、ホバー効果がないため、それができるという視覚的な兆候はありません。

タップなどのジェスチャーに反応するコントロールを行うたびに、おそらくホバー効果があるはずです。

hoverEffect() 修飾子を使用して追加できます。

デフォルトでは、ホバー効果はハイライトです。つまり、コントロールを見ると明るくなります。

新しいホバー効果では、これらのコントロールと対話できることは明らかですが、ホバー効果にはこれらの鋭いコーナーがあり、少し丸みを帯びて見えると思います。

hoverEffectを種類として、contentShape（）修飾子を使用してカスタムシェイプを提供できます。

hoverEffect() 修飾子は、変更したビューからこのコンテンツ形状を読み取ります。

そこでは、それはずっと気分が良くなります。

ホバー効果はクリアで、少しのパディングと素敵な丸みを帯びた角があります。

しかし、私たちにできることはもっとあると思います。

SwiftUIでは、コントロールがタップに応答してアクションを実行する場合、コントロールは単なるボタンである可能性が高い。

バードビューをボタンに変更しましょう。

このプラットフォームではボタンはデフォルトで境界線が付けられていますが、見ていないときにこれらのボタンに背景を持ちたくありません。

これをプレーンボタンにするので、標準のホバー効果が得られますが、背景や内部のパディングはありません。

完璧！

これらのボタンには標準のホバー効果があり、タップすると縮小されます。

ホバー効果はプライバシーを保護するために構築されました。

これらの効果は、アプリのプロセスの外でシステムによって実行されます。

システムホバー効果は、人々が探している場所にアプリを反応させる唯一の方法です。

アプリは、誰かが指をつまんだり、アプリに直接触れたり、コントロールの上に指やポインタを置いたりしたときにのみ通知されます。

これらすべての変更の後、私は裏庭の鳥がかなり良く見えると言うでしょう。

しかし、レイアウトに小さな変更を加え、このプラットフォームに固有の機能を採用することで、私たちは本当に空に行くことができます。

トップレベルのレイアウトについて話しましょう。 いくつか話しましょう。

iPadでは、ウィンドウの水平サイズクラスが通常の場合、増加した幅をよりよく利用するため、タブビューよりもサイドバーが優先されます。

ただし、このデバイスでは、ウィンドウは画面のサイズに縛られておらず、コントロールはウィンドウ内に存在する必要はありません。

タブビューを使用してトップレベルビューを切り替えることを検討してください。

タブビューを使用する場合、タブバーは写真のようにアプリの左側に添付されます。

アイコンの1つを見ると、自動的に展開され、各タブのラベルが表示されます。

先に進んで、ナビゲーション分割ビューからタブビューに切り替えましょう。

アプリで各画面の表示を行います...

...そして、タイトルとアイコンが付いたタブアイテムを与えます。

いいね！

タブバーは、操作していないときに折りたたまれ、アプリにはコンテンツのためのスペースがはるかに広くなりました。

タブバーがウィンドウ内ではなくウィンドウの外にあることに注目してください。

この種のアタッチメントはオーナメントと呼ばれます。

オーナメントは窓の端の境界の外側に配置され、メインコンテンツと一緒に必要な追加のコントロールを置くのに最適な場所です。

タブバーに加えて、写真には下部にツールバーがあり、ライブラリに表示される時間範囲を制御できます。

これらの種類の装飾品は非常に一般的であるため、bottomOrnamentの配置を使用して.toolbar修飾子で自動的に追加できます。

ツールバーの装飾品は、ガラスカプセルの背景を自動的に提供します。

裏庭の鳥に追加する装飾品のアイデアがあります。

どれだけの水と種子を残したかに目を光らせようとしていますが、不足している場合は、フィーダーに補充が必要だと言われたいです。

Ornament() 修飾子を使用して、この種のカスタムオーナメントを構築できます。

attachmentAnchorは、オーナメントがアプリのどこに添付されるかを決定します。

アプリウィンドウの任意の端に通知を置くことはできますが、下部に揃えたいです。

contentAlignmentパラメータを使用すると、オーナメントのどの部分がattachorに整列するかを選択できます。

装飾品の中央をアプリの下部に置きたいのですが。

カスタムオーナメントの内容をより詳細に制御できるため、SwiftUIはデフォルトでガラスの背景を与えません。

必要な場合は、オーナメントの内容に.glassBackgroundEffect()修飾子を使用できます。

今、私の庭に十分な水や種がないときは、アプリの下部にこのメッセージが表示され、それをタップしてその庭に移動できます。

大好き！

SwiftUIは実行中のプラットフォームに自動的に適応するため、Backyard Birdsを共有スペースでくつろげるのは簡単でした。

アプリで同じ手順に従うことができます。

インタラクティブなコントロールにホバーエフェクトを追加し、読みやすさのためにベクターアセットと活気を使用し、補助コントロール用のオーナメントを作ります。

3Dコンテンツのボリュームや空間体験のための没入型スペースなど、このプラットフォームでしか探索できないことがまだまだたくさんあります。

「SwiftUIを次の次元へ」と「SwiftUIでウィンドウを超えて」をチェックして、アプリをウィンドウを超えて拡張する方法を学んでください。

ありがとう、そしてハッピーコーディング!

♪