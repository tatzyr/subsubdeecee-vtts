10100

♪まろやかなインストゥルメンタルヒップホップ♪

♪

こんにちは、私の名前はロイで、パフォーマンスチームのエンジニアです。

今日は、空間コンピューティングのためにアプリを最適化する方法を学びます。

まず、パフォーマンスとパワーに関するこの新しいプラットフォームのユニークな側面を見ていきます。

次に、アプリのプロファイリングから始めて、パフォーマンスプランの構築に進みます。

そして最後に、このプラットフォームのパフォーマンスの問題を最適化するための最良の方法を見学します。

では、パワーとパフォーマンスで空間コンピューティングが異なる理由は何ですか?

1つは、アプリのアップデートに関係なく、ディスプレイ上のコンテンツは常に更新されます。

人々が体、手、目を動かすたびに、コンテンツを更新する必要があります。

これは、システムが常にすべてのフレームをレンダリングしていることを意味します。

また、プラットフォームは常に空間アルゴリズムを実行して、すべてのアプリでビジュアルとインタラクションを作成し、同時に複数のアプリを実行できます。

人々はあなたのアプリを他のアプリと一緒に使うでしょう。

マルチタスクと追加のシステム作業を処理するには、自分のアプリのリソース使用量をできるだけ最適化してください。

優れたユーザーエクスペリエンスを提供するには、アプリのパフォーマンスが不可欠です。

人々は、アプリが入力に即座に反応し、没入感と快適さのためにスムーズな視覚的な更新を提供することを望んでいます。

パフォーマンスの問題についてアプリをプロファイリングして分析する方法について話しましょう。

あなたはすでに他のAppleプラットフォームのパフォーマンス指標に精通しているかもしれません。

どのプラットフォームでも、人々はすぐに起動し、ディスクの摩耗を避け、バッテリーを使いすぎないアプリを望んでいます。

彼らはまた、非効率的なメモリ使用による終了を回避するアプリを望んでいます。

空間コンピューティングでは、これらの指標のいくつかは新しい意味を持ちます。

権力を握る。

ユーザーは、バッテリー寿命ではなく、熱圧力のために、電力用に最適化されたアプリを望んでいます。

優れたパフォーマンスを維持するために、熱圧力に遭遇する可能性を減らすために、システムの電力使用に合わせてアプリを最適化する必要があります。

ハングは別の例です。

それらは、アプリのメインスレッドが一定期間作業を停止しているときに発生します。

しかし、このプラットフォームでは、小さくて瞬間的な屋台でさえ、応答性を混乱させます。

では、レンダリングを検討してください。

他のプラットフォームでは、主にスムーズなUIと3Dアニメーションを提供するために、レンダリングパフォーマンスを最適化することができます。

しかし、ここでは、システムは常にレンダリングされているため、レンダリングパフォーマンスは静的コンテンツにも不可欠です。

すべてのAppleプラットフォームは、これらの指標をプロファイリングするためのツールを提供します。

今日は、空間コンピューティングアプリに特化したパフォーマンスの問題の発見について説明します。

しかし、Appleプラットフォームでこれらの指標を最適化する方法の詳細については、「究極のアプリケーションパフォーマンスサバイバルガイド」セッションをご覧ください。

アプリを最適化するには、InstrumentsやXcode Gaugesなどのツールを使用して、開発中にプロファイルします。

アプリがリリースされたら、フィールドからより多くのデータを収集して、アプリをさらに最適化するのに役立ちます。

開発中のプロファイリングについてもっと話しましょう。

RealityKit Traceは、パフォーマンスとパワーのためにあらゆる空間コンピューティングアプリをプロファイリングするのに役立つInstrumentsの真新しいテンプレートです。

これは、アプリのレンダリングパフォーマンスが低いとき、または高いシステム電力使用を引き起こしているときに識別するのに役立つ素晴らしいツールです。

他にも使える楽器のテンプレートがたくさんあります。

詳細を学び、この新しいテンプレートを実際に探索するには、「Meet RealityKit Trace」のセッションをご覧ください。

アプリのパフォーマンスとパワーは、誰かがそれとどのようにやり取りするかによって異なります。

シミュレータは実際のデバイスと同じ作業を実行しないため、パフォーマンスデータが正確ではない可能性があります。

デバイス内のプロファイル。

オーディオやビデオを再生するとき、またはFaceTimeやペルソナなどのテクノロジーを使用するときに、アプリでさまざまなインタラクションを使用するプロファイル。

使用数分にわたって、良好なパフォーマンスと低いシステム電力を確認してください。

最後に、他のアプリも実行され、リソースを使用している間にプロファイリングしてみてください。

互換性のあるiPadとiPhoneのアプリを持ち込む場合は、デバイス上でそれらをプロファイリングして、必要なさらなる最適化を特定してください。

開発後、人々はさまざまな条件でアプリを実行する可能性があります。

現場からのデータは、人々が実際に遭遇している問題を見つけるのに最適な方法です。

アプリがベータ版または公開されている場合は、MetricKitを使用してユーザーから診断レポートを取得します。

Xcodeオーガナイザーは、電力の問題を見つけるのに役立つエネルギー診断を含む、同意したユーザーのデバイスから集約されたパフォーマンスデータを提供します。

収集するこれらのデータはすべて、ボトルネックを見つけ、アプリのパフォーマンス作業に優先順位を付けるのに役立ちます。

では、空間コンピューティングアプリの最適化について話しましょう。

パフォーマンスの問題は、多くの分野から発生する可能性があります。

今日は、レンダリング、ユーザー入力、ARKit、オーディオとビデオの再生、SharePlay、システムプレッシャーによるアプリの終了など、いくつかのコア領域を最適化するための戦略について説明します。

優れたレンダリングパフォーマンスは、優れたユーザーエクスペリエンスのための最優先事項の1つです。

飛び込みましょう。

このプラットフォームでは、レンダリングパイプラインはアプリから始まり、アプリのコンテンツの更新を担当します。

すべてのAppleプラットフォームと同様に、アプリのインターフェースはメインスレッドで更新され、速やかに更新を提供する必要があります。

アプリは他のアプリと一緒に3Dスペースでレンダリングされるため、その更新はシステムレンダリングサーバーに送信されます。

レンダリングサーバーは、アプリ、ユーザーの入力、およびそのスペースとその周辺からの更新を処理するために継続的に実行されています。

これらすべての更新で新しいフレームをレンダリングし、コンポジターに送信します。

コンポジターは常にレンダリングしています。

ディスプレイのリフレッシュレートに一致する速度で新しいフレームをディスプレイに供給します。

これは快適な体験を提供するのに役立ちます。

このレートは通常1秒間に90フレームですが、より高くなる可能性があります。

コンポジターはディスプレイを一貫して更新しますが、優れたユーザーエクスペリエンスには、アプリからの迅速な視覚的な更新が必要です。

アプリにレンダリングに時間がかかりすぎるコンテンツやアップデートがある場合、レンダリングサーバーは最適なレンダリングレイテンシーのレンダリング期限を逃す可能性があります。

これは、アプリのビジュアルがフレームYのコンポジターにたどり着いたかもしれないが、代わりにフレームY+1にたどり着いたことを意味します。

これにより、人々がディスプレイで見る視覚的な更新が遅れ、アプリの応答性が低下します。

特に深刻なレンダリングストールにより、アプリが終了することさえあります。

アプリがSwiftUI、UIKit、RealityKit、またはMetalで構築されているかどうかにかかわらず、フレームドロップとレンダリングサーバーでの作業を減らすために、コンテンツと更新を最適化したいと考えています。

SwiftUIとUIKitの使用を最適化することから始めましょう。

このプラットフォームでは、アプリはアップデートがなくても、静的なUIコンテンツの作業をシステムがレンダリングします。

このレンダリング作業は、オーバードローから増加する可能性があります。

オーバードローは、他の仮想コンテンツの前に半透明のコンテンツがある場合に発生します。

GPUは両方のコンテンツをレンダリングするために作業を行う必要がありますが、その半透明のコンテンツが完全に不透明であれば、GPUはその背後にUIをレンダリングする必要はありません。

Zオフセットで重複するUIビューがある場合は、半透明性を追加しないでください。

また、アプリのUIが占有するディスプレイのピクセル数が多いほど、ウィンドウをレンダリングする作業が増えます。

デフォルトのサイズを減らすことを検討してください。

レンダリングサーバーでのUIの再描画は通常、アプリの更新によってトリガーされますが、このプラットフォームでは、コアアニメーションレイヤーの動的コンテンツスケーリングによってもトリガーされます。

この動作では、テキストの解像度、またはベクトルベースのUIコンテンツは、ユーザーがよりシャープなビジュアルを可能にしようとしている場所に基づいて変化します。

これはまた、アプリのアップデートがなくても、潜在的により高いスケールでUIコンテンツのより頻繁な再描画につながる可能性があります。

SwiftUIとUIKitはデフォルトでこの動作を有効にしますが、カスタムコアアニメーションまたはコアグラフィックスレンダリングを行うアプリはこの動作にオプトインできます。

視覚的な利点とトレードオフの詳細については、セッション「空間コンピューティングのレンダリングを探る」をご覧ください。

これらの再描画のコストは、オフスクリーンレンダリングパスによって大きく影響を受けます。

これは、影、ぼかし、マスキングなどの視覚効果によって引き起こされる可能性があります。

これらの効果を減らして、システムがアプリをレンダリングしやすくします。

アプリの再描画を最小限に抑えるために、可能な限り不要なビューの更新を避けてください。

たとえば、SwiftUIでは、@Observableを使用します。

@Observableは、より詳細な変更追跡を提供し、不要なレイアウトの更新を減らします。

次に、RealityKitによる3Dレンダリングの最適化について話しましょう。

SwiftUIは今年、空間コンピューティングのためにRealityViewを追加しました。

SwiftUI階層内でRealityKit 3Dシーンをネイティブに表示できます。

あなたのアプリは、これらのRealityKit機能のすべてに対して3Dシーンを最適化することで、プラットフォーム上の善良な市民でなければなりません。

これらの3Dシーンでは、それらに含まれるアセットの複雑さは、各フレームで行われるレンダリングサーバー作業の量を大幅に増やすことができます。

では、これらの資産を最適化することから始めましょう。

Reality Composer Proは、アセットからRealityKitのシーンを作成するのに役立ちます。

メッシュレンダリング、パーティクル、アニメーション、物理学、オーディオ作業から、このツールは、パフォーマンスへの影響を理解するのに役立つシーン全体に関する統計を提供します。

これらの統計を調べるとき、数字が低いことは通常、作業が少ないことを意味し、レンダリングパフォーマンスを向上させることができます。

「クイックルック空間体験のための3Dモデルを作成する」セッションを見て、ビジュアルと3Dアセットのパワー使用のベストプラクティスについて詳しく学んでください。

特にメッシュレンダリングは、3Dレンダリングの中核部分です。

複雑なメッシュや材料は、すぐにパフォーマンスのボトルネックになる可能性があります。

メッシュ資産のジオメトリを最適化します。

材料を共有する部品を組み合わせることで、別々のメッシュ部品の量を減らします。

三角形と頂点数の高いメッシュジオメトリもコストがかかる場合があります。

必要に応じて、より少ないカウントで資産を使用してください。

3Dメッシュでオーバードローの影響を最小限に抑えます。

これを行うには、UIコンテンツと同様に透明性を控えめに使用してください。

Reality Composer Proの「Physically Based」素材は、環境照明を持ち、よく最適化されており、最小限の透明性でメッシュに最適です。

しかし、半透明または非常に大きなコンテンツの場合は、照らされていない表面を持つカスタム素材を使用し、焼きたての照明テクスチャやその他の安価なビジュアルを使用することを検討してください。

これは、より高価な照明計算で潜在的なボトルネックを回避するのに役立ちます。

RealityKitでの材料の構築と使用に関する詳細なガイダンスについては、これら2つのセッションをご覧ください。

ランタイムレンダリング用に最適化されたコンテンツを持つことは、素晴らしいスタートです。

しかし、RealityKitでアプリを最適化するためにできることはさらにあります。

アプリがRealityKitのコンテンツを更新すると、更新がレンダリングサーバーに送信され、レンダリングされます。

しかし、短期間で更新が多すぎると、レンダリングサーバーのボトルネックになる可能性があります。

たとえば、アプリはRealityKitエンティティを急速に作成および破壊している可能性があります。

複雑なアニメーションが多すぎるか、SwiftUIビューの更新が多すぎるか、1つのフレームに多くのアセットをロードしている可能性があります。

事前にエンティティを作成し、必要に応じて非表示または表示します。

それらを削除してシーン階層に追加したり、isEnabledフラグを使用したりできます。

メッシュエンティティ階層を平坦化することで、更新されるエンティティの量を最小限に抑えます。

コードベースのアニメーションについては、更新率を下げるか、アニメーションが更新するエンティティの数を減らすことを検討してください。

そして、RealityKitエンティティを更新するときは、誤って過度のSwiftUI再描画をトリガーしないでください。

添付ファイルを使用する場合は、すべてのSwiftUIコンテンツを最適化するのと同じ方法でレンダリングを最適化してください。

複雑なアセットをロードすると、高価なレンダリング更新が発生することもあります。

複雑な資産は、高いアプリの起動時間とコンテンツの読み込み時間にも貢献する可能性があります。

実行時に非同期ロードAPIを使用して、メインスレッドをブロックしないようにし、必要になる前にアセットをロードします。

同じ資産を使用するエンティティも、その資産を共有し、一度しかロードできません。

これらのファイルは読み込み時間とメモリコストに最適化されているため、Reality Composer Proからエクスポートされたファイルを使用してください。

また、テクスチャ圧縮も無料で入手できます。

アセットサイズを減らすと、通常、読み込みが高速化されますが、テクスチャ圧縮はすでにReality Composer Proファイルで行われているため、自分で行う必要はないことを覚えておいてください。

最後に、RealityKitの没入型体験について話しましょう。

アプリが専用のフルスペースへの移行をリクエストすると、実行中の唯一のフォアグラウンドエクスペリエンスになります。

ポータルを使用したり、完全に没入型の体験に移行したりすると、システムは周囲の環境の一部または全部も隠します。

アプリは、RealityKitコンテンツで環境を作成してスペースを埋めることができます。

完全に没入型のコンテンツは、共有スペースやフルスペースのシーンよりも、ディスプレイ上ではるかに多くのピクセルにレンダリングする必要があります。

これは、そのコンテンツをレンダリングするためにGPUでより多くの作業を行うことができることを意味します。

GPUの電力使用のためにこのタイプのコンテンツを最適化します。

最適な電力使用のために、Reality Composer Proの照らされていない表面を持つ「カスタム」素材から始めましょう。

代わりに、焼きたての照明テクスチャを追加するか、時間ベースのアニメーションを使用して、ダイナミックな照明の感触を得ることを検討してください。

システムパワーとレンダリングパフォーマンスのマテリアルをプロファイリングします。

また、Metalで完全に没入感のある体験を作成することもできます。

3Dエンジンを構築したり、Metalを使った経験をしたりする人のために、最適化すべきいくつかのことについて話しましょう。

CompositorServicesフレームワークでMetalを使用して、レンダリングサーバーをバイパスし、レンダリングされたサーフェスをコンポジターに直接送信できます。

セッション「没入型アプリのMetalを発見」を見て、これを適切に行う方法を学んでください。

CompositorServicesを使用する場合は、Metalフレームの提出のペースを調整して、compositorが更新のたびに新しいフレームを受け取るようにします。

必ず新しいフォベーションマップを照会し、各フレームの予測を投稿してください。

そして、GPU作業をエンコードするために使用し始める前に、最後の瞬間にこの入力データを照会します。

これら3つすべてを実行すると、ユーザーの動きと入力に関連して応答性の高い仮想コンテンツを確保するのに役立ちます。

アプリが新しいフレームの提出に時間がかかりすぎると、システムはそれを終了します。

長いフレームのストールは避けてください。

アプリの実行中は、Metal System Trace Instrumentsテンプレートを使用してGPUのパフォーマンスをプロファイリングしてください。

MetalアプリまたはReality Composer Proを使用したカスタムマテリアルからの長時間のフラグメントと頂点シェーダーの実行は、システムのレンダリング時間に大きな影響を与える可能性があります。

フラグメントと頂点の時間を短縮するには、シェーダーによるALU命令とテクスチャアクセスを減らすことから始めます。

金属の場合は、可能な限り代わりに計算シェーダーを使用してください。

これらの講演を確認して、GPUパフォーマンスの最適化について詳しく学んでください。

UIと3Dレンダリングのパフォーマンスのためにアプリを最適化することは、全体的なユーザーエクスペリエンスに利益をもたらすことを覚えておいてください。

それでは、入力パフォーマンスに移りましょう。

人々はこのプラットフォームで目、手、音声、ハードウェア入力を使用できます。

入力に対するアプリの更新は、メインスレッドで処理されます。

これらに時間がかかりすぎると、アプリが遅くて反応しなくなると感じます。

メインスレッドの入力更新は、ディスプレイのリフレッシュレートに基づいて特定の期限内に完了する必要があります。

このプラットフォームのハードウェアのリフレッシュレートは通常90ヘルツ以上です。

90ヘルツのリフレッシュレートでは、最適なレイテンシのために入力更新を8ミリ秒未満に保ちます。

空間コンテンツと対話するとき、システムは、ユーザーが対話しようとしているUIまたは3Dオブジェクトを確認するためのテスト作業をヒットします。

RealityKitのコンテンツでは、物理コライダーを追加して対話します。

これらのコライダーを追加するときは、静的衝突器の方が安いので、可能な限り動的衝突器の上に静的衝突器を使用してください。

アプリでの冗長なヒットテスト作業を減らすために、インタラクティブなコンテンツの重複を最小限に抑えます。

では、ARKitに移りましょう。

このプラットフォームでは、ARKitアルゴリズムは常に実行され、すべてのアプリでビジュアルとインタラクションを作成しています。

アプリは、ARKitデータの使用方法と仮想コンテンツのアンカー方法に基づいて、システムのパワーと視覚的な滑らかさに影響を与える可能性があります。

たとえば、アプリはARKitまたはRealityKitを使用して、ユーザーの周囲、頭、または手にアンカーコンテンツを配置できます。

すべてのアンカーは、システムに追加の作業を追加します。

コンテンツをアンカーするときは、アンカーをユーザーのスペースで継続的に追跡する必要があるかどうかを検討してください。

RealityKitでAnchorComponentを使用する場合は、「一度」追跡モードを使用して、継続的な追跡コストを回避します。

アプリからの永続的および一時的なアンカーの総量を最小限に抑えます。

特に永続的なアンカーの場合、すべてのアプリがそれらを追加できるので、自分のアプリからあまり多く追加しないようにしてください。

ARKitデータを使用している間、さらに多くの最適化を行うことができます。

アプリのコンテンツに古すぎるARKitデータを適用すると、アプリのビジュアルが入力と同期していないように見えることがあります。

ARKitデータを使用する必要がある直前にクエリし、速やかに更新に適用します。

ポスト予測は計算に費用がかかります。

一般的に、カスタムメタルレンダリングエンジンのみがこのデータを必要とします。

アプリのコンテンツをシーンに配置したいだけなら、RealityKitは代わりに素晴らしい選択です。

シーン理解メッシュのための衝突データの生成も高価です。

このデータを使用する場合は、アプリが不要になったときにオフにしてください。

では、空間コンピューティングのためのオーディオとビデオの再生の最適化について話しましょう。

このプラットフォームでは、空間オーディオがデフォルトで使用されます。

システムは、ユーザーの位置、周囲、およびオーディオソースに関する情報をリアルタイムで処理し、オーディオを出力します。

アプリが空間オーディオ作業を引き起こしすぎると、システム電力の使用に問題が発生したり、オーディオ出力が遅れたりする可能性があります。

これらの問題が発生した場合、空間オーディオ作業を減らすために検討すべき3つの主なことがあります。オーディオソースの同時再生、移動オーディオソースの数、およびサウンドステージのサイズです。

これらはすべて、計算作業を増やすことができる変数です。

さて、ビデオを考えてみましょう。

共有スペースでは、一度に複数のビデオを再生できます。

ビデオごとに、システムはそれをデコードし、レンダリングサーバーでレンダリングする必要があります。

それぞれの新しいレンダリングされたビデオフレームは、素晴らしいビデオ視聴体験のために、一貫した間隔でディスプレイに表示する必要があります。

レンダリングサーバーにレンダリング期限に間に合うように多くの電力と時間を与えるために、アプリはビデオ再生中のUIまたは3Dコンテンツの更新を最小限に抑える必要があります。

ビデオフレームレートは、完了した作業にも影響します。

最適なパフォーマンスとパワーのために、24または30ヘルツのビデオを使用することを検討してください。

最後に、いつでもアプリからデバイスで再生およびレンダリングする必要がある同時ビデオの数を減らします。

ビデオプレゼンテーション方法を選択するときは、さまざまな機能とパフォーマンスを最適化する方法を検討してください。

詳細については、「素晴らしい空間再生体験を作成する」セッションをご覧ください。

では、SharePlayについて話しましょう。

このプラットフォームは、人々と協力し、つながるためのまったく新しい経験を開きます。

本当に素晴らしいSharePlayグループ体験を作成するには、アプリが長期間にわたって優れたパフォーマンスを維持できるようにしたいと考えています。

そして、SharePlayによる優れた空間コンピューティングパフォーマンスは、基本から始まります。

まず、ローカルパフォーマンスのためにアプリをプロファイリングして最適化します。

次に、SharePlay中にアプリのパフォーマンスを調べて、高価なレンダリングアップデートがデバイス間で同期されるのを防ぎます。

システムの電力ニーズが熱圧力を引き起こさないように、アプリの電力プロファイルを作成し、アプリが優れたパフォーマンスを維持するのを防ぐことができます。

これを助けるために、アプリのSharePlay体験に不可欠なアプリの作業と機能を慎重に検討し、必要のないものはすべてオフにしてください。

最後に、熱圧力またはメモリ圧力によるアプリの終了を見てみましょう。

人々は暖かい場所でこの装置を使うかもしれない。

すべてのAppleプラットフォームと同様に、このシステムは、使用時にデバイスを涼しく快適に保つために、熱圧力下で利用可能な計算リソースを管理します。

計算リソースが少ないと、アプリのパフォーマンスに影響を与える可能性があります。

システムは、重大な熱圧力、またはレンダリングの期限が満たされなくなったため、アプリを終了することさえあります。

熱圧力下にあるときは、良好なパフォーマンスを維持し、熱圧力がさらに上昇するのを防ぐために、アプリでの作業を減らしてください。

これを行うには、sthermalStateDidChange通知を購読します。

プレッシャーが高まったら、それに応じてアプリのコンテンツとアップデートを適応させます。

熱圧力下でアプリがどのように機能するかを確認するには、Xcodeで熱誘導器を使用して、デバイスのより高い熱状態をシミュレートします。

熱圧力の詳細については、セッション「有害なネットワークと温度条件の設計」をチェックしてください。

次に、記憶力の圧力について話しましょう。

デバイスは、システムと実行中のすべてのアプリの間で共有されるメモリ量が限られています。

デバイスがこの制限に近づくと、システムは積極的に使用されていないアプリから始めて、アプリを終了し始めます。

メモリを使いすぎる単一のアプリも、使用されていても終了する可能性があります。

あなたはこれがあなたのアプリで起こることを望んでいません。

アプリのメモリ使用量をできるだけ減らすことで、これを避けることができます。

このプラットフォームでは、アプリはUIと3Dレンダリング、オーディオとビデオの再生に大量のメモリが割り当てられる可能性が高くなります。

アプリにUIコンテンツがある場合は、画面外でのレンダリングパス、ウィンドウの総量、メディアコンテンツを最小限に抑えることで、レンダリングメモリの割り当てを減らします。

RealityKitを使用した3Dメモリの場合、メッシュとパーティクルのテクスチャとジオメトリサイザーの解像度は、メモリの使用に大きく貢献できます。

可能な限りそれらを減らしてください。

オーディオとビデオを再生するときは、アプリ内のすべてのオーディオとビデオファイルからの総メモリ負荷を評価します。

解像度、ビットレート、ファイル形式、および期間を変更するときは、メモリの節約に対するユーザーエクスペリエンスとパフォーマンスのトレードオフを考慮してください。

これらの講演を確認して、すべてのAppleプラットフォームでメモリフットプリントを削減するためのヒントを学んでください。

このプラットフォームで優れたユーザーエクスペリエンスを得るには、パフォーマンスが不可欠であることを覚えておいてください。

開始するには、開発中にアプリを積極的にプロファイリングして、パフォーマンスと電力の問題を見つけてください。

空間コンピューティングの重要な指標に関するパフォーマンスプランを作成します。

そして、レンダリング、パワー、そして今日取り上げた他のすべての分野のためにアプリを最適化します。

そして最後に、MetricKitやXcode Organizerなどのツールを使用してパフォーマンスフィールドデータを収集します。

このプラットフォームで思いついたすべての素晴らしいアプリや体験を見るのが待ちきれません。

見てくれてありがとう。

♪