10165

♪まろやかなインストゥルメンタルヒップホップ♪

♪

シルパ・チラッケル：こんにちは、私の名前はシルパです。

ライアン・ゴルベック:そして、私はライアンです。

Shilpa：今日は、Xcode 15で取り組んできたすべてをお見せできることをとても楽しみにしています。

ライアン：Xcodeはあなたの開発経験の中心です。

Xcodeでは、開発ワークフローのすべての側面を1か所にまとめ、単一のツールに集中しながら、アプリを簡単かつ楽しく構築できます。

今日は、Xcode 15で今年の多くの改善点について触れます。編集、ナビゲート、共有から、アプリのテスト、デバッグ、配布まで。

Shilpa：Xcodeの新機能を表示する前に、それをダウンロードする必要があります。

そして、Xcodeのリリースバージョンを入手する最善の方法は、Mac App Storeからです。

これにより、常に最新バージョンのツールを使用し、最新の機能を活用できることが保証されます。

昨年、時計とテレビシミュレーターをオプションでダウンロードすることで、より簡単に開始できるようにしました。

今年は、iOSやAppleの新しい空間コンピューティングプラットフォームなど、すべてのシミュレータをダウンロードできるようにすることで、さらに進んでおり、ニーズに合わせてXcodeを設定できます。

これで、Xcodeを入手すると、より小さくなり、すべてのシミュレータを入手する前でもコードを書きやすくなります。

または、最新のベータ版など、開発者のウェブサイトからXcodeをダウンロードする必要がある場合は、含めるシミュレータを事前に選択できます。

Xcodeを手に入れたので、すぐに飛び込んで、ソースエディタの新機能を見てみましょう。

コード補完は、より速く、より少ない間違いで必要なコードにたどり着くのに役立ちます。

Xcode 15では、ずっと賢くなります。

見てみましょう。 

完了は新しい情報源を活用します。

ここには裏庭の鳥がいます。

まず、新しいファイルを作成し、PlantSummaryRowと名付けます。

必要なインポートステートメントを追加します。

さて、新しい構造体を作成すると、完了はタイプ名のPlantSummaryRowを提案します。それは私が作成したファイルの名前だからです。

このファイルの実装を完了させてください。

実装は終わりました。

いくつかの完了の提示方法も改善されました。

デフォルトの引数を持つ関数を呼び出すとき、必要なパラメータを正確に取得するのは難しい場合があります。

あなたが望むものを選ぶのを助けるために、デフォルトの引数のすべての可能な順列を見ることができます。

このVStackにフレーム修飾子を追加し、キーボードの右矢印を押します。

必要なもの、この場合は幅を選択します。

そして、完了はより多くのコンテキスト認識を持ち、あなたが書いているコードについてさらに良い提案を提供します。

VStackに戻ると、修飾子を追加するためにドットを入力すると、Xcodeがこのビューで最も頻繁に使用される修飾子の1つであることを知っているので、パディングはトップの提案です。

しかし、テキストに修飾子を追加すると、トップの提案としてフォントを取得します。

これらのエディタの提案は、周囲のコードも考慮します。

私はすでにこのテキストのフォントを変更しました。

別の修飾子を追加したい場合、テキストで作業するときに同じ修飾子を2回使用したくないので、一番上の提案は太字です。

これは別の例です。

このファイルでは、CLLocationを使って鳥がどこにいるかを調べています。

私はすでに緯度で入力したように、これらの2つのプロパティは一般的に一緒にペアになっているので、今、それは経度を示唆します。

これはすべて、より良いトップの提案があり、より安全なコードをより速く入力できることを意味します。

ねえライアン、資産カタログにも電力補完をもたらすと聞きました。

もう少し教えていただけますか?

ライアン：もちろん、シルパ。

カラーと画像のアセットは現在、Swiftシンボルによってバックアップされています。

これは、コードを完了できるようになったことを意味します。

私のアセットカタログには、いくつかのカスタムカラーと画像があります。

Xcode 15はそれぞれのシンボルを自動的に生成し、文字列名を使用する代わりにコードでこれらを参照できます。

このイメージの名前をMultipleCloudsに変更してプロジェクトを構築すると、このアセットを使用する別のファイルで問題が発生します。

そして、CodeCompleteを使って修正できます。

これらのシンボルは私にタイプの安全性を与えてくれるので、実行時に不思議なことに色や画像が欠落していることを心配する必要はありません。

また、Xcode 15は、カタログのパワーと柔軟性をローカリゼーション体験にももたらします。

文字列カタログは、ローカリゼーションを1か所にまとめ、それらを一元的に確認および更新する方法を提供します。

開始するには、[編集] > [文字列カタログに変換] を選択して、プロジェクトを文字列カタログを使用するように変換できます。

これにより、移行できるすべてのストーリーボード、.strings、および.stringsdictファイルを示すシートが表示されます。

そして、一度移行すると、すべての翻訳が1つのエディタに整理されます。

左側のサイドバーでは、サポートしている各言語の翻訳の進捗状況を確認できます。

そして、最新の状態に保つのは簡単です。

すべての文字列は、ビルドするたびにソースから直接引き出されます。

新しい文字列が追加または削除されると、エディタは影響を受ける言語に注釈を付け、関連する文字列にバッジを付けます。

セッション「ストリングカタログを発見する」に移動して、今日から移行を始めましょう。

Shilpa、今年のドキュメントのXcodeの新機能は何ですか？

シルパ:たくさん。

明確で簡潔なコードは、ドキュメントでさらに良くなります。

将来の自分やAPIの消費者に何かを説明しているかどうかにかかわらず、優れたドキュメントを書くことが重要です。

そして、素晴らしいドキュメントは素晴らしいプレゼンテーションに値します。

Xcode 15には美しい新しいスタイリングと間隔があり、ドキュメントが読みやすくなっています。

しかし、最大の改善点は、ドキュメントのリアルタイムプレビューを表示する新しいアシスタントです。

ドキュメントの作成中に、[エディタ] > [アシスタント] を選択し、ジャンプバーの [ドキュメント プレビュー] を選択して、アシスタントを表示できます。

ソースエディタに入力すると、プレビューがリアルタイムで更新されます。

これは、私のドキュメントが完全に構築されたドキュメントアーカイブでどのように見えるかを正確に示します。

実際にどのように使用できるかを示すコード例を追加します。

「この初期化子を使用して、特定の鳥の画像を表示する」と書くことから始めます。

次に、コード例を貼り付けます。

この例にはUIが含まれているため、結果のビューがどのように見えるかのスクリーンショットを追加します。

ドキュメントカタログに含めたので、BirdIconという名前の画像を参照できます。

新しいドキュメントのプレビューは、ドキュメントがあなたが望むように正確に提示されていることを確認するのに非常に役立ちます。

あなたが私のようにドキュメントを書くことに情熱を持っているなら、詳細については、「Swift-DocCで豊富なドキュメントを作成する」セッションをご覧ください。

ドキュメントと同じくらい重要なのは、コードが簡潔で理解しやすいものであることです。

今年のSwiftの新機能は、強力な新しい言語機能であるSwiftマクロです。

マクロは、より表現力豊かなAPIを作り、繰り返されるコードを排除するのに役立ちます。

また、Xcodeの統合により、マクロを完全に可視化できるため、マクロで生成されたコードをアプリ内の他のすべてのコードと同様に扱うことができます。

マクロはSDKのSwiftパッケージの一部です。

現在、Swift標準ライブラリ、基盤、新しいSwiftデータフレームワークなど、多くのApple独自のフレームワークでマクロの力を活用しています。

また、自分のマクロパッケージを作成して他の人と共有することもできます。

パッケージを作成するには、Command-Shift-Aを押すだけでXcodeのすべてのメニューオプションにアクセスできる新機能であるクイックアクションを使用します。

新しいマクロパッケージには、私が始めるための素晴らしい例が付属しています。

私はすでにマクロパッケージEnumHelperを作成しました。

EnumHelper内では、CaseDetectionをマクロとして実装しました。

マクロの美しさは、通常のSwiftコードを生成することです。

それは包み込み、彼らが提供するコードをきちんと隠します。

しかし、マクロが何をしているのかを見たい場合や、マクロ生成コードでデバッグしたいときは、クイックアクションの助けを借りてマクロを展開できます。

デバッグする必要がある場合は、マクロ内のコードにブレークポイントを設定することもできます。

「Swiftマクロで展開する」セッションを見て、Swiftマクロのより深い技術的理解を得てください。

この新しい知識を装備し、セッション「Swiftマクロを書く」でゼロからいくつかのマクロを書くために一緒にコーディングすることができます。

マクロ、プレビューを活用しているXcodeの別の領域を探りましょう。

マクロの助けを借りて、新しいプレビューAPIはシンプルで覚えやすいです。

#Previewと入力してプレビューを追加します。

アカウント画面をプレビューしたい。

アプリの詳細列にはさまざまな状態があり、別のプレビューを作成することで表示できます。

私はこれらのシナリオの両方を見ることができます。

しかし今、私はUIに2つのプレビューを持っています。

それらを区別するために、タイトル「プレースホルダビュー」を追加します。

しかし、待ってください、さらに改善があります。

UIKitとAppKitにプレビューをお届けします。

そのため、古いFood Truckアプリでも、UIViewControllerのプレビューを追加し、SwiftUIと同じくらい速く反復することができます。

では、プレビュー付きのウィジェットの開発を見てみましょう。

このAPIでは、時間ベースのウィジェットを構築するための新しいワークフローも導入されています。

キャンバスには、すべてのエントリを表示する新しい領域があります。

そして、それらをナビゲートすると、ウィジェットのトランジションがどのようにアニメーション化されるかがわかります。

「XcodeプレビューでプログラマティックUIを構築する」セッションをチェックして、プロジェクトに新しいエキサイティングなプレビュー機能を採用する方法を学んでください。

ライアンに返して、ナビゲーションの改善について話します。

ライアン:ありがとう、シルパ。

プロジェクトが成長するにつれて、より複雑になり、タスク中に参照したいランドマークを追跡することが困難になります。

助けるために、Xcode 15はブックマークナビゲーターを導入しています。

ソースコントロールナビゲーターのすぐ隣をクリックして開きます。

ドキュメントを追加する必要があるコードの場所にブックマークを追加しています。

このファイルにもう1つ追加したいのですが、簡単にできます。

この場所を右クリックして「ブックマーク」を選択します。

ブックマークは、その場所のプレビューとともにナビゲーターに表示されますが、クリックして別の説明を入力することで、この表示を変更できます。

Xcodeは、私の説明でコードの行に注釈を付け、私が何をしたいのかを簡単に見て覚えておくことができます。

私のブックマークのリストは増え始めていますが、好きなように並べ替えてグループ化することで管理できます。

ドキュメント関連のブックマークをすべてグループ化したいです。

興味のあるものを選択し、セカンダリクリックでコンテキストメニューを開き、選択から新しいグループを選択します。

これにより、ドキュメントを追加する場所を呼び出す新しいグループが作成されます。

ブックマークは私のコードの素晴らしいリマインダーですが、ToDoリストとしても使用できます。

左側をクリックすると、完了としてマークできます。

または、コンテキストメニューで[ブックマークの削除]を選択すると、完全に削除できます。

これにより、エディタのブックマークの注釈が削除されます。

しかし、私がブックマークできるのはコードの行だけではありません。

ブックマークは、検索クエリを追跡するための素晴らしい方法でもあります。

Xcode 15の前に、私はコードにTo-Doを追加しましたが、それらを見つけるのが難しいので、私はすでにそれらすべてを見つけるためにクエリをブックマークしました。

しかし、私は任意の検索クエリをブックマークすることができます。

コード内のすべてのビュー修飾子の便利なリストを保持したい。

新しいConforming Typesクエリを使用して、viewModifierプロトコルへのすべての適合性を検索します。

次に、結果を右クリックし、ブックマーク検索「viewModifier」を選択することで、このクエリをブックマークできます。

私のクエリはブックマークナビゲーターで入手できます。

クエリの結果が変更された場合は、ブックマークの横にある更新ボタンを1回クリックするだけでリストを更新できます。

Xcode 15の新しいブックマークナビゲーターは、あなたの仕事を追跡するので、手元のタスクに集中する必要はありません。

開発のもう一つの重要な部分は、あなたの仕事を共有することです。

特に同僚と共有するコミットを作成する場合、変更をまとめることは、変更自体と同じくらい重要です。

Xcode 15では、新しい変更ナビゲーターとコミットエディタが導入され、すべての変更を確認するのに最適な方法です。

私はプロジェクトにドキュメントを追加することに取り組んできました。

ソースコントロールナビゲーターでこれらの変更を確認できます。

最初に気付くのは、各ファイルのステータスのレポートと表示の改善です。

私のステージの変更は、ファイル名の横にアイコンとして表示されます。

これらの変更の確認を開始したいので、コミットされていない変更項目をクリックして、コミットエディタを起動します。

1つのスクロールビューですべての変更を確認できるようになりました。

各セクションには、周囲のコードを理解するのに十分なコンテキストが表示されます。

そして、もっと見たい場合は、ドラッグハンドルを使ってより多くのファイルを公開することができます。

各変更はソースエディタでも表示され、慣れている注釈やコントロールにアクセスできます。

レビュー中に、BirdsNavigationStackファイルに問題があることに気づきました。

ドキュメントにタイプミスをしたように見えますが、ビューを離れることなく修正できます。

Xcodeは私の変更を処理し、問題を削除します。

私の編集はまた、変更バーにステージングされていないとすぐに表示されます。

ステータスインジケーターは、BirdsNavigationStackにステージングとアンステージの両方の変更があることを強調しています。

次のコミットに修正を含めたいので、修正の横にある変更バーをクリックして「ステージ変更」を選択してステージングします。

また、デバッグに使用していたログステートメントを誤ってステージングしたことに気づきました。

変更バーをもう一度使用して、この変更を解除します。

これらのステージングコントロールは使いやすく、Xcode全体に統合されています。

変更を確認する準備はできています。

まず、コミットメッセージボックスに説明を追加し、コミットボタンをクリックします。

Xcodeはコミットを作成し、コミットビューアですぐに開き、含まれていたものを要約します。

そして最後に、私は自分のコミットをチームメイトと共有することができます。

コミットの横にあるステータスインジケーターをクリックし、[プッシュ]を選択し、プロンプトに従います。

これらのソースコントロール機能は、Xcode 15に集中するための大きな改善です。

しかし、ねえ、シルパ、テストにも役立つ新機能があると思います。

それらについて教えていただけますか?

シルパ:確かに、ライアン、テストは高品質のアプリを出荷する上で重要な部分です。

これにより、回帰をすばやくキャッチし、複雑さが増すにつれてアプリの品質を維持できます。

テストは今年、より効率的にするためにSwiftでゼロから書き換えられた更新されたテストナビゲーターから始めて、いくつかの大きな改善が行われました。

テスト結果をリアルタイムで実行または報告すると、Xcodeが45%高速になりました。

テストナビゲーターはテスト計画を中心に整理されているので、気になるテストを見つけやすくなります。

フィルターを使用して、予想される障害など、任意の結果タイプに基づいてテストを見つけることもできます。

XcodeまたはXcode Cloudでテストを実行すると、テストレポートは結果を調べるのに役立ち、次にどこに焦点を合わせるべきかを示します。

これは、テスト実行全体の高レベルの要約から始まります。

これには、結果のパターンベースの分析であるInsightsが含まれます。

テストセクションでは、テストがどのように実行されたかを理解できます。

さまざまなデバイスや構成でどれだけのテストに合格し、失敗したかを簡単に把握できます。

Insightsは、テスト結果を分析して、以前は見るのが難しかった可能性のある関連する障害を特定します。

また、スイート全体が結果を返すのに時間がかかる可能性のあるテスト実行を警告します。

2番目の洞察が私に目立ちます。

アカウントボタンをタップしようとしたときにテストに失敗しました。

私はこれをさらに調査したい。

概要から、結果タイプ、実行先、およびテスト計画設定のフィルタを使用して、すべてのテスト実行を表示するテストリストに移動できます。

テストでは、同じエラーメッセージで複数の言語でアカウントボタンをタップできませんでした。

詳細については、個々のクラスを見るか、個々のテスト方法の新しい専用のテスト詳細ビューに移動します。

テストの詳細ビューには、すべての実行の内訳や専用のパフォーマンス指標タブなど、結果データを探索するさまざまな方法のタブが含まれています。

UIテストの失敗をデバッグすることは、新しいオートメーションエクスプローラーでこれまで以上に楽しいです。

エクスプローラーはインタラクティブなので、テストの再生を見たり、タイムラインをスクラブしたりできます。

タッチまたはマウスのイベントがビデオにオーバーレイされます。

失敗の時点で、テストがアカウントボタンのタップに失敗したときのように、アプリのUI階層を調べることができます。

これにより、UIテストの失敗の修正がずっと簡単になります。

詳細な調査については、「Xcodeテストレポートで失敗をより速く修正する」セッションを見て、詳細を確認してください。

ライアンに戻って、デバッグについて話しましょう。

ライアン：テストとデバッグは密接に関連しています。

彼らは両方とも高品質のアプリを作ることについてです。

また、デバッグは今年も、XcodeへのOSLogの統合から始めて、いくつかの大きな改善を受けます。

OSLogは、ランタイム情報をキャプチャするための優れたツールです。

ログ出力を整理しておく、構造化されたカスタマイズ可能なロギングメカニズムを提供します。

また、Xcode 15のコンソールでは、サブシステムカテゴリや重大度などのログデータの複雑なフィルタリングを実行する機能など、OSLogを完全にサポートしています。

ログのプレゼンテーションはこれまで以上にきれいです。

焦点はログコンテンツにあり、余分なデータはきれいに隠されています。

各ログエントリの背景色は、その重大度を示し、重要なメッセージのログ出力の長いストリームを簡単にスキャンできます。

また、メタデータフィールドはデフォルトでは非表示になっていますが、数回クリックするだけです。

見たいフィールドだけを選択できます。

また、特定のものを探しているときは、フィルターフィールドで検索を絞り込むことができます。

メタデータまたはログの全文をフィルタリングできます。

そして、私が本当に好きな機能は、ログエントリからそれを作成したコード行に直接ジャンプすることができます。

セッション「構造化ロギングによるデバッグ」で、これらのロギング機能について詳しく説明します。

最後に、配布について話しましょう。

配布とは、アプリを世界に、チームメイト、ベータテスター、そしてユーザーに公開することです。

そして、Xcode 15には、このプロセスをより簡単かつ安全にするためのいくつかの改善点があります。

Xcode Cloudから始めましょう。

Xcode Cloudは、アプリを配布するのに最適な方法です。

ビルドバージョニング、アプリの署名、配布プロファイルなどを自動的に管理します。

今年、Xcode Cloudはあなたのためにさらに2つの詳細を処理します。

まず、TestFlightテストの詳細。

Xcode Cloudは、ソースコードのすぐ横にテストノートを含めるためのサポートを追加します。

これらは配布のためにTestFlightビルドに自動的に添付されるため、メモはアプリのすぐ横にテスターに表示されます。

第二に、Xcode CloudはMacアプリの公証をサポートするようになりました。

ワークフローに公証後のアクションを追加するだけで、あとはXcode Cloudが行います。

ビルドが完了すると、アプリは自動的に公証され、ホッチキスで留められ、ダウンロードする準備が整います。

アプリの公証は、ユーザーにとって不可欠です。

それはあなたのアプリが改ざんされていないことを彼らに知らせます。

しかし、あなたが依存しているSDKとフレームワークの整合性を信頼できることも同様に重要です。

この保証を提供するために、XcodeはXCFrameworksの署名検証を導入しています。

作成者はフレームワークの内容にデジタル署名することができ、これらの署名はXcodeで確認できます。

フレームワークインスペクタには新しい署名スライスがあります。

誰がフレームワークを作成し、署名したかを正確に教えてくれます。

そして、Xcodeはこのアイデンティティを覚えているでしょう。

したがって、フレームワークを更新するときに変更された場合は、問題に関する明確な警告が表示されますが、それ以上のものがあります。

著者は、フレームワークにプライバシーマニフェストを含めることができます。

このマニフェストは、フレームワークが機密データをどのように使用し、保護するかを正確に詳述しています。

プライバシーマニフェストはフレームワークにバンドルされているため、署名されたパッケージの一部でもあり、その内容が著者から直接来たことを信頼できます。

Xcodeを使用して、すべてのマニフェストをアプリの完全なプライバシーレポートにまとめることができます。

これは私が生成したレポートです。

このレポートは、App Store Connectでプライバシー栄養ラベルを簡単に記入できるように設計されており、ユーザーに正確な情報を提供するようにしています。

また、Appleはプライバシーに影響を与えるSDKと協力して、すべての重要な依存関係がこの貴重な情報を提供するようにしています。

「デジタル署名でアプリの依存関係を確認する」と「プライバシーマニフェストを使い始める」のセッションで、これらのトピックをより深く取り上げます。

プライバシーマニフェストは、アプリをユーザーに配布する際の優れたツールです。

バグ修正や新しい機能ブランチに取り組んでいるときは、チームメイトとチームメイトだけにアプリを配布したいと考えています。

そのため、Xcode 15はTestFlightの内部テスト配布オプションをサポートするようになりました。

TestFlightの内部ビルドはチームのみが利用できるため、誤って顧客にリリースすることはできません。

それらは簡単に作成できます。

App Store Connectを通じてアプリを配布する場合は、「TestFlight内部テスト」オプションを選択するだけです。

しかし、実際にはこれよりもさらに簡単です。

Xcodeは現在、最も一般的な配布方法と推奨設定のセットをバンドルしています。

ステップ1、TestFlight内部のみを含む、これらの新しいオプションのいずれかを選択します。

ステップ2、[配布]をクリックすると完了です。

ステップ3はありません。

また、App Store Connectを通じて配信する場合は、ビルドステータスに関するデスクトップ通知も届きます。

そのため、アプリをテストする準備ができたら、すぐに通知されます。

これらのアップデートにより、アプリの反復と配布が簡単になり、チームメイト、テスター、ユーザーとの緊密な連携がスムーズかつ迅速になります。

「XcodeとXcode Cloudで配布を簡素化する」というセッションを見て、これらの機能の探索を始めましょう。

まあ、それはXcode 15の新機能の簡単な概要でした。

入手が簡単で、使用が速く、開発をより集中し、スムーズで、楽しくするための多くの改善があります。

Shilpa：Xcode 15をダウンロードして、これらのクールな新機能を試し始めることができます。

見てくれてありがとう。

♪