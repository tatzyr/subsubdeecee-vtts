10202

♪まろやかなインストゥルメンタルヒップホップ音楽♪

♪

ニールス・ガベル:こんにちは、私はニールスです。

私はReality Composer Proチームの材料エンジニアです。

私のセッション「Explore materials in Reality Composer Pro」へようこそ。

このセッションでは、Reality Composer Proを使用してxrOS用の資料を構築する方法を学びます。

まず、xrOSにある素材の概要と、3Dオブジェクトの外観をカスタマイズする方法について説明します。

MaterialXオープンスタンダードに基づいて、xrOSで利用可能な新しい材料タイプを紹介します。

その後、Shader Graphと呼ばれるReality Composer Proの組み込みエディタを使用してマテリアルを設計する方法を紹介します。

ノードグラフを使用して材料の再利用可能な部分を作成するプロセスを案内します。

そして最後に、見栄えの良い3Dコンテンツのジオメトリ修飾子を構築します。

まず、材料の意味を説明することから始めましょう。

素材は、3Dシーンでのオブジェクトの外観を定義するものです。

材料はシンプルで、単色でもいいし、画像を使用することもできます。

椅子のモデルに木の質感を適用したり、レンガの画像を壁にマッピングしたりできます。

材料も非常に洗練されている可能性があります。

彼らはアニメーションを使用して波打つ水のように見えるか、視野角に基づいて外観を変えるかもしれません。

マザーオブパールの虹色の輝きを思い浮かべてください。

材料は、適用されるオブジェクトのジオメトリを変更することもできます。

xrOSの材料は、物理ベースのレンダリング、略してPBRを使用します。

これは、アーティストが現実世界のオブジェクトに似た物理的性質を使用してオブジェクトの外観を設計できることを意味します。たとえば、オブジェクトの金属や粗さなどです。

動作中の物理的ベースの材料の例をいくつか見てみましょう。

これはシンプルなPBR材料を使用した球体です。

この素材は、反射率が40%に設定された一定の青色を使用しています。

または、説得力のあるコンクリートを得るために、色と表面の粗さを設定するために画像を適用することもできます。

または、金属度を上げて、鉄のように見えるものを手に入れます。

車のペイントのように見えるものを手に入れることさえできます。

材料は1つ以上のシェーダーで構成されています。

これらは、資料の外観を計算する実際の作業を行うプログラムです。

iOSとiPadOS用のRealityKit 2では、CustomMaterialを導入しました。

CustomMaterialのシェーダーは金属で手作業でコード化されています。

xrOSでは、ShaderGraphMaterialと呼ばれる新しいタイプの素材を導入しています。

これは、xrOS用のカスタム素材を作成する排他的な方法です。

ShaderGraphMaterialは、その名前を取得する機能ブロックのネットワークまたはグラフを使用します。

ShaderGraphMaterialは、MaterialXと呼ばれるオープンスタンダードに基づいており、素材を定義するアーティストに優しい方法です。

MaterialXはもともと2012年にインダストリアルライト&マジックによって作成されました。

ShaderGraphMaterialは、Physically BasedとCustomと呼ばれる2つの主要なタイプのシェーダーをサポートしています。

物理ベースは基本的なPBRシェーダーです。

より簡単なユースケースのためにこれを選択してください。

このシェーダーは、各プロパティに色や画像などの一定で不変の値を提供することで設定します。

一方、カスタムシェーダーを使用すると、3Dオブジェクトの外観を正確かつカスタムで制御できます。

カスタムシェーダーは、アニメーションを組み込み、オブジェクトのジオメトリを調整し、キラキラしたペイントの外観など、オブジェクトの表面に特殊効果を作成できます。

Reality Composer Pro内のShader Graphエディタを使用してShaderGraphMaterialsを構築できます。

ビューポートの地形の外観を瞬時に定義する下のシェーダーグラフノードを見てください。

基本を理解したので、いくつかのカスタム素材を作りましょう。

xrOSのマテリアルは、3Dコンテンツを作成、編集、プレビューできる新しいプロ開発者ツールであるReality Composer Proを使用して作成できます。

資料から始める前にアプリの紹介をご希望の場合は、「Meet Reality Composer Pro」セッションを見て、エディタUIとその機能に慣れてください。

そのセッションで示されたヨセミテバレーモデルを使用し、地形図の外観を適用します。

資料の背後にある数学を説明してから、Reality Composer Proのシェーダーエディタに入り、それを構築します。

カバーすることがたくさんあります。すぐに飛び込みましょう。

これはエリックがセッションで作ったヨセミテバレーのジオラマです。

時間を節約するために、Deactivateコマンドを使用して、このセッションに必要のないすべてのオブジェクトを隠しました。

それは私たちに真ん中に台座を残し、頂上に風景を残します。

かなりかっこいい！

地形機能を追加しましょう。

地形の斜面に沿って等高線を表示することで、モデルの地形を示す材料を追加します。

ハイキングを計画するときに出くわしたかもしれない地形図に似ています。

地形に等高線を描画するシェーダーを含むカスタム素材を作成しましょう。

この図のように、同じ標高を持つすべての領域を通して、地形に線を描きたいです。

たとえば、この青い線は、標高1000メートルの地形上のすべての点を示しています。

上から見ると、右側の図のように見えます。

私たちは、モデルにこのような線を引く一連の関数を使用して材料を構築します。

開始するには、階層パネルのプロジェクトの下部にある[プラス]ボタンをクリックします。

材料の下で、物理的ベースとカスタムの2つのシェーダータイプに注目してください。

カスタムを選択します。

これにより、編集者のシェーダーグラフが明らかになります。

新しいカスタムシェーダーは、紫色の表面ノードと青色の出力ノードの2つのノードから始まります。

マテリアルのアクティブサーフェスは、出力ノードのカスタムサーフェス入力に接続されているものです。

サーフェス上の入力は、シェーダーの物理ベースまたはPBRパラメータを設定する方法です。

例えば、ベースカラー。

資料に説明的な名前を付けましょう。

地形素材は良さそうですね。

重要なステップは、ヨセミテバレーモデルに新しい素材を割り当てることです。

プロジェクト階層で選択します。

インスペクタで、[マテリアルバインディング] で、[バインディング] メニューから [TopographyMaterial] を選択します。

モデルが色からシンプルなグレーに変わることに注目してください。

私たちの材料は機能していますが、まだ面白いことは何もしていません。

それを直しましょう。

階層からTopographyMaterialを選択して、シェーダーグラフエディタに戻ります。

いくつかのノードをサーフェス入力に接続して、モデルにストライプを適切な場所に描画します。

私たちの材料がこの例の地形でどのように機能するかを説明します。

モデル上の位置に基づいて地形線を描画する場所を決定するための材料が必要です。

まず、マテリアルに位置ノードを追加します。

このノードは、3D空間でのレンダリング位置を返します。

位置の高さにのみ興味があるので、位置のY座標のみを抽出するためにseparateというノードも追加します。

Separateは、地形の高さとともに増加するY座標位置を返します。

これらの最初の2つのノードをReality Composer Proの素材に追加しましょう。

エディタの背景をダブルクリックしてノードを追加します。

これにより、新しいノードピッカーがもたらされます。

利用可能なすべてのノードのリストを閲覧したり、名前やキーワードでノードを検索したりできます。

「位置」と入力し、リストから位置ノードを選択してシェーダーに挿入しましょう。

位置は、素材がレンダリングされている3D空間内の位置を出力します。

私たちの材料は高さによって異なるので、位置のY成分を抽出するために別のノードを追加しましょう。

背景をダブルクリックして、新しいノードピッカーを再度開き、別々の3ノードを追加します。

エディタで接続するには、クリックしてノード出力からこのようにノード入力にドラッグするだけです。

これら2つのノードを組み合わせることで、地形の高さが得られます。

次に、別のノードの出力を取り、それをモジュロノードに渡します。

モジュロは、2つの値を分割することの残りの部分を与えます。

モジュロを使用して、高さを希望の地形的な線間隔で割ります。

結果はこんな感じです。

高さがバンドに分かれていることがわかります。

各範囲内の高さ値は0から始まり、その範囲の高さまで増加します。

これは私たちの次のステップにとって重要になります。

Reality Composer Proの素材にモジュロノードを追加しましょう。

ダブルクリックしてノードを追加してから接続する代わりに、新しい接続を空のスペースにドラッグして、すでに接続されているノードを1つのステップで作成できます。

新しいノードピッカーで、「modulo」と入力し、クリックしてModuloノードを挿入します。

モジュロには2つの入力があります。

1つ目は配当で、2つ目は除数です。

ノードを接続する代わりに、インスペクタの入力に一定の値を便利に設定できます。

検査官で、2番目の引数を0.1に変更します。

これは除数であり、高さ範囲の幅を設定します。

出力を見る前に、あと1つのステップがあります。

Ifgreaterノードを使用して、繰り返し値が地形の狭い高さのどこに落ちるかを判断します。

Ifgreaterノードは、比較の結果に応じて、画面に表示される2つのバンドカラーの1つを表す値を返します。

高さがシェーダーの地形線幅よりも大きい場合は、背景色を選択します。

そして、高さが希望の線幅の範囲内にある場合は、地形線の色を選択します。

Ifgreaterノードを材料に追加して、結果を見てみましょう。

モジュロノードの結果を、地形線幅に選択した値と比較したい。

だから、私はその比較を行うためにifgreaterノードを追加します。

Ifgreaterは2つの入力を比較し、最初の入力が2番目の入力よりも大きい場合は1つの値を返します。最初の入力が2番目の入力よりも小さい場合は別の値を返します。

このifgreaterノードは浮動小数点値を出力するように設定されていますが、地形と地形線の2色から選択したいと考えています。

インスペクタの[タイプ]で、このノードを出力RGBに変更します。

次に、2色を選びましょう。

インスペクタで、True Resultの横にあるカラーピッカーをクリックし、地形の色を設定します。

白を使いましょう。

地形線の色であるFalse Resultを黒に設定しておきましょう。

これは私たちの白い地形と多くのコントラストを与えるでしょう。

たくさんの値を試して、線幅の良い値として0.002に到達したので、インスペクタで比較値を0.002に設定します。

Ifgreaterノードの出力をサーフェスの拡散色入力に接続します。

素晴らしい、今、私たちの材料は私たちの地形のすべてのポイントで色を設定しており、地形線材料を作りました。

次に、ノードグラフ機能の使い方を見てみましょう。

ノードグラフは、複雑な材料を簡素化し、グラフの一部を再利用するための独自のノードを作成するのに役立ちます。

ノードグラフを使用して、素材に実際の地形図の外観を与えます。

材料の現在の線の間に2番目の線を追加しましょう。

これまでのところ、私たちの素材はこんな感じです。

そして、細分化を追加すると、これがどのように見えるかです。

地形線を引く材料の4つのノードから始めます。

次に、それらからノードグラフを作成します。

これにより、4つのノードが1つのノードに統合されます。

最後に、ノードグラフのインスタンスを作成して、その機能を再利用します。

1つのノードグラフは元の線セットを描画し、そのインスタンスは2番目の線セットを描画します。

Reality Composer Proに戻って構築しましょう。

これが再び私たちの地形線シェーダーです。

ドラッグして、線の色と描画場所を計算するこれらの4つのノードを選択します。

それらを選択したら、右クリックして「ノードグラフの作成」を選択します。

これで、ノードは他のグラフ内で使用できる単一のノードとして表示されます。

新しいノードにわかりやすい名前を割り当てましょう。

それをラインと呼びましょう。

このノードグラフのコピーを作成して、2番目の線を描画します。

このために、階層のCreate Instanceコマンドを使用してインスタンスを作成します。

インスタンスは、元のノードグラフに加えられた変更を採用するライブコピーです。

私たちはそれを選択して材料に戻ります。

新しいインスタンスをSecondaryLinesと呼びましょう。

ノードグラフとそのインスタンスは、異なる間隔と色の線を描画したいので、間隔と色と呼ばれる2つの入力を元のノードグラフに追加して、これらのプロパティを制御します。

元のノードグラフをダブルクリックして編集しましょう。

インスペクタのノードグラフに入力と出力を追加します。

まず、Spacingという入力を追加し、そのタイプをFloatに設定しましょう。

また、地形ラインの色を制御するために、カラーと呼ばれる入力を追加します。

入力のタイプをColor3に設定します。

これらをグラフの適切な場所につなげます。

プロジェクト階層で選択して、資料に戻りましょう。

ノードグラフには、作成した2つの入力があり、インスタンスがこれら2つの新しい入力を継承していることに注意してください。

元の線ノードグラフで、以前に選択した値に間隔を設定します。

そして、インスタンスノードグラフの間隔を小さく、明るい色を選びましょう。

最後のステップは、元のノードグラフとインスタンスノードグラフの出力を組み合わせることです。

両方のノードグラフにグレースケール色を便利に選択したので、乗算ノードを使用して色を組み合わせることができます。

いいね！私たちは、2組の線を持つ説得力のある地形線材料を持っています。

次に、ジオメトリ修飾子について話しましょう。

これらは、モデルをリアルタイムで変更するために使用できるカスタム素材の特徴です。

静的地形モデルを置き換えて、ジオメトリ修飾子と高さデータを使用して再作成します。

次に、ジオメトリ修飾子を拡張して、ヨセミテバレーとカリフォルニア州カタリナ島の2つの異なる地形の間で動的にアニメーション化します。

終わったら、2つの異なる場所の間でアニメーション化できるダイナミックな地形素材があります。

これがどのように行われるか見てみましょう。

これまでに見たシェーダーはすべてサーフェスシェーダーです。

これらは、レンダリングされたモデルの各ピクセルの物理ベースまたはPBR属性を設定するシェーダーです。

ジオメトリ修飾子はサーフェスシェーダーに似ていますが、代わりにオブジェクトのジオメトリを操作します。

実際、Reality Composer Proの同じエディタでそれらを構築します。

高さマップデータを使用してヨセミテバレーの地形を作成する、構築するジオメトリ修飾子の概要を説明します。

プレーンなジオメトリを含むフラットディスクモデルから始めます。

これが私たちのベース表面になります。

次に、モデルの各場所の高さに関する2Dデータである地形の高さデータを使用し、ジオメトリ修飾子を使用して地形を正しい量上げます。

これは、私たちが望む地形をもたらすでしょう。

基本バージョンを見せたら、2セットの地形の高さを取り、それらを使用して興味のある2つの場所、ヨセミテバレーとカタリナ島の間でアニメーション化するバージョンを実演します。

これは別の見解です。

フラットモデルから始めて、ジオメトリ修飾子は、このような2D高さマップのデータを使用して頂点を垂直に移動します。

最初に行うことは、Deactivateコマンドを使用して、事前に構築されたYosemite Valleyモデルを非表示にすることです。

同じヨセミテバレーモデルを生成しますが、今回はジオメトリ修飾子を使用します。

プロジェクトブラウザのフラットディスクモデルから始めます。

プロジェクト階層のルートエンティティにドラッグすることで、持ち込むことができます。

私は先に進み、DynamicTerrainMaterialという名前の新しい素材を作成し、それをディスクに割り当てました。

ジオメトリ修飾子に取り組みましょう。

シェーダーグラフエディタでは、ジオメトリ修飾サーフェスが必要になります。

これをPBR表面と一緒に材料に追加します。

出力ノードのカスタムジオメトリ修飾子入力から接続をドラッグし、新しいノードUIからジオメトリ修飾子を選択します。

まず、ヨセミテバレーのイメージを表面に適用しましょう。

画像データを読み取るには、画像ノードを使用します。

インスペクタで、ヨセミテバレーの画像を画像ノードのファイル名入力に割り当てましょう。

地形が平らなので、物事は少し面白く見えますが、私たちは今それを修正するつもりです。

谷の高さデータが必要になります。

これは、カラーデータではなく高さ値を含む画像ファイルにあります。

このデータは画像内にあるので、別の画像ノードを追加して読みます。

次に、高さデータを含むYosemite Valley EXRイメージを、この新しい画像ノードのファイル名入力に割り当てます。

ジオメトリ修飾子は、モデルの頂点を任意の方向に移動できますが、垂直に移動することだけに興味があるので、コンバイン3ノードを挿入して、Yコンポーネントのみで3Dベクトルを作成しましょう。

今、これをGeometryModifierサーフェスのモデル位置オフセット入力に接続し、ブーム、私たちのフラットモデルはヨセミテバレーに変換されました。

私たちが取らなければならないステップがもう1つあります。

頂点を移動するときは、新しい地形形状に合わせてモデルの表面法線ベクトルを設定する必要があります。

高さデータからこれらを計算する方法がありますが、今日はこのジオメトリの事前計算された法線を含む画像を使用します。

法線を読み取るために別の画像ノードを作成しましょう。

これらは事前に計算されているため、精度を高めるために、サーフェスシェーダーの通常の入力に直接接続します。

私たちの表面は、法線が-1から1の間の値を持つことを期待していますが、私たちの画像の法線は0から1の間です。

リマップノードを使用して、画像の値を再マッピングしました。

これで、高さデータを使用してフラットジオメトリから地形を作成しました。

次に、ジオラマをダイナミックにし、ある地形から別の地形にモーフィングする機能を追加しましょう。

この場合、ヨセミテバレーをカタリナ島に変更するためのアニメーショントランジションを追加します。

これを達成するために、まず既存のジオメトリシェーダーに別の画像ノードのセットを追加します。

ノードには、カタリナ島の地形の高さ、色、法線が含まれています。

次に、これら2つの高さ、法線、色をブレンドするミックスノードを追加します。

最後に、ミックスノードに値を接続して、2つのデータセット間のブレンドを制御します。

さあ、Reality Composer Proでこれを作りましょう。

さて、これがこれまでの資料です。

ヨセミテバレーではなくカタリナ島に、同じデータ（高さ、色、法線）を含む別の画像ノードのセットを追加しましょう。

次に、2つの色、高さ、法線をブレンドするために、いくつかのミックスノードを追加します。

最後に、0から1の定数をミックスノードに接続して、表示される地形を制御します。

混合定数を1に設定すると、地形がカタリナ島を示していることに気づくでしょう。

混合定数を0に設定すると、ヨセミテバレーが見えます。

2つの異なる地形間を移行できる素材がわかったので、この移行の進行状況の値をSwiftコードから変更可能にしましょう。

プロモートコマンドを使用して、進捗値を資料の入力に変換します。

マテリアルへの入力は、Swiftコードからアクセスできるマテリアルのプロパティになります。

これで、私たちの素材はジオラマスウィフトアプリで使用する準備が整いました。

これが私たちの地形線とダイナミックな地形を組み合わせた最終版です。

このバージョンには、アンチエイリアス地形線やアンビエントオクルージョンマップなど、いくつかの追加の改良があり、すべてシェーダーグラフを使用して追加されています。

このセッションのサンプルでそれらをチェックしてください。

それでおそれです。

今日は、xrOSのマテリアルの概要を簡単に説明しました。Reality Composer ProのShader Graphエディタを使用して動的マテリアルを設計しました。ノードグラフを使用してグラフを整理し、独自の再利用可能なノードを作成する方法を学びました。最後に、オブジェクトを動的に再形成するためにジオメトリ修飾子を組み込むための知識を拡張しました。

Reality Composer Proは、材料を設計するための大きな可能性を秘めています。

しかし、Reality Composer Proにはもっと多くのことがあり、それがxrOSで没入型体験を作成するのにどのように役立つか。

アマンダのセッション「XcodeでReality Composer Proコンテンツと連携」では、Reality Composer ProコンテンツをDioramas Swiftアプリに統合する方法を学びます。また、まだ見ていない場合は、エリックのセッション「Meet Reality Composer Pro」をチェックして、開始方法を学びます。

xrOSのコンテンツの探索とデザインを楽しんでいただければ幸いです。

見てくれてありがとう。

♪