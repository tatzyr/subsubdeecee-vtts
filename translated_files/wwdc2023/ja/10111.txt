10111

♪まろやかなインストゥルメンタルヒップホップ♪

♪

Raffael Hannemann:こんにちは、SwiftUIでGo Beyond the Windowへようこそ。

私はラファで、アップルのエンジニアで、後に同僚のマークと合流します。

今日は、xrOSのフルパワーを活用して、すでに知っているツールやフレームワークで真に没入感のある体験を生み出すのがいかに簡単かをお見せします。

あなたはすでにiOS用のARアプリの開発から拡張現実に精通しているかもしれません。

過去数年間で、iPhoneとiPad用の豊富なARアプリを作成するために、ARKitやRealityKitを含む多くのツールやフレームワークを導入し、拡張しました。

これらのアプリは、インタラクティブなユーザーインターフェイスと仮想オブジェクトでユーザーの環境を増強することで、現実世界と想像力の境界線を曖昧にすることができます。

今年は、xrOSの発売により、没入型体験から始めて、ARをまったく新しいレベルに引き上げます。

これらの経験では、アプリケーションは、ウィンドウや3次元コンテンツを含むUIを周りのどこにでも表示します。

周囲は目に見えるままであり、実際には経験の一部にもなります。

アプリの要素を表面に固定し、仮想オブジェクトとエフェクトで現実世界を増強し、豊かにすることができます。

そして、さらに一歩進んで、あなたのスペース全体をカバーする、完全に没入感のある体験があります。

あなたのアプリは、あなたが見るものを完全に制御します。

これがロックを解除するすべての可能性について考えてください。

そして何よりも、このすべては、あなたがすでに慣れ親しんでいるツール、フレームワーク、パターンで可能です。

そして、これの中心にあるのは、SwiftUIの没入型空間です。

始めましょう。

他のセッションでは、今年はSwiftUIに3次元を追加することを学びました。

xrOSでウィンドウとボリュームを表示し、SwiftUIの使いやすい宣言パターンで3次元のユーザーインターフェイス要素を表示できます。

ウィンドウとボリュームの両方で、その範囲内でコンテンツを表示できます。

では、xrOSが提供する無限の空間を最大限に活用し、真に没入感のある体験を作りたい場合はどうなりますか?

窓の境界を越えて頭の周りにアイテムを置き、その真ん中にいたいと思うかもしれません。

そして、これが私たちがスペースを設計したものです。

ウィンドウとボリュームの横にあるスペースは、xrOSでユーザーインターフェイスを表示するためのコンテナの一種です。

このセッションでは、スペースと、それらを使用して没入型体験を作成する方法に焦点を当てます。

まずSpaceを使い始めて、コンテンツを表示する方法を学びましょう。

その後、マークは、スペースを管理し、スペースに直接起動し、スペースが許可するすべてのカスタマイズを説明します。

では、始めて、いくつかのコードをチェックしてみましょう。

私は宇宙探査に本当に興奮しています。

他のセッションで取り組んできたワールドアプリを継続するために、太陽系を探索できるスペースでアプリを段階的に拡張します。

Spacesは、Immersive Spaceと呼ばれるSwiftUIの新しいシーンタイプです。

他のシーンタイプと同様に、アプリで没入型スペースを定義し、いつでも開いて閉じることができます。

アプリ全体を1つのスペースのみで構成できますが、ウィンドウとボリュームの横に1つ以上のスペースを追加することで、既存のアプリを拡張することもできます。

あなたのアプリは一度に1つのスペースを開くことができます。

別のスペースを開く前に、まず現在のスペースを却下します。

また、他のシーンタイプと同様に、ビュー階層をシーンの本文に配置します。

SolarSystemをImmersiveSpaceに配置することで、クリッピング境界なしでレンダリングされます。

少し時間を取って、これがどれほど簡単かを指摘しましょう。

これら3つのラインだけで、私たちは太陽系の眺めを豊かで没入感のある体験にもたらしました。

詳細を掘り下げてみましょう。

スペースを開くと、このシーンを他のシーンタイプから際立たせるいくつかの特別な動作が可能になります。

複数のアプリが並んで実行されている場合、それらはすべて同じスペースに一緒に表示されるため、これを共有スペースと呼んでいます。

アプリが没入型スペースのシーンを表示すると、アプリは私たちがフルスペースと呼ぶものに入ります。

その後、あなたのアプリはユーザーに表示される唯一のものになります。

他のすべてのアプリケーションは、気を散らすことなくコンテンツを表示するためのスペースを作るために消えます。

後で、スペースを閉じると、他のアプリが再び表示されます。

没入型空間はシーンであるため、暗黙的に独自の座標系を定義します。

したがって、スペースに置くものはすべて、スペース自身の起源に相対的に配置されます。

そして、スペースの原点はユーザーの下にあり、スペースが最初に開いたときにユーザーの足の近くにあります。

だから今、あなたは基本を知っています。

先に進んで、あなたのスペースのコンテンツをどのように表示するかについて話しましょう。

ImmersiveSpaceはシーンタイプなので、ビュー階層をその中に正しく配置します。

ImmersiveSpaceは任意のSwift UIビューを取ることができ、クリッピング境界はありませんが、スペースは依然としてそのレイアウト境界内でコンテンツをレイアウトします。

スペースに配置するものはすべて、すでに慣れ親しんでいるのと同じレイアウトシステムを使用します。

しかし、あなたのスペースの起源はユーザーの足の近くにあるので、おそらくあなたのコンテンツをそこに置くだけではないでしょう。

RealityViewについて話しましょう。

SwiftUI、ARKit、RealityKitを最大限に活用したい場合は、新しいRealityViewの強力な機能と一緒にImmersiveSpaceを使用することをお勧めします。

ImmersiveSpaceとRealityViewは密接に関連しており、優れた没入型体験を構築するために必要なすべての機能を提供するために特別に設計されています。

たとえば、RealityViewには、ここに示すように、スターフィールドのロードと表示のためのアセットの非同期ロードのサポートが組み込まれています。

しかし、非同期ロードの次に、没入型スペースシーンにRealityViewを置くと、さらに多くのことが可能になります。

ARKitアンカーのRealityView内に要素を配置します。

また、アプリは手とヘッドポーズデータにアクセスできるため、スペースが開いている間は、そのデータを使用してRealityView内にエンティティを配置できます。

マークは後で何かかっこいいものを見せてくれるでしょう。

座標空間に関するメモ。

RealityViewは、コンテンツを表示するためにRealityKitを使用しています。

したがって、RealityView内にエンティティを配置するときは、座標空間の向きはSwiftUIのレイアウトシステムとは異なることに注意してください。

SwiftUIでは、y軸は下を指し、z軸はあなたを指しています。

これはウィンドウ、ボリューム、没入型スペースに適用されますが、RealityKitでは、y軸は上向きです。

RealityViewについては、取り上げるべきことがたくさんあります。

すべての詳細については、ウォッチリストに「RealityKitで空間体験を構築する」を追加してください。

では、コードを書いてみましょう。

WorldApp、または少なくともその簡略化されたバージョンを使用し、没入型太陽系を段階的に追加します。

ImmersiveSpaceを定義することから始めます。

WindowGroupと同様に、識別子、値型、またはその両方を割り当てることができます。

この場合、太陽識別子を割り当てます。

後でこの識別子を使用してスペースを開きます。

次に、太陽系ビューを宇宙に配置します。

また、アプリのシンプルな標準ウィンドウを定義しましょう。これは、アプリが起動したときに太陽系を表示するためのコントロールで表示したいと考えています。

これはワールドアプリが行うことと似ています。

そこで、WindowGroupを使用して新しい起動ウィンドウを定義し、スペースを開くことを可能にするコントロールと一緒にいくつかの情報を追加します。

そのコントロールはただのボタンです。

クリックすると、タイトルを変更してスペースを開きます。

ウィンドウを制御するために、SwiftUIはopenWindowとdis dismissWindow環境アクションを提供します。

また、Immersive Spaceでは、新しいopenImmersiveSpaceを追加し、ImmersiveSpaceアクションを却下します。

私たちは環境から2つの行動を得ます。

その後、ボタンが呼び出されたときにこれらのアクションを使用できます。

スペースを開くときは、先ほど定義した識別子を渡します。

一度に1つのスペースしか開くことができないため、disamImmersiveSpaceアクションは議論を必要としません。

このシステムは、一定の期間でスペースのインとアウトをアニメーション化します。

これらの環境アクションは非同期であるため、アニメーションの完了に反応できます。

Immersive Spaceを開くと失敗する可能性があり、openImmersiveSpaceは、呼び出しが失敗したか成功したかを結果で教えてくれます。

適切なエラー処理があることを確認してください。

最初に定義したアプリに戻ると、LaunchWindowをここに追加できます。

私たちの2つのシーンの順番に注目してください。

LaunchWindowはシーンリストの最初のものなので、SwiftUIはアプリの起動時に起動ウィンドウを表示します。

イマーシブスペースは起動時には表示されませんが、ユーザーがボタンをクリックすると表示されます。

シミュレーターでこれを実行しましょう。

アプリが起動すると、起動ウィンドウが表示されます。

そして、ボタンをクリックするだけで、太陽系が私たちのリビングルームに現れます。

だから今、私たちは標準ウィンドウと太陽系を表示するスペースで構成されるマルチシーンアプリを定義しました。

あなたはワールドアプリで使用されているモデルを見てきました。

没入型アプリを構築するとき、あなたはきっとあなたのスペースに多くの詳細を持ついくつかの3Dアセットを表示したいと思うでしょう。

アセットが完全にロードされ、アプリによってレンダリングされる準備が整うまでに時間がかかる可能性があることを覚えておいてください。

最高のユーザーエクスペリエンスのために、3Dアセットを非同期にロードする新しいModel3DとRealityView APIを活用してください。

このコードでは、モデルがまだロードされている間にテキストを表示し、何か問題が発生した場合に備えてエラーを表示します。

そして今、マークはあなたの宇宙を管理する方法と、さらに良いことに、宇宙に打ち上げる方法を教えてくれます。

マーク・マ:ありがとう、ラファ。

先ほど実証したように、わずか数行のコードでImmersive SpacesをWorldアプリに統合するのは信じられないほど簡単でした。

アプリを没入型体験に変えるには、シーンフェーズでシステムと一緒にスペースを管理し、スペースと他のシーンの収束を調整し、さまざまなスタイルで提示することも含まれます。

他のSwiftUIシーンタイプと同様に、Immersive Spaceはシステムで処理される同じシーンフェーズをサポートしています。

これはまた、あなたのスペースが常にSwiftUIのシーンフェーズの1つにあることを意味します。

スペースを開くと、アクティブフェーズに移動します。

そして、いつでも、それは非アクティブフェーズに変更される可能性があります。

たとえば、システム定義の境界やシステムアラートが表示された場合、スペースとウィンドウは一時的に非表示になり、非アクティブフェーズに移動します。

ユーザーがエクスペリエンスに再入力すると、スペースとウィンドウが表示され、シーンフェーズが再びアクティブになるように更新されます。

私たちのワールドアプリでは、非アクティブなシーンフェーズを処理するために数行の簡単なコードを追加することができます。

宇宙の状態が変化したことを示すために、地球モデルを半分のサイズに縮小しましょう。

また、コンテンツを復元するためにアクティブなフェーズを処理することを確認しましょう。

そして、スペースはハードウェアまたはソフトウェアの手段を使用していつでも却下できることを覚えておいてください。

では、シミュレーターでこれをチェックしてみましょう。

私たちはスペースを開き、アプリが非アクティブなフェーズをどのように処理するかを実演します。

たとえば、アラートが表示されたときにトリガーされる可能性があります。

アラートがポップアップすると、以前のサンプルコードの結果、スペースのコンテンツがスケールで変更されたことに注意してください。

そして、アラートを却下すると、スペースは縮小し、現在アクティブなフェーズに反応しました。

SwiftUIは、これらのトランジションの処理とアニメーション化を本当に簡単で便利にします。

スペースを管理するもう1つの素晴らしい方法は、他のウィンドウのコンテンツをスペースと統合することです。

たとえば、メインウィンドウの横にアースモデルを再配置する場合は、没入空間座標系のウィンドウの位置を知る必要がありますが、両方のオブジェクトは独自の座標系を定義します。

したがって、これを解決するために、SwiftUIはImmersive Spaceという名前の新しい座標空間を提供します。

そして、それは没入型空間の座標系を表しています。

この座標系にアクセスするには、ジオメトリリーダー内のウィンドウを3Dコンテキストにカプセル化します。

次に、transformのような座標空間を取り込み、Immersive Spaceタイプを渡す既存のAPIを使用することで、新しい座標系でproxy.transformを取得できます。

この変換を使用して、タップで地球の位置を更新します。

シミュレーターでこれを実行しましょう。

地球とメインウィンドウが見えるように、スペースを再開します。

窓を少しずらして、地球を目の前に再配置したい。

今、地球がタップされると、それは私たちが期待していた場所に配置されます。

また、座標変換を使用すると、コンテンツを正確に配置し、スペースとウィンドウの間でアセットを移動するのは簡単です。

座標変換を使用する他の時間には、SharePlayの没入型スペースが含まれます。ここでは、プライベート没入型スペースだけでなく、グループ没入型スペース全体でコンテンツの位置を管理できます。

アプリがSharePlayとグループ没入型スペースをサポートしている場合、他の参加者が参加すると、システムはスペースの原点を空間テンプレートで定義された共有場所に移動する可能性があります。

詳細については、セッション「空間SharePlayエクスペリエンスの構築」をご覧ください。

私たちのワールドアプリは現在、シーンフェーズを処理し、他のウィンドウのコンテンツを結合することができますが、スペースが提供する完全な機能をまだ使用していません。

それらをさらに素晴らしいものになるように、次にイマージョンスタイルを探ります。

イマージョンスタイルは、スペースコンテンツがどのように周囲を乗っ取るかについてのさまざまなプレゼンテーションを提供します。

混合スタイル、オンラインでのプログレッシブスタイル、またはあらゆる方向にあなたを取り巻く完全なスタイルと一緒にコンテンツを提示することができます。

これらすべてのスタイルを利用するために、アプリを更新しましょう。

アプリをもう一度開いて、没入型スペースを定義した場所に戻りましょう。

現在、この空間は、デフォルトのものである混合浸漬スタイルで太陽系を提示しています。

スタイルを変更するのは簡単で、ダイナミックでもあります。

まず、ImmersionStyleタイプの新しい状態変数を追加し、スペースで開始したいデフォルト値を割り当てましょう。

ここでミックススタイルを保ちましょう。

次に、イマージョンスタイルシーン修飾子を使用し、スペースがサポートするスタイルのリストを定義します。

現在のスタイルへの参照を持つために、状態変数をバインディングとして渡します。

太陽系にバインディングを渡すと、現在のスタイルを読み取り、マップスタイルのいずれかに移行するように制御することもできます。

このサンプルでは、太陽系をスケールアップするにつれて、別のスタイルに進むように、倍率ジェスチャーで移行します。

これまでのところ、私たちはシミュレーターでWorldアプリを実行して、没入型スペースを持ち込むのがいかに簡単かを示しています。

しかし、これらのスタイルが私たちの環境とどのように機能するかの本当に素晴らしい感覚を得るために、デバイスで私たちの経験を実行しましょう。

そして後で、デバイス上の体験を本当に強化するさらに多くのカスタマイズを紹介します。

デフォルトのスタイルでスペースを開くと、混合浸漬スタイルになります。

このスタイルは素晴らしいですが、コンテンツにもう少し没頭して、いくつかの星を見たいと思うかもしれません。

そのため、倍率のジェスチャーを実行できます。

そして、コンテンツが大きくなるにつれて、最終的にスペースはプログレッシブスタイルに移行します。

このスタイルは、パススルーと完全に没入型体験の架け橋です。

目の前にあるポータル内の没入型スペースのコンテンツを、周囲と一緒に見ることができます。

このスタイルはかなり没入感を感じますが、あなたを取り巻くものに気づくこともできます。

これはまた、近くの人々とチャットしたり、快適に座る場所を知り、周囲と交流したりできることを意味します。

そして、快適になったら、デジタルクラウンを回すことで、スタイルの没入感を高めます。

それは本当にかっこよくない？

今、あなたは宇宙飛行士のように銀河に浮かんでいます。

また、周囲をもっと見たい場合は、デジタルクラウンを元に戻して没入感を減らしてください。

これにより、コンテンツがプログレッシブスタイル内でどれほど没入型になるかをすばやく簡単に制御できます。

しかし、おそらくあなたはいつも完全に没頭するのが好きです。

これは、あなたを取り巻く、または即座に全く別の世界にあなたを運ぶ経験に最適です。

これまでのところ、ジェスチャーに基づいてさまざまなスタイルに移行するのがいかに簡単かを学びました。

完全な没入感に行くことも例外ではなく、スタイルバインディングを更新するために地球を再びスケールアップすると、それを経験します。

異なるスタイル間の移行がどれほど簡単で無意味だったかに注目してください。

今、宇宙は完全に没入型になりました。

そして、SwiftUIでは、数行のコードしかかかりませんでした。

そして、デジタルクラウンを押すことで、体験を離れる準備ができたらいつでもパススルーに戻ることができます。

シーンの位相の変化に反応し、スタイルを制御することで、スペースを管理するさまざまな方法を実演しました。

それでは、私たちのスペースを次のレベルに引き上げるために、いくつかの最終的な機能強化を追加しましょう。

デバイスの空間コンピューティング機能により、スペースを簡単に強化して、さらにエキサイティングに感じることができます。

それでは、スペースに直接起動したり、周囲に効果を追加したり、仮想の手など、いくつかのオプションを検討しましょう。

これまでのところ、私たちのアプリでは、ボタンをクリックするだけでスペースを開くことができます。

しかし、完全に没入型のゲームを持っている場合のように、アプリが起動したときに没入型体験を開始したい場合はどうなりますか?

没入型スペースに直接起動するには、アプリのシーンマニフェストを設定する必要があります。

ImmersiveSpaceアプリケーションの役割とイマージョンスタイルを設定するだけです。

スペースのコンテンツを通常どおりに添付すると、すぐに開きます。

ユーザーがスペースを閉じることを選択した場合は、アプリをウィンドウに戻すこともできます。

次に、周囲の効果の設定により、パススルーを暗くして、スペースのコンテンツにさらに焦点を合わせることができます。

スペースがプログレッシブスタイルに移行するときは、周囲を暗くしてもらいたいです。

好ましいSurroundingEffects修飾子を暗く設定したので、太陽系が現れると、周囲は自動的に暗くなります。

upperLimbVisibility修飾子を使用すると、パススルーが利用できないため、完全に没入感のあるスペースで手を隠すことができます。

私たちの世界の経験のために、私たちは単に私たちのスペースを開くときに私たちの好みを偽に設定します。

そして、そのようにして、上部のLimbVisibility設定を変更することができます。

完全な出現スタイルで手を隠すことは、代わりに仮想の手を示すことができることを意味し、ワールドアプリでいくつかのスペースグローブを表示します。

SpaceGlovesという新しいビューを作成することから始めましょう。

次に、RealityViewを追加して、手袋をスペースでレンダリングできるようにします。

次に、RealityViewにルートエンティティを作成し、エンティティを追加してレンダリングできるようにします。

次に、アセットをエンティティにロードし、ルートの子として追加します。

エンティティを正しく配置するには、ARKitとそのハンドトラッキングAPIを使用する必要があり、ハンドトラッキングシステムも開始する必要があります。

私たちの次のステップは、資産が私たちの手に正しく固定されていることを確認することです。

ハンドトラッキングアンカーの更新を確認する必要があります。

そして次に、手のキラリティを確認します。

次に、ハンドアセットの変換がアンカーと同じであることを確認します。

この例では、資産がARKitが提供するものと同じ共同名であることを確認しました。

このようにして、アンカースケルトンジョイント名を正しくマッピングすることができ、グローブエンティティは自動的に私たちのために固定されます。

それでは、スペースが定義されている場所に戻り、SpaceGlovesビューを含めるようにしましょう。

バーチャルハンドに必要なのはそれだけです。

ARKitのカスタマイズと詳細な詳細については、「空間体験のためにARKitアプリを進化させる」をチェックしてください。

では、これらのカスタマイズをデバイスで試してみましょう。

世界体験が再び始まり、スペースはデフォルトのイマージョンスタイルで再び開きます。

地球上で拡大ジェスチャーを使用することで、アプリはプログレッシブスタイルに移行します。

スペースが開くと、コードは周囲を暗く変更します。

Surrounding Effects APIを利用してパススルーを暗くすることで、さらに没頭した気分になりました。

応募は簡単で、経験に集中するのに最適な方法です。

これは今かなり没入型ですが、次のカスタマイズでさらに一歩進めることができます。

以前のコードが示したように、完全な没入に移行すると、手は消え、ハンドトラッキングのおかげで手がある場所に仮想スペースグローブが現れます。

ARKitでRealityViewを使用し、ハンドトラッキングを有効にすることで、仮想宇宙飛行士のように宇宙に打ち上げることができ、本当に素晴らしい気分です。

いくつかの機能強化とカスタマイズだけで、Worldアプリを共有スペースを超えた完全に没入感のある体験に変えることができました。

そして今、新しいImmersive Space APIを使用して、体験を簡単に作成し、さまざまなスタイルで披露し、可能なカスタマイズで創造的になるのはあなた次第です。

これは、周囲を変革し、新しい没入型体験を作成するために必要なすべてのツールを提供する、強力で使いやすいAPIです。

ご参加いただきありがとうございます。

♪