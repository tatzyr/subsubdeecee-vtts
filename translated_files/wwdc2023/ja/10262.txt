10262

♪まろやかなインストゥルメンタルヒップホップ♪

♪

こんにちは、私はWebKit Developer ExperienceチームのエンジニアであるPatrickです。今日は、SafariでWeb開発者が利用できる機能のツアーにあなたを連れて行くことに興奮しています。

Safariには、Web開発者やデザイナーが、Webページ、Webアプリ、JavaScriptとWebビューを備えたアプリ、拡張機能などを検査するための豊富なツールセットにアクセスできる機能が含まれています。

また、これらのツールは、Macとペアリングすると、iOS、iPadOS、tvOS、およびxrOS間でシームレスに機能します。

今日は、macOSでWebページを検査するのに役立つツールを簡単に見ることから始めて、Safariで利用可能な開発者ツールの幅をカバーします。

次に、Safari、iOS、iPadOS、xrOSシミュレータでレスポンシブレイアウトをプレビューする方法を見ていきます。

次に、Macを超えて、iPhoneやxrOSを実行しているデバイスなどの他のデバイスで実行されているコンテンツをMacでデバッグする方法を見ていきます。

次に、WebDriverを使用して、クロスブラウザとクロスプラットフォームの方法で自動テストを実行する方法を見ていきます。

最後に、再設計された機能フラグ設定を使用して、将来のWebプラットフォームの機能を探索する方法を見ていきます。

しかし、これらのトピックを掘り下げる前に、Safariで開発者機能を使用したことがない場合は、それらを有効にする必要があります。

Safariの設定で、ウェブ開発者向けの機能を表示するオプションを見つけることができます。

そこに行くには、メニューバーからSafariを選択し、[設定]を選択します。

[設定] ウィンドウで、[詳細設定] タブをクリックします。

ここでは、ウェブ開発者向けの機能を表示するチェックボックスがあります。

設定を有効にします。

ウェブ開発者向けの機能を有効にしたので、Safariのツールを使用して開いているウェブページを検査する方法を簡単に見てみましょう。

これは私が取り組んできたウェブページで、背景色をちょうど良い色にしようとしていました。

そして、本当にすべてをまとめるのは、宇宙飛行士のヘルメットから色をつかむことだと思います。

Webインスペクタを使用して、このページの背景グラデーションの一部となる色を選択する方法を見てみましょう。

Web Inspectorをすばやく開いて、作業中のページを検査するには、2つの方法があります。

1つ目は、Webコンテンツの設計と開発に役立つ主要なツールを見つけやすくするために、今年考え直した開発メニューです。

メニューには、Webインスペクタをタブまたはタスクに直接開くことができるいくつかの項目があります。

特定のタブにジャンプするのではなく、Webインスペクタを開きたかったので、ここで[Webインスペクタを表示]を選択します。

しかし、私があなたに見せたいWebインスペクタを開くための別の便利な方法があります。

Web ページのどこでも、Control キーを押しながらクリックしてコンテキスト メニューを表示し、Inspect Element を選択します。Inspect Element は Web インスペクタを表示するだけでなく、要素を選択し、詳細サイドバーにスタイルやその他の情報を表示します。

Inspect Elementアイテムの使用は、Webインスペクタが表示された後でも機能します。

同じ方法で別の要素を選択するか、要素選択ツールを使用して、セレクタ、マージン、形状アウトライン、アクセシビリティロールなどのレイアウト情報など、ホバリングする各要素に関する情報を表示できます。

要素選択モードでクリックすると、その要素はWebインスペクタで選択されます。

しかし、Webインスペクタを開いたので、ページの背景グラデーションを見てみたい。

私は本当に彼らのバイザーからいくつかの色をサンプリングすることによって、宇宙飛行士をもっと家に作りたいです。

グラデーションを編集するには、スタイルサイドバーのグラデーションの横にあるプレビュースウォッチをクリックします。

編集したいグラデーションの部分を選択し、カラーピッカーを使用して、宇宙飛行士のバイザーなど、画面上のどこかから色をつかみます。

うーん、それは私の好みには少し明るすぎます。

これはあまり良い考えではなかったのかもしれません。

以前はもっと良く見えたと思います。

Command-Zで変更を取り消して、今のところ同じ色にします。

もちろん、これはWebインスペクタがWebページを検査するのに役立つ多くの方法の1つにすぎません。

Webインスペクタで利用可能なツールについて詳しく知りたい場合は、WWDC21の「Webインスペクタの新機能」と「Webインスペクタの改善を発見する」を必ずチェックしてください。

次に、ページのユーザーのディスプレイに適応する能力をテストすることで、Webページのデザインを洗練することを目的とした別のツールを見てみましょう。

Safariには、このタスク用のレスポンシブデザインモードと呼ばれるツールがあり、レスポンシブデザインモードの入力項目を使用して開発メニューからアクセスできます。

以前にレスポンシブデザインモードを使用したことがある場合は、任意の画面サイズでコンテンツのレイアウトの応答性に集中できるように調整を行ったことに気付いたかもしれません。

ウィンドウや画面よりも大きなビューポートサイズを試すことができます。

ビューポートの側面にあるハンドルをドラッグすると、ビューポートは拡大縮小してすべてのページを表示し続け、テキストや画像などの要素を新しいビューポートに合わせてリフローします。

ビューポートの上に独自の幅と高さを入力して、特定のサイズをターゲットにすることもできます。

幅と高さの右側には、ビューポートがレンダリングされている実際のサイズの割合であるスケールファクターが表示されます。

ここでは、ビューポートの現在の高さが800ピクセルであるため、スケール係数は100%ではありませんが、ウィンドウはビューポート全体を表示するのに十分な高さではなかったため、Safariはビューポートの表示をフルサイズの78%に縮小しました。

レスポンシブデザインモードでは、ピクセル比を変更することもできます。これにより、さまざまなディスプレイのピクセル比に合わせた画像アセットやその他のスタイリングを提供することで、応答性の余分な次元をテストできます。

画像タグのソースセット、画像がどこでも使用できるCSS画像セット機能、解像度メディアクエリなど、Web上のディスプレイのピクセル比に応答する方法はいくつかあり、ディスプレイのピクセル比に応じて、ボーダーサイズなど、ページのスタイルのあらゆる側面を微調整できます。

しかし、時には、macOSだけでなく、iOS、iPadOS、xrOSでもページの応答性をテストしようとしているかもしれません。

今年新しく、Safariからシミュレーターにすばやく飛び込む機能を導入しました。

シミュレータは、物理的なデバイスを必要とせずに、iOS、iPadOS、およびxrOSでWebコンテンツをテストするのに最適な方法です。

iOSとiPadOSのシミュレータはXcodeに含まれており、それらのプラットフォームにはSafariが含まれています。

XcodeはMac App Storeで無料でダウンロードできます。

そして、Xcodeを一度実行して設定を完了すると、次回Safariを起動するとシミュレータが利用可能になります。

「シミュレータで開く」をクリックすると、インストールされているシミュレータのリストが表示され、現在実行中のシミュレータが簡単にアクセスできるように一番上に表示されます。

Xcodeがインストールされていない場合、または他のデバイス用のシミュレータを追加したい場合は、メニューのリンクをたどってドキュメントを表示して、始めるのに役立ちます。

シミュレーターで現在のページを開きましょう。

このシミュレータはすでに実行されていましたが、シミュレータがまだ実行されていない場合は、起動します。

注意すべき重要なことは、シミュレータとmacOSのSafariのページレイアウトの違いです。

ほぼ同じ幅でも、iOSのSafariは、より多くの画面の不動産が利用可能であるかのようにページをレイアウトすることに注意してください。

シミュレータの他の優れた側面の1つは、スムーズなスクロールやダブルタップでズームなど、ユーザーがiOSで動作することを期待する動作をテストして、iPhoneを持っていなくても優れたユーザーエクスペリエンスを確保できることです。

また、シミュレータでWebページを開いたら、シミュレータを見つけて、検査するシミュレータでWebページを選択することで、開発メニューからWebインスペクタを使用して検査することもできます。

その後、Webインスペクタが独自のウィンドウで開き、シミュレータから選択したページを検査します。

iOSとiPadOSに加えて、xrOSシミュレータを利用して、そのプラットフォームでウェブコンテンツをテストできます。

シミュレータがインストールされていない場合は、[シミュレータで開く]メニューから[シミュレーターを追加]を選択して、追加方法を確認してください。

シミュレータをインストールしたら、MacのSafariを使用してウェブコンテンツを検査するなど、iOSシミュレータと同じ方法で使用できます。

Safariの開発メニューでシミュレータを見つけ、検査したいコンテンツを選択します。

実際、macOSのSafariからシミュレータを検査できるだけでなく、MacのSafariからiOS、iPadOS、tvOS、xrOSデバイスを検査することもできます。

シミュレータとは異なり、Safariやその他のアプリで開いているWebページのリストを提供することをデバイスに選択するために、Macを使用して検査する前に、デバイス上のコンテンツの検査を有効にする必要があります。

iOSとiPadOSの場合、設定アプリからこれを行うことができます。

下にスクロールしてSafariを選択し、一番下までスクロールして[詳細設定]を選択します。

次に、Webインスペクタを切り替えます。

最後に、ケーブルを使ってデバイスをMacに接続します。

ここでは、Safariウィンドウやホーム画面のウェブアプリなど、iPadでいくつかのウェブコンテンツを開きました。

では、このコンテンツを調べるためにMacに戻りましょう。

Macの開発メニューから、以前に使用したシミュレータと同じ場所に接続したデバイスのエントリが表示されます。

また、シミュレータと同様に、Safariで開いたWebページ、ホーム画面のWebアプリ、さらにはサービスワーカーなど、検査可能なコンテンツが表示されます。

先ほどと同様に、ホーム画面のウェブアプリなど、メニューから検査可能なコンテンツを選択できます。

そして、以前と同様に、Webインスペクタが表示され、Macからデバイス上のコンテンツを検査します。

しかし、Macからデバイスを検査するために常にケーブルを使用する必要がなければ、それは素晴らしいことではないでしょうか?

Macに戻って、ネットワーク経由でデバイスに接続する方法を見てみましょう。 もう一度見てみましょう。

開発メニューに戻ると、「ネットワーク経由で接続」というタイトルの項目があります。

一度選択すると、Macとデバイスの両方が同じネットワーク上にある限り、ワイヤを必要とせずにデバイスを接続できるようになりました。

また、デバイスでその設定を有効にすると、デバイスのプラグを抜いてワイヤレスで検査できるようになりました。

今年は、macOS Sonomaを実行しているMacからxrOSデバイスを検査することもできます。

しかし、始めるのはiOSやiPadOSとは少し異なります。

Macへの有線接続なしでデバイスを検査できるように、ネットワークを介してこのプラットフォームとのペアリングをサポートします。

同僚のデバイスとペアリングしましょう。

開始するには、[設定]を開き、[アプリ]、[Safari]の順に選択します。

一番下までスクロールして[詳細設定]を選択し、Webインスペクタを有効にします。

次に、デバイスをMacとペアリングする必要があります。

Macとデバイスの両方が同じネットワークに接続されていることを確認する必要があります。

次に、設定アプリから「一般」を選択し、「リモートデバイス」を選択します。

リモートデバイスの画面が表示されている間、あなたのデバイスはmacOSからペアリングできます。

Macで、Safariで開発メニューを開き、デバイスのサブメニューから「開発に使用」を選択します。

デバイスでは、6桁のペアリングコードが表示され、Macではペアリングコードを入力するウィンドウが表示されます。

Macにコードを入力してください。

コードを入力すると、ペアリングは自動的に完了し、Macはデバイスのリモートデバイスリストに表示されます。

デバイスがペアリングされたら、Safariを開き、iOSデバイスと同じようにMacでウェブページやその他のコンテンツを検査できます。

要素選択モードでも機能します。

macOSで以前と同じように要素選択モードに入り、Webページで検査したいノードを見て、ピンチして選択します。

xrOS用のWebコンテンツの設計と開発について詳しく知りたい場合は、「Meet Safari for spatial computing」をチェックしてください。

ウェブコンテンツは、Safariやウェブアプリを超えて広がっています。

ウェブページとJavaScriptは、Appleのプラットフォーム全体で100万以上のアプリで使用されており、今年の新機能は、そのコンテンツをアプリのリリースバージョンで検査可能にする機能です。

アプリは、ユーザーインターフェイスの一部にWebコンテンツを使用するか、JavaScriptを使用してアプリの一部を制御できます。

このような場合、macOS 13.3以降、iOSとiPadOS 16.4以降、およびxrOSで利用可能なAPIがあり、アプリのコンテンツの検査を可能にします。

このAPIは、WKWebViewとJSContextの両方で利用できます。

検査可能にするときに、各JSContextに名前を指定することをお勧めします。これは、複数のJSContextを区別できるように、Safariの開発メニューに表示されます。

また、アプリケーションがコンテンツの検査を有効にすると、デバイスから他のWebコンテンツを検査するのと同じように、Safariの開発メニューから検査できます。

デバイス間でコンテンツを検査してデバッグできるようになったので、WebDriverでコンテンツが期待どおりに動作し続けることを確認する方法について話しましょう。

ウェブが進化するにつれて、Webページが期待どおりに動作することを確認するために、Webページを継続的にテストすることが重要です。

WebDriverは、ブラウザ固有のコードを必要とせずに、プラットフォーム間ですべての主要なブラウザでサポートされているWebコンテンツのテストを自動化するためのクロスブラウザAPIです。

HTTPリクエストを受け入れるローカルWebサーバーをホストしているため、さまざまなテストセットアップから自動化コマンドを受け入れることができ、要素の検索、要素のアクセシビリティロールの取得、JavaScriptの実行、さらにはスクリーンショットの取得など、Webページに対して自動テストを実行するために使用できる多数のコマンドを提供します。

ほとんどの場合、サードパーティのライブラリを使用してWebDriverと対話します。

そのような人気のあるライブラリの1つは、Python、Java、PHP、JavaScriptなどでAPIを提供するSeleniumです。

以下は、SeleniumでSafariを自動化するために使用できるPythonスクリプトの例です。

Safariのデフォルトオプションを持つドライバーが作成されます。

次に、webkit.orgのWeb Inspectorのドキュメントに移動します。

そこに着いたら、検索フィールドを見つけて「デバイス」と入力します。

最後に、デバイス設定のリンクがまだあると主張します。

そして、すべて終わったら、Safariが開いたウィンドウをクリーンアップできるように、自動化セッションを終了します。

このスクリプトを実行しましょう。

オレンジ色のタイトルバーで新しいウィンドウが作成され、このウィンドウが自動化されていることを示します。

テストは、ユーザーと同じようにタイピングのようなインタラクションを実行することがわかります。

信じられないかもしれませんが、それは何が起こっているのかを見やすくするために減速されました。

全速力で、テストは始まるとすぐに終わります。

そして、これはWebDriverとSafariで可能なことの味にすぎません。

テストは、iOSとiPadOSのシミュレータだけでなく、物理的なiPhoneやiPadでも実行できます。

今日利用可能なものを探索したので、ウェブプラットフォームの未来を探求する方法を見てみましょう。 ウェブプラットフォームの未来を探求する方法を見てみましょう。

ウェブは絶えず進化しています。

潜在的な将来のツールや技術を見るのはエキサイティングであり、ウェブブラウザで出荷される前に実験を始めるのはさらにエキサイティングです。

Safariでは、機能フラグを選択して開発メニューから開くことができる新しい機能フラグ設定を使用して、これらの機能を有効にすることができます。

機能フラグは、以前はSafariで実験的機能と呼ばれていたものです。

機能フラグは、アニメーション、CSS、JavaScript、メディアなどのトピックごとに整理され、機能を簡単に見つけることができます。

そして、機能も検索可能です。

たとえば、色を検索して、関連するすべての機能を見つけることができます。

機能を有効にするのも速いです。

チェックボックスにチェックを入れるだけで、準備完了です。

また、CSS Masonry Layoutが有効になっており、デフォルト以外の状態を示すために太字のフォントで表示されているなど、有効な機能を一目ですぐに見ることができます。

Masonry Layoutなどの今後の機能や、今年Safariで出荷されるその他の新しいCSS機能の詳細については、「CSSの新機能」をご覧ください。

また、ウィンドウの右側に各機能のステータスがあることに気付いたかもしれません。

各機能は4つのステータスのいずれかに分類されます。

最初のステータスであるStableは、最近Safariで出荷を開始し、デフォルトでオンになっている機能を表します。

これらの機能は、機能が問題を引き起こしているかどうかを判断したり、すべてのブラウザでまだ出荷されていない機能の機能の欠如をサイトが適切に処理していることを確認するために切り替えることができます。

安定した機能は、最終的に切り替え可能な機能のリストから削除されます。

次に、テスト可能な機能は、プライムタイムの準備ができていないが、早期フィードバックの準備ができているか、実装の過程にある機能です。

それらは完全に完全ではないかもしれませんが、テスト可能な機能は、仕様がWeb開発者のために機能することを確認するために、機能が基づいている標準を知らせるのに役立ちます。

これらの機能はデフォルトで無効になっています。

最後の共通機能のステータスはプレビューです。

このステータスは、開発者がテストを開始する準備ができている機能のためのものです。

これらの機能はテスト可能な機能よりも完全ですが、まだバグがあるかもしれません。

これらの機能はSafariではデフォルトで無効になっていますが、Safari Technology Previewではデフォルトで有効になっています。

Safari Technology Previewは約2週間ごとにリリースされ、当社のプラットフォームに含まれているSafariのバージョンに表示される前に、Webプラットフォーム機能の最新のアップデートへの早期アクセスを提供します。

開発者機能の機能ステータスもあります。

これらは、開発用のWebKitの動作を調整したり、テスト用に非推奨のAPIを再度有効にしたりする設定です。

各機能フラグのデフォルト設定は、顧客が一般的にあなたのコンテンツをどのように体験するかであることを覚えておいてください。

また、Safariを更新すると、機能フラグが自動的にデフォルトの状態にリセットされることを覚えておくことも重要です。

そして、あなたのような開発者を助けるために、Safariで利用可能なツールと機能のツアーの終わりに来ます。

そして、私たちは表面を磨いただけです。

今日話したすべてのことに加えて、Safariには、今年のSafariのこれらすべての機能や機能強化など、コンテンツのデバッグに役立つものがあります。

また、利用可能なツールとその開始方法をこれまで以上に簡単に発見できるように、Web開発者向けのSafari機能の新しいドキュメントを作成しました。

さらに、Webkit.orgでWebインスペクタの詳細なドキュメントを見つけて、Webインスペクタの機能の幅と深さを解凍するのに役立ちます。

私たちもあなたから話を聞きたいです。

バグに遭遇した場合、またはWeb開発者向けの機能を改善する方法について提案がある場合は、フィードバックアシスタントにフィードバックを送信し、フィードバックの領域としてSafariを選択し、[詳細]で[開発者ツール]を選択してください。

私たちのプラットフォーム全体でコンテンツの開発、改良、テストを支援するために使用できるSafariの機能のツアーに参加して、今日ここで私たちの時間を楽しんだことを願っています。

そして、あなたが何を作るかを見るのが待ちきれません。

ありがとうございます。

♪