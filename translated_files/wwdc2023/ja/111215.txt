111215

♪まろやかなインストゥルメンタルヒップホップ♪

♪

グレース・ケンドール:皆さん、こんにちは。「空間コンピューティングのためのUIKitに会いましょう!」へようこそ。

私の名前はグレース・ケンドールで、UIKitチームのエンジニアです。

同僚のアンドリューと私は、既存のUIKitアプリをまったく新しい次元に持ち込むことについて、このビデオであなたとチャットすることにとても興奮しています。

新しいデバイスは、空間体験のための素晴らしいプラットフォームを備えており、たくさんの新しい3D機能を導入しています。

そして何よりも、それはあなたがすでに知っていて、それを行うのが好きなUIフレームワークを使用しています。

このビデオは、物事のUIKitの側面に完全に焦点を当てています。

プラットフォーム上のSwiftUIの詳細については、「空間コンピューティングのためのSwiftUIに会う」と「空間コンピューティングのためのウィンドウ付きアプリを昇格する」をチェックしてください。

このビデオでは、新しいプラットフォーム用のアプリを構築する方法と、その過程で実行する手順について説明します。

次に、他のAppleプラットフォームとユニークで異なる特性のいくつかと、コードでそれらを処理する方法について説明します。

その後、UIKitに導入された新しいAPIでアプリを磨きます。

そして最後に、UIKitに加えてSwiftUIを使用して、新しい3D機能を追加することを検討します。

では、始めましょう!

これは、iOS用に書かれたデモピクセルアートアニメーションアプリで、すべてUIKitを使用しています。

私の親友の何人かはそれに芸術を貢献しました。

iPadでの見た目と感触は素晴らしく、多くのシステムコンポーネント、ダイナミックなアニメーションを使用し、Apple Pencilを統合しています。

空間コンピューティングの準備をしましょう。

最初にする必要があるのは、Xcodeプロジェクトの[一般]タブに移動し、新しい実行先を追加することです。

さて、ここアセットカタログで、新しいアプリアイコンを追加できます。

それは、このプラットフォームのアイコンが特別だからです。

それらは互いに重ね合わせた3つの画像で、誰かがあなたのアプリのアイコンを見ると動的に反応します。

私たちのチームメイトの一人であるジェシカは、非常に才能のあるアーティストであり、これに備えてアプリの新しいアイコンをモックアップしたので、私は今これらのファイルを追加することができます。

次に、新しいデバイスシミュレータをターゲットとして選択し、ビルドします。

さて、いくつかのビルドエラーがあります。

iPadアプリに使用されていたAPIのいくつかは、このプラットフォームでは利用できないようです。

理由について話しましょう。

これは、他のAppleプラットフォームとは異なる、まったく新しい機能と特徴を備えたまったく新しいプラットフォームです。

だから、アプリを持ち込むときに知っておくべきことがいくつかあります。

アプリを初めて持ち込むとき、調査すべき2つの一般的な領域は、以前のiOSリリースで廃止されたAPIと、このプラットフォームにうまく翻訳されていないAPIです。

このデバイスは、iOS 14より前に廃止されたAPIをサポートしていません。

この真新しいプラットフォームでは、廃止されたAPIから移行し、共有コードベースを更新して最新かつ最高のものを採用する絶好の機会です。

このプラットフォームに翻訳しないAPIのコレクションもあります。 

例えば、UIDeviceOrientation。

このAPIは、デバイスが複数の向きで使用できることを前提としており、ここでは適用されません。

UIScreenは別の例です。

このデバイスでは、ハードウェア画面の単一の表現の前提は保持されません。

また、タブバーのデザインは大きく異なり、リーディングからトレーリングまでレイアウトされていないため、リーディングアクセサリービューとトレーリングアクセサリービューは利用できません。

これらは、適用されないために使用不可とマークされたAPIの3つの例にすぎませんが、他にもあります。

詳細については、ドキュメントを確認してください。

今からコードに戻って、何が問題だったのかを調査しましょう。

ここでエラーを確認しましょう。

EditorViewController拡張機能にはUIPencilInteractionがあります。

このデバイスはApple Pencilをサポートしていないため、このAPIはプラットフォームでは利用できません。

このコードを簡単に条件付けしてコンパイルすることができます。

先に進んで、もう一度構築して実行してみましょう。

OK！私たちは稼働しているように見えます! 

これは本当に良さそうで、共有スペースでアプリが実行されているのを見るのはエキサイティングです。

しかし、私はすでに改善できると思ういくつかのことに気づいています。

今すぐアプリを通してツアーに参加して、すべてをチェックして、磨くものを見つけましょう。

シミュレータでは、マウスでクリックすると、誰かがそのポイントを見て指を一緒に叩くのをシミュレートします。

私が最初に気づいたのは、アプリの美しいガラスの背景です。

そして、すべてのアートを見ると、アプリを生き生きとインタラクティブに感じさせる本当に素敵なホバービジュアルがいくつかあります。

検索バーも新しい外観で、くぼんだ外観です。

私はまださまざまな芸術作品を開き、心ゆくまでピクセル化することができます。

さて、私が改善できると思うことの1つは、タイトルの黒いテキストとアートの字幕の灰色のテキストです。

黒いテキストはiPadの白い背景で本当に素敵に見えましたが、ガラスの上でどのように見えるかは好きではありません。

もう少しポップできると思います。

そして、私は検索バーの外観と次元が本当に好きです。

タイトルのテキストフィールドにもそれが欲しいと思います。

セマンティックカラーは新しいものではありませんが、このプラットフォームにとって特に価値があります。

アプリの外観がプラットフォーム、外観、アクセシビリティの設定に適応するように、セマンティックカラー、フォント、マテリアルを使用することが重要です。

UIColor.labelのような多くのものは、すべてがピクセル完璧に見えるように新しい値を持っています。

セマンティックカラーはプラットフォームに適応するので、RGB値で自分で色を定義する代わりに、アプリが実行されているプラットフォームに関係なく、正しい外観をもたらすシステムが提供する色を使用してください。

たとえば、システムシアンは、iOS、macOS、watchOSでわずかに異なる青色です。

iPadでは、これには明るい外観と暗い外観の間に適応するという追加の利点があります。

そして、このプラットフォームでは、ガラスの上に置くと、systemBackgroundColorはデフォルトで鮮やかです。

同様に、静的なフォントサイズを設定する代わりに、HeadlineやBodyなどのセマンティックフォントスタイルを使用すると、より読みやすくなります。

それはまた、アクセシビリティのために行うべき正しいことです。

セマンティックフォントサイズは、読みやすさを確保するためにダイナミックタイプでスケーリングします。

ここでは、TextFieldテキストと字幕ラベルの色は、RGBで定義されたUIColorsを使用しています。

それらを使用する代わりに、ここでプライマリラベルとセカンダリラベルセマンティックカラーを使用してください。これにより、iPadで見栄えを良くしながら、このプラットフォームによりよく適応できます。

さらに、セマンティックカラーを使用するすべてのUILabelsは、デフォルトで鮮やかになります。

テキストフィールドの境界線スタイルをroundedRectに設定することもできます。

これにより、このビューにくぼんだ外観が追加されます。

そして、構築して実行した後...

...私はこれがずっと好きです!

ラベルは読みやすく、テキストフィールドを使用してアートのタイトルを編集できることは明らかです。

次に、資料について話しましょう。

材料はこのプラットフォームの大きな礎石です。

彼らはあなたのアプリを本当に美しく見せ、周囲の一部のように感じるのに役立ちます。

彼らはまた、どんな文脈でも読みやすさを保証します。

素材は、照明条件とその背後にある物体の色に基づいてコントラストとカラーバランスを調整します。

このため、このプラットフォームでは暗い外観と明るい外観の区別はありません。

すべての組み込みコントロールとコンテナは、デフォルトで鮮やかな素材を使用しており、アプリが素晴らしく見えるようにします。

今、アプリの背景として機能しているガラスは本当に素晴らしく見えます。

これは、すべてのUINavigationControllerとUISplitViewControllerにデフォルトで提供されます。

そして、これは周囲の詳細が出血することを可能にします。

UIViewControllerの新しいpreferredContainer BackgroundStyleプロパティをオーバーライドして、.automatic、.glass、または.hiddenを返すこともできます。

次に、アプリ内のいくつかのビューにカーソルを合わせると、かすかなハイライトが表示されます。

これは、アプリを反応させるのに本当に役立ちます。

コントロールやリストなどのシステムコンポーネントを使用すると、デフォルトでこれらのホバー効果、素材、活気などを得ることができます。

ホバー効果はインタラクティブ性を示します。

ビューにホバー効果を追加すると、ターゲットになりやすくなります。

このプラットフォームの重要な点の1つは、誰かが探している場所がアプリのプロセスに配信されないことです。

UIKitには、ホバーエフェクトを追加、カスタマイズ、または無効にするためのまったく新しいAPIがあります。

UIViewには新しいプロパティHoverStyleがあります。

多くのインタラクティブコンポーネントには、コントロールなど、デフォルトでホバー効果があります。

HoverStyleプロパティを設定し、ハイライトまたはリフトのいずれかの効果を提供することで、ビューのホバースタイルをカスタマイズできます。

また、ホバー効果を削除したい場合は、このプロパティをnilに設定できます。

さらに進むために、新しいUIShape APIを使用して、ホバー効果の形状を提供できます。

私はすでにコレクションビューセルにホバー形状を持っているのが好きですが、角が丸みを帯びていたらいいのにと思います。

代わりに丸みを帯びた長方形をホバー形状として使用するには、セルにhoverStyleプロパティを設定し、丸みを帯びた長方形を渡す必要があります。

そして、それは四角い角を持つこの長方形からセルのホバー形状を取ります...

...この丸みを帯びた直腸に。

これはテキストフィールドの丸みを帯びた角と背景で本当に素敵に見えると思います。

さて、各コレクションビューセルを見ると、ホバー形状が丸みを帯びます。

最後に見たいものが1つあります。それは入力です。

このプラットフォームは、コンテンツと対話するためのまったく新しい入力システムを導入しています。

要素を見て、指をつまんで離すのは、TapGestureに相当します。

つまみ、手を動かし、解放はPanGestureです。

アプリに十分に近い場合は、手を差し伸べて触れることもできます。

トラックパッドをペアリングすると、それを使用してシステムと対話することもできます。

また、Appleのアクセシビリティ技術はデバイスでも利用できます。

VoiceOverとスイッチコントロールは、あなたのアプリをすべての人にもたらします。

システムジェスチャーリコグナイザは、トラックパッドを含むすべての入力方法で動作します。

しかし、各手は1つの異なるタッチしか生成できないため、このプラットフォームには最大2つの同時入力があることに注意することが重要です。

実際、iPadアプリには、このカスタムジェスチャーがあり、4本指のスワイプを使用して既存のアートをすべて削除し、新しく開始しました。

ジェスチャーを維持したいので、コンパイルしません。

代わりに、このコードを変更してユーザーインターフェイスのイディオムをチェックすることができ、それが現実であれば、必要なタッチの数を2つに設定することができます。

アプリを磨くためにこれらすべての変更を加えた後、今、私はこのサンプルアプリを次のレベルに引き上げる準備ができていると思います。

同僚のアンドリューに渡して、もっと話します。

アンドリュー・フィンケ:ありがとう、グレース!

こんにちは！私はアンドリューで、UIKitチームのエンジニアです。

UIKitアプリを2D境界から3次元にまとめる時が来ました。

グレースのアップデートで、サンプルアプリは良さそうです!

そして、既存のUIKitアプリと同様に、新しい空間APIでさらに進めることができます。

既存のアプリを更新して、素晴らしい空間体験を生み出す3つの簡単な方法について話します。

まず、UIKitプレゼンテーションには、ビューコントローラーのトランジションに深みを加えるエキサイティングな新しい空間スタイルがあります。

第二に、これまでになかった場所にコンテンツを持ち込むことができる新しいAPIがあります...

現場の外!

これらは装飾品と呼ばれています。

最後に、RealityKitのコンテンツをアプリに直接追加する強力な新しい方法があります。

これらのそれぞれがサンプルアプリを次のレベルに引き上げる方法を見てみましょう。

あなたが知っていて愛しているUIKitのプレゼンテーションは、空間的にデビューしています。

iPadでは、サンプルアプリはシート、アラート、ポップオーバーを使用します。

それらが新しいプラットフォームでどのように振る舞うかを見てみましょう。

まず、アプリの設定を開きましょう。

空間シートは、提示するビューコントローラを後ろに押し戻し、暗くします。

iPadとは異なり、ビューコントローラーのisModalInPresentationプロパティに関係なく、境界外のタッチやその他のジェスチャーのために却下されることはありません。

次に、新しいアラートスタイルをチェックしてみましょう。

アプリのアイコンの2D表現が上部に配置されています。

シートと同様に、常にプッシュバックする必要があるビューコントローラーからのアラートを表示する必要があります。

最後に、ドキュメントの詳細ポップオーバーを開きましょう。

ああ、これは少し外れているように見えます。

それは境界の外に壊れています、それは素晴らしいですが、それはアプリの中心から遠く離れています。

これを修正するためにコードに入りましょう。

ビューコントローラーが作成されているようで、ポップオーバースタイルに設定されています...

ああ、問題が見えます。

permittedArrowDirectionsはrightのみに設定されています。

iPadでは、ポップオーバーはシーンに制限されていますが、空間プラットフォームでは、macOSと同様に、この同じ制約は存在しません。

常にシステムが好む配置を使用するようにこれを更新しましょう。

今、情報ボタンをタップすると、期待していたポップオーバーの配置が表示されます。

iPadアプリで標準的なプレゼンテーションを使用している場合、空間アプリはすでに素晴らしい方法で境界を超えている可能性があります。

UIKitは、プラットフォームの仮定をハードコーディングしていない限り、すべての詳細を処理します。

サンプルアプリを昇格させる次の方法は、装飾品です。

アプリのプレゼンテーションは空間的になりましたが、エディタ自体はまだプラットフォーム上の余分なスペースを利用していません。

編集者は...

...ええ、少し窮屈に見えます。

しかし、装飾品を使用すると、これまでできなかった方法で空間プラットフォームが提供する余分な部屋を利用することができます。

オーナメントを使用すると、合理的な制限内でアプリのシーンの周りにコンテンツを配置できます。

UIKitコンポーネントは、ポップオーバーのような装飾品も使用します。

それが、例のアプリポップオーバーがクリップされることなく、シーンの外に現れた方法です。

デバイス上の内蔵アプリの多くは、装飾品も使用しています。

これはヘッドセットのテレビのクールな外観です。

このアプリは、シーンの前縁の装飾品にタブバーを配置するSwiftUIタブビューを使用します。

Safariはオーナメントを使用して、ナビゲーションバーをウェブページの上に持ってきます。

そして、フリーフォームはオーナメントを使用して下部ツールバーを作成します。

オーナメントを使用すると、これらのアプリは主要なコンテンツを中央に保ち、コントロールをエッジに押し上げます。

そして、装飾品は前方に持ち上げられ、深みが増します。

彼らはあらゆる方向に境界の外を破っています!

サンプルアプリでは、ツールバーの装飾にすべての編集コントロールをまとめるのは完璧だと思います。

Xcodeに戻ってこれを追加しましょう。

オーナメントはSwiftUIコンテンツをホストしています。このファイルですでに行ったSwiftUIを必ずインポートする必要があります。

次に、新しい装飾を定義します。

アライメントパラメータを使用すると、ニーズに最も適したコンテンツのレイアウトを簡単に表現できます。

たとえば、オーナメントをシーンのリーディングエッジから吊るしたい場合は、リーディングシーンのアライメントとトレーリングコンテンツのアライメントを設定します。

代わりにオーナメントをシーンの中に吊るしたい場合は、主要なコンテンツアライメントを使用します。

編集ツールバーの場合、シーンの下部からハングアップしたいのですが、ツールが端の中央に配置されているため、エディタの一部に感じられます。

これは、ボトムシーンのアライメントとセンターコンテンツのアライメントが欲しいことを意味します。

私はそれらのアライメントを追加します。

コンテンツについては、すでに以前に新しいEditingControlsViewを作成しましたが、ここで使用します。

オーナメントは自動的に背景を追加しません。

これは、適切な背景を選択することは、コンテンツに最適なものに依存するためです。

ツールバーをエディタと同じガラスの背景にしたいので、新しい修飾子を使用します。

次に、UIViewControllerの新しいオーナメントプロパティを、新しいオーナメントだけで配列に設定します。

もし私が複数の装飾品を持っていたら、私もこの配列にそれらを含めるだろう。

オーナメントはビューコントローラーのライフサイクルを共有します。

ビューコントローラーが階層から削除された場合、そのオーナメントも削除されます。

この関連付けは、システムインタラクションにとって非常に重要です。

たとえば、シートプレゼンテーションは、トランジション中にビューコントローラに対する装飾品を保持します。

最後に、意図せずに重複が発生する可能性があるケースを避けるために注意を払ってください。

コードに最後の変更があります。

コントロールをオーナメントに移動したので、メインエディターのためのスペースが増えました。

カスタムedgeToEdgeスタイルを使用して、もう少し大きくします。

アプリを実行する時間です。

完璧！

ツールバーは私が望んでいた場所にあり、エディタの下部の外側に壊れています。

それは素晴らしいです。

装飾品を利用することで、サンプルアプリは、編集ツールを近くに保ちながら、クリエイターが最も気にかけているコンテンツのために、より多くのメインエリアを使用することができます。

装飾品を作るのはとても簡単です。

アプリをユニークにするものに時間と労力を集中させることができます。

最後に、UIKitアプリにRealityKitを追加することについて話します。

RealityKitコンテンツをホストする新しいSwiftUI View、RealityViewがあります。

これにより、エンティティをSwiftUI階層で親にすることができます。

RealityViewを深く掘り下げるには、「RealityKitで空間体験を構築する」をチェックしてください。

SwiftUIビューをホストする既存のAPI、UIHostingControllerもあります。

これは、UIKitアプリを書き換えることなく、RealityViewやSwiftUIの他の新しいAPIを利用できることを意味します。

サンプルアプリでは、RealityKitを使ってピクセルに命を吹き込みたいです。

Xcodeを開いて魔法を作りましょう。

私はすでにPixelArtEntityViewと呼ばれる新しいSwiftUIビューを作成しました。

RealityViewを使用して、アートのピクセルをRealityKitエンティティとしてレンダリングします。

始めるために新しいインスタンスを作ります。

次に、エンティティビューをルートビューとして使用して、UIHostingControllerを設定します。

ホスティングコントローラーをEditorViewControllerの子として追加し、ホスティングコントローラーのビューをEditorViewControllerのビューのサブビューとして追加します。

次に、新しい親に移動されたことをホスティングコントローラーに伝えます。

最後に、カスタムレイアウト関数を呼び出すと、プレビューを配置します。

さて、ホスティングコントローラーのセットアップが完了しました。

ショータイムです。

再生ボタンを押して3Dプレビューをタップすると、新しいコードが動作していることがわかります。

そのようにして、私はアプリに本当の深みのあるピクセルを追加しました。

シミュレーターの軌道制御では、私の視点に基づいて照明がどのように変化するかを見ることさえできます。

これはとてもかっこいい！

そして、それはすべてUIKitアプリで起こっています。

RealityViewはアニメーターのプレビューをレベルアップしました。

そして、UIHostingControllerのおかげで、簡単に追加できました。

一緒に、これらのAPIは、優れた空間アプリを構築するためのパスを短縮します。

標準のUIKitプレゼンテーションを使用し、エディタコントロールをオーナメントに入れ、RealityKitで3Dピクセルを追加することで、サンプルアプリはこの新しい空間世界で素晴らしく見えます。

そして、すべてほんの数行のコードで。

これらの空間体験の設計ガイダンスについては、「空間設計の原則」をご覧ください。

このビデオではたくさん取り上げたので、次にやるべきことは次のとおりです。

プロジェクトに新しい目的地を追加することから始めます。

デバイス固有のAPIの使用を更新し、非推奨のAPIから離れます。

セマンティックスタイル、ホバーエフェクト、標準プレゼンテーションを使用して、アプリをプラットフォームの外観と一貫性のあるものにします。

装飾品であなたのアイデアと想像力を限界を超えて広げてください。

そして、UIKitから直接、新しい空間的なSwiftUI機能でアプリをさらに進めましょう。

見てくれてありがとう!

グレースと私は、まったく新しい次元であなたのアプリを見ることにとても興奮しています。

♪