10102

♪ ♪

ジェリー：こんにちは、Siriとアプリショートカットのエンジニアリングマネージャーのジェリーです。

今日は、アプリショートカットでアプリにスポットライトを当てる方法を紹介します。

まず、アプリがオペレーティングシステム全体から使用できる迅速で習慣的なアクションを作成するのに役立つアプリショートカットを採用すべき理由から始めます。

次に、アプリショートカットの実装の基本について確認します。

その後、App Shortcutsをビジュアルと音声の両方で素晴らしいものにする方法と、iOS 17でApp Shortcutsが改善された新しい方法について説明します。

そして最後に、アプリショートカットをiPhone以外の多くのAppleデバイスに拡張できる新しい方法を見て締めくくります。

まず、アプリショートカットを使用すると、アプリの機能を簡単に見つけて使用できます。

アプリがインストールされるとすぐに自動的に利用可能になり、ゼロユーザー設定が必要です。

iOS 15以前とは異なり、ショートカットアプリを使用したり、Siriに追加ボタンを使用してアプリのショートカットを設定したりする必要はありません。

アプリのショートカットは、トリガーフレーズの1つを話すことでSiriから実行できます。

また、Spotlightで検索するときに検索結果で目立つように取り上げられ、強力なユーザーショートカットとオートメーションの一部になることができるショートカットアプリで見つかります。

アプリのショートカットは、システム全体のユーザーにアプリの機能の可視性を高めるのに役立ち、アプリを開く機能や、単にバックグラウンドで物事を行う機能の両方のための素晴らしい出発点になるので、ユーザーは集中力を維持できます。

これらは、アプリのコア機能を使用するための摩擦を軽減し、声だけでハンズフリーやHomePodで自宅で使用できるようにするための、高速で記憶に残る方法です。

アプリの最も重要な機能をターゲットにした思い出に残るアプリショートカットを使用すると、人々がアプリを発見、記憶、習慣を身につけるのを助けることができます。

たとえば、このセッションでは、ToDoリストを管理するための「デモ」という仮想アプリを操作します。

リストを要約した新しい機能をシステムに公開したい。 

これにより、ショートカットまたはSiriに尋ねることで、何が残っているのかを簡単に把握できます。

この種の迅速で軽量な機能は、アプリのショートカットに最適です。

彼らは人々が私のアプリから必要なものをシームレスに手に入れ、途中でできるようにします。

ユーザーがショートカットからの口頭コマンドでリストを要約し、Spotlightで強調表示できるように、to-doリストを要約するためのアプリインテントを実装する方法を簡単に説明します。

App Shortcutsは、Swiftのソースコードで優れたインテントをより迅速かつ簡単に構築するために、ゼロから構築されたSwiftのみのフレームワークであるApp Intentsフレームワークで構築されています。

すべてのアプリショートカットは、ソースコードでインテントを定義することから始まります。

意図は、やることリストの作成、内容の要約、アイテムのチェックなど、アプリで完了できる個々のタスクを表します。

アプリのインテントを作成したら、アプリのショートカットを作成できるので、SpotlightやSiriから使用できます。

これは、あなたの意図を必要なSiriのトリガーフレーズ、タイトル、シンボルに関連付けます。

両方の定義を取得したら、アプリをビルドしてテストして動作を確認するだけです。

非常にシンプルなアプリのショートカットを作成することから始めます。

このアプリのショートカットを使用すると、リストの名前を入力して、SpotlightまたはSiriから直接新しい空のto-doリストを作成できます。

これを実装するのは、簡単な2段階のプロセスです。アプリの意図を定義し、アプリのショートカットを定義します。

App Intentsフレームワークをインポートすることから始めます。

そして、AppIntentプロトコルに準拠して、私の意図のための新しい構造体を実装します。

システムによって呼び出されるperformメソッドに、私の意図の実際の機能を含めます。

そして最後に、AppShortcutsProvider構造を実装します。

各アプリは、このプロトコルに準拠した最大1つの構造体を持つことができます。

AppShortcutsProviderでは、アプリがサポートするすべてのアプリショートカットを指定できます。

ここにリスト作成アプリのショートカットを追加しました。

各アプリのショートカットにはいくつかのコンポーネントがあります。トリガーされたときに呼び出されるインテントです。

このアプリのショートカットを実行するためにSiriが認識すべきフレーズ。

アプリショートカットごとにこれらの複数を持つことができます。

短いタイトルとシステム画像名なので、システムはこのアプリのショートカットを視覚的に表現する方法を知っています。

シンプルなアプリのショートカットのために実装する必要があるのはそれだけです。

アプリを実行することで、コードに2つの構造体を作成するだけで、Siriまたはショートカットアプリから直接ToDoリストの作成をすぐに開始できます。

しかし、もう少し高度なものを試してみたいのですが、要約する特定のリストを提供することで、タスクの簡単な要約を得ることができます。

これは、App Intentsの2つの重要な概念に触れます。エンティティとクエリです。

試してみましょう。

まず、SummarizeList App Intentを実装する必要があります。

以前と同様に、AppIntentプロトコルに準拠した構造体を作成する必要があります。

TodoList構造体については、スタブの実装を残しました。

私はそれに戻ります。 

私のアプリにはすでにリストの要約を返す便利な機能を持っているので、それを使用します。

この要約は、アプリのインテントの結果の一部としてカスタムダイアログとして返すことができます。

これにより、Siriが話したり、結果を表示したりできます。

すべての意図には、システムが表示できるタイトルが必要です。

意図は、変数を宣言し、@Parameterプロパティラッパーで注釈を付けるだけで入力を取ることができます。

この場合、前述のように、今のところ単なるスタブであるToDoList構造体を参照しました。

さて、多くのアプリのインテントに役立つ2つの概念についてお話ししたいと思います。エンティティとクエリです。

エンティティは、ユーザーが参照したいと思うアプリに関する概念です。

私のアプリでは、私のアプリでタスクを実行するときに人々が参照したいと思う論理的なオブジェクトであるため、to-doリストエンティティを持つことは理にかなっています。

他のアプリでは、ユーザー、ドキュメント、注文などのエンティティがあるかもしれません。

アプリのエンティティは、それらのインテントが入力パラメータとしてエンティティを使用する場合、アプリのインテントで使用できます。

私のアプリでは、私の「SummarizeList」インテントは、to-doリストエンティティをパラメータとして取ります。

アプリのインテントのパラメータに適合するエンティティインスタンスを見つけるために、システムはクエリに依存しています。

実行時に、システムはクエリオブジェクトをインスタンス化して呼び出し、さまざまな検索パラメータに基づいてエンティティを検索します。

クエリは、関連するエンティティのインスタンスをシステムに返します。

システムは後で、インテントを実行するときにこれらのエンティティを使用します。

私のアプリでは、ToDoリストエンティティと、システムが関連するToDoリストを検索するのに役立つクエリを実装する必要があります。

私が取り組んでいたリストサマリーアプリのショートカットに戻ります。

AppEntityに準拠することで、ToDoListのスタブ実装を拡張します。

システムがこのエンティティタイプを記述する方法を知っているように、typeDisplayRepresentationプロパティを実装します。

同様に、displayRepresentationを実装するので、システムはこの特定のインスタンスを記述する方法を知っています。

スポットライトまたはショートカットでエンティティを最上位に表示したい場合は、エンティティが表示表現に画像またはシンボルを持つ必要があることに注意してください。

そして最後に、このエンティティのデフォルトのクエリを宣言します。

to-Doリストエンティティの簡単なクエリを実装しました。

少なくとも、私のクエリは、その識別子によってto-doリストを取得できなければなりません。

また、提案されたEntitiesを実装したいと思います。

これにより、私のアプリは、ユーザーに最も関連していると思うToDoリストを制御できます。

システムは、これらの提案されたエンティティを使用して、アプリのショートカットを自動的に入力します。

SummarizeListアプリのインテントと関連するエンティティとクエリ構造体だけで、ショートカットアプリ内からオートメーションの一部としてこの関数を使用できるようになりました。

まだ終わってないけど。-まだ終わってないよ

この機能がSiriからアクセス可能で、Spotlightで完全に機能されていることを確認したい。

これを行うには、アプリのショートカットを実装する必要があります。

先ほど始めたAppShortcutsProviderを拡張することから始めます。

既存のアプリショートカットに新しいアプリショートカットを追加します。

また、Siriからアプリショートカットを呼び出す一連の話し言葉も含めます。

アプリケーションの名前を文字列に直接使用するのではなく、特別なトークンを使用していることに注意してください。

これにより、Siriは私のアプリのメイン名だけでなく、私が定義したアプリ名の同義語も認識できます。

また、インテントのパラメータ「リスト」をいくつかのフレーズに追加しました。

アプリのショートカットは、ユーザーがSiriを呼び出すとすぐにパラメータを提供できるように、事前に定義されたパラメータでトリガーフレーズを拡張することをサポートしています。

この場合、システムはToDoListQueryのsuggestEntitiesメソッドを呼び出して、可能な値の配列を取得します。

「リスト」パラメータのないフレーズも提供したことに注意してください。

これは一般的に良いアイデアなので、私のアプリショートカットがリストなしで使用されている場合、Siriまたはショートカットはユーザーに1つを選択するように促すことができます。

アプリショートカットは、パラメータがオプションでない場合、インテントを実行する前に自動的に値を求めます。

オプションのパラメータの場合、performメソッド内の値を手動でプロンプト表示できます。

以前と同様に、短いタイトルとシステムイメージを含める必要があります。

ユーザーがSpotlightで私のアプリを検索したときに最初に見るものなので、良い短いタイトルとシステムイメージを選ぶことは重要です。

アプリのショートカットは、事前にSiriに指定できる既知のパラメータ値の固定セットを持つパラメータをサポートしています。

彼らは、Xがユーザーからの任意の入力であることができる「Xのために私のアプリを検索する」のようなオープンエンドの値をサポートしていません。

App Enumsであるパラメータを使用できます。その場合、値は事前に知られているか、Appエンティティであるパラメータを完全に動的に使用できます。

あなたがする必要があるのは、私のアプリのように、suggestedEntitiesを介してクエリ内のエンティティのリストを返すことだけです。

そして、最後のステップとして、AppShortcutsProviderオブジェクトでupdateAppShortcutParametersを呼び出す必要があります。

このメソッドを呼び出すと、アプリのショートカットパラメータが変更されたことをシステムに通知し、システムは関連するクエリでsuggestedEntitiesを呼び出して再フェッチします。

やることリストが変更されるたびにこれを行う必要があります。

これには、追加と削除だけでなく、名前の変更などの突然変異も含まれます。

たとえば、エンティティのdisplayRepresentationの一部が変更された場合は、このメソッドを呼び出す必要があります。

アプリの最初の起動時にこれを呼び出すことも覚えておくことが重要です。

エンティティパラメータを参照するアプリショートカットフレーズは、システムが初めてエンティティを正常にフェッチするまで機能しません。

そして、それが私の要約リストアプリのショートカットに実装する必要があるすべてです。

今、私のアプリを使うとき、私は「ねえ、Siri。デモで私の食料品リストを要約してください。

そして、すぐに口頭および視覚的な反応を得ます。

少量のコードで、人々が迅速かつシームレスな方法で必要な情報を簡単に取得できるようにしました。

優れた本格的なアプリショートカットを実装したら、ユーザーがそれを発見するのを助けることが重要です。

人々が単に自分のデバイスを使用する過程であなたのアプリショートカットを発見できる2つの強力な方法があります:スポットライトとSiriのヒント。

Spotlightは、人々がiPhoneやiPadでアプリを起動する最も一般的な方法の1つです。

Spotlight Top Hitsセクションには、アプリだけでなく、アプリのショートカットも表示されます。

これは、アプリのショートカットを発見可能にする素晴らしい方法です。

人々はあなたのアプリを検索するとすぐにあなたのアプリのショートカットを見つけることができ、あなたのアプリはトップヒットです。

または、ここで「要約リスト」のように、アプリショートカット自体のタイトルを検索して見つけることができます。

Spotlightに加えて、Siriのヒントは、ユーザーがアプリを使用している間にアプリのショートカットを発見できるようにする素晴らしい方法です。

ここでは、人々がこのヒントが役に立つと思う場所のように感じるので、リストビューに1つを追加しました。

ヒントビューはSwiftUIとUIKitの両方で利用でき、多くのスタイルを提供しているので、どのアプリケーションでも見栄えがします。

Siriのヒントは、画面上のコンテンツに関連するように、文脈的に最もよく配置されています。

SpotlightとSiriのヒントの間には、ユーザーがアプリの内外でアプリのショートカットについて知る方法があります。

アプリの意図とアプリのショートカットの両方をもっと深く掘り下げたい場合は、WWDC22の2つのセッションをチェックしてください。

「Dive into App Intents」は、App Intentsフレームワークの概要に最適で、「App IntentsでApp Shortcutsを実装する」は、複数の可能なパラメータ値間の曖昧さを解消するなど、App Shortcuts全体で利用可能なさまざまなユーザーエクスペリエンスを探ります。

初めてのアプリショートカットを実装したので、アプリのショートカットとiOS 17のすべての素晴らしい新機能を最大限に活用するために、今年の新機能についてお伝えしたいと思います。

iOS 17では、アプリのインテントとアプリのショートカットがショートカットアプリの表示方法を更新しました。

この新しいデザインは、人々があなたのアプリの意図をより簡単に見つけることを可能にし、アプリの最も重要なアクションへのワンタップアクセスを提供します。

アプリのショートカットもSpotlightで目立つ配置になりました。

頻繁に使用されるアプリショートカットがここに表示されているだけでなく、今年はアプリショートカットをより視覚的に特徴的にするために新しいAPIを追加し、Spotlightが関心のあるエンティティを強調する機能も導入しました。

ショートカットの自動化設定は、より使いやすくするために再設計され、アプリのショートカットが紹介されているため、人々はより簡単に始めることができます。

これらの素晴らしい新機能をすべて活用し、アプリのショートカットに注意を喚起するために、色、エンティティのサムネイル、シンボル付きの短いタイトルに関する新しいAPIを導入しました。

これらの新しいAPIは、すべてのアプリショートカットに必要であり、アプリを本当に際立たせるのに役立ちます。

色から始めます。

アプリがSpotlightまたはShortcutsに表示されたときにシステムが使用するアプリのInfo plistで最大2色に設定できるようになりました。

アプリ内のスタイルに似た色を採用することを検討してください。そうすれば、アプリ内体験をシステムの残りの部分に少し持ち込むことができます。

次に、アプリの各エンティティインスタンスがオプションのサムネイル画像を持つことができるようになりました。

これは、既存のDisplayRepresentation APIの拡張です。

サムネイルは、画像が存在するURL、画像を表すデータオブジェクト、名前付きバンドル画像リソース、またはシステム画像名のいずれかとして提供できます。

エンティティにユニークで特徴的な画像を選択すると、Spotlightの外観をより魅力的にするのに役立ちます。

そして最後に、すべてのアプリのショートカットには、短いタイトルとシステムイメージが必要です。

スポットライトまたはショートカットに表示されると、短いタイトルとシステム画像がアクションのスタイルに使用されます。

特徴的で、アプリのショートカットが何をするかを表すものを選んでください。

アプリショートカットがシステムで視覚的に紹介されるすべての素晴らしい新しい方法に加えて、今年もアプリショートカットをSiriで使用する方法を大幅に改善しました。

iOS 16では、Siriは、ソースコードと文字列ファイルで定義したとおりに話されている場合にのみ、アプリショートカットのトリガーフレーズを認識します。

しかし、アプリを使用している人は、アプリのショートカットにアクセスしようとすると、異なる単語やフレーズを使うかもしれません。

たとえば、私のアプリでは、「私の食料品リストをデモで要約する」をフレーズとして提供したので、話されたときに期待どおりに私のアプリショートカットをトリガーしますが、「デモで私の食料品リストの概要を教えてください」のような非常に似ていて合理的なものは機能しません。

iOS 17では、アプリのショートカットをトリガーするために、より自然に話す機能を提供しています。

これは、デバイス上の機械学習を利用して、アプリショートカットで提供したものと同様のフレーズも機能できるようにします。

これは、新しいセマンティック類似度インデックスによって強化されています。

この新しい柔軟なマッチング機能を使用すると、人々はアプリのショートカットを呼び出すより自然な方法を使用でき、可能な限り異なるフレーズを提供する必要はありません。

そして最も重要なことは、柔軟なマッチングを得るためにコードの変更が不要なことです。

Xcode 15でアプリを再構築するだけで、すでに持っているものと同様のフレーズが機能します。

まだ柔軟なマッチングを採用する準備ができていない場合は、「アプリショートカット柔軟なマッチングを有効にする」ビルド設定を無効にしてオプトアウトし、アプリのショートカットフレーズでのみ完全一致に戻すことができます。

アプリショートカットフレーズの自然さをさらに広げるために、新しい同義語APIもあります。

これは、AppEntitiesとAppEnumケースの追加の同義語を定義できるように、DisplayRepresentation APIへの小さな追加です。

これにより、Siriに対してより自然に話すことを可能にすることで、アプリショートカットのリーチがさらに広がります。

たとえば、私のアプリでは、トリガーフレーズの別名でリストを参照できるようになりました。

類義語は、Siriがリストをプロンプト表示した場合、事前に指定しなかった場合にも機能します。

これらの同義語はエンティティの各インスタンスに関連付けられており、変更された場合は、updateAppShortcutParametersを再度呼び出す必要があります。

柔軟なマッチングをサポートするために、新しいネガティブフレーズAPIもあります。

それにもかかわらず、アプリのショートカットに属さないフレーズが誤ってアプリを呼び出すことがわかった場合にのみ、これを使用する必要があります。

この場合、「私の食料品店にデモの要約を送る」と、私のアプリショートカットが誤ってトリガーされる可能性があるので、これを否定的なフレーズに含めます。

そして最後に、Siriでアプリのショートカットをテストするのは遅くなる可能性があり、アプリを構築して起動し、毎回Siriと話す必要があります。

複数のロケールでテストしたい場合、これは特に時間がかかります。

App Shortcutsのオーサリングをより迅速かつ簡単にするために、App Shortcuts Previewという強力な新しいツールをXcodeに導入しています。

App Shortcuts Previewは、macOS SonomaでXcode 15を実行している場合にのみ利用可能であることに注意してください。

デモを見てみましょう。 見てみましょう。

ここには、以前にアプリショートカットを実装したデモアプリのプロジェクトがあります。

アプリを起動してSiriと話すことでアプリのショートカットをテストできますが、フレーズの効果をすばやくプレビューするより迅速な方法を紹介したいと思います。

この新機能は、製品、アプリショートカットプレビューにあります。

セマンティック類似性インデックスを生成する機会を持つように、まず私のアプリを構築する必要があります。

構築後、左側のアプリを選択し、すぐに人々がSiriに話しかけるかもしれないと思うフレーズを入力し始めることができます。

それは私がコードで定義したものなので、うまくいくとわかっているフレーズをいくつか試してみましょう。

デモで買い物リストを要約します。

それは私のSummarizeListの意図と正しく一致します。

私が提供したフレーズではなく、最初のフレーズに似ているフレーズを試してみましょう。

デモ付きの買い物リストの概要を教えてください。

フレキシブルマッチングのおかげで、このフレーズは、追加の作業をしなくても同じ意図で一致します。

それでは、確実に認識するには少し違いすぎるかもしれない3番目のフレーズで試してみましょう。

デモで買い物リストの要点を教えてください。

これは私のアプリのどのアプリショートカットとも一致しません。

アプリショートカットに新しいフレーズをすばやく追加し、再構築し、フレーズを再度テストすることができます。

デモで買い物リストの要点を教えてください。

そして、新しいフレーズが一致し、アプリを実行せずにそれを確認することができます。

今、私は北京語で私のアプリをテストしたいです。

携帯電話の言語を切り替えたり、アプリを実行したり、Siriに頼んだりするのではなく、プレビューでロケールセレクターを使うだけです。

これにより、すぐに新しいフレーズをテストできます。

そして、マンダリンのフレーズは期待どおりに機能し、開発デバイスを使用する必要はありません。

アプリショートカットプレビューは、アプリショートカットがSiriでどのように機能するかを手動でテストするより迅速な代替手段であり、アプリショートカットの開発が容易になります。

iOS 17では、新しい文字列カタログファイル形式とともに、アプリショートカットのトリガーフレーズをローカライズする方法も改善しています。

以前は、各ロケールの各アプリショートカットに対して持つことができるフレーズの数が制限されていました。

たとえば、Swiftコードでアプリショートカットに5つのフレーズを定義すると、各ロケールで5つのフレーズに制限されます。

iOS 17では、文字列カタログの助けを借りて、すべてのロケールに自然に必要な数のフレーズを持つことができるように、この制限を解除しています。

この機能は、以降のiOS 17をターゲットとするアプリでのみ利用可能であることに注意してください。

この新機能を利用するのは簡単です。

今年以前にアプリにアプリショートカットを採用していない場合は、「AppShortcuts」という新しい文字列カタログを作成するだけです。

アプリを再構築すると、AppShortcutsProviderで定義したフレーズが自動的に入力されます。

Swiftのソースコードを編集して再構築すると、新しい文字列カタログ形式は、自動的に追加または削除するフレーズに追いつきます。

または、今年以前にすでにApp Shortcutsを採用している場合は、AppShortcuts.stringsファイルをString Catalogに移行するだけです。

Xcodeで右クリックし、移行アシスタントに従ってください。

完了して再構築すると、フレーズが自動的に入力され、すでに行った可能性のあるローカリゼーションが保持されます。

文字列カタログに移行したら、制限なく各ロケールに追加のフレーズを追加できます。

柔軟なマッチング、新しいアプリショートカットプレビュー、文字列カタログは、Siriでアプリショートカットをはるかに良くします。

トリガーフレーズを素晴らしいものにするためのヒントをいくつか紹介します。記憶に残るフレーズを選択することが重要です。

アプリのユーザーは、アプリのショートカットをサポートする他の多くのアプリを携帯電話に持っているでしょう、そして実際には、彼らは彼らのショートカットを正確に表現する方法を覚えるのに苦労するでしょう。

アプリ名の同義語を活用してください。

これは、ユーザーがアプリショートカットを呼び出す方法をさらに広げるのに役立ちます。

Swiftのソースコードでは、人間が読めないプレースホルダキーを使用しないでください。

フレーズ内のパラメータを参照する場合は、先ほど実証した補間された文字列プレースホルダによって定義する必要があります。

これは、ランタイムが実行時にこれらのプレースホルダを正しくロードして入力するために必要です。

さらに、アプリに採用する際に注意すべきアプリのショートカットにはいくつかの制限があります。

あなたのアプリは最大10個のアプリショートカットを持つことができます。

アプリ全体に最大1,000のトリガーフレーズがあるかもしれません。

これには、パラメータのすべての組み合わせが含まれていることに注意してください。

たとえば、10の可能な値を持つパラメータは、有効なフレーズの数を10倍に拡大します。

フレーズ内のパラメータに可能な値が多すぎないことを確認することで、この制限に達するのを避けることができます。

App Shortcuts Previewでのテストは、すでにFlexible Matchingでカバーされている可能性のある冗長なフレーズを定義しないようにするのにも役立ちます。

すべてのトリガーフレーズには、アプリ名またはアプリ名の同義語が含まれている必要があります。

追加のアプリ名の同義語を定義する方法に関するガイドについては、このビデオに関連付けられているリンクを参照してください。

アプリを開くアプリのショートカットがSpotlightに表示されるようになりました。

エンティティでアプリを開くアプリインテントがある場合は、そのアプリインテントをOpenIntentプロトコルに準拠する必要があります。

素晴らしいアプリショートカット体験を作成する方法について話したので、iPhone以外のさまざまなデバイスで同じ素晴らしい体験をもたらす方法について話しましょう。

アプリのショートカットはApple Watchで動作するようになりましたが、可能な限り最高の体験を得るためには、いくつかの制限に注意する必要があります。

Apple Watchのアプリショートカットは、デバイス自体にインストールされているwatchOSアプリから来ている必要があります。

ペアリングされたiOSデバイスからのアプリのショートカットは、Watchでは実行できません。

これは、iPhoneにiOSアプリがインストールされているが、対応するwatchOSアプリがインストールされていない場合、アプリショートカットはwatchOSから動作しないことを意味します。

Siriとの柔軟なマッチングはApple Watchでは利用できないので、フレーズは正確に話さなければなりません。

Apple WatchのサポートはwatchOS 9.2で導入され、そのバージョン以降を実行しているすべてのデバイスで利用できます。

アプリのショートカットがApple Watchでも発見できるようになりました。

iOSと同様に、watchOSのショートカットアプリは、デバイスで利用可能なアプリのショートカットを際立たせています。

第二に、アプリのショートカットがHomePodでサポートされるようになりました。

これには、App Shortcut対応のアプリをコンパニオンiOSまたはiPadOSデバイスにインストールする必要があります。

アプリのショートカットがアプリを起動する可能性があるiOSやiPadOSで実行されているのとは異なり、HomePodでは、アプリのショートカットはアプリをまったく起動しない場合があります。

例えば、iPhoneにデモアプリをアップするだけで、HomePodに「Hey, Siri」と言うことができます。デモで私の食料品リストを要約してください。

App ShortcutsのHomePodサポートは、バージョン16.2以降から利用できます。

HomePod用のアプリショートカットを設計するときは、音声のみのデバイスであることを考慮してください。

対応するビジュアルがないので、Siriが話すように明確で簡潔なダイアログを返していることを確認してください。

IntentDialogクラスには、「フル」文字列と「サポート」文字列の両方を取る初期化子があります。

HomePodは「フル」ダイアログを使用し、iPhoneなどのビジュアルデバイスは代替の「サポート」ダイアログを使用します。

これにより、ユーザーが視覚的な出力を参照できる場合はより簡潔にすることができますが、画面が利用できない場合は完全に説明的なままです。

音声のみのユースケースを含むアプリショートカットの設計方法の詳細については、WWDC22の「デザインアプリショートカット」セッションをご覧ください。

私はいくつかの重要なポイントを繰り返して締めくくりたいと思います。

アプリのショートカットは、システム全体のアプリの機能の可視性を高め、アプリの習慣的な使用に対する摩擦を減らすのに役立ちます。

アプリのショートカットはこれまで以上に発見しやすくなり、Spotlightの目立つ配置は、アプリのより多くの使用を促進し、アプリを際立たせるためのより多くのスタイリングオプションを促進します。

Siriを使用したアプリショートカットは、フレキシブルマッチングで大幅に改善され、ユーザーは自分の声でアプリショートカットをより簡単にトリガーできます。

また、Xcodeの新しいアプリショートカットプレビューツールを使用すると、アプリショートカットの開発とテストがより速く、より簡単になります。

アプリのインテントとアプリのショートカットをより深く掘り下げるには、今年からさらに2つのセッションをチェックしてください。

これらすべての改善により、アプリショートカットはアプリとユーザーに最適だと思います。

あなたが作成するすべての素晴らしいアプリショートカットを見るのを楽しみにしています。

♪ ♪