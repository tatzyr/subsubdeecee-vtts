10279

♪まろやかなインストゥルメンタルヒップホップ♪

♪

エティエンヌ・セゴンザック:こんにちは!私たちのセッションへようこそ。

私はサファリチームのエンジニア、エティエンヌ・セゴンザックです。

そして、チームメイトのティム・ホートンが加わりました。

空間コンピューティングのための新しいSafariを紹介したいと思います。

ウェブを新しいプラットフォームに持ち込むのは毎年ではないので、このセッションは私たちにとって大きな意味があります。

私たちは可能な限り最高のブラウザを構築するために細心の注意を払いました。

そして、ウェブはこの新しいデバイスで本当に輝いています。

それでは、Safariの動作を見ることから始めましょう。

ティム・ホートン:ありがとう、エティエンヌ!さあ行こう！

xrOSでSafariを初めて開くと、iPadやMacで慣れ親しんだSafariと同じように、見覚えがあることに気づくでしょう。

類似点は肌の深さ以上のものです。

これは本当に、下に同じWebKitエンジンを備えたSafariと、このプラットフォームのためのいくつかの思慮深い追加です。

すべてのWebサイトは、Web標準の広範なサポートのおかげで、箱から出してすぐに美しく機能します。

ウェブの閲覧は簡単です。

リンクをたどるには、手を差し伸べてページに触れるか、単にリンクを見て一緒に指をタップすることができます。

リンクを見ている間、Safariは穏やかなハイライトを与え、自信を持ってナビゲートするのに役立ちます。

Safariを使用すると、このプラットフォームのパワーを最大限に活用する方法がすぐに見つかります。

たとえば、タブの概要は拡張ディスプレイ用に完全に再設計され、タブの切り替えがこれまで以上に楽しくなっています。

プラットフォームの複数のウィンドウのサポートにより、これまでにないマルチタスクを行い、ウェブサイトやその他のアプリで自分を囲み、好きなように配置することができます。

私は特に、究極のウェブ開発体験のためにMacバーチャルディスプレイでこれを使うのが好きです。

そして、お気に入りのウェブビデオをフルスクリーンに持ち込むと、本当に焦点が当てられます。

♪まろやかなインストゥルメンタルヒップホップ♪

こんにちは。Safariチームのソフトウェアエンジニア、Kendall Bagleyです。

ご存知のようにウェブをこのプラットフォームに持ち込みましたが、まだ覚えておくべきベストプラクティスがありますので、それらのいくつかについて聞くためにエティエンヌに戻りましょう。

エティエンヌ:ありがとう、ティム。

私はタブの概要が大好きです!

そして驚くべきことは、これらのウェブサイトのすべてが箱から出して機能することです。

レスポンシブデザインのおかげで、彼らはiPhoneであなたの手のひらにいることから、部屋全体を埋めることに適応することができます。

ウェブサイトを徐々に強化するためにすでに使用しているテクニックは、このプラットフォームに引き続き適用されます。

CSSビューポートユニットでレイアウトを設計し、メディアとコンテナクエリでウィンドウのサイズ変更に反応する必要があります。

グラフィックの場合は、特にUI要素の場合、SVGを優先してください。

これにより、ウィンドウが近い場合でも、可能な限り最高のレンダリングが保証されます。

また、ビットマップアセットを使用する必要がある場合、devicePixelRatioとレスポンシブ画像は、画像の読み込みとキャンバスレンダリングに推奨される解像度を反映します。

今日は、この新しい体験の中核となる自然な相互作用について学び、このプラットフォーム用にウェブサイトを最適化し、ウェブ上の3Dコンテンツのユニークな機会を検討する際に興奮します。

直接的および間接的なジェスチャーをもう少し深く掘り下げてみましょう。

このデバイスの主な入力モデルは、目と手のジェスチャーの融合によって駆動されます。

ティムのデモで見たように、それはとても自然なことです。

周りを見回したり、指を叩いたり、つまんだりするだけです。

ピンチが始まると、あなたの目はHTMLターゲットを見つけ、ポインターダウンイベントを配置するために使用されます。

ジェスチャー中、pointermoveイベントは手の動きに従うのに役立ち、リリース時にポインターアップが送信されます。

人差し指で手を伸ばして、ページに直接触れることもできます。

指がウィンドウと交差すると、手の位置だけでポインタダウンイベントが送信されます。

Pointermoveイベントは以前と同じように動きを追跡し、指がウィンドウとの交差が止まるとポインタアップが送信されます。

もちろん、簡単なインタラクションのために低レベルのポインタイベントを心配する必要はありません。

Safariは依然としてクリックイベントをトリガーし、スクロールとスクロールのスナップは期待どおりに機能します。

メディアクエリに関しては、このプライマリ入力モデルはタッチスクリーンに似ています。

ポインタは粗く、ホバリングをサポートしていません。

しかし、トラックパッドやキーボードはBluetooth経由で接続できることを覚えておいてください。

ページを見回している間、なぜホバースタイルがトリガーされないのか疑問に思うかもしれません。

これは、このデバイスには視覚的なフィードバックを提供する新しい方法が付属しているからです。

ユーザーが要素を見ると、タップする前に強調表示されます。

したがって、あなたのウェブサイトもSafari自体も、ユーザーがどこを見ているのかを知る必要はありません。

このシステムは、私たちがインタラクティブリージョンと呼ぶものに基づいています。

これらは、アクセス可能なマークアップとCSSのスタイリングに基づいて、SafariのWebKitエンジンによって自動的に生成されます。

ボタン、リンク、メニュー、または対応するARIAロールを持つ要素は自動的に強調表示されます。

カスタムスタイルがある場合でも、入力フィールドやフォーム要素にも同じことが言えます。

しかし、必ずカーソルを使用してください: ポインタ; 他のHTML要素については、何かがインタラクティブであることを示したい場合は。

それがどのように機能するか見てみましょう!

ここでは、ファイルリストUIを構築しており、リスト内のアイテムのカスタム要素があります。

カーソルを追加します: それらをハイライト可能にするためのポインタ。

しかし、このカスタム要素は内部的にdivを使用しており、カーソルプロパティは継承されるため、アイコンとラベルは独自の領域を取得し、別々にハイライトします。

ポインタイベントの設定：これらの内部divのどれも私が物事を片付けるのに役立ちません。

WebKitは、個別に強調表示する必要がないことを知っています。

また、常に同じイベントターゲットを取得するため、イベント処理コードを簡素化します。

CSS border-radiusプロパティを使用して、要素のすべてのコーナー、またはいくつかのコーナーにのみ半径を追加することで、ハイライトを形作ることもできます。

完璧な円を作ることもできますが、各要素の視覚的なスタイルを一致させることが重要です。

ねえティム、私たちが取り組んでいたウェブサイトを覚えていますか？

インタラクティブな地域を絞り込む必要があるのだろうか。

ティム：ええ、彼らが今どのように見えるか見てみましょう

デバイスを持っていなくても、xrOSシミュレーターを使用してハイライト領域をデバッグできます。

ウィンドウの周りでマウスカーソルを移動すると、見ている場所がシミュレートされ、クリックするとタップがシミュレートされます。

シミュレーターでSafariを開いて、私のウェブサイトのハイライトを美しくするために何ができるか見てみましょう。

このページを見て最初に気づいたのは、ナビゲーションバーのボタンがまったくハイライトされないことです!

エティエンヌが、SafariがカーソルCSSプロパティを使用して、要素がインタラクティブと見なされるべきかどうかを判断すると述べたことを思い出すかもしれません。

これらのボタンもmacOS Safariでハンドカーソルを取得できないことを知っているので、それが問題かもしれないという予感がしますが、Web Inspectorでチェックすることもできます。

それについてもっと知りたい場合は、「Safari開発者機能の再発見」セッションをご覧ください。

Webインスペクタを使用して、この誤ったグローバルカーソルスタイルを見つけました。

それを削除して、リンクをデフォルトのカーソルを持つリンクにしましょう:ポインタスタイル。

ねえ、すごい！

今、私たちはハイライトを得ますが、それは少し見当違いのようです。

実際には、それは私のウェブサイトの間違いを明らかにしています。

macOSでも、テキストだけが実際にインタラクティブです。

ボタン自体をクリックしようとすると、リンクをたどることはありません。

だから、私たちはウェブサイトで間違いを見つけ、それを修正することで、このプラットフォームでの外観を改善することもできます!

私には全面的な勝利のように思えます。

テキストだけでなく、ボタン全体をリンクの一部にします。

それがうまくいったかどうか見てみましょう。

私にはずっと良く見えます!

これで、ボタン全体がインタラクティブになり、ハイライトがエリア全体をカバーしています。

よく見ると、角が整列していないことに気付くでしょう。

Safariのハイライトはデフォルトでは半径が小さいですが、インタラクティブな要素に境界半径がある場合は、それを考慮に入れます。

直しましょう。

インタラクティブな要素に同じ境界半径を追加するだけです。

完璧！

今、ボタンは私たちが望むように強調表示されます。

そのうちの1つをタップしましょう。

ああ、それらのスコアはiPadに比べてちょっと速いです。

修正すべきことがもっとあると思いますが、後でそれに戻ります。

とりあえず、エティエンヌに戻って、あなたのウェブサイトにできるいくつかの最適化について聞いてみましょう。

エティエンヌ：ありがとう、ティム！

このプラットフォームを最適化する際には、いくつかのことを心に留めておく必要があります。

昔Retinaディスプレイを導入したとき、ピクセルの概念はもう少し抽象的になりました。

ウェブ開発者やデザイナーとして、私たちはCSSピクセルで作業し、必要な数のデバイスピクセルを使用してユーザーエージェントをハードウェアに適応させます。

今日、スクリーンの概念はもう少し抽象的になりつつあります。

フルスクリーン化をリクエストする場合、目標は単一の要素に集中することです。

ページの残りの部分は消え、同時にウィンドウはデフォルトのサイズにサイズ変更されます。

このデフォルトのサイズは、画面の寸法としてJavaScriptにも報告されるため、フルスクリーンでウィンドウと画面のサイズが一致することを期待しているウェブサイトは引き続き機能します。

しかし、このプラットフォームではフルスクリーンウィンドウのサイズを変更できることを覚えておいてください。

また、報告された画面の寸法よりも大きくなることさえできます。

スクロールとアニメーションに関しては、いつものように、特にすべてのアニメーションが可能な限り最高のフレームレートをターゲットにするこのデバイスでは、パフォーマンスが重要です。

パッシブスクロールイベントリスナーは、アニメーションがスクロールに干渉するのを防ぎます。

また、requestAnimationFrameを使用する場合は、各フレーム間の経過時間を常に測定します。

ウェブインスペクタのタイムラインは、パフォーマンスの問題を特定するのにも役立ちます。

Web Inspectorの技術トークで、それらについて詳しく知ることができます。

requestAnimationFrameといえば、ここでの私のアニメーションは少しびくびくしています。

そのランタイムは、animate()を呼び出す周波数に依存します。

そして、この周波数は、デバイスに応じて高くなるか低くなる可能性があります。

代わりにすべきことは、各更新の間の時間を測定し、これを使用してアニメーションの進行状況を計算することです。

それは十分にシンプルで、私のアニメーションをrequestAnimationFrameのリフレッシュレートから独立させます。

それがスコアアニメーションの問題だったと思います！

ティム：そうそう、もう直したよ。

デバイスで動作するかどうか見てみましょう。

それははるかに良く見えます、そして今、それは遅いまたは速い任意のフレームレートを持つデバイスに対して将来性があります。

ティーウェアはすべてウェブサイト上でかなり素敵に見えますが、私たちはさらに進むことができます。

彼らが本当にあなたのテーブルでどのように見えるかを見たい場合は、クイックルックを利用してウェブサイトを調整し、それを現実にするのは非常に簡単です。

iOSのARクイックルックと同様に、画像の周りにUSDZファイルを参照するアンカーを追加するだけで、シンプルな画像を魔法のクイックルック体験に変えます。

すごい！今、私はどれが収まるか本当にわかります。

エティエンヌ、どの茶器を選びますか？

エティエンヌ：最高のマッチを見つけるために、キッチンで試してみる必要があると思います。

しかし、これは印象的です。

デモは本当に素晴らしかったです。ナビゲートするのが速くて楽しかったです。

そして、クイックルックは本当に物事を全く別の次元にもたらしました。

あなたのウェブサイトに3Dコンテンツを統合する方法を見てみましょう。

AR Quick LookはもともとiOS 12で導入されました。

必要なのは、3Dモデルのプレビューを表示するために使用できる特別な属性と画像タグを持つUSDZファイルを指すリンクだけです。

この正確なセットアップはxrOSで動作し、RealityKitの高度な照明とレンダリングの恩恵を受けながら、ユーザーに3Dオブジェクトを自分のスペースに置く簡単な方法を提供します。

詳細を知りたい場合は、「USDエコシステムを探索する」を必ず見てください。

同じ線に沿って、HTMLモデル要素は潜在的なW3C標準として提案されています。

ページ内のARクイックルック、または3Dオブジェクトの画像タグのように考えてください。

完全なステレオスコピックビューと環境照明まで、すべてのデバイスで可能な限り最高のレンダリングが得られます。

まったく新しい要素を導入することは大きなステップなので、3Dオブジェクトのソースとユーザーインタラクションを有効または無効にするための属性を指定する簡単な方法から簡単に始めています。

JavaScript APIは少し豊かです。

カメラ、アニメーションなどにアクセスできます。

面白そう？

最新のSafariを実行している場合は、どのプラットフォームでもモデル要素機能フラグを有効にできます。

そして、物事をさらに進めたい場合は、ウェブ上で完全に没入型のシーンを構築するためのW3C標準であるWebXRの開発者プレビューをチェックしてください。

WebXRはWebGLに基づいており、多くの一般的なWebGLライブラリにはすでにサポートが組み込まれています。

3Dシーンのコードがある場合は、WebXRセッションをリクエストすることで、完全に没入型にすることができます。

マウスやトラックパッドでパンするようなものではありません。

あなたは文字通り現場の中に運ばれるでしょう。

あなたはそれを信じるためにそれを試さなければなりません。

xrOSでは、Safariの高度な設定でWebXR機能フラグを見つけることができます。

そして、これはほんの始まりに過ぎません。

没入型ウェブに関しては、探求すべきことがたくさんあります。

CSS変換やポインタイベントなどの技術は、この新しいプラットフォームで進化するに違いありません。

これが、AppleがW3Cウェブ標準の定義と開発に積極的に関与している理由です。

そして、インプットを提供する機会があります。

あなたの考えと楽しみにしていることをお知らせください。お聞かせください。

今日から新しい3D体験の実験を始めることができます。

また、インタラクティブな地域はxrOSシミュレータで簡単に確認できます。

バグが見つかった場合、フィードバックアシスタントはすべてのプラットフォームで利用できます。

そして、HTML、JavaScript、またはCSSに関連するものについては、WebKitバグトラッカーはbugs.webkit.orgにあります。

CSSといえば、今年はSafariに多くの新機能がありますので、「CSSの新機能」をお見逃しなく。

皆さん、ご参加いただきありがとうございます!

ティム:そして、没入型ウェブでお会いしましょう!

♪