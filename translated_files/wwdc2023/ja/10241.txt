10241

♪ ♪

アダム:こんにちは。私の名前はアダムで、SharePlayチームのエンジニアです。

今日は、多くの人が求めていたエキサイティングな新機能について話します。 

セッションのタイトルで推測したように、SharePlayでファイルを共有することについて話します。

まず、添付ファイルの転送の意味について話します。

ファイル、または共有したい大量のデータを「添付ファイル」と呼びます。 

次に、GroupActivitiesの新しいAPIであるGroupSessionJournalについて説明します。

その後、遅いジョイナーについて話し、最後に、DrawTogetherアプリでGroupSessionJournalを採用するのがどれほど簡単かを確認します。

添付ファイルの転送の意味から始めましょう。

描画アプリを通して話しましょう。

GroupSessionMessengerを使用して、2つのデバイス間で図面を同期できるようにしています。

しかし、キャンバスに画像をドロップするとどうなりますか?

さて、GroupSessionMessengerのサイズ制限のため、以前はSharePlayを利用できませんでした。

しかし、今では、デバイス間で超高速なメッセージングを提供するのと同じAppleインフラストラクチャで、添付ファイルも転送できるようになりました。

だから今、あなたの犬のかわいい写真をキャンバスに落とすと、それはこれまで以上に速く私たちのクラウドインフラストラクチャを介して転送されます。

これは、転送に必要なデータを最小限に抑え、アイドル待機時間を最小限に抑えるために、Appleテクノロジーの複数のレイヤーを利用して、すべてを可能な限り迅速に体験し、そのすべてがシステム層で行われます。

しかし、そうではありません。

SharePlayはユーザーのプライバシーを念頭に置いて構築されているため、転送するデータがデバイス間でエンドツーエンドで暗号化されていることを確認しながら、これらすべて行われます。

Appleは転送されるデータの内容について知らない。

そして、これは餅のかわいい犬の写真のためだけでなく、あなたが望むものなら何でもかまいません!

PDFのようなファイルを持っていますか？頑張れ！音声録音や注釈はどうですか?

コラボレーションされているユーザーコンテンツは、この新しいAPIによってこれまで以上に高速になりました。

さて、APIはどのように見えますか?

さて、すぐに飛び込みましょう!

慣れ親しむ主な目的は「GroupSessionJournal」です。

このオブジェクトはiOS 17では初めてです。

「GroupSessionMessenger」に慣れているように、「GroupSession」で初期化されます。

しかし、このオブジェクトの目的を理解することが重要です。

これは、GroupSession全体のすべての人にとって一貫性を保つオブジェクトです。

これは、ジャーナルで実行するアクションがすべての人に影響し、ジャーナル上のプロパティが同様にすべての人に同期されることを意味します。

いくつかの例を見ていきましょう。

ジャーナルを取得したら、「添付ファイル」AsyncSequenceを介して添付ファイルの突然変異を観察できます。

また、「追加」機能を使用して、任意のカスタム添付ファイルをアップロードできます。

あなたがしなければならないのは、あなたのタイプを譲渡可能なプロトコルに準拠させるだけです!

だから今、あるデバイスが「追加」を呼び出すと、「添付ファイル」AsyncSequenceが新しい添付ファイルを与えるだけでなく、GroupSessionの全員が同じイベントが発生し、アップロードしている添付ファイルを読み込むことができます!

同様に、「remove」関数を呼び出して添付ファイルを削除すると、全員の「添付ファイル」AsyncSequenceがイベントに合わせて更新されます。

そして、それはほとんどそれです。

この新しいAPIで添付ファイルをどれだけ簡単にアップロードして受信できるかがわかります。

DrawTogetherアプリでこれを実装する前に、この新しいAPIを利用する際のいくつかの大きな考慮事項について話しましょう。

そして、添付ファイルのサイズは無限大ではなく、実際には100MBに制限されています。

これは、ユーザーエクスペリエンスについて慎重に考えるために行われます。

これらの経験は高速である必要があり、デバイスは非常に高速でデータをアップロードおよびダウンロードすることしかできません。

したがって、送信される添付ファイルのサイズを常に最小限にする必要があります。

つまり、描画アプリの場合、キャンバスで許可されている写真を100MB以下に制限するかもしれません。

ユーザー生成コンテンツを中心としたデータはここでは完璧ですが、映画のようにユーザーが生成していないより大きな添付ファイルは、ユーザーのデバイスではなく、独自のサーバーから提供する必要があります。

次に、ライフサイクルがあります。

ジャーナルに掲載されたものはすべて、グループセッションに誰かがいる限り存在します。

これは、ジャーナルに添付ファイルを追加した人がGroupSessionから切断された場合でも、添付ファイルが固執することを意味します。

しかし、全員がGroupSessionを離れると、添付ファイルは彼らと一緒に削除されます。

GroupSessionMessengerとの統合に慣れている場合は、このトピックを覚えているかもしれません：遅いジョイナー。

通常、新しい人がGroupSessionに参加すると、アプリケーションは、グループの残りの部分に追いつくように、その人にあなたの世界の状態を再送信する必要があります。

これは、GroupSessionMessengerを採用するアプリケーションによって管理され、各デバイスがキャッチアップが必要な人にメッセージを送信することを含み、これはかなり高価になる可能性があります。

次の例を見てみましょう。 

グループセッションに2人いるとしましょう。

アダムとブライアンがいます。一方、クララはまだ参加していません。

だから、クララが加わる前に、アダムとブライアンは楽しく絵を描いています。

アダムは先に進んで犬の骨を描き、ブライアンも彼の側でそれを更新します。

今、クララは先に進んで参加しますが、彼女が参加するとき、彼女のキャンバスは空です!

彼女のデバイスは、彼女が彼らに追いつくように、アダムとブライアンがやっていた情報を取得する必要があります。

この時点で、アダムとブライアンは、彼らが世界の状態を理解しているものをクララに送らなければならず、クララのデバイスは収束して、彼女が同じポイントにいるようにします。

さて、これらの図面の場所に添付ファイルを追加すると、アダムとブライアンから送信されたメッセージはかなり大きくなることができます。

ご想像のとおり、これは問題になります。

1つのデバイスに画像を与えるためだけに、各人に100MBを再アップロードさせるでしょう。

さて、今、遅い参加者がGroupSessionJournalであなたのために処理されます。

レイトジョイナーは、他の人から再アップロードすることなく、ジャーナルにアップロードされた添付ファイルを受け取るため、より高速で帯域幅の広範な経験が少なくなります。

今、それは多くの情報だったので、楽しい部分に飛び込んで、職場の魔法を見て、DrawTogetherアプリでGroupSessionJournalを採用する方法を見てみましょう。

これは私たちが変更するDrawTogetherアプリです。

ご覧のとおり、下部にはSharePlayセッションを開始できるボタンと、セッションをリセットするためのゴミ箱ボタンがあります。

下部にキャンバスに載せたい写真を選択できるボタンがあれば、かなりいいと思います。そして、この下部に。

SwiftUIはこれを簡単に始めるので、すぐに飛び込みましょう!

修正する必要がある4つの主要なコンポーネントがあります。

まず、私たちの「キャンバス」モデルがあります。

これは、アプリ全体のメインモデルオブジェクトです。

ローカル参加者とリモート参加者の両方のすべてのストロークを追跡し、GroupActivitiesへのインターフェースです。

それから、私たちは3つの見解を持っています。

他の2つのビューのすべてのサブビューを持つ「ContentView」、先ほど見た下部のボタンを維持する「ControlBar」ビューと、ストロークのためにモデルからすべてのオブジェクトを描画する「CanvasView」、そしてすぐに画像もあります。

私たちのモデルから始めましょう。

2つのことを追跡するためにこれが必要です。

まず、ジャーナルから取得したすべての画像は、新しい構造体「CanvasImage」で追跡します。

第二に、1つを配置しようとしている場合は、ローカルで選択された画像とすべての画像。

それでは、Canvasに「GroupSessionJournal」を作成し、configureGroupSession関数で行うすべての添付ファイルを処理しましょう。

そして、ローカルで選択した画像をジャーナルに追加する関数を作成し、ビューから呼び出すことができます。

今、私たちはすべての非UIピースを手に入れました、先に進んでいくつかのビューを変更しましょう。

写真を選択するボタンから始めます。 

以前のことを覚えているなら、ControlBarにこのボタンを追加したいと思いました。

先に進んでPhotosUIをインポートし、「PhotosPicker」ビューを使用して新しいボタンを追加し、「selectedImageData」でモデルに直接配置しましょう。

先に進み、選択した写真を視覚化し、キャンバス上の必要な場所に移動できるPhotoPlacementViewと呼ばれるシンプルなビューを作成しました。

さあ、そのビューをContentViewに追加しましょう。

私たちの進捗状況を見てみましょう。

セッションを開始し、写真ボタンが表示されます。

写真を選んで、バム！ドラッグできる画像があります。

さて、最後の部分は、モデルからすべての画像を視覚化するために「キャンバス」ビューを変更することです。

試してみると、画像の最後の場所を選択するとすぐに、画像が両側に表示されることがわかります。

ふぅ。

今、私たちは終わり、私たちはかなりクールな経験をしたと思います。

チューニングしてくれてありがとう。

このセッションを見たので、GroupActivitiesでどのような素晴らしい体験を構築できるかを確認してください。

GroupActivitiesをまだ採用していない場合は、SharePlayがアプリにとって何を意味するのかのイントロとして、「SharePlayをアプリに追加」をチェックしてください。

また、このDrawTogetherアプリをどのように始めたか、またはGroupActivitiesを採用する方法の例を見たい場合は、「GroupActivitiesでカスタムエクスペリエンスを構築する」をチェックしてください。

もう一度ありがとう、そして私たちはあなたが作るものを見るのが待ちきれません!

♪ ♪