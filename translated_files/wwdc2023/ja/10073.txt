10073

♪まろやかなインストゥルメンタルヒップホップ♪

♪

イスラエル・パストラーナ・ビセンテ:こんにちは、「空間入力のためのデザイン」へようこそ。

私の名前はイスラエルで、ユージーンと一緒にここにいます。

私たちはアップルデザインチームのデザイナーです。

ユージン・クリヴォルチコ:今日は、目と手の相互作用を設計することについて話します。

これらの新しい入力方法の特別な点と、当社のプラットフォームでそれらを最大限に活用する方法について説明します。

イスラエル：利用可能なすべての入力モダリティを簡単に見てみましょう。

空間入力を使用すると、ボタンを見て指を一緒にタップして選択するだけで、腕を膝の上でリラックスさせることができます。

私たちのシステムは、遠くでUIと快適に対話するように設計されています。

場合によっては、要素と直接対話することもできます。

例えば、指先を使って仮想キーボードで入力します。

空中に手を握ると疲労を引き起こす可能性がありますが、いくつかのタスクは直接対話するのに適していることがわかります。

今、目と手は新しい空間入力ですが、入力しなくても検索に音声などの他の使い慣れた入力を使用することもできます。

または、キーボードとトラックパッドは、物事を成し遂げるのに最適です。

最後に、ゲームコントローラーを接続してお気に入りのゲームをプレイすることもできます。

私たちは、最も新しくてエキサイティングな空間入力、つまり目と手に焦点を当てます。

目と手を使って対話することは、いくつかの点で明確です。

まず、それは個人的なことです。

あなたの目の動きと手のジェスチャーはあなたにとってユニークです。

デバイスの内側と外側のカメラの配列は、プライバシーを尊重した方法であなたの自然な動きのすべての詳細をキャプチャします。

次に、それは快適です。

デバイスはあなたの周りの広い領域を見るので、あなたのそばに手を置いたままにすることができます。

最後に、それは空間的な相互作用を正確にします。

デバイスはすべてのデータをフィルタリングし、アプリで使用できる正確なインタラクションに変換します。

したがって、空間入力は、インタラクションを制御するための高い精度を提供しながら、信じられないほど快適に感じる個人的な入力です。

今日は、目と手を使ってアプリを自然に操作する方法について説明します。

目から始めましょう。

目は空間体験の主なターゲティングメカニズムです。

システム内のすべてのインターフェイスは、あなたが見ている場所に反応します。

そして、どんなに遠く離れていても、それらを見るだけで、あらゆる要素を簡単にターゲットにすることができます。

さて、私は対話するのが快適なアプリを作る方法について話します。あなたの目で簡単にターゲットにする方法。プライバシーを尊重しながらあなたが見る場所に応答するインターフェースを作る方法。そして最後に、目の意図が私たちのレイアウトを簡素化し、ユニークな支援オプションを提供する方法。

目に快適なアプリを構築するには、コンテンツがデバイスにどのように表示されるかを検討する必要があります。

最初に考慮すべきことはここにあります。

アプリには無限のキャンバスがありますが、視野内のコンテンツしか表示できません。

視野内では、中央を見るのが最も快適で、端を見るのはあまり快適ではありません。

だから、視野内に収まるアプリを設計し、首と体の動きを最小限に抑えます。

アプリのメインコンテンツを視野の中央に保つようにしてください。あなたの目にとって最も快適な領域です。

視野の端を見るのは目に疲れる可能性があるので、アクセス可能であり、メインコンテンツに干渉しない二次的なアクションなど、常に必要のないコンテンツにこれらの領域を使用してください。

視野内にコンテンツを配置することで、常にアプリで目と首の快適さを最大化するようにしてください。

さて、目の快適さについて考えるときは、深さも考慮する必要があります。

深さは空間体験のユニークな特徴です。

コンテンツを近くまたは遠くに配置すると、プロジェクトに異なる感情が生まれます。

しかし、私たちの目は一度に1つの距離に集中し、焦点の深さを頻繁に変更すると、眼精疲労を引き起こす可能性があります。

インタラクティブなコンテンツを同じ深さに保ち、UIを切り替えるのが楽に感じられるようにしてください。

たとえば、モーダルビューを表示すると、z軸のメインビューがプッシュされ、モーダルは元の距離に配置されます。

同じZ位置を維持することで、あなたの目は新しい距離に適応する必要はありません。

これで、この例のように、左側にタブバー、下部にセグメント化されたコントロールを使用して、微妙な変更を使用して階層を通信できます。

このようにして、目の不快感を避けながら、意味のある深さを使用しています。

アプリを快適にする方法を見たので、あなたの目で使いやすくする必要があります。また、あなたの目で使いやすくする必要があります。

目は非常に正確ですが、私たちの目がUI要素をうまくターゲットにするのに役立つ特定の資質があります。

私たちの目は自然に、物体の真ん中に私たちの注意を導く形に焦点を当てています。

私たちの目を助けるために、円、丸薬、丸みを帯びた長方形のような丸い形を使用してください。

鋭利な形状の使用は避けてください。

鋭いエッジを使用すると、目は外側に集中する傾向があり、目の精度が低下します。

また、形状を平らに保ち、エッジに注意を喚起する太い輪郭や効果を避けてください。

そして最後に、寛大なパディングを使用して、テキストとグリフを要素の中央に配置するようにしてください。

したがって、常にUIが要素の中心に目を導くように設計されていることを確認してください。

今、私たちの注意は私たちの要素の真ん中にあるので、あなたのコントロールに適したサイズを見てみましょう。

あなたの要素がアイターゲットに必要な最小領域は60ポイントです。

しかし、要素は60ポイントより小さくすることができます。

サイズと間隔を組み合わせた最小目標領域を達成できます。

レイアウトの要素間に寛大な間隔を使用してください。

これは、あなたの目で迅速かつ正確にターゲットを絞るのに役立ちます。

繰り返しになりますが、最小ターゲットエリアである60ポイントを尊重し、サイズと間隔を組み合わせて、UIを目で見栄えよく使いやすくすることが非常に重要です。

箱から出してすぐに、標準コンポーネントはターゲットにしやすいサイズを持っています。

これらのコンポーネントをできるだけ使用してください。

また、自分で使用する場合は、サイジングに関するガイドラインに従ってください。

ポイントとレイアウトの詳細については、セッション「空間ユーザーインターフェイスの設計」をご覧ください。

ターゲット領域があなたの目にとってどれほど重要であるかを学んだので、このターゲット領域をスペース内の任意の位置に維持する必要があります。

そのために、UIを拡張する方法を理解する必要があります。

2つの異なるスケールメカニズムを見てみましょう。

このシステムは、アプリウィンドウに動的なスケールを提供します。

窓が遠ざかるにつれて大きくなり、近づくにつれて小さくなるのを見ることができます。

ダイナミックスケールにより、ウィンドウがどこに配置されていても、UIは同じ視野を満たし、ターゲット領域のサイズを維持します。

代わりに固定スケールを使用すると、UIが離れるにつれて小さくなります。

固定スケールはインターフェイスのサイズを変更し、アプリでの使用を困難にします。

これを並べて見てみましょう。

動的スケールはUIとターゲット領域を同じサイズに保ち、固定スケールはサイズを変更し、ターゲット領域を小さすぎます。

カスタムUIを作成するときは、ダイナミックスケールを使用して、目が常にすべてのコントロールをターゲットにできるようにしてください。

スケールに加えて、オリエンテーションはアプリの使いやすさにも影響します。

インターフェイスが斜めになっていると、読みにくく、使いにくいです。

そのため、システムウィンドウは常に人と向き合っています。

しかし、アプリでカスタムウィンドウを作成する場合は、常にUIを視聴者に向けるようにしてください。

先ほど見たように、ウィンドウとUIの正しいスケールと向きは、あなたの目で正確さを確保するための基本です。

このプラットフォーム上のウィンドウの動作の詳細については、セッション「空間設計の原則」をご覧ください。

目は非常に斬新な入力です。そして、あなたのインターフェースがあなたの目に反応するようにすることは本当に重要です。

インタラクティブな要素が強調されるとき、あなたはあなたの目が相互作用を推進していることを理解します。

ボタンのグループを見るとどうなるか見てみましょう。 

それぞれを見て、彼らがどのように強調するかを見てください。

すべてのインタラクティブな要素を強調表示する必要があり、ホバー効果でこれを行います。

しかし、あなたの目は速く動くので、効果は微妙で、お気に入りの写真を見るときのように、どんなコンテンツでも機能し、目立つことなく意図を強化する必要があります。

ホバー効果のおかげで、システムが提供するすべてのコントロールは、それらを見ると強調表示されます。

アプリのカスタム要素を作成する場合は、ホバー効果を使用して目のフィードバックを追加し、要素が反応するようにします。

今、目の意図は非常に敏感な情報です。

目のデータを扱う際には、プライバシーが最優先事項です。

ホバー効果はアプリのプロセスから発生するため、ジェスチャーによってトリガーされた要素にインタラクションがある場合にのみ、どの要素がフォーカスされているかの情報を取得します。

あなたの目で要素にホバリングすることは、意図の合図です。

あなたが長い間何かを見るとき、私たちはあなたがそれに興味を持っていることを知っています。

それについてより多くの情報をお見せする絶好の機会です。

たとえば、ボタンは、あなたがそれらを見るにつれて表示するツールチップを持つことができます。

また、タブバーを集中すると拡大し、各タブのラベルが表示されます。

最後に、システムが提供する検索フィールド内のマイクグリフに焦点を当てると、Speak to Searchがトリガーされ、このレイヤーが明らかになり、目と声だけで検索を実行できます。

これらのシステム要素はすべて、焦点が合っていないときにクリーンなUIを維持しながら、必要なときに余分な情報を提供します。

アプリを作成するときにそれらを活用してください。

また、フォーカス情報がアプリに送信されないように、プライバシーを念頭に置いて構築されています。

目の意図はまた、支援技術のための素晴らしい機会を提供します。

たとえば、ドウェルコントロール機能を使用すると、目だけでコンテンツを選択できます。

この例では、短時間ボタンに焦点を合わせると、Dwell Control UIが表示され、手でタップジェスチャーを実行することなくボタンが選択されます。

では、目のインタラクションを設計することについて、私たちは何を学びましたか?

視聴者の前、視野の内側にコンテンツを配置し、深さを責任を持って使用することで、アプリを目に快適にする方法について学びました。

次に、使いやすいインターフェイスを設計する方法と、あなたの目を要素の中心に導く方法を見てみました。

また、コントロールの60ポイントの最小目標領域を尊重することがいかに重要であるかを強化しました。

要素にホバー効果を追加することで、常にインタラクティブ性を伝え、ターゲティングを強化する方法。

そして最後に、目の意図に関する追加情報を明らかにするUI要素をどのように活用できるか。

これは素晴らしかったと思いますし、さらに多くのものがあります。

私たちは、目が素晴らしいターゲットメカニズムであり、手で組み合わせるとはるかに強力になるのを見てきました。

さて、それについて話すためにユージーンに渡します。

ユージーン:ありがとう、イスラエル。

手について話しましょう。

ターゲティングのための目と組み合わせることで、手のジェスチャーはシステム全体で対話する主な方法です。

指をつまむことは、携帯電話の画面を押すのと同じです。

このシステムは、他のおなじみのジェスチャーをサポートしています。

たとえば、ピンチしてドラッグしてスクロールしたり、ズームや回転などの両手ジェスチャーを実行したりできます。

これらすべての場合において、UIフィードバックが手の動きを継続し、ジェスチャーとのつながりを感じるのに本当に役立つことに注目してください。

ジェスチャーはシステム全体で同じように機能し、マルチタッチジェスチャーと同様のロジックに従います。

これは、人々が相互作用を実行する方法について考えるのではなく、本当に経験に集中できることを意味します。

これが、あなたの経験を設計する際にこれらのおなじみのパターンに頼り、人々の期待に合った方法でジェスチャーに応答する必要がある理由です。

場合によっては、あなたの経験の一部は、標準的なジェスチャーでは簡単に表現できないユニークな行動かもしれません。

この場合、カスタムを定義したいと思うかもしれません。

カスタムジェスチャーを成功させるためのヒントをいくつか紹介します。

まず、人々がすぐに使い方を学ぶことができるように、ジェスチャーが説明と実行が簡単であることを確認してください。

ジェスチャーの競合を避けることも重要です。

カスタムジェスチャーは、標準的なシステムセットや、会話で使用する一般的な手の動きとは明確に異なる必要があります。

これは、人々が緊張や疲労なしに一貫して繰り返すことができるジェスチャーでなければならず、それは誤った活性化の割合が低い。

支援技術を使用してシステム全体で対話している人々に留意し、そのような場合にあなたのジェスチャーがどのように機能するかを検討してください。

アクセシビリティの詳細については、「アクセス可能な空間体験を作成する」セッションをチェックしてください。

ジェスチャーは人によって異なることを意味するので、カスタムジェスチャーが意図していないメッセージを送信しないことを確認してください。

これはすべて、達成するのが難しいバランスかもしれないので、UIアフォーダンスの形でフォールバックを検討する価値は常にあります。

私たちの入力モデルの最もエキサイティングな側面の1つは、意図のシグナルとして目を使用する機会です。

目の方向と手のジェスチャーを組み合わせることで、他のプラットフォームでは不可能な正確で満足のいくインタラクションを作成できます。

ズームジェスチャーをもう一度見て、私の言いたいことを見てみましょう。

ジェスチャーの開始時に、ズームの原点は、その瞬間にあなたの目が画像内のどこに焦点を合わせているかによって決まります。

これにより、ズームインすると、その特定の領域が拡大され、中央に配置されます。

その結果、周りを見回してこの簡単なジェスチャーを実行するだけで、画像を簡単にナビゲートできます。

これは本当に魔法のように感じられ、同時に100%期待されています。

あなたが見ているポイントは、その相互作用の意図を自然に示しています。

この動作のもう1つの例は、マークアップでのポインタの動きです。

描画するには、マウスポインタと同様に、手でブラシカーソルを制御しますが、キャンバスの反対側を見てタップすると、カーソルがそこにジャンプして、見ている場所に着地します。

これは正確さの感覚を生み出し、大きなキャンバスをすばやく覆うのに役立ちます。

これらは、単純な行動をより正確で満足のいくものにするために目の方向を使用する相互作用の例です。

目は、要素をターゲットにするだけでなく、その相互作用のためのより詳細な場所を暗黙的に提供するために使用されます。

これは、よりインテリジェントな方法で相互作用に応答することを可能にする入力モデルの本当に強力な側面です。

では、ダイレクトタッチについて話しましょう。

システム全体で、私たちは手を差し伸べ、あなたの指先を使って対話できることをサポートしています。

たとえば、Safariを近づけて、ページを直接スクロールすることができます。

また、両手を使って仮想キーボードに入力したり、より多くの空間体験をして、手の届く範囲で3Dコンテンツを操作することもできます。

遠くでのインタラクションは、目でコントロールをターゲットにするのが簡単で、最小限のジェスチャーを実行しながら手を休ませることができるため、長い間快適に過ごせます。

直接相互作用のために設計するときは、空中で手をつなぐとしばらくすると疲労を引き起こすことを心に留めておく必要があります。

それでも、特定のアプリは、綿密な検査やオブジェクト操作を誘う経験、または現実世界の経験から筋肉の記憶の上に構築されたインタラクティブなメカニックなど、直接触れるために手の届くところにコンテンツを配置することで恩恵を受けるでしょう。そして一般的に、身体活動が経験の中心にあるときはいつでも。

触覚応答の欠如は、直接的な相互作用のために設計する際に考慮すべきもう一つのことです。

物理的な世界で何かに触れるたびに、私たちの手は私たちの知覚に不可欠な多くの多感覚フィードバックを受け取ります。

私たちが手を差し伸べて仮想コンテンツに触れるとき、これはどれも起こりません。

そして、その相互作用を機能させるためには、不足している感覚情報を他の種類のフィードバックで補う必要があります。

キーボードボタンでこの課題にどのようにアプローチしたかを見てみましょう。

ボタンは実際にプラッターの上に上げられ、直接押すように招待されます。

指がキーボードの上にある間、ボタンはホバー状態と、ボタンの表面に近づくにつれて明るくなるハイライトを表示します。

それは近接キューを提供し、指をターゲットに導くのに役立ちます。

接触の瞬間、状態の変化は迅速かつ応答性があり、一致する空間音響効果を伴います。

これらの追加のフィードバック層は、不足している触覚情報を補い、直接的な相互作用を信頼性と満足感を感じさせるために本当に重要です。

オーディオは、システム全体の仮想コンテンツと入力を接続する上で特別な役割を果たします。

それの詳細については、「没入型サウンドデザインを探る」というセッションをチェックしてください。

要約すると、手との相互作用を設計するためのテイクアウトは次のとおりです。

人々がインタラクションの代わりにコンテンツに集中できるように、システムと一致するジェスチャー言語を使用してください。

標準セットで目的の動作を達成できない場合にのみ、カスタムジェスチャーを導入するように注意してください。

意図の合図として目を使って、あなたの相互作用を改善する方法を探してください。

直接的な相互作用は、それがあなたの経験の中核にある場合にのみ使用してください。

そして、もしそうなら、不足している感覚情報を補うために広範なフィードバックを提供してください。

今日は、目と手との空間的相互作用のための設計原則のいくつかについて話しました。

私たちは快適さと人間工学についてたくさん話しました。

ソフトウェアがこのプラットフォームでのインプットにどのように見え、行動し、反応するかについては非常に多くの方法があるため、これらの経験が快適でアクセス可能であることを確認するために、デザイナーと開発者にはより多くの責任があります。

デバイスでアプリを実行することで、人々はあなたの仕事を自分のスペースに歓迎し、それに完全な注意を払います。

ソフトウェアはもはや画面に含まれていません。

代わりに、それは人々の物理的な環境のより重要な部分を占め、彼らの自然な体の動きに反応することが許されています。

手を使って仮想コンテンツを操作することも、ほとんどの人にとって非常に新しいことです。

だからこそ、明確なフィードバックを提供することで彼らを導き、可能な限り身近な相互作用パターンに頼ることが非常に重要です。

他のプラットフォームの設計から知っているように、優れた入力経験は、あなたが考える必要がないものです。

ソフトウェアの応答は、あなたの体の動きの自然な継続となり、相互作用の意図に完全に一致します。

入力モデルの基礎として目を使用する私たちの能力は、魔法の精度で相互作用に応答する機会を開きます。

私たちはそれが本当に強力だと思います、そして、あなたが空間媒体のための楽しくて斬新な相互作用を作成するためにそれを使用することを願っています。

講演中に参照したセッションを必ず確認してください。

見てくれてありがとう!

イスラエル:アディオス!

♪