10184

♪ ♪

Can：こんにちは、私はCan Aranで、iOS System Experienceチームのエンジニアです。

ライブアクティビティについてお話しできて光栄です。

この講演では、ライブアクティビティの概要を説明します。

次に、ライブアクティビティのライフサイクルを経ます。

最後に、あなたの活動のための没入型でシンプルなUIを構築する方法を紹介します。

まず、ライブアクティビティで何ができるかを掘り下げます。

ライブアクティビティは、イベントやタスクの進捗状況を追跡するための没入型で glanceable方法です。

ライブアクティビティには個別の開始と終了があり、バックグラウンドアプリのランタイムから、またはプッシュ通知を使用してリモートでリアルタイムの更新を提供できます。

ユナイテッド航空とMLBの素晴らしい例を次に示します。

ライブアクティビティは、iPhone 14 ProとPro Maxでさらに没入感があります。

ダイナミックアイランドは、アプリがバックグラウンドにあるときに、システム全体にライブアクティビティを表示します。

1つのライブアクティビティがアクティブになると、可変幅の「コンパクト」プレゼンテーションを使用してレンダリングされます。

ダイナミックアイランドは、一度に最大2つのライブアクティビティを表示します。

これらのライブアクティビティの1つはTrueDepthカメラに取り付けられ、もう1つは独自の切り離されたビューでレンダリングされます。

これらのライブアクティビティは両方とも「最小限の」プレゼンテーションを使用します。

いつでも、ライブアクティビティを長押しして「拡張された」プレゼンテーションを表示し、さらに目を見やすい情報を与えることができます。

拡張されたプレゼンテーションでは、ビューはアプリ内のさまざまな領域に深くリンクすることができ、豊富なユーザーエクスペリエンスを提供します。

iOS 17のライブアクティビティにはいくつかの新しい体験があります。

ロック画面とダイナミックアイランドに加えて、ライブアクティビティはスタンバイに表示されます。

そして今、iPadはライブアクティビティもサポートしています。

iPadOSでの実装を有効にし、Crumbl Cookiesのように、没入型のライブアクティビティをiPadに持ち込みます。

iOS 17では、WidgetKitとSwiftUIを使用して、ライブアクティビティにインタラクティブ性を追加できます。

ボタンやトグルを追加して、ユーザーエクスペリエンスを向上させることができます。

ルカのビデオ「ウィジェットに命を吹き込む」で、ウィジェットにインタラクティブ性をもたらす方法の詳細をご覧ください。

ライブアクティビティはActivityKitフレームワークに依存しており、アプリがライフサイクルをリクエスト、更新、管理できるようにします。

それらはSwiftUIとWidgetKitを使用して宣言的にレイアウトされています。

以前にホーム画面のウィジェットを実装したことがあれば、これは非常に身近に感じるでしょう。

ライブアクティビティは、アプリがフォアグラウンドにあるときにリクエストできます。

アプリは、個別のユーザーアクション、おそらくイベントを「フォロー」した後、またはタスクを明示的に開始した後にのみ、ライブアクティビティを要求する必要があります。

これは、ポジティブなユーザーエクスペリエンスを確保するために不可欠です。

ライブアクティビティは、通知と同様にユーザーモデレートされます。

誰かがあなたのアプリのためにそれらを完全に却下またはオフにすることができます。

APIでは、ロック画面から3つのダイナミックアイランドプレゼンテーションすべてまで、すべてのプレゼンテーションをサポートする必要があります。

スタンバイでは、システムはロック画面のプレゼンテーションをスケーリングして画面を埋めます。

バックグラウンドランタイムに依存することに加えて、アプリは「ライブアクティビティ」プッシュタイプのプッシュ通知を使用して、ライブアクティビティをリモートで更新できます。

プッシュ通知でライブアクティビティを更新する方法の詳細については、ジェフのビデオをご覧ください。

アプリのライブアクティビティは、ライフサイクル中にさまざまな段階を経ます。

私は、絵文字レンジャーアプリからヒーローを選択し、冒険に連れて行くことができるライブアクティビティを構築しています。

冒険の間、主人公は挑戦に直面し、ボスと戦います。

この冒険の重要な瞬間をライブアクティビティで表示します。

このライブアクティビティは、ヒーローの冒険に関する最も重要な情報を表示します。

これには、ヒーローの名前と統計、アバター、健康レベル、そしてこのヒーローが冒険で経験したことについての説明が含まれています。

ライブアクティビティのライフサイクルには、4つの主要なステップが含まれています。

アクティビティをリクエストすることから始めます。

開始したら、最新のコンテンツで更新してください。

それまでの間、それを終わらせる人々など、状態の変化に反応するためにあなたの活動を観察してください。

タスクが完了したら、必ずアクティビティを終了してください。

ライブアクティビティのリクエストはとても簡単です。

アプリがフォアグラウンドにあることを確認し、初期コンテンツと必要なアクティビティリクエストデータがあるようにアプリを設定します。

Emoji Rangersアプリでライブアクティビティをリクエストする前に、「ActivityAttributes」を実装して、ライブアクティビティの静的および動的データのセットを定義することから始める必要があります。

私はそれを「AdventureAttributes」と呼んでいます。

「AdventureAttributes」は、ヒーローである1つの静的データを記述します。

また、ヒーローのヘルスレベルとイベントの説明をカプセル化する、必要なカスタム「ContentState」を定義します。

これらのプロパティが変更されると、ライブアクティビティUIが更新され、冒険の現在の状態を画面に表示できるようになります。

動的データと静的データの準備ができたので、アドベンチャーアクティビティのリクエストを設定します。

ヒーローと一緒にAdventureAttributesのインスタンスの作成を開始し、ヒーローのヘルスレベルとイベントの説明で最初のコンテンツを設定します。

各アクティビティコンテンツは、コンテンツが古くなったと見なされたときにシステムに通知するために、古い日付を提供することができます。

今のところ、私はゼロで合格します。

コンテンツの関連性スコアは、いくつかのアドベンチャーアクティビティが開始されたときに各ライブアクティビティが表示される順序を決定します。

別のアドベンチャーアクティビティを開始する場合は、それぞれに異なる関連性スコアを指定します。

関連性スコアに合格することはオプションです。

デフォルト値はゼロです。

アクティビティをリクエストできるようになりました。

属性、初期コンテンツ、プッシュ通知タイプを渡します。

プッシュ通知タイプは、ライブアクティビティがActivityKitプッシュ通知で動的コンテンツの更新を受信するかどうかを示します。

この例では、「nil」に設定します。つまり、このアクティビティはローカルでしか更新を受信できません。

このライブアクティビティを開始するには、絵文字レンジャーアプリのライブアクティビティ設定を有効にする必要があります。

ライブアクティビティをリクエストできるようになったので、ヒーローがスリリングなタスクを経験したときに冒険を更新する方法を見ていきます。

動的属性は、ライブアクティビティをいつ更新するかを教えてくれます。

イベントの説明やヒーローのヘルスレベルが変わるたびに、アクティビティを更新します。

やばい！主人公はボスから大打撃を受ける。

そこで、健康レベルの変化を反映し、イベントを説明する「contentState」を作成します。

ヒーローの体力レベルが大幅に低下したので、アラートを送信する必要があります。

そのためにアラート設定を作成します。

これにより、ライブアクティビティで重要な情報が変更された場合、iPhone、iPad、または同期されたApple Watchにアラートが表示されます。

この場合、ヒーローは重傷を負い、癒すためにポーションが必要です。

設定のタイトルと本文はApple Watchでのみ使用され、通知として表示されます。

iPhoneとiPadでは、更新されたコンテンツを含むアクティビティUIが指定されたサウンドで表示されます。

これで、更新されたコンテンツとアラート設定を使用して、アクティビティオブジェクトの更新APIを呼び出すことができます。

これにより、ライブアクティビティUIが更新され、ユーザーがこの更新で警告されるようになります。

アクティビティ状態の変更は、ライブアクティビティのライフサイクル中いつでも発生する可能性があります。

「開始」、「終了」、「却下」、「古い」の4つの状態があります。

アクティビティオブジェクトのactivityStateUpdates APIを使用してこれらの状態を観察し、更新を非同期に受信します。

アクティビティが却下されると、私はもう冒険データを追跡していないことを確認し、進行中のアクティビティを表示しないようにアプリのUIを更新します。

また、activityState APIを通じて状態をチェックして、必要に応じて同期的に取得することもできます。

私のヒーローは多くのことを経験しました。

冒険のライブアクティビティを終わらせる時が来ました。

アクティビティを終了できるようにするには、最終的なコンテンツを作成することから始めます。

私のコンテンツは、ヒーローがボスを倒す冒険の最終状態を示します。

次に、UIの解雇ポリシーを決定します。

デフォルトのポリシーは、この場合に適しています。

このポリシーは、誰かがロック画面を見て冒険の終わりに何が起こったのかを見ることができるように、冒険情報が終了後しばらくの間ロック画面に表示されることを保証します。

私は今、冒険活動を終了し、ヒーローを休ませることができます。

ライブアクティビティのライフサイクルに関するすべてのロジックを構築しました。

アクティビティUIに焦点を当てる時が来ました。

Emoji Rangerウィジェット拡張機能には現在、WidgetBundleに2つのウィジェットがあります。

WidgetBundleにライブアクティビティの設定を追加する必要があります。

私はそれを「AdventureActivityConfiguration」と呼びます。

「AdventureActivityConfiguration」はウィジェットインフラストラクチャを活用し、本体にWidgetConfigurationを返す必要があります。

ライブアクティビティの内容を説明するActivityConfigurationオブジェクトを作成します。

プレゼンテーションの終了ごとに、ActivityConfigurationオブジェクトは、静的および動的属性とアクティビティIDを格納するActivityViewContextを提供します。

このコンテキストは、設定に渡された属性タイプに基づいて作成されます。

このタイプは、アクティビティが要求される属性と一致する必要があります。

アクティビティ設定を正常に初期化できるように、「AdventureAttributes」タイプを渡します。

「ActivityConfiguration」の最初のクロージャは、ロック画面のUIを指定します。

アクティビティの更新でビューのコンテキストが変更されると、このUIは更新ごとにレンダリングされます。

ウィジェットと同様に、ライブアクティビティのロック画面UIのサイズは提供していませんが、システムに適切な寸法を決定させます。

絵文字レンジャーのアクティビティでは、ネイビーブルーの背景のロック画面にヒーロー情報、名前とアバター、ヘルスレベル、イベントの説明を表示します。

「AdventureLiveActivityView」は、渡されたビューコンテキストを介してすべての情報を持ちます。

ロック画面での私のライブアクティビティはシンプルでエレガントに見え、ヒーローが冒険で経験していることについて必要な情報がすべて揃っています。

ロック画面のUIをまとめたので、ダイナミックアイランドのプレゼンテーションを実装する必要があります。

コンパクト、ミニマル、拡張の3つのプレゼンテーションがあります。

私のアプリのライブアクティビティがシステムで実行されている唯一のものである場合、コンパクトなプレゼンテーションを使用して表示されます。

コンパクトなプレゼンテーションには、先行と後続の2つの領域があります。

彼らは一緒に現れ、ダイナミックアイランドでまとまりのあるプレゼンテーションを形成します。

スペースが限られているため、先頭と後続のスペースに表示する必須コンテンツを選択してください。

ユーザーは、ここのコンテンツを見ることで、特定のアクティビティを特定できるはずです。

ActivityConfigurationオブジェクトの「DynamicIsland」クロージャで、私は再びビューコンテキストにアクセスして、拡張されたコンパクトリーディング、コンパクトトレーリング、および最小限のビューを作成できます。

これらのプレゼンテーションのそれぞれを表すために、DynamicIslandビュービルダーを作成する必要があります。

私のヒーローの冒険のために、ヒーローアバターをリーディングコンテンツに追加し、ヘルスレベルをトレーリングビューに追加します。

私はまた、私のヒーローの健康レベルに基づいてダイナミックな色合いを持っています。

冒険のためのコンパクトなプレゼンテーションの準備が整いました。

複数のアプリがライブアクティビティを開始すると、システムはどのライブアクティビティを表示するかを選択し、それぞれの最小限のプレゼンテーションを使用して両方を表示します。1つの最小限のプレゼンテーションはダイナミックアイランドに添付され、もう1つは切り離されて表示されます。

最小限のビューは、作業するスペースが非常に限られているため、最も重要な情報のみを持つ必要があります。

私のライブアクティビティの最小限のビューでは、最も重要な情報はヒーローとヒーローの健康なので、アバターと健康レベルをダイナミックな色合いで表示します。

このようにして、ユーザーは最小限のビューを見ることで、いつヒーローを助けるべきかを知ることができます。

ユーザーがコンパクトまたは最小限のプレゼンテーションでライブアクティビティをタッチして保持すると、システムは拡張プレゼンテーションでコンテンツを表示します。

私もそれを支持する必要があります。

拡張されたプレゼンテーションの場合、システムは拡張されたプレゼンテーションを異なる領域に分割します。

DynamicIslandビュービルダーの最初の閉鎖は、拡張されたコンテンツを表します。

そのクロージャ内で、各セクションのコンテンツは、特定の位置を通過する展開された領域で定義できます。

ヒーローの名前とアバターを先頭のスペースに追加し、ヒーローの統計を後続のスペースに追加し、最後にヘルスバーとイベントの説明を一番下のスペースに追加します。

結局、私のダイナミックアイランドUIはシンプルに見え、冒険に必要なすべての情報を提供します。

今、私はお気に入りのヒーローと一緒に冒険に行き、作成したばかりのシンプルで没入感のあるライブアクティビティUIに従う準備ができています。

独自のUIを設計しながら、ライブアクティビティで最も重要なコンテンツのみを表示します。

ユーザーがライブアクティビティをタップすると、シンプルに保ち、アプリに追加の詳細を表示します。

詳細については、「デザインダイナミックライブアクティビティ」をご覧ください。

ライブアクティビティを強力なツールとして使用して、進行中のアクティビティの glanceableとライブ情報を表示します。

シンプルな設定で、iOSとiPadOSでユーザーとやり取りするダイナミックな方法を作成します。

アップデートのプッシュの詳細については、「プッシュ通知でライブアクティビティを更新する」をチェックしてください。ActivityKitで何を構築するかを見るのが待ちきれません。

見てくれてありがとう!

♪ ♪