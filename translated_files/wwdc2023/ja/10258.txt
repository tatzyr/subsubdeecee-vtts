10258

♪ ♪

アナント：こんにちは。「アプリでシンボルをアニメーション化する」へようこそ。

私の名前はアナントで、UIKitのエンジニアです。

SFシンボルは、Appleのインターフェースの象徴的な部分です。

メニュー、ツールバー、サイドバーなどでゴージャスに見えます。

そして、人々はシンボルに精通しているので、あなたのアプリをより直感的に使用できるようにします。

iOS 17とmacOS Sonomaでは、アニメーションでシンボルを強化し、これまで以上にあなたのアプリに命を吹き込んでいます。

「シンボルエフェクト」とも呼ばれる新しいシンボルアニメーションのツアーから始めます。

次に、SwiftUI、UIKit、AppKitの新しいAPIをガイドして、アプリにシンボルエフェクトを追加します。

そして最後に、シンボル効果を本当に輝かせるためのヒントをいくつか紹介します。

では、飛び込みましょう。

iOS 17とmacOS Sonomaは、カスタムシンボルを含むあらゆるシンボル画像に適用できるユニバーサルアニメーションのコレクションを導入しています。

これらのアニメーションは、Bounce、Pulse、Variable Color、Scale、Appear、Disappear、Replaceと呼ばれます。

「SFシンボル5の新機能」セッションをチェックして、アニメーションとのインターフェイスを設計するためのベストプラクティスを含め、アニメーション自体を深く掘り下げることをお勧めします。

APIでは、これらのアニメーションは「シンボルエフェクト」と呼ばれ、新しいシンボルフレームワークはそれらすべての本拠地です。

SwiftUI、AppKit、またはUIKitを使用してアプリを構築すると、無料で含まれます。

シンボルフレームワークの本当にクールな特徴は、各エフェクトが単純なドットで区切られた名前を持っていることです。

したがって、バウンス効果を作成するには、コードに「.bounce」と書くだけです。

これらのドットで区切られた名前は、エフェクトの設定方法にも拡張されます。

たとえば、シンボルが上向きまたは下向きに跳ね返るように指定できますが、ほとんどの場合、何も指定する必要はありません。

フレームワークは自動的に最も適切な方向を使用します。

一部のエフェクトには、多くの設定オプションがあります。

例えば、可変色には3つの異なる設定があります。

オプションを連鎖させることで、非常に特定の効果を簡単に設定できます。

エフェクト名は実際のSwiftコードです。

条件はありません。 

Xcodeは名前の各部分を自動補完し、エフェクトの設定が正しくない場合、コンパイル時にエラーが発生します。

すべての新しいアニメーションを探索する最良の方法は、SFシンボルアプリです。

新しいアニメーションタブでは、各エフェクトで利用可能なすべての設定オプションについて学ぶことができます。

ドットで区切られたエフェクト名をコピーして、コードで直接使用することもできます。

すべてのエフェクトタイプと設定オプションで、多種多様なアニメーションが利用可能です。

しかし、これらの効果はすべて、実際には小さな一連の行動を網羅しています。

たとえば、バウンスは、シンボルに1回限りのアニメーションを再生します。

これは離散的な動作と見なされます。

一方、スケール効果を追加すると、シンボルのスケールレベルが変更され、無期限に維持されます。

スケールは無期限の行動をサポートすると言われています。

離散効果とは異なり、無期限効果は明示的に削除された場合にのみ終了します。

出現と消失は、移行行動をサポートします。

彼らはシンボルを視界の出し入れを切り替えることができます。

そして最後に、置換はコンテンツの移行です。

それはあるシンボルから別のシンボルへとアニメーション化されます。

つまり、離散的、不定、遷移、コンテンツ遷移の4つの異なる動作です。

シンボルフレームワークでは、各動作はプロトコルに対応します。

エフェクトは、これらのプロトコルに準拠することで、サポートされている動作を宣言します。

利用可能なすべての効果と、サポートされている動作の内訳を次に示します。

このセッションでは、これをより詳細に説明します。

エフェクトの動作によって、どのUIフレームワークAPIがそれらと連携できるかが決まることを知っておいてください。

そして、UIフレームワークAPIといえば、SwiftUI、UIKit、AppKitアプリにこれらのクールなエフェクトをすべて追加する方法について話しましょう。

SwiftUIには、新しいビュー修飾子、symbolEffectがあります。

修飾子を追加し、目的の効果を渡すだけです。

ここで、私はvariableColorを渡し、今、シンボルはデフォルトの可変カラーアニメーションを再生しています。

AppKitとUIKitでもこれを行うのは簡単です。

画像ビューで新しいaddSymbolEffectメソッドを使用して、可変カラーエフェクトを追加するだけです。

ドット構文を使用して可変カラーエフェクトを設定できます。

ここでは、エフェクトをvariableColor.iterative.reversingに変更すると、異なる可変カラーアニメーションになります。

私のアプリがネットワークに接続していることを示す素晴らしい方法です。

異なる効果を組み合わせることも可能です。

ここでは、スケールアップ効果を追加します。

現在、シンボルはスケールアップしながら可変色をアニメーション化しています。

これらのAPIは、シンボル画像に無期限の効果を追加する簡単な方法を提供します。

不定効果は、効果が削除されるまで、シンボルのいくつかの側面を無期限に変更することを思い出してください。

したがって、シンボルエフェクト修飾子を使用して、アニメーションを継続的に再生する可変カラーエフェクトを適用できます。

しかし、効果がアクティブなときに制御する方法も必要です。

アプリがネットワークに正常に接続した後、このアニメーションを再生し続けたくありません。

これは、ブール値のisActiveパラメータを追加することで実行できます。

ここでは、インターネットに接続するときにのみ効果を適用します。

アプリの接続が完了すると、シンボルアニメーションはシームレスに終了します。

AppKitとUIKitでは、removeSymbolEffectメソッドを使用して不定効果を終了します。

一回限りのアニメーションを実行する離散効果はどうですか?

先ほど、この例としてバウンスについて言及しました。

アプリは、特定のイベントに応じてバウンス効果をトリガーする可能性があります。

SwiftUIでは、同じ symbolEffect修飾子を使用して離散効果を追加できます。

ただし、SwiftUIにも値を提供する必要があります。

値が変わるたびに、SwiftUIは離散効果をトリガーします。

押すとシンボルが跳ね返るボタンを追加しましょう。

ボタンのハンドラは、単にbounceValueをインクリメントする必要があります。

SwiftUIはバウンスバリューの変更を確認し、バウンスをトリガーします。

画像ビューにバウンス効果を追加することで、AppKitとUIKitでこれを行うことができます。

バウンスは個別の動作のみをサポートしているため、エフェクトを追加すると1回のバウンスが実行されます。

後で効果を取り除く必要はありません。

さて、シンボルが一度だけ跳ね返ってほしくないとしましょう。

2回跳ねるのはどうですか？

SwiftUI、AppKit、およびUIKitは、優先リピートカウントを指定できるオプションパラメータをサポートしています。

これで、エフェクトがトリガーされるとシンボルが2回バウンスします。

バウンスは、離散的な挙動を持つことができる唯一の効果ではありません。

先ほど取り上げた2つの効果、パルスと可変色は、無期限の動作だけでなく、離散的な動作もサポートしています。

言い換えれば、彼らはバウンスのように1回限りのアニメーションを再生することができます。

つまり、以前のバウンスの例を取り、それをvariableColorに変更できるということです。

可変色は、非繰り返しの方法で適用されるため、その離散的な動作を使用するように切り替えます。

今、ボタンを押すと2つの可変色サイクルが実行されます。

次に、コンテンツの遷移効果について話しましょう。

2つの異なるシンボル画像の間でアニメーション化する置換効果は、この主な例です。

ここでは、一時停止記号と再生記号を切り替える画像があります。

SwiftUIには、symbolEffectと呼ばれる新しいcontentTransitionタイプがあり、Replaceで使用できます。

したがって、表示するシンボルを切り替えるボタンに画像を入れると、変更がアニメーション化されます。

AppKitとUIKitでは、新しいsetSymbolImageメソッドを使用して、シンボルコンテンツの遷移を使用して画像を変更できます。

最後に、ユニークなアニメーションでシンボルを表示および非表示にできるAppear and Disappearがあります。

これらの効果は、遷移効果として一意に分類されます。

しかし、それに入る前に、並行宇宙について話す必要があります。

でも、心配しないでください。見かけほど複雑ではありません。

ある宇宙では、画像は消えますが、画像ビューはまだ階層にあります。

言い換えれば、レイアウトに変更はありません。

正方形と円は互いに同じ距離のままです。

並行宇宙では、画像ビューは本当に階層から追加され、削除されます。

その結果、周囲のビューのレイアウトが変更される可能性があります。

素晴らしいニュースは、出現と消滅が両方の行動をサポートしていることです。

出現と消滅は無期限の効果であるため、最初の行動は可能です。

あなたはすでに無期限効果の使い方を知っています。

SwiftUIでは、.symbolEffect修飾子を使用し、.disappearを渡します。

isMoonHiddenの値が更新されると、消える効果が適用されます。

AppKitとUIKitでは、addSymbolEffectを使用し、.disappearまたは.appearを渡します。

ここでのポイントは、無期限の効果はレイアウトをまったく変更しないということです。

それらは、画像ビュー内のシンボルのレンダリングを変更するだけです。

だから、それは最初の行動をカバーしています。

周囲のレイアウトが変わる平行宇宙にジャンプするにはどうすればよいですか?

ここで移行行動の出番です。

トランジションエフェクトは、ビュー階層からのビューの挿入または削除をアニメーション化するSwiftUIの組み込みトランジション修飾子で使用できます。

前のコードを変換して、遷移動作を使ってみましょう。

条件付きで消える効果を適用する代わりに、代わりに条件付きでビュー階層にシンボルを追加します。

次に、トランジション修飾子を追加します。

SwiftUIには、-あなたが推測した-symbolEffectと呼ばれる新しいトランジションタイプがあります。

.Disappearを渡すことで、シンボルはアニメーションで追加および削除されます。

自動と呼ばれるユニークなトランジションエフェクトを使用することもできます。

この効果は、このシンボルに最も適したトランジションアニメーションを自動的に実行します。

SwiftUIを使用していない場合は、階層から画像ビューを手動で追加および削除する必要があります。

UIKitは、役立つエフェクトの完了ハンドラを備えています。

消える効果を追加するだけで、効果が終了したら、階層から画像ビューを削除します。

だから、あなたはそれを持っています。

これは、SwiftUI、AppKit、UIKitのシンボル効果です。

基本がわかったので、アプリでシンボル効果を次のレベルに引き上げるためのヒントをいくつか紹介します。

まず、UIImageViewの新しいUIKitメソッドは、UIBarButtonItemでも利用できます。

これにより、シンボルアニメーションを使用してツールバーに簡単に命を吹き込むことができます。

一部のUIKitコントロールには、iOS 17にシンボルアニメーションも組み込まれています。

たとえば、UISliderは、親指がトラックの端に達すると画像をバウンスするようになりました。

これらのアニメーションがUIControlとUIBarButtonItemの新しいisSymbolAnimationEnabledプロパティで再生するかどうかを制御できます。

SwiftUIでは、シンボル効果を無効にするための特別な考慮事項もあります。

SwiftUIの他の修飾子と同様に、 symbolEffect修飾子はビュー階層を介して伝播します。

これは、親ビューに修飾子を追加することで、複数の画像に効果を適用できることを意味します。

symbolEffectsRemoved修飾子を使用して、ビューがシンボル効果を継承するのを防ぎます。

さて、出現、消失、スケールなどのシンボルエフェクトは、アニメーションでシンボルの外観を変更します。

アニメーションなしで、シンボルを最初にスケールアップしたり、最初に消えたりすることに興味があるかもしれません。

SwiftUIでは、アニメーションが無効になっているトランザクションを使用してこれを行うことができます。

ここでは、アニメーションなしでスケールアップ効果を適用するために使用します。

AppKitとUIKitでは、addSymbolEffectのアニメーションパラメータを使用して、アニメーションなしでエフェクトを適用します。

最後に、可変値について話しましょう。

iOS 16とmacOS Venturaは、ボリュームレベルや信号強度などの概念を表すシンボルの別の次元として可変値を導入しました。

iOS 17とmacOS Sonomaでは、任意の変数値間のクロスフェードを非常に簡単にしています。

SwiftUIでは、何もする必要はありません。 まったく何もする必要はありません。

ここでは、可変値がいくつかの状態、この場合は現在の信号強度に基づいているWi-Fiシンボルがあります。

信号強度が変化すると、Wi-Fiシンボルは自動的に更新され、可変値間でアニメーション化されます。

AppKitとUIKitでは、自動シンボルコンテンツ遷移を使用します。

新しいシンボル画像が異なる変数値を持っているかどうかを検出し、その場合、新しい値にクロスフェードします。

今日は参加してくれてありがとう。ありがとう。

シンボルをアニメーション化する方法はたくさんあるので、SFシンボルアプリを使って何が可能かを発見してください。

Symbolsフレームワークを探索し、SwiftUI、AppKit、UIKitで新しいシンボルエフェクトAPIを試してみてください。

そして最後に、アニメーションを採用して、アプリのインターフェースをこれまで以上に楽しくします。

シンボルアニメーションに関するヒューマンインターフェイスのガイドラインや、すべての効果をサポートするためにカスタムシンボルを更新するなど、他のシンボルセッションもチェックしてください。

ありがとう、そして幸せなコーディング。