10041

♪ ♪

サイラス:こんにちは、「宣言型デバイス管理の進歩を探る」セッションへようこそ。

私の名前はサイラス・ダブーで、デバイス管理クライアントチームのエンジニアです。

宣言型デバイス管理のエキサイティングな新機能を説明するためにここにいます。

宣言型デバイス管理は、すべてのAppleデバイス用の新しいデバイス管理ソリューションです。

これは、デバイスがサーバーからプロンプトを表示せずに管理ロジックを適用できる自律的で積極的な管理機能を提供し、非同期ステータスレポートをサポートし、サーバーがデバイスをポーリングする必要を回避します。

また、MDMに組み込まれているため、既存の製品との簡単な移行と統合が可能です。

WWDC22では、「将来のプロトコル機能の焦点は、宣言的なデバイス管理になるだろう」と述べた。

そして、このリリースでは、「新しいプロトコル機能の焦点は宣言的なデバイス管理です」とフォローアップしています。

このリリースには、宣言的なデバイス管理を介してのみ利用可能な新しくて魅力的な機能があります。

これらには、MDMとの同等性を提供し、MDMからの移行を支援する機能が含まれます。

WWDC21で最初に導入され、WWDC22でより基本的な機能で強化された宣言型デバイス管理は、MDM開発者や企業管理者の間で多くの興奮を生み出しました。

いくつかのMDM開発者は、すでに宣言的なデバイス管理サポートを備えたMDMサーバーを実装し、出荷しています。

このリリースの新機能により、強化された管理機能セットを顧客に提供するために、さらに多くの機能がそうしたいと思うでしょう。

宣言型デバイス管理とは何か、それを製品に採用する方法については、WWDC21とWWDC22のセッションを確認してください。

プラットフォームサポートのクイックアップデート。

MDMと宣言型デバイス管理がwatchOSで利用可能になりました。

詳細は、セッション「Apple Watchのデバイス管理を満たす」に記載されています。

宣言型デバイス管理は、Apple内の多くの異なるチーム間のコラボレーションであり、MDM開発者や企業管理者に堅牢で安全なソリューションを提供することを目指しています。

私たちは常に、管理者に企業データを保護し、ポリシーの遵守を強制するために必要なツールを提供しながら、ユーザーとそのデバイスのプライバシーとセキュリティを保護するシームレスなユーザーエクスペリエンスを提供することに重点を置いています。

また、MDM開発者や企業管理者とのコラボレーションでもあります。

あなたのフィードバックは、このリリースで提供している機能に優先順位を付けるのに役立ちました。

宣言型デバイス管理の基本的な要素が導入されたため、コア管理機能の実装に焦点が移りました。

それらが何であるかを調べてみましょう。

まず、ソフトウェアの更新を強制する新しい方法です。

第二に、アプリの管理です。

第三に、システムサービスをロックダウンし、バックグラウンドタスクを監視することでデバイスを保護することです。

その後、デバイスで使用するための証明書とID資格情報をインストールします。

そして最後に、MDMから宣言型デバイス管理へのプロファイルの移行を容易にする新しい動作。

ソフトウェアアップデートチームと協力して、宣言型デバイス管理に基づいて構築されたmacOS、iOS、およびiPadOSデバイスに新しいマネージドソフトウェアアップデート体験をもたらしています。

I.T.管理者は、必要な機能と修正が実施されていることを保証するために、ユーザーのデバイスに最新のシステムソフトウェアアップデートがインストールされていることを確認する必要があります。

管理者は、ソフトウェアの更新を強制し、新しいOSリリースが組織のアプリやサービスと互換性があることを確認するためにテストできるように、短期間延期する必要があります。

また、そうするように命じられたときに、デバイスが適切に更新されていることを確認する必要があります。

大規模なデバイスの場合、これは時間のかかる作業になる可能性があります。

今日、管理者はMDMコマンドを使用して、監視対象のデバイスにアップデートをインストールできます。

サーバーがデバイスをポーリングすると、更新の状態に関するフィードバックを受け取ることができます。

管理者は、プロファイルを介してマイナーな更新や主要な更新を延期し、監視対象のデバイスが指定された期間中にユーザーにソフトウェア更新を提供するのを防ぐこともできます。

しかし、あなたのフィードバックに基づいて、管理者とユーザーの両方の全体的な管理ソフトウェアアップデートエクスペリエンスを改善したいと考えています。

宣言型デバイス管理は、管理者が更新プロセスをより詳細に制御し、ユーザーにより有益な体験を提供すると同時に、更新がタイムリーに行われることを保証するメカニズムです。

方法は次のとおりです。

構成は、ソフトウェアアップデートの動作を定義するために使用できます。

デバイスは、更新プロセスをユーザーに通知し、期限前に自分で更新を行う機会を与えながら、これらの指示を積極的に実行することができます。

述語は、デバイスがシードおよびGMビルドにアップグレードされるとき、または迅速なセキュリティ応答が利用可能になったときに、ソフトウェアアップデートの順序を制御するための洗練されたロジックに電力を供給するために使用できます。

また、非同期ステータスレポートは、問題が発生した場合に迅速に解決できるように、管理者がソフトウェア更新フローを最新の状態に保ちます。

これがどのように実装されているかを調べてみましょう。

特定の時間までに、監視対象デバイスの強制的なソフトウェアアップデートを管理するための構成が追加されました。

また、インストール状態の詳細や障害の原因など、デバイス上のソフトウェア更新フローを報告する一連の新しいステータス項目もあります。

いくつかの例を勉強しましょう。

この設定例は、特定のOSバージョンのソフトウェアアップデートを強制し、特定の時間にビルドします。

TargetOSVersionキーは、デバイスが更新する必要があるOSバージョンを示します。

オプションのTargetBuildVersionキーを使用すると、必要に応じて特定のシードビルドをターゲットにすることができます。

両方が設定されている場合、TargetBuildVersionはTargetOSVersionよりも優先されます。

指定されたバージョンの更新が見つからない場合、デバイスはソフトウェア更新サーバーによって販売されるデフォルトの更新を検索します。

TargetLocalDateTimeキーは、更新が強制されるローカルの日付と時刻を指定します。

以下は、ソフトウェア更新ステータス項目のステータスレポートの例です。

インストール理由ステータス項目は、インストールが発生した理由を説明する一連の理由です。

これには、更新が宣言、システム、ユーザー、またはそれらの組み合わせによって開始されたかどうかを示すことが含まれます。

保留中のバージョンのステータス項目は、システムがインストールしようとしているソフトウェアアップデートバージョンを示します。

インストール状態のステータス項目は、更新に関してシステムが現在どのような状態にあるかを識別します。

失敗理由ステータス項目は、エラーの数と、最新のエラーの理由とタイムスタンプを指定します。

ユーザーの観点からこれがどのように見えるかを調べてみましょう。

ユーザーは、どの更新がいつ実施されているかを明確に識別できます。

締め切り前に更新するか、その夜にスケジュールするかを簡単に選択できます。

ユーザーが「今夜更新」を選択した場合、更新はダウンロードされ、準備され、デバイスが十分な充電があり、十分に非アクティブであるその夜に更新するためにキューに入れられます。

ユーザーがすぐに更新をトリガーしない場合、ソフトウェアアップデートは締め切りまで毎日利用可能な更新通知を投稿します。

macOSでは、通知が表示されたときに「インストール」または「今夜試す」を選択するオプションがあります。

締め切りの24時間前、この通知は1時間ごとに表示され、おやすみモードは無視されます。

締め切りの1時間前に、通知は30分ごとに表示され、その後10分ごとに表示されます。

ユーザーが休暇中だったのでデバイスの電源を切って、その結果、締め切りに間に合わなかったとしましょう。

ユーザーがデバイスを再起動すると、ソフトウェアアップデートはアップデートの期限が過ぎているという通知を投稿し、アップデートは1時間以内に試行されます。

同様の経験はiOSとiPadOSで起こります。

ここでは、下部のハイライトされたセクションに示すように、管理者がiOS 17.0へのアップデートを強制しています。

ユーザーは、macOSと同様に、今すぐ更新または今夜更新を簡単に選択でき、更新が締め切り前に確実にインストールされるようにします。

また、macOSと同様に、アップデートをトリガーしないことを選択した場合、リマインダー通知は増加するケイデンスで送信されます。

そして、同じ過去の行動が起こります。

ソフトウェアアップデート宣言とMDMコマンドとプロファイルが共存できます。

ただし、宣言によって強制されるソフトウェアの更新は、常にMDMコマンドとプロファイルよりも優先されます。

ソフトウェアアップデートの設定とステータス項目は、macOS、iOS、iPadOSで利用できます。

それでは、デバイス管理のもう1つの重要な側面であるアプリに注意を向けましょう。

管理者は、管理対象デバイス上のアプリのライセンス、インストール、更新、および削除を管理する必要があります。

これには、問題が発生した場合のサポートの提供や、組織内でさまざまな役割を持つさまざまなユーザーに割り当てられたデバイスの再プロビジョニングが含まれます。

MDM開発者は、管理者がアプリを管理し、MDMアプリ関連のコマンドを使用し、AppleサーバーAPIを使用してアプリのメタデータを検索し、ライセンスを管理するのに役立つさまざまなツールを提供します。

MDMの必須のポーリングの性質は、問題が発生したとき、またはユーザーが役割を変更したとき、またはデバイスをユーザー間で循環させる必要があるときに、管理者がタイムリーに対応するのに苦労することが多いことを意味します。

また、ユーザーは、最初に設定したり変更したりするときに、デバイスの反応が遅くなります。

宣言型デバイス管理は、アプリの管理に関して管理者に新しい、より効率的なエクスペリエンスを提供し、より応答性と信頼性の高いエクスペリエンスをユーザーに提供します。

方法は次のとおりです。

設定は、必要に応じてデバイスで使用できるアプリを指定するために使用できます。

それらは、デバイスの条件が使用を決定するときにすでに存在するように、事前にデバイスに送信することができます。

述語は、サーバーによって設定されたデバイスのステータスまたは管理プロパティに基づいて、どのアプリセットがどのユーザーが利用できるかを制御するためのパワーロジックに使用できます。

そのため、管理者は必要に応じてアプリのセットをすばやく切り替えることができます。

アプリはインストールしなくてもユーザーに表示できるため、ユーザーはサーバーの介入を必要とせずにインストールするタイミングを選択できます。

これにより、侵入的なユーザー同意プロンプトの必要性も回避されます。

また、非同期ステータスレポートは、管理対象アプリの変更を管理者に最新の状態に保ち、問題が発生した場合に迅速に解決できるようにします。

これがどのように実装されているかを調べてみましょう。

個々のアプリのインストール、更新、削除を管理するための設定が追加されました。

管理対象アプリのリストで報告する新しいステータス項目もあります。

アプリは、App Storeから入手することも、MDMと同様に、マニフェストで指定されたエンタープライズアプリであることもできます。

macOSでは、パッケージはサポートされていますが、単一のアプリのみを含める必要があります。

また、アプリのインストールは、ユーザーがトリガーするオプションとしてマークすることができます。

いくつかの例を勉強しましょう。

この管理対象アプリ設定の例では、アプリストアからPagesアプリがインストールされます。

インストールの動作は、アプリが必要であることを示します。

これにより、設定が有効になると、アプリがすぐにインストールされ、管理されます。

アプリもユーザーによって削除できません。

または、インストール動作を「オプション」に設定することもできます。設定が有効になると、ユーザーは必要なときにアプリをダウンロードできるようになります。

ユーザーはいつでも好きなときにアプリを削除することもできます。

管理を制御するための他の属性は、アプリごとのVPNなど、構成に存在します。

この例は、インストールが完了したPagesアプリのステータス項目を示しています。

識別子キーは、ステータスオブジェクトの一意の識別子であり、アプリのバンドル識別子に設定されます。

宣言識別キーは、アプリを管理している設定の識別子です。

デバイスで変更が発生するとステータスが非同期に更新されるため、ポーリングは必要ありません。

では、ユーザーエクスペリエンスに注意を向けましょう。

多くのMDM開発者は、ユーザーに管理体験を制御するためのオプションを提供するアプリを提供しています。

多くの場合、アプリのリストは、ユーザーが何をインストールし、いつインストールするかを選択できるようにするために存在します。

ユーザーはアプリをタップしてインストールをトリガーできます。

これを実装するには、アプリとMDMサーバーの間でプライベートプロトコルが必要で、アプリのリストを伝え、ユーザーからアクションをサーバーに送り返します。

その後、サーバーはMDMコマンドを送信してインストールをトリガーする必要があります。

このすべてのやり取りは、ユーザーエクスペリエンスに追加のレイテンシをもたらします。

安全性を保ちながら、オプションのアプリを簡単かつ迅速にインストールすることで、これを改善したいと考えています。

新しいマネージドアプリ配布フレームワークは、サードパーティの管理アプリの使用に利用できます。

それを使用するには資格が必要であり、App Storeの提出プロセスの一環として申請することができます。

フレームワークには、各管理対象アプリをSwiftUIビューとして公開するSwiftUIビュー拡張機能が含まれており、カスタマイズ可能なレイアウトに配置できます。

ユーザーはアプリの詳細を表示し、タップしてインストールできます。

これにより、MDMサーバーへの往復レイテンシを削除し、アプリをすぐにインストールできるようにし、進捗状況に関するより良いフィードバックを提供することで、ユーザーエクスペリエンスが向上します。

あなたが構築できるアプリでこれがどのように見えるかを調べてみましょう。

このスライドは、iOSのMDM管理アプリを示し、新しいビューサービスを使用してアプリのリストをユーザーに表示します。

現在、1つのアプリがインストールされています。

1つはダウンロードで、ライブの進捗状況を示しています。

そして、もう1つはオプションで、インストールされるのを待っています。

アプリビューのスタイルはカスタマイズ可能で、この場合は標準のリストスタイルを使用します。

macOSでは、異なるスタイルのアプリビューを使用して、ここに示されているグリッドレイアウトなど、より広範なレイアウトを使用できます。

ビューサービスを使用するアプリは、適切な方法でアプリのセットを並べ替えてグループ化できます。

アプリリストを表示する管理アプリをすでにお持ちの場合は、このビューサービスを代替手段として使用し、ユーザーにより良い体験を提供することができます。

管理アプリの提供を計画している場合、このビューサービスは、それを実装するための有利なスタートを提供します。

新しい管理アプリ構成のオプションのインストール動作を使用する場合は、ユーザーに独自の管理アプリを提供する必要があることに注意してください。

管理アプリの設定とステータス項目、パブリックフレームワークとビュー拡張機能は、macOS、iOS、iPadOSで利用できます。

さらに、アプリの管理体験を向上させるという目標の一環として、すぐに使用できる新しい「組織のためのアプリと書籍」サーバーAPIを発表できることを嬉しく思います。

これは、既存のcontentMetadataLookupサーバーAPIを置き換えます。

新しいAPIは、パフォーマンスと稼働時間の向上に加えて、新しいカスタマイズとバージョン管理機能を提供します。

新しいAPIの使用の詳細については、developer.apple.comのサイトをご覧ください。

次に、宣言的なデバイス管理を使用して、macOSシステムサービスとバックグラウンドタスクのセキュリティコンプライアンスを実施および検証する方法を調べてみましょう。

管理者は、サポートするデバイスが一貫性のある安全な方法で動作することを確認する必要があることがよくあります。

一貫性を確保することは、それらがすべて同じ方法で構成されていることを考えると、デバイスの大規模な艦隊をサポートすることが容易であることを意味します。

コンプライアンスの確保とは、デバイスが基本レベルのセキュリティを持っていることが知られており、組織データが安全であるという保証を提供することを意味します。

また、すべてのデバイスで変更を加える必要がある場合、または新しいデバイスがインベントリに追加される場合は、これを迅速かつ効率的に行う必要があります。

この要件の一部には、デバイスにインストールされているシステムまたはサードパーティのサービスの設定と監視が含まれます。

macOSには、システム構成ファイルを介して制御される多くのシステムサービスが付属しています。

たとえば、sshdはディレクトリ/etc/sshのファイルを介して設定されます。

これらのシステムサービスの多くは、組織が必要とする一貫性とコンプライアンスを保証するために、管理者が安全に構成する必要があります。

したがって、ユーザーが意図的または不注意にこれらのシステム構成を変更できないようにすることが重要です。

ただし、ユーザーはシステム構成ファイルを変更したり、システムサービスをオーバーライドしてカスタム構成ファイルを使用したりすることが多いため、これは達成が困難です。

宣言型デバイス管理は、システム整合性保護によって保護されたシステムサービスの構成をサポートするための安全で信頼性の高いメカニズムを提供し、デバイスの一貫性とセキュリティコンプライアンスを保証するためにバックグラウンドタスクを監視する手段を提供する理想的な位置にあります。

方法は次のとおりです。

宣言型デバイス管理構成を使用して、さまざまなシステムサービス用の改ざん耐性システム構成ファイルのセットを指定できます。

ステータスは、バックグラウンドタスクの行き来を監視するために使用できます。

そして、述語は、必要に応じて純粋に自律的な方法で、デバイスの状態からトリガーされた洗練されたコンプライアンスルールに電力を供給することができます。

これがどのように実装されているかを調べてみましょう。

システムサービス構成ファイルの管理をサポートするために、宣言的なデバイス管理構成が追加されました。

設定は、ZIPアーカイブを提供するデータアセットを参照します。

設定が有効になると、アーカイブがダウンロードされ、改ざんに強いサービス固有の場所に拡張されます。

この場所は、どのシステムサービスでもマネージドサービス構成ファイルを採用できるように、新しいライブラリで関数を呼び出すことでプログラムで見つけることができます。

組み込みのシステムサービスは、マネージドサービス構成ファイルを探すように変更され、常にデフォルトまたはオーバーライドされたシステム構成の前にそれらを使用します。

サードパーティのサービスも、同じ方法でマネージドサービス構成ファイルを採用できます。

使用するサードパーティのサービスの開発者に連絡し、新機能を採用してもらうことをお勧めします。

これがどのように機能するかを調べてみましょう。

この設定例では、sshdサービスのマネージドサービス設定ファイルがインストールされます。

これには、データ資産への参照が含まれています。

これがデータ資産の例です。

資産タイプは新しいタイプで、任意のデータを伝えるために使用されます。

また、新しいのは、資産データを取得するときに使用される認証の種類を示す資産の方法です。

これにより、資産がホストされている場所と、データに安全にアクセスするための認証と承認の達成方法の柔軟性が高まります。

アセットのデータURLは、参照設定が有効になっているときにZIPアーカイブファイルをダウンロードできる場所を指しています。

アーカイブは、改ざんに強いサービス固有の場所に拡張され、sshdプロセスがそれにアクセスし、マネージドサービス構成として使用できます。

この機能を採用する最初の組み込みサービスは、sshd、sudo、PAM、CUPS、Apache httpd、そして最後にbashとzeeシェルです。このリリースでは、システムサービス構成をロックダウンすることに加えて、インストールされたバックグラウンドタスクのリストを報告する新しいステータス項目も追加します。

これにより、管理者は必要なタスクが実行されていること、不要なタスクが実行されていないことをすばやく確認できます。

これがどのように見えるか調べてみましょう。

この例は、バックグラウンドタスクのステータス配列項目を示しています。

詳細には、タスクの一意の識別子が含まれます。

タスクを実行しているユーザーアカウントのuid。

その状態。

タスクのタイプは、デーモン、エージェント、ログインアイテム、アプリ、またはユーザーアイテムのいずれかです。

また、ラベルやプログラムの引数などのlaunchdの詳細や、サービスのロードに使用されるlaunchdプロパティのチェックサムハッシュも利用できます。

さらに、このリリースでは、macOSブートボリュームのFileVault対応状態を報告するステータス項目が追加されています。

FileVaultが有効になっているかどうかを示すブール値を返し、アクティベーション述語で簡単に使用できるため、セキュリティに敏感な構成は安全な場合にのみインストールできます。

マネージドサービス構成ファイル、バックグラウンドタスク、およびFileVaultステータスレポートのこの組み合わせにより、管理者は組織内のすべてのmacOSデバイスで一貫性とコンプライアンスを確保する強力な方法を持つようになりました。

それでは、宣言型デバイス管理におけるセキュリティ証明書とアイデンティティについて話し合いましょう。

管理者は、内部および外部のネットワークでホストされている組織リソースへの安全なアクセスを確保する必要があります。

多くの場合、トランスポート層のセキュリティやアプリサービスへの認証されたアクセスを確保するために、デバイスに証明書とIDを追加する必要があります。

異なるアプリサービスが同じ証明書またはIDを使用する可能性があり、そのような関係を管理できることが重要です。

証明書にも有限の寿命があるため、それらを更新するための信頼できる方法が必要です。

また、パスワード認証を、より速く、使いやすく、フィッシングに強いパスキーなどの安全な技術に置き換えることが望ましい。

したがって、MDM開発者は、管理者が証明書とIDを管理するための信頼性が高く効率的な方法を提供することが重要です。

MDMには、デバイスのキーチェーンで証明書とIDを作成するために使用できるプロファイルペイロードがすでに含まれています。

また、ACMEおよびSCEPプロトコルを介したプロビジョニングIDをサポートし、証明書リストコマンドによる証明書の取得もサポートしています。

しかし、MDMができることにはいくつかの制限があります。

MDM証明書またはIDペイロードは、同じプロファイル内の1つ以上の他のペイロードによって参照できます。

ただし、他のプロファイルの証明書やアイデンティティへの参照は許可されていません。

これは、同じアイテムを参照するすべてのペイロードに対応するためにプロファイルを大きくする必要があるか、証明書とアイデンティティを複数のプロファイルに複製する必要があることを意味します。これは、それらを最新の状態に保つためのより多くの作業を意味します。

また、証明書またはIDを更新する必要がある場合、プロファイル内の他のすべてのペイロードがシステムで更新され、ユーザーエクスペリエンスに支障をきたす可能性があります。

宣言型デバイス管理は、宣言データモデルのフルパワーを活用することで、証明書とアイデンティティを管理するためのより効率的なメカニズムを提供できます。

方法は次のとおりです。

証明書とアイデンティティは資産宣言として定義でき、構成はそれらの資産を参照できます。

複数の構成が同じ証明書またはIDを参照でき、複数の証明書またはIDが同じ構成で参照できます。

また、証明書またはIDを更新する必要がある場合は、アセットのみを更新する必要があります。

このアセットと構成の組み合わせは、MDMプロファイルペイロードの多くの制限を解決します。

さらに、ポーリングを必要とせずにACMEとSCEPのアイデンティティがプロビジョニングされたときに迅速なフィードバックを提供するなど、証明書とアイデンティティのステータスを報告することもできます。

これらすべてがどのように実装されているかを調べてみましょう。

証明書またはIDデータを提供するために、一連の資産が追加されました。

証明書は、PEMまたはDERデータ形式のいずれかを使用します。

アイデンティティはPKCS #12形式を使用するか、ACMEまたはSCEPプロトコルを介してプロビジョニングできます。

これには、利用可能な場合はハードウェアバインドされたキーの使用が含まれます。

新しいステータス項目は、アセットを介してインストールされた各証明書またはIDを報告することもできます。

いくつかの例を勉強しましょう。

このサンプルアセットは証明書をインストールします。

参照の詳細は、実際の証明書データをデバイスに配信するURLを提供します。

もう1つの例は、ACMEサーバーを介してIDをプロビジョニングするアセットを示しています。

この場合、参照の詳細は、ACMEプロトコル交換に必要なプロパティを含むJSONドキュメントを提供するURLを提供します。

以下は、ACMEプロパティJSONドキュメントの例です。

ディレクトリURLは、ACMEサーバーのURLを指定します。

生成されるキーの種類を定義する一連のプロパティと、生成された証明書の一連のプロパティがあります。

では、ステータスを見てみましょう。

この例は、2つの証明書を持つステータス配列項目を示しています。

各項目には、関連する資産の宣言識別子、DERエンコードされた証明書データ、および証明書がアイデンティティに対応するかどうかの指標が含まれています。

証明書とIDの資産ができたので、いくつかの新規および既存の構成でそれらを使用することができます。

まず、スタンドアロンの証明書とIDをインストールするために使用できる2つの新しい設定があります。

どちらもクレデンシャル資産を参照して、実際の証明書またはIDデータを提供します。

証明書設定は、単一の証明書をキーチェーンにインストールします。

証明書が自己署名され、認証局である場合、トラストストアにも追加されます。

アイデンティティ設定は、単一のアイデンティティをキーチェーンにインストールします。

これらの構成は、すべてのプラットフォームで利用できます。

次に、エンタープライズパスキーを展開するための設定があります。

WWDC22は、ウェブサイトやアプリでのパスワードの使用を排除するためのソリューションとしてパスキーを導入しました。

このリリースでは、許可されたデバイスとユーザーのみがパスキーをプロビジョニングできるようにすることで、パスキーを企業に簡単に展開できるようにすることに焦点が当てられています。

これをサポートするために、設定で指定されたサイトにアクセスしたときに、デバイス上のユーザーのパスキーを安全に生成するために使用できる新しいエンタープライズパスキー認証構成があります。

設定はアイデンティティアセットを参照します。

その後、IDは、生成されたパスキーの標準WebAuthn認証を実行するために使用されます。

WebAuthn依存当事者は、この認証を検証し、関連サイトへのアクセスを許可することができます。

したがって、管理者は特定のパスキーを管理対象デバイスのみに制限できます。

この機能はmacOS、iOS、iPadOSで利用できます。

MDMサーバーと依存当事者がこのフローを実装するためにどのように連携するかの詳細は、セッション「職場でパスキーを展開する」に記載されています。

最後に、MailとExchangeアカウントの構成が更新され、S/MIMEをサポートし、MDMプロファイルのペイロードと同等の機能同等性をもたらします。

設定は、S/MIMEの署名と暗号化に使用できるIDアセットを参照できるようになりました。

これはiOSとiPadOSで利用可能です。

最後の項目では、MDMプロファイルから構成に簡単に移行できる新しい動作について話し合いましょう。

宣言型デバイス管理はMDMに組み込まれており、MDMと並行して使用して新しい管理機能を追加できるため、時間の経過とともに製品を移行できます。

MDMでの宣言型デバイス管理の実装は、MDM DeclarativeManagementコマンドをデバイスに送信し、デバイスでアクティブ化された一連の宣言を介して同期するのと同じくらい簡単です。

その後、サーバーは着信ステータスレポートをリッスンします。

この移行を容易にするために、既存のMDMプロファイルを構成として送信できるようにレガシープロファイル構成が作成され、プロファイルが宣言型デバイス管理の自律的かつ積極的な動作を最大限に活用できるようにしました。

これを行うには、まず既存のMDMプロファイルを削除してから、同じプロファイルをインストールする構成を送信してアクティブにすることが含まれます。

これは破壊的なプロセスであり、アカウントがすべてのデータを更新したり、しばらくの間デバイスから制限が欠落している管理上のギャップを残したりするなど、破壊的なプロセスになる可能性があります。

MDM開発者は、MDMプロファイルの使用からレガシープロファイル構成に移行する簡単な方法を求めています。

そして今、これは可能です。

方法は次のとおりです。

宣言型デバイス管理は、すでにインストールされているMDMプロファイルを削除せずに管理を引き継ぐことをサポートするようになりました。

これを使用するには、サーバーがしなければならないのは、MDMによってすでにインストールされているものと同じプロファイルを含む構成を送信してアクティブ化することだけです。

宣言型デバイス管理システムは、再インストールまたは更新することなく、そのプロファイルの管理を引き継ぎます。

その時点で、宣言型デバイス管理がプロファイルを所有しています。

MDMは変更を加えることができません。

プロファイルが管理しているデバイスの状態に中断はありません。

そして、管理上のギャップはありません。

これにより、MDMから宣言型デバイス管理への移行がはるかに簡単になります。

この新しい動作は、すべてのプラットフォームで利用できます。

これで、宣言型デバイス管理のこのリリースのためにお届けするエキサイティングな新機能をカバーする最後の議題項目は終了です。

では、締めくくりましょう。

基本的な要素が整ったこのリリースは、宣言型デバイス管理の力を使用して主要な管理機能を構築することに重点を置いています。

これらの機能の多くは、あなたのフィードバックを通じて受け取ったリクエストの結果であり、それに感謝します。

宣言的なデバイス管理が進歩し続けるにつれて、私たちはあなたにとって重要な機能に優先順位を付けるのに役立つより多くのフィードバックを歓迎します。

新しい管理機能が宣言型デバイス管理にのみ追加されているため、まだ行っていない場合は、製品にサポートを構築することが重要です。

すでにサポートを受けている場合、このリリースの新機能は、顧客が愛する素晴らしい製品を作る機会をさらに提供します。

このリリースの他の新しい管理機能に関する情報は、セッション「Appleデバイス管理の新機能」にあります。

新しい構成、アセット、およびステータスアイテムのスキーマは、セッション参照の詳細にリンクされているオープンソースのスキーマリポジトリで入手できます。

見てくれてありがとう。

♪ ♪