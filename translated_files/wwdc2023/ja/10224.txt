10224

♪ ♪

クリス:こんにちは、私はクリスです。すぐに、ジェイソンが参加します。

「XcodeとXcode Cloudでディストリビューションを簡素化」へようこそ。

開発者として、私たちは最高の仕事を共有する前に反復する必要があります。

本当に洗練されたアプリを作るには、アプリをすばやく簡単に構築し、テストし、配布し、フィードバックを得て、そのフィードバックを統合できる必要があります。

幸いなことに、私たちはその仕事に適したツールを持っています。

TestFlightを使用して、チーム、友人、家族にアプリを提供することから始めることができます。

準備ができたら、アプリをApp Storeに提出するか、アプリをAppleに公証して顧客と直接共有することができます。

もちろん、これらのチャネルに配布するための優れたツールがあります。Xcodeを使用できます。

Xcodeオーガナイザーウィンドウにより、新しい合理化されたオプションを使用してワンクリックで配布することがこれまで以上に簡単になりました。

そして、Xcode Cloudを使って努力を強化することができます。

Xcode Cloudを使用すると、コードの変更をプッシュするたびにアプリの構築と共有を自動化するワークフローを作成できます。

今日は、TestFlightでテスターにアプリを送信する方法を紹介します。

その後、ジェイソンはMacで顧客のために公証を使用する方法を紹介します。

始めましょう。

私は「裏庭の鳥」プロジェクトを開いています。

私は異なるアクセントカラーで実験しているgitブランチに取り組んでいます。

これらの新しい赤い色をTestFlightで私のチームと共有したいと思います。

そうするための最初のステップは、「アーカイブ」を作成することです。

しかし、アーカイブとは何ですか?

アーカイブはアプリの記録です。

これは、アプリの最適化されたリリースビルドのためのコンテナです。

これには、ローカルシンボリック化のためのデバッグシンボル、または「dSYM」が含まれています。

アーカイブの内容は、選択した目的地に応じて最終的に再パッケージ化されます。

では、どのようにアーカイブしますか?

非常にシンプルで、製品メニューアーカイブを使用します。

そして、私は現在、iPhoneシミュレーターが選択されていることに注意してください。

Xcodeはスマートなことを行い、任意のiOSデバイスで実行するために必要なすべてのCPUアーキテクチャで私のアーカイブを構築します。

Xcodeがアーカイブを作成した後、次のステップは「アプリの配布」ボタンをクリックすることです。

Xcode 15の新機能では、いくつかの合理化されたオプションのいずれかから選択できます。

これらのオプションのいずれかを選択すると、ワンクリックでアプリを簡単にアップロードまたはエクスポートできます。

それでは、これらの合理化されたオプションのそれぞれを探りましょう。

「TestFlightとApp Store」オプションを使用すると、TestFlightの全機能とApp Storeに送信できます。

または、新しい「TestFlight内部のみ」オプションを使用することもできます。

この種のビルドはチームと共有できますが、App Storeに送信することはできません。

これは、開発ブランチを反復している間にフィードバックを得るのに最適です。

アプリの最適化されたビルドをエクスポートしたい場合は、デバッグオプションを使用できます。

このビルドは、チームの登録済みデバイスにインストールすることも、リリーステストオプションを使用することもできます。

このオプションは、App Storeで署名されている方法と同様に、アプリに署名します。

このビルドは、チームの登録済みデバイスにインストールできます。

これらの合理化された各オプションは、推奨設定を使用します。

これらの推奨される設定には、自動署名を使用してアプリに再署名することが含まれます。

設定は必要ありません。

サーバー側のクラッシュログシンボネーション用のアプリシンボルを埋め込む。

アプリのビルド番号を自動インクリメントして、App Storeの準備をします。

そして、Swift埋め込みディリブからシンボル情報を削除します。

これにより、アプリが小さくなります。

合理化されたオプションとして利用できないものが必要な場合は、いつでも「カスタム」を選択できます。

「カスタム」では、推奨される設定以上のものから選択できます。

さて、私はこのビルドを私のチームのメンバーに送る準備ができています。

私はいくつかの変更をすばやく試しているだけで、このビルドをApp Storeに公開したくないので、「TestFlight内部のみ」オプションを選択して「配布」をクリックします。

そして、それだけです。私は何の質問にも答える必要はありません。

Xcodeは正しいことをするだけです。

Xcodeはアプリを再パッケージ化し、シンボルを含めて再署名し、TestFlightにアップロードしています。

そして、ちょうどそのように、アプリがアップロードされます。

その後、私のアプリがアップロードされて処理された後、アプリがテストする準備ができていることを知らせるこの素敵な新しい通知を受け取ります。

ビルドの処理が完了したら、SafariでApp Store Connectに行くことができます。

そこから、TestFlightのアプリ「Backyard Birds」にアクセスして、テストの詳細を編集できます。

私のチームがデバイスでTestFlightを使用すると、この新しいビルドで何をテストするかについてすべて読むことができます。

そして、彼らはTestFlightを使って、テキストフィードバック付きのスクリーンショットを私に送ることができます。

後でXcodeオーガナイザーウィンドウでそのフィードバックを表示できます。

Xcodeオーガナイザーの「フィードバック」タブで、ジェイソンがメッセージ付きのスクリーンショットを送ってくれました。

彼は赤い色のボタンをあまり気にしていないようだ。

ああ、いや、それは良くない。私たちはもっとやるべき仕事があると思います。

私たちは多くのことを成し遂げました。

Xcodeを使用してアプリのビルドをアーカイブし、ワンクリックでTestFlightにアップロードしました。

私たちはチームに何をテストするかについていくつかのメモを与え、いくつかのフィードバックを受け取りました。

私たちは素晴らしいアプリを構築し、洗練する途中です。

アプリの構築と配布は、ジャグリングするのに大変です。

Xcode Cloudは配布のタスクを自動化し、開発に集中できるようにします。

Xcode Cloudは、Appleによって構築された継続的インテグレーションおよび配信サービスです。

それはAppleの開発者のために特別に設計されています。

Xcode Cloudを設定して、機能ブランチに変更を送信し、そのビルドをTestFlightに送信し、テスト内容に関するメモを含めるときにビルドを自動的に作成するように設定したいと思います。

これらすべてを行うには、Xcodeクラウドワークフローを使用できます。

私はすでに私たちのアプリのワークフローを追加しました。

それを編集してTestFlightのサポートを追加します。

まず、統合メニューを使用してワークフローを管理します。

アーカイブアクションを編集して、TestFlightのサポートを追加します。

そして、ワークフローにポストアクションを追加して、ビルドを内部テスターのグループに送信します。

飛び込みましょう。

新しい統合メニューとワークフローの管理をクリックすることから始めます。

以前に取り組んでいた「内部フィードバック」ワークフローを選択し、ギアボタンを使用してワークフローを編集します。

私は以前、文字列「features/」で始まるブランチで変更が発生するたびに開始するようにこのワークフローを設定しました。

これには、私が取り組んでいる accent_color 機能ブランチが含まれます。

TestFlightへのデプロイを開始するには、アーカイブアクションを編集します。

さて、私はプロトタイピングしている機能のためにこのワークフローを指定しました。

私はこれらのビルドがApp Storeに行くことに興味がないので、「TestFlight（内部テストのみ）」を選択します。

これらのビルドは、私のチームの選ばれたメンバーとのみ共有したい。

これを行うには、TestFlight内部ポストアクションを追加します。

そして、これらの新機能に興味を持っているTestFlightグループを追加します。

私は彼らを「羽の鳥」と呼びました。

私は「追加」「保存」します...

そして「完了」。

今、私たちはすべてセットアップされ、行く準備ができています。

この accent_colorブランチに変更をプッシュするたびに、新しいビルドが「Birds of a Feather」グループに送信されます。

アクセントの色を調整して、変更をプッシュしてみましょう。

アクセントカラーを赤から紫に変更し、シミュレーターでビルドして実行してチェックしようと思います。

紫色のボタンは私にはもっと良く見えます。

ジェイソンが同意することを祈ろう。

これらの変更をプッシュするには、統合メニューを使用して[コミット]をクリックします。

変更されたファイルを確認できるようになりました。

この最初のファイル「Contents.json」では、アクセントの色を赤から紫に変更しました。

それは理にかなっています。

カスタムビルドスクリプトにも取り組んでいます。

このスクリプトは、Xcode Cloudがgitコミットメッセージを収集し、TestFlight上のビルドのテスト詳細として含めるために使用されます。

これは超かっこいい。

Xcode Cloudは、テストするもののメモを自動的に更新できるようになりました。

これの設定方法の詳細については、「アプリのベータリリースでテスター向けのメモを含める」の開発者ドキュメントをご覧ください。

このドキュメントには、私が使用しているビルドスクリプトが記載されています。

「ボタンが紫色になりました」というコミットメッセージを追加します。

それは私が何を変えたかを私のチームに明確にするでしょう。

「Stage All」ボタンをクリックして、これらすべての変更をステージングします。

「コミット」ドロップダウンボタンを使用してコミットしてプッシュします。

そして、プッシュをクリックしてリモートリポジトリにアップロードします。

それでおそれ。

そのプッシュにより、Xcode Cloudはアーカイブされ、TestFlightにデプロイされています。

後で、レポートナビゲーターでビルドを確認できます。

「内部フィードバック」ワークフローで最新のビルドを選択します。

そして、ありがたいことに、アーカイブアクションとTestFlight内部テストポストアクションは成功しました。

デバイスでTestFlightのビルドをチェックすると、「ボタンが紫色になりました」という便利なテストノートが含まれています。

そして、ここには何がありますか?

ジェイソンはオーガナイザーウィンドウにフィードバックを送りました。

彼は新しい紫色のボタンが好きなようだ。

さて、私たちはそれらを保つことができると思います。

素晴らしい。私たちは今、理想的なセットアップを持っています。

Xcode Cloudの助けを借りて、この機能ブランチに変更をプッシュすると、チームはテストに関する有用な情報を含む私のアプリの新しいビルドを受け取ります。

フィードバックを継続的に統合し、改善を展開できるようになりました。

私は今、開発に集中し、可能な限り最高の結果を出荷するために解放されています。

さて、XcodeとXcode Cloudを使用してTestFlightでアプリを配布することについて多くのことを学びました。

今、ジェイソンは公証の使用についてすべて教えてくれます。

ジェイソン:ありがとう、クリス。

App StoreはAppleの顧客にリーチするのに最適な方法ですが、Macアプリを直接ホストして販売したい場合は、アプリを公証してもらうことができます。

アプリを公証することで、ソフトウェアの安全性がAppleによって検証されたことをユーザーに確信できます。

では、公証はどのように機能しますか?

まず、アプリのアーカイブを作成し、それをAppleの公証人サービスにアップロードし、そこで悪意のあるコンテンツがスキャンされます。

そのプロセスが完了すると、公証人サービスはチケットを生成し、アプリにホッチキスで留めることができます。

これで、公証されたアプリを顧客に配布する準備が整いました。

アプリが初めて起動されると、macOSはアプリがAppleによってチェックされたことを確認します。

これは、ステープルされたチケットと公証人サービスに手を差し伸べることによって提供されたチケットの両方を調べることによって行われます。

公証の詳細については、前年のWWDCセッション「All About Notarization」と「Macアプリの公証の新機能」をご覧ください。

Xcodeからアプリを公証するには、まずアーカイブを作成してください。

クリスが先に示したように、ウィンドウ、オーガナイザーでオーガナイザーウィンドウを開き、アプリアーカイブを選択し、[アプリの配布]をクリックすることで、新しい合理化された配布オプションにアクセスできます。

直接配布オプションはアプリを公証します。

これまでのところ、私は公証にXcodeを使用しています。

今年は、このプロセスを自動化するために、Xcode Cloudに公証のサポートを追加しました。

公証ワークフローを設定した後、Xcode Cloudは設定された開始条件に基づいて自動的にビルドを開始します。

公証されたアプリの準備ができたら、Xcode Cloudから直接ダウンロードできます。

私はすでにMacアプリのリリースワークフローを設定しました。

変更がリリースブランチにプッシュされるたびに、自動テストが実行され、アーカイブが作成されます。

アプリを公証するためにワークフローも更新します。

管理者とアプリマネージャーだけが公証するワークフローを設定できるので、正しい権限を持っていることを確認してください。

公証にXcode Cloudを使用するので、[キャンセル]をクリックしてオーガナイザーウィンドウを閉じます。

まず、サイドバーのレポートナビゲーターの「クラウド」タブに移動します。

macOSリリースのワークフローを編集するには、それをサブクリックし、ワークフローの編集を選択します。

アーカイブアクションがすでに設定されていることに気付くでしょう。

プラスと公証をクリックして、新しい公証ポストアクションを追加しましょう。

この追加ステップを反映するために、ワークフローの説明を更新します。

そして、それだけです。

[保存]をクリックして、これらの変更をワークフローに保存します。

私たちのMacアプリは、特に新しい紫色のボタンで素晴らしい状態にあると思うので、更新されたワークフローを使用して公証プロセスを開始する準備ができています。

ワークフローをセカンダリクリックして[ビルドの開始]を選択することで、それを行うことができます。

リリースブランチを選択し、[ビルドの開始]をクリックしてビルドをキューに入れます。

テストとアーカイブのアクションがキューに入れられていることに気づき、それらが完了すると、新しく追加されたNotarizeポストアクションが実行されます。

Xcode Cloudがビルドを処理している間、ビルドレポートを詳しく見てみましょう。

Xcode Cloudのビルドが進行中の場合、ビルドの概要には、このビルドで発生するすべての要約が表示されます。

その間に何か他のものに取り組みたい場合は、レポートナビゲーターの[クラウド]タブに、実行中のすべてのビルドのステータスが表示され、詳細な結果に移動できます。

ビルドのステータスを確認しましょう。

素晴らしい！

私たちの新しい公証ポストアクションは正常に完了しました。

「公証アプリのダウンロード」をクリックしてダウンロードを開始します。

ダウンロードが完了したら、[公証されたアプリを表示]をクリックすると、ダウンロードしたアーカイブが表示され、解凍して公証されたアプリが表示されます。

これで、ユーザーと共有する準備が整いました。

今日は、アプリの最高のバージョンを確実に提供するために、さまざまなツールを使用する方法を紹介しました。

Xcodeの新しい合理化された配布オプションを使用すると、アプリをすばやくアップロードできます。

TestFlight内部配布は、変更を反復する素晴らしい方法であり、限られたオーディエンスがアプリを試して貴重なフィードバックを提供できるようにします。

Xcode Cloudワークフローは、配信プロセスを自動化し、Macアプリの公証をサポートすることで、App Store外での配信をさらに簡単にするのに役立ちます。

アプリ配信のこれらの機能強化により、貴重な時間を節約できると思うので、最高のものに集中し、素晴らしいアプリを構築することができます。

ご覧いただきありがとうございます。

♪ ♪