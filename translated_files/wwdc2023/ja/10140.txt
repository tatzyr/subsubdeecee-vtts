10140

♪ ♪

リッキー：こんにちは、私はリッキーです。「StoreKit 2の新機能、XcodeでのStoreKitテスト」へようこそ。

このセッションでは、今年StoreKitに導入する新機能と、Xcodeでのテスト体験の強化について説明します。

StoreKit 2は、Swiftを使用した新しい、より柔軟なAPIを使用して、2021年にWWDCで初めて導入されました。

今年は、StoreKit 2をさらに良くする新機能をご紹介できることを嬉しく思います。

まず、新しいStoreKitフレームワーク機能を確認し、次にStoreKitを使用してSwiftUIアプリを構築するためのいくつかのアップデートを共有し、最後に、XcodeでのStoreKitテストの新機能について説明します。

iOS 16.4から利用可能な、プロモーションされたアプリ内購入を管理するための新しいSwift APIを導入することに興奮しています。

プロモートされたアプリ内課金は、App Storeの製品ページで製品を商品化できる機能で、それぞれに専用のプロモーション画像が付いています。

アプリ内購入を宣伝することは、製品の可視性を高めるための素晴らしい方法であり、App Store Connectでプロモーションされた購入を簡単に設定できます。

プロモーションされたアプリ内課金の設定の詳細については、「App Store Connectの新機能」をご覧ください。

プロモーションされたアプリ内購入はApp Storeに掲載されているため、顧客がプロモーションされた製品を購入すると、購入ボタンをタップすることでインタラクションがここで始まります。

その後、App Storeは購入データをアプリに送信し、そこでこの情報をリッスンし、購入を完了するように促すことができます。

プロモーションされた購入を聞くには、顧客がApp Storeでプロモーションされた製品の購入を開始するたびに新しい購入意図を受け取るSwift非同期シーケンスを使用します。

まず、PurchaseIntent.intentsを使用して購入インテントを受信するリスナーを作成します。

シーケンスが新しいオブジェクトを受信するたびに、購入に関連付けられたStoreKit製品が含まれています。

使い慣れた支払いシートを表示し、そこでインタラクションを完了できるように、purchase()を呼び出すことで、通常どおりこれらの製品を購入するように顧客に促すことができます。

アプリが購入を完了する準備ができていない場合は、インテントをローカルに保存して延期することもできます。

後でいつでも処理できます。

アプリ内購入を促進するもう1つの機能は、製品が現在のデバイスにローカルに表示される方法をカスタマイズできることです。

たとえば、顧客がこれらの製品の1つを購入した場合、それを非表示にすることができるので、App Storeは閲覧や検索時に再び表示されません。

また、ゲームのレベルアップなど、アプリの現在の状態に基づいて、製品の注文、または注目されている製品のサブセットを変更することもできます。

これらすべてのケースをカバーするために、プロモーションされたアプリ内購入の順序と可視性をカスタマイズするために使用できる新しいSwift APIをいくつか紹介できることを嬉しく思います。

簡単なデモンストレーションを見てみましょう。

StoreKitをインポートした後、Product.PromotionInfo.currentOrderで現在のプロモーション注文を確認できます。

これは、現在設定されている順序で、PromotionInfoオブジェクトのシーケンスを返します。

このリストが空の場合、このデバイスにはローカルオーバーライドが設定されていないことを意味し、App Storeに表示される製品は、App Store Connectで設定したのと同じ順序です。

このシーケンスの各オブジェクトには、アプリで宣伝された製品に関する情報が含まれています。

プロモーションのカスタムオーダーを設定するには、Product.PromotionInfo.updateProductOrder APIを使用して、このデバイスのApp Storeに表示する順序で製品識別子のリストを渡すことができます。

まったく新しい注文を設定することなく、製品を非表示にして表示することもできます。

これは、プロモーションされたアプリ内購入に関連する可視性プロパティを変更することで実行できます。

可視性状態は、表示、非表示、またはデフォルトであり、App Store Connectで設定した設定に従い、アプリによってローカルオーバーライドが設定されていない場合のすべてのデバイスに適用されます。

コードでこれを変更する方法を見てみましょう。

可視性値は、いくつかの異なる方法で変更できます。

アプリはProduct.PromotionInfo. updateProductVisibility APIを呼び出すことができ、新しい可視性状態とそのアプリ内購入の識別子の両方を渡すことで、単一の製品の値を変更できます。

または、各PromotionInfoオブジェクトにメンバープロパティを設定することで、可視性値を変更することもできます。

次に、変更を保存するには、変更したのと同じオブジェクトに対してupdate()を呼び出します。

そして、それはあなたがStoreKit 2でプロモーションされたアプリ内購入を使い始めるために必要なすべてです。

さて、StoreKit 2のコアデータモデルに対するいくつかの機能強化を紹介したいと思います。

これらのモデルは、購入日やサブスクリプションステータスなど、アプリ内購入や関連情報を管理するのに役立ちます。

多くの人が要求した大きな改善をもたらすTransactionとRenewalInfoデータモデルに追加する新しい分野に飛び込みましょう。

最初の新しいフィールドはストアフロントで、storefrontCountryCodeとともにトランザクションモデルに表示されます。

次の新しいフィールドは理由と呼ばれます。

顧客が購入を開始したかどうか、または取引が自動サブスクリプション更新であるかどうかを示します。

Product.SubscriptionInfoの下のRenewalInfoモデルには、nextRenewalDateという新しいメンバーがあります。

これは、このサブスクリプションの更新がいつ処理されるかを示します。

これらの新しいフィールドはすべて、Xcode 15で構築したアプリで利用でき、iOS 17で最初にリリースされましたが、それらのほとんどは、StoreKit 2を使用しているときにも以前のバージョンのiOSでさかのぼって動作します。

次に、StoreKitメッセージと、先ほど追加した素晴らしい新機能について話したいと思います。

昨年、App Storeが顧客に重要な情報を通知する方法として、WWDC 2022でメッセージAPIを導入しました。

メッセージには、メッセージの目的を伝える理由の値があります。

アプリは、メッセージを延期するか抑制するかを選択できます。

たとえば、メッセージを表示すると、インタラクションフロー中に顧客を中断する場合は、メッセージを延期することができます。

それ以外の場合、StoreKitはアプリの起動時にアクティブなメッセージを自動的に表示します。

今年は、請求発行と呼ばれる新しいメッセージの理由を追加しました。

このメッセージはiOS 16.4から利用可能です。

請求の問題でサブスクリプションの更新に失敗した場合、App Storeはこのメッセージを送信します。

StoreKitは請求問題シートを表示し、顧客はアプリを離れることなく問題を解決できます。

この新しいプロパティは、テストする時間を与えるためにサンドボックスですでに有効になっています。

これがすべての顧客にいつ有効になるかの最新情報については、今年後半にApple Developerのウェブサイトで確認してください。

App Storeがサブスクリプションの更新に失敗した場合、サブスクリプションは請求再試行状態になります。

サンドボックスでこの機能をテストする方法については、アプリ内購入のテストに関するWWDCセッションを参照してください。

それでは、セキュリティ関連のアップデートを確認しましょう。

StoreKitを最新のセキュリティ慣行で最新の状態に保つために、領収書署名証明書をSHA-1の使用から「元のStoreKit」領収書のSHA-256に移行しています。

OpenSSLのような最新のバージョンの暗号化ライブラリは、すでにSHA-256をサポートしていますが、アプリがデバイス上のレシート検証を実行する場合は、新しい証明書を適切に処理することを確認することが重要です。

新しいSHA-256署名証明書は、6月20日からサンドボックスで領収書に署名するために使用され、iOS 16.6およびmacOS 13.5以降を実行しているデバイスでテストできるようになります。

8月14日以降、新しい証明書は、App Storeに提出されたすべての新しいアプリとアプリのアップデートの領収書に署名するために使用されます。

このタイムラインの詳細については、Apple DeveloperのWebサイトを確認できます。

アプリがStoreKit 2を使用している場合は、何もする必要はありません。

StoreKit 2の署名済みトランザクション、更新情報、およびアプリトランザクションは、今日すでにSHA-256を使用しています。

また、App StoreサーバーAPIを使用してレシートの検証を行う場合、新しいフォーマットを自動的に処理するため、変更を加える必要はありません。

次に、SwiftUIを使用して、アプリでアプリ内購入を非常に簡単かつ迅速に商品化できるStoreKitのまったく新しい機能セットをお見せできることを嬉しく思います。

単一のアプリ内購入、製品ストア全体、さらにはサブスクリプションに固有のカスタムビュー用のSwiftUIビューを作成するための新しいAPIがあります。

これらの機能は、通常のSwiftUIビューと同様に、実装に最小限のコードを必要とするため、アプリをできるだけ早く起動して実行できます。

これらの新しい見解を見てみましょう。 

この製品ビューでは、ローカライズされたタイトル、説明、さらにはオプションのプロモーション画像を含む、単一のアプリ内購入を表示できます。

製品識別子をProductViewに渡すことで作成できます。

また、StoreKit製品をロードする必要もありません。

productID文字列を使用するだけです。

残りはStoreKitとSwiftUIが処理します。

また、アプリ内のストアなど、製品のコレクション全体を表示する新しいビューもあります。

単一の製品識別子を渡す代わりに、StoreViewと組み合わせてproductIDのコレクションを使用して、商品化する製品のリストを作成し、SwiftUIコンポーネントを使用してさらにカスタマイズできます。

StoreViewは、ここに示されているように、設定に数行のコードしか必要としないため、アプリやゲームを開始し、アプリ内購入をサポートするのに最適な方法です。

最後になりましたが、利用可能なすべてのレベルのサービスでサブスクリプションを商品化する新しい見解もあります。

SubscriptionStoreViewを使用して、このようなサブスクリプショングループのカスタムページをすばやく作成します。

必要なのは、通常App Store Connectで見つけることができるsubscriptionGroupIDだけですが、XcodeのStoreKit構成でも利用できるようになりました。

これらの新しいビュータイプのいずれかに簡単に追加できる多くの可能なカスタマイズがあります。

たとえば、数行のコードを変更してカスタム背景を作成すると、このSubscriptionStoreViewの外観が大幅に変更される方法を確認してください。

これらの新しいサブスクリプションの変更に合わせて、人々がStoreKitアプリでサブスクリプションを操作して選択する方法に新しいエクスペリエンスを提供するために、追加の管理サブスクリプションシートを追加します。

それを見てみましょう。 てみましょう。

ここでは、サブスクリプションを管理するための使い慣れたフローを見ることができます。これは、顧客に現在のアクティブな層を持つシートを表示し、そのサブスクリプショングループで利用可能な他の層のリストを見るためにそれぞれをタップするオプションを提供します。

このプロセスを高速化し、より多くのカスタマイズを提供するために、ステップをスキップして表示したいサブスクリプショングループにジャンプできる別のビューがあります。

たとえば、複数のサブスクリプショングループがある場合は、アプリのコンテキストで関連するサブスクリプショングループを選択し、顧客が選択できる他のサービスレベルを表示できます。

このシートは、通常のAPIと同じAPIで使用できます。.manageSubscriptionsSheet。

今回は、さらにsubscriptionGroupIDパラメータを渡します。

StoreKitでSwiftUIアプリを作成するというトピックについては、他にも多くのビューとカスタマイズがあり、アプリの美学に合うように適用できます。

もっと知りたい場合は、グレッグが「Meet StoreKit for SwiftUI」で教えてくれます。

StoreKitのアプリ内課金の新機能を見た後、Xcode 15から始めて、XcodeのStoreKit Testingの新しいツールを使用してそれらをテストする方法を見てみましょう。

XcodeでのStoreKitテストを使用すると、App Store Connectで何かを設定する前であっても、StoreKitを使用したアプリが構築を開始した時から素晴らしい体験を提供できます。

これにより、Macでのテスト中にStoreKitに関連するアクションをテスト、管理、編集、さらには作成することができ、シミュレータとデバイスの両方でサポートされています。

トランザクションマネージャーから始めて、アプリのデバッグとテストのための新機能があります。

これで、すべてのテストアプリが整理されます。

ナビゲーターでは、テスト用のStoreKit構成を使用して、現在のStoreKitアプリがインストールされている、現在接続されているすべてのデバイスとシミュレータを見ることができます。

これにより、複数のデバイスで同時により簡単かつ迅速にテストすることができ、購入履歴を見るためにアプリを実行する必要はありません。

飛び込んで、それがどのように見えるか見てみましょう。

私はiPhoneをMacに接続し、シミュレーターを実行しています。

そして、私は新しい開発中のゲーム、Backyard Birdsを使っています。

Xcodeを開くと、プロジェクトが開いているかどうかにかかわらず、Debug、StoreKit、Manage Transactionsに移動し、すでに慣れ親しんでいるトランザクションマネージャービューが表示されます。

ナビゲーターでは、Macに接続されている現在のすべてのデバイスを見ることができます。

私の場合、これは物理的なiPhoneとシミュレーターです。

両方とも、Backyard Birdsを含むいくつかのアプリがこのリストに表示されていることに注目してください。

これらはすべて、デバッグセッションの外で検査できるXcodeでStoreKitテストを使用するアプリです。

これらのデバイスのいずれかでアプリをクリックすると、そのアプリのStoreKitトランザクションのリストが表示され、昨年お見せした詳細サイドバーで、それぞれを個別に検査できます。

これは、たとえば、Backyard BirdsのXcodeプロジェクトを開き、シミュレータで実行した場合にも機能します。

この場合、アプリ名の横にこの小さなインジケーターがあるため、どのアプリが積極的にデバッグされているかを確認することもできます。

これは、トランザクションマネージャーの新機能ではありません。

Xcodeを使用してMacから直接アプリのアプリ内購入を行うことができるようになったことをお見せできることを嬉しく思います。

さらに、新しい購入を作成するときに、消耗品の数量など、さまざまな購入パラメータをカスタマイズしたり、サブスクリプションのオファーコードを選択したりすることもできます。

Backyard Birdsを使用して、これが実際にどのように機能するかを見てみましょう。

まず、テストしたいアプリを選択する必要があります。

次に、フィルターバーの左側にあるプラスボタンをクリックして、新しい購入を作成します。

表示されるポップアップには、このアプリで利用可能なすべてのアプリ内購入が一覧表示されます。

これらは、StoreKit構成で設定したのと同じ製品です。

最初に消耗品を購入するので、栄養ペレットを選択して[次へ]をクリックします。

今、私はこの新しい購入を設定する機会がありますが、先にスキップしたい場合は、デフォルトのオプションも有効です。

私はこれらの設定に満足しているので、[完了]をクリックして、これらのパラメータを使用して購入を完了しましょう。

アプリはシミュレータで実行されていませんが、StoreKitは新しい購入を受け取り、処理しました。

取引リストを見ると、上部に新しいアイテムがあります。

それをクリックすると、この新しいトランザクションの詳細を調べることができます。

ただし、サブスクリプションは異なるので、別の購入をしましょう。

もう一度プラスボタンをクリックして新しい購入を作成し、今回はこのアプリでサブスクリプションの名前を検索し、探しているものを選択し、次へをクリックします。

これは別のタイプのアプリ内購入であるため、購入を設定するオプションが変更されました。

購入日のように同じものもありますが、新しいものもあるので、彼らが何をしているのかを調べてみましょう。

ちなみに、デフォルトのプロパティはここでも有効です。

StoreKitの設定で設定されている場合は、このサブスクリプションのオファーコードを選択するオプションがあります。

お客様はオファーコードとプロモーションを入力する必要がありますが、テストを容易にするために、この製品IDで利用可能なオファーのリストを提供します。

この場合、購入日を変更し、昨年のWWDCで最初にこのサービスに加入したかのように、ちょうど1年前に設定したいと思います。

次に、このサブスクリプションを自動的に更新するか、この製品の場合は1か月のサブスクリプション期間のみ購読するかを選択できます。

使用を開始する前に、アプリがアクティブなサブスクリプションをどのように処理するかをテストできるように、自動更新を有効にしておきたいです。

[完了]をクリックして購入を完了し、トランザクションリストをフィルタリングして結果を見てみましょう。

予想通り、昨年から毎月1回の更新があります。

これらはすべて現在未完成としてマークされています。アプリが実行されておらず、それらを受け取る機会がなかったので、シミュレーターで実行して、Backyard Birds Passにアクセスできるかどうかを確認します。

トランザクションマネージャーの新機能は、iOS 17とmacOS 14から始めて、XcodeでStoreKitテストをすでにサポートしているすべてのデバイスとプラットフォームで動作します。

また、iPadOS、watchOS、tvOSなどの他のプラットフォームでもサポートされています。

古いバージョンのオペレーティングシステムを実行している場合、何も変わりません。トランザクションマネージャーは、アクティブなデバッグセッションを使用する場合、以前と同じ機能すべてと互換性があります。

次に、StoreKit設定の新機能を紹介し、StoreKitアプリがさまざまなシナリオでどのように動作するかをより詳細にテストできるようにしたいと思います。

これを実証するために、Backyard BirdsのXcodeプロジェクトを開き、StoreKit設定に移動します。

構成設定と呼ばれる、設定されたアプリ内購入の上に新しい項目があります。

これは、アプリのテスト環境に構成可能なオプションを提供するために追加した新しいメニューで、すでに慣れ親しんでいるかもしれないものや、Xcode 15から始まる新しいオプションもあります。

この1番目と2番目のセクションでは、デフォルトのストアフロントや、アプリが価格設定と可用性に使用するロケール、サブスクリプションの更新の速度や購入を強制する機能など、既存のすべてのオプションをカバーしています。

以前のバージョンのXcodeでは、StoreKit設定を開いたときにエディタメニューでこれらを見つけることができ、それらはまだそこにあり、交換可能に使用できます。

StoreKitのテストオプションについて話していますが、iOS 16.4で今年追加した新しいサブスクリプション更新率があります。

これらは、更新ごとにサブスクリプションの有効期限を変更するように設計されており、サブスクリプションの実際の期間よりも早く一貫した更新を生成するのに役立ちます。

これは、サブスクリプションの長期的な状態を迅速かつ確実にテストするのに本当に役立ちます。

これらの新しい設定可能なレートは、エディタメニューとXcode 15のStoreKit構成設定の両方で見つけることができます。

StoreKit構成設定の3番目のセクションでは、アプリのStoreKitエラーをシミュレートするために使用できるオプションについて説明します。これは、多くの人にとって非常に要求された機能でした。

以前はエディターメニューに使われていたFail Transactionsサブメニューを拡張し、より多くのStoreKit APIとエラータイプのサポートを提供します。

各オプションは、アプリが使用している可能性のあるStoreKit 2 APIを表し、APIがアプリによって呼び出されるたびにスローするエラーを選択できます。

この機能では、多数のAPIがサポートされています。

製品の読み込みの問題、購入の失敗、領収書と取引の確認の問題、払い戻しのリクエストなどをテストできます。

これが実際にどのように見えるか見てみましょう。

左側にBackyard BirdsのXcodeプロジェクトが開き、右側のシミュレータで実行されているアプリがあります。

StoreKitの設定では、Purchase API名の横にあるチェックボックスを使用して購入エラーを有効にし、スローするエラーを選択できます。

顧客が店舗を変更したときにアプリが購入をどのように処理するかをテストしたいので、利用できない製品を選択します。

このファイルは編集時に自動的に保存され、アプリが実行されているときにデバイスにも同期されるため、アプリを再実行することなく、すぐに変更をテストできます。

製品を購入して、何が起こるか見てみましょう。

予想通り、それは失敗します。

この製品を購入できないため、開発者に連絡して詳細を確認する必要があります。

購入エラーを無効にして、今回は正常に完了するようにもう一度試してみましょう。

これらの手順で、このアプリのコードが購入時にこの種のエラーを処理できるかどうかを効果的にテストしました。

この方法は、StoreKit構成設定のAPIとエラーオプションのいずれかに適用して、複数のシナリオをカバーし、アプリが堅牢であることを確認することができます。

これらのエラーはすべてStoreKitの一部であり、すでに遭遇している可能性があります。

それらのそれぞれは、あなたのアプリの失敗の明確なケースを表しています。

そして、それがXcodeでのStoreKitテストのすべての新機能です。

今日は、デバッグセッション以外の複数のデバイスでトランザクションを検査および管理する方法、トランザクションマネージャーから製品を購入して、アプリが既存の購入をどのように処理するかをテストする方法、および多くの障害シナリオをカバーするためにStoreKitエラーをシミュレートする方法を示しました。

Xcodeのこれらの新機能はすべて、StoreKit Testフレームワークを使用してアプリの単体テストを書くためにコードでも利用できるため、すべての同じタスクを実行する自動化を書くことができます。

XCTestセッションでオフデバイス購入を作成し、シミュレートされたエラーを設定するための新しいAPIを見てみましょう。

新しいアプリ内課金を作成するには、StoreKitTestに新しいSwift APIがあり、StoreKit purchase(_:) APIと同じように機能し、同じ購入オプションもあります。

購入日の変更など、新しい購入機能をサポートするために、テスト専用の新しい購入オプションも追加しました。

例を見てみましょう。 例を見てみましょう。

SKTestSessionを設定した後、サブスクリプションのオフデバイス購入を行い、今日から1年前の購入日を上書きします。

これは私がトランザクションマネージャーで行ったのと同じ購入であり、まったく同じように動作し、反復可能な結果を作成し、アプリのテストを自動化することができます。

StoreKitTestには、SKTestSessionでStoreKitエラーをシミュレートするための新しいAPIもいくつかあり、StoreKit構成設定でシミュレートされたエラーと同じように機能します。

テストセッションを作成した後、テストしたいエラータイプとシミュレートする必要があるStoreKit APIでsetSimulatedErrorを呼び出すことができます。

この例では、loadProducts APIのネットワークエラーをシミュレートすることを選択します。

このテストでloadProducts APIを呼び出すたびに、常に同じエラーがスローされます。

シミュレートされた失敗を無効にするには、同じセッターAPIを使用し、エラータイプの代わりにnilを渡します。

最後に、新しいサブスクリプション更新率のAPIもあります。

これらは、timeRateと呼ばれるSKTestSessionのメンバーを介して、既存のものと同じ方法でアクセスできます。

サブスクリプション購入を行うためのこのサンプルテストでは、より高速な更新率を設定し、複数の更新をすばやく生成するためのコードを追加しました。

今日、Xcode機能での新しいStoreKitとStoreKitテストの多くが取り上げられました。

StoreKitには、アプリ内購入の促進をサポートする新しいAPIがあり、TransactionとRenewalInfoのデータモデルには、より貴重な情報を提供するためにいくつかの機能強化があり、請求の問題を処理するために聞くことができる新しいメッセージタイプがあります。

SwiftUIの新しいStoreKitビューは、製品のマーチャンダイジングをサポートするアプリをすばやく構築するための素晴らしいツールであり、すべてのデバイスで動作するように余分なコードを必要としません。

そして最後に、XcodeでのStoreKitテストで提供される優れたツールを使用して、アプリ内のすべてのStoreKit機能を検証できます。

StoreKit 2には、素晴らしいアプリを構築し、ビジネスを成長させることができる多くの素晴らしい機能が満載されています。

Swiftを最大限に活用する多くのツールを追加し、シンプルで強力な新しいAPIを使用すると、顧客のために構築しているエクスペリエンスにもっと集中する機会があります。

製品やサブスクリプションを商品化したいアプリは、StoreKit 2を使用して構築できるようになりました。

まだStoreKit 2を使用していない場合は、試してみてください。使用している場合は、今日お見せした新機能についてご意見をお聞かせください。

既存のアプリで新しいアプリ内購入マーチャンダイジングビューを使用して、エクスペリエンスをさらにカスタマイズするか、これらの新しいAPIのみを使用して新しいエクスペリエンスを作成します。

また、XcodeでのStoreKitテストを使用すると、コードをテストし、すべてがうまく機能し、期待どおりに、あらゆる条件下で最高の体験を顧客に提供できます。

他のStoreKit機能の詳細については、以下にリンクされているこれらのセッションをチェックしてください。

StoreKit 2を使って作成したものを見るのを楽しみにしています。

ご覧いただきありがとうございます。