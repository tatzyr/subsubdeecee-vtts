10256

こんにちは、tvOSチームのソフトウェアエンジニアのKevin Tulodです。

そして、私はCore AudioチームのエンジニアであるSomesh Ganeshです。

このセッションでは、カメラとマイクのサポートをtvOSアプリに導入することについて説明します。

tvOS 17では、Apple TVにContinuity CameraとMicが導入されています。

これで、iPhoneやiPadからカメラとマイクのデータをストリーミングして、tvOSの入力として使用できます。

これにより、大画面用のまったく新しいジャンルのアプリや体験が開きます。

tvOS上のほとんどのアプリは、通常、映画やテレビ番組のストリーミングなどのコンテンツ再生アプリとゲームの2つのカテゴリに分類されます。

連続カメラを使用すると、ビデオやオーディオを記録するコンテンツ作成アプリや、ビデオ会議やライブストリーミングなどのソーシャルアプリなど、tvOS用のまったく新しいアプリを構築できます。

カメラとマイクを既存のストリーミングアプリやゲームに統合して、以前のバージョンのtvOSでは不可能だったまったく新しい機能を作成することもできます。

この機能により、テレビ用の多様なアプリが可能になり、Continuity CameraとMicをtvOSアプリに持ち込む方法を紹介します。

昨年、macOS Venturaは、iPhoneをウェブカメラとして使用するためのContinuity Cameraを導入しました。

携帯電話をMacに近づけるだけで、カメラとマイクが入力デバイスとして利用可能になります。

macOSのContinuity Cameraにまだ慣れていない場合は、WWDC 2022のこのトピックに関するセッションをチェックしてください。

このセッションでは、まず、カメラやマイクにアクセスするためにアプリがtvOSで採用できるAPIの概要から始めます。

次に、アプリがtvOSでContinuity Cameraを採用し、iPhoneやiPadをカメラやマイクとして使用する方法について説明します。

次に、tvOSで優れたアプリ体験を構築する方法について簡単に説明し、他のプラットフォームでの開発と比較して類似点と相違点を強調します。

最後に、Someshは、幅広い複雑なオーディオニーズにアプリで使用できるマイクAPIについて説明します。

キャプチャデバイスAPIの概要から始めましょう。

AVFoundation、AVFAudio、およびAudioToolboxを使用すると、ビデオとオーディオをキャプチャするためのカメラとマイクにアクセスできます。

特にAVFoundationのAVCaptureクラスファミリーで、アプリがキャプチャデバイスをどのように使用できるかを見てみましょう。

まず、アプリはカメラとマイクを表すAVCaptureDevicesとAVCaptureDeviceInputsを使用します。

これらは、キャプチャに関連するすべてのものの主なオブジェクトであるAVCaptureSessionに接続します。

AVCaptureOutputsは、さまざまな方法で入力からデータをレンダリングします。

これらを使用して、映画を録画したり、写真を撮ったり、カメラとマイクのバッファにアクセスしたり、入力デバイスから他のメタデータを取得したりできます。

UIでライブカメラフィードを表示するには、AVCaptureVideoPreviewLayerを使用できます。

これは、CALayerをサブクラスする特別なタイプの出力です。

また、AVCaptureConnectionsを介してキャプチャ入力から互換性のある出力にデータが流れます。

これらのキャプチャAPIは、tvOS 17以降、iOS、macOS、およびtvOSで利用できます。

AVFoundationのキャプチャ機能を使用して開発するのが初めての場合は、developer.apple.comのキャプチャセットアップ開始ページで詳細を確認できます。

tvOSは現在、iOSで提供されているのと同じカメラとマイクのAPIもサポートしています。

すでにiOS用に構築されたカメラまたはマイクアプリをお持ちの場合、ほとんどのコードはtvOSで動作しますが、異なるAPIとコーディングプラクティスがいくつかあります。

Apple TVにはAV入力が内蔵されていないため、カメラとマイクを使用する前に、アプリはDevice Discoveryを採用する必要があります。

これは、アプリがContinuityデバイスが表示されたり消えたりするときなどのエッジケースを処理できるようにするためです。

また、iOSとは異なるtvOSのアプリの起動にはいくつかのニュアンスがあり、最高のtvOSアプリ体験のためにこれらの考慮事項について説明します。

iOSの同じカメラとマイクのAPIがtvOSで利用可能になったので、既存のiOSアプリにtvOSのサポートを導入することを順を追って説明します。

私はすでにiOS用に構築されたシンプルなカメラとマイクアプリを持っています。

このアプリには、カメラとマイクにアクセスして写真を撮影したり、ビデオやオーディオを録画したりする基本的なUIがあります。

このセッションを通して、新しいContinuity CameraとMic APIを使用して、このアプリにtvOSサポートを提供します。

それがどのように構築されているかを見てみましょう。

Xcodeでは、アプリのUIが定義されているContentViewを開きます。

ここで、アプリは画面に表示される基本的なUI要素の位置を指定します。

最も重要なのは、AVCaptureVideoPreviewLayerに接続して、他のすべてのUI要素の背後にあるライブカメラプレビューを表示するCameraPreviewビューです。

次は、AVFoundationからいくつかのAVCaptureSessionクラスをラップするCaptureSessionクラスです。

このクラスにはAVCaptureSessionのプロパティがあり、どのキャプチャ入力が選択され、データがどこに出力されるかを制御するために使用されます。

この場合、出力はContentViewに表示されるAVCaptureVideoPreviewLayerです。

CaptureSessionクラスには、アクティブなビデオ入力を設定する機能もあります。

この機能では、アプリは選択した入力を検証し、AVCaptureSessionを設定し、セッションを開始します。

これにより、AVCaptureDeviceからContentViewに表示されるプレビューレイヤーへのデータの流れが開始されます。

これらのAVCapture APIはすべてtvOSでも利用可能になったので、アプリのサポートされているOSとしてtvOSを追加します。

私は今、プロジェクトナビゲーターでプロジェクトを選択し、アプリのターゲットを強調表示し、サポートされている宛先としてApple TVを追加しています。

この時点で、アプリはtvOSでビルドして実行できます。

しかし、利用可能な入力デバイスがないため、アプリはあまり機能しません。

これにより、キャプチャデバイスを見つけてtvOSで使用するために選択するプロセスから始めて、Continuity Cameraに導きます。

AVCaptureに関連することを行う前に、アプリはビデオおよびオーディオキャプチャデバイスを使用する権限を持っていることを確認する必要があります。

これにより、アプリはこれらのデバイスへのアクセスが必要な理由を説明することができ、ユーザーはアクセスを承認または拒否できます。

Info.plistでカメラとマイクの使用キーを設定することを忘れないでください。

この説明は、承認を求められたときにユーザーに表示されます。

カメラを内蔵したiPhoneやiPadなど、ユーザーの個人用デバイス用のアプリを構築することに慣れているかもしれません。

しかし、Apple TVは、自分のiCloudアカウントを持つ複数の人が共有する共同デバイスです。

共同デバイスで最高の体験を可能にするために、ゲストを含む互換性のあるデバイスを持っている人は誰でも、自分のデバイスを連続性カメラとして使用できます。

これは、ユーザーが自宅、友人の家、またはバケーションレンタルなどの共有スペースでアプリの録画機能を使用できることを意味します。

また、カメラがいつでもシステムから表示または消える可能性があり、アプリはこれらのケースを処理できるはずです。

AVKitは現在、AVContinuityDevicePickerViewControllerと呼ばれる新しいビューコントローラーを提供しています。

このコントローラーを使用して、カメラとマイクとして使用する適格な連続性デバイスを選択できます。

このビューコントローラーは、Apple TVにサインインしているすべてのユーザーを一覧表示し、デバイスをContinuity Cameraに接続できるようにします。

ゲストがApple TVとペアリングして、iOSデバイスを連係カメラに使用する方法もあります。

キャプチャデバイスにアクセスするときは、アプリが最初に使用できるものがあるかどうかを確認する必要があります。

利用可能な場合は、キャプチャデバイスを使用してキャプチャセッションを開始し、AVCaptureOutputsのいずれかにデータを送信できます。

利用可能なものない場合は、デバイスピッカーを使用して、関連するUIをユーザーに提示します。

これは、デバイスのカメラとマイクを共有するプロセスを案内します。

デバイスが選択されると、ビューコントローラーはデリゲートコールバックを呼び、デバイスが表示されたことを知らせます。

その後、そのデバイスの可用性を検証し、キャプチャセッションの開始を続行できます。

舞台裏では、tvOSとiOSが連携してこの接続を確立します。

選択が行われると、tvOSはApple TVのすぐ近くにそのユーザーの適格なデバイスにpingを実行し、確認を促します。

その後、ユーザーは通知されたデバイスのいずれかで接続を受け入れることができます。

その時点で、カメラとマイクがアプリで使用可能になり、カメラとマイクのデータはストリーミングを開始できます。

SwiftUIアプリでデバイスピッカーを表示するために、AVKitはtvOS 17の新機能である継続性DevicePicker修飾子を提供し、ピッカーを提示します。

そのプレゼンテーション状態は、他のコンテンツ提示ビュー修飾子と同様に、状態変数によって更新されます。

デバイスが選択され、利用可能になると、ピッカーはAVContinuityDeviceでコールバックを却下し、呼び出します。

このオブジェクトには、iPhoneやiPadなどの特定の物理デバイスに関連付けられているAVCaptureDevicesへの参照があります。

デバイスピッカーは、AVContinuityDevicePickerViewControllerを使用してUIKitアプリで表示することもできます。

このビューコントローラは、オプションのライフサイクルイベントを提供するデリゲートと、AVContinuityDeviceが選択されて利用可能になったときのコールバックを取ります。

このようなデバイスが利用可能になると、キャプチャデバイスはAVCaptureDeviceDiscoverySessionやAVCaptureDeviceのKVOオブザーバーなど、他のデバイスリスナーにも公開されます。

tvOSでは、キャプチャデバイスは連続性カメラのみであることを覚えておいてください。

これは、アプリがカメラとマイクが使用不可から利用可能に移行するケースを処理しなければならないことを意味し、その逆も同様です。

すべてのプラットフォームで、AVCaptureDevice.systemPreferredCameraを使用すると、最も適した利用可能なカメラにアクセスできます。

このAPIは現在tvOSで利用可能で、まったく同じように機能します。

このプロパティは、カメラの可用性に基づいて更新されます。

Apple TVには一度に1つの連係カメラしか接続できないため、nil値は利用可能なカメラがないことを意味し、nil以外の値は利用可能な連係カメラがあることを意味します。

キー値観察を使用して、systemPreferredCameraの変更を監視できます。

また、tvOSでは、接続されたキャプチャデバイスはType continuityCameraになります。

systemPreferredCameraプロパティをキー値で観察すると、アプリはカメラの可用性に基づいてあるべき状態を再評価できます。

カメラが利用可能になったら、AVCaptureSessionを開始してビデオまたはオーディオの録画を開始できます。

カメラが使用できなくなったら、以前のキャプチャセッションから必要なティアダウンを実行し、デバイスが使用できなくなったことをユーザーに示し、新しいデバイスを接続するオプションを与える必要があります。

連係カメラがApple TVに接続されると、アプリは既存のカメラキャプチャAPIの多くにアクセスできます。

たとえば、AVCaptureMetadataOutputを使用して、検出された顔やボディなどのフレームごとのビデオメタデータを取得できます。

AVCapturePhotoOutputを使用して高解像度の写真をキャプチャしたり、AVCaptureMovieFileOutputを使用してビデオとオーディオでムービーを録画したり、ビデオエフェクトを監視したり、zoomFactorなどのカメラのプロパティを制御したりできます。

連続カメラを搭載したtvOSで利用可能なカメラAPIは他にもたくさんあります。

高度なカメラキャプチャ機能とテクニックを深く掘り下げた以前のビデオを参照できます。

これらは、Continuity Captureデバイスを検出して選択するために、アプリが採用する必要があるtvOS固有のAPIです。

私たちが取り組んでいるアプリにこの機能をもたらしましょう。

XcodeのContentViewでは、デバイスピッカーのプレゼンテーション状態を制御するためにtvOSの状態変数が必要であることがわかっています。

先に進んで状態変数を追加し、コンパイラガードを使用してtvOSでのみ使用されていることを確認します。

ContentViewの下部に、Continuity-Camera-特定のロジックを処理するためのtvOSのみの拡張機能を作成します。

次に、計算変数を追加して、追加した状態変数を切り替えてデバイスピッカーを表示するボタンを作成します。

次に、Continuity Cameraが接続されたときに呼び出されるコールバックハンドラを追加します。

接続されると、カメラがアクティブなビデオ入力として設定され、キャプチャセッションが開始されます。

最後に、すでに接続されている場合に備えて、Continuity Cameraをアクティブにする方法を追加します。

では、UIへの追加を始めましょう。

ビューボディで、デバイスピッカーボタンをビューに追加します。

次に、継続性DevicePickerビュー修飾子を追加し、状態変数と先ほど追加されたコールバック関数に接続します。

最後に、接続されているContinuityデバイスがすでに接続されている場合、起動しようとするタスクを追加します。

そして、これらは、既存のiOSカメラアプリにtvOSサポートをもたらすために必要なすべてのコード変更です。

では、Apple TVで実行して、どのように見えるか見てみましょう。

アプリは基本的なUIで起動しますが、まだカメラを接続していないので、カメラフィードはありません。

先に進み、デバイスピッカーを表示するために追加したボタンを選択します。

これにより、カメラを接続するためのオプションが得られます。

ジャスティンのユーザーを選択し、指示に従ってペアリングします。

そして、連係カメラが接続されています!

このアプリのtvOSバージョンは、iOSと同じ共有コードを使用してどのように見えるかであり、tvOSにデバイス検出を追加するためのいくつかのマイナーな変更だけです。

カメラAPIの既存の使用に変更はありませんでした。

iOSアプリのように、先に進んで写真を撮ることもできます。

そして、それはtvOSのContinuity Cameraです。

既存のアプリをtvOSに適応させている場合や、tvOSの開発を始めたばかりの場合は、プラットフォームのニュアンスをすばやく要約したいと思います。

tvOSで最も顕著な違いは、ユーザーインタラクションです。

tvOSにはダイレクトタッチイベントはありません。

ユーザーは、スワイプ、方向矢印プレス、およびリモコンの他のボタンを介してフォーカスエンジンを使用してシステムと対話します。

共同デバイスとして、tvOSは複数の人が使用でき、複数のユーザーとゲストをサポートしています。

これは、アプリが他のプラットフォームとは異なる方法で個人情報を処理する必要がある可能性があることを意味します。

最後に、tvOSには独自のファイルストレージポリシーがあります。

これは、ビデオやオーディオを録音するコンテンツ作成アプリを書いている場合に特に重要です。

もっと詳しく掘りましょう。

ディスク容量は共有リソースであることを覚えておいてください。

ディスクスペースの主な消費者は、削除できないオペレーティングシステム、フレームワークとアプリバイナリ、その一部は設定がオンになっている場合にオフロードできます。スペースの大部分は一時データのキャッシュとして使用されます。

tvOSアプリは、主にストリーミングなどのコンテンツ消費用に構築されており、非常に大きな利用可能なキャッシュが必要です。

このディスクスペースモデルを維持することは、すべてのtvOSアプリで最高のユーザーエクスペリエンスを確保するのに役立ちます。

iOSでは、FileManagerを使用してデータを永続的に保存し、.documentDirectoryパスに書き込むことができます。

このAPIの使用は、tvOSでは推奨されません。

OSは大きなファイルの永続的な保存を許可していません。

ヘッダーで使用可能な間、.documentDirectoryの使用はランタイムエラーで失敗します。

代わりに、tvOS用にビルドする場合、アプリは.cachesDirectoryのみを使用する必要があります。

このディレクトリ内のデータは、アプリの実行中に利用可能になります。

ただし、このデータはアプリの起動の合間にディスクから消去される可能性があります。

そのため、クラウドにアップロードしたり、ディスクに不要になったときに削除するなど、できるだけ早くデータを他の場所にオフロードすることをお勧めします。

tvOSには他のファイルストレージオプションがあり、興味深いマルチユーザーユースケースがいくつかあります。

たとえば、ユーザー単位でも、CloudKitを使用してアプリデータをiCloudに保存できます。

過去にtvOS上の複数のユーザーのストレージオプションを取り上げており、詳細についてはこれらのビデオを参照することをお勧めします。

tvOS開発が初めての場合は、developer.apple.comのtvOSアプリの計画ページをご覧ください。このページでは、Apple TV用に開発する際に留意すべきさまざまな機能と考慮事項について説明します。

そして、それがtvOS 17の新しいContinuity CameraとDevice Discovery APIを使用して、優れたtvOSアプリ体験を構築する方法です。

それでは、tvOS 17でアクセスできるさまざまなマイク機能について話しましょう。

アプリは、初めてtvOSでマイクを使用する機能を持つことになります!

この機能を利用するためにアプリで何をする必要があるかを掘り下げてみましょう。

これが今年行われた変更の概要です。

tvOSのAVFAudioフレームワークのオーディオセッションに追加されています。

iOSと同様に、オーディオセッションは、アプリでオーディオを使用する方法を伝えるシステムレベルのインターフェイスです。

たとえば、中断やルートの変更などの通知にサインアップして処理し、アプリのカテゴリとモードを設定します。

録画APIのフルスイートもiOSからtvOSに持ち込まれました。

これらには、AVFAudioとAudioToolboxフレームワークの録音APIが含まれます。

オーディオセッションから始めましょう。

tvOS 17では、アプリはApple TVでいくつかの異なるマイクデバイスを使用できるようになります。

これは、iPhoneやiPadのような連続マイク、またはtvOSデバイスに直接ペアリングできるAirPodsや他のヘッドセットのようなBluetoothデバイスのいずれかです。

入力デバイスのタイプを認識する方法は、AVAudioSessionPortタイプを介して行われます。

Device Discoveryフローを通過した後、audioSessionPortsプロパティを持つAVContinuityDeviceにアクセスできます。

ポートタイプを含むオーディオデバイスに関する情報は、このプロパティから照会できます。

継続性マイクの新しいポートタイプが追加され、入力デバイスの種類に基づいてアプリで特定のことをしたい場合は、このポートを識別子として使用することをお勧めします。

ただし、このフローは、AVContinuityDeviceに該当するiPhoneとiPadでのみ機能します。

また、既存のオーディオセッションAPIを引き続き使用して、システム上の利用可能な入力を照会することもできます。

AirPodsまたはBluetoothマイクの既存のポートタイプは、iOSから引き継がれました。

キャプチャデバイスの可用性に基づいて、マイクデバイスの可用性と、tvOSでどのように監視する必要があるかについて話しましょう。

Apple TVにはマイクが内蔵されておらず、アプリが常にマイクデバイスにアクセスできることは保証されていません。

この目的のために、オーディオセッションのInputAvailableプロパティは、使用可能なマイクデバイスがあるときと存在しないときに監視するためのキー値の観測可能なサポートを持つようになりました。

マイクの可用性に動的な変更がある場合は、このプロパティを聞くことを強くお勧めします。

これは、オーディオセッションをアクティブにしてI/Oを開始するタイミングを決定し、マイクデバイスがシステムから表示または消えたときにアプリの状態を処理するのにも役立ちます。

次に、iOSと同様に、録画許可APIがtvOS 17で利用可能になり、ユーザーがすでにアプリにマイクへのアクセスを許可しているかどうかを確認し、そうでない場合は録画許可をリクエストできます。

アプリは、I/Oの起動中に失敗を避けるために記録する権限を確保することをお勧めします。

最後になりましたが、オーディオセッションでは、playAndRecordのカテゴリやボイスチャットやビデオチャットなどのモードなどの入力をサポートするカテゴリとモードがtvOSでも利用可能になりました。

ヘッダーAVAudioSessionTypesを参照して、どのオーディオセッションカテゴリとモードがアプリに最も適しているかを判断するのに役立ちます。

そして、これらはtvOS 17に新しく追加されたすべてのオーディオセッションの変更です。

では、多様な記録APIとその推奨ユースケースについて話しましょう。

まず、AVAudioRecorder。

これはオーディオファイルに録音する最も簡単な方法であり、非リアルタイムのユースケースのためにマイクに入っているものを録音する必要がある場合は、AVAudioRecorderが頼りになるオプションです。

さまざまなエンコーディング形式、特定のファイル形式、サンプルレートなどで構成できます。

次に、AVCaptureがあります。

ケビンが述べたように、既存のiOS AVCapture APIを活用して、カメラとマイクの両方が再生されている場合は、基本的な録音ユースケースのマイクにアクセスできます。

AVAudioEngineに進みます。

AVAudioEngineは、シンプルで複雑なオーディオ処理のユースケースの録音と再生の両方をサポートしています。

この例としては、マイクからのユーザーの音声入力を分析し、このマイク入力を再生トラックとミックスできるカラオケアプリがあります。

現在、アプリがリアルタイムのオーディオI/Oサイクルと直接やり取りしたい場合があります。

AVAudioEngineはリアルタイムのインターフェースも提供します。

アプリは、AVAudioSinkNodeとAVAudioSourceNodeを介してリアルタイムのセーフレンダリングコールバックを提供できます。

AVAudioEngineで音声処理機能にアクセスすることもできます。

低レベルのインターフェースを扱うアプリでは、対応するiOSメカニズムもtvOSに持ち込まれています。

非リアルタイム録音のユースケースについては、AudioQueueに問い合わせることができます。

リアルタイムのオーディオI/Oサイクルと直接対話するには、既存のAudioUnit APIを介してオーディオユニットAU RemoteIOとAU VoiceIOを使用できます。

これらのAPIに関する詳細情報をご希望の場合は、AVFAudioおよびAudio Toolboxフレームワークの開発者Webサイトをチェックすることをお勧めします。

たとえば、会議のユースケースでは、Apple TVからの再生をエコーキャンセルする必要があるマイクストリームが必要な場合は、音声処理APIにオプトインすることを強くお勧めします。

理由について話しましょう。

標準的なエコーキャンセルの問題と比較して、録音と再生が同じデバイスで行われるiPhoneでは、tvOSのセットアップで新しいことがすべてここにあります。

連続マイク対応ルートでは、録音はiPhoneまたはiPadで行われます。

しかし、再生はtvOSデバイスでストリーミングされ、任意のテレビスピーカー、ホームシアターのセットアップ、サウンドバー、またはステレオHomePodのペアから再生することができ、そのほとんどは5.1や7.1 LPCMなどの豊富なフォーマットを再生し、ユーザーエクスペリエンスを向上させるために独自のオーディオ処理を実行する機能を備えています。

これに加えて、一般的なApple TVの設定では、ユーザーはマイクデバイスから数フィート離れている可能性があり、このマイクデバイスはこれらの大きな再生デバイスにはるかに近い可能性があります。

これらのシナリオはすべて、ローカル環境からのオーディオを高品質でキャプチャしながら、Apple TVからのすべての再生をキャンセルしたいという非常に困難なエコー制御問題を設定しました。

これらすべての課題を克服するために、tvOS 17は現在、新しい音声処理とエコーキャンセル技術を導入しています。

tvOSでも利用可能な既存のiOS APIを採用するだけで、これを活用できます。AVAudioEngineでは、inputNodeでsetVoiceProcessingEnabledを呼び出すだけで済みます。

また、VoiceProcessingIOサブタイプを使用して、AU VoiceIOオーディオユニットを介してこれにアクセスすることもできます。

音声処理APIとそれらが提供する機能の詳細については、セッションを参照してください。音声処理の新機能は何ですか?

そして、それは今年tvOS 17に新しく追加されたすべてのオーディオAPIです。

さて、私たちのアプリに戻って、このマイク機能の一部を活用する方法を見てみましょう。

Xcodeに戻って、AudioCapturerクラスを開きます。

このクラスは、アプリコードの残りの部分から、基礎となるオーディオAPIのすべてのニュアンスを抽象化します。

AVAudioEngineの独自のインスタンスがあります。これは、このインスタンスで使用する録音APIです。

また、オーディオセッションの独自の共有インスタンスもあります。

そして、これはこのクラスが何をするかについての簡単な洞察です。

高レベルでは、アクティベーション前にオーディオセッションのカテゴリとモードを設定し、基礎となるAVAudioEngineを正しいフォーマットで設定します...

そして、入力ノードに音声処理を設定し、それをバイパスするためのユーザー制御可能なトグルで設定します。

この例では、非リアルタイムのコンテキストでエンジンを実行しています。

さて、tvOS用にこれを変更するために何をする必要があるかを見てみましょう。

このiOSアプリは、マイクデバイスが常に利用可能であると仮定して、tvOSと同じように構築されます。

私がする必要があるのは、オーディオセッションを開始し、その後I/Oを開始する前に、入力マイクデバイスが利用可能であることを確認するために、inputAvailable KVO通知を聞くためのオブザーバーを追加することです。

先に進んで、ここに追加します。

また、マイクデバイスが表示されたり、システムから消えたりしたときに、アプリの状態を処理することを確認する必要があります。これは、ユーザーがセッション中にApple TVから携帯電話を切断するだけの可能性があります。

これは今、私のApple TVでうまくいくはずです。実際に見てみましょう! 

ここで、私は今、アプリのオーディオモードに入っています。

再生を押して曲を再生し、自分の話を録音することができます。

うわー、この曲はとてもグルーヴィーです!

聴くといつも踊りたくなった気分です。

楽しかったです！

今、私たちがいた音声処理モードでは、Apple TVから再生されたこの曲はキャンセルされ、アプリに送信されるローカル環境からの音声のみが残ります。

うわー、この曲はとてもグルーヴィーです。

聴くといつも踊りたくなった気分です。

そして、それはtvOSのエコーキャンセルです。

そして、それはラップです!私たちが経験したことを要約しましょう。 

私たちはこの機能を高いレベルで紹介し、tvOSでロック解除される新しいジャンルのアプリについて話しました。

次に、デバイスピッカーを提示し、継続性デバイスを選択するための新しいデバイスディスカバリーAPIについて議論しました。

tvOSで現在使用できるカメラとマイクのAPIを見直しました。

そして最後に、既存のカメラとマイクアプリをtvOS用に構築し、できるだけ多くのコードを共有し、デバイスディスカバリーのみを追加しました。

また、tvOS固有の考慮事項についてもまとめました。

カメラとマイクのサポートをtvOSアプリにお届けできることをとても楽しみにしています。

この機能を備えたこのプラットフォームで開発するアプリを見るのが待ちきれません!

ありがとうございます。

。