10148

♪まろやかなインストゥルメンタルヒップホップ♪

♪

カート・クリフトン：こんにちは、参加してくれてありがとう。

私はCurtで、SwiftUIチームのエンジニアです。

ジェフ・ロバートソン:そして、私はジェフです。

私はSwiftUIチームのエンジニアでもあります。

SwiftUIの新機能を共有する機会があることを嬉しく思います。

Curt: SwiftUIは、まったく新しいプラットフォームを含め、さらに多くの場所で使用できるようになりました!

新しいデータフロータイプは、ドメインのモデリングを劇的に簡素化し、これまで以上に多くの電力を提供します。

インスペクタとテーブルの改善は、データを表示するための優れた方法を提供します。

チームはアニメーションAPIを増幅し、アプリを使用している人々のためにさらに美しい体験を作成できるようにしました。

フレームワーク全体で、強力なスクロールビューの改善、フォーカスとキーボード入力の改良、ボタンやメニューなどのコントロールのより深いカスタマイズなど、優れたインタラクションを提供する能力を強化しました。

SwiftUIを使用するためのいくつかの素晴らしい新しい場所についてお話しできることを嬉しく思います。

ヘッドセットやwatchOS 10から新しいウィジェットやクロスフレームワークの統合まで、SwiftUIはアプリを使用する人々を喜ばせる体験を生み出すのに役立ちます。

空間コンピューティングは、ボリュームなどのまったく新しい3D機能、没入型スペースでの豊かな体験、新しい3Dジェスチャー、エフェクト、レイアウト、RealityKitとの深い統合により、SwiftUIを大胆な新しい未来にもたらします。

コントロールセンターのホームビューのようなコアピースから、テレビ、サファリ、フリーフォームなどの使い慣れたアプリまで、基調講演の没入型リハーサルのようなまったく新しい環境まで、SwiftUIはこれらのユーザーエクスペリエンスの中心にあります。

この新しいプラットフォームでは、WindowGroupのような使い慣れたシーンタイプを使用してウィンドウを構築します。

WindowGroupのシーンは、楽しい深度に敏感な3Dコントロールで、2Dウィンドウとしてレンダリングされます。

ウィンドウ内で、NavigationSplitViewやTabViewなどの通常のSwiftUIコンテナの1つを選択します。

これらのコンテナ内では、他のプラットフォームと同様に、通常のSwiftUIコントロールをすべて使用できます。

さらに深みを得るには、ボリュームスタイルをシーンに適用してください。

ボリュームは、ボードゲームや建築モデルなどの3D体験を境界空間で表示します。

それらは他のアプリと一緒に表示されます。

人々は、メモに考えを書き留めたり、Keynoteでスライドを更新したりしながら、あなたのコンテンツを使用することができます。

Model3Dを使用して静的モデルでボリュームを埋めます。

照明効果などを備えたダイナミックでインタラクティブなモデルには、新しいRealityViewを使用してください。

本当に全力を尽くすには、ImmersiveSpacesをアプリに追加してください。

新しいImmersiveSpaceシーンタイプでは、周囲に埋め込まれているか、完全に没入しているかにかかわらず、没入感のある空間体験を定義できます。

このシステムは、他のアプリを遠ざけ、人々があなたが作った世界に飛び込むようにします。

混合イマージョンスタイルのImmersiveSpaceを使用して、アプリを現実世界に接続し、コンテンツを人々の環境と組み合わせます。

アプリの要素をテーブルやサーフェスに固定し、仮想オブジェクトとエフェクトで現実世界を増強し、豊かにします。

完全なイマージョンスタイルでさらに進んでください。

あなたのアプリは完全にコントロールします。

ボリュームで動作する同じModel3DとRealityViewを使用して、これらの接続された没入型エクスペリエンスを構築します。

この新しいプラットフォームのSwiftUIを使用すると、魔法のような体験を作成できます。

「空間コンピューティングのためのSwiftUIに会う」を見て、この素晴らしい組み合わせを探求し続けてください。

SwiftUIは自宅で部屋いっぱいの体験を構築していますが、Appleの最もポータブルなディスプレイの体験を構築することもできます。

watchOS 10は、タイムリーな情報を明らかにし、焦点を絞ったコンテンツを一目で伝え、ディスプレイの形状と忠実度を祝う、再設計されたユーザーエクスペリエンスを提供します。

この美しいフルスクリーンの色と画像を活用するために、プラットフォーム全体でアプリを更新しました。

これらのデザインの根底には、watchOS 10用に新しく強化されたいくつかの既存のSwiftUIビューがあります。

NavigationSplitViewとNavigationStackは、美しい新しいトランジションを取得します。

TabViewは、デジタルクラウンによって駆動される新しい垂直ページングスタイルを取得します。

SwiftUIは、このフルカラーのセンスをApple Watchアプリにももたらすのに役立つ新しいAPIを導入しています。

新しいcontainerBackground修飾子を使用すると、コンテンツをプッシュしてポップするときにアニメーション化するこれらの微妙な背景ウォッシュを設定できます。

watchOSでタブビューの背景を設定することもできます。

そして、新しいマルチプラットフォームツールバーの配置 - topBarLeadingとtopBarTrailing、および既存のbottomBar - を使用すると、これらの小さな詳細ビューをApple Watchアプリに完璧に配置できます。

これらの新しい追加に加えて、DatePickerやリストの選択など、既存のAPIを初めてwatchOSに持ち込むことを嬉しく思います。

今、これらの新機能でApple Watchアプリを磨くのに最適な時期です。

そして、まだApple Watchアプリをお持ちでない場合は、始めるのに最適な時期です。

「watchOS 10用のアプリの設計と構築」で、デザインとエンジニアリングがどのように連携してこれらの体験を生み出すかを学びましょう。

次に、「watchOS 10用にアプリをアップデートする」を使用して、これらのアイデアを作業に適用します。

watchOS 10のスマートスタックのウィジェットを使用すると、アプリを使用しているユーザーが外出先で情報を見ることができます。

SwiftUIは、これらの他の新しい場所のように、どこに現れてもウィジェットの中核です。

iPadOS 17のロック画面のウィジェットは、ホーム画面のウィジェットを補完するものです。

大きくて大胆なウィジェットは、スタンバイモードでiPhoneの常時オンディスプレイに輝きます。

また、macOS Sonomaのデスクトップウィジェットは、日々の間、人々を最新の状態に保ちます。

ウィジェットは新しい場所への道を見つけ、チームは彼らに別のトリックを教えました。

ウィジェットがインタラクティブなコントロールをサポートするようになったことを共有できることを嬉しく思います。

ウィジェットのトグルとボタンは、App Intentsを使用して、独自のアプリバンドルで定義されたコードをアクティブにできるようになりました。

また、SwiftUIトランジションとアニメーション修飾子を使用してウィジェットをアニメーション化できます。

これらの素晴らしい新機能を使い始めるには、「ウィジェットを新しい場所へ」と「ウィジェットに命を吹き込み」をチェックしてください。

新しいインタラクティブなアニメーションウィジェットを開発して改良するには、Xcodeプレビューのパワーを気に入るはずです。

プレビューは、Swift 5.9のマクロを活用して、エレガントな新しい構文を提供します。

プレビューを宣言して設定し、ウィジェットタイプを追加し、テストのタイムラインを定義します。

Xcodeプレビューは、現在のウィジェットの状態と、状態間のアニメーションを確認できるタイムラインを表示します。

もちろん、新しいプレビューは、通常のSwiftUIビューやアプリでも機能します。

そして、Xcode内でMacアプリのプレビューと対話できるようになりました。

「XcodeプレビューでプログラマティックUIを構築する」というトークをチェックして、これらの素晴らしい新しいツールを活用してアプリとウィジェットの開発を加速する方法を学びましょう。

プレビューに電力を供給するマクロに加えて、Swift 5.9は他の多くの改善をもたらします。

「Swiftの新機能」をキューイングして、Swiftで新鮮なものの概要を把握しましょう。

SwiftUIが新しい場所に来るもう1つの方法は、他のAppleフレームワークへのSwiftUI固有の拡張機能です。

いくつかのフレームワークは、新しいまたは改善されたサポートをもたらし、私は特にエキサイティングだと思ういくつかを強調したいと思います。

MapKitは、SwiftUIコードでAppleの素晴らしいマッピングフレームワークの力を提供する大規模なアップデートを提供します。

SwiftUIとMapKitをインポートするだけで、これらの素晴らしい機能を使用できます。

あなたのビューに地図を入れてください。

カスタムマーカー、ポリライン、およびユーザーの位置情報を追加します。

利用可能なコントロールを設定します。

SwiftUIアプリに素晴らしいマップを追加することについてすべて学ぶには、「SwiftUIのMapKitに会う」というトークをチェックしてください。

2年生のシーズンでは、Swift Chartsは、スクロールチャート、選択のための組み込みサポート、そして人々が飢えていることを知っているものなど、多くの大きな改善をもたらします：新しいSectorMarkでドーナツと円グラフ。

これらの新機能を掘り下げるには、「Swift Chartsで円グラフとインタラクティブ性を探る」というトークをチェックしてください。

忠実な顧客を引き付け、維持する体験を構築するために、新しいアプリ内購入とサブスクリプションストアの使いやすさとパワーを気に入るはずです。

カスタムマーケティングコンテンツを含むサブスクリプションストアビューを提示します。

ブランディングに合わせてフルブリードの背景を設定し、さまざまなコントロールオプションから選択します。

「Meet StoreKit for SwiftUI」を見て、アプリ内マーケティングゲームをパワーアップしましょう。

新しいプラットフォームやウィジェットから、クロスフレームワークの統合、watchOSの美しさまで、SwiftUIはAppleの開発者体験を前進させ続けています。

SwiftUIを使用するすべての新しい場所を見るのはエキサイティングです、ジェフ。

ジェフ：確かに！また、すべてのプラットフォームで機能する多くの大きな改善もあります。

カート：確かに！

ジェフ：これらの改善点を使用するアプリに取り組むべきです。

カート：ああ、同意しました！

私のアイデアについてもっと考えましたか？

ジェフ：犬についてのやつ？カート：うん！

それはバードウォッチングのようなものですが、犬向けです!

ジェフ：あなたは本当に人々がドッグウォッチングアプリを望んでいると思いますか？

カート：ああ、確かに！ピッチデッキは実質的に自分自身を書きます。

ジェフ：100万ドルのアイデアが整ったので、アプリの構築を開始する時が来ました。

すべての素晴らしいアプリは素晴らしいデータモデルから始まるので、SwiftUIがアプリのデータを操作するための素晴らしい新機能のパックを見ることから始めましょう。

SwiftUIについて私が好きなことの1つは、UIをアプリの状態の関数として定義できることです。

SwiftUIでモデルタイプを定義する方法の最大のアップグレードを共有できることを嬉しく思います。新しいObservableマクロです。

観測可能なモデルを使用すると、データフローに使い慣れたSwiftUIパターンを使用すると同時に、コードをより簡潔でパフォーマンスの高いものにすることができます。

これは、外出中に会った犬を表すデータを保存するために設定したモデルクラスです。

このタイプをObservableにするには、自分のタイプにマクロを追加します。

私がする必要があるのはそれだけです。

ObservableObjectとは異なり、プロパティを公開済みとしてマークする必要はありません。

観測可能なモデルは、データフローのための既存のSwiftUIメカニズムに簡単に統合できます。

私のDogCardビューを例に挙げてみましょう。

ビューでObservableを使用する場合、SwiftUIは読み込むプロパティへの依存関係を自動的に確立します。

また、読み取り時にプロパティラッパーを使用する必要がないため、ビューコードはよりクリーンになります。

そして、このビューはisFavoriteプロパティを読んでいるので、それが変更されると再評価されます。

無効化は読み込まれたプロパティに対してのみ行われるため、不要な更新をトリガーすることなく、中間ビューを介してモデルを渡すことができます。

SwiftUIには、状態とビューとの関係を定義するためのいくつかのツールが含まれており、そのうちのいくつかはObservableObjectで使用するために設計されています。

Observableを使用すると、状態と環境の動的プロパティで直接動作するように設計されているため、これはさらに簡単になります。

読み取り専用値のモデリングに加えて、Observablesは、新しい犬の目撃のためのこのフォームのように、可変状態を表すのに自然に適合します。

モデルはState dynamicプロパティを使用して定義され、そのプロパティの編集を担当するフォーム要素にそのプロパティへのバインディングを渡しています。

最後に、Observableタイプは環境にシームレスに統合されます。

アプリ全体のビューは、現在のユーザーを取得する方法を望んでいるので、ルートビューの環境に追加しました。

次に、ユーザープロファイルビューは、環境動的プロパティを使用して値を読み取ります。

ここでは環境キーとしてタイプを使用していますが、カスタムキーもサポートされています。

この強力な新しいツールを活用する方法の詳細については、「SwiftUIで観察を発見する」を必ずキャッチしてください。

Observableで明確で簡潔なコードを書くことができるのが大好きです。

それは私のアプリの素晴らしいスタートを与えてくれましたが、お気に入りの子犬を見失わないように、データモデルの変更が持続していることを確認したいと思います。

SwiftDataは、データモデリングと管理のためのまったく新しいフレームワークです。

高速でスケーラブルで、SwiftUIでうまく機能します。

SwiftDataモデルはコードで完全に表されるため、SwiftUIアプリに自然に適合します。

SwiftDataのDogモデルタイプを設定するには、Observableの使用からModelマクロに切り替えます。

これが私が行う必要がある唯一の変更です。

SwiftDataが提供する永続性に加えて、モデルはObservableを使用するすべての利点も受けられます。

それは本当に強力です。

私たちのドッグウォッチングアプリのメイン画面には、最近出会った犬のスクロールスタックが表示されます。

ここでSwiftDataを使用するために必要な変更点について説明しましょう。

まず、アプリの定義にモデルコンテナを追加し、モデルタイプを提供します。

次に、ビューコードで、新しいクエリ動的プロパティを使用するように犬の配列を切り替えます。

クエリを使用すると、基礎となるデータベースからモデル値を取得するようにSwiftDataに指示されます。

新しい犬を見つけたときのように、データが変わると、私のビューは無効になります。

クエリは、大規模なデータセットに対して非常に効率的であり、犬を見つけた日付を使用するようにソート順を変更するなど、データの戻り方法のカスタマイズが可能になり、アプリでのエクスペリエンスが向上します。

SwiftDataは、ドキュメントのデータをmacOSとiOSに保存するのにも最適です。

アプリのドッグタグビジュアルトリートメントのプロトタイプを素早く試したいと思ったので、Curtとデザイナーとコラボレーションするためのこの小さなドキュメントベースのアプリを構築しました。

ドキュメントベースのアプリは、新しい初期化子を使用してSwiftDataのすべての機能を利用できます。

SwiftUIは、各ドキュメントの基礎となるストレージにSwiftDataを使用し、モデルコンテナを自動的に設定します。

SwiftDataとSwiftUIとの統合方法の詳細については、「Meet SwiftData」と「SwiftDataでアプリを構築する」をご覧ください。

SwiftDataのサポートに加えて、DocumentGroupは、iOS 17またはiPadOS 17で実行すると、自動共有やドキュメントの名前変更のサポート、ツールバーの取り消しコントロールなど、多くの新しいプラットフォームのアフォーダンスも得ることができます。

インスペクタは、現在の選択またはコンテキストの詳細を表示するための新しい修飾子です。

それはあなたのインターフェースの明確なセクションとして提示されています。

macOSでは、Inspectorは末尾のサイドバーとして表示されます。

レギュラーサイズのクラスでiPadOSでも。

コンパクトサイズのクラスでは、シートとして表示されます。

インスペクターのすべての詳細を明らかにするには、「SwiftUIのインスペクター：詳細を発見する」をご覧ください。

ダイアログには、iOS 17とmacOS Sonomaでいくつかの新しいカスタマイズAPIが与えられています。

新しい修飾子のいくつかを使用して、画像エクスポートダイアログに、確認ボタンのラベルの調整など、いくつかの有用な情報を与えています。

重大度の増加は、重要な確認ダイアログに注意を引くのに役立ち、抑制トグルを含めることは、ダイアログがその後のインタラクションのために自分自身を表示すべきではないという好みを示します。

最後に、HelpLinkを追加すると、ダイアログの目的に関する詳細情報のガイドになります。

リストとテーブルはほとんどのアプリの重要な部分であり、SwiftUIはiOS 17とmacOS Sonomaでそれらを微調整するためのいくつかの新機能とAPIをもたらしました。

テーブルは、列の順序と可視性のカスタマイズをサポートします。

SceneStorageの動的プロパティと組み合わせると、これらの設定はアプリの実行中に保持できます。

カスタマイズ状態を表す値をテーブルに提供し、各列に一意の安定した識別子を与えます。

テーブルには、OutlineGroupのすべてのパワーも組み込まれています。

これは、私のお気に入りの犬のいくつかを誇り高い両親とグループ化するこのような、階層構造に適した大規模なデータセットに最適です。

新しいDisclosureTableRowを使用して、他の行を含む行を表し、通常どおりテーブルの残りの部分をビルドするだけです。

リストまたはテーブル内のセクションは、プログラマティック拡張のサポートを得ています。

アプリのサイドバーで使用して、ロケーションセクションを最初に折りたたんだものとして表示しましたが、拡張はまだ許可されています。

新しい初期化子は、セクションの現在の展開状態を反映した値にバインディングします。

小規模なデータセットの場合、テーブルは、行の背景や列ヘッダーの表示方法など、いくつかの新しいスタイリングアフォーダンスも得ています。

そして最後に、私の星評価のようなカスタムコントロールも、新しいバックグラウンドプロミネンス環境プロパティの恩恵を受けるでしょう。

背景が目立つときに目立たないフォアグラウンドスタイルを使用すると、カスタムコントロールをリストでくつろげることができます。

リストやテーブルのルックアンドフィールを微調整できるこれらのAPIやその他のAPIに加えて、特に大規模なデータセットを扱う場合、パフォーマンスを大幅に改善しました。

これと、独自のSwiftUIビューを最適化する方法の詳細については、「SwiftUIのパフォーマンスを解明する」をチェックしてください。

ObservableからSwiftData、Inspector、テーブルのカスタマイズまで、アプリ内のデータの操作はまったく新しい体験のように感じられます。

カート：ジェフがまとめたデータモデルとテーブルで、私たちは素晴らしいアプリの骨を持っています。

並外れた新しいアニメーションAPIを使って、いくつかのピザを追加したいと思います。

犬の写真のギャラリーを見るためのApple TVアプリがあればいいと思います。

これは私が現在の視聴者を選択するために取り組んできたアニメーションです。

私は新しいKeyframe Animator APIでこれを構築しました。

キーフレームアニメーターは、複数のプロパティを並行してアニメーション化できるようにしました。

私はアニメーターにアニメ可能なプロパティと等しい状態の一部を含む値を与えます。

状態の変更は、私のアニメーションをトリガーします。

最初のクロージャでは、ロゴの垂直オフセットのように、アニメーション可能なプロパティによって変更されたビューを構築します。

2番目のクロージャでは、これらのプロパティが時間の経過とともにどのように変化するかを定義します。

たとえば、最初のトラックは、私のverticalTranslationプロパティのアニメーションを定義します。

春のアニメーションを使用して、第1四半期にロゴを30ポイント引き下げます。

その後、私はビーグルを飛躍させ、立方曲線を使って着陸させます。

最後に、私は自然の春のアニメーションでこの犬を家に持ち帰ります。

他のアニメーションプロパティの追加トラックを定義します。

これらのトラックはすべて、このクールなアニメーションを作成するために並行して実行されます。

アプリでキーフレームアニメーターを活用する方法を学ぶには、「SwiftUIで高度なアニメーションを駆け抜ける」をチェックしてください。

私はまた、ランニング中に犬の目撃情報を記録するためにApple Watchアプリに取り組んでいます。

これまでのところかなりシンプルで、私たちの幸せなアイコンと目撃を登録するためのボタンだけです。

ボタンをタップすると、このアイコンをアニメーション化したいです。

これはフェーズアニメーターにとって良い場所です。

フェーズアニメーターは、キーフレームアニメーターよりも簡単です。

並列トラックの代わりに、単一の一連のフェーズをステップスルーします。

これにより、前のアニメーションが終了したときに1つのアニメーションを開始できます。

私はアニメーターに一連のフェーズを与え、私の目撃カウントが変わるたびに私のアニメーションを実行するように指示します。

そして、この最初の閉鎖で、私は現在の段階に基づいて私の幸せな犬の回転とスケールを設定しました。

2番目のクロージャは、各フェーズにアニメーション化する方法をSwiftUIに伝えます。

私はここでクールな新しい春のアニメーションのいくつかを使用しています。

私はただこれらの名前が大好きです。

軽快なアニメーションや弾力のあるアニメーションを望まない人はいますか?

そして、私の成長段階では、私は完全にカスタムスプリングを使用しています。

スプリングは持続時間を取り、バウンスし、説明しやすくなりました。

SwiftUIアニメーションを取るこれらの新しいスプリングはどこでも使用できます。

春のアニメーションは素敵で自然な感じがします。

それらは以前のアニメーションの速度と一致し、現実的な摩擦で最終的な値に落ち着きます。

それらは現在、iOS 17以降に構築されたアプリと調整されたリリースのデフォルトのアニメーションです。

私は今、私のアニメーションに満足していますが、私が走っているとき、それはまた、いくつかの触覚フィードバックを得るのは素晴らしいことです。

触覚フィードバックは、タップなどの触覚応答を提供し、注意を引き、行動やイベントを強化します。

手首を叩くと、犬を見逃さなかったという自信が高くなると思います。

触覚フィードバックは、新しい感覚フィードバックAPIで簡単です。

触覚フィードバックを再生するには、sensoryFeedback修飾子を添付し、どのようなフィードバックが欲しいか、いつ起こるべきかを指定するだけです。

sensoryFeedback修飾子は、触覚フィードバックをサポートするすべてのプラットフォームで動作します。

異なるプラットフォームは異なる種類のフィードバックをサポートしているので、ヒューマンインターフェースガイドラインをチェックして、アプリにどのようなフィードバックが最適かを学んでください。

また、新しい視覚効果修飾子を使用して、ウェルカム画面のアニメーションにも取り組んできました。

視覚効果修飾子を使用すると、位置に基づいてこれらの犬の写真を更新することができます。

そして、それを行うのにGeometryReaderは必要ありません。

私は画面の周りに焦点を動かす小さなシミュレーションを持っています。

この赤い点は、焦点の意味を示しています。

私はすべての犬を示すこのグリッドと座標空間を関連付けます。

次に、DogCircleビュー内に視覚効果を追加します。

クロージャは、私のコンテンツを変更し、ジオメトリプロキシを取得します。

スケールを計算するために、ジオメトリプロキシをヘルパーメソッドに渡しています。

ジオメトリプロキシを使用して、グリッドビューのサイズと、グリッドビューに対する単一の犬の円のフレームを取得できます。

これにより、犬がシミュレーションの焦点からどのくらい離れているかを計算できるので、集中したドッグゴをスケールアップできます。

視覚効果があれば、GeometryReaderを使わずにこれらすべてを行うことができます。

そして、それは自動的に異なるサイズに適応します。

もう1つ例を挙げたいと思います。

私は私が会った犬の人々に良い犬のメッセージを送るための機能で遊んできました。

犬の名前をスタイリングして目立たせるのは楽しいだろうと思いました。

別のテキストビュー内で前景スタイルでテキストを補間できるようになったので、これは簡単です。

そして、それをチェックしてください!

これらのスライダーを使ってスタイリングを調整できます。

さて、それはどのように機能しますか?

私がスタイルを定義する方法は次のとおりです。

ストライプスペーシングと角度を、アセットカタログの色とともに、カスタムメタルシェーダーに渡しています。

SwiftUIの新しいShaderLibraryを使用すると、Furdinandの名前でストライプをレンダリングするこのようなSwiftUIシェイプスタイルにメタルシェーダー関数を直接回すことができます。

Metalシェーダーをスピンアウトしたい場合は、新しいMetalファイルをプロジェクトに追加し、SwiftUIのShaderLibraryを使用してシェーダー関数を呼び出すだけです。

この例では、私が指摘したいことがもう一つあります。

スライダーのトラックの端を押すと、シンボルがこの満足のいくバウンスを与えることに注意してください。

その効果は、macOSとiOSのスライダーに組み込まれています。

新しいシンボル効果修飾子を使用して、独自のシンボルに追加することもできます。

この修飾子を適用して、SFシンボル、またはビュー階層内のすべてのシンボルをアニメーション化するだけです。

シンボルは、パルスや可変色の連続アニメーションなど、さまざまなエフェクトをサポートしています。

状態はスケールで変化し、現れ、消え、置き換え、イベント通知はバウンスで変化します。

「アプリでシンボルをアニメーション化」を見て、シンボルエフェクトを使用するための最高の人々を喜ばせるプラクティスについて学んでください。

この例を残す前に、最後の1つの機能を指摘したいと思います。

ここのテキストの単位に注目してください。

以前は、この効果のために小さなキャップを使用していたかもしれませんが、今では新しいtextScale修飾子をユニットに適用することで、この外観を得ることができます。

ジェフと私がアプリを中国市場に持ち込みた場合、スモールキャップの概念は中国語のタイポグラフィの一部ではないにもかかわらず、ユニットのサイズは正しくなります。

アプリが複数のロケールでうまく機能するのに役立つ別のツールがあります。

タイ語のような一部の言語は、背の高い文字形式を使用します。

これらの言語のいずれかからのテキストが、英語のような短い文字形式の言語にローカライズされたテキストに埋め込まれている場合、背の高いテキストは混雑したり、クリップされたりする可能性があります。

たとえば、犬の名前がグローバルにクラウドソーシングされている場合など、これが問題になる可能性があることがわかっている場合は、タイプセット言語修飾子を適用できます。

これにより、SwiftUIはテキストにより多くのスペースが必要になる可能性があることを知らせます。

私はこれらの新しいAPIを使ってとても楽しんでいますが、圧倒的な人々を避けるためにアニメーションを上品に選択することが重要です。

SwiftUIのアニメーションの基礎については、「SwiftUIアニメーションを探索する」をチェックしてください。

その後、「スプリングでアニメーション化」では、ジェイコブはみんなのデバイスでくつろげるアニメーションを構築するのに役立ちます。

SwiftUIの新しいアニメーションAPIの幅は素晴らしいです。

私はここで表面を引っ掻いただけです。

アニメーション補完ハンドラから完全にカスタムアニメーションの構築まで、さらに多くの発見があります。

あなたが私と同じくらいこれらのAPIを楽しんでくれることを願っています。

ジェフ：これらすべての新しいアニメーションとエフェクトが本当に私たちのアプリに命を吹き込むのが大好きです。

さて、最後の仕上げのための新しいインタラクションAPIのいくつかを見てみましょう。

インタラクションは、優れたアプリ体験の中心であり、これらはiOS 17と調整されたリリースに搭載される更新されたAPIのほんの一部です。

最近会った犬の私のスクリーンは、それに磨きの最後のビットを与えるために少し余分な才能を使うことができます。

スクロールビューの可視領域に出入りする際に、犬のカードにいくつかの視覚効果を追加したいと思います。

スクロール遷移修飾子は、以前にウェルカム画面に使用した視覚効果修飾子Curtと非常によく似ています。

スクロールビューのアイテムにエフェクトを適用できます。

スケールと不透明度の効果を使用すると、ほんの数行の余分なコードだけで、私が望んでいたほんの少しの磨きが与えられました。

また、お気に入りのドッグパークの横スクロールリストをこの画面に追加したいと思います。

SwiftUIは、これを構築できるようにいくつかの素晴らしい機能を追加しました。

犬の垂直スタックの上に、私は公園カードのために水平スタックをドロップします。

新しいcontainerRelativeFrame修飾子を使用して、水平スクロールビューの可視サイズに対してこれらのパークカードのサイズを調整しています。

カウントは、画面を分割するチャンクの数を指定します。

スパンは、各ビューが取る必要があるそれらのチャンクの数を示しています。

これはかなり素晴らしいですが、私のパークカードが所定の位置にスナップしたいです。

新しいscrollTargetLayout修飾子はそれを簡単にします。

LazyHStackに追加し、スクロールビューを変更して、ターゲットレイアウトのビューに合わせます。

ビューの配置に加えて、スクロールビューはページング動作を使用するように定義することもできます。

また、真にカスタムエクスペリエンスを得るには、scrollTargetBehaviorプロトコルを使用して独自の動作を定義できます。

私はまた、彼らがスクロールビューの一番上にいるとき、私の雑種犬は少し称賛に値すると思いました。

新しいscrollPosition修飾子は、一番上のアイテムのIDにバインドされ、スクロールすると更新されます。

このようにして、私はいつも誰がトップドッグか知っています。

これらすべてとスクロールビューの他の大きな改善点の詳細については、「スクロールビューを超えて」を必ずご覧ください。

画像は、ハイダイナミックレンジでコンテンツのレンダリングをサポートするようになりました。

allowedDynamicRange修飾子を適用することで、アプリのギャラリー画面の美しい画像を完全な忠実度で表示できます。

しかし、通常は画像が単独で立っているときに、これを控えめに使用するのが最善です。

SwiftUIで書かれたアプリは、すぐに使えるアクセシビリティ機能でうまく機能しますが、私たちが導入している新しいアクセシビリティAPIのいくつかでそれらをさらに良くすることができます。

この写真の冒険的な犬は少し遠すぎて見えないので、ズームインできるように倍率のジェスチャーを適用しました。

また、新しいaccessibilityZoomAction修飾子をビューに追加します。

これにより、VoiceOverのような支援技術は、ジェスチャーを使用せずに同じ機能にアクセスできます。

アクションの方向に応じてズームレベルを更新するだけで、彼女が今までどんないたずらをしてきたかがわかります。

VoiceOver: 画像ビューをズームします。画像。

ジェフ：Appleのプラットフォーム全体のすべての新しいアクセシビリティ機能の詳細については、「SwiftUIとUIKitでアクセス可能なアプリを構築する」を必ずチェックしてください。

カラーは、静的メンバー構文を使用して、アプリのアセットカタログで定義されたカスタムカラーを検索できるようになりました。

これにより、それらを使用する際のコンパイル時の安全性が得られるため、タイプミスに時間を失うことはありません。

先ほど示したドキュメントアプリでは、ツールバーにいくつかの便利なアクションを含むメニューを追加しました。

メニューの上部セクションは、新しいcompactMenuスタイルのControlGroupで、そのアイテムを水平スタックのアイコンとして表示します。

タグカラーセレクターは、新しいパレットスタイルのピッカーとして定義されています。

シンボル画像と協調してこのスタイルを使用すると、メニュー、特にラベルの色合いを使用してそれらを区別できるこのようなメニューで素晴らしい視覚的表現が得られます。

最後に、パレット選択効果修飾子を使用すると、シンボルバリアントを使用して、ピッカーで選択したアイテムを表すことができます。

私のメニューが整っていると、バディのドッグタグは彼のお気に入りの色、テニスボールの黄色になりました。

境界線付きボタンは、円や丸みを帯びた長方形などの新しい組み込みの図形で定義できるようになりました。

これらの新しいボーダーシェイプスタイルは、iOS、watchOS、macOSで動作します。

macOSとiOSのボタンは、ポップオーバーを開くエディタのこのボタンのように、ドラッグアクションに反応できるようになりました。

新しいspringLoadingBehavior修飾子は、ドラッグが一時停止したとき、またはmacOSで強制クリックしたときに、ボタンがそのアクションをトリガーする必要があることを示しています。

tvOSのボタンは、新しいハイライトホバー効果を大いに活用できます。

ギャラリーの画像に使用し、ボタンのラベルの画像部分だけに適用して、プラットフォーム上で自宅のように感じられる効果を作り出しました。

これらのボタンは、tvOSで利用可能になったボーダレススタイルも使用します。

ハードウェアキーボードは、アプリ内の一般的なインタラクションの促進剤を提供するのに最適です。

ハードウェアキーボードをサポートするプラットフォームでのフォーカス可能なビューは、onKeyPress修飾子を使用して、任意のキーボード入力に直接反応できます。

修飾子は、照合するキーのセットと、イベントに対して実行するアクションを取ります。

フォーカス関連のレシピをいっぱいにするには、「The SwiftUI cookbook for focus」を必ずご覧ください。

スクロールの遷移や動作から、ボタンのスタイルやフォーカスインタラクションまで、これらの新しいAPIは、豊富な機能と優れたスタイルを備えたアプリを構築するのに役立ちます。

カート:私たちはアプリで大きな進歩を遂げたと思います!

ジェフ:それは確かに何かです。

Curt: これらすべての新しいAPIを使うのは楽しかったです。

ジェフ:それだけの真実です。

Curt: SwiftUIにとってエキサイティングな時期です。

真新しいプラットフォームがあります!

ジェフ：ObservableとSwiftDataの優雅さは、SwiftUIでとてもうまく機能します。

カート:アニメーションの改善は素晴らしいです。

ジェフ:そして、スクロールビューを忘れないでください!

カート:私たちの素晴らしい開発者コミュニティがこれらの新しいAPIで何ができるかを見るのはいつもスリルです。

ジェフ：皆さん、見てくれてありがとう。

私のためにあなたの犬に挨拶してください!

カート：素晴らしい仕事を続けてください！

♪