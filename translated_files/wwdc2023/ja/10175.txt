10175

♪ ♪

Sonu: こんにちは、私の名前はSonuで、Xcodeに取り組んでいるヒューマンインターフェースデザイナーです。

そして、Xcode 15の新しいテストレポートをご案内できることを嬉しく思います。

テストレポートは、ローカル、Xcode Cloud、または別のマシンで実行されるテスト実行の結果を表示する場所です。

テスト実行は、コードの作業中に実行している単一のテストから、CIで実行されている何千ものテストを含むスイート全体までさまざまです。

テストレポートは、プロジェクトの健全性を理解し、問題領域を特定し、最終的に障害をより迅速に修正するのに役立つ方法でテスト結果を整理します。

新しいテストレポートの探索を始める前に、一歩下がって、Xcodeでのテストに関連するいくつかの重要な用語と概念を定義したいと思います。

テストの構造の背後にある整理概念を理解すると便利です。

基本を追ってから、テストレポートを見て、それがどのように役立つかを探ります。

テスト方法から始めましょう。

テストメソッドは、ソースコードを検証し、テスト結果を生成する個々のテストまたはメソッドです。

次に、テストクラスがあります。

テストクラスはテスト方法のグループであり、通常、テストされている領域に基づいてグループ化されます。

その後、テストバンドルがあります。

テストバンドルは、1つ以上のテストクラスで構成されています。

各バンドルには、ユニットまたはUIのいずれかの単一のタイプのテストが含まれています。

単体テストは、単一のコード、通常は関数を検証するのに役立ちます。

単体テストは短く、簡単で、非常に迅速に実行されます。

UIテストは、アプリのユーザー向け動作を観察します。

これらのテストは、あなたのアプリが本当にあなたが期待していることを確実にすることを確認します。

私たちの目的のために、私たちのテストバンドルにUIテストが含まれているとしましょう。

そして、最高レベルでは、テスト計画があります。

テストプランには1つ以上のテストバンドルが含まれています。つまり、テストプランにはユニットテストとUIテストの両方を含めることができます。

また、テストプランでは、いくつかの条件下でテストを効率的に実行するための構成を設定できます。

構成はテスト計画の重要な側面です。

構成は、テストのランタイム環境を設定する方法をXcodeに伝えます。

たとえば、さまざまな言語と場所でアプリをテストできるので、アプリが世界のあらゆる地域で機能することを確認することができます。

コードカバレッジでテストできるので、開発を続けるにつれてコードの品質とカバレッジを追跡できます。

テストを何度も実行するように設定することもできます。

これにより、ユーザーが初めて使用したか100回目かに関係なく、アプリのすべての要素が確実に機能することが保証されます。

構成と並んで、実行先があります。

実行先は、テストが実行されるデバイスです。

XcodeのIDEでテストを実行するときは、単一の実行先を選択できます。

Xcode Cloudとxcodebuildコマンドを使用すると、テストは複数の実行先を持つことができます。

では、基本をカバーしたので、テスト、設定、実行先がどのように連携するかを見てみましょう。

前に説明したのと同じテストプランを使っているとしましょう。

最近、私は自分のアプリで多くの言語をサポートすることに取り組んできました。

そのため、アプリが期待どおりに動作していることを確認するために、サポートしたい言語の設定を作成しました。最初は英語です。

その上、このテストプランを3つの実行先で実行しているとしましょう。

テストプランは、設定を有効にして各デバイスで1回実行されます。

そして、各メソッドは、合格、失敗、スキップ、または予想される失敗のいずれかのテスト結果ステータスで終了します。

私のアプリでは、さらにいくつかの言語のサポートにも取り組んでおり、各言語のテストプランの設定を作成しました。

つまり、Xcodeは設定ごとに完全なテストプランを1回実行し、宛先を実行すると、結果で満たされたマトリックス全体が生成されます。

ズームインすると、すべてのテスト方法、構成、および実行先の組み合わせの結果が生成されます。

この個々のインスタンスは、テストメソッドの実行と呼ばれます。

テスト実行は、コードの作業中に実行している単一のテストから、以前の例と同様に、複数の宛先で複数の構成を実行する何千ものテストを含むスイート全体までの範囲です。

新しいテストレポートは、テストの数に関係なく、テスト実行を理解するのに役立つツールを提供します。

これを行うには、新しいテストレポートはテスト実行の高レベルの要約を提供するため、詳細を掘り下げる前に全体像を見ることができます。

重要なパターンを強調するので、調査をどこから始めるべきかがすぐにわかります。

テストアクティビティ、失敗情報、スクリーンショットなどを見ることができる単一の場所を提供します。

そして最後に、UIテストデバッグツールを改善し、より豊富な障害情報を提供しました。

さて、テストとテストレポートの利点に関する多くの概念を取り上げました。

では、実際に見てみましょう。

私はiOSアプリの新機能、Backyard Birdsに取り組んできました。

前の例と同様に、私は裏庭の鳥を多くの言語で利用可能にするために仕事をしています。

より多くの言語のサポートを追加しているので、何も壊していないことを確認するために、ローカルとXcode Cloudでテストしています。

私のCIランのいくつかを見てみましょう。 

Xcode Cloudでは、プルリクエストを開くときに一握りの単体テストを自動的に実行するワークフローが設定されています。

ビルドの概要では、ワークフローが始まった理由、ビルドされたコードの変更、このビルドのワークフローをすばやく理解できます。

また、このビルドで私のアクションがどのように実行されたかを知ることができます。

そして、私のテストのいくつかは失敗しました。

それらをチェックしましょう。

テストアクションをチェックすると、新しいテストレポートに出くわします。

具体的には、テストの要約を見つけます。

テストの概要は、このテスト実行で何が起こったのかを全体的に理解させてくれます。

私は自分のテスト環境をすぐに理解できます。

また、Insightsを使用して、テスト結果で見つかった注目すべきパターンを探索することもできます。

インサイトは、すべての構成と実行先で結果を分析する際にXcodeが見つけたパターンです。

特定の基準に基づいて結果をグループ化します。

今日、私たちは2種類の洞察を持っています:一般的な失敗パターンと最長のテスト実行。

一般的な障害パターンの洞察は、同様の障害メッセージに基づいてテストをグループ化しますが、「最長テスト実行」は、テストバンドルのどのテストが他のテストよりも長くかかっているかを手がかりに示します。

テストセクションでは、この実行中にテストがどのように実行されたかを理解できます。

また、私のテスト計画についてもっと詳しく得ることができます。

テストの繰り返しやパフォーマンス指標など、テスト計画にどのような特別な特性があるかを理解できます。

多くの実行先と構成でテストする場合、各実行がどのように実行されたかを理解するのは難しい場合があります。

このヒートマップを使用すると、各デバイスと構成でテストがどのように行ったかをすばやく消化できます。

そして、色とテスト結果の数は、この実行が他のものと比較してどのように行ったかを理解するのに役立ちます。

また、テストに失敗した場合は、テストの概要にすばやくアクセスできます。

特定の障害メッセージが私の注意を引いた場合は、このセクションを使用して調査を開始できます。

注目を集める失敗といえば、私が以前に洞察をチェックしていたとき、最初の洞察が私に突き出ました。

同様の失敗メッセージで失敗した3つのテストがあると述べています。

これらのテストが失敗した理由を調べてみましょう。

特定の洞察を選択した後、このビューを使用して詳細を知ることができます。

すべてのテストで見つかった失敗メッセージを見つけ、失敗したテストを見ることができます。

さらに、どの構成と実行先がこれらの単体テストの失敗を引き起こしたのか理解できます。

そして、この情報を使用して、これらのテストが非常によく似た障害メッセージで失敗した理由についてのシグナルを得ることができます。

調査を続けるために、テスト方法の実行の1つをチェックしてみましょう。

テストメソッドの実行を選択した後、testGardenSupplies()のテスト詳細ビューを見つけます。

テスト詳細ビューは、単一のテスト方法の結果に焦点を当てるための専用スペースを作成します。

ここでテストの詳細と失敗情報を見つけることができるので、デバッグを開始できます。

ヘッダーを使用して、すべての構成で何が起こったのかの完全なコンテキストを取得し、宛先を実行できます。

また、実行ビューでは、このメソッドが各構成と実行先でどのように実行されたかを探索できます。

また、選択したテストメソッドの実行の失敗メッセージとコールスタックを見つけることもできます。

障害メッセージとコールスタックは、デバッグのための貴重なツールです。

それらは、障害の原因を特定するのに役立つ重要な部分です。

コールスタックはまた、ソースコードへのエントリポイントを戻し、障害の調査を続けることができます。

ユニットテストに加えて、Backyard Birdsが顧客の期待に応え、さまざまなプラットフォームやデバイスで適切に機能することを確認するために、多くのUIテストをローカルで実行してきました。

先ほどのローカルテストランを復習しましょう。

このテスト実行では、私はまだテストサマリーを使用して何が起こったのかを理解することができます。

上部に環境の詳細、インサイト、下部にテストセクションがあります。

テストセクションのこの最初の失敗が私の注意を引いた。

失敗メッセージは、テストがボタンの1つを見つけることができなかったことを示唆しています。

調べてみましょう。

失敗を選択した後、testClickTabsAfterSearch()のテスト詳細ビューを見つけます。

UIテストを見ているので、テストの詳細に移動すると、アクティビティタブが表示されます。

テストレポートには、私の失敗を理解し、解決するのに役立つ素晴らしい新機能がたくさんあります。

アクティビティタブには、テストアクティビティ、オートメーションエクスプローラー、スクラバーの3つの主要なセクションがあります。

テストアクティビティは、私のテストをタイムライン形式でレイアウトします。一番上の行はテストの開始であり、一番下の行は終わりであり、その間の各行はテストで起こったイベントです。

オートメーションエクスプローラーがあります。

ここでは、選択したテストアクティビティに関連するビデオ再生の瞬間を見つけることができます。

これにより、私のテストの完全なリプレイを見ることができます。

そして最後に、私のテスト実行の線形表現であるスクラバーがあります。

スクラバーを使用して、タップ、スワイプ、クリックなどのテストイベントを見つけることができます。

スクラバーは、テスト中のデバイスの向きが変わったときにも強調表示されます。

そして、スクラバーの上の失敗アイコンは、テストで障害が発生した場所をメモします。

これらの指標を使用して、テスト実行中の興味深い瞬間をすばやく見つけ、アプリのインタラクションが期待どおりに機能していることを確認することができます。

これらの新しい部分により、テストレポートにはインタラクティブなテストデバッグ体験があります。

このエラーの解決にどのように役立つかを確認しましょう。

アクティビティペインでイベントをクリックすると、ビデオ再生から対応するフレームでオートメーションエクスプローラーが更新されるため、テストの各瞬間に何が起こっているのかを視覚的に理解できます。

また、スクラバーを正しい場所に移動させるので、完全なテスト実行に関連してイベントがどこで行われているかについてのコンテキストがあります。

失敗をデバッグするとき、私は失敗に至るまでの瞬間を見るのが好きです。

テストランを見て、エラーの原因となった可能性のある予期せぬことが起こったかどうかを確認できます。

ビデオ再生を見た後、すべてが順調に見えます。

この失敗メッセージによると、UIに「アカウント」ボタンが見つからなかったようです。

オートメーションエクスプローラは、障害が発生したときにデバイスで何が起こっていたかを示しています。

「アカウント」ボタンが表示され、その上に境界ボックスがあります。

バウンディングボックスをクリックすると、この特定のUI要素に関する詳細情報が表示されます。

ここでは、この要素に関連する識別子と階層情報を見つけることができます。

ここにある情報に基づいて、アプリ内で「アカウント」ボタンに誤ってラベルを付けたようです。

ここから、プロジェクトのソースに移動してエラーを修正できます。

新しいテストレポートにより、私のテストランを理解するのが非常に簡単になりました。

数分以内に、どのテストが失敗したかを見つけ、解決策を見つけ、失敗を修正することができました。

失敗はローカルとCIで発生する可能性があり、両方の場所でテストするのがベストプラクティスです。

だから、テストレポートがXcodeとXcode Cloudで利用できることを嬉しく思います。

だから、時間は貴重です、みんな。

テストレポートに追加された新機能は、テスト実行をすばやく理解し、問題領域を特定し、最終的には障害をより迅速に修正するのに役立ちます。

チューニングしてくれてありがとう、WWDCの残りの部分を楽しんでいただければ幸いです。

♪ ♪