10118

♪ ♪

ラズバン：こんにちは！

私はWebKit Developer ExperienceチームのエンジニアであるRazvanです。今年Web Inspectorに対して行った新機能と改善点についてお話しします。

Web InspectorはmacOSのSafariの一部であり、Webサイト、Webアプリ、Web拡張機能、またはホーム画面のWebアプリのすべてのリソースとアクティビティを検査できる強力なツールセットを提供します。

新しいタイポグラフィ検査ツール、ユーザー設定をエミュレートする方法、イベントリスナーとスクロールコンテナを使用した要素の新しいバッジ、ブレークポイントの強化によりJavaScriptデバッグエクスペリエンスを改善しました。

以前にWebインスペクタを使用したことがない場合は、有効にする必要があります。

Safariの設定ウィンドウを開き、[詳細設定]タブに切り替えます。

下部には、「ウェブ開発者向けの機能を表示」の設定があります。

これを有効にするには、チェックボックスをクリックしてください。

開発メニューがメニューバーで利用可能になりました。

Webインスペクタを開くには、「Webインスペクタを表示」というメニュー項目を使用するか、任意のWebページでキーボードショートカットOption + Command + Iを押すことができます。

今年は、デバイス上のWebコンテンツをペアリングして検査する合理化された方法、シミュレータでWebページを開く簡単な方法、更新されたレスポンシブデザインモードなど、Safariのすべての開発者機能に多くの改善を行いました。

詳細については、今年のWWDCの「Safari開発者機能の再発見」というタイトルのこのセッションをご覧ください。

Webインスペクタが有効になったので、タイポグラフィ検査のための新しいツールを見ることから始めましょう。

ウェブ開発者は、カスタムフォントを使用して、読みやすく目立つタイプで美しいコンテンツを作成します。

しかし、ウェブ上でタイポグラフィを正しく取得することは必ずしも簡単ではありません。

まず、適切なフォントファイルをロードする必要があります。

ブラウザでサポートされている形式で、適切な機能を備えている必要があります。

そして、それが表す書かれた言語の文字の正しいグリフを含める必要があります。

次に、フォントが画面上でレンダリングする方法に影響を与える多くのCSSプロパティがあります。

そして、それらのほとんどはカスケードを通じて継承可能であり、時には「どのフォントフェイスが実際に使用されたか」のような混乱につながります。

または「なぜこれが大胆なのですか?」または「このスタイルは本当にイタリック体ですか？」

Web Inspectorは、多くのタイポグラフィ検査ツールを支援できます。

フォントパネルの「要素」タブの「詳細」サイドバーで見つけることができます。

使用されるプライマリフォントの名前など、選択した要素で使用されるフォントのプロパティと機能を示します。

これを参照して、期待していたフォントが実際に使用されたかどうかをすばやく確認できます。

これはプライマリフォントのみを識別することを覚えておいてください。

選択したノードにプライマリフォントにグリフがない文字が含まれている場合、フォールバックフォントが使用されます。

次に、フォントパネルには、フォントサイズ、スタイル、重量、ストレッチなどの基本的なフォントプロパティの概要が表示されます。

サポートされているフォント機能のプロパティとその使用値を示すセクションもあります。

これらは、フォントがサポートするものに応じて、合字、小文字の代わりに小文字、特別な数値スタイル、その他多くの書体の特別な側面を切り替えます。

今年の新機能、フォントパネルには、合成太字または斜めスタイルの警告が表示されます。

合成スタイルとは何ですか?例としてイタリック体を取りましょう。

イタリックスタイルは、多くの場合、通常のアップライトスタイルのものとは別で、独自のフォントファイルで提供されます。

適切なイタリックスタイルが欠落している場合、WebKitはそのための人工的な表現を生成します。

通常のアップライトフォントスタイル上でアルゴリズムを実行し、個々のグリフを歪んで斜めのスタイルを生成します。

これは合成斜めと呼ばれています。

フォントデザイナーは、イタリックスタイルを作成するときに多くの注意を払います。

多くの場合、これらはアップライトスタイルの傾斜バージョンではなく、代わりに筆記体であり、特定の美学を伝えるために特別に設計されています。

グリフのストロークが人工的に厚くなる合成太字でも同様のことが起こります。

すべてのフォントがこれをサポートしているわけではないことを覚えておいてください。

Webインスペクタは、合成太字または斜めが使用されたときに警告を表示するようになりました。

フォントパネルの基本プロパティセクションで、合成された重みまたはスタイルの横に表示されます。

この警告は、予想されるフォントファイルがロードされなかったというヒントになる可能性があります。

しかし、時には、フォントファイルがあなたが要求した正確な値をサポートしていないかもしれません。

そこで可変フォントが役立ちます。

可変フォントとは何ですか?

簡単に言えば、重量、幅、傾斜など、フォントの複数のスタイルバリエーションを生成するために必要なすべての情報を1つのファイルに含めることができるフォント形式です。

また、サポートされている各スタイルについて、可変フォントは、静的フォントファイル内のいくつかの離散値と比較して、値のスペクトルを提供します。

これにより、コンテンツに適した正確なスタイルをより柔軟に選択できます。

可変フォントはさらに有能です。

フォントデザイナーは、ストロークの厚さ、グリフの曲線、文字の幅など、フォントのほぼすべての側面を構成可能にすることができます。

可能性は本当に広大です。

設定可能な可変フォントのすべての側面は、バリエーション軸として表現されます。

どれが利用可能かを知るには、フォントのドキュメントを読むか、この情報を明らかにする特別なツールを使用する必要があります。

ウェブインスペクタはここで助けることができます。

可変フォントを使用する要素を検査すると、フォントパネルにサポートされているバリエーション軸のリストが表示されます。

それぞれについて、その軸タグ - 4文字の識別子 - オプションの軸ラベル、サポートされている最小値と最大値、および現在の値、またはCSSで指定されていない場合のデフォルト値が表示されます。

今年は、バリエーション軸の値を編集し、検査されたページで結果をライブで確認するためのインタラクティブなコントロールを追加しました。

これにより、フォントスタイルがちょうどいいまで微調整できる素晴らしい方法が得られます。

お見せしましょう。

これは私が旅行写真ブログのために構築しているウェブページです。

私はフォトギャラリーとラベルによるナビゲーションで、私が望むようにレイアウトを持っていますが、タイトルの外観についてはまだわかりません。

右クリックして見出し要素を検査します。

フォントパネルでは、これが可変フォントを使用していることがわかります。

私は私が遊ぶことができる利用可能なバリエーション軸のためのこれらのコントロールを持っているので、私は言うことができます。

たとえば、重量軸のスライダーをドラッグできます。

これにより、検査されたページでタイトルのフォントの重みがすぐに変更されます。

対応するCSSフォントの重みプロパティがスタイルパネルにどのように書き込まれるかに注目してください。

静的フォントは、100単位の重みのためにいくつかのフォント面を持つだけです。

しかし、可変フォントでは、変動軸の範囲内で任意の値を選択できます。

また、幅のバリエーション軸を試して、これがどのように広くまたは狭く見えるかを見てみましょう。

軸値の入力フィールドを入力することも、ArrowUpキーまたはArrowDownキーを長押しして、正確な単位で値を変更することもできます。

私はこのわずかに凝縮されたバージョンが好きです。

もう少し大胆にしたいのですが、この幅を保ちたいです。

この可変フォントは、フォントのグレードを変更するためのカスタムバリエーション軸も提供します。

このためにスライダーをドラッグすると、重量軸を変更したときのように位置をシフトすることなく、個々の文字が所定の位置で厚くなることに注意してください。

これは素敵ですね。

これらの変更をプロジェクトに統合するには、スタイルパネルまたは変更パネルから新しいCSSプロパティをコピーできます。

タイポグラフィを検査する方法と、可変フォントでフォントスタイルを微調整する方法を見てきました。

それでは、Webインスペクタの別の新機能に移りましょう。これにより、ユーザーの好みをエミュレートして、構築しているコンテンツがユーザーのニーズに適応していることを確認できます。

すべてのApple製品は、内蔵のスクリーンリーダー、VoiceOver、ディスプレイ設定などを制御するmacOSのアクセシビリティ設定など、人々がニーズや好みに適応するようにデバイスを構成できるさまざまな設定を提供しています。モーションの低下、カラーコントラストの増加、カラーフィルターなどを制御します。

人々が自分のデバイスで行う最も人気のあることの1つは、ウェブを閲覧することです。

したがって、すべての人を歓迎するために努力するウェブサイトやウェブアプリを構築することは理にかなっています。

これを行うには、他の人がユーザー設定を設定するのと同じようにウェブを体験する必要がある場合があります。

動きの縮小の好みでウェブサイトをテストするには、macOSのアクセシビリティ設定に移動し、そこに設定することができます。

しかし、それはSafariやあなたのウェブサイトだけでなく、システム全体に影響します。

あなたがしばしば望むのは、テストしているページのためだけに設定することです。

それを支援するために、ユーザー設定をエミュレートする新しいツールをWebインスペクタに導入しました。

[要素] タブの新しいアイコンをクリックすると、[ユーザー設定のオーバーライド] ポップオーバーが表示されます。

ここでは、Webインスペクタが開いている間に、検査されたページのユーザー設定を上書きするための一連のトグルを見つけることができます。

これらの設定は、Webページのスタイルと動作を適応させるために使用できるCSSメディア機能にマッピングされます。

たとえば、カラースキームの好みは、CSSのprefers-color-schemeメディア機能にマップされます。

使用方法は次のとおりです。デフォルトのライトカラースキームに要素のスタイルを設定できます。

次に、prefers-color-schemeメディア機能を使用して、暗い配色が好ましいかどうかを確認し、スタイルを更新します。

ユーザー設定オーバーライドポップオーバーを使用して、ページがどのように適応するかを確認してください。

外観セクションで、配色設定をダークにオーバーライドします。

アイコンは、オーバーライドが適用されたことを示すために色が変わります。

オーバーライドがアクティブで、Webインスペクタが開いている間は、暗い配色のスタイルが適用されます。

このカラースキームのコントロールは、以前はスタンドアロンのボタンでした。

ポップオーバーで設定オーバーライドの他のコントロールに加わるようになりました。

次に、縮小モーションの好みをオーバーライドする方法を紹介します。

この次のセクションでは、動きの多いアニメーションが表示されます。

これに敏感な場合は、このビデオの次の3分間をスキップすることをお勧めします。

私のページに戻ると、写真をクリックして拡大すると実行されるこれらのアニメーションは、おそらく少し多すぎます。

一部の人々は、特にz軸で起こるとき、迅速かつ突然の動きでアニメーションによって混乱する可能性があります。

吐き気や頭痛などの不快感を引き起こす可能性があります。

これは間違いなく彼らにとって歓迎すべき経験ではありません。

人々は、ウェブサイトやウェブアプリに適応させたいことを知らせるために、自分のデバイスで動きを減らすための好みを設定することができます。

私たちウェブ開発者はそれを尊重すべきです。

これは、prefers-reduced-motion CSSメディア機能が便利な場所です。

アニメーションが装飾用の場合は、削除できます。

しかし、いくつかのアニメーションは、インターフェイスで意味を伝えるのに役立つことを覚えておいてください。

それらを削除すると、使いやすさに影響を与える可能性があります。

より遅く、より微妙なフェードアニメーションは、変化を伝え、人々のニーズを満たすためにまだうまく機能するかもしれません。

私のウェブページでその変更を試してみましょう。

まず、写真を調べて、Webインスペクタの「要素」タブで図要素を選択します。

これにより、スタイルパネルに一致するすべてのCSSルールが明らかになります。

これは、アニメーションを多くの動きで設定するCSSプロパティです。

それは今、みんなのために走っています。

次に、このCSSルールのソースコードの場所をクリックして、スタイルシートで定義されている場所にジャンプします。

これにより、ソースパネルが開き、変更したいアニメーションがあるCSSルールのすぐ隣に配置されます。

先ほど準備したこのコードブロックのコメントを解除します。

これは、prefers-reduced-motion CSSメディア機能によって保護されています。

ここでは、写真をズームするアニメーションではなく、アニメーションをフェードに変更し、アニメーションの持続時間も増やして、突然感じないようにします。

次に、ページ上の画像をもう一度クリックして、それがどのように見えるかを確認します。

ああ！それはまだ同じアニメーションを実行します。

それは、fers-reduced-motionメディア機能によって守られた新しいアニメーションを定義したからです。

しかし、ページは依然としてオフに設定されているこの設定のデフォルトのシステム値を尊重しています。

それを調整しましょう。

[要素] タブに戻ります。

ここでは、ユーザー設定オーバーライドポップオーバーを開きます。

アクセシビリティセクションで、ポップアップメニューを開いて、「動きを減らす」のユーザー設定を上書きします。

システムのデフォルト値から変更し、オンに設定します。

さて、私のページの写真をもう一度クリックします。

そして、見てください。写真はゆっくりと視界に消えていく。

混乱させる動きはもうありません。

これは、減動を好む人にとってより良い経験です。

これらの変更をプロジェクトに統合することを忘れないでください。

ユーザー設定オーバーライドポップオーバーの最後の項目「コントラストを上げる」は、prefers-contrast CSSメディア機能にマップされます。

理想的には、誰にとっても高いレベルのカラーコントラストを持つコンテンツを構築したいと考えています。

しかし、あなたのデザインシステムがあなたを制限している場合は、このメディア機能を使用して、コントラストの増加の恩恵を受ける人々のためにあなたのスタイルを適応させます。

次に、検査されたページのスタイルがそれに応じて適応することを確認します。

「コントラストを増やす」の設定を「オン」に上書きします。

これらの機能を使用して、さらに多くの人が楽しめるコンテンツを構築することを願っています。

次に、Webインスペクタの[要素]タブの新しい要素バッジについてお話しします。

要素タブのノードツリービューでは、CSS FlexまたはCSSグリッドコンテナとして機能する要素の横にバッジがすでに表示されます。

要素バッジは、特定の関心のあるノードを一目で識別するための迅速な方法を提供します。

この場合、CSSグリッドまたはFlexレイアウトコンテキストを作成するノード。

グリッドとフレックス要素のバッジをクリックして、そのノードの特殊なページオーバーレイを切り替えることができます。

バッジのハイライトの色は、ページオーバーレイの色と一致します。

CSSグリッドとフレックスボックスのページオーバーレイは、レイアウトを決定する線、ギャップ、および利用可能なスペースを明らかにするガイドを表示します。

ページオーバーレイでCSSグリッドとFlexboxレイアウトをデバッグする方法の詳細については、前年のこれらのセッションをご覧ください。

デバッグする最も難しいCSSレイアウトの問題の1つは、内部のコンテンツが利用可能な幅に合わないため、水平にスクロールするコンテナのように、不要なスクロールです。

このタイプの問題は、スクロールバーがデフォルトで表示されない場合、長い間検出されずに潜む可能性があります。

不要なスクロールを識別するために、スクロールコンテナの横に表示される新しい要素バッジを追加しました。

要素のコンテンツがその境界をオーバーフローし、スクロールバーが適用されると、ノードツリーに簡単な視覚的なヒントを提供します。

不要なスクロールの一般的な例と、それを修正する方法を見てみましょう。

私のページに戻ると、フォトギャラリーの上部にあるこれらのラベルは、利用可能なすべての水平スペースを使用するようにきれいにレイアウトされているように見えます。

しかし、スワイプしようとすると、このコンテナに短い水平スクロールがあることに気づきます。

これは私が望んでいないことです。

そして、最後のラベルは少し切り取られています。

ウィンドウのサイズを変更するとさらに悪化します。

要素タブのノードツリーに、ラベルのコンテナの横に「スクロール」バッジがあることに気づきました。

この要素をクリックすると、スタイルパネルに一致するCSSルールが表示されます。

このフレックスボックスの容器は正しく見えます。

そのフレックスアイテム、ラベル自体はどうですか?

最小幅プロパティのこの過度に正確な値は奇妙に見えます。

私が欲しいものをブラウザに伝えて計算させるのではなく、ブラウザに何をすべきかを正確に伝えるのは、おそらく私のナイーブな試みでした。

これを修正するために、この最小幅宣言にコメントします。

現在、各ラベルは必要なだけ多くのスペースを占有します。

しかし、未使用のスペースがたくさん残っています。

これを修正するには、値1のフレックスプロパティを追加します。

これにより、未使用のスペースが各ラベルに分配され、コンテナがいっぱいになります。

そして、ノードツリーのコンテナの横にある「スクロール」バッジが欠落していることで確認されているように、不要な水平スクロールはもうありません。

次に、新しいイベントバッジについてお話ししたいと思います。

JavaScriptイベントリスナーが添付されている要素の横に表示されます。

ポインタやUIイベントなどの組み込みイベントと、コードでディスパッチするカスタムJavaScriptイベントの両方で機能します。

ノードツリーの横にイベントバッジがある要素を探し、バッジをクリックすると、その要素にすべてのイベントリスナーが添付されたポップオーバーが表示されます。

ここでは、イベントタイプ、イベントを処理するJavaScript関数の名前、およびその関数が定義されているソースコード内の場所など、各イベントリスナーの概要を取得できます。

DOMツリーを通過するかどうか、または一度だけ実行した後に自動的に削除されるかどうかなど、イベントリスナーのさまざまな設定オプション。

次に、イベントリスナーを無効にするオプションがあり、実行せずにコードをデバッグできます。

または、段階的にデバッグする場合は、イベントブレークポイントを設定できます。

これにより、次回ハンドラが呼び出されたときにJavaScriptの実行が一時停止されます。

これは、ブレークポイントを使用したデバッグ体験の改善について話すのに良い機会です。

JavaScript をデバッグするときは、コードに console.log() ステートメントを追加することに慣れているかもしれません。

一方、ブレークポイントは、ソースに変更を加えることなく、JavaScriptを一時停止してステップスルーすることでデバッグする強力な方法です。

以前にブレークポイントを使用したことがない場合は、開始する最も簡単な方法は、ソースタブの溝にあるスクリプトファイルの行番号をクリックすることです。

これにより、スクリプトのその行にJavaScriptブレークポイントが設定されます。

次回その行が実行されるとき、Web Inspectorはその時点でJavaScriptの実行を一時停止します。

一時停止している間は、コールスタックを観察したり、スコープ内のオブジェクトや変数の状態を調べたり、コンソールから変更を加えたりすることもできます。

JavaScriptの実行を再開することも、上部のステッピングコントロールを使用して、一度に1つの式でコードをステップスルーすることもできます。

ブレークポイントを右クリックして[ブレークポイントの編集]を選択すると、ブレークポイントを設定できます。

ここでは、ブレークポイントがヒットしたときに制御し、ヒットしたときにアクションを実行するように設定できる多くのオプションがあります。

それらのいくつかを見てみましょう。 

ブレークポイントの条件を設定することで、ブレークポイントがヒットしたときに制御できます。

これは、ブレークポイントが設定されているのと同じスコープでJavaScriptとして評価されます。

条件が真の場合、ブレークポイントがヒットします。

時には、ブレークポイントを何度もスキップする方が簡単かもしれません。

たとえば、ループ内では、最初の数回の反復で停止することに興味がありません。

ここでは、ブレークポイントを無視する回数を設定できます。

JavaScriptの一部を評価するなど、ブレークポイントがヒットしたときにアクションを実行することもできます。

これは、ブレークポイントが設定されているのと同じスコープで実行されます。

続行する前に、これを使用してスクリプトの状態を変更できます。

また、JavaScriptが一時停止された時点で変数やオブジェクトの状態にアクセスできる式を使用して、コンソールにメッセージをログに記録することもできます。

これは、コードに console.log() ステートメントを追加するのと似ていますが、ソースを変更しなくてもです。

変数やオブジェクトをコンソールにロギングする代わりに、プローブ式アクションを使用することもできます。

これにより、ソースタブの詳細サイドバーパネルで、指定された式の状態を調べることができます。

もちろん、これらのアクションは非常に便利ですが、実際にブレークポイントで停止して手動で再開することなく、実行したい場合があります。

そのような場合は、式を評価した後に自動的に続行するオプションを使用します。

このオプションは、ログメッセージアクションをconsole.log()ステートメントのように動作させます。ログに記録しますが、一時停止しません。

同様に、ブレークポイントの場所でJavaScriptを評価し、すでにソースコードにあるかのように続行できます。

設定できるブレークポイントは他にもたくさんあります。

ブレークポイントセクションのプラスボタンをクリックすると、設定できるすべてのブレークポイントのリストが表示されます。たとえば、ネットワーク要求がfetch（）やXMLHTTPRequestなどのメソッドを介して実行されるときにトリガーされるURLブレークポイント、「クリック」のイベントバッジから以前に見たようなイベントブレークポイント、マイクロタスク、アニメーションフレーム、タイムアウト、またはインターバルが処理されたときにトリガーされるブレークポイント、そして

シンボリックブレークポイントは、組み込みのJavaScript関数への呼び出しをデバッグしたり、同じ名前の複数の関数で一時停止したりするのに役立ちます。

シンボリックブレークポイントを追加するときは、あなたが望むように具体的または一般的なことができます。

大文字と小文字の区別を含め、関数名を正確に一致させるか、パターンに一致する複数の関数で中断したい場合、または完全な関数名をよく覚えていない場合は、正規表現を使用してください。

シンボリックブレークポイントがコード内の問題のデバッグにどのように役立つか見てみましょう。

私のページの各写真には、リンクを友達と共有できる共有ボタンがあります。

しかし、彼らが取得したURLが写真ページを指していないというバグレポートを受け取りました。

調査しましょう。

これに取り組んでからしばらく経ちましたが、どのように構築されたのかよく覚えていません。

これをデバッグするには複数の方法がありますが、シンボリックブレークポイントを試してみます。

ソースタブに切り替えて、クリックして新しいシンボリックブレークポイントを追加します。

私の側で実行されるコードが何であれ、最終的にはシステムのポップオーバーを表示するnavigator.share()ブラウザAPIを呼び出す必要があります。

Share() 関数が呼び出される前にブレークポイントを設定しましょう。

クリックしてシンボリックブレークポイントを設定します。

そして今、私のページの写真の共有ボタンをクリックします。

そして、navigator.share()が呼び出される前に、Webインスペクタが一時停止しました。

このメソッドに渡されたデータオブジェクトにカーソルを合わせます。

ここでは、オブジェクトの内容を見ることができます。

共有されるURLキーの値は確かに間違っているようです。

これはどこから来たのですか?

[ソース] タブの [コール スタック] セクションでは、この点に到達するために呼び出された関数の連鎖を見ることができます。

クリックイベントハンドラは以前に呼び出されたようです。

コールスタックでそのエントリを選択して、その関数にジャンプします。

ここでは、sharePhoto()関数に渡されるデータオブジェクトを構築するコードを見ることができます。

そして、ここのコードコメントを見て、私はこれを実装するつもりでしたが、忘れました。

今すぐそれを直しましょう。

クリックしてこの行にブレークポイントを設定します。

次に、右クリックして[ブレークポイントの編集]を選択します。

条件を設定する必要はありませんが、JavaScriptアクションを実行するように設定します。

式フィールド内で、共有関数に渡される前に、データオブジェクトを変更してURLプロパティを修正します。

このブレークポイントがここで止まる必要はないので、この式を評価した後、自動的に続行するオプションをクリックします。

次に、ボタンをクリックしてJavaScriptの実行を再開します。

これで、共有ボタンをクリックすると、先ほど設定したシンボリックブレークポイントに再び到達します。

しかし、今、それが取得するデータオブジェクトは正しいURL値を持っています。

他のブレークポイントからのJavaScriptアクションは、値を変更し、一時停止せずにこの関数に送信しました。

これは、私がそこで行った変更が実際に問題を解決したことを確認します。

これは、ブレークポイントによって可能になる多くの優れたデバッグワークフローの一例にすぎません。

もっとたくさんあるので、あなたのプロジェクトで試してみることをお勧めします。

このセッションでは、新しいタイポグラフィ検査ツールから、ユーザー設定のオーバーライド、新しい要素バッジの使用まで、多くのことを取り上げ、ブレークポイントの強化を検討しました。

そして、それは表面を引っ掻いているだけです。

今年のWebインスペクタには、このセッションで取り上げる時間がなかった他の多くの新機能と改善があります。

そして、Web Inspectorができることはもっとたくさんあります。

これらと使用できる他の多くの機能についてもっと知りたい場合は、webkit.orgにアクセスして、詳細なブログ記事やドキュメントを見つけてください。

私たちもあなたから話を聞きたいです。

問題が発生した場合、またはWeb Inspectorを改善する方法に関するアイデアがある場合は、Inspector製品のWebKitのバグトラッカーに問題を提出してお知らせください。

また、Safari Technology Previewをダウンロードすることをお勧めします。

数週間ごとにリリースされ、次のバージョンのSafariに到達する前に、WebKitの最新のツールと技術、バグ修正と改善が含まれています。

私が行く前に、今年のSafariの開発者のための新機能についてもっと知りたい場合は、これらの素晴らしいセッションをチェックしてください：「Safari開発者機能を再発見する」と「CSSの新機能」。

見てくれてありがとう。