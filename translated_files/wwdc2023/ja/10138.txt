10138

♪ ♪

ジェニファー:こんにちは、私はアップルデザインチームのデザイナー、ジェニファー・パットンです。

マシュー：そして、私はwatchOSのSwiftUIチームのエンジニアリングマネージャーであるマシュー・クワンスです。

ジェニファー：watchOSの10番目のメジャーリリースでは、タイムリーな情報を表示し、焦点を絞ったコンテンツを一目で伝え、フルスクリーンの色と画像でディスプレイの形状と忠実度を祝い、ナビゲーションを一貫して予測可能にするために、ユーザーインターフェイスを再設計しました。

マシュー:そして、私たちはAPIも進化させました。

SwiftUIはwatchOS 10の中心にあります。

このセッションでは、watchOS 10の再設計の詳細をご案内します。

いくつかの重要な設計原則から始めます。

次に、アプリでナビゲーションを構成する新しい方法を見ていきます。

その後、レイアウトシステムの進化と、すべてのピクセルを利用するのに役立ついくつかの更新されたAPIについて話します。

そして最後に、色と素材がどのようにアプリに全く新しい次元をもたらすことができるかを見ていきます。

計画のように聞こえますか？

ジェニファー：うん！すぐにそれに入りましょう。

いくつかのデザイン原則から始めましょう。

Apple Watch用にデザインするときに最初に考えたいことは、「私のアプリが現時点で人々に提供できる最も関連性の高い情報や経験は何ですか？」です。例として天気アプリを見てみましょう。

Apple Watchは、迅速かつ集中的なインタラクションに最適な計時デバイスであるため、アプリを開くときに最初に表示されるのは、今日の地域の天気です。

デジタルクラウンの簡単な回転で、あなたは一日の残り、そして週の残りのために地元の天気を得るでしょう。

たとえば、ニューヨークの天気を探している場合、私の都市のリストは、これらの詳細なビューのいずれかからワンタップで離されます。

天気は私が「Apple Watchモーメント」として考えたいものを達成します。アプリを設計するときは、着用者が手首を上げるときに関連するものに経験の焦点を絞り込むようにしてください。

ウォッチエクスペリエンスは、短いインタラクションのために高度に専門化する必要があります。

誰かの注意を10秒間引いたら、どの情報が浮上しますか?

iPhoneでは、Newsはコンテンツが豊富なマルチタブ、マルチレベルアプリです。

そして、Apple Watchでは、ニュースは5つのトップストーリーに焦点を当てています。

コンテンツはフィード内で垂直に積み重ねられ、タップするとインラインで展開されます。

短いインタラクションは、私がApple Watch用にデザインするのが大好きなことの1つです。

ほんの数秒の人々の注意を引くときは、ニュースが今日の見出しだけに経験を集中させる方法のように、簡潔である必要があります。

また、心拍数は有限のデータを最初に表示するため、ほとんどのビューをフルスクリーンアニメーションに費やすことができます。

そして、アクティビティは幅広い経験を単一の焦点を絞ったビューに簡素化します。

したがって、アプリを設計するときは、簡潔に保ち、集中してください。

2014年にApple Watchを発表したとき、Digital Crownは、ディスプレイを覆い隠すことなく使用できるユニークで正確な入力デバイスとして導入しました。

watchOS 10では、アプリにアクセスしたり、ナビゲートしたり、スクロールしたり、ページネーションしたり、正確な調整を行う方法として、デジタルクラウンを強調しています。

インタラクションはクラウンに固定する必要がありますが、常にタッチでバックアップする必要があります。

インタラクションをデジタルクラウンに結び付けるという設計目標を使用して、アプリのナビゲーション構造とエクスペリエンスを形作ることができます。

watchOS用に設計するときは、手首を上げた瞬間から人々が取る旅を考慮してください。

watchOS 10の素晴らしい新機能はスマートスタックです。

デジタルクラウンを回すと、一目見可能なウィジェットがインテリジェントに並べられたスタックで画面に飛び込みます。

アプリを設計するときは、どの情報が最高のスマートスタックウィジェットになるかを考えてから、関連性のあるタイムリーなエクスペリエンスを中心に設計してアプリを設計することができます。

そして、間違いなく私の同僚、エドによるApple Watchのスマートスタックのデザインウィジェットをチェックしてください。

時計アプリの焦点を、現在の瞬間に関連する一口サイズの情報に絞り込んだら、次のステップは、それらの瞬間を簡単にナビゲート可能な構造につなぎ合わせることです。

マシューと彼のチームは、あなたが使用するためにいくつかの信じられないほどの新しいAPIの開発に懸命に取り組んできました。

取り除いて、マシュー。

マシュー:ありがとう、ジェン。

アプリ内のナビゲーションがSwiftUIでどのように更新されたかを見てみましょう。

まず、詳細なコンテンツが一目でわかるNavigationSplitViewを見ていきます。

次に、より多くのインタラクションをデジタルクラウンに結びつけることができるTabViewのいくつかのアップデート。

これらは両方とも、私たちのコアナビゲーションパラダイムとしてNavigationStackの横に座っています。

アプリを構成する正しい方法を選ぶことは基本的な決定であり、それぞれに強みがあります。

NavigationSplitViewから始めましょう。

watchOSのNavigationSplitViewの概念は、iPadOSの天気のように、2列のレイアウトから借用されています。

watchOSでは、ソースリストと詳細ビューが分離され、再結合され、ソースリストが詳細ビューのすぐ下に隠されます。

これで、ソースリストはタップするだけです。

ジェニファー：ナビゲーションスプリットビューは、天気の都市のリストや株式のリスト、そのソースリストのアイテムの詳細なビューなど、ソースリストがある場合に最適なオプションです。

アプリを起動すると、詳細ビューに直接人々を着陸させます。

場所、最新性、頻度、またはその他のユーザーの意図の表示を使用して、どの詳細を最初に表示するかを通知します。

タイトルを必要としないほど、あなたの詳細ビューを一目で紛れもないものにするよう努めてください。

マシュー：SwiftUIに組み込まれたナビゲーションスプリットビューの本当に洗練された機能の1つは、詳細ビューとソースリストの間の移行です。

もちろん、リストアイコンをタップしたり、さらに良いことに、指で操作したりできます。

ジェニファー：そして、ソースリストは比較データを表示するための優れたツールです。

クパチーノでは午前10時09分、ブダペストでは午後7時09分です。

ソースリストにタイトルを付ける必要はなく、閉じるボタンやナビゲーションコントロールも必要ありません。

これにより、ソースリストはより短いナビゲーションバーを使用でき、より多くの比較データを画面に一目で表示できます。

マシュー：NavigationSplitViewのAPIは、watchOSでは他のプラットフォームと同じです。

ソースリストを設定し、選択範囲で初期化できます。

SwiftUIが詳細ビューに自動的に起動できるように、常に選択を値に初期化します。

次に、いくつかの本当に素晴らしいアップデートを受けており、Apple Watchでアプリをナビゲートする私の新しいお気に入りの方法であるTabViewについて話しましょう。

タブビューはビュー間をスクロールでき、watchOS 10の新機能では、必要に応じて1つのタブを展開してサイズを変更できます。

ジェニファー: コンテンツをインラインで展開できるようにするだけでなく、必要に応じてローカライズされたテキストと大きなタイプをサポートするために、デフォルトで単一の画面に収まるデザインも可能にします。

マシュー：アクティビティでタブビューをどのように使用しているかを詳しく見てみましょう。

アクティビティには、リングの詳細ビューごとにタブがあり、新しい「垂直ページ」スタイルを使用しています。

アクティビティには、各タブ間のこの新しいぼかしトランジションもあります。

このトランジションをコンテナの背景修飾子と組み合わせて、ビュー間をシームレスにブレンドします。

アクティビティの最後のページは、最近完了した演習のスクロールリストです。

そのリストを追加するのは、リストを追加するのと同じくらい簡単です!

TabViewはスクロールコンテンツを自動的に検出し、それに合わせて展開します。

そのため、アクティビティに似たレイアウトをすばやく構築できますが、TabViewにはもう1つのトリックがあります。

ジェン：移動タブまでスクロールすると、クールなアニメーションに気づきましたか？

アクティビティリングが左上隅にスケールアップするのを見てください。

これにより、インタラクションをデジタルクラウンに結び付け、アクティビティリングを恒久的に表示するという設計目標を達成します。

マシュー:今、あなたは「私もそれをしてもいいですか?」と疑問に思うかもしれません。そして、答えは、あなたはできるということです!見てみましょう。 

watchOS 10では、TabViewの選択値に基づいてアニメーションを駆動できるようになりました。

本当にきちんとしたトリックの1つは、これをマッチしたジオメトリ効果に接続することです。

アクティビティリングは、TabViewとツールバーの両方に表示されます。

これら2つのビューのそれぞれに一致したジオメトリ効果を追加することで、SwiftUIは1つの位置から別の位置に自動的にアニメーション化されます。

ジェニファー：ナビゲーションスプリットビューとタブビューは本当に可能ですが、必ずしもすべてのアプリに適しているわけではありません。

アプリが詳細とソースリストの間、またはいくつかの垂直ページネーションされたタブの間でピボットして必要なことができない場合は、NavigationStackの使用を検討してください。

マシュー：はい、その通りです。

ワークアウト、カレンダー、音楽などの多くのアプリでNavigationStackを使用しています。

ナビゲーションプッシュアニメーションも更新しました!

選択したビューを強調表示して移動します。

ジェニファー：NavigationStackは、人々をビューの階層に導き、ビューの階層から抜け出すための最も明確な方法です。

最初のビューでは大きなタイトルを使用しますが、戻るボタンがあるサブビューでは使用しないでください。

アプリを設計するときは、できるだけ少ないインタラクションで「Apple Watch Moment」を達成するナビゲーション構造を選択してください。

マシュー：それはwatchOS 10のナビゲーションです。

NavigationSplitView、TabView、NavigationStackは、すべてのアプリでエクスペリエンスを一貫して予測可能にします。

ジェニファー：アプリに最適なナビゲーション構造を選択したので、各ビューを構築するために使用できるリソースについて話しましょう。

Apple Watchのディスプレイとハードウェアが進化するにつれて、ディスプレイは一貫して大きくなり、より丸くなりました。

長年にわたってますます丸みを帯びたディスプレイを設計しながら、コントロール、ラベル、コンテンツのサイズと配置を定義する柔軟なグリッドシステムを開発しました。

さまざまな種類のコンテンツに対応するために、3つの基本的なレイアウトを設計しました。

ダイヤルベースのビュー、インフォグラフィックビュー、およびリスト。

これらのレイアウトはすべて、watchOS 10でサポートされているさまざまなApple Watchサイズに自動的に適応するように設計されています。

ダイヤルベースのビューは、一目で配信される緻密な情報に最適です。

気象条件などのフルスクリーンカラーと画像の使用は、追加のコンテキストを追加するのに役立ちます。

ダイヤルを使用すると、コンテンツを隠すことなく、最大4つの異なるコーナーコントロールを追加することもできます。

インフォグラフィックビューは、テキストとメトリクスのブロックとペアになっているチャート、グラフ、その他のデータビジュアライゼーションに最適です。

また、リストを使用すると、コンテンツをスクロールして必要なものを正確に見つけることができます。

グリッドは、アクティブな表示領域の形状に基づいています。

ディスプレイの曲率から始めて、それを使用して、ビュー内の要素のサイズと位置を数学的に通知します。

これらのレイアウトグリッドは、Apple Design Resourcesで入手できます。

アプリの設計に役立つことを願っています。お役に立てば幸いです

マシュー：ジェンとデザインチームによって作成されたレイアウトグリッドは、watchOS 10の基盤を形成し、多くのAPIの基盤を提供します。

たとえば、シーンパディングを使用して、ダイヤルビューを構築するために必要なインセットを取得します。

または、新しい「トップバートレーリング」の配置を使用して、画面右上のツールバーにボタンを追加します。

この配置を使用すると、時間が邪魔になり、画面が中央になります。

Now Playingビューは、更新されたツールバーを実際に利用しています。「トップバーの先頭」と「トレーリング」の配置を使用することに加えて、Now Playingはコントロールボタンをボトムバーに追加します。

SwiftUIは、ジェンが先ほど説明したのと同じレイアウトグリッドを使用して、これらのボタンを揃えています。

追加のパディングを追加する必要はありません。

また、下のバーには一時停止ボタンがあります。

コントロールサイズ修飾子を使用して、このボタンをより大きく、より目立つようにすることができます。

Now Playingの画面を構築するのがかつてないほど簡単になりました!

これらのツールバーの配置は、一度に画面上でより多くのコントロールを可能にすることで、焦点を絞ったインタラクションの新しい機会を解き放ちます。

ジェニファー：私たちは、すべてのピクセルを利用し、アプリ間でApple Watchの使用体験をより一貫性があり、予測可能にするためにレイアウトグリッドを開発しました。

私はまた、彼らが今後何年もの間、素晴らしいアプリをデザインするためにあなたを鼓舞することを願っています。

マシュー:次に、色と材料の完全なスイートが、人々にビューの階層の中で場所の感覚を与える方法について話しましょう。

ジェニファー：watchOS 10のデザイン目標の1つは、フルスクリーンカラーと画像でディスプレイの形状と忠実度を強調することです。

そのために、Ultra Thin、Thin、Regular、Thickなど、さまざまなぼかしレベルで背景コンテンツに影響を与える4つの鮮やかなフルスクリーン背景素材を追加しました。

マシュー：そして、他のプラットフォームですでに使用しているのと同じSwiftUI APIをwatchOSで使用できます。

ジェニファー:また、独自のアクセントカラーで着色できるフルスクリーンの背景グラデーションを追加しました。

アクティビティでは、ムーブ、エクササイズ、スタンドのアクセントカラーを使用して、同様のレイアウトを持つ3つの連続したタブを一目で区別します。

フルスクリーンカラーのもう一つの素晴らしい使い方は、睡眠のこの心を落ち着かせる青い背景のように、トーンを設定することです。

太陽の勾配を使用して時刻を表示する世界時計のように、色を使用して一目で情報を伝えることができます。

フルスクリーンカラーを使用して状態の変化を伝えることもできます。

タイマーでは、タイマーがカウントダウンしているときに背景が黒になり、その後、明るいオレンジが私の卵タイマーが終わったことを宣言します。

前景要素がこれらすべての背景で見栄えを良くするために、コントロールとプラッターセルに鮮やかな塗りつぶし、タイポグラフィで情報階層を作成するために、プライマリ、セカンダリ、ターティア、および第四紀のプロミネンスレベルで鮮やかなテキストラベルを追加しました。

また、フルスクリーンの背景で読みやすさを保証するすべてのシステムカラーの鮮やかなバージョンを追加しました。

マシュー：これらの新しい資料がすべてwatchOSで利用できるのはとてもクールです！

では、それはどのようにアプリで一緒になるのですか?

例として、ノイズアプリを使ってみましょう。

フルスクリーンの背景グラデーションから始めます。

これは、watchOS 10で新しい「コンテナの背景」修飾子から来ています。

ノイズはグラデーションが適用された緑色を通過します。

チャートの塗りつぶされていないバーとX軸ラベルは、セカンダリフォアグラウンドスタイルを使用しています。

セカンダリスタイルは、いくつかの活気を提供し、背景色が通過することを可能にします。

塗りつぶされたバーと残りのテキストラベルは、プライマリスタイルを使用しています。

それだけで、景色は完成です!

watchOS 10用にアプリをアップデートすると、他にもいくつかの変更があることに気付くでしょう。

システム全体のプレゼンテーションは、フルスクリーンの薄い素材を使用するようになりました。

これにより、着用者はアプリのどこにいるかについての追加のコンテキストが得られます。

この景色のすぐ下に緑のヒントが見えます。

実際、SwiftUIのすべてのコントロール、ラベル、およびリストコンテンツは、素材の背景の上に配置すると素晴らしく見えるように更新されました。

ジェニファー：そして、ナビゲーションバーには美しい新しい可変ぼかしがあります。

これは、コンテンツがナビゲーション項目の下をスクロールすると、穏やかな移行を提供します。

それはカバーすることが多かったです!

私たちは、デザインの原則、アプリでナビゲートするまったく新しい方法、まったく新しいレイアウト、色と素材の使い方を説明しました。

watchOS 10は、Apple Watchアプリの設計にとって大きな飛躍です。

マシュー：そして、私たちはすべての変更について話し合うことがたくさんあります！

ジェニファー：新しいすべての概要については、「Meet watchOS 10」と「Apple Watchのスマートスタック用デザインウィジェット」をチェックして、美しいウィジェットをデザインする方法を学びましょう。

マシュー：すでにwatchOSアプリをお持ちの場合は、「watchOS 10用のアプリをアップデート」があなた用です！

ここで示したすべてのSwiftUI APIを使用して、既存のアプリを更新することを順を追って説明します。

watchOS 10は、デザインとエンジニアリングの深いコラボレーションによってのみ可能でした。

そして、これはほんの始まりに過ぎません!

ジェニファー:それは本当です。

watchOSはかつてないほど活気のあるプラットフォームであり、Apple Watchアプリを設計および構築するのにこれほど良い時期はありません。

♪ ♪