10099

♪まろやかなインストゥルメンタルヒップホップ♪

♪

サリナ・ウー:こんにちは!私の名前はサリナで、RealityKit Toolsチームのソフトウェアエンジニアです。

Harjas Monga: そして、私はプロファイリングツールエンジニアのHarjasです。

Sarina:今日、Harjasと私はInstrumentsでRealityKit Traceテンプレートを紹介します。

このテンプレートが空間体験のパフォーマンスを最適化するのにどのように役立つかを紹介します。

パフォーマンスは、空間コンピューティングのユーザーエクスペリエンスに不可欠です。

空間体験を最適化する方法を学ぶために、このプラットフォームでのレンダリングの仕組みを簡単に説明し、InstrumentsのRealityKit Traceテンプレートを使用してプロファイリングする方法を示し、コンテンツを最適化するために利用可能な他の優れたツールを簡単に説明します。

このプラットフォームには独自のパフォーマンス制約があります。

それらを理解するには、まずレンダリングがどのように機能するかを理解する必要があります。

レンダリングには、アプリプロセス、レンダリングサーバー、およびコンポジターが含まれます。

アプリがこれらのコンポーネントとどのように相互作用するかは、作成するエクスペリエンスの種類によって異なります。

空間アプリ用に作成できるエクスペリエンスの種類と、それらがどのようにレンダリングされるかを見てみましょう。

プラットフォーム上のアプリは、共有スペースまたはフルスペースのいずれかに入ることができます。

これらは、レンダリング方法に基づいて考慮すべきパフォーマンスの影響が異なります。

複数のアプリが並んで実行されると、それらはすべて同じスペースにレンダリングされます。これは、共有スペースと呼ぶ理由の1つです。

これは、アプリのパフォーマンスが、レンダリングサーバーが他のアプリをレンダリングするために行っている作業によって影響を受ける可能性があることを意味します。

その後、レンダリングサーバーはコンポジターと連携して最終フレームを生成します。

アプリがフルスペースに入ると、他の目に見えるアプリはすべて非表示になります。

これは、アプリのパフォーマンスが、現在隠されているアプリのレンダリング作業の影響を受けなくなったことを意味します。

フルスペースに入る方法の詳細については、「SwiftUIでウィンドウを越える」セッションをチェックしてください。

先ほど取り上げられた内容に基づいて、アプリをプロファイリングする2つの推奨方法があります。

パフォーマンスの問題を調査したり、システムの電力への影響を分析したりするたびに、アプリがシステムパフォーマンスに与える影響を理解するために、アプリを個別にプロファイリングする必要があります。

アプリが他のアプリと一緒に動作することを期待する場合は、それらの他のアプリでアプリをプロファイリングする必要があります。

これは、ユーザーがアプリをどのように体験するかを理解するために重要です。

空間アプリをプロファイリングして、RealityKit Traceテンプレートを使用して、アプリのパフォーマンスを個別に最適化する方法を紹介しましょう。

私たちはHello Worldに取り組んできましたが、パフォーマンスに問題がないことを確認したいと考えています。

サリナ：これはアプリのスタート画面で、SwiftUIビューです。

このビューには、Objects in Orbitボタンがあります。

そのボタンをタップして、地球を周回する物体について詳しく知ることができます。

このボタンは、地球を周回しているさまざまな物体の例を一覧表示する新しいビューを開きます。

このビューには、衛星、月、望遠鏡など、これらのオブジェクトの3Dモデルがあります。

このビューには、View Orbitsボタンもあります。

ボタンをタップすると、地球とその周囲を周回する衛星を示す没入型体験が開きます。

これらのモデルに詳細な資産を使用しましたが、このアプリのパフォーマンスに影響を与えているのではないかと思います。

没入型体験では、地球を周回する衛星の経路がアニメーション化されるのを見ることができます。

地球をスケールアップして、より詳細に見ることもできます。

このインタラクションは信じられないほど途切れ途切れなので、ここにはパフォーマンスの問題があると思います。

Harjasと私は、RealityKit Traceテンプレートを使用してその経験をプロファイリングしました。

ハルジャス、それを案内してくれませんか？

Harjas:もちろん、RealityKit Traceで利用可能なすべての機能について説明しましょう。

RealityKit Traceは、Instruments 15で新しいテンプレートとして利用できます。

実際のデバイスとシミュレータの両方をプロファイリングするために使用できます。

最も正確で実用的な情報を得るには、実際のデバイスをプロファイリングする必要があります。

シミュレータに対してプロファイリングする場合、Macとオンデバイス間のハードウェアとソフトウェアの違いにより、すべてのタイミング情報が正確になるわけではありません。

しかし、あなたはまだ迅速な反復と時間に基づいていない統計のいくつかを改善するためにそれを使用することができます。

RealityKitトレーステンプレートには、いくつかの機器が含まれています。

あなたが最初に見たいと思う楽器は、RealityKit Frames楽器です。

この楽器は、デバイスによってレンダリングされる各フレームを追跡します。

これらのフレームを拡大して、各フレームのレンダリングにかかった時間を確認できます。

これにより、フレームの各ステージがレンダリングにかかった時間を確認できます。

これにより、レンダリングパイプラインのどの部分がパフォーマンスの問題を引き起こしている可能性があるかについて、高レベルのアイデアが得られます。

スムーズなユーザーエクスペリエンスを実現するために、アプリケーションは毎秒90フレームを達成できる必要があります。

ただし、OSは常に90fpsをターゲットとするとは限りません。

表示されるコンテンツとデバイスが配置されている環境に最も適したフレームレートでレンダリングされます。

フレームレートは変更される可能性があるため、すべてのフレームには、デバイスが現在のターゲットフレームレートに達することができるように、レンダリングを完了しなければならない期限があります。

フレームは3つのグループに分類されます。締め切り内によく完了しているフレーム、締め切り内にかろうじて終了しているフレーム、締め切りを過ぎてフレームがドロップするフレームです。

これらの分類は、それぞれ緑、オレンジ、赤の色分けされています。

締め切りを過ぎているフレームは、ユーザーエクスペリエンスに悪影響を及ぼします。

ズームアウトして高いレベルからフレームをチェックすると、カラーコーディングにより、トレースの問題のある部分をすばやく見つけることができます。

したがって、パフォーマンス調査をフレームドロップが最も多い領域に絞り込むことができます。

個々のフレームに加えて、機器は、システムが各フレームをレンダリングするためにCPUまたはGPUの作業に費やした平均時間も視覚化します。

次にチェックしたい機器は、RealityKitメトリクス機器です。

トップレベルでは、機器は検出したすべてのボトルネックを描画します。

これらのボトルネックは、レンダリングパイプライン全体からの包括的なタイミング情報を見ることによって生成されます。

フレームが期限を超えるのと同じ時間に発生するボトルネックに優先順位を付けます。

以下の詳細ビューでは、これらのRealityKitのボトルネックが重大度とタイプ別に要約されていることがわかります。

さらに掘り下げて、機器がどのようなボトルネックを見つけたか、それが全体的なパフォーマンスにどの程度影響したかを正確に確認できます。

拡張詳細ビューでは、この機器は、これらのボトルネックをさらに診断する方法と、それらを軽減するために実行できる手順に関する推奨事項を提供します。

RealityKitメトリクストラックを拡張すると、レンダリングパイプラインのさまざまなコンポーネントからいくつかのタイプのメトリクスが表示されます。

これらの統計は、アプリが提示しているシーンの完全な複雑さを理解するのに役立ちます。

主要な指標の一部には、これらの指標に対する合理的な期待を知らせるのに役立つしきい値が関連付けられています。

メトリクスを使用して、ボトルネックの診断やフレームが期限に達していない理由をさらにガイドします。

RealityKitメトリクスは、アプリケーションのRealityKitシステムを実行するために各フレームに費やされている時間を視覚化します。

これには、すべての組み込みシステムと、アプリケーションが実装する可能性のあるすべてのカスタムシステムが含まれます。

この情報はTime Profilerと組み合わせるのが最善なので、RealityKitのシステムコードを最適化できます。

最後に、RealityKit Metricsに示されているSystem Power Impactレーンを確認して、アプリケーションが優れた一貫したユーザーエクスペリエンスを提供するために動作する必要があるパワーエンベロープを理解します。

さて、私たちが世界の経験に足を踏み入れている間に取ったいくつかの痕跡を見てみましょう。

アプリの最初のシーンは、SwiftUIに実装されているスタート画面でした。

フレーム機器には、このトレース全体にかなりの数のドロップフレームがあります。

これらのドロップされたフレームは重要ではないように見えるかもしれませんが、ユーザーエクスペリエンスを本当に損なう可能性があります。

Optionキーを押しドラッグすると、より問題のある領域の1つにズームインできます。

また、時間範囲を調整することで、これらの長時間のフレーム中にRealityKit Metrics機器が見つけたボトルネックを確認できます。

インストゥルメントは、この時代の最大のボトルネックがコアアニメーションエンコーディングであることを発見しました。

そこで、Core Animationの統計を確認します。これは、RealityKit Metrics Instrumentの横にある詳細表示三角形をクリックし、Core Animationというラベルの付いたトラックを選択することで確認できます。

これらのコアアニメーションメトリクスは、これらのフレームドロップの原因を知らせるのに役立ちます。

これらのメトリクスを調査すると、それらのいくつかはメトリクスがどれほど厳しいかという文脈を持っていることに気付くでしょう。

タイムラインでは、これはカラーコーディングに反映されています。

これは、これらの重要な指標の合理的なしきい値が何であるかをガイドするためのものです。

タイムラインの視覚化に基づいて、アプリケーションがオフスクリーンの準備数の推奨しきい値を超えていることは明らかです。

下部の要約は、ここで準備するオフスクリーンの平均数が180であることを示しています。これはかなり高い平均です。

コアアニメーションの統計を考慮すると、心に留めておきたい作業には3つのタイプがあります。

第一に、透明性とぼかし効果は、システムにとって非常に高価な操作です。

これらの効果は、ユーザーに最も影響を与えるときに使用し、それ以外の場合は控えめに使用してください。

レンダリングパスの数は、コアアニメーションが画像全体に対して個別にレンダリングする必要があるレイヤーの数によって決まります。

そして最後に、画面外パスがあります。

したがって、名前が示すように、オフスクリーンパスは、ディスプレイではなくオフスクリーンにレンダリングされるレンダリングパスです。

オフスクリーンパスでは、レンダリングパスが現在行っていることを一時停止し、ユーザーに表示されない作業を行う必要があります。

ただし、通常のレンダリングパスを継続するには、オフスクリーンパスの出力が必要です。

オフスクリーンパスは、空間アプリに特にインパクトがあります。

他のアプリプラットフォームとは異なり、このプラットフォームは、すべてのフレームがユーザーの頭の動きなどの環境要因を考慮する必要があるため、空間アプリを継続的にレンダリングします。

したがって、静的UIは、システムのターゲットフレームレートでレンダリングできるほど効率的である必要があります。

オフスクリーンパスを引き起こす可能性のある作業には、影、マスキング、丸みを帯びた長方形、視覚効果の4つの主なタイプがあります。

オフスクリーンパスの詳細については、「レンダリングフェーズの謎を解明し、問題を排除する」に関する技術講演をご覧ください。

オフスクリーンパスがたくさんあったので、このビューのSwiftUIコードをチェックして、原因を見つけてください。

SwiftUIコードでは、このビューはマスキングや視覚効果を行っていません。

しかし、影が適用されている例があります。

たとえば、SwiftUI Viewアイテムでは、いくつかのボタンに影が適用されています。

シャドウは、特に透明性と組み合わせると、特に高価な操作です。

シャドウは便利なUIイディオムですが、空間アプリの場合、ユーザーに大きな影響を与えるときに使用する必要があります。

これらの影を無効にして、新しいトレースを見てみます。

シャドウが無効になっているため、RealityKit Frames Instrumentではフレームの問題はほとんどなく、RealityKit Metricsは、オフスクリーンパスが4倍に減少したと報告しています。

さて、ワールドアプリで見た次のシーンは、軌道ビューのオブジェクトでした。

そのシーンの痕跡を開いて、最適化できるものがあるかどうかを確認します。 最適化できるものがあるかどうかを確認します。

フレームインストゥルメントでは、トレース全体にドロップされたフレームが散乱し、多くのボトルネックがあります。

RealityKitメトリクスの詳細ビューは、これらのボトルネックの概要を提供します。

要約すると、これらのボトルネックのほとんどはGPUワークストールに関連しています。

最も頻繁に報告されるボトルネックタイプはGPUストールであるため、私は再びRealityKitメトリクスを拡張するつもりです。

しかし、今回は3Dレンダリングトラックを使って調査します。

フレームドロップの数が多いトレースの領域を選択します。 

この時間選択では、3Dレンダリングメトリックは、三角形と頂点の数が推奨されるしきい値をはるかに上回っていることを報告します。

次に、フレームドロップがそれほど多くないトレースの領域を強調します。

また、レンダリングメトリックによると、三角形と頂点の数は推奨されるしきい値の範囲内です。

これは、アプリがシーンで使用しているアセットの数と品質を本当に評価する必要があることを意味します。

アセットレンダリングを最適化するときは、まず三角形、頂点をチェックし、RealityKit Metricsの3Dレンダリンググループから呼び出しを描画します。

これらのメトリクスを最適化するには、可能であれば単純な形状のメッシュを使用してください。

同じメッシュでアセットを利用するときは、インスタンス化を活用してください。

3Dコンテンツを組み立て、編集、プレビューできる新しい開発者ツールであるReality Composer Proの統計を使用して、アセットの複雑さを確認してください。

そのコンテンツは、後でXcodeプロジェクトで直接コードを介してアクセスすることができます。

このツールの詳細と優れたアセットの作成方法については、セッション「Meet Reality Composer Pro」をご覧ください。

私は先に進み、使用していた資産を、より少ないポリゴンを使用する資産と交換し、新しいトレースをキャプチャしました。

このトレースでは、フレームインストゥルメントは、すべてのフレームが締め切りに達していると報告しています。

そして、3Dレンダリング統計をもう一度確認すると、三角形と頂点の数が大幅に減少したと報告されます。

これらの資産はポリゴンを使用していましたが、経験の質に損失はありませんでした。

次の痕跡は、私たちが地球モデルと相互作用していたときのものです。

このシーンでは、地球のサイズを変更することは実際にはかなり不安でした。

RealityKit Metricsは、System Power Impactレーンがかなりの時間にわたって非常に高かったと報告しています。

これは、アプリケーションの一部が非常に非効率的であり、ユーザーエクスペリエンスが影響を受ける可能性があることを示しています。

デバイスのシステム電力の影響をできるだけ多くの時間公称状態に保ちながら、アプリケーションがうまく機能するようにターゲットにする必要があります。

システムの電力への影響を軽減するためにプロファイリングするときは、常にアプリケーションを分離してプロファイリングして、最も実用的な情報を取得できるようにします。

いくつかのアプローチを使用して、システムの電力への影響を下げることができます。

まず、RealityKitメトリクスの統計が期待の範囲内であることを確認してください。

これらが期待を上回っている場合、デバイスはスムーズな体験を提供するために、長時間高電力状態で動作する可能性があります。

次に、CPUとGPUが何をしているのかを確認します。

CPUの場合、タイムプロファイラがハイパワードローリージョン中に高いCPU使用率を報告するかどうかを確認します。

もしそうなら、タイムプロファイラを使用してCPUにバインドされたコードを最適化します。

GPUには、パフォーマンスの状態があります。

GPUが最大段階にあるとき、それはかなりの量の電力を消費します。

その場合は、InstrumentsのMetal System Traceテンプレートを使用して、GPUでどのような作業が行われているかを確認する必要があります。

そうすれば、何が最適化できるかを理解できます。

トレースに戻ると、タイムプロファイラは、この地域ではCPU使用率が平均100%であり、このほとんどの時間でGPUのパフォーマンス状態が最小限であったことを示しています。

タイムプロファイラを使用すると、高いCPU使用率の原因を確認できます。

最も重いスタックトレースは、拡張詳細ビューにあります。

これは、コールツリーでコードの最も高価な部分をすばやく見つけることができるため、タイムプロファイラーの非常に便利な機能です。

これらのフレームを見ると、Entity.makeModelは多くのCPU時間を使用しているようです。

次のフレームダウンは、Entity.generateCollisionShapesを呼び出すことです。

したがって、パフォーマンスの問題は、常にモデルと衝突形状を生成することによって引き起こされているように見えますが、これは高価な操作です。

Xcodeを開いて、これについて何ができるかを確認します。 

これは、コールツリーが示したEntity.makeModel関数呼び出しで、多くのCPU時間がかかっていました。

これはmakeGlobe関数内で呼び出されます。

makeGlobe関数をControlキーを押しながらクリックすると、誰がそれを呼び出しているかを確認できます。

Orbit SwiftUIビューボディから呼び出されています。

これは、ビュー本体を非常に迅速に計算する必要があるため、避けるべきアンチパターンです。

ビューの状態が変更されるときはいつでも、すべての高価な操作を再計算する必要があるため、SwiftUIビューの本文でモデルの読み込みやその他の高価な操作は避けるべきです。

だから、私がやろうとしているのは、ビューボディからこの呼び出しを削除することです。

次に、ViewModelに、地球エンティティの再利用可能なバージョンを追加します。

そして最後に、私は軌道ビューでその再利用可能な地球エンティティを使用するつもりです。

さて、ビューボディが再計算されると、アプリは同じモデルをリロードする時間を無駄にしません。

修正後の痕跡を見ると、電力への影響は名目状態に戻されます。

また、タイムプロファイラは、CPU使用率が100%から10%に低下したと報告しています。

これらすべての最適化の後、報告されたボトルネックはほとんどなく、ほとんどすべてのフレームが期限に達しており、電力は期待の範囲内であります。

現在、Worldアプリは、このプラットフォーム用に最適化されているアプリです。

オフスクリーンパスの数を減らし、高ポリゴン資産を合理的なものに置き換え、CPUと電力使用量を削減したので、このアプリの最適化されたバージョンをステップアップします。

スタート画面は素晴らしく見え、影はユーザーエクスペリエンスにあまり追加されていなかったので、これは良い最適化でした。

次に、軌道のオブジェクトを開きましょう。

これらのモデルは、ポリゴンの少ない資産を使用しているにもかかわらず、見栄えがします。

だから、その余分な詳細はリソースを無駄にしていました。

そして最後に、地球モデルを再び開いて、サイズを変更してみます。

今、この相互作用はバターのように滑らかです。

これは、RealityKit Traceを使用して、この新しいプラットフォーム用にアプリを最適化する方法の簡単な概要でした。

ねえ、サリナ、開発者が利用できる他にどんなツールがありますか？

Sarina: 空間コンピューティング用のアプリを最適化するのに役立つツールがいくつかあります。

SwiftUIコンテンツを最適化するために、Instrumentsアプリには、SwiftUI、Core Animation、およびハングを分析するためのドメイン固有のツールがあります。

Hangs楽器の詳細については、「Instrumentsでハングアップを分析する」セッションで学ぶことができます。

また、3Dアセットベースのコンテンツを最適化するためのツールもいくつかあります。

タイムプロファイラインストゥルメントは、アセットの読み込みに多くの時間を費やしている場合など、アプリが最も時間を費やしている領域を見つけるのに役立ちます。

RealityKit Metrics Instrumentは、シーンのアセットが多すぎる場合やアセットが複雑すぎる場合の診断に役立ちます。

最後に、Reality Composer Proを使用してシーンを組み立てるときに、アセットの複雑さを確認することもできます。

Reality Composer Proの詳細については、セッション「Meet Reality Composer Pro」をご覧ください。

アプリでMetalを使用している場合、最も便利なツールはInstrumentsのMetal System Traceテンプレートです。

このテンプレートには、GPUタイムライン、GPUカウンタ、GPUパフォーマンス状態などの重要な指標があります。

このテンプレートとメタルコンテンツのプロファイリングのための他のツールの詳細については、セッション「メタルデバッグ、プロファイリング、および資産作成ツールの発見」をチェックしてください。

要約すると、このプラットフォームにはパフォーマンスが不可欠です。

アプリは、可能な限り最高のユーザーエクスペリエンスを提供するために十分に最適化されている必要があります。

RealityKitトレーステンプレートを使用して、アプリのパフォーマンスのボトルネックを見つけることができます。

他の楽器で積極的にプロファイリングし、Reality Composer Proでコンテンツをチェックすることは、パフォーマンスの問題を見つけて解決するのにも役立ちます。

RealityKit Traceテンプレートを使用してアプリを最適化する方法の詳細については、開発者ドキュメントを確認してください。

そして、このプラットフォームのパフォーマンスをよりよく理解するために、「空間コンピューティングのためのアプリのパワーとパフォーマンスを最適化する」セッションを見てください。

トレースが何であれ、空間コンピューティングアプリの最適化をお楽しみください。

ハルジャス:見てくれてありがとう。

♪