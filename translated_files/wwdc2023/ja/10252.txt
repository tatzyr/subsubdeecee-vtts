10252

♪ ♪

ケビン・キャシー：こんにちは、私の名前はケビンで、プレビューに取り組んでいます。

ソフトウェア、特にアプリの構築は、本当に反復的で創造的なプロセスであるため、コードをテストし、生き生きとしているものを体験する最速の方法が必要です。

それが私たちがプレビューを作った理由です。だから、あなたはそのほぼ即時の視覚的フィードバックを持つことができるので、あなたは創造的であることに集中することができます。

そして、プレビューは柔軟に構築されています。

さまざまな種類のビュー、データ、デバイスを使用して、アプリ全体で使用できます。

プレビューを初めて使用する場合でも、しばらく使用している場合でも、それらを最大限に活用するお手伝いをしたいと思います。

これを3つの部分で行います。

まず、プレビューが何であるかを確認します。

それらがどのように機能し、プロジェクトの残りのコードとどのように関連しているかを少し理解することは役に立ちます。

第二に、プレビューにコンテンツを提供するには、ビューとウィジェットの2つの異なる方法があります。

これらを書く方法と、Xcodeでのユニークなワークフローのいくつかを紹介します。

そして最後に、プロジェクトでプレビューを採用し始めると、遭遇する一般的なシナリオや質問がいくつかあります。

あなたのプロジェクトでさらにプレビューを取るのに役立ついくつかのヒントとコツをお伝えしたいと思います。

始めましょう。

では、プレビューとは何ですか?

プレビューは、ビューを制作して設定するコードのスニペットです。

それらはソースファイルの最上位レベルで書かれています。つまり、どのタイプや関数にもネストされていません。

そして、彼らは文字通りこれ簡単にすることができます。

#Previewマクロを使用し、ビューを返します。

プレビューは、残りのアプリコードとリソースと一緒にアプリにコンパイルされます。

プレビューはこれらのシンボルとリソースにアクセスできるため、プレビューは本当に柔軟です。

アプリ内の任意のビューのプレビューを設定するために必要なことは何でもでき、Xcodeのキャンバスに直接表示されます。

しかし、プレビューはより速く反復することでもあります。

プロジェクト内のSwiftコードを編集すると、Xcodeは自動的に2つのことを行います。

まず、行った変更を調べて、最小限のコードを再コンパイルします。

そして、次に、プレビューを再実行します。

これは、コードの作成と反復に集中できることを意味し、Xcodeは自動的にプレビューの構築、実行、更新を処理します。

また、プレビューが定義されると、Xcodeは追加のコードを書くことなく、異なるコンテキストでそのプレビューを自動的に実行できます。

たとえば、ダークモードまたは異なるタイプのサイズと向きでテストできます。

これは完璧なアナロジーではありませんが、テストに似たプレビューを考えるのに役立つかもしれません。

テストと同様に、プレビューは実際のプロジェクトで実際のコードを実行します。

私たちはコードをエミュレートしたり解釈したりしていません。

これは、あなたがテストしてプレビューしているものが、あなたのアプリを使用する人々が経験するものも表しているという自信があることを意味します。

第二に、テストやプレビューの作成に投資すると、最終的にはより迅速に開発するのに役立ちます。少しでも長い道のりを行くことができます。

第三に、アプリのさまざまなレイヤーをテストしてプレビューすることができます。

たとえば、テストでは、アプリの機能のかなりの部分を行使する高レベルのUIテストを行うことができ、個々のコンポーネントをテストする小さな単体テストを行うこともできます。

同様に、アプリケーションの多くを網羅するビューのプレビューを持つことができ、個々のリーフビューを表示するプレビューを持つことができます。

これは、プレビューがどのように機能するかを簡単に見ることです。

次に、それらを書く方法と、プレビューできるコンテンツの種類に焦点を当てましょう。

何をプレビューするかに関係なく、定義するすべてのプレビューは、3つのピースで同じ基本的な形状を持っています。

まず、ソースファイルの最上位にあるプレビューマクロ初期化子から始めます。

次に、コンテンツの1つ以上の末尾のクロージャを返します。

ここでは、プレビューしたいシナリオのUIを設定できます。

そして、プレビューを作成するために必要なのはそれだけですが、オプションでプレビュー自体を設定して、さらに柔軟性を高めることもできます。

名前を付けることができ、プレビューの内容によっては、初期化子で追加の設定が必要になるか、または渡す必要があるかもしれません。

これの例をいくつか見てみましょう。

プレビューできるコンテンツの種類について話しましょう。

ビューとウィジェットの2種類があります。

ビューはSwiftUI、UIKit、またはAppKitから来ることができます。

SwiftUIの場合は、作業中のビューを返すだけです。

しかし、作業中のビューを渡す必要はありません。必要な他のビューに配置できます。

そして、多くの場合、より広い文脈でビューに取り組みたいので、これは役に立ちます。

たとえば、常にリストにあることを意図したビュー。

これは、プレビューしているビューが必要な場合は、環境を通じてデータを提供する修飾子を添付する場所でもあります。

プレビューは、アプリの最上位レベルで定義するシーンのようなものです。

シーンはアプリのエントリーポイントとして機能します。

データを設定し、それをビューに渡します。

プレビューは同じ目的を果たすため、プレビューを使用してデータとアセットを設定し、プレビューしているビューに渡すことができます。

プレビューの設定に関しては、名前を付けることができます。

また、SwiftUIのようなビューベースのプレビューは、可変引数リストとして1つ以上の構成特性を渡すことをサポートしています。

たとえば、プレビューするデバイスの開始方向を設定できます。

APIの形状はUIKitとAppKitで同じです。

SwiftUIビューの代わりに、ビューコントローラーを作成し、必要に応じて設定するだけです。

ビューコントローラー以外にも、UIViewまたはNSViewを直接プレビューすることもできます。

だから、あなたが構築しようとしているものに応じて、多くの柔軟性があります。

プレビューの使用を開始する方法と、プレビューを非常に柔軟にするツールのいくつかを理解できるように、これまでに話したことをお見せしたいと思います。

画像のコラージュを作るアプリを書いている最中です。

写真を選んだり、レイアウトを選んだり、フィルターを追加したりできます。

Xcodeに行って、プレビューキャンバスの機能を探りましょう。

画像にフィルターを追加できるビューを書き始めました。

このビューを反復するために、プレビューが必要です。

まず、エディタの右上に移動し、オプションメニューをクリックして、キャンバスモードが有効になっていることを確認します。

キャンバスモードは、新しいプロジェクトではデフォルトで有効になっていますが、既存のプロジェクトがある場合は、これをオンにする必要があるかもしれません。

しかし、キャンバスモードが有効になっていても、ファイルにプレビューが定義されていない限り、キャンバスは非表示のままなので、追加しましょう。

#Previewと入力し始めると、Xcodeがプレビューを提案します。

完了を受け入れると、Xcodeはプレビューをビルドして実行し、ビューがキャンバスに表示されます。

私のビューに取り組むために使用できる3つの異なるモードがあります。

これらはキャンバスの左下隅に表示されます。

最初のデフォルトモードは、ライブモードまたはインタラクティブモードです。

これらのスライダーをドラッグするように、キャンバス内のビューと対話できるため、ほとんどの時間をこのモードで過ごします。

アニメーションをテストしたり、非同期コードを呼び出したり応答したりすることもできます。

2番目のモードは、選択モード、または静的モードです。

このモードでは、私のビューのスナップショットを取り、キャンバス内の要素と対話することができます。

ビューをクリックすると、ソースエディタで作成したコード行が強調表示されます。

そして、このラベルのような特定のテキストビューをダブルクリックすると、フォーカスがソースエディタに移動して、すばやく変更できます。

ヴィネットはより簡潔なラベルです。

環境について話しましょう。-環境について話しましょう

つまり、プレビュー環境です。

キャンバスにはライトモードでプレビューが表示されていますが、ダークモードで見たい場合はどうなりますか?

コードを編集して配色を設定することはできますが、多くの場合、ダークモードですばやくチェックして、微調整をしたいだけです。

代わりに、キャンバスでデバイス設定のポップオーバーを使用します。

下のバーで、コントロールアイコンをクリックして設定を表示します。

これで、ダークモードまたは特定のダイナミックタイプサイズを有効にすることができます。

しかし、両方のカラースキームで自分のビューがどのように見えるかを同時に見たい場合はどうなりますか?

さて、このために、私はプレビューの3番目のモードを使用します:バリアント。

キャンバスの下部にあるバリアントモードをクリックすると、カラースキームやすべての動的タイプサイズなど、すべての値を表示したいデバイス設定を選択できます。

クリックして個々のバリアントを検査し、各バリアントをページスルーすることができます。

うーん。

これらのより大きなダイナミックタイプのサイズにたどり着くと、私の視界は本当に崩壊し始めますよね?

直しましょう。

VStackの代わりに、コントロールのグループに最適なフォームを使用します。このフォームを使用します。

また、コントロールがセクションに配置されると、フォームは見栄えがします。

各HStackをセクションにしましょう。

マルチカーソル編集を活用することで、すべてのHStackインスタンスでこれらの変更を加えることができます。

最初のHStackを選択し、Command-Option-Eを押して、HStackの各インスタンスのカーソルを見つけて挿入します。

これらのそれぞれをセクションに変更します。

また、2番目の末尾のクロージャで提供される各セクションのヘッダーも必要です。

下矢印で、追加の末尾のクロージャを追加します。

これらのヘッダーにすでに持っているラベルを使いましょう。

矢印をラベルに戻し、Command-Option-Right Braceを押してラベルをヘッダーに移動します。

そして、うわー、私たちの景色はずっと良く見えます。

これらの同じ機能はすべて、AppKitとUIKitのビューとビューコントローラーでもうまく機能します。

CoreImageを使用してフィルターをレンダリングするビューコントローラーにタブを切り替え、キャンバスをライブモードに戻します。

さて、私はすでにこのビューコントローラーのプレビューを作成しましたが、SwiftUIに本当に似ています。

プレビューマクロで、ビューコントローラーを作成し、サンプル画像を渡しました。

しかし、フィルターを適用してこの画像をテストしたいので、ビューコントローラーにフィルターを渡すコードを追加します。

そして、ああ、花とケレ。決して年をとることはない。

ビューコントローラーを設定するだけでなく、プレビューを設定することもできます。

どのプレビューでも、最初の引数としてオプションの名前を持つことができます。

また、SwiftUIやUIKitなどのビュープレビューを使用すると、名前の後に可変リストに1つ以上の特性を追加できます。

たとえば、プレビューを横向きで開始するように設定できます。

これは、ライティングビューのプレビューのクイックツアーです。

プレビューできるコンテンツの2番目の主なカテゴリはウィジェットです。

ウィジェットは、プレビューの速さを本当に強調します。

プレビューできるウィジェットには2種類あります。

まず、個々のエントリを生成するタイムラインプロバイダーを使用するウィジェット。

Xcodeでは、タイムラインプロバイダー全体をプレビューすることも、プレビューでエントリの独自のタイムラインを作成することもできます。

Xcodeに行って、それぞれの例を見てみましょう。 それぞれの例を見てみましょう。

私の画像コラージュアプリには、1時間ごとにランダムに構築されたコラージュを表示するタイムラインプロバイダー付きのウィジェットがあります。

タイムラインプロバイダーの場合、3つの点でプレビューを行います。まず、プレビューしたいウィジェットです。

第二に、タイムラインプロバイダー。

そして、第三に、プレビューに使用するウィジェットファミリー。

それは少量のコードですが、Xcodeで素晴らしいワークフローを提供します。

このウィジェットは1時間ごとにランダムなコラージュを作成しますが、タイムラインのすべてのエントリを見るのに1時間待つ必要はありません。

各タイムラインエントリのスナップショットをプレビューし、キャンバスに表示します。

それらをクリックするか、矢印キーを使うことができます。

そして、私がそうするとき、Xcodeは私のウィジェットと通信し、これらのエントリ間のアニメーションでトランジションを表示し、ユーザーインターフェイスだけでなく、タイムラインのさまざまなポイント間の変更でも問題を見つけることができます。

ここのように、エントリ8と9の間。

ここのアニメーションは素晴らしくありません。それはただクロスフェードします。

このシナリオを修正したいのですが、タイムラインプロバイダーはランダムなので、テスト中にこのシナリオをもう一度見るかどうかはわかりません。

これは、特定のエントリのタイムラインが便利な場所です。

反復したい正確なシナリオを作成できます。 

timelineProvider: プレビューでタイムラインのみに変更し、タイムラインプロバイダーを返す代わりに、修正したいケースを複製する2つのエントリを返します。

しかし、この移行のために修正する必要があるコードは別のファイルにあり、移動するときにこのプレビューを失いたくありません。

便利なことに、ピン留めを使用してプレビューをキャンバスに保存できます。

キャンバスの左上にあるピンボタンをクリックすると、別のファイルに移動してもプレビューがアクティブになります。

以下は、コラージュを描画し、トランジションを含むビューです。

問題の解決に集中するために、キャンバスでは、タイムラインの再生ボタンとループボタンを押すことができます。

今、私がコードを修正している間、Xcodeはこのトランジションを再生し続けます。

そして、ああ、ここに問題があります。

コラージュが行で構成されている場合は、トランジションが添付されていますが、コラージュが列で構成されている場合はトランジションがありません。

トランジションをコピーして貼り付けることができます。

そして、それはより良いですが、それは後縁からアニメーション化しています。

底を押しの方が良いと思います。

そして、私たちはそこに行きます。

プレビューでは、タイムラインプロバイダーだけでなく、特定のイベントを使用してアニメーションを微調整することができました。

それは本当に私のUIの構築と反復をより速く、より楽しくします。

これらの同じウィジェットのワークフローは、プレビューできる2番目の種類のウィジェット、ライブアクティビティでも利用できます。

APIはほぼ同じように見えますが、タイムラインプロバイダーとエントリを提供する代わりに、一連のライブアクティビティ属性と一連の状態を提供します。

ここに例があります。

まず、初期化子で使用する属性を渡します。

次に、これらの属性のコンテンツ状態を渡します。

たとえば、ピザを注文するためのウィジェットを構築している場合は、そのピザのベーキングと配達がどのように進んでいるかについての州のカスタムセットを提供し、それらのすべての州間でアニメーションをテストすることができます。

ウィジェットのプレビューでできることの表面を引っ掻いているだけです。

詳細については、「ウィジェットに命を吹き込み」セッションをチェックしてください。

この講演の最後の部分に進むにつれて、プロジェクトのプレビューの作成を最大限に活用するお手伝いをしたいと思います。

プロジェクトの設定、データの提供、デバイスの機能の活用に影響を与える3つの異なるシナリオを調査します。

まず、ライブラリターゲットのコンテンツのプレビューについて話したいと思います。

これには、フレームワーク、Swiftパッケージ、または動的ライブラリが含まれます。

ライブラリを使用している理由はたくさんあります。

たとえば、ライブラリを使用してプロジェクトをモジュール化したり、他の人に配布するライブラリを開発したりできます。

プレビューはこれらのターゲットでうまく機能しますが、素晴らしいのは、ライブラリターゲットを活用して、どのプロジェクトでもプレビューをさらに進めることができるということです。

ライブラリを活用するための最初のステップは、プレビューがコードの実行に使用する実行可能ファイルの感覚を得ることです。

プレビューを起動してレンダリングするには、実行可能ファイル、アプリ、またはウィジェットが必要です。

通常、これはあなたのアプリですが、アプリを持っていない場合、これはどのように機能しますか?

プレビューは3つのものを使用して、どの実行可能ファイルを使用するかを把握します。

1つは、あなたが作業しているソースファイルです。

第二に、それらのファイルを含むターゲットとそれらのターゲットのすべての依存関係。

次に、3番目に、プレビューは、これらのターゲットの依存関係と、選択したスキームのターゲットと交差します。

プレビューは、アクティブなスキームにあるアプリのみを選択します。

いくつかの例を見てみましょう。 ではいくつかの例を見てみましょう。

最も単純なケースでは、アプリケーションターゲットのメンバーである単一のソースファイルで作業している可能性があります。

これがプレビューに使用するアプリであることは、おそらく驚くことではありません。

しかし、2つのターゲットにそのソースファイルがある場合はどうなりますか?

例えば、アプリの試用版とアプリのフルバージョン。

ここでスキームの出番です。

プレビューは、アクティブなスキームにあるアプリのみを使用します。

ここに別の例があります。2つのSwiftファイルが開いていて、それぞれが別のパッケージによってインポートされる可能性のあるパッケージに属し、その後、すべてアプリによってインポートされます。

これらのファイルから移動して、上部にある最初の一般的な実行可能ファイルを見つけます。

それを念頭に置いて、今、私たちは私たちが始めた質問に戻ることができます:私が全くアプリを持っていない場合はどうなりますか?

この場合、プレビューはあなたに代わってXCPreviewAgentと呼ばれるアプリを作り、ライブラリをロードします。

これはすべて自動的に行われますが、コードがどこで実行されているかを知ることができるように、これがどのように機能するか、特にこのプロセスの名前を知ることは役に立ちます。

たとえば、XCPreviewAgentのクラッシュレポートがある場合、それがコードで起こっていることを知り、問題がどこにあるかを見つけることができます。

しかし、ライブラリのターゲットを利用して、少なくとも2つの方法でプロジェクトでプレビューをより良く機能させることができます。

これらのそれぞれについて話すのに多くの時間を費やすことができますが、少なくとも簡単に言及したいと思います。

まず、アプリをライブラリにモジュール化すると、より小さなスキームを作成して、ビルド時間を改善したり、プロジェクトの一部に集中したりできます。

また、ターゲットのサブセットでより小さなスキームを使用している場合でも、プレビューのフルパワーを得ることができます。

次に、コードをライブラリにモジュール化すると、アプリのターゲットが提供していた必要なエンタイトルメントまたはInfo.plistキーを必要とするビューがあるかもしれません。

プレビューのためだけに小さなアプリを作成することで、これらのビューをプレビューできます。

方法は次のとおりです。

特定のInfo.plistキーを必要とするフォトライブラリを使用するビューを作成し、そのビューをライブラリに入れたとします。たとえば、SamplePhotoLibraryUtilitiesです。

新しいアプリのターゲットを作ることで、適切な機能でプレビューできます。

次に、必要な機能を追加します。

この場合、Info.plistキーを追加する必要があるので、ビルド設定に移動し、フォトライブラリの使用文字列をフィルタリングして設定します。

次に、作業中のビューを持つライブラリがアプリに埋め込まれていることを確認します。

ビルドフェーズタブを使用して、ターゲット依存関係として追加し、コピーファイルフェーズに埋め込みます。

これで、このプレビューアプリとライブラリだけを含むスキームを選択する準備が整いました。

ビューをプレビューすると、プレビュー用に作成したアプリが使用され、適切なInfo.plistキーがすべて配置されます。

これにより、作業中のすべてのビューをプレビューする機能を維持しながら、より速いビルド時間でより小さなスキームを利用することができます。

次に、データとアセットをプレビューに取り込む方法について話しましょう。

私はすでにこれを以前のデモに忍び込んだが、私は戻って私が何をしたかを見直したい。

フィルターをレンダリングした、先ほど見ていたビューコントローラーに戻りましょう。

プレビューを設定すると、サンプル画像を渡しました。

この画像は私のプロジェクトの資産カタログから来ています。

プロジェクトナビゲーターを公開すると、アセットカタログはここ、プレビューコンテンツフォルダ内にあります。

これらの画像は、開発中にさまざまなシナリオをテストするのに役立ち、写真でテストするすべてのデバイスを設定する必要はありません。

しかし、私は私のアプリでこれらを出荷したくありません。

開発資産と呼ばれる機能でそれを避けることができます。

これらは、私がビルド設定で設定したプロジェクト内のフォルダであり、それらのフォルダ内のものは、App Storeに提出するとアプリから削除されます。

これには、アセットカタログや、プレビューに使用するリソースが含まれる場合があります。

このPreview Contentsフォルダを開発アセットパスとして追加しましょう。

プロジェクト設定で、ビルド設定タブに移動し、開発資産をフィルタリングできます。

ダブルクリックして編集した後、パスを手動で入力したり、プレビューコンテンツフォルダをポップオーバーにドラッグしたりできます。

それを追加すると、App Storeに提出すると、このパスがアプリから削除されます。

開発アセットパスは、新しいプロジェクトやアプリのターゲットを作成すると自動的に設定されますが、追加のパスを追加したり、他のターゲットタイプや既存のプロジェクトに追加したりできます。

そのデモでは、開発アセットを使用してプロジェクトに追加することで、プレビューにアセットを提供する1つの方法を強調しています。

これは、これらすべての資産をすべてのデバイスとチーム全体で共有したい場合に最適です。

しかし、迅速に起動して実行しようとしている場合は、データと画像を提供する別の方法があります。

私たちの多くは、すでにデバイスに資産とデータを持っています。

プレビューでは、それらも活用できます。

Xcodeのシミュレータは非常に多くのことができ、ほとんどの開発のための素晴らしい出発点です。

プレビューはシミュレータでうまく機能し、物理デバイスでもうまく機能します。

アプリが最終的に出荷されるデバイスでプレビューしたいのには理由があります。

たとえば、カメラやセンサーにアクセスしたい場合です。

もう1つの理由は、あなたのデバイスにはおそらくすでに写真やファイルなど、多くの実際のデータがあるということです。

デバイスのデータを活用する方法の例をお見せしたいと思います。

私が作業中である別のビューには、iCloudフォトライブラリから写真を選択し、レイアウトを選んで新しいコラージュを作成できるボタンがあります。

他のビューで反復したのと同じ方法でテストしたいのですが、写真の素晴らしい選択があるデバイスを使用する必要があります。 

キャンバスの下部にあるプレビューデバイスピッカーを使用して、プレビューに使用するデバイスを変更します。

いくつかのオプションに飛び込みましょう。

ほとんどの場合、選択した実行先のデバイスファミリを追跡する自動モードに固執することができます。

メニューの文字通りの反対側には、Moreサブメニューがあります。

これは、デバイスウィンドウに追加したすべてのシミュレータデバイスを一覧表示するので、必要なモデルを正確に選択できます。

しかし、時には、その機能によってデバイスを選びたいだけです。

メニューの中央セクションは、一般的な機能によってデバイスを提供しているので、例えば、どのモデルがTouch IDを持っていたかを正確に覚えておく必要はありません。

しかし、私は隣でこのデバイスを使いたいので、ライブラリから大きな写真セットにアクセスできます。

プレビューデバイスピッカーには、私のMacに接続されているすべてのデバイスも含まれます。

これらの接続されたデバイスの1つを選択すると、Xcodeはシミュレータを完全にバイパスして、このデバイス専用にビルドしてプレビューします。

そして、ちょうどそのように、私は実際のデバイスで私のビューを実行しています。

しかし、それが私のデバイスにあるからといって、これまでに話したプレビューの機能を使用できないわけではありません。

私はまだキャンバスのすべてのモードを使用することができ、デバイス設定を設定することさえできます。

例えば、これはダークモードではどのように見えますか?

そして、私のコードの更新は、私のデバイスに即座に表示されます。

このビューにはナビゲーションタイトルが必要なので、コードにナビゲーションタイトルを追加し、タイトルをカスタマイズしてすぐにデバイスで確認します。

それはとても速いです!

これで、この電話のすべての画像を使用して、写真ライブラリの統合をテストする準備が整いました。

写真から追加をタップし、いくつかの写真を選択します--ああ、このリスはかわいいです--そして追加をタップします。

この景色はうまくいっています。

私の写真はレイアウトピッカーに表示され、さまざまなレイアウトをすばやくテストできます。

私はこれが大好きです。

Xcodeで編集し、私の見解を体験することは、私の携帯電話で命を吹き込むことは決して古くはありません。

そして、それはあなたのプロジェクトでプレビューを使用するための3つのヒントとコツです。

まとめるべきいくつかのこと：Preview APIは、アプリケーション全体およびすべてのプラットフォームのUIのプレビューを定義する柔軟性を提供します。

SwiftUI、UIKit、AppKit、および複数の種類のウィジェットを使用できます。

プレビューは、必要なようにプレビューを正確に設定できるように柔軟です。

サンプルデータとアセットを渡したり、コードで環境を設定したり、Xcodeの機能を利用してさまざまなデバイス設定をテストしたりできます。

また、プレビューは、キャンバス内のシミュレータの利便性であろうと、物理デバイスを使用して最高の忠実度を得たり、データや写真にアクセスしたりするなど、さまざまなデバイスでプレビューする柔軟性も提供します。

しかし、どのデバイスを選んでも、プレビューのすべての機能を利用できます。

最後に、アプリケーションの少なくとも一部をライブラリにモジュール化すると、Xcodeでスキームを作成して、ビルド時間を改善し、取り組んでいる1つのことに集中することができます。

プレビューは、あなたが創造的になるのを助けるためにここにあります。

見てくれてありがとう。