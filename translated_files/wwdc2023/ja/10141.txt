10141

♪ ♪

イアン:みなさん、こんにちは。

私はイアンで、App Storeサーバーチームのエンジニアです。

今日は、新機能や重要なアップデートなど、アプリ内購入用のサーバーAPIに関するエキサイティングなアップデートを共有します。

馴染みがない場合は、サーバー上のアプリ内購入を最大限に活用するのに役立つ2つの主要なAPIを提供しています。

1つ目はApp Store Server APIです。

サーバーからオンデマンドでApp Store Server APIを呼び出すと、アプリで行われたアプリ内購入を効果的に管理するために必要なすべてのデータが返されます。

APIは、アプリ内購入データを取得および変更するためのさまざまな強力なエンドポイントを提供します。

私たちが提供する他の主要なAPIは、App Store Server Notifications V2です。

App Store Server Notifications V2では、App Storeサーバーは、アプリで行われたアプリ内購入に関する更新をサーバーに積極的に送信します。

つまり、App Store Server APIをポーリングすることなく、分単位で更新を取得できます。

通知は、サブスクリプションの更新、有効期限、払い戻しなど、包括的な一連のイベントをカバーしています。

これらのイベントでは、アプリ内購入のライフサイクル全体を追跡できるため、ユーザーの行動をよりよく理解し、対応することができます。

App Store Server APIとApp Store Server Notifications V2は、多くの優れた機能を共有しています。

どちらもおなじみのJSON形式でトランザクションデータを提供し、データは署名されているので、Appleから来たと確信できます。

両方のAPIを使用して、StoreKit 2またはオリジナルのStoreKit APIを使用するアプリをサポートすることもできます。

そして、私たちはあなたのフィードバックに基づいて新機能でこれらのAPIを積極的にサポートしています。

本日、App Store Server APIとApp Store Server Notifications V2のアップデートの最新コレクションを発表できることを嬉しく思います。

非常に多くの新機能があるので、今日のセッションでいくつかをカバーする時間しかありません。

これらすべての新機能の詳細については、開発者ドキュメントをご覧ください。

それでは、App Storeサーバーのアップデートのこの素晴らしい選択に飛び込みましょう。

今日のアップデートを3つの部分で共有します。

まず、サーバーでのトランザクションを簡単に操作できる新機能をいくつか詳しく説明します。

次に、ユーザーのサブスクリプションのステータスを確実に判断するのに役立つApp Storeサーバー通知の機能強化について説明します。

そして最後に、古いAPIからの移行に関する重要な最新情報を提供します。

取引を始めましょう。

トランザクションは、アプリ内購入のコアデータオブジェクトです。

それらはデバイス上のアプリ内購入を表し、製品識別子、タイプ、購入日など、その購入に関する重要な情報が含まれています。

App Storeサーバーは、JWSで署名されたJSONオブジェクトを介したトランザクションを表します。

これは、App Store Server APIとApp Store Server Notifications V2全体で見られる、安全で標準化された形式です。

これらの署名されたトランザクションを取得する主な方法は、App Store Server APIのGet Transaction Historyエンドポイントを使用することです。

このエンドポイントは、アプリの特定のユーザーの完全なトランザクション履歴を返すため、過去から現在まで、ユーザーのすべての購入を最新の状態に保つことができます。

しかし、アプリからサーバーへの呼び出しなど、サーバーがすでにトランザクションを認識している場合があります。

サーバー側では、そのトランザクションをさらに検証し、最新の情報を持っていることを確認することをお勧めします。

以前は、このユースケースでは、トランザクション履歴を取得を呼び出し、一致するトランザクションの応答をふるいにかける必要がありました。

見つかったら、応答のデータを使用してトランザクションの記録を更新できます。

特に、ユーザーのトランザクション履歴が複数のページにまたがり、エンドポイントへの複数の呼び出しが必要な場合、このプロセスは退屈に感じるかもしれません。

また、完了した消耗品トランザクションを探している場合も、トランザクション履歴の取得応答に表示されないため、機能しません。

このユースケースは、単により具体的な解決策を要求します。

そのため、今日、このユースケースに直接対処する新しいエンドポイントを導入します。

新しいGet Transaction Infoエンドポイントを使用すると、1回の購入で署名されたトランザクション情報を要求でき、提供する必要があるのはtransactionIdだけです。

製品の種類やユーザーのデバイス上のトランザクションの終了ステータスに関係なく、すべてのトランザクションIDがサポートされています。

そうです、このエンドポイントから完成した消耗品を取得することもできます。

新しいエンドポイントがどのように機能するかを簡単に見てみましょう。

パスパラメータとしてtransactionIdを含め、App Storeサーバー上のこの新しいエンドポイントにGETリクエストを送信します。

signedTransactionInfo文字列を含む応答を受け取ります。

signedTransactionInfoをデコードすることで、リクエストで指定したIDのトランザクション情報を表示できます。

そして、それだけです。

新しいGet Transaction Infoエンドポイントは非常にシンプルですが、サーバー上でトランザクションを操作する際の柔軟性が向上します。

さまざまなユースケースに役立つと思います。お役に立てばできます。

さて、その柔軟性のテーマを取り、さらに拡張しましょう。

App Store Server APIのこれらの一般的なエンドポイントに精通しているかもしれません。

これらの各エンドポイントには、パスパラメータとしてoriginalTransactionIdが必要です。

このIDは、どのユーザーにデータを要求または送信しているかをサーバーに示します。

しかし、あなたはいつもオリジナルのTransactionIdを手元に持っているとは限りません。

あなたが持っているのがトランザクションIDだけの場合はどうなりますか?

元のTransactionIdを取得するために、新しいGet Transaction Infoエンドポイントに送信できますが、なぜあるエンドポイントを呼び出して別のエンドポイントを呼び出すのですか?

代わりに、今日から、任意のtransactionIdでこれらのエンドポイントを呼び出すことができます。

以前と同じように、リクエストのパスにIDを入力するだけです。

このより大きな柔軟性により、App Store Server APIのこれらのコアエンドポイントの呼び出しがこれまで以上に簡単になることを願っています。

そして、すでにこれらのエンドポイントをoriginalTransactionIdsで呼び出している場合は、心配しないでください、それらも引き続き機能します。

では、App Storeサーバー通知のアップデートに切り替えましょう。

アプリが自動更新サブスクリプションを提供している場合は、それらのサブスクリプションのステータスと時間の経過とともにどのように変化するかを追跡することが重要です。

ここでは、サブスクリプションの5つの可能なステータスを確認できます。

App Store Server Notifications V2では、このステータスの変更につながるイベントのプロンプト通知を受け取るため、適切なタイミングでコンテンツをすばやく有効または無効にし、スムーズなユーザーエクスペリエンスを維持できます。

通知がサブスクリプションのステータスに関する知識をどのように知らせることができるかを見てみましょう。

多くの通知イベントは、そのタイプとサブタイプを通じてサブスクリプションのステータスを直接示します。

たとえば、サブタイプINITIAL_BUYを使用したこのSUBSCRIBED通知を考えてみましょう。

この通知は、製品の新しいサブスクリプションを示すので、サブスクリプションのステータスがアクティブであることがわかります。

これは、通知タイプがEXPIREDであるさらに簡単な例です。

これは、関連するサブスクリプションのステータスが期限切れになったことを明確に示しています。

しかし、一部の通知では、サブスクリプションのステータスがそれほど明確ではないかもしれません。

例えば、この払い戻し通知を考えてみましょう。

この通知タイプは、アプリで行われたアプリ内購入の払い戻しが認められたときに送信されます。

この通知のsignedTransactionInfoを確認すると、どの購入が返金されたかがわかります。

この場合、払い戻しは自動更新サブスクリプションのものだったため、サブスクリプションのステータスの記録を更新したいと思います。

ステータスが「Revoked」になったと仮定するのは魅力的かもしれませんが、必ずしもそうとは限りません。

同じ元のTransactionIdで最近のサブスクリプション更新購入がある場合、サブスクリプションのステータスは引き続きアクティブである可能性があります。

その場合は、サブスクリプションコンテンツへのアクセスを無効にすべきではありません。

この状況では、サブスクリプションのステータスは単に不明確であり、通知のデータだけでは更新するのに十分ではありません。

これは理想的ではありません。

サブスクリプションのApp Storeサーバー通知を受け取ったら、サブスクリプションの最新のステータスを明確に表示して、この重要な情報をサーバーで最新の状態に保つことができます。

そのため、今日、App Store Server Notifications V2のデータオブジェクトに新しいステータスフィールドを導入しています。

このフィールドは、先ほど詳しく説明したサブスクリプションの5つのコア状態の1つを示す単純な整数です。

この新しいフィールドは、自動更新サブスクリプションに送信するすべての通知に含まれます。

これで、App Store Server APIのGet All Subscription Statusesエンドポイントを呼び出すことなく、サブスクリプションのステータスを取得できます。

この新しい分野が、先ほど説明したシナリオをどのように改善するか見てみましょう。

サブスクリプションの払い戻し通知を受け取ったら、ステータスフィールドを確認するだけで、サブスクリプションのステータスを把握できます。

この場合、それは1なので、関連するサブスクリプションがアクティブであることを知っています。

新しいステータスフィールドにより、App Store Server Notificationsがこれまで以上に便利になり、1つも見逃さないようにすることができます。

しかし、サーバーが停止した場合、App Storeのサーバーは通知を送信するために到達できない可能性があります。

そのため、App Store Server APIのGet Notification Historyエンドポイントを提供しています。

このエンドポイントでは、App Storeサーバーがアプリ用に生成したバージョン2の通知を過去6か月まで要求できます。

そうすれば、サーバーに既知の停止がある場合、停止期間にこのエンドポイントを呼び出して、サーバーが見逃した通知を取得できます。

しかし、いくつかのユースケースでは、このプロセスはあまり効率的に感じられないかもしれません。

一時的なネットワークの問題など、サーバーが停止の外でも通知を見逃すことがあります。

この状況では、エンドポイントを照会する明確な期間がない可能性があり、サーバーがすでに受信した通知のページをふるいにかけることができます。

このユースケースに対処するために、「onlyFailures」という通知履歴を取得するための新しいリクエストフィールドを導入しています。

このオプションのフィールドは、サーバーに到達できなかった通知のみに返される通知を制限します。

応答には、現在再試行プロセス中の通知も含まれます。

これで、サーバーがまだ見ていない通知を解析するだけでよいので、停止や時折のネットワークの問題からはるかに速く回復できます。

この新しい分野がどのように機能するかを見てみましょう。

通知履歴の取得エンドポイントにリクエストを送信し、リクエスト本文に新しいフィールドonlyFailuresを含めます。

これが返事です。

notificationHistory配列の各エントリは通知を表しており、リクエストに新しいonlyFailuresフィールドを含めたため、ここにリストされているすべての通知がサーバーに到達できませんでした。

1つの通知エントリにズームインしましょう。

ここに署名されたPayloadがあります。

最初にサーバーに送信されたのと同じように、この文字列をデコードして通知の内容を表示できます。

この通知のsendAttempts配列を見ると、各送信試行の結果を確認できます。

この配列には最大6つのエントリを含めることができ、最初の送信試行には1つ、再試行には最大5つのエントリが含まれます。

ここでは2つのエントリしか表示され、両方とも失敗したので、通知はまだ再試行プロセスにある必要があります。

後で再試行が成功すると、onlyFailuresフィールドを含む後続のリクエストに対して、この通知は表示されなくなります。

それが新しいonlyFailuresフィールドの仕組みです。

通知履歴の取得がさらに便利になると思います。

最後に、古いAPIからの移行に関する重要なアップデートです。

アプリがしばらくの間アプリ内購入を提供している場合は、verifyReceipt APIに精通している可能性があります。

2021年には、App Store Serverからアプリ内購入データを取得する新しい方法として、App Store Server APIをリリースしました。

これら2つのAPIを比較してみましょう。

verifyReceiptを使用すると、StoreKitのオリジナルバージョンを実行しているクライアントから受け取った領収書を検証およびデコードできます。

App Store Server APIを使用すると、これら3つのエンドポイントを使用して、領収書などにあるのと同じデータをすべて取得できます。

また、App Store Server APIは、他では見られない便利なデータと強力な機能を提供するさまざまな追加エンドポイントも提供します。

通知APIに移行しても、古いApp Store Server Notifications V1を引き続きサポートしています。

しかし、2021年には、App Store Server Notifications V2を導入しました。

では、これらのAPIを比較してみましょう。

App Storeサーバー通知V1とV2は、どちらもサーバーに直接送信されるリアルタイムのアプリ内購入イベントを提供します。

しかし、V2は、タイプとサブタイプの両方を使用してイベントを定義することで、より明確になります。

そして、違いはそこで止まりません。

V2は、追加のイベントの通知、テスト通知を要求する機能、通知履歴へのアクセス、およびユーザーのサブスクリプションの状態を追跡するための真新しいステータスフィールドも提供します。

App Store Server APIとApp Store Server Notifications V2を採用することで、サーバー上のアプリ内購入データを安全かつ効率的に管理するための幅広い新機能のロックを解除できます。

最終的には、それはあなたの顧客のためのより良いアプリ内購入体験を意味します。

そのため、本日、verifyReceiptとApp Store Server Notifications V1の廃止を発表します。

今日から、これらのAPIは非推奨と見なされ、機能の更新を受け取らない。

新しいAPIのすべての利点を享受するために、今すぐ移行の計画を始めましょう。

移行には、いくつかの短いステップが必要です。

verifyReceiptからApp Store Server APIに移行するには、まずアプリを表すJWTに署名する必要があります。これは、ドキュメントで概説されている簡単なプロセスです。

App Store Server APIを呼び出すたびに、このJWTをヘッダーとして提供します。

要求されたアプリデータを所有していることを証明します。

次に、ユーザーごとにトランザクションIDを保存する必要があります。

トランザクション履歴の取得やすべてのサブスクリプションステータスの取得など、コアエンドポイントを呼び出すたびに、このtransactionIdをパスパラメータとして提供します。

どのトランザクションIDでも機能します。

データベースを維持している場合は、すでに保存されている可能性があります。

それ以外の場合は、各ユーザーの領収書から1つを抽出できます。

そして、それだけです。

その後、verifyReceiptなどから取得するために使用したすべてのデータにアクセスできます。

App Store Server Notifications V1からV2への移行はさらに簡単です。

まず、新しいV2フォーマットを解析するためにサーバーを準備します。

すでにApp Store Server APIを使用している場合、App Store Server Notifications V2は同じJWSトランザクション形式を使用しているため、この手順は簡単である必要があります。

サーバーの準備ができたら、App Store Connectにアクセスして、設定をV1からV2通知に変更してください。

実装をテストするには、サンドボックスでのみバージョン2の通知を受け取ることから始めることができます。

設定を切り替えた後、App StoreサーバーはV2形式で新しい通知の送信を開始します。

再試行プロセス中にV1通知がある場合は、最大3日間引き続き受け取ることができます。

移行に関するさらなる支援については、追加のリソースが利用可能です。

App Store Server APIとApp Store Server Notifications V2はサンドボックス環境で利用できるため、本番環境に展開する前に実装をテストできます。

そして今週、App Store Server APIを呼び出してApp Store Server Notifications V2を解析するための新しいオープンソースライブラリであるApp Store Server Libraryをリリースします。

エンドポイントに簡単に電話をかけたり、受信した署名付きデータを確認したり、領収書からtransactionIdを抽出して移行を容易にするのに役立ちます。

今年のWWDCでの「Meet the App Store Server Library」というタイトルの専用セッションをチェックしていただければ幸いです。

また、移行方法の詳細については、「アプリ内購入の統合と移行を探る」というタイトルのWWDC22セッションを参照してください。

これで、このセッションのApp Store Serverのアップデートは終了です。

今日発表した素晴らしい新機能を活用し、レビューする時間がなかったさらに多くの機能については、ドキュメントをチェックしてください。

すべての機能がサンドボックスと本番の両方で利用できるようになったので、まずサンドボックスでテストし、準備ができたらいつでも本番サーバーに展開できます。

そして、私たちはあなたから話を聞きたいです。

App Storeサーバーの機能リクエストがある場合は、Appleのフィードバックアシスタントからお知らせください。

WWDC23に参加してくれてありがとう!

♪ ♪