10036

♪ ♪

アリソン:みなさん、こんにちは。

私の名前はアリソンで、アクセシビリティエンジニアです。

今日は、アプリをよりアクセスしやすくするエキサイティングな新しい方法について話します。

アップルでは、アクセシビリティは、誰もがテクノロジーへのアクセスに値すると信じているので、私たちが構築するすべてのものの不可欠な部分です。

私たちは、あなたがあなたのアプリにアクセスできるようにすることを非常に簡単にしたいと考えています。

過去1年間、私たちは誰もがあなたのアプリで可能な限り最高の体験をできるように、多くの機能強化に取り組んできました。

このセッションでは、人々が新しいエキサイティングな方法であなたのアプリと対話できるAPIを探ります。

次に、SwiftUIアプリのコンテンツのアクセシビリティビジュアルを改善する方法について説明します。

最後に、UIKitでアクセシビリティ属性を最新の状態に保つためのより良い方法を学びます。

アクセシビリティの強化について話すことから始めましょう。

私は写真編集アプリに取り組んでいます。

私のアプリでは、ライブラリやカメラからの写真にクールな画像変更を追加できます。

さまざまなフィルターを適用したり、写真の色合いの色を変更したり、アプリのピアノキーボードを使用して画像とペアリングするカスタムサウンドを作成したりできます。

アプリに統合できるアクセシビリティの強化についていくつか話し合いましょう。

私の写真アプリのフィルターページには、オンとオフのステータスを持つカスタムボタンがあります。

「フィルター」スイッチボタンを使用すると、画像フィルターのオンとオフを切り替えることができます。

システムは、このカスタムUIの正しいアクセシビリティのヒントとタイトルを知らないため、他のシステムトグルと一致するアクセシビリティ体験を確実に提供したいと考えています。

これは、新しいアクセシビリティ特性であるisToggleが役立つところです。

フィルターボタンを表す構造体があります。

構造体の本文で、押されたときにフィルターを切り替えるボタンを作成します。

ボタンの色は、フィルター状態変数に基づいて更新されます。

accessibilityAddTraits修飾子のフィルターボタンにisToggleトレイトを追加します。

isToggleは、適切なアクセシビリティのヒントと「切り替えボタン」の説明を提供します。

VoiceOver: フィルター、スイッチボタン。

ダブルタップして設定を切り替えます。

アリソン：新しいトグル特性はUIKitでも利用可能です。

viewDidLoadメソッドでは、ボタンビューを設定します。

次に、ボタンのaccessibilityTraitsプロパティを.toggleButtonを含むように設定します。

写真フィルターアプリで、写真ナビゲーションバーボタンに新しいアナウンスを追加して、写真ビューが読み込まれていることを人々に知らせたい。

アクセシビリティ通知は、これを行うのに役立つ新しいAPIです。

アクセシビリティ通知は、アプリで支援技術を使用して誰かに情報を伝えるためのアナウンスを作成するための統一されたマルチプラットフォームの方法を提供します。

SwiftUI、UIKit、AppKitを実行しているアプリのアクセシビリティ通知を作成できます。

AccessibilityNotificationを使用すると、Swiftネイティブの方法でアナウンス、レイアウト変更、画面変更、ページスクロール通知を送信できます。

写真ツールバーのボタンが押されたら、アナウンスを投稿したいです。

VoiceOver: 写真、ボタン。

写真。写真ビューを読み込んでいます。

アリソン：ツールバーボタンのアクションでアナウンスを投稿できます。

アナウンスを作成するには、「Loading Photos View」を文字列パラメータとしてAccessibilityNotification.Announcementを使用できます。

アプリでは、カメラのナビゲーションバーボタンが押されたときに3つのアナウンスも作成したいです。

最初の発表「Opening Camera」と3回目の発表「Camera Active」が最も重要です。

アナウンスのVoiceOverの現在のスピーチパターンを見てみましょう。

2回目の発表「カメラローディング」が「オープンカメラ」を中断する方法に注目してください。

VoiceOver: カメラ、ボタン。

完了。オープン--カメラ--カメラアクティブ。

アリソン：SwiftUIとUIKitでは、アナウンスの優先順位を設定することもできます。これにより、支援技術によって話されるアナウンスの重要性を設定できます。

これにより、時間内に話さなければ無視できるアナウンスと比較して、人々が聞く必要があるアナウンスをより詳細に制御できます。

この情報の重要性は、高、デフォルト、低の3つの発表優先順位のいずれかを使用して指定できます。

優先度の高い発表は、他のスピーチを中断する可能性があり、一度開始すると中断することはできません。

デフォルトの優先度アナウンスは、既存のスピーチを中断することができますが、新しいスピーチ発話が開始された場合は中断可能です。

新しいアナウンスが開始されない場合、優先順位の低いアナウンスは、他の発話が完了したときにキューに入れられ、話されます。

写真アプリでは、アナウンス優先度を使用して割り込み文字列を修正できます。

帰属文字列から3つの発表があります。

SwiftUIでは、accessibilitySpeechAnnouncementPriority文字列プロパティの優先順位を設定します。

2回目の発表「カメラローディング」は最も重要ではないので、優先順位を下げます。

最後の発表「Camera Active」が最も重要であるため、優先度が高いことを望んでいます。

次に、帰属文字列をAccessibilityNotificationに渡します。

まず、デフォルトの優先順位の発表、次に低優先順位、次に高優先順位を発送します。

次に、低優先度のアナウンスがデフォルトの優先度のアナウンスを中断しないのに対し、優先度の高いアナウンスがデフォルトと低のアナウンスを中断することに注意してください。

VoiceOver: カメラ、ボタン。

完了。オープニングカメラ - カメラアクティブ。

アリソン：UIKitで同じ発表順序を実現できます。

発表の優先順位をNSAttributedStringキー値のペアとして設定します。

キーUIAccessibilitySpeechAttribute AnnouncementPriorityを使用し、値を適切なUIAccessibilityPriorityに設定します。

次に、属性を属性文字列初期化子に渡します。

アプリに戻ると、人々が物理的にタッチしたり、ピンチしたりしてズームインしたり縮小したりできる画像ビューがあります。

支援技術をオンにすると、この物理的なタッチやピンチジェスチャーは達成するのが難しい場合があります。

現在、アクセシビリティズームアクションにより、支援技術が有効になっている場合、人々はUI要素をズームインおよびズームアウトできます。

画像にズームアクションを追加します。

画像はZoomingImageView構造体の本文にあります。

まず、accessibilityZoomAction修飾子を追加します。

次に、ズームアクションの方向に基づいて、コンテンツをズームインまたはズームアウトし、アクセシビリティ通知の発表を投稿します。

それでは、これらの変更でVoiceOverのズーム機能を探りましょう。

VoiceOver: ズーム画像ビュー、画像。

ズーム。

2倍ズーム。3倍ズーム。

4倍ズーム。3倍ズーム。

アリソン：UIKitにズーム特性とアクションを追加することもできます。

まず、画像ビューを含むズームビューを作成します。

次に、画像トレイトと一緒にズームビューにsupportsZoomトレイトを追加します。

次に、accessibilityZoomInAtPointとaccessibilityZoomOutAtPointを実装し、それぞれがズームの成功または失敗を示すブール値を返します。

これらの各方法では、ズームスケールを更新し、ズームの変更を示すアナウンスを投稿します。

画像フィルターアプリでは、小さなピアノキーを演奏して画像に追加する短いサウンドを作成することもできます。

人々はキーを使用して画像のカスタムトーンを作成できます。

トーンを作ろうとして、これらのサウンドで現在のVoiceOver体験を調べてみましょう。

VoiceOverはキーラベルを話し、要素に触れるたびにVoiceOverの起動音を再生するため、キーを連続してすばやく押すことが困難になります。

通常、VoiceOverは安全な探索体験を提供しますが、時には、人々はアプリを適切に使用するためにアプリと直接やり取りする必要があります。

私たちのアプリでは、人々が余分なスピーチや音なしでピアノのキーに直接触れることができれば、はるかに良いでしょう。

これは、私たちの見解では、allowsDirectInteractionという名前のダイレクトタッチ特性を採用するのに最適な時期です。

アクセシビリティダイレクトタッチエリアでは、VoiceOverジェスチャーがアプリに直接通過する画面の領域を指定できます。

デフォルトの状態では、VoiceOverは直接タッチ要素のコンテンツを話したりアクティブにしたりします。

しかし、私たちのアプリでは、誰かがピアノのキーに触れたときにVoiceOverがサイレントになっているので、最初にピアノのキー要素をアクティブにすることなく、すぐにトーンを聞くことができるのは素晴らしいことです。

allowsDirectInteraction特性に加えて、サポートされる2つの新しいダイレクトタッチオプションが追加されました。

まず、アプリが独自のオーディオフィードバックを作成できるように、直接タッチ領域に触れるときにVoiceOverがサイレントであることを確認するために、silentOnTouchを指定できます。

第二に、requiresActivationを指定して、タッチパススルーが発生する前に、ダイレクトタッチエリアにVoiceOverが要素をアクティブにするようにすることができます。

これはKeyboardKeyViewのコードスニペットです。

各キーは、指定されたサウンドを再生する長方形です。

毎回トーンで話すVoiceOverの問題を解決するために、ボタンのダイレクトタッチオプションをタッチ時にサイレントに設定しました。

これで、VoiceOverの音声から干渉されることなく、VoiceOverがキーボタンに到達すると、正しいトーンが再生されます。

UIKitに新しいダイレクトタッチオプションを追加することもできます。

キーボタンをUIButtonとして作成できます。

次に、allowsDirectInteractionのアクセシビリティ特性を追加します。

この特性は、UIKitでアクセシビリティダイレクトタッチオプションを設定する場合に必要です。

最後に、accessibilityDirectTouchOptionsのsilentOnTouchオプションを追加します。

アクセシビリティトグル特性、アナウンス優先度、ズーム特性、ダイレクトタッチオプションを使用すると、支援技術がSwiftUIおよびUIKitアプリと対話する方法をより詳細に制御できます。

次に、SwiftUIのアクセシビリティコンテンツシェイプの種類について話しましょう。

この種類は、アクセシビリティ要素のパスを設定し、画面上のアクセシビリティ要素の外観を制御します。

以前は、インタラクションコンテンツの形状の種類は、アクセシビリティの形状を変更し、テストの形状をヒットしました。

現在、ヒットテストの形状に影響を与えず、アクセシビリティコンテンツの形状にのみ影響するアクセシビリティコンテンツの形状の種類があります。

要素が円などのカスタムシェイプを必要とする場合、計算されたアクセシビリティカーソルビジュアルが画面上の他のアイテムを妨げる可能性があります。

この例では、アクセシビリティパスは正方形で、赤い円形のコンテンツと一致しません。

アクセシビリティコンテンツシェイプの種類がビューに適用されると、修飾子によって提供されるシェイプで要素の基礎となるアクセシビリティジオメトリを更新します。

これにより、既存のSwiftUIシェイプで要素のパスをすばやく更新できます。

円の画像を使って円ボタンを作成しました。

フレームとアクセシビリティラベルは、赤の色に合わせて設定できます。

最後に、アクセシビリティタイプとサークルを図形として、コンテンツ図形修飾子を私のビューに追加できます。

これで、アクセシビリティパスは赤い色のボタンの円形に正しく一致します。

最後に、UIKitのアクセシビリティ、ブロックベースの属性セッターの追加について話し合いましょう。

写真編集アプリでは、画像ビューのアクセシビリティ値が、写真がフィルタリングされているかどうかを表すようにしたい。

これで、私のビューの基礎となるアクセシビリティ属性を常に提示されたUIに沿った状態に保つ簡単な方法があります。

アクセシビリティブロックベースのセッターでこれを行うことができます。

新しいアクセシビリティブロックAPIを使用すると、値を直接保存するのではなく、属性が必要なときに評価されるクロージャを提供できます。

閉鎖は、ビューが支援技術によって参照またはアクセスされるたびに再評価されます。

ビューコントローラーのviewDidLoadメソッドで作成されたクロージャで物事を簡素化できます。

zoomViewにaccessibilityValueBlockプロパティを設定して、画像がフィルタリングされているかどうかに基づいて値を最新の状態に保ちます。

クロージャは、オプションの文字列であるこの属性の正しい型を返す必要があります。

保持サイクルを避けるために、自己への弱い参照を使用していることに注意してください。

ブロックは、適切なアクセシビリティ属性情報を使用してクラスを開始するために、クラスライフサイクルの開始時に追加するのに最適です。

アクセシビリティ属性のメンテナンスがはるかに簡単になりました。

誰かがVoiceOverカーソルを新しい要素に移動するたびに、VoiceOverは最初にクロージャで設定された属性を回収し、クロージャを再評価します。

カスタムUIを構築するときは、トグルなどのアクセシビリティ特性とダイレクトタッチインタラクションなどの機能を統合して、すべての人の使いやすさを高めることを検討してください。

第二に、SwiftUIのカスタムシェイプであなたの見解について考えてください。

アクセシビリティシェイプがUIと一致しない場合は、カスタムアクセシビリティシェイプの導入を検討してください。

そして最後に、アクセシビリティ属性をどのように設定しているかを評価し、ブロックベースのセッターがアプリでより理にかなっているかどうかを特定することをお勧めします。

アップルでは、アクセシビリティは人権であると信じています。

あなたの助けを借りて、私たちはすべての人の生活を向上させ、力を与える技術を創造することができます。

これらの新しいAPIの追加は、支援技術に依存する人々のためのアプリの使いやすさを高めるための素晴らしい方法であり、私はあなたが素晴らしい、アクセス可能なアプリを構築するためにそれらのすべてを使用することをお勧めします。

見てくれてありがとう。