10056

♪ ♪

マイケル:こんにちは、ようこそ。

私はマイケル・オクスです。このビデオでは、より良いドキュメント中心のアプリを構築する方法について話します。

ドキュメント中心のアプリは、特にiPadの生産性ツールの大きな部分を占めています。

ドキュメント中心のアプリには3つのタイプがあります。

ファイルアプリなどのドキュメントの閲覧を許可するもの、クイックルックなどのコンテンツの表示を許可するもの、Pages、Keynote、Numbersなどのコンテンツの編集や作成も許可するもの。

このビデオは、ビューアとエディタアプリの改善に焦点を当てていますが、議論されたコンテンツの一部はブラウザアプリにも適用されます。

iPadOS 17では、アプリで多数の機能を自動的に有効にする新しいビューコントローラーが導入されています。

iPadOS 16で導入されたデスクトップクラスのiPad APIと、既存のドキュメント中心のAPIとうまく連携します。

この新しいビューコントローラーは、モジュラー方式で構築されています。

あなたは素晴らしいシステムのデフォルトを取得しますが、個々の動作をカスタマイズできます。

デスクトップクラスのiPad APIに追いつくには、WWDC22の「デスクトップクラスのiPadに出会う」と「デスクトップクラスのiPadアプリを構築する」をチェックしてください。

SwiftUI開発のために、DocumentGroupは追加のコードなしでこれらすべての機能をサポートするようになりました。

このSwiftUI側の詳細については、WWDC20の「SwiftUIでドキュメントベースのアプリを構築する」とWWDC22の「iPadのSwiftUI：ツールバー、タイトルなどを追加する」をチェックしてください。

UIKitでは、機能はオプトインです。

UIDocumentViewControllerは、コンテンツビューコントローラーの新しい基本クラスです。

UIDocumentと連携して、ナビゲーションバーを自動的に設定します。

これにより、共有、ドキュメントのドラッグ、取り消しとやり直しのサポートなどの機能が可能になります。

また、自動名前変更もサポートしています。

このビデオでは、UIDocumentの使い方と、UIDocumentViewControllerでドキュメントを提示する方法を学びます。

次に、どの機能が組み込まれているか、さらにカスタマイズする方法について説明します。

最後に、UIDocumentを利用するために既存のアプリを移行するためのベストプラクティスをいくつか探ります。

まず、ドキュメントを作成します。

すべてのドキュメントベースのアプリのコアはUIDocumentです。

これは、アプリがサポートするファイルタイプごとにサブクラス化されることを意図した抽象基本クラスです。

すべてのUIDocumentsはURLによってバックアップされています。

ディスク上のファイルは最も一般的ですが、データベースとカスタムURLスキームを使用してドキュメントを保存して読み込むこともできます。

UIDocumentのロードとセーブ操作は非同期であり、必要に応じて長い読み取りおよび書き込み操作を可能にします。

このため、UIDocumentはスレッドセーフであり、ロックとキューを介してアクセスを調整します。

UIDocumentサブクラスを実装する場合、ドキュメントのロードと保存、およびドキュメントのコンテンツへのアクセスを提供するという2つの主な責任があります。

読み込みと保存は、すべてのドキュメントで非常によく似ています。

コンテンツへのアクセスは、ドキュメントの種類とアプリでの使用方法により具体的です。

たとえば、マークダウンエディタのドキュメントモデルは、単一のテキストプロパティしか持つ場合があります。または、ドキュメントの個々の部分を更新できるより複雑なインターフェイスを公開する可能性があります。

コンテンツへのアクセスについてもっと話す前に、読み込みと保存について話しましょう。

シンプルなファイルベースのドキュメントの場合、オーバーライドできる便利な方法が2つあります。

ドキュメントが開くと、ファイルの内容とともに「loadFromContents:ofType:」が呼び出されます。

ドキュメントが保存されているときに、ドキュメントの現在のコンテンツを取得するために「contentsForType:」が呼び出されます。

ドキュメントの内容は、通常のファイルのデータオブジェクト、または他のすべてのファイルのFileWrapperです。

ファイルタイプとその仕組みの詳細については、Tech Talkの「Uniform Type Identifiers -- a reinduction」をご覧ください。

たとえば、このドキュメントは通常のマークダウンファイルを扱っているため、データオブジェクトを期待しています。

さて、完全な制御が必要な場合は、「saveToURL:forSaveOperation:」と「readFromURL:」をオーバーライドすると、URLへのフルアクセスが可能になり、すべての読み書きがあなたに残されます。

これは、ドキュメントをデータベースに保存したい場合や、ドキュメントの読み書きに特別な要件がある場合に最適です。

保存操作は非同期ですが、メソッドが戻るまでに読み取りが完了することが期待されることに注意してください。

そして、これがドキュメントの読み込みと保存のすべてです。

それでは、文書の内容にアクセスする方法があることを確認しましょう。

ドキュメントのコンテンツへのアクセスを提供する簡単な方法は、そのコンテンツのプロパティを追加することです。

この例では、完全なマークダウン文字列を含む単一のテキストプロパティを追加します。

このプロパティは、前のスライドで説明したように、ドキュメントを最初に読み込むときに設定されます。

アプリは、ユーザーがドキュメントを編集するたびにこのテキストを更新できます。

UIDocumentがいつ保存する必要があるかを知るには、プロパティが更新されるたびに「updateChangeCount:」を呼び出します。

「updateChangeCount:」を呼び出すと、UIDocumentはドキュメントをニーズ保存としてマークし、適切なタイミングで自動的に保存できます。

次に、新しいUIDocumentViewControllerでドキュメントを提示します。

UIDocumentと同様に、UIDocumentViewControllerもサブクラス化される抽象的な基本クラスです。

ドキュメントの開始、保存、および終了を管理し、関連するドキュメントからの情報をナビゲーション項目に入力します。

これには、タイトル、ナビゲーション項目のタイトルメニュー、UIDocumentPropertiesオブジェクト、および名前変更デリゲートが含まれます。

UIDocumentViewControllerは、取り消しややり直しなどの一般的なアクションのキーコマンドも提供します。

UIDocumentViewControllerサブクラスを実装する方法を見てみましょう。

サブクラスによってオーバーライドされるように設計された2つのメソッドがあります。

ビューコントローラーに関連付けられたドキュメントが開かれたとき、またはすでに開いているドキュメントがビューコントローラーに割り当てられたとき、「documentDidOpen」が呼び出されます。

ビューコントローラーのビューを入力して、この方法でドキュメントの内容を表示します。

「documentDidOpen」が呼び出されてから、ビューコントローラーのビューが読み込まれるときの間には、タイミング保証がないことに注意してください。

堅牢なコードを書くための良いアプローチは、独自のメソッドでビュー設定を移動し、「documentDidOpen」と「viewDidLoad」の両方から呼び出すことです。

ビューを設定する前に、ビューが読み込まれ、ドキュメントが開いているかどうかを確認してください。

オーバーライドする2番目の方法は「navigationItemDidUpdate」です。

UIDocumentViewControllerがナビゲーション項目に変更を加えるたびに、このメソッドを呼び出します。

そこにナビゲーションアイテムのカスタマイズを追加します。

「UIDocumentViewController」は、可能な限り変更を永続化するために、変更を最小限に抑えるために最善の努力をします。

UIDocumentViewControllerは「undoRedoItemGroup」も提供しています。

取り消しボタンとやり直しボタンを表示したい場合は、このグループをナビゲーションバーに入れ、ドキュメントに取り消しマネージャーが割り当てられていることを確認してください。

UIDocumentViewControllerは、取り消しマネージャーの可用性に応じて、このグループの「非表示」プロパティを変更し、必要に応じてグループ内のボタンを有効または無効にします。

UIDocumentViewControllerは自動的にドキュメントを開いたり閉じたりします。

ただし、ビューコントローラの外部からドキュメントにアクセスする必要がある場合は、「openDocumentWithCompletionHandler」を呼び出します。

UIDocumentViewControllerは、「documentDidOpen」を呼び出すなど、必要なすべてのコールバックを行い、準備ができたら完了ハンドラを呼び出します。

最後になりましたが、UIDocumentViewControllerはドキュメントプロパティを提供します。

このプロパティは、常にビューコントローラーに関連付けられたドキュメントを参照します。

初期化中にドキュメントを提供できますが、完全にオプションです。

ビューコントローラに関連付けられたドキュメントがない場合、自動的に空の状態が表示されます。

空の状態の設定の詳細については、「UIKitの新機能」をチェックしてください。

さらに、UIDocumentViewControllerはアプリのルートビューコントローラーとして使用できます。

階層にブラウザビューコントローラーがない場合、UIDocumentViewControllerはドキュメントピッカーを開くナビゲーションバーにドキュメントボタンを置きます。

これには、アプリのinfo.plistで関連するファイルタイプのキー「UIDocumentClass」を宣言し、そのファイルタイプに一致するUIDocumentサブクラスに設定する必要があります。

iPadOS 17では、UIDocumentは「UINavigationItemRenameDelegate」に準拠しており、ユーザーがタイトルメニューから名前の変更を呼び出すと、基礎となるファイルの変更を単独で処理します。

UIDocumentViewControllerを使用している場合は、自動的に名前の変更を設定します。それ以外の場合は、ドキュメントをナビゲーションアイテムの名前変更デリゲートとして手動で設定できます。

これらは、iPadOS 17で素晴らしいドキュメント中心のアプリを作成するために必要なすべての部分です。

次に、既存のアプリを移行する方法。

新しいUIDocumentViewControllerを使用するためのアプリの移行は簡単で、3つのステップしか必要としません。

まず、コンテンツビューコントローラーの基本クラスを更新します。

次に、既存のコードを新しいコールバックに移動します。

そして第三に、不要になったコードを削除します。

デスクトップクラスのiPadアプリのビデオで使用しているマークダウンエディタの例を変換する方法を見てみましょう。

あなたがそれに慣れていないなら、心配しないでください。

まず、既存のコードの関連部分を順を追って説明します。

したがって、ここでは、上部にビューコントローラの定義、それが定義するドキュメントプロパティ、および最初のドキュメントを設定し、ドキュメントにコールバックを追加するinitメソッドがあります。

まず、基本クラスをUIDocumentViewControllerに変更します。

このクラスはUIDocumentViewControllerを継承しているため、プロパティ「document」が別のタイプのスーパークラスにすでに存在するため、コンパイラエラーが発生します。

そのプロパティの名前を「markdownDocument」のようなより具体的なものに変更します。

次に、このビューコントローラで使用される特定のドキュメントクラスに汎用ドキュメントプロパティをキャストする計算プロパティにします。

このコードの最後のビットは初期化子です。

まだ必要な唯一のコードは、ドキュメントにコールバックを割り当てることです。

ドキュメントはこのビューコントローラの存続期間中に変更できるため、ドキュメントが変更されるたびに実行するようにこれを移動します。

これを行う簡単な方法は、ドキュメントプロパティをオーバーライドし、didSetコールバックを追加することです。

素晴らしい、基本クラスが最新になったので、新しいコールバックを処理する必要があります。

「viewDidLoad」では、ナビゲーションバーにボタンを追加し、ツールバーのカスタマイズを許可するように設定します。

UIDocumentViewControllerの場合、これを新しいコールバック「navigationItemDidUpdate」に移動します。

次に、私たちのクラスにはすでに「didOpenDocument」というメソッドがあります。

これは、UIDocumentViewControllerもほとんど持っているものです。

メソッドの名前を変更し、ドキュメントがオプションになったという事実を調整するだけです。

さて、次に私たち全員が最も楽しんでいる部分：コードの削除。

エディタビューコントローラは「UINavigationItemRenameDelegate」に準拠していますが、もう必要ありません。

UIDocumentは、すべての名前を自動的に変更します。

したがって、デリゲート定義、すべてのコードを含むデリゲートメソッド、および「renameDelegate」の割り当てを削除します。

次に、さらにいくつかのナビゲーションアイテムのカスタマイズを削除できます。

「スタイル」と「バックアクション」の両方がドキュメントビューコントローラーによって自動的に設定されるため、これを完全に取り除くことができます。

UIDocumentPropertiesオブジェクトを作成するために使用される「updateDocumentProperties」メソッドもあります。

このメソッドはさまざまな場所から呼び出されます。

しかし、私たちはもうそれを必要としません。

UIDocumentViewControllerは私たちのためにこれらすべてを行っているので、それとそのすべてのコールサイトを削除することができます。

そして、やるべきことはそれだけです。

エディタービューコントローラーは現在、アプリに固有の機能のみを処理しています。

ドキュメント管理の基本的なタスクやナビゲーションバーのデフォルト設定を管理する必要がなくなりました。

代わりに、アプリのユニークな重要な要素である部分に集中することができます。

ドキュメント中心のアプリを次のレベルに引き上げ、ユーザーに素晴らしい体験を提供するために知っておくべきことはこれだけです。

UIDocumentを使用するようにデータモデルを変換します。

次に、コンテンツビューコントローラーを新しいUIDocumentViewController基本クラスを使用するように変換します。

その後、ビューコントローラーを調べて、不要になったすべてのコードを削除します。

見てくれてありがとう。

♪ ♪