10244

♪ ♪

イーサン：こんにちは！

そして、「Swift-DocCで豊富なドキュメントを作成する」へようこそ。

私はSwift-DocCチームのエンジニア、イーサンです。

Xcode 15は、Swift-DocCドキュメントにすべての新機能をもたらし、ドキュメントを際立たせるだけでなく、アプリやフレームワークについて読者に教えるためのより効果的なツールを提供します。

また、Xcode 15の新しいドキュメントプレビューエディタを使用すると、ソースエディタを離れることなくドキュメントを反復できます。

あなたにそれを見せるのが待ちきれません。

Swift-DocCの簡単な概要から始めましょう。

Swift-DocCは、Xcodeに直接統合されたドキュメントコンパイラで、ソースコードと一緒にプロジェクトの豊富なドキュメントを作成して公開することができます。

直接インソースに書かれたドキュメントコメントとスタンドアロンのMarkdownファイルを組み合わせて、高レベルの概念コンテンツと詳細な技術ドキュメントの両方を作成します。

このドキュメントは、静的Webホスティングソリューションとすぐに互換性があり、GitHub PagesやNetlifyなどのサービスに簡単に公開できます。

もちろん、ドキュメントはXcodeの組み込みドキュメントウィンドウにも表示され、クイックヘルプを使用してXcodeのソースエディタに統合されます。

これは、あなたが書いたドキュメントが、あなたの側で追加の作業なしで、あなたのソースコードにアクセスできる人なら誰でも自動的に利用できることを意味します。

Xcode 13でのSwift-DocCのリリース以来、Swift-DocCプロジェクトはオープンソース化されており、現在はオープンで開発されています。

Swiftコミュニティと協力して、Swift、Objective-C、または2つの組み合わせで書かれたアプリとフレームワークの両方のサポートを含む、すべてのプロジェクトを文書化するためのサポートを追加しました。

Xcode 15は、Swift-DocCドキュメントを書く経験をまったく新しいレベルに引き上げます。

ドキュメントプレビューエディタは、入力時にドキュメントのレンダリングされたバージョンのリアルタイムビューを提供し、キーストロークごとにフィードバックを提供します。

また、グリッドベースのレイアウト、ビデオサポート、カスタムページアイコン、さらには完全にカスタムテーマなどのまったく新しいオーサリング機能により、プロジェクトを本当に支持する真にオーダーメイドのドキュメントを作成できます。

このセッションでは、Swift-DocCのより高度な機能に焦点を当てます。

したがって、Swift-DocCについて初めて学ぶ場合は、まず「XcodeでDocCドキュメントを見る」と「XcodeでDocCドキュメントを昇格する」を見ることをお勧めします。

これらの2つのセッションでは、今日のドキュメントを改善するフレームワークを紹介し、新しいプロジェクトに最初のドキュメントを追加するプロセスを案内します。

今日から、Xcode 15のDocumentation Previewエディタでドキュメントを書くための新しいワークフローを取り上げます。

新しいSwift-DocC機能を活用して、フレームワークの既存のドキュメントを強化するため、新しいエディタを使用します。

次に、Webバージョンが既存のWebサイトで自宅で見えるように、ドキュメントのカスタムテーマを作成します。

最後に、ドキュメントをウェブに公開した後、Xcode 15を搭載したすべてのSwift-DocCウェブサイトに登場するまったく新しいナビゲーション機能を見学します。

すぐに飛び込みましょう。

ここ数年、チームメイトと私はSlothCreatorと呼ばれるSwiftパッケージに取り組んできました。

SlothCreatorは、iOSアプリにインポートし、小さなナマケモノをカタログ化、カスタマイズ、表示するために使用できるフレームワークです。

SlothCreatorをより多くのiOSアプリで使用したいので、ドキュメントを改善する方法を検討しています。

Xcode 15で SlothCreator Swiftパッケージを開きました。

ドキュメントの現状を評価することから始めましょう。

マウスを製品メニューに移動し、[ドキュメントのビルド]を選択します。

Xcodeは、そのドキュメントと一緒に私のプロジェクトを構築し、ドキュメントウィンドウを開きます。

これは、Swift-DocC専用のドキュメントを書いていなくても、自分のプロジェクトで試すことができるものです。

Swift-DocCは、あなたが書いたかもしれないドキュメントのコメントを含め、プロジェクト内の関連するAPIのページを自動的に作成するので、ドキュメントがすぐに使えることに驚くかもしれません。

さらに良いことに、ビルドドキュメントを選択すると、Xcodeはプロジェクトのすべての依存関係のドキュメントも生成するため、たとえば SlothCreatorなどのサードパーティのライブラリに依存する場合、これらも表示されます。

SlothCreatorのトップレベルのドキュメントページです。

それは要約文から始まり、フレームワークが何であるかの概要から始まります。

トピックセクションまで少しページを下にスクロールします。

トピックは、ドキュメントのさまざまなページを論理グループに整理するために使用されます。

まず、フレームワークへの新規参入者のための入門ドキュメントを含むEssentialsがあります。

次に、ナマケモノの作成、ナマケモノの世話や餌付けなどに役立つシンボルを含むグループがあります。

よく整理されたトピックグループは、プロジェクトの発見可能でアクセス可能なドキュメントを作成するための鍵です。

読者がドキュメントを簡単に閲覧するのに役立つ高度なテクニックについて学ぶために、「Swift-DocCコンテンツの発見可能性を向上させる」を見ることをお勧めします。

ナマケモノ構造のドキュメントを開きましょう。

私は今それをクリックします。

ナマケモノは、関連するページへのインラインリンク、私が始めるためのコード例、および関連するシンボルを発見するのに役立つよく整理されたトピックグループを含む良い概要で本当によく文書化されています。

戻るボタンを使用して、 SlothCreatorのトップレベルのページに戻ります。

そして、私はページを下にスクロールし続けます。

私はここで物事がどのように整理されているかに本当に満足しています。

しかし、ページの一番下には、実際に今まで見たことのないシンボル、SwiftUIモジュールが表示されています。

さて、このシンボルは、Xcode 15の新しいSwift-DocC機能、拡張機能のサポートのために表示されていることがわかりました。

Xcode 15では、他のフレームワークに属するタイプに対して行う拡張を文書化できるようになりました。

拡張機能は、元のソースコードにアクセスできない可能性のあるタイプに機能を追加できる強力なSwift言語機能です。

たとえば、SwiftUIのViewプロトコルを拡張して、アプリの追加機能を含めることができます。

これで、これらの拡張シンボルをアプリやフレームワークの残りの部分と一緒に文書化できます。

この新機能は、コミュニティの貢献によって完全に推進され、Swift-DocCとSwiftコンパイラの両方で調整された変更が含まれていました。

SlothCreatorのドキュメントを改善するために、ここでそれをどのように活用できるか見てみましょう。

今すぐSwiftUI拡張モジュールをクリックします。

SlothCreatorはSwiftUIの画像構造を拡張したので、ここに拡張機能として表示されています。

画像ページを開くと、追加された初期化子が表示されます。

この初期化子のドキュメントは基本が正しいですが、先ほど見たナマケモノ構造と同じ品質ではないようです。

私はそれを改善したい。

マウスをプロジェクトナビゲーターに移動し、ImageExtensionsファイルを選択して、拡張機能を含むSwiftファイルを開きます。

そして、プロジェクトナビゲーターを閉じます。

これがナマケモノベースの画像初期化子の宣言です。

宣言の真上には、先頭の3つのスラッシュで定義されたシンボルのドキュメントコメントがあります。

この初期化子にいくつかのドキュメントを追加したいのですが、Xcode 15でドキュメントを書く最善の方法は、新しいドキュメントプレビューエディタです。

ドキュメンテーションプレビューアシスタントエディタを有効にするには、まずエディタオプションメニューを選択します。

次に、アシスタント項目を選択します。

アシスタントエディターのジャンプバーをクリックして、アシスタントモードを選択します。

最後に、ドキュメントプレビューを選択します。

そして、そこにあります。

ドキュメントプレビューは、Swiftソースファイル、Objective-Cヘッダーファイル、およびドキュメントMarkdownファイル間を移動する際にアクティブのままになります。

SlothCreatorで試してみましょう。

すごい。

ディスカッションセクションを作成することから始めます。

Swift-DocCは、ドキュメントコメントの最初の行をページの要約文または要約文として使用します。

次の段落はディスカッションセクションとして使用されます。

私はあなたにそれを書きます...「この初期化子を使用して、特定のナマケモノの画像表現を表示します。」

入力すると、ドキュメントのプレビューがリアルタイムで更新され、シンボルのドキュメントのレンダリングされたバージョンが表示されます。

次に、この初期化子を実際にどのように使用できるかを示すコード例を追加したいと思います。

Markdownのフェンスで囲まれたコードブロック構文を使用してコードブロックを作成することから始めます。

シンタックスハイライトに使用するソース言語として「スウィフト」を指定します。

そして、私のコード例を貼り付けます。

この例は、氷のナマケモノの画像をレンダリングするSwiftUIビューを作成する方法を示しています。

そして、この例にはUIが含まれているので、結果のビューがどのように見えるかのスクリーンショットをここに含めるのが良いと思います。

私はすでにデスクトップに1つ用意しました。

しかし、実際に私のドキュメントのスクリーンショットを使用するには、まず SlothCreatorのドキュメントカタログに画像を追加する必要があります。

ドキュメントカタログは、Markdownファイル、画像、ビデオの形式で追加のドキュメントコンテンツを提供するために、SwiftパッケージまたはXcodeプロジェクトに追加できるファイルのディレクトリです。

これは、より長いフォームの記事やチュートリアルを置く場所です。

追加した画像やビデオは、ドキュメントのコメントから参照できます。

プロジェクトナビゲーターを展開すると、SlothCreatorがすでにドキュメントカタログを持っていることがわかりますので、スクリーンショットのライトモードとダークモードの両方のバージョンをドラッグするだけです。

私はドキュメントカタログの好きな場所に画像を配置することができ、Swift-DocCはそれらを見つけるでしょう。

これにより、カタログの整理方法の柔軟性が得られ、構造化は私と私のチームにとって最も理にかなっています。

次に、ページに画像を含めたい場合は、その画像をベースファイル名で参照するだけです。

また、ドキュメントカタログに含まれる画像やその他のファイルは、ドキュメント専用であることに注意することも重要です。

たとえば、アプリに画像を含める場合は、アセットカタログを使用します。

これで、ドキュメントにスクリーンショットを追加する準備が整いました。

Markdownの画像構文を使用し、代替テキストとしての説明と画像のファイル名の両方を提供します。

ここでベースファイル名を使用したばかりであることに注意してください。

DocCは、適切なライトモードとダークモードのバージョンを自動的に把握します。

いくつかの結論テキストでドキュメントを仕上げます。

いいね。

ドキュメントプレビューエディタは、このシンボルの広範なドキュメントを作成するのを簡単で楽しくしました。

次に、トップレベルのページのトピックグループに入れて、この方法をよりよく整理したいと思います。

プロジェクトナビゲーターを起動し、ドキュメントカタログで「SlothCreator」Markdownファイルを選択します。

ドキュメントプレビューエディタには、SlothCreatorのトップレベルページのレンダリングされたコンテンツが表示されるようになりました。

プレビューエディタを使用して、DocCの構文がどのように機能するかをよりよく理解する方法が本当に好きです。

たとえば、トピックグループは、第2レベルのトピック見出しの下の第3レベルの見出しによって定義されていることがわかります。

ページをトピックグループに配置するには、これらの第3レベルの見出しの1つの下にリスト項目を作成し、ページにリンクします。

拡張されたSwiftUIイメージタイプのために今これをやります。

画像拡張機能はユーザーインターフェイスにナマケモノを表示するために使用されるため、ナマケモノビュートピックグループのナマケモノのレンダリングに関連する他のシンボルに属していると思います。

そこにリンクします。

コードの完了は、タイプへの参照を提供することで、私を助けます。

素晴らしい、今、SlothCreatorの画像拡張機能のドキュメントは十分に文書化され、よく整理されています。

SlothCreatorのドキュメントを最初に公開して以来、フレームワークの基礎のいくつかを示すサンプルコードプロジェクトを求めるフィードバックを受け取りました。

これに対処するために、SlothCreatorに依存するSlothyという小さなアプリをまとめました。

私の同僚はすでに、新しいSlothyサンプルにリンクするSlothCreatorのメインドキュメントに含めたい記事の大まかなドラフトをまとめました。

調べてみましょう。

SlothCreatorのドキュメントカタログに記事のラフドラフトを追加することから始めます。

ここのコンテンツはすでに本当に素晴らしいです。

サンプルアプリのさまざまな機能を案内し、アプリのスクリーンショットや、サンプルをダウンロードできるリポジトリへのリンクも含まれています。

しかし、私はそれを改善できると思います。

幸いなことに、いくつかの新しいSwift-DocC機能がこれを可能にします。

Swift-DocCのオーサリング構文は、Markdownの上に構築されています。

Markdownに精通している場合は、自宅でリンク、画像、太字とイタリックのテキスト、さらには表でコンテンツをフォーマットする必要があります。

Swift-DocCは、ドキュメントの専用機能を活用できるディレクティブを使用して、その基本Markdown構文を拡張します。

私は今、これらのディレクティブのいくつかを使用して、Slothyサンプルコードの記事を磨くつもりですが、これらのディレクティブは創造的に使用することを意図していることに注意してください。

それらを使用するための1つの正しい方法や、それらを使用するための1つの正しい種類のページさえありません。

プロジェクトのドキュメントをわかりやすく、より魅力的で、よりエキサイティングにするために、これらのディレクティブを独自の方法で使用する方法を考えてください。

記事のレイアウトに飛び込んで編集する前に、その具体的な問題を特定することから始めたいと思います。

そうすれば、これらの新しい指令のいくつかを採用するにつれて、実際に改善していると確信できます。

私にとって最初に際立っているのは、際立っていないことです。

このページは、私の読者にとって特に興味深いと思われるサンプルコードがあるにもかかわらず、他の記事と同じスタイルです。

そして、その点で、この記事が行っている最も重要なことは、そのサンプルコードのソースリポジトリにリンクすることです。

それにもかかわらず、サンプルコードリンクは識別して発見するのが非常に困難です。

記事の本文内容に移ります。

このコンテンツは、2つの画像と段落のペアを中心に構築されています。

各段落には、説明している関連する画像があります。

ここには2つの問題があります。

まず、画像は段落と明確に関連付けられていません。

そして第二に、画像はあまりにも多くのスペースを奪っています。

ここの画像は、それぞれの段落にアクセントを付けることを目的としていますが、それ自体はあまり面白くありません。

最後に、ページの下部には、 SlothCreatorのローカリゼーションサポートを説明するセクションがあります。

ここでは、3つの異なる言語で同じスクリーンショットの3つの異なるバージョンがあります。

しかし、それらは垂直に積み重ねられているだけなので、両方ともローカリゼーション段落とのすべての関連性を失い、視覚的にあまりにも多くのスペースを奪っています。

Swift-DocCを使ってこれら4つの問題を解決する方法を見てみましょう。

記事の本文内容から始めましょう。

画像と段落のペアの正しい解決策は、それらをグリッドに配置することだと思います。

これにより、画像よりも段落の重要性がより強調され、それぞれの段落に画像を添付することができます。

Swift-DocCのグリッドは、柔軟な行と列として定義されています。

2つの列を含む行を定義することから始めます。

次に、段落を最初の列に、画像を2番目の列に配置します。

画像が関連する段落に添付されるようになったのは気に入っていますが、この場合、段落は画像よりも優先されるべきだと思います。

段落を含む列のサイズを大きくしましょう。

最初の列にsizeパラメータを追加し、デフォルトの値よりも大きい値を指定することで、これを行うことができます。

サイズパラメータは、特定の列のスパンを設定するために使用されます。

3つのサイズを提供してみます。

私の最初の列は現在、4列のグリッドの3列にまたがっています。

それは少し大きすぎるようです。

2つのサイズはいかがですか？

テキストと画像のバランスは素晴らしく見えます。

完璧。

2番目の段落と画像のペアで同じ設定を試してみましょう。

これは間違いなく改善ですが、ページは少しバランスが崩れています。

画像と段落をひっくり返してみましょう。

素敵。

この記事は今、本当に集まっています。

ローカリゼーションセクションで特定した問題は、画像が垂直スペースを取りすぎて、コンテキストが失われていることです。

タブナビゲーターはここで完璧なソリューションであり、複数の要素を1つにまとめることができます。

試してみましょう。

3つのタブを持つタブナビゲーターの初期構造を作成します。

タブナビゲータは、任意の数の子タブディレクティブを含むTabNavigatorディレクティブによって定義されます。

各タブは、その名前をパラメータとして提供します。

3つの画像をそれぞれのタブ内に配置します。

今、私の読者は各タブをクリックして、興味のあるスクリーンショットにアクセスできます。

物事をさらに一歩進めるために、読者を本当に惹きつけ、サンプルに興奮させる簡単なビデオを追加したいと思います。

Swift-DocCには、私が今挿入するこれのためのビデオディレクティブがあります。

ビデオが再生される前に表示されるポスター画像、ビデオ自体、および説明を提供します。

いいね。

紹介セクションに移りましょう。

私が最初に気づいた問題の1つは、サンプルのソースコードリポジトリにアクセスするためのリンクを見つけるのがどれほど難しいかです。

Swift-DocCには、このために正確に設計された行動を促すディレクティブがあります。

まず、ページの上部にメタデータコンテナディレクティブを追加します。

メタデータディレクティブは、ページに直接レンダリングされない追加情報を指定するために使用されます。

この場合、ページにアクションの呼びかけを添付したいと思います。

アクションの呼び出しに宛先URLと目的を提供しました。

私が「リンク」の目的を使用したことに注目してください。

あるいは、このリンクが直接ダウンロードにつながる場合は「ダウンロード」を使用できますが、この場合はソースリポジトリにリンクしているので、「リンク」がより良い選択です。

最後に、この記事をSlothCreatorのドキュメントの他の記事とは異なるものとして目立たせたい。

読者がこのページにサンプルコードが含まれていることを見逃さないようにしたい。

Swift-DocCは、サンプルコードを含む記事を特別にサポートしていることが判明しました。

「サンプルコード」引数を持つPageKindディレクティブを提供することで、私のページの種類がサンプルコードであることを指定します。

レンダリングされたページには、「サンプルコード」のタイトル見出しと、サンプルコード記事として目立つようにカーリーブレースページアイコンが追加されました。

今日、Swift-DocCには、PageKindディレクティブでサポートされている「記事」と「サンプルコード」の2つのサポートされている値しか持ってません。

興味深い他のデフォルトページの種類について聞きたいです。Swift-DocCはオープンソースプロジェクトであるため、Swiftフォーラムは、この種のことや、DocCがドキュメントのニーズをよりよく満たす方法についてのフィードバックやアイデアについて話し合うのに最適な場所です。

アプリで SlothCreatorを使用することに興味がある開発者は、この記事に本当に興奮すると思います。

それは魅力的で、思慮深く、楽しいです。

私は彼らがそれを見つけることを確認したいので、SlothCreatorのトップレベルのページに戻って、それにリンクする目立つ場所を見つけましょう。

まず、新しい記事をトピックグループにキュレーションします。

この場合、SlothCreatorフレームワークへの新規参入者がSlothyサンプルに興味を持つことを期待しているので、Essentialsグループが最も適切だと思います。

これは良いスタートですが、私は物事をさらに一歩進めて、ページのより一般的なトピックセクションの上にこの記事を特集したいと思います。

リンクディレクティブはこれに最適です。

注目のセクションを作成し、リンクディレクティブを挿入します。

リンクはページを強調表示するのに最適な方法です。

カード画像とページの説明をより高度な方法で含めるために使用できます。

リンクディレクティブは、トピックグループのように、リンクのレンダリング方法を定義するビジュアルスタイルパラメータと、その本文内のリンクのリストを受け入れます。

Slothyのサンプルにリンクします。

リンクは、デフォルトのトピックセクションのようにレンダリングされる基本的なリストから、詳細なグリッドまで、多くのビジュアルスタイルをサポートしています。

グリッドスタイルは素晴らしいと思いますが、ここにSlothyサンプルを表すカスタム画像を含めたいと思います。

SlothyのMarkdownに戻りましょう。

Slothyの記事をグリッドベースのリンクセクションでのプレゼンテーションに最適なものにするには、メタデータにページ画像を提供する必要があります。

今それをやりましょう。

Slothyの記事がカードとしてレンダリングされるたびにこの画像が使用されるように「カード」の目的を指定し、画像のソースと説明を代替テキストとして提供します。

SlothCreatorのトップレベルのページに戻ると、Slothyはカスタムページ画像でレンダリングされるようになりました。

「ナマケモノを使い始める」の記事も特集します。

最後の仕上げとして、トップレベルのページにも追加のメタデータを追加します。

以前と同じようにメタデータディレクティブを作成することから始めます。

そして、ページ画像を提供します。

今回は「カード」ではなく「アイコン」の目的を指定します。

したがって、この画像は、ページのナビゲーションサイドバーや紹介セクションなど、ページのアイコンがレンダリングされる場所ならどこでも使用されます。

最後に、カスタムページの色を設定します。

デフォルトでは、トップレベルのページは青色を使用しますが、Swift-DocCは黄色、紫、オレンジなどの多くの標準標準色を提供します。

SlothCreatorは一般的にグリーンをアクセントカラーとして使用しているので、ここでも使用することで、よりまとまりのある体験を生み出すのが良いと思います。

うわー。

SlothCreatorのドキュメントは、わずか短時間で長い道のりを歩みました。

行と列、タブナビゲーター、ビデオなどのレイアウトディレクティブを使用して、このサンプルコード記事のフローをより良くし、読者を引き付けることができました。

CallToActionやPageKindなどのメタデータディレクティブを使用して、余分なレベルの磨きを加えました。

そして、リンクディレクティブで注目のコンテンツを高め、PageColorとPageImageディレクティブでトップレベルのページにブランディングを追加することで、すべてを結びつけました。

SlothCreatorの更新されたドキュメントを共有できることを本当に楽しみにしています。

しかし、その新しいリリースをウェブに公開する前に、カスタムテーマで SlothCreatorのドキュメントのオンラインプレゼンテーションを最適化しましょう。

SlothCreatorのドキュメントは、より大きな製品ウェブサイトの一部として公開されています。

ドキュメントサイトが同じカラーパレットとフォントのセットを使用して製品サイトと視覚的に一致していることを確認したい。

Swift-DocCのカスタムテーマでそれを達成する方法を見てみましょう。

Swift-DocCは、ドキュメントサイトの特定の展開で、色、境界線、アイコン、フォントなどの視覚的なスタイリングがどのようにレンダリングされるかを完全にカスタマイズすることをサポートしています。

これらのカスタマイズは、ドキュメントカタログに含める特別なJSONファイルで行われ、ドキュメントサイトを他のオンラインプレゼンスとよりよく統合することができます。

Swift-DocCのテーマツールを使用して、特定の企業スタイルに合わせたり、マーケティングサイトや個人ブログによりよく適合したりすることができます。

ただし、テーマ化は、作成したいすべてのドキュメントのカスタマイズに適したツールではありません。

たとえば、 SlothCreator のサンプル コード ページで行ったように、特定のページの外観をカスタマイズすることに興味がある場合は、カスタム テーマではなく、そのページでディレクティブを使用する必要があります。

テーマのカスタマイズはサイト全体であり、ページ固有ではありません。

また、Swift-DocCのテーマは意図的に展開に固有であることに注意することも重要です。

したがって、Xcodeでドキュメントを開くと、ドキュメントは引き続きXcodeテーマでレンダリングされ、そこに提示された残りのすべてのドキュメントと一緒に見栄えが良くなります。

これは、Xcodeでの読書体験にどのように影響するかを心配することなく、サイトのWebプレゼンスにカスタムテーマを集中できることを意味します。

しかし、それはまた、カスタマイズをXcodeとウェブの両方に表示したい場合は、ディレクティブを使用する方が良いことを意味します。

SlothCreatorのカスタムテーマをチェックしてみましょう。

Swift-DocCのテーマは、プロジェクトのドキュメントカタログに配置する特定の名前「theme-settings.json」のJSONファイルによって定義されます。

テーマ設定ファイルで行うカスタマイズにはさまざまな種類があります。

SlothCreatorのために、私はサイトの色とフォントをカスタマイズするつもりです。

これらのカスタマイズは、それぞれ「カラー」セクションと「タイポグラフィ」セクションに配置されます。

SlothCreatorは、マーケティング資料全体で特定の色合いの緑色を使用しています。

私はすでにPageColorディレクティブを使用して、SlothCreatorのトップレベルのページカラーを緑色に設定しました。

これで、緑の特定の色合いを「標準緑」の色変数を使用して、私が望むものに設定することができます。

そして、SlothCreatorは深刻なナマケモノの専門家を対象としたかなり深刻なフレームワークであるため、オンラインドキュメントでセリフフォントを使用したいと思います。

「Html-font」タイポグラフィ変数でそれを行うことができます。

もちろん、これらのカスタマイズは、Swift-DocCテーマで可能なことの始まりにすぎません。

さらに進めることに興味があるなら、Swift-DocCのドキュメントを読むことをお勧めします。

「Theme-settings.json」ファイルを設定したので、ドキュメントカタログに追加します。

SlothCreatorのソースコントロールリポジトリは、新しいコミットをプッシュするたびに「xcodebuild」コマンドラインツールを使用して SlothCreatorのドキュメントを構築および展開する継続的な統合ですでに構成されています。

これは、ドキュメントがフレームワークの最新の変更で常に最新であることを保証する優れたワークフローです。

独自のプロジェクトに同様のワークフローを設定することに興味がある場合は、XcodeのドキュメントのSwift-DocCセクションをチェックしてください。

私たちがまとめたこれらの変更を公開することに本当に興奮しています。

ウェブサイトの新しい展開をトリガーするために、今すぐコミットしてプッシュしましょう。

Xcodeウィンドウの左上隅にマウスを移動し、ソースコントロールナビゲーターをアクティブにします。

すべての変更をステージングし、コミットメッセージを追加し、コミットし、プッシュします。

今、私はSlothCreatorのウェブサイトを開きます。

SlothCreatorの製品サイトのホームページはこちらです。

SlothCreatorのブランディングに合った特定のフォントと色を使用します。

「ドキュメントを読む」ボタンをクリックします。

そして、これがSlothCreatorのドキュメントです。

ウェブサイトのバージョンには、独特のフォントと緑の色合いで、私たちが適用したカスタムテーマがあります。

また、私たちが設定したカスタムアイコンと、真新しいSlothyサンプルコード記事を含む魅力的な特集セクションもあります。

「サンプルコードを見る」リンクで開きます。

この記事がどうなったかに本当に満足しています。

そしてもちろん、Swift-DocCのウェブサイトには引き続き優れたナビゲーションサイドバーが付属しているため、 SlothCreatorのトピックセクションで整理したページを簡単にナビゲートできます。

上部にはEssentialsグループがあり、Slothyサンプルコード記事と「Getting Started」記事とSloth structを配置しました。

左側の開示三角形をクリックして、ナマケモノ構造体を展開します。

これにより、構造体の子を閲覧することができ、もちろん、これらのシンボルはトピックグループでもよく整理されています。

先ほど文書化した画像初期化子を確認しましょう。

ナマケモノビューセクションまでスクロールし、画像拡張シンボルを展開し、初期化子をクリックします。

そして、私たちはここにいます。

ナビゲーションサイドバーが、ドキュメントの著者として、私のプロジェクトのAPIを実際にガイドする開発者のための直感的なブラウジング体験を作成する方法が大好きです。

しかし、時にはドキュメントリーダーとして、私は私が探しているページを正確に知っていて、それにまっすぐにジャンプする簡単な方法が必要です。

Xcode 15で構築されたSwift-DocCウェブサイトには、ページ間を簡単にジャンプできる新しいクイックナビゲーション機能があります。

Swift-DocCクイックナビゲーションは、すべてのSwift-DocCウェブサイトに持ち込むことに本当に興奮しているもう一つのコミュニティ主導の取り組みです。

XcodeのOpen Quickly機能と同様に、キーボードショートカットを有効にして名前を入力するだけで、ページに直接ジャンプできます。

試してみましょう。

Shift-Command-Oを押して、クイックナビゲーションを有効にします。

SlothCreatorのドキュメントのすべてのページをすぐにフィルタリングし始めることができます。

たとえば、入門記事を探している場合は、「start」と入力するだけです。

そして、そこにあります。

右側にドキュメントのプレビューもあります。

Enterキーを押してページに移動します。

しかし、多分私は異なるナマケモノの力が何であるかを思い出させる必要があります。

Shift-Command-Oをもう一度押して、「power」と入力します。

これがPowerPicker、そして「パワー」プロパティです。

ああ、ここにあります、パワー列挙型です。

今回は「もっと見る」リンクでページを開きます。

そして、ちょうどそのように、私は利用可能なすべてのナマケモノの力について読むことができます。

新しいクイックナビゲーションポップオーバーと既存のナビゲーションサイドバーの両方で、Swift-DocCはドキュメントの閲覧を本当に素晴らしい経験にします。

Xcode 15のSwift-DocCには、真にユニークなドキュメントWebサイトを作成するための強力な新しいツールが付属しています。

新しいドキュメンテーションプレビューエディタを試してみてください。

さまざまなページレイアウトを探索し、それらがリアルタイムでどのようにレンダリングされるかを知ることができます。

行と列、リンク、PageImageなどの新しいディレクティブを使用すると、プロジェクトを際立たせ、擁護するドキュメントを作成できます。

また、ドキュメントのWebバージョンをプロジェクトのブランディングや既存のオンラインプレゼンスとよりよく統合するために、カスタムテーマを追加する必要があるかどうかを検討してください。

Swift-DocCの最新情報を入手するには、WWDC22の「Swift-DocCの新機能」セッションをチェックしてください。

このセッションでは、Xcode 14に同梱されている新しい公開ワークフローについて詳しく説明し、GitHubページなどの静的ホスティングサービスに公開する方法を正確に説明します。

また、ステップバイステップのチュートリアルでドキュメントをさらに進めることに興味がある場合は、「DocCを使用してインタラクティブなチュートリアルを構築する」を見ることをお勧めします。

Swift-DocCとXcode 15で設計して公開したドキュメントを見るのがとても楽しみです。

どうもありがとうございます。

♪ ♪