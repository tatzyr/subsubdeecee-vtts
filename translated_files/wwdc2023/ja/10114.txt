10114

♪ ♪

David: こんにちは、「WalletとApple Payの新機能」へようこそ。

私の名前はデビッドです。ジョン:そして、私はジョンです。

David: 今日は、今年WalletとApple Payの体験に導入するすべての新機能と機能強化について説明します。

ウォレットとApple Payには、幅広い機能と機能、バーコードパス、交通カード、車のキーなどが含まれます。

これらはすべて私たちのエコシステムの重要な部分ですが、今日の焦点は、支払い、注文追跡、アイデンティティの3つの分野にあります。

支払いから始めましょう。

まず、Apple Pay Laterと、プラットフォーム内でマーチャンダイジングサポートを統合する方法について説明します。

事前承認支払いの強化について説明し、Apple Payでの送金をサポートするためのまったく新しいAPIについて説明します。

Apple Pay Laterは今年初めに米国の顧客に導入され、ユーザーは購入を4つの別々の支払いに分割することができます。

ユーザーは、ウォレット内でこれらの購入を便利に追跡および管理できます。

Apple Pay Laterは統合を必要としませんが、UIに含めるための専用のマーチャンダイジングビューを提供する新しいAPIを導入しています。

このビューを使用すると、Apple Pay Laterのサポートが表示され、顧客が期待できるエクスペリエンスの詳細が表示されます。

表示されるコンテキストに合わせて、ビューのスタイルをカスタマイズできます。 ビューのスタイルをより適切にカスタマイズできます。

ユーザーが詳細を知るためにこのビューを選択すると、Apple Pay Laterがどのように説明されるかを選択できます。

そして、このビューは、アプリとウェブの両方で開発者が利用できるようになります。

マーチャンダイジングビューは、コンテキストに応じて4つの異なる表示スタイルでレンダリングできます。標準スタイルは、Apple Pay Laterを使用して購入を複数の返済に分割する方法を簡単に説明します。

簡潔な方法でサポートを示すバッジスタイル。

チェックアウトスタイルは、チェックアウトフローで他の支払いオプションと一緒に配置されるように設計されています。

そして、総購入価格と一緒に使用するための価格スタイル。

ユーザーがこのビューと対話すると、より多くの情報が表示されます。

商人として、あなたは2つの異なる行動から選択する能力を持っています。

「Learn More」アクションは、Apple Pay Laterの概要を示し、ユーザーが支払い方法として選択した場合に経験するエクスペリエンスについて説明します。

「計算機」アクションは、引き続きApple Pay Laterの説明を提示しますが、返済スケジュールに焦点を当てて、ユーザーは従う必要があります。

このビューをアプリに組み込むことを見てみましょう。

まず、ユーザーが後でApple Payを使用する資格があるかどうかを確認する必要があります。

これを行うには、PKPayLaterUtilities内の検証機能を使用します。

取引の金額と必要なロケールを提供する必要があります。

ユーザーが後でApple Payを使用する資格があるかどうかを決定したら、適格性チェックに提供されたのと同じ詳細でPKPayLaterViewをインスタンス化します。

ビューのスタイルとアクションをカスタマイズしたい場合は、それぞれのプロパティを変更することでカスタマイズできます。

また、便利なSwiftUIビューも提供しており、SwiftUIアプリ内でApple Pay Laterの受け入れを表現できます。

それを使用するには、PayLaterViewをインスタンス化し、以前と同じ情報を提供します。

表示スタイルとアクションをカスタマイズするには、適切なビュー修飾子を使用します。

そして、それはそれと同じくらい簡単です。

ウェブ上のマーチャンダイジングビューをサポートしたい場合は、最初に実行する必要があるいくつかのセットアップ手順があります。

ビューを表示するためのAPIは、既存のApple Pay JavaScript SDK内で提供されていますが、それを含めるときに設定する必要がある新しい属性がいくつかあります。

クロスオリジンリソース共有リクエストをサポートする必要がある場合は、クロスオリジン属性を設定することが重要です。

Async属性を使用して、ページの読み込みの進行状況とは無関係にスクリプトが読み込まれ、実行されるようにします。

そして最後に、APIへのリクエストを認証するにはJWTが必要です。

このトークンはApple Developerポータルで生成できます。

JavaScript SDKの使用はこれ以上ないほど簡単です。

Apple-pay-merchandising要素を使用してビューを表します。

金額、国コード、通貨コード、ロケールは必須フィールドです。

ネイティブAPIと同様に、必要に応じてビューの他の側面をカスタマイズすることもできます。

Apple Pay Laterのマーチャンダイジングビューを組み込む場合のベストプラクティスをいくつか紹介します。

アプリの場合、このビューを使用するには資格が必要です。

これはApple Developerポータルで入手できます。

ウェブサイトの場合は、ドメインを登録し、SDKを含めるときに使用するためにJWTを取得することを忘れないでください。

これはApple Developerポータルでも行うことができます。

可能であれば、ヘッド要素内にSDKをインポートしてみてください。

これにより、できるだけ早く実行できるため、ページが完全にロードされたときにマーチャンダイジングビューの準備が整います。

ビューのサイズはニーズに合わせてカスタマイズできますが、サイズ要件に従うようにしてください。

そして最後に、あなたのウェブサイトに制限的なコンテンツセキュリティポリシーがある場合は、推奨されるガイドラインに従って、SDKをドメイン間でロードできるようにしてください。

そして、それは後でApple Payを見ることです。

次に、事前承認された支払いについて話します。

iOS 16では、事前承認された支払いを導入しました。

ユーザーはウォレットで事前承認した支払いを表示および管理することができ、加盟店は合意された条件に従ってユーザーに請求することができます。

当初は、定期的な支払いと自動リロード支払いのサポートを提供しました。

私たちは今、後払いもサポートしています。

3つの事前承認された支払いタイプはすべて、アプリやウェブで使用できます。

繰延支払いにより、将来の特定の日に固定または変動額のいずれかを請求できます。

無料のキャンセル締切日がある場合は、リクエストの一部として指定することもできます。

後払いが適している場合の例には、お客様がホテルの予約をしているときや、アイテムを予約注文しているときなどがあります。

事前承認された支払いは、Apple Payマーチャントトークンを利用します。

それらは、個々のデバイスではなく、ユーザーのApple IDに関連付けられています。

つまり、たとえば、ユーザーがデバイスをアップグレードする場合、トークンは引き続き有効です。

このため、トークンを使用してアカウントに請求することができ、後日の支払いの受信がより信頼性が高くなります。

事前承認された支払いを実行する場合、顧客の支払いカードがそれらをサポートしている場合、マーチャントトークンは自動的に発行されます。

支払いカードがマーチャントトークンをサポートしていない場合、取引は引き続き実行されますが、個々のデバイスに関連付けられている従来のApple Payトークンを使用します。

Apple Payマーチャントトークンの詳細については、昨年のWalletとApple Payの新機能をチェックしてください。

それでは、アプリ内に繰延支払いを組み込む方法を見てみましょう。

まず、料金の説明とかかる金額を概説したPKDeferredPaymentSummaryItemを作成します。

また、支払いが実行される日付も設定します。

次に、PKDeferredPaymentRequestを作成します。

作成したばかりの要約項目と、支払いの管理に関するその他の情報を提供します。

ユーザーに表示する必要がある請求契約がある場合は、後払い要求でも設定できます。

リクエストを作成して設定したら、PKPaymentRequestに添付できます。

リクエストの支払い要約項目については、以前と同じ金額と日付で別のPKDeferredPaymentSummaryItemを作成します。

しかし、今回は商人の名前を表すラベルが付いています。

私たちはリクエストにこれを設定し、支払いのために提示する準備ができています。

この例でわかるように、Apple Payの支払いシートは、請求契約に関する情報と請求が予想される時期とともに、後払いをユーザーに提示します。

さて、無料のキャンセル日を指定する場合は、いくつかの重要な考慮事項があります。

無料のキャンセル日を提供する場合、その時点以前のキャンセルは、ユーザーに無料で行われると述べています。

このため、日付と時刻の両方が重要な情報です。

キャンセルポリシーが適用されるタイムゾーンを明示的に明記する必要があります。

これをサポートするために別のプロパティを提供しました。

以下の例では、タイムゾーンが太平洋標準時であることを指定しました。

お客様のタイムゾーンがキャンセルポリシーのタイムゾーンと一致しない可能性があるため、これは重要です。

例えば、誰かがイギリスに拠点を置いている場合、アメリカでホテルを予約します。

繰延支払いを扱う場合、従うべきベストプラクティスをいくつか紹介します。

前述のように、無料キャンセルポリシーを説明する必要がある場合は、後払いリクエストに提供された日付、時刻、タイムゾーンを慎重に検討してください。

要約項目に後払いを含めることを忘れないでください。また、適切なマーチャント名を設定してください。

これは自動的に行われるわけではありません。

請求契約を提供するときは、それを短くすることを忘れないでください。

請求契約のテキストは、考慮すべき重要な事実の要約としてのみ機能すべきであり、通常の請求または法的契約に取って代わるべきではありません。

最後に、トークン通知URLを指定すると、Apple Payマーチャントトークンが発行された場合、Apple Payマーチャントトークンのライフサイクルイベントを最新の状態に保つことができます。

そして、それは繰延支払いです。

次に、Apple Payで資金を送金するまったく新しい方法を見てみましょう。

伝統的にApple Payでは、ユーザーがアカウントに資金を追加するための支払いシートが常に利用可能でした。

iOS 17の新機能で、Apple Payでの送金を導入しています。

これにより、ユーザーはアカウントからウォレットのカードに転送する機能を提供し、お金の移動のライフサイクルを完了します。

これは、支払いと同じ安全でプライベートなApple Payインフラストラクチャを使用しているため、顧客はすでにこのプロセスに精通していることになります。

資金の送金が理にかなっている例は、顧客が銀行口座またはストアドバリュー口座から資金を引き出すことを可能にすることです。

Apple Payでの送金をサポートするために、送金に必要な情報のみに焦点を当てた新しいリクエストタイプを作成しました。

それを使用するには、ユーザーの支払いカードに転送する金額を定義するだけです。

受信者の連絡先の詳細が必要な場合は、これらをリクエストすることもできます。

以前にPKPaymentRequestを使用したことがあるなら、この新しいAPIはとても身近に感じるでしょう。

Apple Payでの送金は支払いと同じインフラストラクチャで動作するため、Apple Developerポータル内でマーチャントとして登録する必要があります。

マーチャントとして登録し、Apple Payを使用するように設定する方法の詳細については、「Apple Payと注文管理の実装」Tech Talkをご覧ください。

Apple Payでの送金の仕組みを例に示すために、例を見てみましょう。

口座からお金を引き出したい顧客、アンドリューがいるとします。

Apple Payで送金を使用すると、アプリ内から送金がトリガーされます。

次に、アプリはリクエストを作成し、転送する金額を概説します。

その後、アンドリューには送金を詳述したApple Payシートが表示され、資金を受け取るカードを選択できます。

アンドリューが転送を安全に認証すると、暗号化されたペイロードが生成され、アプリに戻され、支払いプロバイダーとの処理の準備が整います。

転送が処理されると、アプリは結果をApple Payに返します。

転送が成功すれば、それだけです。

エラーが発生した場合、アンドリューは通知され、問題を解決するための是正措置を講じることができるかもしれません。

資金移動の仕組みの概要を見たので、アプリ内で実装する方法を見てみましょう。

まず、サポートしたいネットワークとカード機能を決定する必要があります。

次に、ユーザーが送金を開始するための適格なカードを持っているかどうかを確認します。

これはPKPaymentAuthorizationControllerを通じて行われます。

supportsDisbursementsメソッドを使用して、先に定義したネットワークとカード機能を提供します。

このチェックの結果を使用して、必要に応じてユーザーインターフェイスを調整できます。

適格性を確認したので、転送リクエストの作成を開始できます。

支払い要求と同様に、金額は要約項目を通じて定義されます。

この場合、2つの異なる要約項目を作成します。

1つ目はPKPaymentSummaryItemです。

これは、ユーザーのアカウントから引き出される金額を表します。

アイテムに関連付けられているラベルは、あなたのビジネスの名前でなければならないことに注意することが重要です。

2番目の項目は、新しいタイプの要約項目であるPKDisbursementSummaryItemです。

これらのいずれかを含める必要があり、手数料、料金、または調整を差し引いた受取人の支払いカードに受け取った最終的な金額を常に表す必要があります。

支払いにはPKPaymentRequestがありますが、Apple Payによる送金の新しいリクエストタイプ、PKDisbursementRequestがあります。

PKDisbursementRequestを構築するには、特定の詳細を指定する必要があります。

Apple Payに登録する際に設定したマーチャント識別子、取引の通貨、ビジネスの地域、および以前に定義されたネットワークと機能が必要です。

また、作成したばかりの要約項目も提供します。

送金受取人の連絡先の詳細が必要な場合は、ここでもリクエストできます。

また、受取人の支払いカードが発行された地域を制限することもできます。

リクエストが構築されたら、それをユーザーに提示できるようになりました。

これを行うには、支払い要求でPKPaymentAuthorizationControllerのインスタンスを初期化します。

私たちは自分自身を代表者として設定し、その後、提示します。

ここで見られるように、ユーザーは、送金を受け取りたい支払いカードとそのカードに受け取る金額を選択するオプションが表示されます。

これで、ユーザーが転送を安全に承認すると、転送を処理するために実装する必要があるデリゲートコールバックがいくつかあります。

Apple Payで資金を送金するために実装する必要がある委任方法は2つしかありません。

1つ目はpaymentAuthorizationControllerDidFinishです。

これは、シートを却下する準備ができたら呼び出されます。

それを却下する責任は呼び出しアプリにあります。

この方法を使用して、それに応じて自分のアプリのUIを変更することもできます。

第二に、didAuthorizePaymentデリゲートメソッドです。

Apple Payでの送金は支払いと同じインフラストラクチャを使用しているため、処理に使用するのと同じタイプのPKPaymentオブジェクトを受け取ります。

ここでは、トークンの処理を独自のprocessFundsTransferメソッドに抽象化しました。

処理の結果に応じて、成功または失敗を返します。

処理段階でエラーが発生した場合は、これらを表す一連の便利な方法を提供しました。

提供された連絡先情報に関連する問題がある場合は、disbursementContactInvalidErrorを使用できます。

支払い処理業者が、ユーザーの支払いカードが資金移動を受け入れることができないと判断した場合は、disbursementCardUnsupportedErrorを使用できます。

一部の金融機関は、より迅速に受取人に資金を送ることができる即時送金をサポートしています。

これらは、Apple Payでの送金で表すこともできます。

サービスによっては、これらのインスタント転送には料金が含まれる場合があり、これも表すことができます。

通常、ユーザーはアプリ内の転送速度の選択肢が与えられます。

ユーザーが即座に資金を送金することを選択した場合、それらのサポートを必要とする機能を提供します。

そうすると、ユーザーのカードの選択は、即時転送をサポートすることが知られているカードに限定されます。

そして、これはインスタント転送がどのように見えるかです。

シートは以前と非常によく似ていますが、今は転送が即時であるという事実と、ユーザーが支払う料金を強調しています。

振込金額も手数料を考慮して調整されています。

前回の転送リクエストを瞬時に行う方法を見てみましょう。

まず、サポートされている機能のリストにinstantFundsOutを追加します。

その後、supportDisbursements内で、ユーザーが即時転送をサポートするカードを持っているかどうかを確認できます。

その後、それに応じて転送方法のオプションとユーザーインターフェイスを調整できます。

要約項目については、即時送金手数料を表す専用の項目、PKInstantFundsOutFeeSummaryItemがあります。

このアイテムでは、即時転送を実行する目的で請求される金額を指定します。

料金を請求しなくても、この要約項目は必須です。

この場合、ゼロの量を設定します。

この例では手数料を請求しているため、それに応じて支払い額を更新する必要があります。

これはあなたのために自動的に行われることはありません。

PKDisbursementRequestの作成は、以前とあまり違いはありません。

唯一の違いは、以前に定義した機能と要約項目を確実に提供することです。

そして、即時転送を表すために必要なのはそれだけです。

Apple Payで送金を実装する際に留意すべきベストプラクティスをいくつか紹介します。

Apple Payでの送金はiOSとiPadOSでのみ利用でき、macOSやウェブでは使用できないことに注意してください。

資金移動の処理中にエラーが発生した場合は、専用の支払いエラーの1つを使用して、これをユーザーに効果的に伝えます。

最初の要約項目は、ユーザーのアカウントから引き出される金額を表す必要があることに注意することが重要です。

最初の要約項目のラベルは、あなたのビジネスのラベルと一致する必要があります。

そして、最後の要約項目は、手数料、料金、または調整を差し引いた、ユーザーの支払いカードで受け取る金額を表す必要があります。

そして、それが支払いに関して私たちが今日持っているすべてです。

トラックを少し変更するには、注文追跡について話しましょう。

注文追跡は、ユーザーが参加加盟店との注文を追跡する方法としてiOS 16で導入されました。

ユーザーからの反応は素晴らしく、注文追跡をさらに良くするために懸命に取り組んできました。

注文をよりよく表現し、伝達するために、オペレーティングシステム内の統合をどのように改善したかについて説明します。

その後、注文追跡にいくつかの機能強化を行いました。

そして最後に、ウォレットに注文を追加する新しい方法を導入しています。

iOS 16.4では、メッセージを通じて注文を共有するサポートを追加し、注文のインラインプレビューを提供し、受信者がウォレット内で追跡する機能を追加しました。

また、ユーザーが一目で注文を追跡できる注文追跡ウィジェットも導入しました。

ユーザーは、追加の作業を必要とせずに、すでにこれらの新機能の恩恵を受けることができます。

マップをサポートしながら、iOS 17のシステム統合を続けています。

ユーザーが指定された集荷時間と場所で注文を追跡している場合、マップはSiriの提案を通じて積極的にそれを提案します。

それでは、iOS 17で注文追跡に対して行った機能強化のいくつかを見てみましょう。

宅配業者や食品配達のユースケースをよりよくサポートするために、使用されている配送の種類を示すことができます。

新しいshippingTypeプロパティを通じて、注文が出荷されるか配送されるかを宣言できます。

エンタープライズアプリを含む、関連するアプリケーションをより適切にサポートできるようになりました。

関連するアプリケーション識別子を宣言することで、アプリと注文追跡の間の注文通知の管理を改善できます。

さらに、カスタム製品ページ識別子をサポートし、ウォレットのトラフィックに最も関連性の高いApp Store製品ページへのディープリンクを可能にします。

最後に、支払い情報を表す新しい方法を導入しています。

注文パッケージは、それに関連する一連のトランザクションをサポートするようになり、それぞれが支払い方法や金額などの詳細情報を持っています。

また、取引に領収書ファイルを添付して、顧客が支払い記録を持つようにすることもできます。

このレシートファイルは、PDFまたはJPEGやPNGなどの画像のいずれかです。

注文パッケージのサイズは限られているので、含めるレシートファイルのサイズを考慮してください。

取引が購入か払い戻しかを説明することもできます。

iOS 17では、ウォレットに注文を追加することがかつてないほど簡単になりました。

注文確認メールなどのメールに注文パッケージを添付できるようになりました。

その後、ユーザーはその場でウォレットに注文を追加できるようになります。

さらに、アプリやウェブサイトに「Apple Walletで追跡」ボタンを追加することもできます。

ウォレットへの注文の追加をサポートする新しい注文追跡APIを見てみましょう。

このAPIは、FinanceKitとFinanceKitUIの2つの新しいフレームワークに含まれています。

これら2つのSwift専用フレームワークにより、開発者はWallet内で注文データを処理できます。

注文情報へのアクセスは、FinanceStoreの共有インスタンスを通じて達成され、注文追跡クエリを処理するための中心的なリソースを提供します。

このAPIを使用すると、注文の存在と、注文を追加または更新する方法を確認できます。

既存の注文を確認する方法を見てみましょう。 既存の注文を確認しましょう。

まず、FinanceStoreに問い合わせて、完全修飾注文識別子を持つ注文が含まれているかどうかを確認します。

その後、存在するか、見つからないかの2つの応答のうちの1つを受け取ります。

その後、必要に応じてアプリで応答できます。

それはそれと同じくらい簡単です。

注文を追加または更新する場合は、2つの方法のいずれかでこれを行うことができます。

まず、FinanceKitを使用してこれを行う方法を紹介します。

まず、ウォレットに追加したい署名された注文パッケージのデータシリアル化が必要になります。

次に、これをFinanceStoreの保存注文方法に提供します。

これを行うと、注文の内容と、ウォレット内で追跡するかどうかを確認するための画面がユーザーに表示されます。

ユーザーがリクエストを確認または拒否すると、結果を非同期に受信し、3つの形式を取ることができます。

ウォレットに注文を追加したか、リクエストをキャンセルしたか、新しい注文がすでに存在します。

アプリがSwiftUIで書かれている場合は、FinanceKitUIを使用できます。

これにより、専用の「Apple Walletで追跡」ボタンが提供され、注文を追加した結果を処理できます。

FinanceKitと同様に、まず署名された注文パッケージのシリアル化されたインスタンスが必要になります。

次に、AddOrderToWalletButtonをビューに含めます。

ユーザーがこのボタンを選択すると、ウォレットに注文を追加する機能が提供されます。

その後、以前と同じように、3つの結果状態に応答することができます。

ウェブ上で注文を追跡する顧客をサポートしたいマーチャントのために、JavaScript SDKでこのボタンのバージョンを提供しています。

これを使用するには、apple-walletボタンを挿入し、属性を使用して設定します。

ボタンの種類はトラックオーダーに設定する必要があります。

このボタンを使用する場合は、追加する署名された注文パッケージの場所を指すようにonClickコールバックを設定することが重要です。

そして、それは私たちが注文追跡で今日あなたのために持っているものです。

これらの新しいAPIをアプリやサービスに採用するのが待ちきれません。

そして今、まったく異なる何かのために、私たちはアイデンティティに関して共有するいくつかのエキサイティングなアップデートを持っています、そしてそのために、私はジョンに引き渡します。

ジョン:ありがとう、デビッド。またこんにちは。

私はApple PayとWalletチームのエンジニア、ジョンです。

iOS 17でアイデンティティに追加した新機能について話すことにとても興奮しています。

iOS 15.4でWalletにIDを導入し、サポートされている米国の州のユーザーが運転免許証または州のIDをWalletに追加できるようにしました。

昨年、Verify with Walletを導入しました。

このAPIを使用すると、企業はApple Walletに保存されているユーザーのIDから情報を要求することで、オンボーディングとアカウント確認のフローを合理化できます。

今年、iOS 17では、iPhoneでTap to Present IDを導入します。

このAPIを使用すると、アプリはiPhoneのみを使用して、ウォレットやその他のモバイルドライバーライセンスのIDをシームレスかつ安全に検証できます。

これは、iOS 15.4のProximityReaderフレームワークに追加されたiPhone APIのTap to Payの上に構築されています。

iPhoneでタップして支払うことは、追加のハードウェアや支払い端末を必要とせずに、非接触型決済を受け入れるための安全でプライベートで簡単な方法を提供します。

では、タップしてIDを実際に提示するを見てみましょう。

私が宇宙船レンタルで働いていて、デビッドが私たちから宇宙船を借りたいとします。

彼はこれを行うには少なくとも21歳でなければならないので、私はTap to Present IDを使用して年齢確認を行うつもりです。

まず、宇宙船レンタルアプリはタップを呼び出してIDを提示します。

私のiPhoneには、ビジネスの名前、ロゴ、および実行されているリクエストの種類、この場合は年齢の証明が表示されます。

私は今、私の近くに彼のiPhoneを持っているようにデビッドを招待します。

David: 私のiPhoneには、確認できる同意書が表示されるようになりました。

私は宇宙船レンタルに私のIDを提示していることがわかります、そして彼らは私のID写真と私が21歳以上であるかどうかを要求しています。

この情報を提示したいので、ダブルクリックしてFace IDで確認します。

ジョン：私のiPhoneには、デビッドが提示した情報が表示されるようになりました。

彼は身分証明書の写真と一致し、21歳以上であることがわかります。

だから今、彼は離陸の準備ができています。

Tap to Present ID APIを使用して、DavidのIDを正常に確認しました。

この経験は、物理的なIDをチェックすることと比較して、いくつかの重要な利点を提供しました。

まず、ID情報自体が検証されます。

改ざんの影響を受けやすい物理的なIDとは異なり、モバイル運転免許証は発行機関によって暗号署名され、iOSは署名を検証するので、応答を信頼できます。

第二に、その経験はワイヤレスで安全でした。

デビッドはiPhoneを私に渡したり、ロックを解除したりする必要はなく、データはNFCとBluetoothを使用して安全に送信されました。

最後に、これはIDを確認するためのよりプライベートな方法です。

デビッドは、すべてが共有されている物理的なIDとは異なり、年齢を確認するために必要な情報を共有するだけでした。

このAPIで実行できるリクエストの種類について話しましょう。

ディスプレイのリクエストをデモしたところです。

これは、人の名前や年齢を確認する必要がある場合に適しています。

結果はシステムUIに表示され、ID情報はアプリに返されません。

APIはデータ要求もサポートしています。

これらは、住所、生年月日、運転権限など、より幅広いドキュメント要素を要求することができ、結果は処理するためにアプリに返されます。

データ要求を実行するには、アプリに追加の資格が必要になります。

詳細については、ドキュメントを確認してください。

では、表示要求から始めて、これをコードで実装する方法を見てみましょう。

まず、MobileDocumentReaderのisSupportedクラスプロパティを使用して、現在のデバイスがこのAPIをサポートしているかどうかを確認します。

その場合は、リーダーオブジェクトをインスタンス化し、そのprepareメソッドを呼び出します。

これにより、MobileDocumentReaderSessionオブジェクトが返されます。

次に、確認したい要素を使用して運転免許証の表示要求を作成します。

ここでは、運転免許証の所持者が少なくとも21歳であるかどうかを確認しています。

次に、セッションでrequestDocumentを呼び出し、リクエストを渡します。

その後、リーダーUIが表示され、最初にID所有者にデバイスを提示するように促し、次に要求の結果が表示されます。

これは表示要求であるため、requestDocumentメソッドからは何も返されないことに注意してください。

そして、ほんの数行のコードで、アプリにモバイルドキュメント読み取り機能を追加しました。

デフォルトでは、ブランドの名前とロゴは、リーダーのiPhoneにもIDホルダーのデバイスにも表示されません。

ただし、ドキュメントリクエスト中にブランド情報を表示したい場合は、表示できます。

これは、Apple Business Registerとさらに数行のコードで設定できます。

ドキュメントリクエスト時にブランド情報を表示するには、デバイスを準備する際にリーダートークンを渡す必要があります。

このトークンをサーバーで作成する必要があります。

リーダートークンは、Apple Business Registerを通じて設定したキーペアで署名されたJWTです。

サーバーは、ブランドID、キーID、およびリーダーインスタンス識別子を使用してリーダートークンを作成します。

ブランドとキーIDはApple Business Registerを通じて取得でき、アプリのすべてのインスタンスで同じです。

アプリはリーダーインスタンス識別子をサーバーに提供します。

コードに戻ると、アプリはMobileDocumentReaderの設定オブジェクトからリーダーインスタンス識別子を取得し、リーダートークンと引き換えにサーバーに送信します。

このトークンをprepareメソッドに渡して、リーダーセッションを取得します。

次に、リクエストを作成し、以前と同じようにrequestDocumentを呼び出します。

そして今、あなたのブランド名とロゴは、リーダーiPhoneとIDホルダーのデバイスの両方に表示されます。

そして、それは表示要求をカバーしています。

これまでのところ、セッションの準備方法、ドキュメントのリクエスト方法、およびリーダートークンを使用してブランディング情報を表示する方法を見てきました。

では、データ要求を実行する方法を見てみましょう。

これらのリクエストは、より幅広いドキュメント要素をサポートし、APIは単に表示するのではなく、アプリに結果を返します。

このリクエストタイプを使用するには、まず以前と同じようにリーダートークンでデバイスを準備する必要があります。

次に、運転免許証データ要求を作成し、要求するドキュメント要素と、情報を保持するかどうかを指定します。

Calling requestDocumentは、表示要求と同じようにリーダーUIを表示しますが、読み取りが完了すると、UIは自動的に却下されます。

その後、応答は処理するためにアプリに戻されます。

そして、それはiPhoneのTap to Present IDで、ProximityReaderフレームワークに追加したエキサイティングな新しいAPIです。

そして今、デビッドに戻ります。

デビッド:ありがとう、ジョン!それで、私たちは今日何を学びましたか?

Apple Pay Laterのサポートと新しいユースケースによる支払いの強化を見てきました。

注文追跡の新しいAPIを使用すると、アプリやサービス内からウォレットに注文を追加でき、iPhoneのTap to Present IDでモバイル運転免許証を確認する新しい方法があります。

最後に、ビジネスの場合は、Apple Business Registerへの登録を検討してください。

これは、顧客のWalletとApple Payの体験を豊かにするのに役立ちます。

Apple Developerフォーラムにアクセスして、一年中質問をしたり、支援を受けたりできます。

そして最後に、ご意見がございましたら、ご連絡をお待ちしております。

フィードバックアシスタントを使用してこれを行うことができます。

そして、それだけです。このセッションを楽しんでいただければ幸いです。

両方:見てくれてありがとう。

♪ ♪