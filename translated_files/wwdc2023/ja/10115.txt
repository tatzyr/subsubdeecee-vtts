10115

♪ ♪

ウィル：こんにちは、「SwiftUIでデザインする」へようこそ。

私の名前はウィルで、アップルマップチームのデザイナーです。

その後、同僚のフィリップが参加し、SwiftUIを使用して見つけたユニークな利点とアプリケーションについて話し合います。

私たちはデザイナーとしての視点から話し、SwiftUIが私たちのデザインプロセスをどのように強化したかについての個人的な洞察を共有します。

また、watchOS 10で新しく再設計されたマップアプリでの作業の実例も提供します。

マップデザインチームでは、私たちはSwiftUIの大ファンです。

デザインコンセプトを検証するのに役立ち、他のツールでは提供できないユニークな機能を提供し、インターフェイスがどのように構築され、命を吹き込まれるかをよりよく理解することができました。

今年のwatchOSアプリでは、デバイス上でSwiftUIですべてのデザインを開発しました。

これにより、間隔やタイプスタイルからアニメーションやインタラクションまで、あらゆる詳細を制御できます。

今日のセッションでは、SwiftUIがこの設計作業にどのような影響を与えたかを共有したいと思います。

その過程で、SwiftUIがデザイナーにとって強力でありながら親しみやすいツールになる方法、コンセプトの詳細を考え、豊富なインタラクションをデザインし、アイデアを正確にテストし、作品を他の人に効果的に提示する方法について説明します。

SwiftUIがデザインツールとしてどのように機能するかを理解することから始めましょう。

SwiftUIはアプリケーションを構築するための強力なフレームワークですが、デザイナーにとって独自の強力なツールでもあり、より高いレベルのスピードと精度でインターフェイスを作成することができます。

私と同じように、プログラミングのバックグラウンドを持たない多くの人々は、短期間でSwiftUIを学び、生産的にデザインすることができることに気付きます。

SwiftUIは、一般的なことは簡単で、複雑なことは可能であるべきだという考えに基づいて構築されているからです。

実際には、これは一般的なUI要素の再作成に時間を費やす必要がないことを意味します。

そして同時に、何か新しいものを作成する時が来たとき、あなたは制限を感じることはありません。

これは、この概念について私たちが考えたい別の方法です。

いくつかのツールは、物事を簡単にするのが本当に得意です。

彼らは床を下げる。

電子レンジは良い例です。

ほとんどの人は1つを使うことができ、それは多くの簡単なことに最適です。

しかし、派手な夕食を作る必要がある場合、電子レンジは適切なツールではありません。

他のツールは、強力であることに焦点を当てています。

彼らは天井を上げて、あなたが複雑で豊かなものを作ることを可能にします。

これの良い例は、工業用エスプレッソマシンです。

これらの機械は信じられないほどの飲み物を作ることができますが、近づきにくく、学ぶのが難しく、基本的なコーヒーを作るような簡単なことをするのが難しい場合があります。

SwiftUIは、これら2種類のツールのバランスを取ります。

それは簡単なタスクのために床を下げ、新しくて斬新なものを作成するための天井を上げます。

SwiftUIを書くときは、Xcodeというツールを使います。

近年、Xcodeは、リアルタイムでデザインを表示して対話できるビジュアルキャンバスの追加により、デザイナーにとってさらに便利になりました。

ここでは、フォントサイズ、重量、文字列、色を調整して、簡単なテキスト行を変更します。

これらの変更を行うたびに、キャンバス上ですぐに更新されます。

デザイナーにとっても同様に役立つのは、SwiftUIが書かれた宣言的な方法です。

この言語モデルは、私たちの多くがインターフェイスがどのように組み立てられるかについてすでに持っている直感に基づいています。

SwiftUIを書くときは、作成したいものを宣言するだけです。

ボタンのような一般的な要素については、ボタンを書くだけです。

そして、画像については、画像を書くだけです。

これらの要素のスタイリングに関しては、それは同じように簡単です。

SwiftUIは、他のデザインツールと同じように、物事の外観を変更するための修飾子を提供します。

これは、ドロップシャドウや境界線などの効果を追加したり、ユニークなフォントでテキストの形式を変更したり、アスペクト比やパディングなどのプロパティを変更して要素のレイアウトを操作したりすることができます。

SwiftUIは、カラーピッカーなどのシステムコントロールや、プッシュトランジションなどの動作にも簡単にアクセスできます。

これらはフレームワークに直接組み込まれており、箱から出してすぐにネイティブ機能を提供します。

SwiftUIを使用している場合は、Appleハードウェアのユニークな機能にアクセスできることを意味します。

少しの作業で、触覚フィードバック、オーディオフィード、カメラ、ジェスチャー、加速度計などのセンサーなどを活用できます。

また、何十ものAppleフレームワークに入ったすべての作業を利用することもできます。

つまり、MapKitを使用してダイナミックマップでデザインしたり、WeatherKitからライブ気象情報を取得したり、RealityKitを使用して拡張現実でオブジェクトをレンダリングしたりできます。

SwiftUIはiPhone、iPad、Apple Watch、Macで動作するため、これはすべてAppleプラットフォームで発生する可能性があります。

ほとんどの場合、コードを共有し、システム要素が独自に適応する方法を利用することもできます。

今、私たちはデザインツールのレンズを通してSwiftUIについて議論しました。

まず、デザインの詳細を正しく理解することから始めて、実際により良いデザインにどのように役立つかについて具体的にしましょう。

現代のインターフェースは動的です。

私たちが構築する製品には、複雑なフローと高度にインタラクティブな要素が含まれています。

その結果、私たちが下す必要がある非常に多くの重要な決定があります。

SwiftUIは、読み込み時に画像がどのように見えるか、押されたときにボタンがどのように表示されるかなど、注意が必要な重要な詳細をすべてすばやく表示するのに役立ちます。

これらは、製品を完全な気分にさせるタイプのものです。

それらは静的な設計ツールに簡単に隠されますが、SwiftUIのような動的なツールで作業するとすぐに表面化します。

それは、SwiftUIがデバイス上でデザインを簡単に構築できるからです。

これを行うことで、あなたが作っているものをより完全に理解することができます。

別々の部分が一緒に相互作用し、全体としての経験を評価し始めることができます。

このプロセスは、あなたのデザインで何が機能しているのか、そしてまだ注意や磨きが必要なものをすばやく明らかにします。

マップでは、これが非常に役立つことがわかりました。

今年のwatchOSアプリの設計を始めたとき、人々の手首にもっと地図中心の体験を作るのは素晴らしいことだと思いました。

それがどのように感じたかをテストし始めるために、私たちは時計に簡単な地図ビューを置きました。

デバイスでテストしていたので、すぐに問題を発見しました。デジタルクラウンが地図にズームインする速度が速すぎました。

この体験を向上させるために、SwiftUIプロトタイプで複数の値をテストし、自然に感じるズーム速度を見つけるまでデジタルクラウンの感度を調整しました。

ズーム速度を改善したら、地図に追加し始め、最初に興味のあるポイントを追加し、次にUIコントロールを追加し、最後に、地図をよりよく文脈化するために、現在の場所の周りの歩行半径、あなたの周りにあるものとそこを歩くのにおよそかかる時間を示すのに役立ちます。

私たちはこの作業をデバイスに戻し、SwiftUIのプロトタイプに追加しました。

これは、歩行半径の相互作用など、私たちの注意を必要とする新しいものを浮上させました。

具体的には、デジタルクラウンがスクロールされるにつれて、歩行時間がより詳細を使用できると感じました。

それがどのように見えるかを探るために、私たちはいくつかの異なるオプションをプロトタイプ化しました。

私たちのお気に入りは、別のSwiftUIプロトタイプとして開発したこのティッカーアニメーションでした。

私たちはこれらの別々のプロトタイプを取り、それらを一緒に統合しました。

これはさらに多くの疑問につながり、このような一見シンプルなデザインにどれだけの複雑さが隠されているかに私たちを驚かせました。

私たちが設計を始めたとき、これらの詳細はすべて当初不透明でした。

しかし、私たちがプロトタイプを作り始めた瞬間、それらは明らかでした。

SwiftUIは最新のインターフェース向けに構築されています。

これは、特定の設計の詳細に対処し、すべてが全体としてどのように連携するかを体験するのに役立ちます。

次に、フィリップは私たちのお気に入りのトピックの1つであるインタラクションについて話し合います。

フィリップ：SwiftUIは、ジェスチャー、トランジション、アニメーションをファーストクラスでサポートする、インタラクションを設計するための強力なツールです。

あなたは本当にネイティブな環境で働いているので、すべてがネイティブに感じます。

見栄えの良いアニメーションが嫌いなデザイナーはいますか?

SwiftUIのアニメーションは、パフォーマンスが高性能で、使いやすく、完全に中断可能です。

インタラクションは、デザインがどのように見えるかだけでなく、あなたのデザインがどのように感じるかの感覚を与えるので、これは役に立ちます。

多くの場合、インタラクションには、ドラッグ、スクロール、タップなどのジェスチャーが含まれます。

しかし、ハードウェアセンサーなど、インタラクションに使用できる他の入力ソースがあります。

新しいマップのホーム画面で、位置情報ボタンをタップすると、コンパスがアクティブになります。

動き回ると、コンパスは現在直面している基本方向が表示されます。

この相互作用がどのように感じるかを理解するために、時計の内部センサーを使用してトランジションをテストするために、拡大されたコンパスを備えたSwiftUIプロトタイプを作成しました。

このプロトタイプを動作させるのに数時間しかかからなかった。

SwiftUIは、時計の実際のセンサーを簡単に使用できるようにし、コンパスを正確にし、この小さな相互作用を洗練するのに役立ちました。

私たちが作りたかった別のインタラクションは、検索体験に関連していました。

レストランのような場所を探している場合、この新しい分割画面には地図と結果のリストが表示されます。

このデザインには、他のツールでは達成するのが難しかったユニークなスクロールインタラクションが必要でした。

これは、この相互作用の感触を得るために私たちが作ったSwiftUIのプロトタイプです。

私たちの目標は、敏感になりすぎずにすぐに反応させることでした。

大皿はクラウンのゆっくりとした動きに反応し、しきい値に達すると、新しい大皿は触覚応答とともにすぐに所定の位置に遷移します。

一方、速い動きは、よりタイトな春のアニメーションを使用します。

これは、相互作用が素早く感じるのに役立ちます。

これらの調整は、低速と高速の両方でスクロールするときに正しく感じる体験を生み出します。

SwiftUIは、多くのインタラクションにすぐに使える素晴らしい体験を提供します。

そして、あなたが何かカスタムが欲しいとき、それは非常に有能なツールであり、彼らがちょうど良いと感じるまで物事を微調整する力を与えます。

しかし、デザインは、何かがどのように見えるか、どのように感じるかだけではありません。

それはまた、それがどのように機能するかについてです。

設計プロセスで見逃しやすいことの1つは、現実的なシナリオでアイデアをテストすることです。

私は自分のために知っている、私は理想的なシナリオのためのデザインに夢中になることができ、素敵な写真と短いラベルを使用し、一般的に、私のデザインが可能な限り最高に見えることを確認します。

しかし、デザイン作業が進むにつれて、自分のデザインが壊れる場所を見つけ、現実世界でそれらをテストして、それらがどのように持ちこたえるかを確認することが重要です。

SwiftUIを使用すると、現実的なシナリオで作業を簡単に設計および評価できます。

マップでは、人々が幅広い条件で屋外で私たちの製品を使用するので、私たちはこれについてよく考えます。

SwiftUIを使用すると、外出先でデザインをリアルタイムでテストできます。

たとえば、まぶしさと日光が地図作成とインターフェースの読みやすさにどのように影響するかに注意を払います。

これにより、アプリ全体のコントラストレベルを調整して、より読みやすい体験を提供することがよくあります。

私たちが役に立つと思うもう一つの習慣は、私たちの設計に実際のデータを使用することです。

マップでは、当社の製品を使用する際に人々が遭遇するさまざまな種類の地形とルートを考慮します。

Watchアプリで自転車やウォーキングをしている場合、新しい標高グラフは、ルートの標高範囲の概要と進捗状況をリアルタイムで示します。

SwiftUIでこのチャートを構築したとき、さまざまな種類のルートから実際のデータをインポートすることができました。

サンフランシスコで見つかったような丘陵地帯のルートでは、チャートは予想通り機能しました。

しかし、ニューヨーク市で遭遇する可能性のあるような平坦なルートにデータを使用すると、まるで山をハイキングしているかのように、実際よりもはるかに極端に見えたことがわかりました。

多様なルートと標高プロファイルを正確に反映するように、チャートを再検討する必要があることに気づきました。

この場合、平坦なルートが期待どおりに表示されるように、Y軸のスケールを調整する必要がありました。

私たちがよく使うもう1つの練習は、SwiftUIを使用して1回限りのデザインツールを作成することです。

以前に共有した新しい歩行半径には、非常にダイナミックな表面である地図上に適切にレンダリングされたデザインが必要でした。

半径が異なるマップ環境でどのように見えるかをよりよく理解するために、このミニデザインツールを作成しました。

ここでは、線幅、不透明度値、ブレンドモードなどを変更してスタイルを模索しています。

このような小さなパラメータ化されたツールを使用すると、静的な設計ツールで効率的に行うことができるよりも多くのバリエーションをスクラブすることができます。

SwiftUIで簡単に構築でき、特定の質問に答えたり、複雑な問題を解決したりするのに役立ちます。

SwiftUIは、多様なデータセットとさまざまな環境の全体的な理解で、現実世界のシナリオで設計するのに役立ちます。

デザインをテストすることで、人々の日常生活でどのように機能するかをよりよく説明することができます。

アイデアをテストするもう1つの方法は、他の人と共有することです。

SwiftUIは、あなたの作品を発表するための素晴らしいツールです。

デザインを共有する素晴らしい方法はたくさんありますが、デバイスのデモはアイデアに命を吹き込むのにユニークに効果的です。

人々があなたの作品のデモを手に持つことができるとき、デザインは自分自身を説明します。

これはコンセンサスを構築するのに役立ち、誰もがより多くの会議の手間を省くことができます。

今年の仕事では、建物のデモを優先し、できるだけ頻繁にデザインレビューに持ち込みました。

これらのレビューでは、複数のデモを1つのSwiftUIアプリに入れました。

これには、歩行半径や検索結果など、以前に共有したものや、ビジネス情報が表示されるカードなど、他の多くのものが含まれていました。

誰もがデモで遊び、経験についてのフィードバックを提供することに興奮していました。

デザインの説明に時間を費やす代わりに、私たちはそれらの評価により多くの時間を費やすことができました。

SwiftUIで構築したデモは、あなた自身とあなたのチームの両方のために、プロジェクトのリスクを軽減し、混乱を防ぐことができます。

結局のところ、世界のスライドデッキは1つの壮大なデモと比較することはできません。

これらは、SwiftUIを使用して発見した利点の一部です。

SwiftUIは、重要な設計上の決定を表面化し、物事がどのように感じるかを設計し、それらがすべてどのように機能するかについて現実的になり、デバイスデモを使用して他の人とデザインを共有するのに役立つデザインツールとして考えることをお勧めします。

watchOS 10で新しいマップアプリを設計するのに役立ったのは、これらの利点でした。

クリエイティブな仕事に使用するツールは、最終体験に大きな影響を与えます。

設計プロセスでSwiftUIを使用することで、より考慮され、完全で、よく作られた最終製品につながると思います。

SwiftUIを使用することには、まだ話していないもう1つの驚くべき利点があります。

SwiftUIを使用すると、プロトタイプを作成するだけではありません。

あなたはアプリを作っています。

つまり、あなたがデザインしたものを出荷できるということです。

あなたが作成しているアプリは、単なるデザインアーティファクト以上のものになる可能性があります。

エンジニアが使用するのと同じ材料で作業しているので、アプリを作成してApp Storeに提出し、他の人と共有することができます。

マップチームのデザイナーとしてSwiftUIをどのように使用したかを楽しく学んでいただければ幸いです。

SwiftUIについてもっと知りたい場合は、発見できるリソースがたくさんあります。 発見できるリソースがたくさんあります。

始めたばかりの場合は、「SwiftUI入門」を見ることをお勧めします。

本日はご参加いただきありがとうございます。

♪ ♪