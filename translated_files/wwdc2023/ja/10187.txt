10187

♪ ♪

ベン：こんにちは、私はベン・トランブルです。SwiftDataを紹介することに興奮しています。

SwiftDataは、データモデリングと管理のための強力なフレームワークであり、最新のSwiftアプリを強化します。

SwiftUIと同様に、外部ファイル形式のないコードに完全に焦点を当て、Swiftの新しいマクロシステムを使用してシームレスなAPIエクスペリエンスを作成します。

SwiftDataは、シームレスなAPIエクスペリエンスを作成するために、新しいSwift言語マクロによって提供される表現力に依存しています。

また、SwiftUIと自然に統合され、CloudKitやウィジェットなどの他のプラットフォーム機能と連携します。

このセッションでは、新しい@Modelマクロと、Swiftコードから直接データをモデル化するその機能を見て、SwiftDataでデータを取得および変更することを紹介し、最後にSwiftDataとシームレスに連携する他のプラットフォームフレームワークの概要を説明します。

では、@Modelについて詳しく見ていきます。

@Modelは、Swiftコードからモデルのスキーマを定義するのに役立つ新しいSwiftマクロです。

SwiftDataスキーマは通常のSwiftコードですが、必要に応じて、追加のメタデータでプロパティに注釈を付けることができます。

このスキーマを使用して、SwiftDataはモデルオブジェクトに強力な機能を追加します。

@Modelでクラスを飾るのと同じくらい簡単で、スキーマが生成されます。

SwiftDataのモデルは、アプリケーションのスキーマの真実の源であり、永続性の経験を促進します。

この経験の一部は、クラスの保存されたプロパティを変換し、それらを永続的なプロパティに変換します。

モデルに@Modelを追加すると、可能性の世界が開かれます。

SwiftDataは、値タイプのプロパティをネイティブに適応させ、すぐに属性として使用します。

これらのプロパティには、string、int、floatなどの基本的な値タイプが含まれます。

また、コレクションを含む、構造体、列挙型、コーダブル型など、より複雑な値型も含めることができます。

SwiftDataは、参照型を関係としてモデル化します。

モデルタイプとモデルタイプの関係とコレクションの間にリンクを作成できます。

@Modelは、タイプに保存されているすべてのプロパティを変更します。

プロパティのメタデータを使用して、SwiftDataがスキーマを構築する方法に影響を与えることができます。

@Attributeを使用すると、一意性の制約を追加できます。

@Relationshipを使用して、逆の選択を制御し、削除伝播ルールを指定できます。

これらは、モデル間のリンクの動作を変更します。

トランジェントマクロに特定のプロパティを含めないようにSwiftDataに指示できます。

これは前回の旅行の例です。

保存されたプロパティにメタデータを追加して、SwiftDataのスキーマ生成を調整します。

名前に@Attributeを追加し、一意であることを指定できます。

また、@Relationshipとのバケットリスト関係を飾り、この旅行が削除されるたびに関連するバケットリストアイテムをすべて削除するようにSwift Dataに指示することもできます。

SwiftDataモデリングの詳細については、「SwiftDataでスキーマをモデル化する」セッションをチェックしてください。

次に、モデルタイプと、操作の駆動に使用する2つの重要なオブジェクト、SwiftDataのModelContainerとModelContextで作業する方法について説明します。

モデルコンテナは、モデルタイプの永続的なバックエンドを提供します。

スキーマを指定するだけでデフォルト設定を使用するか、設定と移行オプションでカスタマイズできます。

保存するモデルタイプのリストを指定するだけで、モデルコンテナを作成できます。

コンテナをさらにカスタマイズしたい場合は、設定を使用してURL、CloudKit、グループコンテナ識別子、および移行オプションを変更できます。コンテナを設定すると、モデルコンテキストでデータを取得して保存する準備が整います。

また、SwiftUIのビューとシーン修飾子を使用してコンテナを設定し、ビューの環境で自動的に確立することもできます。

モデルコンテキストは、モデルへのすべての変更を観察し、それらを操作するための多くのアクションを提供します。

これらは、更新の追跡、データの取得、変更の保存、さらにはそれらの変更の取り消しのためのインターフェースです。

SwiftUIでは、通常、モデルコンテナを作成した後、ビューの環境からmodelContextを取得します。

ビュー階層の外では、モデルコンテナに共有メインアクターバインドコンテキストの提供を依頼することも、特定のモデルコンテナの新しいコンテキストをインスタンス化することもできます。

コンテキストができたら、データを取得する準備が整いました。

SwiftDataは、述語やフェッチ記述子などの新しいSwiftネイティブ型と、Swiftのネイティブソート記述子の大幅な改善の恩恵を受けています。

iOS 17の新機能で、述語はネイティブのSwiftタイプで動作し、強く型付けされた構築にSwiftマクロを使用します。

これは、NSPredicateの完全にタイプチェックされた最新の代替品です。

オートコンプリートのようなXcodeのサポートにより、述語の実装も簡単です。

サンプルトリップアプリの述語を構築する例をいくつか紹介します。

まず、目的地がニューヨークであるすべての旅行を指定できます。

誕生日に関する旅行だけに絞り込むことができ、過去の冒険とは対照的に、将来計画された旅行にのみ興味を持っていることを指定できます。

フェッチに興味のある旅行を決定したら、新しいFetchDescriptorタイプを使用して、それらの旅行を取得するようにModelContextに指示できます。

FetchDescriptorと協力して、Swift SortDescriptorはネイティブのSwiftタイプとキーパスをサポートするためのいくつかのアップデートを取得しており、SortDescriptorを使用して、フェッチされたトリップを整理する順序を指定できます。

FetchDescriptorは、SwiftDataクエリを調整する他の多くの方法を提供します。

述語とソートに加えて、関連するオブジェクトをプリフェッチに指定したり、結果数を制限したり、結果から未保存の変更を除外したりできます。

SwiftDataはまた、ModelContextを使用してこれらの操作を推進することで、データの作成、削除、変更を容易にします。

他のSwiftクラスと同様にモデルオブジェクトを作成した後、それらをコンテキストに挿入し、変更の追跡や永続性などのSwiftData機能の使用を開始できます。

永続的なオブジェクトを削除することは、ModelContextに削除をマークするように指示するのと同じくらい簡単で、ModelContextに保存して永続的なコンテナにコミットするように依頼することで、これらの変更やその他の保留中の変更を保存できます。

モデルオブジェクトのプロパティ値を変更するのは、通常と同じようにプロパティセッターを使用するのと同じくらい簡単です。

モデルマクロは、保存されたプロパティを変更して、ModelContextが変更を自動的に追跡し、次の保存操作に含めるのに役立ちます。

SwiftDataコンテナとコンテキストとその操作の推進の詳細については、「Dive Deeper into SwiftData」セッションをチェックしてください。

SwiftDataはSwiftUIを念頭に置いて構築されており、それらを一緒に使用するのは簡単ではありません。

SwiftUIは、SwiftDataを使い始める最も簡単な方法です。

SwiftDataコンテナの設定、データの取得、ビューの更新の推進など、これらのフレームワークを直接統合するAPIを構築しました。

新しいSwiftUIシーンとビュー修飾子は、SwiftDataアプリケーションの構築を開始する最も簡単な方法です。

SwiftUIを使用すると、データストアを設定したり、オプションを変更したり、取り消しを有効にしたり、自動保存を切り替えたりできます。

SwiftUIは、その環境でモデルコンテキストを伝播します。

設定したら、データの使用を開始する最も簡単な方法は、新しい@Queryプロパティラッパーです。

データベースに保存されているものを1行のコードで簡単に読み込んでフィルタリングできます。

SwiftDataは、モデル化されたプロパティのまったく新しい観測可能な機能をサポートしています。

SwiftUIは、観察されたプロパティの変更を自動的に更新します。

SwiftUIとSwiftDataは、魅力的で強力なアプリを構築するために協力しています。

これらのフレームワークを一緒に使用する方法については、「SwiftDataでアプリを構築する」セッションをご覧ください。

SwiftDataは、Swiftの機能に対する一流のサポートで設計された、データ管理の強力な新しいソリューションです。

Swiftの新しいマクロシステムを使用して、コードに完全に集中します。

@Modelを使用してスキーマを設定し、モデルコンテナで永続性エクスペリエンスを設定します。

永続性、取り消しとやり直し、iCloud同期、ウィジェット開発などを簡単に有効にできます。

SwiftUIのシームレスな統合を活用して、すぐにアプリにSwiftDataを構築し始めましょう。

SwiftDataで構築するものを見るのが楽しみで、ご覧いただきありがとうございます。

♪ ♪