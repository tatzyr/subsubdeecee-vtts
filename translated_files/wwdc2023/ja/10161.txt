10161

♪ ♪

ニック：こんにちは、私はSwiftUIチームのエンジニア、ニックです。

InspectorはSwiftUIのエキサイティングな新しい要素です。

インスペクターとは何か、そしてAPIの使い方について説明します。

その後、プレゼンテーションのカスタマイズの修飾子を確認します。

インスペクタは、選択したコンテンツのさらなる詳細を表示するビューの名前です。

あなたはおそらく以前に1つと交流したことがあるでしょう。

Keynoteは、インスペクタを使用して、選択、この場合はシェイプフォーマッタの書式設定の詳細を表示します。

ここでは、検査官は末尾のサイドバーとして提示します。

検査官のもう1つの一般的なユースケースは、アプリのメインコンテンツを補完するコンテンツを表示することです。

ショートカットは、この目的のためにインスペクタを使用します。

メインインターフェイスは、ユーザーが編集しているショートカットであり、インスペクタは利用可能なアプリとアクションのライブラリでそれを補完します。

このサンプルアプリを使用して、インスペクタAPIを探索します。

アップルパークとその周辺の動物と知りました。

このアプリは、私が会った動物を保存し、名前を追跡し、お気に入りの果物を追跡し、後で「疑惑レベル」というラベルを付けるこのコラムがあります。

そして今、SwiftUIの検査官に会いましょう!

検査官は、選択した動物に関する詳細の読み取り/書き込みビューを表示します。

ここでは、ファブリツィオ・フィッシュの疑惑レベルを「非常に疑わしい」に調整しています。

実際、私は彼を魚っぽくしておきます。

インスペクタは、macOS、iPadOS、iOSのSwiftUI開発者も利用できます!

インスペクタAPIには、列幅のプログラムによる制御が含まれており、末尾の列の幅を調整することができます。

APIには、提示された状態に対するプログラムによる制御が含まれており、必要に応じてインスペクタの非表示と表示が可能です。

インスペクタは、単なる末尾のサイドバーよりも高いレベルの抽象化です。

コンパクトサイズクラスでは、サイズ変更可能なシートに適応し、インスペクタはより大きなiPadの分割画面に自動的にオーバーレイされます。

SwiftUIにはすでに既存の構造APIのセットがあります。

インスペクタは、ナビゲーションコンポーネントとプレゼンテーションの両方の特性を持つこれらのAPIと一緒に収まります。

NavigationSplitViewやNavigationStackと同様に、インスペクタはシーンの足場を構築するために使用されます。

シート、ポップオーバー、アラート、確認ダイアログと同様に、インスペクタはプレゼンテーションであり、必要に応じて却下して提示します。

新しいインスペクタAPIの採用方法を学ぶ時が来ました。

以前、私はこのセッションのために作ったサンプルアプリを披露しました。

私が各動物の疑いレベルを追跡していることに気づいたかもしれません。

それは私がハイステークスの謎を解こうとしているからです。

誰かがアップルパークで果物を全部食べている!

ニック警部が各動物の詳細を収集できるように、アプリに検査官を追加しました。

インスペクターAPIを採用するのがどれほど簡単だったかをお見せします。途中でこのフルーティーな謎を解くことができるかもしれません。

早く、Xcodeに!ゲームは果物です!

インスペクタを追加する最初のステップは、新しい修飾子であるインスペクタを使用することです。

他のいくつかのプレゼンテーションと同様に、これはブール提示バインディングを取り、その後、末尾のビュービルダーでインスペクタのコンテンツを取ります。

検査官の内容については、私は既製のAnimalInspectorFormを持っています。

私は現在検査されている動物を通過するためのいくつかのカスタム方法を持っています。

そして、私の検査官がいて、macOSの末尾の列として提示しています。

私は素晴らしい検査官の経験の種を植えました。

このAnimalFormはグループ化されたスタイルを使用しています。

フォームスタイルに遭遇したことがない場合は、このように適用されます。

しかし、インスペクタのコンテキストはデフォルトでグループ化されたスタイルを使用するため、自分でスタイル設定する必要はありません。

プレビューのキャンバスでインスペクターと対話することさえできます。

ああ、これは私に思い出させます、検査官はデフォルトで崩壊することができますが、デフォルトではサイズ変更できません。

インスペクタの列幅修飾子を使用して変更できます。

私はいくつかの賢明なデフォルトを使用します。 

最小200、理想300、最大400。

この理想的なパラメータは、最初の起動時の列のサイズになりますが、ユーザーがインスペクタのサイズを変更すると、システムは起動時にそのサイズを持続します。

最後に、表示された状態を切り替えるツールバー項目を追加します。

提示されたプロパティを切り替えるボタンを使用し、そのラベルには、info.circleシステムイメージを使用してラベルを使用します。

ツールバー項目は、インスペクタのビュービルダー内で宣言されているため、インスペクタの上のツールバーのセクションに表示されます。

スクロールすると、ツールバーが期待どおりに動作し、十分なコンテンツがツールバーの下にあるときにシャドウポケットが表示されます。

ビュー階層の他の場所ではなく、AnimalTableのインスペクタ修飾子を意図的に使用しました。

多くのSwiftUI APIと同様に、インスペクタ修飾子は、適用される場所のコンテキストに応じて異なる動作をします。

具体的には、配置は、ツールバーとコンテンツの間に分離がないフルハイトスタイルを使用するか、インスペクタがツールバーの下にネストされているツールバーの下のスタイルを使用するかを決定します。

タイトル区切りは、ツールバーの下の外観のウィンドウの全幅にまたがっていることに注意してください。

同様に、ツールバーのコンテンツはメインコンテンツのツールバーに配置されます。

または、ツールバー修飾子が使用されている場所に応じて、インスペクタのツールバーで。

インスペクタAPIを使用する際に考慮すべき2つのポイントがあります。

まず、インスペクタはNavigationStackやNavigationSplitViewのようなナビゲーション構造の内側または外側に配置されますか?

第二に、ツールバーのコンテンツはインスペクタのビュービルダーの内側または外側にあるべきですか?

私はこれらの構造のうちの2つを歩きます。

まず、インスペクタをナビゲーション構造内に配置し、ツールバーのコンテンツはインスペクタの外側に配置します。

インスペクタがNavigationStackに含まれる場合、インスペクタはナビゲーションスタックのツールバーの下にあります。

ここでは、ツールバーのコンテンツはメインコンテンツのインスペクタの外側で宣言され、ナビゲーションスタックのツールバーにレンダリングされます。

コンパクトな水平サイズクラスでは、インスペクタはシートとして表示され、ツールバー項目はメインコンテンツのツールバーに残ります。

私の可能性の表に戻ります。

2回目の建設では、インスペクタビュービルダー内のツールバーコンテンツを使用して、インスペクタをナビゲーション構造の外側に配置することを検討します。

インスペクタ修飾子がナビゲーション構造の外側に配置されると、インスペクタには後続列の完全な高さが与えられます。

インスペクタにツールバーコンテンツがある場合、そのコンテンツはインスペクタ専用のツールバーセクションに配置されます。

これら2つのツールバー項目は、主要な配置で配置され、インスペクタの上のナビゲーションツールバーの中央に配置されます。

ただし、今回はツールバーのコンテンツがインスペクタのビュービルダー内にあるため、インスペクタがシートとして表示される場合、ツールバーのコンテンツはシート内にあります。

これらの原則はmacOSにまで及びますが、インスペクタはmacOSではシートとして表示されないため、テーブルはよりシンプルになります。

心配すべき唯一の軸は、ナビゲーション構造の内側または外側です。

最後ですが、重要な注意：NavigationSplitView内でインスペクタを使用している場合、インスペクタを詳細列のビュービルダーに配置するか、以前と同様に、ナビゲーション構造を完全に外に配置することもできます。

うわー、この謎解きのすべてが私を空腹にさせています!

ああ！

アプリでNibble Bulletinを取得しています!

このアプリは、ニブル速報をサイズ変更可能なシートとして表示し、果物がいつどこでかじられたかについての情報が含まれています。

これは、iOS 16.4でリリースされたプレゼンテーションのカスタマイズSwiftUIについて話すのに最適な時期です。

フルーツニブル速報はシートであり、検査官ではありません。

プレゼンテーション修飾子を使用すると、シートやポップオーバーなどの他のプレゼンテーションを深くカスタマイズできます。

いくつか試してみます。 

プレゼンテーションの背景修飾子は適切に名前が付けられています。

プレゼンテーションの背景を設定します。

既存の背景修飾子とは異なり、プレゼンテーション固有の修飾子はプレゼンテーション全体を満たし、基礎となるコンテンツを表示できるようにします。

したがって、thinMaterialを使用すると、シートの後ろにリストのヒントが表示されます。

リストをスクロールし、ニブル速報を読みながら容疑者を見たい場合に備えて、シートの背後にあるコンテンツとの相互作用を許可したいと思います。

これは、presentationBackgroundInteractionが有効になっているのと同じくらい簡単です。

調光ビューが削除され、バックグラウンドコンテンツと対話できるようになりました。

PresentationBackgroundInteractionタイプは、プレゼンテーションのディテントを受け入れるupThroughパラメータを持つこともできます。

提供された引数が指定されたプレゼンテーションのディテントの1つと一致する限り、SwiftUIはupThrough引数よりも大きいディテントで調光ビューのみを提供します。

200の高さを超える任意のデテントで調光したいので、まずpresentationDetents修飾子を使用して200の高さデテントを追加します。

現在のメディアのデテントからシートを調整します...

私のカスタム身長200まで。

200までのバックグラウンドインタラクションのみを有効にすると、調光ビューは中規模と大規模のデテントに戻ります。

プレゼンテーションの完璧なルックアンドフィールを得るために、より多くのカスタマイズが利用可能です。

これらの修飾子の多くは、シートだけでなく、他のプレゼンテーションにも影響を与えます。

そして、プレゼンテーション修飾子についてもう一つ。

これらの同じ修飾子は、インスペクターがシートとして提示しているときにインスペクターで構成されています。

以前のインスペクタでは、メディアデテントでバックグラウンドコンテンツのインタラクションを無効にするには、以前と同じ正確なコードを使用できます...

高さデテントを宣言し、同じデテントを介してバックグラウンドインタラクションのみを有効にします。

今、検査官は中程度のデテントとより高いところで暗くなります。

そして、それはSwiftUIのインスペクターです。

このビデオでは、インスペクタAPIとその使用のニュアンスを紹介しました。

私は実演するために私のお気に入りのシートプレゼンテーション修飾子のいくつかを選び、彼らが検査官とどのように構成できるかを示しました。

それで、何を待っているの?

外に出て検査を受けてください。

検査官をアプリのどこかに配置します。

プレゼンテーションをカスタマイズして、それを続けてください。

そして、ニブラーについては、この謎を解くための私たちの努力は無駄だったと思います。

♪ ♪