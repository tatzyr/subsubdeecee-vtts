10094

♪まろやかなインストゥルメンタルヒップホップ♪

♪まろやかなインストゥルメンタルヒップホップ♪

こんにちは！「共有スペースのためにiPadとiPhoneのアプリを強化する」へようこそ。

私の名前はジョン・マークです。

私はプラットフォーム互換性エンジニアです。

ほとんどのiPadとiPhoneアプリは、すでに行ったハードワークを活用し、Appleの最新プラットフォームで動作させ、変更なしでうまく動作します。

始めたばかりの場合は、まず「共有スペースでiPadとiPhoneアプリを実行する」を見て、システムの組み込み動作、機能の違い、テスト設定について学んでください。

このビデオでは、iPadやiPhoneのアプリを素晴らしいアプリから、この新しいプラットフォームでくつろげるアプリに強化する方法について説明します。

新しいインタラクション、ビジュアルアピアランスの変更、およびアプリが期待するメディア録画と再生機能を確認します。

このプラットフォームでのインタラクションは楽しく、身近に感じます。

重要な要素の1つは、新しい自然な入力技術です。

タップを使用すると、人々はボタンを見て、指を一緒にタップして対話することができます。

タップして切り替えたり、タップしたり、長押ししたり、スワイプしたりしてスライダーを操作したり、ボタンをタップしたりできます。

直接タッチするには、アプリに手を差し伸べ、1本の指でスペース内のボタンをタッチする必要があります。

インタラクション方法に関係なく、ボタンはインタラクションの精度に役立つ継続的な視覚的フィードバックを提供します。

このビデオでは、カーソルは人が見ている場所を表しています。

ボタンを見るとき、ハイライトホバー効果はコントロールの色を着色し、フォーカスがどこにあるかを理解するのに役立ちます。

このリストを見ながら、各項目がハイライトされていることに注意してください。

そのハイライトは左または右の焦点に続くので、何が起こっているのかは明らかです。

ホバー効果は、人々がどこを見ているかを知らせるためにコントロールに存在します。

非アクティブなコントロールはホバー効果を受けません。

システムコントロールは、これらすべてのホバー効果を処理します。

標準のコントロールのみを使用している場合は、ここで変更することなくロックンロールする準備ができています。

カスタムコントロールを構築する場合、ホバーエフェクトにはチューニングが必要になる場合があります。

以下は、iPadのカードベースのインターフェースを備えたアプリの例です。

各カードには、写真、タイトル、日付、メニューボタンが含まれています。

これはシミュレーターで実行されている同じアプリです。

メニューボタンはシステムコントロールなので、すでに期待どおりに機能しています。

ただし、各カードは.onTap修飾子を備えた単純なVStackであるため、ホバー効果を受け取りません。

そのカード全体がタップターゲットであるため、利用可能なインタラクションがあることを人々に知らせるためにホバー効果が必要です。

それを修正するためにそれらのカードの1つに集中しましょう。

ボタンのようなシステムコントロールは、ホバー効果を自動的に受け取るので、ここでメニューとして使用されるボタンにはすでにホバー効果があります。

ただし、この例では、カード全体をクリックして詳細を表示します。

VStackに.hoverEffectを追加することで、カード全体がインタラクションの更新に利用可能になり、タップ可能であることを人々に知らせます。

多くのカスタムビデオプレーヤーはヒットターゲットを最適化しているので、人々は彼らと対話するためにそれほど正確である必要はありません。

iPadのカスタムビデオプレーヤーのこの例では、タップターゲットは、スキップフォワードボタンとスキップバックボタンのシンボルよりも大幅に大きくなっています。

ここの境界線のボックスは、人々が対話できるタップターゲットのサイズを示しています。

シミュレータでは、ホバー効果がこれらのタップターゲットを強調表示し、エリア全体にタップ可能な領域が表示されます。

共有スペースの同じ例では、ホバー効果のある非表示の属性が表示されるようになりました。

この外見の変化は真実を暴露しているが、正しいとは感じない。

例を拡大すると、既存のタップ動作を外観を減らして維持するには、.contentShape修飾子にカスタム形状を追加します。

カスタムシェイプを使用することで、アプリはタップ可能な領域よりも小さくなる.contentShape修飾子に原点とサイズを提供できます。

このビデオでは、ボタンを直接見ている人にはホバー効果が表示されます。

そして、この変更により、ホバー効果の範囲外をタップすると、iPadとiPhoneの経験からの期待と一致します。

完全な例でシミュレータに戻ります。

このカスタムシェイプでは、ホバー効果はボタンだけに表示されますが、ボタンの外側をタップすることができます。

素晴らしい！

ほとんどの場合、システムコントロールのホバー効果はうまく機能します。しかし、ホバー効果をカスタマイズする機能は強力です。

新しいホバーエフェクトAPIを使用すると、アプリはカスタムボタン、カスタムシェイプのホバーエフェクトを作成したり、必要に応じてコントロールをオプトアウトしたりできます。

それを行う方法を調べてみましょう。

.buttonStyleは、アプリ内のすべてのボタンにカスタムスタイルを一貫して適用するのに最適な方法です。

カスタムスタイリングを適用すると、ホバー効果をオフにします。

カスタム .buttonStyle ボタンでホバー効果を再度有効にするには、.hoverEffect() 修飾子をアプリ要素に追加します。

これがカスタムボタンスタイルの私のシンプルなボタンです。

カスタムボタンスタイルを見ると、ここでは、カスタムスタイリングでボタンにホバー効果を追加するために.hoverEffect修飾子を追加する必要があります。

多くのアプリには、楽しくてカスタムインターフェースがあります。

この養蜂アプリの例では、ボタンはハニカムであり、各ハニカムセルは独自のタップターゲットです。

カスタムシェイプボタンを実装するアプリは、ホバー効果をレンダリングする方法をシステムに通知する必要があります。

ここのフレーム幅は、形状が占める領域よりも大きいため、デフォルトのシステムが提供するホバー効果は、形状に無制限のボタンフレーム全体をカバーしています。

カスタムシェイプを.contentShape修飾子に渡すことで、ホバーエフェクトはボタンの境界にトリミングされます。

ここにそれを付け加えましょう。

人々が個々のボタンを見ると、ホバー効果がボタンの形状のジオメトリにトリトリムされるので、今では完璧です。

アプリの状態のために無効になっているシステムコントロールは、自動的にホバー効果を取得しません。

アプリが特定のインターフェイス要素を強調したい場合は、個々のアイテムをオプトアウトできます。

人々は、ホバー効果がシステム全体で明らかで一貫していることを期待しているので、控えめにオフにする必要があります。

このシステムは、各手が別々のタッチであるため、最大2つの同時入力を受け入れます。

カスタムジェスチャーリコグナイザもサポートされていますが、自然な入力期待でスムーズに実行するために更新する必要があるかもしれません。

ゲーム、または迅速または同時入力を必要とする他のアプリは、ゲームコントローラーをサポートする必要があります。

iPadとiPhoneのアプリは、長い間、ゲームコントローラーのサポートを示すことができました。

このプラットフォームでは、追加の入力方法にとってさらに重要です。

GCSupports ControllerUserInteractionをInfo.plistに含め、ゲームコントローラー機能を追加することで、アプリの製品ページにバッジを追加します。

これにより、App Storeを使用してゲームを見つける人々とのコミュニケーションが改善され、すべてのプラットフォームでゲームコントローラーの可用性がさらに明確になります。

App Storeのゲームコントローラーとゲームの詳細については、ビデオ「ゲームコントローラーの進歩」と「空間コンピューティングのための素晴らしいゲームを構築する」をご覧ください。

このプラットフォームで実行されているiPadとiPhoneのアプリは、iPadのライトモードの外観と一致します。

ほとんどの場合、それは素晴らしく見えます。

システム標準のコントロール、レイアウト、色を使用している場合、ここには新しい仕事はありません。

このシステムは、動的コンテンツスケーリングを使用してレンダリングを最適化するため、すべての画像とテキストは、どの距離からでも、どの角度でも常にシャープです。

最高の体験を提供するために、ベクターベースのコンテンツを使用してください。

iPadとiPhoneのプロンプトはモーダルに表示されるので、続行する前にプロンプトを操作する必要があります。

この新しいプラットフォームでは、プロンプトはモーダルに表示されません。

位置情報の許可を求める、Appleでサインイン、OAuthなどのプロンプトは、続行する前に処理する必要はありません。

これらのインターフェースは、独自のクロムとウィンドウ体験を生み出します。

アプリは、プロンプトが表示されるケースを認識して処理する必要がありますが、すぐにキャンセルや成功コールバックは得られない場合があります。

コンテンツをキャプチャ、共有、投稿することは、自分自身を表現するための素晴らしい方法です。

このプラットフォームでは、アプリが知っておくべきいくつかの違いがあります。

複数の外部カメラと内部カメラがあります。

ただし、これらのカメラの多くはアプリでは使用できません。

ディスカバリーセッションを使用して、使用できるカメラとマイクを検出することが重要です。

アプリが優れたキャプチャ体験を確実にするために、AVCaptureDeviceディスカバリーセッションを使用してハードウェアの可用性を確認します。

さらに、他のプラットフォームと同様に、使用前に許可を求める必要があります。

最後に、特定のハードウェアやソフトウェアのバージョンに言及することなく、使用を人々に知らせるために、承認プロンプト文字列を一般化します。

アプリがカメラとマイクの可用性を要求すると、iPadやiPhoneとは異なる値が返されることを期待します。

マイクを照会すると、アプリは単一の.frontロケーションマイクを受け取ります。

カメラを照会するとき、アプリは2つのカメラを見つけます。

.Backカメラは、カメラグリフのない黒いカメラフレームを返します。

これは、バックカメラの可用性を想定したアプリをサポートする機能しないカメラです。

フロントカメラを照会するとき、アプリは単一のコンポジットカメラを見つけます。

デバイスに空間ペルソナが見つからない場合、カメラフレームはアプリに戻りません。

AVRoutePickerViewとPicture in Pictureは、このプラットフォームでは利用できません。これは、システムが提供するプレーヤーに反映されています。

カスタムプレーヤーを実装するアプリは、これらのコントロールを表示する前に、両方の可用性を確認する必要があります。

最後に、このプラットフォームは一度削除されるとロックされます。

バックグラウンドオーディオを利用するアプリは、デバイスがロックされているときにこのバックグラウンドモードがなくなり、完全に停止されるため、この違いを考慮する必要があります。

メディアをインポートするアプリは、キャプチャハードウェアが利用できない場合は、代替ソースを考慮する必要があります。

iCloudやドキュメントやフォトピッカーなどのコンテンツピッカーなどのオプションは、優れた選択肢です。

さらに、VisionKitのVNDocumentCameraViewControllerを使用するアプリは、近くのデバイスのContinuity Cameraで自動的にキャプチャします。

これらの代替案は、既存のiPadおよびiPhoneアプリにさらに多くのメディアインポートオプションをもたらします。

iPadとiPhoneのアプリは、この新しいプラットフォームでうまく動作します。

ホバーエフェクトがすべてのインタラクティブコントロールに追加されていることを確認してください。

ゲームの場合は、コントローラーのサポートを追加して、プレイヤーが引き続き素晴らしい体験をできるようにします。

最後に、使用前に可用性を確認して、カメラとマイクの存在に関する仮定を確認してください。

これで、この新しいプラットフォーム用にiPadとiPhoneのアプリを最適化する方法がわかりました。

共有スペースであなたのアプリを使うのを楽しみにしています。

♪