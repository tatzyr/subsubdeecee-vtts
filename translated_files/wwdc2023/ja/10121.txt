10121

♪ ♪

ジェン：こんにちは、私はアップルのSafariとWebKitのエバンジェリスト、ジェン・シモンズです。

WebKitにとって素晴らしい年でした。

今年中にSafariの複数のリリースですでに140以上の新しいウェブ技術を出荷しており、この秋にはさらに数十の新しいウェブ技術が登場します。

たくさんあるので、すべてをカバーする方法がないので、CSSに焦点を当てることにしました。

このセッションでは、レイアウトのまったく新しい可能性、今日の素晴らしいディスプレイを最大限に活用する全世代のカラーツール、新しい疑似クラスのトリッキーな問題を解決する生産的な方法、タイポグラフィを次のレベルに引き上げるCSSなど、CSSの最もエキサイティングな新機能のいくつかを見ていきます。

すでに出荷されたもの、Safari 17で出荷されるもの、そして将来のために取り組んでいることを共有します。

今日の未来を見るには、Safari Technology Previewをダウンロードしてください。

そこには石積みのレイアウトがあります。

何年もの間、これはウェブ上で人気のあるレイアウトパターンでした。

さまざまなサイズのコンテンツをパックするのに最適な方法です。

CSS Multicolumnを使用して、この図形でレイアウトを達成できます。コンテンツの順序が最初の列から始まり、ビューポートの下を流れ、2番目の列の一番上に戻り、下に流れ、次に3番目の列に進みます。

これがあなたのプロジェクトでうまくいくなら、素晴らしいです。

CSS Multicolumnは、何十年もブラウザにあったレイアウトメカニズムです。

しかし、多くの場合、これは機能しません。

代わりに、デザイナーはコンテンツをページ全体に流れ、各アイテムをできるだけトップに近い列に配置します。

これは、ユーザーがスクロールするときにより多くのコンテンツが下部に読み込まれる場合に特に必要です。

そのため、ウェブサイトはこれを達成するためにJavaScriptを使用しなければなりませんでした。

しかし、JavaScriptはCSSよりもレイアウトが遅く、より脆弱です。

コーディングが難しい。

レイアウトは本当にCSSに属しています。

CSSグリッドの一部として石積みを作成する提案は、数年前に開始され、フラグの背後にある実験としてFirefoxで実装されました。

私たちはこのアイデアを信じており、それがウェブに出てくるのを見たいので、今はSafari Technology Previewにあります--デフォルトでは--あなたはそれを試してみることができ、あなたの考えを教えてください、そして私たちがそれを前進させるのを手伝ってください。

ここに例があります。

私は非常に少ないCSSでこの典型的な石積みレイアウトを作成しました。

表示：グリッドが開始し、グリッドテンプレート列は、より多くのスペースが利用可能になったときに自動的に数を増やす柔軟な列を提供します。

次に、grid-template-rows:石積みは、わずか1行のコードで行方向の石積みパターンにアイテムをパックします。

CSSグリッドのこの部分を作ることは、私たちに途方もない柔軟性を与えます。

ある次元で石積みを定義し、グリッドの力を使用して、fr単位で列を異なるサイズにしたり、最初の列を固定幅にしたりするなど、他の次元でやりたいことを何でも行うことができますが、中央はfr単位を使用して柔軟で、3番目はminmax値で柔軟になります。

MasonryとGridを組み合わせることで、人気のあるJavaScriptライブラリよりもはるかに強力なメカニズムになります。

これはすべてまだ進行中の作業です。

CSSワーキンググループでは、ブラウザメーカーなどが集まり、完全にアクセス可能であることを確認する作業を含め、今後の道筋に合意するために、より多くの議論が必要です。

準備ができたら、サファリで石積みを出荷することを楽しみにしています。

今日、ブラウザで出荷される準備はできていますか?

マージントリム。

新しいマージントリムプロパティを使用すると、コンテナに押し上げる要素からマージンを簡単に削除できます。

説明させてください。

見出しと3つの段落があると想像してみてください。

それらはすべて上部と下部の余白があり、それらの間にスペースと、グループ全体の上下のスペースがあります。

カードのクラスを持つ記事要素であるコンテナに適用されるパディングもあります。

見出しの上の余白とコンテナの上部のパディングが一緒に追加され、ボックスの上端とテキストの最初の行の間にどれだけのスペースがあるかが決定されます。

底でも同じです。

最後の段落の下のマージンは、コンテナの下部パディングに追加され、おそらく意図したよりも多くの空白が追加されます。

代わりに私たちが望むのは、上部と下部にパディングのみを持ち、マージンを伴わないことです。

これにより、箱の周りにより均一なスペースが得られます。

必要なのは、コンテナに押し付けるマージンを排除する方法です。

あなたはおそらく、見出しから上のマージンを手動で削除し、最後の段落から下のマージンを手動で削除し、最善を期待して、これを処理しようとしました。

しかし、その後、予期しないコンテンツが表示されます。

たぶん、別のインスタンスはh3で始まり、誰もそのコードを書かなかったか、誰かがh2を真ん中に貼り付けて、トップマージンが欠けています。

マージントリムは、より良い解決策を提供します。

代わりに、コンテナにmargin-trim: blockを適用することで、欲しいものを正確に尋ねることができます。

Safari 16.4でマージントリムのサポートを追加しました。

Margin-trim: inlineを使用して、インライン方向にマージンをトリミングすることもできます。

それはマージントリムです。

それは単に、より堅牢な方法で共通のニーズを解決します。

レイアウト用のCSSは、2017年3月のCSSグリッドの登場以来、過去6年間で本当に成熟しています。

今日のレイアウトは、10年前よりも根本的に改善されています。

同じ期間に、ウェブデザイナーや開発者によって少し気づかれていない別の急進的な飛躍がありました:色の飛躍。

世界は、特に外は色彩に満ちています。

ダイナミックレンジ、彩度、すべてのニュアンスと可能性。

この図が人間の目が見るかもしれないすべての色を表していると想像してみてください。

これらの色のサブセットの周りの線は、ウェブ上のデフォルトの色域であるsRGBで表現できるものを示しています。

それは確かに私たちが90年代に使用したものよりも優れていますが、sRGBの限界を超えて、より多くの視覚スペクトルを伝えるのは素晴らしいことです。

P3カラーはまさにそれを行います。

Appleは、7年以上前にハードウェアとソフトウェアで広域ディスプレイP3のサポートを開始しました。最初は2015年後半にiMacで、次にiPad、iPhone 7からiPhoneで始まりました。

P3色域は、sRGBよりも50%多くの色を表示できます。

現代のデバイスのディスプレイは素晴らしいです。

これらはすべて、より明るい色とより深い彩度を持つ広色域P3をサポートしています。

そして、ウェブデザインを最大限に活用するのは長い過去のことです。

ユーザーのハードウェアとソフトウェアでできることに応じて、条件付きでCSSを指定する方法が必要な場合は、色域サポートをテストするためのメディアクエリがあります。

2016年にSafari 10.0でColor Gamut Media Queryのサポートを出荷しました。

色を選ぶことになると、もちろん、多くの方法があります。名前付き色、16進値、赤、緑、青で考えるRGB関数。

色相、彩度、軽さのためのHSL、そしてその色相、白さ、黒さを持つHWB。

色をモデリングするこれらの方法はすべて、同じ結果を生み出すことができます。

これらのモデルはすべてsRGB色域に制限されています。

これらのカラーモデルを使用する場合、P3にのみ存在する色を表現することは不可能です。

そのため、CSSで定義されている新しいものが4つあります。

LCH、OKLCH、LAB、OKLAB。

これらのモデルは、ディスプレイP3、または将来ウェブに出てくる可能性のあるその他の色域を含むあらゆる色域で色を表すことができます。

それらはそれぞれ3つの値で定義されています。

4つすべてで、「L」は明度LCHを表し、OKLCHはまた、クロマ、またはその色がどれほど強いか、色相、または色スペクトルのどこにあるかの値を取ります。

LABとOKLABは、A軸に沿った値、または色が緑から赤への軸に沿った値とB軸、または青から黄色までの値を宣言します。

それぞれに新しい機能を使用して、LCH、OKLCH、LAB、OKLABで色を作成できます。

ブラウザがP3のサポートを追加した場合、これらの機能はP3にのみ存在する色とsRGB内の色を表すことができます。

Safari 15.0と15.4でこれらの機能のサポートを出荷しました。

Chrome、Edge、Firefoxは、Interop 2023プロジェクトのおかげで、今年サポートを追加しています。

Color() 関数で色を定義し、使用する色域を指定することもできます。

カラー関数は、スラッシュの後に赤、緑、青、プラスアルファの値を取ります。

しかし、例えば、100%緑がどのような色を生み出すかは、色域によって異なります。

6年以上前にSafari 10.1でこのカラー機能を使用して、CSSでP3カラーを作成する機能を最初に出荷しました。

これらの色域とカラーモデルの出現により、CSSワーキンググループは、その力を利用する追加のツールを定義しました。

彼らのウェブ標準は、今年これらのツールを出荷するのに十分なほど成熟しました。

別の色を参照しながら、CSSで色を定義したいと思ったことはありますか?

しばらくの間、プリプロセッサで同様のことをすることが可能でした。

さて、相対的な色の構文では、まさにそれを行うことができます。

色を定義する多くの方法と同様に、カラー関数の1つから始めます。

これにより、新しい色の作成に関連する数学的計算を行うためにどのカラーモデルが使用されるかが決まります。

次に、どの既存の色から始めたいかを述べます。

次に、機能からチャンネルを取り出し、それらを操作します。

最初の例では、R、G、およびBチャンネルは放置されていますが、/ 0.7はこの色に70%の不透明度を与えるようにブラウザに指示します。

LABの2番目の例では、ブラウザにLを2で割って計算するように指示しました。これは、AとBのチャンネルをそのままにして、明るさを半分にカットし、色を暗くします。

そして、3番目の例では、OKLCHでは、LチャンネルとHチャンネルをそのままにして、C、クロマを3分の1でカットし、色の強度を排出します。

相対色の構文は、デザインのシステムを作成するときに便利な、色のパレット全体を定義する作業を迅速にします。

新しいカラーモデルは、グラデーションを定義する方法も改善します。

これは、白から青になる単純な線形グラデーションです。

何年もの間、これらの種類のグラデーションは常にsRGB色空間を使用して計算されていました。

さて、Safari 16.2から、グラデーションをsRGBで計算したいと明示的に述べることができます。

または、色空間を変更することもできます。

sRGB-linearはsRGBに似ていますが、色間の遷移をより直線的な方法で滑らかにします。

しかし、これらの両方が紫色の色調に移行していることに気付くかもしれません。

OKLABに切り替えると、真ん中で計算された色ははるかに青く、おそらくそれが私たちが好むものです。

LCHはたまたま同様の結果を生み出しますが、同一ではありません。

OKLCHは、黄色、緑、ティールのスペクトルを介して遷移します。

LABはたまたまはるかに紫色です。

または、これらの結果が気に入ったら、HSLまたはHWBを使用できます。

それは本当にプロジェクトと私たちが望むデザイン効果に依存します。

これらのどれも正しくも間違ってもいません。どれも最高ではありません。

場合によります。

グラデーションを定義するための新しいオプションがたくさんあります。

色空間の切り替えは大きな影響を与えます。

これは、色の変化をアニメーション化するのにも当てはまります。

色空間は、その間に起こることの補間に影響を与えます。

色を混ぜ合わせるときにも同じ影響が当てはまります。

はい、CSSで色を混ぜることができます。

Safari 16.2から、新しいカラーミックス機能があります。

混合する2つの色をリストし、使用する色空間を指定し、ブラウザはそれらを一緒に混合します。

グラデーションの真ん中から、この紫がかった青がわかるかもしれません。

代わりに、グラデーションで使用するために検討した他の色空間のいずれかに切り替えることができます。

これらはすべて異なる結果を生み出します。

デフォルトでは、カラーミックスは1つの色の50%と他の色の50%から新しい色を作ります。

しかし、80/20、または30/70の任意の比率に変更できます。

また、2つの数字を合計100%未満に設定できるため、色が半透明になります。

ここでは、白を30%、青を30%に設定し、結果の色の不透明度を60%にしました。

Currentcolorキーワードを使用して、現在のテキストの色を好きなものと混ぜることもできます。

この場合、濃い緑色のリンク色と40%の白を混ぜて、ホバー色で使用する明るい緑色を作成します。

ここにはたくさんあります。

P3色域、新しいカラーモデルと機能、グラデーションやアニメーションのカラースペースを変更する機能、既存の色のチャンネルを変更したり、ミキシングしたりして色を定義する新しい方法 - ウェブ用のデザインで色を活用することに関しては、ここには多くの可能性があります。

P3カラーのサポートについて知っておくべき最後のこと。

ブラウザは、P3色を使用するCSSまたはJavaScriptの特定の機能をサポートする必要があるだけでなく、もちろん、ユーザーのオペレーティングシステムとディスプレイがそれをサポートする必要があるだけでなく、ブラウザは、DOMの異なる部分で、Webページの各特定の部分のP3でのレンダリングをサポートする必要があります。

普遍的に機能すると仮定する前に、各ブラウザの詳細を確認したいと思うでしょう。

SafariでP3の最新情報をお伝えします。

7年前にSafari 10.0でP3の画像のサポートを出荷しました。

Safari 10.1では、ほとんどのWebページにP3の全体的なサポートを追加しました。

Safari 15.2では、Canvas要素内にサポートを追加しました。

また、Safari 16.4では、drawingBufferColorSpaceを使用してWebGL CanvasでP3のサポートを追加しました。

開発者ツールに関しては、Safari 13.1では、P3でのみ利用可能な色を簡単に見つけたり、あるカラーモデルから別のカラーモデルに色を変換したりできるWeb Inspectorのカラーピッカーを出荷しました。

また、Safari 15.2では、WebインスペクタのグラフィックスタブにP3のサポートを追加しました。

私たちはまだもう少しやるべきことがあります。

まず、WebGL Canvas内でのサポートを拡張し、unpackColorSpaceの使用を含めます。

また、Web標準に関する議論がまだ続いているため、まだ行っていないSVGフィルタにP3のサポートを追加します。

今のところ、SVGフィルターを適用すると、すべてのブラウザで色がsRGBに平坦化されます。

特にこれらの機能の多くが最終的にブラウザで利用可能になるので、ウェブ上の色を再考するのは本当にエキサイティングな時期です。

CSSの進歩は、デザインの可能性を変えるだけでなく、それらのデザインのコーディングも容易になります。

:User-valid および :user-invalid 疑似クラスは、ユーザーがフィールドに正しく入力したかどうかに応じて、フォームのスタイル設定方法を提供します。

何年もの間、:validと:invalidの疑似クラスは本当に役立つように見えました。

このフォームフィールドのスタイルを設定して、ユーザーが間違いを犯したときに警告したい。

だから、無効な入力を選択するために:invalid擬似クラスを試してみます。

:Has input:invalidで、ラベルをターゲットにします。

そして、::before擬似要素で「x」を挿入するので、コミュニケーションは色だけに依存しません。

結果を見てみましょう。-結果を見てみましょう。

誰かが始めたら--ええ、それは素晴らしいことではありません。

ユーザーが入力を開始するとすぐに、ブラウザはまだ有効なメールアドレスではないため、無効とマークします。

ユーザーがそれを正しくする機会を得る前に:invalidは入力を間違ってマークするので、開発者は代わりにJavaScriptを使用しています。

User-validとuser-invalidは、この問題を解決します。

より複雑なアルゴリズムを使用して、フォームフィールドが有効または無効と見なされるタイミングを判断します。

Safari 16.5で出荷しました。

今、私たちは改善された結果を見ることができます。

彼らがそれを正しく持っているなら、赤い警告はありません。

そして、誰かがフィールドに誤って記入した場合、私たちが戻って修正するように警告したいときに、彼らがフィールドを去った後に赤い警告が表示されます。

ご覧のとおり、:user-invalidは:has()と組み合わせると特に強力です。

実際、今年は、さらに多くの疑似クラスで動作させることで、:has() の力を高めました。

:Has(:lang()) を使用すると、特定の言語の存在に応じて、ページ上の何かをスタイル設定できます。

そして、メディア疑似クラスの:has()サポートは、オーディオとビデオの再生の状態に応じて条件付きスタイリングを提供します。

:Dir擬似クラスは、言語方向のサポートに関してはギャップを埋めます。

タイプセットされる言語に応じて、テキストは左から右へ、または右から左に流れることがあります。

これはしばしばLTRとRTLと略されます。

最近では、CSSにはますます論理的な特性があり、左または右ではなく、テキストフローの開始と終了を参照することができます。

たとえば、margin-leftとmargin-rightの代わりにmargin-inline-startとmargin-inline-endを使用して、すべての言語で動作するCSSを簡単に記述します。

しかし、設計のすべてが論理的なプロパティを使用して処理できるわけではありません。

これは、新しい方向の疑似クラスが役立つ場所です。

ここには、テキストの方向に応じて変換したいアイコンがあります。

ヘッダーにLTRの方向がある場合、SVGを一方向に回転させ、ヘッダーがRTLの場合、他の方向に回転させます。

これは、複数の言語の方向性をサポートするために過去に使用されたものよりもはるかに単純なテクニックです。

:User-validと無効、:has()への追加、および:dir擬似クラスはすべて、堅牢で簡潔なコードを書くことを容易にします。

今年はまた、あなたのタイポグラフィの詳細を絶対的な完璧に洗練することを可能にするいくつかの機能をもたらします。

まず、新しいラインハイトユニットを見てみましょう。

CSSでは、長さを定義するために使用できる多くの異なる種類の単位があります。

一部のユニットは、svhやlvhなどのビューポートサイズに対して相対的であるか、cqbやcqiなどのコンテナのサイズに対して相対的です。

他のユニットは、タイポグラフィのサイズに相対的です。

1つのexはフォントのxの高さに等しい。

文字の1つのchは、フォント内のゼロ文字のインラインサイズに一致します。

そして、1つのICは、CJKスクリプトの表意文字のインラインサイズです。インラインサイズは、水平書き込みモードでは幅、垂直書き込みモードでは高さです。

これらのユニットはしばらくの間、ブラウザでサポートされています。

さて、タイポグラフィのサイズにも相対的な新しいユニットがあります。ラインの高さのlhユニット、ルートラインの高さのrlhです。

これらのユニットを使用すると、レイアウト内のあらゆるものを行間のスペースの量に接続できます。

たとえば、ルートHTML要素で行の高さを1.4に設定しました。

次に、セクション要素、この白いカードに2rlhのパディングを入れました。

次に、見出しと段落の余白をブロック方向に1rlhに設定します。

今、テキストの行の間には、スペースの代わりにテキストがあるのと同じくらいのスペースがあります。

それは、タイポグラフィで垂直リズムとして知られているものを設定します。

ラインの高さの単位は、垂直リズムを乱す可能性のある状況を防ぐことはできませんが、この長年のタイポグラフィの伝統を解き放つことにはるかに近づける信じられないほどシンプルなツールをウェブにもたらし、タイプとタイプの周りの空白の間に親密な接続を作成することができます。

ウェブ上のデジタルタイポグラフィを伝統的な組版の高水準に磨くには、多くの課題があります。

これらのうちの1つはフォントサイジングに関係しています。

ウェブデザイナーであれば、フォントファミリーとフォントサイズを慎重に選択している可能性があります。

しかし、必要なフォントはダウンロードされないか、ユーザーのオペレーティングシステムで利用できない可能性があります。

そのため、ブラウザにフォールバックプランを提供するために、フォントファミリのフォントのスタックを宣言するのがベストプラクティスです。

最初に見つかったフォントは、使用されるフォントです。

同様に、フォントが特定のサイズで視覚的に表示される大きさは、ウェブ開発者が制御できるものではありません。

左側にSFハロー、右側にバスカビルがあります。

それらはまったく同じサイズにタイプセットされていますが、SF Helloはラインボックス内のより多くのスペースを埋めるため、はるかに大きく見えます。

それはより大きなxの高さを持っています。

この違いは、フォントファイルが作成されたときに行われた選択によって引き起こされます。

ここでは、フォントサイズ：1.4remで記事をタイプセットしている例があり、その記事内にあるコードのシンプルなフォントスタックを定義しています。

コードが段落テキストよりも小さく見えることがわかります。

Fsを比較すると特に目立ちます。

コードがモノスペースに戻ると、段落テキストよりも大きく見えます。

コードのフォントサイズを記事のフォントサイズの120%に調整することで補償を試みることができます。これは、Courierが使用されているときにサイズを均等化するかもしれませんが、ブラウザがモノスペースにフォールバックすると、コードは段落テキストよりもさらに大きくなります。

必要なのは、ブラウザに「この2つのフォントを同じサイズのように見せてください」と伝える方法です。

それはまさにfont-size-adjustが行うことです。

フォントの大きさを調整して、視覚的な一貫性を作り出します。

私はCSSの1行を追加しました-- font-size-adjust: 0.47--そして今、私のタイプセットコードは、スタック内の両方のフォントでも、段落テキストと視覚的に一致しています。

しかし、なぜ0.47?この数字はどういう意味ですか?

ウェブで使用できるラテン語のフォントには、フォントのサイズとxの高さの比率があります。

その比率は少し恣意的ですが、通常は約50%です。

Font-size-adjust: 0.47を記事要素に適用することで、私は実際に記事内のすべてのフォントのサイズを変更するようにブラウザに指示しています - 段落フォント、コードフォント、どちらのスタックからどのフォントを使用しても - それぞれのxの高さは常に指定されたフォントサイズの47%です。

私が0.47を選んだのは、フォントサイズ調整を適用せずにアイオワンオールドスタイルを同じように見せたからです。

Safari 16.4でフォントサイズ調整のこれらの基本的な機能のサポートを出荷しました。

Safari 17では、より高度な機能のサポートを追加しています。

すべてのフォントをメインフォントに一致させるために、0.47のようなマジックナンバーを追跡する必要がなかった方が良いのではないでしょうか?

From-fontの値を使用すると、ブラウザにすべてを把握するように指示できます。

また、Safari 17では、サイズの一貫性を作成するときにどのメトリックを使用するかを指定できる2つの値構文のサポートを追加しています。

デフォルトではex-heightですが、代わりにcap-height、ch-width、ic-width、またはic-heightを使用できます。

Safari 17では、サイズ調整記述子のサポートも追加されています。これにより、@font-faceルールでフォントを設定するときに同様の調整を行うことができます。

それはフォントサイズ調整です。

フォントサイズだけでは簡単に制御できないものをもう少し制御できます。

しかし、新しいラインの高さの単位と、あなたのタイプの視覚的なサイズを調整する機能があっても、あなたのラインボックスのサイズに不安定な凹凸を作り出すことができるものがまだあります。

私たちはこの問題に対するいくつかの解決策に取り組んでいます。

テキストボックスのトリムもその1つです。

いくつかの点で、text-box-trimはmargin-trimに似ています。

どちらも不要な空白をトリミングできますが、この場合はテキストボックスにあります。

ウェブ上で垂直に並べるものを手に入れるのに苦労したことはありますか？

この名前は垂直方向が中心ではありません。

真ん中に線を引くと、もっとはっきりするかもしれません。

テキストは視覚的に中心よりも低い。

これはウェブ上で常に起こります。

でも、どうして？

さて、実際にはテキストボックスは垂直中央に配置されています。

しかし、グリフはこの箱の奥にあります。

フォントで予約されている文字の上下に余分なスペースがあります。

フォントは上ほど下を必要とせず、垂直方向のセンタリングが外れているため、上と下の余分なスペースの量は同じではありません。

この余分なスペースは非常に重要です。

アクセントマーク、母音マークなどのために予約されています。

しかし、それはウェブ上のタイポグラフィレイアウトを捨てることができます。

テキストボックストリムは、すべてのグリフ全体を表示しながら、レイアウトの目的でこの余分なスペースをトリミングする方法を提供します。

これは垂直センタリングに役立つだけではありません。

キャップの高さより上のフォント用に予約された余分なスペースにより、見出しの上部を画像の上部に簡単に合わせることができない例を次に示します。

余分なスペースをトリミングすることで、物事を並べるのが簡単になります。

これはすべて進行中の作業です。

プロパティ名はすでに先頭トリムからテキストボックストリムに変更されています。

Safari Technology Preview 171の時点で、画面に表示されるコードは、その仕組みですが、これらの詳細にあまり執着しないでください。

私たちはそれが変化し続けることを期待しています。

おそらく、それはこのようになるでしょう。

Safari Technology Previewで試してみて、ご意見をお聞かせください。

あなたのようなウェブデザイナーや開発者からの初期のフィードバックは、CSSが最高のものになる方法です。

一方、ブラウザ間で優れたサポートがあり、まもなくSafari 17、カウンタースタイルに来ます。

あなたはおそらくHTMLの順序付きリストに精通しており、CSSを使用すると、どの番号付けシステムを使用するかを変更するための簡単なメカニズムが提供されます。

ここで私はリストスタイルを適用しています:デーヴァナーガリー。

1行のCSSで適用できる数十種類の事前定義されたナンスシステムがあり、世界中の多くの言語をカバーしています。

しかし、すべてではありません。

セルビア・クロアチア人はどうですか?

List-style: upper-serbo-croatianを指定すると、デフォルトの西部のアラビア数字が表示されます。

ここでカウンタースタイルの出番です。

ブラウザのやり方と同じように、ナンスリングシステムを定義できます。

@Counter-style、それから私がそれを与えたい名前、それから私はスタイルの資質を定義します。

この場合、システムをアルファベットに設定し、記号を一覧表示します。

W3C国際化ワーキンググループは、世界中の何百もの文化をカバーする既製のカウンタースタイルの文書を公開しました。

WebKitでサポートされている言語の数を増やし、CSSワーキンググループで、すべてのブラウザがこれらすべてのサポートを出荷することについて議論を開きました。

しかし、それが起こるまで、このドキュメントからコードスニペットをコピーしてコードに貼り付けることができます。

リストカウンタをスタイル設定して、完全にカスタムにすることもできます。

このリストは、最低4桁のバイナリでアイテムを数えるようにスタイル設定しました。

そして、これは絵文字のセットを何度も何度も循環させるものです。

CSSカウンタは、リスト以外のページ上の他のコンテンツに番号を設定するためにも使用できます。

長い文書の各セクションで始まる見出しのように。

ここに例があります。

H2の見出しが3つあり、見出しごとに単語だけです。

CSSでは、counter-resetを宣言してカウンタを作成します。

私はそれを「ナンブニング」と名付け、ゼロの後にカウントを開始するように設定しました。

次に、:before pseudo-elementを使用して、ブラウザにカウンタをインクリメントしてコンテンツに表示するように指示します。

デフォルトでは、カウンターは西部のアラビア数字--1、2、3-を使用しますが、それを変更できます。

以前と同じように、私は欲しいものになるようにカウンターをスタイリングすることができます。

それがカウンターの作成とスタイルの作り方です。

しかし、タイポグラフィを次のレベルに引き上げるために、今年やっているのはそれがすべてではありません。

実際、今年はさらに多くのCSSが登場します。

Safari 16.2では、Open Type機能をさらにサポートするために、GridとFlexboxの最後のベースラインアライメントのサポートに加えて、font-variant-alternatesと@font-feature-values内のいくつかの機能も提供しました。

Safari 16.4では、Media Queriesの範囲構文とブール論理、@propertyなどのサポートも追加されました。

Safari 16.5では、CSSネスティングのサポートも追加されました。

また、Safari 17では、フォント技術とフォントフォーマットの機能検出、インテンシニックサイズ、テキストトランスフォーム：全幅とフルサイズカナなどを追加しています。

問題を提出したり、ソーシャルメディアで私たちにpingをしたり、どのウェブテクノロジーを最も実装または改善する必要があるかを知らせるためにブログ記事を書いたりするすべての人に心から感謝したいと思います。

私たちは耳を傾けており、あなたの意見は影響を与えます。

他に何が必要か教えてください。

WebKitの問題トラッカーであるbugs.webkit.orgで、Webテクノロジーのバグレポートと機能リクエストを提出できます。

Safariのインターフェースに関する問題、またはiOS、iPadOS、macOSに関する問題は、feedbackassistant.apple.comに提出してください。

Safariでサポートされているものに関する最新情報を持っていることを確認してください。

開発者から、実際にすでに出荷されているものを実装するように求められるのをよく耳にします。

Caniuseはこれのための素晴らしいリソースです。

また、webkit.orgの最新ニュースを入手することもできます。ここでは、Safariの各リリースに関する詳細な記事、Safari Technology Previewのリリースノート、Web Inspectorに関する広範なドキュメントなどを見つけることができます。

Safari Technology Previewをダウンロードして、今後の予定に追いついてください。

約2週間ごとに更新されるため、WebKitに最新のものが追加されています。

Safari Technology Previewには、デフォルトでプレビューする準備ができているすべての新機能もあります。

または、Safari設定の新しい機能フラグペインで機能のオンとオフを切り替えることができます。Safari 17から、完全に再設計された開発メニューからアクセスできます。これは、MacのWebインスペクタをiPhone、iPad、またはその他のデバイスのウェブサイトやWebアプリにワイヤレスで接続するためのクイックアクセス、または手元にないデバイスでテストします。無料のデバイスシミュレータをダウンロードし、開発メニューから、または再設計された

WWDC23で「Safari開発者機能の再発見」を見て、すべてについて学んでください。

ウェブアプリがMacにやってくる。

さらに、今年はiPhoneとiPadのウェブアプリの改善にぎっしり詰まりました。

「ウェブアプリの新機能」は、すべてをカバーしています。

また、JPEG XLを含むSafariやWebKitに搭載される新しい画像フォーマットと、「ウェブ用のメディアフォーマットを探索する」の新しいマネージドメディアソースAPIについて学びます。

私たちは、今年WebKitとSafariでどれだけの新しいウェブ技術が出荷されているかに興奮しており、あなたもそうであることを願っています。

そして、私たちはあなたがそれで何を作るかを見るのが待ちきれません。

見てくれてありがとう。