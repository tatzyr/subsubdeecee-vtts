10035

♪ ♪

Bhavya:こんにちは、私の名前はBhavyaで、アクセシビリティチームのエンジニアです。

今日のセッションでは、アプリでアクセシビリティ監査を実行する方法に焦点を当てます。

まず、UIテストで自動化されたアクセシビリティ監査を実行するのがいかに簡単かについて説明します。

そして、優れたテスト体験と同時に優れたアクセシビリティ体験を提供する方法で要素を公開する方法について説明します。

アクセシビリティ監査から始めましょう。

テストは、アプリ開発プロセスの基本的な要素です。

テストを書くことで、コードを出荷する前にバグをキャッチして修正することができます。

それは私たちが製品の品質を確保する方法です。

そして、アクセシブルな製品は高品質の製品です。

世界中の約7人に1人が、世界とそのデバイスとの交流方法に影響を与える障害を持っています。

人々はVoiceOverのようなツールを使用して、自分に最適な方法でアプリと対話します。

高品質の製品を提供するということは、誰もがアクセスできるアプリケーションを提供し、アプリで最高品質の体験を得られることを意味します。

私は個人的な経験から、アクセシビリティがいかに深く複雑なテーマになりいかに深いかを知っています。

アクセシビリティ監査がどのようにこれを簡単な作業にできるかを探りましょう。

Xcodeには、アクセシビリティインスペクタと呼ばれるツールが付属しています。

このツールは、アプリ内でアクセシビリティの問題を見つけ、診断し、修正する簡単な方法を提供します。

このツールを活用できる強力な方法の1つは、アプリで監査を実行することです。

インスペクタは、一般的なアクセシビリティの問題について、アプリ内の個々のビューを監査できます。

これは私のサンプルアプリです。タブが2つあります。

最初のタブは動機付けの引用を提供し、2番目のタブでは、自己反省のために自分の考えを書き留めることができます。

見積もりタブには、見積もりを表示するテキストビューがあります。

そして、このテキストビューは背景画像の上に配置されます。

見積もりを更新する新しい見積もりボタンもあります。

アクセシビリティインスペクタを起動して、アプリの監査を実行できます。

検査官は、十分な要素の説明を提供し、適切なコントラストを確保するなど、あらゆる種類の問題をチェックします。

そして、それが見つけた問題は、各問題に関する詳細な説明が記載された表に表示されます。

アクセシビリティ監査は強力で、今では自動化可能です。

これで、UIテストで監査を実行できるようになりました。

XCUIApplicationでperformAccessibilityAuditを呼び出すと、インスペクタが行うのと同じように、アクセシビリティの問題について現在のビューを監査します。

アサーションは必要ありません。問題が見つかった場合、テストは自動的に失敗します。

簡単なデモに飛び込んで、これを実際に見てみましょう。

Xcodeでデモアプリを開きました。

Swiftで書かれており、標準のUIKitビューを利用しています。

私はすでに、画面上の要素が存在することを確認するいくつかの合格テストを書きました。

たとえば、testQuoteTabViewは、画像ビューとテキストビューが引用タブに存在することを確認します。

注意すべき点の1つは、これらのテストはアクセシビリティのテストにも役立つということです。

XCTestがこれらのビューを見つけるには、アクセシビリティ要素でなければなりません。

つまり、UIテストで要素を見つけることができれば、私たちの支援技術も見つけることができます。

この方法でアクセシビリティテストを少し行うのは素晴らしいことですが、あらゆる種類の問題をキャッチしていることを確認するために、テストにいくつかの監査を追加したいと思います。

testAccessibilityQuoteTabViewという別のテストを作成します。

アプリを起動し、[見積もり]タブに移動するための設定を行います。

そして最後に、アプリケーションでperformAccessibilityAuditを呼び出します。

監査は複数の問題を報告できるため、最初の失敗後にテストが問題を報告し続けることができるように、continueAfterFailureをtrueに設定します。

それでおそれ。

テストダイヤモンドをクリックしてテストを実行しましょう。

私のテストは失敗したようです。

問題はXcodeのソースエディタ内でインラインで報告されます。

私の監査では2つの問題が発生しました。要素には説明がなく、ラベルは人間が読めません。

問題のある要素が何であるかを理解しましょう。

レポートナビゲーターに移動し、[テスト]をクリックし、テストの横にある詳細表示三角形をクリックすると、これら2つの問題を深く掘り下げることができます。

このビューは、テスト実行と問題の詳細な内訳を示しています。

最初の問題「要素には説明がない」では、画像ビューに説明がないことを示す要素のスクリーンショットをダブルクリックすることができます。

2番目の問題でも同様に行うことができます。これは、テキストビューのラベルが人間が読めないことを示しています。

少し時間を取って、監査がちょうど見つけた問題に対処する方法について話し合いましょう。

支援技術に依存するアプリのユーザーにとって、実際のインタラクションやナビゲーションの問題につながるため、各問題を個別に調査して修正することが重要です。

また、フィルタリングして無視すべき問題に遭遇する可能性があることを認めることも重要です。

おそらく、問題は偽陽性または予想される行動です。

アクセシビリティ監査により、このような問題を無視しやすくなります。

話の後半で問題を無視する例に触れます。

アクセシビリティのベストプラクティスの詳細については、「優れたアクセシビリティ体験を提供する」というタイトルの2018年の講演をご覧ください。

私の監査が発見した最初の問題を調査しましょう:テキストビューのアクセシビリティラベルは人間が読めません。

ストーリーボードのテキストビューを調べると、アクセシビリティラベルがQUOTE_TEXTVIEWに設定されていることがわかります。

VoiceOverのような支援技術に依存するユーザーは、最初にアクセシビリティラベルを聞き、次にこのようなアクセシビリティ値を聞きます。

VoiceOver: QUOTE_TEXTVIEW、「一度に1日ずつ生き、それを傑作にしてください。」

Bhavya:ラベルは素晴らしく聞こえません、そして理想的には、VoiceOverはそれをスキップして引用自体だけを話すべきです。

アクセシビリティラベルを削除することはできますが、テキストビューを識別するためにこのラベルに依存するため、UIテストは壊れます。

理想的には、この文字列はアクセシビリティ識別子として設定する必要があります。

アクセシビリティ識別子を使用すると、アクセシビリティやUIエクスペリエンスに影響を与えることなく、UIテストを書くときに要素を一意に識別できます。

ストーリーボードに向かいます。

テキストビューを選択し、ラベルからこの文字列を切り取り、識別子に貼り付けます。

監査で見つかったもう1つの問題は、画像ビューに説明がないことです。

通常、画像は説明的だが簡潔なラベルでアクセスできることが重要です。

しかし、私のアプリでは、これは装飾的な背景画像です。

これはメインコンテンツの一部ではなく、引用自体に意味を加えるものではありません。

理想的には、VoiceOverのような技術は、この画像ビューをスキップする必要があります。

ビューコントローラーのビューでアクセシビリティ要素をオーバーライドすることで、この動作を実現できます。

引用テキストビューと新しい引用ボタンのみに設定すると、VoiceOverは画像ビューに着地しなくなります。

Xcodeに向かい、今すぐそれをやりましょう。

ビューコントローラーファイルに移動し、accessibilityElementsを設定します。

すごい。

監査に戻り、テストケースを実行して、すべての問題を解決したかどうかを確認しましょう。

甘い。私の監査は今合格しています。

私のUIテストの1つが今失敗していることに気付くでしょうが、後でそれに戻ります。

アクセシビリティ監査を追加すると、フィルタリングが必要な問題に遭遇する可能性があります。

例として、私の監査で特定のラベルのコントラストが低すぎるという問題が見つかったとします。

調査後、コントラストは問題ないことが判明し、問題は偽陽性のようです。

この問題をどのように無視できるかを探りましょう。

performAccessibilityAudit関数は、追加のパラメータを取ります。

最初のパラメータを使用すると、実行する監査のカテゴリのオプションセットを指定できます。

これらは、ダイナミックタイプやコントラストなどのカテゴリで、アクセシビリティインスペクタですでに慣れ親しんでいるのと同じカテゴリです。

この例では、動的タイプとコントラストの問題のみを監査することを選択します。

2番目のパラメータでは、クロージャを指定できます。

この閉鎖は、監査によって発見されたすべての問題に呼び出され、無視する問題と報告する問題を選択することができます。

shouldIgnoreという変数をfalseに定義することから始めます。

デフォルトでは、問題は無視すべきではありません。

「マイラベル」というラベルの要素のコントラストの問題を無視したいとしましょう。

issue.elementを使用して、問題に関連付けられたXCUIElementを取得できます。

この要素に「マイラベル」というラベルがあり、問題の種類がコントラストの問題である場合、私は正しい問題を抱えていることを知っているので、shouldIgnoreをtrueに設定します。

Trueに設定すると、問題を無視したいことを示します。

最後に、私は無視して戻ってきます。

上記の条件が満たされない場合、shouldIgnoreはfalseとなり、問題が障害として報告されるべきであることを示します。

そして、それだけです。

この例を拡張し、要素タイプや識別子などの他のプロパティを使用して無視の基準をカスタマイズできます。

独自のアプリのアクセシビリティ監査を書き始めると、次の考慮事項を念頭に置いておくと便利です。

監査は画面上の要素に限定されます。

つまり、完全なカバレッジを提供するために、アプリが表示する可能性のあるすべての異なるビューのアクセシビリティ監査テストを追加する必要があります。

サンプルアプリの場合、2番目のタブに移動して監査を実行する別のテストを追加する必要があります。

複数のテストの監査をすぐに追加する簡単な方法は、ティアダウンで監査をオーバーライドして実行することです。

クラスの範囲で変数を定義できます。

このようにして、テストはこれらの変数をオーバーライドして監査をオプトインまたはオプトアウトし、テストが問題を無視するためのクロージャをカスタマイズできるようにします。

テスト計画は、プロジェクトで監査固有のテストをグループ化するための優れた方法です。

これにより、テスト計画でテストターゲット、ケース、または個々の方法を選択的に有効にすることができます。

そして最後に、監査は実際のテストを支援技術に置き換えるべきではありません。

最終的には、VoiceOverやDynamic Typeなどのテクノロジーをオンにしてアプリをテストすることが、高品質のエクスペリエンスを確保するための最良の方法です。

いずれにも妥協することなく、優れたアクセシビリティと優れたテストを実現できます。

自動化要素を使用すると、これらの要素のアクセシビリティに影響を与えることなく、自動化の目的で特別に要素を公開できます。

これで、UIKitでは、このAPIを活用して、自動化に必要な要素を正確に公開しながら、同時にこれらの要素のアクセシビリティをカスタマイズできます。

以前から覚えているかもしれませんが、監査の問題を解決したので、UIテストの1つも壊しました。

画像ビューはもう利用できないようです。

アクセシビリティにも欠けているので、私のUIテストに欠けています。

この画像ビューは装飾的だったので、アクセシビリティ要素をオーバーライドしてアクセシビリティから除外しました。

しかし、そうすることで、UIテストから除外されました。

自動化要素が、画像ビューをUIテストに公開するのにどのように役立つかを探りましょう。

Xcodeのビューコントローラーファイルに移動します。

そして、ビューコントローラーのビューにAutomationElementsを画像ビューに設定します。

automationElementsをオーバーライドするときは、自動化にさらす必要があるすべての要素を指定する必要があることに注意してください。

つまり、テキストビューとボタンもリストに追加する必要があります。

自動化要素をオーバーライドするときは、すでに自動化にさらされている既存の要素をオーバーライドしています。

テストケースを実行して、再び合格するかどうかを確認してみましょう。

すごい。

私たちはいくつかの素晴らしいUIとアクセシビリティテストを書き、いくつかのアクセシビリティの問題も修正することができました。

アクセシビリティ監査は、アプリに簡単で自動化されたアクセシビリティテストを追加する素晴らしい方法です。

監査によって特定された問題を解決することは、誰もがあなたのアプリを楽しめるようにするのに役立ちます。

どちらか一方を選ぶことなく、優れたアクセシビリティと自動化体験を作成します。

オートメーション要素を使用すると、アクセシビリティエクスペリエンスに影響を与えることなく、UIテスト専用の要素を公開できます。

UIテストに行き、AccessibilityAuditを実行するためのクイックコールを追加することをお勧めします。

ありがとうございます。