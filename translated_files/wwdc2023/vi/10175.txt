10175

♪ ♪

Sonu: Xin chào, tên tôi là Sonu, và tôi là một nhà thiết kế giao diện người làm việc trên Xcode.

Và tôi rất vui mừng được cung cấp cho bạn một chuyến tham quan Báo cáo Kiểm tra mới trong Xcode 15.

Báo cáo kiểm tra là nơi bạn đến để xem kết quả cho các lần chạy thử nghiệm xảy ra cục bộ, trong Xcode Cloud hoặc trên một máy khác.

Các lần chạy thử nghiệm bao gồm từ một thử nghiệm duy nhất mà bạn đang chạy trong khi làm việc trên một đoạn mã đến toàn bộ bộ với hàng nghìn bài kiểm tra đang chạy trong CI.

Báo cáo kiểm tra sắp xếp kết quả kiểm tra của bạn theo cách giúp bạn hiểu được tình trạng của dự án, xác định các khu vực có vấn đề và cuối cùng khắc phục lỗi nhanh hơn.

Trước khi chúng ta bắt đầu khám phá báo cáo thử nghiệm mới, tôi muốn lùi lại một bước và xác định một số thuật ngữ và khái niệm chính liên quan đến thử nghiệm trong Xcode.

Thật hữu ích khi hiểu các khái niệm tổ chức đằng sau cấu trúc các bài kiểm tra của bạn.

Sau khi tôi xem qua những điều cơ bản, chúng ta sẽ xem xét báo cáo kiểm tra và khám phá cách nó có thể giúp bạn.

Hãy bắt đầu với các phương pháp kiểm tra.

Các phương pháp kiểm tra là các bài kiểm tra riêng lẻ hoặc các phương pháp xác thực mã nguồn của bạn và tạo ra kết quả kiểm tra.

Tiếp theo, có các lớp kiểm tra.

Các lớp kiểm tra là các nhóm phương pháp kiểm tra và thường được nhóm lại dựa trên khu vực đang được kiểm tra.

Sau đó, có các gói thử nghiệm.

Các gói kiểm tra bao gồm một hoặc nhiều lớp kiểm tra.

Mỗi gói chứa một loại thử nghiệm duy nhất, Đơn vị hoặc Giao diện người dùng.

Các bài kiểm tra đơn vị giúp xác minh một đoạn mã duy nhất, nói chung là một hàm.

Các bài kiểm tra đơn vị ngắn, đơn giản và chạy rất nhanh.

Các bài kiểm tra giao diện người dùng quan sát hành vi đối mặt với người dùng của ứng dụng của bạn.

Những bài kiểm tra này đảm bảo ứng dụng của bạn thực sự làm được những gì bạn mong đợi.

Đối với mục đích của chúng tôi, giả sử, gói thử nghiệm của chúng tôi chứa các bài kiểm tra giao diện người dùng.

Và ở cấp độ cao nhất, có những kế hoạch kiểm tra.

Các kế hoạch thử nghiệm chứa một hoặc nhiều gói thử nghiệm, có nghĩa là một kế hoạch thử nghiệm có thể chứa cả các thử nghiệm Đơn vị và giao diện người dùng.

Và với các kế hoạch Kiểm tra, bạn có thể thiết lập các cấu hình để chạy các bài kiểm tra của mình một cách hiệu quả trong một số điều kiện.

Cấu hình là một khía cạnh quan trọng của kế hoạch thử nghiệm.

Các cấu hình cho Xcode biết cách thiết lập môi trường thời gian chạy cho các bài kiểm tra của bạn.

Ví dụ: bạn có thể kiểm tra ứng dụng của mình bằng các Ngôn ngữ và Vị trí khác nhau, vì vậy bạn có thể chắc chắn rằng ứng dụng của mình hoạt động ở mọi nơi trên thế giới.

Bạn có thể kiểm tra với phạm vi mã, vì vậy bạn có thể theo dõi chất lượng và phạm vi bảo hiểm mã của mình khi bạn tiếp tục phát triển.

Bạn thậm chí có thể thiết lập các bài kiểm tra của mình để chạy nhiều lần.

Điều này đảm bảo tất cả các yếu tố của ứng dụng của bạn hoạt động đáng tin cậy, bất kể đây là lần đầu tiên hay lần thứ một trăm người dùng sử dụng nó.

Cùng với các cấu hình, có các điểm đến được chạy.

Điểm đến chạy là thiết bị mà các bài kiểm tra của bạn chạy.

Khi chạy thử nghiệm trong IDE của Xcode, bạn có thể chọn một đích chạy duy nhất.

Với Xcode Cloud và lệnh xcodebuild, các bài kiểm tra của bạn có thể có nhiều điểm đến đang chạy.

Vì vậy, bây giờ chúng ta đã đề cập đến những điều cơ bản, hãy xem các bài kiểm tra, cấu hình và các điểm đến chạy hoạt động cùng nhau như thế nào.

Giả sử, chúng tôi đang sử dụng cùng một kế hoạch kiểm tra như tôi đã đánh vần trước đây.

Gần đây, tôi đang làm việc để hỗ trợ nhiều ngôn ngữ trong ứng dụng của mình.

Vì vậy, để đảm bảo ứng dụng của tôi hoạt động như mong đợi, tôi đã tạo cấu hình cho các ngôn ngữ tôi muốn hỗ trợ, đầu tiên là tiếng Anh.

Và trên hết, giả sử tôi đang chạy kế hoạch thử nghiệm này trên ba điểm đến chạy.

Kế hoạch kiểm tra chạy trên mỗi thiết bị một lần với cấu hình được bật.

Và mỗi phương pháp sẽ thoát ra với trạng thái kết quả kiểm tra, hoặc vượt qua, thất bại, bỏ qua hoặc thất bại dự kiến.

Đối với ứng dụng của mình, tôi cũng đang làm việc để hỗ trợ thêm một vài ngôn ngữ và tôi đã tạo cấu hình kế hoạch kiểm tra cho từng ngôn ngữ.

Điều này có nghĩa là, Xcode chạy kế hoạch kiểm tra đầy đủ một lần cho mỗi cấu hình và chạy đích, dẫn đến toàn bộ ma trận chứa đầy kết quả.

Phóng to, một kết quả được tạo ra cho mọi phương pháp kiểm tra, cấu hình và kết hợp đích chạy.

Trường hợp riêng lẻ này được gọi là chạy phương thức kiểm tra.

Các lần chạy thử nghiệm bao gồm từ một thử nghiệm duy nhất mà bạn đang chạy trong khi làm việc trên một đoạn mã đến toàn bộ bộ bộ với hàng nghìn bài kiểm tra chạy nhiều cấu hình trên nhiều điểm đến, tương tự như ví dụ trước của tôi.

Báo cáo thử nghiệm mới cung cấp cho bạn các công cụ để giúp bạn hiểu quá trình chạy thử nghiệm của mình, bất kể số lượng thử nghiệm.

Để làm điều đó, báo cáo thử nghiệm mới cung cấp một bản tóm tắt cấp cao về quá trình chạy thử nghiệm của bạn, vì vậy bạn có thể thấy bức tranh toàn cảnh trước khi đào sâu vào chi tiết.

Nó làm nổi bật các mô hình quan trọng, vì vậy bạn nhanh chóng biết bắt đầu điều tra từ đâu.

Nó cung cấp cho bạn một nơi duy nhất để xem hoạt động kiểm tra, thông tin thất bại, ảnh chụp màn hình và hơn thế nữa.

Và cuối cùng, chúng tôi đã cải thiện các công cụ gỡ lỗi kiểm tra giao diện người dùng của mình, cung cấp cho bạn thông tin thất bại phong phú hơn.

Được rồi, vì vậy chúng tôi đã đề cập đến rất nhiều khái niệm xung quanh thử nghiệm và lợi ích của báo cáo thử nghiệm.

Bây giờ hãy xem nó hoạt động.

Tôi đang làm việc trên một tính năng mới cho ứng dụng iOS của mình, Backyard Birds.

Tương tự như ví dụ trước của tôi, tôi đang làm việc để làm cho Backyard Birds có sẵn bằng nhiều ngôn ngữ.

Vì tôi đã thêm hỗ trợ cho nhiều ngôn ngữ hơn, tôi đã thử nghiệm cục bộ và trong Xcode Cloud để đảm bảo rằng tôi không phá vỡ bất cứ thứ gì.

Hãy cùng xem một số lần chạy CI của tôi.

Tôi có một quy trình làm việc được đặt trong Xcode Cloud để tự động chạy một số bài kiểm tra đơn vị khi tôi mở một yêu cầu kéo.

Trong Tổng quan về bản dựng, tôi có thể nhanh chóng hiểu quy trình làm việc của mình đã bắt đầu điều gì, những thay đổi mã nào đã được xây dựng và quy trình làm việc mà bản dựng này đến từ đâu.

Tôi cũng có thể tìm hiểu hành động của mình được thực hiện như thế nào trong bản dựng này.

Và oof, một số bài kiểm tra của tôi đã thất bại.

Hãy kiểm tra chúng.

Khi kiểm tra hành động kiểm tra, tôi bắt gặp báo cáo kiểm tra mới.

Cụ thể, tôi tìm thấy bản tóm tắt bài kiểm tra.

Bản tóm tắt bài kiểm tra cho tôi hiểu biết tổng thể về những gì đã xảy ra trong lần chạy thử nghiệm này.

Tôi có thể nhanh chóng hiểu môi trường thử nghiệm của mình.

Tôi cũng có thể khám phá bất kỳ mẫu đáng chú ý nào được tìm thấy trong kết quả kiểm tra của mình bằng cách sử dụng Insights.

Thông tin chi tiết là các mẫu Xcode được tìm thấy trong khi phân tích kết quả của tôi trên tất cả các cấu hình và các điểm đến đang chạy.

Nó nhóm các kết quả dựa trên các tiêu chí nhất định.

Hôm nay, chúng ta có hai loại Thông tin chi tiết: Các mẫu thất bại phổ biến và các lần chạy thử nghiệm dài nhất.

Thông tin chi tiết về Mô hình Thất bại Chung nhóm các bài kiểm tra dựa trên các thông báo thất bại tương tự, trong khi "Chạy thử nghiệm dài nhất" gợi ý cho bạn về các bài kiểm tra nào trong gói kiểm tra của bạn mất nhiều thời gian hơn các bài kiểm tra khác.

Trong phần kiểm tra, tôi có thể hiểu các bài kiểm tra của tôi được thực hiện như thế nào trong quá trình chạy này.

Tôi cũng có thể biết thêm chi tiết về kế hoạch kiểm tra của mình.

Tôi có thể hiểu kế hoạch kiểm tra của tôi có những đặc điểm đặc biệt nào, như lặp lại bài kiểm tra hoặc số liệu hiệu suất.

Khi thử nghiệm với nhiều điểm đến và cấu hình chạy, có thể khó hiểu mỗi lần chạy hoạt động như thế nào.

Với bản đồ nhiệt này, tôi có thể nhanh chóng hiểu được các bài kiểm tra của mình đã làm như thế nào trên từng thiết bị và cấu hình.

Và màu sắc và số lượng kết quả kiểm tra giúp tôi hiểu cuộc chạy này diễn ra như thế nào khi so sánh với những người khác.

Và nếu tôi có bất kỳ lỗi kiểm tra nào, tôi có quyền truy cập nhanh vào chúng trong bản tóm tắt bài kiểm tra.

Nếu một thông báo thất bại cụ thể thu hút sự chú ý của tôi, tôi có thể sử dụng phần này để bắt đầu điều tra.

Nói về những thất bại thu hút sự chú ý, khi tôi kiểm tra những hiểu biết sâu sắc trước đó, cái nhìn sâu sắc đầu tiên đã gắn bó với tôi.

Nó đề cập đến việc tôi có ba bài kiểm tra thất bại với một thông báo thất bại tương tự.

Hãy cùng tìm hiểu lý do tại sao những bài kiểm tra này thất bại.

Sau khi chọn một cái nhìn sâu sắc cụ thể, tôi có thể sử dụng chế độ xem này để tìm hiểu thêm về nó.

Tôi có thể tìm thấy thông báo thất bại được tìm thấy trong tất cả các bài kiểm tra và tôi có thể thấy các bài kiểm tra thất bại.

Ngoài ra, tôi có thể hiểu cấu hình nào và điểm đến chạy đã tạo ra những lỗi kiểm tra đơn vị này.

Và với thông tin này, tôi có thể nhận được tín hiệu về lý do tại sao các bài kiểm tra này thất bại với các thông báo thất bại rất giống nhau.

Để tiếp tục điều tra, hãy kiểm tra một trong những phương pháp kiểm tra đang chạy.

Sau khi chọn một phương pháp kiểm tra chạy, tôi tìm thấy chế độ xem chi tiết kiểm tra cho testGardenSupplies().

Chế độ xem chi tiết kiểm tra tạo ra một không gian dành riêng để tập trung vào kết quả của một phương pháp kiểm tra duy nhất.

Đây là nơi tôi có thể tìm thấy chi tiết kiểm tra và thông tin lỗi, vì vậy tôi có thể bắt đầu gỡ lỗi.

Tôi có thể sử dụng tiêu đề để có được bối cảnh đầy đủ về những gì đã xảy ra trên tất cả các cấu hình và các điểm đến chạy.

Và trong chế độ xem chạy, tôi có thể khám phá cách phương pháp này hoạt động trên mỗi cấu hình và điểm đến chạy.

Tôi cũng có thể tìm thấy thông báo lỗi và gọi ngăn xếp để chạy phương thức kiểm tra đã chọn.

Thông báo lỗi và ngăn xếp cuộc gọi là những công cụ có giá trị để gỡ lỗi.

Chúng là những phần quan trọng giúp xác định nguồn gốc của sự thất bại.

Ngăn xếp cuộc gọi cũng cung cấp cho tôi các điểm truy cập trở lại mã nguồn của mình, nơi tôi có thể tiếp tục điều tra lỗi.

Cùng với các bài kiểm tra đơn vị của mình, tôi đã chạy một loạt các bài kiểm tra giao diện người dùng tại địa phương để đảm bảo Backyard Birds đáp ứng mong đợi của khách hàng và hoạt động bình thường trên các nền tảng và thiết bị khác nhau.

Hãy xem lại một bài kiểm tra cục bộ chạy từ trước đó.

Đối với lần chạy thử nghiệm này, tôi vẫn có thể sử dụng bản tóm tắt bài kiểm tra để hiểu chuyện gì đã xảy ra.

Tôi có chi tiết môi trường ở trên cùng, Insights, và sau đó là phần kiểm tra ở dưới cùng.

Thất bại đầu tiên này trong phần kiểm tra đã thu hút sự chú ý của tôi.

Thông báo thất bại cho thấy rằng bài kiểm tra không thể xác định vị trí của một trong các nút.

Hãy kiểm tra nó.

Sau khi chọn một thất bại, tôi tìm thấy chế độ xem chi tiết bài kiểm tra cho testClickTabsAfterSearch().

Vì tôi đang xem xét một bài kiểm tra giao diện người dùng, việc điều hướng đến các chi tiết bài kiểm tra sẽ đưa tôi vào tab Hoạt động.

Báo cáo thử nghiệm có rất nhiều tính năng mới tuyệt vời để giúp tôi hiểu và giải quyết những thất bại của mình.

Tab hoạt động chứa ba phần chính: Hoạt động kiểm tra, trình khám phá tự động hóa và máy chà sàn.

Hoạt động kiểm tra trình bày bài kiểm tra của tôi theo định dạng dòng thời gian, trong đó hàng trên cùng là bắt đầu bài kiểm tra và hàng dưới cùng là kết thúc và mỗi hàng ở giữa là một sự kiện diễn ra trong bài kiểm tra.

Có trình khám phá tự động hóa.

Đây là nơi tôi có thể tìm thấy những khoảnh khắc phát lại video liên quan đến hoạt động thử nghiệm đã chọn.

Điều này cho phép tôi xem lại toàn bộ bài kiểm tra của mình.

Và cuối cùng, có máy chà sàn, đại diện tuyến tính cho quá trình chạy thử của tôi.

Tôi có thể sử dụng máy chà sàn để xác định vị trí các sự kiện kiểm tra, như chạm, vuốt và nhấp chuột.

Máy chà sàn thậm chí còn làm nổi bật khi thiết bị đang được kiểm tra thay đổi hướng.

Và biểu tượng lỗi phía trên máy chà ghi chú nơi xảy ra lỗi trong bài kiểm tra.

Tôi có thể sử dụng các chỉ báo này để nhanh chóng tìm thấy những khoảnh khắc thú vị trong quá trình chạy thử và đảm bảo các tương tác trong ứng dụng của tôi hoạt động như mong đợi.

Với những phần mới này, báo cáo thử nghiệm có trải nghiệm gỡ lỗi thử nghiệm tương tác.

Hãy kiểm tra xem nó có thể giúp tôi giải quyết lỗi này như thế nào.

Nhấp vào một sự kiện trong ngăn hoạt động sẽ cập nhật trình khám phá tự động hóa với khung hình tương ứng từ phát lại video, vì vậy tôi có thể hiểu trực quan những gì đang xảy ra tại mỗi thời điểm của bài kiểm tra.

Nó cũng di chuyển máy chà sàn đến đúng vị trí, vì vậy tôi có bối cảnh về nơi các sự kiện đang diễn ra liên quan đến việc chạy thử đầy đủ.

Khi tôi gỡ lỗi thất bại, tôi muốn thấy những khoảnh khắc dẫn đến thất bại.

Tôi có thể xem bài kiểm tra của mình chạy để xem liệu có bất cứ điều gì bất ngờ xảy ra có thể gây ra lỗi hay không.

Sau khi xem phát lại video, mọi thứ có vẻ ổn.

Dựa trên thông báo lỗi này, có vẻ như nút "Tài khoản" không được tìm thấy trong giao diện người dùng.

Trình thám hiểm tự động hóa cho tôi thấy những gì đã xảy ra trên thiết bị khi xảy ra lỗi.

Nút "Tài khoản" hiển thị và có một hộp giới hạn trên đó.

Nhấp vào hộp giới hạn cho tôi thêm thông tin về phần tử giao diện người dùng cụ thể này.

Đây là nơi tôi có thể tìm thấy thông tin nhận dạng và phân cấp liên quan đến phần tử này.

Dựa trên thông tin tôi có ở đây, có vẻ như tôi đã gắn nhãn sai nút "Tài khoản" trong ứng dụng của mình.

Từ đây, tôi có thể điều hướng đến nguồn dự án của mình và sửa lỗi.

Báo cáo thử nghiệm mới giúp tôi dễ dàng hiểu được quá trình chạy thử của mình.

Trong một vài khoảnh khắc, tôi đã có thể tìm ra bài kiểm tra nào không thành công, tìm ra giải pháp và khắc phục lỗi.

Thất bại có thể xảy ra tại địa phương và trong CI, và cách tốt nhất là kiểm tra ở cả hai nơi.

Vì vậy, tôi rất vui khi nói rằng báo cáo thử nghiệm có sẵn trong Xcode & Xcode Cloud.

Vì vậy, thời gian là quý giá, tất cả các bạn.

Các tính năng mới được thêm vào báo cáo thử nghiệm sẽ giúp bạn nhanh chóng hiểu được quá trình chạy thử nghiệm của mình, xác định các khu vực có vấn đề và cuối cùng là sửa lỗi nhanh hơn.

Cảm ơn bạn rất nhiều vì đã theo dõi, và tôi hy vọng bạn sẽ tận hưởng phần còn lại của WWDC.

♪ ♪