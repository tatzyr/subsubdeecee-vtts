10115

♪ ♪

Will: Xin chào và chào mừng đến với "Thiết kế với SwiftUI."

Tên tôi là Will, và tôi là một nhà thiết kế trong nhóm Apple Maps.

Sau đó, tôi sẽ được tham gia bởi đồng nghiệp Philip của tôi, và cùng nhau, chúng ta sẽ thảo luận về một số lợi ích và ứng dụng độc đáo mà chúng ta đã tìm thấy từ việc sử dụng SwiftUI.

Chúng tôi sẽ nói từ quan điểm của mình với tư cách là nhà thiết kế và chia sẻ những hiểu biết cá nhân về cách SwiftUI đã nâng cao quy trình thiết kế của chúng tôi.

Chúng tôi cũng sẽ cung cấp các ví dụ thực tế từ công việc của chúng tôi trên ứng dụng Bản đồ mới được thiết kế lại trong watchOS 10.

Trong nhóm Thiết kế Bản đồ, chúng tôi là những người hâm mộ cuồng nhiệt của SwiftUI.

Nó đã giúp chúng tôi xác thực các khái niệm thiết kế, cung cấp cho chúng tôi những khả năng độc đáo mà không có công cụ nào khác cung cấp và giúp chúng tôi hiểu rõ hơn về cách các giao diện được xây dựng và đưa vào cuộc sống.

Đối với ứng dụng watchOS năm nay, chúng tôi đã phát triển tất cả các thiết kế của mình trong SwiftUI, ngay trên thiết bị.

Điều này cho phép chúng tôi kiểm soát mọi chi tiết, từ khoảng cách và kiểu chữ đến hoạt ảnh và tương tác.

Trong phiên hôm nay, chúng tôi muốn chia sẻ SwiftUI đã tác động đến công việc thiết kế này như thế nào.

Trên đường đi, chúng tôi sẽ đề cập đến cách SwiftUI có thể là một công cụ mạnh mẽ nhưng dễ tiếp cận cho các nhà thiết kế, cách nó giúp bạn suy nghĩ thông qua các chi tiết về khái niệm của mình, thiết kế các tương tác phong phú, kiểm tra chính xác ý tưởng của bạn và trình bày hiệu quả công việc của bạn cho người khác.

Hãy bắt đầu bằng cách hiểu SwiftUI hoạt động như một công cụ thiết kế như thế nào.

Mặc dù SwiftUI là một khuôn khổ mạnh mẽ để xây dựng các ứng dụng, nhưng nó cũng là một công cụ mạnh mẽ độc đáo dành cho các nhà thiết kế, cho phép chúng tôi tạo ra các giao diện với tốc độ và độ chính xác cao hơn.

Nhiều người không có nền tảng lập trình, giống như tôi, thấy rằng họ có thể học SwiftUI và thiết kế hiệu quả trong một khoảng thời gian ngắn.

Đó là bởi vì SwiftUI được xây dựng dựa trên ý tưởng rằng những điều phổ biến nên dễ dàng và những điều phức tạp nên có thể.

Trong thực tế, điều này có nghĩa là bạn không cần phải dành thời gian tái tạo các yếu tố giao diện người dùng phổ biến.

Và đồng thời, bạn sẽ không cảm thấy bị giới hạn khi đến lúc tạo ra thứ gì đó hoàn toàn mới.

Đây là một cách khác mà chúng tôi muốn nghĩ về khái niệm này.

Một số công cụ thực sự giỏi trong việc làm mọi thứ trở nên dễ dàng.

Họ hạ sàn nhà xuống.

Lò vi sóng là một ví dụ điển hình.

Hầu hết mọi người đều có thể sử dụng một cái, và nó tuyệt vời cho rất nhiều thứ đơn giản.

Tuy nhiên, nếu tôi cần làm một bữa tối sang trọng, lò vi sóng không phải là công cụ phù hợp.

Các công cụ khác tập trung vào việc trở nên mạnh mẽ.

Họ nâng trần nhà và cho phép bạn tạo ra những thứ phức tạp và phong phú.

Một ví dụ điển hình về điều này là máy pha cà phê espresso công nghiệp.

Mặc dù những chiếc máy này cho phép bạn tạo ra những đồ uống tuyệt vời, nhưng chúng có thể không thể tiếp cận được, khó học và khó làm điều gì đó đơn giản, như pha một tách cà phê cơ bản.

SwiftUI đạt được sự cân bằng giữa hai loại công cụ này.

Nó hạ thấp sàn cho các nhiệm vụ đơn giản và nâng trần nhà để tạo ra những thứ mới mẻ và mới lạ.

Khi viết SwiftUI, bạn sử dụng một công cụ gọi là Xcode.

Trong những năm gần đây, Xcode thậm chí còn trở nên hữu ích hơn cho các nhà thiết kế, nhờ vào việc bổ sung một khung vẽ trực quan cho phép bạn xem và tương tác với các thiết kế của mình trong thời gian thực.

Tôi đây, thay đổi một dòng văn bản đơn giản bằng cách điều chỉnh kích thước phông chữ, trọng lượng, chuỗi và màu sắc.

Mỗi lần tôi thực hiện một trong những thay đổi này, nó sẽ cập nhật ngay lập tức trên canvas.

Hữu ích không kém cho các nhà thiết kế là cách khai báo mà SwiftUI được viết.

Mô hình ngôn ngữ này được xây dựng dựa trên trực giác mà nhiều người trong chúng ta đã có về cách các giao diện được kết hợp với nhau.

Khi viết SwiftUI, bạn chỉ cần khai báo những gì bạn muốn tạo.

Đối với các yếu tố phổ biến như nút, chúng tôi sẽ chỉ viết Nút.

Và đối với một hình ảnh, chúng tôi sẽ chỉ viết Hình ảnh.

Khi nói đến việc tạo kiểu cho các yếu tố này, nó cũng đơn giản không kém.

SwiftUI cung cấp cho bạn các Công cụ sửa đổi để thay đổi giao diện của mọi thứ giống như bạn làm trong bất kỳ công cụ thiết kế nào khác.

Điều này có thể là thêm các hiệu ứng như đổ bóng hoặc đường viền, thay đổi định dạng của văn bản thông qua các phông chữ độc đáo hoặc thao tác bố cục của các phần tử bằng cách thay đổi các thuộc tính như tỷ lệ khung hình hoặc phần đệm.

SwiftUI cũng cung cấp quyền truy cập dễ dàng vào các điều khiển hệ thống, như bộ chọn màu và các hành vi, như chuyển đổi đẩy.

Những thứ này được tích hợp trực tiếp vào khuôn khổ, cung cấp cho bạn chức năng gốc ngay lập tức.

Nếu bạn đang sử dụng SwiftUI, điều đó cũng có nghĩa là bây giờ bạn có quyền truy cập vào các khả năng độc đáo của phần cứng Apple.

Với một chút công việc, bạn có thể tận dụng những thứ như phản hồi xúc giác, nguồn cấp âm thanh, máy ảnh, cử chỉ và cảm biến như gia tốc kế.

Bạn cũng có thể tận dụng tất cả công việc đã đi vào hàng tá Khung Apple.

Điều đó có nghĩa là, bạn có thể thiết kế với các bản đồ động bằng MapKit, lấy thông tin thời tiết trực tiếp từ WeatherKit hoặc hiển thị các đối tượng trong thực tế tăng cường bằng RealityKit.

Tất cả những điều này có thể xảy ra trên các nền tảng của Apple vì SwiftUI hoạt động với iPhone, cũng như iPad, Apple Watch và Mac.

Trong hầu hết các trường hợp, bạn thậm chí có thể chia sẻ mã và tận dụng cách các yếu tố hệ thống tự thích ứng.

Bây giờ chúng ta đã thảo luận về SwiftUI thông qua lăng kính của một công cụ thiết kế.

Hãy nói cụ thể về cách nó giúp bạn thực sự thiết kế tốt hơn, trước tiên hãy bắt đầu với việc làm đúng các chi tiết về thiết kế của bạn.

Giao diện hiện đại rất năng động.

Các sản phẩm mà chúng tôi xây dựng chứa các dòng chảy phức tạp và các yếu tố tương tác cao.

Kết quả là, có rất nhiều quyết định quan trọng mà chúng ta cần đưa ra.

SwiftUI giúp làm nổi bật nhanh chóng tất cả những chi tiết quan trọng cần bạn chú ý, ví dụ, hình ảnh sẽ trông như thế nào khi tải hoặc nút xuất hiện như thế nào khi được nhấn.

Đây là những thứ làm cho một sản phẩm cảm thấy hoàn chỉnh.

Chúng dễ dàng ẩn trong các công cụ thiết kế tĩnh nhưng nhanh chóng nổi lên khi làm việc trong một công cụ động như SwiftUI.

Đó là bởi vì SwiftUI giúp bạn dễ dàng xây dựng các thiết kế của mình trên thiết bị.

Khi làm điều này, bạn có được sự hiểu biết đầy đủ hơn về những gì bạn đang làm.

Các phần riêng biệt bây giờ tương tác với nhau và bạn có thể bắt đầu đánh giá toàn bộ trải nghiệm.

Quá trình này nhanh chóng tiết lộ những gì đang hoạt động trong thiết kế của bạn và những gì vẫn cần chú ý hoặc đánh bóng.

Trên Maps, chúng tôi thấy điều này cực kỳ hữu ích.

Khi chúng tôi lần đầu tiên bắt đầu thiết kế Ứng dụng watchOS năm nay, chúng tôi nghĩ rằng sẽ thật tuyệt nếu tạo ra trải nghiệm lấy bản đồ làm trung tâm hơn cho cổ tay của mọi người.

Để bắt đầu kiểm tra cảm giác đó như thế nào, chúng tôi đặt một chế độ xem bản đồ đơn giản lên đồng hồ.

Bởi vì chúng tôi đang thử nghiệm trên thiết bị, chúng tôi ngay lập tức phát hiện ra một vấn đề: Tốc độ phóng to Digital Crown vào bản đồ quá nhanh.

Để cải thiện trải nghiệm này, chúng tôi đã thử nghiệm nhiều giá trị trong nguyên mẫu SwiftUI của mình, điều chỉnh độ nhạy của Digital Crown cho đến khi chúng tôi tìm thấy tốc độ thu phóng cảm thấy tự nhiên.

Khi chúng tôi cải thiện tốc độ thu phóng, chúng tôi bắt đầu thêm vào bản đồ, đầu tiên thêm các điểm quan tâm, sau đó là điều khiển giao diện người dùng và cuối cùng, để bối cảnh hóa bản đồ tốt hơn, bán kính đi bộ xung quanh vị trí hiện tại của bạn, giúp hiển thị những gì xung quanh bạn và khoảng thời gian để đi bộ đến đó.

Chúng tôi đã lấy lại công việc này trên thiết bị, thêm vào nguyên mẫu SwiftUI của chúng tôi.

Điều này làm nổi lên những điều mới cần sự chú ý của chúng ta, như sự tương tác của bán kính đi bộ.

Cụ thể, chúng tôi cảm thấy như thời gian đi bộ có thể sử dụng nhiều chi tiết hơn khi Vương miện kỹ thuật số được cuộn.

Để khám phá điều đó có thể trông như thế nào, chúng tôi đã tạo nguyên mẫu cho một số tùy chọn khác nhau.

Yêu thích của chúng tôi là hoạt hình mã này, mà chúng tôi đã phát triển như một nguyên mẫu SwiftUI riêng biệt.

Chúng tôi lấy những nguyên mẫu riêng biệt này và tích hợp chúng lại với nhau.

Điều này dẫn đến nhiều câu hỏi hơn và làm chúng tôi ngạc nhiên về mức độ phức tạp được ẩn giấu trong một thiết kế có vẻ đơn giản như vậy.

Tất cả những chi tiết này ban đầu không rõ ràng khi chúng tôi bắt đầu thiết kế.

Nhưng khoảnh khắc chúng tôi bắt đầu tạo ra các nguyên mẫu, chúng đã rõ ràng.

SwiftUI được xây dựng cho các giao diện hiện đại.

Nó giúp chúng tôi giải quyết các chi tiết thiết kế cụ thể và trải nghiệm cách mọi thứ hoạt động cùng nhau nói chung.

Tiếp theo, Philip sẽ thảo luận về một trong những chủ đề yêu thích của chúng tôi: tương tác.

Philip: SwiftUI là một công cụ mạnh mẽ để thiết kế các tương tác, với sự hỗ trợ hạng nhất cho các cử chỉ, chuyển tiếp và hoạt ảnh.

Mọi thứ đều cảm thấy tự nhiên bởi vì bạn đang làm việc trong một môi trường thực sự bản địa.

Nhà thiết kế nào không thích một bộ phim hoạt hình tuyệt vời?

Hình ảnh động trong SwiftUI có hiệu suất, dễ sử dụng và hoàn toàn bị gián đoạn.

Điều này rất hữu ích vì các tương tác cung cấp cho bạn cảm giác thiết kế của bạn, không chỉ là chúng trông như thế nào.

Thông thường, các tương tác liên quan đến các cử chỉ, như kéo, cuộn hoặc chạm.

Nhưng có những nguồn đầu vào khác, như cảm biến phần cứng, bạn có thể sử dụng cho các tương tác.

Trên màn hình chính của Bản đồ mới, khi bạn nhấn vào nút vị trí, nó sẽ kích hoạt la bàn.

Khi bạn di chuyển xung quanh, la bàn hiển thị hướng chính mà bạn hiện đang đối mặt.

Để hiểu được cảm giác tương tác này, chúng tôi đã tạo ra một nguyên mẫu SwiftUI với la bàn phóng đại để kiểm tra quá trình chuyển đổi bằng cách sử dụng các cảm biến bên trong của đồng hồ.

Chỉ mất vài giờ để nguyên mẫu này hoạt động.

SwiftUI giúp dễ dàng sử dụng các cảm biến thực của đồng hồ, giúp la bàn chính xác và giúp chúng tôi tinh chỉnh tương tác nhỏ này.

Một tương tác khác mà chúng tôi muốn tạo ra có liên quan đến trải nghiệm tìm kiếm.

Nếu bạn đang tìm kiếm một địa điểm, như một nhà hàng, màn hình chia nhỏ mới này sẽ hiển thị bản đồ và danh sách kết quả.

Thiết kế này yêu cầu một tương tác cuộn độc đáo mà sẽ khó đạt được trong các công cụ khác.

Đây là nguyên mẫu SwiftUI mà chúng tôi đã tạo ra để cảm nhận về sự tương tác này.

Mục tiêu của chúng tôi là làm cho nó phản hồi ngay lập tức mà không quá nhạy cảm.

Đĩa phản ứng với chuyển động chậm của Vương miện, và một khi một ngưỡng được đánh trúng, một đĩa mới sẽ nhanh chóng chuyển vào vị trí, cùng với phản ứng xúc giác.

Mặt khác, chuyển động nhanh sử dụng hình ảnh động mùa xuân chặt chẽ hơn.

Điều này giúp tương tác cảm thấy linh hoạt.

Những điều chỉnh này tạo ra trải nghiệm phù hợp khi cuộn ở cả tốc độ chậm và nhanh.

SwiftUI cung cấp trải nghiệm vượt trội tuyệt vời cho nhiều tương tác.

Và khi bạn muốn một cái gì đó tùy chỉnh, đó là một công cụ có khả năng cao, cho bạn sức mạnh để tinh chỉnh mọi thứ cho đến khi chúng cảm thấy vừa phải.

Tuy nhiên, thiết kế không chỉ là về vẻ ngoài hay cảm giác của một thứ gì đó.

Đó cũng là về cách nó hoạt động.

Một điều dễ bỏ qua trong quá trình thiết kế là kiểm tra ý tưởng của bạn trong các tình huống thực tế.

Tôi biết cho bản thân mình, tôi có thể bị cuốn theo việc thiết kế cho các kịch bản lý tưởng, sử dụng những bức ảnh đẹp và nhãn ngắn, và nói chung, đảm bảo thiết kế của tôi trông đẹp nhất có thể.

Tuy nhiên, khi công việc thiết kế tiến triển, điều quan trọng đối với tôi là tìm ra nơi các thiết kế của mình bị hỏng, thử nghiệm chúng trong thế giới thực để xem chúng hoạt động như thế nào.

SwiftUI giúp bạn dễ dàng thiết kế và đánh giá công việc của mình trong các tình huống thực tế.

Trên Maps, chúng tôi nghĩ về điều này rất nhiều, vì mọi người sử dụng sản phẩm của chúng tôi ở ngoài trời trong nhiều điều kiện khác nhau.

SwiftUI cho phép chúng tôi thực hiện các thiết kế của mình khi đang di chuyển và thử nghiệm chúng trong thời gian thực.

Ví dụ, chúng tôi chú ý đến độ chói và ánh sáng mặt trời ảnh hưởng như thế nào đến khả năng đọc của bản đồ và giao diện.

Điều này thường khiến chúng tôi điều chỉnh mức độ tương phản trên ứng dụng để cung cấp trải nghiệm dễ đọc hơn.

Một thực hành khác mà chúng tôi thấy hữu ích là sử dụng dữ liệu thực trong các thiết kế của chúng tôi.

Trong Bản đồ, chúng tôi xem xét các loại địa hình và tuyến đường khác nhau mà mọi người sẽ gặp phải khi sử dụng sản phẩm của chúng tôi.

Nếu bạn đang đạp xe hoặc đi bộ với ứng dụng Watch, biểu đồ độ cao mới sẽ cung cấp cái nhìn tổng quan về phạm vi độ cao cho tuyến đường của bạn và tiến trình của bạn trong thời gian thực.

Khi chúng tôi xây dựng biểu đồ này trong SwiftUI, chúng tôi có thể nhập dữ liệu thực từ các loại tuyến đường khác nhau.

Đối với các tuyến đường đồi núi, như những tuyến đường được tìm thấy ở San Francisco, biểu đồ hoạt động đúng như chúng tôi mong đợi.

Tuy nhiên, khi chúng tôi sử dụng dữ liệu cho các tuyến đường bằng phẳng, như những tuyến đường bạn có thể gặp ở Thành phố New York, chúng tôi thấy rằng nó trông cực đoan hơn nhiều so với thực tế, như thể bạn đang đi bộ đường dài trên một ngọn núi.

Chúng tôi nhận ra rằng chúng tôi cần xem lại biểu đồ để nó phản ánh chính xác sự đa dạng của các tuyến đường và hồ sơ độ cao.

Trong trường hợp này, chúng tôi cần điều chỉnh tỷ lệ của trục Y để các tuyến đường phẳng xuất hiện giống như bạn mong đợi.

Một thực hành nữa mà chúng tôi thường sử dụng là tạo ra các công cụ thiết kế một lần bằng SwiftUI.

Đối với bán kính đi bộ mới mà Will đã chia sẻ trước đó, chúng tôi cần một thiết kế được hiển thị đúng trên bản đồ, đây là một bề mặt rất năng động.

Chúng tôi đã tạo ra công cụ thiết kế nhỏ này để hiểu rõ hơn về bán kính sẽ trông như thế nào trên các môi trường bản đồ khác nhau.

Ở đây tôi đang khám phá các phong cách bằng cách thay đổi những thứ như chiều rộng đường, giá trị độ mờ và chế độ hòa trộn.

Các công cụ tham số hóa nhỏ như công cụ này cho phép chúng tôi xử lý nhiều biến thể hơn mức chúng tôi có thể thực hiện hiệu quả trong một công cụ thiết kế tĩnh.

Chúng dễ dàng xây dựng trong SwiftUI và có thể giúp trả lời các câu hỏi cụ thể hoặc giải quyết các vấn đề phức tạp.

SwiftUI giúp bạn thiết kế trong các tình huống trong thế giới thực với các bộ dữ liệu đa dạng và sự hiểu biết toàn diện về các môi trường khác nhau.

Bằng cách thử nghiệm các thiết kế của bạn, bạn có thể giải thích tốt hơn về cách chúng sẽ hoạt động trong cuộc sống hàng ngày của mọi người.

Một cách khác để kiểm tra ý tưởng là chia sẻ chúng với những người khác.

SwiftUI là một công cụ tuyệt vời để trình bày công việc của bạn.

Có nhiều cách tuyệt vời để chia sẻ thiết kế, nhưng trên thiết bị, các bản trình diễn có hiệu quả độc đáo trong việc đưa ý tưởng của bạn vào cuộc sống.

Khi mọi người có thể cầm một bản demo công việc của bạn trong tay, các thiết kế sẽ tự giải thích.

Điều này giúp xây dựng sự đồng thuận và có thể giúp mọi người tiết kiệm rắc rối khi có nhiều cuộc họp hơn.

Đối với công việc của chúng tôi trong năm nay, chúng tôi đã ưu tiên xây dựng các bản trình diễn và đưa chúng đến các bài đánh giá thiết kế thường xuyên nhất có thể.

Trong các bài đánh giá này, chúng tôi đã đưa nhiều bản demo vào một ứng dụng SwiftUI duy nhất.

Điều này bao gồm những thứ chúng tôi đã chia sẻ trước đó, như bán kính đi bộ và kết quả tìm kiếm, và nhiều thứ khác, như thẻ xuất hiện với thông tin doanh nghiệp.

Mọi người đều hào hứng chơi với các bản demo và cung cấp phản hồi về trải nghiệm.

Thay vì dành thời gian giải thích các thiết kế, chúng tôi có thể dành nhiều thời gian hơn để đánh giá chúng.

Các bản demo bạn xây dựng với SwiftUI có thể giảm rủi ro cho một dự án và ngăn ngừa sự nhầm lẫn, cho cả bản thân và nhóm của bạn.

Vào cuối ngày, không có slide deck nào trên thế giới có thể so sánh với một bản demo ngoạn mục.

Đây là một số lợi ích mà chúng tôi đã khám phá ra khi sử dụng SwiftUI.

Chúng tôi khuyến khích bạn nghĩ về SwiftUI như một công cụ thiết kế, một công cụ giúp bạn đưa ra các quyết định thiết kế quan trọng, cho phép bạn thiết kế cảm giác của mọi thứ, thực tế về cách tất cả chúng hoạt động và chia sẻ thiết kế của bạn với những người khác bằng cách sử dụng các bản trình diễn trên thiết bị.

Chính những lợi ích này đã giúp chúng tôi thiết kế ứng dụng Bản đồ mới trong watchOS 10.

Các công cụ chúng tôi sử dụng cho công việc sáng tạo của mình có tác động to lớn đến trải nghiệm cuối cùng.

Bằng cách sử dụng SwiftUI trong quy trình thiết kế của bạn, chúng tôi nghĩ rằng bạn sẽ thấy rằng nó dẫn đến một sản phẩm cuối cùng được cân nhắc, hoàn chỉnh và được chế tạo tốt hơn.

Ngoài ra còn có một lợi ích tuyệt vời nữa của việc sử dụng SwiftUI mà chúng tôi chưa nói đến.

Khi bạn sử dụng SwiftUI, bạn không chỉ tạo ra một nguyên mẫu.

Bạn đang tạo một ứng dụng.

Và điều đó có nghĩa là, bạn có thể vận chuyển những gì bạn thiết kế.

Ứng dụng mà bạn đang tạo có thể không chỉ là một tạo tác thiết kế.

Bởi vì bạn đang làm việc với cùng một vật liệu mà một kỹ sư sử dụng, bạn có thể xây dựng và gửi các ứng dụng đến App Store và chia sẻ chúng với những người khác.

Chúng tôi hy vọng bạn thích tìm hiểu cách chúng tôi đã sử dụng SwiftUI với tư cách là nhà thiết kế trong nhóm Bản đồ.

Nếu bạn quan tâm đến việc tìm hiểu thêm về SwiftUI, có rất nhiều tài nguyên để bạn khám phá.

Chúng tôi khuyến khích xem "Giới thiệu về SwiftUI" nếu bạn chỉ mới bắt đầu.

Cảm ơn bạn đã tham gia hôm nay.

♪ ♪