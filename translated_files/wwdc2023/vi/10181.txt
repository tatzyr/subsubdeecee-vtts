10181

Xin chào! Tên tôi là Jackson.

Và tôi là David.

Trong phiên này, tôi sẽ cung cấp một số thông tin cơ bản về hình ảnh HDR và các tiêu chuẩn được xuất bản gần đây trong lĩnh vực này.

Sau đó, tôi sẽ đề cập đến cách hỗ trợ những hình ảnh này trong một ứng dụng sử dụng các API mới và hiện có.

David sẽ đi sâu vào chi tiết về việc xử lý đường ống hình ảnh HDR và tôi sẽ kết thúc với một số chủ đề nâng cao hơn xung quanh việc hiển thị nội dung dải động cao.

Hãy đi sâu vào cách hoạt động của HDR.

Trong thế giới vật chất, con người có thể cảm nhận được một phạm vi ánh sáng khổng lồ, nhờ khả năng thích nghi của mắt chúng ta.

Ngược lại, một dải động tiêu chuẩn điển hình, hoặc SDR, màn hình chỉ có thể tạo ra một dải ánh sáng hạn chế.

Điều này có nghĩa là khi một hình ảnh của một cảnh được chụp, phạm vi rộng của các mức ánh sáng phải được nén bằng cách nào đó vào phạm vi SDR nhỏ hơn.

Với dải động cao, hoặc màn hình HDR, bạn có thể hiển thị phạm vi mức ánh sáng lớn hơn nhiều mà không cần phải nén chúng.

Điều này cho phép bạn hiển thị những hình ảnh trông giống như cảnh gốc hơn và sáng hơn và sống động hơn.

Chúng tôi đã có khả năng chụp dải động cao trong nhiều năm, nhưng trước đây, bạn sẽ phải lấy phạm vi chụp đó và nén nó vào phạm vi hiển thị SDR.

Bây giờ, khi hiển thị trên màn hình HDR, bạn có thể hiển thị cảnh giống như ban đầu.

Ví dụ, trong hình ảnh mặt trời mọc trên cảnh tuyết này, có những khu vực rơi vào một loạt các mức độ ánh sáng trong thế giới thực.

Trên màn hình SDR, bạn chỉ có thể thể hiện chính xác một phần của cảnh.

Với màn hình HDR, bạn có thể thể hiện nhiều cảnh hơn mà không ảnh hưởng đến độ tương phản.

Vì vậy, có một màn hình với phạm vi HDR cho phép chúng tôi hiển thị các phần của cảnh sáng hơn so với SDR trắng sáng nhất.

Điều này thường được gọi là khoảng không.

Trong mô hình này, màu trắng tham chiếu là màu trắng sáng nhất mà màn hình SDR sẽ tạo ra.

Bất cứ thứ gì trên điểm đó đều là khoảng không.

Trong các cuộc nói chuyện trước đây, chúng tôi đã giới thiệu Dải động mở rộng, hoặc EDR, để tương tác với nội dung có thể được hiển thị trong khoảng không của màn hình có khả năng HDR.

Trong mô hình EDR, màu trắng tham chiếu là 1.0 và đỉnh là giá trị tối đa mà màn hình có thể biểu diễn.

Các API HDR mà tôi giới thiệu hôm nay sử dụng EDR để triển khai một đường ống hoàn chỉnh hơn cho nội dung dải động cao.

Nếu bạn muốn tìm hiểu thêm về EDR, hãy xem bài nói chuyện "Khám phá kết xuất HDR với EDR".

Đây là một ví dụ về HDR đang hoạt động.

Hình ảnh SDR này của một người ngồi trước cửa sổ trông đẹp khi màu trắng của tờ giấy trong cuốn sách nằm ngay dưới màu trắng tham chiếu.

Bất cứ thứ gì sáng hơn, chẳng hạn như cửa sổ, đều bị lăn ra hoặc cắt bớt.

Tuy nhiên, khi bạn có thể hiển thị hình ảnh ở chế độ HDR, bạn có thể hiển thị nhiều chi tiết hơn trong các điểm nổi bật và giữ độ tương phản đáng tin cậy hơn trên toàn cảnh.

Đây là lợi ích bạn có thể nhận được từ việc hỗ trợ HDR.

Vậy tại sao lại hỗ trợ hình ảnh HDR? Nếu bạn đang xây dựng một ứng dụng mà nội dung do người dùng tạo hoặc cung cấp là quan trọng, hỗ trợ HDR sẽ làm cho trải nghiệm đó thậm chí còn tốt hơn.

Hỗ trợ HDR có sẵn trên hầu hết các nền tảng của Apple và chúng tôi đã giới thiệu các API này để đảm bảo rằng bạn có thể tận dụng tối đa phần cứng hiển thị đáng kinh ngạc của Apple.

Một lý do quan trọng khác để xem xét hỗ trợ HDR ngay bây giờ là Apple đã làm việc với Tổ chức Tiêu chuẩn Quốc tế, thông qua Ủy ban Kỹ thuật Nhiếp ảnh, để xuất bản một thông số kỹ thuật mới cho hình ảnh HDR trong năm nay.

Thông số kỹ thuật này, TS22028-5, cung cấp một cấu trúc để mã hóa nội dung HDR thành các định dạng hình ảnh tĩnh hiện có mà không ảnh hưởng đến chất lượng.

Tôi sẽ đề cập đến các hình ảnh HDR tuân theo thông số kỹ thuật ISO này là "ISO HDR" để tránh nhầm lẫn với các dạng HDR khác như video HDR, chụp hoặc hiển thị.

Nhớ lại tỷ lệ của chúng tôi từ các hình ảnh SDR điển hình trước đó, bao gồm sRGB và Display P3, xác định màu đen và trắng là 0,2 và 80 candelas trên mỗi mét bình phương.

ISO HDR, trong khi đó, định nghĩa màu đen và màu trắng tham chiếu mặc định lần lượt là 0,0005 và 203.

Mọi thứ trên 203 đều là khoảng không.

Vậy có gì trong những tệp hình ảnh mới này?

Thông số kỹ thuật yêu cầu Hybrid Log-Gamma, HLG, hoặc Perceptual Quantizer, PQ, làm hàm truyền mã hóa.

Chúng có chức năng tương tự như các đường cong gamma được sử dụng trong hình ảnh SDR.

Các màu cơ bản cho các tệp ISO HDR là các màu cơ bản BT.2020.

Đây là một không gian màu gam màu rộng, cho đến nay chỉ được sử dụng phổ biến trong video.

Để tránh các vấn đề với dải, hình ảnh HDR được yêu cầu phải từ 10 bit trở lên cho mỗi thành phần.

Điều này có nghĩa là một số định dạng, như HEIF, có thể mã hóa HDR, nhưng một số định dạng khác, như JPEG truyền thống, không thể tuân thủ 22028-5, vì chúng chỉ hỗ trợ 8 bit cho mỗi thành phần.

Và đối với siêu dữ liệu bắt buộc, cả hồ sơ ICC truyền thống và thẻ CICP đều hợp lệ.

Cùng với nhau, những yêu cầu này xác định các tệp ISO HDR mới.

Có một số trường siêu dữ liệu tùy chọn bổ sung được liên kết với các tệp ISO HDR có thể liên quan đến bạn.

Thẻ môi trường tham chiếu xác định các điều kiện môi trường xung quanh cho điều kiện tham chiếu nội dung.

Độ sáng trắng khuếch tán xác định vị trí của màu trắng tham chiếu cho nội dung này.

Mặc định là 203 mà tôi đã đề cập trước đó.

Thẻ được giới thiệu theo cảnh có thể được sử dụng khi HLG là đường cong chuyển.

Nó xác định xem nội dung hình ảnh là cảnh hay hiển thị được đề cập.

Giá trị mặc định cho thẻ này được hiển thị được giới thiệu.

Các thẻ âm lượng màu làm chủ và nội dung là phổ biến đối với video HDR hiện có và xác định thông tin về các dải màu có trong hình ảnh.

Cuối cùng, thẻ mức độ ánh sáng nội dung cung cấp thông tin về mức độ ánh sáng của cảnh trong hình ảnh.

Để biết thêm thông tin về ISO HDR, hãy xem thông số kỹ thuật trên trang web ISO.

Ngoài ISO HDR, lần đầu tiên tôi rất vui được nói với bạn cách truy cập phiên bản hình ảnh tốt nhất được chụp trên iPhone.

Kể từ năm 2020, hàng nghìn tỷ hình ảnh iPhone đã được chụp bằng dữ liệu bổ sung cho phép chúng tôi tái tạo lại biểu diễn HDR từ hình ảnh SDR.

Tôi gọi loại HDR này là "Gain Map HDR."

Hôm nay, David và tôi sẽ chỉ cho bạn các API mới để truy cập biểu diễn HDR này trong ứng dụng của bạn, cung cấp cho bạn tùy chọn hiển thị hình ảnh HDR đáng kinh ngạc từ bất kỳ thế hệ nào của Gain Map HDR đã có trong thư viện Ảnh của bạn.

Bây giờ hãy nói về cách sử dụng các API mới này để kết hợp hình ảnh HDR vào một ứng dụng.

Các API mà tôi sẽ chỉ cho bạn có sẵn trong SwiftUI, UIKit và AppKit.

Hãy cùng xem SwiftUI và UIKit API.

Trong ví dụ này, tôi có một tệp hình ảnh ISO HDR có thể truy cập qua URL và tôi muốn hiển thị nó.

Tất cả những gì tôi phải làm là tạo một UIImage và cung cấp nó cho Chế độ xem hình ảnh cùng với công cụ sửa đổi DynamicRange mới được phép để kích hoạt dải động cao.

Thật đơn giản.

Tương tự, trong ứng dụng UIKit, bạn có thể đặt thuộc tính UIImageView mới "preferredImageDynamicRange" và thì đấy, một kết quả HDR.

Các thuộc tính dải động bao gồm ba tùy chọn về cách xử lý nội dung HDR.

Các thuộc tính này hoạt động trên chế độ xem SwiftUI Image, UIImage và NSImage.

Tùy chọn cao cho phép hệ thống biết rằng bạn muốn hiển thị nội dung dải động cao và cho phép chúng tôi thực hiện việc ánh xạ nội dung đó lên màn hình hiện tại, bao gồm cập nhật khi trạng thái hiển thị thay đổi.

Lưu ý rằng nếu hình ảnh không phải là HDR, bạn sẽ có được trải nghiệm chính xác giống như khi không có cờ dynamicRange.

Bạn có thể sử dụng các tùy chọn này một cách an toàn với nội dung không phải HDR.

Tùy chọn tiêu chuẩn vô hiệu hóa kết xuất dải động cao và thay vào đó hiển thị tất cả nội dung dưới dạng SDR.

Điều này có nghĩa là nội dung ánh xạ giai điệu bên ngoài phạm vi SDR.

Đây cũng là cách hình ảnh sẽ được hiển thị trên màn hình không có khả năng HDR.

Cuối cùng, tùy chọn constrainedHigh nên được sử dụng khi bạn muốn hiển thị một số HDR nhưng không phải là toàn bộ nội dung.

Tại sao bạn chỉ muốn hiển thị một số HDR, không phải tất cả?

Chà, có một vài lý do có thể xảy ra.

Trong ví dụ này, tôi có chế độ xem Stack chứa hình thu nhỏ của nhiều hình ảnh.

Một số trong những hình ảnh này là HDR, và một số thì không.

Nếu tôi sử dụng tùy chọn DynamicRange cao, đây là những gì bạn sẽ nhận được.

Một số hình ảnh rất sáng và HDR, nhưng hình ảnh SDR thì không và bây giờ trông buồn tẻ, thậm chí có thể không hoạt động.

Bây giờ hãy sử dụng tùy chọn constrainedHigh.

Bằng cách giới hạn khoảng trống mà nội dung HDR được phép sử dụng, tôi làm cho dải phim trông nhất quán hơn nhiều.

Bạn vẫn có thể phân biệt hình ảnh HDR với hình ảnh SDR, nhưng tôi không còn gặp vấn đề gì khi hình ảnh SDR trông có màu xám hoặc không hoạt động.

Một lý do khác khiến bạn có thể muốn sử dụng constrainedHigh hoặc tiêu chuẩn cho một chế độ xem hình ảnh cụ thể là nội dung HDR đôi khi có thể rất sáng và bạn có thể không muốn nó thu hút sự chú ý từ các khía cạnh khác của ứng dụng.

Ví dụ, đây là một hình ảnh nhỏ hơn, khi được hiển thị với HDR đầy đủ, trông giống như phần quan trọng nhất của ứng dụng nhưng đang thu hút sự chú ý khỏi các điều khiển và thông tin quan trọng.

Trước khi tôi tiếp tục, bạn có thể nhận thấy rằng không có lựa chọn nào ở đây không liên quan đến việc ánh xạ tông màu cho hình ảnh.

Nếu bạn đang ở trong tình huống không muốn hệ điều hành thực hiện ánh xạ âm thanh cho mình, bạn sẽ cần sử dụng API cấp thấp hơn mà tôi sẽ thảo luận sau trong phiên này.

Một khía cạnh quan trọng của HDR cần lưu ý là nó yêu cầu một đường ống không kẹp hoặc làm suy giảm dữ liệu HDR.

Các API mà chúng ta thảo luận hôm nay đều được hỗ trợ đầy đủ, nhưng các API bị phản đối có thể không có đường ống HDR an toàn.

Ví dụ: nếu bạn đang thay đổi kích thước hình ảnh bằng cách sử dụng UIGraphicsBeginImageContextWithOptions bị phản đối, bạn sẽ mất HDR và màu gam màu rộng.

Điều này nên tránh khi tạo một ứng dụng có khả năng HDR.

Nếu bạn đang cố gắng tạo hình thu nhỏ, UIKit đã giới thiệu API hình thu nhỏ trên UIImage trong iOS 15.

Nếu bạn không cần kiểm soát kích thước chính xác, đây là cách được đề xuất để có được hình thu nhỏ HDR.

Nếu bạn cần kiểm soát nhiều hơn hoặc cần hỗ trợ trước iOS 15, UIKit cung cấp UIGraphicsImageRenderer.

Bằng cách sử dụng imageRendererFormat, UIKit biết cách xây dựng trình kết xuất sẽ không làm mất thông tin HDR trong hình ảnh khi vẽ lại nó.

Chúng ta hãy xem xét một cách phổ biến để đưa dữ liệu hình ảnh vào một ứng dụng.

PhotoKit cung cấp giao diện cho một ứng dụng để truy cập thư viện Ảnh.

Trong ứng dụng của mình, tôi đã thêm Trình chọn ảnh vào chế độ xem chính của mình, giúp dễ dàng truy cập các hình ảnh do người dùng chọn.

Bởi vì PhotosPicker có thể cố gắng chuyển mã hình ảnh sang định dạng không giữ lại dữ liệu HDR, tôi sẽ sử dụng chính sách mã hóa "hiện tại" và loại khớp "hình ảnh" chung.

Để biết thêm thông tin về cách hoạt động của Trình chọn ảnh, hãy xem phiên "Nhúng trình chọn ảnh vào ứng dụng của bạn".

Với hình ảnh ISO HDR, tôi có thể tạo UIImage từ DataRepresentation và sử dụng nó trực tiếp với bất kỳ chế độ xem hình ảnh nào của tôi mà không cần thêm mã.

Nếu tôi cũng đang hỗ trợ Gain Map HDR, tôi có thể sử dụng UIImageReader mới để có được biểu diễn HDR khi nó có sẵn.

API này sẽ trả về biểu diễn HDR theo mặc định khi trên màn hình HDR và phiên bản SDR khác.

Các API mà chúng ta đã thảo luận cho đến nay không phụ thuộc vào một hình ảnh là HDR hoặc biết rằng một hình ảnh là HDR.

Nhớ lại rằng khi bạn cho chế độ xem hình ảnh biết rằng nó sẽ hiển thị dải động cao, không thành vấn đề nếu hình ảnh đó là HDR.

Tuy nhiên, bạn có thể có một đường ống hoặc ứng dụng muốn xác định xem một hình ảnh có phải là HDR hay không.

Với UIKit, bạn có thể kiểm tra thuộc tính isHighDynamicRange để xác định xem nội dung có tương thích với ISO HDR hay không.

Với AppKit, CoreGraphics và CoreImage, bạn sẽ cần kiểm tra CGColorSpace của hình ảnh.

Hàm CGColorSpaceUsesITUR_2100TF trả về true cho hình ảnh ISO HDR.

Hình ảnh HDR có thể sử dụng nhiều khoảng không.

Ví dụ, iPhone hiện tại tạo ra hình ảnh sử dụng khoảng không lên đến 8 lần.

Tuy nhiên, chỉ một số màn hình có thể hiển thị HDR và không phải tất cả các màn hình HDR đều giống nhau.

iPhone 14 có thể hiển thị các điểm nổi bật HDR sáng hơn tới 8 lần so với màu trắng tham chiếu, trong khi iPad Pro 12.9" và MacBook Pro có thể hiển thị tối đa 16 lần và Màn hình Pro XDR có thể hiển thị tới 400 lần.

Hầu hết các màn hình Apple khác có thể hiển thị tối đa 2 lần khoảng không.

Tuy nhiên, điều này có thể không đủ cho hầu hết nội dung HDR.

Ngoài ra còn có các màn hình ngoài với khả năng HDR được hỗ trợ.

Không có danh sách đầy đủ các màn hình này có sẵn; tuy nhiên, có một API để bạn xác định khả năng hiển thị mà ứng dụng của bạn hiện đang hiển thị.

Bạn có thể truy vấn YRHeadroom tiềm năng trên iOS và iPad OS và maximumPotentialExtendedDynamicRange- ColorComponentValue trên macOS để xác định khả năng hiển thị mà ứng dụng của bạn đang xuất hiện.

Trước khi chúng ta chuyển sang các chủ đề nâng cao hơn, hãy nói về thời điểm hiển thị HDR có ý nghĩa.

Như tôi đã thảo luận, HDR trông rất tuyệt và bạn nên cân nhắc bao gồm hỗ trợ cho nó khi hiển thị hình ảnh là một phần chính trong ứng dụng của bạn.

Nhưng đôi khi nó có thể gây mất tập trung.

Vì vậy, nếu bạn không nghĩ rằng bạn cần thêm pop mà HDR có thể cung cấp cho bạn, hãy cân nhắc sử dụng các tùy chọn constrainedHigh hoặc standard.

Hãy tóm tắt lại.

Bây giờ bạn đã biết cách xác định hình ảnh ISO HDR, hiển thị hình ảnh HDR, truy cập ISO HDR và Gain Map HDR từ Thư viện ảnh và cách xác định xem màn hình của bạn có phải là HDR hay không.

Bây giờ David sẽ hướng dẫn bạn đọc, viết và thao tác với hình ảnh HDR.

Cảm ơn bạn, Jackson. Khi làm việc với hình ảnh HDR, có một vài thao tác phổ biến mà ứng dụng của bạn có thể hỗ trợ: đọc hình ảnh ISO HDR hoặc Gain Map HDR từ tệp hoặc dữ liệu vào bộ nhớ; sửa đổi hình ảnh trong bộ nhớ trong khi vẫn giữ lại nội dung HDR; chuyển đổi từ lớp hình ảnh này sang lớp hình ảnh khác mà không làm mất HDR; và cuối cùng

Một đặc tính quan trọng của đường ống hình ảnh HDR chức năng là các đối tượng hình ảnh có không gian màu liên quan.

Ví dụ, cả hai đối tượng CGImage và CIImage đều sử dụng API CGColorSpace cho việc này.

Hình ảnh có thể có nhiều không gian màu được hỗ trợ, nhưng hình ảnh ISO HDR sẽ có CGColorSpace là ITUR 2100 HLG hoặc PQ.

Với ý nghĩ đó, hãy bắt đầu với cách đọc hình ảnh ISO HDR.

UIImage và NSImage hiện tự động hỗ trợ đọc hình ảnh ISO HDR.

ColorSync, cơ sở hạ tầng quản lý màu sắc của Apple, sẽ xử lý các cấu hình HDR ICC và cung cấp các đối tượng hình ảnh phù hợp để hiển thị.

Khi đọc hình ảnh Gain Map HDR, bạn có thể yêu cầu biểu diễn HDR bằng cách tạo cấu hình UIImageReader thích Dải động cao.

Lưu ý rằng hành vi mới này chỉ ảnh hưởng đến hình ảnh Gain Map HDR.

Cũng giống như với NSImage và UIImage, Core Image tự động hỗ trợ đọc các tệp ISO HDR.

Tất cả những gì bạn cần làm là sử dụng CIImage contentsOfURL API.

Đối tượng CIImage kết quả sẽ tự động chứa công thức chính xác để chuyển đổi từ không gian màu của tệp sang không gian làm việc phạm vi mở rộng Core Image.

Bạn có thể kiểm tra công thức của đối tượng hình ảnh bằng cách sử dụng tính năng QuickLook của Xcode khi gỡ lỗi mã của bạn.

Trong ví dụ này, cửa sổ bật lên QuickLook cho thấy hình ảnh được chuyển đổi từ không gian màu PQ ISO HDR.

Mã của bạn cũng có thể lấy thuộc tính .colorspace để kiểm tra không gian màu của tệp.

Đây có thể là không gian màu SDR, chẳng hạn như sRGB hoặc Display P3, hoặc không gian màu HDR.

Nếu bạn thích sử dụng CoreGraphics API, thì bạn có thể có được hành vi tương đương bằng cách sử dụng CGImageSourceCreateImageAtIndex với khóa decodeRequest mới được đặt thành decodeToHDR.

Vài phút trước, Jackson đã mô tả lý do tại sao bạn có thể muốn giới hạn hình ảnh HDR ở SDR.

Tương tự, các ứng dụng sử dụng Core Image có thể muốn ghi đè hỗ trợ HDR tự động của nó để đảm bảo hình ảnh được ánh xạ tông màu sang SDR.

Điều này có thể hữu ích khi bạn muốn tránh sử dụng HDR cho một số tình huống nhất định, chẳng hạn như phát hiện tính năng.

Để kích hoạt điều này, bạn chỉ cần cung cấp tùy chọn toneMapHDRtoSDR khi tạo CIImage.

Trong trường hợp này, đối tượng CIImage được trả về sẽ chứa một bước công thức ánh xạ tông màu nguồn HDR vào phạm vi SDR trước khi bất kỳ hoạt động nào khác được áp dụng.

Lưu ý rằng tùy chọn này chỉ có hiệu ứng nếu hình ảnh có không gian màu HDR.

CIImage kết quả sẽ trông giống như chỉ định rằng chế độ xem hình ảnh nên sử dụng tùy chọn dynamicRange.standard.

Ngoài ra, điều này có hành vi tương đương với việc sử dụng CGImageSourceCreateImageAtIndex với decodeRequest được đặt thành decodeToSDR.

Theo truyền thống, hình ảnh Gain Map HDR sẽ hiển thị dải động đầy đủ trong ứng dụng Ảnh, nhưng chỉ có biểu diễn SDR có sẵn cho các API như Core Image và ImageIO.

Tôi thực sự vui mừng được mô tả API mới sẽ cho phép ứng dụng của bạn truy cập đầy đủ các hình ảnh Gain Map HDR.

API siêu đơn giản để sử dụng.

Chỉ cần cung cấp tùy chọn expandToHDR khi khởi tạo CIImage.

Trong trường hợp này, đối tượng CIImage được trả về sẽ chứa một công thức kết hợp hình ảnh chính với bản đồ khuếch đại để tạo ra hình ảnh HDR.

Thuộc tính .colorspace của hình ảnh sẽ là không gian màu HDR khi thư viện ảnh chứa dữ liệu bản đồ khuếch đại bổ sung để hỗ trợ điều này.

Hành vi này tương đương với việc sử dụng CGImageSourceCreateImageAtIndex với khóa decodeRequest được đặt thành decodeToHDR.

Các tùy chọn này cũng sẽ hoạt động với các tệp RAW, mà bây giờ tôi sẽ nói chi tiết hơn.

Hình ảnh ProRAW từ iPhone và hình ảnh RAW từ máy ảnh là một định dạng hình ảnh linh hoạt mang lại khả năng kiểm soát sáng tạo đáng kể cho nhiếp ảnh gia.

Điều này bao gồm khả năng kết xuất các phần của cảnh thành khoảng không HDR.

Nhiều định dạng RAW chứa nhiều dải động và chỉ cần được xử lý thành một dạng không bị ràng buộc.

Hãy để tôi mô tả cách thức hoạt động của nó.

Đầu tiên, nếu ứng dụng của bạn chỉ muốn hiển thị SDR mặc định tìm kiếm tệp RAW, hãy tạo một hình ảnh từ URL như bình thường.

Nhưng nếu ứng dụng của bạn chỉ muốn hiển thị giao diện kết xuất HDR mặc định, tất cả những gì bạn cần làm là thêm tùy chọn expandToHDR mới.

Tuy nhiên, nếu ứng dụng của bạn muốn mở khóa toàn bộ chức năng của RAW, thì mã của bạn sẽ tạo CIRAWFilter từ URL.

Nếu bạn chỉ yêu cầu bộ lọc đó cho hình ảnh đầu ra của nó, bạn sẽ nhận được một CIImage với giao diện mặc định.

Nhưng ưu điểm chính của API này là bộ lọc có thể dễ dàng sửa đổi.

Mỗi phiên bản CIRAWFilter có một số thuộc tính mà ứng dụng của bạn có thể thay đổi để thay đổi hình ảnh đầu ra.

Các thuộc tính này được mô tả rõ ràng trong phiên "Chụp và xử lý hình ảnh ProRAW", nhưng hãy xem lại một thuộc tính đặc biệt liên quan đến cuộc thảo luận HDR này.

Lượng dải động cho hình ảnh RAW có thể được điều chỉnh thành bất kỳ giá trị nào từ 0 đến 1.

Thuộc tính extendedDynamicRangeAmount tương tự như các điều khiển viewDynamicRange mà Jackson đã mô tả trước đó.

Giá trị mặc định của thuộc tính này là 0, điều này chỉ ra rằng hình ảnh đầu ra phải là SDR.

Giá trị tối đa của thuộc tính này là 1, điều này chỉ ra rằng hình ảnh đầu ra nên sử dụng hầu hết khoảng trống có trong tệp.

Điều đó kết thúc các cách khác nhau để đọc hình ảnh ISO HDR.

Tiếp theo, hãy thảo luận về một số đề xuất về cách sửa đổi hình ảnh HDR.

Core Image cung cấp một API mạnh mẽ và linh hoạt để làm việc với hình ảnh HDR vì nó chứa hơn 150 bộ lọc tích hợp hỗ trợ HDR.

Tất cả các bộ lọc này có thể tạo hoặc xử lý hình ảnh có chứa nội dung HDR.

Tất cả các bộ lọc này chỉ hoạt động vì không gian màu làm việc của Core Image không bị kẹp và tuyến tính, cho phép các giá trị RGB nằm ngoài phạm vi 0 đến 1.

Khi bạn phát triển ứng dụng của mình, bạn có thể kiểm tra xem một bộ lọc nhất định có hỗ trợ HDR hay không.

Để làm điều này, bạn tạo một phiên bản của bộ lọc, sau đó hỏi các thuộc tính của bộ lọc cho các danh mục của nó và sau đó kiểm tra xem mảng có chứa dải động cao của danh mục hay không.

Vui lòng xem phiên "Hiển thị nội dung EDR với Core Image, Metal và SwiftUI" để biết thêm thông tin về các bộ lọc CI tích hợp và hạt nhân CI tùy chỉnh.

Tiếp theo, hãy thảo luận về việc viết một hình ảnh HDR vào tệp ISO HDR.

Thông thường, ứng dụng của bạn sẽ muốn ghi các đối tượng hình ảnh trong bộ nhớ vào một biểu diễn tệp mới.

Theo truyền thống, sử dụng UIImage, jpegData và pngData API sẽ lưu hình ảnh SDR chính xác 8 bit.

Mới trong năm nay, UIImage có thể tự động ghi hình ảnh ISO HDR bằng định dạng PNG 16 bit hoặc HEIF 10 bit khi một đối tượng chứa nội dung HDR.

Nó cũng sẽ chuyển đổi sang ISO HDR nếu hình ảnh gốc là hình ảnh Gain Map HDR.

Tương tự, Core Image có thể viết tệp HDR PNG khi bạn chỉ định không gian màu HDR và gọi writePNGRepresentationOfImage yêu cầu định dạng RGBA16.

Hoặc Core Image có thể viết tệp HDR TIFF khi bạn chỉ định không gian màu HDR và gọi writeTIFFRepresentationOfImage yêu cầu định dạng RGBA16.

Lưu ý rằng cả PNG và TIFF đều sử dụng nén không mất dữ liệu và sẽ dẫn đến kích thước tệp lớn hơn nhiều.

Kết quả là, cách tốt nhất là viết một tệp HEIF bằng cách sử dụng writeHEIF10RepresentationOfImage và chỉ định một không gian màu HDR.

Có thể có những trường hợp bạn cần chuyển đổi từ lớp khung này sang lớp khung khác hoặc không gian màu này sang không gian màu khác.

Quá trình chuyển đổi giữa các lớp hình ảnh UIImage, CIImage, CGImage, IOSurface và CVPixelBuffer phần lớn vẫn giữ nguyên.

Điều đó nói rằng, đây là một vài điều cần chú ý khi làm việc với đường ống HDR.

Trước tiên hãy thảo luận về việc chuyển đổi sang các đối tượng IOSurface hoặc CVPixelBuffer.

Loại hình ảnh này hữu ích vì, ví dụ, nó có thể được sử dụng làm nội dung của CALayer.

Ngoài ra, nó có thể chứa các hình ảnh được lấy mẫu phụ hai mặt phẳng, rất hiệu quả về bộ nhớ.

Trước khi bạn sử dụng CVPixelBuffer, hãy chắc chắn tuyên bố rằng nó có nội dung tương thích ISO HDR.

Bước đầu tiên là tạo bộ đệm pixel với định dạng thích hợp như phạm vi đầy đủ hai mặt phẳng 10-bit.

Trong khi bạn đang ở đó, để có hiệu suất tốt nhất, hãy đảm bảo chỉ định rằng bộ đệm phải được hỗ trợ bề mặt bằng cách cung cấp IOSurfacePropertiesKey.

Tiếp theo, hãy đảm bảo thêm tệp đính kèm vào CVPixelBuffer để hệ thống biết rằng nó chứa các thuộc tính không gian màu tương thích ISO HDR.

Một khi bạn có CVPixelBuffer, việc chuyển đổi nó thành CIImage là rất nhỏ.

Chỉ cần gọi CIImage với CVPixelBuffer API.

Và bạn có thể chuyển đổi từ CIImage sang CVPixelBuffer bằng cách sử dụng CIContext để kết xuất vào bộ đệm.

Tiếp tục, có một số tình huống mà ứng dụng của bạn có thể muốn chuyển đổi giữa Core Image và CGImageRef API.

Nếu bạn muốn chuyển đổi này để bảo tồn nội dung HDR, bạn nên chọn không gian màu HDR và yêu cầu định dạng pixel sâu như định dạng RGBA16 hoặc RGBAh.

Và mới trong năm nay, CoreImage đã thêm định dạng RGB10, sâu nhưng sử dụng một nửa bộ nhớ.

Chuyển đổi CIImage sang CGImage rất thuận tiện, vì CGImages được hỗ trợ trong nhiều API khác nhau.

Nhưng hãy lưu ý rằng làm như vậy không được khuyến khích để có hiệu suất kết xuất tương tác tốt nhất của người dùng.

Để có hiệu suất nhanh nhất, tốt nhất là kết xuất CoreImage trực tiếp lên MTKView hoặc thông qua PixelBuffer đến CALayer.

Nói về CALayers, hãy quay lại Jackson để tìm hiểu thêm về các API cấp thấp hơn mà bạn có thể cần cho quy trình làm việc phức tạp hơn.

Cảm ơn, David!

CALayers là một công cụ mạnh mẽ khi bạn cần hiệu suất kết xuất tốt nhất hoặc kiểm soát nhiều hơn cách nội dung của bạn được tổng hợp vào ứng dụng của bạn.

Để bật kết xuất HDR trên CALayers, bây giờ bạn có thể đặt thuộc tính wantsExtendedDynamicRangeContent.

Điều này tương tự như tài sản được CAMetalLayers sử dụng để cho phép hiển thị nội dung trong khoảng không của màn hình của bạn.

Sự khác biệt chính giữa hai phương pháp này là thuộc tính CALayer cho phép ánh xạ tông màu của nội dung lớp, trong khi CAMetalLayer thì không. Điều này có nghĩa là gì trong thực tế?

Hình ảnh và cốt truyện này hiển thị nội dung với khoảng trống gấp 10 lần.

Khi nó được hiển thị trên màn hình có sẵn ít nhất 10 lần khoảng không, cả hai lớp đều hoạt động giống hệt nhau.

Bây giờ hãy giả sử rằng màn hình chỉ có khoảng không gấp 5 lần.

Trong trường hợp CAMetalLayer, dữ liệu hình ảnh trên 5 lần sẽ được kẹp vào những gì màn hình có thể hiển thị, dẫn đến sự gián đoạn rõ nét trong hình ảnh.

Trong trường hợp CALayer, hình ảnh sẽ được ánh xạ tông màu để tránh sự gián đoạn đó.

Thuật toán ánh xạ tông màu chính xác được sử dụng phụ thuộc vào đường cong truyền được sử dụng với hình ảnh đó.

Để biết thêm thông tin về các thuật toán này, bạn có thể tham khảo các tiêu chuẩn ITU cho HLG và PQ.

CALayers cung cấp một cách nhanh chóng và đơn giản để đưa nội dung HDR lên màn hình, trong khi CAMetalLayers cho phép bạn tự do tạo đường ống ánh xạ tông màu của riêng mình.

Để trực tiếp sử dụng CALayer để hiển thị HDR, bạn phải sử dụng một trong những lớp có sẵn này.

Một đối tượng thuộc loại CGImage, CVPixelBuffer hoặc IOSurface được gắn thẻ thích hợp là ISO HDR sẽ được CALayer hiển thị và ánh xạ tông màu.

Nếu bạn muốn sử dụng CALayer trực tiếp và không sử dụng một trong các lớp này, bạn có thể sử dụng một trong các phương pháp mà David đã mô tả để chuyển đổi sang chúng.

Khi làm việc với quy trình làm việc HDR, điều quan trọng là phải sử dụng các định dạng pixel chính xác.

Các định dạng pixel này an toàn để sử dụng khi xử lý dữ liệu HDR.

Các định dạng float 16 và 32-bit luôn hỗ trợ dải động cao.

Các định dạng số nguyên 16-bit cũng sẽ hoạt động để hỗ trợ nội dung HDR ở các định dạng tệp và ngữ cảnh thích hợp.

Cuối cùng, có các định dạng pixel 10-bit mà bạn có thể sử dụng khi bộ nhớ và kích thước tệp quan trọng.

Đây là độ sâu bit mặc định cho hầu hết các hình ảnh ISO HDR được nén.

Ngoài ra còn có cờ CoreGraphics khi tạo CGImage có thể được sử dụng cho nội dung HDR.

Giống như danh sách trước, bạn có thể sử dụng float, half float, 16-bit integer và 10-bit RGB.

Một chủ đề quan trọng cuối cùng khi giới thiệu chức năng mới như thế này là khả năng tương thích ngược.

Bạn có thể làm gì để hỗ trợ các phiên bản iOS và macOS cũ hơn khi xử lý hình ảnh HDR?

Đối với hình ảnh ISO HDR, CoreImage cung cấp tùy chọn toneMapHDRtoSDR để chuyển đổi HDR sang SDR.

Tương tự, khi kết xuất bằng CoreGraphics CGContext, bạn có thể nhắm mục tiêu SDR CGColorspace và hình ảnh sẽ được ánh xạ tông màu đến không gian đó.

Đối với Gain Map HDR, hãy sử dụng kiểm tra phiên bản để chuyển sang cổng khi các tùy chọn expandToHDR mới được sử dụng.

Khi các tùy chọn này bị bỏ qua, phiên bản SDR của tệp sẽ luôn được tải thay vì phiên bản HDR.

Để kết thúc, chúng tôi đã giới thiệu các API mới để đọc, viết và hiển thị hình ảnh HDR, chỉ cho bạn cách truy cập các biểu diễn Gain Map HDR và cung cấp cho bạn các API để làm việc với một đường ống hoàn toàn có khả năng HDR.

Chúng tôi nóng lòng muốn xem những điều tuyệt vời mà bạn tạo ra với HDR!

Cùng nhau: Cảm ơn vì đã xem!

.