10101

♪ ♪

Ethan: Xin chào, tôi là Ethan.

Tôi đến từ nhóm Siri Understanding và ở đây để nói chuyện với bạn về một số phát triển thú vị trong nhận dạng giọng nói.

Trong iOS 10, chúng tôi đã giới thiệu khung Speech.

Nó cho phép bạn tận dụng cùng một công nghệ hỗ trợ Siri và đọc chính tả bàn phím để tạo các ứng dụng hỗ trợ giọng nói bằng cách sử dụng giao diện đơn giản, trực quan.

Tuy nhiên, lớp nhận dạng giọng nói, ra khỏi hộp, không phù hợp với tất cả các ứng dụng.

Để giải thích tại sao, hãy nói về cách nhận dạng giọng nói hoạt động.

Đầu tiên, một hệ thống nhận dạng giọng nói cung cấp dữ liệu âm thanh vào Mô hình Âm thanh, tạo ra một biểu diễn ngữ âm.

Sau đó, biểu diễn ngữ âm được chuyển đổi thành dạng văn bản hoặc phiên âm.

Đôi khi, nhiều biểu diễn ngữ âm phù hợp với dữ liệu âm thanh hoặc một biểu diễn ngữ âm duy nhất có thể tương ứng với nhiều phiên âm.

Trong những trường hợp này, chúng tôi kết thúc với nhiều phiên âm ứng cử viên và chúng tôi cần một cách để làm rõ ràng.

Để làm điều này, chúng tôi sử dụng một thứ gọi là mô hình ngôn ngữ.

Một mô hình ngôn ngữ dự đoán khả năng một từ nhất định sẽ xuất hiện tiếp theo trong một chuỗi các từ.

Áp dụng cho toàn bộ câu, nó có thể cho chúng ta cảm giác liệu câu đó có vô nghĩa hay không.

Mô hình ngôn ngữ giúp chúng tôi từ chối các ứng viên khó có thể xảy ra, dựa trên các mô hình sử dụng mà mô hình đã tiếp xúc trong quá trình đào tạo.

Kể từ iOS 10, khung Speech đã gói gọn toàn bộ quá trình này để trình bày một giao diện dễ sử dụng.

Để hiểu tại sao điều đó có thể không lý tưởng, hãy xem xét một ví dụ.

Tôi thích chơi cờ vua, và tôi đã làm việc trên một ứng dụng cờ vua cho phép người dùng ra lệnh cho các nước đi riêng lẻ, cũng như các lần mở và phòng thủ thông thường.

Ở đây, đối thủ của tôi đã chơi Queen's Gambit cổ điển.

Tôi đã học, và tôi thích phản hồi E5, Albin counter gambit.

Chơi trò chơi ngược Albin.

Uh oh, có một vấn đề.

Người nhận dạng đang nhận ra sai nước đi cờ vua của tôi như một yêu cầu âm nhạc.

Mô hình ngôn ngữ mà bộ nhận dạng sử dụng đã tiếp xúc với rất nhiều yêu cầu âm nhạc trong quá trình đào tạo của nó, vì vậy nó được chuẩn bị cho các truy vấn như "Phát album", tiếp theo là tên album.

Ngược lại, có lẽ nó chưa bao giờ gặp phiên âm ưa thích của tôi.

Bằng cách trừu tượng hóa hành vi của mô hình ngôn ngữ, khung Speech buộc tất cả các ứng dụng phải sử dụng cùng một mô hình, mặc dù các miền khác nhau yêu cầu hành vi khác nhau.

Bắt đầu từ iOS 17, bạn sẽ có thể tùy chỉnh hành vi của mô hình ngôn ngữ của SFSpeechRecognizer, điều chỉnh nó cho phù hợp với ứng dụng của bạn và cải thiện độ chính xác của nó.

Để bắt đầu với việc tùy chỉnh mô hình ngôn ngữ, trước tiên hãy tạo một bộ sưu tập dữ liệu đào tạo.

Bạn có thể làm điều này trong quá trình phát triển của mình.

Sau đó, trong ứng dụng của bạn, bạn sẽ chuẩn bị dữ liệu, định cấu hình yêu cầu nhận dạng và sau đó chạy nó.

Hãy nói về quá trình xây dựng bộ sưu tập dữ liệu đào tạo của bạn.

Ở cấp độ cao, dữ liệu đào tạo sẽ bao gồm các đoạn văn bản đại diện cho các cụm từ mà người dùng ứng dụng của bạn có khả năng nói.

Những điều này sẽ dạy mô hình mong đợi những cụm từ đó và tăng khả năng chúng sẽ được nhận dạng chính xác.

Thử nghiệm thường xuyên, vì thật ngạc nhiên khi thấy bộ nhận dạng có khả năng như thế nào và nó được cải thiện như thế nào theo thời gian.

Khung lời nói giới thiệu một lớp học mới hoạt động như một vùng chứa dữ liệu đào tạo.

Nó được xây dựng bằng cách sử dụng trình tạo kết quả DSL.

Bạn có thể cung cấp một cụm từ chính xác hoặc một phần của cụm từ bằng cách sử dụng đối tượng PhraseCount.

PhraseCount cũng sẽ mô tả số lần mẫu nên được thể hiện trong tập dữ liệu cuối cùng.

Điều này có thể được sử dụng để cân nhắc một số cụm từ nhất định nhiều hơn những cụm từ khác.

Hệ thống chỉ có thể chấp nhận rất nhiều dữ liệu, vì vậy hãy cân bằng nhu cầu tăng cụm từ với ngân sách dữ liệu đào tạo tổng thể của bạn.

Bạn cũng có thể tận dụng các mẫu để tạo ra một số lượng lớn các mẫu phù hợp với một mẫu thông thường.

Ở đây, tôi đã định nghĩa ba loại từ cùng nhau tạo nên một nước đi cờ vua.

Mảnh ghép cần di chuyển, nhân đôi như tệp mà tôi đang nhắm mục tiêu, mảnh hoàng gia xác định bên nào của bảng để chơi và thứ hạng để di chuyển đến.

Bằng cách ghép chúng lại với nhau thành một mẫu, tôi có thể dễ dàng tạo ra các mẫu dữ liệu đại diện cho mọi động thái có thể.

Ở đây, số lượng áp dụng cho toàn bộ mẫu, vì vậy tôi sẽ nhận được 10.000 mẫu đại diện cho các nước đi cờ vua, được chia đều cho tất cả các mẫu dữ liệu kết quả.

Khi tôi xây dựng xong đối tượng dữ liệu, tôi xuất nó sang một tệp và triển khai vào ứng dụng của mình giống như bất kỳ tài sản nào khác.

Nếu ứng dụng của bạn sử dụng thuật ngữ chuyên ngành, ví dụ, một ứng dụng y tế bao gồm tên dược phẩm, bạn có thể xác định cả chính tả và cách phát âm của các thuật ngữ đó và cung cấp số lượng cụm từ thể hiện việc sử dụng chúng.

Cách phát âm được chấp nhận dưới dạng chuỗi X-SAMPA.

Mỗi ngôn ngữ hỗ trợ một tập hợp con duy nhất của các ký hiệu phát âm.

Tham khảo tài liệu để biết toàn bộ ngôn ngữ và biểu tượng được hỗ trợ.

Đối với ứng dụng của tôi, tôi muốn đảm bảo rằng bộ nhận dạng có thể hiểu biến thể Winawer, một biến thể phổ biến của hệ thống phòng thủ Pháp.

Tôi mô tả cách phát âm bằng cách sử dụng tập hợp con của các ký hiệu X-SAMPA được hỗ trợ bởi ngôn ngữ này.

Bạn có thể sử dụng cùng một API để đào tạo dữ liệu mà ứng dụng của bạn có thể truy cập trong thời gian chạy.

Bạn có thể làm điều này để hỗ trợ các mẫu sử dụng cụ thể cho người dùng của bạn, chẳng hạn như tập trung vào các lỗ mở và phòng thủ cờ vua mà người dùng của bạn đang cố gắng học.

Bạn cũng có thể muốn đào tạo về các thực thể được đặt tên.

Có thể ứng dụng của bạn hỗ trợ chơi mạng với danh bạ của người dùng.

Và như mọi khi, tôn trọng quyền riêng tư của người dùng là điều tối quan trọng.

Ví dụ, một ứng dụng giao tiếp có thể muốn tăng các lệnh để gọi các liên hệ dựa trên tần suất mà các liên hệ đó xuất hiện trong lịch sử cuộc gọi.

Loại thông tin này phải luôn ở trên thiết bị.

Bạn chỉ cần gọi các phương thức tương tự từ bên trong ứng dụng của mình để tạo một đối tượng dữ liệu, ghi nó vào một tệp và nhập nó như được hiển thị trước đó.

Khi dữ liệu đào tạo được tạo ra, nó sẽ bị ràng buộc với một ngôn ngữ duy nhất.

Nếu bạn muốn hỗ trợ nhiều ngôn ngữ trong một tập lệnh duy nhất, bạn có thể sử dụng các phương tiện bản địa hóa tiêu chuẩn như NSLocalizedString để làm như vậy.

Bây giờ, hãy nói về việc triển khai mô hình của bạn trong ứng dụng của bạn.

Đầu tiên, bạn cần gọi một phương thức mới, prepareCustomLanguageModel, chấp nhận tệp chúng tôi đã tạo ở bước trước và tạo ra hai tệp mới mà chúng tôi sẽ sử dụng sau.

Cuộc gọi phương thức này có thể có một lượng lớn độ trễ liên quan, vì vậy tốt nhất bạn nên gọi nó ra khỏi luồng chính và ẩn độ trễ đằng sau một số giao diện người dùng, chẳng hạn như màn hình tải.

Đôi khi, bạn cần giữ dữ liệu trên thiết bị nơi nó được tạo ra để tôn trọng quyền riêng tư của người dùng.

Tùy chỉnh LM hỗ trợ điều này bằng cách không bao giờ gửi dữ liệu tùy chỉnh qua mạng.

Tất cả các yêu cầu tùy chỉnh đều được phục vụ nghiêm ngặt trên thiết bị.

Khi ứng dụng của bạn xây dựng yêu cầu nhận dạng giọng nói, trước tiên bạn thực thi rằng nhận dạng được chạy trên thiết bị.

Không làm như vậy sẽ khiến các yêu cầu được phục vụ mà không có tùy chỉnh.

Sau đó, bạn đính kèm mô hình ngôn ngữ vào đối tượng yêu cầu của mình.

Bây giờ, với tùy chỉnh LM được bật trong ứng dụng của tôi...

Chơi trò chơi ngược Albin.

Các điều khoản tùy chỉnh của tôi cũng hoạt động.

Chơi biến thể Winawer.

Bằng cách tùy chỉnh mô hình ngôn ngữ, tôi đã điều chỉnh bộ nhận dạng cho miền ứng dụng của mình và tôi đã giành được một số quyền kiểm soát đối với cách nó hoạt động.

Quan trọng nhất, tôi đã cải thiện độ chính xác nhận dạng giọng nói cho ứng dụng của mình.

Giờ đây, khung Speech có thể được điều chỉnh cho nhiều ứng dụng hơn và nhiều người dùng hơn, nó thậm chí còn mạnh mẽ hơn và có thể được sử dụng để tạo ra những trải nghiệm tốt hơn nữa.

Tùy chỉnh mô hình ngôn ngữ cung cấp cho bạn một cách để nâng cao trình nhận dạng giọng nói và tùy chỉnh nó cho các ứng dụng của bạn.

Tôi rất hào hứng khi thấy tất cả những điều tuyệt vời mà bạn sẽ hoàn thành với nó.

Cảm ơn bạn, và nhớ chơi cho trung tâm.

♪ ♪