10162

♪ ♪

Cody: Xin chào, và chào mừng đến với "Sách dạy nấu ăn SwiftUI để tập trung."

Tôi là Cody, và hôm nay tôi sẽ thảo luận về một số điều mà bạn có thể làm với các API tập trung trong SwiftUI để tạo ra trải nghiệm người dùng thực sự tuyệt vời.

Trong video này, tôi sẽ phục vụ một bữa ăn ba món từ một thực đơn cố định gồm các chi tiết API ngon kết hợp với một loạt các ví dụ mã tốt.

Là một món khai vị, tôi sẽ dành một chút thời gian để xem lại những điều cơ bản của trọng tâm: nó là gì và nó làm công việc gì?

Đối với món đầu tiên, hãy kích thích khẩu vị của bạn bằng cách xem xét các thành phần tạo nên trải nghiệm tập trung.

Với những nguyên liệu đó được đặt ra, tôi thực sự có thể bắt đầu nấu ăn.

Đối với món chính, tôi sẽ tìm hiểu một số công thức để kiểm soát giao diện tiêu điểm, quan sát chuyển động lấy nét và phản hồi đầu vào bàn phím bằng các điều khiển tùy chỉnh.

Vậy, trọng tâm là gì?

Focus là một công cụ để quyết định cách phản hồi khi ai đó nhấn phím trên bàn phím, vuốt trên Apple TV Remote hoặc xoay Digital Crown trên đồng hồ của họ.

Những phương pháp đầu vào này có một điểm chung quan trọng.

Theo cách riêng của họ, họ không cung cấp đủ thông tin để xác định điều khiển trên màn hình nào mà đầu vào của họ được dành cho.

So sánh điều này với những thứ như chuột, bàn di chuột và màn hình cảm ứng.

Khi bạn sử dụng chuột hoặc bàn di chuột, con trỏ trên màn hình sẽ liên kết các nhấp chuột của bạn với tọa độ màn hình mà hệ thống sử dụng để tìm mục tiêu của tương tác.

Focus cung cấp thêm thông tin mà hệ thống cần để nhập trực tiếp mà không cần con trỏ.

Khi chế độ xem có tiêu điểm, hệ thống sẽ sử dụng nó làm điểm khởi đầu để phản hồi đầu vào từ bàn phím, điều khiển từ xa Apple TV và Vương miện kỹ thuật số Apple Watch.

Trọng tâm không chỉ là một chi tiết thực hiện.

Nó cũng quan trọng không kém đối với những người sử dụng ứng dụng của bạn, đó là lý do tại sao chế độ xem tập trung được trình bày với sự nhấn mạnh đặc biệt.

macOS tự động thêm một đường viền xung quanh chế độ xem tập trung để hiển thị rằng nó sẽ nhận được đầu vào bàn phím.

watchOS vẽ một đường viền màu xanh lá cây xung quanh các điều khiển để báo hiệu rằng giá trị của điều khiển có thể được thay đổi bằng cách xoay Digital Crown.

Và trên tvOS, chế độ xem tập trung nhận được hiệu ứng di chuột nâng nó lên trên mặt phẳng của các điều khiển khác.

Nhấn mạnh quan điểm tập trung giúp mọi người theo một vài cách.

Họ có thể dự đoán đầu vào của họ sẽ đi đâu khi họ gõ trên bàn phím hoặc vuốt trên điều khiển từ xa.

Và trong một bố cục phức tạp hoặc chi tiết, nó nhắc nhở mọi người trong nháy mắt phần nào của ứng dụng mà họ đang tương tác.

Tiêu điểm hoạt động rất giống một loại con trỏ đặc biệt.

Thay vì theo dõi một điểm trên màn hình như con trỏ chuột, nó theo dõi phần nào trong giao diện người dùng của bạn là mục tiêu cho đầu vào lấy nét.

Vì lý do này, tôi thích nghĩ về sự tập trung như một con trỏ cho sự chú ý của người dùng.

Bây giờ bạn đã biết một chút về tiêu điểm là gì và nó xuất hiện như thế nào trong ứng dụng của bạn, tôi có thể trình bày khóa học đầu tiên, xem xét các thành phần cơ bản đi vào trải nghiệm tập trung của mọi ứng dụng: chế độ xem có thể tập trung, trạng thái tập trung, giá trị tập trung và các phần tập trung.

Thành phần chính cần xem xét khi nấu ăn tập trung là chế độ xem tập trung.

Đây là chế độ xem mà hệ thống sử dụng làm điểm khởi đầu khi phản hồi đầu vào tiêu điểm.

Các biện pháp kiểm soát khác nhau có thể tập trung trong các trường hợp khác nhau và vì những lý do khác nhau.

So sánh các trường văn bản và các nút trên macOS và iPadOS.

Các trường văn bản luôn có thể lấy nét được, cho dù bạn nhấn vào chúng hay bạn nhấn phím Tab để di chuyển tiêu điểm từ điều khiển trước đó.

Loại điều khiển này hỗ trợ lấy nét để chỉnh sửa, bởi vì vai trò của nó là nắm bắt đầu vào lấy nét liên tục.

Các nút khác nhau. Công việc của họ là xử lý các cú nhấp chuột và chạm.

macOS và iPadOS không tập trung vào các nút khi bạn nhấn vào chúng và cách duy nhất để tiếp cận chúng bằng phím Tab là bật điều hướng bàn phím trên toàn hệ thống.

Nếu bạn không quen thuộc với cài đặt này, bạn có thể tìm thấy nó trong ngăn cài đặt Bàn phím của Cài đặt Hệ thống macOS.

Đó là công tắc có nhãn "Điều hướng bàn phím".

Sau khi bật công tắc đó, tôi có thể nhấn phím Tab để tập trung vào các nút và nhấn phím cách để kích hoạt chúng.

Các nút hỗ trợ tiêu điểm để kích hoạt.

Các điều khiển này không yêu cầu tập trung để thực hiện công việc của họ, nhưng chúng sẽ tập trung nếu hệ thống cho phép, để hỗ trợ các lựa chọn thay thế dựa trên tiêu điểm cho việc nhấp và chạm.

Trong iOS 17 và macOS Sonoma, có các API mới cho các điều khiển tùy chỉnh để tham gia vào hệ thống tập trung.

Khi bạn áp dụng công cụ sửa đổi chế độ xem "có thể lấy nét", giờ đây bạn có thể tinh chỉnh hành vi kết quả bằng cách chỉ định các loại tương tác lấy nét mà điều khiển của bạn hỗ trợ.

Đối với các điều khiển sử dụng tiêu điểm để cập nhật trạng thái theo thời gian, chỉ định các tương tác chỉnh sửa.

Đối với các điều khiển sử dụng tiêu điểm thay thế cho kích hoạt con trỏ trực tiếp, chỉ định kích hoạt tương tác.

Nếu bạn không cung cấp bất kỳ đối số nào, hệ thống sẽ tập trung kiểm soát cho tất cả các tương tác.

Trước macOS Sonoma, công cụ sửa đổi có thể tập trung chỉ hỗ trợ ngữ nghĩa kích hoạt.

Nếu bạn đã sử dụng công cụ sửa đổi có thể tập trung trong mã macOS của mình, hãy xác minh rằng hành vi mới phù hợp với trường hợp sử dụng của bạn.

Bạn có thể cần cập nhật mã của mình bằng cách thêm đối số "tương tác".

Thành phần tiếp theo liên quan đến trạng thái của hệ thống tập trung từ thời điểm này sang thời điểm khác.

Thành phần này được đặt tên một cách khéo léo là "Trạng thái tập trung".

Hệ thống theo dõi chế độ xem nào có trọng tâm và ứng dụng có thể sử dụng thông tin đó trong logic của nó để xác định cách xử lý đầu vào và cách tạo kiểu xem.

Để quan sát trạng thái của hệ thống, bạn tạo các ràng buộc liên kết các giá trị mà bạn cung cấp với trọng tâm là một chế độ xem cụ thể.

Các chế độ xem có thể đọc các ràng buộc này để nhận thông báo khi tiêu điểm thay đổi, chẳng hạn như chế độ xem trở nên tập trung hoặc khi tiêu điểm bị loại bỏ.

Các thuộc tính trạng thái tập trung với các giá trị Boolean sẽ cho bạn biết nếu một chế độ xem duy nhất được tập trung, như được hiển thị ở đây.

Đối với các trường hợp phức tạp hơn, bạn cũng có thể sử dụng các kiểu dữ liệu tùy chỉnh.

Sau đó, tôi sẽ thảo luận về một ví dụ về điều này và chỉ ra cách thay đổi trạng thái lấy nét theo chương trình.

Tiếp theo, API Giá trị Tập trung.

API Giá trị Tập trung giải quyết vấn đề về cách xây dựng các phụ thuộc dữ liệu liên kết các phần từ xa trong giao diện người dùng của bạn.

Sử dụng API này để cập nhật các lệnh ứng dụng của bạn dựa trên những gì đang xảy ra trong cảnh hoạt động.

Các giá trị tập trung cho phép luồng dữ liệu giữa các yếu tố khác nhau này.

Tôi sẽ xác định một cái tùy chỉnh và sử dụng nó để xây dựng nội dung menu chính của mình.

Tạo và sử dụng các giá trị tập trung tương tự như tạo và sử dụng các khóa và đối tượng môi trường tùy chỉnh.

Bạn xác định một khóa mới bằng cách sử dụng giao thức "FocusedValueKey", và sau đó mở rộng "FocusedValues" với một thuộc tính được tính toán sử dụng khóa mới để lấy và đặt các giá trị.

Dữ liệu bạn sử dụng đến từ chế độ xem cảnh của bạn và có thể là một giá trị, một ràng buộc hoặc một đối tượng có thể quan sát được.

Trong mọi trường hợp, bạn sử dụng một nhóm công cụ sửa đổi chế độ xem để liên kết dữ liệu với tiêu điểm nằm trong phần đó của hệ thống phân cấp chế độ xem.

Như với các giá trị môi trường, bạn truy cập các giá trị tập trung của mình bằng cách khai báo một thuộc tính động.

Trong ví dụ này, giá trị tập trung của tôi là một ràng buộc, vì vậy tôi sử dụng trình bao bọc thuộc tính "@FocusedBinding" và cung cấp cho nó đường dẫn khóa tùy chỉnh của mình.

"@FocusedBinding" nhìn vào chế độ xem tập trung và tổ tiên của nó để xem liệu hiện tại có một ràng buộc liên quan đến khóa hay không.

Trình bao bọc thuộc tính tự động mở gói ràng buộc để tôi có thể làm việc trực tiếp với giá trị ràng buộc.

Điều duy nhất tôi cần làm là sử dụng tài sản mới của mình trong phần thân của chế độ xem.

Theo thời gian, khi tiêu điểm di chuyển giữa các điều khiển khác nhau và các cửa sổ khác nhau hoạt động, hệ thống sẽ cập nhật chế độ xem để phản ánh các giá trị mà nó tìm thấy trong bối cảnh mới.

Thành phần cuối cùng là API phần Tiêu điểm.

Các phần lấy nét cung cấp cho bạn một cách để tác động đến cách lấy nét di chuyển khi ai đó vuốt trên Apple TV Remote hoặc nhấn phím Tab trên bàn phím.

Theo mặc định, tiêu điểm bắt đầu ở điều khiển trên cùng gần nhất với cạnh trước của màn hình.

Từ đó, nhấn Tab di chuyển tiêu điểm từ điều khiển này sang điều khiển tiếp theo, theo thứ tự bố cục của ngôn ngữ hiện tại.

Khi bạn đạt đến điều khiển cuối cùng trên màn hình, nhấn Tab một lần nữa sẽ khởi động lại trình tự.

Chuyển động lấy nét với điều khiển từ xa Apple TV có hướng.

Bạn có thể vuốt lên, xuống, trái và phải để di chuyển tiêu điểm giữa các điều khiển.

Chuyển động định hướng chỉ hoạt động giữa các mục tiêu liền kề.

Trong ví dụ này, tôi có thể vuốt sang phải từ nút Creme Brûlée sang một trong những món tráng miệng khác.

Nhưng nếu tôi muốn thêm các bản sửa lỗi creme brûlée vào danh sách hàng tạp hóa của mình, tôi không thể vuốt xuống.

Nút đó không nằm ngay bên dưới nút creme brûlée, vì vậy cử chỉ của tôi không thành công.

Để làm cho các mục tiêu tiêu điểm này thẳng hàng, tôi sẽ đánh dấu vùng chứa của nút dưới cùng là phần lấy nét.

Các phần lấy nét trở thành mục tiêu cho các cử chỉ chuyển động, nhưng chúng không trở nên có thể tập trung.

Thay vào đó, họ hướng dẫn tập trung vào nội dung có thể tập trung gần nhất.

Để có hiệu quả, các phần trọng tâm phải chiếm nhiều không gian hơn nội dung của chúng.

Trong trường hợp này, tôi sẽ thêm các miếng đệm trước và sau nút để làm cho ngăn xếp phát triển để phù hợp với chiều rộng của màn hình.

Với mục tiêu tiêu điểm lớn hơn tại chỗ, bây giờ tôi có thể vuốt xuống từ bất cứ đâu để đến nút dưới cùng.

Tôi đã có thể nếm thử món creme brûlée đó rồi!

Tôi sẽ hướng dẫn bạn qua một số công thức kết hợp các thành phần chủ yếu mà tôi vừa mô tả để đánh bóng giao diện của các điều khiển tùy chỉnh và loại bỏ ma sát khỏi các tác vụ thông thường.

Gần đây, tôi đã sử dụng một ứng dụng sách dạy nấu ăn do đầu bếp Curt đồng nghiệp của tôi tạo ra.

Bạn có thể nhận ra nó từ video WWDC22 của anh ấy.

Các công thức nấu ăn trong phần này dựa trên một số tính năng mới mà tôi đang thực hiện sẽ được hưởng lợi từ một số chú ý đến hành vi tập trung.

Ví dụ, tôi đã thêm một danh sách hàng tạp hóa trong ứng dụng để giúp tôi nhớ những gì cần mua trong chuyến đi tiếp theo đến cửa hàng tạp hóa.

Công thức đầu tiên này cho thấy một chút chuyển động lấy nét có lập trình có thể khiến việc chỉnh sửa danh sách hàng tạp hóa của tôi trở thành một trải nghiệm thú vị như thế nào.

Khi tờ danh sách hàng tạp hóa xuất hiện, nó luôn có một mặt hàng trống ở cuối.

Nhấn vào mục trống sẽ hiển thị bàn phím để tôi có thể mô tả những gì tôi cần mua.

Thêm hàng tạp hóa là một nhiệm vụ thường xuyên, vì vậy tôi muốn tiết kiệm cho mình một cú chạm bằng cách tự động tập trung vào mục trống bất cứ khi nào danh sách xuất hiện.

Trước đó, tôi đã chỉ ra cách sử dụng Focus State API để quan sát và cập nhật chế độ xem nào có tiêu điểm.

Tôi sẽ sử dụng cùng một API ở đây.

Ví dụ trước đã sử dụng một lá cờ để báo hiệu liệu một chế độ xem duy nhất có tiêu điểm hay không.

Trong trường hợp danh sách hàng tạp hóa của tôi, có bất kỳ trường văn bản nào để quan sát.

Giá trị của FocusState có thể là bất kỳ loại Hashable nào cho các trường hợp như thế này.

Mỗi thành phần tôi thêm vào màn hình này có một ID duy nhất và tôi có thể theo dõi tiêu điểm bằng cách lưu trữ ID được liên kết với trường văn bản tập trung.

Tôi sẽ sử dụng công cụ sửa đổi "focused(_:equals:)" để tạo liên kết giữa mỗi trường văn bản và thành phần của nó.

Tôi cần cung cấp cho công cụ sửa đổi này hai đối số: liên kết với thuộc tính "focusedItem" của tôi và ID thành phần mà liên kết nên được cập nhật, khi tiêu điểm nằm trong trường văn bản đó.

Bây giờ tôi có thể chạy ứng dụng và xác minh rằng thuộc tính "focusedItem" được cập nhật với các giá trị ID khác nhau khi tôi nhấn vào danh sách tạp hóa.

Với trạng thái ràng buộc tiêu điểm của tôi tại chỗ, tôi có những gì tôi cần để di chuyển tiêu điểm theo chương trình đến trường văn bản khi danh sách tạp hóa lần đầu tiên xuất hiện trên màn hình.

Tôi làm điều này bằng cách thêm công cụ sửa đổi chế độ xem "defaultFocus(_:_:)" vào danh sách của tôi, hiện cũng có sẵn trong iOS 17.

Khi hệ thống đánh giá tiêu điểm lần đầu tiên trên màn hình này, nó sẽ cố gắng cập nhật ràng buộc của tôi với ID của mặt hàng trong danh sách hàng tạp hóa cuối cùng.

Với những thay đổi này, việc thêm vào danh sách hàng tạp hóa của tôi bây giờ là một quá trình gồm hai bước.

Nhấn vào nút thanh công cụ để trình bày trang tính, và sau đó bắt đầu nhập.

Không có bước ba.

Khi danh sách mua sắm của tôi tăng lên, tôi nhận thấy rằng việc nhấn vào nút Thêm trên thanh công cụ sẽ tạo ra một mục danh sách trống mới, nhưng tiêu điểm vẫn ở vị trí của nó.

Tôi phải chạm vào mục trống để tập trung vào nó.

Đây là một trường hợp khác mà tôi muốn ứng dụng di chuyển tiêu điểm theo chương trình để tôi có thể bắt đầu nhập ngay khi mục mới xuất hiện.

Sự khác biệt là bây giờ tôi muốn kiểm soát thời gian thay đổi.

May mắn thay, tôi có thể sử dụng cùng một ràng buộc trạng thái lấy nét mà tôi đã tạo để đặt tiêu điểm mặc định.

Trong GroceryListView của tôi, tôi có một phương thức "addEmptyItem" để thêm một mục mới vào mô hình của tôi.

Và vì tôi đã liên kết TextField của mục mới với thuộc tính "currentItemID", tôi chỉ cần cập nhật thuộc tính bằng ID mới như một phần của hành động nút thanh công cụ của mình.

Voilà!

Bây giờ khi tôi muốn bắt đầu hoặc cập nhật danh sách hàng tạp hóa của mình, tôi không cần phải nhấn vào bất cứ thứ gì để tập trung vào nơi cần thiết, tôi chỉ có thể bắt đầu nhập.

Tiếp theo, hãy sử dụng thêm một số thành phần để cải thiện các tương tác tập trung cho một điều khiển tùy chỉnh mà tôi đã tạo.

Tại thời điểm này, tôi đã lập danh mục rất nhiều công thức nấu ăn.

Khi tôi thử từng cái một, tôi muốn nhớ cái nào xuất hiện tốt và cái nào có thể cần suy nghĩ lại, hoặc ít nhất là thêm một chút muối.

Để giải quyết vấn đề này, tôi đã xây dựng một điều khiển chọn tùy chỉnh với biểu tượng cảm xúc để ghi lại những thăng trầm trong hành trình ẩm thực của mình.

Tôi có thể đánh giá từng công thức bằng cách nhấn vào biểu tượng cảm xúc, nhưng là một người sống theo lối sống điều hướng bàn phím, tôi thực sự muốn có thể tập trung vào điều khiển bằng phím Tab và sử dụng các phím mũi tên để thay đổi lựa chọn.

Hãy biến điều đó thành hiện thực.

Đây là cấu trúc cơ bản của bộ chọn biểu tượng cảm xúc của tôi: Điều đầu tiên tôi cần làm là làm cho điều khiển có thể lấy nét được.

Tôi bắt đầu bằng cách thêm công cụ sửa đổi "có thể lấy nét" mà không có đối số.

Điều này làm cho điều khiển của tôi có thể tập trung khi tôi nhấn phím Tab, nhưng tôi nhận thấy một số hành vi bổ sung mà tôi không thấy với các nút khác và các điều khiển tương tự.

Ví dụ, điều khiển của tôi tập trung vào nhấp chuột, trong khi các nút và điều khiển được phân đoạn thì không.

Những điều khiển đó yêu cầu "Điều hướng bàn phím" để được tập trung.

Của tôi cũng nên như vậy.

Để có được hành vi đó, tôi sẽ chỉ định quyền kiểm soát của mình là có thể tập trung để kích hoạt.

Các điều khiển có thể tập trung để kích hoạt không tập trung vào nhấp chuột và chúng cần bật "Điều hướng bàn phím" để lấy nét bằng bàn phím.

Điều tiếp theo tôi nhận thấy là vòng lấy nét mà macOS vẽ xung quanh điều khiển của tôi là hình chữ nhật.

Để có một cái nhìn bóng bẩy hơn, tôi muốn vòng lấy nét đi theo đường đi của nền hình viên nang.

Các vòng lấy nét luôn tuân theo hình dạng nội dung của chế độ xem, theo mặc định là hình chữ nhật trong trường hợp của tôi.

Tôi sẽ sử dụng công cụ sửa đổi "contentShape" và chuyển cùng một hình dạng Viên nang mà tôi đang sử dụng để cắt trực quan chế độ xem.

Bây giờ điều khiển của tôi có thể tập trung, bước tiếp theo là để nó xử lý các lần nhấn phím.

Tôi muốn có thể sử dụng phím mũi tên trái và phải để thay đổi xếp hạng đã chọn.

Sử dụng công cụ sửa đổi "onMoveCommand", tôi có thể cung cấp một hành động để thực hiện để đáp ứng với lệnh di chuyển phù hợp với nền tảng, như khi nhấn các phím mũi tên trên bàn phím Mac hoặc các cạnh định hướng được chạm vào điều khiển từ xa Apple TV.

Hệ thống gọi hành động với hướng di chuyển, vì vậy tôi sẽ di chuyển lựa chọn xếp hạng sang trái hoặc phải dựa trên điều đó.

Nội dung điều khiển nên lật theo chiều ngang cho những người sử dụng ngôn ngữ từ phải sang trái như tiếng Ả Rập và tiếng Do Thái.

Đảm bảo hành động lệnh di chuyển của bạn sử dụng "layoutDirection" của Môi trường để giải thích cho việc này.

Một trong những điều thú vị khi thực hiện hành vi tập trung là tôi có thể kiểm soát tương tự và nhận được kết quả tuyệt vời trong ứng dụng Apple Watch của mình.

Để xử lý đầu vào lấy nét trên watchOS, tôi sử dụng công cụ sửa đổi "digitalCrownRotation" thay vì công cụ sửa đổi "onMoveCommand".

Và tôi sẽ sử dụng giá trị môi trường isFocused để vẽ đường viền màu xanh lá cây quen thuộc xung quanh điều khiển khi nó được lấy nét.

Chỉ với một vài công cụ sửa đổi này, tôi đã có thể điều khiển đơn giản và thêm hỗ trợ cho bàn phím và Digital Crown.

Công thức cuối cùng là chế độ xem lưới có thể tập trung mà tôi đang xây dựng để giới thiệu những bức ảnh tôi đã chụp về kết quả đã hoàn thành của mình.

Tôi đang xây dựng điều này như một mạng lưới lười biếng và tôi đã thực hiện một số hành vi lựa chọn.

Vì vậy, nhấp vào một hình ảnh sẽ chọn nó và nhấp đúp vào chế độ xem chi tiết của công thức.

Bây giờ tôi cần xem xét cách nó nên xử lý các tương tác tập trung.

Cụ thể, tôi muốn lưới có thể lấy nét được khi tôi nhấn phím Tab.

Khi tập trung, tôi muốn các phím mũi tên cập nhật lựa chọn và tôi muốn phím Return đưa tôi đến chi tiết của công thức đã chọn.

Tôi sẽ sử dụng một số thành phần mà tôi đã nói trước đây, cộng thêm một vài thành phần bổ sung để giúp tôi xử lý các lần nhấn phím và tùy chỉnh cách lưới xuất hiện khi nó được lấy nét.

Như trong các ví dụ trước, bước đầu tiên là làm cho lưới có thể lấy nét được.

Trong trường hợp này, tôi không cần chỉ định bất kỳ tương tác nào.

Theo mặc định, lưới sẽ lấy nét khi tôi nhấp vào nó và khi tôi sử dụng bàn phím để tab nó, cho dù "Điều hướng bàn phím" có được bật hay không.

Đây chính xác là những gì tôi muốn.

Bây giờ tôi đã làm cho lưới có thể lấy nét được, hệ thống sẽ tự động vẽ một vòng lấy nét xung quanh nó.

Đối với các thùng chứa nội dung có thể lựa chọn, hiệu ứng là dư thừa.

Đường viền màu mà tôi thêm xung quanh công thức đã chọn đã thông báo liệu lưới có tiêu điểm hay không.

Tôi có thể sử dụng công cụ sửa đổi "focusEffectDisabled" để tắt vòng lấy nét tự động.

Sử dụng "SelectionShapeStyle" cho các đường viền và các chỉ báo khác mà chế độ xem được chọn.

Nó tự động thích nghi với màu nhấn mà tôi đã chọn và nó chuyển sang màu xám khi không có chế độ xem tổ tiên nào của nó có tiêu điểm, chẳng hạn như khi tiêu điểm di chuyển từ lưới sang thanh bên.

Điều tiếp theo tôi muốn làm là kết nối một lệnh menu chính để đánh dấu công thức đã chọn là yêu thích.

Tôi sẽ sử dụng API Giá trị Tập trung cho việc này và tôi sẽ chuyển một ràng buộc vào lựa chọn của mình để các lệnh menu của tôi cập nhật khi cần thiết.

Để hỗ trợ lựa chọn phím mũi tên, tôi sẽ sử dụng công cụ sửa đổi onMoveCommand.

Và khi hệ thống gọi, tôi sẽ sử dụng hướng di chuyển để cập nhật công thức đã chọn của lưới điện.

Cuối cùng, tôi muốn một cách để hành động theo lựa chọn và điều hướng đến nó khi nhấn phím Return.

Tôi có thể làm điều này với công cụ sửa đổi "onKeyPress", mới trong macOS Sonoma và iOS 17.

Công cụ sửa đổi này thực hiện một bộ phím hoặc ký tự và một hành động để thực hiện khi bất kỳ phím nào trong số đó được nhấn trên bàn phím phần cứng được kết nối.

Trả về "bị bỏ qua" nếu hành động không xử lý báo chí và công văn sẽ tiếp tục lên hệ thống phân cấp chế độ xem.

Và đối với một tính năng bổ sung, tôi cũng sẽ sử dụng "onKeyPress" để triển khai Type Selection, vì vậy tôi có thể nhanh chóng cuộn đến và chọn một công thức bằng cách nhập chữ cái đầu tiên trong tên của nó.

Bây giờ tôi đã xây dựng một trải nghiệm bàn phím tuyệt vời cho lưới của mình trên macOS, hãy chuyển sang lưới trên tvOS.

Trên tvOS, mỗi ô trong lưới có thể lấy nét được, do đó khi tiêu điểm được di chuyển theo các hướng khác nhau với điều khiển từ xa, ô theo hướng đó trở thành tiêu điểm và nâng lên trên các ô khác một cách trực quan.

Hệ thống sử dụng hiệu ứng di chuột "nâng" theo mặc định với các Nút và Liên kết Điều hướng.

Và hiệu ứng này thích hợp cho các chế độ xem với văn bản hoặc những chế độ xem kết hợp văn bản và hình ảnh.

Tuy nhiên, những bức ảnh công thức này sẽ được hưởng lợi từ một hiệu ứng khác.

Mới trong tvOS 17, tôi có thể áp dụng hiệu ứng di chuột nổi bật cho các chế độ xem có thể tập trung của mình.

Hiệu ứng này thêm sự thay đổi phối cảnh và độ bóng gương cho mục được lấy nét khi tôi vuốt điều khiển từ xa và nó trông tuyệt vời với tác phẩm nghệ thuật và ảnh, như hình thu nhỏ công thức của tôi.

Và như một quả anh đào trên cùng cho ứng dụng tvOS của tôi, tôi sẽ thêm các phần tiêu điểm.

Lưới nằm bên cạnh danh sách các nút và tôi thường cần điều hướng giữa hai nhóm này.

Khi sử dụng ứng dụng, tôi nhận thấy một vấn đề quen thuộc.

Khi lấy nét vào một trong các hàng thấp hơn trong lưới, tôi không thể vuốt sang trái để di chuyển các nút danh mục, vì các mục tiêu tiêu điểm không liền kề nhau.

Tôi sẽ đặt danh sách danh mục trong một phần tiêu điểm kéo dài toàn bộ chiều cao của bố cục.

Bây giờ khi tôi vuốt sang trái từ Creme Brûlée, tiêu điểm di chuyển đến các danh mục, giống như tôi mong đợi.

Và lưới đã hoàn thành.

Bellisimo!

Tôi đã đề cập đến rất nhiều điều trong video này.

Đã đến lúc thu thập các thành phần tập trung của bạn và xem bạn có thể làm gì.

Kiểm tra các ứng dụng macOS và iPadOS của bạn với điều hướng bàn phím được bật.

Đặt tiêu điểm mặc định ở nơi nó sẽ hữu ích nhất.

Sắp xếp các điều khiển của bạn trong các phần tập trung để giúp hướng dẫn chuyển động thông qua các bố cục bất thường.

Cảm ơn bạn, và chúc bạn vui vẻ!