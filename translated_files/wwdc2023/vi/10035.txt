10035

♪ ♪

Bhavya: Xin chào, tên tôi là Bhavya, và tôi là một kỹ sư trong nhóm Tiếp cận.

Trong phiên hôm nay, chúng tôi sẽ tập trung vào cách thực hiện kiểm tra khả năng truy cập trong ứng dụng của bạn.

Đầu tiên, chúng tôi sẽ đề cập đến việc thực hiện kiểm tra khả năng truy cập tự động dễ dàng như thế nào trong các bài kiểm tra giao diện người dùng của bạn.

Và sau đó chúng ta sẽ thảo luận về cách phơi bày các yếu tố theo cách mang lại cho chúng ta trải nghiệm thử nghiệm tuyệt vời và trải nghiệm khả năng tiếp cận tuyệt vời cùng một lúc.

Hãy bắt đầu với kiểm toán khả năng tiếp cận.

Kiểm tra là một thành phần cơ bản trong quá trình phát triển ứng dụng.

Bằng cách viết các bài kiểm tra, chúng tôi có thể phát hiện và sửa lỗi trước khi gửi mã.

Đó là cách chúng tôi đảm bảo chất lượng của sản phẩm.

Và một sản phẩm dễ tiếp cận là một sản phẩm chất lượng cao.

Khoảng một trong bảy người trên toàn thế giới bị khuyết tật ảnh hưởng đến cách họ tương tác với thế giới và các thiết bị của họ.

Mọi người sử dụng các công cụ như VoiceOver để tương tác với các ứng dụng của bạn theo cách tốt nhất cho họ.

Cung cấp một sản phẩm chất lượng cao có nghĩa là cung cấp một ứng dụng mà mọi người đều có thể truy cập để họ có thể có trải nghiệm chất lượng cao nhất với ứng dụng của bạn.

Tôi biết từ kinh nghiệm cá nhân làm thế nào khả năng tiếp cận có thể là một chủ đề sâu sắc và phức tạp.

Hãy cùng khám phá cách kiểm toán khả năng tiếp cận có thể biến điều này thành một nhiệm vụ đơn giản.

Xcode đi kèm với một công cụ được gọi là Trình kiểm tra khả năng truy cập.

Công cụ này cung cấp một cách dễ dàng để tìm, chẩn đoán và khắc phục các sự cố về khả năng truy cập trong ứng dụng của bạn.

Một trong những cách mạnh mẽ mà tôi có thể tận dụng công cụ này là thực hiện kiểm tra trên ứng dụng của mình.

Thanh tra có thể kiểm tra các chế độ xem cá nhân trong ứng dụng của bạn để biết các vấn đề phổ biến về khả năng truy cập.

Đây là ứng dụng mẫu của tôi. Nó có hai tab.

Tab đầu tiên cung cấp cho tôi những trích dẫn động lực và tab thứ hai cho phép tôi viết ra những suy nghĩ của mình để tự suy ngẫm.

Trong tab trích dẫn, tôi có chế độ xem văn bản hiển thị trích dẫn.

Và chế độ xem văn bản này được đặt trên hình nền.

Ngoài ra còn có một nút Báo giá mới để làm mới báo giá.

Tôi có thể khởi chạy Trình kiểm tra khả năng truy cập và thực hiện kiểm tra ứng dụng của mình.

Thanh tra kiểm tra tất cả các loại vấn đề, như cung cấp đủ mô tả yếu tố và đảm bảo độ tương phản thích hợp.

Và các vấn đề mà nó tìm thấy được hiển thị trong một bảng với các mô tả chi tiết về từng vấn đề.

Kiểm tra khả năng tiếp cận rất mạnh mẽ và bây giờ chúng có thể tự động hóa.

Bây giờ bạn có thể thực hiện kiểm tra trong các bài kiểm tra giao diện người dùng của mình.

Gọi performAccessibilityAudit trên ứng dụng XCUIA của bạn sẽ kiểm tra chế độ xem hiện tại cho các vấn đề về khả năng truy cập giống như Thanh tra viên làm.

Không cần xác nhận: nếu phát hiện bất kỳ vấn đề nào, bài kiểm tra của bạn sẽ tự động thất bại.

Hãy đi sâu vào một bản demo nhanh để xem điều này đang hoạt động.

Tôi đã mở ứng dụng demo của mình trong Xcode.

Nó được viết bằng Swift và sử dụng các chế độ xem UIKit tiêu chuẩn.

Tôi đã viết một vài bài kiểm tra vượt qua để xác minh rằng các yếu tố trên màn hình tồn tại.

Ví dụ, testQuoteTabView xác minh rằng chế độ xem hình ảnh và chế độ xem văn bản tồn tại trong tab trích dẫn.

Một điều cần lưu ý là những bài kiểm tra này cũng giúp chúng tôi kiểm tra khả năng tiếp cận.

Để XCTest tìm thấy những chế độ xem này, chúng phải là các yếu tố khả năng tiếp cận.

Điều đó có nghĩa là nếu các bài kiểm tra giao diện người dùng của bạn có thể tìm thấy các yếu tố, thì các công nghệ hỗ trợ của chúng tôi cũng vậy.

Thật tuyệt khi tôi nhận được một chút kiểm tra khả năng tiếp cận theo cách này, nhưng tôi muốn thêm một số kiểm tra vào bài kiểm tra của mình để đảm bảo rằng tôi đang nắm bắt được tất cả các loại vấn đề.

Tôi sẽ tạo một bài kiểm tra khác gọi là testAccessibilityQuoteTabView.

Tôi sẽ thực hiện một số thiết lập để khởi chạy ứng dụng của mình và điều hướng đến tab Trích dẫn.

Và cuối cùng, tôi sẽ gọi performAccessibilityAudit trên ứng dụng.

Cuộc kiểm toán có thể báo cáo nhiều vấn đề, vì vậy để cho phép bài kiểm tra của tôi tiếp tục báo cáo các vấn đề sau lần thất bại đầu tiên, tôi sẽ đặt continueAfterFailure thành true.

Thế là xong.

Hãy chạy thử nghiệm bằng cách nhấp vào viên kim cương thử nghiệm.

Có vẻ như bài kiểm tra của tôi đã thất bại.

Các vấn đề được báo cáo trực tuyến trong trình chỉnh sửa nguồn Xcode.

Cuộc kiểm toán của tôi gặp phải hai vấn đề: Element không có mô tả và nhãn không thể đọc được của con người.

Hãy cùng tìm hiểu xem các yếu tố có vấn đề là gì.

Tôi có thể tìm hiểu sâu hơn về hai vấn đề này bằng cách truy cập trình điều hướng Báo cáo, nhấp vào Kiểm tra và sau đó nhấp vào tam giác tiết lộ bên cạnh bài kiểm tra của tôi.

Chế độ xem này cho thấy sự cố chi tiết về quá trình chạy thử và các vấn đề.

Đối với vấn đề đầu tiên, "phần tử không có mô tả", tôi có thể nhấp đúp vào ảnh chụp màn hình phần tử cho tôi thấy rằng chế độ xem hình ảnh không có mô tả.

Tôi có thể làm như vậy tương tự cho vấn đề thứ hai, điều này cho tôi thấy rằng nhãn trên chế độ xem văn bản không thể đọc được của con người.

Hãy dành một chút thời gian để thảo luận về cách xử lý các vấn đề mà cuộc kiểm toán của tôi vừa tìm thấy.

Điều quan trọng là phải khám phá từng vấn đề riêng lẻ và khắc phục nó, vì chúng sẽ dẫn đến các vấn đề tương tác hoặc điều hướng thực sự cho người dùng ứng dụng của bạn, những người dựa vào các công nghệ hỗ trợ.

Điều quan trọng là phải thừa nhận rằng bạn có thể gặp phải các vấn đề cần được lọc ra và bỏ qua.

Có lẽ vấn đề là một hành vi dương tính giả hoặc được mong đợi.

Kiểm toán khả năng tiếp cận giúp bạn dễ dàng bỏ qua những loại vấn đề này.

Chúng ta sẽ đề cập đến một ví dụ để bỏ qua các vấn đề sau trong cuộc nói chuyện.

Để tìm hiểu thêm về các phương pháp hay nhất về khả năng tiếp cận, vui lòng xem bài nói chuyện năm 2018 của chúng tôi có tiêu đề "Cung cấp trải nghiệm tiếp cận đặc biệt".

Hãy điều tra vấn đề đầu tiên mà cuộc kiểm toán của tôi tìm thấy: nhãn khả năng truy cập trên chế độ xem văn bản không thể đọc được của con người.

Nếu tôi kiểm tra chế độ xem văn bản trong Bảng phân cảnh, tôi có thể thấy rằng nhãn trợ năng đã được đặt thành QUOTE_TEXTVIEW.

Người dùng dựa vào các công nghệ hỗ trợ như VoiceOver trước tiên sẽ nghe thấy nhãn khả năng truy cập, và sau đó là giá trị khả năng truy cập, như thế này.

VoiceOver: QUOTE_TEXTVIEW, "Sống từng ngày một và biến nó thành một kiệt tác."

Bhavya: Nhãn hiệu nghe có vẻ không tuyệt vời, và lý tưởng nhất, VoiceOver nên bỏ qua nó và chỉ nói câu trích dẫn.

Tôi có thể xóa nhãn khả năng truy cập, nhưng sau đó các bài kiểm tra giao diện người dùng của tôi sẽ bị hỏng, bởi vì chúng phụ thuộc vào nhãn này để xác định chế độ xem văn bản.

Lý tưởng nhất, chuỗi này nên được đặt làm mã định danh khả năng truy cập.

Mã định danh khả năng truy cập cho phép bạn xác định duy nhất một phần tử khi viết các bài kiểm tra giao diện người dùng mà không ảnh hưởng đến khả năng truy cập hoặc trải nghiệm giao diện người dùng.

Tôi sẽ đi đến Bảng phân cảnh của mình.

Tôi sẽ chọn chế độ xem văn bản của mình, cắt chuỗi này khỏi nhãn và dán nó vào mã định danh.

Vấn đề khác mà cuộc kiểm toán của tôi tìm thấy là chế độ xem hình ảnh không có mô tả.

Thông thường, điều quan trọng là hình ảnh có thể truy cập được bằng các nhãn mô tả nhưng ngắn gọn.

Tuy nhiên, trong ứng dụng của tôi, đây là một hình nền có tính trang trí.

Nó không phải là một phần của nội dung chính và không thêm ý nghĩa bổ sung cho chính trích dẫn.

Lý tưởng nhất, các công nghệ như VoiceOver nên bỏ qua chế độ xem hình ảnh này.

Tôi có thể đạt được hành vi này bằng cách ghi đè các yếu tố trợ năng trên chế độ xem của bộ điều khiển chế độ xem.

Bằng cách đặt nó thành chế độ xem văn bản trích dẫn và nút Trích dẫn mới, VoiceOver sẽ không còn xuất hiện chế độ xem hình ảnh nữa.

Hãy đến Xcode và làm điều đó ngay bây giờ.

Tôi sẽ vào tệp bộ điều khiển chế độ xem của mình và đặt accessibilityElements.

Tuyệt vời.

Hãy quay lại kiểm toán của tôi và chạy trường hợp thử nghiệm của tôi để xem liệu tôi có khắc phục được tất cả các vấn đề hay không.

Ngọt ngào. Cuộc kiểm toán của tôi hiện đang trôi qua.

Bạn sẽ nhận thấy một trong những bài kiểm tra giao diện người dùng của tôi hiện đang thất bại, nhưng chúng tôi sẽ quay lại vấn đề đó sau.

Khi thêm kiểm tra khả năng truy cập, bạn có thể gặp phải các vấn đề cần được lọc.

Ví dụ, giả sử kiểm toán của tôi đã tìm thấy một vấn đề với độ tương phản quá thấp trên một nhãn cụ thể.

Sau khi điều tra, sự tương phản hóa ra vẫn ổn, và vấn đề dường như là dương tính giả.

Hãy cùng khám phá cách tôi có thể bỏ qua vấn đề này.

Chức năng performAccessibilityAudit nhận các tham số bổ sung.

Tham số đầu tiên cho phép tôi chỉ định một bộ tùy chọn của các loại kiểm toán mà tôi muốn chạy.

Đây là các danh mục như loại động và độ tương phản, các danh mục tương tự mà bạn đã quen thuộc trong Trình kiểm tra khả năng truy cập.

Trong ví dụ này, tôi đang chọn kiểm tra chỉ cho các vấn đề về loại động và độ tương phản.

Tham số thứ hai cho phép tôi chỉ định một đóng cửa.

Việc đóng cửa này được kêu gọi đối với tất cả các vấn đề được kiểm toán tìm thấy và cho phép tôi chọn vấn đề nào cần bỏ qua và vấn đề nào cần báo cáo.

Tôi sẽ bắt đầu bằng cách xác định một biến được gọi là shouldIgnore thành false.

Theo mặc định, các vấn đề không nên bỏ qua.

Giả sử tôi muốn bỏ qua một vấn đề tương phản trên một phần tử có nhãn "Nhãn của tôi".

Tôi có thể liên kết XCUIElement với vấn đề bằng cách sử dụng issue.element.

Nếu phần tử này có nhãn "Nhãn của tôi" và loại vấn đề là vấn đề tương phản, thì tôi biết tôi đã có vấn đề đúng, vì vậy tôi sẽ đặt shouldIgnore thành true.

Đặt nó thành true cho thấy rằng tôi muốn vấn đề bị bỏ qua.

Cuối cùng, tôi sẽ quay lại nếu tôi bỏ qua.

Nếu các điều kiện trên không được đáp ứng, thì shouldIgnore sẽ sai, cho biết vấn đề nên được báo cáo là thất bại.

Và thế là xong.

Bạn có thể mở rộng ví dụ này và tùy chỉnh các tiêu chí để bỏ qua bằng cách sử dụng các thuộc tính khác, như loại phần tử hoặc mã định danh, v.v.

Khi bạn bắt đầu viết kiểm tra khả năng truy cập cho các ứng dụng của riêng mình, thật hữu ích khi ghi nhớ những cân nhắc sau đây.

Một cuộc kiểm toán bị giới hạn trong các yếu tố trên màn hình.

Điều đó có nghĩa là để cung cấp phạm vi bảo hiểm đầy đủ, bạn nên thêm các bài kiểm tra kiểm tra khả năng truy cập cho tất cả các chế độ xem khác nhau mà ứng dụng của bạn có thể hiển thị.

Trong trường hợp ứng dụng mẫu của tôi, tôi nên thêm một bài kiểm tra khác điều hướng đến tab thứ hai và chạy kiểm tra.

Một cách nhanh chóng để ngay lập tức thêm kiểm toán cho nhiều bài kiểm tra là ghi đè và thực hiện kiểm toán trong quá trình xé.

Bạn có thể xác định các biến trong phạm vi của lớp.

Bằng cách này, các bài kiểm tra có thể ghi đè các biến này để chọn tham gia hoặc không tham gia kiểm tra và cho phép các bài kiểm tra tùy chỉnh việc đóng cửa để bỏ qua các vấn đề.

Kế hoạch kiểm tra là một cách tuyệt vời để nhóm các bài kiểm tra cụ thể trong dự án của bạn.

Chúng cho phép bạn kích hoạt có chọn lọc các mục tiêu kiểm tra, trường hợp hoặc phương pháp riêng lẻ trong kế hoạch kiểm tra.

Và cuối cùng, kiểm toán không nên thay thế thử nghiệm thực tế bằng các công nghệ hỗ trợ.

Cuối cùng, thử nghiệm ứng dụng của bạn bằng cách bật các công nghệ như VoiceOver hoặc Dynamic Type là cách tốt nhất để đảm bảo trải nghiệm chất lượng cao.

Bạn có thể đạt được khả năng tiếp cận tuyệt vời và thử nghiệm tuyệt vời mà không cần phải thỏa hiệp về một trong hai.

Các yếu tố tự động hóa cho phép bạn phơi bày các yếu tố cụ thể cho mục đích tự động hóa mà không ảnh hưởng đến khả năng tiếp cận của các yếu tố đó.

Bây giờ, trong UIKit, bạn sẽ có thể tận dụng API này để hiển thị chính xác các yếu tố bạn cần cho tự động hóa, đồng thời vẫn có thể tùy chỉnh khả năng truy cập cho các yếu tố này.

Bạn có thể nhớ từ trước đó rằng khi tôi khắc phục các vấn đề từ cuộc kiểm toán của mình, tôi cũng đã phá vỡ một trong những bài kiểm tra giao diện người dùng của mình.

Chế độ xem hình ảnh dường như không còn khả dụng nữa.

Nó bị thiếu trong bài kiểm tra giao diện người dùng của tôi vì nó cũng bị thiếu khả năng truy cập.

Bởi vì chế độ xem hình ảnh này là trang trí, tôi đã vượt qua các yếu tố khả năng tiếp cận để loại trừ nó khỏi khả năng tiếp cận.

Tuy nhiên, bằng cách làm như vậy, tôi cũng khiến nó bị loại khỏi bài kiểm tra giao diện người dùng của mình.

Hãy cùng khám phá cách các yếu tố tự động hóa có thể giúp tôi hiển thị chế độ xem hình ảnh của mình trong bài kiểm tra giao diện người dùng của mình.

Tôi sẽ đi đến tệp bộ điều khiển xem trong Xcode.

Và tôi sẽ đặt các yếu tố tự động hóa trên chế độ xem của bộ điều khiển chế độ xem thành chế độ xem hình ảnh.

Hãy nhớ rằng khi ghi đè các yếu tố tự động hóa, bạn cần chỉ định tất cả các yếu tố cần được tiếp xúc với tự động hóa.

Điều đó có nghĩa là tôi cũng cần thêm chế độ xem văn bản và nút vào danh sách của mình.

Khi ghi đè các yếu tố tự động hóa, bạn đang ghi đè các yếu tố hiện có đã được tiếp xúc với tự động hóa.

Hãy thử chạy trường hợp thử nghiệm của chúng tôi để xem nó có vượt qua lần nữa không.

Tuyệt vời.

Chúng tôi đã có thể viết một số bài kiểm tra giao diện người dùng và khả năng truy cập tuyệt vời và khắc phục một số vấn đề về khả năng truy cập.

Kiểm tra khả năng truy cập là một cách tuyệt vời để thêm kiểm tra khả năng truy cập dễ dàng, tự động cho ứng dụng của bạn.

Khắc phục các sự cố được xác định bởi các cuộc kiểm tra giúp đảm bảo mọi người đều có thể thưởng thức ứng dụng của bạn.

Tạo ra những trải nghiệm tự động hóa và khả năng tiếp cận tuyệt vời mà không cần phải chọn cái này hơn cái kia.

Các yếu tố tự động hóa cho phép bạn hiển thị các yếu tố cụ thể cho các bài kiểm tra giao diện người dùng của mình mà không ảnh hưởng đến trải nghiệm khả năng truy cập.

Tôi khuyến khích bạn đi đến các bài kiểm tra giao diện người dùng của mình và thêm một cuộc gọi nhanh để thực hiện AccessibilityAudit.

Cảm ơn bạn.