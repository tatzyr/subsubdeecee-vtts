10187

♪ ♪

Ben: Xin chào, tôi là Ben Trumbull, và tôi rất vui được giới thiệu SwiftData với bạn.

SwiftData là một khuôn khổ mạnh mẽ để mô hình hóa và quản lý dữ liệu và nâng cao ứng dụng Swift hiện đại của bạn.

Giống như SwiftUI, nó tập trung hoàn toàn vào mã không có định dạng tệp bên ngoài và sử dụng hệ thống macro mới của Swift để tạo ra trải nghiệm API liền mạch.

SwiftData dựa vào tính biểu cảm được cung cấp bởi các macro ngôn ngữ Swift mới để tạo ra trải nghiệm API liền mạch.

Và nó được tích hợp tự nhiên với SwiftUI và hoạt động với các tính năng nền tảng khác, như CloudKit và Widgets.

Trong phiên này, chúng ta sẽ xem xét macro @Model mới và sức mạnh của nó để mô hình hóa dữ liệu của bạn trực tiếp từ mã Swift, tôi sẽ giới thiệu cho bạn cách tìm nạp và sửa đổi dữ liệu của bạn với SwiftData, sau đó tôi sẽ kết thúc bằng cách cung cấp cho bạn cái nhìn tổng quan về một số khung nền tảng khác hoạt động liền mạch với

Bây giờ chúng ta sẽ xem xét nhiều hơn về @Model.

@Model là một macro Swift mới giúp xác định lược đồ mô hình của bạn từ mã Swift của bạn.

Lược đồ SwiftData là mã Swift bình thường, nhưng khi cần, bạn có thể chú thích các thuộc tính của mình bằng siêu dữ liệu bổ sung.

Sử dụng lược đồ này, SwiftData bổ sung chức năng mạnh mẽ cho các đối tượng mô hình của bạn.

Nó đơn giản như trang trí lớp học của bạn với @Model, và lược đồ được tạo ra.

Các mô hình trong SwiftData là nguồn gốc của sự thật cho lược đồ ứng dụng của bạn và thúc đẩy trải nghiệm bền bỉ.

Một phần của trải nghiệm này sẽ biến đổi các thuộc tính được lưu trữ của lớp và biến chúng thành các thuộc tính tồn tại.

Thêm @Model vào mô hình của bạn mở ra một thế giới của những khả năng.

SwiftData tự nhiên điều chỉnh các thuộc tính loại giá trị của bạn để được sử dụng làm thuộc tính ngay lập tức.

Các thuộc tính này bao gồm các loại giá trị cơ bản, như chuỗi, int và float.

Chúng cũng có thể bao gồm các loại giá trị phức tạp hơn, chẳng hạn như cấu trúc, enums và các loại có thể mã hóa, bao gồm cả các bộ sưu tập.

Các mô hình SwiftData tham chiếu các loại dưới dạng các mối quan hệ.

Bạn có thể tạo liên kết giữa các loại mô hình của mình với các mối quan hệ và bộ sưu tập các loại mô hình.

@Model sẽ sửa đổi tất cả các thuộc tính được lưu trữ trên loại của bạn.

Bạn có thể ảnh hưởng đến cách SwiftData xây dựng lược đồ của bạn bằng cách sử dụng siêu dữ liệu trên các thuộc tính của bạn.

Với @Attribute, bạn có thể thêm các ràng buộc về tính duy nhất.

Bạn có thể sử dụng @Relationship để kiểm soát việc lựa chọn nghịch đảo và chỉ định các quy tắc lan truyền xóa.

Những điều này thay đổi hành vi của các liên kết giữa các mô hình.

Bạn có thể yêu cầu SwiftData không bao gồm các thuộc tính cụ thể với macro thoáng qua.

Đây là ví dụ Chuyến đi trước đây của chúng tôi.

Tôi sẽ điều chỉnh việc tạo lược đồ của SwiftData bằng cách thêm siêu dữ liệu vào các thuộc tính được lưu trữ của chúng tôi.

Tôi có thể thêm @Attribute vào tên và chỉ định rằng nó phải là duy nhất.

Tôi cũng có thể trang trí mối quan hệ danh sách nhóm của chúng tôi với @Relationship và hướng dẫn Swift Data xóa tất cả các mục danh sách nhóm liên quan bất cứ khi nào chuyến đi này bị xóa.

Để tìm hiểu thêm về mô hình SwiftData, hãy xem phiên "Mô hình hóa lược đồ của bạn với SwiftData".

Bây giờ tôi sẽ đề cập đến cách bạn có thể làm việc với các loại mô hình của mình và hai đối tượng chính bạn sẽ sử dụng để điều khiển các hoạt động của mình: ModelContainer và ModelContext của SwiftData.

Vùng chứa mô hình cung cấp phụ trợ liên tục cho các loại mô hình của bạn.

Bạn có thể sử dụng cài đặt mặc định chỉ bằng cách chỉ định lược đồ của mình hoặc bạn có thể tùy chỉnh nó với các cấu hình và tùy chọn di chuyển.

Bạn có thể tạo một vùng chứa mô hình chỉ bằng cách chỉ định danh sách các loại mô hình bạn muốn lưu trữ.

Nếu bạn muốn tùy chỉnh vùng chứa của mình hơn nữa, bạn có thể sử dụng cấu hình để thay đổi URL, CloudKit và số nhận dạng vùng chứa nhóm và các tùy chọn di chuyển Với thiết lập vùng chứa của bạn, bạn đã sẵn sàng tìm nạp và lưu dữ liệu với ngữ cảnh mô hình.

Bạn cũng có thể sử dụng công cụ sửa đổi chế độ xem và cảnh của SwiftUI để thiết lập vùng chứa và tự động thiết lập nó trong môi trường của chế độ xem.

Bối cảnh mô hình quan sát tất cả các thay đổi đối với mô hình của bạn và cung cấp nhiều hành động để vận hành chúng.

Chúng là giao diện của bạn để theo dõi các bản cập nhật, tìm nạp dữ liệu, lưu các thay đổi và thậm chí hoàn tác những thay đổi đó.

Trong SwiftUI, bạn thường sẽ nhận được modelContext từ môi trường chế độ xem của mình sau khi bạn tạo vùng chứa mô hình của mình.

Bên ngoài hệ thống phân cấp chế độ xem, bạn có thể yêu cầu vùng chứa mô hình cung cấp cho bạn một ngữ cảnh ràng buộc diễn viên chính được chia sẻ hoặc bạn có thể chỉ cần khởi tạo các ngữ cảnh mới cho một vùng chứa mô hình nhất định.

Khi bạn có ngữ cảnh, bạn đã sẵn sàng để tìm nạp dữ liệu.

SwiftData được hưởng lợi từ các loại gốc Swift mới như bộ mô tả vị ngữ và tìm nạp, cũng như những cải tiến đáng kể đối với bộ mô tả sắp xếp gốc của Swift.

Mới trong iOS 17, vị ngữ hoạt động với các loại Swift gốc và sử dụng macro Swift để xây dựng được nhập mạnh.

Đó là một sự thay thế hiện đại được kiểm tra loại đầy đủ cho NSPredicate.

Việc triển khai các vị ngữ của bạn cũng dễ dàng, với sự hỗ trợ Xcode, như tự động hoàn thành.

Đây là một vài ví dụ về việc xây dựng vị ngữ cho ứng dụng Chuyến đi Mẫu của chúng tôi.

Đầu tiên, tôi có thể chỉ định tất cả các chuyến đi có điểm đến là New York.

Tôi có thể thu hẹp câu hỏi của chúng tôi xuống chỉ còn các chuyến đi về sinh nhật và tôi có thể chỉ định rằng chúng tôi chỉ quan tâm đến các chuyến đi được lên kế hoạch cho tương lai, trái ngược với bất kỳ cuộc phiêu lưu nào trong quá khứ của chúng tôi.

Khi chúng tôi đã quyết định chuyến đi nào chúng tôi quan tâm đến việc tìm nạp, chúng tôi có thể sử dụng loại FetchDescriptor mới và hướng dẫn ModelContext của chúng tôi tìm nạp các chuyến đi đó.

Làm việc cùng với FetchDescriptor, Swift SortDescriptor đang nhận được một số cập nhật để hỗ trợ các loại Swift gốc và đường dẫn khóa và chúng tôi có thể sử dụng SortDescriptor để chỉ định thứ tự mà chúng tôi muốn các Chuyến đi đã tìm nạp của mình được tổ chức.

FetchDescriptor cung cấp nhiều cách khác để điều chỉnh các truy vấn SwiftData của bạn.

Ngoài các vị ngữ và sắp xếp, bạn có thể chỉ định các đối tượng liên quan để tìm nạp trước, giới hạn số lượng kết quả, loại trừ các thay đổi chưa được lưu từ kết quả và hơn thế nữa.

SwiftData cũng giúp bạn dễ dàng tạo, xóa và thay đổi dữ liệu của mình bằng cách sử dụng ModelContext để điều khiển các hoạt động này.

Sau khi tạo các đối tượng mô hình của bạn giống như bất kỳ lớp Swift nào khác, bạn có thể chèn chúng vào ngữ cảnh và bắt đầu sử dụng các tính năng SwiftData, như theo dõi thay đổi và kiên trì.

Xóa các đối tượng liên tục dễ dàng như yêu cầu ModelContext đánh dấu chúng để xóa và bạn có thể lưu những thay đổi này và các thay đổi đang chờ xử lý khác bằng cách yêu cầu ModelContext lưu chúng và cam kết chúng vào vùng chứa liên tục.

Thay đổi các giá trị thuộc tính trên các đối tượng mô hình của bạn cũng đơn giản như sử dụng các trình thiết lập thuộc tính như bình thường.

Macro Model sửa đổi các thuộc tính được lưu trữ của bạn để giúp ModelContext tự động theo dõi các thay đổi của bạn và đưa chúng vào hoạt động lưu tiếp theo của bạn.

Để tìm hiểu thêm về các vùng chứa và ngữ cảnh SwiftData và thúc đẩy các hoạt động của nó, hãy xem phiên "Đi sâu hơn vào SwiftData".

SwiftData được xây dựng với SwiftUI trong tâm trí, và việc sử dụng chúng cùng nhau không thể dễ dàng hơn.

SwiftUI là cách dễ nhất để bắt đầu sử dụng SwiftData.

Cho dù đó là thiết lập vùng chứa SwiftData của bạn, tìm nạp dữ liệu hay thúc đẩy các bản cập nhật chế độ xem của bạn, chúng tôi đã xây dựng các API tích hợp trực tiếp các khuôn khổ này.

Các công cụ sửa đổi cảnh và chế độ xem SwiftUI mới là cách dễ nhất để bắt đầu xây dựng ứng dụng SwiftData.

Với SwiftUI, bạn có thể định cấu hình kho dữ liệu của mình, thay đổi các tùy chọn, bật hoàn tác và chuyển đổi tính năng tự động lưu.

SwiftUI sẽ truyền bá bối cảnh mô hình của bạn trong môi trường của nó.

Khi bạn đã thiết lập xong, cách dễ nhất để bắt đầu sử dụng dữ liệu của bạn là trình bao bọc thuộc tính @Query mới.

Bạn có thể dễ dàng tải và lọc bất cứ thứ gì được lưu trữ trong cơ sở dữ liệu của mình chỉ với một dòng mã.

SwiftData hỗ trợ tính năng quan sát hoàn toàn mới cho các thuộc tính được mô hình hóa của bạn.

SwiftUI sẽ tự động làm mới các thay đổi trên bất kỳ thuộc tính quan sát nào.

SwiftUI và SwiftData phối hợp với nhau để giúp bạn xây dựng các ứng dụng hấp dẫn và mạnh mẽ.

Tìm hiểu thêm về cách sử dụng các khuôn khổ này cùng nhau trong phiên "Xây dựng ứng dụng với SwiftData" của chúng tôi.

SwiftData là một giải pháp mới mạnh mẽ để quản lý dữ liệu, được thiết kế với sự hỗ trợ hạng nhất cho các tính năng của Swift.

Nó sử dụng hệ thống macro mới của Swift để tập trung hoàn toàn vào mã của bạn.

Thiết lập lược đồ của bạn bằng cách sử dụng @model và định cấu hình trải nghiệm kiên trì của bạn với vùng chứa mô hình.

Bạn có thể dễ dàng kích hoạt tính bền bỉ, hoàn tác và làm lại, đồng bộ hóa iCloud, phát triển tiện ích và hơn thế nữa.

Bắt đầu xây dựng SwiftData vào ứng dụng của bạn ngay lập tức bằng cách tận dụng sự tích hợp liền mạch của SwiftUI.

Chúng tôi rất vui khi thấy những gì bạn xây dựng với SwiftData và cảm ơn vì đã xem.

♪ ♪