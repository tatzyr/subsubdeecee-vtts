10110

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Xin chào!

Tôi là Harlan, và tôi làm việc trên SwiftUI.

Tôi rất vui được giúp bạn làm cho ứng dụng có cửa sổ của bạn thực sự ngoạn mục trên nền tảng không gian mới này.

Với tính toán không gian, các ứng dụng của bạn tồn tại trong môi trường xung quanh vật lý của bạn, điều này cho phép các lớp trải nghiệm ba chiều tuyệt đẹp hoàn toàn mới.

Và như với mọi nền tảng của Apple, cách tốt nhất để xây dựng một ứng dụng là với SwiftUI.

SwiftUI đã thêm một bộ API và hành vi tận dụng mọi thứ mà nền tảng mới này cung cấp.

Nếu bạn chưa có, hãy xem "Gặp gỡ SwiftUI để tính toán không gian" để biết tổng quan về tất cả các cách mới mà bạn có thể sử dụng SwiftUI trên thiết bị này.

Tôi sẽ tập trung vào SwiftUI nhưng nếu bạn đang làm việc với UIKit, có rất nhiều thứ bạn có thể tận dụng.

Kiểm tra "Gặp gỡ UIKit để tính toán không gian" để tìm hiểu cách tạo trải nghiệm UIKit tốt nhất có thể.

Nếu bạn có ứng dụng iPhone hoặc iPad hiện có và bạn muốn duy trì trải nghiệm iOS của mình, hãy xem "Chạy ứng dụng iPad và iPhone của bạn trong Không gian chia sẻ."

Cho dù bạn đang mang một ứng dụng từ một nền tảng Apple khác hay tạo ra một cái gì đó hoàn toàn mới, SwiftUI là cách tốt nhất để làm cho ứng dụng của bạn cảm thấy như ở nhà ở bất cứ nơi nào nó chạy.

Trong phiên này, chúng tôi sẽ cập nhật ứng dụng SwiftUI cho nền tảng này.

Chúng ta sẽ bắt đầu bằng cách khám phá cách các điều khiển tích hợp tự động tự điều chỉnh để dễ đọc và tương tác; chúng ta sẽ nói về cách đảm bảo chế độ xem và điều khiển tùy chỉnh của bạn tận dụng hình ảnh và kỹ thuật nhập mới trên thiết bị này; và chúng tôi sẽ áp dụng một số tính năng hoàn toàn mới chỉ có thể thực hiện được với thiết

Nền tảng này được xây dựng từ đầu với SwiftUI trong tâm trí.

Trên thực tế, hầu hết các ứng dụng hệ thống được viết bằng SwiftUI, như Keynote, Freeform và TV, tất cả đều mang giao diện quen thuộc của chúng ngay vào môi trường xung quanh bạn.

Mặc dù các ứng dụng này trông giống với các ứng dụng iPad của chúng, chúng tận dụng tối đa ngôn ngữ thiết kế mới và các phương pháp tương tác trên nền tảng này.

Hãy cùng khám phá cách bạn có thể làm điều tương tự với các ứng dụng của mình bằng cách cập nhật ứng dụng iPad cùng nhau.

Đây là Backyard Birds, và nó giống như một ứng dụng ngắm chim ảo, nơi bạn có thể cho ăn và ghi lại tất cả những con chim ghé thăm sân của bạn.

Là một nhà phát triển Swift, tôi yêu chim.

Đây là loại ứng dụng của tôi.

Backyard Birds được viết bằng SwiftUI.

Đó là một ví dụ tuyệt vời về ứng dụng SwiftUI đa nền tảng.

Nó hỗ trợ iPhone, iPad, Mac và Apple Watch.

Tôi muốn thêm một nền tảng nữa vào danh sách đó.

Hãy làm cho Backyard Birds thực sự hót trong Không gian Chung.

Trước tiên, hãy đảm bảo ứng dụng của bạn hỗ trợ nền tảng mới này bằng cách thêm nó vào menu Nền tảng được hỗ trợ trong Xcode.

Điều này sẽ thêm một điểm đến chạy mới, vì vậy hãy chọn điểm đến đó và chạy ứng dụng của chúng tôi trong trình giả lập.

Ở đây trong trình giả lập, khi tôi di chuyển con trỏ của mình xung quanh, ứng dụng phản hồi như thể tôi đang nhìn xung quanh bằng mắt.

Khi chúng tôi chạy Backyard Birds, chúng tôi ngay lập tức thấy rằng nó có bố cục cơ bản giống như trên iPad, nhưng một số thứ có vẻ hơi khác một chút.

Sự khác biệt đầu tiên tôi nhận thấy là ứng dụng bây giờ có nền kính.

Kính là một nền tiêu chuẩn được cung cấp cho các cửa sổ theo mặc định.

Nó điều chỉnh độ tương phản và cân bằng màu sắc dựa trên điều kiện ánh sáng và màu sắc của các vật thể phía sau nó.

Do đó, nền tảng này không phân biệt giữa ánh sáng và bóng tối.

Glass tự động đảm bảo ứng dụng của bạn luôn dễ đọc bất kể bạn đang sử dụng nó ở đâu.

Hãy cùng khám phá Backyard Birds thêm một chút nữa.

Backyard Birds có chế độ xem phân chia điều hướng ở cấp cao nhất, cung cấp thanh bên này để chuyển đổi giữa các chế độ xem cấp cao nhất.

Thanh bên tự động làm tối nền của nó trên đỉnh kính để tự tách biệt trực quan khỏi chế độ xem chi tiết.

Khi tôi di con trỏ qua các hàng danh sách này, chúng sẽ tô sáng một cách tinh tế.

Tôi có thể nhấn vào các hàng này để chuyển đổi giữa các chế độ xem, giống như trên iPad.

Ở phía bên phải của chế độ xem phân chia là một ngăn xếp điều hướng.

Khi tôi chạm vào một trong những sân sau, nó sẽ điều hướng đến chế độ xem chi tiết của nó.

Từ đây tôi có thể thấy có bao nhiêu hạt giống và nước còn lại cho những con chim trong sân này.

Tôi có thể cuộn xuống để xem danh sách tất cả các loài chim đã đến thăm gần đây.

Thanh điều hướng có các nút tròn này cũng làm nổi bật khi tôi nhìn vào chúng.

Khi tôi nhấn nút Yêu thích, nó sẽ thu nhỏ lại và sau đó chuyển đổi trạng thái yêu thích.

Đây chỉ là một vài trong số những điều mà SwiftUI đã làm để nâng cao mọi ứng dụng cho Không gian chia sẻ.

Bây giờ chúng tôi đã đi dạo quanh Backyard Birds và tìm thấy một số hành vi mới, tự động mà các điều khiển tích hợp cung cấp, hãy điều tra cách chúng tôi có thể làm cho chế độ xem và điều khiển tùy chỉnh của mình cảm thấy như ở nhà.

Tôi đã phát hiện ra điều gì đó tinh tế khi chúng tôi tham quan danh sách Sân sau.

Nếu tôi thực sự đến gần ứng dụng, chim và thực vật vẫn giòn, nhưng đài phun nước trở nên hơi mờ.

Tôi nghi ngờ đài phun nước đang được vẽ ở độ phân giải cố định.

Các ứng dụng trên thiết bị này được đặt trong môi trường xung quanh bạn.

Và không giống như các nền tảng khác, không có màn hình nào có pixel vật lý xác định chất lượng mà nội dung của bạn có thể vẽ.

Các ứng dụng có thể được định vị ở bất cứ đâu.

Chúng có thể bị đẩy ra xa bạn, hoặc được đưa đến gần, hoặc thậm chí được nhìn ở một góc.

Hệ thống đảm bảo rằng các ứng dụng trông tuyệt vời trong tất cả các tình huống này bằng cách mở rộng nội dung một cách linh hoạt.

Để hệ thống làm điều đó, bạn phải cung cấp các tài sản vectơ vì bitmap không thể được chia tỷ lệ mà không làm giảm chất lượng.

Văn bản và Biểu tượng SF đã là vectơ, nhưng nếu bạn đang sử dụng các biểu tượng hoặc đồ họa tùy chỉnh, hãy sử dụng vectơ để tận dụng lợi thế của việc chia tỷ lệ nội dung động.

Hãy kiểm tra xem đài phun nước đó có phải là hình ảnh bitmap không.

À, nếu tôi nhìn vào tùy chọn thang đo, nó được chỉ định trong các thang đo riêng lẻ.

Rất may, tôi đã có một vectơ cho tài sản này rồi, vì vậy tôi sẽ chuyển nó sang một tỷ lệ duy nhất, xóa các tài sản hiện có và thay thế nó bằng vectơ của tôi.

Sau đó, tôi sẽ kiểm tra hộp Preserve Vector Data, cho phép nội dung chia tỷ lệ theo bất kỳ kích thước nào.

Cài đặt này được hỗ trợ trên tất cả các nền tảng của Apple.

Điều đó tốt hơn.

Bây giờ đài phun nước đã sắc nét, và nếu tôi di chuyển gần hơn hoặc xa hơn, nó vẫn ở chất lượng cao.

Hãy tìm hiểu một số tab khác.

Tab Cây hiển thị một lưới của tất cả các cây và những vòng tròn phía sau cây trông sáng và lạc lõng.

Nếu chúng ta kiểm tra mã, chúng ta sẽ tìm thấy câu trả lời của mình: nền là một màu đồng nhất.

Những màu đồng nhất như thế này có độ tương phản cố định với kính và không thể điều chỉnh theo môi trường xung quanh bạn.

Có một kiểm tra ở đây để sử dụng màu tối hơn một chút trong Chế độ tối, đây là một thực tế phổ biến trên iOS.

Nền tảng này báo cáo bảng màu của nó là tối, vì vậy đây là màu chúng ta thấy đằng sau cây cối.

Nhưng hãy nhớ rằng, nền tảng này không phân biệt giữa cách phối màu sáng và tối.

Thay vào đó, cách tốt nhất để đảm bảo nội dung của bạn dễ đọc, bất kể những gì đến qua kính, là áp dụng sự sống động.

Các vật liệu sống động giới thiệu độ tương phản và độ sáng bổ sung để đảm bảo rằng nội dung trên mặt kính vẫn dễ đọc bất kể thứ gì đang chiếu qua.

Tất cả các điều khiển và vùng chứa tích hợp đều sử dụng các vật liệu sống động này theo mặc định, vì vậy nếu bạn đang sử dụng các điều khiển tiêu chuẩn, không có thêm công việc nào cho bạn ở đây.

Các kiểu ngữ nghĩa của SwiftUI tự động áp dụng giao diện phù hợp trên mỗi nền tảng.

Trên thiết bị này, chúng trông rực rỡ khi được đặt lên trên kính.

Nếu bạn đang xây dựng các chế độ xem hoặc vùng chứa tùy chỉnh của riêng mình, hãy sử dụng các kiểu ngữ nghĩa này để làm cho nội dung của bạn dễ đọc bất kể kính thích ứng với môi trường xung quanh như thế nào.

Hãy thay đổi các biểu tượng thực vật này để sử dụng màu tô ngữ nghĩa thay vì màu đồng nhất.

Vì chúng tôi đang sử dụng vật liệu ngữ nghĩa, chúng tôi có thể loại bỏ hoàn toàn việc kiểm tra bảng màu.

Bây giờ mã đơn giản hơn và chính xác hơn trên tất cả các nền tảng.

Chà, những biểu tượng này tốt hơn nhiều.

Chúng nổi bật tuyệt đẹp trên kính trong mọi điều kiện ánh sáng.

Bây giờ chúng ta đã dành một chút thời gian để cải thiện hình ảnh trong ứng dụng, hãy đảm bảo rằng tất cả các thành phần tương tác đều rõ ràng và dễ nhắm mục tiêu.

Như bạn đã học trong "Gặp gỡ SwiftUI để tính toán không gian", có bốn cách bạn có thể tương tác với các ứng dụng của mình.

Tương tác phổ biến nhất là một cử chỉ chụm gián tiếp, nơi bạn nhìn vào một điều khiển và chụm các ngón tay lại với nhau để thực hiện một cú chạm.

Nếu một ứng dụng gần bạn, bạn có thể tương tác trực tiếp với nó chỉ bằng cách tiếp cận và chạm vào nó.

Nếu bạn đã ghép nối một bàn di chuột, bạn có thể sử dụng nó như một con trỏ để nhập chính xác.

Và các công nghệ tiếp cận đẳng cấp thế giới mà bạn đã quen thuộc trên nền tảng Apple cũng có sẵn trên thiết bị này.

Các công cụ như VoiceOver và Switch Control cho phép mọi người có cùng trải nghiệm tuyệt vời khi sử dụng các ứng dụng của bạn.

Trên nền tảng này, nội dung có thể tương tác được tô sáng bằng cách sử dụng các hiệu ứng di chuột.

Ví dụ, khi bạn nhìn vào một điều khiển như một nút hoặc một danh sách, một hiệu ứng nổi bật tinh tế trên giới hạn của chế độ xem cho thấy rõ rằng bạn có thể tương tác với nó.

Những hiệu ứng di chuột này rất quan trọng để làm cho ứng dụng của bạn cảm thấy phản hồi nhanh.

Họ cho mọi người sự tự tin rằng quan điểm họ đang nhìn hoặc tiếp cận là quan điểm mà họ sẽ tương tác.

Hiệu ứng di chuột được thêm tự động vào tất cả các điều khiển hệ thống.

Nếu bạn sử dụng các điều khiển tích hợp do SwiftUI cung cấp, bạn sẽ nhận được những hiệu ứng này trong ứng dụng của mình miễn phí.

Tôi nhận thấy một hiệu ứng di chuột bị thiếu trên tab Chim của ứng dụng của chúng tôi.

Tôi có thể chạm vào một trong những con chim này, nhưng không có dấu hiệu trực quan nào cho thấy tôi có thể làm điều đó vì không có hiệu ứng di chuột.

Bất cứ khi nào bạn thực hiện một điều khiển phản hồi với các cử chỉ như chạm, nó có thể sẽ có hiệu ứng di chuột.

Bạn có thể thêm một cái bằng cách sử dụng công cụ sửa đổi hoverEffect().

Theo mặc định, hiệu ứng di chuột là một điểm nổi bật, có nghĩa là nó sẽ sáng lên khi bạn nhìn vào điều khiển.

Với hiệu ứng di chuột mới của chúng tôi, rõ ràng là tôi có thể tương tác với các điều khiển này, nhưng hiệu ứng di chuột có những góc nhọn này và tôi nghĩ chúng sẽ trông tròn hơn một chút.

Tôi có thể cung cấp một hình dạng tùy chỉnh bằng cách sử dụng công cụ sửa đổi contentShape(), với hoverEffect là loại.

Công cụ sửa đổi hoverEffect() đọc hình dạng nội dung này ra khỏi chế độ xem mà nó sửa đổi.

Ở đó, điều đó cảm thấy tốt hơn nhiều.

Hiệu ứng di chuột rõ ràng và có một chút đệm và các góc tròn đẹp.

Tuy nhiên, tôi nghĩ chúng ta có thể làm được nhiều hơn thế.

Trong SwiftUI, nếu một điều khiển thực hiện một hành động để đáp ứng với một cú chạm, có khả năng điều khiển chỉ nên là một nút.

Hãy thay đổi chế độ xem chim thành một nút.

Các nút được viền theo mặc định trên nền tảng này, nhưng tôi không muốn các nút này có nền khi tôi không nhìn vào chúng.

Tôi sẽ làm cho cái này trở thành một nút đơn giản, vì vậy nó có hiệu ứng di chuột tiêu chuẩn nhưng không có nền hoặc đệm bên trong.

Hoàn hảo!

Các nút này có hiệu ứng di chuột tiêu chuẩn và chúng thu nhỏ lại khi chúng được nhấn.

Hiệu ứng di chuột được xây dựng để bảo vệ quyền riêng tư.

Những hiệu ứng này được thực hiện bởi hệ thống bên ngoài quy trình ứng dụng của bạn.

Hiệu ứng di chuột hệ thống là cách duy nhất để làm cho ứng dụng của bạn phản ứng với nơi mọi người đang tìm kiếm.

Ứng dụng của bạn chỉ được thông báo khi ai đó véo ngón tay của họ, chạm trực tiếp vào ứng dụng của bạn hoặc di chuột qua ngón tay hoặc con trỏ của họ trên các điều khiển của bạn.

Sau tất cả những thay đổi này, tôi muốn nói rằng Backyard Birds trông khá ổn.

Nhưng bằng cách thực hiện một số thay đổi nhỏ đối với bố cục của chúng tôi và áp dụng một số tính năng độc đáo cho nền tảng này, chúng tôi thực sự có thể bay lên bầu trời.

Hãy nói về một số bố cục cấp cao nhất.

Trên iPad, khi lớp kích thước ngang của cửa sổ là bình thường, thanh bên được ưu tiên hơn chế độ xem tab vì nó sử dụng tốt hơn chiều rộng tăng lên.

Tuy nhiên, trên thiết bị này, cửa sổ của bạn không bị ràng buộc với kích thước màn hình và các điều khiển không bắt buộc phải nằm bên trong cửa sổ của bạn.

Cân nhắc sử dụng chế độ xem tab để chuyển đổi giữa các chế độ xem cấp cao nhất.

Khi sử dụng chế độ xem tab, thanh tab được gắn vào phía bên trái của ứng dụng của bạn, giống như thanh ở đây trong Ảnh.

Khi bạn nhìn vào một trong các biểu tượng, nó sẽ tự động mở rộng để hiển thị nhãn của từng tab.

Hãy tiếp tục và chuyển từ chế độ xem chia nhỏ điều hướng sang chế độ xem tab.

Tôi sẽ tạo chế độ xem cho mỗi màn hình trong ứng dụng...

...Và đưa cho nó một mục tab với tiêu đề và biểu tượng.

Tuyệt vời!

Thanh tab bị thu gọn khi bạn không tương tác với nó và ứng dụng hiện có nhiều chỗ hơn cho nội dung của nó.

Chú ý cách thanh tab nằm bên ngoài cửa sổ thay vì bên trong nó.

Loại đính kèm này được gọi là đồ trang trí.

Đồ trang trí được đặt bên ngoài ranh giới ở các cạnh cửa sổ của bạn và là một nơi tuyệt vời để đặt các điều khiển bổ sung mà bạn muốn cùng với nội dung chính của mình.

Ngoài thanh tab, Ảnh có thanh công cụ ở dưới cùng cho phép bạn kiểm soát phạm vi thời gian được hiển thị trong thư viện của mình.

Những loại đồ trang trí này rất phổ biến, bạn có thể tự động thêm một cái bằng công cụ sửa đổi .toolbar bằng cách sử dụng vị trí trang trí dưới cùng.

Đồ trang trí thanh công cụ tự động cung cấp nền viên nang thủy tinh.

Tôi có một ý tưởng về một vật trang trí để thêm vào Backyard Birds.

Tôi cố gắng để mắt đến lượng nước và hạt giống mà tôi đã bỏ ra ngoài, nhưng nếu tôi sắp hết, tôi muốn được thông báo rằng một máng ăn cần được đổ đầy lại.

Bạn có thể xây dựng loại trang trí tùy chỉnh này bằng cách sử dụng công cụ sửa đổi ornament().

Tệp đính kèmAnchor xác định vị trí trong ứng dụng của bạn sẽ được đính kèm.

Tôi có thể đặt thông báo của mình trên bất kỳ cạnh nào của cửa sổ ứng dụng của mình, nhưng tôi muốn căn chỉnh nó xuống dưới cùng.

Tham số contentAlignment cho phép bạn chọn phần nào của đồ trang trí của bạn được căn chỉnh với tệp đính kèmAnchor.

Tôi muốn đặt trung tâm đồ trang trí của mình ở cuối ứng dụng của mình.

Bởi vì bạn có nhiều quyền kiểm soát hơn đối với nội dung của đồ trang trí tùy chỉnh, SwiftUI không cung cấp cho chúng nền kính theo mặc định.

Nếu bạn muốn một cái, bạn có thể sử dụng công cụ sửa đổi .glassBackgroundEffect() trên nội dung của đồ trang trí.

Bây giờ khi không có đủ nước hoặc hạt giống trong bất kỳ sân nào của tôi, tôi sẽ nhận được thông báo này ở cuối ứng dụng của mình và tôi có thể nhấn vào nó để điều hướng đến sân đó.

Tôi thích nó!

Bởi vì SwiftUI tự động thích ứng với nền tảng mà nó đang chạy, thật đơn giản để làm cho Backyard Birds cảm thấy như ở nhà trong Không gian Chia sẻ.

Bạn có thể làm theo các bước tương tự trong ứng dụng của mình.

Thêm hiệu ứng di chuột vào các điều khiển tương tác, sử dụng nội dung vectơ và sự sống động để dễ đọc và làm đồ trang trí cho các điều khiển phụ trợ.

Vẫn còn rất nhiều thứ mà bạn có thể khám phá mà chỉ có thể có trên nền tảng này, như khối lượng cho nội dung 3D và Không gian nhập vai cho trải nghiệm không gian.

Kiểm tra "Đưa SwiftUI sang chiều không gian tiếp theo" và "Vượt ra ngoài cửa sổ với SwiftUI" để tìm hiểu cách mở rộng ứng dụng của bạn vượt ra ngoài cửa sổ của nó.

Cảm ơn và mã hóa vui vẻ!

♪