10189

♪ ♪

Luvena: Chào mọi người!

Tên tôi là Luvena, và tôi rất vui được chia sẻ với bạn cách bạn có thể di chuyển ứng dụng Dữ liệu cốt lõi của mình sang SwiftData, khuôn khổ kiên trì gốc Swift có thể cùng tồn tại với Dữ liệu cốt lõi.

Tôi sẽ đề cập đến các trường hợp sử dụng phổ biến về cách bạn có thể áp dụng SwiftData cho ứng dụng Core Data của mình, cho dù bạn đã sẵn sàng cho quá trình chuyển đổi hoàn toàn từ Core Data sang SwiftData hay nếu bạn muốn áp dụng SwiftData từng bước và cùng tồn tại với Core Data.

Đầu tiên tôi sẽ hướng dẫn cách bạn có thể tạo các Lớp Mô hình SwiftData bằng cách sử dụng trợ lý Trình chỉnh sửa Mô hình Đối tượng được Quản lý.

Sau đó, tôi sẽ chứng minh quy trình áp dụng SwiftData hoàn chỉnh cho một ứng dụng Dữ liệu Cốt lõi hiện có.

Và cuối cùng, tôi sẽ giới thiệu cho bạn sự cùng tồn tại giữa Core Data và SwiftData, trong trường hợp chuyển đổi hoàn toàn sang SwiftData có thể không phải là giải pháp khả thi cho trường hợp sử dụng của bạn.

Trước tiên hãy để tôi đi qua quy trình làm thế nào bạn có thể tạo ra các lớp mô hình.

Trong SwiftData, bạn đang chuyển sang sử dụng các mô hình trong mã để thiết lập lược đồ của mình.

Một cách dễ dàng để làm điều này là sử dụng mô hình đối tượng được quản lý Dữ liệu cốt lõi của bạn để giúp tạo ra các mô hình SwiftData của bạn.

Hãy để tôi chỉ cho bạn cách thực hiện quá trình chuyển đổi này.

Tôi đã tạo một ứng dụng Dữ liệu cốt lõi ở đây được gọi là SampleTrips, giúp người dùng lên kế hoạch hành trình của họ cho các chuyến đi sắp tới.

Đây là tệp mô hình, chứa thông tin về dữ liệu của tôi và tổ chức của nó.

Tôi có các thực thể Trip, LivingAccommodation và BucketListItem, được tổ chức sao cho mỗi chuyến đi có một chỗ ở tương ứng và các mục danh sách nhóm đại diện cho các hoạt động chuyến đi mong muốn.

Từ đây, tôi sẽ tạo các lớp SwiftData nắm bắt thông tin tương tự.

Mặc dù mô hình đối tượng được quản lý Dữ liệu cốt lõi không cần thiết để tạo các lớp SwiftData này, nhưng nếu tôi có mô hình Dữ liệu cốt lõi đã có từ trước, tôi có thể sử dụng mô hình đó để giúp tạo các lớp SwiftData dựa trên tổ chức mà tôi đã có trong mô hình đã có từ trước của mình, mà tôi sẽ chứng minh cho trường hợp

Để làm điều này, tôi thông qua trợ lý Trình chỉnh sửa mô hình đối tượng được quản lý của chúng tôi.

Sau khi chọn tệp mô hình của mình, tôi điều hướng đến thanh menu, chọn Trình chỉnh sửa và nhấp vào Tạo mã SwiftData.

Bây giờ tôi có thể tạo tệp cho ba thực thể đã tồn tại từ trước của mình.

Tạo các mô hình SwiftData từ đầu cũng là một lựa chọn trong trường hợp tạo một ứng dụng Swift mới và sẽ không yêu cầu trợ lý này.

Đây là những tệp tôi vừa tạo.

Các loại Swift của bạn phải phù hợp với Mô hình và mỗi loại nắm bắt thông tin cho thực thể dưới dạng các biến, bao gồm các thuộc tính của nó, đối với Trip là tên, điểm đến và ngày bắt đầu và ngày kết thúc, và mối quan hệ của nó với các thực thể khác, LivingAccommodation và BucketListItem.

Bây giờ, hãy để tôi đưa bạn qua quy trình áp dụng hoàn chỉnh cho SwiftData.

Khi di chuyển hoàn toàn ứng dụng của bạn sang SwiftData, bạn đang thay thế ngăn xếp Dữ liệu Cốt lõi của mình bằng ngăn xếp SwiftData để khai thác các tính năng ngôn ngữ mẹ đẻ Swift với SwiftData.

Điều này cho phép mã dễ đọc hơn để duy trì dữ liệu của bạn, cũng như ngầm quản lý một số tính năng.

Tuy nhiên, trước khi thực hiện quá trình chuyển đổi này, bạn nên xem xét các thiết kế mô hình dữ liệu cốt lõi đã có từ trước của mình được cấu trúc như thế nào.

Các thiết kế mô hình Dữ liệu Cốt lõi của bạn đề cập đến lược đồ của bạn, bao gồm các thực thể và các thuộc tính và mối quan hệ của chúng.

Bạn cần đảm bảo rằng các thiết kế mô hình Dữ liệu Cốt lõi của bạn cũng được hỗ trợ trong SwiftData.

Điều này có nghĩa là đối với mỗi thực thể được xác định trong Dữ liệu cốt lõi, cần phải có một loại mô hình tương ứng với các kết quả khớp chính xác cho tên và thuộc tính thực thể trong SwiftData.

Đảm bảo rằng bạn kiểm tra kỹ lưỡng các mô hình của mình để xác minh rằng tất cả các tính năng đều được hỗ trợ trong SwiftData.

Hãy để tôi đề cập đến một số điểm nổi bật của quy trình áp dụng SwiftData hoàn chỉnh từ ứng dụng Core Data chi tiết hơn.

Tôi đã tạo các loại Swift để nắm bắt mô hình của mình trước đó.

Khi tôi đã chuẩn bị sẵn các tệp đó, tôi có thể xóa tệp mô hình đối tượng được quản lý Dữ liệu cốt lõi đã được sử dụng trước đó và thay vào đó quản lý mô hình thông qua các tệp Swift này.

Ngoài ra, tôi có thể xóa tệp Persistence mà trước đây đã giúp thiết lập ngăn xếp Dữ liệu Cốt lõi.

Bây giờ tôi có thể thiết lập modelContainer cho ngăn xếp SwiftData của mình.

modelContainer là một công cụ sửa đổi đảm bảo rằng tất cả các cửa sổ trong nhóm được cấu hình để truy cập cùng một vùng chứa liên tục.

Bằng cách thêm vùng chứa này vào đây trong TripsApp, tôi đang thiết lập cả vùng chứa và ngữ cảnh của mình, vì modelContainer cũng tạo và đặt ModelContext mặc định trong môi trường.

ModelContext được sử dụng để theo dõi các thay đổi đối với các trường hợp của các loại ứng dụng của tôi.

Nó có thể được đọc từ bên trong bất kỳ cảnh hoặc chế độ xem nào bằng cách sử dụng thuộc tính môi trường này.

Ngăn xếp liên tục SwiftData của tôi cho SampleTrips hiện đã được thiết lập, nhưng có một vài thay đổi nữa cần phải xảy ra.

Đầu tiên tôi sẽ chứng minh cách tạo đối tượng hoạt động.

Trước đây, trong Core Data, việc tạo ra một Chuyến đi mới sẽ giống như thế này.

Tôi sẽ tạo một ví dụ của Trip, chuyển trong ngữ cảnh đối tượng được quản lý, trước khi thiết lập các thuộc tính của nó.

Trong SwiftData, tôi có thể tạo một phiên bản mới của Trip với dòng mã này, dòng mã này đã tương đối dễ đọc hơn.

Khi tôi có chuyến đi mới này, tôi chèn nó vào bối cảnh mô hình để đảm bảo rằng nó được duy trì.

Bây giờ chuyến đi của tôi đang được duy trì, tôi muốn xem cách tôi có thể lưu nó và bất kỳ thay đổi nào trong tương lai mà tôi thực hiện đối với nó.

SwiftData có tính năng lưu ngầm kích hoạt lưu trên các sự kiện vòng đời giao diện người dùng và trên bộ hẹn giờ sau khi ngữ cảnh được thay đổi nếu có thể.

Do đó, tôi có thể xóa bản lưu rõ ràng của Core Data được gọi trên ngữ cảnh và dựa vào các bản lưu ngầm để duy trì dữ liệu của mình khi ngữ cảnh thay đổi.

Bây giờ, hãy để tôi đưa bạn qua cách tôi tìm nạp dữ liệu của mình.

Thay vì sử dụng yêu cầu tìm nạp như tôi đã có trong Dữ liệu cốt lõi, tôi có thể sử dụng Truy vấn để tìm nạp danh sách đầy đủ các chuyến đi sắp tới bằng cách gói một loạt các chuyến đi trong Truy vấn.

Điều này cho phép tôi tìm nạp các đối tượng Trip đó từ vùng chứa SwiftData.

Tôi cũng đang xác định thứ tự sắp xếp cho truy vấn.

Tôi muốn sắp xếp nó theo ngày bắt đầu chuyến đi của mình theo thứ tự chuyển tiếp, sao cho chuyến đi sắp tới gần nhất nằm ở trên cùng.

Truy vấn cũng có thể được sử dụng cho các trường hợp sử dụng cần bao gồm một vị ngữ.

Bây giờ bạn đã biết cách di chuyển hoàn toàn ứng dụng Core Data của mình sang SwiftData, hãy để tôi đưa bạn qua trường hợp bạn muốn cùng tồn tại giữa Core Data và SwiftData.

Việc di chuyển toàn bộ có thể không phải lúc nào cũng khả thi hoặc thực tế, trong trường hợp đó bạn có thể xem xét chuyển đổi một phần sang SwiftData.

Cùng tồn tại là khi có hai ngăn xếp liên tục hoàn toàn riêng biệt, một ngăn xếp Dữ liệu Cốt lõi và một ngăn xếp SwiftData, nói chuyện với cùng một kho lưu trữ liên tục.

Điều này có nghĩa là không cần phải viết lại hoàn toàn mã Dữ liệu Cốt lõi hiện có để có thể bắt đầu thêm mã SwiftData.

Tùy chọn này cung cấp cho bạn sự linh hoạt hơn khi áp dụng SwiftData vào ứng dụng của mình, cho dù bạn có thể đã có một số dữ liệu trong Core Data hay nếu bạn chỉ đơn giản là phải đối mặt với những hạn chế khác không cho phép bạn chuyển hoàn toàn sang SwiftData.

Đây là cách bạn có thể thiết lập cả hai ngăn xếp để nói chuyện với cùng một cửa hàng.

Trước khi tải cửa hàng liên tục, bạn cần đặt URL cửa hàng liên tục cho mô tả vùng chứa để đảm bảo rằng cả hai ngăn xếp đang ghi vào cùng một URL.

Ngoài ra, bạn cần bật tính năng theo dõi lịch sử liên tục.

Trong khi SwiftData tự động bật theo dõi lịch sử liên tục, Core Data thì không.

Nếu bạn cố gắng mở một cửa hàng liên tục khi bạn có cả Core Data và SwiftData cùng tồn tại trong cùng một ứng dụng mà không đặt lịch sử liên tục, cửa hàng của bạn sẽ được đưa vào chế độ chỉ đọc.

Có một vài tình huống khác nhau mà bạn sẽ thấy cùng tồn tại là lựa chọn tốt nhất cho trường hợp sử dụng của mình.

Một kịch bản là cho phép tương thích ngược với các khách hàng hiện tại.

Bởi vì SwiftData chỉ khả dụng trong iOS 17 và macOS Sonoma, các ứng dụng Core Data hiện tại của bạn có thể bị ảnh hưởng bởi việc chuyển đổi hoàn toàn sang SwiftData.

Ngoài ra, bạn có thể phải đối mặt với những hạn chế về tài nguyên khiến việc chuyển đổi hoàn toàn sang SwiftData trở nên khó khăn.

Trong những trường hợp này, sẽ rất hợp lý nếu kết hợp SwiftData một phần bằng cách thực hiện phát triển mới bằng SwiftData hoặc chỉ chuyển đổi các phần ứng dụng của bạn sang SwiftData.

Có một vài yêu cầu để cùng tồn tại giữa Core Data và SwiftData mà bạn nên cân nhắc trước khi thực hiện quá trình chuyển đổi này.

Đầu tiên, bạn phải có các lớp con thực thể dựa trên NSManagedObject có sẵn trong không gian tên hoặc các lớp SwiftData sao cho chúng không va chạm.

Điều này có nghĩa là không có hai lớp nào có thể được gọi là cùng một thứ, và ít nhất một trong số chúng cần phải thay đổi.

Hãy nhớ rằng mặc dù bạn đang thay đổi tên lớp, tên thực thể vẫn giữ nguyên.

Ví dụ, ở đây tôi có cùng một dự án SampleTrips từ trước đó, ngoại trừ lần này tôi muốn cùng tồn tại với Core Data và SwiftData.

Hai tên lớp xung đột.

Để phân biệt giữa cả tên SwiftData và Core Data Trip, thay vào đó tôi đã thay đổi tên lớp Core Data trip thành CDTrip.

Bạn cũng có thể làm điều này trong trình chỉnh sửa mô hình đối tượng được quản lý.

Ngoài ra, bạn sẽ cần giữ cho các lược đồ Dữ liệu Cốt lõi và SwiftData đồng bộ. Các phần mới của lược đồ SwiftData phải được hiện thực hóa dưới dạng NSManagedObjectModel và hai lược đồ không thể phân kỳ.

Điều này có nghĩa là các thuộc tính và mối quan hệ phải được thêm vào các mô hình theo cùng một cách chính xác.

Điều này là để các hàm băm phiên bản thực thể khớp với từng bước của con đường đi, vì các hàm băm không khớp có khả năng kích hoạt di chuyển và xóa thông tin mà bạn không muốn xóa.

Cuối cùng, bạn cần theo dõi các phiên bản lược đồ khi kết hợp cùng tồn tại.

Khi làm việc với nhiều phiên bản của mô hình SwiftData, bạn phải đảm bảo rằng các thay đổi được thể hiện chính xác để SwiftData có thể đánh giá sự khác biệt.

Có một vài cách bạn có thể làm điều này.

Kiểm tra cuộc nói chuyện "Mô hình hóa lược đồ của bạn với SwiftData" để hiểu cách sử dụng lược đồ có phiên bản.

Đối với các ứng dụng Swift của bạn dựa trên UIKit hoặc AppKit, vẫn có các tùy chọn khả thi để bạn sử dụng SwiftData.

Cách tiếp cận đầu tiên là giải pháp cùng tồn tại.

Bạn có thể liên kết mã UIKit của mình với Core Data và nó có thể hoạt động song song với SwiftData.

Ngoài ra, bạn có thể coi các lớp SwiftData của mình là các lớp Swift và thay vào đó bọc mã Swift của bạn bằng mã UIKit.

Đó là tất cả từ tôi!

Bây giờ hãy đi và khám phá cách bạn có thể linh hoạt di chuyển ứng dụng Dữ liệu cốt lõi của mình sang SwiftData, toàn bộ hoặc từng bước.

Trong thời gian chờ đợi, hãy xem những cuộc nói chuyện thú vị khác về SwiftData để tìm hiểu sâu hơn.

Cảm ơn vì đã tham gia cùng tôi! Tôi rất hào hứng để xem những gì bạn sẽ xây dựng!

♪ ♪