10109

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Xin chào, và chào mừng đến với "Gặp gỡ SwiftUI để tính toán không gian."

Tôi là Andrew, một kỹ sư trong nhóm SwiftUI.

Chúng tôi rất hào hứng với máy tính không gian.

Nó mở ra một thế giới của những khả năng mới để xây dựng các ứng dụng đột phá.

Trong buổi nói chuyện này, tôi sẽ hướng dẫn bạn những gì bạn cần biết để xây dựng các ứng dụng tuyệt vời của riêng bạn cho nền tảng và các tính năng mới mạnh mẽ trong SwiftUI giúp tất cả trở nên khả thi.

Khi bạn xây dựng một ứng dụng cho điện toán không gian, cách tốt nhất để xây dựng nó là sử dụng SwiftUI.

Chúng tôi đang đưa SwiftUI vào một tương lai mới táo bạo, với các khả năng 3D hoàn toàn mới như khối lượng, trải nghiệm nhập vai với Không gian đầy đủ, cử chỉ, hiệu ứng và bố cục 3D mới, tích hợp sâu với RealityKit và hơn thế nữa.

Những khả năng mới này chỉ tồn tại trong SwiftUI.

Nếu bạn có mã hiện có cho các ứng dụng của mình, phần lớn mã sẽ vẫn hoạt động trên nền tảng.

Đối với tất cả mã mới, cách tốt nhất để viết nó là với SwiftUI.

Chúng tôi tin tưởng sâu sắc vào SwiftUI đến nỗi chúng tôi đã xây dựng hệ thống từ đầu bằng SwiftUI.

Từ các khối xây dựng cốt lõi của một ứng dụng như Buttons, Toggles và TabViews, đến các yếu tố cốt lõi như Home View and Control Center, đến các ứng dụng quen thuộc như TV và Safari, đến những trải nghiệm hoàn toàn mới như bảng 3D trong Freeform và các buổi diễn tập nhập vai trong Keynote, SwiftUI cung cấp năng lượng cho tất

Với SwiftUI, bạn mô tả giao diện người dùng ứng dụng của mình, để hệ thống chọn các mặc định thông minh cho bạn để bạn có thể học các khái niệm này một lần và áp dụng chúng ở bất cứ đâu.

Điều này thậm chí còn hữu ích hơn với một nền tảng hoàn toàn mới.

Kiến thức SwiftUI hiện tại của bạn chuyển đổi liền mạch sang một giao diện hoàn toàn mới.

Hãy xem xét một nút bấm.

Các nút trên hệ thống có rất nhiều điểm chung với các nút bạn đã biết và yêu thích từ các nền tảng khác.

Ví dụ, giống như trên macOS, các nút trên nền tảng này sử dụng kiểu viền theo mặc định.

Nhưng các nút cũng có một số điểm khác biệt chính để thích ứng với các thành ngữ của nền tảng.

Hãy phóng to trình giả lập của chúng tôi và xem xét kỹ hơn.

Các nút viền như thế này sử dụng nền vật liệu sống động.

Và tất cả các nút đều có được hiệu ứng di chuột phong phú phản ứng với mắt, tay và đầu vào con trỏ của bạn.

Họ cũng có thể thu nhỏ lại và cung cấp phản hồi âm thanh khi được nhấn.

Và với các nút ở những nơi như thanh điều hướng, chúng có thể tự động hiển thị chú giải công cụ với nhãn nút của bạn khi mọi người nhìn vào chúng.

Hoặc xem xét TabView, nằm ngoài mặt bên của ứng dụng của bạn, cung cấp điều hướng nhanh chóng và dễ dàng mà không can thiệp vào nội dung ứng dụng của bạn.

Và TabView mở rộng để hiển thị chi tiết hơn, như nhãn của mỗi tab, chỉ bằng cách nhìn vào nó.

TabView là một ví dụ điển hình về cách SwiftUI có thể tận dụng những gì làm cho nền tảng trở nên độc đáo, chẳng hạn như giao diện ứng dụng của bạn phản ứng với nơi bạn đang tìm kiếm.

Chúng tôi đã áp dụng cùng một thiết kế chu đáo này cho tất cả các khối xây dựng cốt lõi của một ứng dụng, từ điều hướng và thuyết trình đến điều khiển và tương tác.

Chúng tôi cung cấp các mặc định nền tảng thông minh này để ứng dụng của bạn có thể phù hợp ngay từ đầu, cho phép bạn tập trung vào những gì làm cho ứng dụng của bạn trở nên tuyệt vời.

Nhưng chúng tôi đã không dừng lại ở đó.

SwiftUI cũng bao gồm toàn bộ bộ API hoàn toàn mới được xây dựng có mục đích cho môi trường 3D.

Và những API đó bắt đầu bằng những cảnh.

Nhớ lại rằng một ứng dụng trong SwiftUI được tạo thành từ các cảnh và các cảnh được tạo thành từ các lượt xem.

Các cảnh tạo thành các điểm vào cấp cao nhất cho ứng dụng của bạn, như WindowGroup để hiển thị một hoặc nhiều cửa sổ.

Với tính toán không gian, có ba loại cảnh tạo nên một ứng dụng: cửa sổ, khối lượng và Không gian đầy đủ.

Windows rất tuyệt vời để xây dựng các giao diện truyền thống và quen thuộc, từ các ứng dụng phong phú và hoàn chỉnh như Safari hoặc Freeform, đến các menu đóng vai trò là điểm vào cho đến những trải nghiệm nhập vai hơn như Chánh niệm.

Volumes là một phong cách cửa sổ 3D mới được xây dựng có mục đích để hiển thị các đối tượng hoặc trải nghiệm trong một không gian giới hạn.

Âm lượng cũng có thể được hiển thị cùng với các ứng dụng khác, làm cho chúng trở thành một công cụ tuyệt vời để xây dựng trải nghiệm 3D nhẹ, từ xem trước các mô hình 3D với Quick Look đến chơi trò chơi trên bàn qua FaceTime với bạn bè của bạn.

Cuối cùng, chúng tôi có Full Spaces, một cách hoàn toàn mới để xây dựng các ứng dụng phong phú, nhập vai.

Không gian đầy đủ cho phép ứng dụng của bạn kiểm soát hoàn toàn, ẩn các cửa sổ khỏi các ứng dụng khác và cho phép bạn đặt nội dung của mình ở bất cứ đâu.

Không gian đầy đủ có thể tăng cường thế giới thực trong khi vẫn giữ cho mọi người tiếp đất trong môi trường xung quanh hoặc họ hoàn toàn có thể khiến mọi người đắm chìm trong những trải nghiệm mới đáng kinh ngạc.

Từ các buổi diễn tập thực tế trong Keynote đến các loại trò chơi mới ly kỳ, Không gian đầy đủ mở ra một thế giới của những khả năng mới.

Và những loại cảnh này được thiết kế để sử dụng cùng nhau.

Mỗi cái được xây dựng có mục đích cho các trường hợp sử dụng khác nhau và bạn có thể trộn và kết hợp chúng theo bất kỳ cách nào có ý nghĩa đối với ứng dụng của bạn.

Bạn có thể trình bày một tập từ một cửa sổ, như để hiển thị bản xem trước 3D nhẹ của một mô hình kiến trúc.

Hoặc bạn có thể trình bày một Không gian đầy đủ từ một tập để hoàn toàn đắm chìm mọi người trong mô hình đó.

Bạn cũng có thể sử dụng nhiều cảnh cùng loại, đây là một cách tuyệt vời để sắp xếp ứng dụng của bạn thành các phần riêng biệt mà mọi người có thể mở và đóng một cách độc lập.

Hãy tìm hiểu sâu hơn một chút về từng loại cảnh này, bắt đầu với các cửa sổ.

Tôi là một fan hâm mộ lớn của thiên văn học và tôi đã làm việc trên một ứng dụng với một số người ngắm sao đồng nghiệp của mình để giúp những người khác tìm hiểu thêm về Trái đất và hệ mặt trời.

Bây giờ, họ đã có một khởi đầu tuyệt vời trên ứng dụng này, xây dựng trang giới thiệu tuyệt đẹp này trong một cửa sổ.

Nhưng tôi có những kế hoạch lớn để tiến xa hơn.

Để hiển thị cửa sổ của chúng tôi, tôi đang sử dụng cùng một API WindowGroup hoạt động trên tất cả các nền tảng khác Bằng cách sử dụng WindowGroup, tôi cũng tự động hỗ trợ tạo nhiều cửa sổ, giống như trên macOS hoặc iPadOS.

Bây giờ, tôi thực sự muốn thêm một tính năng mới vào ứng dụng: một thư viện để thu thập tất cả các loại sự thật thú vị về hệ mặt trời và vũ trụ của chúng ta để các sinh viên không gian của tôi có thể tiếp tục học hỏi.

Nhưng tôi đã bị mắc kẹt khi cố gắng tìm ra vị trí trong ứng dụng để đặt tính năng này.

Để giúp trả lời câu hỏi đó, hãy chia nhỏ cấu trúc của một cửa sổ thành các khối xây dựng của nó.

Các cửa sổ trên hệ thống bắt đầu với nền kính tuyệt đẹp, giữ cho mọi người tiếp đất bằng cách để môi trường xung quanh bạn hiển thị trong khi vẫn giữ cho nội dung ứng dụng của bạn dễ nhìn thấy.

Trong cửa sổ của tôi, tôi có thể sử dụng cùng một vùng chứa điều hướng mà tôi đã quen thuộc trên các nền tảng khác.

Ví dụ, tôi có thể sử dụng TabView để sắp xếp ứng dụng của mình thành một số thành phần cấp cao nhất được hiển thị ở cạnh trước của cửa sổ.

Tôi cũng có thể sử dụng ngăn xếp điều hướng và chế độ xem phân chia để giúp tổ chức hệ thống phân cấp ứng dụng của mình và hiển thị thông tin phong phú, theo cấu trúc tương tự như iPadOS.

Danh sách là một công cụ mạnh mẽ khác để sắp xếp thông tin với phong cách mới tuyệt đẹp phù hợp.

Và tất nhiên, tôi có thể thêm tính tương tác vào ứng dụng của mình bằng cách sử dụng các điều khiển tích hợp như nút, nút chuyển đổi và bộ chọn.

Bây giờ, tôi nghĩ chế độ xem Thư viện này sẽ là một cách sử dụng tuyệt vời của TabView, điều này hoàn hảo để làm cho các điểm vào cấp cao nhất vào ứng dụng của tôi có thể truy cập mọi lúc nên kiến thức sâu hơn luôn chỉ cách một cú chạm.

Để làm điều đó, tôi sẽ gói nội dung của mình trong TabView và cung cấp một tabItem với nhãn cho mỗi tab.

Trông thật tuyệt!

TabView có vẻ ngoài độc đáo, treo trên mép cửa sổ của tôi.

TabView là một ví dụ tuyệt vời về khái niệm mới mà chúng tôi đã thêm vào SwiftUI: đồ trang trí.

Đồ trang trí cho phép bạn đặt chế độ xem phụ kiện liên quan đến cửa sổ ứng dụng của mình và chúng thậm chí có thể mở rộng ra ngoài giới hạn của cửa sổ.

Đây là những điều tuyệt vời để hiển thị các điều khiển bổ sung không thuộc về chính cửa sổ và có thể tránh can thiệp vào nội dung ứng dụng của bạn.

Và chúng ta thậm chí có thể tạo ra đồ trang trí của riêng mình bằng cách sử dụng công cụ sửa đổi đồ trang trí mới.

Chúng ta hãy xem chế độ xem chi tiết Thư viện mà tôi đang làm.

Tôi đã bắt đầu trên trang này, được chia thành một vài phần: một số văn bản tóm tắt, một mạng lưới các số liệu thống kê thú vị và một danh sách cuộn theo chiều ngang các sự kiện thú vị.

Nhưng những phần này đang thiếu thứ gì đó.

Để tìm ra điều gì, chúng ta hãy xem xét kỹ hơn các tài liệu của ứng dụng của chúng tôi.

Các cửa sổ theo mặc định được nối đất trong một nền kính mới, đẹp.

Glass được thiết kế để sáng tác với các vật liệu mới, sống động giúp cung cấp hệ thống phân cấp trực quan cho ứng dụng của bạn.

Glass tự động thích ứng với môi trường để giữ cho nội dung dễ đọc bất kể nó được sử dụng ở đâu, cho phép ứng dụng của bạn trông tuyệt vời trong bất kỳ cài đặt nào.

Điều này có nghĩa là trên nền tảng này, không có giao diện tối hoặc sáng cho ứng dụng của bạn.

Vật liệu làm công việc khó khăn cho bạn.

Hãy xem cách chúng ta có thể sử dụng tài liệu để làm cho tab Thư viện của tôi phù hợp và cải thiện tính dễ đọc, bắt đầu với lưới thống kê.

Phần lưới thống kê của tôi hiện chỉ được tạo thành từ VStack với tiêu đề và chính lưới đó.

Hãy thử tạo cho nó một nền vật chất và làm cho tấm thiệp này thực sự nổi bật.

Để làm điều đó, tôi đã sử dụng vật liệu thông thường, thêm nền tối hơn, rực rỡ trên kính cửa sổ của chúng tôi để làm nền tảng cho hình dạng thẻ của tôi và cải thiện tính dễ đọc cho văn bản chi tiết.

Tôi đã sử dụng hình dạng trực tràng tròn và thêm một số phần đệm để làm cho thẻ có cảm giác vừa phải.

Tôi cũng sẽ áp dụng cách xử lý tương tự cho các thẻ sự kiện thú vị của chúng tôi.

Điều đó trông đẹp hơn nhiều!

Tiếp theo, hãy chuyển sang các thẻ thông tin thú vị của chúng ta và phóng to để xem xét kỹ hơn.

Thẻ này được xây dựng như một nút có thể hiển thị thêm chi tiết về thực tế khi tôi nhấn nó.

Tôi cũng đã sử dụng một kiểu nút tùy chỉnh cung cấp nền vật liệu đẹp đó.

Nội dung của nút bao gồm tiêu đề, nội dung chi tiết và chú thích cuối trang mời mọi người nhấn để tìm hiểu thêm.

Tuy nhiên, văn bản "Tìm hiểu thêm" trông hơi quá nặng.

Để khắc phục điều đó, tôi sẽ sử dụng kiểu tiền cảnh phụ cho văn bản của mình.

Lưu ý rằng phong cách phụ này tự động điều chỉnh trong tài liệu nền của chúng tôi để sử dụng cách xử lý sống động mới tuyệt đẹp, mang lại sức nặng hình ảnh lớn hơn cho nội dung của tôi trong khi vẫn giữ cho văn bản phụ đó dễ đọc.

Những kiểu hình dạng phân cấp này rất phù hợp để thể hiện trọng lượng hình ảnh tương đối, cho phép SwiftUI tự động điều chỉnh các tài liệu cụ thể để sử dụng dựa trên ngữ cảnh.

Sử dụng chúng và các API phong cách hình dạng và vật liệu phong phú khác trong ứng dụng của bạn để tạo ra các giao diện tuyệt đẹp trông tuyệt vời trong mọi ngữ cảnh và trên bất kỳ nền tảng nào.

Tiếp theo, hãy chuyển sang tương tác.

Với điện toán không gian, có những cách hoàn toàn mới để tương tác với các ứng dụng.

Hình thức tương tác phổ biến nhất là chỉ cần nhìn vào một phần tử và sử dụng cử chỉ chụm gián tiếp để thực hiện một cú chạm.

Bạn cũng có thể tương tác trực tiếp với các ứng dụng bằng tay chỉ bằng cách đưa tay ra và chạm vào chúng.

Và với bàn di chuột được kết nối hoặc cử chỉ tay, bạn có thể sử dụng con trỏ để nhập chính xác nhất.

Hệ thống cũng hoạt động với bàn phím phần cứng được kết nối, với sự hỗ trợ cho các phím tắt, Tiêu điểm và các công cụ sửa đổi phím để tăng năng suất trong các ứng dụng của bạn.

Cuối cùng, hệ thống hỗ trợ các công nghệ khả năng truy cập tuyệt vời tương tự mà bạn đã quen thuộc từ các nền tảng khác, như VoiceOver và Switch Control.

Phần tốt nhất là các điều khiển SwiftUI được xây dựng để có thể truy cập ngay lập tức, thực hiện nhiều công việc nặng nhọc cho bạn, điều này cho phép mọi người có được trải nghiệm tuyệt vời như nhau khi sử dụng ứng dụng của bạn.

Các cử chỉ bạn đã quen thuộc trong SwiftUI hoạt động rất tốt, tự động thích ứng với từng hình thức tương tác, như TapGesture và DragGesture.

Và chúng tôi đã thêm một số cử chỉ hoàn toàn mới để cho phép các loại tương tác 3D phong phú hoàn toàn mới như RotateGesture3D xoay chế độ xem ở cả ba chiều, sử dụng hai tay hoặc bàn di chuột được kết nối.

Và tất nhiên, tất cả các API và công nghệ khả năng truy cập giống nhau từ các nền tảng khác cũng hoạt động tốt, từ VoiceOver và rôto đến Loại động và Đảo ngược màu sắc.

Và nhiều tính năng trong số này đã được mô phỏng lại cho nền tảng.

Giống như Dwell Control, cho phép mọi người sử dụng và điều hướng ứng dụng của bạn chỉ bằng mắt của họ.

Để tìm hiểu thêm về các tính năng tuyệt vời này và cách làm cho ứng dụng của bạn có thể truy cập được với mọi người, hãy xem "Tạo trải nghiệm không gian có thể truy cập".

Một công cụ quan trọng để làm cho sự tương tác trở nên dễ dàng và trực quan với tính toán không gian là các hiệu ứng di chuột.

Ví dụ, chỉ cần nhìn vào chế độ xem tương tác, hệ thống hiển thị hiệu ứng nổi bật tinh tế trên chế độ xem để cung cấp phản hồi mà bạn có thể tương tác với nó.

Những hiệu ứng này tự động thích ứng với từng hình thức đầu vào, giúp mọi người tự tin vào những gì họ đang tương tác.

Hiệu ứng di chuột không chỉ hữu ích để cung cấp phản hồi đáp ứng mà còn hỗ trợ nhắm mục tiêu.

Và hiệu ứng di chuột là cách duy nhất để làm cho ứng dụng của bạn phản ứng với chính xác nơi mọi người đang tìm kiếm.

Những hiệu ứng này được áp dụng bên ngoài quy trình ứng dụng của bạn để tôn trọng quyền riêng tư của mọi người.

Hiệu ứng di chuột được thêm tự động vào hầu hết các điều khiển, như nút, nút chuyển đổi, trường văn bản và hơn thế nữa.

Nếu bạn sử dụng các kiểu tích hợp sẵn do SwiftUI cung cấp, bạn sẽ tự động nhận được các hiệu ứng này trong ứng dụng của mình.

Nếu bạn đang sử dụng điều khiển hoặc kiểu tùy chỉnh, hãy đảm bảo thêm hiệu ứng di chuột để làm cho chúng cảm thấy nhạy và dễ sử dụng.

Hãy quay lại những thẻ thông tin thú vị mà tôi đã thêm vào ứng dụng của mình và xem chúng hoạt động như thế nào với các hiệu ứng di chuột.

Những tấm thẻ đó trông rất tuyệt, nhưng có một vấn đề lớn.

Bởi vì tôi đang sử dụng ButtonStyle tùy chỉnh, bây giờ tôi chịu trách nhiệm cung cấp hiệu ứng di chuột của riêng mình.

Không có ai, không có phản hồi rằng những thẻ này thực sự có tính tương tác.

Tin tốt là nó cực kỳ dễ sửa.

ButtonStyle của tôi hiện chỉ thêm một số phần đệm và nền vật liệu tùy chỉnh vào nhãn của nút.

Để khắc phục phản hồi di chuột bị thiếu đó, tôi sẽ thêm công cụ sửa đổi hoverEffect vào ButtonStyle của mình.

Điều này chọn một hiệu ứng tự động cho tôi phù hợp với ngữ cảnh.

Trong trường hợp này, đó sẽ là hiệu ứng nổi bật.

Chúng ta hãy xem xét kỹ hơn.

Khi tôi nhìn vào các nút thẻ này, bây giờ tôi nhận được một hiệu ứng làm nổi bật đẹp, tinh tế cho thấy rõ rằng chúng có tương tác.

Hiệu ứng thậm chí còn tự động khớp với hình dạng nền nút của tôi, đảm bảo rằng không ai bỏ lỡ cơ hội tìm hiểu một sự thật thú vị.

Có rất nhiều điều để đề cập đến việc xây dựng các ứng dụng cửa sổ tuyệt vời.

Để đi xa hơn, hãy xem "Nâng cao ứng dụng có cửa sổ của bạn cho điện toán không gian", nơi bạn sẽ đi qua việc cập nhật ứng dụng đa nền tảng, tìm hiểu cách thêm đồ trang trí, đi sâu hơn vào các hiệu ứng di chuột, vật liệu và hơn thế nữa.

Tiếp theo, hãy đưa ứng dụng của chúng tôi sang chiều không gian tiếp theo với khối lượng.

Tôi muốn giúp những người quan sát ngoài không gian của tôi có được một góc nhìn mới về hành tinh mà chúng ta gọi là nhà.

Và một tập là hoàn hảo để làm điều đó.

Để thêm âm lượng vào ứng dụng của mình, tôi sẽ sử dụng cùng một cảnh WindowGroup mà tôi đã sử dụng cho cửa sổ chính của mình và chỉ cần chỉ định kiểu cửa sổ thể tích.

Tôi cũng có thể cung cấp kích thước 3D mặc định cho cửa sổ để nó có thể phù hợp với nội dung của chúng tôi.

Hãy kiểm tra âm lượng của chúng tôi trong trình giả lập.

Trong nội dung khối lượng của tôi, tôi đang sử dụng API Model3D mới từ RealityKit để hiển thị mô hình Trái đất 3D mà nhà thiết kế của chúng tôi đã kết hợp với nhau.

Và với Model3D, thật dễ dàng để thêm nội dung 3D vào ứng dụng của tôi.

Model3D tương tự như Hình ảnh, giúp dễ dàng tải và hiển thị nội dung 3D đẹp mắt.

Không giống như Hình ảnh, Model3D luôn tải không đồng bộ, vì nội dung 3D có thể mất thời gian để tải và sẵn sàng hiển thị.

Tương tự như chế độ xem AsyncImage, Model3D có thể tự động hiển thị chế độ xem giữ chỗ trong khi chúng tôi chờ nội dung tải.

Hoặc thay vào đó tôi có thể kiểm soát hoàn toàn và hiển thị trình giữ chỗ của riêng mình.

Thật đáng để dành một chút thời gian để nhận thấy ở đây rằng Model3D chỉ là một Chế độ xem SwiftUI khác.

Đưa 3D vào ứng dụng SwiftUI của bạn được xây dựng dựa trên các khái niệm tương tự mà bạn đã quen thuộc với các tiện ích mở rộng tự nhiên cho hệ thống bố cục, hiệu ứng hình ảnh, cử chỉ và hơn thế nữa.

Hãy xây dựng dựa trên ví dụ này để chúng ta có thể hiểu cách thực hiện.

Tôi muốn thêm một số điều khiển để giúp đưa Trái đất vào cuộc sống.

Tôi đã xây dựng giao diện người dùng bảng điều khiển của mình và tôi muốn đặt nó trước mô hình Trái đất của mình.

Để làm điều đó, tôi có thể chỉ cần sử dụng bố cục ZStack.

Các bố cục như ZStack tự động nhận thức được chiều sâu nội dung của bạn, giống như chúng có chiều rộng và chiều cao.

Và Model3D theo mặc định có kích thước phù hợp với nội dung của nó ở cả ba chiều, giống như một hình ảnh ở dạng 2D.

Trên thực tế, toàn bộ hệ thống bố cục nhận thức được chiều sâu nội dung của bạn và không gian có sẵn của nó và điều chỉnh bố cục của bạn cho phù hợp.

Và thậm chí còn có những công cụ sửa đổi mới để kiểm soát độ sâu hoạt động như thế nào với bố cục trong ứng dụng của bạn, như công cụ sửa đổi padding3D mới để thêm khoảng cách giữa các chế độ xem SwiftUI của bạn dọc theo mặt trước hoặc mặt sau của chúng, mà chúng tôi có thể sử dụng ở đây để cung cấp cho các điều khiển của

Hãy nhớ rằng khối lượng được thiết kế để xem từ mọi góc độ, vì vậy điều quan trọng là phải suy nghĩ về cách sắp xếp nội dung ứng dụng của bạn theo cả ba chiều.

Cuối cùng, để làm cho các điều khiển của tôi trông tuyệt vời và cảm thấy có căn cứ, tôi sẽ đảm bảo sử dụng công cụ sửa đổi glassBackgroundEffect mới, mang lại cho nó cách xử lý kính đẹp giống như chúng tôi đã có trong cửa sổ tiêu chuẩn của mình trước đây.

Bây giờ những điều khiển này có vẻ đã sẵn sàng để khuấy động.

Một điều khác mà tôi muốn thêm vào quả địa cầu 3D của chúng tôi là một cách dễ dàng để quay quả địa cầu đến một nơi ngẫu nhiên, đó là cách yêu thích của tôi để lên kế hoạch cho điểm đến kỳ nghỉ tiếp theo của mình.

Để làm điều đó, tôi sẽ thêm hiệu ứng xoay 3D vào Model3D của mình, trong trường hợp này là về trục y.

Và tôi sẽ sử dụng một biến trạng thái để theo dõi vòng quay để sử dụng.

Sau đó, tôi sẽ thêm một cử chỉ chạm và khi nó kích hoạt, tôi sẽ thay đổi vòng quay theo một số lượng ngẫu nhiên với một hình ảnh động lò xo nảy mới.

Hãy cho cái này một vòng quay.

À vâng, bán cầu tây.

Điều đó thực sự thu hẹp kế hoạch mùa hè của tôi!

Lưu ý rằng hiệu ứng quay mà chúng tôi vừa áp dụng cho quả địa cầu của mình thực sự là 3D.

Chúng tôi đã nâng cấp các hiệu ứng hình học này mà bạn đã biết cách sử dụng với các khả năng 3D mới, bao gồm tỷ lệ, độ lệch và biến đổi 3D tùy chỉnh.

Bây giờ đây đã là một cách tuyệt vời để kiểm tra toàn cầu, nhưng tôi nghĩ chúng ta có thể làm cho nó thậm chí còn tốt hơn.

Để làm điều đó, tôi sẽ sử dụng RealityView, một SwiftUI View mới cung cấp quyền truy cập dễ dàng vào toàn bộ sức mạnh của RealityKit.

Với RealityView, tôi cung cấp một đóng để tải và tạo nội dung RealityKit của tôi.

Để hiển thị mô hình Trái đất của tôi, tôi sẽ tạo một ModelEntity và đợi cho đến khi nó tải.

Và khi nó tải xong, tôi sẽ thêm nó vào nội dung RealityView của tôi để hiển thị nó.

Lưu ý rằng tôi có thể sử dụng async-await trực tiếp trong việc đóng RealityView của mình.

Giống như với Model3D, nó sẽ tự động hiển thị trình giữ chỗ cho đến khi nội dung của tôi được tải.

Bây giờ tôi đã tải thực thể Trái đất của mình, tôi có quyền truy cập vào thư viện phong phú của RealityKit APIs để làm cho nội dung của tôi thực sự tỏa sáng.

Trong trường hợp này, tôi muốn thêm một số ánh sáng vào Trái đất để tạo cho nó một bố cục nhiều nắng hơn.

Tôi đã viết một số mã RealityKit để thêm ánh sáng dựa trên hình ảnh đặc biệt của mình, vì vậy tôi sẽ gọi nó ở đây.

Bây giờ điều đó trông thật thú vị!

Có rất nhiều thứ để trang trải với RealityView.

Với RealityView, việc kết hợp thế giới giao diện người dùng và trải nghiệm 3D phong phú chưa bao giờ dễ dàng hơn thế.

RealityKit cho phép bạn thêm tất cả các loại hành vi phong phú như vật liệu tùy chỉnh và đổ bóng, vật lý và hoạt ảnh phức tạp, và hơn thế nữa.

Để tìm hiểu thêm về RealityView và RealityKit, chúng tôi đã chuẩn bị một số bài nói chuyện đi sâu hơn nhiều.

Kiểm tra "Xây dựng trải nghiệm không gian với RealityKit" khi bạn sẵn sàng tham gia.

Hiện tại, hãy tập trung vào hai tính năng thú vị của RealityView: cử chỉ và tệp đính kèm.

Với RealityView, các cử chỉ SwiftUI hoạt động tự động, giúp việc đưa nội dung 3D của bạn vào cuộc sống trở nên dễ dàng hơn bao giờ hết.

Tôi muốn xây dựng trên cử chỉ chạm mà chúng tôi đã thêm trước đây để đặt một điểm đánh dấu trên toàn cầu dựa trên nơi tôi đã chạm để tôi biết chính xác nơi để đi tiếp theo.

Để làm điều đó, tôi sẽ sử dụng SpatialTapGesture, hiện cung cấp cho tôi vị trí 3D đầy đủ của vòi.

Để giúp tôi xác định nơi tôi đã chạm vào thực thể Trái đất, tôi sẽ sử dụng công cụ sửa đổi cử chỉ targetedToAnyEntity mới.

Điều này cung cấp cho tôi ngữ cảnh tôi cần, như thực thể tôi đã nhấn vào và vị trí liên quan đến thực thể đó, mà tôi sẽ sử dụng để tra cứu vị trí cho mã pin của mình.

Để hiển thị ghim trên quả địa cầu của mình, tôi có thể sử dụng tệp đính kèm RealityView.

Tệp đính kèm rất tuyệt vời để trộn các chế độ xem SwiftUI tùy chỉnh với các thực thể RealityKit.

Tôi có thể thêm các chế độ xem SwiftUI khác trực tiếp trong phần đóng tệp đính kèm RealityView của mình, làm cho chúng có sẵn để đặt dưới dạng thực thể RealityKit ở bất kỳ đâu trong RealityView của tôi.

Tôi sẽ thêm một tệp đính kèm ghim ở đây và đưa cho nó một thẻ mà tôi có thể sử dụng để xác định nó.

Sau đó, trong phần đóng cập nhật của tôi, tôi sẽ tra cứu thực thể cho tệp đính kèm của mình và thêm nó vào nội dung RealityView của tôi để hiển thị nó.

Và sau đó tôi sẽ đặt thực thể đó để khớp với vị trí vòi.

Hãy cho cái này một vòng quay khác!

Có vẻ như tốt hơn là tôi nên đóng gói!

Chúng tôi rất vui mừng về khả năng xây dựng các ứng dụng thể tích tuyệt vời mà chúng tôi đã chuẩn bị toàn bộ buổi nói chuyện để giúp bạn đưa các ứng dụng SwiftUI của mình lên một chiều hướng tiếp theo, nơi bạn sẽ tìm hiểu thêm về cách sử dụng SwiftUI cùng với RealityKit, xây dựng các tương tác 3D phong phú, thêm chiều sâu cho bố cục của

Cuối cùng, hãy đưa ứng dụng này ra ngoài cửa sổ với Full Spaces, một cách hoàn toàn mới để xây dựng trải nghiệm 3D phong phú, nhập vai bằng SwiftUI.

Với một không gian đầy đủ, bạn có toàn quyền kiểm soát.

Bạn có thể đặt nội dung ở bất cứ đâu trong môi trường để tăng cường môi trường xung quanh mọi người theo những cách sáng tạo mới.

Hoặc bạn có thể đắm chìm hoàn toàn mọi người bằng cách che giấu môi trường xung quanh để tạo ra những trải nghiệm mới tuyệt đẹp.

Hãy đi sâu vào không gian và đưa hệ mặt trời của chúng ta vào cuộc sống.

Tôi đã có một khởi đầu thuận lợi trên trang này trong cửa sổ chính của chúng tôi, mời các phi hành gia trên ghế bành của chúng tôi tự mình xem không gian bên ngoài.

Bây giờ tôi chỉ cần tạo không gian của mình và nối nút này để cất cánh.

Để thêm Full Space vào ứng dụng của mình, tôi sẽ chỉ cần thêm một cảnh ImmersiveSpace mới như tôi đã làm với WindowGroups của mình.

Trong phần thân của nó, tôi sẽ cung cấp chế độ xem gốc cho nội dung không gian của mình.

Tôi cũng sẽ cung cấp ID cho không gian của mình để tôi có thể mở nó theo chương trình từ cửa sổ chính của chúng tôi.

Để mở không gian này, tôi sẽ sử dụng hành động môi trường openImmersiveSpace mới.

Trong nút của tôi, tôi sẽ gọi hành động đó và chuyển ID cho không gian của chúng tôi.

Và cứ như thế...

...Chúng tôi đã cất cánh!

Đây là một khởi đầu tuyệt vời.

Tôi có thể đến gần Trái đất theo cách mà tôi chưa từng có trước đây, cho phép tôi thực sự đánh giá cao tất cả các chi tiết phong phú, như những đám mây thực tế đó.

Nhưng có điều gì đó còn thiếu ở đây.

Tôi muốn cảm thấy thực sự đắm chìm trong không gian này.

Để làm điều đó, tôi sẽ sử dụng một công cụ không gian mạnh mẽ: phong cách ngâm mình.

Một không gian đầy đủ có thể có một trong một số phong cách đắm chìm và bạn có thể chuyển đổi giữa các phong cách này một cách nhanh chóng.

Với sự đắm chìm hỗn hợp, nội dung không gian của bạn cùng tồn tại với thế giới thực, điều này làm cho nó trở nên tuyệt vời cho những trải nghiệm nhẹ nhàng và tăng cường môi trường xung quanh mọi người.

Với sự đắm chìm hoàn toàn, ứng dụng của bạn có thể trở nên hoàn toàn nhập vai và che giấu môi trường xung quanh mọi người, đưa họ vào những thế giới mới tuyệt đẹp.

Và đắm chìm tiến bộ là một nền tảng trung gian tuyệt vời cho những trải nghiệm giúp mọi người có cơ sở trong thế giới thực ở ngoại vi của họ.

Với sự đắm chìm dần dần, mọi người cũng có thể sử dụng Vương miện kỹ thuật số trên thiết bị để quay số chính xác mức độ đắm chìm phù hợp với họ.

Bây giờ tôi nghĩ rằng một không gian hoàn toàn nhập vai sẽ hoàn toàn phù hợp với ứng dụng của tôi để làm cho nó thực sự cảm thấy ngoài thế giới này.

Để làm điều đó, tôi sẽ quay lại cảnh ImmersiveSpace của mình và thêm vào công cụ sửa đổi immersionStyle mới với phong cách ngâm đầy đủ.

Ở đây tôi cung cấp cả danh sách các kiểu được hỗ trợ và lựa chọn hiện tại, cho phép tôi thay đổi kiểu dáng một cách nhanh chóng.

Khi tôi sử dụng đắm chìm hoàn toàn, hệ thống sẽ che giấu hoàn toàn môi trường xung quanh thế giới thực của mọi người.

Vì vậy, tôi cần cung cấp một môi trường ảo để khiến mọi người đắm chìm bằng ứng dụng của tôi.

Và tất nhiên, còn môi trường nào tốt hơn để sử dụng ngoài không gian?

Chúng ta sẽ tiếp cận các ngôi sao với môi trường của chúng ta bằng cách tạo ra một RealityView mới để hiển thị trường sao của chúng ta.

Trong quá trình đóng cửa RealityView của chúng tôi, tôi sẽ tải thực thể trường sao của chúng tôi và khi nó sẵn sàng, tôi sẽ thêm nó vào nội dung của RealityView.

Sau đó, tôi sẽ thêm chế độ xem Starfield vào cơ thể hệ mặt trời của chúng ta cùng với Trái đất và Mặt trời của chúng ta.

Hãy phóng to để xem xét kỹ hơn.

Bây giờ điều này đang khiến tôi cảm thấy thực sự choáng váng.

Để đưa không gian của tôi lên một tầm cao mới, tôi có thể sử dụng ARKit.

ARKit là một khuôn khổ mạnh mẽ được tích hợp sâu với hệ thống, cung cấp quyền truy cập vào sự hiểu biết thời gian thực phong phú về môi trường xung quanh thế giới thực của mọi người, với các API như theo dõi thế giới và hiểu cảnh cho phép bạn đặt nội dung trên các bề mặt thế giới thực.

Và theo dõi tay, một công cụ mới đáng kinh ngạc mà bạn có thể sử dụng để xây dựng các cử chỉ tay tùy chỉnh, tương tác với nội dung của bạn bằng vật lý thực tế và hơn thế nữa.

Để tìm hiểu thêm về cách bạn có thể sử dụng ARKit trong không gian của mình, hãy xem "Gặp gỡ ARKit để tính toán không gian".

Bây giờ tôi rất hào hứng với các khả năng mà ARKit mở khóa bằng ứng dụng của mình đến nỗi tôi muốn cung cấp cho bạn một cái nhìn sơ lược về một tính năng nữa mà tôi đang làm việc.

Bằng cách tích hợp ARKit vào không gian của mình, tôi đã có thể thực hiện một cử chỉ tay mới để triệu hồi Trái đất.

Vì vậy, bạn có thể nắm giữ thế giới trong lòng bàn tay của mình.

Chúng tôi chỉ đang làm xước bề mặt của những gì bạn có thể làm với Full Spaces.

Và chúng tôi đã chuẩn bị một cuộc nói chuyện khác để bạn phóng lên vũ trụ.

Kiểm tra "Vượt ra ngoài cửa sổ với SwiftUI" để tìm hiểu sâu hơn về các nguyên tắc cơ bản của không gian và tìm hiểu về các công cụ nâng cao như thêm hiệu ứng vào môi trường xung quanh bạn, hiển thị kim ảo, tích hợp với SharePlay và hơn thế nữa.

Và nếu bạn cần toàn quyền kiểm soát việc hiển thị nội dung trong không gian của mình, bạn cũng có thể làm điều đó bằng cách sử dụng Metal và khung CompositorServices mới.

Kiểm tra "Khám phá kim loại cho các ứng dụng nhập vai" để tìm hiểu thêm.

Chúng tôi nóng lòng muốn xem tất cả các ứng dụng mới tuyệt vời mà bạn sẽ xây dựng bằng SwiftUI.

Từ cửa sổ đẹp đến một chiều hướng hoàn toàn mới với khối lượng, đến những trải nghiệm nhập vai đáng kinh ngạc với Full Space, một thế giới của những khả năng mới đang chờ đón bạn.

Nếu bạn đã sẵn sàng đi sâu hơn, chúng tôi thậm chí còn có nhiều cuộc nói chuyện tuyệt vời hơn để bạn kiểm tra, như "Nguyên tắc thiết kế không gian", nơi bạn có thể tìm hiểu thêm về cách thiết kế ứng dụng của mình để thực sự tỏa sáng.

Và nếu bạn có mã UIKit hiện có mà bạn muốn mang đến nền tảng, hãy xem "Gặp gỡ UIKit để tính toán không gian".

Cảm ơn vì đã xem, và có một vụ nổ với máy tính không gian!

♪