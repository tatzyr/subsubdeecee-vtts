10203

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Xin chào, tên tôi là Peter, và tôi làm việc trong nhóm RealityKit Tools tại Apple.

Hôm nay, chúng ta sẽ xem xét cách bạn có thể bắt đầu phát triển ứng dụng nhập vai đầu tiên của mình.

Điện toán không gian cung cấp những cách hoàn toàn mới để trình bày nội dung của bạn và tích hợp các mức độ đắm chìm sâu hơn trong các ứng dụng của bạn.

Mặc dù bản thân nền tảng này là mới, nhưng việc xây dựng các ứng dụng cho nó sử dụng quy trình làm việc có thể đã quen thuộc với bạn.

Trong phiên này, chúng ta sẽ bắt đầu bằng cách tạo một dự án ứng dụng mới trong Xcode.

Chúng tôi sẽ xem cách Trình mô phỏng cho phép bạn trải nghiệm ứng dụng của mình trong một cảnh mô phỏng và cách bạn có thể sử dụng Bản xem trước Xcode để lặp lại nhanh chóng.

Chúng tôi sẽ giới thiệu Reality Composer Pro, một công cụ mới giúp bạn chuẩn bị và xem trước nội dung không gian cho các ứng dụng của mình.

Cuối cùng, chúng tôi sẽ chỉ ra cách ứng dụng của bạn có thể tạo ra một cảnh nhập vai và nhắm mục tiêu các cử chỉ SwiftUI đến các thực thể RealityKit.

Hàng triệu nhà phát triển như bạn sử dụng Xcode mỗi ngày để tạo, xem trước, gỡ lỗi, lập hồ sơ và chuẩn bị ứng dụng để phân phối.

Xcode là nơi tốt nhất để bạn tạo ứng dụng đầu tiên của mình.

Hãy xem qua quá trình tạo dự án Xcode và xem có gì mới cho nền tảng này.

Khi chúng tôi tạo một dự án mới trong Xcode, chúng tôi được trình bày với trợ lý dự án mới.

Nó sắp xếp các mẫu dự án theo nền tảng và loại dự án.

Mẫu dự án ứng dụng có sẵn trong phần Ứng dụng bên dưới tab Nền tảng.

Lưu ý rằng trợ lý dự án mới có thể yêu cầu bạn tải xuống hỗ trợ nền tảng nếu nó chưa được cài đặt.

Trợ lý dự án mới giới thiệu cho chúng tôi một số tùy chọn, hai trong số đó là mới cho nền tảng này.

Chúng ta hãy xem xét kỹ hơn từng lựa chọn mới này.

Tùy chọn mới đầu tiên, Cảnh ban đầu, cho phép chúng tôi chỉ định loại cảnh ban đầu được tự động đưa vào ứng dụng.

Trợ lý dự án mới luôn tạo ra điểm khởi đầu với một cảnh duy nhất thuộc loại bạn chọn ở đây.

Là một nhà phát triển, bạn có thể thêm các cảnh bổ sung sau.

Chúng có thể cùng loại với cảnh ban đầu của bạn, hoặc chúng có thể là một loại cảnh hoàn toàn khác.

Mẫu cung cấp hai cảnh ban đầu, cửa sổ và âm lượng.

Hãy cùng xem sự khác biệt giữa những thứ này.

Windows được thiết kế để trình bày nội dung chủ yếu là hai chiều.

Chúng có thể được thay đổi kích thước theo kích thước phẳng của chúng, nhưng độ sâu của chúng là cố định.

Windows nói chung sẽ được hiển thị cùng với các ứng dụng đang chạy khác.

Bạn có thể tìm hiểu thêm chi tiết cụ thể về loại cảnh cửa sổ, cùng với các bổ sung và thay đổi đối với SwiftUI, trong phiên, "Gặp gỡ SwiftUI để tính toán không gian."

Khối lượng được thiết kế để trình bày chủ yếu nội dung 3D.

Kích thước của chúng ở cả ba chiều được điều khiển bởi chính ứng dụng, nhưng không thể được điều chỉnh bởi người sử dụng ứng dụng.

Giống như các cửa sổ, khối lượng thường sẽ được hiển thị cùng với các ứng dụng đang chạy khác.

Phiên "Đưa SwiftUI sang chiều không gian tiếp theo" cung cấp thêm thông tin về loại cảnh âm lượng.

Tùy chọn mới thứ hai, Immersive Space, mang đến cho bạn cơ hội thêm điểm khởi đầu cho nội dung nhập vai vào ứng dụng của bạn.

Khi bạn thêm một loại cảnh Không gian Nhập vai vào ứng dụng của mình, bạn có thể sử dụng nó để trình bày nội dung không giới hạn ở bất kỳ đâu trên khung vẽ vô hạn.

Khi ứng dụng của bạn kích hoạt loại cảnh này, nó sẽ di chuyển từ Không gian chia sẻ sang Không gian đầy đủ.

Trong một không gian đầy đủ, các ứng dụng đang chạy khác bị ẩn để tránh bị phân tâm.

Ứng dụng của bạn cũng có thể truy cập các tài nguyên kết xuất chuyên dụng và nó có thể yêu cầu quyền để kích hoạt các tính năng ARKit như theo dõi bằng tay.

Nếu bạn muốn tạo ra trải nghiệm nhập vai cho ứng dụng của mình, SwiftUI cung cấp ba phong cách khác nhau cho cảnh của bạn: ngâm hỗn hợp, ngâm dần dần và ngâm hoàn toàn.

Phong cách đắm chìm hỗn hợp cho phép ứng dụng của bạn đặt nội dung ảo không giới hạn trong Không gian đầy đủ trong khi vẫn giữ cho mọi người kết nối với môi trường xung quanh thông qua đường chuyền.

Phong cách đắm chìm tiến bộ mở ra một cổng thông tin để cung cấp trải nghiệm nhập vai hơn mà không hoàn toàn loại bỏ mọi người khỏi môi trường xung quanh họ.

Khi một cổng thông tin mở ra, mọi người sẽ có cái nhìn khoảng 180 độ vào nội dung nhập vai của bạn và họ có thể sử dụng Digital Crown để điều chỉnh kích thước của cổng thông tin.

Phong cách đắm chìm hoàn toàn che giấu hoàn toàn lối đi và bao quanh mọi người với môi trường ứng dụng của bạn, đưa họ đến một nơi mới.

Chúng ta sẽ nói nhiều hơn về Immersive Spaces vào cuối phiên này.

Để tìm hiểu sâu, chúng tôi mời bạn xem phiên, "Hãy vượt qua cửa sổ với SwiftUI".

Theo mặc định, không có Không gian Nhập vai nào được thêm vào ứng dụng của bạn.

Đây là hành vi khi bạn chọn tùy chọn Không có.

Tuy nhiên, nếu bạn chọn một trong các tùy chọn Không gian nhập vai, mẫu sẽ tự động thêm cảnh SwiftUI thứ hai với kiểu Không gian nhập vai mà bạn đã chọn.

Theo mặc định, nó cũng sẽ cung cấp một nút SwiftUI trong cảnh có cửa sổ để ai đó có thể mở nội dung nhập vai.

Nói chung, chúng tôi khuyến nghị các ứng dụng luôn bắt đầu trong một cửa sổ trên nền tảng này và cung cấp các điều khiển vào và ra rõ ràng để mọi người có thể quyết định khi nào nên đắm chìm hơn vào nội dung của bạn.

Tránh đưa mọi người vào một trải nghiệm nhập vai hơn mà họ không hề hay biết.

Hãy cấu hình dự án của chúng ta cho phiên này.

Chúng ta sẽ bắt đầu với một khối lượng ban đầu và không có Không gian Nhập vai.

Chúng tôi hoàn thành việc tạo dự án của mình như thường lệ, đặt tên cho nó và cho Xcode biết nơi nó nên được lưu.

Sau khi được tạo, dự án mới sẽ mở ra.

Ở phía bên trái, chúng ta thấy Project Navigator của Xcode.

Tệp đầu tiên là MyFirstImmersiveApp.swift, khai báo WindowGroup cho ứng dụng trình bày khối lượng ban đầu.

WindowGroup là cùng một cấu trúc mà bạn đã thấy trên iOS chỉ định chế độ xem SwiftUI cấp cao nhất mà ứng dụng của bạn trình bày.

Tệp thứ hai là ContentView.swift, là chế độ xem được hiển thị trong tập ban đầu này.

Dự án mở ra với ContentView.swift trong trình chỉnh sửa chính.

Xcode cũng hiển thị cho chúng ta bản xem trước của ContentView, tải nội dung của gói nội dung RealityKit được tự động bao gồm trong dự án.

Hầu hết mã trong dự án mới đều nằm trong ContentView.

ContentView sử dụng một số tính năng dành riêng cho nền tảng mới, vì vậy chúng ta hãy xem xét kỹ hơn.

ContentView là tên của chế độ xem SwiftUI được trình bày bởi khối lượng.

Nó định nghĩa một thuộc tính SwiftUI State duy nhất được gọi là "enlarge" được sử dụng cho một hiệu ứng đơn giản.

Là một chế độ xem SwiftUI, nội dung của chúng tôi được cung cấp bởi thuộc tính cơ thể.

Phần thân bao gồm hai góc nhìn lồng nhau trong một VStack.

VStack làm cho các chế độ xem lồng nhau xếp chồng lên nhau theo chiều dọc.

Chế độ xem lồng nhau đầu tiên là Chế độ xem thực tế.

RealityView là mới cho nền tảng này, và chúng ta sẽ quay lại với nó trong giây lát.

Chế độ xem lồng nhau thứ hai là chế độ xem Chuyển đổi SwiftUI tiêu chuẩn, được nhúng trong một VStack khác.

Chế độ xem Chuyển đổi chuyển đổi giá trị của thuộc tính phóng to.

VStack cung cấp glassBackgroundEffect để đảm bảo rằng các nút dễ đọc và dễ tương tác.

Nếu bạn đã làm việc với SwiftUI, rất có thể bạn đã thấy chế độ xem Chuyển đổi.

Hầu hết các điều khiển SwiftUI đã được hỗ trợ trên các nền tảng khác sẽ hoạt động như mong đợi.

Trong giây lát, chúng ta sẽ xem cách sử dụng cử chỉ để chuyển đổi thuộc tính phóng to.

Nhưng trước tiên, chúng ta hãy xem xét kỹ hơn RealityView.

RealityView cho phép bạn đặt nội dung Thực tế vào hệ thống phân cấp chế độ xem SwiftUI.

Trình khởi tạo RealityView được sử dụng trong ContentView nhận hai lần đóng làm tham số, đóng make và đóng cập nhật.

Việc đóng cửa thực hiện thêm nội dung RealityKit ban đầu vào chế độ xem.

Nó cố gắng tải nội dung của gói nội dung RealityKit.

Và nếu nó thành công, nó sẽ thêm nội dung đã tải vào chế độ xem bằng cách sử dụng content.add.

Chúng tôi cũng có thể tạo nội dung ban đầu theo thủ tục hoặc sử dụng kết hợp nội dung thủ tục và nội dung đã tải.

Việc đóng bản cập nhật là tùy chọn, nhưng nếu được cung cấp, nó sẽ được gọi bất cứ khi nào trạng thái SwiftUI thay đổi.

Nó bắt đầu bằng cách lấy thực thể đầu tiên từ content.entites, vì đó là những gì đã được thêm vào trong make closure.

Sau đó, nó chọn một hệ số uniformScale dựa trên giá trị của thuộc tính enlarge ở trạng thái SwiftUI và áp dụng thang đo này cho thực thể.

Điều quan trọng cần lưu ý là đóng bản cập nhật RealityView không phải là một vòng lặp cập nhật kết xuất và không được gọi trên mọi khung hình.

Thay vào đó, việc đóng bản cập nhật chỉ được gọi khi trạng thái SwiftUI thay đổi.

Cuối cùng, RealityView có một cử chỉ gắn liền với nó.

Khi bạn nhấn vào nội dung RealityKit, nó sẽ chuyển đổi giá trị của thuộc tính phóng to, tạo ra hiệu ứng tương tự như nhấn vào chế độ xem Chuyển đổi mà chúng tôi đã đề cập trước đó.

Để tìm hiểu thêm về RealityView và các cử chỉ, bạn có thể xem "Xây dựng trải nghiệm không gian với RealityKit."

Bây giờ chúng ta đã xem xét ContentView, hãy giới thiệu trình giả lập và chỉ ra cách điều hướng và tương tác với các ứng dụng đang chạy trong một cảnh mô phỏng.

Sau đó chúng ta sẽ xem ứng dụng của chúng ta trông như thế nào trong Trình mô phỏng.

Trình mô phỏng thể hiện chính nó trong một cửa sổ sẽ quen thuộc với bạn nếu bạn đã sử dụng nó cho các nền tảng khác.

Khi nó khởi chạy lần đầu tiên, bạn sẽ thấy trình khởi chạy ứng dụng.

Trình mô phỏng bắt chước những gì ai đó sẽ thấy khi đeo thiết bị.

Theo mặc định, con trỏ kiểm soát những gì bạn đang xem.

Nhấp chuột hoặc bàn di chuột mô phỏng thao tác chạm và giữ nút bấm sẽ mô phỏng sự chèn ép.

Một phần lớn của máy tính không gian là có thể nhìn và di chuyển xung quanh môi trường xung quanh bạn.

Trình mô phỏng cung cấp các điều khiển bổ sung để thực hiện chính xác điều đó.

Ở góc dưới cùng bên phải của cửa sổ Trình mô phỏng có một số nút để điều khiển thiết bị mô phỏng.

Nhấp và giữ trong khi di chuyển chuột hoặc bàn di chuột trên những thứ này cho phép bạn nhìn xung quanh...

...Chảo...

... quỹ đạo...

...Và tiến về phía trước và phía sau.

Nhấp và giữ các điều khiển này cho phép bạn nhanh chóng chuyển đổi giữa tương tác với nội dung và xem và di chuyển xung quanh.

Bạn cũng có thể nhấp vào các nút này để chuyển sang chế độ điều khiển nhất định để bạn không cần phải tiếp tục giữ nút chuột.

Ví dụ, nếu tôi nhấp vào nút xoay, sau đó nhấp và kéo khung nhìn sẽ xoay chế độ xem.

Nhấp vào điều khiển ngoài cùng bên trái sẽ chuyển trở lại điều khiển giao diện và chạm.

Trình mô phỏng đi kèm với một số cảnh mô phỏng mà bạn có thể sử dụng để xem ứng dụng của mình chạy trong các phòng và điều kiện ánh sáng khác nhau.

Bạn có thể chuyển đổi giữa chúng thông qua menu cảnh mô phỏng trên thanh công cụ.

Để biết thêm thông tin về việc sử dụng Trình mô phỏng, vui lòng xem tài liệu trên developer.apple.com.

Bây giờ chúng ta đã quen thuộc với Trình mô phỏng, chúng ta hãy xem ứng dụng mới của chúng ta đang chạy ở đó.

Như thường lệ, chúng tôi chạy ứng dụng từ Xcode bằng cách nhấp vào Chạy trong menu Sản phẩm.

Khi ứng dụng khởi chạy, chúng tôi sẽ thấy âm lượng hiển thị nội dung của gói nội dung RealityKit.

Nhấn vào nút Phóng to Nội dung Chế độ xem Thực tế sẽ khiến nội dung phóng to và nhấn vào nó một lần nữa khiến nó trở lại kích thước ban đầu.

Chúng ta cũng có thể chạm vào quả cầu để phóng to nó nhờ cử chỉ trên RealityView.

Điểm nổi bật của nút thay đổi khi chúng ta chạm vào hình cầu.

Cử chỉ nhấn đang cập nhật trạng thái SwiftUI, khiến cả chế độ xem RealityView và Toggle phản ứng với các thay đổi trạng thái.

Xcode Previews cho phép bạn nhanh chóng tập trung và lặp lại giao diện và hành vi của chế độ xem ứng dụng của bạn.

Khi bạn đang chỉnh sửa tệp nguồn có chứa nhà cung cấp bản xem trước SwiftUI, khung xem trước sẽ tự động mở trong Xcode.

Như với Trình mô phỏng, Bản xem trước Xcode được trình bày dưới dạng chế độ xem thiết bị mô phỏng.

Bạn có thể sử dụng các điều khiển tương tự để điều hướng cửa sổ xem trước như bạn đã sử dụng để điều hướng Trình mô phỏng.

Hãy sử dụng các điều khiển để di chuyển gần hơn một chút đến nội dung.

Bạn cũng có thể thay đổi cảnh mô phỏng, cũng như góc máy ảnh, bằng cách sử dụng các điều khiển ở góc dưới cùng bên phải.

Chúng ta có thể thay đổi mã SwiftUI và xem bản cập nhật xem trước trong thời gian thực.

Hãy tiếp tục và thay đổi văn bản của nút chuyển đổi, thay đổi nó thành "Thay đổi kích thước".

Lưu ý cập nhật bản xem trước khi chúng tôi thay đổi văn bản.

Ngoài ra, lưu ý rằng nút vẫn hoạt động trong Bản xem trước Xcode.

Chúng ta cũng có thể sử dụng cái này để lặp lại nội dung của việc đóng RealityView.

Xcode Previews có nhiều tính năng nâng cao hơn, bao gồm chế độ đối tượng cho phép bạn khám phá nội dung vượt ra ngoài giới hạn ứng dụng của mình, cũng như các góc máy ảnh tùy chỉnh.

Bạn có thể tìm hiểu thêm về Xcode Previews trong tài liệu dành cho nhà phát triển.

Chúng tôi đã tạo ra một công cụ mới để giúp bạn làm việc với các gói nội dung RealityKit.

Reality Composer Pro là một nơi tuyệt vời để bạn chuẩn bị và xem trước nội dung không gian cho các ứng dụng của mình.

ContentView của ứng dụng của chúng tôi sử dụng RealityView để tải nội dung của nó từ gói nội dung RealityKit.

Gói nội dung được tạo bởi mẫu được gọi là RealityKitContent và nằm trong nhóm Gói trong dự án Xcode.

Ở đây chúng ta thấy dự án của chúng ta với RealityKitContent được chọn.

Các gói nội dung RealityKit là các gói Swift chứa nội dung RealityKit.

Chúng được xử lý tại thời điểm xây dựng để tối ưu hóa nội dung của bạn để sử dụng trong thời gian chạy.

Nếu chúng ta nhấp vào chỉ báo tiết lộ cho RealityContent, chúng ta sẽ thấy nội dung của gói nội dung.

Nếu chúng ta nhấp vào Gói, với biểu tượng khối lập phương, chúng ta sẽ thấy bản xem trước của một trong những cảnh trong gói nội dung.

Để chỉnh sửa gói nội dung, hãy nhấp vào nút Open in Reality Composer Pro ở trên cùng bên phải.

Điều này sẽ ra mắt Reality Composer Pro.

Khi Reality Composer Pro ra mắt, chúng ta thấy nội dung 3D được tải bởi ContentView.

Trong khi trọng tâm chính của Xcode là chỉnh sửa các tệp nguồn và tài nguyên ứng dụng, Reality Composer Pro đặt nội dung 3D ở phía trước và trung tâm.

Chế độ xem chính của nó là khung nhìn 3D, có thể được điều hướng bằng cách sử dụng các điều khiển tương tự như trong Trình mô phỏng.

Reality Composer Pro sắp xếp nội dung của nó thành các cảnh.

Gói nội dung được bao gồm trong mẫu dự án bắt đầu bằng một cảnh duy nhất.

Để nâng cao dự án của chúng tôi, hãy tạo một cảnh mới có chứa nội dung cho Không gian nhập vai.

Từ menu Tệp của Reality Composer Pro, chọn Mới > Cảnh.

Đặt tên cho nó - trong trường hợp này, chúng ta sẽ chỉ gọi nó là ImmersiveScene - sau đó nhấp vào Lưu.

Sau khi chúng tôi tạo cảnh, nó sẽ tự động mở và chúng tôi thấy hình thu nhỏ của cảnh trống trong Trình duyệt Dự án ở cuối cửa sổ.

Chúng ta có thể chuyển đổi giữa các cảnh bằng cách nhấp vào tên của chúng ở đầu cửa sổ hoặc bằng cách nhấp đúp vào chúng trong Trình duyệt Dự án.

Bây giờ chúng tôi đã sẵn sàng để thêm nội dung nhập vai vào cảnh mới.

Khi chúng tôi định cấu hình dự án Xcode, chúng tôi đã đề cập đến cách bạn có thể sử dụng ImmersiveSpace của SwiftUI để trình bày nội dung không giới hạn ở bất kỳ đâu xung quanh bạn.

Có thêm hai chi tiết chính cần hiểu về loại cảnh này.

Đầu tiên, không giống như các loại cảnh cửa sổ và âm lượng, ImmersiveSpace sử dụng vị trí suy ra của bàn chân bạn làm nguồn gốc của nội dung.

Trong hệ tọa độ này, trục x dương ở bên phải bạn, trục y dương ở trên và trục z âm ở phía trước bạn.

Thứ hai, khi các ứng dụng của bạn chạy trong một không gian đầy đủ, chúng có thể yêu cầu quyền truy cập vào dữ liệu bổ sung, chẳng hạn như vị trí chính xác và hướng của bàn tay bạn.

Hãy nhớ rằng một số dữ liệu này nhạy cảm với quyền riêng tư.

Nếu ứng dụng của bạn yêu cầu dữ liệu nhạy cảm với quyền riêng tư, người sử dụng ứng dụng sẽ được nhắc phê duyệt yêu cầu này.

Điều này không có sẵn cho các ứng dụng trong không gian chia sẻ.

Để biết thêm thông tin về dữ liệu bổ sung có sẵn và cân nhắc quyền riêng tư cho các ứng dụng trình bày Không gian nhập vai, vui lòng tham khảo phiên "Gặp gỡ ARKit để tính toán không gian".

Bây giờ chúng ta đã biết nhiều hơn về cách tạo ra trải nghiệm nhập vai, hãy tập hợp một số nội dung sẽ hoạt động tốt trong ImmersiveSpace.

Tôi có một mô hình đám mây USDZ mà chúng tôi sẽ sử dụng để tạo ra một số nội dung phù hợp cho trải nghiệm nhập vai.

Để thêm mô hình USDZ vào cảnh Reality Composer Pro, hãy mở menu Tệp và nhấp vào Nhập.

Sau đó chọn tập tin.

Lưu ý rằng mô hình USDZ xuất hiện trong Trình duyệt Dự án.

Để thêm nó vào cảnh, chỉ cần kéo nó vào khung nhìn.

Bạn cũng có thể chỉ cần kéo và thả tệp USDZ từ cửa sổ Finder vào khung nhìn để nhập và thêm nó vào cảnh cùng một lúc.

Bây giờ, hãy định vị đám mây trong cảnh nhập vai của chúng ta.

Chúng ta có thể di chuyển các đối tượng xung quanh bằng cách chọn chúng và sử dụng các tay cầm xuất hiện.

Hoặc chúng ta có thể đặt thủ công các giá trị trong bảng Thanh tra ở bên phải.

Vì loại cảnh này sử dụng vị trí suy ra của bàn chân bạn làm nguồn gốc, chúng ta nên định vị đám mây sao cho nó sẽ xuất hiện ở một nơi nào đó mà chúng ta sẽ thấy nó ngay lập tức.

Trong trường hợp này, chúng tôi sẽ đặt nó ở phía trước và một chút ở bên phải của bạn, cao hơn một chút so với tầm mắt.

Tôi muốn đám mây này xuất hiện một chút ở bên phải.

Trục x dương ở bên phải, vì vậy hãy đặt X thành 50.

Lưu ý khi chúng tôi thực hiện thay đổi này, đám mây di chuyển ra khỏi khung nhìn.

Để tập trung vào nó một lần nữa, nhấp đúp vào nó trong hệ thống phân cấp cảnh bên trái.

Với đám mây có thể nhìn thấy một lần nữa, hãy nghĩ về tọa độ Y.

Chúng tôi muốn đám mây xuất hiện phía trên chúng tôi, vì vậy hãy đặt nó ở độ cao 200 cm.

Đó là khoảng sáu feet rưỡi trên sàn nhà.

Đám mây lại rời khỏi khung nhìn, vì vậy hãy đưa nó trở lại tầm nhìn.

Chúng ta nên đặt đám mây phần nào trước mặt chúng ta để chúng ta không phải nhìn thẳng lên để thấy nó.

Hướng cách xa chúng ta là trục z âm, vì vậy hãy đặt vị trí Z thành -200 cm.

Nhấp đúp vào nó trong hệ thống phân cấp cảnh một lần nữa để đưa nó lên phía trước và trung tâm.

Đám mây nằm ở phía nhỏ cho khung cảnh nhập vai của chúng ta.

Hãy xem làm thế nào chúng ta có thể làm cho nó lớn hơn.

Để tăng tỷ lệ, hãy kéo vòng tròn ra khỏi nó.

Chúng tôi muốn nó lớn hơn khoảng năm lần so với khi nhập khẩu.

Cuối cùng, hãy thêm một đám mây thứ hai, lần này ở bên trái.

Chúng ta có thể sử dụng menu Chỉnh sửa > Lệnh trùng lặp để tạo một bản sao của đám mây đầu tiên.

Để đặt bản sao ở bên trái, hãy đặt tọa độ X thành -50.

Để đóng khung tất cả nội dung của cảnh trong khung nhìn, nhấp đúp vào Root trong hệ thống phân cấp.

Tuyệt vời, bây giờ chúng tôi có một cảnh với nội dung phù hợp cho trải nghiệm nhập vai.

Hãy lưu các thay đổi của chúng tôi trước khi chúng tôi quay lại Xcode bằng cách sử dụng Tệp > Lưu tất cả.

Reality Composer Pro là một công cụ mạnh mẽ để chuẩn bị, xem trước và tích hợp nội dung không gian vào ứng dụng của bạn.

Để được giới thiệu chi tiết hơn, chúng tôi mời bạn xem phiên "Gặp gỡ nhà soạn nhạc thực tế chuyên nghiệp".

Phiên "Làm việc với nội dung Reality Composer Pro trong Xcode" được xây dựng trên phiên đầu tiên và chỉ cho bạn cách tích hợp chặt chẽ nội dung trong gói nội dung RealityKit với ứng dụng của bạn.

Bước tiếp theo là trình bày nội dung nhập vai mà chúng tôi đã tạo trong ứng dụng của mình.

Các cảnh được trình bày bởi ứng dụng nằm trong tệp nguồn App.swift, có tiền tố là tên dự án.

Bây giờ chúng ta hãy xem xét kỹ hơn nó.

Bạn có thể đã tự hỏi làm thế nào ứng dụng của chúng tôi biết để trình bày ContentView.

Chúng tôi thấy rằng ứng dụng của chúng tôi sử dụng một WindowGroup duy nhất để trình bày ContentView dưới dạng nội dung của ổ đĩa.

WindowGroup là một cảnh tạo ra một hoặc nhiều cửa sổ hoặc ổ đĩa thể hiện chế độ xem đã cho.

Cảnh đầu tiên trong thuộc tính cơ thể là cảnh sẽ được ứng dụng trình bày khi nó được khởi chạy và bạn có thể thêm cảnh bổ sung vào ứng dụng của mình bằng cách thêm chúng sau cảnh đầu tiên.

Chúng tôi muốn ứng dụng của mình trình bày một không gian nhập vai với nội dung chúng tôi vừa tạo trong Reality Composer Pro.

Không gian sẽ hiển thị nội dung của một chế độ xem mới được gọi là ImmersiveView mà chúng tôi sẽ thêm vào ứng dụng của mình.

Chúng ta cần gán một ID cho không gian.

Chúng tôi đã chọn chuỗi "ImmersiveSpace" làm ID của nó, sau này chúng tôi sẽ sử dụng khi mở không gian.

Hãy thêm mã này vào tệp nguồn App.swift của dự án chúng tôi, sau đó thêm mã vào ImmersiveView để tải cảnh mới mà chúng tôi đã tạo trong Reality Composer Pro.

Tôi đã thêm ImmersiveView.swift vào dự án bằng cách sử dụng mẫu SwiftUI View trong Xcode.

Trong App.swift của dự án chúng tôi, chúng tôi thêm ImmersiveSpace.

Sau đó, ở đầu ImmersiveView.swift, chúng tôi nhập RealityKitContent để có thể sử dụng gói nội dung RealityKit.

Chúng ta cũng sẽ cần nhập RealityKit để sử dụng RealityView.

Nội dung mặc định cho ImmersiveView chỉ là một hộp văn bản.

Hãy thay thế nó bằng RealityView tải nội dung từ cảnh mới mà chúng tôi đã thêm vào gói nội dung.

Để làm như vậy, nhấp đúp vào ContentView trong hệ thống phân cấp dự án ở bên trái, chọn và sao chép mã cho RealityView cùng với lần đóng đầu tiên của nó.

Chúng ta có thể sử dụng tab tệp đang mở của nó để quay lại ImmersiveView, nơi chúng ta chọn chế độ xem văn bản và sau đó dán để thay thế nó bằng mã RealityView.

Bạn có thể nhận thấy chúng tôi đã không sao chép việc đóng bản cập nhật cho RealityView.

Điều này là do chúng tôi không có ý định cập nhật nội dung của chế độ xem này để đáp ứng với việc thay đổi trạng thái SwiftUI.

Cuối cùng, để làm cho nó tải nội dung của Cảnh nhập vai mà chúng tôi đã tạo, hãy thay đổi tên của cảnh đã tải từ "Cảnh" thành "Cảnh nhập vai".

Bản xem trước hiện đang tải nội dung từ ImmersiveScene, nhưng tại sao chúng ta không thể xem nó trong khung xem trước?

Khi chúng tôi tạo ImmersiveView, Bản xem trước Xcode đã tự động được tạo cho chúng tôi.

Chúng ta hãy xem xét kỹ hơn.

Nếu chúng ta nhìn vào cuối ImmersiveView.swift, chúng ta sẽ thấy mã yêu cầu Xcode hiển thị bản xem trước.

Đó là khối mã bắt đầu bằng #Preview.

Theo mặc định, các bản xem trước được cắt thành giới hạn cảnh mặc định.

Nếu nó trình bày một chế độ xem tải nội dung bên ngoài các giới hạn này, nội dung sẽ không hiển thị.

Để hỗ trợ xem trước nội dung nhập vai vượt ra ngoài các giới hạn này, chỉ cần sửa đổi chế độ xem đang được chuẩn bị với .previewLayout(.sizeThatFits).

Hãy làm điều đó ngay bây giờ.

Nếu tôi thêm .previewLayout(.sizeThatFits) vào bản xem trước của ImmersiveView, bản xem trước sẽ cập nhật và chúng ta sẽ thấy nội dung nhập vai.

Cuối cùng, hãy để ứng dụng của chúng ta mở Immersive Space.

Nếu bạn đã làm việc với các ứng dụng SwiftUI nhiều cảnh trên iOS, bạn có thể đã thấy cách các cảnh bổ sung được mở từ mã SwiftUI.

Bước đầu tiên là nắm bắt việc đóng cửa từ môi trường SwiftUI của chế độ xem, sau đó được gọi để phản hồi một sự kiện, chẳng hạn như nhấn nút.

Trình bày một Không gian Nhập vai hoạt động theo cùng một cách trong SwiftUI trên nền tảng mới, ngoại trừ việc đóng cửa được chụp được gọi là "openImmersiveSpace" và không đồng bộ, cho phép mã của bạn biết khi nào Không gian Nhập vai đã được trình bày.

Quay lại ContentView, chúng tôi chỉ cần nắm bắt việc đóng openImmersiveSpace từ môi trường SwiftUI, và sau đó thêm một nút gọi nó.

Bây giờ chúng tôi đã thực hiện tất cả các thay đổi cần thiết cho ứng dụng của mình để trình bày nội dung nhập vai.

Bạn có thể trải nghiệm nội dung của mình trong Trình mô phỏng, nhưng việc đắm chìm đặc biệt hấp dẫn trong chính thiết bị.

Hãy kiểm tra nó.

Bây giờ chúng ta thấy một nút mới, khi được nhấn, trình bày các đám mây của chúng ta dưới dạng nội dung của ImmersiveSpace của chúng ta.

Chúng tôi thấy hai đám mây trước mặt chúng tôi, một bên trái và một bên phải.

Lưu ý rằng Immersive Space khác với cảnh ban đầu của ứng dụng.

Nếu chúng ta di chuyển cảnh ban đầu xung quanh, chúng ta sẽ thấy rằng nội dung trong ImmersiveSpace vẫn cố định.

Trong khi một người có thể di chuyển âm lượng ban đầu của ứng dụng đến bất cứ đâu họ thích, ImmersiveSpace được đặt ở một vị trí cố định khi nó được mở.

Thay vì di chuyển Không gian Nhập vai xung quanh, bạn di chuyển bản thân xung quanh bên trong Không gian Nhập vai.

Chúng tôi đã xây dựng một ứng dụng đơn giản trình bày những đám mây trên đầu bạn bằng cách sử dụng Không gian nhập vai.

Điều gì sẽ xảy ra nếu chúng ta muốn ứng dụng của mình phản hồi các tương tác với các đám mây?

Để đơn giản, hãy tưởng tượng rằng việc gõ vào một đám mây khiến nó trôi nhẹ nhàng trên bầu trời.

Hãy xem làm thế nào chúng ta có thể hoàn thành điều này.

Để các chế độ xem SwiftUI phản hồi các sự kiện đầu vào, bạn có thể đính kèm cử chỉ vào chúng.

Trong ví dụ này, chúng tôi có một chế độ xem văn bản đơn giản.

Bằng cách gắn TapGesture vào chế độ xem, chúng tôi có thể phản hồi khi một người nhấn vào chế độ xem.

Khi một cử chỉ được gắn vào chế độ xem, nó sẽ được đóng lại để được gọi khi cử chỉ được nhận dạng.

Vì RealityView chỉ là một chế độ xem SwiftUI khác, nó sẽ phản hồi các cử chỉ theo cùng một cách.

Tuy nhiên, một RealityView có thể chứa nội dung RealityKit với nhiều thực thể.

Ví dụ, ứng dụng của chúng tôi mở một ImmersiveSpace hiển thị RealityView chứa các mô hình đám mây của chúng tôi.

Nếu một người chạm vào một trong những đám mây, SwiftUI sẽ gọi TapGesture trên RealityView.

Nhưng làm thế nào để chúng ta biết đám mây nào đã được nhắm mục tiêu bởi vòi?

Đây là nơi nhắm mục tiêu thực thể xuất hiện.

Công cụ sửa đổi targetedToAnyEntity hoạt động trên một cử chỉ được đính kèm với RealityView để xác định thực thể chính xác mà cử chỉ được nhắm mục tiêu.

Có nhiều cách khác để nhắm mục tiêu các thực thể có sẵn.

Bạn có thể nhắm mục tiêu một thực thể cụ thể hoặc nhắm mục tiêu tất cả các thực thể khớp với một truy vấn.

Để biết thêm thông tin, vui lòng đọc tài liệu trên developer.apple.com.

Giá trị được chuyển đến trình xử lý của cử chỉ, chẳng hạn như onEnded, có thuộc tính thực thể chỉ ra rằng người đó đã tương tác với thực thể đó bên trong RealityView.

Lưu ý rằng để nhắm mục tiêu thực thể hoạt động trên một thực thể RealityKit nhất định, thực thể phải có cả CollisionComponent và InputTargetComponent.

Yêu cầu các thực thể RealityKit có các thành phần này cho phép chúng tôi giới hạn các tương tác chỉ các phần được chọn của nội dung trong RealityView.

Bạn có thể thêm các thành phần này vào một thực thể trong Reality Composer Pro hoặc bạn có thể thêm chúng theo chương trình trong ứng dụng của mình.

Bây giờ chúng ta đã thấy cách nhắm mục tiêu thực thể hoạt động, hãy sử dụng nó để phát hiện khi một người chạm vào đám mây.

Khi sự tương tác này xảy ra, chúng ta sẽ bắt đầu một hoạt hình RealityKit.

Hãy bắt đầu bằng cách thêm các thành phần chúng ta cần vào Reality Composer Pro.

Trong gói nội dung RealityKit của chúng tôi, chúng tôi có thể chọn cả hai đám mây cùng một lúc từ hệ thống phân cấp chế độ xem bằng cách sử dụng Command-click.

Sau đó, chúng tôi nhấp vào nút "Thêm thành phần" ở cuối bảng Thanh tra và chọn Va chạm.

Trong bảng điều khiển Thanh tra, chúng ta thấy rằng một CollisionComponent đã được thêm vào các đám mây.

Lưu ý rằng Reality Composer Pro tạo ra một CollisionComponent cho mô hình bằng cách tự động chọn một hình dạng va chạm thích hợp.

Bạn có thể thay đổi hình dạng va chạm này nếu cần.

Bây giờ chúng tôi làm điều tương tự cho InputTargetComponent.

Chúng tôi nhấp vào nút Thêm Thành phần một lần nữa, lần này chọn Mục tiêu Đầu vào.

Tuyệt vời! Hãy lưu các thay đổi của chúng tôi bằng cách chọn Tệp > Lưu tất cả.

Để thực sự làm cho một đám mây di chuyển trên bầu trời, chúng ta sẽ sử dụng hoạt ảnh RealityKit trong trình xử lý cử chỉ được gọi khi một đám mây được khai thác.

Đầu tiên chúng tôi nắm bắt giá trị hiện tại của sự chuyển đổi của đám mây dưới dạng giá trị có thể thay đổi, sau đó chúng tôi thêm độ lệch vào bản dịch để di chuyển nó 100 cm cả về phía trước và bên phải, sau đó áp dụng hoạt ảnh chuyển đổi RealityKit bằng cách gọi .move trên thực thể đám mây.

Hãy quay lại Xcode để hoàn thành ứng dụng.

ImmersiveView là tệp nguồn nơi chúng tôi trình bày RealityView với nội dung nhập vai.

Hãy thêm mã để đính kèm TapGesture vào RealityView và sử dụng thực thể nhắm mục tiêu vào nó.

Và khi một cú chạm được phát hiện, hãy thực hiện hoạt ảnh chuyển đổi.

Hãy chạy nó trên Trình mô phỏng và xem nó hoạt động!

Chúng tôi nhấn vào nút để mở ImmersiveSpace với những đám mây của chúng tôi trong đó, như trước đây.

Nhưng bây giờ, nếu chúng ta chạm vào một đám mây, nó sẽ trôi nổi nhẹ nhàng trên bầu trời.

Nhắm mục tiêu thực thể là chất kết nối các tương tác SwiftUI với nội dung RealityKit.

Trong ví dụ của chúng tôi, chúng tôi đã thực hiện một hình ảnh động đơn giản trên các đám mây để đáp lại một cú chạm.

Trong một ứng dụng phức tạp hơn, bạn có thể sử dụng nhắm mục tiêu thực thể để kích hoạt các hành động phức tạp hơn, chẳng hạn như trình bày các chế độ xem bổ sung, phát âm thanh hoặc bắt đầu hoạt ảnh.

Chúng tôi đã đề cập đến nhiều chủ đề ngày hôm nay; hãy tóm tắt chúng.

Chúng tôi bắt đầu với cách sử dụng trợ lý dự án mới của Xcode để tạo ứng dụng nhập vai đầu tiên của bạn.

Sau đó, chúng tôi đã giới thiệu Trình mô phỏng cho nền tảng mới và chỉ ra cách Xem trước Xcode giúp dễ dàng lặp lại nội dung ứng dụng của bạn.

Chúng tôi cũng đã giới thiệu Reality Composer Pro và xem cách nó cho phép bạn dễ dàng chuẩn bị và xem trước nội dung RealityKit.

Cuối cùng, chúng tôi đã chỉ ra cách mở ImmersiveSpace và sử dụng nhắm mục tiêu thực thể để kích hoạt và phản hồi theo chương trình đối với các tương tác với nội dung nhập vai.

Chúng tôi hy vọng bạn thích bài thuyết trình này.

Chúng tôi khuyến khích bạn khám phá các phiên chuyên sâu hơn về các API SwiftUI và RealityKit mới, cũng như các trường hợp sử dụng nâng cao hơn cho Reality Composer Pro.

Cảm ơn vì đã xem!

♪