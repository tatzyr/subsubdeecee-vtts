10278

♪ ♪

Romain: Xin chào, tên tôi là Romain, và tôi là một kỹ sư làm việc trên Xcode Cloud.

Xcode Cloud là một công cụ mạnh mẽ, đủ linh hoạt để được tích hợp ngay vào quy trình phát triển của nhóm.

Nó có thể tăng năng suất của họ và giúp họ cung cấp các ứng dụng tốt hơn cho khách hàng của họ.

Trong phiên này, tôi sẽ nói về việc tạo quy trình làm việc trong Xcode Cloud, dựa trên các tình huống bạn có thể gặp trong thế giới thực.

Các nhóm có đủ hình dạng và quy mô, với các quy trình phát triển đa dạng và độc đáo.

Để giúp chúng tôi thiết kế một số quy trình làm việc thực tế, chúng tôi sẽ tưởng tượng ra ba nghiên cứu điển hình giả định.

Mỗi nghiên cứu điển hình này sẽ giống với các tình huống phổ biến mà mọi người có thể thấy khi áp dụng Xcode Cloud.

Chúng ta sẽ bắt đầu bằng cách xem xét một nhà phát triển solo làm việc trên một ứng dụng duy nhất.

Sau đó, chúng tôi sẽ làm việc theo cách của mình để trở thành một nhóm lớn xử lý mã kế thừa và một quy trình phát triển phức tạp.

Trong phiên này, chúng tôi sẽ trình bày một số trong nhiều tùy chọn có sẵn để tạo và tùy chỉnh quy trình làm việc phù hợp với bất kỳ nhóm nào.

Hãy bắt đầu với nghiên cứu điển hình đầu tiên của chúng ta.

Giả sử chúng tôi có một nhà phát triển solo.

Họ có một ứng dụng có sẵn trên cả iOS và macOS.

Hầu hết công việc mã hóa của họ được thực hiện trên nhánh chính, nơi tất cả các thay đổi mã mới được đẩy.

Chắc chắn, đôi khi họ sẽ sử dụng một nhánh khác khi thử nghiệm các API và tính năng nền tảng mới, nhưng phần lớn, họ sử dụng nhánh chính.

Mã của họ dựa trên một vài phụ thuộc và họ đã chọn Cocoapods để tải xuống và tích hợp chúng vào dự án của họ.

Cuối cùng, họ triển khai các bản dựng ứng dụng của mình thông qua TestFlight cho một số bạn bè và thành viên gia đình, những người có thể kiểm tra và cung cấp phản hồi về ứng dụng.

Thỉnh thoảng, họ tự phát hành một phiên bản mới của ứng dụng lên App Store.

Nhà phát triển này là một chương trình một người.

Họ đang quản lý mọi thứ từ việc xây dựng ứng dụng của họ, đến việc tự phân phối nó trên App Store.

Đối với họ, sự đơn giản sẽ là chìa khóa.

Họ sẽ cần thứ gì đó mà họ có thể dựa vào và duy trì.

Với Xcode Cloud, toàn bộ quá trình đẩy mã mới, xây dựng ứng dụng và phân phối cho người thử nghiệm của họ có thể đạt được trong một quy trình làm việc nhỏ nhưng mạnh mẽ.

Trước khi tôi đi sâu vào quy trình làm việc này sẽ trông như thế nào, hãy tạm dừng và làm mới quy trình làm việc Xcode Cloud là gì.

Ví dụ, xây dựng ứng dụng của bạn, chạy thử nghiệm, phân phối cho người kiểm tra của bạn, v.v.

"Ở đâu" là phiên bản Xcode và phiên bản macOS bạn muốn sử dụng, cộng với bất kỳ cấu hình nào khác như các biến môi trường.

Cùng nhau, chúng tạo thành môi trường mà bạn muốn quy trình làm việc của mình chạy.

Cuối cùng, "khi nào" là khi nào bạn muốn những hành động này xảy ra.

Bạn có muốn nó bắt đầu khi bạn đẩy mã đến một nhánh cụ thể không?

Hay nói, mỗi ngày lúc 4:00 chiều?

Xác định một hoặc nhiều điều kiện bắt đầu đặt ra tiêu chí khi bạn muốn quy trình làm việc chạy.

Tuyệt vời.

Với điều đó hiện đang mới mẻ trong trí nhớ của chúng ta, hãy áp dụng "cái gì", "ở đâu" và "khi nào" vào tình huống của nhà phát triển solo của chúng ta.

Tôi sẽ tạo một quy trình làm việc Xcode Cloud mà họ có thể sử dụng để tự động hóa tất cả quy trình của họ.

Ở đây, tôi đã thiết lập dự án trong Xcode Cloud.

Trong trình điều hướng báo cáo, tôi chọn biểu tượng đám mây và nhấp chuột phải vào tên sản phẩm của mình, sau đó chọn "quản lý quy trình làm việc".

Điều này mở trình chỉnh sửa quy trình làm việc của tôi, nơi tôi sẽ nhấp vào dấu cộng để mở menu và chọn mục đầu tiên để tạo quy trình làm việc mới cho ứng dụng của mình.

Trong trường tên, tôi sẽ nhập "Quy trình làm việc CI".

Tôi sẽ bỏ qua trường mô tả, nhưng vui lòng thêm chi tiết.

Bây giờ, chúng ta hãy xem phần môi trường.

Trong phần này, tôi có thể thấy rằng phiên bản mới nhất của Xcode và phiên bản mới nhất của MacOS được chọn theo mặc định.

Điều này có vẻ tốt với tôi, vì vậy tôi sẽ không thực hiện bất kỳ thay đổi nào ở đó.

Mỗi quy trình làm việc mới đi kèm với một điều kiện bắt đầu mặc định.

Hãy cùng xem nào.

Điều kiện bắt đầu này sẽ tạo ra một bản dựng mỗi khi các thay đổi được đẩy đến nhánh mặc định; trong trường hợp này, chính.

Điều này gần như chính xác, nhưng nhà phát triển solo này muốn bắt đầu xây dựng khi mã được đẩy đến bất kỳ nhánh nào, không chỉ nhánh chính.

Tôi sẽ thay đổi tùy chọn nhánh nguồn thành "Bất kỳ chi nhánh nào".

Mục tiêu của quy trình làm việc này là xây dựng và phân phối ứng dụng.

Chúng tôi cần một hành động lưu trữ, chuẩn bị bản dựng để phân phối.

Tôi sẽ nhấp vào mặt cộng bên cạnh phần Hành động và chọn Lưu trữ.

Như bạn có thể thấy, nền tảng iOS đã được chọn, vì vậy tôi sẽ chỉ chọn tùy chọn "TestFlight and App Store" trong phần Chuẩn bị Triển khai.

Bây giờ quy trình làm việc của chúng tôi sẽ tạo ra một bản dựng có thể được phân phối, tôi sẽ thêm một hành động sau tải bản dựng lên App Store Connect.

Để làm điều đó, tôi sẽ nhấp vào dấu cộng trong phần hành động bài đăng và chọn "TestFlight External Testing".

Từ đó, tôi sẽ nhấp vào dấu cộng trong phần Nhóm và chọn nhóm người thử nghiệm "Bạn bè và Gia đình".

Và cứ như vậy, chúng ta gần như đã hoàn thành.

Nhà phát triển solo của chúng tôi làm việc trên một ứng dụng nhắm mục tiêu đến iOS và macOS, vì vậy tôi muốn quy trình làm việc của mình lưu trữ và phát hành ứng dụng trên cả hai nền tảng.

Để làm điều đó, tôi sẽ thêm một hành động lưu trữ khác.

Chọn nền tảng macOS và chuẩn bị triển khai TestFlight App Store.

Sau đó, tôi sẽ thêm một bài kiểm tra bên ngoài TestFlight khác sau hành động.

Chọn tạo tác "Lưu trữ - macOS".

Và chọn cùng một nhóm cho những người thử nghiệm.

Cuối cùng, tôi sẽ nhấn Lưu để tạo quy trình làm việc.

Chúng tôi đã đề cập trước đó rằng nhà phát triển này sử dụng Cocoapods để bao gồm các phụ thuộc mà ứng dụng của họ cần.

Ra khỏi hộp, Xcode Cloud có hỗ trợ cho Trình quản lý gói Swift.

Nó được tích hợp ngay vào Xcode.

Tuy nhiên, các trình quản lý phụ thuộc khác cũng có thể được sử dụng trong Xcode Cloud.

Tất cả những gì nó cần là một lượng nhỏ cấu hình.

Có một số tài liệu về cách sử dụng một số trình quản lý phụ thuộc phổ biến hơn.

Tài liệu đó có thể được sử dụng như một hướng dẫn về cách sử dụng những tài liệu khác.

Đối với nhà phát triển solo này, tài liệu đề xuất sử dụng tập lệnh tùy chỉnh sau bản sao để cài đặt và chạy công cụ Cocoapods.

Các tập lệnh xây dựng tùy chỉnh cung cấp một cách để chạy các hành động bổ sung tại các điểm cụ thể của bản dựng Xcode Cloud.

Trong ví dụ này, tập lệnh sau bản sao được chạy sau khi tất cả mã nguồn đã được nhân bản vào môi trường xây dựng tạm thời.

Chúng ta sẽ thấy một ví dụ khác về tập lệnh tùy chỉnh trong một nghiên cứu điển hình sau.

Và đó là quy trình làm việc của nhà phát triển solo, sẵn sàng hoạt động!

Lần tới khi họ đẩy một số mã, bản dựng Xcode Cloud sẽ bắt đầu và ứng dụng sẽ được lưu trữ cho cả iOS và macOS.

Sau đó, một bản dựng mới sẽ đến tay một nhóm bạn bè và gia đình, những người sẽ kiểm tra và cung cấp phản hồi về ứng dụng.

Bây giờ, hãy nâng nó lên một tầm cao mới và xem xét trường hợp sử dụng thứ hai của chúng tôi: một nhóm có quy mô trung bình.

Hãy tưởng tượng một nhóm bao gồm các nhà phát triển, quản lý dự án và kỹ sư QA, tất cả đều trải rộng trên toàn thế giới.

Họ xây dựng một ứng dụng iOS, có sẵn trên iPhone và iPad.

Mỗi nhà phát triển làm việc trong các chi nhánh riêng của họ.

Họ sử dụng các yêu cầu kéo để hợp nhất các thay đổi của họ trở lại thành một nhánh có tên là "beta".

Nhóm QA nội bộ của họ cài đặt và kiểm tra các bản dựng được thực hiện từ chi nhánh cụ thể đó để đảm bảo ứng dụng và các tính năng của nó đang hoạt động như dự định.

Khi họ muốn phát hành một phiên bản mới của ứng dụng, họ hợp nhất nhánh beta thành một nhánh phát hành và đẩy một thẻ mới để đánh dấu bản phát hành.

Để phát hiện lỗi và tránh hồi quy, ứng dụng được kiểm tra rất tốt với cả bài kiểm tra đơn vị và giao diện người dùng.

Họ sử dụng TestFlight để triển khai ứng dụng cho những người thử nghiệm nội bộ và bên ngoài tại các điểm khác nhau trong quá trình phát triển.

Cuối cùng, họ giao tiếp và cộng tác trong công việc của họ qua Slack.

Đây là một ví dụ khá phổ biến.

Họ đang sử dụng các công cụ của mình để làm việc và cộng tác song song, đồng thời giữ mình trong một quán bar chất lượng cao.

Quy trình của họ có thể được thực hiện với ba quy trình làm việc Xcode Cloud.

Đầu tiên, tôi sẽ tạo một quy trình làm việc yêu cầu kéo, giúp thay đổi nhánh beta.

Sau đó, tôi sẽ tạo một quy trình làm việc beta, được xây dựng nội bộ vào tay nhóm QA.

Cuối cùng, tôi sẽ tạo một quy trình làm việc cuối cùng để phát hành các phiên bản mới của ứng dụng cho những người thử nghiệm bên ngoài và vào App Store.

Hãy xem xét từng quy trình làm việc, theo thứ tự đó.

Nhóm sử dụng các yêu cầu kéo để quản lý việc kết hợp tất cả các thay đổi mã mới vào ứng dụng của họ.

Khi một nhà phát triển mở một yêu cầu kéo, đồng đội của họ xem lại mã của họ và họ chạy thử nghiệm để đảm bảo ứng dụng hoạt động như mong đợi.

Quy trình làm việc đầu tiên này là để đảm bảo rằng khi một yêu cầu kéo mới được mở hoặc một yêu cầu hiện có được cập nhật, các bài kiểm tra sẽ được chạy.

Hãy tạo quy trình làm việc này.

Đầu tiên, tôi sẽ nhấp vào dấu cộng để tạo quy trình làm việc mới cho sản phẩm của mình.

Trong trường tên, tôi sẽ nhập "Yêu cầu kéo".

Đối với quy trình làm việc này, nhóm muốn Xcode Cloud bắt đầu xây dựng khi yêu cầu kéo được mở, nhưng chỉ khi nó nhắm mục tiêu vào nhánh "beta".

Đối với mỗi bản dựng đó, họ muốn chạy các bài kiểm tra.

Hãy bắt đầu bằng cách thêm một điều kiện bắt đầu mới.

Tôi sẽ nhấp vào dấu cộng trong phần điều kiện bắt đầu và chọn mục "Kéo yêu cầu thay đổi".

Theo mặc định, nó sẽ bắt đầu xây dựng cho bất kỳ nhánh nào, vì vậy trong phần nhánh đích, tôi sẽ chọn "chi nhánh tùy chỉnh" Sau đó, tôi sẽ nhấp vào nút dấu cộng và nhập "beta".

Chúng tôi chỉ yêu cầu một điều kiện bắt đầu, vì vậy tôi có thể tiếp tục và xóa điều kiện "thay đổi chi nhánh".

Bây giờ tôi sẽ thêm một hành động mới để chạy các bài kiểm tra.

Tôi sẽ nhấp vào dấu cộng bên cạnh phần Hành động và chọn "Kiểm tra".

Ứng dụng nhắm đến cả iOS và iPadOS, vì vậy nhóm muốn đảm bảo rằng các bài kiểm tra vượt qua trên các thiết bị có kích thước màn hình và khả năng khác nhau.

Trong phần đích, tôi sẽ chọn một chiếc iPhone nhỏ, iPhone 13, một chiếc iPhone lớn, iPhone 14 Pro Max...

...Một chiếc iPad nhỏ, iPad mini...

..Và cuối cùng, bạn đoán được nó, một chiếc iPad lớn, iPad Pro.

Sau đó tôi sẽ nhấn lưu.

Tuyệt vời.

Bây giờ, sau khi xây dựng thành công trên Xcode Cloud và hy vọng đánh giá mã đầy đủ từ các đồng đội của họ, nhà phát triển sẽ có thể hợp nhất các yêu cầu kéo của họ và đưa các thay đổi của họ vào nhánh beta.

Thuận tiện, điều này đưa chúng ta đến quy trình làm việc tiếp theo của chúng ta: Quy trình làm việc xây dựng beta.

Nhánh beta là nơi đặt tất cả các thay đổi sắp tới.

Khi một nhà phát triển hợp nhất một yêu cầu kéo, nhóm QA muốn có được một bản dựng của ứng dụng với những thay đổi mới đó được bao gồm để họ có thể thực hiện một số bài kiểm tra xác minh.

Đây sẽ là cơ sở của quy trình làm việc mới này, triển khai bản dựng cho nhóm QA.

Hãy quay trở lại Xcode và tạo quy trình làm việc này.

Quy trình làm việc beta này là sự kết hợp của các quy trình làm việc mà tôi đã tạo trước đó.

Nhóm muốn phát hành một bản dựng mỗi khi một thay đổi được hợp nhất vào nhánh "beta".

Họ cần một quy trình làm việc chạy các bài kiểm tra, lưu trữ ứng dụng và tải nó lên App Store Connect.

Để đạt được điều đó, hãy tạo ra một quy trình làm việc mới.

Đặt tên nó là "Beta Release".

Và cập nhật điều kiện bắt đầu cho phù hợp.

Tôi sẽ chọn điều kiện bắt đầu Thay đổi Chi nhánh hiện có và thay đổi chi nhánh từ chính sang beta.

Sau đó, tôi sẽ thêm một hành động xây dựng kho lưu trữ.

Và chọn "Kiểm tra nội bộ chuyến bay thử nghiệm" đang chuẩn bị triển khai.

Ở đây, chúng tôi đang sử dụng phân phối nội bộ, vì chúng tôi không muốn bản dựng này được triển khai vào sản xuất do nhầm lẫn.

Bây giờ, tôi sẽ thêm một hành động xây dựng bài đăng, tải lên App Store Connect.

Hành động bài đăng này sẽ phân phối ứng dụng cho một nhóm người thử nghiệm nội bộ.

Tôi sẽ thêm một hành động bài kiểm tra nội bộ TestFlight.

Nhấp vào dấu cộng bên dưới phần nhóm và chọn "Nhóm QA".

Được rồi, chúng ta có thể dừng lại ở đây, nhưng chúng ta không muốn mạo hiểm triển khai một bản dựng bị hỏng.

Là một mạng lưới an toàn, chúng tôi cũng sẽ chạy các bài kiểm tra như một phần của quy trình làm việc đó.

Tôi sẽ lặp lại hành động kiểm tra từ quy trình làm việc yêu cầu kéo.

Một lần nữa, tôi sẽ chọn một chiếc iPhone nhỏ, một chiếc iPhone lớn, một chiếc iPad nhỏ...

...Và một chiếc iPad lớn.

Bây giờ tôi có thể nhấn Lưu để hoàn tất việc tạo quy trình làm việc này.

Quy trình làm việc xây dựng beta được xây dựng vào tay nhóm QA, nhưng có một điều nữa mà nhóm muốn làm.

Họ muốn sử dụng một biểu tượng ứng dụng thay thế cho bản dựng beta của họ.

Bằng cách đó, họ có thể nhanh chóng xác định giữa bản dựng nào là nội bộ và bản dựng nào đã sẵn sàng cho App Store.

Đây là một tình huống hoàn hảo khác mà các tập lệnh tùy chỉnh của Xcode Cloud có thể giúp ích.

Trước đó, chúng tôi đã thấy một tập lệnh tùy chỉnh chạy sau khi mã nguồn đã được nhân bản.

Ở đây, chúng tôi sẽ sử dụng tập lệnh xây dựng trước để thay đổi biểu tượng.

Sử dụng các biến môi trường có sẵn trong tập lệnh, tôi sẽ đảm bảo rằng chúng tôi chỉ hoán đổi các biểu tượng trong giai đoạn xây dựng quy trình làm việc beta của mình.

Nếu bạn muốn tìm hiểu thêm về cách đạt được điều này, vui lòng tham khảo phiên từ WWDC21, "Tùy chỉnh quy trình làm việc Xcode Cloud nâng cao của bạn" trong đó trường hợp sử dụng chính xác này được đề cập chi tiết.

Chúng tôi chỉ sử dụng hai trong số ba loại tập lệnh tùy chỉnh có sẵn.

Nếu bạn đang tự hỏi bạn có thể sử dụng tập lệnh nào khác và biến môi trường nào có sẵn cho bạn, tài liệu của chúng tôi giải thích tất cả những điều này một cách chi tiết.

Và đó là nó cho quy trình làm việc xây dựng beta.

Bây giờ chúng ta hãy xem xét quy trình làm việc cuối cùng cho nhóm này, quy trình phát hành.

Sau khi một số thay đổi đã được đưa vào nhánh beta và được xác minh bởi QA, nhóm sẽ chuẩn bị một bản phát hành mới.

Quá trình của họ yêu cầu một trong những nhà phát triển hợp nhất nhánh beta thành nhánh phát hành, sau đó tạo một thẻ để đánh dấu bản phát hành.

Tên của thẻ phải bắt đầu bằng bản phát hành từ, sau đó là một phiên bản.

Sau khi hoàn thành việc này, các ứng dụng sẽ được xây dựng, tải lên App Store Connect và phân phối cho một nhóm các bên liên quan nội bộ và một số khách hàng háo hức.

Quy trình làm việc thứ ba và cuối cùng của chúng tôi rất giống với quy trình làm việc beta, ngoại trừ việc chúng tôi muốn các bản dựng được tạo khi thẻ phát hành mới đã được đẩy.

Hãy quay lại Xcode và tạo quy trình làm việc này.

Các bước cần thiết cho quy trình làm việc này gần giống hệt với quy trình tôi đã tạo trong quy trình làm việc beta.

Tôi có thể thực hiện tất cả các bước tương tự, như tạo điều kiện bắt đầu, lưu trữ ứng dụng, v.v.

Thay vào đó, tôi muốn hướng bạn đến một tính năng Xcode Cloud sẽ cho phép chúng tôi sao chép quy trình làm việc beta.

Đầu tiên, tôi sẽ nhấp chuột phải vào quy trình làm việc beta, chọn bản sao, sau đó đổi tên quy trình làm việc từ Beta thành Phát hành.

Sau đó, tôi sẽ thêm một điều kiện bắt đầu mới.

Vì vậy, tôi sẽ nhấp vào dấu cộng trong phần điều kiện bắt đầu và chọn "Thay đổi thẻ".

Tương tự như các thay đổi của nhánh, tôi không muốn tạo các bản dựng mỗi khi thẻ được đẩy, nhưng chỉ khi tên của thẻ bắt đầu bằng từ "phát hành".

Tôi sẽ chọn "Thẻ tùy chỉnh" trong phần "thẻ".

Nhập "phát hành/"...

...Và chọn "thẻ bắt đầu bằng phát hành/" trong menu.

Với điều kiện bắt đầu này được tạo, tôi sẽ quay lại điều kiện bắt đầu "thay đổi chi nhánh" hiện có và xóa nó.

Bây giờ, hãy chuyển sang hành động Lưu trữ hiện có.

Quy trình làm việc beta được tạo ra để triển khai các bản dựng nội bộ, đặc biệt cho nhóm QA.

Ở đây, nhóm muốn chuẩn bị một bản phát hành cho thử nghiệm bên ngoài và App Store.

Trong phần Chuẩn bị Triển khai, tôi sẽ chọn tùy chọn "Testflight và App Store".

Điều đó nói rằng, chúng tôi vẫn muốn triển khai việc xây dựng cho một nhóm các bên liên quan nội bộ.

Tôi sẽ chọn hành động xây dựng bài đăng hiện có và xóa Nhóm nhóm QA.

Sau đó, tôi sẽ nhấp vào dấu cộng và chọn nhóm "Các bên liên quan điều hành".

Bước cuối cùng, tôi sẽ thêm một hành động đăng bài khác, nhưng lần này chọn Thử nghiệm bên ngoài TestFlight.

Tôi sẽ nhấp vào dấu cộng trong phần Đăng Hành động và chọn Kiểm tra bên ngoài TestFlight.

Sau đó, tôi sẽ nhấp vào dấu cộng trong phần Nhóm và chọn nhóm Người nhận nuôi sớm.

Bây giờ, quy trình phát hành gần như đã sẵn sàng.

Chúng tôi đã đề cập trước đó rằng nhóm này sử dụng Slack để giao tiếp và cộng tác với nhau.

Đối với nhóm này, việc nhận thông tin cập nhật về các bản dựng của họ trong Slack sẽ hoàn toàn phù hợp với quy trình phát triển của họ.

Điều này đặc biệt quan trọng nếu bản dựng không thành công và không thể phát hành.

Hãy thêm bước cuối cùng vào quy trình làm việc của chúng ta.

Trong quy trình phát hành, tôi sẽ nhấp vào dấu cộng trong phần hành động bài đăng và chọn Thông báo.

Xcode Cloud hỗ trợ gửi thông báo qua email và Slack.

Ở đây, tôi sẽ nhấp vào dấu cộng bên dưới Slack và chọn kênh "Phát hành nguồn cấp dữ liệu", sau đó nhấn OK.

Điều đó kết thúc trường hợp sử dụng thứ hai của chúng tôi.

Ba quy trình làm việc đó bao gồm tất cả quá trình phát triển của nhóm.

Họ xây dựng ứng dụng và chạy thử nghiệm liên tục, cho phép các nhà phát triển đóng góp một cách tự tin.

Họ lưu trữ và phân phối ứng dụng thường xuyên, đảm bảo rằng các nhóm người khác nhau có thể cung cấp phản hồi.

Đây là một tình huống khá phổ biến, nơi các nhóm có thể phát hành các ứng dụng có chất lượng tuyệt vời với sự trợ giúp của các công cụ thích ứng với mọi quy trình.

Hãy tiếp tục hỗ trợ tuyên bố này bằng cách xem xét trường hợp sử dụng thứ ba và cuối cùng, trong đó một nhóm lớn hơn muốn chuyển sang Xcode Cloud.

Đối với nghiên cứu điển hình cuối cùng của chúng tôi, giả sử chúng tôi có một đội ngũ lớn các nhà phát triển.

Nhóm này chia sẻ rất nhiều điểm tương đồng với nhóm cỡ trung bình mà chúng tôi vừa xem xét, với một số khúc quanh.

Nhóm lớn hơn và cơ sở mã, phức tạp hơn nhiều.

Họ có một ứng dụng trên iOS và iPadOS, đã xuất hiện từ khi bắt đầu App Store.

Nó đã được thiết kế lại và cập nhật nhiều lần kể từ đó, và các nhà phát triển đang xử lý rất nhiều mã kế thừa và sự phức tạp, đặc biệt là khi thực hiện QA.

Họ có rất nhiều bài kiểm tra.

Gần đây, họ đã áp dụng phương pháp phát triển dựa trên thử nghiệm và rất nhiều thử nghiệm mới đang được thêm vào với mỗi thay đổi mã mới.

Rất nhiều người tham gia vào các bản cập nhật thành công cho ứng dụng, vì vậy họ thường phân phối các bản dựng mới cho các nhóm TestFlight khác nhau, cả bên trong và bên ngoài, để thu thập phản hồi.

Nhóm bao gồm nhiều nhà phát triển làm việc trên khắp thế giới, sử dụng Slack để giao tiếp và cộng tác.

Nhưng đây là bước ngoặt thú vị.

Họ đã dựa vào sự tích hợp liên tục và triển khai liên tục để hoàn thành công việc của mình.

Hiện tại, họ sử dụng một giải pháp nội bộ mà một trong những thành viên trong nhóm duy trì và vận hành.

Khả năng tiếp cận và kiến thức về hệ thống này bị hạn chế, điều này khiến các vấn đề khó điều tra và thậm chí còn khó giải quyết hơn.

Vì những lý do này, và hơn thế nữa, họ đang cân nhắc chuyển sang Xcode Cloud để thay thế hệ thống nội bộ này.

Ngoài ra, họ sử dụng công cụ quản lý dự án, để theo dõi, điều phối và ưu tiên công việc họ đang làm.

Họ cũng đã tạo ra nhiều bảng điều khiển và trang trạng thái khác nhau.

Bằng cách đó, những người không trực tiếp tham gia vào việc phát triển ứng dụng có thể theo dõi tiến độ của dự án.

Xcode Cloud rất phù hợp với loại nhóm này, nhưng việc di chuyển một dự án phức tạp này sang một hệ thống CI mới rất khó và có thể cảm thấy quá sức.

Trong tình huống này, đề xuất của tôi là chia nhỏ quá trình di chuyển này thành các mốc quan trọng khác nhau.

Mỗi cột mốc liên quan đến việc chuyển khối lượng công việc từ hệ thống hiện có sang Xcode Cloud trong một khoảng thời gian.

Trọng tâm chính ở đây là cho phép di chuyển thành công, đồng thời giữ cho nhóm làm việc hiệu quả và hạnh phúc.

Thay vì xem xét các cấu hình quy trình làm việc, hãy xem những cột mốc đó có thể là gì.

Đề xuất của tôi là chia việc di chuyển này thành các cột mốc riêng biệt.

Bước đầu tiên là tạo một quy trình làm việc xây dựng một phiên bản của ứng dụng có thể được phát hành lên App Store.

Thứ hai là làm cho các bài kiểm tra hoạt động một cách đáng tin cậy.

Thứ ba là thiết lập các quy trình làm việc còn lại phù hợp và cải thiện quy trình phát triển của nhóm.

Chúng tôi sẽ xem xét từng bước này một cách chi tiết, bắt đầu bằng việc tạo quy trình phát hành.

Khi chuyển sang Xcode Cloud, đề xuất của tôi là bắt đầu bằng cách tạo quy trình làm việc lưu trữ và tải lên bản dựng ứng dụng sẵn sàng cho App Store.

Điều này giống như một số quy trình làm việc ví dụ mà chúng tôi đã tạo và nó có thể đạt được mà không bị gián đoạn cho phần còn lại của nhóm.

Bằng cách bắt đầu từ đó, bạn sẽ có thể sử dụng tính năng ký mã đám mây được tích hợp ngay trong Xcode Cloud.

Không cần phải lộn xộn với chứng chỉ và cung cấp hồ sơ để ký vào bản dựng của bạn.

Đây cũng là một cách tốt để xem những gì cần thiết để xây dựng ứng dụng thành công liên quan đến sự phụ thuộc và các thay đổi cấu hình khác.

Khi quy trình làm việc này đã sẵn sàng, nó có thể được đưa vào quy trình phát triển thường xuyên của nhóm như một phần tạo ra bản dựng sẵn sàng cho App Store của bạn.

Đây là phần công việc đầu tiên đã chuyển ra khỏi hệ thống hiện có và sang Xcode Cloud.

Tiếp theo, đã đến lúc tập trung vào việc làm cho các bài kiểm tra hoạt động đáng tin cậy.

Thử nghiệm có thể rất phức tạp trong một hệ thống tích hợp liên tục.

Thông thường, các thử nghiệm sẽ được điều chỉnh để chạy trong môi trường CI đang được sử dụng tại thời điểm chúng được tạo ra.

Khi chạy trong môi trường CI mới, chúng có thể không chạy một cách đáng tin cậy, khiến các bản dựng bị lỗi.

Trong quá trình tạo ra Xcode Cloud, chúng tôi đã nghĩ về vấn đề cụ thể này và xây dựng một tính năng mà chúng tôi tin rằng thực sự có thể giúp các nhóm chạy thử nghiệm của họ một cách trơn tru.

Tính năng này khiến Xcode Cloud bỏ qua các lỗi trong một số hành động trong quy trình làm việc và để quá trình xây dựng kết thúc.

Để kích hoạt tính năng này, hãy chọn tùy chọn "Không bắt buộc phải vượt qua" trong phần "yêu cầu" trong hành động của quy trình làm việc.

Bằng cách chỉ định một hành động là Không bắt buộc phải vượt qua, kết quả của hành động này sẽ không ảnh hưởng đến kết quả cuối cùng của bản dựng Xcode Cloud.

Các bài kiểm tra có thể thất bại, nhưng dù sao việc xây dựng cũng sẽ thành công.

Bạn vẫn sẽ thấy dấu kiểm màu xanh lá cây trong Xcode Cloud và trong trạng thái cam kết trong Quản lý mã nguồn cho bản dựng của bạn.

Điều này rất hữu ích vì nó có nghĩa là bạn có thể liên tục chạy các bài kiểm tra của mình khỏi con đường quan trọng.

Bằng cách đó, bạn có thể tổng hợp dữ liệu để đánh giá cách chúng hoạt động và liệu chúng có đủ đáng tin cậy hay không.

Hãy xem cách sử dụng tính năng này để các bài kiểm tra hoạt động trong Xcode Cloud.

Nhóm có khá nhiều bài kiểm tra, bao gồm nhiều khía cạnh của ứng dụng của họ.

Trong tình huống này, đề xuất của tôi là bắt đầu bằng cách tạo một quy trình làm việc mới chạy cho tất cả các yêu cầu kéo.

Trong quy trình làm việc này, một hành động xây dựng sẽ chạy tất cả các bài kiểm tra nhưng được đánh dấu là Không bắt buộc phải vượt qua.

Việc các bài kiểm tra vượt qua hay thất bại sẽ không chặn yêu cầu kéo được hợp nhất.

Ngay bây giờ, ý tưởng là đánh giá mức độ tin cậy của các bài kiểm tra.

Hãy nhớ rằng, các bài kiểm tra vẫn đang chạy trong giải pháp hiện có, vì vậy các yêu cầu kéo vẫn được hợp nhất một cách tự tin, sau một tuần hoặc lâu hơn.

Nhóm có thể xem dữ liệu kết quả kiểm tra từ các bản dựng yêu cầu kéo của họ và xem bài kiểm tra nào đã vượt qua một cách đáng tin cậy trong Xcode Cloud.

Những bài kiểm tra này có thể được chuyển sang một Kế hoạch Kiểm tra mới, được gọi là Kiểm tra Đáng tin cậy.

Sau đó, nhóm có thể chỉnh sửa quy trình làm việc yêu cầu kéo hiện có và thêm một hành động kiểm tra mới sẽ chạy các bài kiểm tra từ kế hoạch kiểm tra cụ thể đó.

Lần này, hành động kiểm tra sẽ được yêu cầu vượt qua trước khi yêu cầu kéo có thể được hợp nhất.

Để biết thêm thông tin về việc sử dụng các kế hoạch thử nghiệm trên Xcode Cloud, bạn có thể tham khảo "Các bài kiểm tra nhanh và đáng tin cậy của tác giả cho Xcode Cloud" từ WWDC22.

Bạn cũng có thể tham khảo tài liệu của chúng tôi về việc cải thiện đánh giá mã bằng cách sử dụng các kế hoạch kiểm tra.

Các bài kiểm tra còn lại, những bài kiểm tra hiện không hoạt động đáng tin cậy, có thể được điều tra thêm để tìm ra những thay đổi cần được thực hiện để làm cho chúng đáng tin cậy.

Khi thời gian trôi qua và những thay đổi được thực hiện, những bài kiểm tra đó có thể được tin tưởng trở lại.

Cuối cùng chúng có thể được chuyển vào kế hoạch kiểm tra đáng tin cậy và được sử dụng để xác thực lại các thay đổi.

Cách tiếp cận này cho phép bạn chuyển các bài kiểm tra của mình sang con đường quan trọng, từng bước một và cung cấp phạm vi xác thực và kiểm tra trong quy trình làm việc Xcode Cloud của bạn.

Một khi bạn hài lòng với các bài kiểm tra đang chạy, bây giờ bạn có các bản dựng và thử nghiệm sẵn sàng cho App Store, chạy đáng tin cậy trong Xcode Cloud.

Hai khối lượng công việc đó có thể được loại bỏ khỏi giải pháp CI hiện có.

Bây giờ chúng ta còn lại bước thứ ba và cuối cùng: xây dựng phần còn lại của quy trình làm việc cần thiết cho quá trình phát triển của nhóm.

Một số quy trình làm việc đó sẽ tương tự như những gì chúng ta đã thấy trong các nghiên cứu điển hình trong phiên này.

Thông qua các tùy chỉnh khác nhau mà bạn có thể thực hiện để bắt đầu các điều kiện và hành động, bạn có thể tạo một số quy trình làm việc thực sự mạnh mẽ để giúp tự động hóa quy trình CI và CD của mình.

Chúng tôi cũng đề cập đến việc nhóm này đã tạo ra các công cụ và bảng điều khiển bên ngoài hệ thống CI của họ.

Những công cụ đó giúp họ luôn cập nhật quá trình phát triển và cũng có thể được tích hợp với Xcode Cloud.

Ví dụ, bạn có thể sử dụng tính năng webhook.

Sau khi một webhook như đã được cấu hình, bất cứ khi nào một bản dựng hoàn thành, một yêu cầu sẽ được gửi đến máy chủ của bạn với thông tin về bản dựng, quy trình làm việc đã bắt đầu nó, v.v.

Từ đó, nếu bản dựng được tạo từ quy trình làm việc beta và nó thành công, bạn có thể tạo một vé mới trong hệ thống quản lý tác vụ của mình, để theo dõi quy trình QA trên bản dựng cụ thể này.

Nếu bạn muốn tìm hiểu thêm về webhooks và cụ thể khi những yêu cầu đó được gửi và thông tin nào có sẵn cho bạn, bạn có thể tham khảo tài liệu của chúng tôi.

Một cách tiếp cận khác là sử dụng API công khai Xcode Cloud.

Nó cho phép bạn tìm nạp thông tin về các bản dựng gần đây, trong số những thứ khác và hiển thị chúng trên bảng điều khiển hoặc trang trạng thái.

Một lần nữa, bạn có thể tham khảo tài liệu để tìm hiểu cách sử dụng API công khai của Xcode Cloud và tích hợp nó vào quy trình làm việc của bạn.

API công khai của Xcode Cloud và cơ chế webhook là những tính năng cực kỳ hữu ích cho các nhóm, bất kể quy mô của họ.

Khi kết hợp tất cả các tùy chọn có sẵn, khả năng là vô tận.

Bạn có thể tham khảo phiên từ WWDC22, "Đi sâu vào Xcode Cloud cho các nhóm" để biết thêm ví dụ.

Trong phiên này, chúng tôi đã xem xét nhiều loại quy trình làm việc đơn giản nhưng mạnh mẽ có thể được tạo ra để giúp nhóm của bạn làm việc hiệu quả hơn.

Chúng tôi đã chỉ ra một số ví dụ về cách tùy chỉnh quy trình xây dựng của bạn bằng cách sử dụng các tập lệnh xây dựng tại các điểm khác nhau trong bản dựng.

Cuối cùng, chúng tôi đã chỉ ra rằng một số tính năng cho phép bạn xây dựng các công cụ trên Xcode Cloud và tích hợp với các công cụ bên ngoài.

Chúng tôi hy vọng rằng ba nghiên cứu trường hợp này đã giúp bạn nhận ra cách Xcode Cloud có thể phù hợp với nhóm của bạn và cải thiện công việc hàng ngày của bạn.

Cảm ơn bạn đã xem.

♪ ♪