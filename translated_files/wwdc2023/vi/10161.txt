10161

♪ ♪

Nick: Xin chào, tôi là Nick, một kỹ sư trong nhóm SwiftUI.

Thanh tra là một yếu tố mới thú vị trong SwiftUI.

Tôi sẽ xem xét trình kiểm tra là gì và cách sử dụng API.

Sau đó, tôi sẽ xem xét các công cụ sửa đổi cho các tùy chỉnh bản trình bày.

Thanh tra là tên của các chế độ xem hiển thị thêm chi tiết của nội dung đã chọn.

Bạn có thể đã tương tác với một người trước đây.

Keynote sử dụng trình kiểm tra để hiển thị chi tiết định dạng cho một lựa chọn, trong trường hợp này là trình định dạng hình dạng.

Ở đây thanh tra trình bày như một thanh bên kéo.

Một trường hợp sử dụng phổ biến khác cho các thanh tra viên là hiển thị nội dung bổ sung cho nội dung chính của ứng dụng.

Phím tắt sử dụng trình kiểm tra cho mục đích này.

Giao diện chính là phím tắt mà người dùng đang chỉnh sửa và trình kiểm tra bổ sung nó với thư viện các ứng dụng và hành động có sẵn.

Tôi sẽ sử dụng ứng dụng mẫu này để khám phá API thanh tra.

Tôi đã làm quen với các loài động vật trong và xung quanh Apple Park.

Ứng dụng này lưu các loài động vật tôi đã gặp, theo dõi tên của chúng, theo dõi các loại trái cây yêu thích của chúng và có cột này mà tôi sẽ đến sau được gắn nhãn "Cấp độ chú ý".

Và bây giờ, hãy gặp, thanh tra của SwiftUI!

Thanh tra viên hiển thị chế độ xem đọc-ghi các chi tiết về con vật được chọn.

Ở đây tôi đang điều chỉnh mức độ nghi ngờ của Fabrizio Fish thành "Cực kỳ đáng ngờ".

Thực ra tôi sẽ giữ anh ta ở mức khó chịu.

Thanh tra có sẵn cho các nhà phát triển SwiftUI trên macOS và iPadOS và iOS nữa!

API trình kiểm tra bao gồm kiểm soát có lập trình đối với chiều rộng cột, cho phép bạn điều chỉnh chiều rộng của cột cuối.

API bao gồm kiểm soát có lập trình đối với trạng thái được trình bày, cho phép ẩn và hiển thị trình kiểm tra khi cần thiết.

Thanh tra là một sự trừu tượng cấp cao hơn chỉ là một thanh bên ở phía sau.

Trong các lớp kích thước nhỏ gọn, nó thích ứng với một trang tính có thể thay đổi kích thước và trình kiểm tra sẽ tự động phủ lên màn hình chia nhỏ trên iPad lớn hơn.

SwiftUI đã có một bộ API cấu trúc hiện có.

Trình kiểm tra phù hợp với các API này với các đặc điểm của cả thành phần điều hướng và bản trình bày.

Tương tự như NavigationSplitView và NavigationStack, trình kiểm tra được sử dụng để xây dựng giàn giáo cho cảnh của bạn.

Tương tự như các hộp thoại Sheet, popover, alert và confirmation, inspector là một bài thuyết trình, loại bỏ và trình bày khi cần thiết.

Đã đến lúc học cách áp dụng API kiểm tra mới.

Trước đó, tôi đã giới thiệu ứng dụng mẫu mà tôi đã tạo cho phiên này.

Bạn có thể nhận thấy tôi đang theo dõi mức độ nghi ngờ của từng con vật.

Đó là bởi vì tôi đang cố gắng giải quyết một bí ẩn có cổ phần cao.

Ai đó đang ăn hết trái cây ở Apple Park!

Tôi đã thêm thanh tra vào ứng dụng của mình để tôi, Thanh tra Nick, có thể thu thập thông tin chi tiết của từng con vật.

Tôi sẽ cho bạn thấy việc áp dụng API thanh tra dễ dàng như thế nào và có lẽ tôi có thể giải quyết bí ẩn trái cây này trên đường đi.

Nhanh lên, đến Xcode! Trò chơi là một trái cây!

Bước đầu tiên để thêm thanh tra là sử dụng công cụ sửa đổi mới, thanh tra.

Giống như một số bài thuyết trình khác, điều này cần một ràng buộc được trình bày Bool, và sau đó là nội dung của thanh tra trong trình tạo chế độ xem cuối.

Đối với nội dung thanh tra, tôi có một AnimalInspectorForm đã sẵn sàng.

Tôi có một số phương pháp tùy chỉnh để vượt qua động vật hiện đang được kiểm tra.

Và có thanh tra của tôi, trình bày như một cột cuối ở đây trên macOS.

Tôi đã gieo mầm cho một trải nghiệm thanh tra tuyệt vời.

AnimalForm này đang sử dụng phong cách được nhóm lại.

Trong trường hợp bạn chưa từng gặp phải kiểu biểu mẫu trước đây, chúng được áp dụng như thế này.

Nhưng vì bối cảnh trình kiểm tra sử dụng kiểu được nhóm theo mặc định, tôi không cần phải tự tạo kiểu cho nó.

Tôi thậm chí có thể tương tác với thanh tra trong khung vẽ của bản xem trước.

Ah, điều này nhắc nhở tôi, trong khi các thanh tra viên có thể thu gọn theo mặc định, họ không thể thay đổi kích thước theo mặc định.

Tôi có thể thay đổi điều đó bằng cách sử dụng công cụ sửa đổi chiều rộng cột kiểm tra.

Tôi sẽ sử dụng một số mặc định hợp lý.

200 cho phút, 300 cho lý tưởng, và 400 cho tối đa.

Tham số lý tưởng này sẽ là kích thước của cột ở lần khởi chạy đầu tiên, nhưng nếu người dùng thay đổi kích thước trình kiểm tra, hệ thống sẽ duy trì kích thước đó trong suốt quá trình khởi chạy.

Cuối cùng, tôi sẽ thêm một mục thanh công cụ để chuyển đổi trạng thái được trình bày.

Tôi sẽ sử dụng một nút chuyển đổi thuộc tính được trình bày và cho nhãn của nó, Nhãn, sử dụng hình ảnh hệ thống info.circle.

Mục thanh công cụ sẽ xuất hiện trong phần của thanh công cụ phía trên trình kiểm tra vì nó được khai báo trong trình tạo chế độ xem của trình kiểm tra.

Khi tôi cuộn, thanh công cụ hoạt động chính xác như tôi mong đợi, hiển thị một túi bóng khi có đủ nội dung bên dưới thanh công cụ.

Tôi đã cố tình sử dụng công cụ sửa đổi thanh tra trên AnimalTable, thay vì một số vị trí khác trong hệ thống phân cấp chế độ xem.

Giống như nhiều SwiftUI APIs, công cụ sửa đổi trình kiểm tra có các hành vi khác nhau tùy thuộc vào ngữ cảnh nơi nó được áp dụng.

Cụ thể, vị trí quyết định xem kiểu chiều cao đầy đủ có được sử dụng hay không, nơi không có sự tách biệt giữa thanh công cụ và nội dung, hoặc kiểu dưới thanh công cụ được sử dụng, nơi trình kiểm tra được lồng dưới thanh công cụ.

Lưu ý rằng dấu phân cách tiêu đề kéo dài toàn bộ chiều rộng của cửa sổ trong giao diện bên dưới thanh công cụ.

Tương tự, nội dung thanh công cụ sẽ được đặt trong thanh công cụ của nội dung chính...

Hoặc trong thanh công cụ của thanh tra, tùy thuộc vào nơi công cụ sửa đổi thanh công cụ được sử dụng.

Có hai điểm cần xem xét khi sử dụng trình kiểm tra API.

Đầu tiên, trình kiểm tra sẽ được đặt bên trong hay bên ngoài cấu trúc điều hướng như NavigationStack hay NavigationSplitView?

Thứ hai, nội dung thanh công cụ nên ở bên trong hay bên ngoài trình tạo chế độ xem của thanh tra?

Tôi sẽ đi qua hai trong số những công trình này.

Đầu tiên, đặt trình kiểm tra bên trong cấu trúc điều hướng, với nội dung thanh công cụ bên ngoài trình kiểm tra.

Khi một trình kiểm tra được chứa trong NavigationStack, trình kiểm tra nằm bên dưới thanh công cụ của ngăn xếp điều hướng.

Ở đây, nội dung thanh công cụ được khai báo bên ngoài trình kiểm tra trên nội dung chính và được hiển thị trên thanh công cụ của ngăn xếp điều hướng.

Trong các lớp kích thước ngang nhỏ gọn, trình kiểm tra trình bày dưới dạng một trang tính và mục thanh công cụ nằm trong thanh công cụ của nội dung chính.

Quay lại bảng các khả năng của tôi.

Đối với công trình thứ hai, tôi sẽ xem xét việc đặt trình kiểm tra bên ngoài cấu trúc điều hướng, với nội dung thanh công cụ bên trong trình tạo chế độ xem trình kiểm tra.

Khi công cụ sửa đổi thanh tra được đặt bên ngoài cấu trúc điều hướng, thanh tra được cung cấp toàn bộ chiều cao của cột cuối để bố trí.

Nếu thanh tra có nội dung thanh công cụ, nội dung đó sẽ được đặt trong phần thanh công cụ dành riêng cho thanh tra.

Hai mục thanh công cụ này được định vị với vị trí chính và cuối cùng được căn giữa trong thanh công cụ điều hướng phía trên trình kiểm tra.

Tuy nhiên, lần này, vì nội dung thanh công cụ nằm bên trong trình tạo chế độ xem của trình kiểm tra, khi trình kiểm tra dưới dạng trang tính, nội dung thanh công cụ nằm trong trang tính.

Những nguyên tắc này mở rộng cho macOS, ngoại trừ trình kiểm tra không hiển thị dưới dạng một trang tính trên macOS, và vì vậy bảng trở nên đơn giản hơn.

Trục duy nhất cần lo lắng là bên trong hoặc bên ngoài cấu trúc điều hướng.

Lưu ý cuối cùng, nhưng quan trọng: Nếu bạn đang sử dụng trình kiểm tra trong NavigationSplitView, trình kiểm tra nên được đặt trong trình tạo chế độ xem của cột chi tiết hoặc, giống như trước đây, nó cũng có thể được đặt hoàn toàn bên ngoài cấu trúc điều hướng.

Chà, tất cả những giải quyết bí ẩn này đang khiến tôi đói!

Ồ!

Tôi đang nhận được một Bản tin Nibble trong ứng dụng!

Ứng dụng hiển thị Bản tin Nibble dưới dạng các tờ có thể thay đổi kích thước với một số thông tin về vị trí và thời điểm trái cây được nhấm nháp.

Đây là thời điểm tuyệt vời để tôi nói về các tùy chỉnh bản trình bày SwiftUI được phát hành với iOS 16.4.

Bản tin nhấm nháp trái cây là một tờ giấy, không phải là một thanh tra.

Công cụ sửa đổi bản trình bày cho phép tùy chỉnh sâu các trang tính và các bản trình bày khác như cửa sổ bật lên.

Tôi sẽ thử một vài trong số chúng.

Công cụ sửa đổi nền bản trình bày được đặt tên một cách khéo léo.

Nó sẽ thiết lập nền tảng của một bài thuyết trình.

Không giống như công cụ sửa đổi nền hiện có, công cụ sửa đổi cụ thể của bản trình bày sẽ lấp đầy toàn bộ bản trình bày và cho phép nội dung cơ bản hiển thị.

Vì vậy, nếu tôi sử dụng thinMaterial, tôi sẽ thấy một gợi ý về Danh sách phía sau trang tính.

Tôi muốn cho phép tương tác với nội dung phía sau trang tính, trong trường hợp tôi muốn cuộn danh sách và xem xét các nghi phạm trong khi đọc Bản tin Nibble.

Điều này đơn giản như presentationBackgroundInteraction được kích hoạt.

Chế độ xem mờ đã bị xóa và bây giờ tôi có thể tương tác với nội dung nền.

Loại PresentationBackgroundInteraction cũng có thể có tham số upThrough chấp nhận một detent trình bày.

Miễn là đối số được cung cấp khớp với một trong các biểu tượng của bản trình bày đã cho, SwiftUI sẽ chỉ cung cấp chế độ xem mờ tại các biểu tượng lớn hơn đối số upThrough.

Tôi muốn làm mờ ở bất kỳ lỗ nào trên độ cao 200, vì vậy trước tiên tôi sẽ thêm lỗ chiều cao 200 bằng cách sử dụng công cụ sửa đổi presentationDetents.

Tôi sẽ điều chỉnh trang tính từ mức trung bình hiện tại của nó...

Xuống đến chiều cao tùy chỉnh của tôi là 200.

Khi tôi chỉ cho phép tương tác nền lên đến 200, chế độ xem mờ sẽ trở lại cho các lỗ trung bình và lớn.

Có nhiều tùy chỉnh hơn có sẵn cho bạn để có được giao diện hoàn hảo cho các bài thuyết trình.

Nhiều công cụ sửa đổi này cũng có ảnh hưởng đến các bài thuyết trình khác, không chỉ các trang tính.

Và một điều nữa về công cụ sửa đổi bản trình bày.

Những công cụ sửa đổi tương tự đó sáng tác với Thanh tra khi Thanh tra đang trình bày dưới dạng một trang tính.

Đối với trình kiểm tra của tôi từ trước đó, để vô hiệu hóa tương tác nội dung nền ở mức trung bình, tôi có thể sử dụng cùng một mã chính xác từ trước...

Khai báo một detent chiều cao, và chỉ cho phép tương tác nền thông qua cùng một detent.

Bây giờ thanh tra mờ đi ở mức trung bình và cao hơn.

Và đó là các thanh tra viên ở SwiftUI.

Trong video này, tôi đã giới thiệu API kiểm tra và các sắc thái của việc sử dụng nó.

Tôi đã chọn một số công cụ sửa đổi bản trình bày trang tính yêu thích của mình để chứng minh và chỉ ra cách chúng có thể sáng tác với các thanh tra viên.

Vậy bạn còn chờ gì nữa?

Đi ra ngoài và kiểm tra.

Đặt thanh tra ở đâu đó trong ứng dụng của bạn.

Tiếp tục bằng cách tùy chỉnh các bài thuyết trình của bạn.

Và đối với người nhấm nháp, tôi đoán những nỗ lực của chúng tôi để giải quyết bí ẩn này là không có kết quả.

♪ ♪