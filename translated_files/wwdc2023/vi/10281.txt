10281

♪ ♪

Spencer: Xin chào mọi người.

Tên tôi là Spencer Lewson.

Hôm nay tôi muốn nói với bạn về cách bàn phím đã thay đổi trong vài năm qua và cách bạn có thể thiết kế ứng dụng của mình để "tiếp tục với bàn phím".

Như các bạn đã biết, bàn phím của iPhone ban đầu được giới thiệu vào năm 2007, và nó đã phát triển đáng kể kể từ đó.

Bây giờ nó hỗ trợ nhiều ngôn ngữ khác nhau, mỗi ngôn ngữ có thể có kích thước khác nhau cho bố cục của chúng.

Và tất nhiên, bàn phím cũng có trên nhiều thiết bị khác nhau.

Nhưng cũng giống như cách bàn phím đã phát triển, hệ thống cũng vậy, đã bổ sung các tính năng thú vị như đa nhiệm và bàn phím nổi, cho phép bàn phím vượt qua giới hạn của ứng dụng.

Năm ngoái, chúng tôi đã giới thiệu Trình quản lý giai đoạn, mở ra một cấp độ năng suất hoàn toàn mới trên iPad.

Giờ đây với nhiều cảnh chạy trên nhiều màn hình, việc sử dụng bàn phím và chuột phần cứng giờ đây hấp dẫn hơn bao giờ hết.

Vì vậy, đó là lý do tại sao hôm nay chúng tôi muốn nói với bạn về cách chúng tôi thực hiện nhiều kịch bản bàn phím khác nhau này với kiến trúc lại bàn phím và điều đó có thể ảnh hưởng đến ứng dụng của bạn như thế nào.

Chúng tôi cũng muốn chia sẻ một số mẹo và thủ thuật để thiết kế ứng dụng của bạn hoạt động liền mạch nhất có thể với bàn phím, với ít nỗ lực nhất có thể.

Và cuối cùng, chúng tôi muốn giới thiệu một số khả năng mới thú vị trong thế giới nhập văn bản.

Vì vậy, hãy nói về bàn phím ngoài quy trình mới.

Đưa bàn phím ra khỏi quy trình ứng dụng của bạn cho phép chúng tôi cải thiện bảo mật và đảm bảo quyền riêng tư của những gì người dùng nhập.

Nó cũng giải phóng bộ nhớ trong các ứng dụng của bạn và trên toàn hệ thống, vì hiện chỉ có một bàn phím, thay vì nhiều phiên bản chạy trong nhiều ứng dụng.

Và kiến trúc mới này cho phép chúng tôi thiết kế cho tương lai và triển khai các chức năng mới thú vị.

Vì vậy, hãy nói một chút về cách nó hoạt động.

Trước iOS 17, chế độ xem và logic của bàn phím đã được thực hiện trong quy trình ứng dụng của bạn.

Nhưng mới trên iPhone trên iOS 17, bàn phím đã được chuyển sang quy trình riêng của nó, chạy gần như hoàn toàn bên ngoài ứng dụng của bạn.

Tôi rất vui được chỉ cho bạn cách tất cả những điều này hoạt động, nhưng trước tiên hãy nói về cách nó hoạt động trong quá trình để chúng ta có thể thấy sự khác biệt.

Trong quá trình, ứng dụng của bạn trước tiên sẽ yêu cầu bàn phím, chẳng hạn như bằng cách gọi becomeFirstResponder để đáp ứng với một cú chạm và điều này sẽ khởi động một loạt các phần công việc đồng bộ để khởi tạo tất cả các chế độ xem.

Sau khi hoàn thành, hệ thống sẽ thực hiện các hình ảnh động để hiển thị bàn phím.

Ứng dụng của bạn sau đó sẽ không hoạt động hoặc thực hiện bất kỳ công việc bên ứng dụng nào cho đến khi một sự kiện cảm ứng xuất hiện và tạo chèn văn bản.

Nếu không có quy trình, điều này bây giờ hoạt động hơi khác một chút.

Khi ứng dụng của bạn yêu cầu bàn phím, một lần nữa, chẳng hạn như bằng cách gọi becomeFirstResponder, ứng dụng của bạn sẽ thực hiện một số tính toán ban đầu và sau đó quá trình bàn phím sẽ khởi tạo giao diện người dùng của nó một cách không đồng bộ.

Trong khi điều đó xảy ra, ứng dụng sẽ không hoạt động hoặc thực hiện công việc bên ứng dụng.

Khi nó đã sẵn sàng, nó sẽ hiển thị bàn phím và phối hợp các hình ảnh động giữa hai quy trình.

Bây giờ giao diện người dùng bàn phím đã hoạt động, nó sẽ chờ bất kỳ sự kiện cảm ứng nào xảy ra trong giới hạn của bàn phím và chuyển đổi chúng thành chèn văn bản cho ứng dụng của bạn.

Đối với phần lớn các ứng dụng, những thay đổi này hoàn toàn minh bạch và không yêu cầu bạn chấp nhận.

Mặc dù vậy, các khía cạnh của cách tiếp cận không đồng bộ mới này hiện tồn tại trong toàn bộ bàn phím và có thể tạo ra một số khác biệt nhỏ về thời gian.

Vì vậy, nếu ứng dụng của bạn đặc biệt nhạy cảm với thời gian nhập văn bản, thay đổi lựa chọn hoặc bất kỳ hoạt động liên quan đến văn bản nào khác, bạn nên ghi nhớ kiến trúc mới này.

Vì vậy, bây giờ chúng ta đã nói một chút về sự đa dạng của việc gõ trên iOS, hãy nói về một số kịch bản tương đối mới cần giải thích khi thiết kế ứng dụng của bạn.

Tất nhiên, tất cả chúng ta đều quen thuộc với trường hợp sử dụng phổ biến nhất: một ứng dụng toàn màn hình với bàn phím.

Đây là một trường hợp sử dụng tương đối đơn giản trong đó ứng dụng của bạn và bàn phím đều toàn màn hình, giúp việc điều chỉnh bàn phím đơn giản như di chuyển lên chế độ xem của bạn bằng một giá trị xảy ra là chiều cao của bàn phím.

Tuy nhiên, với Trình quản lý sân khấu, hệ thống đang rời khỏi mô hình đó.

Với đa nhiệm nâng cao, các ứng dụng không nhất thiết phải toàn màn hình.

Điều đó có nghĩa là khi bàn phím xuất hiện, cần phải đặc biệt cẩn thận để điều chỉnh chế độ xem của ứng dụng một cách chính xác.

Đó là bởi vì cảnh của bàn phím và cảnh của ứng dụng không còn xếp hàng nữa.

Và một số chuyển đổi bổ sung cần phải diễn ra để điều chỉnh ứng dụng phù hợp với ngữ cảnh của nó.

Ví dụ, trong trường hợp này, điều chỉnh của ứng dụng không thực sự là Y, chiều cao của bàn phím, nó cần điều chỉnh bằng giao điểm của bàn phím và ứng dụng của bạn, được hiển thị là Y'.

Và bây giờ thậm chí có thể không có một điều chỉnh nào để tính toán, vì bạn có thể có nhiều cảnh trên màn hình, mỗi cảnh có các tính toán và điều chỉnh khác nhau cần thiết.

Ngoài ra còn có một số kịch bản được giới thiệu gần đây với bàn phím phần cứng.

Khi bàn phím phần cứng được gắn vào, hệ thống sẽ hiển thị một thanh công cụ trợ lý ở giữa màn hình.

Khi thanh công cụ kích thước đầy đủ này có mặt, nó hoạt động như một phần của bàn phím, vì vậy chế độ xem của bạn nên được điều chỉnh theo cách của nó.

Sử dụng cử chỉ vuốt, thanh công cụ này cũng có thể được thu nhỏ.

Khi ở bên ngoài Trình quản lý sân khấu, chúng tôi đang duy trì hành vi hiện có trong đó thanh công cụ nhỏ này không hoạt động như một phần của bàn phím và sẽ chồng chéo chế độ xem của bạn.

Người dùng có thể truy cập nội dung bên dưới bằng cách kéo thanh công cụ sang phía bên kia của màn hình.

Tuy nhiên, khi ở trong Trình quản lý sân khấu, thanh công cụ nhỏ hoạt động như một phần của bàn phím và tùy thuộc vào trường hợp sử dụng của bạn, bạn có thể chọn cập nhật độ lệch cuộn và đẩy lên chế độ xem phụ kiện đầu vào và thực hiện bất kỳ điều chỉnh bố cục nào khác theo ý muốn.

Bây giờ, chúng tôi biết rằng có rất nhiều kịch bản và sắc thái cần giải thích ở đây, nhưng tin tốt là với các API phù hợp, hệ thống thực hiện hầu hết công việc cho bạn.

Vậy hãy nói về hướng dẫn bố cục bàn phím.

Bạn có thể quen thuộc với hướng dẫn bố cục bàn phím đã được giới thiệu trong iOS 15.

Nó cung cấp một hướng dẫn bố cục tự động dễ dàng tự động điều chỉnh cho bàn phím và chúng tôi đã thêm vào nó trong năm qua.

Trên thực tế, nó hiện được sử dụng bởi một số ứng dụng phức tạp của Apple, chẳng hạn như Spotlight và Messages.

Đó là cách tiếp cận được đề xuất bởi vì việc áp dụng có thể đơn giản như một dòng để thêm một ràng buộc giữa quan điểm của bạn và hướng dẫn.

Bây giờ hãy nói về chính xác những gì điều này mang lại cho bạn.

Hành vi mặc định hiện tại như sau: hướng dẫn bố cục bàn phím theo bàn phím khi nó ở trên màn hình và được gắn vào đế.

Điều đó có nghĩa là, khi bàn phím chạm vào cuối màn hình.

Nếu bàn phím không được gắn vào đế, chẳng hạn như khi nó nổi trên iPad, chiều cao của hướng dẫn sẽ khớp với khu vực an toàn dưới cùng của chế độ xem.

Cuối cùng, hướng dẫn sẽ theo dõi bất kỳ cử chỉ loại bỏ bàn phím nào khi điểm tiếp xúc giao với hướng dẫn.

Tôi rất vui được nói với bạn rằng chúng tôi đã mở rộng các tùy chọn tùy chỉnh trong iOS 17 để cho phép bạn thay đổi những tùy chọn này để có được hành vi chính xác mà bạn muốn.

Hiện tại có ba thuộc tính trên UIKeyboardLayoutGuide.

Đầu tiên, theo dõi UndockedKeyboard.

Theo mặc định, hướng dẫn sẽ xử lý bàn phím nổi hoặc thanh công cụ mini giống như bàn phím ngoài màn hình.

Tuy nhiên, khi được đặt thành true, hướng dẫn sẽ tiếp tục theo dõi bàn phím ngay cả khi nó đang nổi, miễn là nó ở trên cửa sổ ứng dụng của bạn.

Tiếp theo là sử dụng khu vực an toàn dưới cùng.

Theo mặc định, hướng dẫn bố cục bàn phím sẽ theo dõi chiều cao của khu vực an toàn khi bàn phím bị loại bỏ.

Nhưng khi được đặt thành sai, usesBottomSafeArea thay vào đó sẽ theo dõi phần dưới cùng của chế độ xem, trong trường hợp này là phần dưới cùng của màn hình.

Khi nào điều này có thể hữu ích?

Chà, điều này sẽ cho phép bạn mở rộng nền của mình để che phần dưới cùng của màn hình khi bàn phím bị loại bỏ và cũng có thể điều chỉnh khi bàn phím được đưa lên, hoạt động tương tự như InputAccessoryView.

Và thực ra, đó là một trường hợp sử dụng thực sự thú vị cho tài sản này, vì vậy hãy nói về cách nó có thể hoạt động.

Đây là mã để có được chế độ xem giống như phụ kiện đầu vào đơn giản đó với trường văn bản nằm phía trên khu vực an toàn dưới cùng và phông nền chỉ kéo dài đến cuối chế độ xem khi bàn phím bị loại bỏ.

Lưu ý, chúng tôi sẽ chỉ xử lý các ràng buộc theo chiều dọc ở đây, bởi vì chúng là những ràng buộc thú vị trong trường hợp này.

Đầu tiên, hãy đặt usesBottomSafeArea thành false.

Sau đó, hãy buộc phần trên cùng của trường văn bản lên trên cùng của phông nền, sử dụng khoảng cách hệ thống giữa hai cái, chỉ để tạo cho nó một chút đệm.

Tiếp theo, đảm bảo trường văn bản luôn ở phía trên bàn phím bằng cách giới hạn phần trên cùng của hướng dẫn ở dưới cùng của trường văn bản, với ít nhất khoảng cách hệ thống.

Điều quan trọng ở đây càng lớn.

Khi bàn phím ở ngoài màn hình, trường văn bản sẽ cần đủ tính linh hoạt để ở trên các khu vực an toàn phía dưới.

Chúng ta cũng hãy buộc mỏ neo trên cùng của hướng dẫn vào dưới cùng của phông nền.

Điều này sẽ đảm bảo phông nền đi đến tận cùng khi hướng dẫn ở ngoài màn hình, nhưng chỉ vì chúng tôi đã đặt usesBottomSafeArea thành false.

Cuối cùng, hạn chế vùng an toàn dưới cùng ở dưới cùng của trường văn bản, cộng với khoảng cách hệ thống.

Và một lần nữa, chúng tôi đang sử dụng các ràng buộc lớn hơn ở đây để đảm bảo rằng nó đủ linh hoạt để theo dõi bàn phím khi nó xuất hiện.

Và với điều đó, bạn có một chế độ xem thích ứng có phông nền kéo dài đến cuối chế độ xem, nhưng điều chỉnh để giữ khoảng cách hệ thống trường văn bản phía trên bàn phím và phông nền ở đầu bàn phím, giống như chế độ xem phụ kiện đầu vào có thể.

Thứ ba, chúng tôi có bàn phím DismissPadding.

Điều này điều chỉnh các thông số của cuộn để loại bỏ cử chỉ.

Nếu bạn đã cố gắng tạo chế độ xem giống như InputAccessory trong quá khứ bằng cách sử dụng Hướng dẫn Bố cục Bàn phím, bạn có thể nhận thấy rằng cử chỉ loại bỏ bàn phím không bắt đầu cho đến khi chạm giao với bàn phím.

Hãy sử dụng thuộc tính mới này để sửa nó.

Thuộc tính keyboardDismissPadding cho phép bạn chỉ định phần đệm phía trên bàn phím sẽ phản hồi với cử chỉ loại bỏ bàn phím.

Điều này tương đối đơn giản.

Chỉ cần lấy chiều cao tầm nhìn của bạn theo cách bạn muốn và đặt tài sản.

Xong rồi.

Bây giờ cử chỉ loại bỏ bàn phím bắt đầu khi cảm ứng giao với chế độ xem của bạn.

Tất nhiên, UIKit không phải là khuôn khổ duy nhất mà các ứng dụng được xây dựng.

Ngoài ra còn có SwiftUI.

Và may mắn thay, SwiftUI tự động xử lý các trường hợp phổ biến cho bạn.

Với SwiftUI, bàn phím được bao gồm như một phần của khu vực an toàn, khi bàn phím bị loại bỏ, sẽ theo dõi khả năng chi trả nhà nhỏ ở cuối màn hình.

Khi bàn phím được đưa lên, hệ thống sẽ tạo hiệu ứng động và điều chỉnh vùng an toàn cho bạn, tự động thay đổi kích thước chế độ xem của bạn, vì vậy thực sự không có bất kỳ mã bàn phím nào để viết.

Mặc dù vậy, bạn có thể cần thực hiện một số công việc trên bố cục của mình để đảm bảo rằng chế độ xem của bạn đang thay đổi kích thước hoặc định vị lại theo cách bạn muốn.

Có rất nhiều tài nguyên tuyệt vời về SwiftUI, nhiều hơn những gì tôi có thể liệt kê - vì vậy để tìm hiểu thêm về điều này, hãy xem tài liệu được liên kết bên dưới.

Bây giờ, hãy nói về một cách thủ công hơn để tích hợp bàn phím, thông báo bàn phím.

Trước SwiftUI và hướng dẫn bố cục bàn phím, cách duy nhất để tích hợp bàn phím của bạn vào ứng dụng của bạn là nghe một bộ thông báo bàn phím - willShow, didShow, willHide, didHide - và sau đó điều chỉnh bố cục của bạn theo cách thủ công dựa trên khung và thông tin hoạt ảnh trong thông báo.

Những thứ này vẫn còn xung quanh, nhưng chúng yêu cầu xử lý cẩn thận hơn, vì hệ thống không thực hiện công việc cho bạn.

Và với sự ra đời của Trình quản lý sân khấu, chúng tôi đã nhận thấy sự gia tăng của một mẫu thường được sử dụng cho việc xử lý đó không còn hoạt động 100% thời gian.

Mẫu này thường tập trung vào việc nhận thông báo bàn phím và sử dụng trực tiếp giá trị thô từ chiều cao của bàn phím.

Bây giờ hãy nhớ trước đó khi chúng ta thảo luận về sắc thái chiều cao của bàn phím và vị trí ứng dụng của bạn trên màn hình tương tác như thế nào?

Hãy thảo luận về cách thức hoạt động của nó với các thông báo.

Mỗi thông báo chỉ định khung dự kiến của bàn phím so với tọa độ màn hình.

Nếu không gian tọa độ của màn hình và không gian tọa độ của ứng dụng của bạn khớp, chẳng hạn như khi ứng dụng ở chế độ toàn màn hình, giá trị chiều cao thô có trong thông báo sẽ tình cờ dẫn đến việc chế độ xem của bạn điều chỉnh như mong đợi.

Tuy nhiên, khi không gian tọa độ của màn hình và không gian tọa độ của ứng dụng của bạn khác nhau, giá trị chiều cao thô này sẽ không còn là giá trị chính xác để điều chỉnh chế độ xem của bạn nữa.

Điều này có thể dẫn đến việc quan điểm của bạn bị đẩy quá cao và xuất hiện không đúng chỗ.

May mắn thay, có một vài thay đổi có thể được thực hiện đối với việc xử lý thông báo của bạn để mọi thứ hoạt động trơn tru trở lại.

Trong iOS 16.1, các thông báo trên bàn phím bắt đầu bao gồm UIScreen tương ứng làm đối tượng của thông báo.

Đầu tiên, hãy sử dụng nó để kiểm tra xem bàn phím có xuất hiện trên cùng một màn hình với ứng dụng của chúng tôi hay không, nếu không sẽ không cần điều chỉnh.

Tiếp theo, hãy tính toán một rect để thể hiện vị trí của bàn phím so với chế độ xem của bạn.

Chúng tôi có thể làm điều này bằng cách truy xuất khung cuối dự kiến của bàn phím, không gian tọa độ được cung cấp bởi thông báo và chế độ xem của bạn, sau đó sử dụng chúng để chuyển đổi keyboardFrameEnd thành không gian tọa độ của bạn.

Với rect mới này, chúng tôi có thể xác định độ lệch cần thiết cho chế độ xem của bạn bằng cách tính toán giao điểm của chế độ xem của bạn và KeyboardFrameEnd được chuyển đổi.

Nếu chế độ xem của bạn và bàn phím chồng chéo lên nhau, độ lệch cần thiết bây giờ sẽ là chiều cao của giao điểm giữa chế độ xem của bạn và bàn phím.

Và với điều đó, bạn có thể điều chỉnh các ràng buộc hoặc bố cục của mình theo cách bạn muốn.

Bây giờ, với kiến trúc ngoài quy trình mới, có thể có một số thay đổi nhỏ trong hành vi với các thông báo mà bạn nên biết.

Vì vậy, hãy dành một chút thời gian để nói về điều đó.

Bạn có nhớ sơ đồ này phác thảo vòng đời của quy trình bàn phím không?

Hãy phóng to giai đoạn hoạt hình ở đây được gọi là "mang lại hoạt hình".

Trong kiến trúc Đang xử lý khi ứng dụng của bạn yêu cầu bàn phím, hệ thống sẽ khởi tạo đồng bộ giao diện người dùng bàn phím và sau đó đăng thông báo và thực hiện hoạt ảnh.

Tuy nhiên, trong kiến trúc ngoài quy trình mới, khi ứng dụng của bạn yêu cầu bàn phím, hệ thống sẽ khởi tạo không đồng bộ giao diện người dùng bàn phím và sau đó đăng thông báo không đồng bộ và thực hiện hoạt ảnh.

Điều này giới thiệu một số khác biệt nhỏ về thời gian, vì vậy nếu ứng dụng của bạn dựa vào thời gian của các thông báo như một số loại "gọi lại" từ việc gọi trở thành FirstResponder hoặc có thể thực hiện công việc quan trọng trên luồng chính có thể khiến việc xử lý thông báo bị trì hoãn, bạn nên ghi nhớ mô hình mới này, vì nó

Bây giờ chúng tôi đã xem xét tất cả các mẹo và thủ thuật này để cho phép người dùng nhập vào ứng dụng của bạn dễ dàng nhất có thể, chúng tôi rất vui mừng được giới thiệu một tính năng và API mới giúp việc nhập văn bản nhanh hơn.

Và đó là những dự đoán nội tuyến.

Trong iOS 17, bàn phím tiếng Anh giờ đây sẽ cung cấp dự đoán cho vài từ tiếp theo của bạn ngay trong trường văn bản.

Những dự đoán này được tạo an toàn trên thiết bị và chỉ sử dụng thông tin theo ngữ cảnh được cung cấp trong trường văn bản tập trung.

Áp dụng những dự đoán này cũng thực sự dễ dàng.

Ở đây chúng tôi có giao thức UITextInputTraits và như bạn có thể thấy, một thuộc tính inlinePredictionType mới đã được thêm vào và nó đi kèm với một vài tùy chọn.

Theo mặc định, dự đoán nội tuyến sẽ hoạt động trong hầu hết các trường nhập văn bản, nhưng sẽ tự động bị vô hiệu hóa trong các trường mà dự đoán không phù hợp, chẳng hạn như trường tìm kiếm hoặc trường mật khẩu.

Và tất nhiên, bạn cũng có thể tùy chỉnh hành vi trong ứng dụng của mình bằng cách đặt rõ ràng thuộc tính thành có hoặc không.

Và với điều đó, hãy tóm tắt lại một số điều quan trọng.

Hãy nhớ: Thiết kế ứng dụng của bạn để hoạt động liền mạch với bàn phím, bất kể nó xuất hiện như thế nào.

Hãy ghi nhớ mô hình bàn phím ngoài quy trình mới khi viết mã nhạy cảm với thời gian.

Và cải thiện trải nghiệm ứng dụng của bạn bằng cách áp dụng các API giúp tăng tốc độ nhập văn bản.

Cảm ơn vì đã theo kịp bàn phím.

♪ ♪