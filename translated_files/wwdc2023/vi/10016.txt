10016

♪ ♪

Tu: Xin chào, tên tôi là Tu Nguyen, và tôi là một kỹ sư trong nhóm Tập luyện.

Hôm nay tôi ở đây với đồng nghiệp Abhiraj của tôi, và chúng tôi sẽ hướng dẫn bạn cách xây dựng các bài tập tùy chỉnh cho Apple Watch.

Trong watchOS 9, chúng tôi đã giới thiệu các loại bài tập mới trong ứng dụng Bài tập để người dùng tạo và tùy chỉnh trải nghiệm tập lý tưởng của họ: Các bài tập dựa trên mục tiêu, nơi người dùng có thể thực hiện bài tập với một mục tiêu duy nhất, chẳng hạn như khoảng cách, năng lượng hoặc thời gian.

Các bài tập Pacer tập trung vào tốc độ hoặc tốc độ phía trước và trung tâm.

Các bài tập bơi-xe đạp cho các vận động viên ba môn phối hợp để chuyển đổi liền mạch giữa các hoạt động bơi lội, đạp xe và chạy bộ.

Và các bài tập tùy chỉnh, các bước có cấu trúc với sự kết hợp của các mục tiêu và cảnh báo tùy chỉnh.

Vì vậy, trong iOS 17 và watchOS 10, chúng tôi sẽ đưa tất cả các loại bài tập này vào một khuôn khổ mới có tên là WorkoutKit.

WorkoutKit là một khung Swift hoàn toàn mới.

Nó cho phép bạn tạo và tùy chỉnh tất cả các loại bài tập khác nhau mà người dùng có thể tạo trong ứng dụng Bài tập trong các ứng dụng của riêng bạn.

Nó cũng là cầu nối để giúp bạn đưa những bài tập này vào ứng dụng Workout để người dùng thực hiện.

WorkoutKit cung cấp giao diện người dùng xem trước và khả năng đồng bộ hóa các bài tập theo lịch trình.

Chúng tôi sẽ đưa bốn loại bài tập này lên WorkoutKit và hôm nay chúng tôi sẽ tập trung vào các bài tập tùy chỉnh.

Trong phiên này, chúng ta sẽ xem xét việc xây dựng một bài tập tùy chỉnh, xem trước để xuất và cách lên lịch tập luyện.

Trước tiên hãy bắt tay vào việc xây dựng một bài tập tùy chỉnh.

Các bài tập tùy chỉnh là một cách tuyệt vời để người dùng tập trung tập luyện theo cách có cấu trúc.

Chúng chứa một loạt các bước riêng biệt hướng dẫn người dùng trong suốt quá trình tập luyện của họ.

Khi nhìn vào một bài tập tùy chỉnh, có ba giai đoạn riêng biệt.

Đầu tiên, chúng ta có một bước khi bắt đầu tập luyện.

Đây là bước khởi động.

Tiếp theo, chúng tôi có một bộ sưu tập các khối có thể lặp lại được đặt hàng, chứa sự kết hợp các bước của riêng chúng.

Những khối này đại diện cho phần lớn quá trình tập luyện.

Và cuối cùng, một bước khi kết thúc bài tập mà chúng tôi gọi là bước hồi chiêu.

Bây giờ, cho dù đó là khởi động, hồi chiêu hay bước trong một khối có thể lặp lại, mỗi bước đều chứa hai thuộc tính quan trọng.

Đầu tiên, mỗi bước chứa một mục tiêu duy nhất.

Mục tiêu xác định sự tiến triển của các bước trong một bài tập tùy chỉnh.

Khi một mục tiêu hoàn thành, bài tập tùy chỉnh sẽ chuyển sang bước tiếp theo.

Một bước trong một bài tập tùy chỉnh có thể có mục tiêu thời gian hoặc khoảng cách, nếu có.

Bạn cũng có thể đặt mục tiêu mở, yêu cầu người dùng tiến hành thủ công qua từng bước.

Và thứ hai, mỗi bước có thể chứa một cảnh báo duy nhất.

Cảnh báo thông báo cho người dùng về một số liệu cụ thể cho biết hiệu suất hiện tại của họ.

Ví dụ, người dùng có thể muốn được cảnh báo khi nhịp tim của họ tăng quá một ngưỡng nhất định.

Và chúng tôi đang mang đến sự hỗ trợ cho các cảnh báo tốc độ, nhịp điệu, sức mạnh và nhịp tim.

Bây giờ chúng ta đã biết điều gì tạo nên một bước, chúng ta hãy xem xét kỹ hơn các khối.

Các khối chứa các bước được phân biệt là các bước làm việc hoặc các bước khôi phục.

Các bước trong một khối chứa mục tiêu và cảnh báo riêng của chúng, như bạn đã thấy trước đây và bạn có thể có bất kỳ số bước nào theo bất kỳ thứ tự nào trong khối của mình.

Các khối cũng có thể lặp lại.

Bạn có thể chỉ định số lần lặp mà bạn muốn khối của mình được lặp lại.

Bây giờ hãy xem điều này chuyển thành trải nghiệm tập luyện trên Apple Watch như thế nào.

Đầu tiên, chúng ta thấy rằng bước hiện tại của người dùng là bước làm việc trong khối.

Vì bước này có mục tiêu khoảng cách, chúng tôi thấy tiến trình mục tiêu hiện tại với 0,2 dặm còn lại.

Bước này cũng có một cảnh báo về nguồn điện hiện tại, mà chúng tôi hiển thị ở phía dưới.

Nếu bạn không tình cờ chỉ định cảnh báo cho bước này, chúng tôi sẽ hiển thị nhịp tim hiện tại của người dùng.

Và cuối cùng, chúng tôi cũng đưa ra bản xem trước rằng bước tiếp theo là bước khôi phục với mục tiêu dựa trên thời gian.

Với các bước và khối, bạn có thể xây dựng một bài tập tùy chỉnh hoàn chỉnh.

Một lần nữa, ngay từ đầu, chúng tôi có một bước khởi động, sau đó là một loạt các khối có thể lặp lại chứa các bước làm việc và phục hồi, nơi chúng tôi dành phần lớn thời gian của mình cho việc tập luyện, và cuối cùng, một bước hồi chiêu ở cuối.

Bây giờ tôi sẽ giao nó cho đồng nghiệp Abhiraj của tôi để chỉ cho bạn cách xây dựng bài tập tùy chỉnh của riêng bạn với WorkoutKit.

Abhiraj: Xin chào tôi là Abhiraj. Tôi là một kỹ sư trong nhóm Tập luyện.

Như Tu đã đề cập, với WorkoutKit, bạn có thể tạo các bài tập cho mục tiêu, pacer, bơi-chạy xe đạp và các bài tập tùy chỉnh.

Hãy lấy một ví dụ về bài tập đạp xe ngoài trời tùy chỉnh.

Chúng ta sẽ có bốn bước cho bài tập này: Khởi động, hai khối lặp lại của công việc và phục hồi, và thời gian hồi chiêu để kết thúc bài tập.

Đối với bước khởi động của chúng tôi, chúng tôi sẽ sử dụng một mục tiêu mở.

Đối với khối đầu tiên của chúng tôi, chúng tôi sẽ có một bước làm việc với mục tiêu khoảng cách và cảnh báo tốc độ và một bước phục hồi với mục tiêu khoảng cách và cảnh báo nhịp tim.

Khối này sẽ có bốn lần lặp lại.

Đối với khối thứ hai của chúng tôi, chúng tôi sẽ có một bước làm việc với mục tiêu thời gian và cảnh báo năng lượng và một bước phục hồi với mục tiêu thời gian và cảnh báo nhịp tim.

Cuối cùng, bước hồi chiêu của chúng tôi sẽ có mục tiêu dựa trên thời gian Hãy xem cách chúng tôi có thể biểu diễn điều này trong mã.

Hãy bắt đầu với bước khởi động của chúng ta.

Đầu tiên, chúng tôi nhập WorkoutKit.

Như chúng tôi đã đề cập trước đây, bước khởi động của chúng tôi có một mục tiêu mở mà không có cảnh báo.

Vì vậy, trong trường hợp này, chúng tôi sẽ tạo nó với trình khởi tạo mặc định.

Hãy chuyển sang khối đầu tiên của bài tập này.

Trong khối đầu tiên này, chúng ta sẽ có hai bước.

Bước đầu tiên là một bước làm việc với mục tiêu khoảng cách và cảnh báo tốc độ.

Chúng tôi sẽ cần nhập HealthKit vào đây vì chúng tôi đang tận dụng HKQuantity và HKUnit để đại diện cho các mục tiêu và cảnh báo của chúng tôi.

Bây giờ chúng tôi sẽ thiết lập mục tiêu 2 dặm bằng cách sử dụng WorkoutGoal.

Chúng tôi cũng thêm cảnh báo tốc độ vào bước này, nhắm đến tốc độ 10 dặm một giờ.

Trước tiên hãy tạo HKSố lượng giá trị tốc độ với 10 dặm một giờ.

Chúng tôi sẽ sử dụng WorkoutAlert để tạo cảnh báo này.

Để tạo WorkoutAlert, chúng ta sẽ cần WorkoutAlertTargetType, trong trường hợp này, mục tiêu với 10 dặm một giờ và WorkoutAlertType, trong trường hợp này là tốc độ hiện tại.

Và bây giờ chúng ta có thể tạo ra tốc độ WorkoutAlert của mình.

Bây giờ, để tạo bước làm việc của mình, chúng tôi sẽ sử dụng BlockStep thuộc loại công việc với twoMileGoal và paceAlert.

Bước thứ 2 của khối này là bước khôi phục.

Chúng tôi sẽ tạo ra mục tiêu 1/2 dặm để phục hồi với cảnh báo nhịp tim vùng 1.

Sau đó, chúng ta có thể tạo BlockStep phục hồi của loại nghỉ ngơi.

Bây giờ, chúng ta có thể tạo khối của mình với các bước làm việc và khôi phục mà chúng ta vừa xác định.

Để làm điều này, chúng tôi sử dụng IntervalBlock với một loạt các bước và lần lặp được đặt thành 4.

Và với điều đó, khối đầu tiên của chúng tôi đã hoàn thành.

Bây giờ hãy chuyển sang khối thứ hai của chúng ta.

Trong khối này, chúng tôi cũng có hai bước.

Bước đầu tiên là một bước làm việc với mục tiêu thời gian và cảnh báo năng lượng.

Chúng tôi đã thiết lập một mục tiêu trong hai phút.

Đối với khối công việc này, hãy tạo cảnh báo phạm vi công suất với phạm vi từ 250 đến 275 watt.

Chúng tôi tạo ra phạm vi loại WorkoutTargetType của mình và tạo WorkoutAlert.

Cuối cùng, tạo BlockStep bằng cách sử dụng mục tiêu và cảnh báo mà chúng tôi vừa tạo.

Bước thứ hai của khối này là bước khôi phục.

Chúng tôi tạo ra mục tiêu 30 giây với cảnh báo nhịp tim vùng 1.

Sau đó chúng ta có thể tạo ra bước phục hồi của mình.

Bây giờ chúng ta có thể tạo khối thứ hai của mình với các bước làm việc và khôi phục mà chúng ta vừa xác định với các lần lặp được đặt thành 2.

Cuối cùng, hãy chuyển sang bước hồi chiêu của chúng ta.

Chúng tôi muốn bước hồi chiêu của mình có mục tiêu dựa trên thời gian, vì vậy hãy tạo ra điều đó ở đây.

Chúng tôi tạo WorkoutGoal theo loại thời gian và sử dụng nó để tạo CooldownStep với mục tiêu được đặt thành fiveMinuteGoal.

Bây giờ chúng ta hãy kết hợp tất cả lại với nhau.

Sử dụng mọi thứ chúng tôi đã xây dựng cho đến nay, bước khởi động, khối 1, khối 2 và bước hồi chiêu, chúng tôi có thể tạo bố cục tập luyện tùy chỉnh của mình.

Chúng tôi đặt loại hoạt động thành đạp xe và vị trí ở ngoài trời.

Tham số LocationType của trình khởi tạo của CustomWorkoutComposition là tùy chọn và theo mặc định, nó được đặt thành ngoài trời.

Hãy kết hợp tất cả những điều này và tạo ra bài tập tùy chỉnh của chúng tôi có tên là "Bài tập của tôi".

Bạn cũng có thể tự hỏi tại sao trình khởi tạo CustomWorkoutComposition lại được bắt đầu bằng một lần thử.

Đó là bởi vì chúng tôi đang xác nhận thành phần.

Hãy thảo luận về tầm quan trọng của việc xác nhận các thành phần tập luyện.

Xác nhận đảm bảo cấu trúc tập luyện mạch lạc và ngăn ngừa bất kỳ vấn đề nào trong thời gian chạy tập luyện.

Ví dụ, các mục tiêu khoảng cách không nên được sử dụng cho các tác phẩm tập luyện không dựa trên khoảng cách.

Tương tự, cảnh báo tốc độ không nên được áp dụng cho các bài tập không hỗ trợ tốc độ, chẳng hạn như hình elip.

Để giải quyết vấn đề này, chúng tôi có một loạt các xác thực được thực hiện khi các thuộc tính nhất định được đặt, ví dụ: loại hoạt động tập luyện hoặc khi chạy qua API nhất định.

Chúng tôi cũng đã tạo ra trình bao bọc WorkoutComposition để thực hiện các thao tác bổ sung.

Ví dụ, chúng tôi cũng đã tạo API để nhập và xuất thành phần tập luyện sang một tệp có thể được chia sẻ trên các thiết bị.

Sử dụng dataRepresentation để xuất trong JSON hoặc nhị phân.

Chúng tôi khuyên bạn nên xuất các tác phẩm của mình ở định dạng nhị phân cho kích thước nhỏ hơn nhiều.

Và bây giờ tôi sẽ giao lại nó cho Tu để nói về cách bạn có thể xem trước các tác phẩm.

Tu: Cảm ơn rất nhiều, Abhiraj.

Thật tuyệt khi thấy cách chúng ta có thể tận dụng các API này để xây dựng các bài tập hoàn toàn tùy chỉnh.

Bây giờ chúng ta hãy xem chúng ta có thể làm gì khi chúng ta có các thành phần tập luyện.

Với thành phần tập luyện, có một vài điều khác nhau bạn có thể làm với chúng trong WorkoutKit.

Đầu tiên, như Abhiraj đã đề cập trước đó, bạn có thể xuất bố cục sang tệp có phần mở rộng .workout để chia sẻ và phân phối.

Hãy nhớ rằng việc xác thực tự động xảy ra khi gọi một số API nhất định và xuất một thành phần là một ví dụ như vậy.

Chúng tôi cũng có API để bạn trình bày bản xem trước nội dung sáng tác của bạn cho người dùng.

Bây giờ, điều này có hành vi khác nhau trên iOS và watchOS.

Trên iOS, khi bạn gọi API xem trước trên bố cục của mình, giao diện người dùng ngoài quy trình sẽ được hiển thị trên ứng dụng của bạn và hiển thị toàn bộ nội dung thành phần tập luyện của bạn.

Trong ví dụ này, chúng tôi có một bố cục tập luyện tùy chỉnh.

Tiêu đề được hiển thị nổi bật ở trên cùng, danh sách các bước và khối, bao gồm các mục tiêu và cảnh báo, và một tùy chọn để người dùng lưu bài tập trực tiếp vào ứng dụng Bài tập trên Apple Watch của họ.

Bây giờ, nếu chúng ta chuyển sang watchOS, việc gọi API xem trước sẽ khởi chạy ứng dụng Workout với nội dung của thành phần tập luyện.

Từ đây, người dùng có thể bắt đầu tập luyện ngay lập tức hoặc lưu nó để dùng sau.

Một lần nữa, tôi sẽ giao nó cho Abhiraj để chỉ cho bạn các tùy chọn xem trước này với WorkoutKit.

Abhiraj: Bây giờ chúng ta đã có một buổi tập luyện tuyệt vời, hãy để người dùng lưu nó lại.

Như chúng ta đã thảo luận trước đó, chúng ta có thể sử dụng WorkoutComposition để thực hiện các thao tác bổ sung trong quá trình tập luyện, chẳng hạn như xác nhận.

Với WorkoutComposition, chúng tôi có thể trình bày bản xem trước cho người dùng.

API xem trước được tối ưu hóa cho iOS và watchOS để cung cấp một cách thuận tiện cho người dùng xem trước, lưu hoặc bắt đầu tập luyện.

Vì vậy, hãy thực hiện bài tập đạp xe mà chúng tôi đã tạo trước đó và gói nó trong một WorkoutComposition.

Bạn có thể sử dụng bất kỳ loại bài tập nào mà Tu đã đề cập trước đó với WorkoutComposition.

Bây giờ hãy trình bày bản xem trước bằng cách sử dụng chức năng presentPreview trên workoutComposition.

Chúng tôi sử dụng khối tác vụ ở đây vì API này được thiết kế để hoạt động với các tính năng đồng thời hiện đại của Swift.

Như đã đề cập trước đó, presentPreview sẽ hiển thị bản xem trước tập luyện khác nhau tùy thuộc vào nền tảng mà nó đang chạy.

Hãy xem cái này hoạt động như thế nào.

Trên iOS, chức năng hiển bày chế độ xem từ xa trên ứng dụng của bạn.

Nó hiển thị bài tập và một tùy chọn để người dùng lưu trực tiếp vào ứng dụng Bài tập trên Apple Watch.

Nút "Thêm vào Xem" sẽ cập nhật ứng dụng Tập luyện với bài tập mới.

Chức năng xem trước hoạt động khác nhau trên Apple Watch.

Thay vì trình bày một trang tính trên ứng dụng của bạn, việc gọi chức năng xem trước trên watchOS sẽ khởi chạy ứng dụng Workout với bản xem trước của bài tập.

Và bây giờ tôi sẽ đưa nó lại cho Tu để nói về việc lên lịch tập luyện.

Tu: Cảm ơn, Abhiraj.

Những tùy chọn xem trước đó thực sự hữu ích để có được một bố cục tập luyện duy nhất trước mặt người dùng để tương tác nhanh chóng.

Nhưng điều gì sẽ xảy ra nếu bạn có một bộ sưu tập các bài tập để người dùng thực hiện trong một khoảng thời gian?

Ví dụ: giả sử bạn có một số chuyến đi xe đạp được lên lịch cho người dùng của mình hôm nay và cuối tuần, đi bộ đường dài, một vài ngày sau đó, chơi gôn, có thể nghỉ ngơi theo lịch trình, trước khi đạp xe thêm.

Bạn có thể sử dụng API bố cục và xem trước để lưu các bài tập trực tiếp vào ứng dụng Bài tập, nhưng bây giờ người dùng có trách nhiệm quản lý tất cả các bài tập này và ghi nhớ khi nào họ cần hoàn thành chúng.

Nó không có khả năng mở rộng lắm.

Để đơn giản hóa toàn bộ quá trình này, như một phần của WorkoutKit, ứng dụng của bạn có thể lên lịch tập luyện trực tiếp vào ứng dụng Workout.

Hãy xem nó trông như thế nào.

Khi bạn lên lịch tập luyện, ứng dụng của bạn sẽ có một không gian dành riêng ở đầu ứng dụng Tập luyện.

Không gian chuyên dụng này sẽ được tạo kiểu với biểu tượng và tên ứng dụng của bạn và bản xem trước của bài tập tiếp theo trong ngày.

Nhấn vào đây sẽ ngay lập tức bắt đầu bài tập đã lên lịch được hiển thị.

Nhấn vào dấu chấm lửng sẽ hiển thị thêm chi tiết, bao gồm các bài tập theo lịch trình sắp tới mà bạn đã đồng bộ hóa.

Lên lịch tập luyện yêu cầu sự cho phép của người dùng và việc đồng bộ hóa được xử lý cục bộ.

Người dùng có thể xem các bài tập được lên lịch trong bảy ngày tới và bảy ngày trước đó.

Bạn có thể đồng bộ hóa tối đa 15 bài tập cùng một lúc và bạn có thể truy vấn các bài tập theo lịch trình mà người dùng đã hoàn thành từ ứng dụng của bạn.

Khi truy vấn các bài tập theo lịch trình, chúng chỉ chứa thành phần bạn đã tạo, ngày đã lên lịch và liệu bài tập có được người dùng hoàn thành hay không.

Chúng không chứa bất kỳ dữ liệu sức khỏe nào.

Vì vậy, nếu bạn muốn thống kê sức khỏe thực tế từ một bài tập đã hoàn thành, hãy tham khảo HealthKit APIs.

Và là một phần của WorkoutKit, chúng tôi đang cung cấp một tiện ích mở rộng trên HKWorkout để truy xuất một thành phần tập luyện, nếu nó có sẵn.

Bây giờ tôi sẽ giao nó cho Abhiraj để chỉ cho bạn cách lên lịch tập luyện bằng WorkoutKit.

Abhiraj: Cảm ơn, Tu.

Đối với các ứng dụng lên lịch tập luyện cho người dùng, chúng tôi đang cung cấp một bộ API để hỗ trợ đồng bộ hóa các tác phẩm tập luyện với Apple Watch để sử dụng trong ứng dụng Tập luyện.

Hãy thực sự xây dựng một ứng dụng tận dụng lợi thế của WorkoutKit APIs.

Chúng ta sẽ cần liên kết các ngày đã lên lịch với các tác phẩm tập luyện, và sau đó đồng bộ hóa chúng.

Để tôi chỉ cho bạn cách làm điều đó.

Tôi đã bắt đầu xây dựng một ứng dụng có trình giữ chỗ để tương tác với WorkoutKit APIs.

Hãy xem làm thế nào tôi có thể tận dụng WorkoutKit để làm cho chức năng này.

Trước khi chúng ta có thể bắt đầu đồng bộ hóa các bài tập với ứng dụng Bài tập, chúng ta cần xin phép người dùng.

Bạn có thể gọi authorizationState trên WorkoutPlan để kiểm tra các quyền hiện tại của ứng dụng.

Vì chúng tôi chưa yêu cầu quyền, chúng tôi có thể yêu cầu ủy quyền từ người dùng bằng cách gọi requestAuthorization trên WorkoutPlan.

Tôi sẽ nhấn vào nút "Yêu cầu ủy quyền".

Khi gọi requestAuthorization(), người dùng được nhắc với một cảnh báo để chọn đồng bộ hóa.

Người dùng cũng có thể thay đổi cài đặt này trong cài đặt Bài tập từ ứng dụng Xem trên iOS và ứng dụng Cài đặt trên watchOS.

Bây giờ chúng tôi đã ủy quyền cho ứng dụng của mình, chúng tôi sẽ nhận được kế hoạch tập luyện hiện tại của mình từ ứng dụng Tập luyện trên Apple Watch.

Bạn có thể truy vấn WorkoutPlan bằng cách sử dụng WorkoutPlan.current.

WorkoutPlan là giao diện của chúng tôi để lưu trữ và sửa đổi các bài tập theo lịch trình từ ứng dụng của chúng tôi.

Tôi sẽ nhấn vào nút "Nhận kế hoạch tập luyện".

Vì chúng tôi chưa lên lịch cho bất kỳ bài tập nào, kế hoạch chưa có bài tập theo lịch trình.

Tiếp theo, hãy tạo và lên lịch một số bài tập.

Tôi đang nghĩ rằng tôi muốn đi chơi gôn hôm nay và đạp xe vào cuối tuần này.

Vì vậy, hãy tạo lịch trình đó với một số sáng tác tập luyện mới.

Đối tượng ScheduledWorkoutComposition chứa thành phần tập luyện, ngày đã lên lịch và trạng thái hoàn thành.

Tôi đã chỉ định hôm nay cho lịch chơi gôn Ngày và lịch đạp xe Ngày cho ngày mốt.

Hãy xem nó trông như thế nào trong ứng dụng của tôi.

Như bạn có thể thấy, tôi có một buổi tập golf được lên kế hoạch cho ngày hôm nay và một buổi tập đạp xe sắp diễn ra trong vài ngày tới.

Bây giờ chúng ta đã tạo lịch trình của mình, hãy đồng bộ hóa nó với ứng dụng Workout.

Sử dụng kế hoạch tập luyện hiện tại, chúng tôi sẽ thêm các bài tập theo lịch trình mới này vào mảng scheduledCompositions.

Cuối cùng, để thêm các bài tập này vào ứng dụng Workout, chúng tôi gọi workoutPlan.save().

Hãy xem điều này hoạt động như thế nào.

Tuyệt vời. Bây giờ những bài tập này đã được đồng bộ hóa.

Như Tu đã đề cập, khi bạn lên lịch tập luyện, ứng dụng của bạn sẽ có một không gian dành riêng ở đầu ứng dụng Tập luyện.

Hãy cùng tìm hiểu xem nó trông như thế nào.

Hãy mở ứng dụng Workout.

Như bạn có thể thấy, biểu tượng và tên ứng dụng của tôi đã có mặt.

Vì tôi đã lên lịch tập luyện chơi gôn hôm nay, nhấn vào đây sẽ bắt đầu tập luyện.

Tôi có thể nhấn vào dấu chấm lửng để xem lịch trình sắp tới của mình.

Trên màn hình đầu tiên, tôi thấy tất cả các bài tập của mình được lên lịch cho ngày hôm nay.

Nếu tôi nhấn vào "Xem thêm", tôi sẽ có thể xem các bài tập được lên lịch trong bảy ngày tới và bảy ngày trước đó.

Ở đây tôi thấy cả bài tập chơi gôn hôm nay và bài tập đạp xe sắp tới của tôi mà tôi đã đồng bộ hóa trước đó.

Bây giờ bạn đã hiểu cách trình bày các bài tập theo lịch trình và cách ứng dụng của bạn có thể có một không gian dành riêng bên trong ứng dụng Workout.

Như bạn đã biết, tôi đã lên kế hoạch cho một vòng chơi gôn hôm nay.

Thời gian phát bóng của tôi sắp đến.

Vì vậy nếu bạn không phiền, tôi sẽ quay lại ngay.

Tôi đã trở lại.

Tôi đã có một vòng chơi gôn tuyệt vời và bắn 72 vào chín phía sau.

Khi người dùng hoàn thành bài tập theo lịch trình trong ứng dụng Bài tập, trạng thái hoàn thành sẽ được cập nhật.

Bạn có thể truy vấn WorkoutPlan bằng cách sử dụng WorkoutPlan.current để xác định bài tập nào đã được hoàn thành.

Nếu một bài tập được đánh dấu là đã hoàn thành trong ứng dụng của bạn, bạn nên cập nhật trạng thái hoàn thành để đảm bảo người dùng có thông tin mới nhất ở mọi nơi.

Hãy quay lại mã của chúng tôi.

Trong ứng dụng mẫu của chúng tôi, chúng tôi có thể kiểm tra xem scheduledComposition đã hoàn thành chưa.

Nếu có, chúng tôi đang đánh dấu nó là hoàn chỉnh.

Hãy xem điều này đang hoạt động.

Đó là một phương pháp tuyệt vời để giữ cho ứng dụng của bạn đồng bộ với ứng dụng Workout.

Bây giờ bạn đã có hiểu biết cơ bản về cách triển khai API lịch trình Tập luyện, từ yêu cầu ủy quyền đến đồng bộ hóa các tác phẩm với ứng dụng Tập luyện.

Với điều đó, tôi sẽ trả lại nó cho Tu.

Tu: Cảm ơn, Abhiraj, và rất vui khi thấy bạn cải thiện trò chơi gôn của mình.

Vì vậy, hãy kết thúc với một số phương pháp hay nhất cần ghi nhớ khi bạn áp dụng WorkoutKit trong ứng dụng của mình.

Xem xét loại bố cục nào phù hợp nhất với trải nghiệm tập luyện mà bạn muốn hiển thị cho người dùng.

Chúng tôi thấy rằng các bài tập tùy chỉnh là một loại sáng tác rất hữu ích, đặc biệt là khi một bài tập đòi hỏi các mức độ nỗ lực và sự chú ý khác nhau với các mục tiêu và cảnh báo tùy chỉnh.

Tuy nhiên, bơi lội không được hỗ trợ với các bài tập tùy chỉnh.

Thay vào đó, bạn sẽ cần sử dụng bố cục mục tiêu.

Ngoài ra, các cảnh báo chỉ có sẵn với các bài tập tùy chỉnh.

Nếu bạn không cần chỉ định cảnh báo của riêng mình cho một cái gì đó đơn giản như chạy 30 phút, hãy cân nhắc sử dụng mục tiêu hoặc bố cục pacer thay thế.

Hãy chắc chắn xử lý việc xác nhận các thành phần tập luyện của bạn.

Chúng tôi cung cấp các lỗi xác thực rất chi tiết để giúp bạn xác định chính xác nguồn gốc của bất kỳ lỗi hoặc không tương thích nào.

Xin nhắc lại, không phải tất cả các loại hoạt động đều hỗ trợ khoảng cách.

Thay vào đó, hãy cân nhắc sử dụng thời gian hoặc mục tiêu mở.

Và không phải tất cả các loại hoạt động sẽ hỗ trợ một số cảnh báo nhất định trong một bài tập tùy chỉnh.

Hãy xem xét một giải pháp thay thế, chẳng hạn như cảnh báo vùng nhịp tim.

Luôn cập nhật các bài tập theo lịch trình của bạn.

Tận dụng bất kỳ thời gian chạy tiền cảnh hoặc nền tảng nào mà ứng dụng của bạn có thể phải làm như vậy.

Và cuối cùng, vui lòng gửi cho chúng tôi phản hồi của bạn.

Dùng thử API.

Tất cả mã mẫu bạn thấy hôm nay đều có sẵn trên developer.apple.com.

Ngoài ra, đừng quên kiểm tra phiên HealthKit về các buổi tập luyện đồng bộ hóa.

Cảm ơn vì đã xem.

♪ ♪