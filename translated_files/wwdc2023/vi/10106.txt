10106

♪ ♪

Nikolas: Xin chào và chào mừng đến với "Hỗ trợ camera ngoài trong ứng dụng iPadOS của bạn."

Tôi là Nikolas Gelo từ nhóm Phần mềm Máy ảnh, và phiên này về cách ứng dụng iPad của bạn có thể bắt đầu sử dụng máy ảnh bên ngoài.

Bộ tính năng mạnh mẽ của Stage Manager bao gồm khả năng mở rộng màn hình iPad của bạn trên nhiều màn hình.

Và với iPadOS 17, ứng dụng của bạn có thể bắt đầu sử dụng các camera bên ngoài như camera trong Apple Studio Display.

Trên iPad Pro này, FaceTime đang mở và nó đang sử dụng camera trong màn hình mà nó được kết nối.

Điều này thật tuyệt vì bây giờ những người ở phía bên kia của cuộc gọi có góc nhìn tốt hơn về tôi khi tôi chạy ứng dụng trên Màn hình Apple Studio lớn này.

Tôi cũng có thể sử dụng Center Stage với nó, điều này giúp giữ tôi trong khung hình khi tôi di chuyển xung quanh.

FaceTime, Code Scanner và WebKit sử dụng camera bên ngoài và chúng là những ví dụ tuyệt vời về những gì ứng dụng của bạn có thể làm.

Khi sử dụng màn hình không có camera tích hợp, như Apple Pro Display XDR, mọi người thường đặt camera USB lên trên nó.

Nếu máy ảnh USB được kết nối với màn hình, thì khi màn hình được cắm vào iPad, máy ảnh cũng sẽ có sẵn cho ứng dụng của bạn.

Ứng dụng iPad của bạn có thể sử dụng máy ảnh và webcam bên ngoài để chụp ảnh và quay phim.

Chúng cũng hỗ trợ các tính năng máy ảnh hệ thống khác, như hiệu ứng video Portrait Blur và Studio Light có sẵn từ Trung tâm điều khiển.

iPad với đầu nối USB-C hỗ trợ camera ngoài.

Ứng dụng của bạn có thể sử dụng các thiết bị phù hợp với thông số kỹ thuật của Lớp Video USB hoặc UVC.

Nó xác định một tiêu chuẩn cho các thiết bị USB để hỗ trợ phát trực tuyến video.

Và có rất nhiều máy ảnh phổ biến mà ứng dụng của bạn có thể sử dụng.

Một số camera ngoài có micrô tích hợp, cũng có sẵn cho ứng dụng của bạn.

Một số nhà sản xuất chế tạo các thiết bị không phải máy ảnh phù hợp với thông số kỹ thuật UVC, như bộ chuyển đổi HDMI thay đổi giữa nhiều đầu vào để xuất ra một luồng video duy nhất.

iPadOS cho phép ứng dụng của bạn sử dụng các thiết bị như thế này.

Hỗ trợ camera ngoài là một cải tiến tuyệt vời cho hệ sinh thái đa phương tiện của iPad.

Tôi sẽ chỉ ra cách ứng dụng của bạn có thể sử dụng chúng bằng cách bắt đầu với việc khám phá và sử dụng.

Tiếp theo, tôi sẽ khoanh tròn lại và làm sáng tỏ vòng quay video.

Sau đó, tôi sẽ đề cập đến cách ứng dụng của bạn có thể sử dụng micrô đi kèm với máy ảnh bên ngoài.

Và cuối cùng, tôi sẽ thảo luận về các phương pháp hay nhất cho ứng dụng của bạn.

Đầu tiên, tôi sẽ thảo luận về cách ứng dụng iPad của bạn có thể bắt đầu sử dụng camera ngoài.

Các ứng dụng iPad sử dụng máy ảnh cho nhiều tính năng, như chụp ảnh, quay phim hoặc gửi khung máy ảnh qua mạng để gọi video.

Khung AVFoundation cho phép ứng dụng của bạn sử dụng các camera tích hợp và bên ngoài, đặc biệt, với các lớp tiền tố AVCapture của nó.

Hãy xem lại cách một ứng dụng có thể sử dụng máy ảnh.

Đầu tiên, một ứng dụng sử dụng AVCaptureDevices, đại diện cho máy ảnh và micrô.

Sau đó, chúng được bọc trong AVCaptureDeviceInputs, cho phép chúng được cắm vào AVCaptureSession.

AVCaptureSession là đối tượng điều khiển trung tâm của biểu đồ AVCapture.

AVCaptureOutputs hiển thị dữ liệu từ đầu vào theo nhiều cách khác nhau.

MovieFileOutput ghi lại các bộ phim QuickTime.

PhotoOutput chụp ảnh tĩnh chất lượng cao và Ảnh trực tiếp.

Đầu ra dữ liệu, chẳng hạn như VideoDataOutput hoặc AudioDataOutput, cung cấp bộ đệm video hoặc âm thanh từ máy ảnh hoặc micrô đến ứng dụng của bạn.

Và có những loại đầu ra dữ liệu khác, chẳng hạn như Siêu dữ liệu và Độ sâu.

Để xem trước camera trực tiếp, có một loại đầu ra đặc biệt, AVCaptureVideoPreviewLayer, là một lớp con của CALayer.

Dữ liệu chảy từ đầu vào chụp đến đầu ra tương thích thông qua AVCaptureConnections.

Các lớp học này có sẵn trên iOS, macOS và tvOS.

Nếu bạn chưa quen với AVCapture, tôi mời bạn tìm hiểu thêm tại trang bắt đầu Thiết lập Capture trên developer.apple.com.

Mới trong iPadOS 17, ứng dụng của bạn có thể truy cập các camera bên ngoài với AVCapture.

Nếu ứng dụng của bạn đã sử dụng máy ảnh tích hợp, bạn có thể thực hiện các bản cập nhật đơn giản để bắt đầu sử dụng các bản cập nhật bên ngoài.

Khám phá chúng thật dễ dàng.

Mỗi camera bên ngoài được đại diện bởi một phiên bản AVCaptureDevice.

Và bạn có thể tìm thấy chúng với API hiện có từ AVCaptureDevice và AVCaptureDeviceDiscoverySession.

Có ba thuộc tính chính của AVCaptureDevice: Loại phương tiện, loại thiết bị và vị trí của nó.

Các camera bên ngoài cung cấp dữ liệu phương tiện video giống như các camera tích hợp.

Và loại thiết bị của họ là bên ngoài.

Đối với các nhà phát triển ứng dụng macOS, những người quen thuộc với việc sử dụng máy ảnh bên ngoài, điều này phản đối loại thiết bị không xác định bên ngoài.

Bởi vì các camera bên ngoài có thể di chuyển độc lập với iPad, vị trí thiết bị của chúng không được chỉ định.

Ba thuộc tính này có thể được sử dụng để tìm các camera bên ngoài với AVCapture API.

Thật dễ dàng để bắt đầu sử dụng camera ngoài trong ứng dụng của bạn.

Trong phiên này, tôi sẽ sửa đổi ứng dụng máy ảnh mẫu phổ biến, AVCam, để phát trực tuyến từ máy ảnh bên ngoài trong Màn hình Apple Studio.

Bạn có thể tải xuống phiên bản AVCam đã hoàn thành với tất cả các thay đổi tôi thực hiện trong phiên này từ developer.apple.com.

Hiện tại, ứng dụng sử dụng camera tích hợp và nó cho phép người dùng chuyển đổi giữa camera trước và camera sau khi nhấn nút.

Khi AVCam ra mắt, nó bắt đầu với một camera phía sau.

Tôi sẽ thay đổi mã để ứng dụng thích tìm kiếm camera ngoài hơn là camera tích hợp.

Với iPad được kết nối với Apple Studio Display, tôi sẽ chạy ứng dụng và khi nó khởi chạy, nó sẽ sử dụng camera ngoài.

Điều này thật tuyệt.

AVCam hiện đang sử dụng camera ngoài và tất cả những gì nó cần là một vài dòng mã.

AVCaptureVideoPreviewLayer phản chiếu các camera bên ngoài theo mặc định, phù hợp để sử dụng camera trong Apple Studio Display.

Bạn có thể vô hiệu hóa hành vi này nếu bạn thích.

Tôi sẽ mô tả cách thực hiện điều này trong phần thực hành tốt nhất vào cuối phiên này.

Bây giờ tôi sẽ chuyển ứng dụng sang màn hình của iPad.

Và chỉ để cho vui, tôi sẽ rút phích cắm của camera ngoài.

Uh-oh, bản xem trước máy ảnh của ứng dụng đã bị đóng băng và hiện tại nó không sử dụng bất kỳ máy ảnh nào.

AVCam sẽ cần nhiều thay đổi hơn để xử lý các sự kiện kết nối và ngắt kết nối của các camera bên ngoài.

Camera ngoài yêu cầu sự chăm sóc đặc biệt bởi vì, không giống như camera tích hợp, người dùng có thể kết nối và ngắt kết nối chúng khỏi iPad bất cứ lúc nào.

Ứng dụng của bạn có thể theo dõi các sự kiện này để biết khi nào máy ảnh có sẵn hoặc không thể sử dụng được nữa.

Nếu cùng một thiết bị vật lý được kết nối lại, nó sẽ được biểu diễn bằng cách sử dụng một phiên bản mới của AVCaptureDevice.

Có API hiện có mà ứng dụng của bạn có thể sử dụng để lắng nghe các sự kiện kết nối và ngắt kết nối.

Bạn có thể quan sát giá trị khóa thuộc tính isConnected trên AVCaptureDevice hoặc thuộc tính thiết bị trên AVCaptureDeviceDiscoverySession cập nhật khi máy ảnh đến và đi.

AVCaptureDevices cũng đăng thông báo khi trạng thái kết nối của chúng thay đổi và ứng dụng của bạn có thể quan sát chúng để theo dõi tính khả dụng của máy ảnh.

Hệ thống gọi mã quan sát giá trị chính và đăng thông báo trên hàng đợi nền.

Vì vậy, hãy đảm bảo đồng bộ hóa việc xử lý của bạn với hàng đợi AVCaptureSession và chuỗi chính.

Quay trở lại AVCam, tôi sẽ thêm một số mã để nghe các sự kiện kết nối và ngắt kết nối của camera ngoài.

Sau khi ứng dụng tìm kiếm thiết bị mặc định, nó sẽ quan sát khi máy ảnh bị ngắt kết nối.

Và khi điều đó xảy ra, AVCam sẽ chuyển sang máy ảnh tích hợp.

Bây giờ khi ứng dụng khởi chạy, nó vẫn sử dụng camera bên ngoài.

Và khi nó ngắt kết nối, ứng dụng sẽ chuyển sang máy ảnh tích hợp.

Nhưng khi camera ngoài được kết nối lại, AVCam sẽ không chuyển sang nó.

AVCam nên xử lý các camera bên ngoài được kết nối như thế nào trong khi nó đang chạy?

Nó có nên chuyển sang nó sau khi tôi cắm nó vào không?

Một khía cạnh khó khăn của việc áp dụng camera ngoài trong ứng dụng iPad của bạn là xử lý các sự kiện kết nối và ngắt kết nối.

Để làm điều này dễ dàng hơn, iPadOS đang giới thiệu API để lựa chọn máy ảnh tự động.

API cho phép ứng dụng của bạn tích hợp với hệ điều hành để sử dụng máy ảnh tốt nhất hiện có.

Đó là một cách khác để ứng dụng của bạn thay đổi máy ảnh.

macOS Ventura đã giới thiệu API để lựa chọn máy ảnh tự động để hỗ trợ Máy ảnh liên tục.

Các hành vi tôi mô tả trong phiên này dành riêng cho iOS.

Để biết thêm thông tin về cách sử dụng API này cho Mac, hãy xem phiên trước của chúng tôi "Mang máy ảnh liên tục đến ứng dụng macOS của bạn" từ năm 2022 và phần "Xây dựng trải nghiệm kỳ diệu".

Lựa chọn máy ảnh tự động hoạt động bằng cách sử dụng hai thuộc tính lớp mới được giới thiệu cho AVCaptureDevice trên iOS: userPreferredCamera và systemPreferredCamera.

Cả hai thuộc tính này đều có thể quan sát được giá trị khóa.

userPreferredCamera là một thuộc tính đọc/ghi cho biết sự lựa chọn của người dùng về những gì máy ảnh nên được sử dụng.

Nó nên được đặt bất cứ khi nào người dùng chọn máy ảnh trong ứng dụng của bạn.

Làm như vậy cho phép hệ thống tìm hiểu sở thích của người dùng.

systemPreferredCamera là một thuộc tính chỉ đọc chỉ định máy ảnh tốt nhất để sử dụng theo xác định của hệ thống.

Theo mặc định, hệ thống khuyến nghị sử dụng camera trước, nhưng nếu bạn muốn sử dụng camera sau thay thế, ứng dụng của bạn có thể thông báo cho hệ thống về hành vi mong muốn của nó.

Khi người dùng chọn các máy ảnh khác nhau, đề xuất sẽ thay đổi.

Nhưng bạn có thể tự hỏi làm thế nào hệ thống biết máy ảnh nào là tốt nhất.

Tôi sẽ đi sâu vào điều đó một chút.

Đầu tiên tôi sẽ mô tả thuộc tính userPreferredCamera của AVCaptureDevice.

Đối với thuộc tính này, hệ thống lưu trữ một lịch sử ngắn về các máy ảnh đã chọn cho mỗi ứng dụng trong quá trình khởi chạy và khởi động lại hệ thống.

Nó cho phép ứng dụng của bạn kết hợp lịch sử của người dùng với kiến thức của hệ thống về những camera hiện đang được kết nối.

Vì vậy, nếu một máy ảnh bị ngắt kết nối, hệ thống sẽ trả lại máy ảnh có sẵn tiếp theo dựa trên lịch sử của người dùng.

Nếu không có lịch sử lựa chọn người dùng hoặc không có máy ảnh ưa thích nào được kết nối, hệ thống sẽ luôn cố gắng trả lại một máy ảnh đã sẵn sàng để sử dụng và ưu tiên các máy ảnh đã được phát trực tuyến trước đó.

Ứng dụng của bạn có thể sử dụng thuộc tính này để cho phép hệ thống lưu trữ tùy chọn máy ảnh của người dùng.

Thuộc tính systemPreferredCamera của AVCaptureDevice trả về máy ảnh tốt nhất để sử dụng một cách thông minh.

Đầu tiên nó kiểm tra sở thích của người dùng.

Và khi người dùng kết nối camera ngoài với iPad, hệ thống sẽ trả lại thiết bị mới.

Điều này là do, khi người dùng kết nối một máy ảnh mới, họ ngầm chỉ ra ý định sử dụng nó.

Hai đầu vào này xác định máy ảnh ưa thích của hệ thống.

API lựa chọn máy ảnh tự động linh hoạt cho một ứng dụng để chọn cách nó tích hợp với hệ thống.

Mặc dù chỉ có iPad hỗ trợ camera ngoài, các ứng dụng iPhone cũng có thể sử dụng API để lưu trữ camera ưa thích của người dùng.

Một số ứng dụng cho phép người dùng thay đổi máy ảnh, trong khi những ứng dụng khác gắn bó với một máy ảnh mà không cần cách chuyển đổi.

API cho phép các ứng dụng lựa chọn giữa lựa chọn máy ảnh tự động và thủ công.

FaceTime, Code Scanner và WebKit là những ví dụ tuyệt vời có các hành vi lựa chọn máy ảnh khác nhau để phù hợp với nhu cầu của họ.

Khi FaceTime khởi chạy, nó luôn sử dụng camera trước hoặc camera ngoài.

Và trong các cuộc gọi, nó cho phép người dùng chuyển đổi giữa các camera tích hợp.

Nhưng khi một máy ảnh bên ngoài được sử dụng, nó sẽ ẩn nút chuyển đổi máy ảnh.

FaceTime cho phép hành vi này bằng cách cài đặt userPreferredCamera khi nó chuyển đổi thiết bị và quan sát thuộc tính systemPreferredCamera khi một thiết bị bên ngoài được cắm vào.

Nó cũng đưa ra quyết định của riêng mình khi nào thích hợp để sử dụng API lựa chọn máy ảnh tự động.

Ví dụ, trong khi bạn có thể sử dụng camera sau trong cuộc gọi Video FaceTime, nó luôn sử dụng camera trước hoặc camera ngoài trên màn hình chính hiển thị danh sách cuộc gọi.

Máy quét mã, có sẵn từ Trung tâm điều khiển, có hành vi khác nhau.

Nó sử dụng camera mặt sau khi khởi chạy và nó không cho phép người dùng thay đổi camera, nhưng nó lắng nghe thuộc tính systemPreferredCamera và chuyển đổi khi được thông báo.

Khung WebKit cho phép các trang web truy cập vào máy ảnh của iPad.

Mặc dù nó cho phép chuyển sang bất kỳ máy ảnh nào, nhưng nó trả lại máy ảnh ưa thích của hệ thống là máy ảnh đầu tiên trong danh sách của nó.

Bây giờ tôi đã chỉ cho bạn cách lựa chọn máy ảnh tự động hoạt động, tôi sẽ thêm hỗ trợ cho nó trong AVCam.

AVCam là một ứng dụng chụp ảnh truyền thống, vì bạn có thể chụp ảnh và quay phim với nó.

Nó khác với FaceTime và Code Scanner, lần lượt là các ứng dụng giao tiếp và tiện ích, và WebKit, là một khung hệ thống.

Bây giờ thay vì cần một loạt các câu lệnh "nếu, nếu" để tìm camera bên ngoài có dự phòng, AVCam chỉ cần một dòng để có được máy ảnh ưa thích của hệ thống.

Vì đây là lần đầu tiên ứng dụng sử dụng API lựa chọn máy ảnh tự động, hệ thống sẽ trả về camera trước tích hợp sẵn.

Nhưng AVCam thích tiếp tục bắt đầu với camera sau.

Trước khi nhận được máy ảnh ưa thích của hệ thống, ứng dụng sẽ kiểm tra xem đây có phải là lần đầu tiên nó truy vấn hay không bằng cách tìm kiếm một giá trị được lưu trữ trong mặc định của người dùng ứng dụng.

Nếu không có giá trị nào được lưu, thì ứng dụng chưa đặt trạng thái ban đầu để lựa chọn máy ảnh tự động.

Vì vậy, nếu đây là lần đầu tiên khởi chạy, ứng dụng sẽ đặt máy ảnh ưa thích của người dùng làm thiết bị phía sau.

Ứng dụng tìm camera sau bằng cách sử dụng AVCaptureDeviceDiscoverySession, sắp xếp danh sách các thiết bị sử dụng các loại thiết bị được cung cấp.

Sau đó, nó đặt máy ảnh ưa thích của người dùng và lưu một giá trị trong tùy chọn người dùng của ứng dụng, vì vậy nó chỉ thực hiện thiết lập này một lần.

Để xử lý các kết nối và ngắt kết nối của các camera bên ngoài, nó không phải quan sát trạng thái kết nối của một camera cụ thể nữa.

Thay vào đó, giá trị khóa AVCam quan sát thuộc tính máy ảnh ưa thích của hệ thống.

Điều này cho phép nó tự động chuyển sang máy ảnh tốt nhất hiện có.

Trong quá trình xử lý KVO, ứng dụng có hệ thống máy ảnh ưa thích mới và chuyển sang nó.

Nhưng nếu AVCam đang ghi âm thì sao?

Ứng dụng không nên làm gián đoạn ghi âm bằng cách chuyển đổi máy ảnh.

Vì vậy, ứng dụng chỉ chuyển đổi nếu nó không ở giữa bản ghi âm.

Sau đó, khi quá trình quay phim kết thúc, ứng dụng sẽ truy vấn máy ảnh ưa thích của hệ thống để xem liệu nó có khác với những gì nó hiện đang sử dụng hay không.

Nếu máy ảnh ưa thích của hệ thống đã thay đổi, ứng dụng sẽ chuyển sang nó.

Bằng cách này nó không làm gián đoạn quá trình ghi âm.

Những quyết định như thế này là những bước bạn sẽ phải thực hiện khi áp dụng máy ảnh bên ngoài và API lựa chọn máy ảnh tự động.

Làm những gì có ý nghĩa nhất cho ứng dụng của bạn.

AVCam có một nút để chuyển đổi máy ảnh và hoạt động bằng cách thay đổi giữa các thiết bị trước và sau.

Trên iPad Pro này, có nhiều camera có thể được sử dụng ở cả hai vị trí.

Vì vậy, AVCam có một số logic để chọn máy ảnh nào để sử dụng ở một vị trí nhất định.

Nút bây giờ nên hoạt động như thế nào khi ứng dụng hỗ trợ camera bên ngoài?

Tôi sẽ chọn đối xử với một máy ảnh bên ngoài như thể nó ở mặt trước.

Máy ảnh trong Màn hình Apple Studio này đối diện với tôi giống như camera trước tích hợp của iPad.

Nếu chức năng changeCamera không có thiết bị cụ thể để chuyển sang, ứng dụng sẽ kiểm tra vị trí của thiết bị hiện tại.

Trong câu lệnh chuyển đổi kiểm tra vị trí của thiết bị hiện tại, ứng dụng sẽ tìm kiếm camera phía sau nếu nó hiện đang sử dụng camera có vị trí không xác định hoặc phía trước.

Các camera bên ngoài báo cáo rằng vị trí của chúng không được xác định.

Và nếu ứng dụng đang sử dụng camera phía sau, nó sẽ chuyển sang thiết bị bên ngoài nếu có sẵn.

Nếu không, nó sẽ chuyển sang camera mặt trước tích hợp sẵn.

Để tìm camera ngoài, ứng dụng tạo AVCaptureDeviceDiscoverySession bằng cách sử dụng loại thiết bị bên ngoài, loại phương tiện video và vị trí thiết bị không xác định.

Sau đó, trong câu lệnh chuyển đổi khi vị trí của thiết bị hiện tại trở lại, trước tiên nó tìm kiếm một camera bên ngoài.

Và nếu không tìm thấy, nó sẽ chuyển sang camera mặt trước tích hợp.

Sau đó, khi ứng dụng tìm thấy máy ảnh mà nó muốn sử dụng, nó sẽ thông báo cho hệ thống lựa chọn bằng cách đặt thuộc tính lớp userPreferredCamera trên AVCaptureDevice.

Cài đặt thuộc tính này cho phép hệ thống tìm hiểu các tùy chọn của người dùng.

Bạn có thể chọn cách ứng dụng của bạn sẽ hỗ trợ các camera bên ngoài và cách cho phép người dùng chuyển đổi giữa chúng.

Đối với AVCam, tôi đã chọn cho phép người dùng chuyển đổi giữa camera trước, sau và camera ngoài bằng cách xử lý camera ngoài như thể chúng ở mặt trước.

Bằng cách này, nút chuyển đổi máy ảnh chỉ thay đổi giữa hai thiết bị.

AVCam gần như đã sẵn sàng để hỗ trợ các camera bên ngoài.

Chỉ còn một khía cạnh nữa để xử lý.

Trong suốt thời gian này tôi đã sử dụng AVCam, iPad đã được gắn ngang với cổng USB-C ở bên phải.

Nếu tôi xoay iPad, bản xem trước của camera bên ngoài bây giờ bị lộn ngược.

Nhưng camera ngoài trong màn hình vẫn chưa di chuyển.

Chỉ có iPad có.

Tuy nhiên, AVCam không gặp vấn đề xoay vòng này với máy ảnh tích hợp.

Điều này là do ứng dụng không biết cách định hướng các camera bên ngoài có vị trí độc lập với iPad.

AVCam sẽ cần sửa đổi thêm để hiển thị đúng bản xem trước video của máy ảnh bên ngoài.

Tiếp theo, tôi sẽ thảo luận về lý do tại sao xoay video lại quan trọng để xem trước trực tiếp và chụp ảnh và phim xuất hiện chính xác.

Xoay video không phải là một khái niệm mới cho các ứng dụng máy ảnh.

Nhưng khi sử dụng máy ảnh bên ngoài, điều quan trọng là phải biết rằng chúng di chuyển độc lập với iPad.

Các ứng dụng được sử dụng để tích hợp máy ảnh.

Và vì điều này, họ dựa vào hướng của iPad để xoay video của máy ảnh và sử dụng liệt kê AVCaptureVideoOrientation.

Đây là những gì AVCam đã làm trong bản demo trước đó.

Nó đã thử xoay camera ngoài để phù hợp với hướng của iPad.

Trong iPadOS 17, AVCaptureVideoOrientation bị phản đối, cũng như API sử dụng enum này.

Nó mô tả cách iPad được định hướng và giả định máy ảnh quay theo thiết bị.

Nó không đủ biểu cảm để định hướng các máy ảnh bên ngoài, chúng di chuyển độc lập.

Để sử dụng enum này, một ứng dụng thường chuyển đổi từ UIDeviceOrientation, cũng mô tả iPad và là một tín hiệu gián tiếp để định hướng máy ảnh.

Vì vậy, chúng tôi đang giới thiệu API mới để xử lý việc xoay video.

Mới đối với tất cả các nền tảng, bao gồm iPadOS, lớp AVCaptureDeviceRotationCoordinator có thể giúp định hướng đúng bất kỳ máy ảnh nào.

Trình khởi tạo của lớp học có AVCaptureDevice và tùy chọn CALayer hiển thị bản xem trước video của máy ảnh.

Các ứng dụng thường sử dụng AVCaptureVideoPreviewLayer hoặc AVSampleBufferDisplayLayer để hiển thị bản xem trước máy ảnh.

Cả hai đều là các lớp con của CALayer và có thể được chuyển đến trình khởi tạo.

Các ứng dụng sử dụng Metal hoặc các phương pháp kết xuất khác có thể chỉ cần chuyển lớp UIView hiển thị bản xem trước của máy ảnh.

Điều phối viên có hai thuộc tính: Góc xoay video để xem trước cấp độ đường chân trời và góc riêng biệt để chụp cấp độ đường chân trời.

Cả hai thuộc tính chỉ đọc này đều trả về một góc tính bằng độ và có thể quan sát được giá trị khóa.

Xem trước và chụp nội dung ở cấp độ chân trời có nghĩa là các khung hình video từ máy ảnh luôn thẳng đứng so với trọng lực, bất kể thiết bị ở chế độ dọc, ngang hay lộn ngược.

Sử dụng videoRotationAngleForHorizonLevelPreview để hiển thị các khung hình video trong CALayer được chuyển cho trình khởi tạo của điều phối viên.

Nó mô tả số vòng quay để áp dụng cho bản xem trước.

Góc có liên quan đến hệ tọa độ UIKit và SwiftUI.

VideoRotationAngleForHorizonLevelCapture cho phép ứng dụng của bạn chụp ảnh và quay phim, vì vậy chúng luôn thẳng đứng khi ai đó xem chúng sau này.

Thuộc tính này mô tả hướng vật lý của máy ảnh.

Và giá trị của nó có thể khác với góc độ mà ứng dụng cần để xem trước.

Hai thuộc tính này có mục đích khác nhau.

Để giải thích về xoay video, tôi sẽ bắt đầu với các tình huống mà bạn quen thuộc khi sử dụng máy ảnh tích hợp.

Sau đó, khi tôi sửa đổi AVCam, tôi sẽ giải thích cách những khái niệm này áp dụng cho các máy ảnh bên ngoài.

Ứng dụng máy ảnh trên iPhone là một ví dụ điển hình về sự khác biệt giữa các góc quay video để xem trước và chụp ở cấp độ chân trời.

Trong ví dụ này về ứng dụng hiển thị bản xem trước của camera sau, iPhone ở chế độ dọc.

Nguồn gốc của hệ tọa độ UIKit nằm ở trên cùng bên trái của khu vực vẽ, nơi trục x dương của nó kéo dài sang phải và trục y dương kéo dài xuống.

Hệ tọa độ của cảm biến camera sau có nguồn gốc khác.

Cảm biến máy ảnh đầu tiên quét dọc theo chiều cao của điện thoại, sau đó dọc theo chiều rộng.

Để tính đến hướng vật lý của máy ảnh, ứng dụng xoay các khung hình video của máy ảnh 90 độ để xem trước trong giao diện người dùng.

Nó cũng xoay ảnh và phim mà nó chụp, vì vậy chúng thẳng đứng khi xem sau.

Nó có hành vi khác nhau khi iPhone ở trong cảnh quan.

Ứng dụng chỉ hiển thị giao diện người dùng theo chiều dọc, bất kể hướng của thiết bị.

Bạn có thể biết dựa trên chỉ số khả năng chi trả nhà ở đâu.

Đối với ứng dụng Camera trên iPhone, nó luôn ở bên cạnh cổng.

Nguồn gốc của hệ tọa độ UIKit vẫn ở trên cùng bên trái của khu vực vẽ và trong trường hợp này, nó vẫn cố định ở một vị trí duy nhất trên thiết bị, vì giao diện người dùng của ứng dụng chỉ hỗ trợ một hướng.

Và hệ tọa độ của cảm biến camera sau vẫn khác với giao diện người dùng.

Vì ứng dụng chỉ hiển thị giao diện người dùng ở chế độ dọc, nên nó áp dụng xoay liên tục 90 độ để xem trước, bất kể hướng của iPhone.

Nhưng không giống như để xem trước, ứng dụng áp dụng một số vòng quay khác khi chụp ảnh và quay phim khi iPhone ở ngang.

Khi iPhone ở hướng gốc của cảm biến máy ảnh, ứng dụng không cần xoay ảnh hoặc phim để chúng xuất hiện thẳng đứng.

Tất cả những cuộc nói chuyện xoay vòng này thực sự khiến đầu bạn quay cuồng.

Nhưng AVCaptureDeviceRotationCoordinator chăm sóc sự phức tạp này và cung cấp các góc chính xác để xem trước và chụp từ tất cả các máy ảnh.

Dựa vào nó để cung cấp các góc thay vì cố gắng tự tính toán chúng.

Khi ứng dụng của bạn chuyển đổi máy ảnh, hãy đảm bảo tạo một điều phối viên xoay vòng mới.

Để áp dụng xoay video, hãy sử dụng các góc mà điều phối viên cung cấp với API mới trên AVCaptureConnection.

Chỉ các kết nối cung cấp dữ liệu phương tiện video hoặc chiều sâu mới hỗ trợ xoay vòng.

Để kiểm tra xem một kết nối có hỗ trợ một góc hay không, bạn có thể gọi phương thức isVideoRotationAngleSupported của nó.

Để kết nối thực hiện xoay vòng, hãy đặt thuộc tính videoRotationAngle của nó thành một giá trị được hỗ trợ.

Sử dụng videoRotationAngleForHorizonLevelPreview để hiển thị bản xem trước của máy ảnh.

Các ứng dụng sử dụng AVCaptureVideoPreviewLayer có thể áp dụng giá trị của thuộc tính cho thuộc tính videoRotationAngle của phiên bản AVCaptureConnection.

Các ứng dụng cũng có thể sử dụng nó khi hiển thị bộ đệm từ đầu ra dữ liệu video trong CALayer.

Để đồng bộ hóa với hoạt ảnh hệ thống, hãy thay đổi vòng quay xem trước ngay lập tức trong mã quan sát giá trị chính của ứng dụng của bạn.

Ứng dụng của bạn có thể mong đợi nhận được các bản cập nhật cho thuộc tính này trên hàng đợi chính để cập nhật giao diện người dùng của nó.

Không phải tất cả các ứng dụng đều sử dụng AVCaptureVideoPreviewLayer để hiển thị bản xem trước máy ảnh.

Một số ứng dụng hiển thị bộ đệm từ đầu ra dữ liệu video khi áp dụng các hiệu ứng hoặc bộ lọc tùy chỉnh.

Một lựa chọn để hiển thị bản xem trước tùy chỉnh là sử dụng AVSampleBufferDisplayLayer.

Tránh yêu cầu xoay bằng cách đặt góc trên AVCaptureConnection của đầu ra dữ liệu video.

Thay đổi góc của kết nối gây ra sự gián đoạn phân phối khung khi đường ống kết xuất chụp tự cấu hình lại để áp dụng lượng vòng quay mới.

Thay vào đó, xoay CALayer hiển thị bản xem trước máy ảnh.

Làm như vậy cho phép xem trước máy ảnh của ứng dụng của bạn xoay trơn tru.

Sử dụng videoRotationAngleForHorizonLevelCapture khi chụp ảnh và phim, vì vậy chúng ở mức độ so với trọng lực.

Ứng dụng của bạn có thể áp dụng giá trị của tài sản trên các kết nối chụp cho đầu ra ảnh hoặc đầu ra tệp phim.

Ngoài ra, nếu ứng dụng của bạn sử dụng đầu ra dữ liệu video với AVAssetWriter để quay phim tùy chỉnh, hãy tránh xoay video bằng AVCaptureConnection.

Thay vào đó, hãy đặt vòng quay với thuộc tính biến đổi của phiên bản AVAssetWriterInput, làm thay đổi siêu dữ liệu của tệp đầu ra.

Với cách tiếp cận này, các ứng dụng video áp dụng xoay trong quá trình phát lại, sử dụng ít năng lượng hơn so với xoay mỗi khung hình với kết nối chụp.

Ứng dụng của bạn cần chuyển đổi góc quay từ độ vì đầu vào ghi tài sản sử dụng CGAffineTransform áp dụng các phép quay theo radian.

Một số đầu ra áp dụng hiệu quả vòng quay mà không cần thêm chi phí.

Ví dụ, đầu ra tệp phim áp dụng xoay bằng ma trận theo dõi QuickTime.

Đầu ra ảnh xử lý hướng với các thẻ Exif.

Và lớp xem trước biến đổi nội dung của nó để thực hiện các vòng quay.

Tuy nhiên, ứng dụng của bạn có thể tăng mức tiêu thụ điện năng của thiết bị nếu đầu ra dữ liệu video hoặc độ sâu thực hiện xoay vì chúng sử dụng nhiều bộ nhớ và năng lượng hơn để xoay bộ đệm.

Thay vào đó, ứng dụng của bạn có thể thực hiện cách tiếp cận hiệu quả hơn bằng cách xoay CALayer để xem trước bộ đệm từ đầu ra video hoặc độ sâu.

Sử dụng AVCaptureDeviceRotationCoordinator trên tất cả các nền tảng có sẵn, bao gồm iOS, tvOS và macOS.

Các ứng dụng Mac Catalyst và iOS trên Mac cũng có thể sử dụng nó.

Ứng dụng của bạn có thể sử dụng điều phối viên xoay vòng để định hướng chính xác ảnh hoặc phim và hiển thị bản xem trước video cho bất kỳ máy ảnh nào.

Và nó giúp ứng dụng của bạn xử lý các bố cục phức tạp với Trình quản lý sân khấu hoặc khi nó ở trên màn hình ngoài.

Bây giờ là lúc cho những thay đổi cuối cùng để hỗ trợ các camera bên ngoài trong AVCam.

Khi định cấu hình phiên chụp, ứng dụng sẽ thiết lập bản xem trước máy ảnh của nó.

Vì vậy, nó tạo ra một điều phối viên xoay thiết bị, cung cấp cho ứng dụng các góc quay cần thiết để xem trước và chụp.

Khi tạo điều phối viên, ứng dụng cập nhật lớp xem trước với góc quay hiện tại để xem trước.

Nó cũng quan sát những thay đổi về góc và cập nhật bản xem trước.

Khi AVCam chuyển đổi thiết bị, nó cũng tạo ra một điều phối viên xoay vòng mới, vì vậy bản xem trước trông phù hợp với máy ảnh mới.

Khi chụp ảnh, ứng dụng sử dụng góc xoay để chụp để đảm bảo chúng thẳng đứng khi ai đó xem chúng sau này.

Và nó cũng làm như vậy khi quay phim.

Với những thay đổi này, AVCam sẵn sàng hỗ trợ các camera bên ngoài.

Bây giờ khi tôi xoay iPad, camera ngoài xuất hiện chính xác.

Chúng tôi đã đề cập rất nhiều cho đến nay trong phiên này, và tôi cảm ơn bạn đã theo dõi tôi.

Bây giờ tôi đã chỉ ra cách ứng dụng iPad của bạn có thể sử dụng camera ngoài, tôi sẽ thảo luận về cách bạn cũng có thể sử dụng micrô đi kèm với các thiết bị này.

Một số webcam và màn hình bao gồm micrô.

Khi chúng được cắm vào iPad, ứng dụng của bạn có thể sử dụng chúng.

iPadOS 17 đã cải thiện hỗ trợ micrô ngoài trên iPad với USB-C.

Các ứng dụng điện thoại sử dụng thiết bị âm thanh AUVoiceIO của Core Audio hiện có thể sử dụng micrô bên ngoài như những micrô đi kèm với webcam hoặc màn hình.

Trước đây, các thiết bị có dây bên ngoài duy nhất mà các ứng dụng này có thể sử dụng là micrô tai nghe.

AUVoiceIO là một giao diện phổ biến, vì nó thực hiện hủy tiếng vang và các điều chỉnh mới đã được giới thiệu cho micrô bên ngoài.

Chế độ cách ly bằng giọng nói có sẵn từ Trung tâm điều khiển loại bỏ tiếng ồn xung quanh không mong muốn, chẳng hạn như gõ trên bàn phím, nhấp chuột hoặc máy thổi lá chạy ở đâu đó trong khu phố.

Ứng dụng của bạn có thể sử dụng tính năng hệ thống này với micrô bên ngoài.

Hệ thống định tuyến âm thanh iOS chỉ cho phép sử dụng một micrô tại một thời điểm.

Nó cũng tự động thay đổi sang micrô được kết nối cuối cùng.

Điều này là do, giống như khi kết nối máy ảnh, người dùng cho biết nên sử dụng micrô mới được kết nối.

Trên iOS, hệ thống chỉ trả về một AVCaptureDevice cho micrô.

Bạn có thể tìm thấy nó bằng cách tìm kiếm thiết bị có loại phương tiện âm thanh hoặc với loại thiết bị micrô mới, loại này không dùng builtInMicrophone vì không phải tất cả micrô đều được tích hợp vào iPad.

Hệ thống định tuyến âm thanh quyết định sử dụng micrô nào có sẵn, có thể là micrô tích hợp sẵn hay bên ngoài.

Khi hệ thống thay đổi lộ trình đầu vào, thuộc tính localizedName của micrô AVCaptureDevice sẽ thay đổi để phản ánh thiết bị đang sử dụng.

Ứng dụng của bạn có thể sử dụng AVAudioSession để kiểm soát micrô nhiều hơn.

Bạn có thể sử dụng nó để định cấu hình hành vi âm thanh của ứng dụng bằng cách đặt danh mục hoặc chế độ.

Và bạn có thể chọn sử dụng một micrô cụ thể, chẳng hạn như micrô đi kèm với camera ngoài, bằng cách đặt đầu vào ưa thích.

Đối với chủ đề cuối cùng của phiên này, tôi sẽ thảo luận về một số phương pháp hay nhất cho ứng dụng của bạn khi sử dụng máy ảnh bên ngoài.

Khi bạn bắt đầu áp dụng, hãy xem xét điều gì có ý nghĩa nhất đối với ứng dụng của bạn.

Trước đó, tôi đã chỉ ra cách FaceTime, Code Scanner và WebKit đã chọn hỗ trợ các camera bên ngoài khác nhau.

Sử dụng chúng làm ví dụ về những cách khác nhau mà ứng dụng của bạn có thể áp dụng.

Định cấu hình iPad của bạn để gỡ lỗi không dây với Xcode trong khi cổng USB-C đang được sử dụng bởi camera ngoài.

Một số khả năng mà ứng dụng của bạn có thể mong đợi từ máy ảnh tích hợp có thể không được hỗ trợ bởi các thiết bị bên ngoài.

Ví dụ: nếu ứng dụng của bạn dựa vào việc thu thập dữ liệu độ sâu cho một số tính năng, bạn có thể phải tắt nó khi sử dụng máy ảnh bên ngoài.

Các ứng dụng sử dụng nhiều camera cùng một lúc với AVCaptureMultiCamSession có thể thêm camera bên ngoài để thiết lập chụp sáng tạo.

iPadOS cung cấp cho máy ảnh bên ngoài một số cách xử lý mà nó cũng áp dụng cho máy ảnh mặt trước.

AVCaptureVideoPreviewLayer phản chiếu các camera bên ngoài theo mặc định.

Điều này hoạt động tốt khi máy ảnh đối diện với người dùng iPad.

Nhưng điều này không phù hợp với tất cả các trường hợp sử dụng.

Nếu người dùng ứng dụng của bạn phát trực tuyến từ bộ chuyển đổi HDMI hoặc hướng camera bên ngoài ra xa họ, hãy cân nhắc cho phép người dùng tắt tính năng phản chiếu xem trước.

Trong phần trước, tôi đã mô tả vòng quay của máy ảnh.

Mặc dù ứng dụng của bạn có thể sẽ không cần áp dụng xoay video cho máy ảnh bên ngoài, nhưng hãy lưu ý rằng nếu bạn làm vậy, hệ thống sẽ xoay máy ảnh bên ngoài theo chiều kim đồng hồ về phía cảnh mà nó đang đối mặt.

Đây cũng giống như cách nó áp dụng xoay cho máy ảnh tích hợp.

Chuẩn bị ứng dụng của bạn để xử lý máy ảnh với các khả năng khác nhau.

Ví dụ, một số máy ảnh bên ngoài chỉ có thể báo cáo hai định dạng, như định dạng VGA 640x480 và định dạng HD 1280x720.

Và một số máy ảnh bên ngoài hỗ trợ các định dạng pixel thường không được sử dụng trên iOS.

Chúng tôi đã chọn chuyển đổi những thứ này sang các định dạng phổ biến hơn mà các ứng dụng máy ảnh iOS được sử dụng để xử lý.

Các định dạng không nén như yuvs và 2vuy được chuyển đổi thành 420v.

Và các định dạng nén như phát trực tuyến JPEG và H264 được chuyển đổi thành 420f.

Bởi vì một máy ảnh bên ngoài có thể có các định dạng ở bất kỳ kích thước nào, nó có thể không hỗ trợ tất cả các cài đặt trước AVCaptureSession.

Ví dụ, cài đặt trước HD 4K yêu cầu thiết bị phải có định dạng tương thích.

Ứng dụng của bạn có thể kiểm tra xem nó có thể sử dụng cài đặt trước hay không bằng cách gọi phương thức supportsSessionPreset trên AVCaptureDevice.

Ứng dụng của bạn có thể định cấu hình máy ảnh bên ngoài, bao gồm thay đổi độ phân giải, tốc độ khung hình và hệ số thu phóng.

iPadOS hỗ trợ một bộ điều khiển máy ảnh giới hạn có sẵn trong thông số kỹ thuật của USB Video Class.

Vì vậy, truy vấn AVCaptureDevice để biết khả năng của nó.

Hãy kết thúc mọi thứ tôi vừa nói.

Tôi đã chỉ ra cách bạn có thể khám phá và sử dụng máy ảnh bên ngoài, cách xoay khung hình video của máy ảnh đúng cách, sử dụng micrô bên ngoài và cuối cùng là các phương pháp hay nhất cho ứng dụng của bạn.

Chúng tôi rất vui khi thấy cách bạn bắt đầu sử dụng camera ngoài trong ứng dụng iPad của mình.

Cảm ơn bạn, và tôi hy vọng ứng dụng của bạn sẽ thành công.

♪ ♪