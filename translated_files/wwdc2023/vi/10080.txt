10080

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Xin chào. Tôi là John, và tôi là một kỹ sư trong nhóm RealityKit.

Hôm nay, tôi rất vui được giới thiệu với bạn RealityKit mới để tạo ra trải nghiệm không gian.

RealityKit là một khuôn khổ để kết xuất, hoạt hình và mô phỏng các mô hình và hiệu ứng 3D một cách thực tế.

Chúng tôi đã giới thiệu RealityKit vào năm 2019 và đã thêm rất nhiều tính năng mới kể từ đó.

Nếu bạn đã sử dụng RealityKit để xây dựng ứng dụng trên các thiết bị khác, bạn sẽ thấy rằng có rất nhiều điểm chung.

Với RealityKit, bạn có thể tăng cường cửa sổ 2D của ứng dụng với nội dung 3D, đưa nội dung 3D ở phía trước và trung tâm trong một cửa sổ riêng biệt hoặc đưa bản thân và môi trường của bạn vào trải nghiệm nhập vai.

RealityKit là một khung 3D cốt lõi trên nền tảng của Apple.

Và đặc biệt là trên xrOS, nó cung cấp rất nhiều tính năng.

Trong bài thuyết trình này, tôi sẽ tập trung vào một số tính năng chính, như thực thể, thành phần và RealityView, sẽ giới thiệu cho bạn RealityKit và chỉ cho bạn cách sử dụng nó.

Tôi cũng sẽ đề cập đến các phiên bao gồm các khái niệm khác hoặc đi vào chi tiết hơn.

Hãy bắt đầu nào.

Tôi sẽ sử dụng trải nghiệm Hello World để giải thích các khái niệm trong bài thuyết trình này.

Nhưng trước khi tôi đi đến những khái niệm đó, hãy để tôi đưa bạn qua ba mô-đun khác nhau là một phần của trải nghiệm này.

Mô-đun đầu tiên, Hành tinh Trái đất, trình bày một quả địa cầu 3D trong cửa sổ riêng của nó mà bạn có thể tương tác từ mọi góc độ.

Mô-đun thứ hai, Objects in Orbit, đưa bạn vào mô hình Trái đất, Mặt trăng và vệ tinh, thể hiện hình ảnh động, Âm thanh không gian và các hành vi tùy chỉnh, như dấu vết theo vệ tinh.

Mô-đun thứ ba, Hệ Mặt trời, chứa một trải nghiệm nhập vai hoàn toàn, mà bạn có thể tìm hiểu thêm trong các phiên khác.

Tôi sẽ chỉ cho bạn cách xây dựng các yếu tố 3D của trải nghiệm Hello World này bằng SwiftUI, RealityKit và Reality Composer Pro.

Hãy đi sâu vào.

Tôi sẽ bắt đầu bằng cách nói về cách bạn có thể sử dụng RealityKit cùng với SwiftUI để đưa ứng dụng của bạn vào chiều hướng tiếp theo.

Tiếp theo, tôi sẽ kiểm tra các khối xây dựng của RealityKit, các thực thể như mô hình Trái đất và các thành phần thực hiện các hành vi của nó.

Bạn sẽ tìm hiểu về các tính năng của RealityView, đây là chế độ xem SwiftUI mới cho các mô hình và hiệu ứng 3D.

Sau đó, tôi sẽ giải thích cách bạn có thể xử lý đầu vào và đưa ứng dụng của mình vào cuộc sống với hoạt hình và Âm thanh không gian.

Cuối cùng, tôi sẽ nói về việc mở khóa tiềm năng của RealityKit với các thành phần và hệ thống tùy chỉnh.

Hãy bắt đầu bằng cách khám phá cách RealityKit và SwiftUI hoạt động cùng nhau.

SwiftUI là cách bạn xác định chế độ xem và cửa sổ của mình, và RealityKit cho phép bạn thêm các yếu tố 3D.

Ví dụ, ứng dụng World sử dụng SwiftUI để hiển thị cửa sổ 2D tiêu chuẩn với một vài nút bấm.

Nhấn vào nút Hành tinh Trái đất ở bên trái sẽ điều hướng đến chế độ xem chi tiết, hiển thị hình minh họa 2D của Trái đất.

Nhưng nếu tôi muốn thay thế hình ảnh 2D đó bằng một quả địa cầu 3D thì sao?

Thêm nội dung 3D vào cửa sổ 2D thật dễ dàng bằng cách sử dụng chế độ xem mô hình 3D trong RealityKit.

Hãy xem qua mã.

Đây là chế độ xem SwiftUI, hiển thị hình ảnh quả địa cầu đó.

Tôi sẽ thay đổi nó để hiển thị quả địa cầu 3D bằng cách nhập RealityKit và thay đổi hình ảnh thành chế độ xem 3D mô hình, tham chiếu tệp USD trong dự án của tôi có tên Globe.

Chúng ta có thể tùy chỉnh mô hình đã tải trước khi hiển thị nó bằng cách thêm hai đoạn mã: đóng nội dung cho mô hình được trả về và trình tạo chế độ xem giữ chỗ để chỉ định chế độ xem được hiển thị trong khi mô hình đang tải.

Trong phần đóng nội dung, tôi sẽ thêm các công cụ sửa đổi có thể thay đổi kích thước và thu nhỏ ToFit để đảm bảo rằng mô hình phù hợp với không gian có sẵn trong giao diện người dùng của tôi.

Và bởi vì Mô hình 3D tải mô hình của nó không đồng bộ, có một trình tạo chế độ xem giữ chỗ, bạn có thể sử dụng để tùy chỉnh chế độ xem được hiển thị trong quá trình tải.

Trong trường hợp này, tôi chỉ đang sử dụng ProgressView tích hợp để hiển thị một con quay.

Cuối cùng, tôi cần thêm mô hình 3D toàn cầu làm tài nguyên vào ứng dụng hoặc gói Swift.

Và bây giờ mô hình xuất hiện theo hàng trong ứng dụng với giao diện giống như trong Quick Look hoặc Reality Composer Pro.

Đặt nội dung 3D trong cửa sổ 2D thật tuyệt, nhưng tôi muốn mô hình 3D của mình ở phía trước và trung tâm.

Để thực hiện điều đó, tôi sẽ đặt quả địa cầu vào một cửa sổ riêng biệt.

Tôi sẽ thêm một nút vào chế độ xem chi tiết của ứng dụng để mở cửa sổ mới đó.

Và thay vì sử dụng một cửa sổ thông thường, hiển thị nội dung của nó trên nền 2D, tôi sẽ sử dụng kiểu cửa sổ mới đặt nội dung của nó trong một ổ đĩa.

Đây được gọi là cửa sổ thể tích và nó rất tuyệt vời để xem nội dung 3D.

Không giống như cửa sổ 2D, cửa sổ thể tích có nghĩa là được sử dụng từ mọi góc độ, vì vậy nó lý tưởng cho các mô hình 3D.

Một cửa sổ thể tích cũng giữ một kích thước cố định đúng với cuộc sống.

Bạn có thể chia tỷ lệ một mô hình trong cửa sổ thể tích có chiều ngang một mét và nó sẽ luôn được hiển thị ở kích thước chính xác đó.

Tôi nghĩ điều đó rất phù hợp với toàn cầu trong Hello World.

Hãy cùng trải qua quá trình thêm một cửa sổ thể tích.

Đầu tiên, tôi sẽ thêm một nhóm cửa sổ vào ứng dụng của mình.

Các nhóm cửa sổ hoạt động như một mẫu mà một ứng dụng có thể sử dụng để mở các cửa sổ mới.

Tôi sẽ cung cấp cho cửa sổ mới một mã định danh để phân biệt nó với cửa sổ chính của ứng dụng này.

Tiếp theo, tôi sẽ thêm một công cụ sửa đổi thể tích windowStyle vào nhóm cửa sổ.

Tôi cũng sẽ thêm một công cụ sửa đổi Kích thước mặc định để cung cấp cho cửa sổ này kích thước tính bằng mét.

Cuối cùng, tôi sẽ thêm một nút vào chế độ xem chi tiết.

Để làm cho nút mở cửa sổ tôi vừa thêm, tôi sẽ thêm một thuộc tính cho phép tôi truy cập vào hành động mở cửa sổ từ môi trường SwiftUI.

Sau đó tôi sẽ gọi hành động đó từ nút của tôi.

Hãy chạy ứng dụng này trong trình giả lập.

Khi tôi nhấn nút View Globe, một cửa sổ thể tích sẽ xuất hiện.

Bây giờ tôi có thể tương tác với quả địa cầu từ nhiều góc độ, không chỉ phía trước.

Nhưng đôi khi, chìa khóa để mở khóa trải nghiệm bạn muốn tạo ra là đắm chìm.

Trong mô-đun Objects in Orbit của ứng dụng World, bạn đang đắm chìm trong một mô hình hoạt hình của Trái đất và các vệ tinh của nó thể hiện quỹ đạo của chúng.

Điều này sử dụng một không gian nhập vai, một loại cảnh mới cho phép ứng dụng của bạn đặt các yếu tố 3D ở bất kỳ đâu trong không gian.

Khi bạn mở một Không gian Nhập vai, ứng dụng của bạn có thể vượt ra ngoài giới hạn của một cửa sổ và cung cấp trải nghiệm kỳ diệu.

Thêm một Không gian Nhập vai tương tự như thêm một nhóm cửa sổ.

Đó là một cảnh mới trong phần thân ứng dụng của tôi.

Ở đây tôi đang sử dụng RealityView, điều này sẽ giúp tôi kiểm soát cảnh nhiều hơn Model 3D.

Tôi sẽ xem qua RealityView chi tiết hơn trong vài phút nữa.

Giống như trước đây, tôi sẽ thêm một nút vào chế độ xem chi tiết của ứng dụng.

Tôi sẽ lấy hành động openImmersiveSpace từ môi trường và gọi nó với mã định danh của cảnh tôi đã xác định.

Lưu ý rằng hành động openImmersiveSpace không đồng bộ.

Nó hoàn thành khi không gian mở xong.

Khi tôi nhấn nút View Orbits, một Không gian Nhập vai sẽ xuất hiện.

Điều này đã tuyệt vời, nhưng bạn có thể làm cho nó hấp dẫn hơn bằng cách thêm tính tương tác, hoạt hình và âm thanh với RealityKit.

Cho dù bạn đang làm việc với các cửa sổ 2D chứa nội dung 3D hay các cửa sổ thể tích nhấn mạnh các mô hình 3D của bạn, tôi khuyến khích bạn kiểm tra các phiên SwiftUI này nếu bạn chưa có.

Phiên "Gặp gỡ SwiftUI để tính toán không gian" là tổng quan về những gì mới với SwiftUI trên nền tảng này.

Phiên "Đưa SwiftUI sang chiều không gian tiếp theo" trình bày cách tận dụng tối đa nội dung 3D trong một cửa sổ.

Ngoài ra còn có nhiều phong cách đắm chìm.

Mô-đun hệ mặt trời của Hello World sử dụng một không gian hoàn toàn nhập vai để che giấu đường chuyền và hiển thị phông nền của chính nó.

Phiên "Go beyond the window with SwiftUI" đi vào chi tiết về tất cả các phong cách của Immersive Spaces.

Nếu bạn đang nghĩ về việc tạo ra một trải nghiệm nhập vai, tôi thực sự khuyên bạn nên nói chuyện này.

Bạn đã gặp hai cách để sử dụng RealityKit trong chế độ xem SwiftUI của mình, Mô hình 3D dễ sử dụng và Chế độ xem thực tế.

RealityView là những gì tôi sẽ sử dụng cho phần còn lại của phiên này vì nó cho phép bạn soạn nội dung 3D của mình bằng cách sử dụng các thực thể RealityKit.

Vậy thực thể RealityKit là gì?

Một thực thể là một đối tượng chứa.

Nếu bạn tạo một thực thể trống từ mã, nó sẽ không làm gì cả.

Để làm cho một thực thể hiển thị hoặc đưa ra một hành vi, nó phải có các thành phần.

Mỗi thành phần cho phép một số hành vi cụ thể cho một thực thể.

Đây là một số ví dụ.

Thực thể Trái đất trong ứng dụng này được triển khai với hai thành phần: một thành phần mô hình, cung cấp cho thực thể một lưới và vật liệu, và một thành phần biến đổi, đặt thực thể trong không gian 3D.

Điều tương tự cũng đúng với thực thể vệ tinh.

Thành phần mô hình hiển thị một lưới và áp dụng vật liệu cho nó.

Các mô hình Trái đất và vệ tinh này được tạo ra trong một công cụ tạo nội dung kỹ thuật số, được xuất sang tệp USDZ và được tải vào RealityKit.

Những mắt lưới này có một vật liệu dựa trên vật lý được áp dụng cho chúng để tạo cho chúng vẻ ngoài cuối cùng.

Một vật liệu sử dụng một tập hợp các kết cấu và bộ đổ bóng để mô tả cách bề mặt của lưới phản ứng với ánh sáng.

Để tìm hiểu thêm về tài liệu, tôi khuyên bạn nên xem phiên của Niels, "Khám phá tài liệu trong Reality Composer Pro."

Ngoài một mô hình, các thực thể này có một thành phần biến đổi.

Thành phần biến đổi đặt một thực thể trong không gian 3D.

Bạn có thể kiểm soát vị trí, hướng và tỷ lệ của một thực thể bằng cách đặt các thuộc tính trên thành phần biến đổi của nó, cũng như bằng cách đặt cha mẹ của thực thể.

RealityKit sử dụng các quy ước tọa độ 3D giống như ARKit và nhiều công cụ 3D khác.

Nguồn gốc là trung tâm của RealityView.

Trục y hướng lên trên, trục z hướng về phía bạn và trục x hướng về bên phải của bạn.

Một đơn vị là một mét.

Lưu ý rằng các quy ước này khác với các quy ước của SwiftUI.

Có các chức năng trên phiên bản nội dung của RealityView giúp dễ dàng chuyển đổi qua lại giữa không gian tọa độ RealityKit và SwiftUI.

Mọi thực thể đều có một phép biến đổi, nhưng không phải mọi thực thể đều có một mô hình.

Đôi khi một thực thể được tập hợp từ nhiều thực thể con, mỗi thực thể có tập hợp các thành phần riêng.

Điều này cho phép bạn kiểm soát lập trình nhiều hơn.

Ví dụ, bạn có thể phát các hình ảnh động riêng lẻ trên các biến đổi của các thực thể con.

RealityKit chứa nhiều thành phần tùy thuộc vào những gì bạn muốn làm.

Hôm nay tôi sẽ nói về một số thành phần cụ thể, va chạm, mục tiêu đầu vào và hiệu ứng di chuột chỉ để kể tên một vài thành phần.

Tôi cũng sẽ trình bày cách tạo ra các thành phần của riêng bạn.

Bây giờ chúng ta đã hiểu được các thực thể và thành phần hoạt động như thế nào, hãy sử dụng RealityView để đặt các thực thể đó vào ứng dụng của bạn.

RealityView là một chế độ xem SwiftUI chứa bất kỳ số lượng thực thể nào.

Các thực thể cần được thêm vào Chế độ xem thực tế để được hiển thị, hoạt hình và mô phỏng.

Vậy, RealityView hoạt động như thế nào?

RealityView cung cấp một ví dụ nội dung cho phép bạn thêm các thực thể vào chế độ xem.

Đây là một cách dễ dàng để bắt đầu nếu bạn đã tải một thực thể hoặc nếu bạn muốn tạo một thực thể theo chương trình.

Nhưng việc đóng cửa này không đồng bộ, vì vậy thật đơn giản để tải một thực thể từ một tệp và hiển thị nó trong chế độ xem của bạn.

Ở đây tôi tải không đồng bộ mô hình Trái đất từ tệp USD và thêm nó vào phiên bản nội dung sau khi tải hoàn tất.

Bạn cũng có thể tải nhiều hơn một mô hình và đặt cả hai vào RealityView của mình.

Thay vì được đặt cạnh nhau, những mô hình này sẽ trùng nhau trong không gian.

Nếu đó không phải là những gì bạn muốn, bạn có thể thay đổi vị trí của các thực thể được thêm vào chế độ xem.

Ví dụ này định vị thực thể mặt trăng nửa mét ở bên phải.

Khi bạn đã thiết lập RealityView của mình, bạn có thể muốn kết nối trạng thái trong ứng dụng của mình với các thuộc tính được lưu trữ trên các thành phần RealityKit.

RealityView cho phép bạn thể hiện các kết nối giữa trạng thái được quản lý SwiftUI và các thực thể trong RealityView với việc đóng bản cập nhật.

Điều này giúp dễ dàng thúc đẩy hành vi của các mô hình 3D với nguồn sự thật từ mô hình dữ liệu của ứng dụng của bạn.

Chế độ xem này tải một mô hình và áp dụng một vòng quay được điều khiển bởi bất kỳ ai sử dụng chế độ xem.

Lưu ý rằng mã trong phần cập nhật chỉ chạy khi các giá trị phụ thuộc vào sự thay đổi.

Nếu bạn đang xây dựng một giao diện người dùng với sự kết hợp của các yếu tố 2D và 3D, đôi khi bạn sẽ cần chuyển đổi tọa độ giữa các chế độ xem và thực thể.

RealityView cung cấp các chức năng chuyển đổi tọa độ giữa không gian tọa độ xem SwiftUI và không gian tọa độ thực thể RealityKit.

Phiên bản nội dung của RealityView cung cấp một hàm chuyển đổi chuyển đổi các điểm, hộp giới hạn và chuyển đổi từ không gian tọa độ SwiftUI sang không gian cục bộ của một thực thể hoặc ngược lại.

Ở đây, tôi nhận được chiều dài tối thiểu của bất kỳ kích thước nào của chế độ xem và chia tỷ lệ thực thể đã tải để phù hợp với không gian có sẵn.

RealityView cũng cung cấp một cơ chế để đăng ký các sự kiện được xuất bản bởi các thực thể và thành phần.

Trong ví dụ này, tôi phát một hình ảnh động được tạo trong tệp USD đã tải sau khi quá trình tải hoàn tất.

Phiên bản nội dung có chức năng đăng ký:, thêm trình xử lý sự kiện.

Ví dụ này chạy một số mã khi một hình ảnh động hoàn thành.

Có những sự kiện RealityKit được xuất bản cho tất cả mọi thứ, từ hoạt hình đến vật lý đến âm thanh.

Bạn cũng có thể đính kèm chế độ xem SwiftUI cho các thực thể.

Tính năng đính kèm của RealityView giúp dễ dàng định vị chế độ xem trong không gian 3D.

Kiểm tra phiên của Eugene, "Nâng cao ứng dụng điện toán không gian của bạn với RealityKit," để tìm hiểu thêm.

Có rất nhiều thứ bạn có thể làm với RealityView.

Nhưng chúng ta hãy quay trở lại với thiên thể của chúng ta và đưa chúng vào cuộc sống.

Đầu tiên, tôi sẽ chỉ cho bạn cách thêm cử chỉ kéo để bạn có thể định vị lại thực thể Trái đất.

Và sau đó tôi sẽ giải thích hình ảnh động và Âm thanh Không gian.

Đây là một ví dụ RealityView chứa ba thực thể.

Bạn có thể thêm một cử chỉ vào Chế độ xem thực tế, giống như bất kỳ chế độ xem SwiftUI nào khác và nó sẽ kiểm tra các thực thể trong chế độ xem đó.

Để nhận đầu vào, thực thể phải có cả thành phần mục tiêu đầu vào và thành phần va chạm.

Khi một sự kiện cảm ứng được RealityView xử lý, nó sẽ bỏ qua bất kỳ thực thể nào không có cả va chạm và mục tiêu đầu vào.

Chỉ có thực thể cuối cùng này có cả hai thành phần, vì vậy các cử chỉ được thêm vào RealityView này sẽ chỉ phản ứng với đầu vào hướng vào thực thể này.

Để làm cho thực thể Trái đất có thể kéo được, tôi sẽ cung cấp cho nó một thành phần mục tiêu đầu vào và một thành phần va chạm, và thêm một cử chỉ kéo vào RealityView.

Để thêm các thành phần, tôi sẽ sử dụng Reality Composer Pro.

Reality Composer Pro là một công cụ dành cho nhà phát triển mới cho phép bạn soạn, chỉnh sửa và xem trước nội dung 3D.

Tôi sẽ chỉ sử dụng nó để thêm một vài thành phần vào một thực thể.

Để tìm hiểu thêm về những gì bạn có thể làm với Reality Composer Pro, hãy xem phiên của Eric, "Gặp gỡ Reality Composer Pro."

Ứng dụng World đã có gói World Assets được thiết lập chứa các tệp USD mà trải nghiệm này sử dụng.

Tôi sẽ mở gói đó trong Reality Composer Pro.

Mô hình Trái đất nằm trong kho lưu trữ USDZ, khép kín và không có nghĩa là sửa đổi.

Thay vì sửa đổi tài sản đó, tôi sẽ tạo một tệp cảnh USD mới và tham chiếu tài sản Trái đất.

Các tệp USD có thể tham chiếu các USD khác và sửa đổi chúng tại chỗ mà không thực sự thay đổi tệp được tham chiếu.

Chỉnh sửa không phá hủy như thế này thực sự hữu ích khi bạn cần thực hiện các thay đổi nhỏ đối với tệp USD mà người khác đang làm việc.

Tôi sẽ tạo một cảnh mới có tên DraggableGlobe và kéo vào tệp toàn cầu để tạo tham chiếu đến nó.

Bây giờ tôi có thể thêm các thành phần vào nó.

Tôi sẽ thêm một thành phần mục tiêu đầu vào và cũng là một thành phần va chạm.

Hình dạng mặc định cho thành phần va chạm là một khối lập phương.

Tôi sẽ thay đổi nó thành một hình cầu để nó phù hợp hơn với mô hình.

Điều quan trọng là hình dạng va chạm phải là một xấp xỉ hợp lý của mô hình trực quan.

Trận đấu càng gần, các tương tác trực quan với mô hình sẽ càng trực quan.

Tôi muốn có thể di chuyển mô hình Trái đất xung quanh, vì vậy tôi sẽ thêm một cử chỉ kéo vào Chế độ xem thực tế.

Một cử chỉ kéo SwiftUI tiêu chuẩn sẽ hoạt động, nhưng tôi có thể cho phép cử chỉ thao tác các thực thể cụ thể thay vì toàn bộ chế độ xem bằng cách thêm công cụ sửa đổi targetedToEntity vào cử chỉ.

Khi giá trị của cử chỉ thay đổi, tôi sẽ thay đổi vị trí của thực thể để phù hợp.

Tuy nhiên, có một chi tiết quan trọng.

Giá trị của cử chỉ nằm trong không gian tọa độ của SwiftUI, vì vậy tôi phải chuyển đổi nó thành không gian tọa độ của RealityKit để thay đổi vị trí của thực thể.

Tất cả các mảnh bây giờ đã được đặt đúng chỗ.

Vì vậy, trong mô-đun Objects in Orbit, bây giờ tôi có thể kẹp và kéo để di chuyển Trái đất xung quanh.

Tuyệt vời, ứng dụng của chúng tôi hiện đang tương tác.

Nhưng tôi muốn thực thể Trái đất của mình chỉ ra rằng nó có tính tương tác.

Có một thành phần RealityKit mà chúng ta có thể sử dụng cho việc này, HoverEffectComponent.

Hiệu ứng di chuột do SwiftUI và RealityKit cung cấp là cách duy nhất để làm cho ứng dụng của bạn phản ứng với nơi bạn đang tìm kiếm.

Hiệu ứng này được áp dụng bên ngoài quy trình ứng dụng của bạn theo cách bảo vệ quyền riêng tư.

Tôi sẽ thêm một thành phần hiệu ứng di chuột vào thực thể Trái đất khi nó được thêm vào RealityView.

Bây giờ, mô hình Trái đất sáng lên khi con trỏ ở trên nó để chỉ ra rằng tôi có thể tương tác với nó.

Tiếp theo, hãy chuyển sang hoạt hình.

RealityKit có một số loại hoạt ảnh tích hợp, chẳng hạn như hoạt ảnh từ đến theo, tạo hiệu ứng động cho một thuộc tính từ giá trị ban đầu đến giá trị cuối cùng, hoạt ảnh quỹ đạo khiến một thực thể xoay quanh cha mẹ của nó và hoạt ảnh được lấy mẫu theo thời gian tiến hành từng khung hình thông qua một loạt các giá trị.

Tôi sẽ thiết lập một hình ảnh động quỹ đạo trên Mặt trăng.

Mặt Trăng sẽ mất 30 giây để hoàn thành quỹ đạo đầy đủ và trục quỹ đạo sẽ là trục y.

Và tôi sẽ đảm bảo rằng quỹ đạo bắt đầu từ vị trí hiện tại của Mặt trăng.

Khi tôi đã xác định các thuộc tính của hoạt hình quỹ đạo này, tôi sẽ tạo một tài nguyên hoạt hình cho nó và phát hoạt hình đó trên thực thể Mặt trăng.

Và bây giờ Mặt Trăng quay quanh Trái Đất.

Đối với tôi, đây là khoảnh khắc kỳ diệu.

Với một hình ảnh động tại chỗ, khung cảnh cảm thấy sống động.

Nhưng trong khi hoạt hình giúp đưa nội dung 3D của bạn vào cuộc sống, Âm thanh không gian làm cho mô hình của bạn cảm thấy như nó thực sự ở đó.

Có ba loại âm thanh trong RealityKit: không gian, môi trường xung quanh và kênh.

Hãy xem xét từng người trong số họ chi tiết hơn.

Âm thanh RealityKit theo mặc định là không gian, vì vậy các nguồn âm thanh nghe giống như chúng thực sự tồn tại trong môi trường xung quanh bạn.

Thành phần âm thanh không gian cho phép bạn tùy chỉnh cách các đối tượng phát ra âm thanh vào không gian của bạn để làm cho chúng trở nên chân thực hơn hoặc nghệ thuật hơn.

Sử dụng tính định hướng để phát ra âm thanh theo mọi hướng hoặc chiếu âm thanh theo một hướng cụ thể.

Thành phần âm thanh xung quanh rất tốt cho các tệp đa kênh, ghi lại âm thanh của môi trường.

Không có hồi âm bổ sung nào được thêm vào các nguồn xung quanh.

Mỗi kênh của bầu không khí được phát từ một hướng cố định.

Và cuối cùng, Thành phần Âm thanh Kênh gửi các kênh tệp âm thanh trực tiếp đến loa mà không có bất kỳ hiệu ứng không gian nào.

Điều này lý tưởng cho nhạc nền không được kết nối với bất kỳ yếu tố hình ảnh nào.

Bạn có thể thêm âm thanh vào cảnh của mình trong Reality Composer Pro và giao tiếp với nó bằng RealityKit.

Hoặc bạn có thể kết nối âm thanh trong mã.

Hãy cùng xem nào.

Tôi sẽ thêm một chút âm thanh lặp lại vào vệ tinh quay quanh quỹ đạo.

Đầu tiên, tôi sẽ thêm một Thành phần Âm thanh Không gian vào một thực thể trống sẽ hoạt động như nguồn âm thanh.

Độ định hướng 0,75 tạo ra một chùm âm thanh chặt chẽ theo một hướng cụ thể.

Tôi sẽ xoay thực thể nguồn âm thanh đó xung quanh trục y của nó để âm thanh được chiếu theo hướng tôi muốn.

Sau đó, tôi sẽ tải một đoạn âm thanh lặp lại từ một tài nguyên và phát nó trên thực thể audioSource bằng cách gọi playAudio.

Hãy xem điều này đang hoạt động.

Vì nguồn Âm thanh Không gian được cấu hình với độ định hướng tập trung chặt chẽ, âm thanh có thể được nghe rõ ràng ở phía Trái đất của tôi, nhưng nó yên tĩnh hơn khi vệ tinh ở phía bên kia.

Đó là đầu vào, hoạt hình và âm thanh.

Bạn có thể xây dựng nhiều chức năng hơn trong RealityKit bằng cách kết hợp chức năng hiện có của nó theo nhiều cách khác nhau.

Có hai công cụ chính bạn có thể sử dụng cho mục đích này, xác định các thành phần của riêng bạn và xác định hệ thống của riêng bạn.

Một thành phần chứa dữ liệu kiểm soát một khía cạnh của trải nghiệm 3D.

Các thành phần được nhóm lại thành các thực thể.

Không có các thành phần, một thực thể không làm gì cả.

Mỗi thành phần cung cấp một yếu tố duy nhất trong việc triển khai của một thực thể.

Bạn đã học được rằng một thành phần biến đổi định vị một thực thể và một thành phần mô hình hiển thị một mô hình 3D.

Ngoài các thành phần được xác định trước mà RealityKit cung cấp, bạn có thể xác định các thành phần của riêng mình.

Đây là một thành phần tùy chỉnh ví dụ có chứa đối tượng traceMesh mà đồng nghiệp Paul của tôi đã tạo.

Loại thành phần theo dõi phù hợp với giao thức thành phần, vì vậy bạn có thể lấy và đặt thành phần này trên bất kỳ thực thể nào trong thời gian chạy.

Bạn cũng có thể áp dụng quy trình làm việc dựa trên dữ liệu bằng cách xác định một thành phần trong gói Swift và phù hợp với giao thức Codable.

Các thành phần có thể mã hóa sẽ xuất hiện trong giao diện Reality Composer Pro và có thể được thêm trực tiếp vào các thực thể tại thời điểm thiết kế.

Bạn có thể tìm hiểu thêm về các thành phần tùy chỉnh trong bài nói chuyện "Làm việc với nội dung Reality Composer Pro trong Xcode."

Tôi đã xem qua các thực thể trước đó trong cuộc nói chuyện này và tôi chỉ đề cập đến các thành phần.

Tiếp theo, hãy nói về các hệ thống.

Các hệ thống chứa mã hoạt động trên các thực thể và thành phần.

Kết hợp với nhau, các thực thể, thành phần và hệ thống, hoặc ECS, là một công cụ để mô hình hóa sự xuất hiện và hành vi của trải nghiệm 3D của bạn.

Hệ thống là một cách để cấu trúc mã thực hiện các hành vi của ứng dụng của bạn.

Mã trong một hệ thống chạy đều đặn, hoạt động dựa trên trạng thái hiện tại của thành phần của bạn.

Ví dụ, TraceSystem này cập nhật một lưới đường được theo dõi phía sau thực thể vệ tinh khi nó quay quanh trái đất.

Mỗi bản cập nhật, nó thêm vị trí hiện tại của thực thể vào dấu vết.

Khi một hệ thống được đăng ký, nó sẽ tự động áp dụng ở mọi nơi trong ứng dụng của bạn mà bạn sử dụng RealityKit.

Đăng ký hệ thống theo dõi trong trình khởi tạo ứng dụng của tôi khiến nó cập nhật cho tất cả các thực thể có liên quan.

Nhưng những thực thể nào có liên quan, và khi nào hệ thống cập nhật?

Hệ thống này chỉ muốn cập nhật các thực thể với một thành phần theo dõi, vì vậy tôi tạo một truy vấn thực thể lọc đến các thực thể có thành phần theo dõi.

Trong chức năng cập nhật, hệ thống chuyển truy vấn thực thể và cũng chỉ định rằng nó muốn cập nhật các thực thể khi kết xuất.

Điều kiện kết xuất có nghĩa là hệ thống này sẽ cập nhật với tốc độ thích hợp cho hoạt ảnh mượt mà.

Đây là hệ thống theo dõi đang hoạt động, thêm vị trí của thực thể vào lưới đường để tạo ra một hình ảnh động tùy chỉnh trôi chảy.

Hệ thống là một cách thực sự hiệu quả để thực hiện nhiều hiệu ứng và hành vi khác nhau.

RealityKit có rất nhiều tính năng giúp dễ dàng xây dựng các ứng dụng 3D.

Bạn có thể sử dụng RealityKit và RealityView để thêm các yếu tố 3D vào chế độ xem, cửa sổ và không gian nhập vai được xác định bằng SwiftUI.

Bạn có thể tải các tệp USD, xử lý cử chỉ và phát hoạt ảnh và Âm thanh không gian, tất cả đều sử dụng RealityKit.

RealityKit cung cấp nhiều thành phần được xác định trước, nhưng bạn cũng có thể xác định các thành phần và hệ thống tùy chỉnh cho các nhu cầu cụ thể của ứng dụng của mình.

Với điều đó, tôi đã đề cập đến các khái niệm bạn cần để bắt đầu với RealityKit.

Phiên của Eugene, "Nâng cao ứng dụng điện toán không gian của bạn với RealityKit" sẽ đưa bạn qua nhiều tính năng hơn của RealityKit, như cổng thông tin, bộ phát hạt, tệp đính kèm và hơn thế nữa.

Và phiên "Làm việc với nội dung Reality Composer Pro trong Xcode" của Amanda sẽ đưa bạn qua quá trình xây dựng một ứng dụng nhập vai bằng cách sử dụng Reality Composer Pro, RealityKit, xem trước Xcode và trình giả lập.

Có rất nhiều tính năng thú vị trong RealityKit mà bạn có thể sử dụng trong ứng dụng của mình.

Tôi thực sự hào hứng khi thấy những trải nghiệm tuyệt vời mà bạn sẽ tạo ra.

Cảm ơn vì đã xem.

♪