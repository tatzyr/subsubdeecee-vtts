10023

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Xin chào và chào mừng.

Tên tôi là Sirisha, và tôi là một kỹ sư trong nhóm HealthKit.

Ngày nay, có hàng trăm ứng dụng sức khỏe và thể dục trong App Store giúp người dùng khỏe mạnh và giữ sức khỏe.

Và đối với tất cả họ, HealthKit cung cấp một cơ sở dữ liệu được mã hóa tập trung, vì vậy các ứng dụng tuyệt vời của bạn có thể hiển thị cho người dùng của bạn một cái nhìn gắn kết về dữ liệu sức khỏe của họ.

Bây giờ, Workout APIs là một trong những API mạnh mẽ nhất mà HealthKit cung cấp và tôi yêu chúng.

Đối với video hôm nay, tôi đã tạo một ứng dụng đạp xe mẫu cho Apple Watch để theo dõi các bài tập đạp xe của mình.

Và để truy cập dễ dàng hơn, tôi rất muốn gắn iPhone của mình trên tay lái để sử dụng như một máy tính đạp xe.

Bằng cách đó, tôi có thể xem nhanh chóng và dễ dàng các số liệu trực tiếp được hiển thị trên Apple Watch của mình mà không cần phải rời tay khỏi tay lái.

HealthKit đang giới thiệu các API Tập luyện mới để kiểm soát và phản ánh các buổi tập luyện chủ động giữa Apple Watch và iPhone.

Cập nhật hỗ trợ cho các bài tập đạp xe với việc bổ sung các loại dữ liệu mới để theo dõi tốc độ đạp xe, công suất, nhịp độ và công suất ngưỡng chức năng hoặc FTP.

Và nếu điều đó vẫn chưa đủ, HealthKit cùng với ứng dụng Sức khỏe hiện đã có trên iPad.

Giờ đây, khách hàng của bạn đã đăng nhập vào tài khoản iCloud của họ trên iPad sẽ thấy dữ liệu sức khỏe của họ được đồng bộ hóa thông qua HealthKit với iPad của họ.

Chỉ cần tưởng tượng sức khỏe phong phú hơn và trải nghiệm sau khi tập luyện mà bạn có thể cung cấp.

Hôm nay, tôi sẽ sử dụng ứng dụng mẫu của mình để trình bày cách phản chiếu việc tập luyện đang chạy trên Apple Watch với iPhone được ghép nối.

Sau đó, tôi sẽ thêm một số mã để chỉ cho bạn cách thu thập các chỉ số đạp xe mới và đồng bộ hóa chúng trên các thiết bị.

Và tôi sẽ kết thúc với các chi tiết ủy quyền cần thiết để hiển thị các bài tập trên iPad.

Vì vậy, hãy xem Apple Watch, iPhone và iPad có thể hoạt động cùng nhau như thế nào để mang lại trải nghiệm tập luyện tuyệt vời.

Trong ví dụ của tôi, tôi đang chạy bài tập trên Apple Watch.

Tôi đang sử dụng một buổi tập luyện như một đối tượng tập trung để quản lý vòng đời, bắt đầu, tạm dừng và dừng lại của nó.

Nếu bạn chưa quen thuộc với các buổi tập luyện, bạn có thể muốn xem các cuộc nói chuyện trước đó, "Những cách mới để làm việc với các bài tập" và "Xây dựng ứng dụng tập luyện cho Apple Watch".

Bây giờ, để tôi kiểm soát việc tập luyện từ iPhone của mình, tôi cần tải buổi tập này từ Apple Watch sang iPhone của mình.

Và để làm như vậy, tôi sẽ sử dụng API phiên được nhân đôi mới của HealthKit.

Khi một phiên được nhân đôi bắt đầu trên Apple Watch của tôi, nếu ứng dụng iPhone của tôi không chạy, nó sẽ được khởi chạy ở chế độ nền và bàn giao phiên tập luyện.

Để nhận được phiên, ứng dụng iPhone của tôi cần phải sẵn sàng.

Vì vậy, trước tiên tôi sẽ thiết lập một trình xử lý trong chuỗi khởi chạy ứng dụng iPhone bằng cách sử dụng HealthStore.

Bằng cách đó, nó sẽ sẵn sàng để nhận phiên từ Apple Watch của tôi.

Mỗi khi ứng dụng iPhone của tôi được khởi chạy ở phía trước hoặc nền, tôi sẽ triển khai trình xử lý khởi động phản chiếu để nhận được phiên tập luyện tích cực được chuyển từ Apple Watch của mình.

Tiếp theo, tôi sẽ tạo một cấu hình tập luyện với một loại hoạt động đạp xe.

Sau đó, tôi sẽ gọi API Ứng dụng Start Watch hiện có trong ứng dụng iPhone của mình để khởi chạy ứng dụng trên Apple Watch được ghép nối của tôi và vượt qua cấu hình tập luyện.

Khi tôi nhận được cấu hình từ iPhone của mình, tôi có thể tạo một buổi tập luyện trong ứng dụng Apple Watch của mình.

Buổi tập luyện trên Apple Watch của tôi được gọi là buổi tập chính.

Và buổi tập luyện trên iPhone của tôi được gọi là buổi tập được nhân đôi.

Vì vậy, đây là cách nó trông như thế nào.

Khi tôi bắt đầu tập luyện trong ứng dụng iPhone của mình, ứng dụng trên Apple Watch sẽ được khởi chạy với cấu hình được gửi từ iPhone của tôi.

Cho đến nay, rất tốt.

Bây giờ điều khiến API này trở nên thuận tiện là HealthKit quan tâm đến việc đồng bộ hóa cả trạng thái phiên chính và phiên được nhân đôi.

Ví dụ, khi phiên chính bị tạm dừng trên Apple Watch của tôi, phiên được nhân đôi trên iPhone của tôi cũng bị tạm dừng.

Ngoài việc nhận một bản sao của buổi tập luyện tích cực vào iPhone của tôi, HealthKit cũng cung cấp một API mới để trao đổi dữ liệu tập luyện có liên quan giữa cả hai thiết bị và cung cấp khả năng bắt đầu và kết thúc các hoạt động cũng như tạo ra các sự kiện.

Được rồi, bây giờ tôi đã sẵn sàng phiên chính và iPhone của tôi đã sẵn sàng để nhận trình xử lý, tôi sẽ bắt đầu phản chiếu từ Apple Watch của mình bằng cách gọi startMirroringToCompanionDevice và bắt đầu phiên chính.

Khi tôi gọi startMirroring trên Apple Watch, HealthKit khởi chạy ứng dụng iPhone đồng hành của tôi ở chế độ nền, cho ứng dụng của tôi 10 giây để bắt đầu hoạt động trực tiếp và gọi trình xử lý để bắt đầu phản chiếu.

Tuyệt vời, vì vậy chúng tôi đã bắt đầu phiên trên Apple Watch và nhận được bản sao trên iPhone.

Bây giờ, hãy để tôi chỉ cho bạn cách trạng thái phiên được giao tiếp giữa các thiết bị.

Trong ứng dụng ví dụ của tôi, tôi muốn cho người dùng thấy trạng thái của buổi tập luyện, chẳng hạn như liệu phiên đang chạy, tạm dừng, v.v.

Vì vậy, tôi sẽ thiết lập đại diện phiên trên Apple Watch và iPhone để theo dõi các bản cập nhật trạng thái phiên và các sự kiện được tạo.

Hãy nhớ rằng điều quan trọng là phải giữ một tham chiếu đến phiên được nhân đôi được truy xuất trên ứng dụng iPhone.

Gọi startActivity trên Apple Watch của tôi bắt đầu phiên chính và thay đổi trạng thái phiên để chạy.

Bản cập nhật trạng thái này được gửi đến ứng dụng Apple Watch của tôi vì nó được đặt làm đại diện phiên của phiên chính.

Ứng dụng của tôi trên iPhone cũng nhận được cập nhật trạng thái thông qua đại diện phiên được nhân đôi.

Thật dễ dàng để mang một buổi tập luyện tích cực lên iPhone và theo dõi những thay đổi trong một buổi tập.

Vì vậy, đây là những gì nó trông như thế nào.

Khi một buổi tập luyện được bắt đầu trên Apple Watch của tôi, nút tạm dừng trên iPhone và Apple Watch của tôi được kích hoạt để cho biết rằng buổi tập luyện đang chạy.

Ngoài việc đồng bộ hóa trạng thái phiên giữa phiên chính và phiên được nhân đôi, tôi cũng có thể tạo và gửi các sự kiện như tạm dừng và tiếp tục.

Khi tôi tạm dừng buổi tập luyện trên Apple Watch của mình, cả ứng dụng Apple Watch và phiên được nhân đôi trên iPhone của tôi đều được thông báo về sự kiện tạm dừng thông qua đại diện phiên của họ.

Và nó trông như thế này.

Khi tôi tạm dừng một buổi tập luyện trên Apple Watch của mình, nút tiếp tục trên cả hai thiết bị của tôi sẽ hoạt động.

Bây giờ tôi đã có một buổi tập luyện trên iPhone của mình, tôi cũng có thể điều khiển việc tập luyện từ iPhone.

Khi tôi tiếp tục phiên được nhân đôi trên iPhone của mình, đại diện phiên chính trên Apple Watch của tôi sẽ được thông báo về sự thay đổi trạng thái và đại diện phiên được nhân đôi sẽ nhận được sự kiện tiếp tục.

Tiếp theo, tôi muốn chỉ cho bạn cách tận dụng các tính năng đạp xe mới mà HealthKit sẽ giới thiệu trong năm nay, bao gồm các loại dữ liệu mới như tốc độ đạp xe, công suất, nhịp; một khả năng mới để kết nối trực tiếp với các thiết bị Bluetooth được thiết kế để cung cấp các loại dữ liệu này, tương tự như cách máy đo nhịp tim thu

Xe đạp của tôi có một đồng hồ đo công suất thu thập năng lượng và nhịp điệu, mà tôi đã ghép nối với Apple Watch của mình.

Cảm biến ghi dữ liệu vào Apple Watch của tôi và tôi muốn mở rộng ứng dụng của mình để gửi dữ liệu đó đến iPhone để hiển thị khi tôi lái xe.

Để làm điều này, trước tiên tôi sẽ bắt đầu thu thập các chỉ số đạp xe bằng cách sử dụng API startCollection trình tạo bài tập được đề xuất.

Và sau đó tôi sẽ gửi dữ liệu bằng cách sử dụng API sendData(toRemoteWorkoutSession).

Để gửi các chỉ số đạp xe, tôi sẽ đóng gói dữ liệu tốc độ, nhịp và nguồn nhận được từ các cảm biến Bluetooth trên Apple Watch của mình và gọi sendData(toRemoteWorkoutSession) trong phiên chính.

Kết quả là, đại diện phiên được nhân đôi trên iPhone của tôi sẽ nhận được cuộc gọi didReceiveDataFromRemoteDevice với dữ liệu gói, mà tôi có thể giải nén và hiển thị trên iPhone của mình.

Đây là cách nó trông giống như với ứng dụng ví dụ của tôi gửi số liệu đạp xe từ Apple Watch của tôi và cách chúng được hiển thị trong ứng dụng iPhone của tôi.

Sử dụng sendData(toRemoteWorkoutSession) tôi cũng có thể gửi dữ liệu theo hướng ngược lại từ iPhone sang Apple Watch của mình.

Trong ví dụ của tôi, tôi muốn theo dõi lượng nước uống của mình trong quá trình tập luyện để tôi có thể phân tích nó sau đó với hy vọng tạo ra một kế hoạch hydrat hóa tốt hơn cho chuyến đi tiếp theo của mình.

Để làm điều này, tôi sẽ đóng gói và gửi lượng nước tôi tiêu thụ trong phiên được nhân đôi từ iPhone của mình sang Apple Watch.

Phương thức ủy quyền của phiên chính didReceiveDataFromRemoteDevice được gọi với dữ liệu đóng gói mà tôi sẽ giải nén và lưu trên Apple Watch của mình.

Vì vậy, đây là cách nó trông như thế nào trong ứng dụng ví dụ của tôi.

Khi tôi nhấn vào nút để đếm từng ounce nước tôi lấy, nó sẽ gửi nó đến Apple Watch của tôi, nơi nó hiển thị tổng lượng nước tiêu thụ.

Bây giờ tôi có thể ngừng phản chiếu phiên bất cứ lúc nào trong quá trình tập luyện bằng cách gọi stopMirroringToCompanionDevice API.

Gọi phương thức này sẽ ngừng gửi dữ liệu đến thiết bị đồng hành và phương thức đại diện didDisconnectFromRemoteDevice WithError của phiên được nhân đôi sẽ được gọi.

Và khi tôi đạp xe xong, tôi sẽ kết thúc phiên chính và lưu nó trên Apple Watch bằng cách hoàn thành trình tạo.

Sau khi lưu mẫu tập luyện trên Apple Watch, nó đồng bộ hóa với các thiết bị khác của tôi và bây giờ tôi có thể hiển thị bản tóm tắt sau tập luyện với các biểu đồ và hình ảnh trực quan chi tiết hơn.

Tuyệt vời! Bước tiếp theo của tôi là trình bày bản tóm tắt sau tập luyện trong ứng dụng đang chạy trên iPad của tôi.

Vì bài tập tôi vừa lưu trên Apple Watch tự động đồng bộ hóa với iPad, tôi chỉ cần thực hiện một vài thay đổi để trực quan hóa dữ liệu tập luyện của mình.

Giống như bất kỳ ứng dụng nào truy cập dữ liệu HealthKit, ứng dụng của tôi trên iPad trước tiên sẽ cần có sự cho phép của người dùng.

Khi một ứng dụng yêu cầu ủy quyền, bảng ủy quyền sẽ được hiển thị nếu cần.

Trên iPad, ứng dụng của bạn có thể có nhiều cảnh cửa sổ, vì vậy điều quan trọng là phải đảm bảo rằng bảng ủy quyền được hiển thị trên cảnh thích hợp.

Để làm điều này trong ứng dụng của tôi, trước tiên tôi sẽ nhập khung HealthKitUI.

Tôi sẽ chỉ định các loại dữ liệu mà tôi quan tâm đến việc đọc, cụ thể là năng lượng hoạt động, tốc độ đạp xe, sức mạnh, nhịp, nhịp tim và các mẫu tập luyện.

Sau đó, kể từ khi tôi xây dựng một ứng dụng SwiftUI, tôi sẽ sử dụng công cụ sửa đổi chế độ xem healthDataAccessRequest mới từ khung HealthKitUI và chuyển các loại dữ liệu tôi muốn chia sẻ và đọc, cũng như kích hoạt.

Đặt trình kích hoạt thành true sẽ hiển thị bảng ủy quyền trong ứng dụng của tôi.

Đối với ứng dụng UIKit, bạn sẽ đặt thuộc tính healthStores.authorizationView ControllerPresenter, và sau đó yêu cầu ủy quyền với các loại để chia sẻ và đọc.

Bây giờ, với sự ủy quyền đã được xử lý, hãy kiểm tra bài tập của tôi trên iPad.

Thật tuyệt vời!

Bây giờ tôi có thể truy cập dữ liệu tập luyện của mình và tận dụng kích thước màn hình của iPad để tạo trải nghiệm phong phú hơn cho ứng dụng của mình.

Nó không phải là siêu dễ sao?

Giờ đây, bạn có thể bắt đầu và kiểm soát bài tập từ iPhone của mình, thu thập và đồng bộ hóa dữ liệu đạp xe phong phú từ Apple Watch của bạn và cuối cùng, xem chi tiết bài tập trên iPad của bạn.

Để kết thúc, hãy đảm bảo cập nhật ứng dụng của bạn để hỗ trợ ủy quyền trên iPad.

Nếu ứng dụng Thể hình của bạn liên quan đến việc đạp xe, bạn có thể thêm hỗ trợ cho các loại dữ liệu mới.

Nếu bạn xây dựng các ứng dụng tập luyện trên iPhone và Apple Watch, hãy xem các API phiên được nhân đôi mới để bắt đầu phản chiếu dữ liệu và kiểm soát trạng thái giữa cả hai thiết bị.

Nếu ứng dụng của bạn cần nó, hãy sử dụng số nhận dạng đồng bộ hóa và số phiên bản để giữ dữ liệu nhất quán trên máy chủ và thiết bị của người dùng.

Và cuối cùng, hãy cho chúng tôi phản hồi của bạn.

Chúng tôi muốn hỗ trợ các tính năng bạn cần để tiếp tục xây dựng những ứng dụng tuyệt vời đó để giữ cho thế giới khỏe mạnh.

Cảm ơn bạn đã xem.

♪