10013

Chào mừng đến với Meet StoreKit cho SwiftUI.

Tôi là Greg, một kỹ sư trong nhóm StoreKit.

Hãy nói về việc bán hàng mua hàng trong ứng dụng.

Mua hàng trong ứng dụng là tất cả về việc trình bày các dịch vụ sản phẩm của bạn và cung cấp một cách để khách hàng hoàn tất việc mua hàng.

Việc bán hàng bắt đầu bằng việc lấy dữ liệu về sản phẩm bạn đang bán và nhận được trạng thái của khách hàng.

Ví dụ, khách hàng đã sở hữu sản phẩm không tiêu hao của tôi chưa?

Họ đã đăng ký đăng ký của tôi chưa?

Bạn kết hợp dữ liệu này để xây dựng giao diện tiếp thị sản phẩm cho khách hàng và cung cấp các tương tác để mua sản phẩm.

Hình chữ nhật nhỏ màu đỏ này đại diện cho tất cả công việc khó khăn để xây dựng giao diện của bạn.

Thực sự có nhiều khía cạnh để xây dựng giao diện của bạn, đòi hỏi các kỹ năng từ nhiều lĩnh vực khác nhau.

Sau đó, khách hàng của bạn chọn mua sản phẩm của bạn.

Ứng dụng của bạn cần phản hồi bằng cách sử dụng API mua hàng và sau đó cập nhật giao diện của nó do kết quả của việc mua hàng.

Nếu bạn đã từng thêm giao dịch mua trong ứng dụng vào một ứng dụng, bạn biết rằng việc bán hàng đúng cách là rất quan trọng.

Sẽ thật tuyệt nếu chúng ta có thể trừu tượng hóa tất cả các bước này thành một cái nhìn đơn giản nhưng mạnh mẽ?

Chế độ xem này có thể xử lý tất cả các chức năng phổ biến và lấy các tham số cho phép bạn định cấu hình các bit tạo ra ứng dụng của bạn, ứng dụng của bạn.

Chà, tôi rất vui mừng được giới thiệu một bộ API mới mạnh mẽ từ StoreKit để xây dựng giao diện người dùng bán hàng.

Trong Xcode 15, StoreKit hiện cung cấp một bộ sưu tập các chế độ xem SwiftUI, giúp bạn xây dựng giao diện người dùng mua hàng trong ứng dụng khai báo.

Bạn chỉ cần khai báo những gì bạn muốn trải nghiệm bán hàng, và hệ thống đưa các tuyên bố của bạn vào hành động đằng sau hậu trường.

StoreView, ProductView và SubscriptionStoreView là những chế độ xem mới giúp bạn bắt đầu và chạy bán hàng nhanh hơn bao giờ hết.

Những chế độ xem này trừu tượng hóa luồng dữ liệu từ App Store và hiển thị giao diện người dùng do hệ thống cung cấp để đại diện cho các giao dịch mua trong ứng dụng của bạn.

Bạn thậm chí có thể sử dụng SwiftUI API mà bạn đã quen thuộc để tùy chỉnh cách các chế độ xem này tích hợp với ứng dụng của bạn.

Cũng giống như SwiftUI, những chế độ xem mới này được hỗ trợ trên tất cả các nền tảng, vì vậy việc mua hàng trong ứng dụng sẽ dễ dàng hơn bao giờ hết trên iPhone, iPad, Mac, Apple Watch và Apple TV.

Một nhóm bạn lông vũ đã tiếp cận tôi và hỏi liệu tôi có thể giúp họ thêm các giao dịch mua trong ứng dụng vào trò chơi mới của họ có tên là Backyard Birds không.

Với những quan điểm mới này từ StoreKit, tất nhiên tôi đã nói, "Không vấn đề gì cả."

Tham gia cùng tôi khi chúng tôi mang đến trải nghiệm mua hàng trong ứng dụng tuyệt vời ở Backyard Birds.

Vui lòng tải xuống dự án mẫu để giải quyết vấn đề này với tôi.

Chúng tôi sẽ sử dụng Xcode Previews để nhanh chóng lặp lại các chế độ xem SwiftUI của chúng tôi.

Bởi vì chúng ta có quá nhiều thứ để giải quyết, tôi đã thiết lập một tệp cấu hình StoreKit.

Điều này chứa siêu dữ liệu về các giao dịch mua trong ứng dụng của chúng tôi, cần thiết để sử dụng Bản xem trước Xcode với StoreKit.

Chúng tôi có một số phiên tuyệt vời để giúp bạn bắt đầu trong ứng dụng của riêng mình, chẳng hạn như, "Có gì mới trong Kiểm tra StoreKit" và "Giới thiệu Kiểm tra StoreKit trong Xcode."

Hãy vào ngay Xcode.

Ở Backyard Birds, chúng tôi muốn bán thức ăn cho chim cao cấp như viên dinh dưỡng này.

Sau khi mua thức ăn, chúng ta có thể để nó ở sân sau của mình để thu hút nhiều du khách chim đói hơn.

Hãy nhảy vào mã để xem cách chúng ta có thể tận dụng StoreKit để bán những sản phẩm này.

Để bắt đầu, chúng tôi sẽ tạo một khung cảnh được gọi là BirdFoodShop để bán thức ăn cho chim của chúng tôi.

Tôi đã tạo một tệp để thực hiện chế độ xem này.

Để sử dụng StoreKit để xây dựng chế độ xem của chúng tôi, chúng tôi cần nhập cả StoreKit và SwiftUI ở đầu tệp.

Tiếp theo, tôi sẽ khai báo một truy vấn ở đây để có được mô hình dữ liệu thức ăn cho chim của chúng tôi, điều này sẽ giúp chúng tôi xây dựng cửa hàng của mình.

Tôi đang thêm StoreView vào ứng dụng vì đó là cách nhanh nhất để thiết lập và chạy chế độ xem bán hàng.

Chúng tôi cần cung cấp cho nó một bộ sưu tập các số nhận dạng sản phẩm từ tệp cấu hình StoreKit của chúng tôi, mà chúng tôi có thể nhận được từ mô hình birdFood.

Sau tuyên bố này, bây giờ chúng tôi có quan điểm bán hàng đang hoạt động.

StoreKit tải tất cả các số nhận dạng sản phẩm từ App Store và trình bày chúng trong giao diện người dùng để chúng tôi xem.

Tên hiển thị, mô tả và giá cả đều đến trực tiếp từ App Store, sử dụng những gì bạn đã thiết lập trong App Store Connect hoặc tệp cấu hình StoreKit của bạn.

StoreKit thậm chí còn xử lý các cân nhắc tinh tế hơn, nhưng quan trọng hơn, như lưu trữ dữ liệu cho đến khi hết hạn hoặc hệ thống chịu áp lực bộ nhớ và kiểm tra xem việc mua hàng trong ứng dụng có bị vô hiệu hóa trong Thời gian sử dụng hay không.

Trước đó, các nhà thiết kế chim đã gửi các biểu tượng trang trí cho mỗi sản phẩm thức ăn cho chim.

Chúng tôi có thể thêm các biểu tượng này vào Chế độ xem cửa hàng chỉ bằng cách thêm trình tạo chế độ xem cuối và chuyển sang chế độ xem SwiftUI đại diện cho các biểu tượng của chúng tôi.

Trình tạo chế độ xem lấy giá trị Sản phẩm làm tham số mà chúng ta có thể sử dụng để xác định biểu tượng để sử dụng.

Tôi đã tạo một chế độ xem trợ giúp lấy ID sản phẩm và tra cứu biểu tượng bên phải từ danh mục tài sản của chúng tôi.

Khi tôi đặt cái này ở đây, bạn có thể xem các bản cập nhật xem trước để hiển thị các biểu tượng cho từng sản phẩm của chúng tôi.

Chế độ xem cửa hàng giúp chúng tôi bắt đầu và chạy dễ dàng bằng cách biến các số nhận dạng và biểu tượng sản phẩm của chúng tôi thành một cửa hàng có chức năng và được thiết kế tốt.

Một tính năng mạnh mẽ của Chế độ xem cửa hàng là, các sản phẩm của chúng tôi tự động điều chỉnh theo các nền tảng khác nhau, vì vậy chúng tôi đã có một cửa hàng trông tuyệt vời trên iPad, Mac và Apple Watch.

Hãy thay đổi mục tiêu của chúng tôi trong Xcode thành Apple Watch để xem trước cửa hàng của chúng tôi.

Trông thật tuyệt!

Tôi nghĩ chúng tôi cũng đã sẵn sàng để bán một số thức ăn cho chim trên Apple Watch.

Người ta thường muốn sắp xếp các sản phẩm của mình theo cách duy nhất cho sản phẩm của bạn.

Đội ngũ thiết kế chim của chúng tôi đã làm việc chăm chỉ để tạo ra một bố cục để giới thiệu thức ăn cho chim.

Thành phần này thể hiện giá trị tốt nhất một cách nổi bật và sắp xếp các sản phẩm khác vào các kệ.

Điều này khác với bố cục kiểu danh sách mà chúng ta có thể đạt được với StoreView, nhưng StoreKit cũng đã đề cập đến chúng ta ở đây.

Để bố cục chi tiết hơn, chúng ta có thể sử dụng ProductView mới.

Trên thực tế, StoreView mà chúng tôi vừa xem xét sử dụng cùng một ProductView để tạo các hàng của nó.

Hãy bắt đầu bằng cách khai báo một thùng chứa cho cửa hàng mới của chúng tôi.

Tôi muốn giới thiệu hộp viên dinh dưỡng này nổi bật hơn các sản phẩm khác, bởi vì đó là giá trị tốt nhất của chúng tôi.

Để làm điều này, tôi sẽ khai báo ProductView bằng cách cung cấp ID cho hộp viên dinh dưỡng.

Cũng giống như với StoreView, chúng ta có thể thêm biểu tượng trang trí bằng cách thêm phần đóng cuối.

Tôi sẽ sử dụng lại chế độ xem trợ giúp của chúng tôi từ trước.

Tiếp theo, hãy thêm một phần bên dưới cho các mặt hàng thực phẩm khác.

Tôi sẽ bắt đầu bằng cách đặt một nền tảng đằng sau giá trị tốt nhất...

Sau đó, một tiêu đề cùng với một chế độ xem trợ giúp khác mà tôi đã thực hiện để bày thức ăn cho chim của chúng tôi trên kệ.

Bên trong chế độ xem trợ giúp kệ này, chúng tôi có thể khai báo Chế độ xem sản phẩm cho từng sản phẩm thức ăn cho chim, cùng với biểu tượng trang trí của chúng tôi.

Có một điều cuối cùng chúng ta cần gắn kết toàn bộ cửa hàng này lại với nhau.

Chúng tôi thực sự muốn trưng bày hộp viên dinh dưỡng này một cách nổi bật cho khách hàng, nhưng các nhà thiết kế chim nghĩ rằng những gì chúng tôi có bây giờ có thể trông đẹp hơn.

Để xoa dịu những chú chim, chúng ta có thể sử dụng API productViewStyle mới để thiết lập phong cách cho sản phẩm anh hùng của chúng ta.

Tôi sẽ chọn phong cách lớn để thực sự làm cho nó nổi bật.

Chỉ trong vài phút, chúng tôi đã xây dựng một cửa hàng chuyên biệt chỉ dành cho thức ăn cho chim của chúng tôi bằng cách sử dụng ProductView mới trong StoreKit.

Phong cách ProductView lớn giúp chúng tôi hiển thị giá trị tốt nhất của mình một cách nổi bật chỉ bằng cách thêm một công cụ sửa đổi chế độ xem.

Có ba kiểu tiêu chuẩn để lựa chọn phù hợp với nhu cầu của bạn.

Nhỏ gọn giúp trưng bày nhiều sản phẩm hơn trong một không gian nhỏ hơn, kệ thức ăn cho chim của chúng tôi tự động sử dụng kiểu Thông thường và tất nhiên, phong cách Lớn rất phù hợp cho các bài thuyết trình nổi bật.

Vì StoreView bao gồm các phiên bản ProductView, bạn có thể sử dụng cùng một công cụ sửa đổi productViewStyle để thay đổi kiểu của StoreView.

Bạn thậm chí có thể tạo các kiểu tùy chỉnh và sử dụng chúng với ProductView và StoreView.

Hãy ở lại, và tôi sẽ chỉ cho bạn cách sau trong phiên.

Chúng tôi đã xây dựng một cách tuyệt vời để cung cấp dịch vụ mua thức ăn cho chim tiêu hao trong ứng dụng bằng ProductView.

Những người kinh doanh nghĩ rằng chúng tôi chưa đi đủ xa và họ đã giao nhiệm vụ cho tôi cung cấp một đăng ký có tên Backyard Birds Pass cho những người đam mê ngắm chim nhất.

Mặc dù chúng tôi có thể xây dựng giao diện người dùng đăng ký bằng ProductView hoặc StoreView, nhưng SubscriptionStoreView mới được xây dựng dành riêng cho các đăng ký.

Hãy quay lại Xcode và cùng nhau xây dựng cái này.

Để bắt đầu, trong cấu hình StoreKit của chúng tôi, tôi đã tạo nhóm đăng ký "Backyard Birds Pass" này cung cấp ba cấp độ dịch vụ.

Lưu ý ID nhóm này. Chúng ta sẽ cần cái này trong giây lát.

Trước đó, tôi đã tạo một tệp mới cho cửa hàng thẻ của chúng tôi, vì vậy hãy đi sâu vào SubscriptionStoreView.

Cách nhanh nhất để bắt đầu và chạy với SubscriptionStoreView là cung cấp ID nhóm từ tệp cấu hình StoreKit hoặc App Store Connect của chúng tôi.

Tôi đã thêm ID nhóm vào môi trường của chúng tôi, vì vậy chúng tôi chỉ có thể khai báo một thuộc tính môi trường để truy cập nó, và sau đó khai báo SubscriptionStoreView bằng cách cung cấp ID nhóm.

Cũng giống như StoreView và ProductView, SubscriptionStoreView quản lý luồng dữ liệu cho chúng tôi và đưa ra một chế độ xem với các tùy chọn gói khác nhau.

Nó cũng kiểm tra trạng thái người đăng ký hiện tại và liệu khách hàng có đủ điều kiện nhận ưu đãi giới thiệu hay không.

Mặc dù giao diện tự động này rất tuyệt, nhưng có một số API mới mạnh mẽ mà chúng tôi có thể sử dụng để làm cho nó phù hợp với giao diện của Backyard Birds.

Ví dụ, chúng ta có thể thay thế nội dung tiếp thị trong tiêu đề bằng bất kỳ chế độ xem SwiftUI nào.

Tôi đã xây dựng chế độ xem nội dung tiếp thị trước đó, vì vậy tôi sẽ thả cái này vào đây.

Chúng tôi cũng có thể thêm nền vùng chứa vào Cửa hàng đăng ký để làm cho mọi thứ trở nên thú vị hơn về mặt thị giác.

Chúng ta có thể sử dụng SwiftUI containerBackground API mới.

Chú ý cách tôi chọn đặt cái này ở chiều cao đầy đủ của Cửa hàng đăng ký và sau đó khai báo chế độ xem mà tôi đã tạo trước đó với độ dốc bầu trời và một số đám mây.

Để kết hợp mọi thứ lại với nhau, chúng ta có thể sử dụng một số API khác để tạo kiểu cho Cửa hàng đăng ký.

Theo mặc định, Cửa hàng đăng ký thêm một lớp vật liệu giữa các điều khiển đăng ký và nền có chiều cao đầy đủ.

Chúng ta có thể sử dụng công cụ sửa đổi kiểu nền để làm cho nền đằng sau các điều khiển đăng ký rõ ràng.

Bây giờ, tôi sẽ sử dụng subscriptionStoreButtonLabel để chọn bố cục nhiều dòng cho nút đăng ký của chúng tôi.

Lưu ý cách nút đăng ký hiện chứa cả giá và "Dử miễn phí".

Tiếp theo, tôi sẽ thêm subscriptionStorePickerItemBackground để khai báo hiệu ứng vật chất cho các tùy chọn đăng ký của chúng tôi.

Ở đây, chúng ta có thể thấy độ dốc bầu trời tỏa sáng thông qua các tùy chọn gói đăng ký.

Cuối cùng, vì đăng ký của chúng tôi có mã ưu đãi, tôi sẽ sử dụng công cụ sửa đổi storeButton mới để khai báo nút Đổi mã là hiển thị.

Chỉ với một công cụ sửa đổi chế độ xem này, chúng tôi có một nút để khách hàng mở bảng đổi mã ưu đãi.

Bây giờ, chế độ xem đăng ký của chúng tôi phù hợp với cảm giác của phần còn lại của Backyard Birds.

Mặc dù những lượt xem mới này làm giảm đáng kể nỗ lực cần thiết để thêm giao dịch mua trong ứng dụng vào ứng dụng, nhưng có một vài phần quan trọng mà chúng tôi đang thiếu.

Đầu tiên, chúng ta phải thêm logic để thực sự mở khóa nội dung sau khi mua hàng được thực hiện.

Thứ hai, chúng ta cần kiểm tra xem ai đó đã đăng ký chưa và sau đó ẩn bất kỳ điều khiển nào trình bày SubscriptionStoreView.

Chế độ xem StoreKit xử lý những khách hàng đã đăng ký tự động, nhưng trong nhiều trường hợp, trải nghiệm tốt nhất là chọn không trình bày bất kỳ giao diện người dùng bán hàng nào cho khách hàng hiện tại.

StoreKit có một số API hoàn toàn mới để giúp việc triển khai những khả năng quan trọng này dễ dàng và thú vị như bán nội dung của bạn.

Trước khi bạn bắt đầu với các API này, bạn sẽ muốn triển khai logic kinh doanh của mình hoặc ít nhất là có một số giàn giáo tại chỗ.

Đảm bảo bạn đang xử lý các giao dịch cập nhật, hợp tác với máy chủ của mình, theo dõi các quyền lợi tiêu hao và tạo mô hình dữ liệu phù hợp với mã giao diện người dùng của bạn, trong số những thứ khác.

Tôi khuyên bạn nên kiểm tra "Gặp gỡ StoreKit 2" và "Có gì mới trong API máy chủ App Store" để tìm hiểu thêm về việc triển khai logic kinh doanh của bạn.

Tôi đã tiếp tục và triển khai logic kinh doanh chim của chúng tôi thành một diễn viên tên là BirdBrain.

Bạn sẽ thấy tôi tham khảo điều này sớm thôi.

Hãy bắt đầu với việc cho những người quan sát chim quyền truy cập vào thức ăn cho chim tiêu hao mà họ mua.

Xử lý các giao dịch mua đến từ bất kỳ chế độ xem StoreKit nào đều đơn giản.

Bạn chỉ cần sửa đổi chế độ xem với onInAppPurchaseCompletion và cung cấp chức năng gọi bất cứ khi nào giao dịch mua hoàn tất.

Bạn có thể sửa đổi bất kỳ chế độ xem nào bằng phương pháp này và nó sẽ được gọi bất cứ khi nào chế độ xem StoreKit hậu duệ kết thúc giao dịch mua.

Hãy thêm công cụ sửa đổi này vào BirdFoodShop của chúng tôi.

Công cụ sửa đổi cung cấp cho chúng tôi sản phẩm đã được mua và kết quả mua hàng, cho dù nó có thành công hay không.

Hãy thực hiện điều này để gửi bất kỳ kết quả thành công nào đến diễn viên BirdBrain để xử lý.

Bằng cách thêm công cụ sửa đổi này, chúng tôi hiện đang mở khóa thức ăn cho chim tiêu hao mà mọi người mua.

Hãy thử cái này trong trình giả lập.

Tôi sẽ chọn một sân sau và khai thác nguồn cung cấp.

Sau đó, tôi sẽ mua một số viên dinh dưỡng.

Sau khi tờ giấy bị loại bỏ, bạn sẽ nhận thấy chúng tôi hiện có năm viên dinh dưỡng trong kho vật tư của mình.

Bây giờ, chúng ta có thể đặt một viên dinh dưỡng và ngồi lại khi viên của chúng ta mang tất cả những con chim đói đến sân.

Ngoài onInAppPurchaseCompletion, có một vài công cụ sửa đổi chế độ xem liên quan khác mà bạn có thể sử dụng để xử lý các sự kiện từ chế độ xem StoreKit.

Bạn có thể sử dụng onInAppPurchaseStart để xử lý khi ai đó kích hoạt nút mua hàng, nhưng trước khi giao dịch mua bắt đầu.

Điều này rất hữu ích nếu bạn muốn cập nhật một số thành phần giao diện người dùng trong khi giao dịch mua đang chạy, như điều khiển làm mờ.

Chức năng bạn cung cấp ở đây nhận được sản phẩm sẽ được mua dưới dạng tham số.

Khi sử dụng các công cụ sửa đổi này, điều quan trọng là phải biết rằng chúng sẽ xử lý các sự kiện từ bất kỳ phiên bản ProductView, StoreView hoặc SubscriptionStoreView hậu duệ nào.

Nếu bạn thêm nhiều công cụ sửa đổi, tất cả các hành động của bạn sẽ chạy cho mỗi sự kiện.

Hãy nhớ rằng, sử dụng các công cụ sửa đổi này là hoàn toàn tùy chọn.

Theo mặc định, các giao dịch thành công từ chế độ xem StoreKit sẽ phát ra từ chuỗi Transaction.updates, nhưng bạn có tùy chọn thêm onInAppPurchaseCompletion để xử lý kết quả trực tiếp.

Bạn có thể chuyển số không cho bất kỳ công cụ sửa đổi nào trong số này để trở lại hành vi mặc định.

Bây giờ, hãy nói về việc xử lý đăng ký Backyard Birds Pass.

Ngoài các API chế độ xem mới, StoreKit có các công cụ sửa đổi chế độ xem mới để khai báo các phụ thuộc dữ liệu trong SwiftUI.

Đầu tiên, tôi sẽ đề cập đến đăng ký StatusTask, mà chúng ta có thể sử dụng để giúp việc mở khóa thẻ của mình trở nên dễ dàng.

Trong bất kỳ chế độ xem nào phụ thuộc vào đăng ký của chúng tôi, chúng tôi có thể thêm công cụ sửa đổi subscriptionStatusTask.

Hãy bắt đầu với Backyard Grid, bởi vì đây là nơi chúng tôi hiển thị nút để mở bảng ưu đãi đăng ký.

Công cụ sửa đổi subscriptionStatusTask lấy ID nhóm của đăng ký mà chúng tôi phụ thuộc vào.

Đây là cùng một ID nhóm mà chúng tôi đã sử dụng trước đó khi chúng tôi khai báo SubscriptionStoreView.

Bây giờ, bất cứ khi nào Backyard Grid xuất hiện, một tác vụ nền sẽ tải trạng thái đăng ký và sau đó gọi chức năng mà chúng tôi cung cấp sau khi nhiệm vụ hoàn thành.

Cách tốt nhất để sử dụng API này là chỉ cần chuyển các trạng thái cho logic kinh doanh của chúng tôi, trong trường hợp của chúng tôi, tác nhân BirdBrain, và sau đó yêu cầu tác nhân xử lý dữ liệu và trả về một loại mô hình dễ làm việc hơn trong mã giao diện người dùng của chúng tôi.

Tôi đã tạo danh sách trạng thái Pass này, vì vậy tôi sẽ chỉ tạo một thuộc tính của tiểu bang để gán cái này cho.

Sau đó, chúng tôi có thể chọn chỉ hiển thị thẻ ưu đãi đăng ký nếu ai đó hiện không đăng ký.

Với những bổ sung nhanh chóng này, bây giờ chúng tôi sẽ chỉ hiển thị thẻ ưu đãi cho những người quan sát chim chưa đăng ký.

StoreKit sẽ gọi chức năng của chúng tôi khi trạng thái thay đổi, vì vậy chế độ xem của chúng tôi sẽ luôn phản ánh thông tin cập nhật nhất.

Chúng tôi có thể sử dụng cùng một mẫu này trong toàn bộ ứng dụng để mở khóa nội dung Backyard Birds Pass và chúng tôi có thể sử dụng công cụ sửa đổi onInAppPurchaseCompletion để tự động loại bỏ bảng Pass Shop sau khi đăng ký thành công.

Tôi đã hoàn thành phần này sớm hơn, vì vậy hãy chạy ứng dụng trong trình mô phỏng iPhone và kiểm tra toàn bộ điều này.

Tôi sẽ chỉ nhấn Kiểm tra nó và nhấn Dùng thử miễn phí.

Bảng thanh toán xuất hiện và tôi có thể nhấn Đăng ký, sau đó bỏ qua cảnh báo.

Xem cách bảng ưu đãi tự động loại bỏ và thẻ ưu đãi cũng bị ẩn.

Đó là bởi vì nhiệm vụ trạng thái đăng ký gọi lại chức năng của chúng tôi mỗi khi trạng thái thay đổi, vì vậy chúng tôi có thể chắc chắn rằng giao diện người dùng của ứng dụng của chúng tôi luôn được cập nhật.

Mặc dù chúng tôi đang nói về chủ đề này, nếu ứng dụng của bạn cung cấp các đăng ký không phải hàng tiêu dùng hoặc không gia hạn, có một API mới để giúp việc kiểm tra các quyền lợi dễ dàng như subscriptionStatusTask.

Bạn có thể sử dụng công cụ sửa đổi currentEntitlementTask để khai báo chế độ xem phụ thuộc vào quyền lợi hiện tại cho ID sản phẩm và hệ thống sẽ tải không đồng bộ quyền lợi hiện tại và gọi hàm của bạn với quyền lợi hiện tại bất cứ khi nào nó thay đổi.

Các chức năng bạn cung cấp cho cả subscriptionStatusTask và currentEntitlementTask lấy trạng thái nhiệm vụ quyền lợi làm tham số.

Bằng cách đó, bạn có thể chọn xử lý chi tiết trường hợp khi quyền lợi vẫn đang tải, nếu nó không tải được và khi quyền lợi được tải thành công.

Tôi đã đề cập đến cách các chế độ xem StoreKit mới này giúp hợp lý hóa việc tích hợp mua hàng trong ứng dụng trong Backyard Birds.

Bây giờ, tôi muốn đi sâu hơn một chút và chỉ ra cách bạn có thể đưa những quan điểm này tiến thêm một bước với tất cả các API StoreKit mới cho SwiftUI.

Đầu tiên, chúng ta sẽ xem xét nhiều tùy chọn hơn để thiết lập các biểu tượng cho ProductView và StoreView.

Sau đó, tôi sẽ đi vào chi tiết về kiểu dáng của Chế độ xem sản phẩm.

Sau đó, tôi sẽ đề cập đến cách thêm các nút có chức năng chung vào StoreView và SubscriptionStoreView.

Cuối cùng, tôi sẽ đi sâu vào các API mới khác nhau mà bạn có thể sử dụng để làm cho Chế độ xem cửa hàng đăng ký phù hợp với giao diện thương hiệu của bạn.

Hãy đi vào các biểu tượng trang trí.

Khi bạn cung cấp một biểu tượng, tất cả các kiểu Chế độ xem sản phẩm tiêu chuẩn đều hiển thị biểu tượng giữ chỗ trong khi sản phẩm đang tải, giống như những gì bạn có thể thấy ở bên trái.

Đôi khi biểu tượng tự động không khớp chính xác với những gì bạn mong đợi biểu tượng thực tế.

Ví dụ, trên iPhone, trình giữ chỗ tự động là một hình vuông, nhưng chúng tôi sử dụng các biểu tượng hình tròn cho các sản phẩm Thức ăn cho chim.

Bạn có thể dễ dàng cải thiện giao diện này bằng cách thêm đóng cửa thứ hai vào ProductView của mình bằng biểu tượng bạn muốn sử dụng cho trình giữ chỗ của mình.

Trong trường hợp này, tôi vừa cung cấp một vòng tròn cho trình giữ chỗ.

Nếu bạn đặt hình ảnh quảng cáo App Store trong App Store Connect, bạn có thể yêu cầu ProductView sử dụng cùng một hình ảnh đó thay vì chế độ xem SwiftUI.

Chỉ cần đặt tham số prefersPromotionalIcon thành true.

Bạn vẫn có thể cung cấp chế độ xem SwiftUI như một dự phòng, nhưng chế độ xem này sẽ bị bỏ qua miễn là sản phẩm có biểu tượng quảng cáo.

Kiểm tra "Có gì mới trong StoreKit 2 và Kiểm tra StoreKit trong Xcode" và "Có gì mới trong App Store Connect" để tìm hiểu cách thiết lập biểu tượng quảng cáo.

Ngay cả khi bạn không muốn sử dụng biểu tượng quảng cáo từ App Store, bạn vẫn có thể sử dụng cách xử lý biểu tượng mua hàng trong ứng dụng thú vị cho các biểu tượng của mình được khai báo trong SwiftUI.

Chỉ cần thêm công cụ sửa đổi này vào chế độ xem bạn cung cấp cho biểu tượng để thêm đường viền này vào chế độ xem của bạn.

Đó là tất cả về các biểu tượng trong Chế độ xem sản phẩm.

Hãy nhớ rằng, có API tương ứng để thực hiện tất cả những điều tương tự với các biểu tượng Chế độ xem cửa hàng.

Bây giờ, hãy nói về việc tạo kiểu cho Chế độ xem sản phẩm.

Trước đó trong phiên, tôi đã đề cập rằng bạn có thể tạo các kiểu Chế độ xem sản phẩm tùy chỉnh và cuối cùng đã đến lúc tôi chỉ cho bạn cách thực hiện.

Giao diện, hành vi bố cục và tương tác của Chế độ xem sản phẩm hoàn toàn được xác định bởi phong cách mà nó sử dụng.

Vì vậy, nếu bạn không thể tìm thấy một phong cách tiêu chuẩn phù hợp với những gì bạn đang làm, bạn luôn có thể tạo phong cách Chế độ xem sản phẩm tùy chỉnh của riêng mình.

Trường hợp đầu tiên chúng ta sẽ xem xét liên quan đến việc tạo các kiểu tùy chỉnh bao gồm các kiểu tiêu chuẩn để bạn không bắt đầu lại từ đầu.

Ví dụ, điều gì sẽ xảy ra nếu bạn muốn Chế độ xem sản phẩm hiển thị trình quay tiến trình thay vì giao diện trình giữ chỗ tiêu chuẩn trong khi tải?

Bước đầu tiên để tạo một kiểu tùy chỉnh là tạo một kiểu phù hợp với giao thức ProductViewStyle.

Yêu cầu duy nhất để triển khai giao thức là phương thức makeBody này.

Giá trị cấu hình được chuyển đến phương thức makeBody của bạn có tất cả các thuộc tính bạn cần để khai báo Chế độ xem sản phẩm tuyệt vời.

Ví dụ, nó có một bảng liệt kê trạng thái bao gồm các trạng thái tải sản phẩm khác nhau.

Để tùy chỉnh giao diện tải, chúng ta chỉ cần khai báo ProgressView cho trạng thái tải.

Sau đó, chúng ta có thể dự phòng hành vi ProductView tiêu chuẩn cho bất kỳ trạng thái nào khác bằng cách chuyển cấu hình sang phiên bản ProductView.

Bạn áp dụng các kiểu tùy chỉnh giống như cách bạn thực hiện các kiểu tiêu chuẩn, bằng cách chuyển nó đến công cụ sửa đổi productViewStyle.

Tất nhiên, bạn không cần phải sáng tác phong cách tùy chỉnh của mình với phong cách tiêu chuẩn.

Bạn luôn có thể xác định phong cách của mình bằng cách sử dụng các chế độ xem khác trong phương thức makeBody.

Khi trạng thái nhiệm vụ thành công, bạn có thể truy cập giá trị Sản phẩm mà chế độ xem đang đại diện.

Đây là cùng một giá trị Sản phẩm mà bạn đã quen làm việc nếu ứng dụng của bạn sử dụng StoreKit 2.

Bạn có thể sử dụng tất cả các thuộc tính của Sản phẩm để tạo chế độ xem của mình.

Cấu hình cũng cho phép bạn truy cập biểu tượng trang trí.

Khi bạn thêm nút mua hàng, hãy đảm bảo sử dụng phương thức mua hàng trên giá trị cấu hình, không phải giá trị sản phẩm.

Sử dụng phương thức trên cấu hình sẽ thêm các tùy chọn mua mặc định để đảm bảo bảng xác nhận thanh toán hiển thị gần với Chế độ xem sản phẩm của bạn và cũng kích hoạt các công cụ sửa đổi phản ứng như onInAppPurchaseCompletion.

Hãy nhớ rằng: khi phong cách tùy chỉnh của bạn được xây dựng từ đầu, giao diện và hành vi của Chế độ xem sản phẩm sử dụng phong cách này sẽ khớp với chế độ xem bạn đã soạn để xây dựng phong cách.

Tạo các kiểu tùy chỉnh là một cách tuyệt vời để tận dụng tất cả cơ sở hạ tầng cho Chế độ xem sản phẩm, chẳng hạn như luồng dữ liệu App Store, đồng thời tự do khai báo bất kỳ giao diện và hành vi nào bạn muốn.

Trong khi tải, giao diện người dùng mà chúng tôi đã xây dựng cho Bird Food Shop hiển thị các hình dạng giữ chỗ cho mỗi sản phẩm.

Nhưng điều gì sẽ xảy ra nếu chúng ta muốn có một diện mạo như con quay tải này ở bên phải?

Giải pháp cho vấn đề này là nâng cao trạng thái.

Hãy để tôi giải thích ý tôi ở đây.

Sơ đồ này thể hiện hệ thống phân cấp của BirdFoodShop mà chúng tôi đã xây dựng trước đó.

BirdFoodShop có một số hậu duệ của ProductView.

Khi bạn khởi tạo ProductView bằng ID sản phẩm, mỗi chế độ xem bên trong sẽ giữ trạng thái của sản phẩm vì thao tác tải không đồng bộ.

Nếu bạn muốn tạo hiệu ứng trong đó BirdFoodShop mẹ hiển thị hình thức khác trong khi các sản phẩm đang tải, bạn sẽ cần nâng trạng thái của mình lên BirdFoodShop mẹ.

Khi BirdFoodShop mẹ đang quản lý trạng thái của sản phẩm, bạn có thể tự do thay đổi giao diện trong khi dữ liệu đang tải và sau đó tạo các phiên bản ProductView bằng cách sử dụng các giá trị sản phẩm được tải sẵn thay vì ID của chúng.

Cho đến nay, chúng tôi chỉ đề cập đến việc tạo Lượt xem Sản phẩm theo ID sản phẩm, nhưng điều quan trọng cần biết là bạn có thể chuyển giá trị Sản phẩm mà bạn đã tải lên Chế độ xem Sản phẩm.

Điều này khiến Chế độ xem sản phẩm bỏ qua quá trình tải và chỉ cần bố trí chế độ xem bán hàng trực tiếp.

Bạn có thể đang nghĩ: tất cả đều tuyệt vời, nhưng để làm được điều đó, bây giờ tôi phải viết yêu cầu sản phẩm của riêng mình và logic bộ nhớ đệm.

Chà, bạn sẽ rất vui khi biết chúng tôi đang hiển thị bên trong chế độ xem StoreKit dưới dạng công cụ sửa đổi chế độ xem, vì vậy bạn có thể khai báo bất kỳ chế độ xem nào là phụ thuộc vào siêu dữ liệu cho ID sản phẩm.

StoreKit sẽ xử lý việc tải các sản phẩm cho bạn, lưu trữ chúng và cập nhật chúng.

Để làm điều này, bạn chỉ cần sử dụng công cụ sửa đổi storeProductsTask mới.

Tương tự như subscriptionStatusTask mà chúng tôi đã đề cập trước đó, bạn chuyển một bộ sưu tập ID sản phẩm để xem phụ thuộc vào.

Sau đó, bạn nhận được một giá trị trạng thái mà bạn có thể sử dụng để xử lý các trạng thái của nhiệm vụ không đồng bộ.

Tất cả điều này sẽ cảm thấy khá quen thuộc sau khi chúng tôi vừa xem xét việc triển khai ProductViewStyle tùy chỉnh.

Từ đây, chúng tôi có thể hiển thị chế độ xem tải của mình khi tải....

Sử dụng ContentUnavailableView mới nếu các sản phẩm không có sẵn... Hoặc chỉ hiển thị trực tiếp BirdFoodShop của chúng tôi với các giá trị Sản phẩm được tải sẵn.

Thật dễ dàng.

Nói về sự dễ dàng, có một số hành động phổ biến hữu ích để đưa vào giao diện người dùng bán hàng trong ứng dụng.

StoreView và SubscriptionStoreView giúp việc thêm các nút phụ trợ cho các hành động phổ biến này thực sự dễ dàng.

Khi tôi nói về các nút phụ trợ, ý tôi là các nút thực hiện các hành động hỗ trợ mục đích chính của chế độ xem.

Ví dụ, nút Hủy và nút Đổi Mã này đều phụ trợ để đăng ký thẻ.

Chúng tôi đã xem xét việc thêm nút Đổi Mã bằng cách sử dụng công cụ sửa đổi storeButton khi chúng tôi lần đầu tiên xây dựng trang tính này.

Chúng ta hãy xem xét kỹ hơn công cụ sửa đổi chế độ xem này.

Có một vài giá trị bạn có thể truyền cho mỗi trong hai tham số ở đây.

Tham số đầu tiên cho phép bạn chọn khả năng hiển thị.

Tự động là mặc định cho tất cả các nút, điều này khiến StoreKit chọn xem có hiển thị nút hay không tùy thuộc vào ngữ cảnh.

Bạn cũng có thể chọn làm cho một nút hiển thị hoặc ẩn rõ ràng.

Tham số tiếp theo cho phép bạn chọn loại nút mà bạn muốn định cấu hình khả năng hiển thị.

Nút hủy hiển thị nút phù hợp với nền tảng để loại bỏ chế độ xem.

Nút này hoạt động cho cả StoreView và SubscriptionStoreView.

Hành vi tự động cho nút hủy là hiển thị bất cứ khi nào chế độ xem được hiển thị.

Ở bên phải, Chế độ xem Cửa hàng Đăng ký được trình bày dưới dạng một trang tính để nó tự động hiển thị nút hủy ở trên cùng bên phải.

Ở bên trái, chế độ xem không được trình bày dưới dạng trang tính, vì vậy không có nút hủy.

Tất nhiên, bạn có thể chọn ghi đè hành vi này và ẩn nút hủy khi được trình bày.

Hãy nhớ rằng, bạn chỉ muốn làm điều này khi bạn thay thế nút hủy bằng nút hủy của riêng bạn.

Thực hành tốt là luôn đi kèm với giao diện người dùng bán hàng của bạn với một nút rõ ràng để loại bỏ bài thuyết trình.

Cũng giống như nút hủy, cả Chế độ xem cửa hàng và Chế độ xem cửa hàng đăng ký đều có thể hiển thị nút Khôi phục mua hàng.

Theo mặc định, nút Khôi phục Mua hàng luôn bị ẩn, nhưng bạn có thể chọn hiển thị nó trong giao diện người dùng bán hàng của mình bằng công cụ sửa đổi storeButton.

Ba loại nút tiếp theo chỉ dành cho SubscriptionStoreView.

Chúng ta đã nói về nút redeemCode.

Loại nút tiếp theo là nút đăng nhập.

Nếu dịch vụ đăng ký của bạn cho phép mọi người đăng ký bên ngoài App Store, bạn nên hiển thị nút đăng nhập trong trường hợp người đăng ký hiện tại cần truy cập đăng ký của họ.

Một điều quan trọng cần biết đối với nút đăng nhập là, bạn phải khai báo hành động đăng nhập bằng cách sử dụng công cụ sửa đổi subscriptionStoreSignInAction mới.

Nếu bạn đặt đăng nhập hoạt động, nút đăng nhập sẽ tự động hiển thị.

Nút đăng nhập chỉ đơn giản gọi chức năng bạn khai báo với subscriptionStoreSignInAction, vì vậy bạn có thể sử dụng điều này như một tín hiệu để chạy luồng đăng nhập của mình.

Loại nút cuối cùng để xem xét là các chính sách.

Bạn có thể muốn hiển thị các liên kết đến các điều khoản dịch vụ và chính sách bảo mật cùng với ưu đãi đăng ký của mình và SubscriptionStoreView giúp điều này thực sự dễ dàng.

Thông thường các nút chính sách được ẩn theo mặc định.

Nếu bạn hiển thị chúng bằng công cụ sửa đổi storeButton, chúng sẽ hiển thị phía trên các điều khiển đăng ký trên iOS và Mac.

Vì các nút này hiển thị phía trên nền vùng chứa của bạn, kiểu mặc định có thể không dễ đọc so với nền của bạn.

Sử dụng subscriptionStorePolicyForegroundStyle để đặt kiểu hình dạng để sử dụng cho các nút chính sách dễ đọc trên nền của bạn.

Định cấu hình các nút phụ trợ với công cụ sửa đổi storeButton giúp thêm chức năng mạnh mẽ vào giao diện người dùng bán hàng của bạn chỉ với một vài khai báo đơn giản.

Trước đó trong phiên, chúng tôi đã định cấu hình phong cách của Chế độ xem Cửa hàng Đăng ký để phù hợp với giao diện của Backyard Birds.

Bây giờ, tôi muốn xem xét các API kiểu này kỹ hơn.

Đầu tiên, hãy xem xét việc chọn một kiểu điều khiển.

Tự động, SubscriptionStoreView chọn kiểu điều khiển dựa trên loại đăng ký bạn đang bán.

Bạn có thể sử dụng công cụ sửa đổi subscriptionStoreControlStyle mới để chọn kiểu điều khiển để sử dụng cho các gói đăng ký của mình.

Ví dụ, bạn có thể chọn một nút cho mỗi gói thay vì bộ chọn tự động.

Hãy nói về các kiểu điều khiển khác nhau.

Nếu bạn không chỉ định kiểu, Chế độ xem Cửa hàng Đăng ký sẽ tự động chọn một điều khiển.

Trên iPhone, đây là điều khiển chọn cho các đăng ký với nhiều tùy chọn gói.

Bạn cũng có thể chọn rõ ràng điều khiển bộ chọn.

Trên iOS và Mac, có một điều khiển chọn nổi bật, hiển thị các tùy chọn gói đăng ký nổi bật hơn với bóng và vòng chọn.

Cuối cùng, bạn có thể chọn hiển thị một nút cho mỗi gói đăng ký thay vì điều khiển bộ chọn.

Về chủ đề các nút đăng ký, có một API mới mà bạn có thể sử dụng để tùy chỉnh nhãn nút.

Theo mặc định, SubscriptionStoreView hiển thị nút đăng ký có chứa cụm từ hành động và thông tin giá dưới dạng chú thích phía trên nút.

Bạn có thể thêm công cụ sửa đổi subscriptionStoreButtonLabel để thay đổi nhãn nút thành nhiều dòng, điều này khiến văn bản giá được chứa trong nhãn nút, thay vì dưới dạng chú thích riêng biệt.

Ngoài việc tùy chỉnh bố cục của nhãn nút, bạn cũng có thể tùy chỉnh nội dung.

Ví dụ, bạn có thể chọn hiển thị tên hiển thị của đăng ký đã chọn thay vì cụm từ hành động.

Bạn thậm chí có thể soạn một giá trị nhãn nút với cả bố cục và nội dung bằng cách xâu chuỗi các thành phần lại với nhau, như thế này.

Vì các nút điều khiển bao gồm các nút đăng ký giống như các nút chọn, bạn cũng có thể sử dụng cùng một công cụ sửa đổi để tùy chỉnh các nút này.

Ví dụ, bạn có thể chọn chỉ hiển thị giá trên nhãn.

Điều này rất hữu ích khi các gói của bạn đều là cùng một dịch vụ, nhưng với các mức giá khác nhau.

Các gói đăng ký khác nhau sử dụng tên hiển thị và mô tả bạn đã thiết lập trong App Store Connect để xây dựng các điều khiển.

Để làm cho các điều khiển này thú vị hơn, bạn có thể chọn thêm chế độ xem trang trí cho từng kế hoạch khác nhau.

Để thêm chế độ xem trang trí, chỉ cần thêm công cụ sửa đổi subscriptionStoreControlIcon vào Cửa hàng Đăng ký.

Công cụ sửa đổi có trình tạo chế độ xem.

Nó cung cấp cho trình tạo chế độ xem cả giá trị Sản phẩm và giá trị Thông tin đăng ký.

Sử dụng các thông số này, bạn có thể cung cấp một chế độ xem khác nhau cho mỗi kế hoạch.

Những biểu tượng này cũng hoạt động khi bạn sử dụng kiểu điều khiển nút cho các gói đăng ký của mình.

Bây giờ, chúng ta hãy xem xét kỹ hơn một chút về việc thêm nội dung nền vào Chế độ xem Cửa hàng Đăng ký.

Để tóm tắt lại từ trước đó, bạn có thể thêm nền vùng chứa vào Cửa hàng đăng ký bằng cách sửa đổi nội dung tiếp thị của mình bằng công cụ sửa đổi containerBackground.

Trong trường hợp này, chúng tôi đang cung cấp một gradient màu nhấn của chúng tôi cho nền và chọn đặt nó trong Cửa hàng Đăng ký.

Bạn có thể tìm hiểu thêm về containerBackground API mới trong phiên "Có gì mới trong SwiftUI."

Có một vài vị trí nền khác nhau mà bạn có thể sử dụng cho Cửa hàng Đăng ký.

Nếu bạn sử dụng vị trí Cửa hàng Đăng ký, nó sẽ chọn vị trí tự động dựa trên ngữ cảnh.

Trên iOS và Mac, bạn có thể chỉ định rõ ràng rằng bạn muốn nền của mình được đặt trong Tiêu đề của Cửa hàng Đăng ký.

Vị trí này đứng sau nội dung tiếp thị của bạn.

Ngoài ra còn có vị trí Chiều cao đầy đủ, đặt nền phía sau chiều cao đầy đủ của Chế độ xem Cửa hàng Đăng ký.

Trước đó trong phiên họp, chúng tôi đã thảo luận về cách sử dụng API như nhiệm vụ trạng thái đăng ký để tránh trình bày tờ Get Backyard Birds Pass của chúng tôi.

Tuy nhiên, có một trường hợp khi chúng tôi có thể muốn hiển thị Chế độ xem Cửa hàng Đăng ký cho những người đăng ký hiện tại và đó là lúc chúng tôi muốn khuyến khích người đăng ký nâng cấp lên gói cao cấp.

Khi chúng tôi phát hiện ra một thuê bao hiện đang đăng ký gói có mức dịch vụ thấp hơn phí bảo hiểm, chúng tôi có thể trình bày bảng nâng cấp bằng cách chuyển nâng cấp làm tham số visibleRelationships.

Đây có thể là bất kỳ sự kết hợp nào của các mối quan hệ đăng ký mà chúng tôi muốn và nó chỉ có hiệu lực khi ai đó hiện đang đăng ký.

Sau đó, để làm cho ưu đãi hiệu quả hơn, chúng tôi có thể cung cấp một cái nhìn khác cho nội dung tiếp thị để giải thích lợi ích của gói cao cấp.

Bạn có thể sử dụng subscriptionStatusTask để theo dõi mức độ dịch vụ của người đăng ký và sau đó sử dụng thông tin này để biết ưu đãi nào sẽ trình bày cho khách hàng.

Đó là tất cả những gì tôi phải đề cập hôm nay.

Khi bạn bắt đầu thêm giao dịch mua trong ứng dụng vào ứng dụng của mình, hãy khai báo StoreView để bắt đầu và chạy nhanh chóng.

Nếu bạn muốn một bố cục tùy chỉnh hơn, hãy thử ProductView.

Đối với đăng ký của bạn, bạn có thể khai báo SubscriptionStoreView để xây dựng các ưu đãi hấp dẫn.

Và khi bạn đã sẵn sàng đưa mọi thứ lên một tầm cao mới, hãy thử các công cụ sửa đổi chế độ xem mới và các API khác để thực sự biến điều này thành của riêng bạn.

Nếu bạn không thể có đủ StoreKit và SwiftUI, hãy xem các phiên; "Có gì mới trong StoreKit 2 và Kiểm tra StoreKit trong Xcode" và "Có gì mới trong SwiftUI" tiếp theo.

Cảm ơn vì đã tham gia cùng tôi hôm nay để tìm hiểu về các API StoreKit mới cho SwiftUI.

Mã hóa vui vẻ!

.