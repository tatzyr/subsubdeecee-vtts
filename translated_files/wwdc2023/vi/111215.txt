111215

♪ Hip-hop nhạc cụ êm dịu ♪

♪

Grace Kendall: Xin chào mọi người, và chào mừng đến với "Gặp gỡ UIKit để tính toán không gian!"

Tên tôi là Grace Kendall và tôi là một kỹ sư trong nhóm UIKit.

Đồng nghiệp Andrew của tôi và tôi rất vui mừng được trò chuyện với bạn trong video này về việc sử dụng các ứng dụng UIKit hiện có của bạn và đưa chúng đến một chiều hướng hoàn toàn mới.

Thiết bị mới có một nền tảng tuyệt đẹp cho trải nghiệm không gian và giới thiệu rất nhiều khả năng 3D mới.

Và trên hết, nó sử dụng các khung giao diện người dùng mà bạn đã biết và thích làm điều đó.

Video này tập trung hoàn toàn vào khía cạnh UIKit của mọi thứ.

Để tìm hiểu thêm về SwiftUI trên nền tảng, hãy xem "Gặp gỡ SwiftUI để tính toán không gian" và "Nâng cao ứng dụng có cửa sổ của bạn để tính toán không gian."

Trong video này, chúng ta sẽ bắt đầu bằng cách nói về cách xây dựng ứng dụng của bạn cho nền tảng mới và các bước mà bạn sẽ thực hiện trên đường đi.

Sau đó, chúng tôi sẽ đi sâu vào một số đặc điểm khiến nó trở nên độc đáo và khác biệt so với các nền tảng khác của Apple và cách xử lý chúng trong mã của bạn.

Sau đó, chúng tôi sẽ đánh bóng ứng dụng của bạn với API mới được giới thiệu trong UIKit.

Và cuối cùng, chúng ta sẽ xem xét việc sử dụng SwiftUI ngoài UIKit để thêm một số chức năng 3D hoàn toàn mới.

Vậy hãy bắt đầu nào!

Đây là một ứng dụng hoạt hình nghệ thuật pixel demo được viết cho iOS, tất cả đều sử dụng UIKit.

Một số người bạn thân nhất của tôi đã đóng góp nghệ thuật cho nó.

Nó trông và cảm thấy tuyệt vời trên iPad, sử dụng rất nhiều thành phần hệ thống, hoạt ảnh động động và tích hợp Apple Pencil.

Hãy chuẩn bị sẵn sàng cho máy tính không gian.

Điều đầu tiên tôi cần làm là chuyển đến tab Chung trong dự án Xcode và thêm đích chạy mới.

Bây giờ, ở đây trong danh mục Tài sản, tôi có thể thêm một biểu tượng ứng dụng mới.

Đó là bởi vì các biểu tượng trên nền tảng này rất đặc biệt.

Chúng là ba hình ảnh được phủ lên nhau phản hồi linh hoạt khi ai đó nhìn vào biểu tượng ứng dụng của bạn.

Một trong những đồng đội của chúng tôi, Jessica, là một nghệ sĩ siêu tài năng và đã chế giễu một biểu tượng mới cho ứng dụng để chuẩn bị cho việc này, vì vậy tôi có thể thêm các tệp này ngay bây giờ.

Tiếp theo, tôi sẽ chọn trình mô phỏng thiết bị mới làm mục tiêu và xây dựng.

Được rồi, có một vài lỗi xây dựng.

Có vẻ như một số API đang được sử dụng cho ứng dụng iPad không khả dụng trên nền tảng này.

Hãy nói về lý do tại sao.

Đây là một nền tảng hoàn toàn mới với các khả năng và đặc điểm hoàn toàn mới khiến nó khác biệt với các nền tảng khác của Apple.

Vì vậy, đây là một số điều bạn sẽ cần chú ý khi mang đến một ứng dụng.

Khi đưa ứng dụng của bạn đến lần đầu tiên, hai lĩnh vực phổ biến cần điều tra là các API đã bị phản đối trên các bản phát hành iOS trước đó và các API không dịch tốt sang nền tảng này.

Thiết bị này không hỗ trợ các API đã bị phản đối trước iOS 14.

Với nền tảng hoàn toàn mới này, đây là một cơ hội tuyệt vời để thoát khỏi các API bị phản đối và cập nhật cơ sở mã được chia sẻ của bạn để áp dụng mới nhất và tuyệt vời nhất.

Ngoài ra còn có một bộ sưu tập các API không dịch sang nền tảng này.

Ví dụ, UIDeviceOrientation.

API này giả định rằng thiết bị có thể được sử dụng theo nhiều hướng, điều này không áp dụng ở đây.

UIScreen là một ví dụ khác.

Với thiết bị này, tiền đề của một đại diện duy nhất của màn hình phần cứng không giữ được.

Và các thanh tab có thiết kế khác nhiều và không bố trí từ đầu đến cuối, vì vậy Chế độ xem phụ kiện hàng đầu và Chế độ xem phụ kiện hàng đầu của nó không khả dụng.

Đây chỉ là ba ví dụ về các API đã được đánh dấu là không khả dụng vì chúng không áp dụng, nhưng cũng có những ví dụ khác.

Vui lòng kiểm tra tài liệu để biết thêm chi tiết.

Hãy quay lại mã ngay bây giờ và điều tra xem vấn đề có thể là gì.

Hãy kiểm tra lỗi ở đây.

Trong phần mở rộng EditorViewController có một UIPencilInteraction.

Thiết bị này không hỗ trợ Apple Pencil, vì vậy API này không khả dụng trên nền tảng.

Tôi có thể dễ dàng tạo điều kiện hóa mã này để làm cho nó biên dịch.

Hãy tiếp tục và cố gắng xây dựng và chạy lại.

Được rồi! Có vẻ như chúng ta đang hoạt động!

Điều này trông thực sự tốt, và thật thú vị khi thấy ứng dụng chạy trong Không gian chia sẻ.

Nhưng tôi đã nhận thấy một số điều mà tôi nghĩ rằng tôi có thể cải thiện.

Hãy tham quan ngay bây giờ thông qua ứng dụng để kiểm tra tất cả và tìm một số thứ để đánh bóng.

Trong Trình mô phỏng, nhấp chuột mô phỏng ai đó nhìn vào điểm đó và chạm vào các ngón tay của họ với nhau.

Điều đầu tiên tôi nhận thấy là nền kính tuyệt đẹp của ứng dụng.

Và khi tôi nhìn vào tất cả các tác phẩm nghệ thuật, có một số hình ảnh di chuột thực sự đẹp mắt làm cho ứng dụng cảm thấy sống động và tương tác.

Thanh tìm kiếm cũng có giao diện mới, với giao diện lõm.

Tôi vẫn có thể mở các tác phẩm nghệ thuật khác nhau và pixellate theo nội dung trái tim mình.

Được rồi, một điều tôi nghĩ tôi có thể cải thiện là văn bản màu đen cho tiêu đề và văn bản màu xám cho phụ đề của nghệ thuật.

Văn bản màu đen trông rất đẹp trên nền trắng trên iPad, nhưng tôi không thích nó trông như thế nào ở đây trên kính.

Tôi nghĩ nó có thể bật thêm một chút nữa.

Và tôi thực sự thích giao diện và kích thước của thanh tìm kiếm.

Tôi nghĩ tôi cũng muốn có cái đó cho các trường văn bản tiêu đề.

Màu ngữ nghĩa không phải là mới, nhưng chúng đặc biệt có giá trị đối với nền tảng này.

Điều quan trọng là sử dụng màu sắc ngữ nghĩa, phông chữ và tài liệu để giao diện ứng dụng của bạn thích ứng với nền tảng, giao diện và cài đặt khả năng truy cập.

Nhiều thứ, như UIColor.label, có giá trị mới để mọi thứ trông thật hoàn hảo.

Màu ngữ nghĩa thích ứng với nền tảng của bạn, vì vậy thay vì tự xác định màu với các giá trị RGB, thay vào đó hãy sử dụng màu do hệ thống cung cấp sẽ dẫn đến giao diện chính xác bất kể ứng dụng của bạn đang chạy trên nền tảng nào.

Ví dụ, hệ thống màu lục lam là một sắc thái hơi khác của màu xanh lam trên iOS, macOS và watchOS.

Trên iPad, điều này có thêm lợi ích là thích ứng giữa vẻ ngoài sáng và tối.

Và trên nền tảng này, systemBackgroundColor sống động theo mặc định khi được đặt trên kính.

Tương tự, sử dụng các kiểu phông chữ ngữ nghĩa như Headline hoặc Body thay vì đặt kích thước phông chữ tĩnh sẽ dẫn đến một ứng dụng dễ đọc hơn.

Đó cũng là điều đúng đắn cần làm cho khả năng tiếp cận.

Kích thước phông chữ ngữ nghĩa chia tỷ lệ với Dynamic Type để đảm bảo khả năng đọc.

Ở đây, màu sắc cho văn bản TextField và nhãn phụ đề đang sử dụng UIColors được xác định RGB.

Thay vì sử dụng những thứ đó, hãy sử dụng màu ngữ nghĩa nhãn chính và phụ ở đây, màu này sẽ thích ứng tốt hơn với nền tảng này trong khi vẫn trông tuyệt vời trên iPad.

Ngoài ra, tất cả UILabels sử dụng màu ngữ nghĩa đều trở nên sống động theo mặc định.

Tôi cũng có thể đặt kiểu viền của trường văn bản thành roundedRect.

Điều này sẽ thêm sự xuất hiện lõm trên chế độ xem này.

Và sau khi xây dựng và chạy...

... Tôi thích cái này hơn nhiều!

Các nhãn rất dễ đọc và rõ ràng là tôi có thể chỉnh sửa tiêu đề của tác phẩm nghệ thuật bằng cách sử dụng trường văn bản.

Tiếp theo, hãy nói về tài liệu.

Vật liệu là nền tảng khổng lồ của nền tảng này.

Chúng làm cho ứng dụng của bạn trông thực sự đẹp và giúp nó cảm thấy như một phần của môi trường xung quanh.

Họ cũng đảm bảo tính dễ đọc trong bất kỳ bối cảnh nào.

Vật liệu điều chỉnh độ tương phản và cân bằng màu sắc dựa trên điều kiện ánh sáng và màu sắc của các vật thể phía sau chúng.

Bởi vì điều này, không có sự phân biệt giữa sự xuất hiện tối và sáng trên nền tảng này.

Tất cả các điều khiển và vùng chứa tích hợp đều sử dụng các vật liệu sống động theo mặc định, đảm bảo ứng dụng của bạn trông tuyệt vời.

Kính bây giờ đóng vai trò là nền của ứng dụng trông thực sự tuyệt vời.

Điều này đi kèm theo mặc định cho mọi UINavigationController và UISplitViewController.

Và điều này cho phép các chi tiết của môi trường xung quanh chảy qua.

Bạn cũng có thể ghi đè thuộc tính Container BackgroundStyle ưa thích mới trên UIViewController của mình để trả về .automatic, .glass hoặc .hidden.

Tiếp theo, nếu tôi di chuột qua một số chế độ xem trong ứng dụng, một điểm nổi bật mờ sẽ xuất hiện.

Điều này thực sự giúp làm cho ứng dụng cảm thấy nhạy bén.

Sử dụng các thành phần hệ thống như điều khiển hoặc danh sách đảm bảo rằng bạn nhận được các hiệu ứng di chuột, vật liệu, độ sống động và hơn thế nữa theo mặc định.

Hiệu ứng di chuột cho thấy tính tương tác.

Thêm hiệu ứng di chuột vào chế độ xem sẽ giúp nhắm mục tiêu dễ dàng hơn.

Một điều quan trọng về nền tảng này là chính xác nơi ai đó đang tìm kiếm không bao giờ được chuyển đến quy trình của ứng dụng.

Có API hoàn toàn mới trong UIKit để thêm, tùy chỉnh hoặc vô hiệu hóa các hiệu ứng di chuột.

UIView có một thuộc tính mới, HoverStyle.

Nhiều thành phần tương tác có hiệu ứng di chuột theo mặc định, như điều khiển.

Bạn có thể tùy chỉnh hoverStyle trong chế độ xem của mình bằng cách đặt thuộc tính HoverStyle và cung cấp hiệu ứng: tô sáng hoặc nâng.

Và nếu bạn muốn xóa hiệu ứng di chuột, bạn có thể đặt thuộc tính này thành nil.

Và để tiến xa hơn nữa, bạn có thể sử dụng UIShape API mới để cung cấp hình dạng của hiệu ứng di chuột của bạn.

Tôi thích rằng tôi đã có một hình dạng di chuột trên ô xem bộ sưu tập, nhưng tôi ước nó có các góc tròn.

Thay vào đó, để sử dụng một hình chữ nhật tròn làm hình dạng di chuột, tôi cần đặt thuộc tính hoverStyle trên ô và chuyển thành hình chữ nhật tròn.

Và điều đó lấy hình dạng lơ lửng của ô từ hình chữ nhật này với các góc vuông...

...Đến trực tràng tròn này.

Tôi nghĩ cái này trông rất đẹp với các góc tròn của trường văn bản và nền.

Bây giờ khi tôi nhìn vào từng ô chế độ xem bộ sưu tập, hình dạng di chuột của chúng sẽ được làm tròn.

Có một điều cuối cùng tôi muốn xem xét, và đó là đầu vào.

Nền tảng này giới thiệu một hệ thống đầu vào hoàn toàn mới để tương tác với nội dung.

Nhìn vào một yếu tố và véo và thả ngón tay của bạn tương đương với TapGesture.

Véo, di chuyển bàn tay của bạn và thả ra là một PanGesture.

Nếu bạn đủ gần ứng dụng, bạn cũng có thể tiếp cận và chạm vào nó.

Nếu bạn ghép nối bàn di chuột, bạn cũng có thể sử dụng nó để tương tác với hệ thống.

Và các công nghệ tiếp cận của Apple cũng có sẵn trên thiết bị.

VoiceOver và Switch Control mang ứng dụng của bạn đến với mọi người.

Bộ nhận dạng cử chỉ hệ thống chỉ hoạt động với tất cả các phương thức nhập, bao gồm cả bàn di chuột.

Nhưng điều quan trọng cần lưu ý là có tối đa hai đầu vào đồng thời trên nền tảng này vì mỗi bàn tay chỉ có thể tạo ra một cú chạm riêng biệt.

Thực sự có cử chỉ tùy chỉnh này trong ứng dụng iPad đã sử dụng thao tác vuốt bốn ngón tay để xóa tất cả các tác phẩm nghệ thuật hiện có và bắt đầu lại.

Tôi muốn giữ cử chỉ, vì vậy tôi sẽ không biên soạn nó.

Thay vào đó, tôi có thể thay đổi mã này để kiểm tra thành ngữ giao diện người dùng và nếu đó là thực tế, tôi có thể đặt số lần chạm cần thiết thành hai.

Sau khi tôi đã thực hiện tất cả những thay đổi này để đánh bóng ứng dụng, bây giờ tôi nghĩ rằng tôi đã sẵn sàng để đưa ứng dụng ví dụ này lên một tầm cao mới.

Tôi sẽ giao nó cho đồng nghiệp Andrew của tôi để nói với bạn nhiều hơn.

Andrew Finke: Cảm ơn, Grace!

Xin chào! Tôi là Andrew và tôi là một kỹ sư trong nhóm UIKit.

Đã đến lúc đưa các ứng dụng UIKit của bạn ra khỏi giới hạn 2D và vào ba chiều.

Với các bản cập nhật của Grace, ứng dụng ví dụ trông rất đẹp!

Và nó, cũng như các ứng dụng UIKit hiện tại của bạn, có thể được tiến xa hơn nữa với các API không gian mới.

Tôi sẽ nói về ba cách dễ dàng để cập nhật một ứng dụng hiện có để tạo ra trải nghiệm không gian tuyệt vời.

Đầu tiên, các bài thuyết trình UIKit có các phong cách không gian mới thú vị giúp tăng thêm chiều sâu cho quá trình chuyển đổi bộ điều khiển chế độ xem của bạn.

Thứ hai, có một API mới cho phép bạn đưa nội dung đến một nơi mà nó chưa từng biến mất trước đây...

Bên ngoài hiện trường!

Chúng được gọi là đồ trang trí.

Cuối cùng, có những cách mới mạnh mẽ để thêm nội dung RealityKit ngay vào ứng dụng của bạn.

Hãy xem xét cách mỗi ứng dụng này có thể đưa ứng dụng ví dụ lên một tầm cao mới.

Các bài thuyết trình UIKit mà bạn biết và yêu thích đang ra mắt về không gian.

Trên iPad, ứng dụng ví dụ sử dụng trang tính, cảnh báo và cửa sổ bật lên.

Hãy xem qua cách những người đó cư xử trên nền tảng mới.

Đầu tiên, hãy mở cài đặt ứng dụng.

Bảng không gian đẩy bộ điều khiển chế độ xem trình bày trở lại và làm mờ nó.

Không giống như iPad, nó sẽ không bị loại bỏ do chạm ngoài giới hạn hoặc các cử chỉ khác, bất kể thuộc tính isModalInPresentation của bộ điều khiển chế độ xem.

Tiếp theo, hãy kiểm tra phong cách cảnh báo mới.

Biểu diễn 2D của biểu tượng ứng dụng được đặt ngay trên cùng.

Cũng giống như các trang tính, bạn nên luôn trình bày các cảnh báo từ bộ điều khiển chế độ xem cần được đẩy lùi.

Cuối cùng hãy mở cửa sổ bật lên chi tiết tài liệu.

Ồ, điều này có vẻ hơi khác một chút.

Nó đang vượt ra ngoài giới hạn, điều đó thật tuyệt vời, nhưng nó đang trình bày cách xa trung tâm của ứng dụng.

Hãy đi vào mã để khắc phục điều này.

Có vẻ như bộ điều khiển chế độ xem đang được tạo, được đặt thành kiểu cửa sổ bật lên...

À, tôi thấy vấn đề.

Các hướng dẫn mũi tên được phép được đặt thành chỉ bên phải.

Trên iPad, cửa sổ bật lên bị hạn chế trong cảnh, nhưng trên nền tảng không gian, ràng buộc tương tự này không tồn tại, tương tự như macOS.

Hãy cập nhật cái này để luôn sử dụng vị trí ưa thích của hệ thống.

Bây giờ, khi tôi nhấn vào nút thông tin, tôi nhận được vị trí cửa sổ bật lên mà tôi mong đợi.

Nếu bạn sử dụng các bài thuyết trình tiêu chuẩn trong ứng dụng iPad của mình, ứng dụng không gian của bạn có thể đã vượt ra ngoài giới hạn một cách tuyệt vời.

UIKit xử lý tất cả các chi tiết miễn là bạn không mã hóa cứng bất kỳ giả định nền tảng nào.

Cách tiếp theo tôi sẽ nâng cao ứng dụng ví dụ là với đồ trang trí.

Mặc dù các bài thuyết trình của ứng dụng hiện là không gian, nhưng bản thân trình chỉnh sửa vẫn chưa tận dụng được không gian bổ sung trên nền tảng.

Biên tập viên...

...Eh, trông hơi chật chội.

Nhưng với đồ trang trí, chúng ta có thể tận dụng thêm không gian mà nền tảng không gian cung cấp theo cách mà chúng ta chưa từng có trước đây.

Đồ trang trí cho phép nội dung được đặt xung quanh cảnh của ứng dụng trong giới hạn hợp lý.

Các thành phần UIKit cũng sử dụng đồ trang trí, như cửa sổ bật lên.

Đó là cách cửa sổ bật lên ứng dụng ví dụ xuất hiện bên ngoài hiện trường mà không bị cắt xén.

Nhiều ứng dụng tích hợp trên thiết bị cũng đang sử dụng đồ trang trí.

Đây là một cái nhìn thú vị về TV trong tai nghe.

Ứng dụng sử dụng chế độ xem tab SwiftUI, đặt thanh tab trong một vật trang trí ở cạnh trước của cảnh.

Safari sử dụng một vật trang trí để đưa thanh điều hướng của họ lên trên trang web.

Và Freeform sử dụng một vật trang trí để tạo thanh công cụ dưới cùng của họ.

Với đồ trang trí, các ứng dụng này giữ nội dung chính của chúng ở trung tâm, đẩy các điều khiển đến cạnh.

Và đồ trang trí được nâng về phía trước, tăng thêm chiều sâu.

Họ đang phá vỡ ranh giới theo mọi hướng!

Đối với ứng dụng ví dụ, tôi nghĩ rằng việc tập hợp tất cả các điều khiển chỉnh sửa trong một vật trang trí trên thanh công cụ sẽ là hoàn hảo.

Hãy quay lại Xcode để thêm cái này.

Đồ trang trí lưu trữ nội dung SwiftUI, tôi sẽ cần đảm bảo nhập SwiftUI, điều mà tôi đã làm trong tệp này.

Tiếp theo, tôi sẽ xác định đồ trang trí mới.

Các thông số căn chỉnh giúp dễ dàng thể hiện bố cục nội dung phù hợp nhất với nhu cầu của bạn.

Ví dụ, nếu tôi muốn một vật trang trí treo cạnh trước của cảnh của mình, tôi sẽ đặt căn chỉnh cảnh hàng đầu và căn chỉnh nội dung cuối.

Thay vào đó, nếu tôi muốn đồ trang trí treo bên trong cảnh, tôi sẽ sử dụng căn chỉnh nội dung hàng đầu.

Đối với thanh công cụ chỉnh sửa, tôi muốn nó treo ở dưới cùng của cảnh, nhưng với các công cụ tập trung vào cạnh nên nó vẫn cảm thấy là một phần của trình chỉnh sửa.

Điều này có nghĩa là tôi muốn căn chỉnh cảnh dưới cùng và căn chỉnh nội dung trung tâm.

Tôi sẽ thêm vào những căn chỉnh đó.

Đối với nội dung, tôi đã tạo một EditingControlsView mới trước đó và tôi sẽ sử dụng nó ở đây.

Đồ trang trí không tự động thêm nền.

Điều này là do việc chọn nền phù hợp phụ thuộc vào những gì phù hợp nhất với nội dung của bạn.

Tôi muốn thanh công cụ có cùng nền kính với trình chỉnh sửa của mình, vì vậy tôi sẽ sử dụng công cụ sửa đổi mới.

Tiếp theo, tôi sẽ đặt thuộc tính đồ trang trí mới trên UIViewController thành một mảng chỉ với đồ trang trí mới.

Nếu tôi có nhiều đồ trang trí, tôi cũng sẽ đưa chúng vào mảng này.

Đồ trang trí chia sẻ vòng đời của bộ điều khiển chế độ xem của chúng.

Nếu một bộ điều khiển chế độ xem bị xóa khỏi hệ thống phân cấp, các đồ trang trí của nó cũng vậy.

Sự liên kết này rất quan trọng đối với các tương tác hệ thống.

Ví dụ, các bài thuyết trình trang tính sẽ giữ đồ trang trí liên quan đến bộ điều khiển chế độ xem của chúng trong quá trình chuyển đổi.

Cuối cùng, hãy cẩn thận để tránh những trường hợp chồng chéo có thể vô tình xảy ra.

Tôi có một thay đổi cuối cùng để thực hiện trong mã.

Kể từ khi tôi chuyển các điều khiển sang đồ trang trí, bây giờ tôi có nhiều chỗ hơn cho trình chỉnh sửa chính.

Tôi sẽ làm cho nó lớn hơn một chút bằng cách sử dụng phong cách edgeToEdge tùy chỉnh của tôi.

Thời gian để chạy ứng dụng.

Hoàn hảo!

Thanh công cụ ở đúng nơi tôi muốn, phá vỡ bên ngoài dưới cùng của trình chỉnh sửa.

Thật tuyệt vời.

Bằng cách tận dụng đồ trang trí, ứng dụng ví dụ có thể sử dụng nhiều khu vực chính hơn cho những gì người sáng tạo quan tâm nhất - nội dung của họ - trong khi vẫn giữ các công cụ chỉnh sửa gần đó.

Làm một vật trang trí thật dễ dàng.

Nó cho phép bạn tập trung thời gian và công sức vào những gì làm cho ứng dụng của bạn trở nên độc đáo.

Cuối cùng, tôi sẽ nói về việc thêm RealityKit vào ứng dụng UIKit.

Có một SwiftUI View mới, RealityView, lưu trữ nội dung RealityKit.

Điều này cho phép các thực thể được bố mẹ trong hệ thống phân cấp SwiftUI.

Để đi sâu hơn vào RealityView, hãy đảm bảo kiểm tra "Xây dựng trải nghiệm không gian với RealityKit."

Ngoài ra còn có một API hiện có, UIHostingController, lưu trữ các chế độ xem SwiftUI.

Điều này có nghĩa là bạn có thể tận dụng RealityView, cũng như các API mới khác trong SwiftUI, mà không cần phải viết lại ứng dụng UIKit của mình.

Đối với ứng dụng ví dụ, tôi muốn sử dụng RealityKit để làm cho các điểm ảnh trở nên sống động.

Hãy mở Xcode để tạo ra một số phép thuật.

Tôi đã tạo một SwiftUI View mới được gọi là PixelArtEntityView.

Nó sử dụng RealityView để hiển thị các pixel của nghệ thuật dưới dạng các thực thể RealityKit.

Tôi sẽ tạo một ví dụ mới để bắt đầu.

Sau đó, tôi sẽ thiết lập UIHostingController, sử dụng chế độ xem thực thể làm chế độ xem gốc.

Tôi sẽ thêm bộ điều khiển lưu trữ làm con của EditorViewController và thêm chế độ xem của bộ điều khiển lưu trữ làm chế độ xem con của chế độ xem của EditorViewController.

Tiếp theo, tôi sẽ nói với bộ điều khiển lưu trữ rằng nó đã được chuyển sang phụ huynh mới.

Cuối cùng, tôi sẽ gọi chức năng bố cục tùy chỉnh của mình để định vị bản xem trước.

Được rồi, thiết lập bộ điều khiển lưu trữ đã hoàn tất.

Bây giờ là giờ chiếu.

Tôi sẽ nhấn nút phát và nhấn Xem trước 3D để xem mã mới đang hoạt động.

Cứ như vậy, tôi đã thêm các điểm ảnh với chiều sâu thực vào ứng dụng.

Với điều khiển quỹ đạo giả lập, tôi thậm chí có thể thấy ánh sáng thay đổi như thế nào dựa trên quan điểm của mình.

Điều này thật tuyệt!

Và tất cả đang diễn ra trong một ứng dụng UIKit.

RealityView đã nâng cấp bản xem trước của nhà làm phim hoạt hình.

Và nhờ UIHostingController, nó rất dễ dàng để thêm vào.

Cùng với nhau, các API này rút ngắn con đường xây dựng một ứng dụng không gian tuyệt vời.

Bằng cách sử dụng các bài thuyết trình UIKit tiêu chuẩn, đặt các điều khiển trình chỉnh sửa vào một vật trang trí và thêm các điểm ảnh 3D với RealityKit, ứng dụng ví dụ trông tuyệt vời trong thế giới không gian mới này.

Và tất cả chỉ với một vài dòng mã.

Để tìm hiểu về hướng dẫn thiết kế cho những trải nghiệm không gian này, hãy xem "Nguyên tắc thiết kế không gian".

Chúng tôi đã đề cập rất nhiều trong video này, vì vậy đây là những gì bạn cần làm tiếp theo.

Bắt đầu bằng cách thêm điểm đến mới vào dự án của bạn.

Cập nhật việc sử dụng API dành riêng cho thiết bị của bạn và loại bỏ các API không dùng nữa.

Sử dụng các kiểu ngữ nghĩa, hiệu ứng di chuột và các bài thuyết trình tiêu chuẩn để làm cho ứng dụng của bạn cảm thấy phù hợp với giao diện nền tảng.

Mở rộng ý tưởng và trí tưởng tượng của bạn vượt ra ngoài giới hạn với đồ trang trí.

Và đưa ứng dụng của bạn đi xa hơn nữa với các tính năng SwiftUI không gian mới, ngay từ UIKit.

Cảm ơn vì đã xem!

Grace và tôi rất hào hứng khi thấy các ứng dụng của bạn ở một chiều hướng hoàn toàn mới.

♪