10147

♪ ♪

Nivash: Xin chào mọi người.

Tôi là Nivash Raaja Karukankaatur Murugasamy, một Kỹ sư trong nhóm Khung Vị trí Cốt lõi.

Chào mừng đến với bài nói chuyện của tôi về Core Location Monitor.

Tôi thực sự hào hứng khi nói về API CLMonitor mới của chúng tôi.

Nó cho phép bạn viết logic giám sát đơn giản nhưng mạnh mẽ chỉ với vài dòng mã trong Swift.

Bạn chỉ cần tạo một màn hình, thêm điều kiện và chờ đợi các sự kiện.

Nó đây rồi. Xin chào, CLMonitor!

Hãy đi vào chi tiết của CLMonitor API.

Tôi sẽ bắt đầu với tổng quan về CLMonitor API, cách đơn giản nhưng mạnh mẽ mới của chúng tôi để giám sát vị trí hoặc đèn hiệu của người dùng.

Sau đó, tôi sẽ cho bạn biết về các loại điều kiện bạn có thể theo dõi và cách bạn có thể thêm hoặc xóa chúng.

Sau đó, tôi sẽ xem xét các hồ sơ giám sát, những gì chúng chứa và cách bạn có thể truy cập chúng trong vòng đời ứng dụng của mình.

Tiếp theo là các bước bạn sẽ cần thực hiện trong ứng dụng của mình nếu bất kỳ điều kiện nào được giám sát gặp phải sự kiện.

Và cuối cùng, tôi sẽ kết thúc với một số yêu cầu và đề xuất sẽ giúp bạn khi sử dụng CLMonitor.

Đầu tiên, chúng ta hãy xem màn hình là gì và cách bạn có thể tạo một màn hình để giám sát.

CLMonitor là một diễn viên Swift cấp cao nhất và mỗi phiên bản CLMonitor hoạt động như một cổng để giám sát.

Vì nó là một diễn viên, nó giúp bạn thoát khỏi chi phí đồng bộ hóa luồng và nhiệm vụ.

Vì vậy, việc truy cập nội dung của CLMonitor hoặc thêm hoặc xóa một điều kiện bất cứ lúc nào chỉ cần được chờ đợi.

Để tạo một màn hình, bạn gọi phương thức init của màn hình bằng một chuỗi chữ và số.

Nếu không có màn hình nào trước đó tồn tại với tên đó, một màn hình mới sẽ được tạo.

Nếu không, cái hiện tại sẽ được mở.

Dù bằng cách nào, phiên bản màn hình sẽ được trả về.

Lưu ý rằng chỉ có một phiên bản có tên đã cho có thể được mở bất cứ lúc nào.

Thực thể đang được giám sát được gọi là một điều kiện.

Bạn có thể thêm một điều kiện vào phiên bản CLMonitor để giám sát và liên kết nó với một mã định danh bằng cách sử dụng phương thức thêm.

Mã định danh là một chuỗi chữ và số.

Ví dụ, "Làm việc" trong ví dụ này xác định duy nhất bản ghi của một điều kiện được thỏa mãn khi người dùng đang làm việc.

Đối tượng bản ghi và nội dung của nó sẽ có thể truy cập được bằng mã định danh này và điều kiện sẽ được theo dõi cho đến khi nó bị xóa.

Bạn có thể xóa điều kiện khỏi giám sát bằng cách gọi xóa với cùng một mã định danh.

Loại bỏ một điều kiện cũng sẽ loại bỏ bản ghi tương ứng.

Bây giờ bạn đã biết cách tạo một phiên bản màn hình và cách nó liên quan đến các điều kiện, chúng ta hãy xem xét các loại điều kiện có sẵn và cách bạn có thể tạo một và thêm nó để giám sát.

Có hai loại điều kiện được hỗ trợ trong iOS.

Đầu tiên, Điều kiện Địa lý Thông tư.

Điều kiện địa lý tròn được xác định bởi một trung tâm và một bán kính.

Trung tâm xác định vị trí địa lý của điều kiện.

Bán kính xác định khu vực mà theo đó điều kiện sẽ được coi là thỏa mãn.

Bất cứ nơi nào bên ngoài khu vực đó, chúng tôi sẽ báo cáo tình trạng này là không hài lòng.

Điều này tương tự như CLCircularRegion trong iOS 16 và các bản phát hành trước đó.

Bạn xác định một trung tâm bằng cách xây dựng CLLocationCoordinate2D với vĩ độ và kinh độ quan tâm.

Sau đó, bạn tạo Điều kiện Địa lý Thông tư với tâm đó và bán kính quan tâm.

Loại điều kiện khác được hỗ trợ trong iOS là BeaconIdentityCondition.

BeaconIdentityCondition tương tự như CLBeaconIdentityConstraint hoặc CLBeaconRegion mà bạn có thể đã sử dụng trong iOS 16 và các bản phát hành trước đó.

Nếu công ty của bạn có nhiều trang web ở các địa điểm khác nhau, bạn có thể triển khai đèn hiệu để phát hiện trong ứng dụng của mình nếu người dùng ở bất kỳ một trong các trang web của bạn, hoặc tại một trang web cụ thể, hoặc thậm chí tại một phần cụ thể của một trang web cụ thể.

Hãy xem xét các quán cà phê của Apple như một ví dụ đơn giản, có sẵn trong các văn phòng tại nhiều địa điểm.

Hãy xem đèn hiệu có thể được triển khai hiệu quả như thế nào để kích hoạt hành vi dựa trên vị trí trong một ứng dụng được liên kết.

Và khi chúng ta tiếp tục, tôi sẽ nói về cách ứng dụng đó có thể giám sát các đèn hiệu này bằng cách sử dụng các hương vị khác nhau của BeaconIdentityCondition trong các tình huống khác nhau.

Chúng ta hãy xem xét ngắn gọn điều gì định nghĩa một ngọn hải đăng.

Nó chứa một chuỗi UUID, một số chính và một số thứ.

Với BeaconIdentityCondition, bạn có thể giám sát một đèn hiệu cụ thể bằng cách chỉ định cả ba: UUID, major và minor.

Hoặc bạn có thể ký tự đại diện để khớp với bất kỳ đèn hiệu đơn lẻ nào từ một nhóm đèn hiệu bằng cách chỉ định chỉ định UUID và chính, hoặc chỉ UUID một mình.

Khi bạn để trẻ vị thành niên hoặc thứ và thứ không xác định, một đèn hiệu với bất kỳ giá trị nào cho các thuộc tính đó có thể khớp.

Hãy xem cách chúng ta có thể sử dụng điều này trong ví dụ của mình.

Chúng tôi có thể triển khai đèn hiệu tại các địa điểm quán cà phê này với tất cả đều có cùng UUID.

Và, trong ứng dụng, một BeaconIdentityCondition có thể được tạo ra để giám sát UUID này.

Sau đó, nếu người dùng đến gần một trong những đèn hiệu này, điều kiện sẽ trở nên hài lòng.

Nếu không, nó sẽ được xác định là không hài lòng.

Trong mã, bạn có thể làm điều này bằng cách gọi phương thức init chỉ định UUID.

Bây giờ chúng tôi đã triển khai đèn hiệu tại các vị trí được yêu cầu, bạn có thể quan tâm để phát hiện xem người dùng có đang ở một trong các địa điểm cụ thể hay không.

Trong trường hợp này, hãy xem cách theo dõi xem người dùng có đang ở trang Apple Park hay không.

Để đạt được điều này, các đèn hiệu được triển khai tại mỗi địa điểm sẽ phải chia sẻ một số chính duy nhất.

Sau đó, trong ứng dụng của bạn, bạn có thể theo dõi BeaconIdentityCondition với UUID chính và tổng thể đó.

Trạng thái của điều kiện sẽ chỉ được xác định là thỏa mãn khi thiết bị ở vị trí mà đèn hiệu khớp với cả UUID và các giá trị chính.

Nó sẽ vẫn không hài lòng ở các trang web khác.

Trong mã, bạn có thể tạo BeaconIdentityCondition bằng cách gọi phương thức init chỉ định UUID và major.

Bây giờ bạn đã biết cách giám sát tất cả các trang web hoặc một trang web cụ thể.

Nhưng bạn cũng có thể theo dõi một phần cụ thể trong một trang web cụ thể.

Điều này có thể đạt được bằng cách triển khai đèn hiệu ở các địa điểm khác nhau - giả sử, các trạm ẩm thực - trong mỗi địa điểm với các giá trị nhỏ tương ứng.

Trong ứng dụng của bạn, bạn có thể theo dõi BeaconIdentityCondition cho một giá trị nhỏ cụ thể cùng với UUID và major.

Một điều kiện như vậy sẽ chỉ được thỏa mãn khi đèn hiệu với UUID thứ cũng như UUID và chính tổng thể được phát hiện.

Trong mã, điều này có nghĩa là tạo BeaconIdentityCondition bằng cách chuyển UUID, major và minor.

Khi tạo BeaconIdentityCondition, hãy sử dụng phương pháp init phù hợp với nhu cầu của bạn.

Được rồi, bây giờ bạn đã biết cách tạo ra các loại và hương vị khác nhau của tình trạng, chúng ta hãy xem cách bạn có thể thêm chúng để theo dõi.

Bạn có thể thêm một điều kiện để giám sát bằng cách gọi phương thức thêm với một chuỗi chữ và số được gọi là định danh trên phiên bản CLMonitor của bạn.

Điều kiện sẽ được liên kết với mã định danh.

Nếu một điều kiện đã được theo dõi với mã định danh đã cho, nó sẽ được thay thế bằng điều kiện mới được truyền vào.

Khi bạn thêm một điều kiện, trạng thái ban đầu của nó sẽ không được biết cho đến khi được xác định bởi Vị trí cốt lõi.

Có thể có những trường hợp bạn nhận thức được trạng thái hiện tại của điều kiện trước khi bạn thêm nó.

Trong những trường hợp đó, bạn có thể ghi đè trạng thái ban đầu mặc định bằng cách chuyển trạng thái khi thêm để theo dõi.

Trong ví dụ này, hãy giả sử rằng ứng dụng của bạn suy luận rằng bạn không ở trang Apple Park và do đó hy vọng điều kiện sẽ không được thỏa mãn.

Bạn có thể thêm "giả sử: .không hài lòng" vào cuộc gọi của mình.

Sau đó, việc giám sát sẽ bắt đầu với trạng thái được đặt thành không hài lòng.

Nhưng đừng lo lắng.

Nếu giả định của bạn về trạng thái là sai, Core Location sẽ cung cấp cho bạn trạng thái chính xác sau khi nó được xác định.

Để xóa một điều kiện khỏi giám sát, bạn có thể gọi phương thức xóa với mã định danh đã được thông qua khi điều kiện được thêm vào.

Bây giờ bạn đã biết điều kiện là gì, loại nào được hỗ trợ và cách thêm hoặc xóa điều kiện khỏi giám sát.

Hãy xem xét chi tiết nội dung của bản ghi và cách bạn có thể lấy bản ghi hoặc tất cả bản ghi trong màn hình để kiểm tra bất cứ lúc nào.

Nếu bạn có thể nhớ lại từ trang chiếu trước đó, khi bạn thêm một điều kiện để giám sát, Core Location sẽ tạo một bản ghi và thêm điều kiện vào bản ghi đó.

Ngoài điều kiện, một bản ghi chứa một đối tượng khác được gọi là sự kiện.

Sự kiện chứa trạng thái đại diện cho trạng thái quan sát hiện tại của điều kiện, cho dù hài lòng, không hài lòng hay không xác định, và ngày và giờ mà điều kiện gặp phải trạng thái.

Bây giờ bạn có thể tự hỏi tại sao có một trường hợp điều kiện khác trong sự kiện này.

Đây được gọi là sự tinh chỉnh.

Nó dùng để làm gì?

Nếu bạn có thể nhớ lại từ BeaconIdentityCondition, ứng dụng của bạn có thể giám sát chỉ UUID, hoặc UUID và major, hoặc UUID cùng với major và minor.

Nếu một điều kiện với ký tự đại diện chính và phụ được thỏa mãn, sự kiện đó sẽ được cung cấp với sự tinh chỉnh được điền vào.

Điều kiện tinh chỉnh đó sẽ mang UUID nhưng cũng là thông tin chính và nhỏ của đèn hiệu quan sát được.

Sau đó, một khi điều kiện trở nên không được thỏa mãn, việc tinh chỉnh sẽ được đặt lại thành số không.

Có thể có nhiều trường hợp bản ghi với mỗi bản ghi được giải quyết duy nhất bởi mã định danh được truyền vào khi điều kiện được thêm vào.

Tất cả các bản ghi của màn hình của bạn, liên kết các điều kiện với lastEvents và số nhận dạng, được lưu trữ với ứng dụng của bạn.

Điều này cho phép bạn truy vấn các điều kiện và trạng thái tương ứng của chúng như được quan sát lần cuối bất cứ lúc nào.

Hãy xem nó trông như thế nào trong mã.

Để truy xuất một bản ghi được liên kết với một điều kiện, bạn có thể gọi phương thức bản ghi với mã định danh của nó.

Nếu không có điều kiện nào được theo dõi với mã định danh bạn đã vượt qua, số không sẽ được trả về.

Sau đó, bạn có thể lấy điều kiện được giám sát cơ bản bằng cách truy cập thuộc tính điều kiện.

Và bạn có thể nhận được lastEvent được gửi đến ứng dụng của mình cho điều kiện đó bằng cách truy cập thuộc tính lastEvent.

Sau đó, từ sự kiện, bạn có thể nhận được trạng thái, ngày tháng và sự tinh chỉnh được quan sát gần đây nhất.

Bây giờ bạn đã biết cách truy xuất một bản ghi.

Làm thế nào để bạn có được tất cả các hồ sơ giám sát?

Bạn có cần theo dõi tất cả các số nhận dạng không?

Chà, bạn không cần phải làm vậy.

Chúng tôi duy trì danh sách cho bạn trong thuộc tính nhận dạng trên màn hình của bạn.

Bạn có thể dễ dàng lặp lại nó để truy xuất từng bản ghi và nội dung của nó.

Bây giờ bạn đã biết cách truy cập nội dung của bản ghi, hãy xem cách sử dụng các sự kiện khi các thay đổi xảy ra.

Mã để nhận một sự kiện có thể được thực hiện bằng cách sử dụng một vòng lặp đơn giản được gói trong một Nhiệm vụ.

Khi Core Location quan sát một trạng thái cho một điều kiện được giám sát khác với trạng thái được báo cáo trong Sự kiện cuối cùng, thì Core Location sẽ cung cấp một sự kiện mới thông qua thuộc tính trình tự không đồng bộ sự kiện trên màn hình của bạn để tiếp tục vòng lặp đang chờ.

Đối tượng sự kiện được phân phối mang đến cho bạn trạng thái mới và số nhận dạng của điều kiện bị ảnh hưởng.

Hoặc, trong khi xử lý sự kiện mới, bạn cũng có thể sử dụng mã định danh để lấy bản ghi và Sự kiện cuối cùng cho điều kiện đó.

Chúng ta có thể sử dụng thông tin đó để có thêm bối cảnh về những gì đã xảy ra bây giờ.

Nó đây rồi!

Chương trình chào hỏi đơn giản của chúng tôi đã hoàn tất.

Bây giờ bạn đã biết CLMonitor hoạt động như thế nào, tôi có một số lời khuyên về cách sử dụng nó tốt nhất.

Hãy bắt đầu với ba yêu cầu chính.

Đầu tiên, bạn có thể có nhiều màn hình với các tên khác nhau để xử lý các điều kiện khác nhau, nhưng bạn chỉ phải khởi tạo một màn hình tại một tên nhất định.

Bởi vì CLMonitor duy trì trạng thái của các điều kiện mà nó đang theo dõi, việc cố gắng khởi tạo một điều kiện khác có cùng tên có thể dẫn đến hành vi không mong muốn.

Thứ hai, bởi vì các sự kiện có thể đến không thể đoán trước, tốt nhất là luôn có một Nhiệm vụ đang chờ trên chuỗi sự kiện của màn hình của bạn.

Một sự kiện chỉ có thể trở thành Sự kiện cuối cùng của một số bản ghi sau khi bạn đã xử lý nó.

Vì vậy, nếu một điều kiện thay đổi trạng thái trong khi bạn không chờ đợi các sự kiện, màn hình của bạn sẽ không phản ánh trạng thái mới cho đến khi bạn thực hiện.

Cuối cùng, nếu ứng dụng của bạn đã bị chấm dứt, khi bất kỳ điều kiện được giám sát nào gặp phải sự kiện, Core Location sẽ khởi chạy ứng dụng của bạn ở chế độ nền miễn là nó được phép nhận vị trí người dùng.

Điều đó có nghĩa là ứng dụng của bạn cần khởi tạo lại màn hình và chờ đợi các sự kiện bất cứ khi nào nó được khởi chạy nếu nó vẫn quan tâm đến trạng thái của các điều kiện mà nó đang theo dõi.

Một cách để làm điều này là nghe cuộc gọi lại đại diện ứng dụng didFinishLaunchingWithOptions.

Vì API mới dẫn đến hành vi khởi chạy, tôi thực sự khuyên bạn chỉ nên sử dụng CLMonitor từ ứng dụng của mình.

Thay vào đó, việc sử dụng nó trong các tiện ích hoặc trình cắm sẽ khởi chạy ứng dụng của bạn và làm phức tạp việc đảm bảo rằng chỉ có một màn hình tồn tại cho một tên nhất định tại một thời điểm.

Cuối cùng, tôi đã đề cập đến điều này trước đó: các điều kiện và trạng thái của chúng vẫn tồn tại và các sự kiện được tạo ra khi CLMonitor quan sát thấy sự thay đổi trạng thái trong một trong các điều kiện mà nó đang theo dõi, vì vậy tôi thực sự khuyên bạn nên xem các trạng thái đó vì CLMonitor đại diện cho chúng thay vì duy trì

Điều đó nói rằng, một số ứng dụng, chẳng hạn như trực quan hóa SwiftUI, có thể yêu cầu giữ một biểu diễn riêng biệt.

Nếu bạn cần làm điều đó, hãy dành đại diện đó cho SwiftUI và không sử dụng nó để lý luận về các sự kiện dự kiến.

Vậy đó là CLMonitor!

Tôi thực sự hào hứng với API mới của chúng tôi.

Hãy thử nó!

Chúng tôi hy vọng nó sẽ cải thiện đáng kể trải nghiệm giám sát của bạn.

Chúng tôi rất muốn nghe phản hồi của bạn.

Chúng tôi cũng có một ứng dụng mẫu thể hiện CLMonitor đang hoạt động.

Nó có sẵn trong phần tài nguyên của video này.

Tải xuống và dùng thử.

Cuối cùng, kiểm tra phiên của đồng nghiệp Siraj của tôi về cập nhật vị trí.

Cảm ơn vì đã xem!