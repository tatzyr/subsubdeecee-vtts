10138

♪ ♪

Jennifer: Xin chào, tôi là Jennifer Patton, một nhà thiết kế trong Nhóm Thiết kế Apple.

Matthew: Và tôi là Matthew Koonce, giám đốc kỹ thuật của nhóm SwiftUI cho watchOS.

Jennifer: Đối với bản phát hành chính thứ mười của watchOS, chúng tôi đã thiết kế lại giao diện người dùng để hiển thị thông tin kịp thời, truyền đạt nội dung tập trung trong nháy mắt, tôn vinh hình dạng và độ trung thực của màn hình với màu sắc và hình ảnh toàn màn hình, đồng thời làm cho việc điều hướng nhất quán và có thể dự đoán được.

Matthew: Và chúng tôi cũng đã phát triển các API của mình.

SwiftUI là trung tâm của watchOS 10.

Trong phiên này, chúng tôi muốn hướng dẫn bạn các chi tiết về thiết kế lại watchOS 10.

Chúng ta sẽ bắt đầu với một số nguyên tắc thiết kế chính.

Sau đó, chúng tôi sẽ xem xét một số cách mới để cấu trúc điều hướng trong ứng dụng của bạn.

Sau đó, chúng ta sẽ nói về sự phát triển của hệ thống bố cục của chúng ta và một số API được cập nhật giúp sử dụng mọi điểm ảnh.

Và cuối cùng, chúng ta sẽ xem màu sắc và vật liệu có thể mang lại một chiều hướng hoàn toàn mới cho các ứng dụng như thế nào.

Nghe có vẻ như một kế hoạch?

Jennifer: Vâng! Hãy đi sâu vào nó.

Hãy bắt đầu với một số Nguyên tắc Thiết kế.

Điều đầu tiên bạn sẽ muốn nghĩ đến khi thiết kế cho Apple Watch là "Thông tin hoặc trải nghiệm phù hợp nhất mà ứng dụng của tôi có thể cung cấp cho mọi người vào lúc này là gì?" Hãy xem ứng dụng Thời tiết làm ví dụ.

Bởi vì Apple Watch là một thiết bị chấm công phù hợp nhất cho các tương tác nhanh chóng và tập trung, điều đầu tiên bạn sẽ thấy khi mở ứng dụng là thời tiết địa phương của bạn cho ngày hôm nay.

Với một vòng quay đơn giản của vương miện kỹ thuật số, bạn sẽ có được thời tiết địa phương cho phần còn lại của ngày, và sau đó cho phần còn lại của tuần.

Và nếu tôi đang tìm kiếm thời tiết ở New York, chẳng hạn, danh sách các thành phố của tôi chỉ cách bất kỳ chế độ xem chi tiết nào trong số này một cú chạm.

Thời tiết đạt được những gì tôi muốn nghĩ là "Khoảnh khắc Apple Watch". Khi bạn đang thiết kế ứng dụng của mình, hãy cố gắng thu hẹp trọng tâm của trải nghiệm xuống chỉ những gì có liên quan tại thời điểm người đeo nâng cổ tay lên.

Trải nghiệm xem nên được chuyên môn hóa cao cho các tương tác ngắn.

Nếu bạn có mười giây chú ý đến ai đó, bạn sẽ đưa ra thông tin nào?

Trên iPhone, News là một ứng dụng đa tab, đa cấp giàu nội dung.

Và trên Apple Watch, News tập trung vào năm câu chuyện hàng đầu.

Nội dung được xếp chồng lên nhau theo chiều dọc trong nguồn cấp dữ liệu và mở rộng nội tuyến khi được nhấn.

Tương tác ngắn gọn là một trong những điều mà tôi thích khi thiết kế cho Apple Watch.

Khi bạn chỉ nhận được vài giây chú ý của mọi người, bạn cần phải ngắn gọn, giống như cách Tin tức tập trung trải nghiệm vào các tiêu đề của ngày hôm nay.

Và Nhịp tim hiển thị dữ liệu hữu hạn trước, vì vậy nó có thể dành phần lớn chế độ xem cho hoạt ảnh toàn màn hình.

Và Hoạt động đơn giản hóa trải nghiệm rộng rãi thành các chế độ xem tập trung duy nhất.

Vì vậy, khi thiết kế ứng dụng của bạn, hãy giữ nó ngắn gọn và giữ cho nó tập trung.

Khi chúng tôi công bố Apple Watch vào năm 2014, chúng tôi cũng đã giới thiệu Digital Crown là một thiết bị đầu vào độc đáo và chính xác có thể được sử dụng mà không che khuất màn hình.

Trong watchOS 10, chúng tôi nhấn mạnh Digital Crown là cách bạn truy cập và điều hướng qua các ứng dụng, để cuộn, phân trang và thực hiện các điều chỉnh chính xác.

Mặc dù các tương tác nên được neo vào vương miện, nhưng chúng cũng phải luôn được sao lưu bằng cách chạm vào.

Bạn có thể sử dụng mục tiêu thiết kế là gắn các tương tác với vương miện kỹ thuật số để định hình cấu trúc và trải nghiệm điều hướng của ứng dụng.

Khi thiết kế cho watchOS, hãy xem xét hành trình mà mọi người sẽ thực hiện từ thời điểm họ nâng cổ tay lên.

Một tính năng mới tuyệt vời trong watchOS 10 là Smart Stack.

Với một lượt của vương miện kỹ thuật số, các vật dụng có thể nhìn thoáng qua xuất hiện trên màn hình trong một ngăn xếp được sắp xếp thông minh.

Khi bạn thiết kế ứng dụng của mình, bạn có thể bắt đầu bằng cách suy nghĩ về thông tin nào sẽ tạo nên tiện ích Smart Stack tốt nhất và sau đó thiết kế xung quanh những trải nghiệm có liên quan và kịp thời đó để kiến trúc ứng dụng của bạn.

Và chắc chắn hãy xem các tiện ích thiết kế cho Smart Stack trên Apple Watch của đồng nghiệp của tôi, Ed.

Khi bạn đã thu hẹp trọng tâm của ứng dụng đồng hồ của mình thành những mẩu thông tin có kích thước nhỏ có liên quan trong thời điểm hiện tại, bước tiếp theo của bạn sẽ là ghép những khoảnh khắc đó lại với nhau thành một cấu trúc có thể điều hướng dễ dàng.

Matthew và nhóm của anh ấy đã làm việc chăm chỉ để phát triển một số API mới đáng kinh ngạc để bạn sử dụng.

Mang nó đi, Matthew.

Matthew: Cảm ơn, Jenn.

Hãy cùng xem cách điều hướng trong các ứng dụng đã được cập nhật với SwiftUI.

Đầu tiên, chúng ta sẽ xem xét NavigationSplitView, cung cấp nội dung chi tiết trong nháy mắt.

Sau đó, một số cập nhật cho TabView cho phép bạn liên kết nhiều tương tác hơn với Digital Crown.

Cả hai đều nằm bên cạnh NavigationStack như các mô hình điều hướng cốt lõi của chúng tôi.

Chọn đúng cách để cấu trúc ứng dụng của bạn là một quyết định cơ bản và mỗi cách đều có điểm mạnh của nó.

Hãy bắt đầu với NavigationSplitView.

Khái niệm NavigationSplitView trên watchOS được mượn từ bố cục hai cột, giống như bạn có trong Thời tiết trên iPadOS.

Trên watchOS, danh sách nguồn và chế độ xem chi tiết được tách ra và sau đó kết hợp lại, với danh sách nguồn được giấu ngay bên dưới chế độ xem chi tiết.

Bây giờ danh sách nguồn đó chỉ cách một cú chạm.

Jennifer: Navigation Split View là một lựa chọn hoàn hảo nếu bạn có danh sách nguồn, như danh sách các thành phố trong Thời tiết hoặc danh sách cổ phiếu và chế độ xem chi tiết các mặt hàng trong danh sách nguồn đó.

Đưa mọi người trực tiếp vào chế độ xem chi tiết khi họ khởi chạy ứng dụng của bạn.

Sử dụng vị trí, thời gian gần đây, tần suất hoặc một số dấu hiệu khác về ý định của người dùng để thông báo chi tiết nào sẽ xuất hiện trước.

Cố gắng làm cho chế độ xem chi tiết của bạn trong nháy mắt không thể nhầm lẫn đến mức nó không cần tiêu đề.

Matthew: Một tính năng thực sự mượt mà của Chế độ xem phân chia điều hướng mà chúng tôi đã tích hợp ngay vào SwiftUI là sự chuyển đổi giữa chế độ xem chi tiết và danh sách nguồn.

Tất nhiên, bạn có thể nhấn vào biểu tượng danh sách, hoặc thậm chí tốt hơn, tương tác với ngón tay của bạn.

Jennifer: Và danh sách nguồn là một công cụ tuyệt vời để hiển thị dữ liệu so sánh.

Bây giờ là 10:09 sáng ở Cupertino và bây giờ là 7:09 tối ở Budapest.

Không cần đặt tiêu đề cho danh sách nguồn và không cần nút đóng hoặc điều khiển điều hướng.

Điều này cho phép danh sách nguồn sử dụng thanh điều hướng ngắn hơn, hiển thị nhiều dữ liệu so sánh hơn trên màn hình trong nháy mắt.

Matthew: API cho NavigationSplitView trên watchOS giống như trên các nền tảng khác.

Bạn có thể thiết lập một danh sách nguồn và khởi tạo nó với một lựa chọn.

Luôn khởi tạo lựa chọn thành một giá trị để SwiftUI có thể tự động khởi chạy đến chế độ xem chi tiết.

Tiếp theo, hãy nói về TabView, đã nhận được một số bản cập nhật thực sự tuyệt vời và là cách yêu thích mới của tôi để điều hướng các ứng dụng trên Apple Watch của mình.

Chế độ xem tab có thể cuộn giữa các chế độ xem và mới trong watchOS 10, một tab duy nhất có thể mở rộng và thay đổi kích thước khi cần thiết.

Jennifer: Ngoài việc cho phép nội dung mở rộng nội tuyến, điều này cũng cho phép một thiết kế phù hợp với một màn hình duy nhất theo mặc định để hỗ trợ văn bản bản địa hóa và loại lớn nếu cần.

Matthew: Chúng ta hãy xem xét kỹ hơn cách chúng ta đang sử dụng TabView trong Hoạt động.

Hoạt động có một tab cho mỗi chế độ xem chi tiết vòng và nó đang sử dụng kiểu "trang dọc" mới.

Hoạt động cũng có tính năng chuyển đổi mờ mới này giữa mỗi tab.

Kết hợp quá trình chuyển đổi này với công cụ sửa đổi nền vùng chứa để có sự pha trộn liền mạch giữa các chế độ xem.

Trang cuối cùng trong Hoạt động là danh sách cuộn các bài tập đã hoàn thành gần đây.

Thêm danh sách đó cũng dễ dàng như thêm một danh sách!

TabView sẽ tự động phát hiện bất kỳ nội dung cuộn nào và sẽ mở rộng để phù hợp với nó.

Vì vậy, đó là cách chúng ta có thể nhanh chóng xây dựng một bố cục tương tự như Hoạt động, nhưng TabView có thêm một mẹo nữa.

Jenn: Bạn có nhận thấy hình ảnh động thú vị xảy ra khi bạn cuộn đến tab di chuyển không?

Xem các Vòng Hoạt động khi chúng mở rộng quy mô vào góc trên cùng bên trái.

Điều này đạt được mục tiêu thiết kế của chúng tôi là gắn các tương tác với vương miện kỹ thuật số, đồng thời giữ cho Nhẫn Hoạt động vĩnh viễn trong tầm nhìn.

Matthew: Bây giờ bạn có thể tự hỏi, "Tôi cũng có thể làm điều đó không?" Và câu trả lời là, bạn có thể! Hãy cùng xem nào.

Trong watchOS 10, bây giờ bạn có thể điều khiển hoạt ảnh dựa trên giá trị lựa chọn của TabView.

Một mẹo thực sự gọn gàng là kết nối điều này với hiệu ứng hình học phù hợp.

Vòng hoạt động xuất hiện trong cả TabView và trên thanh công cụ.

Bằng cách thêm hiệu ứng hình học phù hợp vào mỗi trong hai chế độ xem này, SwiftUI sẽ tự động tạo hiệu ứng động từ vị trí này sang vị trí khác.

Jennifer: Chế độ xem phân chia điều hướng và Chế độ xem tab thực sự có khả năng, nhưng chúng không nhất thiết phải phù hợp với mọi ứng dụng.

Nếu ứng dụng của bạn không thể làm những gì nó cần làm bằng cách xoay vòng giữa danh sách chi tiết và nguồn hoặc trong một vài tab được phân trang theo chiều dọc, hãy cân nhắc sử dụng NavigationStack.

Matthew: Đúng, điều đó hoàn toàn đúng.

Chúng tôi đang sử dụng NavigationStack trong nhiều ứng dụng như Workout, Calendar và Music.

Chúng tôi thậm chí đã làm mới hoạt ảnh đẩy điều hướng!

Bây giờ nó làm nổi bật và di chuyển chế độ xem bạn đã chọn.

Jennifer: NavigationStack vẫn là cách rõ ràng nhất để dẫn mọi người vào và ra khỏi hệ thống phân cấp quan điểm.

Sử dụng tiêu đề lớn ở chế độ xem đầu tiên, nhưng không sử dụng ở bất kỳ chế độ xem phụ nào có nút quay lại.

Khi thiết kế ứng dụng của bạn, hãy chọn cấu trúc điều hướng hoàn thành "Khoảnh khắc Apple Watch" của bạn trong càng ít tương tác càng tốt.

Matthew: Vậy đó là điều hướng trên watchOS 10.

NavigationSplitView, TabView và NavigationStack làm cho trải nghiệm nhất quán và có thể dự đoán được trên tất cả các ứng dụng.

Jennifer: Bây giờ bạn đã chọn cấu trúc điều hướng tốt nhất cho ứng dụng của mình, hãy nói về các tài nguyên bạn có thể sử dụng để xây dựng từng chế độ xem.

Khi màn hình và phần cứng Apple Watch phát triển, màn hình luôn lớn hơn và tròn hơn.

Trong khi thiết kế cho một màn hình ngày càng tròn trịa trong những năm qua, chúng tôi đã phát triển một hệ thống lưới linh hoạt xác định kích thước và vị trí của các điều khiển, nhãn và nội dung.

Để phù hợp với các loại nội dung khác nhau, chúng tôi đã thiết kế ba bố cục nền tảng.

Chế độ xem dựa trên quay số, Chế độ xem đồ họa thông tin và Danh sách.

Tất cả các bố cục này được thiết kế để tự động thích ứng với các kích thước Apple Watch khác nhau được hỗ trợ bởi watchOS 10.

Chế độ xem dựa trên quay số rất tốt cho thông tin dày đặc được phân phối trong nháy mắt.

Việc sử dụng màu sắc và hình ảnh toàn màn hình, như điều kiện thời tiết, có thể giúp thêm ngữ cảnh bổ sung.

Quay số cũng cho phép bạn thêm tối đa bốn điều khiển góc khác nhau mà không che khuất nội dung.

Chế độ xem đồ họa thông tin lý tưởng cho các biểu đồ, đồ thị và trực quan hóa dữ liệu khác được ghép nối với một khối văn bản và số liệu.

Và Danh sách giúp bạn dễ dàng cuộn qua nội dung và tìm thấy chính xác những gì bạn cần.

Các lưới dựa trên hình dạng của khu vực hiển thị đang hoạt động.

Chúng tôi bắt đầu với độ cong của màn hình và sử dụng nó để thông báo về mặt toán học về kích thước và vị trí của các phần tử trong chế độ xem.

Các lưới bố cục này có sẵn trong Tài nguyên Thiết kế của Apple.

Tôi hy vọng bạn sẽ thấy chúng hữu ích trong việc thiết kế ứng dụng của bạn.

Matthew: Các lưới bố cục do Jenn và nhóm Thiết kế tạo thành nền tảng của watchOS 10 và chúng cung cấp nền tảng của nhiều API của chúng tôi.

Ví dụ, sử dụng đệm cảnh để có được các phần chèn bạn cần để xây dựng chế độ xem quay số.

Hoặc sử dụng vị trí "thanh trên cùng" mới để thêm một nút vào thanh công cụ ở trên cùng bên phải của màn hình.

Khi bạn sử dụng vị trí này, thời gian di chuyển ra khỏi con đường và tập trung vào màn hình.

Chế độ xem đang phát thực sự sử dụng thanh công cụ được cập nhật Ngoài việc sử dụng các vị trí "thanh trên cùng dẫn đầu" và "dấu", Đang phát thêm các nút điều khiển của nó vào thanh dưới cùng.

SwiftUI đang sử dụng cùng một lưới bố cục mà Jenn vừa mô tả để căn chỉnh các nút này.

Không cần thêm bất kỳ phần đệm bổ sung nào.

Cũng ở thanh dưới cùng là nút tạm dừng.

Bạn có thể sử dụng công cụ sửa đổi kích thước điều khiển để làm cho nút này lớn hơn và nổi bật hơn.

Xây dựng màn hình Đang phát chưa bao giờ dễ dàng hơn thế!

Các vị trí thanh công cụ này mở ra các cơ hội mới cho các tương tác tập trung bằng cách cho phép nhiều điều khiển hơn trên màn hình cùng một lúc.

Jennifer: Chúng tôi đã phát triển các lưới bố cục để sử dụng mọi điểm ảnh và làm cho trải nghiệm sử dụng Apple Watch nhất quán và dễ dự đoán hơn trên các ứng dụng.

Tôi cũng hy vọng họ sẽ truyền cảm hứng cho bạn để thiết kế các ứng dụng tuyệt vời trong nhiều năm tới.

Matthew: Tiếp theo, hãy nói về màu sắc và bộ vật liệu đầy đủ, mang đến cho mọi người cảm giác về vị trí bên trong hệ thống phân cấp quan điểm.

Jennifer: Một trong những mục tiêu thiết kế của chúng tôi cho watchOS 10 là nhấn mạnh hình dạng và độ trung thực của màn hình với màu sắc và hình ảnh toàn màn hình.

Cuối cùng, chúng tôi đã thêm bốn tài liệu nền toàn màn hình sống động ảnh hưởng đến nội dung nền ở các mức độ mờ khác nhau, như Siêu mỏng, Mỏng, Thường và Dày.

Matthew: Và bạn có thể sử dụng cùng một SwiftUI API trên watchOS như bạn có thể đã làm trên các nền tảng khác.

Jennifer: Chúng tôi cũng đã thêm một gradient nền toàn màn hình mà bạn có thể tô màu với màu nhấn của riêng mình.

Trong Hoạt động, chúng tôi sử dụng các màu nhấn cho Di chuyển, Tập thể dục và Đứng để phân biệt ba tab liên tiếp có bố cục tương tự trong nháy mắt.

Một cách sử dụng tuyệt vời khác của màu toàn màn hình là thiết lập tông màu, giống như nền xanh làm dịu này trong Sleep.

Bạn có thể sử dụng màu sắc để truyền đạt thông tin trong nháy mắt, như trong Đồng hồ Thế giới nơi chúng ta sử dụng gradient mặt trời để hiển thị thời gian trong ngày.

Bạn cũng có thể sử dụng màu toàn màn hình để truyền tải sự thay đổi trạng thái.

Trong Bộ hẹn giờ, nền có màu đen khi bộ hẹn giờ đang đếm ngược, và sau đó, màu cam sáng tuyên bố rằng bộ hẹn giờ trứng của tôi đã hoàn tất.

Để đảm bảo các yếu tố tiền cảnh trông tuyệt vời trên tất cả các nền này, chúng tôi đã thêm các vật liệu điền sống động vào các ô điều khiển và đĩa, và nhãn văn bản sống động, ở các cấp độ nổi bật Tiểu học, Trung học, Đại học và Đệ tứ để tạo ra hệ thống phân cấp thông tin trong kiểu chữ.

Chúng tôi cũng đã thêm các phiên bản sống động của tất cả các màu hệ thống đảm bảo tính dễ đọc trên nền toàn màn hình.

Matthew: Thật tuyệt khi có sẵn tất cả những tài liệu mới đó trên watchOS!

Vậy làm thế nào để nó kết hợp với nhau trong một ứng dụng?

Hãy sử dụng ứng dụng Noise làm ví dụ.

Chúng ta sẽ bắt đầu với gradient nền toàn màn hình.

Điều này đến từ công cụ sửa đổi "nền container", mới trong watchOS 10.

Tiếng ồn vượt qua màu xanh lá cây với độ dốc được áp dụng.

Các thanh chưa được điền của biểu đồ và nhãn trục X, đang sử dụng kiểu tiền cảnh thứ cấp.

Phong cách thứ cấp cung cấp một số sự sống động và cho phép màu nền xuất hiện.

Các thanh được điền và phần còn lại của nhãn văn bản đang sử dụng kiểu chính.

Với điều đó, khung cảnh đã hoàn thành!

Khi bạn cập nhật ứng dụng của mình cho watchOS 10, bạn sẽ nhận thấy một vài thay đổi khác.

Các bài thuyết trình trên toàn hệ thống hiện sử dụng vật liệu mỏng toàn màn hình.

Điều này cung cấp cho người đeo bối cảnh bổ sung về vị trí của họ trong ứng dụng.

Bạn có thể thấy một chút màu xanh lá cây ngay bên dưới khung cảnh này.

Trên thực tế, tất cả các điều khiển, nhãn và nội dung Danh sách của SwiftUI đã được cập nhật để trông tuyệt vời khi được đặt trên nền tài liệu.

Jennifer: Và thanh điều hướng có một biến mờ mới tuyệt đẹp.

Điều này cung cấp một sự chuyển đổi nhẹ nhàng khi nội dung cuộn bên dưới các mục điều hướng.

Đó là rất nhiều thứ để trang trải!

Chúng tôi đã xem qua các nguyên tắc thiết kế của mình, những cách hoàn toàn mới để điều hướng trong các ứng dụng, bố cục hoàn toàn mới và cách sử dụng màu sắc và vật liệu.

watchOS 10 là một bước tiến lớn cho việc thiết kế các ứng dụng Apple Watch.

Matthew: Và chúng ta còn rất nhiều điều để nói về tất cả những thay đổi!

Jennifer: Hãy xem "Gặp gỡ watchOS 10" để biết tổng quan về mọi thứ mới, cũng như "Thiết kế tiện ích cho ngăn xếp thông minh trên Apple Watch" để tìm hiểu cách thiết kế các tiện ích đẹp mắt.

Matthew: Nếu bạn đã có ứng dụng watchOS, "Cập nhật ứng dụng của bạn cho watchOS 10" là dành cho bạn!

Chúng tôi sẽ hướng dẫn cập nhật một ứng dụng hiện có với tất cả các API SwiftUI mà chúng tôi đã trình bày ở đây.

watchOS 10 chỉ có thể thực hiện được nhờ sự hợp tác sâu sắc giữa thiết kế và kỹ thuật.

Và đây mới chỉ là sự khởi đầu!

Jennifer: Điều đó rất đúng.

watchOS chưa bao giờ là một nền tảng sôi động hơn và chưa bao giờ có thời điểm tốt hơn để thiết kế và xây dựng ứng dụng Apple Watch của bạn.

♪ ♪