10124

♪ ♪

Xin chào, và chào mừng.

Tôi là Varun Subramanian, một Kỹ sư trong nhóm GPU, Đồ họa và Phần mềm Hiển thị tại Apple.

Phiên này là phần thứ hai của loạt bài gồm 3 phần về việc đưa các trò chơi cao cấp của bạn lên Mac.

Phiên đầu tiên, bao gồm cách bạn có thể đánh giá trò chơi của mình và "lên kế hoạch trò chơi".

Phiên này tập trung vào bộ đổ bóng của bạn và cách cải thiện tính linh hoạt và tốc độ của chúng với một số công cụ trình biên dịch Metal mới, bao gồm các cách mới để chuyển đổi bộ đổ bóng của bạn thành biểu diễn trung gian Metal và cách tránh biên dịch trên thiết bị bằng cách hoàn thiện các tệp nhị phân GPU trong thời gian xây dựng trò chơi của bạn.

Chuỗi công cụ trình biên dịch Metal giúp bạn biên dịch các trình đổ bóng cung cấp năng lượng cho trò chơi của bạn và Metal giờ đây làm cho điều đó dễ dàng hơn bao giờ hết.

Tạo Metal IR trên thiết bị là không tối ưu vì nó thêm chi phí biên dịch trước khi GPU có thể thực hiện công việc bạn cần.

Metal cung cấp cho bạn các công cụ cần thiết để tạo Metal IR từ Metal Shading Language của bạn trước thời hạn.

Metal IR đó được lưu trữ như một phần của thư viện Metal.

Bạn nên luôn đặt mục tiêu tạo các thư viện Metal của mình bằng cách sử dụng chuỗi công cụ biên dịch Metal trước thời hạn.

Tuy nhiên, khi đến từ một API và ngôn ngữ đổ bóng khác, bạn cần một cách để đưa chúng đến Metal.

Nếu bạn là người mới đến với Mac, bây giờ bạn có Metal Shader Converter.

Điều này đơn giản hóa các đường ống đổ bóng của bạn và cho phép bạn đóng gói các thư viện Metal được tạo trực tiếp trong gói của mình, tránh tạo Metal IR trên thiết bị.

Các thư viện Metal được tạo giống như các thư viện được tạo từ trình biên dịch Metal cho phép các trình đổ bóng được chuyển đổi của bạn tích hợp nguyên bản với Metal API.

Sử dụng công cụ mới để chuyển đổi các bộ đổ bóng hiện có của bạn thành các thư viện Kim loại mà sau đó bạn gửi cùng với trò chơi của mình.

Metal Shader Converter cung cấp một bộ tính năng mạnh mẽ để cải thiện trải nghiệm chuyển đổi shader của bạn sang Metal.

Nó tiêu thụ DXIL để sản xuất Metal IR.

Bạn sử dụng nó cùng với công cụ biên dịch DXC mã nguồn mở để xây dựng một đường ống đổ bóng đầu cuối.

Chuyển đổi từ DXIL sang Metal IR rất nhanh vì bộ chuyển đổi đổ bóng kim loại thực hiện chuyển đổi ở cấp độ nhị phân.

Kết quả là bạn sẽ giảm thời gian xây dựng tài sản đổ bóng.

Nó cũng cho phép bạn tận dụng các tính năng nâng cao của GPU Apple.

Bạn có thể làm điều này vì bộ tính năng phong phú của bộ chuyển đổi đổ bóng kim loại, hỗ trợ tất cả các giai đoạn đổ bóng truyền thống và hiện đại của bộ đổ bóng DXIL hiện có của bạn.

Sử dụng bộ chuyển đổi đổ bóng kim loại, bạn có thể chuyển đổi bộ đổ bóng của mình cho đường ống đồ họa truyền thống bao gồm bộ đổ bóng hình học và tessellation thành các thư viện Metal.

Nó cũng hỗ trợ tính toán đổ bóng, cũng như các giai đoạn dò tia được giới thiệu gần đây hơn và đổ bóng và khuếch đại và đổ bóng lưới.

Bây giờ, tôi sẽ hướng dẫn bạn cách sử dụng bộ chuyển đổi đổ bóng kim loại.

Có hai tình huống mà bạn có thể muốn chuyển đổi bộ đổ bóng của mình thông qua dòng lệnh.

Sử dụng công cụ dòng lệnh thông qua thiết bị đầu cuối là một cơ chế tốt để chuyển đổi từng bộ đổ bóng một.

Nếu bạn có nhiều bộ đổ bóng, bạn có thể tạo một tập lệnh shell gọi bộ chuyển đổi bộ đổ bóng Metal để tự động chuyển đổi nhiều bộ đổ bóng cho bạn.

Chuyển đổi bộ đổ bóng của bạn bằng cách sử dụng công cụ dòng lệnh rất dễ dàng.

Sau khi bạn thiết lập DXC và bộ chuyển đổi đổ bóng, hãy bắt đầu bằng cách biên dịch bộ đổ bóng HLSL của bạn sang DXIL.

DXC yêu cầu bạn chỉ định điểm vào để biên dịch, loại đổ bóng và tệp đầu ra.

Tiếp theo, gọi trình chuyển đổi đổ bóng trên tệp DXIL vừa tạo và chỉ định thư viện Metal đầu ra để tạo.

Theo mặc định, trình chuyển đổi đổ bóng tạo thư viện Metal cho phiên bản macOS mới nhất, cũng như tệp JSON với dữ liệu phản xạ hữu ích.

Trong thời gian chạy, bạn chuyển thư viện Metal này đến thiết bị Metal để tải nó và xây dựng các đối tượng trạng thái đường ống.

Có hai tình huống khác mà giao diện dòng lệnh có thể không phải là lựa chọn tốt nhất cho quy trình làm việc của bạn.

Một số công cụ trò chơi có các chương trình xây dựng nội dung tùy chỉnh biên dịch và đóng gói các trình đổ bóng thành các định dạng dành riêng cho trò chơi.

Ngoài ra, trong một số tình huống, khi bạn khởi động trò chơi của mình cho Metal, bạn cũng có thể muốn xem bộ đổ bóng của mình hoạt động tốt như thế nào trên nền tảng trước khi bạn biến chúng thành thư viện Metal trước thời hạn.

Đối với hai trường hợp cuối cùng này, bạn cần một cách để tích hợp tốt hơn bộ chuyển đổi đổ bóng kim loại vào quy trình làm việc của mình.

Để thực hiện điều này, hãy sử dụng thư viện động của bộ chuyển đổi đổ bóng kim loại.

Nó hiển thị tất cả các chức năng giống như công cụ CLI để giúp bạn tạo các thư viện Metal.

Thư viện cung cấp giao diện C thuần túy và giống như CLI, nó có sẵn trên cả macOS và Windows, vì vậy thật dễ dàng để tích hợp vào quy trình làm việc hiện tại của bạn.

Sau khi bạn đã chuyển đổi bộ đổ bóng của mình sang Metal IR, để tích hợp chúng vào trò chơi của mình, bạn tạo các trạng thái đường ống và liên kết các tài nguyên với chúng.

Trong bộ đổ bóng của mình, bạn thường xác định tài nguyên là các biến toàn cục và gán các khai báo "đăng ký" cho chúng.

Từ phía API, trò chơi của bạn hoặc liên kết tài nguyên trực tiếp với các vị trí này hoặc xác định bố cục bộ nhớ rõ ràng thông qua "chữ ký gốc".

Bộ chuyển đổi Shader có thể giúp bạn đưa mô hình này đến, bởi vì Metal có một mô hình ràng buộc rất linh hoạt.

Công cụ đưa ra các tài nguyên này vào bộ đệm Đối số.

Trong mô hình này, bạn liên kết một bộ đệm đối số trực tiếp với đường ống của bạn và tham chiếu tài nguyên của bạn thông qua nó.

Có hai chế độ bố cục cho bộ đệm Đối số "cấp cao nhất" này mà bạn có thể chọn, để phù hợp nhất với trò chơi của mình.

Bố cục đơn giản nhất bạn có thể tạo là bố cục tự động, trong đó bộ chuyển đổi đổ bóng lần lượt đặt tài nguyên của bạn.

Khi bạn tạo một trạng thái đường ống chứa bộ đổ bóng của mình, bạn liên kết một bộ đệm đối số duy nhất và thông qua nó, bạn tham chiếu tất cả các tài nguyên của mình.

Ngoài ra, trình chuyển đổi đổ bóng hỗ trợ xác định rõ ràng bố cục phù hợp với chữ ký gốc của bạn.

Sử dụng chế độ này khi trò chơi của bạn cần chỉ định các kết cấu và bộ lấy mẫu riêng biệt vào bảng tài nguyên của riêng chúng hoặc nếu trò chơi của bạn sử dụng tài nguyên không ràng buộc.

Bạn cũng có thể nhúng bộ đệm thô và hằng số 32 bit trực tiếp vào bộ đệm đối số cấp cao nhất, được hiển thị dưới dạng 0 và 1 trong sơ đồ này.

Bây giờ, Argument Buffer cấp cao nhất là một tài nguyên được chia sẻ giữa CPU và GPU, vì vậy khi bạn ghi vào nó, bạn cần phối hợp quyền truy cập vào bộ nhớ của nó để tránh điều kiện cuộc đua có thể gây ra hỏng hình ảnh.

Bạn không cần phải tuần tự hóa công việc CPU và GPU để tránh điều kiện cuộc đua này.

Một cách để tránh điều này là sử dụng bộ phân bổ vết sưng.

Đây có thể là một bộ đệm Kim loại lớn mà từ đó bạn phân bổ phụ các tài nguyên khác nhau cho mỗi khung.

Sau đó, bạn che bộ đệm nền cho mỗi khung hình trong chuyến bay mà trò chơi của bạn xử lý.

Để biết thêm chi tiết về việc triển khai bump allocator, hãy xem mã mẫu của chúng tôi.

Để có các phương pháp quản lý bộ đệm Argument tốt nhất, hãy xem phiên không ràng buộc từ năm ngoái và tài liệu Metal.

Mô hình ràng buộc không phải là nơi duy nhất mà bộ chuyển đổi đổ bóng kim loại có thể giúp bạn đưa bộ đổ bóng của mình lên máy Mac.

Lập bản đồ các giai đoạn đổ bóng nhất định có thể là một thách thức do sự khác biệt trong API đồ họa.

Ví dụ, bạn có thể có các đường ống tận dụng các giai đoạn hình học và tessellation truyền thống.

Metal là một API hiện đại và nó cung cấp các tính năng như ID khung nhìn và khuếch đại khiến các giai đoạn cũ hơn, kém hiệu quả hơn từ các API đồ họa khác trở nên không cần thiết.

Tuy nhiên, khi trò chơi của bạn dựa vào các đường ống này cho các hiệu ứng truyền thống giúp tăng cường một số bề mặt, như cỏ được hiển thị trong hình ảnh này, việc chuyển đổi chúng bằng tay rất tốn kém.

Bộ chuyển đổi đổ bóng kim loại giúp bạn đưa các đường ống này sang Metal, bằng cách ánh xạ chúng đến Mesh Shaders, một cấu trúc API đồ họa hiện đại và hiệu quả hơn.

Công cụ này thực hiện việc nâng vật nặng để đưa các đường ống phức tạp này đến Metal một cách dễ dàng, bằng cách ánh xạ từng giai đoạn thành biểu diễn Metal IR.

Điều này bao gồm tessellator, theo truyền thống là một hoạt động chức năng cố định.

Để hỗ trợ quy trình làm việc này, năm nay Metal bổ sung khả năng liên kết các chức năng có thể nhìn thấy với các giai đoạn "đối tượng và lưới" của Bộ đổ bóng lưới.

Sau khi bạn đã biên dịch các bộ đổ bóng của mình, bạn sử dụng chúng để xây dựng "Mô tả đường ống kết xuất lưới kim loại" và biên dịch nó thành "Trạng thái Đường ống kết xuất kim loại".

Khi Metal nhận được yêu cầu xây dựng trạng thái đường ống này, nó sẽ biên dịch và liên kết tất cả Metal IR, nướng tất cả các chức năng vào một đường ống duy nhất, hoàn toàn tránh chi phí gọi hàm và tối đa hóa hiệu suất trong thời gian chạy.

Lưu ý sức mạnh và tính linh hoạt của các chức năng hiển thị kim loại cho phép bạn xây dựng đường ống kết xuất phức tạp này chứa các giai đoạn đổ bóng này với các chức năng bổ sung của chúng.

Mặc dù việc xây dựng các đường ống lưới này rất đơn giản, nhưng mỗi đường ống phải tuân theo một loạt các bước theo thứ tự chính xác.

Thời gian chạy bộ chuyển đổi đổ bóng giúp bạn xây dựng các đường ống phức tạp này.

Nó thậm chí còn mô phỏng các cuộc gọi vẽ bằng cách gửi công việc đổ bóng lưới.

Để biết thêm thông tin, vui lòng tham khảo tài liệu Metal Shader Converter.

Bây giờ bộ đổ bóng của bạn đang ở trên Metal và bạn đang chạy trạng thái đường ống của mình, đây là một số mẹo để giúp bạn có được hiệu suất tuyệt vời và độ chính xác trực quan.

Shader được biên soạn với bộ chuyển đổi shader tham chiếu gián tiếp các tài nguyên Kim loại.

Để gắn cờ cư trú tài nguyên cho Metal, bạn sẽ gọi "useResource".

Tuy nhiên, useResource là một cuộc gọi tốn kém khi được sử dụng quá mức.

Sử dụng useResources số nhiều để cung cấp nhiều tài nguyên cùng một lúc hoặc cân nhắc sử dụng Metal heaps thông qua useHeap để gắn cờ cư trú của một số tài nguyên trong một cuộc gọi.

Các đối tượng đường ống được lưu vào bộ nhớ cache khi Metal biên dịch chúng lần đầu tiên, tự động giảm quá giang dựa trên biên dịch trong các lần chạy tiếp theo của trò chơi của bạn.

Kho lưu trữ nhị phân cũng có thể giúp bạn ở đây.

Để tận dụng tối đa GPU và tùy chỉnh Metal IR để có hiệu suất cao hơn, bộ chuyển đổi đổ bóng cung cấp cho bạn các tùy chọn.

Có các tùy chỉnh về khả năng tương thích, họ GPU, hành vi tìm nạp đỉnh, đặt tên điểm vào, phản ánh và hơn thế nữa.

Đây là một cơ hội tối ưu hóa bổ sung.

Tôi đã đề cập trước đó rằng trình chuyển đổi đổ bóng tham gia trình biên dịch Metal như một cơ chế khác để tạo ra "Thư viện Metal" từ IR đổ bóng hiện có của bạn.

Metal sử dụng những thứ này để cung cấp các giai đoạn đường ống đồ họa khác nhau.

Vì mọi thứ đều là Metal IR, bạn có thể kết hợp "Thư viện Metal" đến từ bộ chuyển đổi đổ bóng Metal và từ Trình biên dịch Metal trong một ứng dụng duy nhất và thậm chí trong một đường ống duy nhất.

Ngôn ngữ đổ bóng kim loại cũng cho phép bạn truy cập các tính năng độc đáo như pha trộn có thể lập trình.

Sử dụng cách tiếp cận này để tận dụng tối đa GPU của Apple.

Bạn thậm chí có thể tận dụng chức năng tô bóng độc đáo như tô bóng gạch.

Điều này mang lại cho bạn sự linh hoạt to lớn trong cách bạn đưa trò chơi của mình lên Metal.

Hiệu suất rất quan trọng nhưng tính chính xác trực quan của trò chơi của bạn là tối quan trọng.

HLSL cho phép xử lý liền mạch các kết cấu như các mảng của một phần tử.

Để mang lại các bộ đổ bóng dựa trên hành vi này, hãy tạo kết cấu của bạn dưới dạng mảng kết cấu hoặc tạo "chế độ xem mảng kết cấu" trên kết cấu của bạn.

Nếu bạn đang sử dụng "MetalKit Texture Loader", nó cũng có thể giúp bạn tải các tệp dưới dạng mảng kết cấu.

Để thiết lập các đối tượng lấy mẫu của bạn và đọc từ các kết cấu này, hãy đảm bảo cho Metal biết trước rằng bạn có ý định tham chiếu các bộ lấy mẫu trong bộ đệm đối số bằng cách sử dụng thuộc tính supportsArgumentBuffers trong MTL Sampler Descriptor.

Bây giờ bạn đã quen với việc tích hợp bộ chuyển đổi đổ bóng trong quy trình làm việc của mình, đây là cách để có được nó.

Bạn có thể tải xuống Metal shader converter từ developer.apple.com.

Nếu bạn đang làm việc trên máy Mac của mình, hãy tải bộ chuyển đổi đổ bóng kim loại cho gói Mac.

Nếu bạn đang làm việc trên Windows, nó là một phần của gói Công cụ Nhà phát triển Kim loại cho Windows.

Phiên bản beta của công cụ hiện đã có sẵn.

Cả hai gói đều chứa bộ chuyển đổi đổ bóng kim loại, ở dạng độc lập và thư viện, cũng như tiêu đề đồng hành trong thời gian chạy.

Tài liệu đầy đủ cũng như mẫu mã Metal C++ hiện đã có sẵn.

Sử dụng mã mẫu để khám phá mô phỏng hình học và tessellation, bản vẽ ví dụ và tính toán đổ bóng.

Chuyển đổi bộ đổ bóng của bạn thành các thư viện Kim loại mà bạn gửi cùng với trò chơi của mình giúp bạn tránh tạo các thư viện đó trong thời gian chạy trò chơi.

Có một tối ưu hóa bổ sung mà bạn có thể thực hiện, đó là biên dịch các tệp nhị phân GPU của bạn trước thời hạn.

Khi bạn xây dựng trò chơi của mình, bạn biên dịch các trình đổ bóng của mình vào các thư viện Metal vẫn cần được hoàn thiện thành các tệp nhị phân GPU.

Thông thường trò chơi của bạn thực hiện điều này khi khởi chạy, dẫn đến màn hình tải lâu hơn.

Nếu bạn trì hoãn việc hoàn thiện các tệp nhị phân GPU trong thời gian chạy, nó có thể dẫn đến việc giảm khung hình khi trò chơi biên dịch các đường ống mới theo yêu cầu.

Trình biên dịch Metal GPU Binary có thể giúp bạn giải quyết vấn đề này bằng cách cho phép bạn tạo các tệp nhị phân đổ bóng của mình tại thời điểm xây dựng trò chơi.

Bằng cách loại bỏ nhu cầu tạo các tệp nhị phân đổ bóng trong quá trình chơi trò chơi, người chơi của bạn được hưởng lợi từ việc giảm thời gian tải ứng dụng mà không phải chịu thêm các trở ngại về GPU.

Để tận dụng điều này, bạn có thể thêm một bước khác vào quy trình làm việc của mình để hoàn thiện các thư viện Metal của mình vào kho lưu trữ nhị phân Metal tại thời điểm xây dựng.

Trên thiết bị GPU Binary compilation xảy ra khi bạn tạo trạng thái đường ống từ một bộ mô tả.

Bộ mô tả này không chỉ tham chiếu các chức năng từ thư viện Metal mà còn cung cấp các thông tin quan trọng khác cho Metal như định dạng màu của tệp đính kèm kết xuất và bộ mô tả bố cục đỉnh.

Các tệp nhị phân GPU được tạo đúng lúc như một phần của việc tạo PSO.

Kho lưu trữ nhị phân cho phép bạn kiểm soát thời điểm quá trình biên dịch đó xảy ra.

Để tạo ra các tệp nhị phân GPU trước thời hạn, bạn cung cấp cả Thư viện Kim loại hiện có của mình cũng như tập lệnh cấu hình đường ống tham chiếu đến các thư viện đó.

Sau đó, bạn cung cấp cả hai cho metal-tt, tạo ra một kho lưu trữ nhị phân với các tệp nhị phân GPU.

Để phát triển tập lệnh đường ống, bạn tạo một tập lệnh JSON với các cấu hình đường ống tương tự như Metal API.

Mã Metal này tạo ra một bộ mô tả đường ống kết xuất và bên cạnh là biểu diễn tương đương JSON của nó.

Đối với tập lệnh đường ống của bạn, hãy thêm đường dẫn thư viện Metal cũng như tên hàm phân đoạn và đỉnh của nó.

Bạn cũng chỉ định bất kỳ cấu hình trạng thái đường ống nào khác.

Thế là xong, bây giờ bạn có một kịch bản Metal mà bạn có thể sử dụng.

Bạn có thể tìm thêm thông tin về lược đồ JSON trong tài liệu dành cho nhà phát triển của Metal.

Quy trình biên dịch đổ bóng trước thời hạn của bạn có thể không được hướng đến việc tạo các tệp tập lệnh đường ống.

Đối với những trường hợp này, có một cách khác để sản xuất chúng.

Bạn có thể ghi lại kho lưu trữ nhị phân Metal trong khi chạy trò chơi của mình trên thiết bị.

Những kho lưu trữ này bao gồm các tập lệnh đường ống tương ứng.

Nếu bạn thu thập các kho lưu trữ này từ thiết bị, bạn có thể sử dụng "nguồn kim loại" để trích xuất các tập lệnh đường ống nhúng của chúng.

Sau đó, bạn cập nhật đường dẫn đến thư viện Metal của mình trong các tập lệnh được trích xuất.

Để biết thêm thông tin, vui lòng tham khảo các cuộc nói chuyện của chúng tôi về cách bạn có thể "Xây dựng các tệp nhị phân GPU" cũng như "Khám phá quy trình biên dịch".

Bởi vì các tệp nhị phân GPU được điều chỉnh cho từng GPU, "metal-tt" tạo ra các phiên bản khác nhau của các tệp nhị phân để bạn phân phối cho người chơi của mình, dựa trên thiết bị của họ.

Metal-tt giúp bạn quản lý sự phức tạp này bằng cách đóng gói tất cả các tệp nhị phân GPU khác nhau một cách gọn gàng vào kho lưu trữ nhị phân Metal.

Bằng cách này, khi ứng dụng của bạn tải kho lưu trữ nhị phân đó, Metal sẽ tự động chọn tệp nhị phân thích hợp cho người chơi của bạn.

Bạn cũng có thể gói gọn nhiều bộ nhị phân vào một kho lưu trữ nhị phân duy nhất.

Bây giờ bạn có thể tạo kho lưu trữ nhị phân trước thời hạn, đây là một số phương pháp hay nhất.

Khi người chơi của bạn chạy một ứng dụng Metal với GPU Binaries được biên dịch trước, Metal sẽ tìm kiếm kho lưu trữ nhị phân đóng gói cho tệp nhị phân GPU cần thiết.

Nếu Metal không tìm thấy kết quả phù hợp trong kho lưu trữ, nó sẽ tự động quay trở lại biên dịch trên thiết bị.

Ứng dụng của bạn vẫn sẽ trông chính xác, nhưng điều này có thể trì hoãn việc gửi GPU của bạn.

Bạn có thể kiểm tra xem kho lưu trữ nhị phân của mình có chứa các đường ống mà bạn mong đợi hay không, sử dụng tùy chọn "FailOnBinaryArchiveMiss".

Bạn có thể dễ dàng chỉ định tùy chọn FailOnBinaryArchiveMiss khi tạo đối tượng trạng thái đường ống kim loại.

Trong trường hợp bỏ lỡ kho lưu trữ nhị phân, khi bạn đã đặt tùy chọn này, Metal sẽ bỏ qua quá trình biên dịch trên thiết bị và trả về trạng thái đường ống nil.

Khi kho lưu trữ nhị phân của bạn đã sẵn sàng với sự hỗ trợ cho tất cả các thiết bị mục tiêu, bạn đã sẵn sàng để triển khai.

Không phải tất cả người chơi của bạn đều có thể sử dụng hệ điều hành mới nhất.

Để đảm bảo tất cả người dùng được hưởng lợi từ kho lưu trữ nhị phân, hãy tạo một kho lưu trữ cho mỗi phiên bản hệ điều hành chính và lưu trữ nó vào ứng dụng của bạn.

Để thực hiện điều này, hãy kiểm tra phiên bản hệ điều hành của thiết bị người chơi của bạn và chọn kho lưu trữ nhị phân thích hợp để liên kết với Bộ mô tả đường ống của bạn.

Khi người chơi của bạn cập nhật hệ điều hành của họ, kho lưu trữ nhị phân của họ có thể yêu cầu biên dịch lại để tương thích chuyển tiếp, nhưng Metal đã bảo vệ bạn.

Metal xác định các kho lưu trữ nhị phân chưa được đóng gói trong gói ứng dụng trên thiết bị của người chơi của bạn và tự động nâng cấp chúng trong nền sau khi cập nhật hệ điều hành hoặc cài đặt trò chơi.

Tóm lại, trình biên dịch "kim loại" và "bộ chuyển đổi kim loại" là những công cụ bạn nên sử dụng, để tạo ra các thư viện Metal trước thời hạn mà sau đó bạn có thể vận chuyển cùng với trò chơi của mình.

Sử dụng "trình biên dịch kim loại" khi biên dịch nguồn MSL và "bộ chuyển đổi máy tạo bóng kim loại" khi bộ đổ bóng của bạn ở HLSL.

Metal-tt cho phép bạn hoàn thiện các thư viện Metal thành các tệp nhị phân GPU, phù hợp với các GPU khác nhau trong hệ sinh thái Metal.

Cuối cùng, metal-source giúp bạn thu thập các tập lệnh đường ống từ các trò chơi MacOS hiện có của mình.

Phần lớn các công cụ này, cũng như phần còn lại của chuỗi công cụ trình biên dịch nhị phân GPU, hiện hỗ trợ Windows, ngoài macOS, giúp việc tích hợp chúng vào quy trình làm việc hiện tại của bạn dễ dàng hơn bao giờ hết.

Để kết thúc: Metal Shader Converter là một công cụ mới giúp bạn đưa các shader của mình được phát triển bằng một ngôn ngữ đổ bóng khác sang Metal.

Trình biên dịch nhị phân GPU và chuỗi công cụ của nó, hiện đã có trên Windows, có thể hoàn thiện các thư viện Metal của bạn thành các tệp nhị phân GPU.

Với những công cụ này, giờ đây bạn đã có mọi thứ bạn cần để đưa bộ đổ bóng của mình đến Metal.

Vẫn còn nhiều điều để chia sẻ với bạn.

Phần 3 của loạt bài tập trung vào việc tối ưu hóa ứng dụng Metal cao cấp.

Hãy chắc chắn kiểm tra nó.

Cảm ơn vì đã xem.

♪ ♪