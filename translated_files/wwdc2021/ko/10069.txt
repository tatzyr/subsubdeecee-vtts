10069

♪ 베이스 음악 연주 ♪

♪

에릭 혼버거: 연구 및 관리 앱 코드에 다시 오신 것을 환영합니다!

이것은 당신과 내가 우리 친구 제이미를 위한 물리 치료 앱을 만들 3부작 시리즈의 두 번째 부분입니다.

따라가고 싶다면, 세션 리소스에서 우리의 프로젝트를 찾을 수 있습니다.

그냥 가서 여기에 로그인할게.

만약 당신이 첫 번째 세션에 우리와 합류했다면, 당신은 우리가 방금 온보딩과 동의를 끝냈다는 것을 기억할 것입니다.

이 세션에서 - 오, 기다려.

제이미로부터 메시지를 받은 것 같아.

"앱에 대한 새로운 아이디어가 있어."

"내 마지막 문자 봤어?"

추가 앱 요구 사항.

제이미는 당신이 노트 문서에 대해 협업하도록 초대했습니다.

그래, 음, 이번에는 우리가 뭘 할지 보자!

양식 표시, 일부 데이터 유지, 동적 일정, 동작 범위. 알았어.

그래서 제이미는 우리가 참가자들에게 얼마나 많은 수면을 잤는지, 얼마나 많은 고통을 겪고 있는지 묻는 일일 체크인 설문 조사를 설정하기를 원하는 것 같다.

ResearchKit의 양식 항목을 사용하여 한 페이지에 여러 질문을 넣는 방법을 보여드리겠습니다.

그런 다음 ResearchKit 설문 조사 결과를 구문 분석하여 CareKit에 유지해야 합니다.

그것은 우리의 완료 링을 채우고 작업 카드 UI를 업데이트하게 할 것이다.

우리는 또한 CareKit으로 고급 일정을 만드는 방법에 대해 자세히 설명한 다음, ResearchKit과 함께 그 일정 중 하나를 사용하여 참가자들이 무릎의 운동 범위를 측정하도록 유도할 것입니다.

우리는 여기서 다룰 게 많아, 그러니 뛰어들자!

우리는 일일 체크인 설문 조사를 시작할 것입니다.

우리가 온보딩 작업을 위해 했던 것처럼, 우리는 일정과 CareKit 작업을 정의하는 것으로 시작할 것이다.

매일 체크인을 하기로 되어 있으니, 매일 아침 오전 8시에 일정을 잡자.

우리는 고유 식별자와 방금 정의한 일정으로 체크인 작업을 만들 것입니다.

그리고 물론, 우리는 여기 우리 가게에서 그것을 지속해야 할 것이다.

이것은 모두 우리가 온보딩 작업을 위해 했던 것과 정확히 같다.

그게 너에게 친숙해지기 시작하길 바라!

그리고 온보딩 작업과 마찬가지로, 우리의 다음 단계는 CareFeedViewController로 건너뛰고 CareKit에게 이 작업을 표시하는 방법을 알려주는 것입니다.

이번에는, 우리의 해결책을 좀 더 일반적으로 만들어 봅시다.

우리는 현재 날짜에 대한 모든 작업을 가져올 것이다.

그런 다음 각 작업에 대해, 우리는 뷰 컨트롤러를 만들고, 그 뷰 컨트롤러를 목록에 추가할 것입니다.

우리가 더 많은 작업을 추가함에 따라 이것은 조금 더 잘 확장되어야 한다.

이제, 우리는 실제로 이 fetchTasks 메소드나 이 viewController 메소드를 정의하지 않았습니다.

우리는 파일에 조금 더 내려가서 그것들을 써야 할 것이다.

그래서 여기 우리의 fetchTasks 방법이 있습니다.

우리는 특정 날짜에 대한 작업 쿼리를 만드는 것으로 시작하고, 예정된 이벤트가 없는 작업을 제외하도록 지정합니다.

이것은 우리가 매일 일어나지 않는 일이 있을 때 작용한다.

예를 들어, 당신이 매주 월요일에 약을 복용하라는 처방전을 받았다고 가정해 봅시다.

화요일과 수요일에, 그 처방전은 여전히 당신에게 할당되어 있으며, 복용할 약이 없습니다.

이 속성은 그러한 작업이 쿼리에서 반환되지 않도록 보장합니다.

쿼리가 돌아오면, 우리는 가져온 작업을 완료 핸들러에 전달할 것입니다.

우리는 또한 작업을 수행하고 뷰 컨트롤러를 반환하는 방법을 작성해야 합니다.

우리는 작업의 ID를 검사할 것이며, 체크인 작업인 경우, 1부에서 도입한 새로운 SurveyTaskViewController를 사용할 것입니다.

이전과 마찬가지로, 우리는 작업, eventQuery 및 storeManager에 대한 참조를 제공할 것입니다.

우리는 또한 ResearchKit 설문 조사와 ResearchKit 결과를 CareKit 결과 값 배열로 변환하는 기능을 통과해야 합니다.

우리는 잠시 후에 이 두 가지 방법을 작성할 것이지만, 먼저 앱, ResearchKit 및 CareKit이 어떻게 함께 작동하는지 살펴봅시다.

우리 앱은 ResearchKit 설문조사를 만들 것이다.

ResearchKit은 설문 조사 흐름을 통해 참가자를 인수하고 안내할 것이다.

그것은 ORKTaskResult를 생산할 것이며, 그것은 우리 앱으로 돌려줄 것이다.

그런 다음 우리 앱은 ResearchKit 결과를 CareKit의 저장소에 유지되도록 CareKit 결과 값으로 변환할 것입니다.

새로운 결과를 저장하면 완료 링이 채워지고 작업 카드의 UI가 업데이트됩니다.

좋아, 그럼 이 두 가지 방법을 다루자.

우리는 Surveys.swift에서 그것들을 정의할 것이다.

아래에서 사용할 몇 가지 식별자를 준비했습니다.

우리는 ResearchKit 설문조사를 만드는 방법과 결과를 CareKit 결과 값으로 변환하는 방법이 필요합니다.

우리는 참가자가 취하는 수면의 양과 그들이 경험하는 고통 사이에 연관성이 있는지 알고 싶습니다. 그래서 우리는 두 가지 질문으로 양식을 만들 것입니다.

formStep에는 고유 식별자, 제목 및 일부 텍스트가 필요합니다.

우리는 또한 양식을 건너뛸 수 있는 것을 원하지 않기 때문에 선택 사항이 아닌 것으로 표시할 것입니다.

다음으로, 두 가지 항목을 만들어 봅시다.

첫 번째는 고통에 대해 물어볼 것이고, 우리는 그것을 선택 사항이 아닌 질문으로 만들 것이다.

그것이 의미하는 바는 양식 자체를 건너뛸 수 없으며, 이 특정 질문에 대한 답변 없이 양식을 제출할 수도 없다는 것이다.

당신은 우리가 또한 답변 형식을 제공해야 한다는 것을 알 수 있습니다.

답변 형식은 ResearchKit에게 어떤 종류의 답변을 기대해야 하는지, 그리고 사용자에게 입력하도록 요청하는 방법을 알려줍니다.

그들은 무게를 입력하고 있나요, 이미지를 선택하고 있나요, 아니면 목소리를 녹음하고 있나요?

이 경우, 우리는 UISlider를 만드는 ORKScaleAnswerFormat을 사용하도록 선택할 것입니다.

슬라이더는 iOS 사용자에게 친숙한 인터페이스입니다. 직관적이며, 종이 설문 조사에서 동그라미를 채우는 것보다 훨씬 더 좋은 경험을 제공합니다.

최대 통증 점수 10, 최소값 1을 지정하고, 스텝 크기를 1로 설정하여 반올림 숫자만 허용하고, 최소값과 최대값에 대한 설명을 제공합니다.

좋아, 조금 더 내려가서 아이템을 하나 더 만들자: sleepItem.

이것은 painItem과 거의 동일하며, 우리는 거의 동일한 답변 형식도 사용할 것입니다.

유일한 차이점은 식별자이며, 우리는 최소 수면을 0시간으로, 최대 수면을 12시간으로 변경했습니다.

이제 우리는 이 두 항목을 양식 항목에 전달한 다음, 단일 formStep으로 ORKOrderedTask를 만들어야 합니다.

두 번째 기능은 ResearchKit 작업 결과를 취하고 지속될 CareKit 값 배열을 만들어야 합니다.

하지만 이 코드를 작성하기 전에, 이를 구문 분석하는 방법에 대한 더 나은 아이디어를 가질 수 있도록 ResearchKit 작업 결과의 구조를 살펴봅시다.

ORKTaskResults가 중첩된 유형이라는 것을 이해하는 것이 중요하다.

우리는 체크인 설문 조사의 루트 결과에서 시작한 다음 checkin.form으로 드릴다운하고 싶습니다.

Checkin.form에는 두 명의 자녀가 있으며, 우리는 그들 각각을 파헤쳐야 할 것이다.

먼저, 우리는 통증 항목 식별자와 수면 항목 식별자에 대한 답을 찾고 싶습니다.

우리는 그것들이 둘 다 스케일 질문 결과라는 것을 알고 있으며, 우리는 그것들로부터 스케일 답을 얻을 수 있다.

이 예에서, 4와 11.

그래서 그것이 시각적으로 보이는 것이며, 이것은 코드에서 같은 과정이 보이는 것이다.

루트 결과부터 시작하여, 우리는 양식 식별자로 표시된 첫 번째 자식을 찾습니다.

그 결과는 자체 자녀를 갖게 될 것이며, 우리는 두 명이 있을 것이라는 것을 알고 있는 ORKScaleQuestionResult 유형의 모든 어린이를 추출할 수 있습니다.

통증 답변은 통증 식별자로 표시된 첫 번째 답변이며, 수면 답변은 수면 식별자로 표시된 첫 번째 답변입니다.

둘 다 scaleAnswer 속성을 가질 것이다.

일단 우리가 답을 가지고 있으면, 우리는 그것들을 CareKit 결과 값으로 변환해야 합니다 - 하나는 수면을 위한 것이고 다른 하나는 통증을 위한 것입니다.

이곳의 친절한 재산은 선택 사항이다.

설정할 필요는 없지만, 나중에 값을 찾고 싶다면 도움이 될 수 있습니다.

우리는 이것이 3부에서 왜 유용한지 알게 될 것이다!

우리가 해야 할 마지막 일은 이 함수에서 우리의 두 값을 반환하는 것이다.

그 모든 것이 제자리에 있으면, 우리의 일일 체크인은 괜찮을 거야!

앱을 실행하고 우리가 어떻게 하고 있는지 봅시다.

우리는 이미 1부에서 온보딩을 완료했기 때문에, 동의 흐름을 다시 통과할 필요가 없습니다.

이것은 우리 앱의 진정한 콘텐츠이며, 우리가 방금 만든 CareKit 체크인 작업은 우리가 기대하는 바로 그 곳입니다.

카드를 탭하면 ResearchKit 설문 조사로 이동합니다.

우리는 그냥 가서 여기서 몇 가지 답을 줄 것이다.

예를 들어, 통증을 위해 4와 같이 가자. 그리고 우리는 8시간의 수면을 취할 거야.

우리가 케어 피드로 돌아가면, 상단의 완료 링이 채워져 ResearchKit의 답변이 CareKit으로 성공적으로 구문 분석되었음을 알 수 있습니다.

이건 정말 좋아 보여.

그래서 우리는 다중 질문 양식으로 체크인 설문 조사를 마쳤고, 데이터가 우리가 원하는 방식으로 CareKit에 유지된다는 것을 확인했습니다.

그건 우리가 거의 반쯤 되었다는 뜻이야!

CareKit의 고급 일정으로 넘어갈 시간이며, 나중에 다양한 모션 작업에 적용할 것입니다.

체크인 작업과 그 전의 온보딩 작업과 마찬가지로, 첫 번째 단계는 일정을 정의하는 것이다.

하지만 우리는 이것을 위해 좀 더 관련된 무언가를 할 것이다.

제이미는 시간이 지남에 따라 참가자들에게 운동 범위를 측정하도록 요청하는 빈도를 줄여달라고 요청했다.

특히, 우리는 참가자가 첫 주 동안 매일 운동 범위를 측정하도록 유도하는 일정을 설정하고 싶지만, 그 다음에는 월말까지 일주일에 한 번만, 그 이후에는 다시는 하지 않습니다.

그래서 첫 주에는 하루에 한 번, 나머지 달에는 일주일에 한 번.

몇 가지 주요 날짜를 정의하는 것으로 시작합시다: thisMorning, nextWeek, 그리고 nextMonth.

이제, CareKit에서 더 미묘한 일정을 만들고 싶다면, OCKScheduleElement가 작업을 위한 도구입니다.

일정 요소에는 시작일, 종료일이 있으며, 그 기간 동안 일정 간격으로 반복됩니다.

여기의 dailyElement는 오늘 아침에 시작해서 다음 주에 끝나고, 매일 반복된다.

두 번째 요소는 주간 요소이다.

그것은 다음 주에 시작하고, 다음 달에 끝나고, 매주 반복된다.

이제 우리는 두 가지 요소를 가지고 있으므로, 복합 일정을 만들기 위해 그것들을 함께 구성할 수 있으며, 그 일정을 사용하여 새로운 범위의 모션 작업을 만들 수 있습니다.

물론, 우리는 그것을 우리 가게에도 추가해야 할 것이다.

다른 작업과 마찬가지로, 다음 단계는 CareFeed로 돌아가서 CareKit이 이 작업을 표시하는 방법을 지정하는 것입니다.

다시 한번, 우리는 SurveyTaskViewController를 사용할 것이며, 답변을 추출하기 위해 설문 조사와 기능을 제공해야 합니다.

Surveys.swift로 돌아가서 시작하기 전에 약간의 구조를 제공하기 위해 그것들을 잘라내자.

좋아, 그래서 모션 작업의 범위는 사실 꽤 간단해.

사실, 그것은 미리 정의된 작업으로 ResearchKit에 내장되어 있다.

우리는 식별자를 제공하고 어떤 무릎을 측정해야 하는지 지정하기만 하면 됩니다.

이제 미리 정의된 작업에는 완료 단계가 내장되어 있으며, 표시되는 메시지는 합리적인 기본값이지만, 사용 사례에 맞는 사용자 지정 메시지를 보여주고 싶습니다.

그래서 우리는 ResearchKit에게 표준 완료 단계를 생략하라고 말할 것이다.

그런 다음, 우리는 우리 자신을 정의하고 특히 물리 치료와 관련된 고무적인 메시지를 줄 것이다.

그래서 그게 첫 번째 기능이야.

두 번째는 ResearchKit 결과에서 CareKit 결과 값으로 변환하는 곳입니다.

바라건대 이것이 이제 친숙해지기 시작했기를 바랍니다.

우리가 이것에 대해 할 수 있는 많은 방법이 있지만, 오늘 우리는 첫 번째 운동 범위에 도달할 때까지 파헤칠 것이다.

그리고 우리는 오직 하나만 있을 것이라는 것을 알고 있다.

모션 결과의 범위는 실제로 많은 유용한 특성을 가지고 있지만, 우리가 사용 사례에 가장 관심이 있는 것은 참가자가 무릎을 얼마나 멀리 구부릴 수 있었는지를 측정하는 범위입니다.

우리는 나중에 이 값을 쉽게 찾을 수 있도록 키 경로와 함께 친절한 필드를 사용할 수 있습니다.

그건 그렇고, 그건 3부에 대한 전조야.

좋아, 그리고 그것은 결과 값을 추출하기 위한 우리의 기능을 마무리한다.

좋아! 우리 모두 준비한 것 같아.

우리 앱을 실행하자. 그러면 모든 것이 어떻게 작동하는지 보여줄게.

우리가 가장 먼저 확인하고 싶은 것은 우리의 일정이 우리가 의도한 대로 진행되고 있다는 것이다.

동작 범위 작업은 첫 주 동안 매일 나타나야 한다.

내가 8일, 9일, 10일을 통과할 때, 모션 작업의 범위가 매일 나타난다.

하지만 내가 다음 주에 나갈 때, 그것은 우리가 여전히 나타나기를 원하는 요일인 월요일을 제외하고는 나타나지 않는다.

여기서 그것은 여전히 일주일에 한 번만 나타난다.

하지만 우리가 앞으로 더 멀리 간다면, 다음 달까지, 그것은 더 이상 나타나지 않는다.

CareKit 일정은 이와 같은 식이요법을 미리 프로그래밍하는 좋은 방법입니다.

오늘로 돌아가서 이걸 시도해 보자.

내가 시작을 탭할 때, 우리의 지침 단계는 내가 무엇을 해야 할지 이해하는 데 도움이 된다.

내가 시작할 때, Siri는 나에게 오디오 안내를 줄 것이므로, 나는 그녀의 지시를 따를 것이다.

Siri: 기기를 왼쪽 무릎에 놓으세요.

화면을 탭하고 왼쪽 무릎을 최대한 길게 뻗으세요.

계속하려면 아무데나 터치하세요.

완료되면, 왼쪽 무릎을 시작 위치로 되돌린 다음, 아무 곳이나 탭하세요.

에릭: 좋아.

그거 꽤 깔끔하네, 그렇지?

보통 당신은 의사의 사무실을 방문해야 하고 치료사는 당신이 이와 같은 측정을 하는 것을 도울 것이지만, ResearchKit은 참가자들이 자신의 집에서 측정하는 것을 도울 수 있습니다.

나는 제이미가 우리가 이룬 진전에 정말 깊은 인상을 받을 것이라고 생각한다.

나는 이 직후에 그에게 FaceTime을 하고 그에게 TestFlight에서 우리 앱의 최신 버전을 보낼 것이다.

제이미에게 진행 상황을 알려드리는 동안, researchandcare.org에서 프레임워크에 대한 더 많은 정보를 찾거나 GitHub의 소스 코드를 읽을 수 있습니다.

세션 1에서, 우리는 온보딩을 설정했다.

이 세션에서, 우리는 한 쌍의 작업을 예약했다.

세 번째이자 마지막 세션에 다시 참여하여 ResearchKit과 CareKit이 앱을 완성하는 데 어떻게 도움이 될 수 있는지 알아보세요.

곧 보자!

♪