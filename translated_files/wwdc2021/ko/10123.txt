10123

WWDC에 오신 것을 환영합니다.

저는 스크린 타임 팀의 엔지니어인 크리스토퍼 스코겐입니다. 새로운 스크린 타임 API에 대해 이야기하기 위해 왔습니다.

애플이 iOS용 스크린 타임을 도입한 지 3년이 지났다.

그리고 그것은 고객과 가족의 장치와의 관계를 개선하기 위한 거대한 진전이었다.

지난 3년 동안, 스크린 타임은 iPhone, iPad 및 Mac에 훌륭한 새로운 기능을 가져왔다.

스크린 타임은 당신과 당신의 가족이 앱과 웹사이트를 얼마나 자주 사용하는지 추적하고, 제한을 설정하여 시간을 관리하고, 가족 구성원과 사용량을 공유하여 장치가 어떻게 사용되고 있는지에 대한 정보를 제공하고, 마지막으로 자녀가 누구와 소통하는지 등을 관리할 수 있도록 도와줍니다.

우리는 또한 여러분 중 많은 사람들로부터 자녀 보호 앱에서 이러한 기능 중 일부를 활용하고 싶다고 들었습니다.

그래서 우리는 스크린 타임 API를 만들었습니다.

앱에 핵심 스크린 타임 기능을 제공하므로 고객을 위한 역동적인 새로운 경험을 만들 수 있습니다.

우선, API는 iOS와 iPadOS 15에서 사용할 수 있습니다.

최신 Swift 애플리케이션에 쉽게 통합할 수 있는 100% Swift 및 SwiftUI 코드입니다.

스크린 타임 API는 세 가지 지침 원칙으로 설계되고 구축되었다.

먼저, 기존 제한 사항에 대한 직접 API 액세스를 위한 현대적인 온디바이스 프레임워크를 제공하십시오.

우리의 두 번째 지침 원칙은 사용자 개인 정보를 보호하는 것이었다.

스크린 타임은 당신이 사용한 앱이나 방문한 웹사이트와 같은 매우 민감한 개인 정보를 처리하기 때문에, 스크린 타임은 항상 매우 개인 정보 보호 중심의 접근 방식을 취했습니다.

예를 들어, 가족이나 Apple 외부의 누구도 당신이 어떤 사이트를 방문했는지 또는 어떤 앱을 사용하는지 알 수 있는 방법은 없습니다.

새로운 API의 경우, 우리는 개인 정보 보호에 대한 이러한 접근 방식을 계속했으며, 고객의 사용 데이터는 장치 외부에서 보이지 않을 것입니다.

그리고 마지막으로, 우리의 세 번째 지침 원칙은 개발자인 당신이 환상적인 새로운 동적 보호자 통제 경험을 만들 수 있도록 하는 것이었습니다.

우리의 세 가지 지침 원칙이 우리를 세 가지 새로운 프레임워크를 만들도록 이끌었다는 것은 우연이 아니다.

세 가지 프레임워크는 함께 스크린 타임 API를 구성한다.

먼저, 관리되는 설정.

관리 설정은 앱이 스크린 타임에서 사용할 수 있는 것과 동일한 제한에 직접 접근할 수 있게 해줍니다.

둘째, 가족 통제.

가족 통제는 우리의 개인 정보 보호 정책을 추진한다.

그리고 마지막으로, 장치 활동.

장치 활동을 사용하면 앱을 실행하지 않고도 코드를 실행할 수 있는 새로운 기능을 제공하여 스크린 타임을 넘어설 수 있습니다.

세 가지 프레임워크를 모두 자세히 살펴봅시다.

관리 설정부터 시작합시다.

당신의 앱은 자녀가 장치로 할 수 있는 것을 제한하고 부모나 보호자가 달리 말할 때까지 이러한 제한이 유지되도록 하는 더 나은 방법이 필요합니다.

관리 설정을 사용하면 앱은 스크린 타임과 마찬가지로 계정을 잠그거나 비밀번호 변경을 방지하거나, 웹 트래픽을 필터링하거나, 애플리케이션을 보호하는 것과 같은 여러 제한을 설정할 수 있지만 앱의 브랜딩과 기능으로 사용자 정의할 수 있습니다.

다음은 가족 통제입니다.

가족 공유를 활용함으로써, 가족 컨트롤은 보호자의 승인 없이 스크린 타임 API에 대한 액세스를 방지합니다.

보호자가 앱을 승인하면, 보호자의 승인 없이는 장치에서 제거할 수 없습니다.

또한, Family Controls는 앱과 웹사이트를 나타내는 불투명한 토큰을 제공합니다.

이러한 토큰은 스크린 타임 API 전반에 걸쳐 사용을 모니터링하거나 제한하고 단일 가족 공유 그룹 외부의 누구도 어떤 앱과 웹사이트가 사용되고 있는지 알지 않도록 하기 위해 사용됩니다.

그리고 마지막으로, 장치 활동.

이 프레임워크를 사용하면 웹 및 앱 사용을 모니터링하고 필요할 때 코드를 실행할 수 있는 새로운 방법을 제공하여 스크린 타임을 넘어설 수 있습니다.

당신의 앱은 자녀 보호 앱이기 때문에, 아이가 기기에서 앱을 실행할 이유가 있을 가능성은 거의 없습니다.

그래서 제한을 설정하기 위해 코드를 어떻게 실행하나요?

답은 장치 활동 일정과 이벤트입니다.

장치 활동 일정은 시간 창의 시작과 끝에서 애플리케이션의 확장을 호출하는 시간 창입니다.

이벤트는 장치의 사용자가 장치 활동 일정의 사용 임계값에 도달했을 때 확장을 호출하는 사용 모니터입니다.

당신의 앱은 단순히 어떤 종류의 사용에 신경 쓰는지 그리고 언제 신경 쓰는지 선언합니다.

세 가지 프레임워크를 모두 결합하는 것은 이렇게 보인다.

보호자와 자녀의 장치에 앱이 설치된 후, 보호자는 자녀의 장치에서 앱을 엽니다.

당신의 앱은 가족 통제로 승인됩니다.

나중에, 보호자 장치의 앱은 설정, 제한 및 규칙을 선택합니다.

당신의 앱은 그 정보를 아이의 장치로 보냅니다.

그리고 아이의 장치에서, 당신의 앱은 장치 활동으로 일정과 이벤트를 만듭니다.

앱의 장치 활동 확장 프로그램은 일정이 발생하거나 이벤트가 발생할 때 호출됩니다.

확장 프로그램에서 관리 설정으로 제한을 설정하세요.

지금은 놀란을 소개하기에 좋은 시간이다.

놀란은 훌륭한 새로운 데모 앱인 숙제 작업을 하고 있으며, 숙제가 스크린 타임 API를 어떻게 사용하는지 안내할 것입니다.

안녕하세요, 저는 스크린 타임 팀의 엔지니어인 놀란입니다.

제 데모 앱인 숙제를 소개해드리고 싶습니다.

숙제는 보호자가 사용하기를 원하는 다른 앱에서 사용량을 축적할 때까지 특정 앱에 대한 어린이의 접근을 제한함으로써 좋은 습관을 장려한다.

숙제를 기능적으로 만들기 위해, 나는 스크린 타임 API의 세 가지 프레임워크를 모두 사용할 것이다.

먼저, 가족 통제에 대한 승인 요청을 안내해 드리겠습니다.

다음으로, 나는 반복되는 일정에 따라 보호자가 선택한 낙담한 앱을 보호할 것이다.

그런 다음 권장된 앱 사용을 충분히 축적한 후 그 방패를 제거하는 방법을 보여드리겠습니다.

마지막으로, 나는 앱의 브랜딩과 기능에 맞게 숙제에서 사용하는 방패를 사용자 정의할 것이다.

나는 프로젝트 설정과 가족 통제를 승인하는 것으로 시작할 것이다.

가족 제어 기능을 포함하도록 Xcode 프로젝트를 설정하려면, 프로젝트 편집기로 이동하여 앱 대상을 선택하고 서명 및 기능 아래에서 더하기 버튼을 클릭합니다.

나는 Family Controls를 검색하여 기능을 찾아 내 프로젝트에 추가할 것이다.

이제 기능이 추가되었으므로, 저는 코딩할 준비가 되었습니다.

숙제가 가장 먼저 해야 할 일은 가족 통제에 대한 허가를 요청하는 것이다.

가족 제어 프레임워크의 공유 인증 센터를 사용하여 앱이 실행될 때 이 요청을 할 것입니다.

그 요청은 성공 또는 실패로 이어질 수 있다.

이 기능을 호출하려면 가족의 보호자가 숙제에 대한 가족 통제를 승인해야 합니다.

내 앱은 이전에 이 iPhone에서 실행된 적이 없기 때문에, requestAuthorization은 경고와 함께 보호자의 승인을 요청할 것이다.

허용을 탭하면 보호자가 Apple ID와 비밀번호로 인증하여 계속할 수 있습니다.

보호자가 성공적으로 인증되면, requestAuthorization을 호출하면 다시 경고 메시지가 표시되지 않고 대신 자동으로 성공을 반환합니다.

오용을 방지하기 위해, 로그인한 iCloud가 가족 공유를 사용하는 자녀가 아닌 경우 requestAuthorization은 실패를 반환합니다.

스크린 타임 API를 사용할 수 있도록 앱을 준비하는 것은 매우 쉽습니다.

고마워, 놀란.

우리는 방금 Family Controls로 승인하는 데모 앱인 Homework를 보았습니다.

Family Controls로 승인하면 앱에 다른 마법의 힘을 부여합니다.

예를 들어, 장치가 승인되면, 사용자는 더 이상 iCloud에서 로그아웃할 수 없습니다.

또한, 네트워크 확장 프레임워크로 구축된 온디바이스 웹 콘텐츠 필터는 앱에 포함될 수 있으며 자동으로 설치되며 제거할 수 없습니다.

이것은 당신의 앱이 장치에서 웹 트래픽을 필터링할 수 있는 기능을 제공합니다.

자녀 보호 앱을 작성할 때의 과제 중 하나는 자녀가 앱을 실행하지 않을 때 자녀의 장치에서 코드를 실행하도록 하는 것입니다.

스크린 타임 API를 위해, 우리는 장치 활동으로 백그라운드 코드 실행을 수행하는 새로운 방법을 만들었습니다.

장치 활동 확장은 나머지 스크린 타임 API와 상호 작용하는 주요 방법이 될 것입니다.

놀란으로 돌아가서 숙제가 어떻게 반복되는 일정으로 코드를 실행하여 일부 앱 위에 스크린 타임 쉴드를 배치하여 어린이의 장치를 제한할 수 있는지 봅시다.

놀란.

고마워, 크리스.

다음 숙제는 보호자가 반복되는 일정에 좌절시키기 위해 선택한 앱을 보호하는 것이다.

내 앱이 아이의 장치에서 실행되는 것을 기대할 수 없기 때문에, 보호자가 설정한 이후로 숙제가 실행되지 않은 경우에도 장치 활동 일정을 사용하여 매일 애플리케이션 쉴드 제한을 설정할 것입니다.

내 장치 활동 일정이 실행되면, 장치 활동은 새로운 확장 지점을 호출할 것이다.

숙제에는 앱을 보호하기 위한 제한을 설정할 이 확장 지점에 대한 확장이 포함될 것이다.

이 확장 지점의 확장을 구현하려면 DeviceActivityMonitor를 기본 클래스로 서브클래스해야 합니다.

여기서, 저는 확장의 원리 클래스에서 두 가지 메소드를 재정의했습니다: intervalDidStart와 intervalDidEnd.

이 기능들은 내 일정의 시작과 끝 후에 장치가 처음 사용될 때 호출될 것이다.

숙제의 메인 앱에서 장치 활동 일정을 구성할 때까지 이러한 기능의 구현을 비워 둘 것입니다.

이제 내 장치 활동 모니터 확장이 메인 앱에서 설정되었고, 장치 활동 이름과 장치 활동 일정을 만들어야 합니다.

장치 활동 이름은 내 확장 프로그램 내에서 활동을 참조할 수 있는 방법입니다.

그리고 장치 활동 일정은 내 확장이 활동을 모니터링할 시간 범위를 나타냅니다.

여기서 저는 제 활동의 이름을 "매일"로 설정했고, 자정에 시작하고 끝나도록 일정을 설정했습니다.

나는 또한 이 일정을 반복하도록 설정할 것이다.

마지막으로, 방금 정의한 활동 이름과 일정으로 장치 활동 센터를 만들고 startMonitoring에 전화할 수 있습니다.

이 몇 줄의 코드로, 내 장치 활동 모니터 확장은 일정이 시작되고 끝날 때마다 활동 이름으로 호출될 것이다.

앱을 보호하는 또 다른 요소는 보호자가 무엇을 억제하고 싶은지 알아내는 것이다.

가족 통제 프레임워크에는 작업만을 위한 SwiftUI 요소가 있습니다: 가족 활동 선택기.

메인 앱의 UI에서 가족 활동 선택기를 보여주고 보호자가 가족이 사용하는 앱, 웹사이트 및 카테고리 목록에서 선택할 수 있도록 할 수 있습니다.

보호자가 선택하면, 숙제는 피커가 반환한 불투명한 토큰을 사용하여 각 토큰이 나타내는 앱, 웹사이트 및 카테고리에 대한 제한을 설정할 수 있습니다.

여기서, 저는 앱의 버튼에 familyActivityPicker 보기 수정자를 추가했고, 선택자의 선택 매개 변수를 앱 모델의 속성에 바인딩했습니다.

이것은 UI에서 보호자의 선택이 업데이트될 때마다 내 모델을 업데이트할 것이다.

이제 보호자의 낙담한 앱 선택이 내 앱 모델에 저장되어 있으니, 장치 활동 모니터 확장 프로그램으로 다시 이동하겠습니다.

먼저, 애플리케이션 쉴드 제한에 액세스하기 위해 관리 설정 모듈을 가져올 것입니다.

그런 다음 intervalDidStart에서 앱의 모델에서 선택을 꺼내고 그에 따라 애플리케이션 쉴드 제한을 구성할 수 있습니다.

그리고 intervalDidEnd에서, 나는 그것을 nil로 설정하여 제한을 제거할 수 있다.

이러한 간단한 수정으로, 숙제는 자정부터 자정까지 매일 억제된 앱을 선택한 보호자를 보호할 것이다.

다시 너에게 돌아가, 크리스.

고마워, 놀란.

차폐가 관리 설정에서 사용할 수 있는 유일한 제한은 아닙니다.

우리는 또한 장치 활동 일정의 시작이나 끝에 원하는 수의 제한을 설정하도록 선택할 수 있습니다.

예를 들어, 앱은 계정 생성 또는 제거를 방지하거나, 앱과 웹사이트를 완전히 차단하거나, 연령별로 미디어 콘텐츠를 거부하도록 선택할 수 있습니다.

미디어 제한에 대해 말하자면, 관리 설정은 또한 모든 앱이 영화와 TV 콘텐츠에 대한 제한을 읽을 수 있는 API를 제공합니다.

가족 통제 허가가 필요하지 않습니다.

이러한 기능은 모든 미디어 앱이 장치가 사용자에게 제공되는 콘텐츠를 제한해야 하는지 확인하는 데 이상적입니다.

숙제 데모 앱에서 제한은 매일 자정에 설정되었지만, 앱이나 웹 사용에 따라 제한을 변경하려면 어떻게 해야 하나요?

장치 활동에는 앱이 그렇게 할 수 있는 또 다른 기능이 있습니다: 장치 활동 이벤트.

이러한 이벤트는 가족 활동 선택기에서 본 것과 동일한 토큰으로 구성되며 사용 제한에 도달하면 코드를 실행할 수 있습니다.

이 행사들은 놀란이 마지막 부분에서 우리에게 보여준 일정과 함께 등록되어 있다.

이제 놀란과 함께 가서 이 행사들이 어떻게 진행되는지 봅시다.

숙제 일정이 끝날 때뿐만 아니라 아이가 보호자가 선택한 권장 앱 세트에 대한 충분한 사용량을 축적할 때 응용 프로그램 방패 제한을 제거하고 싶습니다.

그렇게 하려면, 사용 임계값이 충족될 때 장치 활동 모니터 확장을 추가로 호출하도록 장치 활동을 구성하여 이러한 권장 앱의 사용을 모니터링해야 합니다.

여기서, 나는 "장려"될 장치 활동 이벤트 이름을 정의할 것이다.

이 이름은 내 확장 내에서 이벤트를 참조할 수 있는 방법입니다.

그리고 나서 나는 보호자가 선택한 권장 앱 세트와 원하는 사용 임계값을 포함하도록 권장 이벤트를 정의할 것이다.

마지막으로, 방금 정의한 이벤트를 포함하도록 모니터링을 시작하기 위해 호출을 업데이트하겠습니다.

이제 메인 앱에서 장치 활동 이벤트를 모니터링하고 있기 때문에, 내 장치 활동 모니터 확장 프로그램은 이러한 이벤트가 사용 임계값을 충족할 때마다 호출될 것입니다.

이벤트DidReachThreshold 함수는 예정된 활동에 대해 어떤 이벤트가 발생했는지 식별하기 위해 장치 활동 이벤트 이름과 DeviceActivityName으로 호출됩니다.

숙제에서, 나는 확장이 이 이벤트에 대한 알림을 받을 때 애플리케이션 쉴드 제한을 nil로 설정하고 싶다.

이 제한을 nil로 설정하면 이전에 차폐된 앱에서 방패가 제거됩니다.

크리스에게 돌아가.

이전 섹션에서, 낙담한 앱은 기본 스크린 타임 쉴드로 보호되었다.

하지만 당신은 이 방패에서 당신만의 브랜딩과 스타일을 얻고 싶을 것입니다.

당신은 또한 방패의 버튼을 위한 자신만의 액션 핸들러를 갖고 싶을 것입니다.

우리는 둘 모두를 위한 도구를 가지고 있다.

맞춤형 방패를 사용하면 독특한 브랜드 경험을 만들 수 있습니다.

방패를 사용자 정의하려면, 관리 설정에 정의된 두 개의 새로운 확장 지점을 구현해야 합니다.

하나의 확장 지점을 사용하면 배경 재료, 제목, 아이콘 및 버튼의 모양을 변경하여 방패의 모양을 사용자 정의할 수 있습니다.

그리고 또 다른 확장 지점을 사용하면 사용자 지정 버튼 핸들러를 만들 수 있습니다.

놀란으로 돌아가서 방패를 어떻게 커스터마이징할지 봅시다.

숙제를 위한 사용자 지정 방패의 모양과 느낌을 구성하려면, ShieldConfigurationProvider를 확장의 기본 클래스로 서브클래스하는 것으로 시작해야 합니다.

구성은 여기서 재정의해야 할 유일한 기능입니다.

이 함수는 현재 차폐되고 있는 애플리케이션에 대한 참조를 전달하며, ShieldConfiguration 구조자를 반환할 것으로 예상됩니다.

ShieldConfiguration 구조를 사용하면 배경 효과, 배경 색상, 아이콘, 제목, 자막, 기본 버튼 레이블, 기본 버튼 배경 색상 및 보조 버튼 레이블을 정의할 수 있습니다.

와, 그건 많은 커스터마이징이야.

이 구조체가 내 방패 구성 공급자 확장에 의해 구성되고 반환되면, 운영 체제는 숙제로 보호된 모든 앱에 이러한 사용자 지정을 자동으로 표시합니다.

이제 방패 스타일을 지정했으므로, 관리 설정의 두 번째 확장 지점을 사용하여 기본 및 보조 버튼에 대한 작업 핸들러를 구성할 수 있습니다.

이 새로운 확장에서, 나는 ShieldActionHandler를 기본 클래스로 서브클래스하고 함수 핸들을 재정의할 것이다.

핸들 기능은 기본 버튼 동작 또는 보조 버튼 동작을 눌렀는지 여부와 현재 어떤 응용 프로그램이 차폐되고 있는지 알려집니다.

Sshield 작업 응답으로 함수의 완료 핸들러를 호출해야 합니다.

응답은 차폐된 애플리케이션을 닫거나 작업을 연기하고 차폐 구성을 다시 그릴 수 있습니다.

방패에서 행동을 연기하는 능력은 진행 방법에 대한 신호를 기다리는 동안 방패가 모양을 업데이트할 수 있는 기회를 주기 때문에 매우 강력하다.

예를 들어, 아이가 여기에서 액세스 요청을 탭할 때 방패가 보호자의 행동을 기다리고 있음을 나타내는 데 사용할 수 있습니다.

이 사용자 지정 방패를 추가하면, 내 데모 앱인 숙제가 완성되었다.

보호자는 게임이나 엔터테인먼트와 같은 보호할 앱을 선택할 수 있으며, 아이가 읽기, 학습 또는 창의력과 같은 충분한 긍정적인 화면 시간을 수행하면 방패를 제거할 수 있습니다.

이 멋진 새로운 데모 앱을 만드는 데 동참해 주셔서 감사합니다.

이제 크리스에게 돌아가.

오늘 우리는 제한을 제공하고, 개인 정보를 보호하고, 새로운 동적 경험을 가능하게 하는 세 가지 목표가 Screen Time API를 구성하는 세 가지 프레임워크와 함께 어떻게 전달되었는지 배웠습니다.

관리 설정을 사용하면 앱이 설정과 제한을 시행할 수 있습니다.

장치 활동을 사용하면 앱이 사용되지 않는 경우에도 일정이나 사용 이벤트에서 코드를 실행할 수 있습니다.

그리고 마지막으로, 가족 통제는 관리 설정 및 장치 활동에 대한 액세스 권한을 부여하고 사용자의 개인 정보를 보호하여 보호자만이 자녀가 무엇을 하고 있는지 알 수 있도록 보장합니다.

모든 프레임워크와 마찬가지로, 스크린 타임 API는 당신의 피드백을 바탕으로 계속 발전할 것입니다.

그러니 이것들을 시도해보고 그들이 당신의 독특한 사용 사례를 어떻게 지원하거나 지원하지 않는지 알려주세요.

오늘 우리와 함께 해줘서 고마워.

WWDC 2021을 즐기세요.

[음악].