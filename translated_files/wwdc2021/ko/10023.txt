10023

♪ 베이스 음악 연주 ♪

♪

타누 싱할: 안녕하세요, 여러분.

제 이름은 Tanu이고, Apple TV 팀의 SwiftUI 엔지니어입니다.

오늘, 우리는 SwiftUI에 초점을 맞춘 몇 가지 새로운 작업 방법에 대해 이야기할 것입니다.

SwiftUI의 좋은 점 중 하나는 상자에서 꺼내자마자 무료로 얼마나 많은 기능을 얻을 수 있는지입니다.

내장 구성 요소는 기본 동작을 SwiftUI의 플랫폼 규칙에 대한 지식을 기반으로 하며, 다양한 맥락에서 합리적이고 친숙한 전반적인 경험을 제공합니다.

우리는 초점을 볼 때 직장에서 이 지능을 본다.

포커스는 앱이 키보드, 리모컨, 게임 컨트롤러, 접근 가능한 스위치 컨트롤 및 터치 입력과 달리 특정 화면 좌표에 연결되지 않은 기타 소스에서 입력할 수 있는 시스템입니다.

종종, 초점 보기는 특별한 장식으로 그려져, 사람들이 그들의 입력이 어디로 향할지 쉽게 예측할 수 있게 해준다.

대부분의 경우, SwiftUI는 당신을 대신하여 초점을 관리합니다.

누군가가 텍스트 필드를 클릭하거나 탭 키를 누르거나 누군가가 조정 가능한 시계 컴플리케이션을 탭하거나 Siri Remote를 스와이프할 때, SwiftUI는 초점이 어떻게 영향을 받고 다음 배치가 어떻게 표시되는지 결정합니다.

이것은 관습에 의해 올바른 행동을 결정할 수 있는 간단한 경우에 좋습니다.

그러나, 집중에 대해 더 가속화된 경험을 원할 수 있는 경우가 있습니다.

노트 앱의 이 예에서, 새 노트 버튼을 선택할 때, 우리는 초점이 자동으로 새로 생성된 노트로 이동하기를 원합니다.

이러한 유형의 행동은 확실히 사용자 지정 구현이 필요하다.

여기에 사용자가 리모컨에서 오른쪽으로 스와이프할 때 왼쪽 하단의 버튼에서 화면 상단 근처의 콘텐츠로 초점을 옮기고 싶은 시나리오가 있습니다.

음악 버튼과 앱 타일이 서로 인접하지 않기 때문에, SwiftUI는 초점을 이동할 위치를 자동으로 추측할 수 없습니다.

먼 초점 목표가 연결되기 전에 더 많은 정보가 필요하다.

그리고 iOS의 이 예에서, 우리는 단순히 사용자가 이벤트를 선택할 때 키보드가 사라지기를 원합니다.

올해 우리가 소개하는 새로운 API 덕분에, 당신은 이제 SwiftUI에서 이 모든 것을 할 수 있습니다.

이 강연에서, 우리는 두 종류의 사용 사례에 초점을 맞출 것이다.

우리는 직접 입력 없이 특정 뷰로 초점을 이동할 수 있는 방법을 볼 것이며, 작은 뷰에서 큰 탐색 대상을 만들어 사용자의 손이 닿지 않는 것이 없도록 할 것입니다.

먼저 사용자의 관심을 끌기 위해 초점을 옮기고 싶을 수도 있는 예를 살펴봅시다.

우리는 휴가를 갈 준비가 되었고, 휴가 플래너 앱 작업을 시작했습니다.

이 앱은 모든 Apple 플랫폼에서 작동하며, 목적지를 탐색하고 여행을 예약할 수 있습니다.

이 앱을 실행하면 이메일 필드, 비밀번호 필드 및 Apple로 로그인 버튼을 표시하여 계정에 로그인할 수 있습니다.

이 로그인 화면에서, 입력한 이메일이 올바른 형식이 아니라는 것을 발견하면, 프로그래밍 방식으로 초점을 이메일 필드로 다시 옮기고 싶습니다.

이 행동을 달성하기 위해, 우리는 FocusState API를 사용할 것이다.

로그인 보기의 기존 코드에는 TextField와 SecureField가 있는 VStack이 포함되어 있습니다.

이제, 우리는 이 보기에 FocusState 속성 래퍼를 추가할 것입니다.

FocusState는 우리가 올해 도입한 새로운 API입니다!

이것은 현재 초점 위치에 따라 바뀌는 특별한 유형의 상태이다.

우리는 FocusState를 사용하여 집중된 필드의 식별자를 보유할 것입니다.

focusedField 변수는 우리가 이 예제를 위해 만든 열거형 유형이다.

FocusState에 문자열, 정수 또는 기타 해시 가능한 값 유형을 사용할 수 있습니다.

FocusState 값은 선택 사항입니다.

일반적으로 FocusState에 사용되는 유형은 해시 가능하고 선택적이어야 하며, 초점이 화면의 관련 없는 부분에 있는 경우에는 nil이 사용됩니다.

다음으로 우리는 TextField와 SecureField에 집중된 수정자를 추가할 것입니다.

또한 올해 새로운, 이 수정자는 초점의 배치와 focusedField 속성의 가치 사이의 링크를 만듭니다.

이 간단한 링크는 앱에서 다른 결정을 내리기 위해 현재 초점 배치를 사용할 수 있다는 것을 의미하기 때문에 강력한 도구입니다.

우리는 로그인 양식에서 그 연극을 볼 수 있다.

화면이 처음 나타날 때, 초점이 없는 것은 없으므로, focusedField의 값은 0이다.

하지만 누군가가 이메일 텍스트 필드를 탭하면, 그 필드가 초점을 맞추고 키보드가 나타납니다.

포커스 텍스트 필드는 FocusState 값에 바인딩되기 때문에, focusedField의 값은 이메일 텍스트 필드의 식별자를 유지하도록 자동으로 업데이트됩니다.

초점 배치와 FocusState 사이의 연결은 양방향으로 작동한다.

이것은 우리가 초점 변화에 반응하는 것에 국한되지 않는다는 것을 의미합니다; 우리는 FocusState 속성을 업데이트함으로써 프로그래밍 방식으로 초점을 이동할 수 있습니다.

예를 들어, 프로그래밍 방식으로 focusedField의 값을 .password로 설정하면, SwiftUI는 SecureField가 우리가 설정한 새로운 값과 관련이 있다는 것을 알게 될 것이며 포커스는 자동으로 비밀번호 필드로 이동합니다.

이제 우리의 포커스 바인딩이 제자리에 있으므로, 우리는 그것들을 작동시킬 수 있다.

휴가 플래너 앱에서, 사용자가 데이터를 제출할 때, 우리는 그것을 검증하고 싶습니다.

이메일이 예상 형식이 아니라면, 우리는 focusedField를 이메일로 설정합니다.

아직 없다면, 이것은 이메일 텍스트 필드로 초점을 다시 보낼 것이다.

또한, 이메일이 유효하지 않은 경우 테두리가 있는 이메일 필드를 강조하고 싶습니다.

우리는 이 테두리가 이메일 필드에 초점을 맞추고 있는 동안에만 나타나기를 바랍니다.

그렇게 하기 위해, 우리는 테두리를 만들 때 focusedField의 가치를 쉽게 읽을 수 있다.

이 모든 것이 어떻게 합쳐지는지 봅시다.

이메일 필드에 유효한 주소가 없다는 점에 유의하십시오.

초점은 현재 비밀번호 필드에 있다.

Go를 누르면, focusedField가 설정된 곳에서 onSubmit 콜백이 트리거됩니다.

이것은 커서가 이메일 필드로 돌아가게 한다.

이메일 필드가 집중되어 있는 동안, 우리는 그 주위에 빨간색 테두리를 본다.

그러나, 일단 우리가 이메일 필드에서 초점을 옮기면, 우리의 focusedField는 더 이상 이메일 식별자와 같지 않으며, 따라서 빨간색 테두리가 사라집니다.

모든 양식 데이터가 유효한 시나리오에서, 우리는 단순히 키보드를 무시하고 싶습니다.

키보드를 해제하기 위해, 우리는 FocusState 변수를 nil로 설정할 것이다.

focusedField는 선택 사항이기 때문에, 우리는 초점이 이 뷰를 떠났다는 것을 나타내기 위해 nil을 사용합니다.

비디오에서, 이메일 주소가 업데이트되었다는 것을 주목하세요.

이번에는 우리가 제출할 때, FocusState 변수를 nil로 설정했기 때문에 키보드가 해제됩니다.

우리는 앱에 텍스트 필드가 있을 때 프로그래밍 방식으로 초점을 제어하는 것이 어떻게 도움이 될 수 있는지 보았습니다.

그러나, FocusStates는 텍스트 필드만을 위한 것이 아니다.

iOS, tvOS, watchOS 또는 macOS에서 초점을 맞출 수 있는 보기의 초점을 프로그래밍 방식으로 제어하는 데 사용할 수 있습니다!

다음 섹션에서, 우리는 앱에서 포커스 기반 내비게이션의 역할에 대해 논의할 것입니다.

휴가 플래너 앱의 tvOS 버전을 살펴봅시다.

우리는 당신이 방문하고 싶은 일부 목적지의 사진을 추가하여 TV의 추가 공간을 활용했습니다.

로그인하기 전에 사진 찾아보기 버튼을 클릭하여 더 많은 사진을 볼 수 있습니다.

처음에는 이메일 필드에 초점을 맞추고 있다는 것을 주목하세요.

Siri Remote에서 오른쪽으로 스와이프하면 초점이 사진 찾아보기 버튼으로 이동할 것으로 예상됩니다.

그러나, 그것은 기본적으로 작동하지 않는다.

이것은 방향 초점 내비게이션이 인접 관계를 기반으로 하기 때문이다.

초점을 움직이기 위해 스와이프할 때, 초점은 주어진 방향에 인접하고 초점을 맞출 수 있는 무언가가 있는 경우에만 움직인다.

이 앱에서 초점을 맞출 수 있는 보기를 보세요.

왼쪽의 로그인 필드 옆에 초점을 맞출 수 있는 보기가 없기 때문에, 하단의 버튼은 접근할 수 없습니다.

이 화면을 탐색할 수 있도록, 우리는 찾아보기 버튼의 초점 영역을 확장하여 로그인 필드에 인접하게 할 것입니다.

이것은 새로운 FocusSections API를 사용하여 이루어집니다.

그게 얼마나 쉬운지 보자.

여기 TV용 휴가 플래너 코드의 단순화된 버전이 있습니다.

그것은 두 개의 VStacks가 있는 HStack을 포함합니다; 하나는 로그인 필드를 위한 것이고, 다른 하나는 이미지와 버튼을 위한 VStack입니다.

우리는 버튼 주위에 더 큰 논리적 초점 대상을 만들어 버튼이 로그인 필드에 인접한 것처럼 작동할 수 있도록 하고 싶습니다.

이것은 단순히 버튼이 포함된 VStack에 focusSection() 수정자를 추가하여 수행할 수 있습니다.

focusSection() 수정자가 모든 뷰에 추가되면, 포커스 가능한 하위 뷰가 포함된 경우 해당 뷰의 프레임이 포커스를 수락할 수 있습니다.

버튼에서 왼쪽으로 스와이프할 때 포커스를 로그인 필드로 다시 옮기고 싶기 때문에, 첫 번째 VStack에 또 다른 focusSection() 수정자를 추가할 것입니다.

이제 이 앱을 실행할 때, 사용자는 리모컨에서 왼쪽과 오른쪽으로 스와이프하여 입력 필드와 찾아보기 버튼 사이에서 초점을 이동할 수 있습니다.

우리가 일을 마무리할 때, 나는 당신이 종종 다른 플랫폼에서 다르게 보일 수 있는 초점에 대해 생각하도록 권하고 있습니다.

SwiftUI는 대부분의 경우 훌륭한 기본 동작을 가지고 있다.

새로운 초점 상태와 FocusSections API는 초점을 활용하여 훨씬 더 간소화된 경험을 만드는 데 도움이 될 수 있습니다.

앱을 작업할 때, 잠시 시간을 내어 초점이 사용자 행동에 영향을 미치는 여러 가지 방법을 관찰하십시오.

우리는 이 세션이 사용자가 가장 중요한 것에 집중하는 데 도움이 되는 도구를 갖추기를 바랍니다.

봐줘서 고마워, 그리고 멋진 WWDC 보내!

♪