10268

안녕하세요, Xcode Cloud 워크플로우에 대한 이 세션에 오신 것을 환영합니다.

제 이름은 저스틴이고, 저는 TestFlight 팀의 엔지니어이며, 동료인 웨슬리와 케빈과 함께 Xcode Cloud에서 워크플로우를 만드는 방법을 소개하기 위해 왔습니다.

워크플로우는 Xcode Cloud의 핵심이며 당신과 당신의 팀이 앱과 프레임워크의 구축, 분석, 테스트, 보관 및 배포를 자동화할 수 있는 지속적인 통합을 추진합니다.

그것들은 유연하고 확장 가능하기 때문에, 팀의 기존 개발 및 배포 프로세스를 중심으로 워크플로우를 사용자 정의할 수 있습니다.

그리고 Xcode Cloud를 사용하면 워크플로우 관리가 이미 사용하고 있는 Apple 개발자 도구인 Xcode 및 App Store Connect에 통합됩니다.

이 세션에서, 워크플로우를 특정 구성 요소로 나누자.

먼저, 우리는 당신의 워크플로우를 자동으로 실행하는 조건을 구성하는 방법을 살펴볼 것입니다.

그런 다음, 우리는 당신의 환경을 설정하기 위한 옵션에 대해 이야기할 것입니다.

또한 빌드에 대한 알림을 보내거나 해당 빌드를 TestFlight에 자동으로 배포하는 것과 같이 나중에 실행할 작업과 함께 자동화하려는 작업에 대한 여러 작업을 만드는 방법을 보여드리겠습니다.

마지막으로, 우리는 당신이 팀의 협업과 생산성을 높이는 데 유용하고 매우 편리할 수 있는 다양한 워크플로우에 대한 몇 가지 전략을 가지고 있습니다.

우리는 다루어야 할 것이 많으니, 시작합시다.

웨슬리에게 넘겨줄게.

고마워, 저스틴!

저는 개발자 팀 구성원들과 Fruta라는 앱에서 협력하고 있습니다.

그것은 이미 Xcode Cloud에서 실행되고 있다.

"Meet Xcode Cloud" 세션을 아직 보지 못했다면, 첫 번째 워크플로우 설정에 대해 알아보려면 반드시 확인하세요.

바로 여기, Xcode의 보고서 네비게이터에 통합된 새로운 클라우드 탭은 내 팀의 워크플로우와 빌드를 볼 수 있습니다.

Fruta 앱을 온보딩했을 때, 메인 브랜치를 구축하는 기본 워크플로우를 만들었습니다.

이 워크플로우는 우리에게 잘 작동하고 있지만, 우리는 풀 리퀘스트도 사용하는 팀이기 때문에, 우리 팀이 활용할 수 있는 풀 리퀘스트별 워크플로우를 만들고 싶습니다.

내 팀의 누군가가 풀 리퀘스트를 만들 때마다 실행하고, 내 앱을 분석, 테스트 및 보관하고, 풀 리퀘스트 빌드가 완료되면 팀에 알리고, 주요 통합 브랜치에 병합되기 전에 기능을 테스트할 수 있도록 내 앱 버전을 팀 구성원에게 전달하고 싶습니다.

워크플로우를 만드는 것은 쉽다.

제품 메뉴에서, 워크플로우 관리로 이동하여, 더하기 클릭한 다음, 내 앱을 선택할 수 있습니다.

이것은 새로운 워크플로우 편집기를 추적할 것이다.

워크플로우는 몇 가지 구성 가능한 구성 요소로 구성되어 있다.

여기 제 작업 흐름의 이름을 지정할 수 있는 일반 섹션이 있습니다.

나는 이것을 "풀 리퀘스트"라고 부를 거야.

소수의 개인만이 워크플로우를 변경할 책임이 있는 팀에 있다면, 우리 팀에 영향을 미칠 수 있는 의도하지 않은 업데이트를 방지하기 위해 편집을 제한하도록 선택할 수 있습니다.

기본적으로 Xcode Cloud는 로컬 설정에 대한 지식으로 기본 저장소와 프로젝트 정보를 설정하지만, 기본 저장소를 이동하거나 Xcode 프로젝트에서 작업 공간으로 마이그레이션하기로 결정한 경우 여기에서 해당 설정을 변경할 수 있습니다.

다음으로, 시작 조건 섹션을 살펴봅시다.

이것은 내가 워크플로우를 실행할 때 정의할 수 있는 곳이다.

Xcode Cloud에는 여러 가지 조건 유형이 있습니다.

이 워크플로우의 경우, 메인 브랜치에 병합하려는 모든 풀 리퀘스트에 대해 실행되도록 시작 조건을 설정하고 싶습니다.

그렇게 하려면, 유형 메뉴에서 선택하고 풀 리퀘스트에 대한 모든 변경을 선택할 수 있습니다.

이 조건 유형은 소스와 대상 브랜치를 지정할 수 있게 해준다.

소스 브랜치를 Any Branch로 설정하고 대상 브랜치를 Main으로 설정하겠습니다.

이제 팀원이 메인에 대한 풀 리퀘스트를 만들고 변경할 때마다 Xcode Cloud는 이 워크플로우를 자동으로 실행합니다.

풀 리퀘스트를 구축할 때, Xcode Cloud는 이제 소스와 대상 브랜치의 병합을 함께 구축하고 테스트할 것이므로, 우리 팀원들은 자신감을 갖고 나머지 팀과의 변화의 실제 영향을 알 수 있습니다.

또한 이러한 조건을 특정 파일이나 폴더로 좁히고 워크플로우가 실행될 때 이전에 실행 중인 빌드를 자동 취소할지 여부를 설정할 수 있습니다.

이것은 내가 한 커밋을 다른 커밋 위에 빠르게 연속적으로 밀어붙일 때 유용하다.

풀 리퀘스트에 대한 모든 변경은 워크플로우에 대해 설정할 수 있는 시작 조건 중 하나일 뿐이며, 팀의 필요에 따라 이러한 요구를 충족하도록 구성할 수 있는 다른 조건 유형이 있습니다.

브랜치에 대한 모든 변경은 항상 소스 브랜치를 구축하고 풀 리퀘스트 상태를 무시할 것이다.

태그에 대한 모든 변경은 새로운 태그가 생성될 때마다 생성됩니다.

일정에서 당신이 선택할 수 있는 반복적인 일정에 따라 당신이 선택한 지점을 만들 것입니다.

가끔 실행하고 싶은 장기 실행 테스트가 있다면 이것은 좋습니다.

이제 이 워크플로우가 언제 실행될지 지시하는 시작 조건을 구성했으니, 워크플로우가 어떻게 실행될지 지시하는 환경 섹션을 구성해 봅시다.

Xcode Cloud는 Apple의 클라우드 인프라에서 실행되며 다양한 macOS 및 Xcode 버전을 사용할 수 있습니다.

Xcode와 macOS 버전을 선택하려면, 메뉴에서 선택하기만 하면 됩니다.

또한 최신 릴리스 또는 베타 버전을 가리키도록 워크플로우를 설정할 수 있으므로 항상 최신 소프트웨어를 빌드하거나 테스트할 수 있습니다.

개발자로서, 우리 모두는 생산성에 깊은 관심을 가지고 있으며, 그 중 상당 부분은 우리가 사용하는 도구의 성능입니다.

여러분 중 많은 사람들이 많은 파일이 있는 대규모 프로젝트를 진행하고 잠재적으로 긴 빌드 시간을 처리할 것입니다.

Xcode 내에서와 마찬가지로, 변경된 파일을 빌드하기만 하면 변경 사항을 점진적으로 빌드할 수 있는 옵션이 있습니다.

Xcode Cloud에도 이 옵션이 있습니다.

이것은 일반적으로 더 빠른 빌드로 이어진다.

하지만, 대신 깨끗한 빌드를 수행하고 싶을 때가 있습니다.

이것은 모든 것이 최종 빌드에서 작동하는지 확인하는 데 중요하며, TestFlight를 사용하여 외부 베타 테스터에 배포하거나 App Store에 제출할 수 있는 빌드를 생성해야 합니다.

환경 섹션에서, 나는 클린을 선택할 수 있는 옵션이 있다.

이것은 풀 리퀘스트 워크플로우이기 때문에, 성능 이점을 활용할 수 있도록 체크하지 않은 상태로 둘 것이다.

모든 팀은 고유한 방식으로 일하며, 팀은 원하는 방식으로 일할 수 있는 유연성을 가질 수 있는 도구가 필요합니다.

Xcode Cloud는 우리가 가장 일반적인 개발 작업이라고 생각하는 것을 할 수 있는 옵션을 제공합니다.

그러나, 그것은 또한 확장성을 위한 다양한 옵션을 제공한다.

이 확장성을 사용하면 Xcode Cloud를 팀이 작업을 완료하는 데 사용하는 다른 도구 및 시스템과 연결할 수 있습니다.

Xcode Cloud는 데이터에 액세스하고, 워크플로우를 구성하고, 빌드를 시작할 수 있는 포괄적인 API를 제공합니다.

Xcode가 제공하는 기존 스크립팅 옵션 외에도, Xcode는 빌드 및 테스트를 수행하는 장치에서 실행되는 사용자 지정 스크립트를 만드는 기능을 추가합니다.

환경 섹션에서 Xcode Cloud가 사용자 지정 스크립트에서 사용할 수 있는 환경 변수를 지정할 수 있습니다.

이것은 소스 코드 저장소에 체크인하고 싶지 않은 구성과 비밀에 유용합니다.

나는 또한 추가적인 수준의 보호를 제공하기 위해 환경 변수를 비밀로 표시할 수 있는 능력이 있다.

이에 대한 자세한 정보는 "고급 Xcode 클라우드 워크플로우 사용자 지정" 세션이나 문서에서 찾을 수 있습니다.

지금까지, 우리는 워크플로우가 언제 실행되고 언제 실행되는지 구성하는 방법을 보여주었습니다.

그들은 어떤 환경에서 운영해야 하나요?

다음으로, 행동에 대해 이야기해 봅시다.

작업은 워크플로우가 실행될 때마다 워크플로우가 당신과 당신의 팀을 위해 하기를 원하는 작업을 정의합니다.

Xcode가 로컬에서 수행하도록 요청할 수 있는 주요 작업은 이제 Xcode Cloud 내에서 모두 사용할 수 있습니다: 빌드, 정적 분석 실행, 테스트 및 보관.

내가 설정하고 싶은 작업은 아카이브, 테스트 및 분석 작업이다.

작업으로 더하기 아이콘을 클릭하고 아카이브를 선택하여 아카이브 작업을 추가하는 것으로 시작합시다.

아카이브를 만들고 싶은 플랫폼과 계획을 선택해야 합니다.

그것은 이미 iOS 플랫폼과 iOS 계획을 미리 선택했는데, 그것이 정확히 내가 원했던 것이다.

나는 또한 TestFlight에 등록하거나 App Store 배포를 준비할 수 있는 옵션이 있지만, 나중에 이에 대해 더 자세히 알 수 있다.

프로비저닝 프로필이나 코드 서명 ID를 관리할 필요가 없다는 것을 알 수 있습니다.

Xcode Cloud는 이를 자동으로 처리합니다.

이에 대해 자세히 알아보려면, "클라우드 서명으로 Xcode에서 앱 배포" 세션을 확인하세요.

이제 아카이브 액션이 설정 되었으니, 테스트 액션에 집중합시다.

앱을 테스트하는 것은 개발 과정에서 매우 중요한 부분입니다.

사용자가 버그를 덜 경험하도록 하는 데 도움이 될 뿐만 아니라, 당신이 만들고 있는 변화에 대한 자신감을 줌으로써 개발 프로세스의 속도를 높일 수 있습니다.

그러나, 때로는 현지에서 테스트를 실행하는 것이 번거롭고 느릴 수 있으며, 때로는 잊어버릴 수도 있습니다.

Xcode Cloud에서 테스트로 워크플로우를 설정함으로써, 테스트는 안정적이고 안정적이며 재현 가능한 환경에서 실행됩니다.

그들은 당신이 다른 일을 하는 동안 백그라운드에서 실행되어 로컬 환경을 자유롭게 하고, 자동으로 실행되므로 수동으로 실행하는 것을 기억할 필요가 없습니다.

테스트 작업을 추가하려면, 더하기 버튼을 클릭하고 테스트를 선택하기만 하면 됩니다.

테스트 작업을 위해, 나는 그것들을 통과해야 할지 말지 선택할 수 있다.

작업을 필요에 따라 표시한다는 것은 이 테스트 작업이 실패하면 전체 빌드가 실패한다는 것을 의미합니다.

테스트 스위트를 구축하고 있다면, 전체 빌드 상태에 영향을 미치지 않도록 통과할 필요가 없음으로 설정할 수 있습니다.

어떤 테스트를 실행할지 선택할 때, 나는 몇 가지 옵션이 있다.

Scheme Settings 사용을 선택하여 Fruta iOS 계획의 설정을 참조하거나, 특정 테스트 세트를 연마하려면 특정 테스트 계획을 선택할 수 있습니다.

일단 내가 그 세트를 갖게 되면, 내가 테스트를 실행하고 싶은 시뮬레이터를 선택하기만 하면 된다.

Xcode Cloud는 화면 크기가 다른 시뮬레이터 모음인 권장 옵션을 제공합니다.

권장 옵션은 항상 환경 섹션에서 선택한 Xcode에 대해 테스트하지만, 특정 시뮬레이터를 선택하면 이전 OS 버전 목록에서 선택할 수도 있습니다.

내가 실행하고 싶은 마지막 동작은 분석 동작이다.

컴파일러는 자동으로 많은 종류의 버그를 찾고 그것에 대해 경고할 수 있다.

이것들에 신경을 쓰고 고치면 런타임에 이러한 문제를 추적하는 것에 비해 많은 개발 시간을 절약할 수 있으며 사용자에게 앱으로 훨씬 더 안정적이고 버그 없는 경험을 제공할 수 있습니다.

그러나, 정적 분석을 실행하는 것은 우리의 전형적인 지역 반복 개발 워크플로우의 일부가 아니기 때문에, 우리 중 많은 사람들이 그것을 실행하는 것을 잊어버리고, 시간이 지남에 따라 팀 전체에 문제가 증가하는 것을 볼 수 있다.

Xcode Cloud를 사용하면 코드를 변경할 때마다 정적 분석이 실행되도록 할 수 있습니다.

분석 작업을 추가하려면, 더하기 버튼을 클릭하고 분석을 선택합니다.

테스트와 마찬가지로, 나는 정적 분석 문제를 통과해야 하는 것으로 표시할 수 있는 옵션이 있다.

지금 당장, 나는 정적 분석의 결과만 모니터링하고 싶기 때문에, 통과하기 위해 필수로 표시하지 않을 것이다.

마지막 행동은 빌드 행동이다.

때때로, 간단한 Xcode 빌드 작업을 실행해야 할 수도 있습니다.

이것은 특정 2차 빌드 구성 또는 구성표가 여전히 컴파일되도록 하거나, 앱의 일부인 프레임워크가 자체적으로 구축될 수 있도록 하는 데 유용할 수 있습니다.

이제 풀 리퀘스트 워크플로우에 대한 아카이브, 테스트 및 분석 작업을 설정했으므로, 이 워크플로우에 사후 작업을 추가하기 위해 케빈에게 넘겨주겠습니다.

고마워, 웨슬리.

Xcode Cloud 워크플로우를 사용하면 사후 작업을 구성할 수 있습니다.

모든 빌드, 분석, 테스트 및 아카이브 작업이 완료된 후 사후 작업이 실행됩니다.

Xcode Cloud로 구성할 수 있는 사후 작업은 알림을 보내고 TestFlight로 배포하고 있습니다.

먼저 알림에 대해 이야기해 봅시다.

보낼 수 있는 알림 이벤트에는 두 가지 유형이 있습니다.

첫 번째는 빌드가 성공할 때이다.

모든 빌드 성공에 대한 알림을 보낼 수 있는 옵션이 있습니다. 브랜치 또는 풀 리퀘스트 빌드가 실패에서 통과로 전환되는 수정만 가능합니다. 또는 알리지 않습니다.

다른 알림 이벤트는 빌드가 실패할 때를 위한 것이다.

모든 빌드 실패에 대한 알림을 보낼 수 있습니다. 분기 또는 풀 리퀘스트 빌드가 통과에서 실패로 전환할 때만 중단됩니다. 또는 알리지 마십시오.

이 워크플로우를 위해, 저는 풀 리퀘스트 빌드가 완료되면 팀에 알리고 싶습니다.

액션 섹션 아래에는 사후 액션이 있습니다.

알림 작업을 추가하려면, 더하기 버튼을 클릭하고 알림을 선택합니다.

나는 성공과 실패를 구축하기 위해 모든 것을 떠날 것이다.

알림 이벤트 아래에는 알림을 보낼 수 있는 몇 가지 옵션이 있습니다.

Xcode Cloud는 인기 있는 협업 도구인 Slack과 통합됩니다.

슬랙 계정이 승인되면, 플러스 버튼을 클릭하여 채널 목록을 불러올 수 있습니다.

"Ci-builds" 채널을 선택하고 확인을 클릭하겠습니다.

나는 또한 이메일 주소를 추가할 수 있는 옵션이 있다.

기본적으로 모든 사용자는 시작한 빌드에 대한 알림을 자동으로 수신하므로 이 목록에 추가할 필요가 없습니다.

그러나, 그룹 이메일이 있거나 시작하지 않은 빌드를 받고 싶은 사용자가 있다면, 여기에 이메일을 추가할 수 있습니다.

마지막으로, Xcode 클라우드 워크플로우에서 제가 가장 좋아하는 기능 중 하나인 TestFlight로 자동으로 배포할 수 있는 기능을 공유하고 싶습니다.

그리고 이제 Mac의 TestFlight를 사용하면 Apple이 제공하는 모든 플랫폼에 배포할 수 있습니다.

Xcode Cloud에는 두 가지 TestFlight 배포 옵션이 있습니다.

개발 팀 구성원에게 빌드를 빠르게 보낼 수 있도록 내부 테스터에 배포하는 것이 향상되었습니다.

그들은 당신 팀의 구성원이기 때문에, 클린을 선택하지 않고 풀 리퀘스트와 빌드에서 생성된 빌드를 받을 수 있습니다.

오늘 TestFlight를 사용한다면, 외부 테스트와 App Store는 당신이 이미 알고 있는 것과 같습니다.

후보 및 릴리스 브랜치에 권장되며 베타 앱 검토에 따라 외부 테스터와 App Store에 배포할 수 있습니다.

TestFlight는 조직 외부의 팀원과 베타 테스터의 장치에 앱을 빌드할 수 있는 좋은 방법입니다.

가지고 있는 모든 TestFlight 그룹에 빌드를 자동으로 배포하도록 워크플로우를 구성할 수 있습니다.

TestFlight 탭 아래의 App Store Connect에서 오늘날과 같은 방식으로 TestFlight 그룹을 관리합니다.

여기, 저는 여러 개의 내부 및 외부 그룹이 있으며, 그들 각각은 제 작업 흐름에서 사용할 수 있습니다.

내부 TestFlight 그룹과 자동으로 배포하려면, 세 가지를 수행해야 합니다.

먼저, 아카이브 작업을 추가해야 합니다.

다음으로, 아카이브의 배포 옵션을 내부 테스트로 설정해야 합니다.

마지막으로, TestFlight 내부 테스트 사후 조치를 추가해야 합니다.

그렇게 하도록 워크플로우를 구성해 봅시다.

저는 이 워크플로우가 제 QA 팀에 자동으로 배포되기를 바랍니다.

그렇게 하려면, 먼저 Archive iOS 작업을 클릭하고 TestFlight 내부 테스트만 선택합니다.

이렇게 하는 것은 내 빌드를 TestFlight에서 사용할 수 있다는 것을 의미한다.

누구에게도 자동으로 빌드를 보내고 싶지 않다면 좋지만, 나중에 App Store Connect의 TestFlight 섹션에서 할 수 있는 옵션을 유지하세요.

이 앱의 경우, 빌드가 생성될 때마다 동료들에게 자동으로 배포하고 싶습니다.

그렇게 하려면, 나는 TestFlight 사후 조치를 추가해야 한다.

Post-Actions 옆에 있는 더하기 버튼을 클릭하고 TestFlight 내부 테스트를 추가하겠습니다.

아카이브 iOS 아티팩트는 내가 원하는 것으로 미리 선택되어 있다.

내부 그룹을 추가하려면 더하기 버튼을 누르겠습니다.

마지막으로, 나는 QA 팀을 선택할 것이다.

이제 QA 팀의 구성원들은 주요 지점에 병합되기 전에 모든 기능을 확인하고 테스트할 수 있습니다.

TestFlight 외부 테스트를 통해 조직 외부의 테스터에게 빌드를 보내는 것은 App Store에 제출하기 전에 앱과 기능에 대한 피드백을 받을 수 있는 좋은 방법입니다.

이렇게 하면 더 많은 사용자로부터 변경 사항에 대한 신뢰를 얻고 App Store에 출시되기 전에 잠재적으로 변경하고 문제를 해결할 수 있습니다.

TestFlight 외부 테스트로 배포하려면 몇 가지 조건을 더 설정해야 합니다.

시작 조건에서 단일 지점을 선택하세요.

이것은 외부 베타 테스터에게 보내려는 빌드의 일관성을 보장합니다.

다음으로, 환경 섹션에서 청소를 선택하세요.

이것은 파생된 데이터를 사용하지 않고도 코드가 처음부터 구축되도록 보장합니다.

마지막으로, 아카이브 작업에서 배포 설정을 TestFlight 및 App Store로 설정하십시오.

결국, TestFlight 외부 테스트 사후 조치를 구성하는 것은 TestFlight 내부 테스트를 구성하는 것과 유사합니다.

TestFlight에서 생성된 외부 그룹을 추가하기만 하면 됩니다.

TestFlight 외부 테스트는 또한 개별 테스터에게 배포할 수 있는 추가 기능을 가지고 있다.

방금 Xcode에서 풀 리퀘스트 워크플로우를 만들었지만, App Store Connect에서 워크플로우를 생성, 편집 및 관리할 수도 있습니다.

Xcode에서 멀리 떨어져 있고 워크플로우를 변경해야 하는 경우 훌륭한 옵션입니다.

이제 저스틴에게 돌아가서 팀을 위해 만들 수 있는 워크플로우 유형에 대한 몇 가지 추천을 하세요.

저스틴?

고마워, 케빈.

나는 Fruta QA 팀이 우리의 풀 리퀘스트 워크플로우를 통해 빌드에 더 빨리 접근하는 것을 좋아할 것이라고 생각한다.

보시다시안 것처럼, 워크플로우는 팀이 일하는 방식을 모델링할 수 있는 많은 힘과 유연성을 가지고 있습니다.

작업을 완료하는 데 필요한 만큼의 워크플로우를 만들 수 있습니다.

나는 우리 팀이 몇 가지를 만들 것이라는 것을 안다.

케빈은 방금 당신에게 풀 리퀘스트에 대한 워크플로우를 보여줬지만, 여기 당신과 당신의 팀이 시도할 수 있는 더 많은 워크플로우에 대한 몇 가지 아이디어가 있습니다.

개발 팀 외부의 사용자에게 앱을 보여주려면, 외부 TestFlight 그룹에 배포하거나 App Store에 앱을 제출할 수 있습니다.

여기서 아이디어는 내 앱의 사용자가 훌륭한 경험을 할 수 있도록 고품질을 시행하고 싶다는 것이다.

나는 출시를 위해 지정된 지점에서 워크플로우를 실행해야 한다.

포괄적인 테스트 배터리를 실행하고, 빌드를 보관하고, 마지막으로 외부 TestFlight 그룹과 사용자의 손에 배포해야 합니다.

더 잘 설명하기 위해, 제 릴리스 워크플로우를 보여드리겠습니다.

내 워크플로우가 우리의 모든 향후 릴리스를 구축할 수 있도록, 나는 시작 조건을 내 릴리스 브랜치의 브랜치에 대한 모든 변경으로 설정했다.

철저하게 하기 위해, 저는 이 워크플로우의 모든 빌드가 처음부터 생성되기를 원하기 때문에, 환경 섹션에서 Clean을 확인했습니다.

그렇게 하면 일반적으로 모든 것이 다시 컴파일되기 때문에 빌드 시간이 증가하지만, 캐싱으로 인한 문제가 없다는 확신을 준다.

이 워크플로우를 위해 특정 버전의 Xcode와 macOS도 선택했습니다.

도구를 고정하는 것은 수렴하고 출시를 마무리하는 데 중요한 부분이다.

우리 앱이 사용자의 iPhone과 iPad 범위에서 작동하도록 하기 위해, 저는 테스트 섹션의 다양한 시뮬레이터에서 테스트를 실행합니다.

TestFlight를 통해 앱 빌드를 배포하기 위해 아카이브 작업을 포함하고 배포 준비를 TestFlight와 App Store로 설정했습니다.

베타 테스터가 항상 최신 빌드를 얻을 수 있도록, 저는 외부 TestFlight 그룹에 배포할 사후 조치를 설정했습니다.

새 코드가 릴리스 브랜치에 병합되면, 자동으로 빌드, 테스트 및 베타 테스터에 배포됩니다.

이제 우리는 품질이 여전히 높다는 확신을 유지하면서 변화에 대한 피드백을 빠르게 받을 수 있습니다.

매일 밤 더 깊은 테스트를 수행하는 또 다른 워크플로우가 있습니다.

내 야간 테스트 워크플로우는 주기적으로 실행되며, 필요한 만큼 많은 플랫폼을 커버하기 위해 여러 시뮬레이터에 대해 테스트합니다.

모든 테스트 실패는 QA 팀에 보고되며, 전적으로 테스트에 초점을 맞추고 있기 때문에, 어디에도 빌드를 배포할 필요가 없습니다.

매주 빈도의 시작 조건 유형으로 지점의 일정을 선택하여 매주 밤 이 워크플로우를 실행하도록 시작 조건을 설정했습니다.

그리고 나서, 나는 내 날을 월요일부터 금요일까지 오전 1시로 선택했다.

환경 섹션에서, 나는 새로운 도구가 출시됨에 따라 앱이 성공적으로 빌드되는지 확인하기 위해 최신 Xcode 버전을 선택했다.

앱을 철저히 테스트하고 싶어서, 통과해야 하는 몇 가지 테스트 계획과 시뮬레이터를 선택했습니다.

나는 또한 정적 분석을 실행하고 싶기 때문에, 분석 작업을 추가했고 또한 통과할 것을 요구한다.

이전 테스트 중 하나라도 실패하면, QA 팀은 Notify 사후 조치로 알아낼 것이다.

나는 Build Success를 Don't Not Not Notify로 설정하고, Build Failure to All으로 설정했다.

내 QA 팀은 그들만의 슬랙 채널을 가지고 있지만, 이메일 주소를 지정할 수도 있다.

어느 쪽이든, QA 팀은 다음 날 아침까지 빌드 실패에 대해 알아낼 것이다.

이와 같은 워크플로우를 실행하는 것은 당신과 당신의 팀이 낮에 계속 개발하고 Xcode Cloud를 떠나 밤에 앱을 철저히 테스트할 수 있기 때문에 시간을 절약할 수 있는 좋은 방법입니다.

그리고 마지막으로, Xcode의 제품 메뉴 아래에는 우리 팀이 사용하는 모든 워크플로우를 살펴볼 수 있는 워크플로우 관리가 있습니다.

나는 웨슬리와 케빈이 이전에 만든 워크플로우와 함께 방금 만든 야간 테스트 워크플로우를 본다.

우리 프로젝트가 성장함에 따라, 팀의 요구에 맞게 워크플로우를 더 추가, 편집 또는 제거할 수 있습니다.

그리고 그것은 우리 팀의 워크플로우를 위한 것이다.

풀 리퀘스트에 대한 워크플로우를 만드는 방법, 다른 플랫폼에 대한 작업을 구성하는 방법, TestFlight 사용자에게 릴리스를 배포하는 방법, 야간 테스트를 설정하는 방법을 보여주었습니다.

하지만 워크플로우로 할 수 있는 일이 훨씬 더 많습니다.

게다가, App Store Connect에서 워크플로우를 만들고 관리할 수도 있습니다.

워크플로우에 대해 더 자세히 알아보려면, "고급 Xcode 클라우드 워크플로우 사용자 정의"를 확인하세요.

아직 기회가 없었다면, "Meet Xcode Cloud"를 보고 프로젝트를 온보딩하는 방법을 배우세요.

클라우드 서명과 풀 리퀘스트에 대한 Xcode의 새로운 지원에 대해 더 자세히 알아보는 다른 훌륭한 세션도 있습니다.

Xcode Cloud는 팀이 작업 방식에 적응하고 팀이 지속적으로 개발 관행을 따르는 데 도움이 되는 유연하고 확장 가능한 워크플로우를 만들 수 있는 기능을 제공합니다.

이 세션이 당신과 당신의 팀이 개발을 반복하고 고품질 앱을 제공할 때 활용할 수 있는 워크플로우를 만드는 데 도움이 되기를 바랍니다.

시청해 주셔서 감사드리며, 남은 WWDC를 즐기세요.

[음악].