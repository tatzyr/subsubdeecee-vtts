10092

♪ 베이스 음악 연주 ♪

♪

에드워드: 안녕하세요, WWDC에 오신 것을 환영합니다!

저는 지갑 팀의 엔지니어인 에드워드이고, 나중에 제 동료 러스와 합류할 것입니다.

우리는 오늘 지갑과 Apple Pay의 새로운 기능에 대해 이야기하게 되어 매우 기쁩니다.

오늘 저는 세 가지 주요 영역에 대해 이야기하고 싶습니다.

먼저, 저는 몇 가지 지갑 업데이트를 공유하고 작년에 있었던 몇 가지 흥미로운 롤아웃에 대해 말씀드리고 싶습니다.

둘째, 우리는 Apple Pay에 많은 흥미로운 업데이트를 했습니다.

우리는 또한 몇 가지 새로운 기능을 추가하여 결제를 훨씬 더 쉽게 사용할 수 있도록 했습니다.

셋째, 나는 우리가 만든 몇 가지 새로운 API 개선 사항을 살펴보고 싶다.

그래서 지갑에 대한 몇 가지 업데이트를 시작합시다.

기조 연설에서 들었겠지만, 우리는 Apple Wallet에 신분증을 가져오고 있습니다.

미국에서 시작하여, 몇 개의 선택된 주와 함께, 운전면허증이나 주 ID를 스캔하고 셀카를 찍을 수 있습니다.

당신의 ID는 보안 요소에 의해 보호됩니다.

TSA는 디지털 ID를 사용할 수 있는 첫 번째 장소로 공항 보안 검문소를 활성화하기 위해 노력하고 있습니다.

이에 대한 자세한 내용은 이 세션과 관련된 링크를 확인하세요.

또한 iOS 15의 새로운 기능, 우리는 HomeKit 연결 잠금에 대한 지원을 추가했기 때문에, 사용자는 이제 홈 키 패스로 문을 열 수 있습니다.

패스를 추가할 때, 우리는 많은 사용자가 웹에서 바로 설치한다는 것을 알고 있습니다.

예를 들어, iOS 14에서 네 개의 영화 티켓을 추가하고 싶다면, 개별적으로 추가해야 합니다.

올해, 우리는 사파리에서 멀티패스 다운로드를 추가했습니다.

간단한 변경으로, 패스를 함께 묶어서 사용자에게 원활한 경험을 제공할 수 있습니다.

이것을 하려면, 당신은 세 가지를 해야 할 것입니다.

먼저, PkPass 파일을 함께 압축하세요.

둘째, 파일 확장자를 .pkpasses로 설정하세요.

그리고, 마지막으로, 올바른 마임 유형을 사용하세요.

이제, 번들의 모든 패스는 한 번의 다운로드로 지갑에 의해 다운로드되고 처리될 것입니다.

그리고 이 모든 패스로, 때때로 당신이 그것들을 모두 추적하는 것은 번거로울 수 있습니다.

우리는 또한 많은 사람들이 오래된 패스를 삭제하는 것을 좋아하지 않고, 대신 기념품으로 두는 것을 선호하지만, 그것은 지갑을 어수선하게 만들 수 있다는 것을 알고 있다.

iOS 15의 새로운 기능인 지갑은 이제 만료된 패스를 자동으로 숨기고 패스를 정리하고 쉽게 찾을 수 있습니다.

당신이 이것을 어떻게 활용할 수 있는지에 대한 예를 보여드리겠습니다.

여기서 우리는 예시 패스에서 JSON을 볼 수 있습니다.

지갑은 패스가 자동으로 숨겨져야 하는지 결정하기 위해 세 개의 필드를 살펴본다.

첫 번째, 패스는 현재 날짜보다 오래된 만료일을 가지고 있다.

둘째, 관련 날짜는 하루보다 오래되었다.

또는 셋, 패스가 무효화되었다.

사용자에게 훌륭한 경험을 보장하려면, 이 필드가 패스에 올바르게 설정되어 있는지 확인해야 합니다.

이제 Apple Pay에 대한 몇 가지 업데이트에 대해 말씀드리겠습니다.

Apple Pay는 iPhone, iPad, Apple Watch 및 Mac에서 결제하는 가장 쉬운 방법입니다.

그것은 사용자가 앱과 웹에서 결제할 수 있게 해준다.

Apple Pay는 iMessage와 비즈니스 채팅에서 지원되며, 간소화된 즉각적인 경험을 위해 앱 클립에서도 지원됩니다.

전 세계의 Apple Pay 사용은 계속 증가하고 있다.

우리는 올해 멕시코, 이스라엘, 남아프리카에서 지원을 추가했는데, 이는 이제 전 세계 55개 국가와 지역에서 Apple Pay를 사용할 수 있다는 것을 의미합니다.

우리는 더 많은 장소에서 Express Transit에 대한 지원을 추가했습니다.

그리고, 우리는 브라질과 같은 곳에서 결합된 신용 카드와 직불 카드에 대한 지원을 포함시켰습니다.

이제, 훌륭한 결제 경험을 만들기 위해 앱과 웹사이트에 변경할 수 있는 몇 가지 변경 사항을 보여드리고 싶습니다.

작년에 우리는 Apple Pay로 대여 및 Apple Pay로 충전과 같은 더 많은 버튼 유형에 대한 지원을 추가했습니다.

오늘 우리는 하나 더 소개합니다: Apple Pay를 계속하세요.

다른 버튼과 함께 장바구니에 Apple Pay를 제공할 때 이 버튼을 사용해야 합니다.

계속을 행동 촉구로 사용할 수 있습니다.

우리는 또한 Apple Pay 버튼을 위한 새로운 자바스크립트 구현을 도입하고 있습니다.

이 새로운 버튼은 현재 모든 버튼 유형과 스타일을 지원합니다.

구현하기 쉽고, 사이트의 디자인에 맞게 사용자 정의할 수 있습니다.

여기 구현 예시가 있습니다.

보시다시피, 버튼 크기와 스타일을 쉽게 구성할 수 있습니다.

스타일에는 "apple-pay"라는 접두사가 붙습니다.

이에 대한 자세한 내용은 Apple Developer Portal의 문서를 확인하세요.

다음으로, iPhone 및 iPad용 Apple Pay에 대한 큰 변경 사항을 보여드리고자 합니다.

iOS 15의 경우, 우리는 새로운 Apple Pay 경험으로 더 나은 결제를 할 수 있게 되어 기쁩니다.

우리는 완전히 새로운 디자인으로 SwiftUI에서 Apple Pay 시트를 처음부터 다시 구축했습니다.

그것은 사용자에게 멋진 새로운 모습으로 훨씬 더 명확하고 원활한 결제 경험을 제공합니다.

우리는 또한 전환을 개선하기 위해 몇 가지 새로운 기능을 구현했습니다.

Apple Pay를 처음 사용하는 사용자를 위해, 우리는 결제 시트에서 카드와 주소를 추가하는 흐름을 단순화했습니다.

기존 사용자는 Apple Pay 경험을 떠나지 않고도 다른 카드를 추가할 수 있습니다.

우리는 또한 문제가 발생할 때 더 명확하게 하기 위해 오류 처리를 재설계했습니다.

사용자가 새로운 결제 방법 추가를 마치면, 그들은 원활하게 거래를 재개한다.

우리는 또한 지불 항목, 할인 및 소계와 같은 더 자세한 정보를 보여주는 새로운 요약 보기를 추가했습니다.

iOS 15의 새로운 기능, 우리는 또한 요약 보기에 앱의 아이콘을 표시합니다.

웹 결제의 경우, 이제 결제 요약 보기에 웹 클립 아이콘을 표시하고 있습니다.

Apple Pay에서, 이것은 이전에는 Mac에서 핸드오프를 사용하여 거래를 완료할 때만 볼 수 있었다.

이제 귀하의 웹사이트 아이콘은 Apple Pay 거래 내에서 볼 수 있어 사용자에게 결제가 올바른 곳으로 가고 있다는 시각적 확신을 제공합니다.

웹에서 Apple Pay를 수락하고 아직 웹 클립 아이콘을 설정하지 않았다면, 사용자가 아이콘을 볼 수 있도록 하는 것이 좋습니다.

이렇게 하려면, 루트 문서 폴더에 표시된 크기로 2x 및 3x 아이콘을 제공해야 합니다.

그런 다음 Apple Pay는 결제 요청과 함께 이 아이콘을 자동으로 검색하고 표시합니다.

이를 구현하는 방법에 대한 자세한 정보는 Apple Developer 사이트의 휴먼 인터페이스 지침 섹션에서 확인할 수 있습니다.

우리가 아이콘 크기에 대해 이야기하는 동안, PKPasses에 대한 새로운 아이콘 크기 요구 사항을 상기시켜 드리고 싶었습니다.

iOS 15의 알림은 이제 더 큰 아이콘을 표시하기 때문에, 아이콘이 흐릿하지 않고 표시되도록 PKPass 아이콘을 1x에서 최소 38x38로 업데이트해야 합니다.

우리는 또한 전체 라인에 더 많은 유연성을 도입하게 되어 기쁩니다.

이렇게 하면 나중에 결제가 발생하면 날짜를 추가할 수 있습니다. 예를 들어, 선주문을 받거나 반복 결제 빈도를 추가하는 경우.

우리가 방금 관찰한 많은 새로운 기능은 몇 가지 간단한 변경 사항만으로 앱에 추가할 수 있습니다.

그래서 우리는 이제 iOS 15에서 도입하는 API 개선 사항을 자세히 살펴볼 것입니다.

우리는 배송 날짜 범위에 대한 지원을 추가하게 되어 기쁩니다.

이제 Apple Pay 내에서 관련 배송 또는 픽업 시간을 사용자에게 제시할 수 있습니다.

이것들은 매장 내 픽업을 위한 예상 배송 또는 배송 날짜 또는 시간대를 설정하는 데 사용할 수 있습니다.

이 추가 정보는 기본 Apple Pay 보기에 바로 표시됩니다.

새로운 배송 날짜 API에는 달력과 시간대에 대한 지원이 내장되어 있습니다.

이렇게 하면 앱에서 배송 날짜나 픽업 시간을 쉽게 처리할 수 있으며 관련 정보가 사용자에게 명확하게 표시됩니다.

이제 이게 어떻게 작동하는지 간단히 보여줄게.

우리는 이전과 동일한 PKShippingMethod를 사용하여 정상적인 배송 방법을 정의하는 것으로 시작합니다.

다음으로, 우리는 달력을 선택한다.

이 예에서, 우리는 사용자의 현재 달력을 사용합니다.

우리는 오늘을 참고로 사용하고 이 날짜로부터 3일에서 7일 사이에 도착을 추정합니다.

그런 다음 달력을 사용하여 날짜 범위의 시작일과 종료일을 결정합니다.

마지막으로, 우리는 날짜를 적절한 날짜 구성 요소로 변환한 다음 배송 방법에 추가합니다.

우리는 간단한 날짜가 아닌 날짜 구성 요소를 사용하므로 iOS에 내장된 풍부한 달력과 시간대 지원을 활용할 수 있습니다.

이것은 그렇지 않으면 불가능할 사용 사례를 가능하게 한다.

예를 들어, 우리는 사용자의 현재 시간대에 관계없이 픽업 시간에 대한 정확한 시간대를 제공할 수 있습니다.

이 수준의 세부 사항은 또한 특정 픽업 시간을 표시하는 것과 같이 사용자에게 가장 적합한 날짜와 시간 정보를 보여줄 수 있게 해준다.

우리는 웹에서 Apple Pay와 동등한 자바스크립트를 포함시켰습니다.

스위프트에서와 약간 다르게 날짜 구성 요소 범위를 지정하는 것을 볼 수 있습니다.

날짜 구성 요소는 지원되는 픽업 유형과 함께 사용할 수 있습니다.

예를 들어, 앱에 픽업 시간을 표시할 수 있습니다.

날짜 범위 외에도, 이제 읽기 전용 배송 주소를 선언할 수 있습니다.

이것을 사용하여 사용자에게 특정 픽업 위치를 알릴 수 있습니다.

이를 활성화하려면, PKContact의 인스턴스로 주소 세부 정보를 제공해야 합니다.

이 예에서, 우리는 필요한 모든 주소 구성 요소를 설정할 수 있도록 CNMutablePostalAddress로 우편 주소를 만들었습니다.

이제 결제 요청에 배송 연락처를 추가할 수 있습니다.

마지막으로 우리는 편집 모드를 선언하고 필요한 배송 필드를 지정합니다.

PKContact에 포함된 주소 필드는 사용자에게 읽기 전용으로 표시됩니다.

이 예에서, 우리는 사용자가 편집할 수 없는 픽업 우편 주소를 제공했습니다.

그리고 여기 웹에서 Apple Pay를 위한 자바스크립트에 상응하는 것이 있습니다.

shippingContact 사전을 설정하고, shippingType, shippingContactEditingMode 및 requiredShippingContactFields를 설정한 다음, 자바스크립트 결제 요청에 대한 다른 필드를 포함합니다.

자세한 내용은 개발자 포털의 Apple Pay 섹션에서 사용할 수 있는 문서를 확인하세요.

iOS 15의 또 다른 훌륭한 새로운 기능은 쿠폰 코드 지원이다.

이제 사용자는 결제를 시작하면 프로모션 코드를 입력할 수 있습니다.

이것은 사용자가 할인 코드를 적용하는 것을 잊어버린 경우 Apple Pay 거래를 취소할 필요가 없도록 하기 위한 것입니다.

사용자가 제품 페이지나 쇼핑 카트에서 체크아웃할 수 있는 빠른 구매 흐름이 있지만 쿠폰 입력 필드는 체크아웃 시에만 표시되는 경우 이를 구현하는 것을 고려할 수도 있습니다.

결제 요청을 업데이트하는 방법을 제공했으므로, 필요한 경우 할인 코드를 확인하거나 오류 메시지를 반환할 수 있습니다.

들어가서 코드를 살펴봅시다.

사용자가 쿠폰 코드를 변경할 때마다 업데이트를 수행하는 대리자 방법을 사용하여 변경할 수 있습니다.

예를 들어, 이것을 사용하여 코드를 검증한 다음 지불 총액을 업데이트할 수 있습니다.

또한 이 방법을 사용하여 사용자 지정 오류를 반환하거나 지불 요약 항목과 배송 방법을 업데이트합니다.

러스는 곧 당신에게 이것의 예를 더 자세히 보여줄 것입니다.

가능할 때마다 코드를 미리 채우고, 유효하지 않은 코드에 대한 관련 오류 메시지를 표시하는 것이 좋습니다.

iOS 15를 위한 이 흥미진진한 API 향상을 즐겼기를 바랍니다.

이제 우리는 이론적으로 이것에 대해 모두 이야기했으므로, 이 모든 훌륭한 새로운 기능을 구현하는 방법을 볼 수 있도록 데모를 위해 러스에게 넘겨줄 것입니다.

러스 페넨가: 고마워, 에드워드. 안녕하세요, 여러분.

제 이름은 러스이고, 저는 지갑 팀의 소프트웨어 엔지니어입니다.

그리고 iOS 15의 결제 시트에 추가한 놀라운 새로운 기능과 앱에 통합할 수 있는 방법을 시연할 수 있게 되어 기쁩니다.

그럼 시작하자!

여기 제가 계획하고 있는 음식 축제 티켓 구매 앱이 있습니다.

내 앱은 이미 Apple Pay 결제 시트를 활용하기 위해 PKPaymentAuthorization ControllerDelegate의 기존 프로토콜 방법을 구현했습니다.

iOS 15에서는 결제 시트가 추가 작업 없이 자동으로 새로운 모습으로 업데이트됩니다.

저는 iOS 15로의 업데이트로 축제 참석자들이 마침내 여러 가지 방법으로 티켓을 요청할 수 있기를 바랍니다.

이렇게 하려면, 여러 배송 방법에 대한 지원을 추가해야 하므로, 뛰어들자!

여러 PKShippingMethods에 대한 지원을 추가하기 위해 PKPaymentRequest를 구축하는 PaymentHandler 클래스로 향할 것입니다.

내가 가장 먼저 추가할 것은 사용자가 사용할 수 있는 다양한 옵션을 나타내는 PKShippingMethods 배열을 반환하는 도우미 함수입니다.

내가 만든 첫 번째 PKShippingMethod는 표준 배송 방법으로, 사용자에게 축제에서 티켓을 수령할 수 있다는 것을 알려준다.

iOS 15의 새로운 기능, 저는 사용자에게 티켓을 배송하는 데 필요한 예상 범위를 제공하고 싶습니다.

이를 위해 날짜와 달력 객체를 만든 다음, 지금부터 3~5일 후에 배송 시작 및 배송 종료 날짜를 정의합니다.

그런 다음 결제 시트에서 사용자에게 표시하고 싶은 날짜 구성 요소를 지정할 수 있습니다.

그런 다음 PKShippingMethod를 구축하여 새 속성인 dateComponentsRange를 설정하고 두 가지 배송 방법의 배열을 반환합니다.

내가 해야 할 마지막 일은 PKPaymentRequest에서 배송 방법을 그렇게 설정하는 것이다.

이러한 간단한 변경으로, 저는 앱을 만들고 결제 시트에서 새로운 배송 방법을 확인할 수 있습니다.

배송 방법을 보여주는 결제 시트에 새 행이 자동으로 추가되었습니다.

행을 탭하면 날짜 범위를 지원하는 방법을 포함하여 방금 추가된 두 배송 방법을 모두 볼 수 있습니다.

나는 또한 올해 축제를 위해 모든 참석자들에게 쿠폰 코드를 보내고 내 앱의 결제 시트를 통해 직접 사용할 수 있는 기능을 추가하기로 결정했습니다.

이것을 하기 위해, 내가 해야 할 두 가지 주요 변화가 있다.

코드로 돌아가자.

첫 번째는 PKPaymentRequest를 만들 때이다.

True로 설정해야 하는 새로운 부울인 supportsCouponCode가 있습니다.

또한 PKPaymentRequest에서 이미 유효한 쿠폰 코드 중 하나로 쿠폰 필드를 미리 채우도록 설정할 수 있는 새로운 옵션 속성인 couponCode가 있습니다.

다음으로, PKPaymentAuthorization ControllerDelegate를 준수하는 클래스 확장으로 이동하여 새로운 프로토콜 방법 paymentAuthorizationController didChangeCouponCode를 구현하여 요약 항목을 업데이트하고 쿠폰 코드를 입력할 때 쿠폰 코드 입력과 관련된 오류를 표시할 수 있습니다.

가장 먼저 필요한 것은 유효한 쿠폰 코드가 입력되면 PKPaymentSummaryItems를 업데이트하는 도우미 기능입니다.

나는 우리의 소계 항목인 첫 번째 요약 항목에 대한 참조를 잡았다.

거기에서, 나는 사용자가 적용된 할인을 볼 수 있는 새로운 PKPaymentSummaryItem을 만든다.

그런 다음 세금과 합계에 대한 새로운 요약 항목을 만든 다음 배열을 반환합니다.

이제 할인 신청 논리를 작성했으니, 쿠폰 코드 유효성 검사 논리를 작성할 수 있습니다.

먼저 사용자가 입력한 쿠폰 코드가 비어 있는지 확인하고, 만약 비어 있다면, 수정되지 않은 지불 요약 항목에서 우리의 완료 통과에 전화하세요.

입력한 쿠폰 코드가 유효한 쿠폰 코드와 일치하면, 방금 만든 applyDiscount 기능을 사용하여 업데이트된 요약 항목을 CouponCodeUpdate 객체로 반환합니다.

앱의 경우, 이 시점에서 서버에서 유효한 쿠폰 코드를 가져와야 할 가능성이 큽니다.

마지막으로, 입력한 쿠폰 코드가 유효하지 않은 경우, 새로운 PKPaymentRequest 편의 이니셜라이저, paymentCouponCodeInvalidError를 사용하고 결제 시트에 직접 표시할 설명을 제공합니다.

우리는 또한 만료된 쿠폰 코드에 대한 두 번째 편의 이니셜라이저가 있습니다: paymentCouponCodeExpired ErrorWithLocalizedDescription.

그런 다음 이 오류를 쿠폰 코드 업데이트 이니셜라이저와 원본 SummaryItems에 전달합니다.

그렇게, 저는 제 앱 안에 쿠폰 코드에 대한 지원을 추가했습니다.

확인해 보자.

쿠폰 코드를 입력하려면, 요약 보기를 탭하고 쿠폰 코드 텍스트 필드에 쿠폰 코드를 입력하기만 하면 됩니다.

먼저 유효하지 않은 쿠폰 코드인 Fest를 입력하면, 제가 제공한 오류 메시지가 텍스트 필드 바로 아래에 표시됩니다.

이제 유효한 쿠폰 코드인 FESTIVAL을 입력하면 결제 요약 항목이 즉시 업데이트됩니다.

그런 다음 배송 연락처와 배송 주소를 선택하기만 하면 결제 요청이 완료됩니다.

이러한 간단한 변경으로, 이제 Apple Pay 샌드박스 환경의 장치에서 결제 시트에 대한 업데이트를 테스트할 준비가 되었습니다.

이제, 에드워드에게 돌아가.

에드워드: 고마워, 러스.

러스는 방금 우리에게 여러 배송 방법, 새로운 날짜 범위 및 쿠폰 코드 API를 구현하는 것이 얼마나 쉬운지 보여주었다.

올해 우리는 홈 키 패스, 신분증, 만료된 패스 숨기기, 다중 패스 섭취와 같은 지갑에 몇 가지 흥미로운 새로운 업데이트를 전달했습니다.

우리는 웹에서 Apple Pay를 위한 새로운 자바스크립트 결제 버튼과 iOS에서 새로운 Apple Pay 경험을 도입했습니다.

날짜 범위와 읽기 전용 주소, 쿠폰 코드 및 자신의 앱에서 이를 구현할 수 있는 방법을 포함하는 새로운 배송 API에 대해 배웠습니다.

자세한 내용은 개발자 포털의 Apple Pay 섹션을 확인하세요.

여기에는 앱과 웹사이트의 결제 요청을 테스트하기 위한 Apple Pay 샌드박스가 포함됩니다.

봐줘서 고마워.

♪