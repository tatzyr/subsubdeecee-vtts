10013

♪ ♪

안녕 그리고 환영해.

저는 앱 클립 팀의 엔지니어인 브라이언 골드버그입니다.

가볍고 빠른 앱 클립을 만들기 위한 몇 가지 훌륭한 팁과 기술을 빨리 보여주고 싶습니다.

시작하자.

앱 클립은 고객이 앱이 제공하는 것에 빠르게 액세스하고 경험할 수 있는 좋은 방법입니다.

앱 클립은 필요한 순간에 발견하고 다운로드할 수 있는 앱의 작은 부분입니다.

앱 클립은 OS에 깊이 통합되어 있다.

앱 클립 코드, QR 코드를 스캔하거나 NFC 태그를 탭하여 현실 세계뿐만 아니라 사파리와 메시지에서도 호출할 수 있습니다.

앱 클립은 지도와 Siri 제안에도 나타난다.

이 세션에는 고객에게 훌륭한 경험을 구축하고 제공하는 데 도움이 되는 모범 사례와 문제 해결 팁이 포함되어 있습니다.

크기 제한 내에서 클립을 얻을 수 있는 계획을 보여드리겠습니다.

웹 페이지에 앱 클립이 나타나지 않거나 코드를 스캔할 때 앱 클립 카드가 나타나지 않을 수 있습니다.

아마도 당신은 새로운 기능을 채택함에 따라 추가된 복잡성을 받아들이면서 코드 베이스의 품질을 유지하는 방법에 대한 몇 가지 팁을 찾고 있을 것입니다.

그리고 앱 클립에 구체적이고 고유한 기능을 활용할 수 있는 기능이 무엇인지 궁금할 수도 있습니다.

처음부터 구축하든 기존 앱에 클립 대상을 추가하든, 개발자들이 매일 직면하는 실제 문제를 안내하고, 더 나은 클립과 앱을 구축하기 위한 실행 가능한 다음 단계를 제공할 것입니다.

사용자가 모바일 네트워크 커버리지가 좋은 지역에 있더라도, 다운로드 속도는 다를 수 있습니다.

즉시 주문형으로 앱 클립을 제공할 수 있도록, 앱 클립의 최대 크기는 제한됩니다.

따라서, 개발자로서, 크기에 맞게 콘텐츠를 최적화하는 것이 중요합니다.

클립이 주문형으로 전달될 수 있을 만큼 컴팩트한지 초기에 그리고 개발 중에 자주 아는 것이 좋습니다.

여러분 중 많은 사람들이 소프트웨어 개발에서 프로파일링과 최적화의 반복적인 과정에 익숙합니다.

Xcode를 사용하여 크기 보고서를 생성하고 각 장치 변형에 대한 IPA를 내보낼 수 있는 프로세스를 보여드리고 싶습니다.

그런 다음 앱 클립의 크기를 줄이기 위해 수행할 수 있는 기본 및 고급 최적화 세트를 안내해 드리겠습니다.

목표는 클립이 한도를 초과하면 앱 제출 시간에 놀라지 않는 것입니다.

나는 우리가 볼 수 있는 재미있는 예시를 만들었다.

그것은 크기 제한을 초과하는 많은 gotchas가 있는 Fruta 샘플의 버전입니다.

Gotchas는 몇 가지 요점을 설명하기 쉽다.

당신의 앱은 의심할 여지 없이 더 복잡하고 더 많은 기능을 가지고 있으므로, 제 예를 더 많은 탐험을 위한 출발점으로 사용하세요.

크기 보고서를 생성하고 IPA 파일을 내보내는 단계를 진행하기 위해 Xcode로 시작하는 것으로 시작합시다. 그리고 우리는 이러한 문제를 발견하고 함께 수정하는 방법을 배울 것입니다.

먼저 전체 앱 계획을 선택하세요.

그런 다음 제품 메뉴로 가서 아카이브를 선택하세요.

이것은 스킴 편집기에 지정된 구성을 사용하여 프로젝트를 구축합니다.

주최자가 열리면, 앱 배포를 클릭하세요.

개발을 선택하세요.

이제 앱 클립을 선택하세요.

앱 씬닝 드롭다운에서 호환 가능한 모든 장치 변형을 선택하세요.

비트코드에서 재구축이 선택되어 있는지 확인하세요.

아카이브 준비가 완료되면, 내보내기를 클릭하세요.

그런 다음 내보낼 파일 시스템의 위치를 선택하세요.

이제 파인더에서 내보내기 폴더를 여세요...

그리고 나서 App Thinning Size Report.txt를 여세요.

각 장치 변형에 대한 섹션이 있습니다.

각 섹션의 두 번째에서 마지막 줄은 그 변형의 압축되지 않은 크기를 알려줄 것이다.

그게 우리가 관심 있는 거야.

크기를 보면, 이것은 나에게 두 가지를 말해준다.

하나, 나는 크기 제한을 초과했다.

둘째, 모든 장치 변형이 거의 같은 크기이기 때문에 앱 씬닝의 효과를 볼 수 없습니다.

크기 보고서를 닫고 그 이유를 알아보기 위해 조금 더 깊이 파고들자.

앱 하위 폴더를 여세요.

변형 IPA 확장자 중 하나의 이름을 .zip으로 바꾸고, 확인하세요.

압축을 풀려면 두 번 클릭하세요.

페이로드 폴더를 열고 Control-클릭하여 패키지 내용을 표시하세요.

자세히 살펴보자.

내 이미지는 개별 번들 리소스인 것 같아.

이것들을 자산 카탈로그에 넣으면 공간을 절약할 수 있을 것이다.

설치 가능한 제품에 속하지 않는 문서 zip과 README 파일이 있습니다.

내 클립에서 사용하는 프레임워크가 있다.

그것도 공간을 좀 차지할 거라고 장담해.

나는 몇몇 현지화 폴더가 있는 것을 보고, 선택하지 않으면 때때로 이 파일들이 커질 수 있다는 것을 알고 있다.

컴파일된 실행 파일은 상대적으로 작다...

하지만 아마 더 작게 할 수 있는 방법이 있을 거야.

조금이라도 도움이 돼.

계속해서 이 문제들 중 일부를 해결하기 위해 무엇을 할 수 있는지 봅시다.

크기 보고서를 생성하고 IPA를 살펴보는 과정은 앱 클립 크기를 줄이기 위해 취할 수 있는 여러 단계를 식별했기 때문에 매우 도움이 되었습니다.

먼저 몇 가지 기본 단계부터 시작한 다음, 더 발전된 기술로 넘어갑시다.

우리는 빌드 설정을 다시 확인하고, 자산 카탈로그를 사용하는 이점을 살펴보고, 속하지 않는 최종 제품으로 가는 파일을 제외하며, 크기 감소를 위해 코드와 설정과 리팩토링을 살펴볼 것입니다.

우리가 다룰 최적화는 앱과 앱 클립 모두에 적용되므로, 이 팁을 두 가지 유형의 제품에 자유롭게 적용하세요.

이제 각 주제를 더 자세히 살펴봅시다.

앱 클립 패키지의 컴파일된 코드 부분은 확실히 클립 크기에 가장 큰 기여자가 아니었다.

그것은 확실히 우리가 곧 얻을 수 있는 자산이었다.

하지만 조금이라도 도움이 돼.

기본적으로, Xcode는 가장 작고 가장 빠른 최적화 설정을 사용하여 빌드되지만, 그것이 내 프로젝트에 설정된 것인지 다시 한 번 확인해 봅시다.

전체 앱이 활성 구성표로 설정되어 있는지 확인하고 Option-클릭하여 구성표 설정을 표시하십시오.

우리의 아카이브 빌드는 출시되도록 설정되어야 하지만, 어느 시점에서 변경하고 다시 변경하는 것을 잊어버린 것 같습니다.

나는 또한 빌드 설정에서 조금 실험하고 있었고 릴리스 최적화 수준을 기본값에서 옮겼다.

작은 바이너리 크기와 빠른 런타임 실행의 최상의 조합을 사용할 수 있도록 다시 변경합시다.

대부분의 경우, 내 경우처럼, 이미지, 오디오 및 비디오와 같은 자산이 가장 많은 공간을 차지합니다.

이러한 자산이 앱 클립 크기에 미치는 영향을 줄이기 위해 취할 수 있는 가장 중요한 단계는 자산 카탈로그를 사용하는 것이며, 이는 두 가지 이유 때문입니다.

하나, 자산 카탈로그에 추가하는 미디어는 Xcode 빌드 프로세스의 일부로 자동으로 최적화됩니다.

그리고 둘째, 고객이 당신의 앱이나 클립을 다운로드할 때, 그들이 다운로드하는 제품은 장치에 적합한 자산만 포함할 만큼 충분히 작아질 것입니다.

이것은 앱 숱으로도 알려져 있으며, 우리는 확실히 그것을 활용해야 한다.

내 프로젝트에서, 나는 정말로 그 이미지들을 자산 카탈로그에 넣었어야 했다.

우리는 실제로 훨씬 더 잘할 수 있어.

두 번째 자산 카탈로그를 만들고, 앱과 앱 클립 간에 공유되는 모든 이미지를 이 카탈로그로 옮길 것입니다.

두 카탈로그를 나란히 가져오자.

우리는 아이콘과 색상을 공유 카탈로그로 옮길 것입니다.

그런 다음 우리는 재료와 스무디 이미지를 공유 카탈로그에 넣을 것입니다.

레시피 이미지는 전체 앱에서만 필요하기 때문에, 내 앱 클립의 크기에 포함되지 않도록 공유되지 않은 카탈로그에 넣을 것입니다.

내가 자산 라이브러리에 복사한 이미지들을 확실히 제거할게.

그리고 마지막으로, 나는 대상 멤버십 편집기를 사용하여 내 앱 클립에서 공유되지 않은 자산 카탈로그를 제외할 것이다.

자산 카탈로그에 대한 심층 조사를 위해, 앱의 스토리지 최적화와 앱 자산 최적화에 대한 세션을 확인하세요.

이전에, 우리는 파일 시스템에서 IPA를 검사했고, README 파일과 문서가 포함된 zip과 같이 속하지 않는 몇 가지를 보았다.

Xcode의 대상 멤버십 편집기를 사용하여 모든 빌드 제품에서 이러한 파일을 제외합시다.

수행 중인 작업에 필요한 앱 클립 대상에 코드만 포함해야 합니다.

내 앱 클립에 기여하는 모든 소스 파일에 대한 개요를 얻기 위해 빌드 단계를 살펴보는 것이 도움이 된다고 생각합니다.

만약 내가 불필요해 보이는 것을 본다면, 나는 그것을 출처 목록에서 제거하고 재건한다.

Fruta의 레시피와 보상 기능은 전체 앱에 필요하지만 앱 클립에는 필요하지 않으므로 해당 파일을 제거합시다.

컴파일러가 도와드릴 수도 있습니다.

빌드 오류가 있는 경우, 파일이 필요하거나, 제거해야 할 것이 더 있거나, 앱 클립 대상에서 조건부로 컴파일해야 하는 코드가 있을 수 있습니다.

시간이 지남에 따라, 현지화된 문자열 파일은 중복되고 사용되지 않는 문자열로 부풀릴 수 있다.

문자열 파일을 검사하고 필요하지 않은 것은 무엇이든 삭제하세요.

우리가 자산 카탈로그를 위해 했던 것과 마찬가지로, 앱 클립에 전체 앱의 현지화된 문자열을 포함하지 않도록 전용 문자열 파일을 만들 수 있습니다.

앱 클립을 제출할 준비를 하기 위해 오늘 구현할 수 있는 몇 가지 기본 최적화를 다루었습니다.

이제, 이 반복적인 과정의 일환으로, 당신이 다시 측정하고, 크기 보고서를 보고, 여전히 당신이 있어야 할 곳에 있지 않다고 가정해 봅시다.

괜찮아.

당신이 고려해야 할 몇 가지 고급 최적화 전략이 있습니다.

먼저, 외부 의존성을 평가하고 그 크기를 고려하세요.

앱 클립은 앱의 한입 크기의 버전이므로, 클립의 기능에 필요한 것만 연결해야 합니다.

내 앱 클립의 크기에 추가된 SmoothieAccountLogin 프레임워크를 기억하시나요?

대부분의 경우, 목표를 달성하는 데 도움이 될 OS에 이미 통합된 Apple 프레임워크가 있습니다.

이러한 내장 프레임워크 중 하나를 사용하면 무료이며, 앱과 앱 클립을 더 가볍고 빠르게 만들 수 있습니다. 즉, 더 빨리 다운로드하고, 더 빨리 시작하고, 고객이 당면한 작업을 더 빨리 완료할 수 있습니다.

Apple로 로그인을 사용하면 사용자가 Apple ID만으로 서비스에 쉽게 로그인할 수 있습니다.

결제의 경우, Apple Pay는 귀하, 개발자 및 고객 모두에게 빠르고 쉽습니다.

네트워크를 통한 통신의 경우, NSURLSession을 사용하세요.

3D 그래픽의 경우, RealityKit과 Metal을 활용하세요.

더 심층적인 인증 흐름을 보려면, ASWebAuthenticationSession을 확인하세요.

앱 클립의 크기를 제한 이상으로 밀어붙이는 것은 거의 항상 자산이지 코드가 아니다.

종종, 그 자산들은 이미지이다.

기본 단계에서, 나는 내장된 최적화와 앱 숱을 활용하기 위해 모든 이미지를 자산 카탈로그로 옮겼다.

때로는 그것만으로는 충분하지 않으며 이미지의 크기를 줄이기 위해 추가 조치를 취해야 합니다.

소스 이미지를 저장할 때 사용하는 형식과 옵션은 종종 크기와 품질 모두에 큰 영향을 미칠 수 있습니다.

그래서 당신은 어떻게 최선의 선택을 하나요?

일반적으로 PNG 이미지는 JPEG 이미지보다 더 많은 공간을 소비하므로, 형식이 투명성과 같은 특정 기능이 필요한 경우 PNG를 사용하세요.

또는 JPEG의 손실 압축이 용납할 수 없는 품질 손실을 초래할 때.

이 예에는 고주파 기능, 선명한 가장자리 및 정의된 하이라이트가 포함되어 있습니다.

PNG의 무손실 압축은 JPEG보다 이러한 기능을 훨씬 더 잘 보존할 것이다.

그리고 우리가 PNG를 주제로 하는 동안, 사진이 아닌 자료에 대해 PNG8을 고려하세요.

오른쪽의 이미지는 파일 크기를 크게 줄이기 위해 PNG8로 저장되었다.

이미지를 내보낼 때, 최적화가 유지되도록 나란히 비교하세요.

색 심도를 줄임으로써 많은 공간을 절약할 수 있지만 양자화 아티팩트로 고통받지 않는 특정 이미지에만 적합합니다.

사진 자료의 경우, 공간을 절약해야 할 때, JPEG를 사용하고 손실 압축에 조금 기대세요.

이미지를 저장할 때 콘텐츠 제작 도구의 기본값을 수락할 필요가 없습니다.

내 경우, 나는 눈에 띄는 품질 손실 없이 파일 크기를 크게 줄였다.

다양한 최적화에서 이미지 품질을 유지할 수 있도록 프로젝트에서 사용할 수 있는 작은 트릭을 보여드리겠습니다.

나는 일시적으로 파인애플을 더 높은 압축 비율로 저장된 망고로 교체했다.

이를 통해 실제 앱에서 빠른 A/B 비교를 수행하여 변경 사항이 품질 손실을 초래하지 않았는지 확인할 수 있습니다.

비디오의 경우, HEVC와 같은 최신 표준을 사용하여 인코딩하세요.

일반적으로, AAC 또는 MP3 코덱을 사용하여 오디오를 압축하고, 감소된 비트 전송률로 실험하세요.

꽤 자주, 매우 높은 비트 전송률은 필요하지 않으며, 낮은 비트 전송률 클립은 눈에 띄는 품질 저하를 초래하지 않을 것이다.

인터페이스 컨트롤, 로고 및 아이콘과 같은 특정 종류의 이미지의 경우 SVG 형식으로 표현하면 상당한 공간을 절약할 수 있으며, 벡터 형식이기 때문에 어떤 크기에서도 멋지게 렌더링됩니다.

SVG 형식에 대해 말하자면, 우리는 그것을 너무 좋아해서 SF 심볼을 뒷받침하기 위해 그것을 선택했고, 나는 그것을 강력히 추천한다.

선택할 수 있는 2,000개 이상의 구성 가능한 기호가 있습니다.

그것들은 텍스트 라벨과 자동으로 정렬되는 다양한 가중치와 저울로 제공되며, 동적 유형은 즉시 지원됩니다.

여기 프로젝트에서 SF 기호를 사용하기 위한 몇 가지 코드가 있습니다.

이 코드 스니펫은 유사한 텍스트 스타일이 라벨과 기호 이미지 모두에 어떻게 적용될 수 있는지 보여줍니다.

기준선 제약은 라벨과 기호 이미지를 완벽하게 정렬합니다.

자산 카탈로그에 이미지의 여러 변형을 포함하는 대신, 하나의 기본 이미지를 포함하고 런타임에 필요한 변형을 구축하십시오.

이것이 어떻게 실행되는지에 대한 환상적인 예를 보려면 Fruta 샘플을 확인하세요.

오렌지 성분의 각 프레젠테이션에 별도의 이미지를 사용하는 대신 - 하나는 이 컬렉션 보기를 위한 것이고, 다른 하나는 수직 텍스트와 컨트롤이 있는 전체 이미지 보기를 위한 것이고, 세 번째는 성분 카드 뒷면을 위한 것입니다...

이 단일 이미지는 세 가지 뚜렷한 용도를 위한 백업 자산 역할을 한다.

그 결과는 런타임에 변형을 구성함으로써 상당한 공간 절약이다.

마지막으로, 다른 모든 단계를 완료했지만 여전히 클립이 크기 제한을 초과하는 자산이 있다면, 콘텐츠 전송 네트워크에서 해당 자산을 게으르게 로드하는 것을 고려하십시오.

예를 들어, 좋은 품질이지만 해상도가 낮은 자리 표시자 자산을 앱 클립으로 배송하고 새로운 비동기 이미지 API를 사용하여 출시 후 이러한 자산을 점진적으로 교체하십시오.

자세한 내용은 SwiftUI 세션의 새로운 기능을 확인하세요.

그리고 팁: 네트워크 링크 컨디셔너를 사용하여 다양한 대역폭 시나리오에서 앱 클립을 테스트하여 고객이 당면한 작업을 완료하는 데 지연되지 않도록 하십시오.

이러한 고급 최적화로, 우리는 첫 번째 주제의 끝에 도달했습니다.

앱의 크기를 줄이기 위한 개발자 문서에서 더 자세히 알아보고 더 많은 기술을 발견할 수 있습니다.

앱 클립을 프로덕션에 출시했는데 사파리에서 웹사이트를 볼 때 예상대로 제공되지 않는다고 가정해 봅시다.

아니면 QR 코드를 스캔하고 앱 클립 카드를 보는 대신 사파리로 이동했을 수도 있습니다.

일반적으로, 이러한 문제는 몇 가지 다른 버킷에 속합니다: 경험 등록 및 관련 도메인 구성.

용어를 빠르게 재교육한 다음, 문제를 해결하기 위해 취할 수 있는 몇 가지 단계를 검토하겠습니다.

App Store Connect에서는 두 가지 유형의 경험을 추가할 수 있습니다.

모든 앱 클립에는 기본 경험이 있어야 합니다.

기본 경험을 위해, Safari의 웹 페이지에서 호출하거나 누군가가 메시지에서 웹 페이지에 대한 링크를 보낼 때 앱 클립 카드를 채우는 메타데이터를 지정합니다.

QR 스캔, NFC 및 앱 클립 코드와 같은 물리적 호출을 활용하려면 고급 경험을 추가해야 합니다.

등록은 장치로 전파되는 데 시간이 걸리므로 App Store Connect에서 변경된 사항을 즉시 사용할 수 없다는 것을 명심하십시오.

경험 등록에 대한 심층적인 시각을 보려면, App Store Connect의 새로운 기능 및 앱 클립 구성 및 연결 세션을 참조하십시오.

앱 클립을 표시하는 UI를 표시하기 전에, OS는 호출 도메인이 앱 클립과 검증 가능한 관련이 있는지 확인합니다.

즉, Safari에서 보거나 QR 코드로 인코딩된 URL은 자격과 앱 및 앱 클립과 AASA 파일을 통해 안전하게 연결되어야 한다는 것을 의미합니다.

이것이 제대로 구성되지 않으면, 당신의 클립은 표면화되지 않을 것입니다.

이 보안 연결 설정에 대한 자세한 내용은 유니버설 링크 세션의 새로운 기능 및 앱 클립 세션 구성 및 링크를 참조하십시오.

모든 것을 구성하고 사파리를 확인하고 앱 클립 카드가 이렇게 인라인으로 표시될 것으로 예상한다고 가정해 봅시다.

하지만 안타깝게도 당신은 당신의 웹 페이지를 보고 다른 것은 나타나지 않습니다.

그래서 무엇이 문제일 수 있으며, 어떤 문제 해결 단계를 취할 수 있나요?

먼저, 메타 태그의 구문을 확인하고 이 템플릿과 비슷해 보이는지 확인하세요.

노란색 자리 표시자를 각각 전체 앱의 App Store ID와 앱 클립의 번들 ID로 교체하세요.

메타 태그가 올바르게 구성되었는지 확인하기 위해 사용하는 기술을 보여드리겠습니다.

사파리에서 웹 페이지로 이동하여 웹 관리자를 여세요.

헤드 요소를 확장하고 소스를 면밀히 살펴보세요.

그런 다음 노드 속성을 확인하여 메타 태그가 올바르게 구문 분석되고 앱 클립 번들 ID가 Xcode 및 App Store Connect에 표시된 것과 정확히 동일한지 확인하십시오.

전달 또는 리디렉션이 도메인 검증을 방해하고 있나요?

Example.com은 도메인 유효성 검사 기계에 관한 한 www.example.com과 동등한 것으로 간주되지 않습니다.

여기서 기억해야 할 중요한 점은 콘텐츠를 제공하는 도메인, 즉 리디렉션 체인의 끝에 있는 도메인은 AASA 파일을 제공하고 관련 도메인의 자격에 포함되어야 한다는 것입니다.

또한 비공개 브라우징이 활성화된 경우 사파리는 전체 앱 클립 카드나 스마트 앱 배너를 표시하지 않는다는 것을 기억하십시오.

여전히 갇혀 있다면, AASA가 ASC 포털에서 검증을 통과했는지 확인하세요.

SWCutil 명령줄 도구를 사용하여 예상 위치의 웹 사이트에서 AASA 파일을 검색할 수 있습니다.

이것은 App Store Connect에서 수행하는 작업과 매우 유사합니다.

이것을 사용하여 App Store Connect가 파일을 검색하는 것을 방지하는 오류가 없는지 확인할 수 있습니다.

JSON 출력에서 applicationID 대신 지정된 bundleID와 같은 일반적인 실수를 확인하세요.

자세한 내용은 App Store Connect 세션의 새로운 기능 및 Universal Links 세션의 새로운 기능을 확인하십시오.

이제 앱 클립 코드, QR 코드 및 NFC 태그와 같은 물리적 호출을 위해, 여기에 예상되는 경험이 있습니다.

완전히 구성되지 않은 경우, 고객이 카메라에서 앱 클립 카드를 보는 대신 웹 페이지가 Safari에서 제공됩니다.

이것이 발생하는 이유는 물리적 코드에 인코딩된 URL에 대한 고급 경험이 만들어지지 않았기 때문입니다.

QR 코드 URL이 웹사이트 URL과 같고 경험이 Safari에서 완벽하게 표시되더라도, 물리적 코드를 강화하기 위해 App Store Connect에서 고급 경험을 만들어야 합니다.

우리가 사파리 호출 문제를 해결했을 때의 이 슬라이드를 기억하시나요?

웹 트래픽의 경우, 도메인 유효성 검사 전에 모든 리디렉션을 따릅니다.

물리적 코드에 대한 도메인 유효성 검사가 처리되는 방식의 미묘하지만 중요한 차이점을 알려드리고 싶습니다.

QR 코드 URL에서 고유한 도메인을 사용하고 있으며 플랫폼 전반에 걸쳐 일관성을 제공하기 위해 웹사이트에 전달했다고 가정해 봅시다.

당신은 이미 웹을 통해 직접 들어오는 고객을 위해 해당 도메인의 AASA 파일을 제공하고 있습니다.

이제, 여기에 미묘한 차이가 있다.

코드 스캔의 경우, 앱 클립의 자격에 정확한 도메인을 추가하고 이 도메인에서 AASA 파일도 제공해야 합니다.

이것의 배후에 있는 이유는 물리적 코드를 스캔하는 사용자에게 빠른 피드백을 제공하기 위한 것이다.

그리고 우리는 일반적으로 리디렉션 체인을 따르는 네트워크 요청을 수행하는 것을 피합니다.

고급 경험이나 사이트 연결에 대한 변경은 장치로 전파하는 데 시간이 걸린다.

스캔한 URL이 고급 경험으로 추가되었는지 확인했지만 여전히 앱 클립 카드가 보이지 않는다면, 개발자 설정에서 경험 캐시를 지워보세요.

다음 주제로 넘어가.

당신은 프로젝트에서 추가적인 복잡성을 수행했으며, 장점은 이제 더 현대적이고 플랫폼을 따르는 경험을 할 수 있다는 것입니다.

이 시점까지 달성하기 위해 열심히 노력한 품질 수준을 유지하면서 추가 기능을 수용하기 위해 취할 수 있는 몇 가지 단계를 보여주고 싶습니다.

기본 레스토랑 앱의 기능을 보여주는 다이어그램을 살펴봅시다.

이 예에서, 고객들은 레스토랑의 메뉴를 둘러보는 것으로 시작한다.

다음으로, 그들은 햄버거나 칵테일을 커스터마이징한 다음 체크아웃할 수 있다.

그 후, 그들은 주문 상태와 주문 픽업 옵션을 볼 수 있다.

이제 레스토랑이 두 가지 기능을 추가하여 경험을 향상시키고 싶다고 가정해 봅시다: QR 코드로 테이블에서 지불하고 당신이 사용자 정의한 햄버거를 친구에게 링크로 보내면 그들도 주문할 수 있습니다.

이 두 기능 모두 체크아웃 단계로 직접 시작하는 데 의존하기 때문에 이것은 상당한 재설계가 필요할 것이다.

요청된 기능은 앱 클립을 위한 정말 좋은 기회이지만, 현재 디자인에 넣는 것은 많은 추가적인 복잡성을 야기할 것이다.

앱을 더 유연하게 만들기 위해 어떤 조치를 취할 수 있나요?

먼저, 앱의 각 구성 요소가 독립적이고 직접 시작할 수 있는 평평한 모듈식 기능을 만드는 것이 좋습니다.

이 접근 방식은 딥 링크에 훨씬 더 적합하며, 이는 앱 클립이 어떻게 호출되고 제공되는지에 대한 기본이다.

예를 들어, URL에서 인코딩할 수 있는 메뉴 항목 목록을 제공하여 체크아웃 모듈을 직접 호출하도록 설계하십시오.

주문을 시각적 코드에 포함된 URL로 표시함으로써, 당신은 고객에게 테이블에서 수표를 지불할 수 있는 능력을 제공합니다.

음식 품목이 URL에 추가되면, 이 패러다임을 사용하여 고객이 주문한 것을 친구들과 공유하여 같은 것을 살 수 있도록 장려할 수 있습니다.

남은 오버헤드가 거의 없기 때문에, 아직 앱을 다운로드하지 않은 고객에게 주문형으로 이 기능을 제공하여 앱 클립을 채택하고 도달 범위를 늘릴 수 있습니다.

오버헤드를 최소화하면서 추가 기능을 잠금 해제하기 위해 애플리케이션 디자인에 대해 조금 다르게 생각하는 몇 가지 방법을 보여주었습니다.

이제 앱 클립을 제공하는 것과 관련된 상용구 코드를 최소화하는 방법을 살펴봅시다.

앱의 코드에서, 당신은 일반적으로 앱이 백그라운드에서 시작되거나 재개될 때 호출되는 이러한 방법으로 수명 주기 이벤트에 응답할 가능성이 높습니다.

앱 클립을 채택하면 동일한 동일한 수명 주기 방법의 또 다른 세트가 추가됩니다.

UserActivity에서 URL을 추출하고 추출된 URL을 사용하여 일부 상태를 도출하고 UI를 보여주는 앱 클립의 수명 주기 방법에 코드를 배치하고 싶은 유혹을 받을 수 있습니다.

개념은 건전하지만, 그렇게 하기 전에 앱과 앱 클립 실행을 모두 처리하는 코드가 공유되도록 리팩토링하는 것이 좋습니다.

이것은 앱 클립과 전체 앱 사이의 별도의 실행 경로에서 유사한 기능을 유지하려고 노력하는 모든 종류의 버그와 골칫거리를 제거합니다.

사용자 활동을 매개 변수로 사용하는 respondTo와 같은 방법을 만드는 것을 고려해 보세요.

이 방법을 앱의 주요 진입점으로 사용하고 모든 관련 수명 주기 방법에서 직접 호출하여 클립하세요.

이제 앱과 클립 모두에 공통적인 코드를 실행하여 오버헤드를 크게 줄입니다.

아마도 당신은 고객이 테이블에서 수표를 지불할 수 있도록 URL에서 레스토랑 메뉴 항목을 추출하여 사용자 활동에 응답할 수 있습니다.

이것은 공유되는 모든 코드이기 때문에, 한 번 변경하고 앱과 앱 클립 모두에서 혜택을 받을 수 있습니다.

품질을 유지하면서 프로젝트에 현대적인 기능을 채택하는 것에 대한 논의는 테스트를 언급하지 않고는 완전하지 않을 것입니다.

제가 당신에게 상기시키고 싶은 앱 클립과 관련된 두 가지 기술이 있습니다.

반복적인 개발을 위해, Xcode에서 빌드하고 실행할 때, _XCAppClipURL 환경 변수를 원하는 호출 URL로 설정하십시오.

클립을 실행할 때, 여기에 설정한 URL은 고객의 장치에 있는 것처럼 클립으로 전달됩니다.

프로덕션 장치와 유사한 OS에 의해 표면화된 개발 중인 클립을 보려면, 개발자 설정으로 이동하여 로컬 경험을 만드세요.

고객이 장치에서 앱 클립을 어떻게 사용할지에 대한 더 나은 느낌을 얻으려면 클립을 제출하기 전에 이것을 시도해야 합니다.

그렇지 않으면, 카메라에서 코드를 스캔하는 것과 같이 클립을 호출할 수 있는 많은 방법을 테스트할 수 있는 좋은 기회를 놓치고 있습니다.

또한 사파리의 새로운 앱 클립 카드 경험과 같이 프로덕션에서 사용할 수 있기 전에 시드 빌드의 새로운 기능을 시도할 수 있는 좋은 방법입니다.

나는 방금 앱 클립을 테스트하기 위한 지역 경험이 얼마나 멋진지에 대한 표면을 훑어보았다.

자세한 내용은 올해의 앱 클립 세션의 새로운 기능을 참조하십시오. 앱 클립 테스트에 대한 자세한 설명은 앱 클립의 출시 경험 테스트라는 제목의 개발자 문서를 참조하십시오.

마지막으로, 모든 개발자가 활용해야 하는 앱 클립과 관련된 몇 가지 기능이 있습니다.

앱 클립이 도입되었을 때, 두 개의 간소화된 권한 항목이 앱 클립에만 사용할 수 있게 되었다.

이 항목들은 일시적인 알림과 위치 확인이라고 불린다.

고객이 앱 클립 카드에서 바로 활용할 수 있도록 사전 승인을 제공할 수 있습니다.

임시 알림을 사용하면 앱 클립이 마지막으로 출시된 이후 24시간 동안 알림을 보낼 수 있으며, 위치 확인을 통해 고객이 정확한 위치를 요청하거나 알 필요 없이 예상되는 영역 내에 있는지 확인할 수 있습니다.

이것은 잘못된 주유소에서 실수로 지불하거나 잘못된 마을의 Fruta 가게에서 스무디를 주문하는 것을 방지하는 데 도움이 됩니다.

개발자로서, 당신은 Info.plist에서 이 기능을 선택합니다.

이제 앱 클립은 실제로 필요한 것보다 더 많은 것을 요구하는 알림으로 경험의 시작을 방해하지 않고 이러한 고유한 권한에 액세스할 수 있습니다.

위치 확인은 NFC 태그, 앱 클립 코드 또는 QR 코드와 같은 물리적 호출에만 사용할 수 있습니다.

고객은 현재 세션 또는 모든 요청에 대한 위치 확인을 거부할 수 있습니다.

confirmAcquired의 오류를 확인하여 이러한 상태를 적절하게 처리하고 고객에게 발생한 일과 더 유리한 조건에서 거래를 재개할 수 있는 옵션에 대한 유용한 지침을 제공하십시오.

Xcode에서 프로필과 로그인에 대한 빠른 메모.

여러분 대부분은 프로젝트 설정의 서명 및 기능 섹션에서 서명을 자동으로 관리할 수 있게 되었는데, 이는 환상적입니다.

서명을 수동으로 관리하는 경우, 최근 프로필을 얻도록 하세요.

한 가지 즉각적인 이점은 고객이 앱 클립에서 전체 앱으로 업그레이드하면 데이터가 더 빨리 마이그레이션될 수 있다는 것입니다.

이것은 우리가 끊임없이 노력하고 있는 많은 혜택 중 하나입니다.

최근 프로필을 사용하면 앱과 클립이 이러한 개선 사항을 활용하는 데 필요한 기능을 갖추고 있습니다.

당신은 이제 가볍고 빠른 앱 클립을 만드는 몇 가지 훌륭한 기술을 배웠습니다.

모든 것을 마무리할 시간이야.

나는 당신의 클립을 필요에 따라 번개처럼 빠르게 전달할 수 있을 만큼 작게 만들기 위한 기본 및 고급 기술을 다루었습니다.

앱 클립이 어디서 어떻게 호출되는지 확인하는 방법을 보여드렸다.

앱 클립과 범용 링크를 채택하기 위해 딥 링크를 위해 프로젝트를 준비하기 위한 몇 가지 모범 사례를 보여주었습니다.

그리고 나는 앱 클립을 위한 독특하고 간소화된 기능을 다루었다.

오늘 Xcode를 실행하고 이 팁 중 일부를 사용하여 앱 클립을 더 가볍고 빠르게 만들 수 있기를 바랍니다.

올해 앱 클립의 새로운 기능에 대한 제 동료 용준의 세션을 꼭 확인해 주세요.

감사합니다, 그리고 멋진 WWDC 되세요.

[쾌활한 음악].