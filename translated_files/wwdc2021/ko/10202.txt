10202

♪ ♪

저는 Ravi Kandadai Madhavan이며, 이 비디오에서는 Xcode의 정적 분석기를 사용하여 앱의 버그를 찾고 수정하는 방법을 보여줄 것입니다.

먼저, 나는 정적 분석기를 사용하여 버그를 찾고 이해하는 방법을 보여줄 것이다.

그런 다음, 코드에서 더 많은 종류의 문제를 찾는 데 도움이 될 수 있는 Xcode 13의 새로운 수표를 설명하겠습니다.

마지막으로, 개발 워크플로우와 더 잘 통합하기 위해 분석기를 사용자 정의할 수 있는 방법을 설명하겠습니다.

이제 분석기를 사용하여 버그를 찾는 방법을 봅시다.

정적 분석기는 실행하지 않고 소스 코드를 분석하여 버그를 발견할 수 있는 Xcode의 도구이므로, 앱의 테스트 및 품질 보증을 수행하기 전에도 버그를 드러낼 수 있습니다.

그것은 또한 드물고 테스트에서 다루지 않는 코드 경로에서 문제를 찾을 수 있다.

분석기는 혼합 Swift 및 Objective-C 프로젝트에서도 C/C++ 및 Objective-C 코드에서 버그를 찾습니다.

제가 개발하고 있는 앱을 사용하여 작동하는 분석기를 봅시다.

저는 태양계를 탐험할 수 있는 Swift와 Objective-C로 작성된 기존 앱을 개선하려고 노력하고 있습니다.

이것은 앱의 Xcode 프로젝트입니다.

나는 정적 분석기를 실행하여 내 코드에 문제가 있는지 확인할 것이다.

달리기는 매우 쉽다.

제품으로 이동하여 분석을 선택하거나 키보드 단축키 Command-Shift-B를 사용하세요.

Xcode의 상태 표시줄에서 실행 중인 분석기를 볼 수 있습니다.

당신의 프로젝트를 분석하는 것은 그것을 만드는 것과 매우 비슷합니다.

분석기는 버그를 찾기 위해 현재 활성화된 계획의 대상에 있는 모든 소스 파일을 스캔합니다.

상태에서 보시다시피, 분석기가 제 프로젝트에서 문제를 발견했습니다.

나는 Xcode의 이슈 네비게이터로 가서 그것에 대해 더 배울 수 있다.

내가 보여줬듯이, 프로젝트에서 분석기를 실행하는 데 필요한 것은 한 번의 클릭뿐입니다.

그리고 이 한 번의 클릭으로 보안 문제, 논리적 버그, API 오용 등과 같은 여러 종류의 버그를 찾을 수 있습니다.

분석기는 버그를 찾을 수 있을 뿐만 아니라 설명할 수도 있다.

내 앱에서 발견된 버그로 돌아가서 이해하려고 노력하자.

여기서 문제는 Objective-C 메소드 positionAtDate가 nil을 반환하지 않아야 할 때 nil을 반환한다는 것이다.

메서드의 반환 값은 메서드의 정의에서 null이 아닌 것으로 선언됩니다.

하지만 이제, 나는 이 방법이 어떻게 nil을 반환하는지 이해하고 싶다.

분석기 문제를 확장하고 버그로 이어지는 일련의 이벤트를 볼 수 있습니다.

그 사건들은 또한 그들이 일어나는 진술과 함께 편집자에 표시됩니다.

화살표는 이벤트가 어떻게 정렬되는지 보여준다.

나는 이 보고서들을 아래에서 위로 읽는 것이 더 쉽다고 생각한다.

마지막 이벤트는 반환된 값, 위치가 0이라는 것을 보여준다.

이전 이벤트는 위치를 초기화하기 위한 regularPositionAtDate 메서드가 수신기 객체가 0이기 때문에 호출되지 않기 때문이라는 것을 보여준다.

화살표를 보면, 이것은 스위치의 기본 케이스를 따라 일어난다.

보고서의 시작 부분으로 돌아가면 수신기 객체가 0으로 초기화되고 기본 케이스에 따라 그대로 유지된다는 것을 알 수 있다.

이제, 나는 스위치 내에서 구형이거나 불규칙하지 않은 물체를 다루지 않았다는 것을 이해한다.

이것을 고치기 위해, 나는 기본 케이스를 구형 케이스와 동일하게 만들 것이다.

문제가 해결되었는지 확인하기 위해 분석기를 다시 실행할 것입니다.

앱을 개발하는 동안 이 버그가 감지되어 상당히 안심이 됩니다.

이것은 null이 아닌 값을 반환하는 것으로 주석이 달린 Objective-C 메서드에서 nil을 반환하면 메서드가 Swift에서 호출될 때 예상치 못한 런타임 동작이 발생할 수 있기 때문입니다.

고맙게도, 정적 분석기를 실행하면 내 앱 사용자에게 영향을 미치기 전에 이 버그가 드러났다.

Xcode 13에서 우리는 분석기를 훨씬 더 좋게 만들었고, 당신을 위한 새로운 수표를 가지고 있습니다.

분석기는 이제 코드에서 더 많은 논리 버그를 잡을 수 있습니다.

불필요한 분기 조건과 같은 무한 루프와 중복 코드를 감지할 수 있습니다.

그것은 주장에서 부작용을 보고할 수 있으며, C++ 코드에서는 이동 및 전진 연산자 사용에서 오류를 포착할 수 있다.

이 새로운 수표의 일부는 애플의 클랑 컴파일러에 대한 오픈 소스 기여이다.

이 새로운 수표가 잡을 수 있는 버그의 몇 가지 예를 봅시다.

일반적으로, 코드에 대한 기대치를 검증하기 위해 어설션을 사용하는 것이 좋습니다.

그러나, 당신은 주장이 변수나 메모리에 쓰는 것과 같은 부작용이 없는지 확인해야 합니다.

예를 들어, 여기에 표시된 코드 스니펫은 천체 배열을 가로지르고 달과 관련된 것들의 수를 계산합니다.

달이 있는 물체의 수가 행성의 수보다 작거나 같은지 확인하는 NSAssert가 있다.

하지만 그 주장은 달로 물체를 추적하는 카운터를 증가시키는 부작용이 있다.

이와 같은 업데이트는 릴리스 빌드 구성에서 손실될 수 있으며, 코드가 더 빨리 실행되도록 asserts를 비활성화할 수 있습니다.

따라서 이 코드는 릴리스 빌드에서 카운터를 전혀 증가시키지 않을 수 있습니다.

디버그 빌드에 나타나지 않기 때문에 개발 중에 이와 같은 버그를 놓치기 쉽습니다.

Xcode 13을 시작하면 분석기는 코드에서 이러한 문제를 찾아 보고할 수 있습니다.

이 검사는 NSAsserts뿐만 아니라 C와 C++의 주장에도 작동합니다.

이 버그들은 고치기 쉽고, 여기에 표시된 것처럼 부작용을 주장 외부로 옮기기만 하면 됩니다.

무한 루프는 또 다른 흔한 버그이다.

당신은 복잡한 논리를 가진 루프가 있을 때 그것이 일어나는 것을 보았을 것입니다.

예를 들어, 여기에 표시된 중첩 루프는 2차원 그리드를 값으로 채우려고 한다.

실제 루프 카운터인 열 대신 내부 루프에 의해 변수 값이 증가하는 버그를 숨깁니다.

분석기는 이제 그러한 실수를 감지하고 당신에게 설명할 수 있습니다.

일단 발견하면, 이 버그는 고치기가 매우 쉽다.

값을 열로 바꾸세요.

이 수표들은 단순한 실수를 발견하지만, 우리는 그것들과 함께 진짜 버그를 발견했다.

이제 당신도 그것들을 사용할 수 있으며, 앱을 개발할 때 버그를 찾아 수정할 수 있습니다.

Xcode는 개발 워크플로우에 맞게 분석기를 미세 조정하기 위한 많은 사용자 지정을 제공합니다.

프로젝트의 빌드 설정에서 프로젝트의 모든 빌드와 함께 분석기를 실행할 수 있습니다.

관련 설정을 빠르게 좁히려면, 검색 기능을 사용하세요.

예를 들어, "분석"을 검색 키워드로 사용하면 분석기와 관련된 옵션만 볼 수 있습니다.

'빌드' 중에 분석을 활성화하려면, 빌드 설정을 켜기만 하면 됩니다.

증분 빌드와 마찬가지로, 분석은 수정된 파일에서만 실행됩니다.

이것은 코드가 변경된 후 분석기를 빠르고 쉽게 실행할 수 있게 해준다.

분석기는 두 가지 분석 모드를 제공한다: 얕은 것과 깊은 것.

얕은 모드는 더 빠르지만, 여러 기능에 걸친 버그를 탐색하는 것을 피한다.

빌드 및 분석 시간에 민감한 프로젝트에서 이 모드를 사용하세요.

앞서 언급했듯이, 분석기는 다양한 종류의 버그를 찾기 위한 검사를 가지고 있으며, 그 중 일부는 옵트인이다.

빌드 설정에서 선택적으로 활성화하거나 비활성화하여 프로젝트에 맞는 검사를 미세 조정할 수 있습니다.

예를 들어, 프로젝트에 보안에 중요한 코드가 있는 경우, 보안 문제에 대한 검사를 활성화하십시오.

반면에, 일부 문제가 코드와 관련이 없다는 것을 알게 되면, 덜 유용한 검사를 개별적으로 비활성화하고 다른 검사의 혜택을 받을 수 있습니다.

전체 프로젝트 대신 단일 파일을 분석할 수도 있습니다.

제품 > 작업 수행 메뉴에서 분석할 파일을 선택하세요.

이것을 사용하여 프로젝트를 구축할 필요 없이 변경 사항을 빠르게 확인하세요.

이것은 헤더 파일을 수정할 때 특히 유용합니다.

그것은 그것을 가져오는 모든 파일을 재분석하는 것을 건너뛸 것이다.

Xcode의 정적 분석기는 개발 초기에 코드의 버그를 드러낼 수 있습니다.

버튼 클릭 한 번으로 실행하고 많은 종류의 버그를 찾으세요.

그리고 작업 흐름에 맞게 사용자 정의하는 것을 잊지 마세요.

Xcode 13에서 우리는 분석기를 더욱 개선하고 논리적 버그를 찾기 위한 많은 새로운 검사를 추가했습니다.

분석기를 사용하고 사용자에게 도달하기 전에 앱의 버그를 수정하세요.

고마워, 그리고 남은 WWDC를 즐겨!

[쾌활한 음악].