10208

안녕하세요, WWDC에 오신 것을 환영합니다.

저는 XCTest 팀의 엔지니어인 제레미 골드만입니다.

이 세션에서, 우리는 Xcode 13의 UI 테스트에서 장치와 상호 작용하는 몇 가지 흥미로운 새로운 방법을 탐구할 것입니다.

특히, 우리는 iPadOS 포인터, watchOS 디지털 크라운, macOS 트랙패드의 세 가지 플랫폼에서 세 가지 새로운 상호 작용에 초점을 맞출 것입니다.

iPadOS 포인터부터 시작합시다.

iPadOS 13.4에서 Apple은 마우스와 트랙패드 지원을 도입하여 사용자에게 Magic Keyboard와 같은 액세서리를 사용하여 iPad와 상호 작용할 수 있는 새로운 방법을 제공했습니다.

많은 개발자들이 사용자 지정 호버 애니메이션과 같은 포인터별 행동과 상호 작용을 iPad 앱에 추가하여 이를 최대한 활용했습니다.

Xcode 13에서는 UI 테스트에서 iPadOS 포인터를 제어하기 위한 강력한 새로운 API를 제공하고 있습니다.

이 API를 사용하면 iPad 앱에서 여러 유형의 포인터 상호 작용에 대한 강력한 자동 테스트를 만들 수 있으며 iPadOS 15 이상을 실행하는 장치에서 사용할 수 있습니다.

이 새로운 API를 더 자세히 살펴봅시다.

먼저, 장치가 포인터 상호 작용을 지원하는지 여부를 나타내기 위해 XCUIDevice에 새로운 속성을 추가하고 있습니다.

다음으로, 우리는 호버링, 여러 유형의 클릭 및 두 손가락 스크롤과 같은 다양한 포인터 상호 작용을 수행하기 위해 XCUIElement에 새로운 방법을 추가하고 있습니다.

우리는 또한 고급 클릭 앤 드래그 사용 사례와 하나 이상의 수정자 키를 누름으로 코드 블록을 실행하는 클래스 방법을 추가하고 있습니다.

추가 정밀도가 필요한 경우, 이러한 방법은 XCUICoordinate에서도 사용할 수 있습니다.

iOS 앱에서 포인터 상호 작용을 위한 새로운 UI 테스트를 만들어 이러한 새로운 API가 실제로 어떻게 작동하는지 살펴봅시다.

이 데모에서, 나는 처음에 출시 시 숨겨진 사이드바가 있는 Fruta 앱을 사용할 것이다.

나는 최근에 수평 두 손가락 트랙패드 스와이프가 사이드바를 여는 iPad에 포인터별 기능을 추가했다.

그것을 위해 UI 테스트를 추가합시다.

여기 빈 UI 테스트 수업이 있는데, 여기서 새로운 UI 테스트를 추가할 것입니다.

이 시험이 무엇을 하고 있는지 빨리 살펴보자.

그것은 앱을 실행한 다음 사이드바가 처음에 실행에 존재하지 않는다고 주장하는 것으로 시작합니다.

그런 다음 수평 두 손가락 트랙패드 스와이프를 수행하고 사이드바가 현재 존재한다고 주장한다.

제가 지적하고 싶은 또 다른 한 가지는 제가 테스트 방법에 추가한 이 가용성 속성입니다.

이것은 특정 iOS 버전에서만 사용할 수 있는 방법을 사용할 때마다 필요합니다.

이 경우, 포인터 상호 작용 API는 iOS 15.0에 도입되었다.

iPad 시뮬레이터에서 테스트를 실행해 봅시다.

화면 왼쪽 하단 모서리 근처의 다크 서클인 커서 표시기를 따라갈 수 있습니다.

좋아! 우리의 테스트는 아이패드에서 작동하는 것 같다.

그러나, 이 앱은 포인터 상호 작용을 지원하지 않는 iPhone에서도 사용할 수 있습니다.

iPhone 시뮬레이터에서 이 테스트를 실행해 봅시다.

그래서 "이 장치에서 포인터 이벤트는 지원되지 않습니다."라는 오류 메시지와 함께 테스트가 실패한 것으로 보입니다.

이 문제를 해결하려면, 포인터 상호 작용을 지원하는 장치에서만 실행되도록 테스트를 수정해야 합니다.

XCUIDevice의 새로운 supportsPointerInteraction 속성과 함께 XCTSkipUn을 사용하여 실패하는 대신 지원되지 않는 장치에서 테스트를 건너뛰지 않고 이 작업을 수행할 수 있습니다.

이제 iPhone 시뮬레이터에서 테스트를 다시 실행해 봅시다.

완벽해. 그래서 이제 이 테스트는 포인터 상호 작용을 지원하지 않는 장치에서 건너뛸 것이다.

다른 플랫폼의 장치, 더 구체적으로는 watchOS와 Digital Crown과 상호 작용하는 몇 가지 새로운 방법에 대해 이야기해 봅시다.

이미 아시다시피, Xcode 12.5는 watchOS 앱에 대한 UI 테스트 지원을 도입했습니다.

이 지원에는 크라운 클릭과 같은 하드웨어 버튼 이벤트뿐만 아니라 터치 이벤트를 합성하기 위해 watchOS에서 새로 사용할 수 있는 방법이 포함됩니다.

Xcode 13에서 우리는 디지털 크라운 회전을 합성하는 새로운 방법으로 이 지원을 확장하고 있습니다.

이 방법은 회전 횟수라는 하나의 매개 변수만 필요하며, 크라운을 회전해야 하는 속도를 지정하는 선택적 속도 매개 변수가 있습니다.

이 속도 매개 변수에는 XCUIGestureVelocity 유형이 있습니다. 즉, 느리고, 빠르고, 기본값과 같은 사전 설정 값 중 하나를 사용하거나 초당 회전으로 사용자 지정 십진수 값을 지정할 수 있습니다.

이 새로운 방법이 실제로 어떻게 작동하는지 봅시다.

외부의 현재 온도를 표시하는 watchOS용 간단한 날씨 앱이 있다고 가정해 봅시다.

이 앱에는 사용자가 디지털 크라운을 앞으로 스크롤하여 향후 예상 온도를 보거나 뒤로 스크롤하여 과거 시간에 기록된 온도를 볼 수 있는 기능이 있습니다.

이 크라운 회전 기능이 예상대로 작동하는지 확인하는 기본 UI 테스트를 살펴봅시다.

테스트는 앱을 실행한 다음 예측 시간 라벨이 처음에 현재 온도를 말한다고 주장하는 것으로 시작됩니다.

그런 다음, 우리는 디지털 크라운을 한 번 완전히 앞으로 회전시키고, 라벨이 "지금부터 한 시간 후"라고 업데이트되었다고 주장합니다.

그 후, 우리는 크라운을 두 번 완전히 뒤로 회전시키고, 테스트는 라벨이 "한 시간 전에"라고 업데이트되었다고 주장함으로써 끝납니다.

마지막으로, macOS 트랙패드에 대해 이야기해 봅시다.

더 구체적으로, 스크롤에 집중합시다.

스크롤은 두 가지 범주로 나눌 수 있다: 이산과 연속.

이산 스크롤은 정확한 증분 움직임을 가지고 있다.

실제 마우스에서 스크롤 휠을 돌리는 것에 대해 생각해 보세요.

화면상의 콘텐츠는 스크롤 휠의 각 틱에 대해 균일한 단위로 움직이며, 움직임은 비관성입니다. 즉, 스크롤 휠의 회전을 중지하면 즉시 움직임을 멈춥니다.

반면에, 연속적이거나 단계적인 스크롤은 유동적이고 역동적인 움직임을 가지고 있다.

트랙패드에서 두 손가락으로 스와이프하는 사진.

화면의 콘텐츠는 스와이프하는 동안 부드럽게 스크롤되며, 움직임은 관성입니다. 즉, 점차 멈출 때까지 손가락을 들어 올린 후에도 계속 움직입니다.

XCTest는 현재 macOS에서 UI 테스트에서 개별 픽셀 정밀 스크롤을 수행할 수 있는 스크롤 방법을 제공합니다.

이 방법은 스크롤할 픽셀의 정확한 수평 및 수직 거리를 지정하기 위해 두 개의 매개 변수가 필요합니다.

Xcode 13에서는 macOS에서 연속 또는 트랙패드와 같은 스크롤을 합성하는 새로운 방법을 도입하고 있습니다.

이 방법들은 스크롤하려는 속도를 지정하기 위해 선택적 속도 매개 변수를 허용합니다.

이 속도 매개 변수에는 XCUIGestureVelocity 유형이 있습니다. 즉, 이전에 탐구한 rotateDigitalCrown 방법과 마찬가지로 사전 설정을 사용하거나 초당 픽셀 단위로 사용자 지정 십진수 값을 지정할 수 있습니다.

Xcode 13은 여러 플랫폼에 걸쳐 API를 도입하여 새로운 입력 방법을 자동화하고 보다 전문화된 사용 사례를 지원합니다.

이 새로운 기능을 사용하여 iPad 앱에서 포인터별 상호 작용을 위한 UI 테스트를 만들고, watchOS UI 테스트에서 디지털 크라운 회전을 자동화하고, 새로운 스와이프 방법으로 macOS에서 지속적인 트랙패드와 같은 스크롤을 수행하십시오.

더 배우고 싶다면, 이 관련 세션을 꼭 확인하세요.

WWDC의 나머지 부분을 보고 즐겨 주셔서 감사합니다.

[음악].