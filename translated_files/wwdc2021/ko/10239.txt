10239

♪ 베이스 음악 연주 ♪

♪

스튜어트 체셔: "앱의 네트워크 지연 감소"에 오신 것을 환영합니다.

제 이름은 스튜어트 체셔입니다.

오늘 네트워크 앱을 느리게 만드는 데 기여하는 요인에 대해 이야기한 다음 동료 Vidhi Goel에게 전달하여 네트워크 앱을 더 반응적으로 만드는 데 사용할 수 있는 기술과 API에 대해 알려 드리겠습니다.

iOS의 WWDC 베타에서 이미 보았을 수도 있는 것에 대해 이야기하는 것으로 시작합시다.

개발자 설정을 보면, 네트워킹 섹션에서 반응성이라는 새로운 항목을 볼 수 있습니다.

업로드 처리량, 다운로드 처리량 및 유휴 핑 시간은 모두 흥미롭지만, 네트워크 앱의 응답성에 영향을 미치는 주요 요소는 유휴 조건이 아닌 작업 조건에서 네트워크의 응답성입니다.

일반적인 인터넷 속도 테스트 유휴 핑 시간 측정은 사용하지 않을 때 인터넷 연결이 얼마나 잘 작동하는지 알려줍니다.

중요한 것은 당신이 그것을 사용할 때 인터넷 연결이 얼마나 잘 작동하는지입니다.

테스트를 탭하세요.

그것은 네트워크 트래픽을 생성할 것이라고 경고하고, 몇 초 동안 네트워크를 측정한 다음, 작업 조건에서 네트워크가 얼마나 잘 작동하는지 알려줄 것입니다.

이 도구는 밀리초 대신 분당 왕복 또는 RPM으로 네트워크 응답성을 보고합니다.

우리는 밀리초가 많은 사람들에게 상당히 추상적인 개념이기 때문에 이 새로운 RPM 메트릭을 만들었습니다.

사람들은 또한 더 높은 것이 더 나은 지표에 더 익숙하다.

RPM 메트릭은 자동차 엔진의 RPM과 마찬가지로 수백 RPM에서 수천 RPM 범위의 숫자를 생성합니다.

macOS에는 NetworkQuality라고 불리는 이 테스트 도구의 명령줄 버전도 있습니다.

당신은 당신의 집이나 직장 네트워크가 훌륭한 핑 시간을 가지고 있다고 생각할 수도 있지만, 그것은 유휴 상태일 때입니다.

iPhone 또는 Mac에서 이 네트워크 품질 테스트를 직접 실행하면 네트워크가 사용될 때 응답성이 훨씬 더 나빠질 수 있습니다.

그리고 내 말은 훨씬 더 나쁘다는 거야.

당신의 네트워크는 20밀리초의 유휴 왕복 시간을 가질 수 있으며, 이는 꽤 좋게 들리지만, 작업 조건에서는 왕복 시간이 600밀리초 이상까지 올라간다는 것을 알 수 있습니다.

그건 30배 더 나빠.

작업 조건에서의 네트워크 응답성은 앱의 사용자 경험에 중요합니다.

우리 모두는 항상 이 문제를 보지만, 특히 오디오와 비디오가 멈추고, 화상 회의 중에 탈락한다.

높은 네트워크 지연은 모든 앱에 해를 끼치지만, 우리는 그것에 익숙해져서 화상 회의에 영향을 미칠 때 더 많이 알아차립니다.

화상 회의에 문제가 있을 때, 우리는 인터넷 연결을 업그레이드하여 해결할 것이라고 생각합니다.

사람들은 초당 몇 메가비트에서 기가비트 이상으로 갔지만, 문제는 여전히 발생한다.

초당 몇 메가비트는 화상 회의에 충분해야 하는데, 왜 우리는 여전히 이러한 문제를 가지고 있나요?

네트워크의 버퍼가 지나치게 클 때, 채워질 때, 처리량을 개선하지는 않지만, 지연을 추가한다.

우리는 보통 패킷이 네트워크를 통해 빠르게 흐르는 인터넷이 이렇게 작동한다고 생각한다.

하지만 우리가 구름 내부를 들여다보면, 우리는 그것이 실제로 이렇게 더 잘 작동한다는 것을 알게 될 것이다.

네트워크에서 나오는 패킷은 당신이 본 패킷이 아닙니다.

패킷은 네트워크의 지나치게 큰 버퍼에 앉아 많은 시간을 보낸다.

지나치게 큰 버퍼의 이 현상은 버퍼블로트라고 불리며, 일상적인 네트워크 사용에 미치는 영향에도 불구하고 지금까지 널리 측정되지 않았다.

좋은 소식은 버퍼블로트를 제거하는 CoDel(Controlled Delay queueing 알고리즘)과 같은 최신 대기열 관리 알고리즘이 있다는 것이다.

네트워크가 대기열을 짧게 유지하면, 패킷이 네트워크에서 기다리는 시간이 극적으로 줄어든다.

높은 처리량과 낮은 지연을 동시에 얻을 수 있다.

그건 둘 중 하나/또는 선택이 아니야. 그건 제로섬 게임이 아니야.

우리는 더 스마트한 대기열 관리 알고리즘을 배포하고 작업 조건에서 네트워크 응답성을 개선하기 위해 업계와 협력하고 있습니다.

하지만 현재로서는, 훌륭한 사용자 경험을 제공하고 싶다면, 앱이 오늘날과 같이 인터넷에 대처하도록 하고 싶을 것입니다.

Bufferbloat는 애플리케이션이 경험하게 될 네트워크 지연의 큰 구성 요소이지만, 지연의 유일한 원인은 아닙니다.

소프트웨어와 하드웨어 처리 시간이 있다.

CPU가 점점 더 빨라짐에 따라, 이 처리 시간은 계속 줄어든다.

실제 데이터 전송 시간이 있습니다.

데이터 속도가 초당 킬로비트에서 메가비트에서 기가비트로 증가함에 따라, 전송 시간은 계속 줄어들고 있다.

그런 다음 네트워크의 버퍼링으로 인한 시간 지연이 있습니다.

내가 말했듯이, 우리는 이러한 지연을 줄이기 위해 업계와 협력하고 있다.

하지만 항상 빛속 신호 전파 지연이 있을 것이다.

1990년대에, 미국 전역의 스탠포드-MIT 핑 시간, 왕복, 해안-해안은 이미 100밀리초 미만이었다.

그것은 이미 조명 속도 제한에 꽤 가깝기 때문에, 훨씬 나아지지 않을 것이다.

우리는 다른 세 가지 지연을 줄이기 위해 노력하고 있지만, 조명 속도 지연은 절대 사라지지 않을 것이므로, 이것이 네트워크 왕복 시간을 고려하여 앱을 설계하는 것이 중요한 이유입니다.

우리가 네트워크 왕복 시간을 고려하는 것에 대해 이야기할 때, 우리는 어떤 종류의 앱에 대해 이야기하고 있나요?

화상 회의가 높은 네트워크 지연으로 인해 심각한 영향을 받는다는 것을 모두가 알고 있다.

모두가 온라인 게임이 높은 네트워크 지연으로 심각한 영향을 받는다는 것을 알고 있다.

하지만 이것은 네트워크를 사용하는 모든 앱에 영향을 미친다.

나는 일기예보, 주식 시세, 운전 방향을 얻는 것에 대해 이야기하고 있어.

이것은 웹 브라우징에 영향을 미친다.

그것은 스트리밍 비디오를 보는 동안 건너뛰는 것에 영향을 미친다.

앱이 네트워크를 기다리는 동안 얼마나 많은 앱에 애니메이션 회전 지연 표시기가 포함되어 있는지 생각해 보세요.

아마 네 앱일 거야.

우리는 사용자가 앱이 중단되었다고 생각하지 않도록 "기다려주세요" 표시기를 보여줍니다.

사용자가 느린 네트워크를 기다리는 동안 볼 수 있는 무언가를 제공하는 데 많은 노력을 기울인 것은 좋지만, 우리는 또한 그들이 기다리는 시간을 줄이는 데 동등한 노력을 기울여야 합니다.

네트워크에서 데이터를 기다리는 동안 지연 표시기를 표시하는 앱이 있다면, 대기 시간을 줄이는 데 사용할 수 있는 기술이 있습니다.

앱이 네트워크 데이터를 기다리는 시간은 한 번의 네트워크 왕복에 걸리는 시간과 앱에 필요한 네트워크 왕복 횟수의 함수입니다.

앱 개발자로서, 기본 네트워크 왕복 시간을 개선하기 위해 할 수 있는 일은 많지 않지만, 앱에 필요한 왕복 횟수를 제어할 수 있습니다.

제 동료인 Vidhi Goel을 소개하여 어떻게 할 수 있는지 알려드리겠습니다.

비디 고엘: 고마워, 스튜어트.

안녕하세요, 저는 Vidhi입니다. 오늘은 앱의 네트워크 지연을 줄이기 위해 개발자로서 할 수 있는 일에 대해 이야기하고 싶습니다.

앱 반응성은 네트워크 왕복 횟수에 반비례한다.

최신 네트워킹 프로토콜을 채택하여 이러한 네트워크 왕복을 줄이고 앱을 매우 빠르게 만들 수 있는 방법을 보여드리겠습니다.

앱 속도를 높이려면 HTTP/3 및 QUIC, TCP Fast Open, TLS 1.3 및 Multipath TCP와 같은 최신 네트워킹 프로토콜을 채택하십시오.

이러한 기술을 통해, 당신의 앱은 잠재적으로 사용자에게 데이터를 전달하는 데 있어 여러 왕복 감소를 달성할 수 있습니다.

이러한 모든 최신 프로토콜에는 서버 측 지원이 필요하므로, 공급자에게 준비 상태를 확인하십시오.

이러한 모든 기술을 iOS와 macOS에서 사용할 수 있다는 것을 알려드리게 되어 기쁩니다.

이 기술들 각각을 살펴봅시다.

먼저, iOS 15와 macOS Monterey에서 기본적으로 활성화된 HTTP/3과 QUIC가 있습니다.

QUIC는 TCP와 TLS보다 훨씬 빠르게 연결을 설정할 수 있는 전송 프로토콜이다.

QUIC는 헤드 오브 라인 차단을 줄임으로써 사용자에게 데이터를 전달하는 지연을 크게 줄일 수 있습니다.

그리고 여기 가장 좋은 부분이 있습니다: 이미 URLSession을 사용하고 있다면, 모두 준비되었습니다.

네트워크 프레임워크 API를 사용하여 자체 애플리케이션 계층을 제공하고 QUIC를 활용하고 싶다면, QUIC 매개 변수로 NWConnection을 만들고 TLS 애플리케이션 계층 프로토콜 또는 ALPN을 설정하기만 하면 됩니다.

앱에서 이러한 기술을 사용하는 방법에 대해 자세히 알아보려면 "HTTP/3 및 QUIC로 네트워킹 가속화" 세션을 확인하세요.

QUIC는 많은 시나리오에서 유용하다.

그러나, TCP는 여전히 일부 애플리케이션에 대한 올바른 선택일 수 있다.

TCP를 사용할 때, TCP 핸드셰이크와 함께 앱 데이터를 보내 전체 왕복을 제거할 수 있습니다.

TCP Fast Open은 네트워크 프레임워크와 소켓에서 지원됩니다.

NWConnections와 함께 사용하려면 두 가지 옵션이 있습니다. 첫 번째 옵션은 연결에서 Fast Open을 허용하는 것이며, 이 경우 앱은 핸드셰이크와 함께 보낼 초기 데이터를 제공합니다.

이를 활성화하려면, allowFastOpen 매개 변수를 true로 설정하고 연결을 만드세요.

그리고 나서, 시작에 전화하기 전에, 당신은 초기 데이터와 함께 보내기로 전화할 것입니다.

TCP Fast Open을 사용할 때, 핸드셰이크로 idempotent 요청만 보내도록 주의해야 합니다.

Idempotent는 기본적으로 데이터가 네트워크를 통해 재생되는 것이 안전하다는 것을 의미합니다.

앱이 자체 초기 데이터를 보낼 필요가 없는 TCP Fast Open을 사용하는 또 다른 방법이 있습니다.

앱이 TCP를 통해 TLS를 사용하는 경우, TLS 핸드셰이크 메시지를 초기 데이터로 보내도록 선택할 수 있습니다.

이것을 활성화하려면, TCP별 옵션으로 이동하여 enableFastOpen을 true로 설정하세요.

TCP Fast Open을 사용하는 권장 방법은 네트워크 프레임워크 API를 사용하는 것이지만, 앱이 소켓을 통해 구축된 경우, 각 플래그가 있는 connectx API를 호출하여 핸드셰이크로 idempotent 데이터를 보낼 것을 지정합니다.

나는 idempotent를 몇 번 언급했다.

그것이 무엇을 의미하는지 그리고 악수로 idempotent 요청만 보내는 것이 왜 중요한지 설명하겠습니다.

Idempotent와 재생에 안전한 작업은 한 번 이상 수행될 경우 추가 효과가 없는 작업이다.

예를 들어, 사용자가 developer.apple.com 웹 페이지로 이동하면, 이 웹 페이지에 대한 HTTP GET 요청이 TCP 핸드셰이크로 전송됩니다.

이 요청에 대한 승인이 지연되거나 네트워크에서 삭제된 경우, 장치는 다른 서버로 라우팅될 수 있는 HTTP GET 요청을 다시 보낼 것입니다.

그리고 이번에는 HTTP 응답과 함께 승인이 도착합니다.

HTTP GET 요청은 네트워크를 통해 재전송될 때 추가 효과가 없으며, idempotent 요청으로 간주됩니다.

이제, 사용자가 새 iPhone 12를 사려고 한다고 가정해 봅시다.

이 작업을 위해 전송된 HTTP 요청은 idempotent 요청이 아닙니다.

데이터가 네트워크를 통해 재생될 때마다 요청이 다른 서버로 가면 여러 거래가 발생할 수 있습니다.

그것을 염두에 두고, TLS 1.3에 대해 이야기해 봅시다.

TLS 1.3은 TLS 1.2에 비해 핸드셰이크에서 전체 왕복을 제거합니다.

그것은 또한 더 강력한 보안을 제공한다.

URLSession과 NWConnection을 위해 iOS 13.4부터 기본적으로 활성화되어 있습니다.

TLS 1.3 프로토콜은 초기 데이터 지원을 정의하며, TLS 핸드셰이크 메시지와 함께 idempotent 요청을 보내 또 다른 왕복을 절약할 수 있습니다.

기어를 바꾸고 네트워크 지연을 줄이는 데 약간 다르게 작동하는 다중 경로 TCP를 살펴봅시다.

다중 경로 TCP는 장치가 한 네트워크에서 다른 네트워크로 전환할 때 단일 TCP 연결을 계속할 수 있게 해준다.

다중 경로 TCP의 낮은 대기 시간 기능을 얻으려면, 대화형 모드 API를 사용하세요.

새로운 연결을 설정하는 데 필요한 모든 왕복 여행을 절약하고, 시스템은 데이터 패킷에 대한 더 빠른 네트워크 경로를 자동으로 선택합니다.

클라이언트에서 선택하려면, multipathServiceType 속성을 URLSession 구성 또는 NWParameters에서 대화형으로 설정하십시오.

이러한 현대 기술로 얼마나 많은 왕복 여행을 절약할 수 있는지에 대한 아이디어를 제공하기 위해, 기준점부터 시작합시다.

당신의 앱이 현재 TCP를 통해 TLS 1.2를 실행하고 있다고 가정해 봅시다.

이 경우 사용자에게 첫 번째 바이트를 받으려면 네 번의 왕복이 필요할 것입니다.

서버가 TLS 1.2에서 TLS 1.3으로 전환하면, 연결은 전체 왕복을 제거합니다.

연결에서 TCP Fast Open을 활성화하면, 또 다른 왕복 여행을 절약할 수 있습니다.

iOS 15에서, QUIC를 통한 HTTP/3은 두 번의 왕복으로 줄어든다.

QUIC 프로토콜은 또한 한 번의 왕복으로 더 줄일 수 있는 초기 데이터 지원을 정의한다.

애플의 측정에 따르면, 사용자는 때때로 600밀리초까지 급증하는 왕복 시간을 보는 것이 일반적이다.

그것이 당신의 앱에 무엇을 의미하는지 봅시다.

600밀리초의 네 번의 왕복 여행은 사용자가 데이터가 도착할 때까지 거의 2초 반을 기다리고 있다는 것을 의미합니다.

그것은 네트워크 스피너를 기다리고 응시하는 엄청난 시간이다.

최신 네트워킹 프로토콜을 채택함으로써, 그 시간을 첫 번째 바이트로 2.4초에서 약 0.5초로 줄일 수 있습니다.

사용자는 데이터가 1초 반 일찍 도착할 때 그 차이를 확실히 알아차릴 것이다.

훌륭한 네트워크 성능을 원하는 모든 개발자는 왕복 횟수에 주의를 기울여야 한다.

여기가 큰 승리가 있는 곳이다.

제가 이야기한 모든 기술은 실제 네트워크 조건에서 앱의 네트워크 지연을 줄이는 데 도움이 됩니다.

5G, LTE 또는 고속 Wi-Fi 네트워크에서 앱을 테스트하는 경우, 앱 반응성이 괜찮아 보일 수 있습니다.

하지만 사용자들이 항상 최상의 네트워크 조건에서 앱을 사용하는 것은 아닙니다.

현실적인 네트워크를 시뮬레이션하기 위해, 개발자 설정 메뉴에서 iOS용 네트워크 링크 컨디셔너 도구를 사용할 수 있습니다.

macOS의 경우, Apple Developer 웹사이트에서 다운로드할 수 있습니다.

이 도구는 사용자가 일상 생활에서 경험할 수 있는 다양한 네트워크 조건에서 앱을 테스트할 수 있는 안정적이고 반복 가능한 방법입니다.

기억한다면, 스튜어트는 이전에 네트워크 왕복 시간을 줄이는 것에 대해 많은 것을 할 수 없다고 언급했다.

음, 그건 완전히 사실이 아니야.

앱 트래픽에 대해 시스템에 올바르게 알릴 때 네트워크 왕복 시간을 줄이는 방법을 설명하겠습니다.

대부분의 앱에는 보내거나 받는 트래픽이 혼합되어 있다.

많은 앱을 실행할 때 사용자의 장치에서 교환되는 많은 데이터가 있습니다.

가정이나 사무실 Wi-Fi와 같은 실제 네트워크에서는 많은 장치가 동일한 네트워크를 공유합니다.

이 장치들은 일련의 앱을 사용하는 동안 상당한 양의 데이터를 동시에 보내고 받는다.

이 공유 네트워크에서 긴 대기열을 만드는 것을 피하려면, 낮은 네트워크 지연을 유지하기 위해 시스템이 트래픽을 효율적으로 관리할 수 있도록 앱 데이터를 적절하게 분류하는 것이 중요합니다.

그리고 시스템이 낮은 네트워크 지연을 유지하도록 허용하면 앱의 포그라운드 트래픽이 더 빨라지고 따라서 사용자에게 가장 중요한 데이터가 빠르게 전달됩니다.

예를 들어 이것을 설명하겠습니다.

많은 앱이 나중에 사용할 수 있도록 그래픽, 오디오 파일 등과 같은 콘텐츠를 미리 가져옵니다.

앱이 상당한 양의 데이터를 프리페치할 때, 이것이 네트워크의 모습일 수 있다.

병목 현상은 꽉 찰 수 있다.

이 시점에서 사용자가 프로필 페이지를 보는 것과 같은 네트워크 활동을 시작하면 이 요청에 대한 응답은 네트워크 대기열 끝에 대기할 것이며, 프로필이 표시되기까지 몇 초가 걸릴 수 있습니다.

이것은 좋은 사용자 경험이 아닐 것이다.

이제, 이러한 비사용자가 시작한 프리페치 작업을 배경으로 표시할 때 네트워크에 어떤 일이 일어나는지 살펴봅시다.

이러한 비사용자 시작 전송을 백그라운드로 표시하면 네트워크 대기열의 크기가 크게 줄어들어 다른 전경 데이터에 사용할 수 있습니다.

따라서, 모든 전경 데이터, 즉 녹색 패킷은 빠르고 즐거운 경험을 위해 즉시 전달될 것이다.

iOS 15와 macOS Monterey에서는 백그라운드 서비스 유형이 극적으로 개선되었다.

우리는 백그라운드 업로드 및 다운로드를 위한 새로운 혼잡 제어 알고리즘을 추가했습니다.

이 새로운 알고리즘은 더 나은 사용자 경험을 위해 네트워크 지연을 크게 줄일 뿐만 아니라 백그라운드 전송이 다른 트래픽과 거의 같은 시간에 완료되도록 합니다.

백그라운드 서비스 유형을 활용하기 위해 채택할 수 있는 네트워킹 API를 살펴봅시다.

앱이 포그라운드에 있고 사용자가 시작하지 않은 전송을 수행할 때, 기본 URLSession을 사용하고 URL 요청에서 네트워크 서비스 유형을 백그라운드로 설정합니다.

다시 말하지만, 이것은 시스템이 낮은 네트워크 지연을 유지할 수 있게 해준다.

그리고 NWConnection의 경우, NWParameters에서 서비스 클래스를 배경으로 설정할 수 있습니다.

앱이 사용자 시작이든 아니든 장기 실행 전송을 시작하면, 앱이 일시 중지된 경우에도 계속 실행되도록 백그라운드 URLSession을 만들 수 있습니다.

시간에 민감하지 않은 작업의 경우, isDiscretionary 속성을 true로 설정할 수 있습니다.

이것은 시스템이 전송을 수행하기 위한 최적의 조건을 기다릴 수 있게 해준다.

우리는 당신의 앱이 네트워크 대기열을 짧게 유지하는 데 어떻게 도움이 될 수 있는지에 대해 이야기했습니다.

지연의 또 다른 원인은 전송 장치 자체에 있을 수 있다.

역사적으로, 네트워킹 스택은 매우 큰 전송 버퍼를 사용했다.

이것은 패킷이 네트워크에 들어가기 전에, 때로는 초 단위로 많은 불필요한 지연을 추가한다.

우리는 2015년에 URLSession과 NWConnection을 위해 이것을 수정했습니다.

하지만 인터넷의 대부분의 서버는 리눅스에서 실행되며 BSD 소켓을 사용한다.

서버 운영자에게 연락하여 소스에서 지연을 줄이기 위해 TCP가 전송되지 않은 낮은 워터마크 소켓 옵션을 사용하고 있는지 확인하십시오.

다음 단계를 위해, 여러 왕복을 제거하기 위해 현대적인 네트워킹 프로토콜을 채택하세요.

자산, 대량 전송 및 긴급하지 않은 작업을 위해 백그라운드 모드를 사용하세요.

다양한 네트워크 조건에서 앱의 성능을 테스트하세요.

네트워크 링크 컨디셔너는 그것을 하기 위한 훌륭한 도구이다.

네트워크 지연을 낮게 유지하면 앱의 반응성이 향상되고 전반적인 사용자 경험을 향상시킵니다.

봐줘서 고마워 그리고 멋진 WWDC 보내!

♪