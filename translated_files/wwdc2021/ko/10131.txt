10131

♪ 베이스 음악 연주 ♪

♪

Melissa Nierle: 저는 기업 및 교육 기술 팀의 소프트웨어 엔지니어인 Melissa Nierle입니다.

Apple에서는 기업 파트너와 교육 기관이 팀원과 학생을 연결하는 데 필요한 도구를 갖추기 위해 항상 최고의 장치 관리 기능과 기능을 만들기 위해 노력하고 있습니다.

이러한 모든 관리 기능의 중추는 MDM 프로토콜 그 자체이다.

이 프로토콜은 iOS, macOS 및 tvOS 내에서 직접 제공되는 잘 정립되고 많이 사용되는 솔루션이며 모바일 장치 관리 전반에 걸쳐 표준이 되었습니다.

그리고 매년 기능을 추가하는 동안, 우리는 또한 장치 관리 목표에 대한 프로토콜을 지속적으로 평가하고 MDM 솔루션 개발자, 관리자 및 사용자의 동적 요구를 충족시키기 위해 진화합니다.

오늘날, 우리의 MDM 프로토콜은 필수적이고 반응적인 프로토콜로 설명될 수 있다.

각 관리 워크플로우는 장치와 서버 간의 시간과 여러 왕복이 필요합니다.

그런 다음 조직 전체에서 많은 수의 장치를 관리할 때 모든 성능 문제가 복잡해 진다.

이것은 우리의 프로토콜이 가능한 한 성능이 뛰어나고 확장 가능하도록 하고 싶은 곳의 예입니다.

그리고 최적의 성능과 확장성을 달성하기 위해, 우리는 MDM 프로토콜 자체를 다시 구상했습니다.

장치 관리의 미래는 선언적 관리이다; 장치에 정책 관리를 가져오는 프로토콜에 대한 혁신적인 업데이트이다.

선언적 관리를 통해 장치는 자율적이고 능동적일 수 있으며, 서버를 가볍고 반응적이며 지속적인 폴링 없이 업데이트를 구독할 수 있습니다.

자율 장치는 자체 상태 변화에 반응한 다음 서버에서 메시지를 표시하지 않고 관리 로직을 자체적으로 적용합니다.

사전 예방 장치는 중요한 상태 변경이 발생할 때 서버에 비동기적으로 보고하는 상태 채널을 가지고 있어, 서버가 장치를 폴링할 필요가 없습니다.

장치가 자율적이고 능동적일 수 있도록 하는 것은 선언적 관리의 기초이며 성능과 확장성을 높일 수 있다.

그리고 가장 좋은 점은, 그것이 새로운 패러다임이지만, 새로운 프로토콜이 아니라는 것이다.

우리는 iOS 기기를 시작으로 이 새로운 선언적 기능을 기존 MDM 프로토콜에 바로 구축했습니다.

우리는 새로운 선언적 패러다임을 강화하는 데이터 모델에 대해 자세히 알아볼 것이다.

그런 다음, 우리는 MDM과의 통합에 대해 이야기할 것이다.

우리는 구체적인 예를 살펴보고 시작하는 방법을 배울 것입니다.

선언적 데이터 모델부터 시작합시다.

선언적 데이터 모델에는 세 가지 기둥이 있다.

선언은 서버가 정의하고 장치에 보내는 페이로드입니다; 장치가 자체에 대한 새로운 정보로 서버를 사전에 업데이트하는 새로운 통신 채널인 상태 채널; 그리고 Apple이 선언적 관리에 새로운 기능을 도입함에 따라 장치와 서버가 이를 원활하게 처리할 수 있도록 확장성.

이 세 가지 기둥을 이해하면 선언적 관리를 MDM 솔루션에 통합할 수 있습니다.

선언부터 시작합시다.

선언은 조직이 장치(예: 계정, 설정 및 제한)에 시행하고자 하는 정책을 나타냅니다.

선언은 모든 사용자에게 공통적인 정책과 단일 사용자 또는 장치에 특정한 정책에 대해 만들 수 있습니다.

선언의 구성을 살펴봅시다.

선언에 대한 데이터 표현은 프로필과 유사하며, 선언은 값에 대한 키와 표준 유형 집합이 있는 사전이기도 하다.

그러나 선언은 plist 대신 네트워크를 통해 전송될 때 JSON 객체로 직렬화됩니다.

모든 선언에는 세 가지 필수 속성이 있습니다: 유형, 식별자 및 ServerToken.

유형은 구성이 나타내는 정책을 정의한다.

식별자 키는 장치로 전송된 모든 선언 세트 내에서 선언을 고유하게 식별하는 값을 가지고 있다.

일반적으로, 이것은 문자열로 표시된 UUID가 될 것이다.

이 장치는 선언을 서버와 동기화할 때 이 값을 사용합니다.

ServerToken 키는 식별자 키를 기반으로 한 선언의 고유한 개정을 나타냅니다.

이 키는 선언을 서버와 동기화할 때도 사용됩니다.

그 값은 각 개정판마다 달라야 하는 문자열이다.

예시와 같이 간단한 카운터나 UUID 문자열일 수 있다.

페이로드는 선언 유형과 관련된 키와 값을 포함하는 선언의 데이터별 부분이다.

프로필 페이로드와 마찬가지로, 일부 키가 필요할 수 있으며, 다른 키는 선택 사항일 수 있습니다.

값은 문자열, 숫자, 부울, 배열 또는 사전일 수 있으며 숫자 1부터 10까지 또는 문자열 열거와 같은 특정 값 집합으로 제한될 수 있습니다.

네 가지 유형의 선언이 있습니다: 구성, 자산, 활성화 및 관리.

선언의 첫 번째 유형은 구성이다.

구성은 장치에 적용할 정책을 나타냅니다(예: 계정, 설정 및 제한).

구성은 MDM의 기존 프로필 페이로드와 유사하다.

다음은 장치 암호에 제한을 적용하는 구성 선언의 예입니다.

모든 선언에 필요한 표준 키인 유형, 식별자 및 ServerToken이 있습니다.

유형의 값은 이것을 선언의 암호 구성 유형으로 식별합니다.

페이로드 키에는 구성을 위한 암호 정책 데이터가 포함되어 있습니다.

다음 유형의 선언은 자산이다.

자산은 구성에 필요한 보조 데이터에 대한 참조를 나타낸다.

이것은 큰 데이터의 공유 항목이거나 개인화된 항목일 수 있다.

대용량 데이터 항목의 경우, 자산 선언에는 장치가 서버에서 실제 자산 데이터를 가져오는 데 사용하는 URL이 포함되어 있습니다.

이 서버는 MDM 서버일 수도 있고, 별도의 콘텐츠 전송 네트워크 서버일 수도 있습니다.

별도의 콘텐츠 전송 네트워크에서 자산을 제공하는 것은 대규모 네트워크 대역폭을 지원하는 부담을 더 적합한 서비스로 이동시킨다.

자산은 또한 이름, 이메일 주소, 계정 비밀번호 및 인증서와 같은 사용자와 관련된 데이터를 나타내는 데 사용될 수 있습니다.

이것은 사용자별 사용자 지정 데이터를 구성에서 꺼내 더 작은 전용 자산 유형 선언으로 옮깁니다.

자산은 구성과 일대다 관계가 있다.

예를 들어, 하나의 자격 증명 자산은 여러 계정 구성으로 참조할 수 있으므로 각 계정 구성에서 동일한 사용자 정보를 복제할 필요가 없습니다.

그런 다음, 사용자 자격 증명을 업데이트해야 하는 경우, 해당 자산만 업데이트해야 합니다.

해당 자산을 참조하는 모든 구성은 변경되지 않으며, 장치는 그에 따라 정책을 업데이트합니다.

한 번에 많은 구성에 대해 이와 같은 점진적인 업데이트를 할 수 있는 능력은 장치 관리 시스템의 전반적인 반응성을 향상시킬 것이다.

자산 신고의 구성을 살펴봅시다.

다음은 사용자 신원을 정의하는 자산 선언의 예입니다 -- 본질적으로 사용자의 연락처 정보입니다.

세 개의 필수 표준 키가 있으며, 유형의 값은 이것을 사용자 신원 자산 선언으로 정의합니다.

페이로드 키에는 이 자산의 사용자 ID 속성이 포함되어 있습니다.

다음 유형의 선언은 활성화이다.

활성화는 장치가 원자적으로 적용될 구성 세트를 나타낸다.

이것은 참조된 자산과 함께 세트의 모든 구성이 모두 적용되기 위해 유효해야 한다는 것을 의미합니다.

유효하지 않은 경우, 활성화는 관련 정책을 적용하지 못할 것이다.

다음은 두 가지 구성을 포함하는 간단한 활성화의 예입니다.

세 개의 필수 선언 키가 있으며, 페이로드에는 활성화에 의해 원자적으로 적용될 구성 세트가 포함되어 있습니다.

구성은 식별자 키에 의해 참조된다.

활성화와 구성 사이에는 많은 관계가 있다.

활성화는 여러 구성을 참조할 수 있으며, 구성은 여러 활성화를 참조할 수 있습니다.

이 다대다 관계는 복잡한 비즈니스 논리가 장치에 의해 자율적으로 처리될 수 있게 해준다.

활성화에는 활성화 상태가 장치에서 활성화되거나 비활성화되어 있는지를 결정하는 술어가 포함될 수 있습니다.

장치는 술어가 true로 평가되는 경우에만 활성화에 의해 참조되는 구성을 처리합니다.

예를 들어, 술어는 특정 활성화가 iPad와 같은 특정 장치 유형에서만 활성화되어 있다고 선언할 수 있다.

또 다른 예는 일련의 정책이 특정 버전의 OS에만 적용되기를 원한다는 것이다.

이를 통해 서버는 모든 장치 상태에 대한 모든 선언을 보낼 수 있으며 장치 자체가 적용할 것을 결정하여 장치를 더욱 자율적으로 만들 수 있습니다.

장치 상태가 변경됨에 따라, 활성화 술어들은 서버의 개입 없이 재평가된다.

새로운 장치 상태와 관련된 정책이 적용되고 오래된 정책이 제거됩니다.

이곳의 장치는 점점 더 능동적이 되고 있다.

조건자가 없는 경우, 장치는 항상 활성화에 의해 참조된 구성을 처리할 것이다.

여기에는 이전 활성화 예제가 있지만, 이제 이 활성화에는 장치가 iPad일 때만 정책이 적용되어야 함을 나타내는 술어가 있습니다.

마지막 유형의 선언은 관리 선언이다.

관리 선언은 전반적인 관리 상태를 장치에 전달하는 데 사용됩니다.

여기에는 조직에 대한 세부 사항을 설명하는 선언과 서버의 기능을 설명하는 선언이 포함됩니다.

이 선언은 정적 정보를 장치에 전달하는 데 도움이 된다.

그리고 그것들은 당신의 장치에 조직 정책을 적용하기 위한 네 가지 유형의 선언입니다.

새로운 선언적 관리 데이터 모델의 두 번째 기둥은 상태 채널이다.

선언이 작동하는 방식을 감안할 때, 장치의 선언된 상태는 어느 시점에서도 장치의 실제 상태와 일치하지 않을 수 있습니다.

예를 들어, 사용자 상호 작용이 필요한 선언은 그 조치가 취해질 때까지 적용되지 않을 것이다.

이것의 좋은 예는 사용자가 장치에 대한 새로운 정책 준수 암호를 만들기 위해 조치를 취해야 하는 암호 정책입니다.

이 장치 상태 전환에 가시성을 추가하기 위해, 우리는 상태 채널을 만들었습니다.

장치 상태 업데이트는 상태 보고서에서 서버로 전송됩니다.

서버는 특정 상태 항목을 구독할 수 있으므로, 관심 있는 변경 사항에 대한 업데이트만 받습니다.

상태 항목은 기간으로 구분된 문자열 토큰으로 구성된 키 경로로 식별됩니다.

상태 항목은 이전 활성화 조건자 예제와 같이 활성화 조건자에서 표현식으로 사용할 수 있습니다.

서버는 상태 구독 구성을 사용하여 특정 상태 항목을 구독합니다.

이 구성을 받으면, 장치는 구독한 상태 항목에 대한 초기 상태 보고서를 보낸 다음, 구독한 항목이 변경되면 보고서를 보냅니다.

상태 보고서는 점진적이므로, 변경된 항목만 보고됩니다.

선언의 상태는 - 적용 여부에 관계없이 - 서버가 구독할 필요 없이 변경될 때 항상 서버에 보고됩니다.

특정 상태 항목 업데이트를 구독하는 구성을 점검해 봅시다.

이 구성은 장치의 운영 체제 버전, 유형 및 모델을 나타내는 세 가지 상태 항목을 구독합니다.

이 구성이 장치에서 활성화되면, 새로 구독한 각 상태 항목에 대한 초기 상태 보고서를 보냅니다.

상태 항목은 해당 키 경로의 계층적 구성 요소로 중첩된 JSON 객체로 표시됩니다.

이 경우, 장치는 iOS 14.5에 있다고 보고합니다.

사용자가 소프트웨어를 최신 iOS 버전으로 업데이트하면, 장치는 운영 체제 버전 항목의 상태 변경을 보고합니다.

서버는 이제 장치가 iOS 15로 업그레이드되었음을 감지합니다.

선언적 데이터 모델의 세 번째 기둥은 확장성이다.

Apple 제품의 긴 수명 주기를 감안할 때, 특히 소프트웨어 업데이트와 새로운 하드웨어 모델이 출시됨에 따라 다양한 버전의 MDM 솔루션과 Apple 장치 간의 호환성을 유지하는 것이 필수적입니다.

선언적 관리를 통해, 장치와 서버 모두 이제 지원되는 기능을 서로에게 광고한다.

각각은 소프트웨어 버전이나 하드웨어 종속성을 하드 코딩하지 않고도 언제 새로운 기능을 활용할 수 있는지 알고 있다.

서버와 클라이언트가 모두 광고하는 기능에는 사소한 프로토콜 업데이트와 주요 프로토콜 업데이트를 모두 나타내는 지원되는 기능 목록이 포함되어 있습니다.

클라이언트는 또한 클라이언트가 지원하는 전체 선언 및 상태 항목을 나열하는 지원되는 페이로드를 광고합니다.

서버의 기능은 관리 선언을 통해 장치로 전송됩니다.

서버가 업그레이드되면, 다른 유형의 선언과 마찬가지로 모든 새로운 기능을 장치에 동기화합니다.

그 장치는 서버의 새로운 기능을 즉시 활용할 수 있다.

클라이언트의 기능은 기능이 변경될 때마다 특정 상태 항목으로 서버로 전송됩니다.

이렇게 하면, 서버는 즉시 장치의 새로운 기능과 페이로드를 활용할 수 있습니다.

선언적 데이터 모델에 확장성을 구축하면 선언적 관리가 현재와 미래를 위해 구축되도록 보장합니다.

이제 데이터 모델을 이해했으므로, 선언적 관리가 MDM 프로토콜 내에서 어떻게 원활하게 통합되는지 알아봅시다.

기존 MDM 공급업체는 오늘부터 선언적 관리 기능을 사용할 수 있습니다.

선언적 관리는 MDM 프로토콜에 통합되어 등록 및 등록 취소 프로세스를 관리하고 HTTP 전송 및 장치 및 사용자 인증을 처리하는 데 활용합니다.

기존 및 성숙한 MDM 제품은 새로운 프로토콜이나 서버 인프라를 채택하기 위한 파괴적인 변화 없이 선언적 관리로 원활하게 전환할 수 있다.

선언과 상태 채널은 이미 사용 중인 MDM 명령 및 프로필과 확장 가능한 방식으로 공존합니다.

이를 통해 모든 MDM 워크플로우를 한 번에 업데이트하지 않고도 선언적 관리의 다양한 기능을 점진적으로 채택할 수 있습니다.

예를 들어, 서버는 상태 구독만 구현하도록 선택할 수 있으며, 모든 선언적 관리를 채택하지 않고도 MDM 프로토콜에 상태 채널을 효과적으로 추가할 수 있습니다.

장치가 MDM에서 등록되지 않을 때, 모든 선언이 제거되고, 장치 상태는 그에 따라 조정됩니다.

중요한 것은, 선언적 관리가 기존 MDM 행동에 전혀 영향을 미치지 않는다는 것이다.

사실, 선언적 관리는 활성화를 위한 MDM 명령과 동기화 및 상태 보고서를 위한 MDM 체크인 요청을 사용하여 기존 MDM 동작을 활용합니다.

다음에 이것들 각각을 확대해 봅시다.

선언적 관리 명령이 MDM에 추가되었습니다.

이 명령은 두 가지 목적을 제공한다.

먼저, 그것은 장치의 선언적 관리 기능을 활성화한다.

일단 켜지면, 선언적 관리는 끌 수 없습니다.

그러나, 서버는 선언적 관리를 효과적으로 비활성화하기 위해 모든 선언을 제거할 수 있다.

둘째, 명령은 필요한 경우 동기화 흐름을 시작하는 동기화 토큰을 포함하는 페이로드를 포함할 수 있습니다.

선언을 동기화하고 상태 보고서를 서버에 보낼 때 장치에서 사용하는 새로운 DeclarativeManagement CheckIn 요청 유형도 있습니다.

다음은 새로운 체크인 요청 유형의 예입니다.

MessageType 키는 새로운 DeclarativeManagement 값으로 설정됩니다.

엔드포인트 키는 클라이언트가 서버에서 선언 매니페스트 데이터를 검색하도록 요청하고 있음을 나타내는 값으로 설정됩니다.

이 상태 보고서와 같은 일부 요청에는 Base64로 인코딩된 데이터도 포함될 수 있습니다.

체크인 요청을 사용하여 선언을 동기화할 때, 서버에서 응답이 있을 것이다.

두 가지 유형의 응답이 있습니다: 서버가 정의하는 모든 선언의 식별자와 서버 토큰 속성을 나열하는 매니페스트; 그리고 장치를 적용할 단일 선언.

이제 선언적 관리를 활성화하고 신고를 체크인 요청과 동기화하는 방법을 배웠으니, 정책을 프로필에서 선언으로 점진적으로 마이그레이션하는 방법에 대해 이야기해 봅시다.

프로필을 구성으로 보내고 설치하기 위한 선언 유형이 있습니다.

이를 통해 MDM 프로필의 전체 제품군을 활용하여 프로필 기반 정책 논리를 장치로 전환하여 선언적 관리를 즉시 활용할 수 있습니다.

다음은 프로필 구성의 예입니다.

프로필은 URL을 통해 참조됩니다.

이 구성이 활성화되면, 프로필은 URL에서 가져와 장치에 설치됩니다.

우리는 오늘 iOS 15 베타로 선언적 관리를 쉽게 채택할 수 있도록 이러한 조치를 취했습니다.

이제 선언적 관리가 서버와 어떻게 상호 작용하는지에 대한 예를 살펴봅시다.

먼저, 우리는 선언적 관리를 활성화한다.

이것은 이미 MDM에 등록된 장치로 시작됩니다.

서버는 장치에 푸시 알림을 보냅니다.

장치는 상태가 유휴로 설정된 ServerURL 엔드포인트 요청을 전송하여 일반적인 방식으로 푸시에 응답합니다.

그런 다음 서버는 DeclarativeManagement 명령으로 응답합니다.

수령 시, 장치는 선언적 관리를 활성화한다.

DeclarativeManagement 명령을 처리한 후, 장치는 승인된 상태를 서버로 다시 보냅니다.

그런 다음 서버에 더 이상 명령이 없다면, 빈 응답을 반환할 것이다.

그런 다음 장치는 선언적 관리 동기화 프로세스를 시작합니다. 다음으로 진행해 봅시다.

장치는 먼저 엔드포인트 키가 선언 항목으로 설정된 체크인 요청을 보냅니다.

서버는 선언 메타데이터가 포함된 매니페스트로 응답한다.

그런 다음 장치는 매니페스트의 항목을 이전에 서버에서 받은 선언 세트와 비교합니다.

이 비교를 통해, 장치는 어떤 선언이 새로운지, 어떤 선언이 변경되었는지, 어떤 선언이 제거되었는지 알 수 있다.

새롭거나 변경된 선언마다, 장치는 체크인 요청을 보냅니다.

이 요청의 엔드포인트 키는 선언 리소스를 고유하게 식별하는 경로로 설정됩니다.

그런 다음 서버는 그 선언을 나타내는 JSON 객체로 응답한다.

서버에서 모든 선언을 가져오면, 장치는 이 업데이트된 선언 상태로 표시되는 정책 변경 사항을 적용하기 시작합니다.

정책 변경이 적용되면, 장치는 해당 업데이트된 상태 항목과 함께 상태 보고서를 서버로 보냅니다.

당신이 시작할 수 있도록, iOS 15에서 배송하는 것을 살펴봅시다.

선언적 관리 기능은 iOS 15 및 iPadOS 15가 설치된 장치에서 지원됩니다.

또한 MDM 등록 유형이 사용자 등록인 경우에만 사용할 수 있습니다. iOS 15에 도입된 새로운 온보딩 흐름 또는 iOS 13의 흐름입니다.

구성의 경우, 동등한 MDM 계정 및 암호 프로필 페이로드를 포함하는 계정 및 암호 구성이 있습니다.

우리는 또한 MDM 지원 프로필의 전체 제품군을 장치에 선언적으로 설치할 수 있도록 프로필 구성을 지원합니다.

상태 구독 구성은 오늘도 사용할 수 있으며 서버가 받고자 하는 특정 상태 항목 업데이트를 선언하는 데 사용됩니다.

오늘 이용 가능한 한 가지 유형의 활성화가 있습니다.

이 간단한 활성화는 원자적으로 적용되어야 하는 구성 목록을 정의하며 선택적 조건자를 포함할 수 있다.

자산 신고의 경우, 두 가지 유형이 있습니다: 사용자의 연락처 정보를 나타내는 사용자 신원 자산; 그리고 사용자 계정의 사용자 ID와 비밀번호가 포함된 사용자 자격 증명 자산.

관리 선언을 위해, 우리는 두 가지 유형을 지원하고 있습니다: 조직 세부 사항과 서버 기능.

다음으로, 여기 오늘 이용 가능한 상태 항목이 있습니다.

각 선언에는 장치에서 서버로 자동으로 전송되는 자체 상태 항목이 있습니다.

또한 장치의 하드웨어 모델과 운영 체제에 대한 세부 사항과 같은 장치의 기본 속성을 다루는 일련의 상태 항목도 사용할 수 있습니다.

이러한 선언 및 상태 항목에 대한 자세한 내용은 Apple의 장치 관리 개발자 문서를 확인하십시오.

오늘 우리는 선언적 관리와 그 기능의 새로운 패러다임을 다루었고, 선언적 관리가 어떻게 장치를 더 자율적이고 능동적으로 만들 수 있는지 발견했습니다.

우리는 선언적 관리를 MDM 솔루션에 통합하는 방법을 배웠습니다.

우리는 선언적 관리가 어떻게 작동하는지 보여주는 예시를 살펴보고 선언적 관리가 오늘 어떻게 사용할 준비가 되었는지 검토했습니다.

우리는 당신이 선언적 관리로 MDM 솔루션을 어떻게 재창조할지 빨리 알고 싶습니다.

나와 함께 해줘서 고맙고 멋진 WWDC를 보내.

♪