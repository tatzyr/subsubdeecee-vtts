10205

안녕하세요, 여러분.

제 이름은 키어런이고, 소스 제어 기술을 연구하는 Xcode 엔지니어입니다.

Xcode 13은 코드 검토 모드를 완전히 다시 상상하고 앱의 품질을 개선하는 데 도움이 되는 새로운 협업 워크플로우를 소개합니다.

이 세션에서, 저는 우리의 앱 Fruta로 전형적인 워크플로우를 안내할 것입니다.

우리는 Xcode 13의 새로운 코드 검토 및 풀 리퀘스트 기능을 사용하여 버그를 찾고, 피드백을 받고, 변경 사항을 통합하고, 동료들에게 피드백을 제공할 것입니다.

시작하자.

내 작업의 큰 부분은 사용자들이 보고한 문제를 조사하는 것이다.

버그를 고치기 위해, 나는 먼저 그것이 언제 그리고 왜 일어나기 시작했는지 이해해야 한다.

코드 변경을 통해 시간을 거슬러 올라가면, 나는 종종 코드 검토 모드를 사용하여 원인을 알아낼 수 있다.

우리가 언급한 App Store 리뷰 중 하나는 최근에 우리 앱에 대한 몇 가지 UI 변경 사항이 제대로 보이지 않는다고 언급했습니다.

나는 그 문제가 무엇인지 꽤 잘 알고 있어, 그래서 나는 계속해서 몇 가지 변화를 만들기 시작할 거야.

내가 타이핑을 시작할 때, 변경 사항은 소스 편집기의 홈통에 나타난다.

나는 이전 값이 무엇인지 아는 것이 정말 유용하다고 생각한다. 그래서 나는 변경된 모든 것에 대해 좋은 생각을 가질 수 있다.

이를 위해, 나는 코드 검토 모드로 뛰어들 수 있다.

편집기 표시줄에서 코드 검토 버튼을 클릭하기만 하면 로컬 편집과 가장 최근의 수정본의 비교를 볼 수 있습니다.

문서 작업을 할 때, 코드 검토 모드는 내가 만들고 있는 편집을 지속적으로 강조하므로 마지막 커밋 이후 무엇이 변경되었는지 항상 알 수 있습니다.

파일을 여러 번 편집했을 때, 하단 막대의 스테퍼 컨트롤은 내가 얼마나 많은 변경을 했는지 보여준다.

화살표 아이콘을 클릭하면 코드 변경 사이로 이동합니다.

그렇게 하면, 나는 편집을 찾기 위해 파일을 스크롤할 필요가 없다.

때로는 무엇이 바뀌었는지 나란히 보는 것이 더 쉬울 수 있지만, 나는 내 변화를 인라인으로 보는 것을 선호한다.

Xcode는 두 스타일 모두에서 내 변경 사항을 보여줄 수 있으며, 오른쪽 상단의 편집기 메뉴를 사용하여 둘 사이를 전환할 수 있습니다.

나는 UI 버그와 관련된 모든 문제를 포착했는지 확인하고 싶다.

버그가 어디에서 왔는지 정말로 파헤치고 이해하려면, 내 앱의 출시 사이에 무엇이 바뀌었는지 봐야 한다.

하단 막대의 커밋 컨트롤을 사용하여 비교를 설정할 수 있습니다.

Xcode 13을 사용하면 브랜치, 태그 및 가장 최근 위치에서 커밋을 선택할 수 있으므로 두 지점 간의 앱의 변경 사항을 쉽게 볼 수 있습니다.

나는 보통 TestFlights나 App Store에 제출할 때마다 릴리스 브랜치를 잘라서, 그 릴리스와 관련된 두 가지 버전의 코드를 살펴볼 것이다.

내 커밋을 선택하면, Xcode는 내 문서의 두 역사적 버전의 비교를 보여준다.

하이라이트 색상은 하단 막대에 표시된 커밋에 해당하는 보라색과 주황색으로 바뀝니다.

이전과 마찬가지로, 나는 스테퍼 컨트롤을 사용하여 변화 사이를 이동할 수 있다.

나는 인라인 또는 나란히 비교를 볼 수 있다.

이 비교를 다 살펴보면, 하단 막대의 재설정 버튼을 사용하여 가장 최근의 변경 사항으로 빠르게 돌아갈 수 있습니다.

보통, 내 앱에 대한 변경 사항은 여러 파일에 걸쳐 있다.

한 파일 내에서 변경 사항을 탐색하는 것은 정말 유용하지만, 저는 종종 전체 프로젝트에서 변경한 모든 파일에 대한 개요를 원합니다.

소스 컨트롤 네비게이터의 새로운 변경 탭 덕분에 마지막 커밋 이후 변경한 모든 파일의 목록을 볼 수 있습니다.

그 중 하나를 클릭하면 자동으로 코드 검토 모드로 들어가고 그 파일에서 변경한 모든 변경 사항을 보여줍니다.

나는 내가 만든 다른 편집을 빠르게 상기시키기 위해 파일 사이를 뒤집는 것을 좋아한다.

이제 재료를 표시할 때 우리 앱에 이 문제가 있는 이유를 알았으니, 나는 그것을 고치기 위해 변경 사항으로 새로운 지점을 만들 것이다.

브랜치를 만들고 전환하는 것은 내가 많이 하는 일이며, Xcode 13은 그것을 할 수 있는 훌륭한 새로운 방법을 가지고 있다.

Xcode의 도구 모음은 이제 내 현재 지점을 보여주며, 이는 내가 마지막으로 작업한 것을 알려주는 데 도움이 된다.

그것을 클릭하면, 최근에 작업한 지점 간에 빠르게 전환할 수 있습니다.

이 경우, 나는 보조 메뉴를 사용하여 수정을 위한 브랜치를 만들 것이다.

코드 검토 모드에서 역사를 탐색한 후, 나는 버그에 대한 수정을 생각해 낼 수 있었다.

이제 제안된 해결책이 있으니, 코드 변경에 대한 피드백을 받고 싶습니다.

저는 코드 베이스의 이 부분에 완전히 익숙하지 않기 때문에, 제 팀원들이 제 변경 사항이 다른 문제를 일으키지 않을 것이라는 것을 확인해 주시면 싶습니다.

코드 변경에 대해 동료들과 협력하기 위해, 나는 풀 리퀘스트를 만들 것이다.

GitHub와 Bitbucket Server에 대한 새로운 통합 지원을 사용하여 Xcode 13에서 바로 할 수 있습니다.

소스 제어 팝오버에서 바로 풀 리퀘스트를 만들 수 있습니다.

Xcode는 내 브랜치와 기본 업스트림 브랜치로 병합하기 위한 초안 풀 리퀘스트를 만들 것이며, 이 경우 메인입니다.

게시하기 전에 수정 사항에 대한 정보와 함께 풀 리퀘스트를 준비할 수 있습니다.

내가 커밋하고 내 브랜치에 푸시한 변경 사항은 변경 사항 네비게이터의 Pull Request 섹션에 표시되며, 게시되면 포함될 변경 사항을 미리 볼 수 있습니다.

로컬 변경 섹션을 사용하면 커밋하고 푸시할 때까지 풀 리퀘스트에 포함되지 않은 파일을 볼 수 있습니다.

풀 리퀘스트의 내용에 만족하면, 제목과 설명을 드리겠습니다.

특히 몇몇 팀원들에게 이 변경 사항을 검토해 달라고 요청하고 싶습니다. 그래서 참가자 버튼을 클릭하고 그들을 검토자로 태그하겠습니다.

피드백을 기다리고 다른 지점으로 전환하면서, Xcode는 어떤 풀 리퀘스트를 표시할지 알아낸다.

Xcode는 소스 브랜치와 현재 브랜치를 기반으로 관련 풀 리퀘스트를 결정합니다.

지점을 전환하면, Xcode는 기존 풀 리퀘스트를 자동으로 검색합니다.

나는 조금 전에 풀 리퀘스트를 게시했고, 그 이후로 우리 팀은 나에게 피드백을 남겼다.

이제 그걸 살펴봅시다.

변경 네비게이터에서 풀 리퀘스트를 선택하면 풀 리퀘스트에 대한 개요와 게시한 이후 일어난 모든 일을 볼 수 있습니다.

우리 팀은 내 코드에 대한 피드백을 남겼다.

내가 원한다면 이 토론에 답장하거나 "변경 사항 보기"를 클릭하여 코드 검토 모드에서 파일로 바로 이동할 수 있습니다.

매트의 몇 가지 훌륭한 제안이 있으며, 이제 우리는 Xcode에서 내 풀 리퀘스트에 대해 이 대화를 나누고 소스 코드에 직접 연결할 수 있는 기회를 갖게 되었습니다.

나는 피드백에 대한 응답으로 풀 리퀘스트를 업데이트했다.

이제, 내 팀원들이 여기에 남긴 댓글을 보면 그들이 내 최근 변화에 동의한 것 같아.

나는 내 동료가 이 풀 리퀘스트를 승인한 것을 본다.

이제 지속적인 통합 워크플로우의 상태를 확인하기만 하면 됩니다.

Xcode Cloud를 사용하고 있기 때문에, 풀 리퀘스트의 CI 팝오버 내에서 지속적인 통합 워크플로우의 상태를 볼 수 있습니다.

테스트 결과의 요약을 빠르게 볼 수 있으며, 항목을 클릭하면 자세한 Xcode Cloud 보고서로 바로 이동할 수 있습니다.

Xcode Cloud와 CI에서 코드 실행에 대한 자세한 내용은 "Meet Xcode Cloud" 세션을 확인하세요.

좋아요, 제 팀원들이 모두 제 변경 사항을 승인했고 제 모든 Xcode Cloud 작업이 성공했기 때문에, 저는 풀 리퀘스트를 병합할 준비가 되었습니다.

풀 리퀘스트 작업을 사용하고 "병합"을 선택할 것입니다.

Xcode를 사용하면 변경 사항이 대상 브랜치에 통합되는 방법을 결정하는 병합 전략을 선택할 수 있습니다.

병합 커밋을 포함하는 기본값을 선택하겠습니다.

선택적 커밋 메시지를 입력할 수도 있지만, 그대로 두겠습니다.

모든 게 좋아 보여, 그래서 내가 지금 병합할게.

이제 풀 리퀘스트를 병합했으므로, 다른 작업으로 다시 전환할 때입니다.

동료들에게 피드백을 요청하는 것이 도움이 되는 것처럼, 그들은 종종 나에게 그들의 변화를 검토해 달라고 요청한다.

내가 최근에 작업한 지점 외에도, 소스 제어 팝오버는 나와 관련된 풀 리퀘스트도 보여준다.

내가 만든 풀 리퀘스트를 볼 것이지만, Xcode는 팀원들이 검토를 요청한 풀 리퀘스트도 보여줍니다.

소스 제어 팝오버를 보면, 내 팀원 중 한 명이 나에게 그렇게 하라고 요청한 것 같다.

그들의 지점을 확인하고 검토해 봅시다.

내 자신의 풀 리퀘스트와 마찬가지로, 나는 내가 태그된 이후로 그의 개요, 검토 상태 및 팀원들의 풀 리퀘스트에 대한 토론을 볼 수 있다.

그들의 변화를 살펴봅시다.

풀 리퀘스트 노드 아래의 변경 네비게이터의 파일을 단계별로 살펴보겠습니다.

이것들 중 하나를 클릭하면 코드 검토 모드로 전환되며, 풀 리퀘스트가 병합되면 적용될 변경 사항을 보여줍니다.

나는 2차 클릭하고 줄에 새 댓글을 삽입하여 편집기 안에 그를 위해 댓글을 남길 수 있다.

나는 그의 코드에서 잠재적인 개선을 볼 수 있다고 생각해, 그러니 내 팀원에게 메모를 남기자.

내 피드백은 꽤 미미했고, 이 풀 리퀘스트는 괜찮아 보인다.

나는 오른쪽 상단의 행동을 사용하여 그것을 승인할 것이다.

Xcode 13은 코드를 검토하고 동료들과 협업할 수 있는 훌륭한 새로운 방법을 제공합니다.

코드 검토 모드는 앱의 소스 코드가 시간이 지남에 따라 어떻게 변했는지에 대한 통찰력을 제공하여 앱의 문제와 행동 변화를 조사하는 강력한 도구입니다.

코드 검토 모드는 또한 새로운 인라인 프레젠테이션 모드와 확장된 비교 옵션을 제공하여 워크플로우에 더 많은 유연성을 제공합니다.

풀 리퀘스트를 사용하면 팀과 협력하여 주요 지점에 병합하기 전에 팀의 변경 사항에 대한 코드 피드백을 제공하고 받아 앱의 코드 품질을 향상시킬 수 있습니다.

토론은 앱의 소스 코드에 바로 나타나며, 팀워크를 진정으로 개발 과정의 일부로 만듭니다.

고마워, 멋진 WWDC 보내, 그리고.

[타격적인 음악].