10009

♪ 베이스 음악 연주 ♪

♪

브래디 화이트: 안녕하세요, 저는 브래디입니다.

저는 피트니스 팀의 엔지니어입니다.

나와 함께 해줘서 고마워.

App Store에는 이미 많은 훌륭한 운동 앱이 있습니다.

Apple Watch는 모든 종류의 피트니스 활동을 추적할 수 있는 놀라운 장치이다.

그것은 도전적인 자전거 타기에서 거리와 고도를 추적할 수 있다.

격렬한 운동 중에 소모된 심박수와 에너지를 모니터링할 수 있습니다.

수영을 위해, 그것은 심지어 뇌졸중 유형을 감지하고 바퀴를 셀 수도 있다.

이 모든 것과 그 이상을 훌륭한 운동 앱을 만들 수 있습니다.

우리가 오늘 무엇을 다룰지 살펴봅시다.

이 세션은 Code-Along이다.

우리는 그것이 무엇을 의미하는지 그리고 당신이 어떻게 참여할 수 있는지 살펴볼 것입니다.

우리는 SwiftUI에서 운동 뷰를 구축할 것이다.

그런 다음, 우리는 HealthKit을 우리의 견해에 통합할 것이다.

우리는 또한 당신에게 Always On 상태를 지원하는 방법을 보여줄 것입니다.

신나, 시작하자.

이 세션은 코드와 함께 진행된다.

우리는 처음부터 함께 운동 앱을 만들 것이다.

Xcode를 준비하는 동안, 몇 가지 개념을 다루자.

운동 앱이 뭐야?

운동 앱은 운동 중 피트니스 활동을 추적한다.

운동은 한 번의 탭으로 시작할 수 있다.

운동이 진행되는 동안 경과 시간, 소모된 에너지, 심박수 및 거리와 같은 실시간 지표가 표시됩니다.

운동이 끝나면, 요약은 운동에 대해 기록된 지표를 보여준다.

이것이 우리가 오늘 만들 것이다.

우리의 운동 뷰를 만들기 시작합시다.

Xcode를 열고 새로운 프로젝트를 시작합시다.

새 Xcode 프로젝트 만들기, watchOS, Watch App을 클릭하고 다음을 클릭하세요.

운동 앱에 "MyWorkouts"와 같은 이름을 지정하세요.

인터페이스가 SwiftUI이고 언어가 Swift인지 확인하고 다음을 클릭하세요.

프로젝트의 위치를 찾고 만들기를 클릭하세요.

검사관을 숨기고 캔버스의 크기를 조정합시다.

Xcode 미리보기를 사용하여 앱이 어떻게 생겼는지 보려면 재개를 클릭하세요.

좋아요, SwiftUI 앱이 준비되었습니다.

누군가가 StartView로 운동을 시작할 수 있는 방법을 제공합시다.

한 번의 탭으로 운동을 시작할 수 있습니다.

회전목마 스타일의 레이아웃이 있는 목록 보기는 큰 깊이 효과로 수직으로 스크롤하는 운동 목록을 제공할 것이다.

우리의 운동 목록에는 자전거, 달리기, 걷기가 포함될 것이다.

StartView를 만들어 봅시다.

"ContentView"의 이름을 "StartView"로 바꾸자.

ContentView를 Command-클릭하고, 이름 바꾸기를 클릭하고, "StartView"를 새 이름으로 입력하십시오.

MyWorkoutsApp.swift StartView는 이제 NavigationView의 루트 보기입니다.

이름 바꾸기를 클릭하세요.

StartView 목록에 표시할 운동 유형 배열을 정의해 봅시다.

먼저, HKWorkoutActivityType에 액세스하기 위해 HealthKit을 가져오자.

다음으로, 다양한 운동 유형을 추가해 봅시다.

우리의 운동 목록에는 사이클링, 달리기, 걷기의 HKWorkoutActivityTypes가 있을 것이다.

식별 가능한 프로토콜을 준수하고 이름 변수를 추가하도록 HKWorkoutActivityType 열거형을 확장하여 HKWorkoutActivityType을 목록에 액세스할 수 있도록 합시다.

ID 계산 변수는 열거형의 rawValue를 반환할 것이다.

이름 변수는 "Run", "Bike" 또는 "Walk"와 같은 이름을 반환하기 위해 케이스를 전환합니다.

운동 목록을 표시하기 위해 StartView의 몸에 목록 보기를 추가해 봅시다.

이 목록은 workoutTypes 변수를 모델로 사용합니다.

각 운동 유형에 대해 NavigationLink가 표시됩니다.

NavigationLink는 내비게이션 기반 인터페이스의 목적지를 정의합니다.

현재로서는, 목적지는 텍스트 보기가 될 것이다.

우리는 그들이 올바른 운동을 추적하고 있는지 확인하기 위해 나중에 이 내비게이션 링크를 설정할 것입니다.

패딩은 내비게이션 링크를 더 높게 만들어 운동을 쉽게 시작할 수 있는 더 큰 탭 영역을 제공합니다.

이 목록은 회전목마 목록 스타일을 사용하여 스크롤할 때 깊이 효과를 제공합니다.

navigationBarTitle은 "운동"을 표시할 것이다.

StartView의 미리보기를 보려면 재개를 클릭해 봅시다.

스크롤하려면 라이브 미리보기를 클릭하세요.

회전목마 ListStyle 깊이 효과를 보려면 위로 스크롤하세요.

좋아 보인다.

운동 세션은 모달 경험으로 제시될 것이다.

운동하는 동안, 사람들은 일반적으로 세션별 기능만 필요하다.

그들은 운동 목록을 검토하거나 앱의 다른 부분에 접근할 필요가 없습니다.

모달 경험에서 가장 중요한 항목을 제공하는 것은 사람들이 산만함을 최소화하면서 세션을 관리하는 데 도움이 될 수 있다.

Apple Watch에서 운동 앱을 사용하는 사람들은 보기가 이 순서가 될 것으로 예상한다.

왼쪽의 컨트롤 보기에는 종료, 일시 정지 및 재개와 같은 진행 중인 세션을 제어하는 버튼이 있습니다.

중앙에는 사람들이 한 눈에 읽을 수 있는 전용 화면에 지표가 나타납니다.

오른쪽의 미디어 재생 컨트롤을 사용하면 운동 중에 미디어를 제어할 수 있습니다.

watchOS의 TabView는 누군가가 왼쪽이나 오른쪽으로 스와이프할 때 여러 자식 보기 사이를 전환합니다.

TabView는 또한 보기 하단에 페이지 표시기를 제공합니다.

TabView는 세션 내 뷰를 표시하는 데 잘 작동할 것이다.

세 가지 운동 세션 보기를 위해 TabView로 SessionPagingView를 만들어 봅시다.

파일 > 신규 > 파일을 클릭하세요...

SwiftUI 보기, 다음을 클릭하고, 이 이름을 "SessionPagingView"로 지정하고, 만들기를 클릭하세요.

TabView에서 선택할 수 있는 각 보기를 모델링하기 위해 Tab 열거형을 만들어 봅시다.

탭 열거형에는 세 가지 사례가 있습니다: 컨트롤, 메트릭, 그리고 nowPlaying.

우리는 또한 TabView의 선택에 대한 바인딩을 제공하기 위해 "선택"이라는 @State 변수를 추가했습니다.

선택의 기본값은 메트릭이므로, 운동이 시작되면 메트릭 보기가 표시됩니다.

탭뷰를 추가해 봅시다.

TabView의 선택 매개 변수는 선택 상태 변수에 대한 바인딩을 사용합니다.

텍스트 뷰는 생성될 때까지 각 뷰의 자리 표시자입니다.

각 뷰에는 태그가 있어서 선택할 수 있습니다.

재개를 클릭하고 SessionPagingView가 어떻게 생겼는지 봅시다.

보기 사이를 스와이프하려면 라이브 미리보기를 클릭하세요.

SessionPagingView의 선택 변수의 기본값이 메트릭이기 때문에 메트릭 텍스트 보기가 먼저 표시됩니다.

왼쪽으로 스와이프하면 컨트롤 텍스트 보기가 표시됩니다.

오른쪽으로 끝까지 스와이프하면 지금 재생 중인 텍스트 보기가 표시됩니다.

좋아!

운동이 진행되는 동안, 실시간 지표가 표시됩니다.

세션에 실행과 같은 움직임이 필요할 때, 앱은 큰 글꼴 크기를 사용하고 가장 중요한 정보를 쉽게 읽을 수 있도록 텍스트를 정렬해야 합니다.

우리의 MetricsView는 경과 시간, 활성 에너지, 현재 심박수 및 거리를 표시합니다.

HealthKit에는 사용할 수 있는 더 많은 HKQuantityTypes가 있습니다.

MetricsView를 만들어 봅시다.

파일 > 신규 > 파일 SwiftUI 보기를 클릭하고, 다음을 클릭하고, 이 이름을 "MetricsView"로 지정하고 만들기를 클릭하세요.

VStack은 네 개의 메트릭 텍스트 뷰를 포함할 것이다.

텍스트 뷰는 이 텍스트 뷰를 모델에 연결할 때까지 현재 기본값을 가지고 있습니다.

노란색 전경색과 세미볼드 fontWeight를 부여하여 경과된 시간을 초점으로 만들어 봅시다.

활성 에너지 텍스트 뷰는 에너지 단위 킬로칼로리의 기본값을 사용하여 측정을 생성합니다.

측정은 단위를 축약하는 새로운 형식의 기능을 사용하며, 사용은 소모된 운동 에너지를 위한 운동이며, numberFormat은 분수를 다듬기 위해 0 분수 길이를 가지고 있다.

심박수 텍스트 보기는 fractionLength 0으로 포맷된 기본값을 사용합니다.

그것은 포맷된 문자열에 분당 비트에 대해 "bpm"을 추가합니다.

거리 텍스트 보기는 UnitLength.meters의 기본값을 사용합니다.

측정은 축약된 단위로 포맷되어 있다.

사용법은 로케일에 따라 자연스럽게 진행되는 영국식 또는 미터법 단위를 표시하는 도로이다.

우리는 둥근 디자인, monospacedDigits 및 소문자 SmallCaps가 있는 제목의 시스템 글꼴을 사용할 것입니다.

우리는 메트릭이 최첨단에 정렬되기를 원하기 때문에, VStack에 maxWidth 무한대와 선행 정렬이 있는 프레임 뷰 수정자를 제공했습니다.

우리는 이 VStack의 콘텐츠가 화면 하단까지 확장되도록 허용하고 싶습니다.

이것을 허용하기 위해, 우리는 바닥 안전 구역을 무시한다.

우리는 메트릭이 내비게이션 바 제목에 정렬되기를 원하기 때문에, 이를 위해 scenePadding()을 사용했습니다.

우리는 경과 시간 텍스트 보기가 경과 시간을 올바르게 포맷하고 Always On 상태에 따라 하위 초를 숨기거나 표시하기를 원합니다.

이렇게 하려면, ElapsedTimeView를 만들고 사용자 지정 ElapsedTimeFormatter를 만들어 봅시다.

파일 > 신규 > 파일, SwiftUI 보기를 클릭하고, 다음을 클릭하고, 이름을 "ElapsedTimeView"로 지정한 다음, 생성을 클릭하세요.

우리의 ElapsedTimeView는 TimeInterval인 elapsedTime을 기본값으로 0으로 설정했습니다.

showSubseconds는 기본값이 true인 부울 인수입니다.

timeFormatter는 우리가 아래에 정의하는 ElapsedTimeFormatter 상태 변수이다.

뷰의 본문에는 timeFormatter가 사용할 수 있도록 elapsedTime을 NSNumber로 캐스팅하는 텍스트 뷰가 포함되어 있습니다.

텍스트 보기에는 반굵은 fontWeight가 있습니다.

showSubseconds가 변경되면, timeFormatter의 showSubseconds 변수도 변경됩니다.

ElapsedTimeFormatter는 DateComponentsFormatter를 사용하는 사용자 지정 포맷터입니다.

우리는 분과 초와 패드 0을 보여주기 위해 경과된 시간을 원한다.

showSubseconds 변수는 서브초가 표시되는지 지시한다.

우리는 선택적 문자열을 반환하는 값 함수의 문자열을 재정의합니다.

첫 번째 가드는 값이 TimeInterval임을 보장한다.

두 번째 가드는 componentsFormatter가 문자열을 반환하도록 보장합니다.

showSubseconds가 참이라면, truncatedRemainder를 1로 나눈 다음 100을 곱하여 subseconds를 계산하십시오.

지역화된 decimalSeparator를 사용한 다음, subseconds를 추가하여 formattedString을 반환합니다.

showSubseconds가 거짓이면, 서브초 없이 formattedString을 반환하세요.

ElapsedTimeView의 미리보기를 보려면 이력서를 클릭하세요.

좋아 보인다.

분은 콜론의 왼쪽에 덧대진 0이 있다.

초는 콜론의 오른쪽에 덧대진 0이 있다.

서브초는 소수점 뒤에 표시됩니다.

ElapsedTimeView를 MetricsView에 추가해 봅시다.

MetricsView를 클릭하세요.

경과 시간 텍스트 보기를 ElapsedTimeView로 바꾸세요.

MetricsView를 미리 살펴봅시다.

좋아 보인다!

ControlsView에는 종료, 일시 정지 및 재개와 같은 진행 중인 세션을 제어하는 버튼이 있습니다.

종료 버튼을 탭하면, 운동 요약이 표시됩니다.

일시 정지 버튼을 탭하면, 운동이 일시 중지되고 MetricsView가 표시됩니다.

ControlsView를 만들어 봅시다.

파일 > 신규 > 파일, SwiftUI 보기를 클릭하고, 이 이름을 "ControlsView"로 지정하고 만들기를 클릭하세요.

끝과 일시 정지 버튼을 추가합시다.

HStack에는 각 VStack에 버튼과 텍스트 보기가 포함된 두 개의 VStack이 포함되어 있습니다.

종료 버튼의 라벨은 시스템 이름 "xmark"가 있는 이미지입니다.

이 버튼은 빨간색 색조를 가지고 있으며 제목2 글꼴을 사용하여 기호의 크기를 늘린다.

아래의 텍스트 보기에는 "끝" 문자열이 있습니다.

일시 정지 버튼은 시스템 이름 "일시 정지"가 있는 이미지를 사용합니다.

그건 노란 색조가 있어.

아래의 텍스트 보기에는 "일시 정지" 문자열이 있습니다.

ControlsView를 미리 보려면 재개를 클릭하세요.

좋아 보인다.

NowPlayingView는 운동 중에 미디어 재생 컨트롤을 제공합니다.

여기에는 현재 미디어를 재생하고 있는 타사 앱에 대한 컨트롤이 포함됩니다.

NowPlayingView를 추가합시다.

SessionPagingView를 선택하세요.

NowPlayingView는 WatchKit에서 제공합니다.

WatchKit을 가져오자.

텍스트 보기를 ControlsView, MetricsView 및 NowPlayingView로 바꿉시다.

NowPlayingView는 WatchKit에서 제공하는 SwiftUI 보기입니다.

그렇게 간단해.

SessionPagingView의 미리보기를 보려면 재개를 클릭하세요.

미리보기에서 MetricsView를 볼 수 있습니다.

ControlsView를 보려면 왼쪽으로 스와이프하세요.

오른쪽으로 끝까지 스와이프하세요...

...NowPlayingView를 보기 위해.

StartView로 돌아가서 NavigationLink의 목적지를 SessionPagingView로 변경합시다.

StartView를 선택하세요.

목적지를 SessionPagingView로 업데이트하세요.

요약 화면은 운동이 완료되었음을 확인하고 기록된 정보를 표시합니다.

우리는 사람들이 현재 진행 상황을 쉽게 확인할 수 있도록 활동 링을 포함하여 요약을 향상시킬 것입니다.

요약 보기를 만들어 봅시다.

파일 > 신규 > 파일, SwiftUI 보기를 클릭하고, 다음을 클릭하고, 이 이름을 "SummaryView"로 지정하고 생성을 클릭하세요.

메트릭과 그 가치를 설명하는 사용자 지정 SummaryMetricView를 만들어 봅시다.

SummaryMetricView는 메트릭과 메트릭의 값 문자열을 설명하는 제목을 사용합니다.

본문에는 두 개의 텍스트 보기와 디바이더가 포함되어 있습니다.

메트릭 값을 보여주는 텍스트 보기는 둥근 디자인과 소문자 SmallCaps의 제목 시스템 글꼴을 사용합니다.

그것은 accentColor를 전경색으로 사용한다.

SummaryView를 위한 운동 시간 포맷터를 만들어 봅시다.

durationFormatter는 콜론과 패드 0으로 구분된 시간, 분, 초를 표시하는 DateComponentsFormatter입니다.

SummaryMetricViews와 완료 버튼을 SummaryView에 추가합시다.

ScrollView와 VStack에는 네 개의 SummaryMetricViews와 완료 버튼이 포함되어 있습니다.

총 시간 텍스트 보기는 durationFormatter를 사용하여 콜론으로 구분된 시간, 분, 초를 표시합니다.

Total Distance SummaryMetricView는 축약된 단위를 사용하여 포맷된 기본값으로 측정을 사용합니다.

사용법은 로케일에 따라 자연스럽게 진행되는 영국식 또는 미터법 단위를 표시하는 도로이다.

Total Energy SummaryMetricView는 기본값과 킬로칼로리의 에너지 단위로 측정을 사용합니다.

그것은 축약된 단위를 사용하여 포맷되었다.

사용은 운동 에너지를 위한 운동이며, numberFormat은 fractionLength 0의 정밀도를 가지고 있다.

평균 심박수 SummaryMetricView는 숫자 정밀도, 0의 fractionLength로 포맷된 기본값을 사용하며, 분당 비트에 대해 "bpm"을 추가합니다.

우리는 나중에 SummaryMetricViews에 대한 실제 운동 값을 제공할 것입니다.

우리는 텍스트 뷰와 디바이더가 내비게이션 바 제목에 정렬되기를 원하기 때문에 VStack에서 .scenePadding()을 사용했습니다.

내비게이션 제목은 "요약"이 될 것이며 내비게이션 바에 인라인으로 표시됩니다.

다음으로 운동 요약에 활동 링을 추가해 봅시다.

파일 > 신규 > 파일, 스위프트 파일을 클릭하고, 다음을 클릭하고, 이 이름을 "ActivityRingsView"로 지정하고 생성을 클릭하세요.

HKHealthStore에 접속하려면 HealthKit을 가져오세요.

WKInterfaceObjectRepresentable에 액세스하려면 SwiftUI를 가져오세요.

ActivityRingsView 구조체는 WKInterfaceObjectRepresentable을 준수합니다.

healthStore 상수는 초기화 시 할당됩니다.

프로토콜을 준수하려면 두 가지 기능이 필요합니다: makeWKInterfaceObject와 updateWKInterfaceObject.

makeWKInterfaceObject 내부에서, 우리는 WKInterfaceActivityRing인 activityRingsObject를 선언합니다.

다음으로 우리는 HKActivitySummaryQuery의 술어와 오늘의 날짜 구성 요소를 사용합니다.

그런 다음 쿼리를 만들고 결과를 처리하여 메인 큐의 activityRingsObject에 대한 활동 요약을 설정합니다.

그런 다음 HKHealthStore에서 쿼리를 실행하세요.

마지막으로, activityRingsObject를 반환하세요.

ActivityRingsView를 SummaryView에 추가해 봅시다.

요약 보기를 클릭하세요.

HKHealthStore에 접속하기 위해 HealthKit을 가져오자.

다음으로, 완료 버튼 위에 텍스트 보기와 ActivityRingsView를 추가해 봅시다.

우리는 프레임 너비와 높이가 50인 텍스트 보기와 ActivityRingsViews를 추가했습니다.

우리는 지금 HKHealthStore를 만들 것이다.

나중에, 우리는 하나를 재사용할 것이다.

SummaryView를 미리 봅시다. 이력서를 클릭하세요.

스크롤하려면 라이브 미리보기를 클릭하세요.

SummaryMetricViews, Activity Rings 및 Done 버튼을 각각 확인하세요.

HealthKit 통합에 대해 이야기해 봅시다.

HealthKit은 운동 중 피트니스 활동을 추적하고 운동을 HealthKit에 저장할 수 있는 내장 기능을 제공합니다.

이렇게 하면 개발자로서 시간을 절약할 수 있으며, 고객은 모든 운동을 한 곳에 저장할 수 있습니다.

HK 운동 세션은 칼로리와 심박수와 같은 운동과 관련된 데이터를 정확하게 수집할 수 있도록 데이터 수집을 위해 장치의 센서를 준비합니다.

또한 운동이 활성화되어 있을 때 응용 프로그램을 백그라운드에서 실행할 수 있습니다.

HKLiveWorkoutBuilder는 HKWorkout 객체를 만들고 저장할 것이다.

그것은 당신을 위해 샘플과 이벤트를 자동으로 수집합니다.

더 알아보려면, "운동으로 일하는 새로운 방법" 세션을 확인하세요.

우리 앱의 데이터 흐름이 어떻게 될지 봅시다.

WorkoutManager는 HealthKit과의 인터페이스를 담당할 것이다.

그것은 HKWorkoutSession과 연결하여 운동을 시작, 일시 중지 및 종료합니다.

그것은 HKLiveWorkoutBuilder와 인터페이스하여 운동 샘플을 듣고 그 데이터를 우리의 견해에 제공합니다.

WorkoutManager는 환경 객체가 될 것이다.

환경 객체는 관찰 가능한 객체가 바뀔 때마다 현재 뷰를 무효화합니다.

우리는 WorkoutManager를 NavigationView의 뷰 계층 구조의 뷰로 전파할 MyWorkoutsApp의 NavigationView를 WorkoutManager environmentObject에 할당할 것입니다.

그런 다음 뷰는 환경에서 WorkoutManager에 액세스하기 위해 @EnvironmentObject를 선언합니다.

WorkoutManager를 만들어 봅시다.

파일 > 신규 > 파일, 스위프트 파일을 클릭하고, 다음을 클릭하고, 이 이름을 "WorkoutManager"로 지정하고 만들기를 클릭하세요.

WorkoutManager가 HealthKit의 API에 액세스할 수 있도록 HealthKit을 가져오세요.

그런 다음 ObservableObject 프로토콜을 준수하는 NSObject인 WorkoutManager 클래스를 정의하십시오.

우리는 WorkoutManager에 대한 모든 견해를 제공하고 싶습니다.

우리는 MyWorkoutsApp의 NavigationView에서 WorkoutManager를 환경 객체로 할당하여 이를 수행합니다.

MyWorkoutsApp을 선택하세요.

workoutManager를 StateObject로 추가하세요.

환경 객체 뷰 수정자를 NavigationView에 추가하세요.

NavigationView에 environmentObject가 할당되면, environmentObject를 뷰 계층 구조의 뷰로 자동으로 전달합니다.

내비게이션 모델을 설정해 봅시다.

WorkoutManager를 선택하세요.

WorkoutManager는 선택 사항인 HKWorkoutActivityType인 선택한 운동을 관리할 것입니다.

선택한 운동을 추적하기 위해 선택한 운동 변수를 추가했습니다.

이제 StartView의 NavigationLink는 선택을 WorkoutManager의 선택한 운동에 바인딩해야 합니다.

StartView를 선택하세요.

workoutManager EnvironmentObject를 StartView에 추가하세요.

태그와 선택으로 NavigationLink를 업데이트합시다.

태그는 운동 유형이다.

선택은 workoutManager에서 selectedWorkout에 바인딩됩니다.

이제, 운동이 탭될 때마다, workoutManager에서 선택된 운동이 업데이트됩니다.

이제 운동이 선택되면 HKWorkoutSession과 HKLiveWorkoutBuilder를 시작합시다.

WorkoutManager를 선택하세요.

HKHealthStore, HKWorkoutSession 및 HKLiveWorkoutBuilder를 추가하세요.

이제, 운동을 시작하기 위해 startWorkout 기능을 만들어 봅시다.

startWorkout 기능은 workoutType 매개 변수를 사용합니다.

HKWorkoutConfiguration은 workoutType을 사용하여 생성됩니다.

우리 앱의 경우, 우리의 모든 운동은 야외가 될 것이다.

위치 유형은 HKWorkoutSession과 HKLiveWorkoutBuilder의 작동 방식을 결정합니다.

예를 들어, 야외 사이클링 활동은 정확한 위치 데이터를 생성하는 반면, 실내 사이클링 활동은 그렇지 않다.

healthStore와 구성을 사용하여 HKWorkoutSession을 만드세요.

세션의 관련 WorkoutBuilder에 빌더를 할당하세요.

이것은 던져진 오류를 처리하기 위해 도캐치 블록에서 수행됩니다.

healthStore와 workoutConfiguration을 사용하여 빌더의 dataSource를 HKLiveWorkoutDataSource에 할당하세요.

HKLiveWorkoutDataSource는 활성 운동 세션의 실시간 데이터를 자동으로 제공합니다.

startDate를 만들고, 세션에서 startActivity를 호출하고, 빌더에서 StartCollection을 시작하세요.

선택된 운동이 바뀔 때마다, startWorkout에 전화합시다.

선택된 운동은 0이 될 수 있다.

선택된 운동이 0이 아닐 때만 startWorkout을 호출하려면 가드 문을 사용하세요.

앱이 운동 세션을 만들기 전에, HealthKit을 설정하고 앱이 사용하려는 건강 데이터를 읽고 공유할 수 있는 권한을 요청해야 합니다.

승인을 요청하는 기능을 추가합시다.

운동 세션의 경우, 우리는 운동 유형을 공유할 수 있는 허가를 요청해야 합니다.

우리는 또한 세션의 일환으로 Apple Watch에 의해 자동으로 기록된 모든 데이터 유형을 읽고 싶습니다.

우리는 또한 활동 반지 요약을 읽을 수 있는 허가를 원합니다.

그런 다음 healthStore에서 requestAuthorization에 전화하세요.

보기가 나타나면 HealthKit에서 StartView 요청 승인을 갖자.

StartView를 클릭하세요.

나타나면, workoutManager의 requestAuthorization 기능이 호출될 것이다.

확장을 위해 HealthKit을 활성화합시다.

MyWorkouts의 프로젝트 파일을 선택하세요...

... MyWorkouts WatchKit 확장, 서명 및 기능.

기능 추가를 선택하고, 아래로 스크롤하고, HealthKit을 선택하세요.

활성 운동 세션이 있는 앱은 백그라운드에서 실행할 수 있으므로, WatchKit 확장 프로그램에 백그라운드 모드 기능을 추가해야 합니다.

운동 세션에는 운동 처리 배경 모드가 필요합니다.

기능 추가, 배경 모드를 선택하세요.

운동 처리를 선택하세요.

WatchKit Extension의 Info.plist 파일에 사용 설명을 추가해야 합니다.

Info.plist를 선택하세요.

마지막 행을 선택한 다음, Return을 누르세요.

NSHealth ShareUsageDescription 키를 사용하세요.

앱이 요청된 데이터를 읽어야 하는 이유를 설명하세요.

리턴을 누르세요.

NSHealth UpdateUsageDescription 키를 사용하세요.

앱이 쓰려고 하는 데이터를 설명하세요.

HealthKit의 앱 요청 권한을 보려면 앱을 빌드하고 실행합시다.

실행을 클릭하세요.

저희 앱은 HealthKit 인증을 요청했습니다.

아래로 스크롤하고 검토를 클릭하세요.

아래에서 요청된 모든 데이터를 선택하세요.

우리 앱이 운동 공유를 요청했는지 확인하세요.

우리가 제공한 설명을 보세요.

다음을 탭하세요.

우리 앱은 읽기 액세스를 요청했습니다.

아래에서 요청된 모든 데이터를 선택하세요.

우리 앱이 읽기 액세스를 요청한 데이터 유형을 확인하세요.

우리가 제공한 설명을 보세요.

완료를 탭하세요.

이제 운동 세션이 시작될 수 있으므로, 우리는 HKWorkoutSession을 제어해야 합니다.

WorkoutManager를 선택하세요.

세션 상태 제어 논리를 추가합시다.

"실행"이라는 이름의 @Published 변수는 세션이 실행 중인 경우 추적합니다.

일시 정지 및 재개 기능은 세션을 일시 중지하고 재개합니다.

togglePause 기능은 세션이 실행 중인지에 따라 세션을 일시 중지하거나 재개합니다.

endWorkout 기능은 세션을 종료할 것이다.

WorkoutManager를 HKWorkoutSessionDelegate로 확장하여 세션 상태의 변경 사항을 들어봅시다.

workoutSession didChangeTo toState fromState with Date 함수는 세션 상태가 변경될 때마다 호출됩니다.

우리의 실행 변수는 toState가 실행 중인지 여부에 따라 업데이트되며 UI 업데이트를 위해 기본 대기열로 발송됩니다.

세션이 끝나면, 운동 샘플 수집을 중단하기 위해 제공된 종료 날짜와 함께 빌더의 endCollection을 호출하십시오.

endCollection이 완료되면, finishWorkout에 전화하여 HKWorkout을 건강 데이터베이스에 저장하세요.

WorkoutManager를 HKWorkoutSession 대리인으로 지정하세요.

이제 ControlsView를 일시 중지하고, 재개하고, 세션을 종료합시다.

ControlsView를 선택하세요.

우리의 보기가 세션을 제어할 수 있도록 workoutManager를 EnvironmentObject로 추가하세요.

workoutManager에서 End 버튼의 액션 콜 endWorkout을 하세요.

일시 정지/재개 버튼은 세션을 일시 중지하거나 재개하고 세션 상태에 따라 이미지와 텍스트를 업데이트해야 합니다.

버튼의 동작은 workoutManager의 togglePause 기능을 호출하여 세션을 일시 중지하거나 재개합니다.

버튼의 이미지의 시스템 이름은 workoutManager의 실행 변수에 따라 "일시 정지" 또는 "재생"입니다.

버튼 아래의 텍스트는 workoutManager의 실행 변수를 기반으로 한 "일시 정지" 또는 "재개"를 보여줍니다.

탐색 모음에 운동 이름을 표시하기 위해 SessionPagingView를 업데이트합시다.

SessionPagingView를 선택하세요.

SessionPagingView는 WorkoutManager 환경 변수에 액세스해야 하므로, 그것을 추가해 봅시다.

이제 내비게이션 바를 구성해 봅시다.

내비게이션 제목은 WorkoutManager가 선택한 운동의 이름입니다.

내비게이션 바의 뒤로 버튼은 숨겨져 있습니다. 왜냐하면 우리는 누군가가 운동하는 동안 StartView로 돌아가는 것을 원하지 않기 때문입니다.

NowPlayingView가 표시되면, 내비게이션 바를 숨기고 싶습니다.

누군가가 운동을 일시 중지하거나 재개할 때, MetricsView로 스와이프할 필요가 없습니다.

우리는 onChange 보기 수정자를 추가하여 그들을 위해 이것을 할 수 있습니다.

WorkoutManager의 실행 중인 게시된 변수가 변경되면, displayMetricsView 함수가 호출됩니다.

displayMetricsView는 선택 상태 변수를 애니메이션으로 메트릭으로 설정합니다.

이제 운동이 끝날 수 있으므로, SummaryView를 표시하고 해제할 수 있는 기능을 추가해 봅시다.

WorkoutManager를 클릭하세요.

부울 기본값이 false인 "showingSummaryView"라는 이름의 게시된 변수를 추가하세요.

이 변수는 앱의 탐색 보기에서 시트 선택에 대한 바인딩을 제공합니다.

endWorkout에서, showingSummaryView를 true로 설정하세요.

MyWorkoutsApp의 NavigationView에 SummaryView를 시트로 추가합시다.

MyWorkoutsApp을 클릭하세요.

NavigationView에 시트 보기 수정자를 추가하세요.

isPresented 매개 변수는 workoutManager의 showingSummaryView에 바인딩됩니다.

시트의 내용은 SummaryView입니다.

SummaryView에서 시트를 닫을 수 있는 기능을 추가해 봅시다.

요약 보기를 클릭하세요.

해고 Dnvironment 변수를 추가하세요.

완료 버튼의 작업에서, dismiss()를 호출하세요.

애플리케이션을 실행하여 세션을 시작하고 종료하고 SummaryView가 표시되는 것을 봅시다.

이전 실행을 중지하려면 중지를 클릭하세요.

실행을 클릭하세요.

달리기 운동을 탭하세요.

기본 메트릭 값은 여전히 세션과 요약에 표시됩니다.

우리는 나중에 그걸 설정할 거야.

왼쪽으로 스와이프하세요.

일시 정지를 탭하세요.

MetricsView가 표시되는 것을 주목하세요.

왼쪽으로 스와이프하세요.

이제 버튼에 "복제"가 표시됩니다.

끝을 탭하세요.

우리의 운동 요약은 시트로 표시됩니다.

아래로 스크롤해.

완료를 탭하세요.

시트가 해제되고 StartView가 표시됩니다.

실제 운동 지표를 보여주기 위해 MetricsView와 SummaryView를 봅시다.

WorkoutManager는 MetricsView와 SummaryView가 관찰할 수 있는 게시된 운동 지표를 노출할 것이다.

WorkoutManager를 선택하세요.

WorkoutManager에 게시된 메트릭 변수를 추가해 봅시다.

averageHeartRate는 SummaryView에서 사용될 것이다.

심장 Rate, 활성 에너지 및 거리는 MetricsView에 의해 관찰될 것이다.

WorkoutManager는 HKLiveWorkoutBuilderDelegate가 되어 빌더에 추가된 운동 샘플을 관찰해야 합니다.

지금 하자.

먼저, 빌더의 대리인을 WorkoutManager로 지정합시다.

이제 WorkoutManager가 HKLiveWorkout BuilderDelegate 프로토콜을 준수하도록 합시다.

우리는 HKLiveWorkout BuilderDelegate 프로토콜을 준수하도록 WorkoutManager를 확장했습니다.

workoutBuilderDidCollectEvent는 빌더가 이벤트를 수집할 때마다 호출됩니다.

우리는 앱을 위해 이 기능을 비워 둘 것이다.

workoutBuilder didCollectDataOf collectedTypes는 빌더가 새로운 샘플을 수집할 때마다 호출됩니다.

우리는 collectedTypes의 각 유형을 반복할 것이다.

경비원은 수집된 유형이 HKQuantityType임을 보장합니다.

통계는 그 수량 유형에 대한 빌더로부터 읽힌다.

updateForStatistics -- 우리가 곧 만들 함수 --가 호출되어 게시된 메트릭 값을 업데이트합니다.

updateForStatistics 기능을 만들어 봅시다.

updateForStatistics는 선택적 HKStatistics 객체를 사용합니다.

통계가 0이면 경비원이 일찍 돌아온다.

메트릭 업데이트를 기본 대기열에 비동기적으로 발송하세요.

각 수량 유형을 바꾸세요.

심장 박동의 경우, 우리는 분당 비트를 원하므로, HKUnit를 1분 HKUnit로 나눈 카운트를 사용합니다.

heartRate를 분당 비트에 대한 mostRcentQuantity의 doubleValue로 할당하세요.

averageHeartRate를 통계로 할당하세요.분당 비트에 대한 averageQuantity의 doubleValue.

activeEnergyBurned quantityType의 경우, 킬로칼로리 energyUnit를 사용하세요.

activeEnergy를 energyUnit에 대한 sumQuantity의 doubleValue로 할당하세요.

걷기, 달리기, 사이클링 거리는 meterUnit에 대한 sumQuantity의 doubleValue를 받으세요.

이제 MetricsView가 WorkoutManager의 메트릭 값을 사용하도록 합시다.

MetricsView를 선택하세요.

workoutManager를 환경 변수로 추가하세요.

WorkoutManager의 메트릭 값을 사용하기 위해 우리의 견해를 업데이트합시다.

ElapsedTimeView는 workoutManager의 빌더의 elapsedTime을 사용합니다.

activeEnergy 텍스트 보기의 측정은 workoutManager의 activeEnergy를 사용합니다.

하트레이트 텍스트 보기는 workoutManager의 하트레이트를 사용합니다.

거리 텍스트 보기의 측정은 workoutManager의 거리를 사용합니다.

빌더의 경과 시간 변수는 게시되지 않으므로, 현재 빌더의 경과 시간이 업데이트될 때 우리의 보기는 업데이트되지 않습니다.

우리가 할 수 있는 것은 VStack을 TimelineView로 감싸는 것이다.

TimelineView는 올해 새롭다.

TimelineView는 일정에 따라 시간이 지남에 따라 업데이트됩니다.

watchOS 앱은 이제 Always On 상태를 지원합니다.

TimelineViews는 Always On 컨텍스트의 변경 사항을 인식합니다.

자세히 알아보려면, "watchOS 8의 새로운 기능"과 "SwiftUI의 새로운 기능" 세션을 확인하세요.

앱은 활성 상태 또는 항상 켜져 있을 수 있습니다.

활동적인 운동 세션이 있는 앱은 기껏해야 1초에 한 번씩 항상 켜져 있는 상태로 업데이트할 수 있습니다.

이것은 MetricsView가 Always On 상태에서 하위 초를 숨겨야 한다는 것을 의미합니다.

보기를 단순화하기 위해 페이지 표시기 컨트롤을 숨기는 것과 같은 Always On 상태에 대한 다른 디자인 고려 사항을 고려해야 합니다.

TimelineView는 Always On 컨텍스트에 의해 지시된 TimelineScheduleMode에 따라 간격을 변경하는 사용자 지정 TimelineSchedule이 필요합니다.

사용자 지정 타임라인 일정을 만들어 봅시다.

MetricsTimelineSchedule에는 일정이 언제 시작되어야 하는지에 대한 시작 날짜가 있습니다.

그것의 이니셜라이저는 시작일을 취한다.

MetricsTimelineSchedule은 PeriodicTimelineSchedule 항목을 생성하기 위해 항목 기능을 구현합니다.

이 함수는 startDate를 사용하여 PeriodicTimelineSchedule을 만듭니다.

간격은 타임라인 스케줄 모드에 의해 결정된다.

TimelineScheduleMode가 주파수가 낮을 때, TimelineSchedule 간격은 1초입니다.

TimelineScheduleMode가 정상일 때, 간격은 초당 30회입니다.

VStack을 TimelineView로 포장합시다.

TimelineView는 빌더의 startDate를 사용하여 MetricsTimelineSchedule을 사용합니다.

ElapsedTimeView의 showSubseconds는 TimelineView의 context.cadence에 의해 결정됩니다.

케이던스가 라이브일 때, 서브초가 표시됩니다.

그렇지 않으면 서브초는 Always On 상태로 숨겨져 있습니다.

운동 중에 업데이트되는 메트릭을 보기 위해 애플리케이션을 실행해 봅시다.

현재 실행을 중지하려면 중지를 클릭하세요.

실행을 클릭하세요.

달리기 운동을 탭하세요.

경과된 시간이 증가하고 있다는 것을 주목하세요.

watchOS 시뮬레이터는 실시간 운동 샘플을 수집하는 것을 자동으로 시뮬레이션합니다.

칼로리가 누적되고 있다.

심박수가 업데이트되고 있어.

거리가 쌓이고 있다.

시뮬레이터에서 잠금 버튼을 클릭하여 Always On 상태를 시도해 봅시다.

서브초는 숨겨져 있고 메트릭은 초당 한 번만 업데이트됩니다.

활성 상태로 돌아가려면 잠금 해제 버튼을 클릭하세요.

왼쪽으로 스와이프하고 운동을 끝내세요.

SummaryView는 여전히 실제 HKWorkout 값이 필요하다.

지금 하자.

먼저, SummaryView에서 사용할 HKWorkout을 WorkoutManager에 추가해 봅시다.

WorkoutManager를 선택하세요.

HKWorkout 게시 변수를 추가하세요.

빌더가 운동 저장을 마치면, 빌더의 finishWorkout 기능이 완료되면 WorkoutManager에 운동을 할당하세요.

우리는 UI 업데이트를 위한 메인 큐에서 이 과제를 합니다.

SummaryView가 해제되면, 우리는 모델을 재설정해야 합니다.

이것을 하는 resetWorkout 기능을 만들어 봅시다.

resetWorkout 기능은 모든 모델 변수를 초기 상태로 재설정합니다.

요약이 해제되면 resetWorkout에 전화합시다.

이것은 showingSummaryView의 didSet에서 이루어집니다.

SummaryView를 표시하기 전에 운동이 저장되는 동안 운동이 끝나면 진행 상황 보기를 표시해 봅시다.

우리의 SummaryView로 가자.

요약 보기를 클릭하세요.

먼저, workoutManager EnvironmentObject를 SummaryView에 추가하세요.

빌더가 운동 저장을 마칠 때 workoutManager가 HKWorkout을 할당할 때까지 ProgressView를 표시하고 싶습니다.

workoutManager의 운동이 0이면, "운동 절약"이라는 텍스트와 함께 ProgressView를 표시하고 탐색 모음을 숨기세요.

우리는 또한 workoutManager의 HKHealthStore를 사용하기 위해 ActivityRingsView를 업데이트했습니다.

앱당 하나의 HKHealthStore만 있으면 됩니다.

HKWorkout 값을 사용하기 위해 SummaryMetricViews를 업데이트합시다.

총 시간 메트릭 보기는 운동 기간을 사용합니다.

totalDistance 메트릭 뷰는 운동의 총 거리를 사용합니다.

총 에너지 메트릭 뷰는 운동의 totalEnergyBurned를 사용합니다.

평균 심박수 지표 보기는 workoutManager의 평균 심박수를 사용합니다.

나중을 위해 평균 심박수를 저장하려면, 운동을 저장하기 전에 빌더에 메타데이터로 추가할 수 있습니다.

Always On 상태에 반응하기 위해 SessionPagingView를 업데이트합시다.

SessionPagingView를 선택하세요.

isLuminanceReduced Environment 변수를 추가하세요.

Always On 상태 동안, 우리는 TabView의 페이지 표시기를 숨기고 MetricsView가 표시되는지 확인하고 싶습니다.

우리는 isLuminanceReduced를 기반으로 tabViewStyle의 indexDisplayMode를 절대 또는 자동으로 설정했습니다.

isLuminanceReduced가 변경되면, displayMetricsView 함수를 호출하여 MetricsView를 표시하십시오.

시뮬레이터에서 앱을 실행하고 시도해 봅시다.

마지막 달리기를 멈추려면 중지를 클릭하세요.

실행을 클릭하세요.

달리기 운동을 선택하세요.

알림 메트릭은 빌더에서 실시간으로 업데이트되고 있습니다.

왼쪽으로 스와이프하세요. 일시 정지를 탭하세요.

운동이 일시 중지되었기 때문에, 메트릭이 업데이트를 멈췄습니다.

왼쪽으로 스와이프하세요. 이력서를 탭하세요.

메트릭은 업데이트를 재개한다.

오른쪽으로 스와이프하고, NowPlayingView를 보세요.

왼쪽으로 스와이프하세요.

항상 켜짐 상태를 트리거하려면 잠금을 클릭하세요.

서브초가 숨겨져 있고 페이지 제어 표시기가 숨겨져 있습니다.

활성 상태를 재개하려면 잠금 해제를 클릭하세요.

왼쪽으로 스와이프하고, 끝을 탭하세요.

운동이 절약된다.

요약이 표시됩니다.

각 지표를 보려면 아래로 스크롤하세요.

활동 링은 에너지의 양, 운동 시간 및 대기 시간에 따라 채워질 것이다.

완료를 탭하세요.

우리는 다음 운동을 위해 준비된 시작 보기로 다시 데려간다.

SwiftUI를 사용하여 Always On 상태를 지원하는 HealthKit과 통합된 완벽하게 작동하는 운동 앱을 구현하는 것이 얼마나 쉬운지 보았습니다.

우리는 당신이 다음에 어떤 훌륭한 운동 앱을 만들 것인지 빨리 보고 싶습니다!

♪