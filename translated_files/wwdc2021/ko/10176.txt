10176

♪ ♪

안녕하세요, 저는 SwiftUI 팀의 엔지니어인 Harry입니다.

"SwiftUI의 공예 검색 경험"에 오신 것을 환영합니다.

검색은 올해 SwiftUI에서 완전히 새로워졌고, 이러한 기능을 사용하는 방법을 보여드리게 되어 기쁩니다.

때때로, 당신은 앱 내에서 특정한 것을 찾고 싶지만, 많은 앱에는 대규모 데이터 모음이 포함되어 있어, 당신이 찾고 있는 것을 정확히 찾기가 어려울 수 있습니다.

최신 앱 트렌드, 다음 가장 좋아하는 노래 또는 아침 출퇴근에 적합한 팟캐스트를 찾든, 검색을 구현하면 바로 그렇게 하는 데 도움이 됩니다.

최고의 검색 경험은 앱의 구조와 내용에 따라 달라질 수 있습니다.

하지만, 일반적으로, 모든 경험에는 검색 쿼리를 정의하는 검색 필드가 포함될 것이다.

이제 SwiftUI에서 직접 검색을 구현할 수 있습니다.

한 번 보자.

이 강연에서, 저는 SwiftUI의 모든 검색 기능의 기초를 형성하는 새로운 검색 가능한 수정자를 소개할 것입니다.

나는 내비게이션 뷰가 검색 가능한 수정자와 어떻게 통합되는지 보여줄 것이다.

마지막으로, 검색 제안을 추가하여 검색 가능한 수정자의 기능을 확장하는 것을 다루겠습니다.

Searchable은 모든 플랫폼에서 사용할 수 있는 SwiftUI의 새로운 보기 수정자입니다.

그것은 당신이 보기 콘텐츠를 검색 가능한 것으로 표시할 수 있게 해준다.

그 내용은 그것이 무엇을 의미하는지 정확히 정의할 것이다.

이 강연을 통해, 나는 각 플랫폼에서 이 수정자의 예를 살펴볼 것이다.

이제, 이 수정자를 더 잘 이해하기 위해, 날씨에 대해 이야기해 봅시다!

iOS에서 검색의 좋은 예는 새로운 날씨 앱에서 찾을 수 있습니다.

도시 목록을 볼 때, 검색 창에 입력을 시작할 수 있으며, 이는 목록에 추가할 새로운 도시를 검색합니다.

Weather가 이 기능을 강화하기 위해 검색 가능한 수정자를 어떻게 사용하는지 설명하기 위해, UI의 구조를 분석해 봅시다.

날씨는 내비게이션 바를 제공하는 내비게이션 보기로 시작한다.

날씨는 내비게이션 보기의 콘텐츠로 사용자 지정 목록을 추가합니다.

그리고 그 목록 안에, 그것은 셀 위에 ForEach를 추가한다.

마지막으로, 날씨는 탐색 보기에 검색 가능한 수정자를 추가합니다.

모든 검색 가능한 수정자의 핵심은 검색 필드의 구성이다.

검색 가능한 수정자는 구성된 검색 필드를 가져와 각 플랫폼에 가장 적합한 방식으로 다른 뷰를 사용할 수 있도록 환경을 통해 전달합니다.

여기서, 내비게이션 뷰는 검색 필드를 이해하고 검색 표시줄로 렌더링할 것이다.

구성된 검색 필드를 사용하는 뷰가 없는 경우, 검색 가능한 수정자는 도구 모음에서 검색 필드를 렌더링하는 기본 구현을 제공합니다.

이제, 검색 필드는 종종 검색 관련 UI의 유일한 부분이 아니다.

어떤 형태의 검색 결과를 표시하는 것은 일반적인 디자인 패턴이다.

날씨는 이 패턴을 따르며, 비어 있지 않은 검색 쿼리를 볼 때마다 사용자 지정 목록을 전환하여 현재 쿼리의 결과가 포함된 다른 목록을 표시합니다.

Weather가 이 UI를 달성하기 위해 검색 가능한 수정자에 의해 판매된 정보를 어떻게 사용할 수 있는지 봅시다.

여기 날씨의 사용자 지정 목록이 있습니다.

검색 가능한 수정자는 사용자가 적극적으로 검색하고 있는지 여부에 따라 Weather가 표시되는 뷰를 동적으로 변경하는 데 사용하는 isSearching이라는 새로운 환경 속성을 설정합니다.

날씨는 isSearching 환경 속성과 검색 텍스트를 쿼리하여 결과 보기를 조건부로 표시합니다.

자신의 결과를 렌더링할 때, 사용자가 검색 상호 작용에서 돌아온 후 기본 UI의 상태가 변경되지 않도록 오버레이를 사용하는 것을 고려하십시오.

탐색 보기가 새로운 검색 가능한 수정자와 어떻게 통합되는지에 대해 조금 더 이야기해 봅시다.

그렇게 하기 위해, 저는 제가 끊임없이 작업해온 앱을 소개하고 싶습니다.

난 그걸 색이라고 불러.

이 앱을 통해 사용자는 팔레트라고 불리는 자신이 좋아하는 색상 세트의 라이브러리를 관리할 수 있습니다.

방을 위한 다양한 페인트, 앱의 테마로 놀거나, 새로운 M1 iMac의 색상을 고르는 데 도움을 받고 싶을 수도 있습니다.

당신의 욕망에 상관없이, 색상은 당신을 위한 앱입니다.

색상의 기본 구조는 이중 열 탐색 보기이며, 첫 번째 열인 루트 보기는 iPadOS와 macOS의 사이드바 또는 다른 플랫폼의 탐색 스택의 루트입니다.

사이드바에서, 당신은 내 컬러 팔레트 라이브러리를 볼 수 있습니다.

세부 보기에서, 현재 선택된 색상 팔레트와 시각적 차이가 있는 사용자에게 색상이 어떻게 나타날 수 있는지 볼 수 있습니다.

사람들이 앱을 사용하기 시작하면서, 나는 무언가를 알아차리기 시작했다.

사람들은 색을 좋아해.

그들은 라이브러리에 지속적으로 색상을 추가하고 있지만, 라이브러리가 커짐에 따라, 사람들이 그것을 찾기 위해 전체 라이브러리를 스크롤해야 하기 때문에 특정 색상 팔레트를 찾기가 어려워진다.

이 시점에서, 나는 검색 기능을 추가할 때라고 결정했다.

내 앱을 사용하는 사람들이 즉시 이해할 수 있도록 이 기능이 플랫폼 규칙을 따르기를 원합니다.

이 기능을 구현하기 위해 검색 가능한 수정자를 어떻게 사용할 수 있는지 살펴봅시다.

여기 Colors 앱의 일부로 만든 내비게이션 보기가 있습니다.

검색을 구현하기 위해, 탐색 보기에 검색 가능한 수정자를 추가할 것입니다.

이전과 마찬가지로, 나는 검색 쿼리를 뒷받침하는 상태에 대한 바인딩을 제공할 것이다.

다시 말하지만, 이것은 iOS와 iPadOS에서 검색 표시줄로 렌더링될 것이다.

탐색 보기가 검색 가능한 수정자의 콘텐츠일 때, 검색 필드를 열 중 하나와 연결합니다.

사용하는 열은 탐색 보기에 제공된 열의 수에 따라 다릅니다.

두 열의 탐색 보기가 있기 때문에, 검색 표시줄은 iOS와 iPadOS 모두의 사이드바 열과 관련이 있습니다.

기본값이 아닌 열과 연결된 검색 필드를 원한다면, 기존 도구 모음 수정자와 같이 원하는 열에 검색 가능한 수정자를 배치할 수 있습니다.

이 앱의 경우, 내비게이션 보기에서 계속 검색할 수 있습니다.

날씨와 마찬가지로, 저는 isSearching 환경 속성을 사용하여 사이드바를 통해 검색 결과를 동적으로 표시할 것입니다.

macOS에서 검색 가능한 수정자의 동일한 배치는 창이 축소됨에 따라 자동으로 축소되는 것과 같이 해당 플랫폼에서 예상되는 동작과 함께 도구 모음의 가장 후행 위치에 검색 필드를 렌더링합니다.

여기서, macOS에서 더 일반적인 경험을 위해 앱의 세부 정보 창에 검색 결과를 렌더링할 것입니다.

watchOS는 도구 모음의 보기 상단에 검색 필드를 배치한다는 점에서 iOS와 유사하게 동작합니다.

여기서, SwiftUI는 검색 필드를 연결할 첫 번째 열을 선택합니다.

플랫폼에서 이러한 다양한 행동을 생성하기 위해 검색 가능한 수정자를 배치한 위치를 어떻게 바꾸지 않았는지 주목하세요.

내 앱의 구조는 이 플랫폼에서 바뀌지 않았고 이중 열 탐색 보기로 남아 있었다.

SwiftUI는 이 구조와 다른 플랫폼 규칙을 이해하므로, 나를 대신하여 구현을 처리했다.

tvOS를 볼 때, 나는 다른 플랫폼에서 내 앱의 구조가 더 적절해질 수 있다는 것을 깨달았다.

tvOS는 일반적으로 탭 보기에서 탭으로 검색을 렌더링하지만, 내 앱에는 탭 보기가 없습니다.

내 앱에 대한 몇 가지 조정만으로, 나는 그것을 고칠 수 있다.

이중 열 탐색 보기를 렌더링하는 대신, 탭 보기를 탐색 보기의 콘텐츠로 단일 열 탐색 보기를 렌더링하여 더 일반적인 tvOS 경험을 만들 수 있습니다.

내 탭 보기에서, 나는 기존 사이드바 보기를 배치하고 새로운 검색 탭을 추가할 것이다.

검색 탭은 누군가가 그 탭으로 처음 이동할 때 볼 수 있는 자리 표시자 보기를 나타냅니다.

마지막으로, 탐색 보기를 감싸는 대신, 검색 가능한 수정자를 이동하여 검색 탭을 감싸겠습니다.

비어 있지 않은 검색 쿼리가 입력되면, 검색 결과를 표시하기 위해 보기를 전환할 것입니다.

이제 각 플랫폼에 검색 기능을 추가했습니다.

내 앱의 탐색 구조가 일관되게 유지된 SwiftUI의 선언적 특성 덕분에, 나는 SwiftUI에 의존할 수 있었고, 검색 가능한 수정자의 구현이 특정 탐색 구조에 적합한 인터페이스를 선택할 수 있었다.

내 앱의 구조가 바뀐 tvOS에서, 나는 검색 가능한 수정자에 대해 배운 것을 다른 구조에 적용했다.

내가 "검색 가능"이라고 정의한 것만이 그 구조로 바뀌었다.

이제 검색 가능한 수정자를 이해했으므로, 마지막 주제인 검색 제안으로 넘어가겠습니다.

내 앱에서 검색을 사용한 후, 몇몇 사용자는 검색이 제공하는 새로운 기능을 정말 좋아하지만, 때때로 검색할 수 있는 것을 잃을 때가 있다고 보고했다.

많은 앱은 사람들이 제공할 수 있는 검색어 유형으로 안내하기 위해 검색 제안을 사용합니다.

이러한 제안은 macOS와 같은 메뉴, iOS와 같은 목록 또는 watchOS와 같은 목록을 표시하는 버튼으로 표시될 수 있는 완료된 검색 쿼리를 나타냅니다.

제안은 사람들에게 그들이 검색할 수 있는 것들의 유형에 대한 아이디어를 준다.

SwiftUI는 앱에 검색 제안을 쉽게 추가할 수 있는 방법을 제공합니다.

한 번 보자.

내 앱을 보면, 내가 텍스트로 검색 가능한 수정자를 구성했다는 것을 알 수 있다.

검색 가능한 수정자는 내가 포함하기 시작할 수 있는 제안이라고 불리는 선택적 매개 변수를 제공한다.

제안 매개 변수에 대해, 나는 뷰를 제공할 것이다.

이것은 단지 몇 개의 정적 버튼일 수도 있고, 내 앱 데이터베이스나 서버에서 오는 동적 제안 세트에 대한 ForEach일 가능성이 더 높다.

SwiftUI는 이 보기를 살펴보고 표시할 제안이 있는지 여부에 따라 제시할 것이다.

예를 들어, watchOS는 비어 있지 않은 제안을 제공할 때 검색 필드에 아이콘을 렌더링합니다.

여기서 일반적인 패턴은 상호 작용할 때 검색 가능한 수정자에 제공된 텍스트 바인딩을 검색 제안의 텍스트 값으로 업데이트하는 ForEach 버튼을 제공하는 것일 수 있습니다.

사실, 우리는 이 패턴이 너무 흔해서 이것을 하는 searchCompletion 수정자를 추가했을 것으로 예상합니다.

비대화식 보기와 함께 searchCompletion 수정자를 사용할 수 있습니다.

그것은 그 보기를 검색 텍스트를 업데이트하고 현재 제시된 제안을 무시하는 버튼으로 변환할 것이다.

사용자가 먼저 제안과 상호 작용한 다음 해당 제안을 기반으로 전체 검색 결과 세트를 가져오는 앱을 만드는 경우, 새로운 onSubmit 수정자를 사용하여 검색 결과를 가져올 시기를 아는 것을 고려하십시오.

검색 값을 onSubmit 수정자로 전달하면 사용자가 검색 쿼리를 제출할 때마다 제공하는 클로저가 호출됩니다.

이것은 일반적으로 검색 제안을 선택하거나 하드웨어 키보드에서 Enter 키를 누를 때 발생합니다.

또한 검색과 관련 없는 제출을 위해 텍스트 필드 또는 보안 필드와 함께 새로운 onSubmit 수정자를 사용할 수 있습니다.

검색 완료 수정자와 함께 제안 매개 변수를 사용하면 앱에 강력한 검색 제안 기능을 쉽게 추가할 수 있습니다.

SwiftUI가 현재 제공하는 검색 기능에 대한 간략한 둘러보기를 바랍니다.

요약하자면, 검색 가능한 수정자를 사용하면 보기 콘텐츠를 검색 가능한 것으로 설명할 수 있습니다.

내비게이션 뷰는 검색 가능한 수정자와 통합되어 내비게이션 뷰의 내용을 기반으로 플랫폼에 적합한 경험을 제공합니다.

환경의 isSearching 속성을 사용하여 사용자가 검색할 때 앱의 UI를 동적으로 조정하십시오.

검색 완료 수정자와 검색 가능한 수정자의 제안 매개 변수를 사용하여 앱에 검색 제안을 추가하십시오.

이제, 나가서 모든 SwiftUI 앱에 검색을 추가하고, 멋진 WW를 보내세요.

[쾌활한 음악].