10235

안녕하세요, 제 이름은 윌이고, 저는 애플의 디자인 매니저입니다.

오늘, 제 동료 Hannah와 함께, DocC를 사용하여 대화형 개발자 튜토리얼을 작성하는 방법을 보여드리겠습니다.

튜토리얼은 API를 사용하여 실제 앱을 빌드하는 단계별 지침과 함께 신속한 프레임워크 또는 패키지가 어떻게 작동하는지에 대한 세부 사항을 개발자에게 가르칠 수 있는 좋은 방법입니다.

당신은 우리가 애플에서 작성한 몇 가지 튜토리얼에 익숙할 것입니다.

우리는 당신에게 SwiftUI와 Mac Catalyst를 소개하기 위한 튜토리얼을 만들었습니다.

이 입문 튜토리얼에서, 당신은 그 프레임워크의 기초를 배우고 단계별 코드 예제를 따라 기술을 쌓을 수 있습니다.

우리는 프레임워크 채택자들이 튜토리얼에 제시된 새로운 아이디어로 얼마나 빨리 시작할 수 있는지 좋아한다는 것을 발견했습니다.

이 튜토리얼을 작성할 수 있도록, 우리는 DocC라는 문서 컴파일러를 만들었습니다.

DocC는 마크다운을 활용하여 일반 텍스트를 풍부한 대화형 시스템으로 변환하며, 올해 DocC를 Xcode에 도입하여 Swift 패키지 또는 Swift 프레임워크에 대한 튜토리얼도 작성할 수 있습니다.

DocC는 개발자 튜토리얼만을 위한 것이 아니다.

DocC는 또한 소스 주석에서 프로젝트의 Swift 프레임워크 및 패키지에 대한 문서를 구축할 수 있습니다. 즉, 앱 개발자에게 종속성은 개발자 문서 창의 플랫폼 라이브러리와 함께 문서를 가질 수 있습니다.

그리고 스위프트 프레임워크나 스위프트 패키지를 만드는 경우, 소스에서 바로 채택자를 위한 문서를 작성할 수 있으므로 API를 만들고 수정할 때 최신 정보를 쉽게 유지할 수 있습니다.

문서 창에 대한 풍부한 서식 경험을 제공하면서 소스의 가독성을 유지하기 위해 마크다운으로 문서 주석을 작성합니다.

문서 카탈로그를 추가하여 기사를 작성하고 프레임워크나 패키지의 모든 API를 구성할 수도 있습니다.

여기에 나열된 세션에서 DocC를 사용하고 문서 카탈로그를 구성하는 방법에 대해 자세히 알아볼 수 있습니다.

이 세션에서, 나는 튜토리얼을 쓰는 데 집중할 것이다.

튜토리얼은 매우 상호 작용하는 문서 형태이며, 쉽게 작성할 수 있도록 하기 위해, 우리는 지침을 갖도록 마크다운을 확장했습니다.

지침은 콘텐츠와 같은 튜토리얼을 작성할 수 있는 구조를 제공하므로 이미 익숙할 수 있는 기존 마크다운 구문으로 콘텐츠를 작성하는 데 집중할 수 있습니다.

개발자 튜토리얼은 실제 프로젝트, 이상적으로 앱을 만드는 것을 중심으로 한다.

튜토리얼 앱은 현실적인 방식으로 프레임워크의 API를 사용해야 합니다.

예를 들어, SwiftUI 튜토리얼에서는 초보자가 SwiftUI를 시작하기 위해 이해해야 하는 핵심 기능을 탐구하는 랜드마크라는 앱을 만드는 방법을 보여줍니다.

Mac Catalyst를 사용하면 iPad와 Mac 탐색 관용구의 차이점을 탐구하는 Recipes 앱을 만드는 방법을 가르칩니다.

그리고 이제, 제 동료들과 저는 당신의 iPhone에서 바로 귀여운 작은 디지털 나무늘보를 만들고, 분류하고, 돌보기 위한 새로운 프레임워크를 연구하고 있습니다.

제 동료들은 이미 훌륭한 참조 문서와 기사를 작성했지만, 이 프레임워크의 채택자들은 프레임워크의 다양한 측면이 어떻게 상호 작용하는지 빠르게 볼 수 있도록 실제 앱을 만드는 법을 배우는 것이 도움이 될 것이라고 생각합니다.

이 세션에서, 제 동료 한나와 저는 이 프레임워크의 채택자들에게 그것을 시작하는 데 필요한 기초를 가르치기 위한 튜토리얼을 만들 것입니다.

튜토리얼의 주요 구성 요소에 대한 개요를 제공하는 것으로 시작하겠습니다.

그럼 내가 아이디어와 계획에 어떻게 접근하는지 설명할게.

그리고 마지막으로, 나는 그것을 튜토리얼 모음을 만드는 데모를 할 한나에게 넘길 것이다.

알았어. 시작하자.

앞서 언급했듯이, 튜토리얼은 매우 상호 작용하는 학습 방법이다.

그리고 기사와 참조 문서와 마찬가지로, 튜토리얼의 텍스트는 마크다운으로 작성되지만, 튜토리얼은 DocC가 튜토리얼에 등장하는 복잡한 레이아웃과 상호 작용을 구축할 수 있도록 구조를 제공하는 지침에서 이 마크다운을 래핑하기 위해 특별한 구문을 사용합니다.

이것은 DocC에게 이 텍스트가 튜토리얼의 한 단계라고 알려주는 기본 지침이다.

유익한 텍스트와 함께, 이 예제에는 DocC가 독자에게 단계를 수행하기 위해 작성해야 할 코드를 정확히 보여주기 위해 표시할 스위프트 파일에 대한 링크가 포함되어 있습니다.

그리고 DocC 지침은 중첩될 수 있다.

이 경우, 코드 지시문에는 독자에게 단계에 대한 더 많은 컨텍스트를 제공하는 이미지 지시문이 포함되어 있습니다.

튜토리얼 페이지에는 우리가 방금 본 것과 같은 많은 개별 단계가 있다.

목차는 개별 튜토리얼에 대한 조직과 링크를 제공합니다.

목차의 지시를 살펴봅시다.

목차 파일은 페이지의 모든 요소를 포함하는 튜토리얼 지시문으로 시작합니다.

튜토리얼 지침 안에는 프레임워크 채택자가 튜토리얼을 통해 무엇을 구축할 것인지에 대한 제목과 간략한 설명이 포함된 소개 지침이 있습니다.

DocC는 목차 페이지의 튜토리얼에 대한 링크를 제공할 때 "시작하기" 버튼과 타이밍 계산과 같은 소개의 일부 요소를 자동으로 생성합니다.

소개에는 또한 이미지 지침이 포함되어 있다.

문서 카탈로그 리소스 폴더에 이미지를 저장할 수 있습니다.

페이지 아래로, 당신은 챕터 지침을 찾을 수 있습니다.

당신은 챕터를 사용하여 튜토리얼을 함께 이해할 수 있는 그룹으로 구성합니다.

챕터는 프레임워크 채택자에게 튜토리얼을 따를 때 명확한 진행 감각을 제공하고, 프레임워크가 무엇인지에 대한 맥락을 제공합니다.

챕터 안에는 튜토리얼에 대한 개별 링크가 있습니다.

이 페이지에 설정된 모든 컨텍스트를 통해, 프레임워크 채택자는 튜토리얼 페이지로 이동하기 전에 프레임워크가 무엇이고 무엇을 구축할 것인지 잘 이해해야 합니다.

목차와 마찬가지로, 튜토리얼 페이지는 페이지의 내용을 포함하는 단일 지침으로 시작합니다.

이 경우, 그것은 하나의 튜토리얼 지침이다.

DocC는 튜토리얼 소개에서 목차 페이지의 일부 정보를 사용하여, 사람들에게 그것이 속한 장을 참조하여 이 튜토리얼의 전반적인 주제가 무엇인지 알려준다.

튜토리얼 소개에는 프레임워크 채택자에게 그들이 사용할 프레임워크의 어느 부분과 그것으로 무엇을 구축할 것인지 알려주는 제목과 설명이 포함되어 있습니다.

건물 경로를 따라 명확성을 제공하기 위해, 튜토리얼은 섹션으로 나뉜다.

섹션 소개는 튜토리얼 소개와 매우 유사하지만, 다음 섹션으로 넘어가기 전에 프레임워크 채택자가 할 진행 상황에 따라 다릅니다.

섹션에는 채택자에게 다음 단계로 넘어가기 위해 정확히 무엇을 해야 하는지 지시하는 단계가 포함되어 있습니다.

단계는 짧고, 이해하기 쉽고, 따르기 쉬워야 한다.

프레임워크 채택자들은 그들이 빠르게 배우고 있는 프레임워크에 속도를 낼 수 있도록 일관되고 명확한 튜토리얼 단계에 의존한다.

명확한 계획으로 시작하면 튜토리얼 모음 전반에 걸쳐 응집력 있는 단계 세트를 만드는 것이 더 쉽습니다.

새로운 Sloth 프레임워크를 위한 개발자 튜토리얼 모음을 요약하여 이 계획을 세우는 방법을 보여드리겠습니다.

프레임워크를 개략적으로 설명하는 방법을 이해하려면, 프레임워크가 어떻게 작동하는지, 그리고 실제 용도가 무엇인지에 대해 생각하는 것이 가장 좋습니다.

이제, 제 동료들과 제가 작업해온 프레임워크는 모두 나무늘보에 관한 것이며, 사람들이 사용하는 것을 보게 되어 기쁩니다.

여기 프레임워크의 주요 기능에 대한 높은 수준의 견해가 있습니다.

내 튜토리얼을 설명하기 위해, 나는 튜토리얼을 통해 그것들을 설명하는 방법에 대한 좋은 아이디어를 얻을 수 있도록 가장 중요한 API를 나열할 것이다.

Sloth 유형 자체와 같은 API와 Food Generator 및 PowerPicker가 있는 것을 볼 수 있습니다.

만약 내가 이것들에 대해 한 번에 생각하려고 한다면, 명확한 순서로 어떻게 가르쳐야 할지 결정하는 것은 까다로울 것이다.

그래서 그것들을 일반적인 기능 영역별로 그룹화하겠습니다.

나는 나무늘보 유형을 이해하는 것이 이 프레임워크의 채택자들에게 정말 중요하다는 것을 알고 있으므로, 나는 나무늘보 유형을 만들고 편집하는 것과 관련된 모든 것을 그룹화할 것이다.

나무늘보를 생성하고, 이름을 지정하고, 권한을 편집하는 데 사용되는 API: 이들은 나무늘보를 만드는 데 사용되는 핵심 API입니다.

그리고 음식 발생기, 관리 일정 및 서식지와 같은 나머지 API도 모두 관련이 있다는 것이 밝혀졌다.

나무늘보를 돌보는 것에 대한 이 API.

그래서, 프레임워크를 구성하는 두 가지 주요 API 그룹이 있는 것 같습니다: 나무늘보를 만드는 API 그룹과 나무늘보를 돌보는 API 그룹.

이건 좋은 시작이야.

나는 채택자들이 우리의 프레임워크를 성공적으로 사용하기 위해 이 API를 이해해야 한다는 것을 알고 있다.

그리고 이런 식으로 그들을 그룹화하면 그들이 어떻게 함께 작동하는지 쉽게 보여줄 수 있을 것이다.

하지만 나는 또한 이 프레임워크의 채택자들이 그들 자신의 앱에서 더 복잡한 일을 하고 싶어할 가능성이 높다는 것을 알고 있다.

그래서, 내가 다른 그룹을 추가할게.

우리의 새로운 프레임워크는 모두 나무늘보를 만들고 돌보는 것에 관한 것이지만, 나는 사람들이 그것이 포함하는 API를 넘어서는 방식으로 그것을 사용할 수 있도록 준비시키고 싶기 때문에 상호 운용성에 대한 몇 가지 정보를 포함해야 한다.

나는 입양자들이 그 프레임워크를 사용하여 나무늘보가 다른 동물과 상호 작용하거나, 다른 위치를 돌아다니거나, 나무늘보 그룹으로 어울릴 수 있도록 도울 가능성이 높다고 생각한다.

나는 모든 사용 사례를 상상하려고 하는 것이 아니다.

나는 단지 사람들에게 그들 자신의 앱에서 프레임워크를 사용할 수 있는 방법을 소개할 수 있는 충분한 다양성을 원한다.

이 세 그룹과 함께, 나는 튜토리얼을 잘 정리하기 시작했다.

지금은, 나는 이 그룹들을 챕터로 바꿀 것이고, 그것들을 사용하여 앱 아이디어를 브레인스토밍하여 내 프레임워크의 채택자들에게 실제 앱에서 내 API를 사용하는 방법을 가르칠 것이다.

튜토리얼을 위해, 저는 이 세 가지 영역 각각에 대한 기능이 있는 앱을 디자인했습니다.

만들기 위해, 나는 사용자가 새로운 나무늘보를 생성하고 색상과 전력을 할당할 수 있는 간단한 보기를 만들 것이다.

보살핌을 위해, 나는 사용자에게 나무늘보의 일반적인 활동 수준, 식욕 및 기분을 볼 수 있는 능력을 제공할 것이다.

그리고 상호 작용 섹션을 위해, 나는 사용자가 전 세계를 돌아다니고 다른 동물과 상호 작용할 때 나무늘보를 찾을 수 있는 기능을 만들 것이다.

내 앱 아이디어가 스케치되면서, 나는 그것을 어떻게 만들 것인지, 그리고 사람들에게 그것을 만들도록 어떻게 가르칠 것인지 계획할 준비가 되었다.

나는 앱을 만드는 방법을 대략적으로 따르는 각 장에 대한 튜토리얼 목록을 작성할 것이다.

먼저, 나는 나무늘보를 만들기 위한 견해를 만들 것이다.

그러면 나는 더 복잡한 슬로스를 돌보는 기능을 작업할 것이다.

마지막으로, 나는 다른 프레임워크를 사용하는 앱의 일부를 만들 것이다.

이 모든 계획 후에, 나는 우리 프레임워크의 채택자들이 나무늘보를 만들고 돌보는 데 도움이 될 것이라고 확신하는 튜토리얼 목록을 가지고 있다.

이 계획은 내가 글을 쓰면서 바뀔 수 있지만, 지금은 내 생각을 정리하고 모든 중요한 API를 명확하지만 중복되지 않은 방식으로 다루는 데 도움이 될 것이다.

지금까지, 우리는 지시문 구문과 튜토리얼을 구성하는 구성 요소를 탐구했습니다.

우리는 또한 튜토리얼 모음을 요약하는 기본 사항을 살펴보았다.

이 시점에서, 우리는 글쓰기를 시작할 준비가 되었기 때문에, Xcode 13에서 DocC로 튜토리얼을 작성하는 방법을 보여줄 동료 Hannah에게 넘겨줄 것입니다.

고마워, 윌. 내 이름은 한나야.

저는 여기 애플의 휴먼 인터페이스 디자이너입니다.

이제 Xcode 13의 완전히 새로운 DocC 기능과 함께 SlothCreator 튜토리얼의 개요가 있으니, 튜토리얼을 함께 작성하는 방법을 살펴보겠습니다.

제 동료인 Bea와 Jack은 "Elevate Your DocC Documentation in Xcode" 세션에서 문서 파일을 구성하기 위해 문서 카탈로그를 만드는 방법을 다루었습니다.

나는 그들이 SlothCreator를 위해 만든 것과 동일한 문서 카탈로그에 튜토리얼을 추가할 것이다.

윌이 언급했듯이, 튜토리얼을 컴파일하려면 목차 파일이 필요합니다.

그래서 저는 이미 SlothCreator 튜토리얼을 위한 튜토리얼 폴더와 목차 파일을 만들었습니다.

이제, 내 첫 번째 튜토리얼을 만들기 시작하자!

먼저, 튜토리얼 폴더를 마우스 오른쪽 버튼으로 클릭하고, 새 파일을 선택하여 템플릿 선택기를 불러온 다음, 튜토리얼 파일을 선택하고, 다음을 클릭하세요.

나는 이 튜토리얼을 "사용자 지정 나무늘보 만들기"라고 부를 것이다.

DocC는 내가 시작할 수 있는 템플릿을 제공한다.

튜토리얼 파일 템플릿에는 섹션에 소개, 섹션 및 일련의 단계가 있습니다.

내가 원한다면, 내 튜토리얼의 예상 완료 시간을 보여줄 수 있어.

20분 정도 걸린다고 말할게.

이 튜토리얼의 제목을 계속해 봅시다.

여기, 나는 "사용자 지정 나무늘보 만들기"를 넣을 것이다.

그런 다음 이 튜토리얼에 대한 개요를 추가하세요.

튜토리얼을 더 매력적으로 보이게 하고 싶어서 튜토리얼 소개, 섹션 소개 및 단계를 위한 아트 파일을 준비했습니다.

아트 파일 폴더를 열고, 준비한 모든 이미지를 선택하고, 문서 카탈로그의 리소스 폴더에 끌어다 놓을게요.

내가 디자인한 소개 이미지를 보여줄게.

그것은 우리의 프레임워크 채택자들이 이 튜토리얼에서 무엇을 구축할 것인지 시각적으로 설명한다.

소개 이미지를 추가하려면, "소스" 뒤에 이미지 파일 이름을 넣을 것입니다.

나는 또한 이미지에 대한 접근 가능한 설명을 추가할 것이다.

나는 모든 SlothCreator 어답터가 튜토리얼을 읽고 듣는 것을 통해 훌륭한 학습 경험을 할 수 있도록 모든 사람이 내 튜토리얼에 접근할 수 있기를 바랍니다.

접근 가능한 설명은 이미지를 보고 있는 사람에게 자명한 것을 설명한다.

예를 들어, 나는 소개 이미지를 "게으름의 윤곽과 게으름 아래에 네 개의 버튼이 있는 앱 인터페이스의 와이어프레임"으로 설명할 것이다.

버튼은 왼쪽에서 오른쪽으로 다음과 같은 기호를 표시합니다: 얼음, 불, 바람, 번개."

코드에 설명을 추가해 봅시다.

이제 이 튜토리얼의 소개를 완료했으니, 첫 번째 섹션으로 넘어가자.

이것은 초보자 친화적인 튜토리얼이 될 것이다.

그래서 첫 번째 섹션에서, 우리의 프레임워크 채택자들은 Slothy 앱의 기본 설정을 시작할 것이다.

섹션 제목을 넣고 섹션에 대한 설명을 추가하겠습니다.

나는 또한 이 섹션의 작업 흐름을 시각적으로 나타내는 내가 준비한 섹션 이미지를 추가할 것이다.

내가 인트로 이미지를 추가한 방법과 마찬가지로, 나는 이미지 파일 이름과 접근 가능한 설명을 넣을 것이다.

다음으로, 단계로 넘어가자.

이 섹션의 첫 번째 단계에서, 우리의 프레임워크 채택자들은 iOS 앱 템플릿을 사용하여 새로운 Xcode 프로젝트를 만들 것입니다.

내가 그걸 지시에 넣을게.

이 단계의 미디어는 채택자들에게 그것을 하는 방법에 대한 더 많은 맥락을 제공해야 하므로, 나는 Xcode의 템플릿 선택기의 스크린샷을 찍고 그들이 상호 작용해야 하는 영역을 강조했다.

명심해야 할 한 가지는, 프레임워크 채택자들이 이 튜토리얼을 볼 때, 섹션과 단계의 배경은 Xcode 설정에 따라 밝거나 어두울 수 있다는 것입니다.

그래서 나는 다크 모드와 호환되는 이미지를 만들거나 각 모양에 대해 별도의 이미지를 제공할 수 있다.

이 이미지를 단계에 추가하겠습니다.

이제 첫 번째 단계를 추가했으니, 섹션 1의 나머지 단계를 추가하겠습니다.

알았어.

나는 첫 번째 섹션의 단계를 완료했다.

이 튜토리얼이 어떻게 진행되고 있는지 살펴봅시다.

Xcode 13에서 제품 빌드 문서로 이동하여 개발자 문서 창에서 튜토리얼을 미리 보거나 키보드에서 control+shift+command+D를 눌러 바로 가기를 사용할 수 있습니다.

좋아! 튜토리얼이 성공적으로 컴파일되었다.

그리고 이제, 방금 나타난 문서 창에서 내가 쓴 것을 미리 볼 수 있다.

목차 페이지를 살펴봅시다.

왼쪽의 네비게이터에서, 나는 내 튜토리얼이 내 동료들이 SlothCreator를 위해 쓴 다른 문서와 함께 SlothCreator 프로젝트로 구성되어 있는 것을 볼 수 있다.

오른쪽에서 목차 페이지를 볼 수 있습니다.

튜토리얼 컬렉션에 대한 개요와 인트로 섹션에 눈길을 끄는 이미지가 있습니다.

소개 아래에는 제 첫 번째 장과 제가 방금 쓴 튜토리얼에 대한 링크가 있습니다.

한 번 보자.

튜토리얼 페이지 상단에서, 프레임워크 채택자들에게 SlothCreation 뷰를 구축할 것이라고 알려주는 튜토리얼 소개가 있으며, 약 20분이 걸릴 것입니다.

그 아래에 첫 번째 섹션이 있습니다.

이 섹션에서, 채택자들은 그들의 프로젝트를 설정하기 위해 네 가지 간단한 단계를 거치게 될 것이다.

단계를 스크롤하면 이미지 업데이트를 볼 수 있습니다.

지금까지는 모든 것이 좋아 보인다.

두 번째 섹션에서, 우리의 프레임워크 채택자들은 SlothCreator로 코딩을 시작할 것이다.

코드 단계로 그들을 안내하는 방법을 알아보자.

나는 이미 섹션 2의 소개와 첫 번째 단계를 완료했다.

프레임워크 채택자들이 이전 단계에서 만든 Swift 파일에서 SlothCreator 패키지를 가져오는 두 번째 단계를 살펴봅시다.

우리가 그것에 뛰어들기 전에, 나는 몇 가지를 지적하고 싶다.

코드 단계는 상단에 표시 이름을 보여주며, 어답터에게 어떤 파일을 작업해야 하는지 알려줍니다.

DocC는 이 단계를 위해 추가하고 있는 Swift 파일을 화면 오른쪽의 표시 이름 아래에 표시할 것입니다.

DocC는 또한 현재 코드 파일을 이전 단계의 코드 파일과 자동으로 비교하고 코드의 새로운 부분을 강조 표시할 수 있습니다.

이 코드 파일은 미리보기를 생성합니다.

채택자들이 지시를 성공적으로 따랐는지 확인할 수 있도록 이 단계에 미리보기 스크린샷을 추가할 수 있습니다.

Xcode로 돌아가서 이 단계를 끝내자.

먼저, 표시 이름, 코드 파일 이름, 그리고 마지막으로 미리보기 이미지를 추가하세요.

이제 우리는 코드 단계를 추가하는 방법을 검토했습니다. 섹션 2의 나머지 단계를 추가하겠습니다.

지금까지, 우리는 튜토리얼 소개, 섹션 및 다양한 유형의 단계를 작성하는 방법을 살펴보았습니다.

이제, 저는 SlothCreator를 위해 작성한 모든 튜토리얼을 추가할 것입니다.

파인더를 열고, 내가 준비한 모든 튜토리얼 파일을 선택하고, 튜토리얼 폴더에 끌어다 놓을게요.

다음으로, 목차 파일을 열고, 첫 번째 장의 다른 두 튜토리얼을 연결한 다음, 두 번째와 세 번째 장을 추가하겠습니다.

좋아, 이제 나는 SlothCreator 튜토리얼을 완료했어.

같이 살펴봅시다.

목차 페이지에서, 우리는 이 튜토리얼 컬렉션에 세 개의 장으로 구성된 여덟 개의 튜토리얼이 포함되어 있는 것을 볼 수 있습니다.

나는 또한 왼쪽의 네비게이터에서 이 구조를 볼 수 있다.

이 페이지는 프레임워크 채택자들에게 이 튜토리얼 컬렉션에 대한 요약된 견해를 제공할 수 있는 좋은 방법입니다.

제가 방금 쓴 튜토리얼 페이지도 살펴봅시다.

우리는 프레임워크 채택자들이 프로젝트를 설정하는 방법을 안내하는 인트로와 첫 번째 섹션을 보았다.

그 아래에는 채택자에게 나무늘보 사용자 지정 보기를 만드는 방법에 대한 명확한 코딩 지침을 제공하는 두 번째 섹션이 있습니다.

멋져!

튜토리얼은 정말 좋아 보여!

나는 우리의 프레임워크 채택자들이 내 튜토리얼을 볼 때 SlothCreator에 대해 알게 되어 기뻤을 것이라고 확신한다.

이 세션에서, 우리는 튜토리얼이 무엇인지, 무엇이 좋은 튜토리얼을 만드는지, 튜토리얼을 설명하는 방법, 그리고 DocC를 사용하여 튜토리얼을 작성하고 미리 보는 방법을 살펴봤다.

DocC는 Xcode 13의 강력한 새로운 문서 기능입니다.

이를 통해 참조, 기사 및 튜토리얼을 포함하여 프레임워크에 대한 포괄적인 문서를 작성할 수 있습니다.

DocC로 문서를 작성, 작성 및 구성하는 방법에 대해 자세히 알아보려면, 올해 WWDC의 다른 DocC 세션을 확인하는 것이 좋습니다.

우리와 함께 배워주셔서 감사드리며, Xcode 13에서 DocC로 무엇을 만들 것인지 보게 되어 기쁩니다.

[쾌활한 음악].