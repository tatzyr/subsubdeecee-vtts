10087

안녕하세요, 저는 성능 도구 엔지니어인 소니아입니다.

오늘, 제 동료 Shreyas와 저는 당신의 앱에서 전력과 성능 회귀를 진단하는 방법을 보여줄 것입니다.

매년, 당신은 가능한 최고의 앱을 출시하기 위해 열심히 일합니다.

당신은 사용자를 앱에서 놀라운 경험에 초대하고 싶기 때문에 전력과 성능을 최적화하는 것이 매우 중요합니다.

이 강연에서는 앱의 성능에 영향을 미치는 주요 지표, 회귀를 발견하는 데 도움이 되는 도구, 디스크 쓰기를 줄이는 데 도움이 되는 통찰력, 성능 워크플로우를 자동화하는 API를 다룰 것입니다.

성능을 최적화하기 위해, 앱 변경 없이 Xcode Organizer 및 App Store Connect API를 통해 사용할 수 있는 포괄적인 메트릭 및 진단 세트가 있습니다.

아시다시피, 성능은 최적화하기가 쉽지 않습니다.

많은 지표와 진단을 사용할 수 있기 때문에, 정보의 바다에서 쉽게 길을 잃을 수 있다.

각 릴리스를 지난번보다 더 좋게 만들고 싶지만, 성과 우선 순위를 요약할 수 있는 빠른 방법이 필요합니다.

Xcode Organizer는 성능을 이해하는 훌륭한 도구입니다.

현재 배터리, 발사, 중단, 메모리, 디스크 쓰기, 스크롤 히치 및 종료를 포함한 일곱 가지 메트릭 범주에 걸쳐 데이터를 수집합니다.

그것은 처리해야 할 많은 정보이다.

다음으로 Xcode Organizer에 뛰어들어 성능 회귀를 진단해 봅시다.

나는 내 앱의 다른 지표를 보는 것으로 시작할 것이다.

왼쪽 내비게이션 바에서 일곱 개의 메트릭 카테고리 중에서 선택할 수 있습니다.

배터리 및 종료와 같은 일부 범주에는 여러 섹션과 다양한 이벤트 유형을 자세히 설명하는 하위 범주가 있을 수 있습니다.

나는 선택적으로 수십 가지 다른 장치 유형과 내 앱의 상위 및 일반 사용자의 백분위수 중에서 선택할 수 있다.

주최자의 중앙은 지난 16개의 릴리스에 대한 데이터가 있는 차트를 보여준다.

이 경우, 저는 제 앱에서 종료를 조사하고 싶습니다.

화면 차트는 최신 버전에서 종료가 크게 증가했음을 보여 주며, 특히 파란색으로 강조 표시된 불법 명령 종료로 인해 릴리스에 문제가 있을 수 있음을 나타냅니다.

현장에서 성능을 이해할 수 있는 풍부하고 흥미로운 메트릭 세트가 있지만, 장치 옵션, 메트릭 범주 및 하위 범주가 너무 많아서 성능을 최적화하기 위해 어디서부터 시작해야 할지 명확하지 않습니다.

그렇기 때문에 이제 주최자에 모든 성과 우선 순위를 강조하고 작업 흐름을 간소화하기 위한 통찰력 섹션이 있습니다.

Xcode Organizer는 이제 메트릭 데이터를 처리하고 성능 회귀와 같은 흥미로운 추세를 식별합니다.

내가 뛰어들기 전에, 성능 회귀가 무엇이고 어떻게 감지되는지에 대해 이야기해 봅시다.

앱이 최근 릴리스에 비해 전력 또는 성능 영역에서 성능이 좋지 않을 때 회귀가 발생합니다.

예를 들어, 출시 후 출시하는 데 더 오래 걸릴 때.

이 예에서, 메트릭은 가치가 상승하고 있는지 결정하기 위해 최근 출시에 대해 분석된다.

그런 다음 메트릭은 지난 몇 번의 릴리스에서 평균되고 최신 값과 비교됩니다.

메트릭이 상승하고 최신 값이 지난 몇 릴리스의 평균보다 높으면, 회귀로 표시되고 통찰력 섹션에 요약됩니다.

이 예에서, 앱은 시작하는 데 평균 1.1초가 걸렸고, 마지막 릴리스에서 갑자기 2.5초로 점프하여 회귀로 플래그가 지정되었습니다.

이제 회귀가 어떻게 표시되는지 알았으니, 주최자로 돌아가서 몇 가지 예를 들어봅시다.

여기 회귀 탭을 보세요.

최고의 성과 우선순위를 발견할 수 있는 원스톱 상점입니다.

최근 출시된 후 앱이 갑자기 충돌하나요?

장치 배터리를 소모하는 멋진 새 카메라 기능인가요?

통찰력 섹션에서 이러한 질문에 대한 답변과 더 많은 것을 찾을 수 있습니다.

필요한 모든 데이터는 현장에서의 성과를 이해하기 위해 이 이동 섹션에서 강조 표시될 것입니다.

여기서 함께 그룹화된 일반 및 상위 백분위수에 대한 장치 전반에 걸쳐 다양한 메트릭 범주와 하위 범주에 대한 회귀를 발견할 수 있습니다.

왼쪽은 어떤 메트릭이 퇴행했는지, 얼마나, 어떤 백분위수를 요약하여 더 나은 앱을 만들기 위해 집중해야 할 것을 정확히 강조할 것입니다.

내 앱은 종료, 메모리 및 디스크 쓰기에 걸쳐 몇 가지 회귀가 있다.

다음으로, 나는 각각의 예시와 그것들을 해석하는 방법을 살펴볼 것이다.

나는 종료 회귀로 시작할 것이다.

종료를 거치기 전에, "왜 내 앱이 죽나요?"에 대한 비디오를 확인하세요.

더 많은 맥락을 위해.

각 회귀는 내 최신 앱 출시의 모든 주요 이슈를 요약할 것이다.

섹션 상단은 불법 지침이 충돌을 일으키고 있음을 보여주며, 이는 내 앱이 유효하지 않은 기능 포인터에 액세스할 때 발생할 수 있습니다.

더 아래로, 내 앱의 마지막 네 번의 릴리스에 대한 불법 명령 종료 차트가 있다.

차트 상단은 어떤 백분위수와 장치가 영향을 받았는지 보여준다.

이 경우, 모든 iPhone의 상위 백분위수 사용자는 최신 릴리스에서 더 많은 충돌을 경험하고 있다.

불법 교육 출구의 평균과 최신 수는 차트의 오른쪽에 있다.

이 경우, 내 앱은 최신 버전에서 10일마다 충돌하기 시작했다.

사용자가 홈 화면으로 돌아가서 앱을 자주 다시 실행해야 하기 때문에 화면 종료는 매우 파괴적입니다.

이러한 충돌을 일으키는 잘못된 기능 포인터에 대한 참조를 제거하고 충돌 진단을 살펴보고 더 자세히 알아볼 수 있습니다.

충돌 진단에 대해 자세히 알아보려면 "Triage TestFlight crashes with Xcode" 비디오를 확인하세요.

회귀와 충돌 진단을 사용하여, 저는 이제 다음 앱 출시에서 화면 종료를 줄여야 한다는 것을 알게 되었습니다.

나는 화면 종료에서 멈추고 싶지 않고 내가 할 수 있는 일이 더 있다는 것을 알고 있다.

개선을 위한 다른 영역을 찾기 위해 내 앱의 회귀를 확인할 것이다.

작업 시간 초과에도 회귀가 있는 것 같다.

일부 지표는 여러 장치와 백분위수에 대해 퇴행할 수 있다.

이 경우, 작업 시간 초과는 일반 및 상위 백분위수 모두에서 모든 iPhone에서 증가했습니다.

오른쪽의 각 회귀를 스크롤하여 최근 릴리스의 데이터와 메트릭의 최신 및 평균 값을 볼 수 있습니다.

앱이 백그라운드로 전환되면, 시스템이 종료되기 전에 30초 동안 작업을 실행할 수 있습니다.

즉, 백그라운드 작업을 적절하게 종료하지 않으면 앱이 더 자주 종료되어 다음에 사용자가 다시 전환할 때 실행이 느려질 수 있습니다.

내 앱은 이제 백그라운드에서 3일마다 종료되고 있다.

화면 종료만큼 파괴적이지는 않지만, 배경 종료는 훨씬 더 일반적일 수 있다.

내 앱이 백그라운드에서 종료된 경우에도 원활한 실행 경험을 하는 것이 필수적이다.

UIKit의 상태 복원 기능을 통합하여 백그라운드 종료에서 원활한 복구를 보장할 수 있습니다.

마지막으로, 내 앱의 회귀로 돌아가서, 내가 집중해야 할 성능 영역이 하나 더 있다.

디스크 쓰기는 지난 릴리스에서 28% 증가했지만, 무엇이 문제를 일으켰는지는 명확하지 않다.

성능 문제가 있다는 것을 알지만, 앱을 최적화하기 전에 어디서부터 시작해야 할지에 대한 더 많은 통찰력이 필요합니다.

다음으로, Shreyas는 디스크 쓰기 회귀의 주요 원인을 발견하는 방법을 알려줄 것입니다.

고마워, 소니아.

안녕, 난 슈레야스야.

저는 Apple의 스토리지 소프트웨어 엔지니어이며, 디스크 쓰기 회귀를 디버깅하고 앱의 성능을 유지하는 방법을 다룰 것입니다.

하지만 이것에 뛰어들기 전에, 디스크 쓰기가 왜 그렇게 중요한가요?

CPU와 메모리와 매우 마찬가지로 스토리지는 제한된 자원이다.

선택되지 않은 디스크 쓰기는 기본 장치가 마모되고 손상될 수 있습니다.

그것들은 또한 성가신 화면 중단과 UI 히치의 흔한 원인이다.

우리가 조심하지 않으면, 그들은 배터리 수명을 빨리 소모할 수 있다.

이것들은 최적화된 디스크 쓰기를 훌륭한 사용자 경험을 보장하는 핵심 구성 요소로 만든다.

그것을 염두에 두고, 높은 디스크 쓰기를 진단하는 데 사용할 수 있는 리소스에 대해 알아봅시다.

Xcode Organizer의 디스크 쓰기 보고서 창은 훌륭한 출발점이다.

이 보고서는 앱 분석 공유에 동의한 장치에서 수집되며, 쓰기로 이어진 스택 추적에 대한 정보가 포함되어 있습니다.

각 보고서의 스택 추적은 여러 서명으로 분류되며, 쓰기는 모든 보고서에서 서명을 위해 추적됩니다.

이 보고서 목록에서, 서명은 총 쓰기에 따라 정렬되어 표시됩니다.

각 서명에 대해, 우리는 쓰기의 원인을 보여주는 상세한 스택 추적을 찾을 수 있으며, 얼마나 많은 로그가 수신되었는지, OS 버전과 하드웨어 모델 고장 등에 대한 통계를 찾을 수 있습니다.

문제 영역을 식별하려면, 상위 서명에 세심한 주의를 기울이세요.

이 경우, 최고 서명은 쓰기의 67%를 담당한다.

우리는 콜스택에서 이것이 SQLite 함수 때문이라고 추론할 수 있다.

많은 경우, 문제의 근원인 이것을 아는 것은 문제를 해결하는 데 큰 도움이 될 수 있다.

하지만 종종, 이 경우처럼, 수정은 분명하지 않을 수 있다.

여기 코드는 내 새로운 기능에 매우 중요하며, 나는 명백한 버그를 발견하지 않으며, 내 다음 단계가 무엇인지 분명하지 않다.

알고 보니, 어디를 봐야 할지 안다면 답은 스택 트레이스에 있다.

종종 당신이 사용하고 있는 라이브러리의 스택 깊숙한 곳에 무엇이 잘못되었는지, 그리고 충분한 연구를 통해 그것을 고치는 방법을 알려줄 수 있는 기능이 있습니다.

하지만 그건 매우 까다로울 수 있어.

그것은 종종 특정 도메인 지식이 필요하며 매우 시간이 많이 걸릴 수 있다.

이 모든 노력을 절약하기 위해, Xcode 13에서 주최자는 통찰력이라는 새로운 분야를 가지고 있습니다.

무대 뒤에서, 저장소는 높은 디스크 쓰기를 일으키는 알려진 안티패턴으로 유지된다.

보고서가 접수되면, 이러한 안티패턴을 나타내는 기능을 스캔합니다.

일치가 있을 때, 문제를 해결하기 위한 최적화 제안과 함께 문제가 강조 표시됩니다.

이를 통해 앱의 쓰기를 줄이고 성능을 향상시키는 동시에 많은 디버깅 노력을 절약할 수 있습니다.

예를 들어, 우리의 최고 서명을 위해, 나는 인덱스를 추가하기 위한 최적화 제안을 본다.

문제를 자세히 설명하고 문제를 디버깅하고 해결하는 단계를 제공하는 문서 페이지에 대한 링크도 있습니다.

좋아.

이제, 조언을 따르고 그것이 도움이 되는지 봅시다.

그리고 그렇게 하기 위해, 파일 활동 도구를 실행하겠습니다.

파일 활동 도구는 모든 스토리지 관련 문제를 디버깅할 수 있는 환상적인 자원이다.

그것은 앱이 수행하는 모든 읽기와 쓰기에 대한 자세한 분석을 제공한다.

그것은 내 수정을 검증하는 완벽한 도구이다.

이전에, 그 악기들은 임시 파일에 약 180메가바이트의 쓰기를 보여주었다.

이것은 또한 780밀리초의 대기 시간을 도입한다.

그리고 이제, 인덱스 이후, 함수로 인한 쓰기는 0으로 떨어진다.

이것은 SQLite가 이제 더 효율적이기 때문이다.

이것은 우리가 더 이상 780밀리초의 대기 시간을 늦추지 않는다는 것을 의미한다. SQLite 인덱스가 한 예이다.

앱의 성능을 개선하기 위한 다양한 최적화 제안이 있으며, 이 목록을 확장하기 위한 지속적인 작업이 있으므로, 오늘 앱에 대한 통찰력을 확인하세요.

통찰력 창으로 돌아가자.

우리는 앱에 세 번의 회귀가 있었다.

우리는 그들 각각을 면밀히 조사했고, 그들 모두를 해결하는 데 사용할 수 있는 자원을 발견했다.

그거 좋네.

Xcode Organizer에는 수많은 성능 및 성능 분석이 있으며, 통찰력은 앱의 성능 우선 순위를 발견하기 위한 이동 창이어야 합니다.

최대한 활용해.

회귀와 통찰력을 주기적으로, 그리고 매 출시 후에 확실히 확인할 계획입니다.

Xcode Organizer 외에도, 오늘 다루는 모든 분석에 액세스할 수 있는 또 다른 방법이 있습니다. 그것은 App Store Connect API입니다.

프로그래밍 방식으로 데이터에 액세스하고 맞춤형 솔루션을 구축하고 싶다면 좋습니다.

아마도 당신은 이미 설정한 분석 파이프라인을 가지고 있을 것입니다.

그렇다면 이 API는 이 모든 멋진 분석을 통합할 수 있는 완벽한 도구입니다.

WWDC 2020의 "전력 및 성능 API로 트렌드 식별" 비디오를 확인하세요.

그것은 API 엔드포인트와 응답을 매우 자세하게 다룹니다.

몇 가지 API 응답에 대한 간략한 개요를 드리겠습니다.

메트릭의 경우, perfPowerMetrics 엔드포인트에 GET 요청을 할 수 있습니다.

이것은 최신 버전에 대한 앱의 메트릭과 통찰력이 있는 JSON 응답을 반환합니다.

통찰력 섹션으로 넘어갑시다.

통찰력 내에서, 당신은 당신의 앱에 대해 확인된 모든 회귀를 찾을 수 있습니다.

각 회귀에 대해 메트릭 범주와 확인된 회귀의 요약을 찾을 수 있습니다.

이것은 이전에 Xcode Organizer에서 발견한 불법 명령으로 인한 화면 종료입니다.

다음으로, 인구 섹션을 찾을 수 있습니다.

이것은 영향을 받은 백분위수와 장치의 상세하고 구조화된 목록을 제공한다.

이것들을 사용하여 앱의 성능을 개선하기 위해 집중적인 조치를 취할 수 있습니다.

마찬가지로, 진단 보고서의 경우, 진단 서명 끝점에 GET 요청을 할 수 있습니다.

응답에는 상위 서명 목록이 있으며, 각 서명에는 이와 관련된 세부 사항에 대한 링크가 있습니다.

이 링크에 대한 GET 요청은 자세한 진단 로그와 서명과 관련된 통찰력을 제공합니다.

분석 파이프라인에서 이러한 API를 사용하고, 통찰력을 볼 때 즉시 조치를 취하십시오.

이제 성능 회귀가 무엇인지, 어떻게 진단할 수 있는지, 그리고 이를 해결하기 위한 실행 가능한 데이터를 어디서 찾을 수 있는지 알 수 있습니다.

여기 당신이 다음에 해야 할 일이 있습니다.

지금 Xcode Organizer를 여세요. 회귀 창을 확인하세요.

앱의 최고 성능 회귀가 무엇인지 보세요.

당신의 앱이 얼마나 쓰는지 알아보세요.

상위 디스크 쓰기 콜스택은 당신이 기대하는 것인가요?

아니면 앱 속도를 늦추는 숨겨진 버그가 있나요?

마지막으로, 앱의 성능을 최신 상태로 유지할 계획을 세우세요.

Xcode Organizer를 주기적으로 확인하고, 사용자 지정 분석 파이프라인에서 App Store Connect API를 사용하세요.

시간 내줘서 고마워. 행복한 회귀 사냥.

[쾌활한 음악].