10203

안녕.

Xcode Organizer로 TestFlight 충돌 분류에 오신 것을 환영합니다.

제 이름은 매트이고, 저는 Xcode 엔지니어입니다.

오늘은 모든 앱의 대상에서 충돌을 선별하는 데 도움이 되는 Xcode Organizer에 내장된 몇 가지 새로운 도구와 TestFlight 사용자의 피드백을 활용하여 빌드에 대한 충돌 수정을 더 빨리 얻을 수 있는 방법을 보여 드리겠습니다.

그런 다음 MetricKit에서 만든 새로운 Terminations Organizer와 발전을 보여드리겠습니다.

앱이 베타 버전을 테스트하기 위해 TestFlight를 사용하는 경우, 테스터의 충돌 피드백이 정말 가치가 있다는 것을 알게 될 것입니다.

테스터가 충돌 후 피드백을 작성할 때, App Store Connect에서 해당 피드백을 보고 충돌 로그를 다운로드하여 무슨 일이 일어났는지 분석을 시작할 수 있습니다.

나중에, 이 워크플로우를 과급할 Xcode에서 변경한 사항을 보여 드리겠습니다.

먼저, Xcode 13 이전에 사용할 수 있는 기능에 대한 간략한 개요를 제공하고 싶습니다.

Crashes Organizer에서는 App Store와 TestFlight의 두 앱 모두에 대한 충돌을 지원합니다.

앱 클립과 앱 확장 프로그램의 충돌을 포함하여 모든 플랫폼에서 앱의 충돌을 보여줍니다.

주최자는 가장 우선 순위가 높은 충돌을 보여주기 위해 문제의 순위를 매기고 이러한 충돌이 다른 장치와 OS 버전에 어떻게 분산되는지 보여줍니다.

그리고 일단 그 충돌을 공격하기로 결정하면, Xcode 프로젝트에서 직접 열 수 있습니다.

이 모든 훌륭한 기능은 개발자 계정으로 Xcode에 로그인하기만 하면 즉시 작동합니다.

훌륭한 앱을 만드는 여정은 때때로 길고 울퉁불퉁할 수 있습니다. 왜냐하면 일단 당신이 그것을 배송하면, 고객들은 항상 당신이 가능하다는 것조차 몰랐던 방식으로 그것을 깨뜨리는 것처럼 보이기 때문입니다.

Xcode 13에서 우리는 충돌 없는 목표에 계속 더 가까워질 수 있도록 충돌 주최자를 더 좋게 만들고 싶었습니다.

이것은 충돌 로그를 거의 즉시 전달하고, 충돌에 대한 더 풍부한 데이터를 제공하고, 재현하기 어려운 문제를 해결하는 데 도움이 되는 더 많은 맥락을 제공하는 임무를 부여했습니다.

Crashes Organizer에서 Xcode 13에 추가한 놀라운 새로운 기능을 모두 보여드리게 되어 기쁩니다.

제가 당신과 공유할 여섯 가지 주요 개선 사항이 있습니다.

먼저, TestFlight 충돌의 신속한 배송.

이제 당신의 테스터 중 누구라도 TestFlight 빌드를 충돌할 때, 우리는 잠시 후에 주최자에서 당신에게 그 충돌을 전달할 것입니다.

이 빠른 충돌 배송을 통해 이제 마지막 날부터 모든 TestFlight 충돌을 볼 수 있으며, 이제 선택한 충돌이 언제 발생했는지 알려주는 시간별 그래프가 표시됩니다.

Xcode 13에서, 우리는 이제 1년 분량의 충돌 기록을 사용할 수 있도록 하고 있습니다.

이제 기간별로 충돌을 필터링하여 작년에 발생한 모든 충돌을 볼 수 있습니다.

이제 1년 분량의 충돌을 보여줄 수 있기 때문에, 검사관의 그래프 영역에서 월별로 충돌의 유병률을 보여주는 시간 분포를 볼 수 있습니다.

우리는 당신에게 앱의 모든 부분에서 건강을 더 잘 이해할 수 있는 더 많은 도구를 제공하고 싶었습니다.

그래서 올해, 우리는 당신이 앱의 특정 부분에 집중할 수 있도록 Crashes Organizer에 더 많은 필터를 추가하고 있습니다.

주최자는 이제 모든 버전과 빌드로 충돌 목록을 필터링하거나 개별 과거 릴리스로 드릴다운할 수 있습니다.

또한 시계 앱, 앱 클립 또는 공유 확장 프로그램과 같이 앱과 함께 제공되는 확장 프로그램으로 필터링할 수 있습니다.

iOS 앱이 경이로운 Apple Silicon Mac에서 어떻게 실행되고 있는지 확인할 수도 있습니다.

앱의 문제를 선별하는 것의 일부는 특정 충돌의 영향을 받는 사람에 대한 전체 그림을 얻는 것이며 그 충돌은 다른 범주에 분산되어 있습니다.

그래서 올해, 우리는 앱 버전과 TestFlight 및 App Store에 고유한 충돌이 어떻게 분산되는지 볼 수 있는 기능을 추가했습니다.

여러분 모두는 솔로 아티스트, 대규모 팀, 그리고 그 사이의 모든 것으로 놀라운 앱을 배송했습니다.

Xcode 13에서, 우리는 주최자로부터 직접 충돌 보고서를 공유할 수 있는 기능을 추가하여 서로 협력하는 새로운 방법을 도입하고 있습니다.

도구 모음의 새로운 공유 버튼을 사용하면 충돌을 팀 구성원과 직접 공유하거나 할 일 목록에 추가할 수 있습니다.

그리고 이 링크 중 하나를 클릭하면, 주최자는 이 문제를 다운로드하고 집중하여 이 충돌에 초점을 맞추고 조사를 시작할 수 있습니다.

TestFlight는 개발자가 새로운 충돌과 버그를 찾는 데 도움을 주는 테스터의 손에 새로운 기능과 수정 사항을 빠르게 얻을 수 있는 귀중한 도구입니다.

TestFlight로 앱을 베타 테스트하는 것은 개발자들에게 App Store에 달콤한 업데이트를 배송할 것이라는 자신감을 심어주는 데 도움이 됩니다.

Xcode 13에서 TestFlight 충돌 피드백을 Crashes Organizer에 직접 가져오고 있다는 것을 발표하게 되어 매우 기쁩니다.

App Store Connect는 충돌 피드백을 포함한 모든 TestFlight 피드백을 보여줍니다.

App Store Connect에서 직접 원시 피드백과 충돌 로그를 계속 다운로드할 수 있으며, 올해 새로운 Xcode에서 열기 버튼으로 주최자에서 바로 관련 충돌을 열 수 있습니다.

충돌 피드백을 보는 것이 그 어느 때보다 쉬워졌습니다.

충돌 주최자에는 TestFlight 충돌 피드백에 전념하는 새로운 검사관이 있습니다.

이 인스펙터를 열면 당신이 선택한 충돌에 부딪힌 테스터가 제출한 모든 피드백을 보여줄 것입니다.

이를 통해 충돌 보고서를 빠르게 선별하여 충돌을 해결하는 데 필요한 추가 정보를 찾을 수 있는 통합 피드백 목록을 볼 수 있습니다.

우리는 재현하기 어려운 문제를 추적할 때 이 추가된 맥락이 매우 중요하다고 생각한다.

그래서 멋진 새로운 것들이 많아.

새로운 충돌 주최자에서 충돌을 선별하기 시작합시다.

저는 우리 팀의 앱인 Fruta에서 작업하고 있으며, 최근에 App Store에 새 버전을 출시했지만 Xcode Cloud로 TestFlight에 새 버전을 지속적으로 배포하고 있습니다.

오늘 저는 앱 클립에 최근 충돌이 있었는지 확인하고 싶습니다. 그러니 주최자를 열고 무슨 일이 일어나고 있는지 봅시다.

창 메뉴 표시줄 항목을 선택하고 주최자를 선택하여 이것을 할 수 있습니다.

왼쪽의 사이드바에서, 나는 Xcode가 내 iOS 앱인 Fruta의 Crashes Organizer를 열었다는 것을 알 수 있다.

창 상단의 도구 모음에서 올해 사용 가능한 모든 새로운 필터 옵션을 볼 수 있습니다.

필터 바 아래에는 모든 버전, 빌드 및 제품에서 지난 2주 동안의 모든 충돌을 보여주는 충돌 목록이 있습니다.

이 목록을 빠르게 스캔하면, 나는 다양한 종류의 문제를 볼 수 있다.

목록의 충돌은 앱 클립, 시계 앱 또는 앱 확장 프로그램에서 왔는지 여부를 나타내는 다양한 배지를 표시합니다.

이를 통해 충돌이 영향을 미치는 앱의 영역을 빠르게 식별할 수 있습니다.

충돌 목록의 오른쪽에 로그 보기가 있습니다.

이것은 내가 충돌 목록에서 선택한 충돌에 대한 친근하고 단순화된 견해를 보여주고 있다.

그리고 마지막으로, 로그 뷰의 오른쪽에, 나는 선택된 충돌에 대한 모든 종류의 흥미로운 정보를 보여주는 검사관을 본다.

이제 주최자에 익숙해졌으니, 앱 클립에 대한 최근의 모든 문제를 살펴보고 싶습니다.

시계 앱, 앱 클립 또는 앱 확장 프로그램과 같이 내 앱과 함께 제공되는 모든 제품을 나열하는 도구 모음에서 제품 필터를 열 수 있습니다.

여기서 앱 클립을 선택하겠습니다.

앱 클립을 선택하면 충돌 목록을 필터링하여 지난 2주 동안의 앱 클립 충돌만 표시했습니다.

여기 목록의 첫 번째 충돌은 우리의 가장 큰 충돌이다.

제목 아래에서, 주최자는 이 충돌이 지난 2주 동안 21개의 장치에 영향을 미쳤고 마지막 날에는 7개의 장치에 영향을 미쳤다는 것을 알려주고 있다.

이제, 코드를 파헤치기 전에, 나는 내 조사를 안내하고 문맥 단서로 이끄는 데 도움이 될 몇 가지 질문을 하고 싶다.

먼저, 이것이 문제가 된 지 얼마나 됐나요?

창 오른쪽에 있는 검사관의 그래프 영역으로 가면, 그래프 범례에서 이 충돌이 버전 2.0에서 처음 나타났고 최신 TestFlight 빌드인 2.0.1에 영향을 미치고 있다는 것을 알 수 있습니다.

다음 질문, 이것이 내 프로덕션 앱에 영향을 미치나요 아니면 그냥 TestFlight에 영향을 미치나요?

이것이 TestFlight와 App Store 빌드 모두에 영향을 미치고 있다는 것을 알아내기 위해 필터를 Release로 변경할 수 있습니다.

그래서 이 문제는 고객이 그것을 경험하고 있기 때문에 매우 중요하며, 가장 최근의 App Store 릴리스에서 퇴보한 것으로 보입니다.

이제 로그 보기에 집중해 봅시다.

로그 보기는 충돌한 정확한 프레임을 편리하게 강조하고 있다.

나는 또한 이것이 백 트레이스 위의 스레드 번호, 스레드 번호 6을 보고 배경 스레드에서 일어났다는 것을 알고 있다.

우리가 즐겨찾기를 동기화하는 동안 이것이 충돌하는 것을 볼 수 있지만, 내가 너무 자주 작업하는 코드 영역이 아니기 때문에 이것을 재현하는 방법을 잘 모르겠습니다.

나는 이 충돌에 대한 더 많은 통찰력을 줄 나 자신에게 물어볼 더 많은 질문을 생각할 수 없기 때문에, 더 많은 맥락을 얻는 것이 정말 도움이 될 것이다.

다행히도, 목록에 이 충돌 옆에 피드백 아이콘이 있으므로, 우리 테스터 중 한 명이 이 충돌을 경험하고 피드백을 제출했다는 것을 알고 있습니다.

이것은 내가 이 충돌 작업을 시작해야 하는 맥락의 누락된 부분일 수도 있다.

나는 검사관 구역으로 가서 새로운 피드백 검사관을 열어서 그들의 피드백을 볼 수 있다.

나는 몇 분 전에 그것을 본 사람을 포함하여 몇몇 테스터들이 이 같은 충돌을 쳤다는 것을 보았다.

검사관에서 각 피드백 보고서의 미리보기를 보거나, 하나를 클릭하면 팝오버에서 더 자세한 내용을 볼 수 있습니다.

이 최신 피드백을 클릭하면 팝오버가 열리고 그들이 설치한 정확한 버전과 빌드, 장치 모델, 배터리 수준 및 사용 가능한 디스크 공간과 같은 이 테스터의 충돌에 대한 모든 풍부한 컨텍스트를 보여줍니다.

이것들은 모두 충돌을 진단할 때 유용한 단서가 될 수 있다.

이 경우, 나는 테스터가 셀룰러에 있는 것을 볼 수 있으며, 그들의 의견은 "나는 터널을 통과하고 있었고 내가 가장 좋아하는 버튼을 눌렀다"고 말한다.

몇 초 후, 그것은 추락했다."

흠. 만약 그들이 터널을 통과하고 있었다면, 네트워크 연결이 좋지 않을 수도 있어.

이제 우리는 모든 단서를 결합하여 좋아하는 버튼을 누르면 결국 충돌할 배경 작업이 트리거된다는 것을 알 수 있습니다.

나는 우리가 그 코드에 뛰어들기에 충분하다고 생각한다.

프로젝트 열기 버튼을 사용하여 Fruta Xcode 프로젝트에서 직접 이 충돌을 열 것입니다.

좋아요, 그래서 Xcode가 열렸고 왼쪽의 디버그 네비게이터에서 백트레이스를 보여주고 있으며, 소스 파일과 충돌 코드의 정확한 줄이 강조 표시된 편집기가 있습니다.

그래서 왜 이 코드가 충돌하는 거야?

음, 우리가 치명적인 오류로 일부러 충돌하는 것 같은데, 그건 흥미로운 선택이야.

syncFavorites 기능을 빠르게 통과하여 무엇을 하려고 하는지 이해합시다.

먼저, 우리는 배경 스레드로 뛰어들고 있다.

다음으로, 우리가 이 스무디를 가장 좋아하는 디스크로 저장하는 것처럼 보인다.

그런 다음 우리는 백엔드를 업데이트하고 있으며, 디스패치 그룹을 사용하여 이러한 작업을 함께 동기화하고 있습니다.

그런 다음 우리는 10초 타임아웃으로 이러한 작업을 기다리며, 더 오래 걸리면 충돌합니다.

이건 꽤 불공평해.

우리 테스터의 피드백을 기억하면서, 그들이 스무디를 선호했을 때 터널을 통과하고 있었다고 말했다.

만약 그들이 터널을 통과하고 있다면, 그들은 아마도 품질이 좋지 않은 네트워크 연결을 가지고 있었을 것이다. 이는 우리의 백엔드와의 동기화가 확실히 10초보다 훨씬 더 오래 걸릴 수 있다는 것을 의미한다.

이 충돌은 이제 완전히 말이 된다.

이제 우리의 타임아웃이 너무 짧고 제대로 처리하지 못하고 있다는 것을 알았으니, 이것을 고치자.

나는 최근에 Combine 기술을 연습하고 있어서, 이것을 고치기 위해 Combine을 사용하고 싶다.

굉장해.

그래서 이제 우리는 두 출판사의 결과를 병합하고 있으며, 현재 30초인 타임아웃이 되면 충돌이 아닌 완료 핸들러라고 부릅니다.

문제가 해결됐어.

주최자로 돌아가서 이 문제를 해결된 것으로 표시합시다.

오, 내 상사가 방금 나한테 문자를 보낸 것 같아.

오, 크레이그는 데모에서 충돌을 쳤어.

고맙게도, 내 상사는 주최자의 새로운 공유 기능을 사용하여 크레이그가 쳤던 정확한 충돌을 나에게 보냈기 때문에, 나는 그것을 파헤칠 필요가 없다.

이 링크를 클릭하면, 주최자는 그 링크에 포함된 단일 충돌에 대한 집중된 뷰를 만듭니다.

난 사실 전에 이 충돌을 본 적이 있어.

나는 며칠 전에 이것을 고쳤고 해결된 것으로 표시했다.

나는 또한 근본적인 문제를 기억할 수 있도록 충돌에 더 친근한 이름을 주었다.

내가 가서 내 상사에게 내가 이미 이걸 고쳤다는 걸 알려줄게.

그래서 우리는 주최자의 새로운 필터를 사용하여 앱 클립 충돌을 분류하는 방법, 인스펙터의 새로운 분포 그래프를 사용하는 방법, 그리고 TestFlight 피드백을 사용하여 재현하기 어려웠을 문제를 해결하는 방법을 살펴보았습니다.

이제 새로운 Terminations Organizer와 MetricKit에 대한 개선 사항을 살펴봅시다.

새로운 종료 주최자는 고객에게 영향을 미칠 수 있는 앱 종료 추세를 보여줍니다.

충돌 주최자에서 볼 수 있는 충돌은 프로그래밍 실패의 결과이지만, 앱의 프로세스를 종료할 수 있는 다른 방법이 있습니다.

종료는 "출시 타이밍" 또는 "시스템 메모리 제한에 도달"과 같은 이유로 분류됩니다.

앱의 종료 이벤트의 이러한 범주를 이전 버전과 비교하여 회귀를 찾을 수 있습니다.

이러한 종료 중 일부는 백그라운드에서 발생하지만, 어떤 경우에는 앱이 화면에 있는 동안 발생할 수 있습니다.

종료 주최자는 당신이 차이점을 이해하는 데 도움을 줄 수 있으므로 그것들을 고칠 계획을 세울 수 있습니다.

회귀에 뛰어들고 싶다면, 올해 애플리케이션 성능 생존 가이드 세션을 확인하고, 종료에 대해 자세히 알아보려면, 세션을 확인하는 것이 좋습니다. 왜 내 앱이 죽나요? 2020년부터.

익숙하지 않다면, Apple 프레임워크 MetricKit을 사용하여 코드에서 충돌 로그를 수집할 수 있습니다.

MetricKit을 가져오고, MetricKit 관리자를 듣기 시작하고, MetricKit 진단 페이로드가 수신될 때 crashDiagnostics 속성을 사용하기만 하면 됩니다.

올해 새로운 충돌 진단은 더 이상 집계되지 않고 매일 한 번 제공되지만 이제 앱의 다음 출시에 전달되므로 충돌 로그에 더 빨리 액세스할 수 있습니다.

저는 또한 MetricKit이 이제 macOS를 지원한다는 것을 발표하게 되어 기쁩니다.

MetricKit 사용에 대해 자세히 알아보려면, 2020년부터 MetricKit의 새로운 기능 세션을 추천합니다.

충돌을 추적하고 볼 수 있는 다른 많은 방법이 있다.

장치 창에서 또는 장치에서 직접 로그를 공유하여 연결된 장치의 충돌에 액세스할 수 있습니다.

XCTest는 테스트를 실행할 때 발생하는 충돌을 수집하며, 콘솔 앱을 사용하여 Mac과 시뮬레이터에서 충돌을 볼 수 있습니다.

이러한 추가 도구에 대한 자세한 내용은 2018년의 충돌 및 충돌 로그 이해 세션을 확인하세요.

오늘 우리는 몇 가지 훌륭한 새로운 기능을 보았다.

우리는 새로운 빠른 충돌 로그 전달, TestFlight 피드백 통합 및 배포 메트릭이 당신의 경험 수정 충돌을 획기적으로 개선하고 궁극적으로 앱의 건강과 사용자 경험을 개선하기를 바랍니다.

봐줘서 고마워.

그리고 기억하세요, 성공으로 가는 길은 항상 건설 중입니다.

[타격적인 음악].