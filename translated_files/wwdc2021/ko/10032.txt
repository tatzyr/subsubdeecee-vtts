10032

♪ 베이스 음악 연주 ♪

♪

메간 가드너: 안녕하세요! 제 이름은 WebKit 팀의 엔지니어인 Megan Gardner입니다. 오늘 우리는 WKWebView 추가 사항을 함께 살펴볼 것입니다.

여행을 시작하기 전에, 우리가 무엇을 탐험하고 있는지 확실히 합시다.

WKWebView가 무엇이고 왜 앱에서 사용하고 싶은지 말씀드리겠습니다.

사용자가 URL을 클릭하면, 그들은 웹 페이지가 로드되고 해당 콘텐츠와 상호 작용할 수 있기를 기대하고 있다.

URL을 로드하고, 콘텐츠를 렌더링하고, 그 콘텐츠에서 자바스크립트를 실행하는 것은 매우 복잡한 작업입니다!

그래서 우리는 당신을 위해 그 작업의 대부분을 WKWebView 안에 캡슐화했습니다.

그리고 너만을 위한 게 아니야!

WKWebView는 iOS와 MacOS의 모든 웹 콘텐츠를 표시하는 데 사용되는 보기입니다.

여기에는 사파리가 포함된다.

따라서 앱에 웹 페이지를 표시해야 한다면, WKWebView를 추가해야 한다고 가정할 수 있습니다.

하지만 기다려!

그 내용으로 뭘 하고 있어?

웹 페이지를 볼 수 있는 방법이 필요하지만, 해당 콘텐츠와 많은 맞춤형 상호 작용이 필요하지 않다면, SFSafariViewController가 필요할 것입니다.

이것은 당신의 앱 안에 있는 작은 사파리와 같습니다.

이러한 견해 중 하나를 사용하는 것은 믿을 수 없을 정도로 간단하지만, 절충안이 있다.

웹 콘텐츠와 상호 작용하기 위해 할 수 있는 일은 거의 없습니다.

하지만 올해, 우리는 사파리 뷰 컨트롤러로 조금 더 쉽게 할 수 있도록 했습니다.

사용자는 항상 사파리 뷰 컨트롤러 콘텐츠의 공유 시트를 통해 앱 확장 프로그램을 실행할 수 있었지만, 앱만을 위해 만들어진 특수 기능의 경우 사용자가 발견하기가 조금 번거롭고 어려웠습니다.

그래서 iOS 15에서, 우리는 당신의 앱 확장 프로그램 중 하나를 사파리 뷰 컨트롤러의 사용자 지정 버튼으로 가져오기 위해 새로운 API를 추가했습니다.

이 버튼을 앱의 공유 확장 프로그램 중 하나에 매핑할 수 있으며, 실행될 확장 프로그램을 가장 잘 나타내는 해당 버튼의 이미지를 설정할 수도 있으며, 사용자가 페이지에서 자바스크립트를 실행하는 것을 포함하여 도구 모음에서 직접 앱 확장 프로그램을 실행할 수 있습니다.

하지만 이것은 여전히 매우 제한된 양의 상호 작용이다.

그리고 그것이 WKWebView가 들어오는 곳이다.

WKWebView를 사용하면 보여주는 콘텐츠로 많은 일을 할 수 있습니다.

우리는 콘텐츠를 로드하고, 조작하고, 상호 작용하기 위한 많은 API를 가지고 있습니다.

그래서, 웹 콘텐츠를 보여줘야 하고, 복잡한 상호 작용을 해야 한다면, WKWebView가 당신을 위한 것입니다.

그리고 WKWebView는 웹 콘텐츠와 상호 작용하기 때문에, 우리는 항상 당신이 더 쉽게 할 수 있도록 노력하고 있습니다.

우리는 당신이 웹 뷰의 콘텐츠에 액세스하고 조작하는 데 도움이 되는 쉬운 API를 만들어 더 많은 워크로드를 처리합니다.

올해 우리는 WKWebView에 새롭고 유용한 기능을 추가하여 열심히 일해 왔으며, 오늘, 그 중 일부에 대해 말씀드리고 싶습니다.

먼저, 자바스크립트를 주입하지 않고도 웹 콘텐츠와 상호 작용하고 조작할 수 있는 몇 가지 API를 다룰 것입니다.

그런 다음 이전에 Safari에서만 사용할 수 있었던 기능에 액세스할 수 있는 몇 가지 API를 다루어 앱에서 더 깊은 브라우저와 같은 경험을 할 수 있습니다.

자바스크립트 사용을 거부할 수 있는 이러한 API를 검토하기 전에, 자바스크립트를 피하고 싶은 이유를 검토해 봅시다.

우리는 자바스크립트를 사랑해!

그건 웹의 언어야!

하지만 자바스크립트를 주입하는 것은 복잡하다.

주입을 통해 교차해야 하는 네이티브와 웹 간의 인터페이스는 탐색하기 어렵고 번거로울 수 있습니다.

또한 여러 웹 소스의 콘텐츠를 다룰 때 의도하지 않은 부작용이 쉽게 발생하거나 관리하기 어려울 수 있습니다.

가능하다면 그 두통을 피하는 것이 가장 좋다.

주입된 자바스크립트와 호환되지 않는 몇 가지 기능도 있습니다.

작년에, 우리는 앱 바운드 도메인이라는 새로운 기능을 도입했다.

이를 통해 앱에서 깊은 상호 작용을 허용하고 싶은 도메인을 지정할 수 있습니다.

앱 바운드 도메인은 사용자를 위한 앱의 보안과 프라이버시를 높이는 데 도움이 됩니다.

하지만 이 이점을 얻으려면, 웹 보기에 자바스크립트를 삽입할 수 없습니다.

그렇게 하면 기능이 비활성화됩니다.

자바스크립트를 주입하기로 선택하면 웹 보기에서 액세스할 수 없는 Apple Pay와 같은 다른 고부가가치 기능도 있습니다.

따라서 자바스크립트를 주입하지 않고도 웹 뷰의 콘텐츠와 쉽게 상호 작용할 수 있도록 몇 가지 새로운 API를 추가했습니다.

이 새로운 API는 세 가지 범주로 나뉜다.

먼저, 페이지의 테마 색상과 웹사이트의 관련 색상에 액세스할 수 있는 간단한 방법이 있습니다.

다음으로, 텍스트 상호 작용을 비활성화하고 웹 보기에서 미디어 재생을 제어할 수 있는 방법.

먼저, 테마 색상을 살펴봅시다.

작년에 우리가 Safari 웹사이트에서 WebKittens와 Pups의 피드를 결합하기 위해 Brady Eidson이 작성한 미션 크리티컬 내부 앱 중 하나인 Browser Pets에 대해 이야기했던 것을 기억할 것입니다.

음, 모든 새로운 API를 사용할 수 있게 했기 때문에, 브래디와 나는 우리의 많은 사기를 높이는 고양이와 개를 최대한 활용하기 위해 이 중요한 도구를 업데이트해야 한다고 결정했다.

WebKittens 웹사이트의 엔지니어 중 한 명이 시즌에 따라 변화하는 역동적인 테마 색상을 추가하기로 결정했으며, 우리의 중요한 애완 동물 사진에 약간의 감각을 더했습니다.

나는 이것이 앱에도 반영되기를 원했지만, 코드를 복제하고 싶지 않았다.

다행히도, 우리는 이것을 매우 쉽게 만드는 새로운 API를 가지고 있다.

여기에서 볼 수 있듯이, 이 새로운 API를 사용하여 헤더 보기의 색상을 웹사이트의 테마 색상으로 설정하여 동료 엔지니어가 WebKittens 웹사이트에 넣은 작업을 활용할 수 있습니다.

웹사이트 엔지니어는 미래에 새로운 테마를 추가할 수도 있으며, 추가 작업 없이 앱에 반영될 것이다.

themeColor가 설정되지 않은 경우, 향후 시드에서 대체 계산된 배경색이 underPageBackgroundColor로 노출되어 유사하게 사용할 수 있습니다.

당신은 사파리가 앱을 웹 페이지와 혼합하는 모양을 만들기 위해 이것을 어떻게 사용하고 있는지 알아챘을 것입니다.

웹 콘텐츠의 끝을 스크롤할 때 배경을 채우는 데 사용되는 색상을 사용자 정의하기 위해 이 값에 쓸 수도 있습니다.

다음으로, 텍스트 상호 작용에 대해 이야기해 봅시다.

우리는 최근에 Safari 웹사이트의 WebKittens와 Pups에 비디오를 추가했으며, Browser Pets 사용자는 해당 비디오를 재생하려고 할 때 실수로 텍스트 선택 컨트롤을 활성화한 것에 대해 불평하고 있습니다.

음, 우리는 그걸 원하지 않아!

다행히도, 웹 보기에서 텍스트 상호 작용을 빠르고 쉽게 비활성화할 수 있는 새로운 API가 있습니다.

그건 간단해!

웹 뷰를 설정할 때, 웹 뷰를 만드는 데 사용되는 환경 설정에서 textInteractionEnabled를 false로 설정해야 합니다.

이것은 그 웹 뷰에서 모든 텍스트 상호 작용을 끌 것이다.

이제 텍스트 선택 컨트롤은 미디어 컨트롤에 방해가 되지 않으며, 우리는 그 키티 비디오를 방해받지 않고 재생할 수 있습니다.

미디어 컨트롤에 대해 말하자면, 미디어 재생 컨트롤에 대한 몇 가지 훌륭한 업데이트가 있습니다!

이전에는 웹 보기에서 재생 중인 미디어를 일시 중지하거나 일시 중지하려면 자바스크립트를 삽입해야 합니다.

또한 DOM을 제어하려면 DOM에서 특정 요소를 찾아야 합니다.

하지만 이제, 우리는 당신의 웹 보기에서 미디어 상태를 쉽게 제어할 수 있는 간단한 API를 가지고 있습니다.

이제 모든 미디어를 쉽게 일시 중지하거나, 모든 미디어 창을 닫거나, 페이지에서 미디어 상태를 설정하거나, 미디어를 일시 중지하여 setAllMediaPlaybackSuspended가 false로 설정될 때까지 미디어를 일시 중지하고 사용자 컨트롤을 비활성화할 수 있습니다.

이 새로운 API와 얼마나 쉽게 사용할 수 있는지에 더 익숙해지도록 돕기 위해, 저는 우리가 브라우저 펫에서 이러한 새로운 미디어 제어 API를 어떻게 활용했는지 보여줄 브래디에게 넘길 것입니다!

브래디 아이드슨: 고마워, 메건.

안녕하세요, 저는 WebKit 팀의 엔지니어인 Brady Eidson입니다.

메건이 언급했듯이, 사파리 웹사이트의 WebKittens와 Pups는 최근 스틸 이미지 대신 비디오를 게시할 수 있는 기능을 추가했는데, 이는 브라우저 펫 앱에도 비디오가 있다는 것을 의미합니다.

앱이 지금 어떻게 생겼는지 여기 있습니다.

이 버튼들은 내가 추가하고 있는 다양한 기능을 위한 기본 UI 버튼이다.

페이지 상단의 배너는 웹 콘텐츠이며, 웹사이트는 내가 메간이 언급한 웹 뷰 테마컬러 속성을 사용하여 채택한 테마 색상을 설정했다.

일단 비디오가 추가되면, 몇몇 사람들은 비디오가 자동 재생되지 않는 것에 대한 선호도를 표명했다.

이 일시 정지 버튼은 그들을 수용하기 위한 것이다.

그게 뭘 하는지 보자.

개들이 아니라 새끼 고양이 비디오만 멈췄어.

그리고 플레이를 누르면 아무 일도 일어나지 않는다.

코드를 살펴봅시다.

이 자바스크립트는 이전에 이 비디오를 일시 중지할 수 있는 유일한 옵션이었고, 문제가 있었다.

나는 두 개의 다른 웹사이트의 웹 페이지의 구조를 이해해야 하며, 그 구조는 끊임없이 변화하고 있다.

예를 들어, 강아지 웹사이트의 이 자바스크립트는 작동했지만 더 이상 작동하지 않습니다.

다행히 지금은 더 나은 방법이 있어.

먼저, 나는 웹 보기에서 pauseAllMediaPlayback을 호출하는 것을 채택했다.

그것은 페이지의 모든 미디어 요소에서 자바스크립트 함수 일시 정지를 호출하는 것과 같다.

그리고 그건 잘 작동해.

하지만 페이지를 새로 고칠 때 무슨 일이 일어나는지 주목하세요.

비디오가 다시 재생됩니다.

새 페이지 로드.

이 비디오들은 한 번도 일시 정지된 적이 없다.

더 끈적끈적한 것을 원한다면, setAllMediaPlaybackSuspended를 사용할 것이다.

지금 시도해 보자.

비디오를 일시 중지하는 방법에 주목하고, 페이지를 새로 고친 후에도 일시 중지된 상태로 유지됩니다.

이 설정은 웹 뷰 자체의 속성이며 그 안에 있는 콘텐츠의 속성이 아니기 때문입니다.

그것은 또한 내가 재개할 수 있게 해준다.

이러한 새로운 API 덕분에, 이제 앱에 더 나은 미디어 경험을 추가할 수 있는 유연성을 갖게 되었습니다.

너에게 돌아가, 메건.

메건: 고마워, 브래디!

그 애완동물들은 멋져 보이고, 새로운 미디어 컨트롤로 훨씬 더 좋아 보인다.

그래서 그것들은 자바스크립트 사용을 피할 수 있는 WKWebView의 새로운 API입니다.

우리는 그들이 당신의 앱을 작성하고 웹 콘텐츠와 이전보다 훨씬 더 쉽게 상호 작용하기를 바랍니다.

다음으로, 이전에 Safari에서만 사용할 수 있었던 기능에 액세스할 수 있는 몇 가지 브라우저 수준의 API를 검토할 것입니다.

우리는 다루어야 할 API의 세 가지 영역이 있다.

첫 번째는 간단한 HTTPS 재정의 플래그입니다.

다음은 미디어 캡처 또는 - 웹에서 알려진 바와 같이 - getUserMedia이며, 현재 웹 보기에서 완전히 사용할 수 있습니다.

그리고 마지막으로, 앱에서 다운로드를 허용하고 관리하기 위해 WKWebView와 관련하여 작동하는 다운로드를 관리하는 새로운 API.

그러니 HTTPS로 시작합시다.

웹의 보안과 개인 정보 보호는 항상 중요했으며, 우리는 항상 당신과 당신의 사용자를 위해 보안과 개인 정보를 더 쉽게 만들 수 있는 새로운 방법을 찾고 있습니다.

웹을 탐색하는 더 안전하고 안전한 방법이기 때문에 트래픽을 HTTPS로 옮기기 위한 광범위한 산업 추진이 있었다.

많은 상위 사이트는 HTTPS를 지원하며, 일부는 HTTP에서 HTTPS로 연결을 자동으로 업그레이드하기도 합니다.

iOS 15와 macOS Monterey를 시작으로, 우리는 HTTPS를 지원하는 사이트로 HTTP 요청을 받고 당신을 위해 업그레이드하고 있습니다.

이 추가 보안을 얻기 위해, 당신은 아무것도 할 필요가 없습니다!

하지만, 로컬 디버깅을 위해 그것을 꺼야 한다면, 구성에 쉽게 설정할 수 있는 플래그가 있습니다.

당신이 이것을 필요로 하지 않기를 바라지만, 당신이 한다면 그것은 여기에 있으며, 아마도 프로덕션 코드로 해서는 안 될 것입니다.

다음으로, 미디어 캡처에서 무슨 일이 일어나고 있는지 검토해 봅시다.

iOS 14.3을 보면서, 우리는 WebRTC 기능이 앱 내에서 작동할 수 있도록 WKWebView용 getUserMedia를 활성화했습니다.

이제, 우리는 그것을 훨씬 더 좋게 만들었습니다!

사용자 지정 계획 핸들러에서 웹 콘텐츠를 로드할 때, 사용자 요청 프롬프트는 웹사이트 URL의 요청을 표시하는 대신 앱을 요청의 출처로 표시합니다.

이것은 사용자에게 더 직관적이고 원활한 경험을 제공해야 합니다.

프롬프트가 URL의 요청으로 유지되기를 원한다면, 사용자 지정 스킴 핸들러 없이 로드하면 프롬프트가 오늘과 같이 표시됩니다.

또한 웹 콘텐츠로 작업할 때 사용자에게 카메라 및 마이크 권한을 요청하는 시기와 방법을 결정할 수 있는 새로운 API가 있습니다.

일반 자격과 프롬프트를 통해 카메라와 마이크에 대한 사용자 권한을 획득하면, 권한 프롬프트를 표시할지 여부를 결정할 수 있습니다.

이를 사용하여 자신만의 프롬프트를 구현하거나 제어하고 신뢰하는 웹 콘텐츠에 대한 사용자의 이전 응답을 기억할 수 있습니다.

WKWebView에서 UI 대리자를 만들고 설정함으로써, 이제 사용자에게 카메라나 마이크를 사용할 수 있는 권한을 묻는 메시지가 언제인지 결정할 수 있습니다.

이 위임을 구현하지 않으면, 사용자는 오늘처럼 계속해서 프롬프트를 받게 될 것입니다.

하지만 웹사이트와의 이전 상호 작용에서 사용자 선호도를 저장했기 때문에 프롬프트를 건너뛰고 싶다면, 이 대리인은 당신이 그렇게 할 수 있도록 할 것입니다.

브라우저 애완동물을 위해 이 새로운 API를 어떻게 활용했나요?

음, 우리가 통제할 수 없는 상황 때문에, 그 팀은 월간 Pups in the Park 모임을 취소해야 했어.

우리의 사랑하는 강아지들을 서로 공유해야 할 필요성을 충족시키기 위해, 브래디와 나는 브라우저 펫에 가상 개 공원을 추가하기로 결정했다. 그래서 우리는 여전히 우리의 사회적 강아지의 장점을 계속할 수 있었다.

여기에는 getUserMedia를 사용하여 WebRTC 기능을 설정하여 서로와 강아지 친구들과 실시간으로 보고 채팅할 수 있습니다!

UI 대리자를 설정할 때, 우리는 서버의 요청이 이미 앱에 카메라와 마이크를 사용할 수 있는 권한을 부여한 경우 사용자가 권한을 부여할 수 있는 요청이라는 것을 알고 있습니다.

그래서 나는 내 WKWebView에서 이 대리인을 설정하여 그 프롬프트를 건너뛸 수 있다.

하지만 그게 내가 할 수 있는 전부는 아니야!

이 사용자 미디어를 시작하고 중지하기 위해 자바스크립트를 실행해야 하는 대신, 자바스크립트 없이 미디어 컨트롤과 상호 작용할 수 있는 방법과 유사한 상태를 얻고 설정할 수 있습니다.

이것은 마이크뿐만 아니라 카메라에서도 작동한다.

이 새로운 API와 그들이 얼마나 쉽게 사용할 수 있는지에 더 익숙해질 수 있도록, 저는 그것을 브래디에게 돌려줄 것입니다. 브래디는 우리가 어떻게 가상 개 공원을 브라우저 펫에 추가했는지 보여줄 것입니다!

브래디: 고마워, 메건.

메건이 언급했듯이, 우리는 우리가 살고 있는 시간 때문에 가상 개 공원을 가동해야 했다.

브라우저 펫 앱을 다시 한 번 살펴봅시다.

여러분 중 몇몇은 통화 버튼을 눈치챘을 것입니다.

지금 그걸 탭하자.

우리는 친구 집에서 주최하는 가상 개 공원에 즉시 연결됩니다.

연결을 탭하여 재미에 동참합시다.

이제, 우리가 이 앱에서 카메라를 사용한 것은 이번이 처음이기 때문에, 우리는 브라우저 펫에 대한 시스템 차원의 프롬프트를 받는다.

확실히 허용을 선택하자.

그리고 우리가 현재 보고 있는 웹사이트와 관련된 두 번째 프롬프트는 오늘날 시스템의 기본 동작입니다.

그것도 허용하자.

그리고 여기 있습니다. getUserMedia가 작동하고 있습니다.

하지만 Megan이 언급한 것처럼 경험을 더 좋게 만들기 위해 WKUIDelegate를 변경할 수 있는지 봅시다.

우리 대표단에서, 우리는 가상 개 공원 콘텐츠를 제공하는 호스트를 확인하고 미디어 캡처 액세스를 허용할 것입니다.

브라우저 펫이 어떻게 바뀌는지 봅시다.

좋아. 프롬프트가 없어.

그리고 우리가 대리인을 사용하는 방식으로, 우리는 또한 미래의 콘텐츠가 다른 호스트에서 와서 카메라에 액세스하려고 할 경우 사용자를 안전하고 비공개로 유지합니다.

이제 화상 채팅을 하고 있으니, 음소거 버튼을 시도해 봅시다.

보시다시피, 제 카메라 피드가 떨어졌습니다.

또한 상태 표시줄의 기록 표시기가 사라지고 음소거가 해제되었다는 것을 알 수 있습니다. 카메라 피드를 다시 가져올 수 있고 기록 표시기가 반환됩니다.

이것은 쉬웠다; 자바스크립트가 필요하지 않았다.

내가 해야 할 일은 메건이 언급한 것처럼 그것을 webView.setCameraCaptureState에 연결하는 것뿐이었다.

이것은 이러한 API를 통해 WKWebView 앱에서 미디어 캡처 경험을 쉽게 사용자 정의할 수 있는 방법의 맛일 뿐입니다.

너에게 돌아가, 메건.

메건: 고마워, 브래디!

나는 우리가 우리의 모든 멋진 애완동물들을 계속 만날 수 있어서 정말 기뻐.

마지막으로, 다운로드에 대해 이야기해 봅시다.

브라우저 펫 사용자들은 이 귀여운 동물 사진을 친구 및 가족과 공유할 수 있기를 원한다고 말했지만, 애플 직원만이 브라우저 펫 앱을 사용할 수 있었다.

다행히도, 웹 보기에서 다운로드를 허용하고 관리할 수 있는 API를 추가하여 그 어느 때보다 쉽게 파일을 공유할 수 있습니다!

웹에서 다운로드를 시작하는 세 가지 방법이 있습니다.

웹 콘텐츠는 다운로드를 시작할 수 있고, 서버는 다운로드를 시작할 수 있으며, 앱은 다운로드를 시작할 수 있습니다.

웹 콘텐츠는 이와 유사한 자바스크립트로 다운로드를 시작합니다.

이 자바스크립트가 실행되면, shouldPerformDownload가 true로 설정된 내비게이션 대리자를 호출하는 다운로드 탐색 작업을 시작합니다.

이 값을 사용하여 다른 논리와 함께 다운로드가 허용되어야 하는지 결정해야 합니다.

서버는 웹 보기에서 loadRequest를 호출한 후 이와 같이 HTTP에서 다운로드를 시작할 수 있습니다.

그런 일이 발생하면, WKNavigationResponse에는 "첨부"가 포함된 값이 있는 Content-Disposition 헤더 필드가 있으며, 그렇게 되면 의사 결정 핸들러에서 WKNavigationActionPolicyDownload를 반환하여 다운로드를 시작해야 합니다.

마지막으로, 당신의 앱은 이와 같은 NSURLRequest를 사용하여 현재 페이지의 맥락에서 무언가를 다운로드하고 싶다고 결정할 수 있습니다.

어떤 방법을 사용하든, WKDownload 객체를 얻을 때, 바이트를 디스크에 쓸 위치를 알려줄 수 있도록 해당 객체의 대리자 속성을 설정해야 합니다.

그렇지 않으면, 다운로드가 자동으로 취소됩니다.

다운로드가 실패하면, 대리인에게 방법을 구현하면 다운로드를 재개할 데이터가 전달됩니다.

그런 다음 그 데이터를 사용하여 웹 보기에서 다운로드를 다시 시작할 수 있습니다.

이 새로운 API로, 저는 이제 고양이들을 파일에 다운로드하고 사진에 저장하지 않는 쉬운 방법을 제공할 수 있습니다.

그래서 그것들은 우리의 브라우저 수준의 API이다.

우리는 그들이 당신과 당신의 사용자에게 당신의 앱에서 풍부한 웹 경험을 할 수 있는 더 많은 옵션을 제공할 것이라고 생각합니다.

와, 정말 멋진 여행이야!

오늘 우리는 많은 것들을 함께 탐구했다.

우리는 자바스크립트를 주입하는 대신 사용할 수 있는 몇 가지 API에 대해 이야기했으며, 좀 더 강력한 브라우저 수준의 기능을 다루었습니다.

새로운 테마 색상, 텍스트 상호 작용 및 미디어 재생 API를 사용하는 것이 훨씬 쉽습니다.

그리고 우리는 자동 HTTPS 연결, getUserMedia 프롬프트의 쉽고 안전한 제어, WKDownload의 추가를 통해 앱에서 더 풍부하고 안전한 경험을 할 수 있도록 했기 때문에 앱에서 다운로드를 쉽게 관리할 수 있습니다.

"고급 웹 콘텐츠 개발" 세션에서 올해 지원하는 새로운 웹 API에 대해 자세히 알아볼 수 있습니다.

또한 "Discover Web Inspector improvements"에서 웹 콘텐츠를 디버깅하고 개선하는 새로운 방법을 발견할 수 있습니다. 앱이나 웹을 위한 훌륭한 웹 콘텐츠를 만드는 데 도움이 되는 두 가지 훌륭한 세션입니다.

웹은 여전히 성장하고 있으며, 그렇게 하는 것처럼, 우리도 그렇게 될 것이다.

올해 우리가 구현한 많은 API는 개발자 피드백을 기반으로 했다.

그래서 당신이 보고 싶은 API가 있다면, 우리는 당신의 의견을 듣고 싶습니다!

Apple과의 피드백 외에도, webkit.org는 슬랙 작업 공간에서 메일링 리스트에 이르기까지 연락할 수 있는 여러 가지 방법이 있습니다.

WebKit은 오픈 소스이므로, 파일 버그뿐만 아니라 WebKit을 직접 확인하고 구축하는 방법을 배울 수 있는 곳이기도 합니다.

우리의 새로운 API에 대한 탐구에 동참해 주셔서 감사합니다!

나는 네가 WWDC21의 남은 시간을 잘 보내길 바라!

♪