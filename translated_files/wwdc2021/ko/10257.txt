10257

♪ 베이스 음악 연주 ♪

♪

마린 유뱅크스: 안녕하세요, 여러분.

저는 ClassKit 팀의 엔지니어인 Marin이며, 파일 기반 앱을 위해 ClassKit에 추가한 새로운 API를 보여드리게 되어 기쁩니다.

오늘, 저는 학교 과제와 그것이 ClassKit과 함께 어떻게 사용되는지 살펴볼 것입니다.

그런 다음, 파일 기반 앱을 위한 새로운 API에 대한 심층적인 검토를 할 것입니다.

다음으로, 샘플 구현을 안내해 드리겠습니다.

그리고 마지막으로, ClassKit의 개발자 모드를 사용하여 새로운 API를 테스트하는 방법을 보여드리겠습니다.

학교 과제에 대한 간략한 개요를 제공하는 것으로 시작하겠습니다.

Schoolwork는 교사가 학생들이 앱을 사용하여 학습할 수 있는 과제를 공유할 수 있는 교육용 앱입니다.

앱이 ClassKit 프레임워크를 채택하고 CLSContexts로 알려진 할당 가능한 콘텐츠를 광고하고 활동에 대한 진행 데이터를 보고하기 시작하면, 교사는 해당 콘텐츠를 할당하고 앱에서 보고한 진행 데이터를 볼 수 있습니다.

앱이 ClassKit을 지원하는 경우, 교사는 커리큘럼에서 앱을 사용할 가능성이 더 높아질 것입니다.

그리고 곧, Schoolwork는 훨씬 더 사용하기 쉽고 교사 워크플로우를 간소화하고, 교육을 알리고, 앱의 데이터를 교사에게 제공하기 위해 많은 새로운 기능을 추가할 것입니다.

이제 Schoolwork에 익숙해졌으니, 앱의 데이터가 Schoolwork로 어떻게 흘러 들어가는지 봅시다.

당신의 앱은 ClassKit 프레임워크에 데이터를 제출합니다.

ClassKit은 그 데이터를 Schoolwork 앱에 표시합니다.

그런 다음 데이터는 학생과 교사에게 제공됩니다.

다음은 ClassKit 지원 앱의 몇 가지 과제가 있는 스쿨워크의 모습입니다.

과제 중 하나를 탭하면 ClassKit을 채택하고 학생 진행 데이터를 보고한 앱의 예를 볼 수 있습니다.

우리는 조금 후에 이 사용 사례의 세부 사항을 살펴볼 것이다.

이제 스쿨워크를 검토했으므로, 새로운 파일 기반 진행 API에 대해 이야기해 봅시다.

App Store에는 190,000개 이상의 교육 앱이 있습니다.

그리고 여러분 중 많은 사람들이 ClassKit의 컨텍스트 기반 API를 채택했지만, 여러분 모두가 채택한 것은 아닙니다.

우리는 특히 파일과 상호 작용하는 앱과 ClassKit을 어떻게 채택하고 싶은지에 대한 피드백을 받았지만 컨텍스트는 사용 사례에 맞지 않았습니다.

음, 앱이 파일 기반이기 때문에 ClassKit 채택을 보류하고 있다면, 우리는 당신만을 위한 새로운 API를 추가했습니다.

이 새로운 API는 파일과 상호 작용하는 모든 앱을 위한 것입니다.

파일을 편집하거나 파일을 열고 볼 수 있는 앱이 있다면, 파일 기반 앱을 위한 새로운 API를 좋아할 것입니다.

이 새로운 API를 채택하면 스쿨워크에 할당될 때 앱 내에서 사용되는 파일에 대한 학생 진도 데이터를 보고할 수 있습니다.

교사가 ClassKit 지원 앱에서 콘텐츠를 할당할 때, 그들에게는 승리이자 앱의 훌륭한 새로운 사용 사례인 추가 통찰력을 제공받을 것입니다.

주목해야 할 한 가지 중요한 점은 앱이 Open in Place를 채택해야 한다는 것입니다.

앱이 Open in Place를 지원하면, 학생과 교사 간에 공유된 정확한 파일이 복사본이 아닌 앱에서 열립니다.

여기 파일에 진행 데이터를 추가하기 위한 새로운 API가 있습니다.

그것은 fetchActivity라고 불리며, CLSDataStore에 있습니다.

여기에 표시된 이 API의 비동기 및 비동기 대체 버전이 모두 있습니다.

파일의 파일 URL을 이 API에 전달하면 CLSActivity가 반환됩니다.

CLSActivity가 있으면, 진행률 데이터를 추가할 수 있습니다.

이제, 앱이 제출할 수 있는 진행 데이터의 유형을 살펴봅시다.

이미 ClassKit을 채택했다면, 이것은 우리가 사용할 수 있는 현재 진행 데이터 유형에 대한 검토가 될 것입니다.

ClassKit을 처음 사용하는 경우, 이러한 클래스는 현재 CLSContexts에서 사용되고 있지만, 동일한 데이터 유형을 파일에도 적용할 수 있습니다.

여기 CLSActivity가 있습니다.

이것은 특정 파일과 관련된 모든 진행 데이터를 캡슐화하는 데 사용되는 클래스입니다.

CLSActivity에 추가할 수 있는 몇 가지 유형의 데이터가 있습니다.

먼저 우리는 기간이 있다.

이것은 학생이 할당된 파일을 작업하는 데 보낸 시간이다.

모든 파일 형식에 대해 시간을 보고해야 합니다.

이 API를 사용하려면, CLSActivity에 있는 시작 및 중지 메서드를 호출하기만 하면 됩니다.

다음으로 우리는 진전이 있다.

이것은 0과 1 사이의 값이다.

진행 상황은 일반적으로 파일을 통해 학생의 진행 상황을 결정할 수 있을 때 사용됩니다.

예를 들어, 당신이 오디오나 비디오 파일을 가지고 있고, 학생이 50퍼센트를 통과했다고 가정해 봅시다.

재생 진행 상황을 .5로 보고할 것입니다.

진행 상황을 추가하려면, 진행 속성을 직접 설정하거나 시작부터 끝까지 범위를 추가할 수 있습니다.

겹치는 범위나 같은 범위를 여러 번 추가할 수 있습니다.

우리는 올바른 진행 상황이 학생과 교사에게 보고되도록 논리를 처리할 것이다.

우리는 또한 편집할 수 있는 파일이 있는 경우 유용한 primaryActivityItem을 가지고 있습니다.

primaryActivityItem을 설정하면 이 데이터가 학생과 교사에게 강조 표시되며, 스쿨워크 앱의 UI의 주요 부분에 표시됩니다.

추가 활동 아이템 속성도 있습니다.

이것은 추가 메타데이터를 추가하는 데 유용한 CLSActivityItems의 배열입니다.

primaryActivityItem을 추가하려면, CLSActivity에서 primaryActivityItem 속성을 설정하십시오.

additionalActivityItem을 추가하려면, CLSActivity에서 addAdditionalActivityItem 함수를 호출하고 추가하려는 activityItem을 전달하십시오.

primaryActivityItem 및 additionalActivityItem 속성은 CLSActivityItem의 세 가지 하위 클래스 중 하나에 대한 참조를 보유합니다.

다음 하위 클래스 중 하나를 추가할 수 있습니다: 첫째, CLSBinaryItem이 있습니다.

이것은 모든 이진 데이터 유형을 나타내는 데 사용됩니다.

이것의 예시 사용법은 퀴즈에 대한 질문일 수 있다.

학생이 옳거나 틀렸다고 가정해 봅시다.

또는 CLSQuantityItem을 추가할 수 있습니다.

이것은 일반적인 숫자 값에 사용됩니다.

당신은 이것을 문서의 페이지 수, 슬라이드 수 또는 총 단어 수에 사용할 수 있습니다.

그리고 마지막은 CLSScoreItem이다.

이 수업은 전체의 일부로 표현되는 모든 것에 사용된다.

예를 들어, 퀴즈 점수; 사용자는 10점 만점에 8점을 받았다.

이러한 하위 클래스의 조합을 활동, 그 중 하나 또는 모두에 추가할 수 있습니다.

이제 우리가 추가할 수 있는 데이터의 유형을 알았으니, 이 API를 앱에 채택하는 코드 샘플을 살펴봅시다.

여기 텍스트 파일을 열고 편집할 수 있는 샘플 앱이 있습니다.

학생이 텍스트 파일을 열면, 나는 타이머를 시작할 것이다.

학생은 파일을 편집할 것이다.

학생이 파일을 닫으려고 할 때, 나는 총 단어 수를 기록하고 타이머를 멈출 것이다.

파일을 열고 학생이 상호 작용하기 시작할 때 호출되는 코드의 부분으로 이동해 봅시다.

나는 openFile 기능이 있어.

여기가 내가 시간을 추적하기 시작할 곳이야.

앱에서, 당신은 파일을 열기 위해 이미 가지고 있는 코드의 부분으로 갈 것이며, 이것은 타이머를 시작하기 위해 약간의 코드를 추가하는 곳입니다.

먼저, 내 파일 URL에 대한 CLS 활동을 가져올게.

활동이 끝나면, 시간을 추적하기 시작하기 위해 전화한 다음 CLSDataStore에 저장하여 변경 사항을 커밋할 것입니다.

구현을 테스트할 때 나중에 다시 돌아올 중단점을 여기에 추가합시다.

이제, 저는 또한 학생이 끝나면 타이머를 멈추고 primaryActivityItem을 추가하고 싶습니다.

그래서 학생이 파일을 닫으려고 할 때 호출되는 내 코드의 부분으로 이동합시다.

여기서 CLSDataStore.shared를 호출하겠습니다. fetchActivity, primaryActivityItem을 가져와서 이미 존재하는 경우 업데이트하거나, 아직 없다면 새 CLSQuantityItem을 만드세요.

CLSQuantityItem을 갖게 되면, 그 값을 업데이트하고 내 활동에서 primaryActivityItem으로 설정할 수 있습니다.

나는 내 활동에 진전을 추가할 수 있다.

그리고 마지막으로, 타이머를 멈추기 위해 멈추라고 전화하세요.

그럼, 내가 세이브에 전화할게.

CLSDataStore에서 저장을 호출하지 않으면, 우리는 방금 변경한 어떤 것도 지속하지 않을 것입니다.

나도 여기에 중단점을 추가할 거야.

우리는 이것을 사용하여 학생 진도 데이터 제출을 디버깅하는 데 도움을 줄 것입니다.

이제 샘플 앱에 API를 채택했으므로, 스쿨워크와 개발자 모드를 사용하여 구현을 어떻게 테스트할 수 있는지 봅시다.

먼저, 우리는 개발에 대한 ClassKit 환경 자격을 설정해야 합니다.

이것은 Xcode 안에 있다.

기본값은 생산이다.

우리는 개발자 모드와 스쿨워크를 사용하여 테스트할 수 있도록 개발 자격의 가치를 변경할 것입니다.

다음에 코드를 실행할 때, 그것은 개발자 모드에서 실행될 것이다.

테스트를 마친 후 이것을 생산으로 되돌리는 것이 중요합니다.

다음으로, 우리는 iPad에서 개발자 모드를 켜야 합니다.

설정 앱을 열고 개발자 > ClassKit API로 이동합니다.

우리는 학교 과제에서 우리의 역할을 교사로 바꾸기 위해 선생님을 선택할 것이다.

이제, 우리는 스쿨워크 앱을 열 것이다.

스쿨워크가 열리면, 우리는 교사 UI를 받게 된다.

그리고 오른쪽 상단 모서리에 있는 할당 만들기 버튼을 탭하면, 파일 버튼을 탭하여 앱이 지원하는 파일을 추가하는 과제를 만들 수 있습니다.

그런 다음 추가하고 싶은 파일을 선택하고, 수업과 과제 제목을 입력할 것입니다.

원한다면 선택적으로 교육용 텍스트를 추가할 수도 있습니다.

그런 다음 오른쪽 상단 모서리에 있는 버튼을 눌러 이 과제를 수업에 게시하세요.

이제 과제를 만들었으므로, 학생 역할을 전환하고 진행 데이터 제출 구현을 테스트할 수 있습니다.

그럼 설정 앱으로 다시 이동합시다.

설정에서 개발자 > ClassKit API를 선택하고 학생을 탭합니다.

이것은 이제 학교 과제에서 내 역할을 학생으로 바꾸었다.

우리는 스쿨워크 앱으로 돌아갈 거야.

UI의 오른쪽 상단 모서리에 더 이상 과제 만들기 버튼이 없기 때문에 이제 학생으로 로그인한 것을 볼 수 있습니다.

화면 중간에, 나는 우리가 방금 만든 과제를 볼 수 있고, 그것을 탭하면, 과제의 세부 사항을 볼 수 있다.

파일 아이콘을 탭하면 진행 데이터를 보고하기 시작하는 앱에 딥 링크됩니다.

그 파일은 내 앱에서 열리고, 내 코드는 타이머를 시작하기 위해 호출된다.

여기서 우리는 타이머를 시작하기 위해 세이브를 호출한 후 중단점이 부딪히는 것을 볼 수 있습니다.

그리고 플레이를 누른 다음 앱으로 돌아가면, 학생 진행 배너가 위에서 아래로 떨어지는 것을 볼 수 있는데, 이는 저장이 성공적이고 타이머가 시작되었다는 표시입니다.

그런 다음 에세이를 완성하기 위해 많은 텍스트를 추가하겠습니다.

내 샘플 앱에는 학생이 파일 편집을 마쳤을 때 탭할 완료 버튼이 있다.

그래서 나는 왼쪽 상단 모서리에 있는 완료 버튼을 탭할 것이다.

이 시점에서, 내 closeFile 함수가 호출될 것이다.

우리는 wordCount를 primaryActivityItem으로 저장하고 타이머를 멈추기 위해 두 번째 중단점을 쳤다는 것을 알 수 있다.

그런 다음, 우리는 Play를 누르고 Schoolwork로 돌아갈 수 있습니다.

스쿨워크에서, 나는 내 앱에서 제출한 진행 데이터를 볼 수 있다.

먼저, 나는 시간을 41분으로 본다.

이것은 내가 시작, 중지, 저장을 올바르게 호출하고 있다는 것을 검증한다.

다음으로, primaryActivityItem으로 설정한 단어 수가 표시됩니다.

primaryActivityItem으로 설정한 CLSActivityItem 하위 클래스는 UI의 주요 부분에 표시됩니다.

내 단어 수를 558단어로 볼 수 있다는 사실은 CLSQuantityItem의 제출이 올바르게 작동하고 있다는 것을 증명한다.

이제, 우리의 역할을 교사로 다시 전환하고 내 앱에서 제출한 데이터가 교사들에게 어떻게 나타나는지 봅시다.

화면 중앙에, 우리는 모든 학생들의 평균 시간과 평균 단어 수가 있다는 것을 알 수 있다.

그 아래에는 과제에 있는 모든 학생을 위한 줄이 있다.

학생 셀에서, 나는 한 학생이 제출한 데이터를 본다.

그리고 학생 셀을 탭하면, 앱에서 보고된 진행 데이터를 볼 수 있습니다.

우리는 가독성 등급 수준으로 나열된 primaryActivityItem, 시간 및 하나의 추가 활동항목이 있습니다.

그리고 그것이 개발자 모드를 사용하여 ClassKit 통합을 테스트하는 방법입니다.

자격을 생산으로 되돌리는 것을 잊지 마세요.

음, 좋아!

우리는 오늘 새로운 API에서 개발자 모드로 테스트하는 것에 이르기까지 많은 것을 다루었다.

교육용 앱을 고려하지 않더라도, 교육자가 할 수 있는 좋은 기회가 있으며, ClassKit을 활성화하면 앱이 커리큘럼에 바로 통합할 수 있다는 것을 의미합니다.

그러니 우리의 API를 꼭 채택하세요.

그리고 고마워.

피드백 보고서에 감사드리며, 다른 피드백을 제출해 주시기 바랍니다.

우리는 네 소식을 듣는 게 좋아.

그리고 컨텍스트 기반 API에 대해 더 알고 싶다면, "ClassKit의 새로운 기능"에 대한 이전 세션과 2018년의 "ClassKit 소개"를 살펴보세요.

고마워, 그리고 멋진 WWDC 보내!

♪