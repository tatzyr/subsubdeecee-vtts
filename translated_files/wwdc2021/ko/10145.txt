10145

♪ 베이스 음악 연주 ♪

♪

프라나브 소다니: 안녕하세요, WWDC에 오신 것을 환영합니다!

제 이름은 프라나브이고, 저는 애플의 디스플레이 및 컬러 테크놀로지 팀의 일원입니다.

이 강연에서, 우리는 비디오 품질 도구를 소개하고 앱이나 콘텐츠 제작 워크플로우에서 압축된 비디오의 지각 품질을 평가하는 데 사용할 수 있는 방법을 보여줄 것입니다.

일반적인 비디오 전송 워크플로우를 살펴보는 것으로 시작합시다.

이러한 워크플로우에서 고품질 소스 비디오는 비디오 압축과 선택적으로 비디오 다운스케일링을 거쳐 비트 전송률이 낮은 비디오를 생성합니다.

그리고 이러한 저비트 전송률 비디오는 대역폭이 제한된 네트워크를 통해 쉽게 전달될 수 있습니다.

이러한 워크플로우를 사용하는 몇 가지 가능한 방법에는 AVAssetWriter와 같은 AVFoundation API, Compressor와 같은 앱 또는 자체 비디오 압축 워크플로우 중 하나가 될 수 있습니다.

이제, 다운스케일링과 압축은 비디오 코딩과 스케일링 아티팩트를 추가할 수 있다.

그리고 이것은 소스 비디오를 손상시키고 눈에 보이는 유물을 만들 것이다.

그러한 유물의 한 가지 예는 오른쪽 프레임에 표시된 압축된 비디오의 막힘이다.

또 다른 예는 비디오가 흐릿하게 보이고 비디오 세부 사항이 사라지기 시작할 때입니다.

그러한 유물은 소비자의 비디오 품질 경험에 부정적인 영향을 미칠 수 있다.

우리는 소비자들이 고품질 비디오 경험을 기대하고 있다는 것을 알고 있다.

그래서 이 기대를 이행하는 것이 중요하다.

이제, 이것을 하기 위한 첫 번째 단계는 전달된 콘텐츠의 품질을 평가하는 것입니다.

그리고 이것을 하는 가장 정확한 방법은 실제 사람들이 비디오를 보고 비디오 품질 척도로 평가하도록 하는 것이다.

하지만 많은 양의 비디오를 평가하고 싶다면 이것은 매우 시간이 많이 걸리고 확장 가능하지 않습니다.

다행히도, 다른 방법이 있다.

여기서 필요한 것은 속도와 확장성을 위한 프로세스를 자동화할 수 있도록 비디오 품질을 특성화하는 객관적인 방법입니다.

이러한 설정에서, 지각 비디오 품질 도구는 압축된 비디오와 소스 비디오를 입력으로 취하고 비디오 품질 점수를 출력합니다.

이 점수는 1에서 5 범위의 부동 소수점 숫자가 될 수 있으며 실제 사람들이 압축된 비디오를 어떻게 평가했는지 모방할 수 있다.

오늘날, 우리는 그러한 지각적인 비디오 품질 도구로 개발자를 가능하게 하게 되어 매우 기쁩니다.

간단히 말해서 우리는 그것을 고급 비디오 품질 도구 또는 AVQT라고 부릅니다.

AVQT에 대해 더 알아봅시다.

그래서 AVQT가 정확히 뭐야?

음, AVQT는 macOS 명령줄 실행 파일로 제공됩니다.

그리고 그것은 실제 사람들이 압축된 비디오의 품질을 평가하는 방법을 모방하려고 시도한다.

AVQT를 사용하여 프레임 레벨과 세그먼트 레벨 점수를 모두 계산할 수 있으며, 세그먼트는 일반적으로 몇 초입니다.

그리고 물론, 우리는 AVQT의 모든 AVFoundation 기반 비디오 형식에 대한 지원을 추가했습니다.

여기에는 SDR과 HDR10, HLG 및 Dolby Vision과 같은 HDR 비디오 형식이 포함됩니다.

다음으로, 우리는 애플리케이션 전반에 걸쳐 매우 유용한 AVQT의 세 가지 주요 속성에 대해 논의하고 싶습니다.

먼저, 우리는 AVQT가 인간의 인식과 얼마나 잘 일치하는지 보게 될 것이다.

그런 다음 우리는 AVQT의 계산 속도에 대해 이야기할 것이다.

그리고 마지막으로, 우리는 비디오 품질을 예측할 때 시청 설정 인식이 왜 중요한지 보여줄 것입니다.

이것들 각각에 대해 자세히 알아봅시다.

AVQT는 비디오 품질에 대한 인간의 의견과 잘 연관되어 있다.

그리고 그것은 애니메이션, 자연 장면 또는 스포츠와 같은 콘텐츠 유형에서 잘 작동합니다.

우리는 PSNR과 구조적 유사성 또는 간단히 말해서 SSIM과 같은 전통적인 비디오 품질 지표가 일반적으로 콘텐츠 유형에서 잘 작동하지 않는다는 것을 발견했습니다.

한 가지 예를 들어 봅시다.

이제, 이것은 우리의 첫 번째 소스 비디오인 고품질 스포츠 클립의 프레임입니다.

압축된 비디오에서 같은 프레임을 봅시다.

당신은 프레임이 충분히 높은 지각 품질로 보인다는 것을 알 수 있습니다.

맞아, PSNR 점수는 약 35점, AVQT 점수는 4.4점이다.

다음으로, 우리는 두 번째 소스 비디오에 대해 같은 운동을 한다.

이 경우 압축된 비디오에는 눈에 보이는 아티팩트가 있는 것 같다.

특히, 당신은 그 사람의 얼굴에서 몇 가지 유물을 볼 수 있습니다.

흥미롭게도, 그것은 약 35의 동일한 PSNR 점수를 받지만, 이번에는 AVQT가 약 2.5로 평가하며, 이는 품질이 좋지 않다는 것을 의미한다.

우리는 AVQT 점수가 여기서 올바른 예측이라고 생각한다.

이것은 교차 콘텐츠 평가에서 무엇이 잘못될 수 있는지 설명하기 위해 우리가 선택한 한 가지 예일 뿐입니다.

우리는 다양한 비디오 세트에서 AVQT의 지각 정확도를 테스트하고 싶었습니다.

그래서 우리는 공개적으로 이용 가능한 비디오 품질 데이터 세트에서 그것을 평가했다.

이 데이터 세트에는 소스 비디오, 압축된 비디오 및 인간 피험자가 제공하는 비디오 품질 점수가 포함됩니다.

여기서, 우리는 당신에게 두 개의 데이터 세트에 대한 결과를 보여줄 것입니다: 워털루 IVC 4K와 VQEG HD3.

워털루 IVC 데이터 세트에는 코딩 및 스케일링 아티팩트를 모두 아우르는 20개의 소스 비디오와 480개의 압축 비디오가 포함되어 있습니다.

그것은 네 가지 비디오 해상도와 두 가지 비디오 표준을 다룹니다.

VQEG HD3 데이터 세트는 상대적으로 작다.

9개의 소스 비디오와 72개의 압축 비디오가 있습니다.

그리고 이것들은 1080p 비디오 해상도의 비디오 코딩을 사용하여 생성되었다.

그리고 비디오 품질 메트릭의 성능을 객관적으로 측정하기 위해, 우리는 상관 관계와 거리 측정을 사용합니다.

피어슨 상관 계수 또는 간단히 말해서 PCC는 예측된 점수가 주관적인 점수와 얼마나 관련이 있는지를 측정한다.

더 높은 PCC 값은 더 나은 상관관계를 의미한다.

그리고 RMSE는 예측이 주관적인 점수에서 얼마나 멀리 떨어져 있는지 측정한다.

더 낮은 RMSE 값은 더 높은 예측 정확도를 의미한다.

이제, 우리는 AVQT가 인간 피험자가 제공한 점수를 얼마나 잘 예측할 수 있는지 평가하고 싶습니다.

여기 x축에, 우리는 지상 진실 주관적인 비디오 품질 점수를 가지고 있다.

그리고 y축에서, 우리는 AVQT에 의해 예측된 점수를 가지고 있다.

여기의 모든 점은 압축된 비디오를 나타낸다.

산점도에서 볼 수 있듯이, 몇 가지 이상치를 제외하고, AVQT는 이 데이터 세트의 주관적인 점수를 예측하는 데 훌륭한 일을 한다.

이것은 또한 높은 PCC와 낮은 RMSE 점수에 반영된다.

그리고 우리는 VQEG HD3 데이터 세트에서도 고성능을 볼 수 있습니다.

AVQT의 계산 속도에 대해 이야기해 봅시다.

높은 계산 속도는 확장성을 보장하는 데 매우 중요하다는 점에 유의하십시오.

AVQT의 알고리즘은 메탈에서 빠르게 실행되도록 설계되고 최적화되어 있다.

이것은 당신이 큰 비디오 파일을 매우 빠르게 실행할 수 있다는 것을 의미합니다.

그것은 또한 모든 전처리를 기본적으로 처리한다.

당신을 위해, 이것은 당신이 비디오를 디코딩하고 오프라인으로 확장할 필요가 없다는 것을 의미합니다.

AVQT는 당신을 위해 그것을 합니다.

AVQT는 초당 175프레임으로 1080p 비디오를 실행한다는 점에 유의해야 합니다.

따라서 24Hz에서 10분 길이의 1080p 비디오가 있다면, AVQT는 1.5분 이내에 품질을 계산할 수 있습니다.

우리가 이야기하고 싶은 마지막 속성은 설정 인식을 보는 것이다.

시청 설정은 비디오를 볼 때 인식하는 비디오 품질에 영향을 미칠 수 있습니다.

특히, 디스플레이 크기, 디스플레이 해상도 및 시청 거리와 같은 요소는 비디오의 아티팩트를 가리거나 과장할 수 있습니다.

이를 해결하기 위해, AVQT는 이러한 매개 변수를 도구에 입력한 다음 이러한 요인이 변화함에 따라 올바른 추세를 예측하려고 시도합니다.

그런 사례 중 하나를 살펴봅시다.

두 가지 시나리오를 고려하세요.

시나리오 A에서, 당신은 화면 높이의 1.5배의 시청 거리에서 4K 디스플레이에서 4K 비디오를 보고 있습니다.

시나리오 B에서, 당신은 같은 디스플레이에서 같은 비디오를 보고 있지만 지금은 화면 높이의 세 배인 시청 거리에 있습니다.

분명히, 시나리오 B에서 당신은 당신이 그것을 면밀히 보고 있을 때 볼 수 있었던 유물 중 일부를 놓칠 것입니다.

이것은 시나리오 B에서 인지된 비디오 품질이 시나리오 A보다 더 높다는 것을 의미합니다.

그리고 AVQT는 다양한 품질 수준에서 그러한 추세를 포착할 수 있다.

여기 차트는 시청 거리가 1.5H에서 3H로 증가함에 따라 AVQT 점수도 증가한다는 것을 보여준다.

이에 대한 자세한 내용은 도구와 함께 사용할 수 있는 README 문서를 검토하는 것이 좋습니다.

음, 이제 여러분 모두가 AVQT에 대해 흥분했으니, 어떻게 그 도구를 올바른 방법으로 사용할 수 있는지 보여드리겠습니다.

우리는 곧 개발자 다운로드 포털을 통해 여러분 모두에게 AVQT를 제공할 것입니다.

내가 데모를 안내해 줄게.

그래서 저는 이미 도구를 다운로드하고 이 시스템에 AVQT를 설치했습니다.

"어느 AVQT"의 출력을 보면 AVQT가 usr/local/bin 디렉토리에 배치된 것을 볼 수 있습니다.

이제 AVQT 도움말 명령을 호출하여 AVQT에서 지원하는 다양한 플래그 사용에 대해 자세히 읽을 수 있습니다.

내 현재 디렉토리에 뭐가 있는지 보자.

데모에 사용할 샘플 참조와 샘플 압축 비디오가 있습니다.

그래서 내가 그것들을 통해 AVQT를 실행하게 해줘.

우리는 참조 및 테스트 파일을 입력으로 제공하고 출력 파일을 지정할 것입니다.

출력 파일의 이름을 sample_output.csv로 지정해 봅시다.

이 도구는 진행 상황을 인쇄하고 화면에 세그먼트 점수를 보고합니다.

기본 세그먼트 지속 시간은 6초이며 이 클립은 5초 길이이기 때문에 세그먼트가 하나뿐입니다.

다음으로, 출력 파일을 살펴봅시다.

여기서 프레임 레벨 점수를 볼 수 있습니다.

그리고, 마지막으로, 우리는 하위 세그먼트 레벨 점수를 가지고 있다.

이제, 데모에서, 우리는 몇 가지 옵션을 보여주었지만, 이 도구에는 몇 가지 다른 기능도 내장되어 있습니다.

예를 들어, 세그먼트 기간과 시간 풀링 플래그를 사용하여 프레임 레벨 점수가 집계되는 방식을 변경할 수 있습니다.

마찬가지로, 보기 거리와 표시 해상도 플래그를 사용하여 보기 설정을 지정할 수 있습니다.

이에 대한 자세한 내용은 README를 참조하십시오.

알았어.

지금까지 우리는 AVQT의 주요 속성 중 일부에 대해 배웠다.

우리는 또한 한 쌍의 비디오에서 명령줄 도구를 사용하여 비디오 품질 점수를 생성하는 방법을 보았습니다.

이제 AVQT를 사용하여 HLS의 비트 전송률을 최적화할 수 있는 특정 사례를 살펴보겠습니다.

HLS 계층은 다른 비트 전송률로 인코딩됩니다.

그리고 우리는 이러한 비트 전송률을 선택하는 것이 항상 쉬운 과정이 아니라는 것을 알고 있습니다.

이를 돕기 위해, 우리는 HLS 저작 사양 문서에 몇 가지 비트 전송률 지침을 게시했습니다.

이러한 비트 전송률은 HLS를 통해 전달되는 일반적인 콘텐츠의 초기 인코딩 대상일 뿐입니다.

우리는 또한 콘텐츠마다 인코딩 복잡성이 다르다는 것을 알고 있으며, 이는 최적의 비트 전송률이 콘텐츠마다 다르다는 것을 의미합니다.

따라서 한 가지 유형의 콘텐츠(예: 애니메이션 영화)에서 잘 작동하는 비트 전송률은 스포츠 이벤트에서 잘 작동하지 않을 수 있습니다.

AVQT를 피드백으로 사용하여 콘텐츠에 대한 최적의 비트 전송률을 결정하는 방법은 다음과 같습니다.

먼저, 우리는 초기 목표 비트 전송률로 시작합니다.

우리는 이 비트 전송률을 사용하여 소스 비디오를 인코딩하고 HLS 계층을 만듭니다.

그런 다음 소스 비디오와 인코딩된 HLS 계층을 사용하여 AVQT를 사용하여 비디오 품질 점수를 계산합니다.

마지막으로, 우리는 AVQT 점수를 분석하여 HLS 계층의 목표 비트 전송률을 증가시킬지 낮출지 결정할 수 있습니다.

이것을 예시로 설명하기 위해, 특정 HLS 계층을 선택합시다.

여기서 우리는 초당 11.6메가비트의 2160p 계층을 선택하고 있습니다.

그런 다음 이전 두 시퀀스(애니메이션과 스포츠)를 이 권장 비트 전송률로 인코딩할 것입니다.

인코딩된 계층이 준비되면, AVQT를 사용하여 비디오 품질 점수를 계산할 것입니다.

여기 차트는 두 비디오 시퀀스의 AVQT 점수를 보여줍니다.

이 특정 계층의 경우, 우리는 높은 비디오 품질을 기대할 수 있으므로, 임계값을 4.5로 설정하여 우수한 품질을 나타냅니다.

이 비트 전송률은 이 애니메이션 클립에 충분하지만, 스포츠 클립에는 충분하지 않다는 것을 알 수 있습니다.

그래서 우리는 돌아가서 비트 전송률 목표를 조정하기 위해 이 피드백을 사용합니다.

특히, 우리는 스포츠 클립의 비트 전송률 목표를 높이고 AVQT 점수를 다시 계산해야 합니다.

비트 전송률의 10% 증가를 목표로 합시다.

여기서 우리는 스포츠 클립을 위한 새로운 AVQT 점수를 계획했습니다.

업데이트된 점수는 이제 우리의 예상 임계값인 4시 반 이상이다.

그리고 그것은 또한 애니메이션 콘텐츠의 비디오 품질과 훨씬 더 유사하다.

마무리하자면, 여기 당신이 이 이야기에서 빼줬으면 하는 몇 가지 중요한 것들이 있습니다.

비디오 압축은 소비자의 비디오 품질 경험에 영향을 미치는 눈에 보이는 아티팩트로 이어질 수 있다.

AVQT를 사용하여 압축된 비디오의 품질을 평가할 수 있습니다.

AVQT는 macOS 명령줄 도구로 제공되며, 계산이 빠르며, 설정을 인식하고 있습니다.

또한 모든 AVFoundation 기반 비디오 형식을 지원합니다.

마지막으로, AVQT를 사용하여 HLS 계층의 비디오 품질을 최적화할 수 있습니다.

정말 고마워!

♪