10165

♪ ♪

안녕하세요, 제 이름은 Yagil Burowski이고, 저는 Apple의 Location Technologies 팀의 엔지니어입니다.

이 강연에서, 저는 최신 발전과 올해 인근 상호 작용 프레임워크에 도입될 새로운 기능을 다룰 것입니다.

인근 상호 작용 프레임워크를 사용하면 초광대역 기술을 위한 Apple의 칩인 U1의 고유한 기능을 쉽게 활용할 수 있으며, 주변 장치 간에 정확하고 공간적으로 인식하는 상호 작용을 만들 수 있습니다.

AirTag와 iPhone과 HomePod mini 사이의 유동적인 핸드오프 제스처로 "정밀 찾기"를 지원하는 것과 동일한 기술입니다.

이것이 우리가 이 세션에서 다룰 것이다.

우리는 사용자 권한 흐름에 대한 업데이트로 시작할 것입니다.

그 후, 우리는 호환 가능한 타사 하드웨어와 가까운 상호 작용을 실행하기 위한 새로운 API를 소개할 것입니다.

그리고 우리는 앱 개발자와 액세서리 제조업체를 위한 리소스에 대해 이야기하면서 앱과 타사 액세서리에 이러한 새로운 API를 채택하기 시작할 것입니다.

우리가 뛰어들기 전에, Nearby Interaction을 처음 접하거나 재교육이 필요한 사람들을 위해, 앱에서 프레임워크를 어떻게 사용하는지 빠르게 요약해 봅시다.

세션 인스턴스를 만드는 것으로 시작합니다.

그것은 주변 장치와의 공간 상호 작용을 구성하고 실행하는 주요 객체입니다.

다음으로, NISessionDelegate 프로토콜을 준수하기 위해 앱의 일부를 지정해야 합니다.

대표는 프레임워크로부터 업데이트를 받을 것이다.

다음으로 해야 할 일은 NIConfiguration의 하위 클래스가 될 구성 객체를 만드는 것입니다.

예를 들어, 앱을 실행하는 두 iPhone 간에 세션을 시작하려면 NearbyPeerConfiguration을 만들 수 있습니다.

만든 구성으로 세션에서 실행을 호출하면, Nearby Interaction은 앱에 세션에 적극적으로 참여하는 인근 장치에 대한 거리와 선택적으로 방향을 포함하는 NearbyObject 업데이트 스트림을 제공하기 시작합니다.

프레임워크의 API에 대해 더 깊이 파고들고 싶다면, 작년 WWDC 강연인 "근처 상호 작용 만나기"를 시청하세요.

근처 장치로의 거리나 방향과 같은 데이터에 액세스하려면, 앱은 사용자의 허가를 받아야 합니다.

그래서, 올해 우리가 만든 사용자 권한 흐름의 개선에 대해 이야기해 봅시다.

이것은 iOS 14의 주변 상호 작용 권한 흐름입니다.

프롬프트는 앱이 새로운 앱 수명 동안 세션을 처음 실행할 때 나타납니다.

경고의 "허용하지 않음" 또는 "한 번 허용" 옵션은 매우 명확한 선택을 제공하지만, 이 권한은 일회성이기 때문에 특정 상황에서 추가 프롬프트로 이어질 수도 있습니다.

그래서, 올해, 앱에 Nearby Interaction을 사용할 수 있는 권한을 부여하는 새로운 방법이 있습니다.

이것은 iOS 15의 새로운 "가난 상호 작용" 권한 프롬프트입니다.

그것은 비슷해 보이지만, 몇 가지 중요한 면에서 다르다.

시스템은 앱이 NISession을 처음 실행할 때 자동으로 권한 프롬프트를 표시합니다.

따라서, NISession을 실행할 때의 타이밍이 명확한 사용자 의도와 일치하는지 확인하는 것이 정말 중요하므로, 사용자가 앱의 특정 기능이 주변 상호 작용에 액세스해야 하는 이유를 쉽게 이해할 수 있습니다.

프롬프트의 새로운 옵션을 자세히 살펴봅시다.

새로운 "OK" 옵션은 앱이 사용 중인 동안 앱 권한을 부여합니다.

사용자가 Nearby Interaction을 사용하기 위한 앱의 요청을 수락하든 거부하든, 권한 프롬프트는 다시 표시되지 않습니다.

iOS 15부터, 주변 상호 작용을 사용하는 앱은 설정에 나타납니다.

따라서, 사용자가 마음을 바꾸면, 설정 앱으로 이동하여 앱의 "근접 상호 작용" 액세스를 변경할 수 있습니다.

앱을 개발할 때 이 시나리오를 테스트해야 합니다.

새로운 Nearby Interaction 사용자 권한 모델을 요약해 봅시다.

새로운 권한 프롬프트는 승인되면 앱이 사용 중인 동안 근처에 있는 상호 작용을 사용할 수 있는 지속적인 권한을 부여합니다.

경고는 앱의 Info.plist에서 귀하가 제공한 사용 설명 문자열을 표시할 것입니다.

이 목적 문자열에서 명확하고 간결하게 하고, 근처 상호 작용에 액세스해야 하는 앱의 멋진 기능이 무엇인지 설명하세요.

프롬프트가 처음이자 마지막으로 표시되면, 앱의 이름과 아이콘이 설정 앱에 나타나며, 이는 사용자가 언제든지 앱의 권한 상태를 변경할 수 있음을 의미합니다.

앱이 Nearby Interaction을 사용할 수 있는 충분한 권한이 없는 경우, NISessions는 권한 관련 오류 코드로 무효화됩니다.

따라서, 앱의 주요 기능이 주변 상호 작용에 대한 액세스에 의존하는 경우, 이것을 사용자에게 명확하게 설명하고 적절한 경우 설정 앱으로 안내해야 합니다.

그것은 iOS 15의 새로운 권한 프롬프트였다.

그리고 이제, 우리는 호환 가능한 타사 하드웨어와 Nearby Interaction을 사용할 수 있는 몇 가지 새로운 API를 소개하게 되어 기쁩니다.

우리는 이 API가 당신이 만드는 것을 고려할 수 있는 다양한 액세서리와 함께 작동하기를 원했습니다.

그래서, 우리는 산업 그룹과 함께 작업해 온 표준에 따라 Nearby Interaction의 제3자 하드웨어 지원을 기반으로 합니다.

그리고 프로토타이핑, 실험 및 액세서리 구축을 시작할 수 있도록, 우리는 칩셋 제조업체와 협력하여 iPhone에서 U1과 상호 운용할 수 있는 하드웨어 및 펌웨어가 포함된 개발 키트를 만들고 있습니다.

그래서, 개발 키트와 함께, 우리는 또한 개발 키트의 하드웨어와 함께 즉시 작동하는 샘플 앱 코드를 만들고 있습니다.

그래서, 함께, 그들은 당신의 프로젝트를 위한 훌륭한 출발점이 될 수 있습니다.

그리고 액세서리 제조업체인 경우, Apple 개발자 웹사이트의 "개발자 미리보기"에서 사용할 수 있는 인근 상호 작용, 액세서리 프로토콜 사양 문서를 확인하십시오.

이 흥미진진한 신기술을 수정하고 싶든, 울트라 와이드밴드를 자신만의 액세서리에 통합할 준비가 되었든, 타사 액세서리와 함께 Nearby Interaction API를 사용하는 방법을 보여주는 간단한 예를 살펴보겠습니다.

액세서리에 대한 사용자의 정확한 거리에 따라 다른 기능을 활성화하는 것은 해당 장치와의 상호 작용을 간소화하는 강력한 방법이 될 수 있습니다.

그래서, 당신이 액세서리를 만들고 있고, 그것을 정말로 돋보이게 할 일련의 기능을 활성화하기 위해 초광대역을 통합하고 싶다고 가정해 봅시다.

그리고 초광대역은 당신에게 정확한 거리를 줄 수 있기 때문에, 당신은 액세서리 주변의 몇 개의 정확한 영역이나 지역을 추적하기 위해 그것을 활용할 계획입니다.

그래서, 1.5미터 반경을 가진 액세서리 주변의 영역과 3미터 반경을 가진 더 큰 영역을 정의한다고 가정해 봅시다.

그리고 사용자가 액세서리 주변의 더 큰 영역에 들어갈 때 일부 기능 A를 활성화하고 싶기 때문에 이러한 특정 거리에 관심이 있다고 가정해 봅시다.

그리고 사용자가 더 작은 지역에 들어갈 때, 당신은 기능 B를 활성화하고 싶습니다.

그래서, 인근 상호 작용 프레임워크를 사용하여 앱에서 실제로 이것을 어떻게 달성하나요?

우선, 인근 상호 작용은 앱과 액세서리가 그들 사이에 데이터를 교환할 수 있는 일종의 기능을 갖기를 기대합니다.

데이터를 교환하는 데 사용할 특정 기술에 관해서는, 그것은 전적으로 당신에게 달려 있으며 당신의 액세서리가 무엇을 하고 무엇을 할 필요가 없는지.

당신의 액세서리가 이미 블루투스를 지원한다고 가정해 봅시다.

데이터 교환 요구 사항을 위해 기존 블루투스 기능을 활용할 수 있기 때문에 이것은 당신을 좋은 위치에 놓을 것입니다.

액세서리가 로컬 네트워크에 연결되어 있거나 인터넷에 안전하게 연결되어 있다면, 당신도 좋은 상태입니다.

앱과 액세서리 간에 데이터를 앞뒤로 보낼 수 있는 기능은 다음에 해야 할 일에 도움이 될 것입니다.

앱을 실행하는 두 iPhone 간의 세션을 시작하고 싶을 때 NearbyPeerConfiguration을 만들었습니다.

액세서리로 세션을 시작하려면, NearbyAccessoryConfiguration을 만들 것입니다.

이것은 iOS 15의 새로운 NIConfiguration 유형입니다.

액세서리 구성을 인스턴스화하려면 프레임워크가 액세서리 구성 데이터라는 특정 형식으로 받을 것으로 예상되는 액세서리를 설명하는 구성 데이터를 제공해야 합니다.

하지만 이 구성 데이터를 어떻게 얻나요, 그리고 이 특정 형식은 무엇인가요?

인증된 기술 공급자로부터 얻을 수 있는 유형과 같은 U1 호환 초광대역 하드웨어는 요청 시 이 구성 데이터를 생성하는 방법을 알게 될 것입니다.

즉, 액세서리 자체에서 실행 중인 코드는 이 데이터를 생성한 다음 데이터 채널의 앱으로 보내야 합니다.

액세서리에서 받은 데이터로 NearbyAccessoryConfiguration을 인스턴스화하는 코드 예제를 살펴봅시다.

setupAccessory가 내가 앱에 쓴 도우미 방법이라고 가정해 봅시다.

액세서리에서 액세서리 구성 데이터를 얻을 때마다, 내 앱에는 액세서리의 이름과 함께 이 기능으로 라우팅하는 논리가 있습니다.

이 시점에서, 나는 액세서리에서 받은 데이터를 사용하여 NINearbyAccessoryConfiguration을 만들 수 있다.

당신은 내가 do/catch 진술 안에 내 구성을 만든다는 것을 알게 될 것이다.

액세서리에서 받은 데이터가 어떤 식으로든 유효하지 않은 경우 NIConfiguration init 메서드가 예외를 발생시킬 것이기 때문에 이렇게 합니다.

하지만 구성 객체가 성공적으로 생성되면, 액세서리에서 받은 데이터가 올바른 형식이며 이제 사용할 수 있다는 것을 의미합니다.

구성을 만드는 궁극적인 이유는 세션을 실행하는 데 사용하기 때문입니다.

하지만 그렇게 하기 전에, 나중에 사용하기 위해 유용한 데이터를 캐시할 수 있는 좋은 기회가 있다.

새로운 NearbyAccessoryConfiguration 유형에는 프레임워크가 자동으로 채우는 액세서리에 대한 DiscoveryToken 속성이 있습니다.

게다가, 내가 정의한 설정 액세서리 기능에서, 나는 또한 액세서리의 이름을 가지고 있다.

따라서, 이 단계에서 액세서리의 이름과 함께 발견 토큰을 저장하는 것이 정말 유용할 수 있습니다. 왜냐하면 나중에 이 액세서리에 대한 NearbyObject 업데이트를 받기 시작하면 토큰과 이름을 사용하여 업데이트를 이 액세서리와 연관시킨 다음 더 관련성이 높고 풍부한 UI를 표시할 수 있기 때문입니다.

알았어.

그래서, 우리는 액세서리에서 유효한 구성 데이터를 가지고 있으며, 액세서리 구성 객체를 만드는 데 사용했습니다.

이제, 우리는 이 액세서리와 상호 작용할 준비를 할 수 있습니다.

상호 작용을 관리하려면 NISession 인스턴스가 필요하며, 세션의 대리인을 설정해야 합니다.

세션을 시작하려면, 우리가 만든 액세서리 구성 객체를 사용하여 세션에서 "실행" 기능을 호출하기만 하면 됩니다.

Nearby Interaction이 액세서리의 구성 데이터를 필요로 했던 것처럼, 액세서리는 자체 구성 방법을 알기 위해 Nearby Interaction의 구성 데이터도 필요합니다.

이 데이터는 "공유 가능한 구성 데이터"라는 형식이어야 합니다.

액세서리 구성으로 세션을 실행할 때, Nearby Interaction은 대리자 콜백을 통해 앱에 공유 가능한 구성 데이터를 제공합니다.

그리고 우리가 액세서리의 구성 데이터를 받기 위해 데이터 채널을 사용한 것처럼, 여기서 공유 가능한 구성 데이터를 액세서리로 다시 보내기 위해 다시 사용할 것입니다.

좀 더 구체적으로 만들기 위해, 코드 예시를 살펴봅시다.

공유 가능한 구성 데이터는 iOS 15의 새로운 대리자 콜백인 didGenerate 대리자 콜백을 통해 앱에 제공됩니다.

여기 앱에서 이 콜백을 구현할 수 있습니다.

이 프레임워크는 공유 가능한 구성 데이터를 제공하며, 어떤 액세서리로 가야 하는지 나타내며, 이는 여러 액세서리와 상호 작용하는 경우에 정말 유용합니다.

데이터 채널을 통해 가능한 한 빨리 액세서리로 데이터를 보낼 계획을 세워야 합니다.

일반적으로, 다른 액세서리에 대한 데이터 연결을 관리하는 것은 사용 사례에 따라 다양한 형태를 취할 수 있습니다.

간단히 말해서, 내 앱의 아키텍처에서, 내가 상호 작용하는 각 액세서리에 대해 독립적인 데이터 연결을 유지하기로 결정했다고 가정해 봅시다.

그리고 내 코드를 잘 정리하기 위해, 나는 내가 주는 NearbyObject를 기반으로 연결을 되돌려주는 도우미 함수를 정의했다.

연결에 대한 참조를 받으면, 공유 가능한 구성 데이터를 액세서리로 바로 보낼 것입니다.

가능한 한 적은 지연으로 공유 가능한 구성 데이터를 액세서리로 보내기 위해 앱을 최적화하는 것이 중요합니다.

ShareableConfigurationData가 충분히 빨리 전송되지 않으면 세션 시간이 초과될 수 있습니다.

액세서리가 있는 세션의 타임아웃은 didRemove 대리 콜백을 통해 앱에 전달됩니다.

이 시나리오를 어떻게 처리할 수 있는지 살펴봅시다.

Nearby Interaction이 화면에 표시된 didRemove 콜백을 주면, 먼저 "이유" 매개 변수를 확인하겠습니다.

만약 그 이유가 .timeout이고, 액세서리가 여전히 근처에 있을 수 있다는 확신이 높다면, 나는 그것과 상호 작용하기 위해 다시 시도할 수 있다.

이 액세서리로 "재시도 흐름"에 들어갈지 여부를 결정하기 위해, 나는 이 결정을 내리는 데 도움이 되는 특수 논리를 포함하는 도우미 기능을 정의했다.

당신은 "내가 성공하지 않고 몇 번이나 다시 시도했나요?"와 같은 조건을 상상할 수 있습니다.

아니면 "액세서리가 멈췄다고 알려줬나요?"

또는 다른 유사한 질문은 이와 같은 결정의 일부가 될 수 있다.

다시 시도하기로 결정하면, 동일한 구성으로 세션을 다시 실행하기만 하면 된다.

캐시된 구성은 액세서리의 세션이 종료되지 않은 한 유효하다는 것을 명심하세요.

세션이 종료되었다면, 나는 처음으로 세션을 만들고 실행하는 데 사용한 것과 같은 흐름을 거쳐야 할 것이다.

액세서리의 세션은 액세서리에서 실행되는 코드가 관리해야 하는 것이며, 사용 사례에 따라 다양한 방법으로 수행할 수 있다는 것을 명심하십시오.

알았어.

공유 가능한 구성 데이터를 액세서리로 보냈고, 필요한 경우 재시도 처리할 수 있는 논리도 있습니다.

다음은 뭐야?

액세서리 구성 데이터와 마찬가지로 액세서리의 U1 호환 하드웨어는 액세서리 코드가 제공하면 공유 가능한 구성 데이터로 무엇을 해야 하는지 자동으로 알 수 있습니다.

따라서, 액세서리에서 실행되는 코드가 데이터를 수신하면, 가능한 한 빨리 탑재된 초광대역 하드웨어에 있는 그대로 제공해야 합니다.

액세서리의 초광대역 하드웨어가 구성 데이터를 생성하거나 소비하는 방법을 어떻게 알 수 있을까요?

액세서리 구성 데이터와 공유 가능한 구성 데이터는 모두 올 봄 초에 발표한 사양 문서에 정의되어 있습니다.

이 문서는 칩셋 및 모듈 제조업체를 위한 것이며, 업계 표준을 사용하여 iPhone에서 U1과 상호 운용하는 초광대역 솔루션을 만드는 데 필요한 세부 사항이 포함되어 있습니다.

칩셋 제조업체를 위한 상호 운용성 사양 외에도, 우리는 또한 액세서리 제조업체를 대상으로 하는 사양을 발표하고 있습니다.

따라서, 초광대역 하드웨어가 포함된 액세서리를 만들고 싶고, 앱에서 Nearby Interaction 프레임워크를 사용하여 상호 작용하고 싶다면, 이 문서는 당신을 위한 것입니다.

시작하기 위한 추가 리소스와 함께 개발자 웹사이트에서 찾을 수 있습니다.

여기가 우리가 중단한 곳이야.

우리는 방금 공유 가능한 구성 데이터를 데이터 채널을 통해 액세서리로 보냈습니다.

이제, 액세서리의 코드를 받고 초광대역 하드웨어에 제공하면 어떻게 되는지 봅시다.

공유 가능한 구성 데이터를 받은 후, 액세서리의 초광대역 하드웨어는 앱의 NISession과 상호 작용하기 위한 적절한 구성으로 즉시 실행되기 시작합니다.

그리고 액세서리와 앱을 실행하는 iPhone이 서로 근처에 있다면, 세션은 거리에 대한 거리와 선택적으로 액세서리에 대한 방향을 포함하는 NearbyObject 업데이트 스트림을 앱에 제공하기 시작할 것입니다.

각각에 대한 세션을 만들고 실행하여 여러 액세서리와 동시에 상호 작용할 수도 있습니다.

액세서리의 하드웨어 기능에 따라, 액세서리에서 실행되는 코드에서 동등한 근접 업데이트를 받을 수도 있습니다.

프레임워크에서 NearbyObject 업데이트를 받으면, 어떻게 해야 하나요?

이미 잘 알고 계시겠지만, 우리는 사용자가 더 큰 지역에 들어갈 때 앱과 액세서리가 기능 A를 활성화하고, 사용자가 액세서리 주변의 더 작은 지역에 들어갈 때 기능 B를 활성화하는 경험을 구축하고 싶었습니다.

iOS 앱에서 NearbyObject 업데이트를 사용하여 어떻게 할 수 있는지 보여주는 코드 예제를 살펴봅시다.

앱과 액세서리 사이의 세션이 실행 중일 때, 액세서리에 대한 업데이트는 didUpdate 대리자 콜백을 통해 세션의 대리에게 전달됩니다.

먼저, 프레임워크가 나에게 업데이트를 제공하는 근처의 객체에 대한 참조를 가져올 것이다.

다음으로, 나는 프레임워크가 미터 단위로 제공하는 이 객체까지의 거리로 지역 변수를 만들 것이다.

다음으로 할 일은 getSmoothedDistance라는 앱에 있는 도우미 기능에 이 데이터를 제공하는 것입니다.

나는 거리의 급격한 변화를 막기 위해 앱에서 이 기능을 정의했다.

예를 들어, 사용자가 갑자기 움직이거나 구역 사이의 경계에 서 있는 경우.

마지막으로, 액세서리와 사용자의 거리가 미리 정의된 임계값을 넘었는지 확인할 수 있습니다.

여기서, 저는 현재 거리에 따라 FunctionalityA 또는 FunctionalityB를 활성화하도록 선택할 수 있습니다.

장치 간의 거리와 방향을 기반으로 경험을 설계하는 것에 대해 더 알고 싶다면, 올해의 "공간적 상호 작용을 위한 디자인" WWDC 토크를 확인하세요.

그래서, 우리가 이 세션에서 논의한 것을 요약해 봅시다.

우리는 새로운 권한 모델이 앱을 사용하는 동안 앱이 주변 상호 작용에 액세스할 수 있도록 하는 방법에 대해 이야기했습니다.

우리는 인근 상호 작용 지원 타사 액세서리의 새로운 세계와 자신의 액세서리와 공간 상호 작용을 구축하는 데 사용할 수 있는 API에 대해 깊이 파고들었다.

우리는 또한 지원되는 기술 제공 업체에서 사용할 수 있는 타사 개발 키트와 프로젝트를 바로 시작하는 데 사용할 수 있는 iOS 앱 코드에 대해 논의했습니다.

그러니, 계속해서 시도해 보고, 사용 사례를 실험하고 프로토타이핑하기 시작하세요.

그리고 액세서리에 초광대역을 채택할 준비가 되면, Apple 개발자 웹사이트에서 사용할 수 있는 관련 사양 문서를 읽으십시오.

그것이 올해의 인근 상호 작용 업데이트를 위한 것입니다.

튜닝해줘서 고마워.

우리는 이 세션이 도움이 되었고 놀라운 앱과 액세서리를 구축하는 데 필요한 모든 정보가 포함되기를 바랍니다.

[쾌활한 음악].