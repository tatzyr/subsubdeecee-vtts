10276

♪ 베이스 음악 연주 ♪

♪

론 산토스: 여러분. 저는 론 산토스입니다.

저는 키보드를 작업하는 소프트웨어 엔지니어입니다.

그리고 저는 타이핑이나 받아쓰기가 아니라 카메라를 사용하여 텍스트를 입력할 수 있는 새로운 기능을 최대한 활용하는 방법을 보여주기 위해 왔습니다.

그래서 우리는 이 새로운 출시를 위해 정말 열심히 노력해왔고 이제 WWDC가 마침내 여기에 왔으니, 나는 휴가를 보낼 준비가 되어 있다.

안전하자마자, 나는 휴가를 내서 여행하고 싶다.

하지만 나를 괴롭히는 여행에 대한 한 가지는 그 모든 비디지털 텍스트를 다루는 것이다.

내 말이 무슨 뜻인지 알아?

송장, 활동 전단지, 그리고 그들이 호텔 방에 당신을 위해 남겨둔 거대한 바인더?

운 좋게도, iOS 15에는 주변 세계의 텍스트를 캡처할 수 있는 새로운 기능이 있습니다.

내 말이 무슨 뜻인지 보여줄게.

확인해 봐!

나는 이 여행 일지 앱을 만들고 있어.

나는 하와이로의 마지막 여행처럼 내가 갔던 여행과 내가 머물렀던 장소를 기록하는 데 그것을 사용할 것이다.

여기 상단에, 나는 이미지 헤더를 추가할 수 있다; 아마도 내 카메라 롤에서 멋진 풍경 사진일 것이다.

그리고 이름, 전화번호, 주소와 같은 호텔 정보 필드가 있습니다.

나는 사실 내 바로 앞에 있는 문서에 그 모든 정보를 가지고 있다.

나는 그것을 모두 타이핑하고 싶지 않아, 그리고 지금은 그럴 필요가 없어.

예를 들어, 전화번호 필드를 두 번 탭하면 편집 메뉴에 카메라의 텍스트를 사용할 수 있는 새로운 옵션이 표시됩니다.

일단 실행되면, 카메라는 문서의 이 텍스트 그룹을 즉시 인식한다.

나는 그것을 동결하고 전화번호만 선택할 수 있다.

그런 다음 삽입을 탭하면 끝입니다.

난 그게 꽤 멋지다고 생각해.

사진이 천 단어의 가치가 있다는 말을 떠올리게 한다.

하지만 이 기능으로, 우리는 말 그대로 사진에서 천 단어를 취할 수 있다.

어쨌든, 앞서 말했듯이, 이 기능을 최대한 활용하는 방법을 보여주고 싶습니다.

콘텐츠 필터링에 대해 이야기하는 것으로 시작합시다.

네가 기억한다면, 나는 큰 텍스트 블록에서 전화번호를 드래그해서 선택해야 했어.

음, 앱이 내가 전화번호를 찾고 있다는 것을 안다면 나는 그렇게 할 필요가 없어.

그것은 다른 모든 것을 무시하고 그냥 번호를 잡아야 한다.

그래서 먼저, 당신이 원하는 콘텐츠를 필터링하는 것이 얼마나 간단한지 보여드리겠습니다.

필터링은 텍스트 필드와 텍스트 보기에서 사용할 수 있는 TextContentType 및 KeyboardType 속성을 사용하여 수행됩니다.

사실, 당신은 아마 이미 자동 완성과 같은 것을 지원하기 위해 이러한 속성을 사용하고 있을 것입니다.

그렇다면, 굉장해.

카메라 입력에 대한 추가 혜택을 받을 수 있습니다.

그리고 만약 당신이 그것들을 사용하지 않았다면, 여기 당신에게 방법을 보여주는 지난 몇 년간의 비디오가 있습니다.

좋아, TextContentType으로 돌아가.

TextContentType은 이러한 다양한 값 중 하나일 수 있습니다.

하지만 카메라는 이러한 모든 유형을 필터링하지 않을 것이다.

그것은 이 일곱 개만 걸러낼 것이다.

몇 가지 예를 살펴봅시다.

이 처음 네 가지 - 전화번호, 전체 주소, URL 및 이메일 - 그것들은 모두 오늘날 iOS에 미리 존재합니다.

iOS 15의 새로운 기능, 우리는 세 가지 추가 유형을 추가했습니다: 항공편 번호, 배송 추적 번호, 날짜, 시간 및 기간의 조합.

항공편 번호가 여행 앱에 어떻게 유용할지, 또는 패키지 추적 앱에서 추적 번호가 얼마나 멋질지 상상할 수 있습니다.

어쨌든, 이러한 콘텐츠 유형을 사용하는 방법은 다음과 같습니다.

그건 정말 간단해.

인터페이스 빌더에 있다면, 속성 관리자에서 콘텐츠 유형과 키보드 유형을 찾으세요.

코드에서 이것을 하고 있다면, 원하는 값을 할당하세요.

여기 내 여행 일지 앱에서 전화 번호 필드는 전화 패드 키보드를 사용하고 있으며, 주소 필드에는 fullStreetAddress의 textContentType이 있습니다.

그리고 전화번호에 대해, 나는 자동 수정 유형을 no로 설정했다.

자동 수정이나 예측 텍스트 후보가 없다면, iOS는 카메라에 빠르게 접근할 수 있는 버튼을 제공하기 때문입니다.

좋아, 내 앱으로 돌아가자, 그리고 우리는 호텔 전화번호를 다시 캡처해 볼 수 있어, 하지만 이번에는, 우리의 변화와 함께.

이제, 내가 카메라를 꺼내면, 전화번호를 제외한 다른 모든 문자를 똑똑하게 무시한다.

주소 필드로 다시 시도해 봅시다.

그건 훨씬 더 빨라.

두드리고 스와이프하는 것이 훨씬 적다.

그래서 그게 네가 콘텐츠를 필터링하는 방법이야.

다른 도전으로 넘어가자.

사용을 장려하기 위해 이 기능을 어떻게 더 발견할 수 있게 만들 수 있을까요?

앱 개발자로서, 우리는 간소화된 사용자 인터페이스를 갖는 것을 좋아합니다.

이는 때때로 사용자가 알지 못하는 메뉴와 제스처 뒤에 숨겨진 추가 기능이 있다는 것을 의미합니다.

예를 들어, 앱에서 메모 필드를 사용하는 경우, 여기에 입력을 위해 카메라를 사용할 수 있다는 것은 분명하지 않습니다.

편집 메뉴는 두 번째 탭에서만 나타납니다.

그리고 후보 표시줄에는 내가 전에 보여준 버튼 대신 예측 텍스트가 있어.

따라서 카메라 입력을 암시하는 화면의 버튼을 원한다면, 자신만의 전용 런처 버튼을 추가하고 싶을 것입니다.

그렇게 하려면, 먼저 iOS 15의 새로운 captureTextFromCamera 공장 방법을 사용하여 UIAction을 만들어야 합니다.

이 액션은 카메라를 실행하는 방법을 알고 있지만, 버튼과 메뉴와 함께 사용될 때 이미지와 라벨을 제공합니다.

카메라에서 텍스트를 삽입할 항목과 함께 내 앱에 메뉴를 추가하자.

그래서 여기 내 앱이 또 있어.

메모 필드를 편집할 때, 키보드 위에 이 도구 모음이 표시됩니다.

카메라 아이콘이 있는 두 번째 항목을 탭하면, 새로운 기능인 카메라의 텍스트와 같은 많은 카메라 관련 작업에 대한 메뉴가 나타나기를 원합니다.

여기서 우리는 행동을 창조한다.

그리고 선택적 식별자 외에, 공장 방법은 응답자가 텍스트를 수락하도록 요구합니다.

그런 다음, 나는 다른 메뉴 항목에 대한 작업을 만든다.

마지막으로, 메뉴를 조립하고 textFromCamera 작업을 포함하여 방금 만든 각 작업으로 채웁니다.

기억하세요, 저는 제목이나 어떤 이미지를 사용할지 지정할 필요가 없습니다.

그것은 모두 행동에 의해 제공된다.

그 제목은 심지어 나를 위해 현지화될 것이다.

그래, 한 번 해보자.

우리는 앱으로 돌아왔어.

여기 메모 필드와 카메라 메뉴가 있는 도구 모음이 있습니다.

내 앞에 있는 활동 전단지의 텍스트를 삽입할게.

그리고 끝났어!

단 몇 줄의 코드로 사용자가 검색할 수 있는 런처.

하지만, 명심해야 할 한 가지가 있다.

카메라 런처를 추가하기 전에, 먼저 canPerformAction withSender의 결과를 확인해야 합니다.

그것은 우리의 UIAction이 캡처, 복사 및 붙여넣기와 같은 표준 편집 작업과 유사하게 작동하는 captureTextFromCamera라는 UIResponder 객체에서 새로운 방법을 호출하여 작동하기 때문입니다.

그리고 그 행동들은 맥락에 따라 항상 가능한 것은 아니다.

예를 들어, 아무것도 선택하지 않으면 텍스트를 자를 수 없습니다.

여기에도 같은 것이 있다; captureTextFromCamera 액션에는 몇 가지 전제 조건이 있다.

그 한 가지 방법은 모든 요구 사항이 충족되도록 할 것이다.

하지만 그들 각각을 살펴봅시다.

그렇게 하면, 당신은 왜 그 방법이 거짓을 반환할 수 있는지 더 잘 알 수 있습니다.

첫째, 몇 가지 하드웨어 요구 사항이 있습니다. iOS 15를 실행하는 모든 장치가 이 기능을 지원하는 것은 아닙니다.

그 장치는 아이폰이어야 한다.

그리고 어떤 아이폰이 아니라, 신경 엔진의 기계 학습 초능력을 가진 것.

하드웨어를 제외하고, 응답자는 텍스트 삽입을 처리해야 합니다.

우리는 나중에 그것에 대해 더 얘기할 거야.

다음으로, 이것은 분명할 수 있지만, 응답자가 텍스트 보기 또는 텍스트 필드라면, 편집할 수 있어야 합니다.

그리고 마지막으로, 사용자는 선호하는 언어 목록에 이 일곱 가지 지원되는 언어 중 적어도 하나가 있어야 합니다.

당신은 이제 카메라 입력을 처리할 준비가 잘 되어 있습니다.

하지만 마무리하기 전에, 내가 내 앱에 추가한 재미있는 걸 보여줄게.

헤더 사진 기억해?

좋지만, 그 위에 캡션을 추가하는 게 좋을 것 같아.

아마도 카메라에서 찍은 캡션일 거야.

그래서 나는 우리가 메뉴 항목으로 했던 것처럼 여기에 런처 버튼을 추가했다.

그리고 이제, 나는 텍스트를 캡처하여 이미지 위에 놓을 수 있다.

하지만 내가 그걸 어떻게 했을까?

내 말은, 그건 텍스트 컨트롤이 아니라 이미지 보기야.

한 걸음 물러서서 텍스트 컨트롤이 어떻게 작동하는지 알아봅시다.

그리고 나서 우리는 나중에 이미지 뷰에 대해 이야기할 것이다.

텍스트 컨트롤은 UIKeyInput이라는 프로토콜을 채택한다.

그것은 응답자가 키보드 입력을 받아들일 수 있는 기본 방법 세트를 정의한다.

프로토콜에는 세 가지 방법이 있는데, 그 중 하나는 insertText 방법이다.

그리고 그 방법은 정확히 카메라에서 앱으로 텍스트를 전송하는 데 사용되는 것입니다.

따라서 응답자가 카메라 입력을 지원하려면 이 프로토콜을 채택해야 합니다.

내가 방금 텍스트 컨트롤이 UIKeyInput을 채택한다고 말한 거 알아.

하지만 실제로, 그들은 UIKeyInput의 확장인 UITextInput이라는 프로토콜을 채택한다.

UITextInput을 채택하면, 카메라를 사용할 때 추가 기능을 얻을 수 있습니다: 삽입할 텍스트의 미리보기.

그리고 그것은 여기에 표시된 setMarkedText 방법으로 완료되었습니다.

하지만, 미리보기를 갖는 것은 선택 사항이다.

만약 당신이 그것을 가지고 있지 않기로 선택한다면, UIKeyInput을 채택하기만 하면 됩니다.

언급해야 할 마지막 프로토콜이 하나 있는데, 당신은 이미 몇 분 전에 그것을 잡았을 수도 있습니다.

UIKeyInput 자체는 UITextInputTraits를 확장한다.

그 프로토콜은 KeyboardType 및 TextContentType과 같은 선택적 속성으로만 구성되어 있으며, 이전에 알고 있는 것은 특정 콘텐츠에 대한 카메라 입력을 필터링하는 데 사용됩니다.

따라서 카메라 입력의 경우, UIKeyInput을 채택하고, 선택적으로 원하는 기능 수준에 따라 UITextInputTraits 또는 UITextInput을 채택해야 합니다.

좋아. 이제, 그걸 우리 이미지뷰로 다시 가져오자.

저는 UIImageView를 서브클래스하고 UIKeyInput을 채택하는 HeadlineImageView라는 새로운 클래스를 만들 것입니다.

여기 코드에 있어.

UIImageView의 간단한 서브클래스이며, 캡션을 표시하는 데 사용할 UILabel 서브뷰가 있습니다.

UIKeyInput을 채택하려면 hasText, deleteBackward 및 insertText의 세 가지 방법이 필요합니다.

일반적으로, 응답자들은 키보드를 호출하기 위해 UIKeyInput을 채택한다.

하지만 키보드 입력이 아닌 카메라 입력만 원하기 때문에 insertText만 구현하면 됩니다.

hasText는 false를 반환할 수 있으며 deleteBackward는 아무것도 할 필요가 없습니다.

insertText에 관해서는, 그것의 구현은 정말 간단하다.

그것은 단지 카메라에서 텍스트를 가져와서 우리 라벨에 준다.

그게 전부야!

이제 카메라에서 캡처한 캡션을 표시하는 방식으로 이미지 보기가 있습니다.

나랑 같이 여행해줘서 고마워!

여기 네가 가지고 오길 바라는 게 있어.

텍스트 콘텐츠 유형을 활용하세요.

그들은 카메라에서 텍스트를 필터링하는 것을 포함하여 하나 이상의 방법으로 도움을 준다.

카메라 입력을 홍보하고 싶을 때 자신만의 런처를 만드세요.

우리는 사용자가 앱 전반에 걸쳐 카메라 입력과 연결할 수 있는 일관된 모양을 위한 라벨과 이미지를 제공합니다.

하지만 그 기능을 사용할 수 있는지 먼저 확인하세요.

마지막으로, 텍스트 컨트롤이 아닌 사용자 지정 응답자에 카메라 입력을 사용할 수 있다는 것을 기억하세요.

UIKeyInput 프로토콜만 채택하면 됩니다.

안전하게 여행하고 남은 WWDC 2021을 즐기세요!

♪