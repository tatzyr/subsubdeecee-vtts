10059

iOS 15의 "UIKit의 새로운 기능"에 오신 것을 환영합니다.

제 이름은 마이클이고 나중에 제 동료 제이미와 합류할 것입니다.

iOS 15는 놀라운 신기술과 기능으로 가득 차 있다.

우리는 당신이 이러한 새로운 기능을 채택할 수 있도록 몇 가지 흥미로운 방법으로 UIKit을 업데이트했습니다.

제이미와 저는 함께 생산성 업데이트, UI 개선, API 개선, 성능 개선, 그리고 몇 가지 새로운 보안 및 개인 정보 보호 기능을 다룰 것입니다.

생산성은 iPadOS의 핵심이며, 올해는 iPad 멀티태스킹, 키보드 탐색, 키보드 단축키 및 iPad 포인터에 대한 업데이트와 함께 예외는 아닙니다.

iPad를 다음 단계로 끌어올리기 위해 멀티태스킹을 어떻게 업데이트했는지에 대한 짧은 데모로 시작합시다.

메일에서, 우리는 그 어느 때보다 쉽게 단일 메시지에 집중할 수 있도록 새로운 센터 씬 멀티태스킹 기능을 사용하고 있습니다.

메시지를 길게 눌러 상황에 맞는 메뉴를 열고 "새 창에서 열기"를 선택하세요.

이것은 화면 중앙에 있는 자체 UIWindowScene에서 메시지를 열 것이다.

이것은 당면한 과제에 집중할 수 있는 좋은 방법이다.

새로운 중앙 장면은 드래그 앤 드롭을 사용하거나 창 장면 상단의 새로운 멀티태스킹 메뉴에서 분할 보기 옵션을 선택하여 분할 보기로 이동할 수도 있습니다.

또는, 멀티태스킹 메뉴를 아래로 스와이프하고 새 창 선반에 장면을 고정할 수 있습니다.

이 기능을 앱에 추가하는 것은 새 창 장면 활성화 작업을 만드는 것만큼 간단합니다.

이 작업은 앱에서 처리할 수 있는 NSUserActivity로 생성된 활성화 구성을 반환하는 폐쇄를 취합니다.

이 작업을 상황에 맞는 메뉴에 추가하면 모든 준비가 됩니다.

iPadOS 13.4에서 우리는 매직 키보드와 포인터를 도입했습니다.

iPadOS 15에서 우리는 밴드 선택을 추가하여 포인터 지원을 개선했습니다.

새로운 API를 제공하는 것 외에도, 우리는 다중 선택을 지원하는 UICollectionViews에 대해 기본적으로 밴드 선택을 활성화했습니다.

우리는 또한 2차 모양을 포인터 스타일과 결합하여 추가 컨텍스트 또는 기능에 대한 힌트를 전달할 수 있는 포인터 액세서리를 추가했습니다.

한 번에 여러 액세서리를 표시하고 포인터 주변에 배치할 수 있습니다.

그들은 포인터와 같은 유체 성질을 가지고 있으며, 시스템은 다른 액세서리 모양과 위치 사이에서 원활하게 작동한다.

iPadOS 15에서, 우리는 키보드 단축키 메뉴를 완전히 재설계했습니다.

분류된 단축키와 내장된 검색을 통해, 당신이 찾고 있는 단축키를 찾는 것이 그 어느 때보다 쉬워졌습니다.

새로운 키보드 단축키 메뉴는 또한 앱의 iPad와 Mac Catalyst 버전 간의 향상된 패리티를 제공합니다.

이러한 새로운 기능을 최대한 활용하려면, UIMenuBuilder를 채택해야 합니다.

UIApplicationDelegate에 buildMenuWithBuilder를 구현하세요.

"보기" 또는 "파일"과 같은 사전 정의된 범주 중 하나에 명령을 할당하거나 자신만의 사용자 지정 범주를 만드세요.

카테고리를 사용하려면, UIResponder의 keyCommands 속성 사용에 대한 애플리케이션을 감사해야 합니다.

이 속성에 할당된 명령을 buildMenuWithBuilder 함수로 이동하세요.

멀티태스킹, iPad 포인터 및 새로운 키보드 단축키 메뉴에 대해 자세히 알아보려면, iPad 앱을 한 단계 끌어올리는 것에 대한 놀라운 비디오가 있습니다.

우리는 또한 iPadOS 15에서 초점 기반 키보드 내비게이션에 대한 풍부한 지원을 추가했습니다.

이미 tvOS의 포커스 시스템에 익숙하다면, 이제 iPadOS에서도 사용할 수 있다는 것을 알게 되어 기쁠 것입니다.

사실, tvOS, CarPlay, iPadOS 및 Mac Catalyst의 모든 포커스 내비게이션은 이제 UIFocusSystem을 기반으로 합니다.

iPad와 Mac Catalyst의 UIFocusSystem을 사용하면 화살표 키를 사용하여 포커스 항목 사이를 이동하고 탭 키를 사용하여 포커스 그룹 사이를 이동합니다.

이 예에서 메일 애플리케이션은 사이드바와 함께 UISplitViewController를 사용하고 있으며, 이러한 표준 UIKit 구성 요소를 사용할 때 iPadOS 15에서 시연된 키보드 탐색이 기본적으로 활성화됩니다.

앱에서 키보드 탐색 지원에 대해 자세히 알아보려면 "키보드 탐색에 집중"을 확인하세요.

iOS의 또 다른 필수 생산성 기능은 멀티 터치 드래그 앤 드롭이다.

iOS 11에 도입된 드래그 앤 드롭은 필수적인 생산성 향상이었다.

하나의 간단한 제스처로, 애플리케이션 내부와 iPadOS 내에서도 애플리케이션 간에 데이터를 원활하게 이동할 수 있습니다.

iOS 15에서 UIKit은 iPhone에서도 앱 간 드래그 앤 드롭을 활성화하여 많은 흥미진진한 새로운 상호 작용을 잠금 해제했습니다.

예를 들어, 이제 새로운 시계 밴드에 대한 아이디어를 친구와 빠르게 공유하는 것이 그 어느 때보다 쉬워졌습니다.

하나의 제스처로, 사파리에서 사진을 메시지 대화로 바로 드래그할 수 있습니다.

드래그 앤 드롭 API는 이 확장된 기능을 지원하기 위해 변경되지 않았습니다.

기술적 세부 사항을 새로 고치기 위해, 우리는 드래그 앤 드롭을 활용하는 방법에 대해 자세히 설명하는 2017년의 네 개의 훌륭한 비디오를 가지고 있습니다.

다음으로, iOS 15의 UI 개선 사항 중 일부를 보여드리겠습니다.

우리는 UIToolbar와 UITabBar의 외관을 개선했습니다.

이 업데이트된 모양은 하단으로 스크롤할 때 배경 자료를 제거하여 콘텐츠에 더 많은 시각적 선명도를 제공합니다.

UITabBar에서, 우리는 SF 기호에 대한 지원을 강화하여 당신이 가장 좋아하는 기호를 사용할 때 훌륭한 결과를 제공합니다.

UIKit은 앱에서 이 새로운 모습을 원활하게 만들기 위해 최선을 다하지만, 발생할 수 있는 몇 가지 문제가 있습니다.

바의 반투명 속성을 false로 설정할 수 있는 장소에 대한 코드를 감사하고 비표준 edgesForExtendedLayout이 있는 UIViewControllers를 확인해야 합니다.

이 두 조건 모두 새로운 외관에 시각적 문제를 일으킬 것이다.

새로운 기본 동작이 앱에 적합하지 않은 경우, 사용자 지정 모양을 만들고 바의 scrollEdgeAppearance 속성에 할당하십시오.

이 속성은 이전에는 UINavigationBar에서만 사용할 수 있었지만 지금은 UIToolbar와 UITabBar에서도 사용할 수 있습니다.

사용자 지정 모양을 설정하면 이전에 언급한 호환되지 않는 API로 인한 시각적 문제를 피할 수 있습니다.

또한, UIKit은 새로운 스크롤 에지 모양 전환을 수행할 때 관찰을 위한 적절한 스크롤 뷰를 추론할 수 없을 수도 있습니다.

scrollView를 직접 지정하기 위해, 우리는 UIViewController에 새로운 기능을 추가했습니다 — edge용 setContentScrollView.

네 모든 바를 봐.

외모가 당신이 기대하는 것인지 확인하세요.

특별한 일을 한 곳을 꼭 확인하세요. 특별한 주의가 필요할 수도 있습니다.

우리는 iOS 15에서 헤더에 대한 새로운 모습을 가지고 있다.

일반 목록의 경우, 섹션 헤더는 이제 콘텐츠에 따라 매끄럽게 표시되며, 아래로 스크롤할 때 상단에 고정될 때만 눈에 보이는 배경 자료가 표시됩니다.

또한, 이 새로운 디자인으로 섹션을 시각적으로 분리하기 위해 각 섹션 헤더 위에 삽입된 새로운 패딩이 있습니다.

연락처 앱에서 입증된 것처럼 목록 콘텐츠가 길 때 빠른 스크러빙을 위해 인덱스 막대와 함께 이 일반 스타일을 사용해야 합니다.

UIKit은 또한 그룹화된 스타일을 제공한다.

이것은 사용자 지정 또는 시각적으로 풍부한 콘텐츠를 많이 포함하지 않는 UI에서 사용하기 위한 것입니다.

이것은 설정 앱에서 찾을 수 있는 것과 유사한 구성 UI 또는 등록 흐름을 위한 훌륭한 선택입니다.

눈에 띄는 헤더 스타일은 iPad의 사이드바 목록에 사용되는 기존 사이드바 헤더 스타일과 매우 유사합니다.

눈에 띄는 헤더는 .sidebar 목록을 컴팩트한 크기 클래스의 .insetGrouped 목록에 적용할 때 사용하기에 좋은 선택입니다.

시계 앱의 알람 탭은 이 새로운 스타일을 잘 활용한다.

그리고 마지막으로, 우리는 헤더가 계층 구조를 유지하고 길을 잃지 않도록 시각적으로 풍부한 콘텐츠와 함께 사용할 수 있는 새로운 눈에 띄는 그룹화 스타일을 가지고 있습니다.

이 스타일이 작동하는 것을 보려면 워치 앱의 페이스 갤러리를 확인하세요.

이러한 모든 훌륭한 헤더 스타일에 액세스하려면, iOS 14에 도입된 UIListContentConfiguration API를 사용하세요.

iOS 14.5에서 우리는 목록에서 구분자를 완벽하게 제어할 수 있는 UIListSeparatorConfiguration을 도입했습니다.

전체 목록에 대한 구성을 지정하거나, 행별로 시스템 생성 모양을 재정의하여 구분 기호를 완벽하게 제어할 수 있습니다.

iOS 15의 시트는 우리가 중간 높이 멈춤이라고 부르는 곳에 표시되는 화면의 절반만 덮을 수 있는 기능을 얻습니다.

이 새로운 절반 높이 기능을 사용하면 선택적으로 이 멈춤 뒤에서 디밍을 비활성화하여 시트 내부와 뒤에서 상호 작용할 수 있는 비모달 경험을 만들 수 있습니다.

"UIKit에서 시트 사용자 지정 및 크기 조정"을 보고 iOS 15에서 시트를 개선한 모든 방법에 대해 알아보세요.

다음은 UIDatePicker입니다.

그리고 네, iOS 15에서, 우리는 시간의 바퀴를 다시 도입하고 있습니다.

하지만 이제, 입력을 위해 키보드를 사용할 시간을 탭하기만 하면 됩니다.

그리고 iPad의 Magic Keyboard를 사용하면 시간을 온라인으로 바로 편집할 수도 있습니다.

물론, 당신은 여전히 화면을 탭하여 그 아름다운 바퀴를 드러낼 수 있습니다.

그리고 그것으로, 나는 그것을 내 동료 제이미에게 넘겨줄 것이다.

고마워, 마이크!

저는 iOS 15에서 UIKit API에 대한 더 많은 개선 사항을 살펴보기 시작할 것입니다.

우리의 첫 번째 API 개선은 여러 면에서 UI 개선이다.

버튼의 모양과 느낌을 유연하게 구성할 수 있도록 UIButton에 새로운 API를 추가했습니다.

기존의 플레인 스타일뿐만 아니라, 우리는 회색 배경이 있는 그레이, 틴티드 배경이 있는 틴티드, 완전히 불투명한 필드를 추가했습니다.

새로운 스타일 외에도, 버튼은 이제 동적 유형으로 알려진 시스템 "텍스트 크기" 설정에 대한 응답으로 크기 조정을 더 잘 지원하며, 처음으로 공식적으로 여러 줄 텍스트를 지원합니다.

이러한 변경 사항과 이를 가능하게 하는 새로운 UIButton.Configuration API는 버튼을 더 강력하게 만들 뿐만 아니라 더 사용자 정의 가능하고 업데이트하기 쉽습니다.

iOS 14에서 출시된 버튼에 UIMenu 추가와 함께 UIButtonConfiguration을 사용하면 처음으로 UIKit에서 기본적으로 팝업 및 풀다운 버튼을 만들 수 있습니다.

그리고 물론, Mac에서 UIKit을 사용하고 Xcode에서 "Mac용 인터페이스 최적화"를 선택했다면, 이 버튼들은 모두 예상대로 보이고 작동합니다.

다음은 API를 얼마나 쉽게 사용할 수 있는지에 대한 예입니다.

그냥 버튼 구성을 만드세요.

이 생성자는 틴티드 스타일을 제공한다.

구성의 속성은 버튼을 사용자 정의하는 데 사용됩니다.

그런 다음 버튼을 인스턴스화하여 구성을 전달하세요.

여기에 표시되지 않지만, 남은 것은 액션을 추가하고 보기에 버튼을 추가하는 것뿐입니다.

UIButtonConfiguration에는 제가 여기서 다룰 수 있는 것보다 훨씬 더 많은 것이 있으므로, 그것을 다루는 전체 비디오와 UIButton에 대한 다른 개선 사항이 자세히 있습니다.

버튼 API에 대한 모든 것을 알아보려면 "UIKit 버튼 시스템 만나기"를 확인하세요.

iOS와 iPadOS의 UIContextMenuInteraction은 이제 축소 가능한 하위 메뉴를 지원합니다.

이 메뉴의 "정리 기준" 항목과 같은 쉐브론이 있는 항목을 탭하면 나타납니다.

이것을 위한 새로운 API는 없다.

UIMenu API는 이미 하위 메뉴를 지원하지만, iOS 15 이전에는 탭했을 때 현재 메뉴를 완전히 대체했습니다.

이것은 또한 "UIKit 버튼 시스템 만나기" 비디오에서 조금 더 논의된다.

iOS 13에서 우리는 샌프란시스코 글꼴 옆에 멋지게 보이는 수백 개의 확장 가능한 기호인 SF 기호를 도입했습니다.

iOS 15에서, 이것들은 훨씬 더 좋아진다.

추가 기호가 있을 뿐만 아니라, 우리는 세 가지 새로운 방법으로 색상을 사용할 수 있는 기능을 추가했습니다: 계층, 팔레트 및 멀티컬러.

모노크롬 기호는 당신이 이미 알고 사랑하는 단색의 착색 가능한 이미지입니다.

계층적 기호는 레이어 계층에 단일 런타임 지정 색조 색상을 적용합니다.

팔레트 기호는 여러 색상을 명시적으로 지정할 수 있게 해준다.

그리고 이전에 AppKit과 SwiftUI에서만 사용할 수 있었던 다색 기호는 고정된 다색 표현을 가지고 있다.

이러한 모든 다채로운 모드를 사용하기 위한 새로운 API는 UIKit, SwiftUI 및 AppKit에서 사용할 수 있습니다.

API는 정말 사용하기 쉽다.

이 코드는 UIImageSymbolConfiguration을 설정하여 시스템 오렌지색을 계층적 색조의 기초로 사용한 다음, 이를 사용하여 계층적으로 색조의 오렌지색 태양 기호의 이미지를 만듭니다.

SFSymbols를 정기적으로 사용한다면, 몇 가지 스타일 변형이 있다는 것을 알 수 있습니다.

예를 들어, 원이나 직사각형에 채워져 있다.

이전 릴리스에서, 이것들은 점선 문자열을 지정하여 선택된다.

iOS 15에는 유형을 미리 지정하든 기존 이미지의 변형을 생성하든 이러한 변형으로 매우 쉽게 작업할 수 있는 새로운 UIImage API가 있습니다.

이것은 "하트" 문자열로 표현되는 기호이며, 이제 코드에서 선택할 수 있는 두 가지 변형이다.

"SF 심볼 디자인 및 빌드" 컬렉션에는 SF 심볼의 모든 측면에 대한 많은 비디오가 있으며, 모두 확인해 보시기 바랍니다.

UIKit API에는 특히 "UIKit 및 AppKit의 SF 기호"에 더 많은 것이 있습니다.

UIContentSizeCategory 특성은 코드에서 동적 유형 크기라고도 불리는 시스템 텍스트 크기 설정을 나타냅니다.

SFSymbols를 포함하는 라벨, 텍스트 필드, 텍스트 뷰 및 이미지 뷰를 설정하여 설정에 자동으로 조정할 수 있습니다.

iOS 15에서, 우리는 계층 구조를 보기 위해 특성이 어떻게 적용되는지 제한하는 새로운 방법을 추가했습니다.

이것은 당신이 크기에 맞게 바닥이나 천장을 쉽게 설정할 수 있게 해준다.

이것은 앱의 텍스트와 이미지가 모든 텍스트 크기 설정에서 멋지게 보이도록 할 때 큰 도움이 될 수 있습니다.

여기서, 시계는 큰 시간 라벨이 얼마나 작은지 제한하고 있다.

텍스트 크기를 과도하게 제한하기 위해 이 API를 사용하지 마세요.

이러한 설정은 매우 중요한 기능을 제공하며, 가장 높은 텍스트 크기 설정을 사용하는 사람들에게 앱의 기능을 모두 사용할 수 있고 모든 것을 읽을 수 있는 것이 가장 중요합니다.

그래서 또 다른 예로, 당신은 이것을 사용하여 이미 기본 크기에서 매우 큰 헤드라인의 성장을 제한할 수 있습니다.

우리는 모든 플랫폼에서 시스템 색상을 통합했습니다.

이것은 UIKit에 어떤 의미인가요?

음, 일부 색상에는 미묘한 변화가 있으며, 이전에는 다른 프레임워크에서만 사용할 수 있었던 일부 색상은 이제 앱이 실행되는 곳마다 UIKit에서도 사용할 수 있습니다.

따라서 UIKit 앱에서 systemMint 또는 systemBrown을 사용하고 싶다면, 지금이 그 때입니다.

또한 새로운 것은 UIColor.tintColor이다.

앱 또는 특성 계층 구조의 현재 색조 색상에 따라 런타임에 해결되는 색상입니다.

새로운 UIButton.Configuration과 새로운 다채로운 SF Symbols API와 함께 사용하기에 완벽합니다.

UIColor와 함께, 색상을 혼합하고 고르기 위한 표준 인터페이스인 UIColorPicker ViewController에 대한 개선 사항도 있습니다.

iOS 14.5에는 색상이 혼합되고 변경될 때뿐만 아니라 피킹이 완료될 때 앱 UI를 업데이트할 수 있는 새로운 콜백 colorPickerViewController(didSelect:continuously:)가 있습니다.

TextKit 2는 iOS, iPadOS, tvOS 및 macOS에서 사용할 수 있는 새로운 차세대 텍스트 레이아웃 시스템입니다.

텍스트로 하고 싶은 것을 더 쉽게 표현할 수 있는 강력한 새로운 시스템이며, 빠르고 고성능 방식으로 수행합니다.

UIKit은 채택이 필요 없는 칸나다어와 같이 복잡한 스크립트가 있는 언어로 텍스트에 더 나은 레이아웃을 제공하는 UITextField를 강화하기 위해 무대 뒤에서 채택했습니다.

TextKit 2에 대해 더 알고 싶다면, 무엇을 할 수 있는지, 그리고 앱에서 사용하는 방법을 알고 싶다면, "Meet TextKit 2"를 보세요.

UISceneSession은 애플리케이션 UI의 인스턴스를 나타내며, 앱 스위처에 표시된 앱 창에 해당합니다.

인터페이스 상태는 NSUserActivity로 표시됩니다.

당신의 앱은 장면이 배경에 들어갈 때 이 NSUserActivity를 시스템에 제공하며, 장면이 다시 인스턴스화될 때 인터페이스 상태를 복원하는 데 사용해야 합니다.

iPadOS 15에는 이것을 더 쉽게 하기 위한 몇 가지 새로운 API가 있다.

텍스트 입력 뷰의 일시적인 상태를 얻고 설정하는 새로운 방법이 있습니다.

스토리보드가 로드된 후 상태를 복원할 수 있는 더 편리한 장소를 제공하는 새로운 UIScene 콜백이 있습니다.

그리고 상태를 반환하는 비동기 모델 코드가 있는 경우 앱 실행 프로세스를 확장하고 앱의 UI가 활성화될 때 지연할 수 있는 기회가 있습니다.

우리의 모든 엔지니어링 노력은 UIScene 기반 API에 초점을 맞추고 있다.

UIScene이 iPadOS 13에 도입되기 전의 이전 UIApplication 기반 수명 주기를 여전히 사용하고 있다면, 이제 UIScene으로 전환할 때입니다.

모든 UIKit 앱은 그것을 사용할 수 있다. 여러 개의 창을 지원할 필요는 없지만, iPad와 Mac 앱의 경우 좋은 생각이다.

UIScene에 대한 재교육과 향상된 상태 복원 API에 대한 자세한 내용은 "iPad 앱을 한 단계 끌어올리세요"를 시청하세요.

장면에 대해 말하자면, iOS 15의 UIKit에는 앱이 각 장면에서 상호 작용 중인 현재 공유 가능한 콘텐츠를 나타낼 수 있는 새로운 API가 있습니다.

그것들은 iOS와 Mac의 새로운 Siri "Share This" 기능과 Mac Catalyst의 NSSharingServicePickerToolbarItem에서 사용됩니다.

"단축키, Siri 및 제안을 위한 훌륭한 작업 설계"와 "훌륭한 Mac Catalyst 앱의 품질" 비디오에는 더 많은 세부 사항이 있습니다.

마지막 API 향상을 위해, 우리는 친애하는 친구인 UICollectionView와 UITableView에게 돌아갈 것입니다.

iOS 14에서는 이전보다 훨씬 쉽고 일관되게 셀의 모양과 느낌을 구성할 수 있도록 새로운 API를 도입했습니다.

iOS 15에서 새로운 폐쇄 기반 업데이트 핸들러를 사용하면 그 어느 때보다 쉽게 셀을 재구성할 수 있습니다.

더 이상 셀 서브클래스를 만들고 상태를 사용하여 updateConfiguration을 재정의할 필요가 없습니다.

이제 셀을 만드는 것과 같은 장소에서 그 코드를 인라인으로 작성할 수 있습니다.

여기서, 우리는 셀이 비활성화되었을 때 텍스트를 회색으로 하고 있습니다.

새로운 UIButtonConfiguration API에서도 유사한 폐쇄 기반 기능을 사용할 수 있습니다.

컬렉션과 테이블 뷰를 더 쉽게 업데이트할 수 있도록 다양한 데이터 소스를 개선했습니다.

iOS 15에서, 차이를 애니메이션화하지 않고 스냅샷을 적용하면, UI는 기존의 모든 셀을 버리지 않고 이러한 변경 사항을 기반으로 업데이트됩니다.

그리고 항목을 효율적으로 재구성하는 새로운 API가 있으므로, 신원을 변경하지 않고 항목의 속성이 변경될 때 기존 셀에 표시되는 콘텐츠를 업데이트할 수 있습니다.

UIKit이 실행되는 모든 장치에는 여러 프로세서 코어와 강력한 그래픽 하드웨어가 있습니다.

일은 빨리 일어나야 해. 애니메이션과 스크롤은 항상 매끄럽어야 한다.

iOS 15에는 이러한 특성을 가진 건물 앱을 더욱 쉽게 만드는 몇 가지 개선 사항과 새로운 API가 있습니다.

UIKit에서 사용할 수 있는 몇 가지에 대해 이야기해 봅시다.

먼저, 우리는 UICollectionView와 UITableView로 돌아갈 것입니다.

iOS 15는 셀 프리페칭에 대한 변경 사항을 도입한다.

이러한 변경 사항은 iOS 15용으로 빌드할 때 자동으로 적용됩니다.

그들은 스크롤을 완벽하게 매끄럽게 유지하면서 셀을 준비하기 위해 거의 두 개의 시각적 프레임의 가치인 최대 두 배의 시간을 앱에 제공할 수 있다.

많은 세포가 이미지를 보여준다.

과거에는 메인 UI 대기열이 큰 이미지를 디코딩할 때 스크롤이 일시적으로 중단되는 것을 눈치챘을 수도 있습니다.

iOS 15에서 앱 코드는 이 과정을 더 잘 제어할 수 있다.

이미지를 준비하는 새로운 쉬운 기능이 있으므로 앱이 표시해야 할 때 완전히 준비됩니다.

그리고 이러한 기능은 비동기적으로 사용하기 쉽기 때문에, UI 대기열은 이미지가 디코딩되는 동안 이벤트를 자유롭게 처리할 수 있습니다.

많은 앱이 큰 이미지를 처리하지만, 작은 크기로 표시합니다.

이를 돕기 위해, 이미지와 디스플레이에 대한 시스템의 지식을 사용하여 이미지의 크기를 더 효율적으로 조정하고 메모리를 절약하는 새로운 UIImage API가 있습니다.

이러한 컬렉션 보기 및 이미지 개선, 이를 활용하는 방법에 대한 정보 및 기타 훌륭한 성능 팁에 대한 자세한 내용은 "놀라운 빠른 목록 및 컬렉션 보기 만들기"를 확인하세요.

스위프트는 비동기 코드를 그 어느 때보다 쉽게 작성할 수 있는 새로운 기능을 도입했다.

대부분의 UIKit API는 메인 UI 큐에서 호출되어야 하며, 컴파일 타임에 처음으로 시행되도록 하기 위해 해당 API를 메인 액터로 주석을 달았습니다.

새로운 UIImage 준비 기능과 같은 다른 분야에서는 UIKit이 새로운 비동기 Swift 언어 기능과 함께 쉽고 안전하게 사용할 수 있도록 API를 조정했습니다.

비동기 코드를 개발하는 이 새로운 방법을 진행하려면 "Meet async/await in Swift"와 "Meet AsyncSequence"를 확인하세요.

이제, 보안과 사생활.

우리는 시스템이 실제로 어떤 인터페이스와 상호 작용하고 있는지 확인할 수 있는 새로운 기술을 iOS 15에 구축했습니다.

우리는 이것을 몇 곳에서 UIKit에 통합했고, 여기서는 당신의 앱에 영향을 미칠 수 있는 세 가지에 대해 이야기할 것입니다.

먼저, 위치 버튼.

OS 15는 새로운 API를 도입하여 앱이 장치의 현재 위치에 사례별로 일회성 액세스를 허용하는 버튼을 삽입할 수 있도록 합니다.

그들은 많은 경고나 프롬프트 없이 도청될 때만 이것을 한다.

API는 유연하기 때문에 모든 앱의 모양과 일치할 수 있지만, 무대 뒤에서는 버튼이 항상 명확하고 읽을 수 있도록 보장하거나 작동하지 않습니다.

이것을 모든 앱에 삽입하는 방법에 대해 논의하는 전체 비디오가 있습니다. "위치 버튼을 만나세요" iOS 14에 도입된 이 배너를 눈치채셨을 것입니다.

앱이 다른 앱의 붙여넣기 보드에 복사된 데이터에 액세스할 때 표시됩니다.

iOS 15에서는 시스템이 표준 시스템 붙여넣기 인터페이스와의 의도적인 상호 작용 후 데이터가 액세스되었음을 확인할 수 있을 때마다 배너를 제거하고 있습니다.

예를 들어, 편집 메뉴의 붙여넣기 버튼을 탭하거나 하드웨어 키보드의 Cmd-V를 탭합니다.

우리는 또한 몇 가지 새로운 표준 붙여넣기 메뉴 항목을 제공하기 위해 API를 추가했습니다.

이것들이 사용될 때, 알림 배너도 표시되지 않습니다.

우리는 "붙여넣기", "붙여넣기 및 이동", "붙여넣기 및 검색", "붙여넣기 및 일치 스타일"을 지정하는 새로운 방법을 제공합니다.

이들 각각에는 UIMenuController 및 UICommand와 함께 사용할 수 있는 표준 UIResponder 선택기와 UIAction과 함께 사용할 수 있는 새로운 식별자가 있습니다.

때때로 앱은 페이스트보드에 있는 것에 대한 더 많은 정보를 원하지만, 전체 액세스가 필요하지 않습니다.

iOS 14에서 우리는 앱이 붙여넣기 보드에 숫자, 가능한 웹 URL 또는 가능한 웹 검색어가 있는지 확인하는 데 사용할 수 있는 API를 도입했습니다.

그리고 우리는 이것들을 계산기와 사파리에서 직접 사용합니다.

iOS 15에서 이 API는 모든 표준 데이터 탐지기 유형을 포함하도록 크게 확장되었습니다.

이들 중 어느 것도 통지를 보여주지 않을 것이다. 왜냐하면 그들은 데이터 자체에 대한 접근 권한을 부여하지 않기 때문이다.

텍스트를 직접 구문 분석할 필요 없이 데이터 값을 검색할 수 있는 API도 있지만, 이러한 API가 표준 붙여넣기 인터페이스를 사용한 후 이외의 시간에 사용되는 경우, 시스템은 붙여넣기 알림을 표시합니다.

우리의 마지막 개인 정보 보호 향상은 iOS 14.5의 새로운 것이었고, 위치 및 붙여넣기 인터페이스를 지원하는 초기 버전의 기술을 기반으로 구축되었습니다.

UIEventAttribution은 WebKit 팀과 함께 개발되었다.

WebKit의 개인 클릭 측정 기능은 웹 대 웹 클릭 측정을 제공합니다.

UIEventAttribution은 PCM을 UIKit에 가져오고, App-to-Web 클릭 측정을 제공합니다.

이것은 광고 클릭과 탭의 개인 정보 보호 측정을 의미합니다.

사용하기 쉽습니다. UIEventAttributionViews로 광고를 덮고, 광고 탭에 대한 응답으로 여는 URL과 함께 UIEventAttribution 객체를 전달하기만 하면 됩니다.

이에 대해 자세히 알아보려면, "개인 정보 보호 광고 어트리뷰션 충족" 비디오를 보세요.

"개인 클릭 측정 소개"라는 제목의 훌륭한 WebKit.org 블로그 게시물도 있습니다.

음, 그건 꽤 회오리바람이었고, 우리는 심지어 새로운 모든 것을 다루지도 않았어.

다음은 뭐야?

iOS 15 SDK를 사용하여 앱을 컴파일하세요.

iPhone의 드래그 앤 드롭과 향상된 시스템 색상과 같은 새로운 기능을 테스트하세요.

새로운 버튼, 막대, 목록 및 기호로 새로운 iOS 15 모양을 채택하세요.

더 나은 멀티태스킹, 키보드 및 트랙패드 지원을 위해 새로운 iPad 기능을 채택하세요.

그리고 새로운 UIKit API를 사용하여 사용자 개인 정보를 존중하고, 더 나은, 더 빠른 앱을 더 쉽게 만드세요.

고마워.