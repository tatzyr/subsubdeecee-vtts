10349

♪ ♪

안녕, 난 제이콥이야.

"SwiftUI의 SF 기호"에 오신 것을 환영합니다.

우리는 이 세션 동안 몇 가지 주제를 살펴볼 것이다.

첫째, SwiftUI의 SF 기호를 사용하는 몇 가지 기본 사항.

그런 다음, 기호의 변형을 사용하는 방법.

그리고 마지막으로, 새로운 렌더링 모드로 작업하기.

이러한 API의 가용성에 대한 한 가지 참고 사항: 이 세션에서 볼 수 있는 모든 것은 모든 Apple 플랫폼에서 사용할 수 있으며, 올해 릴리스에서 새로운 것이 언제인지 알 수 있는 새로운 배지를 찾으십시오.

기본으로 들어가자.

이미 SwiftUI의 Symbols를 사용했다면, 이 부분은 산들바람일 것입니다.

시작하려면, 그냥 상징을 보여주세요.

가장 간단한 방법은 이미지에서 "하트"와 같은 시스템 제공 기호 중 하나를 사용하는 것이다.

라벨 보기는 기호를 보여주는 또 다른 주요 방법이다.

라벨은 가장 자주 상징인 아이콘과 제목의 조합이다.

라벨의 좋은 점은 그것이 이 페어링에 대한 일반적인 설명이며 그것이 표시된 맥락에 맞게 행동을 조정할 것이라는 것이다.

예를 들어, 많은 구성 요소에서 라벨은 기호와 제목으로 표시됩니다.

때로는 다른 레이아웃으로 표시되거나, 때로는 구성 요소가 기호나 제목만 표시합니다.

SwiftUI는 내장 보기에서 자동으로 이러한 변경을 수행하며, 자신의 보기에서 라벨 스타일을 사용하여 이를 수행할 수도 있습니다.

사용하는 이니셜라이저를 변경하기만 하면 이미지와 라벨 모두에서 사용자 지정 기호를 표시할 수 있습니다.

이것은 이러한 각각의 구성의 모습이지만, 그들의 시각적 표현만이 중요한 것은 아니다.

이것이 이러한 각 보기가 기본적으로 VoiceOver에 나타나는 방식이다.

제목이 콘텐츠에 대한 텍스트 설명을 제공하기 때문에 라벨을 사용하면 자동으로 훌륭한 접근성 지원을 제공한다는 것을 알 수 있습니다.

이미지 전용 사례를 자세히 살펴봅시다.

가능하다면, SwiftUI는 시스템 기호의 내용을 기반으로 라벨을 제공할 것이다.

"사랑" 버튼을 위해 하트를 사용하는 것처럼, 이것이 당신이 필요한 전부일 수 있습니다.

그러나, 일부 기호는 표준 의미가 없으며, 이러한 경우 기본 접근성 설명은 유용하지 않을 것이다.

또한 앱이 기호를 어떻게 사용하는지에 대한 더 구체적인 정보를 추가할 수도 있습니다.

당신은 항상 접근성 라벨을 사용하여 그 정보를 제공할 수 있습니다.

우리의 사용자 지정 기호는 우리가 이상적인 접근성 설명을 얻지 못하는 또 다른 경우이다.

그것을 개선하는 좋은 방법은 Localizable.strings 파일에서 이미지 이름에 대한 현지화를 제공하는 것입니다.

SwiftUI는 사용되는 모든 곳에서 이 이미지의 접근성 라벨에 이 현지화 가능한 문자열을 자동으로 사용합니다.

기호를 사용하는 마지막 방법은 텍스트의 일부이다.

문자열 보간을 사용하여 텍스트 실행 안에 기호를 삽입할 수 있습니다.

이것은 이 쉐브론처럼 텍스트와 함께 기호가 리플로우되기를 원할 때 사용하기에 좋은 기술입니다.

좋아요, 마음으로 라벨로 돌아가서 기호에 적용하여 사용자 정의할 수 있는 몇 가지 수정자를 살펴봅시다.

foregroundStyle 수정자로 기호의 색상을 변경하는 것으로 시작합시다.

텍스트와 기호는 라이트 모드 또는 다크 모드에서 기본적으로 검은색 또는 흰색입니다.

foregroundStyle을 빨간색과 같은 특정 색상으로 설정하거나 현재 색조 또는 보조 스타일과 같은 더 많은 의미론적 값으로 설정할 수 있습니다.

우리는 그것으로 할 수 있는 고급 효과를 보기 위해 나중에 다시 foregroundStyle로 돌아올 것이다.

글꼴 수정자를 사용하여 텍스트 크기와 기호의 크기를 모두 변경할 수 있습니다.

본문이나 캡션과 같은 텍스트 스타일을 사용하면 텍스트와 기호가 동적 유형으로 조정되며, 고정된 크기를 선택하면 일정하게 유지됩니다.

기호의 크기를 변경할 수 있는 다른 축은 imageScale 수정자를 사용하여 스케일입니다.

이것은 사용된 글꼴 크기를 변경하지 않지만, 텍스트에 비해 기호가 얼마나 큰지 변경합니다.

다음으로, 변형을 살펴봅시다.

iOS 탭 표시줄이 채워진 기호 변형을 사용해야 한다는 것을 눈치챘을 것입니다.

과거에, 이것은 Symbols 앱에서 올바른 기호를 신중하게 선택하고, 기호에 "sparkles"와 같은 채우기 변형이 없을 때를 알고 스스로 해야 했던 것이었습니다.

올해 새로운 탭 바 및 기타 보기는 이제 채우기와 같은 특정 변형을 자동으로 선택하여 포함된 모든 기호에 적용됩니다.

이것은 당신이 기호의 기본 버전을 사용하고 추가 작업 없이 올바른 변형을 얻을 수 있다는 것을 의미합니다.

그리고 원하는 정확한 구성을 과도하게 지정하지 않음으로써, 더 재사용 가능한 코드도 얻을 수 있습니다.

예를 들어, macOS에서 동일한 코드를 실행하면, 해당 플랫폼에 대한 올바른 변형을 얻을 수 있습니다: 개요.

우리는 우리 자신의 구성 요소에서도 이 변형 지원을 사용할 수 있습니다.

여기, 기본 개요 변형으로 표시된 간단한 라벨 목록이 있습니다.

여기서 채워진 변형을 사용하려면, 새로운 symbolVariant 수정자를 사용할 수 있습니다.

이 수정자는 환경에서 지정된 변형을 설정하므로, 우리가 여기서 하는 것처럼 전체 뷰 계층 구조에서 사용하는 것이 좋습니다.

사용 가능한 많은 변형 세트가 있습니다: 채우기, 슬래시 및 모양 캡슐화 세트.

그리고 이것들은 .circle.fill과 같은 기호 자체의 이름에 결합되는 것과 같은 방식으로 서로 결합될 수 있다.

이 동일한 변형 세트는 사용자 지정 기호에서도 작동합니다.

시스템 기호가 사용하는 것과 동일한 명명 패턴을 따르기만 하면 됩니다.

다음으로, 렌더링 모드를 살펴봅시다.

기호는 네 가지 렌더링 모드를 지원하여 기호의 색상 방식을 사용자 정의할 수 있습니다.

다음은 각 렌더링 모드의 몇 가지 예입니다.

우리는 그것들을 하나씩 검토할 것이다.

그리고 다양한 렌더링 모드의 디자인에 대해 더 알고 싶다면, "SF 심볼의 새로운 기능"을 적극 추천합니다.

좋아, 이번에는 macOS에서 카드 목록으로 돌아가자.

지금, 우리의 기호는 흑백인 기본 렌더링 모드를 보여주고 있다.

이것은 기호 세트에 대한 일관된 색상을 보여주는 데 잘 작동한다.

그러나, 이 경우, 저는 각 카드와 관련된 색상을 사용하여 이러한 기호를 보여주고 싶습니다.

다색 렌더링 모드는 각 기호가 나타내는 색상을 보여줄 수 있는 좋은 방법입니다.

그리고 우리는 다색에 symbolRenderingMode 수정자를 추가하여 변경할 수 있습니다.

기호에 다색 표현이 없다면, 흑백 렌더링 모드로 되돌아간다.

SF 기호 앱을 사용하여 다색 정의가 있는 기호를 찾고 사용자 지정 기호에 다색 지원을 추가할 수 있습니다.

자세한 내용은 "SF 기호 앱 개요"를 확인하세요.

이 앱의 다른 부분에는 덱의 다른 부분으로 카드를 섞을 수 있는 몇 가지 버튼이 있습니다.

나는 다른 수준의 불투명도를 가진 이 기호들의 핵심 부분을 강조하고 싶다.

어떤 렌더링 모드가 그걸 하는지 기억해?

맞아! 계층적!

우리는 계층적으로 동일한 symbolRenderingMode 수정자를 사용할 수 있습니다.

이것은 현재 전경 스타일을 사용하여 흑백과 같은 기호에 단일 색상을 적용하지만, 기호의 핵심 요소를 강조하기 위해 여러 수준의 불투명도를 추가합니다.

마지막 렌더링 모드가 하나 있고, 내 앱에 도움이 될 수 있는 버튼이 있다.

나는 카드 게임을 잘 못해서, 내 실수를 되돌리려면 이 버튼이 필요해.

여기, 저는 이 원형 배경을 얻기 위해 .circle.fill 변형이 있는 버튼의 기호를 보여주고 있습니다.

하지만 그 색은 정확히 내가 원하는 것이 아니다.

나는 우리 카드의 색깔과 더 잘 어울리는 것을 원해.

foregroundStyle 수정자를 사용하여 기호에 색상을 설정할 수 있다는 것을 기억하세요.

하지만 우리는 더 멀리 갈 수 있어.

올해, 우리는 상징을 그리는 데 사용할 여러 색상을 설정할 수 있습니다.

이것은 기호 레이어의 채색을 최대한 제어할 수 있는 팔레트 렌더링 모드를 사용합니다.

기호의 각 레벨을 제어하기 위해 최대 세 가지 스타일을 지정할 수 있습니다.

이 기호는 1차 및 3차 내용을 가지고 있으므로, 첫 번째와 세 번째 색상이 사용될 것이다.

만약 우리가 이 기호의 개요 버전과 같이 기본 및 보조 콘텐츠가 있는 기호를 사용했다면, 그 색상만 사용될 것이다.

대부분의 개별 기호는 이 두 개의 레이어와 같은 두 개의 레이어만 사용하기 때문에, 세 가지 스타일 대신 두 가지 스타일을 지정할 수 있으며, 마지막 스타일은 보조 스타일부터 모든 것에 사용됩니다.

많은 경우에, 이것이 당신이 필요한 전부입니다.

우리는 지금까지 색상을 사용해 왔지만, 이것은 전경 스타일 수정자이며, 모든 ShapeStyle에서 작동합니다.

우리는 부차적인 스타일을 사용하여 흐림 앞에서 생생한 효과를 얻거나, 심지어 재료를 사용하여 기호 뒤의 배경을 흐리게 할 수도 있습니다.

전경 스타일과 재료에 대해 더 알고 싶다면, "SwiftUI 앱에 풍부한 그래픽 추가"를 확인하세요.

렌더링 모드의 전체 세트를 다시 살펴봅시다.

사용할 렌더링 모드를 보고 선택하는 가장 좋은 방법은 SF Symbols 앱과 관리자입니다.

그리고 SwiftUI에서 이러한 구성을 표현하는 이러한 API는 같은 방식으로 작동하므로 Symbols 앱과 코드 사이를 쉽게 왔다갔다 할 수 있습니다.

당신은 또한 최소한의 구성으로 최고의 행동을 얻을 수 있습니다.

포그라운드 스타일이 하나만 있고 렌더링 모드를 지정하지 않으면, 자동으로 흑백이 됩니다.

그리고 하나 이상의 전경 스타일을 지정하지만 렌더링 모드를 지정하지 않으면 자동으로 팔레트를 얻을 수 있습니다.

심볼 앱에는 이러한 다양한 렌더링 모드에서 사용할 수 있는 많은 색상 세트가 있습니다.

그리고 그 전체 색상 세트는 올해 새로운 몇 가지 색상과 스타일을 포함하여 SwiftUI에서도 사용할 수 있습니다.

이 색상들은 그들이 나타나는 모든 다른 구성에 최적화되어 있습니다: 밝고 어두운 모드, 흐림에 대한 특별한 렌더링, 심지어 그들이 표시되는 특정 플랫폼까지.

우리는 방금 기호를 만드는 방법, 모양을 변경하기 위한 수정자 세트, 기호의 변형을 변경하는 방법, 다른 렌더링 모드 선택, 그리고 전경 스타일을 사용하여 기호의 색상을 사용자 정의하는 방법을 보았습니다.

SF 심볼을 사용하면 앱에 아름다운 그래픽을 쉽게 추가하고 원하는 만큼 적게 또는 많이 사용자 정의할 수 있습니다.

앱을 더 잘 보이게 하기 위해 그것들을 채택할 수 있는 곳을 보세요.

시청해 주셔서 감사드리며 멋진 WWDC를 보내세요.

[쾌활한 음악].