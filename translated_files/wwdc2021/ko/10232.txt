10232

안녕하세요, 여러분! 제 이름은 아야카이고, Mac용 단축키를 소개하게 되어 정말 기쁩니다.

저는 먼저 Mac용 단축키에 대한 간략한 개요와 올해 단축키에 가져올 다른 흥미로운 새로운 업데이트로 시작하고 싶습니다.

단축키를 통해 사람들은 반복적인 작업을 자동화하고 다른 앱의 기능을 함께 연결하여 문제를 해결할 수 있습니다.

그것은 당신이 당신의 기술을 어떻게 사용하는지에 대해 창의적일 수 있게 해준다.

그리고 Mac용 단축키는 자동화를 그 어느 때보다 더 재미있고 접근 가능하게 만들 것이다.

앱을 처음 열면, iPhone에서 이미 동기화된 모든 단축키를 볼 수 있습니다.

이 앱에는 또한 새로운 Mac 전용 단축키를 포함하여 사용할 수 있는 새로운 단축키를 찾을 수 있는 단축키 갤러리가 포함되어 있습니다.

그리고 자신만의 단축키를 만들고 싶다면, Mac에서 편안함을 느끼도록 처음부터 다시 설계된 단축키 편집기를 사용할 수도 있습니다.

그건 그렇고, 우리는 SwiftUI에서 거의 모든 Mac 앱을 작성했는데, 이를 통해 iOS와 Mac 앱 간의 통합 코드베이스를 유지하면서 각 플랫폼에 맞게 세부 사항을 조정할 수 있습니다.

iOS와 마찬가지로, Mac의 모든 앱은 바로 가기에 대한 작업을 제공할 수 있습니다.

이 세션에서는 iOS 앱, 네이티브 Mac 앱 또는 Mac Catalyst로 빌드된 앱을 개발하든, 앱의 단축키 지원을 통해 macOS에서 강력한 워크플로우를 활성화할 수 있는 방법을 다룰 것입니다.

우리는 또한 AppleScript와 Automator와 같이 우리가 알고 사랑하는 기존 도구를 포함하여 단축키가 Mac 자동화의 더 큰 그림에 어떻게 맞는지 다룰 것입니다.

올해, 우리는 또한 포커스와 사운드 인식을 위한 두 가지 새로운 자동화 유형과 함께 창과 파일을 관리할 수 있는 완전히 새로운 작업 모음과 함께 나중에 강조할 더 많은 것을 추가했습니다.

우리는 당신의 앱이 사람들이 강력한 단축키를 만들 수 있는 사용자 지정 작업을 제공할 수 있는 방법을 다룰 것입니다.

그건 그렇고, 앱이 파일 제공자와 통합되면, 이러한 새로운 파일 작업은 앱이 제공하는 파일과 자동으로 작동합니다.

그리고, 기존 SiriKit 메시지 의도를 채택한 앱이 있다면, 이제 앱에서 사용자 지정 메시지 보내기 작업을 통해 이 기능을 자동으로 노출할 것입니다.

우리는 또한 공유에 대한 흥미진진한 새로운 업데이트가 있으며, 개발자들이 단축키를 만들고 공유하는 것을 좋아한다는 것을 알고 있습니다.

올해, 우리는 단축키를 배포하기 훨씬 쉽게 만들고 있다.

또한 단축키를 파일로 배포할 수 있는 새로운 파일 형식이 있습니다.

그리고 우리는 동료들과 단축키를 공유하는 데 유용한 개인 공유를 활성화했습니다.

한 번 보자.

이제, 누구나 특별한 설정을 켜지 않고도 단축키를 다운로드할 수 있습니다.

즉, 웹사이트나 앱에서 자신만의 단축키를 배포할 수 있습니다.

예를 들어, 사람들에게 앱의 동작을 사용하는 멋진 단축키를 제공하고 싶다고 가정해 봅시다.

이제, 그 단축키를 만들고 iCloud에 공유하면, Apple은 단축키를 공증하고 앱이나 웹사이트에 기능을 갖추고 사람들이 쉽게 다운로드할 수 있는 링크로 바꿀 것입니다.

우리는 또한 사람들이 라이브러리의 사진처럼 앱에 데이터를 전달하는 단축키를 다운로드할 때 더 구체적인 권한 프롬프트를 제공하여 데이터를 제어할 수 있도록 하고 있습니다.

그리고 더 있어.

단축키는 이제 파일로도 공유할 수 있으며, 이는 iCloud 외부에서 단축키를 배포해야 하는 경우에 유용합니다.

그리고 iCloud 링크와 마찬가지로, 단축키 파일은 안전한지 확인하기 위해 Apple에 의해 공증됩니다.

마지막으로, iCloud에 업로드하지 않고도 단축키를 비공개로 공유할 수 있는 새로운 모드가 있으며, 연락처와 공유하거나 개인 백업을 저장하는 데 사용할 수 있습니다.

단축키 파일은 보낸 사람의 신원으로 서명됩니다.

단축키에 다시 서명해야 하는 경우, 새로운 단축키 명령줄 도구를 사용할 수 있습니다.

그래서 그것들은 모두 올해 단축키에 대한 흥미진진한 새로운 업데이트입니다.

이제 단축키가 기존 Mac 자동화 기술과 어떻게 어울리는지 살펴봅시다.

Mac은 AppleScript, Shell Scripting 및 Automator를 포함하여 자동화에 대한 깊은 지원의 오랜 역사를 가지고 있습니다.

우리는 Shortcuts가 AppleScripts와 Shell Scripting을 완벽하게 지원한다는 것을 공유하게 되어 기쁩니다.

단축키 편집기에서 직접 스크립트를 작성하고 실행할 수 있는 단축키에 내장된 새로운 작업이 있습니다.

다음으로, 오토마에이터를 살펴봅시다.

Automator는 반복적인 작업을 자동화하기 위한 워크플로우를 만들 수 있는 Mac의 기존 자동화 도구입니다.

단축키는 맥 자동화의 미래이다.

하지만 우리는 여전히 오토미터와 그것에 의존하는 모든 사람들에게 깊은 관심을 갖고 있다.

Automator에서 바로 가기로 가능한 한 원활하게 전환하기 위해, 우리는 대부분의 Automator 워크플로우를 바로 가기로 변환할 수 있는 마이그레이션 도구를 구축했습니다.

예를 들어, Finder에서 선택한 PDF 문서에서 이미지를 만드는 훌륭한 워크플로우가 있다면, 단축키는 그것을 가져오고 각 Automator 작업을 하나 이상의 단축키 작업으로 바꿀 수 있습니다.

바로 가기 앱에서 앱으로 드래그하거나 오른쪽 클릭 메뉴를 사용하여 워크플로우 파일을 열기만 하면 됩니다. 그게 전부입니다!

당신의 작업 흐름은 바로 가기로 바뀌었습니다.

마이그레이션을 활성화하기 위해, 우리는 가장 인기 있는 모든 Automator 작업을 단축키, Shell Scripts 및 AppleScripts를 실행하고, 파일을 관리하는 작업 등에 추가했습니다.

그리고, 물론, 이 모든 행동들은 우리의 이주자에 의해 지원된다.

이제, 당신의 앱이 단축키에 어떻게 맞는지 그리고 그것이 고객을 위해 창출할 수 있는 가치에 대해 이야기해 봅시다.

앱이 단축키와 통합될 수 있는 주요 방법은 "행동"을 통해 기능을 노출하는 것입니다.

단축키에 대한 작업을 노출함으로써, 사람들은 앱의 기능을 더 빨리 사용하고, 앱을 사용하여 강력한 워크플로우를 만들 수 있으며, 마지막으로 다른 앱과 함께 앱을 사용할 수 있습니다.

이것들을 좀 더 자세히 살펴봅시다.

macOS에는 사람들이 단축키를 실행할 수 있는 곳이 너무 많다.

앱에서 동작을 노출하면, 갑자기 사람들은 단축키 앱 자체, 단축키 메뉴 표시줄, 키보드 단축키 입력, 스포트라이트에서 검색 등을 사용할 수 있습니다.

그래서 당신은 그 어느 때보다 더 빠르고 더 많은 장소에서 당신의 기능을 사용할 수 있도록 사람들을 개방하고 있습니다.

게다가, 앱의 작업은 강력한 다단계 단축키의 일부로 사용될 수 있습니다.

사람들이 업무를 관리할 수 있는 할 일 앱을 만든다고 가정해 봅시다.

앱의 기능을 행동으로 노출하면, 갑자기 사람들은 그 행동을 사용하여 강력한 워크플로우를 만들 수 있습니다.

예를 들어, 내일 마감인 모든 할 일을 찾고, 우선 순위를 높게 설정하고, 한 번의 클릭으로 목록에 표시하는 단축키를 만들 수 있습니다.

작업을 함께 연결할 수 있는 모든 다른 방법 때문에, 몇 가지 작업만 노출하면 앱의 기능에 대한 수천 개의 새로운 사용 사례를 활성화할 수 있습니다.

앱에서 작업을 노출함으로써, 사람들이 다른 앱과 함께 앱의 기능을 사용할 수 있도록 할 수도 있습니다.

예를 들어, 이미지 편집 앱을 만들고 앱의 사용자 지정 이미지 필터를 적용하는 작업을 노출하면, 갑자기 사람들은 그 작업을 사용하여 한 번의 클릭으로 사진을 선택하고, 이미지 필터를 적용하고, 소셜 미디어에 게시할 수 있는 이와 같은 워크플로우를 만들 수 있습니다.

그래서, 그것들은 노출 행동이 어떻게 사람들이 당신의 앱으로 할 수 있는 일을 과급할 수 있는지에 대한 몇 가지 예일 뿐입니다.

훌륭한 행동을 설계하는 세션을 확인하여 앱으로 사람들에게 힘을 실어주기 위해 제공할 수 있는 어떤 종류의 행동에 대해 자세히 알아보세요.

나는 지금 그것을 이안에게 넘길 거야. 이안은 너에게 실제로 이 행동들을 만드는 방법을 보여줄 거야.

안녕하세요, 저는 이안입니다. 오늘은 Mac 앱에 대한 단축키 동작을 만드는 방법을 보여드리겠습니다.

나중에, 통합을 위해 명심해야 할 몇 가지 특별한 고려 사항을 다루겠습니다.

건물 행동을 시작합시다.

iOS와 마찬가지로, 단축키에 대한 작업은 SiriKit으로도 알려진 인텐트 프레임워크를 사용하여 구축됩니다.

이 세션을 위해, 나는 사람들이 각자의 마감일을 가지고 해야 할 작업 목록을 추적하고, 그 작업을 다른 사람들과 공유할 수 있는 협업 작업 관리 앱을 개발하는 척 할 것이다.

사람들이 Mac 어디에서나 내 앱의 기능을 사용할 수 있는 것은 정말 중요하다.

단축키와 통합함으로써, 나는 사용자가 내 앱에서 작업과 관련된 다단계 단축키를 구축할 수 있도록 할 수 있다.

앱을 보면, 사용자가 상호 작용하는 주요 유형의 콘텐츠는 작업이다.

각 작업에는 몇 가지 중요한 속성이 있다.

먼저, 무엇을 해야 하는지 설명하는 텍스트인 제목이 있습니다.

작업에는 또한 마감일과 다른 사람들과 작업을 공유할 수 있는 링크가 있습니다.

우리가 동사로 생각할 수 있는 앱의 작업과 관련하여 수행할 수 있는 많은 작업이 있습니다.

새 작업을 추가하고, 기존 작업을 편집하거나 삭제하고, 특정 기준과 일치하는 작업을 얻을 수 있으며, 물론 앱은 특정 작업을 표시할 수 있습니다.

그래서, 그 각 동사에 대해, 나는 행동을 만들 것이다.

이것들은 사용자가 호출할 수 있는 원시적인 작업을 형성할 것이며, 이러한 작업은 사람들이 함께 사용할 수 있도록 설계되었습니다.

예를 들어, 그 둘을 함께 페어링하여 작업을 받은 다음 삭제할 수 있습니다.

작업 만들기만 하면, 누군가는 노트에서 선택한 텍스트를 가져와, 필요한 경우 텍스트를 대문자로 표시하고, 사용자에게 마감일을 입력하도록 요청하는 자동화된 워크플로우를 만들 수 있습니다.

그런 다음, 바로 가기는 해당 텍스트와 마감일을 작업 만들기 작업에 전달할 수 있으며, 이는 내 앱에 작업을 만들려는 의도를 전달할 것이다.

내 앱에서 작업이 생성되면, 내 의도는 공유 URL을 포함한 작업을 반환할 것이며, 바로 가기는 메시지에서 누군가에게 그 링크를 보낼 수 있다.

자, 그것은 단지 하나의 예일 뿐입니다.

단축키에는 다양한 행동이 있기 때문에, 사람들은 거의 무한한 방법으로 작업 만들기 작업을 활용할 수 있다.

이제 앱이 어떤 행동을 노출시킬지 알았으니, 나는 그것들을 구현하기 시작할 것이다.

구현의 첫 번째 단계는 앱에 대한 의도 정의 파일을 만드는 것입니다.

이 파일을 Xcode 프로젝트에 추가하면 소스 코드와 함께 컴파일됩니다.

이 프레젠테이션을 위해, 저는 Mac용 상당히 기본적인 SwiftUI 앱을 가지고 있습니다.

그러나, 당신이 사용하는 UI 프레임워크에 관계없이, 의도를 추가하는 과정은 매우 유사할 것입니다.

먼저, 나는 의도 정의 파일을 만들 것이다.

템플릿 창에서 의도 정의를 검색할 것이다.

기본 이름은 괜찮습니다.

컴파일되도록 앱 대상에 추가해야 합니다.

여기 새롭고 빈 의도 정의 파일이 있습니다.

파일 내부에서, 나는 앱이 구현하는 각 의도와 이 경우 작업과 같이 사용되는 다른 유형을 정의해야 할 것이다.

이 앱은 이 작업 유형을 참조하는 많은 의도를 가질 것이므로, 작업 유형을 정의하는 것으로 시작하겠습니다.

그렇게 하려면, 왼쪽 하단의 + 버튼을 클릭하고 "새 유형"을 선택하세요.

각 유형은 자동으로 식별자와 displayString 속성을 가질 것이다.

displayString 속성은 작업의 제목에 대해 작동하지만, 마감일과 공유 링크의 유형에 더 많은 속성을 추가해야 합니다.

먼저, 작업을 언제 완료해야 하는지를 지정하는 마감일 속성을 추가하겠습니다.

날짜와 시간을 나타내기 때문에 날짜 구성 요소 유형을 선택할 것입니다.

또한 다른 사람들과 공유할 수 있는 작업에 대한 링크인 URL을 추가할 것입니다.

이제 첫 번째 작업이 완료되었고, 말장난은 의도하지 않았고, 나는 계속 진행하고 의도를 정의할 것이다.

이것은 당신이 작업을 만들 수 있는 의도가 될 것입니다.

"작업 만들기"라는 이름을 지정하고 카테고리를 Create로 변경하겠습니다.

나는 또한 그 의도가 무엇을 하는지 설명하는 짧은 설명을 쓸 것이다.

사용자는 앱이 구현하는 작업 목록을 살펴볼 때 이것을 보게 될 것이다.

다음으로, 나는 의도에 대한 매개 변수를 정의할 것이다.

함수와 같은 의도와 매개 변수를 함수가 작업을 하기 위해 전달되어야 하는 인수로 생각하십시오.

새로운 작업을 만들기 위해, 내 앱은 제목과 마감일을 알아야 하므로, 그 각각에 대한 매개 변수를 만들 것이다.

작업이 이루어질 때 앱이 생성되기 때문에 공유 링크를 미리 수집할 필요가 없습니다.

제목에 대한 매개 변수를 추가하는 것으로 시작합시다.

우리는 유형으로 문자열을 선택할 것이다.

각 유형의 매개 변수에는 그것과 관련된 몇 가지 구성 옵션이 있습니다.

그것이 말이 된다면, 기본값을 지정할 수 있습니다.

하지만 이 경우, 나는 그것을 빈 줄로 남겨둘 것이다.

다음으로, 날짜 구성 요소 유형으로 만기일 매개 변수를 추가하겠습니다.

그리고 여기에 프롬프트를 추가할 것이므로, 사용자가 미리 날짜를 입력하지 않으면, 앱은 런타임에 하나를 요청할 수 있습니다.

이제 두 매개 변수가 모두 정의되었으므로, 우리는 거의 끝났습니다.

마지막으로, 단축키 앱 섹션으로 스크롤하여 몇 가지를 더 채워야 합니다.

먼저, 입력 매개 변수를 지정하겠습니다.

종종 사용자들이 다른 곳에서 텍스트를 가져와서 우리의 행동으로 전달할 것이기 때문에, 나는 제목 매개 변수를 입력으로 선택할 것이다.

이것은 단축키를 만들 때 경험을 향상시킬 것이므로, 사용자가 이미 단축키에 이전 작업의 텍스트를 가지고 있다면, 그들이 우리의 작업을 추가할 때 자동으로 채워질 것입니다.

내가 마지막으로 해야 할 일은 요약을 정의하는 것이다.

이 문자열은 사용자가 단축키에서 이 작업을 볼 때 표시됩니다.

나는 그것을 "기한이 있는 작업 만들기"라고 부를 것이다.

작업을 만드는 데 두 매개 변수가 모두 필요하므로, 둘 다 요약에 넣을 수 있으므로 작업을 볼 때 항상 볼 수 있습니다.

요약에 넣고 싶지 않은 매개 변수가 더 있다면, 자유롭게 빼세요.

이렇게 하면, 사용자는 작업을 확장하고 편집할 수 있습니다.

의도를 정의하면, Xcode는 구현에 사용할 수 있는 클래스와 프로토콜을 생성합니다.

이제, 나는 앱을 만들 거야.

이것은 우리가 계속하기 전에 의도 정의에 문제가 없도록 할 것이다.

빌드 로그에서, 나는 이제 새로운 코드가 구축되는 것을 본다.

이러한 소스 파일은 의도 정의에 입력된 것에 따라 Xcode에 의해 생성됩니다.

Xcode는 작업 유형과 CreateTaskIntent에 대한 소스 코드를 생성했습니다.

이러한 새로운 유형은 이제 우리 앱의 코드베이스에서 사용할 수 있습니다.

또한, 의도가 정의되었으므로 바로 가기 앱을 실행하고 새로운 바로 가기를 만들고 새로운 작업 만들기 작업을 검색할 수 있습니다.

내가 어떤 코드도 작성하지 않았기 때문에, 아직 작동하지 않을 것이다.

다음으로, 앱은 들어오는 의도를 발송하고 처리해야 할 것이다.

이 코드는 누군가가 단축키나 Siri를 통해 작업을 실행할 때 실행됩니다.

앱은 어떤 프로세스가 의도를 처리할지 결정해야 하며, 두 가지 옵션이 있습니다.

첫째, 앱 내 처리, 또는 둘째, 별도의 인텐트 확장을 구축합니다.

인앱 인텐트 처리를 통해 앱은 앱 대리인에게 전달되는 들어오는 인텐트에 대한 응답으로 상태를 조작할 수 있습니다.

대부분의 앱은 이것으로 시작하여 필요한 경우 인텐트 확장으로 이동해야 합니다.

인텐트 확장은 앱을 대신하여 인텐트를 처리할 수 있는 가벼운 독립형 프로세스입니다.

인텐트가 실행될 때마다 프로세스를 시작해야 하기 때문에, 앱 자체를 실행할 필요가 없기 때문에 인텐트 확장을 구축하는 것이 가능한 한 효율적일 수 있습니다.

앱과 인텐트 확장은 들어오는 각 인텐트에 대한 인텐트 핸들러 객체를 인스턴스화하고 반환하도록 요청받을 것이다.

이것을 하기 위해 구현해야 하는 API를 살펴봅시다.

인앱 인텐트 처리를 위해, 인텐트 핸들러를 반환할 수 있는 AppDelegate 방법이 있습니다.

macOS Monterey에서, 이 API는 이제 NSApplicationDelegate에서도 사용할 수 있습니다.

인텐트 확장의 경우, INExtension의 서브클래스는 handlerForIntent 메소드를 재정의할 수 있습니다.

인앱 인텐트 처리와 인텐트 확장의 차이점에 대한 자세한 내용은 WWDC 2020의 "Empower your intents" 세션을 시청하세요.

이제, 나는 앱에 들어가서 인앱 인텐트 처리를 구현할 것이다.

내가 해야 할 첫 번째 일은 앱에 대한 지원되는 인텐트로 CreateTaskIntent를 추가하는 것이다.

이를 통해 시스템은 이 의도가 앱 대리인에게 전달되어야 한다는 것을 알 수 있다.

다음으로, 기본 앱 소스 코드로 가세요.

먼저, 앱을 위한 앱 대리자를 만들겠습니다.

이것은 SwiftUI 앱 수명 주기를 사용하고 있기 때문에, 객체를 SwiftUI에 연결하기 위해 대리자 어댑터를 만들어야 합니다.

인텐트를 받으려면, 인텐트 프레임워크를 가져오고 handlerForIntent 메소드를 구현하십시오.

이제 디스패치 방법이 있으니, 다음 단계는 의도에 대한 핸들러를 구현하는 것이다.

이 예에서, 나는 의도를 처리하기 위해 새로운 클래스를 만들 것이며, 이것은 당신의 앱의 모든 객체가 될 수 있습니다.

인텐트 핸들러는 "처리"라는 단어로 끝나는 이 인텐트에 대해 생성된 프로토콜을 준수해야 합니다.

작업 생성 의도의 이름은 CreateTaskIntentHandling입니다.

그런 다음, 의도가 CreateTaskIntent일 때 새로운 IntentHandler 객체를 반환하기 위해 handlerForIntent 메소드를 업데이트할 것입니다.

Xcode는 어떤 방법을 구현해야 하는지 알려야 합니다.

의도 처리 프로토콜은 네 가지 유형의 방법을 포함할 수 있습니다: 해결, 옵션 제공, 확인 및 처리.

각 매개 변수에 대해 해결 방법이 생성됩니다.

이것은 매개 변수가 유효한지 확인하고 그렇지 않은 경우 시스템에 무엇을 해야 하는지 말할 수 있는 기회가 될 것입니다.

이 의도를 위해, 두 가지 해결 방법이 있는데, 하나는 제목을 위한 것이고 다른 하나는 마감일을 위한 것이다.

제목 매개 변수의 경우, 앱은 값이 0이 아니고 비어 있지 않은지 확인해야 합니다.

제목이 비어 있으면, 시스템에 사용자에게 값을 입력하라는 메시지를 표시하도록 알려주는 needsValue를 반환합니다.

만기일 매개 변수의 경우, 만기일이 0이 아닌지 확인하기 위해 검증되는 곳에서 유사한 것이 구현됩니다.

마감일에 대한 앱의 요구 사항을 살펴보면, 해결 방법은 또한 모든 마감일이 미래에 있는지 확인하고 날짜가 과거인 경우 사용자에게 오류를 표시해야 합니다.

이렇게 하려면, 의도 정의 파일로 돌아가서 사용자 지정 유효성 검사 오류를 추가하겠습니다.

코드, invalidDate, 그리고 마감일이 미래여야 한다는 오류 메시지를 드리겠습니다.

이제 앱은 방금 추가한 사용자 지정 유효성 검사 오류와 함께 지원되지 않는 결과를 반환할 수 있으며, 이는 날짜가 유효하지 않다는 오류 메시지를 표시합니다.

또 다른 유형의 방법은 옵션을 제공하는 것이다.

동적 옵션 설정이 활성화된 모든 매개 변수에 대해 이것을 볼 수 있습니다.

매개 변수 중 하나라도 가능한 값의 유한한 집합만 있고 사용자가 자신의 임의의 값을 입력할 수 없는 경우, 해당 매개 변수에 대한 동적 옵션을 활성화할 수 있습니다.

이것은 의도가 실행될 때 가능한 값이 무엇인지 지정할 수 있는 옵션 제공이라는 방법을 만들 것이며, 단축키는 사용자에게 값 중 하나를 선택하도록 요청합니다.

매개 변수가 개별적으로 해결된 후, 모든 것이 잘 보이는지 확인해야 하는 확인 방법을 선택적으로 구현할 수 있으며, 문제가 있는 경우 의도를 처리하고 오류를 던질 수 있어야 합니다.

예를 들어, 네트워크 연결이 필요한 경우, 실제로 네트워크에 연결할 수 있는지 확인해야 합니다.

마지막으로, 핸들 방법은 의도가 당신에게 하라고 말하는 것을 실제로 하는 곳입니다.

핸들 방법은 앱에서 작업을 생성하고 성공을 반환할 것이다.

작업이 작업을 만든 후, 나중에 작업이 공유 URL과 같은 속성을 사용할 수 있도록 작업을 출력으로 제공해야 합니다.

의도 편집기로 돌아가서, 나는 의도에 대한 응답 섹션으로 갈 것이다.

여기에, 나는 만들어진 작업에 대한 속성을 추가할 것이다.

내가 전에 만든 작업 유형을 선택할게.

단축키에서 사용할 수 있도록 그 속성을 의도의 출력으로 선택할 것이다.

그리고 이제, 코드로 돌아가서, 응답에는 작업 객체를 할당할 수 있는 작업 속성이 있을 것이다.

이것이 완료되면, 당신의 의도는 바로 가기 앱에 행동으로 나타나야 합니다.

그래서, 그것을 테스트하고 사람들이 사용할 수 있는 모든 방법을 시도하는 데 시간을 할애하세요.

테스트를 시작하려면, 단축키 앱을 다시 열고 작업 만들기 작업을 살펴보겠습니다.

내가 그 작업의 이름과 날짜를 입력할게-- "내일 오후 3시에."

실행 버튼을 누르면, 작업이 성공적으로 생성됩니다.

하지만, 내가 날짜를 "어제 오후 3시"로 바꾸면...

그것은 우리가 예상했던 대로 오류 메시지를 보여줄 것이다.

그래서 그것은 바로 가기에서 행동을 구축하기 위한 것이다.

마지막으로, 오늘 저는 Mac에서 단축키를 개발할 때 명심해야 할 몇 가지 고려 사항을 검토하겠습니다.

저는 Mac Catalyst로 구축된 앱, 파일과 함께 작동하는 앱, iOS와 Mac 모두에 배포하는 앱, 단축키를 실행해야 하는 앱과 도구를 포함한 네 가지 유형의 앱을 다룰 것입니다.

먼저, Mac Catalyst를 사용하여 iOS 앱을 Mac으로 가져오는 경우, 알아야 할 몇 가지 사항이 있습니다.

macOS Monterey에서 앱은 이제 Mac Catalyst로 빌드된 경우 동일한 Intents API를 사용할 수 있습니다.

새로운 앱을 만드는 경우, 모든 것이 iOS에서와 동일하게 작동해야 합니다.

그러나, 앱을 이미 Mac에서 사용할 수 있고 iOS의 인텐트 프레임워크와 통합되어 있다면, Mac에 오는 과정에서 인텐트 통합을 컴파일했을 가능성이 높습니다.

따라서, macOS Monterey에서 실행할 때 이 기능을 다시 활성화하기 위해 코드를 감사해야 합니다.

내가 강조하고 싶은 또 다른 유형의 앱은 문서 기반 앱이다.

이전 데모에서, 우리의 작업 관리 앱은 앱 내에 완전히 존재하는 작업에서 작동합니다.

그러나, 다른 많은 앱은 디스크에 파일로 존재하는 문서에서 작동한다.

iOS 15와 macOS Monterey에서 인텐트에 대한 파일 매개 변수를 사용하면 사용자가 특정 파일을 선택하고 앱의 작업에 전달할 수 있습니다.

앱이 주로 데이터베이스가 아닌 파일 기반 문서를 다루는 경우, 파일에서 작동하는 일련의 작업을 구축하는 것을 고려하십시오.

예를 들어, 스프레드시트 앱은 문서를 열거나 특정 파일의 행에 데이터를 추가하는 작업을 만들 수 있습니다.

타사 단축키가 파일로 어떻게 작동할 수 있는지에 대한 또 다른 정말 멋진 예는 사운드 분석의 이 세션에 나와 있습니다.

iOS와 Mac 모두에 존재하는 앱을 개발하는 경우, 두 플랫폼 모두에서 작업을 수행하려면 앱의 두 복사본 모두에 동일한 의도를 배포해야 합니다.

이것은 사람들이 한 플랫폼에서 지름길을 만들고 다른 플랫폼에서 같은 방식으로 작동하도록 할 것이다.

이렇게 하려면, 두 앱에 동일한 정확한 의도 정의를 컴파일하고, 의도가 동일한 이름과 매개 변수를 공유하도록 해야 합니다.

때때로, 당신의 앱은 플랫폼마다 다른 번들 식별자를 가질 수 있으며, 이것은 괜찮습니다.

단축키는 당신을 위해 이것을 처리할 것이지만, 같은 이름의 의도는 동일한 Apple 개발자 팀을 통해 배포된 앱 사이에서만 공유된다는 것을 명심하십시오.

또한, iOS 15에서 한 버전의 앱에서 다른 버전으로 사용자를 업그레이드해야 하는 경우, 두 앱이 동일한 개발자의 것이고 동일한 의도 이름을 사용하는 한, 앱의 단축키는 자동으로 한 앱에서 다른 버전으로 전송됩니다.

마지막으로, 앱이나 명령줄 도구에서 단축키를 실행하고 싶다면, 고려해야 할 두 가지 방법이 있습니다.

첫째, 단축키는 Mac 앱과 AppleScripts가 단축키를 나열하고 실행할 수 있는 스크립팅 인터페이스를 노출합니다.

또한, 셸 스크립트 또는 명령줄 도구에서 단축키를 나열하고 실행할 수 있는 단축키 명령줄 도구가 있습니다.

단축키를 실행할 수 있는 앱이나 스크립트를 개발하는 경우, 스크립팅 인터페이스를 사용해야 합니다.

"단축키 이벤트" 프로세스와 통신함으로써, 앱은 사용자가 설정한 단축키 목록을 얻고 실행을 시작할 수 있습니다.

AppleScript에서는 "단축키 이벤트" 프로세스에 이름으로 단축키를 실행하도록 말함으로써 이를 수행할 수 있습니다.

스크립팅 브리지 프레임워크를 사용하여 단축키 이벤트 프로세스에 Swift 또는 Objective-C 앱에서 직접 단축키를 실행하도록 요청할 수 있습니다.

샌드박스 앱의 경우, "com.apple.security.scripting 대상"이라는 자격을 추가해야 합니다.

단축키 목록에 액세스하고 실행하려면, "com.apple.shortcuts.run" 대상을 추가해야 합니다.

마지막으로, macOS Monterey에는 단축키를 나열하고 이름으로 실행할 수 있는 명령줄 도구도 포함되어 있습니다.

명령줄 도구나 스크립트가 있다면, 이 인터페이스를 통해 단축키와 통합할 수 있습니다.

그래서, 마무리하기 위해, 바로 가기는 이제 Mac에서 사용할 수 있으며, 어떤 종류의 앱을 가지고 있든, 바로 가기 생태계에 참여해야 합니다.

앱에 대한 작업을 추가하면, 사람들이 그것으로 할 수 있는 것을 곱할 수 있습니다.

단축키는 사람들이 당신의 앱으로 창의력을 발휘할 수 있게 해준다.

당신은 사람들이 당신의 행동으로 어떤 종류의 지름길을 만드는지 알게 되어 기쁠 것입니다.

[타격적인 음악].