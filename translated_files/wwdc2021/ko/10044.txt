10044

안녕하세요, 환영합니다.

제 이름은 Marl이고, 저는 Shazam 제품 팀에 있습니다.

WWDC21을 즐기고 계시기를 바라며, 오디오 인식을 앱에 통합할 수 있는 프레임워크인 ShazamKit을 소개합니다.

오늘 저는 ShazamKit이 무엇인지와 그것을 적용하기 위한 몇 가지 사용 사례를 안내해 드리겠습니다.

그런 다음, 나는 그것을 내 동료 제임스에게 넘길 것이고, 그는 당신에게 Shazam 카탈로그 인식이 어떻게 작동하는지 보여주고 시작하기 위한 팁을 제공할 것이다.

ShazamKit이 무엇인지부터 시작합시다.

당신은 이미 2008년에 App Store의 첫 번째 앱 중 하나로 데뷔한 오디오 인식 앱인 Shazam에 익숙할 것입니다.

13년 후, 그 앱은 꽤 성장했고, Shazam은 심지어 동사로도 사용된다.

그 기술은 Siri의 What Song is This를 강화하며 단축키와 제어 센터에 통합되어 있다.

그 핵심 기술은 배경의 소음에도 불구하고 정확하고 거의 즉각적인 오디오 매칭인 오디오 인식이다.

인식은 오디오의 뚜렷한 어쿠스틱 시그니처를 듣고 Shazam의 자체 콘텐츠 카탈로그 또는 이제 만들 수 있는 사용자 지정 오디오 카탈로그 내에서 정확한 일치를 검색함으로써 달성됩니다.

그러나 SoundAnalysis와 달리, Shazam은 연설, 노래 또는 윙윙거리는 수업을 감지하고 분석하는 오디오 수업이 아니다.

사실, Shazam은 오디오에서 웃음이나 박수와 같은 특정 소리를 전혀 식별하지 않는다.

James는 몇 분 안에 Shazam의 인식 과정을 안내할 것이며, 소리를 감지하고 분류하는 방법에 대해 배우고 싶다면 SoundAnalysis 세션도 확인하세요.

그 동안, 앱에 인식 기능을 제공하는 프레임워크인 ShazamKit에 대해 더 이야기해 봅시다.

ShazamKit은 세 가지 구성 요소로 나뉩니다.

Shazam 카탈로그 인식, 사용자 지정 카탈로그 인식 및 도서관 관리가 있습니다.

Shazam 카탈로그 인식을 통해 앱에 노래 식별을 추가할 수 있습니다.

사용자 지정 카탈로그 인식을 사용하면 한 걸음 더 나아가 임의의 오디오에 대한 장치 내 매칭을 수행할 수 있습니다.

이 세션은 주로 Shazam 카탈로그 인식 및 라이브러리 관리에 초점을 맞출 것이지만, "앱에 대한 사용자 지정 오디오 경험을 만드는" 방법을 보여줄 동료 알렉스와 함께 코딩해야 합니다.

다음으로, 앱에서 ShazamKit을 활용할 수 있는 놀라운 기회를 안내해 드리겠습니다.

완벽한 셀카를 찾는 것부터 시작합시다.

그들은 특정 분위기나 분위기를 만들 때 재미있고 훨씬 더 재미있을 수 있다.

Shazam 카탈로그 인식은 환경에서 재생되는 노래를 인식하고 노래 제목과 아티스트와 같은 노래 메타데이터를 가져오면 도움이 될 수 있습니다.

그러나, 당신은 또한 약간 다른 경험이나 분위기를 만들 수 있으므로, 당신의 셀카는 소파에서 듣고 테이핑하는 것을 넘어섭니다.

ShazamKit API는 또한 장르와 같은 메타데이터를 반환하며, 대신 시내 클럽에서 그 노래를 즐기는 것을 시뮬레이션하는 데 사용할 수 있습니다.

ShazamKit은 또한 가상 학습의 맥락에서 유용할 수 있는 음악보다 더 많은 것을 인식한다.

원격 교육은 화면 수업을 따라잡고 앱 사이를 탐색하는 것을 포함하여 교사와 학생들에게 다양한 도전을 야기할 수 있다.

사용자 지정 카탈로그 인식은 교육 앱 경험을 더욱 원활하게 할 수 있는 기회를 제공합니다.

수업 콘텐츠의 오디오를 일종의 원격 제어로 사용함으로써, 프레임워크는 화상 회의를 통한 콘텐츠 스트림으로 학생 앱에서 동기화된 활동을 트리거할 수 있습니다.

교사들은 수업의 일부를 일시 중지하거나 반복한 후에도 학생들의 앱이 따라간다는 것을 더 쉽게 알 수 있다.

만약 당신이 나만큼 주택 개선 텔레비전을 즐긴다면, 당신은 조각들이 화면에서 깜박이는 것처럼 빨리 가구를 찾으려고 노력하는 도전에 감사할 것입니다.

ShazamKit을 사용하여 대화형 두 번째 화면 AR 경험으로 쇼나 비디오를 쇼핑할 수 있도록 하세요.

실시간으로 시청하든 주문형으로 시청하든, 집에서 보는 시청자는 동시에 스타일을 탐색하고, 시뮬레이션하고, 구매할 수 있습니다.

이제 실생활에서 이것을 시도해 봅시다.

당신과 당신의 친구들이 공유한 순간의 비디오를 보고 백그라운드에서 재생되는 노래를 알고 싶었던 적이 있나요?

예를 들어, 여기 내 친구가 금요일 밤을 비교하기 위해 나에게 보낸 것이 있다.

내가 분위기를 잡게 만드는 사람은 아무도 몰라, 주파수를 느껴, 분위기를 잡아, 너와 나만.

ShazamKit을 사용하여, 내 앱은 인식을 시작했고 Shazam의 카탈로그에서 오디오 일치를 찾았다.

이제 어떤 노래가 재생되고 있는지 알았으니, 라이브러리에 저장하거나 완벽한 주말 재생 목록을 시작하는 데 사용할 수 있습니다.

이제 Shazam 카탈로그 인식이 어떻게 작동하는지 보여주는 James가 있습니다.

고마워, 말, 그리고 안녕, 모두.

저는 Shazam 팀의 엔지니어링 매니저인 James입니다.

오늘 저는 ShazamKit이 Marl의 비디오에서 음악을 인식하는 데 어떻게 사용되었는지 안내할 것입니다.

그래서 Marl이 노래 식별 버튼을 눌렀을 때 무슨 일이 일어났나요?

ShazamKit은 비디오의 오디오 표현을 Shazam의 서버로 보냈다.

Shazam의 음악 카탈로그에서 일치가 발견되었고, 우리가 앱에 표시한 노래에 대한 정보가 반환되었다.

Shazam이 오디오와 어떻게 일치하는지 자세히 살펴봅시다.

Shazam은 오디오 자체와 일치하지 않는다는 점에 유의하는 것이 중요합니다.

오히려, 그것은 우리가 서명이라고 부르는 그것의 손실 표현을 만들고, 그것과 일치한다.

이 접근 방식에는 두 가지 이점이 있다.

첫째, 서명은 그것이 파생된 오디오보다 적어도 한 단계 작다.

이것은 네트워크를 통해 전송해야 하는 데이터의 양을 크게 줄인다.

둘째, 서명은 뒤집을 수 없으며, 이는 주어진 서명에서 원본 오디오를 재구성할 수 없다는 것을 의미합니다.

이것은 고객의 사생활을 보호하는 데 매우 중요하다.

그래서 서명은 어떻게 들리나요?

내가 하나를 연주하고 네가 그 노래를 식별할 수 있는지 볼게.

맞아.

빌리 아일리쉬의 "나의 미래"입니다.

당신은 심지어 당신을 위해 Shazaming을 시도해 볼 수도 있습니다.

이제 카탈로그에 대해 이야기해 봅시다.

카탈로그는 서명 모음이다.

물론, 카탈로그의 서명은 생성된 오디오를 설명하는 관련 메타데이터 없이는 그다지 유용하지 않다.

메타데이터는 원본 오디오에 대한 참조이기 때문에, 우리는 이것들을 참조 서명이라고 부를 것이다.

Shazam 카탈로그는 세계 음악의 대부분을 포함하는 참조 서명 모음이다.

그것은 클라우드에 살고 있으며 애플이 호스팅하고 유지한다.

그것은 최신 트랙으로 정기적으로 업데이트됩니다.

Shazam 카탈로그의 모든 서명은 노래의 전체 오디오에서 생성되었으며 해당 노래의 메타데이터에 대한 해당 참조가 있습니다.

이제, 자신의 오디오와 일치시키고 싶다면 어떨까요?

이 경우, 사용자 지정 카탈로그를 사용할 수 있습니다.

이것들은 음악뿐만 아니라 임의의 오디오에서 생성된 서명 모음이며, 사용자 지정 메타데이터를 추가할 수 있습니다.

클라우드에 있는 Shazam 카탈로그와는 달리, 사용자 지정 카탈로그와 일치하는 것은 앱 내에서 이루어집니다.

자세한 내용은 "ShazamKit으로 사용자 지정 오디오 경험 만들기"와 함께 코드를 시청하세요.

카탈로그를 검색하려면, 일치시키고 싶은 오디오의 작은 부분을 나타내는 쿼리 서명이 필요합니다.

이 앱에서, 그것은 노래를 포함하는 오디오의 일부이다.

이 시각화에서, 쿼리 서명은 노래의 전체 오디오를 나타내는 참조 서명과 비교되었고, 일치하는 것이 발견되었다.

이 같은 과정은 일치하는 후보자를 식별하기 위해 Shazam 카탈로그의 모든 노래에 대해 발생한다.

그래서 첫 번째 다이어그램으로 돌아가서, 우리는 이제 참조 서명과 노래 정보의 모음인 Shazam 카탈로그와 일치하도록 네트워크를 통해 쿼리 서명을 보냈다는 것을 알고 있습니다.

Marl이 식별 버튼을 눌렀을 때, 일치하는 항목이 발견되었고 노래 정보가 반환되었다.

이제, ShazamKit의 좋은 점은 세션 객체를 통해 이 모든 것을 처리한다는 것입니다.

세션은 오디오나 서명을 입력할 수 있다.

결과는 대표를 통해 전달된다.

Shazam 카탈로그와 일치시키기 전에, 개발자 포털에서 앱 식별자에 대해 ShazamKit 앱 서비스를 활성화해야 합니다.

이 단계는 사용자 지정 카탈로그와 일치하는 데 필요하지 않습니다.

좋아, 이게 코드에서 어떻게 생겼는지 보자.

먼저, 나는 세션 객체를 만든다.

기본 이니셜라이저는 Shazam 카탈로그와 일치할 것이다.

다음으로, 나는 찾을 수 있는 모든 경기에 대해 알림을 받을 수 있도록 대리인을 설정했다.

예를 들어 마이크에서 지속적인 오디오 스트림과 일치하는 경우, 해당 시나리오에 최적화되어 있으므로 세션에서 matchStreamingBuffer 방법을 사용하는 것이 좋습니다.

그러나, 우리의 경우, 나는 이미 비디오의 전체 오디오에 접근할 수 있으므로, 서명 생성기를 만들고 오디오를 전달할 것이다.

내가 매치를 수행할 준비가 되면, 나는 내가 전달한 오디오를 서명으로 변환하기 위해 발전기의 서명 방법을 호출할 것이다.

그런 다음 생성된 서명을 세션 객체의 일치 방법에 전달합니다.

우리 앱으로 돌아가.

오디오에서 서명을 생성하고 세션을 사용하여 Shazam의 카탈로그에서 일치하는 노래를 찾은 후, 다음 단계는 노래 정보를 표시하는 것입니다.

앞서, 나는 카탈로그가 어떻게 서명과 메타데이터로 구성되어 있는지 설명했다.

Shazam 카탈로그의 경우, 이 메타데이터는 트랙의 제목과 아티스트와 같은 노래 정보와 앨범 아트와 같은 다른 속성이다.

ShazamKit에서, 이 정보를 나타내는 객체는 미디어 항목이라고 불린다.

방금 일치된 서명의 경우, 일치가 발생한 오디오의 행방과 일치된 오디오와 원본 오디오 간의 주파수 차이와 같은 추가 정보도 반환됩니다.

이것은 일치하는 미디어 항목이라고 불리며 미디어 항목의 하위 클래스입니다.

이전 코드 예제에서, 나는 세션 대리자를 설정했다.

경기를 수행할 때, 우리는 성공, 경기 없음 또는 오류를 알리기 위해 그것에 의존할 수 있다.

서명이 여러 트랙과 일치할 수 있다.

이것들은 일치하는 미디어 항목의 배열로 표현된다.

우리의 앱 코드에서, 우리는 첫 번째 것을 가져갈 것이다.

이제 우리는 반환된 속성 중 일부를 설정할 수 있습니다.

앨범 아트는 artworkURL 속성을 사용하여 가져왔습니다.

노래의 이름과 공연자는 제목과 아티스트 속성에서 채워졌다.

일치하는 노래는 Apple Music 카탈로그에서 사용할 수 있으며 세부 사항이 표시되고 있으므로 Apple Music Identity Guidelines에 명시된 대로 속성이 제공되어야 합니다.

앱에서, 우리는 미디어 항목에서 반환된 Apple Music URL을 실행하는 버튼을 추가했습니다.

앱에서 노래를 인식한 고객은 이것을 Shazam 라이브러리에 저장하기를 원할 수 있습니다.

Shazam 라이브러리는 설치된 경우 Shazam 앱에서 액세스하거나 음악 인식 제어 센터 모듈을 길게 눌러 액세스할 수 있으며, 여러 장치에서 동기화됩니다.

이거 해보자.

먼저, 나는 음악 인식 제어 센터 모듈을 길게 누를 것이다.

그것은 내가 이미 거기에 몇 곡을 가지고 있다는 것을 보여준다.

다음으로, 앱에서 더하기 버튼을 눌러 일치하는 노래를 그 목록에 추가하겠습니다.

이제 나는 내 도서관을 다시 열고 그것이 추가되었는지 확인할 것이다.

좋아요, 그것은 거기에 있고, 제 앱의 이름이 경기의 소스로 나타납니다.

그리고 코드의 모습은 다음과 같습니다.

SHMediaLibrary는 고객의 Shazam 라이브러리에 해당하는 기본 인스턴스를 제공합니다.

이것은 종단간 암호화되어 저장되며 이중 인증을 활성화한 장치에서만 사용할 수 있습니다.

도서관은 Shazam 카탈로그의 노래에 해당하는 항목만 받습니다.

Shazam 라이브러리에 쓰는 데 필요한 특별한 허가는 없지만, 고객에게 알리지 않고 콘텐츠를 저장하지 않는 것이 좋습니다.

라이브러리에 저장된 모든 노래는 그것들을 추가한 앱에 기인할 것이다.

MatchOffset과 같이 당신이 탐색할 수 있도록 만든 MediaItem에 더 많은 속성이 노출되어 있습니다. matchOffset은 노래의 행방을 보여줍니다.

또한, 새로운 MusicKit 프레임워크는 노래와 그 관계를 설명하는 강력한 형식의 객체를 제공한다.

우리는 이것을 스위프트에서 노래 재산으로 사용할 수 있도록 했습니다.

자세한 내용은 "Meet MusicKit for Swift" 세션을 확인할 수 있습니다.

그래서 이제 우리는 완전한 그림을 가지고 있다.

우리는 그 과정을 관리하기 위한 세션을 사용하여 Shazam 카탈로그와 일치하도록 오디오 서명을 보냈습니다.

그런 다음 세션은 대리인을 통해 일치하는 미디어 항목의 형태로 노래 정보를 반환했습니다.

우리는 또한 앱의 고객에게 Shazam 라이브러리에 추가할 수 있는 옵션을 제공했습니다.

이제 내가 Marl에게 돌려줄게, Marl이 너에게 몇 가지 모범 사례를 안내해 줄 거야.

너에게, 말.

고마워, 제임스.

이제 ShazamKit이 무엇인지, 어떻게 작동하는지, 어떻게 적용하는지 알았으니, 빌드를 시작할 준비가 되었습니다.

ShazamKit으로 구현을 시작할 때, 이러한 모범 사례를 고려하십시오.

먼저, 마이크에서 실시간 오디오와 일치한다면, matchStreamingBuffer를 사용하세요.

그것은 더 간단하고 범위가 좋은 서명을 생성하기 위한 많은 기본 논리를 처리합니다.

다음으로, 사용 사례에 마이크가 필요한 경우, 필요한 결과를 얻는 즉시 녹음을 중단하십시오.

그렇게 하면, 불필요한 자원을 소비하거나 고객이 의도한 것보다 더 오래 마이크를 실행하는 것을 피할 수 있습니다.

마지막으로, 고객의 도서관에 편지를 쓰기 전에, 고객이 선택할 수 있는 옵션을 제공하고 처음부터 이 행동을 명확히 하는 것이 좋습니다.

나는 네가 ShazamKit을 알아가는 것을 즐겼기를 바란다.

우리는 당신이 만든 마법의 경험과 기능을 빨리 보고 싶습니다.

우리가 논의한 모든 정보와 문서 링크는 이 세션에 첨부되어 있으므로, 당신은 시작할 준비가 되었습니다.

그리고 사용자 지정 카탈로그 인식과 함께 코드를 시도하는 것을 잊지 마세요.

참여해줘서 고마워. WWDC21의 나머지를 즐기세요.

[음악].