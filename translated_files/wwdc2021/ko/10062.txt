10062

♪ 베이스 음악 연주 ♪

♪

Mathieu Tozer: 안녕하세요, 저는 Mathieu Tozer이고, macOS SwiftUI 팀의 엔지니어입니다.

SwiftUI는 모든 곳에서 훌륭한 앱을 쉽게 만들 수 있도록 하는 것을 목표로 하는 멀티 플랫폼 프레임워크입니다.

새로운 개념이나 API에 접근할 때, 우리는 한 걸음 물러서서 각 플랫폼이 그 기능에서 무엇을 기대하는지 고려합니다.

SwiftUI의 좋은 점은 API와 개념이 모든 플랫폼에 적용된다는 것이며, 이 강연에서 우리는 그것들이 Mac을 위해 어떻게 미세 조정되는지 보여줄 것입니다.

이것은 당신이 스켈레톤 프로젝트를 다운로드하고 저와 함께 Mac 앱을 작성할 수 있는 코드입니다.

시작하기 전에, 앱에서 작업하는 동안 다시 참조할 훌륭한 Mac 앱에 들어가는 몇 가지 주요 원칙을 살펴봅시다.

이것들은 유연하고, 친숙하고, 광범위하며, 정확하다.

Mac 앱은 유연하며, 우리 각자가 개별적으로 사용하는 방식에 맞게 조정됩니다.

이것은 키보드, 마우스, 트랙패드, 스위치 컨트롤, 심지어 iPad에서 Mac을 물리적으로 사용하는 방법부터 시작하여 소프트웨어 자체로 확장됩니다.

나에게 가장 적합한 방식으로 테이블 열, 사이드바, 세부 패널, 디스플레이 모드 및 창을 조정하여 작업 흐름을 사용자 정의할 수 있으며, 인터페이스가 적응할 것입니다.

그리고 동시에, 맥 앱은 친숙하다.

시스템과 일치하는 컨트롤과 디자인 패턴을 사용하면 일반적인 시각 언어 덕분에 앱을 즉시 접근할 수 있습니다.

예를 들어, 파일 메뉴는 내가 항상 새로운 것을 만들기 위해 도달하는 곳이며, 검색 표시줄은 모든 앱 도구 모음에서 일관된 모습을 가지고 있다.

창의 영역을 구역으로 지정하고, 사이드바의 탐색 및 계층 구조, 중앙의 콘텐츠, 상단과 오른쪽을 따라 사용자 기능을 유지하여 앱을 더 접근하기 편하게 만들 수 있습니다.

하지만 그 일관성은 여전히 앱이 독특하고 다른 사람들 사이에서 두드러질 수 있는 여지를 남길 수 있다.

앱 악센트 색상과 같은 사용자 지정을 추가할 수 있습니다.

그리고 사용자 지정 제어가 필요할 때, 시스템 제어에 맞게 설계되어야 합니다.

맥 앱은 광범위하다.

크고 종종 여러 개의 디스플레이는 드릴인 스타일의 내비게이션 스택에 숨기지 않고도 더 많은 정보를 화면에 구성할 수 있다는 것을 의미합니다.

구체적으로, 확장은 개요 보기와 썸네일 미리보기가 있는 사이드바, 일시적인 요소에 대한 팝오버, 컨트롤 창 사이를 전환하는 탭, 콘텐츠를 표시하기 위한 공개 그룹과 같은 컨트롤을 사용하는 것을 의미합니다.

마지막으로, 맥 앱은 정확하다.

그들은 큰 창을 가지고 있을 뿐만 아니라, 그들의 견해는 더 좁은 여백과 간격을 가지고 있어 높은 밀도의 콘텐츠와 컨트롤을 초래하며, 이러한 컨트롤은 마우스 포인터와 함께 사용하도록 설계되었습니다.

즉, 밀도 증가는 복잡성을 증가시킬 필요가 없습니다. 간단하고 단일 목적을 제공하는 앱은 여전히 훌륭한 Mac 앱이 될 수 있습니다.

당신은 아마 당신이 가장 좋아하는 Mac 앱에서 이러한 아이디어를 알아볼 것입니다.

우리는 다음에 이 아이디어들을 실제로 적용할 것이다.

나는 너와 함께 맥 앱을 만들 거야.

여기서 일시 정지를 누르고 이 세션의 시작점과 끝점을 포함하는 프로젝트를 다운로드하세요.

나는 정원 가꾸기를 정말 좋아해.

나는 수년 동안 내 정원을 추적할 수 있는 전용 앱이 있으면 좋을 것 같아.

우리는 Mac용 이 앱을 만들 것이다.

우리는 유연한 윈도우와 높은 정보 밀도와 같은 플랫폼 기능을 활용하여 macOS에서 기분 좋은 방식으로 앱의 데이터와 실제로 상호 작용할 수 있도록 할 것입니다.

왼쪽에는 내 모든 정원 프로젝트의 개요를 보여주는 사이드바가 있다.

나는 정원을 선택하고 테이블 뷰 또는 갤러리에서 모든 식물 세부 사항을 볼 수 있다.

이 앱을 구현하기 시작합시다.

스타터 프로젝트에서 Session1.workspace를 여세요.

우리는 다양한 식물을 포함하는 정원 구조를 가지고 있으며, 속도를 높일 수 있는 몇 가지 견해와 도우미를 가지고 있지만, ContentView에서 시작할 것입니다.

난 그냥 내 사이드바를 축소하고 내 Xcode 미리보기를 위한 공간을 만들 거야.

우리의 Mac 앱은 두 열 레이아웃을 가질 것이다.

나는 이 텍스트 보기를 NavigationView에 삽입할 것이다.

나는 패딩을 제거하고, 텍스트를 사이드바로 바꿀 것이다.

두 번째 열은 우리의 식물 테이블을 위한 것이다.

이 평평한 계층 구조는 Mac의 큰 화면에서 광범위한 내비게이션 경험을 위한 견고한 토대를 제공한다.

우리 사이드바로 가자.

Command-click을 클릭하면, 이 보기를 자체 하위 보기로 추출할 수 있으며, 이름을 "사이드바"로 바꿀 것입니다.

나는 내 가게에 접근해야 해.

그리고 나는 올해 내 정원 목록을 보여주고 싶어.

그리고 우리는 잎 시스템 이미지와 함께 라벨에 각 정원의 이름을 보여줄 것이다.

어떤 정원이 현재인지 보고, 자체 섹션에 역사를 넣은 다음, 펼침 삼각형을 클릭하여 내가 보는 것을 정확하게 제어할 수 있기를 원합니다.

우리는 복잡성을 관리하는 친숙한 방법을 제공하면서 내비게이션 시스템을 더욱 평평하게 하는 DisclosureGroup을 사용할 것입니다.

목록을 ForEach로 변경할 것이며, Command-클릭하면 목록에 포함하도록 선택할 수 있습니다.

우리는 이미 우리가 반복하는 내용을 정의했기 때문에, 우리는 그것을 지울 수 있다.

이제, 이 표현은 우리가 전에 가졌던 것과 동일하지만, 이제 우리는 DisclosureGroup에 ForEach를 포함할 수 있다.

그리고 시스템 이미지의 경우, 음, 이것은 약간 한 입이지만 여기 있습니다.

우리는 chart.bar.doc.horizontal 이미지를 사용할 것이다.

그래, 좋아. 나는 내 정원을 개요 구조로 정리하여 내가 보는 것을 통제할 수 있는 유연성을 제공한다.

하지만 저는 현재 그룹이 기본적으로 열리고, 앱을 열 때마다 확장 상태가 지속되기를 원하며, 이는 제 앱을 더 친숙하게 만듭니다.

expansionState를 저장하기 위해, 우리는 사이드바에 속성을 추가할 것이다.

@SceneStorage 속성 래퍼로 주석을 달고, expansionState의 키를 제공할 것이다.

이것은 SwiftUI에게 앱이 종료될 때 이 속성을 오프로드하고 창이 복원될 때 다시 로드하라고 말할 것이다.

이제 나는 올해 DisclosureGroup에 바인딩을 전달할 것이다...

...그리고 이제 현재 그룹이 확장되었다.

내 사이드바가 조금 빡빡한 것 같아, 그래서 난 그냥 최소 너비를 설정할 거야.

나는 한 섹션에서 역사를 보여줄 것이고, 내가 이전에 만든 GardenHistoryOutline 보기를 사용할 것이다.

나도 그 확장 상태를 통과할 거야.

나는 내 불쌍한 식물에 물이 필요할 때 강조하기 위해 배지를 추가할 것이다.

좋아요, 오른쪽에 있는 세부 사항을 보려면, 선택을 추가해야 합니다.

우리는 선택된 정원의 ID에 바인딩을 추가할 것입니다.

그리고 나서 우리는 그 선택을 목록에 대한 구속력으로 제공할 수 있다.

사이드바의 부모인 ContentView는 사이드바와 테이블에 바인딩을 전달하면서 값을 유지할 것이다.

그래서 나는 이것을 여기에도 복사할 것이고, 실행 사이에 지속되도록 @SceneStorage에 넣을 것이다.

그리고 사이드바에도 전달할게요.

내 사이드바가 좋아 보이는 것 같아.

나는 펼침 삼각형으로 내가 보는 것을 제어할 수 있으며, Mac이 다시 시작되면, 내가 놔둔 대로 복원될 것이다.

우리는 지금 GardenDetail 보기를 시작할 수 있습니다.

그것은 또한 선택에 구속력이 필요하다.

그리고 내가 Command-클릭하면, 보기의 정의로 이동할 수 있다.

이 보기에는 이미 우리 가게의 속성과 우리가 곧 사용할 다른 속성이 포함되어 있습니다.

그것은 또한 정원의 이름과 연도를 내비게이션 제목과 자막으로 표시하도록 설정되어 있다.

우리는 세부 보기에서 자체 변수로 테이블을 구현할 것이며, 본문에서 사용할 것입니다.

단순히 정원의 식물 목록을 보여주는 것으로 시작합시다.

우리는 수평 스택 보기에서 다른 식물 속성을 표시할 수 있지만, 보여줄 데이터가 많고, 그 중 많은 부분이 텍스트입니다.

또한, 우리는 식물을 알파벳순으로 또는 우리가 심은 순서대로 정렬할 수 있는 기능을 추가하고 싶습니다.

이러한 이유로, 우리는 테이블에 식물을 전시할 것이다.

테이블은 화면 공간을 잘 활용하여 광범위한 UI에서 데이터를 보고, 필터링하고, 정렬하고, 편집할 수 있는 정확한 방법을 제공합니다.

일반적으로, 보여줄 시각적 요소가 있고 복잡한 정렬이 필요하지 않다면, 목록을 사용하세요.

그렇지 않으면, 여러 열이 필요하다면, 테이블을 고려해 보세요.

나는 목록을 테이블로 바꾸고 각 행을 나누는 몇 개의 열을 제공할 것이다.

그리고 그렇게 쉽게, 나는 하나의 열이 있는 테이블이 있어!

그럼 열을 좀 더 추가해 봅시다.

나는 각 식물이 자라는 데 얼마나 걸릴지 알고 싶어서, 그것을 위해 기둥을 추가할 것이다.

주요 경로를 제공하는 대신, 나는 TableColumn의 콘텐츠 폐쇄를 열 것이고, 그것은 식물을 건네줄 것이다.

이제, 우리는 여기서 원하는 뷰를 제공할 수 있지만, daysToMaturity 속성은 정수이므로, 포맷된 문자열이 있는 텍스트 뷰를 제공할 것입니다.

나는 식물이 많고, 항상 더 많이 심고 있다.

행을 선택하고 정렬할 수 있다면 우리 식물을 체계적으로 유지하는 데 도움이 될 것이다.

그래서 먼저 우리는 선택에 바인딩을 추가할 수 있다.

테이블을 정렬할 수 있도록 할 때, 우리는 sortOrder 바인딩과 각 열에 대한 키 경로를 제공해야 합니다.

그래서 우리는 daysToMaturity 열에 주요 경로를 추가해야 할 것이다.

테이블의 힘을 정말 유연하게 하기 위해, Views 폴더의 TableColumns 파일에서 몇 개의 열을 더 붙여넣자.

그들은 우리가 몇 가지 주요 날짜를 정하고 식물을 가장 좋아하는 것으로 표시하게 할 것이다.

지금은 미리보기를 끄고 앱을 실행할 거야.

이 모든 식물 데이터를 봐!

행을 선택할 수 있고, 열 머리글을 클릭하여 정렬할 수 있습니다.

이것은 훌륭하지만, 지금은 테이블에 새 식물을 추가하거나 여러 식물에 물을 주는 것으로 표시하는 것과 같이 정원을 관리하는 데 필요한 많은 기본 작업을 수행할 방법이 없습니다.

도구 모음은 이러한 종류의 작업에 친숙한 장소입니다. macOS 사용자가 앱을 사용하는 방법을 발견할 수 있는 표준 위치입니다.

식물을 추가하는 버튼부터 시작하여 여기에 도구 모음을 추가할 수 있습니다.

우리는 "Plant 추가"라는 제목과 systemImage "plus"라는 제목의 라벨을 줄 것입니다.

나는 짓고 달릴 거야, 그리고 이제 내 테이블에 식물을 추가할 수 있어!

앱의 인터페이스를 통한 사용자 지정은 우리가 정원을 보는 것을 선호하는 방법과 같은 도구 모음에서도 표면화될 수 있습니다.

여기에 DisplayModePicker를 추가할 수 있습니다.

나는 많은 식물을 가지고 있고, 그것들을 주문할 수 있지만, 행 수를 빠르고 정확하게 좁히는 것이 좋을 것이다.

우리는 항상 Mac의 하드웨어 키보드에 즉시 액세스할 수 있으므로, 검색 가능한 수정자를 테이블에 추가하고 searchText에 바인딩을 전달할 것입니다.

searchText는 테이블에 전달되는 식물 배열을 필터링하는 데 사용하는 세부 정보 보기의 속성입니다.

그리고 그것이 우리가 검색 필터링을 추가하기 위해 해야 할 전부입니다!

우리는 창문 구조를 설치했지만, 나는 정말로 내 채소밭과 뒷마당 화단을 동시에 볼 수 있었으면 좋겠어.

음, 우리가 이미 이 능력을 가지고 있다는 것이 밝혀졌다.

파일 메뉴에서 새 창을 열 수 있으며, 각 창에는 자체 선택 및 사이드바 확장 상태가 있습니다.

물론 각 도구 모음은 자체 창에 속하므로, 채소 패치나 화단에 식물을 추가할 수 있습니다.

내 식물은 정기적으로 물을 줘야 해.

식물을 분류하고 걸러내고, 몇 줄을 선택하고, 한 번에 물을 뿌린 것으로 표시할 수 있기를 원합니다.

우리는 macOS 메인 메뉴에 이러한 작업을 수행하는 명령을 추가할 것입니다.

메뉴는 심지어 검색할 수 있는 친숙한 UI로, 사람들이 당신의 앱을 탐색할 수 있도록 도와줍니다.

사용자 지정 명령을 추가하기 전에, 시스템이 우리에게 제공하는 몇 가지 명령을 추가하는 것으로 시작합시다.

GardenApp 파일로 이동하세요.

WindowGroup에 명령 수정자를 추가하고 SidebarCommands()를 추가할 것입니다.

이제 사이드바는 보기 메뉴에서 또는 키보드 단축키로 전환할 수 있습니다.

이제 우리의 맞춤 명령을 위해.

메인 메뉴 폴더에서 PlantCommands 파일을 여세요.

나는 가장 앞쪽 창문에 있는 정원에 액션을 보내고 싶어, 그래서 나는 정원 변수가 필요할 거야.

우리는 @FocusedBinding 속성 래퍼를 사용하여 FocusedValues의 확장에서 정의한 사용자 지정 속성에 대한 키 경로를 전달할 것입니다.

식물 명령 메뉴 항목은 또한 표에서 어떤 식물이 선택되었는지 알아야 물을 주는 것으로 확인할 수 있으므로 선택 사항도 전달해야 합니다.

몸으로 이동하면, 명령이 보기와 유사하게 선언된다는 것을 알 수 있습니다. 즉, 직접 만들고 메뉴를 나타내는 사용자 지정 명령 트리를 만들 수 있습니다.

첫 번째는 추가 식물 행동이다.

이제 이미 도구 모음에서 식물을 추가할 수 있지만, 메인 메뉴에는 앱이 수행할 수 있는 모든 가능한 작업이 포함되어야 하는 반면, 도구 모음은 일반적으로 편의를 위해 일부 하위 집합일 뿐입니다.

이것은 무언가를 만들기 위한 행동이기 때문에, 우리는 그것을 익숙한 곳에 둘 것이다.

CommandGroup을 사용하여, 우리는 그것을 파일 메뉴의 newItem 앞에 놓을 것이다.

내 급수 활동을 위해, 나는 그것을 "식물"이라는 새로운 CommandMenu에 넣고 싶다.

이것은 우리 앱의 보기 메뉴 옆에 나타날 것이다.

이 보기에는 단순히 정원을 변형시키는 버튼과 버튼 동작을 정의하는 수정자가 포함되어 있습니다.

우리는 여러 개의 창문이 있지만, 메뉴 바는 하나뿐이다.

나는 내 화단에 당근을 넣고 싶지 않은데, 메뉴가 어떤 정원에 액션을 보내야 할지 어떻게 알 수 있을까?

GardenDetail 보기로 돌아가서, 나는 내 키 경로와 바인딩을 전달하여 테이블에 focusedSceneValue 수정자를 추가할 것이다.

나도 그 선택을 위해 똑같이 할 거야.

이것은 시스템이 전체 장면에 초점을 맞출 때 주어진 키 경로에 대한 이러한 값을 노출하도록 지시한다.

마지막으로, GardenApp 파일에서 이전에 추가한 SidebarCommands() 이후에 새 명령을 추가해야 합니다.

그러면 SwiftUI는 그것들을 메인 메뉴에 추가하는 것을 알게 될 것이다.

나는 이제 메인 메뉴에서 가장 앞쪽 창문에 있는 정원에 식물을 넣을 수 있다.

나는 또한 물을 주는 것으로 표시해야 하는 식물을 선택할 수 있으며, 식물 메뉴에서 그렇게 할 수 있다.

모든 앱의 동작에 메뉴를 추가하면 키보드 단축키를 활성화하고 앱에서 작업을 수행할 수 있는 다양한 방법을 제공함으로써 앱의 유연성이 높아집니다.

또한 행동의 발견 가능성을 지원하여 사람들이 앱의 기능을 탐색하고 발견할 수 있도록 합니다.

말하자면, 2부에서는 악센트 색상, 테이블 간의 드래그 앤 드롭, iOS 기기로 식물 사진을 찍고 첨부하는 방법을 포함하여 Jeff와 함께 앱에 더 많은 기능과 광택을 추가하게 될 것입니다.

우리는 오늘 많은 것을 다루었다.

우리는 SwiftUI를 사용하여 처음부터 Mac 앱의 인터페이스를 구축했으며, 각 구성 요소가 훌륭한 Mac 앱을 만들 수 있는 것에 어떻게 기여하는지 보여주었습니다.

봐줘서 고마워!

♪