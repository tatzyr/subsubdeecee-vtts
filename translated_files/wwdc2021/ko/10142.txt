10142

♪ 베이스 음악 연주 ♪

♪

사이먼 골드레이: 안녕하세요.

이 세션은 HLS로 미디어를 빈틈없이 전환하는 방법에 관한 것입니다.

저는 사이먼이고 여기 애플의 스트리밍 미디어 팀의 일원입니다!

AVQueuePlayer를 사용하시나요, 아니면 고객에게 애플리케이션에서 HLS 항목의 원활한 다음 스타일 재생을 제공하고 싶으신가요?

프로듀서가 의도한 연속성을 미디어에 소개하고 싶으신가요?

미디어를 더 오래 즐길 수 있는 경험을 제공함으로써 고객을 지원할 수 있을까요?

그렇다면, 이제 HLS 항목을 빈틈없이 전환할 수 있는 방법을 배우기 위해 최고의 세션을 조정했습니다.

여기 우리의 의제가 있습니다.

우리는 당신이 이 새로운 기능으로 제공할 수 있는 매력적인 미디어 경험을 조사할 것이며, 미디어 제작 요구 사항을 자세히 설명하고, 모범 사례를 강조하는 몇 가지 재생 목록 예제를 살펴보고, 데모로 끝낼 것입니다.

AVQueuePlayer에서 HLS 지원 AVPlayerItems 간 전환의 이점은 간단합니다.

지금까지, 전환 지점은 약간 거슬리는 것일 수 있다; 가청 결함에서 순간적인 시각적 딸꾹질 또는 심지어 불확실한 버퍼링의 표시에 이르기까지 모든 것.

Gapless 아이템 전환은 애플리케이션이 고객과 콘텐츠 사이에 제공하는 유대감을 유지합니다.

아마도 당신은 "그 다이얼을 만지지 마세요"라는 문구를 기억할 것입니다.

한 에피소드의 끝에서 다른 에피소드의 시작으로 원활하게 전환되는 에피소드 치료를 만들 수 있습니다.

Gapless 전환은 우리가 오랫동안 즐겼던 원활한 트랙 투 트랙 앨범 경험을 복제할 수 있게 해준다.

이것을 할 때, 우리는 살아있거나 의도적으로 작성되었을 수 있는 것을 더 정확하게 재현하고 있다.

우리는 끊이지 않고 방해받지 않는 경험을 제공할 수 있다.

우리는 선형 프로그래밍을 복제할 수 있다.

하지만 우리는 또한 시청자를 한 작업이나 장면에서 다음 작업으로 직접 이어지는 역동적이고 아마도 대화형 경험을 제공할 수 있습니다.

일련의 운동이나 다른 교육 매체 사이의 전환을 고려해 보세요.

틈 없는 전환을 통해 우리는 이제 프로그래밍 방식으로 정확한 연속성을 유지하면서 시청각 시퀀스의 장면을 바느질할 수 있습니다.

당신은 담당자를 추가할 수 있습니다...

...또는 운동에 재사용 대기시간을 추가하세요.

우리는 HTTP를 통한 적응형 비트레이트 미디어 스트리밍의 모든 이점을 가진 미디어를 제공하면서 이 모든 것을 달성할 수 있습니다.

물론, 우리도 이걸 사용해!

Apple Music의 새로운 기능은 HLS를 통해 콘텐츠를 제공하고 각 노래 사이에 끊김 없는 전환을 달성합니다.

우리는 이것을 고객에게 제공하게 되어 매우 기쁘고, 당신의 고객들에게도 이것을 제공하고 싶습니다.

이제 HLS 콘텐츠의 동일한 항목 전환에 영향을 미치기 위해 통합해야 하는 저작 요구 사항을 자세히 살펴보겠습니다.

HLS 매니페스트에서 순차적 항목 간의 오디오 형식 연속성을 제공하는 변형을 제공함으로써 간격 없는 전환을 가능하게 합니다.

콘텐츠는 다음과 같은 오디오 미디어 특성과 일치하는 변형을 제공해야 합니다: 페어플레이 스트리밍의 사용, 스트림 태그의 코덱 속성에 의해 지정된 오디오 코덱 및 미디어 태그의 채널 속성에 지정된 채널 수.

다른 샘플 속도와 비트 깊이로 오디오 변환을 제공하기로 결정한 경우, 갭리스 전환을 억제할 수 있습니다.

경기를 제공하고 연속성을 유지하기 위한 동일한 조언이 이러한 특성에도 적용된다.

즉, 간격 없는 전환을 달성하기 위해, 연속적으로 줄지어 있는 항목에 대해 각 변형에 동등한 오디오 미디어를 제공해야 합니다.

마지막으로, 미디어를 작성할 때, CMAF 저작 지침을 준수하십시오.

CMAF는 "일반적인 미디어 애플리케이션 형식"을 의미합니다.

이 MPEG 사양에는 프라이밍과 나머지 프레임의 존재를 알리기 위해 편집 목록을 사용하는 구체적인 권장 사항이 있습니다.

이제 두 후보 항목의 마스터 변형 재생 목록을 검사하여 간단한 예를 살펴봅시다.

이 HLS 매니페스트에서 나는 네 가지 시청각 변형을 제공했다: 한 쌍의 720p 변형과 한 쌍의 1080p 변형.

각 쌍 내에서, 저는 고효율 고급 오디오 코덱, HE_AAC 및 AAC Low Complexity 또는 AAC_LC로 인코딩된 변형을 제공합니다.

이 예에서, 재생 조건은 HE_AAC와 페어링된 720p 비디오의 선택을 지원한다는 것을 고려하십시오.

재생이 끝날 무렵, AVQueuePlayer는 적어도 처음에는 후속 항목에서 제공되는 유사하게 인코딩된 변형을 선택합니다.

네트워크 조건이 이제 더 높은 품질의 계층을 지원하더라도 이것은 사실이다.

갭리스 전환을 서비스하는 것은 갭리스 전환을 할 때 고품질을 선택하는 것보다 더 높은 우선 순위입니다.

재생이 진행됨에 따라, 적응형 비트레이트 휴리스틱이 평가되고, 조건이 지속되면, 플레이어는 더 높은 품질로 원활하게 전환할 것이다.

공상적인

이제 우리가 두 번째 항목에서 HE_AAC를 제공하지 않았다고 가정해 봅시다.

이 경우, AVQueuePlayer는 오디오 연속성과 간격 없는 전환을 유지할 수 없지만 재생 조건에 가장 적합한 초기 변형을 자유롭게 선택할 수 있습니다.

우리가 틈 없는 전환을 지원하기 위해 콘텐츠를 작성했다고 가정해 봅시다.

그런 경우, 우리는 AVQueuePlayer를 사용하는 방법을 상기시켜야 한다.

여기 짧은 코드 스니펫이 있습니다.

우리는 두 개의 AVPlayerItems를 만들고 재생 전에 순서대로 대기열에 넣습니다.

우리의 아이템은 두 개의 다른 URL에서 왔다는 점에 유의하세요.

AVQueuePlayer를 만든 후, "후 삽입" 방법을 사용하여 대기열 플레이어에게 의도한 시퀀스를 알릴 수 있습니다.

남은 것은 "놀이"라는 메시지뿐이다.

당신과 공유하고 싶은 고급 기술은 단일 자산의 사용을 허용합니다.

이 자산에서 여러 AVPlayerItems를 인스턴스화할 수 있습니다.

AVQueuePlayer에서 대기열을 내기 전에 각 별개의 AVPlayerItem에 대해 서로 다른 지점을 정의할 수 있습니다.

AVPlayerItem seekToTime 메소드를 사용하여, 우리는 우리의 지점을 정의할 수 있다.

그런 다음 우리는 forwardPlaybackEndTime으로 요점을 정의할 수 있습니다.

여기 이 개념의 삽화가 있습니다.

항목 1, 2, 3은 모두 동일한 세 장면으로 구성된 동일한 AVAsset에서 공급됩니다.

그것들은 내가 seekToTime을 사용하여 각각 다른 포인트로 신호를 보냈고, forwardPlaybackEndTime을 사용하여 뚜렷한 포인트를 정의했다는 점에서 구별된다.

이제 저는 이 세 가지 동일한 항목을 AVQueuePlayer에 넣을 수 있으며, 제가 달성한 것은 맞춤형 동적 시퀀스입니다.

이제 데모와 함께 작동 중인 갭리스 전환을 보고 들어봅시다.

이 데모에서, 우리는 세 개의 운동 비디오 스트림을 대화식으로 바느질할 것이다.

AVKit 컨트롤을 각각에 표시하도록 두면 이것들이 뚜렷한 스트림 리소스임을 실제로 볼 수 있습니다.

세 가지 모두의 원활한 재생을 보여주는 것으로 시작한 다음 대화식으로 시퀀스를 편집할 것입니다.

당신의 소프트웨어에서, 당신은 프로그래밍 방식으로 같은 것을 제공하거나 재주문을 수행하는 것을 상상할 수 있습니다.

맞아! 워밍업을 하자.

♪ 활기찬 전자 음악 ♪

♪

준비됐어, 안 됐어? 언덕을 달리자.

♪ 활기찬 힙합 음악 ♪

♪

그게 다야! 우린 끝났어. 쿨다운할 시간이야.

♪ 차분한 전자 음악 ♪

♪

그걸 보는 것만으로도 땀을 흘릴 수 있어.

나는 "그게 다야, 우리는 끝났어"로 바로 건너뛰고 언덕 달리기를 건너뛰고 싶어.

여기 샌프란시스코에는 그런 게 많아.

이렇게 하려면, 운동 세트의 순서를 편집해 봅시다.

나는 언덕 운동을 꼭대기로 옮길 거야.

이것은 내가 워밍업을 한 다음 즉시 그리고 틈 없이 쿨다운으로 넘어갈 수 있게 해준다.

그런 다음 첫 번째 운동으로 두 번째 위치에 있는 워밍업을 선택하는 것으로 시작하겠습니다.

맞아! 워밍업을 하자.

♪ 활기찬 전자 음악 ♪

♪

그게 다야! 우린 끝났어. 쿨다운할 시간이야.

♪ 차분한 전자 음악 ♪

♪

우리가 이 세션에서 배운 요점을 요약해 봅시다.

우리는 HLS를 사용하여 갭리스 전환을 달성하려면 오디오 형식이 일치하는 각 항목에 변형을 제공해야 한다는 것을 배웠습니다.

그런 다음 우리는 AVQueuePlayer에게 항목을 순서대로 대기열에 넣어 간격 없는 전환을 수행하도록 지시하는 것이 얼마나 쉬운지 보았습니다.

우리는 변형 발견을 위한 새로운 API를 소개하는 관련 세션이 하나 있습니다.

소프트웨어나 서비스가 일치하는 오디오 형식의 항목을 보장할 수 없다면 그 세션이 유용할 수 있습니다.

이 세션을 즐기고 남은 WWDC 2021을 즐기시기 바랍니다.

고마워.

♪