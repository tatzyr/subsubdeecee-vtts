10064

♪ ♪

안녕.

저는 데이비드 던컨이고, 제 동료 에릭 두디악과 함께 UIKit이 iOS 15에서 버튼을 더 좋게 만드는 모든 방법에 대해 논의할 것입니다.

크고 작은 앱의 필수품인 겸손한 버튼.

버튼은 아마도 사용자 입력을 요청하는 가장 일반적인 방법일 것이다.

버튼은 다양한 형태로 제공됩니다: 크고 작은; 이미지, 텍스트 또는 둘 다; 배경이 있거나 없는; 그리고 무지개의 모든 색상.

몇 가지 특정 스타일에 집중하는 것으로 시작합시다.

iOS 15에서 UIKit은 이제 이 네 가지 기본 스타일을 제공합니다.

당신이 이미 알고 사랑하는 평범한 스타일에 추가하는 것은 새로운 회색, 색조, 채워진 스타일입니다.

하지만 UIKit은 iOS 15에서 버튼을 더 세련되게 만드는 것이 아니다.

그것은 또한 그들을 더 강력하게 만든다.

동적 유형은 이제 기본적으로 지원되며, 멀티라인 텍스트 지원은 버튼 시스템에 내장되어 있습니다.

접근성은 모든 접근성 기능에 대한 더 나은 지원과 기본적으로 더 쉽게 접근할 수 있는 버튼을 생성함으로써 향상되었습니다.

그리고 이러한 모든 새로운 기능으로, 버튼은 그 어느 때보다 더 사용자 정의할 수 있으므로, 원하는 스타일을 정확히 얻을 수 있습니다.

그래서 그 입문서와 함께, 새로운 버튼 시스템의 진입점인 UIButtonConfiguration을 만나자.

모든 모양과 크기의 버튼의 최고의 공급 업체인 버튼 백화점에 오신 것을 환영합니다.

버튼 백화점은 항상 최고의 버튼을 원하므로, UIButtonConfiguration을 채택하기 위해 앱을 업데이트합시다...

가장 중요한 로그인 버튼으로 시작하세요.

현재 앱은 이 코드로 로그인 버튼을 생성하여 "로그인"이라는 제목의 일반 시스템 버튼을 생성합니다.

하지만 이것은 매우 중요한 버튼이므로, 새로운 채워진 스타일을 사용하여 더 눈에 띄도록 합시다.

그리고 우리는 끝났어!

UIButton은 제공하는 구성에서 기존 API로 설정된 제목과 이미지를 자동으로 통합하여 모든 코드를 한 번에 업데이트하지 않고도 버튼의 스타일을 쉽게 업데이트할 수 있기 때문에 UIButtonConfiguration을 쉽게 시작할 수 있습니다.

하지만 코드를 업데이트할 준비가 되면, UIButtonConfiguration에는 단순한 스타일보다 더 많은 것이 있습니다.

다음에 그걸 살펴봅시다.

이것은 우리의 현재 "장바구니에 담기" 버튼입니다.

지금은 꽤 기본적인 버튼이지만, 우리는 버튼 구매 경험을 터보 충전하기 위해 UIButtonConfiguration에서 제공하는 새로운 기능을 활용할 것입니다.

우선, 우리는 다른 버튼을 보완하기 때문에 색조 스타일을 사용할 것입니다.

우리는 색조 버튼 구성을 만들고, 제목을 설정하고, 이전에 버튼을 구성한 방법과 일치하는 것으로 시작합니다.

다음으로 우리는 채워진 구성으로 버튼을 만듭니다.

이것은 이미 상당한 개선이지만, 그것을 정상으로 넘어가자.

우리가 할 다음 개선 사항은 버튼에 이미지를 추가하여 한 눈에 무엇을 하는지 쉽게 결정할 수 있도록 하는 것입니다.

우리 디자이너는 정말로 후행 위치에 있는 이미지를 원하기 때문에, 이미지 속성을 설정하는 것과 함께, 우리는 또한 imagePlacement 속성을 설정하여 우리가 원하는 곳에 이미지를 정확하게 배치합니다.

하지만 새로운 "장바구니에 담기" 버튼에 추가하고 싶은 두 가지 기능이 더 있습니다.

첫 번째는 UIButtonConfiguration의 자막 기능을 사용하는 여러 항목을 주문할 때 일어나는 일을 미리 보는 것입니다.

두 번째는 버튼을 누를 때 윤곽이 그려진 이미지에서 채워진 버전으로 전환하는 것이다.

그것을 위해, 우리는 적절한 시간에 이미지 속성을 업데이트해야 한다.

이러한 변경 사항 중 하나가 발생할 때 버튼을 올바르게 업데이트하기 위해, 우리는 configurationUpdateHandler를 추가할 것입니다.

configurationUpdateHandler는 버튼이 업데이트가 필요할 때 호출되어 중앙 집중식으로 변경할 수 있습니다.

일반적으로 버튼의 구성을 변경하므로, 일반적으로 시작 구성을 얻는 것으로 시작하여 변경된 구성을 설정하는 것으로 끝납니다.

여기서 우리는 버튼의 기존 구성으로 시작하지만, 쉽게 새 구성을 만들고 대신 모든 매개 변수를 작성할 수 있습니다.

먼저 버튼에 대한 올바른 이미지를 설정해 봅시다.

버튼을 누르면, isHighlighted는 true를 반환하고, 장바구니 기호의 채워진 버전을 설정합니다.

그렇지 않으면, 우리는 설명된 버전을 사용합니다.

isHighlighted는 UIButton의 상태이기 때문에, 해당 값이 변경될 때 configurationUpdateHandler가 호출되도록 자동으로 정렬합니다.

다음으로, itemQuantityDescription이 변경되면 자막을 업데이트합니다.

하지만 itemQuantityDescription은 UIButton의 속성이 아닙니다.

값이 변경될 때 configurationUpdateHandler가 호출되도록 어떻게 준비하나요?

고객이 구매할 버튼 수를 변경하면, 앱은 itemQuantityDescription을 업데이트합니다.

장바구니에 추가 버튼도 업데이트되도록 하기 위해, 우리의 didSet 핸들러는 setNeedsUpdateConfiguration을 호출하여 configurationUpdateHandler를 호출하고 버튼의 업데이트를 트리거합니다.

Button Emporium에서, 우리는 우리가 좋아하지 않는 버튼을 만난 적이 없으며, UIButtonConfiguration을 사용하면 좋아할 것이 많습니다.

다음 버튼을 업데이트하기 전에, 몇 가지 다른 기능을 빠르게 다루도록 합시다.

버튼은 이제 활동 표시기를 표시할 수 있으므로 앱이 바쁘다는 피드백을 쉽게 제공할 수 있습니다.

버튼 구성에서 showsActivityIndicator를 true로 설정하기만 하면, 필요한 경우 이미지를 교체하여 표시기를 표시할 것입니다.

버튼 레이아웃의 측면을 조정하는 것은 간단하며, 버튼에 콘텐츠가 어떻게 배치되는지 더 잘 제어할 수 있습니다.

여기서 contentInsets가 버튼 가장자리에 공간을 확보하는 방법을 볼 수 있으며, imagePadding과 titlePadding을 통해 이러한 요소 사이의 공간을 늘릴 수 있습니다.

그리고 UIKit은 이러한 구성 요소를 자동으로 레이아웃하지만, 제목이 서로 정렬되는 방식과 버튼의 콘텐츠가 콘텐츠 영역 내에서 정렬되는 방식을 제어할 수 있습니다.

시맨틱한 스타일링은 디테일을 파헤칠 필요 없이 응집력 있는 스타일로 버튼을 쉽게 만들 수 있게 해준다.

간단한 채워진 버튼부터 시작하여 baseBackgroundColor, baseForegroundColor, cornerStyle 및 buttonSize를 구성하여 사용자 지정 버튼을 생성하고 추가 노력 없이 누르거나 비활성화하는 것과 같은 주제별 상태를 자동으로 얻을 수 있습니다.

하지만 많은 자동화에도 불구하고, 우리의 가장 중요한 "체크 아웃" 버튼과 같이 필요한 것을 정확히 가지고 있어야 하는 시간에 대한 자세한 사용자 정의를 만드는 것은 여전히 쉽습니다.

버튼 백화점 고객이 최소한의 소란으로 버튼을 얻을 수 있도록, 체크아웃 버튼은 크고 찾기 쉽다.

그것을 만들기 위해, 우리는 채워진 스타일로 시작하고, 크기를 크게 설정하고, 이미지와 제목을 작성할 것입니다.

버튼을 탭하면, 우리는 카트 처리를 시작하고 활동 표시기를 표시하고 싶습니다.

이를 활성화하기 위해, 우리는 구성의 showsActivityIndicator 속성을 관리하기 위해 configurationUpdateHandler를 추가합니다.

이전과 마찬가지로, isCartBusy 속성의 변경은 체크 아웃 버튼에서 setNeedsUpdateConfiguration을 호출하여 필요에 따라 활동 표시기를 켜고 뺄 수 있도록 합니다.

그리고 파란색은 좋지만, 우리는 확실히 인상을 남기고 싶다.

그래서 우리의 정확한 색상이 배경에 사용되도록 하기 위해, UIButtonConfiguration의 UIBackgroundConfiguration의 backgroundColor를 설정합시다.

그게 훨씬 나아.

이제 UIButtonConfiguration이 어떻게 당신의 버튼을 그 어느 때보다 더 좋게 보이게 할 수 있는지에 대해 논의했으므로, 버튼이 할 수 있는 다른 새로운 것들에 대해 이야기하기 위해 에릭에게 넘겨주겠습니다.

고마워, 데이비드.

이제 버튼이 어떻게 모양을 사용자 정의할 수 있는지 확인했으니, 버튼이 어떻게 기능을 사용자 정의할 수 있는지 살펴봅시다.

대부분의 버튼은 간단한 푸시 버튼이지만, 때때로 버튼은 약간의 추가 동작이 필요합니다.

우리가 조사할 첫 번째 것은 토글 버튼이다.

이 버튼들은 UIControl에서 선택한 상태를 유지합니다.

그들은 버튼을 누를 때마다 자동으로 켜고 끕니다.

그것은 또한 필요에 따라 프로그래밍 방식으로 변경될 수 있다.

온 및 오프 상태에 대한 내장 스타일 외에도, 우리는 UIButtonConfiguration을 활용하여 이러한 온 및 오프 상태의 프레젠테이션을 사용자 정의할 수 있습니다.

iOS에서 토글 버튼의 개념은 새로운 것이 아니다.

음악 앱의 가사 버튼과 같은 몇 가지 버튼을 눈치챘을 수도 있습니다.

그것은 이렇게 플레이어에서 가사를 켜고 뺀다.

기능적으로, 이것은 UISwitch와 마찬가지로 작동하지만, UI의 공간을 절약하고 앱의 디자인에 훨씬 더 잘 맞습니다.

토글 버튼은 캘린더의 이와 같은 UIBarButtonItem에서도 작동합니다.

상단 바에서, 날짜 세부 사항을 활성화하고 비활성화할 수 있습니다.

그것을 누르면 세부 사항의 표시가 전환됩니다.

이 경우, UIBarButtonItem에 선택한 상태에 대해 읽거나 설정할 수 있는 새로 선택된 속성이 있습니다.

이제 토글 버튼을 채택하기 위해 버튼 엠포리움을 업데이트합시다.

우리의 앱은 우리가 사고 싶은 버튼의 종류를 찾아볼 수 있게 해준다.

하지만 브라우징하는 동안, 나는 현재 재고가 있는 것만 정독하고 싶다.

여기서, 우리는 절대적으로 모든 것을 보여주는 것과 재고가 있고 배송할 준비가 된 것 사이를 전환하기 위해 토글 버튼을 추가했습니다.

이것은 토글 버튼의 훌륭한 사용이다.

한 가지 장점은, 버튼이기 때문에, 라벨이 그것의 일부이기 때문에, 여기서 무엇이 전환되고 있는지 매우 명확하게 한다는 것이다.

그래서 우리가 그걸 어떻게 만들었는지 확인해 보자.

여기, 우리는 버튼을 설정하는 기본 사항을 가지고 있습니다.

토글 버튼을 만들기 위해, 우리는 changesSelectionAsPrimaryAction을 true로 설정하기만 하면 됩니다.

이제 토글 버튼이야.

그게 다야.

우리는 또한 내부 모델과 일치하도록 선택된 상태를 설정할 수 있습니다.

이제, 우리는 단지 두 가지 상태와 끄기보다 조금 더 복잡한 것을 원할지도 모른다.

전환할 수 있는 더 많은 옵션이 있는 버튼의 경우, 팝업 버튼을 사용할 수 있습니다.

팝업 버튼은 iOS에 이미 존재하는 풀다운 버튼과 가까운 상대이다.

이것들은 눌렀을 때 메뉴를 제공한다.

팝업 버튼은 한 걸음 더 나아가 메뉴 요소 중 하나만 선택되도록 합니다.

그들은 또한 현재의 선택을 그들의 제목과 이미지로 보여준다.

팝업 버튼을 만드는 것은 실제로 풀다운 버튼을 만드는 것의 확장이다.

그것들을 위해, 메뉴가 버튼에 할당된다.

메뉴를 기본 작업으로 만들기 위해, showsMenuAsPrimaryAction 속성은 true로 설정되어 있습니다.

팝업 버튼은 changesSelectionAsPrimaryAction 속성을 켜서 한 걸음 더 나아간다.

그게 필요한 전부야.

그것들은 UISegmentedControl처럼 작동하지만 분할된 컨트롤에 맞는 것보다 더 많은 선택이 있을 때 유용할 수 있다.

그들은 또한 선택이 고유한 계층 구조를 가지고 있는 경우에 유용할 수 있다.

이 스타일의 버튼의 몇 가지 예가 오늘날 존재한다.

예를 들어, 전화 앱은 팝업 버튼을 사용하여 발신 전화를 위해 SIM 사이를 전환합니다.

그리고 여기 버튼이 메뉴를 제공합니다.

보조 스위치 라인을 선택한다.

결과적으로, 버튼은 새로운 발신 회선으로 업데이트됩니다.

새로운 선택을 표시하기 위해 라벨과 이미지가 업데이트되었습니다.

마찬가지로, 우리는 Button Emporium에서 이것을 사용할 수 있다.

우리가 버튼을 탐색할 때, 우리는 다양한 색상으로 제공되는 몇 가지를 가지고 있다.

색상 수는 선택할 수 있는 고정된 세트이지만, 아마도 세분화된 제어에는 너무 크지만, 우리가 실제로 인라인으로 바꾸고 싶을 만큼 충분히 작습니다.

이것은 팝업 버튼의 훌륭한 사용입니다. 왜냐하면 우리는 선택이 버튼의 제목이 되기를 원하기 때문입니다.

그러면 우리는 모든 색상 선택을 제시할 수 있다.

그리고 새로운 선택에서, 우리의 앱은 색상 선택을 위해 업데이트할 수 있습니다.

그것에 대한 코드를 조사해 봅시다.

여기에 실제로 업데이트할 수 있는 간단한 풀다운 메뉴를 만드는 코드가 있습니다.

토글 버튼과 마찬가지로, 우리는 changesSelectionAsPrimaryAction을 true로 전환합니다.

그리고 이제 그것은 팝업 버튼이다.

목록의 첫 번째 색상 대신 특정 색상을 기본 선택으로 하고 싶다면, 메뉴를 설정할 때 "션다"로 미리 할당할 수 있습니다.

그것은 그것을 기본 선택으로 만들 것이다.

우리는 항상 정확히 단일 요소를 가질 현재 선택된 요소에 대한 버튼의 메뉴를 요청하여 선택을 확인할 수 있습니다.

그리고 코드에서 새 것을 설정해야 한다면, 버튼의 메뉴 속성에서 요소의 상태를 변경할 수 있습니다.

팝업 버튼은 인터페이스 빌더에서도 만들 수 있지만, 이 경우 고정 목록을 사용하는 대신 서버에서 색상을 동적으로 검색하고 싶기 때문에 코드로 할 것입니다.

인터페이스 빌더와 함께 새로운 버튼 시스템과 버튼 유형을 사용하는 방법에 대해 자세히 알아보려면, "스타일로 인터페이스 구축" 비디오를 확인하세요.

이 새로운 버튼 유형의 가장 좋은 부분 중 하나는 Mac Catalyst에서 자동으로 작동한다는 것이다.

Mac 사용자는 버튼이 풀다운, 팝업 및 토글 버튼을 포함하여 특정 방식으로 보이고 작동하기를 기대합니다.

이 iOS 버튼을 사용하면 자동으로 Mac 버전으로 업데이트됩니다.

그래서 여기에 우리는 프레젠테이션 내내 사용해 온 것처럼 iPad 앱의 버튼을 선택할 수 있습니다. 여기에는 기본 테두리 없는 버튼과 새로운 구성을 사용하는 일부 버튼과 팝업 및 풀다운 버튼이 포함됩니다.

그리고 여기 그들은 Mac Catalyst에 대한 수동 변경 사항이 없습니다.

노련한 Mac 사용자가 기대하는 방식.

우리는 풀다운 및 팝업 버튼을 위한 Mac 표시기를 포함한 표준 베젤 버튼을 제공합니다.

그러나 어떤 경우에는 iPad 버튼의 추가 사용자 지정이 Mac 앱에도 더 적합할 수 있습니다.

그것을 위해, 버튼은 동작 스타일을 기본 자동에서 iPad로 변경하는 것을 지원합니다.

이것은 우리가 이전에 만든 체크아웃 버튼과 같은 앱의 매우 눈에 띄는 사용자 지정 버튼에 유용합니다.

Mac Catalyst 앱 구축 및 사용자 정의에 대한 자세한 내용은 "Mac Catalyst의 새로운 기능" 비디오를 확인하세요.

팝업 버튼 예제에서 알 수 있듯이, 대부분의 기능은 UIMenu의 신규 및 기존 기능 위에 구축됩니다.

UIMenu는 많은 훌륭한 상호 작용을 위해 UIButton 및 UIBarButtonItem과 정말 잘 어울립니다.

우리는 팝업 버튼과 풀다운 버튼을 모두 만들기 위해 버튼의 동작을 조정하는 방법을 탐구했습니다.

iOS와 iPadOS에서 이러한 동작은 시각적 사용자 지정과 독립적이므로 UIButtonConfiguration과 쉽게 결합하여 다양한 버튼 스타일을 만들 수 있습니다.

이 버튼들은 또한 메뉴 항목이 더 명확성을 위해 자막을 가질 수 있는 기능과 같은 메뉴 개선의 이점을 누릴 수 있다.

게다가, iOS와 iPadOS의 하위 메뉴 탐색도 개선되어 메뉴 내에서 계층 구조를 만들 수 있습니다.

그리고 어떤 경우에는 풀다운 버튼의 하위 메뉴가 단일 선택 메뉴 자체로 작동하기를 원할 수도 있습니다.

예를 들어, 작업 메뉴 내에 "정렬별" 메뉴가 있는 경우 유용할 수 있습니다.

새로운 메뉴 개선 사항 중 일부는 이것을 훨씬 쉽게 만들 수 있게 해준다.

여기 우리 코드의 하위 메뉴를 사용하는 사용자 지정 풀다운 바 버튼 항목이 있습니다.

몇 가지 행동과 결과를 정렬하기 위한 하위 메뉴가 있습니다.

그 하위 메뉴 내의 메뉴 항목을 수동으로 켜고 끄는 대신, 우리는 이 하위 메뉴를 만들 때 단일 선택을 위한 것임을 나타낼 것입니다.

이제 팝업 버튼이 하위 메뉴 내에서 얻는 것과 동일한 자동 선택 동작을 얻습니다.

선택된 요소 중 하나만 허용되며, 선택한 요소는 사용자가 탭하면 업데이트됩니다.

그것은 우리가 이전에 팝업 메뉴로 했던 것과 똑같은 방식으로 코드로 업데이트하거나 접근할 수 있습니다.

그리고 메뉴에 자체 하위 메뉴가 있는 경우 단일 선택 동작이 작동합니다.

전체 하위 트리에서 한 번에 하나의 요소만 선택할 수 있습니다.

그리고 selectedElements 속성은 하위 메뉴의 선택을 포함하며, 하위 메뉴가 없는 것처럼 쉽게 접근할 수 있습니다.

그래서 그것이 당신의 앱에서 더 나은 버튼을 만드는 방법입니다.

플랫폼에 일관성을 유지하면서 훨씬 더 풍부한 스타일링을 잠금 해제하기 위해 스타일링을 더 잘 제어할 수 있도록 버튼에 구성을 추가하세요.

또한 기존 피커 인터페이스나 컨트롤을 팝업 또는 토글 버튼으로 대체하여 보다 간소화된 상호 작용을 하는 방법을 살펴보세요.

이러한 변경으로, 제거하거나 단순화할 수 있는 UIButton 하위 클래스를 찾을 수 있습니다.

그리고 시스템이 당신의 버튼을 더 잘 이해할 수 있기 때문에, 당신은 훨씬 더 나은 Mac Catalyst 변환을 자동으로 얻을 수 있습니다.

우리와 함께 해주셔서 감사드리며, 버튼의 세계에 대한 깊은 다이빙을 즐겼기를 바랍니다.

[쾌활한 음악].